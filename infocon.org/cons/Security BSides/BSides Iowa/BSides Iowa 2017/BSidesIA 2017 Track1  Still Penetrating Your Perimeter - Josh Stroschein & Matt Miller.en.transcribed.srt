1
00:00:21,270 --> 00:00:26,600
we didn't know<font color="#E5E5E5"> we had</font><font color="#CCCCCC"> that nice feel so</font>

2
00:00:24,360 --> 00:00:31,259
<font color="#CCCCCC">we put our biosphere so this is</font><font color="#E5E5E5"> Joshua</font>

3
00:00:26,600 --> 00:00:35,660
does awesome stuff right we got mine do

4
00:00:31,260 --> 00:00:38,540
some stuff to a good stuff alright so

5
00:00:35,660 --> 00:00:41,069
today we're going to talk about Noah in

6
00:00:38,540 --> 00:00:42,870
Word documents and we've had a couple

7
00:00:41,070 --> 00:00:44,790
presentations that are sort of related

8
00:00:42,870 --> 00:00:48,120
to this so we had one talking<font color="#CCCCCC"> about</font>

9
00:00:44,790 --> 00:00:51,629
ransomware we<font color="#CCCCCC"> had one talking about the</font>

10
00:00:48,120 --> 00:00:52,830
use of exploit<font color="#CCCCCC"> kits and we're going</font><font color="#E5E5E5"> to</font>

11
00:00:51,629 --> 00:00:54,720
talk here a little bit about the fact

12
00:00:52,830 --> 00:00:57,420
that it looks<font color="#CCCCCC"> like exploit kits are sort</font>

13
00:00:54,720 --> 00:00:59,640
of waning in the past two<font color="#CCCCCC"> years so we</font>

14
00:00:57,420 --> 00:01:02,370
<font color="#E5E5E5">don't have as many people using exploit</font>

15
00:00:59,640 --> 00:01:03,840
kits part of this might be as you saw

16
00:01:02,370 --> 00:01:06,179
the talk on exploit kits they talked

17
00:01:03,840 --> 00:01:08,759
about<font color="#E5E5E5"> this very complex structure that</font>

18
00:01:06,180 --> 00:01:11,399
they have to use in<font color="#E5E5E5"> order to get their</font>

19
00:01:08,759 --> 00:01:14,190
exploit to run on somebody's machine and

20
00:01:11,399 --> 00:01:15,810
they're having to use a variety of

21
00:01:14,190 --> 00:01:18,380
streams of either<font color="#CCCCCC"> zero days which are</font>

22
00:01:15,810 --> 00:01:22,619
not very often or basically unpatched

23
00:01:18,380 --> 00:01:24,960
vulnerabilities that they can<font color="#CCCCCC"> use so</font><font color="#E5E5E5"> you</font>

24
00:01:22,619 --> 00:01:28,950
have to keep getting<font color="#E5E5E5"> new ones because as</font>

25
00:01:24,960 --> 00:01:30,568
systems get identified right they're

26
00:01:28,950 --> 00:01:32,179
<font color="#E5E5E5">going to get patched and so they are no</font>

27
00:01:30,569 --> 00:01:34,410
longer<font color="#CCCCCC"> going to have those</font>

28
00:01:32,179 --> 00:01:35,759
vulnerabilities in them so you got to

29
00:01:34,410 --> 00:01:38,220
<font color="#CCCCCC">keep finding new ones so you can keep</font>

30
00:01:35,759 --> 00:01:39,600
infecting clients so you have to keep

31
00:01:38,220 --> 00:01:41,880
that up today<font color="#CCCCCC"> and you're</font><font color="#E5E5E5"> going to go</font>

32
00:01:39,600 --> 00:01:42,660
after all of the<font color="#CCCCCC"> big popular</font><font color="#E5E5E5"> set up so</font>

33
00:01:41,880 --> 00:01:44,940
you're going<font color="#CCCCCC"> to go after flash</font>

34
00:01:42,660 --> 00:01:47,520
Silverlight in<font color="#E5E5E5"> Java but if we've looked</font>

35
00:01:44,940 --> 00:01:50,340
at in recent years<font color="#CCCCCC"> where we have less</font>

36
00:01:47,520 --> 00:01:52,830
flash right we have if you look at

37
00:01:50,340 --> 00:01:55,590
chrome which we talked about right

38
00:01:52,830 --> 00:01:58,020
<font color="#E5E5E5">chrome has its own built-in version of</font>

39
00:01:55,590 --> 00:02:00,479
flash right it has we've got silver

40
00:01:58,020 --> 00:02:02,729
light which is going away and we've got

41
00:02:00,479 --> 00:02:06,599
Java which is index is deprecated by all

42
00:02:02,729 --> 00:02:09,449
the different major browsers so we see

43
00:02:06,599 --> 00:02:14,849
those sort of<font color="#E5E5E5"> going away as being useful</font>

44
00:02:09,449 --> 00:02:17,299
and so we also they have to use the main

45
00:02:14,849 --> 00:02:20,099
generate domain generation algorithms

46
00:02:17,300 --> 00:02:21,930
and they have to keep modifying these

47
00:02:20,099 --> 00:02:23,910
right because every<font color="#CCCCCC"> time all of you out</font>

48
00:02:21,930 --> 00:02:24,720
there that are<font color="#E5E5E5"> going to have boxes that</font>

49
00:02:23,910 --> 00:02:26,130
are going<font color="#E5E5E5"> to get threat intelligence</font>

50
00:02:24,720 --> 00:02:28,410
your and say<font color="#E5E5E5"> okay these are the bad</font>

51
00:02:26,130 --> 00:02:30,269
domains that you need to<font color="#E5E5E5"> not go to so</font>

52
00:02:28,410 --> 00:02:33,810
they have to generate more domains that

53
00:02:30,270 --> 00:02:34,720
they can keep attacking people and we've

54
00:02:33,810 --> 00:02:37,780
got you are

55
00:02:34,720 --> 00:02:40,980
redirects or the gateways that people go

56
00:02:37,780 --> 00:02:43,180
through<font color="#E5E5E5"> DNS and then they're also</font>

57
00:02:40,980 --> 00:02:44,739
utilizing a whole bunch of compromise

58
00:02:43,180 --> 00:02:46,690
toast so if you want<font color="#E5E5E5"> to deliver this now</font>

59
00:02:44,740 --> 00:02:49,510
where we've got to compromise some<font color="#CCCCCC"> host</font>

60
00:02:46,690 --> 00:02:51,790
in order to give that malware its people

61
00:02:49,510 --> 00:02:55,750
right so they would connect to you know

62
00:02:51,790 --> 00:02:57,700
Bob<font color="#CCCCCC"> you know diner or something and that</font>

63
00:02:55,750 --> 00:02:59,800
would have<font color="#E5E5E5"> be hosting the malware so you</font>

64
00:02:57,700 --> 00:03:02,200
the person being infected with

65
00:02:59,800 --> 00:03:03,490
downloaded so those<font color="#CCCCCC"> are also going to</font>

66
00:03:02,200 --> 00:03:05,260
<font color="#E5E5E5">get past because people are going to</font>

67
00:03:03,490 --> 00:03:08,770
notify them hey we see this is there's

68
00:03:05,260 --> 00:03:12,370
malware on your site and so they're

69
00:03:08,770 --> 00:03:13,660
going<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> and get them to be</font><font color="#E5E5E5"> fixed so</font>

70
00:03:12,370 --> 00:03:16,690
what we've seen is that they've moved

71
00:03:13,660 --> 00:03:19,630
from using exploit kits to using social

72
00:03:16,690 --> 00:03:21,579
engineering and macros so more and<font color="#CCCCCC"> more</font>

73
00:03:19,630 --> 00:03:23,980
we're getting emails that have this

74
00:03:21,580 --> 00:03:25,390
information<font color="#E5E5E5"> in them that says oh here's</font>

75
00:03:23,980 --> 00:03:27,579
the word document that you<font color="#E5E5E5"> need to open</font>

76
00:03:25,390 --> 00:03:29,410
it has information that is relevant to

77
00:03:27,580 --> 00:03:32,170
you<font color="#E5E5E5"> all right so trying to trick the</font>

78
00:03:29,410 --> 00:03:34,150
user and training is hard we have a

79
00:03:32,170 --> 00:03:36,339
<font color="#E5E5E5">really hard time getting users to not</font>

80
00:03:34,150 --> 00:03:38,860
click them I mean it's hard for me and

81
00:03:36,340 --> 00:03:41,019
Josh to imagine somebody seeing an email

82
00:03:38,860 --> 00:03:42,489
and saying oh that's got macros I should

83
00:03:41,019 --> 00:03:44,260
really enable that right and clicking

84
00:03:42,489 --> 00:03:46,330
<font color="#CCCCCC">the button to say yeah let's let's run</font>

85
00:03:44,260 --> 00:03:48,700
that macro right I do it all<font color="#CCCCCC"> the time</font>

86
00:03:46,330 --> 00:03:52,209
you're<font color="#E5E5E5"> on a Mac it doesn't matter right</font>

87
00:03:48,700 --> 00:03:54,820
so and and the other thing<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> users</font>

88
00:03:52,209 --> 00:03:56,950
have jobs right unlike us they have<font color="#E5E5E5"> jobs</font>

89
00:03:54,820 --> 00:03:58,859
what they need<font color="#CCCCCC"> to get stuff done and to</font>

90
00:03:56,950 --> 00:04:00,940
get stuff done a lot of<font color="#E5E5E5"> times they have</font>

91
00:03:58,860 --> 00:04:02,530
documents that have macros that they

92
00:04:00,940 --> 00:04:04,930
need<font color="#CCCCCC"> to run right office is this</font>

93
00:04:02,530 --> 00:04:06,940
standard that everybody uses you go to a

94
00:04:04,930 --> 00:04:09,519
corporation they're going to use<font color="#E5E5E5"> office</font>

95
00:04:06,940 --> 00:04:12,519
and so people<font color="#E5E5E5"> are going to use office</font>

96
00:04:09,519 --> 00:04:14,110
and then office has digital basic built

97
00:04:12,519 --> 00:04:18,149
into it right so you can run vbscript

98
00:04:14,110 --> 00:04:20,260
within that and macros just work so

99
00:04:18,149 --> 00:04:22,120
there are<font color="#CCCCCC"> a lot of applications where</font>

100
00:04:20,260 --> 00:04:25,719
people are actually doing work using

101
00:04:22,120 --> 00:04:27,610
Excel or using word and they're using

102
00:04:25,720 --> 00:04:30,760
<font color="#E5E5E5">macros within that so they can get their</font>

103
00:04:27,610 --> 00:04:32,440
jobs done and you know so people<font color="#E5E5E5"> are</font>

104
00:04:30,760 --> 00:04:34,479
just used to this and<font color="#E5E5E5"> if they're used to</font>

105
00:04:32,440 --> 00:04:35,950
hitting that enable macros button right

106
00:04:34,479 --> 00:04:38,860
and it stuff works and they're just

107
00:04:35,950 --> 00:04:40,060
<font color="#E5E5E5">going to keep doing</font><font color="#CCCCCC"> that so then what</font>

108
00:04:38,860 --> 00:04:42,520
happens is you're going<font color="#E5E5E5"> to have somebody</font>

109
00:04:40,060 --> 00:04:44,050
who clicked on a macro and now you've

110
00:04:42,520 --> 00:04:45,340
got an attacker on your network and you

111
00:04:44,050 --> 00:04:47,000
have to deal<font color="#E5E5E5"> with that and we've seen</font>

112
00:04:45,340 --> 00:04:51,909
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of the things they can deliver</font>

113
00:04:47,000 --> 00:04:56,240
i thinkin do clickjacking or they can do

114
00:04:51,910 --> 00:04:58,960
the delivery of ransomware on on

115
00:04:56,240 --> 00:05:01,490
people's computers so we've got a lot of

116
00:04:58,960 --> 00:05:02,930
problems to<font color="#E5E5E5"> deal with and so josh is</font>

117
00:05:01,490 --> 00:05:09,740
going to talk about more of the details

118
00:05:02,930 --> 00:05:11,360
on on that yes so my role today is to go

119
00:05:09,740 --> 00:05:14,090
<font color="#CCCCCC">through some</font><font color="#E5E5E5"> of the more technical</font>

120
00:05:11,360 --> 00:05:15,590
techniques that they're<font color="#E5E5E5"> using to try to</font>

121
00:05:14,090 --> 00:05:17,719
walk through those in power point the

122
00:05:15,590 --> 00:05:19,310
<font color="#E5E5E5">best I</font><font color="#CCCCCC"> can I don't have a lot of demos</font>

123
00:05:17,720 --> 00:05:21,740
at one video we'll see<font color="#E5E5E5"> how well we can</font>

124
00:05:19,310 --> 00:05:23,630
<font color="#E5E5E5">actually see that before we get into it</font>

125
00:05:21,740 --> 00:05:26,000
though I did want to just make<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that</font>

126
00:05:23,630 --> 00:05:27,980
I frame exactly what portion of this

127
00:05:26,000 --> 00:05:29,540
scenario we're talking<font color="#CCCCCC"> about we're</font>

128
00:05:27,980 --> 00:05:31,370
<font color="#E5E5E5">starting with and really focusing on the</font>

129
00:05:29,540 --> 00:05:33,140
office document we'll<font color="#E5E5E5"> talk a lot of</font>

130
00:05:31,370 --> 00:05:34,430
about word but<font color="#CCCCCC"> that could be Excel and</font>

131
00:05:33,140 --> 00:05:36,590
PowerPoint anything that could support

132
00:05:34,430 --> 00:05:39,560
macros which i believe is entire to the

133
00:05:36,590 --> 00:05:41,840
office suite<font color="#E5E5E5"> and then what happens after</font>

134
00:05:39,560 --> 00:05:43,910
those macros are executed and so as as

135
00:05:41,840 --> 00:05:45,739
you<font color="#CCCCCC"> as you probably know in a lot of</font>

136
00:05:43,910 --> 00:05:48,560
attack scenarios that involves malware

137
00:05:45,740 --> 00:05:50,600
exploit kits<font color="#E5E5E5"> office documents a variety</font>

138
00:05:48,560 --> 00:05:52,580
of others there's usual set usually

139
00:05:50,600 --> 00:05:54,560
several stages and so we're really just

140
00:05:52,580 --> 00:05:56,740
talking<font color="#E5E5E5"> about this first stage whether</font>

141
00:05:54,560 --> 00:05:59,390
that's shellcode or executables or

142
00:05:56,740 --> 00:06:01,190
vbscript or powershell or some other

143
00:05:59,390 --> 00:06:03,440
<font color="#E5E5E5">oily to object has been embedded in the</font>

144
00:06:01,190 --> 00:06:05,870
document this is really the first two

145
00:06:03,440 --> 00:06:07,520
stages that we're talking<font color="#E5E5E5"> about this</font>

146
00:06:05,870 --> 00:06:10,220
stuff<font color="#E5E5E5"> that I have right now in the</font>

147
00:06:07,520 --> 00:06:13,340
bracket the job<font color="#E5E5E5"> of that typically is to</font>

148
00:06:10,220 --> 00:06:16,160
go<font color="#E5E5E5"> to the cloud and to get another stage</font>

149
00:06:13,340 --> 00:06:17,960
whether that's more shellcode that's

150
00:06:16,160 --> 00:06:20,060
more power shell or scripts or that's

151
00:06:17,960 --> 00:06:22,219
the actual malware itself and then it

152
00:06:20,060 --> 00:06:23,900
drops and execute stat or detonates that

153
00:06:22,220 --> 00:06:25,280
so I'm<font color="#E5E5E5"> not worried too much about that</font>

154
00:06:23,900 --> 00:06:26,690
for<font color="#E5E5E5"> this talk we're going to focus on</font>

155
00:06:25,280 --> 00:06:28,640
the document<font color="#E5E5E5"> the macros of some of those</font>

156
00:06:26,690 --> 00:06:32,660
things<font color="#CCCCCC"> that the macros are immediately</font>

157
00:06:28,640 --> 00:06:35,150
doing as I said<font color="#CCCCCC"> focuses on the office</font>

158
00:06:32,660 --> 00:06:37,070
suite focus today is primarily on the

159
00:06:35,150 --> 00:06:38,719
macros themselves and some of the

160
00:06:37,070 --> 00:06:41,479
behaviors<font color="#CCCCCC"> that I've observed in the last</font>

161
00:06:38,720 --> 00:06:45,169
few<font color="#CCCCCC"> months but it's not exclusive to so</font>

162
00:06:41,479 --> 00:06:47,300
we have seen TV 2017<font color="#CCCCCC"> 0 1 99</font><font color="#E5E5E5"> just</font>

163
00:06:45,169 --> 00:06:49,460
recently that came out require very

164
00:06:47,300 --> 00:06:51,350
little user interaction the user did

165
00:06:49,460 --> 00:06:53,299
have to click on OK dialogues in order

166
00:06:51,350 --> 00:06:55,370
to retrieve some content for<font color="#CCCCCC"> a link</font><font color="#E5E5E5"> and</font>

167
00:06:53,300 --> 00:06:56,630
then once that link was brought in and

168
00:06:55,370 --> 00:06:57,979
I've got a little<font color="#E5E5E5"> more details at the</font>

169
00:06:56,630 --> 00:06:58,569
end<font color="#CCCCCC"> of the slide</font><font color="#E5E5E5"> deck here if we have</font>

170
00:06:57,979 --> 00:07:00,998
<font color="#E5E5E5">time</font>

171
00:06:58,569 --> 00:07:02,289
then everything the script first and

172
00:07:00,999 --> 00:07:04,210
everything was pretty much automated

173
00:07:02,289 --> 00:07:06,128
<font color="#E5E5E5">from their social engineering as we</font>

174
00:07:04,210 --> 00:07:07,448
<font color="#E5E5E5">already talked about embedded objects if</font>

175
00:07:06,129 --> 00:07:09,669
a user's has to abstract and

176
00:07:07,449 --> 00:07:13,990
double-click something then we're not

177
00:07:09,669 --> 00:07:15,609
really relying on macros in that case so

178
00:07:13,990 --> 00:07:19,119
what our macros is<font color="#E5E5E5"> everybody familiar</font>

179
00:07:15,610 --> 00:07:21,879
with macros you know<font color="#E5E5E5"> BB a visual basic</font>

180
00:07:19,119 --> 00:07:23,080
<font color="#CCCCCC">for applications I guess I've had</font><font color="#E5E5E5"> the</font>

181
00:07:21,879 --> 00:07:24,729
benefit of not having to write any

182
00:07:23,080 --> 00:07:27,399
macros for a living I just inspect the

183
00:07:24,729 --> 00:07:29,529
malicious ones but everything<font color="#CCCCCC"> that comes</font>

184
00:07:27,399 --> 00:07:32,559
with macros is pretty well documented on

185
00:07:29,529 --> 00:07:34,389
msdn so if you<font color="#E5E5E5"> look for</font><font color="#CCCCCC"> vba you'll find</font>

186
00:07:32,559 --> 00:07:36,610
a lot of resources there on msdn the

187
00:07:34,389 --> 00:07:37,749
microsoft developer network of course

188
00:07:36,610 --> 00:07:39,779
there are features of malware authors

189
00:07:37,749 --> 00:07:42,369
are going to use<font color="#E5E5E5"> that aren't as</font>

190
00:07:39,779 --> 00:07:43,599
necessarily documented and one of those

191
00:07:42,369 --> 00:07:45,729
<font color="#E5E5E5">one that we're seeing very prevalent</font>

192
00:07:43,599 --> 00:07:47,680
right now is the use of the windows api

193
00:07:45,729 --> 00:07:49,508
and we'll go through an example<font color="#E5E5E5"> here so</font>

194
00:07:47,680 --> 00:07:51,729
now we're that uses inside of the macros

195
00:07:49,509 --> 00:07:53,889
maybe a call to virtual a lock from

196
00:07:51,729 --> 00:07:56,789
kernel32 in order to allocate memory and

197
00:07:53,889 --> 00:07:59,019
stage into that memory some shellcode so

198
00:07:56,789 --> 00:08:00,789
they're probably<font color="#E5E5E5"> one of the first things</font>

199
00:07:59,019 --> 00:08:03,009
that I do when inspecting a malicious

200
00:08:00,789 --> 00:08:04,990
document and even before i get into that

201
00:08:03,009 --> 00:08:06,430
<font color="#E5E5E5">just to help again kind of gauge the</font>

202
00:08:04,990 --> 00:08:08,949
level of<font color="#CCCCCC"> detail that</font><font color="#E5E5E5"> I go into these</font>

203
00:08:06,430 --> 00:08:10,749
often times there are easy or easier

204
00:08:08,949 --> 00:08:12,369
methods if I just want to see what an

205
00:08:10,749 --> 00:08:14,229
office document is reaching<font color="#E5E5E5"> out to or</font>

206
00:08:12,369 --> 00:08:16,449
the files<font color="#E5E5E5"> that is dropping I can just</font>

207
00:08:14,229 --> 00:08:18,008
execute it in a sandbox or a vm<font color="#E5E5E5"> and</font>

208
00:08:16,449 --> 00:08:20,259
collect those artifacts when it's done

209
00:08:18,009 --> 00:08:21,759
if I want to<font color="#E5E5E5"> find</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> actually what</font>

210
00:08:20,259 --> 00:08:23,529
those macros are doing if there's new

211
00:08:21,759 --> 00:08:25,719
techniques that it's using then then I

212
00:08:23,529 --> 00:08:27,969
go a little bit deeper<font color="#E5E5E5"> so one of the</font>

213
00:08:25,719 --> 00:08:30,430
<font color="#CCCCCC">first things that I do when I look at</font>

214
00:08:27,969 --> 00:08:32,318
trying to determine an office document

215
00:08:30,430 --> 00:08:34,419
if it has macros or not because that

216
00:08:32,318 --> 00:08:37,029
<font color="#E5E5E5">usually then derives the direction i go</font>

217
00:08:34,419 --> 00:08:38,769
for the next step in my analysis the

218
00:08:37,029 --> 00:08:40,659
first thing it is probably Oh Allie dump

219
00:08:38,769 --> 00:08:42,938
and i'm<font color="#E5E5E5"> assuming everybody's heard of</font>

220
00:08:40,659 --> 00:08:44,529
has everyone<font color="#E5E5E5"> heard of oly dome from</font>

221
00:08:42,938 --> 00:08:46,569
forbid your<font color="#CCCCCC"> stevens as a Python script</font>

222
00:08:44,529 --> 00:08:48,430
it helps us to dump content and

223
00:08:46,569 --> 00:08:50,529
information about an office document

224
00:08:48,430 --> 00:08:52,000
particularly to see the streams and the

225
00:08:50,529 --> 00:08:54,100
<font color="#CCCCCC">resources in that file we're going to go</font>

226
00:08:52,000 --> 00:08:57,490
<font color="#E5E5E5">through all those here just real brief</font>

227
00:08:54,100 --> 00:08:59,110
in a moment another method is of course

228
00:08:57,490 --> 00:09:01,089
just<font color="#CCCCCC"> to open a document and see what</font>

229
00:08:59,110 --> 00:09:02,589
happens if it asked me to enable content

230
00:09:01,089 --> 00:09:05,680
that I know that<font color="#CCCCCC"> it's trying</font><font color="#E5E5E5"> to execute</font>

231
00:09:02,589 --> 00:09:07,569
macros and I can also<font color="#E5E5E5"> use the IDE that's</font>

232
00:09:05,680 --> 00:09:09,670
built into the office<font color="#E5E5E5"> suite so anybody</font>

233
00:09:07,569 --> 00:09:10,959
that develops macros weather for

234
00:09:09,670 --> 00:09:11,839
malicious or nine malicious purposes

235
00:09:10,959 --> 00:09:14,239
they

236
00:09:11,840 --> 00:09:16,310
can also open up<font color="#E5E5E5"> basically like a visual</font>

237
00:09:14,240 --> 00:09:18,530
<font color="#E5E5E5">studio type editor in order to build the</font>

238
00:09:16,310 --> 00:09:20,750
project that<font color="#E5E5E5"> associates those macros</font>

239
00:09:18,530 --> 00:09:22,010
with that document edit them debug them

240
00:09:20,750 --> 00:09:23,750
and<font color="#CCCCCC"> everything so I can actually</font><font color="#E5E5E5"> use</font>

241
00:09:22,010 --> 00:09:27,500
those you can use those as well in order

242
00:09:23,750 --> 00:09:29,810
<font color="#CCCCCC">to help with your analysis so as I said</font>

243
00:09:27,500 --> 00:09:33,770
probably the first one<font color="#E5E5E5"> that I go to is 0</font>

244
00:09:29,810 --> 00:09:38,420
le dump I had an opportunity<font color="#E5E5E5"> to meet</font>

245
00:09:33,770 --> 00:09:39,920
Didier last week spring<font color="#CCCCCC"> ice this is what</font>

246
00:09:38,420 --> 00:09:42,170
the<font color="#CCCCCC"> output from the tool will look like</font>

247
00:09:39,920 --> 00:09:43,550
again it's a<font color="#E5E5E5"> Python script so I are</font>

248
00:09:42,170 --> 00:09:46,189
going<font color="#E5E5E5"> to be running it from a command</font>

249
00:09:43,550 --> 00:09:49,969
dot exe or a terminal and you'll see

250
00:09:46,190 --> 00:09:51,920
<font color="#E5E5E5">that it lists a bunch of</font><font color="#CCCCCC"> information the</font>

251
00:09:49,970 --> 00:09:53,390
first bit is the index so that just

252
00:09:51,920 --> 00:09:54,680
<font color="#CCCCCC">helps us to get a frame</font><font color="#E5E5E5"> of reference</font><font color="#CCCCCC"> for</font>

253
00:09:53,390 --> 00:09:58,819
<font color="#E5E5E5">the different streams that we're talking</font>

254
00:09:54,680 --> 00:10:00,859
about probably one of the more important

255
00:09:58,820 --> 00:10:02,690
pieces of information right<font color="#CCCCCC"> now of all</font>

256
00:10:00,860 --> 00:10:04,070
these indexes of all these resources<font color="#E5E5E5"> in</font>

257
00:10:02,690 --> 00:10:06,230
<font color="#E5E5E5">this office document what actually</font>

258
00:10:04,070 --> 00:10:07,700
contains macros and the little m will

259
00:10:06,230 --> 00:10:10,100
indicate that that string contains

260
00:10:07,700 --> 00:10:11,600
macros so now<font color="#E5E5E5"> I can usually narrow my</font>

261
00:10:10,100 --> 00:10:12,890
search down my research down to just

262
00:10:11,600 --> 00:10:16,970
<font color="#E5E5E5">those streams you can see in this</font>

263
00:10:12,890 --> 00:10:18,470
screenshot 8 10 and 12 have macros now

264
00:10:16,970 --> 00:10:20,960
you'll also notice that there's an upper

265
00:10:18,470 --> 00:10:23,060
case in a<font color="#E5E5E5"> lower case M and what that is</font>

266
00:10:20,960 --> 00:10:25,130
discriminating against is streams that

267
00:10:23,060 --> 00:10:27,349
are macro definitions and streams that

268
00:10:25,130 --> 00:10:29,540
actually contain macro code so the ones

269
00:10:27,350 --> 00:10:31,160
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> uppercase M are the ones that</font>

270
00:10:29,540 --> 00:10:34,040
actually contain code the other ones<font color="#E5E5E5"> are</font>

271
00:10:31,160 --> 00:10:35,270
just defining a class or module and so

272
00:10:34,040 --> 00:10:39,079
typically we don't<font color="#E5E5E5"> need to worry about</font>

273
00:10:35,270 --> 00:10:41,510
those that's<font color="#E5E5E5"> the size of the stream and</font>

274
00:10:39,080 --> 00:10:43,340
I point<font color="#CCCCCC"> that out because every once in a</font>

275
00:10:41,510 --> 00:10:45,530
while you'll find maybe some embedded

276
00:10:43,340 --> 00:10:47,540
content in a stream and it'll<font color="#E5E5E5"> have a</font>

277
00:10:45,530 --> 00:10:49,069
very abnormally large size and so it

278
00:10:47,540 --> 00:10:50,930
might<font color="#CCCCCC"> be worth taking some time and</font>

279
00:10:49,070 --> 00:10:52,730
dumping that<font color="#E5E5E5"> stream and inspecting that</font>

280
00:10:50,930 --> 00:10:54,739
to see what's inside of it you'll see an

281
00:10:52,730 --> 00:10:56,270
example today I guess I kind of got

282
00:10:54,740 --> 00:10:57,710
lucky and<font color="#E5E5E5"> that you'll recognize some</font>

283
00:10:56,270 --> 00:10:59,540
patterns and you can<font color="#CCCCCC"> you can dump an</font>

284
00:10:57,710 --> 00:11:04,100
executable from the stream from there

285
00:10:59,540 --> 00:11:05,930
and<font color="#E5E5E5"> you'll see</font><font color="#CCCCCC"> that in a moment my</font>

286
00:11:04,100 --> 00:11:09,080
<font color="#E5E5E5">favorite macros are all called pouchy</font>

287
00:11:05,930 --> 00:11:11,540
food and discord so you can see those

288
00:11:09,080 --> 00:11:12,500
are the stream names another indication

289
00:11:11,540 --> 00:11:15,140
that we're dealing with something

290
00:11:12,500 --> 00:11:16,910
slightly off or<font color="#E5E5E5"> maybe malicious is that</font>

291
00:11:15,140 --> 00:11:18,949
the occupation efforts that the authors

292
00:11:16,910 --> 00:11:20,300
will go through will oftentimes include

293
00:11:18,950 --> 00:11:22,220
the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the stream so you'll get</font>

294
00:11:20,300 --> 00:11:24,870
random looking stream names such as cow

295
00:11:22,220 --> 00:11:27,480
keeper and discord

296
00:11:24,870 --> 00:11:31,380
does anybody know what those<font color="#E5E5E5"> streams</font>

297
00:11:27,480 --> 00:11:35,610
represent the ones that<font color="#E5E5E5"> I have</font>

298
00:11:31,380 --> 00:11:39,630
highlighted in yellow it's<font color="#E5E5E5"> not a trick</font>

299
00:11:35,610 --> 00:11:42,150
<font color="#CCCCCC">question I guarantee it took me</font><font color="#E5E5E5"> forever</font>

300
00:11:39,630 --> 00:11:44,520
to figure that out that actually<font color="#CCCCCC"> means</font>

301
00:11:42,150 --> 00:11:46,680
that on this<font color="#CCCCCC"> document there's a userform</font>

302
00:11:44,520 --> 00:11:48,449
and the reason<font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's important is</font>

303
00:11:46,680 --> 00:11:49,859
because I'm seeing right now a lot of

304
00:11:48,450 --> 00:11:51,660
<font color="#CCCCCC">shellcode being stuffed into the</font>

305
00:11:49,860 --> 00:11:53,220
userform so then that shell could we

306
00:11:51,660 --> 00:11:54,480
pulled out d off you skated put into

307
00:11:53,220 --> 00:11:56,490
memory and executed so we'll go through

308
00:11:54,480 --> 00:11:59,250
<font color="#E5E5E5">a whole example here with that in just a</font>

309
00:11:56,490 --> 00:12:00,870
minute so when I see f & 0 I see those

310
00:11:59,250 --> 00:12:02,940
streams right there I know<font color="#E5E5E5"> that if I</font>

311
00:12:00,870 --> 00:12:04,680
look at this inside<font color="#CCCCCC"> of an IDE or if i</font>

312
00:12:02,940 --> 00:12:06,900
trace into this when I dumped the macros

313
00:12:04,680 --> 00:12:08,760
likely<font color="#E5E5E5"> there the user form of some sort</font>

314
00:12:06,900 --> 00:12:10,709
of<font color="#E5E5E5"> an object on it a text box or a label</font>

315
00:12:08,760 --> 00:12:12,390
or a bunch of tabs or something that

316
00:12:10,710 --> 00:12:17,040
probably has some content stuff inside

317
00:12:12,390 --> 00:12:19,920
of it here's an example of if<font color="#CCCCCC"> we ran the</font>

318
00:12:17,040 --> 00:12:22,529
command a lowly dump we tell it what

319
00:12:19,920 --> 00:12:24,930
stream we want so stream 8's and then

320
00:12:22,529 --> 00:12:26,250
eight dash V decodes the stream if you

321
00:12:24,930 --> 00:12:27,689
don't give it that argument and of

322
00:12:26,250 --> 00:12:30,029
course if you do the help<font color="#CCCCCC"> file I tell</font>

323
00:12:27,690 --> 00:12:32,130
you<font color="#E5E5E5"> all about this then it doesn't</font>

324
00:12:30,029 --> 00:12:33,390
decompress<font color="#CCCCCC"> it</font><font color="#E5E5E5"> or Geordi obfuscated it</font>

325
00:12:32,130 --> 00:12:36,390
there's Microsoft<font color="#CCCCCC"> has some way of</font>

326
00:12:33,390 --> 00:12:39,180
storing those macros inside of the

327
00:12:36,390 --> 00:12:40,589
document without being in plain text the

328
00:12:39,180 --> 00:12:42,300
name of the document you<font color="#E5E5E5"> can say use the</font>

329
00:12:40,589 --> 00:12:44,160
hash so it's a little bit loan and then

330
00:12:42,300 --> 00:12:45,660
I<font color="#E5E5E5"> just redirect that to a document</font><font color="#CCCCCC"> a</font>

331
00:12:44,160 --> 00:12:47,219
file in my the file system so that I can

332
00:12:45,660 --> 00:12:49,230
go ahead and interact that document

333
00:12:47,220 --> 00:12:53,400
maybe do some refactoring or other

334
00:12:49,230 --> 00:12:55,100
things that<font color="#E5E5E5"> help with my analysis once</font>

335
00:12:53,400 --> 00:12:57,329
i'm done<font color="#E5E5E5"> i have something like this</font><font color="#CCCCCC"> and</font>

336
00:12:55,100 --> 00:12:59,310
now again we can start digging through

337
00:12:57,330 --> 00:13:02,640
those macros and inspecting those to see

338
00:12:59,310 --> 00:13:05,099
what they're actually up<font color="#CCCCCC"> to before we do</font>

339
00:13:02,640 --> 00:13:09,150
that I said we can also enable the

340
00:13:05,100 --> 00:13:11,010
office ID once<font color="#CCCCCC"> I'll call it an ID you'll</font>

341
00:13:09,150 --> 00:13:12,449
have to navigate into the options you

342
00:13:11,010 --> 00:13:13,890
<font color="#E5E5E5">can go into where you customize the</font>

343
00:13:12,450 --> 00:13:16,140
ribbon at least that's the way<font color="#E5E5E5"> that I do</font>

344
00:13:13,890 --> 00:13:18,330
it and I enable that Developer tab which

345
00:13:16,140 --> 00:13:20,910
isn't available by default and then once

346
00:13:18,330 --> 00:13:23,070
that's enabled you can see that<font color="#CCCCCC"> we have</font>

347
00:13:20,910 --> 00:13:25,529
the option<font color="#CCCCCC"> on the very left hand side</font>

348
00:13:23,070 --> 00:13:27,120
there to click visual basic and what

349
00:13:25,529 --> 00:13:29,220
<font color="#E5E5E5">that will do is that will open up your</font>

350
00:13:27,120 --> 00:13:30,570
project so if the<font color="#CCCCCC"> mal doc contains</font>

351
00:13:29,220 --> 00:13:32,640
macros and they're not password

352
00:13:30,570 --> 00:13:34,200
protected then you'll be<font color="#E5E5E5"> able to see all</font>

353
00:13:32,640 --> 00:13:36,660
of those streams just like we could with

354
00:13:34,200 --> 00:13:37,800
<font color="#E5E5E5">0</font><font color="#CCCCCC"> aledo the added benefit then to the</font>

355
00:13:36,660 --> 00:13:39,060
IDE is

356
00:13:37,800 --> 00:13:41,010
we'll also be able to see the<font color="#CCCCCC"> userform</font>

357
00:13:39,060 --> 00:13:42,599
<font color="#E5E5E5">and we can debug if we want to as well</font>

358
00:13:41,010 --> 00:13:44,610
so we can<font color="#E5E5E5"> actually set breakpoints and</font>

359
00:13:42,600 --> 00:13:46,279
step through this code and I can make

360
00:13:44,610 --> 00:13:51,120
analysis I think a little bit easier

361
00:13:46,279 --> 00:13:53,189
there's our project there's one<font color="#E5E5E5"> stream</font>

362
00:13:51,120 --> 00:13:55,050
of macros this document<font color="#CCCCCC"> that's like the</font>

363
00:13:53,190 --> 00:13:57,209
default most mailbox will have<font color="#E5E5E5"> the this</font>

364
00:13:55,050 --> 00:13:59,310
document macros a lot<font color="#E5E5E5"> of them decide to</font>

365
00:13:57,209 --> 00:14:01,469
stuff the auto open you<font color="#E5E5E5"> can actually see</font>

366
00:13:59,310 --> 00:14:04,319
that<font color="#E5E5E5"> in the screenshot that's that</font>

367
00:14:01,470 --> 00:14:05,820
function down at the bottom<font color="#E5E5E5"> so when the</font>

368
00:14:04,320 --> 00:14:07,829
document is opened that's the function

369
00:14:05,820 --> 00:14:09,899
that originally triggers the execution

370
00:14:07,829 --> 00:14:12,630
of the macros so the entry point into

371
00:14:09,899 --> 00:14:14,430
the macro code this document tends to

372
00:14:12,630 --> 00:14:15,810
have that but it's<font color="#E5E5E5"> not it does</font><font color="#CCCCCC"> not have</font>

373
00:14:14,430 --> 00:14:18,569
to<font color="#CCCCCC"> be defined inside of the</font><font color="#E5E5E5"> disk</font>

374
00:14:15,810 --> 00:14:20,430
document macro stream there's another

375
00:14:18,570 --> 00:14:23,130
one so this has an additional stream

376
00:14:20,430 --> 00:14:24,359
solemn<font color="#E5E5E5"> nice again kind of a strange name</font>

377
00:14:23,130 --> 00:14:26,339
but that's just due to<font color="#E5E5E5"> the way that</font>

378
00:14:24,360 --> 00:14:29,040
these now our authors are<font color="#CCCCCC"> optus cating</font>

379
00:14:26,339 --> 00:14:33,529
out only the code<font color="#CCCCCC"> inside but also the</font>

380
00:14:29,040 --> 00:14:36,420
names of the modules there's our form

381
00:14:33,529 --> 00:14:38,640
again another very strange name the

382
00:14:36,420 --> 00:14:41,099
chinking yes would<font color="#E5E5E5"> be how I pronounced</font>

383
00:14:38,640 --> 00:14:42,689
that we<font color="#CCCCCC"> could</font><font color="#E5E5E5"> double</font><font color="#CCCCCC"> click on that form</font>

384
00:14:41,100 --> 00:14:43,920
and then you'll see that and will you'll

385
00:14:42,690 --> 00:14:45,740
have I have a slide here in just a

386
00:14:43,920 --> 00:14:48,899
moment that will walk us through that

387
00:14:45,740 --> 00:14:50,760
you won't see when we looked back at the

388
00:14:48,899 --> 00:14:53,100
<font color="#E5E5E5">oly junk you didn't see information that</font>

389
00:14:50,760 --> 00:14:54,750
directly correlates the userform to that

390
00:14:53,100 --> 00:14:57,120
object that user for my object that we

391
00:14:54,750 --> 00:14:58,230
see in the<font color="#E5E5E5"> IDE and I don't know if</font>

392
00:14:57,120 --> 00:14:59,640
there's a way with overly dump to get

393
00:14:58,230 --> 00:15:02,310
<font color="#E5E5E5">that information out I haven't come</font>

394
00:14:59,640 --> 00:15:04,079
across it<font color="#CCCCCC"> so oftentimes the</font><font color="#E5E5E5"> only way i</font>

395
00:15:02,310 --> 00:15:05,279
know is by seeing that<font color="#CCCCCC"> effin at zero and</font>

396
00:15:04,079 --> 00:15:06,810
those streams that there's a userform

397
00:15:05,279 --> 00:15:08,970
now when you're looking through the

398
00:15:06,810 --> 00:15:11,189
macros again you'll probably need to<font color="#E5E5E5"> get</font>

399
00:15:08,970 --> 00:15:12,839
<font color="#E5E5E5">into this actual user forum and look at</font>

400
00:15:11,190 --> 00:15:14,790
the different objects on it and see what

401
00:15:12,839 --> 00:15:16,950
those are called in order to tell when

402
00:15:14,790 --> 00:15:21,029
data in that user forum is actually

403
00:15:16,950 --> 00:15:24,270
being directly referenced<font color="#E5E5E5"> okay as I</font>

404
00:15:21,029 --> 00:15:26,399
mentioned now you can debug so pretty

405
00:15:24,270 --> 00:15:27,930
standard source-level debugger<font color="#E5E5E5"> I find</font>

406
00:15:26,399 --> 00:15:29,910
the place<font color="#E5E5E5"> in the code that I want</font><font color="#CCCCCC"> to set</font>

407
00:15:27,930 --> 00:15:32,399
a breakpoint i clicked in the margin it

408
00:15:29,910 --> 00:15:35,189
turns red and then<font color="#E5E5E5"> i can go</font><font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> and</font>

409
00:15:32,399 --> 00:15:36,570
press<font color="#E5E5E5"> play and from their execution</font>

410
00:15:35,190 --> 00:15:38,220
should begin now<font color="#E5E5E5"> again just like any</font>

411
00:15:36,570 --> 00:15:40,230
debugging scenario you have to make sure

412
00:15:38,220 --> 00:15:41,910
<font color="#E5E5E5">that your malware will actually get to</font>

413
00:15:40,230 --> 00:15:43,709
<font color="#E5E5E5">whatever path you're trying to get you</font>

414
00:15:41,910 --> 00:15:45,810
swear you set that right point in this

415
00:15:43,709 --> 00:15:47,040
case<font color="#E5E5E5"> I set it on auto open so i'm pretty</font>

416
00:15:45,810 --> 00:15:48,959
confident that<font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to start right</font>

417
00:15:47,040 --> 00:15:49,540
<font color="#E5E5E5">there but if I'm further along in the</font>

418
00:15:48,959 --> 00:15:50,768
macro

419
00:15:49,540 --> 00:15:52,029
just have to make sure that the logic

420
00:15:50,769 --> 00:15:53,529
will in fact get me there otherwise of

421
00:15:52,029 --> 00:15:56,949
course your break point will never be

422
00:15:53,529 --> 00:15:59,079
set once you're in debug mode you<font color="#E5E5E5"> have</font>

423
00:15:56,949 --> 00:16:04,599
all your standard debugging options step

424
00:15:59,079 --> 00:16:07,209
in step out step over stop debugging we

425
00:16:04,600 --> 00:16:09,339
can also do expect the values of

426
00:16:07,209 --> 00:16:11,619
variables in our memory inspection and

427
00:16:09,339 --> 00:16:13,120
you can see here that what happened is I

428
00:16:11,620 --> 00:16:14,889
<font color="#CCCCCC">just got really</font><font color="#E5E5E5"> tired of looking at all</font>

429
00:16:13,120 --> 00:16:16,870
these office skated macros I wanted to

430
00:16:14,889 --> 00:16:18,970
see the value of a couple of strings so

431
00:16:16,870 --> 00:16:20,949
I set a breakpoint and now I added

432
00:16:18,970 --> 00:16:22,779
watches as you<font color="#E5E5E5"> can see in the</font><font color="#CCCCCC"> dialogue</font>

433
00:16:20,949 --> 00:16:24,699
below to see what the values of those

434
00:16:22,779 --> 00:16:26,199
strings were so instead of tracing

435
00:16:24,699 --> 00:16:28,120
through those backwards and figuring<font color="#CCCCCC"> out</font>

436
00:16:26,199 --> 00:16:30,339
how all<font color="#CCCCCC"> of the obfuscation was done in</font>

437
00:16:28,120 --> 00:16:37,269
order to build those strings I just set

438
00:16:30,339 --> 00:16:40,209
a breakpoint and looked here sometimes I

439
00:16:37,269 --> 00:16:42,069
encounter passwords sometimes I can get

440
00:16:40,209 --> 00:16:43,209
around<font color="#CCCCCC"> them sometimes I have and I've</font>

441
00:16:42,069 --> 00:16:45,639
had luck with it I think<font color="#CCCCCC"> it</font><font color="#E5E5E5"> was a</font>

442
00:16:43,209 --> 00:16:48,069
spreadsheet was the last time that I was

443
00:16:45,639 --> 00:16:49,899
able<font color="#E5E5E5"> to find a offset or a key value</font>

444
00:16:48,069 --> 00:16:52,810
pair in the file just<font color="#E5E5E5"> using a hex editor</font>

445
00:16:49,899 --> 00:16:55,209
and replace a value open it up and<font color="#E5E5E5"> then</font>

446
00:16:52,810 --> 00:16:57,160
actually<font color="#E5E5E5"> replace the password and a</font>

447
00:16:55,209 --> 00:16:59,079
newer word doc I haven't<font color="#CCCCCC"> been able</font><font color="#E5E5E5"> to</font>

448
00:16:57,160 --> 00:17:02,139
find that same offset in the file and

449
00:16:59,079 --> 00:17:03,849
<font color="#E5E5E5">bypass that so I've had situations where</font>

450
00:17:02,139 --> 00:17:05,439
I've<font color="#CCCCCC"> had at office document that not</font>

451
00:17:03,850 --> 00:17:07,510
only requires a password of you with a

452
00:17:05,439 --> 00:17:09,669
password<font color="#CCCCCC"> to view the macros are not the</font>

453
00:17:07,510 --> 00:17:11,199
same<font color="#CCCCCC"> password and I couldn't</font><font color="#E5E5E5"> figure out</font>

454
00:17:09,669 --> 00:17:12,640
a way around it I didn't really<font color="#E5E5E5"> want to</font>

455
00:17:11,199 --> 00:17:15,159
take<font color="#E5E5E5"> the time to figure that way out and</font>

456
00:17:12,640 --> 00:17:16,870
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I just</font><font color="#E5E5E5"> had to observe the document</font>

457
00:17:15,159 --> 00:17:19,059
from the outside so<font color="#E5E5E5"> using tools like</font>

458
00:17:16,869 --> 00:17:21,250
pokémon or Wireshark in order to see the

459
00:17:19,059 --> 00:17:25,209
artifacts that it leaves behind or the

460
00:17:21,250 --> 00:17:27,760
communication<font color="#E5E5E5"> that is performing was</font>

461
00:17:25,209 --> 00:17:29,710
touched on the presentation here earlier

462
00:17:27,760 --> 00:17:32,350
this afternoon macro protections by

463
00:17:29,710 --> 00:17:34,450
default RT disabled but notified so of

464
00:17:32,350 --> 00:17:36,699
<font color="#E5E5E5">course we give by default our users</font><font color="#CCCCCC"> the</font>

465
00:17:34,450 --> 00:17:38,799
ability to still an evil and execute

466
00:17:36,700 --> 00:17:41,890
those mackerels so still a bit of<font color="#E5E5E5"> a</font>

467
00:17:38,799 --> 00:17:43,299
problem social engineering<font color="#E5E5E5"> abounds we</font>

468
00:17:41,890 --> 00:17:45,309
could go through just social engineering

469
00:17:43,299 --> 00:17:47,500
examples all afternoon if we didn't get

470
00:17:45,309 --> 00:17:49,178
extremely bored but the gist of it is

471
00:17:47,500 --> 00:17:52,299
that they're just<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to get the user</font>

472
00:17:49,179 --> 00:17:53,890
to to enable that content so here you

473
00:17:52,299 --> 00:17:55,240
see something<font color="#CCCCCC"> that's saying hey this is</font>

474
00:17:53,890 --> 00:17:56,380
<font color="#CCCCCC">the latest version of word and you're</font>

475
00:17:55,240 --> 00:17:58,059
<font color="#E5E5E5">not up to date in order to see this</font>

476
00:17:56,380 --> 00:18:02,679
content you have<font color="#E5E5E5"> to actually enable</font>

477
00:17:58,059 --> 00:18:03,260
content we<font color="#E5E5E5"> actually saw this example or</font>

478
00:18:02,679 --> 00:18:04,790
very similar

479
00:18:03,260 --> 00:18:06,530
example<font color="#E5E5E5"> 2 this earlier this afternoon as</font>

480
00:18:04,790 --> 00:18:08,060
well and that this one was a slightly

481
00:18:06,530 --> 00:18:09,470
more targeted we said appeared slightly

482
00:18:08,060 --> 00:18:12,950
more targeted and that it had the name

483
00:18:09,470 --> 00:18:14,330
of<font color="#CCCCCC"> the individual recipient it had an</font>

484
00:18:12,950 --> 00:18:16,490
attached document and then<font color="#E5E5E5"> it had a</font>

485
00:18:14,330 --> 00:18:17,899
password so they had once they open the

486
00:18:16,490 --> 00:18:20,000
document they had to provide that

487
00:18:17,900 --> 00:18:22,640
password to get into<font color="#E5E5E5"> it and then from</font>

488
00:18:20,000 --> 00:18:24,590
<font color="#E5E5E5">there they had to enable content in</font>

489
00:18:22,640 --> 00:18:28,850
<font color="#E5E5E5">order to actually get that the macros</font><font color="#CCCCCC"> to</font>

490
00:18:24,590 --> 00:18:32,270
execute this is one<font color="#CCCCCC"> of my favorites it</font>

491
00:18:28,850 --> 00:18:35,179
was part<font color="#E5E5E5"> of a UPS fishing campaign and</font>

492
00:18:32,270 --> 00:18:36,590
that the<font color="#CCCCCC"> email said that UPS they tried</font>

493
00:18:35,180 --> 00:18:39,110
to deliver something<font color="#E5E5E5"> to you they missed</font>

494
00:18:36,590 --> 00:18:41,120
and<font color="#E5E5E5"> I've attached to be nient</font><font color="#CCCCCC"> ly your</font>

495
00:18:39,110 --> 00:18:43,159
tracking number in a word document to

496
00:18:41,120 --> 00:18:44,929
contain macros and so then once you open

497
00:18:43,160 --> 00:18:46,100
that word document you see that it's

498
00:18:44,930 --> 00:18:50,260
encrypted and the only way you can

499
00:18:46,100 --> 00:18:50,260
decrypt that is to enable that content

500
00:18:52,630 --> 00:18:58,430
hey as I said forms so if<font color="#E5E5E5"> we were to</font>

501
00:18:56,630 --> 00:19:00,080
double click<font color="#CCCCCC"> that form just so you can</font>

502
00:18:58,430 --> 00:19:01,400
see<font color="#CCCCCC"> it from</font><font color="#E5E5E5"> the view of the IDE you can</font>

503
00:19:00,080 --> 00:19:03,110
see it from<font color="#E5E5E5"> the view of</font><font color="#CCCCCC"> Oh Allie dump</font>

504
00:19:01,400 --> 00:19:05,510
the<font color="#E5E5E5"> two my two primary tools are looking</font>

505
00:19:03,110 --> 00:19:07,969
at<font color="#CCCCCC"> mailbox that would be the</font><font color="#E5E5E5"> form itself</font>

506
00:19:05,510 --> 00:19:10,070
then so again you're not going to see

507
00:19:07,970 --> 00:19:13,070
the name directly in the dump from<font color="#CCCCCC"> o le</font>

508
00:19:10,070 --> 00:19:15,050
dome looking at the form itself that

509
00:19:13,070 --> 00:19:17,419
might seem unimpressive but oftentimes

510
00:19:15,050 --> 00:19:19,520
all you have to do is adjust the size of

511
00:19:17,420 --> 00:19:22,610
the canvas or that window<font color="#E5E5E5"> and then</font>

512
00:19:19,520 --> 00:19:24,379
content might emerge in this case it was

513
00:19:22,610 --> 00:19:26,510
fairly obvious that something was<font color="#E5E5E5"> out of</font>

514
00:19:24,380 --> 00:19:29,780
place here when the content of that text

515
00:19:26,510 --> 00:19:31,610
field started with the 45 a not<font color="#E5E5E5"> quite</font>

516
00:19:29,780 --> 00:19:33,410
that straightforward though because the

517
00:19:31,610 --> 00:19:35,600
malware authors did do a little bit of

518
00:19:33,410 --> 00:19:37,670
obfuscation with that embedded

519
00:19:35,600 --> 00:19:40,280
executable<font color="#CCCCCC"> and we'll talk</font><font color="#E5E5E5"> about that</font>

520
00:19:37,670 --> 00:19:43,010
<font color="#E5E5E5">here in just a moment now when</font><font color="#CCCCCC"> you</font>

521
00:19:40,280 --> 00:19:45,020
select that that text box you can also

522
00:19:43,010 --> 00:19:47,150
look at the properties of it so you can

523
00:19:45,020 --> 00:19:49,879
see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I have two more screenshots</font>

524
00:19:47,150 --> 00:19:52,130
there in the lower right and that top

525
00:19:49,880 --> 00:19:54,560
one is the name<font color="#CCCCCC"> of that field transducer</font>

526
00:19:52,130 --> 00:19:56,030
so when you're<font color="#E5E5E5"> looking in the macros if</font>

527
00:19:54,560 --> 00:19:58,790
all of a sudden you see reference to an

528
00:19:56,030 --> 00:20:00,320
<font color="#CCCCCC">object in this case transducer that's</font>

529
00:19:58,790 --> 00:20:02,420
how we're tying together the fact that

530
00:20:00,320 --> 00:20:04,100
it's using a form and more specifically

531
00:20:02,420 --> 00:20:06,230
it's using the content from that form

532
00:20:04,100 --> 00:20:07,760
within the macro logic so if<font color="#E5E5E5"> you're</font>

533
00:20:06,230 --> 00:20:09,020
<font color="#E5E5E5">really trying to trace through it that's</font>

534
00:20:07,760 --> 00:20:11,530
how<font color="#E5E5E5"> you would eventually be able to tie</font>

535
00:20:09,020 --> 00:20:11,530
those two together

536
00:20:16,559 --> 00:20:20,710
so<font color="#E5E5E5"> I left this slide in in order to talk</font>

537
00:20:19,600 --> 00:20:22,899
it's very similar to<font color="#E5E5E5"> the one</font><font color="#CCCCCC"> that we</font>

538
00:20:20,710 --> 00:20:25,330
<font color="#CCCCCC">just looked at except</font><font color="#E5E5E5"> that when we look</font>

539
00:20:22,899 --> 00:20:27,758
at dumping this stream so the screenshot

540
00:20:25,330 --> 00:20:30,309
to the right what we're doing there is

541
00:20:27,759 --> 00:20:32,649
actually<font color="#E5E5E5"> its stream 15 which you can</font><font color="#CCCCCC"> see</font>

542
00:20:30,309 --> 00:20:35,259
from the oly<font color="#E5E5E5"> dump in the center and what</font>

543
00:20:32,649 --> 00:20:37,299
stood out from that initially not just

544
00:20:35,259 --> 00:20:39,220
the fact that as part of a userform was

545
00:20:37,299 --> 00:20:42,158
also the size it<font color="#E5E5E5"> was a very large</font><font color="#CCCCCC"> sized</font>

546
00:20:39,220 --> 00:20:43,389
stream when i<font color="#CCCCCC"> extracted the content look</font>

547
00:20:42,159 --> 00:20:45,429
at the content and again you can<font color="#CCCCCC"> use</font>

548
00:20:43,389 --> 00:20:47,709
that same basic commando elite dumb dash

549
00:20:45,429 --> 00:20:50,289
S in the stream then these bites look

550
00:20:47,710 --> 00:20:52,570
flying by and immediately<font color="#E5E5E5"> recognized</font><font color="#CCCCCC"> the</font>

551
00:20:50,289 --> 00:20:53,919
45 a you'll<font color="#E5E5E5"> notice that there are some</font>

552
00:20:52,570 --> 00:20:55,418
<font color="#CCCCCC">bytes in front and there's some bikes</font>

553
00:20:53,919 --> 00:20:57,220
behind if we were to<font color="#CCCCCC"> look at this stream</font>

554
00:20:55,419 --> 00:20:58,779
its entirety and those<font color="#CCCCCC"> are just bytes</font>

555
00:20:57,220 --> 00:21:00,970
that are related to how this is actually

556
00:20:58,779 --> 00:21:02,830
stored in the userform so there's some

557
00:21:00,970 --> 00:21:04,269
things that if i were to extract this if

558
00:21:02,830 --> 00:21:05,980
<font color="#E5E5E5">i wanted to get this executable out</font>

559
00:21:04,269 --> 00:21:08,590
manually<font color="#CCCCCC"> i'd have to</font><font color="#E5E5E5"> trim those leading</font>

560
00:21:05,980 --> 00:21:11,139
and trailing bites the other<font color="#E5E5E5"> problem is</font>

561
00:21:08,590 --> 00:21:12,970
that even though<font color="#CCCCCC"> i recognized</font><font color="#E5E5E5"> that there</font>

562
00:21:11,139 --> 00:21:16,178
is the 45 8 which is<font color="#E5E5E5"> the magic number</font>

563
00:21:12,970 --> 00:21:18,820
for a PE file MZ that's the byte values

564
00:21:16,179 --> 00:21:21,850
for the<font color="#E5E5E5"> ASCII characters MZ which says</font>

565
00:21:18,820 --> 00:21:24,759
for Mark Zuckerberg rain you<font color="#CCCCCC"> know he</font>

566
00:21:21,850 --> 00:21:26,918
didn't create<font color="#E5E5E5"> PE file oh shoot the</font>

567
00:21:24,759 --> 00:21:29,220
problem is though that this is a nasty

568
00:21:26,919 --> 00:21:32,109
dump and so if I'm looking at<font color="#E5E5E5"> a PE file</font>

569
00:21:29,220 --> 00:21:34,570
the ASCII representation of it I should

570
00:21:32,109 --> 00:21:36,668
be<font color="#CCCCCC"> seeing MZ</font><font color="#E5E5E5"> and not 45 it i should be</font>

571
00:21:34,570 --> 00:21:38,230
seeing the DA stub this program cannot

572
00:21:36,669 --> 00:21:40,269
be run in DOS mode and I'm<font color="#E5E5E5"> not seeing</font>

573
00:21:38,230 --> 00:21:42,700
that and so what the malware authors did

574
00:21:40,269 --> 00:21:44,830
for<font color="#E5E5E5"> this particular example was they</font>

575
00:21:42,700 --> 00:21:46,869
took the original byte value and then

576
00:21:44,830 --> 00:21:48,369
they wrote in to that filled the ascii

577
00:21:46,869 --> 00:21:50,470
character for it so that's why you're

578
00:21:48,369 --> 00:21:53,350
seeing four and then<font color="#E5E5E5"> d and then five and</font>

579
00:21:50,470 --> 00:21:55,359
then a<font color="#CCCCCC"> and when they eventually drop</font>

580
00:21:53,350 --> 00:21:57,399
this<font color="#CCCCCC"> two-disc and execute they go</font>

581
00:21:55,359 --> 00:21:59,230
through each<font color="#CCCCCC"> fasty character and then</font>

582
00:21:57,399 --> 00:22:01,299
they write it<font color="#E5E5E5"> again as a byte value so</font>

583
00:21:59,230 --> 00:22:03,129
they convert it back to binary so if I

584
00:22:01,299 --> 00:22:04,779
was scanning<font color="#E5E5E5"> this with a tool i probably</font>

585
00:22:03,129 --> 00:22:06,248
wouldn't catch it because it<font color="#E5E5E5"> wouldn't</font>

586
00:22:04,779 --> 00:22:09,519
match the signatures of the patterns

587
00:22:06,249 --> 00:22:12,609
here for a PE file but it's<font color="#E5E5E5"> just really</font>

588
00:22:09,519 --> 00:22:15,159
easy to dump to basically swap those

589
00:22:12,609 --> 00:22:16,570
bikes back dump<font color="#E5E5E5"> and execute so it didn't</font>

590
00:22:15,159 --> 00:22:19,289
take much logic within the macros to

591
00:22:16,570 --> 00:22:19,289
actually do that

592
00:22:21,340 --> 00:22:28,360
everybody loves dr. station right I know

593
00:22:25,090 --> 00:22:30,220
I do obfuscation comes in a variety of

594
00:22:28,360 --> 00:22:32,740
forms where we're dealing with source

595
00:22:30,220 --> 00:22:35,050
code we have you know source level this

596
00:22:32,740 --> 00:22:37,660
is vba so it has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> at some point be</font>

597
00:22:35,050 --> 00:22:40,300
executable and it has to<font color="#CCCCCC"> be valid syntax</font>

598
00:22:37,660 --> 00:22:41,830
and language so we see a<font color="#CCCCCC"> variety of</font>

599
00:22:40,300 --> 00:22:44,620
things a variety of techniques<font color="#E5E5E5"> that are</font>

600
00:22:41,830 --> 00:22:47,139
somewhat trivial but there nonetheless

601
00:22:44,620 --> 00:22:49,600
very they're very<font color="#CCCCCC"> time-consuming to get</font>

602
00:22:47,140 --> 00:22:51,820
past them so you<font color="#E5E5E5"> can see with this one</font>

603
00:22:49,600 --> 00:22:53,560
the<font color="#E5E5E5"> function names and the variable</font>

604
00:22:51,820 --> 00:22:58,179
names are one they<font color="#E5E5E5"> just use completely</font>

605
00:22:53,560 --> 00:23:01,149
random and ambiguous names such as our

606
00:22:58,180 --> 00:23:02,290
parakeet object another favorite and

607
00:23:01,150 --> 00:23:04,690
this is obviously a shin that you've

608
00:23:02,290 --> 00:23:06,399
seen more<font color="#CCCCCC"> than just of course vba is to</font>

609
00:23:04,690 --> 00:23:09,100
use a lot of string concatenation so

610
00:23:06,400 --> 00:23:11,500
breaking up strings and then concatenate

611
00:23:09,100 --> 00:23:13,629
them later together<font color="#E5E5E5"> taking a string and</font>

612
00:23:11,500 --> 00:23:16,020
doing a reverse of it or maybe doing a

613
00:23:13,630 --> 00:23:18,670
substring of it you see that a lot too

614
00:23:16,020 --> 00:23:20,710
moving past that string so down two

615
00:23:18,670 --> 00:23:22,420
lines five six seven you<font color="#E5E5E5"> can see there's</font>

616
00:23:20,710 --> 00:23:23,680
a lot of very simple mathematical

617
00:23:22,420 --> 00:23:25,690
operations some additions and

618
00:23:23,680 --> 00:23:28,210
subtraction and there's<font color="#CCCCCC"> even a for loop</font>

619
00:23:25,690 --> 00:23:29,890
after that and again what more than

620
00:23:28,210 --> 00:23:31,390
likely all of that is just<font color="#E5E5E5"> junk</font>

621
00:23:29,890 --> 00:23:33,430
instructions or just their slowest

622
00:23:31,390 --> 00:23:34,840
talents are trying to analyze so the

623
00:23:33,430 --> 00:23:36,460
more you<font color="#E5E5E5"> see the more you can pick</font><font color="#CCCCCC"> that</font>

624
00:23:34,840 --> 00:23:38,080
out the quicker then if you really want

625
00:23:36,460 --> 00:23:39,640
to<font color="#CCCCCC"> spend time in these macros and any</font>

626
00:23:38,080 --> 00:23:41,290
code that's off you skated you could

627
00:23:39,640 --> 00:23:43,420
delete that and then<font color="#CCCCCC"> just be left with</font>

628
00:23:41,290 --> 00:23:45,310
the stuff that is actually important so

629
00:23:43,420 --> 00:23:48,070
<font color="#E5E5E5">you might get macros that are 500 lines</font>

630
00:23:45,310 --> 00:23:49,990
of macro code but if you refactor it all

631
00:23:48,070 --> 00:23:51,129
down you might only have 50 lines or

632
00:23:49,990 --> 00:23:57,610
something because it's<font color="#CCCCCC"> just so full of</font>

633
00:23:51,130 --> 00:24:00,010
<font color="#CCCCCC">below such as that okay i mentioned use</font>

634
00:23:57,610 --> 00:24:01,870
of the windows api or you can see an

635
00:24:00,010 --> 00:24:04,570
<font color="#CCCCCC">example from the i believe the hamster</font>

636
00:24:01,870 --> 00:24:07,419
mail campaign and what they're<font color="#CCCCCC"> doing is</font>

637
00:24:04,570 --> 00:24:09,250
essentially declaring pointers to api's

638
00:24:07,420 --> 00:24:12,430
within whatever module they want to load

639
00:24:09,250 --> 00:24:15,490
so you'll see if<font color="#CCCCCC"> user 32 and kernel32 on</font>

640
00:24:12,430 --> 00:24:17,950
a handful what they additionally do as

641
00:24:15,490 --> 00:24:20,620
they<font color="#E5E5E5"> throw in some song lyrics so I</font>

642
00:24:17,950 --> 00:24:22,690
chose<font color="#CCCCCC"> this one because I there's a Led</font>

643
00:24:20,620 --> 00:24:24,909
Zeppelin's line in<font color="#E5E5E5"> there so I thought</font>

644
00:24:22,690 --> 00:24:27,940
<font color="#CCCCCC">that was appropriate for no other reason</font>

645
00:24:24,910 --> 00:24:32,110
<font color="#CCCCCC">that I like Led Zeppelin now because</font>

646
00:24:27,940 --> 00:24:33,850
they use things like again names<font color="#E5E5E5"> that</font>

647
00:24:32,110 --> 00:24:34,418
mean absolutely nothing if we look<font color="#E5E5E5"> at</font>

648
00:24:33,850 --> 00:24:35,590
the last

649
00:24:34,419 --> 00:24:36,639
for example<font color="#E5E5E5"> because we're actually going</font>

650
00:24:35,590 --> 00:24:38,529
to follow this one because it's

651
00:24:36,639 --> 00:24:41,738
responsible for executing some shell

652
00:24:38,529 --> 00:24:43,600
code here cabriole a that's how i'm

653
00:24:41,739 --> 00:24:47,139
going to pronounce it<font color="#E5E5E5"> anyway is an alias</font>

654
00:24:43,600 --> 00:24:48,789
for enum date formats w so if i want to

655
00:24:47,139 --> 00:24:50,469
<font color="#E5E5E5">see where that API is now used in the in</font>

656
00:24:48,789 --> 00:24:52,989
the actual macros<font color="#CCCCCC"> I have to be able to</font>

657
00:24:50,470 --> 00:24:55,179
follow that variable name or refactor so

658
00:24:52,989 --> 00:24:56,769
I know where it's being called<font color="#CCCCCC"> the</font><font color="#E5E5E5"> other</font>

659
00:24:55,179 --> 00:24:58,480
thing that might be surprising any

660
00:24:56,769 --> 00:24:59,859
guesses as to<font color="#E5E5E5"> this one of these</font>

661
00:24:58,480 --> 00:25:01,450
<font color="#E5E5E5">functions is going to be responsible</font><font color="#CCCCCC"> for</font>

662
00:24:59,859 --> 00:25:04,019
executing shellcode anybody want to

663
00:25:01,450 --> 00:25:04,019
guess which one

664
00:25:07,370 --> 00:25:18,270
register class<font color="#E5E5E5"> okay somebody want to bet</font>

665
00:25:11,550 --> 00:25:22,830
with him or against him all right we'll

666
00:25:18,270 --> 00:25:24,780
find out that in a minute yeah we found

667
00:25:22,830 --> 00:25:26,669
<font color="#E5E5E5">out right now we'll come back where to</font>

668
00:25:24,780 --> 00:25:29,220
go through this one<font color="#E5E5E5"> in detail but</font>

669
00:25:26,670 --> 00:25:31,680
there's the API call<font color="#E5E5E5"> it's cabriolet and</font>

670
00:25:29,220 --> 00:25:32,730
this is actually the one responsible<font color="#E5E5E5"> for</font>

671
00:25:31,680 --> 00:25:34,200
executing shellcode so we're going to

672
00:25:32,730 --> 00:25:38,430
step all through that here in just a

673
00:25:34,200 --> 00:25:42,800
moment so using a an API this maybe not

674
00:25:38,430 --> 00:25:42,800
directly obvious as to the purpose of it

675
00:25:43,220 --> 00:25:48,300
so a few of<font color="#E5E5E5"> these slides I put the</font>

676
00:25:45,720 --> 00:25:49,590
actual samples up so if you get copy of

677
00:25:48,300 --> 00:25:50,940
<font color="#CCCCCC">the slide deck or you want to follow</font>

678
00:25:49,590 --> 00:25:52,770
<font color="#E5E5E5">along or something there's the sample</font>

679
00:25:50,940 --> 00:25:55,140
that we're<font color="#E5E5E5"> about to look at and just</font><font color="#CCCCCC"> the</font>

680
00:25:52,770 --> 00:25:56,190
brief snippet on<font color="#E5E5E5"> virustotal because</font><font color="#CCCCCC"> I</font>

681
00:25:55,140 --> 00:25:59,970
needed<font color="#E5E5E5"> to fill the slide up with</font>

682
00:25:56,190 --> 00:26:02,730
something so as promised for about

683
00:25:59,970 --> 00:26:05,100
cabriolet if you remember that<font color="#E5E5E5"> was a</font>

684
00:26:02,730 --> 00:26:07,380
format date string something<font color="#CCCCCC"> we'll see</font>

685
00:26:05,100 --> 00:26:08,699
it here and get in just a moment and one

686
00:26:07,380 --> 00:26:10,740
of<font color="#CCCCCC"> the things that I decided to do in</font>

687
00:26:08,700 --> 00:26:12,450
analyzing this particular document was

688
00:26:10,740 --> 00:26:14,670
instead<font color="#E5E5E5"> of tracing through the code I</font>

689
00:26:12,450 --> 00:26:16,140
just<font color="#E5E5E5"> set a breakpoint to see what was</font>

690
00:26:14,670 --> 00:26:18,630
happening when these api is for being

691
00:26:16,140 --> 00:26:20,370
called in particular when I found<font color="#E5E5E5"> that</font>

692
00:26:18,630 --> 00:26:21,990
cabriolet was being called<font color="#E5E5E5"> I</font><font color="#CCCCCC"> knew what</font>

693
00:26:20,370 --> 00:26:25,110
API it was I was interested in how it

694
00:26:21,990 --> 00:26:30,090
was being<font color="#CCCCCC"> used so I set a breakpoint if</font>

695
00:26:25,110 --> 00:26:31,740
we look up that function on msdn will

696
00:26:30,090 --> 00:26:34,110
see that it is documented<font color="#E5E5E5"> it's not one</font>

697
00:26:31,740 --> 00:26:36,210
of those strange undocumented AP<font color="#E5E5E5"> is that</font>

698
00:26:34,110 --> 00:26:39,510
malware authors like to use and the

699
00:26:36,210 --> 00:26:42,330
first argument<font color="#E5E5E5"> is actually a pointer to</font>

700
00:26:39,510 --> 00:26:44,370
an application to find callback function

701
00:26:42,330 --> 00:26:46,320
so that's how<font color="#E5E5E5"> it's attaining the</font>

702
00:26:44,370 --> 00:26:48,239
execution of shellcode so you'll see in

703
00:26:46,320 --> 00:26:49,620
just a minute it's actually allocating a

704
00:26:48,240 --> 00:26:51,390
chunk of<font color="#E5E5E5"> memory including shellcode</font>

705
00:26:49,620 --> 00:26:53,310
there and then<font color="#E5E5E5"> using this function with</font>

706
00:26:51,390 --> 00:26:56,370
a pointer to that shell code in order to

707
00:26:53,310 --> 00:26:57,450
achieve execution so I to me it wasn't

708
00:26:56,370 --> 00:26:58,889
obvious that that's what they were going

709
00:26:57,450 --> 00:27:00,450
to do<font color="#E5E5E5"> until I step through and figured</font>

710
00:26:58,890 --> 00:27:03,330
<font color="#E5E5E5">out that that first argument was a call</font>

711
00:27:00,450 --> 00:27:08,580
back and really a pointer to a function

712
00:27:03,330 --> 00:27:11,189
address so we can inspect<font color="#E5E5E5"> that first</font>

713
00:27:08,580 --> 00:27:13,230
variable look at the value converted to

714
00:27:11,190 --> 00:27:15,120
hex will see it in this particular run

715
00:27:13,230 --> 00:27:17,640
right it was it was allocated through i

716
00:27:15,120 --> 00:27:19,709
believe virtual Alec so the<font color="#CCCCCC"> address</font>

717
00:27:17,640 --> 00:27:20,340
could change in<font color="#E5E5E5"> this case though it was</font>

718
00:27:19,710 --> 00:27:23,789
70

719
00:27:20,340 --> 00:27:25,709
d 0 if ID if<font color="#E5E5E5"> I use a tool i like to use</font>

720
00:27:23,789 --> 00:27:27,809
process hacker in order to look at

721
00:27:25,710 --> 00:27:29,580
memory for<font color="#E5E5E5"> the processes you'll see that</font>

722
00:27:27,809 --> 00:27:33,178
there happens to be the base<font color="#CCCCCC"> of that</font>

723
00:27:29,580 --> 00:27:36,059
allocation 70 d 0 0 0 0 and it also

724
00:27:33,179 --> 00:27:41,010
happens to be read write and execute so

725
00:27:36,059 --> 00:27:42,149
a likely target for shell code and what

726
00:27:41,010 --> 00:27:44,510
happens when that function is called

727
00:27:42,150 --> 00:27:46,679
well it's<font color="#E5E5E5"> going to go right to here and</font>

728
00:27:44,510 --> 00:27:49,110
<font color="#E5E5E5">I don't know about you</font><font color="#CCCCCC"> but my favorite</font>

729
00:27:46,679 --> 00:27:51,539
opcode is 55 hex because that's a push

730
00:27:49,110 --> 00:27:54,750
EBP so it<font color="#CCCCCC"> looks like it's landing in the</font>

731
00:27:51,539 --> 00:27:56,220
function prologue of some<font color="#E5E5E5"> shellcode so</font>

732
00:27:54,750 --> 00:27:57,990
that's how it achieved that execution

733
00:27:56,220 --> 00:28:01,620
now the technique<font color="#CCCCCC"> and again we'll talk</font>

734
00:27:57,990 --> 00:28:04,590
about this right now is process<font color="#CCCCCC"> how</font><font color="#E5E5E5"> and</font>

735
00:28:01,620 --> 00:28:05,939
what this shell code is<font color="#E5E5E5"> doing then is it</font>

736
00:28:04,590 --> 00:28:08,250
is going to start<font color="#E5E5E5"> a process in a</font>

737
00:28:05,940 --> 00:28:09,809
suspended state it's going to<font color="#E5E5E5"> use an</font>

738
00:28:08,250 --> 00:28:11,700
executable that's already on disk on the

739
00:28:09,809 --> 00:28:14,190
system so typically svchost or

740
00:28:11,700 --> 00:28:15,570
explorer.exe it's going to<font color="#CCCCCC"> suspend it so</font>

741
00:28:14,190 --> 00:28:17,100
it's going<font color="#E5E5E5"> to get loaded into memory but</font>

742
00:28:15,570 --> 00:28:18,720
suspended kind<font color="#E5E5E5"> of like when we load a</font>

743
00:28:17,100 --> 00:28:20,219
program with a debugger right before we

744
00:28:18,720 --> 00:28:22,320
you know we let the debugger break in

745
00:28:20,220 --> 00:28:24,360
before<font color="#E5E5E5"> it begins executing and then it</font>

746
00:28:22,320 --> 00:28:26,189
howls out the main code and replaces

747
00:28:24,360 --> 00:28:28,408
with with its code once it's done with

748
00:28:26,190 --> 00:28:30,240
that replacement and then it resumes the

749
00:28:28,409 --> 00:28:32,750
thread presumes the process and the

750
00:28:30,240 --> 00:28:34,590
malicious code is now executing so it

751
00:28:32,750 --> 00:28:36,240
doesn't necessarily<font color="#CCCCCC"> have to write</font>

752
00:28:34,590 --> 00:28:38,908
anything to<font color="#E5E5E5"> disk it extracts that</font>

753
00:28:36,240 --> 00:28:41,309
shellcode out of the document loads an

754
00:28:38,909 --> 00:28:43,830
executable already on disk replaces it

755
00:28:41,309 --> 00:28:53,190
and then that shell code is is now

756
00:28:43,830 --> 00:28:55,439
executing yes it<font color="#E5E5E5"> is binary anja yes I'm</font>

757
00:28:53,190 --> 00:28:58,860
<font color="#E5E5E5">trying to yes so i use i still use a lot</font>

758
00:28:55,440 --> 00:29:01,890
of<font color="#E5E5E5"> ida that's my i go to my crutch and</font>

759
00:28:58,860 --> 00:29:03,479
i'm using binary ninja more and more to

760
00:29:01,890 --> 00:29:05,159
just to get a feel for the tool

761
00:29:03,480 --> 00:29:07,440
especially as they're developing it and

762
00:29:05,159 --> 00:29:10,440
things are getting much better so use

763
00:29:07,440 --> 00:29:12,559
spider ninja a little bit<font color="#CCCCCC"> okay yeah I</font>

764
00:29:10,440 --> 00:29:16,110
have to admit I know Jordan the

765
00:29:12,559 --> 00:29:19,740
developers so I'm not going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> push it</font>

766
00:29:16,110 --> 00:29:23,039
too hard that's a great<font color="#E5E5E5"> tool though it</font>

767
00:29:19,740 --> 00:29:25,080
looks it looks<font color="#CCCCCC"> pretty yeah yeah I don't</font>

768
00:29:23,039 --> 00:29:26,640
<font color="#CCCCCC">I don't have it in the demo but you can</font>

769
00:29:25,080 --> 00:29:30,240
do this thing on a keyboard where you do

770
00:29:26,640 --> 00:29:37,260
command V and it undoes errors instead

771
00:29:30,240 --> 00:29:40,289
of the I know I'm easing Oh anyway so

772
00:29:37,260 --> 00:29:42,419
here's the shellcode so if<font color="#E5E5E5"> we wanted to</font>

773
00:29:40,289 --> 00:29:43,919
<font color="#E5E5E5">continue to trace the behavior here we'd</font>

774
00:29:42,419 --> 00:29:46,860
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to dump the shellcode from memory</font>

775
00:29:43,919 --> 00:29:48,809
and our analysis from the word document

776
00:29:46,860 --> 00:29:50,760
into this blob of memory<font color="#CCCCCC"> that has the</font>

777
00:29:48,809 --> 00:29:52,950
shellcode is helpful because<font color="#E5E5E5"> it tells us</font>

778
00:29:50,760 --> 00:29:54,090
that what offset to start disassembly so

779
00:29:52,950 --> 00:29:56,159
if<font color="#E5E5E5"> we just take a bunch of bytes and</font>

780
00:29:54,090 --> 00:29:57,750
pull amount of memory we can't always

781
00:29:56,159 --> 00:30:00,690
just tell a disassembler to start up by

782
00:29:57,750 --> 00:30:03,419
one offset<font color="#E5E5E5"> 0 and against disassemble so</font>

783
00:30:00,690 --> 00:30:05,520
we saw<font color="#CCCCCC"> that address before that function</font>

784
00:30:03,419 --> 00:30:07,679
<font color="#E5E5E5">call to cabriolet so we could see here</font>

785
00:30:05,520 --> 00:30:08,970
we're going begin disassembly this is

786
00:30:07,679 --> 00:30:10,350
actually different shellcode so you'll

787
00:30:08,970 --> 00:30:11,580
see the offset occur if you're<font color="#E5E5E5"> really</font>

788
00:30:10,350 --> 00:30:13,500
paying attention off it's just a little

789
00:30:11,580 --> 00:30:16,530
<font color="#CCCCCC">bit different but the concepts very</font>

790
00:30:13,500 --> 00:30:19,620
similar shellcodes a whole nother Beast

791
00:30:16,530 --> 00:30:21,750
we have a lot more anti analysis type

792
00:30:19,620 --> 00:30:24,090
tricks inside of here if we were to dig

793
00:30:21,750 --> 00:30:26,280
into those will see a<font color="#E5E5E5"> lot of dynamic API</font>

794
00:30:24,090 --> 00:30:27,720
resolution so it's going<font color="#E5E5E5"> to load it's</font>

795
00:30:26,280 --> 00:30:29,940
going to find a base address for some

796
00:30:27,720 --> 00:30:31,559
module not through some exploitation but

797
00:30:29,940 --> 00:30:34,380
taking advantage of things like the

798
00:30:31,559 --> 00:30:36,000
process environment block and the linked

799
00:30:34,380 --> 00:30:38,700
list structure that it has in order to

800
00:30:36,000 --> 00:30:41,159
locate<font color="#E5E5E5"> where those addresses are those</font>

801
00:30:38,700 --> 00:30:43,289
modules are in memory get a base address

802
00:30:41,159 --> 00:30:45,360
find some AP<font color="#E5E5E5"> is and then load other</font>

803
00:30:43,289 --> 00:30:47,490
modules like kernel32 or use it<font color="#E5E5E5"> for your</font>

804
00:30:45,360 --> 00:30:49,320
elders as it's needed so you'll see a

805
00:30:47,490 --> 00:30:52,530
<font color="#E5E5E5">lot of things like a call and addy words</font>

806
00:30:49,320 --> 00:30:54,600
and some you know offset relative to EBP

807
00:30:52,530 --> 00:30:56,940
or ESP or just some global do you wear a

808
00:30:54,600 --> 00:30:58,439
dress or something it's indirect and we

809
00:30:56,940 --> 00:30:59,580
don't know what it is<font color="#E5E5E5"> unless we stuck to</font>

810
00:30:58,440 --> 00:31:01,409
the co to figure out how it's been

811
00:30:59,580 --> 00:31:02,939
animals of resolving so we might have to

812
00:31:01,409 --> 00:31:03,980
do quite<font color="#E5E5E5"> a bit more reversing in the</font>

813
00:31:02,940 --> 00:31:11,030
<font color="#CCCCCC">shelf what if you want to</font>

814
00:31:03,980 --> 00:31:20,870
you need to trace it what's up I used a

815
00:31:11,030 --> 00:31:23,240
tool called process hacker yeah you know

816
00:31:20,870 --> 00:31:24,678
I<font color="#E5E5E5"> don't think I have a good this is this</font>

817
00:31:23,240 --> 00:31:33,380
is the only screenshot i have for

818
00:31:24,679 --> 00:31:35,480
process hacker and so no that was when I

819
00:31:33,380 --> 00:31:37,970
and I when you get<font color="#E5E5E5"> the properties of any</font>

820
00:31:35,480 --> 00:31:39,740
process it'll<font color="#E5E5E5"> come up with that window</font>

821
00:31:37,970 --> 00:31:41,450
that has all the tabs there's a memory

822
00:31:39,740 --> 00:31:43,070
tab and a memory tab will have all the

823
00:31:41,450 --> 00:31:45,200
addresses for any memory that the

824
00:31:43,070 --> 00:31:47,480
process is using<font color="#E5E5E5"> and then yep and then I</font>

825
00:31:45,200 --> 00:31:49,640
expanded that I saw the allocation at

826
00:31:47,480 --> 00:31:51,919
that address i expanded it right click

827
00:31:49,640 --> 00:31:54,110
and save<font color="#CCCCCC"> i was in wind debug at this</font>

828
00:31:51,919 --> 00:31:57,500
point in time<font color="#E5E5E5"> as well so you could just</font>

829
00:31:54,110 --> 00:31:59,719
dump from<font color="#E5E5E5"> linda bug supposedly i haven't</font>

830
00:31:57,500 --> 00:32:05,510
gotten that to work yet either right now

831
00:31:59,720 --> 00:32:08,540
<font color="#CCCCCC">is supposed to work here's an example</font>

832
00:32:05,510 --> 00:32:10,309
the highlight on the bottom i renamed

833
00:32:08,540 --> 00:32:12,139
that variable so using<font color="#E5E5E5"> tools like the</font>

834
00:32:10,309 --> 00:32:13,309
end and<font color="#E5E5E5"> ida allows us to rename those</font>

835
00:32:12,140 --> 00:32:15,169
labels which is very<font color="#CCCCCC"> very helpful</font>

836
00:32:13,309 --> 00:32:18,080
otherwise i just would have seen a call

837
00:32:15,169 --> 00:32:19,730
to ad word EVP minus some offset so<font color="#E5E5E5"> i</font>

838
00:32:18,080 --> 00:32:21,080
don't know what that call is but because

839
00:32:19,730 --> 00:32:22,480
i was able<font color="#E5E5E5"> to figure that out or a name</font>

840
00:32:21,080 --> 00:32:25,490
and<font color="#CCCCCC"> i can see it's create process</font>

841
00:32:22,480 --> 00:32:27,320
looking back then up that that call the

842
00:32:25,490 --> 00:32:29,570
the pushes setting up the call stack the

843
00:32:27,320 --> 00:32:31,490
arguments<font color="#CCCCCC"> for that function call if</font><font color="#E5E5E5"> we</font>

844
00:32:29,570 --> 00:32:33,200
looked up createprocess on msdn we'd see

845
00:32:31,490 --> 00:32:35,750
the sixth argument is the process of

846
00:32:33,200 --> 00:32:38,720
creation flags and microsoft defines

847
00:32:35,750 --> 00:32:42,380
what all those values can be and<font color="#E5E5E5"> a value</font>

848
00:32:38,720 --> 00:32:43,790
of<font color="#E5E5E5"> four in hex is suspended so that's</font>

849
00:32:42,380 --> 00:32:45,860
one<font color="#CCCCCC"> of the Telltale's here that we're</font>

850
00:32:43,790 --> 00:32:48,620
<font color="#E5E5E5">looking at the beginning of the process</font>

851
00:32:45,860 --> 00:32:51,229
<font color="#CCCCCC">halloween technique these are the other</font>

852
00:32:48,620 --> 00:32:53,239
API is involved get thread contacts that

853
00:32:51,230 --> 00:32:55,850
gets information about a structure about

854
00:32:53,240 --> 00:32:57,080
the thread and ultimately what it's

855
00:32:55,850 --> 00:32:58,790
going to do you'll see set thread

856
00:32:57,080 --> 00:33:00,770
context there right before resume thread

857
00:32:58,790 --> 00:33:03,110
on that list of calls is it's<font color="#E5E5E5"> going to</font>

858
00:33:00,770 --> 00:33:04,970
be able<font color="#E5E5E5"> to update where when that thread</font>

859
00:33:03,110 --> 00:33:06,110
resumes what address of entry point

860
00:33:04,970 --> 00:33:07,669
essentially is there so it's going to

861
00:33:06,110 --> 00:33:09,020
know where when that thread resumes the

862
00:33:07,669 --> 00:33:11,750
cpos<font color="#CCCCCC"> going to know where to</font><font color="#E5E5E5"> where to</font>

863
00:33:09,020 --> 00:33:14,450
begin execution<font color="#E5E5E5"> unmapped you a section</font>

864
00:33:11,750 --> 00:33:16,010
will take that section from<font color="#E5E5E5"> svchost or</font>

865
00:33:14,450 --> 00:33:17,330
explore whatever process just got how

866
00:33:16,010 --> 00:33:19,580
would have actually take that code

867
00:33:17,330 --> 00:33:21,169
unmapped out of memory and then<font color="#E5E5E5"> right</font>

868
00:33:19,580 --> 00:33:22,879
process memory in conjunction with

869
00:33:21,170 --> 00:33:24,890
something with their virtual a<font color="#E5E5E5"> lock well</font>

870
00:33:22,880 --> 00:33:26,810
then allow it you to allocate memory and

871
00:33:24,890 --> 00:33:28,520
then move your shell code or whatever

872
00:33:26,810 --> 00:33:30,830
you want to get executed into that space

873
00:33:28,520 --> 00:33:34,610
set the thread context and then resumed

874
00:33:30,830 --> 00:33:38,419
the thread<font color="#E5E5E5"> I don't know if this is going</font>

875
00:33:34,610 --> 00:33:40,399
to come through all that well but kind

876
00:33:38,420 --> 00:33:41,960
of<font color="#E5E5E5"> hard to see isn't it well anyways if</font>

877
00:33:40,400 --> 00:33:43,610
<font color="#CCCCCC">you if you watch the process activity</font>

878
00:33:41,960 --> 00:33:47,830
here you'll just see that once<font color="#E5E5E5"> I enable</font>

879
00:33:43,610 --> 00:33:47,830
the content will see an instance of

880
00:33:48,700 --> 00:33:53,300
svchost start and begin execution and

881
00:33:51,560 --> 00:33:58,550
that was<font color="#E5E5E5"> the entire process hollowing</font>

882
00:33:53,300 --> 00:34:00,980
technique in this document if we hover

883
00:33:58,550 --> 00:34:03,200
over or inspect that process you<font color="#E5E5E5"> can see</font>

884
00:34:00,980 --> 00:34:05,210
the path see windows<font color="#CCCCCC"> this while 64</font>

885
00:34:03,200 --> 00:34:06,890
that's bc<font color="#E5E5E5"> host so it looks like it was</font>

886
00:34:05,210 --> 00:34:09,139
started from<font color="#E5E5E5"> that location when in fact</font>

887
00:34:06,890 --> 00:34:13,700
it wasn't well it was it was loaded<font color="#E5E5E5"> from</font>

888
00:34:09,139 --> 00:34:17,900
there but<font color="#E5E5E5"> the code was hollowed out all</font>

889
00:34:13,699 --> 00:34:20,419
right moving right along some powershell

890
00:34:17,900 --> 00:34:22,610
<font color="#CCCCCC">i don't know about you guys but I</font><font color="#E5E5E5"> always</font>

891
00:34:20,420 --> 00:34:24,889
put my offer block its powershell dash

892
00:34:22,610 --> 00:34:27,140
window hidden dash and code and<font color="#CCCCCC"> then</font>

893
00:34:24,889 --> 00:34:30,830
some base64 string whenever I whenever I

894
00:34:27,139 --> 00:34:32,509
offer a with office document so this one

895
00:34:30,830 --> 00:34:34,190
has<font color="#CCCCCC"> the power shell and this is one of</font>

896
00:34:32,510 --> 00:34:37,220
<font color="#E5E5E5">many ways I've seen PowerShell utilized</font>

897
00:34:34,190 --> 00:34:38,450
in an attack this is<font color="#E5E5E5"> also kind</font><font color="#CCCCCC"> of</font>

898
00:34:37,219 --> 00:34:40,850
interesting because it has some error

899
00:34:38,449 --> 00:34:42,319
handling for a<font color="#E5E5E5"> Mac show and Matt will</font>

900
00:34:40,850 --> 00:34:43,759
talk about<font color="#CCCCCC"> that here in a moment we</font>

901
00:34:42,320 --> 00:34:45,440
still had to have macros in order to get

902
00:34:43,760 --> 00:34:46,880
that<font color="#E5E5E5"> content and execute it so you can</font>

903
00:34:45,440 --> 00:34:48,520
see there are<font color="#E5E5E5"> usually a handful of</font>

904
00:34:46,880 --> 00:34:50,900
objects<font color="#E5E5E5"> that you commonly see</font>

905
00:34:48,520 --> 00:34:53,449
wscript.shell and adodb direct to the

906
00:34:50,900 --> 00:34:56,270
file system an<font color="#CCCCCC"> XML HTTP</font><font color="#E5E5E5"> to do stuff with</font>

907
00:34:53,449 --> 00:34:58,040
the internet<font color="#E5E5E5"> and HTTP so there's our</font>

908
00:34:56,270 --> 00:34:59,840
object<font color="#E5E5E5"> it's created and then it used the</font>

909
00:34:58,040 --> 00:35:03,850
contents of that offer field to execute

910
00:34:59,840 --> 00:35:06,500
as the script that script was a base64

911
00:35:03,850 --> 00:35:08,990
encoded string and that's going<font color="#E5E5E5"> to be</font>

912
00:35:06,500 --> 00:35:11,420
the dash<font color="#CCCCCC"> enc is going to decode that and</font>

913
00:35:08,990 --> 00:35:14,720
then it's going to<font color="#E5E5E5"> be executed this is a</font>

914
00:35:11,420 --> 00:35:16,730
multiple stage<font color="#CCCCCC"> powershell and so what it</font>

915
00:35:14,720 --> 00:35:18,109
did was it took all of this first bit of

916
00:35:16,730 --> 00:35:20,360
content here I know it's really<font color="#CCCCCC"> hard to</font>

917
00:35:18,110 --> 00:35:22,940
read but it treated it as a string it

918
00:35:20,360 --> 00:35:24,110
may 64 encoded it and then it used

919
00:35:22,940 --> 00:35:26,540
<font color="#CCCCCC">powershell another instance of</font>

920
00:35:24,110 --> 00:35:28,250
<font color="#E5E5E5">PowerShell to execute that the second</font>

921
00:35:26,540 --> 00:35:30,529
stage is the<font color="#E5E5E5"> more interesting one</font>

922
00:35:28,250 --> 00:35:32,750
because we have in this stage of

923
00:35:30,530 --> 00:35:37,370
of shellcode at the beginning and then

924
00:35:32,750 --> 00:35:40,160
it used as our shellcode it used virtual

925
00:35:37,370 --> 00:35:42,319
a lock and then no set to copy the

926
00:35:40,160 --> 00:35:44,569
shellcode in the memory and then it used

927
00:35:42,320 --> 00:35:46,130
create thread in order to execute that

928
00:35:44,570 --> 00:35:48,020
shellcode so once it was staged in

929
00:35:46,130 --> 00:35:50,180
memory then the<font color="#E5E5E5"> address that we had from</font>

930
00:35:48,020 --> 00:35:53,000
virtual a lock from that allocation in

931
00:35:50,180 --> 00:35:55,040
the X variable was used as the the place

932
00:35:53,000 --> 00:35:57,170
to start<font color="#E5E5E5"> when that thread was created so</font>

933
00:35:55,040 --> 00:36:00,170
that use<font color="#CCCCCC"> PowerShell to eventually get to</font>

934
00:35:57,170 --> 00:36:02,060
the execution of this shell code at this

935
00:36:00,170 --> 00:36:03,530
time when I analyze this it was dead<font color="#E5E5E5"> I</font>

936
00:36:02,060 --> 00:36:05,960
tried<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> a request out to that IP</font>

937
00:36:03,530 --> 00:36:09,130
for that resource and I got a 404 so I

938
00:36:05,960 --> 00:36:12,790
didn't I wasn't<font color="#E5E5E5"> able to go any</font><font color="#CCCCCC"> further</font>

939
00:36:09,130 --> 00:36:16,190
hey BB scripts when I just encountered

940
00:36:12,790 --> 00:36:18,230
this one opened it up and it had these

941
00:36:16,190 --> 00:36:19,580
old Lee objects embedded here at first

942
00:36:18,230 --> 00:36:21,920
glance they look like they're additional

943
00:36:19,580 --> 00:36:24,650
<font color="#CCCCCC">Word documents of course they're not</font>

944
00:36:21,920 --> 00:36:26,000
<font color="#E5E5E5">there r VV scripts all three objects are</font>

945
00:36:24,650 --> 00:36:27,560
the same so if a user were to double

946
00:36:26,000 --> 00:36:29,720
click on them essentially what they're

947
00:36:27,560 --> 00:36:31,520
doing is they're asking for<font color="#E5E5E5"> windows to</font>

948
00:36:29,720 --> 00:36:34,009
handle the execution of these vb scripts

949
00:36:31,520 --> 00:36:37,040
all three are identical grand the hashes

950
00:36:34,010 --> 00:36:39,770
on them they're<font color="#CCCCCC"> all the same so open</font>

951
00:36:37,040 --> 00:36:42,130
them up and you'll see that<font color="#E5E5E5"> again we're</font>

952
00:36:39,770 --> 00:36:44,090
dealing with<font color="#CCCCCC"> the ton</font><font color="#E5E5E5"> of a pea station so</font>

953
00:36:42,130 --> 00:36:46,100
it's up to you i guess as<font color="#CCCCCC"> to how</font><font color="#E5E5E5"> you</font>

954
00:36:44,090 --> 00:36:47,360
want<font color="#E5E5E5"> to tackle that i just did some</font>

955
00:36:46,100 --> 00:36:49,360
dynamic analysis because it really

956
00:36:47,360 --> 00:36:51,260
didn't like the obfuscating all this BB

957
00:36:49,360 --> 00:36:52,610
oftentimes though if<font color="#CCCCCC"> i wanted to</font><font color="#E5E5E5"> start</font>

958
00:36:51,260 --> 00:36:55,850
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to digest all the sophisticated</font>

959
00:36:52,610 --> 00:37:00,620
code<font color="#CCCCCC"> i look for things like this that</font>

960
00:36:55,850 --> 00:37:02,480
open property so<font color="#CCCCCC"> i look for properties</font>

961
00:37:00,620 --> 00:37:04,100
they just can't a few skater it's very

962
00:37:02,480 --> 00:37:06,590
difficult to off you skate on objects

963
00:37:04,100 --> 00:37:08,029
and a dot open probably means that<font color="#E5E5E5"> it's</font>

964
00:37:06,590 --> 00:37:10,700
<font color="#CCCCCC">making a request</font><font color="#E5E5E5"> that's using maybe an</font>

965
00:37:08,030 --> 00:37:12,260
<font color="#E5E5E5">xml HTTP object to do that and so</font><font color="#CCCCCC"> that</font>

966
00:37:10,700 --> 00:37:13,700
if<font color="#E5E5E5"> I'm interested in how its you know</font>

967
00:37:12,260 --> 00:37:16,160
the domains or something that it's using

968
00:37:13,700 --> 00:37:19,970
I might start there and sifting through

969
00:37:16,160 --> 00:37:22,279
all that junk I didn't do that i said i

970
00:37:19,970 --> 00:37:24,200
use proc mon and Wireshark just capture

971
00:37:22,280 --> 00:37:28,970
some basic information this thing drop

972
00:37:24,200 --> 00:37:32,000
two files dot<font color="#CCCCCC"> RMS file and a jvc this</font>

973
00:37:28,970 --> 00:37:33,319
was the dot RMS and guesses on what they

974
00:37:32,000 --> 00:37:39,200
did to this file this was<font color="#CCCCCC"> the initial</font>

975
00:37:33,320 --> 00:37:40,990
file dropped from the vbscript<font color="#CCCCCC"> the 73 is</font>

976
00:37:39,200 --> 00:37:44,140
what stood out to me

977
00:37:40,990 --> 00:37:46,720
they just<font color="#E5E5E5"> did a simple</font><font color="#CCCCCC"> X or so the</font><font color="#E5E5E5"> X or</font>

978
00:37:44,140 --> 00:37:48,549
the<font color="#CCCCCC"> original executable with a hex value</font>

979
00:37:46,720 --> 00:37:51,520
of 73 and that's what came across your

980
00:37:48,550 --> 00:37:53,470
network once it was dropped on the file

981
00:37:51,520 --> 00:37:56,650
system than the vbscript went through it

982
00:37:53,470 --> 00:38:00,549
by 5i x sword was 73 and then you've got

983
00:37:56,650 --> 00:38:03,190
<font color="#CCCCCC">the executable right so if you took</font>

984
00:38:00,550 --> 00:38:06,369
maybe that first value 3e and X sort it

985
00:38:03,190 --> 00:38:09,220
was 73 you get<font color="#CCCCCC"> 4 d otherwise you see all</font>

986
00:38:06,369 --> 00:38:11,970
the 73 is because the<font color="#CCCCCC"> XR 0 is 73 which</font>

987
00:38:09,220 --> 00:38:15,549
is 73 so that's how picked up on that

988
00:38:11,970 --> 00:38:18,129
there's the file there it<font color="#E5E5E5"> is on</font>

989
00:38:15,550 --> 00:38:21,550
virustotal so the document itself wasn't

990
00:38:18,130 --> 00:38:25,780
on bt yet but the files<font color="#E5E5E5"> that it drops</font>

991
00:38:21,550 --> 00:38:27,490
are looks<font color="#E5E5E5"> like it's a trojan that one</font>

992
00:38:25,780 --> 00:38:29,440
was kind of odd because when<font color="#E5E5E5"> i tried to</font>

993
00:38:27,490 --> 00:38:30,879
<font color="#E5E5E5">run it</font><font color="#CCCCCC"> i got a bunch of</font><font color="#E5E5E5"> errors so</font><font color="#CCCCCC"> i</font>

994
00:38:29,440 --> 00:38:32,820
didn't<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> lot of time to debug it</font>

995
00:38:30,880 --> 00:38:35,440
but it just<font color="#E5E5E5"> something seemed off with it</font>

996
00:38:32,820 --> 00:38:37,360
the last sample that<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to talk</font>

997
00:38:35,440 --> 00:38:39,760
about was one that<font color="#E5E5E5"> I just thought was</font>

998
00:38:37,360 --> 00:38:42,280
interesting it utilizes cert util in

999
00:38:39,760 --> 00:38:43,930
order to decode so again we're seeing a

1000
00:38:42,280 --> 00:38:46,420
very common pattern and we have some

1001
00:38:43,930 --> 00:38:48,490
sort of usually trivial occupation or

1002
00:38:46,420 --> 00:38:49,810
encoding scheme in order to get the

1003
00:38:48,490 --> 00:38:51,790
actual payload across the network

1004
00:38:49,810 --> 00:38:53,290
through the internet whatever and then

1005
00:38:51,790 --> 00:38:55,330
something<font color="#E5E5E5"> that is used on that's already</font>

1006
00:38:53,290 --> 00:38:56,440
on<font color="#E5E5E5"> the host whether that's</font><font color="#CCCCCC"> the scripts</font>

1007
00:38:55,330 --> 00:38:58,509
that have been dropped or the<font color="#E5E5E5"> office</font>

1008
00:38:56,440 --> 00:39:00,970
<font color="#E5E5E5">documents or in this case the cert</font>

1009
00:38:58,510 --> 00:39:03,100
utility<font color="#E5E5E5"> that's within Microsoft within</font>

1010
00:39:00,970 --> 00:39:06,790
windows in order to<font color="#E5E5E5"> do the deification</font>

1011
00:39:03,100 --> 00:39:10,750
or the decoding so that's just a link to

1012
00:39:06,790 --> 00:39:12,369
the cert util on msdn with this file<font color="#E5E5E5"> I</font>

1013
00:39:10,750 --> 00:39:14,380
can't remember<font color="#CCCCCC"> now offhand if it drops</font>

1014
00:39:12,369 --> 00:39:16,330
the pfx or if it actually gets it from

1015
00:39:14,380 --> 00:39:18,730
the internet but<font color="#E5E5E5"> this is the first file</font>

1016
00:39:16,330 --> 00:39:23,020
that's actually written to disk in the

1017
00:39:18,730 --> 00:39:25,869
unfolding of this office document and

1018
00:39:23,020 --> 00:39:28,359
this is what you'll see it do it uses

1019
00:39:25,869 --> 00:39:30,580
the cert utility code and then the

1020
00:39:28,359 --> 00:39:33,160
location of that pfx file so it's just

1021
00:39:30,580 --> 00:39:35,230
base 64 encoded so it decodes it that

1022
00:39:33,160 --> 00:39:39,390
writes it as an executable and your temp

1023
00:39:35,230 --> 00:39:39,390
directory and then<font color="#E5E5E5"> it executes sit</font>

1024
00:39:42,710 --> 00:39:47,400
yeah cd2<font color="#CCCCCC"> 1709 and i don't</font><font color="#E5E5E5"> have much to</font>

1025
00:39:46,079 --> 00:39:50,309
<font color="#E5E5E5">say about that</font><font color="#CCCCCC"> i don't anybody has any</font>

1026
00:39:47,400 --> 00:39:53,400
questions<font color="#CCCCCC"> it's patch now so it's much</font>

1027
00:39:50,309 --> 00:39:56,549
mitigated<font color="#CCCCCC"> I think at this point shall I</font>

1028
00:39:53,400 --> 00:39:59,430
turn it<font color="#E5E5E5"> over yeah</font><font color="#CCCCCC"> alright alright</font><font color="#E5E5E5"> so</font>

1029
00:39:56,549 --> 00:40:03,269
some of us Josh and I included like to

1030
00:39:59,430 --> 00:40:06,118
run on our OS 10 boxes so we're<font color="#E5E5E5"> not</font>

1031
00:40:03,269 --> 00:40:08,368
alone although if people get the market

1032
00:40:06,119 --> 00:40:11,549
share<font color="#E5E5E5"> for Mac right it's not very big in</font>

1033
00:40:08,369 --> 00:40:14,910
<font color="#E5E5E5">comparison to people running windows so</font>

1034
00:40:11,549 --> 00:40:16,739
we go we don't<font color="#E5E5E5"> have as much power as it</font>

1035
00:40:14,910 --> 00:40:18,420
is on there but again if you look<font color="#E5E5E5"> at the</font>

1036
00:40:16,739 --> 00:40:21,960
<font color="#E5E5E5">top line on there you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> that it's</font>

1037
00:40:18,420 --> 00:40:23,880
that the way Microsoft built the vb

1038
00:40:21,960 --> 00:40:26,609
right on the<font color="#CCCCCC"> mac it still can load</font>

1039
00:40:23,880 --> 00:40:29,999
binary libraries so this one is loading

1040
00:40:26,609 --> 00:40:32,940
Lib C dynamic library in order to go

1041
00:40:29,999 --> 00:40:34,919
<font color="#E5E5E5">ahead and run a bash shell there right</font>

1042
00:40:32,940 --> 00:40:38,309
in then<font color="#CCCCCC"> it uses the you can use the</font>

1043
00:40:34,920 --> 00:40:40,970
system command which is loaded actually

1044
00:40:38,309 --> 00:40:43,950
this one the newest<font color="#CCCCCC"> version of the mac</font>

1045
00:40:40,970 --> 00:40:46,078
office update will not run this one

1046
00:40:43,950 --> 00:40:49,259
anymore because they've changed it not a

1047
00:40:46,079 --> 00:40:50,759
64-bit<font color="#E5E5E5"> and so if that one doesn't run</font>

1048
00:40:49,259 --> 00:40:53,460
then of course there's a new one right

1049
00:40:50,759 --> 00:40:55,410
that run so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the one that runs</font>

1050
00:40:53,460 --> 00:40:57,749
both right so check to see is<font color="#E5E5E5"> it on a</font>

1051
00:40:55,410 --> 00:41:00,450
<font color="#E5E5E5">Mac risen on windows so they can sort of</font>

1052
00:40:57,749 --> 00:41:03,238
hit both at the same time<font color="#E5E5E5"> and they</font>

1053
00:41:00,450 --> 00:41:06,419
either run me so we saw previously Josh

1054
00:41:03,239 --> 00:41:09,299
showed you the author field as one of

1055
00:41:06,420 --> 00:41:12,089
them oh I mean I usually just laying

1056
00:41:09,299 --> 00:41:14,670
there we go so we use the author field

1057
00:41:12,089 --> 00:41:16,710
in order<font color="#E5E5E5"> to get the power shell code</font>

1058
00:41:14,670 --> 00:41:18,269
that was<font color="#E5E5E5"> going to be executed so that's</font>

1059
00:41:16,710 --> 00:41:21,150
if you're on Windows and then if you're

1060
00:41:18,269 --> 00:41:24,209
not<font color="#E5E5E5"> on Windows then it goes ahead and is</font>

1061
00:41:21,150 --> 00:41:28,049
going<font color="#E5E5E5"> to use create a shell script</font>

1062
00:41:24,210 --> 00:41:30,420
that's using Python and<font color="#E5E5E5"> it'll this one</font>

1063
00:41:28,049 --> 00:41:32,940
basically creates the reverse shell on

1064
00:41:30,420 --> 00:41:35,249
<font color="#CCCCCC">it system</font><font color="#E5E5E5"> using / been flushed SH and</font>

1065
00:41:32,940 --> 00:41:38,660
then<font color="#E5E5E5"> using the maxscript library will go</font>

1066
00:41:35,249 --> 00:41:42,029
ahead<font color="#E5E5E5"> and run and execute that code so</font>

1067
00:41:38,660 --> 00:41:44,069
again we have the<font color="#E5E5E5"> full power of of what</font>

1068
00:41:42,029 --> 00:41:47,460
we had but you know we're we're stuck

1069
00:41:44,069 --> 00:41:50,130
with in a sandbox on OS 10 so they do do

1070
00:41:47,460 --> 00:41:51,989
that<font color="#CCCCCC"> a little bit better so</font><font color="#E5E5E5"> you have to</font>

1071
00:41:50,130 --> 00:41:53,130
get basically get an escape you can open

1072
00:41:51,989 --> 00:41:54,329
any application but

1073
00:41:53,130 --> 00:41:57,420
<font color="#CCCCCC">right into the disk is a lot more</font>

1074
00:41:54,329 --> 00:42:01,769
difficult on OS 10 on the newest updates

1075
00:41:57,420 --> 00:42:22,440
with microsoft word so<font color="#CCCCCC"> i guess we got</font>

1076
00:42:01,769 --> 00:42:26,848
time for<font color="#E5E5E5"> questions or comments I don't</font>

1077
00:42:22,440 --> 00:42:30,869
do any retribution no I'm usually just

1078
00:42:26,849 --> 00:42:33,619
interested in functionality consulting i

1079
00:42:30,869 --> 00:42:36,029
work for bromium and it's usually<font color="#CCCCCC"> just</font>

1080
00:42:33,619 --> 00:42:39,180
just what actually occurred here not

1081
00:42:36,029 --> 00:42:42,059
necessarily repaint them<font color="#E5E5E5"> in attribution</font>

1082
00:42:39,180 --> 00:42:43,919
is part<font color="#E5E5E5"> anyway so that's oh I don't</font>

1083
00:42:42,059 --> 00:42:46,529
think I really want<font color="#E5E5E5"> to keep it dries but</font>

1084
00:42:43,920 --> 00:42:48,390
the question how do<font color="#E5E5E5"> you burn off any of</font>

1085
00:42:46,529 --> 00:42:50,869
<font color="#E5E5E5">these that actually do detection is over</font>

1086
00:42:48,390 --> 00:42:53,569
there<font color="#CCCCCC"> they're in a sandbox and then</font>

1087
00:42:50,869 --> 00:42:57,500
change the behavior basement

1088
00:42:53,570 --> 00:42:59,210
I<font color="#CCCCCC"> I do</font><font color="#E5E5E5"> i have a blog post on the bromine</font>

1089
00:42:57,500 --> 00:43:01,880
web site specific that<font color="#E5E5E5"> i should have</font>

1090
00:42:59,210 --> 00:43:03,110
included that<font color="#E5E5E5"> i didn't yes</font><font color="#CCCCCC"> i don't</font>

1091
00:43:01,880 --> 00:43:05,060
<font color="#E5E5E5">remember all the details and off the top</font>

1092
00:43:03,110 --> 00:43:07,640
of my head<font color="#CCCCCC"> but it was using I think wmi</font>

1093
00:43:05,060 --> 00:43:08,900
to query it was actually<font color="#CCCCCC"> a variety of</font>

1094
00:43:07,640 --> 00:43:11,299
things that one of<font color="#E5E5E5"> the ones that I</font>

1095
00:43:08,900 --> 00:43:13,340
remember was<font color="#E5E5E5"> I think was using wmi to</font>

1096
00:43:11,300 --> 00:43:15,620
get the<font color="#CCCCCC"> process list and then looking</font>

1097
00:43:13,340 --> 00:43:17,510
for you know your<font color="#E5E5E5"> telcel processes that</font>

1098
00:43:15,620 --> 00:43:28,400
<font color="#CCCCCC">were</font><font color="#E5E5E5"> running virtualization he boxing</font>

1099
00:43:17,510 --> 00:43:30,740
qemu<font color="#E5E5E5"> and a couple others so I don't look</font>

1100
00:43:28,400 --> 00:43:32,800
at these<font color="#CCCCCC"> things</font><font color="#E5E5E5"> in mass so I'm something</font>

1101
00:43:30,740 --> 00:43:35,180
that looks at you know 50 Watts a day

1102
00:43:32,800 --> 00:43:37,820
and the last year though that was the

1103
00:43:35,180 --> 00:43:39,680
<font color="#E5E5E5">only man that I've encounters badan and</font>

1104
00:43:37,820 --> 00:43:41,510
this one here that<font color="#E5E5E5"> last max there that</font>

1105
00:43:39,680 --> 00:43:44,000
<font color="#E5E5E5">last one of the look at that actually</font>

1106
00:43:41,510 --> 00:43:46,400
targeted both I don't took it to see

1107
00:43:44,000 --> 00:43:48,770
that either so<font color="#E5E5E5"> I think a lot</font><font color="#CCCCCC"> of these</font>

1108
00:43:46,400 --> 00:43:50,750
techniques right now are sort of in

1109
00:43:48,770 --> 00:43:52,790
their infancy so they're not doing a lot

1110
00:43:50,750 --> 00:43:54,530
of checking but as people sort<font color="#E5E5E5"> of get</font>

1111
00:43:52,790 --> 00:43:56,930
more aware they're going to write

1112
00:43:54,530 --> 00:43:58,730
increase that and it he showed earlier

1113
00:43:56,930 --> 00:44:00,020
the password one and so the entire

1114
00:43:58,730 --> 00:44:01,700
reason you have a<font color="#E5E5E5"> password on that</font>

1115
00:44:00,020 --> 00:44:03,680
document that the<font color="#E5E5E5"> user has to type in is</font>

1116
00:44:01,700 --> 00:44:05,330
that auto analysis isn't going to be

1117
00:44:03,680 --> 00:44:07,790
able to run<font color="#E5E5E5"> on that and determine oh</font>

1118
00:44:05,330 --> 00:44:10,009
yeah as soon<font color="#CCCCCC"> as it enables macros right</font>

1119
00:44:07,790 --> 00:44:12,110
then we have something<font color="#CCCCCC"> that runs so that</font>

1120
00:44:10,010 --> 00:44:14,150
stops that Ottawa now just right off the

1121
00:44:12,110 --> 00:44:15,590
bat so you you know have to<font color="#E5E5E5"> have the NL</font>

1122
00:44:14,150 --> 00:44:20,440
figure out what's<font color="#E5E5E5"> the password is and</font>

1123
00:44:15,590 --> 00:44:22,400
then fill it in in order them yeah as

1124
00:44:20,440 --> 00:44:24,860
usual right<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean it's just going to</font>

1125
00:44:22,400 --> 00:44:26,660
escalate as we lose ooo start stopping

1126
00:44:24,860 --> 00:44:28,220
power shell right they're gonna<font color="#E5E5E5"> they're</font>

1127
00:44:26,660 --> 00:44:31,480
going to try and use more advanced

1128
00:44:28,220 --> 00:44:31,480
techniques after that

1129
00:44:38,810 --> 00:44:47,540
did I didn't look that script I guess I

1130
00:44:45,680 --> 00:44:50,000
typically don't look at the metadata the

1131
00:44:47,540 --> 00:44:51,160
<font color="#E5E5E5">author and stuff if you run</font><font color="#CCCCCC"> file usually</font>

1132
00:44:50,000 --> 00:44:59,270
you can see that<font color="#CCCCCC"> kind of information</font>

1133
00:44:51,160 --> 00:45:01,970
there's some other tools it's actually

1134
00:44:59,270 --> 00:45:04,520
parsing it's actually parsing the word

1135
00:45:01,970 --> 00:45:05,569
documents in<font color="#CCCCCC"> their their binary format</font>

1136
00:45:04,520 --> 00:45:07,790
and figuring out<font color="#CCCCCC"> all the different</font>

1137
00:45:05,570 --> 00:45:13,460
<font color="#E5E5E5">sections and then presenting that to you</font>

1138
00:45:07,790 --> 00:45:15,830
and letting you what the new docx

1139
00:45:13,460 --> 00:46:03,470
formats are more complex than<font color="#E5E5E5"> the old</font>

1140
00:45:15,830 --> 00:46:06,470
ones they're dried up seems to<font color="#E5E5E5"> be a big</font>

1141
00:46:03,470 --> 00:46:08,000
one right now I<font color="#E5E5E5"> think the process</font>

1142
00:46:06,470 --> 00:46:11,299
<font color="#CCCCCC">Halloween one we looked at earlier was</font>

1143
00:46:08,000 --> 00:46:14,000
dry ducks it was dropping directs you

1144
00:46:11,300 --> 00:46:16,580
know just<font color="#E5E5E5"> Trojans i don't know if</font><font color="#CCCCCC"> i can</font>

1145
00:46:14,000 --> 00:46:17,900
say that there's a specific<font color="#E5E5E5"> type i don't</font>

1146
00:46:16,580 --> 00:46:19,430
see a lot of ransomware coming out of

1147
00:46:17,900 --> 00:46:21,170
<font color="#E5E5E5">all the stocks right now but that just</font>

1148
00:46:19,430 --> 00:46:22,970
could<font color="#CCCCCC"> be because</font><font color="#E5E5E5"> of the ones i tend to</font>

1149
00:46:21,170 --> 00:46:24,560
look at that they tend<font color="#E5E5E5"> to be more the</font>

1150
00:46:22,970 --> 00:46:26,839
<font color="#E5E5E5">trojan the dried x the things that are</font>

1151
00:46:24,560 --> 00:46:29,230
trying<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> a stealthy persistence on</font>

1152
00:46:26,840 --> 00:46:29,230
that host

1153
00:46:41,599 --> 00:46:51,690
no yeah that was an actual mal doc that

1154
00:46:50,460 --> 00:46:55,200
was a little bit of I<font color="#CCCCCC"> think some of your</font>

1155
00:46:51,690 --> 00:46:57,630
code but yeah i modified it has been was

1156
00:46:55,200 --> 00:46:59,700
best<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> really the actual code within</font>

1157
00:46:57,630 --> 00:47:00,930
that malla doc that was distributed and

1158
00:46:59,700 --> 00:47:03,689
again<font color="#E5E5E5"> I don't remember exactly where I</font>

1159
00:47:00,930 --> 00:47:05,700
got that sample now it looked to me like

1160
00:47:03,690 --> 00:47:07,260
proof of concept cold if you<font color="#E5E5E5"> look at</font>

1161
00:47:05,700 --> 00:47:09,328
even the comments it had they had

1162
00:47:07,260 --> 00:47:11,220
comments in it like try your<font color="#E5E5E5"> wind show</font>

1163
00:47:09,329 --> 00:47:13,589
at this fails and we'll jump down here

1164
00:47:11,220 --> 00:47:15,509
and<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> try the mac shell and that mac</font>

1165
00:47:13,589 --> 00:47:17,670
show was pretty simplistic and what<font color="#CCCCCC"> i</font>

1166
00:47:15,510 --> 00:47:20,039
was trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do so but it was a</font>

1167
00:47:17,670 --> 00:47:21,750
distributed so<font color="#CCCCCC"> i don't know but malware</font>

1168
00:47:20,039 --> 00:47:23,339
authors were there was a trial run or

1169
00:47:21,750 --> 00:47:26,450
hope sir they thought it was

1170
00:47:23,339 --> 00:47:26,450
production-ready I don't know

1171
00:47:31,670 --> 00:47:34,569
anything<font color="#E5E5E5"> else</font>

1172
00:47:35,390 --> 00:47:39,290
alright well thank you<font color="#E5E5E5"> very much</font>

1173
00:47:37,730 --> 00:47:42,170
appreciate<font color="#CCCCCC"> your guys decide</font>

1174
00:47:39,290 --> 00:47:42,170
[Applause]

