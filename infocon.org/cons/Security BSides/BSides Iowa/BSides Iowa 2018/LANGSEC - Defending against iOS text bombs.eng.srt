1
00:00:25,410 --> 00:00:30,800
okay I'm Chad

2
00:00:28,280 --> 00:00:33,410
<font color="#CCCCCC">a baker from here in Des Moines I have a</font>

3
00:00:30,800 --> 00:00:35,300
consultancy fly<font color="#CCCCCC"> dog Solutions LLC</font><font color="#E5E5E5"> and</font>

4
00:00:33,410 --> 00:00:39,169
today I'm<font color="#CCCCCC"> gonna be talking</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> lang</font>

5
00:00:35,300 --> 00:00:41,089
<font color="#CCCCCC">SEC language-based security and how a</font>

6
00:00:39,170 --> 00:00:44,510
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of the vulnerabilities that have</font>

7
00:00:41,090 --> 00:00:48,860
popped up recently<font color="#E5E5E5"> for a long time have</font>

8
00:00:44,510 --> 00:00:53,089
all been based<font color="#E5E5E5"> in programmer failure to</font>

9
00:00:48,860 --> 00:00:55,699
follow basic formal language patterns<font color="#E5E5E5"> in</font>

10
00:00:53,090 --> 00:00:57,650
their programming<font color="#E5E5E5"> and so hopefully we</font>

11
00:00:55,699 --> 00:01:00,170
<font color="#CCCCCC">can write software</font><font color="#E5E5E5"> that's correct</font>

12
00:00:57,650 --> 00:01:04,369
from the start<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> won't</font><font color="#CCCCCC"> find any</font>

13
00:01:00,170 --> 00:01:07,280
bugs in<font color="#E5E5E5"> it later</font><font color="#CCCCCC"> so the the language</font>

14
00:01:04,369 --> 00:01:09,140
<font color="#E5E5E5">security thesis is that</font><font color="#CCCCCC"> if we use formal</font>

15
00:01:07,280 --> 00:01:11,200
language to write provably correct code

16
00:01:09,140 --> 00:01:13,750
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> not going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> any books and</font>

17
00:01:11,200 --> 00:01:18,940
for the longest<font color="#CCCCCC"> time</font>

18
00:01:13,750 --> 00:01:21,710
<font color="#CCCCCC">well since the 70s in C we've</font><font color="#E5E5E5"> been very</font>

19
00:01:18,940 --> 00:01:24,229
undisciplined<font color="#CCCCCC"> about how we write our</font>

20
00:01:21,710 --> 00:01:25,940
<font color="#E5E5E5">code in thinking of the different</font>

21
00:01:24,229 --> 00:01:28,820
complexity models that<font color="#CCCCCC"> we're introducing</font>

22
00:01:25,940 --> 00:01:30,970
<font color="#CCCCCC">as we go along</font><font color="#E5E5E5"> to try to make sure</font><font color="#CCCCCC"> that</font>

23
00:01:28,820 --> 00:01:34,580
<font color="#CCCCCC">we're very disciplined and</font><font color="#E5E5E5"> at each</font>

24
00:01:30,970 --> 00:01:37,490
decision<font color="#E5E5E5"> we make try to always default</font>

25
00:01:34,580 --> 00:01:39,710
<font color="#CCCCCC">to the least complex</font><font color="#E5E5E5"> model we can use</font>

26
00:01:37,490 --> 00:01:44,770
which<font color="#E5E5E5"> makes our code a lot more testable</font>

27
00:01:39,710 --> 00:01:46,729
and<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> more safe so here's a</font>

28
00:01:44,770 --> 00:01:49,340
vulnerability<font color="#E5E5E5"> that came out maybe like</font><font color="#CCCCCC"> a</font>

29
00:01:46,729 --> 00:01:53,240
week<font color="#E5E5E5"> or</font><font color="#CCCCCC"> couple weeks ago</font><font color="#E5E5E5"> it was the</font>

30
00:01:49,340 --> 00:01:56,210
Windows Defender bug which was a bug in

31
00:01:53,240 --> 00:02:00,439
<font color="#E5E5E5">Windows</font><font color="#CCCCCC"> ball</font><font color="#E5E5E5"> durability scanner that it</font>

32
00:01:56,210 --> 00:02:03,380
parsed<font color="#E5E5E5"> a</font><font color="#CCCCCC"> RAR file</font><font color="#E5E5E5"> and it had a memory</font>

33
00:02:00,439 --> 00:02:05,960
leak in it<font color="#E5E5E5"> with root</font><font color="#CCCCCC"> privileges</font><font color="#E5E5E5"> stuff</font>

34
00:02:03,380 --> 00:02:08,209
like this should not happen<font color="#CCCCCC"> if we were</font>

35
00:02:05,960 --> 00:02:09,709
writing formal parsers and<font color="#CCCCCC"> you think</font>

36
00:02:08,209 --> 00:02:15,320
<font color="#E5E5E5">about all the different parsers</font><font color="#CCCCCC"> that you</font>

37
00:02:09,709 --> 00:02:17,959
use I mean<font color="#E5E5E5"> we have HTTP your</font><font color="#CCCCCC"> parson the</font>

38
00:02:15,320 --> 00:02:20,329
<font color="#E5E5E5">command line if you're used in sequel</font>

39
00:02:17,959 --> 00:02:22,850
<font color="#CCCCCC">you have a sequel parser if you're</font>

40
00:02:20,329 --> 00:02:26,030
<font color="#E5E5E5">passing JSON packets around with a web</font>

41
00:02:22,850 --> 00:02:27,500
client<font color="#E5E5E5"> got</font><font color="#CCCCCC"> a parser for that</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> a</font>

42
00:02:26,030 --> 00:02:31,370
parser for<font color="#E5E5E5"> all your different data files</font>

43
00:02:27,500 --> 00:02:32,900
like JSON or PNG<font color="#CCCCCC"> and you also have a</font>

44
00:02:31,370 --> 00:02:34,549
parser and<font color="#E5E5E5"> a lot of your operating</font>

45
00:02:32,900 --> 00:02:36,500
<font color="#E5E5E5">system calls</font><font color="#CCCCCC"> anytime where you're</font>

46
00:02:34,549 --> 00:02:38,750
passing<font color="#E5E5E5"> in a string to that operating</font>

47
00:02:36,500 --> 00:02:41,860
system<font color="#CCCCCC"> calls in</font><font color="#E5E5E5"> your C library there's a</font>

48
00:02:38,750 --> 00:02:41,860
parser under the hood<font color="#CCCCCC"> of that</font>

49
00:02:43,030 --> 00:02:48,379
and so there's<font color="#CCCCCC"> been a lot of</font><font color="#E5E5E5"> different</font>

50
00:02:46,219 --> 00:02:49,939
<font color="#CCCCCC">parser related bugs lately this this</font>

51
00:02:48,379 --> 00:02:54,828
Windows Defender bug that came out a

52
00:02:49,939 --> 00:02:56,500
couple<font color="#E5E5E5"> weeks ago</font><font color="#CCCCCC"> this iOS</font><font color="#E5E5E5"> Unicode parse</font>

53
00:02:54,829 --> 00:02:58,700
<font color="#E5E5E5">bomb where they didn't write a proper</font>

54
00:02:56,500 --> 00:03:00,609
parser for<font color="#E5E5E5"> Unicode so you could pass</font>

55
00:02:58,700 --> 00:03:05,209
like emoji that<font color="#E5E5E5"> would like crash your</font>

56
00:03:00,609 --> 00:03:09,049
your iOS device<font color="#CCCCCC"> shellshock there was a</font>

57
00:03:05,209 --> 00:03:12,049
bug in<font color="#CCCCCC"> the bash parser</font><font color="#E5E5E5"> image tragic</font>

58
00:03:09,049 --> 00:03:15,709
there was a bug in<font color="#CCCCCC"> everybody's like a</font>

59
00:03:12,049 --> 00:03:17,419
PNG<font color="#CCCCCC"> or JPEG parser for image magic and</font>

60
00:03:15,709 --> 00:03:19,340
then sequel injection<font color="#CCCCCC"> we deal with</font><font color="#E5E5E5"> that</font>

61
00:03:17,419 --> 00:03:21,500
all the<font color="#CCCCCC"> time and</font><font color="#E5E5E5"> if we think about it</font>

62
00:03:19,340 --> 00:03:24,379
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> really a parser bug</font><font color="#E5E5E5"> because we're</font>

63
00:03:21,500 --> 00:03:26,750
allowing<font color="#E5E5E5"> unperson put to go to a place</font>

64
00:03:24,379 --> 00:03:28,518
<font color="#E5E5E5">where it's</font><font color="#CCCCCC"> not supposed to go</font><font color="#E5E5E5"> and we</font>

65
00:03:26,750 --> 00:03:36,530
catch that<font color="#CCCCCC"> upfront</font><font color="#E5E5E5"> if we actually parsed</font>

66
00:03:28,519 --> 00:03:38,090
it properly so here's kind<font color="#E5E5E5"> of a brief</font>

67
00:03:36,530 --> 00:03:40,909
history<font color="#CCCCCC"> over the</font><font color="#E5E5E5"> last century of how</font>

68
00:03:38,090 --> 00:03:43,459
this is unfolded<font color="#CCCCCC"> a little bit</font><font color="#E5E5E5"> after the</font>

69
00:03:40,909 --> 00:03:45,260
<font color="#E5E5E5">turn is a little bit after 1900 there</font>

70
00:03:43,459 --> 00:03:48,349
<font color="#E5E5E5">was a</font><font color="#CCCCCC"> International math</font><font color="#E5E5E5"> conference and</font>

71
00:03:45,260 --> 00:03:51,078
Hilbert proposed the problem hey can we

72
00:03:48,349 --> 00:03:53,000
solve like all problems<font color="#CCCCCC"> mathematically</font>

73
00:03:51,079 --> 00:03:55,400
and with computers<font color="#E5E5E5"> before</font><font color="#CCCCCC"> we actually</font>

74
00:03:53,000 --> 00:03:58,310
had computers<font color="#E5E5E5"> and then Church and Turing</font>

75
00:03:55,400 --> 00:04:00,169
came along<font color="#E5E5E5"> a couple years later and</font>

76
00:03:58,310 --> 00:04:02,739
they're like no there's<font color="#E5E5E5"> things out there</font>

77
00:04:00,169 --> 00:04:05,269
<font color="#CCCCCC">that are</font><font color="#E5E5E5"> uncomputable</font><font color="#CCCCCC"> even if we had a</font>

78
00:04:02,739 --> 00:04:09,019
<font color="#CCCCCC">infinitely powerful computer we still</font>

79
00:04:05,269 --> 00:04:11,509
<font color="#E5E5E5">couldn't solve them and then in the 50s</font>

80
00:04:09,019 --> 00:04:14,389
<font color="#CCCCCC">and 60s Chomsky came along and</font><font color="#E5E5E5"> he's like</font>

81
00:04:11,509 --> 00:04:17,599
hey everything is you know<font color="#CCCCCC"> uncomputable</font>

82
00:04:14,389 --> 00:04:19,909
<font color="#CCCCCC">in the worst case but for most of like</font>

83
00:04:17,599 --> 00:04:23,419
<font color="#E5E5E5">human language and what we do as humans</font>

84
00:04:19,909 --> 00:04:26,240
<font color="#E5E5E5">there are many simplified use cases</font><font color="#CCCCCC"> of</font>

85
00:04:23,419 --> 00:04:28,490
the languages<font color="#E5E5E5"> we</font><font color="#CCCCCC"> use and and we</font><font color="#E5E5E5"> can kind</font>

86
00:04:26,240 --> 00:04:31,400
<font color="#E5E5E5">of construct a hierarchy</font><font color="#CCCCCC"> of it takes</font>

87
00:04:28,490 --> 00:04:34,610
more and<font color="#E5E5E5"> more power and then Valaya in</font>

88
00:04:31,400 --> 00:04:38,448
around 1975 proved that context-free

89
00:04:34,610 --> 00:04:41,690
grammar parsing is just matrix matrix

90
00:04:38,449 --> 00:04:44,810
multiply<font color="#E5E5E5"> so you know if you have a fast</font>

91
00:04:41,690 --> 00:04:46,789
<font color="#CCCCCC">Strawson sparse matrix</font><font color="#E5E5E5"> matrix multiply</font>

92
00:04:44,810 --> 00:04:48,409
that's<font color="#E5E5E5"> exactly the same complexity as</font>

93
00:04:46,789 --> 00:04:51,099
grammar parsing so it's actually<font color="#CCCCCC"> the</font>

94
00:04:48,409 --> 00:04:51,099
<font color="#E5E5E5">same problem</font>

95
00:04:52,989 --> 00:04:58,549
so here's kind<font color="#E5E5E5"> of a Chomsky type</font>

96
00:04:56,149 --> 00:05:02,959
<font color="#CCCCCC">hierarchy of the different complexities</font>

97
00:04:58,550 --> 00:05:07,309
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> normally run into at the top we</font>

98
00:05:02,959 --> 00:05:09,409
have<font color="#CCCCCC"> a static immutable variables I mean</font>

99
00:05:07,309 --> 00:05:11,089
you declare<font color="#CCCCCC"> it once it never changes and</font>

100
00:05:09,409 --> 00:05:14,659
it's really<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to reason</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> cuz</font>

101
00:05:11,089 --> 00:05:18,019
it's constant<font color="#CCCCCC"> you have a</font><font color="#E5E5E5"> finite state</font>

102
00:05:14,659 --> 00:05:21,619
<font color="#E5E5E5">machines which are nice because you only</font>

103
00:05:18,019 --> 00:05:23,089
<font color="#E5E5E5">need a finite state</font><font color="#CCCCCC"> to reason about</font><font color="#E5E5E5"> them</font>

104
00:05:21,619 --> 00:05:25,669
and they're<font color="#E5E5E5"> also cool because you can</font>

105
00:05:23,089 --> 00:05:31,029
<font color="#E5E5E5">evaluate them in parallel you</font><font color="#CCCCCC"> can</font>

106
00:05:25,669 --> 00:05:31,029
actually<font color="#E5E5E5"> shop</font><font color="#CCCCCC"> everyone else is coming in</font>

107
00:05:35,889 --> 00:05:42,619
you can chop them up and<font color="#E5E5E5"> evaluate chunks</font>

108
00:05:40,339 --> 00:05:48,349
in parallel and<font color="#E5E5E5"> then combine them and so</font>

109
00:05:42,619 --> 00:05:50,179
<font color="#E5E5E5">you can use cool algorithms like yeah</font>

110
00:05:48,349 --> 00:05:53,050
like<font color="#CCCCCC"> Map Reduce</font><font color="#E5E5E5"> if you wanted to and</font>

111
00:05:50,179 --> 00:05:56,929
evaluate the massive strings in parallel

112
00:05:53,050 --> 00:05:59,059
<font color="#CCCCCC">and there's context-free complexity</font>

113
00:05:56,929 --> 00:06:01,578
which is I have a<font color="#E5E5E5"> finite state machine</font>

114
00:05:59,059 --> 00:06:04,999
and<font color="#CCCCCC"> I also need a stack to store</font><font color="#E5E5E5"> what</font>

115
00:06:01,579 --> 00:06:06,529
state I'm in<font color="#CCCCCC"> and that's that's</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font>

116
00:06:04,999 --> 00:06:08,659
bounded reasoning as long as I have the

117
00:06:06,529 --> 00:06:10,729
context of where I'm at<font color="#CCCCCC"> on the stack and</font>

118
00:06:08,659 --> 00:06:13,159
when I'm parsing these things I have to

119
00:06:10,729 --> 00:06:15,169
make<font color="#E5E5E5"> sure that</font><font color="#CCCCCC"> this stack</font><font color="#E5E5E5"> only grows</font><font color="#CCCCCC"> to</font>

120
00:06:13,159 --> 00:06:16,789
a<font color="#CCCCCC"> certain size or else</font><font color="#E5E5E5"> it's gonna</font>

121
00:06:15,169 --> 00:06:17,479
overflow my memory so I still have to<font color="#E5E5E5"> be</font>

122
00:06:16,789 --> 00:06:20,959
careful<font color="#CCCCCC"> with that</font>

123
00:06:17,479 --> 00:06:23,449
<font color="#E5E5E5">and then there's the full case of like</font>

124
00:06:20,959 --> 00:06:25,339
all<font color="#E5E5E5"> different programs which I can</font>

125
00:06:23,449 --> 00:06:28,579
simulate<font color="#E5E5E5"> with just a finite state</font>

126
00:06:25,339 --> 00:06:29,990
machine in two stacks and if I if you

127
00:06:28,579 --> 00:06:32,599
give me a finite<font color="#E5E5E5"> state machine in two</font>

128
00:06:29,990 --> 00:06:34,429
stacks<font color="#CCCCCC"> no matter how they are</font><font color="#E5E5E5"> you have a</font>

129
00:06:32,599 --> 00:06:39,019
sometimes they<font color="#E5E5E5"> call like a weird machine</font>

130
00:06:34,429 --> 00:06:41,268
<font color="#E5E5E5">and you can compute anything with it</font><font color="#CCCCCC"> so</font>

131
00:06:39,019 --> 00:06:46,279
for<font color="#E5E5E5"> those we try to whitelist it to a</font>

132
00:06:41,269 --> 00:06:48,439
patterns<font color="#E5E5E5"> of that we know our are going</font>

133
00:06:46,279 --> 00:06:53,779
<font color="#CCCCCC">to halt</font><font color="#E5E5E5"> on us and use finite resource</font>

134
00:06:48,439 --> 00:06:55,729
bounds so for static immutable<font color="#E5E5E5"> things we</font>

135
00:06:53,779 --> 00:06:59,058
just<font color="#CCCCCC"> have to be</font><font color="#E5E5E5"> very smart about</font><font color="#CCCCCC"> using</font>

136
00:06:55,729 --> 00:07:02,019
our programming language wisely<font color="#CCCCCC"> so if we</font>

137
00:06:59,059 --> 00:07:05,209
have like a constant constructs<font color="#E5E5E5"> use that</font>

138
00:07:02,019 --> 00:07:05,960
<font color="#E5E5E5">like there's the Const identifier in C++</font>

139
00:07:05,209 --> 00:07:08,930
that<font color="#E5E5E5"> you can use</font>

140
00:07:05,960 --> 00:07:12,530
to<font color="#E5E5E5"> simplify things to the compiler</font><font color="#CCCCCC"> if</font>

141
00:07:08,930 --> 00:07:15,259
you're using languages like C or<font color="#E5E5E5"> C++ you</font>

142
00:07:12,530 --> 00:07:18,169
can use<font color="#CCCCCC"> enews</font><font color="#E5E5E5"> I mean don't pass an</font>

143
00:07:15,259 --> 00:07:21,530
integer that has you know 32 bits worth

144
00:07:18,169 --> 00:07:23,330
of values when<font color="#CCCCCC"> you only need like 3 and</font>

145
00:07:21,530 --> 00:07:26,000
so you can constrain<font color="#E5E5E5"> your state space</font>

146
00:07:23,330 --> 00:07:30,080
down to the minimum<font color="#E5E5E5"> you need that's very</font>

147
00:07:26,000 --> 00:07:31,850
important<font color="#E5E5E5"> for</font><font color="#CCCCCC"> finite state machines you</font>

148
00:07:30,080 --> 00:07:33,979
can<font color="#CCCCCC"> use regular expressions or a handy</font>

149
00:07:31,850 --> 00:07:35,060
notation for string matching<font color="#E5E5E5"> the one</font>

150
00:07:33,979 --> 00:07:37,008
thing you have<font color="#CCCCCC"> to worry about</font><font color="#E5E5E5"> with</font>

151
00:07:35,060 --> 00:07:38,419
finite<font color="#CCCCCC"> are</font><font color="#E5E5E5"> a regular</font><font color="#CCCCCC"> expression so is</font>

152
00:07:37,009 --> 00:07:40,630
make sure<font color="#CCCCCC"> that you bound all your</font>

153
00:07:38,419 --> 00:07:42,710
<font color="#E5E5E5">matches make sure that you're not</font>

154
00:07:40,630 --> 00:07:45,889
matching on anything<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> more than</font>

155
00:07:42,710 --> 00:07:46,969
like lengths<font color="#E5E5E5"> something that's what we</font>

156
00:07:45,889 --> 00:07:50,900
run<font color="#E5E5E5"> into</font><font color="#CCCCCC"> trouble with regular</font>

157
00:07:46,970 --> 00:07:52,160
expressions<font color="#CCCCCC"> mostly</font><font color="#E5E5E5"> a little tidbit Eric</font>

158
00:07:50,900 --> 00:08:00,429
<font color="#E5E5E5">Schmidt at Google he was one of the</font>

159
00:07:52,160 --> 00:08:03,470
co-authors<font color="#CCCCCC"> of lacks the Lex parser for</font>

160
00:08:00,430 --> 00:08:05,509
context-free grammars<font color="#CCCCCC"> of course you can</font>

161
00:08:03,470 --> 00:08:07,580
use the the<font color="#CCCCCC"> Bacchus nord</font><font color="#E5E5E5"> BNF notation</font>

162
00:08:05,509 --> 00:08:10,159
where you like have like you know<font color="#E5E5E5"> state</font>

163
00:08:07,580 --> 00:08:12,740
<font color="#E5E5E5">a goes to B or C or</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> and then they</font>

164
00:08:10,159 --> 00:08:15,590
expand into you know this and at the

165
00:08:12,740 --> 00:08:17,479
<font color="#E5E5E5">bottom you have terminals</font><font color="#CCCCCC"> there's</font>

166
00:08:15,590 --> 00:08:19,489
different parser generators out there

167
00:08:17,479 --> 00:08:21,800
that a<font color="#E5E5E5"> lot of people use like bison if</font>

168
00:08:19,490 --> 00:08:25,070
you're<font color="#E5E5E5"> doing C code or antler if you're</font>

169
00:08:21,800 --> 00:08:26,800
in like the<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> world</font><font color="#E5E5E5"> and there's</font>

170
00:08:25,070 --> 00:08:29,030
another way that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> use it</font><font color="#E5E5E5"> that's</font>

171
00:08:26,800 --> 00:08:33,020
probably should be used<font color="#E5E5E5"> more it's called</font>

172
00:08:29,030 --> 00:08:35,088
a parser Combinator where you kind of

173
00:08:33,020 --> 00:08:38,240
build up<font color="#E5E5E5"> your language using various</font>

174
00:08:35,089 --> 00:08:40,760
<font color="#E5E5E5">small functions and just compose them</font>

175
00:08:38,240 --> 00:08:42,830
together<font color="#CCCCCC"> it's like you have a function</font>

176
00:08:40,760 --> 00:08:44,660
that recognizes the letter<font color="#CCCCCC"> a and you</font>

177
00:08:42,830 --> 00:08:46,400
<font color="#CCCCCC">have a function I</font><font color="#E5E5E5"> that like recognizes</font>

178
00:08:44,660 --> 00:08:49,400
the letter B<font color="#E5E5E5"> and then you have a</font>

179
00:08:46,400 --> 00:08:50,810
function that<font color="#E5E5E5"> says I want to recognize</font>

180
00:08:49,400 --> 00:08:52,390
an A and then recognize a B and you'll

181
00:08:50,810 --> 00:08:54,890
chain those together<font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> create</font>

182
00:08:52,390 --> 00:08:58,600
essentially<font color="#E5E5E5"> just your full context-free</font>

183
00:08:54,890 --> 00:08:58,600
grammar out of these these<font color="#CCCCCC"> combinators</font>

184
00:08:59,170 --> 00:09:02,540
and when you're in the<font color="#CCCCCC"> the</font>

185
00:09:00,980 --> 00:09:06,649
<font color="#CCCCCC">turing-complete</font><font color="#E5E5E5"> case that</font><font color="#CCCCCC"> i don't really</font>

186
00:09:02,540 --> 00:09:08,930
<font color="#CCCCCC">have any i don't know the</font><font color="#E5E5E5"> complexity of</font>

187
00:09:06,649 --> 00:09:11,600
what<font color="#CCCCCC"> i'm dealing</font><font color="#E5E5E5"> with about all you can</font>

188
00:09:08,930 --> 00:09:14,630
do is count your resources<font color="#E5E5E5"> like how long</font>

189
00:09:11,600 --> 00:09:16,160
did this computation take make<font color="#E5E5E5"> sure that</font>

190
00:09:14,630 --> 00:09:18,350
it's that<font color="#E5E5E5"> using more than a set amount</font>

191
00:09:16,160 --> 00:09:18,959
<font color="#E5E5E5">of memory and</font><font color="#CCCCCC"> just make sure that</font><font color="#E5E5E5"> it</font>

192
00:09:18,350 --> 00:09:20,850
never

193
00:09:18,960 --> 00:09:22,380
seeds those resource bounds<font color="#E5E5E5"> because</font>

194
00:09:20,850 --> 00:09:24,120
<font color="#E5E5E5">that's all you can do if you're treating</font>

195
00:09:22,380 --> 00:09:26,040
<font color="#E5E5E5">it as a black</font><font color="#CCCCCC"> box is make sure that you</font>

196
00:09:24,120 --> 00:09:33,030
kill it off if it<font color="#E5E5E5"> runs too long or tries</font>

197
00:09:26,040 --> 00:09:34,130
<font color="#CCCCCC">to use too much resource for</font><font color="#E5E5E5"> parts or</font>

198
00:09:33,030 --> 00:09:37,140
Combinator libraries

199
00:09:34,130 --> 00:09:39,630
<font color="#CCCCCC">I'd recommend</font><font color="#E5E5E5"> either hammer if you're</font>

200
00:09:37,140 --> 00:09:43,020
doing<font color="#CCCCCC"> C and there's a new</font><font color="#E5E5E5"> one they</font><font color="#CCCCCC"> just</font>

201
00:09:39,630 --> 00:09:46,290
wrote in rust called<font color="#CCCCCC"> nom which is even</font>

202
00:09:43,020 --> 00:09:51,030
<font color="#CCCCCC">faster hammer is nice because like</font><font color="#E5E5E5"> with</font>

203
00:09:46,290 --> 00:09:53,790
the iOS<font color="#CCCCCC"> text bug you have a essentially</font>

204
00:09:51,030 --> 00:09:56,160
a binary protocol<font color="#CCCCCC"> cuz you can you it</font>

205
00:09:53,790 --> 00:10:00,390
like like with emojis<font color="#E5E5E5"> they use like</font>

206
00:09:56,160 --> 00:10:02,400
different<font color="#E5E5E5"> byte lengths</font><font color="#CCCCCC"> so so hammer is</font>

207
00:10:00,390 --> 00:10:05,000
really nice<font color="#E5E5E5"> because it does like</font><font color="#CCCCCC"> one bit</font>

208
00:10:02,400 --> 00:10:09,750
at a time<font color="#CCCCCC"> if you want to and so does</font><font color="#E5E5E5"> nom</font>

209
00:10:05,000 --> 00:10:11,460
<font color="#CCCCCC">and if you want to look</font><font color="#E5E5E5"> at it really</font>

210
00:10:09,750 --> 00:10:14,730
<font color="#E5E5E5">good examples of some parsers in the</font>

211
00:10:11,460 --> 00:10:16,920
wild<font color="#E5E5E5"> go to the node.js project and look</font>

212
00:10:14,730 --> 00:10:20,280
at<font color="#E5E5E5"> their HTTP parser it's actually a</font>

213
00:10:16,920 --> 00:10:21,990
<font color="#E5E5E5">really nicely constructed parser that</font><font color="#CCCCCC"> it</font>

214
00:10:20,280 --> 00:10:23,670
has it's a it's a big finite state

215
00:10:21,990 --> 00:10:25,770
machine with case statements and

216
00:10:23,670 --> 00:10:27,990
switches and you can kind of<font color="#E5E5E5"> just follow</font>

217
00:10:25,770 --> 00:10:30,120
<font color="#CCCCCC">okay this is this is how I parse that</font>

218
00:10:27,990 --> 00:10:33,900
that<font color="#E5E5E5"> URI up at the up at the top of</font><font color="#CCCCCC"> the</font>

219
00:10:30,120 --> 00:10:35,790
window<font color="#CCCCCC"> also if you look into the clang</font>

220
00:10:33,900 --> 00:10:37,439
source code you see more<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> parser</font>

221
00:10:35,790 --> 00:10:40,170
<font color="#E5E5E5">Combinator style where they're taking</font>

222
00:10:37,440 --> 00:10:42,570
functions and composing them<font color="#CCCCCC"> they don't</font>

223
00:10:40,170 --> 00:10:44,280
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> use like a library like like a</font>

224
00:10:42,570 --> 00:10:45,570
hammer<font color="#E5E5E5"> or nom under the hood they're</font>

225
00:10:44,280 --> 00:10:47,760
just have like their own<font color="#E5E5E5"> but it's still</font>

226
00:10:45,570 --> 00:10:50,280
nice<font color="#E5E5E5"> and if you want to see something a</font>

227
00:10:47,760 --> 00:10:52,290
little<font color="#CCCCCC"> bit more</font><font color="#E5E5E5"> messy real world look at</font>

228
00:10:50,280 --> 00:10:55,400
<font color="#CCCCCC">the the post-grad store SQLite parsers</font>

229
00:10:52,290 --> 00:10:55,400
<font color="#E5E5E5">they're also on github</font>

230
00:10:57,810 --> 00:11:03,300
another thing that does come up<font color="#E5E5E5"> a lot is</font>

231
00:11:00,840 --> 00:11:06,620
resource usage and when you're using

232
00:11:03,300 --> 00:11:08,609
resources<font color="#E5E5E5"> time is very important</font>

233
00:11:06,620 --> 00:11:11,940
especially<font color="#E5E5E5"> if you have a</font><font color="#CCCCCC"> network</font>

234
00:11:08,610 --> 00:11:13,770
involved<font color="#E5E5E5"> so do like Grace Hopper did</font>

235
00:11:11,940 --> 00:11:15,810
<font color="#E5E5E5">when she's like like the general is like</font>

236
00:11:13,770 --> 00:11:17,250
you know how do<font color="#CCCCCC"> I how long</font><font color="#E5E5E5"> was this</font>

237
00:11:15,810 --> 00:11:19,829
communication gonna take to go to the

238
00:11:17,250 --> 00:11:21,390
satellite and so great Grace Hopper cut

239
00:11:19,830 --> 00:11:23,820
off a<font color="#CCCCCC"> couple sections of about a</font>

240
00:11:21,390 --> 00:11:25,920
nanometer<font color="#E5E5E5"> sorry a nanosecond worth of</font>

241
00:11:23,820 --> 00:11:28,760
wire and she's like well general<font color="#E5E5E5"> it's</font>

242
00:11:25,920 --> 00:11:31,290
gonna take this many nanoseconds and

243
00:11:28,760 --> 00:11:32,889
<font color="#CCCCCC">that that works the same on you know how</font>

244
00:11:31,290 --> 00:11:36,009
<font color="#E5E5E5">many nanoseconds between</font>

245
00:11:32,889 --> 00:11:37,839
this and<font color="#E5E5E5"> that server on the rack how</font>

246
00:11:36,009 --> 00:11:40,329
many nanoseconds you know<font color="#CCCCCC"> between</font><font color="#E5E5E5"> you</font>

247
00:11:37,839 --> 00:11:42,639
<font color="#CCCCCC">and this data</font><font color="#E5E5E5"> center</font><font color="#CCCCCC"> count</font><font color="#E5E5E5"> your</font>

248
00:11:40,329 --> 00:11:44,199
nanoseconds<font color="#CCCCCC"> because usually</font><font color="#E5E5E5"> that's the</font>

249
00:11:42,639 --> 00:11:45,699
<font color="#E5E5E5">first thing that fails is people don't</font>

250
00:11:44,199 --> 00:11:47,829
<font color="#E5E5E5">count nanoseconds and the way that</font>

251
00:11:45,699 --> 00:11:50,258
they're trying<font color="#E5E5E5"> to write this system and</font>

252
00:11:47,829 --> 00:11:52,569
<font color="#CCCCCC">that you can't violate the speed of</font>

253
00:11:50,259 --> 00:11:58,259
light<font color="#E5E5E5"> so if your nanoseconds</font><font color="#CCCCCC"> aren't</font>

254
00:11:52,569 --> 00:12:00,969
going to fit you're already screwed<font color="#E5E5E5"> so</font>

255
00:11:58,259 --> 00:12:03,279
so some other orders<font color="#CCCCCC"> of a vulnerable</font>

256
00:12:00,970 --> 00:12:05,919
parser<font color="#E5E5E5"> first look at the tests over the</font>

257
00:12:03,279 --> 00:12:08,529
thing<font color="#E5E5E5"> did they actually write any unit</font>

258
00:12:05,919 --> 00:12:11,199
tests or<font color="#E5E5E5"> integration tests so for it</font>

259
00:12:08,529 --> 00:12:16,269
do they have control flow that looks

260
00:12:11,199 --> 00:12:19,719
very ad hoc<font color="#E5E5E5"> if they're not</font><font color="#CCCCCC"> using a like</font>

261
00:12:16,269 --> 00:12:21,489
like a<font color="#CCCCCC"> partial generator library</font><font color="#E5E5E5"> I mean</font>

262
00:12:19,720 --> 00:12:22,989
is<font color="#E5E5E5"> there go twos everywhere is it more</font>

263
00:12:21,489 --> 00:12:24,069
<font color="#E5E5E5">of</font><font color="#CCCCCC"> like a finite state</font><font color="#E5E5E5"> machine</font><font color="#CCCCCC"> that</font>

264
00:12:22,989 --> 00:12:26,589
they're chaining<font color="#E5E5E5"> them</font><font color="#CCCCCC"> together I</font><font color="#E5E5E5"> mean</font>

265
00:12:24,069 --> 00:12:30,488
look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> that if they're</font><font color="#E5E5E5"> doing like this</font>

266
00:12:26,589 --> 00:12:31,869
<font color="#E5E5E5">ad hoc stuff</font><font color="#CCCCCC"> look for any regular</font>

267
00:12:30,489 --> 00:12:33,910
expressions they have in there that<font color="#CCCCCC"> have</font>

268
00:12:31,869 --> 00:12:36,609
no bounds on them cuz they're gonna blow

269
00:12:33,910 --> 00:12:40,269
up<font color="#E5E5E5"> if they're doing</font><font color="#CCCCCC"> what's called</font>

270
00:12:36,609 --> 00:12:42,549
shotgun parsing where you parse just a

271
00:12:40,269 --> 00:12:44,619
little piece<font color="#CCCCCC"> of something</font><font color="#E5E5E5"> and then you</font>

272
00:12:42,549 --> 00:12:46,779
use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> without verifying that the whole</font>

273
00:12:44,619 --> 00:12:48,720
thing parses that that's where<font color="#CCCCCC"> you're</font>

274
00:12:46,779 --> 00:12:51,819
<font color="#CCCCCC">running to the the problem that that</font>

275
00:12:48,720 --> 00:12:54,399
<font color="#CCCCCC">thing actually later on gets negated</font>

276
00:12:51,819 --> 00:13:00,549
because<font color="#E5E5E5"> it's it's an error</font><font color="#CCCCCC"> State and so</font>

277
00:12:54,399 --> 00:13:02,769
don't ever use partial parses<font color="#CCCCCC"> also if</font>

278
00:13:00,549 --> 00:13:05,019
<font color="#E5E5E5">it's C code I mean you can just grab to</font>

279
00:13:02,769 --> 00:13:07,739
see if it has like a<font color="#E5E5E5"> sterling in it or a</font>

280
00:13:05,019 --> 00:13:10,480
<font color="#CCCCCC">2i</font><font color="#E5E5E5"> because both of those are</font><font color="#CCCCCC"> very unsafe</font>

281
00:13:07,739 --> 00:13:13,259
<font color="#CCCCCC">if you're</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> Malick's make sure that</font>

282
00:13:10,480 --> 00:13:15,970
whatever is allocating that thing<font color="#E5E5E5"> is</font>

283
00:13:13,259 --> 00:13:19,569
bounded somehow in the code to make<font color="#CCCCCC"> sure</font>

284
00:13:15,970 --> 00:13:21,489
that it doesn't<font color="#CCCCCC"> blow up and</font><font color="#E5E5E5"> also look at</font>

285
00:13:19,569 --> 00:13:22,929
<font color="#CCCCCC">the</font><font color="#E5E5E5"> the specification for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> grammar</font>

286
00:13:21,489 --> 00:13:26,350
<font color="#E5E5E5">that it is that they're trying</font><font color="#CCCCCC"> to parse</font>

287
00:13:22,929 --> 00:13:28,449
<font color="#E5E5E5">and if they never wrote</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> down that's a</font>

288
00:13:26,350 --> 00:13:30,339
big red flag<font color="#CCCCCC"> because you kind of have to</font>

289
00:13:28,449 --> 00:13:31,988
have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> formal specification</font><font color="#CCCCCC"> of what it</font>

290
00:13:30,339 --> 00:13:37,149
is you're parsing<font color="#CCCCCC"> if you're gonna write</font>

291
00:13:31,989 --> 00:13:40,059
correct code yes so some of<font color="#E5E5E5"> the top</font>

292
00:13:37,149 --> 00:13:42,369
parser bugs<font color="#E5E5E5"> are using partial parsers</font><font color="#CCCCCC"> so</font>

293
00:13:40,059 --> 00:13:44,259
<font color="#E5E5E5">like I get about halfway done I'm like</font>

294
00:13:42,369 --> 00:13:45,970
<font color="#CCCCCC">adds close enough but</font><font color="#E5E5E5"> I don't wait until</font>

295
00:13:44,259 --> 00:13:46,240
<font color="#E5E5E5">the full thing parses that that's always</font>

296
00:13:45,970 --> 00:13:49,540
a

297
00:13:46,240 --> 00:13:51,220
problem<font color="#CCCCCC"> I don't define the resource</font>

298
00:13:49,540 --> 00:13:53,589
balance that my<font color="#E5E5E5"> parts are supposed to</font>

299
00:13:51,220 --> 00:13:56,529
use like like my<font color="#CCCCCC"> parser should only use</font>

300
00:13:53,589 --> 00:13:58,570
<font color="#E5E5E5">so much memory and so much so many CPU</font>

301
00:13:56,529 --> 00:14:00,459
cycles or else it's going<font color="#E5E5E5"> to say error I</font>

302
00:13:58,570 --> 00:14:03,970
can't do this<font color="#E5E5E5"> make sure</font><font color="#CCCCCC"> that it does</font>

303
00:14:00,459 --> 00:14:07,930
<font color="#CCCCCC">that yeah if</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> doing this wonky</font>

304
00:14:03,970 --> 00:14:10,600
control flow the unrar bug for the the

305
00:14:07,930 --> 00:14:12,130
<font color="#E5E5E5">Microsoft</font><font color="#CCCCCC"> Defender problem was a type</font>

306
00:14:10,600 --> 00:14:15,250
<font color="#E5E5E5">mismatch between signed and unsigned</font>

307
00:14:12,130 --> 00:14:16,839
integers so<font color="#CCCCCC"> anytime</font><font color="#E5E5E5"> you're taking out a</font>

308
00:14:15,250 --> 00:14:19,830
parse result and throwing it into<font color="#E5E5E5"> a</font>

309
00:14:16,839 --> 00:14:22,120
variable<font color="#E5E5E5"> make sure</font><font color="#CCCCCC"> you're type checking</font>

310
00:14:19,830 --> 00:14:27,370
<font color="#CCCCCC">whatever that is that you're throwing it</font>

311
00:14:22,120 --> 00:14:29,380
<font color="#CCCCCC">into to make sure that it fits</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> also</font>

312
00:14:27,370 --> 00:14:31,060
just<font color="#CCCCCC"> this bad language and protocol</font>

313
00:14:29,380 --> 00:14:32,470
design from the start especially with

314
00:14:31,060 --> 00:14:35,349
<font color="#CCCCCC">Network protocols where we</font><font color="#E5E5E5"> don't really</font>

315
00:14:32,470 --> 00:14:37,000
think through the<font color="#CCCCCC"> whole</font><font color="#E5E5E5"> thing as we</font>

316
00:14:35,350 --> 00:14:40,270
write it and there's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> a actual</font>

317
00:14:37,000 --> 00:14:48,490
defect in the<font color="#CCCCCC"> design</font><font color="#E5E5E5"> not necessarily our</font>

318
00:14:40,270 --> 00:14:50,529
code<font color="#CCCCCC"> so in terms of like</font><font color="#E5E5E5"> quality</font>

319
00:14:48,490 --> 00:14:52,930
<font color="#E5E5E5">assurance when we're parsing</font><font color="#CCCCCC"> that</font>

320
00:14:50,529 --> 00:14:55,029
there's there's usually two<font color="#CCCCCC"> stages one</font>

321
00:14:52,930 --> 00:14:57,189
is our compile time<font color="#E5E5E5"> test stuff that we</font>

322
00:14:55,029 --> 00:14:59,829
can teach our programming language<font color="#CCCCCC"> to do</font>

323
00:14:57,190 --> 00:15:01,990
<font color="#CCCCCC">and our libraries we can use to make</font>

324
00:14:59,829 --> 00:15:04,180
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> that we're doing it right upfront</font>

325
00:15:01,990 --> 00:15:06,220
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> their runtime</font><font color="#E5E5E5"> test</font><font color="#CCCCCC"> once</font><font color="#E5E5E5"> you're</font>

326
00:15:04,180 --> 00:15:07,390
a lot slower that we<font color="#E5E5E5"> just have to run</font>

327
00:15:06,220 --> 00:15:11,620
this thing<font color="#E5E5E5"> and</font><font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> that it's doing</font>

328
00:15:07,390 --> 00:15:14,050
<font color="#E5E5E5">what we think it's doing so in our</font>

329
00:15:11,620 --> 00:15:16,600
language we<font color="#CCCCCC"> can start out and try to</font>

330
00:15:14,050 --> 00:15:19,930
<font color="#E5E5E5">reduce the</font><font color="#CCCCCC"> amount of state</font><font color="#E5E5E5"> that our</font>

331
00:15:16,600 --> 00:15:22,660
<font color="#E5E5E5">parsing task uses so in JavaScript</font>

332
00:15:19,930 --> 00:15:25,000
there's constants<font color="#E5E5E5"> in rust and C++</font>

333
00:15:22,660 --> 00:15:26,350
there's ways to<font color="#E5E5E5"> declare constant</font>

334
00:15:25,000 --> 00:15:27,579
variables that aren't<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> change on</font>

335
00:15:26,350 --> 00:15:30,190
us

336
00:15:27,579 --> 00:15:31,719
and rust<font color="#E5E5E5"> also has something</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> a</font>

337
00:15:30,190 --> 00:15:32,680
<font color="#CCCCCC">borrow checker for when you're you're</font>

338
00:15:31,720 --> 00:15:37,450
allocating<font color="#E5E5E5"> memory</font>

339
00:15:32,680 --> 00:15:39,040
<font color="#CCCCCC">that'll it'll it'll check the semantics</font>

340
00:15:37,450 --> 00:15:41,320
<font color="#E5E5E5">of that so as long as you're using it</font>

341
00:15:39,040 --> 00:15:43,689
within the<font color="#E5E5E5"> the context of what Russ says</font>

342
00:15:41,320 --> 00:15:45,490
is safe<font color="#CCCCCC"> you know that you aren't using</font>

343
00:15:43,690 --> 00:15:49,420
memory<font color="#E5E5E5"> that's already been freed or</font>

344
00:15:45,490 --> 00:15:51,339
something another thing you can do is

345
00:15:49,420 --> 00:15:54,729
use code coverage for<font color="#CCCCCC"> your unit tests</font>

346
00:15:51,339 --> 00:15:58,570
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a big win</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can do this in</font>

347
00:15:54,730 --> 00:15:59,890
in clang<font color="#E5E5E5"> there's the rust options to do</font>

348
00:15:58,570 --> 00:16:02,650
this

349
00:15:59,890 --> 00:16:04,480
<font color="#CCCCCC">LLVM actually has a coverage report</font><font color="#E5E5E5"> that</font>

350
00:16:02,650 --> 00:16:06,790
you can<font color="#CCCCCC"> actually see how</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> LLVM</font>

351
00:16:04,480 --> 00:16:08,890
covers on itself

352
00:16:06,790 --> 00:16:11,170
there's<font color="#E5E5E5"> Istanbul if you're into the</font>

353
00:16:08,890 --> 00:16:13,449
JavaScript<font color="#E5E5E5"> land so what this does is it</font>

354
00:16:11,170 --> 00:16:15,490
kind of turns your code itself into

355
00:16:13,450 --> 00:16:18,250
almost a finite state<font color="#E5E5E5"> machine where you</font>

356
00:16:15,490 --> 00:16:21,640
<font color="#E5E5E5">can see okay my tests never hit this</font>

357
00:16:18,250 --> 00:16:23,290
branch<font color="#CCCCCC"> why is that</font><font color="#E5E5E5"> and try to see if if</font>

358
00:16:21,640 --> 00:16:25,590
I<font color="#CCCCCC"> could</font><font color="#E5E5E5"> hit all</font><font color="#CCCCCC"> of the different states</font>

359
00:16:23,290 --> 00:16:28,599
<font color="#E5E5E5">so</font><font color="#CCCCCC"> at least I I know</font><font color="#E5E5E5"> that I've tested</font>

360
00:16:25,590 --> 00:16:30,820
<font color="#E5E5E5">most of the states of my code</font><font color="#CCCCCC"> and of</font>

361
00:16:28,600 --> 00:16:32,440
course this isn't<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> work if you have</font>

362
00:16:30,820 --> 00:16:34,390
code that's really recursive that's kind

363
00:16:32,440 --> 00:16:37,740
of calling itself<font color="#E5E5E5"> but as long as your</font>

364
00:16:34,390 --> 00:16:40,660
code has nice nice branch<font color="#E5E5E5"> tree flows</font>

365
00:16:37,740 --> 00:16:45,610
<font color="#E5E5E5">it's gonna give you a really good test</font>

366
00:16:40,660 --> 00:16:50,920
coverage<font color="#CCCCCC"> another trick we can</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> our</font>

367
00:16:45,610 --> 00:16:53,230
<font color="#CCCCCC">sat SMT solvers</font><font color="#E5E5E5"> so sad' stands for a</font>

368
00:16:50,920 --> 00:16:55,030
satisfiability modulo<font color="#E5E5E5"> theories so you</font>

369
00:16:53,230 --> 00:16:57,700
have a Sat solver<font color="#CCCCCC"> that solves just a</font>

370
00:16:55,030 --> 00:17:00,130
boolean<font color="#E5E5E5"> circuit like give me a</font>

371
00:16:57,700 --> 00:17:02,650
satisfying assignment<font color="#CCCCCC"> of true and</font><font color="#E5E5E5"> false</font>

372
00:17:00,130 --> 00:17:05,890
that that makes this circuit<font color="#E5E5E5"> evaluate to</font>

373
00:17:02,650 --> 00:17:09,339
true and modulo theories means I add in

374
00:17:05,890 --> 00:17:11,890
an extra library that knows more than

375
00:17:09,339 --> 00:17:14,679
<font color="#E5E5E5">just sat like it might be able to reason</font>

376
00:17:11,890 --> 00:17:16,990
<font color="#CCCCCC">about</font><font color="#E5E5E5"> integers or it might be able</font><font color="#CCCCCC"> to</font>

377
00:17:14,680 --> 00:17:21,370
<font color="#E5E5E5">reason about bit vectors which is that</font>

378
00:17:16,990 --> 00:17:23,530
<font color="#E5E5E5">very</font><font color="#CCCCCC"> useful so the idea kind</font><font color="#E5E5E5"> of behind</font>

379
00:17:21,369 --> 00:17:26,198
<font color="#E5E5E5">this is is Howard Currie correspondence</font>

380
00:17:23,530 --> 00:17:29,139
that programs are actually<font color="#CCCCCC"> the same</font>

381
00:17:26,199 --> 00:17:30,640
<font color="#CCCCCC">thing as</font><font color="#E5E5E5"> mathematical proofs they're</font>

382
00:17:29,140 --> 00:17:33,400
just use a different<font color="#CCCCCC"> language</font><font color="#E5E5E5"> to</font>

383
00:17:30,640 --> 00:17:35,980
<font color="#E5E5E5">describe them so we can</font><font color="#CCCCCC"> use all the</font>

384
00:17:33,400 --> 00:17:39,670
<font color="#E5E5E5">machinery from math to reason about</font>

385
00:17:35,980 --> 00:17:41,440
programs<font color="#E5E5E5"> and all the</font><font color="#CCCCCC"> other way we</font><font color="#E5E5E5"> can</font>

386
00:17:39,670 --> 00:17:43,900
use all the the things we know about

387
00:17:41,440 --> 00:17:47,050
programs to reason<font color="#E5E5E5"> about math and so the</font>

388
00:17:43,900 --> 00:17:49,300
idea is to<font color="#CCCCCC"> take your</font><font color="#E5E5E5"> code and compile</font><font color="#CCCCCC"> it</font>

389
00:17:47,050 --> 00:17:52,360
into<font color="#E5E5E5"> a math proof and see if I can prove</font>

390
00:17:49,300 --> 00:17:53,740
it and either<font color="#CCCCCC"> I can prove</font><font color="#E5E5E5"> it or I get a</font>

391
00:17:52,360 --> 00:17:56,679
counter<font color="#CCCCCC"> example which is a bug in my</font>

392
00:17:53,740 --> 00:17:58,110
<font color="#CCCCCC">code and so the simplest example is</font><font color="#E5E5E5"> you</font>

393
00:17:56,680 --> 00:18:01,990
take<font color="#E5E5E5"> an if statement</font>

394
00:17:58,110 --> 00:18:04,120
you know if X<font color="#E5E5E5"> is</font><font color="#CCCCCC"> less than</font><font color="#E5E5E5"> 5 I need to</font>

395
00:18:01,990 --> 00:18:07,330
<font color="#E5E5E5">solve an equation that X is less</font><font color="#CCCCCC"> than 5</font>

396
00:18:04,120 --> 00:18:10,739
<font color="#CCCCCC">so a lot on your branching logic usually</font>

397
00:18:07,330 --> 00:18:10,740
goes into this SMT solver

398
00:18:11,810 --> 00:18:17,780
and what you'll do is you'll have<font color="#E5E5E5"> the</font>

399
00:18:15,080 --> 00:18:19,460
concrete<font color="#E5E5E5"> and the symbolic</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then and</font>

400
00:18:17,780 --> 00:18:21,320
<font color="#E5E5E5">you use both of them and it's called can</font>

401
00:18:19,460 --> 00:18:24,740
colic testing so the idea is<font color="#CCCCCC"> that you</font>

402
00:18:21,320 --> 00:18:27,530
<font color="#E5E5E5">take you take your code you have an SMT</font>

403
00:18:24,740 --> 00:18:30,320
solver<font color="#CCCCCC"> create equations for all those</font>

404
00:18:27,530 --> 00:18:32,660
branching conditions<font color="#E5E5E5"> and then you you</font>

405
00:18:30,320 --> 00:18:34,879
start with some<font color="#E5E5E5"> concrete value you trace</font>

406
00:18:32,660 --> 00:18:36,590
through your code with code coverage see

407
00:18:34,880 --> 00:18:39,260
where it<font color="#E5E5E5"> ends up and then you'd be like</font>

408
00:18:36,590 --> 00:18:43,010
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> well I didn't get to this</font><font color="#E5E5E5"> thing how</font>

409
00:18:39,260 --> 00:18:44,930
do I<font color="#CCCCCC"> get to this thing here and</font><font color="#E5E5E5"> I mean I</font>

410
00:18:43,010 --> 00:18:46,850
mean<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> your branch conditions and you</font>

411
00:18:44,930 --> 00:18:48,770
just internally do this over and<font color="#CCCCCC"> over</font>

412
00:18:46,850 --> 00:18:50,600
<font color="#E5E5E5">again</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'll talk about</font><font color="#CCCCCC"> later one</font><font color="#E5E5E5"> of</font>

413
00:18:48,770 --> 00:18:54,920
the the most<font color="#E5E5E5"> advanced solvers</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> coming</font>

414
00:18:50,600 --> 00:18:57,560
out in a<font color="#CCCCCC"> conference next month another</font>

415
00:18:54,920 --> 00:18:59,330
<font color="#E5E5E5">trick</font><font color="#CCCCCC"> you can do is to always know what</font>

416
00:18:57,560 --> 00:19:01,760
your memory failure modes are on a piece

417
00:18:59,330 --> 00:19:04,340
<font color="#E5E5E5">of code so one thing that Neil Mitchell</font>

418
00:19:01,760 --> 00:19:07,160
says that to do for a lot of<font color="#E5E5E5"> his code is</font>

419
00:19:04,340 --> 00:19:09,260
he will<font color="#E5E5E5"> take his his virtual machine</font>

420
00:19:07,160 --> 00:19:11,360
<font color="#CCCCCC">that he's written</font><font color="#E5E5E5"> his coat on</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> he'll</font>

421
00:19:09,260 --> 00:19:13,520
keep on<font color="#E5E5E5"> reducing the stack size until</font>

422
00:19:11,360 --> 00:19:16,750
something breaks<font color="#CCCCCC"> and they don't go</font><font color="#E5E5E5"> look</font>

423
00:19:13,520 --> 00:19:19,070
at the stack trace and so<font color="#E5E5E5"> knowing where</font>

424
00:19:16,750 --> 00:19:20,690
where<font color="#E5E5E5"> your code breaks on all your</font>

425
00:19:19,070 --> 00:19:23,149
resource boundaries is really critical

426
00:19:20,690 --> 00:19:25,370
especially<font color="#CCCCCC"> if it's</font><font color="#E5E5E5"> not your code</font><font color="#CCCCCC"> and</font>

427
00:19:23,150 --> 00:19:27,710
<font color="#CCCCCC">then then you can in</font><font color="#E5E5E5"> your in your CI</font>

428
00:19:25,370 --> 00:19:29,479
<font color="#E5E5E5">system you can whitelist traces of these</font>

429
00:19:27,710 --> 00:19:31,520
stack traces that are acceptable like

430
00:19:29,480 --> 00:19:32,600
yeah I needed enough memory for<font color="#CCCCCC"> that</font>

431
00:19:31,520 --> 00:19:37,070
that's a good that's that's that's

432
00:19:32,600 --> 00:19:41,510
correct<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> helps you reduce the</font>

433
00:19:37,070 --> 00:19:43,850
space of<font color="#E5E5E5"> your programs another thing</font>

434
00:19:41,510 --> 00:19:45,379
<font color="#E5E5E5">that you need</font><font color="#CCCCCC"> to do is know where IO is</font>

435
00:19:43,850 --> 00:19:48,110
where are you getting<font color="#E5E5E5"> that information</font>

436
00:19:45,380 --> 00:19:50,810
from the outside<font color="#CCCCCC"> that's not static that</font>

437
00:19:48,110 --> 00:19:54,050
<font color="#CCCCCC">you're bringing with you in the code and</font>

438
00:19:50,810 --> 00:19:56,899
so what you want<font color="#E5E5E5"> to do in general is</font>

439
00:19:54,050 --> 00:19:59,210
build<font color="#CCCCCC"> Islands a very pure code that it's</font>

440
00:19:56,900 --> 00:20:00,860
<font color="#E5E5E5">just you know logic you know I put in a</font>

441
00:19:59,210 --> 00:20:04,190
<font color="#E5E5E5">number I get back the same result every</font>

442
00:20:00,860 --> 00:20:06,649
<font color="#CCCCCC">time</font><font color="#E5E5E5"> and and try to grow those in the</font>

443
00:20:04,190 --> 00:20:08,930
big islands and and then know where the

444
00:20:06,650 --> 00:20:11,330
boundaries<font color="#CCCCCC"> are where they had taken</font><font color="#E5E5E5"> IO</font>

445
00:20:08,930 --> 00:20:14,500
from the outside which for most<font color="#CCCCCC"> of</font><font color="#E5E5E5"> us is</font>

446
00:20:11,330 --> 00:20:14,500
an operating<font color="#E5E5E5"> system call</font>

447
00:20:16,560 --> 00:20:23,820
and one<font color="#E5E5E5"> of the things you can do is</font>

448
00:20:19,180 --> 00:20:26,590
<font color="#E5E5E5">called</font><font color="#CCCCCC"> Tate</font><font color="#E5E5E5"> or flow analysis where</font><font color="#CCCCCC"> you</font>

449
00:20:23,820 --> 00:20:27,610
use either like the<font color="#E5E5E5"> LLVM</font><font color="#CCCCCC"> data flow</font>

450
00:20:26,590 --> 00:20:29,949
sanitizer

451
00:20:27,610 --> 00:20:33,250
there's the checker framework for<font color="#CCCCCC"> Java</font>

452
00:20:29,950 --> 00:20:36,010
<font color="#E5E5E5">if you have Android code and the idea is</font>

453
00:20:33,250 --> 00:20:39,220
that<font color="#CCCCCC"> I have this</font><font color="#E5E5E5"> variable X I want to</font>

454
00:20:36,010 --> 00:20:41,560
know<font color="#CCCCCC"> everything that ever assigns</font><font color="#E5E5E5"> into</font>

455
00:20:39,220 --> 00:20:43,780
this<font color="#E5E5E5"> variable X from my i/o from the</font>

456
00:20:41,560 --> 00:20:46,060
outside world<font color="#CCCCCC"> like</font><font color="#E5E5E5"> did this come in from</font>

457
00:20:43,780 --> 00:20:48,670
like<font color="#E5E5E5"> the network did this come in from a</font>

458
00:20:46,060 --> 00:20:50,649
file that I read and so what you do is

459
00:20:48,670 --> 00:20:52,060
you do what's called<font color="#E5E5E5"> Tate analysis that</font>

460
00:20:50,650 --> 00:20:54,490
you figure out<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know I have an i/o</font>

461
00:20:52,060 --> 00:20:56,950
that comes in<font color="#E5E5E5"> it reads to some string</font>

462
00:20:54,490 --> 00:21:00,360
buffer<font color="#E5E5E5"> where does that string buffer get</font>

463
00:20:56,950 --> 00:21:03,370
<font color="#E5E5E5">populated everywhere else in my code and</font>

464
00:21:00,360 --> 00:21:06,330
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is very important for like security</font>

465
00:21:03,370 --> 00:21:08,709
<font color="#E5E5E5">like you don't want to be writing</font>

466
00:21:06,330 --> 00:21:15,040
<font color="#E5E5E5">private information to your log files</font>

467
00:21:08,710 --> 00:21:19,090
for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> and some of this</font><font color="#CCCCCC"> you can do</font>

468
00:21:15,040 --> 00:21:21,760
a compile time with with types<font color="#E5E5E5"> by making</font>

469
00:21:19,090 --> 00:21:24,840
special<font color="#E5E5E5"> types for things that are like</font>

470
00:21:21,760 --> 00:21:33,010
secret or you don't<font color="#E5E5E5"> want passed around</font>

471
00:21:24,840 --> 00:21:35,350
<font color="#CCCCCC">just a contorted C++ example and another</font>

472
00:21:33,010 --> 00:21:38,400
idea<font color="#CCCCCC"> that that's</font><font color="#E5E5E5"> been</font><font color="#CCCCCC"> popping</font><font color="#E5E5E5"> around a</font>

473
00:21:35,350 --> 00:21:42,280
lot lately is<font color="#E5E5E5"> observability when you</font>

474
00:21:38,400 --> 00:21:44,320
make a change to<font color="#CCCCCC"> your code even</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> it's</font>

475
00:21:42,280 --> 00:21:45,639
an infrastructure piece<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to make</font>

476
00:21:44,320 --> 00:21:50,169
<font color="#CCCCCC">sure that there's some way that</font><font color="#E5E5E5"> you can</font>

477
00:21:45,640 --> 00:21:51,640
observe the change to it<font color="#E5E5E5"> and so usually</font>

478
00:21:50,170 --> 00:21:53,560
<font color="#CCCCCC">you want</font><font color="#E5E5E5"> to have</font><font color="#CCCCCC"> two source code</font>

479
00:21:51,640 --> 00:21:56,440
repositories one for your actual<font color="#E5E5E5"> code</font>

480
00:21:53,560 --> 00:21:58,690
and then after your code is checked in

481
00:21:56,440 --> 00:22:01,860
it then runs<font color="#CCCCCC"> through your CI system</font><font color="#E5E5E5"> and</font>

482
00:21:58,690 --> 00:22:05,940
then your CI<font color="#CCCCCC"> system for each check in</font>

483
00:22:01,860 --> 00:22:08,199
<font color="#E5E5E5">writes out all the tests test results</font>

484
00:22:05,940 --> 00:22:09,490
both like your unit tests and<font color="#E5E5E5"> also your</font>

485
00:22:08,200 --> 00:22:11,140
benchmarks which are essentially a

486
00:22:09,490 --> 00:22:13,840
resource<font color="#E5E5E5"> tests like how much how much</font>

487
00:22:11,140 --> 00:22:16,570
resources did this piece of code use and

488
00:22:13,840 --> 00:22:20,800
you really need that that a that second

489
00:22:16,570 --> 00:22:23,919
repository so you can kind of go<font color="#E5E5E5"> back</font>

490
00:22:20,800 --> 00:22:26,020
<font color="#E5E5E5">and and do analysis you know where did I</font>

491
00:22:23,920 --> 00:22:27,760
<font color="#CCCCCC">introduce that</font><font color="#E5E5E5"> bug because because if</font>

492
00:22:26,020 --> 00:22:29,500
you<font color="#E5E5E5"> don't have that that repository</font><font color="#CCCCCC"> of</font>

493
00:22:27,760 --> 00:22:30,070
all<font color="#E5E5E5"> your test results it's really hard</font>

494
00:22:29,500 --> 00:22:33,990
to

495
00:22:30,070 --> 00:22:33,990
<font color="#E5E5E5">to kind of bisect and get back to that</font>

496
00:22:34,860 --> 00:22:39,100
another thing you can do is take your

497
00:22:37,480 --> 00:22:43,060
grammar<font color="#E5E5E5"> or whatever it is</font><font color="#CCCCCC"> your language</font>

498
00:22:39,100 --> 00:22:45,280
<font color="#CCCCCC">and dejected</font><font color="#E5E5E5"> simplify it break it so</font>

499
00:22:43,060 --> 00:22:50,560
that it can<font color="#E5E5E5"> only be used in</font><font color="#CCCCCC"> certain ways</font>

500
00:22:45,280 --> 00:22:52,899
<font color="#E5E5E5">so</font><font color="#CCCCCC"> for like sequel I can just completely</font>

501
00:22:50,560 --> 00:22:56,440
eliminate all<font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> of sequel injections</font>

502
00:22:52,900 --> 00:22:58,120
<font color="#CCCCCC">if I take the sequel parser and I make</font>

503
00:22:56,440 --> 00:22:59,500
it so that<font color="#E5E5E5"> anything that has</font><font color="#CCCCCC"> like a drop</font>

504
00:22:58,120 --> 00:23:02,080
<font color="#CCCCCC">or update statement in it it is</font>

505
00:22:59,500 --> 00:23:05,740
automatically rejects and I put<font color="#E5E5E5"> this at</font>

506
00:23:02,080 --> 00:23:07,720
my<font color="#E5E5E5"> database so even if I throw</font><font color="#CCCCCC"> in</font>

507
00:23:05,740 --> 00:23:14,230
something<font color="#CCCCCC"> that somehow gotten injected</font>

508
00:23:07,720 --> 00:23:16,540
it can't do<font color="#CCCCCC"> any harm</font><font color="#E5E5E5"> other than read</font><font color="#CCCCCC"> for</font>

509
00:23:14,230 --> 00:23:18,550
in your code<font color="#E5E5E5"> you could ban</font><font color="#CCCCCC"> floating</font>

510
00:23:16,540 --> 00:23:19,690
<font color="#CCCCCC">point statements for certain sections</font>

511
00:23:18,550 --> 00:23:24,100
that you know you<font color="#E5E5E5"> just don't me the</font>

512
00:23:19,690 --> 00:23:25,510
complexity<font color="#CCCCCC"> of floating</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> you can in</font>

513
00:23:24,100 --> 00:23:28,270
your<font color="#E5E5E5"> CI system make</font><font color="#CCCCCC"> sure that you're</font>

514
00:23:25,510 --> 00:23:29,230
<font color="#E5E5E5">never calling certain functions</font><font color="#CCCCCC"> or as</font>

515
00:23:28,270 --> 00:23:31,030
I'm<font color="#E5E5E5"> going to show you later you can</font>

516
00:23:29,230 --> 00:23:32,530
actually eliminate whole functions from

517
00:23:31,030 --> 00:23:36,310
<font color="#E5E5E5">your</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> so they can't</font><font color="#CCCCCC"> be called</font>

518
00:23:32,530 --> 00:23:41,110
because<font color="#E5E5E5"> they don't exist</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> even down</font>

519
00:23:36,310 --> 00:23:43,300
<font color="#CCCCCC">your your operating system</font><font color="#E5E5E5"> so in</font><font color="#CCCCCC"> LLVM</font>

520
00:23:41,110 --> 00:23:46,719
<font color="#E5E5E5">there's a couple cool parameters where I</font>

521
00:23:43,300 --> 00:23:48,399
can take<font color="#E5E5E5"> these parameters</font><font color="#CCCCCC"> and throw them</font>

522
00:23:46,720 --> 00:23:50,770
through<font color="#E5E5E5"> and everywhere that these</font>

523
00:23:48,400 --> 00:23:52,810
functions<font color="#CCCCCC"> are unused and the compiler</font>

524
00:23:50,770 --> 00:23:54,970
can tell those that are not used it just

525
00:23:52,810 --> 00:23:57,610
eliminates<font color="#CCCCCC"> them from your binary</font><font color="#E5E5E5"> when it</font>

526
00:23:54,970 --> 00:23:59,500
does the linking it makes<font color="#E5E5E5"> us a special</font>

527
00:23:57,610 --> 00:24:01,810
<font color="#CCCCCC">section for</font><font color="#E5E5E5"> your functions and it makes</font>

528
00:23:59,500 --> 00:24:03,940
a special<font color="#CCCCCC"> section for</font><font color="#E5E5E5"> your data and then</font>

529
00:24:01,810 --> 00:24:05,560
when it<font color="#E5E5E5"> goes</font><font color="#CCCCCC"> into link it</font><font color="#E5E5E5"> it could be</font>

530
00:24:03,940 --> 00:24:07,420
like well you're<font color="#CCCCCC"> using this thing</font><font color="#E5E5E5"> this</font>

531
00:24:05,560 --> 00:24:08,860
thing<font color="#E5E5E5"> in this thing but you aren't using</font>

532
00:24:07,420 --> 00:24:11,530
<font color="#CCCCCC">you</font><font color="#E5E5E5"> these other functions here so I'm</font>

533
00:24:08,860 --> 00:24:13,120
just<font color="#CCCCCC"> gonna throw them out so that way</font>

534
00:24:11,530 --> 00:24:15,550
you've<font color="#CCCCCC"> just taken</font><font color="#E5E5E5"> your whole attack</font>

535
00:24:13,120 --> 00:24:17,979
service<font color="#E5E5E5"> and limited it to just the code</font>

536
00:24:15,550 --> 00:24:19,629
that you're using<font color="#CCCCCC"> for this project which</font>

537
00:24:17,980 --> 00:24:21,850
<font color="#CCCCCC">is pretty powerful because</font><font color="#E5E5E5"> like you know</font>

538
00:24:19,630 --> 00:24:25,180
that some attacker tries to use library

539
00:24:21,850 --> 00:24:27,790
<font color="#E5E5E5">X function Z function Z doesn't exist</font>

540
00:24:25,180 --> 00:24:30,760
because<font color="#E5E5E5"> you're not using it and plus it</font>

541
00:24:27,790 --> 00:24:33,149
saves<font color="#E5E5E5"> space because in there in our</font>

542
00:24:30,760 --> 00:24:33,150
serverless

543
00:24:33,360 --> 00:24:39,850
yeah<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> back in 92 the</font><font color="#CCCCCC"> MPI</font>

544
00:24:37,750 --> 00:24:41,500
standard for like the big department<font color="#E5E5E5"> but</font>

545
00:24:39,850 --> 00:24:44,480
<font color="#CCCCCC">energy supercomputers doing tens of</font>

546
00:24:41,500 --> 00:24:47,809
thousands of<font color="#E5E5E5"> nodes 2014</font>

547
00:24:44,480 --> 00:24:51,380
database<font color="#E5E5E5"> lambda same idea you have a big</font>

548
00:24:47,809 --> 00:24:52,940
static binary that you'd like<font color="#CCCCCC"> a zip file</font>

549
00:24:51,380 --> 00:24:54,500
that<font color="#E5E5E5"> you pass through you to all the</font>

550
00:24:52,940 --> 00:24:56,780
different<font color="#E5E5E5"> nodes and they just execute it</font>

551
00:24:54,500 --> 00:24:59,720
and the<font color="#E5E5E5"> only contract is that your</font>

552
00:24:56,780 --> 00:25:03,440
<font color="#E5E5E5">operating system has</font><font color="#CCCCCC"> to be stable</font><font color="#E5E5E5"> but</font>

553
00:24:59,720 --> 00:25:05,630
<font color="#E5E5E5">you can deject</font><font color="#CCCCCC"> all the libraries that</font>

554
00:25:03,440 --> 00:25:07,520
<font color="#E5E5E5">you bring in with you to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that</font>

555
00:25:05,630 --> 00:25:10,370
you're only<font color="#E5E5E5"> using like a dejected</font>

556
00:25:07,520 --> 00:25:12,260
version of a sequel parser because you

557
00:25:10,370 --> 00:25:17,120
know that this<font color="#E5E5E5"> this function</font><font color="#CCCCCC"> only does</font>

558
00:25:12,260 --> 00:25:19,190
reads and if it writes<font color="#CCCCCC"> the database you</font>

559
00:25:17,120 --> 00:25:25,129
can<font color="#CCCCCC"> even deject your own system calls</font>

560
00:25:19,190 --> 00:25:26,660
<font color="#E5E5E5">you can link in custom</font><font color="#CCCCCC"> G Lib C so</font><font color="#E5E5E5"> you</font>

561
00:25:25,130 --> 00:25:29,059
<font color="#E5E5E5">can write essentially a wrapper around</font>

562
00:25:26,660 --> 00:25:31,190
all those<font color="#E5E5E5"> i/o operating system calls so</font>

563
00:25:29,059 --> 00:25:33,168
instead<font color="#CCCCCC"> of calling the normal calls that</font>

564
00:25:31,190 --> 00:25:34,880
are usually<font color="#E5E5E5"> linked in on your system it</font>

565
00:25:33,169 --> 00:25:39,590
calls a custom set that you pass through

566
00:25:34,880 --> 00:25:41,299
it so like you try<font color="#E5E5E5"> to call function X it</font>

567
00:25:39,590 --> 00:25:45,168
does extra checking to make sure that

568
00:25:41,299 --> 00:25:46,820
you know this exists<font color="#CCCCCC"> and the way I want</font>

569
00:25:45,169 --> 00:25:50,840
it<font color="#E5E5E5"> or like I just can't do it it's a no</font>

570
00:25:46,820 --> 00:25:55,760
op<font color="#E5E5E5"> so this is another way to kind of</font>

571
00:25:50,840 --> 00:25:58,790
trick your<font color="#CCCCCC"> binary into being much more</font>

572
00:25:55,760 --> 00:26:05,390
safe<font color="#CCCCCC"> than it</font><font color="#E5E5E5"> normally would</font><font color="#CCCCCC"> be using the</font>

573
00:25:58,790 --> 00:26:07,460
full G Lib C which is very unsafe yeah

574
00:26:05,390 --> 00:26:09,200
and in terms<font color="#CCCCCC"> of memory bugs</font><font color="#E5E5E5"> you</font>

575
00:26:07,460 --> 00:26:10,940
essentially have<font color="#CCCCCC"> to you have</font><font color="#E5E5E5"> those are</font>

576
00:26:09,200 --> 00:26:13,100
on<font color="#E5E5E5"> this your stack which are mostly</font>

577
00:26:10,940 --> 00:26:14,570
handled by the compiler<font color="#CCCCCC"> and those are on</font>

578
00:26:13,100 --> 00:26:19,040
the heap that<font color="#CCCCCC"> are mostly</font><font color="#E5E5E5"> handled by the</font>

579
00:26:14,570 --> 00:26:21,139
user and the problem is<font color="#E5E5E5"> C in C++</font><font color="#CCCCCC"> is that</font>

580
00:26:19,040 --> 00:26:24,080
we have a lot<font color="#CCCCCC"> of heat bugs</font><font color="#E5E5E5"> because we're</font>

581
00:26:21,140 --> 00:26:26,059
humans we make errors<font color="#CCCCCC"> and that's where a</font>

582
00:26:24,080 --> 00:26:27,590
language like rust comes in where you

583
00:26:26,059 --> 00:26:28,760
have a<font color="#E5E5E5"> borrow checker that you have to</font>

584
00:26:27,590 --> 00:26:30,260
kind<font color="#CCCCCC"> of like it's</font><font color="#E5E5E5"> like a library I have</font>

585
00:26:28,760 --> 00:26:32,740
<font color="#E5E5E5">to check stuff in</font><font color="#CCCCCC"> and check stuff out</font>

586
00:26:30,260 --> 00:26:35,620
and it keeps track of<font color="#CCCCCC"> where all those</font>

587
00:26:32,740 --> 00:26:39,830
those allocations<font color="#E5E5E5"> are on the heap even</font>

588
00:26:35,620 --> 00:26:44,120
<font color="#CCCCCC">across threads another thing you can do</font>

589
00:26:39,830 --> 00:26:46,220
is run<font color="#CCCCCC"> LLVM Zaisan so it's the</font><font color="#E5E5E5"> LOV</font><font color="#CCCCCC"> m</font>

590
00:26:44,120 --> 00:26:48,830
address sanitizer and<font color="#E5E5E5"> they did this on</font>

591
00:26:46,220 --> 00:26:51,110
<font color="#CCCCCC">Gen</font><font color="#E5E5E5"> 2 and I would strongly recommend if</font>

592
00:26:48,830 --> 00:26:53,210
you have a system where you're deploying

593
00:26:51,110 --> 00:26:55,760
like an entire distribution<font color="#E5E5E5"> like</font>

594
00:26:53,210 --> 00:26:57,980
embedded vehicles run a<font color="#CCCCCC"> syn</font><font color="#E5E5E5"> on</font>

595
00:26:55,760 --> 00:27:01,780
everything like Gen 2 did

596
00:26:57,980 --> 00:27:05,660
on a debug build and you will find<font color="#CCCCCC"> just</font>

597
00:27:01,780 --> 00:27:09,080
<font color="#CCCCCC">keep</font><font color="#E5E5E5"> allocation glitches galore and</font>

598
00:27:05,660 --> 00:27:14,960
everything that you're bringing in<font color="#CCCCCC"> it's</font>

599
00:27:09,080 --> 00:27:17,750
<font color="#E5E5E5">very powerful</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is the this is</font>

600
00:27:14,960 --> 00:27:21,020
<font color="#E5E5E5">the the parser that sorry the fuzzer</font>

601
00:27:17,750 --> 00:27:24,140
<font color="#E5E5E5">the that's coming out I think</font><font color="#CCCCCC"> in May</font>

602
00:27:21,020 --> 00:27:26,420
it's called<font color="#E5E5E5"> angora</font><font color="#CCCCCC"> it's kind</font><font color="#E5E5E5"> of a so</font>

603
00:27:24,140 --> 00:27:27,860
there's American fuzzy lop<font color="#CCCCCC"> and this is</font>

604
00:27:26,420 --> 00:27:29,120
supposed to be<font color="#E5E5E5"> like better than American</font>

605
00:27:27,860 --> 00:27:33,320
fuzzy lot because there's<font color="#E5E5E5"> like longer</font>

606
00:27:29,120 --> 00:27:36,918
<font color="#E5E5E5">hair and it gets a much better coverage</font>

607
00:27:33,320 --> 00:27:39,290
<font color="#CCCCCC">and the way that it does it is it uses</font>

608
00:27:36,919 --> 00:27:41,059
<font color="#E5E5E5">byte level tape tracking so it doesn't</font>

609
00:27:39,290 --> 00:27:44,559
just<font color="#E5E5E5"> know like the line of code</font><font color="#CCCCCC"> you hit</font>

610
00:27:41,059 --> 00:27:47,990
it knows the actual<font color="#E5E5E5"> bytes that that</font>

611
00:27:44,559 --> 00:27:51,110
input<font color="#CCCCCC"> manipulated so like I don't know</font>

612
00:27:47,990 --> 00:27:53,120
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I just I just hid variable</font><font color="#E5E5E5"> X I knew</font>

613
00:27:51,110 --> 00:27:54,889
I know I<font color="#E5E5E5"> hit variable X and</font><font color="#CCCCCC"> I and I know</font>

614
00:27:53,120 --> 00:27:56,870
<font color="#CCCCCC">I hit like the first or second byte on</font>

615
00:27:54,890 --> 00:28:00,200
<font color="#CCCCCC">it and you could buy a new bit</font><font color="#E5E5E5"> level if</font>

616
00:27:56,870 --> 00:28:04,639
you wanted to another thing that it does

617
00:28:00,200 --> 00:28:07,070
<font color="#CCCCCC">is type inference</font><font color="#E5E5E5"> and so it can tell</font>

618
00:28:04,640 --> 00:28:09,140
kind of in the context of<font color="#CCCCCC"> using</font><font color="#E5E5E5"> things</font>

619
00:28:07,070 --> 00:28:13,100
<font color="#E5E5E5">you know is this an unsigned or signed</font>

620
00:28:09,140 --> 00:28:15,080
integer<font color="#CCCCCC"> it also does something</font><font color="#E5E5E5"> called</font>

621
00:28:13,100 --> 00:28:19,459
gradient<font color="#E5E5E5"> descent which they use a lot in</font>

622
00:28:15,080 --> 00:28:23,059
<font color="#E5E5E5">in AI where you have a bite you know</font>

623
00:28:19,460 --> 00:28:25,940
that's you<font color="#CCCCCC"> know 32 bits</font><font color="#E5E5E5"> and a 32 bits</font>

624
00:28:23,059 --> 00:28:28,129
but<font color="#E5E5E5"> anyway you have some value</font><font color="#CCCCCC"> in memory</font>

625
00:28:25,940 --> 00:28:31,790
<font color="#E5E5E5">and it does a gradient descent where it</font>

626
00:28:28,130 --> 00:28:34,580
kind of tries to do<font color="#CCCCCC"> what I just blame</font>

627
00:28:31,790 --> 00:28:36,889
gradient descent<font color="#E5E5E5"> you kind of you can</font>

628
00:28:34,580 --> 00:28:38,330
have a slope of<font color="#CCCCCC"> where you're getting</font>

629
00:28:36,890 --> 00:28:40,040
better and better answers and it tries

630
00:28:38,330 --> 00:28:43,879
to tell where that is and keep<font color="#E5E5E5"> following</font>

631
00:28:40,040 --> 00:28:46,639
that<font color="#E5E5E5"> that's slope in high dimensions and</font>

632
00:28:43,880 --> 00:28:50,000
then it actually<font color="#E5E5E5"> gets pretty pretty good</font>

633
00:28:46,640 --> 00:28:52,010
<font color="#E5E5E5">results because</font><font color="#CCCCCC"> a lot of our a lot of</font>

634
00:28:50,000 --> 00:28:57,620
<font color="#CCCCCC">the</font><font color="#E5E5E5"> conditions that we have in programs</font>

635
00:28:52,010 --> 00:29:03,559
are like like X is greater than<font color="#CCCCCC"> 5 type</font>

636
00:28:57,620 --> 00:29:06,168
of things<font color="#E5E5E5"> they're linear</font><font color="#CCCCCC"> and also it</font>

637
00:29:03,559 --> 00:29:11,720
does a context-sensitive branch count<font color="#E5E5E5"> so</font>

638
00:29:06,169 --> 00:29:15,799
it knows that<font color="#E5E5E5"> I called function</font>

639
00:29:11,720 --> 00:29:18,559
<font color="#E5E5E5">acts from the context of something up</font>

640
00:29:15,799 --> 00:29:20,418
here<font color="#CCCCCC"> and it calls it it takes those</font>

641
00:29:18,559 --> 00:29:22,940
pieces<font color="#E5E5E5"> of code coverage and it counts</font>

642
00:29:20,419 --> 00:29:26,419
<font color="#E5E5E5">them separately based on the context in</font>

643
00:29:22,940 --> 00:29:31,429
which<font color="#E5E5E5"> it</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> called so</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> does a little</font>

644
00:29:26,419 --> 00:29:33,019
<font color="#E5E5E5">bit more</font><font color="#CCCCCC"> recursion I guess you know more</font>

645
00:29:31,429 --> 00:29:36,590
state about about where<font color="#E5E5E5"> things were</font>

646
00:29:33,019 --> 00:29:39,340
called<font color="#CCCCCC"> another</font><font color="#E5E5E5"> thing that's it's been</font>

647
00:29:36,590 --> 00:29:43,100
<font color="#CCCCCC">used a lot in the automotive industry</font><font color="#E5E5E5"> is</font>

648
00:29:39,340 --> 00:29:45,769
<font color="#CCCCCC">parametrized tests like</font><font color="#E5E5E5"> quick check</font><font color="#CCCCCC"> so</font>

649
00:29:43,100 --> 00:29:48,350
what you do is you take a dejected

650
00:29:45,769 --> 00:29:50,990
<font color="#E5E5E5">grammar of whatever your problem is</font><font color="#CCCCCC"> and</font>

651
00:29:48,350 --> 00:29:54,379
<font color="#E5E5E5">you attempt to shorten failures when you</font>

652
00:29:50,990 --> 00:29:58,669
find them<font color="#CCCCCC"> and one example is a</font><font color="#E5E5E5"> canned</font>

653
00:29:54,379 --> 00:30:00,168
bus for<font color="#E5E5E5"> every</font><font color="#CCCCCC"> or it's not car your</font>

654
00:29:58,669 --> 00:30:03,080
network<font color="#E5E5E5"> that's what I've</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> tend to</font>

655
00:30:00,169 --> 00:30:05,600
call it<font color="#E5E5E5"> my head</font><font color="#CCCCCC"> so the idea</font><font color="#E5E5E5"> is that you</font>

656
00:30:03,080 --> 00:30:08,449
have messages<font color="#CCCCCC"> that are being passed onto</font>

657
00:30:05,600 --> 00:30:12,259
<font color="#CCCCCC">the</font><font color="#E5E5E5"> network from different devices that</font>

658
00:30:08,450 --> 00:30:16,580
come in and the CPU analyzes them to say

659
00:30:12,259 --> 00:30:18,710
<font color="#CCCCCC">hey I'm</font><font color="#E5E5E5"> braking or something and the</font>

660
00:30:16,580 --> 00:30:20,360
idea is that<font color="#E5E5E5"> no matter which permutation</font>

661
00:30:18,710 --> 00:30:23,830
these messages come<font color="#CCCCCC"> in I want it to be</font>

662
00:30:20,360 --> 00:30:27,320
in the<font color="#E5E5E5"> same state if up</font><font color="#CCCCCC"> to some</font>

663
00:30:23,830 --> 00:30:33,350
asynchronous<font color="#E5E5E5"> condition and and so the</font>

664
00:30:27,320 --> 00:30:35,000
idea is to have the CPU process<font color="#E5E5E5"> like</font>

665
00:30:33,350 --> 00:30:36,678
<font color="#E5E5E5">different permutations of these messages</font>

666
00:30:35,000 --> 00:30:40,669
that<font color="#CCCCCC"> come in and</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that it</font>

667
00:30:36,679 --> 00:30:42,169
always<font color="#CCCCCC"> has the same result and so what</font>

668
00:30:40,669 --> 00:30:46,029
you'll do is<font color="#CCCCCC"> you usually write what's</font>

669
00:30:42,169 --> 00:30:46,029
<font color="#CCCCCC">called a generator</font><font color="#E5E5E5"> that generates</font>

670
00:30:46,929 --> 00:30:51,860
phrases in this dejected grammar you

671
00:30:49,159 --> 00:30:54,500
have which in this case would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> can bus</font>

672
00:30:51,860 --> 00:30:55,939
messages and then after<font color="#E5E5E5"> you've found one</font>

673
00:30:54,500 --> 00:31:00,409
you also have<font color="#CCCCCC"> something that's a</font>

674
00:30:55,940 --> 00:31:01,669
shortener<font color="#E5E5E5"> that takes that that that's</font>

675
00:31:00,409 --> 00:31:03,649
snippet that<font color="#CCCCCC"> you found and tries to</font>

676
00:31:01,669 --> 00:31:08,029
somehow shorten it like do I<font color="#E5E5E5"> have to</font>

677
00:31:03,649 --> 00:31:10,370
<font color="#E5E5E5">call every single</font><font color="#CCCCCC"> one of these can i</font><font color="#E5E5E5"> you</font>

678
00:31:08,029 --> 00:31:12,710
<font color="#E5E5E5">know eliminate this one</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> one and</font>

679
00:31:10,370 --> 00:31:14,570
it's basically it has a tree that

680
00:31:12,710 --> 00:31:16,129
created this dejected grammar<font color="#E5E5E5"> and you</font>

681
00:31:14,570 --> 00:31:17,600
try to prune the tree in different ways

682
00:31:16,129 --> 00:31:20,269
to see if you<font color="#E5E5E5"> can come up with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> very</font>

683
00:31:17,600 --> 00:31:24,129
human readable example which is<font color="#CCCCCC"> very</font>

684
00:31:20,269 --> 00:31:24,129
useful<font color="#E5E5E5"> in brain complex systems</font>

685
00:31:25,280 --> 00:31:31,158
so<font color="#CCCCCC"> I guess I'm takeaways from this</font><font color="#E5E5E5"> if</font>

686
00:31:28,070 --> 00:31:33,439
you haven't learned rust<font color="#E5E5E5"> at least learn</font>

687
00:31:31,159 --> 00:31:38,799
how to do like a simple hello world<font color="#E5E5E5"> in</font>

688
00:31:33,440 --> 00:31:41,720
it<font color="#E5E5E5"> just just write like a very small</font>

689
00:31:38,799 --> 00:31:44,418
parser that<font color="#E5E5E5"> like recognizes something</font>

690
00:31:41,720 --> 00:31:49,610
very<font color="#E5E5E5"> simple you know you really don't</font>

691
00:31:44,419 --> 00:31:51,230
need that<font color="#CCCCCC"> much to do safe code learn a</font>

692
00:31:49,610 --> 00:31:54,949
couple<font color="#CCCCCC"> of these parser libraries for</font>

693
00:31:51,230 --> 00:31:58,640
whatever they are<font color="#E5E5E5"> whether if it's antler</font>

694
00:31:54,950 --> 00:32:02,990
if you're in Java land<font color="#E5E5E5"> or a</font><font color="#CCCCCC"> or hammer or</font>

695
00:31:58,640 --> 00:32:04,909
<font color="#E5E5E5">Nam if you're in the</font><font color="#CCCCCC"> C C++ world make</font>

696
00:32:02,990 --> 00:32:06,860
sure<font color="#E5E5E5"> that you always run code coverage</font>

697
00:32:04,909 --> 00:32:08,539
for your unit<font color="#CCCCCC"> test that that's that's</font>

698
00:32:06,860 --> 00:32:10,039
<font color="#E5E5E5">pretty important because you're getting</font>

699
00:32:08,539 --> 00:32:12,049
<font color="#E5E5E5">that that content</font><font color="#CCCCCC"> you're getting that</font>

700
00:32:10,039 --> 00:32:13,850
con<font color="#CCCCCC"> Kollek testing for free without the</font>

701
00:32:12,049 --> 00:32:17,840
SMT solver because<font color="#E5E5E5"> you as the human</font><font color="#CCCCCC"> are</font>

702
00:32:13,850 --> 00:32:19,969
<font color="#E5E5E5">putting in the inputs and also make sure</font>

703
00:32:17,840 --> 00:32:23,360
you specify all resource bounds

704
00:32:19,970 --> 00:32:25,820
everywhere no matter<font color="#E5E5E5"> what I always</font><font color="#CCCCCC"> know</font>

705
00:32:23,360 --> 00:32:27,740
your failure modes always know at what

706
00:32:25,820 --> 00:32:31,039
point<font color="#E5E5E5"> this thing runs</font><font color="#CCCCCC"> outta</font><font color="#E5E5E5"> memory</font>

707
00:32:27,740 --> 00:32:33,020
always<font color="#CCCCCC"> know that I can only put integers</font>

708
00:32:31,039 --> 00:32:35,740
up to a<font color="#E5E5E5"> certain size into this</font><font color="#CCCCCC"> datatype</font>

709
00:32:33,020 --> 00:32:40,520
otherwise I have an<font color="#CCCCCC"> air condition</font>

710
00:32:35,740 --> 00:32:42,200
<font color="#E5E5E5">everything has to be bounded and for</font>

711
00:32:40,520 --> 00:32:43,610
things that<font color="#E5E5E5"> you don't have bounded at</font>

712
00:32:42,200 --> 00:32:46,370
least put it<font color="#CCCCCC"> in a black box with</font>

713
00:32:43,610 --> 00:32:48,110
counters<font color="#CCCCCC"> around it and walled off from</font>

714
00:32:46,370 --> 00:32:49,969
<font color="#E5E5E5">the operating</font><font color="#CCCCCC"> system so it only can view</font>

715
00:32:48,110 --> 00:32:59,330
<font color="#E5E5E5">certain calls and treat it like a black</font>

716
00:32:49,970 --> 00:33:00,740
box yeah<font color="#E5E5E5"> they need questions about any</font>

717
00:32:59,330 --> 00:33:04,330
<font color="#E5E5E5">of these</font><font color="#CCCCCC"> particular levers I tried not</font>

718
00:33:00,740 --> 00:33:04,330
to put too<font color="#CCCCCC"> much code in the presentation</font>

719
00:33:07,730 --> 00:33:13,250
like is<font color="#E5E5E5"> anybody using much language</font>

720
00:33:11,090 --> 00:33:14,928
<font color="#E5E5E5">space security stuff and</font><font color="#CCCCCC"> they're as</font>

721
00:33:13,250 --> 00:33:23,929
they're writing<font color="#CCCCCC"> their applications today</font>

722
00:33:14,929 --> 00:33:25,970
or yeah that's a<font color="#E5E5E5"> problem and</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> for</font>

723
00:33:23,929 --> 00:33:34,840
like<font color="#E5E5E5"> your QA people that are doing like</font>

724
00:33:25,970 --> 00:33:38,450
webdriver tests you can<font color="#E5E5E5"> write yeah you</font>

725
00:33:34,840 --> 00:33:41,299
can help them write webdriver<font color="#E5E5E5"> tests to</font>

726
00:33:38,450 --> 00:33:43,039
try to get grammars out of you know you

727
00:33:41,299 --> 00:33:45,320
know I want this field to have certain

728
00:33:43,039 --> 00:33:49,010
something<font color="#CCCCCC"> I mean you could use a lot of</font>

729
00:33:45,320 --> 00:33:50,330
these these fuzzing based techniques in

730
00:33:49,010 --> 00:33:51,200
webdriver if you wanted to<font color="#E5E5E5"> I could</font>

731
00:33:50,330 --> 00:33:53,529
especially<font color="#CCCCCC"> look like the quickcheck</font>

732
00:33:51,200 --> 00:33:55,399
<font color="#CCCCCC">stuff</font><font color="#E5E5E5"> that's that's</font><font color="#CCCCCC"> very useful for</font>

733
00:33:53,529 --> 00:33:57,080
because because nobody wants to<font color="#E5E5E5"> sit</font>

734
00:33:55,399 --> 00:34:18,138
around<font color="#CCCCCC"> and</font><font color="#E5E5E5"> play with things by hand all</font>

735
00:33:57,080 --> 00:34:26,779
<font color="#CCCCCC">day long and in</font><font color="#E5E5E5"> web fields yeah</font><font color="#CCCCCC"> we're</font>

736
00:34:18,139 --> 00:34:28,879
still using 1970s<font color="#CCCCCC"> C techniques it</font>

737
00:34:26,780 --> 00:34:30,050
shouldn't be a problem<font color="#CCCCCC"> in 2017</font><font color="#E5E5E5"> I think</font>

738
00:34:28,879 --> 00:34:33,828
it's more of<font color="#CCCCCC"> just</font><font color="#E5E5E5"> one that we don't</font>

739
00:34:30,050 --> 00:34:35,929
<font color="#E5E5E5">always think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of the code we</font>

740
00:34:33,829 --> 00:34:37,250
write is parsing<font color="#CCCCCC"> a grammar but we just</font>

741
00:34:35,929 --> 00:34:38,869
<font color="#CCCCCC">usually</font><font color="#E5E5E5"> don't think about it in</font><font color="#CCCCCC"> that</font>

742
00:34:37,250 --> 00:34:40,940
context<font color="#E5E5E5"> because it doesn't seem like a</font>

743
00:34:38,869 --> 00:34:44,119
grammar to us I mean<font color="#E5E5E5"> we usually have</font>

744
00:34:40,940 --> 00:34:45,649
<font color="#CCCCCC">some business modeling case that we</font>

745
00:34:44,119 --> 00:34:48,190
associate<font color="#CCCCCC"> with it but we don't</font><font color="#E5E5E5"> actually</font>

746
00:34:45,649 --> 00:34:51,230
<font color="#CCCCCC">think of it as that we're actually</font>

747
00:34:48,190 --> 00:34:52,760
<font color="#E5E5E5">taking a context-free grammar of input</font>

748
00:34:51,230 --> 00:34:55,069
and<font color="#E5E5E5"> then doing something</font><font color="#CCCCCC"> on it but we</font>

749
00:34:52,760 --> 00:34:57,109
don't<font color="#E5E5E5"> usually think about it</font><font color="#CCCCCC"> I mean we</font>

750
00:34:55,069 --> 00:34:59,930
take<font color="#E5E5E5"> the compiler class and undergrad</font>

751
00:34:57,109 --> 00:35:02,060
and we learn about finite<font color="#E5E5E5"> state automata</font>

752
00:34:59,930 --> 00:35:05,868
and context-free grammars<font color="#CCCCCC"> and what you</font>

753
00:35:02,060 --> 00:35:08,230
can and can't do<font color="#CCCCCC"> with them but it never</font>

754
00:35:05,869 --> 00:35:12,950
gets taught in the<font color="#E5E5E5"> engineering side</font>

755
00:35:08,230 --> 00:35:17,540
which doesn't make<font color="#E5E5E5"> sense</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> there are</font>

756
00:35:12,950 --> 00:35:19,098
some things you<font color="#E5E5E5"> can do on the</font><font color="#CCCCCC"> IO -</font><font color="#E5E5E5"> what</font>

757
00:35:17,540 --> 00:35:20,599
one thing is<font color="#E5E5E5"> just figure out</font><font color="#CCCCCC"> the tape of</font>

758
00:35:19,099 --> 00:35:21,560
your operating system calls it's the

759
00:35:20,599 --> 00:35:23,840
cheapest thing you can do

760
00:35:21,560 --> 00:35:25,880
you can do<font color="#E5E5E5"> that in</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> like if this</font>

761
00:35:23,840 --> 00:35:27,410
thing is<font color="#CCCCCC"> making an operating system</font><font color="#E5E5E5"> call</font>

762
00:35:25,880 --> 00:35:29,420
here's all the<font color="#CCCCCC"> things that are tainted</font>

763
00:35:27,410 --> 00:35:33,140
<font color="#E5E5E5">by it and so that you know what the</font>

764
00:35:29,420 --> 00:35:34,640
taint is otherwise you have<font color="#CCCCCC"> to use</font>

765
00:35:33,140 --> 00:35:37,670
<font color="#E5E5E5">something like Haskell that you have</font>

766
00:35:34,640 --> 00:35:39,379
like actual<font color="#E5E5E5"> IO and the</font><font color="#CCCCCC"> data type where</font>

767
00:35:37,670 --> 00:35:41,210
were you as a programmer pass that

768
00:35:39,380 --> 00:35:43,400
<font color="#CCCCCC">around to every variable</font><font color="#E5E5E5"> and say oh by</font>

769
00:35:41,210 --> 00:35:46,150
<font color="#CCCCCC">the way this thing has</font><font color="#E5E5E5"> IO it can come</font>

770
00:35:43,400 --> 00:35:46,150
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the outside world</font>

771
00:36:31,410 --> 00:36:41,049
reviews for<font color="#CCCCCC"> this type of</font><font color="#E5E5E5"> stuff in my in</font>

772
00:36:35,739 --> 00:36:43,420
my CI system<font color="#CCCCCC"> one of the ways was I mean</font>

773
00:36:41,049 --> 00:36:45,749
you can just<font color="#E5E5E5"> do</font><font color="#CCCCCC"> like simple compiled</font>

774
00:36:43,420 --> 00:36:50,890
checks to see if they're using unsafe

775
00:36:45,749 --> 00:36:52,868
calls<font color="#CCCCCC"> I know there's a couple Santa</font>

776
00:36:50,890 --> 00:37:02,979
static analysis<font color="#E5E5E5"> tools out there they do</font>

777
00:36:52,869 --> 00:37:04,900
it<font color="#E5E5E5"> every</font><font color="#CCCCCC"> day to get that</font><font color="#E5E5E5"> ad sorry anyway</font>

778
00:37:02,979 --> 00:37:07,118
yeah I mean you can take all<font color="#CCCCCC"> of those</font>

779
00:37:04,900 --> 00:37:09,369
calls<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you know or unsafe parsers</font>

780
00:37:07,119 --> 00:37:12,729
<font color="#CCCCCC">that are like like ASCII to integer and</font>

781
00:37:09,369 --> 00:37:15,279
C and and make sure that they are only

782
00:37:12,729 --> 00:37:16,839
used in<font color="#E5E5E5"> contexts that you know that</font>

783
00:37:15,279 --> 00:37:18,039
you're<font color="#CCCCCC"> always passing in something</font>

784
00:37:16,839 --> 00:37:20,410
that's<font color="#CCCCCC"> not going</font><font color="#E5E5E5"> to break that dumb</font>

785
00:37:18,039 --> 00:37:22,539
parser<font color="#CCCCCC"> because</font><font color="#E5E5E5"> because it's not like</font><font color="#CCCCCC"> a</font>

786
00:37:20,410 --> 00:37:26,430
like<font color="#CCCCCC"> it that the way that</font><font color="#E5E5E5"> ask you to</font>

787
00:37:22,539 --> 00:37:26,430
integer fails<font color="#CCCCCC"> is undefined</font>

788
00:37:26,459 --> 00:37:33,609
<font color="#E5E5E5">so yeah taking all of those make debug</font>

789
00:37:30,249 --> 00:37:39,519
bills with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> SAN and debug builds with a</font>

790
00:37:33,609 --> 00:37:42,339
dejected<font color="#E5E5E5"> G Lib</font><font color="#CCCCCC"> C it's</font><font color="#E5E5E5"> okay to link in</font>

791
00:37:39,519 --> 00:37:46,808
<font color="#CCCCCC">your own</font><font color="#E5E5E5"> G Lib C that has all</font><font color="#CCCCCC"> kinds of</font>

792
00:37:42,339 --> 00:37:49,660
stuff that's not not there or that's

793
00:37:46,809 --> 00:37:52,239
much safer<font color="#E5E5E5"> than the actual G Lib C it's</font>

794
00:37:49,660 --> 00:37:56,410
not<font color="#E5E5E5"> gonna be as performant</font><font color="#CCCCCC"> but it's</font>

795
00:37:52,239 --> 00:37:59,289
gonna be<font color="#E5E5E5"> a lot safer</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> sure you run</font>

796
00:37:56,410 --> 00:38:01,479
all of those those taint analysis<font color="#E5E5E5"> if you</font>

797
00:37:59,289 --> 00:38:03,640
can make sure<font color="#CCCCCC"> that you have code</font>

798
00:38:01,479 --> 00:38:05,169
coverage<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> like the easiest</font><font color="#E5E5E5"> win it</font>

799
00:38:03,640 --> 00:38:06,569
is this<font color="#CCCCCC"> half code coverage on your</font><font color="#E5E5E5"> unit</font>

800
00:38:05,170 --> 00:38:09,909
tests

801
00:38:06,570 --> 00:38:09,909
[Music]

802
00:38:10,349 --> 00:38:16,599
yeah and use like<font color="#E5E5E5"> buzzers</font><font color="#CCCCCC"> and stuff</font>

803
00:38:13,270 --> 00:38:19,150
every now and then<font color="#CCCCCC"> just to just just</font><font color="#E5E5E5"> the</font>

804
00:38:16,599 --> 00:38:21,609
act of getting<font color="#E5E5E5"> the fuzzer around the</font>

805
00:38:19,150 --> 00:38:23,619
code<font color="#E5E5E5"> gets it into a state where other</font>

806
00:38:21,609 --> 00:38:25,328
people<font color="#CCCCCC"> can write other tests to</font><font color="#E5E5E5"> it</font>

807
00:38:23,619 --> 00:38:28,680
because<font color="#E5E5E5"> because if you can't even set it</font>

808
00:38:25,329 --> 00:38:31,240
up for<font color="#E5E5E5"> a simple fuzzer it's hard for</font>

809
00:38:28,680 --> 00:38:33,279
like one organization in town<font color="#E5E5E5"> they have</font>

810
00:38:31,240 --> 00:38:35,379
all their COBOL code locked up in this

811
00:38:33,280 --> 00:38:37,750
non<font color="#E5E5E5"> git repository for all their</font>

812
00:38:35,380 --> 00:38:40,030
mainframe stuff and nobody can<font color="#E5E5E5"> get any</font>

813
00:38:37,750 --> 00:38:41,799
<font color="#E5E5E5">modern tooling at it and it makes</font>

814
00:38:40,030 --> 00:38:45,010
absolutely no sense<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I mean you have</font>

815
00:38:41,799 --> 00:38:47,710
<font color="#CCCCCC">to have your source code</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> your build</font>

816
00:38:45,010 --> 00:38:49,539
systems<font color="#E5E5E5"> there in a way where you've</font>

817
00:38:47,710 --> 00:38:51,069
<font color="#CCCCCC">taken out all of the those</font><font color="#E5E5E5"> credentials</font>

818
00:38:49,539 --> 00:38:55,240
and stuff and<font color="#E5E5E5"> move them out of the code</font>

819
00:38:51,069 --> 00:38:58,509
so<font color="#CCCCCC"> it doesn't matter who touches it and</font>

820
00:38:55,240 --> 00:39:01,450
so that<font color="#CCCCCC"> you can get other teams putting</font>

821
00:38:58,510 --> 00:39:03,490
those those modern tools<font color="#CCCCCC"> around it like</font>

822
00:39:01,450 --> 00:39:12,069
especially<font color="#CCCCCC"> for stuff like like COBOL</font>

823
00:39:03,490 --> 00:39:14,169
code or sequel also for<font color="#CCCCCC"> Network stuff</font>

824
00:39:12,069 --> 00:39:17,259
<font color="#CCCCCC">Tyler treat from workiva before he left</font>

825
00:39:14,170 --> 00:39:19,720
he wrote a<font color="#CCCCCC"> library called Comcast like</font>

826
00:39:17,260 --> 00:39:23,400
the cable company<font color="#CCCCCC"> and you can use</font><font color="#E5E5E5"> that</font>

827
00:39:19,720 --> 00:39:25,480
and it will inject both failure and

828
00:39:23,400 --> 00:39:27,670
latency<font color="#E5E5E5"> in your network connections</font>

829
00:39:25,480 --> 00:39:31,390
which is really nice so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can test</font>

830
00:39:27,670 --> 00:39:34,210
<font color="#E5E5E5">your network code on the same box with</font>

831
00:39:31,390 --> 00:39:36,069
simulated<font color="#E5E5E5"> network degradation</font><font color="#CCCCCC"> 'z and</font>

832
00:39:34,210 --> 00:39:37,630
stuff<font color="#E5E5E5"> without</font><font color="#CCCCCC"> having to like actually</font>

833
00:39:36,069 --> 00:39:39,160
<font color="#E5E5E5">deploy it on a full cluster which is</font>

834
00:39:37,630 --> 00:39:41,230
<font color="#E5E5E5">nice if you don't have like one node</font>

835
00:39:39,160 --> 00:39:43,598
available to you<font color="#E5E5E5"> so I mean I can</font><font color="#CCCCCC"> just</font>

836
00:39:41,230 --> 00:39:45,549
like pop it out<font color="#E5E5E5"> like I abuse AWS code</font>

837
00:39:43,599 --> 00:39:47,200
<font color="#CCCCCC">build for all kinds of stuff</font><font color="#E5E5E5"> because</font>

838
00:39:45,549 --> 00:39:49,359
it's essentially a<font color="#E5E5E5"> fat lambda function</font>

839
00:39:47,200 --> 00:39:51,460
that you<font color="#E5E5E5"> can just call</font><font color="#CCCCCC"> and demand and it</font>

840
00:39:49,359 --> 00:39:53,558
has a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> different environments</font><font color="#E5E5E5"> so</font>

841
00:39:51,460 --> 00:39:55,329
I<font color="#E5E5E5"> usually like to store all my my static</font>

842
00:39:53,559 --> 00:39:58,599
stuff<font color="#CCCCCC"> an s3</font><font color="#E5E5E5"> bucket</font><font color="#CCCCCC"> it'll just you know</font>

843
00:39:55,329 --> 00:40:00,730
read it all in apply any you know quick

844
00:39:58,599 --> 00:40:02,200
you know packages it needs to the Linux

845
00:40:00,730 --> 00:40:03,670
<font color="#CCCCCC">critical Colonel like oh I</font><font color="#E5E5E5"> need this I</font>

846
00:40:02,200 --> 00:40:06,038
need that<font color="#E5E5E5"> just takes like two seconds</font>

847
00:40:03,670 --> 00:40:08,079
since it's all<font color="#E5E5E5"> hosted on Amazon and this</font>

848
00:40:06,039 --> 00:40:11,140
kind of<font color="#E5E5E5"> just run my my stuff</font><font color="#CCCCCC"> usually</font>

849
00:40:08,079 --> 00:40:16,170
<font color="#E5E5E5">like a fat code build instance for</font><font color="#CCCCCC"> 90%</font>

850
00:40:11,140 --> 00:40:16,170
of my stuff<font color="#E5E5E5"> just</font><font color="#CCCCCC"> just on one box</font><font color="#E5E5E5"> but</font>

851
00:40:17,920 --> 00:40:23,829
yeah make your make<font color="#CCCCCC"> your CI system and</font>

852
00:40:22,299 --> 00:40:26,770
<font color="#E5E5E5">that nice for external tooling on the</font>

853
00:40:23,829 --> 00:40:29,319
code<font color="#E5E5E5"> and also have that that second</font><font color="#CCCCCC"> like</font>

854
00:40:26,770 --> 00:40:32,680
<font color="#E5E5E5">after you run your CI test make sure</font><font color="#CCCCCC"> you</font>

855
00:40:29,319 --> 00:40:34,440
actually take a<font color="#E5E5E5"> meaningful subset of</font>

856
00:40:32,680 --> 00:40:36,970
those tests it's not like you know

857
00:40:34,440 --> 00:40:39,549
hundreds of megabytes<font color="#E5E5E5"> and</font><font color="#CCCCCC"> commit those</font>

858
00:40:36,970 --> 00:40:41,618
as a version<font color="#E5E5E5"> also and so you can do</font>

859
00:40:39,549 --> 00:40:44,259
<font color="#E5E5E5">bisection because because that's very</font>

860
00:40:41,619 --> 00:40:46,990
very useful<font color="#E5E5E5"> when you're</font><font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> figure</font>

861
00:40:44,260 --> 00:40:50,710
<font color="#CCCCCC">out</font><font color="#E5E5E5"> okay which feature did I add that</font>

862
00:40:46,990 --> 00:40:53,049
added this this<font color="#CCCCCC"> unstability to my system</font>

863
00:40:50,710 --> 00:40:55,119
or<font color="#E5E5E5"> something or which feature did I add</font>

864
00:40:53,049 --> 00:40:56,859
that<font color="#E5E5E5"> I still haven't had tests</font><font color="#CCCCCC"> around</font>

865
00:40:55,119 --> 00:40:58,809
and I'll know exactly<font color="#CCCCCC"> which which</font>

866
00:40:56,859 --> 00:41:00,670
library came in and did that<font color="#E5E5E5"> or which</font>

867
00:40:58,809 --> 00:41:04,380
configuration<font color="#E5E5E5"> changed came in and did</font>

868
00:41:00,670 --> 00:41:04,380
that<font color="#CCCCCC"> iiiii visibility</font>

869
00:41:41,350 --> 00:41:45,589
[Music]

870
00:41:42,849 --> 00:41:49,249
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> like team organization structure</font>

871
00:41:45,589 --> 00:41:51,430
<font color="#E5E5E5">it usually helps</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> and for whatever</font>

872
00:41:49,249 --> 00:41:53,598
reason<font color="#E5E5E5"> you got these people</font><font color="#CCCCCC"> from Lake I</font>

873
00:41:51,430 --> 00:41:55,640
know the consultants like you must have

874
00:41:53,599 --> 00:41:56,749
a QA person<font color="#E5E5E5"> you must have a person</font>

875
00:41:55,640 --> 00:41:58,759
that's a developer you must have a

876
00:41:56,749 --> 00:42:01,640
person<font color="#CCCCCC"> that's a business</font><font color="#E5E5E5"> analyst you</font>

877
00:41:58,759 --> 00:42:03,259
really don't need<font color="#CCCCCC"> that but you really</font>

878
00:42:01,640 --> 00:42:06,499
should probably have whoever writes the

879
00:42:03,259 --> 00:42:08,539
code<font color="#E5E5E5"> has someone else on the team do the</font>

880
00:42:06,499 --> 00:42:10,009
QA card for it<font color="#E5E5E5"> it's like you know they</font>

881
00:42:08,539 --> 00:42:11,630
do<font color="#E5E5E5"> it they're done with the development</font>

882
00:42:10,009 --> 00:42:13,430
<font color="#E5E5E5">and then some other developer who didn't</font>

883
00:42:11,630 --> 00:42:17,150
touch<font color="#E5E5E5"> that code you know at least assign</font>

884
00:42:13,430 --> 00:42:18,169
them to do the code review<font color="#CCCCCC"> and more than</font>

885
00:42:17,150 --> 00:42:19,489
<font color="#E5E5E5">just code of you actually</font><font color="#CCCCCC"> you know</font>

886
00:42:18,170 --> 00:42:21,349
<font color="#E5E5E5">writing some more tests</font><font color="#CCCCCC"> around it just</font>

887
00:42:19,489 --> 00:42:22,849
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the poke at it cuz you</font><font color="#E5E5E5"> really have to</font>

888
00:42:21,349 --> 00:42:28,999
poke at the<font color="#E5E5E5"> code you can't just human</font>

889
00:42:22,849 --> 00:42:30,739
read it<font color="#CCCCCC"> that's helpful</font><font color="#E5E5E5"> and also there's</font>

890
00:42:28,999 --> 00:42:35,808
a lot of things you can do in the build

891
00:42:30,739 --> 00:42:38,559
system<font color="#CCCCCC"> to</font><font color="#E5E5E5"> but turn all your boarding</font>

892
00:42:35,809 --> 00:42:41,690
flags on when you're compiling stuff

893
00:42:38,559 --> 00:42:44,119
<font color="#CCCCCC">there's there's a couple static analysis</font>

894
00:42:41,690 --> 00:42:49,489
tools out<font color="#CCCCCC"> there they are</font><font color="#E5E5E5"> a little bit</font>

895
00:42:44,119 --> 00:42:51,229
more<font color="#E5E5E5"> robust than that but not many of</font>

896
00:42:49,489 --> 00:42:53,390
<font color="#E5E5E5">them are</font><font color="#CCCCCC"> very expressive</font><font color="#E5E5E5"> because they</font>

897
00:42:51,229 --> 00:42:55,430
make you<font color="#E5E5E5"> like</font><font color="#CCCCCC"> the Hewlett Packard</font><font color="#E5E5E5"> will</font>

898
00:42:53,390 --> 00:42:57,940
try<font color="#CCCCCC"> is trying</font><font color="#E5E5E5"> to sell you one you have</font>

899
00:42:55,430 --> 00:43:02,538
to configure<font color="#E5E5E5"> all these XML files for</font>

900
00:42:57,940 --> 00:43:03,499
snippets of code that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't like I'm</font>

901
00:43:02,539 --> 00:43:06,319
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> if there's</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> called</font>

902
00:43:03,499 --> 00:43:07,819
Puma<font color="#CCCCCC"> I believe for c-sharp code that</font>

903
00:43:06,319 --> 00:43:10,038
uses<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Rozlyn framework for their</font>

904
00:43:07,819 --> 00:43:12,650
compiler<font color="#E5E5E5"> that's written by a local guy</font>

905
00:43:10,039 --> 00:43:17,059
in town<font color="#E5E5E5"> and what he's doing is he's</font>

906
00:43:12,650 --> 00:43:20,239
actually taking unsafe<font color="#CCCCCC"> unsafe code</font>

907
00:43:17,059 --> 00:43:21,710
patterns and just<font color="#CCCCCC"> uh making a library of</font>

908
00:43:20,239 --> 00:43:25,369
those and so every<font color="#CCCCCC"> time you compile it's</font>

909
00:43:21,710 --> 00:43:27,890
like oh you used this operating system

910
00:43:25,369 --> 00:43:29,269
call in the context<font color="#E5E5E5"> of this which</font><font color="#CCCCCC"> is</font>

911
00:43:27,890 --> 00:43:31,219
usually unsafe and it would flag a

912
00:43:29,269 --> 00:43:32,779
warning and it does it<font color="#CCCCCC"> very much at the</font>

913
00:43:31,219 --> 00:43:36,890
language<font color="#CCCCCC"> level</font><font color="#E5E5E5"> where it is essentially</font>

914
00:43:32,779 --> 00:43:37,190
<font color="#E5E5E5">writing a parser that's dejected the</font>

915
00:43:36,890 --> 00:43:41,420
whole

916
00:43:37,190 --> 00:43:43,430
languages<font color="#E5E5E5"> of</font><font color="#CCCCCC"> c-sharp</font><font color="#E5E5E5"> into all of c-sharp</font>

917
00:43:41,420 --> 00:43:46,540
is okay except for<font color="#CCCCCC"> this this this this</font>

918
00:43:43,430 --> 00:43:49,430
<font color="#E5E5E5">and</font><font color="#CCCCCC"> he's making more and</font><font color="#E5E5E5"> more complex</font>

919
00:43:46,540 --> 00:43:50,810
dejection<font color="#CCCCCC"> z'</font><font color="#E5E5E5"> of things that that result</font>

920
00:43:49,430 --> 00:43:53,240
in<font color="#CCCCCC"> warning so yeah you</font><font color="#E5E5E5"> can definitely do</font>

921
00:43:50,810 --> 00:43:57,440
it<font color="#E5E5E5"> at the language level if you</font><font color="#CCCCCC"> have</font>

922
00:43:53,240 --> 00:44:02,270
like like<font color="#CCCCCC"> Rosslyn or the LV I'm</font>

923
00:43:57,440 --> 00:44:05,900
<font color="#CCCCCC">toolchain if</font><font color="#E5E5E5"> you're in in like</font><font color="#CCCCCC"> seal and</font>

924
00:44:02,270 --> 00:44:08,990
<font color="#E5E5E5">and there's also for Java there's the</font>

925
00:44:05,900 --> 00:44:11,119
checker framework you can do a lot with

926
00:44:08,990 --> 00:44:12,439
<font color="#CCCCCC">the checker framework actually</font><font color="#E5E5E5"> but you</font>

927
00:44:11,119 --> 00:44:15,369
have to look at linking it as an extra

928
00:44:12,440 --> 00:44:15,369
jar in your compiler

929
00:44:17,300 --> 00:44:20,469
[Applause]

