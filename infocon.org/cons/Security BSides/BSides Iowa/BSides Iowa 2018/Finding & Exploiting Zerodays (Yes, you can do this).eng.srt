1
00:00:25,660 --> 00:00:31,070
well good morning<font color="#CCCCCC"> everybody I love this</font>

2
00:00:29,420 --> 00:00:34,480
configuration<font color="#E5E5E5"> because everybody is</font><font color="#CCCCCC"> gonna</font>

3
00:00:31,070 --> 00:00:38,420
<font color="#CCCCCC">be</font><font color="#E5E5E5"> looking at the screen</font><font color="#CCCCCC"> and not at</font><font color="#E5E5E5"> me</font>

4
00:00:34,480 --> 00:00:41,089
but when I was growing<font color="#CCCCCC"> up in my</font>

5
00:00:38,420 --> 00:00:44,059
neighborhood<font color="#CCCCCC"> during Easter time we had a</font>

6
00:00:41,089 --> 00:00:46,730
neighborhood<font color="#E5E5E5"> Easter egg hunt you guys</font>

7
00:00:44,059 --> 00:00:48,290
ever do that so around<font color="#CCCCCC"> 11 some</font>

8
00:00:46,730 --> 00:00:50,390
responsible high school kids<font color="#E5E5E5"> would come</font>

9
00:00:48,290 --> 00:00:51,650
and get<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the donated</font><font color="#E5E5E5"> eggs from</font>

10
00:00:50,390 --> 00:00:54,110
each of the families and<font color="#CCCCCC"> then hide them</font>

11
00:00:51,650 --> 00:00:56,180
<font color="#E5E5E5">and then in the afternoon after most</font>

12
00:00:54,110 --> 00:00:58,940
people<font color="#E5E5E5"> got back from church the Easter</font>

13
00:00:56,180 --> 00:01:01,250
egg hunt would begin toddlers would<font color="#E5E5E5"> go</font>

14
00:00:58,940 --> 00:01:03,649
out first<font color="#CCCCCC"> there'd be some eggs</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> all</font>

15
00:01:01,250 --> 00:01:06,500
<font color="#CCCCCC">know the lawn for them and my time the</font>

16
00:01:03,649 --> 00:01:09,680
elementary school<font color="#E5E5E5"> kids went there were</font>

17
00:01:06,500 --> 00:01:13,880
only<font color="#E5E5E5"> hard ones left to</font><font color="#CCCCCC"> find and what</font><font color="#E5E5E5"> I'm</font>

18
00:01:09,680 --> 00:01:16,550
about<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show you is a very surprised</font>

19
00:01:13,880 --> 00:01:18,979
<font color="#CCCCCC">buzzing student finding something</font><font color="#E5E5E5"> that</font>

20
00:01:16,550 --> 00:01:20,509
<font color="#CCCCCC">felt like one of those Easter</font><font color="#E5E5E5"> eggs still</font>

21
00:01:18,979 --> 00:01:24,380
on the lawn that<font color="#E5E5E5"> was really surprised it</font>

22
00:01:20,509 --> 00:01:28,130
was there<font color="#E5E5E5"> and then I did a just a normal</font>

23
00:01:24,380 --> 00:01:31,009
<font color="#E5E5E5">stack based buffer overflow with a with</font>

24
00:01:28,130 --> 00:01:33,259
an<font color="#CCCCCC"> S eh chain addition in that which</font>

25
00:01:31,009 --> 00:01:34,910
will be<font color="#E5E5E5"> a review</font><font color="#CCCCCC"> for most of you so I'll</font>

26
00:01:33,259 --> 00:01:36,500
just step you<font color="#CCCCCC"> through it</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> the really</font>

27
00:01:34,910 --> 00:01:38,470
<font color="#CCCCCC">interesting thing to me is that it was</font>

28
00:01:36,500 --> 00:01:40,759
<font color="#CCCCCC">still out there I thought by the time I</font>

29
00:01:38,470 --> 00:01:42,739
get<font color="#CCCCCC"> to the hunt all the easy</font><font color="#E5E5E5"> ones have</font>

30
00:01:40,759 --> 00:01:47,319
been<font color="#E5E5E5"> found that was just</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> surprising</font>

31
00:01:42,739 --> 00:01:51,910
to<font color="#CCCCCC"> me I'm gonna project</font><font color="#E5E5E5"> my voice better</font>

32
00:01:47,319 --> 00:01:51,910
okay<font color="#E5E5E5"> all right</font>

33
00:01:52,660 --> 00:01:58,280
here's my contact information I'm from

34
00:01:54,860 --> 00:02:01,160
<font color="#CCCCCC">Omaha Nebraska and call me</font><font color="#E5E5E5"> JK if you</font>

35
00:01:58,280 --> 00:02:05,060
want and the title of<font color="#E5E5E5"> my talk is finding</font>

36
00:02:01,160 --> 00:02:10,130
and exploiting<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> days</font><font color="#CCCCCC"> yes you can do</font>

37
00:02:05,060 --> 00:02:12,040
this well here's<font color="#E5E5E5"> the about me slide that</font>

38
00:02:10,130 --> 00:02:15,470
you have to do to all<font color="#CCCCCC"> the conferences</font>

39
00:02:12,040 --> 00:02:21,680
step you through this<font color="#CCCCCC"> kids are getting</font>

40
00:02:15,470 --> 00:02:23,210
<font color="#CCCCCC">bigger for them are adults and</font><font color="#E5E5E5"> one high</font>

41
00:02:21,680 --> 00:02:27,080
<font color="#CCCCCC">school freshmen with really large feet</font>

42
00:02:23,210 --> 00:02:29,090
<font color="#CCCCCC">and the band</font><font color="#E5E5E5"> is doing</font><font color="#CCCCCC"> well</font>

43
00:02:27,080 --> 00:02:32,600
both my<font color="#CCCCCC"> band mates our cybersecurity</font>

44
00:02:29,090 --> 00:02:34,880
<font color="#CCCCCC">people Dave just</font><font color="#E5E5E5"> got his G wept</font>

45
00:02:32,600 --> 00:02:38,359
<font color="#E5E5E5">yesterday said it was a really hard test</font>

46
00:02:34,880 --> 00:02:40,060
<font color="#E5E5E5">so congrats to Dave and over on the</font><font color="#CCCCCC"> left</font>

47
00:02:38,360 --> 00:02:41,780
<font color="#CCCCCC">took</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> motorcycle</font><font color="#E5E5E5"> trip in California</font>

48
00:02:40,060 --> 00:02:44,420
<font color="#CCCCCC">is</font><font color="#E5E5E5"> pretty cool</font>

49
00:02:41,780 --> 00:02:46,910
that is actually south of Monterey<font color="#E5E5E5"> on</font>

50
00:02:44,420 --> 00:02:48,739
<font color="#CCCCCC">Highway</font><font color="#E5E5E5"> one if any you have</font><font color="#CCCCCC"> a chance to</font>

51
00:02:46,910 --> 00:02:52,280
do that<font color="#E5E5E5"> I highly</font><font color="#CCCCCC"> recommend you</font><font color="#E5E5E5"> taking</font>

52
00:02:48,740 --> 00:02:55,190
that<font color="#E5E5E5"> in and this on the right is the</font>

53
00:02:52,280 --> 00:02:59,030
result<font color="#E5E5E5"> of a heinous</font><font color="#CCCCCC"> Prive esque</font><font color="#E5E5E5"> for a</font>

54
00:02:55,190 --> 00:03:02,180
<font color="#CCCCCC">Linux executable compiled with NX</font>

55
00:02:59,030 --> 00:03:10,070
protection that required<font color="#E5E5E5"> return-oriented</font>

56
00:03:02,180 --> 00:03:13,690
programming<font color="#E5E5E5"> to exploit statement of</font>

57
00:03:10,070 --> 00:03:15,859
<font color="#E5E5E5">humility of course I'm just like you</font><font color="#CCCCCC"> I</font>

58
00:03:13,690 --> 00:03:19,880
<font color="#E5E5E5">am NOT an expert in what I'm about to</font>

59
00:03:15,860 --> 00:03:22,160
<font color="#E5E5E5">show you some of you will are</font><font color="#CCCCCC"> the one</font>

60
00:03:19,880 --> 00:03:24,410
about<font color="#E5E5E5"> to show you is really not kung fu</font>

61
00:03:22,160 --> 00:03:28,310
it's just very<font color="#E5E5E5"> basic stuff and just glad</font>

62
00:03:24,410 --> 00:03:33,310
to<font color="#E5E5E5"> be here guys so here's what I'm going</font>

63
00:03:28,310 --> 00:03:33,310
<font color="#E5E5E5">to show you</font><font color="#CCCCCC"> two long do not read</font>

64
00:03:34,370 --> 00:03:42,030
<font color="#E5E5E5">okay so one time at band camp</font><font color="#CCCCCC"> I was</font>

65
00:03:38,580 --> 00:03:44,340
going<font color="#E5E5E5"> through the OSCE course</font><font color="#CCCCCC"> that</font>

66
00:03:42,030 --> 00:03:47,340
offset puts on and I was taking the

67
00:03:44,340 --> 00:03:50,880
crack<font color="#E5E5E5"> the perimeter course</font><font color="#CCCCCC"> I finished</font>

68
00:03:47,340 --> 00:03:54,300
the zero day unit finished<font color="#E5E5E5"> the lesson</font>

69
00:03:50,880 --> 00:03:56,280
<font color="#CCCCCC">about fuzzing fuzzing student using a</font>

70
00:03:54,300 --> 00:03:59,370
tool called spike<font color="#CCCCCC"> anything you've ever</font>

71
00:03:56,280 --> 00:04:02,910
<font color="#CCCCCC">used that</font><font color="#E5E5E5"> it's resident in</font><font color="#CCCCCC"> Kali Linux</font>

72
00:03:59,370 --> 00:04:05,360
for free not well documented<font color="#E5E5E5"> not a lot</font>

73
00:04:02,910 --> 00:04:08,370
of training<font color="#E5E5E5"> material through it</font>

74
00:04:05,360 --> 00:04:10,950
<font color="#E5E5E5">successfully fuzz the lab</font><font color="#CCCCCC"> machines using</font>

75
00:04:08,370 --> 00:04:14,549
<font color="#E5E5E5">spike and I wanted to do an</font><font color="#CCCCCC"> op test to</font>

76
00:04:10,950 --> 00:04:19,380
see if<font color="#E5E5E5"> this was does this stuff work</font><font color="#CCCCCC"> or</font>

77
00:04:14,549 --> 00:04:24,960
is this just<font color="#CCCCCC"> latvia s-- so i went here</font>

78
00:04:19,380 --> 00:04:28,050
and<font color="#CCCCCC"> found this and i liked it because it</font>

79
00:04:24,960 --> 00:04:30,930
<font color="#E5E5E5">was a web-based</font><font color="#CCCCCC"> file-sharing available</font>

80
00:04:28,050 --> 00:04:33,660
for free with the actual neural

81
00:04:30,930 --> 00:04:39,479
application available for download<font color="#CCCCCC"> and</font>

82
00:04:33,660 --> 00:04:43,669
<font color="#E5E5E5">so I downloaded the app and set up</font><font color="#CCCCCC"> my</font>

83
00:04:39,479 --> 00:04:46,669
target<font color="#E5E5E5"> VM XP was available it was there</font>

84
00:04:43,669 --> 00:04:46,669
and

85
00:04:50,279 --> 00:04:56,849
set up the<font color="#CCCCCC"> app in my Windows XP machine</font>

86
00:04:54,379 --> 00:05:04,309
<font color="#E5E5E5">got it working</font><font color="#CCCCCC"> properly and then browse</font>

87
00:04:56,849 --> 00:05:07,919
to<font color="#CCCCCC"> it</font><font color="#E5E5E5"> in my</font><font color="#CCCCCC"> Cali chose</font><font color="#E5E5E5"> a guest session</font>

88
00:05:04,309 --> 00:05:12,449
chose one<font color="#CCCCCC"> of those links</font><font color="#E5E5E5"> and then I</font>

89
00:05:07,919 --> 00:05:16,529
examined<font color="#E5E5E5"> it in Wireshark chose that</font>

90
00:05:12,449 --> 00:05:19,409
<font color="#E5E5E5">guess get request and the get request</font>

91
00:05:16,529 --> 00:05:23,610
<font color="#E5E5E5">looked like this and this is what I</font>

92
00:05:19,409 --> 00:05:30,839
would<font color="#E5E5E5"> model in</font><font color="#CCCCCC"> spike and so when I was</font>

93
00:05:23,610 --> 00:05:34,019
done<font color="#E5E5E5"> it looked</font><font color="#CCCCCC"> like this you can see</font>

94
00:05:30,839 --> 00:05:37,289
<font color="#E5E5E5">that there are eight or nine variables</font>

95
00:05:34,019 --> 00:05:40,379
there<font color="#E5E5E5"> and based on</font><font color="#CCCCCC"> my research for</font>

96
00:05:37,289 --> 00:05:42,149
exploit<font color="#CCCCCC"> DB those two that are</font><font color="#E5E5E5"> in red</font>

97
00:05:40,379 --> 00:05:45,089
brackets were known to be vulnerable<font color="#CCCCCC"> so</font>

98
00:05:42,149 --> 00:05:48,449
if I was fuzzing correctly what would

99
00:05:45,089 --> 00:05:50,699
<font color="#E5E5E5">happen to the server it should go down</font>

100
00:05:48,449 --> 00:05:54,799
if I'm fuzzing correctly<font color="#E5E5E5"> it should go</font>

101
00:05:50,699 --> 00:05:54,799
<font color="#E5E5E5">down when I fuzz those two variables</font><font color="#CCCCCC"> so</font>

102
00:05:56,539 --> 00:06:08,099
so I began to fuzz<font color="#E5E5E5"> and I was glad</font><font color="#CCCCCC"> to see</font>

103
00:06:05,219 --> 00:06:09,269
<font color="#E5E5E5">that the first variable crashed as I was</font>

104
00:06:08,099 --> 00:06:11,369
hoping<font color="#E5E5E5"> it</font><font color="#CCCCCC"> would if I was fuzzing</font>

105
00:06:09,269 --> 00:06:12,119
correctly so it's like<font color="#CCCCCC"> wow this</font><font color="#E5E5E5"> stuff</font>

106
00:06:11,369 --> 00:06:14,909
<font color="#E5E5E5">really works</font>

107
00:06:12,119 --> 00:06:18,599
I continued fuzzing each variable in

108
00:06:14,909 --> 00:06:22,529
succession<font color="#E5E5E5"> and the other ones did not</font>

109
00:06:18,599 --> 00:06:25,349
fuzz till I got<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the eight variable</font>

110
00:06:22,529 --> 00:06:28,319
<font color="#E5E5E5">the second to last</font><font color="#CCCCCC"> one and it crashed as</font>

111
00:06:25,349 --> 00:06:30,539
success<font color="#CCCCCC"> and so my learning objectives</font>

112
00:06:28,319 --> 00:06:37,529
were complete for the day<font color="#E5E5E5"> and as I was</font>

113
00:06:30,539 --> 00:06:38,909
putting things<font color="#E5E5E5"> away the last variable so</font>

114
00:06:37,529 --> 00:06:42,659
this happened

115
00:06:38,910 --> 00:06:44,310
which surprised me<font color="#E5E5E5"> and interested me</font><font color="#CCCCCC"> so</font>

116
00:06:42,660 --> 00:06:45,720
I did some research<font color="#CCCCCC"> and exploit</font><font color="#E5E5E5"> DB to</font>

117
00:06:44,310 --> 00:06:47,460
see if anybody had reported this

118
00:06:45,720 --> 00:06:49,500
particular<font color="#E5E5E5"> parameter the password</font>

119
00:06:47,460 --> 00:06:50,039
parameter as vulnerable<font color="#CCCCCC"> I didn't see</font>

120
00:06:49,500 --> 00:06:55,230
anything

121
00:06:50,040 --> 00:06:56,790
so I began a normal buffer overflow

122
00:06:55,230 --> 00:07:00,530
investigation<font color="#E5E5E5"> that a lot of</font><font color="#CCCCCC"> you have</font>

123
00:06:56,790 --> 00:07:03,390
done<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> the next thing</font><font color="#CCCCCC"> I did was I</font>

124
00:07:00,530 --> 00:07:10,739
caught the crash in the binary debugger

125
00:07:03,390 --> 00:07:13,919
<font color="#CCCCCC">and I noticed that the the top red</font>

126
00:07:10,740 --> 00:07:15,630
bracketed box there was the actual

127
00:07:13,920 --> 00:07:20,100
string that<font color="#E5E5E5"> was sent to cause the crash</font>

128
00:07:15,630 --> 00:07:22,800
<font color="#E5E5E5">some punctuation and a lot of a's and ii</font>

129
00:07:20,100 --> 00:07:25,920
read bracketed box<font color="#E5E5E5"> just confirms the</font>

130
00:07:22,800 --> 00:07:30,000
crash<font color="#E5E5E5"> notice there is no EIP</font><font color="#CCCCCC"> overwrite</font>

131
00:07:25,920 --> 00:07:32,580
<font color="#E5E5E5">at this point but notice that the input</font>

132
00:07:30,000 --> 00:07:34,890
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I sent is three positions down in</font>

133
00:07:32,580 --> 00:07:37,229
the stack<font color="#E5E5E5"> and when you go through the OS</font>

134
00:07:34,890 --> 00:07:38,849
<font color="#CCCCCC">cracked a perimeter of course that is</font>

135
00:07:37,230 --> 00:07:41,730
one of the classic presentations for<font color="#E5E5E5"> a</font>

136
00:07:38,850 --> 00:07:47,280
structured exception<font color="#E5E5E5"> handler buffer</font>

137
00:07:41,730 --> 00:07:52,620
overflow<font color="#E5E5E5"> so what I did was I checked the</font>

138
00:07:47,280 --> 00:07:54,299
<font color="#CCCCCC">SH chain and saw to my delight</font><font color="#E5E5E5"> that I</font>

139
00:07:52,620 --> 00:07:57,810
had overwritten the<font color="#E5E5E5"> structured exception</font>

140
00:07:54,300 --> 00:08:00,600
handling with my<font color="#CCCCCC"> A's</font><font color="#E5E5E5"> which when you pass</font>

141
00:07:57,810 --> 00:08:03,960
<font color="#E5E5E5">that exception to the binary debugger</font>

142
00:08:00,600 --> 00:08:07,430
oh here's I have cheesy builds in this

143
00:08:03,960 --> 00:08:09,810
thing<font color="#E5E5E5"> so just bear with me</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> this thing</font>

144
00:08:07,430 --> 00:08:12,090
<font color="#E5E5E5">over out the EIP and that's good news</font>

145
00:08:09,810 --> 00:08:13,830
because you<font color="#E5E5E5"> now can get at</font><font color="#CCCCCC"> least a</font>

146
00:08:12,090 --> 00:08:18,780
denial<font color="#E5E5E5"> of service attack from a remote</font>

147
00:08:13,830 --> 00:08:21,870
and so what's the<font color="#E5E5E5"> next question okay</font><font color="#CCCCCC"> I</font>

148
00:08:18,780 --> 00:08:24,960
got a denial of<font color="#E5E5E5"> service</font><font color="#CCCCCC"> is it</font>

149
00:08:21,870 --> 00:08:28,370
exploitable<font color="#E5E5E5"> right so I did the standard</font>

150
00:08:24,960 --> 00:08:28,370
<font color="#CCCCCC">work up</font><font color="#E5E5E5"> for that</font>

151
00:08:29,990 --> 00:08:36,190
<font color="#CCCCCC">I noticed that the top of the stack was</font>

152
00:08:32,929 --> 00:08:36,189
<font color="#E5E5E5">the</font><font color="#CCCCCC"> input that</font><font color="#E5E5E5"> I control</font>

153
00:08:42,169 --> 00:08:47,160
so the next thing I<font color="#CCCCCC"> did was</font><font color="#E5E5E5"> try to</font>

154
00:08:44,520 --> 00:08:49,380
<font color="#CCCCCC">replicate the crash</font><font color="#E5E5E5"> with a script and</font>

155
00:08:47,160 --> 00:08:53,850
<font color="#E5E5E5">you can see from here this is your</font>

156
00:08:49,380 --> 00:08:55,770
classic<font color="#E5E5E5"> Python remote script you'll</font>

157
00:08:53,850 --> 00:08:58,980
notice the environment you'll notice the

158
00:08:55,770 --> 00:09:01,290
the host variable set setting the crash

159
00:08:58,980 --> 00:09:04,380
variable<font color="#CCCCCC"> to punctuation and</font><font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> a's</font>

160
00:09:01,290 --> 00:09:07,469
<font color="#E5E5E5">and then below that is just how a get</font>

161
00:09:04,380 --> 00:09:09,960
request looks<font color="#E5E5E5"> in python and then below i</font>

162
00:09:07,470 --> 00:09:11,610
put some<font color="#E5E5E5"> tcp connection type things with</font>

163
00:09:09,960 --> 00:09:14,910
some messages to me that<font color="#CCCCCC"> it sent and</font>

164
00:09:11,610 --> 00:09:19,430
connected properly<font color="#CCCCCC"> and so that i tested</font>

165
00:09:14,910 --> 00:09:23,430
<font color="#CCCCCC">that and</font><font color="#E5E5E5"> i got the same results and so</font>

166
00:09:19,430 --> 00:09:24,569
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> now we're in business</font><font color="#CCCCCC"> now we're</font>

167
00:09:23,430 --> 00:09:25,800
in business<font color="#CCCCCC"> because now we have the</font>

168
00:09:24,570 --> 00:09:26,970
<font color="#E5E5E5">means to experiment we now have</font>

169
00:09:25,800 --> 00:09:32,479
something<font color="#E5E5E5"> that works and we can tweak</font>

170
00:09:26,970 --> 00:09:34,920
<font color="#CCCCCC">and experimental</font><font color="#E5E5E5"> and do it repeatedly</font><font color="#CCCCCC"> so</font>

171
00:09:32,480 --> 00:09:36,150
going through<font color="#E5E5E5"> the pattern analysis that</font>

172
00:09:34,920 --> 00:09:37,680
<font color="#E5E5E5">a lot of you have been taught I</font>

173
00:09:36,150 --> 00:09:41,520
<font color="#E5E5E5">determined</font><font color="#CCCCCC"> that the override happened at</font>

174
00:09:37,680 --> 00:09:44,449
57<font color="#E5E5E5"> and so I crafted my string with 57</font>

175
00:09:41,520 --> 00:09:47,010
<font color="#E5E5E5">A's</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> B's and then some other things</font>

176
00:09:44,450 --> 00:09:49,020
sent it again<font color="#CCCCCC"> and saw</font><font color="#E5E5E5"> that I</font><font color="#CCCCCC"> had over</font>

177
00:09:47,010 --> 00:09:51,240
overwritten<font color="#E5E5E5"> the structured exception</font>

178
00:09:49,020 --> 00:09:54,650
<font color="#E5E5E5">handler and therefore the EIP with four</font>

179
00:09:51,240 --> 00:09:54,650
B's meaning I<font color="#CCCCCC"> own the EIP</font>

180
00:09:55,880 --> 00:10:00,770
the next thing I did<font color="#CCCCCC"> although this was</font>

181
00:09:58,050 --> 00:10:03,390
<font color="#E5E5E5">not required for</font><font color="#CCCCCC"> a Windows XP machine</font><font color="#E5E5E5"> I</font>

182
00:10:00,770 --> 00:10:05,760
wanted<font color="#E5E5E5"> to find out which of the DLL is</font>

183
00:10:03,390 --> 00:10:08,340
associated<font color="#CCCCCC"> with the app and the</font>

184
00:10:05,760 --> 00:10:12,260
libraries associated<font color="#CCCCCC"> with it had safe</font>

185
00:10:08,340 --> 00:10:15,780
<font color="#CCCCCC">seh protection and the ones in red</font>

186
00:10:12,260 --> 00:10:17,640
associated<font color="#E5E5E5"> with the app itself do not so</font>

187
00:10:15,780 --> 00:10:23,699
I would choose<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of those dll's for my</font>

188
00:10:17,640 --> 00:10:29,790
next<font color="#E5E5E5"> pop code so I chose the image load</font>

189
00:10:23,700 --> 00:10:32,550
DLL<font color="#E5E5E5"> and began to search it for a pop pop</font>

190
00:10:29,790 --> 00:10:38,550
ret sequence which is<font color="#CCCCCC"> what you do for a</font>

191
00:10:32,550 --> 00:10:42,060
structured<font color="#CCCCCC"> exception</font><font color="#E5E5E5"> handler and found</font>

192
00:10:38,550 --> 00:10:44,790
one that<font color="#E5E5E5"> I thought would work because it</font>

193
00:10:42,060 --> 00:10:46,680
did not<font color="#E5E5E5"> have</font><font color="#CCCCCC"> any no</font><font color="#E5E5E5"> bytes in it and that</font>

194
00:10:44,790 --> 00:10:49,490
<font color="#E5E5E5">is the one that I chose</font><font color="#CCCCCC"> for my return</font>

195
00:10:46,680 --> 00:10:49,489
<font color="#CCCCCC">address in effect</font>

196
00:10:51,560 --> 00:10:58,880
modified my string with the return

197
00:10:54,150 --> 00:11:02,280
address where the bees used to be and

198
00:10:58,880 --> 00:11:05,010
directed execution in my binary debugger

199
00:11:02,280 --> 00:11:06,480
<font color="#CCCCCC">set up a breakpoint</font><font color="#E5E5E5"> sent it in execution</font>

200
00:11:05,010 --> 00:11:11,130
stopped at<font color="#E5E5E5"> that beginning of that pop</font>

201
00:11:06,480 --> 00:11:12,330
pop<font color="#CCCCCC"> bread and cheesy</font><font color="#E5E5E5"> but that means I</font>

202
00:11:11,130 --> 00:11:16,130
now<font color="#CCCCCC"> control the execution of this</font>

203
00:11:12,330 --> 00:11:16,130
program<font color="#CCCCCC"> so now it's getting exciting</font>

204
00:11:20,860 --> 00:11:26,770
so I stepped through<font color="#E5E5E5"> the pop pop and the</font>

205
00:11:24,550 --> 00:11:28,150
red<font color="#E5E5E5"> remember when that input I control</font>

206
00:11:26,770 --> 00:11:31,150
was in the<font color="#E5E5E5"> third</font><font color="#CCCCCC"> position of</font><font color="#E5E5E5"> the stack</font>

207
00:11:28,150 --> 00:11:33,730
<font color="#CCCCCC">so whenever you do a pop it releases the</font>

208
00:11:31,150 --> 00:11:35,500
top address of the stack<font color="#E5E5E5"> and the second</font>

209
00:11:33,730 --> 00:11:38,410
pop releases the second address on the

210
00:11:35,500 --> 00:11:40,510
stack<font color="#CCCCCC"> and there at the</font><font color="#E5E5E5"> return when a</font>

211
00:11:38,410 --> 00:11:42,459
processes of the return<font color="#E5E5E5"> it's going to</font>

212
00:11:40,510 --> 00:11:46,090
direct execution<font color="#CCCCCC"> to whatever's at the</font>

213
00:11:42,460 --> 00:11:52,350
top of the stack<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so what is at the</font>

214
00:11:46,090 --> 00:11:55,740
<font color="#E5E5E5">top of the stack</font><font color="#CCCCCC"> I examined it</font><font color="#E5E5E5"> and</font>

215
00:11:52,350 --> 00:11:58,870
notice that it<font color="#E5E5E5"> was last four of my A's</font>

216
00:11:55,740 --> 00:12:00,340
<font color="#E5E5E5">the last four of my ace and the to the</font>

217
00:11:58,870 --> 00:12:01,840
<font color="#CCCCCC">next to that is the</font><font color="#E5E5E5"> return address that</font>

218
00:12:00,340 --> 00:12:05,110
<font color="#E5E5E5">I did previously for the beginning of</font>

219
00:12:01,840 --> 00:12:08,200
<font color="#CCCCCC">the</font><font color="#E5E5E5"> pop pop ret sequence and the rest is</font>

220
00:12:05,110 --> 00:12:10,090
<font color="#E5E5E5">input that I control so it's presenting</font>

221
00:12:08,200 --> 00:12:14,770
itself as<font color="#E5E5E5"> a classic stack based buffer</font>

222
00:12:10,090 --> 00:12:16,450
overflow at this point check to see I

223
00:12:14,770 --> 00:12:18,640
had at least<font color="#CCCCCC"> about 400 bytes for</font>

224
00:12:16,450 --> 00:12:26,170
shellcode most shellcodes about that<font color="#E5E5E5"> and</font>

225
00:12:18,640 --> 00:12:28,720
I did<font color="#E5E5E5"> it was clean</font><font color="#CCCCCC"> so in the last four</font>

226
00:12:26,170 --> 00:12:31,780
positions of the of the 57<font color="#E5E5E5"> A's I chose</font>

227
00:12:28,720 --> 00:12:35,140
opcode that would execute<font color="#E5E5E5"> a</font><font color="#CCCCCC"> forward</font>

228
00:12:31,780 --> 00:12:37,750
relative jump of<font color="#E5E5E5"> 16 bytes and that's</font>

229
00:12:35,140 --> 00:12:41,980
just what I started with modified my

230
00:12:37,750 --> 00:12:46,210
exploit with it and sent it<font color="#E5E5E5"> and saw this</font>

231
00:12:41,980 --> 00:12:48,250
is where that<font color="#CCCCCC"> is where it would</font><font color="#E5E5E5"> DirectX</font>

232
00:12:46,210 --> 00:12:54,460
and choose so<font color="#E5E5E5"> that blue line there is</font>

233
00:12:48,250 --> 00:12:56,440
the<font color="#E5E5E5"> notional position of my shellcode so</font>

234
00:12:54,460 --> 00:13:00,310
I created<font color="#E5E5E5"> shellcode the usual way that</font><font color="#CCCCCC"> a</font>

235
00:12:56,440 --> 00:13:05,020
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> us use i used ms</font><font color="#CCCCCC"> Venom</font><font color="#E5E5E5"> windows</font>

236
00:13:00,310 --> 00:13:08,020
reverse shell<font color="#CCCCCC"> localhost tacking kali</font>

237
00:13:05,020 --> 00:13:10,569
<font color="#CCCCCC">linux machine</font><font color="#E5E5E5"> random port that I use</font>

238
00:13:08,020 --> 00:13:14,620
chose the Python format for easy<font color="#E5E5E5"> cutting</font>

239
00:13:10,570 --> 00:13:17,970
paste into my exploit<font color="#E5E5E5"> and I also ruled</font>

240
00:13:14,620 --> 00:13:21,540
out null<font color="#E5E5E5"> bytes as part of my string</font><font color="#CCCCCC"> and</font>

241
00:13:17,970 --> 00:13:21,540
<font color="#CCCCCC">it looked</font><font color="#E5E5E5"> like this</font>

242
00:13:22,290 --> 00:13:27,760
and I pasted it into my exploit<font color="#E5E5E5"> and when</font>

243
00:13:25,750 --> 00:13:31,180
I was done it looked like this you can

244
00:13:27,760 --> 00:13:32,709
see I have a buffer variable<font color="#CCCCCC"> notice it's</font>

245
00:13:31,180 --> 00:13:35,699
very<font color="#CCCCCC"> much the</font><font color="#E5E5E5"> same</font>

246
00:13:32,709 --> 00:13:39,369
crash variable in the get request part

247
00:13:35,700 --> 00:13:44,260
and so now what do<font color="#CCCCCC"> you do is you test it</font>

248
00:13:39,370 --> 00:13:45,700
right<font color="#E5E5E5"> maybe it'll work so I tested it</font>

249
00:13:44,260 --> 00:13:48,910
<font color="#E5E5E5">and everything worked fine</font><font color="#CCCCCC"> that directed</font>

250
00:13:45,700 --> 00:13:51,220
at execution it executed the<font color="#CCCCCC"> 412</font><font color="#E5E5E5"> forward</font>

251
00:13:48,910 --> 00:13:53,380
relative<font color="#E5E5E5"> jump and jumped to my spot in</font>

252
00:13:51,220 --> 00:13:54,970
<font color="#E5E5E5">shellcode where I inspected in memory to</font>

253
00:13:53,380 --> 00:13:56,890
<font color="#E5E5E5">make sure that it injected cleanly</font><font color="#CCCCCC"> and</font>

254
00:13:54,970 --> 00:13:59,290
then stepped it through each set

255
00:13:56,890 --> 00:14:01,990
watching<font color="#E5E5E5"> the decoding process</font><font color="#CCCCCC"> making</font>

256
00:13:59,290 --> 00:14:04,439
<font color="#E5E5E5">sure that it decoded properly and that</font>

257
00:14:01,990 --> 00:14:08,980
it would execute<font color="#E5E5E5"> and it was</font><font color="#CCCCCC"> very clean</font>

258
00:14:04,440 --> 00:14:11,800
so the next thing I<font color="#CCCCCC"> did is I</font><font color="#E5E5E5"> tested it</font>

259
00:14:08,980 --> 00:14:14,649
<font color="#CCCCCC">so I set up</font><font color="#E5E5E5"> a listener in my Kali Linux</font>

260
00:14:11,800 --> 00:14:18,189
machine<font color="#E5E5E5"> port 235 and then in</font><font color="#CCCCCC"> another</font>

261
00:14:14,649 --> 00:14:20,709
terminal I executed<font color="#CCCCCC"> the exploit</font><font color="#E5E5E5"> got the</font>

262
00:14:18,190 --> 00:14:24,100
<font color="#E5E5E5">normal connecting sending indications</font>

263
00:14:20,709 --> 00:14:29,010
which was good and was rewarded<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a</font>

264
00:14:24,100 --> 00:14:29,010
nice shiny shell

265
00:14:30,759 --> 00:14:39,440
let's see that<font color="#CCCCCC"> again shall we Breaking</font>

266
00:14:35,629 --> 00:14:42,829
Bad<font color="#CCCCCC"> Hank and this was an administrator</font>

267
00:14:39,440 --> 00:14:47,149
level shell which was system<font color="#CCCCCC"> and so okay</font>

268
00:14:42,829 --> 00:14:51,099
<font color="#E5E5E5">success so the next thing</font><font color="#CCCCCC"> I did is I</font>

269
00:14:47,149 --> 00:14:54,829
made<font color="#CCCCCC"> my exploit pretty for off sec</font><font color="#E5E5E5"> and</font>

270
00:14:51,100 --> 00:14:56,949
<font color="#E5E5E5">email this</font><font color="#CCCCCC"> to them very</font><font color="#E5E5E5"> excited heard</font>

271
00:14:54,829 --> 00:15:02,229
<font color="#CCCCCC">nothing</font>

272
00:14:56,949 --> 00:15:04,639
so after about a week I emailed offset

273
00:15:02,230 --> 00:15:06,230
<font color="#CCCCCC">evens disclose this thing and they never</font>

274
00:15:04,639 --> 00:15:14,600
<font color="#E5E5E5">answer but then the next day was on the</font>

275
00:15:06,230 --> 00:15:17,930
board and<font color="#CCCCCC"> there it</font><font color="#E5E5E5"> was interesting</font>

276
00:15:14,600 --> 00:15:20,480
<font color="#E5E5E5">enough a week and a half</font><font color="#CCCCCC"> later someone</font>

277
00:15:17,930 --> 00:15:23,800
else<font color="#E5E5E5"> submitted an exploit for the exact</font>

278
00:15:20,480 --> 00:15:26,569
same parameter defeating Windows<font color="#E5E5E5"> 7 and</font>

279
00:15:23,800 --> 00:15:29,300
defeating<font color="#CCCCCC"> DEP</font><font color="#E5E5E5"> with a return-oriented</font>

280
00:15:26,569 --> 00:15:32,120
programming<font color="#E5E5E5"> exploit and it was pretty</font>

281
00:15:29,300 --> 00:15:36,250
sweet<font color="#E5E5E5"> so the moral</font><font color="#CCCCCC"> of the story is that</font>

282
00:15:32,120 --> 00:15:40,579
there<font color="#E5E5E5"> is always always somebody better</font>

283
00:15:36,250 --> 00:15:44,000
so so<font color="#E5E5E5"> that's what happened and this</font><font color="#CCCCCC"> is</font>

284
00:15:40,579 --> 00:15:46,430
<font color="#E5E5E5">what we talked about and this completes</font>

285
00:15:44,000 --> 00:15:48,970
<font color="#E5E5E5">my portion of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> brief I'm subject to</font>

286
00:15:46,430 --> 00:15:48,969
<font color="#E5E5E5">your questions</font>

287
00:15:51,340 --> 00:16:10,340
well you guys<font color="#E5E5E5"> slept through this sir</font><font color="#CCCCCC"> I</font>

288
00:15:58,810 --> 00:16:14,689
did<font color="#CCCCCC"> the exam requires a stack-based</font>

289
00:16:10,340 --> 00:16:17,090
buffer overflow<font color="#E5E5E5"> proficiency without the</font>

290
00:16:14,690 --> 00:16:20,090
need to know<font color="#E5E5E5"> structured exception</font>

291
00:16:17,090 --> 00:16:21,740
handling<font color="#E5E5E5"> so one level below that is</font>

292
00:16:20,090 --> 00:16:30,170
what's<font color="#E5E5E5"> required for the osep would you</font>

293
00:16:21,740 --> 00:16:31,780
agree<font color="#E5E5E5"> Michael yeah okay</font><font color="#CCCCCC"> okay thank you</font>

294
00:16:30,170 --> 00:16:34,860
everybody

295
00:16:31,780 --> 00:16:34,860
[Applause]

