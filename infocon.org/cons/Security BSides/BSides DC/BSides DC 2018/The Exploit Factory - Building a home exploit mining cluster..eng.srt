1
00:00:00,030 --> 00:00:05,069
besides DC would like to thank all of

2
00:00:02,280 --> 00:00:07,470
our sponsors<font color="#E5E5E5"> and a special thank you to</font>

3
00:00:05,069 --> 00:00:11,670
all<font color="#E5E5E5"> of our speakers</font><font color="#CCCCCC"> volunteers and</font>

4
00:00:07,470 --> 00:00:13,950
organizers for making 2018 a success<font color="#E5E5E5"> my</font>

5
00:00:11,670 --> 00:00:18,240
name is John Dunlap this is a talk

6
00:00:13,950 --> 00:00:21,230
<font color="#CCCCCC">called the exploit</font><font color="#E5E5E5"> Factory</font><font color="#CCCCCC"> it's kind of</font>

7
00:00:18,240 --> 00:00:26,970
<font color="#E5E5E5">about how you can DIY yourself a little</font>

8
00:00:21,230 --> 00:00:28,740
compute cluster<font color="#E5E5E5"> to do some fuzzing to</font>

9
00:00:26,970 --> 00:00:31,169
find some vulnerabilities so you might

10
00:00:28,740 --> 00:00:34,500
make<font color="#CCCCCC"> some exploits</font><font color="#E5E5E5"> this is more for if</font>

11
00:00:31,170 --> 00:00:35,790
you have a hobby of fuzzing<font color="#E5E5E5"> and or maybe</font>

12
00:00:34,500 --> 00:00:37,380
you're<font color="#CCCCCC"> running a small business</font><font color="#E5E5E5"> and</font>

13
00:00:35,790 --> 00:00:38,969
you're<font color="#CCCCCC"> looking to spend a few hundred</font>

14
00:00:37,380 --> 00:00:41,730
<font color="#E5E5E5">dollars a month on having a very</font>

15
00:00:38,969 --> 00:00:46,739
<font color="#CCCCCC">powerful fuzzing</font><font color="#E5E5E5"> ring and as a secondary</font>

16
00:00:41,730 --> 00:00:50,669
concern<font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> about what what kinds</font>

17
00:00:46,739 --> 00:00:52,288
of optimizations that<font color="#E5E5E5"> we could learn</font>

18
00:00:50,670 --> 00:00:56,039
from the<font color="#E5E5E5"> scientific computing world and</font>

19
00:00:52,289 --> 00:00:58,320
apply to<font color="#E5E5E5"> the fuzzing rig that</font><font color="#CCCCCC"> we're kind</font>

20
00:00:56,039 --> 00:00:59,969
<font color="#CCCCCC">of</font><font color="#E5E5E5"> build in order to get some</font><font color="#CCCCCC"> kind of</font>

21
00:00:58,320 --> 00:01:03,420
<font color="#CCCCCC">gain right</font><font color="#E5E5E5"> and instead</font><font color="#CCCCCC"> of just</font><font color="#E5E5E5"> having</font>

22
00:00:59,969 --> 00:01:05,760
<font color="#E5E5E5">the off-the-shelf</font><font color="#CCCCCC"> images or whatnot try</font>

23
00:01:03,420 --> 00:01:08,790
and do something<font color="#E5E5E5"> to our fuzzing</font><font color="#CCCCCC"> setup to</font>

24
00:01:05,760 --> 00:01:10,229
make it run<font color="#CCCCCC"> faster</font><font color="#E5E5E5"> maybe at a cost of</font>

25
00:01:08,790 --> 00:01:13,049
little extra engineering time you know

26
00:01:10,229 --> 00:01:16,740
say we're a home security researcher

27
00:01:13,049 --> 00:01:19,110
like myself<font color="#CCCCCC"> and we want to use some of</font>

28
00:01:16,740 --> 00:01:21,899
our our acumen to<font color="#CCCCCC"> get more return on our</font>

29
00:01:19,110 --> 00:01:27,060
<font color="#E5E5E5">dollar that's what we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font>

30
00:01:21,900 --> 00:01:31,369
<font color="#CCCCCC">about</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> today this is me</font>

31
00:01:27,060 --> 00:01:35,939
<font color="#E5E5E5">John Dunlap</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> hacked like this I find</font>

32
00:01:31,369 --> 00:01:38,250
<font color="#E5E5E5">CVEs</font><font color="#CCCCCC"> I like to do binary exploits I like</font>

33
00:01:35,939 --> 00:01:41,039
to do fuzzing<font color="#E5E5E5"> I like to do reverse</font>

34
00:01:38,250 --> 00:01:43,409
<font color="#E5E5E5">engineering</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I also do a lot of</font><font color="#CCCCCC"> bio a</font>

35
00:01:41,040 --> 00:01:45,869
<font color="#CCCCCC">can't do a lot of I did a talk at</font><font color="#E5E5E5"> Def</font>

36
00:01:43,409 --> 00:01:47,970
<font color="#E5E5E5">Con earlier this year about encrypting</font>

37
00:01:45,869 --> 00:01:49,050
<font color="#CCCCCC">data in living organisms like editing</font>

38
00:01:47,970 --> 00:01:51,539
<font color="#E5E5E5">e.coli back</font>

39
00:01:49,050 --> 00:01:56,729
putting ciphers in them<font color="#E5E5E5"> just</font><font color="#CCCCCC"> pretty cool</font>

40
00:01:51,540 --> 00:01:59,370
stuff<font color="#CCCCCC"> here's my formal about me card if</font>

41
00:01:56,730 --> 00:02:02,250
you're interested with all my personal

42
00:01:59,370 --> 00:02:04,260
details if you<font color="#CCCCCC"> want to get to know me if</font>

43
00:02:02,250 --> 00:02:06,930
<font color="#CCCCCC">you want check</font><font color="#E5E5E5"> out my previous talks</font>

44
00:02:04,260 --> 00:02:08,640
<font color="#E5E5E5">here's some links</font><font color="#CCCCCC"> to that</font><font color="#E5E5E5"> it's all</font><font color="#CCCCCC"> on my</font>

45
00:02:06,930 --> 00:02:11,520
github<font color="#CCCCCC"> if you want to</font><font color="#E5E5E5"> check them out but</font>

46
00:02:08,639 --> 00:02:15,269
you<font color="#CCCCCC"> know DNA encryption</font><font color="#E5E5E5"> machine learning</font>

47
00:02:11,520 --> 00:02:18,420
<font color="#E5E5E5">FPGAs</font><font color="#CCCCCC"> and the history of hacking even</font>

48
00:02:15,270 --> 00:02:21,240
deep deep dives into that 3d printing

49
00:02:18,420 --> 00:02:24,450
security in jump<font color="#CCCCCC"> Orion</font><font color="#E5E5E5"> programming</font>

50
00:02:21,240 --> 00:02:27,900
gadgets for<font color="#E5E5E5"> exploit development so I do</font>

51
00:02:24,450 --> 00:02:30,839
a lot of research<font color="#E5E5E5"> researcher and Esther</font>

52
00:02:27,900 --> 00:02:32,670
<font color="#CCCCCC">reverse engineer and</font><font color="#E5E5E5"> by the way we're</font>

53
00:02:30,840 --> 00:02:35,700
<font color="#E5E5E5">while we're on the</font><font color="#CCCCCC"> topic of talks did</font>

54
00:02:32,670 --> 00:02:37,799
anyone go to<font color="#E5E5E5"> go Def Con this year and I</font>

55
00:02:35,700 --> 00:02:39,000
was covered<font color="#E5E5E5"> in sand for a couple days</font><font color="#CCCCCC"> it</font>

56
00:02:37,800 --> 00:02:41,970
was great<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think it can</font><font color="#E5E5E5"> still taste</font>

57
00:02:39,000 --> 00:02:45,390
<font color="#E5E5E5">that sand this is it took a while to get</font>

58
00:02:41,970 --> 00:02:48,000
<font color="#E5E5E5">out of my teeth so who is this talk</font><font color="#CCCCCC"> it</font>

59
00:02:45,390 --> 00:02:50,730
intended for<font color="#E5E5E5"> as people who like to do</font>

60
00:02:48,000 --> 00:02:51,660
fuzzing<font color="#E5E5E5"> and</font><font color="#CCCCCC"> do it faster I think over</font>

61
00:02:50,730 --> 00:02:54,149
the<font color="#E5E5E5"> last couple years</font>

62
00:02:51,660 --> 00:02:55,859
<font color="#E5E5E5">everyone's discovered the AFL is this</font>

63
00:02:54,150 --> 00:02:58,260
magic<font color="#E5E5E5"> beast that finds bugs but</font>

64
00:02:55,860 --> 00:03:00,959
sometimes it's slow<font color="#E5E5E5"> some platforms it's</font>

65
00:02:58,260 --> 00:03:06,359
extra slow<font color="#E5E5E5"> for some kinds of software</font>

66
00:03:00,959 --> 00:03:10,110
it's completely<font color="#CCCCCC"> non viable and this is</font>

67
00:03:06,360 --> 00:03:11,940
for people<font color="#CCCCCC"> interested in wanting to get</font>

68
00:03:10,110 --> 00:03:14,130
more out of their fuzzing sessions for

69
00:03:11,940 --> 00:03:15,540
the money they're putting into<font color="#CCCCCC"> it I'm</font>

70
00:03:14,130 --> 00:03:18,329
one<font color="#E5E5E5"> of those guys who</font><font color="#CCCCCC"> has to take</font>

71
00:03:15,540 --> 00:03:19,470
<font color="#E5E5E5">everything way too far and as soon as I</font>

72
00:03:18,330 --> 00:03:22,350
started<font color="#CCCCCC"> doing fuzzing stuff I thought</font>

73
00:03:19,470 --> 00:03:25,140
how can<font color="#E5E5E5"> I</font><font color="#CCCCCC"> make AB a wealth</font><font color="#E5E5E5"> buster how</font>

74
00:03:22,350 --> 00:03:29,220
can I put way too much compute<font color="#E5E5E5"> power at</font>

75
00:03:25,140 --> 00:03:32,160
this how<font color="#E5E5E5"> can</font><font color="#CCCCCC"> I over engineer the the</font>

76
00:03:29,220 --> 00:03:36,600
daylights out of<font color="#E5E5E5"> it and that's kind</font><font color="#CCCCCC"> of</font>

77
00:03:32,160 --> 00:03:38,700
what I<font color="#CCCCCC"> did and interesting experiment</font>

78
00:03:36,600 --> 00:03:44,489
way of an<font color="#CCCCCC"> explore</font><font color="#E5E5E5"> where you can get a</font>

79
00:03:38,700 --> 00:03:46,738
<font color="#E5E5E5">little more bang</font><font color="#CCCCCC"> for your buck</font><font color="#E5E5E5"> now here</font>

80
00:03:44,489 --> 00:03:50,790
are my motivations for<font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> I was</font>

81
00:03:46,739 --> 00:03:52,350
limited<font color="#E5E5E5"> in my fuzzing</font><font color="#CCCCCC"> setup I wanted a</font>

82
00:03:50,790 --> 00:03:55,140
semi automated system I want<font color="#CCCCCC"> to be able</font>

83
00:03:52,350 --> 00:03:57,290
<font color="#E5E5E5">to throw jobs like a job queue</font><font color="#CCCCCC"> AFL</font>

84
00:03:55,140 --> 00:03:59,299
<font color="#E5E5E5">because if you've ever used fuzzy</font>

85
00:03:57,290 --> 00:04:03,470
there's a<font color="#CCCCCC"> set up</font><font color="#E5E5E5"> process that's kind</font><font color="#CCCCCC"> of</font>

86
00:03:59,300 --> 00:04:10,849
time intensive<font color="#E5E5E5"> you have to find a way to</font>

87
00:04:03,470 --> 00:04:12,650
<font color="#E5E5E5">throw stuff at it and I want something</font>

88
00:04:10,849 --> 00:04:16,909
<font color="#CCCCCC">that could be replicated</font><font color="#E5E5E5"> basically</font>

89
00:04:12,650 --> 00:04:19,340
without<font color="#E5E5E5"> a lot of overhead I ran into a</font>

90
00:04:16,910 --> 00:04:22,130
lot<font color="#CCCCCC"> problems doing 3d praying research</font>

91
00:04:19,339 --> 00:04:24,919
<font color="#CCCCCC">there's this whole</font><font color="#E5E5E5"> ecosystem and the 3d</font>

92
00:04:22,130 --> 00:04:26,540
printer world of slicers which we've

93
00:04:24,919 --> 00:04:31,090
never used a<font color="#E5E5E5"> 3d printer what a slicer is</font>

94
00:04:26,540 --> 00:04:35,389
is kind of<font color="#E5E5E5"> like a compiler</font><font color="#CCCCCC"> that turns a</font>

95
00:04:31,090 --> 00:04:38,330
3d model<font color="#CCCCCC"> into a set</font><font color="#E5E5E5"> of instructions that</font>

96
00:04:35,389 --> 00:04:40,370
<font color="#E5E5E5">the machine</font><font color="#CCCCCC"> can understand</font><font color="#E5E5E5"> it's kind of</font>

97
00:04:38,330 --> 00:04:44,300
like the same stuff<font color="#CCCCCC"> that CNC machines</font>

98
00:04:40,370 --> 00:04:45,680
use is called<font color="#E5E5E5"> feed code and I found that</font>

99
00:04:44,300 --> 00:04:47,060
there<font color="#CCCCCC"> was a lot of vulnerabilities in</font>

100
00:04:45,680 --> 00:04:49,639
the<font color="#E5E5E5"> software but the software ran so</font>

101
00:04:47,060 --> 00:04:52,010
slow<font color="#E5E5E5"> that it was a little immune to</font>

102
00:04:49,639 --> 00:04:56,690
fuzzing<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> wasn't so helpful</font><font color="#CCCCCC"> an</font>

103
00:04:52,010 --> 00:04:58,580
automation stage<font color="#E5E5E5"> so in this talk we're</font>

104
00:04:56,690 --> 00:05:00,650
<font color="#E5E5E5">gonna explore techniques for porting</font>

105
00:04:58,580 --> 00:05:03,409
<font color="#E5E5E5">high-performance scientific computing</font>

106
00:05:00,650 --> 00:05:05,870
optimizations for<font color="#CCCCCC"> a small</font><font color="#E5E5E5"> business or</font>

107
00:05:03,410 --> 00:05:07,550
individual fuzzing<font color="#CCCCCC"> rate we're gonna</font>

108
00:05:05,870 --> 00:05:10,370
<font color="#E5E5E5">evaluate</font><font color="#CCCCCC"> each of</font><font color="#E5E5E5"> the standard techniques</font>

109
00:05:07,550 --> 00:05:13,150
<font color="#CCCCCC">that people</font><font color="#E5E5E5"> would learn like a</font>

110
00:05:10,370 --> 00:05:17,210
scientific computing accelerated class

111
00:05:13,150 --> 00:05:20,239
<font color="#E5E5E5">and see if they offer any benefit for</font>

112
00:05:17,210 --> 00:05:22,219
<font color="#E5E5E5">our purposes whatsoever and see if we</font>

113
00:05:20,240 --> 00:05:24,440
can't get more crashes per hour of

114
00:05:22,220 --> 00:05:26,780
compute time<font color="#E5E5E5"> and see if we can't get</font>

115
00:05:24,440 --> 00:05:28,729
better<font color="#E5E5E5"> crashes and see if we can't have</font>

116
00:05:26,780 --> 00:05:34,900
some better automation optimization

117
00:05:28,729 --> 00:05:34,900
which limits the pain of setting this up

118
00:05:35,680 --> 00:05:39,169
now we're going<font color="#E5E5E5"> to define</font><font color="#CCCCCC"> some</font>

119
00:05:37,370 --> 00:05:41,389
<font color="#E5E5E5">trade-offs everything in engineering is</font>

120
00:05:39,169 --> 00:05:42,889
a trade-off<font color="#CCCCCC"> right we can't have</font>

121
00:05:41,389 --> 00:05:45,139
<font color="#E5E5E5">everything and the</font><font color="#CCCCCC"> way that a lot of</font>

122
00:05:42,889 --> 00:05:48,650
people or companies<font color="#E5E5E5"> would approach a</font>

123
00:05:45,139 --> 00:05:51,470
situation<font color="#E5E5E5"> just throw throw power at it</font>

124
00:05:48,650 --> 00:05:53,840
<font color="#E5E5E5">right why why prematurely optimize when</font>

125
00:05:51,470 --> 00:05:54,950
you can just<font color="#E5E5E5"> throw a couple more CPU</font>

126
00:05:53,840 --> 00:05:58,219
nodes at it

127
00:05:54,950 --> 00:05:59,840
and for me<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> not made out of</font><font color="#E5E5E5"> money I'm</font>

128
00:05:58,220 --> 00:06:01,610
willing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> spend an inordinate</font><font color="#CCCCCC"> amount of</font>

129
00:05:59,840 --> 00:06:04,099
money on this for some<font color="#CCCCCC"> reason but</font>

130
00:06:01,610 --> 00:06:06,140
because<font color="#CCCCCC"> I'm fascinated with cluster</font>

131
00:06:04,100 --> 00:06:10,670
computing and optimizations and

132
00:06:06,140 --> 00:06:12,469
optimizing compilers and<font color="#E5E5E5"> stuff but what</font>

133
00:06:10,670 --> 00:06:14,030
we're gonna<font color="#E5E5E5"> try and do is not spend all</font>

134
00:06:12,470 --> 00:06:17,870
the money and what we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> try and</font>

135
00:06:14,030 --> 00:06:23,770
do<font color="#E5E5E5"> is take the money we have and trade</font>

136
00:06:17,870 --> 00:06:23,770
engineering time<font color="#CCCCCC"> to to get the profit</font>

137
00:06:24,220 --> 00:06:30,490
all right here's some some previous

138
00:06:28,010 --> 00:06:32,270
<font color="#CCCCCC">fuzzers actually just for times sake</font><font color="#E5E5E5"> and</font>

139
00:06:30,490 --> 00:06:34,790
<font color="#E5E5E5">complexity sake I'm not</font><font color="#CCCCCC"> gonna get</font><font color="#E5E5E5"> too</font>

140
00:06:32,270 --> 00:06:36,020
deep into these hopefully there'll be a

141
00:06:34,790 --> 00:06:38,000
version of this<font color="#E5E5E5"> talk someday where I'd</font>

142
00:06:36,020 --> 00:06:42,650
benchmark my my system against<font color="#E5E5E5"> others</font>

143
00:06:38,000 --> 00:06:44,810
<font color="#CCCCCC">but I didn't</font><font color="#E5E5E5"> and honestly they're</font><font color="#CCCCCC"> not</font>

144
00:06:42,650 --> 00:06:46,130
quite optimal in the<font color="#E5E5E5"> same way that I'm</font>

145
00:06:44,810 --> 00:06:48,680
looking<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do these kind of micro</font>

146
00:06:46,130 --> 00:06:51,680
optimizations are honestly<font color="#E5E5E5"> in a more</font>

147
00:06:48,680 --> 00:06:53,510
widely<font color="#E5E5E5"> applicable system not super</font>

148
00:06:51,680 --> 00:06:56,330
advisable because you're gonna trade a

149
00:06:53,510 --> 00:06:59,090
lot<font color="#CCCCCC"> of engineering time</font><font color="#E5E5E5"> for what you get</font>

150
00:06:56,330 --> 00:07:00,800
but I<font color="#CCCCCC"> like to tinker</font><font color="#E5E5E5"> so this is fun and</font>

151
00:06:59,090 --> 00:07:02,539
I think<font color="#CCCCCC"> a lot of people</font><font color="#E5E5E5"> get something</font>

152
00:07:00,800 --> 00:07:05,780
out of it

153
00:07:02,540 --> 00:07:08,300
so let's before<font color="#CCCCCC"> we get too deep</font><font color="#E5E5E5"> into the</font>

154
00:07:05,780 --> 00:07:10,549
application side of this let's talk

155
00:07:08,300 --> 00:07:14,450
<font color="#E5E5E5">about in</font><font color="#CCCCCC"> general some high performance</font>

156
00:07:10,550 --> 00:07:15,500
computing optimization techniques sort

157
00:07:14,450 --> 00:07:16,940
of<font color="#CCCCCC"> Lee if you were going</font><font color="#E5E5E5"> to take a class</font>

158
00:07:15,500 --> 00:07:18,260
on scientific computing what kind of

159
00:07:16,940 --> 00:07:20,090
techniques would you<font color="#E5E5E5"> learn to optimize</font>

160
00:07:18,260 --> 00:07:21,560
your<font color="#E5E5E5"> C code to make</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> faster we're not</font>

161
00:07:20,090 --> 00:07:23,390
generally talking<font color="#E5E5E5"> about like big</font>

162
00:07:21,560 --> 00:07:25,190
optimizations<font color="#CCCCCC"> for algorithms</font><font color="#E5E5E5"> what we're</font>

163
00:07:23,390 --> 00:07:26,930
talking<font color="#CCCCCC"> about is things like optimizing</font>

164
00:07:25,190 --> 00:07:28,520
for cash

165
00:07:26,930 --> 00:07:30,350
I guess if we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go over this</font>

166
00:07:28,520 --> 00:07:32,060
in<font color="#CCCCCC"> detail and then we're gonna go</font><font color="#E5E5E5"> over</font>

167
00:07:30,350 --> 00:07:34,070
<font color="#E5E5E5">how we can apply those</font><font color="#CCCCCC"> optimizations to</font>

168
00:07:32,060 --> 00:07:37,900
<font color="#E5E5E5">a fuzzing scenario and whether it helps</font>

169
00:07:34,070 --> 00:07:39,950
<font color="#CCCCCC">it</font><font color="#E5E5E5"> all and what scenarios it does help</font>

170
00:07:37,900 --> 00:07:42,260
<font color="#CCCCCC">just keep in mind</font><font color="#E5E5E5"> this comes from an</font>

171
00:07:39,950 --> 00:07:44,729
optimization<font color="#CCCCCC"> kitty I never worked for</font>

172
00:07:42,260 --> 00:07:47,490
Sandia or anyone like that

173
00:07:44,729 --> 00:07:49,620
<font color="#CCCCCC">I just took a couple</font><font color="#E5E5E5"> of Intel classes</font>

174
00:07:47,490 --> 00:07:50,939
<font color="#E5E5E5">bought the Intel optimizing compiler and</font>

175
00:07:49,620 --> 00:07:52,499
learned<font color="#E5E5E5"> everything I</font><font color="#CCCCCC"> could about of why</font>

176
00:07:50,939 --> 00:07:55,559
this<font color="#E5E5E5"> stuff you know</font>

177
00:07:52,499 --> 00:07:58,710
<font color="#CCCCCC">so please</font><font color="#E5E5E5"> enjoy my</font><font color="#CCCCCC"> lead techniques</font><font color="#E5E5E5"> if</font>

178
00:07:55,559 --> 00:08:00,240
you will<font color="#CCCCCC"> also just as a warning</font>

179
00:07:58,710 --> 00:08:02,400
you might hear a lot about<font color="#E5E5E5"> these guys</font>

180
00:08:00,240 --> 00:08:03,779
I'm<font color="#E5E5E5"> not trying to advertise for them</font>

181
00:08:02,400 --> 00:08:05,698
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> just kind of what's out there if</font>

182
00:08:03,779 --> 00:08:10,469
you're<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> to write super fast stuff</font>

183
00:08:05,699 --> 00:08:11,639
it's just<font color="#CCCCCC"> gonna come so let's do a quick</font>

184
00:08:10,469 --> 00:08:13,050
overview<font color="#CCCCCC"> of the categories we're going</font>

185
00:08:11,639 --> 00:08:15,479
to talk<font color="#CCCCCC"> about in terms of optimizations</font>

186
00:08:13,050 --> 00:08:18,689
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we're going to do on our system</font><font color="#CCCCCC"> so</font>

187
00:08:15,479 --> 00:08:20,580
<font color="#CCCCCC">we might look into applying Simbi</font>

188
00:08:18,689 --> 00:08:22,830
optimizations which is same instruction

189
00:08:20,580 --> 00:08:25,258
multiple data sort of parallelization<font color="#E5E5E5"> of</font>

190
00:08:22,830 --> 00:08:28,620
<font color="#CCCCCC">a sort we might be</font><font color="#E5E5E5"> doing threading</font>

191
00:08:25,259 --> 00:08:32,360
<font color="#CCCCCC">openmp we might be</font><font color="#E5E5E5"> doing optimizations</font>

192
00:08:28,620 --> 00:08:36,479
for<font color="#E5E5E5"> cache various kinds</font><font color="#CCCCCC"> of multi press</font>

193
00:08:32,360 --> 00:08:39,289
processing GPU acceleration<font color="#E5E5E5"> perhaps</font>

194
00:08:36,479 --> 00:08:42,209
explore some<font color="#E5E5E5"> FPGA acceleration and</font>

195
00:08:39,289 --> 00:08:44,490
optimizing compilers<font color="#E5E5E5"> but what we're not</font>

196
00:08:42,208 --> 00:08:46,529
generally<font color="#E5E5E5"> talking about our improvements</font>

197
00:08:44,490 --> 00:08:49,050
to<font color="#CCCCCC"> the algorithms themselves and the</font>

198
00:08:46,529 --> 00:08:51,300
reason<font color="#E5E5E5"> that is is that</font><font color="#CCCCCC"> number one</font>

199
00:08:49,050 --> 00:08:52,709
finding fuzzer that generates better

200
00:08:51,300 --> 00:08:56,040
test<font color="#E5E5E5"> cases isn't the point</font><font color="#CCCCCC"> of this</font>

201
00:08:52,709 --> 00:08:57,689
<font color="#E5E5E5">thought what we're trying to say</font><font color="#CCCCCC"> given</font>

202
00:08:56,040 --> 00:08:59,610
the<font color="#E5E5E5"> test cases we have how</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> we</font>

203
00:08:57,690 --> 00:09:01,050
<font color="#CCCCCC">generate them faster or how can we get</font>

204
00:08:59,610 --> 00:09:04,260
through the program<font color="#E5E5E5"> execution state</font>

205
00:09:01,050 --> 00:09:06,870
faster<font color="#E5E5E5"> so that doesn't</font><font color="#CCCCCC"> necessarily give</font>

206
00:09:04,260 --> 00:09:08,339
us control<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the algorithm we're</font>

207
00:09:06,870 --> 00:09:10,230
using and<font color="#E5E5E5"> improving on that level</font><font color="#CCCCCC"> I</font>

208
00:09:08,339 --> 00:09:12,240
think<font color="#E5E5E5"> everyone's right to</font><font color="#CCCCCC"> point out that</font>

209
00:09:10,230 --> 00:09:14,069
improving the algorithmic complexity is

210
00:09:12,240 --> 00:09:20,279
<font color="#CCCCCC">the best way to do this before</font><font color="#E5E5E5"> micro</font>

211
00:09:14,069 --> 00:09:24,120
optimizing things so let<font color="#CCCCCC"> us move on to</font>

212
00:09:20,279 --> 00:09:25,769
<font color="#E5E5E5">the individual optimizations</font><font color="#CCCCCC"> so I think</font>

213
00:09:24,120 --> 00:09:27,899
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> of people who do see</font><font color="#E5E5E5"> programming</font>

214
00:09:25,769 --> 00:09:29,639
you've heard of<font color="#E5E5E5"> sim</font><font color="#CCCCCC"> D optimizations so I</font>

215
00:09:27,899 --> 00:09:31,740
beg your<font color="#E5E5E5"> pardon</font><font color="#CCCCCC"> I'm going to describe</font><font color="#E5E5E5"> it</font>

216
00:09:29,639 --> 00:09:33,029
a little more detail<font color="#CCCCCC"> that's probably</font>

217
00:09:31,740 --> 00:09:34,920
necessary<font color="#CCCCCC"> for people who are not</font>

218
00:09:33,029 --> 00:09:36,120
<font color="#E5E5E5">familiar with doing this kind of thing</font>

219
00:09:34,920 --> 00:09:40,010
<font color="#E5E5E5">but we're talking about same</font>

220
00:09:36,120 --> 00:09:43,170
<font color="#E5E5E5">instructional</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> data or Intel AMD</font>

221
00:09:40,010 --> 00:09:46,240
style assembly instructions<font color="#E5E5E5"> that</font><font color="#CCCCCC"> allows</font>

222
00:09:43,170 --> 00:09:48,490
<font color="#E5E5E5">to do essentially</font><font color="#CCCCCC"> addition</font>

223
00:09:46,240 --> 00:09:51,970
<font color="#E5E5E5">and multiplication on vectors instead of</font>

224
00:09:48,490 --> 00:09:53,440
scalars<font color="#CCCCCC"> your compiler already does</font>

225
00:09:51,970 --> 00:09:56,649
optimization like this but it's

226
00:09:53,440 --> 00:09:59,220
<font color="#E5E5E5">imperfect it only compilers have</font><font color="#CCCCCC"> to be</font>

227
00:09:56,649 --> 00:10:01,540
<font color="#E5E5E5">conservative in the behavior they can't</font>

228
00:09:59,220 --> 00:10:03,339
they can't<font color="#E5E5E5"> optimize when it's</font>

229
00:10:01,540 --> 00:10:06,089
potentially unsafe they can<font color="#E5E5E5"> only</font>

230
00:10:03,339 --> 00:10:08,200
optimize when<font color="#CCCCCC"> it's provably safe and</font>

231
00:10:06,089 --> 00:10:10,330
that means they leave<font color="#E5E5E5"> out a lot of</font>

232
00:10:08,200 --> 00:10:12,149
<font color="#E5E5E5">opportunities for what we can do and if</font>

233
00:10:10,330 --> 00:10:14,440
we want<font color="#E5E5E5"> to trade our engineering time</font>

234
00:10:12,149 --> 00:10:16,420
for computer time like if we think<font color="#E5E5E5"> we</font>

235
00:10:14,440 --> 00:10:18,610
can<font color="#E5E5E5"> make a good engineering decision to</font>

236
00:10:16,420 --> 00:10:19,360
<font color="#E5E5E5">optimize further and we might save a</font>

237
00:10:18,610 --> 00:10:25,540
<font color="#CCCCCC">good bit of</font><font color="#E5E5E5"> money</font>

238
00:10:19,360 --> 00:10:29,440
where it applies<font color="#CCCCCC"> if this helps you sort</font>

239
00:10:25,540 --> 00:10:30,730
<font color="#E5E5E5">of visualize</font><font color="#CCCCCC"> what what</font><font color="#E5E5E5"> simply is in</font>

240
00:10:29,440 --> 00:10:33,160
terms of<font color="#E5E5E5"> registers you know you might</font>

241
00:10:30,730 --> 00:10:35,230
have we're used<font color="#E5E5E5"> to like 16 32-bit</font>

242
00:10:33,160 --> 00:10:37,630
registers<font color="#E5E5E5"> you might have up to 512 bit</font>

243
00:10:35,230 --> 00:10:40,120
registers<font color="#CCCCCC"> and when we're doing</font><font color="#E5E5E5"> things</font>

244
00:10:37,630 --> 00:10:44,560
like matrix multiplication<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a very</font>

245
00:10:40,120 --> 00:10:48,040
thorough<font color="#CCCCCC"> sim d optimisation might really</font>

246
00:10:44,560 --> 00:10:51,729
give us some<font color="#E5E5E5"> degree of</font><font color="#CCCCCC"> speed-up on the</font>

247
00:10:48,040 --> 00:10:53,949
order<font color="#CCCCCC"> of like</font><font color="#E5E5E5"> 10 or 20%</font><font color="#CCCCCC"> and of course</font>

248
00:10:51,730 --> 00:10:56,140
like C program for<font color="#CCCCCC"> people not answer</font>

249
00:10:53,950 --> 00:10:57,430
like you can't do that the<font color="#E5E5E5"> compiler will</font>

250
00:10:56,140 --> 00:10:58,680
always do it better<font color="#E5E5E5"> and it's just</font><font color="#CCCCCC"> not</font>

251
00:10:57,430 --> 00:11:02,469
<font color="#E5E5E5">true</font>

252
00:10:58,680 --> 00:11:04,390
I'm not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> entertain that like I just</font>

253
00:11:02,470 --> 00:11:08,440
<font color="#E5E5E5">said before it</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> sometimes does it do</font>

254
00:11:04,390 --> 00:11:10,540
it<font color="#CCCCCC"> it</font><font color="#E5E5E5"> has to do it conservatively and we</font>

255
00:11:08,440 --> 00:11:12,010
will find<font color="#CCCCCC"> situations where we can</font><font color="#E5E5E5"> help</font>

256
00:11:10,540 --> 00:11:14,260
ourselves by<font color="#CCCCCC"> doing it manually</font><font color="#E5E5E5"> and</font>

257
00:11:12,010 --> 00:11:17,680
hopefully the compiler we're using or

258
00:11:14,260 --> 00:11:20,589
<font color="#CCCCCC">the</font><font color="#E5E5E5"> library using sort of enables us to</font>

259
00:11:17,680 --> 00:11:22,209
do that efficiently<font color="#E5E5E5"> so if you're</font>

260
00:11:20,589 --> 00:11:23,350
wondering<font color="#CCCCCC"> about like the general case</font>

261
00:11:22,209 --> 00:11:24,520
because when I got<font color="#E5E5E5"> into this I'm like</font>

262
00:11:23,350 --> 00:11:27,700
how do I find<font color="#E5E5E5"> the cases where this</font>

263
00:11:24,520 --> 00:11:29,680
doesn't<font color="#E5E5E5"> happen easily</font><font color="#CCCCCC"> conveniently if</font>

264
00:11:27,700 --> 00:11:31,450
<font color="#CCCCCC">used until optimizing compiler it will</font>

265
00:11:29,680 --> 00:11:33,069
just tell you<font color="#E5E5E5"> it'll look at every loop</font>

266
00:11:31,450 --> 00:11:36,670
in the entire programs that<font color="#E5E5E5"> I gave up</font>

267
00:11:33,070 --> 00:11:38,529
like I didn't do it<font color="#CCCCCC"> but if you're</font>

268
00:11:36,670 --> 00:11:39,760
manually looking through code<font color="#CCCCCC"> looking</font>

269
00:11:38,529 --> 00:11:42,040
for situations<font color="#CCCCCC"> where the compilers</font>

270
00:11:39,760 --> 00:11:45,779
giving up<font color="#CCCCCC"> you're looking for</font><font color="#E5E5E5"> data</font>

271
00:11:42,040 --> 00:11:50,139
<font color="#CCCCCC">dependencies situations right</font>

272
00:11:45,779 --> 00:11:52,779
so in many<font color="#CCCCCC"> cases</font><font color="#E5E5E5"> the compiler decides</font>

273
00:11:50,139 --> 00:11:55,089
that one piece<font color="#CCCCCC"> of data is unsafely</font>

274
00:11:52,779 --> 00:11:57,189
dependent on another<font color="#E5E5E5"> I'll show that in a</font>

275
00:11:55,089 --> 00:11:59,740
second but if the compiler thinks that

276
00:11:57,190 --> 00:12:01,509
it<font color="#E5E5E5"> will never try to</font><font color="#CCCCCC"> optimize it but in</font>

277
00:11:59,740 --> 00:12:05,050
the last situations<font color="#E5E5E5"> we can teach the</font>

278
00:12:01,509 --> 00:12:07,779
compiler<font color="#E5E5E5"> that that's</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> or we can just</font>

279
00:12:05,050 --> 00:12:10,089
manually<font color="#E5E5E5"> do things so here's here's a</font>

280
00:12:07,779 --> 00:12:15,970
case for y'all<font color="#E5E5E5"> to</font><font color="#CCCCCC"> thinking about</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> of</font>

281
00:12:10,089 --> 00:12:19,120
what a<font color="#E5E5E5"> unsafe</font><font color="#CCCCCC"> parallel situation</font><font color="#E5E5E5"> would</font>

282
00:12:15,970 --> 00:12:20,350
be<font color="#E5E5E5"> it's like Fibonacci sequence</font><font color="#CCCCCC"> most</font>

283
00:12:19,120 --> 00:12:21,639
people are familiar with<font color="#E5E5E5"> this comes up</font>

284
00:12:20,350 --> 00:12:26,620
on like coding interviews and that<font color="#E5E5E5"> kind</font>

285
00:12:21,639 --> 00:12:29,079
of thing<font color="#E5E5E5"> and in this case because we're</font>

286
00:12:26,620 --> 00:12:30,759
computing<font color="#E5E5E5"> things based on previous</font>

287
00:12:29,079 --> 00:12:34,779
values we can't do it all at the same

288
00:12:30,759 --> 00:12:37,000
<font color="#CCCCCC">time</font><font color="#E5E5E5"> right it's linear</font><font color="#CCCCCC"> that in this</font><font color="#E5E5E5"> case</font>

289
00:12:34,779 --> 00:12:40,209
<font color="#E5E5E5">doing we can't refactor things into</font>

290
00:12:37,000 --> 00:12:41,589
matrix multiplication<font color="#E5E5E5"> so keep keep that</font>

291
00:12:40,209 --> 00:12:42,638
sort<font color="#E5E5E5"> of dependency in mind when we're</font>

292
00:12:41,589 --> 00:12:46,660
thinking<font color="#E5E5E5"> about how can we speed up</font>

293
00:12:42,639 --> 00:12:49,630
fuzzing on our compute cluster right<font color="#CCCCCC"> is</font>

294
00:12:46,660 --> 00:12:52,089
our operation<font color="#E5E5E5"> linear or can it</font><font color="#CCCCCC"> be put</font>

295
00:12:49,630 --> 00:12:55,199
together as sort of refactored into the

296
00:12:52,089 --> 00:12:57,490
format<font color="#CCCCCC"> of matrix multiplication</font>

297
00:12:55,199 --> 00:13:00,269
<font color="#E5E5E5">threading</font><font color="#CCCCCC"> you know we're gonna use some</font>

298
00:12:57,490 --> 00:13:04,110
context switching<font color="#E5E5E5"> switch with other</font>

299
00:13:00,269 --> 00:13:06,759
pieces<font color="#E5E5E5"> of process but it's not</font>

300
00:13:04,110 --> 00:13:08,290
<font color="#E5E5E5">deterministic you know we can't we can't</font>

301
00:13:06,759 --> 00:13:12,029
<font color="#E5E5E5">count on any particular timing of the</font>

302
00:13:08,290 --> 00:13:15,790
threads we can use a<font color="#E5E5E5"> library like</font><font color="#CCCCCC"> openmp</font>

303
00:13:12,029 --> 00:13:18,269
<font color="#E5E5E5">to add some safe and smart threading</font><font color="#CCCCCC"> but</font>

304
00:13:15,790 --> 00:13:21,069
we still have to worry about<font color="#E5E5E5"> data races</font>

305
00:13:18,269 --> 00:13:24,310
smart multi parallel programming is and

306
00:13:21,069 --> 00:13:26,680
I can't get too deeply<font color="#E5E5E5"> into</font><font color="#CCCCCC"> that but you</font>

307
00:13:24,310 --> 00:13:29,229
can<font color="#E5E5E5"> use a MP and pragmas like this to</font>

308
00:13:26,680 --> 00:13:30,939
define mutexes<font color="#CCCCCC"> and whatnot</font><font color="#E5E5E5"> and we're</font>

309
00:13:29,230 --> 00:13:32,470
going<font color="#E5E5E5"> to sort of think about</font><font color="#CCCCCC"> whether</font>

310
00:13:30,939 --> 00:13:36,209
<font color="#E5E5E5">that will help our fuzzer situation</font>

311
00:13:32,470 --> 00:13:36,209
<font color="#E5E5E5">whether it's</font><font color="#CCCCCC"> even worth worrying</font><font color="#E5E5E5"> about</font>

312
00:13:36,509 --> 00:13:40,750
we also might think about<font color="#E5E5E5"> cache</font>

313
00:13:38,559 --> 00:13:44,410
optimization<font color="#CCCCCC"> which is almost</font><font color="#E5E5E5"> always</font>

314
00:13:40,750 --> 00:13:48,130
totally manual<font color="#E5E5E5"> but arranging data</font>

315
00:13:44,410 --> 00:13:53,290
accesses<font color="#CCCCCC"> so they always</font><font color="#E5E5E5"> avoid making a</font>

316
00:13:48,130 --> 00:13:55,510
<font color="#CCCCCC"> and again does that work with</font>

317
00:13:53,290 --> 00:13:58,930
fuzzing can we do an<font color="#E5E5E5"> entire</font><font color="#CCCCCC"> fuss job and</font>

318
00:13:55,510 --> 00:14:01,540
keep it in<font color="#E5E5E5"> the cash</font><font color="#CCCCCC"> most people think</font>

319
00:13:58,930 --> 00:14:04,750
<font color="#E5E5E5">this is black magic</font><font color="#CCCCCC"> it's it's pretty</font>

320
00:14:01,540 --> 00:14:08,980
<font color="#CCCCCC">approachable if you go and</font><font color="#E5E5E5"> read</font><font color="#CCCCCC"> the</font>

321
00:14:04,750 --> 00:14:10,300
compiler<font color="#CCCCCC"> Docs so there are also special</font>

322
00:14:08,980 --> 00:14:11,890
caching architectures you can get if you

323
00:14:10,300 --> 00:14:14,109
<font color="#CCCCCC">have a Xeon Phi</font>

324
00:14:11,890 --> 00:14:17,620
they have MC DRM and<font color="#E5E5E5"> stuff like that</font>

325
00:14:14,110 --> 00:14:20,730
shared memory architectures that<font color="#E5E5E5"> make it</font>

326
00:14:17,620 --> 00:14:25,900
easier<font color="#E5E5E5"> to have a much larger cache that</font>

327
00:14:20,730 --> 00:14:28,360
more seldomly invokes the penalty<font color="#CCCCCC"> here's</font>

328
00:14:25,900 --> 00:14:30,550
the docs<font color="#E5E5E5"> for that or the</font><font color="#CCCCCC"> description of</font>

329
00:14:28,360 --> 00:14:32,290
what it is<font color="#CCCCCC"> if you use</font><font color="#E5E5E5"> the until</font>

330
00:14:30,550 --> 00:14:33,670
<font color="#E5E5E5">optimizing compiler if there's even</font>

331
00:14:32,290 --> 00:14:34,780
options to do it automatically<font color="#E5E5E5"> but again</font>

332
00:14:33,670 --> 00:14:37,329
you<font color="#CCCCCC"> have to double check that</font><font color="#E5E5E5"> the</font>

333
00:14:34,780 --> 00:14:39,339
compiler<font color="#E5E5E5"> is actually doing it</font><font color="#CCCCCC"> again</font>

334
00:14:37,330 --> 00:14:42,520
we'll explore these in detail whether

335
00:14:39,340 --> 00:14:44,230
it's useful<font color="#CCCCCC"> for our purposes in a</font><font color="#E5E5E5"> sec or</font>

336
00:14:42,520 --> 00:14:47,620
you might have<font color="#CCCCCC"> a multi house set up</font><font color="#E5E5E5"> like</font>

337
00:14:44,230 --> 00:14:48,880
our<font color="#E5E5E5"> the cluster we're hoping to do but</font>

338
00:14:47,620 --> 00:14:51,430
then<font color="#E5E5E5"> we have to</font><font color="#CCCCCC"> find a way to</font><font color="#E5E5E5"> spread out</font>

339
00:14:48,880 --> 00:14:52,870
<font color="#CCCCCC">our algorithm right we have to see the</font>

340
00:14:51,430 --> 00:14:54,550
thing<font color="#E5E5E5"> about like</font><font color="#CCCCCC"> Map Reduce in</font><font color="#E5E5E5"> that kind</font>

341
00:14:52,870 --> 00:14:56,230
of algorithm<font color="#CCCCCC"> like can we</font><font color="#E5E5E5"> split up the</font>

342
00:14:54,550 --> 00:15:00,270
<font color="#E5E5E5">action of fuzzy are we going to split</font><font color="#CCCCCC"> up</font>

343
00:14:56,230 --> 00:15:03,610
the<font color="#E5E5E5"> generation of fuzzing test cases</font>

344
00:15:00,270 --> 00:15:07,120
among<font color="#CCCCCC"> multiple CPU nodes are we gonna</font>

345
00:15:03,610 --> 00:15:10,450
split<font color="#E5E5E5"> up the execution or we gonna even</font>

346
00:15:07,120 --> 00:15:13,750
do<font color="#E5E5E5"> something even more wild</font><font color="#CCCCCC"> and split up</font>

347
00:15:10,450 --> 00:15:17,530
<font color="#CCCCCC">the</font><font color="#E5E5E5"> individual parts of the process we</font>

348
00:15:13,750 --> 00:15:19,300
can sort of with MPI we can<font color="#CCCCCC"> actually go</font>

349
00:15:17,530 --> 00:15:22,319
<font color="#CCCCCC">through</font><font color="#E5E5E5"> and say</font><font color="#CCCCCC"> only do this loop</font><font color="#E5E5E5"> on</font>

350
00:15:19,300 --> 00:15:25,199
certain hosts<font color="#E5E5E5"> that can be really useful</font>

351
00:15:22,320 --> 00:15:28,990
<font color="#E5E5E5">here's an</font><font color="#CCCCCC"> example of like what the</font>

352
00:15:25,200 --> 00:15:30,460
openmpi<font color="#E5E5E5"> pragmas look like this is kind</font>

353
00:15:28,990 --> 00:15:35,800
of<font color="#CCCCCC"> a deep topic so we're going</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> fast</font>

354
00:15:30,460 --> 00:15:37,750
but I think<font color="#E5E5E5"> you guys get the</font><font color="#CCCCCC"> idea and</font>

355
00:15:35,800 --> 00:15:39,310
<font color="#CCCCCC">then</font><font color="#E5E5E5"> one idea</font><font color="#CCCCCC"> that's I'm</font><font color="#E5E5E5"> just gonna put</font>

356
00:15:37,750 --> 00:15:41,200
in your<font color="#E5E5E5"> mind we're not</font><font color="#CCCCCC"> gonna explore too</font>

357
00:15:39,310 --> 00:15:43,719
deeply at all is the idea<font color="#E5E5E5"> of</font><font color="#CCCCCC"> doing GPU</font>

358
00:15:41,200 --> 00:15:45,400
acceleration<font color="#E5E5E5"> and this is like kind</font><font color="#CCCCCC"> of</font>

359
00:15:43,720 --> 00:15:46,900
<font color="#E5E5E5">the future</font><font color="#CCCCCC"> and</font>

360
00:15:45,400 --> 00:15:48,880
and vidi has some really<font color="#E5E5E5"> cool technology</font>

361
00:15:46,900 --> 00:15:50,680
for automating these kind of

362
00:15:48,880 --> 00:15:53,110
optimizations are automatically<font color="#CCCCCC"> turning</font>

363
00:15:50,680 --> 00:15:57,640
<font color="#CCCCCC">c code into a format</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> can be</font>

364
00:15:53,110 --> 00:15:59,290
executed<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the GPU but for fuzzing</font><font color="#E5E5E5"> it's</font>

365
00:15:57,640 --> 00:16:01,900
just not there I have never<font color="#E5E5E5"> seen the GPU</font>

366
00:15:59,290 --> 00:16:05,949
accelerated fuzzer<font color="#E5E5E5"> so we're gonna leave</font>

367
00:16:01,900 --> 00:16:08,160
that so let's talk<font color="#CCCCCC"> about our our text</font>

368
00:16:05,950 --> 00:16:12,339
stack for this what this<font color="#E5E5E5"> is made out</font><font color="#CCCCCC"> of</font>

369
00:16:08,160 --> 00:16:15,579
so here's a<font color="#E5E5E5"> high-level map of our</font>

370
00:16:12,339 --> 00:16:19,330
architecture<font color="#E5E5E5"> so we have a job queue we</font>

371
00:16:15,580 --> 00:16:23,830
got<font color="#CCCCCC"> fuzz job pre-processing we're gonna</font>

372
00:16:19,330 --> 00:16:25,900
set up processing<font color="#CCCCCC"> to prior to</font><font color="#E5E5E5"> things</font>

373
00:16:23,830 --> 00:16:27,250
being<font color="#E5E5E5"> around by the</font><font color="#CCCCCC"> fuzzy we're</font><font color="#E5E5E5"> gonna</font>

374
00:16:25,900 --> 00:16:29,650
run our<font color="#CCCCCC"> buzzers we're</font><font color="#E5E5E5"> gonna do some</font>

375
00:16:27,250 --> 00:16:33,400
crash cries<font color="#E5E5E5"> and we're gonna do sort of</font>

376
00:16:29,650 --> 00:16:35,890
sort over our output<font color="#E5E5E5"> and a big part of</font>

377
00:16:33,400 --> 00:16:38,680
this<font color="#E5E5E5"> that most people wouldn't be</font>

378
00:16:35,890 --> 00:16:44,620
<font color="#CCCCCC">familiar with</font><font color="#E5E5E5"> if you haven't done any</font>

379
00:16:38,680 --> 00:16:48,310
like<font color="#E5E5E5"> mmm cluster computing is like that</font>

380
00:16:44,620 --> 00:16:49,690
style of job queue<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of a script that</font>

381
00:16:48,310 --> 00:16:51,609
<font color="#E5E5E5">can kick off the drops and also measure</font>

382
00:16:49,690 --> 00:16:54,940
their efficiency and<font color="#E5E5E5"> say it took this</font>

383
00:16:51,610 --> 00:16:57,450
many seconds to run this algorithm<font color="#E5E5E5"> you</font>

384
00:16:54,940 --> 00:16:57,450
get the idea

385
00:16:58,060 --> 00:17:04,000
I went for a sort<font color="#E5E5E5"> of traditional style</font>

386
00:17:01,530 --> 00:17:05,410
<font color="#CCCCCC">queuing option called torque which is</font>

387
00:17:04,000 --> 00:17:07,929
<font color="#CCCCCC">available and I've done</font><font color="#E5E5E5"> - it's pretty</font>

388
00:17:05,410 --> 00:17:11,980
<font color="#E5E5E5">easy to</font><font color="#CCCCCC"> install</font><font color="#E5E5E5"> and gives you the same</font>

389
00:17:07,929 --> 00:17:13,300
sort<font color="#E5E5E5"> of API for kicking off jobs</font><font color="#CCCCCC"> and</font>

390
00:17:11,980 --> 00:17:15,670
queues and whatnot

391
00:17:13,300 --> 00:17:19,599
like you<font color="#E5E5E5"> stat and whatever that you</font>

392
00:17:15,670 --> 00:17:22,990
would see in most<font color="#E5E5E5"> college clusters so I</font>

393
00:17:19,599 --> 00:17:27,669
imitated that<font color="#E5E5E5"> or imitated</font><font color="#CCCCCC"> a cluster set</font>

394
00:17:22,990 --> 00:17:28,780
of<font color="#E5E5E5"> Intel uses so a lot of</font><font color="#CCCCCC"> Hauser's will</font>

395
00:17:27,670 --> 00:17:31,600
<font color="#CCCCCC">acquire</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> additional work before</font>

396
00:17:28,780 --> 00:17:33,250
fuzzing and<font color="#E5E5E5"> start traditional professors</font>

397
00:17:31,600 --> 00:17:36,840
may require rule set for fuzzing outputs

398
00:17:33,250 --> 00:17:39,150
<font color="#E5E5E5">some directions for where</font><font color="#CCCCCC"> to fuzz</font>

399
00:17:36,840 --> 00:17:40,949
active<font color="#CCCCCC"> guidance fuzz's AFL</font><font color="#E5E5E5"> may require</font>

400
00:17:39,150 --> 00:17:42,840
<font color="#CCCCCC">cross cross compilation binary</font>

401
00:17:40,950 --> 00:17:45,960
instrumentation so we<font color="#CCCCCC"> up for and have to</font>

402
00:17:42,840 --> 00:17:47,820
write some some scripts for this thing

403
00:17:45,960 --> 00:17:49,110
<font color="#CCCCCC">to kick off before can run a job and</font>

404
00:17:47,820 --> 00:17:52,110
that's going<font color="#CCCCCC"> to be part of the cost</font><font color="#E5E5E5"> of</font>

405
00:17:49,110 --> 00:17:55,199
running a job<font color="#CCCCCC"> so we're just gonna assume</font>

406
00:17:52,110 --> 00:18:00,330
<font color="#E5E5E5">we're running AFL for guide to fuzzing</font>

407
00:17:55,200 --> 00:18:02,610
and BFF for traditional fuzzing<font color="#CCCCCC"> and for</font>

408
00:18:00,330 --> 00:18:06,090
<font color="#CCCCCC">crash adding tools in our experiments</font>

409
00:18:02,610 --> 00:18:08,040
we're going to use crash walk and AFL

410
00:18:06,090 --> 00:18:09,510
<font color="#E5E5E5">crash analyzer if I</font><font color="#CCCCCC"> think I only have</font>

411
00:18:08,040 --> 00:18:14,580
numbers for<font color="#E5E5E5"> you later for one of those</font>

412
00:18:09,510 --> 00:18:15,660
so keep that<font color="#E5E5E5"> in mind</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> just to think</font>

413
00:18:14,580 --> 00:18:18,710
<font color="#E5E5E5">about</font><font color="#CCCCCC"> how we're gonna string all this</font>

414
00:18:15,660 --> 00:18:20,850
together<font color="#CCCCCC"> we wanna think about how do we</font>

415
00:18:18,710 --> 00:18:22,320
triaging from fuzzing or how do you

416
00:18:20,850 --> 00:18:24,330
<font color="#CCCCCC">wanna keep</font><font color="#E5E5E5"> the triage have synchronous</font>

417
00:18:22,320 --> 00:18:25,970
from the<font color="#E5E5E5"> budget again there's actually a</font>

418
00:18:24,330 --> 00:18:29,010
lot<font color="#CCCCCC"> of options for how</font><font color="#E5E5E5"> you split up</font>

419
00:18:25,970 --> 00:18:31,920
<font color="#CCCCCC">things across nodes and what</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually</font>

420
00:18:29,010 --> 00:18:33,690
useful and<font color="#CCCCCC"> for output we</font><font color="#E5E5E5"> want the</font>

421
00:18:31,920 --> 00:18:35,760
largest<font color="#CCCCCC"> number of good crash test cases</font>

422
00:18:33,690 --> 00:18:37,970
possible and we also want some data in

423
00:18:35,760 --> 00:18:41,580
which crash test cases are most

424
00:18:37,970 --> 00:18:43,890
interesting<font color="#E5E5E5"> to us so now we're going</font><font color="#CCCCCC"> to</font>

425
00:18:41,580 --> 00:18:46,800
consider the<font color="#E5E5E5"> viability of each of these</font>

426
00:18:43,890 --> 00:18:49,950
optimizations and<font color="#E5E5E5"> how how it potentially</font>

427
00:18:46,800 --> 00:18:53,389
could work on<font color="#E5E5E5"> our system and</font><font color="#CCCCCC"> see if that</font>

428
00:18:49,950 --> 00:18:59,510
as we go<font color="#E5E5E5"> on if any of these are viable</font>

429
00:18:53,390 --> 00:19:01,500
<font color="#E5E5E5">speed ups for for our scenario</font><font color="#CCCCCC"> so</font>

430
00:18:59,510 --> 00:19:03,180
<font color="#E5E5E5">buzzards</font><font color="#CCCCCC"> in general have a weird</font>

431
00:19:01,500 --> 00:19:04,530
bottleneck<font color="#CCCCCC"> to them in</font><font color="#E5E5E5"> that the fuzzer</font>

432
00:19:03,180 --> 00:19:05,520
itself may only be<font color="#E5E5E5"> doing a fraction of</font>

433
00:19:04,530 --> 00:19:07,200
the work depending<font color="#E5E5E5"> on the target</font>

434
00:19:05,520 --> 00:19:08,940
software often<font color="#E5E5E5"> it's possible for the</font>

435
00:19:07,200 --> 00:19:12,750
target software<font color="#CCCCCC"> Eclipse the amount of</font>

436
00:19:08,940 --> 00:19:15,240
<font color="#E5E5E5">CPU</font><font color="#CCCCCC"> so really</font><font color="#E5E5E5"> speeding up the fuzzer</font>

437
00:19:12,750 --> 00:19:17,420
itself isn't<font color="#E5E5E5"> is a little bit of waste</font>

438
00:19:15,240 --> 00:19:21,180
time but we're still gonna explore that

439
00:19:17,420 --> 00:19:23,040
<font color="#CCCCCC">but it appears that a lot of</font><font color="#E5E5E5"> the biggest</font>

440
00:19:21,180 --> 00:19:24,120
<font color="#CCCCCC">things are speeding up the execution of</font>

441
00:19:23,040 --> 00:19:27,180
the test<font color="#E5E5E5"> case without changing a</font>

442
00:19:24,120 --> 00:19:28,860
semantics so most of the delays<font color="#CCCCCC"> in</font>

443
00:19:27,180 --> 00:19:30,570
generated as<font color="#CCCCCC"> defense</font><font color="#E5E5E5"> software it kicks</font>

444
00:19:28,860 --> 00:19:32,280
off<font color="#E5E5E5"> new iterations to the software it's</font>

445
00:19:30,570 --> 00:19:34,620
gonna<font color="#CCCCCC"> fork new processes this is a big</font>

446
00:19:32,280 --> 00:19:36,600
thing<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you see</font><font color="#CCCCCC"> everyday FL</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> mat</font>

447
00:19:34,620 --> 00:19:37,889
cause this is like<font color="#E5E5E5"> horrible</font>

448
00:19:36,600 --> 00:19:39,539
Buzzard<font color="#E5E5E5"> will spend a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> his time</font>

449
00:19:37,890 --> 00:19:41,970
<font color="#E5E5E5">waiting for the first case in</font>

450
00:19:39,539 --> 00:19:43,408
<font color="#E5E5E5">our software to finish its</font><font color="#CCCCCC"> possible</font>

451
00:19:41,970 --> 00:19:45,659
<font color="#CCCCCC">situation with their parent process</font><font color="#E5E5E5"> is</font>

452
00:19:43,409 --> 00:19:50,159
taking<font color="#CCCCCC"> more time than child</font><font color="#E5E5E5"> but it's</font>

453
00:19:45,659 --> 00:19:53,090
uncommon<font color="#E5E5E5"> so first set of experiments</font><font color="#CCCCCC"> is</font>

454
00:19:50,159 --> 00:19:58,529
like<font color="#E5E5E5"> wood running sim D operations</font>

455
00:19:53,090 --> 00:20:04,649
optimizations<font color="#E5E5E5"> avx-512</font><font color="#CCCCCC"> on on the fuzzer</font>

456
00:19:58,529 --> 00:20:07,769
itself<font color="#CCCCCC"> give us any game and really in a</font>

457
00:20:04,649 --> 00:20:09,840
lot of cases<font color="#E5E5E5"> dancers</font><font color="#CCCCCC"> no again so much of</font>

458
00:20:07,769 --> 00:20:11,609
so little<font color="#E5E5E5"> of the time is</font><font color="#CCCCCC"> spent in the</font>

459
00:20:09,840 --> 00:20:14,428
fuzzer<font color="#E5E5E5"> itself as opposed to the host</font>

460
00:20:11,609 --> 00:20:16,649
software<font color="#E5E5E5"> running the</font><font color="#CCCCCC"> test case that it's</font>

461
00:20:14,429 --> 00:20:21,019
not a huge difference<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think we'll look</font>

462
00:20:16,649 --> 00:20:24,359
at numbers in a second<font color="#CCCCCC"> there is a way to</font>

463
00:20:21,019 --> 00:20:30,720
refactor<font color="#E5E5E5"> this into matrix multiplication</font>

464
00:20:24,359 --> 00:20:32,668
in most cases so<font color="#E5E5E5"> intel advertises</font>

465
00:20:30,720 --> 00:20:35,549
maximum difference<font color="#E5E5E5"> of 6 times</font>

466
00:20:32,669 --> 00:20:40,349
performance in transition from<font color="#E5E5E5"> AVX 256</font>

467
00:20:35,549 --> 00:20:42,840
to 512<font color="#E5E5E5"> for optimal workloads the most</font><font color="#CCCCCC"> i</font>

468
00:20:40,349 --> 00:20:46,349
observed was about 2% speed-up switching

469
00:20:42,840 --> 00:20:48,499
things to avx-512<font color="#E5E5E5"> so kind of</font><font color="#CCCCCC"> not worth</font>

470
00:20:46,349 --> 00:20:48,499
it

471
00:20:48,989 --> 00:20:54,029
then there's a the reasonable

472
00:20:51,629 --> 00:20:57,090
consideration<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> may be if we we</font>

473
00:20:54,029 --> 00:20:58,289
thread our fuzzing processes will give

474
00:20:57,090 --> 00:21:00,539
some gain out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this problem is that</font>

475
00:20:58,289 --> 00:21:03,419
<font color="#CCCCCC">most fuzzer authors have already done</font>

476
00:21:00,539 --> 00:21:05,789
this and<font color="#CCCCCC"> thoroughly integrated OpenMP so</font>

477
00:21:03,419 --> 00:21:07,950
we're kind of not<font color="#E5E5E5"> so many opportunities</font>

478
00:21:05,789 --> 00:21:09,869
<font color="#CCCCCC">to speed it up there</font><font color="#E5E5E5"> fortunately it's</font>

479
00:21:07,950 --> 00:21:13,470
kind of smart<font color="#CCCCCC"> people doing</font><font color="#E5E5E5"> smart things</font>

480
00:21:09,869 --> 00:21:15,029
already<font color="#CCCCCC"> it's very unlikely we'll find</font>

481
00:21:13,470 --> 00:21:17,190
much for the fuzzer to do while it's

482
00:21:15,029 --> 00:21:21,090
<font color="#E5E5E5">waiting for</font><font color="#CCCCCC"> child</font><font color="#E5E5E5"> child drops</font><font color="#CCCCCC"> to finish</font>

483
00:21:17,190 --> 00:21:22,889
<font color="#E5E5E5">anyway</font><font color="#CCCCCC"> and then there's a lot of people</font>

484
00:21:21,090 --> 00:21:24,539
trying<font color="#E5E5E5"> to get a good openmpi fuzzer</font>

485
00:21:22,889 --> 00:21:28,168
going I've seen experiments and papers

486
00:21:24,539 --> 00:21:29,490
but nothing to finish<font color="#CCCCCC"> I think this is a</font>

487
00:21:28,169 --> 00:21:31,080
preferred<font color="#CCCCCC"> approach</font>

488
00:21:29,490 --> 00:21:33,059
treszura<font color="#CCCCCC"> zone shoulder into multiple</font>

489
00:21:31,080 --> 00:21:36,360
compute nodes and everybody means<font color="#E5E5E5"> up in</font>

490
00:21:33,059 --> 00:21:39,899
the end<font color="#CCCCCC"> but when one question I don't</font>

491
00:21:36,360 --> 00:21:41,309
<font color="#E5E5E5">see explored</font><font color="#CCCCCC"> quite enough is is there</font>

492
00:21:39,900 --> 00:21:44,429
another variation on<font color="#E5E5E5"> this approach that</font>

493
00:21:41,309 --> 00:21:47,520
<font color="#CCCCCC">more efficiently uses our resources is</font>

494
00:21:44,429 --> 00:21:50,520
it possible that we could use openmpi

495
00:21:47,520 --> 00:21:52,500
pragmas<font color="#E5E5E5"> to spend all of our time in the</font>

496
00:21:50,520 --> 00:21:54,120
hard parts of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> software to run</font><font color="#E5E5E5"> is</font>

497
00:21:52,500 --> 00:21:56,040
there<font color="#CCCCCC"> a way to</font><font color="#E5E5E5"> do that safely and still</font>

498
00:21:54,120 --> 00:21:57,330
get the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> crashes I think that's a</font>

499
00:21:56,040 --> 00:22:00,720
deeper area of research that<font color="#CCCCCC"> people</font>

500
00:21:57,330 --> 00:22:02,280
should explore<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not gonna bother</font>

501
00:22:00,720 --> 00:22:03,750
with<font color="#E5E5E5"> cache optimization for the fuzzer</font>

502
00:22:02,280 --> 00:22:06,870
itself again it's<font color="#E5E5E5"> probably not gonna</font>

503
00:22:03,750 --> 00:22:09,030
<font color="#E5E5E5">work out what about the target software</font>

504
00:22:06,870 --> 00:22:10,620
is it possible that<font color="#E5E5E5"> we might be able to</font>

505
00:22:09,030 --> 00:22:12,270
safely<font color="#E5E5E5"> recompile the target software</font>

506
00:22:10,620 --> 00:22:13,949
with optimizations so<font color="#E5E5E5"> we spend less time</font>

507
00:22:12,270 --> 00:22:17,100
in<font color="#E5E5E5"> it when we're running your test case</font>

508
00:22:13,950 --> 00:22:20,370
in case<font color="#E5E5E5"> most cases is yes use a</font>

509
00:22:17,100 --> 00:22:25,110
<font color="#CCCCCC">optimizing compiler</font><font color="#E5E5E5"> you can sped up</font><font color="#CCCCCC"> 20</font>

510
00:22:20,370 --> 00:22:27,629
<font color="#CCCCCC">30 times scrape stuff so it's possibly</font>

511
00:22:25,110 --> 00:22:29,580
worth it but you also have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> consider</font>

512
00:22:27,630 --> 00:22:31,440
for<font color="#CCCCCC"> yourself how much time engineering</font>

513
00:22:29,580 --> 00:22:34,710
time you want<font color="#E5E5E5"> to trade to get</font><font color="#CCCCCC"> the</font>

514
00:22:31,440 --> 00:22:40,140
<font color="#CCCCCC">speed-up</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> whether the</font><font color="#E5E5E5"> target program</font>

515
00:22:34,710 --> 00:22:43,710
<font color="#E5E5E5">is is how do you say amenable to</font><font color="#CCCCCC"> it in</font>

516
00:22:40,140 --> 00:22:47,070
my 3d printing test<font color="#CCCCCC"> cases</font><font color="#E5E5E5"> it really</font><font color="#CCCCCC"> was</font>

517
00:22:43,710 --> 00:22:48,090
<font color="#E5E5E5">because it had linear algebra but in</font>

518
00:22:47,070 --> 00:22:52,320
something<font color="#CCCCCC"> a little more linear</font>

519
00:22:48,090 --> 00:22:54,059
it might not<font color="#E5E5E5"> so I in my</font><font color="#CCCCCC"> own tests they</font>

520
00:22:52,320 --> 00:22:56,250
give you charts in a second<font color="#CCCCCC"> I observed</font>

521
00:22:54,059 --> 00:22:58,050
about<font color="#E5E5E5"> 10% speed-up and generations of</font>

522
00:22:56,250 --> 00:23:02,040
<font color="#E5E5E5">fuzz cases for appropriate workloads as</font>

523
00:22:58,050 --> 00:23:04,409
compared to<font color="#E5E5E5"> control so what about</font><font color="#CCCCCC"> to</font>

524
00:23:02,040 --> 00:23:06,510
<font color="#CCCCCC">OpenMP on the target software this gets</font>

525
00:23:04,410 --> 00:23:08,640
<font color="#E5E5E5">really complicated</font><font color="#CCCCCC"> if you want to try</font>

526
00:23:06,510 --> 00:23:11,070
and find a<font color="#E5E5E5"> way to add threading that</font>

527
00:23:08,640 --> 00:23:12,510
wasn't already<font color="#CCCCCC"> there and then you run</font>

528
00:23:11,070 --> 00:23:14,309
<font color="#CCCCCC">into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cases it's really hard to add</font>

529
00:23:12,510 --> 00:23:15,720
that<font color="#CCCCCC"> without side effects and causing</font>

530
00:23:14,309 --> 00:23:17,970
data<font color="#E5E5E5"> races that weren't there</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

531
00:23:15,720 --> 00:23:20,130
original<font color="#E5E5E5"> software but there could be a</font>

532
00:23:17,970 --> 00:23:23,010
possibly massive speed-up if you design

533
00:23:20,130 --> 00:23:24,360
it correctly<font color="#E5E5E5"> then again if it's running</font>

534
00:23:23,010 --> 00:23:25,860
on<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> system as the first test</font>

535
00:23:24,360 --> 00:23:29,899
<font color="#E5E5E5">case generator you're probably running</font>

536
00:23:25,860 --> 00:23:29,899
out<font color="#E5E5E5"> of threads anyway so that's that</font>

537
00:23:30,679 --> 00:23:36,850
<font color="#E5E5E5">skip over that</font>

538
00:23:33,550 --> 00:23:38,290
and then we might<font color="#E5E5E5"> want to explore how we</font>

539
00:23:36,850 --> 00:23:40,120
<font color="#E5E5E5">can better split up</font>

540
00:23:38,290 --> 00:23:41,680
<font color="#E5E5E5">over nodes the running of the target</font>

541
00:23:40,120 --> 00:23:46,439
software I touched on<font color="#E5E5E5"> that before so we</font>

542
00:23:41,680 --> 00:23:46,440
don't have to go too much<font color="#E5E5E5"> deeper on that</font>

543
00:23:47,040 --> 00:23:51,159
<font color="#CCCCCC">again</font>

544
00:23:48,340 --> 00:24:00,820
splitting<font color="#E5E5E5"> up things smarter ways would</font>

545
00:23:51,160 --> 00:24:03,390
<font color="#E5E5E5">be</font><font color="#CCCCCC"> a cool idea we tried some some</font><font color="#E5E5E5"> more</font>

546
00:24:00,820 --> 00:24:06,939
creative<font color="#E5E5E5"> things it didn't work out</font><font color="#CCCCCC"> and</font>

547
00:24:03,390 --> 00:24:11,800
<font color="#E5E5E5">what about free</font><font color="#CCCCCC"> art</font><font color="#E5E5E5"> software so we have</font>

548
00:24:06,940 --> 00:24:13,600
<font color="#E5E5E5">software presents an especially daunting</font>

549
00:24:11,800 --> 00:24:15,820
task<font color="#E5E5E5"> because graph triage software has</font>

550
00:24:13,600 --> 00:24:18,610
all the<font color="#E5E5E5"> problems of running the fuzz</font>

551
00:24:15,820 --> 00:24:21,100
test case but worse<font color="#E5E5E5"> because the way a</font>

552
00:24:18,610 --> 00:24:22,570
lot<font color="#CCCCCC"> of the works</font><font color="#E5E5E5"> is crash</font><font color="#CCCCCC"> edge will need</font>

553
00:24:21,100 --> 00:24:24,219
to invoke a debugger for each job it's

554
00:24:22,570 --> 00:24:25,419
running then the debugger must invoke

555
00:24:24,220 --> 00:24:27,940
the target program right<font color="#E5E5E5"> until it</font>

556
00:24:25,420 --> 00:24:29,320
crashes<font color="#CCCCCC"> and that means we're waiting</font>

557
00:24:27,940 --> 00:24:30,610
around<font color="#E5E5E5"> on two forks instead of one and</font>

558
00:24:29,320 --> 00:24:33,580
<font color="#CCCCCC">whirring on</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> crash that might take</font><font color="#E5E5E5"> it</font>

559
00:24:30,610 --> 00:24:35,110
<font color="#E5E5E5">undefined amount of time</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> currently</font>

560
00:24:33,580 --> 00:24:37,560
there is there's no solution to<font color="#CCCCCC"> that</font>

561
00:24:35,110 --> 00:24:39,550
other than<font color="#CCCCCC"> to</font><font color="#E5E5E5"> parallelize everything and</font>

562
00:24:37,560 --> 00:24:42,100
it's<font color="#CCCCCC"> just down to the number of nodes</font>

563
00:24:39,550 --> 00:24:47,980
you<font color="#CCCCCC"> have so there's</font><font color="#E5E5E5"> nothing to gain from</font>

564
00:24:42,100 --> 00:24:49,419
<font color="#CCCCCC">cindy not not even from OpenMP or an MPI</font>

565
00:24:47,980 --> 00:24:52,000
other than the<font color="#E5E5E5"> obvious thing a paralyze</font>

566
00:24:49,420 --> 00:24:55,810
<font color="#CCCCCC">early parallelizing</font><font color="#E5E5E5"> in the most obvious</font>

567
00:24:52,000 --> 00:24:57,910
<font color="#CCCCCC">way</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> think of so just</font><font color="#CCCCCC"> to sum up</font>

568
00:24:55,810 --> 00:24:59,530
what<font color="#E5E5E5"> did we learn</font><font color="#CCCCCC"> in this section</font><font color="#E5E5E5"> the</font>

569
00:24:57,910 --> 00:25:01,570
great<font color="#E5E5E5"> majority of work is in the child</font>

570
00:24:59,530 --> 00:25:02,950
process optimizations to<font color="#E5E5E5"> the fuzzer</font>

571
00:25:01,570 --> 00:25:04,780
itself don't make as much<font color="#E5E5E5"> difference</font><font color="#CCCCCC"> to</font>

572
00:25:02,950 --> 00:25:07,300
<font color="#E5E5E5">the</font><font color="#CCCCCC"> overall performance as optimizations</font>

573
00:25:04,780 --> 00:25:08,800
<font color="#CCCCCC">to the child processes</font><font color="#E5E5E5"> but optimizations</font>

574
00:25:07,300 --> 00:25:11,200
have to keep the semantics of the<font color="#CCCCCC"> ritual</font>

575
00:25:08,800 --> 00:25:13,330
program there might be opportunities<font color="#E5E5E5"> to</font>

576
00:25:11,200 --> 00:25:15,190
further<font color="#E5E5E5"> update if we</font><font color="#CCCCCC"> set up exotic</font>

577
00:25:13,330 --> 00:25:17,560
threading or MPI paradigms but<font color="#E5E5E5"> we're</font>

578
00:25:15,190 --> 00:25:21,610
trading<font color="#E5E5E5"> a lot of work for the results we</font>

579
00:25:17,560 --> 00:25:23,350
get so why don't<font color="#CCCCCC"> we set up a fuzz</font><font color="#E5E5E5"> erase</font>

580
00:25:21,610 --> 00:25:24,060
we you know learning what we've learned

581
00:25:23,350 --> 00:25:26,490
how

582
00:25:24,060 --> 00:25:29,340
much<font color="#E5E5E5"> gain can we get for our crazy</font>

583
00:25:26,490 --> 00:25:31,350
fuzzing rig for the<font color="#E5E5E5"> willing amount of</font>

584
00:25:29,340 --> 00:25:35,570
<font color="#CCCCCC">hobbyists engineer</font><font color="#E5E5E5"> time</font>

585
00:25:31,350 --> 00:25:37,860
<font color="#E5E5E5">- badge</font><font color="#CCCCCC"> so here's our very informal</font>

586
00:25:35,570 --> 00:25:39,990
<font color="#E5E5E5">possibly little unscientific</font>

587
00:25:37,860 --> 00:25:41,669
experimental design<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going to set</font>

588
00:25:39,990 --> 00:25:43,080
<font color="#E5E5E5">several of our imagine</font><font color="#CCCCCC"> if fussing</font>

589
00:25:41,670 --> 00:25:43,920
cluster designs and run them head-on

590
00:25:43,080 --> 00:25:45,780
with each other

591
00:25:43,920 --> 00:25:49,050
and we may<font color="#E5E5E5"> learn some things from</font><font color="#CCCCCC"> the</font>

592
00:25:45,780 --> 00:25:50,310
<font color="#E5E5E5">performance here's my VPS</font><font color="#CCCCCC"> setup into</font>

593
00:25:49,050 --> 00:25:52,379
this on digital ocean with their high

594
00:25:50,310 --> 00:25:55,620
<font color="#CCCCCC">performance compute nodes</font><font color="#E5E5E5"> the rank</font>

595
00:25:52,380 --> 00:25:58,770
torque for control queuing and using the

596
00:25:55,620 --> 00:26:01,500
<font color="#CCCCCC">sec subscribe before a torque</font><font color="#E5E5E5"> AFL crash</font>

597
00:25:58,770 --> 00:26:04,290
<font color="#E5E5E5">lock torque</font><font color="#CCCCCC"> AFL AFL crashing analyzer</font>

598
00:26:01,500 --> 00:26:05,940
torque BFF<font color="#E5E5E5"> and crash lab again I</font><font color="#CCCCCC"> think I</font>

599
00:26:04,290 --> 00:26:08,580
don't<font color="#E5E5E5"> have PFF numbers here for</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> guys</font>

600
00:26:05,940 --> 00:26:15,630
so I apologize in advance and<font color="#E5E5E5"> you know</font>

601
00:26:08,580 --> 00:26:18,179
here's my cluster<font color="#E5E5E5"> and it lives and for</font>

602
00:26:15,630 --> 00:26:19,950
<font color="#E5E5E5">our target software</font><font color="#CCCCCC"> I wish I'd written</font>

603
00:26:18,180 --> 00:26:22,260
<font color="#E5E5E5">this talk after a</font><font color="#CCCCCC"> trailer</font><font color="#E5E5E5"> bits that</font>

604
00:26:19,950 --> 00:26:23,610
<font color="#CCCCCC">they're there</font><font color="#E5E5E5"> talk on benchmarking</font>

605
00:26:22,260 --> 00:26:26,250
<font color="#CCCCCC">puzzlers otherwise I would have</font>

606
00:26:23,610 --> 00:26:29,939
integrated<font color="#E5E5E5"> some of the test Suites they</font>

607
00:26:26,250 --> 00:26:32,850
had there but I used abdomen<font color="#E5E5E5"> and an old</font>

608
00:26:29,940 --> 00:26:36,570
version of<font color="#CCCCCC"> lid magic that I knew to</font><font color="#E5E5E5"> have</font>

609
00:26:32,850 --> 00:26:40,980
a lot of<font color="#E5E5E5"> crashes that's one like typical</font>

610
00:26:36,570 --> 00:26:43,770
<font color="#E5E5E5">go-to ones for</font><font color="#CCCCCC"> AFL so my parameters are</font>

611
00:26:40,980 --> 00:26:46,380
<font color="#E5E5E5">this each buzzer gets to run for</font><font color="#CCCCCC"> 10</font>

612
00:26:43,770 --> 00:26:49,410
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> controlled by the queuing system</font>

613
00:26:46,380 --> 00:26:51,630
<font color="#CCCCCC">I run it once in the control node run</font>

614
00:26:49,410 --> 00:26:55,940
with the trivial parallelization<font color="#CCCCCC"> and</font>

615
00:26:51,630 --> 00:26:58,830
then with more and then with more and

616
00:26:55,940 --> 00:27:01,880
here are<font color="#E5E5E5"> our</font><font color="#CCCCCC"> results</font><font color="#E5E5E5"> and they kind of</font>

617
00:26:58,830 --> 00:27:04,980
conform to our intuitions from before

618
00:27:01,880 --> 00:27:07,260
<font color="#CCCCCC">the easiest way to get extra speed out</font>

619
00:27:04,980 --> 00:27:12,360
of<font color="#E5E5E5"> these things is to add extra by hand</font>

620
00:27:07,260 --> 00:27:15,210
<font color="#CCCCCC">sim D optimizations for adding nodes</font>

621
00:27:12,360 --> 00:27:17,010
obviously adds a lot<font color="#E5E5E5"> of speed but a lot</font>

622
00:27:15,210 --> 00:27:20,150
<font color="#CCCCCC">of</font><font color="#E5E5E5"> cost so it's not the best return on</font>

623
00:27:17,010 --> 00:27:24,150
investment<font color="#CCCCCC"> it on</font><font color="#E5E5E5"> pay is OMP is kind of</font>

624
00:27:20,150 --> 00:27:26,960
dicey<font color="#CCCCCC"> someday</font><font color="#E5E5E5"> I will get a more</font>

625
00:27:24,150 --> 00:27:30,590
scientific graph on this thing

626
00:27:26,960 --> 00:27:32,700
but<font color="#CCCCCC"> I really hate</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> gnu octave</font><font color="#E5E5E5"> so</font>

627
00:27:30,590 --> 00:27:35,340
maybe I<font color="#CCCCCC"> should</font><font color="#E5E5E5"> just hurry up and get a</font>

628
00:27:32,700 --> 00:27:39,390
mathematical essence<font color="#E5E5E5"> alright so that</font>

629
00:27:35,340 --> 00:27:41,490
covers<font color="#CCCCCC"> what I did</font><font color="#E5E5E5"> I think you</font><font color="#CCCCCC"> guys might</font>

630
00:27:39,390 --> 00:27:43,470
<font color="#E5E5E5">have questions here before I move up to</font>

631
00:27:41,490 --> 00:27:45,330
some<font color="#E5E5E5"> of</font><font color="#CCCCCC"> my conclusions</font><font color="#E5E5E5"> so I'm gonna open</font>

632
00:27:43,470 --> 00:27:49,040
<font color="#E5E5E5">the floor you guys have questions</font>

633
00:27:45,330 --> 00:27:51,659
oh it's quiet

634
00:27:49,040 --> 00:27:57,110
<font color="#E5E5E5">that's happen</font><font color="#CCCCCC"> I've been doing so</font><font color="#E5E5E5"> fast</font>

635
00:27:51,660 --> 00:27:57,110
<font color="#E5E5E5">okay sure</font><font color="#CCCCCC"> nobody alright</font>

636
00:27:58,040 --> 00:28:03,080
distributing this<font color="#E5E5E5"> across multiple nodes</font>

637
00:27:59,970 --> 00:28:03,080
<font color="#E5E5E5">worked very well we already knew that</font>

638
00:28:03,110 --> 00:28:07,949
<font color="#CCCCCC">adding some manual optimizations helps a</font>

639
00:28:06,180 --> 00:28:09,180
little bit<font color="#E5E5E5"> but not enough</font><font color="#CCCCCC"> for it to</font><font color="#E5E5E5"> be</font>

640
00:28:07,950 --> 00:28:13,020
<font color="#E5E5E5">worth it outside</font><font color="#CCCCCC"> of a hobbyist</font>

641
00:28:09,180 --> 00:28:14,730
perspective in most cases<font color="#E5E5E5"> and it's very</font>

642
00:28:13,020 --> 00:28:17,070
<font color="#CCCCCC">labor intensive</font><font color="#E5E5E5"> if you're curious about</font>

643
00:28:14,730 --> 00:28:21,600
saying of a similar<font color="#CCCCCC"> situation to</font><font color="#E5E5E5"> what I</font>

644
00:28:17,070 --> 00:28:24,210
<font color="#E5E5E5">did I did this for</font><font color="#CCCCCC"> about 300</font><font color="#E5E5E5"> bucks a</font>

645
00:28:21,600 --> 00:28:27,810
<font color="#E5E5E5">month worth of fuzzing and</font><font color="#CCCCCC"> we have a</font>

646
00:28:24,210 --> 00:28:28,860
good profit<font color="#E5E5E5"> on it on bugs</font><font color="#CCCCCC"> but if they</font>

647
00:28:27,810 --> 00:28:30,179
were<font color="#CCCCCC"> smart about</font><font color="#E5E5E5"> how they set it up</font>

648
00:28:28,860 --> 00:28:30,540
<font color="#E5E5E5">maybe you could do even better than</font><font color="#CCCCCC"> I</font>

649
00:28:30,180 --> 00:28:35,390
did

650
00:28:30,540 --> 00:28:38,490
so yes it's got<font color="#CCCCCC"> a doable breakeven I</font>

651
00:28:35,390 --> 00:28:40,980
don't<font color="#CCCCCC"> think it would</font><font color="#E5E5E5"> be any any cheaper</font>

652
00:28:38,490 --> 00:28:42,450
doing it with an at-home chart<font color="#E5E5E5"> a cluster</font>

653
00:28:40,980 --> 00:28:45,510
and paying<font color="#CCCCCC"> for your own</font><font color="#E5E5E5"> electricity and</font>

654
00:28:42,450 --> 00:28:50,490
cooling and stuff<font color="#CCCCCC"> just back of envelope</font>

655
00:28:45,510 --> 00:28:52,350
it seems like it's not viable<font color="#CCCCCC"> so we</font>

656
00:28:50,490 --> 00:28:54,780
didn't leave<font color="#E5E5E5"> we didn't add</font><font color="#CCCCCC"> any slick</font>

657
00:28:52,350 --> 00:28:56,610
continuous integration tools to this we

658
00:28:54,780 --> 00:29:00,180
didn't have any automatic deployment of

659
00:28:56,610 --> 00:29:03,270
nodes<font color="#CCCCCC"> that might be stuff to add for the</font>

660
00:29:00,180 --> 00:29:05,850
future<font color="#E5E5E5"> I'm definitely continuing this</font>

661
00:29:03,270 --> 00:29:08,760
<font color="#CCCCCC">research</font><font color="#E5E5E5"> I really want to find a way to</font>

662
00:29:05,850 --> 00:29:10,260
GPU<font color="#E5E5E5"> GPU eyes this I feel like that's the</font>

663
00:29:08,760 --> 00:29:12,840
<font color="#CCCCCC">future</font><font color="#E5E5E5"> of it really hard to do it</font>

664
00:29:10,260 --> 00:29:14,460
without<font color="#E5E5E5"> side effects</font><font color="#CCCCCC"> I think that a lot</font>

665
00:29:12,840 --> 00:29:15,629
of the<font color="#CCCCCC"> future of this is doing</font><font color="#E5E5E5"> chunks of</font>

666
00:29:14,460 --> 00:29:21,450
programs instead the whole thing's

667
00:29:15,630 --> 00:29:24,060
strategically<font color="#E5E5E5"> but it's hard and there's</font>

668
00:29:21,450 --> 00:29:25,740
all kinds of exotic solutions<font color="#E5E5E5"> you know</font>

669
00:29:24,060 --> 00:29:27,179
that<font color="#E5E5E5"> base fuzzing and that kind of thing</font>

670
00:29:25,740 --> 00:29:29,130
but

671
00:29:27,180 --> 00:29:31,710
that's that's<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> much where we're at</font>

672
00:29:29,130 --> 00:29:32,940
<font color="#CCCCCC">well that's the end</font><font color="#E5E5E5"> of my</font><font color="#CCCCCC"> talking if</font><font color="#E5E5E5"> you</font>

673
00:29:31,710 --> 00:29:33,180
guys have any other<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> let me</font>

674
00:29:32,940 --> 00:29:35,340
know

675
00:29:33,180 --> 00:29:38,550
my name is<font color="#E5E5E5"> John</font><font color="#CCCCCC"> dun laughs you're my</font>

676
00:29:35,340 --> 00:29:41,389
<font color="#E5E5E5">contact details and you can grab the</font>

677
00:29:38,550 --> 00:29:41,389
slides right<font color="#E5E5E5"> here</font>

678
00:29:45,080 --> 00:29:47,689
[Applause]

