1
00:00:00,030 --> 00:00:05,069
besides DC would like to thank all of

2
00:00:02,280 --> 00:00:07,470
our sponsors<font color="#E5E5E5"> and a special thank you to</font>

3
00:00:05,069 --> 00:00:10,969
all<font color="#E5E5E5"> of our speakers</font><font color="#CCCCCC"> volunteers and</font>

4
00:00:07,470 --> 00:00:16,619
organizers for making 2018<font color="#E5E5E5"> a success</font>

5
00:00:10,969 --> 00:00:20,220
<font color="#CCCCCC">hello my name is Nick Stevens</font><font color="#E5E5E5"> is it</font><font color="#CCCCCC"> okay</font>

6
00:00:16,619 --> 00:00:23,400
sorry<font color="#CCCCCC"> so my name</font><font color="#E5E5E5"> is Nick</font><font color="#CCCCCC"> I'll be talking</font>

7
00:00:20,220 --> 00:00:25,830
about<font color="#CCCCCC"> Huawei's fingerprint on the</font>

8
00:00:23,400 --> 00:00:27,448
<font color="#CCCCCC">vacation but mostly their trusted</font>

9
00:00:25,830 --> 00:00:28,799
implementation if you don't know what

10
00:00:27,449 --> 00:00:32,420
trisomy is<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> going to go over all of</font>

11
00:00:28,800 --> 00:00:34,530
<font color="#CCCCCC">that this talks mostly going to be</font><font color="#E5E5E5"> about</font>

12
00:00:32,420 --> 00:00:37,440
memory corruption bugs and how to

13
00:00:34,530 --> 00:00:39,570
exploit them in<font color="#E5E5E5"> huawei products unless</font>

14
00:00:37,440 --> 00:00:40,680
<font color="#E5E5E5">so about like a biometric bypass which</font>

15
00:00:39,570 --> 00:00:44,219
you might<font color="#E5E5E5"> expect for the title of the</font>

16
00:00:40,680 --> 00:00:46,469
talk<font color="#E5E5E5"> so the goal of this talk</font><font color="#CCCCCC"> is to</font>

17
00:00:44,219 --> 00:00:48,870
completely<font color="#E5E5E5"> for find a chain</font><font color="#CCCCCC"> of memory</font>

18
00:00:46,469 --> 00:00:50,789
corruption bugs in<font color="#CCCCCC"> Huawei's</font><font color="#E5E5E5"> trust in</font>

19
00:00:48,870 --> 00:00:52,050
architecture<font color="#E5E5E5"> to completely compromise</font>

20
00:00:50,789 --> 00:00:55,140
the phone and then disable<font color="#E5E5E5"> the</font>

21
00:00:52,050 --> 00:00:57,269
fingerprint sensor<font color="#CCCCCC"> so a little</font><font color="#E5E5E5"> bit about</font>

22
00:00:55,140 --> 00:01:01,410
myself<font color="#E5E5E5"> before</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> talk really</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> started</font>

23
00:00:57,270 --> 00:01:03,210
<font color="#E5E5E5">I play on the shelf</font><font color="#CCCCCC"> for CTF team if you</font>

24
00:01:01,410 --> 00:01:05,459
don't know what CTF<font color="#E5E5E5"> is it stands for</font>

25
00:01:03,210 --> 00:01:07,619
capture the flag it's a sort<font color="#E5E5E5"> of</font>

26
00:01:05,459 --> 00:01:09,809
simulated hacking exercise where teams

27
00:01:07,619 --> 00:01:12,180
compete against each other to break into

28
00:01:09,810 --> 00:01:14,540
each other's computers<font color="#E5E5E5"> most of times</font>

29
00:01:12,180 --> 00:01:16,500
involves like fake<font color="#CCCCCC"> pieces of software so</font>

30
00:01:14,540 --> 00:01:18,630
<font color="#E5E5E5">organizers will write up a bunch of fake</font>

31
00:01:16,500 --> 00:01:20,280
code or about just fake like email

32
00:01:18,630 --> 00:01:22,229
servers or web servers<font color="#CCCCCC"> and it's up</font><font color="#E5E5E5"> to</font>

33
00:01:20,280 --> 00:01:23,520
the players of the<font color="#CCCCCC"> game to find bugs and</font>

34
00:01:22,229 --> 00:01:25,439
then write exploits for those and

35
00:01:23,520 --> 00:01:26,820
typically our memory corruption bugs

36
00:01:25,439 --> 00:01:29,460
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> clipped</font><font color="#CCCCCC"> their bugs so it's mostly</font>

37
00:01:26,820 --> 00:01:31,949
the application<font color="#E5E5E5"> security auditing skills</font>

38
00:01:29,460 --> 00:01:34,589
at play here<font color="#CCCCCC"> so other things I've done</font>

39
00:01:31,950 --> 00:01:36,750
is I worked on<font color="#E5E5E5"> the cyber</font><font color="#CCCCCC"> grant</font><font color="#E5E5E5"> challenge</font>

40
00:01:34,590 --> 00:01:38,670
so<font color="#CCCCCC"> that was an automated CTF competition</font>

41
00:01:36,750 --> 00:01:40,829
<font color="#E5E5E5">we put on</font><font color="#CCCCCC"> my DARPA I've also</font><font color="#E5E5E5"> published</font>

42
00:01:38,670 --> 00:01:42,720
<font color="#CCCCCC">above research papers on topics like</font>

43
00:01:40,829 --> 00:01:45,529
automated exploitation and automated bug

44
00:01:42,720 --> 00:01:47,520
<font color="#CCCCCC">finding</font><font color="#E5E5E5"> and then I've also done some</font>

45
00:01:45,530 --> 00:01:48,540
<font color="#CCCCCC">research</font><font color="#E5E5E5"> on the trust so we're gonna</font>

46
00:01:47,520 --> 00:01:51,329
<font color="#E5E5E5">talk today and I've also published</font>

47
00:01:48,540 --> 00:01:54,000
<font color="#CCCCCC">papers on so</font><font color="#E5E5E5"> general just played a lot</font>

48
00:01:51,329 --> 00:01:56,279
of<font color="#E5E5E5"> CTF</font><font color="#CCCCCC"> which is one of</font><font color="#E5E5E5"> the ways I was</font>

49
00:01:54,000 --> 00:01:57,210
able<font color="#E5E5E5"> to you know acquire the background</font>

50
00:01:56,280 --> 00:01:59,189
necessary<font color="#CCCCCC"> to do this kind of research</font>

51
00:01:57,210 --> 00:02:00,869
<font color="#CCCCCC">and</font><font color="#E5E5E5"> another thing is I actually</font><font color="#CCCCCC"> worked</font>

52
00:01:59,189 --> 00:02:03,270
clearly<font color="#E5E5E5"> for Raytheon CSI as a</font>

53
00:02:00,869 --> 00:02:05,790
<font color="#E5E5E5">vulnerability researcher so if after</font>

54
00:02:03,270 --> 00:02:07,380
this talk if you decide<font color="#E5E5E5"> this is</font>

55
00:02:05,790 --> 00:02:08,700
something<font color="#E5E5E5"> that you would like to do as a</font>

56
00:02:07,380 --> 00:02:10,258
<font color="#E5E5E5">job</font>

57
00:02:08,699 --> 00:02:12,149
feel free to<font color="#E5E5E5"> talk to</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> afterwards we're</font>

58
00:02:10,258 --> 00:02:12,579
always hiring<font color="#E5E5E5"> and this is the kind of</font>

59
00:02:12,150 --> 00:02:17,380
thing I do

60
00:02:12,580 --> 00:02:19,600
every day so down to the actual<font color="#E5E5E5"> park</font><font color="#CCCCCC"> the</font>

61
00:02:17,380 --> 00:02:21,670
goal is to completely compromise the

62
00:02:19,600 --> 00:02:23,170
<font color="#CCCCCC">huawei p9 and they have it</font><font color="#E5E5E5"> actually</font>

63
00:02:21,670 --> 00:02:26,739
right<font color="#CCCCCC"> here I'll</font><font color="#E5E5E5"> be demonstrating</font><font color="#CCCCCC"> the</font>

64
00:02:23,170 --> 00:02:29,489
exploit on later<font color="#CCCCCC"> so we want to go from</font>

65
00:02:26,740 --> 00:02:32,490
an untrusted app which is an Android

66
00:02:29,490 --> 00:02:35,650
<font color="#E5E5E5">sandbox</font><font color="#CCCCCC"> selinux context</font><font color="#E5E5E5"> which</font>

67
00:02:32,490 --> 00:02:36,880
essentially is<font color="#CCCCCC"> any app that you have on</font>

68
00:02:35,650 --> 00:02:38,170
your phone that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> download from the</font>

69
00:02:36,880 --> 00:02:40,540
Play Store<font color="#E5E5E5"> and you give no permissions</font>

70
00:02:38,170 --> 00:02:42,940
to that's going<font color="#CCCCCC"> to become</font><font color="#E5E5E5"> an untrusted</font>

71
00:02:40,540 --> 00:02:44,230
app so all the default apps on your

72
00:02:42,940 --> 00:02:45,340
<font color="#CCCCCC">phone or</font><font color="#E5E5E5"> the apps</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're</font>

73
00:02:44,230 --> 00:02:48,519
downloading<font color="#CCCCCC"> are all considered to</font><font color="#E5E5E5"> be</font>

74
00:02:45,340 --> 00:02:52,030
untrusted and they're put into<font color="#CCCCCC"> a sandbox</font>

75
00:02:48,520 --> 00:02:53,680
<font color="#E5E5E5">that limits</font><font color="#CCCCCC"> what they can do so we're</font>

76
00:02:52,030 --> 00:02:55,120
gonna go from that position<font color="#E5E5E5"> and we're</font>

77
00:02:53,680 --> 00:02:57,580
gonna completely<font color="#E5E5E5"> compromise something</font>

78
00:02:55,120 --> 00:03:00,130
known as<font color="#E5E5E5"> the tea twee this stands for</font>

79
00:02:57,580 --> 00:03:02,890
<font color="#E5E5E5">the trusted execution environment and</font>

80
00:03:00,130 --> 00:03:06,609
this is actually sort<font color="#CCCCCC"> of a more</font><font color="#E5E5E5"> recent</font>

81
00:03:02,890 --> 00:03:09,070
and non-traditional<font color="#CCCCCC"> security layer that</font>

82
00:03:06,610 --> 00:03:10,959
is<font color="#CCCCCC"> actually seen a lot of Android</font><font color="#E5E5E5"> phones</font>

83
00:03:09,070 --> 00:03:12,670
now<font color="#E5E5E5"> I'm gonna be talking more about</font>

84
00:03:10,959 --> 00:03:14,950
exactly<font color="#CCCCCC"> what</font><font color="#E5E5E5"> that is and</font><font color="#CCCCCC"> then once we're</font>

85
00:03:12,670 --> 00:03:17,619
in this trust the most trusted layer of

86
00:03:14,950 --> 00:03:19,780
execution<font color="#CCCCCC"> or the most trusted ring we're</font>

87
00:03:17,620 --> 00:03:21,340
<font color="#E5E5E5">going to completely disable the</font>

88
00:03:19,780 --> 00:03:25,600
fingerprint sensor which executes in

89
00:03:21,340 --> 00:03:28,230
this context<font color="#CCCCCC"> so if you're unfamiliar</font>

90
00:03:25,600 --> 00:03:30,730
with the<font color="#CCCCCC"> trust zone it sort of divides</font>

91
00:03:28,230 --> 00:03:33,609
<font color="#E5E5E5">from add some new trust boundaries</font>

92
00:03:30,730 --> 00:03:35,738
actually to the security<font color="#CCCCCC"> architecture so</font>

93
00:03:33,610 --> 00:03:37,239
if you've<font color="#CCCCCC"> taken an OS class you might</font><font color="#E5E5E5"> be</font>

94
00:03:35,739 --> 00:03:39,910
<font color="#CCCCCC">familiar with you</font><font color="#E5E5E5"> know the difference</font>

95
00:03:37,239 --> 00:03:41,560
between user land and kernel<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> sort</font>

96
00:03:39,910 --> 00:03:43,450
of the most<font color="#E5E5E5"> typical trust boundary and</font>

97
00:03:41,560 --> 00:03:45,880
in this case and like on your desktop

98
00:03:43,450 --> 00:03:47,470
<font color="#CCCCCC">computer if you compromise your Linux</font>

99
00:03:45,880 --> 00:03:50,410
kernel or your Windows kernel<font color="#E5E5E5"> you've</font>

100
00:03:47,470 --> 00:03:51,519
<font color="#E5E5E5">completely owned the machine you have</font>

101
00:03:50,410 --> 00:03:52,780
all the<font color="#CCCCCC"> permissions to do</font><font color="#E5E5E5"> anything you</font>

102
00:03:51,519 --> 00:03:56,560
want<font color="#E5E5E5"> you can escalate your privileges</font>

103
00:03:52,780 --> 00:03:59,680
arbitrarily but<font color="#E5E5E5"> on a</font><font color="#CCCCCC"> Android phone or on</font>

104
00:03:56,560 --> 00:04:02,110
a phone running<font color="#E5E5E5"> on an ARM chip you have</font>

105
00:03:59,680 --> 00:04:03,280
the ability to<font color="#E5E5E5"> enable something called</font>

106
00:04:02,110 --> 00:04:06,540
the trust zone which<font color="#E5E5E5"> is where like a</font>

107
00:04:03,280 --> 00:04:09,760
shadow<font color="#E5E5E5"> world</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> adds</font><font color="#CCCCCC"> another layer of</font>

108
00:04:06,540 --> 00:04:12,040
<font color="#E5E5E5">permission boundaries so you have</font>

109
00:04:09,760 --> 00:04:14,410
another<font color="#CCCCCC"> kernel called the TOS</font><font color="#E5E5E5"> and you</font>

110
00:04:12,040 --> 00:04:17,228
have another<font color="#E5E5E5"> set of trusted applications</font>

111
00:04:14,410 --> 00:04:19,630
which all exist outside<font color="#E5E5E5"> of the scope of</font>

112
00:04:17,228 --> 00:04:22,810
the kernel so<font color="#CCCCCC"> the</font><font color="#E5E5E5"> T is the most</font>

113
00:04:19,630 --> 00:04:24,260
<font color="#E5E5E5">privileged layer here and it has the</font>

114
00:04:22,810 --> 00:04:27,620
permission<font color="#CCCCCC"> to read</font><font color="#E5E5E5"> anything</font>

115
00:04:24,260 --> 00:04:29,300
within the<font color="#CCCCCC"> Android</font><font color="#E5E5E5"> world</font><font color="#CCCCCC"> on the left the</font>

116
00:04:27,620 --> 00:04:30,860
<font color="#E5E5E5">green side but the and rule does not</font>

117
00:04:29,300 --> 00:04:33,320
<font color="#CCCCCC">permission to read anything in the blue</font>

118
00:04:30,860 --> 00:04:34,550
world the<font color="#E5E5E5"> tea world</font><font color="#CCCCCC"> so just to break</font>

119
00:04:33,320 --> 00:04:36,010
down<font color="#E5E5E5"> with some examples of things you</font>

120
00:04:34,550 --> 00:04:38,180
<font color="#CCCCCC">see these</font><font color="#E5E5E5"> different permission levels</font>

121
00:04:36,010 --> 00:04:39,590
<font color="#E5E5E5">and the most at the lowest level</font><font color="#CCCCCC"> and</font>

122
00:04:38,180 --> 00:04:41,420
<font color="#E5E5E5">userland you have things like chrome</font>

123
00:04:39,590 --> 00:04:43,489
your browser you have<font color="#E5E5E5"> all your</font>

124
00:04:41,420 --> 00:04:45,110
applications<font color="#E5E5E5"> then you have your kernel</font>

125
00:04:43,490 --> 00:04:46,550
Android which resembles Linux with a

126
00:04:45,110 --> 00:04:48,590
couple of<font color="#E5E5E5"> different lines</font><font color="#CCCCCC"> added</font><font color="#E5E5E5"> for like</font>

127
00:04:46,550 --> 00:04:50,930
networking permissions<font color="#E5E5E5"> and then you have</font>

128
00:04:48,590 --> 00:04:53,119
this<font color="#E5E5E5"> tea with the trusted apps these</font>

129
00:04:50,930 --> 00:04:54,950
<font color="#E5E5E5">don't have names you will be familiar</font>

130
00:04:53,120 --> 00:04:57,440
<font color="#E5E5E5">with</font><font color="#CCCCCC"> these applications but they do</font>

131
00:04:54,950 --> 00:05:00,020
things<font color="#E5E5E5"> like handle secure storage</font><font color="#CCCCCC"> secure</font>

132
00:04:57,440 --> 00:05:01,790
secure<font color="#CCCCCC"> payment</font><font color="#E5E5E5"> there's something called</font>

133
00:05:00,020 --> 00:05:02,690
the trusted UI in<font color="#CCCCCC"> huawei's case I don't</font>

134
00:05:01,790 --> 00:05:04,970
<font color="#CCCCCC">actually know what that does I think</font>

135
00:05:02,690 --> 00:05:06,890
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> something to do with the pin and</font>

136
00:05:04,970 --> 00:05:08,330
<font color="#E5E5E5">then you also need another kernel to</font>

137
00:05:06,890 --> 00:05:10,460
support these applications because they

138
00:05:08,330 --> 00:05:12,469
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> do things like</font><font color="#CCCCCC"> that memory and</font>

139
00:05:10,460 --> 00:05:18,020
perform i pc so you have all these

140
00:05:12,470 --> 00:05:21,200
different<font color="#E5E5E5"> layers</font><font color="#CCCCCC"> so to</font><font color="#E5E5E5"> begin really or</font>

141
00:05:18,020 --> 00:05:23,570
<font color="#CCCCCC">to to start exploiting a trust and a</font><font color="#E5E5E5"> per</font>

142
00:05:21,200 --> 00:05:25,520
take complete<font color="#CCCCCC"> control of it we're gonna</font>

143
00:05:23,570 --> 00:05:27,140
go through<font color="#E5E5E5"> and individually</font><font color="#CCCCCC"> compromise</font>

144
00:05:25,520 --> 00:05:29,210
every single<font color="#E5E5E5"> layers starting at</font><font color="#CCCCCC"> usual</font>

145
00:05:27,140 --> 00:05:31,880
<font color="#CCCCCC">end so we're going</font><font color="#E5E5E5"> to be exploiting bugs</font>

146
00:05:29,210 --> 00:05:33,919
<font color="#E5E5E5">in some</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> always Android kernel which</font>

147
00:05:31,880 --> 00:05:35,990
is Linux so there's actually<font color="#CCCCCC"> a kernel</font>

148
00:05:33,920 --> 00:05:38,570
module particulars<font color="#CCCCCC"> I'll be exploiting</font>

149
00:05:35,990 --> 00:05:40,070
then once we have root on<font color="#CCCCCC"> the phone so</font>

150
00:05:38,570 --> 00:05:41,810
that<font color="#E5E5E5"> first stage in green that sort of</font>

151
00:05:40,070 --> 00:05:43,730
<font color="#E5E5E5">like rooting</font><font color="#CCCCCC"> an Android phone</font><font color="#E5E5E5"> once we</font>

152
00:05:41,810 --> 00:05:45,800
have root we're going to escalate<font color="#CCCCCC"> into</font>

153
00:05:43,730 --> 00:05:47,150
<font color="#E5E5E5">the</font><font color="#CCCCCC"> tea</font><font color="#E5E5E5"> so we're going to take over one</font>

154
00:05:45,800 --> 00:05:49,640
<font color="#CCCCCC">of the trusted applications that we</font><font color="#E5E5E5"> can</font>

155
00:05:47,150 --> 00:05:51,020
find bugs in now once we've done that we

156
00:05:49,640 --> 00:05:55,280
still actually<font color="#E5E5E5"> done a complete control</font>

157
00:05:51,020 --> 00:05:57,469
over the<font color="#E5E5E5"> tea so just to clarify while</font>

158
00:05:55,280 --> 00:05:59,780
<font color="#E5E5E5">the tea has</font><font color="#CCCCCC"> Google permission</font><font color="#E5E5E5"> then the</font>

159
00:05:57,470 --> 00:06:04,490
Android<font color="#CCCCCC"> world the green world or the</font>

160
00:05:59,780 --> 00:06:06,770
normal world we still need to get

161
00:06:04,490 --> 00:06:08,450
trusted<font color="#E5E5E5"> kernel code execution to</font>

162
00:06:06,770 --> 00:06:10,400
<font color="#E5E5E5">completely read out physical memory and</font>

163
00:06:08,450 --> 00:06:12,380
modify anything<font color="#E5E5E5"> at will so we're gonna</font>

164
00:06:10,400 --> 00:06:14,539
need<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> a bug in the trusted OS</font>

165
00:06:12,380 --> 00:06:16,700
<font color="#E5E5E5">once we found a bug in</font><font color="#CCCCCC"> the trusted app</font>

166
00:06:14,540 --> 00:06:17,750
so each one<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> stages is</font><font color="#CCCCCC"> going to</font>

167
00:06:16,700 --> 00:06:18,890
be a memory<font color="#E5E5E5"> comforting bug that we</font>

168
00:06:17,750 --> 00:06:24,980
exploit<font color="#CCCCCC"> that I'm going</font><font color="#E5E5E5"> to be going over</font>

169
00:06:18,890 --> 00:06:27,409
how<font color="#E5E5E5"> we topple each stage</font><font color="#CCCCCC"> so before I get</font>

170
00:06:24,980 --> 00:06:29,230
<font color="#E5E5E5">started</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the actual</font><font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> and how</font><font color="#CCCCCC"> the</font>

171
00:06:27,410 --> 00:06:33,410
<font color="#CCCCCC">trust zone architecture of</font><font color="#E5E5E5"> Huawei works</font>

172
00:06:29,230 --> 00:06:34,760
<font color="#E5E5E5">I am</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> sample here where I'm already</font>

173
00:06:33,410 --> 00:06:36,260
assumed that<font color="#E5E5E5"> I'm executing code on the</font>

174
00:06:34,760 --> 00:06:37,700
device and this is really a fair

175
00:06:36,260 --> 00:06:39,830
sumption for an attacker so a more

176
00:06:37,700 --> 00:06:42,070
<font color="#E5E5E5">realistic shade</font><font color="#CCCCCC"> might be getting code</font>

177
00:06:39,830 --> 00:06:44,060
execution in the<font color="#CCCCCC"> web browser like Chrome</font>

178
00:06:42,070 --> 00:06:46,130
<font color="#CCCCCC">people find</font><font color="#E5E5E5"> bugs all the time in web</font>

179
00:06:44,060 --> 00:06:47,660
browsers and then from there you would

180
00:06:46,130 --> 00:06:49,969
begin executing a payload which does

181
00:06:47,660 --> 00:06:51,290
<font color="#E5E5E5">this chain so</font><font color="#CCCCCC"> this is all possible to do</font>

182
00:06:49,970 --> 00:06:53,390
remotely<font color="#E5E5E5"> as well you just need</font><font color="#CCCCCC"> a couple</font>

183
00:06:51,290 --> 00:06:58,250
more bugs<font color="#CCCCCC"> in one of your</font><font color="#E5E5E5"> user land</font>

184
00:06:53,390 --> 00:07:01,010
applications so a little bit about who

185
00:06:58,250 --> 00:07:02,450
is<font color="#CCCCCC"> making these trust zones</font><font color="#E5E5E5"> so as I</font>

186
00:07:01,010 --> 00:07:04,010
mentioned before the trust<font color="#CCCCCC"> zone is</font>

187
00:07:02,450 --> 00:07:06,500
actually an<font color="#CCCCCC"> armed technology so it's</font>

188
00:07:04,010 --> 00:07:10,070
something<font color="#CCCCCC"> that comes on your your SOC</font>

189
00:07:06,500 --> 00:07:12,760
<font color="#E5E5E5">your</font><font color="#CCCCCC"> stocking on a chip</font><font color="#E5E5E5"> but it's it is</font>

190
00:07:10,070 --> 00:07:15,409
<font color="#E5E5E5">part</font><font color="#CCCCCC"> of the arm spec but every single</font>

191
00:07:12,760 --> 00:07:18,920
chip manufacturer<font color="#E5E5E5"> isn't putting their</font>

192
00:07:15,410 --> 00:07:20,180
own trust<font color="#E5E5E5"> zone</font><font color="#CCCCCC"> so some of the</font><font color="#E5E5E5"> two</font>

193
00:07:18,920 --> 00:07:22,040
<font color="#CCCCCC">manufactures that you have larger for</font>

194
00:07:20,180 --> 00:07:25,490
Qualcomm<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> for the most common in</font>

195
00:07:22,040 --> 00:07:27,050
the United States but Huawei<font color="#E5E5E5"> has their</font>

196
00:07:25,490 --> 00:07:30,020
own<font color="#E5E5E5"> shoe manufacturer known as high</font>

197
00:07:27,050 --> 00:07:31,160
silicon which<font color="#E5E5E5"> is Chinese it's also</font><font color="#CCCCCC"> mochi</font>

198
00:07:30,020 --> 00:07:33,469
this is probably good time<font color="#E5E5E5"> to mention</font>

199
00:07:31,160 --> 00:07:35,390
<font color="#E5E5E5">what one way is if</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> aren't</font>

200
00:07:33,470 --> 00:07:36,860
familiar Huawei<font color="#CCCCCC"> is a Chinese</font><font color="#E5E5E5"> phone</font>

201
00:07:35,390 --> 00:07:39,710
manufacturer they also make networking

202
00:07:36,860 --> 00:07:41,690
gear I'm sorry<font color="#E5E5E5"> I actually skipped over</font>

203
00:07:39,710 --> 00:07:43,729
this part because I just been using it

204
00:07:41,690 --> 00:07:46,310
<font color="#CCCCCC">for so long but they're not actually</font>

205
00:07:43,730 --> 00:07:47,600
very<font color="#E5E5E5"> common in the United States</font><font color="#CCCCCC"> because</font>

206
00:07:46,310 --> 00:07:49,340
<font color="#CCCCCC">they've lot of difficulty getting</font><font color="#E5E5E5"> into</font>

207
00:07:47,600 --> 00:07:51,710
<font color="#E5E5E5">the US market because they're blocked by</font>

208
00:07:49,340 --> 00:07:54,020
like Congress<font color="#CCCCCC"> it's not easy for them to</font>

209
00:07:51,710 --> 00:07:56,000
sell merchandise<font color="#E5E5E5"> here but they're</font>

210
00:07:54,020 --> 00:07:57,530
actually<font color="#E5E5E5"> really</font><font color="#CCCCCC"> common</font><font color="#E5E5E5"> of course in</font>

211
00:07:56,000 --> 00:08:00,620
China<font color="#CCCCCC"> but also in</font><font color="#E5E5E5"> Europe and other parts</font>

212
00:07:57,530 --> 00:08:03,320
<font color="#E5E5E5">of South</font><font color="#CCCCCC"> America so Huawei</font><font color="#E5E5E5"> is this very</font>

213
00:08:00,620 --> 00:08:06,350
<font color="#E5E5E5">popular cheap device that you don't see</font>

214
00:08:03,320 --> 00:08:08,570
in the US but they have all their<font color="#CCCCCC"> own</font>

215
00:08:06,350 --> 00:08:11,470
<font color="#CCCCCC">stuff to support this so while they use</font>

216
00:08:08,570 --> 00:08:14,000
arm which is<font color="#CCCCCC"> a you know the type of</font>

217
00:08:11,470 --> 00:08:17,360
processor which almost all Android

218
00:08:14,000 --> 00:08:19,010
<font color="#CCCCCC">phones use they do they're not using</font>

219
00:08:17,360 --> 00:08:22,390
<font color="#CCCCCC">Qualcomm technology although</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of</font>

220
00:08:19,010 --> 00:08:25,490
their phones do<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> using their</font><font color="#CCCCCC"> own</font>

221
00:08:22,390 --> 00:08:27,020
in-house high silicon and another thing

222
00:08:25,490 --> 00:08:28,730
<font color="#E5E5E5">that makes the</font><font color="#CCCCCC"> T interesting is that</font>

223
00:08:27,020 --> 00:08:30,770
unlike<font color="#CCCCCC"> the rest of Android which is sort</font>

224
00:08:28,730 --> 00:08:33,860
of<font color="#E5E5E5"> forced to be open source</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> some</font>

225
00:08:30,770 --> 00:08:35,659
<font color="#E5E5E5">aspects the trust is not there's no</font>

226
00:08:33,860 --> 00:08:37,010
obligation<font color="#CCCCCC"> for a while way to publish</font>

227
00:08:35,659 --> 00:08:38,870
the source<font color="#E5E5E5"> code for any other trust owns</font>

228
00:08:37,010 --> 00:08:44,120
<font color="#E5E5E5">this is all things you have to reverse</font>

229
00:08:38,870 --> 00:08:45,420
engineer<font color="#E5E5E5"> off the phone now luckily for</font>

230
00:08:44,120 --> 00:08:47,820
the first<font color="#E5E5E5"> Sager bug</font>

231
00:08:45,420 --> 00:08:51,449
<font color="#CCCCCC">they are forced to open source</font><font color="#E5E5E5"> search</font>

232
00:08:47,820 --> 00:08:52,920
<font color="#E5E5E5">their kernel modules so we can do source</font>

233
00:08:51,450 --> 00:08:54,329
code auditing for the first stage but

234
00:08:52,920 --> 00:08:56,399
after that once we want to<font color="#E5E5E5"> mix begin</font>

235
00:08:54,329 --> 00:08:58,819
exploring the trusted apps and the

236
00:08:56,399 --> 00:09:02,040
<font color="#E5E5E5">trusted OS we're in reverse engineering</font>

237
00:08:58,820 --> 00:09:03,600
<font color="#E5E5E5">so how does a normal Android app</font>

238
00:09:02,040 --> 00:09:06,060
<font color="#E5E5E5">actually talk to the trust zone on</font>

239
00:09:03,600 --> 00:09:07,649
<font color="#CCCCCC">huawei actually kind of</font><font color="#E5E5E5"> a complicated</font>

240
00:09:06,060 --> 00:09:10,709
<font color="#CCCCCC">song-and-dance it has we</font><font color="#E5E5E5"> have to go</font>

241
00:09:07,649 --> 00:09:13,430
<font color="#E5E5E5">through</font><font color="#CCCCCC"> to to start</font><font color="#E5E5E5"> sending</font><font color="#CCCCCC"> messages to</font>

242
00:09:10,709 --> 00:09:15,959
things like<font color="#E5E5E5"> the secure storage trust lit</font>

243
00:09:13,430 --> 00:09:17,339
<font color="#E5E5E5">now one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> reasons this is this we</font>

244
00:09:15,959 --> 00:09:19,018
<font color="#E5E5E5">have this complicated outlook I'm gonna</font>

245
00:09:17,339 --> 00:09:20,579
be going through<font color="#E5E5E5"> each stage is that</font><font color="#CCCCCC"> the</font>

246
00:09:19,019 --> 00:09:22,350
trust lists themselves<font color="#E5E5E5"> actually want to</font>

247
00:09:20,579 --> 00:09:24,000
do permission checking<font color="#E5E5E5"> but because of</font>

248
00:09:22,350 --> 00:09:25,889
<font color="#E5E5E5">the strange divide between the normal</font>

249
00:09:24,000 --> 00:09:27,870
world and the secure world<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Trust's</font>

250
00:09:25,889 --> 00:09:30,329
themselves have no insight into<font color="#E5E5E5"> the</font>

251
00:09:27,870 --> 00:09:34,550
permissions of<font color="#CCCCCC"> the normal world</font><font color="#E5E5E5"> so all</font>

252
00:09:30,329 --> 00:09:36,870
<font color="#CCCCCC">your</font><font color="#E5E5E5"> you IDs and your</font><font color="#CCCCCC"> SEO Linux labels</font>

253
00:09:34,550 --> 00:09:38,189
<font color="#CCCCCC">those August and the Android kernel and</font>

254
00:09:36,870 --> 00:09:39,870
the trust<font color="#CCCCCC"> note has no idea</font><font color="#E5E5E5"> that the</font>

255
00:09:38,190 --> 00:09:41,550
<font color="#CCCCCC">system exists</font><font color="#E5E5E5"> so we need a way</font><font color="#CCCCCC"> of</font>

256
00:09:39,870 --> 00:09:45,899
communicating<font color="#E5E5E5"> that between the two</font>

257
00:09:41,550 --> 00:09:48,479
worlds<font color="#E5E5E5"> now</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> matters more</font>

258
00:09:45,899 --> 00:09:51,630
complicated<font color="#E5E5E5"> the instruction</font><font color="#CCCCCC"> that we use</font>

259
00:09:48,480 --> 00:09:54,180
on arm to actually send up payloads and

260
00:09:51,630 --> 00:09:55,560
buffers and arguments<font color="#CCCCCC"> and commands</font><font color="#E5E5E5"> to</font>

261
00:09:54,180 --> 00:09:57,449
the<font color="#E5E5E5"> trust</font><font color="#CCCCCC"> lists is a privilege</font>

262
00:09:55,560 --> 00:09:59,099
<font color="#E5E5E5">instruction so</font><font color="#CCCCCC"> are actually</font><font color="#E5E5E5"> introduced</font>

263
00:09:57,449 --> 00:10:01,170
<font color="#E5E5E5">this instruction called</font><font color="#CCCCCC"> SMC so you</font>

264
00:09:59,100 --> 00:10:03,180
should see<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the middle bar</font>

265
00:10:01,170 --> 00:10:05,459
I believe<font color="#E5E5E5"> this stands for secure monitor</font>

266
00:10:03,180 --> 00:10:08,550
call<font color="#E5E5E5"> this is actually call that will</font>

267
00:10:05,459 --> 00:10:10,739
interrupt the<font color="#E5E5E5"> trusted world and it will</font>

268
00:10:08,550 --> 00:10:13,170
allow the trusted world to take out any

269
00:10:10,740 --> 00:10:15,360
arguments in a register<font color="#CCCCCC"> and memory</font><font color="#E5E5E5"> and</font>

270
00:10:13,170 --> 00:10:17,729
begin passing<font color="#E5E5E5"> those off the trust loads</font>

271
00:10:15,360 --> 00:10:20,339
so to do this while<font color="#E5E5E5"> we introduces our</font>

272
00:10:17,730 --> 00:10:22,290
<font color="#E5E5E5">own kernel driver</font><font color="#CCCCCC"> there's a number of</font>

273
00:10:20,339 --> 00:10:24,810
bugs in<font color="#E5E5E5"> there but the problem</font><font color="#CCCCCC"> with the</font>

274
00:10:22,290 --> 00:10:27,329
kernel driver is also<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not easy for</font>

275
00:10:24,810 --> 00:10:29,029
the kernel driver to get the look up all

276
00:10:27,329 --> 00:10:31,140
this<font color="#CCCCCC"> information about particular</font><font color="#E5E5E5"> apps</font>

277
00:10:29,029 --> 00:10:32,699
or at least<font color="#E5E5E5"> one we found that</font><font color="#CCCCCC"> there was</font>

278
00:10:31,140 --> 00:10:34,860
an easy for them to<font color="#E5E5E5"> look up information</font>

279
00:10:32,699 --> 00:10:36,899
about<font color="#E5E5E5"> particular apps making requests so</font>

280
00:10:34,860 --> 00:10:38,490
they introduced<font color="#E5E5E5"> this</font><font color="#CCCCCC"> T connection daemon</font>

281
00:10:36,899 --> 00:10:40,230
which will actually<font color="#CCCCCC"> do the permission</font>

282
00:10:38,490 --> 00:10:42,120
checking's for us so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a user live</font>

283
00:10:40,230 --> 00:10:46,380
component that's listening<font color="#E5E5E5"> on a UNIX</font>

284
00:10:42,120 --> 00:10:49,199
domain socket<font color="#CCCCCC"> T CD</font><font color="#E5E5E5"> and it's going to be</font>

285
00:10:46,380 --> 00:10:53,189
taking requests from our<font color="#E5E5E5"> Android apps</font>

286
00:10:49,199 --> 00:10:53,810
<font color="#CCCCCC">and</font><font color="#E5E5E5"> it will be deciding</font><font color="#CCCCCC"> Sandra Rapp is</font>

287
00:10:53,190 --> 00:10:55,580
<font color="#E5E5E5">worthy</font>

288
00:10:53,810 --> 00:10:57,260
and then serializing a credential

289
00:10:55,580 --> 00:10:58,640
structure<font color="#CCCCCC"> sitting then off to</font><font color="#E5E5E5"> the kernel</font>

290
00:10:57,260 --> 00:11:00,110
driver and don't be the<font color="#E5E5E5"> responsibility</font>

291
00:10:58,640 --> 00:11:02,029
<font color="#E5E5E5">the kernel driver to send it off</font><font color="#CCCCCC"> to all</font>

292
00:11:00,110 --> 00:11:03,529
the trust<font color="#CCCCCC"> 'lets that want to do</font>

293
00:11:02,029 --> 00:11:04,700
permission checking themselves so<font color="#E5E5E5"> our</font>

294
00:11:03,529 --> 00:11:07,520
<font color="#CCCCCC">interrupts</font><font color="#E5E5E5"> don't have direct</font><font color="#CCCCCC"> permission</font>

295
00:11:04,700 --> 00:11:10,580
<font color="#E5E5E5">to talk</font><font color="#CCCCCC"> to the kernel driver</font><font color="#E5E5E5"> so it can't</font>

296
00:11:07,520 --> 00:11:14,089
<font color="#CCCCCC">just open dev</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> TZ driver</font><font color="#E5E5E5"> it has</font>

297
00:11:10,580 --> 00:11:16,690
to talk to<font color="#CCCCCC"> TC</font><font color="#E5E5E5"> D and if t CD deems</font><font color="#CCCCCC"> the</font>

298
00:11:14,089 --> 00:11:18,800
app worthy and will open<font color="#CCCCCC"> up the driver</font>

299
00:11:16,690 --> 00:11:19,940
<font color="#E5E5E5">it's going to take that file descriptor</font>

300
00:11:18,800 --> 00:11:22,130
<font color="#CCCCCC">and then once you send the file</font>

301
00:11:19,940 --> 00:11:23,690
descriptor<font color="#CCCCCC"> to or</font><font color="#E5E5E5"> Android app using the</font>

302
00:11:22,130 --> 00:11:24,650
UNIX domain sockets so if you didn't

303
00:11:23,690 --> 00:11:27,080
know<font color="#CCCCCC"> this is actually kind of a cool</font>

304
00:11:24,650 --> 00:11:29,170
<font color="#E5E5E5">plastic thing you can actually send file</font>

305
00:11:27,080 --> 00:11:31,940
descriptors over UNIX domain sockets

306
00:11:29,170 --> 00:11:33,920
so once<font color="#CCCCCC"> GCD has open you know has</font><font color="#E5E5E5"> that</font>

307
00:11:31,940 --> 00:11:35,150
<font color="#CCCCCC">file descriptor it can wrap it</font><font color="#E5E5E5"> up and</font>

308
00:11:33,920 --> 00:11:37,219
pass it to<font color="#CCCCCC"> our Android app and now</font>

309
00:11:35,150 --> 00:11:39,020
<font color="#CCCCCC">Android</font><font color="#E5E5E5"> have app has a new file</font>

310
00:11:37,220 --> 00:11:42,260
descriptor in its<font color="#E5E5E5"> process and it can</font><font color="#CCCCCC"> use</font>

311
00:11:39,020 --> 00:11:44,870
it to<font color="#CCCCCC"> communicate to the kernel driver</font>

312
00:11:42,260 --> 00:11:46,310
which is<font color="#E5E5E5"> known as TC NS client and once</font>

313
00:11:44,870 --> 00:11:49,790
we have that we<font color="#CCCCCC"> can begin directly</font>

314
00:11:46,310 --> 00:11:51,050
<font color="#E5E5E5">sending Lionel's to the driver and the</font>

315
00:11:49,790 --> 00:11:52,279
independent<font color="#CCCCCC"> one</font><font color="#E5E5E5"> I out don't we said</font>

316
00:11:51,050 --> 00:11:54,410
there's one<font color="#E5E5E5"> this you know essentially</font>

317
00:11:52,279 --> 00:11:56,360
called issue trust<font color="#E5E5E5"> zone command the</font>

318
00:11:54,410 --> 00:11:59,569
<font color="#CCCCCC">programmer will go off it will execute</font>

319
00:11:56,360 --> 00:12:01,190
an SMC<font color="#E5E5E5"> to the trust let's and then the</font>

320
00:11:59,570 --> 00:12:02,750
SMC<font color="#E5E5E5"> is well it's going to</font><font color="#CCCCCC"> actually go to</font>

321
00:12:01,190 --> 00:12:04,670
<font color="#E5E5E5">the trusted core the trusted</font><font color="#CCCCCC"> coercing in</font>

322
00:12:02,750 --> 00:12:05,870
a dispatcher to a<font color="#E5E5E5"> trust</font><font color="#CCCCCC"> list and then</font>

323
00:12:04,670 --> 00:12:07,969
the<font color="#E5E5E5"> trust will begin making their own</font>

324
00:12:05,870 --> 00:12:09,440
<font color="#E5E5E5">system calls to the trusted core as a</font>

325
00:12:07,970 --> 00:12:12,530
need be like<font color="#CCCCCC"> formatting memory and so</font>

326
00:12:09,440 --> 00:12:15,980
forth<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> have all these sort of</font>

327
00:12:12,530 --> 00:12:17,150
<font color="#CCCCCC">different you know parameters being</font>

328
00:12:15,980 --> 00:12:20,690
passed<font color="#E5E5E5"> around and crossing across</font>

329
00:12:17,150 --> 00:12:23,750
<font color="#E5E5E5">boundaries here so we're gonna begin</font>

330
00:12:20,690 --> 00:12:25,520
getting<font color="#CCCCCC"> through the bugs now so the very</font>

331
00:12:23,750 --> 00:12:28,280
first<font color="#CCCCCC"> step is targeting the trust zone</font>

332
00:12:25,520 --> 00:12:31,760
driver<font color="#E5E5E5"> so it turns out that</font><font color="#CCCCCC"> on Huawei</font>

333
00:12:28,280 --> 00:12:33,140
you can actually sort<font color="#E5E5E5"> of authenticate to</font>

334
00:12:31,760 --> 00:12:34,370
the<font color="#CCCCCC"> trusted driver without a group</font>

335
00:12:33,140 --> 00:12:36,530
having permissions to talk to any

336
00:12:34,370 --> 00:12:37,730
particular<font color="#CCCCCC"> trust little</font><font color="#E5E5E5"> app and you can</font>

337
00:12:36,530 --> 00:12:41,360
<font color="#E5E5E5">still send commands</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> something known</font>

338
00:12:37,730 --> 00:12:44,030
as<font color="#E5E5E5"> the global</font><font color="#CCCCCC"> task so here I have a</font>

339
00:12:41,360 --> 00:12:46,370
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

340
00:12:44,030 --> 00:12:47,449
trusted driver is<font color="#CCCCCC"> responsible for like</font>

341
00:12:46,370 --> 00:12:49,760
logging<font color="#E5E5E5"> in the app which have already</font>

342
00:12:47,450 --> 00:12:51,890
<font color="#E5E5E5">kind of mentioned</font><font color="#CCCCCC"> and proxying the calls</font>

343
00:12:49,760 --> 00:12:54,290
but some mostly interesting about of

344
00:12:51,890 --> 00:12:56,330
this<font color="#E5E5E5"> is that trust the trusted driver</font>

345
00:12:54,290 --> 00:12:57,860
<font color="#E5E5E5">also has to handle the serialization</font><font color="#CCCCCC"> of</font>

346
00:12:56,330 --> 00:13:00,000
all these from parameters<font color="#CCCCCC"> were going to</font>

347
00:12:57,860 --> 00:13:01,530
send<font color="#E5E5E5"> up so</font>

348
00:13:00,000 --> 00:13:02,880
our<font color="#CCCCCC"> trusses are going to be expecting</font>

349
00:13:01,530 --> 00:13:05,030
<font color="#E5E5E5">different kinds of arguments in the</font>

350
00:13:02,880 --> 00:13:07,860
forms of<font color="#CCCCCC"> memory references and integers</font>

351
00:13:05,030 --> 00:13:10,170
<font color="#E5E5E5">now</font><font color="#CCCCCC"> that mortgages</font><font color="#E5E5E5"> references are kind</font>

352
00:13:07,860 --> 00:13:11,910
<font color="#CCCCCC">of interesting because the way</font><font color="#E5E5E5"> we pass</font>

353
00:13:10,170 --> 00:13:13,170
<font color="#CCCCCC">amount of data up to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> trust zone is</font>

354
00:13:11,910 --> 00:13:15,810
by<font color="#CCCCCC"> actually just passing</font><font color="#E5E5E5"> them literal</font>

355
00:13:13,170 --> 00:13:18,510
pages of information<font color="#E5E5E5"> so we pass up these</font>

356
00:13:15,810 --> 00:13:20,520
buffers<font color="#CCCCCC"> I'm going to be</font><font color="#E5E5E5"> going over why</font>

357
00:13:18,510 --> 00:13:21,689
that is and it's too vulnerable<font color="#CCCCCC"> here</font>

358
00:13:20,520 --> 00:13:24,420
that we're going to exploit from<font color="#E5E5E5"> an</font>

359
00:13:21,690 --> 00:13:28,710
<font color="#E5E5E5">Android app to</font><font color="#CCCCCC"> route the</font><font color="#E5E5E5"> phone and take</font>

360
00:13:24,420 --> 00:13:30,569
over the kernel driver<font color="#E5E5E5"> now as I've</font>

361
00:13:28,710 --> 00:13:31,980
already<font color="#CCCCCC"> mentioned these</font><font color="#E5E5E5"> two worlds and</font>

362
00:13:30,570 --> 00:13:34,590
old and the secure<font color="#E5E5E5"> world don't actually</font>

363
00:13:31,980 --> 00:13:36,570
have<font color="#E5E5E5"> a lot in</font><font color="#CCCCCC"> common the</font><font color="#E5E5E5"> only thing that</font>

364
00:13:34,590 --> 00:13:39,720
they do have<font color="#E5E5E5"> a common in one way they</font>

365
00:13:36,570 --> 00:13:41,070
can<font color="#E5E5E5"> they can sort of communicate with</font>

366
00:13:39,720 --> 00:13:42,180
one each other using<font color="#CCCCCC"> this</font><font color="#E5E5E5"> from a shared</font>

367
00:13:41,070 --> 00:13:44,340
language<font color="#E5E5E5"> is through the physical</font>

368
00:13:42,180 --> 00:13:46,640
addresses that they both know about so

369
00:13:44,340 --> 00:13:48,720
the trusted core has a<font color="#CCCCCC"> one-to-one</font>

370
00:13:46,640 --> 00:13:50,220
virtual address space<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> map it's the</font>

371
00:13:48,720 --> 00:13:52,470
physical<font color="#CCCCCC"> address space</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> this</font>

372
00:13:50,220 --> 00:13:54,720
<font color="#CCCCCC">means is that all</font><font color="#E5E5E5"> the virtual addresses</font>

373
00:13:52,470 --> 00:13:56,070
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the trusted course see the values</font>

374
00:13:54,720 --> 00:13:57,840
of those<font color="#CCCCCC"> addresses are the exact same</font>

375
00:13:56,070 --> 00:14:01,530
values as their corresponding physical

376
00:13:57,840 --> 00:14:03,120
<font color="#E5E5E5">addresses now the your Linux kernel in</font>

377
00:14:01,530 --> 00:14:04,439
the Android kernel<font color="#E5E5E5"> and</font><font color="#CCCCCC"> user land this</font><font color="#E5E5E5"> is</font>

378
00:14:03,120 --> 00:14:06,060
<font color="#CCCCCC">in the case the virtual addresses</font>

379
00:14:04,440 --> 00:14:07,500
themselves are<font color="#E5E5E5"> not the same value</font><font color="#CCCCCC"> as the</font>

380
00:14:06,060 --> 00:14:08,790
physical address page that they

381
00:14:07,500 --> 00:14:11,070
correspond to

382
00:14:08,790 --> 00:14:14,430
but the kernel doesn't permissions to

383
00:14:11,070 --> 00:14:17,670
look up what the<font color="#E5E5E5"> physical address values</font>

384
00:14:14,430 --> 00:14:21,510
are of<font color="#E5E5E5"> those of those virtual pages so</font>

385
00:14:17,670 --> 00:14:24,209
what the normal rule is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to do to</font>

386
00:14:21,510 --> 00:14:26,550
pass up<font color="#E5E5E5"> pages to the trusted core and</font>

387
00:14:24,210 --> 00:14:28,200
it's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to find the</font><font color="#E5E5E5"> memory reference</font>

388
00:14:26,550 --> 00:14:30,120
<font color="#E5E5E5">and</font><font color="#CCCCCC"> it's interested in so</font><font color="#E5E5E5"> Sam</font><font color="#CCCCCC"> user line</font>

389
00:14:28,200 --> 00:14:32,610
<font color="#E5E5E5">app that</font><font color="#CCCCCC"> wants to pass up a buffer to</font>

390
00:14:30,120 --> 00:14:34,290
the<font color="#E5E5E5"> trust lit and what it's going</font><font color="#CCCCCC"> to do</font>

391
00:14:32,610 --> 00:14:36,660
is it's<font color="#E5E5E5"> going to look up the</font><font color="#CCCCCC"> physical</font>

392
00:14:34,290 --> 00:14:38,010
page address of<font color="#CCCCCC"> that buffer</font><font color="#E5E5E5"> and it's</font>

393
00:14:36,660 --> 00:14:39,390
<font color="#E5E5E5">going to pass that to the trusted core</font>

394
00:14:38,010 --> 00:14:40,980
<font color="#CCCCCC">the trust of course</font><font color="#E5E5E5"> going to say I know</font>

395
00:14:39,390 --> 00:14:42,870
<font color="#CCCCCC">exactly what you're talking about</font><font color="#E5E5E5"> I know</font>

396
00:14:40,980 --> 00:14:44,370
physical addresses as<font color="#E5E5E5"> well and then it's</font>

397
00:14:42,870 --> 00:14:47,280
going<font color="#CCCCCC"> to take that physical address it's</font>

398
00:14:44,370 --> 00:14:49,950
<font color="#CCCCCC">gonna map it in to the destination trust</font>

399
00:14:47,280 --> 00:14:51,449
<font color="#CCCCCC">its address space</font><font color="#E5E5E5"> now this also becomes</font>

400
00:14:49,950 --> 00:14:53,100
tricky because the destination trust

401
00:14:51,450 --> 00:14:55,740
loads<font color="#CCCCCC"> this</font><font color="#E5E5E5"> in their own</font><font color="#CCCCCC"> address space as</font>

402
00:14:53,100 --> 00:14:56,670
well with a<font color="#E5E5E5"> SLR</font><font color="#CCCCCC"> so just like your kernel</font>

403
00:14:55,740 --> 00:14:57,870
and you

404
00:14:56,670 --> 00:15:00,540
usually the apps in<font color="#CCCCCC"> the normal world</font>

405
00:14:57,870 --> 00:15:02,310
<font color="#CCCCCC">your destination trust let's also are</font>

406
00:15:00,540 --> 00:15:03,990
operating on virtual addresses that they

407
00:15:02,310 --> 00:15:05,550
don't know<font color="#E5E5E5"> the physical addresses for so</font>

408
00:15:03,990 --> 00:15:07,050
you need this middleman the trusted<font color="#E5E5E5"> core</font>

409
00:15:05,550 --> 00:15:10,290
<font color="#E5E5E5">to take the physical addresses and</font>

410
00:15:07,050 --> 00:15:12,449
convert them on both<font color="#E5E5E5"> sides</font><font color="#CCCCCC"> well excuse</font>

411
00:15:10,290 --> 00:15:13,620
me<font color="#E5E5E5"> the rhythm on one side</font><font color="#CCCCCC"> the normal</font>

412
00:15:12,450 --> 00:15:16,530
world<font color="#CCCCCC"> kernel is going to handle</font>

413
00:15:13,620 --> 00:15:19,500
converting them on<font color="#CCCCCC"> its side before</font>

414
00:15:16,530 --> 00:15:22,800
passing them to the trusted core<font color="#E5E5E5"> so this</font>

415
00:15:19,500 --> 00:15:25,320
introduces some issue in<font color="#E5E5E5"> particular this</font>

416
00:15:22,800 --> 00:15:27,479
means they<font color="#CCCCCC"> actually have to handle</font>

417
00:15:25,320 --> 00:15:31,170
<font color="#E5E5E5">converting the virtual dresses we pass</font>

418
00:15:27,480 --> 00:15:34,370
in into physical addresses now the very

419
00:15:31,170 --> 00:15:38,699
first bug<font color="#E5E5E5"> that we see is in this</font>

420
00:15:34,370 --> 00:15:41,280
functionality<font color="#E5E5E5"> now if we want to pass up</font>

421
00:15:38,700 --> 00:15:44,040
<font color="#E5E5E5">a</font><font color="#CCCCCC"> buffer</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the trust</font><font color="#E5E5E5"> lit what we need</font>

422
00:15:41,280 --> 00:15:46,380
to do is actually register mappings with

423
00:15:44,040 --> 00:15:50,099
the kernel<font color="#E5E5E5"> or with the trust own kernel</font>

424
00:15:46,380 --> 00:15:53,640
driver<font color="#E5E5E5"> the way my way it's nice to</font>

425
00:15:50,100 --> 00:15:55,800
handle<font color="#E5E5E5"> this is they implement a version</font>

426
00:15:53,640 --> 00:15:58,050
of<font color="#CCCCCC"> a map</font><font color="#E5E5E5"> so if you're unfamiliar</font><font color="#CCCCCC"> with</font>

427
00:15:55,800 --> 00:15:59,760
<font color="#E5E5E5">the map system :</font><font color="#CCCCCC"> Linux essentially just</font>

428
00:15:58,050 --> 00:16:02,790
allows you to allocate a new<font color="#E5E5E5"> page or a</font>

429
00:15:59,760 --> 00:16:04,680
number<font color="#CCCCCC"> of pages in your process so your</font>

430
00:16:02,790 --> 00:16:08,670
heap and your stack all under the hood

431
00:16:04,680 --> 00:16:10,890
are using<font color="#CCCCCC"> M map so they'll MF in this</font>

432
00:16:08,670 --> 00:16:13,290
new page<font color="#E5E5E5"> using the file descriptor of</font>

433
00:16:10,890 --> 00:16:15,510
the<font color="#CCCCCC"> trusted driver</font><font color="#E5E5E5"> and once they see</font>

434
00:16:13,290 --> 00:16:17,579
<font color="#CCCCCC">that MF call occur they say ok I'm now</font>

435
00:16:15,510 --> 00:16:19,920
aware<font color="#CCCCCC"> of this page I'm gonna</font><font color="#E5E5E5"> add it to</font>

436
00:16:17,580 --> 00:16:21,930
my list<font color="#E5E5E5"> of known</font><font color="#CCCCCC"> trip memory pages and</font>

437
00:16:19,920 --> 00:16:26,040
now what's it about this page will allow

438
00:16:21,930 --> 00:16:29,219
<font color="#E5E5E5">any</font><font color="#CCCCCC"> userland apps to make requests</font>

439
00:16:26,040 --> 00:16:31,439
referencing this page and<font color="#CCCCCC"> they can they</font>

440
00:16:29,220 --> 00:16:33,860
can pass up an offset<font color="#E5E5E5"> into this page of</font>

441
00:16:31,440 --> 00:16:37,020
where they want the information<font color="#E5E5E5"> to</font><font color="#CCCCCC"> begin</font>

442
00:16:33,860 --> 00:16:39,210
so as you can<font color="#CCCCCC"> see if you've</font><font color="#E5E5E5"> been looking</font>

443
00:16:37,020 --> 00:16:41,610
at this code<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> entering over this</font>

444
00:16:39,210 --> 00:16:44,430
linked list<font color="#CCCCCC"> and then they make</font><font color="#E5E5E5"> it sure</font>

445
00:16:41,610 --> 00:16:46,890
<font color="#CCCCCC">that the</font><font color="#E5E5E5"> length that we're</font><font color="#CCCCCC"> passing in is</font>

446
00:16:44,430 --> 00:16:47,969
less than the<font color="#CCCCCC"> actual page or less an</font>

447
00:16:46,890 --> 00:16:49,770
actual<font color="#CCCCCC"> obscure memory</font><font color="#E5E5E5"> region that we</font>

448
00:16:47,970 --> 00:16:52,420
registered<font color="#E5E5E5"> with but then one thing that</font>

449
00:16:49,770 --> 00:16:54,970
they don't<font color="#E5E5E5"> check is they do share mem</font>

450
00:16:52,420 --> 00:16:56,469
<font color="#CCCCCC">cruel adder</font><font color="#E5E5E5"> plus client program memory</font>

451
00:16:54,970 --> 00:16:58,930
<font color="#CCCCCC">if off said they</font><font color="#E5E5E5"> never checked the</font>

452
00:16:56,470 --> 00:17:01,810
member of offset<font color="#E5E5E5"> so we can arbitrarily</font>

453
00:16:58,930 --> 00:17:04,030
specify this<font color="#E5E5E5"> now what this means is we</font>

454
00:17:01,810 --> 00:17:06,520
<font color="#CCCCCC">can</font><font color="#E5E5E5"> actually go completely</font><font color="#CCCCCC"> out of bounds</font>

455
00:17:04,030 --> 00:17:09,369
of the page that<font color="#CCCCCC"> we allocated and we can</font>

456
00:17:06,520 --> 00:17:11,349
go point to another physical page<font color="#CCCCCC"> now</font>

457
00:17:09,369 --> 00:17:13,659
this will actually<font color="#CCCCCC"> be interesting if</font>

458
00:17:11,349 --> 00:17:15,639
this was<font color="#CCCCCC"> just some page are usually in</font>

459
00:17:13,660 --> 00:17:18,069
process because we just<font color="#E5E5E5"> be specifying a</font>

460
00:17:15,640 --> 00:17:19,569
page further down using<font color="#E5E5E5"> a memory but</font>

461
00:17:18,069 --> 00:17:21,909
it's actually using the kernel address

462
00:17:19,569 --> 00:17:24,099
that corresponds<font color="#CCCCCC"> to the user land</font>

463
00:17:21,910 --> 00:17:26,049
address and it's adding<font color="#E5E5E5"> to that and then</font>

464
00:17:24,099 --> 00:17:28,299
converting that to a physical page so

465
00:17:26,049 --> 00:17:30,100
<font color="#E5E5E5">this allows us to do is</font><font color="#CCCCCC"> actually specify</font>

466
00:17:28,299 --> 00:17:33,730
an<font color="#CCCCCC"> arbitrary physical address and pass</font>

467
00:17:30,100 --> 00:17:36,370
it up to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> trusted core now</font><font color="#CCCCCC"> one might</font>

468
00:17:33,730 --> 00:17:37,630
see<font color="#E5E5E5"> this can become an issue because if</font>

469
00:17:36,370 --> 00:17:39,370
we could pass about an arbitrary

470
00:17:37,630 --> 00:17:41,679
physical address of<font color="#CCCCCC"> the trusted core and</font>

471
00:17:39,370 --> 00:17:42,939
the<font color="#E5E5E5"> secure world has no idea about the</font>

472
00:17:41,679 --> 00:17:44,740
<font color="#CCCCCC">different kinds of</font><font color="#E5E5E5"> permissions</font><font color="#CCCCCC"> in the</font>

473
00:17:42,940 --> 00:17:46,090
normal world<font color="#E5E5E5"> the trusted core might be</font>

474
00:17:44,740 --> 00:17:47,679
<font color="#E5E5E5">getting writing to a physical page that</font>

475
00:17:46,090 --> 00:17:50,530
belongs to the kernel<font color="#E5E5E5"> and not to user</font>

476
00:17:47,679 --> 00:17:52,150
<font color="#CCCCCC">lands so we can essentially use like a</font>

477
00:17:50,530 --> 00:17:53,440
confused<font color="#E5E5E5"> deputy attack where</font><font color="#CCCCCC"> the trusted</font>

478
00:17:52,150 --> 00:17:56,230
core has more permissions in the kernel

479
00:17:53,440 --> 00:18:00,630
itself<font color="#CCCCCC"> but</font><font color="#E5E5E5"> still wants to maintain</font>

480
00:17:56,230 --> 00:18:02,470
<font color="#E5E5E5">Commission boundaries of another world</font>

481
00:18:00,630 --> 00:18:04,059
<font color="#CCCCCC">unfortunately</font><font color="#E5E5E5"> there's no way</font><font color="#CCCCCC"> to do that</font>

482
00:18:02,470 --> 00:18:05,799
<font color="#E5E5E5">so it can</font><font color="#CCCCCC"> right through a physical</font><font color="#E5E5E5"> page</font>

483
00:18:04,059 --> 00:18:06,580
it doesn't<font color="#E5E5E5"> belong</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> app were just</font>

484
00:18:05,799 --> 00:18:09,220
<font color="#E5E5E5">making</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> request</font>

485
00:18:06,580 --> 00:18:10,750
<font color="#E5E5E5">so this allows us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> essentially in some</font>

486
00:18:09,220 --> 00:18:13,720
ways get<font color="#E5E5E5"> an arbitrary</font><font color="#CCCCCC"> write into the</font>

487
00:18:10,750 --> 00:18:14,679
kernel<font color="#CCCCCC"> now we need functionality in the</font>

488
00:18:13,720 --> 00:18:15,940
trust and that<font color="#E5E5E5"> will write to the</font>

489
00:18:14,679 --> 00:18:18,250
<font color="#E5E5E5">physical Patriot ass up and I'll show</font>

490
00:18:15,940 --> 00:18:21,730
<font color="#CCCCCC">that later</font><font color="#E5E5E5"> but another thing we</font><font color="#CCCCCC"> need in</font>

491
00:18:18,250 --> 00:18:23,559
kernel exploitation is a leak<font color="#CCCCCC"> so as I</font>

492
00:18:21,730 --> 00:18:25,410
<font color="#E5E5E5">mentioned before they have their own mmm</font>

493
00:18:23,559 --> 00:18:27,990
who mutation so if you've<font color="#E5E5E5"> ever done</font>

494
00:18:25,410 --> 00:18:30,030
<font color="#CCCCCC">kernel and external auditing before</font>

495
00:18:27,990 --> 00:18:32,080
little driver<font color="#CCCCCC"> on earthing particular</font>

496
00:18:30,030 --> 00:18:33,280
you'll know<font color="#E5E5E5"> they have this structure</font>

497
00:18:32,080 --> 00:18:34,960
<font color="#E5E5E5">where they implemented a number of</font>

498
00:18:33,280 --> 00:18:37,418
different operations<font color="#CCCCCC"> such as</font><font color="#E5E5E5"> open and I</font>

499
00:18:34,960 --> 00:18:39,610
<font color="#E5E5E5">octal and they can also automate and map</font>

500
00:18:37,419 --> 00:18:41,049
if you're unfamiliar with this<font color="#E5E5E5"> this is</font>

501
00:18:39,610 --> 00:18:42,189
<font color="#E5E5E5">just a mechanism where the driver could</font>

502
00:18:41,049 --> 00:18:43,929
essentially override a bunch<font color="#E5E5E5"> of</font>

503
00:18:42,190 --> 00:18:45,490
<font color="#E5E5E5">operations and implement their</font><font color="#CCCCCC"> own</font>

504
00:18:43,929 --> 00:18:47,500
versions<font color="#E5E5E5"> of things like our alpha land</font>

505
00:18:45,490 --> 00:18:47,900
<font color="#CCCCCC">end map so as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see they move</font>

506
00:18:47,500 --> 00:18:49,790
<font color="#E5E5E5">under there</font>

507
00:18:47,900 --> 00:18:52,720
<font color="#CCCCCC">you</font><font color="#E5E5E5"> mentioned a couple</font><font color="#CCCCCC"> of times and now</font>

508
00:18:49,790 --> 00:18:54,950
all this does is<font color="#E5E5E5"> get a number of pages</font>

509
00:18:52,720 --> 00:18:57,470
<font color="#E5E5E5">register is that</font><font color="#CCCCCC"> list</font><font color="#E5E5E5"> like I talked</font>

510
00:18:54,950 --> 00:19:00,260
about and then it will map the virtual

511
00:18:57,470 --> 00:19:03,440
address that we've<font color="#E5E5E5"> requested to the</font>

512
00:19:00,260 --> 00:19:05,480
pages<font color="#CCCCCC"> that</font><font color="#E5E5E5"> got with</font><font color="#CCCCCC"> get free pages now</font>

513
00:19:03,440 --> 00:19:07,160
this is kind of<font color="#CCCCCC"> tricky because a lot of</font>

514
00:19:05,480 --> 00:19:09,230
the<font color="#CCCCCC"> M</font><font color="#E5E5E5"> map system is actually already</font>

515
00:19:07,160 --> 00:19:11,570
handled by Linux proper or the kernel

516
00:19:09,230 --> 00:19:13,850
<font color="#E5E5E5">itself and the</font><font color="#CCCCCC"> mmm that we implement</font>

517
00:19:11,570 --> 00:19:16,250
only<font color="#E5E5E5"> has the ability to do a couple of</font>

518
00:19:13,850 --> 00:19:18,020
<font color="#E5E5E5">different things</font><font color="#CCCCCC"> pretty much only</font><font color="#E5E5E5"> handle</font>

519
00:19:16,250 --> 00:19:20,120
residual data that occurs because<font color="#E5E5E5"> of the</font>

520
00:19:18,020 --> 00:19:21,889
<font color="#E5E5E5">mm so Linux is going to be choosing</font><font color="#CCCCCC"> the</font>

521
00:19:20,120 --> 00:19:25,070
address that<font color="#E5E5E5"> it wants the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> and</font>

522
00:19:21,890 --> 00:19:27,110
process<font color="#CCCCCC"> the places page at</font><font color="#E5E5E5"> and typically</font>

523
00:19:25,070 --> 00:19:29,659
it also allocates memory already<font color="#E5E5E5"> so</font>

524
00:19:27,110 --> 00:19:33,649
while<font color="#CCCCCC"> way is completely just throwing it</font>

525
00:19:29,660 --> 00:19:38,210
away<font color="#CCCCCC"> so as you can see though we will</font>

526
00:19:33,650 --> 00:19:39,320
add this thing to the linked list now

527
00:19:38,210 --> 00:19:41,690
this<font color="#E5E5E5"> gets really interesting when</font><font color="#CCCCCC"> they</font>

528
00:19:39,320 --> 00:19:43,790
want to<font color="#CCCCCC"> unmapped something so something</font>

529
00:19:41,690 --> 00:19:45,110
<font color="#CCCCCC">that a naive kernel driver developer</font>

530
00:19:43,790 --> 00:19:46,790
might not know about is<font color="#CCCCCC"> that while</font><font color="#E5E5E5"> you</font>

531
00:19:45,110 --> 00:19:48,830
<font color="#E5E5E5">could implement</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> map you can't</font>

532
00:19:46,790 --> 00:19:50,330
implement<font color="#E5E5E5"> the inverse operation mud map</font>

533
00:19:48,830 --> 00:19:53,570
so<font color="#E5E5E5"> you can't actually implement</font>

534
00:19:50,330 --> 00:19:54,980
operation<font color="#CCCCCC"> that will mud map that area or</font>

535
00:19:53,570 --> 00:19:56,899
<font color="#E5E5E5">completely get rid</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the area in your</font>

536
00:19:54,980 --> 00:19:58,520
address space<font color="#E5E5E5"> or clean it up so to</font>

537
00:19:56,900 --> 00:20:02,180
handle<font color="#E5E5E5"> this they actually implemented a</font>

538
00:19:58,520 --> 00:20:05,060
new<font color="#CCCCCC"> I octal handler called TC NS client</font>

539
00:20:02,180 --> 00:20:08,780
<font color="#E5E5E5">I octal shared memory release and what</font>

540
00:20:05,060 --> 00:20:10,490
this does is it completely<font color="#E5E5E5"> just unlinks</font>

541
00:20:08,780 --> 00:20:13,670
a shared memory from<font color="#E5E5E5"> the linked list</font><font color="#CCCCCC"> now</font>

542
00:20:10,490 --> 00:20:15,050
that might seem<font color="#CCCCCC"> okay because it will</font>

543
00:20:13,670 --> 00:20:16,670
unlink<font color="#E5E5E5"> it from the linked list</font><font color="#CCCCCC"> and free</font>

544
00:20:15,050 --> 00:20:19,040
the physical pages associated<font color="#E5E5E5"> with it</font>

545
00:20:16,670 --> 00:20:24,410
but since<font color="#E5E5E5"> this</font><font color="#CCCCCC"> isn't going</font><font color="#E5E5E5"> through mud</font>

546
00:20:19,040 --> 00:20:29,540
<font color="#E5E5E5">map what actually occurs is you have</font>

547
00:20:24,410 --> 00:20:31,850
this issue where the the underlying<font color="#CCCCCC"> or</font>

548
00:20:29,540 --> 00:20:33,260
the virtual<font color="#E5E5E5"> the virtual address doesn't</font>

549
00:20:31,850 --> 00:20:36,379
<font color="#E5E5E5">actually correspond to the physical</font>

550
00:20:33,260 --> 00:20:38,120
<font color="#E5E5E5">pages which were just freed so what this</font>

551
00:20:36,380 --> 00:20:41,030
introduces<font color="#E5E5E5"> is actually a dangling page</font>

552
00:20:38,120 --> 00:20:43,520
in our<font color="#CCCCCC"> username process</font><font color="#E5E5E5"> so what will</font>

553
00:20:41,030 --> 00:20:44,930
occur is<font color="#CCCCCC"> we'll have a virtual</font><font color="#E5E5E5"> address</font>

554
00:20:43,520 --> 00:20:46,100
<font color="#CCCCCC">resilient process which was</font><font color="#E5E5E5"> never</font>

555
00:20:44,930 --> 00:20:48,260
cleaned up<font color="#E5E5E5"> because we're going through</font>

556
00:20:46,100 --> 00:20:49,280
<font color="#CCCCCC">my octal</font><font color="#E5E5E5"> and not mud map and we'll have</font>

557
00:20:48,260 --> 00:20:51,140
that virtual address pointing to a

558
00:20:49,280 --> 00:20:53,000
<font color="#E5E5E5">physical page so our page table will</font>

559
00:20:51,140 --> 00:20:54,530
never actually be cleaned up<font color="#CCCCCC"> and point</font>

560
00:20:53,000 --> 00:20:58,520
<font color="#E5E5E5">to musical page at the kernel</font><font color="#CCCCCC"> considers</font>

561
00:20:54,530 --> 00:21:00,649
free and this causes<font color="#E5E5E5"> all sorts of issues</font>

562
00:20:58,520 --> 00:21:02,330
the colonel thinks<font color="#E5E5E5"> this page is free but</font>

563
00:21:00,650 --> 00:21:04,610
<font color="#E5E5E5">our</font><font color="#CCCCCC"> Uslan process</font><font color="#E5E5E5"> can still actually</font>

564
00:21:02,330 --> 00:21:06,199
read and write<font color="#CCCCCC"> to that page so this is a</font>

565
00:21:04,610 --> 00:21:08,149
number<font color="#E5E5E5"> of consequences so if another</font>

566
00:21:06,200 --> 00:21:09,679
process for<font color="#CCCCCC"> example once</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> have mapped</font>

567
00:21:08,150 --> 00:21:11,720
something and needs a physical<font color="#E5E5E5"> page from</font>

568
00:21:09,679 --> 00:21:13,190
the<font color="#CCCCCC"> colonel the Chrome's gonna say oh</font><font color="#E5E5E5"> I</font>

569
00:21:11,720 --> 00:21:15,170
have a free page right<font color="#CCCCCC"> here it's</font><font color="#E5E5E5"> going</font>

570
00:21:13,190 --> 00:21:17,450
<font color="#E5E5E5">to give you the exact same page to the</font>

571
00:21:15,170 --> 00:21:20,450
user land process<font color="#CCCCCC"> that our user loan</font>

572
00:21:17,450 --> 00:21:22,429
process has or the<font color="#CCCCCC"> crude oil also</font><font color="#E5E5E5"> use a</font>

573
00:21:20,450 --> 00:21:23,510
physical<font color="#E5E5E5"> page to allocate</font><font color="#CCCCCC"> colonel data</font>

574
00:21:22,429 --> 00:21:24,890
structures which<font color="#E5E5E5"> are incredibly</font>

575
00:21:23,510 --> 00:21:26,420
<font color="#E5E5E5">sensitive if you've been over a colonel</font>

576
00:21:24,890 --> 00:21:29,300
<font color="#CCCCCC">data structure</font><font color="#E5E5E5"> as a user</font><font color="#CCCCCC"> lamb process</font>

577
00:21:26,420 --> 00:21:32,960
you've<font color="#E5E5E5"> also kind of owned the colonel</font>

578
00:21:29,300 --> 00:21:34,309
so this dangling bug is the number<font color="#E5E5E5"> of</font>

579
00:21:32,960 --> 00:21:36,710
repercussions we can actually<font color="#CCCCCC"> use</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font>

580
00:21:34,309 --> 00:21:39,290
get a leak by spraying and so<font color="#E5E5E5"> therefore</font>

581
00:21:36,710 --> 00:21:43,429
<font color="#CCCCCC">colonel opera are using operations that</font>

582
00:21:39,290 --> 00:21:44,629
allocate colonel data structures so with

583
00:21:43,429 --> 00:21:47,059
these two primitives what we're going to

584
00:21:44,630 --> 00:21:48,830
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to do is get code execution</font>

585
00:21:47,059 --> 00:21:50,540
obviously<font color="#E5E5E5"> now the way we're</font><font color="#CCCCCC"> going to get</font>

586
00:21:48,830 --> 00:21:51,740
code execution<font color="#E5E5E5"> and this is just one way</font>

587
00:21:50,540 --> 00:21:52,790
<font color="#CCCCCC">of doing this if you're familiar with</font>

588
00:21:51,740 --> 00:21:54,290
<font color="#E5E5E5">Linux kernel expectation there's</font>

589
00:21:52,790 --> 00:21:56,659
hundreds<font color="#E5E5E5"> of ways to do this and maybe</font>

590
00:21:54,290 --> 00:21:57,980
even<font color="#E5E5E5"> better ways</font><font color="#CCCCCC"> I chose to</font><font color="#E5E5E5"> actually</font>

591
00:21:56,660 --> 00:22:02,450
just overwrite the file operations

592
00:21:57,980 --> 00:22:04,370
pointer of a file<font color="#E5E5E5"> so the way files work</font>

593
00:22:02,450 --> 00:22:05,750
in Linux<font color="#CCCCCC"> is you have a file descriptor</font>

594
00:22:04,370 --> 00:22:07,520
which I'm<font color="#E5E5E5"> trimmin</font><font color="#CCCCCC"> even more familiar</font>

595
00:22:05,750 --> 00:22:10,100
<font color="#CCCCCC">with</font><font color="#E5E5E5"> but this file descriptor is just an</font>

596
00:22:07,520 --> 00:22:12,170
integer it's very opaque<font color="#E5E5E5"> so this</font>

597
00:22:10,100 --> 00:22:13,669
actually correlates to a kernel

598
00:22:12,170 --> 00:22:15,110
structure which is<font color="#E5E5E5"> the final kernel</font>

599
00:22:13,670 --> 00:22:16,670
structure which has every all<font color="#E5E5E5"> the</font>

600
00:22:15,110 --> 00:22:18,080
metadata associated with<font color="#E5E5E5"> that file so</font>

601
00:22:16,670 --> 00:22:20,690
just<font color="#CCCCCC"> as the permissions</font><font color="#E5E5E5"> of the file</font><font color="#CCCCCC"> it's</font>

602
00:22:18,080 --> 00:22:23,500
offset<font color="#E5E5E5"> but it also has this function</font>

603
00:22:20,690 --> 00:22:25,940
<font color="#CCCCCC">pointed table which</font><font color="#E5E5E5"> is used to override</font>

604
00:22:23,500 --> 00:22:28,280
the operations that<font color="#E5E5E5"> we do on</font><font color="#CCCCCC"> that file</font>

605
00:22:25,940 --> 00:22:29,120
<font color="#CCCCCC">so people who</font><font color="#E5E5E5"> are familiar with Linux</font>

606
00:22:28,280 --> 00:22:30,230
may also know<font color="#E5E5E5"> that one of the great</font>

607
00:22:29,120 --> 00:22:31,639
things about it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> a final</font>

608
00:22:30,230 --> 00:22:34,760
<font color="#E5E5E5">scripture can represent many</font><font color="#CCCCCC"> different</font>

609
00:22:31,640 --> 00:22:36,530
kinds of<font color="#E5E5E5"> objects can</font><font color="#CCCCCC"> represent like just</font>

610
00:22:34,760 --> 00:22:38,780
<font color="#E5E5E5">a file on disk you can represent a</font>

611
00:22:36,530 --> 00:22:41,660
network socket<font color="#E5E5E5"> represent a kernel driver</font>

612
00:22:38,780 --> 00:22:43,850
the way all<font color="#E5E5E5"> this is handled is by using</font>

613
00:22:41,660 --> 00:22:45,950
this function pointer table to override

614
00:22:43,850 --> 00:22:48,889
<font color="#CCCCCC">the functionalities different operations</font>

615
00:22:45,950 --> 00:22:52,340
so in this example<font color="#E5E5E5"> we have a legitimate</font>

616
00:22:48,890 --> 00:22:55,910
table the ext4<font color="#E5E5E5"> table which is</font><font color="#CCCCCC"> a file</font>

617
00:22:52,340 --> 00:22:57,709
<font color="#E5E5E5">format on</font><font color="#CCCCCC"> linux</font><font color="#E5E5E5"> and that corresponds to</font>

618
00:22:55,910 --> 00:23:00,559
all<font color="#E5E5E5"> these legitimate operations now we</font>

619
00:22:57,710 --> 00:23:03,500
want to point that<font color="#CCCCCC"> final operation</font>

620
00:23:00,559 --> 00:23:04,950
<font color="#CCCCCC">support your table</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> userland</font><font color="#E5E5E5"> where</font>

621
00:23:03,500 --> 00:23:07,110
we can control<font color="#E5E5E5"> the</font>

622
00:23:04,950 --> 00:23:09,840
use that<font color="#CCCCCC"> table and extra points</font>

623
00:23:07,110 --> 00:23:11,870
different<font color="#E5E5E5"> Rob gadgets</font><font color="#CCCCCC"> Rob is if you're</font>

624
00:23:09,840 --> 00:23:14,250
unfamiliar<font color="#CCCCCC"> is a technique used</font><font color="#E5E5E5"> to bypass</font>

625
00:23:11,870 --> 00:23:15,600
<font color="#E5E5E5">something known as</font><font color="#CCCCCC"> n X where we can't</font>

626
00:23:14,250 --> 00:23:21,810
actually introduce code into the kernel

627
00:23:15,600 --> 00:23:24,090
or<font color="#CCCCCC"> P X N</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we use it</font><font color="#E5E5E5"> essentially be</font>

628
00:23:21,810 --> 00:23:26,159
<font color="#E5E5E5">able to recycle the functionality that's</font>

629
00:23:24,090 --> 00:23:28,169
in<font color="#E5E5E5"> the code in the kernel to carry out</font>

630
00:23:26,160 --> 00:23:30,930
<font color="#E5E5E5">our wishes so in this case we can</font>

631
00:23:28,170 --> 00:23:34,560
overwrite the functionality of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Rob I</font>

632
00:23:30,930 --> 00:23:36,840
octal<font color="#CCCCCC"> to instead store the very first</font>

633
00:23:34,560 --> 00:23:38,370
argument<font color="#CCCCCC"> into the address of the second</font>

634
00:23:36,840 --> 00:23:41,790
argument and then returns this is an

635
00:23:38,370 --> 00:23:44,100
arbitrary<font color="#CCCCCC"> right gadget or we can find a</font>

636
00:23:41,790 --> 00:23:45,540
<font color="#CCCCCC">rope gadget that will</font><font color="#E5E5E5"> read out from the</font>

637
00:23:44,100 --> 00:23:47,129
very first argument the<font color="#E5E5E5"> value that</font>

638
00:23:45,540 --> 00:23:49,170
address and then<font color="#E5E5E5"> return</font><font color="#CCCCCC"> that as a value</font>

639
00:23:47,130 --> 00:23:52,500
<font color="#E5E5E5">so now if we wanted to do element</font><font color="#CCCCCC"> or</font>

640
00:23:49,170 --> 00:23:54,000
read<font color="#E5E5E5"> we can call L seek with our file</font>

641
00:23:52,500 --> 00:23:57,150
descriptor that<font color="#E5E5E5"> corresponds to the file</font>

642
00:23:54,000 --> 00:23:59,820
structure that we<font color="#E5E5E5"> overrode and we give</font>

643
00:23:57,150 --> 00:24:01,650
<font color="#E5E5E5">to L seek as the first argument the</font>

644
00:23:59,820 --> 00:24:03,149
address of the kernel value we<font color="#E5E5E5"> want our</font>

645
00:24:01,650 --> 00:24:05,190
the kernel address we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> read from</font>

646
00:24:03,150 --> 00:24:08,340
and then L seek will return the value

647
00:24:05,190 --> 00:24:10,440
that it read has its return value so we

648
00:24:08,340 --> 00:24:14,010
use<font color="#E5E5E5"> our return value as the</font><font color="#CCCCCC"> contents of</font>

649
00:24:10,440 --> 00:24:17,490
the week so to actually redirect<font color="#CCCCCC"> the ops</font>

650
00:24:14,010 --> 00:24:19,140
table<font color="#E5E5E5"> we find</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> functionality and the</font>

651
00:24:17,490 --> 00:24:21,780
<font color="#CCCCCC">trustzone</font><font color="#E5E5E5"> kernel that anyone can execute</font>

652
00:24:19,140 --> 00:24:23,670
<font color="#E5E5E5">and this is a very basic command where</font>

653
00:24:21,780 --> 00:24:27,000
essentially we can ask if our trust<font color="#CCCCCC"> lit</font>

654
00:24:23,670 --> 00:24:28,650
is loaded<font color="#CCCCCC"> so another thing I haven't</font>

655
00:24:27,000 --> 00:24:31,680
<font color="#E5E5E5">mentioned</font><font color="#CCCCCC"> yet is that</font><font color="#E5E5E5"> all the</font><font color="#CCCCCC"> trusts</font><font color="#E5E5E5"> are</font>

656
00:24:28,650 --> 00:24:34,920
identified by a UUID<font color="#CCCCCC"> so while there</font>

657
00:24:31,680 --> 00:24:36,930
aren't<font color="#CCCCCC"> that many</font><font color="#E5E5E5"> trusts let's eat</font><font color="#CCCCCC"> rustle</font>

658
00:24:34,920 --> 00:24:39,930
it goes by a UUID which is<font color="#CCCCCC"> i think</font><font color="#E5E5E5"> it's</font>

659
00:24:36,930 --> 00:24:43,740
a 32<font color="#E5E5E5"> bytes value might be 16 bytes I'm</font>

660
00:24:39,930 --> 00:24:45,390
not sure I forget<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it uses this to</font>

661
00:24:43,740 --> 00:24:48,240
individually identify the different

662
00:24:45,390 --> 00:24:49,680
<font color="#E5E5E5">trust let's so we can query essentially</font>

663
00:24:48,240 --> 00:24:51,570
if we<font color="#E5E5E5"> need to load a trust little work</font>

664
00:24:49,680 --> 00:24:54,000
<font color="#E5E5E5">for</font><font color="#CCCCCC"> us it's already</font><font color="#E5E5E5"> loaded</font><font color="#CCCCCC"> and the way</font>

665
00:24:51,570 --> 00:24:57,570
this works<font color="#E5E5E5"> is</font><font color="#CCCCCC"> we pass</font><font color="#E5E5E5"> up a buffer</font><font color="#CCCCCC"> to our</font>

666
00:24:54,000 --> 00:24:59,430
trust own kernel<font color="#E5E5E5"> and we say this buffer</font>

667
00:24:57,570 --> 00:25:01,950
points to UID string can you make<font color="#CCCCCC"> sure</font>

668
00:24:59,430 --> 00:25:04,290
it doesn't<font color="#E5E5E5"> exist in the currently list</font>

669
00:25:01,950 --> 00:25:05,850
of loaded<font color="#E5E5E5"> you IDs once it does that</font>

670
00:25:04,290 --> 00:25:08,370
check so we can kind of see it here<font color="#E5E5E5"> it</font>

671
00:25:05,850 --> 00:25:09,689
takes<font color="#CCCCCC"> per m so size and then takes so</font>

672
00:25:08,370 --> 00:25:12,570
this makes it looks like it<font color="#CCCCCC"> like it's</font>

673
00:25:09,690 --> 00:25:15,360
actually 16 bytes<font color="#E5E5E5"> so it loads the value</font>

674
00:25:12,570 --> 00:25:17,100
on the UID<font color="#E5E5E5"> onto the stack</font>

675
00:25:15,360 --> 00:25:19,620
it is call this function trust<font color="#CCCCCC"> it needs</font>

676
00:25:17,100 --> 00:25:21,899
loading and then depending<font color="#E5E5E5"> on if it</font>

677
00:25:19,620 --> 00:25:23,699
needs loading so it does the<font color="#CCCCCC"> alerting if</font>

678
00:25:21,900 --> 00:25:25,530
it<font color="#E5E5E5"> doesn't exist and we put that to the</font>

679
00:25:23,700 --> 00:25:30,059
<font color="#CCCCCC">eight and then it will write that</font>

680
00:25:25,530 --> 00:25:32,490
<font color="#CCCCCC">boolean value into the very first part</font>

681
00:25:30,059 --> 00:25:34,830
<font color="#E5E5E5">of that buffer so now you can see if we</font>

682
00:25:32,490 --> 00:25:37,380
<font color="#E5E5E5">have a physical</font><font color="#CCCCCC"> page specified</font><font color="#E5E5E5"> we can</font>

683
00:25:34,830 --> 00:25:42,260
essentially write a boolean<font color="#E5E5E5"> true or</font>

684
00:25:37,380 --> 00:25:44,070
<font color="#E5E5E5">false</font><font color="#CCCCCC"> to any physical page in memory now</font>

685
00:25:42,260 --> 00:25:45,480
<font color="#E5E5E5">because we're gonna be pointing this at</font>

686
00:25:44,070 --> 00:25:46,860
a<font color="#E5E5E5"> random piece of kernel data which</font>

687
00:25:45,480 --> 00:25:48,450
isn't<font color="#E5E5E5"> going to have memory contents we</font>

688
00:25:46,860 --> 00:25:49,530
control because we're<font color="#E5E5E5"> going to be</font>

689
00:25:48,450 --> 00:25:50,730
pointing<font color="#CCCCCC"> to something</font><font color="#E5E5E5"> we want to</font>

690
00:25:49,530 --> 00:25:54,418
overwrite<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> something we already</font>

691
00:25:50,730 --> 00:25:56,520
<font color="#E5E5E5">have control of this</font><font color="#CCCCCC"> is always always</font>

692
00:25:54,419 --> 00:25:57,690
<font color="#E5E5E5">return true because we're gonna be</font>

693
00:25:56,520 --> 00:25:59,580
pointing<font color="#CCCCCC"> at something</font><font color="#E5E5E5"> like an F off</font>

694
00:25:57,690 --> 00:26:01,320
<font color="#CCCCCC">staple is just say this F ops table is a</font>

695
00:25:59,580 --> 00:26:03,449
UUID<font color="#E5E5E5"> which doesn't</font><font color="#CCCCCC"> get sportin</font>

696
00:26:01,320 --> 00:26:04,918
correspond<font color="#CCCCCC"> to</font><font color="#E5E5E5"> anything I know about I'm</font>

697
00:26:03,450 --> 00:26:08,070
gonna<font color="#E5E5E5"> say yes you need</font><font color="#CCCCCC"> to load whatever</font>

698
00:26:04,919 --> 00:26:09,900
your UID value this corresponds<font color="#CCCCCC"> to so</font>

699
00:26:08,070 --> 00:26:13,530
this essentially<font color="#CCCCCC"> allows us to write</font><font color="#E5E5E5"> a</font>

700
00:26:09,900 --> 00:26:15,330
32-bit one to anywhere<font color="#E5E5E5"> in memory so to</font>

701
00:26:13,530 --> 00:26:18,690
take advantage of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> we're gonna find</font>

702
00:26:15,330 --> 00:26:21,870
an F<font color="#E5E5E5"> ops table so we use our mud map</font>

703
00:26:18,690 --> 00:26:25,620
leak to find the<font color="#E5E5E5"> address of F ops table</font>

704
00:26:21,870 --> 00:26:27,659
and then or a kernel<font color="#CCCCCC"> a file structure</font>

705
00:26:25,620 --> 00:26:29,129
which points to an F<font color="#E5E5E5"> ops table and then</font>

706
00:26:27,660 --> 00:26:32,700
we're gonna overwrite that value slowly

707
00:26:29,130 --> 00:26:34,910
with our boolean<font color="#E5E5E5"> so what we can do is we</font>

708
00:26:32,700 --> 00:26:37,590
can start pointing slowly point this

709
00:26:34,910 --> 00:26:41,580
ext4 file operations tables is<font color="#E5E5E5"> the</font>

710
00:26:37,590 --> 00:26:42,840
<font color="#E5E5E5">legitimate value by issuing the</font><font color="#CCCCCC"> write a</font>

711
00:26:41,580 --> 00:26:45,689
number<font color="#E5E5E5"> of times we can essentially</font>

712
00:26:42,840 --> 00:26:47,850
shrink it by sliding this one over<font color="#CCCCCC"> and</font>

713
00:26:45,690 --> 00:26:49,860
issuing multiple<font color="#CCCCCC"> writes to get this into</font>

714
00:26:47,850 --> 00:26:52,559
an address which corresponds to userland

715
00:26:49,860 --> 00:26:54,479
<font color="#E5E5E5">so as you can see after</font><font color="#CCCCCC"> about three</font>

716
00:26:52,559 --> 00:26:55,918
different writes<font color="#E5E5E5"> we give this to</font><font color="#CCCCCC"> a very</font>

717
00:26:54,480 --> 00:26:57,510
small address which will<font color="#E5E5E5"> exist in a user</font>

718
00:26:55,919 --> 00:27:00,510
<font color="#E5E5E5">land process and not into the</font><font color="#CCCCCC"> kernel and</font>

719
00:26:57,510 --> 00:27:03,690
now in our own process we can and map

720
00:27:00,510 --> 00:27:05,549
this region and we can control file

721
00:27:03,690 --> 00:27:09,179
operations<font color="#E5E5E5"> table</font><font color="#CCCCCC"> pointer and we</font><font color="#E5E5E5"> have</font>

722
00:27:05,549 --> 00:27:10,710
code execution in the<font color="#E5E5E5"> kernel now</font><font color="#CCCCCC"> I hope</font>

723
00:27:09,179 --> 00:27:13,260
you're<font color="#CCCCCC"> not</font><font color="#E5E5E5"> bored by how pedantic this</font>

724
00:27:10,710 --> 00:27:15,150
talk is because<font color="#E5E5E5"> it's about</font><font color="#CCCCCC"> to get a lot</font>

725
00:27:13,260 --> 00:27:18,680
more member kupshur bugs this<font color="#E5E5E5"> is only</font>

726
00:27:15,150 --> 00:27:21,650
the first step<font color="#CCCCCC"> so we now have root so</font>

727
00:27:18,680 --> 00:27:24,260
have<font color="#CCCCCC"> Hameroff</font><font color="#E5E5E5"> table and we have the</font>

728
00:27:21,650 --> 00:27:26,870
<font color="#CCCCCC">reading right like I mentioned so we can</font>

729
00:27:24,260 --> 00:27:28,760
actually<font color="#CCCCCC"> with this we can overwrite the</font>

730
00:27:26,870 --> 00:27:30,770
credential structure inside the<font color="#E5E5E5"> kernel</font>

731
00:27:28,760 --> 00:27:33,220
<font color="#E5E5E5">and essentially change all of our</font><font color="#CCCCCC"> UI DS</font>

732
00:27:30,770 --> 00:27:37,940
which correspond<font color="#E5E5E5"> to our apps UI DS to</font>

733
00:27:33,220 --> 00:27:39,260
<font color="#E5E5E5">zero and that makes us</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> so once we</font>

734
00:27:37,940 --> 00:27:41,809
do that we were<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> able to</font>

735
00:27:39,260 --> 00:27:43,930
completely<font color="#E5E5E5"> control all the permission</font>

736
00:27:41,809 --> 00:27:48,410
checking<font color="#E5E5E5"> that I mentioned</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> that</font>

737
00:27:43,930 --> 00:27:50,000
<font color="#E5E5E5">occurs in the the kernel driver so when</font>

738
00:27:48,410 --> 00:27:52,340
we were<font color="#E5E5E5"> just a</font><font color="#CCCCCC"> normal</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> LANAP</font><font color="#E5E5E5"> in fact</font>

739
00:27:50,000 --> 00:27:53,960
we were just<font color="#E5E5E5"> an attacker app we didn't</font>

740
00:27:52,340 --> 00:27:55,309
have the<font color="#E5E5E5"> ability to talk to arbitrary</font>

741
00:27:53,960 --> 00:27:56,720
trust<font color="#CCCCCC"> votes we were only</font><font color="#E5E5E5"> able to talk to</font>

742
00:27:55,309 --> 00:27:59,660
<font color="#CCCCCC">this one small piece of functionality</font>

743
00:27:56,720 --> 00:28:01,070
which essentially queried if a<font color="#E5E5E5"> you idea</font>

744
00:27:59,660 --> 00:28:04,100
was was loaded<font color="#E5E5E5"> and we got fairly lucky</font>

745
00:28:01,070 --> 00:28:05,240
<font color="#E5E5E5">that allowed us</font><font color="#CCCCCC"> to do a</font><font color="#E5E5E5"> write but there</font>

746
00:28:04,100 --> 00:28:07,129
weren't<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of bugs in that attack</font>

747
00:28:05,240 --> 00:28:08,960
surface besides<font color="#E5E5E5"> what I mentioned which</font>

748
00:28:07,130 --> 00:28:12,290
isn't<font color="#E5E5E5"> really a bug it's just a bug in</font>

749
00:28:08,960 --> 00:28:14,210
the actual<font color="#E5E5E5"> page serialization so now</font>

750
00:28:12,290 --> 00:28:16,100
that we are<font color="#E5E5E5"> route</font><font color="#CCCCCC"> you can Forge our</font>

751
00:28:14,210 --> 00:28:18,679
identity to<font color="#CCCCCC"> the trusted core and we can</font>

752
00:28:16,100 --> 00:28:22,699
become any app we want in his eyes<font color="#E5E5E5"> so we</font>

753
00:28:18,679 --> 00:28:24,679
<font color="#E5E5E5">can talk to any trust lit now</font><font color="#CCCCCC"> in this</font>

754
00:28:22,700 --> 00:28:27,590
case to find<font color="#CCCCCC"> a bug I decided to target a</font>

755
00:28:24,679 --> 00:28:29,840
secure file storage<font color="#CCCCCC"> but this application</font>

756
00:28:27,590 --> 00:28:33,559
<font color="#E5E5E5">does is it allows you to transparently</font>

757
00:28:29,840 --> 00:28:37,010
encrypt files on disk so<font color="#E5E5E5"> Huawei has an</font>

758
00:28:33,559 --> 00:28:38,480
app called files<font color="#E5E5E5"> it's just a basic file</font>

759
00:28:37,010 --> 00:28:40,250
manager<font color="#CCCCCC"> and I'm sure many people people</font>

760
00:28:38,480 --> 00:28:41,420
<font color="#E5E5E5">will be</font><font color="#CCCCCC"> familiar with on their phone but</font>

761
00:28:40,250 --> 00:28:43,309
they have a<font color="#E5E5E5"> feature known</font><font color="#CCCCCC"> as the safe</font>

762
00:28:41,420 --> 00:28:45,800
and<font color="#CCCCCC"> it allows you</font><font color="#E5E5E5"> to put</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> pin and</font>

763
00:28:43,309 --> 00:28:47,629
that pin will<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> to encrypt any</font>

764
00:28:45,800 --> 00:28:49,399
files you put into<font color="#E5E5E5"> the safe now the</font>

765
00:28:47,630 --> 00:28:50,960
<font color="#CCCCCC">decides implement this in</font><font color="#E5E5E5"> trust so so</font>

766
00:28:49,400 --> 00:28:53,450
theoretically if an attacker<font color="#E5E5E5"> reads your</font>

767
00:28:50,960 --> 00:28:55,070
phone<font color="#E5E5E5"> they would be unable</font><font color="#CCCCCC"> to access</font><font color="#E5E5E5"> any</font>

768
00:28:53,450 --> 00:28:57,170
files that you encrypted using<font color="#E5E5E5"> the safe</font>

769
00:28:55,070 --> 00:28:59,120
so this seems pretty cool the<font color="#CCCCCC"> curl'd is</font>

770
00:28:57,170 --> 00:29:01,340
no idea what the key is it<font color="#E5E5E5"> should</font>

771
00:28:59,120 --> 00:29:03,229
definitions<font color="#E5E5E5"> I didn't look in to if</font><font color="#CCCCCC"> there</font>

772
00:29:01,340 --> 00:29:04,850
<font color="#CCCCCC">was any week but of course if there are</font>

773
00:29:03,230 --> 00:29:06,770
bugs<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> Heinicke application an</font>

774
00:29:04,850 --> 00:29:08,659
attacker can take<font color="#E5E5E5"> control</font><font color="#CCCCCC"> that highest</font>

775
00:29:06,770 --> 00:29:10,510
<font color="#CCCCCC">ACT</font><font color="#E5E5E5"> are the secure storage trust which</font>

776
00:29:08,660 --> 00:29:16,429
does the encryption<font color="#E5E5E5"> and knows that keys</font>

777
00:29:10,510 --> 00:29:18,890
they can completely around all this<font color="#E5E5E5"> and</font>

778
00:29:16,429 --> 00:29:20,750
reveal of those files but for us all

779
00:29:18,890 --> 00:29:23,450
we're really<font color="#E5E5E5"> interested in</font><font color="#CCCCCC"> in is getting</font>

780
00:29:20,750 --> 00:29:24,770
a foothold<font color="#E5E5E5"> inside the secure world so</font>

781
00:29:23,450 --> 00:29:27,050
that<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> then attack the trusted</font>

782
00:29:24,770 --> 00:29:29,570
kernel and then find<font color="#E5E5E5"> the average</font>

783
00:29:27,050 --> 00:29:30,539
corresponds<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> fingerprint so we're</font>

784
00:29:29,570 --> 00:29:34,619
going<font color="#E5E5E5"> to be targeting</font>

785
00:29:30,539 --> 00:29:35,729
in this trust<font color="#CCCCCC"> lit type to debug</font><font color="#E5E5E5"> which</font>

786
00:29:34,619 --> 00:29:37,079
<font color="#CCCCCC">I'm if you don't know what type</font>

787
00:29:35,729 --> 00:29:39,389
confusion is it will become<font color="#E5E5E5"> pretty clear</font>

788
00:29:37,079 --> 00:29:40,979
in a second how this is a problem<font color="#CCCCCC"> so</font>

789
00:29:39,389 --> 00:29:42,599
<font color="#CCCCCC">what's for</font><font color="#E5E5E5"> the curl driver all we have</font>

790
00:29:40,979 --> 00:29:44,669
to do is send the SMC which has<font color="#CCCCCC"> our</font>

791
00:29:42,599 --> 00:29:48,389
<font color="#E5E5E5">attack of our attacker payload in it and</font>

792
00:29:44,669 --> 00:29:50,369
begin exploring<font color="#CCCCCC"> this Trussell in now</font><font color="#E5E5E5"> a</font>

793
00:29:48,389 --> 00:29:52,948
<font color="#E5E5E5">little</font><font color="#CCCCCC"> more about the serialization of</font>

794
00:29:50,369 --> 00:29:54,629
the kernel arguments<font color="#E5E5E5"> so there's a lot</font><font color="#CCCCCC"> of</font>

795
00:29:52,949 --> 00:29:59,489
bugs<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> functionality and if</font>

796
00:29:54,629 --> 00:30:01,859
you're auditing any surface I definitely

797
00:29:59,489 --> 00:30:03,149
recommend<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at the any sorts of</font>

798
00:30:01,859 --> 00:30:06,059
serialization you see there's always

799
00:30:03,149 --> 00:30:07,768
lots of bugs in it<font color="#CCCCCC"> so in this case as I</font>

800
00:30:06,059 --> 00:30:09,509
mentioned<font color="#CCCCCC"> before</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have the ability to</font>

801
00:30:07,769 --> 00:30:13,289
specify memory references or integers

802
00:30:09,509 --> 00:30:16,079
<font color="#E5E5E5">now the way this is handled is your</font>

803
00:30:13,289 --> 00:30:18,479
<font color="#E5E5E5">trust</font><font color="#CCCCCC"> zone</font><font color="#E5E5E5"> kernel is going to actually</font>

804
00:30:16,079 --> 00:30:20,609
pass up<font color="#E5E5E5"> this tag</font><font color="#CCCCCC"> TT and its operation</font>

805
00:30:18,479 --> 00:30:22,739
pointer or pointer to the structure

806
00:30:20,609 --> 00:30:24,809
which<font color="#E5E5E5"> can handle up to four different</font>

807
00:30:22,739 --> 00:30:26,309
parameters<font color="#E5E5E5"> now because we have the</font>

808
00:30:24,809 --> 00:30:28,469
<font color="#CCCCCC">ability to pass</font><font color="#E5E5E5"> some integers or memory</font>

809
00:30:26,309 --> 00:30:30,869
<font color="#E5E5E5">references a simple type checking system</font>

810
00:30:28,469 --> 00:30:32,759
needs<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be in place</font><font color="#E5E5E5"> now this is</font>

811
00:30:30,869 --> 00:30:34,829
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> pretty easy but they do is they</font>

812
00:30:32,759 --> 00:30:36,659
have<font color="#E5E5E5"> as you can see they have the</font>

813
00:30:34,829 --> 00:30:38,609
structure on<font color="#E5E5E5"> the right it</font><font color="#CCCCCC"> has space for</font>

814
00:30:36,659 --> 00:30:40,889
exactly<font color="#CCCCCC"> four</font><font color="#E5E5E5"> and then they have an</font>

815
00:30:38,609 --> 00:30:43,439
integer which specifies the<font color="#CCCCCC"> type of</font>

816
00:30:40,889 --> 00:30:46,289
every<font color="#E5E5E5"> single one of those</font><font color="#CCCCCC"> parameters so</font>

817
00:30:43,440 --> 00:30:49,379
if we have a memory reference type<font color="#CCCCCC"> and</font>

818
00:30:46,289 --> 00:30:51,149
our very first<font color="#E5E5E5"> parameter the most</font>

819
00:30:49,379 --> 00:30:54,958
significant byte<font color="#CCCCCC"> upper am types will be</font>

820
00:30:51,149 --> 00:30:57,089
<font color="#E5E5E5">one if we have a integer type in our</font>

821
00:30:54,959 --> 00:30:58,499
second parameter the second<font color="#E5E5E5"> most</font>

822
00:30:57,089 --> 00:31:01,918
significant<font color="#E5E5E5"> byte will be 0</font><font color="#CCCCCC"> for example</font>

823
00:30:58,499 --> 00:31:03,719
<font color="#E5E5E5">so all this type information is stored</font>

824
00:31:01,919 --> 00:31:05,909
into<font color="#E5E5E5"> this and its operation structure</font>

825
00:31:03,719 --> 00:31:08,759
and now it's the responsibility of the

826
00:31:05,909 --> 00:31:10,649
<font color="#E5E5E5">trust lid to check the types before</font><font color="#CCCCCC"> it</font>

827
00:31:08,759 --> 00:31:13,709
begins acting<font color="#CCCCCC"> on them</font><font color="#E5E5E5"> so if you have</font>

828
00:31:10,649 --> 00:31:15,658
buffer argument confused with an integer

829
00:31:13,709 --> 00:31:20,819
<font color="#CCCCCC">argument that can</font><font color="#E5E5E5"> be pretty bad because</font>

830
00:31:15,659 --> 00:31:23,249
it means<font color="#E5E5E5"> that any address</font><font color="#CCCCCC"> that we put</font>

831
00:31:20,819 --> 00:31:24,928
<font color="#E5E5E5">into a an integer can be any value can</font>

832
00:31:23,249 --> 00:31:28,319
be confused as an<font color="#E5E5E5"> address and this means</font>

833
00:31:24,929 --> 00:31:29,969
to cause havoc<font color="#CCCCCC"> so now getting</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the</font>

834
00:31:28,319 --> 00:31:31,349
actual parameters checking is it turns

835
00:31:29,969 --> 00:31:33,089
out<font color="#E5E5E5"> that not</font><font color="#CCCCCC"> all trust let's actually</font>

836
00:31:31,349 --> 00:31:34,729
check these so I guess there was some

837
00:31:33,089 --> 00:31:37,379
<font color="#CCCCCC">kind of miscommunication between the</font>

838
00:31:34,729 --> 00:31:39,269
<font color="#CCCCCC">Trussell developers</font><font color="#E5E5E5"> and the kernel</font>

839
00:31:37,379 --> 00:31:40,730
driver developers and they didn't know

840
00:31:39,269 --> 00:31:43,190
the system worked

841
00:31:40,730 --> 00:31:44,870
now our secure storage<font color="#E5E5E5"> trust</font><font color="#CCCCCC"> lit</font>

842
00:31:43,190 --> 00:31:46,310
actually<font color="#CCCCCC"> influenced</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> long different</font>

843
00:31:44,870 --> 00:31:48,469
functionality that you<font color="#CCCCCC"> expect to</font><font color="#E5E5E5"> see in</font>

844
00:31:46,310 --> 00:31:50,330
<font color="#CCCCCC">linux it has a read</font><font color="#E5E5E5"> and write call also</font>

845
00:31:48,470 --> 00:31:52,610
has an open which returns a opaque

846
00:31:50,330 --> 00:31:55,419
handle just<font color="#E5E5E5"> a blend external it has an L</font>

847
00:31:52,610 --> 00:31:58,639
seek<font color="#E5E5E5"> now we have is an interesting bug</font>

848
00:31:55,420 --> 00:32:01,550
<font color="#E5E5E5">as you can see right</font><font color="#CCCCCC"> here where we take</font>

849
00:31:58,640 --> 00:32:03,560
the parameter values out of<font color="#E5E5E5"> the</font>

850
00:32:01,550 --> 00:32:05,030
structure<font color="#E5E5E5"> but no check has ever</font>

851
00:32:03,560 --> 00:32:07,010
<font color="#CCCCCC">performed before treating</font><font color="#E5E5E5"> them actually</font>

852
00:32:05,030 --> 00:32:09,170
it has a buffer<font color="#CCCCCC"> in a size so we can</font>

853
00:32:07,010 --> 00:32:11,120
<font color="#E5E5E5">specify an A and B instead of a buffer</font>

854
00:32:09,170 --> 00:32:13,430
<font color="#E5E5E5">and</font><font color="#CCCCCC"> a size</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> this allows us to</font><font color="#E5E5E5"> specify</font>

855
00:32:11,120 --> 00:32:18,290
any address<font color="#CCCCCC"> in the trust let's address</font>

856
00:32:13,430 --> 00:32:19,850
<font color="#CCCCCC">space that is a pretty</font><font color="#E5E5E5"> big problem</font><font color="#CCCCCC"> sorry</font>

857
00:32:18,290 --> 00:32:22,850
guys<font color="#CCCCCC"> it's a pretty big</font><font color="#E5E5E5"> problem because</font>

858
00:32:19,850 --> 00:32:26,840
if you can imagine<font color="#CCCCCC"> a Lynx kernel which</font>

859
00:32:22,850 --> 00:32:28,669
doesn't check the buffer argument<font color="#E5E5E5"> and</font>

860
00:32:26,840 --> 00:32:29,870
never make sure that the buffer argument

861
00:32:28,670 --> 00:32:31,610
that you're passing<font color="#CCCCCC"> up to read or to</font>

862
00:32:29,870 --> 00:32:33,229
<font color="#CCCCCC">write actually poison the</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> lid</font><font color="#E5E5E5"> and</font>

863
00:32:31,610 --> 00:32:34,760
<font color="#E5E5E5">not the kernel you just</font><font color="#CCCCCC"> initiate the</font>

864
00:32:33,230 --> 00:32:37,690
same<font color="#E5E5E5"> situation where you can arbitrarily</font>

865
00:32:34,760 --> 00:32:41,240
read data into the kernels memory space

866
00:32:37,690 --> 00:32:45,110
so with this primitive<font color="#E5E5E5"> we can actually</font>

867
00:32:41,240 --> 00:32:47,480
get<font color="#E5E5E5"> both a leak and a right inside the</font>

868
00:32:45,110 --> 00:32:49,340
trust<font color="#E5E5E5"> lid so we can use</font><font color="#CCCCCC"> writes to read</font>

869
00:32:47,480 --> 00:32:51,890
<font color="#E5E5E5">values out and we can use read to write</font>

870
00:32:49,340 --> 00:32:54,159
values<font color="#E5E5E5"> in so what we're going</font><font color="#CCCCCC"> to do is</font>

871
00:32:51,890 --> 00:32:57,050
we're<font color="#E5E5E5"> going to write to a fake</font><font color="#CCCCCC"> secured</font>

872
00:32:54,160 --> 00:32:59,720
file and we're<font color="#CCCCCC"> going to write the value</font>

873
00:32:57,050 --> 00:33:02,720
into<font color="#E5E5E5"> that file that we want to actually</font>

874
00:32:59,720 --> 00:33:05,060
<font color="#E5E5E5">do the memory</font><font color="#CCCCCC"> right on and then we want</font>

875
00:33:02,720 --> 00:33:07,280
<font color="#E5E5E5">to write that value into the memory</font><font color="#CCCCCC"> heat</font>

876
00:33:05,060 --> 00:33:10,490
<font color="#CCCCCC">of the trust</font><font color="#E5E5E5"> lid we're going to read</font>

877
00:33:07,280 --> 00:33:12,440
<font color="#E5E5E5">from that file and the value that is</font>

878
00:33:10,490 --> 00:33:16,970
read out<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> written to an arbitrary</font>

879
00:33:12,440 --> 00:33:18,890
address inside<font color="#E5E5E5"> the trust lit and that</font>

880
00:33:16,970 --> 00:33:21,830
<font color="#E5E5E5">won't</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> us going execution and I'll</font>

881
00:33:18,890 --> 00:33:23,120
show<font color="#E5E5E5"> you how so the one issue here is</font>

882
00:33:21,830 --> 00:33:25,280
all that<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> arbitrary right we</font>

883
00:33:23,120 --> 00:33:28,280
still need to point<font color="#E5E5E5"> to an arbitrary</font>

884
00:33:25,280 --> 00:33:29,930
payload of code<font color="#CCCCCC"> this</font><font color="#E5E5E5"> be kind</font><font color="#CCCCCC"> of tricky</font>

885
00:33:28,280 --> 00:33:31,460
<font color="#CCCCCC">because there's lots of</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> paid</font>

886
00:33:29,930 --> 00:33:32,960
for missions<font color="#CCCCCC"> going on we</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have</font>

887
00:33:31,460 --> 00:33:36,920
really any insight<font color="#CCCCCC"> into the trust let's</font>

888
00:33:32,960 --> 00:33:38,150
this isn't like a standard<font color="#CCCCCC"> elf binary</font><font color="#E5E5E5"> so</font>

889
00:33:36,920 --> 00:33:40,430
we don't actually know<font color="#CCCCCC"> what</font><font color="#E5E5E5"> it looks</font>

890
00:33:38,150 --> 00:33:42,440
like in memory so this was a<font color="#E5E5E5"> lot of</font>

891
00:33:40,430 --> 00:33:43,970
painful experimentation on my part but

892
00:33:42,440 --> 00:33:46,490
<font color="#E5E5E5">it turns out that the address space</font><font color="#CCCCCC"> of a</font>

893
00:33:43,970 --> 00:33:48,170
<font color="#E5E5E5">trust</font><font color="#CCCCCC"> that kind of looks like this so at</font>

894
00:33:46,490 --> 00:33:50,060
the lower addresses we have the text

895
00:33:48,170 --> 00:33:51,960
section<font color="#E5E5E5"> which is all of our code then we</font>

896
00:33:50,060 --> 00:33:54,120
have the BSS which is like our<font color="#E5E5E5"> global</font>

897
00:33:51,960 --> 00:33:56,610
and then interestingly enough we<font color="#E5E5E5"> have</font>

898
00:33:54,120 --> 00:33:58,320
<font color="#E5E5E5">the</font><font color="#CCCCCC"> kernel mapped and</font><font color="#E5E5E5"> of course the</font>

899
00:33:56,610 --> 00:33:59,580
transyl's came right to this kernel but

900
00:33:58,320 --> 00:34:01,350
it's<font color="#E5E5E5"> mapped into the same virtual</font>

901
00:33:59,580 --> 00:34:03,000
address space as the trust<font color="#E5E5E5"> lit just like</font>

902
00:34:01,350 --> 00:34:04,919
how the list kernels<font color="#CCCCCC"> happen</font><font color="#E5E5E5"> to the same</font>

903
00:34:03,000 --> 00:34:07,740
virtual address space<font color="#E5E5E5"> as usual in apps</font>

904
00:34:04,920 --> 00:34:09,720
<font color="#CCCCCC">it's sort of mapped in the middle of its</font>

905
00:34:07,740 --> 00:34:12,480
address<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> address see zero</font>

906
00:34:09,719 --> 00:34:14,759
<font color="#E5E5E5">zero zero zero zero zero zero and then</font>

907
00:34:12,480 --> 00:34:16,649
above that kernel<font color="#E5E5E5"> we actually have old</font>

908
00:34:14,760 --> 00:34:19,429
the<font color="#E5E5E5"> past</font><font color="#CCCCCC"> two memory references that are</font>

909
00:34:16,649 --> 00:34:23,638
<font color="#E5E5E5">remap into the</font><font color="#CCCCCC"> Trussell address space so</font>

910
00:34:19,429 --> 00:34:25,168
when I pass in a buffer to<font color="#E5E5E5"> a trust</font><font color="#CCCCCC"> let</font>

911
00:34:23,639 --> 00:34:26,669
with it<font color="#CCCCCC"> actually is occurring as it</font>

912
00:34:25,168 --> 00:34:29,158
takes the<font color="#CCCCCC"> trusted</font><font color="#E5E5E5"> work takes a</font><font color="#CCCCCC"> physical</font>

913
00:34:26,668 --> 00:34:31,560
page<font color="#E5E5E5"> and it adds a new page table entry</font>

914
00:34:29,159 --> 00:34:32,639
to the trust<font color="#CCCCCC"> lit and is saying your</font>

915
00:34:31,560 --> 00:34:35,129
buffer arguments are actually this

916
00:34:32,639 --> 00:34:37,139
really<font color="#CCCCCC"> high address and everything at</font>

917
00:34:35,129 --> 00:34:40,679
this page and<font color="#CCCCCC"> at</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> is</font>

918
00:34:37,139 --> 00:34:42,149
readable writable and executable<font color="#E5E5E5"> so what</font>

919
00:34:40,679 --> 00:34:46,970
this<font color="#E5E5E5"> means that as soon</font><font color="#CCCCCC"> as we overwrite</font>

920
00:34:42,149 --> 00:34:50,520
a function pointer inside of our or BSS

921
00:34:46,969 --> 00:34:52,529
<font color="#E5E5E5">we can pass in a</font><font color="#CCCCCC"> shellcode as one of the</font>

922
00:34:50,520 --> 00:34:53,790
<font color="#E5E5E5">parameters to</font><font color="#CCCCCC"> our trust lit and</font><font color="#E5E5E5"> that</font>

923
00:34:52,530 --> 00:34:55,290
<font color="#E5E5E5">will</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> be waiting for us to execute</font>

924
00:34:53,790 --> 00:34:58,830
<font color="#CCCCCC">so this gives us sort of</font><font color="#E5E5E5"> a nice</font>

925
00:34:55,290 --> 00:35:00,029
primitive where we can pass in our in

926
00:34:58,830 --> 00:35:01,650
our first argument<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the file</font>

927
00:35:00,030 --> 00:35:03,390
descriptor value<font color="#E5E5E5"> or second</font><font color="#CCCCCC"> argument as</font>

928
00:35:01,650 --> 00:35:04,830
<font color="#CCCCCC">the address that we want</font><font color="#E5E5E5"> to write to and</font>

929
00:35:03,390 --> 00:35:07,650
then our third argument it can actually

930
00:35:04,830 --> 00:35:10,319
be just<font color="#CCCCCC"> an address of our shellcode that</font>

931
00:35:07,650 --> 00:35:14,070
we can jump to so by overwriting one of

932
00:35:10,320 --> 00:35:15,720
the function pointers inside<font color="#E5E5E5"> T malloc</font><font color="#CCCCCC"> so</font>

933
00:35:14,070 --> 00:35:17,400
their implementation of malloc uses a

934
00:35:15,720 --> 00:35:20,580
<font color="#E5E5E5">function pointer table they handle</font>

935
00:35:17,400 --> 00:35:21,600
different classes of size objects<font color="#CCCCCC"> I this</font>

936
00:35:20,580 --> 00:35:23,549
is<font color="#E5E5E5"> just a coincidence</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> their</font>

937
00:35:21,600 --> 00:35:27,000
implementation<font color="#CCCCCC"> it's just circumstances</font><font color="#E5E5E5"> I</font>

938
00:35:23,550 --> 00:35:29,400
just took advantage<font color="#E5E5E5"> of that to to get</font>

939
00:35:27,000 --> 00:35:31,530
code execution so I hate something<font color="#E5E5E5"> that</font>

940
00:35:29,400 --> 00:35:32,820
instead now calls my<font color="#CCCCCC"> shellcode instead</font>

941
00:35:31,530 --> 00:35:34,440
of calling the allocation function and

942
00:35:32,820 --> 00:35:37,950
we<font color="#CCCCCC"> get code execution now there's</font>

943
00:35:34,440 --> 00:35:40,770
actually<font color="#E5E5E5"> one small problem still the</font>

944
00:35:37,950 --> 00:35:42,180
<font color="#E5E5E5">trust notes</font><font color="#CCCCCC"> I actually have a SLR</font><font color="#E5E5E5"> so if</font>

945
00:35:40,770 --> 00:35:44,130
you're<font color="#E5E5E5"> familiar with a SLR the stands</font>

946
00:35:42,180 --> 00:35:48,440
for<font color="#E5E5E5"> address space layout randomization</font>

947
00:35:44,130 --> 00:35:52,070
<font color="#E5E5E5">this is a fairly old technology used to</font>

948
00:35:48,440 --> 00:35:55,620
make<font color="#E5E5E5"> an attackers life more difficult</font><font color="#CCCCCC"> by</font>

949
00:35:52,070 --> 00:35:57,930
allocating<font color="#E5E5E5"> sort of code in the stack and</font>

950
00:35:55,620 --> 00:35:59,609
piece<font color="#E5E5E5"> of data</font><font color="#CCCCCC"> and random addresses so if</font>

951
00:35:57,930 --> 00:36:01,919
you do smash the stack and<font color="#CCCCCC"> you get code</font>

952
00:35:59,610 --> 00:36:03,010
execution<font color="#CCCCCC"> you don't know where to</font><font color="#E5E5E5"> point</font>

953
00:36:01,920 --> 00:36:05,140
or

954
00:36:03,010 --> 00:36:07,269
<font color="#CCCCCC">hijack PC value</font><font color="#E5E5E5"> tube because you don't</font>

955
00:36:05,140 --> 00:36:09,339
know where anything<font color="#E5E5E5"> is in memory so if</font>

956
00:36:07,269 --> 00:36:10,750
the<font color="#E5E5E5"> address space layout is completely</font>

957
00:36:09,339 --> 00:36:12,549
random it makes it<font color="#CCCCCC"> attacker site more</font>

958
00:36:10,750 --> 00:36:13,839
difficult because although we might<font color="#E5E5E5"> be</font>

959
00:36:12,549 --> 00:36:15,279
able<font color="#E5E5E5"> to overwrite a function</font><font color="#CCCCCC"> pointer we</font>

960
00:36:13,839 --> 00:36:16,538
don't know where to point<font color="#E5E5E5"> that to</font>

961
00:36:15,279 --> 00:36:18,339
because we<font color="#E5E5E5"> don't know where a shellcode</font>

962
00:36:16,539 --> 00:36:19,660
is<font color="#E5E5E5"> or in</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> case we don't actually</font>

963
00:36:18,339 --> 00:36:21,210
know where the function<font color="#CCCCCC"> pointer is so we</font>

964
00:36:19,660 --> 00:36:23,649
don't know where it right to it<font color="#CCCCCC"> so</font>

965
00:36:21,210 --> 00:36:25,750
<font color="#CCCCCC">here's the actual</font><font color="#E5E5E5"> code inside</font><font color="#CCCCCC"> Huawei</font>

966
00:36:23,650 --> 00:36:29,049
which generates a<font color="#CCCCCC"> random value</font><font color="#E5E5E5"> and then</font>

967
00:36:25,750 --> 00:36:30,519
uses this to map in trust lit now they

968
00:36:29,049 --> 00:36:33,160
have this they do this<font color="#E5E5E5"> thing where they</font>

969
00:36:30,519 --> 00:36:35,828
actually<font color="#CCCCCC"> only implement one byte of</font>

970
00:36:33,160 --> 00:36:37,480
entropy here<font color="#E5E5E5"> so that makes it fairly</font>

971
00:36:35,829 --> 00:36:39,460
easy<font color="#E5E5E5"> to practice</font><font color="#CCCCCC"> implementation of a SLR</font>

972
00:36:37,480 --> 00:36:41,109
because it means there's<font color="#CCCCCC"> only 256</font>

973
00:36:39,460 --> 00:36:45,400
<font color="#E5E5E5">different places that the trust</font><font color="#CCCCCC"> Allah</font>

974
00:36:41,109 --> 00:36:46,390
<font color="#E5E5E5">could be loaded so you can imagine a</font>

975
00:36:45,400 --> 00:36:48,839
number<font color="#CCCCCC"> of ways that</font><font color="#E5E5E5"> you could they</font>

976
00:36:46,390 --> 00:36:51,009
attack<font color="#E5E5E5"> this the</font><font color="#CCCCCC"> Trust's also are</font>

977
00:36:48,839 --> 00:36:52,210
constantly it's a very robust<font color="#CCCCCC"> systems to</font>

978
00:36:51,010 --> 00:36:53,650
<font color="#CCCCCC">trustless</font><font color="#E5E5E5"> as soon as they crash or</font>

979
00:36:52,210 --> 00:36:55,630
immediately<font color="#CCCCCC"> reloads that have the same</font>

980
00:36:53,650 --> 00:36:58,539
address<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> could very easily just</font>

981
00:36:55,630 --> 00:36:59,920
<font color="#E5E5E5">try to exploit this 256 times with</font>

982
00:36:58,539 --> 00:37:01,420
different<font color="#E5E5E5"> addresses and eventually we</font>

983
00:36:59,920 --> 00:37:02,529
would<font color="#E5E5E5"> make the correct guess and we</font>

984
00:37:01,420 --> 00:37:04,390
would know<font color="#CCCCCC"> the address</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> function</font>

985
00:37:02,529 --> 00:37:06,640
pointer<font color="#E5E5E5"> but the problem gets even worse</font>

986
00:37:04,390 --> 00:37:09,788
<font color="#CCCCCC">because</font><font color="#E5E5E5"> all the</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually</font>

987
00:37:06,640 --> 00:37:12,400
just revealed in log files so strangely

988
00:37:09,789 --> 00:37:14,140
enough<font color="#E5E5E5"> information about the trusted</font>

989
00:37:12,400 --> 00:37:17,589
world is leaked to the normal world<font color="#E5E5E5"> via</font>

990
00:37:14,140 --> 00:37:20,680
<font color="#CCCCCC">the file system so it completely defeats</font>

991
00:37:17,589 --> 00:37:22,960
this you know mechanism<font color="#CCCCCC"> this security</font>

992
00:37:20,680 --> 00:37:25,089
mitigation<font color="#CCCCCC"> because if we can</font><font color="#E5E5E5"> just crash</font>

993
00:37:22,960 --> 00:37:26,740
it once and will log out the<font color="#E5E5E5"> address</font>

994
00:37:25,089 --> 00:37:28,630
<font color="#E5E5E5">that the trust was loaded to</font><font color="#CCCCCC"> and we</font>

995
00:37:26,740 --> 00:37:30,819
<font color="#E5E5E5">don't need to</font><font color="#CCCCCC"> make guess 256 times</font><font color="#E5E5E5"> which</font>

996
00:37:28,630 --> 00:37:33,430
<font color="#E5E5E5">would be trivial</font><font color="#CCCCCC"> we see the guests once</font>

997
00:37:30,819 --> 00:37:36,730
fail and<font color="#CCCCCC"> they guess again because we</font>

998
00:37:33,430 --> 00:37:39,009
<font color="#E5E5E5">know the address so this gets this code</font>

999
00:37:36,730 --> 00:37:41,019
execution into the trust<font color="#CCCCCC"> live</font><font color="#E5E5E5"> now we</font>

1000
00:37:39,009 --> 00:37:43,390
have trusted execution<font color="#E5E5E5"> and we're on to</font>

1001
00:37:41,019 --> 00:37:44,740
the final summation<font color="#E5E5E5"> I'm sure everyone's</font>

1002
00:37:43,390 --> 00:37:48,069
<font color="#E5E5E5">at the edge of their seats</font><font color="#CCCCCC"> right now is</font>

1003
00:37:44,740 --> 00:37:51,549
getting very exciting<font color="#CCCCCC"> but we have the</font>

1004
00:37:48,069 --> 00:37:54,779
trust of<font color="#CCCCCC"> kernel which implements all</font>

1005
00:37:51,549 --> 00:37:57,220
these different<font color="#CCCCCC"> mechanisms inside</font><font color="#E5E5E5"> the</font>

1006
00:37:54,779 --> 00:37:58,930
inside of the trust<font color="#CCCCCC"> of the world that</font>

1007
00:37:57,220 --> 00:38:01,089
the trust<font color="#E5E5E5"> widths themselves used to</font>

1008
00:37:58,930 --> 00:38:02,200
operate normally like<font color="#E5E5E5"> apps</font><font color="#CCCCCC"> so they can</font>

1009
00:38:01,089 --> 00:38:04,960
map<font color="#CCCCCC"> and marine like I've</font><font color="#E5E5E5"> said before</font>

1010
00:38:02,200 --> 00:38:08,799
they provide IPC<font color="#CCCCCC"> do everything you'd</font>

1011
00:38:04,960 --> 00:38:10,660
expect<font color="#E5E5E5"> a curl has to do for an</font>

1012
00:38:08,799 --> 00:38:14,109
application<font color="#CCCCCC"> of function</font>

1013
00:38:10,660 --> 00:38:18,180
so this trusted core has<font color="#CCCCCC"> written one big</font>

1014
00:38:14,109 --> 00:38:21,098
one<font color="#CCCCCC"> err ability that</font><font color="#E5E5E5"> you might suspect</font>

1015
00:38:18,180 --> 00:38:22,980
<font color="#CCCCCC">that's used executing system calls or</font>

1016
00:38:21,099 --> 00:38:27,490
issuing system<font color="#E5E5E5"> call set trusted core and</font>

1017
00:38:22,980 --> 00:38:29,319
that is that there is<font color="#E5E5E5"> absolutely no</font>

1018
00:38:27,490 --> 00:38:32,109
employer<font color="#CCCCCC"> Tannen's nation whatsoever</font><font color="#E5E5E5"> so</font>

1019
00:38:29,319 --> 00:38:33,819
if you imagine a<font color="#CCCCCC"> linux</font><font color="#E5E5E5"> kernel that never</font>

1020
00:38:32,109 --> 00:38:35,680
<font color="#CCCCCC">Santas</font><font color="#E5E5E5"> any in the pointers you pass in</font>

1021
00:38:33,819 --> 00:38:37,299
<font color="#CCCCCC">that'd be a giant issue if you aren't</font>

1022
00:38:35,680 --> 00:38:39,129
familiar<font color="#E5E5E5"> with this the</font><font color="#CCCCCC"> linux kernel</font><font color="#E5E5E5"> has</font>

1023
00:38:37,299 --> 00:38:41,859
to go through any pointers so<font color="#E5E5E5"> oftentimes</font>

1024
00:38:39,130 --> 00:38:44,079
<font color="#CCCCCC">in user land we need to</font><font color="#E5E5E5"> specify some</font>

1025
00:38:41,859 --> 00:38:46,920
kind of<font color="#E5E5E5"> buffer arguments or some kind of</font>

1026
00:38:44,079 --> 00:38:49,480
structure<font color="#CCCCCC"> that the kernel operate on</font>

1027
00:38:46,920 --> 00:38:51,039
such as like a stat buffer to say we

1028
00:38:49,480 --> 00:38:52,450
<font color="#E5E5E5">want the kernel to tell us how big a</font>

1029
00:38:51,039 --> 00:38:53,980
file is we need to pass in a buffer

1030
00:38:52,450 --> 00:38:56,049
which says all<font color="#CCCCCC"> the information</font><font color="#E5E5E5"> about the</font>

1031
00:38:53,980 --> 00:38:58,359
file you have right into this buffer<font color="#E5E5E5"> now</font>

1032
00:38:56,049 --> 00:39:00,519
an attacker<font color="#E5E5E5"> might think why don't I</font>

1033
00:38:58,359 --> 00:39:01,839
point<font color="#CCCCCC"> this buffer into the kernels</font>

1034
00:39:00,519 --> 00:39:04,868
address space and<font color="#E5E5E5"> have the kernel</font><font color="#CCCCCC"> write</font>

1035
00:39:01,839 --> 00:39:07,058
to itself<font color="#E5E5E5"> this is a giant class of bugs</font>

1036
00:39:04,869 --> 00:39:08,349
<font color="#E5E5E5">and kill a long time ago this is all is</font>

1037
00:39:07,059 --> 00:39:09,970
handled because<font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> is able</font><font color="#E5E5E5"> to</font>

1038
00:39:08,349 --> 00:39:12,009
check and very easily differentiate

1039
00:39:09,970 --> 00:39:18,129
between<font color="#E5E5E5"> you land addresses and kernel</font>

1040
00:39:12,009 --> 00:39:19,930
<font color="#E5E5E5">and addresses</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> security boundary</font>

1041
00:39:18,130 --> 00:39:22,720
or this check this<font color="#E5E5E5"> doesn't actually</font>

1042
00:39:19,930 --> 00:39:24,220
exist in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Huawei trust zone kernel so</font>

1043
00:39:22,720 --> 00:39:26,169
if I pass<font color="#CCCCCC"> them an address even if it</font>

1044
00:39:24,220 --> 00:39:29,078
<font color="#E5E5E5">doesn't belong to my trustless address</font>

1045
00:39:26,170 --> 00:39:30,759
space the<font color="#E5E5E5"> trusted core has no idea who</font>

1046
00:39:29,079 --> 00:39:32,079
this belongs to<font color="#E5E5E5"> de</font><font color="#CCCCCC"> souza belongs to user</font>

1047
00:39:30,759 --> 00:39:34,390
language may not<font color="#CCCCCC"> be the case in and will</font>

1048
00:39:32,079 --> 00:39:36,849
<font color="#E5E5E5">just right there so this allows us</font><font color="#CCCCCC"> to</font>

1049
00:39:34,390 --> 00:39:39,339
<font color="#CCCCCC">very easily take over</font><font color="#E5E5E5"> the trusted core</font>

1050
00:39:36,849 --> 00:39:42,279
now<font color="#E5E5E5"> strangely</font><font color="#CCCCCC"> enough the trusted core</font>

1051
00:39:39,339 --> 00:39:43,720
<font color="#E5E5E5">actually has hundreds of system calls</font><font color="#CCCCCC"> so</font>

1052
00:39:42,279 --> 00:39:45,910
we<font color="#CCCCCC"> defined a</font><font color="#E5E5E5"> sequence of system calls</font>

1053
00:39:43,720 --> 00:39:47,200
<font color="#E5E5E5">that give us an arbitrary right we don't</font>

1054
00:39:45,910 --> 00:39:50,859
actually need to<font color="#CCCCCC"> reverse-engineer</font><font color="#E5E5E5"> the</font>

1055
00:39:47,200 --> 00:39:53,140
entire thing and<font color="#E5E5E5"> determine what exactly</font>

1056
00:39:50,859 --> 00:39:54,609
system poles are you doing<font color="#E5E5E5"> now a little</font>

1057
00:39:53,140 --> 00:39:56,589
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> about the</font><font color="#CCCCCC"> environment or that we're</font>

1058
00:39:54,609 --> 00:39:59,680
<font color="#CCCCCC">attacking</font><font color="#E5E5E5"> there is noise</font><font color="#CCCCCC"> Solara so we</font>

1059
00:39:56,589 --> 00:40:02,140
know<font color="#E5E5E5"> exactly where the kernel is mapped</font>

1060
00:39:59,680 --> 00:40:03,910
inside the trusted world<font color="#CCCCCC"> I guess it'll</font>

1061
00:40:02,140 --> 00:40:05,500
be<font color="#E5E5E5"> called</font><font color="#CCCCCC"> Kay SOR which</font><font color="#E5E5E5"> is another thing</font>

1062
00:40:03,910 --> 00:40:06,910
where the kernel<font color="#CCCCCC"> has an interest space</font>

1063
00:40:05,500 --> 00:40:09,579
layout randomization applying to<font color="#E5E5E5"> it</font>

1064
00:40:06,910 --> 00:40:12,950
<font color="#CCCCCC">there is</font><font color="#E5E5E5"> pxn the stands</font><font color="#CCCCCC"> will page</font>

1065
00:40:09,579 --> 00:40:16,910
execute never if you're familiar<font color="#CCCCCC"> with</font>

1066
00:40:12,950 --> 00:40:19,730
x86 the same thing is called<font color="#E5E5E5"> SMA P or</font>

1067
00:40:16,910 --> 00:40:23,390
<font color="#E5E5E5">SMAP which is supervisor mode</font><font color="#CCCCCC"> SMAP</font>

1068
00:40:19,730 --> 00:40:25,850
supervisor mode execution prevention<font color="#CCCCCC"> so</font>

1069
00:40:23,390 --> 00:40:28,210
this means that<font color="#E5E5E5"> our</font><font color="#CCCCCC"> kernel will not</font>

1070
00:40:25,850 --> 00:40:31,160
<font color="#E5E5E5">execute code that exists in</font><font color="#CCCCCC"> userland</font>

1071
00:40:28,210 --> 00:40:34,040
<font color="#CCCCCC">there is no pan which is for page access</font>

1072
00:40:31,160 --> 00:40:37,609
<font color="#CCCCCC">than</font><font color="#E5E5E5"> ever so</font><font color="#CCCCCC"> the kernel can access Uslan</font>

1073
00:40:34,040 --> 00:40:39,320
memory arbitrarily<font color="#E5E5E5"> if you do have had it</font>

1074
00:40:37,610 --> 00:40:40,640
makes your life more difficult<font color="#CCCCCC"> we have</font>

1075
00:40:39,320 --> 00:40:44,270
<font color="#E5E5E5">to go through a gate whenever you want</font>

1076
00:40:40,640 --> 00:40:46,009
to<font color="#CCCCCC"> access something in user land so our</font>

1077
00:40:44,270 --> 00:40:47,180
<font color="#CCCCCC">return pieces of code are typically</font>

1078
00:40:46,010 --> 00:40:48,560
<font color="#E5E5E5">going to go through this gate</font><font color="#CCCCCC"> so if</font>

1079
00:40:47,180 --> 00:40:51,910
you're<font color="#CCCCCC"> able to crop the pointer inside</font>

1080
00:40:48,560 --> 00:40:54,500
the<font color="#CCCCCC"> kernel and pointed into user land</font>

1081
00:40:51,910 --> 00:40:56,779
it's going the kernel is going to panic

1082
00:40:54,500 --> 00:40:58,460
<font color="#E5E5E5">instead of actually trusting your</font>

1083
00:40:56,780 --> 00:41:00,500
reference so the other thing which<font color="#CCCCCC"> is</font>

1084
00:40:58,460 --> 00:41:02,510
<font color="#E5E5E5">interesting is there's no DEP data</font>

1085
00:41:00,500 --> 00:41:05,840
execution prevention<font color="#E5E5E5"> also known as like</font>

1086
00:41:02,510 --> 00:41:07,400
<font color="#CCCCCC">right X or X</font><font color="#E5E5E5"> or any region which is</font>

1087
00:41:05,840 --> 00:41:09,500
writable should not also be executable

1088
00:41:07,400 --> 00:41:11,990
<font color="#E5E5E5">this is not enforced so the cruel heap</font>

1089
00:41:09,500 --> 00:41:14,150
is actually executable in this case<font color="#E5E5E5"> and</font>

1090
00:41:11,990 --> 00:41:15,259
there's also like<font color="#E5E5E5"> I</font><font color="#CCCCCC"> mentioned hundreds</font>

1091
00:41:14,150 --> 00:41:17,510
of system<font color="#E5E5E5"> calls in fact</font><font color="#CCCCCC"> there's about</font>

1092
00:41:15,260 --> 00:41:19,720
<font color="#CCCCCC">300 and some of our</font><font color="#E5E5E5"> behind permission</font>

1093
00:41:17,510 --> 00:41:22,160
checks and there I have no<font color="#E5E5E5"> idea why</font><font color="#CCCCCC"> a</font>

1094
00:41:19,720 --> 00:41:25,430
kernel<font color="#E5E5E5"> which supports</font><font color="#CCCCCC"> nine different</font>

1095
00:41:22,160 --> 00:41:27,319
<font color="#CCCCCC">hard-coded applications or</font><font color="#E5E5E5"> like nine or</font>

1096
00:41:25,430 --> 00:41:28,850
<font color="#CCCCCC">six hard-coded applications needs to</font>

1097
00:41:27,320 --> 00:41:30,500
support<font color="#E5E5E5"> so many different system calls</font>

1098
00:41:28,850 --> 00:41:31,610
it might<font color="#E5E5E5"> an something to do with</font><font color="#CCCCCC"> wha</font>

1099
00:41:30,500 --> 00:41:33,800
<font color="#E5E5E5">wage is stealing this kernel from</font>

1100
00:41:31,610 --> 00:41:36,050
<font color="#E5E5E5">somebody else I</font><font color="#CCCCCC"> don't know would</font><font color="#E5E5E5"> not</font>

1101
00:41:33,800 --> 00:41:37,880
surprise me but<font color="#E5E5E5"> they have hundreds of</font>

1102
00:41:36,050 --> 00:41:39,020
system<font color="#E5E5E5"> calls</font><font color="#CCCCCC"> so it was a</font><font color="#E5E5E5"> lot of things</font>

1103
00:41:37,880 --> 00:41:42,320
that<font color="#E5E5E5"> we can attack and find</font>

1104
00:41:39,020 --> 00:41:44,630
functionality in so this<font color="#E5E5E5"> is the most</font>

1105
00:41:42,320 --> 00:41:46,310
pedantic slide<font color="#E5E5E5"> so I apologize but</font>

1106
00:41:44,630 --> 00:41:48,350
there's nothing<font color="#E5E5E5"> which actually just</font>

1107
00:41:46,310 --> 00:41:49,820
<font color="#E5E5E5">writes our first argument</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> second</font>

1108
00:41:48,350 --> 00:41:53,420
argument or vice<font color="#CCCCCC"> versa or</font><font color="#E5E5E5"> the first</font>

1109
00:41:49,820 --> 00:41:55,070
<font color="#CCCCCC">argument</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> CREB one</font><font color="#E5E5E5"> step system</font>

1110
00:41:53,420 --> 00:41:57,590
<font color="#E5E5E5">call which just says I have this</font><font color="#CCCCCC"> value I</font>

1111
00:41:55,070 --> 00:41:59,300
<font color="#E5E5E5">want to write to this</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> or and it</font>

1112
00:41:57,590 --> 00:42:01,070
would<font color="#CCCCCC"> perform it but said</font><font color="#E5E5E5"> we need to go</font>

1113
00:41:59,300 --> 00:42:02,420
through<font color="#E5E5E5"> this and this sort of dance and</font>

1114
00:42:01,070 --> 00:42:07,040
<font color="#E5E5E5">find number different system calls that</font>

1115
00:42:02,420 --> 00:42:09,350
once we<font color="#CCCCCC"> combine them get us our rhetoric</font>

1116
00:42:07,040 --> 00:42:11,330
<font color="#CCCCCC">out</font><font color="#E5E5E5"> execution so all these bugs in fact</font>

1117
00:42:09,350 --> 00:42:13,370
the fruits for have to<font color="#CCCCCC"> do with the</font>

1118
00:42:11,330 --> 00:42:14,450
actual pointer<font color="#E5E5E5"> assassination problem of</font>

1119
00:42:13,370 --> 00:42:15,770
course there<font color="#E5E5E5"> are other</font><font color="#CCCCCC"> little more</font>

1120
00:42:14,450 --> 00:42:17,450
legitimate bugs inside the<font color="#CCCCCC"> kernel so</font>

1121
00:42:15,770 --> 00:42:19,880
<font color="#E5E5E5">there is an integer overflow which we</font>

1122
00:42:17,450 --> 00:42:21,049
can use<font color="#E5E5E5"> to read arbitrary addresses</font><font color="#CCCCCC"> I'm</font>

1123
00:42:19,880 --> 00:42:21,839
not going<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> over this right</font><font color="#E5E5E5"> now</font>

1124
00:42:21,050 --> 00:42:27,690
<font color="#E5E5E5">because I'm</font>

1125
00:42:21,839 --> 00:42:28,950
<font color="#E5E5E5">about</font><font color="#CCCCCC"> ten minutes</font><font color="#E5E5E5"> left</font><font color="#CCCCCC"> but if the sides</font>

1126
00:42:27,690 --> 00:42:30,450
will be<font color="#E5E5E5"> online so you can</font><font color="#CCCCCC"> check out</font>

1127
00:42:28,950 --> 00:42:32,160
later but<font color="#E5E5E5"> essentially we're able to</font>

1128
00:42:30,450 --> 00:42:34,200
combine<font color="#E5E5E5"> all these small gadgets</font><font color="#CCCCCC"> of</font>

1129
00:42:32,160 --> 00:42:35,819
functionality<font color="#CCCCCC"> and</font><font color="#E5E5E5"> make it into</font><font color="#CCCCCC"> a rubber</font>

1130
00:42:34,200 --> 00:42:38,549
<font color="#CCCCCC">tree</font><font color="#E5E5E5"> right and we can essentially</font>

1131
00:42:35,819 --> 00:42:41,880
allocate a buffer inside of our trusted

1132
00:42:38,549 --> 00:42:43,499
core kernel<font color="#CCCCCC"> user arbitrary right to</font>

1133
00:42:41,880 --> 00:42:45,119
<font color="#CCCCCC">write the</font><font color="#E5E5E5"> shellcode contents through</font>

1134
00:42:43,499 --> 00:42:47,098
that buffer and then<font color="#CCCCCC"> overwrite a</font>

1135
00:42:45,119 --> 00:42:50,940
function pointer<font color="#E5E5E5"> inside of our trusted</font>

1136
00:42:47,099 --> 00:42:53,819
core they<font color="#CCCCCC"> gain count execution now</font><font color="#E5E5E5"> we've</font>

1137
00:42:50,940 --> 00:42:55,799
completely owned the phone now but

1138
00:42:53,819 --> 00:42:56,849
there's still<font color="#E5E5E5"> another issue which is I</font>

1139
00:42:55,799 --> 00:42:58,920
actually have<font color="#CCCCCC"> no idea</font><font color="#E5E5E5"> where the</font>

1140
00:42:56,849 --> 00:43:03,960
fingerprint authentication stuff<font color="#E5E5E5"> is now</font>

1141
00:42:58,920 --> 00:43:05,430
if you take the trust zone<font color="#E5E5E5"> like image</font>

1142
00:43:03,960 --> 00:43:07,529
bundle which is<font color="#CCCCCC"> flashing to the phone</font>

1143
00:43:05,430 --> 00:43:08,969
and you take it apart so they have a

1144
00:43:07,529 --> 00:43:13,200
custom format which<font color="#E5E5E5"> is pretty easy</font><font color="#CCCCCC"> to</font>

1145
00:43:08,969 --> 00:43:14,579
reverse<font color="#E5E5E5"> inside of this disk</font><font color="#CCCCCC"> you only get</font>

1146
00:43:13,200 --> 00:43:16,259
out<font color="#CCCCCC"> a number</font><font color="#E5E5E5"> of different elf files</font>

1147
00:43:14,579 --> 00:43:17,339
which are your trust<font color="#CCCCCC"> lets</font><font color="#E5E5E5"> you have</font>

1148
00:43:16,259 --> 00:43:18,869
something<font color="#CCCCCC"> called</font><font color="#E5E5E5"> the key</font><font color="#CCCCCC"> mister</font><font color="#E5E5E5"> which</font>

1149
00:43:17,339 --> 00:43:21,808
<font color="#CCCCCC">handles crypto services you have</font><font color="#E5E5E5"> your</font>

1150
00:43:18,869 --> 00:43:23,099
sex storage you have something known as

1151
00:43:21,809 --> 00:43:24,539
<font color="#CCCCCC">a gatekeeper but there's nothing in</font>

1152
00:43:23,099 --> 00:43:26,369
there which looks<font color="#E5E5E5"> like fingerprint</font>

1153
00:43:24,539 --> 00:43:29,420
checking and everything there's also

1154
00:43:26,369 --> 00:43:31,739
<font color="#E5E5E5">pretty small</font><font color="#CCCCCC"> your biggest files 105k</font>

1155
00:43:29,420 --> 00:43:33,329
fingerprint recognition logic which sort

1156
00:43:31,739 --> 00:43:35,489
of can finally tell<font color="#CCCCCC"> the fingerprint</font>

1157
00:43:33,329 --> 00:43:37,229
resembles<font color="#CCCCCC"> an other image should</font><font color="#E5E5E5"> be</font>

1158
00:43:35,489 --> 00:43:42,569
pretty complex I would<font color="#E5E5E5"> think and larger</font>

1159
00:43:37,229 --> 00:43:45,089
than<font color="#E5E5E5"> 100k so how do we find this</font><font color="#CCCCCC"> so I</font>

1160
00:43:42,569 --> 00:43:48,420
think this is<font color="#E5E5E5"> fingerprint DS actually a</font>

1161
00:43:45,089 --> 00:43:50,849
default Android<font color="#E5E5E5"> service</font><font color="#CCCCCC"> I could be wrong</font>

1162
00:43:48,420 --> 00:43:52,890
but<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> oxygen all Android</font>

1163
00:43:50,849 --> 00:43:55,559
phones<font color="#E5E5E5"> are just open</font><font color="#CCCCCC"> source but the</font>

1164
00:43:52,890 --> 00:43:57,779
handle different vendors<font color="#E5E5E5"> implementations</font>

1165
00:43:55,559 --> 00:43:59,549
<font color="#E5E5E5">of fingerprint recognition services the</font>

1166
00:43:57,779 --> 00:44:01,769
vendor has to map in a shared<font color="#CCCCCC"> object</font>

1167
00:43:59,549 --> 00:44:04,200
file into<font color="#E5E5E5"> that which takes care of all</font>

1168
00:44:01,769 --> 00:44:06,598
<font color="#E5E5E5">the functionality that this binary will</font>

1169
00:44:04,200 --> 00:44:08,009
call out to to do the finger projects<font color="#E5E5E5"> so</font>

1170
00:44:06,599 --> 00:44:09,779
if you look<font color="#E5E5E5"> at the memory maps to figure</font>

1171
00:44:08,009 --> 00:44:12,479
<font color="#CCCCCC">for D</font><font color="#E5E5E5"> you find this thing interesting</font>

1172
00:44:09,779 --> 00:44:15,029
which says<font color="#CCCCCC"> live FPC tack share now</font>

1173
00:44:12,479 --> 00:44:16,919
<font color="#CCCCCC">attacks in some trusted agent something</font>

1174
00:44:15,029 --> 00:44:18,210
<font color="#E5E5E5">an</font><font color="#CCCCCC"> FPGA of details like fingerprint</font>

1175
00:44:16,920 --> 00:44:20,130
something I don't know what the C's<font color="#CCCCCC"> are</font>

1176
00:44:18,210 --> 00:44:21,779
but this<font color="#E5E5E5"> looks interesting to me so</font><font color="#CCCCCC"> I</font>

1177
00:44:20,130 --> 00:44:23,880
checked it out and<font color="#E5E5E5"> of course what we see</font>

1178
00:44:21,779 --> 00:44:26,279
here is something<font color="#E5E5E5"> that resembles</font>

1179
00:44:23,880 --> 00:44:29,130
<font color="#CCCCCC">huawei's trust zone api</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> mall way</font>

1180
00:44:26,279 --> 00:44:31,440
implements their own<font color="#CCCCCC"> API known as teak</font>

1181
00:44:29,130 --> 00:44:33,900
to implement with their or to interact

1182
00:44:31,440 --> 00:44:34,769
<font color="#CCCCCC">with eric</font><font color="#E5E5E5"> trust and architecture so as</font>

1183
00:44:33,900 --> 00:44:35,599
you can<font color="#CCCCCC"> see we have this really</font>

1184
00:44:34,769 --> 00:44:39,769
<font color="#CCCCCC">suspicious-looking</font>

1185
00:44:35,599 --> 00:44:41,599
string system<font color="#CCCCCC"> bid UUID datsuk and then</font>

1186
00:44:39,769 --> 00:44:45,319
that's passed into<font color="#E5E5E5"> an open session call</font>

1187
00:44:41,599 --> 00:44:47,420
now if you look at<font color="#E5E5E5"> this dot SEC it's</font>

1188
00:44:45,319 --> 00:44:48,529
just<font color="#CCCCCC"> as data if you run file on it and</font>

1189
00:44:47,420 --> 00:44:49,880
like other<font color="#CCCCCC"> trusts let's it's not gonna</font>

1190
00:44:48,529 --> 00:44:52,249
say it's an elf it's<font color="#E5E5E5"> gonna say it's</font>

1191
00:44:49,880 --> 00:44:54,470
<font color="#E5E5E5">actually stronger blob of data so this</font>

1192
00:44:52,249 --> 00:44:56,689
says to me<font color="#CCCCCC"> is an encrypted</font><font color="#E5E5E5"> trust</font><font color="#CCCCCC"> lid</font><font color="#E5E5E5"> now</font>

1193
00:44:54,470 --> 00:44:58,488
why did<font color="#E5E5E5"> Huawei feel the need to</font><font color="#CCCCCC"> encrypt</font>

1194
00:44:56,690 --> 00:45:00,859
this trust<font color="#E5E5E5"> and</font><font color="#CCCCCC"> not others</font>

1195
00:44:58,489 --> 00:45:01,910
I'll lead that up to the audience to

1196
00:45:00,859 --> 00:45:04,578
<font color="#E5E5E5">figure out why they might want to do</font>

1197
00:45:01,910 --> 00:45:06,499
some shady like that<font color="#CCCCCC"> it could be a</font>

1198
00:45:04,579 --> 00:45:08,630
<font color="#E5E5E5">security reason it could be something</font>

1199
00:45:06,499 --> 00:45:10,459
else<font color="#CCCCCC"> but they didn't they do feel the</font>

1200
00:45:08,630 --> 00:45:13,819
<font color="#E5E5E5">need to encrypt whatever covers in that</font>

1201
00:45:10,460 --> 00:45:16,359
<font color="#CCCCCC">trust lit so to actually get to this</font>

1202
00:45:13,819 --> 00:45:19,369
we're<font color="#E5E5E5"> gonna have to do is leverage our</font>

1203
00:45:16,359 --> 00:45:20,660
trusted core code execution<font color="#E5E5E5"> to leak out</font>

1204
00:45:19,369 --> 00:45:24,019
<font color="#E5E5E5">the</font><font color="#CCCCCC"> college's of</font><font color="#E5E5E5"> this trust</font><font color="#CCCCCC"> lei</font><font color="#E5E5E5"> and this</font>

1205
00:45:20,660 --> 00:45:26,839
is a lot of leaking of encrypted data is

1206
00:45:24,019 --> 00:45:29,779
<font color="#E5E5E5">done so on</font><font color="#CCCCCC"> iphone if they want to</font><font color="#E5E5E5"> leak</font>

1207
00:45:26,839 --> 00:45:31,339
<font color="#E5E5E5">the kernel cache</font><font color="#CCCCCC"> what they can do is</font>

1208
00:45:29,779 --> 00:45:32,930
<font color="#CCCCCC">they can wait till it's loaded use a bug</font>

1209
00:45:31,339 --> 00:45:34,910
from<font color="#E5E5E5"> it alters the system that's been</font>

1210
00:45:32,930 --> 00:45:38,479
disclosed<font color="#CCCCCC"> and then they can leak out</font><font color="#E5E5E5"> the</font>

1211
00:45:34,910 --> 00:45:39,950
contents<font color="#CCCCCC"> of the decrypted memory because</font>

1212
00:45:38,479 --> 00:45:43,249
this needs to be decrypted for it to run

1213
00:45:39,950 --> 00:45:44,779
<font color="#E5E5E5">so once our fingerprint logic is working</font>

1214
00:45:43,249 --> 00:45:46,609
and then you<font color="#CCCCCC"> know we</font><font color="#E5E5E5"> can check this</font>

1215
00:45:44,779 --> 00:45:48,200
physically by just making<font color="#CCCCCC"> sure that we</font>

1216
00:45:46,609 --> 00:45:49,489
can authenticate<font color="#CCCCCC"> is with fingerprint</font>

1217
00:45:48,200 --> 00:45:51,439
we know that code must be decrypted

1218
00:45:49,489 --> 00:45:53,089
somewhere<font color="#E5E5E5"> in memory and with a trusted</font>

1219
00:45:51,440 --> 00:45:55,400
core we<font color="#E5E5E5"> have access to</font><font color="#CCCCCC"> all the physical</font>

1220
00:45:53,089 --> 00:45:57,229
<font color="#CCCCCC">memory on the device</font><font color="#E5E5E5"> so we can do we can</font>

1221
00:45:55,400 --> 00:45:59,029
<font color="#E5E5E5">crawl all of our physical memory and</font>

1222
00:45:57,229 --> 00:46:00,618
looking for<font color="#CCCCCC"> armed instructions and</font>

1223
00:45:59,029 --> 00:46:03,279
whenever we find our instruction we can

1224
00:46:00,619 --> 00:46:05,450
dump the memory<font color="#E5E5E5"> around it and look for</font>

1225
00:46:03,279 --> 00:46:07,609
<font color="#E5E5E5">references to just literal strings like</font>

1226
00:46:05,450 --> 00:46:09,019
fingerprint and fingerprint deed there's

1227
00:46:07,609 --> 00:46:11,630
a pretty naive approach but<font color="#E5E5E5"> it happened</font>

1228
00:46:09,019 --> 00:46:14,649
to<font color="#E5E5E5"> work</font><font color="#CCCCCC"> once I was able to do that I</font>

1229
00:46:11,630 --> 00:46:17,869
<font color="#E5E5E5">actually could dump out an entire</font>

1230
00:46:14,650 --> 00:46:19,430
unstriped<font color="#E5E5E5"> elf file so what this means</font>

1231
00:46:17,869 --> 00:46:20,900
<font color="#CCCCCC">that</font><font color="#E5E5E5"> they al final actually had complete</font>

1232
00:46:19,430 --> 00:46:23,390
symbols<font color="#E5E5E5"> and was very</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to reverse</font>

1233
00:46:20,900 --> 00:46:25,009
engineer<font color="#E5E5E5"> and I essentially found a</font>

1234
00:46:23,390 --> 00:46:27,769
<font color="#E5E5E5">function</font><font color="#CCCCCC"> called identify image which</font>

1235
00:46:25,009 --> 00:46:29,930
happened to correspond to the<font color="#E5E5E5"> recognized</font>

1236
00:46:27,769 --> 00:46:31,399
fingerprint functionality and from there

1237
00:46:29,930 --> 00:46:34,009
we can<font color="#E5E5E5"> essentially get this</font><font color="#CCCCCC"> - since you</font>

1238
00:46:31,400 --> 00:46:35,859
always<font color="#CCCCCC"> return true</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> patched that in</font>

1239
00:46:34,009 --> 00:46:38,720
and now<font color="#E5E5E5"> fingerprint checking works</font>

1240
00:46:35,859 --> 00:46:41,150
<font color="#CCCCCC">that's actually end of my talk</font>

1241
00:46:38,720 --> 00:46:43,819
I hope everyone enjoyed it<font color="#E5E5E5"> now I have a</font>

1242
00:46:41,150 --> 00:46:46,790
more interesting<font color="#CCCCCC"> demo here we've</font>

1243
00:46:43,820 --> 00:46:51,530
actually demonstrate<font color="#E5E5E5"> unlocking the phone</font>

1244
00:46:46,790 --> 00:46:54,770
using<font color="#CCCCCC"> the exploit with my nose so one</font>

1245
00:46:51,530 --> 00:46:57,680
second so hopefully everyone can<font color="#E5E5E5"> see</font>

1246
00:46:54,770 --> 00:46:58,940
this<font color="#CCCCCC"> I know it's pretty far away so I</font>

1247
00:46:57,680 --> 00:47:01,069
just started the phone so I actually

1248
00:46:58,940 --> 00:47:03,260
have to unlock it<font color="#CCCCCC"> with a pin</font><font color="#E5E5E5"> but now I</font>

1249
00:47:01,070 --> 00:47:06,020
can lock<font color="#E5E5E5"> the</font><font color="#CCCCCC"> phone all</font><font color="#E5E5E5"> right</font>

1250
00:47:03,260 --> 00:47:08,510
and now if I<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to use my fingerprint</font>

1251
00:47:06,020 --> 00:47:12,500
to unlock it<font color="#E5E5E5"> see I think it's this one</font>

1252
00:47:08,510 --> 00:47:13,790
maybe it's this<font color="#CCCCCC"> one</font><font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> I can use</font><font color="#E5E5E5"> my</font>

1253
00:47:12,500 --> 00:47:16,700
finger to unlock the phone who everyone

1254
00:47:13,790 --> 00:47:20,350
saw<font color="#CCCCCC"> that I can't just arbitrarily use</font>

1255
00:47:16,700 --> 00:47:24,140
other body parts yet or other fingers

1256
00:47:20,350 --> 00:47:27,020
but if I run<font color="#CCCCCC"> my exploit so I just have</font>

1257
00:47:24,140 --> 00:47:28,970
<font color="#E5E5E5">it as an app on the phone</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not 100%</font>

1258
00:47:27,020 --> 00:47:29,870
<font color="#E5E5E5">reliable it's not</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it didn't work</font>

1259
00:47:28,970 --> 00:47:32,600
this<font color="#CCCCCC"> time</font>

1260
00:47:29,870 --> 00:47:34,100
but<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so it's now pwned the trust</font>

1261
00:47:32,600 --> 00:47:41,560
<font color="#CCCCCC">zone so now I should be able</font><font color="#E5E5E5"> to use my</font>

1262
00:47:34,100 --> 00:47:41,560
nose all<font color="#E5E5E5"> right all right</font>

1263
00:47:45,170 --> 00:47:50,160
<font color="#CCCCCC">all right that's essentially the end of</font>

1264
00:47:47,520 --> 00:47:51,720
my talk<font color="#CCCCCC"> I have room in here</font><font color="#E5E5E5"> for Q&A I</font>

1265
00:47:50,160 --> 00:47:55,500
don't know if this<font color="#E5E5E5"> conference does it</font>

1266
00:47:51,720 --> 00:47:58,859
but if anyone<font color="#E5E5E5"> has any questions feel</font>

1267
00:47:55,500 --> 00:48:00,599
<font color="#E5E5E5">free to ask otherwise I'll be right here</font>

1268
00:47:58,859 --> 00:48:03,750
after<font color="#CCCCCC"> the talk I want to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to me and</font>

1269
00:48:00,599 --> 00:48:05,670
one more thing<font color="#CCCCCC"> I do work for</font><font color="#E5E5E5"> Raytheon</font>

1270
00:48:03,750 --> 00:48:07,109
CSI and<font color="#E5E5E5"> if you want time that</font>

1271
00:48:05,670 --> 00:48:09,599
interesting or if you<font color="#E5E5E5"> think this is kind</font>

1272
00:48:07,109 --> 00:48:10,529
<font color="#CCCCCC">of work you would like to do this</font><font color="#E5E5E5"> is</font>

1273
00:48:09,599 --> 00:48:11,940
sort of what I do<font color="#CCCCCC"> for a job</font>

1274
00:48:10,530 --> 00:48:14,970
<font color="#E5E5E5">yeah I look for memory corruption bugs</font>

1275
00:48:11,940 --> 00:48:16,319
and I'm going<font color="#E5E5E5"> to exploit them so if you</font>

1276
00:48:14,970 --> 00:48:19,009
would like<font color="#E5E5E5"> to do this as a full-time</font><font color="#CCCCCC"> job</font>

1277
00:48:16,319 --> 00:48:23,430
<font color="#E5E5E5">is completely possible</font><font color="#CCCCCC"> just talk to</font><font color="#E5E5E5"> me</font>

1278
00:48:19,010 --> 00:48:26,930
<font color="#CCCCCC">and yeah we're retiring so</font><font color="#E5E5E5"> I'll be</font>

1279
00:48:23,430 --> 00:48:26,930
<font color="#E5E5E5">around for</font><font color="#CCCCCC"> the talk thanks everybody</font>

