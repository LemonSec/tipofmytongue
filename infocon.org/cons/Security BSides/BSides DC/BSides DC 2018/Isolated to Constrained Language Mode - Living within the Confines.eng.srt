1
00:00:00,030 --> 00:00:05,069
besides DC would like to thank all of

2
00:00:02,310 --> 00:00:07,500
our sponsors<font color="#E5E5E5"> and a special thank you to</font>

3
00:00:05,069 --> 00:00:10,710
all of<font color="#CCCCCC"> our speakers volunteers and</font>

4
00:00:07,500 --> 00:00:13,590
organizers for making 2018<font color="#E5E5E5"> a success</font>

5
00:00:10,710 --> 00:00:15,210
<font color="#E5E5E5">this talk is about</font><font color="#CCCCCC"> ice leave the</font>

6
00:00:13,590 --> 00:00:16,980
constrained language mode<font color="#E5E5E5"> living within</font>

7
00:00:15,210 --> 00:00:18,210
the confines of it<font color="#E5E5E5"> just curious does</font>

8
00:00:16,980 --> 00:00:20,550
<font color="#E5E5E5">anyone like played with constrained</font>

9
00:00:18,210 --> 00:00:23,250
language mode<font color="#E5E5E5"> at all really Thomas you</font>

10
00:00:20,550 --> 00:00:24,900
must had a lot<font color="#E5E5E5"> of fun huh it's a great</font>

11
00:00:23,250 --> 00:00:26,430
way to bash your head<font color="#E5E5E5"> into things when</font>

12
00:00:24,900 --> 00:00:30,028
trying<font color="#E5E5E5"> to figure out how to write good</font>

13
00:00:26,430 --> 00:00:32,040
code<font color="#CCCCCC"> alright so gonna</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> started my</font>

14
00:00:30,029 --> 00:00:34,380
name is Chris hunter I'm the co-founder

15
00:00:32,040 --> 00:00:37,050
of a security company out of Colorado

16
00:00:34,380 --> 00:00:38,250
called 14 or security my background is

17
00:00:37,050 --> 00:00:39,410
basically I<font color="#E5E5E5"> started assistance</font>

18
00:00:38,250 --> 00:00:41,460
administrator and kind<font color="#E5E5E5"> of moved</font><font color="#CCCCCC"> into</font>

19
00:00:39,410 --> 00:00:43,890
<font color="#E5E5E5">penetration testing the red team work</font>

20
00:00:41,460 --> 00:00:45,059
<font color="#CCCCCC">there's someone</font><font color="#E5E5E5"> I'm a huge</font><font color="#CCCCCC"> open-source</font>

21
00:00:43,890 --> 00:00:46,950
fan I like to write a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

22
00:00:45,059 --> 00:00:48,839
code<font color="#E5E5E5"> some of the tools I wrote about</font><font color="#CCCCCC"> our</font>

23
00:00:46,950 --> 00:00:51,600
<font color="#CCCCCC">veil along with a</font><font color="#E5E5E5"> couple other</font>

24
00:00:48,840 --> 00:00:53,000
individuals<font color="#E5E5E5"> that I witness and a tool</font>

25
00:00:51,600 --> 00:00:54,870
when<font color="#E5E5E5"> the implant where if you were in my</font>

26
00:00:53,000 --> 00:00:56,730
workshop today<font color="#E5E5E5"> you would</font><font color="#CCCCCC"> be someone</font>

27
00:00:54,870 --> 00:01:00,599
<font color="#E5E5E5">familiar with that and I will talk</font><font color="#CCCCCC"> about</font>

28
00:00:56,730 --> 00:01:02,160
it kind<font color="#CCCCCC"> of briefly</font><font color="#E5E5E5"> during this talk</font><font color="#CCCCCC"> so</font>

29
00:01:00,600 --> 00:01:03,570
let's<font color="#E5E5E5"> just talk</font><font color="#CCCCCC"> about we're gonna be</font>

30
00:01:02,160 --> 00:01:06,090
focused on<font color="#E5E5E5"> constrained language mode</font>

31
00:01:03,570 --> 00:01:08,159
what is it how does<font color="#CCCCCC"> it</font><font color="#E5E5E5"> work what are</font>

32
00:01:06,090 --> 00:01:10,049
<font color="#E5E5E5">different data</font><font color="#CCCCCC"> types that are allowed</font>

33
00:01:08,159 --> 00:01:11,790
within constrain language mode<font color="#E5E5E5"> what</font>

34
00:01:10,049 --> 00:01:13,979
doesn't work that you would expect<font color="#E5E5E5"> or</font>

35
00:01:11,790 --> 00:01:15,659
maybe be surprised<font color="#CCCCCC"> that does not work in</font>

36
00:01:13,979 --> 00:01:17,250
<font color="#E5E5E5">constrained language mode and at the</font>

37
00:01:15,659 --> 00:01:19,049
<font color="#E5E5E5">same time what actually can you do</font>

38
00:01:17,250 --> 00:01:21,119
within constrained language mode<font color="#E5E5E5"> and</font>

39
00:01:19,049 --> 00:01:22,409
finally we're gonna look at<font color="#E5E5E5"> kind of like</font>

40
00:01:21,119 --> 00:01:24,240
an old dog an old trick<font color="#CCCCCC"> but in a</font>

41
00:01:22,409 --> 00:01:26,909
different way<font color="#E5E5E5"> to kind</font><font color="#CCCCCC"> of get it done so</font>

42
00:01:24,240 --> 00:01:29,039
we'll get<font color="#E5E5E5"> to that a</font><font color="#CCCCCC"> little bit it's a</font>

43
00:01:26,909 --> 00:01:31,860
constrained language mode what is this

44
00:01:29,040 --> 00:01:33,210
well<font color="#CCCCCC"> Microsoft likes the document</font>

45
00:01:31,860 --> 00:01:34,920
<font color="#CCCCCC">constrained language mode and described</font>

46
00:01:33,210 --> 00:01:37,048
it as partial<font color="#CCCCCC"> Korean language mode is a</font>

47
00:01:34,920 --> 00:01:38,549
language mode of<font color="#CCCCCC"> PowerShell that is</font>

48
00:01:37,049 --> 00:01:40,890
designed to<font color="#E5E5E5"> support</font><font color="#CCCCCC"> day-to-day</font><font color="#E5E5E5"> to</font>

49
00:01:38,549 --> 00:01:44,130
administrative tasks yet restrict access

50
00:01:40,890 --> 00:01:47,540
to<font color="#E5E5E5"> sensitive language elements</font><font color="#CCCCCC"> that can</font>

51
00:01:44,130 --> 00:01:49,589
<font color="#E5E5E5">be</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> to invoke arbitrary api's so</font>

52
00:01:47,540 --> 00:01:51,420
almost any code that<font color="#CCCCCC"> you're gonna write</font>

53
00:01:49,590 --> 00:01:53,759
that's pure PowerShell<font color="#E5E5E5"> or you're</font><font color="#CCCCCC"> gonna</font>

54
00:01:51,420 --> 00:01:55,590
leverage powershell commandlets<font color="#E5E5E5"> that</font>

55
00:01:53,759 --> 00:01:58,439
operate with pure<font color="#E5E5E5"> powershell data types</font>

56
00:01:55,590 --> 00:02:00,750
are allowed and can run if you try to

57
00:01:58,439 --> 00:02:02,699
run something like invoke immunity cast

58
00:02:00,750 --> 00:02:03,780
though or run some<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> shell code</font>

59
00:02:02,700 --> 00:02:06,930
runner<font color="#CCCCCC"> or inject she'll go</font><font color="#E5E5E5"> with</font>

60
00:02:03,780 --> 00:02:08,429
PowerShell in<font color="#E5E5E5"> any way that's almost 99</font>

61
00:02:06,930 --> 00:02:10,410
times out of<font color="#CCCCCC"> 100 as it may just</font>

62
00:02:08,429 --> 00:02:12,090
<font color="#CCCCCC">completely</font><font color="#E5E5E5"> outright block because the</font>

63
00:02:10,410 --> 00:02:13,590
<font color="#CCCCCC">API so you're going</font><font color="#E5E5E5"> to attempt</font><font color="#CCCCCC"> to access</font>

64
00:02:12,090 --> 00:02:17,790
<font color="#E5E5E5">and constrain language mode are</font>

65
00:02:13,590 --> 00:02:19,830
<font color="#CCCCCC">inaccessible so where does this kind</font><font color="#E5E5E5"> of</font>

66
00:02:17,790 --> 00:02:22,049
fit in in<font color="#E5E5E5"> kind of Microsoft's like maybe</font>

67
00:02:19,830 --> 00:02:23,849
secure boot<font color="#CCCCCC"> when it comes down to try to</font>

68
00:02:22,050 --> 00:02:25,349
like not really secure boot but<font color="#CCCCCC"> what</font>

69
00:02:23,849 --> 00:02:28,069
where<font color="#E5E5E5"> does it fit in to help protect the</font>

70
00:02:25,349 --> 00:02:30,540
end point<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is actually an image</font><font color="#E5E5E5"> from</font>

71
00:02:28,069 --> 00:02:32,548
Microsoft's<font color="#E5E5E5"> I believe a talk that</font>

72
00:02:30,540 --> 00:02:34,109
<font color="#E5E5E5">someone gave</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> Device guard</font>

73
00:02:32,549 --> 00:02:37,200
<font color="#E5E5E5">or what's now called Windows Defender</font>

74
00:02:34,110 --> 00:02:39,209
application control<font color="#E5E5E5"> and device guard</font>

75
00:02:37,200 --> 00:02:40,980
<font color="#E5E5E5">really kind of seek</font><font color="#CCCCCC"> their seeks to solve</font>

76
00:02:39,209 --> 00:02:43,260
<font color="#E5E5E5">this problem down here</font><font color="#CCCCCC"> so we're not</font>

77
00:02:40,980 --> 00:02:46,440
<font color="#CCCCCC">looking to secure</font><font color="#E5E5E5"> boot we're not looking</font>

78
00:02:43,260 --> 00:02:48,630
at UEFI UEFI security device guard<font color="#E5E5E5"> is</font>

79
00:02:46,440 --> 00:02:50,940
more interested<font color="#E5E5E5"> in like kernel mode code</font>

80
00:02:48,630 --> 00:02:53,160
integrity user mode code integrity and

81
00:02:50,940 --> 00:02:55,500
<font color="#E5E5E5">constrain language mode kind</font><font color="#CCCCCC"> of fits in</font>

82
00:02:53,160 --> 00:02:57,660
down<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this area to help attempt to a</font>

83
00:02:55,500 --> 00:03:03,329
help enforce<font color="#CCCCCC"> out user mode code</font>

84
00:02:57,660 --> 00:03:05,609
integrity so what does it mean<font color="#CCCCCC"> like</font><font color="#E5E5E5"> what</font>

85
00:03:03,329 --> 00:03:08,400
is constrained language well again<font color="#E5E5E5"> it it</font>

86
00:03:05,610 --> 00:03:10,980
blocks a lot of dangerous<font color="#E5E5E5"> data types so</font>

87
00:03:08,400 --> 00:03:12,660
there's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lumpy largely you'll see in</font>

88
00:03:10,980 --> 00:03:14,518
just<font color="#CCCCCC"> a second</font><font color="#E5E5E5"> unless you are using a</font>

89
00:03:12,660 --> 00:03:16,260
white listed<font color="#E5E5E5"> data type within</font>

90
00:03:14,519 --> 00:03:17,340
constrained language mode<font color="#E5E5E5"> something</font>

91
00:03:16,260 --> 00:03:19,560
that's allowed<font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be</font>

92
00:03:17,340 --> 00:03:21,480
outright blocked<font color="#CCCCCC"> a good way to think</font>

93
00:03:19,560 --> 00:03:23,880
<font color="#E5E5E5">about it is if you can build your script</font>

94
00:03:21,480 --> 00:03:26,940
<font color="#CCCCCC">in pure PowerShell</font><font color="#E5E5E5"> and not try to invoke</font>

95
00:03:23,880 --> 00:03:29,340
anything with c-sharp<font color="#CCCCCC"> it's likely that</font>

96
00:03:26,940 --> 00:03:32,340
<font color="#E5E5E5">your code</font><font color="#CCCCCC"> should be able to run not</font>

97
00:03:29,340 --> 00:03:33,720
<font color="#CCCCCC">otherwise</font><font color="#E5E5E5"> it may not constrain language</font>

98
00:03:32,340 --> 00:03:37,079
mode<font color="#E5E5E5"> kind of came from I believe</font><font color="#CCCCCC"> it was</font>

99
00:03:33,720 --> 00:03:39,569
<font color="#CCCCCC">a look to be</font><font color="#E5E5E5"> the default</font><font color="#CCCCCC"> powershell mode</font>

100
00:03:37,079 --> 00:03:41,099
on like Windows RT<font color="#E5E5E5"> so like their tablet</font>

101
00:03:39,569 --> 00:03:43,380
that<font color="#CCCCCC"> they offered they don't want to</font>

102
00:03:41,099 --> 00:03:44,750
<font color="#E5E5E5">provide full PowerShell language mode so</font>

103
00:03:43,380 --> 00:03:48,989
they gave<font color="#E5E5E5"> it</font><font color="#CCCCCC"> constraint language mode</font>

104
00:03:44,750 --> 00:03:50,940
take a quick look so the<font color="#CCCCCC"> straight leg</font>

105
00:03:48,989 --> 00:03:53,880
<font color="#CCCCCC">emoji at a data types</font><font color="#E5E5E5"> like what can we</font>

106
00:03:50,940 --> 00:03:55,410
work<font color="#CCCCCC"> with well constraint language mode</font>

107
00:03:53,880 --> 00:03:57,209
<font color="#E5E5E5">kind of like I said introduces</font>

108
00:03:55,410 --> 00:04:00,090
<font color="#E5E5E5">whitelisted</font><font color="#CCCCCC"> data types</font>

109
00:03:57,209 --> 00:04:01,560
so it kind of somewhat similar or not<font color="#E5E5E5"> -</font>

110
00:04:00,090 --> 00:04:03,630
kind of like application<font color="#CCCCCC"> whitelisting</font>

111
00:04:01,560 --> 00:04:05,669
except it's only<font color="#E5E5E5"> white listing the data</font>

112
00:04:03,630 --> 00:04:08,130
types you<font color="#E5E5E5"> can operate with this is not a</font>

113
00:04:05,669 --> 00:04:10,530
blacklist only protection protection<font color="#E5E5E5"> and</font>

114
00:04:08,130 --> 00:04:13,260
allowing<font color="#E5E5E5"> everything else if you're using</font>

115
00:04:10,530 --> 00:04:14,880
<font color="#E5E5E5">an allowed</font><font color="#CCCCCC"> data if you aren't using</font><font color="#E5E5E5"> a</font>

116
00:04:13,260 --> 00:04:16,978
data type<font color="#CCCCCC"> that's specifically</font><font color="#E5E5E5"> allowed</font>

117
00:04:14,880 --> 00:04:18,599
you're<font color="#E5E5E5"> going to see an error</font><font color="#CCCCCC"> like this</font>

118
00:04:16,978 --> 00:04:21,000
and so what this is<font color="#CCCCCC"> saying is basically</font>

119
00:04:18,599 --> 00:04:23,400
<font color="#E5E5E5">either this method invocation is</font>

120
00:04:21,000 --> 00:04:24,389
supported only on core types<font color="#E5E5E5"> in this</font>

121
00:04:23,400 --> 00:04:26,400
<font color="#E5E5E5">language mode so that</font>

122
00:04:24,389 --> 00:04:27,689
essentially meaning that it's blocked

123
00:04:26,400 --> 00:04:29,878
<font color="#E5E5E5">from running</font><font color="#CCCCCC"> constrained language mode</font>

124
00:04:27,689 --> 00:04:32,789
<font color="#E5E5E5">only full language mode of PowerShell</font>

125
00:04:29,879 --> 00:04:34,349
<font color="#E5E5E5">will allow</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run so this kind of</font>

126
00:04:32,789 --> 00:04:37,009
abstract were instantly working<font color="#E5E5E5"> to like</font>

127
00:04:34,349 --> 00:04:39,900
how does<font color="#E5E5E5"> this affect you day to day</font>

128
00:04:37,009 --> 00:04:41,310
prior<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that though</font><font color="#CCCCCC"> okay let's so we</font>

129
00:04:39,900 --> 00:04:43,169
<font color="#CCCCCC">talked about data types like what can</font>

130
00:04:41,310 --> 00:04:44,370
you<font color="#E5E5E5"> find</font><font color="#CCCCCC"> us actually</font><font color="#E5E5E5"> loud</font><font color="#CCCCCC"> well one of</font>

131
00:04:43,169 --> 00:04:47,099
the<font color="#E5E5E5"> first things you can do try to look</font>

132
00:04:44,370 --> 00:04:48,990
<font color="#CCCCCC">at MSDN they have some documentation on</font>

133
00:04:47,099 --> 00:04:51,960
what<font color="#E5E5E5"> data types are</font><font color="#CCCCCC"> whitelisted and</font>

134
00:04:48,990 --> 00:04:54,060
<font color="#CCCCCC">what's what's not and the next step is</font>

135
00:04:51,960 --> 00:04:56,008
essentially<font color="#E5E5E5"> okay let's find out what's</font>

136
00:04:54,060 --> 00:04:58,319
documentation is missing from<font color="#E5E5E5"> Hema Stan</font>

137
00:04:56,009 --> 00:05:01,860
<font color="#E5E5E5">MSDN</font><font color="#CCCCCC"> and then actually see what data</font>

138
00:04:58,319 --> 00:05:03,930
types are allowed so<font color="#CCCCCC"> I</font><font color="#E5E5E5"> talked</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> Mac</font>

139
00:05:01,860 --> 00:05:06,300
<font color="#CCCCCC">raver</font><font color="#E5E5E5"> here he formed a PowerShell</font>

140
00:05:03,930 --> 00:05:07,439
one-liner that enumerates all<font color="#E5E5E5"> different</font>

141
00:05:06,300 --> 00:05:09,300
types of allowed data types within

142
00:05:07,439 --> 00:05:10,680
constrained language mode I don't<font color="#E5E5E5"> think</font>

143
00:05:09,300 --> 00:05:12,389
you<font color="#E5E5E5"> can give like a PowerShell talk at</font>

144
00:05:10,680 --> 00:05:14,430
all without referencing<font color="#CCCCCC"> Mac</font><font color="#E5E5E5"> graver at</font>

145
00:05:12,389 --> 00:05:16,319
some point because<font color="#CCCCCC"> he's pretty</font><font color="#E5E5E5"> much ever</font>

146
00:05:14,430 --> 00:05:19,199
touched<font color="#E5E5E5"> everything that you can somehow</font>

147
00:05:16,319 --> 00:05:20,460
<font color="#E5E5E5">a PowerShell</font><font color="#CCCCCC"> so he gave this one line I</font>

148
00:05:19,199 --> 00:05:22,529
think<font color="#E5E5E5"> he tweeted it out and it makes</font>

149
00:05:20,460 --> 00:05:24,508
life really<font color="#CCCCCC"> easy and numerating it</font><font color="#E5E5E5"> which</font>

150
00:05:22,529 --> 00:05:26,550
we'll get to in<font color="#CCCCCC"> just</font><font color="#E5E5E5"> a second but some</font>

151
00:05:24,509 --> 00:05:28,319
big ones<font color="#CCCCCC"> okay like what's definitely not</font>

152
00:05:26,550 --> 00:05:30,240
<font color="#E5E5E5">allowed from</font><font color="#CCCCCC"> strand linguish mode well</font>

153
00:05:28,319 --> 00:05:31,979
you can't use<font color="#CCCCCC"> com objects at all you</font>

154
00:05:30,240 --> 00:05:35,219
can't interact with<font color="#E5E5E5"> them</font><font color="#CCCCCC"> is gonna be</font>

155
00:05:31,979 --> 00:05:37,258
<font color="#E5E5E5">blocked</font><font color="#CCCCCC"> if you try to use ad the ad</font><font color="#E5E5E5"> type</font>

156
00:05:35,219 --> 00:05:39,330
<font color="#CCCCCC">camille it within powershell that's also</font>

157
00:05:37,259 --> 00:05:41,699
going to<font color="#E5E5E5"> be blocked custom powershell</font>

158
00:05:39,330 --> 00:05:43,378
classes are blocked<font color="#E5E5E5"> type conversion is</font>

159
00:05:41,699 --> 00:05:45,360
blocked within<font color="#E5E5E5"> powershell unless you're</font>

160
00:05:43,379 --> 00:05:47,580
using<font color="#E5E5E5"> like converting from one approved</font>

161
00:05:45,360 --> 00:05:49,589
and<font color="#E5E5E5"> whitelist of data type to another</font>

162
00:05:47,580 --> 00:05:51,419
whitelist of data type if you<font color="#E5E5E5"> like to</font>

163
00:05:49,589 --> 00:05:53,189
dot source your code that's not<font color="#CCCCCC"> going to</font>

164
00:05:51,419 --> 00:05:56,609
<font color="#E5E5E5">work you</font><font color="#CCCCCC"> won't</font><font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do that and</font>

165
00:05:53,189 --> 00:05:59,550
then<font color="#E5E5E5"> and again it all comes down to this</font>

166
00:05:56,610 --> 00:06:01,949
final bullet<font color="#E5E5E5"> point</font><font color="#CCCCCC"> has only approved net</font>

167
00:05:59,550 --> 00:06:04,020
or really<font color="#E5E5E5"> just approve whitelisted</font>

168
00:06:01,949 --> 00:06:06,599
<font color="#CCCCCC">datatypes</font><font color="#E5E5E5"> are allowed to run within</font>

169
00:06:04,020 --> 00:06:08,969
<font color="#E5E5E5">constrained language mode so here's a</font>

170
00:06:06,599 --> 00:06:11,610
<font color="#E5E5E5">list</font><font color="#CCCCCC"> i believe this actually is the</font>

171
00:06:08,969 --> 00:06:14,099
<font color="#CCCCCC">all-encompassing list</font><font color="#E5E5E5"> from microsoft's</font>

172
00:06:11,610 --> 00:06:15,629
<font color="#CCCCCC">MSDN</font><font color="#E5E5E5"> so you can see we have a lot of</font>

173
00:06:14,099 --> 00:06:17,310
like<font color="#E5E5E5"> basic stuff right that most people</font>

174
00:06:15,629 --> 00:06:19,529
are gonna<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> like you can you</font>

175
00:06:17,310 --> 00:06:21,210
have an<font color="#E5E5E5"> int you have bull</font><font color="#CCCCCC"> value so you</font>

176
00:06:19,529 --> 00:06:22,860
can figure out true and false<font color="#CCCCCC"> you have</font>

177
00:06:21,210 --> 00:06:25,649
<font color="#E5E5E5">you</font><font color="#CCCCCC"> ends there should be should</font><font color="#E5E5E5"> yeah</font>

178
00:06:22,860 --> 00:06:28,529
<font color="#CCCCCC">their string</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> there system net that</font>

179
00:06:25,649 --> 00:06:30,599
IP address<font color="#E5E5E5"> so there's a good like a</font>

180
00:06:28,529 --> 00:06:32,610
<font color="#E5E5E5">decent amount of type data types</font><font color="#CCCCCC"> that</font>

181
00:06:30,599 --> 00:06:35,099
are allowed but there's still<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> that</font>

182
00:06:32,610 --> 00:06:36,870
is also<font color="#E5E5E5"> missing from</font><font color="#CCCCCC"> this list</font><font color="#E5E5E5"> that you</font>

183
00:06:35,099 --> 00:06:37,590
may encounter once you use at some point

184
00:06:36,870 --> 00:06:40,620
<font color="#E5E5E5">when</font><font color="#CCCCCC"> you're</font>

185
00:06:37,590 --> 00:06:42,539
in<font color="#E5E5E5"> PowerShell code so I'll see</font><font color="#CCCCCC"> you on</font>

186
00:06:40,620 --> 00:06:45,240
the ice that's this a lot of data types

187
00:06:42,540 --> 00:06:46,470
but<font color="#E5E5E5"> is that really all inclusive so</font>

188
00:06:45,240 --> 00:06:48,540
<font color="#CCCCCC">almost the end states that that is the</font>

189
00:06:46,470 --> 00:06:50,130
<font color="#E5E5E5">end-all be-all list well</font><font color="#CCCCCC"> let's kind of</font>

190
00:06:48,540 --> 00:06:52,380
<font color="#CCCCCC">follow like</font><font color="#E5E5E5"> this trust but validate</font>

191
00:06:50,130 --> 00:06:54,870
model and looking to see<font color="#E5E5E5"> what sort</font><font color="#CCCCCC"> of</font>

192
00:06:52,380 --> 00:06:57,840
different data<font color="#CCCCCC"> types are available</font><font color="#E5E5E5"> so</font>

193
00:06:54,870 --> 00:06:59,760
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> Mac</font><font color="#E5E5E5"> ravers one-liner</font><font color="#CCCCCC"> you can run</font>

194
00:06:57,840 --> 00:07:02,010
this line right here just copy and paste

195
00:06:59,760 --> 00:07:05,190
it<font color="#E5E5E5"> and what it does is it basically just</font>

196
00:07:02,010 --> 00:07:07,500
<font color="#E5E5E5">enumerates the different data types</font><font color="#CCCCCC"> then</font>

197
00:07:05,190 --> 00:07:09,090
you can interact<font color="#E5E5E5"> with within constrained</font>

198
00:07:07,500 --> 00:07:11,400
language mode<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> got interesting the</font>

199
00:07:09,090 --> 00:07:13,500
compare these there's also<font color="#CCCCCC"> MSDN</font><font color="#E5E5E5"> so</font>

200
00:07:11,400 --> 00:07:16,169
here's kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the output</font><font color="#CCCCCC"> of what that</font>

201
00:07:13,500 --> 00:07:18,480
may<font color="#E5E5E5"> look like you can see here's just</font>

202
00:07:16,170 --> 00:07:20,730
different actual<font color="#E5E5E5"> types a lot of this is</font>

203
00:07:18,480 --> 00:07:25,770
<font color="#E5E5E5">actually the same in comparison with</font>

204
00:07:20,730 --> 00:07:27,990
what is documented on<font color="#CCCCCC"> MSDN here's</font>

205
00:07:25,770 --> 00:07:29,789
another interesting<font color="#CCCCCC"> command</font><font color="#E5E5E5"> so we're</font>

206
00:07:27,990 --> 00:07:31,650
gonna test<font color="#E5E5E5"> something in this case I'm</font>

207
00:07:29,790 --> 00:07:34,800
<font color="#E5E5E5">gonna try doing create a sim session</font>

208
00:07:31,650 --> 00:07:36,750
<font color="#E5E5E5">well here's the different types of data</font>

209
00:07:34,800 --> 00:07:38,460
types I'm dealing with<font color="#CCCCCC"> here's the PS</font>

210
00:07:36,750 --> 00:07:42,810
<font color="#CCCCCC">credentials which we know is allowed</font>

211
00:07:38,460 --> 00:07:44,969
which was documented within<font color="#CCCCCC"> MSDN however</font>

212
00:07:42,810 --> 00:07:46,890
<font color="#E5E5E5">I was talking like Carlos Perez and a</font>

213
00:07:44,970 --> 00:07:48,060
couple other individuals<font color="#E5E5E5"> I was wondering</font>

214
00:07:46,890 --> 00:07:50,520
why<font color="#E5E5E5"> I like these are allowed I don't</font>

215
00:07:48,060 --> 00:07:53,040
<font color="#E5E5E5">understand completely</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> this falls</font>

216
00:07:50,520 --> 00:07:54,690
under<font color="#E5E5E5"> this management class or</font>

217
00:07:53,040 --> 00:07:57,540
management<font color="#E5E5E5"> object if it's like a sub</font>

218
00:07:54,690 --> 00:07:58,800
type of that<font color="#E5E5E5"> and Carlos</font><font color="#CCCCCC"> and a</font><font color="#E5E5E5"> couple</font>

219
00:07:57,540 --> 00:08:02,220
other people<font color="#E5E5E5"> actually couldn't provide</font>

220
00:07:58,800 --> 00:08:04,500
<font color="#E5E5E5">any sort of insight either so as of</font>

221
00:08:02,220 --> 00:08:07,220
right<font color="#E5E5E5"> now I'm not certain but this is a</font>

222
00:08:04,500 --> 00:08:09,690
data type<font color="#E5E5E5"> that's not directly listed on</font>

223
00:08:07,220 --> 00:08:11,580
Microsoft's<font color="#CCCCCC"> MSDN that actually is</font>

224
00:08:09,690 --> 00:08:14,760
allowed<font color="#E5E5E5"> so here's an example of what</font>

225
00:08:11,580 --> 00:08:17,219
that<font color="#CCCCCC"> Seche is it's a named sim session</font>

226
00:08:14,760 --> 00:08:18,450
<font color="#CCCCCC">anyways there's an information there and</font>

227
00:08:17,220 --> 00:08:19,950
here's the<font color="#E5E5E5"> show at the bottom is this</font>

228
00:08:18,450 --> 00:08:21,599
actually is running within constrained

229
00:08:19,950 --> 00:08:23,909
language mode<font color="#E5E5E5"> so we are able to create</font>

230
00:08:21,600 --> 00:08:27,780
<font color="#E5E5E5">some sessions we were able to create</font>

231
00:08:23,910 --> 00:08:30,030
<font color="#E5E5E5">some session options and do different</font>

232
00:08:27,780 --> 00:08:32,400
actions<font color="#E5E5E5"> with these all of them constrain</font>

233
00:08:30,030 --> 00:08:33,689
language mode and<font color="#E5E5E5"> this will why this is</font>

234
00:08:32,400 --> 00:08:38,789
<font color="#CCCCCC">interesting as we'll get to this in just</font>

235
00:08:33,690 --> 00:08:41,130
<font color="#E5E5E5">a second so long story short to get off</font>

236
00:08:38,789 --> 00:08:43,620
the<font color="#CCCCCC"> datatypes</font><font color="#E5E5E5"> train</font><font color="#CCCCCC"> there's still a</font>

237
00:08:41,130 --> 00:08:44,880
<font color="#E5E5E5">decent</font><font color="#CCCCCC"> amount of</font><font color="#E5E5E5"> data types</font><font color="#CCCCCC"> that you can</font>

238
00:08:43,620 --> 00:08:46,710
actually work<font color="#E5E5E5"> with when you're trying</font><font color="#CCCCCC"> to</font>

239
00:08:44,880 --> 00:08:50,220
<font color="#E5E5E5">write code</font><font color="#CCCCCC"> and constrain</font><font color="#E5E5E5"> language mode</font>

240
00:08:46,710 --> 00:08:51,300
<font color="#CCCCCC">you just have</font><font color="#E5E5E5"> to figure</font><font color="#CCCCCC"> out if whatever</font>

241
00:08:50,220 --> 00:08:53,779
<font color="#CCCCCC">you're trying to</font><font color="#E5E5E5"> do is going</font>

242
00:08:51,300 --> 00:08:56,430
to use that<font color="#E5E5E5"> an</font><font color="#CCCCCC"> allowed datatype or not</font>

243
00:08:53,779 --> 00:08:58,080
<font color="#E5E5E5">the easiest way</font><font color="#CCCCCC"> to test to see</font><font color="#E5E5E5"> okay is</font>

244
00:08:56,430 --> 00:08:59,880
this<font color="#CCCCCC"> going to work is check MSDN docks</font>

245
00:08:58,080 --> 00:09:01,680
<font color="#E5E5E5">look at</font><font color="#CCCCCC"> Matt gray verse one-liner</font>

246
00:08:59,880 --> 00:09:03,660
<font color="#E5E5E5">see if what you're trying to create is</font>

247
00:09:01,680 --> 00:09:05,939
falls under any of those<font color="#E5E5E5"> different data</font>

248
00:09:03,660 --> 00:09:07,529
types<font color="#E5E5E5"> or honestly the</font><font color="#CCCCCC"> easiest way</font><font color="#E5E5E5"> is to</font>

249
00:09:05,940 --> 00:09:10,050
<font color="#E5E5E5">just enforce constrained language mode</font>

250
00:09:07,529 --> 00:09:13,649
<font color="#E5E5E5">on your system</font><font color="#CCCCCC"> and just run a test and</font>

251
00:09:10,050 --> 00:09:15,510
<font color="#CCCCCC">see if it'll work</font><font color="#E5E5E5"> so here's where I</font>

252
00:09:13,649 --> 00:09:17,670
<font color="#CCCCCC">actually referenced that</font><font color="#E5E5E5"> last part</font><font color="#CCCCCC"> you</font>

253
00:09:15,510 --> 00:09:19,439
<font color="#CCCCCC">can</font><font color="#E5E5E5"> easily set your</font><font color="#CCCCCC"> PowerShell instance</font>

254
00:09:17,670 --> 00:09:21,529
that you have<font color="#CCCCCC"> running into constraint</font>

255
00:09:19,440 --> 00:09:23,220
language mode<font color="#E5E5E5"> by running this command</font>

256
00:09:21,529 --> 00:09:24,810
<font color="#CCCCCC">what you're gonna</font><font color="#E5E5E5"> do is you're going to</font>

257
00:09:23,220 --> 00:09:26,910
set<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hosts that run space that</font>

258
00:09:24,810 --> 00:09:29,339
language mode equal to constraint

259
00:09:26,910 --> 00:09:31,170
language and at that point<font color="#E5E5E5"> your current</font>

260
00:09:29,339 --> 00:09:33,120
powershell session is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

261
00:09:31,170 --> 00:09:34,439
enforcing<font color="#E5E5E5"> constraint language mode if</font>

262
00:09:33,120 --> 00:09:36,029
you were to exit out and restart

263
00:09:34,440 --> 00:09:37,950
powershell again<font color="#CCCCCC"> you're gonna be back in</font>

264
00:09:36,029 --> 00:09:39,600
<font color="#E5E5E5">a full language mode so if you wanted to</font>

265
00:09:37,950 --> 00:09:42,959
continue<font color="#E5E5E5"> to test it you'd have to run</font>

266
00:09:39,600 --> 00:09:45,630
this again<font color="#E5E5E5"> so here's an example</font><font color="#CCCCCC"> right</font>

267
00:09:42,959 --> 00:09:48,599
now<font color="#CCCCCC"> where hosts run space that language</font>

268
00:09:45,630 --> 00:09:49,980
mode is full language mode<font color="#E5E5E5"> so that means</font>

269
00:09:48,600 --> 00:09:51,899
<font color="#E5E5E5">obviously you can do anything you want</font>

270
00:09:49,980 --> 00:09:54,269
<font color="#E5E5E5">PowerShell</font><font color="#CCCCCC"> in this case we're just going</font>

271
00:09:51,899 --> 00:09:57,750
to figure<font color="#E5E5E5"> out</font><font color="#CCCCCC"> the square root of 9</font><font color="#E5E5E5"> we</font>

272
00:09:54,269 --> 00:09:59,190
can<font color="#CCCCCC"> see the answer</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> 3 well let's go</font>

273
00:09:57,750 --> 00:10:00,899
ahead<font color="#E5E5E5"> and change that and let's enforce</font>

274
00:09:59,190 --> 00:10:03,120
<font color="#CCCCCC">a</font><font color="#E5E5E5"> constrain language mode on the system</font>

275
00:10:00,899 --> 00:10:05,339
and because<font color="#E5E5E5"> this is not specifically</font>

276
00:10:03,120 --> 00:10:07,890
using an allowed<font color="#E5E5E5"> datatype when we try to</font>

277
00:10:05,339 --> 00:10:09,149
call<font color="#E5E5E5"> a math square root 9 which you</font>

278
00:10:07,890 --> 00:10:10,439
would<font color="#E5E5E5"> think</font><font color="#CCCCCC"> just doing the square a</font>

279
00:10:09,149 --> 00:10:12,029
square<font color="#CCCCCC"> root</font><font color="#E5E5E5"> of a number and</font><font color="#CCCCCC"> constraint</font>

280
00:10:10,440 --> 00:10:14,160
language modes allowed it's actually

281
00:10:12,029 --> 00:10:15,689
<font color="#CCCCCC">completely blocked</font><font color="#E5E5E5"> and so we get that</font>

282
00:10:14,160 --> 00:10:17,520
error this method invocation is<font color="#E5E5E5"> only</font>

283
00:10:15,690 --> 00:10:21,450
supported in core types of<font color="#E5E5E5"> this language</font>

284
00:10:17,520 --> 00:10:24,449
<font color="#CCCCCC">moment</font><font color="#E5E5E5"> so you can't figure out can do</font>

285
00:10:21,450 --> 00:10:29,250
basic square<font color="#CCCCCC"> root math on a system that</font>

286
00:10:24,450 --> 00:10:30,570
<font color="#CCCCCC">has constrain language mode enforced so</font>

287
00:10:29,250 --> 00:10:32,160
this is the biggest limit when<font color="#E5E5E5"> it comes</font>

288
00:10:30,570 --> 00:10:35,490
to constraint language mode<font color="#E5E5E5"> the</font>

289
00:10:32,160 --> 00:10:37,500
<font color="#E5E5E5">limitation of</font><font color="#CCCCCC"> data types really limits</font>

290
00:10:35,490 --> 00:10:40,170
the<font color="#E5E5E5"> capabilities</font><font color="#CCCCCC"> of an attacker</font><font color="#E5E5E5"> and what</font>

291
00:10:37,500 --> 00:10:42,420
they can<font color="#CCCCCC"> actually do you can run code</font><font color="#E5E5E5"> on</font>

292
00:10:40,170 --> 00:10:43,890
<font color="#CCCCCC">a system</font><font color="#E5E5E5"> but again only if it's an</font>

293
00:10:42,420 --> 00:10:45,719
allowed<font color="#E5E5E5"> data type if it's not allowed</font>

294
00:10:43,890 --> 00:10:46,949
it's not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> so it's kind of just</font>

295
00:10:45,720 --> 00:10:49,410
<font color="#E5E5E5">like application</font><font color="#CCCCCC"> whitelisting if you</font>

296
00:10:46,949 --> 00:10:52,469
don't specifically trust either<font color="#E5E5E5"> a binary</font>

297
00:10:49,410 --> 00:10:54,360
or<font color="#CCCCCC"> a digital signature</font><font color="#E5E5E5"> or a hash or how</font>

298
00:10:52,470 --> 00:10:56,610
it is that<font color="#CCCCCC"> you're enforcing</font><font color="#E5E5E5"> trust rules</font>

299
00:10:54,360 --> 00:11:00,480
of the application whitelisting<font color="#E5E5E5"> it's</font>

300
00:10:56,610 --> 00:11:02,220
<font color="#E5E5E5">going to be blocked</font><font color="#CCCCCC"> all right so that</font>

301
00:11:00,480 --> 00:11:04,550
<font color="#E5E5E5">was kind of abstract so let's translate</font>

302
00:11:02,220 --> 00:11:06,380
that and see what does work and done

303
00:11:04,550 --> 00:11:07,969
what doesn't<font color="#CCCCCC"> work so let's look at this</font>

304
00:11:06,380 --> 00:11:10,279
<font color="#E5E5E5">let's</font><font color="#CCCCCC"> rent some</font><font color="#E5E5E5"> tasks to try some square</font>

305
00:11:07,970 --> 00:11:11,630
root<font color="#CCCCCC"> search</font><font color="#E5E5E5"> some basics</font><font color="#CCCCCC"> for encoding and</font>

306
00:11:10,279 --> 00:11:13,279
let's do some shell code injection which

307
00:11:11,630 --> 00:11:15,140
like a normal attacker would probably

308
00:11:13,279 --> 00:11:24,050
try to do at some<font color="#CCCCCC"> point</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'll show a</font>

309
00:11:15,140 --> 00:11:27,140
<font color="#CCCCCC">video right here so what's happening is</font>

310
00:11:24,050 --> 00:11:28,550
I'm<font color="#E5E5E5"> calling host run space dot language</font>

311
00:11:27,140 --> 00:11:30,079
mode you can see right<font color="#CCCCCC"> now sinful</font>

312
00:11:28,550 --> 00:11:31,670
language<font color="#E5E5E5"> mode so we're not in constraint</font>

313
00:11:30,079 --> 00:11:34,279
language mode<font color="#CCCCCC"> okay I'm going to try this</font>

314
00:11:31,670 --> 00:11:35,990
basic<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> running the square</font>

315
00:11:34,279 --> 00:11:39,140
root<font color="#E5E5E5"> kinda like we saw</font><font color="#CCCCCC"> earlier this does</font>

316
00:11:35,990 --> 00:11:42,110
work<font color="#E5E5E5"> well what if I want to do kind of</font>

317
00:11:39,140 --> 00:11:44,899
like convert something<font color="#E5E5E5"> what's it called</font>

318
00:11:42,110 --> 00:11:46,070
<font color="#E5E5E5">base64 format</font><font color="#CCCCCC"> well in this case I'm</font>

319
00:11:44,899 --> 00:11:47,839
<font color="#E5E5E5">trying to take this string forward on</font>

320
00:11:46,070 --> 00:11:50,360
three sides<font color="#CCCCCC"> Augusta</font><font color="#E5E5E5"> and then convert</font>

321
00:11:47,839 --> 00:11:53,589
this into base64 string<font color="#E5E5E5"> and you can see</font>

322
00:11:50,360 --> 00:11:56,930
we<font color="#E5E5E5"> get two base64 encoded results well</font>

323
00:11:53,589 --> 00:11:58,579
just<font color="#E5E5E5"> try the same step after we convert</font>

324
00:11:56,930 --> 00:12:00,949
this<font color="#E5E5E5"> into</font><font color="#CCCCCC"> constraint language map</font>

325
00:11:58,579 --> 00:12:03,140
so right here I'm enforcing<font color="#CCCCCC"> constraint</font>

326
00:12:00,950 --> 00:12:04,940
language mode at this point on<font color="#CCCCCC"> we're</font>

327
00:12:03,140 --> 00:12:06,740
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> try calling square root again we</font>

328
00:12:04,940 --> 00:12:08,950
do nine just like we expect it<font color="#CCCCCC"> from</font>

329
00:12:06,740 --> 00:12:11,990
earlier<font color="#E5E5E5"> this is completely just blocked</font>

330
00:12:08,950 --> 00:12:14,290
<font color="#CCCCCC">same thing here if we try</font><font color="#E5E5E5"> to convert</font>

331
00:12:11,990 --> 00:12:17,060
this string<font color="#E5E5E5"> into bytes prior to</font>

332
00:12:14,290 --> 00:12:19,540
converting to page 64<font color="#CCCCCC"> excuse me I go</font>

333
00:12:17,060 --> 00:12:19,540
back a little<font color="#E5E5E5"> bit</font>

334
00:12:22,250 --> 00:12:26,960
so if we<font color="#E5E5E5"> try to get the bytes associated</font>

335
00:12:24,830 --> 00:12:29,660
<font color="#E5E5E5">with this string prior</font><font color="#CCCCCC"> to converting the</font>

336
00:12:26,960 --> 00:12:34,310
bytes into<font color="#CCCCCC"> a</font><font color="#E5E5E5"> base64 encoded string that</font>

337
00:12:29,660 --> 00:12:36,469
<font color="#CCCCCC">is also blocked at this point so finally</font>

338
00:12:34,310 --> 00:12:38,209
the<font color="#CCCCCC"> last step</font><font color="#E5E5E5"> is okay I have this shell</font>

339
00:12:36,470 --> 00:12:40,340
code injection<font color="#CCCCCC"> PowerShell script so</font>

340
00:12:38,210 --> 00:12:42,230
payload<font color="#E5E5E5"> up</font><font color="#CCCCCC"> ps1 this is</font><font color="#E5E5E5"> just output from</font>

341
00:12:40,340 --> 00:12:44,930
cobalt strike<font color="#E5E5E5"> so if an attacker is</font>

342
00:12:42,230 --> 00:12:46,790
wanting<font color="#E5E5E5"> to use just again a loader for a</font>

343
00:12:44,930 --> 00:12:49,609
beacon<font color="#E5E5E5"> or the same concept</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> an</font>

344
00:12:46,790 --> 00:12:52,400
interpreter<font color="#CCCCCC"> we can look at this</font><font color="#E5E5E5"> try to</font>

345
00:12:49,610 --> 00:12:54,800
dot slash run it and this should<font color="#CCCCCC"> just</font>

346
00:12:52,400 --> 00:12:56,900
also<font color="#E5E5E5"> air out and it's just</font><font color="#CCCCCC"> completely</font>

347
00:12:54,800 --> 00:12:58,790
incompatible<font color="#E5E5E5"> and we can't run this code</font>

348
00:12:56,900 --> 00:13:01,459
so it's a immediately kind of

349
00:12:58,790 --> 00:13:03,560
eliminating one easy method for<font color="#CCCCCC"> an</font>

350
00:13:01,460 --> 00:13:05,090
attacker to load<font color="#CCCCCC"> arts</font><font color="#E5E5E5"> it's to load</font>

351
00:13:03,560 --> 00:13:08,920
beacon<font color="#CCCCCC"> or</font><font color="#E5E5E5"> their malware on the system</font>

352
00:13:05,090 --> 00:13:08,920
and<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of reduce your attack surface</font>

353
00:13:16,190 --> 00:13:23,310
<font color="#E5E5E5">all right so what can</font><font color="#CCCCCC"> we do</font><font color="#E5E5E5"> so with</font>

354
00:13:21,540 --> 00:13:24,480
everything<font color="#CCCCCC"> that's blocked</font><font color="#E5E5E5"> what what's</font>

355
00:13:23,310 --> 00:13:26,369
really<font color="#E5E5E5"> left for</font><font color="#CCCCCC"> you to write in</font>

356
00:13:24,480 --> 00:13:27,540
PowerShell<font color="#CCCCCC"> well if you're thinking of</font>

357
00:13:26,370 --> 00:13:28,800
converting<font color="#CCCCCC"> your C sharp code to</font>

358
00:13:27,540 --> 00:13:31,019
<font color="#E5E5E5">PowerShell which a lot of</font><font color="#CCCCCC"> times people</font>

359
00:13:28,800 --> 00:13:33,779
<font color="#E5E5E5">will do with full language mode don't</font>

360
00:13:31,019 --> 00:13:36,660
it's very likely<font color="#E5E5E5"> not</font><font color="#CCCCCC"> to work</font>

361
00:13:33,779 --> 00:13:37,680
I would give it<font color="#E5E5E5"> 99 chances out of 100</font>

362
00:13:36,660 --> 00:13:39,649
<font color="#CCCCCC">that it is not going</font><font color="#E5E5E5"> to work with</font>

363
00:13:37,680 --> 00:13:41,790
<font color="#E5E5E5">whatever code you're trying to convert</font>

364
00:13:39,649 --> 00:13:43,769
but the big<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is if you're</font>

365
00:13:41,790 --> 00:13:45,509
attempting to<font color="#E5E5E5"> administer a computer it</font>

366
00:13:43,769 --> 00:13:47,040
might<font color="#E5E5E5"> work and that's kind of the whole</font>

367
00:13:45,509 --> 00:13:48,750
<font color="#E5E5E5">point of PowerShell constrained language</font>

368
00:13:47,040 --> 00:13:50,550
mode right like they said that<font color="#CCCCCC"> constrain</font>

369
00:13:48,750 --> 00:13:53,579
language mode is designed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> let you</font>

370
00:13:50,550 --> 00:13:56,910
administer a system<font color="#E5E5E5"> without exposing any</font>

371
00:13:53,579 --> 00:14:00,529
potentially dangerous<font color="#CCCCCC"> api's or access</font>

372
00:13:56,910 --> 00:14:02,790
different dangerous functionality so

373
00:14:00,529 --> 00:14:04,380
again if you were in my<font color="#E5E5E5"> workshop earlier</font>

374
00:14:02,790 --> 00:14:07,980
<font color="#CCCCCC">I kind</font><font color="#E5E5E5"> of hinted and we talked about</font>

375
00:14:04,380 --> 00:14:11,069
<font color="#CCCCCC">some of</font><font color="#E5E5E5"> this is mmm</font><font color="#CCCCCC"> anti virus</font>

376
00:14:07,980 --> 00:14:12,600
administration so you can enable quick

377
00:14:11,069 --> 00:14:13,740
questions anyone played with<font color="#E5E5E5"> like I know</font>

378
00:14:12,600 --> 00:14:15,420
you saw it<font color="#E5E5E5"> back there is</font><font color="#CCCCCC"> they're gonna</font>

379
00:14:13,740 --> 00:14:18,449
play<font color="#E5E5E5"> with like a s are rules they're</font>

380
00:14:15,420 --> 00:14:20,610
gonna heard of a<font color="#CCCCCC"> SAR rules awesome</font>

381
00:14:18,449 --> 00:14:23,130
so<font color="#E5E5E5"> a</font><font color="#CCCCCC"> s oo</font><font color="#E5E5E5"> I don't think anyone reads a</font>

382
00:14:20,610 --> 00:14:23,819
hand<font color="#E5E5E5"> a s our rules are really really</font>

383
00:14:23,130 --> 00:14:26,670
cool

384
00:14:23,819 --> 00:14:28,050
it's<font color="#E5E5E5"> only supported on Windows 10 and</font>

385
00:14:26,670 --> 00:14:30,089
Server 2016

386
00:14:28,050 --> 00:14:32,399
but these ASR rules are rules that

387
00:14:30,089 --> 00:14:36,329
<font color="#E5E5E5">Microsoft has published that allows you</font>

388
00:14:32,399 --> 00:14:38,579
<font color="#E5E5E5">to enable a rule that prevent commonly</font>

389
00:14:36,329 --> 00:14:42,229
abused features that<font color="#CCCCCC"> attackers like</font><font color="#E5E5E5"> to</font>

390
00:14:38,579 --> 00:14:45,120
use to<font color="#E5E5E5"> compromise a system so an</font><font color="#CCCCCC"> example</font>

391
00:14:42,230 --> 00:14:46,920
one<font color="#E5E5E5"> ASR rule is to</font><font color="#CCCCCC"> prevent Microsoft</font>

392
00:14:45,120 --> 00:14:49,350
Office applications<font color="#E5E5E5"> from spawning child</font>

393
00:14:46,920 --> 00:14:50,519
processes like there's no<font color="#CCCCCC"> reason Word or</font>

394
00:14:49,350 --> 00:14:52,230
Excel<font color="#E5E5E5"> or anything else should</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to</font>

395
00:14:50,519 --> 00:14:54,120
<font color="#E5E5E5">spawn</font><font color="#CCCCCC"> powershot</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> I don't know if a</font>

396
00:14:52,230 --> 00:14:57,899
single legitimate use for<font color="#E5E5E5"> that well you</font>

397
00:14:54,120 --> 00:14:59,759
can enable<font color="#E5E5E5"> that rule</font><font color="#CCCCCC"> using and it will</font>

398
00:14:57,899 --> 00:15:02,040
instantly prevent any sort<font color="#E5E5E5"> of</font><font color="#CCCCCC"> office</font>

399
00:14:59,759 --> 00:15:05,550
application from<font color="#CCCCCC"> spawning a child</font>

400
00:15:02,040 --> 00:15:07,079
process<font color="#E5E5E5"> there's no</font><font color="#CCCCCC"> tool you can</font><font color="#E5E5E5"> do is if</font>

401
00:15:05,550 --> 00:15:10,258
you<font color="#E5E5E5"> like to use W my lon</font>

402
00:15:07,079 --> 00:15:13,560
you can prevent processes from being

403
00:15:10,259 --> 00:15:16,230
spawned<font color="#E5E5E5"> via</font><font color="#CCCCCC"> WMI or p exact this ASR rule</font>

404
00:15:13,560 --> 00:15:19,199
while enabled<font color="#CCCCCC"> just completely blocks</font>

405
00:15:16,230 --> 00:15:20,610
that from happening<font color="#CCCCCC"> it won't work but</font>

406
00:15:19,199 --> 00:15:22,290
<font color="#E5E5E5">the way I like</font><font color="#CCCCCC"> to I like</font><font color="#E5E5E5"> to look at this</font>

407
00:15:20,610 --> 00:15:24,269
<font color="#CCCCCC">too is so we can use different</font>

408
00:15:22,290 --> 00:15:26,310
powershell commandlets<font color="#CCCCCC"> to enable attack</font>

409
00:15:24,269 --> 00:15:28,110
<font color="#E5E5E5">service reduction rules right at scale</font>

410
00:15:26,310 --> 00:15:30,930
we can also use powershell commandlets

411
00:15:28,110 --> 00:15:33,120
to set antivirus configurations<font color="#E5E5E5"> well if</font>

412
00:15:30,930 --> 00:15:35,430
we can enable<font color="#E5E5E5"> different configurations</font>

413
00:15:33,120 --> 00:15:37,560
or enable<font color="#CCCCCC"> different rules</font><font color="#E5E5E5"> we can</font>

414
00:15:35,430 --> 00:15:40,800
probably<font color="#E5E5E5"> also disable the same thing</font>

415
00:15:37,560 --> 00:15:43,559
right<font color="#E5E5E5"> if you can set configurations for</font>

416
00:15:40,800 --> 00:15:46,758
<font color="#CCCCCC">antivirus we can also</font><font color="#E5E5E5"> probably modify</font>

417
00:15:43,559 --> 00:15:49,230
configurations it's probably useful

418
00:15:46,759 --> 00:15:51,480
<font color="#CCCCCC">solsa</font><font color="#E5E5E5"> got a specific command line and</font>

419
00:15:49,230 --> 00:15:54,029
<font color="#E5E5E5">i'll show a video in a second the</font>

420
00:15:51,480 --> 00:15:56,160
command is get MP preference<font color="#E5E5E5"> so what</font>

421
00:15:54,029 --> 00:15:58,350
<font color="#CCCCCC">this command</font><font color="#E5E5E5"> does is it lets you obtain</font>

422
00:15:56,160 --> 00:16:00,180
the antivirus configuration of the

423
00:15:58,350 --> 00:16:01,709
<font color="#E5E5E5">system that you're targeting</font><font color="#CCCCCC"> so it'll</font>

424
00:16:00,180 --> 00:16:05,008
pull back a ton of<font color="#CCCCCC"> information it'll</font>

425
00:16:01,709 --> 00:16:06,839
<font color="#E5E5E5">pull</font><font color="#CCCCCC"> back a</font><font color="#E5E5E5"> sr rule configuration</font><font color="#CCCCCC"> states</font>

426
00:16:05,009 --> 00:16:10,740
like<font color="#E5E5E5"> are they enabled or disabled what</font>

427
00:16:06,839 --> 00:16:12,300
rules are enabled<font color="#E5E5E5"> do you have any free</font>

428
00:16:10,740 --> 00:16:14,220
antivirus let's say you have a directory

429
00:16:12,300 --> 00:16:15,990
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> if your malware reverser that</font>

430
00:16:14,220 --> 00:16:17,160
you drop<font color="#E5E5E5"> your malware in so you can</font>

431
00:16:15,990 --> 00:16:19,319
reverse<font color="#CCCCCC"> it like you if it don't scan</font>

432
00:16:17,160 --> 00:16:22,230
directory<font color="#CCCCCC"> this</font><font color="#E5E5E5"> will pull</font><font color="#CCCCCC"> back that</font>

433
00:16:19,319 --> 00:16:25,009
information<font color="#E5E5E5"> now the interesting thing is</font>

434
00:16:22,230 --> 00:16:28,019
you<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> this and</font><font color="#CCCCCC"> pulls information</font>

435
00:16:25,009 --> 00:16:30,240
from<font color="#E5E5E5"> your local</font><font color="#CCCCCC"> system or also</font><font color="#E5E5E5"> from a</font>

436
00:16:28,019 --> 00:16:32,639
remote system<font color="#E5E5E5"> well how do you</font>

437
00:16:30,240 --> 00:16:34,589
authenticate<font color="#CCCCCC"> to a remote system sim</font>

438
00:16:32,639 --> 00:16:36,449
sessions what do we just identified

439
00:16:34,589 --> 00:16:39,149
<font color="#E5E5E5">earlier that is</font><font color="#CCCCCC"> allowed in constrained</font>

440
00:16:36,449 --> 00:16:40,979
language mode<font color="#E5E5E5"> some sessions so let's</font>

441
00:16:39,149 --> 00:16:44,240
kind of<font color="#E5E5E5"> look at how we can use this from</font>

442
00:16:40,980 --> 00:16:46,920
an attackers perspective

443
00:16:44,240 --> 00:16:48,240
so right here<font color="#CCCCCC"> I'm running get MP</font>

444
00:16:46,920 --> 00:16:50,490
preference there's a whole lot<font color="#CCCCCC"> of</font>

445
00:16:48,240 --> 00:16:51,990
information<font color="#E5E5E5"> here up here</font><font color="#CCCCCC"> our attack</font>

446
00:16:50,490 --> 00:16:53,970
surface reduction rules in this case

447
00:16:51,990 --> 00:16:55,139
there are<font color="#CCCCCC"> no rules</font><font color="#E5E5E5"> here and</font><font color="#CCCCCC"> nothing's</font>

448
00:16:53,970 --> 00:16:58,110
enforced so we don't have<font color="#E5E5E5"> to worry</font><font color="#CCCCCC"> about</font>

449
00:16:55,139 --> 00:17:00,269
that<font color="#E5E5E5"> and down here I'm looking if I had</font>

450
00:16:58,110 --> 00:17:03,660
maybe a<font color="#CCCCCC"> specific extension</font><font color="#E5E5E5"> that was</font>

451
00:17:00,269 --> 00:17:05,640
always<font color="#E5E5E5"> white listening so PDF or</font><font color="#CCCCCC"> Jas</font><font color="#E5E5E5"> or</font>

452
00:17:03,660 --> 00:17:07,530
something like<font color="#CCCCCC"> that it would be set</font>

453
00:17:05,640 --> 00:17:09,870
<font color="#CCCCCC">right here</font><font color="#E5E5E5"> and I would see what</font>

454
00:17:07,530 --> 00:17:11,849
extensions are<font color="#CCCCCC"> list</font><font color="#E5E5E5"> are white less it if</font>

455
00:17:09,869 --> 00:17:13,859
there's an exclusion path like don't

456
00:17:11,849 --> 00:17:15,990
scan anything<font color="#E5E5E5"> under this</font><font color="#CCCCCC"> directory</font><font color="#E5E5E5"> that</font>

457
00:17:13,859 --> 00:17:20,010
<font color="#CCCCCC">would be listed right here same concept</font>

458
00:17:15,990 --> 00:17:22,919
for exclusion process well what we can

459
00:17:20,010 --> 00:17:24,869
<font color="#E5E5E5">do in constrain language mode is use</font>

460
00:17:22,919 --> 00:17:26,280
this convert to search<font color="#E5E5E5"> cure string now</font>

461
00:17:24,869 --> 00:17:29,370
<font color="#E5E5E5">basically to create</font><font color="#CCCCCC"> a PS credential</font>

462
00:17:26,280 --> 00:17:32,100
object<font color="#E5E5E5"> which lets us authenticate</font><font color="#CCCCCC"> to a</font>

463
00:17:29,370 --> 00:17:33,510
remote system<font color="#E5E5E5"> via a sim session so we're</font>

464
00:17:32,100 --> 00:17:34,918
<font color="#CCCCCC">creating this PS credential object up</font>

465
00:17:33,510 --> 00:17:37,379
here down here<font color="#CCCCCC"> we're actually</font>

466
00:17:34,919 --> 00:17:39,200
<font color="#E5E5E5">establishing the sim session because</font>

467
00:17:37,380 --> 00:17:41,419
this new sim session<font color="#E5E5E5"> command</font>

468
00:17:39,200 --> 00:17:43,190
without an error<font color="#CCCCCC"> that</font><font color="#E5E5E5"> means that he sim</font>

469
00:17:41,419 --> 00:17:46,039
session was successfully created and

470
00:17:43,190 --> 00:17:48,320
established so now I'm using<font color="#CCCCCC"> git MP</font>

471
00:17:46,039 --> 00:17:50,480
preference<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I'm passing it a sim</font>

472
00:17:48,320 --> 00:17:52,789
session<font color="#E5E5E5"> it's not going to target the</font>

473
00:17:50,480 --> 00:17:54,109
local system that I'm running<font color="#E5E5E5"> on unless</font>

474
00:17:52,789 --> 00:17:55,460
<font color="#E5E5E5">you were to create a sim session on your</font>

475
00:17:54,109 --> 00:17:57,918
local<font color="#E5E5E5"> system which would be kind of</font>

476
00:17:55,460 --> 00:17:58,999
pointless<font color="#CCCCCC"> it's in when you're using it</font>

477
00:17:57,919 --> 00:18:01,070
for<font color="#CCCCCC"> this case it's probably going to</font><font color="#E5E5E5"> be</font>

478
00:17:58,999 --> 00:18:04,039
for authenticating<font color="#CCCCCC"> and accessing to</font><font color="#E5E5E5"> your</font>

479
00:18:01,070 --> 00:18:07,908
<font color="#E5E5E5">mo system well now in this case I can</font>

480
00:18:04,039 --> 00:18:09,408
<font color="#CCCCCC">see this exclusion extension is a PDF or</font>

481
00:18:07,909 --> 00:18:12,919
I can see<font color="#E5E5E5"> its exclusion path that allows</font>

482
00:18:09,409 --> 00:18:15,049
<font color="#E5E5E5">the undersea users user</font><font color="#CCCCCC"> 1 downloads</font><font color="#E5E5E5"> and</font>

483
00:18:12,919 --> 00:18:19,700
for the reason the exclusion process

484
00:18:15,049 --> 00:18:22,158
<font color="#E5E5E5">that is allowed is</font><font color="#CCCCCC"> dolphin exe</font><font color="#E5E5E5"> so we can</font>

485
00:18:19,700 --> 00:18:24,409
<font color="#E5E5E5">get that information from using git MP</font>

486
00:18:22,159 --> 00:18:26,419
preference<font color="#E5E5E5"> well that's great now that</font><font color="#CCCCCC"> we</font>

487
00:18:24,409 --> 00:18:29,119
have this let's figure out<font color="#CCCCCC"> ok what if I</font>

488
00:18:26,419 --> 00:18:31,070
want to<font color="#E5E5E5"> add to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> what if I want to</font>

489
00:18:29,119 --> 00:18:33,738
<font color="#E5E5E5">change the figuration</font><font color="#CCCCCC"> in a way that</font>

490
00:18:31,070 --> 00:18:36,769
<font color="#E5E5E5">allow me as an attacker</font><font color="#CCCCCC"> to attack that</font>

491
00:18:33,739 --> 00:18:41,029
system<font color="#E5E5E5"> in an easier manner</font><font color="#CCCCCC"> or I can use</font>

492
00:18:36,769 --> 00:18:43,820
<font color="#E5E5E5">set MP preference set MP preference lets</font>

493
00:18:41,029 --> 00:18:45,230
you set antivirus configuration settings

494
00:18:43,820 --> 00:18:47,509
for<font color="#E5E5E5"> whatever system you're targeting</font><font color="#CCCCCC"> the</font>

495
00:18:45,230 --> 00:18:50,299
<font color="#CCCCCC">way this works is it'll overwrite an</font>

496
00:18:47,509 --> 00:18:52,850
existing settings<font color="#CCCCCC"> so if you only allow</font>

497
00:18:50,299 --> 00:18:54,499
PDF and<font color="#E5E5E5"> then you use set MP preference</font>

498
00:18:52,850 --> 00:18:56,928
and<font color="#E5E5E5"> you say you want to all of a sudden</font>

499
00:18:54,499 --> 00:18:59,179
whitelist all exe<font color="#E5E5E5"> s</font><font color="#CCCCCC"> this will actually</font>

500
00:18:56,929 --> 00:19:02,119
overwrite the PDF<font color="#E5E5E5"> and all that's</font>

501
00:18:59,179 --> 00:19:04,340
<font color="#CCCCCC">whitelisted analyses if you use the</font><font color="#E5E5E5"> add</font>

502
00:19:02,119 --> 00:19:07,249
MP preference<font color="#E5E5E5"> this will append to an</font>

503
00:19:04,340 --> 00:19:08,840
existing existing<font color="#CCCCCC"> configuration</font><font color="#E5E5E5"> so in</font>

504
00:19:07,249 --> 00:19:11,210
the previous example if you only allow

505
00:19:08,840 --> 00:19:12,980
PDF and now you want to add exe<font color="#CCCCCC"> s</font><font color="#E5E5E5"> and</font>

506
00:19:11,210 --> 00:19:16,100
you're on add MP preference<font color="#E5E5E5"> you'll know</font>

507
00:19:12,980 --> 00:19:18,710
what be<font color="#E5E5E5"> whitelisting both somewhere to</font>

508
00:19:16,100 --> 00:19:23,119
<font color="#E5E5E5">get MP preference this also uses same</font>

509
00:19:18,710 --> 00:19:25,309
sessions for authentication<font color="#CCCCCC"> so here's an</font>

510
00:19:23,119 --> 00:19:26,840
example<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> set MP</font>

511
00:19:25,309 --> 00:19:28,549
<font color="#E5E5E5">preference which is right up here I'm</font>

512
00:19:26,840 --> 00:19:30,619
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> pass this sim session which</font>

513
00:19:28,549 --> 00:19:33,918
<font color="#E5E5E5">I've</font><font color="#CCCCCC"> previously created</font><font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to now</font>

514
00:19:30,619 --> 00:19:36,049
<font color="#CCCCCC">change and set the exclusion path to</font><font color="#E5E5E5"> BC</font>

515
00:19:33,919 --> 00:19:38,809
temp<font color="#E5E5E5"> and I'm now going to extend or</font>

516
00:19:36,049 --> 00:19:41,480
change the exclusion extension<font color="#E5E5E5"> and tell</font>

517
00:19:38,809 --> 00:19:44,330
it to allow anything<font color="#CCCCCC"> exe just don't run</font>

518
00:19:41,480 --> 00:19:46,609
it or don't scan it and if I were<font color="#E5E5E5"> to</font>

519
00:19:44,330 --> 00:19:48,109
look at<font color="#CCCCCC"> it from the system then like</font>

520
00:19:46,609 --> 00:19:50,090
from<font color="#E5E5E5"> an interactive standpoint these are</font>

521
00:19:48,109 --> 00:19:52,399
the results<font color="#CCCCCC"> all sudden I can do anything</font>

522
00:19:50,090 --> 00:19:54,010
with<font color="#E5E5E5"> C temp or</font><font color="#CCCCCC"> you</font>

523
00:19:52,400 --> 00:19:56,180
see like those are just<font color="#E5E5E5"> no</font><font color="#CCCCCC"> longer</font>

524
00:19:54,010 --> 00:20:01,910
<font color="#E5E5E5">actually scan it's completely excluded</font>

525
00:19:56,180 --> 00:20:02,900
from any sort of<font color="#E5E5E5"> antivirus analysis so</font>

526
00:20:01,910 --> 00:20:04,340
here's an<font color="#CCCCCC"> example of what it</font><font color="#E5E5E5"> looks like</font>

527
00:20:02,900 --> 00:20:06,140
<font color="#E5E5E5">from a command line perspective the</font>

528
00:20:04,340 --> 00:20:10,730
exclusion extension is now<font color="#CCCCCC"> Exe</font><font color="#E5E5E5"> and</font>

529
00:20:06,140 --> 00:20:13,340
exclusion path is<font color="#CCCCCC"> C temp this is the</font>

530
00:20:10,730 --> 00:20:15,740
same exact<font color="#E5E5E5"> concept with ASR rules so in</font>

531
00:20:13,340 --> 00:20:18,020
that<font color="#E5E5E5"> previous case we were setting what</font>

532
00:20:15,740 --> 00:20:20,300
are allowed exclusion directories what

533
00:20:18,020 --> 00:20:22,879
are allowed exclusion extensions

534
00:20:20,300 --> 00:20:25,070
well now let's either modify<font color="#E5E5E5"> by enabling</font>

535
00:20:22,880 --> 00:20:27,950
<font color="#CCCCCC">or disabling</font><font color="#E5E5E5"> ASR rules that are enforced</font>

536
00:20:25,070 --> 00:20:29,290
<font color="#E5E5E5">an environment like</font><font color="#CCCCCC"> I mentioned earlier</font>

537
00:20:27,950 --> 00:20:31,700
one of<font color="#E5E5E5"> the rules it's like you can block</font>

538
00:20:29,290 --> 00:20:33,139
processes that are spawned via<font color="#CCCCCC"> WMI or P</font>

539
00:20:31,700 --> 00:20:35,179
<font color="#E5E5E5">is exact amongst many other rules</font>

540
00:20:33,140 --> 00:20:37,580
there's I<font color="#E5E5E5"> think there's 14 right now if</font>

541
00:20:35,179 --> 00:20:39,440
you like do a<font color="#E5E5E5"> Google search</font><font color="#CCCCCC"> for Windows</font>

542
00:20:37,580 --> 00:20:41,149
<font color="#CCCCCC">ASR rules it'll be the first</font><font color="#E5E5E5"> result</font><font color="#CCCCCC"> that</font>

543
00:20:39,440 --> 00:20:42,650
<font color="#E5E5E5">comes back and it will correlate like</font>

544
00:20:41,150 --> 00:20:45,890
the rule with the<font color="#CCCCCC"> GU</font><font color="#E5E5E5"> it associated</font><font color="#CCCCCC"> with</font>

545
00:20:42,650 --> 00:20:47,510
<font color="#E5E5E5">it so you can modify this</font><font color="#CCCCCC"> with set</font><font color="#E5E5E5"> MP</font>

546
00:20:45,890 --> 00:20:49,700
preference and the coolest<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> is</font>

547
00:20:47,510 --> 00:20:51,110
<font color="#CCCCCC">again</font><font color="#E5E5E5"> because we're using</font><font color="#CCCCCC"> white listed</font>

548
00:20:49,700 --> 00:20:54,110
and allowed data types we can

549
00:20:51,110 --> 00:20:55,520
significantly<font color="#E5E5E5"> impact the security of the</font>

550
00:20:54,110 --> 00:20:58,219
endpoint that<font color="#E5E5E5"> we're targeting all within</font>

551
00:20:55,520 --> 00:21:01,760
constrained language mode<font color="#E5E5E5"> so here's an</font>

552
00:20:58,220 --> 00:21:03,800
<font color="#CCCCCC">example of</font><font color="#E5E5E5"> it we have this Akoo it right</font>

553
00:21:01,760 --> 00:21:06,260
here<font color="#E5E5E5"> is being</font><font color="#CCCCCC"> a force the reason</font><font color="#E5E5E5"> I know</font>

554
00:21:03,800 --> 00:21:09,139
it's<font color="#E5E5E5"> being</font><font color="#CCCCCC"> enforced is because this</font>

555
00:21:06,260 --> 00:21:14,090
value<font color="#CCCCCC"> is 1 if it was not enforced this</font>

556
00:21:09,140 --> 00:21:16,040
value would be<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> so next</font><font color="#E5E5E5"> I choose to run</font>

557
00:21:14,090 --> 00:21:17,270
<font color="#CCCCCC">the command set MP preference</font><font color="#E5E5E5"> attack</font>

558
00:21:16,040 --> 00:21:19,070
source<font color="#CCCCCC"> reduction rules I give it</font><font color="#E5E5E5"> the</font>

559
00:21:17,270 --> 00:21:21,110
<font color="#E5E5E5">gooood that I'm interacting with which</font>

560
00:21:19,070 --> 00:21:23,659
is this one<font color="#CCCCCC"> oh that's actually not that</font>

561
00:21:21,110 --> 00:21:25,159
one<font color="#E5E5E5"> it's this one</font><font color="#CCCCCC"> and I'm telling it</font><font color="#E5E5E5"> for</font>

562
00:21:23,660 --> 00:21:26,990
<font color="#E5E5E5">those attack surface rules</font>

563
00:21:25,160 --> 00:21:29,690
I want<font color="#CCCCCC"> that now to be</font><font color="#E5E5E5"> in a disabled</font>

564
00:21:26,990 --> 00:21:32,210
<font color="#CCCCCC">State</font><font color="#E5E5E5"> so if I were then to run get MP</font>

565
00:21:29,690 --> 00:21:33,650
preference again after running this the

566
00:21:32,210 --> 00:21:35,480
big difference<font color="#E5E5E5"> that you would see is</font>

567
00:21:33,650 --> 00:21:39,679
that is no longer<font color="#E5E5E5"> being enforced because</font>

568
00:21:35,480 --> 00:21:43,220
<font color="#CCCCCC">the action value is</font><font color="#E5E5E5"> 0 so let's look at</font>

569
00:21:39,679 --> 00:21:45,370
an<font color="#CCCCCC"> example of what that looks like real</font>

570
00:21:43,220 --> 00:21:45,370
life

571
00:21:50,070 --> 00:21:54,460
<font color="#CCCCCC">alright so in</font><font color="#E5E5E5"> this case I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

572
00:21:52,360 --> 00:21:54,729
running<font color="#E5E5E5"> the get MP preference command</font>

573
00:21:54,460 --> 00:21:56,500
late

574
00:21:54,730 --> 00:21:58,750
I'm also passing<font color="#CCCCCC"> a sim session that was</font>

575
00:21:56,500 --> 00:22:00,700
created so this is dumping information

576
00:21:58,750 --> 00:22:02,559
and if<font color="#CCCCCC"> I</font><font color="#E5E5E5"> look at the top right here we</font>

577
00:22:00,700 --> 00:22:04,870
can<font color="#CCCCCC"> see the value</font><font color="#E5E5E5"> is 1</font><font color="#CCCCCC"> so this rule is</font>

578
00:22:02,559 --> 00:22:07,570
being enforced<font color="#E5E5E5"> and that rule</font><font color="#CCCCCC"> is</font>

579
00:22:04,870 --> 00:22:11,649
specifically<font color="#CCCCCC"> the I'm not allowed to</font>

580
00:22:07,570 --> 00:22:12,668
spawn a process via<font color="#CCCCCC"> WMI on the system so</font>

581
00:22:11,650 --> 00:22:14,169
<font color="#E5E5E5">I'm gonna do now</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> I'm going to try to</font>

582
00:22:12,669 --> 00:22:15,970
<font color="#E5E5E5">spawn a process when</font><font color="#CCCCCC"> eww my of course</font>

583
00:22:14,169 --> 00:22:18,400
<font color="#E5E5E5">and so I'm running</font><font color="#CCCCCC"> invoked with</font><font color="#E5E5E5"> me</font>

584
00:22:15,970 --> 00:22:21,130
method I'm calling<font color="#CCCCCC"> 1/32 process class</font>

585
00:22:18,400 --> 00:22:23,080
<font color="#E5E5E5">I'm telling to create notepad.exe so I</font>

586
00:22:21,130 --> 00:22:26,080
wanted to spawn notepad that<font color="#CCCCCC"> exe on the</font>

587
00:22:23,080 --> 00:22:28,149
system well as you can<font color="#CCCCCC"> see what happened</font>

588
00:22:26,080 --> 00:22:30,250
is I've got a return value<font color="#CCCCCC"> of non</font><font color="#E5E5E5"> zero</font>

589
00:22:28,150 --> 00:22:32,350
<font color="#E5E5E5">basically what I want is</font><font color="#CCCCCC"> 0 which</font><font color="#E5E5E5"> means</font>

590
00:22:30,250 --> 00:22:34,270
<font color="#E5E5E5">it works</font><font color="#CCCCCC"> if it's not zero then something</font>

591
00:22:32,350 --> 00:22:35,799
failed and so was blocked and this

592
00:22:34,270 --> 00:22:38,500
<font color="#E5E5E5">little pop-up came up so it's not</font>

593
00:22:35,799 --> 00:22:40,030
there's<font color="#E5E5E5"> no antivirus signature there but</font>

594
00:22:38,500 --> 00:22:42,220
<font color="#E5E5E5">just</font><font color="#CCCCCC"> because we have the rule enable</font>

595
00:22:40,030 --> 00:22:43,690
<font color="#CCCCCC">it's gonna</font><font color="#E5E5E5"> say hey your IT admin</font><font color="#CCCCCC"> caused</font>

596
00:22:42,220 --> 00:22:45,400
<font color="#CCCCCC">windows</font><font color="#E5E5E5"> basically prevent this action</font>

597
00:22:43,690 --> 00:22:49,710
from happening which was spawning the

598
00:22:45,400 --> 00:22:52,929
process VW my<font color="#CCCCCC"> alright so it doesn't</font><font color="#E5E5E5"> work</font>

599
00:22:49,710 --> 00:22:54,190
<font color="#E5E5E5">but because we have administrative</font>

600
00:22:52,929 --> 00:22:56,830
<font color="#E5E5E5">rights within constrained language mode</font>

601
00:22:54,190 --> 00:22:59,049
I'm going<font color="#E5E5E5"> to try to</font><font color="#CCCCCC"> change that so I'm</font>

602
00:22:56,830 --> 00:23:01,480
gonna<font color="#E5E5E5"> call the set MP preference command</font>

603
00:22:59,049 --> 00:23:03,760
<font color="#CCCCCC">line</font><font color="#E5E5E5"> I'm going to</font><font color="#CCCCCC"> specify the specific</font>

604
00:23:01,480 --> 00:23:06,700
<font color="#E5E5E5">rule that I actually want to change</font>

605
00:23:03,760 --> 00:23:09,850
which is<font color="#CCCCCC"> hey maybe now let me run our</font>

606
00:23:06,700 --> 00:23:13,799
spawn processes via<font color="#CCCCCC"> WMI I'm gonna</font>

607
00:23:09,850 --> 00:23:17,199
basically<font color="#E5E5E5"> turn the ASR rule state into a</font>

608
00:23:13,799 --> 00:23:19,450
disabled mode<font color="#CCCCCC"> and then finally I'm going</font>

609
00:23:17,200 --> 00:23:20,830
<font color="#CCCCCC">to pass in the same session that I had</font>

610
00:23:19,450 --> 00:23:23,049
previously<font color="#CCCCCC"> used to authenticate to the</font>

611
00:23:20,830 --> 00:23:24,730
system on targeting so I get an<font color="#E5E5E5"> error</font>

612
00:23:23,049 --> 00:23:27,179
there so because I didn't<font color="#E5E5E5"> get an error</font>

613
00:23:24,730 --> 00:23:29,950
there<font color="#E5E5E5"> that should have ran successfully</font>

614
00:23:27,179 --> 00:23:32,020
we're<font color="#CCCCCC"> invalidate that by calling gate MP</font>

615
00:23:29,950 --> 00:23:34,419
preference again against the<font color="#E5E5E5"> system to</font>

616
00:23:32,020 --> 00:23:36,220
retrieve its current state<font color="#E5E5E5"> and if we</font>

617
00:23:34,419 --> 00:23:38,260
look go up to the top we can<font color="#CCCCCC"> now see</font>

618
00:23:36,220 --> 00:23:40,840
<font color="#CCCCCC">that it actually</font><font color="#E5E5E5"> did change so what was</font>

619
00:23:38,260 --> 00:23:45,280
one<font color="#E5E5E5"> before is now</font><font color="#CCCCCC"> zero so</font><font color="#E5E5E5"> this rule</font>

620
00:23:40,840 --> 00:23:47,709
<font color="#CCCCCC">should no longer be running so</font><font color="#E5E5E5"> to test</font>

621
00:23:45,280 --> 00:23:50,200
<font color="#E5E5E5">that let's go to invoke</font><font color="#CCCCCC"> with me</font><font color="#E5E5E5"> method</font>

622
00:23:47,710 --> 00:23:53,440
we're gonna call the win32 process class

623
00:23:50,200 --> 00:23:55,120
again we're gonna<font color="#E5E5E5"> go ahead and tell it</font>

624
00:23:53,440 --> 00:23:56,250
we're gonna create a<font color="#CCCCCC"> process and the</font>

625
00:23:55,120 --> 00:23:59,459
argument list is we're gonna call

626
00:23:56,250 --> 00:24:00,990
<font color="#CCCCCC">notepad</font><font color="#E5E5E5"> as you can see in this case</font>

627
00:23:59,460 --> 00:24:03,510
we've got a return value<font color="#CCCCCC"> of zero the</font>

628
00:24:00,990 --> 00:24:05,580
process ID of 944<font color="#E5E5E5"> and notepad actually</font>

629
00:24:03,510 --> 00:24:07,260
did start so there's a lot of different

630
00:24:05,580 --> 00:24:08,669
things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can actually do within</font>

631
00:24:07,260 --> 00:24:11,280
<font color="#CCCCCC">constrained language</font><font color="#E5E5E5"> mode that can</font>

632
00:24:08,670 --> 00:24:13,080
impact<font color="#E5E5E5"> security of a system both from an</font>

633
00:24:11,280 --> 00:24:14,730
administrative<font color="#CCCCCC"> Blue Team perspective and</font>

634
00:24:13,080 --> 00:24:21,389
from a red team<font color="#E5E5E5"> slash attackers</font>

635
00:24:14,730 --> 00:24:25,980
perspective here's<font color="#E5E5E5"> another quick demo</font>

636
00:24:21,390 --> 00:24:27,600
<font color="#CCCCCC">just</font><font color="#E5E5E5"> to show so we're gonna do the same</font>

637
00:24:25,980 --> 00:24:28,980
<font color="#CCCCCC">thing again</font><font color="#E5E5E5"> all in this case so I'm</font>

638
00:24:27,600 --> 00:24:30,480
showing<font color="#E5E5E5"> that there is a sim session</font>

639
00:24:28,980 --> 00:24:33,540
<font color="#E5E5E5">already established with</font><font color="#CCCCCC"> a specific</font>

640
00:24:30,480 --> 00:24:35,580
<font color="#E5E5E5">computer I'm</font><font color="#CCCCCC"> gonna run</font><font color="#E5E5E5"> the MP preference</font>

641
00:24:33,540 --> 00:24:39,060
command again we're gonna<font color="#E5E5E5"> call and use</font>

642
00:24:35,580 --> 00:24:41,639
the<font color="#E5E5E5"> sim</font><font color="#CCCCCC"> session in</font><font color="#E5E5E5"> this case we're gonna</font>

643
00:24:39,060 --> 00:24:43,350
look at the different directories that

644
00:24:41,640 --> 00:24:46,230
<font color="#E5E5E5">are allowed here</font><font color="#CCCCCC"> so right now we're</font>

645
00:24:43,350 --> 00:24:50,159
allowing<font color="#E5E5E5"> the exe file extension and the</font>

646
00:24:46,230 --> 00:24:51,330
C temp exclusion path so let's say I

647
00:24:50,160 --> 00:24:53,400
want to<font color="#E5E5E5"> change</font><font color="#CCCCCC"> I don't say I want to</font>

648
00:24:51,330 --> 00:24:55,649
allow<font color="#E5E5E5"> so here's another example</font><font color="#CCCCCC"> showing</font>

649
00:24:53,400 --> 00:24:57,270
<font color="#E5E5E5">yes ASR rules are still enabled</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> if</font>

650
00:24:55,650 --> 00:25:00,600
I want to allow a<font color="#E5E5E5"> new folder or</font>

651
00:24:57,270 --> 00:25:03,000
whitelist<font color="#E5E5E5"> another file extension that</font>

652
00:25:00,600 --> 00:25:06,030
maybe my malware uses<font color="#E5E5E5"> or whatever it is</font>

653
00:25:03,000 --> 00:25:07,080
I'm<font color="#CCCCCC"> looking to do so in this</font><font color="#E5E5E5"> case I'm</font>

654
00:25:06,030 --> 00:25:09,360
going<font color="#CCCCCC"> to say I</font><font color="#E5E5E5"> want to provide</font><font color="#CCCCCC"> a new</font>

655
00:25:07,080 --> 00:25:12,689
exclusion extension<font color="#E5E5E5"> and this right now</font>

656
00:25:09,360 --> 00:25:15,929
to me PDF so<font color="#CCCCCC"> that I gave up</font><font color="#E5E5E5"> my sim</font>

657
00:25:12,690 --> 00:25:17,250
session<font color="#E5E5E5"> and there was no errors so I'm</font>

658
00:25:15,930 --> 00:25:19,200
going<font color="#CCCCCC"> to check another instance of</font><font color="#E5E5E5"> that</font>

659
00:25:17,250 --> 00:25:23,160
<font color="#E5E5E5">and now all sudden with my sim session</font><font color="#CCCCCC"> I</font>

660
00:25:19,200 --> 00:25:26,340
am able<font color="#CCCCCC"> to validate that right here that</font>

661
00:25:23,160 --> 00:25:28,410
changed so<font color="#E5E5E5"> we</font><font color="#CCCCCC"> modified</font><font color="#E5E5E5"> the output and it</font>

662
00:25:26,340 --> 00:25:30,030
was able<font color="#E5E5E5"> to mod change there's not the</font>

663
00:25:28,410 --> 00:25:31,740
<font color="#CCCCCC">Alpha excuse me I modified the</font>

664
00:25:30,030 --> 00:25:34,680
configuration of the antivirus system

665
00:25:31,740 --> 00:25:35,970
<font color="#E5E5E5">and I'm now able</font><font color="#CCCCCC"> to if I have PDF base</font>

666
00:25:34,680 --> 00:25:37,950
now<font color="#E5E5E5"> where I can use that and</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> won't be</font>

667
00:25:35,970 --> 00:25:39,930
scanned at all by antivirus<font color="#E5E5E5"> and again</font>

668
00:25:37,950 --> 00:25:42,650
all<font color="#E5E5E5"> of this is clearly done in</font>

669
00:25:39,930 --> 00:25:42,650
<font color="#CCCCCC">constrained</font><font color="#E5E5E5"> language mode</font>

670
00:25:49,850 --> 00:25:53,580
so what else<font color="#CCCCCC"> can you do there's good</font>

671
00:25:52,680 --> 00:25:55,410
<font color="#E5E5E5">news and bad</font><font color="#CCCCCC"> news</font>

672
00:25:53,580 --> 00:25:57,419
besides<font color="#E5E5E5"> built-in</font><font color="#CCCCCC"> Commandments like that</font>

673
00:25:55,410 --> 00:25:59,430
get MP preference set MP<font color="#E5E5E5"> preference or</font>

674
00:25:57,420 --> 00:26:01,950
other pure powershell commandlets

675
00:25:59,430 --> 00:26:03,930
<font color="#E5E5E5">there's not a whole lot</font><font color="#CCCCCC"> that's really</font>

676
00:26:01,950 --> 00:26:04,970
available<font color="#E5E5E5"> from</font><font color="#CCCCCC"> your training language</font>

677
00:26:03,930 --> 00:26:07,920
<font color="#E5E5E5">mode you can do some basic</font>

678
00:26:04,970 --> 00:26:09,300
administration tasks but common things

679
00:26:07,920 --> 00:26:12,059
that<font color="#CCCCCC"> you would think are allowed such as</font>

680
00:26:09,300 --> 00:26:15,389
base64 encoding<font color="#E5E5E5"> doing basic math on a</font>

681
00:26:12,059 --> 00:26:16,620
system may be outright blocked so it's

682
00:26:15,390 --> 00:26:19,170
kind<font color="#CCCCCC"> of a bad thing but it's also</font><font color="#E5E5E5"> pretty</font>

683
00:26:16,620 --> 00:26:22,678
cool<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> because you have this whole</font>

684
00:26:19,170 --> 00:26:23,730
like vast area that really<font color="#E5E5E5"> and really no</font>

685
00:26:22,679 --> 00:26:26,460
one<font color="#CCCCCC"> is kind of</font><font color="#E5E5E5"> looking at right now</font>

686
00:26:23,730 --> 00:26:28,050
<font color="#CCCCCC">constrain</font><font color="#E5E5E5"> language mode and there's no</font>

687
00:26:26,460 --> 00:26:29,580
there's not<font color="#E5E5E5"> a whole lot of capabilities</font>

688
00:26:28,050 --> 00:26:31,260
<font color="#CCCCCC">all things you can do with</font><font color="#E5E5E5"> thing in</font>

689
00:26:29,580 --> 00:26:33,480
<font color="#E5E5E5">strain language mode</font><font color="#CCCCCC"> I think it's kind</font>

690
00:26:31,260 --> 00:26:35,460
of cool<font color="#CCCCCC"> because you can</font><font color="#E5E5E5"> start building</font>

691
00:26:33,480 --> 00:26:36,650
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that just doesn't exist at all</font>

692
00:26:35,460 --> 00:26:39,270
<font color="#E5E5E5">right now</font>

693
00:26:36,650 --> 00:26:40,440
or maybe it does exist but<font color="#CCCCCC"> not within</font>

694
00:26:39,270 --> 00:26:42,900
constrained language<font color="#E5E5E5"> myth</font>

695
00:26:40,440 --> 00:26:45,570
another interesting perspective<font color="#E5E5E5"> is any</font>

696
00:26:42,900 --> 00:26:47,220
code<font color="#CCCCCC"> that you write in PowerShell</font><font color="#E5E5E5"> that</font>

697
00:26:45,570 --> 00:26:50,340
runs on a constrained language mode

698
00:26:47,220 --> 00:26:53,309
protected system will 100% work and run

699
00:26:50,340 --> 00:26:55,889
on a full language<font color="#CCCCCC"> system the inverse is</font>

700
00:26:53,309 --> 00:26:57,059
<font color="#E5E5E5">not the same you</font><font color="#CCCCCC"> can not all code from</font>

701
00:26:55,890 --> 00:26:59,340
<font color="#E5E5E5">full language will work in</font><font color="#CCCCCC"> constrained</font>

702
00:26:57,059 --> 00:27:02,040
language mode but from CLM<font color="#E5E5E5"> to full</font>

703
00:26:59,340 --> 00:27:03,330
language<font color="#E5E5E5"> it will work if anyone here is</font>

704
00:27:02,040 --> 00:27:04,950
played with<font color="#E5E5E5"> device guard or what's now</font>

705
00:27:03,330 --> 00:27:07,260
called<font color="#E5E5E5"> Windows Defender application</font>

706
00:27:04,950 --> 00:27:09,170
control that automatically enforces

707
00:27:07,260 --> 00:27:11,280
constrain language mode on<font color="#E5E5E5"> PowerShell</font>

708
00:27:09,170 --> 00:27:13,770
any code<font color="#CCCCCC"> that you write in a</font><font color="#E5E5E5"> strain</font>

709
00:27:11,280 --> 00:27:18,600
language mode<font color="#CCCCCC"> will work on a</font><font color="#E5E5E5"> device card</font>

710
00:27:13,770 --> 00:27:20,190
protected system<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> let's talk</font>

711
00:27:18,600 --> 00:27:24,240
<font color="#E5E5E5">about and like look into</font><font color="#CCCCCC"> the concept of</font>

712
00:27:20,190 --> 00:27:26,070
<font color="#E5E5E5">building out</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> capabilities there's</font>

713
00:27:24,240 --> 00:27:27,570
really<font color="#E5E5E5"> two methods for building out the</font>

714
00:27:26,070 --> 00:27:29,100
<font color="#E5E5E5">ability kind of survive on a constrained</font>

715
00:27:27,570 --> 00:27:31,250
language mode protected environment<font color="#E5E5E5"> if</font>

716
00:27:29,100 --> 00:27:33,840
you're really<font color="#E5E5E5"> only isolated</font><font color="#CCCCCC"> PowerShell</font>

717
00:27:31,250 --> 00:27:36,090
<font color="#E5E5E5">one is to build a bypass or constrain</font>

718
00:27:33,840 --> 00:27:39,120
language mode and really kind of Windows

719
00:27:36,090 --> 00:27:40,889
Defender<font color="#CCCCCC"> application control when you</font>

720
00:27:39,120 --> 00:27:42,570
build a bypass I hate saying this

721
00:27:40,890 --> 00:27:44,910
<font color="#CCCCCC">because it's not</font><font color="#E5E5E5"> like an exploit but a</font>

722
00:27:42,570 --> 00:27:46,530
semi similar to an exploit<font color="#CCCCCC"> right so the</font>

723
00:27:44,910 --> 00:27:49,770
<font color="#E5E5E5">first time that you use</font><font color="#CCCCCC"> it it's going</font><font color="#E5E5E5"> to</font>

724
00:27:46,530 --> 00:27:52,649
<font color="#E5E5E5">be pretty effective</font><font color="#CCCCCC"> right but as people</font>

725
00:27:49,770 --> 00:27:54,179
start<font color="#E5E5E5"> to pick up</font><font color="#CCCCCC"> hey we are identifying</font>

726
00:27:52,650 --> 00:27:56,400
<font color="#CCCCCC">this sort of bypass it's allowing code</font>

727
00:27:54,179 --> 00:27:57,520
execution<font color="#CCCCCC"> in an unattended manner</font><font color="#E5E5E5"> you</font>

728
00:27:56,400 --> 00:28:00,790
<font color="#E5E5E5">can block these sort of things</font>

729
00:27:57,520 --> 00:28:03,910
so you can<font color="#E5E5E5"> think of it</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> only having a</font>

730
00:28:00,790 --> 00:28:06,610
<font color="#CCCCCC">limited shelf</font><font color="#E5E5E5"> life for</font><font color="#CCCCCC"> your bypasses the</font>

731
00:28:03,910 --> 00:28:08,770
other thing is<font color="#E5E5E5"> constraint language mode</font>

732
00:28:06,610 --> 00:28:10,809
<font color="#E5E5E5">and it's worth</font><font color="#CCCCCC"> pointing out is</font><font color="#E5E5E5"> really</font>

733
00:28:08,770 --> 00:28:13,420
only useful if if application

734
00:28:10,809 --> 00:28:15,190
whitelisting<font color="#CCCCCC"> is also enforced on the</font>

735
00:28:13,420 --> 00:28:17,380
system<font color="#E5E5E5"> so what's the reason</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that</font>

736
00:28:15,190 --> 00:28:19,660
<font color="#E5E5E5">well let's say you constrain language</font>

737
00:28:17,380 --> 00:28:21,820
mode is running on a system but there's

738
00:28:19,660 --> 00:28:25,750
no<font color="#CCCCCC"> application whitelisting</font><font color="#E5E5E5"> so why would</font>

739
00:28:21,820 --> 00:28:27,730
an attacker try to write their<font color="#CCCCCC"> own code</font>

740
00:28:25,750 --> 00:28:29,710
in<font color="#E5E5E5"> PowerShell at that point they</font><font color="#CCCCCC"> can</font>

741
00:28:27,730 --> 00:28:31,990
just write something<font color="#E5E5E5"> in c-sharp</font><font color="#CCCCCC"> or some</font>

742
00:28:29,710 --> 00:28:33,550
<font color="#E5E5E5">other language and gain the same effect</font>

743
00:28:31,990 --> 00:28:35,860
of compromise in a system and<font color="#E5E5E5"> completely</font>

744
00:28:33,550 --> 00:28:37,540
bypass any sort<font color="#E5E5E5"> of protection</font><font color="#CCCCCC"> that</font>

745
00:28:35,860 --> 00:28:39,520
<font color="#CCCCCC">constraint language mode is unfortunate</font>

746
00:28:37,540 --> 00:28:41,860
<font color="#E5E5E5">on the system so this is</font><font color="#CCCCCC"> only really</font>

747
00:28:39,520 --> 00:28:42,940
<font color="#E5E5E5">useful when also paired with an</font>

748
00:28:41,860 --> 00:28:46,178
application whitelisting

749
00:28:42,940 --> 00:28:47,530
solution so the other way that you can

750
00:28:46,179 --> 00:28:49,600
<font color="#CCCCCC">kind of build capabilities for</font>

751
00:28:47,530 --> 00:28:51,190
<font color="#CCCCCC">constrained language mode is</font><font color="#E5E5E5"> look to</font>

752
00:28:49,600 --> 00:28:52,800
live off the<font color="#CCCCCC"> land so it's kind of</font>

753
00:28:51,190 --> 00:28:54,670
<font color="#E5E5E5">explore these two different options</font><font color="#CCCCCC"> oh</font>

754
00:28:52,800 --> 00:28:56,800
this actually<font color="#E5E5E5"> was</font><font color="#CCCCCC"> just talking about</font>

755
00:28:54,670 --> 00:28:57,880
<font color="#E5E5E5">where if you don't have</font><font color="#CCCCCC"> constrained</font>

756
00:28:56,800 --> 00:28:59,919
<font color="#E5E5E5">linkage mode with application</font>

757
00:28:57,880 --> 00:29:03,850
whitelisting then it's not super

758
00:28:59,920 --> 00:29:05,620
effective<font color="#E5E5E5"> so one option</font><font color="#CCCCCC"> to subvert</font>

759
00:29:03,850 --> 00:29:07,449
<font color="#CCCCCC">constrained language mode is to develop</font>

760
00:29:05,620 --> 00:29:09,189
a bypass<font color="#CCCCCC"> kinda like a mr.</font><font color="#E5E5E5"> Lee</font><font color="#CCCCCC"> I think it</font>

761
00:29:07,450 --> 00:29:10,540
is similar<font color="#CCCCCC"> to an exploit you probably</font>

762
00:29:09,190 --> 00:29:11,520
only<font color="#E5E5E5"> have one shot</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use it you may</font>

763
00:29:10,540 --> 00:29:13,480
have<font color="#CCCCCC"> to consider</font><font color="#E5E5E5"> it burnt after</font>

764
00:29:11,520 --> 00:29:15,580
<font color="#E5E5E5">hopefully it's not if it's undetected</font>

765
00:29:13,480 --> 00:29:19,780
somehow then<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can continue</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> reuse</font>

766
00:29:15,580 --> 00:29:21,520
<font color="#CCCCCC">it until it is so KC Smith one</font><font color="#E5E5E5"> of my</font>

767
00:29:19,780 --> 00:29:24,360
friends has done a ton<font color="#CCCCCC"> of Awesome</font>

768
00:29:21,520 --> 00:29:27,580
research on developing bypasses now his

769
00:29:24,360 --> 00:29:29,199
bypasses<font color="#E5E5E5"> are typically application</font>

770
00:29:27,580 --> 00:29:31,120
whitelisting specific bypasses<font color="#E5E5E5"> so</font>

771
00:29:29,200 --> 00:29:33,309
they're<font color="#E5E5E5"> using other targeting device</font>

772
00:29:31,120 --> 00:29:35,530
guard and bypassing<font color="#E5E5E5"> protections that the</font>

773
00:29:33,309 --> 00:29:37,780
Vice guard op provides to an<font color="#CCCCCC"> endpoint</font>

774
00:29:35,530 --> 00:29:40,809
<font color="#E5E5E5">this is where he's using stuff</font><font color="#CCCCCC"> but like</font>

775
00:29:37,780 --> 00:29:42,639
<font color="#CCCCCC">MS</font><font color="#E5E5E5"> bill install util olymic now I</font>

776
00:29:40,809 --> 00:29:45,460
believe it was KC<font color="#E5E5E5"> if I'm wrong it was</font>

777
00:29:42,640 --> 00:29:47,830
Matt Nelson<font color="#E5E5E5"> but one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> two I think</font>

778
00:29:45,460 --> 00:29:50,280
<font color="#CCCCCC">is KC</font><font color="#E5E5E5"> found another bypass for</font>

779
00:29:47,830 --> 00:29:54,189
<font color="#E5E5E5">constrained language mode via a debugger</font>

780
00:29:50,280 --> 00:29:55,928
so what this<font color="#E5E5E5"> was application</font>

781
00:29:54,190 --> 00:29:57,520
whitelisting<font color="#CCCCCC"> it they basically</font><font color="#E5E5E5"> trusted</font>

782
00:29:55,929 --> 00:29:59,559
<font color="#CCCCCC">everything that was Microsoft signed</font>

783
00:29:57,520 --> 00:30:01,720
<font color="#E5E5E5">right so I think he had</font><font color="#CCCCCC"> win bag on the</font>

784
00:29:59,559 --> 00:30:04,210
system<font color="#E5E5E5"> so as I develop a Microsoft and</font>

785
00:30:01,720 --> 00:30:07,870
he was using<font color="#E5E5E5"> that to</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> at it</font>

786
00:30:04,210 --> 00:30:09,400
different code<font color="#CCCCCC"> and debugger</font><font color="#E5E5E5"> well he had</font>

787
00:30:07,870 --> 00:30:10,840
<font color="#CCCCCC">PowerShell constrained language mode</font>

788
00:30:09,400 --> 00:30:12,760
enforced on the system

789
00:30:10,840 --> 00:30:14,740
and he loaded<font color="#E5E5E5"> PowerShell up into a</font>

790
00:30:12,760 --> 00:30:17,350
debugger<font color="#E5E5E5"> it was specifically</font><font color="#CCCCCC"> C to be</font>

791
00:30:14,740 --> 00:30:19,660
actually a C<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> dot exe and</font><font color="#CCCCCC"> what you</font>

792
00:30:17,350 --> 00:30:20,860
did when he when he loaded<font color="#E5E5E5"> debugger is</font>

793
00:30:19,660 --> 00:30:24,520
he<font color="#E5E5E5"> found I think</font><font color="#CCCCCC"> it's like a specific</font>

794
00:30:20,860 --> 00:30:26,949
<font color="#E5E5E5">variable within the debugger that if he</font>

795
00:30:24,520 --> 00:30:29,020
modified the<font color="#CCCCCC"> value of it</font><font color="#E5E5E5"> he can</font>

796
00:30:26,950 --> 00:30:31,300
immediately change<font color="#E5E5E5"> PowerShell from</font>

797
00:30:29,020 --> 00:30:34,090
running in constrained language mode and

798
00:30:31,300 --> 00:30:36,280
enabling full language mode so he tested

799
00:30:34,090 --> 00:30:38,709
this but I<font color="#E5E5E5"> like again using c DB loading</font>

800
00:30:36,280 --> 00:30:40,810
up<font color="#CCCCCC"> powershell verify those constraint</font>

801
00:30:38,710 --> 00:30:42,730
language mode change the value<font color="#CCCCCC"> of us was</font>

802
00:30:40,810 --> 00:30:44,440
<font color="#E5E5E5">the location of memory and then all of a</font>

803
00:30:42,730 --> 00:30:46,390
<font color="#CCCCCC">sudden</font><font color="#E5E5E5"> if he ran any commands after that</font>

804
00:30:44,440 --> 00:30:50,320
that process<font color="#CCCCCC"> is</font><font color="#E5E5E5"> running in full language</font>

805
00:30:46,390 --> 00:30:52,450
mode so it's kind<font color="#E5E5E5"> of showcases why you</font>

806
00:30:50,320 --> 00:30:53,470
have to have specific<font color="#CCCCCC"> trust</font><font color="#E5E5E5"> or you have</font>

807
00:30:52,450 --> 00:30:55,930
to kind of have<font color="#E5E5E5"> application whitelisting</font>

808
00:30:53,470 --> 00:30:57,460
also enforced on<font color="#CCCCCC"> the system in order for</font>

809
00:30:55,930 --> 00:30:58,990
<font color="#E5E5E5">constraint language mode to be effective</font>

810
00:30:57,460 --> 00:31:03,270
otherwise you<font color="#CCCCCC"> just figure out</font><font color="#E5E5E5"> an easy</font>

811
00:30:58,990 --> 00:31:06,100
<font color="#CCCCCC">bypass</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> disable country language mode</font>

812
00:31:03,270 --> 00:31:08,379
so you<font color="#E5E5E5"> talked about though is uh if you</font>

813
00:31:06,100 --> 00:31:11,469
develop a bypass if it is detected<font color="#E5E5E5"> your</font>

814
00:31:08,380 --> 00:31:13,330
bypass can be mitigated<font color="#E5E5E5"> if if it's on a</font>

815
00:31:11,470 --> 00:31:14,410
device<font color="#CCCCCC"> for a protected system device</font>

816
00:31:13,330 --> 00:31:16,870
<font color="#CCCCCC">card uses what's called the code</font>

817
00:31:14,410 --> 00:31:18,880
integrity policy<font color="#E5E5E5"> code integrity policies</font>

818
00:31:16,870 --> 00:31:21,340
define what you trust<font color="#E5E5E5"> like what</font><font color="#CCCCCC"> digital</font>

819
00:31:18,880 --> 00:31:23,290
signatures do you trust what binaries do

820
00:31:21,340 --> 00:31:25,959
you trust and if there's a specific

821
00:31:23,290 --> 00:31:28,570
binary that's abusing its functionality

822
00:31:25,960 --> 00:31:29,200
to allow basically unrestricted code

823
00:31:28,570 --> 00:31:31,899
execution

824
00:31:29,200 --> 00:31:33,880
<font color="#E5E5E5">you can block that binary</font><font color="#CCCCCC"> interest in</font>

825
00:31:31,900 --> 00:31:36,070
your<font color="#E5E5E5"> code integrity policy and you can</font>

826
00:31:33,880 --> 00:31:38,080
<font color="#E5E5E5">bypasses take research in time somewhat</font>

827
00:31:36,070 --> 00:31:40,840
<font color="#E5E5E5">similar to exploits so you want to</font>

828
00:31:38,080 --> 00:31:44,290
<font color="#E5E5E5">protect through use it is the guaranteed</font>

829
00:31:40,840 --> 00:31:47,159
win unless<font color="#E5E5E5"> it's not but it's it's a</font>

830
00:31:44,290 --> 00:31:51,480
really an<font color="#E5E5E5"> effective way to try to</font>

831
00:31:47,160 --> 00:31:54,910
<font color="#E5E5E5">execute code when you absolutely need to</font>

832
00:31:51,480 --> 00:31:56,530
so other option is instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> looking to</font>

833
00:31:54,910 --> 00:31:58,210
bypass<font color="#E5E5E5"> so why don't we figure out is</font>

834
00:31:56,530 --> 00:31:59,530
there a way<font color="#CCCCCC"> to</font><font color="#E5E5E5"> kind of live within the</font>

835
00:31:58,210 --> 00:32:02,230
constraints of<font color="#CCCCCC"> constrained language mode</font>

836
00:31:59,530 --> 00:32:05,200
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> can we build</font><font color="#E5E5E5"> out some</font>

837
00:32:02,230 --> 00:32:07,510
capabilities that you want to have that

838
00:32:05,200 --> 00:32:10,030
may always be enabled within<font color="#E5E5E5"> full</font>

839
00:32:07,510 --> 00:32:12,670
language mode<font color="#CCCCCC"> but</font><font color="#E5E5E5"> part is with a</font>

840
00:32:10,030 --> 00:32:14,500
trailing<font color="#CCCCCC"> judgement well</font><font color="#E5E5E5"> how do we want</font>

841
00:32:12,670 --> 00:32:15,460
<font color="#CCCCCC">to</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> this approach</font><font color="#E5E5E5"> and the easiest</font>

842
00:32:14,500 --> 00:32:16,810
way<font color="#CCCCCC"> is kind of</font><font color="#E5E5E5"> like I talked about</font>

843
00:32:15,460 --> 00:32:18,990
earlier<font color="#E5E5E5"> is let's go ahead and just</font>

844
00:32:16,810 --> 00:32:21,040
deploy device<font color="#CCCCCC"> card on your system or</font>

845
00:32:18,990 --> 00:32:22,660
<font color="#E5E5E5">enforce constraint language mode within</font>

846
00:32:21,040 --> 00:32:24,340
<font color="#E5E5E5">your power shell process</font>

847
00:32:22,660 --> 00:32:25,720
and that will

848
00:32:24,340 --> 00:32:28,020
sure that at least<font color="#E5E5E5"> that instance is</font>

849
00:32:25,720 --> 00:32:30,340
running<font color="#E5E5E5"> within constrained language mode</font>

850
00:32:28,020 --> 00:32:31,389
<font color="#E5E5E5">the first step really to do this is kind</font>

851
00:32:30,340 --> 00:32:33,340
of like determine what problem you want

852
00:32:31,390 --> 00:32:35,440
to solve again I<font color="#E5E5E5"> think it's super cool</font>

853
00:32:33,340 --> 00:32:36,820
<font color="#CCCCCC">because anything you want to build</font><font color="#E5E5E5"> out</font>

854
00:32:35,440 --> 00:32:39,220
<font color="#E5E5E5">in stream language</font><font color="#CCCCCC"> Road</font><font color="#E5E5E5"> probably doesn't</font>

855
00:32:36,820 --> 00:32:41,830
<font color="#E5E5E5">work right now so you can kind of just</font>

856
00:32:39,220 --> 00:32:44,200
<font color="#E5E5E5">pick one thing</font><font color="#CCCCCC"> maybe one figure out how</font>

857
00:32:41,830 --> 00:32:46,389
to do<font color="#E5E5E5"> square root you really like doing</font>

858
00:32:44,200 --> 00:32:47,350
math<font color="#E5E5E5"> in</font><font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> on your system so</font>

859
00:32:46,390 --> 00:32:48,909
let's figure out<font color="#E5E5E5"> a way</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can</font>

860
00:32:47,350 --> 00:32:51,899
determine the square root of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> number in</font>

861
00:32:48,909 --> 00:32:54,520
constrained language<font color="#E5E5E5"> mode that's</font><font color="#CCCCCC"> a pop</font><font color="#E5E5E5"> I</font>

862
00:32:51,900 --> 00:32:56,200
<font color="#CCCCCC">say start</font><font color="#E5E5E5"> small because if you're gonna</font>

863
00:32:54,520 --> 00:32:57,970
try to<font color="#CCCCCC"> tackle a really big problem</font>

864
00:32:56,200 --> 00:32:59,230
<font color="#CCCCCC">you're gonna get pissed off because</font>

865
00:32:57,970 --> 00:33:01,510
<font color="#E5E5E5">constrained language mode almost</font>

866
00:32:59,230 --> 00:33:03,669
everything every line you're<font color="#E5E5E5"> gonna write</font>

867
00:33:01,510 --> 00:33:05,260
some code run a test<font color="#E5E5E5"> and see that it was</font>

868
00:33:03,669 --> 00:33:07,330
blocked<font color="#E5E5E5"> and so you have to figure out</font>

869
00:33:05,260 --> 00:33:09,700
<font color="#E5E5E5">another way to</font><font color="#CCCCCC"> do what it</font><font color="#E5E5E5"> is you're</font>

870
00:33:07,330 --> 00:33:10,600
trying<font color="#E5E5E5"> to do you're gonna fall and I</font>

871
00:33:09,700 --> 00:33:12,010
kind of mention that here you're gonna

872
00:33:10,600 --> 00:33:13,059
<font color="#CCCCCC">sum</font><font color="#E5E5E5"> what you're gonna follow something</font>

873
00:33:12,010 --> 00:33:15,279
<font color="#E5E5E5">similar it's like a test-driven</font>

874
00:33:13,059 --> 00:33:17,490
development process<font color="#CCCCCC"> and you're gonna do</font>

875
00:33:15,279 --> 00:33:19,600
<font color="#E5E5E5">that because you're looking</font><font color="#CCCCCC"> more for</font>

876
00:33:17,490 --> 00:33:21,669
constrained language about violations

877
00:33:19,600 --> 00:33:23,260
<font color="#CCCCCC">versus bugs in your code now there are</font>

878
00:33:21,669 --> 00:33:25,720
beliefs you you obviously<font color="#CCCCCC"> will obviously</font>

879
00:33:23,260 --> 00:33:26,830
encounter<font color="#E5E5E5"> bugs at some point you're</font>

880
00:33:25,720 --> 00:33:28,840
gonna<font color="#E5E5E5"> just write something wrong but</font>

881
00:33:26,830 --> 00:33:30,879
you're more looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> okay am I going</font>

882
00:33:28,840 --> 00:33:32,439
to is wherever I'm running actually

883
00:33:30,880 --> 00:33:35,080
<font color="#CCCCCC">allowing</font><font color="#E5E5E5"> constrained language mode or</font>

884
00:33:32,440 --> 00:33:36,940
<font color="#E5E5E5">it's blocked the easiest thing to do</font><font color="#CCCCCC"> is</font>

885
00:33:35,080 --> 00:33:38,678
as you encounter<font color="#E5E5E5"> invalid operations kind</font>

886
00:33:36,940 --> 00:33:40,570
of research<font color="#CCCCCC"> different methods</font><font color="#E5E5E5"> to</font>

887
00:33:38,679 --> 00:33:42,370
complete that specific<font color="#E5E5E5"> task and we'll</font>

888
00:33:40,570 --> 00:33:43,779
look at<font color="#E5E5E5"> this in just a second with</font>

889
00:33:42,370 --> 00:33:47,559
something I ran<font color="#E5E5E5"> into with with me</font><font color="#CCCCCC"> in</font>

890
00:33:43,779 --> 00:33:49,450
<font color="#E5E5E5">plant so following this</font><font color="#CCCCCC"> method this</font><font color="#E5E5E5"> kind</font>

891
00:33:47,559 --> 00:33:51,220
<font color="#E5E5E5">of like test case driven method almost</font>

892
00:33:49,450 --> 00:33:52,480
you guarantee that<font color="#CCCCCC"> you're gonna be</font>

893
00:33:51,220 --> 00:33:54,070
<font color="#E5E5E5">wanting to bang your head against a desk</font>

894
00:33:52,480 --> 00:33:55,480
because every<font color="#E5E5E5"> single other line</font><font color="#CCCCCC"> of code</font>

895
00:33:54,070 --> 00:33:57,189
is<font color="#CCCCCC"> gonna say</font><font color="#E5E5E5"> that this is blocked it's</font>

896
00:33:55,480 --> 00:33:58,270
not allowed<font color="#CCCCCC"> within this mode it's only</font>

897
00:33:57,190 --> 00:34:00,429
<font color="#E5E5E5">allowed in court in the core language</font>

898
00:33:58,270 --> 00:34:01,450
types so you're gonna have<font color="#E5E5E5"> to really</font>

899
00:34:00,429 --> 00:34:04,090
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of follow that hacker</font>

900
00:34:01,450 --> 00:34:06,309
mindset<font color="#E5E5E5"> and try harder because it's</font>

901
00:34:04,090 --> 00:34:07,600
<font color="#CCCCCC">possible you can rewrite your code and</font>

902
00:34:06,309 --> 00:34:09,219
PowerShell to<font color="#E5E5E5"> do almost anything you</font>

903
00:34:07,600 --> 00:34:12,250
<font color="#E5E5E5">want but</font><font color="#CCCCCC"> just gonna take a</font><font color="#E5E5E5"> little bit</font>

904
00:34:09,219 --> 00:34:14,709
time<font color="#CCCCCC"> to figure</font><font color="#E5E5E5"> out how to</font><font color="#CCCCCC"> do that</font><font color="#E5E5E5"> so</font>

905
00:34:12,250 --> 00:34:15,820
again<font color="#E5E5E5"> don't look at don't</font><font color="#CCCCCC"> look to</font>

906
00:34:14,710 --> 00:34:17,440
include c-sharp code within your

907
00:34:15,820 --> 00:34:19,389
<font color="#E5E5E5">powershell script it's very likely to</font><font color="#CCCCCC"> be</font>

908
00:34:17,440 --> 00:34:21,668
blocked<font color="#CCCCCC"> look to recreate the same</font>

909
00:34:19,389 --> 00:34:23,820
functionality<font color="#E5E5E5"> that c-sharp is performing</font>

910
00:34:21,668 --> 00:34:27,279
in pure PowerShell

911
00:34:23,820 --> 00:34:29,260
so what exists so<font color="#CCCCCC"> when we</font><font color="#E5E5E5"> implant is a</font>

912
00:34:27,280 --> 00:34:31,089
<font color="#E5E5E5">power show tool that I wrote which is</font>

913
00:34:29,260 --> 00:34:33,970
fully compliant<font color="#E5E5E5"> in constrained language</font>

914
00:34:31,089 --> 00:34:35,889
mode again<font color="#E5E5E5"> side benefit</font><font color="#CCCCCC"> is it also works</font>

915
00:34:33,969 --> 00:34:38,139
perfectly in full language mode

916
00:34:35,889 --> 00:34:40,029
it was<font color="#E5E5E5"> developed to work on device guard</font>

917
00:34:38,139 --> 00:34:41,710
protected systems<font color="#E5E5E5"> which does have</font>

918
00:34:40,030 --> 00:34:44,370
application whitelisting<font color="#E5E5E5"> enforced and</font>

919
00:34:41,710 --> 00:34:47,050
<font color="#E5E5E5">constrain language mode and forest</font>

920
00:34:44,370 --> 00:34:49,569
so when the implant uses both<font color="#E5E5E5"> powershell</font>

921
00:34:47,050 --> 00:34:51,010
and<font color="#E5E5E5"> WM i and the reason i chose to build</font>

922
00:34:49,570 --> 00:34:53,440
<font color="#E5E5E5">this tool</font><font color="#CCCCCC"> that leverages</font><font color="#E5E5E5"> both of those</font>

923
00:34:51,010 --> 00:34:55,660
either<font color="#E5E5E5"> like either powershell self or</font>

924
00:34:53,440 --> 00:34:59,080
the service with<font color="#CCCCCC"> WMI is because i</font><font color="#E5E5E5"> pretty</font>

925
00:34:55,659 --> 00:35:01,060
much my decision was<font color="#E5E5E5"> I think those are</font>

926
00:34:59,080 --> 00:35:03,250
<font color="#E5E5E5">always going to be allowed on a device</font>

927
00:35:01,060 --> 00:35:05,340
guard or application<font color="#E5E5E5"> whitelisting</font><font color="#CCCCCC"> a</font>

928
00:35:03,250 --> 00:35:08,170
whitelist<font color="#CCCCCC"> and protected system and</font>

929
00:35:05,340 --> 00:35:11,440
generally that<font color="#CCCCCC"> is the case it actually</font>

930
00:35:08,170 --> 00:35:12,580
<font color="#E5E5E5">uses WM I foresee to the means to</font>

931
00:35:11,440 --> 00:35:16,030
trigger an action<font color="#E5E5E5"> on the remote system</font>

932
00:35:12,580 --> 00:35:17,980
<font color="#CCCCCC">and data</font><font color="#E5E5E5"> storage so data storage and</font>

933
00:35:16,030 --> 00:35:19,930
encoding were originally problems that I

934
00:35:17,980 --> 00:35:22,420
had to solve in constrained language

935
00:35:19,930 --> 00:35:25,240
mode so sorry it might<font color="#E5E5E5"> be a little bit</font>

936
00:35:22,420 --> 00:35:27,370
dark to see<font color="#E5E5E5"> this but one</font><font color="#CCCCCC"> thing that I</font>

937
00:35:25,240 --> 00:35:31,089
wanted to have<font color="#CCCCCC"> Winnie implant be able to</font>

938
00:35:27,370 --> 00:35:32,620
do is I needed to encode files<font color="#E5E5E5"> so let's</font>

939
00:35:31,090 --> 00:35:34,840
say I wanted to upload<font color="#E5E5E5"> a file to</font><font color="#CCCCCC"> a</font>

940
00:35:32,620 --> 00:35:36,910
remote system<font color="#E5E5E5"> or download a file from it</font>

941
00:35:34,840 --> 00:35:38,830
what's the standard everyone uses writes

942
00:35:36,910 --> 00:35:40,779
base 64 encoding<font color="#CCCCCC"> that's how you just</font>

943
00:35:38,830 --> 00:35:43,509
select it<font color="#E5E5E5"> so you go to use what everyone</font>

944
00:35:40,780 --> 00:35:45,730
does for encoding<font color="#E5E5E5"> files but as you can</font>

945
00:35:43,510 --> 00:35:47,530
<font color="#CCCCCC">see I can't do that in</font><font color="#E5E5E5"> constrained</font>

946
00:35:45,730 --> 00:35:49,210
language mode it's completely blocked

947
00:35:47,530 --> 00:35:53,080
<font color="#E5E5E5">and it's only allowed in core type so</font>

948
00:35:49,210 --> 00:35:54,970
this<font color="#E5E5E5"> language mode so I actually started</font>

949
00:35:53,080 --> 00:35:56,920
<font color="#E5E5E5">having a discussion with</font><font color="#CCCCCC"> a previous</font>

950
00:35:54,970 --> 00:36:00,520
co-worker Daniel Bohannon who<font color="#E5E5E5"> is awesome</font>

951
00:35:56,920 --> 00:36:02,320
and it's funny<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> sitting with him I</font>

952
00:36:00,520 --> 00:36:04,060
was writing<font color="#E5E5E5"> some code with women</font><font color="#CCCCCC"> plastic</font>

953
00:36:02,320 --> 00:36:05,410
<font color="#CCCCCC">man trying to sell</font><font color="#E5E5E5"> this problem</font><font color="#CCCCCC"> I don't</font>

954
00:36:04,060 --> 00:36:07,060
know exactly<font color="#E5E5E5"> like what the issue is but</font>

955
00:36:05,410 --> 00:36:08,740
<font color="#E5E5E5">it's blocked</font><font color="#CCCCCC"> he's like what's</font><font color="#E5E5E5"> happening</font>

956
00:36:07,060 --> 00:36:10,720
that's<font color="#E5E5E5"> like well I'm trying to figure</font>

957
00:36:08,740 --> 00:36:13,209
<font color="#E5E5E5">out how I can encode data either</font><font color="#CCCCCC"> binary</font>

958
00:36:10,720 --> 00:36:15,580
or text I'm trying to do it within

959
00:36:13,210 --> 00:36:17,410
base64 but it's<font color="#CCCCCC"> completely blocked</font>

960
00:36:15,580 --> 00:36:18,520
within<font color="#CCCCCC"> constrained language moment</font><font color="#E5E5E5"> I was</font>

961
00:36:17,410 --> 00:36:19,600
like<font color="#E5E5E5"> and I'm starting</font><font color="#CCCCCC"> to do this and</font>

962
00:36:18,520 --> 00:36:21,730
<font color="#E5E5E5">like he interrupts um he's like</font><font color="#CCCCCC"> I got it</font>

963
00:36:19,600 --> 00:36:22,509
<font color="#CCCCCC">here like before I even could finish</font>

964
00:36:21,730 --> 00:36:24,340
solving the problem

965
00:36:22,510 --> 00:36:27,930
he actually had a one-liner<font color="#CCCCCC"> that would</font>

966
00:36:24,340 --> 00:36:31,290
just completely<font color="#E5E5E5"> fix this problem so</font>

967
00:36:27,930 --> 00:36:33,850
that's this<font color="#E5E5E5"> also explain what it is</font>

968
00:36:31,290 --> 00:36:36,580
basics<font color="#E5E5E5"> t4</font><font color="#CCCCCC"> or it obviously converts</font>

969
00:36:33,850 --> 00:36:38,140
binary to ASCII at some point well he's

970
00:36:36,580 --> 00:36:40,870
looking<font color="#E5E5E5"> kind of similar but different</font>

971
00:36:38,140 --> 00:36:42,339
approach if I what this says that<font color="#E5E5E5"> this</font>

972
00:36:40,870 --> 00:36:44,799
is<font color="#E5E5E5"> just a string right here and says</font>

973
00:36:42,340 --> 00:36:47,199
<font color="#E5E5E5">this is just sampled data I'm storing</font>

974
00:36:44,800 --> 00:36:50,049
that strength within<font color="#E5E5E5"> this test data</font>

975
00:36:47,199 --> 00:36:52,599
well what I'm<font color="#E5E5E5"> doing now is</font><font color="#CCCCCC"> I'm taking</font>

976
00:36:50,049 --> 00:36:54,788
each character<font color="#E5E5E5"> and taking the character</font>

977
00:36:52,599 --> 00:36:57,669
array of characters<font color="#CCCCCC"> and converting each</font>

978
00:36:54,789 --> 00:37:00,069
character into an integer<font color="#E5E5E5"> and then that</font>

979
00:36:57,669 --> 00:37:03,009
integer<font color="#E5E5E5"> is</font><font color="#CCCCCC"> then comma separated and can</font>

980
00:37:00,069 --> 00:37:04,929
<font color="#E5E5E5">cap and join together into one string so</font>

981
00:37:03,009 --> 00:37:08,469
what does<font color="#CCCCCC"> that</font><font color="#E5E5E5"> look like that's actually</font>

982
00:37:04,929 --> 00:37:12,159
this<font color="#E5E5E5"> so like this is just sample data</font>

983
00:37:08,469 --> 00:37:15,069
that's the T that's<font color="#E5E5E5"> the H it's the I s</font>

984
00:37:12,159 --> 00:37:19,349
<font color="#E5E5E5">that 32 is the space so you'll see like</font>

985
00:37:15,069 --> 00:37:23,109
32<font color="#E5E5E5"> they're</font><font color="#CCCCCC"> there they're there so</font>

986
00:37:19,349 --> 00:37:26,079
<font color="#CCCCCC">basically you</font><font color="#E5E5E5"> can take just letters and</font>

987
00:37:23,109 --> 00:37:27,969
convert them to<font color="#E5E5E5"> the integer value store</font>

988
00:37:26,079 --> 00:37:29,949
that as a are converted to<font color="#CCCCCC"> a string</font>

989
00:37:27,969 --> 00:37:31,869
which is<font color="#E5E5E5"> an allowed data type under</font>

990
00:37:29,949 --> 00:37:35,709
constrained language mode and just shove

991
00:37:31,869 --> 00:37:38,140
it in<font color="#E5E5E5"> this comma separated array and you</font>

992
00:37:35,709 --> 00:37:40,178
now<font color="#CCCCCC"> have an encoding mechanism you can</font>

993
00:37:38,140 --> 00:37:41,769
<font color="#CCCCCC">do the same exact thing with bytes</font><font color="#E5E5E5"> so</font>

994
00:37:40,179 --> 00:37:43,719
this is<font color="#E5E5E5"> just a character for doing it to</font>

995
00:37:41,769 --> 00:37:45,879
a string<font color="#E5E5E5"> but if you read in the contents</font>

996
00:37:43,719 --> 00:37:48,909
of a binary file you can follow this

997
00:37:45,880 --> 00:37:51,669
same process<font color="#E5E5E5"> and convert</font><font color="#CCCCCC"> your byte array</font>

998
00:37:48,909 --> 00:37:55,959
into an integer<font color="#E5E5E5"> array and you can get</font>

999
00:37:51,669 --> 00:37:57,848
your binary<font color="#E5E5E5"> file into this format this</font>

1000
00:37:55,959 --> 00:38:00,029
is allowed<font color="#CCCCCC"> and</font><font color="#E5E5E5"> constrained language mode</font>

1001
00:37:57,849 --> 00:38:02,169
so is where I was<font color="#E5E5E5"> kind of talking</font><font color="#CCCCCC"> about</font>

1002
00:38:00,029 --> 00:38:04,029
<font color="#E5E5E5">you're trying to solve one problem</font>

1003
00:38:02,169 --> 00:38:05,199
that's<font color="#E5E5E5"> going to be blocked and try to</font>

1004
00:38:04,029 --> 00:38:05,890
figure<font color="#E5E5E5"> out is there</font><font color="#CCCCCC"> a different way to</font>

1005
00:38:05,199 --> 00:38:07,539
approach<font color="#CCCCCC"> it</font>

1006
00:38:05,890 --> 00:38:11,439
a different way to<font color="#E5E5E5"> solve essentially the</font>

1007
00:38:07,539 --> 00:38:13,150
<font color="#E5E5E5">same issue oh and there we go actually</font>

1008
00:38:11,439 --> 00:38:16,959
just set everything<font color="#E5E5E5"> that I just said</font><font color="#CCCCCC"> on</font>

1009
00:38:13,150 --> 00:38:19,359
<font color="#CCCCCC">the</font><font color="#E5E5E5"> slide so next up kind</font><font color="#CCCCCC"> of an old dog</font>

1010
00:38:16,959 --> 00:38:21,759
<font color="#CCCCCC">an old trick in a new way so I wanted</font><font color="#E5E5E5"> to</font>

1011
00:38:19,359 --> 00:38:24,549
<font color="#E5E5E5">try</font><font color="#CCCCCC"> to solve the</font><font color="#E5E5E5"> base64 encoding problem</font>

1012
00:38:21,759 --> 00:38:26,319
because<font color="#E5E5E5"> that worked but I wanted to</font>

1013
00:38:24,549 --> 00:38:28,029
figure<font color="#E5E5E5"> out</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> we actually get big 64</font>

1014
00:38:26,319 --> 00:38:29,859
<font color="#E5E5E5">encoding you're working</font><font color="#CCCCCC"> I wanted to</font>

1015
00:38:28,029 --> 00:38:31,689
learn<font color="#E5E5E5"> okay if we're gonna do this I have</font>

1016
00:38:29,859 --> 00:38:33,219
<font color="#E5E5E5">to actually learn how to space 64 work</font>

1017
00:38:31,689 --> 00:38:35,109
which it's funny because something<font color="#E5E5E5"> you</font>

1018
00:38:33,219 --> 00:38:37,019
take advantage<font color="#E5E5E5"> of and</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> simple</font>

1019
00:38:35,109 --> 00:38:40,089
<font color="#CCCCCC">but it's interesting to look</font><font color="#E5E5E5"> at</font>

1020
00:38:37,019 --> 00:38:41,258
<font color="#E5E5E5">according</font><font color="#CCCCCC"> to RFC and</font><font color="#E5E5E5"> this document or</font>

1021
00:38:40,089 --> 00:38:45,099
this<font color="#CCCCCC"> screenshot</font><font color="#E5E5E5"> is actually from</font>

1022
00:38:41,259 --> 00:38:47,349
Wikipedia<font color="#E5E5E5"> this is the base64 table the</font>

1023
00:38:45,099 --> 00:38:50,319
way this works is whenever you get<font color="#CCCCCC"> a</font>

1024
00:38:47,349 --> 00:38:53,439
<font color="#CCCCCC">value such as one</font><font color="#E5E5E5"> that one is always</font>

1025
00:38:50,319 --> 00:38:56,739
equal<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> uppercase</font><font color="#E5E5E5"> B letter V of</font><font color="#CCCCCC"> 0</font>

1026
00:38:53,439 --> 00:38:59,618
<font color="#E5E5E5">its uppercase a if you have 21 its</font><font color="#CCCCCC"> upper</font>

1027
00:38:56,739 --> 00:39:00,140
<font color="#CCCCCC">case V so use correspond whatever value</font>

1028
00:38:59,619 --> 00:39:04,460
that<font color="#CCCCCC"> you're</font>

1029
00:39:00,140 --> 00:39:06,170
not with the letter in<font color="#CCCCCC"> this chart</font><font color="#E5E5E5"> so</font>

1030
00:39:04,460 --> 00:39:09,110
it's kind of simple<font color="#CCCCCC"> the way it works is</font>

1031
00:39:06,170 --> 00:39:10,700
you<font color="#CCCCCC"> take</font><font color="#E5E5E5"> three bytes at a time</font><font color="#CCCCCC"> so let's</font>

1032
00:39:09,110 --> 00:39:13,610
say in the example<font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> give</font>

1033
00:39:10,700 --> 00:39:15,439
it's just using the<font color="#E5E5E5"> word man</font><font color="#CCCCCC"> Capital m I</font>

1034
00:39:13,610 --> 00:39:19,430
believe lowercase a and<font color="#CCCCCC"> a lowercase n</font>

1035
00:39:15,440 --> 00:39:21,950
and so<font color="#CCCCCC"> it takes</font><font color="#E5E5E5"> those letters converse</font>

1036
00:39:19,430 --> 00:39:23,330
them into<font color="#E5E5E5"> their equivalent in fights so</font>

1037
00:39:21,950 --> 00:39:25,609
we're looking<font color="#CCCCCC"> at eight bits</font><font color="#E5E5E5"> for each</font>

1038
00:39:23,330 --> 00:39:29,720
letter so<font color="#E5E5E5"> we have 24 different bits</font>

1039
00:39:25,610 --> 00:39:33,500
<font color="#E5E5E5">total it then takes those 24 bits and</font>

1040
00:39:29,720 --> 00:39:36,759
splits them into<font color="#CCCCCC"> six bit chunks so now</font>

1041
00:39:33,500 --> 00:39:39,170
we have<font color="#CCCCCC"> four six bit chunks better than</font>

1042
00:39:36,760 --> 00:39:40,040
that<font color="#E5E5E5"> are that we have</font><font color="#CCCCCC"> based off</font><font color="#E5E5E5"> with</font>

1043
00:39:39,170 --> 00:39:42,680
<font color="#E5E5E5">letter</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> encoding</font>

1044
00:39:40,040 --> 00:39:44,779
once we do that<font color="#E5E5E5"> we convert that</font><font color="#CCCCCC"> binary</font>

1045
00:39:42,680 --> 00:39:46,850
<font color="#E5E5E5">into those letters and you have a base64</font>

1046
00:39:44,780 --> 00:39:49,430
<font color="#E5E5E5">encoded value</font><font color="#CCCCCC"> it's kind of abstract like</font>

1047
00:39:46,850 --> 00:39:51,020
what does<font color="#E5E5E5"> that mean here's an example so</font>

1048
00:39:49,430 --> 00:39:52,850
again let's say the source text<font color="#CCCCCC"> that</font>

1049
00:39:51,020 --> 00:39:55,910
we're trying to<font color="#E5E5E5"> convert into base64 is</font>

1050
00:39:52,850 --> 00:39:58,850
this as the word man<font color="#CCCCCC"> capital M lowercase</font>

1051
00:39:55,910 --> 00:40:01,640
a lowercase<font color="#E5E5E5"> M here are the</font><font color="#CCCCCC"> eight bits</font>

1052
00:39:58,850 --> 00:40:04,430
<font color="#CCCCCC">for M</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> eight bits</font><font color="#E5E5E5"> for a and the 8</font>

1053
00:40:01,640 --> 00:40:07,190
bits for<font color="#E5E5E5"> n but what we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is</font>

1054
00:40:04,430 --> 00:40:10,069
split these up<font color="#E5E5E5"> into four six bit chunks</font>

1055
00:40:07,190 --> 00:40:12,620
so<font color="#CCCCCC"> here's</font><font color="#E5E5E5"> the first six bits over here's</font>

1056
00:40:10,070 --> 00:40:15,410
<font color="#E5E5E5">the next six bits the next six bits and</font>

1057
00:40:12,620 --> 00:40:17,660
the next one so the next<font color="#CCCCCC"> step is</font><font color="#E5E5E5"> okay of</font>

1058
00:40:15,410 --> 00:40:20,629
this six bits<font color="#E5E5E5"> in binary what does that</font>

1059
00:40:17,660 --> 00:40:25,009
equal in base<font color="#CCCCCC"> 10 so in this case it's 19</font>

1060
00:40:20,630 --> 00:40:28,460
this group is 22<font color="#E5E5E5"> this</font><font color="#CCCCCC"> one is 5</font><font color="#E5E5E5"> excuse me</font>

1061
00:40:25,010 --> 00:40:30,620
this one's 46<font color="#E5E5E5"> so if we go back</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> look</font>

1062
00:40:28,460 --> 00:40:34,690
<font color="#E5E5E5">at the previous chart</font><font color="#CCCCCC"> so for like 19 and</font>

1063
00:40:30,620 --> 00:40:38,150
<font color="#E5E5E5">22 we can correlate and fine there's</font><font color="#CCCCCC"> T</font>

1064
00:40:34,690 --> 00:40:40,520
there's<font color="#E5E5E5"> W so it's the same process</font><font color="#CCCCCC"> for</font>

1065
00:40:38,150 --> 00:40:42,080
the<font color="#CCCCCC"> rest</font><font color="#E5E5E5"> of these that gives and that is</font>

1066
00:40:40,520 --> 00:40:44,300
actually<font color="#CCCCCC"> how</font><font color="#E5E5E5"> you do page 64 encoding</font>

1067
00:40:42,080 --> 00:40:47,180
<font color="#CCCCCC">it's just splitting these bits into</font>

1068
00:40:44,300 --> 00:40:50,270
<font color="#E5E5E5">smaller groups of bits and determining</font>

1069
00:40:47,180 --> 00:40:52,669
<font color="#E5E5E5">what the value</font><font color="#CCCCCC"> is so the next question</font>

1070
00:40:50,270 --> 00:40:54,140
is<font color="#CCCCCC"> what happen if you don't</font><font color="#E5E5E5"> have like</font>

1071
00:40:52,670 --> 00:40:56,480
enough<font color="#E5E5E5"> bits like if</font><font color="#CCCCCC"> you run to</font><font color="#E5E5E5"> the end</font>

1072
00:40:54,140 --> 00:41:00,109
of your string<font color="#E5E5E5"> you don't have three just</font>

1073
00:40:56,480 --> 00:41:02,660
full bits to complete this well<font color="#E5E5E5"> basics</font>

1074
00:41:00,110 --> 00:41:06,200
<font color="#CCCCCC">t4 pads it out</font><font color="#E5E5E5"> so it basically assumes</font>

1075
00:41:02,660 --> 00:41:07,370
the rest of these<font color="#E5E5E5"> are zeros because so</font>

1076
00:41:06,200 --> 00:41:09,620
<font color="#CCCCCC">here's in this</font><font color="#E5E5E5"> case we're just</font><font color="#CCCCCC"> doing</font>

1077
00:41:07,370 --> 00:41:12,589
just<font color="#E5E5E5"> the letter M</font><font color="#CCCCCC"> here's that first</font>

1078
00:41:09,620 --> 00:41:14,069
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> bits and we can see we again we</font>

1079
00:41:12,590 --> 00:41:15,570
<font color="#E5E5E5">get that 19 value back</font>

1080
00:41:14,070 --> 00:41:18,450
but because the rest of this is just

1081
00:41:15,570 --> 00:41:20,070
<font color="#CCCCCC">empty</font><font color="#E5E5E5"> it'll pad this out to zero and so</font>

1082
00:41:18,450 --> 00:41:23,759
all<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> values</font><font color="#E5E5E5"> are 0 and so this</font>

1083
00:41:20,070 --> 00:41:25,440
binary<font color="#E5E5E5"> value is equal to 16 well the</font>

1084
00:41:23,760 --> 00:41:27,480
rest of these<font color="#E5E5E5"> when you do base64</font>

1085
00:41:25,440 --> 00:41:29,250
encoding that's why you<font color="#E5E5E5"> get equal</font><font color="#CCCCCC"> sign</font>

1086
00:41:27,480 --> 00:41:32,040
<font color="#E5E5E5">it's because there's literally nothing</font>

1087
00:41:29,250 --> 00:41:36,030
even there<font color="#CCCCCC"> so you don't</font><font color="#E5E5E5"> pad out to 0 and</font>

1088
00:41:32,040 --> 00:41:38,370
get a like it<font color="#E5E5E5"> doesn't work that</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> if</font>

1089
00:41:36,030 --> 00:41:40,320
you just<font color="#E5E5E5"> actually have</font><font color="#CCCCCC"> 6 bits of where</font>

1090
00:41:38,370 --> 00:41:42,569
there's literally nothing<font color="#CCCCCC"> that's where</font>

1091
00:41:40,320 --> 00:41:45,540
your padding character with base64 comes

1092
00:41:42,570 --> 00:41:47,250
in<font color="#E5E5E5"> and you get this equal</font><font color="#CCCCCC"> sum so</font><font color="#E5E5E5"> that's</font>

1093
00:41:45,540 --> 00:41:50,670
why with this<font color="#E5E5E5"> value just the letter M</font>

1094
00:41:47,250 --> 00:41:56,730
<font color="#E5E5E5">the equivalent base64 encoded value is</font>

1095
00:41:50,670 --> 00:41:58,530
capital<font color="#CCCCCC"> T capital Q equals equals to</font>

1096
00:41:56,730 --> 00:42:00,960
validate<font color="#E5E5E5"> that if we just open</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> like</font>

1097
00:41:58,530 --> 00:42:04,050
Python 3 you can see it's important page

1098
00:42:00,960 --> 00:42:08,940
64 telling it<font color="#CCCCCC"> to encode the string</font><font color="#E5E5E5"> man</font>

1099
00:42:04,050 --> 00:42:10,890
and there's that same<font color="#CCCCCC"> value</font><font color="#E5E5E5"> twf you</font><font color="#CCCCCC"> all</font>

1100
00:42:08,940 --> 00:42:11,550
<font color="#CCCCCC">right well let's figure out</font><font color="#E5E5E5"> how to solve</font>

1101
00:42:10,890 --> 00:42:14,370
this<font color="#E5E5E5"> problem</font>

1102
00:42:11,550 --> 00:42:17,520
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> actually again was talking about</font>

1103
00:42:14,370 --> 00:42:20,520
<font color="#E5E5E5">this with Daniel Hannan and we figured</font>

1104
00:42:17,520 --> 00:42:24,150
<font color="#E5E5E5">out it's</font><font color="#CCCCCC"> possible to do this so the</font><font color="#E5E5E5"> way</font>

1105
00:42:20,520 --> 00:42:26,520
<font color="#CCCCCC">that this us basically script will work</font>

1106
00:42:24,150 --> 00:42:28,980
is you can provide it the string that

1107
00:42:26,520 --> 00:42:30,570
you<font color="#CCCCCC"> want it to encode and first thing</font>

1108
00:42:28,980 --> 00:42:31,800
that it'll do is it'll if you provide an

1109
00:42:30,570 --> 00:42:33,390
alphabet which we'll get to in<font color="#CCCCCC"> just a</font>

1110
00:42:31,800 --> 00:42:36,510
second<font color="#E5E5E5"> it will validate</font><font color="#CCCCCC"> that the</font>

1111
00:42:33,390 --> 00:42:39,060
<font color="#E5E5E5">alphabet you're providing is correct and</font>

1112
00:42:36,510 --> 00:42:41,130
it'll go<font color="#E5E5E5"> from there after</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> next</font>

1113
00:42:39,060 --> 00:42:43,170
step<font color="#E5E5E5"> is if you want to</font><font color="#CCCCCC"> Inc base64</font><font color="#E5E5E5"> encode</font>

1114
00:42:41,130 --> 00:42:44,460
a string you just provide a string and

1115
00:42:43,170 --> 00:42:46,620
<font color="#E5E5E5">that's what this code</font><font color="#CCCCCC"> does is</font><font color="#E5E5E5"> it figures</font>

1116
00:42:44,460 --> 00:42:48,810
out are we actually<font color="#CCCCCC"> encoding a string or</font>

1117
00:42:46,620 --> 00:42:51,540
we encoding a binary<font color="#E5E5E5"> file</font><font color="#CCCCCC"> the reason we</font>

1118
00:42:48,810 --> 00:42:53,250
care about<font color="#E5E5E5"> that is because when we do um</font>

1119
00:42:51,540 --> 00:42:55,080
how we interact<font color="#E5E5E5"> with the data when you</font>

1120
00:42:53,250 --> 00:42:58,710
know if it's<font color="#E5E5E5"> like an ASCII value or if</font>

1121
00:42:55,080 --> 00:43:00,630
it's a byte so here's where we<font color="#CCCCCC"> actually</font>

1122
00:42:58,710 --> 00:43:03,330
<font color="#CCCCCC">are doing</font><font color="#E5E5E5"> that math to figure out what</font>

1123
00:43:00,630 --> 00:43:05,370
is but of the<font color="#E5E5E5"> six digits when we break</font>

1124
00:43:03,330 --> 00:43:07,259
up<font color="#CCCCCC"> three bytes</font><font color="#E5E5E5"> and break it out into</font>

1125
00:43:05,370 --> 00:43:10,170
<font color="#CCCCCC">four</font><font color="#E5E5E5"> groups of six bits</font>

1126
00:43:07,260 --> 00:43:13,200
what is that base64 corresponding value

1127
00:43:10,170 --> 00:43:15,900
<font color="#E5E5E5">so this is saying if it's not 0 0 0 0</font>

1128
00:43:13,200 --> 00:43:18,899
<font color="#CCCCCC">then figure out</font><font color="#E5E5E5"> the value if it is 0 0 0</font>

1129
00:43:15,900 --> 00:43:20,820
0<font color="#E5E5E5"> we already know that that about</font><font color="#CCCCCC"> zero</font>

1130
00:43:18,900 --> 00:43:23,430
is always<font color="#CCCCCC"> equal to</font><font color="#E5E5E5"> a so it's just</font>

1131
00:43:20,820 --> 00:43:26,430
<font color="#CCCCCC">setting that there this convert to</font>

1132
00:43:23,430 --> 00:43:26,799
decimal<font color="#CCCCCC"> command</font><font color="#E5E5E5"> late</font><font color="#CCCCCC"> we'll go ahead and</font>

1133
00:43:26,430 --> 00:43:29,678
<font color="#CCCCCC">can</font>

1134
00:43:26,799 --> 00:43:31,569
<font color="#CCCCCC">Verte</font><font color="#E5E5E5"> this value into this decimal value</font>

1135
00:43:29,679 --> 00:43:33,339
<font color="#CCCCCC">the</font><font color="#E5E5E5"> binary value</font><font color="#CCCCCC"> into a decimal</font><font color="#E5E5E5"> value</font>

1136
00:43:31,569 --> 00:43:35,619
and then<font color="#E5E5E5"> we can look at the</font>

1137
00:43:33,339 --> 00:43:39,729
corresponding<font color="#E5E5E5"> base64 chart to figure out</font>

1138
00:43:35,619 --> 00:43:43,239
ok does 24 equals<font color="#E5E5E5"> capital T or what is</font>

1139
00:43:39,729 --> 00:43:45,578
it so here's kind<font color="#E5E5E5"> of same process is</font>

1140
00:43:43,239 --> 00:43:47,259
<font color="#E5E5E5">still going through we're actually in</font>

1141
00:43:45,579 --> 00:43:49,239
this part<font color="#E5E5E5"> of the code is</font><font color="#CCCCCC"> trying to look</font>

1142
00:43:47,259 --> 00:43:51,130
is there<font color="#E5E5E5"> any padding associated that we</font>

1143
00:43:49,239 --> 00:43:53,829
need or<font color="#CCCCCC"> that we need to</font><font color="#E5E5E5"> provide to</font><font color="#CCCCCC"> the</font>

1144
00:43:51,130 --> 00:43:56,229
string<font color="#E5E5E5"> that we're trying to encode if we</font>

1145
00:43:53,829 --> 00:43:57,609
split<font color="#E5E5E5"> it into those</font><font color="#CCCCCC"> six bit chunks or we</font>

1146
00:43:56,229 --> 00:44:00,459
just empty at any point where we need to

1147
00:43:57,609 --> 00:44:02,679
<font color="#E5E5E5">add or remove that exclamation excuse me</font>

1148
00:44:00,459 --> 00:44:05,649
the equal<font color="#E5E5E5"> sign for padding that's that</font>

1149
00:44:02,679 --> 00:44:08,679
we would need in our<font color="#E5E5E5"> string so old dog</font>

1150
00:44:05,650 --> 00:44:10,630
new trick<font color="#CCCCCC"> here's again</font><font color="#E5E5E5"> showing that we</font>

1151
00:44:08,679 --> 00:44:15,880
<font color="#E5E5E5">are now in</font><font color="#CCCCCC"> constrained language mode the</font>

1152
00:44:10,630 --> 00:44:18,579
easy way to now go from base<font color="#E5E5E5"> 2 to</font><font color="#CCCCCC"> base</font>

1153
00:44:15,880 --> 00:44:20,229
10 math and figure out what value do<font color="#E5E5E5"> we</font>

1154
00:44:18,579 --> 00:44:21,789
need to find<font color="#CCCCCC"> that</font><font color="#E5E5E5"> base 64 encoded chart</font>

1155
00:44:20,229 --> 00:44:24,578
would be to do<font color="#CCCCCC"> this we're doing to</font>

1156
00:44:21,789 --> 00:44:26,019
convert to<font color="#E5E5E5"> in 32 we have</font><font color="#CCCCCC"> six ones right</font>

1157
00:44:24,579 --> 00:44:28,689
here<font color="#E5E5E5"> and it's telling it hey right now</font>

1158
00:44:26,019 --> 00:44:30,160
<font color="#E5E5E5">that's currently in base</font><font color="#CCCCCC"> two well that</font>

1159
00:44:28,689 --> 00:44:31,569
is actually<font color="#E5E5E5"> again blocked and</font>

1160
00:44:30,160 --> 00:44:35,678
constrained language mode we can't just

1161
00:44:31,569 --> 00:44:37,808
convert binary to base<font color="#CCCCCC"> 10 using this</font>

1162
00:44:35,679 --> 00:44:39,880
convert<font color="#CCCCCC"> two and</font><font color="#E5E5E5"> 32 chameleon because</font>

1163
00:44:37,809 --> 00:44:41,469
somewhere<font color="#CCCCCC"> along the way it's using a</font>

1164
00:44:39,880 --> 00:44:43,539
<font color="#E5E5E5">restricted data or a data type</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font>

1165
00:44:41,469 --> 00:44:47,589
not explicitly allowed in<font color="#CCCCCC"> constrain</font>

1166
00:44:43,539 --> 00:44:50,709
language mode so another way<font color="#E5E5E5"> to do this</font>

1167
00:44:47,589 --> 00:44:53,019
is this part right<font color="#CCCCCC"> here where</font><font color="#E5E5E5"> basically</font>

1168
00:44:50,709 --> 00:44:54,669
<font color="#E5E5E5">we are setting the powers up within this</font>

1169
00:44:53,019 --> 00:44:58,598
code block we're telling it figured<font color="#E5E5E5"> out</font>

1170
00:44:54,670 --> 00:45:02,709
that the<font color="#CCCCCC"> value so 1 2 4 8</font><font color="#E5E5E5"> 16 32 64 128</font>

1171
00:44:58,599 --> 00:45:05,199
<font color="#E5E5E5">and based</font><font color="#CCCCCC"> upon the base 2 value that's</font>

1172
00:45:02,709 --> 00:45:06,939
sent<font color="#CCCCCC"> into this command line</font><font color="#E5E5E5"> this cost</font>

1173
00:45:05,199 --> 00:45:09,279
<font color="#CCCCCC">some function that will actually go</font>

1174
00:45:06,939 --> 00:45:11,769
ahead<font color="#E5E5E5"> and return the decimal value</font><font color="#CCCCCC"> it's</font>

1175
00:45:09,279 --> 00:45:13,599
doing<font color="#E5E5E5"> this by looping this over and</font>

1176
00:45:11,769 --> 00:45:15,640
going<font color="#E5E5E5"> passing each object into a for</font>

1177
00:45:13,599 --> 00:45:19,660
each<font color="#CCCCCC"> object and</font><font color="#E5E5E5"> determining the base</font><font color="#CCCCCC"> 10</font>

1178
00:45:15,640 --> 00:45:21,699
value this<font color="#E5E5E5"> will 100% work in PowerShell</font>

1179
00:45:19,660 --> 00:45:24,098
<font color="#CCCCCC">constraint language mode which does the</font>

1180
00:45:21,699 --> 00:45:28,719
exact same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> as this</font><font color="#E5E5E5"> which does not</font>

1181
00:45:24,099 --> 00:45:31,539
<font color="#CCCCCC">work in</font><font color="#E5E5E5"> constraint language mode so for</font>

1182
00:45:28,719 --> 00:45:34,059
example if I am now operating constraint

1183
00:45:31,539 --> 00:45:37,089
language<font color="#CCCCCC"> mode we can see here</font><font color="#E5E5E5"> if I</font><font color="#CCCCCC"> take</font>

1184
00:45:34,059 --> 00:45:39,990
this<font color="#E5E5E5"> PowerShell script that</font><font color="#CCCCCC"> I created</font>

1185
00:45:37,089 --> 00:45:42,810
and run convert to base<font color="#E5E5E5"> 64</font>

1186
00:45:39,990 --> 00:45:46,229
I tell if<font color="#E5E5E5"> the string is man I kneel now</font>

1187
00:45:42,810 --> 00:45:49,619
get that<font color="#CCCCCC"> TW fu value if I want to</font>

1188
00:45:46,230 --> 00:45:52,050
convert<font color="#CCCCCC"> from base64</font><font color="#E5E5E5"> and use the strain</font>

1189
00:45:49,619 --> 00:45:55,260
and also provide what the basics<font color="#CCCCCC"> for</font>

1190
00:45:52,050 --> 00:45:58,260
encoded value<font color="#E5E5E5"> is TW fu</font><font color="#CCCCCC"> I can now get</font><font color="#E5E5E5"> man</font>

1191
00:45:55,260 --> 00:46:00,750
out so this<font color="#E5E5E5"> is able to do base64</font>

1192
00:45:58,260 --> 00:46:02,220
encoding and decoding<font color="#E5E5E5"> purely with the</font>

1193
00:46:00,750 --> 00:46:06,150
<font color="#CCCCCC">constraint link</font><font color="#E5E5E5"> constraint language mode</font>

1194
00:46:02,220 --> 00:46:07,680
when it's normally blocked one extra

1195
00:46:06,150 --> 00:46:09,630
thing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this can do which i think is</font>

1196
00:46:07,680 --> 00:46:11,640
kind of unique<font color="#E5E5E5"> is so we kind of</font><font color="#CCCCCC"> i talked</font>

1197
00:46:09,630 --> 00:46:14,100
<font color="#CCCCCC">about let</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> showed an</font><font color="#E5E5E5"> image of what</font>

1198
00:46:11,640 --> 00:46:15,839
base64 chart looks like on<font color="#CCCCCC"> wikipedia</font>

1199
00:46:14,100 --> 00:46:18,720
<font color="#E5E5E5">right like there's known values</font>

1200
00:46:15,840 --> 00:46:22,020
associated with<font color="#E5E5E5"> 0 0</font><font color="#CCCCCC"> is always</font><font color="#E5E5E5"> a I</font>

1201
00:46:18,720 --> 00:46:25,169
<font color="#E5E5E5">believe</font><font color="#CCCCCC"> 1 is always</font><font color="#E5E5E5"> capital B but that's</font>

1202
00:46:22,020 --> 00:46:27,240
the standard<font color="#E5E5E5"> base 64 encoded encoding</font>

1203
00:46:25,170 --> 00:46:28,970
chart well that's what they<font color="#CCCCCC"> call like</font>

1204
00:46:27,240 --> 00:46:32,700
the standard basis for<font color="#E5E5E5"> encoding alphabet</font>

1205
00:46:28,970 --> 00:46:35,250
what this script<font color="#E5E5E5"> lets you do is you can</font>

1206
00:46:32,700 --> 00:46:38,759
provide an alternate alphabet so you can

1207
00:46:35,250 --> 00:46:42,810
say hey I want the value<font color="#CCCCCC"> of 0 to always</font>

1208
00:46:38,760 --> 00:46:45,869
equal C<font color="#E5E5E5"> I want the value of 1 to always</font>

1209
00:46:42,810 --> 00:46:49,560
equal at sign<font color="#E5E5E5"> so if that's normally not</font>

1210
00:46:45,869 --> 00:46:51,600
within the<font color="#CCCCCC"> base64 encoding chart</font><font color="#E5E5E5"> now why</font>

1211
00:46:49,560 --> 00:46:53,580
is this interesting<font color="#CCCCCC"> it's interesting</font>

1212
00:46:51,600 --> 00:46:55,440
because there are a<font color="#E5E5E5"> lot of tools out</font>

1213
00:46:53,580 --> 00:46:57,509
there and<font color="#E5E5E5"> software that's designed so</font>

1214
00:46:55,440 --> 00:47:00,030
<font color="#CCCCCC">anytime it thinks it sees base64 encoded</font>

1215
00:46:57,510 --> 00:47:01,740
data<font color="#E5E5E5"> it tries to decode</font><font color="#CCCCCC"> it and determine</font>

1216
00:47:00,030 --> 00:47:03,540
what<font color="#E5E5E5"> the</font><font color="#CCCCCC"> actual data is that's being</font>

1217
00:47:01,740 --> 00:47:05,069
encoded<font color="#E5E5E5"> and make some sort of</font><font color="#CCCCCC"> judgement</font>

1218
00:47:03,540 --> 00:47:08,550
it's malicious<font color="#E5E5E5"> is it's not what type of</font>

1219
00:47:05,070 --> 00:47:10,350
data<font color="#E5E5E5"> is this and so forth this you are</font>

1220
00:47:08,550 --> 00:47:12,330
now essentially breaking<font color="#E5E5E5"> these automated</font>

1221
00:47:10,350 --> 00:47:13,319
<font color="#E5E5E5">systems now this is not in any way</font><font color="#CCCCCC"> a</font>

1222
00:47:12,330 --> 00:47:16,470
<font color="#CCCCCC">roadblock</font>

1223
00:47:13,320 --> 00:47:18,480
<font color="#CCCCCC">any skilled person doesn't need</font><font color="#E5E5E5"> to be</font>

1224
00:47:16,470 --> 00:47:21,060
reverse or any person that<font color="#E5E5E5"> is just</font>

1225
00:47:18,480 --> 00:47:24,030
looking at PowerShell code<font color="#E5E5E5"> can slowly</font>

1226
00:47:21,060 --> 00:47:26,340
like follow along steps<font color="#CCCCCC"> to</font><font color="#E5E5E5"> manually</font>

1227
00:47:24,030 --> 00:47:28,410
figure this out<font color="#E5E5E5"> but what this does is</font>

1228
00:47:26,340 --> 00:47:32,060
allows<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to specify an alternate</font>

1229
00:47:28,410 --> 00:47:35,368
alphabet and like<font color="#CCCCCC"> Imus showed before</font>

1230
00:47:32,060 --> 00:47:37,680
this section of the code block will

1231
00:47:35,369 --> 00:47:40,410
actually validate<font color="#E5E5E5"> is this a valid</font>

1232
00:47:37,680 --> 00:47:43,830
alternate alphabet is every unique<font color="#CCCCCC"> as</font>

1233
00:47:40,410 --> 00:47:46,379
every value and character value<font color="#E5E5E5"> unique</font>

1234
00:47:43,830 --> 00:47:47,819
if it's not unique<font color="#E5E5E5"> it will not allow you</font>

1235
00:47:46,380 --> 00:47:50,520
to<font color="#E5E5E5"> use that alternate alphabet and we'll</font>

1236
00:47:47,820 --> 00:47:53,150
stick with the<font color="#E5E5E5"> standard RFC basics to</font>

1237
00:47:50,520 --> 00:47:53,150
form co2<font color="#CCCCCC"> value</font>

1238
00:47:54,700 --> 00:48:01,089
<font color="#E5E5E5">all right so let's give a quick demo</font><font color="#CCCCCC"> of</font>

1239
00:47:57,800 --> 00:48:01,090
<font color="#CCCCCC">what that looks like</font>

1240
00:48:06,840 --> 00:48:10,930
they want<font color="#E5E5E5"> to run kind of the same thing</font>

1241
00:48:09,100 --> 00:48:12,310
as we did<font color="#CCCCCC"> in</font><font color="#E5E5E5"> screenshots but here we're</font>

1242
00:48:10,930 --> 00:48:14,109
just<font color="#CCCCCC"> doing host run</font><font color="#E5E5E5"> space language mode</font>

1243
00:48:12,310 --> 00:48:16,720
we can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> constrained language</font>

1244
00:48:14,110 --> 00:48:18,310
mode<font color="#E5E5E5"> our kind of hello world test for</font>

1245
00:48:16,720 --> 00:48:20,379
<font color="#E5E5E5">that is let's try to do a square root of</font>

1246
00:48:18,310 --> 00:48:22,060
<font color="#E5E5E5">nine in this case it's going to fail</font>

1247
00:48:20,380 --> 00:48:25,450
again<font color="#E5E5E5"> because it's not supported in</font>

1248
00:48:22,060 --> 00:48:28,480
<font color="#CCCCCC">constrained language mode so now we're</font>

1249
00:48:25,450 --> 00:48:30,189
<font color="#CCCCCC">gonna use the PowerShell code that we</font>

1250
00:48:28,480 --> 00:48:32,800
just created<font color="#E5E5E5"> this case we're going to</font>

1251
00:48:30,190 --> 00:48:34,300
convert<font color="#E5E5E5"> to basics T for string</font><font color="#CCCCCC"> I think</font>

1252
00:48:32,800 --> 00:48:36,070
have<font color="#E5E5E5"> like oh yeah string for north of</font>

1253
00:48:34,300 --> 00:48:38,380
<font color="#E5E5E5">besides</font><font color="#CCCCCC"> I guess</font><font color="#E5E5E5"> that in this case and so</font>

1254
00:48:36,070 --> 00:48:40,420
let's convert<font color="#E5E5E5"> that and here's the value</font>

1255
00:48:38,380 --> 00:48:42,450
<font color="#E5E5E5">this is the base64 encoded</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> it</font>

1256
00:48:40,420 --> 00:48:44,470
actually does<font color="#E5E5E5"> work and converts the data</font>

1257
00:48:42,450 --> 00:48:47,290
<font color="#E5E5E5">so if you want to make</font><font color="#CCCCCC"> sure that we can</font>

1258
00:48:44,470 --> 00:48:49,750
go the the inverse operation<font color="#E5E5E5"> we're going</font>

1259
00:48:47,290 --> 00:48:52,480
to convert from base64 string<font color="#E5E5E5"> we're</font>

1260
00:48:49,750 --> 00:48:55,290
gonna convert from base64 we're gonna

1261
00:48:52,480 --> 00:48:57,760
provide<font color="#CCCCCC"> the encoded string</font><font color="#E5E5E5"> hit enter and</font>

1262
00:48:55,290 --> 00:49:00,520
<font color="#CCCCCC">we should get our results back and there</font>

1263
00:48:57,760 --> 00:49:04,560
we go<font color="#E5E5E5"> so it</font><font color="#CCCCCC"> actually does</font><font color="#E5E5E5"> go back and</font>

1264
00:49:00,520 --> 00:49:07,540
forth<font color="#E5E5E5"> this process also does work on</font>

1265
00:49:04,560 --> 00:49:09,610
<font color="#E5E5E5">binary files I don't I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have a</font>

1266
00:49:07,540 --> 00:49:12,940
<font color="#E5E5E5">video of it showing it but let's say you</font>

1267
00:49:09,610 --> 00:49:14,500
downloaded like the<font color="#E5E5E5"> Google image like</font>

1268
00:49:12,940 --> 00:49:17,080
Google logo<font color="#E5E5E5"> right you</font><font color="#CCCCCC"> just download from</font>

1269
00:49:14,500 --> 00:49:18,690
Google<font color="#CCCCCC"> copy</font><font color="#E5E5E5"> down your string to your</font>

1270
00:49:17,080 --> 00:49:21,340
computer well you can run<font color="#CCCCCC"> this chameleon</font>

1271
00:49:18,690 --> 00:49:22,870
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of saying you have a string</font><font color="#E5E5E5"> that</font>

1272
00:49:21,340 --> 00:49:24,280
you<font color="#CCCCCC"> want to encode</font><font color="#E5E5E5"> you say you have a</font>

1273
00:49:22,870 --> 00:49:26,740
file you want<font color="#E5E5E5"> to code use provided the</font>

1274
00:49:24,280 --> 00:49:28,930
path to a file it'll<font color="#CCCCCC"> then dump out the</font>

1275
00:49:26,740 --> 00:49:31,750
<font color="#E5E5E5">base64 encoded output of that</font><font color="#CCCCCC"> binary</font>

1276
00:49:28,930 --> 00:49:33,640
which you can then decode again if you

1277
00:49:31,750 --> 00:49:35,620
really<font color="#E5E5E5"> want to and it will save it back</font>

1278
00:49:33,640 --> 00:49:38,319
to this if you were<font color="#E5E5E5"> to run like an md5</font>

1279
00:49:35,620 --> 00:49:39,700
or sha-1 hash against the original value

1280
00:49:38,320 --> 00:49:41,740
and<font color="#CCCCCC"> the decoded value they will</font><font color="#E5E5E5"> be</font>

1281
00:49:39,700 --> 00:49:43,930
exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same because</font><font color="#E5E5E5"> it is doing</font>

1282
00:49:41,740 --> 00:49:48,660
proper for proper base64 encoding and

1283
00:49:43,930 --> 00:49:50,680
decoding so<font color="#E5E5E5"> party thoughts with this is</font>

1284
00:49:48,660 --> 00:49:52,629
Microsoft's own words like they<font color="#E5E5E5"> state</font>

1285
00:49:50,680 --> 00:49:54,040
<font color="#E5E5E5">that</font><font color="#CCCCCC"> constraints</font><font color="#E5E5E5"> modes at times designed</font>

1286
00:49:52,630 --> 00:49:56,890
to support day-to-day administrative

1287
00:49:54,040 --> 00:49:58,180
tasks<font color="#E5E5E5"> even though you are restricted and</font>

1288
00:49:56,890 --> 00:50:00,129
<font color="#E5E5E5">constrain language mode there's still a</font>

1289
00:49:58,180 --> 00:50:01,799
lot of<font color="#E5E5E5"> things that you can do the reason</font>

1290
00:50:00,130 --> 00:50:04,180
I started<font color="#E5E5E5"> looking at this and developing</font>

1291
00:50:01,800 --> 00:50:06,550
<font color="#E5E5E5">when the implant and starting to</font><font color="#CCCCCC"> develop</font>

1292
00:50:04,180 --> 00:50:08,560
<font color="#E5E5E5">like base64 encoding and looking at</font>

1293
00:50:06,550 --> 00:50:10,900
other<font color="#CCCCCC"> things is</font><font color="#E5E5E5"> that I want to figure</font>

1294
00:50:08,560 --> 00:50:12,670
out<font color="#E5E5E5"> how can i encode data</font><font color="#CCCCCC"> I want to be</font>

1295
00:50:10,900 --> 00:50:15,520
<font color="#CCCCCC">able to be prepared</font><font color="#E5E5E5"> for when I go</font>

1296
00:50:12,670 --> 00:50:17,080
against a<font color="#E5E5E5"> system that has locked down</font>

1297
00:50:15,520 --> 00:50:18,790
restrictions on it the

1298
00:50:17,080 --> 00:50:20,890
have somewhat of a capability to still

1299
00:50:18,790 --> 00:50:24,310
attack it or<font color="#E5E5E5"> do whatever that</font><font color="#CCCCCC"> I want to</font>

1300
00:50:20,890 --> 00:50:25,660
do an attacker<font color="#CCCCCC"> the</font><font color="#E5E5E5"> biggest thing is an</font>

1301
00:50:24,310 --> 00:50:28,180
attacker will<font color="#CCCCCC"> hear admin</font><font color="#E5E5E5"> tools</font><font color="#CCCCCC"> as it</font>

1302
00:50:25,660 --> 00:50:29,920
means to enable their<font color="#E5E5E5"> goals so I kind of</font>

1303
00:50:28,180 --> 00:50:32,640
looked at<font color="#E5E5E5"> with antivirus like you can</font>

1304
00:50:29,920 --> 00:50:35,650
still lock down a<font color="#E5E5E5"> system and enforce</font>

1305
00:50:32,640 --> 00:50:37,660
<font color="#CCCCCC">different</font><font color="#E5E5E5"> ASR rules or allow or block</font>

1306
00:50:35,650 --> 00:50:39,550
specific<font color="#CCCCCC"> types of file extensions or</font>

1307
00:50:37,660 --> 00:50:42,310
directories but<font color="#E5E5E5"> an attacker can still</font>

1308
00:50:39,550 --> 00:50:43,660
use that for their<font color="#CCCCCC"> own purposes</font><font color="#E5E5E5"> whether</font>

1309
00:50:42,310 --> 00:50:44,850
<font color="#E5E5E5">or not it's in constrained language mode</font>

1310
00:50:43,660 --> 00:50:47,470
because it's an administrative

1311
00:50:44,850 --> 00:50:49,540
capability that<font color="#E5E5E5"> PowerShell constrained</font>

1312
00:50:47,470 --> 00:50:51,040
<font color="#CCCCCC">lis in which mode still allows the</font>

1313
00:50:49,540 --> 00:50:55,390
biggest thing from that perspective<font color="#E5E5E5"> is</font>

1314
00:50:51,040 --> 00:50:56,710
enable telemetry<font color="#CCCCCC"> everyone all a lot of</font>

1315
00:50:55,390 --> 00:50:58,750
modern-day attackers are starting to

1316
00:50:56,710 --> 00:51:01,480
kind of shift<font color="#CCCCCC"> somewhat</font><font color="#E5E5E5"> to c-sharp</font>

1317
00:50:58,750 --> 00:51:03,910
<font color="#E5E5E5">because there's not as much telemetry as</font>

1318
00:51:01,480 --> 00:51:05,590
there's power show<font color="#CCCCCC"> powershell version</font><font color="#E5E5E5"> 5</font>

1319
00:51:03,910 --> 00:51:07,420
<font color="#CCCCCC">and after</font><font color="#E5E5E5"> the Microsoft team is</font><font color="#CCCCCC"> done</font><font color="#E5E5E5"> an</font>

1320
00:51:05,590 --> 00:51:10,180
excellent<font color="#CCCCCC"> job like they've</font><font color="#E5E5E5"> they've</font>

1321
00:51:07,420 --> 00:51:12,670
created<font color="#E5E5E5"> the ability</font><font color="#CCCCCC"> for administrators</font>

1322
00:51:10,180 --> 00:51:14,410
<font color="#E5E5E5">to log</font><font color="#CCCCCC"> PowerShell actions or commands</font>

1323
00:51:12,670 --> 00:51:15,790
that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> issued</font><font color="#E5E5E5"> on a system that way</font>

1324
00:51:14,410 --> 00:51:17,770
they can go back in<font color="#E5E5E5"> the event</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a</font>

1325
00:51:15,790 --> 00:51:19,180
breach<font color="#CCCCCC"> and</font><font color="#E5E5E5"> actually look at what</font>

1326
00:51:17,770 --> 00:51:21,490
commands were issued by an attacker<font color="#CCCCCC"> what</font>

1327
00:51:19,180 --> 00:51:23,410
did they do<font color="#E5E5E5"> they try</font><font color="#CCCCCC"> to determine</font><font color="#E5E5E5"> how</font>

1328
00:51:21,490 --> 00:51:25,089
can they either<font color="#E5E5E5"> maybe stop them on a</font>

1329
00:51:23,410 --> 00:51:28,990
<font color="#E5E5E5">future system or track where they're</font>

1330
00:51:25,090 --> 00:51:31,270
going<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that's really it thank you</font><font color="#E5E5E5"> for</font>

1331
00:51:28,990 --> 00:51:32,620
your time<font color="#CCCCCC"> I hope this kind of helps just</font>

1332
00:51:31,270 --> 00:51:34,720
kind of give a<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> description of</font>

1333
00:51:32,620 --> 00:51:36,730
what constrained language mode is how it

1334
00:51:34,720 --> 00:51:38,859
is possible<font color="#E5E5E5"> to still do attacker based</font>

1335
00:51:36,730 --> 00:51:42,040
actions build out different<font color="#CCCCCC"> capabilities</font>

1336
00:51:38,860 --> 00:51:44,710
and<font color="#E5E5E5"> how</font><font color="#CCCCCC"> to live within constrained</font>

1337
00:51:42,040 --> 00:51:46,480
language mode this tool is released<font color="#E5E5E5"> and</font>

1338
00:51:44,710 --> 00:51:48,220
it's now live the<font color="#CCCCCC"> basics for encoding</font>

1339
00:51:46,480 --> 00:51:50,980
library you can<font color="#E5E5E5"> check it out</font><font color="#CCCCCC"> in github</font>

1340
00:51:48,220 --> 00:51:53,189
<font color="#E5E5E5">and that's</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it thank you</font><font color="#CCCCCC"> for</font>

1341
00:51:50,980 --> 00:51:53,190
attending

1342
00:51:54,140 --> 00:51:56,739
[Applause]

