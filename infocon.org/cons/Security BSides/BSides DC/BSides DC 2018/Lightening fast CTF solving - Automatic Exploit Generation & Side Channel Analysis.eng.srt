1
00:00:00,030 --> 00:00:05,069
besides DC would like to thank all of

2
00:00:02,310 --> 00:00:07,470
our sponsors<font color="#E5E5E5"> and a special thank you to</font>

3
00:00:05,069 --> 00:00:10,710
all<font color="#E5E5E5"> of our speakers</font><font color="#CCCCCC"> volunteers and</font>

4
00:00:07,470 --> 00:00:12,989
organizers for making 2018 a success

5
00:00:10,710 --> 00:00:15,360
today we're gonna be talking<font color="#CCCCCC"> about how</font>

6
00:00:12,990 --> 00:00:18,150
<font color="#E5E5E5">to solve CTF problems really really</font>

7
00:00:15,360 --> 00:00:20,310
really really fast<font color="#E5E5E5"> we're going to also</font>

8
00:00:18,150 --> 00:00:22,320
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about what it</font><font color="#E5E5E5"> looks like to build</font>

9
00:00:20,310 --> 00:00:24,509
tools to solve these things<font color="#E5E5E5"> really fast</font>

10
00:00:22,320 --> 00:00:25,920
<font color="#E5E5E5">and then we're also gonna talk about</font>

11
00:00:24,510 --> 00:00:27,990
what it<font color="#CCCCCC"> looks like</font>

12
00:00:25,920 --> 00:00:29,820
taking these tools these techniques<font color="#E5E5E5"> that</font>

13
00:00:27,990 --> 00:00:33,210
you're developing<font color="#E5E5E5"> for CTF problems and</font>

14
00:00:29,820 --> 00:00:37,320
applying them to real real programs real

15
00:00:33,210 --> 00:00:38,550
situations real systems so like every

16
00:00:37,320 --> 00:00:39,660
speaker I'm gonna start<font color="#E5E5E5"> with a</font><font color="#CCCCCC"> little</font>

17
00:00:38,550 --> 00:00:42,599
<font color="#E5E5E5">bit of background information about</font>

18
00:00:39,660 --> 00:00:45,569
<font color="#E5E5E5">myself</font><font color="#CCCCCC"> my name is Christopher Roberts</font>

19
00:00:42,600 --> 00:00:47,129
<font color="#E5E5E5">I'm a vulnerability researcher slash</font>

20
00:00:45,570 --> 00:00:52,320
reverse engineer for Battelle Memorial

21
00:00:47,129 --> 00:00:55,890
Institute<font color="#CCCCCC"> I'm also</font><font color="#E5E5E5"> a CTF member at the</font>

22
00:00:52,320 --> 00:00:58,440
George Mason<font color="#E5E5E5"> cybersecurity</font><font color="#CCCCCC"> Club we've</font>

23
00:00:55,890 --> 00:01:01,739
had a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> recent competitions a lot</font>

24
00:00:58,440 --> 00:01:03,599
of<font color="#E5E5E5"> recent wins and those are in part to</font>

25
00:01:01,739 --> 00:01:07,080
some<font color="#CCCCCC"> of the tools that I'm going to talk</font>

26
00:01:03,600 --> 00:01:09,960
about<font color="#E5E5E5"> today</font><font color="#CCCCCC"> and in</font><font color="#E5E5E5"> particular for my</font>

27
00:01:07,080 --> 00:01:12,119
research<font color="#CCCCCC"> I love</font><font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> low-level</font>

28
00:01:09,960 --> 00:01:13,589
stuff I like understanding how programs

29
00:01:12,119 --> 00:01:16,259
work how all the bits and<font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> work</font>

30
00:01:13,590 --> 00:01:20,520
<font color="#E5E5E5">when I see assembly I'm like yes</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't</font>

31
00:01:16,259 --> 00:01:22,770
have to deal<font color="#CCCCCC"> with Java so I like finding</font>

32
00:01:20,520 --> 00:01:25,649
<font color="#E5E5E5">bugs and systems</font><font color="#CCCCCC"> I like trying to</font>

33
00:01:22,770 --> 00:01:27,509
analyze systems<font color="#CCCCCC"> faster because as it</font><font color="#E5E5E5"> is</font>

34
00:01:25,650 --> 00:01:29,729
systems are only<font color="#E5E5E5"> getting more and</font><font color="#CCCCCC"> more</font>

35
00:01:27,509 --> 00:01:31,979
complicated<font color="#E5E5E5"> and it is just becoming</font>

36
00:01:29,729 --> 00:01:34,320
<font color="#E5E5E5">harder and harder</font><font color="#CCCCCC"> on me the reverse</font>

37
00:01:31,979 --> 00:01:36,299
engineer to try and find bugs to try and

38
00:01:34,320 --> 00:01:39,360
find out how these systems<font color="#E5E5E5"> are</font><font color="#CCCCCC"> working</font>

39
00:01:36,299 --> 00:01:41,759
so I need to build<font color="#E5E5E5"> an up-to-date toolset</font>

40
00:01:39,360 --> 00:01:45,509
<font color="#CCCCCC">to</font><font color="#E5E5E5"> try and understand these things a</font>

41
00:01:41,759 --> 00:01:48,810
little<font color="#E5E5E5"> bit faster so let's start out</font>

42
00:01:45,509 --> 00:01:51,210
with<font color="#CCCCCC"> CTS there are a couple problems in</font>

43
00:01:48,810 --> 00:01:53,729
<font color="#E5E5E5">CTS right now that lets you use these</font>

44
00:01:51,210 --> 00:01:56,189
tools where<font color="#CCCCCC"> you drop in a CTF problem</font>

45
00:01:53,729 --> 00:01:59,219
when you get<font color="#E5E5E5"> out of flag</font><font color="#CCCCCC"> and the first</font>

46
00:01:56,189 --> 00:02:03,449
one is reuse there are so many<font color="#CCCCCC"> problems</font>

47
00:01:59,219 --> 00:02:05,908
right now<font color="#CCCCCC"> that have the varies I'd have</font>

48
00:02:03,450 --> 00:02:08,640
a very<font color="#E5E5E5"> similar approach every single</font>

49
00:02:05,909 --> 00:02:10,500
time you<font color="#E5E5E5"> break right at the function</font>

50
00:02:08,639 --> 00:02:12,709
check you dump out<font color="#CCCCCC"> your memory and you</font>

51
00:02:10,500 --> 00:02:14,790
say hey there's a flag right there<font color="#CCCCCC"> and</font>

52
00:02:12,710 --> 00:02:17,130
that'll work<font color="#E5E5E5"> for a lot</font><font color="#CCCCCC"> of low point</font>

53
00:02:14,790 --> 00:02:20,670
problems<font color="#E5E5E5"> for other ones they'll try and</font>

54
00:02:17,130 --> 00:02:22,530
<font color="#E5E5E5">do some broken encryption stuff and do a</font>

55
00:02:20,670 --> 00:02:26,399
check<font color="#E5E5E5"> against that and have you reverse</font>

56
00:02:22,530 --> 00:02:30,300
<font color="#CCCCCC">engineer that</font><font color="#E5E5E5"> and then yeah if you're</font>

57
00:02:26,400 --> 00:02:32,040
<font color="#CCCCCC">going to bigger problems a lot</font><font color="#E5E5E5"> of times</font>

58
00:02:30,300 --> 00:02:34,410
the low point problems<font color="#E5E5E5"> might have some</font>

59
00:02:32,040 --> 00:02:36,510
cool or<font color="#E5E5E5"> a novel thing that just eats up</font>

60
00:02:34,410 --> 00:02:38,970
<font color="#E5E5E5">your time you're trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> score as many</font>

61
00:02:36,510 --> 00:02:40,980
<font color="#CCCCCC">points as you can in these problems and</font>

62
00:02:38,970 --> 00:02:44,570
you're wasting<font color="#CCCCCC"> time trying</font><font color="#E5E5E5"> to figure</font><font color="#CCCCCC"> out</font>

63
00:02:40,980 --> 00:02:48,450
how<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> nes ROM on your computer</font>

64
00:02:44,570 --> 00:02:49,799
<font color="#CCCCCC">and that just eats up so much time</font><font color="#E5E5E5"> and</font>

65
00:02:48,450 --> 00:02:52,010
then finally<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the harder ones</font>

66
00:02:49,800 --> 00:02:55,260
<font color="#CCCCCC">your</font><font color="#E5E5E5"> 400 point your 500 point problems</font>

67
00:02:52,010 --> 00:02:56,609
<font color="#CCCCCC">can</font><font color="#E5E5E5"> just be</font><font color="#CCCCCC"> tedious</font><font color="#E5E5E5"> it might be doing</font>

68
00:02:55,260 --> 00:02:58,739
the same<font color="#CCCCCC"> thing over and over</font><font color="#E5E5E5"> and over</font>

69
00:02:56,610 --> 00:03:00,360
<font color="#E5E5E5">and over and over again and you're</font><font color="#CCCCCC"> just</font>

70
00:02:58,740 --> 00:03:03,570
bored by the time you've actually<font color="#E5E5E5"> solved</font>

71
00:03:00,360 --> 00:03:05,160
it<font color="#E5E5E5"> and so I like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> try and</font><font color="#CCCCCC"> reduce the</font>

72
00:03:03,570 --> 00:03:08,640
<font color="#E5E5E5">amount of time you have</font><font color="#CCCCCC"> to invest in</font>

73
00:03:05,160 --> 00:03:10,470
those so<font color="#CCCCCC"> that you can get to some of the</font>

74
00:03:08,640 --> 00:03:16,350
cooler<font color="#E5E5E5"> or more interesting or the harder</font>

75
00:03:10,470 --> 00:03:19,470
problems<font color="#CCCCCC"> so how do we</font><font color="#E5E5E5"> fix this we</font>

76
00:03:16,350 --> 00:03:21,540
automate everything<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> have a number</font>

77
00:03:19,470 --> 00:03:24,359
<font color="#E5E5E5">of tools that have come</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> in the past</font>

78
00:03:21,540 --> 00:03:26,730
<font color="#E5E5E5">several years</font><font color="#CCCCCC"> that help us do this two</font>

79
00:03:24,360 --> 00:03:29,100
tools from debuggers and<font color="#CCCCCC"> debugger</font>

80
00:03:26,730 --> 00:03:31,950
scripts and symbolic execution

81
00:03:29,100 --> 00:03:34,079
frameworks like anger and<font color="#CCCCCC"> Triton</font><font color="#E5E5E5"> and</font>

82
00:03:31,950 --> 00:03:38,280
binary instrumentation frameworks like

83
00:03:34,080 --> 00:03:40,200
<font color="#E5E5E5">Triton and</font><font color="#CCCCCC"> intel's pin but that's way</font>

84
00:03:38,280 --> 00:03:42,510
too many frameworks<font color="#CCCCCC"> so for this talk</font>

85
00:03:40,200 --> 00:03:44,280
we're gonna only<font color="#E5E5E5"> talk about two and</font>

86
00:03:42,510 --> 00:03:46,769
those are two that i've been<font color="#E5E5E5"> using</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a</font>

87
00:03:44,280 --> 00:03:50,820
while<font color="#E5E5E5"> in my professional</font><font color="#CCCCCC"> life and in my</font>

88
00:03:46,770 --> 00:03:52,440
CTF life so we're<font color="#E5E5E5"> gonna talk about anger</font>

89
00:03:50,820 --> 00:03:59,280
and we're going<font color="#E5E5E5"> to talk about intel's</font>

90
00:03:52,440 --> 00:04:01,500
pin<font color="#E5E5E5"> so these these systems are</font><font color="#CCCCCC"> extremely</font>

91
00:03:59,280 --> 00:04:04,140
complex<font color="#CCCCCC"> and explaining</font><font color="#E5E5E5"> every single</font>

92
00:04:01,500 --> 00:04:06,870
piece<font color="#CCCCCC"> of it is out of the</font><font color="#E5E5E5"> scope of</font><font color="#CCCCCC"> this</font>

93
00:04:04,140 --> 00:04:09,660
talk so<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna talk at a very high</font>

94
00:04:06,870 --> 00:04:12,240
level<font color="#CCCCCC"> about what they do and how they</font>

95
00:04:09,660 --> 00:04:14,609
impact us<font color="#E5E5E5"> in this talk</font><font color="#CCCCCC"> so first up we</font>

96
00:04:12,240 --> 00:04:17,220
have anger<font color="#E5E5E5"> anger is what's called a</font>

97
00:04:14,610 --> 00:04:20,489
<font color="#E5E5E5">symbolic execution framework and if</font>

98
00:04:17,220 --> 00:04:21,900
anyone really understands<font color="#E5E5E5"> anger they're</font>

99
00:04:20,488 --> 00:04:23,280
gonna cringe it<font color="#E5E5E5"> back because really it's</font>

100
00:04:21,899 --> 00:04:25,020
can colic execution<font color="#E5E5E5"> but we're not going</font>

101
00:04:23,280 --> 00:04:26,549
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> into the</font><font color="#CCCCCC"> Nitty Gritty</font><font color="#E5E5E5"> it's a</font>

102
00:04:25,020 --> 00:04:27,840
symbolic execution framework

103
00:04:26,550 --> 00:04:29,909
and we can pull a control<font color="#E5E5E5"> flow graph so</font>

104
00:04:27,840 --> 00:04:32,280
<font color="#E5E5E5">what does that mean symbolic execution</font>

105
00:04:29,909 --> 00:04:35,550
is the<font color="#E5E5E5"> idea that</font><font color="#CCCCCC"> we can represent a</font>

106
00:04:32,280 --> 00:04:38,909
program as a series of equations<font color="#CCCCCC"> every</font>

107
00:04:35,550 --> 00:04:42,120
register every<font color="#E5E5E5"> memory region every file</font>

108
00:04:38,909 --> 00:04:44,580
input<font color="#E5E5E5"> whatever can be represented as a</font>

109
00:04:42,120 --> 00:04:45,780
<font color="#E5E5E5">series of equations because every time</font>

110
00:04:44,580 --> 00:04:48,000
<font color="#E5E5E5">you're incrementing through the program</font>

111
00:04:45,780 --> 00:04:50,960
<font color="#E5E5E5">you're saying you know add</font><font color="#CCCCCC"> four to my</font>

112
00:04:48,000 --> 00:04:54,750
program counter if it's you know a<font color="#CCCCCC"> RISC</font>

113
00:04:50,960 --> 00:04:56,250
assembly<font color="#E5E5E5"> or if you're adding an input</font>

114
00:04:54,750 --> 00:04:57,629
and you're trying<font color="#CCCCCC"> to understand what</font>

115
00:04:56,250 --> 00:04:59,280
your memory looks like you can say if it

116
00:04:57,629 --> 00:05:02,789
passes<font color="#E5E5E5"> this check my input should be</font>

117
00:04:59,280 --> 00:05:05,219
flag<font color="#CCCCCC"> 1 2 3 4 if my file needs to</font><font color="#E5E5E5"> be read</font>

118
00:05:02,789 --> 00:05:09,750
we can<font color="#E5E5E5"> also model that as an equation</font>

119
00:05:05,219 --> 00:05:11,639
and so symbolic execution<font color="#CCCCCC"> allows us to</font>

120
00:05:09,750 --> 00:05:13,830
model programs and<font color="#E5E5E5"> that's the big</font>

121
00:05:11,639 --> 00:05:16,349
<font color="#CCCCCC">takeaway from</font><font color="#E5E5E5"> it we don't actually have</font>

122
00:05:13,830 --> 00:05:18,270
<font color="#E5E5E5">to</font><font color="#CCCCCC"> run the program we</font><font color="#E5E5E5"> can start at any</font>

123
00:05:16,349 --> 00:05:21,240
<font color="#CCCCCC">arbitrary point</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> of there</font><font color="#E5E5E5"> and</font>

124
00:05:18,270 --> 00:05:23,159
model what's going on<font color="#E5E5E5"> we can say that</font>

125
00:05:21,240 --> 00:05:26,490
from<font color="#E5E5E5"> this slice to this slice we know</font>

126
00:05:23,159 --> 00:05:29,699
that we need<font color="#CCCCCC"> to add 142 our our ax</font>

127
00:05:26,490 --> 00:05:33,810
register or<font color="#E5E5E5"> this memory agent changed by</font>

128
00:05:29,699 --> 00:05:35,759
I don't<font color="#CCCCCC"> know shifting something and so</font>

129
00:05:33,810 --> 00:05:37,620
you get<font color="#E5E5E5"> a really powerful framework for</font>

130
00:05:35,759 --> 00:05:40,650
understanding<font color="#CCCCCC"> problems</font><font color="#E5E5E5"> that you can't</font>

131
00:05:37,620 --> 00:05:43,889
<font color="#E5E5E5">run so if we're</font><font color="#CCCCCC"> talking about that NES</font>

132
00:05:40,650 --> 00:05:46,799
<font color="#E5E5E5">ROM and it has executable code instead</font>

133
00:05:43,889 --> 00:05:48,630
<font color="#E5E5E5">of trying to Google NES emulators and</font>

134
00:05:46,800 --> 00:05:50,279
<font color="#CCCCCC">then having</font><font color="#E5E5E5"> to sort through the first 20</font>

135
00:05:48,630 --> 00:05:54,690
pages<font color="#E5E5E5"> of Google to filter out all the</font>

136
00:05:50,279 --> 00:05:56,819
<font color="#E5E5E5">viruses</font><font color="#CCCCCC"> you can just tell anger lift</font>

137
00:05:54,690 --> 00:05:59,759
this<font color="#E5E5E5"> code right</font><font color="#CCCCCC"> here and</font><font color="#E5E5E5"> run it and it</font>

138
00:05:56,819 --> 00:06:03,180
<font color="#E5E5E5">will tell you</font><font color="#CCCCCC"> to some</font><font color="#E5E5E5"> accuracy what it</font>

139
00:05:59,759 --> 00:06:04,889
should<font color="#CCCCCC"> be</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> and in the</font><font color="#E5E5E5"> second big</font>

140
00:06:03,180 --> 00:06:06,960
<font color="#E5E5E5">piece that we want from anger</font><font color="#CCCCCC"> today is</font>

141
00:06:04,889 --> 00:06:09,240
control flow graph recovery so what does

142
00:06:06,960 --> 00:06:11,460
that mean the control flow graph<font color="#CCCCCC"> is a</font>

143
00:06:09,240 --> 00:06:14,039
visual representation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> how a</font><font color="#E5E5E5"> program</font>

144
00:06:11,460 --> 00:06:15,388
runs so if I send<font color="#E5E5E5"> you input and you</font>

145
00:06:14,039 --> 00:06:17,068
check<font color="#CCCCCC"> it it's gonna branch we're gonna</font>

146
00:06:15,389 --> 00:06:18,690
have one branch going<font color="#CCCCCC"> one way that</font><font color="#E5E5E5"> says</font>

147
00:06:17,069 --> 00:06:20,520
you fail one branch that goes<font color="#E5E5E5"> one way</font>

148
00:06:18,690 --> 00:06:23,490
<font color="#E5E5E5">that says you succeed</font><font color="#CCCCCC"> so every time</font>

149
00:06:20,520 --> 00:06:26,310
there's an if a loop a while<font color="#E5E5E5"> and ended</font>

150
00:06:23,490 --> 00:06:28,020
<font color="#E5E5E5">call a jump whatever we have a different</font>

151
00:06:26,310 --> 00:06:29,759
block to represent<font color="#E5E5E5"> that code</font><font color="#CCCCCC"> that we're</font>

152
00:06:28,020 --> 00:06:31,979
going to execute<font color="#CCCCCC"> and so you</font><font color="#E5E5E5"> get a really</font>

153
00:06:29,759 --> 00:06:34,740
nice<font color="#E5E5E5"> visual representation</font><font color="#CCCCCC"> of what's</font>

154
00:06:31,979 --> 00:06:36,389
<font color="#E5E5E5">going on and after I</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about Intel</font>

155
00:06:34,740 --> 00:06:38,389
I'll show you an example<font color="#E5E5E5"> of a control</font>

156
00:06:36,389 --> 00:06:40,470
flow<font color="#E5E5E5"> graph and why they're so important</font>

157
00:06:38,389 --> 00:06:43,040
so now let's briefly

158
00:06:40,470 --> 00:06:45,060
about<font color="#E5E5E5"> an Intel's pin it's a</font>

159
00:06:43,040 --> 00:06:48,090
instrumentation framework that<font color="#CCCCCC"> only</font>

160
00:06:45,060 --> 00:06:50,160
works on x86<font color="#E5E5E5"> and</font><font color="#CCCCCC"> AMD</font><font color="#E5E5E5"> 64 sits so just</font>

161
00:06:48,090 --> 00:06:53,849
modern<font color="#E5E5E5"> system or excuse me not</font><font color="#CCCCCC"> a modern</font>

162
00:06:50,160 --> 00:06:56,670
system<font color="#CCCCCC"> that's that's wrong</font><font color="#E5E5E5"> on Intel</font>

163
00:06:53,850 --> 00:06:58,680
chips right now but binary

164
00:06:56,670 --> 00:07:01,350
instrumentation<font color="#CCCCCC"> lets you slot in code</font>

165
00:06:58,680 --> 00:07:03,000
<font color="#E5E5E5">into other programs</font><font color="#CCCCCC"> that does something</font>

166
00:07:01,350 --> 00:07:05,490
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you would want so you could track</font>

167
00:07:03,000 --> 00:07:07,590
memory reads and writes if your program

168
00:07:05,490 --> 00:07:10,980
<font color="#E5E5E5">wouldn't normally print those out you</font>

169
00:07:07,590 --> 00:07:13,530
can hook different functions if there's

170
00:07:10,980 --> 00:07:15,330
a key check you could hook<font color="#CCCCCC"> that and have</font>

171
00:07:13,530 --> 00:07:16,710
that<font color="#CCCCCC"> printed out but what we're</font>

172
00:07:15,330 --> 00:07:18,900
<font color="#CCCCCC">interested in is something called</font>

173
00:07:16,710 --> 00:07:21,150
instruction<font color="#E5E5E5"> counting and so instruction</font>

174
00:07:18,900 --> 00:07:23,609
<font color="#E5E5E5">counting in this case is going to tell</font>

175
00:07:21,150 --> 00:07:27,090
us<font color="#E5E5E5"> literally how many</font><font color="#CCCCCC"> instructions</font><font color="#E5E5E5"> the</font>

176
00:07:23,610 --> 00:07:29,550
processor<font color="#E5E5E5"> ran when it's running</font><font color="#CCCCCC"> through</font>

177
00:07:27,090 --> 00:07:32,760
<font color="#E5E5E5">a program and that's what's going</font><font color="#CCCCCC"> to be</font>

178
00:07:29,550 --> 00:07:39,330
important for<font color="#E5E5E5"> the tool that I'll be</font>

179
00:07:32,760 --> 00:07:41,730
talking about in a little<font color="#CCCCCC"> bit so</font><font color="#E5E5E5"> colors</font>

180
00:07:39,330 --> 00:07:43,109
<font color="#CCCCCC">aren't as good</font><font color="#E5E5E5"> as I had hoped but on the</font>

181
00:07:41,730 --> 00:07:45,900
right we have<font color="#E5E5E5"> an example of a control</font>

182
00:07:43,110 --> 00:07:47,880
<font color="#E5E5E5">flow graph it's ugly and hard to read</font>

183
00:07:45,900 --> 00:07:50,460
but the<font color="#E5E5E5"> big</font><font color="#CCCCCC"> takeaway is</font><font color="#E5E5E5"> we have these</font>

184
00:07:47,880 --> 00:07:52,409
<font color="#E5E5E5">blocks that represent code</font><font color="#CCCCCC"> and each</font><font color="#E5E5E5"> of</font>

185
00:07:50,460 --> 00:07:55,229
these<font color="#E5E5E5"> blocks does something to registers</font>

186
00:07:52,410 --> 00:07:57,630
or to memory<font color="#CCCCCC"> we don't really care what</font>

187
00:07:55,230 --> 00:08:00,840
<font color="#E5E5E5">those specifics are but anger does and</font>

188
00:07:57,630 --> 00:08:03,360
so we can tell anger given this program

189
00:08:00,840 --> 00:08:05,429
if I want to get to the end and I<font color="#E5E5E5"> want</font>

190
00:08:03,360 --> 00:08:09,479
to<font color="#E5E5E5"> avoid some sort</font><font color="#CCCCCC"> of bad condition if I</font>

191
00:08:05,430 --> 00:08:12,530
want to avoid<font color="#E5E5E5"> your flag is not correct</font><font color="#CCCCCC"> I</font>

192
00:08:09,479 --> 00:08:15,419
can<font color="#CCCCCC"> tell it to</font><font color="#E5E5E5"> start here and end</font><font color="#CCCCCC"> here I</font>

193
00:08:12,530 --> 00:08:16,799
can give<font color="#E5E5E5"> it an exact slice that I want</font>

194
00:08:15,419 --> 00:08:19,950
it to<font color="#CCCCCC"> run through</font><font color="#E5E5E5"> without actually</font>

195
00:08:16,800 --> 00:08:22,740
having to<font color="#E5E5E5"> run it and tell it to trace</font>

196
00:08:19,950 --> 00:08:25,950
through these specific basic blocks<font color="#E5E5E5"> and</font>

197
00:08:22,740 --> 00:08:28,200
tell me how to get there<font color="#E5E5E5"> and when you're</font>

198
00:08:25,950 --> 00:08:30,060
representing<font color="#E5E5E5"> a program like this you're</font>

199
00:08:28,200 --> 00:08:32,520
<font color="#CCCCCC">able to get so</font><font color="#E5E5E5"> much more insight</font><font color="#CCCCCC"> into</font>

200
00:08:30,060 --> 00:08:33,690
what's going<font color="#E5E5E5"> on you can see what your</font>

201
00:08:32,520 --> 00:08:35,338
memory needs<font color="#E5E5E5"> to look</font><font color="#CCCCCC"> like what your</font>

202
00:08:33,690 --> 00:08:38,159
registers need to look<font color="#E5E5E5"> like you</font><font color="#CCCCCC"> can ask</font>

203
00:08:35,339 --> 00:08:41,880
very specific questions<font color="#E5E5E5"> can you</font><font color="#CCCCCC"> even get</font>

204
00:08:38,159 --> 00:08:44,159
there from there oh yeah and then does

205
00:08:41,880 --> 00:08:46,320
<font color="#CCCCCC">one variable influence another</font><font color="#E5E5E5"> yeah you</font>

206
00:08:44,159 --> 00:08:48,120
get a small concept of<font color="#E5E5E5"> taint analysis</font>

207
00:08:46,320 --> 00:08:49,980
but that's also<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the scope of this</font>

208
00:08:48,120 --> 00:08:51,390
we we don't care about<font color="#E5E5E5"> that for the</font>

209
00:08:49,980 --> 00:08:53,880
tools and techniques we'll be talking

210
00:08:51,390 --> 00:08:57,720
<font color="#E5E5E5">about here so</font>

211
00:08:53,880 --> 00:08:59,250
the<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> one I have</font><font color="#E5E5E5"> pin</font><font color="#CCCCCC"> I tried to</font>

212
00:08:57,720 --> 00:09:00,839
blow it up<font color="#E5E5E5"> as much as I</font><font color="#CCCCCC"> can we're</font><font color="#E5E5E5"> just</font>

213
00:08:59,250 --> 00:09:03,389
<font color="#E5E5E5">running an example</font><font color="#CCCCCC"> program and at the</font>

214
00:09:00,839 --> 00:09:04,680
very<font color="#E5E5E5"> end</font><font color="#CCCCCC"> we have a count</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> count is</font>

215
00:09:03,389 --> 00:09:06,870
the number<font color="#CCCCCC"> of structions that this</font>

216
00:09:04,680 --> 00:09:09,359
program executed from starting<font color="#CCCCCC"> to</font>

217
00:09:06,870 --> 00:09:11,160
linking to<font color="#E5E5E5"> mapping memory to running</font>

218
00:09:09,360 --> 00:09:14,430
through linked libraries to finally

219
00:09:11,160 --> 00:09:17,279
exiting every single one and<font color="#E5E5E5"> pin let us</font>

220
00:09:14,430 --> 00:09:18,839
instrument the code to increment<font color="#CCCCCC"> that</font>

221
00:09:17,279 --> 00:09:21,810
count every single<font color="#E5E5E5"> time</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> hit an</font>

222
00:09:18,839 --> 00:09:24,589
instruction so I have a CTF problem here

223
00:09:21,810 --> 00:09:27,239
and<font color="#E5E5E5"> I ran a into it and it gave me some</font>

224
00:09:24,589 --> 00:09:33,899
bogus count<font color="#E5E5E5"> I don't really care</font><font color="#CCCCCC"> about</font>

225
00:09:27,240 --> 00:09:36,529
<font color="#CCCCCC">that</font><font color="#E5E5E5"> but what happens when oh it's</font>

226
00:09:33,899 --> 00:09:36,529
<font color="#E5E5E5">supposed to pop up</font>

227
00:09:40,610 --> 00:09:48,740
<font color="#CCCCCC">Oh No my video</font><font color="#E5E5E5"> is failing okay well I'll</font>

228
00:09:45,890 --> 00:09:52,850
just<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to you a little bit</font><font color="#E5E5E5"> looking</font>

229
00:09:48,740 --> 00:09:53,360
back<font color="#E5E5E5"> at that first one that's a bad demo</font>

230
00:09:52,850 --> 00:09:56,870
<font color="#CCCCCC">Oh</font><font color="#E5E5E5"> No</font>

231
00:09:53,360 --> 00:10:01,850
so when you give it different inputs<font color="#CCCCCC"> a b</font>

232
00:09:56,870 --> 00:10:03,589
c d e f a a BB whatever you want you're

233
00:10:01,850 --> 00:10:05,300
still going<font color="#E5E5E5"> to get that instruction</font>

234
00:10:03,589 --> 00:10:07,880
count<font color="#E5E5E5"> you're going to get something</font>

235
00:10:05,300 --> 00:10:11,689
<font color="#E5E5E5">that's maybe changing maybe it's the</font>

236
00:10:07,880 --> 00:10:13,760
exact same<font color="#E5E5E5"> and in CTF problems there's a</font>

237
00:10:11,690 --> 00:10:16,370
code recycling problem back to that<font color="#E5E5E5"> very</font>

238
00:10:13,760 --> 00:10:18,170
first point where they're generally

239
00:10:16,370 --> 00:10:20,930
doing<font color="#E5E5E5"> what's called incremental checking</font>

240
00:10:18,170 --> 00:10:23,870
every character in your flag<font color="#CCCCCC"> is getting</font>

241
00:10:20,930 --> 00:10:28,339
checked uniquely<font color="#E5E5E5"> and we're actually kind</font>

242
00:10:23,870 --> 00:10:34,339
<font color="#E5E5E5">of using some of libs</font><font color="#CCCCCC"> C's optimizations</font>

243
00:10:28,339 --> 00:10:35,959
against it<font color="#E5E5E5"> so we jump past the video so</font>

244
00:10:34,339 --> 00:10:38,149
when we talk about<font color="#E5E5E5"> a reverse engineering</font>

245
00:10:35,959 --> 00:10:41,119
problem and we're trying to understand

246
00:10:38,149 --> 00:10:43,730
<font color="#E5E5E5">how</font><font color="#CCCCCC"> it works we pull up</font><font color="#E5E5E5"> that control</font>

247
00:10:41,120 --> 00:10:46,490
flow graph again<font color="#CCCCCC"> and if this is an</font>

248
00:10:43,730 --> 00:10:48,500
easier problem or the CTF authors like

249
00:10:46,490 --> 00:10:50,899
<font color="#E5E5E5">us or maybe they just don't hate us</font><font color="#CCCCCC"> that</font>

250
00:10:48,500 --> 00:10:53,870
much you might get something<font color="#E5E5E5"> that looks</font>

251
00:10:50,899 --> 00:10:55,220
like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> you get a couple</font><font color="#E5E5E5"> blocks here</font>

252
00:10:53,870 --> 00:10:58,730
<font color="#CCCCCC">and a</font><font color="#E5E5E5"> little bit of</font><font color="#CCCCCC"> logic there's like</font>

253
00:10:55,220 --> 00:11:00,470
two if statements<font color="#E5E5E5"> that's not too bad you</font>

254
00:10:58,730 --> 00:11:02,660
<font color="#E5E5E5">can use traditional tools to solve this</font>

255
00:11:00,470 --> 00:11:06,079
you can attach a debugger<font color="#CCCCCC"> you can start</font>

256
00:11:02,660 --> 00:11:09,410
statically analyzing the code<font color="#E5E5E5"> but what</font>

257
00:11:06,079 --> 00:11:11,979
if the<font color="#E5E5E5"> CTF authors really hate</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> well</font>

258
00:11:09,410 --> 00:11:15,980
they could turn<font color="#E5E5E5"> these two checks into</font>

259
00:11:11,980 --> 00:11:17,899
<font color="#E5E5E5">160</font><font color="#CCCCCC"> and I know I wouldn't want to</font><font color="#E5E5E5"> attach</font>

260
00:11:15,980 --> 00:11:19,490
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the debugger</font><font color="#CCCCCC"> and stop at every single</font>

261
00:11:17,899 --> 00:11:24,500
<font color="#E5E5E5">one</font><font color="#CCCCCC"> of those checks</font><font color="#E5E5E5"> and try and figure</font>

262
00:11:19,490 --> 00:11:27,890
out what's going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> and CTF authors</font>

263
00:11:24,500 --> 00:11:32,930
don't<font color="#E5E5E5"> have to be that nice they can do</font>

264
00:11:27,890 --> 00:11:37,069
this that<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is I</font><font color="#E5E5E5"> think I had counted</font>

265
00:11:32,930 --> 00:11:38,300
it out to<font color="#E5E5E5"> 25,000 individual checks and</font>

266
00:11:37,070 --> 00:11:39,550
for people<font color="#E5E5E5"> who have worked with malware</font>

267
00:11:38,300 --> 00:11:42,439
<font color="#E5E5E5">that this is actually the LLVM</font>

268
00:11:39,550 --> 00:11:44,510
<font color="#CCCCCC">obfuscated</font><font color="#E5E5E5"> post processor it is</font>

269
00:11:42,440 --> 00:11:47,180
literally designed<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> it nearly</font>

270
00:11:44,510 --> 00:11:49,100
impossible<font color="#E5E5E5"> to reverse engineer it</font><font color="#CCCCCC"> now</font>

271
00:11:47,180 --> 00:11:54,250
there are tools online<font color="#E5E5E5"> to try and help</font>

272
00:11:49,100 --> 00:11:54,250
<font color="#CCCCCC">that but that sucks</font>

273
00:11:54,410 --> 00:11:59,219
so we need a way<font color="#CCCCCC"> to try and solve</font>

274
00:11:57,209 --> 00:12:00,660
<font color="#CCCCCC">problems like this so that we</font><font color="#E5E5E5"> can get</font>

275
00:11:59,220 --> 00:12:02,550
all<font color="#E5E5E5"> of the points I want to come in</font>

276
00:12:00,660 --> 00:12:05,639
first<font color="#CCCCCC"> I don't want to</font><font color="#E5E5E5"> just ignore this</font>

277
00:12:02,550 --> 00:12:07,079
one and say this<font color="#E5E5E5"> one's too hard so we</font>

278
00:12:05,639 --> 00:12:10,170
need to divide up the problem we need<font color="#CCCCCC"> to</font>

279
00:12:07,079 --> 00:12:12,329
understand what's<font color="#E5E5E5"> going on in these CTF</font>

280
00:12:10,170 --> 00:12:14,250
problems<font color="#E5E5E5"> and generally they're kind of</font>

281
00:12:12,329 --> 00:12:16,050
<font color="#CCCCCC">broken</font><font color="#E5E5E5"> up into three</font><font color="#CCCCCC"> parts you got to</font>

282
00:12:14,250 --> 00:12:18,449
figure<font color="#E5E5E5"> out how to run it</font><font color="#CCCCCC"> you got to</font>

283
00:12:16,050 --> 00:12:20,128
figure<font color="#E5E5E5"> out what the check is and then</font>

284
00:12:18,449 --> 00:12:23,939
you got to<font color="#E5E5E5"> figure out how to break the</font>

285
00:12:20,129 --> 00:12:25,680
check or how to<font color="#E5E5E5"> make it work</font><font color="#CCCCCC"> for you and</font>

286
00:12:23,939 --> 00:12:27,719
<font color="#E5E5E5">so generally your steps kind of look</font>

287
00:12:25,680 --> 00:12:30,060
like this<font color="#CCCCCC"> trying to find a library</font>

288
00:12:27,720 --> 00:12:34,589
trying<font color="#E5E5E5"> to see if it's an NES emulator</font>

289
00:12:30,060 --> 00:12:36,779
trying to find a weird environment

290
00:12:34,589 --> 00:12:40,319
variable<font color="#E5E5E5"> you need to find</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> checks</font>

291
00:12:36,779 --> 00:12:42,060
usually a lot of<font color="#CCCCCC"> math</font><font color="#E5E5E5"> and that usually</font>

292
00:12:40,319 --> 00:12:44,099
<font color="#E5E5E5">whatever is the biggest function in</font>

293
00:12:42,060 --> 00:12:47,399
there is<font color="#CCCCCC"> probably your checking function</font>

294
00:12:44,100 --> 00:12:50,100
<font color="#E5E5E5">and then you go in gdb and you start</font>

295
00:12:47,399 --> 00:12:51,629
typing in this a bunch and then<font color="#CCCCCC"> you</font><font color="#E5E5E5"> get</font>

296
00:12:50,100 --> 00:12:54,569
a<font color="#E5E5E5"> close out of gdb</font><font color="#CCCCCC"> and you got to reopen</font>

297
00:12:51,629 --> 00:12:56,550
<font color="#E5E5E5">and start doing this again</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> a</font>

298
00:12:54,569 --> 00:13:01,410
yeah eventually<font color="#CCCCCC"> you</font><font color="#E5E5E5"> might get repetitive</font>

299
00:12:56,550 --> 00:13:04,199
<font color="#E5E5E5">stress syndrome but so because I want to</font>

300
00:13:01,410 --> 00:13:08,759
<font color="#E5E5E5">have my hands forever</font><font color="#CCCCCC"> I'm instead</font><font color="#E5E5E5"> gonna</font>

301
00:13:04,199 --> 00:13:10,349
look at what's going<font color="#E5E5E5"> on so at some part</font>

302
00:13:08,759 --> 00:13:12,420
in that check function<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> use</font>

303
00:13:10,350 --> 00:13:13,829
one of these if<font color="#E5E5E5"> you ever</font><font color="#CCCCCC"> program didn't</font>

304
00:13:12,420 --> 00:13:16,560
see if you've ever<font color="#E5E5E5"> taken a CS class</font>

305
00:13:13,829 --> 00:13:18,779
<font color="#CCCCCC">you've seen one</font><font color="#E5E5E5"> of these and it's a</font>

306
00:13:16,560 --> 00:13:20,399
<font color="#E5E5E5">comparison function</font><font color="#CCCCCC"> they're pretty</font>

307
00:13:18,779 --> 00:13:23,009
<font color="#E5E5E5">simple you give it two inputs and it</font>

308
00:13:20,399 --> 00:13:26,639
says<font color="#E5E5E5"> yay or nay yes they're equal now no</font>

309
00:13:23,009 --> 00:13:28,500
they're not equal<font color="#CCCCCC"> and I think there's a</font>

310
00:13:26,639 --> 00:13:32,399
handful more but they all work on the

311
00:13:28,500 --> 00:13:34,170
exact same premise so<font color="#E5E5E5"> the one that was</font>

312
00:13:32,399 --> 00:13:38,009
the smallest that was the easiest<font color="#E5E5E5"> to</font>

313
00:13:34,170 --> 00:13:41,309
bring up here<font color="#E5E5E5"> was string compare</font><font color="#CCCCCC"> whoo</font>

314
00:13:38,009 --> 00:13:43,589
so given two pointers start at<font color="#E5E5E5"> the</font>

315
00:13:41,309 --> 00:13:45,230
beginning of the pointer check to<font color="#E5E5E5"> see if</font>

316
00:13:43,589 --> 00:13:48,480
the<font color="#E5E5E5"> first two are equal then exit out</font>

317
00:13:45,230 --> 00:13:50,670
and you do this again<font color="#E5E5E5"> and again</font><font color="#CCCCCC"> and</font>

318
00:13:48,480 --> 00:13:52,500
again and<font color="#E5E5E5"> again and again and you you</font>

319
00:13:50,670 --> 00:13:53,670
run this until you find an alternate

320
00:13:52,500 --> 00:13:57,689
<font color="#E5E5E5">that that's just a normal</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> for</font>

321
00:13:53,670 --> 00:14:00,809
<font color="#CCCCCC">strings but what happens if only the</font>

322
00:13:57,689 --> 00:14:02,939
first one is equal<font color="#E5E5E5"> to that second one</font>

323
00:14:00,809 --> 00:14:04,230
that<font color="#E5E5E5"> first character in both strings is</font>

324
00:14:02,939 --> 00:14:07,500
equal but the second character isn't

325
00:14:04,230 --> 00:14:09,840
well<font color="#CCCCCC"> neck sits out early</font>

326
00:14:07,500 --> 00:14:11,970
so you might<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to follow along</font>

327
00:14:09,840 --> 00:14:14,430
with<font color="#CCCCCC"> what I'm saying here if my first</font>

328
00:14:11,970 --> 00:14:18,210
<font color="#E5E5E5">character is right</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> execute slightly</font>

329
00:14:14,430 --> 00:14:19,979
<font color="#E5E5E5">more instructions</font><font color="#CCCCCC"> if my first two</font>

330
00:14:18,210 --> 00:14:23,040
<font color="#E5E5E5">characters are</font><font color="#CCCCCC"> right I execute slightly</font>

331
00:14:19,980 --> 00:14:24,570
more instructions<font color="#E5E5E5"> and this happens</font><font color="#CCCCCC"> over</font>

332
00:14:23,040 --> 00:14:28,140
and<font color="#E5E5E5"> over again for each of these</font>

333
00:14:24,570 --> 00:14:33,180
comparison functions<font color="#E5E5E5"> so if there were</font>

334
00:14:28,140 --> 00:14:35,760
some way<font color="#CCCCCC"> to count instructions</font><font color="#E5E5E5"> we could</font>

335
00:14:33,180 --> 00:14:36,150
pretty quickly<font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out what's going</font>

336
00:14:35,760 --> 00:14:42,050
on

337
00:14:36,150 --> 00:14:47,819
so hopefully<font color="#E5E5E5"> this next video works and</font>

338
00:14:42,050 --> 00:14:50,040
all<font color="#E5E5E5"> of my videos are failing me</font><font color="#CCCCCC"> oh I</font>

339
00:14:47,820 --> 00:14:52,310
just needed to<font color="#CCCCCC"> double click it oh cool</font>

340
00:14:50,040 --> 00:14:52,310
<font color="#E5E5E5">okay</font>

341
00:14:53,210 --> 00:14:56,210
what

342
00:14:58,220 --> 00:15:07,329
if to<font color="#E5E5E5"> reverse engineer</font><font color="#CCCCCC"> it is it running</font>

343
00:15:03,490 --> 00:15:10,699
<font color="#E5E5E5">man okay well I have the videos on here</font>

344
00:15:07,329 --> 00:15:12,019
and once we get past this part<font color="#E5E5E5"> I'll pull</font>

345
00:15:10,699 --> 00:15:15,349
<font color="#CCCCCC">up the videos</font><font color="#E5E5E5"> I've got them in</font><font color="#CCCCCC"> a</font>

346
00:15:12,019 --> 00:15:16,939
<font color="#E5E5E5">different folder</font><font color="#CCCCCC"> but what we're doing</font>

347
00:15:15,350 --> 00:15:18,970
<font color="#CCCCCC">here is we're literally</font><font color="#E5E5E5"> running through</font>

348
00:15:16,939 --> 00:15:21,889
the alphabet<font color="#CCCCCC"> for that first character</font>

349
00:15:18,970 --> 00:15:25,279
a-b-c-d-e-f-g all the way down<font color="#CCCCCC"> you know</font>

350
00:15:21,889 --> 00:15:27,949
the<font color="#E5E5E5"> alphabet and we're gonna see that</font>

351
00:15:25,279 --> 00:15:30,439
<font color="#E5E5E5">one of those characters</font><font color="#CCCCCC"> execute</font><font color="#E5E5E5"> s'more</font>

352
00:15:27,949 --> 00:15:32,349
instructions than the other ones<font color="#E5E5E5"> what a</font>

353
00:15:30,439 --> 00:15:35,660
coincidence

354
00:15:32,350 --> 00:15:37,819
and so this process can<font color="#CCCCCC"> be pretty hard</font>

355
00:15:35,660 --> 00:15:41,209
<font color="#CCCCCC">oh you can see</font><font color="#E5E5E5"> the command up there</font>

356
00:15:37,819 --> 00:15:43,128
<font color="#CCCCCC">I love gross bash one-liners but I know</font>

357
00:15:41,209 --> 00:15:45,258
the security<font color="#E5E5E5"> community doesn't so I</font>

358
00:15:43,129 --> 00:15:47,389
decided to compress all of<font color="#CCCCCC"> this</font><font color="#E5E5E5"> and do a</font>

359
00:15:45,259 --> 00:15:49,639
tool and put it all online<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> you</font>

360
00:15:47,389 --> 00:15:51,800
don't need<font color="#CCCCCC"> to write a bash loop that</font>

361
00:15:49,639 --> 00:15:54,199
loops<font color="#E5E5E5"> over every single</font><font color="#CCCCCC"> character in the</font>

362
00:15:51,800 --> 00:15:55,910
<font color="#CCCCCC">alphabet and</font><font color="#E5E5E5"> then runs pin against it to</font>

363
00:15:54,199 --> 00:15:58,490
try and instrument it and do<font color="#E5E5E5"> all of this</font>

364
00:15:55,910 --> 00:16:02,959
funkiness<font color="#E5E5E5"> so I built a tool called pin</font>

365
00:15:58,490 --> 00:16:06,189
CTF<font color="#CCCCCC"> and all it is is its automating that</font>

366
00:16:02,959 --> 00:16:09,380
process of checking the next input

367
00:16:06,189 --> 00:16:11,930
<font color="#E5E5E5">against your flag</font><font color="#CCCCCC"> you can do parallel</font>

368
00:16:09,380 --> 00:16:14,600
processing<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> command line</font>

369
00:16:11,930 --> 00:16:16,579
arguments you can<font color="#E5E5E5"> do standard in and you</font>

370
00:16:14,600 --> 00:16:18,740
can<font color="#E5E5E5"> also recover from canceled sessions</font>

371
00:16:16,579 --> 00:16:20,120
because<font color="#E5E5E5"> it can suck when halfway through</font>

372
00:16:18,740 --> 00:16:21,740
you figure out<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have an issue in your</font>

373
00:16:20,120 --> 00:16:24,110
bash loop and<font color="#E5E5E5"> you got to start all over</font>

374
00:16:21,740 --> 00:16:27,079
again<font color="#CCCCCC"> oh man that's why you</font><font color="#E5E5E5"> shouldn't</font>

375
00:16:24,110 --> 00:16:30,889
<font color="#E5E5E5">write bash one-liners all right so this</font>

376
00:16:27,079 --> 00:16:36,290
<font color="#CCCCCC">next one is the one that I will pull up</font>

377
00:16:30,889 --> 00:16:38,980
if it's not<font color="#E5E5E5"> coming up got some technical</font>

378
00:16:36,290 --> 00:16:38,980
difficulties

379
00:16:40,610 --> 00:16:47,810
<font color="#E5E5E5">all of my demos are failing me today</font>

380
00:16:42,769 --> 00:16:51,550
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> and give me just one moment and</font>

381
00:16:47,810 --> 00:16:51,550
I will<font color="#E5E5E5"> open up the videos for you</font>

382
00:17:16,150 --> 00:17:21,600
that<font color="#CCCCCC"> cancel out there we go</font>

383
00:17:26,359 --> 00:17:36,500
<font color="#CCCCCC">you guys get</font><font color="#E5E5E5"> to see all of my personal</font>

384
00:17:28,369 --> 00:17:37,879
documents pin CTF video I took<font color="#E5E5E5"> all this</font>

385
00:17:36,500 --> 00:17:41,150
time<font color="#E5E5E5"> to record these videos</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> you guys</font>

386
00:17:37,880 --> 00:17:43,520
<font color="#E5E5E5">okay cool oh yes we</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> it perfect</font>

387
00:17:41,150 --> 00:17:44,809
<font color="#CCCCCC">so we're running</font><font color="#E5E5E5"> it through once and we</font>

388
00:17:43,520 --> 00:17:46,280
<font color="#E5E5E5">can see we're checking the very end</font>

389
00:17:44,809 --> 00:17:48,290
character here<font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> kind of going a</font>

390
00:17:46,280 --> 00:17:52,399
little bit slow<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to give you</font>

391
00:17:48,290 --> 00:17:54,020
<font color="#CCCCCC">guys lightning fast CTF solving so</font>

392
00:17:52,400 --> 00:17:56,510
instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> running it on one core I'm</font>

393
00:17:54,020 --> 00:17:58,879
going to run<font color="#E5E5E5"> 22 concurrent executions of</font>

394
00:17:56,510 --> 00:18:00,559
this thing on a beefy system I've got

395
00:17:58,880 --> 00:18:01,010
somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> oh the videos jump ahead</font>

396
00:18:00,559 --> 00:18:03,020
<font color="#E5E5E5">of me</font>

397
00:18:01,010 --> 00:18:05,110
<font color="#E5E5E5">and you can see this flag printed out</font>

398
00:18:03,020 --> 00:18:14,600
before I could<font color="#CCCCCC"> even finish that</font><font color="#E5E5E5"> sentence</font>

399
00:18:05,110 --> 00:18:16,399
and they wanted you to<font color="#E5E5E5"> use Hardware</font>

400
00:18:14,600 --> 00:18:18,620
break points instead of instruction

401
00:18:16,400 --> 00:18:20,480
counting but because they used a mem

402
00:18:18,620 --> 00:18:27,399
<font color="#E5E5E5">compare somewhere down the</font><font color="#CCCCCC"> line</font>

403
00:18:20,480 --> 00:18:30,730
it didn't matter<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> let's find</font>

404
00:18:27,400 --> 00:18:30,730
where<font color="#E5E5E5"> we</font>

405
00:18:34,150 --> 00:18:40,210
that was real time<font color="#E5E5E5"> yeah there was no</font>

406
00:18:37,210 --> 00:18:41,590
speeding<font color="#E5E5E5"> up in that video</font><font color="#CCCCCC"> who forgot</font>

407
00:18:40,210 --> 00:18:43,870
<font color="#E5E5E5">time I can run it a couple times and you</font>

408
00:18:41,590 --> 00:18:48,220
<font color="#CCCCCC">can you can</font><font color="#E5E5E5"> gotta get pull out your</font>

409
00:18:43,870 --> 00:18:51,250
stopwatch if you want so<font color="#E5E5E5"> that's cool</font>

410
00:18:48,220 --> 00:18:53,140
when there's<font color="#E5E5E5"> one issue</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> overcome in</font>

411
00:18:51,250 --> 00:18:56,470
reverse<font color="#CCCCCC"> engineering problems there's a</font>

412
00:18:53,140 --> 00:18:59,080
mem copy or aster compare or<font color="#CCCCCC"> oh whatever</font>

413
00:18:56,470 --> 00:19:01,990
<font color="#E5E5E5">some sort of</font><font color="#CCCCCC"> byte</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> byte comparison</font>

414
00:18:59,080 --> 00:19:04,840
<font color="#E5E5E5">but what happens when we come to pony</font>

415
00:19:01,990 --> 00:19:05,730
<font color="#E5E5E5">balls</font><font color="#CCCCCC"> to exploitable there's so many</font>

416
00:19:04,840 --> 00:19:08,889
different<font color="#E5E5E5"> things</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to overcome</font>

417
00:19:05,730 --> 00:19:10,330
<font color="#CCCCCC">you might be given a Lib C you might</font>

418
00:19:08,890 --> 00:19:12,040
<font color="#E5E5E5">have to fight a soul or you might have</font>

419
00:19:10,330 --> 00:19:13,770
<font color="#E5E5E5">to fight</font><font color="#CCCCCC"> DEP</font><font color="#E5E5E5"> you might have a weird</font>

420
00:19:12,040 --> 00:19:17,830
<font color="#E5E5E5">puzzle to solve before you even get the</font>

421
00:19:13,770 --> 00:19:20,110
to the the function<font color="#E5E5E5"> you I don't know you</font>

422
00:19:17,830 --> 00:19:22,090
might<font color="#CCCCCC"> have to make</font><font color="#E5E5E5"> your own primitive</font>

423
00:19:20,110 --> 00:19:24,340
<font color="#E5E5E5">and try and figure out how all</font><font color="#CCCCCC"> of that</font>

424
00:19:22,090 --> 00:19:25,750
<font color="#E5E5E5">works and then you have this nonsense of</font>

425
00:19:24,340 --> 00:19:28,629
trying<font color="#E5E5E5"> to connect to a port and</font>

426
00:19:25,750 --> 00:19:34,120
exploiting it holy cow that<font color="#CCCCCC"> is way too</font>

427
00:19:28,630 --> 00:19:36,580
<font color="#E5E5E5">much effort</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> let's talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> little</font>

428
00:19:34,120 --> 00:19:38,379
<font color="#E5E5E5">bit about</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> of the most common</font>

429
00:19:36,580 --> 00:19:41,199
vulnerabilities you<font color="#E5E5E5"> see in CTF problems</font>

430
00:19:38,380 --> 00:19:43,420
so the two big ones<font color="#E5E5E5"> outside of</font><font color="#CCCCCC"> heap</font>

431
00:19:41,200 --> 00:19:45,700
exploitation are buffer overflows and

432
00:19:43,420 --> 00:19:47,830
format string vulnerabilities

433
00:19:45,700 --> 00:19:49,480
if you've taken a<font color="#E5E5E5"> CS class that does C</font>

434
00:19:47,830 --> 00:19:51,970
programming<font color="#E5E5E5"> they probably talked about</font>

435
00:19:49,480 --> 00:19:55,480
<font color="#CCCCCC">buffer overflows</font><font color="#E5E5E5"> you have some variable</font>

436
00:19:51,970 --> 00:19:57,640
on the<font color="#E5E5E5"> stack</font><font color="#CCCCCC"> that has too many inputs or</font>

437
00:19:55,480 --> 00:19:59,770
<font color="#E5E5E5">I guess too much of an input fed into it</font>

438
00:19:57,640 --> 00:20:01,690
and it writes values all<font color="#E5E5E5"> the way up the</font>

439
00:19:59,770 --> 00:20:03,129
stack possibly<font color="#CCCCCC"> corrupting your</font><font color="#E5E5E5"> program</font>

440
00:20:01,690 --> 00:20:05,040
counter<font color="#E5E5E5"> and then you can point this</font>

441
00:20:03,130 --> 00:20:07,210
program counter wherever<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> so</font>

442
00:20:05,040 --> 00:20:08,470
<font color="#CCCCCC">sometimes in CTF problems that</font><font color="#E5E5E5"> make it</font>

443
00:20:07,210 --> 00:20:10,860
convenient<font color="#E5E5E5"> for you</font><font color="#CCCCCC"> and they have a win</font>

444
00:20:08,470 --> 00:20:12,910
function so that's one type<font color="#E5E5E5"> you can have</font>

445
00:20:10,860 --> 00:20:15,879
<font color="#E5E5E5">sometimes they're not</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> nice and then</font>

446
00:20:12,910 --> 00:20:19,360
trying<font color="#E5E5E5"> to emulate problems from the</font>

447
00:20:15,880 --> 00:20:20,590
1990s<font color="#E5E5E5"> and you have to use shellcode</font><font color="#CCCCCC"> okay</font>

448
00:20:19,360 --> 00:20:22,870
that's not too bad you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> Google</font>

449
00:20:20,590 --> 00:20:25,629
shellcode and<font color="#CCCCCC"> you can try and finagle</font>

450
00:20:22,870 --> 00:20:28,300
what is<font color="#E5E5E5"> little-endian and</font><font color="#CCCCCC"> trying to get</font>

451
00:20:25,630 --> 00:20:29,350
all this swapping done<font color="#E5E5E5"> and then if</font>

452
00:20:28,300 --> 00:20:30,639
they're trying<font color="#CCCCCC"> to emulate more modern</font>

453
00:20:29,350 --> 00:20:33,129
systems they might<font color="#E5E5E5"> make you do something</font>

454
00:20:30,640 --> 00:20:35,350
called<font color="#CCCCCC"> a wrap chain</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> won't go into</font>

455
00:20:33,130 --> 00:20:36,940
<font color="#CCCCCC">the specifics but just</font><font color="#E5E5E5"> knowing that</font>

456
00:20:35,350 --> 00:20:38,560
<font color="#CCCCCC">these are the high level techniques</font>

457
00:20:36,940 --> 00:20:42,340
towards a lot of these problems<font color="#E5E5E5"> is</font>

458
00:20:38,560 --> 00:20:44,290
enough<font color="#E5E5E5"> for this demonstration</font><font color="#CCCCCC"> so that</font>

459
00:20:42,340 --> 00:20:45,610
can be<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> work I got to run</font><font color="#CCCCCC"> all</font>

460
00:20:44,290 --> 00:20:47,620
sorts<font color="#E5E5E5"> of tools or I might have to build</font>

461
00:20:45,610 --> 00:20:50,949
<font color="#CCCCCC">one of these manually</font>

462
00:20:47,620 --> 00:20:52,809
yeah<font color="#E5E5E5"> that sucks okay</font>

463
00:20:50,950 --> 00:20:54,159
so now that we've<font color="#E5E5E5"> identified the</font><font color="#CCCCCC"> first</font>

464
00:20:52,809 --> 00:20:57,730
sucky problem let's look at the second

465
00:20:54,159 --> 00:20:59,770
one<font color="#E5E5E5"> format strings so if you do printf</font>

466
00:20:57,730 --> 00:21:01,419
<font color="#E5E5E5">and you have your user input just right</font>

467
00:20:59,770 --> 00:21:03,039
there in printf<font color="#E5E5E5"> you can do whatever you</font>

468
00:21:01,419 --> 00:21:04,900
want<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can print out values from</font>

469
00:21:03,039 --> 00:21:08,350
memory<font color="#CCCCCC"> you can write</font><font color="#E5E5E5"> to arbitrary</font>

470
00:21:04,900 --> 00:21:10,000
locations<font color="#E5E5E5"> you own the whole</font><font color="#CCCCCC"> thing and so</font>

471
00:21:08,350 --> 00:21:12,459
generally<font color="#CCCCCC"> they're kind of in two parts</font>

472
00:21:10,000 --> 00:21:14,799
one is<font color="#E5E5E5"> you leak a flag from somewhere in</font>

473
00:21:12,460 --> 00:21:18,549
memory<font color="#E5E5E5"> who knows</font><font color="#CCCCCC"> and then the second one</font>

474
00:21:14,799 --> 00:21:20,620
is<font color="#E5E5E5"> you overwrite some writable portion</font>

475
00:21:18,549 --> 00:21:23,200
of memory<font color="#CCCCCC"> to make it point to something</font>

476
00:21:20,620 --> 00:21:25,059
malicious<font color="#CCCCCC"> like some shell code</font><font color="#E5E5E5"> or in</font>

477
00:21:23,200 --> 00:21:28,899
function or a<font color="#CCCCCC"> rap chain whoa awesome</font>

478
00:21:25,059 --> 00:21:31,270
<font color="#CCCCCC">okay and usually we overwrite the got</font>

479
00:21:28,899 --> 00:21:34,330
<font color="#E5E5E5">the</font><font color="#CCCCCC"> global offset table or the PLT the</font>

480
00:21:31,270 --> 00:21:36,010
procedure linkage table and holy cow

481
00:21:34,330 --> 00:21:38,770
that's<font color="#E5E5E5"> a lot of work that's way too much</font>

482
00:21:36,010 --> 00:21:40,270
work<font color="#CCCCCC"> for</font><font color="#E5E5E5"> me okay</font><font color="#CCCCCC"> so let's talk about a</font>

483
00:21:38,770 --> 00:21:43,000
framework that<font color="#CCCCCC"> makes this a</font><font color="#E5E5E5"> little bit</font>

484
00:21:40,270 --> 00:21:45,279
easier<font color="#CCCCCC"> pone tools</font><font color="#E5E5E5"> it's a Python library</font>

485
00:21:43,000 --> 00:21:47,049
<font color="#CCCCCC">if you google</font><font color="#E5E5E5"> pone tools format strings</font>

486
00:21:45,279 --> 00:21:48,340
or<font color="#CCCCCC"> poned</font><font color="#E5E5E5"> tools buffer overflow they have</font>

487
00:21:47,049 --> 00:21:50,500
a whole bunch<font color="#CCCCCC"> of things that make it</font><font color="#E5E5E5"> so</font>

488
00:21:48,340 --> 00:21:52,389
much easier<font color="#CCCCCC"> they can fix all of</font><font color="#E5E5E5"> your</font>

489
00:21:50,500 --> 00:21:53,529
<font color="#E5E5E5">Indian swapping endianness swapping they</font>

490
00:21:52,390 --> 00:21:56,620
can build some of your format string

491
00:21:53,529 --> 00:21:59,590
payloads for you<font color="#E5E5E5"> and then it just sounds</font>

492
00:21:56,620 --> 00:22:02,549
kind<font color="#E5E5E5"> of cool yeah you can interact</font><font color="#CCCCCC"> with</font>

493
00:21:59,590 --> 00:22:05,620
network sockets you<font color="#E5E5E5"> can run processes</font>

494
00:22:02,549 --> 00:22:09,490
<font color="#CCCCCC">it's got the whole nine yards</font><font color="#E5E5E5"> and it</font>

495
00:22:05,620 --> 00:22:13,449
makes it really really really<font color="#CCCCCC"> easy yeah</font>

496
00:22:09,490 --> 00:22:14,830
it's probably<font color="#CCCCCC"> my shortest slide</font><font color="#E5E5E5"> so again</font>

497
00:22:13,450 --> 00:22:16,570
we got<font color="#E5E5E5"> to break up this problem if we</font>

498
00:22:14,830 --> 00:22:18,820
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> solve this thing really really</font>

499
00:22:16,570 --> 00:22:20,439
really fast<font color="#CCCCCC"> we have to understand how to</font>

500
00:22:18,820 --> 00:22:22,029
<font color="#E5E5E5">run the program is it taking in a</font>

501
00:22:20,440 --> 00:22:25,809
<font color="#E5E5E5">command-line argument is it standard in</font>

502
00:22:22,029 --> 00:22:28,690
what is it<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have to overcome some sort</font>

503
00:22:25,809 --> 00:22:31,029
of small puzzle<font color="#CCCCCC"> it might be entering</font><font color="#E5E5E5"> in</font>

504
00:22:28,690 --> 00:22:32,950
our name it might be a menu<font color="#CCCCCC"> some times</font>

505
00:22:31,029 --> 00:22:35,799
that<font color="#E5E5E5"> make you do some math for them who</font>

506
00:22:32,950 --> 00:22:37,270
knows<font color="#CCCCCC"> I</font><font color="#E5E5E5"> certainly don't and then we need</font>

507
00:22:35,799 --> 00:22:39,668
<font color="#CCCCCC">to</font><font color="#E5E5E5"> find the vulnerability we need to</font>

508
00:22:37,270 --> 00:22:42,129
<font color="#CCCCCC">accurately identify what this</font>

509
00:22:39,669 --> 00:22:45,760
vulnerability<font color="#E5E5E5"> is and we need a reliable</font>

510
00:22:42,130 --> 00:22:48,640
<font color="#CCCCCC">method to do</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> and then finally we</font>

511
00:22:45,760 --> 00:22:51,250
<font color="#CCCCCC">need to weaponize</font><font color="#E5E5E5"> it and throw it that's</font>

512
00:22:48,640 --> 00:22:53,020
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> steps so reason why a lot of</font>

513
00:22:51,250 --> 00:22:53,950
poem problems have a lot<font color="#CCCCCC"> of points</font>

514
00:22:53,020 --> 00:22:58,090
<font color="#CCCCCC">associated with them</font>

515
00:22:53,950 --> 00:22:59,350
well conveniently<font color="#E5E5E5"> we've got a couple</font>

516
00:22:58,090 --> 00:23:01,270
<font color="#E5E5E5">tools that can</font><font color="#CCCCCC"> help us</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> that</font>

517
00:22:59,350 --> 00:23:04,810
so anger can run the

518
00:23:01,270 --> 00:23:06,940
<font color="#E5E5E5">forever the symbolic execution stuff</font>

519
00:23:04,810 --> 00:23:09,970
that was tracing a program for us can

520
00:23:06,940 --> 00:23:12,100
<font color="#E5E5E5">help us overcome that puzzle and it can</font>

521
00:23:09,970 --> 00:23:14,950
also<font color="#E5E5E5"> to some extent help us find a</font>

522
00:23:12,100 --> 00:23:16,360
vulnerability<font color="#CCCCCC"> so all that we're left</font>

523
00:23:14,950 --> 00:23:19,450
with now is weaponizing the

524
00:23:16,360 --> 00:23:21,639
vulnerability<font color="#E5E5E5"> and throwing it so if we</font>

525
00:23:19,450 --> 00:23:24,610
had some<font color="#E5E5E5"> sort of framework</font><font color="#CCCCCC"> that made it</font>

526
00:23:21,640 --> 00:23:28,650
easy to<font color="#E5E5E5"> run these things</font><font color="#CCCCCC"> or build format</font>

527
00:23:24,610 --> 00:23:34,330
string payloads<font color="#CCCCCC"> I guess would</font><font color="#E5E5E5"> be in luck</font>

528
00:23:28,650 --> 00:23:36,490
<font color="#CCCCCC">so there's a</font><font color="#E5E5E5"> couple examples online on</font>

529
00:23:34,330 --> 00:23:39,310
what what they call<font color="#E5E5E5"> automatic exploit</font>

530
00:23:36,490 --> 00:23:42,460
generation and I'll get<font color="#E5E5E5"> to the talking</font>

531
00:23:39,310 --> 00:23:46,389
<font color="#CCCCCC">about those and talking about</font><font color="#E5E5E5"> why they</font>

532
00:23:42,460 --> 00:23:48,100
suck in<font color="#E5E5E5"> just a moment but we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to try</font>

533
00:23:46,390 --> 00:23:50,770
<font color="#CCCCCC">and make this process easier so what are</font>

534
00:23:48,100 --> 00:23:52,629
the hard part's finding the input like I

535
00:23:50,770 --> 00:23:54,910
don't<font color="#E5E5E5"> know what we're trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> send</font>

536
00:23:52,630 --> 00:23:56,950
<font color="#E5E5E5">into this program to make</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> crash or</font>

537
00:23:54,910 --> 00:23:59,140
make<font color="#E5E5E5"> it do whatever we need</font><font color="#CCCCCC"> to fix</font>

538
00:23:56,950 --> 00:24:00,550
<font color="#E5E5E5">common mistakes cuz I can't keep that</font><font color="#CCCCCC"> in</font>

539
00:23:59,140 --> 00:24:03,460
my head I don't<font color="#E5E5E5"> remember how it what</font>

540
00:24:00,550 --> 00:24:05,230
<font color="#E5E5E5">kind of endianness</font><font color="#CCCCCC"> I'm on</font><font color="#E5E5E5"> and then</font>

541
00:24:03,460 --> 00:24:07,840
there's a concept<font color="#E5E5E5"> of bad characters in</font>

542
00:24:05,230 --> 00:24:09,640
<font color="#CCCCCC">shell code</font><font color="#E5E5E5"> so we talked about strings</font>

543
00:24:07,840 --> 00:24:11,679
for a second earlier and we talked about

544
00:24:09,640 --> 00:24:14,350
a null<font color="#E5E5E5"> terminator it's just a null byte</font>

545
00:24:11,680 --> 00:24:16,180
<font color="#E5E5E5">in there that tells you to stop the</font>

546
00:24:14,350 --> 00:24:18,129
string well if we put<font color="#E5E5E5"> shell code into</font>

547
00:24:16,180 --> 00:24:19,720
there it's gonna truncate or Shulkin it

548
00:24:18,130 --> 00:24:23,440
won't run properly<font color="#E5E5E5"> so we need a method</font>

549
00:24:19,720 --> 00:24:25,660
of identifying<font color="#E5E5E5"> those bad bytes</font><font color="#CCCCCC"> and then</font>

550
00:24:23,440 --> 00:24:27,790
<font color="#CCCCCC">cuz because I'm a lazy human being I</font>

551
00:24:25,660 --> 00:24:32,800
<font color="#E5E5E5">want</font><font color="#CCCCCC"> it to send the</font><font color="#E5E5E5"> exploit for me and I</font>

552
00:24:27,790 --> 00:24:34,240
want it<font color="#E5E5E5"> to print out the flag</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> so as</font>

553
00:24:32,800 --> 00:24:35,530
you guys guessed it the<font color="#CCCCCC"> reason why</font>

554
00:24:34,240 --> 00:24:36,340
you're sitting<font color="#CCCCCC"> here there is a tool that</font>

555
00:24:35,530 --> 00:24:39,940
<font color="#E5E5E5">can do all this for us</font>

556
00:24:36,340 --> 00:24:41,740
<font color="#E5E5E5">I built it</font><font color="#CCCCCC"> and it's called zeratul it</font>

557
00:24:39,940 --> 00:24:42,940
was originally a slur<font color="#CCCCCC"> that someone had</font>

558
00:24:41,740 --> 00:24:47,500
called me<font color="#E5E5E5"> because I was playing a</font>

559
00:24:42,940 --> 00:24:50,110
<font color="#CCCCCC">character named zeratul zeratul 2ul and</font>

560
00:24:47,500 --> 00:24:52,300
so it's the process<font color="#E5E5E5"> of automating every</font>

561
00:24:50,110 --> 00:24:54,159
single one<font color="#E5E5E5"> of these components so that</font>

562
00:24:52,300 --> 00:24:55,300
<font color="#CCCCCC">we can get all the</font><font color="#E5E5E5"> points because that's</font>

563
00:24:54,160 --> 00:24:56,770
what we want<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to solve all these</font>

564
00:24:55,300 --> 00:24:58,990
problems really really fast so that<font color="#E5E5E5"> we</font>

565
00:24:56,770 --> 00:25:03,190
can spend our time trying to<font color="#E5E5E5"> solve the</font>

566
00:24:58,990 --> 00:25:05,350
harder problems so it's<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> kind of</font>

567
00:25:03,190 --> 00:25:06,820
<font color="#E5E5E5">easy to figure out what kind of input</font>

568
00:25:05,350 --> 00:25:09,459
you're looking for you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> just see</font><font color="#E5E5E5"> what</font>

569
00:25:06,820 --> 00:25:12,129
functions are<font color="#E5E5E5"> in there</font><font color="#CCCCCC"> if it has open</font>

570
00:25:09,460 --> 00:25:15,040
it's probably interacting with a file if

571
00:25:12,130 --> 00:25:18,010
it's doing guests or<font color="#E5E5E5"> scanf</font><font color="#CCCCCC"> for read</font><font color="#E5E5E5"> it's</font>

572
00:25:15,040 --> 00:25:19,210
standard in<font color="#E5E5E5"> and anything else</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

573
00:25:18,010 --> 00:25:20,950
just<font color="#CCCCCC"> kind of throw into a bucket</font><font color="#E5E5E5"> and say</font>

574
00:25:19,210 --> 00:25:22,420
it's probably<font color="#E5E5E5"> an argument</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> or maybe I</font>

575
00:25:20,950 --> 00:25:24,430
<font color="#E5E5E5">should just you know</font><font color="#CCCCCC"> exit out as arrow</font>

576
00:25:22,420 --> 00:25:26,950
tool<font color="#CCCCCC"> and try and figure</font><font color="#E5E5E5"> out what's</font>

577
00:25:24,430 --> 00:25:28,750
actually going on<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so now that</font>

578
00:25:26,950 --> 00:25:31,170
<font color="#E5E5E5">we've done the hard part</font><font color="#CCCCCC"> let's talk a</font>

579
00:25:28,750 --> 00:25:33,910
little<font color="#CCCCCC"> bit about memory and</font><font color="#E5E5E5"> how</font>

580
00:25:31,170 --> 00:25:36,970
traditional<font color="#CCCCCC"> or at least online</font><font color="#E5E5E5"> automatic</font>

581
00:25:33,910 --> 00:25:39,820
exploit generation works<font color="#E5E5E5"> so this is our</font>

582
00:25:36,970 --> 00:25:42,790
program<font color="#E5E5E5"> here running in memory</font><font color="#CCCCCC"> no videos</font>

583
00:25:39,820 --> 00:25:44,230
this<font color="#E5E5E5"> time</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> should work and so we</font><font color="#CCCCCC"> have</font>

584
00:25:42,790 --> 00:25:46,420
to stack all<font color="#E5E5E5"> the way down there so we're</font>

585
00:25:44,230 --> 00:25:47,980
<font color="#E5E5E5">gonna talk about stack overflows in this</font>

586
00:25:46,420 --> 00:25:50,350
example<font color="#E5E5E5"> cuz I think those ones are</font>

587
00:25:47,980 --> 00:25:52,690
really<font color="#E5E5E5"> visual when you're calling</font><font color="#CCCCCC"> a</font>

588
00:25:50,350 --> 00:25:54,879
function<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have this concept of a</font>

589
00:25:52,690 --> 00:25:56,770
stack frame<font color="#E5E5E5"> you have your return address</font>

590
00:25:54,880 --> 00:25:59,980
<font color="#CCCCCC">you have any arguments you put in there</font>

591
00:25:56,770 --> 00:26:03,280
<font color="#CCCCCC">you have your</font><font color="#E5E5E5"> air local variables there</font>

592
00:25:59,980 --> 00:26:05,260
and usually<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> those guys one of the</font>

593
00:26:03,280 --> 00:26:09,310
local variables usually gets overwritten

594
00:26:05,260 --> 00:26:11,020
for a buffer overflow so every single

595
00:26:09,310 --> 00:26:14,020
<font color="#CCCCCC">time you're</font><font color="#E5E5E5"> running a program</font><font color="#CCCCCC"> in say</font>

596
00:26:11,020 --> 00:26:15,910
anger you need to ask did that return

597
00:26:14,020 --> 00:26:19,180
address<font color="#CCCCCC"> somehow become symbolic</font><font color="#E5E5E5"> is</font>

598
00:26:15,910 --> 00:26:21,670
there's some value in one of<font color="#E5E5E5"> those</font>

599
00:26:19,180 --> 00:26:24,430
programs<font color="#E5E5E5"> state representations</font><font color="#CCCCCC"> that can</font>

600
00:26:21,670 --> 00:26:26,770
overwrite<font color="#CCCCCC"> that thing cool</font><font color="#E5E5E5"> this seems</font>

601
00:26:24,430 --> 00:26:28,960
pretty intuitive<font color="#CCCCCC"> okay that doesn't seem</font>

602
00:26:26,770 --> 00:26:32,379
<font color="#E5E5E5">too bad</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so we've got</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> symbolic</font>

603
00:26:28,960 --> 00:26:36,250
<font color="#E5E5E5">return address well what next</font><font color="#CCCCCC"> what we</font>

604
00:26:32,380 --> 00:26:38,560
need to ask<font color="#E5E5E5"> anger or our SMT</font><font color="#CCCCCC"> prover a</font>

605
00:26:36,250 --> 00:26:40,800
component<font color="#E5E5E5"> and anger that tells us</font>

606
00:26:38,560 --> 00:26:43,540
whether something can or can't happen

607
00:26:40,800 --> 00:26:45,399
<font color="#CCCCCC">can this point back into some form of</font>

608
00:26:43,540 --> 00:26:46,960
user<font color="#E5E5E5"> input</font><font color="#CCCCCC"> okay so we're asking it two</font>

609
00:26:45,400 --> 00:26:49,810
things now<font color="#CCCCCC"> it is a return</font><font color="#E5E5E5"> address</font>

610
00:26:46,960 --> 00:26:51,820
symbolic and can we<font color="#CCCCCC"> point that program</font>

611
00:26:49,810 --> 00:26:53,320
counter to<font color="#E5E5E5"> user input</font><font color="#CCCCCC"> okay so this isn't</font>

612
00:26:51,820 --> 00:26:56,620
<font color="#E5E5E5">too complicated I can handle this</font><font color="#CCCCCC"> kind</font>

613
00:26:53,320 --> 00:26:57,669
<font color="#E5E5E5">of math and then generally you're trying</font>

614
00:26:56,620 --> 00:26:59,439
to get some<font color="#E5E5E5"> sort of execution not</font>

615
00:26:57,670 --> 00:27:01,900
<font color="#CCCCCC">everyone is gonna be so nice as to</font><font color="#E5E5E5"> give</font>

616
00:26:59,440 --> 00:27:03,370
you a win function so we need to see if

617
00:27:01,900 --> 00:27:05,050
there's a way we<font color="#E5E5E5"> can point it at some</font>

618
00:27:03,370 --> 00:27:08,229
<font color="#CCCCCC">shellcode or a wrap chain and the</font>

619
00:27:05,050 --> 00:27:10,899
current online examples<font color="#E5E5E5"> show you some</font>

620
00:27:08,230 --> 00:27:13,420
<font color="#E5E5E5">shellcode some crappy shellcode but I</font>

621
00:27:10,900 --> 00:27:19,690
won't<font color="#E5E5E5"> get into that so I've got some</font>

622
00:27:13,420 --> 00:27:21,370
animation 2.0 going on yeah<font color="#E5E5E5"> so we just</font>

623
00:27:19,690 --> 00:27:25,630
<font color="#CCCCCC">replace our input with shellcode we</font><font color="#E5E5E5"> ask</font>

624
00:27:21,370 --> 00:27:27,320
<font color="#E5E5E5">anger if that's</font><font color="#CCCCCC"> possible so we have a</font>

625
00:27:25,630 --> 00:27:31,160
couple<font color="#CCCCCC"> issues here</font>

626
00:27:27,320 --> 00:27:33,110
this is pretty bad<font color="#E5E5E5"> like in theory it's</font>

627
00:27:31,160 --> 00:27:35,270
nice and everything<font color="#CCCCCC"> but buffer overflows</font>

628
00:27:33,110 --> 00:27:36,679
are<font color="#E5E5E5"> like almost never this clean what if</font>

629
00:27:35,270 --> 00:27:38,960
you<font color="#CCCCCC"> only have partial control</font><font color="#E5E5E5"> what if</font>

630
00:27:36,680 --> 00:27:41,120
you have bad bites what<font color="#E5E5E5"> well what if</font>

631
00:27:38,960 --> 00:27:44,060
<font color="#E5E5E5">your argue or your corruption is up</font>

632
00:27:41,120 --> 00:27:46,040
there in the<font color="#E5E5E5"> BSS</font><font color="#CCCCCC"> what what if it's doing</font>

633
00:27:44,060 --> 00:27:49,909
<font color="#E5E5E5">something in the heap like this is</font>

634
00:27:46,040 --> 00:27:50,990
awesome<font color="#CCCCCC"> for academic use oh</font><font color="#E5E5E5"> they're here</font>

635
00:27:49,910 --> 00:27:53,690
<font color="#CCCCCC">I was</font><font color="#E5E5E5"> talking about the issues</font><font color="#CCCCCC"> on the</font>

636
00:27:50,990 --> 00:27:55,250
<font color="#E5E5E5">next page</font><font color="#CCCCCC"> cool all right one shell code</font>

637
00:27:53,690 --> 00:27:58,040
choice<font color="#E5E5E5"> what what if you're one shell</font>

638
00:27:55,250 --> 00:27:59,630
code<font color="#CCCCCC"> doesn't work what what if that</font>

639
00:27:58,040 --> 00:28:02,629
they're blocking Cisco's or you're in a

640
00:27:59,630 --> 00:28:04,610
sandbox for<font color="#E5E5E5"> the using</font><font color="#CCCCCC"> P trace or one of</font>

641
00:28:02,630 --> 00:28:06,410
any modern<font color="#CCCCCC"> technique set trying to</font>

642
00:28:04,610 --> 00:28:08,090
<font color="#CCCCCC">mitigate that</font><font color="#E5E5E5"> stuff you need a way to</font>

643
00:28:06,410 --> 00:28:10,520
overcome those techniques maybe try

644
00:28:08,090 --> 00:28:13,970
multiple shell codes or try and<font color="#E5E5E5"> run</font>

645
00:28:10,520 --> 00:28:15,680
encoders on your shell code<font color="#CCCCCC"> and what if</font>

646
00:28:13,970 --> 00:28:17,860
you don't<font color="#E5E5E5"> have full control over the</font>

647
00:28:15,680 --> 00:28:19,940
program<font color="#CCCCCC"> counter sometimes that's okay</font>

648
00:28:17,860 --> 00:28:22,070
<font color="#CCCCCC">sometimes you</font><font color="#E5E5E5"> only need three bytes or</font>

649
00:28:19,940 --> 00:28:24,260
<font color="#CCCCCC">two bytes or</font><font color="#E5E5E5"> one byte there are no one</font>

650
00:28:22,070 --> 00:28:27,230
byte examples in my<font color="#E5E5E5"> examples but in</font>

651
00:28:24,260 --> 00:28:28,610
theory it could<font color="#E5E5E5"> work and then yeah I'm</font>

652
00:28:27,230 --> 00:28:29,960
lazy it doesn't throw<font color="#E5E5E5"> the exploit for</font>

653
00:28:28,610 --> 00:28:32,240
you<font color="#E5E5E5"> like it just kind of prints it out</font>

654
00:28:29,960 --> 00:28:34,730
<font color="#E5E5E5">and it says good luck and if you run</font><font color="#CCCCCC"> the</font>

655
00:28:32,240 --> 00:28:36,650
<font color="#E5E5E5">current one on anger it just breaks it</font>

656
00:28:34,730 --> 00:28:38,300
<font color="#E5E5E5">doesn't do anything</font><font color="#CCCCCC"> and then they don't</font>

657
00:28:36,650 --> 00:28:40,730
<font color="#CCCCCC">have</font><font color="#E5E5E5"> anything for format strings holy</font>

658
00:28:38,300 --> 00:28:44,440
cow we've got<font color="#CCCCCC"> issue after issue</font><font color="#E5E5E5"> after</font>

659
00:28:40,730 --> 00:28:47,810
issue with all these public examples so

660
00:28:44,440 --> 00:28:51,890
if you're willing to code<font color="#CCCCCC"> up all of</font>

661
00:28:47,810 --> 00:28:54,470
these edge cases<font color="#E5E5E5"> you can use</font><font color="#CCCCCC"> pwned tools</font>

662
00:28:51,890 --> 00:28:56,870
to cover all<font color="#CCCCCC"> of those pwned tools</font><font color="#E5E5E5"> can</font>

663
00:28:54,470 --> 00:28:59,090
give you<font color="#E5E5E5"> all sorts of shell code it can</font>

664
00:28:56,870 --> 00:29:01,669
<font color="#E5E5E5">give you arm</font><font color="#CCCCCC"> shell code x86 shell code I</font>

665
00:28:59,090 --> 00:29:03,379
think<font color="#CCCCCC"> it can give you met shell code it</font>

666
00:29:01,670 --> 00:29:05,030
can also run encoders on it<font color="#E5E5E5"> so if you</font>

667
00:29:03,380 --> 00:29:06,650
have a null byte<font color="#E5E5E5"> or if you have a</font>

668
00:29:05,030 --> 00:29:08,660
newline character and you can't have

669
00:29:06,650 --> 00:29:11,990
<font color="#E5E5E5">that in your input we can run encoders</font>

670
00:29:08,660 --> 00:29:13,580
and<font color="#E5E5E5"> get rid of that it's easy</font><font color="#CCCCCC"> and so one</font>

671
00:29:11,990 --> 00:29:17,450
of<font color="#E5E5E5"> the things that I added into</font><font color="#CCCCCC"> Xero</font>

672
00:29:13,580 --> 00:29:19,340
tool was<font color="#CCCCCC"> to do just that yeah there's a</font>

673
00:29:17,450 --> 00:29:21,260
concept of stack based<font color="#E5E5E5"> shell code versus</font>

674
00:29:19,340 --> 00:29:22,550
a non stack based shell code we don't

675
00:29:21,260 --> 00:29:25,340
<font color="#CCCCCC">care about that but that's</font><font color="#E5E5E5"> another issue</font>

676
00:29:22,550 --> 00:29:27,800
that can<font color="#CCCCCC"> happen here that we</font><font color="#E5E5E5"> need to be</font>

677
00:29:25,340 --> 00:29:30,620
<font color="#CCCCCC">able to solve</font><font color="#E5E5E5"> yeah</font>

678
00:29:27,800 --> 00:29:35,000
can I have<font color="#CCCCCC"> that</font><font color="#E5E5E5"> point twice there cool</font>

679
00:29:30,620 --> 00:29:37,760
<font color="#CCCCCC">so by combining these two tools together</font>

680
00:29:35,000 --> 00:29:40,640
I can ask<font color="#E5E5E5"> anger if it's possible to</font><font color="#CCCCCC"> use</font>

681
00:29:37,760 --> 00:29:41,149
<font color="#CCCCCC">a shell code</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> say hey anger is are</font>

682
00:29:40,640 --> 00:29:43,609
there<font color="#E5E5E5"> any</font>

683
00:29:41,149 --> 00:29:46,218
issues<font color="#CCCCCC"> with putting</font><font color="#E5E5E5"> a new line in my</font>

684
00:29:43,609 --> 00:29:48,649
input are there any issues with<font color="#CCCCCC"> doing a</font>

685
00:29:46,219 --> 00:29:52,039
null character<font color="#CCCCCC"> in my input and</font><font color="#E5E5E5"> it's</font>

686
00:29:48,649 --> 00:29:54,408
<font color="#E5E5E5">really good at saying yes or</font><font color="#CCCCCC"> no and so</font>

687
00:29:52,039 --> 00:29:58,249
that's the SMT<font color="#CCCCCC"> proved</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that again</font>

688
00:29:54,409 --> 00:30:01,460
so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> all kind of cool but where</font>

689
00:29:58,249 --> 00:30:05,599
are the examples<font color="#E5E5E5"> so I'm going to talk</font>

690
00:30:01,460 --> 00:30:08,479
<font color="#CCCCCC">about a super-duper</font><font color="#E5E5E5"> simple binary with a</font>

691
00:30:05,599 --> 00:30:10,549
<font color="#E5E5E5">buffer overflow</font><font color="#CCCCCC"> it has a check</font><font color="#E5E5E5"> and it</font>

692
00:30:08,479 --> 00:30:12,080
wants you<font color="#E5E5E5"> to have dead beef somewhere on</font>

693
00:30:10,549 --> 00:30:15,559
the stack and<font color="#E5E5E5"> then it lets you do your</font>

694
00:30:12,080 --> 00:30:17,570
overflow<font color="#E5E5E5"> if you've done</font><font color="#CCCCCC"> Epona before</font>

695
00:30:15,559 --> 00:30:19,070
this is really<font color="#CCCCCC"> easy but if you're</font><font color="#E5E5E5"> trying</font>

696
00:30:17,570 --> 00:30:23,450
to automate<font color="#E5E5E5"> that that could be really</font>

697
00:30:19,070 --> 00:30:25,729
really<font color="#E5E5E5"> hard</font><font color="#CCCCCC"> you won't be able</font><font color="#E5E5E5"> to do that</font>

698
00:30:23,450 --> 00:30:27,859
with the online<font color="#E5E5E5"> automatic exploit</font>

699
00:30:25,729 --> 00:30:30,049
generation stuff because<font color="#E5E5E5"> of that check</font>

700
00:30:27,859 --> 00:30:33,309
it'll say yeah I<font color="#E5E5E5"> can corrupt it but so</font>

701
00:30:30,049 --> 00:30:35,989
what what happens<font color="#CCCCCC"> I don't know</font><font color="#E5E5E5"> so let's</font>

702
00:30:33,309 --> 00:30:39,309
<font color="#CCCCCC">show</font><font color="#E5E5E5"> you how it</font><font color="#CCCCCC"> should be done</font><font color="#E5E5E5"> with a</font>

703
00:30:35,989 --> 00:30:39,309
video<font color="#E5E5E5"> that won't work</font>

704
00:30:39,559 --> 00:30:46,190
<font color="#CCCCCC">alright well luckily</font><font color="#E5E5E5"> yeah don't look at</font>

705
00:30:42,469 --> 00:30:52,399
my Spotify<font color="#E5E5E5"> okay now that we already have</font>

706
00:30:46,190 --> 00:30:54,789
our videos folder<font color="#E5E5E5"> up</font><font color="#CCCCCC"> here I'm glad I</font>

707
00:30:52,399 --> 00:31:01,039
have good folder<font color="#E5E5E5"> management for this one</font>

708
00:30:54,789 --> 00:31:03,429
cool so I gave<font color="#E5E5E5"> it up</font><font color="#CCCCCC"> I got</font><font color="#E5E5E5"> to share</font><font color="#CCCCCC"> this</font>

709
00:31:01,039 --> 00:31:03,429
<font color="#CCCCCC">screen</font><font color="#E5E5E5"> too</font>

710
00:31:07,419 --> 00:31:15,909
and presenting is hard<font color="#E5E5E5"> all right cool</font>

711
00:31:12,249 --> 00:31:18,489
<font color="#CCCCCC">okay so all these are super short videos</font>

712
00:31:15,909 --> 00:31:20,979
so it shouldn't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> too bad I'm giving it</font>

713
00:31:18,489 --> 00:31:23,379
just<font color="#E5E5E5"> the program</font><font color="#CCCCCC"> I'm giving it this URL</font>

714
00:31:20,979 --> 00:31:26,169
<font color="#E5E5E5">that they gave</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> and I'm giving</font><font color="#CCCCCC"> it the</font>

715
00:31:23,379 --> 00:31:28,478
port that's it I'm telling zeratul<font color="#E5E5E5"> to</font>

716
00:31:26,169 --> 00:31:32,409
find the vulnerability in this program

717
00:31:28,479 --> 00:31:36,119
<font color="#E5E5E5">overcome their puzzle and send an</font>

718
00:31:32,409 --> 00:31:38,589
<font color="#CCCCCC">exploit for me and get me that flag</font><font color="#E5E5E5"> so</font>

719
00:31:36,119 --> 00:31:40,958
we're running through<font color="#E5E5E5"> the program right</font>

720
00:31:38,589 --> 00:31:42,339
<font color="#CCCCCC">now</font><font color="#E5E5E5"> we're checking to see what the input</font>

721
00:31:40,959 --> 00:31:45,009
is<font color="#E5E5E5"> we want to see if it's a standard in</font>

722
00:31:42,339 --> 00:31:46,690
an argument<font color="#CCCCCC"> a file whatever we then are</font>

723
00:31:45,009 --> 00:31:49,479
trying to find that vulnerability<font color="#E5E5E5"> in</font>

724
00:31:46,690 --> 00:31:51,450
there it<font color="#E5E5E5"> already found it it'll build a</font>

725
00:31:49,479 --> 00:31:54,399
proof of<font color="#CCCCCC"> concept for</font><font color="#E5E5E5"> us if it fails</font>

726
00:31:51,450 --> 00:31:56,589
<font color="#E5E5E5">somewhere down the line</font><font color="#CCCCCC"> its overcome</font>

727
00:31:54,399 --> 00:31:58,119
that hard check already<font color="#E5E5E5"> and right now</font>

728
00:31:56,589 --> 00:32:00,129
it's<font color="#E5E5E5"> trying to use the point to win</font>

729
00:31:58,119 --> 00:32:02,019
<font color="#E5E5E5">function technique so this is where it</font>

730
00:32:00,129 --> 00:32:03,639
had a win function in it earlier and

731
00:32:02,019 --> 00:32:07,119
this<font color="#E5E5E5"> one demos really well</font><font color="#CCCCCC"> cuz</font><font color="#E5E5E5"> it's</font>

732
00:32:03,639 --> 00:32:08,769
works just every time<font color="#CCCCCC"> oh cool and then I</font>

733
00:32:07,119 --> 00:32:11,079
suck at programming<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> endianness</font>

734
00:32:08,769 --> 00:32:13,059
was messed up so it's gonna go back

735
00:32:11,079 --> 00:32:15,579
through<font color="#CCCCCC"> there and</font><font color="#E5E5E5"> fix it</font><font color="#CCCCCC"> for me it's</font>

736
00:32:13,059 --> 00:32:19,178
gonna test it locally<font color="#CCCCCC"> yeah it's</font><font color="#E5E5E5"> just</font>

737
00:32:15,579 --> 00:32:21,399
stuff is<font color="#E5E5E5"> flying by</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it said</font><font color="#CCCCCC"> hooray</font><font color="#E5E5E5"> we</font>

738
00:32:19,179 --> 00:32:23,769
did it now let's throw it remotely

739
00:32:21,399 --> 00:32:26,079
so it's fixing the<font color="#E5E5E5"> endianness for me</font>

740
00:32:23,769 --> 00:32:28,329
again<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I'm still really</font><font color="#E5E5E5"> bad at</font>

741
00:32:26,079 --> 00:32:30,549
<font color="#E5E5E5">programming and it's throwing that right</font>

742
00:32:28,329 --> 00:32:32,440
<font color="#CCCCCC">now for me</font><font color="#E5E5E5"> and as soon as that</font>

743
00:32:30,549 --> 00:32:34,450
connections made it's going to run LS

744
00:32:32,440 --> 00:32:39,519
<font color="#E5E5E5">it's gonna try and find a flag and cat</font>

745
00:32:34,450 --> 00:32:41,769
it yeah<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> and then I guess CTF</font><font color="#E5E5E5"> flag</font>

746
00:32:39,519 --> 00:32:46,629
spoilers this one is called<font color="#E5E5E5"> no you suck</font>

747
00:32:41,769 --> 00:32:49,149
<font color="#CCCCCC">and</font><font color="#E5E5E5"> it's currently up on the University</font>

748
00:32:46,629 --> 00:32:51,849
of Central<font color="#E5E5E5"> Florida's CTF training stuff</font>

749
00:32:49,149 --> 00:32:55,589
<font color="#E5E5E5">I think it's a 100 or 150 point</font><font color="#CCCCCC"> boning</font>

750
00:32:51,849 --> 00:32:58,839
problem<font color="#CCCCCC"> it's not too hard if you're a</font>

751
00:32:55,589 --> 00:33:00,940
expert at this kind of<font color="#E5E5E5"> stuff but to</font>

752
00:32:58,839 --> 00:33:03,190
automatically solve that how long was

753
00:33:00,940 --> 00:33:05,679
that video<font color="#CCCCCC"> that video</font><font color="#E5E5E5"> was a minute</font><font color="#CCCCCC"> and</font>

754
00:33:03,190 --> 00:33:07,479
four seconds<font color="#CCCCCC"> I didn't have to open up</font>

755
00:33:05,679 --> 00:33:09,429
Ida<font color="#E5E5E5"> I didn't have to open up gdb I</font>

756
00:33:07,479 --> 00:33:11,739
didn't have to open up<font color="#E5E5E5"> anything this</font><font color="#CCCCCC"> is</font>

757
00:33:09,429 --> 00:33:14,309
<font color="#CCCCCC">time I can now spend solving the harder</font>

758
00:33:11,739 --> 00:33:14,309
problems

759
00:33:17,360 --> 00:33:20,750
<font color="#E5E5E5">all right</font>

760
00:33:21,530 --> 00:33:26,080
cool

761
00:33:23,980 --> 00:33:29,650
<font color="#CCCCCC">oh right</font><font color="#E5E5E5"> and then format strings kind of</font>

762
00:33:26,080 --> 00:33:32,020
suck right now<font color="#CCCCCC"> in anger</font><font color="#E5E5E5"> these are the</font>

763
00:33:29,650 --> 00:33:34,179
only five lines that represent format

764
00:33:32,020 --> 00:33:35,860
strings<font color="#E5E5E5"> as soon as you get to there it</font>

765
00:33:34,179 --> 00:33:38,890
<font color="#E5E5E5">just kind of says yeah</font><font color="#CCCCCC"> that sucks bro</font>

766
00:33:35,860 --> 00:33:39,340
I'm sorry<font color="#CCCCCC"> and then it exits out</font><font color="#E5E5E5"> says I'm</font>

767
00:33:38,890 --> 00:33:42,370
done

768
00:33:39,340 --> 00:33:43,600
stopping<font color="#E5E5E5"> no more</font><font color="#CCCCCC"> if we're</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to find</font>

769
00:33:42,370 --> 00:33:46,030
format string vulnerabilities that's

770
00:33:43,600 --> 00:33:49,480
that's not<font color="#E5E5E5"> cool that's</font><font color="#CCCCCC"> not acceptable</font>

771
00:33:46,030 --> 00:33:51,940
so what does<font color="#E5E5E5"> it look like to model a</font>

772
00:33:49,480 --> 00:33:54,730
format string vulnerability<font color="#E5E5E5"> well</font>

773
00:33:51,940 --> 00:33:58,740
generally<font color="#E5E5E5"> it's kind of composed into any</font>

774
00:33:54,730 --> 00:34:01,299
of these three bottom right primitives

775
00:33:58,740 --> 00:34:04,570
you you want to see if it's symbolic and

776
00:34:01,299 --> 00:34:06,910
then if that<font color="#E5E5E5"> input to that printf can</font>

777
00:34:04,570 --> 00:34:11,889
contain any<font color="#E5E5E5"> of this this is nonsense</font>

778
00:34:06,910 --> 00:34:14,139
<font color="#E5E5E5">this long string here</font><font color="#CCCCCC"> then you're gonna</font>

779
00:34:11,889 --> 00:34:16,240
try and<font color="#CCCCCC"> build</font><font color="#E5E5E5"> that and every single time</font>

780
00:34:14,139 --> 00:34:19,000
you're adding<font color="#CCCCCC"> into it you're using a</font>

781
00:34:16,239 --> 00:34:20,830
<font color="#E5E5E5">right primitive for the percent and that</font>

782
00:34:19,000 --> 00:34:22,659
just makes<font color="#E5E5E5"> it harder</font><font color="#CCCCCC"> so as you're trying</font>

783
00:34:20,830 --> 00:34:24,639
<font color="#E5E5E5">to build this and debug this all these</font>

784
00:34:22,659 --> 00:34:27,879
<font color="#E5E5E5">addresses are changing and your</font><font color="#CCCCCC"> buffers</font>

785
00:34:24,639 --> 00:34:29,139
getting<font color="#CCCCCC"> longer</font><font color="#E5E5E5"> and it's a lot to manage</font>

786
00:34:27,879 --> 00:34:32,080
<font color="#E5E5E5">if you haven't done</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of format</font>

787
00:34:29,139 --> 00:34:34,690
strings<font color="#CCCCCC"> before but pone tools</font><font color="#E5E5E5"> it's</font>

788
00:34:32,080 --> 00:34:36,040
awesome they can<font color="#CCCCCC"> build us a format</font>

789
00:34:34,690 --> 00:34:37,720
string payload we can say I want<font color="#CCCCCC"> to</font>

790
00:34:36,040 --> 00:34:40,239
<font color="#E5E5E5">write this value at this address and</font>

791
00:34:37,719 --> 00:34:42,908
<font color="#E5E5E5">it'll be like here you</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> it's awesome</font>

792
00:34:40,239 --> 00:34:45,399
holy cow<font color="#E5E5E5"> and so what we're gonna do is</font>

793
00:34:42,909 --> 00:34:49,629
we're gonna pair<font color="#CCCCCC"> up</font><font color="#E5E5E5"> pone tools with</font>

794
00:34:45,399 --> 00:34:51,159
anger<font color="#E5E5E5"> and we're going to ask anger if we</font>

795
00:34:49,629 --> 00:34:53,560
can build this entire format string

796
00:34:51,159 --> 00:34:56,770
payload as the first argument into<font color="#CCCCCC"> print</font>

797
00:34:53,560 --> 00:34:59,619
<font color="#CCCCCC">F sounds like it'd be a good format</font>

798
00:34:56,770 --> 00:35:00,850
string vulnerability to me look at that

799
00:34:59,619 --> 00:35:06,160
I<font color="#E5E5E5"> already talked about stuff that was on</font>

800
00:35:00,850 --> 00:35:07,750
this slide yeah<font color="#E5E5E5"> one other piece here is</font>

801
00:35:06,160 --> 00:35:09,339
as you're testing<font color="#CCCCCC"> different addresses</font>

802
00:35:07,750 --> 00:35:13,420
for your<font color="#CCCCCC"> shell code or your point to win</font>

803
00:35:09,340 --> 00:35:15,760
or your<font color="#CCCCCC"> rap chain</font><font color="#E5E5E5"> the size of your</font>

804
00:35:13,420 --> 00:35:18,250
format string can change so if you're

805
00:35:15,760 --> 00:35:20,050
<font color="#E5E5E5">trying to port this to other CTF</font>

806
00:35:18,250 --> 00:35:21,670
problems or if you recompile the problem

807
00:35:20,050 --> 00:35:23,619
the<font color="#CCCCCC"> answer can be completely different</font>

808
00:35:21,670 --> 00:35:26,410
<font color="#CCCCCC">but</font><font color="#E5E5E5"> anger is</font><font color="#CCCCCC"> really good at maintaining</font>

809
00:35:23,619 --> 00:35:30,850
<font color="#E5E5E5">those addresses for us that's awesome so</font>

810
00:35:26,410 --> 00:35:34,990
we can ask<font color="#E5E5E5"> anger to build and solve</font>

811
00:35:30,850 --> 00:35:37,299
those potential inputs<font color="#E5E5E5"> automatically and</font>

812
00:35:34,990 --> 00:35:37,779
we're<font color="#CCCCCC"> using the exact</font><font color="#E5E5E5"> same logic we had</font>

813
00:35:37,300 --> 00:35:40,120
before<font color="#E5E5E5"> it</font>

814
00:35:37,780 --> 00:35:42,130
overcome that<font color="#E5E5E5"> puzzle or that challenge</font>

815
00:35:40,120 --> 00:35:47,470
of<font color="#E5E5E5"> that</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> step we had if it's a</font>

816
00:35:42,130 --> 00:35:49,750
menu or<font color="#E5E5E5"> whatever and then if I didn't</font>

817
00:35:47,470 --> 00:35:53,529
start these<font color="#E5E5E5"> last week this</font><font color="#CCCCCC"> is where my</font>

818
00:35:49,750 --> 00:35:56,140
other video would be so these tools are

819
00:35:53,530 --> 00:35:58,000
all<font color="#E5E5E5"> online the format string</font><font color="#CCCCCC"> one takes a</font>

820
00:35:56,140 --> 00:35:59,020
couple minutes it's three<font color="#CCCCCC"> or four</font>

821
00:35:58,000 --> 00:36:01,320
minutes I didn't<font color="#E5E5E5"> think it'd be a very</font>

822
00:35:59,020 --> 00:36:04,240
<font color="#CCCCCC">good</font><font color="#E5E5E5"> demo to just drop</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> one in here</font>

823
00:36:01,320 --> 00:36:06,700
<font color="#E5E5E5">but where do you go next</font><font color="#CCCCCC"> how does all of</font>

824
00:36:04,240 --> 00:36:08,410
this<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> translate to</font><font color="#CCCCCC"> real-world</font>

825
00:36:06,700 --> 00:36:10,960
<font color="#CCCCCC">problems</font>

826
00:36:08,410 --> 00:36:13,960
well we have an issue of<font color="#E5E5E5"> finding</font>

827
00:36:10,960 --> 00:36:15,550
<font color="#E5E5E5">vulnerabilities we have an issue of</font>

828
00:36:13,960 --> 00:36:17,020
<font color="#E5E5E5">trying to find memory leaks for trying</font>

829
00:36:15,550 --> 00:36:20,500
<font color="#E5E5E5">to pair for even harder vulnerabilities</font>

830
00:36:17,020 --> 00:36:22,420
<font color="#E5E5E5">and my</font><font color="#CCCCCC"> rob chain building stuff</font><font color="#E5E5E5"> and</font>

831
00:36:20,500 --> 00:36:25,690
<font color="#E5E5E5">there's kind of bad and there's better</font>

832
00:36:22,420 --> 00:36:30,040
tools<font color="#CCCCCC"> online to fix that so you can use</font>

833
00:36:25,690 --> 00:36:31,540
modern<font color="#CCCCCC"> buzzers like</font><font color="#E5E5E5"> AFL or driller or</font>

834
00:36:30,040 --> 00:36:35,320
<font color="#CCCCCC">tifa's to find</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> vulnerabilities for</font>

835
00:36:31,540 --> 00:36:37,060
us you don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> kala Klee</font>

836
00:36:35,320 --> 00:36:39,480
<font color="#E5E5E5">analyze it and run</font><font color="#CCCCCC"> it at some random</font>

837
00:36:37,060 --> 00:36:41,500
program slice and do all of<font color="#CCCCCC"> that jazz</font>

838
00:36:39,480 --> 00:36:44,890
<font color="#CCCCCC">because usually</font><font color="#E5E5E5"> they just run with a</font>

839
00:36:41,500 --> 00:36:48,810
good old dot slash<font color="#E5E5E5"> my</font><font color="#CCCCCC"> Ponyville problem</font>

840
00:36:44,890 --> 00:36:51,640
and then info leaks if you're working

841
00:36:48,810 --> 00:36:54,880
against<font color="#E5E5E5"> a SLR you need to know where</font>

842
00:36:51,640 --> 00:36:56,259
some address is and generally you

843
00:36:54,880 --> 00:36:58,330
<font color="#E5E5E5">accomplish this through some sort of</font>

844
00:36:56,260 --> 00:36:59,860
<font color="#E5E5E5">information disclosure you get some</font>

845
00:36:58,330 --> 00:37:01,870
pointer that<font color="#E5E5E5"> gets leaked out to</font><font color="#CCCCCC"> you they</font>

846
00:36:59,860 --> 00:37:03,910
can<font color="#E5E5E5"> use to</font><font color="#CCCCCC"> calculate</font><font color="#E5E5E5"> the base of Lib C</font>

847
00:37:01,870 --> 00:37:06,040
and everything is awesome<font color="#E5E5E5"> because now</font>

848
00:37:03,910 --> 00:37:08,259
you can call a<font color="#E5E5E5"> system</font><font color="#CCCCCC"> VIN Sh</font>

849
00:37:06,040 --> 00:37:09,820
that's something<font color="#E5E5E5"> that I don't handle</font>

850
00:37:08,260 --> 00:37:13,470
here but with more<font color="#E5E5E5"> programming it could</font>

851
00:37:09,820 --> 00:37:19,960
be handled<font color="#E5E5E5"> and then I'm</font><font color="#CCCCCC"> very bad at</font>

852
00:37:13,470 --> 00:37:22,660
automating<font color="#CCCCCC"> rap chains</font><font color="#E5E5E5"> oh and then if</font>

853
00:37:19,960 --> 00:37:29,110
someone<font color="#E5E5E5"> is ambitious one day maybe</font><font color="#CCCCCC"> heap</font>

854
00:37:22,660 --> 00:37:32,529
exploitation can be automated<font color="#E5E5E5"> so</font><font color="#CCCCCC"> back to</font>

855
00:37:29,110 --> 00:37:34,450
<font color="#CCCCCC">that so what these CTF problems are kind</font>

856
00:37:32,530 --> 00:37:36,310
<font color="#E5E5E5">of cool I guess you can get some points</font>

857
00:37:34,450 --> 00:37:37,779
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can translate</font><font color="#CCCCCC"> that into bragging</font>

858
00:37:36,310 --> 00:37:40,810
rights maybe<font color="#E5E5E5"> you get a trophy at some</font>

859
00:37:37,780 --> 00:37:43,240
CTF competition but how<font color="#CCCCCC"> does</font><font color="#E5E5E5"> that impact</font>

860
00:37:40,810 --> 00:37:45,090
<font color="#E5E5E5">the real systems the systems we're</font>

861
00:37:43,240 --> 00:37:49,899
running the systems<font color="#CCCCCC"> we're using</font><font color="#E5E5E5"> today</font>

862
00:37:45,090 --> 00:37:51,730
<font color="#E5E5E5">and I like to think</font><font color="#CCCCCC"> that a</font><font color="#E5E5E5"> lot of CTF</font>

863
00:37:49,900 --> 00:37:55,450
problems translate

864
00:37:51,730 --> 00:37:57,040
easily<font color="#CCCCCC"> to embedded devices</font><font color="#E5E5E5"> if you look</font>

865
00:37:55,450 --> 00:37:58,930
at routers if you look at smart

866
00:37:57,040 --> 00:38:01,990
<font color="#E5E5E5">lightbulbs or smart fridges or smart</font>

867
00:37:58,930 --> 00:38:04,149
whatever<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> google</font><font color="#E5E5E5"> command</font>

868
00:38:01,990 --> 00:38:06,040
injection router<font color="#CCCCCC"> you're gonna get like</font>

869
00:38:04,150 --> 00:38:09,010
20 hits<font color="#E5E5E5"> from just this week</font><font color="#CCCCCC"> it's</font>

870
00:38:06,040 --> 00:38:11,140
ridiculous<font color="#E5E5E5"> you're gonna see 30 hits of</font>

871
00:38:09,010 --> 00:38:13,920
buffer overflows you<font color="#E5E5E5"> these things are</font>

872
00:38:11,140 --> 00:38:16,750
wide open<font color="#CCCCCC"> and they translate really well</font>

873
00:38:13,920 --> 00:38:18,100
into these<font color="#E5E5E5"> embedded systems but we</font><font color="#CCCCCC"> need</font>

874
00:38:16,750 --> 00:38:20,850
to scale them out even farther

875
00:38:18,100 --> 00:38:24,310
the<font color="#CCCCCC"> next step beyond that</font><font color="#E5E5E5"> is very likely</font>

876
00:38:20,850 --> 00:38:29,549
<font color="#E5E5E5">trying to handle large systems and</font>

877
00:38:24,310 --> 00:38:31,750
programs and<font color="#E5E5E5"> even entire firmware or</font>

878
00:38:29,550 --> 00:38:36,880
hypervisor slowly<font color="#CCCCCC"> Kyle that'd be really</font>

879
00:38:31,750 --> 00:38:39,280
hard<font color="#E5E5E5"> so it's kind of nice</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about</font>

880
00:38:36,880 --> 00:38:41,290
all of<font color="#E5E5E5"> this stuff</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> being wishy-washy</font>

881
00:38:39,280 --> 00:38:43,810
and saying this is<font color="#E5E5E5"> what we should do</font>

882
00:38:41,290 --> 00:38:45,340
so I thought<font color="#E5E5E5"> it'd</font><font color="#CCCCCC"> be cool to</font><font color="#E5E5E5"> actually</font>

883
00:38:43,810 --> 00:38:47,830
talk about<font color="#E5E5E5"> the translation</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> all of</font>

884
00:38:45,340 --> 00:38:49,420
this into an actual vulnerability<font color="#E5E5E5"> now I</font>

885
00:38:47,830 --> 00:38:52,810
really<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> one because the POC</font>

886
00:38:49,420 --> 00:38:54,430
fits on a<font color="#CCCCCC"> PowerPoint bullet like you go</font>

887
00:38:52,810 --> 00:38:56,080
to<font color="#E5E5E5"> the address of this thing you slot in</font>

888
00:38:54,430 --> 00:38:57,970
a<font color="#E5E5E5"> semicolon and then you just type in</font>

889
00:38:56,080 --> 00:39:01,600
whatever<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> it can be reboot it</font>

890
00:38:57,970 --> 00:39:05,950
can be execute whatever<font color="#E5E5E5"> who knows</font><font color="#CCCCCC"> and</font>

891
00:39:01,600 --> 00:39:08,950
this one impacted<font color="#E5E5E5"> 11 of the most common</font>

892
00:39:05,950 --> 00:39:10,960
home routers in the world<font color="#E5E5E5"> the statistics</font>

893
00:39:08,950 --> 00:39:13,149
on it<font color="#E5E5E5"> were somewhere between 1.5 and 2</font>

894
00:39:10,960 --> 00:39:16,240
million routers were impacted by<font color="#CCCCCC"> this</font>

895
00:39:13,150 --> 00:39:19,030
like<font color="#E5E5E5"> one one semicolon right there so</font>

896
00:39:16,240 --> 00:39:21,330
it's really really<font color="#E5E5E5"> hard to find if you</font>

897
00:39:19,030 --> 00:39:24,310
actually go<font color="#CCCCCC"> through the whole thing and</font>

898
00:39:21,330 --> 00:39:29,259
it's<font color="#E5E5E5"> just really easy to exploit so oh</font>

899
00:39:24,310 --> 00:39:35,560
no it's<font color="#CCCCCC"> another</font><font color="#E5E5E5"> video crap all right</font>

900
00:39:29,260 --> 00:39:38,640
let's see if I was prepared<font color="#CCCCCC"> oh I do I do</font>

901
00:39:35,560 --> 00:39:38,640
have<font color="#CCCCCC"> that video ok</font>

902
00:39:46,619 --> 00:39:51,210
so this one's using<font color="#E5E5E5"> a more proprietary</font>

903
00:39:49,259 --> 00:39:53,579
tool that's taken<font color="#E5E5E5"> these techniques</font><font color="#CCCCCC"> even</font>

904
00:39:51,210 --> 00:39:55,920
farther<font color="#E5E5E5"> we're doing representations</font>

905
00:39:53,579 --> 00:39:58,140
across an entire firmware for this

906
00:39:55,920 --> 00:40:00,269
router<font color="#E5E5E5"> we're eventually going to stumble</font>

907
00:39:58,140 --> 00:40:03,269
<font color="#E5E5E5">across the web server in this example</font>

908
00:40:00,269 --> 00:40:05,609
<font color="#E5E5E5">we're going</font><font color="#CCCCCC"> to model every input that's</font>

909
00:40:03,269 --> 00:40:08,279
going into<font color="#CCCCCC"> every function we're going to</font>

910
00:40:05,609 --> 00:40:11,400
distribute<font color="#E5E5E5"> that across several cores I'm</font>

911
00:40:08,279 --> 00:40:14,339
using a much faster<font color="#CCCCCC"> computer in this</font>

912
00:40:11,400 --> 00:40:15,989
demo<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we're gonna check for those</font>

913
00:40:14,339 --> 00:40:17,249
<font color="#E5E5E5">exact same conditions we're checking for</font>

914
00:40:15,989 --> 00:40:19,229
<font color="#E5E5E5">memory corruption we're checking for</font>

915
00:40:17,249 --> 00:40:21,238
format strings and for this tool I've

916
00:40:19,229 --> 00:40:23,129
even added<font color="#E5E5E5"> command injection tests and</font>

917
00:40:21,239 --> 00:40:26,069
we're<font color="#E5E5E5"> seeing if any form of input could</font>

918
00:40:23,130 --> 00:40:28,349
<font color="#E5E5E5">corrupt</font><font color="#CCCCCC"> input that</font><font color="#E5E5E5"> gets passed</font><font color="#CCCCCC"> into a</font>

919
00:40:26,069 --> 00:40:32,038
system call or an<font color="#CCCCCC"> exec call or a</font><font color="#E5E5E5"> P open</font>

920
00:40:28,349 --> 00:40:38,579
<font color="#CCCCCC">or whatever have you</font><font color="#E5E5E5"> and even before I</font>

921
00:40:32,039 --> 00:40:39,749
<font color="#CCCCCC">finished it</font><font color="#E5E5E5"> it found it</font><font color="#CCCCCC"> buzz</font><font color="#E5E5E5"> so because</font>

922
00:40:38,579 --> 00:40:41,640
you're representing<font color="#CCCCCC"> these programs</font>

923
00:40:39,749 --> 00:40:43,680
<font color="#E5E5E5">symbolically</font><font color="#CCCCCC"> you have all of this</font>

924
00:40:41,640 --> 00:40:45,779
tracing information you can find out

925
00:40:43,680 --> 00:40:48,598
what is going<font color="#E5E5E5"> on behind</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> scenes with</font>

926
00:40:45,779 --> 00:40:50,819
<font color="#E5E5E5">these programs and in this example right</font>

927
00:40:48,599 --> 00:40:52,890
<font color="#CCCCCC">here I can see what all the registers</font>

928
00:40:50,819 --> 00:40:54,630
should be to get<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> command</font>

929
00:40:52,890 --> 00:40:56,430
injection vulnerability well you say

930
00:40:54,630 --> 00:40:58,200
that's<font color="#E5E5E5"> nice who cares</font><font color="#CCCCCC"> I want to see</font>

931
00:40:56,430 --> 00:41:00,029
where the actual vulnerability gets well

932
00:40:58,200 --> 00:41:01,919
we're also tracking memory<font color="#E5E5E5"> we're</font>

933
00:41:00,029 --> 00:41:04,140
tracking the stack we can see every

934
00:41:01,920 --> 00:41:06,719
<font color="#E5E5E5">single piece that's going on here</font>

935
00:41:04,140 --> 00:41:12,269
oh no I built in time for talking and<font color="#E5E5E5"> I</font>

936
00:41:06,719 --> 00:41:15,180
paused it<font color="#CCCCCC"> yes so we</font><font color="#E5E5E5"> can track every</font>

937
00:41:12,269 --> 00:41:17,419
single<font color="#CCCCCC"> action coming</font><font color="#E5E5E5"> out of our common</font>

938
00:41:15,180 --> 00:41:21,149
functions we can see that<font color="#E5E5E5"> s printf</font>

939
00:41:17,420 --> 00:41:23,489
copied something<font color="#E5E5E5"> into something that</font>

940
00:41:21,150 --> 00:41:25,319
<font color="#E5E5E5">gets called into system</font><font color="#CCCCCC"> and because</font><font color="#E5E5E5"> I</font>

941
00:41:23,489 --> 00:41:27,869
like living<font color="#E5E5E5"> dangerously I always make a</font>

942
00:41:25,319 --> 00:41:29,400
copy<font color="#E5E5E5"> and reboot if it can it's a very</font>

943
00:41:27,869 --> 00:41:33,119
visual indicator to see if you can

944
00:41:29,400 --> 00:41:34,380
<font color="#E5E5E5">exploit it so if you do</font><font color="#CCCCCC"> : reboot against</font>

945
00:41:33,119 --> 00:41:35,819
one<font color="#CCCCCC"> of these routers it just goes down</font>

946
00:41:34,380 --> 00:41:37,109
you can<font color="#E5E5E5"> see all the lights</font><font color="#CCCCCC"> go down</font><font color="#E5E5E5"> you</font>

947
00:41:35,819 --> 00:41:40,079
don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to worry</font><font color="#E5E5E5"> about spaces or</font>

948
00:41:37,109 --> 00:41:42,779
anything<font color="#CCCCCC"> and that's again something we</font>

949
00:41:40,079 --> 00:41:44,400
can see right<font color="#CCCCCC"> here</font><font color="#E5E5E5"> because we're</font>

950
00:41:42,779 --> 00:41:46,259
symbolically executing it we have

951
00:41:44,400 --> 00:41:49,619
greater insight<font color="#CCCCCC"> into where these bugs</font>

952
00:41:46,259 --> 00:41:53,549
are and what the program<font color="#E5E5E5"> state needs to</font>

953
00:41:49,619 --> 00:41:55,499
look<font color="#CCCCCC"> like to get</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> and at the</font><font color="#E5E5E5"> very</font>

954
00:41:53,549 --> 00:41:56,690
<font color="#E5E5E5">bottom I have a very pitiful example of</font>

955
00:41:55,499 --> 00:42:01,520
what the

956
00:41:56,690 --> 00:42:03,650
stack looks like yeah I think<font color="#E5E5E5"> because it</font>

957
00:42:01,520 --> 00:42:05,660
went<font color="#E5E5E5"> into the the PLT or the got you had</font>

958
00:42:03,650 --> 00:42:08,540
like one little value there<font color="#E5E5E5"> on the stack</font>

959
00:42:05,660 --> 00:42:11,509
but what one day that view will<font color="#CCCCCC"> be</font>

960
00:42:08,540 --> 00:42:15,500
better so you can<font color="#E5E5E5"> find these</font>

961
00:42:11,510 --> 00:42:18,160
vulnerabilities<font color="#CCCCCC"> so much</font><font color="#E5E5E5"> faster when you</font>

962
00:42:15,500 --> 00:42:21,170
apply tools and techniques<font color="#E5E5E5"> for CTFs</font>

963
00:42:18,160 --> 00:42:24,830
<font color="#E5E5E5">towards systems like the embedded here</font>

964
00:42:21,170 --> 00:42:27,140
and I'm thinking<font color="#CCCCCC"> as we're moving forward</font>

965
00:42:24,830 --> 00:42:29,720
we<font color="#CCCCCC"> need to translate</font><font color="#E5E5E5"> our tools our</font>

966
00:42:27,140 --> 00:42:32,089
fuzzers<font color="#E5E5E5"> our analyzers to</font><font color="#CCCCCC"> handle more</font>

967
00:42:29,720 --> 00:42:34,700
things like<font color="#E5E5E5"> this we need to be able to</font>

968
00:42:32,090 --> 00:42:37,040
<font color="#E5E5E5">just put more compute resources into</font>

969
00:42:34,700 --> 00:42:40,100
finding<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> I don't want to have to go</font>

970
00:42:37,040 --> 00:42:42,410
through<font color="#CCCCCC"> and look</font><font color="#E5E5E5"> at a giant</font><font color="#CCCCCC"> embedded</font>

971
00:42:40,100 --> 00:42:44,690
firmware and try and<font color="#CCCCCC"> open up every</font>

972
00:42:42,410 --> 00:42:46,640
single<font color="#CCCCCC"> one in Ida Pro trying to get</font>

973
00:42:44,690 --> 00:42:54,020
every single one<font color="#E5E5E5"> oh it loops look at</font>

974
00:42:46,640 --> 00:42:56,450
that<font color="#CCCCCC"> and trying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> those explodable</font>

975
00:42:54,020 --> 00:42:59,420
conditions myself<font color="#E5E5E5"> I can make the tools</font>

976
00:42:56,450 --> 00:43:01,189
we have<font color="#CCCCCC"> today do that for me</font><font color="#E5E5E5"> and that</font>

977
00:42:59,420 --> 00:43:04,730
makes<font color="#E5E5E5"> it a lot easier to find these bugs</font>

978
00:43:01,190 --> 00:43:05,900
and vulnerabilities so I tried to<font color="#E5E5E5"> rush</font>

979
00:43:04,730 --> 00:43:06,530
through this one a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> I've got</font>

980
00:43:05,900 --> 00:43:10,160
<font color="#CCCCCC">ten minutes</font>

981
00:43:06,530 --> 00:43:12,700
awesome<font color="#E5E5E5"> so two days</font><font color="#CCCCCC"> ago I finished</font>

982
00:43:10,160 --> 00:43:18,140
<font color="#CCCCCC">writing a tool for even more CTF solving</font>

983
00:43:12,700 --> 00:43:19,970
<font color="#E5E5E5">and I've named it rocket shot and it's</font>

984
00:43:18,140 --> 00:43:22,640
got this really complicated<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> in</font>

985
00:43:19,970 --> 00:43:25,310
here called<font color="#E5E5E5"> backwards program</font><font color="#CCCCCC"> slice</font>

986
00:43:22,640 --> 00:43:27,529
stitching<font color="#E5E5E5"> I think I saw like ten</font>

987
00:43:25,310 --> 00:43:30,350
people's eyes roll over so what does

988
00:43:27,530 --> 00:43:31,760
that mean<font color="#CCCCCC"> I have no</font><font color="#E5E5E5"> idea we're talking a</font>

989
00:43:30,350 --> 00:43:34,190
little bit<font color="#CCCCCC"> about a control flow</font><font color="#E5E5E5"> graph</font>

990
00:43:31,760 --> 00:43:36,290
earlier<font color="#CCCCCC"> and each of those</font><font color="#E5E5E5"> little blocks</font>

991
00:43:34,190 --> 00:43:39,470
on there can be a slice of<font color="#E5E5E5"> the program</font>

992
00:43:36,290 --> 00:43:42,200
and so I asked myself is there<font color="#E5E5E5"> a way</font>

993
00:43:39,470 --> 00:43:43,930
that<font color="#CCCCCC"> you can go inside out in a program</font>

994
00:43:42,200 --> 00:43:47,419
<font color="#E5E5E5">instead of having to do all this crazy</font>

995
00:43:43,930 --> 00:43:50,870
initialization<font color="#CCCCCC"> all of this hard checks</font>

996
00:43:47,420 --> 00:43:52,610
<font color="#E5E5E5">is there a way that we</font><font color="#CCCCCC"> can skip</font><font color="#E5E5E5"> all the</font>

997
00:43:50,870 --> 00:43:53,930
hard stuff<font color="#CCCCCC"> and</font><font color="#E5E5E5"> go right</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> very end</font>

998
00:43:52,610 --> 00:43:59,390
where it prints<font color="#E5E5E5"> the function or prints</font>

999
00:43:53,930 --> 00:44:01,250
the<font color="#E5E5E5"> flat excuse me yeah and</font><font color="#CCCCCC"> then another</font>

1000
00:43:59,390 --> 00:44:04,549
<font color="#E5E5E5">reason why I put it on here it's really</font>

1001
00:44:01,250 --> 00:44:08,430
really fast<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so I've got two examples</font>

1002
00:44:04,550 --> 00:44:10,859
I've got one video<font color="#E5E5E5"> for rocket shot</font>

1003
00:44:08,430 --> 00:44:13,470
that's<font color="#E5E5E5"> going to do just that it's going</font>

1004
00:44:10,859 --> 00:44:15,720
<font color="#E5E5E5">to take this control flow graph we have</font>

1005
00:44:13,470 --> 00:44:17,819
here it's<font color="#E5E5E5"> going to run from the start to</font>

1006
00:44:15,720 --> 00:44:20,509
the<font color="#CCCCCC"> end of every</font><font color="#E5E5E5"> single basic block</font><font color="#CCCCCC"> it's</font>

1007
00:44:17,819 --> 00:44:22,529
gonna say that one's<font color="#E5E5E5"> bad this one's good</font>

1008
00:44:20,510 --> 00:44:24,720
we're gonna track<font color="#CCCCCC"> it we're gonna say oh</font>

1009
00:44:22,529 --> 00:44:27,299
<font color="#CCCCCC">okay if this is a graph what do our</font>

1010
00:44:24,720 --> 00:44:28,828
<font color="#E5E5E5">predecessors look like</font><font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> say</font>

1011
00:44:27,299 --> 00:44:31,890
<font color="#CCCCCC">okay well</font><font color="#E5E5E5"> let's step it out again let's</font>

1012
00:44:28,829 --> 00:44:33,569
unwind it even more<font color="#CCCCCC"> it's hard</font><font color="#E5E5E5"> to see so</font>

1013
00:44:31,890 --> 00:44:35,700
I<font color="#CCCCCC"> gave us some labels</font><font color="#E5E5E5"> so we can see</font>

1014
00:44:33,569 --> 00:44:38,339
where we were the left<font color="#CCCCCC"> ones good</font><font color="#E5E5E5"> right</font>

1015
00:44:35,700 --> 00:44:40,618
ones bad so we can start<font color="#E5E5E5"> here we say</font>

1016
00:44:38,339 --> 00:44:42,029
okay I<font color="#E5E5E5"> want this one what's above it how</font>

1017
00:44:40,619 --> 00:44:45,720
do I get<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it and so I can start my</font>

1018
00:44:42,029 --> 00:44:48,119
execution on a program slice program

1019
00:44:45,720 --> 00:44:50,788
slice<font color="#E5E5E5"> at the top of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> first basic</font>

1020
00:44:48,119 --> 00:44:54,750
block<font color="#E5E5E5"> going down I can do this</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> and</font>

1021
00:44:50,789 --> 00:44:57,000
again<font color="#CCCCCC"> and</font><font color="#E5E5E5"> again and I'm running slices</font>

1022
00:44:54,750 --> 00:45:03,420
of programs that run so<font color="#E5E5E5"> much</font><font color="#CCCCCC"> faster</font><font color="#E5E5E5"> than</font>

1023
00:44:57,000 --> 00:45:06,510
the<font color="#E5E5E5"> actual programs themselves what is</font>

1024
00:45:03,420 --> 00:45:11,490
<font color="#E5E5E5">this one work</font><font color="#CCCCCC"> oh it's not it's just</font><font color="#E5E5E5"> full</font>

1025
00:45:06,510 --> 00:45:14,240
<font color="#E5E5E5">screen right better</font><font color="#CCCCCC"> believe I've got a</font>

1026
00:45:11,490 --> 00:45:14,240
video<font color="#CCCCCC"> for this</font><font color="#E5E5E5"> one</font>

1027
00:45:25,610 --> 00:45:30,620
so this is a challenge<font color="#E5E5E5"> from Peco CTF</font>

1028
00:45:28,130 --> 00:45:32,900
2014 where we're<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> iterate over</font>

1029
00:45:30,620 --> 00:45:36,140
every<font color="#E5E5E5"> single node in there doing that</font>

1030
00:45:32,900 --> 00:45:40,130
small slice execution this is in real

1031
00:45:36,140 --> 00:45:41,779
time and we're<font color="#E5E5E5"> checking for</font><font color="#CCCCCC"> some sort of</font>

1032
00:45:40,130 --> 00:45:44,600
file descriptor activity we want<font color="#E5E5E5"> to see</font>

1033
00:45:41,780 --> 00:45:47,390
if there's some flag something going on

1034
00:45:44,600 --> 00:45:48,560
<font color="#E5E5E5">and</font><font color="#CCCCCC"> if we get it it's</font><font color="#E5E5E5"> gonna print out</font>

1035
00:45:47,390 --> 00:45:50,509
the<font color="#E5E5E5"> flag</font><font color="#CCCCCC"> ins gave us some garbage</font>

1036
00:45:48,560 --> 00:45:54,680
<font color="#E5E5E5">because we have uninitialized variables</font>

1037
00:45:50,510 --> 00:45:56,030
<font color="#CCCCCC">yeah so as soon as</font><font color="#E5E5E5"> we see that we remove</font>

1038
00:45:54,680 --> 00:45:57,799
all<font color="#E5E5E5"> the other ones when we say okay what</font>

1039
00:45:56,030 --> 00:45:59,900
<font color="#E5E5E5">are</font><font color="#CCCCCC"> the predecessors of that one and we</font>

1040
00:45:57,800 --> 00:46:01,400
start doing<font color="#E5E5E5"> this recursive thing here</font>

1041
00:45:59,900 --> 00:46:05,960
it's already<font color="#CCCCCC"> finished I kind of slowly</font>

1042
00:46:01,400 --> 00:46:11,270
<font color="#E5E5E5">sits down and so I'm gonna</font><font color="#CCCCCC"> ctrl</font><font color="#E5E5E5"> C here</font>

1043
00:46:05,960 --> 00:46:13,040
cuz it says the<font color="#E5E5E5"> flag</font><font color="#CCCCCC"> is done right</font><font color="#E5E5E5"> well</font>

1044
00:46:11,270 --> 00:46:17,600
<font color="#E5E5E5">I was</font><font color="#CCCCCC"> very tired</font><font color="#E5E5E5"> last night when I was</font>

1045
00:46:13,040 --> 00:46:19,430
building<font color="#CCCCCC"> this one oh there it is</font><font color="#E5E5E5"> says</font>

1046
00:46:17,600 --> 00:46:22,339
solving equations is lots of fun I

1047
00:46:19,430 --> 00:46:26,240
should have zoomed in on that<font color="#E5E5E5"> but over</font>

1048
00:46:22,340 --> 00:46:28,880
the space<font color="#E5E5E5"> of 45 seconds about</font><font color="#CCCCCC"> a minute</font>

1049
00:46:26,240 --> 00:46:31,040
<font color="#E5E5E5">we're able to run this program with next</font>

1050
00:46:28,880 --> 00:46:32,600
to no arguments and<font color="#E5E5E5"> have it spit out</font>

1051
00:46:31,040 --> 00:46:34,990
this flag from<font color="#E5E5E5"> this technique or</font>

1052
00:46:32,600 --> 00:46:38,000
<font color="#E5E5E5">unwinding backwards</font><font color="#CCCCCC"> up all of these</font>

1053
00:46:34,990 --> 00:46:39,890
<font color="#E5E5E5">problems and</font><font color="#CCCCCC"> so here I'm just</font><font color="#E5E5E5"> confirming</font>

1054
00:46:38,000 --> 00:46:44,020
<font color="#E5E5E5">that we rerun solving equations as lots</font>

1055
00:46:39,890 --> 00:46:44,020
of fun and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> get our flag</font>

1056
00:46:52,510 --> 00:46:59,110
then<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> very quickly running</font><font color="#E5E5E5"> out of</font>

1057
00:46:55,360 --> 00:47:01,330
time<font color="#E5E5E5"> three minutes so all of these tools</font>

1058
00:46:59,110 --> 00:47:04,030
<font color="#E5E5E5">are up on github</font><font color="#CCCCCC"> I posted</font><font color="#E5E5E5"> rocket shot</font>

1059
00:47:01,330 --> 00:47:06,549
<font color="#CCCCCC">this</font><font color="#E5E5E5"> morning</font><font color="#CCCCCC"> I started running it</font>

1060
00:47:04,030 --> 00:47:09,190
<font color="#CCCCCC">through</font><font color="#E5E5E5"> the entire suite of the anger</font>

1061
00:47:06,550 --> 00:47:15,820
CTF challenge problems<font color="#E5E5E5"> and it's headed</font>

1062
00:47:09,190 --> 00:47:18,580
surprisingly good return on finding

1063
00:47:15,820 --> 00:47:20,980
flags for<font color="#E5E5E5"> me and so I'm hoping going</font>

1064
00:47:18,580 --> 00:47:23,620
forward<font color="#E5E5E5"> that by giving</font><font color="#CCCCCC"> you guys these</font>

1065
00:47:20,980 --> 00:47:25,570
tools<font color="#E5E5E5"> that we can encourage CTF writers</font>

1066
00:47:23,620 --> 00:47:27,130
to build us<font color="#E5E5E5"> even harder problems</font>

1067
00:47:25,570 --> 00:47:29,500
hopefully ones that model<font color="#E5E5E5"> more</font>

1068
00:47:27,130 --> 00:47:31,390
vulnerabilities<font color="#CCCCCC"> that</font><font color="#E5E5E5"> model more</font>

1069
00:47:29,500 --> 00:47:34,750
<font color="#E5E5E5">real-world systems so that we in turn</font>

1070
00:47:31,390 --> 00:47:38,859
<font color="#CCCCCC">can build even better</font><font color="#E5E5E5"> techniques and</font>

1071
00:47:34,750 --> 00:47:39,720
tools to<font color="#CCCCCC"> solve those so with that thank</font>

1072
00:47:38,860 --> 00:47:44,420
<font color="#CCCCCC">you</font>

1073
00:47:39,720 --> 00:47:44,419
[Applause]

