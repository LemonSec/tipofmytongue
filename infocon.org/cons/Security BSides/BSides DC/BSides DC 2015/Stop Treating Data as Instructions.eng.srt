1
00:00:00,000 --> 00:00:02,580
as it says my name is Jackie Rosenberg

2
00:00:02,580 --> 00:00:05,960
I'm from draper which which is a

3
00:00:05,960 --> 00:00:10,440
non-profit independent lab in kendall

4
00:00:10,440 --> 00:00:14,730
square cambridge it's been there for it

5
00:00:14,730 --> 00:00:17,039
was originally part of MIT and 40 years

6
00:00:17,039 --> 00:00:19,439
ago it's spun out and became completely

7
00:00:19,439 --> 00:00:21,750
independent it's about a fifteen hundred

8
00:00:21,750 --> 00:00:26,090
person lab does everything from the

9
00:00:26,090 --> 00:00:28,439
inertial guidance system for the Trident

10
00:00:28,439 --> 00:00:32,369
missiles to making things really small

11
00:00:32,369 --> 00:00:36,469
we've got bullied microscope microscopic

12
00:00:36,469 --> 00:00:41,219
devices we've got little cameras little

13
00:00:41,219 --> 00:00:45,090
very small celestial navigation that

14
00:00:45,090 --> 00:00:48,870
will allow you to navigate when GPS has

15
00:00:48,870 --> 00:00:52,590
been denied and we have a pretty

16
00:00:52,590 --> 00:00:58,350
significant cyber security group and we

17
00:00:58,350 --> 00:01:01,680
have the network trying to meet trying

18
00:01:01,680 --> 00:01:06,770
to get me to connect to the and we have

19
00:01:06,770 --> 00:01:10,140
this cyber security group that that I

20
00:01:10,140 --> 00:01:12,810
lead right now and what what I wanted to

21
00:01:12,810 --> 00:01:16,560
talk to you about was the inherent

22
00:01:16,560 --> 00:01:18,659
vulnerability in the processes that we

23
00:01:18,659 --> 00:01:22,290
use and as the previous speaker was

24
00:01:22,290 --> 00:01:26,580
pointing out sometimes we we may / blow

25
00:01:26,580 --> 00:01:29,610
some of the threats however I've been to

26
00:01:29,610 --> 00:01:33,720
a number of top secret briefings that

27
00:01:33,720 --> 00:01:37,310
talk about exactly who and what is

28
00:01:37,310 --> 00:01:43,140
attacking the electric grid and so it's

29
00:01:43,140 --> 00:01:46,020
it's pretty scary what that at least

30
00:01:46,020 --> 00:01:49,649
what the nation states are doing and and

31
00:01:49,649 --> 00:01:52,290
if we just continue with the current

32
00:01:52,290 --> 00:01:55,290
approach to dealing with things they'll

33
00:01:55,290 --> 00:01:59,430
they'll be able to have their way the

34
00:01:59,430 --> 00:02:02,159
fact is that the processes that we use

35
00:02:02,159 --> 00:02:05,040
in all devices whether it's your phone

36
00:02:05,040 --> 00:02:08,970
or your laptop or a server are all

37
00:02:08,970 --> 00:02:12,260
highly excuse me highly vulnerable

38
00:02:12,260 --> 00:02:16,489
and the reason this has has occurred is

39
00:02:16,489 --> 00:02:18,769
because the architecture for these

40
00:02:18,769 --> 00:02:21,409
processors which is called the stored

41
00:02:21,409 --> 00:02:23,540
memory architecture was invented by von

42
00:02:23,540 --> 00:02:26,810
Neumann in 1945 and has been the same

43
00:02:26,810 --> 00:02:31,340
architecture basically since then so

44
00:02:31,340 --> 00:02:34,129
during most of that time especially in

45
00:02:34,129 --> 00:02:37,400
the early days before it was even

46
00:02:37,400 --> 00:02:39,379
transistors they were vacuum tubes and

47
00:02:39,379 --> 00:02:42,019
they were very expensive and then you

48
00:02:42,019 --> 00:02:45,340
know you can see in 1970 when Intel's

49
00:02:45,340 --> 00:02:47,299
basically their first microprocessor

50
00:02:47,299 --> 00:02:50,840
came out it had 2,000 transistors the

51
00:02:50,840 --> 00:02:56,090
most recent quad core has 2.6 billion

52
00:02:56,090 --> 00:02:59,019
transistors so that's Moore's law

53
00:02:59,019 --> 00:03:03,500
operating as it as it has nice and

54
00:03:03,500 --> 00:03:04,730
steady doubling the number of

55
00:03:04,730 --> 00:03:06,709
transistors every 18 months all that

56
00:03:06,709 --> 00:03:10,579
time but what's changed of course is

57
00:03:10,579 --> 00:03:13,730
that back in the early days the concept

58
00:03:13,730 --> 00:03:15,709
of somebody attacking your computer was

59
00:03:15,709 --> 00:03:20,480
was laughable it was impossible and and

60
00:03:20,480 --> 00:03:24,410
now it's not funny at all so you know

61
00:03:24,410 --> 00:03:27,579
the Moore's law and the cheap processors

62
00:03:27,579 --> 00:03:30,500
led to the internet led to mobile

63
00:03:30,500 --> 00:03:35,829
devices the iPhone 5s is the st. is is a

64
00:03:35,829 --> 00:03:38,560
thousand times more powerful than the

65
00:03:38,560 --> 00:03:41,269
1975 Cray one supercomputer that cost

66
00:03:41,269 --> 00:03:46,069
one-and-a-half million dollars so people

67
00:03:46,069 --> 00:03:48,379
have a lot of power in their hand and

68
00:03:48,379 --> 00:03:50,530
and they're connected to everyone and

69
00:03:50,530 --> 00:03:52,790
now you can reach around the world and

70
00:03:52,790 --> 00:03:55,459
you can you can try to take advantage of

71
00:03:55,459 --> 00:03:58,639
someone also of course computers

72
00:03:58,639 --> 00:04:01,329
increasingly protect valuable things and

73
00:04:01,329 --> 00:04:04,129
another problem is is that software has

74
00:04:04,129 --> 00:04:10,010
grown to be extremely large and complex

75
00:04:10,010 --> 00:04:12,709
the e-class Mercedes has a hundred

76
00:04:12,709 --> 00:04:16,310
million lines of code in it so what do

77
00:04:16,310 --> 00:04:18,560
we do well so most of the time what we

78
00:04:18,560 --> 00:04:20,750
do is we build a perimeter we patch

79
00:04:20,750 --> 00:04:23,539
every week or every two weeks and then

80
00:04:23,539 --> 00:04:24,800
we pray

81
00:04:24,800 --> 00:04:31,370
and it's not working very well there's a

82
00:04:31,370 --> 00:04:32,900
lot of people have lost their identity

83
00:04:32,900 --> 00:04:34,849
have lost their credit cards have or

84
00:04:34,849 --> 00:04:42,530
have been ransoms just it's it's it's

85
00:04:42,530 --> 00:04:47,330
not a very good approach and here's a

86
00:04:47,330 --> 00:04:49,580
chart that ends with e class mercedes

87
00:04:49,580 --> 00:04:51,889
which is that what i mentioned 100

88
00:04:51,889 --> 00:04:54,229
million lines of code windows seven is

89
00:04:54,229 --> 00:04:56,900
about 40 million lines of code even MS

90
00:04:56,900 --> 00:05:00,940
office is about almost 30 million and

91
00:05:00,940 --> 00:05:06,020
but meanwhile we've studied what they

92
00:05:06,020 --> 00:05:08,569
what they tend to use in terms of of

93
00:05:08,569 --> 00:05:13,009
malware and it's lots of little little

94
00:05:13,009 --> 00:05:15,020
programs even Stuxnet was which was very

95
00:05:15,020 --> 00:05:17,150
sophisticated was made up of a lot of

96
00:05:17,150 --> 00:05:21,259
small pieces that are averaging about

97
00:05:21,259 --> 00:05:29,870
125 lines of code so this is a number

98
00:05:29,870 --> 00:05:32,360
that you know I got this two days ago

99
00:05:32,360 --> 00:05:34,130
and it may have gone up a little bit

100
00:05:34,130 --> 00:05:36,199
since then it's the total number of

101
00:05:36,199 --> 00:05:41,659
unique vulnerabilities that the miter

102
00:05:41,659 --> 00:05:46,729
and NIST track so across all the world's

103
00:05:46,729 --> 00:05:49,789
software that you know that that has

104
00:05:49,789 --> 00:05:51,770
where vulnerabilities have been found

105
00:05:51,770 --> 00:05:53,930
this is the number of of unique

106
00:05:53,930 --> 00:05:56,659
different and different ones which is

107
00:05:56,659 --> 00:05:59,750
still a really large number for someone

108
00:05:59,750 --> 00:06:01,729
to start you know going through that

109
00:06:01,729 --> 00:06:04,060
list and trying to use to exploit

110
00:06:04,060 --> 00:06:06,979
against you know the billions and

111
00:06:06,979 --> 00:06:13,900
billions of lines of code out there so I

112
00:06:13,900 --> 00:06:16,729
this is of course obvious but it's still

113
00:06:16,729 --> 00:06:20,569
worth worth saying out loud in that when

114
00:06:20,569 --> 00:06:22,279
you're not talking about authentication

115
00:06:22,279 --> 00:06:25,340
attacks or software or social

116
00:06:25,340 --> 00:06:29,870
engineering attacks and and maybe the

117
00:06:29,870 --> 00:06:32,389
rare really sophisticated side-channel

118
00:06:32,389 --> 00:06:35,500
attacks that can you know watch the

119
00:06:35,500 --> 00:06:37,759
electromagnetic emanations from your

120
00:06:37,759 --> 00:06:38,870
devices

121
00:06:38,870 --> 00:06:41,540
but all the rest of these are because

122
00:06:41,540 --> 00:06:44,540
there's a bug in the software and and

123
00:06:44,540 --> 00:06:47,120
and they're able to use that as a vector

124
00:06:47,120 --> 00:06:55,130
of attack to to get in so people like

125
00:06:55,130 --> 00:06:57,380
Steve McConnell who studied this a lot

126
00:06:57,380 --> 00:06:59,450
wrote wrote a book group several books

127
00:06:59,450 --> 00:07:03,110
about writing secure code and and and

128
00:07:03,110 --> 00:07:05,630
just software engineering practices in

129
00:07:05,630 --> 00:07:09,070
general has found that on that across

130
00:07:09,070 --> 00:07:12,110
all types of applications that have been

131
00:07:12,110 --> 00:07:14,570
deployed so we don't mean you know in

132
00:07:14,570 --> 00:07:17,270
the lab that have been deployed no

133
00:07:17,270 --> 00:07:18,940
matter what the programming language

134
00:07:18,940 --> 00:07:22,160
consistently are about 15 between 15 and

135
00:07:22,160 --> 00:07:24,910
50 bugs per thousand lines of code and

136
00:07:24,910 --> 00:07:28,930
about ten percent of those are

137
00:07:28,930 --> 00:07:32,510
potentially can be turned into attacks

138
00:07:32,510 --> 00:07:36,170
cyber vulnerabilities so the Mercedes

139
00:07:36,170 --> 00:07:39,230
has by this give them give them credit

140
00:07:39,230 --> 00:07:40,910
for the low number one point five

141
00:07:40,910 --> 00:07:44,060
million bugs and about a hundred and

142
00:07:44,060 --> 00:07:46,970
fifty thousand vulnerabilities and we we

143
00:07:46,970 --> 00:07:48,350
know of some of the vulnerabilities

144
00:07:48,350 --> 00:07:50,930
there's an application you can you can

145
00:07:50,930 --> 00:07:54,440
research and get that on your laptop

146
00:07:54,440 --> 00:07:57,020
that has a Bluetooth and Wi-Fi can

147
00:07:57,020 --> 00:08:00,530
driving along the road can get into the

148
00:08:00,530 --> 00:08:04,360
air wireless air pressure sensor the

149
00:08:04,360 --> 00:08:06,710
architecture of those cars which one

150
00:08:06,710 --> 00:08:09,950
single bus that communicates all

151
00:08:09,950 --> 00:08:12,320
information to anyone on the bus that's

152
00:08:12,320 --> 00:08:14,630
interested in it can actually construct

153
00:08:14,630 --> 00:08:17,240
a malicious packet to the engine control

154
00:08:17,240 --> 00:08:20,810
unit and floor the accelerator and as as

155
00:08:20,810 --> 00:08:22,580
the chart showed that the battle is

156
00:08:22,580 --> 00:08:24,680
asymmetric we're building bigger and

157
00:08:24,680 --> 00:08:30,590
bigger systems and even when we start

158
00:08:30,590 --> 00:08:33,770
patching it turns out now that one of

159
00:08:33,770 --> 00:08:35,990
the most frequent ways in which an

160
00:08:35,990 --> 00:08:38,150
enterprise's attack is through their

161
00:08:38,150 --> 00:08:40,130
intrusion detection systems because

162
00:08:40,130 --> 00:08:41,539
they're about 10 million lines of code

163
00:08:41,539 --> 00:08:44,870
and have bugs in it and almost always

164
00:08:44,870 --> 00:08:47,210
need to have privileged access to the

165
00:08:47,210 --> 00:08:51,190
rest of the system so

166
00:08:51,190 --> 00:08:53,630
why haven't we if we've got all these

167
00:08:53,630 --> 00:08:56,210
billions of transistors why haven't we

168
00:08:56,210 --> 00:08:58,040
as an industry why is the computer

169
00:08:58,040 --> 00:09:00,800
industry really attack this problem with

170
00:09:00,800 --> 00:09:04,790
a vengeance and there I think a number

171
00:09:04,790 --> 00:09:07,280
of reasons for it one is is that the

172
00:09:07,280 --> 00:09:09,440
when you have an install base of

173
00:09:09,440 --> 00:09:12,500
millions and millions of applications on

174
00:09:12,500 --> 00:09:15,310
billions of devices you're not going to

175
00:09:15,310 --> 00:09:18,950
take radical make radical changes you're

176
00:09:18,950 --> 00:09:20,540
going to work in an incremental fashion

177
00:09:20,540 --> 00:09:23,720
and so they're not going to they're not

178
00:09:23,720 --> 00:09:29,510
going to you know break things so why is

179
00:09:29,510 --> 00:09:34,820
everything so vulnerable well we have a

180
00:09:34,820 --> 00:09:36,380
lot of software that's actually not that

181
00:09:36,380 --> 00:09:38,720
well understood we were asked to take a

182
00:09:38,720 --> 00:09:43,940
look at the a major weapon system for

183
00:09:43,940 --> 00:09:47,750
the Navy and we went in there with with

184
00:09:47,750 --> 00:09:50,000
a what we thought was a reasonable

185
00:09:50,000 --> 00:09:51,890
question which is whoa what do you think

186
00:09:51,890 --> 00:09:54,500
your cyber vulnerabilities are and they

187
00:09:54,500 --> 00:09:56,810
said you don't understand it's not a

188
00:09:56,810 --> 00:09:58,280
reasonable question we don't even

189
00:09:58,280 --> 00:10:00,920
understand how it works can you help us

190
00:10:00,920 --> 00:10:03,020
understand how it works and I probed a

191
00:10:03,020 --> 00:10:04,940
little further why is that well it was

192
00:10:04,940 --> 00:10:07,640
originally written in jovial how many of

193
00:10:07,640 --> 00:10:11,750
you have written a jovial okay so then

194
00:10:11,750 --> 00:10:15,080
when when the when man's last great

195
00:10:15,080 --> 00:10:17,570
programming language called ADA came out

196
00:10:17,570 --> 00:10:21,290
they they translated jovial to Ada and

197
00:10:21,290 --> 00:10:24,410
then about two weeks later when everyone

198
00:10:24,410 --> 00:10:28,040
realized ADA wasn't that they translated

199
00:10:28,040 --> 00:10:30,620
it again to see which is where it is now

200
00:10:30,620 --> 00:10:32,210
with the people that wrote the original

201
00:10:32,210 --> 00:10:34,940
jovial code it's not just that they

202
00:10:34,940 --> 00:10:36,920
don't work for the contractors anymore

203
00:10:36,920 --> 00:10:39,530
they actually aren't alive anymore so

204
00:10:39,530 --> 00:10:43,689
they have they have this problem

205
00:10:44,440 --> 00:10:47,660
increasingly we have been as computer

206
00:10:47,660 --> 00:10:49,160
scientists we have been making great

207
00:10:49,160 --> 00:10:51,350
strides in our ability to do formal

208
00:10:51,350 --> 00:10:54,320
verification of systems but not systems

209
00:10:54,320 --> 00:10:56,480
that are really complicated that's still

210
00:10:56,480 --> 00:11:01,070
way beyond the reach of doing the formal

211
00:11:01,070 --> 00:11:04,749
methods you know proving

212
00:11:04,749 --> 00:11:08,170
some property that you want to to

213
00:11:08,170 --> 00:11:12,139
validate in your software hardware as

214
00:11:12,139 --> 00:11:17,600
well so we still tend to write pretty

215
00:11:17,600 --> 00:11:22,100
monolithic software so and the operating

216
00:11:22,100 --> 00:11:24,949
systems are extremely guilty of this so

217
00:11:24,949 --> 00:11:28,249
if you can compromise get you know

218
00:11:28,249 --> 00:11:32,600
access as root or super user you pretty

219
00:11:32,600 --> 00:11:34,160
much can take over the entire machine

220
00:11:34,160 --> 00:11:36,589
whereas we've known for a long time if

221
00:11:36,589 --> 00:11:39,319
you if you wrote critical services as a

222
00:11:39,319 --> 00:11:44,089
set of independent entities that only

223
00:11:44,089 --> 00:11:46,009
had what's called least privileged

224
00:11:46,009 --> 00:11:49,009
access to what they need then you

225
00:11:49,009 --> 00:11:51,350
compartmentalize the system and all hope

226
00:11:51,350 --> 00:11:54,949
is not lost if somebody compromises one

227
00:11:54,949 --> 00:12:00,740
of those services we also if you were to

228
00:12:00,740 --> 00:12:03,470
try to come up with abstractions for

229
00:12:03,470 --> 00:12:07,399
most of the hardware we have it's it's

230
00:12:07,399 --> 00:12:10,389
it's it's very difficult to do so and

231
00:12:10,389 --> 00:12:14,589
and people aren't willing to pay the

232
00:12:14,589 --> 00:12:17,749
performance costs to create those kinds

233
00:12:17,749 --> 00:12:20,839
of effective isolations in the hardware

234
00:12:20,839 --> 00:12:28,579
either and then where this is you know

235
00:12:28,579 --> 00:12:32,269
the the the key time when the computer

236
00:12:32,269 --> 00:12:35,110
industry was just getting started and

237
00:12:35,110 --> 00:12:37,670
and and really all that mattered was

238
00:12:37,670 --> 00:12:41,449
smaller cheaper faster and in getting

239
00:12:41,449 --> 00:12:43,179
climbing up that Moore's Law curve

240
00:12:43,179 --> 00:12:47,059
quickly so this is what that

241
00:12:47,059 --> 00:12:50,230
architecture you know looks like and

242
00:12:50,230 --> 00:12:52,790
those of us that have been you know

243
00:12:52,790 --> 00:12:55,249
working in this this area for a long

244
00:12:55,249 --> 00:12:57,860
time call that single undifferentiated

245
00:12:57,860 --> 00:13:01,670
memory raw seething bits because the

246
00:13:01,670 --> 00:13:04,189
processor has absolutely no idea what

247
00:13:04,189 --> 00:13:07,790
anything is it's just told go execute at

248
00:13:07,790 --> 00:13:09,949
this address and it says okay that must

249
00:13:09,949 --> 00:13:11,449
be an instruction it treats it as an

250
00:13:11,449 --> 00:13:16,730
instruction and and starts executing so

251
00:13:16,730 --> 00:13:20,560
if somebody finds a buffer overflow

252
00:13:20,560 --> 00:13:23,870
vulnerability and can use that to

253
00:13:23,870 --> 00:13:26,300
download a bunch of their code

254
00:13:26,300 --> 00:13:28,910
instructions for this processor that

255
00:13:28,910 --> 00:13:32,180
they're targeting there's a really good

256
00:13:32,180 --> 00:13:33,529
chance they're going to be able to fig

257
00:13:33,529 --> 00:13:34,790
also figure out a way to get the

258
00:13:34,790 --> 00:13:36,589
processor by changing the return address

259
00:13:36,589 --> 00:13:39,050
from you know the function that's on the

260
00:13:39,050 --> 00:13:42,880
stack to the beginning of their code and

261
00:13:42,880 --> 00:13:47,120
now the the processor has no ability to

262
00:13:47,120 --> 00:13:49,699
help you stop that because it doesn't

263
00:13:49,699 --> 00:13:53,329
know what's a pointer what's a buffer

264
00:13:53,329 --> 00:13:55,940
what's an instruction what's just you

265
00:13:55,940 --> 00:14:00,310
know data for you know a sequel query

266
00:14:00,310 --> 00:14:05,389
and so this is you know part of the the

267
00:14:05,389 --> 00:14:12,910
problem so what what we set out to do

268
00:14:12,910 --> 00:14:18,550
this was a initially a project that

269
00:14:18,550 --> 00:14:23,269
DARPA created as a result of reaction to

270
00:14:23,269 --> 00:14:28,310
Stuxnet so yes it's true that Stuxnet

271
00:14:28,310 --> 00:14:32,720
was a cooperative effort between one

272
00:14:32,720 --> 00:14:34,060
really little company on the

273
00:14:34,060 --> 00:14:37,010
Mediterranean and one dice a company I

274
00:14:37,010 --> 00:14:40,490
meant country and a really big company

275
00:14:40,490 --> 00:14:44,750
country in North America and it still

276
00:14:44,750 --> 00:14:47,120
scared the people at the Pentagon

277
00:14:47,120 --> 00:14:48,949
because they realized that we'd let the

278
00:14:48,949 --> 00:14:50,870
cat out of the bag that we were we were

279
00:14:50,870 --> 00:14:53,360
going to teach people how to do attacks

280
00:14:53,360 --> 00:14:56,350
as sophisticated as Stuxnet and

281
00:14:56,350 --> 00:14:59,060
following Stuxnet of course was Dooku

282
00:14:59,060 --> 00:15:01,220
and Flame and Red October and those were

283
00:15:01,220 --> 00:15:04,730
not all perpetrated by the same people

284
00:15:04,730 --> 00:15:06,769
as Stuxnet yet they have the similar

285
00:15:06,769 --> 00:15:14,620
kinds of look and feel to them so we

286
00:15:14,620 --> 00:15:18,940
with this program that DARPA created in

287
00:15:18,940 --> 00:15:21,800
2010 which was called crash they ended

288
00:15:21,800 --> 00:15:23,420
up spending a hundred million dollars on

289
00:15:23,420 --> 00:15:25,819
this research program and crash stands

290
00:15:25,819 --> 00:15:29,269
for clean slate redesign of adaptive

291
00:15:29,269 --> 00:15:30,290
secure house

292
00:15:30,290 --> 00:15:37,220
so start over and and don't be tied to

293
00:15:37,220 --> 00:15:39,800
the architectures of the past and is it

294
00:15:39,800 --> 00:15:42,079
possible to make something that would be

295
00:15:42,079 --> 00:15:44,720
immune to the the type of attack that

296
00:15:44,720 --> 00:15:47,930
Stuxnet represents so take advantage of

297
00:15:47,930 --> 00:15:51,680
inexpensive hardware follow well-known

298
00:15:51,680 --> 00:15:53,300
security principles like the ones I just

299
00:15:53,300 --> 00:15:54,860
mentioned least privileged

300
00:15:54,860 --> 00:15:57,649
compartmentalization and use a lot of

301
00:15:57,649 --> 00:16:01,160
formal verification because you don't

302
00:16:01,160 --> 00:16:03,079
want to have to test this kind of thing

303
00:16:03,079 --> 00:16:06,440
and come up with you know elaborate

304
00:16:06,440 --> 00:16:09,170
manual tests to try to because you're

305
00:16:09,170 --> 00:16:11,750
never going to get coverage you're going

306
00:16:11,750 --> 00:16:14,360
to you're going to miss too much and so

307
00:16:14,360 --> 00:16:16,940
the idea was okay we're going to use

308
00:16:16,940 --> 00:16:18,860
these cheap transistors and we're going

309
00:16:18,860 --> 00:16:22,220
to essentially the key here is can the

310
00:16:22,220 --> 00:16:25,160
processor and the application /

311
00:16:25,160 --> 00:16:28,730
programmer cooperate such that things

312
00:16:28,730 --> 00:16:32,209
that you meant to have it do and meant

313
00:16:32,209 --> 00:16:36,019
not to have it do are in fact the

314
00:16:36,019 --> 00:16:38,959
processor is informed about that and can

315
00:16:38,959 --> 00:16:43,449
avoid these these these kinds of issues

316
00:16:43,540 --> 00:16:47,779
so this alone is not a new idea tagged

317
00:16:47,779 --> 00:16:49,760
memory architectures are not a new idea

318
00:16:49,760 --> 00:16:51,649
the list machine is a tag memory

319
00:16:51,649 --> 00:16:55,040
architecture but mostly for other

320
00:16:55,040 --> 00:16:58,730
reasons like garbage collection there

321
00:16:58,730 --> 00:17:01,639
was a Burroughs machine that was a tag

322
00:17:01,639 --> 00:17:05,900
memory architecture but no one has

323
00:17:05,900 --> 00:17:08,209
really kind of taken the tag memory

324
00:17:08,209 --> 00:17:14,119
architecture to its sort of natural it

325
00:17:14,119 --> 00:17:17,380
to the extension where it can really

326
00:17:17,380 --> 00:17:19,699
collaborate with the processor in terms

327
00:17:19,699 --> 00:17:25,400
of security so an example is that so you

328
00:17:25,400 --> 00:17:27,740
have a word in memory and associated

329
00:17:27,740 --> 00:17:30,440
with it is another word so yeah it looks

330
00:17:30,440 --> 00:17:32,630
like we've just doubled the use of the

331
00:17:32,630 --> 00:17:35,540
memory but transitions are cheap and

332
00:17:35,540 --> 00:17:37,669
besides we can optimize that a little

333
00:17:37,669 --> 00:17:43,130
bit so the the metadata has things in it

334
00:17:43,130 --> 00:17:44,150
like

335
00:17:44,150 --> 00:17:47,840
I'm an instruction and there's also a

336
00:17:47,840 --> 00:17:49,580
rule that says anything that comes in

337
00:17:49,580 --> 00:17:52,640
over the network is always data and you

338
00:17:52,640 --> 00:17:54,860
cannot change those things they the

339
00:17:54,860 --> 00:17:57,680
compiler is a trusted piece of software

340
00:17:57,680 --> 00:17:59,960
running on this machine it can specify

341
00:17:59,960 --> 00:18:02,240
what's an instruction and that's that's

342
00:18:02,240 --> 00:18:08,420
it also something is is is established

343
00:18:08,420 --> 00:18:11,330
as a pointer that is the you know the

344
00:18:11,330 --> 00:18:14,390
first address of a buffer and what the

345
00:18:14,390 --> 00:18:17,240
metadata has is this is the beginning of

346
00:18:17,240 --> 00:18:23,620
a buffer and the buffer is this long so

347
00:18:23,620 --> 00:18:27,080
with this we can start to control

348
00:18:27,080 --> 00:18:30,470
provenance who owns certain things and

349
00:18:30,470 --> 00:18:34,340
and fine-grained access control so with

350
00:18:34,340 --> 00:18:37,430
this we can actually implement on the

351
00:18:37,430 --> 00:18:39,470
military side multi-level security this

352
00:18:39,470 --> 00:18:41,540
is top secret this a secret this is

353
00:18:41,540 --> 00:18:44,510
public in in the rest of the world you

354
00:18:44,510 --> 00:18:45,980
know this is personally identifiable

355
00:18:45,980 --> 00:18:48,860
information and it will never be any

356
00:18:48,860 --> 00:18:52,930
anything lower than that we can actually

357
00:18:52,930 --> 00:18:55,750
have other types of other types

358
00:18:55,750 --> 00:18:59,030
specified with this instructions and

359
00:18:59,030 --> 00:19:03,020
also we can prevent what's you know now

360
00:19:03,020 --> 00:19:05,600
one of them the more dangerous types of

361
00:19:05,600 --> 00:19:09,080
attacks that the sophisticated folks are

362
00:19:09,080 --> 00:19:11,030
using is called return oriented

363
00:19:11,030 --> 00:19:14,660
programming attacks and we can also this

364
00:19:14,660 --> 00:19:19,820
can prevent that from happening so we we

365
00:19:19,820 --> 00:19:23,960
created a an entity that's that's modif

366
00:19:23,960 --> 00:19:26,590
the hardware's modified first with the

367
00:19:26,590 --> 00:19:30,140
with the metadata and then with

368
00:19:30,140 --> 00:19:31,760
something that's called a pump which is

369
00:19:31,760 --> 00:19:33,650
a programmable unit for metadata

370
00:19:33,650 --> 00:19:41,630
processing so the standard very you know

371
00:19:41,630 --> 00:19:44,980
simple kind of normal processor

372
00:19:44,980 --> 00:19:48,830
execution flow is on the left and you

373
00:19:48,830 --> 00:19:50,390
know there's the program counter and

374
00:19:50,390 --> 00:19:53,120
there's where instructions are stored so

375
00:19:53,120 --> 00:19:54,380
that it can fetch the next instruction

376
00:19:54,380 --> 00:19:57,810
and there's where the registers are

377
00:19:57,810 --> 00:20:00,260
you know the registers that are storing

378
00:20:00,260 --> 00:20:02,310
index variables and things like that

379
00:20:02,310 --> 00:20:05,250
then you've got the ALU which is doing

380
00:20:05,250 --> 00:20:07,320
the add subtract multiply divide jump

381
00:20:07,320 --> 00:20:09,750
and you've got memory and and you've got

382
00:20:09,750 --> 00:20:12,660
results and so the little green on the

383
00:20:12,660 --> 00:20:14,970
left side of each of those of those

384
00:20:14,970 --> 00:20:17,280
things including the PC including all

385
00:20:17,280 --> 00:20:19,140
the registers in the memory is the

386
00:20:19,140 --> 00:20:22,350
metadata tag and in parallel with the

387
00:20:22,350 --> 00:20:25,230
ALU is something that is looking at the

388
00:20:25,230 --> 00:20:29,070
tags and making a decision as to is this

389
00:20:29,070 --> 00:20:32,400
operation that the ALU is doing the same

390
00:20:32,400 --> 00:20:40,530
time as me valid should it be allowed so

391
00:20:40,530 --> 00:20:45,690
the the idea number two is that what the

392
00:20:45,690 --> 00:20:51,840
metadata in general point is is is a

393
00:20:51,840 --> 00:20:53,790
pointer to memory so that we can have

394
00:20:53,790 --> 00:20:57,660
arbitrary security policies not just I'm

395
00:20:57,660 --> 00:21:01,350
an instruction and I'm data so so you

396
00:21:01,350 --> 00:21:04,650
know here's a list of the kinds of

397
00:21:04,650 --> 00:21:07,020
things kinds of policies that we can

398
00:21:07,020 --> 00:21:11,490
create that the the pump mechanism can

399
00:21:11,490 --> 00:21:16,920
enforce so as as the ALU is processing

400
00:21:16,920 --> 00:21:19,440
the pump gets the metadata from the tags

401
00:21:19,440 --> 00:21:21,810
of the appropriate operands and the pc

402
00:21:21,810 --> 00:21:26,760
and and it if necessary it goes off and

403
00:21:26,760 --> 00:21:29,160
gets the policy that is pointed to in

404
00:21:29,160 --> 00:21:31,890
memory now in practice it rarely does

405
00:21:31,890 --> 00:21:33,780
that because we create a pretty large

406
00:21:33,780 --> 00:21:37,380
cache that avoid that that rarely misses

407
00:21:37,380 --> 00:21:41,040
so that as the pump is looking to see is

408
00:21:41,040 --> 00:21:45,630
is this is this a valid operation it's

409
00:21:45,630 --> 00:21:47,520
able to get the answer by just looking

410
00:21:47,520 --> 00:21:50,580
at the cash and I'll show you the

411
00:21:50,580 --> 00:21:58,620
results of this in a minute the kinds of

412
00:21:58,620 --> 00:22:00,360
things you can do in these micro

413
00:22:00,360 --> 00:22:02,600
policies which is what we call them is

414
00:22:02,600 --> 00:22:08,310
large and in fact these are security

415
00:22:08,310 --> 00:22:10,910
policies but we can also

416
00:22:10,910 --> 00:22:14,310
we have safety policies are sort of the

417
00:22:14,310 --> 00:22:19,740
first cousin of security policies so for

418
00:22:19,740 --> 00:22:24,540
example suppose that I have a that my

419
00:22:24,540 --> 00:22:30,090
processor is in a an insulin pump and I

420
00:22:30,090 --> 00:22:32,640
would like to create a safety property

421
00:22:32,640 --> 00:22:35,660
that i would add to this list that says

422
00:22:35,660 --> 00:22:38,070
even if the programmer made a mistake

423
00:22:38,070 --> 00:22:40,680
and we get to this point in the program

424
00:22:40,680 --> 00:22:44,900
where we're about to tell the pump to

425
00:22:44,900 --> 00:22:49,380
inject some insulin if that means we

426
00:22:49,380 --> 00:22:50,850
will have injected more than X

427
00:22:50,850 --> 00:22:55,440
milligrams in the last 24 hours alert

428
00:22:55,440 --> 00:22:57,840
alert the user alert everybody you can

429
00:22:57,840 --> 00:22:59,610
and shut down because it would be better

430
00:22:59,610 --> 00:23:03,720
to let the patient go into manual mode

431
00:23:03,720 --> 00:23:07,200
then to kill them but that that's you

432
00:23:07,200 --> 00:23:09,030
know and the same thing is true by the

433
00:23:09,030 --> 00:23:11,430
way with all this autonomous this and

434
00:23:11,430 --> 00:23:13,440
autonomous that we're going to have cars

435
00:23:13,440 --> 00:23:15,420
that drive and drones that deliver

436
00:23:15,420 --> 00:23:16,860
packages and it's all going to be

437
00:23:16,860 --> 00:23:18,330
wonderful an autonomous and they'll

438
00:23:18,330 --> 00:23:20,010
they'll never be any bugs and that

439
00:23:20,010 --> 00:23:22,530
software you might want some safety

440
00:23:22,530 --> 00:23:29,400
properties there so this is the it's a

441
00:23:29,400 --> 00:23:31,560
slightly simplified diagram but what we

442
00:23:31,560 --> 00:23:34,110
did was we took a conventional processor

443
00:23:34,110 --> 00:23:38,960
and we got got into the guts of it and

444
00:23:38,960 --> 00:23:42,660
modified the instruction processing

445
00:23:42,660 --> 00:23:46,860
pipeline and added the the stage down at

446
00:23:46,860 --> 00:23:49,560
the at the end near the end called the

447
00:23:49,560 --> 00:23:55,410
pump so it's it's a it's not a very big

448
00:23:55,410 --> 00:23:57,600
change to an existing processor the

449
00:23:57,600 --> 00:23:59,340
processor that we're doing this to right

450
00:23:59,340 --> 00:24:02,360
now we we did an initial test in

451
00:24:02,360 --> 00:24:06,420
simulation a year ago on the dec alpha

452
00:24:06,420 --> 00:24:09,090
processor so when we first started with

453
00:24:09,090 --> 00:24:11,340
the the whole you know big crash program

454
00:24:11,340 --> 00:24:13,950
i mentioned we took the clean slate part

455
00:24:13,950 --> 00:24:17,070
of that really seriously and we invented

456
00:24:17,070 --> 00:24:19,320
a new instruction set architecture and a

457
00:24:19,320 --> 00:24:22,380
new operating system and everything just

458
00:24:22,380 --> 00:24:24,360
so that we could prove that this was

459
00:24:24,360 --> 00:24:24,900
possible

460
00:24:24,900 --> 00:24:28,650
but that was research now what we're

461
00:24:28,650 --> 00:24:31,080
what we're doing now is we'd like to

462
00:24:31,080 --> 00:24:34,350
bring this out as a real processor that

463
00:24:34,350 --> 00:24:36,030
could be used in embedded systems and

464
00:24:36,030 --> 00:24:38,370
and why do I qualify and say embedded

465
00:24:38,370 --> 00:24:40,920
systems because embedded systems tend to

466
00:24:40,920 --> 00:24:43,260
have a fairly small software stack

467
00:24:43,260 --> 00:24:45,810
compared to this ginormous software

468
00:24:45,810 --> 00:24:47,300
stack that you have to deal with on

469
00:24:47,300 --> 00:24:49,770
servers not to mention the huge

470
00:24:49,770 --> 00:24:52,410
operating systems so to get started and

471
00:24:52,410 --> 00:24:54,540
to and to start attacking the problem at

472
00:24:54,540 --> 00:24:56,700
some pretty meaningful places were

473
00:24:56,700 --> 00:25:02,190
focused on embedded systems so with that

474
00:25:02,190 --> 00:25:05,010
processor on the on the Alpha we were

475
00:25:05,010 --> 00:25:06,720
able to enforce four things

476
00:25:06,720 --> 00:25:09,120
simultaneously that was all we really

477
00:25:09,120 --> 00:25:11,520
wanted to prove memory safety which

478
00:25:11,520 --> 00:25:14,040
means buffer overflow is actually

479
00:25:14,040 --> 00:25:16,890
impossible to have happen control flow

480
00:25:16,890 --> 00:25:19,920
integrity which prevents changing the

481
00:25:19,920 --> 00:25:22,200
that where the processor is going to

482
00:25:22,200 --> 00:25:24,990
jump to or you know where a return

483
00:25:24,990 --> 00:25:27,390
address actually returns to taint

484
00:25:27,390 --> 00:25:31,560
tracking which is am I about to release

485
00:25:31,560 --> 00:25:34,260
top-secret information down a channel

486
00:25:34,260 --> 00:25:37,680
that's public and type separation which

487
00:25:37,680 --> 00:25:40,140
is it basically is helping what we try

488
00:25:40,140 --> 00:25:42,300
to have our programming languages do but

489
00:25:42,300 --> 00:25:47,400
sometimes they don't really do we ended

490
00:25:47,400 --> 00:25:49,380
up having a performance penalty of about

491
00:25:49,380 --> 00:25:54,300
ten percent and a modest energy overhead

492
00:25:54,300 --> 00:25:57,600
and at least for this experiment it was

493
00:25:57,600 --> 00:26:00,150
two times the area that we used we used

494
00:26:00,150 --> 00:26:04,320
exactly twice as much memory but we

495
00:26:04,320 --> 00:26:08,970
didn't do any optimizations so the other

496
00:26:08,970 --> 00:26:10,910
cool thing about this is that we're not

497
00:26:10,910 --> 00:26:15,960
we're not edging silicon to specifically

498
00:26:15,960 --> 00:26:19,050
for any policy these are all policies

499
00:26:19,050 --> 00:26:22,260
that are it's like micro coating and so

500
00:26:22,260 --> 00:26:26,940
if we find that you know there's a new

501
00:26:26,940 --> 00:26:30,380
attack that that is able to you know

502
00:26:30,380 --> 00:26:34,560
successfully get in into this machine we

503
00:26:34,560 --> 00:26:38,929
can we can deploy new policies

504
00:26:38,929 --> 00:26:43,160
so there's the there's the you know

505
00:26:43,160 --> 00:26:46,950
basic diagram of how this works so like

506
00:26:46,950 --> 00:26:49,410
we said there's metadata bits attached

507
00:26:49,410 --> 00:26:51,480
to the word the pumps going to resolve

508
00:26:51,480 --> 00:26:55,350
them we we set it set it up so that the

509
00:26:55,350 --> 00:26:57,410
programmer doesn't have to worry about

510
00:26:57,410 --> 00:27:02,160
that the number of bits that there that

511
00:27:02,160 --> 00:27:04,020
is in the metadata because it's

512
00:27:04,020 --> 00:27:07,380
basically a pointer to an arbitrary

513
00:27:07,380 --> 00:27:12,030
policy that they write and the the logic

514
00:27:12,030 --> 00:27:15,390
that's being performed by the pump once

515
00:27:15,390 --> 00:27:18,179
the rules are written is is a black box

516
00:27:18,179 --> 00:27:19,530
to them they don't need to worry about

517
00:27:19,530 --> 00:27:23,130
that so they can just think of the

518
00:27:23,130 --> 00:27:30,049
metadata as a pointer so here's how it

519
00:27:30,049 --> 00:27:33,150
basically this is the abstract function

520
00:27:33,150 --> 00:27:36,090
of the pump so the opcode which might be

521
00:27:36,090 --> 00:27:40,679
you know ad ad long or or jump and then

522
00:27:40,679 --> 00:27:44,280
the following five things are the tags

523
00:27:44,280 --> 00:27:47,429
not that not the pc itself but the tag

524
00:27:47,429 --> 00:27:49,830
on the pc the tag on the instruction on

525
00:27:49,830 --> 00:27:52,710
the opcode one opcode to and if there's

526
00:27:52,710 --> 00:27:56,490
any memory reference and then all it

527
00:27:56,490 --> 00:27:57,840
comes out on the out on the on the

528
00:27:57,840 --> 00:28:00,210
backside is first of all is this

529
00:28:00,210 --> 00:28:01,770
instruction going to be allowed to

530
00:28:01,770 --> 00:28:05,549
happen what's the new tag on the pc and

531
00:28:05,549 --> 00:28:09,799
if there is one what's the what's the

532
00:28:09,799 --> 00:28:16,080
tag on the resulting operand so i will

533
00:28:16,080 --> 00:28:19,309
show a couple of examples of this so

534
00:28:19,309 --> 00:28:23,309
here's how we do this in for a buffer

535
00:28:23,309 --> 00:28:26,610
overflow what we what we do is we say

536
00:28:26,610 --> 00:28:30,470
when a pointer is being created like by

537
00:28:30,470 --> 00:28:33,510
by the compiler when it's creating the

538
00:28:33,510 --> 00:28:37,200
stack or by Malik when you call mallet

539
00:28:37,200 --> 00:28:40,919
for storage on the heap there's a unique

540
00:28:40,919 --> 00:28:42,540
color that's that's assigned to that

541
00:28:42,540 --> 00:28:45,960
pointer and then to every one of the the

542
00:28:45,960 --> 00:28:49,750
metadata bits for those words in

543
00:28:49,750 --> 00:28:52,270
in memory so now you've got this region

544
00:28:52,270 --> 00:28:56,410
of memory that's you know so to speak is

545
00:28:56,410 --> 00:29:02,140
yellow and this is the policy then on a

546
00:29:02,140 --> 00:29:05,830
load instruction which is that it's it

547
00:29:05,830 --> 00:29:09,370
says an r1 is where the pointer to the

548
00:29:09,370 --> 00:29:14,350
buffer is being referenced from and what

549
00:29:14,350 --> 00:29:17,800
it's saying is this is allowed because

550
00:29:17,800 --> 00:29:22,870
that first location in the result is

551
00:29:22,870 --> 00:29:25,120
whether it's allowed or not and the

552
00:29:25,120 --> 00:29:27,790
answer is yes if the memory location

553
00:29:27,790 --> 00:29:29,530
that you're referencing is the same

554
00:29:29,530 --> 00:29:32,410
color as the pointer and if you go one

555
00:29:32,410 --> 00:29:34,390
one word past the end of the yellow

556
00:29:34,390 --> 00:29:36,670
buffer and you're in the purple this

557
00:29:36,670 --> 00:29:38,890
this will cause a segmentation fault and

558
00:29:38,890 --> 00:29:41,050
then your fault handling will have to

559
00:29:41,050 --> 00:29:42,600
deal with it but it will not allow that

560
00:29:42,600 --> 00:29:50,340
that right to occur so if you if you

561
00:29:50,340 --> 00:29:54,550
take out all social engineering password

562
00:29:54,550 --> 00:29:57,610
guessing attacks which you know we would

563
00:29:57,610 --> 00:29:59,080
just like to see people do better at

564
00:29:59,080 --> 00:30:02,470
those seventy percent of the remaining

565
00:30:02,470 --> 00:30:06,310
attacks are memory misuse which would be

566
00:30:06,310 --> 00:30:09,520
caught by that previous now remember you

567
00:30:09,520 --> 00:30:13,270
know if you've you've got a lot of code

568
00:30:13,270 --> 00:30:15,340
that you've written you've got a lot of

569
00:30:15,340 --> 00:30:18,100
buffers that you've used you've gone

570
00:30:18,100 --> 00:30:20,560
through carefully and you've tried to

571
00:30:20,560 --> 00:30:21,670
make sure that you've done the right

572
00:30:21,670 --> 00:30:23,620
thing with the buffers but it's like a

573
00:30:23,620 --> 00:30:25,540
window a house that has a hundred

574
00:30:25,540 --> 00:30:29,100
windows and you you lock 99 of them so

575
00:30:29,100 --> 00:30:33,090
so you'll catch the 99 and the processor

576
00:30:33,090 --> 00:30:34,960
even when you've done a really good job

577
00:30:34,960 --> 00:30:37,180
you might miss one the processor won't

578
00:30:37,180 --> 00:30:39,760
even let that last one go through and

579
00:30:39,760 --> 00:30:42,330
that's what we mean by the the code and

580
00:30:42,330 --> 00:30:45,490
working with the processor to enforce

581
00:30:45,490 --> 00:30:48,250
this here's another one which which

582
00:30:48,250 --> 00:30:49,960
basically says at the time of that a

583
00:30:49,960 --> 00:30:53,770
call occurs get the list of possible

584
00:30:53,770 --> 00:30:56,800
targets that can that it is legal to

585
00:30:56,800 --> 00:31:02,310
jump to when the call is is returning

586
00:31:02,310 --> 00:31:06,210
and so so then which the compiler knows

587
00:31:06,210 --> 00:31:12,630
of course so the the pc is constantly

588
00:31:12,630 --> 00:31:16,770
being tagged with where where am i where

589
00:31:16,770 --> 00:31:19,260
am i right now before i execute the next

590
00:31:19,260 --> 00:31:23,160
instruction and that it's got a list of

591
00:31:23,160 --> 00:31:27,750
the legal caller tags so now when the

592
00:31:27,750 --> 00:31:30,210
instruction is is a is not a call

593
00:31:30,210 --> 00:31:33,420
instruction it's able to say am i am i

594
00:31:33,420 --> 00:31:36,120
jumping to a place that's legal for the

595
00:31:36,120 --> 00:31:39,780
function that i'm currently in and that

596
00:31:39,780 --> 00:31:41,430
stops a return oriented programming

597
00:31:41,430 --> 00:31:44,850
attack and in general control flow

598
00:31:44,850 --> 00:31:47,370
integrity and i'm just going to show one

599
00:31:47,370 --> 00:31:52,220
more taint tracking is also used to

600
00:31:52,220 --> 00:31:57,690
declare a rule that says no data that is

601
00:31:57,690 --> 00:32:00,630
considered confidential or personally

602
00:32:00,630 --> 00:32:02,670
identifiable can ever leave the machine

603
00:32:02,670 --> 00:32:05,910
unless it's less it's encrypted so you

604
00:32:05,910 --> 00:32:09,450
you you taint the pc such that that rule

605
00:32:09,450 --> 00:32:13,410
is activated and and then at the moment

606
00:32:13,410 --> 00:32:16,010
that it's about to be written to

607
00:32:16,010 --> 00:32:19,170
register at a device driver it's it's

608
00:32:19,170 --> 00:32:22,500
checked and it says i'm about to write

609
00:32:22,500 --> 00:32:24,900
something that's not encrypted that's a

610
00:32:24,900 --> 00:32:27,900
credit card number and it would

611
00:32:27,900 --> 00:32:31,740
basically kick that back and this allows

612
00:32:31,740 --> 00:32:34,470
you to also say that everything coming

613
00:32:34,470 --> 00:32:37,440
in that's considered personally

614
00:32:37,440 --> 00:32:40,410
identifiable or our or confidential is

615
00:32:40,410 --> 00:32:47,970
also encrypted so it's not that useful

616
00:32:47,970 --> 00:32:53,160
if there's only one security policy at a

617
00:32:53,160 --> 00:32:56,240
time and so the tag can point to

618
00:32:56,240 --> 00:32:58,620
essentially a list of as many as you

619
00:32:58,620 --> 00:33:05,580
want and it I normally don't put up

620
00:33:05,580 --> 00:33:07,440
things and say oh this is an eye chart I

621
00:33:07,440 --> 00:33:09,660
wanted you to just look along the bottom

622
00:33:09,660 --> 00:33:15,990
row so the the labels are things like

623
00:33:15,990 --> 00:33:18,510
type information memory safety control

624
00:33:18,510 --> 00:33:22,140
flow taint tracking and in all these

625
00:33:22,140 --> 00:33:25,410
cases the the runtime overhead was eight

626
00:33:25,410 --> 00:33:29,480
between eight and thirteen percent

627
00:33:29,480 --> 00:33:33,920
there's one outlier which is because we

628
00:33:33,920 --> 00:33:38,400
we really tried to do taint taint

629
00:33:38,400 --> 00:33:43,250
tracking at two finer grained level and

630
00:33:43,250 --> 00:33:48,360
it was it was / function and and we had

631
00:33:48,360 --> 00:33:52,230
you know for the for the spec benchmark

632
00:33:52,230 --> 00:33:55,470
that we used it ended up just exploding

633
00:33:55,470 --> 00:33:57,780
and so we'd have to we have to back off

634
00:33:57,780 --> 00:34:00,150
from that level of granularity but

635
00:34:00,150 --> 00:34:02,390
that's we were very pleased with this

636
00:34:02,390 --> 00:34:06,210
runtime even though we were tracking for

637
00:34:06,210 --> 00:34:10,100
policy simultaneously all the way along

638
00:34:10,100 --> 00:34:14,250
so I mentioned formal methods so these

639
00:34:14,250 --> 00:34:17,159
each individual policy is simple enough

640
00:34:17,159 --> 00:34:23,540
that we're able to build proofs in the

641
00:34:23,540 --> 00:34:26,040
programming language or the proof

642
00:34:26,040 --> 00:34:29,639
language it's if you're not familiar

643
00:34:29,639 --> 00:34:32,250
with it the French are the leaders in

644
00:34:32,250 --> 00:34:35,969
formal methods and there they created

645
00:34:35,969 --> 00:34:38,820
this language caulk and it means rooster

646
00:34:38,820 --> 00:34:41,730
and it's the symbol of France so it and

647
00:34:41,730 --> 00:34:47,369
it is by far the best well they all say

648
00:34:47,369 --> 00:34:51,629
it's the best best proof language that

649
00:34:51,629 --> 00:34:53,580
that the formal methods community is

650
00:34:53,580 --> 00:34:59,040
using so they were able to apply this to

651
00:34:59,040 --> 00:35:01,890
information flow control which is which

652
00:35:01,890 --> 00:35:05,070
is the the data equivalent of control

653
00:35:05,070 --> 00:35:08,190
flow that is protecting against

654
00:35:08,190 --> 00:35:11,820
exfiltration of data as my secret data

655
00:35:11,820 --> 00:35:17,160
leaked out then there they were able to

656
00:35:17,160 --> 00:35:18,990
verify that the implementation of it was

657
00:35:18,990 --> 00:35:22,710
correct down to the hardware level we're

658
00:35:22,710 --> 00:35:27,540
applying some random testing as well to

659
00:35:27,540 --> 00:35:29,270
verify all this

660
00:35:29,270 --> 00:35:32,640
and you know we're going to continue

661
00:35:32,640 --> 00:35:36,240
really really hard on the the formal

662
00:35:36,240 --> 00:35:42,360
methods on these policies we've done a

663
00:35:42,360 --> 00:35:44,400
little bit of optimization so far and

664
00:35:44,400 --> 00:35:47,130
we've reduced the overhead remember I

665
00:35:47,130 --> 00:35:49,620
said at the beginning the area was

666
00:35:49,620 --> 00:35:52,020
double and we've gotten that down to

667
00:35:52,020 --> 00:35:57,210
only be essentially ten percent higher

668
00:35:57,210 --> 00:35:59,460
that there's a couple of outliers the

669
00:35:59,460 --> 00:36:02,340
bottom names are from the spec benchmark

670
00:36:02,340 --> 00:36:05,880
that we were using and in in general we

671
00:36:05,880 --> 00:36:08,100
got you know really dramatic

672
00:36:08,100 --> 00:36:10,560
improvements and in a few cases that's

673
00:36:10,560 --> 00:36:13,800
run time on the top and that's energy

674
00:36:13,800 --> 00:36:18,360
over here and area is is way down from

675
00:36:18,360 --> 00:36:20,130
two hundred percent so energy overhead

676
00:36:20,130 --> 00:36:22,070
as I quoted earlier sixty percent

677
00:36:22,070 --> 00:36:26,340
runtime overhead actually even as low as

678
00:36:26,340 --> 00:36:29,460
seven percent we tend to quote ten

679
00:36:29,460 --> 00:36:36,900
percent just to be safe so so here's

680
00:36:36,900 --> 00:36:38,910
where Draper came in we started in this

681
00:36:38,910 --> 00:36:42,810
project at Draper in July we took

682
00:36:42,810 --> 00:36:45,930
basically it was my team that was doing

683
00:36:45,930 --> 00:36:49,440
this under under DARPA and now we've

684
00:36:49,440 --> 00:36:52,560
moved the team to Draper Draper's very

685
00:36:52,560 --> 00:36:55,260
committed to to investing this

686
00:36:55,260 --> 00:36:57,960
themselves and and then providing this

687
00:36:57,960 --> 00:37:00,800
to both government and commercial

688
00:37:00,800 --> 00:37:04,260
entities that have embedded systems and

689
00:37:04,260 --> 00:37:07,590
so the processor that we decided to go

690
00:37:07,590 --> 00:37:10,700
with is the risk five it's open source

691
00:37:10,700 --> 00:37:13,670
it's been now it's been adopted by

692
00:37:13,670 --> 00:37:18,000
Google and the the Sun division of

693
00:37:18,000 --> 00:37:23,010
Oracle which it pains me to say but the

694
00:37:23,010 --> 00:37:26,130
they are looking for a replacement for

695
00:37:26,130 --> 00:37:28,830
the spark and it looks like it's going

696
00:37:28,830 --> 00:37:30,990
to be the risk five we hear rumors that

697
00:37:30,990 --> 00:37:33,750
a lot of other people are are very

698
00:37:33,750 --> 00:37:35,550
excited about this it's been developed

699
00:37:35,550 --> 00:37:38,220
in development for almost 15 years so

700
00:37:38,220 --> 00:37:41,580
it's not it's not new and it is driven

701
00:37:41,580 --> 00:37:42,660
by the

702
00:37:42,660 --> 00:37:44,730
guy at Berkeley who is essentially the

703
00:37:44,730 --> 00:37:49,400
father of the whole risk concept so

704
00:37:49,400 --> 00:37:52,680
because because risk 5 exists with a

705
00:37:52,680 --> 00:37:55,140
linux that works for it and a great tool

706
00:37:55,140 --> 00:37:57,930
chain it means we can get something up

707
00:37:57,930 --> 00:38:01,290
and running fast and in fact we started

708
00:38:01,290 --> 00:38:04,050
in July and we'll have a fully working

709
00:38:04,050 --> 00:38:13,440
system in February we we're doing all

710
00:38:13,440 --> 00:38:15,840
we're doing a full suite of the of the

711
00:38:15,840 --> 00:38:17,970
policies and we're we're developing

712
00:38:17,970 --> 00:38:20,550
actually a language for specifying

713
00:38:20,550 --> 00:38:24,660
policies and checking them we will

714
00:38:24,660 --> 00:38:27,030
modify the compiler the compiler has to

715
00:38:27,030 --> 00:38:28,950
be modified because it has to generate

716
00:38:28,950 --> 00:38:32,120
some of these tags will have to run

717
00:38:32,120 --> 00:38:35,310
through all of Linux even though Linux

718
00:38:35,310 --> 00:38:38,100
works on the risk 5 Linux has places in

719
00:38:38,100 --> 00:38:40,020
it where it actually writes past the end

720
00:38:40,020 --> 00:38:43,220
of a buffer it gets away with it because

721
00:38:43,220 --> 00:38:46,080
nobody else needed that word or words

722
00:38:46,080 --> 00:38:48,660
past the end of the buffer but as soon

723
00:38:48,660 --> 00:38:51,390
as you try to run that on this processor

724
00:38:51,390 --> 00:38:53,550
which by the way as I had it on a

725
00:38:53,550 --> 00:38:56,100
previous slide we called over which is

726
00:38:56,100 --> 00:38:59,910
short for do-over and these are the

727
00:38:59,910 --> 00:39:01,980
other things that that we have to to

728
00:39:01,980 --> 00:39:04,260
build in this time frame and we're going

729
00:39:04,260 --> 00:39:06,390
to try to you know go further than just

730
00:39:06,390 --> 00:39:08,580
making sure Linux runs but actually

731
00:39:08,580 --> 00:39:12,450
start separating it out into its

732
00:39:12,450 --> 00:39:16,920
components and it's so the other thing

733
00:39:16,920 --> 00:39:18,950
that that we're trying to do is to

734
00:39:18,950 --> 00:39:21,660
create a community we're calling it a

735
00:39:21,660 --> 00:39:27,170
hive a community of entities companies

736
00:39:27,170 --> 00:39:30,840
government agencies universities that

737
00:39:30,840 --> 00:39:35,010
want to work together to make systems

738
00:39:35,010 --> 00:39:39,780
that are inherently secure will we're

739
00:39:39,780 --> 00:39:42,000
hoping to have them influence what the

740
00:39:42,000 --> 00:39:45,630
future direction of this should be share

741
00:39:45,630 --> 00:39:49,430
with each other what they're learning

742
00:39:49,430 --> 00:39:52,470
maybe build this chip into their bedded

743
00:39:52,470 --> 00:39:53,999
systems

744
00:39:53,999 --> 00:39:56,879
and get a lot of you know a lot of

745
00:39:56,879 --> 00:40:01,309
interaction with my team as well we have

746
00:40:01,309 --> 00:40:05,099
some very large companies and

747
00:40:05,099 --> 00:40:07,949
universities involved so far it's

748
00:40:07,949 --> 00:40:11,399
looking to be a pretty nice community of

749
00:40:11,399 --> 00:40:15,389
people really anxious to change the game

750
00:40:15,389 --> 00:40:22,799
on the the attackers so I just want to

751
00:40:22,799 --> 00:40:26,519
you know summarize we know our processes

752
00:40:26,519 --> 00:40:28,889
are really insecure and the architecture

753
00:40:28,889 --> 00:40:30,929
that we've been using for a long time is

754
00:40:30,929 --> 00:40:34,169
actually complicit in that but now with

755
00:40:34,169 --> 00:40:37,499
so many transistors we can actually take

756
00:40:37,499 --> 00:40:39,269
advantage of them and use some of them

757
00:40:39,269 --> 00:40:41,879
for security and when people worry about

758
00:40:41,879 --> 00:40:44,489
oh you know can i really afford ten

759
00:40:44,489 --> 00:40:47,219
percent performance overhead you have to

760
00:40:47,219 --> 00:40:50,219
put that into context of so what did

761
00:40:50,219 --> 00:40:56,849
that cost target and and so we've got

762
00:40:56,849 --> 00:41:00,029
you know we're one of a long line of

763
00:41:00,029 --> 00:41:02,239
people that have figured out how to use

764
00:41:02,239 --> 00:41:05,129
metadata tags on hardware we just think

765
00:41:05,129 --> 00:41:06,749
we're going further than anyone else has

766
00:41:06,749 --> 00:41:12,179
with it and that includes safety and the

767
00:41:12,179 --> 00:41:15,029
way we're developing this it's with a

768
00:41:15,029 --> 00:41:17,759
set of tools for it it's going to be

769
00:41:17,759 --> 00:41:21,149
like developing software micro coded

770
00:41:21,149 --> 00:41:24,599
software for specifically for security

771
00:41:24,599 --> 00:41:27,149
but with the the same performance as if

772
00:41:27,149 --> 00:41:34,909
it were in hardware so can I answer any

773
00:41:34,909 --> 00:41:41,209
questions yeah

774
00:41:44,390 --> 00:41:47,348
simply try

775
00:41:52,600 --> 00:41:55,259
so

776
00:41:59,530 --> 00:42:01,810
so the metadata is actually not

777
00:42:01,810 --> 00:42:06,450
addressable by any software or any

778
00:42:06,450 --> 00:42:11,500
hardware except the the pump itself so

779
00:42:11,500 --> 00:42:15,570
once so it's it's it's not possible to

780
00:42:15,570 --> 00:42:19,180
come in from the outside and and address

781
00:42:19,180 --> 00:42:21,040
it and we know that kind of mechanism

782
00:42:21,040 --> 00:42:23,470
works you know we know we know page

783
00:42:23,470 --> 00:42:25,840
tables work we know you know those those

784
00:42:25,840 --> 00:42:30,250
kinds of mechanisms work so that's

785
00:42:30,250 --> 00:42:32,590
completely opaque you won't see that

786
00:42:32,590 --> 00:42:34,870
that you won't even see those addresses

787
00:42:34,870 --> 00:42:36,970
you will only see the addresses for the

788
00:42:36,970 --> 00:42:39,610
payload words like a norm like a normal

789
00:42:39,610 --> 00:42:43,180
machine now I'm not going to stand up

790
00:42:43,180 --> 00:42:45,820
here and say nothing bad will ever

791
00:42:45,820 --> 00:42:48,880
happen we're just we're trying to take a

792
00:42:48,880 --> 00:42:51,400
giant leap and then we think we have a

793
00:42:51,400 --> 00:42:53,620
mechanism where if somebody figures out

794
00:42:53,620 --> 00:42:54,970
something that we didn't think of that

795
00:42:54,970 --> 00:43:00,509
we can we can adapt to it yeah

796
00:43:07,240 --> 00:43:10,080
I have some

797
00:43:17,670 --> 00:43:20,450
if I wanted

798
00:43:27,900 --> 00:43:29,900
I

799
00:43:30,680 --> 00:43:33,140
that's absolutely right so existing

800
00:43:33,140 --> 00:43:35,140
applications on these embedded devices

801
00:43:35,140 --> 00:43:40,120
will will port through a simple a simple

802
00:43:40,120 --> 00:43:43,850
recompile and run a series of tests to

803
00:43:43,850 --> 00:43:46,460
make sure that they don't you know do

804
00:43:46,460 --> 00:43:48,110
any any of these things that the

805
00:43:48,110 --> 00:43:51,290
processor wouldn't you know allow then

806
00:43:51,290 --> 00:43:53,840
if you want to go further and I'm just

807
00:43:53,840 --> 00:43:55,250
restating what you said but it's exactly

808
00:43:55,250 --> 00:43:57,430
right if you wanted to go further and

809
00:43:57,430 --> 00:44:01,430
declare something as you know PII you

810
00:44:01,430 --> 00:44:03,920
know this is a social security number we

811
00:44:03,920 --> 00:44:07,970
we do have to add a couple of you know

812
00:44:07,970 --> 00:44:10,730
extensions to to see to allow you to

813
00:44:10,730 --> 00:44:13,610
specify that and for that to get you

814
00:44:13,610 --> 00:44:16,160
know all the way pushed all the way down

815
00:44:16,160 --> 00:44:18,170
into the metadata tag so that the

816
00:44:18,170 --> 00:44:21,190
processor knows that

817
00:44:33,490 --> 00:44:39,970
so we're in a machine like this if if if

818
00:44:39,970 --> 00:44:42,550
somebody gets physical access to it then

819
00:44:42,550 --> 00:44:45,580
pretty much all hope is lost and so what

820
00:44:45,580 --> 00:44:48,010
we what we and then but you say well

821
00:44:48,010 --> 00:44:51,670
wait in an embedded world physical

822
00:44:51,670 --> 00:44:54,010
access can't prevention of physical

823
00:44:54,010 --> 00:44:56,619
access can't be guaranteed so one of the

824
00:44:56,619 --> 00:45:00,220
great technologies that Draper is the

825
00:45:00,220 --> 00:45:03,610
lead in the world at is anti-tamper

826
00:45:03,610 --> 00:45:06,550
technology we have to be good at it

827
00:45:06,550 --> 00:45:09,630
because it has to be on all of the the

828
00:45:09,630 --> 00:45:13,330
military stuff that we we create and we

829
00:45:13,330 --> 00:45:17,020
now provide that to other companies so

830
00:45:17,020 --> 00:45:20,410
when you know when a fighter jet is sold

831
00:45:20,410 --> 00:45:23,970
to even an ally you know Egypt we

832
00:45:23,970 --> 00:45:26,619
everything in it has anti-tamper on it

833
00:45:26,619 --> 00:45:29,350
so we will make sure that our stuff has

834
00:45:29,350 --> 00:45:34,119
that on it so yeah physical access is

835
00:45:34,119 --> 00:45:37,570
really important we're even worried

836
00:45:37,570 --> 00:45:39,130
about some of these side-channel attacks

837
00:45:39,130 --> 00:45:42,670
and we're we've got one of the people in

838
00:45:42,670 --> 00:45:45,040
this so-called hive who's looking at

839
00:45:45,040 --> 00:45:47,080
what are the things you could do ahead

840
00:45:47,080 --> 00:45:49,960
of time to you know prevent these side

841
00:45:49,960 --> 00:45:52,630
channels side-channel attacks side

842
00:45:52,630 --> 00:45:56,080
channel attack for example can from two

843
00:45:56,080 --> 00:45:59,590
feet away you can actually see the power

844
00:45:59,590 --> 00:46:01,869
fluctuations in a standard processor

845
00:46:01,869 --> 00:46:04,359
enough so that you can actually spot

846
00:46:04,359 --> 00:46:06,820
when it's running aes encryption if you

847
00:46:06,820 --> 00:46:09,940
run it for about 15 million times you

848
00:46:09,940 --> 00:46:15,550
can actually extract the key so we want

849
00:46:15,550 --> 00:46:16,420
to have make sure there's a

850
00:46:16,420 --> 00:46:19,619
countermeasure to that as well

851
00:46:26,230 --> 00:46:30,730
yeah so there are in the micro policies

852
00:46:30,730 --> 00:46:34,150
are secured by being put into an

853
00:46:34,150 --> 00:46:37,180
encrypted store which which you know we

854
00:46:37,180 --> 00:46:42,070
have to manage the key for and you do

855
00:46:42,070 --> 00:46:44,200
have to have physical access there is no

856
00:46:44,200 --> 00:46:47,200
updating of the micro policies over the

857
00:46:47,200 --> 00:46:51,369
air because that would just be too

858
00:46:51,369 --> 00:46:53,020
dangerous so if you're if you're going

859
00:46:53,020 --> 00:46:55,960
to download a new micro policy it's got

860
00:46:55,960 --> 00:46:58,030
to be code signed and then it's and it's

861
00:46:58,030 --> 00:47:07,240
you know stored yeah so yeah where we

862
00:47:07,240 --> 00:47:11,320
are we are we do have a TPM on board the

863
00:47:11,320 --> 00:47:13,900
the chip so that we can manage the key

864
00:47:13,900 --> 00:47:23,550
encryption and everything it's uh it's

865
00:47:23,550 --> 00:47:30,790
it's not not easily accessible but it

866
00:47:30,790 --> 00:47:34,600
has to be accessible through a very you

867
00:47:34,600 --> 00:47:37,330
know one path only it's similar to the

868
00:47:37,330 --> 00:47:39,820
fingerprint reader on the iPhone they

869
00:47:39,820 --> 00:47:41,619
did a very good job on it there's almost

870
00:47:41,619 --> 00:47:45,430
no code at all between the hardware

871
00:47:45,430 --> 00:47:47,350
detection of the fingerprint and it

872
00:47:47,350 --> 00:47:50,200
getting into you know the application

873
00:47:50,200 --> 00:47:52,180
that's asked is this who they say they

874
00:47:52,180 --> 00:47:59,580
are so a similar kind of short path yeah

875
00:48:01,280 --> 00:48:03,280
I

876
00:48:04,130 --> 00:48:07,780
right right

877
00:48:20,520 --> 00:48:25,750
so that you know that's exactly the kind

878
00:48:25,750 --> 00:48:27,040
of thing that we would like to have

879
00:48:27,040 --> 00:48:30,550
people working on with us in this little

880
00:48:30,550 --> 00:48:33,820
hive and just you know just looking a

881
00:48:33,820 --> 00:48:38,530
few years out because so before I did

882
00:48:38,530 --> 00:48:42,610
any of this defense you know or lab work

883
00:48:42,610 --> 00:48:45,340
I was a serial entrepreneur started

884
00:48:45,340 --> 00:48:47,350
several security companies and and

885
00:48:47,350 --> 00:48:50,650
whatnot so I'm treating this like a

886
00:48:50,650 --> 00:48:52,180
start-up you don't try to boil the ocean

887
00:48:52,180 --> 00:48:55,210
day one right so you you pick a niche

888
00:48:55,210 --> 00:48:57,040
and you try to get really good at it and

889
00:48:57,040 --> 00:48:59,350
I think it'll take us about three years

890
00:48:59,350 --> 00:49:03,820
to will have six significant customers

891
00:49:03,820 --> 00:49:06,730
by then I project and and then I think

892
00:49:06,730 --> 00:49:09,340
we'll be ready for what's the next step

893
00:49:09,340 --> 00:49:11,770
now Draper never wants to become a chip

894
00:49:11,770 --> 00:49:14,050
company it's not ever going to do that

895
00:49:14,050 --> 00:49:18,730
but Draper could do what arm does you

896
00:49:18,730 --> 00:49:20,950
know arm licenses armed makes nothing

897
00:49:20,950 --> 00:49:24,670
and they make a 1.25 billion dollars a

898
00:49:24,670 --> 00:49:26,590
year just writing contracts and

899
00:49:26,590 --> 00:49:30,340
collecting checks for royalties so we

900
00:49:30,340 --> 00:49:31,810
could license it we could sell it to a

901
00:49:31,810 --> 00:49:34,180
bigger chip company and a lot of the

902
00:49:34,180 --> 00:49:36,220
security things that you're you know

903
00:49:36,220 --> 00:49:39,160
concerned about being applied here you

904
00:49:39,160 --> 00:49:40,450
know we could start working on those

905
00:49:40,450 --> 00:49:43,900
early or as it starts to you know take

906
00:49:43,900 --> 00:49:46,990
off where we joined the risk five

907
00:49:46,990 --> 00:49:49,960
foundation so we're the third member i'm

908
00:49:49,960 --> 00:49:52,530
very pleased you know Google's first

909
00:49:52,530 --> 00:49:59,830
Oracle second Draper third sort of a but

910
00:49:59,830 --> 00:50:01,420
that'll but but the reason I mentioned

911
00:50:01,420 --> 00:50:03,670
that is that they're very the whole

912
00:50:03,670 --> 00:50:05,490
foundation is very interested in

913
00:50:05,490 --> 00:50:07,860
standards applied to the risk five

914
00:50:07,860 --> 00:50:12,610
security in particular and and in sort

915
00:50:12,610 --> 00:50:14,620
of this ecosystem that could grow up

916
00:50:14,620 --> 00:50:17,530
around and you know an open-source

917
00:50:17,530 --> 00:50:19,960
instruction set architecture and I

918
00:50:19,960 --> 00:50:22,210
should mention that there's a little bit

919
00:50:22,210 --> 00:50:24,310
of secret sauce that will will keep back

920
00:50:24,310 --> 00:50:25,630
but we're going to put everything else

921
00:50:25,630 --> 00:50:28,980
we do back into open source

922
00:50:37,509 --> 00:50:41,289
yeah so I can you know I can give my

923
00:50:41,289 --> 00:50:43,389
card to anybody that wants it and I can

924
00:50:43,389 --> 00:50:48,549
send you those I'm on any more time

925
00:50:48,549 --> 00:50:54,549
drive time okay well we started early so

926
00:50:54,549 --> 00:50:58,079
we'll finish early you have a question

927
00:50:59,999 --> 00:51:04,149
so I don't know the answer to where AMD

928
00:51:04,149 --> 00:51:08,679
is but Intel is coming out with another

929
00:51:08,679 --> 00:51:10,989
set of small additional set of

930
00:51:10,989 --> 00:51:14,919
instructions called mm x I think or is

931
00:51:14,919 --> 00:51:21,479
it MPX and they are designed to but you

932
00:51:21,479 --> 00:51:23,949
it's going to take a while because they

933
00:51:23,949 --> 00:51:26,709
have to be rolled into the operating

934
00:51:26,709 --> 00:51:29,409
system the the programming languages etc

935
00:51:29,409 --> 00:51:33,909
but the idea of them is just to stop the

936
00:51:33,909 --> 00:51:36,939
buffer overflow attacks so I think

937
00:51:36,939 --> 00:51:41,380
you'll see those in the next they're

938
00:51:41,380 --> 00:51:43,869
probably invisibly in the current chips

939
00:51:43,869 --> 00:51:46,119
but you can't access them because

940
00:51:46,119 --> 00:51:50,259
they're not fully debugged yet so you'll

941
00:51:50,259 --> 00:51:51,909
probably see them in the next generation

942
00:51:51,909 --> 00:51:53,889
of Intel chips but you probably won't

943
00:51:53,889 --> 00:51:57,459
yet see support in all the rest of the

944
00:51:57,459 --> 00:52:00,119
tools so it'll probably take another i

945
00:52:00,119 --> 00:52:04,269
would say 35 years before those come out

946
00:52:04,269 --> 00:52:07,449
and and that's you know one piece so

947
00:52:07,449 --> 00:52:08,919
they're they're doing an incremental

948
00:52:08,919 --> 00:52:12,009
approach the problem i have is that the

949
00:52:12,009 --> 00:52:15,399
intel chip you know there nothing's been

950
00:52:15,399 --> 00:52:18,639
thrown away since the you know 8080 in

951
00:52:18,639 --> 00:52:23,949
1986 and so it's it's extremely complex

952
00:52:23,949 --> 00:52:27,189
you you can't prove anything about it

953
00:52:27,189 --> 00:52:29,529
whereas when you go back to you know a

954
00:52:29,529 --> 00:52:32,199
risc processor which is clean especially

955
00:52:32,199 --> 00:52:34,659
this one because it's it's relatively

956
00:52:34,659 --> 00:52:38,349
new compared to you know arms an older

957
00:52:38,349 --> 00:52:40,719
risk design that's had a lot added to it

958
00:52:40,719 --> 00:52:42,369
nips of course has been around a long

959
00:52:42,369 --> 00:52:47,399
time so it's it's it's kind of a nice

960
00:52:47,399 --> 00:52:51,179
place to start all this

961
00:53:13,619 --> 00:53:18,070
you could you couldn't do that you know

962
00:53:18,070 --> 00:53:23,950
you have it enforced by the CPU yeah is

963
00:53:23,950 --> 00:53:27,070
there a question over here um so you've

964
00:53:27,070 --> 00:53:30,340
mentioned how much recent rages across a

965
00:53:30,340 --> 00:53:34,240
target but if you go out and look at

966
00:53:34,240 --> 00:53:36,849
google finance today targets enjoying a

967
00:53:36,849 --> 00:53:38,560
stock price somewhere near a five-year

968
00:53:38,560 --> 00:53:42,280
high right now so my question is are

969
00:53:42,280 --> 00:53:45,760
there enough economic drivers in place

970
00:53:45,760 --> 00:53:48,430
to you know drive the adoption of a chip

971
00:53:48,430 --> 00:53:51,520
that might cost a little bit more you

972
00:53:51,520 --> 00:53:53,320
know when investors don't penalize

973
00:53:53,320 --> 00:53:56,770
companies for insecurity it's a very

974
00:53:56,770 --> 00:54:01,450
good question and I fear that as a

975
00:54:01,450 --> 00:54:03,580
country we tend to wait until there's a

976
00:54:03,580 --> 00:54:07,270
huge disaster to react which is another

977
00:54:07,270 --> 00:54:10,960
really good reason for us to focus on it

978
00:54:10,960 --> 00:54:16,000
the embedded systems market you know we

979
00:54:16,000 --> 00:54:18,030
have a limited amount of bandwidth so

980
00:54:18,030 --> 00:54:20,349
I'm going to be very selective in the

981
00:54:20,349 --> 00:54:22,570
and the first two whose hair is most on

982
00:54:22,570 --> 00:54:25,210
fire about security are going to get our

983
00:54:25,210 --> 00:54:27,460
attention you know as the first two

984
00:54:27,460 --> 00:54:30,099
customers one of those seems to be this

985
00:54:30,099 --> 00:54:33,099
glucose monitor because they want to

986
00:54:33,099 --> 00:54:34,900
start surgically implanting glucose

987
00:54:34,900 --> 00:54:39,640
monitors pricking the skin not good and

988
00:54:39,640 --> 00:54:43,630
the the fact that you know if you if you

989
00:54:43,630 --> 00:54:45,430
only have the patient monitor their

990
00:54:45,430 --> 00:54:50,290
blood glucose level every so often it's

991
00:54:50,290 --> 00:54:52,990
not continuously monitoring and so that

992
00:54:52,990 --> 00:54:55,599
you know where as in those of us that

993
00:54:55,599 --> 00:54:59,260
that you know generate insulin the

994
00:54:59,260 --> 00:55:02,260
old-fashioned way you know we follow the

995
00:55:02,260 --> 00:55:04,990
curve of you know the eating and the

996
00:55:04,990 --> 00:55:08,230
sugars and etc and it's it's unhealthy

997
00:55:08,230 --> 00:55:09,910
for them that they don't so they want to

998
00:55:09,910 --> 00:55:13,390
embed these things so their hair is on

999
00:55:13,390 --> 00:55:16,359
fire because they know that one highly

1000
00:55:16,359 --> 00:55:18,520
publicized incident on their device and

1001
00:55:18,520 --> 00:55:21,999
no surgeon is going to be allowed by the

1002
00:55:21,999 --> 00:55:24,579
their patients to open them up and put

1003
00:55:24,579 --> 00:55:27,069
this inside it's not that there is a

1004
00:55:27,069 --> 00:55:29,249
terrorist attack it's that you know

1005
00:55:29,249 --> 00:55:31,749
somebody attacks it because they can and

1006
00:55:31,749 --> 00:55:34,539
then it gets publicized the other

1007
00:55:34,539 --> 00:55:38,529
another one that we're we're talking to

1008
00:55:38,529 --> 00:55:40,089
and I can't mention any of the military

1009
00:55:40,089 --> 00:55:43,269
ones but that is the company that little

1010
00:55:43,269 --> 00:55:46,809
company makes this device that monitors

1011
00:55:46,809 --> 00:55:48,189
the temperature of something that's

1012
00:55:48,189 --> 00:55:50,049
critical like a big huge tank that could

1013
00:55:50,049 --> 00:55:53,589
go boom or things that are refrigerators

1014
00:55:53,589 --> 00:55:55,959
or freezers that have FDA regulated

1015
00:55:55,959 --> 00:55:59,169
things in them and they then send that

1016
00:55:59,169 --> 00:56:01,299
information back over a cell phone too

1017
00:56:01,299 --> 00:56:03,699
it's encrypted as it goes to wherever

1018
00:56:03,699 --> 00:56:05,829
being monitored but the devices

1019
00:56:05,829 --> 00:56:07,779
themselves are running the old the

1020
00:56:07,779 --> 00:56:10,779
standard processors that are vulnerable

1021
00:56:10,779 --> 00:56:13,959
and this is a company that you know

1022
00:56:13,959 --> 00:56:15,939
they've they've got a hundred thousand

1023
00:56:15,939 --> 00:56:17,709
of these devices installed but they're

1024
00:56:17,709 --> 00:56:20,919
still not a big company and one incident

1025
00:56:20,919 --> 00:56:24,099
could destroy them so target survived

1026
00:56:24,099 --> 00:56:29,549
but but you know someone else might not

1027
00:56:32,189 --> 00:56:35,999
great thank you very much

