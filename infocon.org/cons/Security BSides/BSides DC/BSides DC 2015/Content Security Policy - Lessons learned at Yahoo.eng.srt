1
00:00:00,000 --> 00:00:01,530
so I'm going to give an introduction

2
00:00:01,530 --> 00:00:04,589
about CSP and also share some of the

3
00:00:04,589 --> 00:00:08,039
experience is deploying CSP at Yahoo and

4
00:00:08,039 --> 00:00:10,710
also introduce some tools which probably

5
00:00:10,710 --> 00:00:15,030
be useful for you later to CSP so let's

6
00:00:15,030 --> 00:00:19,439
start CSP content security policy so we

7
00:00:19,439 --> 00:00:21,390
can also really start talking CSP

8
00:00:21,390 --> 00:00:22,800
without mentioning cross-site scripting

9
00:00:22,800 --> 00:00:27,210
so what is cross site scripting so

10
00:00:27,210 --> 00:00:29,039
cross-site scripting is execution of

11
00:00:29,039 --> 00:00:31,830
malicious code injected by an attacker

12
00:00:31,830 --> 00:00:41,480
on victims web just in a sorry about it

13
00:00:41,480 --> 00:00:43,500
so what is crossing something is

14
00:00:43,500 --> 00:00:45,750
basically a execution of malicious code

15
00:00:45,750 --> 00:00:47,489
injected by an attacker on routines web

16
00:00:47,489 --> 00:00:50,850
so I would say cross-site scripting is

17
00:00:50,850 --> 00:00:53,930
kind of a mosquito of the web so it can

18
00:00:53,930 --> 00:00:57,000
create some anions and itching on your

19
00:00:57,000 --> 00:00:59,340
surface and can also go it can become

20
00:00:59,340 --> 00:01:01,859
very dangerous so for example like if

21
00:01:01,859 --> 00:01:03,420
you are an exercise it can lead to

22
00:01:03,420 --> 00:01:05,670
Corinne chill theft for example if you

23
00:01:05,670 --> 00:01:09,810
have a you can set up a form and they

24
00:01:09,810 --> 00:01:12,210
can take your credentials and sub me to

25
00:01:12,210 --> 00:01:14,970
the evil calm or they can read your

26
00:01:14,970 --> 00:01:16,680
emails if here if it is the application

27
00:01:16,680 --> 00:01:20,970
email service or it get it can do matter

28
00:01:20,970 --> 00:01:23,880
distribution can do site defacement so

29
00:01:23,880 --> 00:01:25,320
there are a lot of things you can do so

30
00:01:25,320 --> 00:01:28,259
many times it's okay but at times get it

31
00:01:28,259 --> 00:01:30,930
can get very dangerous so what is the

32
00:01:30,930 --> 00:01:32,729
primary reason the primary reason is

33
00:01:32,729 --> 00:01:36,240
improper neutralization of input when we

34
00:01:36,240 --> 00:01:38,369
rented on a web page so that's a primary

35
00:01:38,369 --> 00:01:41,189
thing so you are taking input and when

36
00:01:41,189 --> 00:01:42,659
you render it on the web page and

37
00:01:42,659 --> 00:01:46,560
without neutralizing the input then you

38
00:01:46,560 --> 00:01:49,320
will get a cross-site scripting so there

39
00:01:49,320 --> 00:01:50,880
are three different classes of a

40
00:01:50,880 --> 00:01:52,890
cross-site scripting one is reflected

41
00:01:52,890 --> 00:01:55,590
another one is stored and Dom Bay

42
00:01:55,590 --> 00:01:57,810
successes so the reflector excess of

43
00:01:57,810 --> 00:02:02,119
work when the user when you pass on a

44
00:02:02,119 --> 00:02:04,950
untrusted input which server take it and

45
00:02:04,950 --> 00:02:07,560
and insert into your web page and

46
00:02:07,560 --> 00:02:10,050
returning back to browser and the core

47
00:02:10,050 --> 00:02:11,879
get executed on your browser that's kind

48
00:02:11,879 --> 00:02:13,410
of reflector you pass an input

49
00:02:13,410 --> 00:02:16,110
there's a plug it back to a browser and

50
00:02:16,110 --> 00:02:18,900
getting loaded in your webpage in the

51
00:02:18,900 --> 00:02:21,420
case of stored excesses is this is very

52
00:02:21,420 --> 00:02:23,790
similar but it gets stored in the web

53
00:02:23,790 --> 00:02:26,040
server and get insert under different

54
00:02:26,040 --> 00:02:27,630
webpages for example like if you are

55
00:02:27,630 --> 00:02:29,310
reading an article which support some

56
00:02:29,310 --> 00:02:31,290
comments all right I put some comments

57
00:02:31,290 --> 00:02:32,790
and when you read the same article you

58
00:02:32,790 --> 00:02:35,130
can see the comment in that article so

59
00:02:35,130 --> 00:02:37,230
if that comment section is susceptible

60
00:02:37,230 --> 00:02:42,180
to exercise then your code get executed

61
00:02:42,180 --> 00:02:44,690
there

62
00:02:51,260 --> 00:02:53,120
and in the case of Dom accessor is

63
00:02:53,120 --> 00:02:55,700
directly manipulating the Dom in the

64
00:02:55,700 --> 00:02:57,829
browser side so you're taking the input

65
00:02:57,829 --> 00:02:59,720
and injecting into your dorm and that is

66
00:02:59,720 --> 00:03:03,230
causing some Dom excesses so it remained

67
00:03:03,230 --> 00:03:06,500
as a top threat in the our top 10 list

68
00:03:06,500 --> 00:03:10,430
since its first publication 2004 so it's

69
00:03:10,430 --> 00:03:12,170
been there for a while we know about

70
00:03:12,170 --> 00:03:14,180
this at least for more than a decade

71
00:03:14,180 --> 00:03:16,819
this issue and let's see what all the

72
00:03:16,819 --> 00:03:21,200
remedies so we since we know about this

73
00:03:21,200 --> 00:03:23,420
problem for long long time and we have

74
00:03:23,420 --> 00:03:25,400
some remedies so the first thing is

75
00:03:25,400 --> 00:03:28,370
input validation and output encoding so

76
00:03:28,370 --> 00:03:30,049
input validations whenever the data

77
00:03:30,049 --> 00:03:32,359
enter into our application you need to

78
00:03:32,359 --> 00:03:34,129
make sure that the data is valid for

79
00:03:34,129 --> 00:03:35,540
example like you are taking a input

80
00:03:35,540 --> 00:03:37,340
phone number input that you have to make

81
00:03:37,340 --> 00:03:40,340
sure that you only accept numbers and

82
00:03:40,340 --> 00:03:42,829
from some optional hyphen or something

83
00:03:42,829 --> 00:03:46,159
like that so you really make sure that

84
00:03:46,159 --> 00:03:48,079
is validated another thing is output

85
00:03:48,079 --> 00:03:50,299
encoding so the whole thing about XSS is

86
00:03:50,299 --> 00:03:52,310
related output encoding so the output

87
00:03:52,310 --> 00:03:53,900
encoding is you're taking input and

88
00:03:53,900 --> 00:03:56,750
place into HTML so when you place it

89
00:03:56,750 --> 00:03:59,660
your content into HTML then context

90
00:03:59,660 --> 00:04:03,650
matters so the context of the warrior

91
00:04:03,650 --> 00:04:06,650
place in the HTML that's very important

92
00:04:06,650 --> 00:04:08,180
for example like if you are placing the

93
00:04:08,180 --> 00:04:10,849
data into an HTML context then you need

94
00:04:10,849 --> 00:04:14,480
to do HTML encoding whereas you are

95
00:04:14,480 --> 00:04:15,919
placing the data in the JavaScript

96
00:04:15,919 --> 00:04:17,510
contact then you need to do javascript

97
00:04:17,510 --> 00:04:20,839
encoding so that's why i said improper

98
00:04:20,839 --> 00:04:22,940
neutralization that's the main thing

99
00:04:22,940 --> 00:04:25,460
about cross-site scripting so the cross

100
00:04:25,460 --> 00:04:27,650
i hope team we can we can completely

101
00:04:27,650 --> 00:04:29,870
solve you are really doing the output

102
00:04:29,870 --> 00:04:32,780
encoding and the second thing is

103
00:04:32,780 --> 00:04:34,870
whitelisting trusted contents and tags

104
00:04:34,870 --> 00:04:37,610
so basically if you are a publisher then

105
00:04:37,610 --> 00:04:39,800
you need to depend upon lot of contacts

106
00:04:39,800 --> 00:04:41,840
from a third party or you need to put a

107
00:04:41,840 --> 00:04:45,349
lot of tags in your site so so one way

108
00:04:45,349 --> 00:04:47,180
is you need to whitelist based on some

109
00:04:47,180 --> 00:04:50,090
security review and also some legal

110
00:04:50,090 --> 00:04:52,789
agreement exists between you and the and

111
00:04:52,789 --> 00:04:55,099
the third party and the third one is

112
00:04:55,099 --> 00:04:56,690
isolation because in many cases we

113
00:04:56,690 --> 00:04:59,840
cannot really control the input or the

114
00:04:59,840 --> 00:05:02,180
data in that case we isolate using

115
00:05:02,180 --> 00:05:03,919
frames for example like we're placing

116
00:05:03,919 --> 00:05:04,700
ads

117
00:05:04,700 --> 00:05:07,160
so you place ad in a separate say five

118
00:05:07,160 --> 00:05:09,980
frames that in that way your application

119
00:05:09,980 --> 00:05:16,670
is not affected by displaying the ads so

120
00:05:16,670 --> 00:05:20,120
is a graph of a CVS disclosed xss

121
00:05:20,120 --> 00:05:23,150
vulnerabilities for last 15 years you

122
00:05:23,150 --> 00:05:24,950
can see the excesses is still a

123
00:05:24,950 --> 00:05:30,350
perryland it's not really reduced for

124
00:05:30,350 --> 00:05:32,060
last 15 years at least four laps ten

125
00:05:32,060 --> 00:05:34,370
years is pretty much there are a lot of

126
00:05:34,370 --> 00:05:38,090
cv is disclosed so now you understand

127
00:05:38,090 --> 00:05:39,650
that with all these remedies we still

128
00:05:39,650 --> 00:05:47,030
have this problem so what is CSP content

129
00:05:47,030 --> 00:05:48,470
security policy it's an additional layer

130
00:05:48,470 --> 00:05:50,540
of protection it is not going to replace

131
00:05:50,540 --> 00:05:52,760
the existing traditional remedies or

132
00:05:52,760 --> 00:05:54,590
mechanisms because you still need input

133
00:05:54,590 --> 00:05:56,630
validation still need output encoding

134
00:05:56,630 --> 00:05:59,570
and this is an additional protection

135
00:05:59,570 --> 00:06:02,870
which prevents this vulnerability get

136
00:06:02,870 --> 00:06:05,690
being exploited that's the thing it is

137
00:06:05,690 --> 00:06:08,690
not going to stop a it won't fix access

138
00:06:08,690 --> 00:06:15,380
it but it just prevent it so let's look

139
00:06:15,380 --> 00:06:18,890
deep into CSP so what is CSP CSP is a

140
00:06:18,890 --> 00:06:20,840
browser mechanism that allow you to

141
00:06:20,840 --> 00:06:23,270
widely set up locations from each other

142
00:06:23,270 --> 00:06:27,070
plication can load resources from so and

143
00:06:27,070 --> 00:06:29,900
CSP is completely backward compatible in

144
00:06:29,900 --> 00:06:31,910
the sense that even if your browser is

145
00:06:31,910 --> 00:06:34,280
not implemented CSP it is not going to

146
00:06:34,280 --> 00:06:36,500
have any side effects it won't work but

147
00:06:36,500 --> 00:06:38,870
it won't have any side effects so that's

148
00:06:38,870 --> 00:06:42,830
a good part so you can specify a policy

149
00:06:42,830 --> 00:06:46,040
on a web page with a CSP HTTP header

150
00:06:46,040 --> 00:06:50,240
something like below so this is the name

151
00:06:50,240 --> 00:06:51,740
of the header called content security

152
00:06:51,740 --> 00:06:54,380
policy and this is called directive

153
00:06:54,380 --> 00:06:57,650
directives is that this is a default

154
00:06:57,650 --> 00:07:00,440
source it says that oh this application

155
00:07:00,440 --> 00:07:03,580
can only load resources from example com

156
00:07:03,580 --> 00:07:06,920
so your application can have a lot of

157
00:07:06,920 --> 00:07:10,320
resources like images I frames and

158
00:07:10,320 --> 00:07:12,630
scripts stylesheets this other kind of

159
00:07:12,630 --> 00:07:14,460
resources which is part of application

160
00:07:14,460 --> 00:07:16,890
so now we are white listing this as your

161
00:07:16,890 --> 00:07:18,390
domain from which you can only load

162
00:07:18,390 --> 00:07:21,210
resources or if you are trying to load

163
00:07:21,210 --> 00:07:23,400
the resources from dummy which is

164
00:07:23,400 --> 00:07:26,280
different from example calm and that is

165
00:07:26,280 --> 00:07:28,290
that means it's violation and browser

166
00:07:28,290 --> 00:07:30,690
will will trigger a violation and you

167
00:07:30,690 --> 00:07:33,720
get reported back to our end point if

168
00:07:33,720 --> 00:07:37,290
you have mentioned it so now let's talk

169
00:07:37,290 --> 00:07:38,730
about policy delivery so how the

170
00:07:38,730 --> 00:07:40,740
policies are tell words there are two

171
00:07:40,740 --> 00:07:42,240
primary mechanism through which you can

172
00:07:42,240 --> 00:07:45,450
deliver the policy and the first one is

173
00:07:45,450 --> 00:07:48,810
that you can use HTML meta tag to

174
00:07:48,810 --> 00:07:53,550
specify a Content security policy so if

175
00:07:53,550 --> 00:07:55,170
you are using meta tag then you need to

176
00:07:55,170 --> 00:07:57,300
the meta tag should be placed on top of

177
00:07:57,300 --> 00:08:01,650
the HTML page and one thing really I

178
00:08:01,650 --> 00:08:04,170
want to notice Firefox is not

179
00:08:04,170 --> 00:08:06,300
implemented this feature meta tag thing

180
00:08:06,300 --> 00:08:09,480
so the recommendation is not to use they

181
00:08:09,480 --> 00:08:11,850
use only for testing and for real

182
00:08:11,850 --> 00:08:13,800
production thing you always use HTTP

183
00:08:13,800 --> 00:08:16,080
header so the second mechanism means to

184
00:08:16,080 --> 00:08:19,770
use is delivery or using HTTP header so

185
00:08:19,770 --> 00:08:23,070
this is HTTP header name there are two

186
00:08:23,070 --> 00:08:26,640
modes of operation here policy delivery

187
00:08:26,640 --> 00:08:28,740
one is content security policy that is

188
00:08:28,740 --> 00:08:32,010
enforced mode so your specific putting a

189
00:08:32,010 --> 00:08:34,349
policy and if the browser find a

190
00:08:34,349 --> 00:08:36,419
violation is going to block it

191
00:08:36,419 --> 00:08:38,370
completely that's called nforce model

192
00:08:38,370 --> 00:08:40,679
but there's another more cold report

193
00:08:40,679 --> 00:08:43,049
only mode is basically used for

194
00:08:43,049 --> 00:08:44,760
monitoring so it's kind of a dry run

195
00:08:44,760 --> 00:08:47,010
it's not going to proc anything so let's

196
00:08:47,010 --> 00:08:49,020
say if you want to try out CSP on your

197
00:08:49,020 --> 00:08:52,200
application and very easy if the report

198
00:08:52,200 --> 00:08:54,480
only mode probably be a good way to go

199
00:08:54,480 --> 00:08:56,640
because very easy for you to convince

200
00:08:56,640 --> 00:08:59,370
the product owner saying there is not

201
00:08:59,370 --> 00:09:00,840
going to have any kind of malfunction

202
00:09:00,840 --> 00:09:03,270
just by enabling it because the dry run

203
00:09:03,270 --> 00:09:05,580
is not going to block but you still can

204
00:09:05,580 --> 00:09:07,380
learn a lot of information by sitting up

205
00:09:07,380 --> 00:09:10,340
in a report only mode

206
00:09:14,930 --> 00:09:18,350
i'll show you i will show you an example

207
00:09:18,350 --> 00:09:21,450
so here is a page i am trying to protect

208
00:09:21,450 --> 00:09:25,530
is a test or HTML and i'm going to apply

209
00:09:25,530 --> 00:09:28,740
this ESP policy this policy director is

210
00:09:28,740 --> 00:09:31,410
default SRC self and there are two

211
00:09:31,410 --> 00:09:33,120
directives here one is default SRC

212
00:09:33,120 --> 00:09:36,690
another is a report uri so what does it

213
00:09:36,690 --> 00:09:39,360
mean so the self means you can load

214
00:09:39,360 --> 00:09:42,660
resources from the protector resources

215
00:09:42,660 --> 00:09:44,730
origin so essentially self means in

216
00:09:44,730 --> 00:09:46,950
areas of your protector resources

217
00:09:46,950 --> 00:09:50,940
example.com and report you Rin point

218
00:09:50,940 --> 00:09:53,400
where the browser or the user agents and

219
00:09:53,400 --> 00:09:55,380
reports to if they find any violations

220
00:09:55,380 --> 00:09:58,020
so let's see what will happen so here

221
00:09:58,020 --> 00:09:59,970
you are trying to open this page in your

222
00:09:59,970 --> 00:10:02,490
browser and can see an image which is

223
00:10:02,490 --> 00:10:05,880
order form method from a location which

224
00:10:05,880 --> 00:10:09,030
is not it is different from self I mean

225
00:10:09,030 --> 00:10:11,460
which is different from this so you

226
00:10:11,460 --> 00:10:14,550
definitely expect a violation because

227
00:10:14,550 --> 00:10:17,000
this page is trying to load a resource

228
00:10:17,000 --> 00:10:20,370
from a location which is not whitelisted

229
00:10:20,370 --> 00:10:23,790
in the policy so when you try to load it

230
00:10:23,790 --> 00:10:27,210
you throw a violation error you can see

231
00:10:27,210 --> 00:10:31,800
it in the web console so this is this is

232
00:10:31,800 --> 00:10:33,840
this overall idea and this is how it

233
00:10:33,840 --> 00:10:40,950
work so now when when the browser

234
00:10:40,950 --> 00:10:42,690
encounter a violation it sent a

235
00:10:42,690 --> 00:10:44,430
violation report if you provide at

236
00:10:44,430 --> 00:10:46,680
airport URI and let's look into the

237
00:10:46,680 --> 00:10:48,900
violation report how it looks like so

238
00:10:48,900 --> 00:10:50,850
the the violation of the ports are in

239
00:10:50,850 --> 00:10:54,120
JSON format and and the fields are kind

240
00:10:54,120 --> 00:10:57,570
of self-explanatory but I'll go over it

241
00:10:57,570 --> 00:11:00,270
so document URI is is a URI you are

242
00:11:00,270 --> 00:11:01,980
trying to protect or the web page you

243
00:11:01,980 --> 00:11:03,330
are trying to protect where you place

244
00:11:03,330 --> 00:11:07,530
your CSV policy and the referrer is

245
00:11:07,530 --> 00:11:09,600
referring is a regular referral thing

246
00:11:09,600 --> 00:11:12,540
what is referring this document URI if

247
00:11:12,540 --> 00:11:14,160
it exists is there otherwise it would be

248
00:11:14,160 --> 00:11:16,500
empty and the bro of URI is the ones

249
00:11:16,500 --> 00:11:19,530
getting blocked because it is not there

250
00:11:19,530 --> 00:11:21,840
in the whitelist and why letter

251
00:11:21,840 --> 00:11:23,400
directive is a directive which is

252
00:11:23,400 --> 00:11:25,540
applied and found that it's

253
00:11:25,540 --> 00:11:28,269
related and effective I'll talk about

254
00:11:28,269 --> 00:11:31,779
effective in you few minutes because you

255
00:11:31,779 --> 00:11:35,620
need to talk about separate or specific

256
00:11:35,620 --> 00:11:38,259
directives so original policy is the one

257
00:11:38,259 --> 00:11:40,329
you sit in the CSP so this is very

258
00:11:40,329 --> 00:11:42,670
interesting because we are encounter

259
00:11:42,670 --> 00:11:45,910
cases were original policy is actually

260
00:11:45,910 --> 00:11:47,980
the origin policy as seen by user agent

261
00:11:47,980 --> 00:11:52,149
so many times it is not as same as the

262
00:11:52,149 --> 00:11:55,240
policy we set because the policy at

263
00:11:55,240 --> 00:11:58,269
times get modified by some browser

264
00:11:58,269 --> 00:12:01,839
extension so you expect this policies as

265
00:12:01,839 --> 00:12:03,910
same as the one you sit in the headers

266
00:12:03,910 --> 00:12:07,029
but that might not be the case always at

267
00:12:07,029 --> 00:12:10,959
times we observe that it differs so

268
00:12:10,959 --> 00:12:16,959
that's very useful tool so now we'll

269
00:12:16,959 --> 00:12:18,399
talk about content security policy

270
00:12:18,399 --> 00:12:21,370
directives so we have the policy

271
00:12:21,370 --> 00:12:23,889
policies are express CSP consists of set

272
00:12:23,889 --> 00:12:26,800
of policies or directives and the

273
00:12:26,800 --> 00:12:29,800
directives so we have separate

274
00:12:29,800 --> 00:12:32,430
directories

275
00:12:35,360 --> 00:12:39,320
yeah so CSP consists of setup varieties

276
00:12:39,320 --> 00:12:41,120
and each directive correspond to a

277
00:12:41,120 --> 00:12:47,240
specific resource type and you can see

278
00:12:47,240 --> 00:12:51,260
here this for example is a suppressor

279
00:12:51,260 --> 00:12:54,110
sees a directive which basically control

280
00:12:54,110 --> 00:12:57,620
what resources you can load part

281
00:12:57,620 --> 00:12:59,089
JavaScript you can load so script SRC

282
00:12:59,089 --> 00:13:01,880
directly correspond to script tag so

283
00:13:01,880 --> 00:13:05,180
essentially the script source contain a

284
00:13:05,180 --> 00:13:07,640
set of whitelisted location from which

285
00:13:07,640 --> 00:13:10,790
you can load and execute scripts the

286
00:13:10,790 --> 00:13:13,730
same with the images are see ya which

287
00:13:13,730 --> 00:13:18,649
basically restrict from were you can

288
00:13:18,649 --> 00:13:21,620
load the resources from the same for

289
00:13:21,620 --> 00:13:24,410
media media is basically correspond to

290
00:13:24,410 --> 00:13:27,290
audio and video tags in the HTML and you

291
00:13:27,290 --> 00:13:29,839
can really control audion video and its

292
00:13:29,839 --> 00:13:33,880
associated text child as I see determine

293
00:13:33,880 --> 00:13:36,740
what I frames you can put in your HTML

294
00:13:36,740 --> 00:13:39,829
so it's basically iframe this you can

295
00:13:39,829 --> 00:13:42,589
whitelist these domains or location from

296
00:13:42,589 --> 00:13:44,449
which you can who can have I frames and

297
00:13:44,449 --> 00:13:47,510
the connected sir she is a Jax thing so

298
00:13:47,510 --> 00:13:50,089
you can Whiteley's the places where you

299
00:13:50,089 --> 00:13:53,899
can make a call as x call and also use

300
00:13:53,899 --> 00:13:56,000
for even so that is push notification

301
00:13:56,000 --> 00:14:02,899
thing and web web sockets so so it's

302
00:14:02,899 --> 00:14:05,000
kind of fine granular kind of thing and

303
00:14:05,000 --> 00:14:08,060
you can use all these tags to have fine

304
00:14:08,060 --> 00:14:10,160
granular resource control like from word

305
00:14:10,160 --> 00:14:13,459
you can load resources from so there is

306
00:14:13,459 --> 00:14:15,470
something called t falta saucy so

307
00:14:15,470 --> 00:14:17,779
default assess if if you don't have

308
00:14:17,779 --> 00:14:21,410
resource specific directive then it will

309
00:14:21,410 --> 00:14:24,920
fall back to divorce SRC directive so it

310
00:14:24,920 --> 00:14:26,630
applies to if any of these things are

311
00:14:26,630 --> 00:14:28,130
missing then it will fall back to a

312
00:14:28,130 --> 00:14:32,050
default SRC directive

313
00:14:35,420 --> 00:14:38,730
so we have more directives so the one is

314
00:14:38,730 --> 00:14:42,149
base URI is for document base URLs can

315
00:14:42,149 --> 00:14:46,199
whitelist here and form actions is

316
00:14:46,199 --> 00:14:48,930
something base URI form action most of

317
00:14:48,930 --> 00:14:50,639
the things here are actually at as part

318
00:14:50,639 --> 00:14:54,509
of CSP 2 i'll talk about CSP too soon so

319
00:14:54,509 --> 00:14:56,550
the form action basically control were

320
00:14:56,550 --> 00:14:59,399
you can submit your form so that's what

321
00:14:59,399 --> 00:15:02,819
is ur initially like the CSP you can you

322
00:15:02,819 --> 00:15:05,970
can exploit a CSP foot have put a form

323
00:15:05,970 --> 00:15:08,250
which exactly look like your login page

324
00:15:08,250 --> 00:15:11,490
and accept user input username password

325
00:15:11,490 --> 00:15:14,430
and submit to google com so here is the

326
00:15:14,430 --> 00:15:15,930
form action you can't really control

327
00:15:15,930 --> 00:15:19,019
weather and all you can submit the CSP

328
00:15:19,019 --> 00:15:22,259
page we're under we can submit the form

329
00:15:22,259 --> 00:15:27,569
actually so one thing and second one is

330
00:15:27,569 --> 00:15:29,339
frame ancestors this is also part of the

331
00:15:29,339 --> 00:15:32,160
CSP too it's very useful and important

332
00:15:32,160 --> 00:15:34,769
because you probably would have heard

333
00:15:34,769 --> 00:15:37,470
about clickjacking and you zex frame

334
00:15:37,470 --> 00:15:40,279
options so this is an alternate way of

335
00:15:40,279 --> 00:15:43,559
specifying who can frame your page so

336
00:15:43,559 --> 00:15:47,009
it's very useful tool and actually this

337
00:15:47,009 --> 00:15:49,889
a duplicate or overrides exclaim options

338
00:15:49,889 --> 00:15:52,350
so going forward if at all if you are

339
00:15:52,350 --> 00:15:54,240
using its frame options and Polly's but

340
00:15:54,240 --> 00:15:59,309
this probably be a good option plug-in

341
00:15:59,309 --> 00:16:02,550
type this is also part of CSP too so

342
00:16:02,550 --> 00:16:06,809
here we control what kind of plugins you

343
00:16:06,809 --> 00:16:08,990
want to support for example like flash

344
00:16:08,990 --> 00:16:13,110
silver Microsoft's Silverlight PDFs so

345
00:16:13,110 --> 00:16:14,339
you can really Whiteley's what you

346
00:16:14,339 --> 00:16:16,290
really want so you have seen like lot of

347
00:16:16,290 --> 00:16:17,850
flash one of it is all those things so

348
00:16:17,850 --> 00:16:20,550
if you want to disable flash then you

349
00:16:20,550 --> 00:16:22,230
know you have closed from your white

350
00:16:22,230 --> 00:16:25,019
lace in that way flash won't get played

351
00:16:25,019 --> 00:16:28,470
on your web page sandbox attribute is

352
00:16:28,470 --> 00:16:30,209
very similar to the iframe San back to

353
00:16:30,209 --> 00:16:32,339
attribute to put some restrictions on

354
00:16:32,339 --> 00:16:35,040
what you can run on your iframe by

355
00:16:35,040 --> 00:16:39,660
controlling by creating some unique same

356
00:16:39,660 --> 00:16:44,939
origin and restrict JavaScript the

357
00:16:44,939 --> 00:16:47,510
strict form submission things like that

358
00:16:47,510 --> 00:16:49,640
the report you are i specify the URL

359
00:16:49,640 --> 00:16:52,460
which user agents and reports about

360
00:16:52,460 --> 00:17:02,360
policy violations so for keywords there

361
00:17:02,360 --> 00:17:04,369
are certain keywords I already

362
00:17:04,369 --> 00:17:06,740
introduced kewell code self so you have

363
00:17:06,740 --> 00:17:08,930
someone does idea about what is what our

364
00:17:08,930 --> 00:17:12,680
keywords are so we have more keywords so

365
00:17:12,680 --> 00:17:15,050
I'll go other keywords so the first one

366
00:17:15,050 --> 00:17:17,359
is none so if you sit let's say for

367
00:17:17,359 --> 00:17:20,599
example deportes RC none that means your

368
00:17:20,599 --> 00:17:22,760
application is self-contained and you

369
00:17:22,760 --> 00:17:25,490
cannot make any external requests so so

370
00:17:25,490 --> 00:17:27,709
if you're an application is completely

371
00:17:27,709 --> 00:17:31,040
kind of self-contained then this is a

372
00:17:31,040 --> 00:17:34,010
very good option and self essentially

373
00:17:34,010 --> 00:17:35,810
restrict access to applications on

374
00:17:35,810 --> 00:17:38,920
origin so you cannot load resources from

375
00:17:38,920 --> 00:17:42,130
location outside of applications domain

376
00:17:42,130 --> 00:17:45,890
application origin unsafe inline that's

377
00:17:45,890 --> 00:17:49,910
interesting so CSP by default bangla

378
00:17:49,910 --> 00:17:52,640
would not allow inline script and style

379
00:17:52,640 --> 00:17:54,350
so what is inline script I'm side is a

380
00:17:54,350 --> 00:17:57,730
mixing of JavaScript style within HTML

381
00:17:57,730 --> 00:18:00,890
so it is because of security reason I

382
00:18:00,890 --> 00:18:04,310
explained in next few slides so unsafe

383
00:18:04,310 --> 00:18:06,350
inline basically relax the restriction

384
00:18:06,350 --> 00:18:09,230
and allow you to have inline script so

385
00:18:09,230 --> 00:18:10,940
the reason where you need to allow is

386
00:18:10,940 --> 00:18:12,050
because there are a lot of legacy

387
00:18:12,050 --> 00:18:14,420
application which have inline JavaScript

388
00:18:14,420 --> 00:18:18,020
and off so to keep to at least to start

389
00:18:18,020 --> 00:18:20,360
probably you need to relax the

390
00:18:20,360 --> 00:18:22,040
restrictions so that we need to use

391
00:18:22,040 --> 00:18:25,340
unsafe inline and say you are the same

392
00:18:25,340 --> 00:18:27,890
way we don't allow evil settimeout

393
00:18:27,890 --> 00:18:31,670
function constructors so the unsaved you

394
00:18:31,670 --> 00:18:34,400
are basically relax or restriction there

395
00:18:34,400 --> 00:18:37,190
are many cases were you your application

396
00:18:37,190 --> 00:18:38,900
depend on some framework some

397
00:18:38,900 --> 00:18:40,790
third-party framework which may use

398
00:18:40,790 --> 00:18:44,570
these functions internally even though

399
00:18:44,570 --> 00:18:46,760
if it is a safe manner it will throw an

400
00:18:46,760 --> 00:18:48,680
error so this will relax essentially

401
00:18:48,680 --> 00:18:51,800
those restrictions while while car as

402
00:18:51,800 --> 00:18:54,380
you know I say basically in this case

403
00:18:54,380 --> 00:18:59,190
default SRC star means it there is no

404
00:18:59,190 --> 00:19:02,640
there is no pup there is no content

405
00:19:02,640 --> 00:19:04,500
security policy essentially means it is

406
00:19:04,500 --> 00:19:12,840
as same as no policy will go over CSP

407
00:19:12,840 --> 00:19:16,290
versions and browser support so we have

408
00:19:16,290 --> 00:19:19,110
two major revision with CSP CSP 1 and

409
00:19:19,110 --> 00:19:22,320
CSP to the CSP one is released our

410
00:19:22,320 --> 00:19:25,650
available since 2012 and is available on

411
00:19:25,650 --> 00:19:28,350
all modern browsers including Chrome

412
00:19:28,350 --> 00:19:34,170
Firefox Opera Safari and edge is a very

413
00:19:34,170 --> 00:19:37,830
limited support on IE but is very

414
00:19:37,830 --> 00:19:41,370
limited and most of the face directives

415
00:19:41,370 --> 00:19:46,080
are part of CSP one and the CSP to is

416
00:19:46,080 --> 00:19:48,240
released very recently couple of months

417
00:19:48,240 --> 00:19:50,630
back and add all the interesting

418
00:19:50,630 --> 00:19:53,430
directives such as forum actions frame

419
00:19:53,430 --> 00:19:55,440
ancestors plug-in types are all very

420
00:19:55,440 --> 00:19:58,860
useful plug-in directives and also

421
00:19:58,860 --> 00:20:01,320
duplicated frame source in favorite

422
00:20:01,320 --> 00:20:05,820
child SRC so the browser support chrome

423
00:20:05,820 --> 00:20:07,800
to browser support is the available in

424
00:20:07,800 --> 00:20:10,830
chrome CSP to support is available in

425
00:20:10,830 --> 00:20:15,390
Chrome Firefox and opera and it is not a

426
00:20:15,390 --> 00:20:21,480
right now everyone Safari and edge now

427
00:20:21,480 --> 00:20:26,850
look at some examples and let's see so

428
00:20:26,850 --> 00:20:30,000
here so you are going to have a policy

429
00:20:30,000 --> 00:20:34,290
you set on X ESP example calm and the

430
00:20:34,290 --> 00:20:36,660
policies say that default source itself

431
00:20:36,660 --> 00:20:39,240
I mean if all source to same origin and

432
00:20:39,240 --> 00:20:41,100
now we are trying to load a chava script

433
00:20:41,100 --> 00:20:43,710
so now you have to tell me whether this

434
00:20:43,710 --> 00:20:49,560
is a violation or not this is going to

435
00:20:49,560 --> 00:20:51,810
have a violation can you can you take a

436
00:20:51,810 --> 00:20:56,790
guess yes or no how JK is correct there

437
00:20:56,790 --> 00:21:00,540
is no violation here whatever what about

438
00:21:00,540 --> 00:21:02,930
this

439
00:21:05,170 --> 00:21:09,610
no yeah that's correct and what about

440
00:21:09,610 --> 00:21:18,130
this y-yeah HTTP is correct and what

441
00:21:18,130 --> 00:21:22,980
about this is going to fire a violation

442
00:21:22,980 --> 00:21:25,720
yeah yes is going to file a fire a

443
00:21:25,720 --> 00:21:29,340
violation because domain is different

444
00:21:29,340 --> 00:21:34,960
what about this yes because the port is

445
00:21:34,960 --> 00:21:41,460
different all right so I mentioned about

446
00:21:41,460 --> 00:21:48,370
unsafe inline so why why CSP it is not

447
00:21:48,370 --> 00:21:50,650
allowing an inline JavaScript so I will

448
00:21:50,650 --> 00:21:52,780
explain you so let's say you have a PHP

449
00:21:52,780 --> 00:21:55,510
script which taken user input and insert

450
00:21:55,510 --> 00:21:58,240
into your page okay so that's what is

451
00:21:58,240 --> 00:22:00,790
happening so you you have an endpoint

452
00:22:00,790 --> 00:22:02,920
which take a username equal to something

453
00:22:02,920 --> 00:22:06,640
and this is your PHP script so you can

454
00:22:06,640 --> 00:22:09,430
see here is accepting the input and

455
00:22:09,430 --> 00:22:12,100
place into HTML code is generated by the

456
00:22:12,100 --> 00:22:15,430
PHP so actually this is vulnerable

457
00:22:15,430 --> 00:22:17,380
because you are not really validating

458
00:22:17,380 --> 00:22:21,070
the input we are completely the PHP

459
00:22:21,070 --> 00:22:23,230
blindly taking the user input and place

460
00:22:23,230 --> 00:22:26,980
the HTML now here is html5 a steamer

461
00:22:26,980 --> 00:22:30,310
file generated by the PHP script which

462
00:22:30,310 --> 00:22:32,290
you get Lord and your browser now you

463
00:22:32,290 --> 00:22:34,720
see how the browser can identify a

464
00:22:34,720 --> 00:22:37,660
legitimate JavaScript with an injected

465
00:22:37,660 --> 00:22:40,870
JavaScript it is almost impossible to

466
00:22:40,870 --> 00:22:42,520
identify unless you give some clue

467
00:22:42,520 --> 00:22:47,050
correct so so that's a problem with the

468
00:22:47,050 --> 00:22:49,390
inline JavaScript so browser is for

469
00:22:49,390 --> 00:22:52,360
browsers very difficult to identify or

470
00:22:52,360 --> 00:22:54,100
differentiate between these two scripts

471
00:22:54,100 --> 00:22:55,870
because this is a legitimate script and

472
00:22:55,870 --> 00:22:59,020
this is the injector scrip it's very

473
00:22:59,020 --> 00:23:00,850
hard to figure out which is good which

474
00:23:00,850 --> 00:23:04,780
is bad so that is the problem of the

475
00:23:04,780 --> 00:23:09,270
inline JavaScript how can we solve it

476
00:23:09,270 --> 00:23:13,290
the recommended practice the recommended

477
00:23:13,290 --> 00:23:15,840
practice is to externalize inline

478
00:23:15,840 --> 00:23:18,060
JavaScript pen style so you need to pull

479
00:23:18,060 --> 00:23:19,500
out the JavaScript and put it into a

480
00:23:19,500 --> 00:23:23,340
separate file but the problem is if it's

481
00:23:23,340 --> 00:23:25,800
for existing application it may involve

482
00:23:25,800 --> 00:23:27,630
significant effort because there will be

483
00:23:27,630 --> 00:23:29,730
lot of pages which are kind of in line

484
00:23:29,730 --> 00:23:33,330
and in addition some people argue that

485
00:23:33,330 --> 00:23:34,890
you still need to keep some inline

486
00:23:34,890 --> 00:23:38,820
JavaScript mainly because not only for

487
00:23:38,820 --> 00:23:41,310
performance page low latency things like

488
00:23:41,310 --> 00:23:44,970
that so in that case we probably won't

489
00:23:44,970 --> 00:23:47,190
be able to completely externalize all

490
00:23:47,190 --> 00:23:51,000
the inline JavaScript and CSS so what

491
00:23:51,000 --> 00:23:52,560
are the solutions are what are the other

492
00:23:52,560 --> 00:23:54,900
solution other solution is unsafe inline

493
00:23:54,900 --> 00:23:57,300
so that means you are relaxing the

494
00:23:57,300 --> 00:23:59,250
restrictions I would have seen the

495
00:23:59,250 --> 00:24:01,680
previous page by relaxing what all

496
00:24:01,680 --> 00:24:03,600
things can happen this is a primary way

497
00:24:03,600 --> 00:24:06,300
of exploiting accesses and you are

498
00:24:06,300 --> 00:24:10,290
loosening it up so so that that reduces

499
00:24:10,290 --> 00:24:14,220
ESP effectiveness so solution three is

500
00:24:14,220 --> 00:24:16,380
CSP to introduce script like listening

501
00:24:16,380 --> 00:24:20,040
features so script whitelisting feature

502
00:24:20,040 --> 00:24:21,150
there are two type of script white

503
00:24:21,150 --> 00:24:22,800
listening feature one is now space

504
00:24:22,800 --> 00:24:26,910
another is hash based so so the whole

505
00:24:26,910 --> 00:24:30,720
idea is to identify our the valid

506
00:24:30,720 --> 00:24:33,150
JavaScript with an injector JavaScript

507
00:24:33,150 --> 00:24:35,640
so is that how we are doing they're

508
00:24:35,640 --> 00:24:37,950
using a script whitelisting the first

509
00:24:37,950 --> 00:24:39,840
option is now so what you are doing is

510
00:24:39,840 --> 00:24:42,180
inside scrip you put a random nouns

511
00:24:42,180 --> 00:24:45,000
nouns as an attribute and you put the

512
00:24:45,000 --> 00:24:48,990
nouns along with HTTP policy and pass it

513
00:24:48,990 --> 00:24:51,630
so the attacker cannot do this because

514
00:24:51,630 --> 00:24:54,720
they cannot add these random nouns into

515
00:24:54,720 --> 00:24:59,490
the CSP header in that way and that way

516
00:24:59,490 --> 00:25:02,370
attacker cannot exploit this so the

517
00:25:02,370 --> 00:25:04,500
problem here is for every page generator

518
00:25:04,500 --> 00:25:08,880
we need to create a new nouns so so you

519
00:25:08,880 --> 00:25:11,220
based on your side architects I may or

520
00:25:11,220 --> 00:25:14,220
may not be possible and another option

521
00:25:14,220 --> 00:25:16,620
is hashing so hashing is basically you

522
00:25:16,620 --> 00:25:18,840
take the script and create an ash

523
00:25:18,840 --> 00:25:21,720
and stick their hash into the CSP policy

524
00:25:21,720 --> 00:25:23,730
so in that way our whitelist in the

525
00:25:23,730 --> 00:25:26,250
script so the problem here is every time

526
00:25:26,250 --> 00:25:27,870
you make changes to your JavaScript we

527
00:25:27,870 --> 00:25:29,250
need to recompute to the hash and place

528
00:25:29,250 --> 00:25:32,250
it on the CSP header so here is how the

529
00:25:32,250 --> 00:25:34,350
hash is computer like you take the

530
00:25:34,350 --> 00:25:37,230
content of the script you create a sha-1

531
00:25:37,230 --> 00:25:40,970
or char to 256 and and got into base64

532
00:25:40,970 --> 00:25:47,670
that's it so what are some of the common

533
00:25:47,670 --> 00:25:49,950
attacks and how CSP can help to mitigate

534
00:25:49,950 --> 00:25:52,680
it the first thing is a content

535
00:25:52,680 --> 00:25:55,830
scripting cross-site scripting so it

536
00:25:55,830 --> 00:25:58,140
provides from being exploited the

537
00:25:58,140 --> 00:26:00,600
cross-site scripting however it does not

538
00:26:00,600 --> 00:26:02,820
fix the cross-site scripting so so you

539
00:26:02,820 --> 00:26:04,560
need to really differentiate between

540
00:26:04,560 --> 00:26:06,600
these two so you still need to use your

541
00:26:06,600 --> 00:26:08,790
common remedies what I mentioned like

542
00:26:08,790 --> 00:26:11,160
input validation output encoding but

543
00:26:11,160 --> 00:26:12,150
this is an additional layer of

544
00:26:12,150 --> 00:26:16,920
protection and it is also helpful in

545
00:26:16,920 --> 00:26:19,020
unapproved third-party beacons tag and

546
00:26:19,020 --> 00:26:21,900
contents so you probably add some

547
00:26:21,900 --> 00:26:23,720
trusted third-party tax in your

548
00:26:23,720 --> 00:26:28,110
application right so you can use CSP to

549
00:26:28,110 --> 00:26:30,360
white lace those tags in that case it

550
00:26:30,360 --> 00:26:32,220
will stop this third party from

551
00:26:32,220 --> 00:26:35,010
piggybacking fourth party tags so it's a

552
00:26:35,010 --> 00:26:37,620
very good tool and also have stricter

553
00:26:37,620 --> 00:26:40,350
control on what these tax can do on your

554
00:26:40,350 --> 00:26:43,260
site back up sniffing very interesting

555
00:26:43,260 --> 00:26:45,660
thing so you can also use this csv

556
00:26:45,660 --> 00:26:49,260
policy to enforce https and completely

557
00:26:49,260 --> 00:26:51,210
remove the mixed content warnings kind

558
00:26:51,210 --> 00:26:53,540
of things so you can make use of this

559
00:26:53,540 --> 00:26:57,570
clickjacking use frame ancestors to

560
00:26:57,570 --> 00:27:01,860
specify valid parents so whom can frame

561
00:27:01,860 --> 00:27:04,620
your page for example login page you

562
00:27:04,620 --> 00:27:06,330
don't want is someone to frame your

563
00:27:06,330 --> 00:27:09,180
login page right something like that so

564
00:27:09,180 --> 00:27:11,400
this is an alternate option to explain

565
00:27:11,400 --> 00:27:16,610
option probably aware of this option and

566
00:27:16,610 --> 00:27:19,410
the next one is block unwanted plug-in

567
00:27:19,410 --> 00:27:21,210
so if your application except some

568
00:27:21,210 --> 00:27:23,100
plugins and if you are certain that you

569
00:27:23,100 --> 00:27:25,230
only accept certain type of plugins like

570
00:27:25,230 --> 00:27:28,590
I I only accept pdfs for example but no

571
00:27:28,590 --> 00:27:30,960
no other plugins are accepted in that

572
00:27:30,960 --> 00:27:32,429
case you can why Lisa spell

573
00:27:32,429 --> 00:27:34,889
means then that we can reduce attack

574
00:27:34,889 --> 00:27:43,440
surface area so now if you want to

575
00:27:43,440 --> 00:27:45,240
deploy CSP then we need to also

576
00:27:45,240 --> 00:27:48,350
understand some browser behavior because

577
00:27:48,350 --> 00:27:50,879
first thing is feature completeness so

578
00:27:50,879 --> 00:27:55,889
so so we have CSP one and CSP too so not

579
00:27:55,889 --> 00:27:58,440
all bosses as a perder CSP to for

580
00:27:58,440 --> 00:28:00,419
example like if you want to use for my

581
00:28:00,419 --> 00:28:02,549
ancestors so actually it's a part of CSP

582
00:28:02,549 --> 00:28:04,379
to which is not supported in all the

583
00:28:04,379 --> 00:28:09,690
browsers so and Safari and edge so in

584
00:28:09,690 --> 00:28:11,970
that case you need to aware of that it

585
00:28:11,970 --> 00:28:13,879
is not hundred percent and

586
00:28:13,879 --> 00:28:15,990
implementation disparities so we have a

587
00:28:15,990 --> 00:28:19,019
standard but implementation slightly

588
00:28:19,019 --> 00:28:22,529
varies between a browsers for example

589
00:28:22,529 --> 00:28:25,740
like so for unsafe evil in Safari even

590
00:28:25,740 --> 00:28:28,200
though it flag a violation but in our

591
00:28:28,200 --> 00:28:30,210
send a violation report to the airport

592
00:28:30,210 --> 00:28:33,330
you are right things like that so there

593
00:28:33,330 --> 00:28:37,399
are some disparity some minor things

594
00:28:37,399 --> 00:28:40,139
some differences between implementation

595
00:28:40,139 --> 00:28:42,509
of the policy on different browsers the

596
00:28:42,509 --> 00:28:45,110
mobile browsers that include tablets

597
00:28:45,110 --> 00:28:48,299
they are behind come back to their

598
00:28:48,299 --> 00:28:50,940
desktop counterparts so most of them

599
00:28:50,940 --> 00:28:54,480
support CSP one but even the chrome and

600
00:28:54,480 --> 00:28:57,210
opera in the mobile they don't have the

601
00:28:57,210 --> 00:29:00,119
CSP support yet at least when I tested

602
00:29:00,119 --> 00:29:06,059
last time so now you get into another

603
00:29:06,059 --> 00:29:09,389
section so CSP deployment so huh so now

604
00:29:09,389 --> 00:29:11,789
we learned about CSP and now we are

605
00:29:11,789 --> 00:29:14,389
going to deploy CSP so this is a kind of

606
00:29:14,389 --> 00:29:17,340
how you start with so most of the people

607
00:29:17,340 --> 00:29:18,539
have trouble with common with the

608
00:29:18,539 --> 00:29:20,820
initial policy because they don't know

609
00:29:20,820 --> 00:29:23,159
what is the initial policy so the

610
00:29:23,159 --> 00:29:25,619
recommendation is ideally get some

611
00:29:25,619 --> 00:29:29,159
whitelisted get some identified domains

612
00:29:29,159 --> 00:29:31,080
you trust essentially an whitelist it

613
00:29:31,080 --> 00:29:33,450
and you can come up with a policy

614
00:29:33,450 --> 00:29:36,059
something similar to this it's just as

615
00:29:36,059 --> 00:29:38,970
an example you can put your trusted

616
00:29:38,970 --> 00:29:41,669
domains just a white Leisure domain here

617
00:29:41,669 --> 00:29:43,879
along with this this is a kind of a

618
00:29:43,879 --> 00:29:46,290
initial policy you can start

619
00:29:46,290 --> 00:29:51,570
with me so now how do you test it so one

620
00:29:51,570 --> 00:29:53,130
way is you need to make changes to

621
00:29:53,130 --> 00:29:55,350
application and test it so that is kind

622
00:29:55,350 --> 00:29:57,420
of time consuming and get a lot of

623
00:29:57,420 --> 00:30:01,140
effort so you can test CSP without

624
00:30:01,140 --> 00:30:03,270
making any code changes so there are

625
00:30:03,270 --> 00:30:05,790
some browser extensions available to

626
00:30:05,790 --> 00:30:08,460
test this so one of the testing tool is

627
00:30:08,460 --> 00:30:11,970
Casper's written by my coworker Stewart

628
00:30:11,970 --> 00:30:13,920
laughs on so that's a very good tool

629
00:30:13,920 --> 00:30:18,120
basically so you can test the policy and

630
00:30:18,120 --> 00:30:23,790
let's see how we can test it so what you

631
00:30:23,790 --> 00:30:26,310
do is go to chrome store install the

632
00:30:26,310 --> 00:30:29,940
Casper there are the tools also and and

633
00:30:29,940 --> 00:30:32,610
you you get into your page where you

634
00:30:32,610 --> 00:30:35,790
want to apply the policy open Casper and

635
00:30:35,790 --> 00:30:38,490
put your policy in the Casper so what it

636
00:30:38,490 --> 00:30:41,100
does is whenever you visit the page

637
00:30:41,100 --> 00:30:43,020
again this policy will be applied to

638
00:30:43,020 --> 00:30:45,630
that page so now you go to your favorite

639
00:30:45,630 --> 00:30:47,690
application i chose gemini @ yahoo.com

640
00:30:47,690 --> 00:30:51,720
and this policy will be applied to the

641
00:30:51,720 --> 00:30:54,510
page and if you go to the web console

642
00:30:54,510 --> 00:30:57,840
you can see some violations so i'll take

643
00:30:57,840 --> 00:31:00,060
a 2 violation example like hearsay

644
00:31:00,060 --> 00:31:03,300
refuse to load the script is trying to

645
00:31:03,300 --> 00:31:05,340
load this page is trying to load a

646
00:31:05,340 --> 00:31:08,190
script from this location so how do you

647
00:31:08,190 --> 00:31:10,580
fix it there are two ways one is either

648
00:31:10,580 --> 00:31:13,620
whitelist this domain if you trust this

649
00:31:13,620 --> 00:31:15,720
domain is this link a location then you

650
00:31:15,720 --> 00:31:18,480
whitelist it in your policy or the other

651
00:31:18,480 --> 00:31:20,970
option is take out the jaws curve and

652
00:31:20,970 --> 00:31:23,520
put it into the same domain so that

653
00:31:23,520 --> 00:31:26,820
that's how you solve the problem and the

654
00:31:26,820 --> 00:31:29,070
next one is refused execute inline

655
00:31:29,070 --> 00:31:30,870
script because it violates the following

656
00:31:30,870 --> 00:31:33,060
CSP directive so that's the latter day

657
00:31:33,060 --> 00:31:35,010
inline JavaScript violation so how you

658
00:31:35,010 --> 00:31:36,900
solve that so we already talked about

659
00:31:36,900 --> 00:31:39,120
how you saw inline JavaScript so you

660
00:31:39,120 --> 00:31:42,680
either use either externalize of I

661
00:31:42,680 --> 00:31:47,250
JavaScript or you can use an ounce or

662
00:31:47,250 --> 00:31:50,970
hash basic white listing and the third

663
00:31:50,970 --> 00:31:53,820
option is relax the whole restriction

664
00:31:53,820 --> 00:31:56,120
using putting unsafe inline which is

665
00:31:56,120 --> 00:32:00,620
recommended but that way you can remove

666
00:32:00,620 --> 00:32:06,440
this violation so this is kind of rinse

667
00:32:06,440 --> 00:32:07,970
and repeat so you need to do the rinse

668
00:32:07,970 --> 00:32:11,390
and repeat this this effort for some

669
00:32:11,390 --> 00:32:13,670
time and until you come up with some

670
00:32:13,670 --> 00:32:16,160
policy so once you have the policy you

671
00:32:16,160 --> 00:32:17,840
can deploy it in your protection so

672
00:32:17,840 --> 00:32:19,670
let's talk about how we can deploy it in

673
00:32:19,670 --> 00:32:23,480
production so in the way the modern

674
00:32:23,480 --> 00:32:25,370
application that built is using see I CD

675
00:32:25,370 --> 00:32:28,310
so you build your application you check

676
00:32:28,310 --> 00:32:30,950
in your code that get cic you build

677
00:32:30,950 --> 00:32:33,650
applications part of CA CD process it

678
00:32:33,650 --> 00:32:35,480
also go through some testing and finally

679
00:32:35,480 --> 00:32:37,010
get deploy into production so that's a

680
00:32:37,010 --> 00:32:39,320
kind of typical flow these days for all

681
00:32:39,320 --> 00:32:41,690
modern applications so so this another

682
00:32:41,690 --> 00:32:45,140
tool course ESP validated Rogge's so so

683
00:32:45,140 --> 00:32:47,360
it's a useful tool basically to date a

684
00:32:47,360 --> 00:32:49,550
kind of Miss configuration if the page

685
00:32:49,550 --> 00:32:52,340
got out of sync with the policy like the

686
00:32:52,340 --> 00:32:53,870
policy and the page are kind of

687
00:32:53,870 --> 00:32:56,540
different things actually so you are

688
00:32:56,540 --> 00:33:00,710
sitting a policy and let's say you are

689
00:33:00,710 --> 00:33:02,450
adding some more contents into your page

690
00:33:02,450 --> 00:33:04,970
and this tool actually can detect that

691
00:33:04,970 --> 00:33:07,400
basically try to load the page and apply

692
00:33:07,400 --> 00:33:09,500
the policy and see any kind of Miss

693
00:33:09,500 --> 00:33:12,770
configuration and it will top the bill

694
00:33:12,770 --> 00:33:15,440
and the developer has to fix it it can

695
00:33:15,440 --> 00:33:17,510
continue it is not for detecting any

696
00:33:17,510 --> 00:33:19,970
attacks but this tool is mainly used to

697
00:33:19,970 --> 00:33:21,620
detect any kind of Miss convocation a

698
00:33:21,620 --> 00:33:23,480
page before hitting the protection so

699
00:33:23,480 --> 00:33:25,520
it's very useful to this is very simple

700
00:33:25,520 --> 00:33:29,390
tools it's a phantom Jess base script I

701
00:33:29,390 --> 00:33:32,510
just take the URL applies his policy and

702
00:33:32,510 --> 00:33:34,550
spit over that is it has any kind of

703
00:33:34,550 --> 00:33:41,090
violation or not so you're deploying

704
00:33:41,090 --> 00:33:44,090
your application to production now watch

705
00:33:44,090 --> 00:33:46,460
next so your user access your

706
00:33:46,460 --> 00:33:48,260
application let's say your application

707
00:33:48,260 --> 00:33:49,400
contain some kind of web vulnerability

708
00:33:49,400 --> 00:33:52,340
and attackers trying to expert eight

709
00:33:52,340 --> 00:33:55,040
data to evil com so what will happen so

710
00:33:55,040 --> 00:33:57,070
I assume you have a relatively

711
00:33:57,070 --> 00:34:00,080
restricted policy that means the power

712
00:34:00,080 --> 00:34:03,080
will stop axia exfil taking data table

713
00:34:03,080 --> 00:34:07,130
calm and it also report a violation

714
00:34:07,130 --> 00:34:10,190
and the violation will be reported into

715
00:34:10,190 --> 00:34:11,899
your endpoints you specify in the report

716
00:34:11,899 --> 00:34:15,290
URI so in the report you are I basically

717
00:34:15,290 --> 00:34:17,629
you can do some kind of analysis but

718
00:34:17,629 --> 00:34:20,120
it's very challenging I I described a

719
00:34:20,120 --> 00:34:21,620
new chart Lee why it is very challenging

720
00:34:21,620 --> 00:34:24,440
but ideally you can get the report you

721
00:34:24,440 --> 00:34:26,300
can use the report identify some

722
00:34:26,300 --> 00:34:28,520
injection injection attack on titan

723
00:34:28,520 --> 00:34:29,989
section attack happen in the real time

724
00:34:29,989 --> 00:34:36,110
and you can practically fix it but in

725
00:34:36,110 --> 00:34:41,210
reality what we encountered is we got

726
00:34:41,210 --> 00:34:43,969
our whole reporting endpoint got clogged

727
00:34:43,969 --> 00:34:47,149
with browser extension violations then

728
00:34:47,149 --> 00:34:49,489
we found somebody thought of a let's

729
00:34:49,489 --> 00:34:52,760
look into it then we chose one browser

730
00:34:52,760 --> 00:34:55,699
extension and try to install it and we

731
00:34:55,699 --> 00:34:58,010
try to install it it can this is what

732
00:34:58,010 --> 00:35:00,350
it's saying it can this extension can

733
00:35:00,350 --> 00:35:03,440
read change all your data and web site

734
00:35:03,440 --> 00:35:05,510
you visit this is a chrome warning

735
00:35:05,510 --> 00:35:08,510
actually so essentially the extension

736
00:35:08,510 --> 00:35:16,460
can do everything essentially one thing

737
00:35:16,460 --> 00:35:17,870
that one thing I really want to talk

738
00:35:17,870 --> 00:35:19,370
about extensions they have more

739
00:35:19,370 --> 00:35:21,890
privileges and permissions compared to

740
00:35:21,890 --> 00:35:27,170
the glover page on your host so this is

741
00:35:27,170 --> 00:35:30,080
a code which I got as part of extension

742
00:35:30,080 --> 00:35:32,720
JavaScript so you clearly say that this

743
00:35:32,720 --> 00:35:35,450
file order in every web page and all we

744
00:35:35,450 --> 00:35:37,790
do is inject the chase tag to audie

745
00:35:37,790 --> 00:35:39,500
itself so basically they're injecting

746
00:35:39,500 --> 00:35:41,060
that some JavaScript to every page you

747
00:35:41,060 --> 00:35:44,270
visit so this is a code as part of the

748
00:35:44,270 --> 00:35:49,640
extension so now what I am doing I am

749
00:35:49,640 --> 00:35:52,190
going to be seated web page I'm going to

750
00:35:52,190 --> 00:35:55,280
be TCS be tested by you so the CSP

751
00:35:55,280 --> 00:35:57,500
tester all I yo contain if already have

752
00:35:57,500 --> 00:36:01,700
a policy and let's see here I open a web

753
00:36:01,700 --> 00:36:03,470
console you can see that that script

754
00:36:03,470 --> 00:36:05,180
actually mentioned the previous slide

755
00:36:05,180 --> 00:36:07,550
got injected in the in the in the web

756
00:36:07,550 --> 00:36:09,470
page so the script is actually get

757
00:36:09,470 --> 00:36:12,110
injected so this is this won't trigger

758
00:36:12,110 --> 00:36:16,160
any violation because by D for CSP is

759
00:36:16,160 --> 00:36:17,829
exempted from bra

760
00:36:17,829 --> 00:36:20,229
extensions so that's the reason it won't

761
00:36:20,229 --> 00:36:27,729
complain about it however here you can

762
00:36:27,729 --> 00:36:31,769
see it is trying to load us from outside

763
00:36:31,829 --> 00:36:33,759
so there are two things here one is

764
00:36:33,759 --> 00:36:36,069
injecting the code it won't fire any

765
00:36:36,069 --> 00:36:37,930
violation but the next thing is it

766
00:36:37,930 --> 00:36:40,390
trying to load a script from from a

767
00:36:40,390 --> 00:36:42,519
different location which is different

768
00:36:42,519 --> 00:36:46,029
from self so that will fire a violation

769
00:36:46,029 --> 00:36:48,609
you can see here see CSP directive

770
00:36:48,609 --> 00:36:51,910
default size itself so refuse to load

771
00:36:51,910 --> 00:36:54,489
the script so that's how we are getting

772
00:36:54,489 --> 00:36:56,650
a lot of extension violations because

773
00:36:56,650 --> 00:36:59,410
it's injected script trying to load some

774
00:36:59,410 --> 00:37:02,380
external script into the Dom that

775
00:37:02,380 --> 00:37:08,039
actually fire the violation so to sum up

776
00:37:08,039 --> 00:37:09,999
extensions are considered as part of

777
00:37:09,999 --> 00:37:11,559
trusted computing base is part of your

778
00:37:11,559 --> 00:37:15,579
browser itself they consider so it so it

779
00:37:15,579 --> 00:37:17,079
can interfere with your app application

780
00:37:17,079 --> 00:37:19,930
by injecting ads so injecting ads is a

781
00:37:19,930 --> 00:37:22,719
big problem because they are you have

782
00:37:22,719 --> 00:37:25,029
you when you visit a site this ad

783
00:37:25,029 --> 00:37:27,430
injection extension can put the ads on

784
00:37:27,430 --> 00:37:29,589
top of our page without the site

785
00:37:29,589 --> 00:37:32,709
operators permission and sometimes they

786
00:37:32,709 --> 00:37:35,499
over late or they just remove the actual

787
00:37:35,499 --> 00:37:37,769
ad with their ads all sort of things and

788
00:37:37,769 --> 00:37:40,779
the other one is malware and except I

789
00:37:40,779 --> 00:37:42,880
user information in the path we have

790
00:37:42,880 --> 00:37:46,089
seen a Chrome extension which are which

791
00:37:46,089 --> 00:37:50,769
are stealing user credentials and it can

792
00:37:50,769 --> 00:37:52,630
even after CSP header itself that's

793
00:37:52,630 --> 00:37:55,059
another thing so the CSP had whatever

794
00:37:55,059 --> 00:37:57,279
you said he can actually modify it so

795
00:37:57,279 --> 00:37:58,930
that's another thing interesting thing

796
00:37:58,930 --> 00:38:04,029
and even if you are installing some

797
00:38:04,029 --> 00:38:06,009
extensions it may contain excessive

798
00:38:06,009 --> 00:38:07,869
vulnerabilities whether even the

799
00:38:07,869 --> 00:38:09,969
extensions are cluster that doesn't mean

800
00:38:09,969 --> 00:38:11,650
that everything is good because it may

801
00:38:11,650 --> 00:38:13,839
also connects our vulnerabilities and it

802
00:38:13,839 --> 00:38:15,759
will be much severe if you have an

803
00:38:15,759 --> 00:38:19,150
x-axis on extensions because they run in

804
00:38:19,150 --> 00:38:20,650
higher privileged mode compared to a

805
00:38:20,650 --> 00:38:22,599
regular web page and they can access all

806
00:38:22,599 --> 00:38:27,670
web pages which you visit and it

807
00:38:27,670 --> 00:38:30,130
generate large volume of CSP repo is

808
00:38:30,130 --> 00:38:31,350
basically clock

809
00:38:31,350 --> 00:38:34,380
was reporting end points and also

810
00:38:34,380 --> 00:38:37,100
because of this large volume in

811
00:38:37,100 --> 00:38:40,080
detecting the injection attack has

812
00:38:40,080 --> 00:38:42,120
become extremely hard because very hard

813
00:38:42,120 --> 00:38:44,640
to identify a browser Wiley extension

814
00:38:44,640 --> 00:38:48,529
violation with a real injection attack

815
00:38:50,090 --> 00:38:53,730
so this is a CSP violation resource

816
00:38:53,730 --> 00:38:56,310
specific distribution of violations so

817
00:38:56,310 --> 00:38:59,700
you can see most of them are fifty-eight

818
00:38:59,700 --> 00:39:02,310
percent of the reports are a violation

819
00:39:02,310 --> 00:39:06,840
of script SRC and and the next one is as

820
00:39:06,840 --> 00:39:10,290
i age x cause like connect SRC and the

821
00:39:10,290 --> 00:39:12,600
third one is frame so is a kind of a

822
00:39:12,600 --> 00:39:16,250
general distribution of resource pacific

823
00:39:16,250 --> 00:39:23,100
violations the source is mail yahoo mail

824
00:39:23,100 --> 00:39:26,250
we run for as a report worldly mode for

825
00:39:26,250 --> 00:39:31,860
some bucket yeah so we receive millions

826
00:39:31,860 --> 00:39:39,810
of reports every day actually so I talk

827
00:39:39,810 --> 00:39:42,240
about CHP now so what is not so good

828
00:39:42,240 --> 00:39:45,090
side of CSP so so you need to really

829
00:39:45,090 --> 00:39:47,100
understand when when we talk about CSV

830
00:39:47,100 --> 00:39:49,650
is good for Conda injection attack so it

831
00:39:49,650 --> 00:39:51,900
is partially true because it is mostly

832
00:39:51,900 --> 00:39:54,870
for cross-site scripting but it won't

833
00:39:54,870 --> 00:39:57,060
solve other content injection problems

834
00:39:57,060 --> 00:40:01,110
like sequel injections shell explode

835
00:40:01,110 --> 00:40:02,760
shell like sick or other server side

836
00:40:02,760 --> 00:40:04,730
injections so you need to really

837
00:40:04,730 --> 00:40:06,960
understand the limitation because you

838
00:40:06,960 --> 00:40:09,450
cannot do anything on this and loose

839
00:40:09,450 --> 00:40:12,120
policies make it CSP less effective

840
00:40:12,120 --> 00:40:13,740
especially if you are doing unsaved you

841
00:40:13,740 --> 00:40:16,710
al those kind of things or you only

842
00:40:16,710 --> 00:40:19,590
specify a white-white least for only

843
00:40:19,590 --> 00:40:21,990
certain resource type that means that

844
00:40:21,990 --> 00:40:25,560
also make it less effective and the

845
00:40:25,560 --> 00:40:27,540
browser extension they can override CSP

846
00:40:27,540 --> 00:40:29,490
policy they can essentially modify your

847
00:40:29,490 --> 00:40:32,580
CSV policy added more remove it all sort

848
00:40:32,580 --> 00:40:35,280
of things so so is less effective

849
00:40:35,280 --> 00:40:37,170
against malaysia extension so if the

850
00:40:37,170 --> 00:40:39,030
extensions of it is smart they can

851
00:40:39,030 --> 00:40:41,970
actually remove the extension of CSP you

852
00:40:41,970 --> 00:40:43,269
head or together

853
00:40:43,269 --> 00:40:45,249
in that way you probably not even

854
00:40:45,249 --> 00:40:48,669
getting any violation reports it's an

855
00:40:48,669 --> 00:40:50,499
arms race kind of thing so right now we

856
00:40:50,499 --> 00:40:53,169
are getting a lot of reports maybe the

857
00:40:53,169 --> 00:40:54,969
extension they may become more smart

858
00:40:54,969 --> 00:40:56,739
then started removing the CSP headers

859
00:40:56,739 --> 00:41:00,519
and in that case you probably have no

860
00:41:00,519 --> 00:41:02,559
clue about what is happening with their

861
00:41:02,559 --> 00:41:04,989
application when it running on the

862
00:41:04,989 --> 00:41:08,559
browser so whitelisted locations are

863
00:41:08,559 --> 00:41:12,159
fully trusted so so you if you are a if

864
00:41:12,159 --> 00:41:14,319
you are operating a large website then

865
00:41:14,319 --> 00:41:16,449
probably need to use some Syrians right

866
00:41:16,449 --> 00:41:17,679
Syrians are kind of a shared

867
00:41:17,679 --> 00:41:21,699
infrastructure share lot of assets owned

868
00:41:21,699 --> 00:41:23,289
by different different companies right

869
00:41:23,289 --> 00:41:26,199
so so now if you white Lisa CDN that

870
00:41:26,199 --> 00:41:28,269
means you're white listen hold them in

871
00:41:28,269 --> 00:41:30,279
depending upon the way you at least it

872
00:41:30,279 --> 00:41:34,539
can be dangerous because we just say CDN

873
00:41:34,539 --> 00:41:37,989
calm or start or CDN calm that means all

874
00:41:37,989 --> 00:41:39,729
the contents is part of the CDN you are

875
00:41:39,729 --> 00:41:41,679
trusting but actually you cannot trust

876
00:41:41,679 --> 00:41:44,709
that so you need to really aware of that

877
00:41:44,709 --> 00:41:47,469
and use a mechanisms like if you have a

878
00:41:47,469 --> 00:41:49,149
separate sub domain the CDN that you

879
00:41:49,149 --> 00:41:51,489
need to say the sub domain or CDN com or

880
00:41:51,489 --> 00:41:54,539
you can also use path mechanism to

881
00:41:54,539 --> 00:42:03,729
isolate and protect your assets so let's

882
00:42:03,729 --> 00:42:06,849
talk about CC best practices so the

883
00:42:06,849 --> 00:42:08,799
first thing is made in code hygiene so

884
00:42:08,799 --> 00:42:11,529
you need to externalize the JavaScript

885
00:42:11,529 --> 00:42:13,419
and style out of HTML and keep it a

886
00:42:13,419 --> 00:42:17,529
separate files and use JavaScript even

887
00:42:17,529 --> 00:42:19,630
handler rather than embedding into HTML

888
00:42:19,630 --> 00:42:22,630
and second one is automation automation

889
00:42:22,630 --> 00:42:25,899
helps you a lot because when Co HTML

890
00:42:25,899 --> 00:42:28,539
file go out of sync then geez a tool you

891
00:42:28,539 --> 00:42:31,689
can use this to detect it for example

892
00:42:31,689 --> 00:42:33,819
down the line you have policy everything

893
00:42:33,819 --> 00:42:35,230
works fine down the line and

894
00:42:35,230 --> 00:42:38,920
for add some HTTP content but actually

895
00:42:38,920 --> 00:42:40,869
you bro your application is everything

896
00:42:40,869 --> 00:42:43,240
on HTTPS so this application candy

897
00:42:43,240 --> 00:42:46,030
typing set content warnings or you are

898
00:42:46,030 --> 00:42:48,580
adding some third party tags without

899
00:42:48,580 --> 00:42:50,500
whitelisting the csb this tool can

900
00:42:50,500 --> 00:42:54,330
detect that always use stricter policies

901
00:42:54,330 --> 00:42:57,730
use HTTPS scheme always that way you're

902
00:42:57,730 --> 00:42:59,320
making sure that your application is

903
00:42:59,320 --> 00:43:02,410
everything on HTTPS so some the other

904
00:43:02,410 --> 00:43:03,880
day somebody else asking what is the

905
00:43:03,880 --> 00:43:08,350
difference between this with sts HST is

906
00:43:08,350 --> 00:43:10,690
so ssds is mainly applicable for a

907
00:43:10,690 --> 00:43:13,150
particular domain but if your page

908
00:43:13,150 --> 00:43:17,890
contain a lot of resource base load

909
00:43:17,890 --> 00:43:20,440
resources from multiple location that

910
00:43:20,440 --> 00:43:22,450
may not have access tears in that case

911
00:43:22,450 --> 00:43:27,940
won't be effective use path so path is a

912
00:43:27,940 --> 00:43:30,220
feature which added a CSP to is very

913
00:43:30,220 --> 00:43:32,770
useful tool because if especially if you

914
00:43:32,770 --> 00:43:34,960
are using some Syrians you can restrict

915
00:43:34,960 --> 00:43:38,080
a whitelist based on the path in that

916
00:43:38,080 --> 00:43:41,980
case only the assets water from this

917
00:43:41,980 --> 00:43:45,040
path is why pasted if any other asset

918
00:43:45,040 --> 00:43:47,560
for example.com something else is not

919
00:43:47,560 --> 00:43:51,100
whitelisted so it's very useful tour our

920
00:43:51,100 --> 00:43:55,030
wild card is possible because same way

921
00:43:55,030 --> 00:43:57,850
like CDN case like you can have any kind

922
00:43:57,850 --> 00:44:00,430
of subdomains or tumblr any those kind

923
00:44:00,430 --> 00:44:01,930
of things there are many cases which is

924
00:44:01,930 --> 00:44:07,330
not a good idea so all enable reporting

925
00:44:07,330 --> 00:44:09,160
even or enforce mode that is also very

926
00:44:09,160 --> 00:44:12,010
important so so that's how you learn how

927
00:44:12,010 --> 00:44:13,930
your application work in browser so you

928
00:44:13,930 --> 00:44:15,670
expect your application work in certain

929
00:44:15,670 --> 00:44:18,070
wave but actually in the reality

930
00:44:18,070 --> 00:44:19,720
probably be completely different one

931
00:44:19,720 --> 00:44:21,720
other thing is let's say you have a

932
00:44:21,720 --> 00:44:25,630
dependency on a JavaScript framework

933
00:44:25,630 --> 00:44:28,450
which you hosted somewhere else that can

934
00:44:28,450 --> 00:44:32,170
pull another JavaScript which is where

935
00:44:32,170 --> 00:44:34,170
else were just kind of a chain reaction

936
00:44:34,170 --> 00:44:37,480
is 11 script or another script kind of

937
00:44:37,480 --> 00:44:39,190
thing so you absolutely have no idea

938
00:44:39,190 --> 00:44:41,650
about how applications are behaving so

939
00:44:41,650 --> 00:44:44,619
this is kind of a CSP and some kind of

940
00:44:44,619 --> 00:44:46,990
reporting can really help to understand

941
00:44:46,990 --> 00:44:50,399
how your application work in the

942
00:44:51,960 --> 00:44:54,790
CSP waters you can do so we found that

943
00:44:54,790 --> 00:44:56,520
we are getting lot of violations reports

944
00:44:56,520 --> 00:44:59,620
so so one thing you can do is you can

945
00:44:59,620 --> 00:45:02,080
scan violation URLs formal ways that's

946
00:45:02,080 --> 00:45:03,400
another interesting thing you can use

947
00:45:03,400 --> 00:45:06,160
some virustotal or some other tools and

948
00:45:06,160 --> 00:45:09,160
we can pass the URL and see it is

949
00:45:09,160 --> 00:45:11,380
hosting any kind of malware in that way

950
00:45:11,380 --> 00:45:13,630
you can detect your user is kind of

951
00:45:13,630 --> 00:45:15,520
compromised or not you get some idea

952
00:45:15,520 --> 00:45:17,230
about that that's an interesting thing

953
00:45:17,230 --> 00:45:21,280
probably you can use detect injection

954
00:45:21,280 --> 00:45:23,290
attacks in near real time so that's

955
00:45:23,290 --> 00:45:24,910
another thing so if some injection is

956
00:45:24,910 --> 00:45:26,770
happening some content injections of

957
00:45:26,770 --> 00:45:28,750
attacks are happening you can detect if

958
00:45:28,750 --> 00:45:32,020
you have a reporting endpoint enabled is

959
00:45:32,020 --> 00:45:34,360
very challenging right now because it's

960
00:45:34,360 --> 00:45:37,710
a lot of violations reports are from

961
00:45:37,710 --> 00:45:40,390
browser extension so is hard to

962
00:45:40,390 --> 00:45:41,980
distinguish between a real injection

963
00:45:41,980 --> 00:45:44,920
attack with what officer exchanged in

964
00:45:44,920 --> 00:45:47,830
violations and threat in the region so

965
00:45:47,830 --> 00:45:49,810
you can use as a kind of company wide

966
00:45:49,810 --> 00:45:51,430
and a threat intelligence you can use

967
00:45:51,430 --> 00:45:55,270
IPS and URLs for other purposes kind of

968
00:45:55,270 --> 00:46:01,570
nine so i'll talk about CSP testing

969
00:46:01,570 --> 00:46:05,410
tools so CSP tester dot iOS a tool which

970
00:46:05,410 --> 00:46:08,380
you can use to test your policies across

971
00:46:08,380 --> 00:46:12,030
different browsers and it can also use

972
00:46:12,030 --> 00:46:15,730
to learn a house CSP work so is a very

973
00:46:15,730 --> 00:46:17,590
useful tool which we develop an open

974
00:46:17,590 --> 00:46:20,110
source so I recommend to take a look and

975
00:46:20,110 --> 00:46:22,510
the other one is a CSP validator you can

976
00:46:22,510 --> 00:46:24,340
use it you can modify in whatever way

977
00:46:24,340 --> 00:46:27,660
and deploy it in a see a CD that will

978
00:46:27,660 --> 00:46:29,620
check for any kind of CSP

979
00:46:29,620 --> 00:46:32,740
misconfigurations so-called Chrome

980
00:46:32,740 --> 00:46:34,930
browser plugin is also a useful tool if

981
00:46:34,930 --> 00:46:36,550
you want to initially come up with some

982
00:46:36,550 --> 00:46:38,710
policy is a very useful tool you can

983
00:46:38,710 --> 00:46:40,420
create a policy without making any

984
00:46:40,420 --> 00:46:43,060
changes to your application and can do

985
00:46:43,060 --> 00:46:48,040
much more than that so I will give you a

986
00:46:48,040 --> 00:46:51,190
brief demo on chp test ratata you how it

987
00:46:51,190 --> 00:46:54,330
looks like I would walk

988
00:47:05,720 --> 00:47:13,380
so this is an app or you can you can

989
00:47:13,380 --> 00:47:16,140
place your HTML code here and you can

990
00:47:16,140 --> 00:47:17,610
put your policy here so what will happen

991
00:47:17,610 --> 00:47:20,430
is your HTML will be rendered and

992
00:47:20,430 --> 00:47:22,590
applying the CSP policy so you don't

993
00:47:22,590 --> 00:47:24,540
have to you don't you don't have to

994
00:47:24,540 --> 00:47:27,600
really write HTML code there are a lot

995
00:47:27,600 --> 00:47:31,790
of pre Laura pre written tests available

996
00:47:33,380 --> 00:47:36,210
so if you go to the web CSP test there

997
00:47:36,210 --> 00:47:38,460
are a lot of death there are a lot of

998
00:47:38,460 --> 00:47:40,920
tests available for both CSP 1 and CSP

999
00:47:40,920 --> 00:47:44,160
too so if you want to just learn how CSP

1000
00:47:44,160 --> 00:47:46,200
work you can again you can select one

1001
00:47:46,200 --> 00:47:48,930
like can select view here and that will

1002
00:47:48,930 --> 00:47:54,030
put your CSP that content here so what

1003
00:47:54,030 --> 00:47:56,640
you can do is you this is a policy you

1004
00:47:56,640 --> 00:47:58,920
can put the policy here so the CSP

1005
00:47:58,920 --> 00:48:00,960
policy in this case is defaults are seen

1006
00:48:00,960 --> 00:48:02,640
on means your application is

1007
00:48:02,640 --> 00:48:05,040
self-contained but if you look and to

1008
00:48:05,040 --> 00:48:07,440
look into the application you can see

1009
00:48:07,440 --> 00:48:10,410
there are some links external links so

1010
00:48:10,410 --> 00:48:12,210
let's see how it work so I'm going to

1011
00:48:12,210 --> 00:48:14,580
submit it so it will open a new tack in

1012
00:48:14,580 --> 00:48:18,180
a new tab and render that HTML page in

1013
00:48:18,180 --> 00:48:20,820
the frame and it will did it will also

1014
00:48:20,820 --> 00:48:23,280
have another frame which basically

1015
00:48:23,280 --> 00:48:25,440
report all the violations so it's very

1016
00:48:25,440 --> 00:48:27,690
useful tool because if you want to test

1017
00:48:27,690 --> 00:48:30,690
if you have a developer web console you

1018
00:48:30,690 --> 00:48:32,820
can test it but there are many cases the

1019
00:48:32,820 --> 00:48:34,860
mobile web Android web console probably

1020
00:48:34,860 --> 00:48:36,840
won't be available in that case is a

1021
00:48:36,840 --> 00:48:38,610
very useful tool where you can just get

1022
00:48:38,610 --> 00:48:41,160
into your mobile and see how it work so

1023
00:48:41,160 --> 00:48:43,050
again under you can very easily know

1024
00:48:43,050 --> 00:48:45,090
that what feature is supporting which

1025
00:48:45,090 --> 00:48:47,640
browser so you just open it in your

1026
00:48:47,640 --> 00:48:51,560
favorite browser and see how it behaves

1027
00:48:53,150 --> 00:48:56,460
there are a lot of CSP to test also here

1028
00:48:56,460 --> 00:49:01,460
so so frame allowed frame blocked

1029
00:49:01,460 --> 00:49:05,870
product us here and here you can see

1030
00:49:05,870 --> 00:49:10,609
image allowed image blocked

1031
00:49:20,800 --> 00:49:24,840
so so please take a look this very

1032
00:49:24,840 --> 00:49:27,280
useful tool you can either learn and can

1033
00:49:27,280 --> 00:49:28,840
also test on different browsers and see

1034
00:49:28,840 --> 00:49:32,410
how would behave and the next one is CSP

1035
00:49:32,410 --> 00:49:35,110
validator i will show you how it work it

1036
00:49:35,110 --> 00:49:44,800
is a fan and a script so so I'm trying

1037
00:49:44,800 --> 00:49:48,570
to run a fandom jscript

1038
00:49:54,360 --> 00:49:58,170
and see ok so this ESP validator I am

1039
00:49:58,170 --> 00:50:01,440
just running on URL CSP tested or i/o

1040
00:50:01,440 --> 00:50:03,810
which contain ACS content security

1041
00:50:03,810 --> 00:50:12,060
policy self so let's see how it goes so

1042
00:50:12,060 --> 00:50:15,410
you can see here there are no violation

1043
00:50:15,410 --> 00:50:18,570
and let's check what is returning so

1044
00:50:18,570 --> 00:50:20,160
it's returning zero means there are no

1045
00:50:20,160 --> 00:50:22,080
violation is good to go so if you are

1046
00:50:22,080 --> 00:50:23,850
setting the CI CD then if when you get

1047
00:50:23,850 --> 00:50:25,650
is 0 that means you are good you can

1048
00:50:25,650 --> 00:50:29,100
continue the other test let's try with

1049
00:50:29,100 --> 00:50:38,160
some other CSP test I'll try I tried

1050
00:50:38,160 --> 00:50:40,819
applying this

1051
00:50:42,730 --> 00:50:45,160
so I am done I am running a test which

1052
00:50:45,160 --> 00:50:47,109
actually generate some violation so it

1053
00:50:47,109 --> 00:50:50,470
is the same test so i am taking the URL

1054
00:50:50,470 --> 00:50:55,680
ok and i am placing it here

1055
00:50:58,910 --> 00:51:01,480
and

1056
00:51:04,710 --> 00:51:07,700
oh ok

1057
00:51:10,430 --> 00:51:13,280
some shell problems essentially is the

1058
00:51:13,280 --> 00:51:18,109
retaining 0 so now I am running with a

1059
00:51:18,109 --> 00:51:20,480
page is contained violations let's see

1060
00:51:20,480 --> 00:51:23,630
how it work so you can see here there

1061
00:51:23,630 --> 00:51:26,030
are some three violations here is a

1062
00:51:26,030 --> 00:51:28,550
violation block URI is another violation

1063
00:51:28,550 --> 00:51:32,660
is another violation and actually you

1064
00:51:32,660 --> 00:51:35,660
return to means there are some

1065
00:51:35,660 --> 00:51:42,200
violations and all these violations you

1066
00:51:42,200 --> 00:51:46,910
can see it here the web page so all this

1067
00:51:46,910 --> 00:51:48,559
violation so it will detect the

1068
00:51:48,559 --> 00:51:50,720
violation and report it this is very

1069
00:51:50,720 --> 00:51:53,210
good if you have if you want to deter

1070
00:51:53,210 --> 00:51:56,809
any kind of misconfigurations all right

1071
00:51:56,809 --> 00:52:04,960
so so that's all about the demo and now

1072
00:52:04,960 --> 00:52:08,809
to summarize so CSP work great for

1073
00:52:08,809 --> 00:52:11,210
forcing contours HTTPS so if you want to

1074
00:52:11,210 --> 00:52:13,400
make sure they clear out all the mix at

1075
00:52:13,400 --> 00:52:15,530
content warnings if you are an HTTPS

1076
00:52:15,530 --> 00:52:17,720
shop then you can you see a speed to

1077
00:52:17,720 --> 00:52:19,369
make sure that all your contents are on

1078
00:52:19,369 --> 00:52:23,240
HTTPS very good effective to the next

1079
00:52:23,240 --> 00:52:25,579
one is protection a click jacking so the

1080
00:52:25,579 --> 00:52:27,950
frame ancestors very useful tool if you

1081
00:52:27,950 --> 00:52:30,440
want to use against clickjacking it's

1082
00:52:30,440 --> 00:52:33,849
not going to have any other issues and

1083
00:52:33,849 --> 00:52:40,930
ability to exclude unwanted plugins so

1084
00:52:40,930 --> 00:52:44,210
so plugins like if you don't want to run

1085
00:52:44,210 --> 00:52:47,059
flash or if you want to if you don't

1086
00:52:47,059 --> 00:52:49,369
want to run my Microsoft Silverlight

1087
00:52:49,369 --> 00:52:51,440
those kind of thing you can exclude it

1088
00:52:51,440 --> 00:52:54,049
again also only allow the plugins but

1089
00:52:54,049 --> 00:52:56,410
you really support like PDFs example

1090
00:52:56,410 --> 00:52:59,210
cross-site scripting is a primary CSP is

1091
00:52:59,210 --> 00:53:00,890
primarily for detecting cross-site

1092
00:53:00,890 --> 00:53:02,480
scripting or mitigating precise

1093
00:53:02,480 --> 00:53:04,040
scripting however it is a less perfect

1094
00:53:04,040 --> 00:53:07,819
mainly because of extensions explained

1095
00:53:07,819 --> 00:53:11,119
in detail why what is what other problem

1096
00:53:11,119 --> 00:53:14,059
associated browser extensions lose

1097
00:53:14,059 --> 00:53:16,250
policies we often tend to put Luis

1098
00:53:16,250 --> 00:53:18,680
policy even even if you look into all

1099
00:53:18,680 --> 00:53:20,710
the policy set by major for

1100
00:53:20,710 --> 00:53:24,010
riders is relatively loose because the

1101
00:53:24,010 --> 00:53:26,619
existing application a lot of rework to

1102
00:53:26,619 --> 00:53:29,710
comply with CSP but if you are living a

1103
00:53:29,710 --> 00:53:32,170
new application I would recommend you to

1104
00:53:32,170 --> 00:53:34,240
put in nforce mode and tighten the

1105
00:53:34,240 --> 00:53:37,119
policy and unsupported browser that's

1106
00:53:37,119 --> 00:53:38,800
another thing but these are kind of

1107
00:53:38,800 --> 00:53:42,400
temporary nature but going forward I'm

1108
00:53:42,400 --> 00:53:44,290
really hopeful at CSP will be a very

1109
00:53:44,290 --> 00:53:46,030
effective mechanism to fight against

1110
00:53:46,030 --> 00:53:48,099
excesses but this is a kind of interim

1111
00:53:48,099 --> 00:53:50,770
state where it is less effective but it

1112
00:53:50,770 --> 00:53:53,920
is not bad is improving certainly adds

1113
00:53:53,920 --> 00:53:56,230
block third-party tags from piggybacking

1114
00:53:56,230 --> 00:53:58,180
fourth party tag you can really control

1115
00:53:58,180 --> 00:54:02,830
it and reporting is very effective or

1116
00:54:02,830 --> 00:54:05,830
valuable feedback mechanism basically to

1117
00:54:05,830 --> 00:54:07,960
detect accesses or real injection at I

1118
00:54:07,960 --> 00:54:11,140
happen on your side and also detect al

1119
00:54:11,140 --> 00:54:13,869
where adware malware kind of extensions

1120
00:54:13,869 --> 00:54:17,670
so very useful tool at least for now

1121
00:54:17,670 --> 00:54:21,490
until they started ripping out all our

1122
00:54:21,490 --> 00:54:25,780
CSP headers it is not a solution to

1123
00:54:25,780 --> 00:54:27,810
prevent other injection attacks like

1124
00:54:27,810 --> 00:54:31,510
shells sequel and i will have injection

1125
00:54:31,510 --> 00:54:34,830
exploits so overall is very promising

1126
00:54:34,830 --> 00:54:37,810
but we are not reached estate was really

1127
00:54:37,810 --> 00:54:41,290
getting more effective but I'm hopeful

1128
00:54:41,290 --> 00:54:44,200
that this will be a very good tool will

1129
00:54:44,200 --> 00:54:47,410
have a better more effectiveness going

1130
00:54:47,410 --> 00:54:51,570
forward with that I'm ending my session

1131
00:54:51,570 --> 00:54:55,060
any questions I think we have in just

1132
00:54:55,060 --> 00:54:58,650
one minute yeah

1133
00:55:10,890 --> 00:55:13,780
so most of the time your ass should be

1134
00:55:13,780 --> 00:55:17,290
placed on iframes and many times it's

1135
00:55:17,290 --> 00:55:20,770
not practical to why least your those

1136
00:55:20,770 --> 00:55:23,230
apps because you don't know from where

1137
00:55:23,230 --> 00:55:25,630
it is coming from so from that

1138
00:55:25,630 --> 00:55:27,760
perspective you cannot really do that

1139
00:55:27,760 --> 00:55:30,070
because let's say if you know case is

1140
00:55:30,070 --> 00:55:31,600
coming from 100 different place you

1141
00:55:31,600 --> 00:55:34,870
cannot put 100 locations UCSB header so

1142
00:55:34,870 --> 00:55:37,990
that is not going to work however if you

1143
00:55:37,990 --> 00:55:40,000
know that okay you only add some tags

1144
00:55:40,000 --> 00:55:43,900
some beacon tax or some some something

1145
00:55:43,900 --> 00:55:46,090
like you're adding some frames of a

1146
00:55:46,090 --> 00:55:47,650
third party kind of thing that you can

1147
00:55:47,650 --> 00:55:50,470
control so for advertising you just

1148
00:55:50,470 --> 00:55:53,440
isolated that's the best way but it's

1149
00:55:53,440 --> 00:55:55,000
still if you know that from where you're

1150
00:55:55,000 --> 00:55:57,520
at it add is coming you can control it

1151
00:55:57,520 --> 00:56:02,950
depending upon you use case yeah any

1152
00:56:02,950 --> 00:56:11,410
other questions all right thank you very

1153
00:56:11,410 --> 00:56:15,210
much and I have a good day

