1
00:00:00,000 --> 00:00:02,179
all rights my name is Sydney admit Riva

2
00:00:02,179 --> 00:00:05,879
and we are talking about content

3
00:00:05,879 --> 00:00:07,950
security policy today and specifically

4
00:00:07,950 --> 00:00:11,429
about how we can fix cross-site

5
00:00:11,429 --> 00:00:12,719
scripting avoid cross-site scripting

6
00:00:12,719 --> 00:00:15,240
protect from cross the scripting using

7
00:00:15,240 --> 00:00:18,810
content security policy can you guys yep

8
00:00:18,810 --> 00:00:24,240
closer whatever sure um I know there was

9
00:00:24,240 --> 00:00:26,010
not a talk about content security policy

10
00:00:26,010 --> 00:00:29,119
today and they were talking mostly about

11
00:00:29,119 --> 00:00:32,640
securing content and not talking about

12
00:00:32,640 --> 00:00:35,670
cross-site scripting so it's a couple

13
00:00:35,670 --> 00:00:37,829
words so I'm a associate principal

14
00:00:37,829 --> 00:00:41,820
consultant at digital I was like working

15
00:00:41,820 --> 00:00:43,950
with security for over five years before

16
00:00:43,950 --> 00:00:47,280
that I was a developer and in my free

17
00:00:47,280 --> 00:00:48,960
time I do ballroom dancing I was

18
00:00:48,960 --> 00:00:51,120
actually came straight from Belarus as

19
00:00:51,120 --> 00:00:53,539
have a competition in a couple of weeks

20
00:00:53,539 --> 00:00:58,230
but so this is what we are going to talk

21
00:00:58,230 --> 00:01:00,930
about today what is content security

22
00:01:00,930 --> 00:01:04,470
policy just kind of refresher why do we

23
00:01:04,470 --> 00:01:07,530
need it why did we come up with it what

24
00:01:07,530 --> 00:01:10,290
is how does it help to to fix cross-site

25
00:01:10,290 --> 00:01:12,689
scripting and we'll talk about the

26
00:01:12,689 --> 00:01:15,450
details of like version 1 and version 2

27
00:01:15,450 --> 00:01:19,680
of CSP why version 1 wasn't adopted as

28
00:01:19,680 --> 00:01:22,830
quickly as we expected and what we're

29
00:01:22,830 --> 00:01:25,259
changing in version 2 2 to hopefully

30
00:01:25,259 --> 00:01:27,869
have it adopted so first we'll talk

31
00:01:27,869 --> 00:01:29,400
about cross the scripting anybody

32
00:01:29,400 --> 00:01:32,790
familiar what it is yay all right so

33
00:01:32,790 --> 00:01:34,710
there are so cross the scripting in

34
00:01:34,710 --> 00:01:39,810
general is a vulnerability in the web

35
00:01:39,810 --> 00:01:42,479
application in the front end in the way

36
00:01:42,479 --> 00:01:45,149
you are interpreting the input that she

37
00:01:45,149 --> 00:01:46,770
receives from the client from the user

38
00:01:46,770 --> 00:01:50,399
and reflecting that input usually you

39
00:01:50,399 --> 00:01:52,229
know displaying on the page at some

40
00:01:52,229 --> 00:01:56,729
point without validating the input

41
00:01:56,729 --> 00:01:58,890
without making sure this is what you

42
00:01:58,890 --> 00:02:01,100
expect and so the input may contain

43
00:02:01,100 --> 00:02:03,090
JavaScript usually you know when we talk

44
00:02:03,090 --> 00:02:05,070
about well but javascript could be like

45
00:02:05,070 --> 00:02:07,500
vbscript or some other script that's

46
00:02:07,500 --> 00:02:11,670
running in the browser so the script is

47
00:02:11,670 --> 00:02:13,380
injected into the page

48
00:02:13,380 --> 00:02:16,230
then the browser execute sit and it's

49
00:02:16,230 --> 00:02:18,750
just like any other injection right just

50
00:02:18,750 --> 00:02:20,340
like command injection just like sickle

51
00:02:20,340 --> 00:02:23,070
injection the browser doesn't know that

52
00:02:23,070 --> 00:02:26,160
this data is supposed to be just data it

53
00:02:26,160 --> 00:02:28,310
says the word script this is the other

54
00:02:28,310 --> 00:02:31,800
JavaScript keywords and runs it right

55
00:02:31,800 --> 00:02:34,590
and because the script came from

56
00:02:34,590 --> 00:02:37,170
somewhere who we don't trust it could

57
00:02:37,170 --> 00:02:39,030
have been part of the URL it could have

58
00:02:39,030 --> 00:02:41,790
been stored in the database you know the

59
00:02:41,790 --> 00:02:43,880
script may contain malicious actions and

60
00:02:43,880 --> 00:02:48,020
because it is being run inside the

61
00:02:48,020 --> 00:02:50,970
company although the inside the clients

62
00:02:50,970 --> 00:02:52,920
browser the person who is logged into

63
00:02:52,920 --> 00:02:54,870
the website so the script has access to

64
00:02:54,870 --> 00:02:56,790
all the data that this person has on

65
00:02:56,790 --> 00:02:59,580
that website they are you know account

66
00:02:59,580 --> 00:03:03,500
numbers their personal pictures data

67
00:03:03,500 --> 00:03:07,410
application forms item so there are

68
00:03:07,410 --> 00:03:08,520
three different types of cross-site

69
00:03:08,520 --> 00:03:11,720
scripting the first one is reflected

70
00:03:11,720 --> 00:03:16,290
this happens when the payload is usually

71
00:03:16,290 --> 00:03:19,230
part of the URL goes to this server and

72
00:03:19,230 --> 00:03:22,410
then it is reflected immediately in the

73
00:03:22,410 --> 00:03:24,480
response so it's executed immediately

74
00:03:24,480 --> 00:03:26,880
it's in the response it's run by the

75
00:03:26,880 --> 00:03:30,990
browser the script is executed another

76
00:03:30,990 --> 00:03:34,980
type is stored when the payload is not

77
00:03:34,980 --> 00:03:37,320
reflected immediately it is stored

78
00:03:37,320 --> 00:03:39,630
somewhere on the server database file

79
00:03:39,630 --> 00:03:43,320
any persistence layer and it will be

80
00:03:43,320 --> 00:03:45,420
retrieved at some point even the

81
00:03:45,420 --> 00:03:48,330
attacker who's storing that saving that

82
00:03:48,330 --> 00:03:50,280
in the database doesn't know when

83
00:03:50,280 --> 00:03:51,570
exactly is going to be retrieved they

84
00:03:51,570 --> 00:03:53,430
just canna store some stuff and hope

85
00:03:53,430 --> 00:03:54,990
that somebody will view this page and

86
00:03:54,990 --> 00:03:57,540
the script will get executed so for

87
00:03:57,540 --> 00:04:00,840
example it could be a blog post right

88
00:04:00,840 --> 00:04:02,580
you're writing the blog post the blog

89
00:04:02,580 --> 00:04:04,620
post doesn't have any filtration you

90
00:04:04,620 --> 00:04:08,130
inject JavaScript and leave it there and

91
00:04:08,130 --> 00:04:10,230
when this blog post is viewed by

92
00:04:10,230 --> 00:04:13,170
somebody and this somebody is logged

93
00:04:13,170 --> 00:04:15,690
into the platform then you can steal

94
00:04:15,690 --> 00:04:17,640
this person's information right for

95
00:04:17,640 --> 00:04:20,279
example they are you know login

96
00:04:20,279 --> 00:04:22,620
credentials their session for that

97
00:04:22,620 --> 00:04:25,979
blogging platform

98
00:04:25,979 --> 00:04:28,870
however a few years ago I mean it's been

99
00:04:28,870 --> 00:04:31,150
a while five years ago with all the new

100
00:04:31,150 --> 00:04:35,919
technology with all the new website web

101
00:04:35,919 --> 00:04:39,280
side client-side frameworks a lot of

102
00:04:39,280 --> 00:04:42,940
JavaScript that is processing the data

103
00:04:42,940 --> 00:04:45,610
on the client side we now have a new

104
00:04:45,610 --> 00:04:47,350
type of cross-site scripting that is

105
00:04:47,350 --> 00:04:49,449
called dumb ways right the DOM is the

106
00:04:49,449 --> 00:04:51,669
document object model that's the

107
00:04:51,669 --> 00:04:53,080
representation of the HTML page in the

108
00:04:53,080 --> 00:04:56,380
browser so in this case that malicious

109
00:04:56,380 --> 00:04:59,770
script is executed completely on the

110
00:04:59,770 --> 00:05:02,770
client side now the first two we have

111
00:05:02,770 --> 00:05:05,039
something going to the server the server

112
00:05:05,039 --> 00:05:08,020
stores it checks its manipulate somehow

113
00:05:08,020 --> 00:05:11,380
and then shows on the response in the

114
00:05:11,380 --> 00:05:14,199
Dom based case all the many pollution is

115
00:05:14,199 --> 00:05:15,580
happening in the browser and that's

116
00:05:15,580 --> 00:05:18,880
because the way the javascript is

117
00:05:18,880 --> 00:05:22,150
written right it's not a developer has

118
00:05:22,150 --> 00:05:24,280
to make a mistake first right has to

119
00:05:24,280 --> 00:05:26,470
leave that vulnerability open because

120
00:05:26,470 --> 00:05:28,000
the JavaScript for example grab

121
00:05:28,000 --> 00:05:30,910
something part some part of the URL does

122
00:05:30,910 --> 00:05:32,260
so many puree shins with it and then

123
00:05:32,260 --> 00:05:34,599
shows in the page right especially with

124
00:05:34,599 --> 00:05:36,280
all the single page applications where

125
00:05:36,280 --> 00:05:38,440
everything is done in the browser that's

126
00:05:38,440 --> 00:05:42,460
becoming more and more common so how do

127
00:05:42,460 --> 00:05:44,410
we traditionally fix cross-site

128
00:05:44,410 --> 00:05:47,380
scripting well we always say input

129
00:05:47,380 --> 00:05:49,240
validation and output encoding the two

130
00:05:49,240 --> 00:05:53,229
main you know main protections from any

131
00:05:53,229 --> 00:05:55,840
type of injection so input validation we

132
00:05:55,840 --> 00:05:57,910
know what input we are expecting if

133
00:05:57,910 --> 00:05:59,590
that's a phone number if that's an

134
00:05:59,590 --> 00:06:01,750
address of that's an email we check we

135
00:06:01,750 --> 00:06:04,090
validate the structure and we say yep

136
00:06:04,090 --> 00:06:05,590
you know it's a phone number so we're

137
00:06:05,590 --> 00:06:09,940
expecting only numbers etc etc if we

138
00:06:09,940 --> 00:06:12,190
cannot do input validation for example

139
00:06:12,190 --> 00:06:15,880
like a blog post right we don't want to

140
00:06:15,880 --> 00:06:18,099
limit the users to use only certain

141
00:06:18,099 --> 00:06:19,300
characters we say yeah you can use

142
00:06:19,300 --> 00:06:21,060
whatever you know less than greater than

143
00:06:21,060 --> 00:06:23,020
semicolon all the special characters

144
00:06:23,020 --> 00:06:25,300
sure so we're going to do álbum coating

145
00:06:25,300 --> 00:06:28,389
on the server side where we say yep this

146
00:06:28,389 --> 00:06:30,190
output is going into the browser so

147
00:06:30,190 --> 00:06:32,949
we're going to use specific context yep

148
00:06:32,949 --> 00:06:34,300
it's going to be HTML we're going to

149
00:06:34,300 --> 00:06:37,630
encode it with HTML coding so that the

150
00:06:37,630 --> 00:06:38,770
browser when the browser

151
00:06:38,770 --> 00:06:41,110
displays those special characters the

152
00:06:41,110 --> 00:06:42,580
browser doesn't execute them as a

153
00:06:42,580 --> 00:06:45,639
command right browser just says okay

154
00:06:45,639 --> 00:06:48,099
this is a less grant less than angle

155
00:06:48,099 --> 00:06:49,990
bracket right so going to show that

156
00:06:49,990 --> 00:06:51,909
angle bracket I'm not going to interpret

157
00:06:51,909 --> 00:06:54,909
it as part of JavaScript so that's all

158
00:06:54,909 --> 00:06:57,129
good and for years and years and years

159
00:06:57,129 --> 00:07:00,009
we were saying that input validation

160
00:07:00,009 --> 00:07:01,810
output encoding has to happen on the

161
00:07:01,810 --> 00:07:03,370
server side because you control the

162
00:07:03,370 --> 00:07:05,440
server you don't control the browser any

163
00:07:05,440 --> 00:07:06,879
validation that you have on the browser

164
00:07:06,879 --> 00:07:10,629
can be disabled by the user finally we

165
00:07:10,629 --> 00:07:12,610
kind of figured that out well now we

166
00:07:12,610 --> 00:07:15,690
have the Dom based cross-site scripting

167
00:07:15,690 --> 00:07:19,380
that is completely in the browser so

168
00:07:19,380 --> 00:07:21,400
everything we're doing the server is not

169
00:07:21,400 --> 00:07:23,830
going to help us because it most of the

170
00:07:23,830 --> 00:07:26,650
cases the input doesn't even travel to

171
00:07:26,650 --> 00:07:28,180
the server it just stays in the browser

172
00:07:28,180 --> 00:07:30,969
so you can have all your you know

173
00:07:30,969 --> 00:07:33,190
validation input validation of encoding

174
00:07:33,190 --> 00:07:36,389
and they're still going to be a problem

175
00:07:36,389 --> 00:07:41,560
so what do we do well one way is to do

176
00:07:41,560 --> 00:07:43,930
same things input validation opera

177
00:07:43,930 --> 00:07:46,330
encoding but on the client side as well

178
00:07:46,330 --> 00:07:49,240
when you know that you have that logic

179
00:07:49,240 --> 00:07:53,440
in the front page tedious right and I

180
00:07:53,440 --> 00:07:54,940
mean even with the server side

181
00:07:54,940 --> 00:07:56,169
validation we've been doing that for

182
00:07:56,169 --> 00:07:58,960
years and years and years exercise was

183
00:07:58,960 --> 00:08:04,659
first part of two of top 10 in 2003 it

184
00:08:04,659 --> 00:08:10,180
is still in the top five in 2015 so like

185
00:08:10,180 --> 00:08:11,979
we weren't very successful in fixing it

186
00:08:11,979 --> 00:08:13,750
obviously how are we going to be

187
00:08:13,750 --> 00:08:17,979
successful in fixing another time yeah

188
00:08:17,979 --> 00:08:21,130
there's like always a way you can close

189
00:08:21,130 --> 00:08:22,750
one thing it close another thing but

190
00:08:22,750 --> 00:08:24,849
there there's still way to bypass that

191
00:08:24,849 --> 00:08:28,659
input validation right so let's look at

192
00:08:28,659 --> 00:08:30,580
some examples of how that happens

193
00:08:30,580 --> 00:08:32,950
anybody rights java script reads

194
00:08:32,950 --> 00:08:36,669
javascript yeah all right all right some

195
00:08:36,669 --> 00:08:38,679
JavaScript samples with some Java code

196
00:08:38,679 --> 00:08:41,110
so for example on one type of an

197
00:08:41,110 --> 00:08:43,299
injection where we have an inline

198
00:08:43,299 --> 00:08:47,020
JavaScript right so this is our JSP page

199
00:08:47,020 --> 00:08:50,500
we get a parameter from the request

200
00:08:50,500 --> 00:08:51,870
right get parameter s

201
00:08:51,870 --> 00:08:53,610
some parameter from the URL string and

202
00:08:53,610 --> 00:08:56,910
then when we arrive at the response in

203
00:08:56,910 --> 00:08:59,279
the HTML page we reflect it right away

204
00:08:59,279 --> 00:09:01,350
where if like the search word right away

205
00:09:01,350 --> 00:09:02,970
and as usually you know you search for

206
00:09:02,970 --> 00:09:04,950
something in the next page says here are

207
00:09:04,950 --> 00:09:07,830
the results you searched for this right

208
00:09:07,830 --> 00:09:12,180
so we are expecting a search word what

209
00:09:12,180 --> 00:09:15,060
we're getting is something like that

210
00:09:15,060 --> 00:09:17,700
yeah script alert exercise script so

211
00:09:17,700 --> 00:09:19,800
that's obviously yeah just a simple

212
00:09:19,800 --> 00:09:22,260
simple Java scripts not malicious or

213
00:09:22,260 --> 00:09:23,520
anything just going to pop up an alert

214
00:09:23,520 --> 00:09:26,070
box but because there is no validation

215
00:09:26,070 --> 00:09:28,890
that script alert scrip becomes part of

216
00:09:28,890 --> 00:09:31,980
the page and when the browser interprets

217
00:09:31,980 --> 00:09:34,680
that says okay this is a tag p which

218
00:09:34,680 --> 00:09:36,690
means this is a paragraph this is a text

219
00:09:36,690 --> 00:09:38,370
script which means everything after the

220
00:09:38,370 --> 00:09:40,920
script i have to execute so that's one

221
00:09:40,920 --> 00:09:43,290
type of injection that's called an

222
00:09:43,290 --> 00:09:46,010
inline JavaScript injection right we

223
00:09:46,010 --> 00:09:49,580
inject the JavaScript into the HTML page

224
00:09:49,580 --> 00:09:52,980
so another type can be when we say okay

225
00:09:52,980 --> 00:09:56,760
maybe the search word has a limitation

226
00:09:56,760 --> 00:09:59,279
of how many characters you can write

227
00:09:59,279 --> 00:10:02,610
that's legit says okay in hundred

228
00:10:02,610 --> 00:10:04,290
characters so maybe hundred characters

229
00:10:04,290 --> 00:10:06,810
is not enough for us to write a long

230
00:10:06,810 --> 00:10:08,100
malicious JavaScript but it will

231
00:10:08,100 --> 00:10:10,740
actually go and you know steal your

232
00:10:10,740 --> 00:10:13,950
session data or forward due to malicious

233
00:10:13,950 --> 00:10:15,900
page and ask you for username and

234
00:10:15,900 --> 00:10:18,660
password something like that so another

235
00:10:18,660 --> 00:10:21,990
approach is to inject a link to a script

236
00:10:21,990 --> 00:10:24,510
that is loaded from somewhere else right

237
00:10:24,510 --> 00:10:27,000
so same stuff on the server side but

238
00:10:27,000 --> 00:10:28,740
instead of injecting script alert script

239
00:10:28,740 --> 00:10:31,200
we are injecting script and then we're

240
00:10:31,200 --> 00:10:32,760
specifying the source that this file

241
00:10:32,760 --> 00:10:37,020
will be loaded from attacker com it will

242
00:10:37,020 --> 00:10:39,390
be load it it will become part of the

243
00:10:39,390 --> 00:10:42,209
page and will be executed and that's one

244
00:10:42,209 --> 00:10:46,080
thing about the way the browsers work so

245
00:10:46,080 --> 00:10:49,140
they have a protection system that's

246
00:10:49,140 --> 00:10:52,830
called same origin policy where scripts

247
00:10:52,830 --> 00:10:55,529
from one origin and origin is your

248
00:10:55,529 --> 00:10:57,510
domain name with a port with a type of

249
00:10:57,510 --> 00:11:02,060
connection HTTP HTTPS well in one domain

250
00:11:02,060 --> 00:11:05,040
cannot read the data of another domain

251
00:11:05,040 --> 00:11:07,410
like when you open your gmail and you

252
00:11:07,410 --> 00:11:10,170
have some ads on the side can the ads

253
00:11:10,170 --> 00:11:15,930
read the contents of your emails I hope

254
00:11:15,930 --> 00:11:19,769
not right so yes because the the ads are

255
00:11:19,769 --> 00:11:22,290
loaded from another domain the same

256
00:11:22,290 --> 00:11:24,120
origin policy protects them from just

257
00:11:24,120 --> 00:11:25,769
going and reading you know the console

258
00:11:25,769 --> 00:11:29,339
via emails however the script is an

259
00:11:29,339 --> 00:11:32,100
exception you can specify you know for

260
00:11:32,100 --> 00:11:33,389
example this page is loaded from

261
00:11:33,389 --> 00:11:37,250
example.com but you can specify whatever

262
00:11:37,250 --> 00:11:40,170
website whatever domain in load whatever

263
00:11:40,170 --> 00:11:42,480
JavaScript you want it will become part

264
00:11:42,480 --> 00:11:43,800
of the page and will have access to

265
00:11:43,800 --> 00:11:47,339
everything on the page so that's the

266
00:11:47,339 --> 00:11:49,790
second type of how we can exploit that

267
00:11:49,790 --> 00:11:54,440
injection right the third type is an

268
00:11:54,440 --> 00:11:57,149
injection inside our JavaScript so

269
00:11:57,149 --> 00:11:58,860
JavaScript has this wonderful wonderful

270
00:11:58,860 --> 00:12:01,470
function that's called evil that

271
00:12:01,470 --> 00:12:04,050
whatever string text string you pass

272
00:12:04,050 --> 00:12:06,089
into it's going to execute it as

273
00:12:06,089 --> 00:12:08,759
JavaScript code makes the language very

274
00:12:08,759 --> 00:12:12,750
very flexible however it's a great tool

275
00:12:12,750 --> 00:12:14,940
for the attackers because whatever

276
00:12:14,940 --> 00:12:17,490
attacker sends into evil you know that's

277
00:12:17,490 --> 00:12:20,430
just a code execution right and it's

278
00:12:20,430 --> 00:12:22,230
just going to run it so in this case

279
00:12:22,230 --> 00:12:24,540
suppose we already have that code

280
00:12:24,540 --> 00:12:29,310
snippet in the application where we are

281
00:12:29,310 --> 00:12:31,970
reading something from an element called

282
00:12:31,970 --> 00:12:35,760
parameter and we want to evaluate a

283
00:12:35,760 --> 00:12:38,130
function that we have and pass that

284
00:12:38,130 --> 00:12:41,040
whatever we got from the parameter our

285
00:12:41,040 --> 00:12:43,620
user input as a parameter to that

286
00:12:43,620 --> 00:12:48,149
function so a malicious user instead of

287
00:12:48,149 --> 00:12:50,339
sending their you know first name what

288
00:12:50,339 --> 00:12:52,800
we're expecting are sending something

289
00:12:52,800 --> 00:12:55,050
like this again in this case we're just

290
00:12:55,050 --> 00:12:57,000
saying oh we're just going to send in a

291
00:12:57,000 --> 00:12:59,279
lower deck success but the point is that

292
00:12:59,279 --> 00:13:01,490
we can inject any JavaScript we want

293
00:13:01,490 --> 00:13:06,420
instead of the first name so and so that

294
00:13:06,420 --> 00:13:08,250
is the Donbass cross-site scripting it's

295
00:13:08,250 --> 00:13:11,839
all happening in the browser there is no

296
00:13:11,839 --> 00:13:15,120
request to the server side and obviously

297
00:13:15,120 --> 00:13:16,840
no response

298
00:13:16,840 --> 00:13:21,130
so there are different ways and as I

299
00:13:21,130 --> 00:13:22,840
said we were trying to fix it for many

300
00:13:22,840 --> 00:13:25,210
many years didn't work so we came out

301
00:13:25,210 --> 00:13:27,960
with a new solution right the browser

302
00:13:27,960 --> 00:13:29,920
group came out with a new solution

303
00:13:29,920 --> 00:13:32,830
called content security policy where it

304
00:13:32,830 --> 00:13:37,150
says well let's tell the browser where

305
00:13:37,150 --> 00:13:39,990
we are loading all the resources from

306
00:13:39,990 --> 00:13:42,610
including the script and we say we don't

307
00:13:42,610 --> 00:13:44,410
trust any scripts that are loaded from

308
00:13:44,410 --> 00:13:46,840
attacker com we only trust scripts that

309
00:13:46,840 --> 00:13:49,780
are loaded from us and from you know a

310
00:13:49,780 --> 00:13:53,620
few our partners so that's one thing and

311
00:13:53,620 --> 00:13:55,750
if we look at this page right if we

312
00:13:55,750 --> 00:13:59,710
think about the attack surface for this

313
00:13:59,710 --> 00:14:03,580
page what are the different ways and

314
00:14:03,580 --> 00:14:07,650
attacker can exploit the page there is a

315
00:14:07,650 --> 00:14:10,690
form submit form right we can inject

316
00:14:10,690 --> 00:14:12,970
malicious data there there is some

317
00:14:12,970 --> 00:14:14,980
inline JavaScript if it has a

318
00:14:14,980 --> 00:14:17,350
vulnerability like domick success we can

319
00:14:17,350 --> 00:14:20,680
inject there there are some scripts that

320
00:14:20,680 --> 00:14:24,310
we are already loading from third party

321
00:14:24,310 --> 00:14:26,230
domains so if those domains are

322
00:14:26,230 --> 00:14:28,060
entrusted if those domains were

323
00:14:28,060 --> 00:14:31,630
compromised now we can load some

324
00:14:31,630 --> 00:14:33,640
malicious script into our page there is

325
00:14:33,640 --> 00:14:36,760
a 3rd party plugins say flash there like

326
00:14:36,760 --> 00:14:39,600
there's an iframe all of these things

327
00:14:39,600 --> 00:14:43,980
can be used to make an injection and

328
00:14:43,980 --> 00:14:47,860
common security policy specifies certain

329
00:14:47,860 --> 00:14:51,490
directives saying okay you can only load

330
00:14:51,490 --> 00:14:54,640
scripts from this location the connect

331
00:14:54,640 --> 00:14:56,350
source will tell you you can only

332
00:14:56,350 --> 00:15:00,850
connect using a web service on WebSocket

333
00:15:00,850 --> 00:15:03,490
call to these websites to these specific

334
00:15:03,490 --> 00:15:06,730
domains you can only use fonts from this

335
00:15:06,730 --> 00:15:10,570
location iframes see it styles for CSS

336
00:15:10,570 --> 00:15:13,990
images media etc right object for flesh

337
00:15:13,990 --> 00:15:18,570
and silver latin applets and plugins and

338
00:15:18,570 --> 00:15:21,850
the most important thing say we're going

339
00:15:21,850 --> 00:15:25,420
to disable any inline script because if

340
00:15:25,420 --> 00:15:28,960
we go back the only reason why like one

341
00:15:28,960 --> 00:15:29,800
of the reasons why

342
00:15:29,800 --> 00:15:33,180
I so basically the as i said we say

343
00:15:33,180 --> 00:15:35,800
we're only allowing stripped from

344
00:15:35,800 --> 00:15:37,720
certain locations right so that's the

345
00:15:37,720 --> 00:15:40,209
now going to work because okay attacker

346
00:15:40,209 --> 00:15:44,080
calm is not in our whitelist and also

347
00:15:44,080 --> 00:15:46,209
they say we're not going to allow any

348
00:15:46,209 --> 00:15:48,910
script that's in line will stop

349
00:15:48,910 --> 00:15:53,290
executing any inline scripts and because

350
00:15:53,290 --> 00:15:56,769
evil is evil we're going to stop using

351
00:15:56,769 --> 00:16:00,519
evil so all of these things are disabled

352
00:16:00,519 --> 00:16:02,230
by default as soon as you start using

353
00:16:02,230 --> 00:16:07,839
CSP it's the way it is configured is the

354
00:16:07,839 --> 00:16:10,769
you set the policy on the server side as

355
00:16:10,769 --> 00:16:14,200
an HTTP header and then the browser that

356
00:16:14,200 --> 00:16:16,120
the client is using has to support it

357
00:16:16,120 --> 00:16:18,880
and today all the major browsers are

358
00:16:18,880 --> 00:16:20,950
already supporting so that's that's good

359
00:16:20,950 --> 00:16:27,130
news so for example we are setting a

360
00:16:27,130 --> 00:16:29,410
policy that says okay we can also set up

361
00:16:29,410 --> 00:16:32,560
the default directive so by default all

362
00:16:32,560 --> 00:16:36,760
the sources can be loaded from self so

363
00:16:36,760 --> 00:16:40,450
from my website which is a example at

364
00:16:40,450 --> 00:16:45,610
home and from my domain com and all

365
00:16:45,610 --> 00:16:48,640
images can be loaded from star so can

366
00:16:48,640 --> 00:16:52,649
this page load and image from bbc.com

367
00:16:52,649 --> 00:16:56,140
yes right as its star what about this

368
00:16:56,140 --> 00:16:59,220
one with this policy can a page load a

369
00:16:59,220 --> 00:17:03,180
script from attacker com

370
00:17:10,329 --> 00:17:12,909
so there is no script source right we're

371
00:17:12,909 --> 00:17:16,500
not specifying it but there is a default

372
00:17:16,500 --> 00:17:18,849
so since there is no script the default

373
00:17:18,849 --> 00:17:21,429
will work and default says from myself

374
00:17:21,429 --> 00:17:25,359
or from start my domain com right it

375
00:17:25,359 --> 00:17:28,119
does not list attacker calm so that

376
00:17:28,119 --> 00:17:30,750
policy will stop any script that's

377
00:17:30,750 --> 00:17:33,549
trying to be loaded from attacker calm

378
00:17:33,549 --> 00:17:38,919
and the next one can oppose you load a

379
00:17:38,919 --> 00:17:47,470
CSS file from WordPress why do you think

380
00:17:47,470 --> 00:17:49,649
yes

381
00:17:52,900 --> 00:17:56,130
that's the correct answer

382
00:18:04,980 --> 00:18:07,860
right so there is no style tag that

383
00:18:07,860 --> 00:18:09,450
doesn't say in it to us anything about

384
00:18:09,450 --> 00:18:13,890
CSS and by default the default is also

385
00:18:13,890 --> 00:18:15,450
not specified right and the by default

386
00:18:15,450 --> 00:18:17,820
default is open like by default you can

387
00:18:17,820 --> 00:18:19,320
load anywhere anything from anywhere

388
00:18:19,320 --> 00:18:21,240
since we didn't specify anything here

389
00:18:21,240 --> 00:18:23,850
yep you can load everything so that will

390
00:18:23,850 --> 00:18:31,080
work yeah another cool thing that CSP

391
00:18:31,080 --> 00:18:33,360
provides is that if there is a violation

392
00:18:33,360 --> 00:18:35,730
of your policy if something is still you

393
00:18:35,730 --> 00:18:37,290
know trying to be loaded from somewhere

394
00:18:37,290 --> 00:18:39,900
that you don't specify you can configure

395
00:18:39,900 --> 00:18:42,840
a reporting mechanism you can figure

396
00:18:42,840 --> 00:18:44,970
parser on your server and basically each

397
00:18:44,970 --> 00:18:47,070
time the policy is violated each browser

398
00:18:47,070 --> 00:18:49,260
each client whenever they load the

399
00:18:49,260 --> 00:18:51,630
version of your website will send you

400
00:18:51,630 --> 00:18:53,730
err a violation report in this JSON

401
00:18:53,730 --> 00:18:57,660
format or some version of this JSON

402
00:18:57,660 --> 00:19:00,120
format I should have I should say so

403
00:19:00,120 --> 00:19:02,640
they will say this policy was violated

404
00:19:02,640 --> 00:19:06,000
this is the URL that was blocked and so

405
00:19:06,000 --> 00:19:09,120
you can see exactly where the attack was

406
00:19:09,120 --> 00:19:11,040
coming from like this is a very very

407
00:19:11,040 --> 00:19:13,830
powerful tool just to monitor just to

408
00:19:13,830 --> 00:19:16,200
see what attackers are trying to inject

409
00:19:16,200 --> 00:19:19,980
into your website and in most cases it's

410
00:19:19,980 --> 00:19:21,419
not going to be just the attackers it's

411
00:19:21,419 --> 00:19:25,890
going to be your normal normal

412
00:19:25,890 --> 00:19:27,150
functionality of the website because

413
00:19:27,150 --> 00:19:29,760
developers forgot to mention this script

414
00:19:29,760 --> 00:19:32,520
or this URL for the fonts or this URL

415
00:19:32,520 --> 00:19:35,220
for the image so which helps you to

416
00:19:35,220 --> 00:19:36,870
basically debug and find all these

417
00:19:36,870 --> 00:19:40,110
missing things there going to be some

418
00:19:40,110 --> 00:19:42,690
information from the plugins that the a

419
00:19:42,690 --> 00:19:45,720
user has in the browser because the

420
00:19:45,720 --> 00:19:47,100
plugins will also try to inject

421
00:19:47,100 --> 00:19:49,260
something that fills valuable

422
00:19:49,260 --> 00:19:54,690
information there's one caveat that the

423
00:19:54,690 --> 00:19:56,790
browsers unfortunately are interpreting

424
00:19:56,790 --> 00:19:58,620
this very simple format slightly

425
00:19:58,620 --> 00:20:01,679
differently so the names of the the

426
00:20:01,679 --> 00:20:03,450
attributes are slightly different some

427
00:20:03,450 --> 00:20:05,880
browsers add extra attributes but it's

428
00:20:05,880 --> 00:20:07,470
still manageable so you can collect all

429
00:20:07,470 --> 00:20:11,130
this data and graph it use it for

430
00:20:11,130 --> 00:20:14,340
development for debugging etc so that's

431
00:20:14,340 --> 00:20:15,660
that's great

432
00:20:15,660 --> 00:20:19,980
even better what if you know when you

433
00:20:19,980 --> 00:20:22,200
configure the policy and you enable it

434
00:20:22,200 --> 00:20:24,690
and there are a few URLs that you forgot

435
00:20:24,690 --> 00:20:26,730
to put in everything is going to break

436
00:20:26,730 --> 00:20:28,560
right what if you don't want to do that

437
00:20:28,560 --> 00:20:31,080
well you can configure the report only

438
00:20:31,080 --> 00:20:33,750
policy that's not going to enforce the

439
00:20:33,750 --> 00:20:36,300
policy it's going to just check if there

440
00:20:36,300 --> 00:20:37,860
is a violation it's because I'm going to

441
00:20:37,860 --> 00:20:39,960
send you your report but your website

442
00:20:39,960 --> 00:20:42,660
will work especially at the you know

443
00:20:42,660 --> 00:20:44,430
beginning stages as you are developing

444
00:20:44,430 --> 00:20:47,550
that you're just more you know starting

445
00:20:47,550 --> 00:20:50,010
to use CSP that's a great tool the

446
00:20:50,010 --> 00:20:53,670
report only and moreover you can have

447
00:20:53,670 --> 00:20:56,010
both headers you can have content

448
00:20:56,010 --> 00:20:57,720
security policy and content security

449
00:20:57,720 --> 00:21:00,900
policy report only on the same website

450
00:21:00,900 --> 00:21:03,090
so you're going to use a more open

451
00:21:03,090 --> 00:21:05,520
policy at the beginning say well allow

452
00:21:05,520 --> 00:21:07,860
everything or almost everything and how

453
00:21:07,860 --> 00:21:10,230
about we start with this more

454
00:21:10,230 --> 00:21:12,540
restrictive policy and then collect the

455
00:21:12,540 --> 00:21:14,550
data is everything still working how

456
00:21:14,550 --> 00:21:16,440
many violations we have all right we

457
00:21:16,440 --> 00:21:18,210
fixed all the problems with the

458
00:21:18,210 --> 00:21:20,280
violations now we can push it into the

459
00:21:20,280 --> 00:21:27,090
actual CSP policy and as I said we need

460
00:21:27,090 --> 00:21:32,010
to remove all the inline JavaScript from

461
00:21:32,010 --> 00:21:35,400
there from our normal code is this easy

462
00:21:35,400 --> 00:21:40,050
well this is our kind of traditional the

463
00:21:40,050 --> 00:21:42,270
way we traditionally wrote java script

464
00:21:42,270 --> 00:21:45,000
or HTML right we have some page we have

465
00:21:45,000 --> 00:21:46,560
some script inside we have some

466
00:21:46,560 --> 00:21:51,150
functions we have some like a button we

467
00:21:51,150 --> 00:21:54,300
have some event handlers unload on click

468
00:21:54,300 --> 00:21:56,690
so now we need to get rid of everything

469
00:21:56,690 --> 00:22:00,090
we create a separate javascript file we

470
00:22:00,090 --> 00:22:03,840
move our functions there notice that we

471
00:22:03,840 --> 00:22:07,380
have a function click handler set

472
00:22:07,380 --> 00:22:09,990
timeout which has some code in the

473
00:22:09,990 --> 00:22:13,230
double quotes so set timeout is actually

474
00:22:13,230 --> 00:22:16,500
one of the evil constructs function so

475
00:22:16,500 --> 00:22:19,590
it's using eval behind the scenes it's

476
00:22:19,590 --> 00:22:22,830
going to evaluate that you know console

477
00:22:22,830 --> 00:22:24,780
dot log logging something and then

478
00:22:24,780 --> 00:22:27,320
calling the function repeated after the

479
00:22:27,320 --> 00:22:29,040
time

480
00:22:29,040 --> 00:22:31,860
as it has come right when the the time

481
00:22:31,860 --> 00:22:36,450
the timer clicked so that's not going to

482
00:22:36,450 --> 00:22:39,900
work anymore so now we need to take this

483
00:22:39,900 --> 00:22:42,150
function put it apart make it into a

484
00:22:42,150 --> 00:22:43,770
separate function because we cannot use

485
00:22:43,770 --> 00:22:46,470
eval or evil constructs so we created a

486
00:22:46,470 --> 00:22:48,810
separate function that's called repeated

487
00:22:48,810 --> 00:22:52,590
tasks pulled out those tasks there those

488
00:22:52,590 --> 00:22:57,030
calls and what's more complex is that

489
00:22:57,030 --> 00:23:00,440
now we cannot use any event handlers

490
00:23:00,440 --> 00:23:04,380
that's not great helpful like it it's

491
00:23:04,380 --> 00:23:09,540
really unlucky so instead of using event

492
00:23:09,540 --> 00:23:11,940
handlers what we can do is we create a

493
00:23:11,940 --> 00:23:14,850
document and we create events and we put

494
00:23:14,850 --> 00:23:16,830
an event listener and we say you know at

495
00:23:16,830 --> 00:23:20,160
event when dom counting loaded that's

496
00:23:20,160 --> 00:23:21,450
basically our own load function

497
00:23:21,450 --> 00:23:26,060
previously do call our init function

498
00:23:26,060 --> 00:23:29,280
initialization and also find that button

499
00:23:29,280 --> 00:23:31,710
and add it on click event to the button

500
00:23:31,710 --> 00:23:37,380
so add another listener so then our HTML

501
00:23:37,380 --> 00:23:42,110
will look like that kind of like in 1995

502
00:23:42,110 --> 00:23:44,910
before we use all the extensive

503
00:23:44,910 --> 00:23:47,910
JavaScript right just just the static

504
00:23:47,910 --> 00:23:49,980
content in like one call to a JavaScript

505
00:23:49,980 --> 00:23:53,430
function so that's actually very very

506
00:23:53,430 --> 00:23:55,980
tedious especially if you have an

507
00:23:55,980 --> 00:23:57,660
existing application with a bunch of

508
00:23:57,660 --> 00:23:59,600
event handlers and yeah it's like

509
00:23:59,600 --> 00:24:04,140
starting from scratch so that is one of

510
00:24:04,140 --> 00:24:05,850
the reasons why the adoption rates were

511
00:24:05,850 --> 00:24:09,030
not as high at the beginning right now

512
00:24:09,030 --> 00:24:13,340
all the major browsers are supporting it

513
00:24:13,340 --> 00:24:16,050
except in trying to explore although

514
00:24:16,050 --> 00:24:18,330
they say the edge browser supports it I

515
00:24:18,330 --> 00:24:20,010
haven't tested it but that's what they

516
00:24:20,010 --> 00:24:21,750
claim they say yep we're gonna support

517
00:24:21,750 --> 00:24:24,840
it full full you know completely so

518
00:24:24,840 --> 00:24:26,550
almost everything supports it except for

519
00:24:26,550 --> 00:24:28,560
things like opera mini I don't know if

520
00:24:28,560 --> 00:24:30,180
you're using opera on your mobile

521
00:24:30,180 --> 00:24:36,600
devices if we look at the data from 2013

522
00:24:36,600 --> 00:24:40,890
right how many websites were using CSP

523
00:24:40,890 --> 00:24:42,690
headers well

524
00:24:42,690 --> 00:24:47,660
out of a million top websites only like

525
00:24:47,660 --> 00:24:51,960
269 used it a little bit more with other

526
00:24:51,960 --> 00:24:54,140
types of the headers because also just

527
00:24:54,140 --> 00:24:57,240
2013 not all the browsers supported the

528
00:24:57,240 --> 00:25:00,090
CSP header as is some of them support it

529
00:25:00,090 --> 00:25:03,510
like like ie and still supports the X

530
00:25:03,510 --> 00:25:05,970
CSP header you know the WebKit browsers

531
00:25:05,970 --> 00:25:09,450
had their own header prefix with an X

532
00:25:09,450 --> 00:25:13,860
WebKit but you know more or less 200

533
00:25:13,860 --> 00:25:15,450
something out of a million browsers

534
00:25:15,450 --> 00:25:17,970
that's really really slow really small

535
00:25:17,970 --> 00:25:20,550
pretty much the other interesting thing

536
00:25:20,550 --> 00:25:26,400
is that CSP has two more directives well

537
00:25:26,400 --> 00:25:28,410
suppose you're you know we decided to

538
00:25:28,410 --> 00:25:31,170
use CSP but you're using a library that

539
00:25:31,170 --> 00:25:33,690
is using eval function and you have to

540
00:25:33,690 --> 00:25:35,340
use this library say it's jquery or

541
00:25:35,340 --> 00:25:38,490
something like that and you don't have

542
00:25:38,490 --> 00:25:40,320
the resources to rewrite it so you like

543
00:25:40,320 --> 00:25:42,780
well either my website doesn't work or i

544
00:25:42,780 --> 00:25:45,420
have to allow evil so what you do is you

545
00:25:45,420 --> 00:25:48,090
say i'm going to use that directory that

546
00:25:48,090 --> 00:25:52,140
says unsafe evil now all your set

547
00:25:52,140 --> 00:25:55,380
timeout functions set interval functions

548
00:25:55,380 --> 00:25:58,440
evil functions are going to work but I

549
00:25:58,440 --> 00:26:01,020
love how they called that directive

550
00:26:01,020 --> 00:26:04,290
they're saying well yes your allow evil

551
00:26:04,290 --> 00:26:06,600
but now you're unsafe you have to

552
00:26:06,600 --> 00:26:08,760
realize that and same thing with the

553
00:26:08,760 --> 00:26:11,430
inline script if you want to allow

554
00:26:11,430 --> 00:26:13,830
inline script because your cannot

555
00:26:13,830 --> 00:26:16,200
rewrite the whole application you say

556
00:26:16,200 --> 00:26:19,560
yep let's allow unsafe inline and in if

557
00:26:19,560 --> 00:26:21,900
we look at the data more closely out of

558
00:26:21,900 --> 00:26:27,270
those 269 websites 500 served 257 we're

559
00:26:27,270 --> 00:26:29,790
using these two directives which

560
00:26:29,790 --> 00:26:31,650
basically made their website as

561
00:26:31,650 --> 00:26:34,830
vulnerable as they were before using CSP

562
00:26:34,830 --> 00:26:37,230
it's like what's the use of using the

563
00:26:37,230 --> 00:26:41,610
technology then so yeah that doesn't

564
00:26:41,610 --> 00:26:44,220
didn't work really however there are

565
00:26:44,220 --> 00:26:47,490
some companies that were able to use CSB

566
00:26:47,490 --> 00:26:51,300
one full blown and one of these

567
00:26:51,300 --> 00:26:54,210
companies was Twitter so they were very

568
00:26:54,210 --> 00:26:56,370
loud about it and they're like yep we

569
00:26:56,370 --> 00:26:58,230
implementing CSP they started with some

570
00:26:58,230 --> 00:27:00,630
small applications that they have like a

571
00:27:00,630 --> 00:27:03,260
mobile version of Twitter or some other

572
00:27:03,260 --> 00:27:05,700
helper applications and then the final

573
00:27:05,700 --> 00:27:08,580
is that yep the twitter also uses CSP

574
00:27:08,580 --> 00:27:10,740
completely so I decided to look at the

575
00:27:10,740 --> 00:27:13,200
headers and the first CSP header that I

576
00:27:13,200 --> 00:27:17,040
see says script source unsafe inline on

577
00:27:17,040 --> 00:27:21,720
unsafe eval like really Twitter after

578
00:27:21,720 --> 00:27:23,850
all these buzz that you did and like

579
00:27:23,850 --> 00:27:27,570
that's as far as you could go so then I

580
00:27:27,570 --> 00:27:29,700
looked further as the side was still

581
00:27:29,700 --> 00:27:32,580
loading and they overrode that first

582
00:27:32,580 --> 00:27:33,780
header I don't know what that why they

583
00:27:33,780 --> 00:27:36,059
still have it there but they load

584
00:27:36,059 --> 00:27:39,030
another one and this is a beautiful

585
00:27:39,030 --> 00:27:40,740
piece of work because it's a script

586
00:27:40,740 --> 00:27:44,370
source and that's it right it has two

587
00:27:44,370 --> 00:27:49,020
other URLs ABS at Twitter IMG com maybe

588
00:27:49,020 --> 00:27:52,020
as a 0 2 mg the comp but that's it no

589
00:27:52,020 --> 00:27:55,590
unsafe eval no one's safe in line so

590
00:27:55,590 --> 00:27:59,130
they were able to do it thumbs up for

591
00:27:59,130 --> 00:28:00,900
Twitter and notice they're also using

592
00:28:00,900 --> 00:28:04,820
the reporting mechanism the last

593
00:28:04,820 --> 00:28:07,380
directive here is report your eye and

594
00:28:07,380 --> 00:28:09,059
they're capturing all the all the

595
00:28:09,059 --> 00:28:12,960
reports the next company who is also

596
00:28:12,960 --> 00:28:17,130
loud about it was yell however if we'll

597
00:28:17,130 --> 00:28:20,190
look at their headers unsafe inline and

598
00:28:20,190 --> 00:28:22,380
unsafe eval is there that's as far as

599
00:28:22,380 --> 00:28:26,070
they could go which means yeah I mean

600
00:28:26,070 --> 00:28:28,520
they're using it to control the content

601
00:28:28,520 --> 00:28:31,830
but they're not protecting that use not

602
00:28:31,830 --> 00:28:33,330
using it to protect themselves from

603
00:28:33,330 --> 00:28:39,390
exercise and the other interesting thing

604
00:28:39,390 --> 00:28:41,610
that I found in this policy was the

605
00:28:41,610 --> 00:28:44,610
first directive the defaults or star

606
00:28:44,610 --> 00:28:47,220
like that's what it is by default why do

607
00:28:47,220 --> 00:28:50,690
you even need to specify it I don't know

608
00:28:50,690 --> 00:28:57,480
yep um so CSP one not widely adopted

609
00:28:57,480 --> 00:29:00,750
it's really hard for existing projects

610
00:29:00,750 --> 00:29:03,270
it it's doable for new projects if you

611
00:29:03,270 --> 00:29:04,710
let's say all right we're going to start

612
00:29:04,710 --> 00:29:06,450
from scratch and we're going to use it

613
00:29:06,450 --> 00:29:07,530
and this is how we're going to write

614
00:29:07,530 --> 00:29:08,700
JavaScript and

615
00:29:08,700 --> 00:29:12,990
then you can use it but people realize

616
00:29:12,990 --> 00:29:14,820
that yep the first version doesn't

617
00:29:14,820 --> 00:29:18,090
really apply so the suggestions to the

618
00:29:18,090 --> 00:29:22,950
second one include different ways to

619
00:29:22,950 --> 00:29:25,860
still keep the inline JavaScript so that

620
00:29:25,860 --> 00:29:26,940
you don't need to rewrite the whole

621
00:29:26,940 --> 00:29:29,970
application but make it trust it somehow

622
00:29:29,970 --> 00:29:32,250
sign it and say alright I trust this

623
00:29:32,250 --> 00:29:34,110
piece of JavaScript it comes from my

624
00:29:34,110 --> 00:29:36,780
server you can execute it whatever else

625
00:29:36,780 --> 00:29:39,320
is injected don't try to execute it and

626
00:29:39,320 --> 00:29:42,720
those things are nons sores and hash

627
00:29:42,720 --> 00:29:45,690
sores some other changes that they're

628
00:29:45,690 --> 00:29:47,490
adding is like you can now specify the

629
00:29:47,490 --> 00:29:49,260
policy in the meta tags instead of the

630
00:29:49,260 --> 00:29:52,470
HTTP headers I don't know what's kind of

631
00:29:52,470 --> 00:29:56,250
the use case or value the CSP is still a

632
00:29:56,250 --> 00:30:00,210
candidate recommendation as of july of

633
00:30:00,210 --> 00:30:03,140
this year so it's still being developed

634
00:30:03,140 --> 00:30:05,640
it is partially supported by some

635
00:30:05,640 --> 00:30:07,680
browsers because it since it's still

636
00:30:07,680 --> 00:30:09,240
being developed we don't know what's the

637
00:30:09,240 --> 00:30:11,970
final sender is but the latest versions

638
00:30:11,970 --> 00:30:14,190
of chrome and firefox support a lot of

639
00:30:14,190 --> 00:30:17,340
functionality from CSP too so what are

640
00:30:17,340 --> 00:30:21,480
these headers the nonce you know we in

641
00:30:21,480 --> 00:30:23,610
software security will like nonces will

642
00:30:23,610 --> 00:30:26,340
like tokens we say this is the token I

643
00:30:26,340 --> 00:30:28,380
gave it to you if you show me this token

644
00:30:28,380 --> 00:30:31,290
later I know that I gave it to you I can

645
00:30:31,290 --> 00:30:33,420
trust you right so that's the same idea

646
00:30:33,420 --> 00:30:36,690
we're going to prepend each javascript

647
00:30:36,690 --> 00:30:38,850
just put another attribute and say okay

648
00:30:38,850 --> 00:30:40,890
this is the token that comes from the

649
00:30:40,890 --> 00:30:45,780
server and also add the token into the

650
00:30:45,780 --> 00:30:48,420
HTTP header so when the browser is

651
00:30:48,420 --> 00:30:50,670
executing the JavaScript you know

652
00:30:50,670 --> 00:30:52,260
rendering the page says okay I have this

653
00:30:52,260 --> 00:30:55,560
JavaScript let's see should I be allowed

654
00:30:55,560 --> 00:30:57,600
to execute it or not well it has this

655
00:30:57,600 --> 00:31:00,510
token let's see if the token matches to

656
00:31:00,510 --> 00:31:04,080
what else and as the HTTP header if it

657
00:31:04,080 --> 00:31:06,300
does the browser runs it if it doesn't

658
00:31:06,300 --> 00:31:08,370
the browser just ignores the JavaScript

659
00:31:08,370 --> 00:31:11,010
or sends a validation request if you

660
00:31:11,010 --> 00:31:15,540
configure the report policy so that's

661
00:31:15,540 --> 00:31:18,930
good however from the developer

662
00:31:18,930 --> 00:31:21,080
perspective the question is we

663
00:31:21,080 --> 00:31:24,350
when and how do i add these nonces the

664
00:31:24,350 --> 00:31:25,970
nonces have to be different for each

665
00:31:25,970 --> 00:31:28,370
time you reload the page they have to be

666
00:31:28,370 --> 00:31:30,470
unpredictable you have to store them on

667
00:31:30,470 --> 00:31:32,840
the service well no you don't need to

668
00:31:32,840 --> 00:31:34,010
store them on the service side so that's

669
00:31:34,010 --> 00:31:35,900
a good thing because you just have two

670
00:31:35,900 --> 00:31:37,490
copies one on the JavaScript one and the

671
00:31:37,490 --> 00:31:41,750
HTTP header the good the good thought

672
00:31:41,750 --> 00:31:45,530
the easy kind of approach is that ok I'm

673
00:31:45,530 --> 00:31:47,720
going to interpret my page I'm going to

674
00:31:47,720 --> 00:31:50,750
do my business logic and as soon as I'm

675
00:31:50,750 --> 00:31:53,420
ready to send the page off to the user

676
00:31:53,420 --> 00:31:55,370
I'm just going to go through all those

677
00:31:55,370 --> 00:31:57,800
JavaScript's and stick an ounce to each

678
00:31:57,800 --> 00:32:02,420
of them well the problem is if we think

679
00:32:02,420 --> 00:32:06,680
back about the reflected XSS where an

680
00:32:06,680 --> 00:32:08,600
attacker sends you a piece of JavaScript

681
00:32:08,600 --> 00:32:11,060
and it's injected into the response and

682
00:32:11,060 --> 00:32:13,640
then afterwards words you're attaching

683
00:32:13,640 --> 00:32:16,340
all those nonces well the response is

684
00:32:16,340 --> 00:32:20,060
going to be there already and now you're

685
00:32:20,060 --> 00:32:22,610
signing off on the piece of JavaScript

686
00:32:22,610 --> 00:32:25,760
that came from an attacker from

687
00:32:25,760 --> 00:32:31,330
somewhere else so the approach works if

688
00:32:31,330 --> 00:32:33,950
developers use it correctly but there is

689
00:32:33,950 --> 00:32:36,740
a way to use an easy way to implement it

690
00:32:36,740 --> 00:32:40,070
and you live the application vulnerable

691
00:32:40,070 --> 00:32:44,500
still so then there is another approach

692
00:32:44,500 --> 00:32:48,020
the approach of the nonce directive oh

693
00:32:48,020 --> 00:32:50,870
and then another question if we have the

694
00:32:50,870 --> 00:32:53,000
JavaScript and we signed off and you say

695
00:32:53,000 --> 00:32:56,240
yep we trust that JavaScript but the

696
00:32:56,240 --> 00:32:58,310
script itself has a vulnerability like

697
00:32:58,310 --> 00:33:00,950
we saw in the Dom based will it fix the

698
00:33:00,950 --> 00:33:05,630
issue no right script hat already has

699
00:33:05,630 --> 00:33:07,490
the vulnerability somebody injects into

700
00:33:07,490 --> 00:33:10,220
that script rights you know extra

701
00:33:10,220 --> 00:33:12,500
javascript in the same script script

702
00:33:12,500 --> 00:33:16,010
block and since you authorize everything

703
00:33:16,010 --> 00:33:17,750
that comes between the script and script

704
00:33:17,750 --> 00:33:19,550
and you don't know that has been

705
00:33:19,550 --> 00:33:22,700
modified at some point the vulnerability

706
00:33:22,700 --> 00:33:26,720
is still there so when we need that

707
00:33:26,720 --> 00:33:29,390
integrity when we need to say I'm

708
00:33:29,390 --> 00:33:33,970
sending you these 15 lines of code

709
00:33:40,990 --> 00:33:44,620
I can just run a small nap but the video

710
00:33:44,620 --> 00:33:46,919
will probably

711
00:33:57,230 --> 00:34:05,540
let Speaker two MiG's all right so when

712
00:34:05,540 --> 00:34:08,780
we want to ensure that whatever page but

713
00:34:08,780 --> 00:34:10,540
in a column for sending to the browser

714
00:34:10,540 --> 00:34:14,060
hasn't been changed has amazing tempered

715
00:34:14,060 --> 00:34:18,500
with what do we do a security sign the

716
00:34:18,500 --> 00:34:21,409
home right my cash that's no thing we

717
00:34:21,409 --> 00:34:25,250
all usually do so another directive is a

718
00:34:25,250 --> 00:34:28,520
hash right we take whatever is in

719
00:34:28,520 --> 00:34:30,980
between the script script tags and do a

720
00:34:30,980 --> 00:34:36,040
hash and specify a 256 or whatever and

721
00:34:36,040 --> 00:34:41,210
send them hash in the HTTP header so

722
00:34:41,210 --> 00:34:44,840
again the browser absorbs the page sees

723
00:34:44,840 --> 00:34:47,840
that there is the pumping security

724
00:34:47,840 --> 00:34:50,889
policy and in specified script source

725
00:34:50,889 --> 00:34:54,080
sha-256 and here's one hash there is no

726
00:34:54,080 --> 00:34:56,239
national semester sees those hashes and

727
00:34:56,239 --> 00:34:58,820
says alright i guess i need to hash and

728
00:34:58,820 --> 00:35:02,270
free sample script validating cash

729
00:35:02,270 --> 00:35:06,740
measures so takes a half the script it

730
00:35:06,740 --> 00:35:09,109
hash matches to one of the ones that you

731
00:35:09,109 --> 00:35:11,210
are sending here the jealous because

732
00:35:11,210 --> 00:35:13,340
executors if somebody modified the page

733
00:35:13,340 --> 00:35:16,180
of the way if there is dom base judge

734
00:35:16,180 --> 00:35:20,500
the hash not a match so the script when

735
00:35:20,500 --> 00:35:26,050
we walk so that's great again you have

736
00:35:26,050 --> 00:35:28,960
to you have to generate hashes it's next

737
00:35:28,960 --> 00:35:30,339
to us that we have to use some kind of

738
00:35:30,339 --> 00:35:31,839
let agree that doesn't war right the

739
00:35:31,839 --> 00:35:33,880
wrong library have to add them each step

740
00:35:33,880 --> 00:35:36,670
it's extra work but it's for sure

741
00:35:36,670 --> 00:35:39,010
protect your page from any injected

742
00:35:39,010 --> 00:35:43,480
gentlemen but still we go to the

743
00:35:43,480 --> 00:35:46,329
question like growth how do we write our

744
00:35:46,329 --> 00:35:48,280
pages so that it contains the minimal

745
00:35:48,280 --> 00:35:51,339
amount of Junction and today we are

746
00:35:51,339 --> 00:35:53,559
lucky because they're there are already

747
00:35:53,559 --> 00:35:56,680
a bunch of frameworks that do that we

748
00:35:56,680 --> 00:35:59,069
all the data binding frameworks that

749
00:35:59,069 --> 00:36:02,740
allow you to rise your HTML page without

750
00:36:02,740 --> 00:36:04,630
any judgment right you just specify the

751
00:36:04,630 --> 00:36:07,150
binding off ok this is the username that

752
00:36:07,150 --> 00:36:09,339
is displayed this is the search term

753
00:36:09,339 --> 00:36:12,579
that we asked for that is displayed here

754
00:36:12,579 --> 00:36:14,140
we're going to bind into a certain

755
00:36:14,140 --> 00:36:18,040
variable outer model on the client side

756
00:36:18,040 --> 00:36:20,380
and the ball was in separate jealous

757
00:36:20,380 --> 00:36:23,540
your file and it's not together relation

758
00:36:23,540 --> 00:36:27,230
separated our our team so if you are

759
00:36:27,230 --> 00:36:29,900
using one of these frameworks most of

760
00:36:29,900 --> 00:36:32,090
them are JavaScript except Jack oh of

761
00:36:32,090 --> 00:36:36,680
course then you don't need to re-write

762
00:36:36,680 --> 00:36:38,630
basically they all these records are

763
00:36:38,630 --> 00:36:41,210
supporting CSP out of the box and figure

764
00:36:41,210 --> 00:36:43,220
them even figure where you're bringing

765
00:36:43,220 --> 00:36:45,680
your Java scripts from the mic to die

766
00:36:45,680 --> 00:36:52,970
over so so that's good news starting in

767
00:36:52,970 --> 00:36:55,640
the application you want to UCSB use one

768
00:36:55,640 --> 00:36:58,060
of these frameworks

769
00:37:04,250 --> 00:37:05,880
then

770
00:37:05,880 --> 00:37:10,980
so that's the question I have a list of

771
00:37:10,980 --> 00:37:14,070
really good resources about home

772
00:37:14,070 --> 00:37:16,380
security policy as it slides in Germany

773
00:37:16,380 --> 00:37:19,000
on the website

774
00:37:19,000 --> 00:37:23,890
take a picture organ green later so open

775
00:37:23,890 --> 00:37:26,200
to questions are not finished earlier

776
00:37:26,200 --> 00:37:29,819
but a few minutes the question

777
00:37:33,029 --> 00:37:38,849
is more reason but is it this is

778
00:37:38,849 --> 00:37:43,730
something that needs a website bastard

779
00:37:43,730 --> 00:37:46,220
that's what the developer umbilicus I

780
00:37:46,220 --> 00:37:48,380
plasticity so I'm kind of wondering if

781
00:37:48,380 --> 00:37:52,520
this could possibly make sense to do it

782
00:37:52,520 --> 00:37:54,530
at base or quite the sort of deal with

783
00:37:54,530 --> 00:37:56,330
extended to a client side of trousers

784
00:37:56,330 --> 00:37:59,450
thinking you multiply seemed like it

785
00:37:59,450 --> 00:38:02,919
didn't biting a brick

786
00:38:03,710 --> 00:38:07,740
if you make sure that you're not that

787
00:38:07,740 --> 00:38:09,660
anything that's from any other website

788
00:38:09,660 --> 00:38:15,240
of visiting use a local CSP websites so

789
00:38:15,240 --> 00:38:17,760
there are plugins for that there's one

790
00:38:17,760 --> 00:38:25,109
plugin so Stuart Larson who also gave

791
00:38:25,109 --> 00:38:31,950
top Helen i wass California he has a

792
00:38:31,950 --> 00:38:36,630
plug-in called Casper so it's a chrome

793
00:38:36,630 --> 00:38:39,240
plugin where you can write your own CSP

794
00:38:39,240 --> 00:38:41,069
and it's for that specific reason to

795
00:38:41,069 --> 00:38:44,849
test right what if i apply this ESP to

796
00:38:44,849 --> 00:38:46,920
this page and let's see how it works you

797
00:38:46,920 --> 00:38:48,690
can also set up the reporting mechanism

798
00:38:48,690 --> 00:38:50,279
and get the reports and kind of play

799
00:38:50,279 --> 00:38:52,730
with it but in general it works for

800
00:38:52,730 --> 00:38:55,829
testing playing researching purposes but

801
00:38:55,829 --> 00:38:57,869
if you want to set up that app for like

802
00:38:57,869 --> 00:39:00,750
CNN com you have no idea how many

803
00:39:00,750 --> 00:39:02,910
resources they're loading from all over

804
00:39:02,910 --> 00:39:04,859
the place so you're going to set it up

805
00:39:04,859 --> 00:39:07,170
and suddenly all the images and videos

806
00:39:07,170 --> 00:39:09,779
are not loaded right so yeah so it's a

807
00:39:09,779 --> 00:39:13,829
great tool to play around but developers

808
00:39:13,829 --> 00:39:17,819
have to be have to take that effort and

809
00:39:17,819 --> 00:39:19,589
responsibility to configure the Seas you

810
00:39:19,589 --> 00:39:21,809
don't want to trust the users what they

811
00:39:21,809 --> 00:39:28,010
configure it so any other questions

812
00:39:34,390 --> 00:39:36,490
what do you mean by automatically

813
00:39:36,490 --> 00:39:38,910
validate

814
00:39:42,900 --> 00:39:45,660
Oh to try to like from the Tigers

815
00:39:45,660 --> 00:39:47,880
perspective so the question was are

816
00:39:47,880 --> 00:39:50,150
there any tools to automatically

817
00:39:50,150 --> 00:39:52,559
validate the policy basically try to

818
00:39:52,559 --> 00:39:54,990
find the vulnerable places in the policy

819
00:39:54,990 --> 00:39:58,980
right what else can we inject no I have

820
00:39:58,980 --> 00:40:01,559
not seen the tools for that but I'm sure

821
00:40:01,559 --> 00:40:03,180
like with a plug in it will be easier

822
00:40:03,180 --> 00:40:06,690
because you can test but ya know there

823
00:40:06,690 --> 00:40:08,190
are no plugins there it would be great

824
00:40:08,190 --> 00:40:10,500
for like burp or somebody like that

825
00:40:10,500 --> 00:40:12,539
invented that is yeah it's not a bad

826
00:40:12,539 --> 00:40:22,289
idea any other questions all right thank

827
00:40:22,289 --> 00:40:25,250
you everybody

