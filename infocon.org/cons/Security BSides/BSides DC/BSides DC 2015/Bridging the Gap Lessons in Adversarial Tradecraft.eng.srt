1
00:00:00,030 --> 00:00:02,399
so I'm going get started this is

2
00:00:02,399 --> 00:00:04,470
bridging the gap lessons in adversarial

3
00:00:04,470 --> 00:00:08,940
tradecraft my name is Will Schrader my

4
00:00:08,940 --> 00:00:11,429
handle on Twitter and github is harm joy

5
00:00:11,429 --> 00:00:14,610
I am a security researcher and red

6
00:00:14,610 --> 00:00:16,020
teamer for the adapted threat division

7
00:00:16,020 --> 00:00:18,090
of Aris group were actually sponsored we

8
00:00:18,090 --> 00:00:20,070
love this conference I'm a co-founder

9
00:00:20,070 --> 00:00:22,170
with the active developers of the Empire

10
00:00:22,170 --> 00:00:24,150
PowerShell project which we will talk

11
00:00:24,150 --> 00:00:26,279
about a bit during this presentation I'm

12
00:00:26,279 --> 00:00:28,410
also the founder one the cofounders of

13
00:00:28,410 --> 00:00:30,090
power tools I wrote like power up power

14
00:00:30,090 --> 00:00:31,500
view a lot of the office of PowerShell

15
00:00:31,500 --> 00:00:33,570
tech and I'm one of the cofounders and

16
00:00:33,570 --> 00:00:35,040
authors of the veil framework actually

17
00:00:35,040 --> 00:00:37,050
spoke here last year I think in the same

18
00:00:37,050 --> 00:00:39,239
room on some kind of AV evasion stuff

19
00:00:39,239 --> 00:00:41,160
underneath the hood for veil evasion in

20
00:00:41,160 --> 00:00:43,260
case anyone was here at that talk I'll

21
00:00:43,260 --> 00:00:46,320
talk to a few cons I love these sized

22
00:00:46,320 --> 00:00:47,850
conferences I love interacting with

23
00:00:47,850 --> 00:00:49,860
people and we're gonna do like a Q&A out

24
00:00:49,860 --> 00:00:51,059
in the hallway if anyone wants to talk

25
00:00:51,059 --> 00:00:54,020
about this stuff if we run out of time

26
00:00:54,020 --> 00:00:55,199
all right

27
00:00:55,199 --> 00:00:57,539
I'm Matt Nelson and it's my first time

28
00:00:57,539 --> 00:01:03,780
speaking at a con so be nice on Twitter

29
00:01:03,780 --> 00:01:06,119
enigma oak tree I'm a penetration tester

30
00:01:06,119 --> 00:01:07,409
and red teamer for a very scripted

31
00:01:07,409 --> 00:01:09,479
active threat division I'm also a

32
00:01:09,479 --> 00:01:11,610
developer on the partial Empire project

33
00:01:11,610 --> 00:01:14,580
and I love offensive PowerShell so if

34
00:01:14,580 --> 00:01:17,070
you don't use PowerShell with it so if

35
00:01:17,070 --> 00:01:18,750
if you guys happen to have a drink and

36
00:01:18,750 --> 00:01:20,130
are playing a drinking game you drink

37
00:01:20,130 --> 00:01:21,780
every time we say PowerShell and I

38
00:01:21,780 --> 00:01:23,369
promise you'll stand up before you leave

39
00:01:23,369 --> 00:01:26,340
this presentation so kind of setting the

40
00:01:26,340 --> 00:01:29,790
stage this is what we'll be going over

41
00:01:29,790 --> 00:01:31,350
today I'm gonna kind of do some you know

42
00:01:31,350 --> 00:01:32,820
our definition of kind of a red team

43
00:01:32,820 --> 00:01:34,770
philosophy versus of pentest philosophy

44
00:01:34,770 --> 00:01:37,049
and really kind of one things one of the

45
00:01:37,049 --> 00:01:38,970
things that our group tries to embody is

46
00:01:38,970 --> 00:01:41,460
kind of bridging this gap between red

47
00:01:41,460 --> 00:01:43,820
team tradecraft and kind of shorter time

48
00:01:43,820 --> 00:01:46,409
pentest engagements we'll go over three

49
00:01:46,409 --> 00:01:48,990
specific subject areas I'll push you a

50
00:01:48,990 --> 00:01:51,479
push it real good Saul and pepper will

51
00:01:51,479 --> 00:01:53,070
go over kind of weak standard images and

52
00:01:53,070 --> 00:01:54,479
how we kind of approach those some of

53
00:01:54,479 --> 00:01:56,640
the things we see we'll go over network

54
00:01:56,640 --> 00:01:59,070
and user hygiene so what we mean by this

55
00:01:59,070 --> 00:02:01,409
are things specifically like hunting for

56
00:02:01,409 --> 00:02:03,600
specific users on a network something we

57
00:02:03,600 --> 00:02:05,340
do in every single engagement most

58
00:02:05,340 --> 00:02:07,380
people do on a lot of engagements now

59
00:02:07,380 --> 00:02:08,940
well there weren't a lot of like hugely

60
00:02:08,940 --> 00:02:10,780
specific tools out there really approach

61
00:02:10,780 --> 00:02:11,950
that problems that we started to right

62
00:02:11,950 --> 00:02:15,400
or wrong also go over domain trust I've

63
00:02:15,400 --> 00:02:17,050
given a few talks on domain trust with

64
00:02:17,050 --> 00:02:18,760
one of our co-workers who's not here

65
00:02:18,760 --> 00:02:20,680
today Justin Warner we really really

66
00:02:20,680 --> 00:02:22,480
like Active Directory domain trust so

67
00:02:22,480 --> 00:02:24,910
you know I will talk all day about this

68
00:02:24,910 --> 00:02:26,170
whether or not we're at a bar or

69
00:02:26,170 --> 00:02:27,459
whatever else so if you guys are

70
00:02:27,459 --> 00:02:28,750
interested in that please talk to me

71
00:02:28,750 --> 00:02:31,180
after and then the second third or

72
00:02:31,180 --> 00:02:32,590
second half of the presentation is going

73
00:02:32,590 --> 00:02:34,239
to be on the PowerShell Empire project

74
00:02:34,239 --> 00:02:36,520
which is a PowerShell post exploitation

75
00:02:36,520 --> 00:02:38,590
Bower agent that kind of links all this

76
00:02:38,590 --> 00:02:40,090
stuff together to help us kind of bridge

77
00:02:40,090 --> 00:02:42,640
that gap so we'll go over the you know

78
00:02:42,640 --> 00:02:43,989
kind of brass 101 all those kind of

79
00:02:43,989 --> 00:02:45,489
components and over some modules so

80
00:02:45,489 --> 00:02:47,709
that's gonna hate me for this I totally

81
00:02:47,709 --> 00:02:48,760
didn't switch out the slide decks

82
00:02:48,760 --> 00:02:49,959
because I told them I was going to troll

83
00:02:49,959 --> 00:02:51,430
him during this presentation during his

84
00:02:51,430 --> 00:02:53,590
first time on stage so invoke trolls

85
00:02:53,590 --> 00:02:54,040
poit

86
00:02:54,040 --> 00:02:55,060
it looks like you're trying to learn

87
00:02:55,060 --> 00:02:56,950
some hacker cultural references Matt

88
00:02:56,950 --> 00:02:58,330
would you like some help with that is it

89
00:02:58,330 --> 00:03:02,140
yes no or I hate you will okay so Matt's

90
00:03:02,140 --> 00:03:04,269
a really sharp guy he's also young so

91
00:03:04,269 --> 00:03:05,800
we've been trying to educate him in a

92
00:03:05,800 --> 00:03:07,360
lot of these hacker cultural references

93
00:03:07,360 --> 00:03:11,769
so Matt do you know what this is no

94
00:03:11,769 --> 00:03:15,250
audience anybody somebody come on yeah

95
00:03:15,250 --> 00:03:18,400
it's a yeah it's whopper man come on you

96
00:03:18,400 --> 00:03:20,470
have no idea do you okay so I promise

97
00:03:20,470 --> 00:03:21,549
there won't be any more of those during

98
00:03:21,549 --> 00:03:24,610
the presentation yeah so kind of setting

99
00:03:24,610 --> 00:03:26,230
the stage pentesting red teaming and

100
00:03:26,230 --> 00:03:27,510
what we mean by the assumed breach

101
00:03:27,510 --> 00:03:31,450
mentality so pentesting I know probably

102
00:03:31,450 --> 00:03:32,799
a lot of people in this room are pen

103
00:03:32,799 --> 00:03:35,530
testers the definition kind of varies

104
00:03:35,530 --> 00:03:37,299
how people define a pen test it could be

105
00:03:37,299 --> 00:03:39,880
you know a glorified Voland scan

106
00:03:39,880 --> 00:03:41,709
vulnerability validation or it could be

107
00:03:41,709 --> 00:03:43,299
a multi-person assault for you know

108
00:03:43,299 --> 00:03:45,489
several several weeks so the the

109
00:03:45,489 --> 00:03:47,320
definition between this and red teaming

110
00:03:47,320 --> 00:03:48,609
have kind of started to blur over the

111
00:03:48,609 --> 00:03:50,350
last few years you know some people to

112
00:03:50,350 --> 00:03:52,329
kind of use penetration testing almost

113
00:03:52,329 --> 00:03:53,650
as a dirty word now meaning you just

114
00:03:53,650 --> 00:03:55,780
rebranded an SS report we don't like to

115
00:03:55,780 --> 00:03:58,000
do that so I kind of view it as a

116
00:03:58,000 --> 00:03:59,410
reasonable balance you know breadth

117
00:03:59,410 --> 00:04:01,720
versus depth but the key for penetration

118
00:04:01,720 --> 00:04:04,090
testing is seeing how many problems you

119
00:04:04,090 --> 00:04:06,370
can find in a network you know and then

120
00:04:06,370 --> 00:04:07,989
potentially depending on time frame

121
00:04:07,989 --> 00:04:09,250
seeing how far you can get for those

122
00:04:09,250 --> 00:04:10,989
particular issues but the key is you

123
00:04:10,989 --> 00:04:13,600
know what can you actually find it's a

124
00:04:13,600 --> 00:04:15,640
usually focused on finding these issues

125
00:04:15,640 --> 00:04:16,779
and not about kind of like training

126
00:04:16,779 --> 00:04:18,370
instant responders or something like

127
00:04:18,370 --> 00:04:20,440
that which is kind of how we tend to

128
00:04:20,440 --> 00:04:23,320
define red teaming so this means

129
00:04:23,320 --> 00:04:24,580
different things that different people

130
00:04:24,580 --> 00:04:27,039
as well some people focus heavily on

131
00:04:27,039 --> 00:04:29,409
physical ops some people do super

132
00:04:29,409 --> 00:04:31,840
in-depth social engineering a lot of

133
00:04:31,840 --> 00:04:33,039
people will do custom exploit

134
00:04:33,039 --> 00:04:35,349
development pure Network operation this

135
00:04:35,349 --> 00:04:37,419
kind of stuff we focus on kind of an

136
00:04:37,419 --> 00:04:39,580
adversary simulation pure network

137
00:04:39,580 --> 00:04:42,039
operations type approach so I'll go over

138
00:04:42,039 --> 00:04:43,419
the assume breach kind of mentality here

139
00:04:43,419 --> 00:04:45,430
in a second but one of the common themes

140
00:04:45,430 --> 00:04:47,560
with this is for red teaming there tends

141
00:04:47,560 --> 00:04:49,180
to be an increased time frame and like a

142
00:04:49,180 --> 00:04:51,490
more person more permissive scope it

143
00:04:51,490 --> 00:04:53,169
also traditionally tends to have you

144
00:04:53,169 --> 00:04:55,180
know a lot more people a lot more money

145
00:04:55,180 --> 00:04:57,300
depending on the teams that are involved

146
00:04:57,300 --> 00:05:00,580
so assume breach we really like this

147
00:05:00,580 --> 00:05:02,590
phrase assume breach it was actually I

148
00:05:02,590 --> 00:05:04,330
don't know if it was coined but it was

149
00:05:04,330 --> 00:05:07,000
used by Microsoft in an office 365 red

150
00:05:07,000 --> 00:05:08,469
teaming white paper which is an

151
00:05:08,469 --> 00:05:10,060
excellent white paper if you guys

152
00:05:10,060 --> 00:05:11,919
haven't read it so you know with all

153
00:05:11,919 --> 00:05:13,629
these recent major incidents a lot of

154
00:05:13,629 --> 00:05:15,039
companies have started to realize that

155
00:05:15,039 --> 00:05:16,750
you're not going to stop bad guys from

156
00:05:16,750 --> 00:05:18,310
getting in the front door right so move

157
00:05:18,310 --> 00:05:20,919
beyond initial exploitation you know try

158
00:05:20,919 --> 00:05:22,120
to harden your perimeter and everything

159
00:05:22,120 --> 00:05:23,560
like that but you know if you're going

160
00:05:23,560 --> 00:05:26,080
if your threat model involves a

161
00:05:26,080 --> 00:05:28,389
nation-state you're not going to stop

162
00:05:28,389 --> 00:05:30,009
them from getting in the front door

163
00:05:30,009 --> 00:05:33,000
right so companies need to start just

164
00:05:33,000 --> 00:05:35,529
implementing an assumed breach way of

165
00:05:35,529 --> 00:05:36,639
thinking you know I guess this kind of

166
00:05:36,639 --> 00:05:38,650
plays into defense in depth but you know

167
00:05:38,650 --> 00:05:40,539
how do you stop lateral spread you know

168
00:05:40,539 --> 00:05:41,800
how do you at least detect how do you

169
00:05:41,800 --> 00:05:43,300
shut everything down how do you detect

170
00:05:43,300 --> 00:05:45,190
c2 a lot of these components that people

171
00:05:45,190 --> 00:05:46,419
haven't traditionally thought about

172
00:05:46,419 --> 00:05:47,889
because they didn't realize that the

173
00:05:47,889 --> 00:05:50,199
threat models actually you know involve

174
00:05:50,199 --> 00:05:53,110
nation-states we also kind of like you

175
00:05:53,110 --> 00:05:54,279
know doing things like post breach

176
00:05:54,279 --> 00:05:55,930
activities or kind of exercise in

177
00:05:55,930 --> 00:06:00,129
incident responders along this way all

178
00:06:00,129 --> 00:06:02,020
right that brings us to bridging the gap

179
00:06:02,020 --> 00:06:04,719
so as will mention pentesting red

180
00:06:04,719 --> 00:06:05,830
teaming kind of have a different

181
00:06:05,830 --> 00:06:08,080
methodology red teaming historically

182
00:06:08,080 --> 00:06:10,210
been for teams with a lot of people a

183
00:06:10,210 --> 00:06:13,360
lot of money and a lot of time and times

184
00:06:13,360 --> 00:06:15,159
kind of the biggest factor pentest

185
00:06:15,159 --> 00:06:17,409
normally are like a week or two you

186
00:06:17,409 --> 00:06:19,539
can't really get advanced adversarial

187
00:06:19,539 --> 00:06:21,849
tradecraft in in a week or two so our

188
00:06:21,849 --> 00:06:24,639
approach has been to take the advanced

189
00:06:24,639 --> 00:06:28,210
tradecraft that has been four of the

190
00:06:28,210 --> 00:06:29,770
more advanced teams and kind of push

191
00:06:29,770 --> 00:06:32,259
that tradecraft down to people that are

192
00:06:32,259 --> 00:06:35,080
in crunch time frames who have lack of

193
00:06:35,080 --> 00:06:37,100
staff or staff and then

194
00:06:37,100 --> 00:06:38,800
you don't have a whole lot of money and

195
00:06:38,800 --> 00:06:41,330
we're PowerShell fanboys PowerShell

196
00:06:41,330 --> 00:06:43,970
plays their really big role in this

197
00:06:43,970 --> 00:06:46,820
we also try to kind of you know build

198
00:06:46,820 --> 00:06:49,160
and distribute a knowledgebase of these

199
00:06:49,160 --> 00:06:51,110
tactics so we give training you know we

200
00:06:51,110 --> 00:06:52,640
do lakhs of blog posts and we're

201
00:06:52,640 --> 00:06:53,990
actually pretty open book in our group

202
00:06:53,990 --> 00:06:55,460
we pretty much give away everything you

203
00:06:55,460 --> 00:06:57,170
know anything we figure out we're able

204
00:06:57,170 --> 00:06:58,670
to publish on all the tools we do

205
00:06:58,670 --> 00:07:00,530
everything is open-source it's all BSD

206
00:07:00,530 --> 00:07:02,300
license and us all and github so we want

207
00:07:02,300 --> 00:07:03,620
to help try to give back to the

208
00:07:03,620 --> 00:07:07,640
community as much as we can so why do we

209
00:07:07,640 --> 00:07:10,460
use PowerShell PowerShell has kind of

210
00:07:10,460 --> 00:07:12,200
been coined as Microsoft's post

211
00:07:12,200 --> 00:07:14,060
exploitation language which has been

212
00:07:14,060 --> 00:07:16,460
mentioned a few times by it's a really

213
00:07:16,460 --> 00:07:18,530
great quote by Chris Campbell and if you

214
00:07:18,530 --> 00:07:19,430
haven't checked this stuff out

215
00:07:19,430 --> 00:07:21,760
definitely go check it out by default

216
00:07:21,760 --> 00:07:24,230
PowerShell is installed on Windows seven

217
00:07:24,230 --> 00:07:27,320
and up and it has how many of you have

218
00:07:27,320 --> 00:07:28,790
interacted with PowerShell but it has

219
00:07:28,790 --> 00:07:31,970
full access to the dotnet framework it's

220
00:07:31,970 --> 00:07:34,400
a Microsoft sign and trusted binary so

221
00:07:34,400 --> 00:07:36,620
it gets by a lot of application

222
00:07:36,620 --> 00:07:37,100
whitelisting

223
00:07:37,100 --> 00:07:40,010
solutions and it has direct access to

224
00:07:40,010 --> 00:07:42,650
the win32 api so a lot of stuff in the

225
00:07:42,650 --> 00:07:44,810
tools that we are I interact with the

226
00:07:44,810 --> 00:07:47,750
win32 API pretty frequently and then a

227
00:07:47,750 --> 00:07:49,550
la system will assemble malicious

228
00:07:49,550 --> 00:07:51,590
binaries completely in memory so a lot

229
00:07:51,590 --> 00:07:54,050
of the ops that we do operate completely

230
00:07:54,050 --> 00:07:56,060
in memory and nothing ever touches disk

231
00:07:56,060 --> 00:07:58,460
so it kind of emulates the advanced

232
00:07:58,460 --> 00:08:00,680
tradecraft that a lot of the more

233
00:08:00,680 --> 00:08:01,700
advanced teams were able to replicate

234
00:08:01,700 --> 00:08:06,860
over an extended time frame and so it's

235
00:08:06,860 --> 00:08:08,210
kind of been referred to as a toy

236
00:08:08,210 --> 00:08:10,040
language over the years a lot of people

237
00:08:10,040 --> 00:08:11,840
have kind of written it off because it

238
00:08:11,840 --> 00:08:14,780
is a scripting language a lot of people

239
00:08:14,780 --> 00:08:15,920
don't see a scripting language is

240
00:08:15,920 --> 00:08:17,060
something that you can write a full

241
00:08:17,060 --> 00:08:19,460
malware agent in and as you can see on

242
00:08:19,460 --> 00:08:21,770
the slide there it's a recent offensive

243
00:08:21,770 --> 00:08:23,840
talk where they kind of listed out all

244
00:08:23,840 --> 00:08:25,790
of the public PowerShell offensive

245
00:08:25,790 --> 00:08:27,680
frameworks frameworks and you can see

246
00:08:27,680 --> 00:08:30,230
I'm set bail framework and power up

247
00:08:30,230 --> 00:08:33,110
power view Empire pretty recent in

248
00:08:33,110 --> 00:08:36,349
Schenck mess boy and then Powercat this

249
00:08:36,349 --> 00:08:38,210
was actually from a defensive compras

250
00:08:38,210 --> 00:08:41,390
conference virus bolt in 2015 so I think

251
00:08:41,390 --> 00:08:42,950
appointment this is while it's been

252
00:08:42,950 --> 00:08:44,360
written off for a while defenders are

253
00:08:44,360 --> 00:08:45,950
finally starting to wake up like oh yeah

254
00:08:45,950 --> 00:08:47,930
this is this is bad and guess what bad

255
00:08:47,930 --> 00:08:50,010
guys have been using it for a long time

256
00:08:50,010 --> 00:08:52,630
and so all of this has kind of created a

257
00:08:52,630 --> 00:08:54,519
weaponization problem so there's a lot

258
00:08:54,519 --> 00:08:56,440
of offensive capability written in

259
00:08:56,440 --> 00:08:58,269
PowerShell that's out there and Power

260
00:08:58,269 --> 00:09:00,790
Cells really sexy and so it lets us do a

261
00:09:00,790 --> 00:09:02,620
whole lot of different things and so a

262
00:09:02,620 --> 00:09:04,860
lot of people recently have been diving

263
00:09:04,860 --> 00:09:07,839
offensive tools in PowerShell and

264
00:09:07,839 --> 00:09:09,310
they've just kind of been scattered all

265
00:09:09,310 --> 00:09:11,800
over the place and people have picked up

266
00:09:11,800 --> 00:09:13,930
the scripts and they don't really fully

267
00:09:13,930 --> 00:09:15,339
understand what's going on into the hood

268
00:09:15,339 --> 00:09:17,230
so it's been really hard for some of the

269
00:09:17,230 --> 00:09:20,470
penetration testing methodology to adapt

270
00:09:20,470 --> 00:09:23,079
kind of how to use PowerShell securely

271
00:09:23,079 --> 00:09:25,269
and that B we've heard a lot of people

272
00:09:25,269 --> 00:09:25,899
love running

273
00:09:25,899 --> 00:09:27,970
PowerShell scripts directly from github

274
00:09:27,970 --> 00:09:29,800
accounts that they don't control so

275
00:09:29,800 --> 00:09:32,200
people can just change to change the

276
00:09:32,200 --> 00:09:33,310
code and they're just running it

277
00:09:33,310 --> 00:09:35,680
willy-nilly so a lot of the existing

278
00:09:35,680 --> 00:09:37,450
tech hasn't always been completely

279
00:09:37,450 --> 00:09:39,640
straightforward PowerShell kind of has a

280
00:09:39,640 --> 00:09:42,579
learning curve and it's in a sense it's

281
00:09:42,579 --> 00:09:43,600
a little different than a lot of the

282
00:09:43,600 --> 00:09:45,640
other scripting languages but it's also

283
00:09:45,640 --> 00:09:48,370
really really powerful so the people

284
00:09:48,370 --> 00:09:49,990
that haven't quite adopted PowerShell

285
00:09:49,990 --> 00:09:51,820
yet we're hoping to kind of solve the

286
00:09:51,820 --> 00:09:53,410
weaponization problem to make it easy

287
00:09:53,410 --> 00:09:55,230
and understandable for them to operate

288
00:09:55,230 --> 00:09:57,610
efficiently with sit with the scripting

289
00:09:57,610 --> 00:09:59,740
language again that's kind of the point

290
00:09:59,740 --> 00:10:02,680
that um Empire was kind of focused on

291
00:10:02,680 --> 00:10:05,560
solving which we'll go over in a bit so

292
00:10:05,560 --> 00:10:07,870
weak standard images this is the first

293
00:10:07,870 --> 00:10:09,390
of the three sections we'll go through

294
00:10:09,390 --> 00:10:11,890
you know a standard image tends to have

295
00:10:11,890 --> 00:10:13,660
a lot of issues associated with it which

296
00:10:13,660 --> 00:10:15,370
a lot of companies don't tend to realize

297
00:10:15,370 --> 00:10:17,500
so but first a met there's Clippy again

298
00:10:17,500 --> 00:10:19,029
sorry did you know that was Clippy I

299
00:10:19,029 --> 00:10:20,290
don't know do you know it's like okay

300
00:10:20,290 --> 00:10:21,970
you know cookies you know you happen to

301
00:10:21,970 --> 00:10:24,459
know who this is or who distributed the

302
00:10:24,459 --> 00:10:29,230
bumper stickers okay okay all right good

303
00:10:29,230 --> 00:10:32,350
job man good job so standard images

304
00:10:32,350 --> 00:10:34,480
organizations typically utilize some

305
00:10:34,480 --> 00:10:35,769
kind of standard base image for

306
00:10:35,769 --> 00:10:37,870
workstations sometimes this varies per

307
00:10:37,870 --> 00:10:39,610
business unit sometimes it's distribute

308
00:10:39,610 --> 00:10:41,649
across the entire organization very

309
00:10:41,649 --> 00:10:44,230
frequently we've seen in large large and

310
00:10:44,230 --> 00:10:46,959
a fortune 200 fortune 500 companies this

311
00:10:46,959 --> 00:10:48,790
can sometimes be contracted out to third

312
00:10:48,790 --> 00:10:50,440
parties because the the organizations

313
00:10:50,440 --> 00:10:52,449
don't actually want to manage it well

314
00:10:52,449 --> 00:10:54,100
people don't seem to realize that this

315
00:10:54,100 --> 00:10:55,779
is that the security of this image

316
00:10:55,779 --> 00:10:58,690
matters a whole lot these exploitation

317
00:10:58,690 --> 00:10:59,890
of this or if you find some kind of

318
00:10:59,890 --> 00:11:01,720
flour issue with the initial base image

319
00:11:01,720 --> 00:11:03,130
you might have a way to

320
00:11:03,130 --> 00:11:04,900
early spread to every single workstation

321
00:11:04,900 --> 00:11:06,880
in the entire organization well you guys

322
00:11:06,880 --> 00:11:09,520
think like okay really would any company

323
00:11:09,520 --> 00:11:11,050
actually have an issue and there you

324
00:11:11,050 --> 00:11:12,210
know the image on every single

325
00:11:12,210 --> 00:11:14,440
workstation the entire enterprise I can

326
00:11:14,440 --> 00:11:16,770
assure you it happens very frequently

327
00:11:16,770 --> 00:11:18,760
one of the things you know kind of a

328
00:11:18,760 --> 00:11:22,300
classic Pervez method right so we say no

329
00:11:22,300 --> 00:11:24,070
we don't really like to focus on kernel

330
00:11:24,070 --> 00:11:25,930
exploits and generally we don't really

331
00:11:25,930 --> 00:11:28,300
throw exploits almost ever or at least

332
00:11:28,300 --> 00:11:30,550
recently or you know very rare cases you

333
00:11:30,550 --> 00:11:32,530
might throw on we really like to use

334
00:11:32,530 --> 00:11:34,870
misconfigurations so services are great

335
00:11:34,870 --> 00:11:36,730
for misconfigurations kind of the old

336
00:11:36,730 --> 00:11:39,370
you know pen test 101 ten years ago is

337
00:11:39,370 --> 00:11:41,590
you know your se bin SE config bin path

338
00:11:41,590 --> 00:11:42,790
kind of thing you have the apples

339
00:11:42,790 --> 00:11:44,380
associated with the service itself are

340
00:11:44,380 --> 00:11:45,520
vulnerable you might be able to

341
00:11:45,520 --> 00:11:47,110
reconfigure it you really don't see that

342
00:11:47,110 --> 00:11:49,840
anymore but very frequently we see the

343
00:11:49,840 --> 00:11:52,330
binaries associated with services not

344
00:11:52,330 --> 00:11:54,520
being locked down so if a company deploy

345
00:11:54,520 --> 00:11:56,200
something custom or even things like I

346
00:11:56,200 --> 00:11:58,150
don't know a Cisco VPN and certain

347
00:11:58,150 --> 00:12:00,400
versions they tend to not lock down the

348
00:12:00,400 --> 00:12:02,380
permissions for the binary so if any

349
00:12:02,380 --> 00:12:04,210
user can overwrite the binary for a

350
00:12:04,210 --> 00:12:06,460
service you can custom compile whatever

351
00:12:06,460 --> 00:12:08,020
you want you know can add a local user

352
00:12:08,020 --> 00:12:10,120
it can do an agent or whatever else you

353
00:12:10,120 --> 00:12:11,590
overwrite the binary and you reboot the

354
00:12:11,590 --> 00:12:13,030
machine and then you can get you know

355
00:12:13,030 --> 00:12:14,950
code execution you can add local users

356
00:12:14,950 --> 00:12:17,140
and do whatever else we still see this

357
00:12:17,140 --> 00:12:19,840
like a lot more than we should is kind

358
00:12:19,840 --> 00:12:22,810
of one of our go two's another method

359
00:12:22,810 --> 00:12:26,470
which is pretty cool is service DLL path

360
00:12:26,470 --> 00:12:29,170
hijacking so there's a there's a search

361
00:12:29,170 --> 00:12:31,030
order for dll's whenever a service or a

362
00:12:31,030 --> 00:12:32,380
program starts up it's gonna look you

363
00:12:32,380 --> 00:12:34,180
know when it's its current directory

364
00:12:34,180 --> 00:12:35,830
it's gonna look and see windows system32

365
00:12:35,830 --> 00:12:37,390
and everything else and there's a path

366
00:12:37,390 --> 00:12:39,790
of like six six places that all tend to

367
00:12:39,790 --> 00:12:42,010
look whenever it loads up dll's that it

368
00:12:42,010 --> 00:12:44,290
needs for extra functionality the last

369
00:12:44,290 --> 00:12:46,060
place is going to look is every folder

370
00:12:46,060 --> 00:12:48,730
any users or the sorry the system

371
00:12:48,730 --> 00:12:51,610
startup path directory so if you have

372
00:12:51,610 --> 00:12:53,680
write access to any folder in the path

373
00:12:53,680 --> 00:12:56,980
and you custom compile a dll I think

374
00:12:56,980 --> 00:12:59,470
it's W OBS ctrl I always forget it have

375
00:12:59,470 --> 00:13:01,510
to look up the exact name and you drop

376
00:13:01,510 --> 00:13:04,150
that DLL into a particular writable

377
00:13:04,150 --> 00:13:05,680
folder then when that service starts up

378
00:13:05,680 --> 00:13:06,910
it's actually going to load up your

379
00:13:06,910 --> 00:13:08,830
malicious logic so this just works on

380
00:13:08,830 --> 00:13:10,150
Windows seven at the moment I don't

381
00:13:10,150 --> 00:13:11,770
think I haven't seen one actually

382
00:13:11,770 --> 00:13:13,810
disclosed for Windows eight or ten but

383
00:13:13,810 --> 00:13:16,300
um it's very very frequent for Windows 7

384
00:13:16,300 --> 00:13:16,990
so if

385
00:13:16,990 --> 00:13:18,670
one installs like Python or Perl or a

386
00:13:18,670 --> 00:13:19,990
lot of these things that do an extra

387
00:13:19,990 --> 00:13:21,940
folder that are added to the path and

388
00:13:21,940 --> 00:13:23,980
that folder is not in Program Files or

389
00:13:23,980 --> 00:13:26,589
Windows you can nine times out of 10

390
00:13:26,589 --> 00:13:27,970
we've seen you're able to actually drop

391
00:13:27,970 --> 00:13:30,459
the malicious DLL and prevent so again

392
00:13:30,459 --> 00:13:31,839
you also have to reboot the box which

393
00:13:31,839 --> 00:13:34,810
sucks but whatever so we started going

394
00:13:34,810 --> 00:13:36,279
through a lot of these common profess

395
00:13:36,279 --> 00:13:38,560
vectors from misconfigurations and the

396
00:13:38,560 --> 00:13:39,910
first red team I was on several years

397
00:13:39,910 --> 00:13:42,010
ago my boss made me examine every single

398
00:13:42,010 --> 00:13:44,050
service executable permission by hand it

399
00:13:44,050 --> 00:13:45,880
was super annoying it's like well I

400
00:13:45,880 --> 00:13:47,110
guess there's this thing called

401
00:13:47,110 --> 00:13:48,850
PowerShell I should probably automate it

402
00:13:48,850 --> 00:13:51,070
right you know this it's what it's used

403
00:13:51,070 --> 00:13:53,320
for is for system automation so power up

404
00:13:53,320 --> 00:13:54,790
is a tool that I end up writing when the

405
00:13:54,790 --> 00:13:56,290
first tools that kind of came out for

406
00:13:56,290 --> 00:13:59,649
the power tools toolkit it automates all

407
00:13:59,649 --> 00:14:02,260
the common windows Mis configuration

408
00:14:02,260 --> 00:14:04,810
privilege escalation vectors so it's all

409
00:14:04,810 --> 00:14:06,730
it's all separated by function but if

410
00:14:06,730 --> 00:14:08,080
you use the invoke all checks which is

411
00:14:08,080 --> 00:14:09,610
pretty much what we do most of the time

412
00:14:09,610 --> 00:14:11,140
that'll run through every single check

413
00:14:11,140 --> 00:14:13,180
on a system and say okay there's a miss

414
00:14:13,180 --> 00:14:14,860
configure service or there's a leftover

415
00:14:14,860 --> 00:14:16,420
sysprep or you know kind of the

416
00:14:16,420 --> 00:14:17,709
Encyclopedia per this or miss

417
00:14:17,709 --> 00:14:20,620
configuration so we we always run this

418
00:14:20,620 --> 00:14:23,140
usually very frequently will tend to

419
00:14:23,140 --> 00:14:24,430
find things unless we've assessed

420
00:14:24,430 --> 00:14:26,980
customers multiple times we also do some

421
00:14:26,980 --> 00:14:28,750
manual inspection of kind of the

422
00:14:28,750 --> 00:14:30,430
standard image so any custom software

423
00:14:30,430 --> 00:14:33,010
any custom image um you know custom

424
00:14:33,010 --> 00:14:34,630
services or anything like that will

425
00:14:34,630 --> 00:14:36,670
actually do pretty similar to kind of

426
00:14:36,670 --> 00:14:38,649
dynamic malware analysis to where you

427
00:14:38,649 --> 00:14:40,510
know checkers are dropping any files is

428
00:14:40,510 --> 00:14:41,829
it a local password change or binary

429
00:14:41,829 --> 00:14:44,200
something like that and I think we're

430
00:14:44,200 --> 00:14:46,510
for for for for going after local

431
00:14:46,510 --> 00:14:47,920
password changer binaries that are

432
00:14:47,920 --> 00:14:50,140
custom role because no one ever does

433
00:14:50,140 --> 00:14:51,459
them right even if they think they do

434
00:14:51,459 --> 00:14:52,450
them right or run them through an

435
00:14:52,450 --> 00:14:54,190
obfuscator so if you have reverser on

436
00:14:54,190 --> 00:14:58,149
your team it's super super awesome so

437
00:14:58,149 --> 00:15:00,040
custom internal development is one of

438
00:15:00,040 --> 00:15:01,360
the most common root causes of

439
00:15:01,360 --> 00:15:03,220
escalation vectors we tend to see in the

440
00:15:03,220 --> 00:15:06,010
field if people dev this custom stuff

441
00:15:06,010 --> 00:15:07,360
and roll it out to every single image

442
00:15:07,360 --> 00:15:09,670
they don't actually do secure your view

443
00:15:09,670 --> 00:15:11,680
of it if it's not a cost product so even

444
00:15:11,680 --> 00:15:13,000
if it is a cost product they're still

445
00:15:13,000 --> 00:15:17,829
sometimes stuff that pops up alright so

446
00:15:17,829 --> 00:15:21,250
network and user hygiene it's very easy

447
00:15:21,250 --> 00:15:25,480
to find targets within a network so in

448
00:15:25,480 --> 00:15:27,520
almost every network we enter we would

449
00:15:27,520 --> 00:15:29,340
consider a dirty network

450
00:15:29,340 --> 00:15:30,540
that kind of breaks into two little

451
00:15:30,540 --> 00:15:32,910
classes of where you've got a network

452
00:15:32,910 --> 00:15:35,850
hygiene where a sysadmin will throw up a

453
00:15:35,850 --> 00:15:37,950
tomcat or Apache box and not lock it

454
00:15:37,950 --> 00:15:38,400
down

455
00:15:38,400 --> 00:15:40,770
we have default creds whatever you may

456
00:15:40,770 --> 00:15:43,050
have and that kind of provides a really

457
00:15:43,050 --> 00:15:46,070
easy point of pivoting if you need to I

458
00:15:46,070 --> 00:15:49,950
mean there's user hygiene which we see

459
00:15:49,950 --> 00:15:52,770
more frequently than network hygiene a

460
00:15:52,770 --> 00:15:55,950
lot of old users people have you know

461
00:15:55,950 --> 00:15:57,840
people will come and go within the

462
00:15:57,840 --> 00:16:01,160
environment and they leave user accounts

463
00:16:01,160 --> 00:16:04,140
unnecessary admin users so admins that

464
00:16:04,140 --> 00:16:06,690
shed have or that have access to things

465
00:16:06,690 --> 00:16:08,490
that they probably shouldn't have access

466
00:16:08,490 --> 00:16:10,830
to overall we delegated groups and this

467
00:16:10,830 --> 00:16:14,990
is a really big one and so nested groups

468
00:16:14,990 --> 00:16:17,430
within Power View you can kind of break

469
00:16:17,430 --> 00:16:19,200
them out and see and this is kind of

470
00:16:19,200 --> 00:16:21,360
opened up a hole and most of the

471
00:16:21,360 --> 00:16:23,790
engagements have been on recently and to

472
00:16:23,790 --> 00:16:25,980
where people have administrative or

473
00:16:25,980 --> 00:16:28,050
elevated access to parts of the network

474
00:16:28,050 --> 00:16:29,940
they shouldn't have because people don't

475
00:16:29,940 --> 00:16:31,380
understand that the groups that they're

476
00:16:31,380 --> 00:16:35,280
in are also in groups kind of that are

477
00:16:35,280 --> 00:16:36,480
nested within each other so

478
00:16:36,480 --> 00:16:38,100
inadvertently they have administrative

479
00:16:38,100 --> 00:16:40,080
access to two different parts of the

480
00:16:40,080 --> 00:16:42,210
network and then long-running

481
00:16:42,210 --> 00:16:45,180
interactive logon so they'll leave token

482
00:16:45,180 --> 00:16:47,370
just laying around so if you're not able

483
00:16:47,370 --> 00:16:52,800
to dump passwords or whatever tokens are

484
00:16:52,800 --> 00:16:54,270
a really easy way to just kind of grab

485
00:16:54,270 --> 00:16:56,550
and run if you pop a box that's not

486
00:16:56,550 --> 00:16:58,620
rebooted often or they leave and these

487
00:16:58,620 --> 00:17:00,030
interactive logon tokens just laying

488
00:17:00,030 --> 00:17:02,190
around and it's really easy to hop on

489
00:17:02,190 --> 00:17:03,660
there god what you need and just kind of

490
00:17:03,660 --> 00:17:08,010
run around when the first network or one

491
00:17:08,010 --> 00:17:09,150
of the first things that we do when we

492
00:17:09,150 --> 00:17:11,819
pop onto a network especially if it's

493
00:17:11,819 --> 00:17:13,709
dirty is to hunt and so we don't just

494
00:17:13,709 --> 00:17:16,770
spray and pray and it's very surgical in

495
00:17:16,770 --> 00:17:18,990
the way that we find what interesting

496
00:17:18,990 --> 00:17:20,910
users might have access to what we need

497
00:17:20,910 --> 00:17:24,510
to get to we pop the box me me cats and

498
00:17:24,510 --> 00:17:26,730
then do we want their credentials or

499
00:17:26,730 --> 00:17:28,890
tokens and then kind of just run around

500
00:17:28,890 --> 00:17:30,380
at that

501
00:17:30,380 --> 00:17:33,900
so you and talked empower you in 20

502
00:17:33,900 --> 00:17:36,000
seconds Power View is one of the second

503
00:17:36,000 --> 00:17:37,590
tools that was written there's kind of a

504
00:17:37,590 --> 00:17:39,090
networking domain situation awareness

505
00:17:39,090 --> 00:17:40,920
tool which a lot of the next sections

506
00:17:40,920 --> 00:17:42,810
will cover

507
00:17:42,810 --> 00:17:45,990
so invoke user hunter is a function

508
00:17:45,990 --> 00:17:47,910
within power view that we use very very

509
00:17:47,910 --> 00:17:49,980
frequently and what it does is it allows

510
00:17:49,980 --> 00:17:53,340
you to strategically hunt for users that

511
00:17:53,340 --> 00:17:54,960
you're interested in a network and where

512
00:17:54,960 --> 00:17:57,690
they might have sessions from so if

513
00:17:57,690 --> 00:18:00,690
you've got administrative access to a

514
00:18:00,690 --> 00:18:02,340
majority of the workstations and you're

515
00:18:02,340 --> 00:18:04,500
interested in a certain user you can

516
00:18:04,500 --> 00:18:06,030
find where that user is logged in and

517
00:18:06,030 --> 00:18:07,320
you can go and you can specifically

518
00:18:07,320 --> 00:18:09,540
target them and what power of you de or

519
00:18:09,540 --> 00:18:11,190
what invoke user 100 does is they will

520
00:18:11,190 --> 00:18:14,550
query Active Directory for all the hosts

521
00:18:14,550 --> 00:18:16,470
and I'll make that as a target list and

522
00:18:16,470 --> 00:18:17,880
they'll do the same for the users of a

523
00:18:17,880 --> 00:18:19,950
target group which for example domain

524
00:18:19,950 --> 00:18:21,270
admins so if you're looking for domain

525
00:18:21,270 --> 00:18:24,150
admin you can match it up against the

526
00:18:24,150 --> 00:18:26,340
list of computers and what it'll do is I

527
00:18:26,340 --> 00:18:29,250
use win32 API calls and it will

528
00:18:29,250 --> 00:18:30,960
enumerate sessions of the logged on

529
00:18:30,960 --> 00:18:32,580
users and then match it up against your

530
00:18:32,580 --> 00:18:35,280
target list so what's really nice about

531
00:18:35,280 --> 00:18:36,750
this is you don't need administrator

532
00:18:36,750 --> 00:18:40,110
rights to do this and as you can see

533
00:18:40,110 --> 00:18:42,480
here on the graph this is kind of how it

534
00:18:42,480 --> 00:18:44,340
looks on a network as you've got the

535
00:18:44,340 --> 00:18:45,420
attacker box and I'll get all the

536
00:18:45,420 --> 00:18:47,520
computers from the domain controller and

537
00:18:47,520 --> 00:18:49,770
then it'll take that target list that

538
00:18:49,770 --> 00:18:51,690
you've given which could be domain

539
00:18:51,690 --> 00:18:53,760
admins and it will go out and it'll

540
00:18:53,760 --> 00:18:55,560
check the sessions for every every

541
00:18:55,560 --> 00:18:58,170
computer that it received and one thing

542
00:18:58,170 --> 00:19:00,540
one really important thing is if stealth

543
00:19:00,540 --> 00:19:03,650
is kind of something of priority and

544
00:19:03,650 --> 00:19:05,880
this function does reach out and it

545
00:19:05,880 --> 00:19:07,980
touches every single computer which can

546
00:19:07,980 --> 00:19:10,920
be very very noisy and will probably get

547
00:19:10,920 --> 00:19:12,810
you caught given that he knows what

548
00:19:12,810 --> 00:19:14,970
they're doing well it depends how many

549
00:19:14,970 --> 00:19:16,560
people know of networks that actually

550
00:19:16,560 --> 00:19:18,390
monitor SMB communication in that kind

551
00:19:18,390 --> 00:19:22,980
of way there some but yeah so there also

552
00:19:22,980 --> 00:19:25,380
is a stealth option which this used to

553
00:19:25,380 --> 00:19:27,840
be called invoke stealth user hunter and

554
00:19:27,840 --> 00:19:30,270
given the recent and to O rewrite of

555
00:19:30,270 --> 00:19:33,420
Power View it is now just an option

556
00:19:33,420 --> 00:19:35,970
within invoke user hunter and what this

557
00:19:35,970 --> 00:19:38,070
is takes advantage of is kind of an old

558
00:19:38,070 --> 00:19:40,080
red teaming trick and what this will do

559
00:19:40,080 --> 00:19:41,940
is will query Active Directory for all

560
00:19:41,940 --> 00:19:44,310
users and it'll reach out and it'll

561
00:19:44,310 --> 00:19:46,770
extract the home directory the script

562
00:19:46,770 --> 00:19:49,770
path in their profile path out of the

563
00:19:49,770 --> 00:19:51,930
the fields for that user and it'll

564
00:19:51,930 --> 00:19:55,530
attempt to identify the likely file

565
00:19:55,530 --> 00:19:56,519
servers that exist

566
00:19:56,519 --> 00:19:59,039
domaine and it'll take that and it will

567
00:19:59,039 --> 00:20:01,049
run through and it will check the

568
00:20:01,049 --> 00:20:02,369
sessions that are associated with that

569
00:20:02,369 --> 00:20:04,080
file server so what you're able to do is

570
00:20:04,080 --> 00:20:06,119
kind of pinpoint where people are

571
00:20:06,119 --> 00:20:08,309
logging from based on the fact that

572
00:20:08,309 --> 00:20:09,749
they've got a Drive map back to a file

573
00:20:09,749 --> 00:20:12,149
here and it gets you reasonable coverage

574
00:20:12,149 --> 00:20:13,739
and with a lot less traffic because

575
00:20:13,739 --> 00:20:15,209
instead of touching every single

576
00:20:15,209 --> 00:20:17,279
computer you're touching just the domain

577
00:20:17,279 --> 00:20:18,479
controller and you're touching just the

578
00:20:18,479 --> 00:20:20,940
file server now this is kind of what it

579
00:20:20,940 --> 00:20:23,339
looks like with on network the attacker

580
00:20:23,339 --> 00:20:25,619
box gets caesar home directories from

581
00:20:25,619 --> 00:20:27,779
the domain controller and then it will

582
00:20:27,779 --> 00:20:30,149
query for the sessions for the user

583
00:20:30,149 --> 00:20:31,589
group that you're interested in on the

584
00:20:31,589 --> 00:20:33,749
file server and inadvertently each

585
00:20:33,749 --> 00:20:35,369
workstation has a session map back to

586
00:20:35,369 --> 00:20:37,229
the file server so you're with just

587
00:20:37,229 --> 00:20:38,729
touching that file server you're able to

588
00:20:38,729 --> 00:20:42,029
determine what workstations or what user

589
00:20:42,029 --> 00:20:44,759
is on what workstation one note too is

590
00:20:44,759 --> 00:20:47,369
that this is also much faster so this

591
00:20:47,369 --> 00:20:49,019
tends to be kind of our go-to and if we

592
00:20:49,019 --> 00:20:50,519
can't find the results we need we might

593
00:20:50,519 --> 00:20:51,989
run through the more kind of noisy

594
00:20:51,989 --> 00:20:55,759
better coverage option and most if not

595
00:20:55,759 --> 00:20:58,889
the very high majority of organizations

596
00:20:58,889 --> 00:21:00,869
have terrible terrible privileged

597
00:21:00,869 --> 00:21:03,029
account hygiene and this makes our job

598
00:21:03,029 --> 00:21:05,070
really really easy because there's often

599
00:21:05,070 --> 00:21:07,649
a way to get elevated access that the

600
00:21:07,649 --> 00:21:09,479
org doesn't know about due to something

601
00:21:09,479 --> 00:21:12,409
like nested groups or group delegation

602
00:21:12,409 --> 00:21:15,239
so domain trusts are what you shouldn't

603
00:21:15,239 --> 00:21:16,919
trust Active Directory this is my

604
00:21:16,919 --> 00:21:18,899
favorite topic ever but first hey met do

605
00:21:18,899 --> 00:21:20,129
you know there's Clippy again do you

606
00:21:20,129 --> 00:21:23,549
know who this is I know yeah I swapped

607
00:21:23,549 --> 00:21:25,649
them out do you know what movie this is

608
00:21:25,649 --> 00:21:28,009
from or who these are

609
00:21:28,009 --> 00:21:32,700
yeah it's hack the planet bro come on so

610
00:21:32,700 --> 00:21:35,369
Active Directory domain trust 101 domain

611
00:21:35,369 --> 00:21:37,440
trust allow separate Active Directory

612
00:21:37,440 --> 00:21:39,329
domains to form interconnected

613
00:21:39,329 --> 00:21:41,159
authentication relationships it

614
00:21:41,159 --> 00:21:42,959
essentially just links up the

615
00:21:42,959 --> 00:21:44,789
authentication components for you know

616
00:21:44,789 --> 00:21:46,169
two domain controllers are a couple

617
00:21:46,169 --> 00:21:47,549
domain controllers and different domains

618
00:21:47,549 --> 00:21:50,129
it allows this authentication traffic to

619
00:21:50,129 --> 00:21:51,809
flow between them so you can do things

620
00:21:51,809 --> 00:21:54,239
like put users and one domain into

621
00:21:54,239 --> 00:21:55,769
groups and another or give certain

622
00:21:55,769 --> 00:21:58,099
groups access to different resources a

623
00:21:58,099 --> 00:22:00,839
trust allows for the possibility of

624
00:22:00,839 --> 00:22:03,269
privileged access between domains but it

625
00:22:03,269 --> 00:22:04,889
doesn't guarantee it I have to put a

626
00:22:04,889 --> 00:22:06,839
little star here because I'm gonna go

627
00:22:06,839 --> 00:22:08,489
over some of the city history stuff for

628
00:22:08,489 --> 00:22:10,440
the inner forest here in a few slides so

629
00:22:10,440 --> 00:22:12,059
there's kind of one caveat if you're

630
00:22:12,059 --> 00:22:16,019
within a forest boundary so Active

631
00:22:16,019 --> 00:22:17,279
Directory domain trust why does this

632
00:22:17,279 --> 00:22:17,610
matter

633
00:22:17,610 --> 00:22:18,990
I remember hearing about trust a few

634
00:22:18,990 --> 00:22:20,399
years ago there really wasn't much

635
00:22:20,399 --> 00:22:22,019
information out there I'm like okay

636
00:22:22,019 --> 00:22:23,580
there's a trust what can I actually do

637
00:22:23,580 --> 00:22:25,860
with it so red team's often will

638
00:22:25,860 --> 00:22:28,080
compromise accounts or machines in a

639
00:22:28,080 --> 00:22:30,539
domain that's trusted by their actual

640
00:22:30,539 --> 00:22:32,580
target so this might be a subsidiary

641
00:22:32,580 --> 00:22:34,500
this might be a dev domain this might be

642
00:22:34,500 --> 00:22:36,720
something else so this can allow

643
00:22:36,720 --> 00:22:38,879
operators to exploit these existing

644
00:22:38,879 --> 00:22:41,399
trust relationships and hop through kind

645
00:22:41,399 --> 00:22:43,320
of the trust mesh which will show some

646
00:22:43,320 --> 00:22:44,820
options you can actually do for that so

647
00:22:44,820 --> 00:22:46,860
you can either use this for persistence

648
00:22:46,860 --> 00:22:48,210
or you know kind of escalation to

649
00:22:48,210 --> 00:22:49,649
actually compromise the entire forest

650
00:22:49,649 --> 00:22:51,389
I've written a whole bunch of stuff so

651
00:22:51,389 --> 00:22:52,440
you can't really see it there these

652
00:22:52,440 --> 00:22:53,879
slides will actually be online or after

653
00:22:53,879 --> 00:22:55,549
the talk and will tweet out B size D see

654
00:22:55,549 --> 00:22:58,139
I've got a several different posts that

655
00:22:58,139 --> 00:23:00,059
kind of walk through in depth on Active

656
00:23:00,059 --> 00:23:03,330
Directory domain trust so Power View has

657
00:23:03,330 --> 00:23:05,039
a ton of functionality within it to

658
00:23:05,039 --> 00:23:07,379
enumerate and abuse domain and forest

659
00:23:07,379 --> 00:23:09,539
trust relationships so there's these

660
00:23:09,539 --> 00:23:10,889
local commandlets for like getting up

661
00:23:10,889 --> 00:23:12,330
for is getting up forest trust gonna

662
00:23:12,330 --> 00:23:13,620
force domain all that kind of stuff the

663
00:23:13,620 --> 00:23:15,929
weird awesome powershell naming

664
00:23:15,929 --> 00:23:19,139
convention a verb - noun but these can

665
00:23:19,139 --> 00:23:20,850
do things of saying like okay my current

666
00:23:20,850 --> 00:23:22,740
domain you know what domains actually

667
00:23:22,740 --> 00:23:24,570
have a trust with it but I think it's

668
00:23:24,570 --> 00:23:27,149
cool is that if it trust exists almost

669
00:23:27,149 --> 00:23:29,159
all the functions and Power View at

670
00:23:29,159 --> 00:23:30,539
least the ones that use kind of like the

671
00:23:30,539 --> 00:23:33,059
LDAP querying functionality can utilize

672
00:23:33,059 --> 00:23:35,429
a - domain flag so if there is a trust

673
00:23:35,429 --> 00:23:37,620
you can say okay give me all the users

674
00:23:37,620 --> 00:23:38,879
or all the groups or all the domain

675
00:23:38,879 --> 00:23:41,009
controllers in this foreign kind of

676
00:23:41,009 --> 00:23:43,379
trusted domain and super easy just -

677
00:23:43,379 --> 00:23:45,269
domain whatever the domain is you have

678
00:23:45,269 --> 00:23:46,769
to remember all the you know nested LDAP

679
00:23:46,769 --> 00:23:48,659
syntax or you know ad find or whatever

680
00:23:48,659 --> 00:23:49,529
else that people have been doing

681
00:23:49,529 --> 00:23:53,549
historically so no more ml test he did

682
00:23:53,549 --> 00:23:55,440
well NL test is awesome but also it's a

683
00:23:55,440 --> 00:23:57,750
pain so mapping the mesh one of the

684
00:23:57,750 --> 00:23:59,850
other things we'll start to do is if an

685
00:23:59,850 --> 00:24:02,100
organization has a large number of

686
00:24:02,100 --> 00:24:04,500
interconnected Active Directory domains

687
00:24:04,500 --> 00:24:06,570
it kind of forms this kind of mesh

688
00:24:06,570 --> 00:24:08,279
component which I'll show visualization

689
00:24:08,279 --> 00:24:10,409
here in a second there's a function in

690
00:24:10,409 --> 00:24:11,879
power view called invoke mapped domain

691
00:24:11,879 --> 00:24:14,100
trust what this will do is it will get

692
00:24:14,100 --> 00:24:16,289
all the domains that your current domain

693
00:24:16,289 --> 00:24:17,580
trust and I'll go to each one of those

694
00:24:17,580 --> 00:24:19,080
and say give me all those that those

695
00:24:19,080 --> 00:24:20,580
trusts and it kind of recursively goes

696
00:24:20,580 --> 00:24:22,139
throughout the entire mesh and getting

697
00:24:22,139 --> 00:24:23,670
every single kind of relation

698
00:24:23,670 --> 00:24:25,590
ship that it can enumerate there's also

699
00:24:25,590 --> 00:24:27,780
a - LDAP flag so by default it will

700
00:24:27,780 --> 00:24:29,250
actually try to reach out to the domains

701
00:24:29,250 --> 00:24:31,320
the LDAP brain functionality will

702
00:24:31,320 --> 00:24:32,850
actually go out and reflect it through

703
00:24:32,850 --> 00:24:34,320
your current domain controller so even

704
00:24:34,320 --> 00:24:35,970
if your kind of network segmented off if

705
00:24:35,970 --> 00:24:37,590
there is a trust you'll be able to get

706
00:24:37,590 --> 00:24:39,900
the information and also six dub one of

707
00:24:39,900 --> 00:24:42,270
the other authors on the power tools

708
00:24:42,270 --> 00:24:44,190
project has a tool called domain trust

709
00:24:44,190 --> 00:24:45,810
Explorer which can perform nodal

710
00:24:45,810 --> 00:24:48,300
analysis of this outputted data meaning

711
00:24:48,300 --> 00:24:50,010
you know centrality you know shortest

712
00:24:50,010 --> 00:24:51,690
paths that have this stuff I think the

713
00:24:51,690 --> 00:24:53,460
coolest thing is it can generate graph

714
00:24:53,460 --> 00:24:57,030
ml output of the raw data from invoke

715
00:24:57,030 --> 00:24:58,800
mapped domain trust you can then use

716
00:24:58,800 --> 00:25:00,420
open source you know graphing tools like

717
00:25:00,420 --> 00:25:02,370
we use wide because it's free there's a

718
00:25:02,370 --> 00:25:04,050
walk through of this whole thing on some

719
00:25:04,050 --> 00:25:06,390
of the blog post we have and you can

720
00:25:06,390 --> 00:25:10,110
turn what a domain setup looks like into

721
00:25:10,110 --> 00:25:11,940
a nice pretty graph that's awesome for

722
00:25:11,940 --> 00:25:13,380
out briefs to where a lot of these

723
00:25:13,380 --> 00:25:15,360
organizations actually don't know how

724
00:25:15,360 --> 00:25:16,800
the mesh actually works in their

725
00:25:16,800 --> 00:25:19,560
organization so it's these uh you see

726
00:25:19,560 --> 00:25:20,820
like the directional arrows so if

727
00:25:20,820 --> 00:25:22,200
there's a one-way trust it'll just be

728
00:25:22,200 --> 00:25:23,400
one arrow if that's bi-directional

729
00:25:23,400 --> 00:25:25,170
there's two and the colors actually mean

730
00:25:25,170 --> 00:25:27,240
something I think I usually forget it

731
00:25:27,240 --> 00:25:29,820
but I think red is parent/child Green is

732
00:25:29,820 --> 00:25:32,250
external and blue is cross link so we

733
00:25:32,250 --> 00:25:34,140
run this on pretty much every engagement

734
00:25:34,140 --> 00:25:35,790
in large enterprises and we can figure

735
00:25:35,790 --> 00:25:37,890
out oh if we popped out here and we want

736
00:25:37,890 --> 00:25:39,150
to get to crown jewels like how do we

737
00:25:39,150 --> 00:25:41,250
kind of hop through this domain

738
00:25:41,250 --> 00:25:44,250
authentication component again we often

739
00:25:44,250 --> 00:25:46,380
understand a organization's domain kind

740
00:25:46,380 --> 00:25:48,420
of trust mesh better than they do by the

741
00:25:48,420 --> 00:25:51,270
end of an engagement we've had clients

742
00:25:51,270 --> 00:25:52,920
actually ask us for the raw data and the

743
00:25:52,920 --> 00:25:54,420
graph ml and everything like we actually

744
00:25:54,420 --> 00:25:55,980
need this for a system many because we

745
00:25:55,980 --> 00:25:58,200
never had this before you know most

746
00:25:58,200 --> 00:25:59,760
places you know you you inherent

747
00:25:59,760 --> 00:26:01,110
networks and then you know you add in

748
00:26:01,110 --> 00:26:02,820
subsidiaries and you do whatever Ellison

749
00:26:02,820 --> 00:26:05,220
is this giant thing it's it's a

750
00:26:05,220 --> 00:26:06,630
legitimately hard problem to kind of

751
00:26:06,630 --> 00:26:09,480
visualize and manage so the mimic has

752
00:26:09,480 --> 00:26:12,510
trust pocalypse this is thanks to John

753
00:26:12,510 --> 00:26:14,550
Metcalf who's actually up here pyrotech

754
00:26:14,550 --> 00:26:16,170
in the front of the audience and also

755
00:26:16,170 --> 00:26:19,110
Benjamin Delpy gentle Kiwi so the author

756
00:26:19,110 --> 00:26:22,590
Mimi Katz and Sean worked out that Mimi

757
00:26:22,590 --> 00:26:24,330
Cutts golden tickets I hope most people

758
00:26:24,330 --> 00:26:26,700
hopefully are familiar with they can

759
00:26:26,700 --> 00:26:29,820
accept Sid histories this means is it's

760
00:26:29,820 --> 00:26:31,710
like a migration component for Active

761
00:26:31,710 --> 00:26:33,270
Directory to where there's a Sid history

762
00:26:33,270 --> 00:26:35,460
attribute in these user fields the

763
00:26:35,460 --> 00:26:36,880
basically says oh you used to

764
00:26:36,880 --> 00:26:38,530
be in this group here's like the city of

765
00:26:38,530 --> 00:26:41,200
the old group what this means is is is

766
00:26:41,200 --> 00:26:43,960
is if you compromise a domain controller

767
00:26:43,960 --> 00:26:47,890
in a child domain you know like you know

768
00:26:47,890 --> 00:26:49,270
somewhere in here right so not the

769
00:26:49,270 --> 00:26:50,470
forest group is somewhere in the child

770
00:26:50,470 --> 00:26:52,960
domain you can create a golden ticket

771
00:26:52,960 --> 00:26:55,630
that has enterprise admins for the force

772
00:26:55,630 --> 00:26:58,360
route in this in history and this can

773
00:26:58,360 --> 00:27:00,880
let you compromise the parent domain so

774
00:27:00,880 --> 00:27:02,710
most people don't realize that the

775
00:27:02,710 --> 00:27:04,870
domain is not the trust boundary the

776
00:27:04,870 --> 00:27:07,180
forest is the trust boundary but most

777
00:27:07,180 --> 00:27:08,980
places that we've actually assessed even

778
00:27:08,980 --> 00:27:10,990
the admins that have set stuff up really

779
00:27:10,990 --> 00:27:14,140
don't realize that the forest is the

780
00:27:14,140 --> 00:27:15,640
trust boundary so they'll do you know

781
00:27:15,640 --> 00:27:17,380
like a segmented dev domain or something

782
00:27:17,380 --> 00:27:18,910
like that well that's where all the we

783
00:27:18,910 --> 00:27:20,110
won't worry about securing that will

784
00:27:20,110 --> 00:27:21,190
have like secure you know whatever

785
00:27:21,190 --> 00:27:23,140
between it but that doesn't matter

786
00:27:23,140 --> 00:27:23,770
anymore

787
00:27:23,770 --> 00:27:26,230
because if you compromise any domain

788
00:27:26,230 --> 00:27:28,180
admin credentials in the entire forest

789
00:27:28,180 --> 00:27:30,280
you can compromise the entire forest

790
00:27:30,280 --> 00:27:32,530
this really kind of terrified me and

791
00:27:32,530 --> 00:27:34,300
blew my mind when I first realized it

792
00:27:34,300 --> 00:27:35,920
it's already changed the way we've

793
00:27:35,920 --> 00:27:37,570
operated on the last few engagements

794
00:27:37,570 --> 00:27:40,030
this is only a few months old but again

795
00:27:40,030 --> 00:27:41,980
domains are not the trust boundary

796
00:27:41,980 --> 00:27:44,440
forests are so if any domain controller

797
00:27:44,440 --> 00:27:45,790
and your entire enterprise is

798
00:27:45,790 --> 00:27:48,550
compromised ever you just have to keep

799
00:27:48,550 --> 00:27:50,200
calm and rebuild the entire forest

800
00:27:50,200 --> 00:27:52,150
according to Benjamin Delfy this is

801
00:27:52,150 --> 00:27:53,710
stolen directly from one of his tweets

802
00:27:53,710 --> 00:27:57,760
so like and again it's it's really super

803
00:27:57,760 --> 00:27:59,710
easy I've done this in the field it

804
00:27:59,710 --> 00:28:01,990
works and using invoke mimikatz from Joe

805
00:28:01,990 --> 00:28:03,850
Bialik that encompasses all some of the

806
00:28:03,850 --> 00:28:05,860
Damini has binaries you can do all this

807
00:28:05,860 --> 00:28:07,900
while staying off of this and if anyone

808
00:28:07,900 --> 00:28:10,030
thinks that attackers or adversaries

809
00:28:10,030 --> 00:28:11,950
have not already been doing this then

810
00:28:11,950 --> 00:28:16,480
you know I know what to do so those are

811
00:28:16,480 --> 00:28:18,130
kind of the really pretty quick kind of

812
00:28:18,130 --> 00:28:19,900
three of the cool areas that our group

813
00:28:19,900 --> 00:28:22,120
has made specific progress n ru parts of

814
00:28:22,120 --> 00:28:23,740
progress over the last couple years and

815
00:28:23,740 --> 00:28:25,630
now we wanted to bring it all together

816
00:28:25,630 --> 00:28:28,360
and talk about empire first things first

817
00:28:28,360 --> 00:28:30,820
the still not be possible if it was it

818
00:28:30,820 --> 00:28:31,990
was built on the shoulders of giants

819
00:28:31,990 --> 00:28:34,690
that you utilizes a lot of work from a

820
00:28:34,690 --> 00:28:37,000
lot of other people were no way claiming

821
00:28:37,000 --> 00:28:38,620
that we invented all this we did not

822
00:28:38,620 --> 00:28:40,570
invent Mimi cats or vocally any cats or

823
00:28:40,570 --> 00:28:42,790
you know anything else it's um the power

824
00:28:42,790 --> 00:28:44,860
sploit project from Mike Mac Raber Chris

825
00:28:44,860 --> 00:28:47,440
Campbell and Joe Bialik lead Christian

826
00:28:47,440 --> 00:28:50,040
TIFF Ken the Carlos Perez has been 10

827
00:28:50,040 --> 00:28:51,900
Shawn Metcalf subti everybody in the

828
00:28:51,900 --> 00:28:53,250
offensive power ship community has been

829
00:28:53,250 --> 00:28:53,850
awesome

830
00:28:53,850 --> 00:28:56,220
they've an enormous help and you know a

831
00:28:56,220 --> 00:28:57,870
lot of the functionality you'll see is

832
00:28:57,870 --> 00:28:59,610
built on the work of all these awesome

833
00:28:59,610 --> 00:29:03,600
guys I don't know how many of you are

834
00:29:03,600 --> 00:29:05,970
familiar with empire but so what does

835
00:29:05,970 --> 00:29:09,360
empire empire is a fully functional post

836
00:29:09,360 --> 00:29:12,090
exploitation agent written completely in

837
00:29:12,090 --> 00:29:14,040
PowerShell so operates completely in

838
00:29:14,040 --> 00:29:16,799
memory and it's kind of a goal was to

839
00:29:16,799 --> 00:29:19,200
provide a modular framework to be able

840
00:29:19,200 --> 00:29:22,110
to integrate some of the offensive tool

841
00:29:22,110 --> 00:29:24,480
sets and projects that have kind of come

842
00:29:24,480 --> 00:29:25,919
out in the PowerShell community recently

843
00:29:25,919 --> 00:29:29,850
and it's kind of in conjunction with

844
00:29:29,850 --> 00:29:32,040
that it's to help defenders prepare for

845
00:29:32,040 --> 00:29:34,710
PowerShell tests so a lot of defenders

846
00:29:34,710 --> 00:29:36,270
aren't prepared for PowerShell attacks

847
00:29:36,270 --> 00:29:38,549
and a lot of people don't know what it

848
00:29:38,549 --> 00:29:40,290
looks like on their network and a lot of

849
00:29:40,290 --> 00:29:41,910
them don't do command-line auditing so

850
00:29:41,910 --> 00:29:44,190
it's really easy to run and operate

851
00:29:44,190 --> 00:29:45,870
completely in PowerShell without getting

852
00:29:45,870 --> 00:29:47,820
caught and kind of the goal of the

853
00:29:47,820 --> 00:29:49,350
project was to change that to see

854
00:29:49,350 --> 00:29:51,179
Howard's to show them how easy it is for

855
00:29:51,179 --> 00:29:52,799
somebody do get into a network and

856
00:29:52,799 --> 00:29:54,570
operate completely in PowerShell while

857
00:29:54,570 --> 00:29:56,429
giving them and cares are compromised to

858
00:29:56,429 --> 00:29:58,679
what a powerful attack attack might look

859
00:29:58,679 --> 00:30:02,640
like so Empire has a few methods of

860
00:30:02,640 --> 00:30:06,660
execution it's post post exploitation so

861
00:30:06,660 --> 00:30:08,580
it doesn't throw exploits and if you can

862
00:30:08,580 --> 00:30:12,059
run a command on a target you can launch

863
00:30:12,059 --> 00:30:14,220
an empire agent so it starts out as a

864
00:30:14,220 --> 00:30:17,850
small stager which is implemented either

865
00:30:17,850 --> 00:30:20,160
as just a manual command you can

866
00:30:20,160 --> 00:30:22,309
manually execute it so one-liner um

867
00:30:22,309 --> 00:30:25,020
encoded command or you can export it out

868
00:30:25,020 --> 00:30:30,720
as a bat or a macro or VBS to deliver in

869
00:30:30,720 --> 00:30:33,059
a client-side attack and the listeners

870
00:30:33,059 --> 00:30:35,760
they sit server-side the service is

871
00:30:35,760 --> 00:30:38,100
written in Python and it stores all the

872
00:30:38,100 --> 00:30:40,559
configurations and a back-end sequel

873
00:30:40,559 --> 00:30:42,630
Lite database and so it's really easy to

874
00:30:42,630 --> 00:30:44,669
track and as things come in and as the

875
00:30:44,669 --> 00:30:47,130
listeners catch your agents it's really

876
00:30:47,130 --> 00:30:48,690
easy to kind of track the information

877
00:30:48,690 --> 00:30:51,299
that's received from those agents cool

878
00:30:51,299 --> 00:30:53,100
and we'll go over the modular components

879
00:30:53,100 --> 00:30:54,540
here in a second but the stagers are

880
00:30:54,540 --> 00:30:56,910
actually modular eyes so I'm KC's gonna

881
00:30:56,910 --> 00:30:58,770
sub T submitted like a new one for each

882
00:30:58,770 --> 00:31:00,480
ta stuff to us and it's very easy to

883
00:31:00,480 --> 00:31:01,890
just kind of like drag-and-drop and like

884
00:31:01,890 --> 00:31:03,240
customize stuff if you guys have

885
00:31:03,240 --> 00:31:03,789
internal

886
00:31:03,789 --> 00:31:06,340
you want to use real quick on the empire

887
00:31:06,340 --> 00:31:08,470
staging process we thought a lot about

888
00:31:08,470 --> 00:31:10,179
this you know we messed up certain

889
00:31:10,179 --> 00:31:11,559
components there might have been an RC e

890
00:31:11,559 --> 00:31:13,179
those disclosed to us that we trade to

891
00:31:13,179 --> 00:31:16,389
fix which we did fix but Empire staging

892
00:31:16,389 --> 00:31:18,309
that little one-liner the map described

893
00:31:18,309 --> 00:31:19,690
is gonna reach out to control server

894
00:31:19,690 --> 00:31:21,639
it's gonna get a little blob of a few

895
00:31:21,639 --> 00:31:25,210
skated text that text is a are sorry

896
00:31:25,210 --> 00:31:26,769
that text is going to be a key

897
00:31:26,769 --> 00:31:29,169
negotiation stager that has an aes key

898
00:31:29,169 --> 00:31:32,100
embedded within it that a yes key is

899
00:31:32,100 --> 00:31:34,539
static per server it's assumed to be

900
00:31:34,539 --> 00:31:36,489
recoverable and burned by defenders

901
00:31:36,489 --> 00:31:38,259
that's not what the security Russell on

902
00:31:38,259 --> 00:31:40,389
the client is then going to generate

903
00:31:40,389 --> 00:31:43,749
private public keys and then wrap up so

904
00:31:43,749 --> 00:31:45,070
my kind of staging configuration

905
00:31:45,070 --> 00:31:46,960
information with that public key and

906
00:31:46,960 --> 00:31:47,889
send it back to the server

907
00:31:47,889 --> 00:31:50,229
the the server is going to use that

908
00:31:50,229 --> 00:31:53,320
public key and Crips and Amaya's AES

909
00:31:53,320 --> 00:31:55,149
session key and some like epoch and like

910
00:31:55,149 --> 00:31:56,590
kind of synchronization components and

911
00:31:56,590 --> 00:31:58,330
send it back to the client the clients

912
00:31:58,330 --> 00:31:59,739
going to decrypt it post some more

913
00:31:59,739 --> 00:32:01,509
system foe back to the server and then

914
00:32:01,509 --> 00:32:03,700
it's going to finally get the agent this

915
00:32:03,700 --> 00:32:05,529
scheme is called encrypted key exchange

916
00:32:05,529 --> 00:32:08,529
it uses you know symmetric encryption to

917
00:32:08,529 --> 00:32:11,289
exchange asymmetric encryption which is

918
00:32:11,289 --> 00:32:12,970
then used to exchange symmetric

919
00:32:12,970 --> 00:32:14,679
encryption the point with this that I

920
00:32:14,679 --> 00:32:16,149
think is cool is it offers perfect

921
00:32:16,149 --> 00:32:18,249
forward secrecy so even if defenders

922
00:32:18,249 --> 00:32:20,229
packet capture this entire process they

923
00:32:20,229 --> 00:32:22,629
can't recover the randomized AES key and

924
00:32:22,629 --> 00:32:25,210
every agent has a completely different

925
00:32:25,210 --> 00:32:27,729
AES key per box so even if people memory

926
00:32:27,729 --> 00:32:29,769
image the per you know a compromised

927
00:32:29,769 --> 00:32:32,200
system they'll get you know the the key

928
00:32:32,200 --> 00:32:33,729
for a particular agent but they won't be

929
00:32:33,729 --> 00:32:36,399
able to decrypt the entire mesh I first

930
00:32:36,399 --> 00:32:37,960
met do you know what this is it's Clippy

931
00:32:37,960 --> 00:32:41,139
again you have no idea what that is

932
00:32:41,139 --> 00:32:42,639
that's a captain crunch whistle do you

933
00:32:42,639 --> 00:32:46,899
happen to know what tone it uh no no

934
00:32:46,899 --> 00:32:51,820
2600 man no is that in a cereal box yes

935
00:32:51,820 --> 00:32:53,679
it was in the cereal box man it was used

936
00:32:53,679 --> 00:32:55,239
for the control of phone systems is

937
00:32:55,239 --> 00:32:58,450
original phone phreaking stuff okay so

938
00:32:58,450 --> 00:33:00,690
the module categories for Empire

939
00:33:00,690 --> 00:33:02,739
everything again I mentioned super

940
00:33:02,739 --> 00:33:05,019
modular drag-and-drop you don't know you

941
00:33:05,019 --> 00:33:06,460
don't have to know how to use PowerShell

942
00:33:06,460 --> 00:33:08,859
to actually use Empire which i think is

943
00:33:08,859 --> 00:33:10,749
kind of a cool thing so we have to

944
00:33:10,749 --> 00:33:12,460
separate it out we have a code execution

945
00:33:12,460 --> 00:33:13,989
you know shell code injection we

946
00:33:13,989 --> 00:33:15,519
actually have a way to easily pass

947
00:33:15,519 --> 00:33:17,059
sessions to

948
00:33:17,059 --> 00:33:19,039
a cobalt strike or Metasploit or another

949
00:33:19,039 --> 00:33:21,499
control server you have keyloggers

950
00:33:21,499 --> 00:33:23,690
screenshots you know host management

951
00:33:23,690 --> 00:33:25,129
there's over a hundred different modules

952
00:33:25,129 --> 00:33:26,990
one of my favorite is troll sploit at

953
00:33:26,990 --> 00:33:28,429
the bottom that's a natural set of

954
00:33:28,429 --> 00:33:29,749
modules it does things like change

955
00:33:29,749 --> 00:33:32,419
people's backgrounds and also uses a was

956
00:33:32,419 --> 00:33:34,399
it can play thunderstruck by opening up

957
00:33:34,399 --> 00:33:36,799
a hidden IE window opening opening up a

958
00:33:36,799 --> 00:33:38,570
video and then it'll emulate the key

959
00:33:38,570 --> 00:33:40,100
press to turn your volume all the way up

960
00:33:40,100 --> 00:33:41,600
so they can't actually turn it down and

961
00:33:41,600 --> 00:33:42,620
it'll play thunderstruck in the

962
00:33:42,620 --> 00:33:45,259
background so and fun fact you may be

963
00:33:45,259 --> 00:33:47,360
able to task any module to all of your

964
00:33:47,360 --> 00:33:48,860
agents at one time so if you wanted to

965
00:33:48,860 --> 00:33:50,450
Thunderstrike all the incident response

966
00:33:50,450 --> 00:33:51,710
department you totally could do that

967
00:33:51,710 --> 00:33:53,779
with environment and there's a ton of

968
00:33:53,779 --> 00:33:55,820
like persistent stuff you know again a

969
00:33:55,820 --> 00:33:57,409
lot of this draws off of like the power

970
00:33:57,409 --> 00:33:59,659
sploit project w my persistence you know

971
00:33:59,659 --> 00:34:01,070
run key stuff we have alternate data

972
00:34:01,070 --> 00:34:03,320
streams we have a lot of cool stuff then

973
00:34:03,320 --> 00:34:04,460
all the Power View and power up

974
00:34:04,460 --> 00:34:06,200
functionality is actually encapsulated

975
00:34:06,200 --> 00:34:09,560
within it I think this is the coolest

976
00:34:09,560 --> 00:34:11,300
thing with Empire and again we're we're

977
00:34:11,300 --> 00:34:13,190
not claiming that we're writing some

978
00:34:13,190 --> 00:34:15,230
super awesome advanced undetectable Maur

979
00:34:15,230 --> 00:34:17,149
that's not the point and we didn't do

980
00:34:17,149 --> 00:34:18,469
that even if we wanted to claim it was

981
00:34:18,469 --> 00:34:23,540
the point with Empire you can develop

982
00:34:23,540 --> 00:34:26,329
stuff and adapt extremely quickly so

983
00:34:26,329 --> 00:34:27,589
there's a huge amount of PowerShell

984
00:34:27,589 --> 00:34:28,668
stuff already out there like we

985
00:34:28,668 --> 00:34:30,020
mentioned so if you can write

986
00:34:30,020 --> 00:34:32,000
functionality of PowerShell you can drop

987
00:34:32,000 --> 00:34:34,159
it in a module in a custom module and

988
00:34:34,159 --> 00:34:35,359
have that already loaded up for your

989
00:34:35,359 --> 00:34:37,310
agents so there's kind of a metadata

990
00:34:37,310 --> 00:34:40,639
container kind of in the MSF style type

991
00:34:40,639 --> 00:34:42,260
thing so you have your script embedded

992
00:34:42,260 --> 00:34:44,300
in it you have you know authorship and

993
00:34:44,300 --> 00:34:45,379
description all those types of things

994
00:34:45,379 --> 00:34:47,300
but we also have options for does this

995
00:34:47,300 --> 00:34:49,099
module need administrator privileges is

996
00:34:49,099 --> 00:34:52,219
it OPSEC safe so does it drop a file to

997
00:34:52,219 --> 00:34:53,780
disk or does it display something to

998
00:34:53,780 --> 00:34:55,550
users and they were like prompt you you

999
00:34:55,550 --> 00:34:56,899
know an additional kind of safety check

1000
00:34:56,899 --> 00:35:00,650
so we really built this tool to kind of

1001
00:35:00,650 --> 00:35:02,240
play into the tradecraft that we tend to

1002
00:35:02,240 --> 00:35:06,349
do for engagements so we'll go over to

1003
00:35:06,349 --> 00:35:08,450
the modules really quickly if you guys

1004
00:35:08,450 --> 00:35:10,339
are more interested in empire our be

1005
00:35:10,339 --> 00:35:12,560
size Las Vegas presentation goes into

1006
00:35:12,560 --> 00:35:13,940
the stuff a lot more depth or again just

1007
00:35:13,940 --> 00:35:15,680
talk to me outside and I won't stop

1008
00:35:15,680 --> 00:35:18,980
talking about it so the coolest module

1009
00:35:18,980 --> 00:35:21,290
outside of Mimi Katz of course is PS

1010
00:35:21,290 --> 00:35:23,210
inject so one of the things we're

1011
00:35:23,210 --> 00:35:25,339
realizing building this agent was it was

1012
00:35:25,339 --> 00:35:26,869
like well okay I'm gonna block down

1013
00:35:26,869 --> 00:35:28,609
PowerShell dideoxy I'm gonna throw into

1014
00:35:28,609 --> 00:35:29,720
app Locker so there

1015
00:35:29,720 --> 00:35:30,590
or I don't have to worry about

1016
00:35:30,590 --> 00:35:32,480
powershell malware anymore right there's

1017
00:35:32,480 --> 00:35:33,890
a lot of admins that tend to think like

1018
00:35:33,890 --> 00:35:35,930
that so we realized it'd be really nice

1019
00:35:35,930 --> 00:35:38,359
to have our powershell agent running and

1020
00:35:38,359 --> 00:35:40,310
processes that are not PowerShell dot

1021
00:35:40,310 --> 00:35:44,000
exe so how does this work a few months

1022
00:35:44,000 --> 00:35:46,849
ago in the spring Jes and I gave a talk

1023
00:35:46,849 --> 00:35:49,160
at Carolina con called drilling deep or

1024
00:35:49,160 --> 00:35:52,400
deeper with Dale's power tools and in it

1025
00:35:52,400 --> 00:35:54,680
justin released a tool called invoke PS

1026
00:35:54,680 --> 00:35:57,530
injector it wraps up Li Christians or

1027
00:35:57,530 --> 00:35:59,630
Tiff's kins project called unmanaged

1028
00:35:59,630 --> 00:36:01,849
PowerShell what this does it was a C

1029
00:36:01,849 --> 00:36:04,160
program that will load up the manage

1030
00:36:04,160 --> 00:36:07,400
dotnet run space in AC program start a

1031
00:36:07,400 --> 00:36:08,690
PowerShell object and then invoke

1032
00:36:08,690 --> 00:36:10,730
whatever code you want so justin

1033
00:36:10,730 --> 00:36:13,010
transform this into a reflective DLL and

1034
00:36:13,010 --> 00:36:14,599
then embedded it all in a powershell

1035
00:36:14,599 --> 00:36:16,609
script so if this functionality behind

1036
00:36:16,609 --> 00:36:19,220
the scenes does is it'll use a

1037
00:36:19,220 --> 00:36:21,470
powershell script to inject a dll into

1038
00:36:21,470 --> 00:36:23,450
another process which will load up the

1039
00:36:23,450 --> 00:36:26,000
dotnet run space and it'll patch in like

1040
00:36:26,000 --> 00:36:27,530
our little key negotiation stage your

1041
00:36:27,530 --> 00:36:29,300
component and then load up our agent

1042
00:36:29,300 --> 00:36:30,410
running in something that's not

1043
00:36:30,410 --> 00:36:32,030
PowerShell which i think is pretty cool

1044
00:36:32,030 --> 00:36:33,890
so we don't have process migration but

1045
00:36:33,890 --> 00:36:35,599
we at least have process injection for

1046
00:36:35,599 --> 00:36:38,630
the entire agent this is kind of what

1047
00:36:38,630 --> 00:36:39,740
will look like we've got a nice little

1048
00:36:39,740 --> 00:36:42,080
welcome to the internet unicorn but a PS

1049
00:36:42,080 --> 00:36:44,780
injector you know injecting this DLL

1050
00:36:44,780 --> 00:36:46,339
which is actually he termed reflective

1051
00:36:46,339 --> 00:36:48,770
pick into another process it loads up

1052
00:36:48,770 --> 00:36:50,540
the done and assembly kicks off the

1053
00:36:50,540 --> 00:36:51,980
download cradle and then we have our

1054
00:36:51,980 --> 00:36:53,990
agent running in something like Alsace

1055
00:36:53,990 --> 00:36:55,460
which actually works which really

1056
00:36:55,460 --> 00:36:56,630
surprised me I was expecting everything

1057
00:36:56,630 --> 00:36:58,400
to crash but if you have the entire

1058
00:36:58,400 --> 00:37:00,470
dotnet assembly is loaded up into LCS

1059
00:37:00,470 --> 00:37:02,210
it's probably a pretty big indicator of

1060
00:37:02,210 --> 00:37:03,770
compromise because why would you ever

1061
00:37:03,770 --> 00:37:05,690
possibly do that we actually go over

1062
00:37:05,690 --> 00:37:07,460
some defensive stuff in the b-sides LV

1063
00:37:07,460 --> 00:37:10,040
talk they're a are a lot of host

1064
00:37:10,040 --> 00:37:12,050
indicators that Empire will drop so

1065
00:37:12,050 --> 00:37:14,839
again not trying to fool or get by

1066
00:37:14,839 --> 00:37:17,150
manual defenders our big goal would be

1067
00:37:17,150 --> 00:37:19,940
let's get by as many kind of automated

1068
00:37:19,940 --> 00:37:23,300
solutions as we can to push clients to

1069
00:37:23,300 --> 00:37:25,460
doing you know the host memory analysis

1070
00:37:25,460 --> 00:37:27,080
and actually doing that triage and

1071
00:37:27,080 --> 00:37:28,790
getting to that point if you do get to

1072
00:37:28,790 --> 00:37:30,890
that point it's a scripting language so

1073
00:37:30,890 --> 00:37:32,690
guess what the script is entirely in

1074
00:37:32,690 --> 00:37:34,970
memory if you dump if you just do a

1075
00:37:34,970 --> 00:37:36,260
memory dump of it you can get the entire

1076
00:37:36,260 --> 00:37:38,180
agent it's not trying to hide there's no

1077
00:37:38,180 --> 00:37:40,490
off you station if you do command line

1078
00:37:40,490 --> 00:37:42,320
on the script block logging and you

1079
00:37:42,320 --> 00:37:42,670
power

1080
00:37:42,670 --> 00:37:44,380
five and you turn it all the way up

1081
00:37:44,380 --> 00:37:46,090
you're gonna get the entire agent you

1082
00:37:46,090 --> 00:37:48,280
know Specht out to the event logging to

1083
00:37:48,280 --> 00:37:49,960
us we don't view that as a huge huge

1084
00:37:49,960 --> 00:37:51,850
problem because if a client actually

1085
00:37:51,850 --> 00:37:53,950
correlates all those logs like we're

1086
00:37:53,950 --> 00:37:55,180
trying to train them to get to that

1087
00:37:55,180 --> 00:37:57,190
point so at least you know we think

1088
00:37:57,190 --> 00:37:57,940
that's a good thing

1089
00:37:57,940 --> 00:38:02,520
personally so as it was mentioned before

1090
00:38:02,520 --> 00:38:04,930
Empire contains a partial version of

1091
00:38:04,930 --> 00:38:07,660
Mimi Katz and it's just it loads in a

1092
00:38:07,660 --> 00:38:10,680
basically four encoded DLL of Mimi Katz

1093
00:38:10,680 --> 00:38:13,690
obviously thanks to Benjamin Delpy and

1094
00:38:13,690 --> 00:38:15,610
Joseph Bialik for the implementation a

1095
00:38:15,610 --> 00:38:19,120
lot of people use Mimi Katz specifically

1096
00:38:19,120 --> 00:38:21,820
for dumping creds for memory and there's

1097
00:38:21,820 --> 00:38:24,130
so much more goodness than what a lot of

1098
00:38:24,130 --> 00:38:25,840
people will realize and you can do

1099
00:38:25,840 --> 00:38:27,820
things golden ticket silver tickets a

1100
00:38:27,820 --> 00:38:29,400
lot of the pass the hash functionality

1101
00:38:29,400 --> 00:38:31,630
skeleton keys and one of the most recent

1102
00:38:31,630 --> 00:38:33,940
ones DC sink which is nauseatingly

1103
00:38:33,940 --> 00:38:39,040
amazing and so when you use Mimi Katz

1104
00:38:39,040 --> 00:38:41,860
within Empire it will Empire has an

1105
00:38:41,860 --> 00:38:43,920
internal credential store so it'll store

1106
00:38:43,920 --> 00:38:46,600
hashes and plaintext passwords of all

1107
00:38:46,600 --> 00:38:48,550
the credentials that you dumped so it'll

1108
00:38:48,550 --> 00:38:49,840
take the output and I'll parse it and

1109
00:38:49,840 --> 00:38:51,760
I'll throw it in this database and you

1110
00:38:51,760 --> 00:38:54,190
can use it will assign a cred ID to each

1111
00:38:54,190 --> 00:38:56,350
credential and then within the modules

1112
00:38:56,350 --> 00:38:58,180
you can specify could ID and just

1113
00:38:58,180 --> 00:39:00,490
automatically run that module using that

1114
00:39:00,490 --> 00:39:02,140
set of credentials so it makes it really

1115
00:39:02,140 --> 00:39:04,480
easy to kind of cross correlate the

1116
00:39:04,480 --> 00:39:07,000
credentials you have to and the modules

1117
00:39:07,000 --> 00:39:09,130
that you want to use to to operate that

1118
00:39:09,130 --> 00:39:10,750
whether that be lateral spread or

1119
00:39:10,750 --> 00:39:12,820
whatever you may have them so for

1120
00:39:12,820 --> 00:39:14,260
example you could use this as like a

1121
00:39:14,260 --> 00:39:15,850
golden ticket catalog after you dumped a

1122
00:39:15,850 --> 00:39:17,770
bunch of DCs you can just go through and

1123
00:39:17,770 --> 00:39:19,420
it'll pull the CID hit you'll pull the

1124
00:39:19,420 --> 00:39:20,650
domain Sid and all the kind of

1125
00:39:20,650 --> 00:39:22,090
configuration information and you can

1126
00:39:22,090 --> 00:39:23,650
just say cred ID golden ticket this

1127
00:39:23,650 --> 00:39:26,170
domain and then have all your access so

1128
00:39:26,170 --> 00:39:28,900
now you're gonna do those a picture

1129
00:39:28,900 --> 00:39:31,240
we're gonna do our demo standard gods

1130
00:39:31,240 --> 00:39:32,890
versus humans I promise I didn't change

1131
00:39:32,890 --> 00:39:38,860
the video Matt okay so this is about a

1132
00:39:38,860 --> 00:39:40,330
ten minute video and after that we're

1133
00:39:40,330 --> 00:39:42,520
pretty much done so kind of setting the

1134
00:39:42,520 --> 00:39:44,470
stage with this you know we we fished a

1135
00:39:44,470 --> 00:39:46,120
user they were local admin and we

1136
00:39:46,120 --> 00:39:48,430
actually ran bypass UAC so we had to

1137
00:39:48,430 --> 00:39:50,380
implement our own bypass UAC purely in

1138
00:39:50,380 --> 00:39:50,830
PowerShell

1139
00:39:50,830 --> 00:39:53,350
luckily most of the kind of you know the

1140
00:39:53,350 --> 00:39:54,910
deal hijack functionality and everything

1141
00:39:54,910 --> 00:39:55,980
was you

1142
00:39:55,980 --> 00:39:57,450
licensed and Metasploit and everything

1143
00:39:57,450 --> 00:39:58,890
like that so we can kind of adapt you

1144
00:39:58,890 --> 00:40:00,570
know the hijacked locations for it so

1145
00:40:00,570 --> 00:40:01,920
masking and their rate through the rest

1146
00:40:01,920 --> 00:40:03,840
of the video that's gonna show doing a

1147
00:40:03,840 --> 00:40:06,210
multi-part domain compromise using

1148
00:40:06,210 --> 00:40:09,210
Empire entirely hopefully you guys can

1149
00:40:09,210 --> 00:40:11,609
kind of see that I know the yeah you can

1150
00:40:11,609 --> 00:40:14,070
probably explain it okay so yeah the way

1151
00:40:14,070 --> 00:40:16,020
this starts out is Yoanna is a normal

1152
00:40:16,020 --> 00:40:20,130
user elevate dump their creds as you can

1153
00:40:20,130 --> 00:40:21,510
see this is running Mimi cuts and

1154
00:40:21,510 --> 00:40:23,880
everything's run it the big job they run

1155
00:40:23,880 --> 00:40:26,250
is jobs so their background and as you

1156
00:40:26,250 --> 00:40:27,990
can see here the all the credentials are

1157
00:40:27,990 --> 00:40:29,640
stored in the credential store and

1158
00:40:29,640 --> 00:40:31,950
they're each assigned a cut ID and you

1159
00:40:31,950 --> 00:40:35,340
can use that here so in the situation

1160
00:40:35,340 --> 00:40:37,800
you know we we hit a box with DFM logged

1161
00:40:37,800 --> 00:40:40,260
in but we see that there are credentials

1162
00:40:40,260 --> 00:40:42,600
in memory for a user named cauri and so

1163
00:40:42,600 --> 00:40:44,880
you can use a module for gannett user

1164
00:40:44,880 --> 00:40:46,440
which is in power view to get the

1165
00:40:46,440 --> 00:40:48,450
information or what groups this Cori

1166
00:40:48,450 --> 00:40:50,190
user which we don't know who he is

1167
00:40:50,190 --> 00:40:53,040
what he might be a part of as you can

1168
00:40:53,040 --> 00:40:55,650
see here Corey is a workstation admin so

1169
00:40:55,650 --> 00:40:58,320
he likely logged in or off that box to

1170
00:40:58,320 --> 00:40:59,910
do some sort of maintenance on some

1171
00:40:59,910 --> 00:41:02,730
random PC that some of elevated user and

1172
00:41:02,730 --> 00:41:05,430
so now we've got what we might consider

1173
00:41:05,430 --> 00:41:08,100
an elevated user within the network who

1174
00:41:08,100 --> 00:41:09,990
might have administrative access to all

1175
00:41:09,990 --> 00:41:12,180
of the workstations and we can kick off

1176
00:41:12,180 --> 00:41:18,030
a user hunter for that specific user and

1177
00:41:18,030 --> 00:41:19,980
it takes a few seconds sir so by default

1178
00:41:19,980 --> 00:41:22,530
it's on its umpires fully asynchronous

1179
00:41:22,530 --> 00:41:24,480
so to me like right now it's like a 5 so

1180
00:41:24,480 --> 00:41:27,000
I can call that to get the task and so

1181
00:41:27,000 --> 00:41:28,350
you'll see it's got a session from this

1182
00:41:28,350 --> 00:41:30,420
specific IP and that's the user so when

1183
00:41:30,420 --> 00:41:32,010
user Hunter hunter kicked off we saw

1184
00:41:32,010 --> 00:41:33,630
what we were looking for users then and

1185
00:41:33,630 --> 00:41:35,580
domain admins group and we saw that

1186
00:41:35,580 --> 00:41:37,560
we'll as a domain admin and he had the

1187
00:41:37,560 --> 00:41:39,990
session from this IP and so we're able

1188
00:41:39,990 --> 00:41:43,410
to verify that this Corey user which we

1189
00:41:43,410 --> 00:41:47,070
now have creds for could potentially be

1190
00:41:47,070 --> 00:41:49,080
a local admin I'm it's always good to

1191
00:41:49,080 --> 00:41:50,850
verify before you go and try and pop the

1192
00:41:50,850 --> 00:41:53,730
box it's just good tradecraft to make

1193
00:41:53,730 --> 00:41:54,869
sure that what you're getting ready to

1194
00:41:54,869 --> 00:41:56,100
hit you're actually going to be able to

1195
00:41:56,100 --> 00:41:59,210
hit instead of I'm just going after the

1196
00:41:59,210 --> 00:42:01,500
local administrators

1197
00:42:01,500 --> 00:42:04,350
both machine without needing privileged

1198
00:42:04,350 --> 00:42:05,880
access for it so I think it's one of the

1199
00:42:05,880 --> 00:42:08,730
cooler functions economy and he's

1200
00:42:08,730 --> 00:42:10,140
sitting there recurse flag which means

1201
00:42:10,140 --> 00:42:11,910
any results that come back I need the

1202
00:42:11,910 --> 00:42:13,980
results that are groups it's gonna go to

1203
00:42:13,980 --> 00:42:15,450
Active Directory and get all the members

1204
00:42:15,450 --> 00:42:16,800
of those groups and workers all the way

1205
00:42:16,800 --> 00:42:18,720
down to get you the set of affected

1206
00:42:18,720 --> 00:42:20,940
users who could administer that machine

1207
00:42:20,940 --> 00:42:22,620
yep so we can stay at workstation admins

1208
00:42:22,620 --> 00:42:24,420
is in the local administrative group on

1209
00:42:24,420 --> 00:42:27,090
that workstation and it'll with South

1210
00:42:27,090 --> 00:42:28,530
users in the workstation admins group

1211
00:42:28,530 --> 00:42:31,350
and Cori happens to be that potential

1212
00:42:31,350 --> 00:42:33,930
user that we've got so we are now able

1213
00:42:33,930 --> 00:42:37,440
to laterally move over to that box using

1214
00:42:37,440 --> 00:42:39,810
WMI which is amazing it's our default

1215
00:42:39,810 --> 00:42:41,430
for lateral movement I'm it's really

1216
00:42:41,430 --> 00:42:44,760
clean and enjoy save and it's just a

1217
00:42:44,760 --> 00:42:45,960
really good way so as you can see here

1218
00:42:45,960 --> 00:42:47,490
and you can set the listener and then

1219
00:42:47,490 --> 00:42:49,110
you set the computer name to either the

1220
00:42:49,110 --> 00:42:52,380
host name or the IP and then you can see

1221
00:42:52,380 --> 00:42:53,910
we set the karate to four which is the

1222
00:42:53,910 --> 00:42:55,590
credential store for the plaintext

1223
00:42:55,590 --> 00:43:07,230
passwords of Cori you run this you'll

1224
00:43:07,230 --> 00:43:08,760
get an agent back from that box that we

1225
00:43:08,760 --> 00:43:10,740
just determined that we wanted to go and

1226
00:43:10,740 --> 00:43:13,290
target and we are running as an elevated

1227
00:43:13,290 --> 00:43:15,690
user on that box that has a domain admin

1228
00:43:15,690 --> 00:43:18,780
logged in and so now what's really nice

1229
00:43:18,780 --> 00:43:20,490
is you can PS will list all the

1230
00:43:20,490 --> 00:43:22,440
processes running and you can filter to

1231
00:43:22,440 --> 00:43:23,610
what you want to inject so we've got

1232
00:43:23,610 --> 00:43:25,560
kind of a list of safe processes to

1233
00:43:25,560 --> 00:43:28,200
inject into DW and being one of them so

1234
00:43:28,200 --> 00:43:30,210
you can filter for what processes are

1235
00:43:30,210 --> 00:43:32,280
running with a name DW and by typing PS

1236
00:43:32,280 --> 00:43:34,980
DW m and so it's really a quick and easy

1237
00:43:34,980 --> 00:43:36,360
way to pick what process you want to

1238
00:43:36,360 --> 00:43:38,940
inject into and you can set use PS

1239
00:43:38,940 --> 00:43:40,560
inject which is an alias for the PS

1240
00:43:40,560 --> 00:43:42,420
inject module set your listener which is

1241
00:43:42,420 --> 00:43:45,960
test and then the process ID and then if

1242
00:43:45,960 --> 00:43:47,250
you go ahead and run it what it'll do is

1243
00:43:47,250 --> 00:43:48,690
it'll do and what Will's talking about

1244
00:43:48,690 --> 00:43:51,150
previously the invoked is injecting it

1245
00:43:51,150 --> 00:43:57,150
will inject a Empire agent into DW M you

1246
00:43:57,150 --> 00:43:58,830
can see that we've got a process running

1247
00:43:58,830 --> 00:44:01,590
as we'll which is a domain admin and on

1248
00:44:01,590 --> 00:44:07,110
that box within ewm and now what you'll

1249
00:44:07,110 --> 00:44:12,420
be able to do is yep so you'll get the

1250
00:44:12,420 --> 00:44:14,640
domain controllers just it's a good way

1251
00:44:14,640 --> 00:44:15,450
to verify that

1252
00:44:15,450 --> 00:44:18,180
actually running his domain admin given

1253
00:44:18,180 --> 00:44:20,040
whatever they happen on the network so

1254
00:44:20,040 --> 00:44:22,350
what domain controllers are default

1255
00:44:22,350 --> 00:44:24,090
reset or exists on the network and then

1256
00:44:24,090 --> 00:44:27,480
I don't remember flight C dollars or not

1257
00:44:27,480 --> 00:44:29,340
so this will give the output of the name

1258
00:44:29,340 --> 00:44:31,680
the way this is set up is there's where

1259
00:44:31,680 --> 00:44:33,690
we landed in a child domain which is dev

1260
00:44:33,690 --> 00:44:35,850
that loud that local and then the root

1261
00:44:35,850 --> 00:44:39,630
domain is just lab that local and so the

1262
00:44:39,630 --> 00:44:42,090
whole idea is to hop the trust up from

1263
00:44:42,090 --> 00:44:44,190
an elevated user and then you can see

1264
00:44:44,190 --> 00:44:46,110
and just to verify before you do

1265
00:44:46,110 --> 00:44:48,180
anything it's always just good

1266
00:44:48,180 --> 00:44:49,410
tradecraft to verify that you're

1267
00:44:49,410 --> 00:44:51,270
actually running as a domain admin you

1268
00:44:51,270 --> 00:44:56,000
can see taller the domain controller and

1269
00:44:56,330 --> 00:44:59,400
then this is another module so all this

1270
00:44:59,400 --> 00:45:02,130
all of the are most of the most

1271
00:45:02,130 --> 00:45:04,110
frequently used functions in Power View

1272
00:45:04,110 --> 00:45:07,350
are in the network situational

1273
00:45:07,350 --> 00:45:10,380
situational awareness path with an

1274
00:45:10,380 --> 00:45:12,600
empire and then this will get the domain

1275
00:45:12,600 --> 00:45:15,300
trust that exists and as you can see dev

1276
00:45:15,300 --> 00:45:17,070
that lab that local and loud that local

1277
00:45:17,070 --> 00:45:18,930
it's a parent-child and the trust is

1278
00:45:18,930 --> 00:45:25,890
bi-directional and this is where things

1279
00:45:25,890 --> 00:45:26,850
get really scary

1280
00:45:26,850 --> 00:45:32,760
so do a user to Sid for the actual labs

1281
00:45:32,760 --> 00:45:36,320
or the root domain all the information

1282
00:45:36,320 --> 00:45:40,800
yep so you'll get the care bTW GG SID so

1283
00:45:40,800 --> 00:45:42,780
you'll resolve that account too as Sid

1284
00:45:42,780 --> 00:45:46,320
which we'll use in DC sync to do evil

1285
00:45:46,320 --> 00:45:50,820
stuff and if any point if you've got a

1286
00:45:50,820 --> 00:45:52,890
long-running job you can type jobs and

1287
00:45:52,890 --> 00:45:54,420
it'll lift what jobs are running and

1288
00:45:54,420 --> 00:45:56,250
then you can kill those jobs if they're

1289
00:45:56,250 --> 00:45:57,630
taking too long or if you don't need

1290
00:45:57,630 --> 00:46:00,300
them anymore or for whatever reason it's

1291
00:46:00,300 --> 00:46:01,410
important to note you want to cut the

1292
00:46:01,410 --> 00:46:05,940
502 off on the miss Sid because what

1293
00:46:05,940 --> 00:46:08,070
you'll end up doing is really you want

1294
00:46:08,070 --> 00:46:13,320
the actual domain so yeah and this is DC

1295
00:46:13,320 --> 00:46:16,080
sync so we're going to DC sync the child

1296
00:46:16,080 --> 00:46:21,170
domain controller first Active Directory

1297
00:46:21,170 --> 00:46:23,550
domain controller replication protocol

1298
00:46:23,550 --> 00:46:24,260
when the partner

1299
00:46:24,260 --> 00:46:25,940
Falls to where it pretends the local

1300
00:46:25,940 --> 00:46:28,220
workstation is a DC and goes another DC

1301
00:46:28,220 --> 00:46:30,080
and says hey please replicate all this

1302
00:46:30,080 --> 00:46:31,910
information to me meaning the hash of

1303
00:46:31,910 --> 00:46:33,890
this user so you can get hashes from

1304
00:46:33,890 --> 00:46:35,750
remote abilities without installing an

1305
00:46:35,750 --> 00:46:37,520
agent or doing code execution on those

1306
00:46:37,520 --> 00:46:39,260
boxes so we'll be able to pull a care be

1307
00:46:39,260 --> 00:46:45,020
ttg of that account using DC's thing so

1308
00:46:45,020 --> 00:46:47,030
as you'll see and what's nice is when

1309
00:46:47,030 --> 00:46:49,520
you do this since it's a function and me

1310
00:46:49,520 --> 00:46:51,200
me cats it will actually populate the

1311
00:46:51,200 --> 00:46:53,930
cred store with the credentials and

1312
00:46:53,930 --> 00:46:55,130
you'll see that here in a second and

1313
00:46:55,130 --> 00:46:57,110
that makes it really easy to use those

1314
00:46:57,110 --> 00:46:59,900
credentials to throw into the golden

1315
00:46:59,900 --> 00:47:01,250
ticket module which will be able to see

1316
00:47:01,250 --> 00:47:04,550
so as you can see here could ID 6 is our

1317
00:47:04,550 --> 00:47:07,250
care btg hash for a b c 2 which is the

1318
00:47:07,250 --> 00:47:09,490
domain controller for the child domain

1319
00:47:09,490 --> 00:47:12,140
and you can set the code ID to that

1320
00:47:12,140 --> 00:47:17,750
particular credits probably 25 different

1321
00:47:17,750 --> 00:47:21,350
steps yeah and you can just do whatever

1322
00:47:21,350 --> 00:47:26,090
user you want and set the SID and then

1323
00:47:26,090 --> 00:47:29,690
you'll at the end you'll add dash 5 1 9

1324
00:47:29,690 --> 00:47:32,600
which is I believe the ending portion of

1325
00:47:32,600 --> 00:47:38,420
enterprise admins that's important

1326
00:47:38,420 --> 00:47:40,070
because I did this video like 4 times

1327
00:47:40,070 --> 00:47:41,750
and didn't throw that in and it never

1328
00:47:41,750 --> 00:47:42,920
worked I was getting really really

1329
00:47:42,920 --> 00:47:51,800
really sad used to be an enterprise

1330
00:47:51,800 --> 00:47:54,230
admin for the entire forest please can

1331
00:47:54,230 --> 00:47:56,750
be access to everything so you know if

1332
00:47:56,750 --> 00:47:58,130
you're a defensive guy like getting all

1333
00:47:58,130 --> 00:47:59,420
the logs and everything for this like

1334
00:47:59,420 --> 00:48:00,530
how do you think that would actually

1335
00:48:00,530 --> 00:48:02,390
look when you're doing some kind of

1336
00:48:02,390 --> 00:48:05,030
collection that's gone oh and then like

1337
00:48:05,030 --> 00:48:08,530
yeah and then run GCC components

1338
00:48:12,630 --> 00:48:14,490
I'll let that run this will actually

1339
00:48:14,490 --> 00:48:17,030
with me me cats it'll inject the ticket

1340
00:48:17,030 --> 00:48:19,290
completely into memory is not saving the

1341
00:48:19,290 --> 00:48:21,710
ticket off so nothing is touching disk

1342
00:48:21,710 --> 00:48:23,730
so you can see that totally an

1343
00:48:23,730 --> 00:48:26,100
administrator was created for the

1344
00:48:26,100 --> 00:48:27,780
current session in the the dev domain of

1345
00:48:27,780 --> 00:48:29,580
the child domain and we can go back the

1346
00:48:29,580 --> 00:48:31,320
DC sync and then just set the domain to

1347
00:48:31,320 --> 00:48:34,650
the root and then set the user to the

1348
00:48:34,650 --> 00:48:37,380
cavity GG of the root domain and then

1349
00:48:37,380 --> 00:48:38,640
executed and what this will do is it

1350
00:48:38,640 --> 00:48:41,850
will pull out the the hash the care bTW

1351
00:48:41,850 --> 00:48:44,520
GG of the the parent domain the root

1352
00:48:44,520 --> 00:48:47,460
domain and I forgot to highlight it so I

1353
00:48:47,460 --> 00:48:55,260
figured I would guess amazing did you

1354
00:48:55,260 --> 00:48:56,700
really blew my mind the first time I

1355
00:48:56,700 --> 00:48:58,910
heard

1356
00:49:04,630 --> 00:49:07,430
no yeah yeah well after you here in a

1357
00:49:07,430 --> 00:49:10,340
second yeah look something has the

1358
00:49:10,340 --> 00:49:12,740
entire forest yep from a starting point

1359
00:49:12,740 --> 00:49:15,140
lateral spread escalate all those kind

1360
00:49:15,140 --> 00:49:17,300
of components DC sync pop up the trust

1361
00:49:17,300 --> 00:49:19,100
entirely using PowerShell staying off a

1362
00:49:19,100 --> 00:49:29,030
disk entirely a memory so cool let's see

1363
00:49:29,030 --> 00:49:30,860
yeah all right we have a few minutes

1364
00:49:30,860 --> 00:49:34,600
left and that's pretty much it for now

1365
00:49:34,600 --> 00:49:37,250
again these slides will be online after

1366
00:49:37,250 --> 00:49:39,980
tweet at BCC again everything here is

1367
00:49:39,980 --> 00:49:42,680
open source the parasol Empire github

1368
00:49:42,680 --> 00:49:44,600
organization has the Empire project and

1369
00:49:44,600 --> 00:49:46,670
the power tools project we actually have

1370
00:49:46,670 --> 00:49:49,090
complete documentation for the Empire

1371
00:49:49,090 --> 00:49:51,950
project on PowerShell Empire comm we

1372
00:49:51,950 --> 00:49:53,870
spent a lot of time actually spec'ing

1373
00:49:53,870 --> 00:49:55,400
out how to use it how to set everything

1374
00:49:55,400 --> 00:49:56,930
up and making a slick interface for it

1375
00:49:56,930 --> 00:49:59,270
if you're interested in it or you know

1376
00:49:59,270 --> 00:50:01,820
hitting a hit myself up or Matt up or I

1377
00:50:01,820 --> 00:50:03,110
don't know if anybody had any questions

1378
00:50:03,110 --> 00:50:04,880
either now or you can hit this in the

1379
00:50:04,880 --> 00:50:06,380
hallway if you rather talk after so

1380
00:50:06,380 --> 00:50:07,850
that's pretty much it so thank you guys

1381
00:50:07,850 --> 00:50:10,570
so much really appreciate it

1382
00:50:10,570 --> 00:50:14,030
and thank you thank you Matt for being a

1383
00:50:14,030 --> 00:50:16,160
very good sport for me substituting the

1384
00:50:16,160 --> 00:50:19,400
presentation energy oh and we have

1385
00:50:19,400 --> 00:50:21,080
Empire stickers if anyone wants one

1386
00:50:21,080 --> 00:50:23,380
after

