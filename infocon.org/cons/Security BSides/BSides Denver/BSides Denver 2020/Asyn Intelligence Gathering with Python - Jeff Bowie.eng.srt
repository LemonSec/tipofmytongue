1
00:00:00,320 --> 00:00:03,199
excellent well i hope everybody's doing

2
00:00:02,159 --> 00:00:06,399
good today

3
00:00:03,199 --> 00:00:07,600
um i i spent a long time getting this

4
00:00:06,399 --> 00:00:10,800
presentation done

5
00:00:07,600 --> 00:00:13,759
uh i wanted to make sure and

6
00:00:10,800 --> 00:00:15,360
uh not not give too much programming uh

7
00:00:13,759 --> 00:00:18,000
heavy stuff up front

8
00:00:15,360 --> 00:00:19,520
and kind of give the more opera or open

9
00:00:18,000 --> 00:00:22,320
source intelligence gathering

10
00:00:19,520 --> 00:00:23,119
uh that kind of juicy bits up first so

11
00:00:22,320 --> 00:00:24,880
that in case you

12
00:00:23,119 --> 00:00:26,480
uh are like me with a short attention

13
00:00:24,880 --> 00:00:27,359
span uh you get all the kind of more

14
00:00:26,480 --> 00:00:30,400
important stuff

15
00:00:27,359 --> 00:00:32,640
first then we're going to move into

16
00:00:30,400 --> 00:00:34,480
kind of the more details of how to

17
00:00:32,640 --> 00:00:37,040
troubleshoot a little bit of stuff

18
00:00:34,480 --> 00:00:39,360
um and look at some more uh kind of core

19
00:00:37,040 --> 00:00:41,280
python functionality

20
00:00:39,360 --> 00:00:42,399
so a little bit introduction about

21
00:00:41,280 --> 00:00:45,840
myself

22
00:00:42,399 --> 00:00:45,840
give me a second

23
00:00:46,480 --> 00:00:50,000
a little introduction about myself um

24
00:00:48,800 --> 00:00:53,199
i'm jeff of course

25
00:00:50,000 --> 00:00:54,480
i'm a web app pin tester and i uh

26
00:00:53,199 --> 00:00:57,440
play a major role in forensic

27
00:00:54,480 --> 00:01:00,718
investigations here at alias

28
00:00:57,440 --> 00:01:05,199
um i have two certifications uh

29
00:01:00,719 --> 00:01:07,360
one is uh g-sec which is the gihc

30
00:01:05,199 --> 00:01:08,798
general or network security essentials

31
00:01:07,360 --> 00:01:12,479
and the other one is the

32
00:01:08,799 --> 00:01:15,280
gcfe which is a forensic examiner

33
00:01:12,479 --> 00:01:17,119
certification those were uh pretty

34
00:01:15,280 --> 00:01:19,680
difficult to get but

35
00:01:17,119 --> 00:01:21,119
i i've used them quite often in my my

36
00:01:19,680 --> 00:01:23,119
job role

37
00:01:21,119 --> 00:01:25,600
i have 14 years of cumulative experience

38
00:01:23,119 --> 00:01:28,640
in information technology

39
00:01:25,600 --> 00:01:30,960
i basically got started at dell

40
00:01:28,640 --> 00:01:31,840
when i was about 21 years old and break

41
00:01:30,960 --> 00:01:35,280
fix

42
00:01:31,840 --> 00:01:38,079
and i learned a lot about user behavior

43
00:01:35,280 --> 00:01:40,159
and got my start in programming doing

44
00:01:38,079 --> 00:01:42,158
some php my sequel there

45
00:01:40,159 --> 00:01:43,680
so i've been in the industry for a

46
00:01:42,159 --> 00:01:45,280
minute um

47
00:01:43,680 --> 00:01:47,680
and professionally i just started

48
00:01:45,280 --> 00:01:49,840
working for alias about a year ago

49
00:01:47,680 --> 00:01:51,680
so it's going to be uh yeah we're coming

50
00:01:49,840 --> 00:01:52,640
up on a year so i uh it's a great team

51
00:01:51,680 --> 00:01:55,680
people

52
00:01:52,640 --> 00:01:58,000
they're very skilled very talented and

53
00:01:55,680 --> 00:01:58,399
so i'm also about to be a dad to a baby

54
00:01:58,000 --> 00:02:00,880
boy

55
00:01:58,399 --> 00:02:02,159
named callum it's going to be a

56
00:02:00,880 --> 00:02:05,119
interesting experience

57
00:02:02,159 --> 00:02:06,399
uh being a new father but hopefully we

58
00:02:05,119 --> 00:02:08,239
get along and i can teach him a little

59
00:02:06,399 --> 00:02:11,440
bit of hacking

60
00:02:08,239 --> 00:02:14,239
all right so a little bit about us alias

61
00:02:11,440 --> 00:02:15,520
we do cyber security assessments

62
00:02:14,239 --> 00:02:17,520
penetration testing

63
00:02:15,520 --> 00:02:19,520
social engineering security awareness

64
00:02:17,520 --> 00:02:21,920
training incident response

65
00:02:19,520 --> 00:02:22,720
and digital forensics you guys heard

66
00:02:21,920 --> 00:02:25,519
from don

67
00:02:22,720 --> 00:02:27,520
earlier about uh kind of the uh red

68
00:02:25,520 --> 00:02:30,560
teaming

69
00:02:27,520 --> 00:02:31,840
or finding hackers and so we were

70
00:02:30,560 --> 00:02:34,160
founded in 2010

71
00:02:31,840 --> 00:02:35,200
and we have over 30 years of experience

72
00:02:34,160 --> 00:02:38,319
in performing

73
00:02:35,200 --> 00:02:41,359
all these services uh we

74
00:02:38,319 --> 00:02:42,399
see here all right sorry i'm a little

75
00:02:41,360 --> 00:02:46,239
bit nervous man

76
00:02:42,400 --> 00:02:48,640
uh so why python so you hear a lot of

77
00:02:46,239 --> 00:02:50,560
talks or a lot of people talking about

78
00:02:48,640 --> 00:02:52,238
uh different security

79
00:02:50,560 --> 00:02:53,840
tools or different scripting tools

80
00:02:52,239 --> 00:02:56,000
excuse me for uh

81
00:02:53,840 --> 00:02:57,440
for any kind of programming and for

82
00:02:56,000 --> 00:02:59,760
security work

83
00:02:57,440 --> 00:03:01,040
so python is the most common but you

84
00:02:59,760 --> 00:03:03,679
also hear people using

85
00:03:01,040 --> 00:03:05,760
bash scripting straight from bash you

86
00:03:03,680 --> 00:03:08,319
hear about people using javascript

87
00:03:05,760 --> 00:03:10,319
to collect data and to do intelligence

88
00:03:08,319 --> 00:03:14,480
but in general i found that

89
00:03:10,319 --> 00:03:16,560
python is the most easy easy to use

90
00:03:14,480 --> 00:03:18,238
for me personally just because of a few

91
00:03:16,560 --> 00:03:19,840
things

92
00:03:18,239 --> 00:03:21,519
one one of those would be automatic

93
00:03:19,840 --> 00:03:24,159
memory management

94
00:03:21,519 --> 00:03:25,200
so if anybody has ever tried to code and

95
00:03:24,159 --> 00:03:27,760
see

96
00:03:25,200 --> 00:03:29,440
that's that requires you to declare how

97
00:03:27,760 --> 00:03:31,599
much memory you're going to use

98
00:03:29,440 --> 00:03:33,519
use that memory and then free it up

99
00:03:31,599 --> 00:03:36,238
python does all that for you

100
00:03:33,519 --> 00:03:37,680
so it makes the coding a little bit less

101
00:03:36,239 --> 00:03:39,519
complex whenever you don't have to

102
00:03:37,680 --> 00:03:41,519
manage your own memory

103
00:03:39,519 --> 00:03:43,280
another good feature about python is

104
00:03:41,519 --> 00:03:45,599
that it's dynamically typed

105
00:03:43,280 --> 00:03:47,120
so instead of having to say i have a

106
00:03:45,599 --> 00:03:49,040
string or an integer

107
00:03:47,120 --> 00:03:51,120
this is what it's labeled you can just

108
00:03:49,040 --> 00:03:52,319
pick a name and then add a string or

109
00:03:51,120 --> 00:03:54,799
integer value to it

110
00:03:52,319 --> 00:03:56,159
without having to declare it first so it

111
00:03:54,799 --> 00:03:58,480
makes it a lot easier

112
00:03:56,159 --> 00:04:00,399
to understand code at times whenever you

113
00:03:58,480 --> 00:04:03,439
don't have to initialize each variable

114
00:04:00,400 --> 00:04:05,040
before you use it and the the

115
00:04:03,439 --> 00:04:07,280
most important thing like i touched on

116
00:04:05,040 --> 00:04:10,400
is your human readable syntax

117
00:04:07,280 --> 00:04:12,560
so python has a bunch of

118
00:04:10,400 --> 00:04:13,680
a bunch of conditionals some of my

119
00:04:12,560 --> 00:04:16,880
favorites are the words

120
00:04:13,680 --> 00:04:19,199
not or or or is um

121
00:04:16,880 --> 00:04:20,399
so what that means is in python i can

122
00:04:19,199 --> 00:04:24,400
say if

123
00:04:20,399 --> 00:04:26,560
uh if a integer is not 100

124
00:04:24,400 --> 00:04:27,440
kick me into an error message so

125
00:04:26,560 --> 00:04:30,400
basically

126
00:04:27,440 --> 00:04:31,440
the not is it's human readable words

127
00:04:30,400 --> 00:04:36,080
that let you

128
00:04:31,440 --> 00:04:36,080
perform logic operations uh in python

129
00:04:39,600 --> 00:04:44,960
okay so interactive mode

130
00:04:42,639 --> 00:04:46,000
python uh allows you so since it's

131
00:04:44,960 --> 00:04:49,758
scripting

132
00:04:46,000 --> 00:04:51,680
uh python allows you to

133
00:04:49,759 --> 00:04:52,800
open up this interpreter and it starts

134
00:04:51,680 --> 00:04:55,520
you in interactive mode

135
00:04:52,800 --> 00:04:56,880
and what that does is it lets you test

136
00:04:55,520 --> 00:05:00,240
out different code

137
00:04:56,880 --> 00:05:03,360
so essentially you can import a library

138
00:05:00,240 --> 00:05:04,960
you can send a command um and you can

139
00:05:03,360 --> 00:05:07,280
live look at the responses

140
00:05:04,960 --> 00:05:08,239
and look at variables and what data they

141
00:05:07,280 --> 00:05:10,638
hold

142
00:05:08,240 --> 00:05:13,520
without having to save that script and

143
00:05:10,639 --> 00:05:15,840
then compile it or run it through python

144
00:05:13,520 --> 00:05:16,560
so it's actually a interactive live

145
00:05:15,840 --> 00:05:19,280
console

146
00:05:16,560 --> 00:05:20,160
uh it's much like node.js if you've ever

147
00:05:19,280 --> 00:05:24,080
used that

148
00:05:20,160 --> 00:05:24,720
for a console so in this image right

149
00:05:24,080 --> 00:05:28,080
here

150
00:05:24,720 --> 00:05:30,400
uh we start by importing requests

151
00:05:28,080 --> 00:05:33,039
uh in this example we basically make a

152
00:05:30,400 --> 00:05:34,239
simple get request to our website it is

153
00:05:33,039 --> 00:05:36,080
infosec

154
00:05:34,240 --> 00:05:37,600
and then we want to figure out the

155
00:05:36,080 --> 00:05:39,359
status code

156
00:05:37,600 --> 00:05:41,039
so we are able to do that like i said

157
00:05:39,360 --> 00:05:44,080
live inside of here as well as search

158
00:05:41,039 --> 00:05:45,919
for strings inside of the html response

159
00:05:44,080 --> 00:05:47,840
so we're looking for the word cyber

160
00:05:45,919 --> 00:05:50,560
security and the response

161
00:05:47,840 --> 00:05:52,479
from the get request to alias infosec

162
00:05:50,560 --> 00:05:54,240
and of course it is in there

163
00:05:52,479 --> 00:05:56,000
we can also look at the response headers

164
00:05:54,240 --> 00:05:59,280
so what content type was set

165
00:05:56,000 --> 00:06:02,479
by the user so we have all these

166
00:05:59,280 --> 00:06:03,039
parameters that we can a access and b do

167
00:06:02,479 --> 00:06:05,440
it live

168
00:06:03,039 --> 00:06:06,560
without having to i get worry about code

169
00:06:05,440 --> 00:06:09,759
management

170
00:06:06,560 --> 00:06:13,039
as much all right

171
00:06:09,759 --> 00:06:15,120
so the the the title of my speech

172
00:06:13,039 --> 00:06:16,240
is async intelligence gathering with

173
00:06:15,120 --> 00:06:18,160
python

174
00:06:16,240 --> 00:06:19,600
and so the reason why i wanted to

175
00:06:18,160 --> 00:06:22,960
include that caveat

176
00:06:19,600 --> 00:06:25,680
is because of the crazy speed advantages

177
00:06:22,960 --> 00:06:27,280
that asynchronous programming provides a

178
00:06:25,680 --> 00:06:31,199
person

179
00:06:27,280 --> 00:06:33,440
so in a typical in a typical synchronous

180
00:06:31,199 --> 00:06:35,280
client server interaction you'll have

181
00:06:33,440 --> 00:06:36,880
the client make a request

182
00:06:35,280 --> 00:06:38,880
the server receives and starts

183
00:06:36,880 --> 00:06:40,719
processing the request but the client

184
00:06:38,880 --> 00:06:42,240
waits for the server to respond

185
00:06:40,720 --> 00:06:44,880
before it proceeds with giving another

186
00:06:42,240 --> 00:06:47,199
request or a follow-up request

187
00:06:44,880 --> 00:06:49,360
you'll see this kind of stuff in nmap

188
00:06:47,199 --> 00:06:50,080
where nmap will basically scan for a

189
00:06:49,360 --> 00:06:51,280
host

190
00:06:50,080 --> 00:06:53,120
uh depending on how you've had it

191
00:06:51,280 --> 00:06:56,080
configured but a standard configuration

192
00:06:53,120 --> 00:06:57,759
or scan will scan one host at a time

193
00:06:56,080 --> 00:07:00,479
sequentially

194
00:06:57,759 --> 00:07:02,240
so asynchronous what that does is it

195
00:07:00,479 --> 00:07:03,680
basically allows us to execute many

196
00:07:02,240 --> 00:07:05,520
requests without

197
00:07:03,680 --> 00:07:08,319
waiting for the server response before

198
00:07:05,520 --> 00:07:10,000
doing so or before moving forward

199
00:07:08,319 --> 00:07:12,080
so on this graphic right here i don't

200
00:07:10,000 --> 00:07:13,039
know how good it is or how easy it is to

201
00:07:12,080 --> 00:07:16,240
see

202
00:07:13,039 --> 00:07:18,000
um but on this graphic right here uh

203
00:07:16,240 --> 00:07:21,199
you can see kind of the work of the flow

204
00:07:18,000 --> 00:07:22,639
or control flow that you would have

205
00:07:21,199 --> 00:07:24,000
let's see here i'm get a laser pointer

206
00:07:22,639 --> 00:07:24,960
for you guys so you see the kind of

207
00:07:24,000 --> 00:07:27,520
control flow

208
00:07:24,960 --> 00:07:29,039
whereas you can make the request and the

209
00:07:27,520 --> 00:07:31,120
client can continue working even though

210
00:07:29,039 --> 00:07:34,479
the server hasn't responded

211
00:07:31,120 --> 00:07:36,639
so a good example of uh asynchronous

212
00:07:34,479 --> 00:07:39,680
versus synchronous in a practical

213
00:07:36,639 --> 00:07:42,800
use case is if you're doing a scan

214
00:07:39,680 --> 00:07:45,440
and one of the ports is hanging

215
00:07:42,800 --> 00:07:46,479
then the program can't move on to scan

216
00:07:45,440 --> 00:07:47,840
the other ports it's waiting for the

217
00:07:46,479 --> 00:07:51,280
response from that port

218
00:07:47,840 --> 00:07:53,119
but if you have asynchronous scanning

219
00:07:51,280 --> 00:07:54,559
then the server even though it can't

220
00:07:53,120 --> 00:07:55,199
wait for that or doesn't have a response

221
00:07:54,560 --> 00:07:58,000
from that port

222
00:07:55,199 --> 00:07:59,520
it continues with the sport scan so what

223
00:07:58,000 --> 00:08:01,919
that allows us to do is make

224
00:07:59,520 --> 00:08:03,198
so many requests all at once essentially

225
00:08:01,919 --> 00:08:05,599
and then wait for

226
00:08:03,199 --> 00:08:07,360
everybody to send us a response back but

227
00:08:05,599 --> 00:08:08,639
continue processing

228
00:08:07,360 --> 00:08:10,400
and does anybody have any questions that

229
00:08:08,639 --> 00:08:12,479
i can clear up i may be

230
00:08:10,400 --> 00:08:14,719
maybe being too technical or talking too

231
00:08:12,479 --> 00:08:16,639
fast uh is everybody good or have any

232
00:08:14,720 --> 00:08:18,160
questions up to this point

233
00:08:16,639 --> 00:08:20,400
real quick if you could just verify that

234
00:08:18,160 --> 00:08:22,639
your discord is muted

235
00:08:20,400 --> 00:08:22,638
yes

236
00:08:23,520 --> 00:08:27,840
give me one second here i'll get that

237
00:08:31,919 --> 00:08:35,838
all right there we go all right so yes

238
00:08:35,120 --> 00:08:37,839
the um

239
00:08:35,839 --> 00:08:41,839
so asynchronous for asynchronous has

240
00:08:37,839 --> 00:08:41,839
major speed advantages

241
00:08:42,080 --> 00:08:47,440
so let's look at two tools that are

242
00:08:44,640 --> 00:08:48,880
commonly used in our in our line of work

243
00:08:47,440 --> 00:08:51,600
and let's kind of do a comparison on

244
00:08:48,880 --> 00:08:54,240
them so nmap is

245
00:08:51,600 --> 00:08:55,519
a great map is a great tool for doing

246
00:08:54,240 --> 00:08:58,399
port scanning

247
00:08:55,519 --> 00:08:58,800
um so is mass scan but like i said in

248
00:08:58,399 --> 00:09:02,160
that

249
00:08:58,800 --> 00:09:05,040
or map does it synchronously um so

250
00:09:02,160 --> 00:09:08,319
mass scan is very fast it uses the

251
00:09:05,040 --> 00:09:11,519
asynchronous scanning technology

252
00:09:08,320 --> 00:09:15,200
and it basically can return a lot wide

253
00:09:11,519 --> 00:09:18,320
number of hits for ports way quicker

254
00:09:15,200 --> 00:09:19,279
than than nmap the difference between

255
00:09:18,320 --> 00:09:20,560
them

256
00:09:19,279 --> 00:09:22,640
the other differences between them

257
00:09:20,560 --> 00:09:24,800
however are that in-map

258
00:09:22,640 --> 00:09:26,720
is a lot more full-featured so you can

259
00:09:24,800 --> 00:09:30,880
run different scripts

260
00:09:26,720 --> 00:09:33,360
within nmap you can set different timing

261
00:09:30,880 --> 00:09:35,040
they both share similar syntax but in

262
00:09:33,360 --> 00:09:37,360
general masking is a basic

263
00:09:35,040 --> 00:09:39,279
a port is open or a port is not it does

264
00:09:37,360 --> 00:09:42,800
have support for some banner grab

265
00:09:39,279 --> 00:09:44,320
grabbing but in general it's just good

266
00:09:42,800 --> 00:09:46,240
for open ports

267
00:09:44,320 --> 00:09:48,560
unless you harness the power or leverage

268
00:09:46,240 --> 00:09:52,080
the power of its results which we'll do

269
00:09:48,560 --> 00:09:55,839
in a minute so both of these uh tester

270
00:09:52,080 --> 00:09:58,320
testing suites or scanning suites have a

271
00:09:55,839 --> 00:09:58,959
have the ability to output in json which

272
00:09:58,320 --> 00:10:02,079
is

273
00:09:58,959 --> 00:10:05,359
javascript object notation or to

274
00:10:02,079 --> 00:10:06,959
output in graphable format so a format

275
00:10:05,360 --> 00:10:08,399
that you can easily grab text out of and

276
00:10:06,959 --> 00:10:11,439
that's going to be

277
00:10:08,399 --> 00:10:11,440
standardized essentially

278
00:10:12,560 --> 00:10:19,439
so let's take a look at a nmap scan

279
00:10:16,240 --> 00:10:21,040
and we will time the uh we'll time how

280
00:10:19,440 --> 00:10:24,240
long it takes

281
00:10:21,040 --> 00:10:26,319
so i basically uh looked for a random

282
00:10:24,240 --> 00:10:30,160
cidr range in oklahoma city

283
00:10:26,320 --> 00:10:32,399
um and i am scanning just web available

284
00:10:30,160 --> 00:10:34,399
ports

285
00:10:32,399 --> 00:10:36,480
and so we're timing that so as you can

286
00:10:34,399 --> 00:10:39,680
see we scan 256 addresses

287
00:10:36,480 --> 00:10:40,640
it took about two minutes so if i run

288
00:10:39,680 --> 00:10:44,160
the same

289
00:10:40,640 --> 00:10:44,560
scan with mass scan on the same cidr

290
00:10:44,160 --> 00:10:47,279
range

291
00:10:44,560 --> 00:10:49,359
i can scan those same 256 hosts in only

292
00:10:47,279 --> 00:10:52,399
26 seconds

293
00:10:49,360 --> 00:10:54,160
so the difference in those two is that

294
00:10:52,399 --> 00:10:56,240
mass scan is 128

295
00:10:54,160 --> 00:10:58,480
faster and this is just with a single

296
00:10:56,240 --> 00:11:01,120
crdr range

297
00:10:58,480 --> 00:11:03,040
so the difference is uh in asynchronous

298
00:11:01,120 --> 00:11:05,680
and synchronous are exponential

299
00:11:03,040 --> 00:11:08,160
so even if even though it was just 128

300
00:11:05,680 --> 00:11:10,719
faster on that particular cidr range

301
00:11:08,160 --> 00:11:12,640
uh the wider or the the more the wider

302
00:11:10,720 --> 00:11:14,560
your range is the more host you scan

303
00:11:12,640 --> 00:11:15,839
the more speed you can have or the more

304
00:11:14,560 --> 00:11:19,119
speed advantages you can

305
00:11:15,839 --> 00:11:19,120
utilize within mass scan

306
00:11:19,519 --> 00:11:25,360
so here's some packages that

307
00:11:23,279 --> 00:11:26,959
that with python are very useful

308
00:11:25,360 --> 00:11:30,800
especially in the web scraping

309
00:11:26,959 --> 00:11:30,800
or intelligence gathering realm

310
00:11:31,360 --> 00:11:35,360
basically requests make some http

311
00:11:33,920 --> 00:11:38,079
requests it's a

312
00:11:35,360 --> 00:11:38,560
full library where you can do git head

313
00:11:38,079 --> 00:11:41,599
post

314
00:11:38,560 --> 00:11:44,959
options requests beautiful suit

315
00:11:41,600 --> 00:11:46,160
parses the html that's generated from a

316
00:11:44,959 --> 00:11:47,760
request

317
00:11:46,160 --> 00:11:50,160
and then selenium is a little bit more

318
00:11:47,760 --> 00:11:54,160
of an interesting beast so

319
00:11:50,160 --> 00:11:56,480
selenium it requires a separate binary

320
00:11:54,160 --> 00:11:57,600
but what it does is it actually emulates

321
00:11:56,480 --> 00:12:00,480
user behavior

322
00:11:57,600 --> 00:12:01,360
um in the browser so we'll take a look

323
00:12:00,480 --> 00:12:03,360
at some uh

324
00:12:01,360 --> 00:12:04,560
details of these kind of packages here

325
00:12:03,360 --> 00:12:06,240
but but these are some

326
00:12:04,560 --> 00:12:08,839
some of the tools and packages that i

327
00:12:06,240 --> 00:12:12,399
use the most within the python

328
00:12:08,839 --> 00:12:15,519
environment so request package

329
00:12:12,399 --> 00:12:17,760
like i said we can use this to make git

330
00:12:15,519 --> 00:12:20,240
requests post requests

331
00:12:17,760 --> 00:12:21,360
we can even set custom headers set

332
00:12:20,240 --> 00:12:24,880
custom cookies

333
00:12:21,360 --> 00:12:26,399
uh define post parameters as well as it

334
00:12:24,880 --> 00:12:28,880
has support for sessions

335
00:12:26,399 --> 00:12:29,519
so we can carry on cookies and data

336
00:12:28,880 --> 00:12:31,680
across

337
00:12:29,519 --> 00:12:33,040
different requests and this will come

338
00:12:31,680 --> 00:12:35,839
very useful with one of our

339
00:12:33,040 --> 00:12:36,719
case studies here so in this example up

340
00:12:35,839 --> 00:12:40,160
here

341
00:12:36,720 --> 00:12:43,360
the first line i import requests

342
00:12:40,160 --> 00:12:45,600
define a response and post this data to

343
00:12:43,360 --> 00:12:49,040
this url

344
00:12:45,600 --> 00:12:50,560
so you see here request bin

345
00:12:49,040 --> 00:12:52,079
one of the another tool that i'll touch

346
00:12:50,560 --> 00:12:54,959
on a little bit request bin

347
00:12:52,079 --> 00:12:57,040
is able to pick up this request and this

348
00:12:54,959 --> 00:12:59,359
is a good way to debug

349
00:12:57,040 --> 00:13:00,639
data if you're trying to send it out

350
00:12:59,360 --> 00:13:01,839
it's a good way to see how your

351
00:13:00,639 --> 00:13:03,040
structure is

352
00:13:01,839 --> 00:13:07,839
if you're using the right headers if

353
00:13:03,040 --> 00:13:10,639
you're using the right encoding etc

354
00:13:07,839 --> 00:13:12,399
so again this is request bin it's a

355
00:13:10,639 --> 00:13:14,639
great place to post

356
00:13:12,399 --> 00:13:16,399
data if you have some endpoint testing

357
00:13:14,639 --> 00:13:18,320
that you need to do

358
00:13:16,399 --> 00:13:20,959
i wouldn't use it for any sensify

359
00:13:18,320 --> 00:13:23,519
sensitive or classified information

360
00:13:20,959 --> 00:13:24,959
it's very easy to derive the actual

361
00:13:23,519 --> 00:13:28,880
dashboard

362
00:13:24,959 --> 00:13:30,959
url from the posting url up here

363
00:13:28,880 --> 00:13:33,439
but it is a great tool there's a few

364
00:13:30,959 --> 00:13:35,518
others out there bcepter is one

365
00:13:33,440 --> 00:13:37,040
but they're basically bin type places

366
00:13:35,519 --> 00:13:40,240
where you can send post requests and see

367
00:13:37,040 --> 00:13:40,240
what data you're actually sending out

368
00:13:40,720 --> 00:13:44,639
so here's an example of some code for

369
00:13:43,519 --> 00:13:47,440
selenium

370
00:13:44,639 --> 00:13:48,800
and so i'll touch a little bit on the

371
00:13:47,440 --> 00:13:49,920
difference between selenium and

372
00:13:48,800 --> 00:13:53,439
beautiful soup

373
00:13:49,920 --> 00:13:55,439
four they both use browsing or they both

374
00:13:53,440 --> 00:13:57,040
use html parsing

375
00:13:55,440 --> 00:13:58,720
but the difference with selenium is i

376
00:13:57,040 --> 00:13:59,680
can actually do things like click on

377
00:13:58,720 --> 00:14:02,959
links

378
00:13:59,680 --> 00:14:05,359
so i can look for every link in a

379
00:14:02,959 --> 00:14:07,680
website then i can click on those and

380
00:14:05,360 --> 00:14:10,399
once i'm in there look for content

381
00:14:07,680 --> 00:14:11,760
so it's a lot of javascript interaction

382
00:14:10,399 --> 00:14:15,360
as well that you can

383
00:14:11,760 --> 00:14:17,279
do with the browser through selenium

384
00:14:15,360 --> 00:14:19,839
so in this code uh sample right here and

385
00:14:17,279 --> 00:14:21,519
i've included line numbers in this code

386
00:14:19,839 --> 00:14:23,279
and these codes so if anybody has any

387
00:14:21,519 --> 00:14:26,880
questions about a specific line

388
00:14:23,279 --> 00:14:27,600
um then that you're able to reference it

389
00:14:26,880 --> 00:14:29,920
easily

390
00:14:27,600 --> 00:14:31,279
but essentially what we do is we start a

391
00:14:29,920 --> 00:14:34,240
new browser object

392
00:14:31,279 --> 00:14:36,560
with a chrome webdriver and we load up

393
00:14:34,240 --> 00:14:38,160
yahoo.com

394
00:14:36,560 --> 00:14:40,880
so what you don't see in this code is

395
00:14:38,160 --> 00:14:43,360
i've made a query to yahoo.com

396
00:14:40,880 --> 00:14:44,720
and we basically for each letter in that

397
00:14:43,360 --> 00:14:47,839
query

398
00:14:44,720 --> 00:14:50,639
i type it out onto the screen

399
00:14:47,839 --> 00:14:51,199
and then i sleep randomly between a

400
00:14:50,639 --> 00:14:53,920
tenth

401
00:14:51,199 --> 00:14:54,880
and eight tenths of a second and so what

402
00:14:53,920 --> 00:14:57,199
this does is

403
00:14:54,880 --> 00:14:59,600
it basically makes the keyboard look

404
00:14:57,199 --> 00:15:02,319
like a user is typing it

405
00:14:59,600 --> 00:15:04,560
so there are different uh there are

406
00:15:02,320 --> 00:15:06,160
different apis that you can utilize to

407
00:15:04,560 --> 00:15:08,959
access google searches

408
00:15:06,160 --> 00:15:10,560
but i just i don't trust them as much as

409
00:15:08,959 --> 00:15:12,719
i do scraping the actual

410
00:15:10,560 --> 00:15:14,479
google site acting like or emulating

411
00:15:12,720 --> 00:15:17,199
like i was a user

412
00:15:14,480 --> 00:15:17,600
so if you do a lot of automated requests

413
00:15:17,199 --> 00:15:19,279
um

414
00:15:17,600 --> 00:15:21,440
say you used requests library instead of

415
00:15:19,279 --> 00:15:22,959
selenium if you use a lot of uh

416
00:15:21,440 --> 00:15:24,320
automated requests you usually get

417
00:15:22,959 --> 00:15:25,279
flagged in google then it will have you

418
00:15:24,320 --> 00:15:26,800
do a captcha

419
00:15:25,279 --> 00:15:27,920
well i don't want to be hit by capture

420
00:15:26,800 --> 00:15:28,880
what i'm supposed to do or what i'm

421
00:15:27,920 --> 00:15:30,719
trying to do research

422
00:15:28,880 --> 00:15:32,160
but i also don't want api filtered

423
00:15:30,720 --> 00:15:34,720
results so

424
00:15:32,160 --> 00:15:36,639
this basically i'll show a demo of this

425
00:15:34,720 --> 00:15:39,920
this basically allows us

426
00:15:36,639 --> 00:15:41,360
to emulate a user's mouse and keyboard

427
00:15:39,920 --> 00:15:44,880
within a browser

428
00:15:41,360 --> 00:15:48,000
and so it creates a lot more value

429
00:15:44,880 --> 00:15:49,360
when you're testing sites it does like i

430
00:15:48,000 --> 00:15:51,680
said though require

431
00:15:49,360 --> 00:15:52,480
um require you to download a separate

432
00:15:51,680 --> 00:15:54,719
binary

433
00:15:52,480 --> 00:15:56,880
um versus these other libraries or

434
00:15:54,720 --> 00:15:59,120
packages that i'm showing

435
00:15:56,880 --> 00:16:00,800
selenium does have support for all major

436
00:15:59,120 --> 00:16:02,720
browsers

437
00:16:00,800 --> 00:16:05,359
and it controls it by direct

438
00:16:02,720 --> 00:16:05,360
communication

439
00:16:06,399 --> 00:16:11,839
so moving on to beautiful soup four um

440
00:16:09,600 --> 00:16:13,040
like i said this is for pulling content

441
00:16:11,839 --> 00:16:16,160
from html and

442
00:16:13,040 --> 00:16:18,959
xml the advantage of

443
00:16:16,160 --> 00:16:20,639
a beautiful suit would be unlike

444
00:16:18,959 --> 00:16:24,079
selenium we don't have to

445
00:16:20,639 --> 00:16:26,560
load the entire website in memory

446
00:16:24,079 --> 00:16:27,439
so essentially selenium it loads a

447
00:16:26,560 --> 00:16:29,359
browser

448
00:16:27,440 --> 00:16:30,720
and then it has to load all the content

449
00:16:29,360 --> 00:16:33,199
or all the

450
00:16:30,720 --> 00:16:35,360
resources and assets so pictures and

451
00:16:33,199 --> 00:16:36,560
media from that browser within it to be

452
00:16:35,360 --> 00:16:38,800
able to start running

453
00:16:36,560 --> 00:16:40,079
well beautiful suit 4 can just parse

454
00:16:38,800 --> 00:16:41,839
html directly

455
00:16:40,079 --> 00:16:44,239
so that's kind of one of the advantages

456
00:16:41,839 --> 00:16:46,240
if you want to be quick

457
00:16:44,240 --> 00:16:48,079
so right here this is a scraper that i

458
00:16:46,240 --> 00:16:50,800
made for the oklahoma county

459
00:16:48,079 --> 00:16:52,160
secretary of state uh it just so

460
00:16:50,800 --> 00:16:54,000
happened that they were using

461
00:16:52,160 --> 00:16:56,639
incrementally increasing uh

462
00:16:54,000 --> 00:16:58,000
ids for every company so i thought why

463
00:16:56,639 --> 00:16:59,199
not take advantage of that and build a

464
00:16:58,000 --> 00:17:02,079
list of company names

465
00:16:59,199 --> 00:17:04,000
and email addresses for myself uh and

466
00:17:02,079 --> 00:17:08,799
for uh possible leads

467
00:17:04,000 --> 00:17:12,000
so we have right here we define our url

468
00:17:08,799 --> 00:17:14,559
and within the url or after we

469
00:17:12,000 --> 00:17:16,559
define our url we make a get request

470
00:17:14,559 --> 00:17:18,480
after that get request is made

471
00:17:16,559 --> 00:17:19,599
if there is a 200 response which means

472
00:17:18,480 --> 00:17:21,520
okay

473
00:17:19,599 --> 00:17:24,079
what we do is we load beautiful soup and

474
00:17:21,520 --> 00:17:27,359
process that html

475
00:17:24,079 --> 00:17:30,480
so once this beautiful soup right here

476
00:17:27,359 --> 00:17:34,000
has been instantiated this html object

477
00:17:30,480 --> 00:17:36,480
is what holds all that data so

478
00:17:34,000 --> 00:17:37,679
what you see on this line 37 is we have

479
00:17:36,480 --> 00:17:39,200
a table

480
00:17:37,679 --> 00:17:41,200
and we're basically telling it to find

481
00:17:39,200 --> 00:17:43,840
an html

482
00:17:41,200 --> 00:17:45,679
a div element that has an id of print

483
00:17:43,840 --> 00:17:48,559
div

484
00:17:45,679 --> 00:17:49,600
so in my research of the site there was

485
00:17:48,559 --> 00:17:51,520
the same

486
00:17:49,600 --> 00:17:52,879
area that had the same data that i

487
00:17:51,520 --> 00:17:54,960
needed so

488
00:17:52,880 --> 00:17:56,240
because it was static i could basically

489
00:17:54,960 --> 00:17:59,200
target this specific

490
00:17:56,240 --> 00:18:00,320
element and then pull the company name

491
00:17:59,200 --> 00:18:03,280
from that element

492
00:18:00,320 --> 00:18:03,600
so you see here again html i'm gathering

493
00:18:03,280 --> 00:18:06,799
i'm

494
00:18:03,600 --> 00:18:08,959
finding the table by id then i'm

495
00:18:06,799 --> 00:18:09,918
saying the company name is whatever is

496
00:18:08,960 --> 00:18:12,160
in that table under

497
00:18:09,919 --> 00:18:13,600
h3 tag i need that text and that's the

498
00:18:12,160 --> 00:18:15,520
company name

499
00:18:13,600 --> 00:18:17,760
so that's kind of the power that you

500
00:18:15,520 --> 00:18:19,520
have inside beautiful suit four

501
00:18:17,760 --> 00:18:20,960
um and of course i looped that and

502
00:18:19,520 --> 00:18:23,440
incremented that number

503
00:18:20,960 --> 00:18:24,799
by one each time and i i got a decent

504
00:18:23,440 --> 00:18:28,160
amount of results

505
00:18:24,799 --> 00:18:29,600
and no brute for or no no uh

506
00:18:28,160 --> 00:18:31,360
resetting connection or blocking the

507
00:18:29,600 --> 00:18:32,879
connection um

508
00:18:31,360 --> 00:18:34,799
so it was very uh fruitful and that

509
00:18:32,880 --> 00:18:38,000
that's that's kind of the way that we

510
00:18:34,799 --> 00:18:40,840
take html content out of web pages

511
00:18:38,000 --> 00:18:42,400
do we have any questions up to this

512
00:18:40,840 --> 00:18:45,678
point

513
00:18:42,400 --> 00:18:48,640
okay so one of the

514
00:18:45,679 --> 00:18:49,120
uh common issues that you run into when

515
00:18:48,640 --> 00:18:52,240
you're

516
00:18:49,120 --> 00:18:55,120
gathering information or data is uh

517
00:18:52,240 --> 00:18:56,160
you often have data that's buried among

518
00:18:55,120 --> 00:18:59,360
other sets of data

519
00:18:56,160 --> 00:19:00,240
that you don't want so being able to

520
00:18:59,360 --> 00:19:02,559
identify

521
00:19:00,240 --> 00:19:05,039
what data you want or not in a sea of

522
00:19:02,559 --> 00:19:07,760
data is very hard

523
00:19:05,039 --> 00:19:08,480
so regular expressions are what we use

524
00:19:07,760 --> 00:19:11,200
to

525
00:19:08,480 --> 00:19:13,039
find this data a regular expression is a

526
00:19:11,200 --> 00:19:14,480
sequence of characters that defines a

527
00:19:13,039 --> 00:19:16,879
pattern

528
00:19:14,480 --> 00:19:18,000
so as you can see right here we've got a

529
00:19:16,880 --> 00:19:21,039
string which is our

530
00:19:18,000 --> 00:19:21,919
address and then we say our zip code is

531
00:19:21,039 --> 00:19:25,200
this pattern

532
00:19:21,919 --> 00:19:28,320
if you can find it from our stream

533
00:19:25,200 --> 00:19:30,320
so this pattern right here basically

534
00:19:28,320 --> 00:19:31,520
what it says is i need anything that's

535
00:19:30,320 --> 00:19:34,799
zero through nine

536
00:19:31,520 --> 00:19:38,080
and only that and it has to be five uh

537
00:19:34,799 --> 00:19:38,960
five character count so what you can see

538
00:19:38,080 --> 00:19:40,799
right here from the

539
00:19:38,960 --> 00:19:43,600
regular expression was that we pulled

540
00:19:40,799 --> 00:19:46,240
the zip code from a full address

541
00:19:43,600 --> 00:19:47,199
digging even deeper into uh kind of more

542
00:19:46,240 --> 00:19:51,039
our realm

543
00:19:47,200 --> 00:19:54,000
uh here's if we have an html comment

544
00:19:51,039 --> 00:19:54,320
so some people put on their websites uh

545
00:19:54,000 --> 00:19:56,720
some

546
00:19:54,320 --> 00:19:57,918
developers uh i have been a developer

547
00:19:56,720 --> 00:20:00,000
before and still am

548
00:19:57,919 --> 00:20:01,520
some developers include comments on

549
00:20:00,000 --> 00:20:02,400
their source code which you never should

550
00:20:01,520 --> 00:20:05,200
why would you but

551
00:20:02,400 --> 00:20:07,440
they do so in the event that we were

552
00:20:05,200 --> 00:20:08,799
parsing thousands of web pages

553
00:20:07,440 --> 00:20:10,559
i would maybe want to look for things

554
00:20:08,799 --> 00:20:13,760
like uh

555
00:20:10,559 --> 00:20:16,960
caches or maybe

556
00:20:13,760 --> 00:20:20,799
encoded passwords or hash passwords so

557
00:20:16,960 --> 00:20:22,960
i can down here define again a pattern

558
00:20:20,799 --> 00:20:24,000
it has to be 0 through 9 uppercase

559
00:20:22,960 --> 00:20:26,480
letters a through f

560
00:20:24,000 --> 00:20:28,720
and a minimum of 16 digits and you see

561
00:20:26,480 --> 00:20:32,400
down here we can pull that hex code

562
00:20:28,720 --> 00:20:32,400
from html where it's buried

563
00:20:33,520 --> 00:20:38,799
a great tool to use for

564
00:20:37,280 --> 00:20:40,320
testing out regular expressions is

565
00:20:38,799 --> 00:20:42,879
pythex

566
00:20:40,320 --> 00:20:44,720
and pythex will you type in your regular

567
00:20:42,880 --> 00:20:48,000
expression at that top

568
00:20:44,720 --> 00:20:51,440
you can set different options um down

569
00:20:48,000 --> 00:20:53,840
here multi-line all being verbose

570
00:20:51,440 --> 00:20:55,840
but basically you put in a test string

571
00:20:53,840 --> 00:20:58,959
and it will show you live

572
00:20:55,840 --> 00:21:01,520
what data is being matched so

573
00:20:58,960 --> 00:21:03,039
this expression right here i'm trying to

574
00:21:01,520 --> 00:21:06,240
find phone numbers that have

575
00:21:03,039 --> 00:21:06,240
the parentheses

576
00:21:08,640 --> 00:21:14,000
so this is very helpful um like i said

577
00:21:11,200 --> 00:21:16,080
pasting in a whole entire page of html

578
00:21:14,000 --> 00:21:18,080
if you just want to find something on in

579
00:21:16,080 --> 00:21:20,158
a single element in the html

580
00:21:18,080 --> 00:21:21,600
this testing a regular expression before

581
00:21:20,159 --> 00:21:24,320
you have to use it in code

582
00:21:21,600 --> 00:21:27,600
or use it in an interpreter is very it

583
00:21:24,320 --> 00:21:27,600
pays off and it's very useful

584
00:21:28,000 --> 00:21:34,640
so let's talk about a case study

585
00:21:31,360 --> 00:21:35,120
um about how can we get data so we've

586
00:21:34,640 --> 00:21:38,320
got

587
00:21:35,120 --> 00:21:41,520
a or intelligence so we've got a

588
00:21:38,320 --> 00:21:45,039
um we have resources as uh

589
00:21:41,520 --> 00:21:47,600
as engineers like dns dumpster

590
00:21:45,039 --> 00:21:48,879
qualis showdown there's tons of

591
00:21:47,600 --> 00:21:51,520
resources out there

592
00:21:48,880 --> 00:21:52,799
but i hate paying for a lot of them i

593
00:21:51,520 --> 00:21:55,679
hate paying for a lot of them

594
00:21:52,799 --> 00:21:57,200
or i hate uh you know having to swim

595
00:21:55,679 --> 00:21:59,679
through a bunch of data just to find

596
00:21:57,200 --> 00:22:00,960
the actual piece that i need so what

597
00:21:59,679 --> 00:22:01,840
we're going to do is we're going to take

598
00:22:00,960 --> 00:22:04,159
a look at

599
00:22:01,840 --> 00:22:05,918
how we can get just the ip addresses out

600
00:22:04,159 --> 00:22:09,280
of dns dumpster

601
00:22:05,919 --> 00:22:11,120
and and from that we'll look at how to

602
00:22:09,280 --> 00:22:12,080
use those tools to facilitate that

603
00:22:11,120 --> 00:22:14,639
process

604
00:22:12,080 --> 00:22:16,320
and i have a few more tools to show you

605
00:22:14,640 --> 00:22:19,440
after that

606
00:22:16,320 --> 00:22:22,240
so you can see dns dumpster it returns a

607
00:22:19,440 --> 00:22:22,720
list of hosts which is our domain name

608
00:22:22,240 --> 00:22:25,520
course

609
00:22:22,720 --> 00:22:27,280
ip addresses and your who owns that

610
00:22:25,520 --> 00:22:29,679
block

611
00:22:27,280 --> 00:22:31,840
well if you if you've used this before

612
00:22:29,679 --> 00:22:35,039
you know that it limits it which is okay

613
00:22:31,840 --> 00:22:36,639
um but we're going to create a query or

614
00:22:35,039 --> 00:22:39,280
a python script excuse me

615
00:22:36,640 --> 00:22:40,799
that's going to use beautiful soup

616
00:22:39,280 --> 00:22:44,480
requests etc

617
00:22:40,799 --> 00:22:47,039
to pull out this data so the first step

618
00:22:44,480 --> 00:22:48,080
if we want to if we have a intelligence

619
00:22:47,039 --> 00:22:50,400
asset we'll call it

620
00:22:48,080 --> 00:22:51,199
and we want to pull data from it the

621
00:22:50,400 --> 00:22:54,799
first thing

622
00:22:51,200 --> 00:22:58,000
that we want to do is open up the html

623
00:22:54,799 --> 00:22:59,440
so what i did was i right clicked on one

624
00:22:58,000 --> 00:23:02,080
of the ip addresses

625
00:22:59,440 --> 00:23:03,120
and hit inspect element what that does

626
00:23:02,080 --> 00:23:06,480
is allows

627
00:23:03,120 --> 00:23:09,600
you to open up this inspector mode

628
00:23:06,480 --> 00:23:11,280
and look at html it also lets you search

629
00:23:09,600 --> 00:23:11,918
within this html so it can be very

630
00:23:11,280 --> 00:23:13,600
useful

631
00:23:11,919 --> 00:23:15,200
but if you right click and inspect an

632
00:23:13,600 --> 00:23:16,639
element it's going to take you directly

633
00:23:15,200 --> 00:23:20,240
to where that element is

634
00:23:16,640 --> 00:23:20,799
in the browser so in my research i

635
00:23:20,240 --> 00:23:23,520
noticed

636
00:23:20,799 --> 00:23:26,400
two things one is that we have a cross

637
00:23:23,520 --> 00:23:29,360
site request forgery token

638
00:23:26,400 --> 00:23:30,720
and then we also have this input named

639
00:23:29,360 --> 00:23:32,799
sin scan

640
00:23:30,720 --> 00:23:34,640
and that looks like the ip addresses

641
00:23:32,799 --> 00:23:37,760
that we're wanting

642
00:23:34,640 --> 00:23:40,880
so up here we have a row and we have

643
00:23:37,760 --> 00:23:44,000
row data or row cells

644
00:23:40,880 --> 00:23:46,960
and basically we have multiple rows that

645
00:23:44,000 --> 00:23:49,600
have these ip addresses

646
00:23:46,960 --> 00:23:50,400
so knowing that sin scan in my previous

647
00:23:49,600 --> 00:23:52,000
research

648
00:23:50,400 --> 00:23:55,120
is attached to nothing else but the

649
00:23:52,000 --> 00:23:57,120
inputs that have these ip addresses

650
00:23:55,120 --> 00:23:58,559
how can we get that out so now we've

651
00:23:57,120 --> 00:24:00,399
we've identified the website that we

652
00:23:58,559 --> 00:24:02,080
have data that we want

653
00:24:00,400 --> 00:24:04,000
we've inspected the source and we've

654
00:24:02,080 --> 00:24:05,520
identified kind of a unique way to

655
00:24:04,000 --> 00:24:08,960
identify the data we want but we still

656
00:24:05,520 --> 00:24:12,480
have a way to actually extract it

657
00:24:08,960 --> 00:24:13,039
so here is a script that does just that

658
00:24:12,480 --> 00:24:15,520
and so

659
00:24:13,039 --> 00:24:16,720
uh this code after my talk i'm going to

660
00:24:15,520 --> 00:24:17,360
be putting a lot of this code on my

661
00:24:16,720 --> 00:24:20,480
github

662
00:24:17,360 --> 00:24:23,039
so that everybody can see and we can um

663
00:24:20,480 --> 00:24:24,240
my github is on the interest side but i

664
00:24:23,039 --> 00:24:27,360
can put it in the discord

665
00:24:24,240 --> 00:24:30,640
as well so up at the top we start by

666
00:24:27,360 --> 00:24:32,399
creating a session and then from that

667
00:24:30,640 --> 00:24:36,400
session once it's established

668
00:24:32,400 --> 00:24:39,600
we request the dnsdumpster.com url

669
00:24:36,400 --> 00:24:40,400
we use beautiful soup to then find that

670
00:24:39,600 --> 00:24:43,039
csrf

671
00:24:40,400 --> 00:24:43,840
middleware token so basically what i've

672
00:24:43,039 --> 00:24:46,559
done is

673
00:24:43,840 --> 00:24:47,199
this first url is like first hitting the

674
00:24:46,559 --> 00:24:48,639
browser

675
00:24:47,200 --> 00:24:51,120
so when you first hit the browser is

676
00:24:48,640 --> 00:24:54,159
when that middleware token is generated

677
00:24:51,120 --> 00:24:56,080
so we want to make it a plain request to

678
00:24:54,159 --> 00:24:58,400
the root html page

679
00:24:56,080 --> 00:24:59,520
to get that token then we want to take

680
00:24:58,400 --> 00:25:01,919
that token

681
00:24:59,520 --> 00:25:04,080
and carry it through the session but

682
00:25:01,919 --> 00:25:07,120
what we also want to do is

683
00:25:04,080 --> 00:25:10,480
supply a ip address

684
00:25:07,120 --> 00:25:11,360
so excuse me starting from top we start

685
00:25:10,480 --> 00:25:12,960
a session

686
00:25:11,360 --> 00:25:14,799
we use beautiful soup to find the

687
00:25:12,960 --> 00:25:16,880
middleware token

688
00:25:14,799 --> 00:25:20,000
then we take that middleware token and

689
00:25:16,880 --> 00:25:21,840
attach it to the target ip

690
00:25:20,000 --> 00:25:25,120
the next thing we do is create a second

691
00:25:21,840 --> 00:25:27,360
post request and we post that data

692
00:25:25,120 --> 00:25:30,479
once that data is returned we then

693
00:25:27,360 --> 00:25:32,639
identify all table rows

694
00:25:30,480 --> 00:25:33,840
we loop through the table rows looking

695
00:25:32,640 --> 00:25:36,400
for the send scan

696
00:25:33,840 --> 00:25:38,879
input so in beautiful soup right here

697
00:25:36,400 --> 00:25:42,159
you see the syntax it's it's fairly uh

698
00:25:38,880 --> 00:25:43,120
fairly easy on are fairly clear so if we

699
00:25:42,159 --> 00:25:45,039
want to find

700
00:25:43,120 --> 00:25:46,399
an element that's an input with the name

701
00:25:45,039 --> 00:25:48,640
of middleware token

702
00:25:46,400 --> 00:25:49,840
that's the syntax so it's it's like i

703
00:25:48,640 --> 00:25:52,960
said uh

704
00:25:49,840 --> 00:25:54,320
python is is very uh easy to read uh

705
00:25:52,960 --> 00:25:56,480
this dictionary is

706
00:25:54,320 --> 00:25:58,080
this this way is very easy to pass

707
00:25:56,480 --> 00:26:00,080
parameters

708
00:25:58,080 --> 00:26:03,279
anyways we've looked through all the

709
00:26:00,080 --> 00:26:06,240
send scans that we identified previously

710
00:26:03,279 --> 00:26:06,720
after we've made that request if we do

711
00:26:06,240 --> 00:26:09,279
have

712
00:26:06,720 --> 00:26:12,000
a input that has sent scan in it we

713
00:26:09,279 --> 00:26:15,760
append that to a list

714
00:26:12,000 --> 00:26:16,960
so what we do now is after we have that

715
00:26:15,760 --> 00:26:19,840
list

716
00:26:16,960 --> 00:26:20,720
we give a little bit of output we choose

717
00:26:19,840 --> 00:26:22,399
a file name

718
00:26:20,720 --> 00:26:24,880
which is the argument you pass so the

719
00:26:22,400 --> 00:26:25,520
web the domain name and then we add this

720
00:26:24,880 --> 00:26:28,559
text

721
00:26:25,520 --> 00:26:30,320
extension we rewrite every ip in that

722
00:26:28,559 --> 00:26:34,080
list to a file

723
00:26:30,320 --> 00:26:35,600
so i've gone ahead and done that

724
00:26:34,080 --> 00:26:38,000
excuse me i hope i don't lose my voice

725
00:26:35,600 --> 00:26:40,879
man i've gone ahead and done that

726
00:26:38,000 --> 00:26:43,200
so what you can see is if i run the

727
00:26:40,880 --> 00:26:45,760
scrape program on our ip address

728
00:26:43,200 --> 00:26:46,720
it shows me collected four ip addresses

729
00:26:45,760 --> 00:26:48,879
and then if i

730
00:26:46,720 --> 00:26:49,840
type that out using windows for this one

731
00:26:48,880 --> 00:26:52,400
if i hit type

732
00:26:49,840 --> 00:26:53,760
and type that out what we have is a list

733
00:26:52,400 --> 00:26:56,880
of ip addresses

734
00:26:53,760 --> 00:26:57,919
so we can do now is we can use that for

735
00:26:56,880 --> 00:26:59,600
other tools

736
00:26:57,919 --> 00:27:02,159
now obviously this isn't a major list of

737
00:26:59,600 --> 00:27:04,080
ip addresses but if you think about

738
00:27:02,159 --> 00:27:06,320
scripting out or looping through

739
00:27:04,080 --> 00:27:08,240
scraping ips from domains

740
00:27:06,320 --> 00:27:10,799
then you can collect a wide number of ip

741
00:27:08,240 --> 00:27:10,799
addresses

742
00:27:11,679 --> 00:27:15,039
so i took it a little step further and

743
00:27:14,640 --> 00:27:17,600
thought

744
00:27:15,039 --> 00:27:19,120
how uh how if i can't so say i can

745
00:27:17,600 --> 00:27:21,600
scrape dns dumpster

746
00:27:19,120 --> 00:27:23,439
right and i get a list of ips then what

747
00:27:21,600 --> 00:27:27,279
i still have to look them up

748
00:27:23,440 --> 00:27:29,039
so another powerful feature

749
00:27:27,279 --> 00:27:30,559
with any program language is sockets so

750
00:27:29,039 --> 00:27:34,158
it's writing raw

751
00:27:30,559 --> 00:27:35,678
data to a port and so

752
00:27:34,159 --> 00:27:37,279
what all what i've done here is i've

753
00:27:35,679 --> 00:27:40,559
taken up here you see i

754
00:27:37,279 --> 00:27:41,120
finding the send scan and if it found a

755
00:27:40,559 --> 00:27:44,480
scan

756
00:27:41,120 --> 00:27:47,600
i tried to get the host name

757
00:27:44,480 --> 00:27:51,279
by its address which is get host by adr

758
00:27:47,600 --> 00:27:53,360
and i pass it in the value of sin scan

759
00:27:51,279 --> 00:27:55,440
if there's an exception i set it to

760
00:27:53,360 --> 00:27:58,320
false but i basically append this

761
00:27:55,440 --> 00:28:00,000
to my list and so again since the list

762
00:27:58,320 --> 00:28:02,158
is written in csv

763
00:28:00,000 --> 00:28:03,600
or not csv excuse me it's lit written to

764
00:28:02,159 --> 00:28:04,799
a flat text file

765
00:28:03,600 --> 00:28:06,320
i can type that out and what you see

766
00:28:04,799 --> 00:28:07,120
here is we've actually identified host

767
00:28:06,320 --> 00:28:10,399
names now

768
00:28:07,120 --> 00:28:12,399
and ips from just a single domain name

769
00:28:10,399 --> 00:28:14,479
so i'm sure there's other tools that can

770
00:28:12,399 --> 00:28:16,719
do this and i know there aren't

771
00:28:14,480 --> 00:28:17,840
but the whole the whole idea behind

772
00:28:16,720 --> 00:28:19,360
using python for the

773
00:28:17,840 --> 00:28:20,959
this is the ability to chain these

774
00:28:19,360 --> 00:28:23,279
things together so easy

775
00:28:20,960 --> 00:28:25,200
so uh you know and one of my other

776
00:28:23,279 --> 00:28:28,159
slides i'll show how we change the chain

777
00:28:25,200 --> 00:28:28,640
python to other programs but essentially

778
00:28:28,159 --> 00:28:31,520
um

779
00:28:28,640 --> 00:28:33,360
i can take a list of my piece run a

780
00:28:31,520 --> 00:28:33,679
socket on them or i can pass it on to

781
00:28:33,360 --> 00:28:35,918
some

782
00:28:33,679 --> 00:28:37,120
something like dirt buster or pass it on

783
00:28:35,919 --> 00:28:39,840
to something like mito

784
00:28:37,120 --> 00:28:41,120
or i can even filter out things like ns

785
00:28:39,840 --> 00:28:43,120
or mail from the host name

786
00:28:41,120 --> 00:28:45,918
so i don't get any uh assets that i'm

787
00:28:43,120 --> 00:28:47,120
not really interested in

788
00:28:45,919 --> 00:28:49,360
do we have any questions up to this

789
00:28:47,120 --> 00:28:49,360
point

790
00:28:52,240 --> 00:28:58,720
okay so here's a demonstration of

791
00:28:55,440 --> 00:29:01,600
speaking of automating tools

792
00:28:58,720 --> 00:29:02,640
and using python we know that math scan

793
00:29:01,600 --> 00:29:06,480
is fast

794
00:29:02,640 --> 00:29:08,640
right but um if mass gain is fast

795
00:29:06,480 --> 00:29:09,840
and it's async and we write python

796
00:29:08,640 --> 00:29:11,200
that's synchronous

797
00:29:09,840 --> 00:29:14,240
it's going to be limited and there's me

798
00:29:11,200 --> 00:29:15,279
that bottleneck so what i did was i

799
00:29:14,240 --> 00:29:19,120
realized that

800
00:29:15,279 --> 00:29:21,600
in a lot of our research it takes a lot

801
00:29:19,120 --> 00:29:22,719
of intelligence a lot of upfront

802
00:29:21,600 --> 00:29:25,039
intelligence work

803
00:29:22,720 --> 00:29:26,000
so if i have a wide amount of ip

804
00:29:25,039 --> 00:29:28,480
addresses

805
00:29:26,000 --> 00:29:30,640
or excuse me hosts that i want to check

806
00:29:28,480 --> 00:29:32,080
i want to just see what's the html

807
00:29:30,640 --> 00:29:34,159
content or i want to see

808
00:29:32,080 --> 00:29:35,760
maybe what the title tag is and that's

809
00:29:34,159 --> 00:29:37,200
all i want to see i want to see it quick

810
00:29:35,760 --> 00:29:38,879
so i can know if i need to investigate

811
00:29:37,200 --> 00:29:40,799
further so the problem i was running

812
00:29:38,880 --> 00:29:44,240
into was the scans of

813
00:29:40,799 --> 00:29:46,080
cps scans were slow so i went async but

814
00:29:44,240 --> 00:29:47,120
even after going async it still takes

815
00:29:46,080 --> 00:29:49,360
manual entry

816
00:29:47,120 --> 00:29:50,479
or it takes some further investigation

817
00:29:49,360 --> 00:29:52,399
so this tool

818
00:29:50,480 --> 00:29:54,559
um i'll show you some of the code behind

819
00:29:52,399 --> 00:29:58,320
it but basically what it does

820
00:29:54,559 --> 00:30:00,399
it takes a pre-made ip list or a cidr

821
00:29:58,320 --> 00:30:03,200
range as you've seen up here

822
00:30:00,399 --> 00:30:04,559
and it basically loops through it runs

823
00:30:03,200 --> 00:30:06,320
mass scan

824
00:30:04,559 --> 00:30:09,120
and it converts mask into drippable

825
00:30:06,320 --> 00:30:11,360
output once that output is produced

826
00:30:09,120 --> 00:30:12,799
python picks it up and then it starts

827
00:30:11,360 --> 00:30:15,840
making asynchronous

828
00:30:12,799 --> 00:30:16,879
http requests to all the websites and

829
00:30:15,840 --> 00:30:20,720
then pulling the first

830
00:30:16,880 --> 00:30:22,240
256 characters from the html body

831
00:30:20,720 --> 00:30:24,080
and so i'm going to demo this really

832
00:30:22,240 --> 00:30:27,279
quick i hope that the

833
00:30:24,080 --> 00:30:29,840
video works on uh over compression

834
00:30:27,279 --> 00:30:29,840
but let's go

835
00:30:32,480 --> 00:30:36,080
so here you can see i've got mass scan

836
00:30:35,200 --> 00:30:37,520
firing off

837
00:30:36,080 --> 00:30:39,360
it's very quick um

838
00:30:37,520 --> 00:30:41,200
[Music]

839
00:30:39,360 --> 00:30:42,719
so i don't know it has this little delay

840
00:30:41,200 --> 00:30:44,320
it's built in but i'm sure we can turn

841
00:30:42,720 --> 00:30:46,240
it off somehow

842
00:30:44,320 --> 00:30:48,879
so essentially everything that matched

843
00:30:46,240 --> 00:30:50,720
480 within that range

844
00:30:48,880 --> 00:30:51,919
what you see is i'm getting the little

845
00:30:50,720 --> 00:30:55,679
bits of html

846
00:30:51,919 --> 00:30:58,399
that are uh the first 256 characters

847
00:30:55,679 --> 00:31:01,120
and so at the bottom you see 64 hits

848
00:30:58,399 --> 00:31:03,279
from 256 hosts in 20 seconds

849
00:31:01,120 --> 00:31:04,799
so we were able to scan the 256 host

850
00:31:03,279 --> 00:31:07,679
cidr range

851
00:31:04,799 --> 00:31:09,440
and in 20 seconds get a preview of all

852
00:31:07,679 --> 00:31:11,279
the html

853
00:31:09,440 --> 00:31:12,640
now uh when i showed one of our other

854
00:31:11,279 --> 00:31:15,679
engineers andrew lemon

855
00:31:12,640 --> 00:31:16,399
this he said bro eyewitness is that and

856
00:31:15,679 --> 00:31:19,039
so

857
00:31:16,399 --> 00:31:20,399
and so it was uh i looked to eyewitness

858
00:31:19,039 --> 00:31:23,440
and eyewitness does have

859
00:31:20,399 --> 00:31:24,959
um some functionality but eyewitness it

860
00:31:23,440 --> 00:31:26,799
would require some modification

861
00:31:24,960 --> 00:31:28,559
and it is very comparable but like i

862
00:31:26,799 --> 00:31:30,720
said we can chain into other things

863
00:31:28,559 --> 00:31:33,279
and so while it is good um i like to

864
00:31:30,720 --> 00:31:34,880
make it myself if i can

865
00:31:33,279 --> 00:31:37,360
so this cidr range by the way was

866
00:31:34,880 --> 00:31:38,720
google's uh cidr range

867
00:31:37,360 --> 00:31:40,879
so these are all pretty much similar

868
00:31:38,720 --> 00:31:44,880
because they're just uh load balanced

869
00:31:40,880 --> 00:31:46,640
uh googles so here's a

870
00:31:44,880 --> 00:31:48,240
another demonstration this is kind of

871
00:31:46,640 --> 00:31:50,880
one of the the tools that i

872
00:31:48,240 --> 00:31:51,600
um that i like the most like i said it

873
00:31:50,880 --> 00:31:54,799
emulates

874
00:31:51,600 --> 00:31:56,000
uh user behavior in the browser so it

875
00:31:54,799 --> 00:31:59,279
was created to find

876
00:31:56,000 --> 00:32:01,279
websites containing a specific term

877
00:31:59,279 --> 00:32:03,279
and the long-term goal would be

878
00:32:01,279 --> 00:32:05,279
historical so if i can find

879
00:32:03,279 --> 00:32:07,360
the top 10 sites on google for a certain

880
00:32:05,279 --> 00:32:10,080
term and i can do that continually

881
00:32:07,360 --> 00:32:11,760
and alert me say if after 10 days

882
00:32:10,080 --> 00:32:14,559
there's an anomaly

883
00:32:11,760 --> 00:32:15,519
then that may provide some excuse me

884
00:32:14,559 --> 00:32:16,879
that may provide

885
00:32:15,519 --> 00:32:18,559
a little bit of information that i can

886
00:32:16,880 --> 00:32:20,960
have for further investigation

887
00:32:18,559 --> 00:32:22,399
so there's multiple things that you can

888
00:32:20,960 --> 00:32:24,799
do

889
00:32:22,399 --> 00:32:26,559
by just searching through sites and

890
00:32:24,799 --> 00:32:28,158
doing it automated

891
00:32:26,559 --> 00:32:30,639
so essentially what i do is i start

892
00:32:28,159 --> 00:32:31,039
chrome driver um we find that search

893
00:32:30,640 --> 00:32:34,000
field

894
00:32:31,039 --> 00:32:35,519
in google i go inside of it and then i

895
00:32:34,000 --> 00:32:37,440
start typing like a user would

896
00:32:35,519 --> 00:32:38,880
but really what you see is you see cyber

897
00:32:37,440 --> 00:32:40,640
security being typed out

898
00:32:38,880 --> 00:32:42,159
and you'll see the random delays it's

899
00:32:40,640 --> 00:32:43,519
pretty slick i think but you'll see the

900
00:32:42,159 --> 00:32:45,360
random delays

901
00:32:43,519 --> 00:32:47,440
and so what it does then is after it

902
00:32:45,360 --> 00:32:49,439
searches it hits next

903
00:32:47,440 --> 00:32:50,799
so i predefined a number of pages like i

904
00:32:49,440 --> 00:32:51,440
don't want you to search five pages or

905
00:32:50,799 --> 00:32:53,840
ten or

906
00:32:51,440 --> 00:32:55,039
whatever or unlimited but i say after

907
00:32:53,840 --> 00:32:57,199
five pages

908
00:32:55,039 --> 00:32:58,399
look through each url then what it does

909
00:32:57,200 --> 00:33:01,519
is it takes those user

910
00:32:58,399 --> 00:33:05,120
urls and it passes it to

911
00:33:01,519 --> 00:33:07,519
requests after it passes the urls

912
00:33:05,120 --> 00:33:08,399
to request it does a regular expression

913
00:33:07,519 --> 00:33:11,440
looking for

914
00:33:08,399 --> 00:33:13,600
the text or term that we've supplied it

915
00:33:11,440 --> 00:33:15,279
so after all of that after all that's

916
00:33:13,600 --> 00:33:17,439
done it basically

917
00:33:15,279 --> 00:33:18,720
gives us an output of every url that had

918
00:33:17,440 --> 00:33:20,240
that text inside of it

919
00:33:18,720 --> 00:33:22,159
and it also gives us a little preview of

920
00:33:20,240 --> 00:33:22,960
that text the reason it gives you a

921
00:33:22,159 --> 00:33:24,960
preview

922
00:33:22,960 --> 00:33:27,679
is because beautiful soup is i is

923
00:33:24,960 --> 00:33:30,080
finding the text within elements of html

924
00:33:27,679 --> 00:33:31,679
so say there was a paragraph block that

925
00:33:30,080 --> 00:33:34,480
said my name is jeff

926
00:33:31,679 --> 00:33:36,000
and i got uh attacked by ransomware it

927
00:33:34,480 --> 00:33:38,000
would find that whole text

928
00:33:36,000 --> 00:33:39,519
instead of just ransomware so just kind

929
00:33:38,000 --> 00:33:40,640
of that that um

930
00:33:39,519 --> 00:33:43,440
side effect of searching through

931
00:33:40,640 --> 00:33:45,279
beautiful suit four gives us a preview

932
00:33:43,440 --> 00:33:48,320
so anyways i've talked enough about it

933
00:33:45,279 --> 00:33:48,320
let me go and show you what it looks

934
00:33:50,840 --> 00:33:55,918
like

935
00:33:53,760 --> 00:33:57,440
so there it is uh i want to play

936
00:33:55,919 --> 00:33:59,200
cyberpunk 2077.

937
00:33:57,440 --> 00:34:00,720
um i don't know if anybody else is

938
00:33:59,200 --> 00:34:02,640
interested in that but anyways we

939
00:34:00,720 --> 00:34:05,919
searched cyber security

940
00:34:02,640 --> 00:34:08,320
uh we typed out slow and now the uh

941
00:34:05,919 --> 00:34:10,000
browser as you see

942
00:34:08,320 --> 00:34:11,520
chrome is being controlled by automated

943
00:34:10,000 --> 00:34:14,399
test software

944
00:34:11,520 --> 00:34:15,440
um so we hit next a bunch and then what

945
00:34:14,399 --> 00:34:18,879
you see here on the screen

946
00:34:15,440 --> 00:34:19,440
is so from every url that we met that we

947
00:34:18,879 --> 00:34:22,639
searched

948
00:34:19,440 --> 00:34:26,720
on um for every url that we searched

949
00:34:22,639 --> 00:34:26,720
we're now parsing it for that word

950
00:34:26,879 --> 00:34:30,399
and so the reason that this is slow

951
00:34:29,119 --> 00:34:33,119
compared to

952
00:34:30,399 --> 00:34:34,319
the previous is because this is actually

953
00:34:33,119 --> 00:34:37,040
done synchronously

954
00:34:34,320 --> 00:34:38,240
so i do selenium in the browser but then

955
00:34:37,040 --> 00:34:39,119
all the requests are processed

956
00:34:38,239 --> 00:34:41,598
synchronously

957
00:34:39,119 --> 00:34:42,480
and so that's why async is so powerful

958
00:34:41,599 --> 00:34:44,320
because this would probably

959
00:34:42,480 --> 00:34:45,520
have already been done if we were able

960
00:34:44,320 --> 00:34:49,839
to not have blocking

961
00:34:45,520 --> 00:34:49,839
or be waiting on other responses

962
00:34:50,159 --> 00:34:54,560
so you see the urls up here we found and

963
00:34:53,199 --> 00:34:56,560
we see the text and like i said the

964
00:34:54,560 --> 00:34:59,920
preview of that text

965
00:34:56,560 --> 00:35:01,359
so there's uh more more interesting uses

966
00:34:59,920 --> 00:35:04,079
of this of course

967
00:35:01,359 --> 00:35:04,960
there's obviously nefarious uses of um

968
00:35:04,079 --> 00:35:07,839
of this but

969
00:35:04,960 --> 00:35:09,680
essentially being able to find that list

970
00:35:07,839 --> 00:35:11,520
of urls that match a search term

971
00:35:09,680 --> 00:35:12,799
without triggering google that you're a

972
00:35:11,520 --> 00:35:14,640
bot

973
00:35:12,800 --> 00:35:16,000
without risking getting filtered results

974
00:35:14,640 --> 00:35:17,839
through an api

975
00:35:16,000 --> 00:35:19,040
it's it's beneficial and it feels good

976
00:35:17,839 --> 00:35:22,880
tricking

977
00:35:19,040 --> 00:35:26,880
the browser so like i said

978
00:35:22,880 --> 00:35:29,760
um we have tools that exist in

979
00:35:26,880 --> 00:35:31,440
in cali and linux whatever distro you

980
00:35:29,760 --> 00:35:33,440
use we have tools that exist

981
00:35:31,440 --> 00:35:34,960
but harnessing those tools or the power

982
00:35:33,440 --> 00:35:38,079
of them or kind of leveraging that

983
00:35:34,960 --> 00:35:38,960
can be difficult uh python makes it

984
00:35:38,079 --> 00:35:40,560
pretty easy

985
00:35:38,960 --> 00:35:42,000
i'm sure most programming languages

986
00:35:40,560 --> 00:35:45,119
languages make it easy

987
00:35:42,000 --> 00:35:46,560
but my example is python so if you see

988
00:35:45,119 --> 00:35:49,200
here

989
00:35:46,560 --> 00:35:50,560
in our first result uh the first tool

990
00:35:49,200 --> 00:35:52,319
demonstration that you saw

991
00:35:50,560 --> 00:35:53,839
where we scan all those ports and then

992
00:35:52,320 --> 00:35:57,599
find the html

993
00:35:53,839 --> 00:36:00,799
just the html preview so we basically

994
00:35:57,599 --> 00:36:03,200
take a cidr range and we

995
00:36:00,800 --> 00:36:04,320
run a sub process through python what

996
00:36:03,200 --> 00:36:07,680
you can see right here is

997
00:36:04,320 --> 00:36:10,880
we're referencing the mass scan binary

998
00:36:07,680 --> 00:36:12,160
we're saying dash p for a port

999
00:36:10,880 --> 00:36:14,320
and we put the port that the user

1000
00:36:12,160 --> 00:36:17,839
provided oj

1001
00:36:14,320 --> 00:36:20,160
means output in json format

1002
00:36:17,839 --> 00:36:21,359
the dash means to standard out and we

1003
00:36:20,160 --> 00:36:23,200
got a cidr range

1004
00:36:21,359 --> 00:36:25,119
so basically this is running a mass scan

1005
00:36:23,200 --> 00:36:28,160
scan and it pipes

1006
00:36:25,119 --> 00:36:31,200
the standard out and standard ear to

1007
00:36:28,160 --> 00:36:32,000
this variable next thing we do is we

1008
00:36:31,200 --> 00:36:35,200
look for

1009
00:36:32,000 --> 00:36:37,680
the results and we parse

1010
00:36:35,200 --> 00:36:38,560
that whole json string and loop through

1011
00:36:37,680 --> 00:36:40,078
it

1012
00:36:38,560 --> 00:36:41,759
when we loop through it we're basically

1013
00:36:40,079 --> 00:36:44,400
appending http

1014
00:36:41,760 --> 00:36:46,400
to it with the url with the port that

1015
00:36:44,400 --> 00:36:49,760
the user specified

1016
00:36:46,400 --> 00:36:50,720
so that's essentially a way that we can

1017
00:36:49,760 --> 00:36:53,599
take

1018
00:36:50,720 --> 00:36:55,279
mass scan which is asynchronous and then

1019
00:36:53,599 --> 00:36:55,839
code that's asynchronous and chain them

1020
00:36:55,280 --> 00:36:57,520
together

1021
00:36:55,839 --> 00:36:59,279
so that we don't have a bottleneck and

1022
00:36:57,520 --> 00:37:00,079
so that's why that first tool that i

1023
00:36:59,280 --> 00:37:02,640
demonstrated

1024
00:37:00,079 --> 00:37:03,280
is so quick because it literally does

1025
00:37:02,640 --> 00:37:06,400
not wait

1026
00:37:03,280 --> 00:37:08,000
before it sends another request do we

1027
00:37:06,400 --> 00:37:10,560
have any questions uh or feedback

1028
00:37:08,000 --> 00:37:10,560
at this point

1029
00:37:13,280 --> 00:37:19,599
so uh one of the big things uh

1030
00:37:16,480 --> 00:37:22,400
in scraping or intelligence uh in my

1031
00:37:19,599 --> 00:37:23,280
opinion is avoiding detection first is

1032
00:37:22,400 --> 00:37:25,680
having quality

1033
00:37:23,280 --> 00:37:26,880
data to scrape or gather but avoiding

1034
00:37:25,680 --> 00:37:31,440
detection

1035
00:37:26,880 --> 00:37:34,400
so uh in in a lot of circumstances

1036
00:37:31,440 --> 00:37:37,440
activity that's repetitive um is going

1037
00:37:34,400 --> 00:37:40,160
to be blocked by a firewall ips system

1038
00:37:37,440 --> 00:37:40,880
um failed to ban is is one of the linux

1039
00:37:40,160 --> 00:37:43,759
services

1040
00:37:40,880 --> 00:37:45,599
that does this there's plenty of others

1041
00:37:43,760 --> 00:37:46,960
but a lot of times the source ip or

1042
00:37:45,599 --> 00:37:49,119
originating ip

1043
00:37:46,960 --> 00:37:50,720
or and or the user agent is used to

1044
00:37:49,119 --> 00:37:52,880
identify a user

1045
00:37:50,720 --> 00:37:55,279
and so if there's enough hits on that

1046
00:37:52,880 --> 00:37:56,960
same user agent with the same ip

1047
00:37:55,280 --> 00:37:59,040
it's probably the same guy versus being

1048
00:37:56,960 --> 00:37:59,760
say an office where a bunch of people

1049
00:37:59,040 --> 00:38:02,560
are at

1050
00:37:59,760 --> 00:38:02,960
but regardless any way that they can use

1051
00:38:02,560 --> 00:38:05,520
to

1052
00:38:02,960 --> 00:38:06,560
they any way that a person can use to

1053
00:38:05,520 --> 00:38:10,000
determine if

1054
00:38:06,560 --> 00:38:11,520
an automated or scripting is running um

1055
00:38:10,000 --> 00:38:12,800
we want to try to defeat because we

1056
00:38:11,520 --> 00:38:13,839
don't want anybody in our business

1057
00:38:12,800 --> 00:38:17,520
essentially

1058
00:38:13,839 --> 00:38:19,040
so what we do here um and also if we had

1059
00:38:17,520 --> 00:38:21,359
a thousand euros to scrape

1060
00:38:19,040 --> 00:38:23,440
um it'd be it'd be different you know uh

1061
00:38:21,359 --> 00:38:25,200
scraping one url or two

1062
00:38:23,440 --> 00:38:28,400
you can get by with that but but

1063
00:38:25,200 --> 00:38:30,160
scraping many urls on the same block

1064
00:38:28,400 --> 00:38:32,160
could be difficult because you you may

1065
00:38:30,160 --> 00:38:35,520
get blocked

1066
00:38:32,160 --> 00:38:38,240
so what you see here is we

1067
00:38:35,520 --> 00:38:39,920
define a list of user agents so this is

1068
00:38:38,240 --> 00:38:42,319
a standard python list

1069
00:38:39,920 --> 00:38:43,599
and you see some user agents as you are

1070
00:38:42,320 --> 00:38:45,599
familiar with or should you be familiar

1071
00:38:43,599 --> 00:38:48,480
with if you're in the industry

1072
00:38:45,599 --> 00:38:51,040
and then we define a proxy list so we

1073
00:38:48,480 --> 00:38:52,400
define a local address for 8080

1074
00:38:51,040 --> 00:38:54,400
and so why did that is because i

1075
00:38:52,400 --> 00:38:56,720
actually routed this demo through burp

1076
00:38:54,400 --> 00:38:59,119
suite for you to see

1077
00:38:56,720 --> 00:38:59,759
so while true is basically an infinite

1078
00:38:59,119 --> 00:39:02,400
loop

1079
00:38:59,760 --> 00:39:04,720
we basically select a random user agent

1080
00:39:02,400 --> 00:39:07,359
select a random proxy

1081
00:39:04,720 --> 00:39:09,200
create a request the next time we create

1082
00:39:07,359 --> 00:39:09,598
a request we select another random user

1083
00:39:09,200 --> 00:39:11,919
agent

1084
00:39:09,599 --> 00:39:12,640
and we keep going and going so what we

1085
00:39:11,920 --> 00:39:15,440
could have done

1086
00:39:12,640 --> 00:39:16,560
is taken a whole list of urls and a host

1087
00:39:15,440 --> 00:39:18,480
of proxies

1088
00:39:16,560 --> 00:39:20,078
and basically made their requests on

1089
00:39:18,480 --> 00:39:21,599
those through the proxies and that would

1090
00:39:20,079 --> 00:39:24,079
essentially look random

1091
00:39:21,599 --> 00:39:26,400
or it should look random to a lot of

1092
00:39:24,079 --> 00:39:29,760
firewalls ids ips

1093
00:39:26,400 --> 00:39:30,640
so uh heuristical analysis may cause an

1094
00:39:29,760 --> 00:39:32,800
issue

1095
00:39:30,640 --> 00:39:34,400
but this if it's something static like a

1096
00:39:32,800 --> 00:39:36,560
source ip and user agent

1097
00:39:34,400 --> 00:39:37,680
then we may be able to get away so let

1098
00:39:36,560 --> 00:39:42,640
me go ahead and show you

1099
00:39:37,680 --> 00:39:45,839
what i'm talking about so i ran this

1100
00:39:42,640 --> 00:39:47,200
here we go so you'll see in this demo i

1101
00:39:45,839 --> 00:39:49,279
have burp suite loaded and if you

1102
00:39:47,200 --> 00:39:52,640
haven't used or familiar with burp suite

1103
00:39:49,280 --> 00:39:54,000
and you're in web or even uh in it

1104
00:39:52,640 --> 00:39:55,839
it's something interesting to see how

1105
00:39:54,000 --> 00:39:57,119
traffic is shaped and how traffic moves

1106
00:39:55,839 --> 00:40:00,160
through your network

1107
00:39:57,119 --> 00:40:03,200
especially or http http

1108
00:40:00,160 --> 00:40:06,078
excuse me traffic especially so

1109
00:40:03,200 --> 00:40:07,279
we've started a burp suite proxy on port

1110
00:40:06,079 --> 00:40:10,240
8080

1111
00:40:07,280 --> 00:40:11,280
and in our just like our example page

1112
00:40:10,240 --> 00:40:13,680
what we have

1113
00:40:11,280 --> 00:40:15,200
is an example but our example previously

1114
00:40:13,680 --> 00:40:15,839
what we'll do is we'll make random

1115
00:40:15,200 --> 00:40:18,078
requests

1116
00:40:15,839 --> 00:40:19,040
but we'll try to switch up the proxy or

1117
00:40:18,079 --> 00:40:20,400
the user agent

1118
00:40:19,040 --> 00:40:22,560
i'm not switching the proxy because i

1119
00:40:20,400 --> 00:40:25,839
only have one so let's uh

1120
00:40:22,560 --> 00:40:25,839
let's go ahead and run that code

1121
00:40:27,280 --> 00:40:31,520
so i'm spitting out which proxy i

1122
00:40:29,520 --> 00:40:35,119
selected the user agencies like

1123
00:40:31,520 --> 00:40:37,200
agent selected and the url that i'm

1124
00:40:35,119 --> 00:40:39,599
trying to access

1125
00:40:37,200 --> 00:40:41,279
so i killed the code that's why i saw

1126
00:40:39,599 --> 00:40:42,960
the error

1127
00:40:41,280 --> 00:40:44,560
and what you see here is you'll see me

1128
00:40:42,960 --> 00:40:46,240
stepping through burp suite and if

1129
00:40:44,560 --> 00:40:53,520
you'll notice the user agent

1130
00:40:46,240 --> 00:40:55,040
so let me get my pointer here

1131
00:40:53,520 --> 00:40:56,960
anyways pointers being laggy because the

1132
00:40:55,040 --> 00:40:59,200
video but you can basically see the

1133
00:40:56,960 --> 00:41:01,599
uh there it is user agent down here

1134
00:40:59,200 --> 00:41:01,598
changing

1135
00:41:04,640 --> 00:41:07,759
so that that's kind of the uh

1136
00:41:06,880 --> 00:41:10,640
intelligence

1137
00:41:07,760 --> 00:41:12,079
um gathering uh that kind of section of

1138
00:41:10,640 --> 00:41:13,839
it portion of it like i said

1139
00:41:12,079 --> 00:41:16,480
i wanted to give those juicy bits up

1140
00:41:13,839 --> 00:41:17,119
first but these are uh the kind of nuts

1141
00:41:16,480 --> 00:41:20,079
and bolts

1142
00:41:17,119 --> 00:41:21,359
of the work so um let's go ahead and

1143
00:41:20,079 --> 00:41:24,240
talk about storing

1144
00:41:21,359 --> 00:41:25,598
data and kind of debugging a little bit

1145
00:41:24,240 --> 00:41:26,959
in virtual environments i won't get too

1146
00:41:25,599 --> 00:41:29,200
much in the leads for you guys

1147
00:41:26,960 --> 00:41:30,960
i hope i haven't already but if i have i

1148
00:41:29,200 --> 00:41:33,598
apologize in advance

1149
00:41:30,960 --> 00:41:35,119
so storage modules everybody's heard of

1150
00:41:33,599 --> 00:41:38,240
csv

1151
00:41:35,119 --> 00:41:41,280
most people have heard of sql so

1152
00:41:38,240 --> 00:41:45,520
csv anybody can open that in excel

1153
00:41:41,280 --> 00:41:49,359
you can edit and save csvs in a notepad

1154
00:41:45,520 --> 00:41:51,440
or any kind of other text editor sqlite

1155
00:41:49,359 --> 00:41:52,799
so sqlite has some basic sql

1156
00:41:51,440 --> 00:41:55,280
functionality and syntax

1157
00:41:52,800 --> 00:41:57,200
but it has very limited data types so

1158
00:41:55,280 --> 00:41:59,200
what that means is you may have text

1159
00:41:57,200 --> 00:42:02,000
or integer but you won't have some more

1160
00:41:59,200 --> 00:42:04,160
advanced data types like mysql has

1161
00:42:02,000 --> 00:42:06,000
so my sequel the difference between that

1162
00:42:04,160 --> 00:42:08,640
and say sqlite is that it has

1163
00:42:06,000 --> 00:42:09,119
users and permissions so i would say

1164
00:42:08,640 --> 00:42:12,480
that

1165
00:42:09,119 --> 00:42:14,560
csv to sqlite my sequel is a progression

1166
00:42:12,480 --> 00:42:16,480
and a good progression depending on how

1167
00:42:14,560 --> 00:42:19,440
large your environment is and how much

1168
00:42:16,480 --> 00:42:19,440
data you need to collect

1169
00:42:19,760 --> 00:42:25,839
so sql light module you see most of this

1170
00:42:23,280 --> 00:42:26,880
or all almost all of my code examples i

1171
00:42:25,839 --> 00:42:28,880
show

1172
00:42:26,880 --> 00:42:30,800
the import statement so you can really

1173
00:42:28,880 --> 00:42:34,640
see this is almost a complete

1174
00:42:30,800 --> 00:42:37,200
uh sql light uh block of code

1175
00:42:34,640 --> 00:42:38,000
so i import sqlite to find the file that

1176
00:42:37,200 --> 00:42:41,040
i'm going to be

1177
00:42:38,000 --> 00:42:43,040
loading and in this example this was the

1178
00:42:41,040 --> 00:42:45,200
results from the companies i scraped for

1179
00:42:43,040 --> 00:42:47,680
the secretary of state

1180
00:42:45,200 --> 00:42:49,279
so i basically want to find the last

1181
00:42:47,680 --> 00:42:50,640
filing number so i can continue my

1182
00:42:49,280 --> 00:42:53,520
search from there

1183
00:42:50,640 --> 00:42:55,040
so what i do is i select or i provide my

1184
00:42:53,520 --> 00:42:57,440
sql query

1185
00:42:55,040 --> 00:42:58,240
get a cursor to the connection and then

1186
00:42:57,440 --> 00:43:00,960
execute

1187
00:42:58,240 --> 00:43:02,160
my query on the cursor after that i can

1188
00:43:00,960 --> 00:43:04,319
loop through rows

1189
00:43:02,160 --> 00:43:06,560
and basically view all the data that is

1190
00:43:04,319 --> 00:43:09,759
in my sqlite database

1191
00:43:06,560 --> 00:43:12,160
so sqlite according to their website

1192
00:43:09,760 --> 00:43:14,400
is 35 faster than reading or writing to

1193
00:43:12,160 --> 00:43:17,040
individual files in the file system

1194
00:43:14,400 --> 00:43:17,599
so if you did have csv and you're using

1195
00:43:17,040 --> 00:43:19,119
it

1196
00:43:17,599 --> 00:43:20,640
and your application was writing many

1197
00:43:19,119 --> 00:43:22,400
times uh

1198
00:43:20,640 --> 00:43:24,799
at once then it probably would be

1199
00:43:22,400 --> 00:43:26,319
applicable to use sqlite

1200
00:43:24,800 --> 00:43:28,560
instead of creating new files or to be

1201
00:43:26,319 --> 00:43:30,079
accessing the file system

1202
00:43:28,560 --> 00:43:32,160
and the application file is portable

1203
00:43:30,079 --> 00:43:33,359
across all systems so what that means is

1204
00:43:32,160 --> 00:43:35,118
you can send a sqlite

1205
00:43:33,359 --> 00:43:36,960
file to your friend they can open it up

1206
00:43:35,119 --> 00:43:38,800
with sql lite browser whereas you can't

1207
00:43:36,960 --> 00:43:40,960
do that with mysql

1208
00:43:38,800 --> 00:43:42,800
and you uh but you came with csv so it

1209
00:43:40,960 --> 00:43:45,839
really depends on what your use case is

1210
00:43:42,800 --> 00:43:49,440
as why you pick one or the other

1211
00:43:45,839 --> 00:43:52,560
so here's a good csv example

1212
00:43:49,440 --> 00:43:54,319
i start by importing the csv module

1213
00:43:52,560 --> 00:43:55,920
and requests and beautiful suit why not

1214
00:43:54,319 --> 00:43:58,800
use them all so

1215
00:43:55,920 --> 00:44:00,319
i define a list of urls predefined lists

1216
00:43:58,800 --> 00:44:03,359
some sites i frequently often

1217
00:44:00,319 --> 00:44:05,359
i guess uh github in hacker news but

1218
00:44:03,359 --> 00:44:08,640
we've got our website in there as well

1219
00:44:05,359 --> 00:44:10,799
so i basically make a blank results list

1220
00:44:08,640 --> 00:44:13,200
and i look through the urls requesting

1221
00:44:10,800 --> 00:44:16,480
each one at a time

1222
00:44:13,200 --> 00:44:17,520
so then if the status code is 200 i find

1223
00:44:16,480 --> 00:44:20,079
the title

1224
00:44:17,520 --> 00:44:20,839
and i append it to my results what you

1225
00:44:20,079 --> 00:44:24,720
see up here

1226
00:44:20,839 --> 00:44:27,759
list another thing i want to touch on

1227
00:44:24,720 --> 00:44:28,319
real quick is template tags in python so

1228
00:44:27,760 --> 00:44:30,720
this f

1229
00:44:28,319 --> 00:44:33,279
right here that you see before a string

1230
00:44:30,720 --> 00:44:35,200
that allows me to place any variable

1231
00:44:33,280 --> 00:44:36,400
directly inside of a string without

1232
00:44:35,200 --> 00:44:38,960
having to concatenate

1233
00:44:36,400 --> 00:44:40,400
it's very very i've fallen in love with

1234
00:44:38,960 --> 00:44:43,599
them so far on

1235
00:44:40,400 --> 00:44:44,400
python so digging further into the code

1236
00:44:43,599 --> 00:44:47,040
a little bit

1237
00:44:44,400 --> 00:44:47,599
we basically open up a csv file with

1238
00:44:47,040 --> 00:44:50,720
write

1239
00:44:47,599 --> 00:44:52,560
permissions and we define

1240
00:44:50,720 --> 00:44:53,919
that we want to use non-numeric quotes

1241
00:44:52,560 --> 00:44:56,319
which is essentially just

1242
00:44:53,920 --> 00:44:57,200
quotes then we write the row title and

1243
00:44:56,319 --> 00:44:59,440
url

1244
00:44:57,200 --> 00:45:00,720
so this gets our first row written but

1245
00:44:59,440 --> 00:45:03,599
then we loop through our results and

1246
00:45:00,720 --> 00:45:06,319
write the subsequent rows

1247
00:45:03,599 --> 00:45:07,440
what you see here is that output so we

1248
00:45:06,319 --> 00:45:10,640
said we want the

1249
00:45:07,440 --> 00:45:12,640
title or the header should be title url

1250
00:45:10,640 --> 00:45:13,920
and so we have in the title of our site

1251
00:45:12,640 --> 00:45:17,359
and we have our url

1252
00:45:13,920 --> 00:45:18,800
the title of github utf-8 was probably

1253
00:45:17,359 --> 00:45:20,560
something going on right there

1254
00:45:18,800 --> 00:45:22,400
but um that's okay and then we've got

1255
00:45:20,560 --> 00:45:24,000
hacker news of course the title and the

1256
00:45:22,400 --> 00:45:28,880
url

1257
00:45:24,000 --> 00:45:31,839
csv is very decent in storing data quick

1258
00:45:28,880 --> 00:45:32,880
so when you're all these python packages

1259
00:45:31,839 --> 00:45:35,920
that i'm talking about

1260
00:45:32,880 --> 00:45:38,800
um they can get kind of tricky to manage

1261
00:45:35,920 --> 00:45:40,480
so cali has a bunch of different tools

1262
00:45:38,800 --> 00:45:43,599
and scripts that rely on different

1263
00:45:40,480 --> 00:45:45,040
python library versions so creating a

1264
00:45:43,599 --> 00:45:46,800
virtual container for

1265
00:45:45,040 --> 00:45:48,160
the different libraries is essential if

1266
00:45:46,800 --> 00:45:49,920
you don't want to break your system

1267
00:45:48,160 --> 00:45:51,440
or mess up or if you want to kind of

1268
00:45:49,920 --> 00:45:54,880
isolate

1269
00:45:51,440 --> 00:45:56,160
that code so up the top it's a simple

1270
00:45:54,880 --> 00:45:57,440
curl if you already have python

1271
00:45:56,160 --> 00:45:58,799
installed that's good if you don't

1272
00:45:57,440 --> 00:46:00,960
python.org

1273
00:45:58,800 --> 00:46:01,839
will get you there so we make a simple

1274
00:46:00,960 --> 00:46:06,000
curl request

1275
00:46:01,839 --> 00:46:08,720
request to this python file we output it

1276
00:46:06,000 --> 00:46:09,520
never directly uh run bash on a file you

1277
00:46:08,720 --> 00:46:12,959
download but

1278
00:46:09,520 --> 00:46:15,599
if you do it's your skin

1279
00:46:12,960 --> 00:46:16,319
so then we run python get pip and that

1280
00:46:15,599 --> 00:46:20,400
will install

1281
00:46:16,319 --> 00:46:22,960
the pip package manager so

1282
00:46:20,400 --> 00:46:23,760
if we were say we had a brand new python

1283
00:46:22,960 --> 00:46:25,839
install

1284
00:46:23,760 --> 00:46:27,359
and we want to do what we talked about

1285
00:46:25,839 --> 00:46:28,078
earlier we want to experiment with

1286
00:46:27,359 --> 00:46:29,920
requests

1287
00:46:28,079 --> 00:46:31,599
how do we get requests on our instance

1288
00:46:29,920 --> 00:46:33,920
well we

1289
00:46:31,599 --> 00:46:35,520
type pip install request after we've

1290
00:46:33,920 --> 00:46:37,839
installed pip and it's done

1291
00:46:35,520 --> 00:46:39,440
so it's really fairly easy npm is

1292
00:46:37,839 --> 00:46:42,640
another package manager

1293
00:46:39,440 --> 00:46:45,680
app is similar to this syntax so

1294
00:46:42,640 --> 00:46:47,279
installing pip installing python they're

1295
00:46:45,680 --> 00:46:50,319
they're fairly easy compared to

1296
00:46:47,280 --> 00:46:51,680
others like visual studio and having to

1297
00:46:50,319 --> 00:46:53,759
statically link libraries to your

1298
00:46:51,680 --> 00:46:56,000
executable

1299
00:46:53,760 --> 00:46:58,000
so some useful commands would be pip

1300
00:46:56,000 --> 00:46:59,119
freeze which basically freezes your

1301
00:46:58,000 --> 00:47:01,119
whole entire

1302
00:46:59,119 --> 00:47:02,319
library that you've installed in your

1303
00:47:01,119 --> 00:47:03,520
virtual environment

1304
00:47:02,319 --> 00:47:05,680
and what this will allow you to do is

1305
00:47:03,520 --> 00:47:07,119
create a requirements.txt file which

1306
00:47:05,680 --> 00:47:09,520
you'll see in a lot of github

1307
00:47:07,119 --> 00:47:10,640
python examples for if someone wants to

1308
00:47:09,520 --> 00:47:12,560
download your repo

1309
00:47:10,640 --> 00:47:14,000
and get it running they can just install

1310
00:47:12,560 --> 00:47:14,480
all the libraries that you put in that

1311
00:47:14,000 --> 00:47:16,640
file

1312
00:47:14,480 --> 00:47:18,079
without having to do research or dig

1313
00:47:16,640 --> 00:47:21,359
through error codes

1314
00:47:18,079 --> 00:47:24,160
so it's very helpful so

1315
00:47:21,359 --> 00:47:25,839
now that you have uh now that we've gone

1316
00:47:24,160 --> 00:47:29,040
over package managing

1317
00:47:25,839 --> 00:47:29,680
virtual environments are our major like

1318
00:47:29,040 --> 00:47:31,759
i said

1319
00:47:29,680 --> 00:47:34,720
they isolate your packages from

1320
00:47:31,760 --> 00:47:36,240
conflicts etc and you can even install

1321
00:47:34,720 --> 00:47:38,558
different versions in different

1322
00:47:36,240 --> 00:47:41,598
environments so the flexibility

1323
00:47:38,559 --> 00:47:45,920
is is there so to to instantiate

1324
00:47:41,599 --> 00:47:48,960
a virtual environment we type python3

1325
00:47:45,920 --> 00:47:49,760
we specify the module as the v e and v

1326
00:47:48,960 --> 00:47:51,839
module

1327
00:47:49,760 --> 00:47:53,839
which you can install that through pip

1328
00:47:51,839 --> 00:47:55,920
as well and then we say this is the

1329
00:47:53,839 --> 00:47:57,680
folder that we want

1330
00:47:55,920 --> 00:47:59,280
after that we define the source of our

1331
00:47:57,680 --> 00:48:00,720
environment to be inside of the virtual

1332
00:47:59,280 --> 00:48:03,119
environment folder

1333
00:48:00,720 --> 00:48:04,640
inside the binaries called activate as

1334
00:48:03,119 --> 00:48:06,800
soon as we run that command

1335
00:48:04,640 --> 00:48:09,520
you see this over here v e and v will

1336
00:48:06,800 --> 00:48:10,800
drop down into our virtual environment

1337
00:48:09,520 --> 00:48:11,759
and so once we're in our virtual

1338
00:48:10,800 --> 00:48:13,440
environment that's where we want to

1339
00:48:11,760 --> 00:48:14,960
start installing our libraries

1340
00:48:13,440 --> 00:48:17,520
and keep them just contained inside of

1341
00:48:14,960 --> 00:48:17,520
our environment

1342
00:48:17,839 --> 00:48:23,839
so here is what you'll see is a pip list

1343
00:48:21,440 --> 00:48:25,839
here is the results of pip list and you

1344
00:48:23,839 --> 00:48:28,400
see packages that i have installed

1345
00:48:25,839 --> 00:48:29,680
as well as requests inside of there so

1346
00:48:28,400 --> 00:48:32,720
that's pretty blank

1347
00:48:29,680 --> 00:48:34,960
uh list and so um

1348
00:48:32,720 --> 00:48:37,118
but our quest is in there so it lets you

1349
00:48:34,960 --> 00:48:38,880
see in your virtual environment how many

1350
00:48:37,119 --> 00:48:40,880
packages are installed and what are they

1351
00:48:38,880 --> 00:48:42,880
to get out of your virtual environment

1352
00:48:40,880 --> 00:48:44,079
you hit you type deactivate and what

1353
00:48:42,880 --> 00:48:44,880
that does is just drops you out of the

1354
00:48:44,079 --> 00:48:46,319
virtual environment

1355
00:48:44,880 --> 00:48:48,319
and to test that we've actually

1356
00:48:46,319 --> 00:48:50,240
successfully dropped out we can

1357
00:48:48,319 --> 00:48:51,440
do a one-liner to python trying to

1358
00:48:50,240 --> 00:48:53,598
import that module

1359
00:48:51,440 --> 00:48:57,040
and you'll see no module so we know that

1360
00:48:53,599 --> 00:48:57,040
this virtual environment is contained

1361
00:48:58,319 --> 00:49:05,200
so debugging debugging

1362
00:49:01,440 --> 00:49:07,280
is major uh i use it so often

1363
00:49:05,200 --> 00:49:08,558
um and so we'll go a little bit into

1364
00:49:07,280 --> 00:49:09,760
that i won't get too much in the weeds

1365
00:49:08,559 --> 00:49:11,920
because it gets deep

1366
00:49:09,760 --> 00:49:13,680
but um something very useful if you use

1367
00:49:11,920 --> 00:49:15,040
python and you're not familiar with pdb

1368
00:49:13,680 --> 00:49:17,359
you gotta get familiar man because it's

1369
00:49:15,040 --> 00:49:18,558
uh it's it's the way uh it's the way to

1370
00:49:17,359 --> 00:49:21,200
identify problems and

1371
00:49:18,559 --> 00:49:22,960
uh and look live so we start by

1372
00:49:21,200 --> 00:49:23,919
importing pdb which is the python

1373
00:49:22,960 --> 00:49:25,440
debugger

1374
00:49:23,920 --> 00:49:27,680
um it's interactive just like the

1375
00:49:25,440 --> 00:49:29,200
interpreter so when we drop down into a

1376
00:49:27,680 --> 00:49:31,839
pdb show

1377
00:49:29,200 --> 00:49:33,359
um we can access variables we can

1378
00:49:31,839 --> 00:49:35,279
manipulate variables

1379
00:49:33,359 --> 00:49:36,558
um we can do a lot of stuff within

1380
00:49:35,280 --> 00:49:39,680
debugging so

1381
00:49:36,559 --> 00:49:41,760
what i've done here is made a url list

1382
00:49:39,680 --> 00:49:43,440
a list infosec i turn myself into a

1383
00:49:41,760 --> 00:49:45,200
pickle morty i bet you that's not going

1384
00:49:43,440 --> 00:49:47,119
to show up and give a 404

1385
00:49:45,200 --> 00:49:48,879
probably isn't well i know it isn't then

1386
00:49:47,119 --> 00:49:50,079
we have a this infosec.com which we know

1387
00:49:48,880 --> 00:49:52,079
will come up

1388
00:49:50,079 --> 00:49:53,359
so let's simply loop through the urls

1389
00:49:52,079 --> 00:49:56,800
making requests

1390
00:49:53,359 --> 00:49:57,520
but if we get a 404 let's drop down into

1391
00:49:56,800 --> 00:50:00,319
a pdb

1392
00:49:57,520 --> 00:50:02,400
shell so that we can see what's going on

1393
00:50:00,319 --> 00:50:05,759
inspect the code inspect the uh objects

1394
00:50:02,400 --> 00:50:06,480
in real time otherwise printed success

1395
00:50:05,760 --> 00:50:08,000
message

1396
00:50:06,480 --> 00:50:10,400
and just like we did in the other tool

1397
00:50:08,000 --> 00:50:14,800
show me the two first 256

1398
00:50:10,400 --> 00:50:17,280
characters of that response

1399
00:50:14,800 --> 00:50:19,119
we can also change the program flow and

1400
00:50:17,280 --> 00:50:21,839
i'll show you a little bit of that here

1401
00:50:19,119 --> 00:50:22,640
so let's run the debug test so we get a

1402
00:50:21,839 --> 00:50:24,558
404

1403
00:50:22,640 --> 00:50:26,640
and like we like we thought we get

1404
00:50:24,559 --> 00:50:29,839
dropped down into a pdb show

1405
00:50:26,640 --> 00:50:31,440
so you can see the um man

1406
00:50:29,839 --> 00:50:33,040
i left my username in there again i

1407
00:50:31,440 --> 00:50:33,680
thought i cleared everything out but you

1408
00:50:33,040 --> 00:50:36,160
can see

1409
00:50:33,680 --> 00:50:37,839
right here um that we're running debug

1410
00:50:36,160 --> 00:50:39,759
test and on line 8 is where it's

1411
00:50:37,839 --> 00:50:42,160
breaking into that pdb show

1412
00:50:39,760 --> 00:50:43,200
so now that i've gotten a 404 on this

1413
00:50:42,160 --> 00:50:46,240
url

1414
00:50:43,200 --> 00:50:50,399
what's up with it so as you see i'm

1415
00:50:46,240 --> 00:50:52,000
in the pdb shell and i do r dot headers

1416
00:50:50,400 --> 00:50:53,599
so this ardot header shows me the

1417
00:50:52,000 --> 00:50:55,839
response headers that i made of the

1418
00:50:53,599 --> 00:50:55,839
request

1419
00:50:56,160 --> 00:50:59,839
and so it's very helpful that you can

1420
00:50:57,839 --> 00:51:01,119
see if there's anything any headers up

1421
00:50:59,839 --> 00:51:03,680
here

1422
00:51:01,119 --> 00:51:04,880
that that if you're debugging a url you

1423
00:51:03,680 --> 00:51:06,160
can see the headers you can see the

1424
00:51:04,880 --> 00:51:08,880
status code

1425
00:51:06,160 --> 00:51:09,598
and then you can also alt or influence

1426
00:51:08,880 --> 00:51:13,359
the flow

1427
00:51:09,599 --> 00:51:14,480
of your program so what i mean by

1428
00:51:13,359 --> 00:51:17,359
influence the flow

1429
00:51:14,480 --> 00:51:18,480
so we started with the 404 first because

1430
00:51:17,359 --> 00:51:20,319
we wanted to be dropped down to the

1431
00:51:18,480 --> 00:51:23,599
debug shell

1432
00:51:20,319 --> 00:51:24,880
so after that after we've determined

1433
00:51:23,599 --> 00:51:26,880
okay that url is bad

1434
00:51:24,880 --> 00:51:27,920
i hit url looked at the headers looked

1435
00:51:26,880 --> 00:51:29,520
at the status code

1436
00:51:27,920 --> 00:51:31,040
yeah something's wrong with that but

1437
00:51:29,520 --> 00:51:31,759
what if you want to keep going through

1438
00:51:31,040 --> 00:51:34,720
your code

1439
00:51:31,760 --> 00:51:35,440
but you don't want to have to um get out

1440
00:51:34,720 --> 00:51:37,839
of your shell

1441
00:51:35,440 --> 00:51:39,280
you can hit c and hit enter and it

1442
00:51:37,839 --> 00:51:41,759
continues execution

1443
00:51:39,280 --> 00:51:42,960
so the show was paused once we hit see

1444
00:51:41,760 --> 00:51:44,880
it continued

1445
00:51:42,960 --> 00:51:46,720
looped back through and found hey that

1446
00:51:44,880 --> 00:51:51,520
site does exist and now you see

1447
00:51:46,720 --> 00:51:54,480
the first 256 bytes of aliases website

1448
00:51:51,520 --> 00:51:56,079
so i covered a lot of stuff um i hope i

1449
00:51:54,480 --> 00:51:58,720
didn't get too much in the weeds

1450
00:51:56,079 --> 00:52:01,200
uh but like i said there's their python

1451
00:51:58,720 --> 00:52:04,558
is great for open source intelligence

1452
00:52:01,200 --> 00:52:05,759
um we do a lot of it up here and and i'd

1453
00:52:04,559 --> 00:52:06,960
love to answer any questions you guys

1454
00:52:05,760 --> 00:52:10,000
had them and again my

1455
00:52:06,960 --> 00:52:12,960
i'll be available in discord and aside

1456
00:52:10,000 --> 00:52:12,960
from that i'll post github

1457
00:52:13,680 --> 00:52:18,319
thank you very much jeff and we'll pop

1458
00:52:16,319 --> 00:52:19,920
over to discord and see if anyone has

1459
00:52:18,319 --> 00:52:24,000
any questions

1460
00:52:19,920 --> 00:52:24,000
okay thank you guys so much

