1
00:00:00,000 --> 00:00:02,220
right so yeah as she said we're going to

2
00:00:02,220 --> 00:00:03,120
be talking a little bit about some

3
00:00:03,120 --> 00:00:05,640
detection engineering topics today but

4
00:00:05,640 --> 00:00:07,919
just real quick uh background about me

5
00:00:07,919 --> 00:00:10,320
my name is Paul Amy as Kendra said I'm a

6
00:00:10,320 --> 00:00:12,240
co-founder at soteria I started off my

7
00:00:12,240 --> 00:00:15,299
career in in the air force uh as a

8
00:00:15,299 --> 00:00:17,580
software engineer and then moved over

9
00:00:17,580 --> 00:00:19,020
into the cyber security side of the

10
00:00:19,020 --> 00:00:21,779
house later on in my career spent some

11
00:00:21,779 --> 00:00:23,180
time at the National Security Agency

12
00:00:23,180 --> 00:00:25,140
doing some of the offensive Mission

13
00:00:25,140 --> 00:00:27,599
there spent some time at JP Morgan and

14
00:00:27,599 --> 00:00:29,160
in the Internal Revenue Service in the

15
00:00:29,160 --> 00:00:32,040
U.S uh doing uh hunt missions and

16
00:00:32,040 --> 00:00:34,440
security operations work and I've been a

17
00:00:34,440 --> 00:00:35,640
long time ago I used to work in fast

18
00:00:35,640 --> 00:00:37,559
food and uh and did some Landscaping so

19
00:00:37,559 --> 00:00:38,700
if this whole cyber thing doesn't work

20
00:00:38,700 --> 00:00:40,500
out I've got to fall back there but

21
00:00:40,500 --> 00:00:43,320
there's a uh over my career I've had

22
00:00:43,320 --> 00:00:45,120
really great opportunities to work on

23
00:00:45,120 --> 00:00:46,920
what I've put here offense defense and

24
00:00:46,920 --> 00:00:48,600
special teams I've done some GRC work as

25
00:00:48,600 --> 00:00:50,399
well I think that's that's been really

26
00:00:50,399 --> 00:00:51,960
beneficial to me to kind of help me

27
00:00:51,960 --> 00:00:54,000
think about how

28
00:00:54,000 --> 00:00:55,980
um how to go out and find bad things

29
00:00:55,980 --> 00:00:58,559
happening in corporate environments so I

30
00:00:58,559 --> 00:01:00,719
want to talk a little bit and you know I

31
00:01:00,719 --> 00:01:02,640
can't really go fully into the history

32
00:01:02,640 --> 00:01:04,680
here and really do it any justice but

33
00:01:04,680 --> 00:01:06,240
just talk a little bit about the the

34
00:01:06,240 --> 00:01:08,700
history of how we detect bad things um

35
00:01:08,700 --> 00:01:10,740
happening and in our corporate

36
00:01:10,740 --> 00:01:12,780
environments these days so it really

37
00:01:12,780 --> 00:01:15,360
started out with uh with antivirus and

38
00:01:15,360 --> 00:01:17,460
firewalls and things like that so uh

39
00:01:17,460 --> 00:01:19,080
somebody like John McAfee would write a

40
00:01:19,080 --> 00:01:20,520
piece of software that would scan the

41
00:01:20,520 --> 00:01:22,560
files on your computer and there were

42
00:01:22,560 --> 00:01:24,600
you know a handful of of known viruses

43
00:01:24,600 --> 00:01:26,659
back then it would look for

44
00:01:26,659 --> 00:01:28,560
characteristics of those files maybe

45
00:01:28,560 --> 00:01:30,720
some some strings or bite patterns that

46
00:01:30,720 --> 00:01:32,820
that were unique to that file and it

47
00:01:32,820 --> 00:01:34,500
would flag up and say this is a virus

48
00:01:34,500 --> 00:01:36,479
and over time as malware became more

49
00:01:36,479 --> 00:01:38,579
prevalent and threat actor started doing

50
00:01:38,579 --> 00:01:41,040
stranger and more sophisticated things

51
00:01:41,040 --> 00:01:43,020
that just wasn't viable anymore so

52
00:01:43,020 --> 00:01:45,119
there's been a very slow Evolution and

53
00:01:45,119 --> 00:01:47,640
again this is a a big jump but really

54
00:01:47,640 --> 00:01:50,759
what's come to be the the sort of state

55
00:01:50,759 --> 00:01:52,020
of the art in the state of the industry

56
00:01:52,020 --> 00:01:54,840
now is that organizations need to

57
00:01:54,840 --> 00:01:57,119
collect Telemetry from from various

58
00:01:57,119 --> 00:02:00,060
systems and help uh identify strange

59
00:02:00,060 --> 00:02:01,860
patterns within that for themselves and

60
00:02:01,860 --> 00:02:03,899
you can buy products to do this you can

61
00:02:03,899 --> 00:02:06,000
buy an EDR product to collect a bunch of

62
00:02:06,000 --> 00:02:07,860
endpoint Telemetry and it will come with

63
00:02:07,860 --> 00:02:09,179
a bunch of rules and it'll say that

64
00:02:09,179 --> 00:02:11,280
it'll stop a bunch of threats but

65
00:02:11,280 --> 00:02:13,379
there's limitations to that and and such

66
00:02:13,379 --> 00:02:15,720
that uh you know they can't really write

67
00:02:15,720 --> 00:02:16,800
great rules that are going to be

68
00:02:16,800 --> 00:02:19,319
specific to your organization because if

69
00:02:19,319 --> 00:02:21,420
they if they write some rules for you

70
00:02:21,420 --> 00:02:22,680
know everything that's in the miter

71
00:02:22,680 --> 00:02:25,500
attack uh you know framework they're

72
00:02:25,500 --> 00:02:26,940
going to throw so many false positive

73
00:02:26,940 --> 00:02:28,500
that nobody's going to look at it right

74
00:02:28,500 --> 00:02:30,360
nobody's going to pay attention to the

75
00:02:30,360 --> 00:02:32,700
2000 alerts they get every hour and

76
00:02:32,700 --> 00:02:33,900
they're just going to turn it off and

77
00:02:33,900 --> 00:02:34,980
same thing for network security

78
00:02:34,980 --> 00:02:38,580
monitoring for for Sims so really what

79
00:02:38,580 --> 00:02:40,379
organizations need to do is they need to

80
00:02:40,379 --> 00:02:42,420
to have this capability where they can

81
00:02:42,420 --> 00:02:45,060
collect this telemetry

82
00:02:45,060 --> 00:02:46,680
understand what's normal for their

83
00:02:46,680 --> 00:02:48,599
organization and what's not normal and

84
00:02:48,599 --> 00:02:50,819
and understand how they can write rules

85
00:02:50,819 --> 00:02:53,580
to to find uh bad things happening and

86
00:02:53,580 --> 00:02:54,959
that's really what detection engineering

87
00:02:54,959 --> 00:02:58,620
is to me this is still a very uh

88
00:02:58,620 --> 00:03:00,000
immature

89
00:03:00,000 --> 00:03:02,459
foreign within the cyber security

90
00:03:02,459 --> 00:03:04,560
ecosystem I think this is this is

91
00:03:04,560 --> 00:03:06,420
something that is still kind of poorly

92
00:03:06,420 --> 00:03:08,280
defined compared to some other areas of

93
00:03:08,280 --> 00:03:11,040
expertise within cyber security but the

94
00:03:11,040 --> 00:03:13,980
way I look at it is outlined here so a

95
00:03:13,980 --> 00:03:15,780
detection engineer first you have to to

96
00:03:15,780 --> 00:03:17,099
make sure that you understand what

97
00:03:17,099 --> 00:03:18,659
you're looking for so you have some sort

98
00:03:18,659 --> 00:03:20,819
of of threat intelligence capability

99
00:03:20,819 --> 00:03:23,760
whether that threat intelligence is a

100
00:03:23,760 --> 00:03:25,560
very organized threat intelligence team

101
00:03:25,560 --> 00:03:27,060
that that spends all their time doing

102
00:03:27,060 --> 00:03:28,620
this or whether your threat intelligence

103
00:03:28,620 --> 00:03:30,180
is you know scrolling through Twitter

104
00:03:30,180 --> 00:03:31,620
and reading through you know bleeping

105
00:03:31,620 --> 00:03:32,819
the computer every day and just trying

106
00:03:32,819 --> 00:03:34,860
to understand what folks are doing and

107
00:03:34,860 --> 00:03:36,120
there's there's different levels of

108
00:03:36,120 --> 00:03:37,860
maturity but but you need to have some

109
00:03:37,860 --> 00:03:40,200
input to help you understand what it is

110
00:03:40,200 --> 00:03:42,659
that you want to catch right

111
00:03:42,659 --> 00:03:44,519
and then you need to make sure that you

112
00:03:44,519 --> 00:03:47,519
design systems that can can capture the

113
00:03:47,519 --> 00:03:48,780
Telemetry you need you got to get that

114
00:03:48,780 --> 00:03:50,340
data right you got to have something to

115
00:03:50,340 --> 00:03:52,019
look at in order to

116
00:03:52,019 --> 00:03:53,940
um in order to find the bad things

117
00:03:53,940 --> 00:03:57,299
happening and have some way to uh to

118
00:03:57,299 --> 00:03:58,560
parse that data and write rules against

119
00:03:58,560 --> 00:04:01,500
it and then the focus of of today's

120
00:04:01,500 --> 00:04:03,480
session is really going to be on these

121
00:04:03,480 --> 00:04:06,000
on these last four bullets on the slide

122
00:04:06,000 --> 00:04:07,739
so once you have all this data coming in

123
00:04:07,739 --> 00:04:09,599
you've got to be able to write your own

124
00:04:09,599 --> 00:04:12,480
logic to to find bad things happening

125
00:04:12,480 --> 00:04:14,400
you know for whatever definition of bad

126
00:04:14,400 --> 00:04:15,959
that you might have within your

127
00:04:15,959 --> 00:04:17,760
environment you have to be able to test

128
00:04:17,760 --> 00:04:19,380
and verify that that you're actually

129
00:04:19,380 --> 00:04:21,000
catching the things that that you are

130
00:04:21,000 --> 00:04:22,740
that you think you're doing right you

131
00:04:22,740 --> 00:04:24,120
can say that I've got a rule to catch

132
00:04:24,120 --> 00:04:26,280
this thing but how do you really know uh

133
00:04:26,280 --> 00:04:27,780
maintain these things because threats

134
00:04:27,780 --> 00:04:30,120
evolve systems evolve you know when you

135
00:04:30,120 --> 00:04:31,820
upgrade from Windows 10 to Windows 11

136
00:04:31,820 --> 00:04:33,720
there's some changes to how the

137
00:04:33,720 --> 00:04:35,880
operating system sends that Telemetry to

138
00:04:35,880 --> 00:04:36,960
you so you have to make sure you're

139
00:04:36,960 --> 00:04:39,120
accounting for those types of things and

140
00:04:39,120 --> 00:04:40,680
then I think it's also important you

141
00:04:40,680 --> 00:04:42,300
have to to know when you have to say

142
00:04:42,300 --> 00:04:44,460
okay it's time to retire this because uh

143
00:04:44,460 --> 00:04:45,900
we're not really getting the value out

144
00:04:45,900 --> 00:04:48,060
of this this capability that that is

145
00:04:48,060 --> 00:04:49,560
required for us to continue maintaining

146
00:04:49,560 --> 00:04:51,660
it so that's at a very high level how I

147
00:04:51,660 --> 00:04:52,800
think about detection engineering

148
00:04:52,800 --> 00:04:54,720
there's people who might look at it

149
00:04:54,720 --> 00:04:55,500
differently or have different

150
00:04:55,500 --> 00:04:56,940
definitions but I think that's a good

151
00:04:56,940 --> 00:04:58,919
sort of Baseline that everybody can

152
00:04:58,919 --> 00:05:00,300
agree on

153
00:05:00,300 --> 00:05:03,660
So within that there's there's a lot of

154
00:05:03,660 --> 00:05:05,400
people who and and I'm sure that anybody

155
00:05:05,400 --> 00:05:06,540
who's ever worked in a sock has

156
00:05:06,540 --> 00:05:08,280
experienced some of these things there's

157
00:05:08,280 --> 00:05:10,560
a lot of of pitfalls that can happen

158
00:05:10,560 --> 00:05:11,880
when you start writing your own

159
00:05:11,880 --> 00:05:14,460
detection capabilities and and I've just

160
00:05:14,460 --> 00:05:16,080
put down a couple of things here that

161
00:05:16,080 --> 00:05:17,759
that we see

162
00:05:17,759 --> 00:05:19,740
folks struggling with right so first and

163
00:05:19,740 --> 00:05:22,860
foremost if somebody comes to uh to your

164
00:05:22,860 --> 00:05:25,320
sock right maybe you've got a CIO or a

165
00:05:25,320 --> 00:05:28,860
ciso or a CEO or director or uh somebody

166
00:05:28,860 --> 00:05:30,539
in your leadership comes into your

167
00:05:30,539 --> 00:05:32,280
security operations team and they say

168
00:05:32,280 --> 00:05:34,800
hey I just read about this thing on the

169
00:05:34,800 --> 00:05:35,639
news

170
00:05:35,639 --> 00:05:37,560
um can we detect that

171
00:05:37,560 --> 00:05:39,840
can you answer that like with confidence

172
00:05:39,840 --> 00:05:41,820
right can you say well I hope so because

173
00:05:41,820 --> 00:05:43,199
you know these tools should be

174
00:05:43,199 --> 00:05:44,460
maintaining those rules and I would hope

175
00:05:44,460 --> 00:05:45,900
that they would do it or can you

176
00:05:45,900 --> 00:05:47,340
confidently answer that question and say

177
00:05:47,340 --> 00:05:49,380
yes we have this rule that rule this

178
00:05:49,380 --> 00:05:51,660
capability to to look for this threat

179
00:05:51,660 --> 00:05:53,699
and we have it documented we know it's

180
00:05:53,699 --> 00:05:54,539
there

181
00:05:54,539 --> 00:05:58,440
or conversely if if you realize that

182
00:05:58,440 --> 00:05:59,940
um that you don't have that capability

183
00:05:59,940 --> 00:06:01,500
do you know how long you've been unable

184
00:06:01,500 --> 00:06:03,900
have you never had that capability or

185
00:06:03,900 --> 00:06:05,400
has that threat evolved in some way and

186
00:06:05,400 --> 00:06:07,259
you can go back and track like oh we had

187
00:06:07,259 --> 00:06:08,820
it and then last week something broke

188
00:06:08,820 --> 00:06:10,620
and now we need to go back and fix it

189
00:06:10,620 --> 00:06:12,600
and and we know that we have a gap of

190
00:06:12,600 --> 00:06:14,400
one week where something bad could have

191
00:06:14,400 --> 00:06:16,560
happened and we wouldn't have seen it

192
00:06:16,560 --> 00:06:18,960
so uh really it comes down to a handful

193
00:06:18,960 --> 00:06:20,220
of things you have ineffective rules

194
00:06:20,220 --> 00:06:21,660
people will write rules because they

195
00:06:21,660 --> 00:06:23,639
think that they work but you know they

196
00:06:23,639 --> 00:06:26,160
have no way of testing them or uh well

197
00:06:26,160 --> 00:06:27,479
I've seen a lot in my career somebody

198
00:06:27,479 --> 00:06:29,340
comes up with this great idea they write

199
00:06:29,340 --> 00:06:31,860
a new rule and now you're getting 10 000

200
00:06:31,860 --> 00:06:33,600
alerts because you accidentally wrote a

201
00:06:33,600 --> 00:06:35,340
rule that that sends alert every time a

202
00:06:35,340 --> 00:06:37,560
new file is written on the disk or every

203
00:06:37,560 --> 00:06:40,319
time a new process is kicked off

204
00:06:40,319 --> 00:06:41,819
um and then then on the other side

205
00:06:41,819 --> 00:06:43,919
sometimes you have this This brilliant

206
00:06:43,919 --> 00:06:45,539
detection engineer who's writing this

207
00:06:45,539 --> 00:06:47,400
this great Next Level you know detection

208
00:06:47,400 --> 00:06:49,740
logic and then they go home for the day

209
00:06:49,740 --> 00:06:51,360
and your overnight analyst gets an alert

210
00:06:51,360 --> 00:06:52,620
on their screen and they have no idea

211
00:06:52,620 --> 00:06:54,419
what it is right so this is a another

212
00:06:54,419 --> 00:06:56,759
problem in this practice is that there's

213
00:06:56,759 --> 00:06:58,560
not a lot of great documentation and a

214
00:06:58,560 --> 00:07:00,180
lot of folks don't really go through the

215
00:07:00,180 --> 00:07:02,400
rivers process to make sure that you

216
00:07:02,400 --> 00:07:03,900
know the knowledge isn't just living in

217
00:07:03,900 --> 00:07:05,400
their heads what to do when this bad

218
00:07:05,400 --> 00:07:06,660
thing happens

219
00:07:06,660 --> 00:07:09,360
and then finally uh I've seen this a lot

220
00:07:09,360 --> 00:07:10,919
when when looking at security operations

221
00:07:10,919 --> 00:07:13,199
centers where somebody goes in to make

222
00:07:13,199 --> 00:07:14,759
an update and they realize that they

223
00:07:14,759 --> 00:07:16,620
broke the rule but they have no idea on

224
00:07:16,620 --> 00:07:17,940
how to go back to the previous date

225
00:07:17,940 --> 00:07:19,319
right like I thought I'd just change

226
00:07:19,319 --> 00:07:21,419
this thing but now if I

227
00:07:21,419 --> 00:07:23,039
try to undo that it doesn't work the way

228
00:07:23,039 --> 00:07:24,180
it used to and I don't know what I

229
00:07:24,180 --> 00:07:25,979
actually did so these are these are

230
00:07:25,979 --> 00:07:28,139
common problems and and there's ways to

231
00:07:28,139 --> 00:07:30,599
to solve them right so the the approach

232
00:07:30,599 --> 00:07:32,699
that we take and that we recommend uh

233
00:07:32,699 --> 00:07:34,380
that anybody you know should take if

234
00:07:34,380 --> 00:07:35,819
they're doing this is detectors this

235
00:07:35,819 --> 00:07:38,300
code this has become a a pretty popular

236
00:07:38,300 --> 00:07:41,099
uh approach to these things and I think

237
00:07:41,099 --> 00:07:42,479
there was another talk today that was

238
00:07:42,479 --> 00:07:44,819
talking about policies this code so kind

239
00:07:44,819 --> 00:07:47,220
of the same thing there's a there's very

240
00:07:47,220 --> 00:07:50,099
well established uh and defined software

241
00:07:50,099 --> 00:07:51,960
engineering practices

242
00:07:51,960 --> 00:07:53,580
that really solve a lot of these same

243
00:07:53,580 --> 00:07:56,880
problems and and our belief is that we

244
00:07:56,880 --> 00:07:59,099
should be applying these these uh these

245
00:07:59,099 --> 00:08:01,319
techniques and these uh these ways of

246
00:08:01,319 --> 00:08:03,240
thinking to our detection engineering

247
00:08:03,240 --> 00:08:04,560
just as you do with with software

248
00:08:04,560 --> 00:08:05,699
engineering so

249
00:08:05,699 --> 00:08:08,940
uh first and foremost how do you track a

250
00:08:08,940 --> 00:08:10,139
requirement all the way to that

251
00:08:10,139 --> 00:08:12,240
implementation so how do you know what's

252
00:08:12,240 --> 00:08:13,560
in your backlog of here's the things

253
00:08:13,560 --> 00:08:14,940
that we need to develop and we need to

254
00:08:14,940 --> 00:08:17,039
have these capabilities and here's how

255
00:08:17,039 --> 00:08:19,800
you know we're moving along uh that

256
00:08:19,800 --> 00:08:23,099
practice and then also from the from the

257
00:08:23,099 --> 00:08:24,539
other side of it if you look at a rule

258
00:08:24,539 --> 00:08:27,000
within um within your detection platform

259
00:08:27,000 --> 00:08:29,280
whether it's a Sim or an eer or whatever

260
00:08:29,280 --> 00:08:31,560
can you go back and say what requirement

261
00:08:31,560 --> 00:08:33,360
was this actually solving like why does

262
00:08:33,360 --> 00:08:35,099
this thing exist and let me track it

263
00:08:35,099 --> 00:08:36,719
back who requested this and why and when

264
00:08:36,719 --> 00:08:38,640
and so on

265
00:08:38,640 --> 00:08:40,320
uh the second thing is is having good

266
00:08:40,320 --> 00:08:42,240
coding and documentation standards that

267
00:08:42,240 --> 00:08:44,099
way whether I write a rule or you know

268
00:08:44,099 --> 00:08:45,480
one of my colleagues writes a rule it

269
00:08:45,480 --> 00:08:47,580
all looks the same and anybody else can

270
00:08:47,580 --> 00:08:48,959
come in and read it and kind of

271
00:08:48,959 --> 00:08:50,220
understand what's going on and they know

272
00:08:50,220 --> 00:08:51,420
what to expect so having that

273
00:08:51,420 --> 00:08:53,459
standardization is is massively

274
00:08:53,459 --> 00:08:55,920
important uh having a way to control the

275
00:08:55,920 --> 00:08:58,920
source code making sure that you have a

276
00:08:58,920 --> 00:09:00,420
repository that you can go back and look

277
00:09:00,420 --> 00:09:02,100
historically of every change that's ever

278
00:09:02,100 --> 00:09:03,899
been made to this and sort of see that

279
00:09:03,899 --> 00:09:07,500
life cycle uh unit testing you know when

280
00:09:07,500 --> 00:09:08,820
you write a rule how do you know that it

281
00:09:08,820 --> 00:09:10,019
works before you just shove it into

282
00:09:10,019 --> 00:09:11,760
production and hope for the best

283
00:09:11,760 --> 00:09:14,399
and then finally how do you control that

284
00:09:14,399 --> 00:09:16,019
deployment process so you know that it

285
00:09:16,019 --> 00:09:17,339
gets deployed everywhere that it's

286
00:09:17,339 --> 00:09:18,480
supposed to

287
00:09:18,480 --> 00:09:20,760
so ultimately what's happened in the

288
00:09:20,760 --> 00:09:22,680
past is you know click Ops right

289
00:09:22,680 --> 00:09:24,300
somebody will log into the platform

290
00:09:24,300 --> 00:09:25,980
they'll make a change they'll hit save

291
00:09:25,980 --> 00:09:27,540
and there's no record of that happening

292
00:09:27,540 --> 00:09:29,940
nobody really knows that it happened and

293
00:09:29,940 --> 00:09:31,380
you know you just hope that it doesn't

294
00:09:31,380 --> 00:09:32,640
destroy anything and that's that's

295
00:09:32,640 --> 00:09:34,080
caused a lot of problems for a lot of

296
00:09:34,080 --> 00:09:36,300
Security operation centers so I want to

297
00:09:36,300 --> 00:09:37,680
talk a little bit about the way that we

298
00:09:37,680 --> 00:09:39,660
approach this we we run a managed

299
00:09:39,660 --> 00:09:41,279
detection and response service so we're

300
00:09:41,279 --> 00:09:43,320
this is a big piece of our business and

301
00:09:43,320 --> 00:09:44,580
we've learned a lot of lessons along the

302
00:09:44,580 --> 00:09:45,839
way because we've done things the wrong

303
00:09:45,839 --> 00:09:48,260
way and uh and suffered the consequences

304
00:09:48,260 --> 00:09:50,519
so we just want to talk through our

305
00:09:50,519 --> 00:09:52,920
approach of how do we go from from an

306
00:09:52,920 --> 00:09:55,920
idea to a detection capability and and

307
00:09:55,920 --> 00:09:57,899
uh and get that into production in a

308
00:09:57,899 --> 00:10:00,060
safe way that's that's actually scalable

309
00:10:00,060 --> 00:10:02,700
so I don't want to read all these

310
00:10:02,700 --> 00:10:04,920
bullets on this slide but at a very high

311
00:10:04,920 --> 00:10:07,019
level it's it's a four-step sort of

312
00:10:07,019 --> 00:10:08,760
continuous cycle somebody will come to

313
00:10:08,760 --> 00:10:11,220
us and say hey we've got an idea of

314
00:10:11,220 --> 00:10:12,360
something that we need to be able to

315
00:10:12,360 --> 00:10:14,459
detect and that could be somebody from a

316
00:10:14,459 --> 00:10:16,800
threat Intel perspective that could be

317
00:10:16,800 --> 00:10:18,300
one of our pin testers who just came

318
00:10:18,300 --> 00:10:19,500
across this new technique or maybe

319
00:10:19,500 --> 00:10:20,880
they're developing their own techniques

320
00:10:20,880 --> 00:10:22,680
it could be somebody who just read a

321
00:10:22,680 --> 00:10:24,540
news article somewhere and just wants to

322
00:10:24,540 --> 00:10:26,339
know you know do we have coverage for

323
00:10:26,339 --> 00:10:28,560
this or could we have coverage anybody

324
00:10:28,560 --> 00:10:30,240
can do that and that could also be a

325
00:10:30,240 --> 00:10:31,740
tuning request so maybe you have a sock

326
00:10:31,740 --> 00:10:35,040
analyst who says we've got a lot of of a

327
00:10:35,040 --> 00:10:36,600
lot of false positives that keep hitting

328
00:10:36,600 --> 00:10:38,820
on on the system and we're getting way

329
00:10:38,820 --> 00:10:40,440
too many alerts can we can we tune this

330
00:10:40,440 --> 00:10:42,120
out or make some changes to this rule so

331
00:10:42,120 --> 00:10:44,760
somebody identifies a need right and

332
00:10:44,760 --> 00:10:46,500
then it moves over into our detection

333
00:10:46,500 --> 00:10:47,820
engineering team where they will

334
00:10:47,820 --> 00:10:50,279
actually you know create the logic uh

335
00:10:50,279 --> 00:10:52,019
they need to make sure that you know

336
00:10:52,019 --> 00:10:53,339
they're they're documenting it and

337
00:10:53,339 --> 00:10:55,560
putting it into the platform the way

338
00:10:55,560 --> 00:10:57,480
that it needs to be done they're going

339
00:10:57,480 --> 00:10:58,920
to perform some testing because we don't

340
00:10:58,920 --> 00:11:00,959
want to just you know write something

341
00:11:00,959 --> 00:11:02,399
and hope that it works right we're going

342
00:11:02,399 --> 00:11:03,360
to put it out there we're going to test

343
00:11:03,360 --> 00:11:05,519
it and make sure that it's doing

344
00:11:05,519 --> 00:11:06,839
everything we think we're doing and then

345
00:11:06,839 --> 00:11:08,459
we're going to deploy it and monitor and

346
00:11:08,459 --> 00:11:10,200
and make sure that we keep an eye on

347
00:11:10,200 --> 00:11:12,240
that to make sure that it's continuing

348
00:11:12,240 --> 00:11:13,800
to do what we want it to do and it's not

349
00:11:13,800 --> 00:11:16,019
just overwhelming our team so that's a

350
00:11:16,019 --> 00:11:18,300
very very high level overview uh and so

351
00:11:18,300 --> 00:11:20,100
so here's how we do it right

352
00:11:20,100 --> 00:11:23,100
so first and foremost

353
00:11:23,100 --> 00:11:25,140
creating a new issue we use jira because

354
00:11:25,140 --> 00:11:26,459
again we're trying to approach this like

355
00:11:26,459 --> 00:11:28,320
software engineering uh jira you know

356
00:11:28,320 --> 00:11:29,760
gets a lot of hate from a lot of folks

357
00:11:29,760 --> 00:11:32,519
but ultimately it is pretty good from uh

358
00:11:32,519 --> 00:11:34,200
doing the things that we want to do here

359
00:11:34,200 --> 00:11:36,959
and we have a template that has to be

360
00:11:36,959 --> 00:11:38,220
filled out in order for anything to get

361
00:11:38,220 --> 00:11:39,540
done with this so somebody can't just

362
00:11:39,540 --> 00:11:42,720
come in and say uh you know OneNote and

363
00:11:42,720 --> 00:11:45,060
then like leave a a ticket there that

364
00:11:45,060 --> 00:11:47,279
makes no sense to anybody else so we

365
00:11:47,279 --> 00:11:48,899
want to know why why should this

366
00:11:48,899 --> 00:11:51,420
activity be detected put some labels on

367
00:11:51,420 --> 00:11:53,220
it right is this Windows because we have

368
00:11:53,220 --> 00:11:55,380
folks who do windows it's a Linux is it

369
00:11:55,380 --> 00:11:56,940
you know some Cloud platform is this an

370
00:11:56,940 --> 00:11:59,880
EDR tool whatever it may be and then

371
00:11:59,880 --> 00:12:01,800
just links to reference material so it's

372
00:12:01,800 --> 00:12:02,579
not

373
00:12:02,579 --> 00:12:04,620
you know we're not trying to to create a

374
00:12:04,620 --> 00:12:06,899
massive amount of work for folks but

375
00:12:06,899 --> 00:12:08,820
there has to be some rigor in this and I

376
00:12:08,820 --> 00:12:10,200
think that last piece is is really

377
00:12:10,200 --> 00:12:11,640
important of having some sort of

378
00:12:11,640 --> 00:12:13,380
reference we don't want somebody to just

379
00:12:13,380 --> 00:12:15,600
go post an idea somewhere um this needs

380
00:12:15,600 --> 00:12:17,579
to be validated in some point and that

381
00:12:17,579 --> 00:12:19,500
can be a that can be a tweet or it can

382
00:12:19,500 --> 00:12:22,019
be a mastodon uh tude I guess is what

383
00:12:22,019 --> 00:12:23,820
they call them or it can be a blog post

384
00:12:23,820 --> 00:12:26,220
from from some other organization or it

385
00:12:26,220 --> 00:12:28,260
can be you know white paper but there

386
00:12:28,260 --> 00:12:29,880
needs to be something for our our

387
00:12:29,880 --> 00:12:31,200
detection Engineers to be able to look

388
00:12:31,200 --> 00:12:32,640
at and say okay what's the actual threat

389
00:12:32,640 --> 00:12:34,140
and how do we actually want to to be

390
00:12:34,140 --> 00:12:36,899
able to do this so we learned we used to

391
00:12:36,899 --> 00:12:38,579
have a ton more fields we would have to

392
00:12:38,579 --> 00:12:40,920
you know fill out and you know

393
00:12:40,920 --> 00:12:42,360
effectively what it did is nobody wanted

394
00:12:42,360 --> 00:12:43,980
to do it because it was too much work so

395
00:12:43,980 --> 00:12:46,440
they would just you know not not do that

396
00:12:46,440 --> 00:12:48,240
right so we learned that we really have

397
00:12:48,240 --> 00:12:50,160
to try to keep this simple and what are

398
00:12:50,160 --> 00:12:51,720
the things that we actually need to have

399
00:12:51,720 --> 00:12:53,700
in order for this to be useful and then

400
00:12:53,700 --> 00:12:55,620
just get rid of everything else

401
00:12:55,620 --> 00:12:57,959
we also learned that we can't just do

402
00:12:57,959 --> 00:13:00,360
this for new ideas right we had to do

403
00:13:00,360 --> 00:13:02,459
this for for tuning requests so if

404
00:13:02,459 --> 00:13:04,200
you've got a rule that's firing too much

405
00:13:04,200 --> 00:13:06,120
and you want to make a change to it any

406
00:13:06,120 --> 00:13:08,040
sort of change to our code any sort of

407
00:13:08,040 --> 00:13:10,320
change to production has to have a

408
00:13:10,320 --> 00:13:11,880
ticket associated with it and we'll walk

409
00:13:11,880 --> 00:13:14,040
through how that works later and then

410
00:13:14,040 --> 00:13:15,480
we've also learned and we'll go through

411
00:13:15,480 --> 00:13:16,740
this a little bit later using smart

412
00:13:16,740 --> 00:13:18,120
commits that way if you look in our

413
00:13:18,120 --> 00:13:19,800
GitHub repository you can link anything

414
00:13:19,800 --> 00:13:22,260
back to to the ticket and who requested

415
00:13:22,260 --> 00:13:24,720
it and when and things like that so

416
00:13:24,720 --> 00:13:26,399
um so that's the first phase we need to

417
00:13:26,399 --> 00:13:27,959
have an idea this is where it starts and

418
00:13:27,959 --> 00:13:29,459
somebody says we need to detect this

419
00:13:29,459 --> 00:13:31,139
thing and I need somebody to go figure

420
00:13:31,139 --> 00:13:32,880
out how to do that and they'll pass it

421
00:13:32,880 --> 00:13:33,720
off

422
00:13:33,720 --> 00:13:36,540
so the next phase is is the detector

423
00:13:36,540 --> 00:13:38,639
development piece so this is where we're

424
00:13:38,639 --> 00:13:40,860
going to put in the logic that says if

425
00:13:40,860 --> 00:13:42,779
these things happen on the system or if

426
00:13:42,779 --> 00:13:44,579
these things happen on a network or if

427
00:13:44,579 --> 00:13:46,200
these you know log entries get created

428
00:13:46,200 --> 00:13:48,480
In This Cloud environment then we want

429
00:13:48,480 --> 00:13:50,100
to trigger an alert to our security

430
00:13:50,100 --> 00:13:52,680
operations team right so there's there's

431
00:13:52,680 --> 00:13:55,920
that that detection logic piece but but

432
00:13:55,920 --> 00:13:57,420
we went a step further and we said we

433
00:13:57,420 --> 00:13:59,639
need to to create a template that

434
00:13:59,639 --> 00:14:01,220
captures more information because

435
00:14:01,220 --> 00:14:04,560
ultimately if an analyst gets an alert

436
00:14:04,560 --> 00:14:05,639
in the middle of the night and the

437
00:14:05,639 --> 00:14:07,139
person who wrote that rule is not around

438
00:14:07,139 --> 00:14:09,120
they need to be able to know what to do

439
00:14:09,120 --> 00:14:10,320
with that without having to pick up the

440
00:14:10,320 --> 00:14:13,260
phone and call somebody right so so we

441
00:14:13,260 --> 00:14:15,000
created a very simple tip it's all just

442
00:14:15,000 --> 00:14:17,459
uh it's all in yaml and we just give it

443
00:14:17,459 --> 00:14:19,560
a a name right just a human readable

444
00:14:19,560 --> 00:14:22,320
name here's what's happening uh a status

445
00:14:22,320 --> 00:14:25,260
so we can it can be active you know in

446
00:14:25,260 --> 00:14:27,480
testing or it can be archived in

447
00:14:27,480 --> 00:14:28,740
metadata and this is where it's really

448
00:14:28,740 --> 00:14:30,600
important so we want to tag it with you

449
00:14:30,600 --> 00:14:33,060
know the miter attack framework IDs that

450
00:14:33,060 --> 00:14:35,399
are associated with but we want a plain

451
00:14:35,399 --> 00:14:37,079
English subscription of if you see this

452
00:14:37,079 --> 00:14:38,639
fire here's the things that you need to

453
00:14:38,639 --> 00:14:41,519
go look at and here's the um you know

454
00:14:41,519 --> 00:14:43,860
here's some some maybe cases where this

455
00:14:43,860 --> 00:14:45,959
could be benign activity and here's a

456
00:14:45,959 --> 00:14:47,519
Surefire sign so this is malicious

457
00:14:47,519 --> 00:14:49,199
activity and it needs to be actioned and

458
00:14:49,199 --> 00:14:50,279
here's some steps that you should be

459
00:14:50,279 --> 00:14:52,459
taking in order to investigate because

460
00:14:52,459 --> 00:14:55,260
if anybody from our most Junior analyst

461
00:14:55,260 --> 00:14:56,579
or our most senior analyst needs to be

462
00:14:56,579 --> 00:14:57,899
able to get this alert look at it and

463
00:14:57,899 --> 00:14:59,279
know what to do with it in order for it

464
00:14:59,279 --> 00:15:01,139
to really be useful and and in order for

465
00:15:01,139 --> 00:15:02,519
us to do our job

466
00:15:02,519 --> 00:15:05,100
uh the actual detection logic and then

467
00:15:05,100 --> 00:15:07,680
we also have built a capability to do

468
00:15:07,680 --> 00:15:09,779
unit testing so we want to make sure

469
00:15:09,779 --> 00:15:13,380
that anything before any detector goes

470
00:15:13,380 --> 00:15:15,120
into our into our production environment

471
00:15:15,120 --> 00:15:17,579
that we have ways to test and Ensure

472
00:15:17,579 --> 00:15:18,899
that this thing is actually going to

473
00:15:18,899 --> 00:15:21,060
fire when it needs to or if it's a

474
00:15:21,060 --> 00:15:22,560
tuning request we want to make sure that

475
00:15:22,560 --> 00:15:24,360
it's going to stop firing in the way

476
00:15:24,360 --> 00:15:25,980
that we want to while also still

477
00:15:25,980 --> 00:15:27,420
catching the things that we that we

478
00:15:27,420 --> 00:15:30,839
wanted to to test so if you're not

479
00:15:30,839 --> 00:15:32,399
familiar with unit testing in software

480
00:15:32,399 --> 00:15:33,420
engineering

481
00:15:33,420 --> 00:15:35,579
if you develop a piece of code

482
00:15:35,579 --> 00:15:37,740
you'll do some sort of unit testing and

483
00:15:37,740 --> 00:15:40,440
basically what it does at a very

484
00:15:40,440 --> 00:15:42,420
oversimplified level that says if I send

485
00:15:42,420 --> 00:15:44,519
this input to this function this is what

486
00:15:44,519 --> 00:15:47,160
I expect back right and just do that

487
00:15:47,160 --> 00:15:48,720
over and over with a bunch of predefined

488
00:15:48,720 --> 00:15:50,459
data and if it ever gives you something

489
00:15:50,459 --> 00:15:51,779
unexpected then you know something

490
00:15:51,779 --> 00:15:53,699
broken it's not working correctly and

491
00:15:53,699 --> 00:15:54,959
we'll go through an example of what that

492
00:15:54,959 --> 00:15:56,579
actually looks like in practice but

493
00:15:56,579 --> 00:15:57,660
ultimately that's what we're trying to

494
00:15:57,660 --> 00:15:58,860
do is we want to make sure that no

495
00:15:58,860 --> 00:16:00,420
matter you know what changes somebody

496
00:16:00,420 --> 00:16:02,519
makes it can't get into production if

497
00:16:02,519 --> 00:16:03,660
it's not working the way it's supposed

498
00:16:03,660 --> 00:16:05,459
to and we can't trust humans to do that

499
00:16:05,459 --> 00:16:07,800
accurately every time so we we automate

500
00:16:07,800 --> 00:16:09,959
that and make it part of the machine

501
00:16:09,959 --> 00:16:13,320
so again going through the testing phase

502
00:16:13,320 --> 00:16:15,839
uh does it detect what you want it to

503
00:16:15,839 --> 00:16:16,680
detect

504
00:16:16,680 --> 00:16:18,779
does it not detect the things that you

505
00:16:18,779 --> 00:16:21,060
specifically want it to not detect and

506
00:16:21,060 --> 00:16:23,160
is it resilient enough to to withstand

507
00:16:23,160 --> 00:16:25,320
evasion tactics right if I just change

508
00:16:25,320 --> 00:16:27,779
the capitalization of this command or I

509
00:16:27,779 --> 00:16:28,980
you know put it in quotes or something

510
00:16:28,980 --> 00:16:31,260
like that does that completely break the

511
00:16:31,260 --> 00:16:32,940
ability for me to detect this logic so

512
00:16:32,940 --> 00:16:33,899
we need to make sure that we're not

513
00:16:33,899 --> 00:16:35,940
writing what we call brutal rules that

514
00:16:35,940 --> 00:16:38,639
are just easily broken and bypassed

515
00:16:38,639 --> 00:16:41,160
so uh some some interesting lessons

516
00:16:41,160 --> 00:16:43,079
we've learned here for folks who've not

517
00:16:43,079 --> 00:16:44,279
done this before we learned that we need

518
00:16:44,279 --> 00:16:46,380
to just have a generic false positive

519
00:16:46,380 --> 00:16:48,000
alert on every

520
00:16:48,000 --> 00:16:49,680
um on every detection because we have

521
00:16:49,680 --> 00:16:51,720
definitely written uh rules that will

522
00:16:51,720 --> 00:16:53,519
fire on every network connection or

523
00:16:53,519 --> 00:16:56,519
every new process and when that happens

524
00:16:56,519 --> 00:16:58,680
in production it causes all sorts of fun

525
00:16:58,680 --> 00:17:00,600
and exciting problems so we've learned

526
00:17:00,600 --> 00:17:02,639
that anytime that we put something in

527
00:17:02,639 --> 00:17:03,779
there we're just going to have a generic

528
00:17:03,779 --> 00:17:05,939
false positive that way we know that

529
00:17:05,939 --> 00:17:08,280
it's not going to to trigger on every

530
00:17:08,280 --> 00:17:10,140
possible event that comes across

531
00:17:10,140 --> 00:17:13,079
uh and when we started doing this we

532
00:17:13,079 --> 00:17:14,699
originally had a whole process that

533
00:17:14,699 --> 00:17:16,380
would spin up you know these networks

534
00:17:16,380 --> 00:17:18,000
and it would go and automate these uh

535
00:17:18,000 --> 00:17:19,619
these attack paths

536
00:17:19,619 --> 00:17:21,540
and we would use that as part of our

537
00:17:21,540 --> 00:17:23,760
testing and it was one of his expensive

538
00:17:23,760 --> 00:17:26,099
but it was also really cumbersome and it

539
00:17:26,099 --> 00:17:28,079
took our team a long time to put new

540
00:17:28,079 --> 00:17:29,160
capabilities out there because they

541
00:17:29,160 --> 00:17:31,679
would have to spend a day or a few days

542
00:17:31,679 --> 00:17:33,900
you know designing this attack and then

543
00:17:33,900 --> 00:17:35,820
figuring out how to replicate it and

544
00:17:35,820 --> 00:17:37,500
spin it up and then every time we we

545
00:17:37,500 --> 00:17:38,940
push something new to production we

546
00:17:38,940 --> 00:17:40,380
would have to test it and it just got

547
00:17:40,380 --> 00:17:43,559
super super cumbersome so we had to

548
00:17:43,559 --> 00:17:45,240
really work with with our team and our

549
00:17:45,240 --> 00:17:47,760
partners on the vendor side to to really

550
00:17:47,760 --> 00:17:49,919
close those feedback loops and help our

551
00:17:49,919 --> 00:17:51,660
detection Engineers know if their if

552
00:17:51,660 --> 00:17:53,039
their tools were working

553
00:17:53,039 --> 00:17:54,179
um more quickly and we'll talk a little

554
00:17:54,179 --> 00:17:56,460
bit about that here in a second

555
00:17:56,460 --> 00:17:58,919
and then then the Final Phase is the

556
00:17:58,919 --> 00:18:01,860
deployment of these rules so once uh

557
00:18:01,860 --> 00:18:03,299
once somebody has written a rule they're

558
00:18:03,299 --> 00:18:05,820
pretty happy about it we want to have a

559
00:18:05,820 --> 00:18:07,440
very controlled process of how does this

560
00:18:07,440 --> 00:18:09,720
go from from a developer's workstation

561
00:18:09,720 --> 00:18:13,080
into uh into the production environment

562
00:18:13,080 --> 00:18:15,780
and for that we use git so if anybody

563
00:18:15,780 --> 00:18:17,940
here is familiar with GitHub or if

564
00:18:17,940 --> 00:18:19,740
you've ever done this in an Enterprise

565
00:18:19,740 --> 00:18:21,419
environment you know there's very simple

566
00:18:21,419 --> 00:18:23,700
things you can do of just being able to

567
00:18:23,700 --> 00:18:25,740
commit your code uh you know to a

568
00:18:25,740 --> 00:18:27,179
repository and it gets saved there and

569
00:18:27,179 --> 00:18:29,400
you can see the entire version history

570
00:18:29,400 --> 00:18:31,380
of that code but in an Enterprise

571
00:18:31,380 --> 00:18:32,580
environment there's a lot more things

572
00:18:32,580 --> 00:18:34,200
you can do that that are very useful

573
00:18:34,200 --> 00:18:37,679
from a security perspective so uh first

574
00:18:37,679 --> 00:18:39,679
and foremost you can have an enforce

575
00:18:39,679 --> 00:18:42,900
verified commits so we have this set up

576
00:18:42,900 --> 00:18:44,520
in our in our repo where if somebody

577
00:18:44,520 --> 00:18:47,400
doesn't digitally sign their code then

578
00:18:47,400 --> 00:18:49,080
it just doesn't go up there right so we

579
00:18:49,080 --> 00:18:51,299
want to make sure worst case scenario I

580
00:18:51,299 --> 00:18:52,740
do a lot of incident response work and

581
00:18:52,740 --> 00:18:54,240
I'm always paranoid of what happens if

582
00:18:54,240 --> 00:18:55,740
somebody breaks into this account or

583
00:18:55,740 --> 00:18:57,539
into the system or whatever so I'm

584
00:18:57,539 --> 00:18:58,860
always trying to think about ways that

585
00:18:58,860 --> 00:19:00,720
we can protect that so you can make sure

586
00:19:00,720 --> 00:19:03,200
that you have to to verify those commits

587
00:19:03,200 --> 00:19:05,880
smart commits is a feature within GitHub

588
00:19:05,880 --> 00:19:07,860
and jira where you can actually link the

589
00:19:07,860 --> 00:19:10,380
two so you can see any you know version

590
00:19:10,380 --> 00:19:12,720
history of of your code you can link it

591
00:19:12,720 --> 00:19:13,919
back to that ticket we talked about

592
00:19:13,919 --> 00:19:15,900
earlier and then you can say okay well

593
00:19:15,900 --> 00:19:17,820
this piece of code was written to

594
00:19:17,820 --> 00:19:19,980
address this requirement and be able to

595
00:19:19,980 --> 00:19:21,840
map it back and forth and it's useful

596
00:19:21,840 --> 00:19:23,580
for troubleshooting but frankly it's

597
00:19:23,580 --> 00:19:25,740
mostly useful for Auditors so if anybody

598
00:19:25,740 --> 00:19:27,679
has gone through a sock 2 type of

599
00:19:27,679 --> 00:19:29,700
assessment Auditors want to see tickets

600
00:19:29,700 --> 00:19:31,200
for everything and have this evidence

601
00:19:31,200 --> 00:19:33,360
and it makes that a breeze and Auditors

602
00:19:33,360 --> 00:19:34,740
think that it's the the greatest thing

603
00:19:34,740 --> 00:19:38,280
ever so that's that's super useful again

604
00:19:38,280 --> 00:19:40,020
our unit testing so we want our

605
00:19:40,020 --> 00:19:41,760
developers to test things on their

606
00:19:41,760 --> 00:19:43,679
systems before they deploy anything but

607
00:19:43,679 --> 00:19:45,360
before it actually gets into production

608
00:19:45,360 --> 00:19:46,679
we want

609
00:19:46,679 --> 00:19:49,020
to be able to automate that and it's

610
00:19:49,020 --> 00:19:50,340
just not allowed to go into production

611
00:19:50,340 --> 00:19:51,780
if it doesn't pass all those tests right

612
00:19:51,780 --> 00:19:52,860
here

613
00:19:52,860 --> 00:19:54,419
and then we have code review so we can

614
00:19:54,419 --> 00:19:56,340
say this can't go into production unless

615
00:19:56,340 --> 00:19:58,380
two or three other people review it and

616
00:19:58,380 --> 00:20:00,299
give it the okay right so no one person

617
00:20:00,299 --> 00:20:02,580
can go and make changes to our

618
00:20:02,580 --> 00:20:04,140
environment there's got to be a

619
00:20:04,140 --> 00:20:06,179
multi-person verification that this is a

620
00:20:06,179 --> 00:20:07,740
good idea and then the automated

621
00:20:07,740 --> 00:20:09,000
deployment so once all those things

622
00:20:09,000 --> 00:20:10,919
happen and once all those boxes are

623
00:20:10,919 --> 00:20:12,900
checked then it just goes right and you

624
00:20:12,900 --> 00:20:14,520
don't have to go through and and click

625
00:20:14,520 --> 00:20:16,500
around in the in the interface uh

626
00:20:16,500 --> 00:20:18,539
several times so

627
00:20:18,539 --> 00:20:20,160
that's that's kind of what it looks like

628
00:20:20,160 --> 00:20:22,320
I was going to do a demo and then uh

629
00:20:22,320 --> 00:20:24,480
then we realized that uh that I wasn't

630
00:20:24,480 --> 00:20:25,799
going to be doing this off my laptop so

631
00:20:25,799 --> 00:20:28,440
I recorded a video and I think this is

632
00:20:28,440 --> 00:20:30,780
going to work but I'm going to ask uh AV

633
00:20:30,780 --> 00:20:32,340
folks here to play it and I'll just kind

634
00:20:32,340 --> 00:20:33,500
of talk through it but I wanted to show

635
00:20:33,500 --> 00:20:36,240
a uh an example of what does this look

636
00:20:36,240 --> 00:20:38,640
like from start to finish so

637
00:20:38,640 --> 00:20:42,660
um I chose a uh an example of uh of a

638
00:20:42,660 --> 00:20:43,919
very current attack and if you can just

639
00:20:43,919 --> 00:20:48,000
pause it here so uh so one note has

640
00:20:48,000 --> 00:20:50,880
become a very popular Threat Vector here

641
00:20:50,880 --> 00:20:52,559
recently the threat actors have realized

642
00:20:52,559 --> 00:20:54,720
that Microsoft put all these controls in

643
00:20:54,720 --> 00:20:56,280
place to prevent people from emailing

644
00:20:56,280 --> 00:20:57,840
Excel documents or Microsoft Word

645
00:20:57,840 --> 00:20:59,880
documents and using them for malicious

646
00:20:59,880 --> 00:21:01,500
behavior

647
00:21:01,500 --> 00:21:03,840
nobody did anything with OneNote some

648
00:21:03,840 --> 00:21:05,400
bad guys realized that and they said hey

649
00:21:05,400 --> 00:21:06,840
we should totally use this to send

650
00:21:06,840 --> 00:21:08,039
phishing emails and they've started

651
00:21:08,039 --> 00:21:09,480
doing it so

652
00:21:09,480 --> 00:21:10,799
um this is from a while ago but we

653
00:21:10,799 --> 00:21:13,620
recreated this so it starts by creating

654
00:21:13,620 --> 00:21:15,299
our our ticket right so we've got this

655
00:21:15,299 --> 00:21:17,520
Jiro ticket that says we need to catch

656
00:21:17,520 --> 00:21:19,260
one note spawning shells which is one of

657
00:21:19,260 --> 00:21:21,240
several ways that threat actors can

658
00:21:21,240 --> 00:21:22,380
abuse us

659
00:21:22,380 --> 00:21:24,840
and you'll see here that uh I put in a

660
00:21:24,840 --> 00:21:26,280
quick description of what we're actually

661
00:21:26,280 --> 00:21:28,799
trying to catch and then uh some

662
00:21:28,799 --> 00:21:30,179
references at the bottom so there's one

663
00:21:30,179 --> 00:21:32,400
from proof point one from four core that

664
00:21:32,400 --> 00:21:33,960
talks about you know how these attacks

665
00:21:33,960 --> 00:21:34,740
work so you can go ahead and start

666
00:21:34,740 --> 00:21:36,000
playing again

667
00:21:36,000 --> 00:21:39,240
and then uh as I do that I'm a detection

668
00:21:39,240 --> 00:21:40,679
engineer so I'm going to mark this as in

669
00:21:40,679 --> 00:21:42,299
progress and I'm going to create a new

670
00:21:42,299 --> 00:21:45,360
branch in our in our GitHub repo so

671
00:21:45,360 --> 00:21:47,159
again this allows us to make some

672
00:21:47,159 --> 00:21:48,780
changes to the code and then be able to

673
00:21:48,780 --> 00:21:49,980
merge them in later

674
00:21:49,980 --> 00:21:53,760
so this is uh this is vs code and I'm

675
00:21:53,760 --> 00:21:55,140
going to you know create this new branch

676
00:21:55,140 --> 00:21:56,159
and now I'm gonna go start making

677
00:21:56,159 --> 00:21:58,799
changes to the actual code I know that

678
00:21:58,799 --> 00:22:01,320
this this particular rule right now it

679
00:22:01,320 --> 00:22:02,880
has a bunch of logic in it to detect

680
00:22:02,880 --> 00:22:04,520
shells spawning out of Microsoft

681
00:22:04,520 --> 00:22:07,020
processes but we want to add one note

682
00:22:07,020 --> 00:22:08,340
but before I do that I'm going to test

683
00:22:08,340 --> 00:22:10,980
it once so I'm going to fire up OneNote

684
00:22:10,980 --> 00:22:13,559
in our detection station and I'm trying

685
00:22:13,559 --> 00:22:15,539
to figure out how can I create a

686
00:22:15,539 --> 00:22:17,039
malicious attachment without having to

687
00:22:17,039 --> 00:22:19,440
go in and download actual malware and

688
00:22:19,440 --> 00:22:22,140
again this is a very uh compressed

689
00:22:22,140 --> 00:22:24,659
version of this but the easiest way I

690
00:22:24,659 --> 00:22:26,580
figured was just to put my own malicious

691
00:22:26,580 --> 00:22:28,500
link inside of the uh

692
00:22:28,500 --> 00:22:30,960
inside of the document so I'm going to

693
00:22:30,960 --> 00:22:32,760
create a shortcut to the command prompt

694
00:22:32,760 --> 00:22:33,960
on my desktop

695
00:22:33,960 --> 00:22:35,580
I'm going to look at the uh the

696
00:22:35,580 --> 00:22:36,960
properties here

697
00:22:36,960 --> 00:22:38,700
and what you can do with uh with link

698
00:22:38,700 --> 00:22:40,799
files uh

699
00:22:40,799 --> 00:22:42,240
and I'll just let this go and then we'll

700
00:22:42,240 --> 00:22:43,260
go ahead and can we go ahead and pause

701
00:22:43,260 --> 00:22:46,440
it here so if you create a link file on

702
00:22:46,440 --> 00:22:49,140
Windows this is a fairly common uh

703
00:22:49,140 --> 00:22:50,940
tactic these days

704
00:22:50,940 --> 00:22:53,220
uh you can just create a link file to

705
00:22:53,220 --> 00:22:54,659
the command prompt and then tell the

706
00:22:54,659 --> 00:22:55,740
command prompt to do whatever you want

707
00:22:55,740 --> 00:22:58,320
to and it you know it looks normal to a

708
00:22:58,320 --> 00:22:59,520
user right so they click on it it's

709
00:22:59,520 --> 00:23:01,679
going to do this thing so I modified the

710
00:23:01,679 --> 00:23:04,500
shortcut to to just run the command do

711
00:23:04,500 --> 00:23:07,140
evil I need sandwiches and that doesn't

712
00:23:07,140 --> 00:23:08,820
actually do anything but it's it's a

713
00:23:08,820 --> 00:23:11,340
close enough approximation to

714
00:23:11,340 --> 00:23:12,720
um what an actual attack looks like so

715
00:23:12,720 --> 00:23:15,179
you can go ahead and play

716
00:23:15,179 --> 00:23:17,820
so I'm going to make these changes to

717
00:23:17,820 --> 00:23:18,780
the

718
00:23:18,780 --> 00:23:20,400
um to the thing and I decided I was

719
00:23:20,400 --> 00:23:21,539
going to change it to Ampersand here

720
00:23:21,539 --> 00:23:23,220
because that's better you know

721
00:23:23,220 --> 00:23:24,900
formatting for for Windows commands even

722
00:23:24,900 --> 00:23:26,520
though it's not a valid command but

723
00:23:26,520 --> 00:23:28,020
anyway I'm just going to drag that into

724
00:23:28,020 --> 00:23:30,179
into my OneNote and I'm going to click

725
00:23:30,179 --> 00:23:32,460
it because I'm a user who got this and I

726
00:23:32,460 --> 00:23:33,840
was told to click it so I click it and I

727
00:23:33,840 --> 00:23:36,720
open it right now I've got a EDR sensor

728
00:23:36,720 --> 00:23:38,880
on this and I'm going to move over to

729
00:23:38,880 --> 00:23:41,280
another window and we use a tool called

730
00:23:41,280 --> 00:23:43,500
lima charlie as one of our EDR vendors

731
00:23:43,500 --> 00:23:47,400
so if you pause it here so right here

732
00:23:47,400 --> 00:23:49,020
what you're looking at is our Dev

733
00:23:49,020 --> 00:23:51,299
environment and the system that I

734
00:23:51,299 --> 00:23:54,120
created this this test attack on has an

735
00:23:54,120 --> 00:23:55,500
EDR agent running on it that's

736
00:23:55,500 --> 00:23:57,000
collecting all this Telemetry so when I

737
00:23:57,000 --> 00:23:58,860
clicked on that you'll see here on the

738
00:23:58,860 --> 00:24:00,480
right there's some Json and it's kind of

739
00:24:00,480 --> 00:24:02,340
hard to read but basically this says

740
00:24:02,340 --> 00:24:06,659
that uh the command cmd.exe C do evil on

741
00:24:06,659 --> 00:24:09,900
these sandwiches was run from the

742
00:24:09,900 --> 00:24:13,200
Microsoft OneNote command so Microsoft

743
00:24:13,200 --> 00:24:14,640
OneNote as a parent

744
00:24:14,640 --> 00:24:18,120
and that command prompt is the child and

745
00:24:18,120 --> 00:24:19,320
that's what we're going to look for here

746
00:24:19,320 --> 00:24:22,320
so another another big piece of how we

747
00:24:22,320 --> 00:24:24,240
think about detection engineering is we

748
00:24:24,240 --> 00:24:26,100
want to look for these weird patterns of

749
00:24:26,100 --> 00:24:27,780
behavior that should never happen in

750
00:24:27,780 --> 00:24:29,640
order for us to find bad things so I

751
00:24:29,640 --> 00:24:30,900
don't care what's in that one note

752
00:24:30,900 --> 00:24:33,179
document I don't know I'm not going to

753
00:24:33,179 --> 00:24:35,640
write an antivirus rule to catch every

754
00:24:35,640 --> 00:24:38,220
possible version of this but I know that

755
00:24:38,220 --> 00:24:40,559
if somebody puts a malicious link inside

756
00:24:40,559 --> 00:24:43,140
of a a OneNote document

757
00:24:43,140 --> 00:24:45,659
and a user Falls for it and clicks on it

758
00:24:45,659 --> 00:24:47,820
it's going to cause a command shell to

759
00:24:47,820 --> 00:24:49,860
spawn and it's not perfect because it

760
00:24:49,860 --> 00:24:52,320
could also be Powershell or mshta or

761
00:24:52,320 --> 00:24:54,600
there's a handful of other vectors but

762
00:24:54,600 --> 00:24:56,700
um but in this example this is what

763
00:24:56,700 --> 00:24:58,440
we're looking for we we really want to

764
00:24:58,440 --> 00:25:01,559
just know if one note causes this

765
00:25:01,559 --> 00:25:04,080
General process to spawn how will we how

766
00:25:04,080 --> 00:25:05,700
will we catch it and we can see an

767
00:25:05,700 --> 00:25:06,960
example of it right here that we can use

768
00:25:06,960 --> 00:25:08,159
for testing so go ahead and start

769
00:25:08,159 --> 00:25:10,520
playing again

770
00:25:10,620 --> 00:25:13,740
so what I'm going to do here is I'm just

771
00:25:13,740 --> 00:25:15,480
going to copy this event and this goes

772
00:25:15,480 --> 00:25:17,960
into our into our unit testing

773
00:25:17,960 --> 00:25:19,919
capability here and I'm going to go back

774
00:25:19,919 --> 00:25:22,320
to my uh I'm going to go back to my vs

775
00:25:22,320 --> 00:25:24,659
code window where the the actual logic

776
00:25:24,659 --> 00:25:25,620
is stored

777
00:25:25,620 --> 00:25:27,860
and this again this is an existing Rule

778
00:25:27,860 --> 00:25:30,659
and it's checking for

779
00:25:30,659 --> 00:25:32,700
um it's checking for all these different

780
00:25:32,700 --> 00:25:34,080
office documents to do it but I'm going

781
00:25:34,080 --> 00:25:35,460
to create a unit test here at the bottom

782
00:25:35,460 --> 00:25:37,200
and I'm going to say this is one note

783
00:25:37,200 --> 00:25:38,580
spawning a shell

784
00:25:38,580 --> 00:25:40,679
and the lima charlie EDR tool has a

785
00:25:40,679 --> 00:25:42,299
really great feature that allows us to

786
00:25:42,299 --> 00:25:43,260
replay

787
00:25:43,260 --> 00:25:44,039
um

788
00:25:44,039 --> 00:25:46,320
a series of events in order to determine

789
00:25:46,320 --> 00:25:48,000
if a rule is going to fire

790
00:25:48,000 --> 00:25:50,340
so I just paste that Raw event there and

791
00:25:50,340 --> 00:25:53,400
I say this should fire and hit yes

792
00:25:53,400 --> 00:25:56,820
and what we've written uh oh wait now

793
00:25:56,820 --> 00:25:57,840
I've got to go up and actually modify

794
00:25:57,840 --> 00:25:59,400
the rule right so I'm going to

795
00:25:59,400 --> 00:26:01,500
intentionally do this incorrectly and

796
00:26:01,500 --> 00:26:03,480
I'm going to put some logic in here that

797
00:26:03,480 --> 00:26:07,080
says for any new process that's windows

798
00:26:07,080 --> 00:26:08,460
I'm we're looking for all these

799
00:26:08,460 --> 00:26:09,840
different versions of Microsoft

800
00:26:09,840 --> 00:26:11,340
documents but I'm going to put it in the

801
00:26:11,340 --> 00:26:12,480
wrong place in the rule that's going to

802
00:26:12,480 --> 00:26:14,159
cause it to break everything right

803
00:26:14,159 --> 00:26:15,720
because I want to demonstrate what

804
00:26:15,720 --> 00:26:17,279
happens when things go wrong so I'm

805
00:26:17,279 --> 00:26:18,539
going to save that I'm really proud of

806
00:26:18,539 --> 00:26:20,279
myself I change Outlook to one note my

807
00:26:20,279 --> 00:26:22,380
job's done and I'm going to run my unit

808
00:26:22,380 --> 00:26:24,299
test here and we've created a vs code

809
00:26:24,299 --> 00:26:26,340
plugin to automate all of this

810
00:26:26,340 --> 00:26:28,140
and you see here at the bottom it says

811
00:26:28,140 --> 00:26:30,840
we're running the verifiers for for this

812
00:26:30,840 --> 00:26:34,320
uh this test and you can see that you

813
00:26:34,320 --> 00:26:36,960
know the verifier failed because now our

814
00:26:36,960 --> 00:26:38,340
logic is completely broken and it

815
00:26:38,340 --> 00:26:41,580
doesn't do anything so ultimately

816
00:26:41,580 --> 00:26:43,919
um then you see every use case failed so

817
00:26:43,919 --> 00:26:45,779
if you can pause it there

818
00:26:45,779 --> 00:26:48,600
um what what I did here and the way this

819
00:26:48,600 --> 00:26:49,740
rule is supposed to work it's supposed

820
00:26:49,740 --> 00:26:51,480
to say if you see any one of these

821
00:26:51,480 --> 00:26:54,779
Microsoft Office types of processes

822
00:26:54,779 --> 00:26:57,779
that are running with a um with a child

823
00:26:57,779 --> 00:27:00,299
process of Powershell or you know

824
00:27:00,299 --> 00:27:01,980
command prompt or whatever it may be

825
00:27:01,980 --> 00:27:04,140
then fire an alert

826
00:27:04,140 --> 00:27:05,640
but what I

827
00:27:05,640 --> 00:27:07,860
did when I changed this logic when I was

828
00:27:07,860 --> 00:27:09,720
you know acting like a sloppy detection

829
00:27:09,720 --> 00:27:11,460
engineer is I just pasted this new thing

830
00:27:11,460 --> 00:27:13,080
in here that actually changes the rules

831
00:27:13,080 --> 00:27:15,960
to say if a Microsoft Office document

832
00:27:15,960 --> 00:27:17,820
spawns another

833
00:27:17,820 --> 00:27:20,340
Microsoft Office document or

834
00:27:20,340 --> 00:27:22,980
um you know and then it sponsor shell

835
00:27:22,980 --> 00:27:24,120
right and that's really not what we're

836
00:27:24,120 --> 00:27:25,020
looking for

837
00:27:25,020 --> 00:27:27,720
so I made a mistake but this this unit

838
00:27:27,720 --> 00:27:30,000
testing framework caught this mistake

839
00:27:30,000 --> 00:27:31,919
and stopped me from pushing this out and

840
00:27:31,919 --> 00:27:34,080
breaking our ability to detect all this

841
00:27:34,080 --> 00:27:35,700
so now I'll go through and I'll change

842
00:27:35,700 --> 00:27:38,279
it begin to play again

843
00:27:38,279 --> 00:27:40,740
I'll change the logic to to do what we

844
00:27:40,740 --> 00:27:42,000
actually meant for it to do which really

845
00:27:42,000 --> 00:27:43,860
is just putting it in the right place

846
00:27:43,860 --> 00:27:46,879
um within this rule

847
00:27:51,299 --> 00:27:53,159
and we'll tab that over because the

848
00:27:53,159 --> 00:27:54,720
animal cares about tabs and now I'm

849
00:27:54,720 --> 00:27:57,659
going to run the the verifier test again

850
00:27:57,659 --> 00:27:59,159
and now it's going to go through this

851
00:27:59,159 --> 00:28:01,260
and you see that it tells me everything

852
00:28:01,260 --> 00:28:03,240
actually works all my verifiers passed

853
00:28:03,240 --> 00:28:06,299
and now I can Commit This to our to our

854
00:28:06,299 --> 00:28:08,159
source code repo so now I know that this

855
00:28:08,159 --> 00:28:09,900
is actually detecting the things that I

856
00:28:09,900 --> 00:28:12,000
want it to detect and it's not breaking

857
00:28:12,000 --> 00:28:13,799
any of the old rules that that we had in

858
00:28:13,799 --> 00:28:15,600
place before right

859
00:28:15,600 --> 00:28:17,640
so again here's an example if I was

860
00:28:17,640 --> 00:28:20,340
editing this Rule and I just went and um

861
00:28:20,340 --> 00:28:22,740
and like broke something like I

862
00:28:22,740 --> 00:28:24,059
accidentally deleted a random character

863
00:28:24,059 --> 00:28:25,620
somewhere because I was not paying

864
00:28:25,620 --> 00:28:27,179
attention to my cat like jumped on my

865
00:28:27,179 --> 00:28:29,760
keyboard or something then I can see now

866
00:28:29,760 --> 00:28:32,039
again the verifiers fail and I have to

867
00:28:32,039 --> 00:28:33,539
go back and fix it before before it

868
00:28:33,539 --> 00:28:34,919
passes again

869
00:28:34,919 --> 00:28:37,320
so it's a really powerful capability too

870
00:28:37,320 --> 00:28:38,640
many people will just go and put new

871
00:28:38,640 --> 00:28:40,140
rules into production with no testing

872
00:28:40,140 --> 00:28:42,960
and it really causes issues that

873
00:28:42,960 --> 00:28:44,279
sometimes you just never even notice

874
00:28:44,279 --> 00:28:45,900
until a breach happens and you realize

875
00:28:45,900 --> 00:28:47,340
that this thing was broken the whole

876
00:28:47,340 --> 00:28:48,179
time

877
00:28:48,179 --> 00:28:50,340
so here I'm going to go and uh if you're

878
00:28:50,340 --> 00:28:52,500
familiar with uh git I'm going to go and

879
00:28:52,500 --> 00:28:55,200
commit the uh

880
00:28:55,200 --> 00:28:57,299
the uh the change that I made that way

881
00:28:57,299 --> 00:28:58,799
it will go into our source code repo and

882
00:28:58,799 --> 00:29:00,900
it can be reviewed by other members of

883
00:29:00,900 --> 00:29:03,419
our team and because I'm doing

884
00:29:03,419 --> 00:29:05,039
um because I'm wanting to track all this

885
00:29:05,039 --> 00:29:06,419
I make sure that I put the ticket number

886
00:29:06,419 --> 00:29:07,620
that's associated with this change

887
00:29:07,620 --> 00:29:09,659
within my git comment so that basically

888
00:29:09,659 --> 00:29:11,520
allows anybody who's going back and

889
00:29:11,520 --> 00:29:12,840
looking at this and saying why did Paul

890
00:29:12,840 --> 00:29:14,700
make this change they can go back and

891
00:29:14,700 --> 00:29:16,400
say oh this is from ticket

892
00:29:16,400 --> 00:29:18,720
det-301 and they can just go search for

893
00:29:18,720 --> 00:29:20,460
that and see yeah the whole process

894
00:29:20,460 --> 00:29:21,480
right

895
00:29:21,480 --> 00:29:23,760
put a note in there and then I made it

896
00:29:23,760 --> 00:29:25,860
too long so I had to you know find a way

897
00:29:25,860 --> 00:29:29,760
to make it shorter uh and then

898
00:29:29,760 --> 00:29:31,559
this will commit and then we'll pop over

899
00:29:31,559 --> 00:29:34,140
to our

900
00:29:34,140 --> 00:29:36,539
to our GitHub instance to take a look at

901
00:29:36,539 --> 00:29:39,419
that as well so if I go to GitHub I see

902
00:29:39,419 --> 00:29:41,460
that now there's a uh there's this new

903
00:29:41,460 --> 00:29:42,720
branch and I'm going to create a pull

904
00:29:42,720 --> 00:29:43,980
request

905
00:29:43,980 --> 00:29:45,539
and I'm going to leave a note here and

906
00:29:45,539 --> 00:29:47,580
I'm going to request that Tommy G from

907
00:29:47,580 --> 00:29:49,020
our team you know take a look at that

908
00:29:49,020 --> 00:29:50,940
and review it I'm going to assign it to

909
00:29:50,940 --> 00:29:52,919
myself and put some labels and really

910
00:29:52,919 --> 00:29:55,860
this is at this point it's saying hey

911
00:29:55,860 --> 00:29:57,419
can somebody else on the team go back

912
00:29:57,419 --> 00:29:58,860
and check my work and make sure that

913
00:29:58,860 --> 00:30:00,659
this is valid and I didn't do something

914
00:30:00,659 --> 00:30:03,720
stupid before we push into this or do

915
00:30:03,720 --> 00:30:05,039
you have a better way of doing it or is

916
00:30:05,039 --> 00:30:07,080
there a more efficient process and this

917
00:30:07,080 --> 00:30:09,299
will create a pull request it's going to

918
00:30:09,299 --> 00:30:11,760
send an email to to our team and it's

919
00:30:11,760 --> 00:30:12,899
not going to let me do anything here

920
00:30:12,899 --> 00:30:14,399
because it tells me that this review is

921
00:30:14,399 --> 00:30:16,320
required and I'm not allowed to do

922
00:30:16,320 --> 00:30:17,700
anything else until somebody else gives

923
00:30:17,700 --> 00:30:19,620
me the thumbs up right so you don't want

924
00:30:19,620 --> 00:30:20,820
to have one person who can go through

925
00:30:20,820 --> 00:30:23,580
and modify that so that's that's really

926
00:30:23,580 --> 00:30:26,279
it when when Tom gets this email he'll

927
00:30:26,279 --> 00:30:28,620
he'll pop into the uh

928
00:30:28,620 --> 00:30:31,440
into the uh into the code take a look at

929
00:30:31,440 --> 00:30:32,820
it and it'll you'll see the changes that

930
00:30:32,820 --> 00:30:34,380
I've made and then he can either give me

931
00:30:34,380 --> 00:30:37,320
the thumbs up thumbs down and then these

932
00:30:37,320 --> 00:30:39,299
unit tests again we hope that everybody

933
00:30:39,299 --> 00:30:40,740
runs them themselves and that they're

934
00:30:40,740 --> 00:30:42,600
doing their job but before it can

935
00:30:42,600 --> 00:30:44,720
actually go through and and

936
00:30:44,720 --> 00:30:47,220
make the change GitHub is going to

937
00:30:47,220 --> 00:30:49,500
verify for me that um that it actually

938
00:30:49,500 --> 00:30:52,080
passed those tests so if we can go back

939
00:30:52,080 --> 00:30:53,640
to the to the slide so I think I've just

940
00:30:53,640 --> 00:30:56,640
got one more and my time is almost up

941
00:30:56,640 --> 00:30:58,799
so this is putting it all together this

942
00:30:58,799 --> 00:31:01,740
is the process that that we um that we

943
00:31:01,740 --> 00:31:03,720
have in place and everybody doesn't have

944
00:31:03,720 --> 00:31:05,100
to do this right we're not saying that

945
00:31:05,100 --> 00:31:06,659
this is the only way to do it but I

946
00:31:06,659 --> 00:31:08,460
think that some of the core tenants here

947
00:31:08,460 --> 00:31:09,840
are massively important if you're going

948
00:31:09,840 --> 00:31:11,460
to be running a security operations team

949
00:31:11,460 --> 00:31:13,620
and you want to have custom detection

950
00:31:13,620 --> 00:31:15,000
capabilities for your organization

951
00:31:15,000 --> 00:31:18,360
having something like this that can help

952
00:31:18,360 --> 00:31:19,140
um

953
00:31:19,140 --> 00:31:21,360
you know standardize and control how

954
00:31:21,360 --> 00:31:22,740
you're putting code into your production

955
00:31:22,740 --> 00:31:24,720
environment and and make sure that

956
00:31:24,720 --> 00:31:25,980
you're controlling how you're creating

957
00:31:25,980 --> 00:31:28,020
these new capabilities it really allows

958
00:31:28,020 --> 00:31:29,820
you to scale if we didn't do this then

959
00:31:29,820 --> 00:31:31,620
we would have no idea you know when a

960
00:31:31,620 --> 00:31:33,779
customer asks us hey can you detect this

961
00:31:33,779 --> 00:31:35,700
new OneNote thing we would have to just

962
00:31:35,700 --> 00:31:36,960
kind of ask around like did anybody

963
00:31:36,960 --> 00:31:38,159
write a rule for that or let me go

964
00:31:38,159 --> 00:31:39,659
scroll through all our rules and see if

965
00:31:39,659 --> 00:31:42,000
anybody did it whereas this allows us to

966
00:31:42,000 --> 00:31:44,220
just go through and say hey let's go

967
00:31:44,220 --> 00:31:46,380
just search our tickets and yes it looks

968
00:31:46,380 --> 00:31:48,000
like we put this in place and we

969
00:31:48,000 --> 00:31:49,440
developed this capability and we've had

970
00:31:49,440 --> 00:31:52,020
it in place since you know January 15th

971
00:31:52,020 --> 00:31:53,820
which is when you know I'm just making

972
00:31:53,820 --> 00:31:55,860
up these dates but since January 15th

973
00:31:55,860 --> 00:31:57,480
when these attacks first started

974
00:31:57,480 --> 00:31:59,399
occurring you know we we created this

975
00:31:59,399 --> 00:32:01,860
capability or in an ideal situation we

976
00:32:01,860 --> 00:32:04,080
can say oh well we actually have had a

977
00:32:04,080 --> 00:32:06,240
rule for this since 2018 because we

978
00:32:06,240 --> 00:32:08,039
anticipated that it could potentially be

979
00:32:08,039 --> 00:32:10,380
abused then so we were ahead of the

980
00:32:10,380 --> 00:32:12,960
curve but having having this process

981
00:32:12,960 --> 00:32:15,059
instead of you know just smart people

982
00:32:15,059 --> 00:32:16,440
doing smart things and hoping that

983
00:32:16,440 --> 00:32:17,880
everybody's doing it roughly the same

984
00:32:17,880 --> 00:32:20,340
way it really adds a lot of control a

985
00:32:20,340 --> 00:32:23,279
lot of uh and a lot of assurity right if

986
00:32:23,279 --> 00:32:25,500
you're a leader in an organization you

987
00:32:25,500 --> 00:32:26,940
want to know that there is some process

988
00:32:26,940 --> 00:32:28,380
that's happening and that you can

989
00:32:28,380 --> 00:32:29,880
actually verify what your people are

990
00:32:29,880 --> 00:32:31,200
telling you and you're not just hoping

991
00:32:31,200 --> 00:32:33,059
that they're getting it right every time

992
00:32:33,059 --> 00:32:37,520
so that's it any questions

993
00:32:45,600 --> 00:32:47,039
hey

994
00:32:47,039 --> 00:32:49,740
um quick question about so I've noticed

995
00:32:49,740 --> 00:32:51,480
a lot of detection engineering relies on

996
00:32:51,480 --> 00:32:53,340
yaml based structures instead of like

997
00:32:53,340 --> 00:32:55,200
other structures like Json from your

998
00:32:55,200 --> 00:32:56,640
experience working with the ml is there

999
00:32:56,640 --> 00:32:58,679
any particular advantages yaml has over

1000
00:32:58,679 --> 00:33:00,600
Json or is it just syntactically

1001
00:33:00,600 --> 00:33:03,240
preferred yeah I I have a deep hatred

1002
00:33:03,240 --> 00:33:06,120
for yaml I don't know why that's uh

1003
00:33:06,120 --> 00:33:08,039
I mean yaml and Json are kind of the

1004
00:33:08,039 --> 00:33:09,720
same thing it's just a different sort of

1005
00:33:09,720 --> 00:33:11,399
formatting but there's all sorts of

1006
00:33:11,399 --> 00:33:12,779
converters that will convert from one to

1007
00:33:12,779 --> 00:33:15,299
the other uh I don't I don't know of any

1008
00:33:15,299 --> 00:33:17,519
specific reason why that became the the

1009
00:33:17,519 --> 00:33:19,080
language of choice for any sort of

1010
00:33:19,080 --> 00:33:21,600
detection engineering but but it just is

1011
00:33:21,600 --> 00:33:25,080
so I don't have a good answer besides I

1012
00:33:25,080 --> 00:33:28,620
I don't like it I also hate yaml I don't

1013
00:33:28,620 --> 00:33:30,659
like anything that relies on on like

1014
00:33:30,659 --> 00:33:32,760
spacing for syntax because it causes

1015
00:33:32,760 --> 00:33:35,519
issues like what we just saw right there

1016
00:33:35,519 --> 00:33:36,899
um one quick follow-up question you

1017
00:33:36,899 --> 00:33:38,220
mentioned before that you did unit

1018
00:33:38,220 --> 00:33:40,559
testing with containerization

1019
00:33:40,559 --> 00:33:42,179
um how does the previous process differ

1020
00:33:42,179 --> 00:33:43,919
from the GitHub actions because isn't

1021
00:33:43,919 --> 00:33:46,140
GitHub actions also containerized yeah

1022
00:33:46,140 --> 00:33:49,200
it is uh the what we had to do though

1023
00:33:49,200 --> 00:33:51,240
because GitHub actions is good for very

1024
00:33:51,240 --> 00:33:52,380
short-lived

1025
00:33:52,380 --> 00:33:54,899
um sort of processing steps and what we

1026
00:33:54,899 --> 00:33:56,940
would have to do sometimes is also and I

1027
00:33:56,940 --> 00:33:58,260
think GitHub actions you can only use

1028
00:33:58,260 --> 00:34:00,779
like Linux based containers to to run

1029
00:34:00,779 --> 00:34:03,480
scripts in a handful of languages so

1030
00:34:03,480 --> 00:34:05,519
what we would have to do before is if we

1031
00:34:05,519 --> 00:34:07,019
wanted to to test some detection

1032
00:34:07,019 --> 00:34:08,760
capability on Windows

1033
00:34:08,760 --> 00:34:11,159
we would have to spin up like a Windows

1034
00:34:11,159 --> 00:34:13,199
VM with um

1035
00:34:13,199 --> 00:34:15,060
with a bunch of uh

1036
00:34:15,060 --> 00:34:17,099
uh I can't remember the name of this

1037
00:34:17,099 --> 00:34:18,060
world right now but a bunch of scripts

1038
00:34:18,060 --> 00:34:19,500
that would kind of initialize I can get

1039
00:34:19,500 --> 00:34:20,760
it set up and then run the attack and

1040
00:34:20,760 --> 00:34:22,320
then make sure that we called it in

1041
00:34:22,320 --> 00:34:25,379
order to to do that so limit Charlie the

1042
00:34:25,379 --> 00:34:27,300
the tool that we use there has a has an

1043
00:34:27,300 --> 00:34:30,060
amazing replay API that just says if you

1044
00:34:30,060 --> 00:34:32,520
capture these events and just put the

1045
00:34:32,520 --> 00:34:35,580
Json and into a uh into a list of events

1046
00:34:35,580 --> 00:34:37,859
here and then we can run the um the

1047
00:34:37,859 --> 00:34:39,540
logic against those events and it's just

1048
00:34:39,540 --> 00:34:42,000
a quick like rest API call in order to

1049
00:34:42,000 --> 00:34:43,918
trigger that so we found that's been

1050
00:34:43,918 --> 00:34:46,560
massively massively hopeful and and it

1051
00:34:46,560 --> 00:34:47,940
took our deployment time it used to be

1052
00:34:47,940 --> 00:34:49,260
when we would deploy a new rule it would

1053
00:34:49,260 --> 00:34:50,820
take us like three hours to get through

1054
00:34:50,820 --> 00:34:52,980
all the the unit tests because we had to

1055
00:34:52,980 --> 00:34:54,899
do all this this work and now it takes

1056
00:34:54,899 --> 00:34:58,080
about 45 seconds to a minute to deploy

1057
00:34:58,080 --> 00:34:59,580
it across all our organizations which is

1058
00:34:59,580 --> 00:35:01,140
massively helpful especially when

1059
00:35:01,140 --> 00:35:02,460
something's broken and you need to fix

1060
00:35:02,460 --> 00:35:04,140
right now there's nothing worse than

1061
00:35:04,140 --> 00:35:05,460
just like sitting there waiting on the

1062
00:35:05,460 --> 00:35:07,320
Wheel to spin for three hours

1063
00:35:07,320 --> 00:35:10,079
so but but anyway that's that's the

1064
00:35:10,079 --> 00:35:11,160
reason why we couldn't use GitHub

1065
00:35:11,160 --> 00:35:13,260
actions is because we were doing stuff

1066
00:35:13,260 --> 00:35:14,579
with all the different operating systems

1067
00:35:14,579 --> 00:35:15,839
and we would have to like come up with

1068
00:35:15,839 --> 00:35:19,020
hacky ways to um to test it and uh and

1069
00:35:19,020 --> 00:35:20,400
also we were using Jenkins at the time

1070
00:35:20,400 --> 00:35:22,619
which I'm very happy that that's not the

1071
00:35:22,619 --> 00:35:23,640
case anymore

1072
00:35:23,640 --> 00:35:26,960
absolutely thank you

1073
00:35:29,579 --> 00:35:32,060
foreign

1074
00:35:34,160 --> 00:35:37,279
thank you everybody

1075
00:35:37,320 --> 00:35:39,619
foreign

