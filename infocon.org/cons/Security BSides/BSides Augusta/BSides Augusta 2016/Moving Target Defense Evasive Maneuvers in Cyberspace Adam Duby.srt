1
00:00:00,000 --> 00:00:39,270
so one day versus resistor ways to
really listen and view thanks doc thanks

2
00:00:39,270 --> 00:00:43,680
for the warm reception this talk is
going to be about moving target defense

3
00:00:43,680 --> 00:00:48,420
and i'm going to focus the talk is a
short one we got about 25 minutes on

4
00:00:48,420 --> 00:00:52,860
applications and software binary
diversifications in order to evade

5
00:00:52,860 --> 00:00:55,559
threats little bit about me

6
00:00:55,559 --> 00:00:59,160
instructor course manager for North
University's online bachelor of science

7
00:00:59,160 --> 00:01:04,500
in cybersecurity i also have a lot of
research interests focus around moving

8
00:01:04,500 --> 00:01:08,670
target defensive operations but at the
end of the day I'm just some guy

9
00:01:11,000 --> 00:01:15,320
so I'm going to try and formalize a case
for moving target defense what it is and

10
00:01:15,320 --> 00:01:19,820
the motivation behind it i'll talk about
endpoints tactics briefly cover strategy

11
00:01:19,820 --> 00:01:25,160
and the resistance in the community to
moving target defense i have to cover

12
00:01:25,160 --> 00:01:30,800
some brief definitions before i go into
my uh formal proofs here to attack

13
00:01:30,800 --> 00:01:34,550
patterns that find them into two quad to
carry two types of attacks right we have

14
00:01:34,550 --> 00:01:39,470
opportunistic attacks that are scalable
you cast a wide net against a wide range

15
00:01:39,470 --> 00:01:43,460
of victim set the probability that each
individual victims compromises low but

16
00:01:43,460 --> 00:01:48,500
the aggregate sum is relatively high
then there's targeted attacks that

17
00:01:48,500 --> 00:01:52,759
require some sort of intimate knowledge
of the target this often occurs a higher

18
00:01:52,759 --> 00:01:59,660
cost so let me formalize a threat agent
there's a lot of threat models out there

19
00:01:59,660 --> 00:02:03,800
but across all the threat models i've
seen two common things that a threat is

20
00:02:03,800 --> 00:02:07,940
funded resource and is sufficiently
motivated to conducted attack to begin

21
00:02:07,940 --> 00:02:09,560
with

22
00:02:09,560 --> 00:02:14,150
therefore we can summarize the thread as
a function of a capability and intense

23
00:02:14,150 --> 00:02:18,500
and it's the sufficiently motivated
piece that drives moving target defense

24
00:02:18,500 --> 00:02:24,049
as a defensive strategy so target so
attacks are motivated by some sort of

25
00:02:24,049 --> 00:02:27,980
game there's a profit there's something
to be gained by launching the attack

26
00:02:27,980 --> 00:02:34,970
attack also incur the cost i'll say i
see some band is the cost for each

27
00:02:34,970 --> 00:02:41,780
attack and in general right the game has
to be greater than the Cassidy top of

28
00:02:41,780 --> 00:02:43,640
the attack otherwise what's the point

29
00:02:43,640 --> 00:02:47,720
it's basic economics however when we
talk about attack persistence how many

30
00:02:47,720 --> 00:02:53,150
times as you are going to repeatedly be
attacked to achieve that same game you

31
00:02:53,150 --> 00:02:56,930
can look at what i'm calling the
persistence variable P so the number of

32
00:02:56,930 --> 00:03:01,940
attacks will continue to people continue
to increase as long as inequality holds

33
00:03:01,940 --> 00:03:07,370
true then there's also a security design
principle called adequate protection

34
00:03:07,370 --> 00:03:11,750
which essentially states that your cost
of your defense in terms of manpower

35
00:03:11,750 --> 00:03:15,799
maintenance initialization has to be
proportional to the cost of the asset is

36
00:03:15,799 --> 00:03:20,300
defending and proportional to the
operational impact if it's compromised

37
00:03:20,300 --> 00:03:24,120
it makes sense right I'm not going to
spend $2,000 defending something that

38
00:03:24,120 --> 00:03:29,340
his five hundred dollars in value
therefore we we have what appears to be

39
00:03:29,340 --> 00:03:32,909
some sort of hopeless defense for the
Blue team because the principle of

40
00:03:32,909 --> 00:03:35,819
adequate protection i cannot defend
against everything

41
00:03:35,819 --> 00:03:40,048
furthermore it's impossible to enumerate
all potential attacks and I can't say

42
00:03:40,049 --> 00:03:44,340
with any sense of confidence that all
the software on my system is free of

43
00:03:44,340 --> 00:03:48,659
vulnerabilities that can be exploited
again the attacks are relatively cheap

44
00:03:48,659 --> 00:03:53,370
because they're scalable whether our
whereas our defenses are not scalable

45
00:03:53,370 --> 00:04:01,019
and this gives rise to its asymmetric
cyberwarfare so why do vulnerable assets

46
00:04:01,019 --> 00:04:04,709
escape exploitation and compromise to
begin with out there there are assets

47
00:04:04,709 --> 00:04:10,109
that exist they are vulnerable but they
managed to evade compromise

48
00:04:11,099 --> 00:04:15,358
why is that either the existence is
unknown

49
00:04:15,930 --> 00:04:22,590
nobody cares about it or it's just
simply not targeted yr assets not

50
00:04:22,590 --> 00:04:27,119
targeted because the game is negligible
or the game is less than the cost of the

51
00:04:27,120 --> 00:04:31,620
attack to begin with so therefore moving
target defense thrives at increasing the

52
00:04:31,620 --> 00:04:34,830
cost of the attack as opposed to
mitigating all your vulnerabilities

53
00:04:34,830 --> 00:04:38,729
because we realized we have to accept
the fact that vulnerabilities are

54
00:04:38,729 --> 00:04:41,219
inevitable

55
00:04:41,220 --> 00:04:44,550
therefore let's make the attack a little
bit more complex and more and more

56
00:04:44,550 --> 00:04:50,610
challenging for each system so moving
target defense paradigm is motivated by

57
00:04:50,610 --> 00:04:55,440
this asymmetric costs that are that are
born to the cyber defenders in an effort

58
00:04:55,440 --> 00:05:00,449
to try to defend everything against
attack patterns that are impossible to

59
00:05:00,449 --> 00:05:05,130
enumerate and we do this by trying to
increase the complexity of the cost of

60
00:05:05,130 --> 00:05:09,990
the attacks reducing the exposure of the
vulnerabilities of elevated there how

61
00:05:09,990 --> 00:05:11,190
long are they there for

62
00:05:11,190 --> 00:05:14,550
so that then we get into diversification
as a security

63
00:05:14,550 --> 00:05:18,750
furthermore we can reduce the duration
of persistent threat activity by

64
00:05:18,750 --> 00:05:22,410
diversifying our systems even if they do
compromise the system how long can they

65
00:05:22,410 --> 00:05:25,650
stay in there before your system is
diversified and the persistence is that

66
00:05:25,650 --> 00:05:28,830
they're kicked out

67
00:05:28,830 --> 00:05:34,260
further reduce the scalability of
opportunistic attacks so again all of

68
00:05:34,260 --> 00:05:37,620
all we have this monoculture and
offensive cyber space where we configure

69
00:05:37,620 --> 00:05:40,620
our systems and we don't touch it we
leave them alone

70
00:05:41,190 --> 00:05:47,070
therefore attacks are scalable across a
vast array of victim sets we want to

71
00:05:47,070 --> 00:05:51,750
reduce the scalability that drives cost
of attack way up further let's render

72
00:05:51,750 --> 00:05:56,880
threat intelligence unreliable the
conductor constant scanning enumeration

73
00:05:56,880 --> 00:06:01,200
activities reverse engineering of your
software then they go and weaponize

74
00:06:01,200 --> 00:06:07,020
build their exploit developer attack
plan before they deploy it so let's ask

75
00:06:07,020 --> 00:06:12,000
ourselves if i were to enumerate if we
go back to our systems that were charged

76
00:06:12,000 --> 00:06:16,080
with defending an enumerated scan it is
it going to be the same weeks months or

77
00:06:16,080 --> 00:06:21,479
even years from now how long is that
intelligence valuable for those

78
00:06:21,480 --> 00:06:24,420
different ways to manage our tax service
through attack surface reduction right

79
00:06:24,420 --> 00:06:28,050
the less stuff we have the less we have
to defend well we're all digital borders

80
00:06:28,050 --> 00:06:31,920
no one wants to do that then there's
this to a concept of attack surface

81
00:06:31,920 --> 00:06:36,480
expansion which is an artificial logical
boundary expansion of your network that

82
00:06:36,480 --> 00:06:39,660
you're trying to defend make yourself
look bigger than you really are going to

83
00:06:39,660 --> 00:06:43,050
talk about honey nets and decoys early
this morning that kind of play into that

84
00:06:43,050 --> 00:06:48,240
those attacks surface manipulation
through diversification that's where the

85
00:06:48,240 --> 00:06:52,230
attack surface expands and contracts at
random intervals so any type of scanning

86
00:06:52,230 --> 00:06:57,180
enumeration or intelligence collection
efforts are therefore unreliable for any

87
00:06:57,180 --> 00:07:02,970
significant duration of time again short
talks i'm going to focus some of the

88
00:07:02,970 --> 00:07:08,610
case studies on software specific
applications and diversification all

89
00:07:08,610 --> 00:07:12,210
started with address space layout
randomization motivated by buffer

90
00:07:12,210 --> 00:07:18,359
overflows this randomizes various memory
locations global offset tables and this

91
00:07:18,360 --> 00:07:23,700
combined with data execution prevention
Armin and very stacked protection

92
00:07:23,700 --> 00:07:28,530
mechanisms such as a Canary's was fairly
reliable but then we started seeing

93
00:07:28,530 --> 00:07:33,090
increasing return oriented programming
attacks process injection DLL hijacking

94
00:07:33,090 --> 00:07:36,090
linking search for hijacking

95
00:07:37,710 --> 00:07:41,099
so this level of randomization was not
enough

96
00:07:42,570 --> 00:07:48,240
how does the return oriented or Rob
chain work it finds gadgets an existing

97
00:07:48,240 --> 00:07:53,490
code a gadget is a piece of code that's
already been loaded into memory and it

98
00:07:53,490 --> 00:07:56,520
pieces together all the gadgets to do
something useful

99
00:07:56,520 --> 00:07:58,740
I can't bring my weapon into the
building but if i could find all the

100
00:07:58,740 --> 00:08:01,920
parts to make the weapon within the
building that I'm good right

101
00:08:02,490 --> 00:08:05,610
so at the end of the day the attacker
still needs to know something about the

102
00:08:05,610 --> 00:08:10,050
target need to know where those gadgets
are could find one by correctly guessing

103
00:08:10,050 --> 00:08:15,210
the offset and it could find multiples
then came this the idea of instruction

104
00:08:15,210 --> 00:08:20,010
set randomization right if you want to
conduct if you want to inject code into

105
00:08:20,010 --> 00:08:25,170
a target you have to know the targets
instruction set right you can inject x86

106
00:08:25,170 --> 00:08:30,540
assembly code or all machine code into
an arm system etc so the concept of

107
00:08:30,540 --> 00:08:35,940
instruction set randomization
diversifies instructions and decrypt

108
00:08:35,940 --> 00:08:38,910
them when the instruction register
fetches these instructions from data

109
00:08:38,909 --> 00:08:44,640
however this is still vulnerable to a
precompiled library because they're

110
00:08:44,640 --> 00:08:48,510
already compiled on the system and then
you're vulnerable to a correlation

111
00:08:48,510 --> 00:08:50,220
attacks and so forth

112
00:08:50,220 --> 00:08:56,790
not to mention this requires hardware
support is expensive so Colonel

113
00:08:56,790 --> 00:08:59,790
interface diversification then became a
new topic of research

114
00:09:00,300 --> 00:09:04,260
Alex randomized system call interfaces
let's do some excessive functionname

115
00:09:04,260 --> 00:09:10,800
angling and the resolve them at runtime
to try and defeat a prod DLL injection

116
00:09:10,800 --> 00:09:16,229
ordeal hijacking library search for
diversification and then there's this

117
00:09:16,230 --> 00:09:21,090
tool called Francis Francis was a
theoretical tool developed in

118
00:09:21,090 --> 00:09:25,380
conjunction with the research project
from George Mason microsoft and Purdue

119
00:09:25,380 --> 00:09:31,350
the problem is that it is extremely
expensive to run this is an incredible

120
00:09:31,350 --> 00:09:36,420
performance overhead incurred and also
it was still vulnerable to some rap

121
00:09:36,420 --> 00:09:43,290
attacks because it didn't diversify the
the actual executable itself so we have

122
00:09:43,290 --> 00:09:47,610
to add binary executable format code
section randomization to try and defeat

123
00:09:47,610 --> 00:09:50,290
those rock building of rock chains

124
00:09:50,290 --> 00:09:55,509
now let's talk about a little bit of the
research area i'm mostly interested in

125
00:09:55,509 --> 00:09:59,709
that compiler generated diversity where
every time i compile a piece of software

126
00:09:59,709 --> 00:10:03,699
from source code to target code every
time I can pilot it gives me a different

127
00:10:03,699 --> 00:10:08,469
version is some sort of random number
generator injected into the optimization

128
00:10:08,470 --> 00:10:11,380
scheme of the compiler give me a
different version of the software every

129
00:10:11,380 --> 00:10:16,750
time it doesn't work for scripting
languages right we have to now look at

130
00:10:16,750 --> 00:10:23,259
injecting the randomness at a higher
level is the in the compiler chain so we

131
00:10:23,259 --> 00:10:28,420
look at lexical analysis randomization
and this can be done by extending the

132
00:10:28,420 --> 00:10:34,509
grammar to include some sort of random
tag at the end of keywords so therefore

133
00:10:34,509 --> 00:10:40,630
if I someone launches a script or code
onto the target system it will be parsed

134
00:10:40,630 --> 00:10:44,860
correctly probably invoke some sort of
exception error because the lexical

135
00:10:44,860 --> 00:10:50,980
analyzer will produce the correct tokens
again the intent is to prove a unique

136
00:10:50,980 --> 00:10:57,850
instance of the software every time I
know about Dale structure data structure

137
00:10:57,850 --> 00:11:03,430
layout randomization this is the concept
of diversifying our data structures and

138
00:11:03,430 --> 00:11:07,839
again it can be done by extending
extending the grammar of high-level

139
00:11:07,839 --> 00:11:12,160
languages but more importantly we don't
always want to trust our compiler to

140
00:11:12,160 --> 00:11:15,219
completely randomized our stuff for us
because if you think about public-facing

141
00:11:15,220 --> 00:11:20,380
api's or network protocols those stuff
that they have to be static in order for

142
00:11:20,380 --> 00:11:24,279
other systems to communicate with them
hence application programming interface

143
00:11:24,279 --> 00:11:30,519
so now we could put the control in the
hands of the programmer so here's a

144
00:11:30,519 --> 00:11:38,560
struct I and that can random intent is
to randomize the location in memory of

145
00:11:38,560 --> 00:11:43,899
these values right cause code injection
requires knowledge of the location of a

146
00:11:43,899 --> 00:11:51,370
function pointer relative to the return
address on a stack right and if you can

147
00:11:51,370 --> 00:11:55,600
diversify that every time you can
intentionally effectively try to defeat

148
00:11:55,600 --> 00:11:59,709
those types of attacks so another
example of DSLR suppose I have some

149
00:11:59,709 --> 00:12:02,339
function i call the b-sides accept a
gust up

150
00:12:02,339 --> 00:12:06,870
I know how it's going to look like when
it's compiled into assembly code and

151
00:12:06,870 --> 00:12:12,329
here i'm using the deckle of calling
convention just as an example i know

152
00:12:12,329 --> 00:12:17,219
that all my parameters can be pushed on
the stack from right to left so now i

153
00:12:17,220 --> 00:12:22,439
want to see how I can diversify that
Saudi DSLR enable compilers try to

154
00:12:22,439 --> 00:12:30,089
include a mix those up at some padding
in their ad garbage variables so that

155
00:12:30,089 --> 00:12:37,769
way you don't know the absolute office
offset relative to the base frame now

156
00:12:37,769 --> 00:12:41,459
with all this diversification going on
we have the potential for entropy

157
00:12:41,459 --> 00:12:45,930
problem right diversification has to be
non deterministic if you can determine

158
00:12:45,930 --> 00:12:51,388
the outcome of diversification routines
and what's the point and true randomness

159
00:12:51,389 --> 00:12:58,199
is not free it requires resources you
have to get system resources whether

160
00:12:58,199 --> 00:13:02,910
it's average disk access time for
temperatures something like that to

161
00:13:02,910 --> 00:13:08,639
build your entry people inside of the
operating system however static systems

162
00:13:08,639 --> 00:13:11,579
that you configure want to leave it
alone you never touch again it has

163
00:13:11,579 --> 00:13:14,849
trouble building entropy a few years
back this was known as the boot time

164
00:13:14,850 --> 00:13:20,009
entropy hole and linux systems where
were able to a simple for loop can drain

165
00:13:20,009 --> 00:13:25,199
out of random which is my entry people
and I started getting blocking just

166
00:13:25,199 --> 00:13:29,099
after a few a few queries from the edge
of people couldn't produce any more

167
00:13:29,100 --> 00:13:32,129
entropy I don't think the entropy
problem personally is going to be that

168
00:13:32,129 --> 00:13:36,540
big of a deal because rule of thumb
right we only need about 256 bits of

169
00:13:36,540 --> 00:13:44,730
entropy on to be considered effective
photography so and furthermore we can

170
00:13:44,730 --> 00:13:49,589
try and scale our diversification
techniques to limit that so I envision a

171
00:13:49,589 --> 00:13:55,860
a scalable binary diversification scheme
where everyone wants to use the same

172
00:13:55,860 --> 00:13:59,519
software however everyone gets a
different instance of the software it's

173
00:13:59,519 --> 00:14:03,990
been diversified it and randomized
therefore if you develop an exploit

174
00:14:03,990 --> 00:14:09,480
against uh clients will client one
version of the software that attack is

175
00:14:09,480 --> 00:14:13,740
no longer scalable against the other
clients now you're driving the cost of

176
00:14:13,740 --> 00:14:14,160
the

177
00:14:14,160 --> 00:14:20,819
way up so there's also work out there
for theoretical frameworks for moving

178
00:14:20,819 --> 00:14:25,469
target as a strategy is the defensive
strategy on enterprise networks i think

179
00:14:25,470 --> 00:14:29,639
personally that long wait from achieving
anything like this but with

180
00:14:29,639 --> 00:14:33,720
proliferation of virtualized systems and
software defined networking I don't

181
00:14:33,720 --> 00:14:35,069
think it's unreasonable

182
00:14:35,069 --> 00:14:38,579
so imagine your you're think Lions every
time you spend them up you get a

183
00:14:38,579 --> 00:14:41,638
different instance of a video of
virtualized machine it's completely

184
00:14:41,639 --> 00:14:46,259
different operating system configuration
changes your source code has been

185
00:14:46,259 --> 00:14:50,970
recompiled to be diverse so these are
called multivariate systems and if

186
00:14:50,970 --> 00:14:56,310
you're sold on the idea of threat
intelligence as it as a defense then you

187
00:14:56,310 --> 00:15:01,290
can leverage Intel feet and you want to
make sure that the diversified system

188
00:15:01,290 --> 00:15:05,910
isn't orthogonal to the attack vector if
it's not then it's not effective

189
00:15:06,449 --> 00:15:11,430
therefore if you can achieve that you
effectively created a defensive maneuver

190
00:15:11,430 --> 00:15:14,430
on your system

191
00:15:14,430 --> 00:15:17,819
there's a lot of resistance a moving
target as a defensive strategy there

192
00:15:17,819 --> 00:15:21,870
when i talk to network owners containers
and present them with ideas like this

193
00:15:21,870 --> 00:15:25,740
they look at me like I'm crazy they say
absolutely not i need to know the state

194
00:15:25,740 --> 00:15:29,730
of my system and be given point in time
and that's a change management nightmare

195
00:15:30,810 --> 00:15:33,599
well nobody really does change
management anyway so i don't really buy

196
00:15:33,600 --> 00:15:37,800
that as an excuse but there are other
excuses right application whitelisting

197
00:15:37,800 --> 00:15:42,240
by hash that's done quite frequently and
if you're doing runtime software

198
00:15:42,240 --> 00:15:46,920
transformations this won't be effective
anymore writable code sections for

199
00:15:46,920 --> 00:15:51,120
runtime software transfer me I think
we'd all agree the writing code sections

200
00:15:51,120 --> 00:15:56,670
might be a bad idea we did that decades
ago we don't want to go back to that are

201
00:15:56,670 --> 00:16:03,059
also runtime software integrity checks
and and performance and overhead but

202
00:16:03,059 --> 00:16:06,509
it's really this psychological
acceptability of diversifying our

203
00:16:06,509 --> 00:16:10,709
systems that's the biggest hinder to
progress in the MTD research community

204
00:16:12,839 --> 00:16:15,930
I need to know my system needs to be
static I need to know what it looks like

205
00:16:15,930 --> 00:16:20,699
at any given point in time because i
need to find anomalies well anomaly

206
00:16:20,699 --> 00:16:24,990
detection is your only defense you
telling me that your defense is looking

207
00:16:24,990 --> 00:16:27,810
for an adversary activity are after all

208
00:16:27,810 --> 00:16:33,449
already been launched whereas deterrence
should be our primary line of effort

209
00:16:33,450 --> 00:16:38,940
from a defensive standpoint so
diversification aims to try to shift

210
00:16:38,940 --> 00:16:45,600
that asymmetric advantage in favor of
the defendants attackers have been doing

211
00:16:45,600 --> 00:16:49,800
it for years they diversify their
malware and then we're sold on using the

212
00:16:49,800 --> 00:16:54,150
idea of an md5 hash define the malware
but its diversified every time when we

213
00:16:54,150 --> 00:16:58,350
diversify our systems making a little
bit harder to to attack make make the

214
00:16:58,350 --> 00:17:06,599
intelligence unreliable that's where the
discussion comes in right it's a lot

215
00:17:06,599 --> 00:17:13,948
harder to hit a moving target and why to
us defenders why do we why do we think

216
00:17:13,949 --> 00:17:18,780
that moving target defense might be a
bad idea might be a good idea and i'm

217
00:17:18,780 --> 00:17:24,510
interested in feedback from the audience
at this point can you imagine to fed

218
00:17:24,510 --> 00:17:31,350
diversifying your cyber go you imagine
diversifying your cyberspace terrain to

219
00:17:31,350 --> 00:17:36,330
an unpredictable manager manner that you
might not have full control over for

220
00:17:36,330 --> 00:17:40,830
furthermore can you imagine your
software constantly changing and you

221
00:17:40,830 --> 00:17:43,889
don't know what it's changing too much
the diversification itself made to

222
00:17:43,890 --> 00:17:45,630
reduce new vulnerabilities

223
00:17:45,630 --> 00:17:49,140
however continually change over time
those vulnerabilities won't be

224
00:17:49,140 --> 00:17:54,300
persistent and their exposures reduce
yes please

225
00:17:55,090 --> 00:17:58,090
yeah

226
00:18:06,220 --> 00:18:09,220
yeah

227
00:18:09,789 --> 00:18:12,789
yeah

228
00:18:19,590 --> 00:18:22,590
yeah

229
00:18:35,879 --> 00:18:41,488
a great adversary tactic yeah i mean
remember the conficker problem with the

230
00:18:41,489 --> 00:18:44,969
domain kept changing constantly can
never figure out what the next domain is

231
00:18:44,969 --> 00:18:49,799
going to be adversaries or use
diversification or removing top moving

232
00:18:49,799 --> 00:18:54,539
target offensive guess we can call it in
the past

233
00:19:02,360 --> 00:19:08,030
maybe compromise the diversification
engine itself and take control that

234
00:19:08,030 --> 00:19:12,560
yes so you may introduce you if you're
going to do it in a scalable fashion

235
00:19:12,560 --> 00:19:17,030
then you may introduce a single point of
failure maybe then it's worthy to look

236
00:19:17,030 --> 00:19:22,160
at pier to Pier systems armed
diversification but now that's a great

237
00:19:22,160 --> 00:19:25,100
point to bring up

238
00:19:25,100 --> 00:19:28,100
yes please

239
00:19:43,970 --> 00:19:46,970
I

240
00:19:48,730 --> 00:19:51,870
got it

241
00:19:51,870 --> 00:19:54,060
yeah

242
00:19:54,060 --> 00:19:55,110
yeah

243
00:19:55,110 --> 00:19:58,110
yes please

244
00:20:03,440 --> 00:20:06,440
No

245
00:20:19,730 --> 00:20:23,120
I

246
00:20:23,120 --> 00:20:26,120
it

247
00:20:28,480 --> 00:20:29,710
get you

248
00:20:29,710 --> 00:20:31,020
yeah

249
00:20:31,020 --> 00:20:32,039
here

250
00:20:32,039 --> 00:20:35,039
yes

251
00:20:36,200 --> 00:20:39,799
agreed i mean if we can't if the
diversification creates a second or

252
00:20:39,799 --> 00:20:42,799
third order effect on the operational
requirements of the system itself

253
00:20:43,519 --> 00:20:50,750
I'm yeah that could invoke some
troubleshooting nightmares agree yes

254
00:20:50,750 --> 00:20:54,119
this

255
00:20:54,119 --> 00:21:04,738
every time I go download Molly and let
you know I get corrected more buildings

256
00:21:04,739 --> 00:21:10,349
and the operating system correctly

257
00:21:11,789 --> 00:21:18,389
why not was one is easier to do right
because once you download you compile

258
00:21:18,389 --> 00:21:20,879
you have your unique instance but then
you're still vulnerable to a targeted

259
00:21:20,879 --> 00:21:25,019
attack someone manages to get into your
system they extract your unique instance

260
00:21:25,019 --> 00:21:28,079
of that software they can still
reverse-engineer it somehow but if it's

261
00:21:28,079 --> 00:21:34,049
constantly changing you've increased he
effectively increase the deterrence yes

262
00:21:34,049 --> 00:21:36,119
please

263
00:21:36,119 --> 00:21:40,349
I long for your heart

264
00:21:45,130 --> 00:21:52,030
shadow so I think there's

265
00:21:54,100 --> 00:22:07,240
by the way cheaper and cheaper and
reliable school scalable and effective

266
00:22:07,240 --> 00:22:10,210
yeah there's not a lot of research out
there and effectiveness on this type of

267
00:22:10,210 --> 00:22:17,500
stuff how much time do I gotta go okay

268
00:22:17,500 --> 00:22:30,850
yes mr. Beck's please use right now it's
just most of the academic research but

269
00:22:30,850 --> 00:22:35,260
it is being done in the real world by
the red team but not blues-based

270
00:22:35,260 --> 00:22:41,740
terribly often sometimes we always get
our code 44 IP protection and stuff like

271
00:22:41,740 --> 00:22:47,679
that but not for the intent of
diversifying the attack surface that I

272
00:22:47,679 --> 00:22:48,669
know

273
00:22:48,669 --> 00:22:51,669
yes

274
00:22:54,980 --> 00:22:56,310
yeah

275
00:22:56,310 --> 00:22:58,870
yeah

276
00:22:58,870 --> 00:23:01,870
nothing

277
00:23:04,000 --> 00:23:08,740
many thanks again

278
00:23:09,639 --> 00:23:12,639
yeah

279
00:23:14,320 --> 00:23:18,730
it's a great . thank you for bringing it
up yeah salute attack might work once

280
00:23:18,730 --> 00:23:21,730
but it's not gonna work so I'm yes
please

281
00:23:26,119 --> 00:23:29,119
yeah

282
00:23:33,190 --> 00:23:36,190
yeah

283
00:23:41,880 --> 00:23:45,150
yeah

284
00:23:46,210 --> 00:23:49,210
and

285
00:23:56,800 --> 00:23:59,800
I

286
00:24:02,390 --> 00:24:06,230
agreed yet trusting the compiler
that'sthat's that the trusting trust

287
00:24:06,230 --> 00:24:09,710
security debate that's been going on for
years

288
00:24:09,710 --> 00:24:13,880
where does the compiler lay in terms of
the architecture losing control of that

289
00:24:13,880 --> 00:24:17,330
compiler and these are all good points

290
00:24:17,330 --> 00:24:20,330
yes please come back

291
00:24:22,900 --> 00:24:35,890
Marshall of economic development really
academic private sector so how's that

292
00:24:35,890 --> 00:24:44,530
going to great concern regarding 14 and
government having a backdoor access at

293
00:24:44,530 --> 00:24:48,129
least the current state of Technology
like

294
00:24:49,180 --> 00:25:07,870
and wrinkles and everyone and more
control over the general home

295
00:25:09,100 --> 00:25:13,090
I mean research and development always
comes best from the open source

296
00:25:13,090 --> 00:25:18,100
community i'm actually just 10 days ago
I IBM published their initial research

297
00:25:18,100 --> 00:25:23,740
results on Rob chain deterrence using a
moving target platform by diversifying

298
00:25:23,740 --> 00:25:28,900
at random intervals their portable
executable format so IBM's working on

299
00:25:28,900 --> 00:25:34,450
this but i think we're at a time i got
some gifts to give away real quick

300
00:25:35,110 --> 00:25:39,490
someone ought to tell me one example of
software transformation that i discussed

301
00:25:47,410 --> 00:25:53,530
all the local

