1
00:00:12,519 --> 00:00:40,390
and place your office about easy so
early 80s and these are very easy way

2
00:00:48,579 --> 00:01:02,440
nice out that just make sure you guys
can hear me you guys hear me in the back

3
00:01:02,440 --> 00:01:06,310
good have two mics up there okay I'm
gonna have to stay static when I heard

4
00:01:06,310 --> 00:01:11,740
so I'll stay here kinda early for me
it's about seven $TIME a.m. my time I

5
00:01:11,740 --> 00:01:16,539
like a bit you know caffeine has my back
so really why I'm up here huh

6
00:01:16,539 --> 00:01:22,690
but uh so you're gonna be talking about
uh mobile say the offensive side of

7
00:01:22,690 --> 00:01:28,209
mobile assessments and the easy findings
and within frameworks within Android

8
00:01:28,209 --> 00:01:37,240
within iOS how many of you guys are it's
a mobile pen testers or researchers or

9
00:01:37,240 --> 00:01:42,699
let's say wed pen testers anybody do
application security pentesting ok phew

10
00:01:42,700 --> 00:01:47,049
ok good so I'm gonna go to some basic so
you guys won't be left in the dark some

11
00:01:47,049 --> 00:01:52,270
fundamentals between iOS Android as well
as hybrid frameworks if you guys aren't

12
00:01:52,270 --> 00:01:58,810
aware what hybrid means or what that
entails so start a little dance for the

13
00:01:58,810 --> 00:02:06,670
morning so again my name is Eric guzman
that's my Twitter handle be tweeting out

14
00:02:06,670 --> 00:02:12,099
the slides afterwards so no need to take
pictures or anything like that then here

15
00:02:12,099 --> 00:02:15,280
is my email just because you to contact
me afterwards

16
00:02:15,280 --> 00:02:21,519
now I'm so I'm up from I contribute to
the hospital bowl security project for

17
00:02:21,519 --> 00:02:26,140
the last testing guide as well as like
the top 10 that's coming out other

18
00:02:26,140 --> 00:02:30,549
things as mark set out I was a technical
review for sands defending mobile

19
00:02:30,550 --> 00:02:36,190
application security essentials course
that's in beta on the board member for

20
00:02:36,190 --> 00:02:41,200
our a board member for Los Angeles as
well as the president for class Security

21
00:02:41,200 --> 00:02:46,869
Alliance Southern California and then
again based in Los Angeles so quite a

22
00:02:46,870 --> 00:02:51,069
ways to get here and you guessed it is
not easy place to get to take me about i

23
00:02:51,069 --> 00:02:55,450
left at $TIME noon yesterday got here at
almost midnight and i was like wow

24
00:02:56,250 --> 00:02:59,400
just to go to guests but it's been great

25
00:03:00,990 --> 00:03:05,940
yeah definitely worth it so again just
going to go over the fundamentals like I

26
00:03:05,940 --> 00:03:09,630
said hybrid apps some of the common
findings that you guys can find within

27
00:03:09,630 --> 00:03:13,530
your next assessment are researching or
even to kick-start you to get your

28
00:03:13,530 --> 00:03:17,190
interest into mobile security very very
simple i promise you guys will leave

29
00:03:17,190 --> 00:03:20,820
with something that you guys didn't know
about or even tools some of the tools

30
00:03:20,820 --> 00:03:25,859
i'll show you will help but say with
seventy-five eighty percent at least

31
00:03:25,860 --> 00:03:31,380
with your Android assessment of iOS is
more mobile more manual but still you

32
00:03:31,380 --> 00:03:34,950
leave with a good chunk of knowledge
which is a demonstration part and then

33
00:03:34,950 --> 00:03:38,850
the tools that i use and the automation
pieces and then we'll finish up with

34
00:03:38,850 --> 00:03:51,359
questions here to android it's purely a
java-based or or C C++ but uh mostly

35
00:03:51,360 --> 00:03:58,590
everybody interfaces with with java for
android the runtime for android is art

36
00:03:58,590 --> 00:04:04,200
which is a new Android runtime or
download p.m. so i said that's the java

37
00:04:04,200 --> 00:04:10,738
virtual machine is what I converts the
java classes over to deck bytecode to

38
00:04:10,739 --> 00:04:15,540
run on the android devices which we'll
get to in just a little bit but the core

39
00:04:15,540 --> 00:04:22,830
components of and an android device and
application our activities intense

40
00:04:22,830 --> 00:04:29,190
services broadcast receivers and content
providers activities are just the

41
00:04:29,190 --> 00:04:33,690
Ghoulies that you see uh the the pages
when you click you have a new user

42
00:04:33,690 --> 00:04:38,969
interface that's activity and intent
basically serves as a an action so if

43
00:04:38,970 --> 00:04:43,200
you want to log into an application you
have an activity and you have an intent

44
00:04:43,200 --> 00:04:47,940
to login on an intent you also check for
like validation whether it checks

45
00:04:47,940 --> 00:04:52,830
whether the users logged in or not armed
services run in the background they

46
00:04:52,830 --> 00:04:58,770
don't have the user interface so let's
say are downloading something that's in

47
00:04:58,770 --> 00:05:03,180
the background the app still runs that's
what a service can be a broadcast

48
00:05:03,180 --> 00:05:06,560
receivers are our notifications

49
00:05:06,560 --> 00:05:10,310
and a content providers basically
exposed like the file system of the

50
00:05:10,310 --> 00:05:15,889
application sandbox or let's say like a
sequel light a sequel database for

51
00:05:15,889 --> 00:05:19,610
credentials if you want to share that
between applications shared applications

52
00:05:19,610 --> 00:05:28,430
and the basics of of the google play
it's a review when you submit

53
00:05:28,430 --> 00:05:33,020
application is a google bouncer what
Google bouncer does is just analyze the

54
00:05:33,020 --> 00:05:38,960
application for us a vulnerable or
malicious activity throws it innovates

55
00:05:38,960 --> 00:05:41,510
in a virtual machine the application

56
00:05:41,510 --> 00:05:48,020
uh it looks for anomalous behavior for
like I said malicious or back doors it's

57
00:05:48,020 --> 00:05:52,609
not as stringent as the iOS apple store
app store we'll get to that in a minute

58
00:05:52,610 --> 00:05:59,960
but again it and it doesn't go into a
strict low-level are the same

59
00:05:59,960 --> 00:06:04,219
application behavior but it does look at
some things like one of our libraries

60
00:06:04,220 --> 00:06:09,229
like openssl for example there's
application utilizing a vulnerable open

61
00:06:09,229 --> 00:06:18,680
cell library the play store will flag
that and let the developer know the

62
00:06:18,680 --> 00:06:25,010
first place to look at and basically
like the core of a kind of configuration

63
00:06:25,010 --> 00:06:31,340
file within Android application is the
androidmanifest and this is where its

64
00:06:31,340 --> 00:06:36,138
kind of small you might not be able to
see it here but this is where all the

65
00:06:36,139 --> 00:06:41,360
the activities the proper all the
permissions are set all the the intense

66
00:06:41,360 --> 00:06:44,300
the content providers all the core
components that are listed in the

67
00:06:44,300 --> 00:06:48,800
previous slide i will all be defined
within the androidmanifest and if

68
00:06:48,800 --> 00:06:53,479
there's any they can also define custom
permissions to for whatever the

69
00:06:53,479 --> 00:06:57,380
developers liking you also see I like
secret codes

70
00:06:57,380 --> 00:07:03,320
uh let's say enter want to do 45 and
your phone opens up a secret menu and

71
00:07:03,320 --> 00:07:09,050
whatever the application developer
defines but this is where r that that is

72
00:07:09,050 --> 00:07:12,680
listed as kind of like the the
configuration file in the first place to

73
00:07:12,680 --> 00:07:18,500
look to get idea of what are the
application is running when I forgot to

74
00:07:18,500 --> 00:07:19,500
mention

75
00:07:19,500 --> 00:07:25,440
you can uh you can out let's say open up
to third party applications these

76
00:07:25,440 --> 00:07:29,610
components the activities content
providers of services broadcast

77
00:07:29,610 --> 00:07:35,190
receivers to a completely different
application by exporting it when you

78
00:07:35,190 --> 00:07:42,060
export it you'll define here whenever
the of whenever the activity so say the

79
00:07:42,060 --> 00:07:46,260
activity here will define export equals
true would be right here and that's

80
00:07:46,260 --> 00:07:51,180
basically letting a third-party
application access your activity on the

81
00:07:51,180 --> 00:07:56,640
same thing for content providers and
same thing for a broadcast receivers and

82
00:07:56,640 --> 00:08:00,060
again that's that's dangerous right if
if there's an activity that's post

83
00:08:00,060 --> 00:08:03,540
authenticated after you know someone
puts their credential in and it's

84
00:08:03,540 --> 00:08:05,520
exposed to another application

85
00:08:05,520 --> 00:08:09,810
obviously you know it's a banking
application you can see personal

86
00:08:09,810 --> 00:08:12,810
personal information then obviously
that's a big risk

87
00:08:14,550 --> 00:08:17,130
so those are things you test for its
export you want to make sure that there

88
00:08:17,130 --> 00:08:21,300
are validation in place by the
application but again we'll get to that

89
00:08:21,300 --> 00:08:24,450
in a bit this is kind of just defining
first place to look at within Android

90
00:08:24,450 --> 00:08:32,159
application when you when you decompile
a nap so here's the android framework

91
00:08:32,159 --> 00:08:36,599
i'm not going to list i'm not going to
talk through the whole the whole stack

92
00:08:36,599 --> 00:08:42,360
here but I'm going to focus more on the
linux kernel and what defines i guess

93
00:08:42,360 --> 00:08:47,490
for the most part are in separates a
regular linux kernel to an android linux

94
00:08:47,490 --> 00:08:54,210
kernel is the addy binder which is for
inter process communication and also

95
00:08:54,210 --> 00:09:00,270
paranoid networking and paranoid
networking basically checks permissions

96
00:09:00,270 --> 00:09:05,430
based off of the group ID and the socket
to see if the application has access to

97
00:09:05,430 --> 00:09:11,609
send network traffic so that's also
define up and the in the android

98
00:09:11,610 --> 00:09:18,420
permissions within the android manifest
in the previous slide but generally just

99
00:09:18,420 --> 00:09:22,620
kind of over the android framework that
they're just uh they're just java

100
00:09:22,620 --> 00:09:29,850
classes that are now used for the
android android system that are exposed

101
00:09:29,850 --> 00:09:32,940
like AP is basically that

102
00:09:32,940 --> 00:09:37,230
let's say like Bluetooth they're exposed
manager so they got bluetooth manager

103
00:09:37,230 --> 00:09:42,630
and Bluetooth service for example those
access to lower level of Colonel here to

104
00:09:42,630 --> 00:09:48,930
get access to Bluetooth but uh again
this java classes java talks to the java

105
00:09:48,930 --> 00:09:54,120
native interface which is for native
code so it converts again from java

106
00:09:54,120 --> 00:10:00,060
classes to bytecode and then over to
native code but again just to focus back

107
00:10:00,060 --> 00:10:04,589
on here binder for inter process
communication meaning another app once

108
00:10:04,590 --> 00:10:09,810
it wants to access another applications
data for whatever purpose whatever

109
00:10:09,810 --> 00:10:15,660
reason whether it's a application signed
by the same developer or total different

110
00:10:15,660 --> 00:10:21,030
app just malicious app trying to get
access to our and exported activity

111
00:10:21,030 --> 00:10:25,140
service whatever it may be it all
handled up the kernel level through

112
00:10:25,140 --> 00:10:30,750
binder and it's kinda like a proxy
between process a process being i'll

113
00:10:30,750 --> 00:10:36,210
show you in just a second but what
checks is the process ID and the user ID

114
00:10:36,210 --> 00:10:40,530
so every time an application is
installed within your android device a

115
00:10:40,530 --> 00:10:48,329
user ID is defined here is set a unique
user ID so that's kind of the let's say

116
00:10:48,330 --> 00:10:52,470
the sandboxing and again we'll get to
that in just a second but here's here is

117
00:10:52,470 --> 00:10:56,940
kind of how our binder works and again
like a proxy here and it checks between

118
00:10:56,940 --> 00:11:02,790
again the process ID and the user ID to
see whether they have access or the

119
00:11:02,790 --> 00:11:08,880
correct access and permission to talk to
each process so process a talk to the

120
00:11:08,880 --> 00:11:12,630
proxy which is basically interface
between black binder and this is all

121
00:11:12,630 --> 00:11:19,860
done within the colonel and again
process be also wants to check that as

122
00:11:19,860 --> 00:11:23,400
well I want to see if we can get access
to process a and the binder is what's

123
00:11:23,400 --> 00:11:27,569
doing the verification here and then
it's obviously given the ok because now

124
00:11:27,570 --> 00:11:33,000
process be can access process is
information because it has access and

125
00:11:33,000 --> 00:11:38,850
let's say it the permissions are defined
correctly and so all permissions are

126
00:11:38,850 --> 00:11:43,020
within an android device are all defined
within an xml file everything is kind of

127
00:11:43,020 --> 00:11:43,779
a

128
00:11:43,779 --> 00:11:49,689
a compiled xml file so if you want to
android device and and you do say via

129
00:11:49,689 --> 00:11:54,730
adb enter debug bridge can get in a
command line access you can do $TIME

130
00:11:54,730 --> 00:11:59,620
p.m. lists lists the packages so package
managers p.m. and then service list

131
00:11:59,620 --> 00:12:06,160
service space list defines every service
that's defined within a binder so any

132
00:12:06,160 --> 00:12:10,660
service that can talk in a process
communication was is defined as a

133
00:12:10,660 --> 00:12:14,740
service its kind of background
information but again binder does the

134
00:12:14,740 --> 00:12:17,499
heavy lifting for inter process
communication with an android just keep

135
00:12:17,499 --> 00:12:23,470
that in mind I'm binders based upon open
binder so again androids kind of open

136
00:12:23,470 --> 00:12:29,410
source at its core and a lot of
components are based upon open source

137
00:12:29,410 --> 00:12:35,439
technology so again a process ideas
remember binder process ID and user ID

138
00:12:35,439 --> 00:12:42,189
is where checks and that's at the kernel
level so the sandbox and I kind of

139
00:12:42,189 --> 00:12:47,259
mentioned it already and it's it's
similar to of the linux type of

140
00:12:47,259 --> 00:12:51,220
permissions again discretionary access
control that mandatory access control

141
00:12:51,220 --> 00:12:57,399
meaning manager x control can be more
stringent like selinux for example our

142
00:12:57,399 --> 00:13:06,129
discretionary means if you allow the
user ID uh 12345 to access 9 9 8 7 6

143
00:13:06,129 --> 00:13:10,809
then that will be allowed to allow it
explicitly otherwise by default it's not

144
00:13:10,809 --> 00:13:11,769
allowed

145
00:13:11,769 --> 00:13:15,699
so again it's separated by user IDs and
these are but these are both out

146
00:13:15,699 --> 00:13:20,050
different applications as you can tell
different user IDs and they can't uh

147
00:13:20,050 --> 00:13:25,750
access each other's information unless
they explicitly allow that but by

148
00:13:25,750 --> 00:13:30,160
default definitely not and this is what
is within the application sandbox of

149
00:13:30,160 --> 00:13:35,290
android applications so database could
be a secret database internal storage

150
00:13:35,290 --> 00:13:43,809
could be cash whatever maybe preferences
is also another xml file can be used for

151
00:13:43,809 --> 00:13:46,170
of

152
00:13:46,170 --> 00:13:50,579
IC for a lot of things that it's usually
for insecure data storage I see it more

153
00:13:50,579 --> 00:13:54,120
for that than anything else where people
are storing passwords in clear text but

154
00:13:54,120 --> 00:13:56,579
we'll look at that in just a bit so
don't worry

155
00:13:56,579 --> 00:14:01,199
but if you have an application on
Android application the file extension

156
00:14:01,200 --> 00:14:09,690
is APK arm and within AAP ki Fateh APK
file system zip file and if you rename

157
00:14:09,690 --> 00:14:10,680
the zip

158
00:14:10,680 --> 00:14:15,510
I mean APK to zip extracted here's the
file structure the basic file structure

159
00:14:15,510 --> 00:14:19,649
that's actually supposed to be the
androidmanifest type of that but again

160
00:14:19,649 --> 00:14:24,690
androidmanifest supposed to be here
assets classes . decks and this is where

161
00:14:24,690 --> 00:14:34,050
this is the bytecode that the dalvik VM
runs basically binary so it's kind of

162
00:14:34,050 --> 00:14:40,410
the the basics of how Android works with
permissions with components and basic

163
00:14:40,410 --> 00:14:44,910
basic things to look at when you first
get get into and he compiled application

164
00:14:44,910 --> 00:14:51,449
but again this is just an idea if you
guys have a foundation to to understand

165
00:14:51,449 --> 00:14:56,490
what I'm going to show later on so we'll
jump to the iOS side of things where

166
00:14:56,490 --> 00:15:00,480
it's based upon our primary languages
objective-c and it's a messaging

167
00:15:00,480 --> 00:15:06,000
language and if you were to use a
debugger you would hook objective-c

168
00:15:06,000 --> 00:15:13,019
message send that send it over to
basically to be processed by by OS was

169
00:15:13,019 --> 00:15:16,769
also Swift as well of the only app that
I know that's completely written on

170
00:15:16,769 --> 00:15:26,459
swift is lift and uh it's written in
layers and again it exposes api's iOS

171
00:15:26,459 --> 00:15:30,479
does does a good job or Apple does a
good job of providing documentation for

172
00:15:30,480 --> 00:15:33,959
that but primary languages objective-c

173
00:15:37,760 --> 00:15:42,319
and the appstore review that I noted
earlier uh get much more strict takes

174
00:15:42,320 --> 00:15:49,010
about a few days to three days for an
application to be uh deployed you got to

175
00:15:49,010 --> 00:15:54,500
keep that in mind as well because with
google same day you upload it it'll be

176
00:15:54,500 --> 00:15:58,970
it'll be published but with iOS is kind
of a pain point for some people or some

177
00:15:58,970 --> 00:16:06,620
enterprises or manufacturers and that's
partially the reason why I obviously

178
00:16:06,620 --> 00:16:12,530
depending on usability but that people
choose mobile are hybrid frameworks and

179
00:16:12,530 --> 00:16:15,500
again we'll talk about hybrid frameworks
in a bit but you don't have to resubmit

180
00:16:15,500 --> 00:16:19,970
it over to the app store in order to
make changes or updates which is kind of

181
00:16:19,970 --> 00:16:21,230
scary

182
00:16:21,230 --> 00:16:27,680
so the equivalent to the androidmanifest
and iOS or in and iOS applications is

183
00:16:27,680 --> 00:16:33,050
the end of the info . plist I mean this
is the xcode version it's really just a

184
00:16:33,050 --> 00:16:39,859
another xml file when you decompile a
nap and I believe I might have in the

185
00:16:39,860 --> 00:16:45,890
next life i'm not too sure but what is
defined in here and this is from a kevo

186
00:16:45,890 --> 00:16:49,910
app so I've do I OT research and
anything that has a mobile app and it's

187
00:16:49,910 --> 00:16:52,910
connected to network i'm going to look
at it whether it's my car that's my

188
00:16:52,910 --> 00:16:59,390
locker is my light bulbs but this is my
new toy that I got up but within uh iOS

189
00:16:59,390 --> 00:17:03,050
and the info . plist even here

190
00:17:03,050 --> 00:17:08,270
Apple requires a an application to
define why you need the permission so

191
00:17:08,270 --> 00:17:13,849
this one specifically is always uh is
always on always easy location when the

192
00:17:13,849 --> 00:17:17,839
application is running or even when the
application is not running and it

193
00:17:17,839 --> 00:17:22,129
defines a reason as to why it needs that
permission and apple reach this

194
00:17:22,130 --> 00:17:26,690
otherwise i'll send it back to you and
ask you why you need to sort of

195
00:17:26,690 --> 00:17:31,040
permissions and for what purpose and
what is the application have to function

196
00:17:31,040 --> 00:17:37,639
that way but for inter process
communication within our iOS

197
00:17:37,640 --> 00:17:43,790
applications you have URL schemes and
not like I pc but with URL schemes it's

198
00:17:43,790 --> 00:17:51,379
like you know HTTP colon forces for / in
this example it's kebo colon forces /or

199
00:17:51,380 --> 00:17:56,510
spoke will have their is defined here as
FB calling for 64 / in order to call it

200
00:17:56,510 --> 00:18:00,980
so any application can theoretically
call another application with an iOS

201
00:18:00,980 --> 00:18:04,970
device if they use the schema and it's
up to the application to provide

202
00:18:04,970 --> 00:18:08,780
verification validation for up

203
00:18:08,780 --> 00:18:13,310
interprocess communication but again
kind of permissions are set

204
00:18:13,310 --> 00:18:20,090
theoretically from for iOS here in the
info . list as well as IPC interprocess

205
00:18:20,090 --> 00:18:23,990
communication communicating with other
third-party applications within a device

206
00:18:23,990 --> 00:18:31,760
and then also any type of our basic
let's say what the devices is or what

207
00:18:31,760 --> 00:18:36,320
what the application is targeted for
what device so this one specifically is

208
00:18:36,320 --> 00:18:40,100
iOS 83 or 84 I'm sorry

209
00:18:40,760 --> 00:18:45,920
so that way it's it's only targeted for
newer type of AP is again first place to

210
00:18:45,920 --> 00:18:53,210
look again similar to android manifest
within iOS application and i'm not going

211
00:18:53,210 --> 00:18:58,100
to go through the whole thing here as
far as the architecture of iOS but i'll

212
00:18:58,100 --> 00:19:04,250
know a few things secure boot chain for
for apple iOS so it's basically burned

213
00:19:04,250 --> 00:19:11,510
into the images the iOS images from
factory i'm also going to note secure

214
00:19:11,510 --> 00:19:16,790
element and secure Enclave secure
element is where Apple pay any type of

215
00:19:16,790 --> 00:19:25,250
financial transactions and then secure
Enclave would be touch ID keychain which

216
00:19:25,250 --> 00:19:31,010
is secure storage which is any type of
credentials tokens should all be stored

217
00:19:31,010 --> 00:19:35,330
within the secure Enclave and we'll get
to the sandbox in just a minute here

218
00:19:35,330 --> 00:19:40,790
which is the next slide but again secure
element element secure Enclave are

219
00:19:40,790 --> 00:19:45,170
basically secure storage while secure
Enclave secure storage for any type of

220
00:19:45,170 --> 00:19:47,090
credentials are sensitive info

221
00:19:47,090 --> 00:19:53,840
even if it's not credentials and the
only way a an attacker can get access to

222
00:19:53,840 --> 00:19:58,490
that is if the device is jailbroken so
sometimes if there is something really

223
00:19:58,490 --> 00:20:02,420
sensitive some people usually hash
encrypt and then put it into the

224
00:20:02,420 --> 00:20:05,090
keychain just something to keep in mind

225
00:20:05,090 --> 00:20:14,570
so the sandbox within a look too great
but how the sandbox with in iOS their

226
00:20:14,570 --> 00:20:19,730
unique home directories again similar to
kind of linux-based a little bit and

227
00:20:19,730 --> 00:20:25,010
they have their own a data container
which is totally separate from the

228
00:20:25,010 --> 00:20:30,590
bundler container and then if if the
application has iCloud features enabled

229
00:20:30,590 --> 00:20:34,070
you also have another container for that
but these are all separate directories

230
00:20:34,070 --> 00:20:34,939
as well

231
00:20:34,940 --> 00:20:40,310
unique separate directories at that when
the device when the application is

232
00:20:40,310 --> 00:20:50,090
installed onto the device so the file
extension for iOS applications and an

233
00:20:50,090 --> 00:20:55,820
IPA so apt IPA and again zip files as
well rename it to zip and here's kind of

234
00:20:55,820 --> 00:21:01,520
basic structure any type of application
that you renamed to zip and extract it's

235
00:21:01,520 --> 00:21:06,920
always going to have this payload so
let's say I decompile or I extract that

236
00:21:06,920 --> 00:21:13,730
kevo app I just extract uh another let's
say like Instagram or something i will

237
00:21:13,730 --> 00:21:18,890
have kevo that app and i'll have
instagram app in the same folder in the

238
00:21:18,890 --> 00:21:23,360
same payload folder it will be attracted
to the same exact structure before the

239
00:21:23,360 --> 00:21:29,209
meat of uh where you want to look is an
inside of this director hear that . AP

240
00:21:29,210 --> 00:21:34,280
folder is where the application binary
is at so by default when you submit an

241
00:21:34,280 --> 00:21:41,570
application into the app store the apps
are encrypted by Apple's of drm call

242
00:21:41,570 --> 00:21:48,260
Fairplay drm but let's say let's look at
it from my uh pen testers perspective

243
00:21:48,260 --> 00:21:52,340
where a client is going to give me an IP
files not going to be encrypted so again

244
00:21:52,340 --> 00:21:57,110
it's just up the zip file and from there
I can just look into this directory drop

245
00:21:57,110 --> 00:22:01,100
it into Ida find a binary drop it into
Ida and I can see all the client-side

246
00:22:01,100 --> 00:22:07,550
code very very simple not too hard and I
have a couple examples afterwards but

247
00:22:07,550 --> 00:22:11,870
these are kinda just other metadata but
i kinda wanted you to just take . here's

248
00:22:11,870 --> 00:22:16,699
where this is that the main the main
item to look at within the

249
00:22:17,210 --> 00:22:25,130
I decompiling are extracting of of an
iOS app so let's talk about hybrid

250
00:22:25,130 --> 00:22:31,159
frameworks anybody here to hybrid
frameworks before a few ok we'll talk

251
00:22:31,159 --> 00:22:41,299
about it so hybrid is is basically iOS
the web and android cross-platform works

252
00:22:41,299 --> 00:22:45,500
between all three you can have one code
base obviously that doesn't sound too

253
00:22:45,500 --> 00:22:46,250
great

254
00:22:46,250 --> 00:22:51,620
come while these for me because that
exposes html5 JavaScript and other

255
00:22:51,620 --> 00:22:57,020
native vulnerabilities native API
vulnerabilities within each platform but

256
00:22:57,020 --> 00:23:03,500
again some of the the keys about hybrid
is you can update without reading .

257
00:23:03,500 --> 00:23:07,490
because javascript you own the web
server you own the application server

258
00:23:07,490 --> 00:23:13,700
and all it is is just what's called a
webview and what that Webbie does

259
00:23:13,700 --> 00:23:18,260
basically it's in at browser in a
browser for an application and it did

260
00:23:18,260 --> 00:23:23,720
basically that dynamically runs code
executes code so like a web app like I

261
00:23:23,720 --> 00:23:29,630
said html5 and html5 has its own issues
i would wish on no in just a bit but a

262
00:23:29,630 --> 00:23:35,419
lot of these applications are heavy on
JavaScript and with that you also have

263
00:23:35,419 --> 00:23:39,440
to keep in mind that people think they
can store secrets in JavaScript like you

264
00:23:39,440 --> 00:23:44,390
can decompile it's in clear text but
again something to note and one code

265
00:23:44,390 --> 00:23:50,090
base here and and it's odd and another
huge like area that needs to be

266
00:23:50,090 --> 00:23:54,830
researched just don't have the time is
each hybrid mobile framework has its own

267
00:23:54,830 --> 00:23:59,990
marketplace and plugins and whether they
provide code reviews are not if security

268
00:23:59,990 --> 00:24:05,149
reviews which I doubt they all have
their own marketplaces so think about

269
00:24:05,149 --> 00:24:10,039
Google Play think about App Store
apple's app store uh but now these

270
00:24:10,039 --> 00:24:13,669
frameworks have their own marketplaces
with thousands of plugins and thousands

271
00:24:13,669 --> 00:24:17,390
of apps to kind of piggyback and
third-party code that's not even being

272
00:24:17,390 --> 00:24:20,929
reviewed research and even to upload
that is very very simple and i'll talk

273
00:24:20,929 --> 00:24:27,289
about one instance for a formal
framework that a hybrid framework that

274
00:24:27,289 --> 00:24:29,750
will talk about one of the most common
ones

275
00:24:29,750 --> 00:24:35,090
and I was talking about web view but
they were basically renders the the the

276
00:24:35,090 --> 00:24:39,830
web page and you can either use web kit
or crosswalk two different web runtimes

277
00:24:39,830 --> 00:24:44,929
is what is the native code like I said
you have your own native vulnerabilities

278
00:24:44,930 --> 00:24:50,540
objective-c with iOS or there are plenty
of let's say for the URL schemas for

279
00:24:50,540 --> 00:24:55,460
that inter-process communication there
are legacy API is that have since been

280
00:24:55,460 --> 00:24:59,750
deprecated but are still being used by
applications that are not that doesn't

281
00:24:59,750 --> 00:25:06,440
validate certain parameters for example
Swift Java C C++ with native you kind of

282
00:25:06,440 --> 00:25:15,260
have more control over the application
then I go saying with html5 you have

283
00:25:15,260 --> 00:25:20,900
your own issues with WebSockets
localstorage these are basically on disk

284
00:25:20,900 --> 00:25:26,540
persistent storage people store cookies
onto an iOS device into local storage

285
00:25:26,540 --> 00:25:29,540
which is on business and can never be
deleted

286
00:25:30,110 --> 00:25:34,189
nothing about the application you have
web workers access to the file system

287
00:25:34,190 --> 00:25:39,440
view the file system API web RTC
real-time communication for tap video

288
00:25:39,440 --> 00:25:43,490
communication and there's plenty more
but again this opens up a whole new

289
00:25:43,490 --> 00:25:51,680
attack surface with mobile hybrid
frameworks so the most common here is

290
00:25:51,680 --> 00:25:56,480
Apache Cordova which is also known as
phonegap and a lot of these other hybrid

291
00:25:56,480 --> 00:26:01,880
frameworks piggyback on cordova big
enterprises corporations use cordova

292
00:26:01,880 --> 00:26:08,720
Weatherby banks whether it be private
companies public companies and again

293
00:26:08,720 --> 00:26:14,120
it's most common and you can choose a of
the red one red web runtime but it shows

294
00:26:14,120 --> 00:26:23,209
cordova recently switched over to cross
walk so and again I talked about the

295
00:26:23,210 --> 00:26:29,210
plugins here for uh for the mobile
hybrid frameworks and uh the risky

296
00:26:29,210 --> 00:26:36,080
things with it but uh they actually call
it out within the documentation so it

297
00:26:36,080 --> 00:26:40,610
says a plug-in is a package of injected
code that allows the cordova webview

298
00:26:40,610 --> 00:26:43,459
within which the app renders too

299
00:26:43,460 --> 00:26:46,549
communicate with the native platform on
which it runs so it's basically

300
00:26:46,549 --> 00:26:51,260
cross-site scripting javascript
injection that that's what a plug-in is

301
00:26:51,260 --> 00:26:57,080
so you can name a plug in whatever you
want calendar Jas and maybe do some

302
00:26:57,080 --> 00:27:02,000
legitimate things but also do some some
fun mysterious things by where things

303
00:27:02,000 --> 00:27:08,480
how but is it so easy to publish the
plug-in they give you step-by-step

304
00:27:08,480 --> 00:27:15,230
instructions and it up into their uh
into the repositories and PM is what is

305
00:27:15,230 --> 00:27:15,860
what

306
00:27:15,860 --> 00:27:23,479
cordova uses for their plugins and again
very very easy to to publish a plug-in

307
00:27:23,480 --> 00:27:28,340
with in cordova within the within the
ecosystem and again it's injected code

308
00:27:28,340 --> 00:27:32,959
and it's going to run within the webview
so again like a web application same

309
00:27:32,960 --> 00:27:38,750
thing I think of it as cross-site
scripting and again the the review

310
00:27:38,750 --> 00:27:43,760
process with this is just is basically
none and it's kinda just on your own due

311
00:27:43,760 --> 00:27:49,010
diligence is what they're looking for
developers to do but again who does that

312
00:27:49,640 --> 00:27:53,390
here's a code review process stuff to
look for test for air conditions

313
00:27:53,390 --> 00:27:56,390
explicitly errors or bad user input

314
00:27:57,200 --> 00:28:03,169
I don't know what that is but have
labels but there's not much to it tells

315
00:28:03,169 --> 00:28:07,010
you how to submit it as we speak of the
process but there's no bit no denying no

316
00:28:07,010 --> 00:28:12,020
going back to developers because npm is
its own entity and they're not in charge

317
00:28:12,020 --> 00:28:18,020
basically of how I know Jas or
JavaScript runs like a huge area to be

318
00:28:18,020 --> 00:28:23,179
researched if anybody has a time anybody
wants to work on it this is just for

319
00:28:23,179 --> 00:28:28,220
cordova every other mobile hybrid
framework has their own kind of plug-in

320
00:28:28,220 --> 00:28:33,440
marketplace literally like you go into
and you just kind of click install and

321
00:28:33,440 --> 00:28:36,440
it goes into application very very
simple

322
00:28:37,960 --> 00:28:43,210
an example of when I say like no Jas for
example

323
00:28:43,210 --> 00:28:50,110
uh-huh there was a developer who
basically took their dependencies or

324
00:28:50,110 --> 00:28:56,020
their packages off of NPM because of say
kick and kick the messaging service had

325
00:28:56,020 --> 00:29:01,059
some kind of copyright issue with how
that a repository was named so I got mad

326
00:29:01,059 --> 00:29:08,200
took off is his as a repository and
basic and I'll always code did with 17

327
00:29:08,200 --> 00:29:13,600
lines of code was basically add padding
to the left side of of the page and it

328
00:29:13,600 --> 00:29:18,459
broke everybody's build because no Jas
and javascript is is dependency heavy

329
00:29:18,460 --> 00:29:23,409
but nowdays runs on NPM as well so
there's no verification and again

330
00:29:23,409 --> 00:29:28,750
validation or anything so anybody can
kind of submit and take these these

331
00:29:28,750 --> 00:29:33,940
injected plugins or JavaScript code and
again you can do some pretty good damage

332
00:29:33,940 --> 00:29:37,779
just always just taken off a repository
but i can only imagine if you're running

333
00:29:37,779 --> 00:29:47,350
some malicious code what can happen
again for the NPM registry here and here

334
00:29:47,350 --> 00:29:53,289
are some of the advisories just within
the year for cordova this was a remote

335
00:29:53,289 --> 00:29:56,950
exploit of secondary configuration
variables in Apache Cordova android

336
00:29:56,950 --> 00:30:03,760
again rated as a high and severity this
was last september's the last year

337
00:30:03,760 --> 00:30:08,408
another plug-in vulnerability not gonna
go through them going to show you just

338
00:30:08,409 --> 00:30:12,669
within the last year how how many
vulnerabilities and how many are high

339
00:30:12,669 --> 00:30:19,450
and and remote code execution for
example that these hybrid frameworks

340
00:30:19,450 --> 00:30:26,020
expose that's a meeting that you can
really see much but again just with the

341
00:30:26,020 --> 00:30:33,279
last year this was an april and this one
is also high bypass of access

342
00:30:33,279 --> 00:30:40,179
restrictions in Apache Cordova iOS
another high here cordova cross

343
00:30:40,179 --> 00:30:44,830
application scripting the android intent
URLs cross-site scripting in other words

344
00:30:44,830 --> 00:30:49,600
this is within the the framework itself
so keep that in mind

345
00:30:50,290 --> 00:30:57,399
the to the the enterprise's once you
know how many times I've had they

346
00:30:57,400 --> 00:31:01,600
updated their whole framework probably
not much i'm pretty sure that security

347
00:31:01,600 --> 00:31:05,560
team is doing this once in a while once
they know they're running cordova if any

348
00:31:05,560 --> 00:31:09,010
of you guys know you guys are in court
over now you're probably not too too

349
00:31:09,010 --> 00:31:15,100
happy foot and get some even even with
the runtimes there's also a

350
00:31:15,100 --> 00:31:20,800
vulnerability so crosswalk has their own
openness Alice this is from google play

351
00:31:20,800 --> 00:31:24,040
store but it's for crosswalk as well

352
00:31:24,040 --> 00:31:28,720
another big comment are big-league
player and the game is for hybrid

353
00:31:28,720 --> 00:31:35,740
framework xamarin and Zamperini is owned
by microsoft and what they say anything

354
00:31:35,740 --> 00:31:41,260
you can do is it an objective-c swiftor
java you can do with C sharp and C shop

355
00:31:41,260 --> 00:31:45,370
with xamarin so you basically write C
sharp code and it converts that to

356
00:31:45,370 --> 00:31:50,800
objective-c to Swift and to Java which
is interesting right like I'm pretty

357
00:31:50,800 --> 00:31:57,430
sure there are some issues there and it
runs for the devices around tomorrow

358
00:31:57,430 --> 00:32:04,750
which is without at runtime it 44
xamarin applications and then at for a

359
00:32:04,750 --> 00:32:10,060
android applications it runs on arm
executable units ahead of time

360
00:32:10,060 --> 00:32:13,480
compliation is what it is

361
00:32:13,480 --> 00:32:18,010
xamarin also has a free and enterprise
version and I didn't know again has

362
00:32:18,010 --> 00:32:22,780
another marketplace to but within its
free enterprise version they have its

363
00:32:22,780 --> 00:32:29,530
own they have their own ide and uh and
within the ide it's it's like a fork

364
00:32:29,530 --> 00:32:34,030
visual studio because again microsoft
owns it but i also have specific samer

365
00:32:34,030 --> 00:32:42,790
and functions as well so one cool thing
that I found uh this is back in 2014 is

366
00:32:42,790 --> 00:32:48,520
when this was raised but to keep or to
store passwords within an Android

367
00:32:48,520 --> 00:32:54,070
application your to securely store is
within the android keystore and for

368
00:32:54,070 --> 00:32:59,679
example and applications they have their
keystore hard-coded into the samurai and

369
00:32:59,680 --> 00:33:03,660
framework so anybody with a salmon
application

370
00:33:03,660 --> 00:33:08,670
on Android device you can on an attacker
can decrypt all their passwords for

371
00:33:08,670 --> 00:33:16,350
facebook google or anything that uses
the this is a marine . off of a plug-in

372
00:33:16,350 --> 00:33:23,040
or our component 44 examine this guy
says back in 2014

373
00:33:23,040 --> 00:33:26,220
instead of using hard-coded keystore
password the application to should

374
00:33:26,220 --> 00:33:30,330
provide its own from a safe origin
otherwise as a Marine social accounts

375
00:33:30,330 --> 00:33:35,280
keystore and all apset Sam Randolph
components can that use a Miranda of

376
00:33:35,280 --> 00:33:38,129
components can easily be breached just
by looking at the source code on github

377
00:33:38,130 --> 00:33:44,160
because this open-source by the way it's
on github and here's that string amazing

378
00:33:44,160 --> 00:33:50,100
string here that you can use to to to
hog the decrypt the passwords within

379
00:33:50,100 --> 00:33:56,850
applications that use as a marine . off
so i said i first started looking at

380
00:33:56,850 --> 00:34:02,429
this April I get asked back at cactus
con or similar to cactus khan and just

381
00:34:02,430 --> 00:34:05,580
like yesterday I want to take a look
back and there's some there's some

382
00:34:05,580 --> 00:34:12,270
activity section June hand up this guy
was saying basically you know I think

383
00:34:12,270 --> 00:34:16,050
that I think that this big guys put a
pull request should be reviewed it even

384
00:34:16,050 --> 00:34:20,370
if it's past two years from its initial
proposal and the guys think we're

385
00:34:20,370 --> 00:34:25,319
working on it in june and then
supposedly it was merged but it's not

386
00:34:25,320 --> 00:34:29,400
merged already looked at it but it's
still not merge into master so it's

387
00:34:29,400 --> 00:34:33,300
still an issue this is july this is you
know not too long ago

388
00:34:34,380 --> 00:34:37,770
so while i was always clicking around
with researching this i was laughing

389
00:34:37,770 --> 00:34:42,509
because I saw this post of his guy who
found the same thing this is in July as

390
00:34:42,510 --> 00:34:46,260
well he's like oh I want to store some
sensitive information like refresh

391
00:34:46,260 --> 00:34:50,580
tokens in the keystore I was going to
use you know another another key vault

392
00:34:50,580 --> 00:34:56,639
storage plug-in sees all and and in
there is a murderer off library which

393
00:34:56,639 --> 00:34:59,879
leverages the keystore they have the
password hard-coded he's like what's

394
00:34:59,880 --> 00:35:00,840
going on

395
00:35:00,840 --> 00:35:05,160
am I missing something which is not it's
playing it in plain text but all of a

396
00:35:05,160 --> 00:35:08,160
sudden I thought was funny that people
are kind of taking note after years of

397
00:35:08,160 --> 00:35:15,180
this being a vulnerability but but again
anybody's examine an android device a

398
00:35:15,180 --> 00:35:16,770
pretty much at risk for their

399
00:35:16,770 --> 00:35:31,470
credentials to be compromised another
another thing with ins and examine I was

400
00:35:31,470 --> 00:35:39,899
Android 51 below xamarin users a dll and
it drops it it had dropped into the SD

401
00:35:39,900 --> 00:35:44,880
card and SD card is world writable world
readable and when someone can do is

402
00:35:44,880 --> 00:35:49,500
basically over right that dll file and
backdoor the application and that's

403
00:35:49,500 --> 00:35:55,620
exactly what people did so and the
developers have to rebuild their

404
00:35:55,620 --> 00:36:00,990
application using xamarin for android
5.1 or newer and i think most

405
00:36:00,990 --> 00:36:06,839
enterprises target Android for that for
right now so this was last year

406
00:36:15,840 --> 00:36:21,120
here's another one is to like a builder
it's one of those drag-and-drop type of

407
00:36:21,120 --> 00:36:26,640
applications and uses back into service
so let's say my sequel MSS equal things

408
00:36:26,640 --> 00:36:32,850
like that basically outsource that to
Alaric and for me when I see easy i know

409
00:36:32,850 --> 00:36:34,230
there's some issues there

410
00:36:34,230 --> 00:36:41,370
so having look at the documentation and
I piggybacks on on cordova and what the

411
00:36:41,370 --> 00:36:47,910
advice to their customers is they want
everybody to deploy via their app store

412
00:36:47,910 --> 00:36:52,620
so that way they can have full control
hundred percent full control on who has

413
00:36:52,620 --> 00:36:58,560
the ability to install their app which
is not true for one and for 2i less are

414
00:36:58,560 --> 00:37:02,400
they going to encrypt those those
applications is gonna be that much

415
00:37:02,400 --> 00:37:07,140
easier for attackers to get access to
those apps and also even the malicious

416
00:37:07,140 --> 00:37:11,790
behavior the library's the back doors
and all that I guarantee you that Alaric

417
00:37:11,790 --> 00:37:15,870
is not putting throwing those into a
virtual machine and analyze that type of

418
00:37:15,870 --> 00:37:18,870
information they're not google

419
00:37:19,400 --> 00:37:24,500
but also how there to kind of summarize
here they want if you're going to store

420
00:37:24,500 --> 00:37:31,910
secrets how they're advising you to uh
office Kate and minimize the JavaScript

421
00:37:31,910 --> 00:37:35,180
code which you can just google the
office key javascript and it will do it

422
00:37:35,180 --> 00:37:39,020
for you so obviously that's not a
solution but there's suggesting advising

423
00:37:39,020 --> 00:37:44,809
other clients to do so or just load
javascript remotely because you can't

424
00:37:44,809 --> 00:37:48,230
prop you know you can't proxy the
information at runtime right being

425
00:37:48,230 --> 00:37:52,819
sarcastic you could you could proxy it
look at the HTTP response and then view

426
00:37:52,819 --> 00:37:57,319
everything it's sending back to the
application never store secrets in

427
00:37:57,319 --> 00:38:00,920
JavaScript hard-coded never store
secrets in the client side you're going

428
00:38:00,920 --> 00:38:07,760
to store secret storm in the keystore
for android or the keychain for iOS and

429
00:38:07,760 --> 00:38:15,079
this is from a post here how within
their ionic again ionic uses two lyrics

430
00:38:15,079 --> 00:38:19,520
appbuilder but there was about like 80
83 84 like thumbs-up like hey this is

431
00:38:19,520 --> 00:38:27,529
good advice use it and they have a kind
of a general disclaimer disclaimer as

432
00:38:27,529 --> 00:38:32,660
well when you use to work and it says uh
Taylor does not enforce any security

433
00:38:32,660 --> 00:38:36,470
permissions it won't and will end will
invoke any user-supplied data object

434
00:38:36,470 --> 00:38:42,709
code and process regardless of whether
it is trusted or not hook

435
00:38:43,460 --> 00:38:56,690
they said it was the last ones genexus
I've seen genexus only kind of Latin

436
00:38:56,690 --> 00:39:03,289
America area for within applications
that are used within Latin America and

437
00:39:03,289 --> 00:39:08,900
uh it's one of those a-pillars
drag-and-drop type of things and I has

438
00:39:08,900 --> 00:39:14,660
various compatibility with various
languages c-sharp PHP and other backends

439
00:39:14,660 --> 00:39:18,109
as well as some of them are specific
that's kinda why I i put that out there

440
00:39:19,069 --> 00:39:24,470
I mean what he uses for authentication
authorization is 0 auth how many

441
00:39:24,470 --> 00:39:28,220
familiar OAuth okay definitely a lot
more sweet

442
00:39:28,980 --> 00:39:35,580
that's going to be a huge topic and some
of the insecure defaults I still believe

443
00:39:35,580 --> 00:39:44,490
everything's default over HTTP even
there the rest interface to call a lot

444
00:39:44,490 --> 00:39:50,850
of tokens all over HTTP and they also
advised to hard-code your client secret

445
00:39:50,850 --> 00:39:55,200
within your application binary which is
not a good idea i will talk about that

446
00:39:55,200 --> 00:40:02,250
in a bit as to why it's not but uh once
you have the secret the client secret in

447
00:40:02,250 --> 00:40:07,980
the client ID you can basically a grant
of granted granted an access token are

448
00:40:07,980 --> 00:40:13,260
refresh token but the nexus only uses
access token so they're long-lived so

449
00:40:13,260 --> 00:40:17,340
access tokens or something would say
that Twitter uses I don't know one last

450
00:40:17,340 --> 00:40:21,300
thing you guys logged into Twitter or
Facebook or Instagram probably like

451
00:40:21,300 --> 00:40:24,480
never unless you like how to reinstall
or something like that but again

452
00:40:24,480 --> 00:40:28,680
long-lived you don't have to have using
passwords all you have to do is grab his

453
00:40:28,680 --> 00:40:36,330
client ID and client secret and you're
good you can get refresh tokens so

454
00:40:36,330 --> 00:40:41,850
common findings i'll start with ssl/tls
issues always for the most part always

455
00:40:41,850 --> 00:40:46,560
unless they're they're pinning but these
are the things that look for with an iOS

456
00:40:46,560 --> 00:40:51,359
if they're using a certain library like
afnetworking doesn't verify or validate

457
00:40:51,359 --> 00:40:57,330
certificate chains you can allow all
https certificate sometimes you'll see

458
00:40:57,330 --> 00:41:01,590
that for debugging purposes but the
deploy to production for getting maybe

459
00:41:01,590 --> 00:41:07,320
I'm hoping for getting I don't know
they're turning off SL painting mode as

460
00:41:07,320 --> 00:41:12,600
some painting is basically uh only
allowing the application to uh

461
00:41:12,600 --> 00:41:19,230
communicate with the server that has
either publicly or domaining or just

462
00:41:19,230 --> 00:41:22,470
that only that certificate only is what
is happening

463
00:41:23,100 --> 00:41:30,690
it kind of forces so these are these are
when I drop it into hopper orida pro for

464
00:41:30,690 --> 00:41:34,530
example i'm looking at client-side code
look for this before i even i even

465
00:41:34,530 --> 00:41:38,130
install the application i'm going to
statically analyze and then i'm going to

466
00:41:38,130 --> 00:41:41,380
verify and validate our during runtime

467
00:41:41,380 --> 00:41:52,060
so again more api's I look for with an
iOS gonna hurry up here here's a new one

468
00:41:52,060 --> 00:41:59,680
for iOS 9 above allow arbitrary loads
this is the plist file and this

469
00:41:59,680 --> 00:42:05,560
basically with uh with a Transport
Security and only enforces TLS too . i

470
00:42:05,560 --> 00:42:12,340
mean 1.02 I wish 1.2 and uh forward
secrecy cipher suites so if your bank

471
00:42:12,340 --> 00:42:17,950
something like that you want to enforce
of Transport Security but in this case

472
00:42:17,950 --> 00:42:19,330
they're disabling it

473
00:42:19,330 --> 00:42:23,590
iOS 9 above its default I'm gonna kind
of go through this quickly because i

474
00:42:23,590 --> 00:42:27,940
want to show you the demo these are the
Android API phone away p is set that I

475
00:42:27,940 --> 00:42:34,000
search for as well this is easy when i
get the application ID compiler and I

476
00:42:34,000 --> 00:42:41,680
opened up in JD gooey and I was also in
a bit gonna know within cordova cordova

477
00:42:41,680 --> 00:42:44,980
doesn't support true certificate pinning
so fat

478
00:42:44,980 --> 00:42:50,350
if our mobile app or banking app is
using cordova something to keep in mind

479
00:42:50,350 --> 00:42:58,480
that insecure data storage is everywhere
within our from mobile applications

480
00:42:58,480 --> 00:43:02,380
that's what I see the most what I find
with his personal information encryption

481
00:43:02,380 --> 00:43:08,650
keys secret keys are values passwords a
lot tokens definitely sequel databases

482
00:43:08,650 --> 00:43:14,020
realme databases which are iOS specific
binary cookies cash and temp directory

483
00:43:14,020 --> 00:43:20,620
is where I look for or look for those
are you cannot see this but this is a

484
00:43:20,620 --> 00:43:25,029
client encryption key here client secret
your API keys and these this is all

485
00:43:25,030 --> 00:43:29,320
within a json file for an applicant for
an iOS application this is something

486
00:43:29,320 --> 00:43:34,090
that a tool won't find this is when i'm
on the file system of the same ipad I'm

487
00:43:34,090 --> 00:43:36,910
just checking within the bundler
container i showed you guys in the

488
00:43:36,910 --> 00:43:41,410
sandbox earlier I kind of looked at
everything I'm nosy so I feel happen to

489
00:43:41,410 --> 00:43:43,899
find this and I was like sweet you know

490
00:43:43,900 --> 00:43:47,770
quiet you know encryption keys this is
like server encryption keys like private

491
00:43:47,770 --> 00:43:50,770
keys not even public keys

492
00:43:52,140 --> 00:44:01,410
here's another one again I mean I mean
that the the container here the bundle

493
00:44:01,410 --> 00:44:05,370
container for the application and again
another instance of a private key being

494
00:44:05,370 --> 00:44:09,480
stored within an xml file and clear text
this is all the applications running to

495
00:44:09,480 --> 00:44:15,750
so to get that the device is jailbroken
so that's how I'm able to get access SS

496
00:44:15,750 --> 00:44:25,530
agent by the way that this is their own
encryption I don't know why they try to

497
00:44:25,530 --> 00:44:28,740
encrypt their own things instead of
using the platform security encryption

498
00:44:28,740 --> 00:44:34,379
mechanisms but yeah that's what i said
but why so Android side of things again

499
00:44:34,380 --> 00:44:39,540
same thing using passwords all the
secret values shared preferences is the

500
00:44:39,540 --> 00:44:44,790
difference here it's xml file I noted
earlier and people are developers seem

501
00:44:44,790 --> 00:44:47,670
to think that's a secure location
because it's in the it's within the

502
00:44:47,670 --> 00:44:52,410
application sandbox but within our
mobile security if somebody gets a

503
00:44:52,410 --> 00:44:57,330
device I say get stolen lost and it's
stored in the shared preferences you

504
00:44:57,330 --> 00:45:00,779
don't have to have username or password
if credentials are stored America or

505
00:45:00,780 --> 00:45:07,980
tokens are stored in that uh here's an
instance where the the access keys at

506
00:45:07,980 --> 00:45:12,570
sea on the absolute the access token is
being logged to the console

507
00:45:13,170 --> 00:45:16,560
I'll during application runtime so with
a within Android you could do

508
00:45:17,100 --> 00:45:21,600
adb logcat and just watch all the logs
or you can grab for the specific

509
00:45:21,600 --> 00:45:25,980
application but in this instance they
work at they were they were logging the

510
00:45:25,980 --> 00:45:32,250
access token and as well as the Refresh
token and here's the shared preferences

511
00:45:32,250 --> 00:45:36,390
file where they're storing the the
access token here in clear-text i can

512
00:45:36,390 --> 00:45:41,129
just pop that into another android app
the same thing in into their shared

513
00:45:41,130 --> 00:45:44,010
preferences and now i have access easy
refresh the page

514
00:45:44,010 --> 00:45:50,910
no username or password required and
then I have access forever basically is

515
00:45:50,910 --> 00:45:55,799
a funny one with sequel light a single
database that basically how one of the

516
00:45:55,800 --> 00:45:59,220
clown of one of one of my clients
decided to

517
00:46:00,079 --> 00:46:06,799
clone their production database into a
sequel database which included usernames

518
00:46:06,799 --> 00:46:12,589
passwords so here's the usernames and
passwords and then the hashed passwords

519
00:46:12,589 --> 00:46:16,849
and then other tables it showed like
emails other people's emails showed

520
00:46:16,849 --> 00:46:21,979
whether i showed their windows SSID the
the shot everything and I was like what

521
00:46:21,979 --> 00:46:33,529
is going on here is just a note without
about Oh often and they they described

522
00:46:33,529 --> 00:46:38,239
it out and they're RFC but uh it's the
threat of obtaining clock client secrets

523
00:46:38,239 --> 00:46:46,519
here and uh see what can here's the
attack here obtained secret from of from

524
00:46:46,519 --> 00:46:49,549
source code or binary and that's the
client ID and client secret I was

525
00:46:49,549 --> 00:46:57,469
talking about in order to retrieve an
access token so the other client secret

526
00:46:57,469 --> 00:47:00,739
is used to authenticate the identity of
the application to use these services

527
00:47:00,739 --> 00:47:05,119
API with the application requests to
access the users account and must be

528
00:47:05,119 --> 00:47:09,559
kept private between the application and
the API so if it's not private if it's

529
00:47:09,559 --> 00:47:11,959
within the client client side code

530
00:47:11,959 --> 00:47:18,529
my-my fit in my world now here's an
instance in real life how we're samsung

531
00:47:18,529 --> 00:47:23,959
smart things lock uh within their
application binary hard-coded the client

532
00:47:23,959 --> 00:47:27,618
secret and again just like the other
apps i showed but now people are able to

533
00:47:27,619 --> 00:47:31,549
get access to the front door because of
that again I kind of had here clarity

534
00:47:31,549 --> 00:47:35,269
and client secret at this point we had
everything we needed to get our own Olaf

535
00:47:35,269 --> 00:47:37,848
token and then you have access someone's
front door

536
00:47:37,849 --> 00:47:45,999
that's cool like James Brown says let
you get your Donatella ok

537
00:47:45,999 --> 00:47:55,359
more instances mrs. genexus obviously
with a hard code the client secret

538
00:47:55,359 --> 00:48:00,519
client ID and obviously renamed this is
about the the endpoints in which you

539
00:48:00,519 --> 00:48:05,379
authenticate to again clear-text not
supposed to be a secret

540
00:48:06,069 --> 00:48:12,159
whoo okay I'm gonna get the demo reel
quick because i'm running out of time

541
00:48:12,159 --> 00:48:20,259
more secrets perfect i have one running
here and it's called mobile security

542
00:48:20,259 --> 00:48:26,859
framework python-based was running for
you guys i believe i have a scan here

543
00:48:26,859 --> 00:48:29,859
already

544
00:48:33,530 --> 00:48:40,490
I'll show you my friends from subaru
because I center picking on them lately

545
00:48:50,990 --> 00:49:01,250
it runs if not we'll go to Cork quarks
python-based as well and cork is created

546
00:49:01,250 --> 00:49:08,330
by the Lincoln guys so that's going to
provide APK the path of the APK in which

547
00:49:08,330 --> 00:49:14,750
i will and i didn't even separate this
but close your eyes guys think I haven't

548
00:49:14,750 --> 00:49:17,750
hear god's perfect

549
00:49:19,980 --> 00:49:22,980
yeah

550
00:49:24,440 --> 00:49:27,820
yeah

551
00:49:27,820 --> 00:49:37,030
there's a manifest file this is for
subaru i gave a talk at IOT village

552
00:49:37,030 --> 00:49:41,590
defcon and I was it again the client
secret client ID i was able to get

553
00:49:41,590 --> 00:49:48,340
access to my car home based upon that
forever to unlock my car door locks

554
00:49:48,340 --> 00:49:50,380
everything but are you

555
00:49:50,380 --> 00:49:58,390
what would I can see it looks kinda
weird external but uh what court does is

556
00:49:58,390 --> 00:50:03,850
get three different java decompiler ZTE
Corp ryokan and CFR and aggregates the

557
00:50:03,850 --> 00:50:09,160
best best results and it's gonna it's
going to statically analyze and

558
00:50:09,160 --> 00:50:12,339
decompiling right now so we'll hop over
hopefully this is running

559
00:50:22,630 --> 00:50:29,079
cool his mobile security framework
obviously runs responsive so on twitter

560
00:50:29,079 --> 00:50:37,779
bootstrap shows the main components here
activities services receivers providers

561
00:50:37,779 --> 00:50:44,950
also java as well i'll show you guys
this real quick for just a second but

562
00:50:44,950 --> 00:50:52,058
this is on github free tool tells about
permissions gonna have to go quickly

563
00:50:52,059 --> 00:50:56,380
here but everything anything that looks
like HTTP connections or anything that

564
00:50:56,380 --> 00:51:01,029
has this type of activity or API it
categorizes it for you

565
00:51:01,029 --> 00:51:10,150
what I always look for first is
passwords so in this case seems any

566
00:51:10,150 --> 00:51:17,349
password this URL it turns out there's a
local web server that starts up but

567
00:51:17,349 --> 00:51:20,799
there i'll go into the fun stuff with a
secret

568
00:51:24,970 --> 00:51:28,118
looks like here we go

569
00:51:29,890 --> 00:51:39,430
consumer key secret hard code into the
app get wrapping up guys

570
00:51:41,830 --> 00:51:48,759
but again very very easy and this is
also for uh for iOS applications as well

571
00:51:48,760 --> 00:52:01,270
not as not as in detail but you can see
classes within an application and the

572
00:52:01,270 --> 00:52:05,530
plist files is as well but other tools i
was going to show you

573
00:52:05,530 --> 00:52:15,460
aside from cork is android framework
python-based as well quit school in one

574
00:52:15,460 --> 00:52:16,210
minute

575
00:52:16,210 --> 00:52:20,380
there's a file this is really quick and
again statically analyzes the

576
00:52:20,380 --> 00:52:26,500
application client side code the
application for every quick going to

577
00:52:26,500 --> 00:52:31,450
spit out txt file and this will be my
last one but you guys have any questions

578
00:52:31,450 --> 00:52:32,770
or want to know more

579
00:52:32,770 --> 00:52:37,270
hit me up or out will show you guys
afterwards very very easy these tools

580
00:52:37,270 --> 00:52:41,230
again do like eighty percent of the job
for you and this is before you install

581
00:52:41,230 --> 00:52:44,150
the application onto your device

582
00:52:44,150 --> 00:52:52,430
okay one minute magistrate the firewall
quick my looks like and then we will

583
00:52:52,430 --> 00:52:55,430
close out

584
00:52:57,619 --> 00:53:03,170
just SL checks vulnerable methods
dynamic coding anything store in

585
00:53:03,170 --> 00:53:08,509
external ok let me go to my final slide
and

586
00:53:12,620 --> 00:53:14,640
yeah

587
00:53:14,640 --> 00:53:26,339
using Google slides by the way that's
taking some time

588
00:53:30,720 --> 00:53:34,200
come on

589
00:53:37,039 --> 00:53:44,089
ok

590
00:53:44,730 --> 00:53:53,910
is it a real quick okay thanks guys

591
00:54:00,400 --> 00:54:14,589
Andros three girls got android it's a
great book I've read it up

592
00:54:15,160 --> 00:54:21,910
uh yeah uh what does binder check for
what permissions or what anybody know

593
00:54:23,680 --> 00:54:28,450
yes I know what does it check for that's
what it is but what is it check for like

594
00:54:28,450 --> 00:54:42,339
uh yes it's good i said that cool iOS
that's a great book too

595
00:54:44,650 --> 00:54:51,670
yep uh what is what is it the iOS
application sandbox had a sandbox

596
00:54:51,670 --> 00:55:01,270
applications simple let's think of it as
linux yeah they're all separate home

597
00:55:01,270 --> 00:55:04,270
directories cool

598
00:55:06,789 --> 00:55:13,869
there's for grabs

599
00:55:15,000 --> 00:55:17,160
this

