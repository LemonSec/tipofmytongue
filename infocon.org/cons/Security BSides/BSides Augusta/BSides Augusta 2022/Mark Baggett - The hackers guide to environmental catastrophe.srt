1
00:00:10,860 --> 00:00:14,719
thank you thank you

2
00:00:16,740 --> 00:00:19,020
all right so it's a 30-minute talk

3
00:00:19,020 --> 00:00:20,760
lightning talk so we're gonna do this

4
00:00:20,760 --> 00:00:23,220
lightning fast so my name is Mark

5
00:00:23,220 --> 00:00:26,699
Baggett um instructor for Sans I'm the

6
00:00:26,699 --> 00:00:28,320
author of a couple of different Sans

7
00:00:28,320 --> 00:00:31,320
courses 573 which is uh automating

8
00:00:31,320 --> 00:00:33,540
information security with python 673

9
00:00:33,540 --> 00:00:36,300
which is Advanced 573 and then I'm the

10
00:00:36,300 --> 00:00:38,280
co-author of a course that's going to be

11
00:00:38,280 --> 00:00:41,460
coming out sometime next year on an

12
00:00:41,460 --> 00:00:42,719
introduction to Linux security I'm going

13
00:00:42,719 --> 00:00:44,399
to show you some of that

14
00:00:44,399 --> 00:00:47,100
um one thing that I'm I'm kind of think

15
00:00:47,100 --> 00:00:48,539
is kind of cool is my name appears in

16
00:00:48,539 --> 00:00:51,600
the source code for Metasploit seven

17
00:00:51,600 --> 00:00:52,920
times even though I've never written a

18
00:00:52,920 --> 00:00:54,480
module for metasplay just other people

19
00:00:54,480 --> 00:00:57,239
have written the plugins and things for

20
00:00:57,239 --> 00:00:58,739
ttps and things that I've developed

21
00:00:58,739 --> 00:01:00,660
which and then given me credit for it in

22
00:01:00,660 --> 00:01:02,640
the source code because the information

23
00:01:02,640 --> 00:01:04,739
security Community is awesome in that

24
00:01:04,739 --> 00:01:06,840
way so

25
00:01:06,840 --> 00:01:08,520
um what I wanted to talk to you today

26
00:01:08,520 --> 00:01:11,520
about actually I came up because of this

27
00:01:11,520 --> 00:01:14,159
tweet right so somebody tweeted on the

28
00:01:14,159 --> 00:01:16,140
internet I'd like to thank whoever

29
00:01:16,140 --> 00:01:18,360
decided it was cool to show secrets and

30
00:01:18,360 --> 00:01:20,159
passwords and tokens and stuff into

31
00:01:20,159 --> 00:01:22,740
environment variables and make attacking

32
00:01:22,740 --> 00:01:25,979
stuff so much easier and the truth is

33
00:01:25,979 --> 00:01:27,840
that you know particularly as we move to

34
00:01:27,840 --> 00:01:29,400
the cloud right we're getting more and

35
00:01:29,400 --> 00:01:32,280
more stuff put into environment

36
00:01:32,280 --> 00:01:35,220
variables right um here's you know AWS

37
00:01:35,220 --> 00:01:37,439
you're setting your access Keys secret

38
00:01:37,439 --> 00:01:40,439
keys this is some code from Django a

39
00:01:40,439 --> 00:01:42,659
python web framework and just look at

40
00:01:42,659 --> 00:01:45,780
some of the all of this OS Environ get

41
00:01:45,780 --> 00:01:48,360
is it pulling environment variables and

42
00:01:48,360 --> 00:01:51,659
it's looking for API secrets and debug

43
00:01:51,659 --> 00:01:54,240
mode and allowed host and the app

44
00:01:54,240 --> 00:01:56,399
database the database engine and the

45
00:01:56,399 --> 00:01:57,960
database name and the database username

46
00:01:57,960 --> 00:01:59,220
and the database password in the

47
00:01:59,220 --> 00:02:01,979
database right lots and lots of

48
00:02:01,979 --> 00:02:03,659
information that's stored in environment

49
00:02:03,659 --> 00:02:05,460
variables that if attackers can get to

50
00:02:05,460 --> 00:02:08,580
that it's really useful and so I was

51
00:02:08,580 --> 00:02:10,380
doing some research working on some

52
00:02:10,380 --> 00:02:14,040
stuff and I saw that tweet that was out

53
00:02:14,040 --> 00:02:15,599
there I just saw up there showed you a

54
00:02:15,599 --> 00:02:18,599
minute ago whoever it and and I posted a

55
00:02:18,599 --> 00:02:20,879
question on Twitter I'm like yeah that's

56
00:02:20,879 --> 00:02:22,920
that's cool but how are you getting

57
00:02:22,920 --> 00:02:25,379
these environment variables because well

58
00:02:25,379 --> 00:02:27,180
the scenario I was looking at it was

59
00:02:27,180 --> 00:02:28,800
actually kind of difficult to get to

60
00:02:28,800 --> 00:02:31,020
some of the environment variables and of

61
00:02:31,020 --> 00:02:32,640
course the obvious answer from everyone

62
00:02:32,640 --> 00:02:35,700
on Twitter is you type set or you type e

63
00:02:35,700 --> 00:02:37,200
and V Mark what's your problem how do

64
00:02:37,200 --> 00:02:38,340
you not know how to get environment

65
00:02:38,340 --> 00:02:40,800
variables so uh this this entire

66
00:02:40,800 --> 00:02:42,900
presentation is actually just um my

67
00:02:42,900 --> 00:02:44,099
response to that and trying to say no

68
00:02:44,099 --> 00:02:45,599
I'm not really just an idiot there is

69
00:02:45,599 --> 00:02:47,819
these circumstances where environment

70
00:02:47,819 --> 00:02:49,920
variables aren't that easily accessible

71
00:02:49,920 --> 00:02:51,180
and

72
00:02:51,180 --> 00:02:52,860
um well let's take a look at some of

73
00:02:52,860 --> 00:02:56,220
those and and then we can decide I'm

74
00:02:56,220 --> 00:02:58,019
going to redeem myself here so I'm going

75
00:02:58,019 --> 00:02:59,700
to start out with this with a bit of a

76
00:02:59,700 --> 00:03:02,400
demo I'm actually demoing something that

77
00:03:02,400 --> 00:03:04,620
comes from one of the new courses I

78
00:03:04,620 --> 00:03:08,160
mentioned which is the 406 class and so

79
00:03:08,160 --> 00:03:09,420
this is actually going to be one of the

80
00:03:09,420 --> 00:03:11,760
labs that is in 406 where we talk about

81
00:03:11,760 --> 00:03:14,159
oh that's not it where we talk about

82
00:03:14,159 --> 00:03:15,840
environment variables did it go away

83
00:03:15,840 --> 00:03:16,860
again

84
00:03:16,860 --> 00:03:19,260
how did it go away again

85
00:03:19,260 --> 00:03:21,679
okay

86
00:03:23,940 --> 00:03:25,739
unplug repeat

87
00:03:25,739 --> 00:03:27,140
you

88
00:03:27,140 --> 00:03:30,300
there we go all right environment

89
00:03:30,300 --> 00:03:32,879
variables can I go full screen it stayed

90
00:03:32,879 --> 00:03:35,580
look look at that how about that

91
00:03:35,580 --> 00:03:38,120
all right

92
00:03:38,159 --> 00:03:39,599
all right

93
00:03:39,599 --> 00:03:42,180
so I'm gonna I I should have done this

94
00:03:42,180 --> 00:03:44,220
ahead of time so um kind of the idea

95
00:03:44,220 --> 00:03:46,200
with four or six which is the

96
00:03:46,200 --> 00:03:48,239
introduction to Linux is I I we would

97
00:03:48,239 --> 00:03:49,560
love to have a class where we don't need

98
00:03:49,560 --> 00:03:51,299
an instructor that we can just turn you

99
00:03:51,299 --> 00:03:53,159
loose on Hands-On labs and let you learn

100
00:03:53,159 --> 00:03:55,739
through experimentation and doing um

101
00:03:55,739 --> 00:03:57,420
things so you'll see at the bottom I'm

102
00:03:57,420 --> 00:03:58,799
getting these prompts asking me to do

103
00:03:58,799 --> 00:04:00,540
certain things I'm gonna I'm kind of

104
00:04:00,540 --> 00:04:02,159
gonna kind of skip forward to what it is

105
00:04:02,159 --> 00:04:04,739
that I wanted to show you and as much as

106
00:04:04,739 --> 00:04:06,959
I can I'll make everything as CTF right

107
00:04:06,959 --> 00:04:10,439
so hey Echo and display the variable

108
00:04:10,439 --> 00:04:13,439
name used to store your path to your

109
00:04:13,439 --> 00:04:15,120
home directory so what what variable am

110
00:04:15,120 --> 00:04:17,160
I looking for here

111
00:04:17,160 --> 00:04:19,680
dollar home okay it's an introduction to

112
00:04:19,680 --> 00:04:21,060
Linux okay

113
00:04:21,060 --> 00:04:24,180
um let's see what's next variable that

114
00:04:24,180 --> 00:04:26,040
contains the list of directories that

115
00:04:26,040 --> 00:04:29,280
Linux searches through for commands you

116
00:04:29,280 --> 00:04:31,020
are trying to run

117
00:04:31,020 --> 00:04:34,680
Echo dollar path all right and then I

118
00:04:34,680 --> 00:04:36,000
think next is what I really wanted to

119
00:04:36,000 --> 00:04:38,100
get to okay so let's go ahead and create

120
00:04:38,100 --> 00:04:39,900
some variables here I'm going to go

121
00:04:39,900 --> 00:04:43,979
ahead and create the variable myvar M my

122
00:04:43,979 --> 00:04:47,820
v a r equals 10.

123
00:04:47,820 --> 00:04:49,100
foreign

124
00:04:49,100 --> 00:04:51,540
and this creates that environment

125
00:04:51,540 --> 00:04:53,280
variable and now to retrieve that

126
00:04:53,280 --> 00:04:55,380
environment variable I can Echo dollar

127
00:04:55,380 --> 00:04:56,820
myvar

128
00:04:56,820 --> 00:04:59,280
and it will show me the contents of the

129
00:04:59,280 --> 00:05:01,620
variable that I just created so now it's

130
00:05:01,620 --> 00:05:03,600
going to tell me hey there's a couple of

131
00:05:03,600 --> 00:05:05,100
different ways you can view environment

132
00:05:05,100 --> 00:05:06,060
variables that you've already got

133
00:05:06,060 --> 00:05:08,820
created I can type e and V is one of the

134
00:05:08,820 --> 00:05:11,460
one of those ways and this displays well

135
00:05:11,460 --> 00:05:12,840
the environment variables that are

136
00:05:12,840 --> 00:05:14,160
export it tells me it's hard to find

137
00:05:14,160 --> 00:05:16,020
let's grep for it so let's type that and

138
00:05:16,020 --> 00:05:19,199
type grep myvar right there I can see

139
00:05:19,199 --> 00:05:22,740
that my VAR does not appear in EnV so

140
00:05:22,740 --> 00:05:25,440
just creating an environment variable it

141
00:05:25,440 --> 00:05:27,419
doesn't appear in EnV now where it does

142
00:05:27,419 --> 00:05:28,860
appear is what it's going to have us

143
00:05:28,860 --> 00:05:30,840
look at next is that's if we type set

144
00:05:30,840 --> 00:05:34,500
right so we change that to set

145
00:05:34,500 --> 00:05:37,020
I can see all right my bar is shown

146
00:05:37,020 --> 00:05:39,300
there so the difference between the two

147
00:05:39,300 --> 00:05:41,280
is is whether or not the variable is

148
00:05:41,280 --> 00:05:43,680
exported so when you export a variable

149
00:05:43,680 --> 00:05:45,479
that'll an environment variable that

150
00:05:45,479 --> 00:05:48,180
allows sub processes to see those

151
00:05:48,180 --> 00:05:49,560
environment variables and right now I

152
00:05:49,560 --> 00:05:52,500
don't have this thing um set so what is

153
00:05:52,500 --> 00:05:54,900
it going to tell me to do uh oh so this

154
00:05:54,900 --> 00:05:55,979
is going to tell me to open up a new

155
00:05:55,979 --> 00:05:57,960
shell so bash and then when I get in

156
00:05:57,960 --> 00:05:59,960
there try and Echo

157
00:05:59,960 --> 00:06:02,880
myvar and you'll see that in this sub

158
00:06:02,880 --> 00:06:05,220
process right the sub process doesn't

159
00:06:05,220 --> 00:06:07,620
have access to that environment variable

160
00:06:07,620 --> 00:06:10,020
and I can check EnV with that grep

161
00:06:10,020 --> 00:06:12,780
command again and it's again it's not

162
00:06:12,780 --> 00:06:15,120
there but if I go back to my parent

163
00:06:15,120 --> 00:06:16,259
shell

164
00:06:16,259 --> 00:06:21,900
and then I export my VAR

165
00:06:21,900 --> 00:06:23,280
then

166
00:06:23,280 --> 00:06:25,199
magically now everything should be able

167
00:06:25,199 --> 00:06:27,300
to see that so now if I look at e and V

168
00:06:27,300 --> 00:06:30,300
I can see that the variable does show up

169
00:06:30,300 --> 00:06:33,840
in EnV and if I go into a nub another

170
00:06:33,840 --> 00:06:37,680
sub process such as bash I can now Echo

171
00:06:37,680 --> 00:06:40,080
dollar myvar

172
00:06:40,080 --> 00:06:43,319
okay and it appears there okay so you

173
00:06:43,319 --> 00:06:45,000
have to export the variables for child

174
00:06:45,000 --> 00:06:48,539
processes to see those types of

175
00:06:48,539 --> 00:06:51,600
variables okay so local variable

176
00:06:51,600 --> 00:06:53,819
unexported versus exported okay and I

177
00:06:53,819 --> 00:06:56,699
just demoed these three slides so when a

178
00:06:56,699 --> 00:06:58,440
variable is not exported it can only be

179
00:06:58,440 --> 00:07:01,560
seen by well if you open up a bash

180
00:07:01,560 --> 00:07:02,699
prompt and you set an environment

181
00:07:02,699 --> 00:07:03,840
variable you can see it in that bash

182
00:07:03,840 --> 00:07:04,979
problem right none of the child

183
00:07:04,979 --> 00:07:06,120
processors can see it but when it's

184
00:07:06,120 --> 00:07:08,819
exported all the child processes can see

185
00:07:08,819 --> 00:07:10,919
it and the process can itself so how

186
00:07:10,919 --> 00:07:13,259
does this affect different exploitation

187
00:07:13,259 --> 00:07:14,580
scenarios so let's look at the first

188
00:07:14,580 --> 00:07:15,600
scenario which is the one that everybody

189
00:07:15,600 --> 00:07:17,759
on Twitter was talking about which is

190
00:07:17,759 --> 00:07:19,319
where I've created all these environment

191
00:07:19,319 --> 00:07:21,900
variables and then my web server is

192
00:07:21,900 --> 00:07:25,139
accessing them and then makes them

193
00:07:25,139 --> 00:07:28,259
um uh makes makes them well they're in

194
00:07:28,259 --> 00:07:30,180
memory inside of my web server so to

195
00:07:30,180 --> 00:07:31,740
demo this I'm going to come over here

196
00:07:31,740 --> 00:07:33,360
I'm going to use a web server I got a

197
00:07:33,360 --> 00:07:36,380
tool that I've written called API fi

198
00:07:36,380 --> 00:07:39,599
which oh actually let me let me first do

199
00:07:39,599 --> 00:07:40,979
this let me create an environment

200
00:07:40,979 --> 00:07:42,240
variable so I'm going to create a

201
00:07:42,240 --> 00:07:44,880
variable called Cloud API secrets and

202
00:07:44,880 --> 00:07:46,620
I'm going to export it and then I'm

203
00:07:46,620 --> 00:07:49,680
going to start my web server called API

204
00:07:49,680 --> 00:07:51,840
fi now this has got a code injection

205
00:07:51,840 --> 00:07:55,080
vulnerability in it but it's actually a

206
00:07:55,080 --> 00:07:56,940
configuration option you can say do you

207
00:07:56,940 --> 00:07:58,139
want to be vulnerable to code injection

208
00:07:58,139 --> 00:08:01,080
or not and I've chosen to say yes I do

209
00:08:01,080 --> 00:08:02,520
want to be vulnerable to code injection

210
00:08:02,520 --> 00:08:04,259
so with this one what it's going to do

211
00:08:04,259 --> 00:08:06,240
is actually run ping it's going to run

212
00:08:06,240 --> 00:08:08,819
this Command right here plus whatever

213
00:08:08,819 --> 00:08:12,000
command line argument I pass to it on

214
00:08:12,000 --> 00:08:13,800
the thing and the idea of API fi is I

215
00:08:13,800 --> 00:08:16,319
just want to jsonify the entire world so

216
00:08:16,319 --> 00:08:17,940
if you have any Linux command that you

217
00:08:17,940 --> 00:08:21,120
would like to be able to integrate into

218
00:08:21,120 --> 00:08:22,500
some type of an event management

219
00:08:22,500 --> 00:08:25,259
platform right you can just run this and

220
00:08:25,259 --> 00:08:27,180
it'll cache the entries and it does

221
00:08:27,180 --> 00:08:28,740
about 60

222
00:08:28,740 --> 00:08:30,539
000 requests a second is what we saw

223
00:08:30,539 --> 00:08:32,580
something something like that it's

224
00:08:32,580 --> 00:08:35,339
pretty fast okay so but what because

225
00:08:35,339 --> 00:08:37,500
I've enabled command line injection I

226
00:08:37,500 --> 00:08:39,839
can do things like this I can ask it to

227
00:08:39,839 --> 00:08:43,140
Ping google.com and then well also

228
00:08:43,140 --> 00:08:45,600
semicolon student or who am I so I've

229
00:08:45,600 --> 00:08:47,519
got a code injection vulnerability and

230
00:08:47,519 --> 00:08:49,320
with that I can put whatever command I

231
00:08:49,320 --> 00:08:51,420
want to after this semicolon

232
00:08:51,420 --> 00:08:55,640
so I can do things like hey let's

233
00:08:55,640 --> 00:08:59,220
Echo dollar sign what was the variable

234
00:08:59,220 --> 00:09:02,040
that I created over here called Cloud

235
00:09:02,040 --> 00:09:06,120
API secrets so let's Echo oh this is

236
00:09:06,120 --> 00:09:08,220
going to need to be a space here so

237
00:09:08,220 --> 00:09:10,920
that's I'll put a percent 20 here and

238
00:09:10,920 --> 00:09:13,040
then cloud

239
00:09:13,040 --> 00:09:15,920
API secrets

240
00:09:15,920 --> 00:09:18,959
and no secret

241
00:09:18,959 --> 00:09:21,420
did I do yeah there you go and so there

242
00:09:21,420 --> 00:09:24,120
I've got my top secret data that I could

243
00:09:24,120 --> 00:09:25,440
um see there now there's actually

244
00:09:25,440 --> 00:09:26,880
another variable in here that I want to

245
00:09:26,880 --> 00:09:28,260
come back to and just show you in a

246
00:09:28,260 --> 00:09:29,279
minute let me just show you that I can

247
00:09:29,279 --> 00:09:30,899
also get to this other variable that's

248
00:09:30,899 --> 00:09:35,600
here called uh more Secret

249
00:09:35,640 --> 00:09:37,260
okay

250
00:09:37,260 --> 00:09:40,560
right so this and uh oh darn it it's a

251
00:09:40,560 --> 00:09:42,839
spoiler alert I created this one

252
00:09:42,839 --> 00:09:44,880
um setting it after the um process

253
00:09:44,880 --> 00:09:48,300
actually launches okay so I can and

254
00:09:48,300 --> 00:09:49,560
actually you can run anything right I

255
00:09:49,560 --> 00:09:51,180
could just run set here if I wanted to

256
00:09:51,180 --> 00:09:53,519
and get back a list of well all the

257
00:09:53,519 --> 00:09:54,839
environment variables through this

258
00:09:54,839 --> 00:09:57,600
command injection okay so yes if you

259
00:09:57,600 --> 00:09:59,160
have environment variables with

260
00:09:59,160 --> 00:10:01,980
sensitive data inside those and those

261
00:10:01,980 --> 00:10:03,720
things are loaded in memory and a web

262
00:10:03,720 --> 00:10:05,940
process the web process has access to

263
00:10:05,940 --> 00:10:07,440
those environment variables then if

264
00:10:07,440 --> 00:10:08,399
you've got a command injection

265
00:10:08,399 --> 00:10:10,920
vulnerability they can pull all those

266
00:10:10,920 --> 00:10:12,420
things if you've got Amazon Keys

267
00:10:12,420 --> 00:10:15,300
whatever database names passwords if

268
00:10:15,300 --> 00:10:16,200
there's a command injection

269
00:10:16,200 --> 00:10:18,540
vulnerability right bad things are going

270
00:10:18,540 --> 00:10:21,480
to happen so what's the the trick don't

271
00:10:21,480 --> 00:10:23,160
have command injection vulnerabilities

272
00:10:23,160 --> 00:10:25,380
right that's bad but what about the

273
00:10:25,380 --> 00:10:27,120
scenario that I was actually talking

274
00:10:27,120 --> 00:10:29,339
about um when I was when I asked the

275
00:10:29,339 --> 00:10:31,860
foolish question of well how do you get

276
00:10:31,860 --> 00:10:33,720
these things out of the process memory

277
00:10:33,720 --> 00:10:36,540
and that is let's say that the attacker

278
00:10:36,540 --> 00:10:38,760
gets onto the web server right I've got

279
00:10:38,760 --> 00:10:40,980
my web server and all this stuff's

280
00:10:40,980 --> 00:10:43,860
loaded in memory but I get in Via either

281
00:10:43,860 --> 00:10:46,800
an exploit that's on the system or by

282
00:10:46,800 --> 00:10:50,040
guessing an SSH username or an FTP

283
00:10:50,040 --> 00:10:52,019
username get on the systems where I've

284
00:10:52,019 --> 00:10:56,399
got shell running on the same system as

285
00:10:56,399 --> 00:10:58,140
well the web server

286
00:10:58,140 --> 00:11:00,420
how do I get to the stuff that's in

287
00:11:00,420 --> 00:11:02,459
memory in that server and it turns out

288
00:11:02,459 --> 00:11:05,880
that well it kind of depends right so

289
00:11:05,880 --> 00:11:07,440
one thing that some things that you can

290
00:11:07,440 --> 00:11:08,760
do to make it a little bit more

291
00:11:08,760 --> 00:11:10,860
difficult for attackers that are in that

292
00:11:10,860 --> 00:11:12,180
scenario where they're on the same

293
00:11:12,180 --> 00:11:13,380
system and I'm just trying to grab

294
00:11:13,380 --> 00:11:15,000
something that's stored in a service

295
00:11:15,000 --> 00:11:17,519
configuration or something is well you

296
00:11:17,519 --> 00:11:18,240
can

297
00:11:18,240 --> 00:11:20,399
um make it so that the variables are

298
00:11:20,399 --> 00:11:22,800
only inside of the child process and not

299
00:11:22,800 --> 00:11:24,540
inside the parent process that launched

300
00:11:24,540 --> 00:11:27,720
it so for example you know if you if you

301
00:11:27,720 --> 00:11:29,160
um are at the command line if you want

302
00:11:29,160 --> 00:11:30,959
to just set an environment variable

303
00:11:30,959 --> 00:11:32,640
inside of a child process but not have

304
00:11:32,640 --> 00:11:35,100
it be available in your own process you

305
00:11:35,100 --> 00:11:37,019
can set the environment variable just

306
00:11:37,019 --> 00:11:38,940
space and then the other command you're

307
00:11:38,940 --> 00:11:40,079
going to run now and here I'm setting a

308
00:11:40,079 --> 00:11:42,540
variable called myvar2 Equals blah and

309
00:11:42,540 --> 00:11:44,339
then I run a bash prompt that's trying

310
00:11:44,339 --> 00:11:47,160
to Echo myvar and you can see that oh it

311
00:11:47,160 --> 00:11:48,779
does have access to it in that bash

312
00:11:48,779 --> 00:11:50,279
prompt but here in the back in the

313
00:11:50,279 --> 00:11:52,200
parent process the thing that launched

314
00:11:52,200 --> 00:11:54,300
that child process my variable brought

315
00:11:54,300 --> 00:11:56,820
the variable is not there so it was only

316
00:11:56,820 --> 00:11:58,560
available in the child process not in

317
00:11:58,560 --> 00:12:00,300
the parent process so that's one thing I

318
00:12:00,300 --> 00:12:02,459
could do of course if I if um here

319
00:12:02,459 --> 00:12:04,560
what's a great way to grab this thing if

320
00:12:04,560 --> 00:12:07,500
uh if this is what I did in order to set

321
00:12:07,500 --> 00:12:09,600
that environment variable

322
00:12:09,600 --> 00:12:11,519
the history Command right I can just go

323
00:12:11,519 --> 00:12:13,680
into the history right so anything you

324
00:12:13,680 --> 00:12:15,360
type there is obviously going to show up

325
00:12:15,360 --> 00:12:18,600
in the history well one thing you can do

326
00:12:18,600 --> 00:12:20,459
um to make it so that your sensitive

327
00:12:20,459 --> 00:12:22,440
environment variables that you don't

328
00:12:22,440 --> 00:12:23,279
want

329
00:12:23,279 --> 00:12:24,779
um everybody to have aren't recording

330
00:12:24,779 --> 00:12:27,240
any history it's by default on most bash

331
00:12:27,240 --> 00:12:29,279
on most systems bash is configured so if

332
00:12:29,279 --> 00:12:31,620
you just put a space before a command

333
00:12:31,620 --> 00:12:33,899
that it's not going to be recorded in

334
00:12:33,899 --> 00:12:37,320
history so space export API key and now

335
00:12:37,320 --> 00:12:39,959
well it doesn't show up in my history of

336
00:12:39,959 --> 00:12:42,420
course whether or not that works depends

337
00:12:42,420 --> 00:12:45,060
upon an environment variable right so

338
00:12:45,060 --> 00:12:46,200
you've got this environment variable

339
00:12:46,200 --> 00:12:49,380
called his control that says hey here's

340
00:12:49,380 --> 00:12:52,200
my options ignore space is one of the

341
00:12:52,200 --> 00:12:54,839
options ignore both is I'm going to

342
00:12:54,839 --> 00:12:57,600
ignore both space and duplicates so if

343
00:12:57,600 --> 00:12:59,399
it's this or this then I can just use

344
00:12:59,399 --> 00:13:01,320
the space to not to not record my

345
00:13:01,320 --> 00:13:04,740
environment variables all right so let's

346
00:13:04,740 --> 00:13:07,560
let's say that we do all of those things

347
00:13:07,560 --> 00:13:10,560
I'm on the same system as the web server

348
00:13:10,560 --> 00:13:13,740
what's a great way to uh grab the

349
00:13:13,740 --> 00:13:15,779
information that's on there also well I

350
00:13:15,779 --> 00:13:18,839
first place I went to is the proc folder

351
00:13:18,839 --> 00:13:20,279
right we have on our Linux system

352
00:13:20,279 --> 00:13:22,860
because when a process launches the

353
00:13:22,860 --> 00:13:24,660
operating system does it so let's let's

354
00:13:24,660 --> 00:13:27,420
try that um so over here I've got my web

355
00:13:27,420 --> 00:13:29,760
server let's see

356
00:13:29,760 --> 00:13:31,380
um let's figure out what my process ID

357
00:13:31,380 --> 00:13:34,860
number is all right so my API fi is

358
00:13:34,860 --> 00:13:37,700
running here under process number

359
00:13:37,700 --> 00:13:42,120
7681 so let's CD into proc

360
00:13:42,120 --> 00:13:46,040
slash p r o c

361
00:13:46,040 --> 00:13:50,100
7681 and in there I'll have a folder

362
00:13:50,100 --> 00:13:52,860
called environs

363
00:13:52,860 --> 00:13:55,079
okay and then in environments I'm going

364
00:13:55,079 --> 00:13:57,970
to cat environs

365
00:13:57,970 --> 00:13:59,660
[Music]

366
00:13:59,660 --> 00:14:01,860
a-n-v-e-n-v-i-r and I'm gonna just grab

367
00:14:01,860 --> 00:14:04,620
for uh API or let's just grab for secret

368
00:14:04,620 --> 00:14:06,779
okay

369
00:14:06,779 --> 00:14:11,220
oh grab minus a secret all right and so

370
00:14:11,220 --> 00:14:13,339
there you can see my cloud API secret

371
00:14:13,339 --> 00:14:17,160
shows up there right but one thing

372
00:14:17,160 --> 00:14:19,440
didn't show up there and that was what

373
00:14:19,440 --> 00:14:21,000
was the other variable that I asked for

374
00:14:21,000 --> 00:14:24,779
here it was more secret right more

375
00:14:24,779 --> 00:14:29,160
secret was available here when

376
00:14:29,160 --> 00:14:30,839
um when I used it through a command

377
00:14:30,839 --> 00:14:32,880
injection I was actually able to see the

378
00:14:32,880 --> 00:14:36,959
value that was in the more secret so

379
00:14:36,959 --> 00:14:39,600
here I can see that value there but over

380
00:14:39,600 --> 00:14:43,980
here in proc environs it's not there

381
00:14:43,980 --> 00:14:47,420
does anybody know why it's not there

382
00:14:48,600 --> 00:14:50,760
because the kernel sets that at launch

383
00:14:50,760 --> 00:14:52,920
right the environment variables inside

384
00:14:52,920 --> 00:14:56,699
of proc are recorded when the process

385
00:14:56,699 --> 00:15:01,320
launches which means that if in my

386
00:15:01,320 --> 00:15:03,000
scripts I set all my environment

387
00:15:03,000 --> 00:15:05,399
variables and then I launch my web

388
00:15:05,399 --> 00:15:10,079
server those will show up in proc but if

389
00:15:10,079 --> 00:15:14,160
the process was to set its own

390
00:15:14,160 --> 00:15:16,800
environment variables or to do other

391
00:15:16,800 --> 00:15:20,160
things to have its information stored

392
00:15:20,160 --> 00:15:22,440
that's not going to be set in proc so

393
00:15:22,440 --> 00:15:26,040
that's well maybe I could have my my

394
00:15:26,040 --> 00:15:28,500
process create environment variables to

395
00:15:28,500 --> 00:15:31,560
have its configuration so that gets into

396
00:15:31,560 --> 00:15:33,300
a well maybe then I have to feed it to

397
00:15:33,300 --> 00:15:35,880
configuration well actually the point

398
00:15:35,880 --> 00:15:37,320
here is that actually configuration

399
00:15:37,320 --> 00:15:41,040
files I think are more secure from this

400
00:15:41,040 --> 00:15:43,079
standpoint than environment variables

401
00:15:43,079 --> 00:15:44,519
but now your configuration files are

402
00:15:44,519 --> 00:15:46,680
also in clear text that are on the

403
00:15:46,680 --> 00:15:48,300
machine so that now I'm just looking for

404
00:15:48,300 --> 00:15:50,100
config duration files to get that so

405
00:15:50,100 --> 00:15:51,899
I'll I'll get into some of that but

406
00:15:51,899 --> 00:15:54,180
there you go so

407
00:15:54,180 --> 00:15:56,940
so my question was okay I'm I'm in a

408
00:15:56,940 --> 00:15:58,380
situation where I actually want to get

409
00:15:58,380 --> 00:16:01,440
the keys that are in memory on this

410
00:16:01,440 --> 00:16:03,300
process

411
00:16:03,300 --> 00:16:04,320
um

412
00:16:04,320 --> 00:16:07,980
that were set after the process launched

413
00:16:07,980 --> 00:16:10,260
how can I do that

414
00:16:10,260 --> 00:16:14,519
and it's turned out to be well a a fun

415
00:16:14,519 --> 00:16:16,199
afternoon of coding because it turns out

416
00:16:16,199 --> 00:16:17,160
that

417
00:16:17,160 --> 00:16:18,660
um well it's it's not as easy as you

418
00:16:18,660 --> 00:16:20,519
want I did write a process and this is a

419
00:16:20,519 --> 00:16:22,320
this is on my

420
00:16:22,320 --> 00:16:24,860
um it's actually on a gist right

421
00:16:24,860 --> 00:16:26,540
gist.github.com

422
00:16:26,540 --> 00:16:29,399
I wrote this little process called well

423
00:16:29,399 --> 00:16:31,740
dump environment variables that given a

424
00:16:31,740 --> 00:16:34,339
process ID what was my process ID number

425
00:16:34,339 --> 00:16:38,899
7681 right so I can sudo process

426
00:16:38,899 --> 00:16:41,880
7681 and what it's going to do is

427
00:16:41,880 --> 00:16:45,139
actually uh use GDB

428
00:16:45,139 --> 00:16:48,480
to hook the process then go through the

429
00:16:48,480 --> 00:16:50,880
the data structures that are in GDB pull

430
00:16:50,880 --> 00:16:53,100
out all the environment variables and so

431
00:16:53,100 --> 00:16:56,120
yeah I can still get to them

432
00:16:56,120 --> 00:16:59,880
but well I I have to be able to dump

433
00:16:59,880 --> 00:17:02,040
memory on the system so I'm like all

434
00:17:02,040 --> 00:17:03,360
right awesome I wrote this little

435
00:17:03,360 --> 00:17:05,880
program I went to the system I'm like

436
00:17:05,880 --> 00:17:08,640
let's dump the memory and

437
00:17:08,640 --> 00:17:11,099
it doesn't work like wait a minute why

438
00:17:11,099 --> 00:17:13,140
can't I dump the memory it work works on

439
00:17:13,140 --> 00:17:14,760
my system right that's what we say as

440
00:17:14,760 --> 00:17:16,559
developers when we write code and then

441
00:17:16,559 --> 00:17:18,480
but then okay but turns out I was

442
00:17:18,480 --> 00:17:19,919
actually the customer in this case who

443
00:17:19,919 --> 00:17:21,179
was trying to use the code on another

444
00:17:21,179 --> 00:17:22,679
system so I had to figure it out I

445
00:17:22,679 --> 00:17:24,679
couldn't just say it works on my system

446
00:17:24,679 --> 00:17:29,160
so why did it work on my system and not

447
00:17:29,160 --> 00:17:31,500
on the other system Well turns out that

448
00:17:31,500 --> 00:17:34,080
there's some some Linux kernel

449
00:17:34,080 --> 00:17:36,000
configurations that can prevent this and

450
00:17:36,000 --> 00:17:37,679
I don't know where I am in my slides now

451
00:17:37,679 --> 00:17:40,380
all right so demo and proc just did

452
00:17:40,380 --> 00:17:43,080
stealing variables right uh yep I did

453
00:17:43,080 --> 00:17:44,820
have time for that so who can steal

454
00:17:44,820 --> 00:17:47,039
stuff from memory well it actually

455
00:17:47,039 --> 00:17:48,780
depends

456
00:17:48,780 --> 00:17:49,919
um so

457
00:17:49,919 --> 00:17:52,500
um root can steal anybody's stuff from

458
00:17:52,500 --> 00:17:55,320
memory so if if the if if the attacker

459
00:17:55,320 --> 00:17:58,440
has root on your system as we all can um

460
00:17:58,440 --> 00:18:00,840
imagine game over right they can get um

461
00:18:00,840 --> 00:18:02,580
those but you know they've got

462
00:18:02,580 --> 00:18:03,720
everything that they need at that point

463
00:18:03,720 --> 00:18:07,080
but what about where I was right if I if

464
00:18:07,080 --> 00:18:10,200
I pop the account for the Apache process

465
00:18:10,200 --> 00:18:12,419
the service account and I'm on there as

466
00:18:12,419 --> 00:18:15,539
another Apache process can I dump the

467
00:18:15,539 --> 00:18:19,559
memory from another Apache process and

468
00:18:19,559 --> 00:18:23,400
the answer is well no you can't in most

469
00:18:23,400 --> 00:18:25,860
circumstances actually there's a setting

470
00:18:25,860 --> 00:18:28,679
in this config P Trace config which

471
00:18:28,679 --> 00:18:32,280
prevents you from dumping memory into in

472
00:18:32,280 --> 00:18:35,039
other sibling processes so if I was in

473
00:18:35,039 --> 00:18:37,080
an Apache web service account that was

474
00:18:37,080 --> 00:18:39,360
like the child process of the web server

475
00:18:39,360 --> 00:18:41,160
then I could get to those things but if

476
00:18:41,160 --> 00:18:43,200
I'm in if I'm just on the system as

477
00:18:43,200 --> 00:18:45,179
another Apache process then I actually

478
00:18:45,179 --> 00:18:47,940
can't dump the memory from those

479
00:18:47,940 --> 00:18:49,919
processes and it is a memory dump so

480
00:18:49,919 --> 00:18:51,360
this doesn't just apply to environment

481
00:18:51,360 --> 00:18:52,799
variables this would apply to

482
00:18:52,799 --> 00:18:54,960
configuration or just any sensitive data

483
00:18:54,960 --> 00:18:56,580
that's kept in there if you're a sibling

484
00:18:56,580 --> 00:18:59,340
process then you cannot do this so

485
00:18:59,340 --> 00:19:00,660
awesome I'm just going to go in there

486
00:19:00,660 --> 00:19:02,280
and I'm going to change the setting

487
00:19:02,280 --> 00:19:05,039
inside of P trace and oh who can change

488
00:19:05,039 --> 00:19:06,480
that

489
00:19:06,480 --> 00:19:08,640
root right root and it's going to

490
00:19:08,640 --> 00:19:09,900
require a reboot of the system

491
00:19:09,900 --> 00:19:13,760
afterwards so so this is actually

492
00:19:13,760 --> 00:19:16,860
kept me out from from getting those

493
00:19:16,860 --> 00:19:19,679
environment variables so there's that

494
00:19:19,679 --> 00:19:22,080
okay so the answer is just stick

495
00:19:22,080 --> 00:19:25,260
everything into config files right

496
00:19:25,260 --> 00:19:28,440
yeah except people put config files on

497
00:19:28,440 --> 00:19:29,940
their system and then they forget about

498
00:19:29,940 --> 00:19:32,940
them and they post them to GitHub right

499
00:19:32,940 --> 00:19:37,140
so here go to Google DB user file type

500
00:19:37,140 --> 00:19:39,840
EnV these EnV extensions are where where

501
00:19:39,840 --> 00:19:42,840
people will set environment variables in

502
00:19:42,840 --> 00:19:45,000
all kinds of Frameworks and then it

503
00:19:45,000 --> 00:19:47,820
loads those things up into memory so

504
00:19:47,820 --> 00:19:49,679
um yeah so these don't look like

505
00:19:49,679 --> 00:19:52,200
templates these look like legit uh

506
00:19:52,200 --> 00:19:53,880
usernames and passwords that are coming

507
00:19:53,880 --> 00:19:54,840
back

508
00:19:54,840 --> 00:19:57,179
um to me

509
00:19:57,179 --> 00:19:58,799
okay

510
00:19:58,799 --> 00:20:00,299
um so there's that the other thing I

511
00:20:00,299 --> 00:20:01,740
wanted to mention about environment

512
00:20:01,740 --> 00:20:04,380
variables is environment variables are

513
00:20:04,380 --> 00:20:06,960
also really useful to an attacker from

514
00:20:06,960 --> 00:20:08,640
an offensive standpoint I don't know if

515
00:20:08,640 --> 00:20:11,100
if you've been looking at some of the

516
00:20:11,100 --> 00:20:13,740
interesting back doors that have been

517
00:20:13,740 --> 00:20:15,900
developed over the last year or two but

518
00:20:15,900 --> 00:20:17,160
there's this thing called the Symbiote

519
00:20:17,160 --> 00:20:19,740
backdoor in Linux and it's actually

520
00:20:19,740 --> 00:20:21,360
using this environment variable called

521
00:20:21,360 --> 00:20:24,660
LD preload right where

522
00:20:24,660 --> 00:20:27,860
um you know by default Linux processes

523
00:20:27,860 --> 00:20:32,179
they they can they can either

524
00:20:32,179 --> 00:20:36,900
load system libraries on their own or if

525
00:20:36,900 --> 00:20:39,480
they're configured to they can just use

526
00:20:39,480 --> 00:20:42,780
the the libraries from their parents and

527
00:20:42,780 --> 00:20:44,880
actually the default is to loot if my

528
00:20:44,880 --> 00:20:46,740
parent process already has this Library

529
00:20:46,740 --> 00:20:49,440
loaded then I'm not going to load it up

530
00:20:49,440 --> 00:20:51,539
myself right I'm just going to use the

531
00:20:51,539 --> 00:20:54,660
one that my parent process did but you

532
00:20:54,660 --> 00:20:57,000
can change that and you can say hey even

533
00:20:57,000 --> 00:20:58,799
if your parent process has it then I

534
00:20:58,799 --> 00:21:00,660
want you to load it and by the way

535
00:21:00,660 --> 00:21:02,940
here's a path for that file so you can

536
00:21:02,940 --> 00:21:05,820
it's basically like dll side loading on

537
00:21:05,820 --> 00:21:08,760
Linux or on Windows but it's the roughly

538
00:21:08,760 --> 00:21:10,440
the Linux equivalent of that so there's

539
00:21:10,440 --> 00:21:12,179
some privileged escalation exploits and

540
00:21:12,179 --> 00:21:13,860
here I've got some um some links that

541
00:21:13,860 --> 00:21:15,299
you can go back and watch the slides and

542
00:21:15,299 --> 00:21:16,980
pull out these links but there's some

543
00:21:16,980 --> 00:21:18,780
cool privilege escalation exploits that

544
00:21:18,780 --> 00:21:20,220
you can use with LD preloading and

545
00:21:20,220 --> 00:21:23,220
there's some uh some back doors that are

546
00:21:23,220 --> 00:21:24,960
have some interesting and here's another

547
00:21:24,960 --> 00:21:27,660
fun one this one is kind of fun I

548
00:21:27,660 --> 00:21:29,159
thought I'd just show this to you here

549
00:21:29,159 --> 00:21:31,740
how about an environment variable that

550
00:21:31,740 --> 00:21:35,700
creates a creates a key logger so let me

551
00:21:35,700 --> 00:21:37,740
see I think I have on my desktop the

552
00:21:37,740 --> 00:21:39,480
ability to demonstrate this to you let's

553
00:21:39,480 --> 00:21:40,679
see LS

554
00:21:40,679 --> 00:21:43,919
uh yeah well it's cat EnV keylogger here

555
00:21:43,919 --> 00:21:45,720
so and then

556
00:21:45,720 --> 00:21:47,880
um I'm gonna over here on this window

557
00:21:47,880 --> 00:21:49,500
I'm gonna put a little while loop it's

558
00:21:49,500 --> 00:21:51,780
going to be a netcat listener okay so

559
00:21:51,780 --> 00:21:54,480
let's just do that here

560
00:21:54,480 --> 00:21:55,919
so here's this is going to be my

561
00:21:55,919 --> 00:21:58,799
attacker here on the internet uh this is

562
00:21:58,799 --> 00:22:01,440
my attacker paste all right so he's got

563
00:22:01,440 --> 00:22:03,240
his little net cat listener running over

564
00:22:03,240 --> 00:22:05,880
here and then I'm here on my Victim I'm

565
00:22:05,880 --> 00:22:07,980
just going to set the prompt command

566
00:22:07,980 --> 00:22:09,900
environment variable so what does the

567
00:22:09,900 --> 00:22:12,059
prompt command do well prompt command is

568
00:22:12,059 --> 00:22:14,460
going to run every time a prompt appears

569
00:22:14,460 --> 00:22:16,860
and what am I telling my prompt command

570
00:22:16,860 --> 00:22:18,480
um to do here I'm gonna say all right

571
00:22:18,480 --> 00:22:21,000
anytime you make the prompt appear I

572
00:22:21,000 --> 00:22:23,340
want you to run the command history Dash

573
00:22:23,340 --> 00:22:26,940
a which says take anything any command

574
00:22:26,940 --> 00:22:28,980
history that you've got in memory and

575
00:22:28,980 --> 00:22:31,740
commit it to the file that's on the

576
00:22:31,740 --> 00:22:33,059
system then I'm gonna say all right now

577
00:22:33,059 --> 00:22:35,820
take the last line out of that file The

578
00:22:35,820 --> 00:22:37,860
Bash history on that system and then

579
00:22:37,860 --> 00:22:42,240
just write it to slash Dev TCP the IP

580
00:22:42,240 --> 00:22:44,340
address of the attacker Port 9000 where

581
00:22:44,340 --> 00:22:45,840
I've got my little netcat listener

582
00:22:45,840 --> 00:22:48,299
running so here by just creating this

583
00:22:48,299 --> 00:22:52,220
environment variable now if I type LS ID

584
00:22:52,220 --> 00:22:56,220
who am I whoops who

585
00:22:56,220 --> 00:23:00,600
uh who am I right back over here in

586
00:23:00,600 --> 00:23:03,960
attacker land right it's a key logger

587
00:23:03,960 --> 00:23:05,280
right we're not getting the output but

588
00:23:05,280 --> 00:23:07,980
it's a key logger not an output logger

589
00:23:07,980 --> 00:23:09,600
right so with just an environment

590
00:23:09,600 --> 00:23:12,000
variable right we can do things like

591
00:23:12,000 --> 00:23:15,059
creating it in environment variables and

592
00:23:15,059 --> 00:23:17,039
since um we also talked about dumping

593
00:23:17,039 --> 00:23:18,360
memory I thought this would be a good

594
00:23:18,360 --> 00:23:19,980
opportunity to to just throw out this

595
00:23:19,980 --> 00:23:22,620
this uh this other thing I tweeted about

596
00:23:22,620 --> 00:23:24,120
um which was

597
00:23:24,120 --> 00:23:26,340
um you know is anybody not using GitHub

598
00:23:26,340 --> 00:23:28,200
these days it's another thing that you

599
00:23:28,200 --> 00:23:30,900
know cloud cloud use has exploded

600
00:23:30,900 --> 00:23:32,159
everybody's using GitHub to

601
00:23:32,159 --> 00:23:33,720
configuration anybody using git

602
00:23:33,720 --> 00:23:35,760
credentials to just uh you know what I'm

603
00:23:35,760 --> 00:23:37,200
tired of typing that password all the

604
00:23:37,200 --> 00:23:37,980
time

605
00:23:37,980 --> 00:23:41,580
yeah so if an attacker can dump your

606
00:23:41,580 --> 00:23:44,880
memory and a good process to dump memory

607
00:23:44,880 --> 00:23:47,340
um is if your root of course is is

608
00:23:47,340 --> 00:23:49,860
g-core where you can just say hey in

609
00:23:49,860 --> 00:23:52,260
record in this file all of the memory

610
00:23:52,260 --> 00:23:54,360
from this process ID and then you just

611
00:23:54,360 --> 00:23:56,280
run strings on it so here I'm just going

612
00:23:56,280 --> 00:23:58,380
through that memory dump and looking for

613
00:23:58,380 --> 00:24:01,200
user slash or password and here you can

614
00:24:01,200 --> 00:24:03,720
see my username or password there so

615
00:24:03,720 --> 00:24:05,159
this is another thing relating back to

616
00:24:05,159 --> 00:24:07,200
what we taught who can dump that memory

617
00:24:07,200 --> 00:24:09,960
well root don't let people get root on

618
00:24:09,960 --> 00:24:13,559
your system and parent processes of the

619
00:24:13,559 --> 00:24:15,659
same user ID and that's who can dump

620
00:24:15,659 --> 00:24:18,600
that memory and that is what I've got

621
00:24:18,600 --> 00:24:20,880
for you and 30 we've got five minutes

622
00:24:20,880 --> 00:24:21,980
left

623
00:24:21,980 --> 00:24:25,080
so I can take questions my points here

624
00:24:25,080 --> 00:24:26,760
are these there's a lot of sensitive

625
00:24:26,760 --> 00:24:28,500
data in your environment variables don't

626
00:24:28,500 --> 00:24:30,659
put stuff there that you that you really

627
00:24:30,659 --> 00:24:32,580
care about and do what you can to lock

628
00:24:32,580 --> 00:24:34,200
your systems down there are some things

629
00:24:34,200 --> 00:24:35,700
you can do like make sure it's not in

630
00:24:35,700 --> 00:24:38,940
your history and things like that if

631
00:24:38,940 --> 00:24:41,039
possible have all of that sensitive data

632
00:24:41,039 --> 00:24:43,500
load into memory afterwards then it

633
00:24:43,500 --> 00:24:46,020
won't be recorded in proc and then it's

634
00:24:46,020 --> 00:24:47,280
just a matter of protecting memory

635
00:24:47,280 --> 00:24:49,200
through good privilege uh through good

636
00:24:49,200 --> 00:24:51,419
Rights Management okay

637
00:24:51,419 --> 00:24:53,159
any questions

638
00:24:53,159 --> 00:24:54,360
because I'm standing between you and

639
00:24:54,360 --> 00:24:57,139
lunch what you got

640
00:25:00,659 --> 00:25:03,659
could I use P Trace to defend against

641
00:25:03,659 --> 00:25:07,880
that and p-trace myself

642
00:25:13,140 --> 00:25:14,100
um

643
00:25:14,100 --> 00:25:16,559
I don't know I don't know I'd have to

644
00:25:16,559 --> 00:25:18,780
I'd have to I'd have to experiment with

645
00:25:18,780 --> 00:25:20,340
that so I'm not

646
00:25:20,340 --> 00:25:21,960
I'm not quite sure

647
00:25:21,960 --> 00:25:23,820
but that's a great question

648
00:25:23,820 --> 00:25:25,679
would you like the red team field manual

649
00:25:25,679 --> 00:25:29,480
or would you like a war collar

650
00:25:29,820 --> 00:25:32,279
War collar okay here's a broken work

651
00:25:32,279 --> 00:25:34,580
I'll learn let's Charlie catches it okay

652
00:25:34,580 --> 00:25:38,360
uh question

653
00:25:39,419 --> 00:25:40,799
um I don't have the slides for download

654
00:25:40,799 --> 00:25:43,320
but they'll be out on a YouTube there'll

655
00:25:43,320 --> 00:25:45,720
be a YouTube video on it yep other

656
00:25:45,720 --> 00:25:47,460
questions

657
00:25:47,460 --> 00:25:50,179
what you got

658
00:25:57,240 --> 00:26:01,159
wood SE Linux protect against

659
00:26:01,159 --> 00:26:04,740
a sibling process even a sibling process

660
00:26:04,740 --> 00:26:06,480
doing it

661
00:26:06,480 --> 00:26:07,020
um

662
00:26:07,020 --> 00:26:10,020
I there there are so many management and

663
00:26:10,020 --> 00:26:11,580
configuration changes that that are in

664
00:26:11,580 --> 00:26:13,500
SC Linux I imagine that there's probably

665
00:26:13,500 --> 00:26:15,059
something that you could use to protect

666
00:26:15,059 --> 00:26:18,600
against that with SC Linux but but I I

667
00:26:18,600 --> 00:26:20,159
can't give you the definitive answer on

668
00:26:20,159 --> 00:26:22,320
that but with that maybe maybe the

669
00:26:22,320 --> 00:26:23,520
answer to your question is in the red

670
00:26:23,520 --> 00:26:25,440
team Field Manual

671
00:26:25,440 --> 00:26:28,679
um and so there you go all right so for

672
00:26:28,679 --> 00:26:32,720
lunch you should have blue tickets right

