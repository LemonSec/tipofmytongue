1
00:00:11,120 --> 00:00:14,160
2022 our first Speaker today is Daniel

2
00:00:14,160 --> 00:00:16,139
lowen who is the technical director at

3
00:00:16,139 --> 00:00:17,940
ceiling Technologies an experience with

4
00:00:17,940 --> 00:00:19,500
defensive cyber operations and

5
00:00:19,500 --> 00:00:21,359
Engineering he's worked on programs

6
00:00:21,359 --> 00:00:22,740
throughout the dod specializing

7
00:00:22,740 --> 00:00:25,939
providing Enterprise level security

8
00:00:25,939 --> 00:00:28,080
hello welcome

9
00:00:28,080 --> 00:00:30,539
I look actually surprised how many

10
00:00:30,539 --> 00:00:32,220
people are here I wasn't expecting this

11
00:00:32,220 --> 00:00:33,899
uh this many

12
00:00:33,899 --> 00:00:37,380
um especially this more early so um how

13
00:00:37,380 --> 00:00:39,360
many people here do dco

14
00:00:39,360 --> 00:00:41,940
I'm gonna guess most people

15
00:00:41,940 --> 00:00:43,739
um do some sort of defensive cyber

16
00:00:43,739 --> 00:00:46,620
operations how many people do data

17
00:00:46,620 --> 00:00:48,480
science

18
00:00:48,480 --> 00:00:51,120
actually more than I was expecting a

19
00:00:51,120 --> 00:00:52,379
little bit

20
00:00:52,379 --> 00:00:54,360
um who's trained in data science like

21
00:00:54,360 --> 00:00:56,879
actually legit so we got two so you guys

22
00:00:56,879 --> 00:00:59,280
are gonna think I'm a joke

23
00:00:59,280 --> 00:00:59,940
um

24
00:00:59,940 --> 00:01:01,440
so

25
00:01:01,440 --> 00:01:03,539
um so I've spent most of my time doing

26
00:01:03,539 --> 00:01:05,159
dco

27
00:01:05,159 --> 00:01:07,560
um I've had about 15 years I was

28
00:01:07,560 --> 00:01:10,100
originally doing uh

29
00:01:10,100 --> 00:01:12,960
network monitoring back in the day when

30
00:01:12,960 --> 00:01:15,900
like snort was cool and uh you know we

31
00:01:15,900 --> 00:01:18,960
were happy when we could collect like a

32
00:01:18,960 --> 00:01:21,540
handful of Vlogs like at 100 logs a

33
00:01:21,540 --> 00:01:23,280
second and we'd be like yeah this is

34
00:01:23,280 --> 00:01:24,840
awesome right

35
00:01:24,840 --> 00:01:26,460
um things have sort of changed over the

36
00:01:26,460 --> 00:01:29,460
time I'm not a data scientist but I kind

37
00:01:29,460 --> 00:01:31,020
of got put in a role where I had to

38
00:01:31,020 --> 00:01:33,060
learn it like I'm sure a lot of you have

39
00:01:33,060 --> 00:01:35,040
have done over the year

40
00:01:35,040 --> 00:01:36,659
um so I've have a lot more experience

41
00:01:36,659 --> 00:01:40,380
with doing the dco side of things so

42
00:01:40,380 --> 00:01:42,780
um it's a good kind of introduction to

43
00:01:42,780 --> 00:01:45,600
me so the the purpose of my talk is it's

44
00:01:45,600 --> 00:01:47,520
really aimed at

45
00:01:47,520 --> 00:01:48,180
um

46
00:01:48,180 --> 00:01:50,880
I know some dco I know like what an

47
00:01:50,880 --> 00:01:53,040
attack is I know how to monitor and so

48
00:01:53,040 --> 00:01:54,360
forth

49
00:01:54,360 --> 00:01:56,820
um but I don't necessarily know data

50
00:01:56,820 --> 00:01:59,399
science and here's kind of my experience

51
00:01:59,399 --> 00:02:01,140
with learning

52
00:02:01,140 --> 00:02:03,000
um at the end I wanted to make it so

53
00:02:03,000 --> 00:02:03,840
that

54
00:02:03,840 --> 00:02:05,820
everything was Hands-On and that you

55
00:02:05,820 --> 00:02:08,699
could do it relatively easily at home so

56
00:02:08,699 --> 00:02:10,919
I wanted to prevent I wanted to not

57
00:02:10,919 --> 00:02:13,800
require like a large infrastructure in

58
00:02:13,800 --> 00:02:15,360
order for you to start doing data

59
00:02:15,360 --> 00:02:17,640
science and I'll kind of show you how

60
00:02:17,640 --> 00:02:19,980
you can get started it's really not that

61
00:02:19,980 --> 00:02:23,220
hard if you've no python it's it's

62
00:02:23,220 --> 00:02:28,680
pretty easy to start learning uh so

63
00:02:28,680 --> 00:02:30,780
goal is not to teach you everything

64
00:02:30,780 --> 00:02:32,879
within an hour

65
00:02:32,879 --> 00:02:34,260
um because that's just not going to

66
00:02:34,260 --> 00:02:37,319
happen uh however my hope is that by the

67
00:02:37,319 --> 00:02:39,300
end of this you actually understand

68
00:02:39,300 --> 00:02:42,360
what's available to you and where you

69
00:02:42,360 --> 00:02:44,180
can start going to try to learn more

70
00:02:44,180 --> 00:02:47,280
that's really my my purpose and what I

71
00:02:47,280 --> 00:02:49,440
was aiming to do from this

72
00:02:49,440 --> 00:02:51,000
so we're going to talk a little bit

73
00:02:51,000 --> 00:02:52,640
about what machine learning is

74
00:02:52,640 --> 00:02:55,980
supervising unsupervised learning we're

75
00:02:55,980 --> 00:02:57,480
going to talk about the data science

76
00:02:57,480 --> 00:03:00,599
process that generally occurs throughout

77
00:03:00,599 --> 00:03:02,220
both of these I'm going to try to tie it

78
00:03:02,220 --> 00:03:05,220
back to dco at not just dco but Security

79
00:03:05,220 --> 00:03:08,459
in general and then I have three demos

80
00:03:08,459 --> 00:03:10,860
at the end we're going to use Jupiter

81
00:03:10,860 --> 00:03:13,560
notebooks again they've been designed so

82
00:03:13,560 --> 00:03:16,200
that if you have a decently computer at

83
00:03:16,200 --> 00:03:19,260
home you could do it it's not like you

84
00:03:19,260 --> 00:03:21,239
require a ton of infrastructure to get

85
00:03:21,239 --> 00:03:23,700
started and also then sort of talk about

86
00:03:23,700 --> 00:03:26,099
how you could try to scale this

87
00:03:26,099 --> 00:03:28,319
afterwards so once you've learned the

88
00:03:28,319 --> 00:03:30,840
basics I'll give you some some tips

89
00:03:30,840 --> 00:03:33,120
about how how we can start scaling it so

90
00:03:33,120 --> 00:03:34,680
that you could actually start monitoring

91
00:03:34,680 --> 00:03:38,120
a much larger infrastructure

92
00:03:38,519 --> 00:03:41,459
um so types of machine learning uh

93
00:03:41,459 --> 00:03:42,599
there's

94
00:03:42,599 --> 00:03:44,760
when I started looking into it there was

95
00:03:44,760 --> 00:03:47,640
a handful of different types but these

96
00:03:47,640 --> 00:03:50,040
are the large broad categories so

97
00:03:50,040 --> 00:03:52,739
supervised unsupervised and there's

98
00:03:52,739 --> 00:03:54,780
another one that isn't really too much

99
00:03:54,780 --> 00:03:56,280
of interest to us but it's natural

100
00:03:56,280 --> 00:03:58,459
language processing

101
00:03:58,459 --> 00:04:01,260
supervised learning is a little more

102
00:04:01,260 --> 00:04:04,140
mature it tend it means that you are

103
00:04:04,140 --> 00:04:07,140
feeding a data so each data is labeled

104
00:04:07,140 --> 00:04:08,879
in some way and I'll kind of go a little

105
00:04:08,879 --> 00:04:10,920
more in detail to that so you're

106
00:04:10,920 --> 00:04:12,860
spending the time up front to take

107
00:04:12,860 --> 00:04:15,959
objects or features was with the data

108
00:04:15,959 --> 00:04:17,579
Science World calls it and you're saying

109
00:04:17,579 --> 00:04:21,120
this is X and this is y and this is X

110
00:04:21,120 --> 00:04:22,740
and that's how the computer starts to

111
00:04:22,740 --> 00:04:24,419
learn

112
00:04:24,419 --> 00:04:26,220
um the problem is I'm sure you can

113
00:04:26,220 --> 00:04:28,320
already tell it requires somebody to

114
00:04:28,320 --> 00:04:30,300
teach it

115
00:04:30,300 --> 00:04:32,820
um so people like to try to get to

116
00:04:32,820 --> 00:04:35,759
results faster so the second one is

117
00:04:35,759 --> 00:04:37,979
unsupervised learning um and it's

118
00:04:37,979 --> 00:04:40,620
generally a little bit less mature but

119
00:04:40,620 --> 00:04:42,240
it still has uses and that's actually

120
00:04:42,240 --> 00:04:44,040
what we're going to mostly be looking at

121
00:04:44,040 --> 00:04:45,960
uh just because it's a little easier and

122
00:04:45,960 --> 00:04:49,520
a little bit faster for the demos so

123
00:04:49,520 --> 00:04:52,020
unsupervised is basically you feed it a

124
00:04:52,020 --> 00:04:55,080
whole bunch of data and then it does

125
00:04:55,080 --> 00:04:57,060
something and it's like is this useful

126
00:04:57,060 --> 00:04:59,580
doesn't necessarily know that like I

127
00:04:59,580 --> 00:05:00,840
don't really know what I'm looking at as

128
00:05:00,840 --> 00:05:03,240
a computer but I've sort of categorized

129
00:05:03,240 --> 00:05:06,180
these and you just then have to kind of

130
00:05:06,180 --> 00:05:08,040
look at it and say yeah that actually is

131
00:05:08,040 --> 00:05:10,020
useful or no that's definitely not

132
00:05:10,020 --> 00:05:12,540
useful so you kind of try to push the

133
00:05:12,540 --> 00:05:14,460
work towards the back end as opposed to

134
00:05:14,460 --> 00:05:15,680
the front end

135
00:05:15,680 --> 00:05:18,240
natural language processing is actually

136
00:05:18,240 --> 00:05:20,040
really cool and I started looking into

137
00:05:20,040 --> 00:05:22,560
it a lot but it's it's really a way for

138
00:05:22,560 --> 00:05:26,039
computers to understand written text we

139
00:05:26,039 --> 00:05:28,500
had a weird thing and I was able to do

140
00:05:28,500 --> 00:05:30,539
some really really cool things with it

141
00:05:30,539 --> 00:05:32,759
but it's I don't think it's super

142
00:05:32,759 --> 00:05:35,940
relevant to dco maybe like Insider

143
00:05:35,940 --> 00:05:39,960
threat type stuff but not not as

144
00:05:39,960 --> 00:05:42,960
relevant all right so types of

145
00:05:42,960 --> 00:05:44,759
supervised learning

146
00:05:44,759 --> 00:05:45,720
um

147
00:05:45,720 --> 00:05:48,660
big thing is use is for classification

148
00:05:48,660 --> 00:05:53,520
so my example here is If you hired a

149
00:05:53,520 --> 00:05:55,979
bunch of people to literally go through

150
00:05:55,979 --> 00:05:59,639
images all day and you knew that all

151
00:05:59,639 --> 00:06:01,919
your pictures were cats and dogs but you

152
00:06:01,919 --> 00:06:04,380
didn't know which one was which so you

153
00:06:04,380 --> 00:06:06,300
would hire somebody and they would say

154
00:06:06,300 --> 00:06:09,120
oh look this picture is a cat this

155
00:06:09,120 --> 00:06:11,220
picture is a dog and they would feed it

156
00:06:11,220 --> 00:06:13,440
to the computer with the idea that over

157
00:06:13,440 --> 00:06:15,180
time it would be able to start

158
00:06:15,180 --> 00:06:17,160
recognizing what a cat and a dog was

159
00:06:17,160 --> 00:06:19,580
pretty simple

160
00:06:19,580 --> 00:06:24,600
there are in the industry there are a

161
00:06:24,600 --> 00:06:26,340
lot of different weird jobs on

162
00:06:26,340 --> 00:06:28,080
Mechanical Turk if you're familiar with

163
00:06:28,080 --> 00:06:30,060
that that is literally just doing this

164
00:06:30,060 --> 00:06:33,180
it's it's categorizing things you can

165
00:06:33,180 --> 00:06:35,639
get a job not making a whole lot of

166
00:06:35,639 --> 00:06:37,740
money and just sit there all day and and

167
00:06:37,740 --> 00:06:39,900
you just categorize things for these

168
00:06:39,900 --> 00:06:42,720
computers to start learning this is

169
00:06:42,720 --> 00:06:44,520
actually a real big problem for us

170
00:06:44,520 --> 00:06:46,080
because we can't usually do do

171
00:06:46,080 --> 00:06:48,080
Mechanical Turk especially where I work

172
00:06:48,080 --> 00:06:50,400
most of our customers aren't going to be

173
00:06:50,400 --> 00:06:52,800
like oh yeah you can just send our data

174
00:06:52,800 --> 00:06:56,280
to random people on Amazon and have them

175
00:06:56,280 --> 00:06:58,680
sit there for you know 50 cents an hour

176
00:06:58,680 --> 00:07:01,199
and categorize all our data it doesn't

177
00:07:01,199 --> 00:07:04,560
doesn't work too much so it's one of the

178
00:07:04,560 --> 00:07:07,080
big problems with our our field

179
00:07:07,080 --> 00:07:12,120
another one uh naive Bayes it's a little

180
00:07:12,120 --> 00:07:14,160
different in that you kind of specify

181
00:07:14,160 --> 00:07:16,440
what the data Science World calls

182
00:07:16,440 --> 00:07:18,660
features so maybe you're like looking at

183
00:07:18,660 --> 00:07:21,900
a feature in this picture is the color

184
00:07:21,900 --> 00:07:24,419
for example and maybe like the type of

185
00:07:24,419 --> 00:07:27,660
stem or something like that with naive

186
00:07:27,660 --> 00:07:29,520
Bayes you have to have some sort of

187
00:07:29,520 --> 00:07:31,979
response so that's like you are correct

188
00:07:31,979 --> 00:07:33,960
or you are wrong or something like that

189
00:07:33,960 --> 00:07:36,000
it's called naive because it starts off

190
00:07:36,000 --> 00:07:38,759
literally just guessing so like in our

191
00:07:38,759 --> 00:07:40,860
case we have like I guess it's a

192
00:07:40,860 --> 00:07:44,759
pomegranate and an apple and you feed it

193
00:07:44,759 --> 00:07:48,419
the first pomegranate and it it has no

194
00:07:48,419 --> 00:07:51,720
idea so it just makes something up right

195
00:07:51,720 --> 00:07:54,000
um and then you say yes or no and then

196
00:07:54,000 --> 00:07:56,340
as time goes on it's slowly slowly going

197
00:07:56,340 --> 00:07:58,800
to get better and better and better the

198
00:07:58,800 --> 00:08:00,900
more data you feed it the longer you

199
00:08:00,900 --> 00:08:02,699
feed it the better it's going to get

200
00:08:02,699 --> 00:08:05,240
with time

201
00:08:06,240 --> 00:08:07,560
uh

202
00:08:07,560 --> 00:08:10,620
uh so some examples of CND some of these

203
00:08:10,620 --> 00:08:13,680
are very uh some examples of how this is

204
00:08:13,680 --> 00:08:16,440
used image detection if you've ever used

205
00:08:16,440 --> 00:08:18,599
like Google Maps or apple photos it's

206
00:08:18,599 --> 00:08:21,180
used now heavily uh you can search like

207
00:08:21,180 --> 00:08:23,759
type in bird and it shows you all the

208
00:08:23,759 --> 00:08:26,580
birds in your photos right somebody has

209
00:08:26,580 --> 00:08:28,620
sat there and they have started

210
00:08:28,620 --> 00:08:30,479
classifying that they've gone through

211
00:08:30,479 --> 00:08:32,820
pictures and they have said this is a

212
00:08:32,820 --> 00:08:34,320
bird this is a bird this is a bird

213
00:08:34,320 --> 00:08:36,059
eventually the computer starts to learn

214
00:08:36,059 --> 00:08:37,219
these things

215
00:08:37,219 --> 00:08:40,740
some uses within the security realm uh

216
00:08:40,740 --> 00:08:42,539
probably the biggest is the one that we

217
00:08:42,539 --> 00:08:44,219
all hate

218
00:08:44,219 --> 00:08:47,940
um how many people love the click on all

219
00:08:47,940 --> 00:08:49,980
the crosswalks and click on all the stop

220
00:08:49,980 --> 00:08:52,740
signs from all the the signs the crazy

221
00:08:52,740 --> 00:08:54,420
thing about those is you're actually

222
00:08:54,420 --> 00:08:57,720
teaching cars to drive I don't know how

223
00:08:57,720 --> 00:08:59,760
many people know that but the the reason

224
00:08:59,760 --> 00:09:01,980
that they're doing that that's a sort of

225
00:09:01,980 --> 00:09:03,839
free service and they're selling that

226
00:09:03,839 --> 00:09:05,940
data to all the car manufacturers

227
00:09:05,940 --> 00:09:07,260
they're trying to figure out how to make

228
00:09:07,260 --> 00:09:09,980
like your Tesla to drive itself

229
00:09:09,980 --> 00:09:12,240
and so what they're doing is they

230
00:09:12,240 --> 00:09:13,920
basically they know some of them but

231
00:09:13,920 --> 00:09:16,620
they don't know others and they don't

232
00:09:16,620 --> 00:09:18,540
know like they haven't categorized it

233
00:09:18,540 --> 00:09:21,000
and so they're having you sit there and

234
00:09:21,000 --> 00:09:24,300
and teach it what a stop sign is Spam

235
00:09:24,300 --> 00:09:26,160
detection has been around for a very

236
00:09:26,160 --> 00:09:29,880
long time when you click on this is Spam

237
00:09:29,880 --> 00:09:32,760
it goes back to Google or whoever it is

238
00:09:32,760 --> 00:09:35,580
and then they will say look at that

239
00:09:35,580 --> 00:09:36,899
message and then they will start

240
00:09:36,899 --> 00:09:39,899
training an algorithm uh that that will

241
00:09:39,899 --> 00:09:43,500
Mark that as spam antivirus uses it I've

242
00:09:43,500 --> 00:09:45,720
seen a handful of products for like seam

243
00:09:45,720 --> 00:09:48,240
alarms relevance so hey I just keep

244
00:09:48,240 --> 00:09:50,160
seeing you marking this as false

245
00:09:50,160 --> 00:09:51,380
positive

246
00:09:51,380 --> 00:09:54,060
we've seen it a hundred times you know

247
00:09:54,060 --> 00:09:55,740
it's always been a false positive maybe

248
00:09:55,740 --> 00:09:57,480
we should downgrade the severity or

249
00:09:57,480 --> 00:09:59,779
something along those lines

250
00:09:59,779 --> 00:10:02,279
regression testing regression testing

251
00:10:02,279 --> 00:10:04,800
we've been using for a while

252
00:10:04,800 --> 00:10:05,399
um

253
00:10:05,399 --> 00:10:07,980
for aggression to work you work with

254
00:10:07,980 --> 00:10:10,560
continuous data of some sort which in

255
00:10:10,560 --> 00:10:12,420
the DCL world we generally deal with a

256
00:10:12,420 --> 00:10:15,120
lot of Time series data right

257
00:10:15,120 --> 00:10:18,540
um so this has been pretty Rel I mean

258
00:10:18,540 --> 00:10:20,580
we've been doing this for about 10 years

259
00:10:20,580 --> 00:10:23,820
now in the dco space so something simple

260
00:10:23,820 --> 00:10:27,180
like how much data is coming out of a

261
00:10:27,180 --> 00:10:30,240
box on average right so what you do is

262
00:10:30,240 --> 00:10:32,700
you just say hey this system you know we

263
00:10:32,700 --> 00:10:36,000
get Ebbs and flows every day and we we

264
00:10:36,000 --> 00:10:38,820
go out and we predict what is normal and

265
00:10:38,820 --> 00:10:41,220
then what we say hey flag anytime that

266
00:10:41,220 --> 00:10:44,040
it's outside of normal it's a pretty

267
00:10:44,040 --> 00:10:48,360
pretty mature mature space but that is a

268
00:10:48,360 --> 00:10:51,420
supervised type learning so uses outside

269
00:10:51,420 --> 00:10:54,360
of dco and and computer network defense

270
00:10:54,360 --> 00:10:55,459
in general

271
00:10:55,459 --> 00:11:00,120
forecasting of prices Goods stocks and

272
00:11:00,120 --> 00:11:02,279
then uses just anything that's time

273
00:11:02,279 --> 00:11:04,320
series and has a value you could

274
00:11:04,320 --> 00:11:08,060
definitely use regression in for

275
00:11:08,220 --> 00:11:10,760
um all right so unsupervised learning

276
00:11:10,760 --> 00:11:13,860
clustering going back to our dogs and

277
00:11:13,860 --> 00:11:16,200
dogs and cats example

278
00:11:16,200 --> 00:11:16,800
um

279
00:11:16,800 --> 00:11:19,440
so in this case we throw out a bunch of

280
00:11:19,440 --> 00:11:22,320
pictures of dogs and cats and at the end

281
00:11:22,320 --> 00:11:24,899
of it it just gives us two buckets and

282
00:11:24,899 --> 00:11:27,180
it says I don't know what these are but

283
00:11:27,180 --> 00:11:30,000
these seem to be related right and then

284
00:11:30,000 --> 00:11:31,860
somebody goes through at the end and

285
00:11:31,860 --> 00:11:33,899
looks at a handful of them and says oh

286
00:11:33,899 --> 00:11:37,260
these are dogs and these are cats

287
00:11:37,260 --> 00:11:39,180
um it can be a little bit faster but it

288
00:11:39,180 --> 00:11:41,519
generally is less accurate so but

289
00:11:41,519 --> 00:11:44,399
sometimes like accuracy especially when

290
00:11:44,399 --> 00:11:45,839
you're like looking for weird things

291
00:11:45,839 --> 00:11:48,720
isn't always a hundred percent needed

292
00:11:48,720 --> 00:11:50,519
especially if it's giving you some false

293
00:11:50,519 --> 00:11:52,380
positives and not too many false

294
00:11:52,380 --> 00:11:54,899
positives so just give me what's weird

295
00:11:54,899 --> 00:11:57,360
and then I'll deal with instead of this

296
00:11:57,360 --> 00:11:59,339
much data now I can look at this much

297
00:11:59,339 --> 00:12:01,500
data and that still is of great use to

298
00:12:01,500 --> 00:12:03,120
us

299
00:12:03,120 --> 00:12:03,899
um

300
00:12:03,899 --> 00:12:05,519
uh one of the ones that we're actually

301
00:12:05,519 --> 00:12:08,100
going to look at in our example is

302
00:12:08,100 --> 00:12:10,200
isolation Force

303
00:12:10,200 --> 00:12:12,779
um so isolation Force really just is a

304
00:12:12,779 --> 00:12:15,540
way to detect anomalies

305
00:12:15,540 --> 00:12:17,880
um so you feed it a bunch of data the

306
00:12:17,880 --> 00:12:20,160
data can be interlinked you might not

307
00:12:20,160 --> 00:12:22,740
necessarily know what is like you're not

308
00:12:22,740 --> 00:12:25,260
saying hey this is anomalous if this

309
00:12:25,260 --> 00:12:28,140
happens you just feed it the data and it

310
00:12:28,140 --> 00:12:30,600
just says hey I see an anomaly I don't

311
00:12:30,600 --> 00:12:33,120
know if that's a value to you I don't

312
00:12:33,120 --> 00:12:35,459
know if you actually care about that but

313
00:12:35,459 --> 00:12:37,440
you you know it's an anomaly that's

314
00:12:37,440 --> 00:12:39,660
that's all it's going to tell you

315
00:12:39,660 --> 00:12:40,980
um so we feed it into something called

316
00:12:40,980 --> 00:12:43,620
an isolation forest and it will take all

317
00:12:43,620 --> 00:12:45,480
our data and it will mark it as

318
00:12:45,480 --> 00:12:48,899
anomalous or not we say we want 20 or 10

319
00:12:48,899 --> 00:12:50,899
percent of the data to be

320
00:12:50,899 --> 00:12:54,060
anomalous it also has an auto feature

321
00:12:54,060 --> 00:12:57,240
which will adjust that for you and it

322
00:12:57,240 --> 00:12:59,279
gives you what what it sees is anomalous

323
00:12:59,279 --> 00:13:01,440
and then you you comb through it and now

324
00:13:01,440 --> 00:13:03,300
you have 20 percent of your data instead

325
00:13:03,300 --> 00:13:06,240
of 100 percent

326
00:13:06,240 --> 00:13:08,100
um another one that's heavily used is

327
00:13:08,100 --> 00:13:11,459
k-means so k-means basically it takes

328
00:13:11,459 --> 00:13:13,860
all your data and it groups it in the

329
00:13:13,860 --> 00:13:16,440
Clusters so you tell it how many

330
00:13:16,440 --> 00:13:18,600
clusters you want

331
00:13:18,600 --> 00:13:21,060
um and it gives you clusters and then

332
00:13:21,060 --> 00:13:23,339
says are any of these clusters of value

333
00:13:23,339 --> 00:13:25,139
to you and you then have to figure out

334
00:13:25,139 --> 00:13:29,660
if if it found anything of use

335
00:13:31,680 --> 00:13:36,959
um so some uses outside of CND group

336
00:13:36,959 --> 00:13:39,899
websites based on content would be one

337
00:13:39,899 --> 00:13:43,220
that I can think of uses within security

338
00:13:43,220 --> 00:13:46,320
sorting processes by their actions so

339
00:13:46,320 --> 00:13:48,300
maybe it's like what do most

340
00:13:48,300 --> 00:13:51,779
applications do and then group them in

341
00:13:51,779 --> 00:13:53,639
the Clusters and if they're outside of

342
00:13:53,639 --> 00:13:55,380
those clusters or maybe we have like a

343
00:13:55,380 --> 00:13:59,279
malicious cluster that's now bad

344
00:13:59,279 --> 00:14:01,620
um you could do something like sorting

345
00:14:01,620 --> 00:14:04,500
DNS queries into buckets using isolation

346
00:14:04,500 --> 00:14:07,440
Force so that that's actually my example

347
00:14:07,440 --> 00:14:09,540
is going to be finding DNS tunneling

348
00:14:09,540 --> 00:14:13,279
using isolation Force and and k-means

349
00:14:13,279 --> 00:14:17,720
for for using z-clogs

350
00:14:18,120 --> 00:14:21,779
um Association uh so this is I have

351
00:14:21,779 --> 00:14:25,079
multiple pieces of data Lots like a huge

352
00:14:25,079 --> 00:14:27,660
data set but I don't know if they're

353
00:14:27,660 --> 00:14:30,180
interrelated or not I I don't know like

354
00:14:30,180 --> 00:14:33,720
if X and Y is there some sort of pattern

355
00:14:33,720 --> 00:14:36,660
that I might not recognize

356
00:14:36,660 --> 00:14:37,320
um

357
00:14:37,320 --> 00:14:40,740
the most popular one is is actually

358
00:14:40,740 --> 00:14:43,139
heavily used in the shopping industry so

359
00:14:43,139 --> 00:14:45,300
it's called I'm gonna probably say wrong

360
00:14:45,300 --> 00:14:48,720
a priori which means uh from what was

361
00:14:48,720 --> 00:14:51,420
before

362
00:14:51,420 --> 00:14:53,459
um this one actually made the news it's

363
00:14:53,459 --> 00:14:56,160
kind of a fun story it happened a while

364
00:14:56,160 --> 00:15:00,000
ago uh it was Target basically was using

365
00:15:00,000 --> 00:15:03,240
this algorithm and there was a

366
00:15:03,240 --> 00:15:05,760
particular Shopper who started doing a

367
00:15:05,760 --> 00:15:07,940
certain set of

368
00:15:07,940 --> 00:15:11,459
buying habits and Target started sending

369
00:15:11,459 --> 00:15:15,300
the family uh things like getting ready

370
00:15:15,300 --> 00:15:17,880
for a newborn and

371
00:15:17,880 --> 00:15:20,040
um at the time she didn't know she was

372
00:15:20,040 --> 00:15:23,160
pregnant and her dad was very upset and

373
00:15:23,160 --> 00:15:25,740
she they wrote a letter to Target being

374
00:15:25,740 --> 00:15:27,720
like this is inappropriate why are you

375
00:15:27,720 --> 00:15:30,839
sending my my teenage daughter pregnancy

376
00:15:30,839 --> 00:15:33,420
things and then a few weeks later he

377
00:15:33,420 --> 00:15:36,120
sent them a sorry letter saying she is

378
00:15:36,120 --> 00:15:38,639
in fact pregnant so

379
00:15:38,639 --> 00:15:39,300
um

380
00:15:39,300 --> 00:15:41,339
so

381
00:15:41,339 --> 00:15:44,339
you just basically feeded a pile of data

382
00:15:44,339 --> 00:15:46,320
which is in this case these people tend

383
00:15:46,320 --> 00:15:48,600
to buy these things together you're not

384
00:15:48,600 --> 00:15:50,639
saying like you know what is the

385
00:15:50,639 --> 00:15:52,440
interrelations you you don't actually

386
00:15:52,440 --> 00:15:54,959
know and what it does is it starts

387
00:15:54,959 --> 00:15:57,600
finding Interlink so people that buy

388
00:15:57,600 --> 00:16:01,199
candy tend to buy soda or whatever that

389
00:16:01,199 --> 00:16:02,820
that is

390
00:16:02,820 --> 00:16:04,500
um so in that they they have something

391
00:16:04,500 --> 00:16:07,860
called support so if people buy X do

392
00:16:07,860 --> 00:16:11,040
they also tend to buy y right confidence

393
00:16:11,040 --> 00:16:13,440
is is that always the case every time

394
00:16:13,440 --> 00:16:16,079
someone buys this they always buy this

395
00:16:16,079 --> 00:16:17,940
right so we probably want to put them on

396
00:16:17,940 --> 00:16:20,040
the Shelf together

397
00:16:20,040 --> 00:16:23,459
um and then lift is how unique is y to X

398
00:16:23,459 --> 00:16:26,519
so maybe people only ever buy y when

399
00:16:26,519 --> 00:16:29,459
they also buy X and it comes up with

400
00:16:29,459 --> 00:16:31,500
values and interlinks like a graph

401
00:16:31,500 --> 00:16:33,959
database and says these are the things

402
00:16:33,959 --> 00:16:36,240
that are interrelated and that's how

403
00:16:36,240 --> 00:16:38,820
they decide what to put on the shelves

404
00:16:38,820 --> 00:16:40,139
where if you've ever worked in the

405
00:16:40,139 --> 00:16:42,360
retail industry you will know that you

406
00:16:42,360 --> 00:16:44,220
will constantly be getting things to

407
00:16:44,220 --> 00:16:46,740
rearrange everything on the Shelf to try

408
00:16:46,740 --> 00:16:49,019
to you know make us spend as much money

409
00:16:49,019 --> 00:16:51,000
as possible

410
00:16:51,000 --> 00:16:53,940
uh so uses outside of CND I already

411
00:16:53,940 --> 00:16:56,220
pretty much covered them pretty well

412
00:16:56,220 --> 00:16:58,259
um some examples of how this could be

413
00:16:58,259 --> 00:17:00,860
useful log on log off time so

414
00:17:00,860 --> 00:17:03,540
categorizing users and and trying to

415
00:17:03,540 --> 00:17:06,839
figure that out programs so hey these

416
00:17:06,839 --> 00:17:09,959
classes of users tend to run these types

417
00:17:09,959 --> 00:17:12,839
of programs and then looking hey why is

418
00:17:12,839 --> 00:17:14,699
this one user who's an accountant

419
00:17:14,699 --> 00:17:16,319
running a whole bunch of Powershell

420
00:17:16,319 --> 00:17:17,760
right

421
00:17:17,760 --> 00:17:18,500
um

422
00:17:18,500 --> 00:17:21,179
utilization of administrative functions

423
00:17:21,179 --> 00:17:22,980
something along those lines could be

424
00:17:22,980 --> 00:17:24,500
useful

425
00:17:24,500 --> 00:17:26,220
all right

426
00:17:26,220 --> 00:17:29,220
so what am I doing on time all right so

427
00:17:29,220 --> 00:17:31,320
uh the next next thing I'm going to

428
00:17:31,320 --> 00:17:33,360
actually talk about is what is the

429
00:17:33,360 --> 00:17:35,640
general process for just doing data

430
00:17:35,640 --> 00:17:38,039
science uh it's not necessarily in

431
00:17:38,039 --> 00:17:39,200
Python

432
00:17:39,200 --> 00:17:42,000
exclusively but uh it's kind of what I'm

433
00:17:42,000 --> 00:17:43,980
comfortable with and most people that

434
00:17:43,980 --> 00:17:46,200
are doing data science is either an r or

435
00:17:46,200 --> 00:17:49,559
Python and people in our space tend to

436
00:17:49,559 --> 00:17:51,299
be more comfortable with python so I

437
00:17:51,299 --> 00:17:54,379
think it makes a little more sense

438
00:17:55,080 --> 00:17:58,080
um all right so what is the basic flow

439
00:17:58,080 --> 00:18:00,840
of data science in general and some

440
00:18:00,840 --> 00:18:02,580
people will disagree I've seen a couple

441
00:18:02,580 --> 00:18:04,140
of different ones but this is kind of

442
00:18:04,140 --> 00:18:07,500
the the general overall flow so

443
00:18:07,500 --> 00:18:09,539
Gathering data so figuring out how we're

444
00:18:09,539 --> 00:18:11,700
going to gather all this data this is

445
00:18:11,700 --> 00:18:13,080
something that we have been dealing with

446
00:18:13,080 --> 00:18:15,660
in the dco space now for a very long

447
00:18:15,660 --> 00:18:18,120
time it's not really any different from

448
00:18:18,120 --> 00:18:21,360
what we've been doing to be quite Frank

449
00:18:21,360 --> 00:18:24,780
um next thing we need to do is format

450
00:18:24,780 --> 00:18:26,640
that data how are we going to format it

451
00:18:26,640 --> 00:18:29,340
we know that everyone all the log

452
00:18:29,340 --> 00:18:32,600
sources are all Json right

453
00:18:32,600 --> 00:18:35,220
generally every log source is a little

454
00:18:35,220 --> 00:18:36,900
different

455
00:18:36,900 --> 00:18:38,940
um another common problem that we have

456
00:18:38,940 --> 00:18:40,440
is

457
00:18:40,440 --> 00:18:42,539
um you know some might have like the net

458
00:18:42,539 --> 00:18:45,900
mask and some might have the cider or

459
00:18:45,900 --> 00:18:48,960
um another one is they might call fields

460
00:18:48,960 --> 00:18:51,059
and values different so you might have a

461
00:18:51,059 --> 00:18:54,059
tool like sysmon calling it Source

462
00:18:54,059 --> 00:18:56,160
address and you might have another tool

463
00:18:56,160 --> 00:18:57,960
calling it something else so you have to

464
00:18:57,960 --> 00:18:59,940
figure out how to get all the data and

465
00:18:59,940 --> 00:19:02,220
then how to format it in some way that

466
00:19:02,220 --> 00:19:04,620
makes sense to you

467
00:19:04,620 --> 00:19:08,340
um enrich the data into features so

468
00:19:08,340 --> 00:19:11,400
features is really just this is what I

469
00:19:11,400 --> 00:19:12,840
want you to look at I don't know why

470
00:19:12,840 --> 00:19:15,600
they decide to call it features but you

471
00:19:15,600 --> 00:19:16,860
hear them saying Oh I'm going to

472
00:19:16,860 --> 00:19:18,720
engineer features which really just

473
00:19:18,720 --> 00:19:20,100
means

474
00:19:20,100 --> 00:19:23,700
um I have a data Sam set basically and

475
00:19:23,700 --> 00:19:26,160
that's a feature so something like red

476
00:19:26,160 --> 00:19:29,700
on an uh what what color is it red so

477
00:19:29,700 --> 00:19:32,520
color is the feature next we have to

478
00:19:32,520 --> 00:19:35,220
figure out how to process the data and

479
00:19:35,220 --> 00:19:36,720
then we have to present it in some

480
00:19:36,720 --> 00:19:38,520
meaningful way that makes sense plus

481
00:19:38,520 --> 00:19:40,620
makes our managers happy and makes them

482
00:19:40,620 --> 00:19:42,960
feel like we're doing work

483
00:19:42,960 --> 00:19:45,240
um from my experience almost all the

484
00:19:45,240 --> 00:19:47,880
work is from gather to enrich the

485
00:19:47,880 --> 00:19:49,860
actually the back end stuff is actually

486
00:19:49,860 --> 00:19:53,580
pretty easy like isolation Force I quite

487
00:19:53,580 --> 00:19:55,440
frankly don't even understand how it

488
00:19:55,440 --> 00:19:58,140
works there's a bunch of math to it but

489
00:19:58,140 --> 00:20:00,120
you really just say here are my features

490
00:20:00,120 --> 00:20:01,740
that I've spent like a ton of time

491
00:20:01,740 --> 00:20:04,140
getting them into the right format push

492
00:20:04,140 --> 00:20:06,900
it through some like algorithm and it

493
00:20:06,900 --> 00:20:08,760
spits something out and you're like okay

494
00:20:08,760 --> 00:20:11,400
thanks that's how most of the algorithms

495
00:20:11,400 --> 00:20:12,360
work

496
00:20:12,360 --> 00:20:15,020
what's up

497
00:20:26,280 --> 00:20:28,919
I I don't know because at least for me

498
00:20:28,919 --> 00:20:31,440
that's the hard part like you spend a

499
00:20:31,440 --> 00:20:36,380
lot of time it's not easy I I don't know

500
00:20:36,380 --> 00:20:39,720
it is it's it's the hardest part is like

501
00:20:39,720 --> 00:20:41,640
getting them into the correct format and

502
00:20:41,640 --> 00:20:44,460
then knowing what algorithm sort of does

503
00:20:44,460 --> 00:20:46,380
what and then just shoving it into the

504
00:20:46,380 --> 00:20:49,320
algorithm and it does magic

505
00:20:49,320 --> 00:20:51,600
um is is the majority of what what I've

506
00:20:51,600 --> 00:20:53,039
done

507
00:20:53,039 --> 00:20:53,880
um

508
00:20:53,880 --> 00:20:57,240
all right so how are we Gathering data

509
00:20:57,240 --> 00:20:58,919
um so first we have to figure out where

510
00:20:58,919 --> 00:21:01,500
we're Gathering logs from in dco it's

511
00:21:01,500 --> 00:21:04,740
mostly network data host log data

512
00:21:04,740 --> 00:21:07,679
application log data there might be some

513
00:21:07,679 --> 00:21:09,960
sort of weird API calls especially now

514
00:21:09,960 --> 00:21:12,360
with like Cloud becoming a thing uh

515
00:21:12,360 --> 00:21:16,020
having to pull data from from all over

516
00:21:16,020 --> 00:21:17,220
um and then we have to figure out is

517
00:21:17,220 --> 00:21:20,340
this data easy to work with like

518
00:21:20,340 --> 00:21:23,100
it's gotten better most is either an XML

519
00:21:23,100 --> 00:21:25,080
or Json these days but it used to be

520
00:21:25,080 --> 00:21:28,380
like like syslog messages for example or

521
00:21:28,380 --> 00:21:31,020
just like Rand you know just text and

522
00:21:31,020 --> 00:21:33,179
that that's always great to have to deal

523
00:21:33,179 --> 00:21:35,940
with like what do you do with that data

524
00:21:35,940 --> 00:21:37,380
and it's it's kind of a pain to deal

525
00:21:37,380 --> 00:21:38,280
with

526
00:21:38,280 --> 00:21:39,720
um so

527
00:21:39,720 --> 00:21:42,179
how are we going to pull this data if

528
00:21:42,179 --> 00:21:44,640
it's structured we're happy if it's

529
00:21:44,640 --> 00:21:47,940
unstructured we're a lot less happy but

530
00:21:47,940 --> 00:21:49,440
we have to figure out how to how to deal

531
00:21:49,440 --> 00:21:51,440
with that

532
00:21:51,440 --> 00:21:54,600
so next we have to turn it into some

533
00:21:54,600 --> 00:21:56,460
sort of data frame

534
00:21:56,460 --> 00:22:00,299
um so this is what they're this is what

535
00:22:00,299 --> 00:22:02,220
basically is a two-dimensional Ray in

536
00:22:02,220 --> 00:22:04,799
the world of data science

537
00:22:04,799 --> 00:22:08,240
um if you've ever dealt with a

538
00:22:08,240 --> 00:22:10,020
two-dimensional Rays you know it's

539
00:22:10,020 --> 00:22:13,260
really just columns and rows in pandas

540
00:22:13,260 --> 00:22:16,500
they call them Series so each each row

541
00:22:16,500 --> 00:22:18,299
is a series

542
00:22:18,299 --> 00:22:20,880
um so

543
00:22:20,880 --> 00:22:22,620
um I I quickly learned when I first

544
00:22:22,620 --> 00:22:24,419
started with this

545
00:22:24,419 --> 00:22:29,039
um uh I found out that pandas which is

546
00:22:29,039 --> 00:22:32,419
the one of the bigger uh data frame

547
00:22:32,419 --> 00:22:36,000
libraries out there it is iterable so

548
00:22:36,000 --> 00:22:37,980
that means you can treat it like an

549
00:22:37,980 --> 00:22:41,220
array we then hired a data scientist who

550
00:22:41,220 --> 00:22:42,720
looked at it was like what the heck are

551
00:22:42,720 --> 00:22:46,320
you doing this is terrible so I learned

552
00:22:46,320 --> 00:22:48,240
how to do it correctly is what I'm

553
00:22:48,240 --> 00:22:49,860
saying and I'll show you kind of what it

554
00:22:49,860 --> 00:22:53,400
is the power of the data frame is that

555
00:22:53,400 --> 00:22:55,440
there are a ton of built-in functions

556
00:22:55,440 --> 00:22:58,260
that you you can use to manipulate and

557
00:22:58,260 --> 00:23:01,799
extend that data very easily so you can

558
00:23:01,799 --> 00:23:03,960
iterate over it you can do like a for

559
00:23:03,960 --> 00:23:07,260
Loop over all your data just don't do it

560
00:23:07,260 --> 00:23:10,440
um so data frames there's as I was

561
00:23:10,440 --> 00:23:12,720
saying there's and I also found that not

562
00:23:12,720 --> 00:23:14,700
iterating is actually a whole lot faster

563
00:23:14,700 --> 00:23:15,780
too

564
00:23:15,780 --> 00:23:17,760
um

565
00:23:17,760 --> 00:23:20,760
if you have to pull data that is

566
00:23:20,760 --> 00:23:24,120
structured so for example CSV XML Json

567
00:23:24,120 --> 00:23:26,760
it is very easy to turn it into a data

568
00:23:26,760 --> 00:23:28,380
frame

569
00:23:28,380 --> 00:23:31,080
um I found another Library called zat on

570
00:23:31,080 --> 00:23:34,380
GitHub which is Zeke analytic toolkit if

571
00:23:34,380 --> 00:23:36,960
you have to deal with Zeke that is

572
00:23:36,960 --> 00:23:38,940
absolutely awesome the other thing

573
00:23:38,940 --> 00:23:40,679
that's really great about it is they

574
00:23:40,679 --> 00:23:43,200
have a bunch of examples which help me

575
00:23:43,200 --> 00:23:46,679
learn so they have like a bunch of just

576
00:23:46,679 --> 00:23:50,039
free examples to go out and do the one

577
00:23:50,039 --> 00:23:53,299
we actually also use extensively

578
00:23:53,299 --> 00:23:55,679
for for the project you do is something

579
00:23:55,679 --> 00:23:59,960
called e-land Eland is for elasticsearch

580
00:23:59,960 --> 00:24:02,460
it allows you to connect to an elastic

581
00:24:02,460 --> 00:24:04,799
search cluster and it allows you to

582
00:24:04,799 --> 00:24:08,100
almost treat it like pandas and if you

583
00:24:08,100 --> 00:24:09,840
can't treat it like pandas you can press

584
00:24:09,840 --> 00:24:11,820
go and it will turn from all your data

585
00:24:11,820 --> 00:24:14,179
from elasticsearch into pandas for you

586
00:24:14,179 --> 00:24:16,799
and it is absolutely spectacular if you

587
00:24:16,799 --> 00:24:18,299
just happen to have an elastic search

588
00:24:18,299 --> 00:24:20,840
cluster

589
00:24:21,179 --> 00:24:24,000
so I wanted to spend a little more time

590
00:24:24,000 --> 00:24:26,760
on on what are the types of data frames

591
00:24:26,760 --> 00:24:30,000
just because that's a big part of this

592
00:24:30,000 --> 00:24:32,419
is how we're going to organize that data

593
00:24:32,419 --> 00:24:35,700
pandas like I said is awesome there's

594
00:24:35,700 --> 00:24:37,679
tons of documentation out there there's

595
00:24:37,679 --> 00:24:39,360
tons of examples

596
00:24:39,360 --> 00:24:41,880
it is very easy to use and it's actually

597
00:24:41,880 --> 00:24:44,400
what I've built all my examples in just

598
00:24:44,400 --> 00:24:46,100
because you can do it on your computer

599
00:24:46,100 --> 00:24:48,780
its biggest problem is it operates

600
00:24:48,780 --> 00:24:51,419
completely out of memory so that means

601
00:24:51,419 --> 00:24:53,179
if you've got lots and lots of data

602
00:24:53,179 --> 00:24:55,320
eventually you're going to need a bigger

603
00:24:55,320 --> 00:24:56,580
box you're going to need a bigger box

604
00:24:56,580 --> 00:24:58,260
you're going to need a bigger box until

605
00:24:58,260 --> 00:25:01,140
you can't get a bigger box anymore

606
00:25:01,140 --> 00:25:04,740
um so we have large boxes that have over

607
00:25:04,740 --> 00:25:07,440
a terabyte of ram so we can usually deal

608
00:25:07,440 --> 00:25:11,700
with a lot but at some point it doesn't

609
00:25:11,700 --> 00:25:14,340
scale you can't use multiple computers

610
00:25:14,340 --> 00:25:16,860
to kind of Chunk at the data to process

611
00:25:16,860 --> 00:25:20,640
it it's not the greatest if you have to

612
00:25:20,640 --> 00:25:23,280
deal with a lot it is very good if you

613
00:25:23,280 --> 00:25:25,260
want to explore data because it's very

614
00:25:25,260 --> 00:25:30,140
fast and easy and well supported

615
00:25:30,140 --> 00:25:34,140
another one is pi spark if anyone's ever

616
00:25:34,140 --> 00:25:36,840
dealt with Hadoop it is Loosely based

617
00:25:36,840 --> 00:25:40,320
off of Hadoop back in the day it works

618
00:25:40,320 --> 00:25:43,140
on something called map reduce the idea

619
00:25:43,140 --> 00:25:45,299
behind map reduce is you take a large

620
00:25:45,299 --> 00:25:48,120
problem and you break it into multiple

621
00:25:48,120 --> 00:25:50,940
maps and you send it out to a cluster of

622
00:25:50,940 --> 00:25:52,940
a bunch of systems

623
00:25:52,940 --> 00:25:56,100
and then each of those systems kind of

624
00:25:56,100 --> 00:25:58,260
deals with their like chunk of the

625
00:25:58,260 --> 00:26:00,659
problem and then at the very end they

626
00:26:00,659 --> 00:26:03,000
bring it all back and it reduces it into

627
00:26:03,000 --> 00:26:05,880
a single answer at the end

628
00:26:05,880 --> 00:26:06,539
um

629
00:26:06,539 --> 00:26:11,159
uh it is uses also something called lazy

630
00:26:11,159 --> 00:26:13,799
evaluation so unlike normal like

631
00:26:13,799 --> 00:26:16,620
functional program where it's like do a

632
00:26:16,620 --> 00:26:20,640
do B do c you tell it I want you to do a

633
00:26:20,640 --> 00:26:24,120
b and c and go it does everything all in

634
00:26:24,120 --> 00:26:25,860
one shot

635
00:26:25,860 --> 00:26:26,580
um

636
00:26:26,580 --> 00:26:29,400
it is a little more complicated to use

637
00:26:29,400 --> 00:26:31,940
you need an infrastructure of some sort

638
00:26:31,940 --> 00:26:35,159
but if you need to start scaling out Pi

639
00:26:35,159 --> 00:26:39,240
spark is a way to to go

640
00:26:39,240 --> 00:26:42,240
um elands as I was mentioning uh is the

641
00:26:42,240 --> 00:26:44,940
one where we're using extensively Eland

642
00:26:44,940 --> 00:26:47,880
is exclusive to elasticsearch I'm sure

643
00:26:47,880 --> 00:26:50,400
Splunk probably has something equivalent

644
00:26:50,400 --> 00:26:52,140
um but we haven't I haven't tried to use

645
00:26:52,140 --> 00:26:53,220
it

646
00:26:53,220 --> 00:26:54,799
um e-land you say here's my

647
00:26:54,799 --> 00:26:57,179
elasticsearch cluster

648
00:26:57,179 --> 00:26:58,679
um one thing that's kind of neat about

649
00:26:58,679 --> 00:27:00,179
it is

650
00:27:00,179 --> 00:27:03,600
um it lives on the elasticsearch cluster

651
00:27:03,600 --> 00:27:05,760
but you can treat it as pandas so a lot

652
00:27:05,760 --> 00:27:08,460
of the functions that pandas has that

653
00:27:08,460 --> 00:27:10,620
can be supported

654
00:27:10,620 --> 00:27:13,679
um it it supports as well so

655
00:27:13,679 --> 00:27:16,380
um it all the data is still on disk so

656
00:27:16,380 --> 00:27:18,299
when you hit go it runs out to the

657
00:27:18,299 --> 00:27:20,520
cluster which is multiple systems it it

658
00:27:20,520 --> 00:27:22,440
does take longer because it's not coming

659
00:27:22,440 --> 00:27:25,340
from memory now it's coming from disk

660
00:27:25,340 --> 00:27:28,799
and then it gives you an answer but it

661
00:27:28,799 --> 00:27:31,620
looks very much like pandas there are a

662
00:27:31,620 --> 00:27:34,200
handful of functions that don't work in

663
00:27:34,200 --> 00:27:37,620
it just because elasticsearch as an

664
00:27:37,620 --> 00:27:40,620
infrastructure can't handle that but if

665
00:27:40,620 --> 00:27:43,919
for some reason you want to take data

666
00:27:43,919 --> 00:27:45,840
from elasticsearch and turn it into

667
00:27:45,840 --> 00:27:48,240
pandas it's a single function call and

668
00:27:48,240 --> 00:27:50,400
then it runs out grabs all the data and

669
00:27:50,400 --> 00:27:52,440
then you now have a pandas data frame

670
00:27:52,440 --> 00:27:54,659
which is really nice

671
00:27:54,659 --> 00:27:55,679
um

672
00:27:55,679 --> 00:27:58,620
all right so uh next we have to enrich

673
00:27:58,620 --> 00:28:01,140
the data so we have to gather value out

674
00:28:01,140 --> 00:28:03,120
of whatever that data is so that could

675
00:28:03,120 --> 00:28:05,520
be getting all the unique fields that

676
00:28:05,520 --> 00:28:07,919
are out there uh counting values in a

677
00:28:07,919 --> 00:28:11,700
field uh calculating means modes entropy

678
00:28:11,700 --> 00:28:14,159
whatever that is to build our features

679
00:28:14,159 --> 00:28:16,500
so this is what you're looking for and

680
00:28:16,500 --> 00:28:17,760
you're going to feed to those different

681
00:28:17,760 --> 00:28:19,740
algorithms

682
00:28:19,740 --> 00:28:22,320
um pandas does this really easily for

683
00:28:22,320 --> 00:28:25,880
you a lot of the like simple math things

684
00:28:25,880 --> 00:28:28,740
uh that you would expect like mean

685
00:28:28,740 --> 00:28:30,600
medium mode you can basically say take

686
00:28:30,600 --> 00:28:32,700
this field and apply median to every

687
00:28:32,700 --> 00:28:35,100
single field in that in every single

688
00:28:35,100 --> 00:28:38,100
Series in that that data frame

689
00:28:38,100 --> 00:28:41,460
um if you've never dealt with Lambda in

690
00:28:41,460 --> 00:28:43,860
Python I never really under I wouldn't

691
00:28:43,860 --> 00:28:46,460
say I used to know how to use Lambda

692
00:28:46,460 --> 00:28:50,279
you have to learn Lambda Lambda in

693
00:28:50,279 --> 00:28:52,500
pandas is huge

694
00:28:52,500 --> 00:28:54,900
um so Lambda I'll show you when we get

695
00:28:54,900 --> 00:28:56,400
to the um foreign

696
00:28:56,400 --> 00:28:58,740
when I get to actually showing off some

697
00:28:58,740 --> 00:29:00,120
of the code

698
00:29:00,120 --> 00:29:02,940
and then process so we figure out what

699
00:29:02,940 --> 00:29:04,740
what algorithm we're going to use and we

700
00:29:04,740 --> 00:29:06,000
send it through a classification

701
00:29:06,000 --> 00:29:09,120
regression uh unsupervised all those

702
00:29:09,120 --> 00:29:11,460
crazy things we talked about and then

703
00:29:11,460 --> 00:29:13,500
finally we're going to present the data

704
00:29:13,500 --> 00:29:15,659
and hopefully some meaningful manner

705
00:29:15,659 --> 00:29:17,820
that makes our bosses think we're doing

706
00:29:17,820 --> 00:29:19,100
something

707
00:29:19,100 --> 00:29:21,299
there's a bunch of different libraries

708
00:29:21,299 --> 00:29:23,179
out there plotly is pretty cool

709
00:29:23,179 --> 00:29:27,980
matplotlib and Seabourn are some of them

710
00:29:27,980 --> 00:29:31,080
and all right so

711
00:29:31,080 --> 00:29:33,960
um so here's my three demos

712
00:29:33,960 --> 00:29:37,440
um all the code is on GitHub so

713
00:29:37,440 --> 00:29:39,720
um you can you can just download it

714
00:29:39,720 --> 00:29:43,860
today uh and start looking at it

715
00:29:43,860 --> 00:29:45,120
um so the first one is going to be

716
00:29:45,120 --> 00:29:47,820
machine learning and z-clogs we're gonna

717
00:29:47,820 --> 00:29:49,919
this is probably the one I I started

718
00:29:49,919 --> 00:29:51,480
with I was actually pretty proud because

719
00:29:51,480 --> 00:29:52,679
I didn't really know what I was doing

720
00:29:52,679 --> 00:29:54,779
this is where I started with doing the

721
00:29:54,779 --> 00:29:57,899
iteration and all that stuff but at the

722
00:29:57,899 --> 00:30:00,480
end I dumped I had a bunch of z-clogs I

723
00:30:00,480 --> 00:30:02,159
dumped it in I was like okay this is

724
00:30:02,159 --> 00:30:03,600
cool and I was like all right at the end

725
00:30:03,600 --> 00:30:06,120
I dumped in a known DNS tunneling thing

726
00:30:06,120 --> 00:30:08,460
and it popped up right away so that was

727
00:30:08,460 --> 00:30:10,200
pretty cool because I didn't like

728
00:30:10,200 --> 00:30:13,200
reverse like how can I make it find this

729
00:30:13,200 --> 00:30:14,159
thing

730
00:30:14,159 --> 00:30:18,179
um so data analytics and Apache logs and

731
00:30:18,179 --> 00:30:20,600
then we'll look at cismon logs as well

732
00:30:20,600 --> 00:30:24,860
uh just to detect odd executables

733
00:30:24,860 --> 00:30:28,320
uh talk a little bit about DNS tunneling

734
00:30:28,320 --> 00:30:30,720
in case someone hasn't dealt with it in

735
00:30:30,720 --> 00:30:32,520
the past

736
00:30:32,520 --> 00:30:36,960
um so what DNS tunneling is it's a

737
00:30:36,960 --> 00:30:39,480
common technique used by bad guys or red

738
00:30:39,480 --> 00:30:43,500
teams to basically exfiltrate data it's

739
00:30:43,500 --> 00:30:46,559
usually used for command and control so

740
00:30:46,559 --> 00:30:49,200
you have malware on a box somewhere and

741
00:30:49,200 --> 00:30:51,120
you want to be able to periodically send

742
00:30:51,120 --> 00:30:54,360
short messages out of the network and

743
00:30:54,360 --> 00:30:56,039
you want to be able to get short

744
00:30:56,039 --> 00:30:58,799
messages back into the network the

745
00:30:58,799 --> 00:31:01,200
deviousness of this is it follows the

746
00:31:01,200 --> 00:31:04,559
standard DNS chain and so it doesn't

747
00:31:04,559 --> 00:31:07,080
really ever connect directly to the the

748
00:31:07,080 --> 00:31:10,620
bad guys box so in this hypothetical

749
00:31:10,620 --> 00:31:13,980
case you have a client that usually

750
00:31:13,980 --> 00:31:16,320
points their DNS to some sort of DNS

751
00:31:16,320 --> 00:31:17,779
inside the Enterprise

752
00:31:17,779 --> 00:31:20,640
they're then pointed to whoever the

753
00:31:20,640 --> 00:31:23,220
Enterprise decides some Roots root DNS

754
00:31:23,220 --> 00:31:25,679
server out there

755
00:31:25,679 --> 00:31:26,220
um

756
00:31:26,220 --> 00:31:27,980
and then

757
00:31:27,980 --> 00:31:30,960
badguy.com registers badguy.com because

758
00:31:30,960 --> 00:31:33,659
he wasn't very creative and wants to get

759
00:31:33,659 --> 00:31:36,899
data out so what happens is this malware

760
00:31:36,899 --> 00:31:39,480
will generally send what seems to be

761
00:31:39,480 --> 00:31:43,020
random strings of queries to badguy.com

762
00:31:43,020 --> 00:31:45,539
and then that will go to the Enterprises

763
00:31:45,539 --> 00:31:48,779
DNS and if it makes it out they will say

764
00:31:48,779 --> 00:31:51,059
where's badguy.com out on the internet

765
00:31:51,059 --> 00:31:54,419
to their internet provider they will

766
00:31:54,419 --> 00:31:56,640
receive a request and then they will run

767
00:31:56,640 --> 00:32:00,059
out to badguy.com so the message is that

768
00:32:00,059 --> 00:32:02,940
random string of

769
00:32:02,940 --> 00:32:05,820
um random string of data so it's usually

770
00:32:05,820 --> 00:32:08,279
encrypted in some way shape or form or

771
00:32:08,279 --> 00:32:10,080
xored or something it doesn't doesn't

772
00:32:10,080 --> 00:32:12,899
really matter too much but um

773
00:32:12,899 --> 00:32:15,600
they also because DNS has a response

774
00:32:15,600 --> 00:32:18,179
right you can also send data back in so

775
00:32:18,179 --> 00:32:20,460
you can send little chunks of data and

776
00:32:20,460 --> 00:32:23,240
like the IP address maybe Inc

777
00:32:23,240 --> 00:32:26,520
uh encrypted or something encoded some

778
00:32:26,520 --> 00:32:28,500
way shape or form

779
00:32:28,500 --> 00:32:31,140
all right so

780
00:32:31,140 --> 00:32:34,559
if you've never used Jupiter Labs it is

781
00:32:34,559 --> 00:32:37,380
pretty cool it you you can download it

782
00:32:37,380 --> 00:32:38,940
you know Mac you just do Brew install

783
00:32:38,940 --> 00:32:42,419
Jupiter and you end up it runs a little

784
00:32:42,419 --> 00:32:45,000
web server and the nice thing about it

785
00:32:45,000 --> 00:32:47,399
is allows you to mix code with like

786
00:32:47,399 --> 00:32:51,059
pictures and and pretty text and so

787
00:32:51,059 --> 00:32:52,799
forth it's just a really good way of

788
00:32:52,799 --> 00:32:54,899
presenting your data

789
00:32:54,899 --> 00:32:55,620
um

790
00:32:55,620 --> 00:32:57,299
so

791
00:32:57,299 --> 00:32:59,039
um what we're going to do is look for

792
00:32:59,039 --> 00:33:01,620
weird in uh

793
00:33:01,620 --> 00:33:05,039
in in logs so

794
00:33:05,039 --> 00:33:06,960
does anyone want to take a wild guess as

795
00:33:06,960 --> 00:33:08,820
to what features we're probably going to

796
00:33:08,820 --> 00:33:10,380
want to look at and I've got prizes

797
00:33:10,380 --> 00:33:13,140
given to me by b-sides for it we've got

798
00:33:13,140 --> 00:33:15,120
two prizes

799
00:33:15,120 --> 00:33:17,779
all right

800
00:33:23,700 --> 00:33:27,059
large Spike so frequency I'll go with

801
00:33:27,059 --> 00:33:28,559
that one because that's one of them that

802
00:33:28,559 --> 00:33:31,399
I got what do you have

803
00:33:31,399 --> 00:33:34,799
entropy yep so that's one I've got

804
00:33:34,799 --> 00:33:38,840
uh has anyone else got other ones

805
00:33:38,899 --> 00:33:42,059
fqdn lens

806
00:33:42,059 --> 00:33:44,640
um yeah but so with that one we're going

807
00:33:44,640 --> 00:33:46,679
to look at the sub domain

808
00:33:46,679 --> 00:33:49,799
right the the actual yeah so I guess the

809
00:33:49,799 --> 00:33:52,019
fqdn lens would work right because that

810
00:33:52,019 --> 00:33:55,440
would contain uh the subdomain so sure

811
00:33:55,440 --> 00:33:58,080
um so yeah that's more or less that's it

812
00:33:58,080 --> 00:34:00,179
but the important thing is is I don't

813
00:34:00,179 --> 00:34:02,760
specify the rules so I don't say like

814
00:34:02,760 --> 00:34:06,659
cerakata I can easily say uh if you see

815
00:34:06,659 --> 00:34:10,500
an fqdn length of more than 50 send me

816
00:34:10,500 --> 00:34:13,139
an alarm I don't really care about that

817
00:34:13,139 --> 00:34:16,020
all as I say is look at these things and

818
00:34:16,020 --> 00:34:18,780
tell me what you see that looks weird

819
00:34:18,780 --> 00:34:20,820
out of this

820
00:34:20,820 --> 00:34:24,780
um so to start off uh we install a bunch

821
00:34:24,780 --> 00:34:28,679
of can you see that okay reasonably

822
00:34:28,679 --> 00:34:30,719
um a bunch of libraries so I mentioned

823
00:34:30,719 --> 00:34:33,899
that Zeke analytic toolkit it is free

824
00:34:33,899 --> 00:34:36,300
and it is very cool

825
00:34:36,300 --> 00:34:39,300
um pandas SK learn plotly for making

826
00:34:39,300 --> 00:34:42,480
pretty pictures as well

827
00:34:42,480 --> 00:34:45,560
um do some imports

828
00:34:45,560 --> 00:34:48,000
the reason

829
00:34:48,000 --> 00:34:52,020
that that is really cool is all I do is

830
00:34:52,020 --> 00:34:54,540
I feed it Zeke logs and it turns it into

831
00:34:54,540 --> 00:34:56,520
a panda's data frame uh it's pretty

832
00:34:56,520 --> 00:34:59,760
pretty simple if you've never seen Zeke

833
00:34:59,760 --> 00:35:00,900
logs

834
00:35:00,900 --> 00:35:04,440
this is the default format uh which is

835
00:35:04,440 --> 00:35:07,260
just it's rows of data with all the

836
00:35:07,260 --> 00:35:10,020
other ones that also supports it in Json

837
00:35:10,020 --> 00:35:12,119
if that's how you're doing it um which

838
00:35:12,119 --> 00:35:14,339
you probably are but

839
00:35:14,339 --> 00:35:17,040
um so either way uh if you if it's Json

840
00:35:17,040 --> 00:35:19,020
it's just like an extra flag do you just

841
00:35:19,020 --> 00:35:21,300
say this is Json and it deals with it

842
00:35:21,300 --> 00:35:24,480
exactly the same and it turns this into

843
00:35:24,480 --> 00:35:29,040
a uh a data frame so each of these rows

844
00:35:29,040 --> 00:35:31,980
is a series and you can see that more or

845
00:35:31,980 --> 00:35:34,079
less oops

846
00:35:34,079 --> 00:35:35,760
um it looks exactly like you would

847
00:35:35,760 --> 00:35:37,920
expect something like Excel or something

848
00:35:37,920 --> 00:35:40,140
like that to look

849
00:35:40,140 --> 00:35:45,000
um all right so next we need to enrich

850
00:35:45,000 --> 00:35:49,079
the data right so uh calculate entropy

851
00:35:49,079 --> 00:35:52,260
you can see I put a entropy function

852
00:35:52,260 --> 00:35:55,320
which is Shannon's entropy which I got

853
00:35:55,320 --> 00:35:59,099
off of Wikipedia not very difficult so

854
00:35:59,099 --> 00:36:00,540
this basically gives you a number

855
00:36:00,540 --> 00:36:02,820
between one and five based on what the

856
00:36:02,820 --> 00:36:05,160
overall entropy is like how random that

857
00:36:05,160 --> 00:36:07,740
that string seems to be

858
00:36:07,740 --> 00:36:09,920
um and then we can start querying out

859
00:36:09,920 --> 00:36:13,020
different fields from uh from that that

860
00:36:13,020 --> 00:36:16,140
data series up so in this case uh Zeke

861
00:36:16,140 --> 00:36:18,060
data frame

862
00:36:18,060 --> 00:36:20,579
uh there is a should be one called query

863
00:36:20,579 --> 00:36:23,099
up here right we can see that that is

864
00:36:23,099 --> 00:36:26,660
more or less what was asked for

865
00:36:28,079 --> 00:36:29,760
and

866
00:36:29,760 --> 00:36:31,920
um note that I don't have a for Loop

867
00:36:31,920 --> 00:36:35,220
right so I always say is on each query I

868
00:36:35,220 --> 00:36:37,800
want you to calculate out the length of

869
00:36:37,800 --> 00:36:40,800
the string and assign it to the query

870
00:36:40,800 --> 00:36:43,339
lengths pretty easy

871
00:36:43,339 --> 00:36:46,920
next up we do something here's a Lambda

872
00:36:46,920 --> 00:36:50,579
function we say each query I want you to

873
00:36:50,579 --> 00:36:53,940
apply this so we're going to split based

874
00:36:53,940 --> 00:36:56,700
on the first period and grab the first

875
00:36:56,700 --> 00:36:59,040
um item of that array so which is going

876
00:36:59,040 --> 00:37:02,160
to be the subdomain return it as X and

877
00:37:02,160 --> 00:37:03,960
we're going to assign that value to the

878
00:37:03,960 --> 00:37:06,380
sub domain string right

879
00:37:06,380 --> 00:37:08,880
register domain string is going to be

880
00:37:08,880 --> 00:37:10,920
the rest of of the array so everything

881
00:37:10,920 --> 00:37:13,520
other than the first item

882
00:37:13,520 --> 00:37:16,440
subdomain length we just calculate out

883
00:37:16,440 --> 00:37:19,380
the length of it subdomain string here's

884
00:37:19,380 --> 00:37:21,599
the subdomain string

885
00:37:21,599 --> 00:37:25,200
um and then we take the subdomain string

886
00:37:25,200 --> 00:37:27,900
in this case and we apply it to that

887
00:37:27,900 --> 00:37:31,140
entropy function up here and we pass it

888
00:37:31,140 --> 00:37:33,839
down and we give it the subdomain

889
00:37:33,839 --> 00:37:37,740
entropy and we end up with

890
00:37:37,740 --> 00:37:40,140
a new well it's it's the same data frame

891
00:37:40,140 --> 00:37:42,000
with some extra fields that we added

892
00:37:42,000 --> 00:37:44,359
pretty pretty simple

893
00:37:44,359 --> 00:37:47,040
if you look at the very first thing that

894
00:37:47,040 --> 00:37:49,260
comes out because I sorted by subdomain

895
00:37:49,260 --> 00:37:52,760
entry that doesn't look normal

896
00:37:52,760 --> 00:37:56,460
but we continue on some of this is my

897
00:37:56,460 --> 00:37:58,619
house Network so you know that iot

898
00:37:58,619 --> 00:38:01,380
devices they tend to do lots of weird

899
00:38:01,380 --> 00:38:02,700
things

900
00:38:02,700 --> 00:38:05,760
um so but you can see some of the stuff

901
00:38:05,760 --> 00:38:09,359
we've got pirate.c is making these weird

902
00:38:09,359 --> 00:38:12,599
things I would probably stop there and

903
00:38:12,599 --> 00:38:14,760
start looking at pirate.c but we can

904
00:38:14,760 --> 00:38:16,440
continue

905
00:38:16,440 --> 00:38:17,520
um

906
00:38:17,520 --> 00:38:21,540
all right so uh what do we do next so we

907
00:38:21,540 --> 00:38:24,060
want the data based on subdomains right

908
00:38:24,060 --> 00:38:26,520
so hypothetically

909
00:38:26,520 --> 00:38:29,820
what is the average of all the the

910
00:38:29,820 --> 00:38:32,099
subdomain queries for that registered

911
00:38:32,099 --> 00:38:34,380
domain so we're going to break it now

912
00:38:34,380 --> 00:38:37,140
down into the registered domain and

913
00:38:37,140 --> 00:38:39,180
calculate out averages so we're going to

914
00:38:39,180 --> 00:38:41,400
take everything and what is the average

915
00:38:41,400 --> 00:38:46,200
entropy going to that R up TCP local

916
00:38:46,200 --> 00:38:49,380
which is an iot thing going out to

917
00:38:49,380 --> 00:38:52,380
Amazon AWS and and so forth you can see

918
00:38:52,380 --> 00:38:55,740
the numbers down here we add the average

919
00:38:55,740 --> 00:38:58,740
length and then the frequency so total

920
00:38:58,740 --> 00:39:03,319
number of of requests that were given

921
00:39:03,540 --> 00:39:06,960
um and we get to the isolation Forest

922
00:39:06,960 --> 00:39:08,640
portion

923
00:39:08,640 --> 00:39:10,560
um we say these are our features we want

924
00:39:10,560 --> 00:39:12,720
you to look at so average entropy

925
00:39:12,720 --> 00:39:15,420
average length and frequency

926
00:39:15,420 --> 00:39:17,160
um and we mostly just copy and paste

927
00:39:17,160 --> 00:39:19,079
examples

928
00:39:19,079 --> 00:39:22,280
um from from isolation Force but we turn

929
00:39:22,280 --> 00:39:25,320
everything so we have the subdomain

930
00:39:25,320 --> 00:39:27,380
features

931
00:39:27,380 --> 00:39:30,420
we create predictions so this part is

932
00:39:30,420 --> 00:39:33,000
the isolation Forest portion so this is

933
00:39:33,000 --> 00:39:35,760
going to take a subset of our data and

934
00:39:35,760 --> 00:39:38,220
say in flag everything is anomalous so

935
00:39:38,220 --> 00:39:40,079
in this case we Mark anything as

936
00:39:40,079 --> 00:39:43,020
negative one if it decides it's

937
00:39:43,020 --> 00:39:44,940
anomalous it doesn't really know like

938
00:39:44,940 --> 00:39:46,980
what's bad it just says this looks like

939
00:39:46,980 --> 00:39:49,260
it's different from all the other data

940
00:39:49,260 --> 00:39:51,119
you fed me

941
00:39:51,119 --> 00:39:53,579
um and then next thing we're going to do

942
00:39:53,579 --> 00:39:56,339
is we're going to break it into clusters

943
00:39:56,339 --> 00:39:58,680
using k-means so we're going to take all

944
00:39:58,680 --> 00:40:00,660
the anomalous data and we're going to

945
00:40:00,660 --> 00:40:03,060
say group them in the Clusters in my

946
00:40:03,060 --> 00:40:05,220
case I did four how did I come up with

947
00:40:05,220 --> 00:40:08,400
four I just tried it it was like do I

948
00:40:08,400 --> 00:40:10,440
see anything with four do I see anything

949
00:40:10,440 --> 00:40:12,300
with five

950
00:40:12,300 --> 00:40:14,579
um and until you get something that

951
00:40:14,579 --> 00:40:16,320
looks reasonable

952
00:40:16,320 --> 00:40:17,520
uh

953
00:40:17,520 --> 00:40:19,079
uh and then

954
00:40:19,079 --> 00:40:22,260
we apply everything I'm going to add the

955
00:40:22,260 --> 00:40:26,640
registered domain back and

956
00:40:26,760 --> 00:40:30,420
we run isolation Forest

957
00:40:30,420 --> 00:40:33,839
and we end up with four clusters zero

958
00:40:33,839 --> 00:40:35,520
through three

959
00:40:35,520 --> 00:40:39,000
um what is the weird data of this and we

960
00:40:39,000 --> 00:40:41,820
can see the first cluster zero looks

961
00:40:41,820 --> 00:40:43,980
very bizarre and probably we need to

962
00:40:43,980 --> 00:40:47,579
look into more right uh text strings I

963
00:40:47,579 --> 00:40:49,560
don't know why but it's it's heck

964
00:40:49,560 --> 00:40:51,240
strings

965
00:40:51,240 --> 00:40:51,960
um

966
00:40:51,960 --> 00:40:54,780
we can see some other ones like you know

967
00:40:54,780 --> 00:40:57,359
this is this one's kind of interesting

968
00:40:57,359 --> 00:41:00,119
uh some of this ended up being like

969
00:41:00,119 --> 00:41:03,660
these two were a lot of iot devices

970
00:41:03,660 --> 00:41:06,240
uh the nice thing about this is once

971
00:41:06,240 --> 00:41:08,940
we've done this it's actually easy to

972
00:41:08,940 --> 00:41:11,579
take new data and you can say basically

973
00:41:11,579 --> 00:41:14,280
if anything falls into the future in

974
00:41:14,280 --> 00:41:16,740
cluster zero I want to send an alarm so

975
00:41:16,740 --> 00:41:18,540
we don't have to like we train we have a

976
00:41:18,540 --> 00:41:21,599
data we train it and if it falls in the

977
00:41:21,599 --> 00:41:23,579
cluster zero in the future give me give

978
00:41:23,579 --> 00:41:27,900
me information uh it's pretty cool I

979
00:41:27,900 --> 00:41:30,900
love plotly because it makes really

980
00:41:30,900 --> 00:41:33,240
really cool stuff this isn't really

981
00:41:33,240 --> 00:41:35,400
related to the the machine learning

982
00:41:35,400 --> 00:41:38,520
portion but it lets you make these like

983
00:41:38,520 --> 00:41:42,119
interactive charts that are based on

984
00:41:42,119 --> 00:41:45,420
frequency length and average entropy and

985
00:41:45,420 --> 00:41:47,940
you can like Mouse over them

986
00:41:47,940 --> 00:41:51,660
um and you can kind of see that a bunch

987
00:41:51,660 --> 00:41:53,220
of the data

988
00:41:53,220 --> 00:41:55,560
ends up popping out in its own little

989
00:41:55,560 --> 00:41:57,480
cluster over there so that's kind of

990
00:41:57,480 --> 00:41:59,280
kind of neat

991
00:41:59,280 --> 00:42:02,339
um and so that is that

992
00:42:02,339 --> 00:42:04,320
uh the next one

993
00:42:04,320 --> 00:42:07,320
was Apache logs I started off asking my

994
00:42:07,320 --> 00:42:09,119
company they could give me a bunch of

995
00:42:09,119 --> 00:42:12,000
Apache logs and they said no because

996
00:42:12,000 --> 00:42:14,400
they couldn't show it off

997
00:42:14,400 --> 00:42:17,060
on the previous

998
00:42:31,920 --> 00:42:34,680
maybe I don't you could probably tell me

999
00:42:34,680 --> 00:42:37,640
why it is better

1000
00:42:40,500 --> 00:42:43,140
regression yeah probably

1001
00:42:43,140 --> 00:42:46,859
um it's not time series uh uh so you'd

1002
00:42:46,859 --> 00:42:49,920
have to you could you could try it I

1003
00:42:49,920 --> 00:42:51,540
mean it's mostly just try it and see

1004
00:42:51,540 --> 00:42:53,820
what happens right

1005
00:42:53,820 --> 00:42:56,640
um I I will say like I I've I spend

1006
00:42:56,640 --> 00:42:59,819
ideas I'm like what happens and half the

1007
00:42:59,819 --> 00:43:02,040
time it it doesn't produce anything of

1008
00:43:02,040 --> 00:43:03,900
value right

1009
00:43:03,900 --> 00:43:06,000
um so there's other things we could do

1010
00:43:06,000 --> 00:43:08,280
for that

1011
00:43:08,280 --> 00:43:11,280
um so Apache logs I my company was like

1012
00:43:11,280 --> 00:43:14,339
you can't like share our Apache logs so

1013
00:43:14,339 --> 00:43:18,480
I found that in Google if you type in in

1014
00:43:18,480 --> 00:43:22,680
url access logs and filetype.log you'll

1015
00:43:22,680 --> 00:43:24,960
find people who publicly have their

1016
00:43:24,960 --> 00:43:27,000
access logs for some reason served on

1017
00:43:27,000 --> 00:43:29,880
the internet so we're using a philosophy

1018
00:43:29,880 --> 00:43:34,560
associations uh access logs to look at

1019
00:43:34,560 --> 00:43:37,079
um so it worked out

1020
00:43:37,079 --> 00:43:37,800
um

1021
00:43:37,800 --> 00:43:43,680
in this case uh access logs for uh

1022
00:43:43,680 --> 00:43:47,640
uh let's see Apache yeah so these are

1023
00:43:47,640 --> 00:43:50,339
access logs for Apache uh for the most

1024
00:43:50,339 --> 00:43:52,500
part it's time

1025
00:43:52,500 --> 00:43:55,099
um and then what was requested get post

1026
00:43:55,099 --> 00:43:59,460
uh there's some other data for for

1027
00:43:59,460 --> 00:44:00,119
um

1028
00:44:00,119 --> 00:44:02,280
the different user agent strings and so

1029
00:44:02,280 --> 00:44:05,520
forth I did find

1030
00:44:05,520 --> 00:44:08,040
um I found

1031
00:44:08,040 --> 00:44:11,940
examples of how to parse Apache logs but

1032
00:44:11,940 --> 00:44:14,099
the big problem with Apache logs is

1033
00:44:14,099 --> 00:44:16,140
they're configurable so everyone's

1034
00:44:16,140 --> 00:44:17,819
Apache logs are going to be a little bit

1035
00:44:17,819 --> 00:44:19,380
different so you kind of have to deal

1036
00:44:19,380 --> 00:44:22,260
with that uh so you have to be like okay

1037
00:44:22,260 --> 00:44:24,300
this is this field this is this field

1038
00:44:24,300 --> 00:44:25,980
this is this field

1039
00:44:25,980 --> 00:44:29,520
Etc but it's it's not too hard I started

1040
00:44:29,520 --> 00:44:32,099
with that and was able to quickly figure

1041
00:44:32,099 --> 00:44:34,020
out how to do it

1042
00:44:34,020 --> 00:44:37,260
um based on that code we turn that same

1043
00:44:37,260 --> 00:44:40,260
data into

1044
00:44:40,260 --> 00:44:43,560
uh uh into a data frame

1045
00:44:43,560 --> 00:44:46,440
uh we start enriching the data so in my

1046
00:44:46,440 --> 00:44:48,960
case I'm looking at the different Uris

1047
00:44:48,960 --> 00:44:51,480
that were requested I do again things

1048
00:44:51,480 --> 00:44:52,560
like

1049
00:44:52,560 --> 00:44:54,839
um what are

1050
00:44:54,839 --> 00:44:58,619
I messed with like user agent strings as

1051
00:44:58,619 --> 00:45:02,579
well as doing entropy and so forth so

1052
00:45:02,579 --> 00:45:05,220
get user agent statistics what are the

1053
00:45:05,220 --> 00:45:08,280
unique uh user agents that are being

1054
00:45:08,280 --> 00:45:10,319
presented as well as their frequency we

1055
00:45:10,319 --> 00:45:13,319
can see that googlebot for example ends

1056
00:45:13,319 --> 00:45:16,500
up being pretty heavily used

1057
00:45:16,500 --> 00:45:17,579
um

1058
00:45:17,579 --> 00:45:21,839
let's see what else there is uh get URI

1059
00:45:21,839 --> 00:45:24,720
statistics so this is

1060
00:45:24,720 --> 00:45:26,579
um by the end of this I take all the

1061
00:45:26,579 --> 00:45:29,160
Uris like what is the frequency that

1062
00:45:29,160 --> 00:45:31,619
they're being uh requested what's the

1063
00:45:31,619 --> 00:45:34,740
length of them entropy variable lengths

1064
00:45:34,740 --> 00:45:36,660
and then the variable entropy so that's

1065
00:45:36,660 --> 00:45:39,060
for like passing in the applications and

1066
00:45:39,060 --> 00:45:40,339
so forth

1067
00:45:40,339 --> 00:45:43,079
push them all that data back in the

1068
00:45:43,079 --> 00:45:44,819
original data frame so I'm adding all

1069
00:45:44,819 --> 00:45:46,220
that data back

1070
00:45:46,220 --> 00:45:49,020
and then I start getting statistics

1071
00:45:49,020 --> 00:45:52,380
about based on IP address so here's the

1072
00:45:52,380 --> 00:45:55,980
IP address it had this many requests it

1073
00:45:55,980 --> 00:45:57,920
had this many failures

1074
00:45:57,920 --> 00:46:01,859
they tend to have this much entropy

1075
00:46:01,859 --> 00:46:05,700
coming out of each one and so forth I

1076
00:46:05,700 --> 00:46:08,460
turned this into a pretty picture again

1077
00:46:08,460 --> 00:46:10,740
I didn't see anything that really stood

1078
00:46:10,740 --> 00:46:13,319
out maybe this one this IP address seems

1079
00:46:13,319 --> 00:46:15,960
to have a high failure frequency but it

1080
00:46:15,960 --> 00:46:17,579
it's probably some sort of Bot or

1081
00:46:17,579 --> 00:46:19,920
something I don't have control of This

1082
00:46:19,920 --> 00:46:22,079
Server so I can't really really look too

1083
00:46:22,079 --> 00:46:24,720
much further into it

1084
00:46:24,720 --> 00:46:29,099
um and then some Uris plotted based on

1085
00:46:29,099 --> 00:46:32,760
on information about the Uris might be

1086
00:46:32,760 --> 00:46:36,359
some data value and then more or less

1087
00:46:36,359 --> 00:46:40,020
the same thing uh take it in this case I

1088
00:46:40,020 --> 00:46:42,619
used eight clusters as opposed to four

1089
00:46:42,619 --> 00:46:45,960
and you're just trying to look or do any

1090
00:46:45,960 --> 00:46:49,020
of these items mean anything of use to

1091
00:46:49,020 --> 00:46:52,140
me and if they do you can you can use

1092
00:46:52,140 --> 00:46:53,839
them

1093
00:46:53,839 --> 00:46:56,099
uh all right

1094
00:46:56,099 --> 00:46:59,640
yeah 15 minutes uh cismon data how many

1095
00:46:59,640 --> 00:47:01,680
people have worked with sysmon data

1096
00:47:01,680 --> 00:47:05,180
what what is it mostly in

1097
00:47:05,460 --> 00:47:08,220
XML right XML is wonderful it's very

1098
00:47:08,220 --> 00:47:09,900
easy to parse

1099
00:47:09,900 --> 00:47:12,420
um I couldn't find a good data set uh

1100
00:47:12,420 --> 00:47:15,480
for XML so I started doing this

1101
00:47:15,480 --> 00:47:17,520
um there is an example how to parse this

1102
00:47:17,520 --> 00:47:19,440
mon which is mostly copied and pasted

1103
00:47:19,440 --> 00:47:21,960
from someone else's GitHub

1104
00:47:21,960 --> 00:47:24,119
um but

1105
00:47:24,119 --> 00:47:26,819
what I did find is miter publishes

1106
00:47:26,819 --> 00:47:29,160
something called brawl which is

1107
00:47:29,160 --> 00:47:32,579
apparently some exercise that they run

1108
00:47:32,579 --> 00:47:34,980
um and they publish it in Json so it's

1109
00:47:34,980 --> 00:47:38,099
not exactly the same format but it is

1110
00:47:38,099 --> 00:47:40,500
some exercise they did there's some sort

1111
00:47:40,500 --> 00:47:42,839
of like environment and they have

1112
00:47:42,839 --> 00:47:45,780
automated attacks of some sort going on

1113
00:47:45,780 --> 00:47:47,819
that's about all I know from their their

1114
00:47:47,819 --> 00:47:50,640
GitHub so I don't know too much more

1115
00:47:50,640 --> 00:47:53,579
about it but it provided me the data set

1116
00:47:53,579 --> 00:47:56,540
that I was trying to find

1117
00:47:56,540 --> 00:48:00,119
so it's not exactly in sysmon format but

1118
00:48:00,119 --> 00:48:03,420
I think it it works more or less I took

1119
00:48:03,420 --> 00:48:04,880
the data

1120
00:48:04,880 --> 00:48:09,300
and I turned their Jace on and one of

1121
00:48:09,300 --> 00:48:12,960
the problems that they had was

1122
00:48:12,960 --> 00:48:15,839
they have like their own weird format so

1123
00:48:15,839 --> 00:48:18,300
like they have like game ID and stuff

1124
00:48:18,300 --> 00:48:20,700
like that that's tacked on there

1125
00:48:20,700 --> 00:48:22,500
um that I just had to deal with which it

1126
00:48:22,500 --> 00:48:24,599
wasn't a big deal and then I can after

1127
00:48:24,599 --> 00:48:26,640
that I can start treating as if it were

1128
00:48:26,640 --> 00:48:29,520
cismon then what I did was I took all

1129
00:48:29,520 --> 00:48:33,119
the executables that were that had logs

1130
00:48:33,119 --> 00:48:35,880
um I started looking at how many systems

1131
00:48:35,880 --> 00:48:39,060
ran each of these executables right how

1132
00:48:39,060 --> 00:48:41,640
many users ran these executables I

1133
00:48:41,640 --> 00:48:44,099
thought that would be interesting

1134
00:48:44,099 --> 00:48:44,900
um

1135
00:48:44,900 --> 00:48:49,440
and you end up with something like this

1136
00:48:49,440 --> 00:48:51,240
um that you can look at I also had

1137
00:48:51,240 --> 00:48:52,980
connection count so the number of

1138
00:48:52,980 --> 00:48:55,740
connections that were being made to a

1139
00:48:55,740 --> 00:48:57,000
network

1140
00:48:57,000 --> 00:48:59,040
and then I ran it through isolation

1141
00:48:59,040 --> 00:49:01,980
first and if you look carefully you will

1142
00:49:01,980 --> 00:49:05,359
see one of the Clusters has like

1143
00:49:05,359 --> 00:49:07,980
philadelphia.exe and west.exe running

1144
00:49:07,980 --> 00:49:11,880
out of the C directory we could see that

1145
00:49:11,880 --> 00:49:14,099
it ran

1146
00:49:14,099 --> 00:49:16,500
I want to say didn't make a lot of

1147
00:49:16,500 --> 00:49:19,079
connections it's kind of hard to see

1148
00:49:19,079 --> 00:49:21,300
with it zoomed in

1149
00:49:21,300 --> 00:49:24,599
um but it's more or less based on how

1150
00:49:24,599 --> 00:49:26,940
many boxes that it ran on the total

1151
00:49:26,940 --> 00:49:31,200
Network so that's so what I've got

1152
00:49:31,200 --> 00:49:34,859
um is there any questions comments

1153
00:49:34,859 --> 00:49:37,460
is there anything

1154
00:49:48,180 --> 00:49:52,079
um so so that's how we do things on my

1155
00:49:52,079 --> 00:49:54,359
contract we're pulling data from that

1156
00:49:54,359 --> 00:49:56,880
and doing analysis the one thing that

1157
00:49:56,880 --> 00:49:58,680
this is good for that you can't do in

1158
00:49:58,680 --> 00:50:02,099
like Cabana very easily all the time is

1159
00:50:02,099 --> 00:50:05,040
being able to add data so like the

1160
00:50:05,040 --> 00:50:06,119
problem if you're familiar with

1161
00:50:06,119 --> 00:50:08,339
elasticsearch it's somewhat immutable

1162
00:50:08,339 --> 00:50:11,099
once it's in there so

1163
00:50:11,099 --> 00:50:14,040
um you can't like add Fields very easily

1164
00:50:14,040 --> 00:50:16,319
you can do things like calculate the

1165
00:50:16,319 --> 00:50:19,319
mean and so forth but I can't like pivot

1166
00:50:19,319 --> 00:50:21,540
off of that data so like the Zeke

1167
00:50:21,540 --> 00:50:25,200
example I can't easily say okay I want

1168
00:50:25,200 --> 00:50:28,980
you to add a new field of a statistic

1169
00:50:28,980 --> 00:50:31,140
that I have found on more advanced

1170
00:50:31,140 --> 00:50:33,900
statistics if that makes sense but you

1171
00:50:33,900 --> 00:50:36,060
can very easily do this with

1172
00:50:36,060 --> 00:50:38,220
elasticsearch as the back end and that's

1173
00:50:38,220 --> 00:50:41,460
that's how we we generally do things

1174
00:50:41,460 --> 00:50:45,440
um a way

1175
00:50:55,500 --> 00:50:57,720
yeah

1176
00:50:57,720 --> 00:50:59,700
yeah that's actually pretty cool I

1177
00:50:59,700 --> 00:51:01,559
forget what library it does that but you

1178
00:51:01,559 --> 00:51:04,440
can you can take these cool like

1179
00:51:04,440 --> 00:51:06,480
the these things and you can publish

1180
00:51:06,480 --> 00:51:09,059
them to to a cabana which is something

1181
00:51:09,059 --> 00:51:11,599
we found

1182
00:51:18,059 --> 00:51:20,059
um

1183
00:51:28,319 --> 00:51:30,319
um

1184
00:51:42,240 --> 00:51:44,579
they should have like data for hundreds

1185
00:51:44,579 --> 00:51:47,240
of features

1186
00:51:49,920 --> 00:51:51,680
um intuition

1187
00:51:51,680 --> 00:51:55,020
is one the other thing is if you have

1188
00:51:55,020 --> 00:51:58,380
access to either red team reports or

1189
00:51:58,380 --> 00:52:00,599
like you know all the crowdstrike

1190
00:52:00,599 --> 00:52:02,819
reports and stuff like that look at

1191
00:52:02,819 --> 00:52:05,700
prior attacks and like literally just go

1192
00:52:05,700 --> 00:52:08,280
through the report and be like okay you

1193
00:52:08,280 --> 00:52:11,520
know they list a DNS query was made what

1194
00:52:11,520 --> 00:52:14,099
was the unique thing about that DNS

1195
00:52:14,099 --> 00:52:16,200
query that ended up being a value to

1196
00:52:16,200 --> 00:52:18,900
their investigation right so if I didn't

1197
00:52:18,900 --> 00:52:20,520
know where to start that would be where

1198
00:52:20,520 --> 00:52:23,579
I would start as well as just

1199
00:52:23,579 --> 00:52:26,040
if you have experience doing this type

1200
00:52:26,040 --> 00:52:28,680
of work like stuff like that you tend to

1201
00:52:28,680 --> 00:52:31,260
know like okay these things are tend to

1202
00:52:31,260 --> 00:52:33,540
be the things that I look for the other

1203
00:52:33,540 --> 00:52:35,400
thing could be just ask analysts like

1204
00:52:35,400 --> 00:52:37,559
watch an analysts and see what they're

1205
00:52:37,559 --> 00:52:39,240
looking at and have them describe why

1206
00:52:39,240 --> 00:52:40,920
they're looking at it and then write it

1207
00:52:40,920 --> 00:52:43,260
down would be the the areas I would look

1208
00:52:43,260 --> 00:52:45,440
at

1209
00:52:46,619 --> 00:52:49,460
anything else

1210
00:52:56,760 --> 00:52:59,339
searching so I'll look for

1211
00:52:59,339 --> 00:53:02,000
the different field

1212
00:53:02,400 --> 00:53:05,240
surface area

1213
00:53:51,660 --> 00:53:55,260
for how often you can develop this data

1214
00:53:55,260 --> 00:53:57,800
that is like Google

1215
00:54:02,339 --> 00:54:03,240
um

1216
00:54:03,240 --> 00:54:06,359
so usually what we're doing is we're

1217
00:54:06,359 --> 00:54:08,400
building models and then we're flagging

1218
00:54:08,400 --> 00:54:11,099
on the models in the future so it's more

1219
00:54:11,099 --> 00:54:12,599
like we

1220
00:54:12,599 --> 00:54:15,180
we try to come up with something of use

1221
00:54:15,180 --> 00:54:17,579
and if it ends up being of use we do the

1222
00:54:17,579 --> 00:54:19,740
the fit and then it's like hey you know

1223
00:54:19,740 --> 00:54:22,319
this went into cluster zero send an

1224
00:54:22,319 --> 00:54:25,619
alarm or something like that so where I

1225
00:54:25,619 --> 00:54:27,599
would see you have to retrain the models

1226
00:54:27,599 --> 00:54:29,520
anytime there's a significant change to

1227
00:54:29,520 --> 00:54:31,500
the network or if you're finding that

1228
00:54:31,500 --> 00:54:33,540
you know for some reason like this was

1229
00:54:33,540 --> 00:54:35,339
working six months ago and all of a

1230
00:54:35,339 --> 00:54:36,720
sudden it's been giving me a lot of

1231
00:54:36,720 --> 00:54:38,460
false positives or something along those

1232
00:54:38,460 --> 00:54:41,640
lines and you just have to rerun it but

1233
00:54:41,640 --> 00:54:43,559
the ideal scenario is you don't have to

1234
00:54:43,559 --> 00:54:46,740
run this all the time you just you have

1235
00:54:46,740 --> 00:54:49,319
a large data set you run it it takes a

1236
00:54:49,319 --> 00:54:51,180
while it eventually builds out a model

1237
00:54:51,180 --> 00:54:54,599
if you can take these models that are

1238
00:54:54,599 --> 00:54:56,640
made and you can pickle them I don't

1239
00:54:56,640 --> 00:54:58,200
know if you're familiar with pickle for

1240
00:54:58,200 --> 00:55:00,359
you can literally just pickle it and

1241
00:55:00,359 --> 00:55:02,339
then from there you can utilize that

1242
00:55:02,339 --> 00:55:04,319
model and you just say hey I have a new

1243
00:55:04,319 --> 00:55:06,660
data what cluster does it fall into and

1244
00:55:06,660 --> 00:55:09,000
it's not like retraining the model but

1245
00:55:09,000 --> 00:55:11,220
what it is doing is it's it's clustering

1246
00:55:11,220 --> 00:55:13,680
and you just let it run and until it's

1247
00:55:13,680 --> 00:55:15,720
not providing value anymore and then you

1248
00:55:15,720 --> 00:55:18,379
recreate it

1249
00:55:28,920 --> 00:55:31,740
production at scale so it's like do you

1250
00:55:31,740 --> 00:55:34,260
like have your python code like in a

1251
00:55:34,260 --> 00:55:36,420
kubernetes cluster and like scale it up

1252
00:55:36,420 --> 00:55:37,740
like that or

1253
00:55:37,740 --> 00:55:40,619
yes so we we are using something called

1254
00:55:40,619 --> 00:55:42,000
kubeflow

1255
00:55:42,000 --> 00:55:45,000
um which is a uh it's it's open source

1256
00:55:45,000 --> 00:55:46,740
it's you can run in the cloud if you

1257
00:55:46,740 --> 00:55:49,800
want we're doing it locally and kubeflow

1258
00:55:49,800 --> 00:55:52,440
allows you to do that so mostly we would

1259
00:55:52,440 --> 00:55:54,240
explore with something like this and

1260
00:55:54,240 --> 00:55:55,980
there's actually Jupiter notebooks built

1261
00:55:55,980 --> 00:55:58,920
into kubeflow which is really slick and

1262
00:55:58,920 --> 00:56:00,720
then if we find something that we think

1263
00:56:00,720 --> 00:56:03,059
is a value we'd probably rewrite it in

1264
00:56:03,059 --> 00:56:04,559
pi spark

1265
00:56:04,559 --> 00:56:06,900
um I don't I'm not a huge fan of Pi

1266
00:56:06,900 --> 00:56:10,680
spark because what I found is it's uh

1267
00:56:10,680 --> 00:56:13,920
it's it's it's python because it's Pi

1268
00:56:13,920 --> 00:56:16,559
spark but it's actually just a wrap

1269
00:56:16,559 --> 00:56:20,460
around Java so like you it's very

1270
00:56:20,460 --> 00:56:22,859
bizarre because like things aren't the

1271
00:56:22,859 --> 00:56:25,140
same it's like it's close enough to

1272
00:56:25,140 --> 00:56:27,720
python but it's not actually python

1273
00:56:27,720 --> 00:56:29,819
um but it is it is more distributable

1274
00:56:29,819 --> 00:56:32,579
and so forth so that's the benefit to it

1275
00:56:32,579 --> 00:56:35,520
but Cube flow allows you to distribute

1276
00:56:35,520 --> 00:56:38,880
out to a large set of clusters

1277
00:56:38,880 --> 00:56:41,460
more or less

1278
00:56:41,460 --> 00:56:43,680
five minutes anything else questions

1279
00:56:43,680 --> 00:56:46,399
comments

1280
00:56:55,220 --> 00:56:59,359
and I wonder how much they are

1281
00:57:03,000 --> 00:57:05,700
from experience you see too many things

1282
00:57:05,700 --> 00:57:09,059
like tiring people and like

1283
00:57:09,059 --> 00:57:11,180
like

1284
00:57:13,800 --> 00:57:17,880
I would be very reluctant to block right

1285
00:57:17,880 --> 00:57:21,059
now based on anything I've seen so I

1286
00:57:21,059 --> 00:57:23,220
usually like with if you never know like

1287
00:57:23,220 --> 00:57:25,200
cerakati you can block or you can not

1288
00:57:25,200 --> 00:57:27,780
block I would probably at this point not

1289
00:57:27,780 --> 00:57:30,480
block I think where it would potentially

1290
00:57:30,480 --> 00:57:34,020
be a value is is really just taking

1291
00:57:34,020 --> 00:57:36,839
reducing our work right

1292
00:57:36,839 --> 00:57:38,700
um instead of hundreds of false

1293
00:57:38,700 --> 00:57:41,640
positives maybe we only have 15 or

1294
00:57:41,640 --> 00:57:43,579
something like that as well as

1295
00:57:43,579 --> 00:57:46,500
presenting information that we don't

1296
00:57:46,500 --> 00:57:49,200
actually know like I think that's really

1297
00:57:49,200 --> 00:57:51,960
the benefit is like hey I send it into

1298
00:57:51,960 --> 00:57:54,720
an unsupervised learning and it sees

1299
00:57:54,720 --> 00:57:57,119
something that's weird is that actually

1300
00:57:57,119 --> 00:57:59,400
weird I don't know

1301
00:57:59,400 --> 00:58:02,160
um just sort of checking our

1302
00:58:02,160 --> 00:58:04,920
our preconceived notions and so forth is

1303
00:58:04,920 --> 00:58:07,559
where where it can be useful

1304
00:58:07,559 --> 00:58:09,540
um I I don't think I would let it like

1305
00:58:09,540 --> 00:58:12,000
just start running a muck on my network

1306
00:58:12,000 --> 00:58:15,059
and like controlling it and like hey I

1307
00:58:15,059 --> 00:58:17,040
see something I'm gonna kill that host

1308
00:58:17,040 --> 00:58:19,859
because it's now anomalous right I would

1309
00:58:19,859 --> 00:58:23,180
not trust it for that yet

1310
00:58:32,160 --> 00:58:35,640
uh no other than what I've got

1311
00:58:35,640 --> 00:58:37,099
um

1312
00:58:37,099 --> 00:58:40,140
not entirely no this is this is about

1313
00:58:40,140 --> 00:58:42,980
what I've gotten

1314
00:58:45,299 --> 00:58:48,240
all right anything else and I can't also

1315
00:58:48,240 --> 00:58:50,339
share directly like the stuff that we

1316
00:58:50,339 --> 00:58:52,440
actually do either so that's the other

1317
00:58:52,440 --> 00:58:55,260
problem so all this was like

1318
00:58:55,260 --> 00:58:57,900
mostly me learning of what I'm supposed

1319
00:58:57,900 --> 00:59:00,059
to be doing so

1320
00:59:00,059 --> 00:59:02,640
um I just started messing around locally

1321
00:59:02,640 --> 00:59:07,940
before I started doing it at scale

1322
00:59:12,480 --> 00:59:14,880
experience yeah

1323
00:59:14,880 --> 00:59:18,720
we tend to hate like repetitive jobs and

1324
00:59:18,720 --> 00:59:20,400
this is where this is a lot more fun

1325
00:59:20,400 --> 00:59:23,520
than a repetitive job that's the other

1326
00:59:23,520 --> 00:59:26,339
thing like instead of going through

1327
00:59:26,339 --> 00:59:28,440
thousands of logs I would much rather

1328
00:59:28,440 --> 00:59:31,920
like try to convey something to a

1329
00:59:31,920 --> 00:59:36,020
computer and have it do that for me

1330
00:59:37,500 --> 00:59:40,619
so all right thank you very much

1331
00:59:40,619 --> 00:59:42,299
you can grab me

1332
00:59:42,299 --> 00:59:46,040
anytime and ask more questions

