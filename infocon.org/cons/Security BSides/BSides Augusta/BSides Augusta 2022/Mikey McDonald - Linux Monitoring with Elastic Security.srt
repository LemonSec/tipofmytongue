1
00:00:13,700 --> 00:00:16,500
thank you thank you uh so I've met most

2
00:00:16,500 --> 00:00:19,140
of you before uh if not I've been out at

3
00:00:19,140 --> 00:00:21,119
the table all day so please stop by even

4
00:00:21,119 --> 00:00:24,779
after and you come get to know me my uh

5
00:00:24,779 --> 00:00:27,420
so Cliff worth and there's a few other

6
00:00:27,420 --> 00:00:29,160
people from elastic here so we're always

7
00:00:29,160 --> 00:00:30,599
willing to answer questions and we're

8
00:00:30,599 --> 00:00:32,940
here for you guys

9
00:00:32,940 --> 00:00:34,559
today we're going to go over a little

10
00:00:34,559 --> 00:00:37,800
bit of Linux and elastic and

11
00:00:37,800 --> 00:00:39,000
specifically we're going to be going

12
00:00:39,000 --> 00:00:41,940
over extended Berkeley packet filter and

13
00:00:41,940 --> 00:00:44,460
how that is helping elastic security

14
00:00:44,460 --> 00:00:46,860
and how you can actually see more inside

15
00:00:46,860 --> 00:00:49,379
of your Linux distros in your Enterprise

16
00:00:49,379 --> 00:00:52,940
when collecting with the scene

17
00:00:53,100 --> 00:00:55,379
so here's a little bit about me I'm a

18
00:00:55,379 --> 00:00:58,079
Consulting architect for elastic on the

19
00:00:58,079 --> 00:01:00,420
federal Services side

20
00:01:00,420 --> 00:01:00,960
um

21
00:01:00,960 --> 00:01:04,080
14 years in the Army eight of it doing

22
00:01:04,080 --> 00:01:07,320
incident responses cyber security mostly

23
00:01:07,320 --> 00:01:09,540
focused on the ICS scada side

24
00:01:09,540 --> 00:01:13,619
hmm I'm a data scientist by trade

25
00:01:13,619 --> 00:01:17,600
I really really enjoy python rstudio

26
00:01:17,600 --> 00:01:21,299
I've recently got into Apache spark been

27
00:01:21,299 --> 00:01:22,799
doing different things in in the data

28
00:01:22,799 --> 00:01:24,659
science area

29
00:01:24,659 --> 00:01:27,840
here you can follow me on Twitter you

30
00:01:27,840 --> 00:01:29,400
won't see much there except you know

31
00:01:29,400 --> 00:01:31,860
non-controversial opinions about you

32
00:01:31,860 --> 00:01:33,659
know Dallas Cowboys are the best team in

33
00:01:33,659 --> 00:01:36,540
the NFL mma's the best sport things like

34
00:01:36,540 --> 00:01:38,939
that nature

35
00:01:38,939 --> 00:01:41,400
and then of course here's our a link to

36
00:01:41,400 --> 00:01:43,759
our company

37
00:01:44,220 --> 00:01:47,460
all right so ebpf before I get into what

38
00:01:47,460 --> 00:01:50,040
extended Berkeley packet filter is I

39
00:01:50,040 --> 00:01:52,860
wanted to ask if anybody else here

40
00:01:52,860 --> 00:01:56,640
knows what Berkeley packet filter is

41
00:01:56,640 --> 00:01:59,780
I saw your hand first

42
00:02:00,119 --> 00:02:02,579
purple purple shirt I think

43
00:02:02,579 --> 00:02:05,059
yep

44
00:02:19,980 --> 00:02:22,739
yeah exactly yeah so one of the you can

45
00:02:22,739 --> 00:02:24,840
obviously get yep hand you one of those

46
00:02:24,840 --> 00:02:26,760
so one of the best parts about Berkeley

47
00:02:26,760 --> 00:02:28,560
packet filters what it does is it's a

48
00:02:28,560 --> 00:02:31,319
kernel level program that will

49
00:02:31,319 --> 00:02:32,760
essentially sift through different

50
00:02:32,760 --> 00:02:33,780
packets

51
00:02:33,780 --> 00:02:36,060
as you absorb them on the network very

52
00:02:36,060 --> 00:02:38,040
very quickly because it's at the current

53
00:02:38,040 --> 00:02:39,420
kernel level

54
00:02:39,420 --> 00:02:42,840
well what we have today is called the

55
00:02:42,840 --> 00:02:46,700
extended Berkeley packet filter

56
00:02:46,860 --> 00:02:49,280
not really related at all

57
00:02:49,280 --> 00:02:51,420
evpf is written in a completely

58
00:02:51,420 --> 00:02:53,580
different code has nothing to do with

59
00:02:53,580 --> 00:02:57,239
BPF whatsoever outside of BPF uses it

60
00:02:57,239 --> 00:02:59,940
and you have to call eppf with a Sysco

61
00:02:59,940 --> 00:03:03,180
from Berkeley packet filter so

62
00:03:03,180 --> 00:03:05,640
it's all of the codes that you would run

63
00:03:05,640 --> 00:03:07,739
are written in C

64
00:03:07,739 --> 00:03:09,860
they are

65
00:03:09,860 --> 00:03:12,780
loaded with different syscalls you'll

66
00:03:12,780 --> 00:03:14,280
see right here on this slide is just

67
00:03:14,280 --> 00:03:16,400
some technical information about how

68
00:03:16,400 --> 00:03:21,239
ebpf can be called by BPF

69
00:03:21,239 --> 00:03:23,400
so that's essentially what this slide is

70
00:03:23,400 --> 00:03:25,099
is just to kind of walk you through it

71
00:03:25,099 --> 00:03:28,500
you can different ways to call different

72
00:03:28,500 --> 00:03:30,319
compiled C language

73
00:03:30,319 --> 00:03:33,599
that you can write your own there's a

74
00:03:33,599 --> 00:03:36,360
community of dis there's distros all

75
00:03:36,360 --> 00:03:39,420
over the community both in elastic and

76
00:03:39,420 --> 00:03:41,580
outside of elastic that are using eppf

77
00:03:41,580 --> 00:03:43,940
as well

78
00:03:44,340 --> 00:03:45,840
so

79
00:03:45,840 --> 00:03:48,360
you'll also notice that my name is not

80
00:03:48,360 --> 00:03:51,120
Tammy and Tammy could not make it

81
00:03:51,120 --> 00:03:53,519
because of hurricane Ian so occasionally

82
00:03:53,519 --> 00:03:55,319
I'm going to reach over here and I'm

83
00:03:55,319 --> 00:03:57,299
going to just Mark out where I am I

84
00:03:57,299 --> 00:03:59,159
found out 24 hours ago I was given this

85
00:03:59,159 --> 00:04:01,200
brief so give me give me a little bit of

86
00:04:01,200 --> 00:04:03,420
a break here

87
00:04:03,420 --> 00:04:05,760
Okay so

88
00:04:05,760 --> 00:04:08,940
this ability through eppf a quick little

89
00:04:08,940 --> 00:04:12,000
poll here who has done an incident

90
00:04:12,000 --> 00:04:13,980
response

91
00:04:13,980 --> 00:04:16,260
and inside of an incident response who

92
00:04:16,260 --> 00:04:20,279
has encountered a Linux box

93
00:04:20,279 --> 00:04:21,779
okay

94
00:04:21,779 --> 00:04:24,120
so not not many of you

95
00:04:24,120 --> 00:04:26,340
what are some of the different logs and

96
00:04:26,340 --> 00:04:28,080
things that you're going to want to grab

97
00:04:28,080 --> 00:04:31,340
just just give me one

98
00:04:36,000 --> 00:04:38,400
yeah for sure for sure but specific to

99
00:04:38,400 --> 00:04:40,880
Linux

100
00:04:42,180 --> 00:04:46,160
audit logs is what I was looking for

101
00:04:48,540 --> 00:04:52,340
so traditionally with Linux before

102
00:04:52,340 --> 00:04:54,660
edrs and stuff started making their

103
00:04:54,660 --> 00:04:57,360
breakthrough into the Linux distros you

104
00:04:57,360 --> 00:05:00,660
had to go through audit logs you had to

105
00:05:00,660 --> 00:05:03,360
go and collect different data sets with

106
00:05:03,360 --> 00:05:06,300
like just running PS Tech elf

107
00:05:06,300 --> 00:05:09,360
tracing those pids to ppids and it was

108
00:05:09,360 --> 00:05:12,240
just horrible it was it was awful

109
00:05:12,240 --> 00:05:16,020
so what does ebpf do what does it

110
00:05:16,020 --> 00:05:18,900
actually do so ebpf

111
00:05:18,900 --> 00:05:20,580
is

112
00:05:20,580 --> 00:05:26,240
is a tool that actually hooks into uh

113
00:05:26,240 --> 00:05:30,419
into a process as it's running inside of

114
00:05:30,419 --> 00:05:32,940
the Linux kernel so it's compiled in C

115
00:05:32,940 --> 00:05:35,520
and one of the benefits that it does is

116
00:05:35,520 --> 00:05:38,699
as the process is actually being

117
00:05:38,699 --> 00:05:40,080
executed

118
00:05:40,080 --> 00:05:42,060
it is caught in the Stream of the

119
00:05:42,060 --> 00:05:45,840
execution it is not caught afterwards

120
00:05:45,840 --> 00:05:49,740
so typically with like audit D or any

121
00:05:49,740 --> 00:05:51,419
other kind of logging

122
00:05:51,419 --> 00:05:53,880
the event happens and then it's logged

123
00:05:53,880 --> 00:05:56,340
by the OS or some kind of third-party

124
00:05:56,340 --> 00:05:59,100
application logging whatever that may be

125
00:05:59,100 --> 00:06:02,160
with eppf as it's occurring it is being

126
00:06:02,160 --> 00:06:04,680
logged through a stream in the hook and

127
00:06:04,680 --> 00:06:06,000
we're going to go over that in just a

128
00:06:06,000 --> 00:06:08,100
little bit try to keep it lower level

129
00:06:08,100 --> 00:06:09,960
because that's where my knowledge base

130
00:06:09,960 --> 00:06:12,799
is on it so

131
00:06:13,740 --> 00:06:15,660
hope points yes so this is what we were

132
00:06:15,660 --> 00:06:18,120
talking about you can see as different

133
00:06:18,120 --> 00:06:21,300
different syscalls inside of the kernel

134
00:06:21,300 --> 00:06:24,720
are executed you can actually pass eppf

135
00:06:24,720 --> 00:06:28,380
programs to it and again these can be

136
00:06:28,380 --> 00:06:31,979
different things inside of Linux there

137
00:06:31,979 --> 00:06:33,360
are a ton of companies that are starting

138
00:06:33,360 --> 00:06:36,780
to get into external BPF uh or extended

139
00:06:36,780 --> 00:06:40,319
BPF programming and there's a ton of

140
00:06:40,319 --> 00:06:42,720
different ways to actually use it so

141
00:06:42,720 --> 00:06:44,639
what we're going to get into here in

142
00:06:44,639 --> 00:06:45,900
just a few slides is I'm going to show

143
00:06:45,900 --> 00:06:48,360
you how elastic is using it and some of

144
00:06:48,360 --> 00:06:51,560
the benefits and Pros that I've seen uh

145
00:06:51,560 --> 00:06:54,360
that I've experienced on an actual

146
00:06:54,360 --> 00:06:57,180
incident response

147
00:06:57,180 --> 00:06:59,580
so what do I get with this

148
00:06:59,580 --> 00:07:01,800
so you're going to see here in the few

149
00:07:01,800 --> 00:07:05,220
slides that the system call data and the

150
00:07:05,220 --> 00:07:07,080
uh is combined with packet information

151
00:07:07,080 --> 00:07:09,240
so what do I mean by that so you're

152
00:07:09,240 --> 00:07:12,360
going to see audit data

153
00:07:12,360 --> 00:07:15,300
process ID data and it's going to be in

154
00:07:15,300 --> 00:07:18,180
human readable format another problem

155
00:07:18,180 --> 00:07:20,039
that you've also seen in Linux is

156
00:07:20,039 --> 00:07:23,759
sometimes it has an issue with uh

157
00:07:23,759 --> 00:07:26,880
metadata sometimes you will see

158
00:07:26,880 --> 00:07:29,039
the

159
00:07:29,039 --> 00:07:31,500
the aggregation of metrics is a kind of

160
00:07:31,500 --> 00:07:33,660
a problem so these are kind of some of

161
00:07:33,660 --> 00:07:35,699
the issue solutions that you're going to

162
00:07:35,699 --> 00:07:37,440
get as you

163
00:07:37,440 --> 00:07:42,240
as you implement this inside of elastic

164
00:07:43,620 --> 00:07:45,419
so one of the things we didn't talk

165
00:07:45,419 --> 00:07:49,440
about is performance so with abpf as you

166
00:07:49,440 --> 00:07:50,880
compile it and see and you run it

167
00:07:50,880 --> 00:07:52,500
there's a couple of things that will

168
00:07:52,500 --> 00:07:55,080
happen either a it will run and it will

169
00:07:55,080 --> 00:07:57,180
do what you told it to or B it will

170
00:07:57,180 --> 00:07:58,740
error out and break

171
00:07:58,740 --> 00:08:02,400
however it does not break your system it

172
00:08:02,400 --> 00:08:04,680
doesn't run in a part of memory that

173
00:08:04,680 --> 00:08:07,259
will actually kill your your system so

174
00:08:07,259 --> 00:08:10,560
one of the benefits is that it's safe as

175
00:08:10,560 --> 00:08:12,900
you were running it it will hook into

176
00:08:12,900 --> 00:08:15,900
whatever process that you called and the

177
00:08:15,900 --> 00:08:17,759
kernel and it will actually just either

178
00:08:17,759 --> 00:08:21,060
fail or succeed so that's kind of what

179
00:08:21,060 --> 00:08:23,580
we get with the reliability and

180
00:08:23,580 --> 00:08:25,919
compatibility issues

181
00:08:25,919 --> 00:08:27,680
um

182
00:08:27,680 --> 00:08:30,180
so yeah

183
00:08:30,180 --> 00:08:33,240
minor attack mapping here is

184
00:08:33,240 --> 00:08:35,099
where it starts to get a little bit

185
00:08:35,099 --> 00:08:37,640
confusing

186
00:08:38,820 --> 00:08:41,159
so there is a couple of uh Engineers

187
00:08:41,159 --> 00:08:44,580
known as Judd Salazar and Italia Rica

188
00:08:44,580 --> 00:08:47,160
ivanko both of these guys have mapped

189
00:08:47,160 --> 00:08:50,040
out where evpf can solve these initial

190
00:08:50,040 --> 00:08:52,019
techniques you'll see that a lot of

191
00:08:52,019 --> 00:08:54,600
different organizations including uh

192
00:08:54,600 --> 00:08:57,420
maybe it before in the brief before they

193
00:08:57,420 --> 00:08:59,339
use the golden standard that is miter

194
00:08:59,339 --> 00:09:00,959
attack Matrix to map out different

195
00:09:00,959 --> 00:09:03,060
attacks and

196
00:09:03,060 --> 00:09:05,279
when you're mapping out how you're going

197
00:09:05,279 --> 00:09:07,680
to do your security operations including

198
00:09:07,680 --> 00:09:10,380
scene what you want to utilize is some

199
00:09:10,380 --> 00:09:13,860
kind of methodology to capture as much

200
00:09:13,860 --> 00:09:16,740
of what the adversary actually does on a

201
00:09:16,740 --> 00:09:20,600
network so whatever it may be your seams

202
00:09:20,600 --> 00:09:23,399
your edrs whatever kind of solutions

203
00:09:23,399 --> 00:09:25,080
you're trying to build your defense and

204
00:09:25,080 --> 00:09:27,120
depth you always want to kind of use the

205
00:09:27,120 --> 00:09:29,040
miter attack Matrix or some other kind

206
00:09:29,040 --> 00:09:31,380
of methodology to map out and get as

207
00:09:31,380 --> 00:09:33,899
much of this as possible well what we

208
00:09:33,899 --> 00:09:38,339
can do with this eppvf is actually map

209
00:09:38,339 --> 00:09:40,680
most of those miter attack Frameworks

210
00:09:40,680 --> 00:09:42,779
inside of the Linux distros and that's

211
00:09:42,779 --> 00:09:44,700
what this is breaking out and that what

212
00:09:44,700 --> 00:09:47,100
those two authors have done for us and

213
00:09:47,100 --> 00:09:50,100
again if you at the end of this if you

214
00:09:50,100 --> 00:09:52,140
need their names or the book I'm more

215
00:09:52,140 --> 00:09:53,820
than welcome to give it to you in at the

216
00:09:53,820 --> 00:09:56,180
tables

217
00:09:57,420 --> 00:09:59,100
okay

218
00:09:59,100 --> 00:10:01,500
so audit B one of the we've already

219
00:10:01,500 --> 00:10:03,060
talked about it anybody that has been

220
00:10:03,060 --> 00:10:05,580
through it knows that audit D is a pain

221
00:10:05,580 --> 00:10:07,800
in the butt uh

222
00:10:07,800 --> 00:10:10,320
I mean just look at it right you can

223
00:10:10,320 --> 00:10:12,600
only grip so much so this can be really

224
00:10:12,600 --> 00:10:15,060
really difficult to look at it can be

225
00:10:15,060 --> 00:10:16,800
really really difficult to process the

226
00:10:16,800 --> 00:10:19,320
data what of the metadata here is

227
00:10:19,320 --> 00:10:21,959
actually usable which of the metadata is

228
00:10:21,959 --> 00:10:24,720
key these are things that just make it

229
00:10:24,720 --> 00:10:27,120
really really difficult to to process

230
00:10:27,120 --> 00:10:28,920
this and I'm going to show you here in a

231
00:10:28,920 --> 00:10:30,560
second why

232
00:10:30,560 --> 00:10:33,180
using extended Berkeley packet filter is

233
00:10:33,180 --> 00:10:35,279
going to be usable or more useful than

234
00:10:35,279 --> 00:10:37,380
this right here so this is just your

235
00:10:37,380 --> 00:10:39,240
straight output of these logs and it

236
00:10:39,240 --> 00:10:41,519
again if you've ever done this it's

237
00:10:41,519 --> 00:10:44,899
incredibly difficult to process

238
00:10:44,899 --> 00:10:47,519
okay so this is where I can start to

239
00:10:47,519 --> 00:10:49,500
brief you a little bit on what we're

240
00:10:49,500 --> 00:10:51,779
using inside of the elastic stack so

241
00:10:51,779 --> 00:10:54,060
what we have here is a capture

242
00:10:54,060 --> 00:10:58,380
of some of the processes and the ppids

243
00:10:58,380 --> 00:11:01,800
and the metadata associated with PID and

244
00:11:01,800 --> 00:11:05,459
ppid inside of your elastic distro

245
00:11:05,459 --> 00:11:08,220
so what makes this usable what makes

246
00:11:08,220 --> 00:11:09,779
this better right

247
00:11:09,779 --> 00:11:14,399
so one it's it's in a GUI format you

248
00:11:14,399 --> 00:11:17,279
have different uh you have the metadata

249
00:11:17,279 --> 00:11:18,480
there you have alerts that you can

250
00:11:18,480 --> 00:11:20,519
create inside of the elastic stack as it

251
00:11:20,519 --> 00:11:23,579
relates to this alert to this event and

252
00:11:23,579 --> 00:11:25,079
that can be for anything

253
00:11:25,079 --> 00:11:27,180
uh right what you see right here is just

254
00:11:27,180 --> 00:11:29,760
somebody ran an LS that created its own

255
00:11:29,760 --> 00:11:33,240
entry into a process and then was listed

256
00:11:33,240 --> 00:11:37,279
inside of elastic stack

257
00:11:39,180 --> 00:11:42,240
uh again metadata that doesn't require

258
00:11:42,240 --> 00:11:45,480
PhD metadata can sometimes depending on

259
00:11:45,480 --> 00:11:47,640
what it is that you're using

260
00:11:47,640 --> 00:11:50,459
can be very very useful or completely

261
00:11:50,459 --> 00:11:52,920
useless so it just depends on what your

262
00:11:52,920 --> 00:11:56,100
organization is using it for but it's

263
00:11:56,100 --> 00:11:58,200
essentially right here I just have a

264
00:11:58,200 --> 00:12:00,060
quick print out to show you the host

265
00:12:00,060 --> 00:12:03,060
name the ID IP things of that nature

266
00:12:03,060 --> 00:12:04,380
these are all things that you can

267
00:12:04,380 --> 00:12:06,899
configure inside of your extended

268
00:12:06,899 --> 00:12:09,860
Berkeley packet filter

269
00:12:11,579 --> 00:12:15,120
here is a session view so this is an

270
00:12:15,120 --> 00:12:17,940
investigative Tool uh that we actually

271
00:12:17,940 --> 00:12:20,519
have right now inside of elastic stack

272
00:12:20,519 --> 00:12:24,060
so this will break down essentially all

273
00:12:24,060 --> 00:12:25,140
those different logs that we were

274
00:12:25,140 --> 00:12:28,500
talking about inside of Linux and it

275
00:12:28,500 --> 00:12:30,720
will break it down into a streamlined

276
00:12:30,720 --> 00:12:33,300
format for you to show you exactly what

277
00:12:33,300 --> 00:12:37,200
objectives an attacker or maybe just a

278
00:12:37,200 --> 00:12:40,620
bad user you did on an endpoint so you

279
00:12:40,620 --> 00:12:43,620
can see here by just this example we saw

280
00:12:43,620 --> 00:12:45,839
that somebody and this is an alert that

281
00:12:45,839 --> 00:12:48,300
we actually created somebody created a

282
00:12:48,300 --> 00:12:50,820
hidden file and directory if you click

283
00:12:50,820 --> 00:12:52,680
on that it will actually give you in the

284
00:12:52,680 --> 00:12:55,320
metadata below how they created it what

285
00:12:55,320 --> 00:12:57,240
commands were Crea were used to create

286
00:12:57,240 --> 00:13:01,860
it and essentially what processes what

287
00:13:01,860 --> 00:13:05,540
users anything of that nature so before

288
00:13:05,540 --> 00:13:07,500
Linux doesn't really do a good job

289
00:13:07,500 --> 00:13:09,779
you're not bringing up process hacker or

290
00:13:09,779 --> 00:13:12,060
a process Tree on Linux right it ain't

291
00:13:12,060 --> 00:13:14,519
happening with this you can actually do

292
00:13:14,519 --> 00:13:19,019
that inside of the elastic security stat

293
00:13:19,200 --> 00:13:22,200
foreign

294
00:13:22,519 --> 00:13:26,660
human readable process yes

295
00:13:29,980 --> 00:13:32,820
[Music]

296
00:13:32,820 --> 00:13:35,220
so it depends on what your organization

297
00:13:35,220 --> 00:13:37,380
wants and how you're going to collect

298
00:13:37,380 --> 00:13:40,740
that data so you can use we are actually

299
00:13:40,740 --> 00:13:42,540
in the process of developing the elastic

300
00:13:42,540 --> 00:13:45,300
security agent that will actually

301
00:13:45,300 --> 00:13:47,760
collect some of this data for you you

302
00:13:47,760 --> 00:13:49,920
could use a beats it by all means if you

303
00:13:49,920 --> 00:13:52,019
want to it just depends on how you want

304
00:13:52,019 --> 00:13:54,360
to configure it whether you want to do

305
00:13:54,360 --> 00:13:58,220
Beats or an agentless

306
00:13:58,440 --> 00:14:02,339
uh you know like uh EDR solution

307
00:14:02,339 --> 00:14:04,980
so it's it's up to you really

308
00:14:04,980 --> 00:14:07,040
yeah

309
00:14:12,320 --> 00:14:14,940
because most of the capabilities are

310
00:14:14,940 --> 00:14:16,860
things that we typically had right right

311
00:14:16,860 --> 00:14:20,579
so those right now uh for the elastic

312
00:14:20,579 --> 00:14:23,220
security agent are coming by default

313
00:14:23,220 --> 00:14:26,220
however there are additional things that

314
00:14:26,220 --> 00:14:27,660
I'm going to point out to you at the end

315
00:14:27,660 --> 00:14:31,320
we have a GitHub it this project will be

316
00:14:31,320 --> 00:14:33,200
open source for the foreseeable future

317
00:14:33,200 --> 00:14:35,940
and there are many many use cases

318
00:14:35,940 --> 00:14:37,320
because it's going to depend on what

319
00:14:37,320 --> 00:14:40,019
kind of data set you have but people are

320
00:14:40,019 --> 00:14:41,579
already starting to write different

321
00:14:41,579 --> 00:14:43,860
different C code because that's that's

322
00:14:43,860 --> 00:14:46,860
hard to just kind of do unless you have

323
00:14:46,860 --> 00:14:49,860
a background in it so uh

324
00:14:49,860 --> 00:14:51,779
like some of this dysfunctionality

325
00:14:51,779 --> 00:14:53,160
that's already built into the security

326
00:14:53,160 --> 00:14:56,420
agent some of it's not

327
00:14:58,980 --> 00:15:01,500
so runtime security is your security

328
00:15:01,500 --> 00:15:03,300
camera so what we're getting at here is

329
00:15:03,300 --> 00:15:05,279
this is a little meme to kind of point

330
00:15:05,279 --> 00:15:06,480
out that

331
00:15:06,480 --> 00:15:10,019
elastic considers this a runtime

332
00:15:10,019 --> 00:15:12,240
security issue because the event is

333
00:15:12,240 --> 00:15:15,300
happening in stream we are considering

334
00:15:15,300 --> 00:15:19,560
that a runtime security thing so as the

335
00:15:19,560 --> 00:15:21,600
event is occurring we are ingesting that

336
00:15:21,600 --> 00:15:24,899
data and making it available to the

337
00:15:24,899 --> 00:15:27,480
analysts

338
00:15:27,480 --> 00:15:30,120
so in conclusion

339
00:15:30,120 --> 00:15:32,519
uh

340
00:15:32,519 --> 00:15:34,440
audit and compliance logs have come a

341
00:15:34,440 --> 00:15:35,699
long way

342
00:15:35,699 --> 00:15:39,540
ebpf is something that we are using to

343
00:15:39,540 --> 00:15:42,120
develop future capabilities inside of

344
00:15:42,120 --> 00:15:44,279
our elastic instances because of the

345
00:15:44,279 --> 00:15:46,740
power it has with the endpoint Linux

346
00:15:46,740 --> 00:15:49,980
distros so one of the things I kind of

347
00:15:49,980 --> 00:15:51,959
like didn't really discuss with you guys

348
00:15:51,959 --> 00:15:54,060
is right now there's only a couple

349
00:15:54,060 --> 00:15:56,399
capabilities inside of Linux that give

350
00:15:56,399 --> 00:15:59,940
you the capacity to look at this kind of

351
00:15:59,940 --> 00:16:02,880
data set right so d-trace was one that

352
00:16:02,880 --> 00:16:05,339
is that only works with Mac OS instant

353
00:16:05,339 --> 00:16:07,079
Solaris I don't think anybody in here is

354
00:16:07,079 --> 00:16:10,260
rocking a Solaris machine right now that

355
00:16:10,260 --> 00:16:12,480
there's a few others like peat race

356
00:16:12,480 --> 00:16:14,220
things of that nature but there was

357
00:16:14,220 --> 00:16:16,139
nothing that encompassed the entire

358
00:16:16,139 --> 00:16:18,540
Linux distro that kind of gave this

359
00:16:18,540 --> 00:16:21,300
ability to look at a process right so if

360
00:16:21,300 --> 00:16:23,880
I'm an attacker and I inject some a

361
00:16:23,880 --> 00:16:25,680
malicious something into a process

362
00:16:25,680 --> 00:16:28,620
inside of a Linux box how is that going

363
00:16:28,620 --> 00:16:30,060
to get seen how is that going to get

364
00:16:30,060 --> 00:16:32,699
viewed by the analyst right outside of

365
00:16:32,699 --> 00:16:34,860
doing a memory capture and doing a hash

366
00:16:34,860 --> 00:16:37,380
of that individual process how are we

367
00:16:37,380 --> 00:16:39,600
ever going to see that this malicious

368
00:16:39,600 --> 00:16:42,779
process was violated and so that that's

369
00:16:42,779 --> 00:16:44,519
essentially what the power of this does

370
00:16:44,519 --> 00:16:47,160
is in real time it will actually create

371
00:16:47,160 --> 00:16:50,399
and I'll go back here real quick

372
00:16:50,399 --> 00:16:52,980
right here it will actually create a

373
00:16:52,980 --> 00:16:55,980
fork of that process so when I inject

374
00:16:55,980 --> 00:16:58,320
something in malicious into process

375
00:16:58,320 --> 00:17:01,019
whatever that is hostname right there

376
00:17:01,019 --> 00:17:03,720
it is going to absolutely create a fork

377
00:17:03,720 --> 00:17:05,939
and I will see when it changed what the

378
00:17:05,939 --> 00:17:07,859
user did and what the command line entry

379
00:17:07,859 --> 00:17:10,500
was for that and this is pretty cool for

380
00:17:10,500 --> 00:17:12,959
Linux because before like I said none of

381
00:17:12,959 --> 00:17:17,480
this really exists natively to Linux

382
00:17:18,540 --> 00:17:21,359
uh another thing is is that we talked

383
00:17:21,359 --> 00:17:24,079
about eppf is that it doesn't

384
00:17:24,079 --> 00:17:28,380
utilize a lot of memory it doesn't if it

385
00:17:28,380 --> 00:17:30,419
fails it it fails safe right it doesn't

386
00:17:30,419 --> 00:17:34,080
fail open it doesn't cause any

387
00:17:34,080 --> 00:17:36,360
outlying effects on your system so as

388
00:17:36,360 --> 00:17:37,860
there's no big deal there's really no

389
00:17:37,860 --> 00:17:41,100
effect to otherwise your your actual

390
00:17:41,100 --> 00:17:43,140
Linux box and the business processes you

391
00:17:43,140 --> 00:17:44,940
have for that Linux box

392
00:17:44,940 --> 00:17:47,280
so you don't actually incur a lot a lot

393
00:17:47,280 --> 00:17:50,240
of performance issues

394
00:17:51,000 --> 00:17:53,039
um again thank you for bearing with me

395
00:17:53,039 --> 00:17:54,539
as I struggled through that presentation

396
00:17:54,539 --> 00:17:57,299
uh again I'm my name is not Tammy it's

397
00:17:57,299 --> 00:17:58,880
Mikey

398
00:17:58,880 --> 00:18:01,679
if you have any questions please by all

399
00:18:01,679 --> 00:18:03,660
means go ahead and ask them and I wanted

400
00:18:03,660 --> 00:18:05,340
to thank b-sides for letting us continue

401
00:18:05,340 --> 00:18:09,840
to give this brief thanks

402
00:18:13,440 --> 00:18:16,400
but his point like how

403
00:18:18,600 --> 00:18:20,220
crazy to look at that

404
00:18:20,220 --> 00:18:23,220
second

405
00:18:23,340 --> 00:18:25,980
so ebpf is actually written into a lot

406
00:18:25,980 --> 00:18:27,900
of different tools You by no means have

407
00:18:27,900 --> 00:18:30,000
to just go out and get elastic to do it

408
00:18:30,000 --> 00:18:31,919
however I work with elastic so please

409
00:18:31,919 --> 00:18:35,820
download it uh but by all means you can

410
00:18:35,820 --> 00:18:39,020
use any tool to use eppf it is a

411
00:18:39,020 --> 00:18:41,280
industry-wide tool and it is an open

412
00:18:41,280 --> 00:18:43,200
source program I believe we own the

413
00:18:43,200 --> 00:18:45,960
company that created eppf but right now

414
00:18:45,960 --> 00:18:47,520
from what I understand it's going to

415
00:18:47,520 --> 00:18:51,419
remain an open source tool for a while

416
00:18:51,419 --> 00:18:52,679
here

417
00:18:52,679 --> 00:18:55,220
yes

418
00:18:57,360 --> 00:19:00,660
agents yes and then we have what you

419
00:19:00,660 --> 00:19:03,419
just said the endpoint security or

420
00:19:03,419 --> 00:19:05,940
thank you uh we have elastic agent and

421
00:19:05,940 --> 00:19:08,400
then I think you mentioned the word uh

422
00:19:08,400 --> 00:19:10,380
elastic endpoint security can you

423
00:19:10,380 --> 00:19:13,740
clarify licensing and the functionality

424
00:19:13,740 --> 00:19:15,660
you're talking about here how does that

425
00:19:15,660 --> 00:19:17,940
fit into elastic agent and what does

426
00:19:17,940 --> 00:19:19,919
that all look like for sure absolutely

427
00:19:19,919 --> 00:19:23,640
so elastic offers primarily right now

428
00:19:23,640 --> 00:19:25,860
for a security tool we actually offer

429
00:19:25,860 --> 00:19:27,780
what's called in-game so elastic

430
00:19:27,780 --> 00:19:29,280
purchased in game that is our

431
00:19:29,280 --> 00:19:31,860
traditional EDR that is what we are

432
00:19:31,860 --> 00:19:34,260
offering as an EDR fully functional out

433
00:19:34,260 --> 00:19:36,240
of the box right now we are in

434
00:19:36,240 --> 00:19:38,580
development of an elastic agent whereas

435
00:19:38,580 --> 00:19:41,280
elastic security agent that will

436
00:19:41,280 --> 00:19:43,799
function with the elastic stack so that

437
00:19:43,799 --> 00:19:46,020
it's kind of like all in one if that

438
00:19:46,020 --> 00:19:47,880
makes sense

439
00:19:47,880 --> 00:19:49,320
um but that's kind of what we're getting

440
00:19:49,320 --> 00:19:52,440
at uh I believe that has started to be

441
00:19:52,440 --> 00:19:55,440
offered is the security been offered I

442
00:19:55,440 --> 00:19:57,840
don't I'd have to check and see if we're

443
00:19:57,840 --> 00:20:00,480
actually offering that out loud out wide

444
00:20:00,480 --> 00:20:01,860
to the community but I know it's in

445
00:20:01,860 --> 00:20:05,000
development at the moment

446
00:20:07,500 --> 00:20:08,640
yes

447
00:20:08,640 --> 00:20:10,679
that is how we're going to use it and

448
00:20:10,679 --> 00:20:12,419
it'll like I said it'll be by default

449
00:20:12,419 --> 00:20:13,980
that some of these tools that I

450
00:20:13,980 --> 00:20:15,780
destroyed today will actually come with

451
00:20:15,780 --> 00:20:18,059
it by default

452
00:20:18,059 --> 00:20:20,780
yes

453
00:20:22,380 --> 00:20:24,000
and I saw the slide up there and I

454
00:20:24,000 --> 00:20:26,280
messed with not a d a lot

455
00:20:26,280 --> 00:20:29,299
it's already on okay

456
00:20:29,880 --> 00:20:32,100
the sequence numbers that built that

457
00:20:32,100 --> 00:20:34,559
come in audit D will paint a picture of

458
00:20:34,559 --> 00:20:37,080
an initial injector whatnot

459
00:20:37,080 --> 00:20:40,200
how is I don't understand how the uh the

460
00:20:40,200 --> 00:20:41,520
uh

461
00:20:41,520 --> 00:20:44,880
the ebpf is is different from audit D I

462
00:20:44,880 --> 00:20:46,679
know Oddity is very convoluted to look

463
00:20:46,679 --> 00:20:49,260
at and it's hard to understand but are

464
00:20:49,260 --> 00:20:51,059
you guys just kind of pulling that all

465
00:20:51,059 --> 00:20:52,980
together and producing it out because

466
00:20:52,980 --> 00:20:54,480
you say you're no longer using Oddity

467
00:20:54,480 --> 00:20:55,440
anymore

468
00:20:55,440 --> 00:20:58,260
right so let me clarify that statement I

469
00:20:58,260 --> 00:21:00,240
am by no means telling you not to

470
00:21:00,240 --> 00:21:02,220
collect audit data

471
00:21:02,220 --> 00:21:04,740
please leave that logging on that would

472
00:21:04,740 --> 00:21:06,660
be bananas if you turn it off

473
00:21:06,660 --> 00:21:10,260
uh but let me clarify so what I'm

474
00:21:10,260 --> 00:21:12,360
talking about is as the event is

475
00:21:12,360 --> 00:21:14,340
actually occurring

476
00:21:14,340 --> 00:21:18,299
typically the OS at a certain layer will

477
00:21:18,299 --> 00:21:20,340
after the event has already occurred

478
00:21:20,340 --> 00:21:22,980
we'll create the log correct

479
00:21:22,980 --> 00:21:26,340
this is going to be in Stream So as I

480
00:21:26,340 --> 00:21:29,520
actually do anything on this system

481
00:21:29,520 --> 00:21:31,820
inject into

482
00:21:31,820 --> 00:21:34,740
notepad.exe right it is going to

483
00:21:34,740 --> 00:21:37,799
immediately create a sub log

484
00:21:37,799 --> 00:21:42,299
into elastic that eppf I'm not saying it

485
00:21:42,299 --> 00:21:45,480
won't be logged into audit log yeah yeah

486
00:21:45,480 --> 00:21:48,000
I'm just saying it's a lot easier to

487
00:21:48,000 --> 00:21:51,200
look through audit log

488
00:21:52,500 --> 00:21:56,460
oh so uh the polar different there's

489
00:21:56,460 --> 00:21:58,500
Polar Opposites between like the really

490
00:21:58,500 --> 00:22:00,480
popular Splunk and elastic and the

491
00:22:00,480 --> 00:22:02,820
complaint is sort of by people who are

492
00:22:02,820 --> 00:22:05,580
used to Splunk when you try to introduce

493
00:22:05,580 --> 00:22:08,460
them to elastic is oh this isn't even a

494
00:22:08,460 --> 00:22:11,039
seam this is a log management tool and I

495
00:22:11,039 --> 00:22:12,840
don't have any features is elastic

496
00:22:12,840 --> 00:22:14,760
looking for any kind of way to like

497
00:22:14,760 --> 00:22:17,280
bridge the gap like default dashboards

498
00:22:17,280 --> 00:22:19,580
and stuff like that

499
00:22:19,580 --> 00:22:24,299
so inside of security there are a ton of

500
00:22:24,299 --> 00:22:27,419
different use cases for dashboards right

501
00:22:27,419 --> 00:22:29,220
and by default you could say hey look

502
00:22:29,220 --> 00:22:31,799
you should bring up all anytime a user

503
00:22:31,799 --> 00:22:33,960
uses FTP or whatever right there's a

504
00:22:33,960 --> 00:22:35,520
million use cases

505
00:22:35,520 --> 00:22:37,679
one of the benefits I'll say when it

506
00:22:37,679 --> 00:22:40,320
comes to elastic is that there are

507
00:22:40,320 --> 00:22:42,600
enough people that by now that have used

508
00:22:42,600 --> 00:22:45,659
it to where there are plenty of githubs

509
00:22:45,659 --> 00:22:49,260
for you to go out and grab uh

510
00:22:49,260 --> 00:22:52,020
formats for dashboards I just I can't

511
00:22:52,020 --> 00:22:53,340
see

512
00:22:53,340 --> 00:22:55,799
saying that elastic is behind in that

513
00:22:55,799 --> 00:22:58,080
only because so much of the community is

514
00:22:58,080 --> 00:23:00,240
already using it for security but you're

515
00:23:00,240 --> 00:23:02,820
right out of the box it doesn't it is an

516
00:23:02,820 --> 00:23:04,200
empty elastic

517
00:23:04,200 --> 00:23:06,720
instance right it's on you to configure

518
00:23:06,720 --> 00:23:08,100
it

519
00:23:08,100 --> 00:23:10,320
that is by default what the because

520
00:23:10,320 --> 00:23:12,059
there's a million use cases for elastic

521
00:23:12,059 --> 00:23:14,220
it's a data science company right

522
00:23:14,220 --> 00:23:16,580
yeah

523
00:23:16,740 --> 00:23:19,220
yeah

524
00:23:26,520 --> 00:23:29,159
well again thank you very much thank you

525
00:23:29,159 --> 00:23:30,539
for bearing with me as I struggled

526
00:23:30,539 --> 00:23:33,320
through it thank you

