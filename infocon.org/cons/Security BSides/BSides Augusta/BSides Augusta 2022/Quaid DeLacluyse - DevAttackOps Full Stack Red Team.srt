1
00:00:11,000 --> 00:00:13,679
can you guys hear me okay

2
00:00:13,679 --> 00:00:16,800
all right cool so thanks everyone today

3
00:00:16,800 --> 00:00:18,119
I'm going to be talking about Dev attack

4
00:00:18,119 --> 00:00:20,939
Ops full stack red team and kind of

5
00:00:20,939 --> 00:00:22,680
before I even get into it just know that

6
00:00:22,680 --> 00:00:24,119
it does come with an open source project

7
00:00:24,119 --> 00:00:25,740
so if at any time throughout the talk

8
00:00:25,740 --> 00:00:27,420
you want to check out what it actually

9
00:00:27,420 --> 00:00:29,640
is that we're talking about please feel

10
00:00:29,640 --> 00:00:31,320
free to go to the GitHub link and check

11
00:00:31,320 --> 00:00:32,520
that out

12
00:00:32,520 --> 00:00:36,059
so who am I I'm Quaid Delacruz I go by

13
00:00:36,059 --> 00:00:37,860
Ezra Buckingham so if you look at

14
00:00:37,860 --> 00:00:40,200
anything uh cyber related and you see

15
00:00:40,200 --> 00:00:42,300
Ezra Buckingham that's me I'm the only

16
00:00:42,300 --> 00:00:44,040
Quaid de la Clues on the internet I like

17
00:00:44,040 --> 00:00:45,660
to keep it kind of separate between the

18
00:00:45,660 --> 00:00:49,260
world of red team and Ezra uh I have

19
00:00:49,260 --> 00:00:51,300
some certs but like HR only really cares

20
00:00:51,300 --> 00:00:52,620
about those so I won't tell you the

21
00:00:52,620 --> 00:00:56,100
bottom uh I joined cyber back in January

22
00:00:56,100 --> 00:00:58,440
of 2021 so I'm still kind of green to

23
00:00:58,440 --> 00:01:00,360
the industry however I've I've got a lot

24
00:01:00,360 --> 00:01:03,000
of different background that gives me a

25
00:01:03,000 --> 00:01:06,720
leg up as a red teamer and I am a red

26
00:01:06,720 --> 00:01:08,640
team operator at Fifth Third Bank we're

27
00:01:08,640 --> 00:01:10,619
based out of Cincinnati Ohio however we

28
00:01:10,619 --> 00:01:11,939
kind of have a presence out everywhere

29
00:01:11,939 --> 00:01:14,280
so if if you want to learn more like

30
00:01:14,280 --> 00:01:16,320
come up and talk to me

31
00:01:16,320 --> 00:01:18,180
so General disclaimer before I get into

32
00:01:18,180 --> 00:01:19,799
the actual talk all the opinions are my

33
00:01:19,799 --> 00:01:22,080
own not the opinions of my employer

34
00:01:22,080 --> 00:01:24,060
um do good not evil the thing that I

35
00:01:24,060 --> 00:01:25,500
always tell my teammates and all my

36
00:01:25,500 --> 00:01:27,540
friends is play stupid games Win stupid

37
00:01:27,540 --> 00:01:30,000
prizes so if you want to go play that

38
00:01:30,000 --> 00:01:32,520
route go for it but I am not accountable

39
00:01:32,520 --> 00:01:34,259
for anything you do and then the other

40
00:01:34,259 --> 00:01:35,640
disclaimer is kind of more about the

41
00:01:35,640 --> 00:01:37,020
talk what I'm going to be talking about

42
00:01:37,020 --> 00:01:39,180
is not a new problem a lot of red teams

43
00:01:39,180 --> 00:01:41,579
a lot of people face this problem so my

44
00:01:41,579 --> 00:01:43,500
solution was built around the needs of

45
00:01:43,500 --> 00:01:45,780
me and my team your team might have

46
00:01:45,780 --> 00:01:47,460
different needs and thus need a

47
00:01:47,460 --> 00:01:49,619
different solution

48
00:01:49,619 --> 00:01:51,780
so today I'm going to talk first about

49
00:01:51,780 --> 00:01:54,060
kind of the goals of my presentation the

50
00:01:54,060 --> 00:01:56,520
goals of the research I was doing

51
00:01:56,520 --> 00:01:58,020
um talk about kind of my journey so

52
00:01:58,020 --> 00:02:00,479
where I started with a project called

53
00:02:00,479 --> 00:02:02,399
the Red Baron the implementation that

54
00:02:02,399 --> 00:02:05,219
came along with the Red Baron and how I

55
00:02:05,219 --> 00:02:07,259
tried to adapt the solution reframe the

56
00:02:07,259 --> 00:02:08,639
problem and then I'll introduce you to

57
00:02:08,639 --> 00:02:10,380
Terry which is the solution that I came

58
00:02:10,380 --> 00:02:11,459
up with

59
00:02:11,459 --> 00:02:13,140
so first let me talk about the goals

60
00:02:13,140 --> 00:02:16,140
here today as well as for my research

61
00:02:16,140 --> 00:02:18,599
so my goal as a red team was I wanted to

62
00:02:18,599 --> 00:02:20,340
develop a red team infrastructure

63
00:02:20,340 --> 00:02:22,459
pipeline that is cross-cloud capable

64
00:02:22,459 --> 00:02:26,580
user friendly extensible and secure and

65
00:02:26,580 --> 00:02:27,720
when you start to think about all those

66
00:02:27,720 --> 00:02:29,040
adjectives you're like okay those are

67
00:02:29,040 --> 00:02:30,780
kind of catch-22s you're not really

68
00:02:30,780 --> 00:02:32,220
looking at these things and saying like

69
00:02:32,220 --> 00:02:33,900
Okay I can have all those things but

70
00:02:33,900 --> 00:02:35,760
that was my goal

71
00:02:35,760 --> 00:02:37,920
so my goal here as a presenter today is

72
00:02:37,920 --> 00:02:39,780
to take you on a journey of how I seized

73
00:02:39,780 --> 00:02:41,580
an opportunity to automate my workflow

74
00:02:41,580 --> 00:02:43,739
learn how the cloud Works learn how to

75
00:02:43,739 --> 00:02:45,420
automate infrastructure creation and

76
00:02:45,420 --> 00:02:47,280
configuration and then learn how to

77
00:02:47,280 --> 00:02:48,720
abstract away the cloud using open

78
00:02:48,720 --> 00:02:50,640
source tools so like Tim talked about

79
00:02:50,640 --> 00:02:53,220
this morning I wanted to be lazy I did

80
00:02:53,220 --> 00:02:54,680
not want to

81
00:02:54,680 --> 00:02:57,360
really like have to manually do things

82
00:02:57,360 --> 00:02:59,099
so I want to take you through my journey

83
00:02:59,099 --> 00:03:01,620
of how I got to be really lazy and came

84
00:03:01,620 --> 00:03:03,780
up with the solution that I have

85
00:03:03,780 --> 00:03:05,700
so if you're in the audience and you

86
00:03:05,700 --> 00:03:08,099
don't fit the red teamer I understand

87
00:03:08,099 --> 00:03:09,900
that not a lot of people are red teamers

88
00:03:09,900 --> 00:03:11,400
so I want to make sure that you all feel

89
00:03:11,400 --> 00:03:13,260
like you can answer your answer some

90
00:03:13,260 --> 00:03:14,760
questions as you go along with this

91
00:03:14,760 --> 00:03:16,440
presentation so if you're red team or

92
00:03:16,440 --> 00:03:17,700
you might ask yourself the question and

93
00:03:17,700 --> 00:03:19,560
be able to answer how can I remove the

94
00:03:19,560 --> 00:03:21,239
minutia from setting up operational

95
00:03:21,239 --> 00:03:23,280
infrastructure and still have badass

96
00:03:23,280 --> 00:03:25,500
emulation capability if you're a CIS

97
00:03:25,500 --> 00:03:27,720
admin how can I automate configuring and

98
00:03:27,720 --> 00:03:29,940
building infrastructure if you're a

99
00:03:29,940 --> 00:03:31,200
developer how can I integrate

100
00:03:31,200 --> 00:03:33,180
conflicting Solutions together and if

101
00:03:33,180 --> 00:03:34,680
you're none of those and you're not

102
00:03:34,680 --> 00:03:35,760
really sure what you're going to get out

103
00:03:35,760 --> 00:03:37,620
of this I want you to walk away with the

104
00:03:37,620 --> 00:03:39,000
answer to the question of how can I

105
00:03:39,000 --> 00:03:41,040
tackle complex problems and Abstract

106
00:03:41,040 --> 00:03:42,120
Solutions away from their

107
00:03:42,120 --> 00:03:44,340
implementations

108
00:03:44,340 --> 00:03:46,620
so let me set the stage for you a little

109
00:03:46,620 --> 00:03:49,560
bit as far as like what my kind of dream

110
00:03:49,560 --> 00:03:52,260
state was for red team infrastructure so

111
00:03:52,260 --> 00:03:54,180
I sat down and I thought to myself and

112
00:03:54,180 --> 00:03:55,739
also there's a QR code I know there's a

113
00:03:55,739 --> 00:03:57,120
lot of hackers in the room don't scan

114
00:03:57,120 --> 00:04:00,060
the QR code there's also a URL but this

115
00:04:00,060 --> 00:04:02,099
the QR code will take you to the Wiki

116
00:04:02,099 --> 00:04:04,080
page for the GitHub where you can find

117
00:04:04,080 --> 00:04:05,459
all this information because I know it's

118
00:04:05,459 --> 00:04:06,900
small

119
00:04:06,900 --> 00:04:09,599
so my goal was I sat down and I thought

120
00:04:09,599 --> 00:04:11,640
to myself here's what I want out of a

121
00:04:11,640 --> 00:04:14,040
red team infrastructure pipeline so I

122
00:04:14,040 --> 00:04:15,360
wanted to make sure that all of my

123
00:04:15,360 --> 00:04:16,978
malware Communications would come from

124
00:04:16,978 --> 00:04:19,760
my victims they would hit basically

125
00:04:19,760 --> 00:04:21,839
domains that are registered in various

126
00:04:21,839 --> 00:04:24,120
Cloud providers then all of it would hit

127
00:04:24,120 --> 00:04:26,520
a reverse proxy and then all of the

128
00:04:26,520 --> 00:04:28,800
traffic would go from that reverse proxy

129
00:04:28,800 --> 00:04:31,800
through a VPN tunnel to something that

130
00:04:31,800 --> 00:04:33,419
might be in a private Network

131
00:04:33,419 --> 00:04:35,520
right and then all of that I want to all

132
00:04:35,520 --> 00:04:37,919
logging off into an elastic stack that I

133
00:04:37,919 --> 00:04:38,880
own

134
00:04:38,880 --> 00:04:41,160
right and that was like the dream goal

135
00:04:41,160 --> 00:04:42,540
that was the thing that I was working

136
00:04:42,540 --> 00:04:45,120
towards with doing all this research I

137
00:04:45,120 --> 00:04:48,419
wanted to get to this and that was kind

138
00:04:48,419 --> 00:04:50,160
of a Genesis of how I came up with the

139
00:04:50,160 --> 00:04:51,840
solution that I have today

140
00:04:51,840 --> 00:04:53,280
so let's first talk about where I

141
00:04:53,280 --> 00:04:54,419
started

142
00:04:54,419 --> 00:04:57,060
so let's talk about the Red Baron what

143
00:04:57,060 --> 00:04:58,800
is the Red Baron it's a project

144
00:04:58,800 --> 00:05:00,960
originally from coal fire research it's

145
00:05:00,960 --> 00:05:03,540
a set of terraform modules for kind of

146
00:05:03,540 --> 00:05:05,280
cloud resources all with a red team

147
00:05:05,280 --> 00:05:07,620
focus and it's actually now owned by a

148
00:05:07,620 --> 00:05:09,840
developer called bite leader and it's

149
00:05:09,840 --> 00:05:12,360
recently archived as a project and as we

150
00:05:12,360 --> 00:05:13,740
start to get through it you might start

151
00:05:13,740 --> 00:05:16,560
to recognize why it was uh recently

152
00:05:16,560 --> 00:05:18,540
archived and I also will say this is

153
00:05:18,540 --> 00:05:21,120
going to be very like devops heavy so if

154
00:05:21,120 --> 00:05:23,039
you don't follow any of these terms like

155
00:05:23,039 --> 00:05:25,620
terraform just think of infrastructure

156
00:05:25,620 --> 00:05:28,080
as code and configuration as code that's

157
00:05:28,080 --> 00:05:29,699
essentially what I'm going to be talking

158
00:05:29,699 --> 00:05:31,380
about

159
00:05:31,380 --> 00:05:33,720
so when you dive into the Red Baron like

160
00:05:33,720 --> 00:05:36,120
I said it's a bunch of cloud modules all

161
00:05:36,120 --> 00:05:38,699
with a red team Focus so as we start to

162
00:05:38,699 --> 00:05:41,759
look at these modules we see Azure AWS

163
00:05:41,759 --> 00:05:44,160
digitalocean Google ansible and some

164
00:05:44,160 --> 00:05:46,740
other fun things and all of these if you

165
00:05:46,740 --> 00:05:48,900
look at them we see all these different

166
00:05:48,900 --> 00:05:50,820
types of resources that we might want to

167
00:05:50,820 --> 00:05:52,560
deploy as a red teamer

168
00:05:52,560 --> 00:05:54,539
right so we have a really great start of

169
00:05:54,539 --> 00:05:56,460
where we want to go and

170
00:05:56,460 --> 00:05:58,740
the way my team used this

171
00:05:58,740 --> 00:06:01,199
was we had all of these kind of cookie

172
00:06:01,199 --> 00:06:02,780
cutter red team operational

173
00:06:02,780 --> 00:06:06,360
infrastructure terraform files

174
00:06:06,360 --> 00:06:08,940
and inside of that file we would

175
00:06:08,940 --> 00:06:10,800
instantiate each Red Baron module

176
00:06:10,800 --> 00:06:12,780
depending on what we really wanted to

177
00:06:12,780 --> 00:06:15,600
have in our operational infrastructure

178
00:06:15,600 --> 00:06:19,320
so fun fact dot TF file is terraform so

179
00:06:19,320 --> 00:06:21,060
whenever you see a DOT TF think

180
00:06:21,060 --> 00:06:22,740
terraform

181
00:06:22,740 --> 00:06:25,139
so the workflow for me was first we

182
00:06:25,139 --> 00:06:27,419
would make a new directory on a server

183
00:06:27,419 --> 00:06:30,180
that we owned in this case we make the

184
00:06:30,180 --> 00:06:31,919
super secret operation that's going to

185
00:06:31,919 --> 00:06:33,780
hold our terraform files we'd run

186
00:06:33,780 --> 00:06:36,300
certbot for all of our domains that we

187
00:06:36,300 --> 00:06:37,800
wanted to use for the operation to make

188
00:06:37,800 --> 00:06:40,080
sure that we get SSL certs set up for

189
00:06:40,080 --> 00:06:41,940
all the domains we were using and we do

190
00:06:41,940 --> 00:06:45,060
it with wild card search for https

191
00:06:45,060 --> 00:06:47,160
then we would take one of those cookie

192
00:06:47,160 --> 00:06:49,680
cutter templates take the variables.tf

193
00:06:49,680 --> 00:06:51,780
file we'd put it into the new folder we

194
00:06:51,780 --> 00:06:54,720
created we'd edit the variables.tf and

195
00:06:54,720 --> 00:06:56,580
then we'd edit the actual kind of cookie

196
00:06:56,580 --> 00:06:59,460
cutter different red team operational

197
00:06:59,460 --> 00:07:02,340
template that we had run terraforma knit

198
00:07:02,340 --> 00:07:05,340
run terraform ply

199
00:07:05,340 --> 00:07:08,460
and then we'd SSH into each server Echo

200
00:07:08,460 --> 00:07:10,440
out public Keys private keys so that all

201
00:07:10,440 --> 00:07:12,240
of my team had access to all the

202
00:07:12,240 --> 00:07:13,860
infrastructure we stood up

203
00:07:13,860 --> 00:07:15,539
and then we'd manually install and

204
00:07:15,539 --> 00:07:17,940
configure C2 and other software and we'd

205
00:07:17,940 --> 00:07:19,440
have to rinse and repeat this for n

206
00:07:19,440 --> 00:07:22,020
number of servers

207
00:07:22,020 --> 00:07:23,819
and if any of you are sitting in the

208
00:07:23,819 --> 00:07:25,740
crowd again this is where I go back to

209
00:07:25,740 --> 00:07:29,039
Tim's talk uh I am lazy I don't want to

210
00:07:29,039 --> 00:07:31,380
do this this sucks

211
00:07:31,380 --> 00:07:33,120
so then I sat there and asked myself the

212
00:07:33,120 --> 00:07:36,599
question does this scale or adapt

213
00:07:36,599 --> 00:07:38,639
and yes I have so many aliases so

214
00:07:38,639 --> 00:07:39,840
sometimes I like to think that I'm

215
00:07:39,840 --> 00:07:42,360
talking to myself it's very weird

216
00:07:42,360 --> 00:07:44,880
but the answer to that is no it doesn't

217
00:07:44,880 --> 00:07:47,220
but it's a great starting point it gave

218
00:07:47,220 --> 00:07:49,080
me all the things that I needed to know

219
00:07:49,080 --> 00:07:51,660
to understand where I wanted to kind of

220
00:07:51,660 --> 00:07:54,479
make my new vision of what I would be

221
00:07:54,479 --> 00:07:56,220
building towards

222
00:07:56,220 --> 00:07:57,539
so this is where I started to think

223
00:07:57,539 --> 00:07:59,099
about the Red Baron and I was like you

224
00:07:59,099 --> 00:08:00,960
know what I have a really great starting

225
00:08:00,960 --> 00:08:04,020
point let's try to adapt to the solution

226
00:08:04,020 --> 00:08:05,880
so as we start to look at the Red Baron

227
00:08:05,880 --> 00:08:08,039
and really kind of scrutinize what we're

228
00:08:08,039 --> 00:08:10,800
looking at here we see each module

229
00:08:10,800 --> 00:08:13,620
inside of Red Baron consists of zero or

230
00:08:13,620 --> 00:08:17,699
more of servers domains DNS records cdns

231
00:08:17,699 --> 00:08:19,199
or even tools

232
00:08:19,199 --> 00:08:21,240
but I was constantly asking myself the

233
00:08:21,240 --> 00:08:23,879
question why repeat the resource or tool

234
00:08:23,879 --> 00:08:26,160
definition by the resources use case of

235
00:08:26,160 --> 00:08:28,259
Provider so what I mean by that is if we

236
00:08:28,259 --> 00:08:30,780
look at just an HTTP redirector like

237
00:08:30,780 --> 00:08:33,240
we're not Reinventing the wheel that is

238
00:08:33,240 --> 00:08:35,159
defined for all of the cloud providers

239
00:08:35,159 --> 00:08:36,958
we have one defined for lenode one

240
00:08:36,958 --> 00:08:39,719
defined for digitalocean one for AWS one

241
00:08:39,719 --> 00:08:41,399
for Azure one for Google and let's say

242
00:08:41,399 --> 00:08:42,719
you wanted to scale out another cloud

243
00:08:42,719 --> 00:08:44,159
provider you would now have to repeat

244
00:08:44,159 --> 00:08:45,899
that tool definition

245
00:08:45,899 --> 00:08:48,060
so my new vision was you know what

246
00:08:48,060 --> 00:08:50,100
that's not going to fly

247
00:08:50,100 --> 00:08:52,320
I want to now have a base module for

248
00:08:52,320 --> 00:08:54,180
each fundamental resource for each cloud

249
00:08:54,180 --> 00:08:56,820
provider and then have module variables

250
00:08:56,820 --> 00:08:58,800
to control which Red Baron module to

251
00:08:58,800 --> 00:09:00,779
load again I didn't want to rebuild all

252
00:09:00,779 --> 00:09:02,220
the terraform modules that are already

253
00:09:02,220 --> 00:09:03,600
in that project

254
00:09:03,600 --> 00:09:06,000
but I wanted to have logic inside of the

255
00:09:06,000 --> 00:09:08,220
terraform module to dynamically set the

256
00:09:08,220 --> 00:09:10,680
source module I was going to load

257
00:09:10,680 --> 00:09:13,320
and then a little bit deeper was be the

258
00:09:13,320 --> 00:09:14,760
way that the actual servers were

259
00:09:14,760 --> 00:09:17,160
configured is a provisioner called

260
00:09:17,160 --> 00:09:19,680
remote exec so remote exec think about

261
00:09:19,680 --> 00:09:21,899
that as just you manual sshing into a

262
00:09:21,899 --> 00:09:23,700
server and deploying A bash script and

263
00:09:23,700 --> 00:09:24,779
running the bash script that's

264
00:09:24,779 --> 00:09:27,120
essentially what remote exec does and

265
00:09:27,120 --> 00:09:29,519
what that would have done is then I

266
00:09:29,519 --> 00:09:31,019
could migrate all of that remote exec

267
00:09:31,019 --> 00:09:32,760
into ansible playbooks and that will

268
00:09:32,760 --> 00:09:34,920
remove all my code duplication so now I

269
00:09:34,920 --> 00:09:38,700
don't have the HTTP redirector code

270
00:09:38,700 --> 00:09:40,200
duplicated across all the different

271
00:09:40,200 --> 00:09:42,360
Cloud providers I have it managed in one

272
00:09:42,360 --> 00:09:44,399
single ansible Playbook

273
00:09:44,399 --> 00:09:46,140
so what this implementation looked like

274
00:09:46,140 --> 00:09:47,880
and I'm going to call out before I even

275
00:09:47,880 --> 00:09:50,640
talk about it is line 19 pay attention

276
00:09:50,640 --> 00:09:52,740
to this this is important

277
00:09:52,740 --> 00:09:54,540
so I would have on the right hand side

278
00:09:54,540 --> 00:09:56,339
what the actual module would look like

279
00:09:56,339 --> 00:09:58,920
that's the kind of agnostic module so it

280
00:09:58,920 --> 00:10:00,200
would be

281
00:10:00,200 --> 00:10:04,200
server.tf for uh any cloud provider and

282
00:10:04,200 --> 00:10:06,060
then inside of it I have a locals block

283
00:10:06,060 --> 00:10:08,399
that has basically all my mappings for

284
00:10:08,399 --> 00:10:10,200
all the different Cloud providers and it

285
00:10:10,200 --> 00:10:12,779
would tell me okay if the user provides

286
00:10:12,779 --> 00:10:15,839
me AWS I want to load module AWS ec2

287
00:10:15,839 --> 00:10:17,519
instance if someone provides me

288
00:10:17,519 --> 00:10:19,920
digitalocean I want to use this module

289
00:10:19,920 --> 00:10:21,600
and you see I didn't get very far and

290
00:10:21,600 --> 00:10:22,740
that's very intentional because you'll

291
00:10:22,740 --> 00:10:24,060
see why

292
00:10:24,060 --> 00:10:26,459
but essentially in here I have a little

293
00:10:26,459 --> 00:10:28,140
bit of logic being performed saying okay

294
00:10:28,140 --> 00:10:30,240
here's the instantiation of that module

295
00:10:30,240 --> 00:10:32,160
if I'm loading the source of modules

296
00:10:32,160 --> 00:10:34,440
agnostic server and I want it to be

297
00:10:34,440 --> 00:10:37,440
cloud provider AWS and server type http

298
00:10:37,440 --> 00:10:38,580
redirector

299
00:10:38,580 --> 00:10:40,920
then I can start to dynamically load the

300
00:10:40,920 --> 00:10:42,779
different Red Baron module based on what

301
00:10:42,779 --> 00:10:44,279
a user input

302
00:10:44,279 --> 00:10:46,920
and getting even a little deeper

303
00:10:46,920 --> 00:10:50,040
Cloud providers don't configure servers

304
00:10:50,040 --> 00:10:52,560
the same way given the same operating

305
00:10:52,560 --> 00:10:54,420
system so if you're deploying a system

306
00:10:54,420 --> 00:10:57,779
in AWS you can only ssh in so again I'm

307
00:10:57,779 --> 00:11:00,240
talking about Debian you can only ssh in

308
00:11:00,240 --> 00:11:02,760
as the user admin but if you're on

309
00:11:02,760 --> 00:11:05,399
digitalocean you can SSH into the user

310
00:11:05,399 --> 00:11:07,680
root right so now we have some more

311
00:11:07,680 --> 00:11:09,600
discrepancies that we need to fight uh

312
00:11:09,600 --> 00:11:10,920
based on the different Cloud providers

313
00:11:10,920 --> 00:11:13,560
and how they actually give you a server

314
00:11:13,560 --> 00:11:16,620
but as you see what we have here is we

315
00:11:16,620 --> 00:11:18,540
have this is the instantiation this is

316
00:11:18,540 --> 00:11:20,339
the module and again pay attention to

317
00:11:20,339 --> 00:11:21,660
line 19.

318
00:11:21,660 --> 00:11:24,480
because when you actually try to do this

319
00:11:24,480 --> 00:11:25,920
doesn't work

320
00:11:25,920 --> 00:11:28,500
what you see is terraform will yell at

321
00:11:28,500 --> 00:11:30,779
you it will say variables are not

322
00:11:30,779 --> 00:11:33,480
allowed on that line 19. you can't use

323
00:11:33,480 --> 00:11:35,640
variables in that source definition and

324
00:11:35,640 --> 00:11:37,680
of course I'm a red teamer right and I

325
00:11:37,680 --> 00:11:39,120
was looking at my teammates and I'm like

326
00:11:39,120 --> 00:11:41,160
haha I got you guys I'm a hacker I can

327
00:11:41,160 --> 00:11:42,600
bypass this

328
00:11:42,600 --> 00:11:44,399
and that's when the devastation kind of

329
00:11:44,399 --> 00:11:46,620
continued and I realized ah I can't do

330
00:11:46,620 --> 00:11:48,360
that because I went to the terraform

331
00:11:48,360 --> 00:11:50,640
GitHub and I saw that someone was asking

332
00:11:50,640 --> 00:11:52,620
for this exact same thing and one of the

333
00:11:52,620 --> 00:11:54,600
contributors came back and said that

334
00:11:54,600 --> 00:11:57,899
does not work you cannot do that

335
00:11:57,899 --> 00:12:00,180
this is where I had to extremely hard

336
00:12:00,180 --> 00:12:03,180
pivot because I did not have the tools

337
00:12:03,180 --> 00:12:05,600
that I needed to go build what I wanted

338
00:12:05,600 --> 00:12:08,339
given the current solution

339
00:12:08,339 --> 00:12:09,839
this is where I had to reframe the

340
00:12:09,839 --> 00:12:10,800
problem

341
00:12:10,800 --> 00:12:13,380
my problem stayed the same but I had to

342
00:12:13,380 --> 00:12:15,240
rethink about how I was looking at it

343
00:12:15,240 --> 00:12:18,420
and think what do I need to make sure

344
00:12:18,420 --> 00:12:21,540
that I can achieve my or my vision but

345
00:12:21,540 --> 00:12:23,880
maybe a different way

346
00:12:23,880 --> 00:12:25,440
so when you go back and look at the

347
00:12:25,440 --> 00:12:26,820
implementation that I was trying to

348
00:12:26,820 --> 00:12:30,680
build out we again have our server

349
00:12:30,680 --> 00:12:33,720
agnostic server module and if again look

350
00:12:33,720 --> 00:12:36,839
at 919 what I'm really trying to do is

351
00:12:36,839 --> 00:12:40,200
have a dynamic terraform files

352
00:12:40,200 --> 00:12:42,600
and that kind of draw drives where I

353
00:12:42,600 --> 00:12:44,880
started to go because I asked myself the

354
00:12:44,880 --> 00:12:47,940
question can I dynamically generate code

355
00:12:47,940 --> 00:12:50,459
and of course the the Personalities in

356
00:12:50,459 --> 00:12:52,680
me were then trying to like answer this

357
00:12:52,680 --> 00:12:54,480
question and yes it's weird to talk to

358
00:12:54,480 --> 00:12:55,980
myself I know my team makes fun of me

359
00:12:55,980 --> 00:12:57,180
all the time

360
00:12:57,180 --> 00:12:59,160
and the answer is yes it's called

361
00:12:59,160 --> 00:13:01,079
templating it was a totally New Concept

362
00:13:01,079 --> 00:13:03,120
to me I had not gone down into the world

363
00:13:03,120 --> 00:13:05,399
of templating before but this was kind

364
00:13:05,399 --> 00:13:07,500
of the Magic Bullet that I needed to

365
00:13:07,500 --> 00:13:09,420
achieve that question of can I

366
00:13:09,420 --> 00:13:12,420
dynamically create terraform files

367
00:13:12,420 --> 00:13:14,700
and for me I was really comfortable with

368
00:13:14,700 --> 00:13:17,459
python so that's where I started using a

369
00:13:17,459 --> 00:13:20,160
templating engine called Jinja so Jinja

370
00:13:20,160 --> 00:13:22,200
is a templating engine that's built into

371
00:13:22,200 --> 00:13:24,899
python it's a library and what that

372
00:13:24,899 --> 00:13:27,180
allows me to do is build one resource

373
00:13:27,180 --> 00:13:30,779
type for each cloud provider and then

374
00:13:30,779 --> 00:13:33,000
dynamically inject parameters using

375
00:13:33,000 --> 00:13:34,680
Python and the Jinja templating engine

376
00:13:34,680 --> 00:13:37,560
into that template right so this gives

377
00:13:37,560 --> 00:13:41,100
me way more control in Python than in

378
00:13:41,100 --> 00:13:42,600
something like HCL which is the

379
00:13:42,600 --> 00:13:44,700
programming language for terraform right

380
00:13:44,700 --> 00:13:46,740
so now I have way more flexibility and I

381
00:13:46,740 --> 00:13:48,240
have the power of python behind me

382
00:13:48,240 --> 00:13:50,220
rather than trying to hack Solutions

383
00:13:50,220 --> 00:13:52,380
together inside a terraform

384
00:13:52,380 --> 00:13:55,079
this is where I call it like the turning

385
00:13:55,079 --> 00:13:58,320
point for me because I now knew where

386
00:13:58,320 --> 00:14:00,480
where my new vision was going to go and

387
00:14:00,480 --> 00:14:02,519
where it was going to take me and this

388
00:14:02,519 --> 00:14:03,720
is where I'll introduce you to Terry

389
00:14:03,720 --> 00:14:06,360
this was the solution I came up with

390
00:14:06,360 --> 00:14:08,820
so my new vision had evolved from where

391
00:14:08,820 --> 00:14:10,980
it started and now I wanted a base

392
00:14:10,980 --> 00:14:13,139
template for each fundamental resource

393
00:14:13,139 --> 00:14:15,420
for each cloud provider so a server a

394
00:14:15,420 --> 00:14:18,839
DNS record an SSH key and maybe some

395
00:14:18,839 --> 00:14:20,220
other things that I can't think of at

396
00:14:20,220 --> 00:14:22,200
the moment and then I wanted a command

397
00:14:22,200 --> 00:14:24,120
line interface to render each template

398
00:14:24,120 --> 00:14:26,339
build the infrastructure with terraform

399
00:14:26,339 --> 00:14:28,500
map that state back to an ansible

400
00:14:28,500 --> 00:14:30,600
inventory and then run playbooks against

401
00:14:30,600 --> 00:14:32,339
each host so instead of doing all that

402
00:14:32,339 --> 00:14:34,680
remote exec provisioners and repeating

403
00:14:34,680 --> 00:14:36,420
that code across all the different Cloud

404
00:14:36,420 --> 00:14:38,579
providers I want to have one Playbook to

405
00:14:38,579 --> 00:14:40,380
go build the things and have me never

406
00:14:40,380 --> 00:14:42,600
have to touch it and then kind of the

407
00:14:42,600 --> 00:14:44,279
the cherry on top was I wanted to use

408
00:14:44,279 --> 00:14:46,260
Docker to deploy containers onto the

409
00:14:46,260 --> 00:14:48,720
hose that just work and I'll talk about

410
00:14:48,720 --> 00:14:50,399
that in a little bit so if you're a

411
00:14:50,399 --> 00:14:52,199
little lost I totally understand

412
00:14:52,199 --> 00:14:54,000
and from this new vision this is where

413
00:14:54,000 --> 00:14:55,860
Terry was born and this is a logo for

414
00:14:55,860 --> 00:14:57,300
Terry and here's the GitHub project so

415
00:14:57,300 --> 00:14:58,620
if you want to go check it out feel free

416
00:14:58,620 --> 00:14:59,699
to

417
00:14:59,699 --> 00:15:01,079
um there's a lot of development that I'm

418
00:15:01,079 --> 00:15:02,820
still doing on it but this is a good

419
00:15:02,820 --> 00:15:05,160
start for where I wanted to go

420
00:15:05,160 --> 00:15:08,579
so what the hell does Terry do

421
00:15:08,579 --> 00:15:10,980
the Terry is your command line interface

422
00:15:10,980 --> 00:15:13,199
what Terry will do is based on the

423
00:15:13,199 --> 00:15:14,699
arguments that you pass into the command

424
00:15:14,699 --> 00:15:16,500
line it will dynamically render some

425
00:15:16,500 --> 00:15:19,260
ginger templates which generate valid

426
00:15:19,260 --> 00:15:20,519
terraform code

427
00:15:20,519 --> 00:15:23,760
then Terry will do a terraform build so

428
00:15:23,760 --> 00:15:25,500
if you decided you wanted to build

429
00:15:25,500 --> 00:15:27,060
something Azure something in

430
00:15:27,060 --> 00:15:29,459
digitalocean something in AWS Terry will

431
00:15:29,459 --> 00:15:31,680
go build those things for you and then

432
00:15:31,680 --> 00:15:33,839
take that data from the terraform state

433
00:15:33,839 --> 00:15:35,699
so after you build it you hit all the

434
00:15:35,699 --> 00:15:38,160
cloud apis you now get a bunch of data

435
00:15:38,160 --> 00:15:40,680
back saying oh here's the things I built

436
00:15:40,680 --> 00:15:42,779
and then you can map that state back to

437
00:15:42,779 --> 00:15:45,240
ansible and then run someplace so

438
00:15:45,240 --> 00:15:47,579
total Baseline thing that I wanted to do

439
00:15:47,579 --> 00:15:49,980
was I wanted to set up some firewalls I

440
00:15:49,980 --> 00:15:52,079
wanted a provision user access I wanted

441
00:15:52,079 --> 00:15:54,060
to install some different tools I will

442
00:15:54,060 --> 00:15:56,639
talk about nebula that's a fun project I

443
00:15:56,639 --> 00:15:58,500
wanted to set up elastic logging which I

444
00:15:58,500 --> 00:16:00,120
will not talk about because that is a

445
00:16:00,120 --> 00:16:02,639
whole like day-long conversation

446
00:16:02,639 --> 00:16:05,279
and then deploy some containers right so

447
00:16:05,279 --> 00:16:07,440
this is the vision that I had but let's

448
00:16:07,440 --> 00:16:09,600
break it down because this is that's a

449
00:16:09,600 --> 00:16:11,339
lot right so let's kind of break it into

450
00:16:11,339 --> 00:16:12,660
little chunks where we can talk about

451
00:16:12,660 --> 00:16:13,920
each piece

452
00:16:13,920 --> 00:16:16,199
so let's first start talking about Terry

453
00:16:16,199 --> 00:16:17,820
rendering some ginger and doing some

454
00:16:17,820 --> 00:16:20,160
terraform build

455
00:16:20,160 --> 00:16:22,920
so the way I tackled this problem was I

456
00:16:22,920 --> 00:16:25,139
wanted to make every single thing into a

457
00:16:25,139 --> 00:16:26,880
configuration file so I didn't have to

458
00:16:26,880 --> 00:16:28,440
make any code changes

459
00:16:28,440 --> 00:16:30,360
but I also wanted to have all these

460
00:16:30,360 --> 00:16:32,339
resource templates kind of mapped out

461
00:16:32,339 --> 00:16:34,380
like I had or like we had in the Red

462
00:16:34,380 --> 00:16:36,120
Baron so you can look and see exactly

463
00:16:36,120 --> 00:16:38,399
what I have available to build

464
00:16:38,399 --> 00:16:40,560
so the terraform implementation looked

465
00:16:40,560 --> 00:16:41,279
like

466
00:16:41,279 --> 00:16:43,740
basically everything is in its own

467
00:16:43,740 --> 00:16:45,540
folder based on the cloud provider so if

468
00:16:45,540 --> 00:16:47,040
we're building a specific resource like

469
00:16:47,040 --> 00:16:49,440
a domain a server or an SSH key that

470
00:16:49,440 --> 00:16:52,079
would be inside of each uh each cloud

471
00:16:52,079 --> 00:16:54,060
provider folder and then I'd have a

472
00:16:54,060 --> 00:16:56,040
provider configuration to say okay if

473
00:16:56,040 --> 00:16:57,540
I'm using AWS

474
00:16:57,540 --> 00:17:00,060
I want to use this terraform dependency

475
00:17:00,060 --> 00:17:01,920
because you need to tell terraform that

476
00:17:01,920 --> 00:17:03,360
we're going to use these specific

477
00:17:03,360 --> 00:17:05,520
packages to build specific resources

478
00:17:05,520 --> 00:17:08,699
what version to load of that provider

479
00:17:08,699 --> 00:17:12,000
and then what credentials I needed to

480
00:17:12,000 --> 00:17:14,819
then interact with that API so for AWS

481
00:17:14,819 --> 00:17:17,280
you need specific Keys like the AWS

482
00:17:17,280 --> 00:17:19,980
access key ID the AWS secret access key

483
00:17:19,980 --> 00:17:22,500
and the AWS default region and there's

484
00:17:22,500 --> 00:17:23,880
some other pieces here that I'll talk

485
00:17:23,880 --> 00:17:26,280
about in a little bit but that was the

486
00:17:26,280 --> 00:17:27,959
General configuration

487
00:17:27,959 --> 00:17:30,360
with those two pieces of data

488
00:17:30,360 --> 00:17:32,340
I can now have a command line interface

489
00:17:32,340 --> 00:17:34,080
to wrap around all of those things and

490
00:17:34,080 --> 00:17:36,000
say if I'm building this type of

491
00:17:36,000 --> 00:17:37,980
resource using this cloud provider I

492
00:17:37,980 --> 00:17:39,720
want to render this template spit it out

493
00:17:39,720 --> 00:17:41,400
to a terraform plan now I have

494
00:17:41,400 --> 00:17:43,020
everything that I need to go build the

495
00:17:43,020 --> 00:17:45,539
resources that I've asked Terry to go

496
00:17:45,539 --> 00:17:48,080
build for me

497
00:17:48,240 --> 00:17:50,340
so now once you go build the resources

498
00:17:50,340 --> 00:17:52,559
you need some way to take that data back

499
00:17:52,559 --> 00:17:54,720
from terraform and map it to an ansible

500
00:17:54,720 --> 00:17:57,059
State and or ansible inventory and run

501
00:17:57,059 --> 00:17:59,039
some plays so what did that look like

502
00:17:59,039 --> 00:18:01,140
that again goes back to my provider

503
00:18:01,140 --> 00:18:03,360
configuration earlier so inside of the

504
00:18:03,360 --> 00:18:05,160
provider configuration I now have a

505
00:18:05,160 --> 00:18:08,039
block for servers and because each cloud

506
00:18:08,039 --> 00:18:10,020
provider when you're actually building

507
00:18:10,020 --> 00:18:11,880
things in terraform they have totally

508
00:18:11,880 --> 00:18:13,500
different nomenclatures for the exact

509
00:18:13,500 --> 00:18:15,840
same pieces of data and I wanted some

510
00:18:15,840 --> 00:18:18,480
way programmatically to go through a

511
00:18:18,480 --> 00:18:20,460
terraform state for each provider and

512
00:18:20,460 --> 00:18:22,860
say Here's the data I need given this

513
00:18:22,860 --> 00:18:24,840
data point I'm looking for so when we're

514
00:18:24,840 --> 00:18:27,240
talking about a server in AWS that

515
00:18:27,240 --> 00:18:29,160
reference or that data point inside of

516
00:18:29,160 --> 00:18:32,039
the Json of the terraform state is AWS

517
00:18:32,039 --> 00:18:34,320
instance and the remote user that I can

518
00:18:34,320 --> 00:18:38,400
sign in as is admin for AWS and to get

519
00:18:38,400 --> 00:18:42,179
the public ipv4 address from AWS it's

520
00:18:42,179 --> 00:18:44,580
public underscore IP and that changes

521
00:18:44,580 --> 00:18:46,740
across across each cloud provider but I

522
00:18:46,740 --> 00:18:49,520
needed a way to basically say to Terry

523
00:18:49,520 --> 00:18:52,200
if we're using this provider go look for

524
00:18:52,200 --> 00:18:54,120
this data in the terraform state map

525
00:18:54,120 --> 00:18:55,919
that data back to ansible inventory so

526
00:18:55,919 --> 00:18:57,600
now I can run some plays against it

527
00:18:57,600 --> 00:18:59,520
great

528
00:18:59,520 --> 00:19:01,320
now

529
00:19:01,320 --> 00:19:03,840
have a valid ansible inventory

530
00:19:03,840 --> 00:19:06,600
have all the resources built but I need

531
00:19:06,600 --> 00:19:09,299
to run some plays against it and

532
00:19:09,299 --> 00:19:12,120
actually do the things to configure a a

533
00:19:12,120 --> 00:19:15,000
piece of software on the system based on

534
00:19:15,000 --> 00:19:16,860
what definition I have in the CLI or

535
00:19:16,860 --> 00:19:19,020
maybe in my config file

536
00:19:19,020 --> 00:19:21,240
so I started off with okay let's just

537
00:19:21,240 --> 00:19:24,299
talk about literal base configuration

538
00:19:24,299 --> 00:19:26,640
and then I can then Target different

539
00:19:26,640 --> 00:19:29,760
host groups that I have inside uh that I

540
00:19:29,760 --> 00:19:32,520
have defined via the CLI and Target

541
00:19:32,520 --> 00:19:34,140
those different host groups to then

542
00:19:34,140 --> 00:19:36,299
install different software based on the

543
00:19:36,299 --> 00:19:39,000
needs of that specific resource so

544
00:19:39,000 --> 00:19:41,039
talking about literally just prepping a

545
00:19:41,039 --> 00:19:43,260
baseline server I might want to create

546
00:19:43,260 --> 00:19:45,480
user accounts as defined in some sort of

547
00:19:45,480 --> 00:19:48,780
config file allow SSH key auth disable

548
00:19:48,780 --> 00:19:50,640
password auth because I want I care

549
00:19:50,640 --> 00:19:51,960
about offset

550
00:19:51,960 --> 00:19:55,440
uh install a host based firewall ufw and

551
00:19:55,440 --> 00:19:59,280
deny all traffic except for 22 TCP from

552
00:19:59,280 --> 00:20:01,980
the red team public IP addresses and

553
00:20:01,980 --> 00:20:03,900
that's important because I didn't want

554
00:20:03,900 --> 00:20:05,700
to lean on any firewall implementation

555
00:20:05,700 --> 00:20:07,740
of any cloud provider so AWS we have

556
00:20:07,740 --> 00:20:09,780
this concept of security groups but if

557
00:20:09,780 --> 00:20:11,940
I'm deploying cross-cloud now I have to

558
00:20:11,940 --> 00:20:13,860
manage all these different types of

559
00:20:13,860 --> 00:20:15,780
firewall implementations across all the

560
00:20:15,780 --> 00:20:17,820
clouds but if I do a host based firewall

561
00:20:17,820 --> 00:20:19,320
I can do everything on the host and not

562
00:20:19,320 --> 00:20:21,120
have to worry about it

563
00:20:21,120 --> 00:20:24,179
and then if I have it configured I can

564
00:20:24,179 --> 00:20:25,740
install something like nebula I'll talk

565
00:20:25,740 --> 00:20:27,600
about that and then install filebeat

566
00:20:27,600 --> 00:20:30,960
that is my elastic stack logging

567
00:20:30,960 --> 00:20:33,720
structure and that I won't get into but

568
00:20:33,720 --> 00:20:35,400
there there are other ways that you can

569
00:20:35,400 --> 00:20:37,080
kind of research that and see exactly

570
00:20:37,080 --> 00:20:39,660
how that implementation is done

571
00:20:39,660 --> 00:20:41,520
then I started asking myself the

572
00:20:41,520 --> 00:20:42,660
question

573
00:20:42,660 --> 00:20:46,380
what if I want to install a very custom

574
00:20:46,380 --> 00:20:49,260
type of software on the server but I had

575
00:20:49,260 --> 00:20:51,299
maybe conflicting dependencies maybe

576
00:20:51,299 --> 00:20:54,240
Port collisions so let's say I have a

577
00:20:54,240 --> 00:20:56,460
https server and I want to install

578
00:20:56,460 --> 00:20:59,880
Cobalt strike now we're having resources

579
00:20:59,880 --> 00:21:02,400
trying to be hogged by different

580
00:21:02,400 --> 00:21:04,919
software so Cobalt strike might be

581
00:21:04,919 --> 00:21:07,200
looking for 443 apache's looking for

582
00:21:07,200 --> 00:21:10,860
443. so now I started asking myself how

583
00:21:10,860 --> 00:21:12,960
can I manage installable software using

584
00:21:12,960 --> 00:21:14,880
a single config file and get some more

585
00:21:14,880 --> 00:21:17,960
flexibility from that

586
00:21:18,120 --> 00:21:20,580
and that's where I then answer my

587
00:21:20,580 --> 00:21:22,919
question of yes I can it's called Docker

588
00:21:22,919 --> 00:21:25,080
and Docker compose and this again was a

589
00:21:25,080 --> 00:21:26,520
totally New Concept to me so don't

590
00:21:26,520 --> 00:21:28,320
butcher me if all the implementation is

591
00:21:28,320 --> 00:21:30,720
wrong however it works for us and I know

592
00:21:30,720 --> 00:21:32,520
that the understanding of Docker and

593
00:21:32,520 --> 00:21:34,500
Docker composes sound for the use case

594
00:21:34,500 --> 00:21:35,880
that I'm looking for

595
00:21:35,880 --> 00:21:37,260
so if you're not familiar with Docker

596
00:21:37,260 --> 00:21:38,880
and Docker compose let me talk to it a

597
00:21:38,880 --> 00:21:39,659
little bit

598
00:21:39,659 --> 00:21:41,580
so Docker is a software that allows you

599
00:21:41,580 --> 00:21:43,320
to build software packages into

600
00:21:43,320 --> 00:21:45,900
standardized units called containers

601
00:21:45,900 --> 00:21:48,900
doing so allows you for a build once Run

602
00:21:48,900 --> 00:21:51,419
Anywhere mindset and containers will run

603
00:21:51,419 --> 00:21:53,220
the exact same way no matter where

604
00:21:53,220 --> 00:21:54,840
they're deployed right so now I don't

605
00:21:54,840 --> 00:21:57,000
have to worry about oh will Cobalt

606
00:21:57,000 --> 00:21:59,640
strike run in AWS or will Cobalt strike

607
00:21:59,640 --> 00:22:02,520
run on Debian 11 in AWS or will it have

608
00:22:02,520 --> 00:22:05,580
some issues versus digitalocean

609
00:22:05,580 --> 00:22:07,200
etc etc

610
00:22:07,200 --> 00:22:09,419
and then on top of that Docker composes

611
00:22:09,419 --> 00:22:11,700
a tool for defining and running multiple

612
00:22:11,700 --> 00:22:13,380
containers and you're able to turn

613
00:22:13,380 --> 00:22:16,020
really complex Docker composed or Docker

614
00:22:16,020 --> 00:22:18,900
commands into a configuration file and

615
00:22:18,900 --> 00:22:21,240
then use one single Docker command to go

616
00:22:21,240 --> 00:22:23,280
build all of the things

617
00:22:23,280 --> 00:22:25,260
and all your configuration is inside of

618
00:22:25,260 --> 00:22:27,360
a Docker combos file right anytime we

619
00:22:27,360 --> 00:22:30,120
can take a really complex command and

620
00:22:30,120 --> 00:22:32,220
turn it into a config file we're happy

621
00:22:32,220 --> 00:22:33,900
right

622
00:22:33,900 --> 00:22:35,640
and I'm not going to dive into how

623
00:22:35,640 --> 00:22:37,740
exactly we do this I will dive into the

624
00:22:37,740 --> 00:22:39,600
implementation that I use inside of

625
00:22:39,600 --> 00:22:41,220
Terry but I won't talk about how you

626
00:22:41,220 --> 00:22:43,020
build containers and how you build a CI

627
00:22:43,020 --> 00:22:44,760
CD pipeline for containers however I

628
00:22:44,760 --> 00:22:46,559
will give you the subtle plug I do have

629
00:22:46,559 --> 00:22:47,880
a Blog and if you're ever interested in

630
00:22:47,880 --> 00:22:49,980
taking the dive of why I need to

631
00:22:49,980 --> 00:22:52,380
containerize if I'm a red team why is it

632
00:22:52,380 --> 00:22:54,059
valuable for me to containerize you can

633
00:22:54,059 --> 00:22:55,559
go check out my blog I have a series

634
00:22:55,559 --> 00:22:57,299
where I'm talking exactly about those

635
00:22:57,299 --> 00:22:59,700
things and how you can even build CI CD

636
00:22:59,700 --> 00:23:02,280
pipeline for your container images so

637
00:23:02,280 --> 00:23:03,960
now you just have container images that

638
00:23:03,960 --> 00:23:05,760
work and if your team if anyone new

639
00:23:05,760 --> 00:23:07,799
comes on board and you're saying go play

640
00:23:07,799 --> 00:23:09,360
around with Cobalt strike I'm sure that

641
00:23:09,360 --> 00:23:11,220
you've told your team anyone new into

642
00:23:11,220 --> 00:23:13,020
red team and go play with Cobalt strike

643
00:23:13,020 --> 00:23:14,400
now they don't have to fight with

644
00:23:14,400 --> 00:23:15,960
dependencies they don't have to fight

645
00:23:15,960 --> 00:23:17,820
with installing stuff they just go pull

646
00:23:17,820 --> 00:23:19,640
down a container image and it runs

647
00:23:19,640 --> 00:23:21,960
everyone's happy

648
00:23:21,960 --> 00:23:24,299
cool so back to Terry

649
00:23:24,299 --> 00:23:26,700
so what Docker and Docker compose now

650
00:23:26,700 --> 00:23:29,820
allows us to do is the original Docker

651
00:23:29,820 --> 00:23:31,860
command to spin up something like demo

652
00:23:31,860 --> 00:23:33,840
C2 which is a C2 framework that we've

653
00:23:33,840 --> 00:23:35,940
used against Mac OS

654
00:23:35,940 --> 00:23:39,360
is we take this really complex Docker

655
00:23:39,360 --> 00:23:40,980
run command

656
00:23:40,980 --> 00:23:42,840
and then we can convert it into a config

657
00:23:42,840 --> 00:23:45,720
file and now we use one single command

658
00:23:45,720 --> 00:23:47,880
to basically no matter what we have in

659
00:23:47,880 --> 00:23:49,980
this config file we use one command to

660
00:23:49,980 --> 00:23:51,659
deploy all the things

661
00:23:51,659 --> 00:23:53,700
and that's great

662
00:23:53,700 --> 00:23:55,559
so then how I implemented that with

663
00:23:55,559 --> 00:23:58,080
Docker compos and Terry is we now have a

664
00:23:58,080 --> 00:24:00,179
way to deploy multiple containers onto a

665
00:24:00,179 --> 00:24:02,159
server using a single config file onto

666
00:24:02,159 --> 00:24:05,039
our servers but not to mention we have

667
00:24:05,039 --> 00:24:07,320
an extra added benefit here now we have

668
00:24:07,320 --> 00:24:09,600
the port mappings because we're telling

669
00:24:09,600 --> 00:24:11,820
in the config file exactly what port

670
00:24:11,820 --> 00:24:14,159
city do we expose I can go look at that

671
00:24:14,159 --> 00:24:16,200
Docker compose and say oh look I have

672
00:24:16,200 --> 00:24:18,419
443 open I probably need to open that up

673
00:24:18,419 --> 00:24:19,500
to my team

674
00:24:19,500 --> 00:24:21,780
right that gives me a lot of power so I

675
00:24:21,780 --> 00:24:23,820
can now programmatically set the host

676
00:24:23,820 --> 00:24:25,799
based firewall based on the docker

677
00:24:25,799 --> 00:24:27,960
compose file that gives me a lot of

678
00:24:27,960 --> 00:24:29,880
awesome benefit

679
00:24:29,880 --> 00:24:32,520
so what that looks like in practice is

680
00:24:32,520 --> 00:24:34,799
Terry can now have a master Docker

681
00:24:34,799 --> 00:24:36,299
compose file with all possible

682
00:24:36,299 --> 00:24:38,100
containers that we can deploy and then

683
00:24:38,100 --> 00:24:40,320
in the CLI I can programmatically parse

684
00:24:40,320 --> 00:24:43,020
that Docker compose and say oh well I

685
00:24:43,020 --> 00:24:44,700
see Cobalt strike that's probably an

686
00:24:44,700 --> 00:24:46,919
option that I want to expose the user as

687
00:24:46,919 --> 00:24:49,380
a argument they can pass in

688
00:24:49,380 --> 00:24:50,820
now this is where I'm going to ask

689
00:24:50,820 --> 00:24:52,559
someone in the audience to help me

690
00:24:52,559 --> 00:24:54,659
understand what is wrong with this

691
00:24:54,659 --> 00:24:56,820
picture because there is something wrong

692
00:24:56,820 --> 00:24:59,580
if this is my config file for all of

693
00:24:59,580 --> 00:25:00,659
Terry

694
00:25:00,659 --> 00:25:02,820
for every single thing that gets

695
00:25:02,820 --> 00:25:03,960
deployed

696
00:25:03,960 --> 00:25:05,580
and I know that this is probably an edge

697
00:25:05,580 --> 00:25:07,260
case for some of you red teamers but

698
00:25:07,260 --> 00:25:09,780
when you deploy Cobalt strike you need

699
00:25:09,780 --> 00:25:12,299
to pass in runtime arguments into the

700
00:25:12,299 --> 00:25:15,179
team server to make it configured to run

701
00:25:15,179 --> 00:25:16,559
a certain way

702
00:25:16,559 --> 00:25:18,780
so what's wrong with this as a config

703
00:25:18,780 --> 00:25:22,879
file for Terry can anyone answer that

704
00:25:23,760 --> 00:25:27,140
there are prizes on the line

705
00:25:33,120 --> 00:25:35,239
thank you

706
00:25:38,880 --> 00:25:40,340
exactly

707
00:25:40,340 --> 00:25:43,200
that and this IP address

708
00:25:43,200 --> 00:25:45,840
right the container and what kind of

709
00:25:45,840 --> 00:25:48,320
prize do you want

710
00:25:48,480 --> 00:25:51,240
lock pick set

711
00:25:51,240 --> 00:25:53,400
thank you

712
00:25:53,400 --> 00:25:55,980
but you're exactly right we have runtime

713
00:25:55,980 --> 00:25:58,140
arguments that are going to change based

714
00:25:58,140 --> 00:26:00,000
on where you are and we don't

715
00:26:00,000 --> 00:26:02,100
necessarily want to have a hard-coded

716
00:26:02,100 --> 00:26:03,539
password because we care about

717
00:26:03,539 --> 00:26:07,380
operational security and this 8.8.8.8

718
00:26:07,380 --> 00:26:10,320
that is a IP address that is used inside

719
00:26:10,320 --> 00:26:12,179
of cobalt strike to say exactly where

720
00:26:12,179 --> 00:26:13,980
the team server lives we do not want

721
00:26:13,980 --> 00:26:15,419
that hard coded either and if we're

722
00:26:15,419 --> 00:26:16,740
deploying it in a container the

723
00:26:16,740 --> 00:26:18,419
container IP address is going to be

724
00:26:18,419 --> 00:26:20,279
different than the host IP address and

725
00:26:20,279 --> 00:26:22,440
that's really important

726
00:26:22,440 --> 00:26:25,080
so the realization here is we're hard

727
00:26:25,080 --> 00:26:27,120
coding credentials we're hard coding

728
00:26:27,120 --> 00:26:29,400
runtime arguments but we don't want to

729
00:26:29,400 --> 00:26:31,260
do that because this is a master config

730
00:26:31,260 --> 00:26:33,600
file for all of my deployments ever I

731
00:26:33,600 --> 00:26:35,940
don't want to hard code that stuff

732
00:26:35,940 --> 00:26:37,559
and this is where I don't know if anyone

733
00:26:37,559 --> 00:26:39,480
can see where I'm going with this but

734
00:26:39,480 --> 00:26:41,520
we've already gone into a topic that we

735
00:26:41,520 --> 00:26:43,320
can reuse here

736
00:26:43,320 --> 00:26:44,640
templating

737
00:26:44,640 --> 00:26:47,419
there you go and inside of ansible

738
00:26:47,419 --> 00:26:50,400
Ginger is already baked in so now we

739
00:26:50,400 --> 00:26:51,779
already have a love story like we have

740
00:26:51,779 --> 00:26:54,000
ansible that already uses Ginger now I

741
00:26:54,000 --> 00:26:55,620
can basically take all the core

742
00:26:55,620 --> 00:26:58,020
functionality of ansible and put ginger

743
00:26:58,020 --> 00:27:00,240
templating inside of my master Docker

744
00:27:00,240 --> 00:27:02,880
compose and then basically just

745
00:27:02,880 --> 00:27:04,559
dynamically render those templates and

746
00:27:04,559 --> 00:27:06,840
then deploy them to servers

747
00:27:06,840 --> 00:27:09,360
and this is great

748
00:27:09,360 --> 00:27:11,340
but I'm curious does anyone know the

749
00:27:11,340 --> 00:27:14,039
problem with this we have one single

750
00:27:14,039 --> 00:27:16,200
Docker compose file with all of my

751
00:27:16,200 --> 00:27:18,539
possible Deployable containers but a

752
00:27:18,539 --> 00:27:21,059
user might only want to deploy a select

753
00:27:21,059 --> 00:27:22,799
number of containers

754
00:27:22,799 --> 00:27:25,080
if anyone has used ansible or ginger in

755
00:27:25,080 --> 00:27:27,120
the past you know the issue with this

756
00:27:27,120 --> 00:27:30,199
can anyone answer that

757
00:27:33,179 --> 00:27:35,220
okay

758
00:27:35,220 --> 00:27:38,460
this is where the breakup story comes in

759
00:27:38,460 --> 00:27:40,740
if we're not deploying Cobalt strike to

760
00:27:40,740 --> 00:27:42,600
a server but we're trying to render this

761
00:27:42,600 --> 00:27:44,520
template

762
00:27:44,520 --> 00:27:46,260
ansible's still going to read in that

763
00:27:46,260 --> 00:27:48,299
template and say oh Cobalt strike

764
00:27:48,299 --> 00:27:50,400
password I want to Define I want to

765
00:27:50,400 --> 00:27:52,080
instantiate this

766
00:27:52,080 --> 00:27:53,820
but what's that what if that's undefined

767
00:27:53,820 --> 00:27:56,880
what if I'm not deploying Cobalt strike

768
00:27:56,880 --> 00:27:58,380
I'll give you a spoiler ansible gets

769
00:27:58,380 --> 00:28:00,600
pissed

770
00:28:00,600 --> 00:28:03,240
ansible will just yell at you it will

771
00:28:03,240 --> 00:28:05,039
not care that you don't want to deploy

772
00:28:05,039 --> 00:28:07,380
Cobalt strike it will just say you're an

773
00:28:07,380 --> 00:28:09,179
idiot you don't know how to develop get

774
00:28:09,179 --> 00:28:10,380
out

775
00:28:10,380 --> 00:28:13,799
but again Deja Vu I'm a hacker I can

776
00:28:13,799 --> 00:28:15,720
bypass this I can figure out a different

777
00:28:15,720 --> 00:28:17,700
way and I can rekindle that love between

778
00:28:17,700 --> 00:28:20,460
Jinja and ansible again and instead of

779
00:28:20,460 --> 00:28:23,940
using that valid Ginger syntax why not

780
00:28:23,940 --> 00:28:26,400
use my own custom syntax

781
00:28:26,400 --> 00:28:29,039
and then parse through basic based on

782
00:28:29,039 --> 00:28:30,779
what the user told me the containers

783
00:28:30,779 --> 00:28:32,520
they want to deploy are

784
00:28:32,520 --> 00:28:34,500
parse through the docker compose only

785
00:28:34,500 --> 00:28:36,720
collect those pieces write those out to

786
00:28:36,720 --> 00:28:39,480
disk use some regex to parse through the

787
00:28:39,480 --> 00:28:41,279
custom templating syntax that I had

788
00:28:41,279 --> 00:28:43,380
built and then re-import it back into

789
00:28:43,380 --> 00:28:46,320
ansible that way I know for a fact I

790
00:28:46,320 --> 00:28:49,020
only have the container inside being

791
00:28:49,020 --> 00:28:51,720
rendered with valid Ginger that I really

792
00:28:51,720 --> 00:28:53,700
care about so if you get yelled at at

793
00:28:53,700 --> 00:28:55,320
that point I hate to say it but again

794
00:28:55,320 --> 00:28:57,000
play stupid games Win stupid prizes

795
00:28:57,000 --> 00:28:59,820
trust me I've done it so many times I'm

796
00:28:59,820 --> 00:29:01,620
at fault for this

797
00:29:01,620 --> 00:29:03,779
but so what this looks like now that we

798
00:29:03,779 --> 00:29:06,059
have this kind of custom templating

799
00:29:06,059 --> 00:29:08,640
syntax which essentially so Ginger is

800
00:29:08,640 --> 00:29:11,460
curly brace curly brace here now we have

801
00:29:11,460 --> 00:29:13,380
square bracket square bracket

802
00:29:13,380 --> 00:29:16,080
so what that looks like is inside of our

803
00:29:16,080 --> 00:29:18,240
Master Docker compose we have this

804
00:29:18,240 --> 00:29:19,980
square bracket square bracket for all of

805
00:29:19,980 --> 00:29:22,559
our valid Ginger syntax

806
00:29:22,559 --> 00:29:24,960
and then if Cobalt strike is configured

807
00:29:24,960 --> 00:29:27,179
for that server or if certain C2 is

808
00:29:27,179 --> 00:29:29,340
configured for that server we can modify

809
00:29:29,340 --> 00:29:31,980
the template syntax using regex and

810
00:29:31,980 --> 00:29:33,480
re-import that we can do that all inside

811
00:29:33,480 --> 00:29:35,460
of ansible

812
00:29:35,460 --> 00:29:37,860
this is super cool this gives us a lot

813
00:29:37,860 --> 00:29:40,140
of awesome functionality that gives us a

814
00:29:40,140 --> 00:29:41,880
lot of flexibility to how we want to

815
00:29:41,880 --> 00:29:43,620
build all of our red team infrastructure

816
00:29:43,620 --> 00:29:45,179
pipeline

817
00:29:45,179 --> 00:29:47,299
but again as you pointed out earlier

818
00:29:47,299 --> 00:29:49,740
what about those containers that need

819
00:29:49,740 --> 00:29:52,980
specific files or commands to run

820
00:29:52,980 --> 00:29:56,100
and yes I'm looking at you Cobalt strike

821
00:29:56,100 --> 00:29:58,440
can anyone I think you kind of already

822
00:29:58,440 --> 00:30:00,360
answered it but can anyone else in the

823
00:30:00,360 --> 00:30:02,700
crowd answer to me

824
00:30:02,700 --> 00:30:06,500
like how we might do that

825
00:30:10,580 --> 00:30:14,720
a script file located

826
00:30:19,159 --> 00:30:22,679
yes you could do that that not exactly

827
00:30:22,679 --> 00:30:24,899
the approach I had but

828
00:30:24,899 --> 00:30:27,480
I'll give you a point for it anyway

829
00:30:27,480 --> 00:30:30,799
you get to pick which one you want

830
00:30:33,840 --> 00:30:37,080
so yes exactly that I went about it a

831
00:30:37,080 --> 00:30:39,000
different way but you can do it that way

832
00:30:39,000 --> 00:30:41,880
too so what I decided to add inside of

833
00:30:41,880 --> 00:30:43,679
this master Docker compose that I

834
00:30:43,679 --> 00:30:46,020
already have is add an arbitrary block

835
00:30:46,020 --> 00:30:47,760
for pre-run commands and post run

836
00:30:47,760 --> 00:30:50,820
commands so some containers based on

837
00:30:50,820 --> 00:30:52,919
what you're dealing with might need you

838
00:30:52,919 --> 00:30:54,419
to run commands before the container

839
00:30:54,419 --> 00:30:57,179
boots and then after the container boots

840
00:30:57,179 --> 00:30:58,860
so I'll give you the example of sliver

841
00:30:58,860 --> 00:31:02,039
C2 sliver C2 if you want people to be

842
00:31:02,039 --> 00:31:04,080
able to connect to the container you

843
00:31:04,080 --> 00:31:05,760
need to first start the container or

844
00:31:05,760 --> 00:31:07,440
first start sliver and then you need to

845
00:31:07,440 --> 00:31:09,000
generate the config so that all the

846
00:31:09,000 --> 00:31:11,460
users can can connect to it because all

847
00:31:11,460 --> 00:31:13,440
of the keys generated for the configs

848
00:31:13,440 --> 00:31:16,020
are dependent on sliver already being

849
00:31:16,020 --> 00:31:17,520
started

850
00:31:17,520 --> 00:31:21,120
so now within this custom Terry Docker

851
00:31:21,120 --> 00:31:22,740
compose we have this pre-run commands

852
00:31:22,740 --> 00:31:25,020
and post run commands blocks these

853
00:31:25,020 --> 00:31:27,960
blocks contain valid ansible tasks that

854
00:31:27,960 --> 00:31:30,600
are run pre and post container start and

855
00:31:30,600 --> 00:31:32,820
they too contain that escaped Ginger

856
00:31:32,820 --> 00:31:34,919
syntax that we talked about earlier so

857
00:31:34,919 --> 00:31:37,380
we know that only the defined things

858
00:31:37,380 --> 00:31:41,720
will be rendered at time of import

859
00:31:42,419 --> 00:31:45,000
now this is probably for a bit more of

860
00:31:45,000 --> 00:31:47,779
an edge case

861
00:31:48,120 --> 00:31:51,539
but how can I connect all of my

862
00:31:51,539 --> 00:31:53,880
infrastructure together when not all of

863
00:31:53,880 --> 00:31:56,520
it is directly connected to the internet

864
00:31:56,520 --> 00:31:58,380
so if you remember back to my initial

865
00:31:58,380 --> 00:32:00,000
kind of dream state

866
00:32:00,000 --> 00:32:02,100
I showed you that there's a server in a

867
00:32:02,100 --> 00:32:04,080
private Network and that server in the

868
00:32:04,080 --> 00:32:05,640
private Network I wanted to be able to

869
00:32:05,640 --> 00:32:08,580
communicate with my HTTP redirectors but

870
00:32:08,580 --> 00:32:10,080
I don't know how to route to it and I

871
00:32:10,080 --> 00:32:12,059
don't want to manage all of my port

872
00:32:12,059 --> 00:32:14,100
forward rules at the firewall I just

873
00:32:14,100 --> 00:32:15,480
want things to work

874
00:32:15,480 --> 00:32:16,740
and this is for some of you

875
00:32:16,740 --> 00:32:18,659
overachieving teams that might have a

876
00:32:18,659 --> 00:32:21,059
dedicated lab environment who are really

877
00:32:21,059 --> 00:32:22,440
kind of crazy about controlling their

878
00:32:22,440 --> 00:32:24,240
infrastructure and this was the bucket I

879
00:32:24,240 --> 00:32:25,620
found myself in

880
00:32:25,620 --> 00:32:27,539
this is where I wanted to control all

881
00:32:27,539 --> 00:32:30,120
the traffic that's going to my servers

882
00:32:30,120 --> 00:32:32,279
even things that are in a private

883
00:32:32,279 --> 00:32:33,539
Network

884
00:32:33,539 --> 00:32:35,039
this is where

885
00:32:35,039 --> 00:32:37,380
earlier I talked about installing a tool

886
00:32:37,380 --> 00:32:39,299
called nebula and this is where I'll

887
00:32:39,299 --> 00:32:42,240
talk about nebula so nebula is a slack

888
00:32:42,240 --> 00:32:44,340
developed so the team over at slack came

889
00:32:44,340 --> 00:32:47,520
up with this this solution and it's a

890
00:32:47,520 --> 00:32:49,919
mesh VPN solution that uses the same

891
00:32:49,919 --> 00:32:52,080
protocol as wire guard it's basically a

892
00:32:52,080 --> 00:32:54,179
software-defined network and there's a

893
00:32:54,179 --> 00:32:55,559
lot of different solutions out there

894
00:32:55,559 --> 00:32:57,059
that you might have heard of like tail

895
00:32:57,059 --> 00:32:58,679
scale that'll do the exact same thing

896
00:32:58,679 --> 00:33:01,200
but nebula fit the use case for me the

897
00:33:01,200 --> 00:33:02,039
best

898
00:33:02,039 --> 00:33:04,320
and what nebula allows for me to do is

899
00:33:04,320 --> 00:33:05,640
nap punching

900
00:33:05,640 --> 00:33:08,399
so even firewall resources inside your

901
00:33:08,399 --> 00:33:11,279
private Network can be directly reached

902
00:33:11,279 --> 00:33:13,320
from the internet if connected to the

903
00:33:13,320 --> 00:33:16,860
mesh so now I have my server sitting in

904
00:33:16,860 --> 00:33:19,559
a lab closet back in Cincinnati Ohio

905
00:33:19,559 --> 00:33:21,720
that's able to connect back to all of my

906
00:33:21,720 --> 00:33:23,159
infrastructure that might be sitting in

907
00:33:23,159 --> 00:33:26,700
AWS across a VPN tunnel and this is

908
00:33:26,700 --> 00:33:29,519
great because this also makes sure if

909
00:33:29,519 --> 00:33:31,019
any of my traffic going from

910
00:33:31,019 --> 00:33:34,019
digitalocean to AWS or maybe back to my

911
00:33:34,019 --> 00:33:36,240
private cluster none of the clouds see

912
00:33:36,240 --> 00:33:38,159
exactly what traffic is going across

913
00:33:38,159 --> 00:33:40,559
that that Network they only see the

914
00:33:40,559 --> 00:33:43,140
things that come in from my implants and

915
00:33:43,140 --> 00:33:44,580
that's great

916
00:33:44,580 --> 00:33:47,039
so what this actually looks like is when

917
00:33:47,039 --> 00:33:49,260
we study the astronomy I mean nebula you

918
00:33:49,260 --> 00:33:53,100
see the HTTP reverse proxy has a direct

919
00:33:53,100 --> 00:33:55,080
internet connection so it has a routable

920
00:33:55,080 --> 00:33:56,820
public ipv4

921
00:33:56,820 --> 00:33:58,620
then it connects to a nebula Lighthouse

922
00:33:58,620 --> 00:34:01,200
think about that as your router

923
00:34:01,200 --> 00:34:02,820
and that also has a direct internet

924
00:34:02,820 --> 00:34:04,919
connection and then I have my C2 server

925
00:34:04,919 --> 00:34:06,840
sitting in a private Network that C2

926
00:34:06,840 --> 00:34:08,699
server will initiate the connection

927
00:34:08,699 --> 00:34:11,699
outbound to my nebula Lighthouse when it

928
00:34:11,699 --> 00:34:13,139
establishes that connection it's a

929
00:34:13,139 --> 00:34:14,820
persistent connection so now I can

930
00:34:14,820 --> 00:34:17,520
funnel traffic through from my https

931
00:34:17,520 --> 00:34:20,040
reverse proxy to a private IP address

932
00:34:20,040 --> 00:34:22,080
that routes everything through the mesh

933
00:34:22,080 --> 00:34:23,399
I don't have to worry about anything

934
00:34:23,399 --> 00:34:25,800
being connected it just works so it

935
00:34:25,800 --> 00:34:27,239
seems like I'm sitting almost on the

936
00:34:27,239 --> 00:34:30,000
same exact Lan as that C2 server even

937
00:34:30,000 --> 00:34:32,699
though we could be four different clouds

938
00:34:32,699 --> 00:34:35,280
away right and that gives us a lot of

939
00:34:35,280 --> 00:34:38,300
really cool functionality

940
00:34:38,460 --> 00:34:41,820
okay that was a lot of me talking about

941
00:34:41,820 --> 00:34:45,060
exactly what the hell this is

942
00:34:45,060 --> 00:34:48,060
uh so let's talk more about kind of what

943
00:34:48,060 --> 00:34:49,918
what the solution is what does it

944
00:34:49,918 --> 00:34:51,418
actually look like

945
00:34:51,418 --> 00:34:53,639
because I just talked about Concepts but

946
00:34:53,639 --> 00:34:56,099
I didn't talk about the actual tool

947
00:34:56,099 --> 00:34:57,660
so going back to this architecture

948
00:34:57,660 --> 00:34:59,040
diagram

949
00:34:59,040 --> 00:35:01,380
this is the Baseline this is the vision

950
00:35:01,380 --> 00:35:03,720
that I had for a tool I wanted something

951
00:35:03,720 --> 00:35:06,000
that could do this

952
00:35:06,000 --> 00:35:07,560
without having to think about the

953
00:35:07,560 --> 00:35:08,640
complexity

954
00:35:08,640 --> 00:35:10,800
and can anyone tell me who might have

955
00:35:10,800 --> 00:35:13,020
done all of their different like played

956
00:35:13,020 --> 00:35:14,280
with different clouds played with

957
00:35:14,280 --> 00:35:15,960
different operating systems played with

958
00:35:15,960 --> 00:35:18,240
all the things how long do you think and

959
00:35:18,240 --> 00:35:20,820
I'll give you one of the prizes for it

960
00:35:20,820 --> 00:35:23,220
how long would it take you to manually

961
00:35:23,220 --> 00:35:26,520
go install everything here with all the

962
00:35:26,520 --> 00:35:29,720
things listed on the diagram

963
00:35:32,700 --> 00:35:36,500
way too long I love that answer

964
00:35:37,500 --> 00:35:39,900
and remember we're lazy we like to be

965
00:35:39,900 --> 00:35:41,880
lazy

966
00:35:41,880 --> 00:35:44,880
so what I was able to do is take this

967
00:35:44,880 --> 00:35:47,400
exact configuration this exact

968
00:35:47,400 --> 00:35:49,500
deployment and now I can convert it into

969
00:35:49,500 --> 00:35:52,460
a command like this

970
00:35:53,220 --> 00:35:55,200
so what we're doing here is we have

971
00:35:55,200 --> 00:35:56,280
Terry

972
00:35:56,280 --> 00:35:58,320
we're calling it the operation super

973
00:35:58,320 --> 00:36:00,420
secret operation we're giving it the

974
00:36:00,420 --> 00:36:02,460
command of create

975
00:36:02,460 --> 00:36:04,920
we're building a server in AWS of type

976
00:36:04,920 --> 00:36:06,960
Lighthouse so that's our our nebula

977
00:36:06,960 --> 00:36:08,940
router on the internet

978
00:36:08,940 --> 00:36:11,040
we're building a server in proxmox which

979
00:36:11,040 --> 00:36:13,680
is my private Network that has my

980
00:36:13,680 --> 00:36:15,960
dedicated lab environment we're going to

981
00:36:15,960 --> 00:36:17,760
install the container Cobalt strike to

982
00:36:17,760 --> 00:36:19,440
it we're going to install the container

983
00:36:19,440 --> 00:36:20,760
sliver to it

984
00:36:20,760 --> 00:36:22,260
we're also going to build a server in

985
00:36:22,260 --> 00:36:24,839
digitalocean of type redirector with the

986
00:36:24,839 --> 00:36:27,660
redirector type being https with the

987
00:36:27,660 --> 00:36:30,839
domain of C2 dot malware.com registered

988
00:36:30,839 --> 00:36:33,240
at GoDaddy pointing to it

989
00:36:33,240 --> 00:36:35,640
and then we'll build a server in gcp of

990
00:36:35,640 --> 00:36:37,800
type redirector but the redirector type

991
00:36:37,800 --> 00:36:41,240
being DNS and the DNS C2 being

992
00:36:41,240 --> 00:36:45,060
dns.evil.com registered at namecheap

993
00:36:45,060 --> 00:36:48,359
right so that takes really this massive

994
00:36:48,359 --> 00:36:50,339
problem and it boils it down into this

995
00:36:50,339 --> 00:36:53,520
syntax that's palatable for any level

996
00:36:53,520 --> 00:36:56,460
person in a red team right so now I can

997
00:36:56,460 --> 00:36:59,040
enable my team to say I don't want to

998
00:36:59,040 --> 00:37:00,900
focus on having to configure all the

999
00:37:00,900 --> 00:37:03,720
software I want to go build malware or I

1000
00:37:03,720 --> 00:37:07,260
want to go research ttps I want to go do

1001
00:37:07,260 --> 00:37:10,859
cve research now they have a CLI so they

1002
00:37:10,859 --> 00:37:12,359
can go deploy all the things to enable

1003
00:37:12,359 --> 00:37:13,980
them to go do that research without

1004
00:37:13,980 --> 00:37:15,599
having to worry about opsec without

1005
00:37:15,599 --> 00:37:17,579
having to run worry about getting caught

1006
00:37:17,579 --> 00:37:19,380
by other blue teams without having to

1007
00:37:19,380 --> 00:37:20,700
worry about any of the things that you

1008
00:37:20,700 --> 00:37:21,839
might have to worry about as a red

1009
00:37:21,839 --> 00:37:24,119
teamer you just have a syntax that's

1010
00:37:24,119 --> 00:37:26,099
easily understandable

1011
00:37:26,099 --> 00:37:28,079
and you can feel unable to go do the

1012
00:37:28,079 --> 00:37:29,520
things

1013
00:37:29,520 --> 00:37:31,980
so I was going to do a live demo but I

1014
00:37:31,980 --> 00:37:33,180
didn't really want to have to pray to

1015
00:37:33,180 --> 00:37:35,579
the demo Gods so I'll do a quick demo

1016
00:37:35,579 --> 00:37:37,740
with some gifs and kind of show you what

1017
00:37:37,740 --> 00:37:39,660
this looks like in actuality it's not

1018
00:37:39,660 --> 00:37:41,400
the sexiest thing in the world but it's

1019
00:37:41,400 --> 00:37:43,200
still cool to show off that it does work

1020
00:37:43,200 --> 00:37:45,960
and it is a tool that you can go use and

1021
00:37:45,960 --> 00:37:48,359
download off GitHub today and go use the

1022
00:37:48,359 --> 00:37:49,680
thing

1023
00:37:49,680 --> 00:37:51,780
so also a quick side note I have not

1024
00:37:51,780 --> 00:37:53,579
implemented all the providers I've been

1025
00:37:53,579 --> 00:37:55,380
working on bug fixes and making sure

1026
00:37:55,380 --> 00:37:57,900
that the core functionality works so not

1027
00:37:57,900 --> 00:38:00,119
all the providers used in that initial

1028
00:38:00,119 --> 00:38:02,040
architecture diagram are the ones I use

1029
00:38:02,040 --> 00:38:06,359
in the demo but the same concept applies

1030
00:38:06,359 --> 00:38:09,000
so how it starts and I realize this is

1031
00:38:09,000 --> 00:38:10,560
very small so I'll kind of walk you

1032
00:38:10,560 --> 00:38:12,359
through it how it starts is the user

1033
00:38:12,359 --> 00:38:14,099
inputs exactly what they're looking for

1034
00:38:14,099 --> 00:38:16,740
Terry will parse through all the config

1035
00:38:16,740 --> 00:38:18,599
files and make sure that everything that

1036
00:38:18,599 --> 00:38:20,520
you're requesting is something that we

1037
00:38:20,520 --> 00:38:22,380
have configured so if you're requesting

1038
00:38:22,380 --> 00:38:24,660
AWS make sure that you have the AWS

1039
00:38:24,660 --> 00:38:26,099
template and you can actually render

1040
00:38:26,099 --> 00:38:28,440
that make sure that you have all of the

1041
00:38:28,440 --> 00:38:30,540
valid credentials needed for each cloud

1042
00:38:30,540 --> 00:38:33,660
provider and then honestly if none of

1043
00:38:33,660 --> 00:38:34,980
those things are found so if you can't

1044
00:38:34,980 --> 00:38:37,680
find the config the required credentials

1045
00:38:37,680 --> 00:38:40,200
in the CLI arguments or you can't find

1046
00:38:40,200 --> 00:38:42,780
it in the environment variables and you

1047
00:38:42,780 --> 00:38:45,000
can't find it in the config Last Resort

1048
00:38:45,000 --> 00:38:47,640
effort is prompt the user for standard

1049
00:38:47,640 --> 00:38:50,220
input say I don't have this thing give

1050
00:38:50,220 --> 00:38:52,020
me the thing that you asked for because

1051
00:38:52,020 --> 00:38:54,180
you haven't given it to me yet

1052
00:38:54,180 --> 00:38:57,540
so after Terry validates the request it

1053
00:38:57,540 --> 00:38:59,339
will then go through and build out my

1054
00:38:59,339 --> 00:39:02,160
Jinja templates that's valid terraform

1055
00:39:02,160 --> 00:39:04,260
and Terry will go build the terraform

1056
00:39:04,260 --> 00:39:05,880
resources

1057
00:39:05,880 --> 00:39:08,579
so Terry does this all automatically and

1058
00:39:08,579 --> 00:39:10,800
you actually have the option to say Auto

1059
00:39:10,800 --> 00:39:12,740
approve anything that's built with Terry

1060
00:39:12,740 --> 00:39:15,180
but if you want you can just manually

1061
00:39:15,180 --> 00:39:17,579
type in yes and hit enter and then what

1062
00:39:17,579 --> 00:39:19,079
that does is exactly what you expect

1063
00:39:19,079 --> 00:39:21,180
terraform goes interacts with all the

1064
00:39:21,180 --> 00:39:23,339
clouds builds all your things builds the

1065
00:39:23,339 --> 00:39:25,859
DNS records having everything be

1066
00:39:25,859 --> 00:39:27,780
dynamically referenced based on what you

1067
00:39:27,780 --> 00:39:29,339
were asking for

1068
00:39:29,339 --> 00:39:31,740
and then after everything's built Terry

1069
00:39:31,740 --> 00:39:33,359
will read through the terraform state

1070
00:39:33,359 --> 00:39:36,900
that uh of everything that was built and

1071
00:39:36,900 --> 00:39:38,220
then start to kick off some ansible

1072
00:39:38,220 --> 00:39:40,020
plays against those hosts so everything

1073
00:39:40,020 --> 00:39:42,359
gets configured and also we can generate

1074
00:39:42,359 --> 00:39:44,460
all of our nebulous certificates so that

1075
00:39:44,460 --> 00:39:47,040
we have everything interacting inside of

1076
00:39:47,040 --> 00:39:50,099
that private mesh VPN securely and fully

1077
00:39:50,099 --> 00:39:51,480
encrypted and we do that all through

1078
00:39:51,480 --> 00:39:53,040
Terry and then we can go deploy all the

1079
00:39:53,040 --> 00:39:55,020
configuration and all the certificates

1080
00:39:55,020 --> 00:39:57,540
onto the servers so that we have that

1081
00:39:57,540 --> 00:40:00,599
mesh VPN setup and everything just works

1082
00:40:00,599 --> 00:40:02,460
so now I can route things between the

1083
00:40:02,460 --> 00:40:05,160
private subnet and everything's happy

1084
00:40:05,160 --> 00:40:08,339
and then my favorite part is my team is

1085
00:40:08,339 --> 00:40:10,619
very lazy and we like to be lazy because

1086
00:40:10,619 --> 00:40:12,839
we like to be malware developers right

1087
00:40:12,839 --> 00:40:15,000
and we after building these things we

1088
00:40:15,000 --> 00:40:16,800
don't want to have to copy and paste and

1089
00:40:16,800 --> 00:40:18,359
say oh well here's all the things we

1090
00:40:18,359 --> 00:40:20,400
built so what I did is I added a little

1091
00:40:20,400 --> 00:40:23,040
cherry on top of a slack integration so

1092
00:40:23,040 --> 00:40:25,079
after everything's built we can have

1093
00:40:25,079 --> 00:40:27,359
Terry send a message off to your team in

1094
00:40:27,359 --> 00:40:30,000
slack saying exactly what was built and

1095
00:40:30,000 --> 00:40:31,859
give you all the information you need to

1096
00:40:31,859 --> 00:40:34,740
know as a red teamer to then have all

1097
00:40:34,740 --> 00:40:37,079
the data to go build your payloads right

1098
00:40:37,079 --> 00:40:39,180
so exactly what DNS records were created

1099
00:40:39,180 --> 00:40:41,280
what's the provider what's the nebula

1100
00:40:41,280 --> 00:40:44,520
ipv for what's the ipv4 what containers

1101
00:40:44,520 --> 00:40:46,800
were installed basically all the data

1102
00:40:46,800 --> 00:40:48,839
you might need to know as a red teamer

1103
00:40:48,839 --> 00:40:51,540
to go do the things

1104
00:40:51,540 --> 00:40:53,880
so that's my solution of Terry

1105
00:40:53,880 --> 00:40:55,680
and I want to give a call to action for

1106
00:40:55,680 --> 00:40:57,839
you all in the crowd who might have an

1107
00:40:57,839 --> 00:41:00,300
interest in doing some of this research

1108
00:41:00,300 --> 00:41:02,160
because my goal as a developer is not

1109
00:41:02,160 --> 00:41:04,920
done Terry's a good start it gives me a

1110
00:41:04,920 --> 00:41:06,599
lot of the core functionality that I

1111
00:41:06,599 --> 00:41:08,880
want as a red teamer to go build things

1112
00:41:08,880 --> 00:41:10,260
without having to worry about the

1113
00:41:10,260 --> 00:41:12,060
complexity of red team infrastructure

1114
00:41:12,060 --> 00:41:13,980
but for any of you who are interested in

1115
00:41:13,980 --> 00:41:15,960
taking the plunge with me I'm always

1116
00:41:15,960 --> 00:41:18,060
looking for collaborators on the project

1117
00:41:18,060 --> 00:41:19,619
so reach out to me if you're interested

1118
00:41:19,619 --> 00:41:21,300
in helping Terry grow and come talk to

1119
00:41:21,300 --> 00:41:23,280
me after this is a cool opportunity and

1120
00:41:23,280 --> 00:41:24,780
there's still a lot more to be done and

1121
00:41:24,780 --> 00:41:26,220
I have a lot of really cool ideas for

1122
00:41:26,220 --> 00:41:28,200
where it goes but I am still a red

1123
00:41:28,200 --> 00:41:29,820
teamer and I still have a day job so I'm

1124
00:41:29,820 --> 00:41:31,740
trying to kind of work and get more

1125
00:41:31,740 --> 00:41:33,480
people interested in the project so come

1126
00:41:33,480 --> 00:41:34,680
up to me and talk to me if you're

1127
00:41:34,680 --> 00:41:36,240
interested

1128
00:41:36,240 --> 00:41:38,220
and lastly I want to thank all the

1129
00:41:38,220 --> 00:41:39,780
contributors who have helped me get here

1130
00:41:39,780 --> 00:41:43,020
uh one of my old co-workers who worked

1131
00:41:43,020 --> 00:41:44,579
with me at Fifth Third his name is

1132
00:41:44,579 --> 00:41:47,220
Andrew Whitmer he gave me as I was

1133
00:41:47,220 --> 00:41:49,200
struggling he wanted me to struggle and

1134
00:41:49,200 --> 00:41:51,180
struggle and then finally get to a point

1135
00:41:51,180 --> 00:41:52,980
where I had to reframe the problem and

1136
00:41:52,980 --> 00:41:55,260
once I reframed it he then handed me

1137
00:41:55,260 --> 00:41:57,000
kind of the bones of what he had thought

1138
00:41:57,000 --> 00:42:00,000
is the end goal for a red team

1139
00:42:00,000 --> 00:42:02,040
infrastructure pipeline so he gave me

1140
00:42:02,040 --> 00:42:03,839
the bones and I just ran with it so I

1141
00:42:03,839 --> 00:42:05,160
want to thank him for letting me run

1142
00:42:05,160 --> 00:42:07,079
with it and kind of coaching me without

1143
00:42:07,079 --> 00:42:09,480
just handing me a solution and not to

1144
00:42:09,480 --> 00:42:10,560
mention the couple of GitHub

1145
00:42:10,560 --> 00:42:12,180
contributors I do have on the project

1146
00:42:12,180 --> 00:42:14,220
already it would not be possible without

1147
00:42:14,220 --> 00:42:15,660
y'all

1148
00:42:15,660 --> 00:42:19,200
and also I had to do it so don't hate me

1149
00:42:19,200 --> 00:42:21,359
if I actually am not supposed to do this

1150
00:42:21,359 --> 00:42:23,099
but I'm going to do it anyway

1151
00:42:23,099 --> 00:42:24,960
one of the cool things about where I

1152
00:42:24,960 --> 00:42:27,960
work is I am allowed to go do this

1153
00:42:27,960 --> 00:42:29,640
research I have a lot of great

1154
00:42:29,640 --> 00:42:32,220
leadership who I told them I want to be

1155
00:42:32,220 --> 00:42:33,780
lazy I want to go learn all the things

1156
00:42:33,780 --> 00:42:36,480
with Cloud but I want to do it during

1157
00:42:36,480 --> 00:42:39,599
work hours and Leadership was like hell

1158
00:42:39,599 --> 00:42:42,480
yeah go for it and I want to say it's

1159
00:42:42,480 --> 00:42:44,339
been awesome to work with them and we

1160
00:42:44,339 --> 00:42:46,140
are always hiring we're always looking

1161
00:42:46,140 --> 00:42:48,780
for new people new Talent so if any of

1162
00:42:48,780 --> 00:42:50,700
you all are like interested in taking

1163
00:42:50,700 --> 00:42:52,800
the plunge deeper into cyber and you

1164
00:42:52,800 --> 00:42:54,119
want to do it from a financial

1165
00:42:54,119 --> 00:42:56,460
perspective come talk to me we're always

1166
00:42:56,460 --> 00:42:58,319
hiring and also you can even just go

1167
00:42:58,319 --> 00:43:00,060
look at our careers page but I had to do

1168
00:43:00,060 --> 00:43:00,900
it

1169
00:43:00,900 --> 00:43:02,760
that's pretty much it I want to say

1170
00:43:02,760 --> 00:43:04,500
thank you a special thanks to all the

1171
00:43:04,500 --> 00:43:05,579
people who have helped me with this

1172
00:43:05,579 --> 00:43:07,560
solution and the feedback again it's not

1173
00:43:07,560 --> 00:43:09,420
possible and thanks to all the b-sides

1174
00:43:09,420 --> 00:43:11,099
people for putting this on and and

1175
00:43:11,099 --> 00:43:12,960
letting me talk uh I'll be honest this

1176
00:43:12,960 --> 00:43:14,460
is my first presentation I've ever given

1177
00:43:14,460 --> 00:43:16,859
at a cyber conference so kind of cool

1178
00:43:16,859 --> 00:43:18,420
that people were reaching out to me and

1179
00:43:18,420 --> 00:43:20,400
uh supporting me and going through this

1180
00:43:20,400 --> 00:43:21,900
journey but if you want to talk to me

1181
00:43:21,900 --> 00:43:24,300
just on the internet you can contact me

1182
00:43:24,300 --> 00:43:26,880
on Twitter at Buckingham Ezra you can

1183
00:43:26,880 --> 00:43:28,920
contact me via email ezra.blockingham at

1184
00:43:28,920 --> 00:43:30,839
gmail or you can go to my blog

1185
00:43:30,839 --> 00:43:32,819
azerbuckingham.com

1186
00:43:32,819 --> 00:43:35,760
and that's it thanks everyone

1187
00:43:35,760 --> 00:43:38,720
oh I love questions

1188
00:43:42,660 --> 00:43:45,500
that's me uh

1189
00:43:56,460 --> 00:43:59,599
yeah got it

1190
00:44:07,859 --> 00:44:09,540
burn you want to set another one up

1191
00:44:09,540 --> 00:44:13,079
can't it do that dynamically

1192
00:44:13,079 --> 00:44:15,240
so the question was if I have

1193
00:44:15,240 --> 00:44:17,640
infrastructure that gets burned after

1194
00:44:17,640 --> 00:44:20,280
I've built it how can I modify my

1195
00:44:20,280 --> 00:44:23,480
infrastructure to address that solution

1196
00:44:23,480 --> 00:44:28,200
so yes kind of so inside of Terry I did

1197
00:44:28,200 --> 00:44:30,000
think of what happens if they're scope

1198
00:44:30,000 --> 00:44:32,400
creep so what if you say I want to go

1199
00:44:32,400 --> 00:44:34,980
build a new redirector but you might

1200
00:44:34,980 --> 00:44:36,720
want to keep some existing one ones

1201
00:44:36,720 --> 00:44:39,000
alive I don't have it here but there is

1202
00:44:39,000 --> 00:44:41,700
an ability inside of the tool to instead

1203
00:44:41,700 --> 00:44:43,319
of run that create command that I had

1204
00:44:43,319 --> 00:44:44,760
earlier let me see I can pull it up real

1205
00:44:44,760 --> 00:44:46,200
quick

1206
00:44:46,200 --> 00:44:49,040
somewhere

1207
00:44:50,040 --> 00:44:53,240
stupid transitions

1208
00:44:54,119 --> 00:44:56,579
cool so you can see that create command

1209
00:44:56,579 --> 00:44:59,099
instead of create you do add

1210
00:44:59,099 --> 00:45:00,720
and you have the operation being

1211
00:45:00,720 --> 00:45:02,579
existing operation that you've already

1212
00:45:02,579 --> 00:45:04,740
built and then you can add redirectors

1213
00:45:04,740 --> 00:45:07,140
and you can even Point them to resources

1214
00:45:07,140 --> 00:45:08,880
you've already created

1215
00:45:08,880 --> 00:45:11,220
so cool enough like what happens is

1216
00:45:11,220 --> 00:45:13,319
every time you create a server it's

1217
00:45:13,319 --> 00:45:15,960
assigned a random server name

1218
00:45:15,960 --> 00:45:17,819
and that server name can then be

1219
00:45:17,819 --> 00:45:20,400
referenced by other resources so if you

1220
00:45:20,400 --> 00:45:23,220
want to in that redirect or config you

1221
00:45:23,220 --> 00:45:25,920
want to say okay that DNS redirector I

1222
00:45:25,920 --> 00:45:27,480
want that to point back to my team

1223
00:45:27,480 --> 00:45:29,640
server I can name this team server

1224
00:45:29,640 --> 00:45:31,859
something like the server mix server

1225
00:45:31,859 --> 00:45:35,579
face and then down here I can do R2

1226
00:45:35,579 --> 00:45:38,460
server mix server face and then that

1227
00:45:38,460 --> 00:45:39,780
inside of ansible will Auto

1228
00:45:39,780 --> 00:45:41,220
automatically map those two things

1229
00:45:41,220 --> 00:45:43,260
together and say okay if there's a

1230
00:45:43,260 --> 00:45:45,180
nebula IP I want it to route to that

1231
00:45:45,180 --> 00:45:47,520
nebula IP but if it's a public IP just

1232
00:45:47,520 --> 00:45:50,460
route the public IP

1233
00:45:50,460 --> 00:45:52,560
so most of the configuration is done so

1234
00:45:52,560 --> 00:45:53,760
if you have things that get burned

1235
00:45:53,760 --> 00:45:55,140
absolutely you can spin up new

1236
00:45:55,140 --> 00:45:56,880
infrastructure but you don't have the

1237
00:45:56,880 --> 00:45:59,160
availability to deploy select pieces of

1238
00:45:59,160 --> 00:46:01,020
resources because terraform might not

1239
00:46:01,020 --> 00:46:02,040
like that

1240
00:46:02,040 --> 00:46:04,920
and I figured managing that kind of a

1241
00:46:04,920 --> 00:46:07,200
Pita but

1242
00:46:07,200 --> 00:46:09,859
good question

1243
00:46:11,400 --> 00:46:12,960
any other questions

1244
00:46:12,960 --> 00:46:15,440
yeah

1245
00:46:29,099 --> 00:46:31,380
your container

1246
00:46:31,380 --> 00:46:33,060
yes that's a good question so the

1247
00:46:33,060 --> 00:46:34,260
question was

1248
00:46:34,260 --> 00:46:37,140
I had Docker and terraform sitting side

1249
00:46:37,140 --> 00:46:39,359
by side working independently why didn't

1250
00:46:39,359 --> 00:46:42,180
I just use the kubernetes functionality

1251
00:46:42,180 --> 00:46:43,859
inside of terraform

1252
00:46:43,859 --> 00:46:46,079
and to answer your question I wanted to

1253
00:46:46,079 --> 00:46:47,579
have

1254
00:46:47,579 --> 00:46:49,920
kind of two two separate worlds I didn't

1255
00:46:49,920 --> 00:46:52,440
want to have terraform baked in with the

1256
00:46:52,440 --> 00:46:54,780
host configuration I wanted to have

1257
00:46:54,780 --> 00:46:57,720
terraform just go build the things and

1258
00:46:57,720 --> 00:46:59,520
then have ansible configure the things

1259
00:46:59,520 --> 00:47:01,500
right so now I have a separation of

1260
00:47:01,500 --> 00:47:03,180
resources because there might be some

1261
00:47:03,180 --> 00:47:05,520
sort of need in the future to say I want

1262
00:47:05,520 --> 00:47:08,099
to rip out terraform and I want to build

1263
00:47:08,099 --> 00:47:09,839
something else or I want to use

1264
00:47:09,839 --> 00:47:11,700
something else to build all my resources

1265
00:47:11,700 --> 00:47:13,980
right now I can do that and I have

1266
00:47:13,980 --> 00:47:16,319
everything kind of ice siled into their

1267
00:47:16,319 --> 00:47:19,380
own solution so I can say let's say I

1268
00:47:19,380 --> 00:47:21,420
tomorrow wake up like I had a boss he

1269
00:47:21,420 --> 00:47:23,220
told me why the hell are you using ants

1270
00:47:23,220 --> 00:47:24,480
will go use salt

1271
00:47:24,480 --> 00:47:26,760
and now with this solution I can say

1272
00:47:26,760 --> 00:47:28,200
okay I can rebuild everything in salt

1273
00:47:28,200 --> 00:47:29,880
but like why would I there's no real

1274
00:47:29,880 --> 00:47:32,160
competitive advantage to do that but I

1275
00:47:32,160 --> 00:47:34,260
could and I don't have to rip all the

1276
00:47:34,260 --> 00:47:36,240
implementation out I just have every

1277
00:47:36,240 --> 00:47:38,220
little siled instance to go do the

1278
00:47:38,220 --> 00:47:39,060
things

1279
00:47:39,060 --> 00:47:41,900
but that's a good question

1280
00:47:55,140 --> 00:47:58,020
I'm not sure so I'll ask a question or

1281
00:47:58,020 --> 00:48:00,119
I'll repeat it so one of the things that

1282
00:48:00,119 --> 00:48:01,740
he asked was

1283
00:48:01,740 --> 00:48:04,200
given a security professional and given

1284
00:48:04,200 --> 00:48:05,579
a security researcher what are the

1285
00:48:05,579 --> 00:48:07,920
things that I'm worried about that

1286
00:48:07,920 --> 00:48:11,060
against our nation

1287
00:48:11,160 --> 00:48:13,319
I don't know if I have a good answer I'm

1288
00:48:13,319 --> 00:48:15,839
still like I said I started not too long

1289
00:48:15,839 --> 00:48:17,099
ago so I'm still trying to figure out

1290
00:48:17,099 --> 00:48:18,660
the threat landscape

1291
00:48:18,660 --> 00:48:19,380
um

1292
00:48:19,380 --> 00:48:21,000
I think that's something that I'll

1293
00:48:21,000 --> 00:48:22,740
probably be better equipped to answer

1294
00:48:22,740 --> 00:48:24,300
but I don't want to give you an answer

1295
00:48:24,300 --> 00:48:25,980
without having a better understanding of

1296
00:48:25,980 --> 00:48:28,760
the threat landscape

1297
00:48:47,880 --> 00:48:50,940
yes the question was

1298
00:48:50,940 --> 00:48:54,420
how does this apply to people or

1299
00:48:54,420 --> 00:48:57,119
organizations that have vpcs or

1300
00:48:57,119 --> 00:48:58,859
different resources across different

1301
00:48:58,859 --> 00:49:01,140
regions in AWS to answer your question

1302
00:49:01,140 --> 00:49:04,020
yes so the whole reason that I wanted to

1303
00:49:04,020 --> 00:49:07,200
do all of this research was oftentimes

1304
00:49:07,200 --> 00:49:09,359
my threat Intel team they'd come to us

1305
00:49:09,359 --> 00:49:10,980
and say oh well you guys are going to

1306
00:49:10,980 --> 00:49:13,380
try to emulate Finn seven right and I'd

1307
00:49:13,380 --> 00:49:15,359
say yep we are and then I'd go ask them

1308
00:49:15,359 --> 00:49:17,339
what are the hosting providers or what

1309
00:49:17,339 --> 00:49:19,200
are the different infrastructure or

1310
00:49:19,200 --> 00:49:20,160
where do they deploy their

1311
00:49:20,160 --> 00:49:22,200
infrastructure I wanted to have a

1312
00:49:22,200 --> 00:49:24,780
pipeline to go mirror that of the Finn

1313
00:49:24,780 --> 00:49:26,579
sevens of the world or the other apt

1314
00:49:26,579 --> 00:49:28,740
groups and I wanted to do it in a

1315
00:49:28,740 --> 00:49:30,300
configurable way

1316
00:49:30,300 --> 00:49:32,220
and this is the solution I came up with

1317
00:49:32,220 --> 00:49:35,339
to do that so I can emulate uh fin 7

1318
00:49:35,339 --> 00:49:37,700
infrastructure or I can go emulate

1319
00:49:37,700 --> 00:49:40,380
unc2529 infrastructure or do that all

1320
00:49:40,380 --> 00:49:42,720
using a single config file or using a

1321
00:49:42,720 --> 00:49:44,760
single CLI syntax instead of having to

1322
00:49:44,760 --> 00:49:45,720
go

1323
00:49:45,720 --> 00:49:46,980
figure out how all the different

1324
00:49:46,980 --> 00:49:48,660
providers work and now I have an

1325
00:49:48,660 --> 00:49:52,098
extensible framework to go do that

1326
00:49:54,540 --> 00:49:57,020
you're welcome

1327
00:49:58,680 --> 00:50:01,460
any other questions

1328
00:50:01,920 --> 00:50:05,040
I almost don't want to call on you

1329
00:50:05,040 --> 00:50:07,880
all right Dan

1330
00:50:16,619 --> 00:50:19,140
very Centric

1331
00:50:19,140 --> 00:50:21,618
downside

1332
00:50:23,579 --> 00:50:26,040
so the question was given the fact that

1333
00:50:26,040 --> 00:50:28,440
Harry is geared towards red teamers do I

1334
00:50:28,440 --> 00:50:30,599
have any plan for developing Terry

1335
00:50:30,599 --> 00:50:32,339
Centric documentation for the things

1336
00:50:32,339 --> 00:50:35,240
that are built is that correct

1337
00:50:36,000 --> 00:50:38,520
okay you just made

1338
00:50:38,520 --> 00:50:40,640
me yeah

1339
00:50:45,660 --> 00:50:47,640
yeah I'm still trying to work through

1340
00:50:47,640 --> 00:50:48,839
that because there's a lot of different

1341
00:50:48,839 --> 00:50:51,119
solutions here like we're talking about

1342
00:50:51,119 --> 00:50:52,260
ansible we're talking about terraform

1343
00:50:52,260 --> 00:50:53,400
we're talking about Docker we're talking

1344
00:50:53,400 --> 00:50:54,780
about nebula we're talking about elastic

1345
00:50:54,780 --> 00:50:56,160
right there's all these things that you

1346
00:50:56,160 --> 00:50:58,559
can dive into I'm going to try to cover

1347
00:50:58,559 --> 00:51:00,660
those things in my blog as far as

1348
00:51:00,660 --> 00:51:02,819
documentation for resources that already

1349
00:51:02,819 --> 00:51:04,140
get deployed

1350
00:51:04,140 --> 00:51:07,859
because of the unique state of Terry and

1351
00:51:07,859 --> 00:51:09,660
Building Things on top of terraform I

1352
00:51:09,660 --> 00:51:10,920
don't want to steal the thunder away

1353
00:51:10,920 --> 00:51:13,260
from the terraform State and all

1354
00:51:13,260 --> 00:51:15,119
basically all the self-documentation

1355
00:51:15,119 --> 00:51:17,280
that comes along with that but I do have

1356
00:51:17,280 --> 00:51:19,800
a custom I'll call it Terry form state

1357
00:51:19,800 --> 00:51:22,200
that I build across all of these

1358
00:51:22,200 --> 00:51:24,359
resources so I can say exactly what

1359
00:51:24,359 --> 00:51:26,520
nebula IP was already used what's the

1360
00:51:26,520 --> 00:51:28,800
nebula cert what are all the things that

1361
00:51:28,800 --> 00:51:30,300
I need to know if I want to add to the

1362
00:51:30,300 --> 00:51:32,160
deployment or if I want to add things to

1363
00:51:32,160 --> 00:51:33,599
it

1364
00:51:33,599 --> 00:51:37,380
but as far as general documentation I do

1365
00:51:37,380 --> 00:51:39,240
have some pretty good documentation on

1366
00:51:39,240 --> 00:51:41,819
the GitHub I'm still working on like how

1367
00:51:41,819 --> 00:51:43,920
that actually

1368
00:51:43,920 --> 00:51:45,599
manifest because there's so many

1369
00:51:45,599 --> 00:51:47,280
different things I can document more to

1370
00:51:47,280 --> 00:51:49,460
come

1371
00:51:51,359 --> 00:51:52,859
and he's on my team so that's why I'm

1372
00:51:52,859 --> 00:51:55,460
giving him crap

1373
00:51:59,640 --> 00:52:01,640
um

1374
00:52:06,540 --> 00:52:09,240
yep

1375
00:52:09,240 --> 00:52:10,740
wanted to transition more over to

1376
00:52:10,740 --> 00:52:13,380
resting so I was going to ask you

1377
00:52:13,380 --> 00:52:16,559
um what we remind me for someone who

1378
00:52:16,559 --> 00:52:17,940
doesn't have any red team experience

1379
00:52:17,940 --> 00:52:20,720
who's wanted to

1380
00:52:22,079 --> 00:52:24,660
yep so the question was I'm in more I

1381
00:52:24,660 --> 00:52:27,059
I'm in the military I'm in more of a

1382
00:52:27,059 --> 00:52:29,220
blue team focused role how do I break

1383
00:52:29,220 --> 00:52:31,020
into red teaming since I'm interested in

1384
00:52:31,020 --> 00:52:32,160
that

1385
00:52:32,160 --> 00:52:33,780
I have a lot of feelings about how

1386
00:52:33,780 --> 00:52:35,400
people break into the industry as a

1387
00:52:35,400 --> 00:52:37,440
whole the answer that I like to give

1388
00:52:37,440 --> 00:52:40,500
people is find a mentor find someone who

1389
00:52:40,500 --> 00:52:42,420
really cares about you as a person

1390
00:52:42,420 --> 00:52:44,940
make them I'm going to say it but

1391
00:52:44,940 --> 00:52:46,140
probably get in trouble for saying it

1392
00:52:46,140 --> 00:52:48,839
make someone give a about you

1393
00:52:48,839 --> 00:52:50,700
right and if you get someone if you find

1394
00:52:50,700 --> 00:52:52,680
that person they will help coach you

1395
00:52:52,680 --> 00:52:54,780
into the places that you want to go

1396
00:52:54,780 --> 00:52:56,160
and if you if you have that person

1397
00:52:56,160 --> 00:52:57,599
you'll never be unemployed the rest of

1398
00:52:57,599 --> 00:52:59,760
your life because that sort of person

1399
00:52:59,760 --> 00:53:02,160
will help make sure that you're going

1400
00:53:02,160 --> 00:53:03,480
where you want to go and they're

1401
00:53:03,480 --> 00:53:04,800
invested in you

1402
00:53:04,800 --> 00:53:06,119
and that's how I'm going to answer that

1403
00:53:06,119 --> 00:53:07,319
question I know that doesn't help you

1404
00:53:07,319 --> 00:53:09,540
with the the exact like red team how you

1405
00:53:09,540 --> 00:53:11,460
break into those roles but having a

1406
00:53:11,460 --> 00:53:13,980
mentor is going to help you learn from

1407
00:53:13,980 --> 00:53:16,740
why why you might not get into a red

1408
00:53:16,740 --> 00:53:19,020
team role sooner rather than later

1409
00:53:19,020 --> 00:53:20,640
and having that support system is more

1410
00:53:20,640 --> 00:53:21,900
important than getting into the role

1411
00:53:21,900 --> 00:53:24,440
that you really want

1412
00:53:32,400 --> 00:53:34,559
that's great advice would you maybe

1413
00:53:34,559 --> 00:53:36,720
share a story about how someone poured

1414
00:53:36,720 --> 00:53:39,780
into how you made someone care about and

1415
00:53:39,780 --> 00:53:41,940
investing sure

1416
00:53:41,940 --> 00:53:44,700
uh so question was how did I find

1417
00:53:44,700 --> 00:53:48,780
someone who invested in me so I started

1418
00:53:48,780 --> 00:53:51,180
off my career I did kind of freelance

1419
00:53:51,180 --> 00:53:53,460
Consulting in college I graduated back

1420
00:53:53,460 --> 00:53:55,680
in 2020 so I have kind of a different

1421
00:53:55,680 --> 00:53:57,180
background

1422
00:53:57,180 --> 00:53:57,960
um

1423
00:53:57,960 --> 00:53:59,819
did some Consulting started getting

1424
00:53:59,819 --> 00:54:02,760
really I'll call it like well versed in

1425
00:54:02,760 --> 00:54:04,800
different roles like data analytics

1426
00:54:04,800 --> 00:54:06,300
business intelligence web development

1427
00:54:06,300 --> 00:54:09,180
all that background and then I went into

1428
00:54:09,180 --> 00:54:10,859
a leadership program because I didn't

1429
00:54:10,859 --> 00:54:12,300
really know where I wanted to fit in but

1430
00:54:12,300 --> 00:54:13,980
it was an I.T focused leadership program

1431
00:54:13,980 --> 00:54:15,839
and I went into that thinking I don't

1432
00:54:15,839 --> 00:54:17,160
know what I want to do I want to figure

1433
00:54:17,160 --> 00:54:18,660
out I want to figure that out and use

1434
00:54:18,660 --> 00:54:20,400
this as a means to do that

1435
00:54:20,400 --> 00:54:22,319
through that program I kind of had a

1436
00:54:22,319 --> 00:54:24,599
support system in place but I wanted to

1437
00:54:24,599 --> 00:54:26,160
Branch out even more because once I

1438
00:54:26,160 --> 00:54:28,200
started feeling like cyber was the way

1439
00:54:28,200 --> 00:54:30,960
to go I found that one person in cyber

1440
00:54:30,960 --> 00:54:32,940
who was investing in early career

1441
00:54:32,940 --> 00:54:34,740
pipeline people and I just started

1442
00:54:34,740 --> 00:54:36,300
asking them questions but right like

1443
00:54:36,300 --> 00:54:39,540
barraging him with questions and he has

1444
00:54:39,540 --> 00:54:41,339
been my mentor ever since because I just

1445
00:54:41,339 --> 00:54:43,680
started asking him questions and then he

1446
00:54:43,680 --> 00:54:45,780
and I developed a relationship kind of a

1447
00:54:45,780 --> 00:54:47,579
personal relationship and now I go to

1448
00:54:47,579 --> 00:54:49,140
him with any sort of question so it

1449
00:54:49,140 --> 00:54:51,359
started off just be curious you ask

1450
00:54:51,359 --> 00:54:53,579
people enough questions and they'll

1451
00:54:53,579 --> 00:54:54,960
start to be like oh well you know what

1452
00:54:54,960 --> 00:54:57,420
this person's curing us curious enough I

1453
00:54:57,420 --> 00:54:59,339
might want to invest in them I might

1454
00:54:59,339 --> 00:55:00,780
want to cultivate that passion that I

1455
00:55:00,780 --> 00:55:01,859
see

1456
00:55:01,859 --> 00:55:04,859
so really I I have a lot of feelings on

1457
00:55:04,859 --> 00:55:06,900
this topic so if anyone wants to like

1458
00:55:06,900 --> 00:55:08,700
talk to me about it after I'm happy to

1459
00:55:08,700 --> 00:55:10,440
talk through it but I would say

1460
00:55:10,440 --> 00:55:14,400
be curious go ask people questions go

1461
00:55:14,400 --> 00:55:17,099
take initiative and that will set you up

1462
00:55:17,099 --> 00:55:19,579
for success

