1
00:00:13,540 --> 00:00:16,299
so obviously a lot to go over and half

2
00:00:16,299 --> 00:00:19,150
an hour we'll give it a shot

3
00:00:19,150 --> 00:00:21,150
so I'm Brian this is actually my first

4
00:00:21,150 --> 00:00:25,779
conference talk so I mostly do what that

5
00:00:25,779 --> 00:00:27,910
pen test work and just general pens work

6
00:00:27,910 --> 00:00:30,910
at tiny company called Accenture with

7
00:00:30,910 --> 00:00:36,730
four hundred thousand please so in terms

8
00:00:36,730 --> 00:00:39,550
of motivation so most introductory

9
00:00:39,550 --> 00:00:42,010
resources about like application

10
00:00:42,010 --> 00:00:44,230
security kind of go over kind of more

11
00:00:44,230 --> 00:00:47,589
old-school applications that in terms of

12
00:00:47,589 --> 00:00:49,989
presentation logic business logic most

13
00:00:49,989 --> 00:00:52,180
of that is happening off of the server

14
00:00:52,180 --> 00:00:53,559
side maybe there's a little bit of

15
00:00:53,559 --> 00:00:56,260
jQuery thrown in there but it's pretty

16
00:00:56,260 --> 00:01:00,100
much all going on the server side so I

17
00:01:00,100 --> 00:01:01,629
wanted to do some more introductory

18
00:01:01,629 --> 00:01:03,909
material but related to modern

19
00:01:03,909 --> 00:01:07,810
applications so by modern I mean stuff

20
00:01:07,810 --> 00:01:09,729
that's using a front-end framework kind

21
00:01:09,729 --> 00:01:12,700
of like angularjs or just plain angular

22
00:01:12,700 --> 00:01:13,930
because there's a version difference

23
00:01:13,930 --> 00:01:18,610
there view or react and then it does a

24
00:01:18,610 --> 00:01:19,600
lot of the business logic and

25
00:01:19,600 --> 00:01:21,880
presentation logic on the client-side

26
00:01:21,880 --> 00:01:26,140
using those and then in terms of some

27
00:01:26,140 --> 00:01:27,550
more a little more the business logic

28
00:01:27,550 --> 00:01:32,230
happens on the server side communicating

29
00:01:32,230 --> 00:01:35,020
by an API usually restful sometimes in

30
00:01:35,020 --> 00:01:36,550
like really bleeding edge they might use

31
00:01:36,550 --> 00:01:40,390
something like graphic you'll want to

32
00:01:40,390 --> 00:01:42,040
note this is going to be most based on

33
00:01:42,040 --> 00:01:45,070
my own experience so as some of you

34
00:01:45,070 --> 00:01:46,270
probably know if you're familiar like

35
00:01:46,270 --> 00:01:49,060
for example react is probably one of the

36
00:01:49,060 --> 00:01:51,400
most important frameworks in this I'm

37
00:01:51,400 --> 00:01:52,690
not gonna go over that a whole lot and

38
00:01:52,690 --> 00:01:55,090
that's not because it's not important

39
00:01:55,090 --> 00:01:57,550
it's just because that's not where my

40
00:01:57,550 --> 00:02:00,550
testing experience lies so first I want

41
00:02:00,550 --> 00:02:04,230
to go over XSS in front-end frameworks

42
00:02:04,230 --> 00:02:07,750
so one of the things you have in these

43
00:02:07,750 --> 00:02:10,060
frameworks is the concept of data

44
00:02:10,060 --> 00:02:14,140
binding and client-side templates so in

45
00:02:14,140 --> 00:02:16,780
kind of an older very jQuery heavy app

46
00:02:16,780 --> 00:02:19,800
of the kind of thing you might see is

47
00:02:19,800 --> 00:02:23,680
manual Dom traversal using CSS selectors

48
00:02:23,680 --> 00:02:26,489
things like that too

49
00:02:26,489 --> 00:02:28,810
grab elements of the Dom manually

50
00:02:28,810 --> 00:02:31,270
replace their HTML and these kind of

51
00:02:31,270 --> 00:02:35,250
frameworks you can actually go in and

52
00:02:36,000 --> 00:02:39,220
put things like here we got this message

53
00:02:39,220 --> 00:02:42,310
variable in the data model and then for

54
00:02:42,310 --> 00:02:45,220
instance we can bind this input field to

55
00:02:45,220 --> 00:02:47,620
that message in the dad model and then

56
00:02:47,620 --> 00:02:49,569
it'll be dynamically updated at runtime

57
00:02:49,569 --> 00:02:53,380
so as I add or remove from here it'll

58
00:02:53,380 --> 00:02:58,120
get updated so that's a lot cleaner so

59
00:02:58,120 --> 00:03:02,739
these expressions are actually protect

60
00:03:02,739 --> 00:03:06,010
against XSS by default they go ahead and

61
00:03:06,010 --> 00:03:10,890
encode their common XSS characters a

62
00:03:10,890 --> 00:03:13,269
client-side so this protects you against

63
00:03:13,269 --> 00:03:15,549
your usual dom-based xss that you might

64
00:03:15,549 --> 00:03:18,819
see with those there's kind of two ways

65
00:03:18,819 --> 00:03:20,170
then that we might look at getting

66
00:03:20,170 --> 00:03:26,470
exercise anyway right there so the first

67
00:03:26,470 --> 00:03:29,680
one most obvious is okay so has these

68
00:03:29,680 --> 00:03:32,350
protections all these frameworks have

69
00:03:32,350 --> 00:03:34,420
some way to disable those protections as

70
00:03:34,420 --> 00:03:37,480
a developer so desires if you disable

71
00:03:37,480 --> 00:03:39,160
that protections someone get dom-based

72
00:03:39,160 --> 00:03:42,120
xss for that that's not really that

73
00:03:42,120 --> 00:03:45,459
interesting the kind of more interesting

74
00:03:45,459 --> 00:03:47,140
thing and the thing that might be new to

75
00:03:47,140 --> 00:03:49,060
some of you you might have seen it in

76
00:03:49,060 --> 00:03:51,010
like a burp scanner report as

77
00:03:51,010 --> 00:03:54,340
client-side template injection but not

78
00:03:54,340 --> 00:03:58,690
really knowing what it is is these

79
00:03:58,690 --> 00:04:00,670
expressions I showed showed before you

80
00:04:00,670 --> 00:04:03,370
know I just have a variable message but

81
00:04:03,370 --> 00:04:05,340
they can get a little more complicated

82
00:04:05,340 --> 00:04:09,700
so you got some fancier like single page

83
00:04:09,700 --> 00:04:11,950
applications which are very very much

84
00:04:11,950 --> 00:04:14,440
like all client-side stuff but a lot of

85
00:04:14,440 --> 00:04:17,470
applications especially if it's an older

86
00:04:17,470 --> 00:04:19,738
one that's kind of being given an update

87
00:04:19,738 --> 00:04:22,380
will mix server-side and client-side

88
00:04:22,380 --> 00:04:27,130
presentation logic so if there's some

89
00:04:27,130 --> 00:04:29,680
kind of point in the page where you know

90
00:04:29,680 --> 00:04:32,350
what the PHP echo or JSP or you know a

91
00:04:32,350 --> 00:04:33,820
timely template or something like that

92
00:04:33,820 --> 00:04:37,000
that we could inject our own expression

93
00:04:37,000 --> 00:04:38,349
in there potentially we could do

94
00:04:38,349 --> 00:04:40,220
something dangerous

95
00:04:40,220 --> 00:04:41,990
so one thing to bear in mind as we talk

96
00:04:41,990 --> 00:04:45,260
about this is that a server-side

97
00:04:45,260 --> 00:04:47,840
templating engine to protect against XSS

98
00:04:47,840 --> 00:04:52,280
is going to look at encoding angle

99
00:04:52,280 --> 00:04:56,060
brackets quotation marks usually so we

100
00:04:56,060 --> 00:04:57,830
just saw though these expressions are

101
00:04:57,830 --> 00:05:03,110
demarcating braces so angle jeaious

102
00:05:03,110 --> 00:05:06,020
expressions are more powerful than just

103
00:05:06,020 --> 00:05:08,690
we just we what we just saw but they're

104
00:05:08,690 --> 00:05:12,280
not as powerful as just plain JavaScript

105
00:05:12,280 --> 00:05:14,840
they're kind of JavaScript asks they run

106
00:05:14,840 --> 00:05:16,820
in the browser's JavaScript interpreter

107
00:05:16,820 --> 00:05:19,760
but before that they get run through a

108
00:05:19,760 --> 00:05:23,480
parser by angularjs and so you can do

109
00:05:23,480 --> 00:05:25,640
simple operations access object

110
00:05:25,640 --> 00:05:28,850
properties but you can't access like

111
00:05:28,850 --> 00:05:31,400
important Global's like window or

112
00:05:31,400 --> 00:05:34,880
document and so like for example alert

113
00:05:34,880 --> 00:05:37,010
you want to pop an alert box word is

114
00:05:37,010 --> 00:05:40,310
actually window dot alert or document

115
00:05:40,310 --> 00:05:41,990
dot cookie obviously that's undocumented

116
00:05:41,990 --> 00:05:43,850
so you can't just do like a

117
00:05:43,850 --> 00:05:46,820
straightforward XSS attack like this one

118
00:05:46,820 --> 00:05:49,550
thing to note real quick is that the

119
00:05:49,550 --> 00:05:51,640
technique I'm going to go over here

120
00:05:51,640 --> 00:05:56,120
versions of angularjs before 1.6 I had

121
00:05:56,120 --> 00:05:56,960
to sandbox

122
00:05:56,960 --> 00:05:59,180
to prevent these but it didn't really

123
00:05:59,180 --> 00:06:01,010
work researchers found the whole bunch

124
00:06:01,010 --> 00:06:03,290
of ways to get around it they removed it

125
00:06:03,290 --> 00:06:06,380
since it didn't work but uh if you find

126
00:06:06,380 --> 00:06:08,690
an older version of angularjs just go on

127
00:06:08,690 --> 00:06:11,090
like the port sugar website look up an

128
00:06:11,090 --> 00:06:15,800
escape and you'll be fine so starting

129
00:06:15,800 --> 00:06:18,470
out what we're talking about is for

130
00:06:18,470 --> 00:06:21,230
example we've got like PHP echo get whoo

131
00:06:21,230 --> 00:06:24,700
so we might as an attacker provide is

132
00:06:24,700 --> 00:06:27,620
this expression and this will pop an

133
00:06:27,620 --> 00:06:29,570
alert box for us and so if we want to

134
00:06:29,570 --> 00:06:33,980
break that down so we're starting out

135
00:06:33,980 --> 00:06:36,610
with is we just got an empty object and

136
00:06:36,610 --> 00:06:39,860
then if we do to add to string to that

137
00:06:39,860 --> 00:06:42,860
now that's a function we haven't called

138
00:06:42,860 --> 00:06:45,890
that and then if we do constructor then

139
00:06:45,890 --> 00:06:47,690
we get the function constructor and

140
00:06:47,690 --> 00:06:50,090
that's not just the constructor for to

141
00:06:50,090 --> 00:06:51,560
string is the constructor just for

142
00:06:51,560 --> 00:06:52,850
functions in general and

143
00:06:52,850 --> 00:06:55,550
the script and so JavaScript's function

144
00:06:55,550 --> 00:06:58,910
constructor we can pass raw JavaScript

145
00:06:58,910 --> 00:07:00,830
to it and dynamically create new

146
00:07:00,830 --> 00:07:04,550
functions at runtime so then if we call

147
00:07:04,550 --> 00:07:07,010
that by adding those parentheses then

148
00:07:07,010 --> 00:07:10,700
we'll pop our alert box so same thing

149
00:07:10,700 --> 00:07:14,060
exactly verbatim works in view and this

150
00:07:14,060 --> 00:07:15,740
technique right here is actually from

151
00:07:15,740 --> 00:07:18,080
the source code of angularjs where they

152
00:07:18,080 --> 00:07:22,580
say hey you could do this so the next

153
00:07:22,580 --> 00:07:25,580
thing so I mentioned that so we're not

154
00:07:25,580 --> 00:07:27,350
doing angular brackets so that'll get us

155
00:07:27,350 --> 00:07:30,650
around those filters and encoding but

156
00:07:30,650 --> 00:07:32,510
what about quotation marks so we use

157
00:07:32,510 --> 00:07:34,070
single quotes to surround our string

158
00:07:34,070 --> 00:07:39,110
there so there's a couple things that

159
00:07:39,110 --> 00:07:42,410
come to mind first one thing that came

160
00:07:42,410 --> 00:07:43,760
to mind when I was looking at this one

161
00:07:43,760 --> 00:07:45,850
time was okay maybe I'll use backticks

162
00:07:45,850 --> 00:07:49,040
if you're not aware there's a new ECMO

163
00:07:49,040 --> 00:07:52,430
script standard called template literals

164
00:07:52,430 --> 00:07:55,310
that are denoted by backticks and create

165
00:07:55,310 --> 00:07:57,520
strings that way but like I said

166
00:07:57,520 --> 00:08:00,890
angularjs expressions are not really

167
00:08:00,890 --> 00:08:02,360
javascript that run through a parser

168
00:08:02,360 --> 00:08:04,400
first and that parser doesn't parse them

169
00:08:04,400 --> 00:08:08,720
so that doesn't work can't do just

170
00:08:08,720 --> 00:08:10,430
straight string that from char code

171
00:08:10,430 --> 00:08:13,310
because just like the window global and

172
00:08:13,310 --> 00:08:15,830
the document global you can't just grab

173
00:08:15,830 --> 00:08:20,840
that willy-nilly so okay what we saw

174
00:08:20,840 --> 00:08:24,680
before our kind of object that to string

175
00:08:24,680 --> 00:08:27,530
that constructor thing so maybe we can

176
00:08:27,530 --> 00:08:31,490
launch off of that to get a string so

177
00:08:31,490 --> 00:08:33,919
that by itself is not going to work

178
00:08:33,919 --> 00:08:36,140
either because like I said this

179
00:08:36,140 --> 00:08:38,929
constructor we got here is the function

180
00:08:38,929 --> 00:08:41,000
constructor for all functions not the

181
00:08:41,000 --> 00:08:43,460
string constructor so if we call from

182
00:08:43,460 --> 00:08:44,960
char code on there that's not going to

183
00:08:44,960 --> 00:08:54,710
work so a quick disclaimer we there's a

184
00:08:54,710 --> 00:08:56,630
very there's a simpler way to do this

185
00:08:56,630 --> 00:08:59,420
than what I'm going to present when I

186
00:08:59,420 --> 00:09:01,720
was first making the presentation I

187
00:09:01,720 --> 00:09:05,150
tried the simple way didn't work when I

188
00:09:05,150 --> 00:09:06,649
was practicing it I tried it

189
00:09:06,649 --> 00:09:09,619
and it did work but this way is kind of

190
00:09:09,619 --> 00:09:11,089
interesting and you might learn some

191
00:09:11,089 --> 00:09:12,709
things from it so I think it's kind of

192
00:09:12,709 --> 00:09:15,259
cool quiz question does anyone know what

193
00:09:15,259 --> 00:09:26,559
that is nope notebook for you the so the

194
00:09:26,559 --> 00:09:28,699
JavaScript's an interesting language and

195
00:09:28,699 --> 00:09:30,949
it's got all these weird automatic type

196
00:09:30,949 --> 00:09:33,559
conversions some less weird than others

197
00:09:33,559 --> 00:09:36,110
the one that's like really weird to me

198
00:09:36,110 --> 00:09:40,009
maybe I'm just don't know enough is I

199
00:09:40,009 --> 00:09:42,589
mean if in an expression you give an

200
00:09:42,589 --> 00:09:45,290
exclamation point and empty square

201
00:09:45,290 --> 00:09:48,350
braces that will evaluate to the boolean

202
00:09:48,350 --> 00:09:52,999
value false empty braces of course

203
00:09:52,999 --> 00:09:56,929
that's just an empty array plus that's

204
00:09:56,929 --> 00:10:00,079
concatenation or arithmetic so if you

205
00:10:00,079 --> 00:10:01,579
add these together with the plus

206
00:10:01,579 --> 00:10:04,670
operator what you'll end up getting is

207
00:10:04,670 --> 00:10:09,949
the string false so now and if you're

208
00:10:09,949 --> 00:10:11,089
interested in this kind of weird stuff

209
00:10:11,089 --> 00:10:13,879
because I am this book web application

210
00:10:13,879 --> 00:10:16,639
obfuscation is really good also these

211
00:10:16,639 --> 00:10:19,610
guys Mario Heydrich and Eric Hayes

212
00:10:19,610 --> 00:10:20,959
they've got a lot of cool stuff on the

213
00:10:20,959 --> 00:10:22,490
Internet

214
00:10:22,490 --> 00:10:24,589
so you break that down now so we've got

215
00:10:24,589 --> 00:10:28,779
a string and don't have any quotes so

216
00:10:28,779 --> 00:10:31,279
now if we do constructor we can get from

217
00:10:31,279 --> 00:10:33,740
char code and then run that and we can

218
00:10:33,740 --> 00:10:35,779
put in our stuff and so the whole

219
00:10:35,779 --> 00:10:40,300
purpose of that is now we can do XSS and

220
00:10:40,300 --> 00:10:42,709
this time evade pretty much any

221
00:10:42,709 --> 00:10:44,720
server-side XSS filter that you would

222
00:10:44,720 --> 00:10:48,860
normally see and also a lot of laughs

223
00:10:48,860 --> 00:10:53,629
and even like XSS auditor in Chrome so

224
00:10:53,629 --> 00:10:56,870
that's pretty cool so like I said

225
00:10:56,870 --> 00:10:59,179
there's actually simpler way to do that

226
00:10:59,179 --> 00:11:03,410
so before I said okay object that to

227
00:11:03,410 --> 00:11:05,449
string that's just a function well if we

228
00:11:05,449 --> 00:11:07,699
just do object that to string and then

229
00:11:07,699 --> 00:11:09,499
call that function that's an empty

230
00:11:09,499 --> 00:11:10,639
string huh

231
00:11:10,639 --> 00:11:14,299
so this works too it's simpler in my

232
00:11:14,299 --> 00:11:18,519
opinion not as cool another question so

233
00:11:18,519 --> 00:11:20,600
here we got this shot too

234
00:11:20,600 --> 00:11:23,210
six hash attribute in our script and

235
00:11:23,210 --> 00:11:25,490
I've used that before this is part of a

236
00:11:25,490 --> 00:11:28,640
new security standard for web pages does

237
00:11:28,640 --> 00:11:35,150
anyone know that what that's called you

238
00:11:35,150 --> 00:11:36,830
guys come on

239
00:11:36,830 --> 00:11:39,080
it's called sub resource integrity you

240
00:11:39,080 --> 00:11:39,950
should read about it it's actually

241
00:11:39,950 --> 00:11:45,200
pretty cool anyone know who this is or

242
00:11:45,200 --> 00:11:59,620
what he's from corporate politics so

243
00:11:59,620 --> 00:12:01,850
enumeration obviously that's one of our

244
00:12:01,850 --> 00:12:05,870
more important things to do as pen

245
00:12:05,870 --> 00:12:13,370
testers and there's some kind of unique

246
00:12:13,370 --> 00:12:15,410
opportunities that we'll get in some of

247
00:12:15,410 --> 00:12:17,930
these applications that we might not get

248
00:12:17,930 --> 00:12:21,530
in normal normal like old one quickly

249
00:12:21,530 --> 00:12:26,440
just as a point of reference so for our

250
00:12:26,440 --> 00:12:28,640
kind of general architecture we're

251
00:12:28,640 --> 00:12:30,790
talking about here we've got a front end

252
00:12:30,790 --> 00:12:33,770
running the browser and that handles the

253
00:12:33,770 --> 00:12:36,050
presentation logic at least most of it

254
00:12:36,050 --> 00:12:38,930
and also a lot of the business logic be

255
00:12:38,930 --> 00:12:41,080
running framework like one of these

256
00:12:41,080 --> 00:12:44,660
easier quiz question what company made

257
00:12:44,660 --> 00:12:50,900
angular okay too many people said that I

258
00:12:50,900 --> 00:12:56,720
don't know okay okay someone raised

259
00:12:56,720 --> 00:12:59,830
their hand or what company made react

260
00:12:59,830 --> 00:13:04,370
okay he predicted the future so what is

261
00:13:04,370 --> 00:13:07,780
it that guy

262
00:13:09,660 --> 00:13:13,590
oh sorry that guy's a psychic first yeah

263
00:13:13,590 --> 00:13:22,260
so come get this so first thing I don't

264
00:13:22,260 --> 00:13:26,970
care whatever so first thing we want to

265
00:13:26,970 --> 00:13:30,390
look at in terms of enumeration kind of

266
00:13:30,390 --> 00:13:32,010
easier so I've been done but when a

267
00:13:32,010 --> 00:13:34,200
developer is putting together an

268
00:13:34,200 --> 00:13:36,750
application in view or angularjs

269
00:13:36,750 --> 00:13:42,540
whatever they're going to develop a

270
00:13:42,540 --> 00:13:43,860
whole bunch of modules are gonna be

271
00:13:43,860 --> 00:13:45,840
different files everything but then

272
00:13:45,840 --> 00:13:48,030
they're gonna run them through this

273
00:13:48,030 --> 00:13:52,260
abomination called web pack and it's all

274
00:13:52,260 --> 00:13:53,730
going to get mushed together in one

275
00:13:53,730 --> 00:13:57,260
single mangled minified file and so

276
00:13:57,260 --> 00:14:00,510
there's a good chance that the

277
00:14:00,510 --> 00:14:03,630
functionality for different roles is

278
00:14:03,630 --> 00:14:07,400
going to be in there so potentially as

279
00:14:07,400 --> 00:14:10,710
an unprivileged user or even maybe an

280
00:14:10,710 --> 00:14:13,140
unauthenticated user you could see the

281
00:14:13,140 --> 00:14:16,800
client-side business logic for admin

282
00:14:16,800 --> 00:14:21,270
roles for example so if you go and look

283
00:14:21,270 --> 00:14:24,240
around there and you look for xhr calls

284
00:14:24,240 --> 00:14:27,210
or in this random example they've got

285
00:14:27,210 --> 00:14:28,800
their own little wrapper there you might

286
00:14:28,800 --> 00:14:32,970
be able to find part of me you might be

287
00:14:32,970 --> 00:14:35,840
able to find sensitive REST API calls

288
00:14:35,840 --> 00:14:38,220
that you want to test see if there's any

289
00:14:38,220 --> 00:14:43,500
authorization issues so another thing of

290
00:14:43,500 --> 00:14:45,560
course more on the server end of things

291
00:14:45,560 --> 00:14:49,110
we're dealing with REST API is the

292
00:14:49,110 --> 00:14:51,240
application we're looking at in terms of

293
00:14:51,240 --> 00:14:55,290
the front-end business logic might not

294
00:14:55,290 --> 00:15:00,180
actually be covering all the possible

295
00:15:00,180 --> 00:15:02,700
API functionality so if we can get the

296
00:15:02,700 --> 00:15:04,740
API documentation especially in the

297
00:15:04,740 --> 00:15:06,900
machine readable format like open API is

298
00:15:06,900 --> 00:15:11,270
like or waddle that'll really help us to

299
00:15:11,270 --> 00:15:14,940
map out the API if we're doing like a

300
00:15:14,940 --> 00:15:17,220
white box or gray box assessment we can

301
00:15:17,220 --> 00:15:22,000
just like ask the developers for it but

302
00:15:22,000 --> 00:15:24,420
a lot of different rest frameworks

303
00:15:24,420 --> 00:15:28,240
actually auto-generate it so you can

304
00:15:28,240 --> 00:15:30,490
first just try just kind of typical

305
00:15:30,490 --> 00:15:33,490
paths where you might see it is and then

306
00:15:33,490 --> 00:15:35,680
depending on the framework there might

307
00:15:35,680 --> 00:15:39,040
other might be other places so it's not

308
00:15:39,040 --> 00:15:41,530
necessarily default but for example for

309
00:15:41,530 --> 00:15:44,470
Jersey I see this application got waddle

310
00:15:44,470 --> 00:15:46,960
a lot and so you can see as an example

311
00:15:46,960 --> 00:15:49,870
here as a random example from the

312
00:15:49,870 --> 00:15:53,680
internet of a dot Waddell file that you

313
00:15:53,680 --> 00:15:57,970
can see has different resources and

314
00:15:57,970 --> 00:16:00,670
parameters and all that stuff and that's

315
00:16:00,670 --> 00:16:02,860
going to help you out find maybe even

316
00:16:02,860 --> 00:16:05,590
functionality that's not even used by

317
00:16:05,590 --> 00:16:08,470
the application as is and so they didn't

318
00:16:08,470 --> 00:16:09,640
even really think much about the

319
00:16:09,640 --> 00:16:15,550
security behind it so next for logic and

320
00:16:15,550 --> 00:16:24,550
authorization testing so quick kind of

321
00:16:24,550 --> 00:16:28,300
basic rundown the rest if you're not

322
00:16:28,300 --> 00:16:29,339
familiar

323
00:16:29,339 --> 00:16:33,910
so rest you know there's kind of

324
00:16:33,910 --> 00:16:35,710
conventions and maybe things you should

325
00:16:35,710 --> 00:16:38,160
do versus what people ever actually do

326
00:16:38,160 --> 00:16:41,050
but general conventionally what you'll

327
00:16:41,050 --> 00:16:43,030
do is say I've got an app that handles

328
00:16:43,030 --> 00:16:46,960
books so I want to get a list of all the

329
00:16:46,960 --> 00:16:49,270
books to get flush API slash books I

330
00:16:49,270 --> 00:16:51,880
want to create a book do a post to that

331
00:16:51,880 --> 00:16:54,430
same URL I want to retrieve a book okay

332
00:16:54,430 --> 00:16:58,050
I've done an ID for that to get edit

333
00:16:58,050 --> 00:17:01,510
same URL but with a put or more rarely a

334
00:17:01,510 --> 00:17:04,329
patch and these are just HTTP request

335
00:17:04,329 --> 00:17:06,880
methods and one delete a book I just use

336
00:17:06,880 --> 00:17:10,359
a little eat delete request mess so the

337
00:17:10,359 --> 00:17:15,490
reason I go over that is because of two

338
00:17:15,490 --> 00:17:17,430
reasons

339
00:17:17,430 --> 00:17:23,079
well three so the first and foremost as

340
00:17:23,079 --> 00:17:25,449
some of you already probably he didn't

341
00:17:25,449 --> 00:17:27,640
on is because so much of the business

342
00:17:27,640 --> 00:17:28,900
logic is actually done on the client

343
00:17:28,900 --> 00:17:31,360
side of course we all know client side

344
00:17:31,360 --> 00:17:33,100
business logic there could be security

345
00:17:33,100 --> 00:17:36,250
issues there things maybe we can buy

346
00:17:36,250 --> 00:17:43,330
so and to give you an idea of how

347
00:17:43,330 --> 00:17:46,120
extensive business logic is in terms of

348
00:17:46,120 --> 00:17:48,490
how much Israel put on the server saw it

349
00:17:48,490 --> 00:17:50,169
put on the client-side in terms of

350
00:17:50,169 --> 00:17:52,600
presentation business logic you'll very

351
00:17:52,600 --> 00:17:54,520
frequently see even just for something

352
00:17:54,520 --> 00:17:57,250
as simple as putting your user name in

353
00:17:57,250 --> 00:17:59,860
the right-hand corner they'll actually

354
00:17:59,860 --> 00:18:02,020
get to do like get slash users slash

355
00:18:02,020 --> 00:18:07,090
current so that's a common place where

356
00:18:07,090 --> 00:18:12,040
you'd have mistakes just in terms of

357
00:18:12,040 --> 00:18:13,990
general okay bypassing client-side

358
00:18:13,990 --> 00:18:16,240
business logic another thing is just in

359
00:18:16,240 --> 00:18:19,390
my experience at least so rest as we

360
00:18:19,390 --> 00:18:21,370
kind of saw before with the books and

361
00:18:21,370 --> 00:18:24,640
encourages you to think of what you're

362
00:18:24,640 --> 00:18:26,530
doing in terms of like the resources

363
00:18:26,530 --> 00:18:29,500
underlying resources the users the books

364
00:18:29,500 --> 00:18:35,500
the roles not necessarily like an action

365
00:18:35,500 --> 00:18:39,730
so you're doing oftentimes a put against

366
00:18:39,730 --> 00:18:43,240
the users resource not specifically

367
00:18:43,240 --> 00:18:46,600
calling some like struts action that is

368
00:18:46,600 --> 00:18:49,510
meant specifically to change user emails

369
00:18:49,510 --> 00:18:52,330
things like that and at least what I

370
00:18:52,330 --> 00:18:54,070
found is because of that kind of change

371
00:18:54,070 --> 00:18:56,740
in mindset people are a little more

372
00:18:56,740 --> 00:19:00,390
prone to forget to add necessary

373
00:19:00,390 --> 00:19:02,200
authorization checks that they might

374
00:19:02,200 --> 00:19:06,220
normally be second nature to them so in

375
00:19:06,220 --> 00:19:07,630
terms of couple of real-world examples

376
00:19:07,630 --> 00:19:11,020
of this hopefully clear that up a bit so

377
00:19:11,020 --> 00:19:12,250
in one case I was looking at an

378
00:19:12,250 --> 00:19:16,240
application like I said it just to get

379
00:19:16,240 --> 00:19:17,860
my basic user information to display

380
00:19:17,860 --> 00:19:21,600
called gets less users slash current and

381
00:19:21,600 --> 00:19:24,580
I said going back to conventions said

382
00:19:24,580 --> 00:19:27,510
okay there's a good chance that I could

383
00:19:27,510 --> 00:19:30,040
that the way it modifies this is not

384
00:19:30,040 --> 00:19:32,380
through some explicit action but just

385
00:19:32,380 --> 00:19:37,299
through a put or patch request to that

386
00:19:37,299 --> 00:19:41,140
URL so lo and behold it took some client

387
00:19:41,140 --> 00:19:42,790
it took some trial and error getting

388
00:19:42,790 --> 00:19:45,040
exactly the right thing but all I had to

389
00:19:45,040 --> 00:19:47,470
do was issue a put request to that with

390
00:19:47,470 --> 00:19:49,299
an admin

391
00:19:49,299 --> 00:19:52,320
admin as my role and I became an Advent

392
00:19:52,320 --> 00:19:54,820
similarly kind of same situation thank

393
00:19:54,820 --> 00:20:01,649
you kind of same situation looking at is

394
00:20:01,649 --> 00:20:05,649
saw the get flesh get user slash current

395
00:20:05,649 --> 00:20:09,009
and just did a post made up a post

396
00:20:09,009 --> 00:20:10,419
didn't necessarily know that it was

397
00:20:10,419 --> 00:20:12,489
there just guessed maybe could be there

398
00:20:12,489 --> 00:20:16,239
and created new admin users similar type

399
00:20:16,239 --> 00:20:18,580
of things this is more of a basic ID or

400
00:20:18,580 --> 00:20:22,799
but just in a REST API did it get to

401
00:20:22,799 --> 00:20:28,480
another did it get to other users and

402
00:20:28,480 --> 00:20:29,950
was able to get their password or set

403
00:20:29,950 --> 00:20:32,769
questions out of their profiles

404
00:20:32,769 --> 00:20:35,169
another one was did a patch request to

405
00:20:35,169 --> 00:20:37,600
other users and could reset their

406
00:20:37,600 --> 00:20:41,679
password reset pins and so what I mean

407
00:20:41,679 --> 00:20:44,309
in terms of the conventions here is

408
00:20:44,309 --> 00:20:46,330
normally when you're trying to provide

409
00:20:46,330 --> 00:20:52,809
an application unless you're unless

410
00:20:52,809 --> 00:20:54,999
you're explicitly given you know again

411
00:20:54,999 --> 00:20:56,230
in more of a white box gray bus

412
00:20:56,230 --> 00:20:59,200
situation explicitly given admin

413
00:20:59,200 --> 00:21:02,529
credentials so you can compare you know

414
00:21:02,529 --> 00:21:04,299
what you see is a normal user what you

415
00:21:04,299 --> 00:21:07,590
see in is admin and you see oh here's

416
00:21:07,590 --> 00:21:10,899
change user rolled up PHP you don't even

417
00:21:10,899 --> 00:21:13,509
necessarily know what you would even try

418
00:21:13,509 --> 00:21:17,379
to do to check if there are any authors

419
00:21:17,379 --> 00:21:19,210
of authorization on those types of

420
00:21:19,210 --> 00:21:24,159
things but here because they use pretty

421
00:21:24,159 --> 00:21:25,899
standard conventions in many cases you

422
00:21:25,899 --> 00:21:27,639
can just guess oh let me try to put and

423
00:21:27,639 --> 00:21:29,980
that might just work same thing in terms

424
00:21:29,980 --> 00:21:32,289
of the fact that you may be able to just

425
00:21:32,289 --> 00:21:36,700
look in the client side source and find

426
00:21:36,700 --> 00:21:40,029
those rest API calls when in an older

427
00:21:40,029 --> 00:21:41,649
application than what those might never

428
00:21:41,649 --> 00:21:47,350
be revealed to you so quickly actually

429
00:21:47,350 --> 00:21:49,629
going down in details on this is kind of

430
00:21:49,629 --> 00:21:54,179
a lightning talk unto itself but if you

431
00:21:54,179 --> 00:21:57,340
if you ever find yourself as I've done

432
00:21:57,340 --> 00:22:00,369
before manually writing a whole bunch of

433
00:22:00,369 --> 00:22:02,710
REST API requests and

434
00:22:02,710 --> 00:22:07,000
for Peter or in curl yourself a favor

435
00:22:07,000 --> 00:22:09,640
and download postman which is a

436
00:22:09,640 --> 00:22:14,500
graphical API client for arrest api's it

437
00:22:14,500 --> 00:22:17,560
can import API documentation like those

438
00:22:17,560 --> 00:22:22,350
waffle and swagger files I mentioned and

439
00:22:22,500 --> 00:22:24,550
it also has these features called

440
00:22:24,550 --> 00:22:29,320
environments and collections that you go

441
00:22:29,320 --> 00:22:30,670
look them up those can be really helpful

442
00:22:30,670 --> 00:22:33,430
for easily switching between different

443
00:22:33,430 --> 00:22:36,700
roles in the application and different

444
00:22:36,700 --> 00:22:40,360
sample data to very quickly do manual

445
00:22:40,360 --> 00:22:42,220
authorization testing compared to if you

446
00:22:42,220 --> 00:22:44,800
were going to tediously go around with

447
00:22:44,800 --> 00:22:46,210
FERPA curl or whatever and keep

448
00:22:46,210 --> 00:22:50,800
switching around your token so kind of

449
00:22:50,800 --> 00:22:57,659
some miscellaneous things so cores or oh

450
00:22:57,840 --> 00:23:00,580
I don't define it in here so someone

451
00:23:00,580 --> 00:23:03,160
cannot question someone raised their

452
00:23:03,160 --> 00:23:10,740
hand what does cores stand for yeah yeah

453
00:23:11,730 --> 00:23:15,160
so hopefully a lot of you are already

454
00:23:15,160 --> 00:23:18,220
familiar with this but to understand

455
00:23:18,220 --> 00:23:20,050
cross-origin resource there you need to

456
00:23:20,050 --> 00:23:22,870
have a little bit understanding of same

457
00:23:22,870 --> 00:23:24,760
origin policy and what's protecting

458
00:23:24,760 --> 00:23:27,880
against so as you know you can do Ajax

459
00:23:27,880 --> 00:23:31,530
requests with the xmlhttprequest object

460
00:23:31,530 --> 00:23:36,460
and JavaScript can do requests give the

461
00:23:36,460 --> 00:23:40,330
response to it read that if you set the

462
00:23:40,330 --> 00:23:41,950
with credentials to that you can

463
00:23:41,950 --> 00:23:46,000
actually use cookies authors client

464
00:23:46,000 --> 00:23:48,160
certificates things like that so what

465
00:23:48,160 --> 00:23:51,460
stops attacker com from doing you know

466
00:23:51,460 --> 00:23:54,610
email comm slash API slash inbox and if

467
00:23:54,610 --> 00:23:56,560
I'm logged in just stealing all my

468
00:23:56,560 --> 00:23:59,380
emails well that's it is written policy

469
00:23:59,380 --> 00:24:04,510
if you try to do that your browser will

470
00:24:04,510 --> 00:24:08,680
compare your origin which is compare

471
00:24:08,680 --> 00:24:11,470
your origin to Gmail's origin and decide

472
00:24:11,470 --> 00:24:13,420
they're not the same at the same origin

473
00:24:13,420 --> 00:24:16,060
policy and forbid using that response

474
00:24:16,060 --> 00:24:18,550
quickly origin to scheme hostname a port

475
00:24:18,550 --> 00:24:22,960
so like HTTP you know comm 443 so

476
00:24:22,960 --> 00:24:26,400
sometimes you may need to as a developer

477
00:24:26,400 --> 00:24:29,710
explicitly get around that policy for

478
00:24:29,710 --> 00:24:31,300
your legitimate functionality in the

479
00:24:31,300 --> 00:24:36,580
application so developers thank you

480
00:24:36,580 --> 00:24:40,090
so bell perks like I said can override

481
00:24:40,090 --> 00:24:42,340
that functionality with something called

482
00:24:42,340 --> 00:24:45,040
course cross-origin resource sharing a

483
00:24:45,040 --> 00:24:49,300
bit more involved in this but say Brian

484
00:24:49,300 --> 00:24:52,060
calm made an example a thx call it the

485
00:24:52,060 --> 00:24:54,880
high school comm high school comm could

486
00:24:54,880 --> 00:24:57,400
then turn around and give two headers

487
00:24:57,400 --> 00:25:01,330
one access control allow origin HTTP

488
00:25:01,330 --> 00:25:04,720
Brian calm note the HTTP is in there

489
00:25:04,720 --> 00:25:06,460
because it's on origins not just host

490
00:25:06,460 --> 00:25:09,060
names and scheme as part of the origin

491
00:25:09,060 --> 00:25:14,050
the port is implicit and also access

492
00:25:14,050 --> 00:25:16,930
control allow credentials to true which

493
00:25:16,930 --> 00:25:19,600
would allow the calling JavaScript to

494
00:25:19,600 --> 00:25:22,720
use that with credentials property and

495
00:25:22,720 --> 00:25:25,060
so then in that case the browser would

496
00:25:25,060 --> 00:25:27,490
send that request in most cases would

497
00:25:27,490 --> 00:25:30,430
send the request user which is a CSRF

498
00:25:30,430 --> 00:25:34,120
issue but then it would allow Brian calm

499
00:25:34,120 --> 00:25:37,270
to actually read that response so course

500
00:25:37,270 --> 00:25:39,430
pitfalls or at least I guess a pitfall

501
00:25:39,430 --> 00:25:42,640
so you may have seen again in little

502
00:25:42,640 --> 00:25:44,770
burp scan but maybe not under not quite

503
00:25:44,770 --> 00:25:48,510
understood it a thing called

504
00:25:48,510 --> 00:25:51,580
cross-origin resource sharing arbitrary

505
00:25:51,580 --> 00:25:55,570
origin accepted so what is that so when

506
00:25:55,570 --> 00:25:57,070
your browser is making this request with

507
00:25:57,070 --> 00:25:59,710
Ajax or a lot of other requests it sends

508
00:25:59,710 --> 00:26:03,250
a header called origin and so you got

509
00:26:03,250 --> 00:26:06,670
your extra quest on attacker comm sends

510
00:26:06,670 --> 00:26:10,390
origin htps attacker comm there's a

511
00:26:10,390 --> 00:26:12,670
surprising number of misconfigured

512
00:26:12,670 --> 00:26:15,730
applications that will just take that

513
00:26:15,730 --> 00:26:17,470
origin header and reflect it straight

514
00:26:17,470 --> 00:26:19,710
back into access control allow origin

515
00:26:19,710 --> 00:26:24,550
and at the same time they may also set

516
00:26:24,550 --> 00:26:26,620
access control allow credentials to true

517
00:26:26,620 --> 00:26:28,880
if that's the case

518
00:26:28,880 --> 00:26:30,800
and you know not that this would happen

519
00:26:30,800 --> 00:26:33,380
but if Google did have that issue then

520
00:26:33,380 --> 00:26:35,450
we could just get everything from the

521
00:26:35,450 --> 00:26:40,160
inbox with our page you know you're kind

522
00:26:40,160 --> 00:26:41,420
of wondering why this is because this is

523
00:26:41,420 --> 00:26:46,370
a little odd actually it's gonna take

524
00:26:46,370 --> 00:26:48,770
you long to explain a point is it

525
00:26:48,770 --> 00:26:49,550
happens sometimes

526
00:26:49,550 --> 00:26:55,460
and it's insecure so test for it quickly

527
00:26:55,460 --> 00:26:57,890
I don't know how modern this is just a

528
00:26:57,890 --> 00:27:01,790
very and a basic thing so people are not

529
00:27:01,790 --> 00:27:05,330
are not generally just handwriting of

530
00:27:05,330 --> 00:27:08,210
their rest code they're using some kind

531
00:27:08,210 --> 00:27:11,390
of rest framework especially when

532
00:27:11,390 --> 00:27:13,790
they're in like the Java world a lot of

533
00:27:13,790 --> 00:27:17,030
those have various vulnerabilities

534
00:27:17,030 --> 00:27:21,350
sometimes pretty bad ones another quiz

535
00:27:21,350 --> 00:27:25,450
question hopefully someone will know so

536
00:27:25,450 --> 00:27:29,060
there's a stress stress rest API

537
00:27:29,060 --> 00:27:36,050
stress rest rcee issue year-and-a-half

538
00:27:36,050 --> 00:27:44,210
ish ago this was due to it passing X

539
00:27:44,210 --> 00:27:47,900
untrusted XML to a certain Java library

540
00:27:47,900 --> 00:27:55,580
does anyone know that library was its

541
00:27:55,580 --> 00:27:59,030
one called extreme it basically turns

542
00:27:59,030 --> 00:28:05,590
XML into arbitrary Java objects and it

543
00:28:05,590 --> 00:28:07,550
because of that you can get basically a

544
00:28:07,550 --> 00:28:09,560
job at the DC realization attack so

545
00:28:09,560 --> 00:28:13,220
point of this is check your rest

546
00:28:13,220 --> 00:28:15,860
frameworks for vulnerabilities this

547
00:28:15,860 --> 00:28:19,390
presentation in particular unsafe jax-rs

548
00:28:19,390 --> 00:28:23,650
breaking rest api is and can these two

549
00:28:23,650 --> 00:28:28,010
are pretty good I'll leave that up the

550
00:28:28,010 --> 00:28:30,380
last thing one minute we got one minute

551
00:28:30,380 --> 00:28:35,570
for QA actually less prize named a non

552
00:28:35,570 --> 00:28:37,370
main character from Aqua Teen Hunger

553
00:28:37,370 --> 00:28:39,650
Force not one of the four main

554
00:28:39,650 --> 00:28:41,860
characters

555
00:28:42,530 --> 00:28:51,990
yep any like 30 second question I'll

556
00:28:51,990 --> 00:28:54,470
post them on my Twitter which is in the

557
00:28:54,470 --> 00:28:57,090
guide and also it's just at frying hazel

558
00:28:57,090 --> 00:28:59,840
just my name

