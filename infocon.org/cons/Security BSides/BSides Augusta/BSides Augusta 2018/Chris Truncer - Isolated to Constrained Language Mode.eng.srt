1
00:00:14,560 --> 00:00:17,560
all right hello everyone I'm so yeah as

2
00:00:17,560 --> 00:00:19,420
he said I'm Chris Ron sir um this talk

3
00:00:19,420 --> 00:00:22,540
is isolated can to constrain language

4
00:00:22,540 --> 00:00:24,310
mode limiting the confines like also

5
00:00:24,310 --> 00:00:26,350
mentioned I'm primarily going to be

6
00:00:26,350 --> 00:00:28,720
talking about PowerShell and what

7
00:00:28,720 --> 00:00:30,340
everyone probably knows PowerShell is

8
00:00:30,340 --> 00:00:33,100
what's called process but like where do

9
00:00:33,100 --> 00:00:34,900
they try to protect the system and this

10
00:00:34,900 --> 00:00:36,580
is for a kernel mode code integrity and

11
00:00:36,580 --> 00:00:38,710
user mode code integrity and right over

12
00:00:38,710 --> 00:00:40,270
here is what constrained language mode

13
00:00:40,270 --> 00:00:44,800
is trying to like help protect so what

14
00:00:44,800 --> 00:00:46,480
is constrained language mode mean so

15
00:00:46,480 --> 00:00:49,110
like we said it's largely used to block

16
00:00:49,110 --> 00:00:51,490
dangerous data types so if we can just

17
00:00:51,490 --> 00:00:55,150
arbitrarily invoke Windows api's and use

18
00:00:55,150 --> 00:00:56,560
that to just inject shell code into

19
00:00:56,560 --> 00:00:58,680
memory like beacon or meaning cats or

20
00:00:58,680 --> 00:01:01,570
interact with dangerous or protective

21
00:01:01,570 --> 00:01:03,910
processes like L SAS then that's not

22
00:01:03,910 --> 00:01:05,170
something that you probably really want

23
00:01:05,170 --> 00:01:07,000
to be able to do or have anyone just to

24
00:01:07,000 --> 00:01:10,090
arbitrarily be able to do so it looks to

25
00:01:10,090 --> 00:01:12,520
block different tasks or things that you

26
00:01:12,520 --> 00:01:13,869
can do that it would consider dangerous

27
00:01:13,869 --> 00:01:17,170
if you build a powershell script using

28
00:01:17,170 --> 00:01:19,659
pure powershell so we're not invoking

29
00:01:19,659 --> 00:01:22,899
any sort of dotnet datatypes or anything

30
00:01:22,899 --> 00:01:25,390
like that then your code probably will

31
00:01:25,390 --> 00:01:29,069
work so let's kind of take a quick look

32
00:01:29,069 --> 00:01:32,109
constrain language mode data types so

33
00:01:32,109 --> 00:01:33,520
the way that this works is constrain

34
00:01:33,520 --> 00:01:35,890
language mode introduces whitelisted

35
00:01:35,890 --> 00:01:37,960
datatypes so this isn't like they only

36
00:01:37,960 --> 00:01:41,770
blacklist certain different types of

37
00:01:41,770 --> 00:01:43,600
data you can interact with it's largely

38
00:01:43,600 --> 00:01:45,789
if you aren't using an allowed datatype

39
00:01:45,789 --> 00:01:47,710
it's completely blocked and you're

40
00:01:47,710 --> 00:01:49,270
getting an error and so you would see

41
00:01:49,270 --> 00:01:51,399
something like this so oh sorry that's a

42
00:01:51,399 --> 00:01:53,409
little hard to see so what that says is

43
00:01:53,409 --> 00:01:56,020
if you're trying to run either a script

44
00:01:56,020 --> 00:01:58,929
or a tool or some sort of camila that it

45
00:01:58,929 --> 00:02:01,060
uses a restricted data type it's going

46
00:02:01,060 --> 00:02:03,490
to say cannot invoke method method

47
00:02:03,490 --> 00:02:05,770
invocation is supported only in core

48
00:02:05,770 --> 00:02:07,719
types of this language mode meaning that

49
00:02:07,719 --> 00:02:11,640
is only allowed in full language mode

50
00:02:12,780 --> 00:02:14,950
all right so the next question is okay

51
00:02:14,950 --> 00:02:16,420
how can we obviously test what's allowed

52
00:02:16,420 --> 00:02:18,819
well the first thing you can do is go to

53
00:02:18,819 --> 00:02:20,920
MSDN and look at their documentation the

54
00:02:20,920 --> 00:02:22,989
next thing that you can do is test it

55
00:02:22,989 --> 00:02:25,000
and figure out what msdn is missing in

56
00:02:25,000 --> 00:02:27,430
the documentation and actually find the

57
00:02:27,430 --> 00:02:28,540
real data types that you

58
00:02:28,540 --> 00:02:32,769
use so PowerShell pro mat Graber

59
00:02:32,769 --> 00:02:34,689
I like this because I don't think you

60
00:02:34,689 --> 00:02:36,159
can basically give a PowerShell talk

61
00:02:36,159 --> 00:02:37,599
today about anything in the world

62
00:02:37,599 --> 00:02:39,760
without somehow referencing Mac or Ava

63
00:02:39,760 --> 00:02:41,049
and the work that he's done because he's

64
00:02:41,049 --> 00:02:43,420
done a lot of awesome stuff and so of

65
00:02:43,420 --> 00:02:47,019
course mat also wrote really a script

66
00:02:47,019 --> 00:02:48,400
but really more like a one-liner that

67
00:02:48,400 --> 00:02:50,799
can enumerate different data types that

68
00:02:50,799 --> 00:02:52,390
are actually allowed and constrained

69
00:02:52,390 --> 00:02:55,090
language mode so hint there may be some

70
00:02:55,090 --> 00:02:57,849
differences so what are the big things

71
00:02:57,849 --> 00:03:00,609
that are aren't allowed welcome objects

72
00:03:00,609 --> 00:03:03,579
are supposed to be blocked if you use

73
00:03:03,579 --> 00:03:05,709
add type in your PowerShell code that

74
00:03:05,709 --> 00:03:08,470
Camilla is completely blocked different

75
00:03:08,470 --> 00:03:11,560
PowerShell classes are blocked type

76
00:03:11,560 --> 00:03:13,329
conversion isn't allowed unless it's

77
00:03:13,329 --> 00:03:15,329
using an approved whitelisted data type

78
00:03:15,329 --> 00:03:18,489
dot sourcing your code is not allowed

79
00:03:18,489 --> 00:03:21,340
and again it comes back to if you're

80
00:03:21,340 --> 00:03:23,169
using anything with dotnet only approve

81
00:03:23,169 --> 00:03:25,780
dot net data types are allowed so this

82
00:03:25,780 --> 00:03:28,720
is a giant list but this is actually all

83
00:03:28,720 --> 00:03:31,599
that's listed on MSDN page for a

84
00:03:31,599 --> 00:03:32,769
constrained language mode on what's

85
00:03:32,769 --> 00:03:34,269
allowed so you have some stuff that

86
00:03:34,269 --> 00:03:35,799
makes sense right you have like bool so

87
00:03:35,799 --> 00:03:38,019
you can do like basic true/false kind of

88
00:03:38,019 --> 00:03:39,819
determinations you have different

89
00:03:39,819 --> 00:03:42,069
integers that are allowed you can create

90
00:03:42,069 --> 00:03:43,930
a PS credential object in case you're

91
00:03:43,930 --> 00:03:46,659
trying to authenticate to some sort of

92
00:03:46,659 --> 00:03:48,549
remote resource that requires a PS

93
00:03:48,549 --> 00:03:51,400
credential different integers so there's

94
00:03:51,400 --> 00:03:53,290
different types of data types that are

95
00:03:53,290 --> 00:03:59,109
allowed so obviously that's a lot but

96
00:03:59,109 --> 00:04:00,549
the question is then is that

97
00:04:00,549 --> 00:04:03,760
all-inclusive so MSDN states that that

98
00:04:03,760 --> 00:04:06,430
is like the end-all-be-all a list of

99
00:04:06,430 --> 00:04:09,069
data that's allowed so again we should

100
00:04:09,069 --> 00:04:10,870
kind of follow a something-something

101
00:04:10,870 --> 00:04:13,090
trust but validate sort of process so

102
00:04:13,090 --> 00:04:15,849
let's kind of look into this like I'd

103
00:04:15,849 --> 00:04:19,478
mentioned mat Graber did release a not

104
00:04:19,478 --> 00:04:21,159
release but he just publicized a

105
00:04:21,159 --> 00:04:23,349
one-liner that it captures the different

106
00:04:23,349 --> 00:04:25,599
data types that are allowed and this is

107
00:04:25,599 --> 00:04:26,889
basically what you're looking at and so

108
00:04:26,889 --> 00:04:28,840
it's just this reference that assembly

109
00:04:28,840 --> 00:04:31,389
gets system management automation core

110
00:04:31,389 --> 00:04:34,060
types and then we're looking at just to

111
00:04:34,060 --> 00:04:35,620
pull this sort of information back right

112
00:04:35,620 --> 00:04:37,389
here are the items non public static and

113
00:04:37,389 --> 00:04:39,159
you can I mean you can all read the

114
00:04:39,159 --> 00:04:41,330
command but this is what will actually

115
00:04:41,330 --> 00:04:44,259
to enumerate what data types are allowed

116
00:04:44,259 --> 00:04:48,169
so I cut it off this is not the entire

117
00:04:48,169 --> 00:04:50,870
list because would have been too big of

118
00:04:50,870 --> 00:04:52,490
a screenshot or even though this is

119
00:04:52,490 --> 00:04:54,169
already fairly large but you can see

120
00:04:54,169 --> 00:04:55,009
that there's some of the same

121
00:04:55,009 --> 00:04:56,720
information right so we have integers

122
00:04:56,720 --> 00:04:59,259
again we have different pools we have

123
00:04:59,259 --> 00:05:01,789
some sim classes so that we can also

124
00:05:01,789 --> 00:05:02,949
interact with that are listed here

125
00:05:02,949 --> 00:05:05,419
there's a variety of just different data

126
00:05:05,419 --> 00:05:08,090
types that are going to be listed here a

127
00:05:08,090 --> 00:05:09,440
lot of them are going to be the same but

128
00:05:09,440 --> 00:05:11,000
some of them may be some new additions

129
00:05:11,000 --> 00:05:12,580
that aren't listed in MST ends

130
00:05:12,580 --> 00:05:14,599
documentation you know it's funny I was

131
00:05:14,599 --> 00:05:16,340
talking a couple different friends of

132
00:05:16,340 --> 00:05:18,530
mine that are also MVPs and they stated

133
00:05:18,530 --> 00:05:21,409
that Microsoft may have actually kind of

134
00:05:21,409 --> 00:05:23,240
gotten rid of their documentation staff

135
00:05:23,240 --> 00:05:26,810
and that is up to each project that is

136
00:05:26,810 --> 00:05:29,449
in charge of certain aspects of MSDN or

137
00:05:29,449 --> 00:05:30,530
like whatever they're doing within

138
00:05:30,530 --> 00:05:33,129
Microsoft it largely relies on them to

139
00:05:33,129 --> 00:05:35,300
write their own documentation for that

140
00:05:35,300 --> 00:05:36,830
now if that's incorrect someone tell me

141
00:05:36,830 --> 00:05:39,550
but that's what I was told and so

142
00:05:39,550 --> 00:05:41,210
hopefully we're gonna start getting

143
00:05:41,210 --> 00:05:42,710
better documented information that we

144
00:05:42,710 --> 00:05:44,000
can look at and when you just want to

145
00:05:44,000 --> 00:05:46,580
try to see what is the current status of

146
00:05:46,580 --> 00:05:47,930
whatever we're looking for with

147
00:05:47,930 --> 00:05:53,029
Microsoft products so here's an example

148
00:05:53,029 --> 00:05:55,490
and I'll just we'll skip to the next one

149
00:05:55,490 --> 00:05:57,620
just to get through this so here's an

150
00:05:57,620 --> 00:05:59,270
example of what I'm doing is I'm running

151
00:05:59,270 --> 00:06:02,150
get credential to capture credential

152
00:06:02,150 --> 00:06:03,529
information so that's a username and

153
00:06:03,529 --> 00:06:05,509
password and so we can see that that's a

154
00:06:05,509 --> 00:06:07,699
PS credential object right here now

155
00:06:07,699 --> 00:06:08,779
here's another thing that we're doing is

156
00:06:08,779 --> 00:06:12,229
um we're creating a new sim session with

157
00:06:12,229 --> 00:06:15,440
a remote system and I'm passing to the

158
00:06:15,440 --> 00:06:16,940
creds that we just created with get

159
00:06:16,940 --> 00:06:19,009
credential and this session objects are

160
00:06:19,009 --> 00:06:20,840
decom session options like that's the

161
00:06:20,840 --> 00:06:22,909
data type that's listed if you actually

162
00:06:22,909 --> 00:06:25,729
look at and try to expect through

163
00:06:25,729 --> 00:06:27,139
PowerShell with the data type this in

164
00:06:27,139 --> 00:06:29,029
this case you can see right here it is a

165
00:06:29,029 --> 00:06:31,879
sim session that we're creating that's

166
00:06:31,879 --> 00:06:33,440
that's the data type that's allowed and

167
00:06:33,440 --> 00:06:35,479
this is all done within constrained

168
00:06:35,479 --> 00:06:37,400
language mode so some of these were

169
00:06:37,400 --> 00:06:40,250
listed right on MSDN s documentation but

170
00:06:40,250 --> 00:06:42,469
like the sim session information I don't

171
00:06:42,469 --> 00:06:44,740
know if it actually falls under what

172
00:06:44,740 --> 00:06:47,840
Microsoft lists as their management

173
00:06:47,840 --> 00:06:49,969
class here and I tried asking other

174
00:06:49,969 --> 00:06:52,279
individuals if that is where it's

175
00:06:52,279 --> 00:06:54,860
somehow lies under that class

176
00:06:54,860 --> 00:06:58,189
it really gets a great answer so I'm

177
00:06:58,189 --> 00:07:00,319
interested and if anyone knows the

178
00:07:00,319 --> 00:07:01,969
answer I would love to talk with you

179
00:07:01,969 --> 00:07:04,159
after as well because just different

180
00:07:04,159 --> 00:07:05,150
things that you can seem to do in

181
00:07:05,150 --> 00:07:06,409
constrained linkage mode again aren't

182
00:07:06,409 --> 00:07:16,159
completely documented all right so long

183
00:07:16,159 --> 00:07:18,469
story short there's still a lot of

184
00:07:18,469 --> 00:07:20,000
different data types that you are

185
00:07:20,000 --> 00:07:21,770
allowed what you can do and interact

186
00:07:21,770 --> 00:07:23,629
with and constrain languish mode the

187
00:07:23,629 --> 00:07:25,189
trick is to ensure that you're

188
00:07:25,189 --> 00:07:27,830
interacting or using and allowed data

189
00:07:27,830 --> 00:07:29,120
type before you start developing

190
00:07:29,120 --> 00:07:31,520
different tools or as you run into

191
00:07:31,520 --> 00:07:33,319
issues try to figure out an alternate

192
00:07:33,319 --> 00:07:35,750
way to do whatever it is you're trying

193
00:07:35,750 --> 00:07:37,550
to do without interacting with that

194
00:07:37,550 --> 00:07:39,469
restricted data type the easiest way to

195
00:07:39,469 --> 00:07:41,599
do it is to check MSDN Docs if you can

196
00:07:41,599 --> 00:07:43,520
figure out whatever you trying to do is

197
00:07:43,520 --> 00:07:45,409
allowed perfect if you can use macros

198
00:07:45,409 --> 00:07:47,719
one-liner or really the honestly the way

199
00:07:47,719 --> 00:07:49,909
that I develop a lot of code that is in

200
00:07:49,909 --> 00:07:51,889
constrained language mode is I'm just

201
00:07:51,889 --> 00:07:53,750
enforcing constrain language mode and

202
00:07:53,750 --> 00:07:55,729
then testing and writing code until

203
00:07:55,729 --> 00:07:57,080
something errors out and then I'm trying

204
00:07:57,080 --> 00:07:58,520
to figure out okay how can I do this a

205
00:07:58,520 --> 00:08:02,779
different way so again the easiest way

206
00:08:02,779 --> 00:08:05,150
to enforce constrain language mode is to

207
00:08:05,150 --> 00:08:07,400
set it yourself and so this is that host

208
00:08:07,400 --> 00:08:09,199
at run space that language mode that I

209
00:08:09,199 --> 00:08:11,960
referenced earlier you can just run this

210
00:08:11,960 --> 00:08:13,580
within PowerShell and set it to

211
00:08:13,580 --> 00:08:15,440
constrain language mode and that

212
00:08:15,440 --> 00:08:17,029
essentially that session that you're

213
00:08:17,029 --> 00:08:18,770
interacting with from then on unless you

214
00:08:18,770 --> 00:08:20,810
were to change this actually is using

215
00:08:20,810 --> 00:08:22,310
constrain language mode versus full

216
00:08:22,310 --> 00:08:29,300
language mode so here's an example right

217
00:08:29,300 --> 00:08:31,939
now we're in full language mode as you

218
00:08:31,939 --> 00:08:33,589
can hopefully somewhat see right here

219
00:08:33,589 --> 00:08:35,958
and we're trying to do this figure out

220
00:08:35,958 --> 00:08:37,940
the square root of nine and so that's

221
00:08:37,940 --> 00:08:39,589
allowed we're getting three is returned

222
00:08:39,589 --> 00:08:41,690
well here I'm now changing that to host

223
00:08:41,690 --> 00:08:43,429
run space language mode equals the

224
00:08:43,429 --> 00:08:45,350
constrain language sorry about the

225
00:08:45,350 --> 00:08:48,140
coloring again on this and if you then

226
00:08:48,140 --> 00:08:50,300
try to run that same math square root

227
00:08:50,300 --> 00:08:52,730
command essentially to determine what's

228
00:08:52,730 --> 00:08:54,500
the square root of nine that's actually

229
00:08:54,500 --> 00:08:56,390
not using an allowed data type in

230
00:08:56,390 --> 00:08:58,339
constrain language mode and square root

231
00:08:58,339 --> 00:09:02,360
which is you would think fairly easy not

232
00:09:02,360 --> 00:09:05,810
benign or I mean is benign is restricted

233
00:09:05,810 --> 00:09:07,980
and is not allowed at all

234
00:09:07,980 --> 00:09:11,500
so clm this is basically the biggest

235
00:09:11,500 --> 00:09:14,170
limitation for attackers on seal

236
00:09:14,170 --> 00:09:17,470
protected systems if an attacker can't

237
00:09:17,470 --> 00:09:19,060
weaponize any of their powershell

238
00:09:19,060 --> 00:09:20,950
scripts because they all somewhat either

239
00:09:20,950 --> 00:09:24,580
use restricted data types or restricted

240
00:09:24,580 --> 00:09:26,320
or different commandments that use

241
00:09:26,320 --> 00:09:27,820
restricted data types is going to be

242
00:09:27,820 --> 00:09:30,760
blocked so it's it's not like

243
00:09:30,760 --> 00:09:32,170
application whitelisting where an

244
00:09:32,170 --> 00:09:33,880
attacker could then try to figure out

245
00:09:33,880 --> 00:09:35,830
okay how can i administer their

246
00:09:35,830 --> 00:09:37,960
application whitelisting solution or

247
00:09:37,960 --> 00:09:39,190
system whatever it is that they're using

248
00:09:39,190 --> 00:09:42,130
and whitelist it it's just outright

249
00:09:42,130 --> 00:09:44,320
blocked so it just won't work with in

250
00:09:44,320 --> 00:09:46,180
construing the language mode unless the

251
00:09:46,180 --> 00:09:48,040
attacker actually goes back and tries to

252
00:09:48,040 --> 00:09:50,440
figure out how to rewrite their tools to

253
00:09:50,440 --> 00:09:54,490
do something that is allowed all right

254
00:09:54,490 --> 00:09:55,990
so let's kind of translate all this does

255
00:09:55,990 --> 00:09:57,490
a lot of information thrown back at you

256
00:09:57,490 --> 00:10:01,150
what works and what doesn't so let's run

257
00:10:01,150 --> 00:10:03,070
some quick tests so again you saw a

258
00:10:03,070 --> 00:10:05,050
square root we'll see it again we'll

259
00:10:05,050 --> 00:10:07,360
look at base64 encoding and then let's

260
00:10:07,360 --> 00:10:08,740
look at shell code injection what an

261
00:10:08,740 --> 00:10:11,290
attack and may try to do to compromise a

262
00:10:11,290 --> 00:10:14,980
system that they're on or compromised

263
00:10:14,980 --> 00:10:16,720
system that they're trying to get a

264
00:10:16,720 --> 00:10:19,890
beacon or meterpreter running

265
00:10:24,400 --> 00:10:26,320
all right so what we have here is this

266
00:10:26,320 --> 00:10:28,360
is just showing host run space that

267
00:10:28,360 --> 00:10:30,070
languish mode is right now we're in full

268
00:10:30,070 --> 00:10:32,800
language mode so this is again doing

269
00:10:32,800 --> 00:10:34,420
that math trying to figure out square

270
00:10:34,420 --> 00:10:36,190
root this is kind of a validation test

271
00:10:36,190 --> 00:10:37,420
and make sure that we are in that and it

272
00:10:37,420 --> 00:10:38,980
does work we do get three returned back

273
00:10:38,980 --> 00:10:41,740
to us and so this is where I am trying

274
00:10:41,740 --> 00:10:45,430
to now perform base64 encoding so what

275
00:10:45,430 --> 00:10:47,260
this says is just 40 north and B sides

276
00:10:47,260 --> 00:10:49,360
Augusta and we're trying to get the

277
00:10:49,360 --> 00:10:52,090
bytes of that string and once we get the

278
00:10:52,090 --> 00:10:54,820
bytes we are converting to basics t4

279
00:10:54,820 --> 00:10:56,350
string and we can see that that's our

280
00:10:56,350 --> 00:10:59,710
base64 encoded result so this is all

281
00:10:59,710 --> 00:11:01,120
allowed like you would expect in full

282
00:11:01,120 --> 00:11:04,450
language mode just normal powershell all

283
00:11:04,450 --> 00:11:05,680
I'm going to do is now change in the

284
00:11:05,680 --> 00:11:07,540
host run space language mode and we're

285
00:11:07,540 --> 00:11:12,760
changing into constraint language and so

286
00:11:12,760 --> 00:11:14,710
now we're gonna kind of try to conduct

287
00:11:14,710 --> 00:11:16,900
the same test we're gonna do the same

288
00:11:16,900 --> 00:11:19,420
thing here with Maddy math again to try

289
00:11:19,420 --> 00:11:20,860
to find the square root we can see that

290
00:11:20,860 --> 00:11:23,470
that is block that's not allowed well

291
00:11:23,470 --> 00:11:25,090
what if we want to just basics t4

292
00:11:25,090 --> 00:11:27,160
encoded string so we have to start

293
00:11:27,160 --> 00:11:29,110
getting the bytes there and then encode

294
00:11:29,110 --> 00:11:31,120
it but that is also completely blocked

295
00:11:31,120 --> 00:11:33,310
sorry that went kind of fast but that

296
00:11:33,310 --> 00:11:36,100
was blocked there so finally what this

297
00:11:36,100 --> 00:11:37,870
payload ds1 is is I don't know if

298
00:11:37,870 --> 00:11:41,320
anyone's you use cobalt strike similar

299
00:11:41,320 --> 00:11:43,270
to meterpreter this is basically an

300
00:11:43,270 --> 00:11:45,490
output for a PowerShell based stager so

301
00:11:45,490 --> 00:11:47,800
we run that PowerShell code and then we

302
00:11:47,800 --> 00:11:49,300
would get a beacon on our system so same

303
00:11:49,300 --> 00:11:51,930
thing as if you were using MSF venoms

304
00:11:51,930 --> 00:11:54,580
powershell output to get meterpreter on

305
00:11:54,580 --> 00:11:57,100
your system so if we try to dot slash

306
00:11:57,100 --> 00:11:59,830
call that it's going to be blocked for

307
00:11:59,830 --> 00:12:00,700
multiple reasons

308
00:12:00,700 --> 00:12:02,800
to be honest but it's just completely

309
00:12:02,800 --> 00:12:06,270
not allowed so constraint language mode

310
00:12:06,270 --> 00:12:09,190
is really good for locking down systems

311
00:12:09,190 --> 00:12:11,470
and starting to restrict some of the

312
00:12:11,470 --> 00:12:13,300
different features that attackers try to

313
00:12:13,300 --> 00:12:16,330
use to compromise either a local system

314
00:12:16,330 --> 00:12:19,200
or a remote system

315
00:12:28,550 --> 00:12:31,240
okay

316
00:12:31,890 --> 00:12:35,250
alright so next up what can we do what

317
00:12:35,250 --> 00:12:37,800
works and what doesn't so with

318
00:12:37,800 --> 00:12:39,570
everything that's kind of blocked it's

319
00:12:39,570 --> 00:12:41,910
kind of out of the out right from using

320
00:12:41,910 --> 00:12:44,160
constrain language mode what's left well

321
00:12:44,160 --> 00:12:45,930
a lot of people one of the things that

322
00:12:45,930 --> 00:12:47,459
you can do as awesome and PowerShell is

323
00:12:47,459 --> 00:12:50,010
largely you see sharp with in any sort

324
00:12:50,010 --> 00:12:52,579
of PowerShell code that you want and run

325
00:12:52,579 --> 00:12:55,320
c-sharp code within it well if you're

326
00:12:55,320 --> 00:12:56,640
thinking of trying to convert your

327
00:12:56,640 --> 00:12:58,649
c-sharp code and using it in PowerShell

328
00:12:58,649 --> 00:13:01,860
don't because it's largely its profits

329
00:13:01,860 --> 00:13:03,089
highly unlikely that it's going to work

330
00:13:03,089 --> 00:13:04,860
but the interesting thing is if you're

331
00:13:04,860 --> 00:13:06,390
just trying to administer a computer and

332
00:13:06,390 --> 00:13:07,410
like you use either built-in

333
00:13:07,410 --> 00:13:10,200
commandments or just pure PowerShell to

334
00:13:10,200 --> 00:13:12,450
use something that's probably going to

335
00:13:12,450 --> 00:13:14,040
work right because like we said in the

336
00:13:14,040 --> 00:13:15,839
beginning the whole point of constrained

337
00:13:15,839 --> 00:13:18,420
language mode is to restrict sensitive

338
00:13:18,420 --> 00:13:21,450
data types but allow user administrators

339
00:13:21,450 --> 00:13:23,600
to still administer their computers so

340
00:13:23,600 --> 00:13:26,070
one of the things that obviously I've

341
00:13:26,070 --> 00:13:28,200
worked on veil before antivirus is

342
00:13:28,200 --> 00:13:29,310
always kind of an interesting thing for

343
00:13:29,310 --> 00:13:31,170
myself and just attackers in general but

344
00:13:31,170 --> 00:13:34,500
look at is on antivirus administration

345
00:13:34,500 --> 00:13:37,500
you can do that right now currently with

346
00:13:37,500 --> 00:13:40,589
PowerShell so one of the interesting

347
00:13:40,589 --> 00:13:42,120
things that I really like our

348
00:13:42,120 --> 00:13:44,699
Microsoft's attack surface reduction

349
00:13:44,699 --> 00:13:46,800
rules has anyone heard of ASR attack

350
00:13:46,800 --> 00:13:49,949
cypress reduction rules awesome usually

351
00:13:49,949 --> 00:13:51,449
come grab one of these books I have to

352
00:13:51,449 --> 00:13:53,160
give these away so make your way down

353
00:13:53,160 --> 00:13:54,980
and grab grab one whatever you'd like

354
00:13:54,980 --> 00:13:57,180
attack surface reduction rules are

355
00:13:57,180 --> 00:14:02,160
really into coal I think because the

356
00:14:02,160 --> 00:14:04,019
only downside to it is it's only allowed

357
00:14:04,019 --> 00:14:07,940
on like Windows 10 or Server 2016 but

358
00:14:07,940 --> 00:14:10,680
you can do a lot of enforce a lot of

359
00:14:10,680 --> 00:14:14,329
unique rules such as you can prevent

360
00:14:14,329 --> 00:14:17,070
processes from being spawned on a system

361
00:14:17,070 --> 00:14:20,610
that were initiated via PS exec or WMI

362
00:14:20,610 --> 00:14:24,510
you can also prevent macros from running

363
00:14:24,510 --> 00:14:26,910
or prevent like office documents from

364
00:14:26,910 --> 00:14:28,890
spawning or excuse me office processes

365
00:14:28,890 --> 00:14:31,860
from spawning child processes right like

366
00:14:31,860 --> 00:14:33,449
why would Microsoft Word need to spawn

367
00:14:33,449 --> 00:14:35,430
PowerShell on a system or command dot

368
00:14:35,430 --> 00:14:37,160
exe you you it's probably no reason

369
00:14:37,160 --> 00:14:41,180
reason that that's really loud yes sir

370
00:15:07,830 --> 00:15:10,110
it's gonna depend upon what you're doing

371
00:15:10,110 --> 00:15:13,050
so now if we were talking device guarded

372
00:15:13,050 --> 00:15:15,660
Windows Defender application control my

373
00:15:15,660 --> 00:15:17,339
answer would outright just be no because

374
00:15:17,339 --> 00:15:20,610
it's it doesn't allow you to you

375
00:15:20,610 --> 00:15:22,260
basically you do you assigned where you

376
00:15:22,260 --> 00:15:24,959
give trust and so that Windows the

377
00:15:24,959 --> 00:15:28,649
device guard enforces trusted rules on

378
00:15:28,649 --> 00:15:31,230
both executables but also libraries from

379
00:15:31,230 --> 00:15:33,680
being loaded now if you are able to

380
00:15:33,680 --> 00:15:36,779
write code that loads different dll's or

381
00:15:36,779 --> 00:15:38,790
different or conducts the actions that

382
00:15:38,790 --> 00:15:40,380
you want to do basic kind of replace the

383
00:15:40,380 --> 00:15:42,480
DLL in a constrained language mode

384
00:15:42,480 --> 00:15:44,130
compliant manner then that would work

385
00:15:44,130 --> 00:15:46,230
but the only thing with and I'll

386
00:15:46,230 --> 00:15:47,610
actually I think you talked about in a

387
00:15:47,610 --> 00:15:49,769
couple slides a constrain language mode

388
00:15:49,769 --> 00:15:52,829
is useful to stop PowerShell but if you

389
00:15:52,829 --> 00:15:55,860
don't enforce constrain language mode in

390
00:15:55,860 --> 00:15:57,959
addition to application whitelisting

391
00:15:57,959 --> 00:16:01,019
then it's kind of not super useful

392
00:16:01,019 --> 00:16:03,209
because let's say I wrote a malicious

393
00:16:03,209 --> 00:16:05,130
PowerShell code just like you were kind

394
00:16:05,130 --> 00:16:06,930
of talking about any wrote in c-sharp

395
00:16:06,930 --> 00:16:09,360
and you have powershell run that well

396
00:16:09,360 --> 00:16:10,890
let's say constrain language mode is

397
00:16:10,890 --> 00:16:13,470
invoked or protecting the system but

398
00:16:13,470 --> 00:16:15,839
application whitelisting isn't well in

399
00:16:15,839 --> 00:16:17,640
that case I would just take that c-sharp

400
00:16:17,640 --> 00:16:20,910
code compile it to a library or into a

401
00:16:20,910 --> 00:16:23,339
PE and executable and then just run it

402
00:16:23,339 --> 00:16:24,839
that way because constraint language

403
00:16:24,839 --> 00:16:27,300
mode doesn't protect against executables

404
00:16:27,300 --> 00:16:28,860
from running on the system it's only

405
00:16:28,860 --> 00:16:38,930
PowerShell so yes

406
00:16:40,990 --> 00:16:46,180
yeah well so yeah sorry so they're

407
00:16:46,180 --> 00:16:49,390
asking if if it if constrain language

408
00:16:49,390 --> 00:16:52,330
mode only protects powershell exe or a

409
00:16:52,330 --> 00:16:55,180
PowerShell ISE or is there another way

410
00:16:55,180 --> 00:16:58,150
that you can maybe get around it so the

411
00:16:58,150 --> 00:16:59,920
issue it's going to be protecting it on

412
00:16:59,920 --> 00:17:02,200
the system management to automation dll

413
00:17:02,200 --> 00:17:06,220
so if you can't it basically if you you

414
00:17:06,220 --> 00:17:08,440
have to it's not restricted to just the

415
00:17:08,440 --> 00:17:11,230
exe itself because PowerShell itself

416
00:17:11,230 --> 00:17:13,839
isn't powershell exe it's the system

417
00:17:13,839 --> 00:17:15,760
management that automation DLL that

418
00:17:15,760 --> 00:17:20,740
powershell that exe loads so it's it's

419
00:17:20,740 --> 00:17:22,569
within that DLL essentially anytime that

420
00:17:22,569 --> 00:17:23,440
that's loaded you're trying to run

421
00:17:23,440 --> 00:17:24,819
PowerShell code that that is what's

422
00:17:24,819 --> 00:17:28,919
protected but again if your

423
00:17:41,620 --> 00:17:44,409
it's so the question was if you load

424
00:17:44,409 --> 00:17:47,279
system management to automation DLL and

425
00:17:47,279 --> 00:17:49,240
would that still be loaded in

426
00:17:49,240 --> 00:17:50,980
constrained language mode the answer is

427
00:17:50,980 --> 00:17:52,750
it depends like how was constrained

428
00:17:52,750 --> 00:17:53,919
language mode enforced on your

429
00:17:53,919 --> 00:17:55,870
environment if you're doing kind of what

430
00:17:55,870 --> 00:17:58,960
we did back here where we're just a

431
00:17:58,960 --> 00:18:00,429
couple slides back but we're just

432
00:18:00,429 --> 00:18:02,380
setting it while having powershell

433
00:18:02,380 --> 00:18:05,320
started the no because that's because

434
00:18:05,320 --> 00:18:07,929
you're not in that session of PowerShell

435
00:18:07,929 --> 00:18:09,490
essentially you're loading it in another

436
00:18:09,490 --> 00:18:11,710
program but if you're enforcing

437
00:18:11,710 --> 00:18:13,059
constrained language mode through some

438
00:18:13,059 --> 00:18:15,100
sort of GPO or something like that then

439
00:18:15,100 --> 00:18:18,299
it should be protected at that point

440
00:18:19,590 --> 00:18:23,039
okay yes

441
00:18:30,540 --> 00:18:33,390
I can't speak at unto advanced threat

442
00:18:33,390 --> 00:18:35,100
protection so I don't want to give bad

443
00:18:35,100 --> 00:18:35,670
information

444
00:18:35,670 --> 00:18:38,100
I would believe that it it should but I

445
00:18:38,100 --> 00:18:39,630
don't hundred seven know that answer so

446
00:18:39,630 --> 00:18:40,680
I did I just want to give you the wrong

447
00:18:40,680 --> 00:18:46,620
answer oh sorry so the question was how

448
00:18:46,620 --> 00:18:49,230
does that actually relate to Microsoft

449
00:18:49,230 --> 00:18:51,090
ATP advanced threat protection does that

450
00:18:51,090 --> 00:18:54,090
get reported in to them and and like

451
00:18:54,090 --> 00:18:56,040
he's mentioned I actually I believe it

452
00:18:56,040 --> 00:18:57,630
would but I I don't know the answer for

453
00:18:57,630 --> 00:18:58,940
hundred percent certainty

454
00:18:58,940 --> 00:19:01,020
all right so kind of going back to this

455
00:19:01,020 --> 00:19:03,300
antivirus administration so there are

456
00:19:03,300 --> 00:19:06,720
ASR rules which can do really cool rules

457
00:19:06,720 --> 00:19:08,430
that aren't enabled by default and are

458
00:19:08,430 --> 00:19:11,040
only allowed to run on Windows 10 or

459
00:19:11,040 --> 00:19:13,230
Server 2016 and so like I mentioned you

460
00:19:13,230 --> 00:19:16,350
could completely stop processes excuse

461
00:19:16,350 --> 00:19:22,350
me from being spawned via WMI or the

462
00:19:22,350 --> 00:19:24,000
customer on a blanket what the other one

463
00:19:24,000 --> 00:19:26,310
was now anyways there's a bunch of

464
00:19:26,310 --> 00:19:27,570
different rules that are out there and

465
00:19:27,570 --> 00:19:29,880
you can set figurations across like you

466
00:19:29,880 --> 00:19:31,110
across the entire domain however you

467
00:19:31,110 --> 00:19:33,450
want so my thought is well if we can

468
00:19:33,450 --> 00:19:35,610
enable these rules using PowerShell and

469
00:19:35,610 --> 00:19:37,650
we can do this in constrained language

470
00:19:37,650 --> 00:19:40,020
mode we can also likely disable the

471
00:19:40,020 --> 00:19:42,360
rules well if we can also set

472
00:19:42,360 --> 00:19:44,160
configurations for antivirus and

473
00:19:44,160 --> 00:19:46,200
constrain language mode an attacker can

474
00:19:46,200 --> 00:19:48,360
probably do the inverse operation so

475
00:19:48,360 --> 00:19:50,130
it's probably useful from an attackers

476
00:19:50,130 --> 00:19:52,860
perspective right so let's look at this

477
00:19:52,860 --> 00:19:55,350
so there's a command link called get MP

478
00:19:55,350 --> 00:19:58,230
preference what this command lit does is

479
00:19:58,230 --> 00:20:00,540
it obtains the antivirus configuration

480
00:20:00,540 --> 00:20:02,460
of the system that we're targeting the

481
00:20:02,460 --> 00:20:03,810
interesting thing is you can run this

482
00:20:03,810 --> 00:20:06,720
command locally on your Windows 10

483
00:20:06,720 --> 00:20:09,750
system you can also run it remotely on a

484
00:20:09,750 --> 00:20:11,970
system that you're targeting so what

485
00:20:11,970 --> 00:20:13,380
does it use for authentication

486
00:20:13,380 --> 00:20:15,780
well we're using sim sessions well this

487
00:20:15,780 --> 00:20:17,730
interesting thing was we just looked at

488
00:20:17,730 --> 00:20:19,170
kind of the very beginning of this talk

489
00:20:19,170 --> 00:20:22,950
is what can we actually do in CLM mode

490
00:20:22,950 --> 00:20:24,780
constrain language mode is we can create

491
00:20:24,780 --> 00:20:26,490
sim session that is allowed within

492
00:20:26,490 --> 00:20:28,860
constrained language mode so let's kind

493
00:20:28,860 --> 00:20:29,910
of give that a shot and see what it

494
00:20:29,910 --> 00:20:31,710
looks like I have a video will show in

495
00:20:31,710 --> 00:20:34,470
just a second but right now this is what

496
00:20:34,470 --> 00:20:36,660
you get if you run get MP preference on

497
00:20:36,660 --> 00:20:39,060
your local system if there's a whole

498
00:20:39,060 --> 00:20:40,170
bunch of different information about

499
00:20:40,170 --> 00:20:41,880
antivirus right here but then some of

500
00:20:41,880 --> 00:20:43,240
the more interesting ones me

501
00:20:43,240 --> 00:20:45,580
be the exclusion extension which

502
00:20:45,580 --> 00:20:48,250
extensions are we excluding from having

503
00:20:48,250 --> 00:20:50,950
antivirus look at what path are we kind

504
00:20:50,950 --> 00:20:53,710
of just allowing to exist and like

505
00:20:53,710 --> 00:20:55,420
excluding anything within that path or

506
00:20:55,420 --> 00:20:57,429
what about certain processes that are

507
00:20:57,429 --> 00:20:58,809
allowed are we excluding any of those

508
00:20:58,809 --> 00:21:02,980
and so what this does here is at the

509
00:21:02,980 --> 00:21:05,559
very top we're creating ApS credential

510
00:21:05,559 --> 00:21:08,170
object using convert to secure string to

511
00:21:08,170 --> 00:21:10,300
convert a pass or insecure string

512
00:21:10,300 --> 00:21:12,490
creating a PS credential object in

513
00:21:12,490 --> 00:21:15,130
creating essentially a sim session so

514
00:21:15,130 --> 00:21:16,750
that we can connect to a remote system

515
00:21:16,750 --> 00:21:18,640
and so that's what I'm doing right here

516
00:21:18,640 --> 00:21:20,260
I'm connecting to a system and then

517
00:21:20,260 --> 00:21:21,580
right here what it's doing this get MP

518
00:21:21,580 --> 00:21:22,870
preference I'm saying okay we're gonna

519
00:21:22,870 --> 00:21:25,059
call that but we're gonna use a sim

520
00:21:25,059 --> 00:21:27,010
session and pass it into it and so that

521
00:21:27,010 --> 00:21:29,110
will automatically pass whatever sim

522
00:21:29,110 --> 00:21:30,610
session I just created to a remote

523
00:21:30,610 --> 00:21:32,590
system so it's already authenticating

524
00:21:32,590 --> 00:21:34,900
with the credentials I provided and it

525
00:21:34,900 --> 00:21:37,740
already knows which system to connect to

526
00:21:37,740 --> 00:21:40,210
once we get that we can see that there's

527
00:21:40,210 --> 00:21:41,559
some certain information allowed on this

528
00:21:41,559 --> 00:21:43,500
remote system like there's an exclusion

529
00:21:43,500 --> 00:21:46,390
extension of PDF if it's a PDF there

530
00:21:46,390 --> 00:21:49,030
just don't scan it at all the exclusion

531
00:21:49,030 --> 00:21:52,240
path is the Downloads folder and in this

532
00:21:52,240 --> 00:21:54,130
case the exclusion process is dolphin

533
00:21:54,130 --> 00:21:56,830
dot exe apparently so if you see that

534
00:21:56,830 --> 00:21:58,510
process running at all just don't scan

535
00:21:58,510 --> 00:22:01,690
it don't worry about it it's allowed so

536
00:22:01,690 --> 00:22:04,059
the next interesting commandment that

537
00:22:04,059 --> 00:22:06,100
goes along with this asset MP preference

538
00:22:06,100 --> 00:22:08,920
set MP preference is what you would

539
00:22:08,920 --> 00:22:10,960
probably imagine it allows you to set

540
00:22:10,960 --> 00:22:12,940
antivirus configuration settings for

541
00:22:12,940 --> 00:22:14,679
whatever system you're trying to

542
00:22:14,679 --> 00:22:16,780
authenticate to the difference is there

543
00:22:16,780 --> 00:22:19,270
is set MP preference and there's add MP

544
00:22:19,270 --> 00:22:21,700
preference set MP preference will

545
00:22:21,700 --> 00:22:23,830
overwrite whatever settings currently

546
00:22:23,830 --> 00:22:26,140
exist for the system that you're

547
00:22:26,140 --> 00:22:29,200
targeting ad MP preference appends to an

548
00:22:29,200 --> 00:22:31,809
existing configuration so let's say like

549
00:22:31,809 --> 00:22:33,730
on this previous slide if PDF is here

550
00:22:33,730 --> 00:22:36,370
and I were to do set MP preference to

551
00:22:36,370 --> 00:22:38,740
exe the only thing that would be here

552
00:22:38,740 --> 00:22:41,410
now is exe if I were to use add MP

553
00:22:41,410 --> 00:22:46,870
preference you would see PDF and Exe so

554
00:22:46,870 --> 00:22:48,910
similar to get MP preference you can

555
00:22:48,910 --> 00:22:50,740
just authenticate to a remote system

556
00:22:50,740 --> 00:22:53,350
using zoom sessions and so we're about

557
00:22:53,350 --> 00:22:56,110
to do a video but basically I thought

558
00:22:56,110 --> 00:22:56,950
this is going to be a little

559
00:22:56,950 --> 00:22:58,930
see what I'm running here asset MP

560
00:22:58,930 --> 00:23:01,570
preference I'm using a sim session other

561
00:23:01,570 --> 00:23:02,860
I've already created to authenticate to

562
00:23:02,860 --> 00:23:05,320
a remote system I'm saying hey set an

563
00:23:05,320 --> 00:23:07,420
exclusion path which is the seat

564
00:23:07,420 --> 00:23:10,120
directory and set an exclusion extension

565
00:23:10,120 --> 00:23:12,310
which is anything dot exe on there on

566
00:23:12,310 --> 00:23:14,740
this system that I'm targeting and so if

567
00:23:14,740 --> 00:23:16,450
you were to pull up Windows Defender on

568
00:23:16,450 --> 00:23:17,770
that remote system where you sent this

569
00:23:17,770 --> 00:23:19,030
to you would actually see that

570
00:23:19,030 --> 00:23:21,160
information like see temp or exe is

571
00:23:21,160 --> 00:23:24,430
completely allowed and right here is the

572
00:23:24,430 --> 00:23:26,200
command line example or that if we were

573
00:23:26,200 --> 00:23:27,880
to run get MP preference we can see yes

574
00:23:27,880 --> 00:23:29,470
that is actually allowed on the system

575
00:23:29,470 --> 00:23:31,900
but believe I'll have cup in just a

576
00:23:31,900 --> 00:23:34,390
second so set MP preference it's kind of

577
00:23:34,390 --> 00:23:36,340
the same concept with the tax surface

578
00:23:36,340 --> 00:23:38,740
reduction rules you use get MP

579
00:23:38,740 --> 00:23:40,720
preference you can get all the

580
00:23:40,720 --> 00:23:42,340
information about your normal a V

581
00:23:42,340 --> 00:23:44,170
configs but you can also see if there

582
00:23:44,170 --> 00:23:46,150
are any attack surface reduction rules

583
00:23:46,150 --> 00:23:48,790
enabled well you can use set MP

584
00:23:48,790 --> 00:23:51,460
preference to go ahead and stop them

585
00:23:51,460 --> 00:23:53,830
from spawning or stop those rules from

586
00:23:53,830 --> 00:23:56,320
being enforced on a remote system and

587
00:23:56,320 --> 00:23:58,540
the awesome thing about this is all this

588
00:23:58,540 --> 00:24:00,070
can be done within constrained language

589
00:24:00,070 --> 00:24:03,370
mode so if we look right here up here at

590
00:24:03,370 --> 00:24:04,930
the very top is where you would see

591
00:24:04,930 --> 00:24:06,880
attack surface reduction rules when you

592
00:24:06,880 --> 00:24:09,460
run get MP preference and so in this

593
00:24:09,460 --> 00:24:11,260
case there is a specific rule in

594
00:24:11,260 --> 00:24:13,510
Microsoft of course loves essentially

595
00:24:13,510 --> 00:24:16,390
goods so rather than being like WIPs

596
00:24:16,390 --> 00:24:18,900
exact rule it's this really long string

597
00:24:18,900 --> 00:24:21,670
but then you can see with the with one

598
00:24:21,670 --> 00:24:24,010
being listed here that rule is actually

599
00:24:24,010 --> 00:24:26,620
enabled and so right now the system that

600
00:24:26,620 --> 00:24:28,960
these rules are on it will block and

601
00:24:28,960 --> 00:24:31,300
prevent any process being spawned that's

602
00:24:31,300 --> 00:24:35,620
spawned via WI or yes exactly if we were

603
00:24:35,620 --> 00:24:37,390
to actually then run this set MP

604
00:24:37,390 --> 00:24:40,420
preference we say hey this specific rule

605
00:24:40,420 --> 00:24:43,000
which is that long gooood and then for

606
00:24:43,000 --> 00:24:45,070
that rule I want that it's actually be

607
00:24:45,070 --> 00:24:46,870
disabled this is what you would see at

608
00:24:46,870 --> 00:24:48,370
that point you'd see a zero instead of

609
00:24:48,370 --> 00:24:51,130
one and then that ASR rule is no longer

610
00:24:51,130 --> 00:24:54,790
running on that system alright so that

611
00:24:54,790 --> 00:24:56,650
was a lot here I'll show a show a quick

612
00:24:56,650 --> 00:25:01,560
demo on what that actually looks like

613
00:25:06,350 --> 00:25:09,450
so what I'm doing here is a retiring get

614
00:25:09,450 --> 00:25:11,820
MP preference and so we're gonna pass it

615
00:25:11,820 --> 00:25:13,260
a sim session which this was already

616
00:25:13,260 --> 00:25:14,850
created prior to this video of being

617
00:25:14,850 --> 00:25:17,640
started it's just using that sim session

618
00:25:17,640 --> 00:25:19,410
to authenticate to remote system and

619
00:25:19,410 --> 00:25:21,630
pull back the antivirus configuration as

620
00:25:21,630 --> 00:25:23,520
you can see there's a lot of different

621
00:25:23,520 --> 00:25:26,040
information here we can see at the top

622
00:25:26,040 --> 00:25:28,770
that an ASR rule is actually enabled and

623
00:25:28,770 --> 00:25:31,200
that is the excuse me the specific rule

624
00:25:31,200 --> 00:25:33,330
that blocks processes being spawned via

625
00:25:33,330 --> 00:25:37,230
WI and so that is active on that system

626
00:25:37,230 --> 00:25:38,820
and so while I figured let's test this

627
00:25:38,820 --> 00:25:40,980
okay so we're gonna use power shells

628
00:25:40,980 --> 00:25:44,400
invoke with me method the win32 process

629
00:25:44,400 --> 00:25:46,560
class we're gonna tell it to create a

630
00:25:46,560 --> 00:25:48,810
process and in this case we're gonna

631
00:25:48,810 --> 00:25:50,550
have it start or try to start

632
00:25:50,550 --> 00:25:54,660
notepad.exe so that runs and what you

633
00:25:54,660 --> 00:25:57,270
can see here is anytime you're using W

634
00:25:57,270 --> 00:26:00,000
my if something works your return value

635
00:26:00,000 --> 00:26:02,550
should be zero if it's not zero then

636
00:26:02,550 --> 00:26:05,280
some sort of error happened in this

637
00:26:05,280 --> 00:26:06,600
virus and threat protection

638
00:26:06,600 --> 00:26:09,030
that's what pops up so that actually

639
00:26:09,030 --> 00:26:11,070
prevented notepad from being spawn right

640
00:26:11,070 --> 00:26:12,840
there and that's it basically informing

641
00:26:12,840 --> 00:26:14,850
the user that it is not allowed because

642
00:26:14,850 --> 00:26:17,040
there's a rule set to prevent processes

643
00:26:17,040 --> 00:26:19,890
from W my starting so what I'm doing

644
00:26:19,890 --> 00:26:21,390
here now is I'm using set and pre

645
00:26:21,390 --> 00:26:24,210
preference to I'm targeting this

646
00:26:24,210 --> 00:26:27,000
specific attack surface reduction rule

647
00:26:27,000 --> 00:26:29,700
which is that long one which is dealing

648
00:26:29,700 --> 00:26:32,670
with WI and PS exec and then I'm telling

649
00:26:32,670 --> 00:26:35,070
it for the rules of web that's enabled I

650
00:26:35,070 --> 00:26:38,030
want to actually go ahead and disable it

651
00:26:38,030 --> 00:26:39,990
and I think I'm gonna have to Pat yep

652
00:26:39,990 --> 00:26:42,180
there's a sim session so I'm at LT sim

653
00:26:42,180 --> 00:26:44,390
session and so now it should be disabled

654
00:26:44,390 --> 00:26:47,700
so if we do a get MP preference and re

655
00:26:47,700 --> 00:26:51,480
pull the new configs at this point we

656
00:26:51,480 --> 00:26:52,650
can see if we scroll all the way to the

657
00:26:52,650 --> 00:26:55,980
top that those rules are now that rule

658
00:26:55,980 --> 00:26:57,840
is now disabled it's no longer allowed

659
00:26:57,840 --> 00:27:00,900
to run it's not enforced it's a better

660
00:27:00,900 --> 00:27:03,180
way to phrase it so now if I try to use

661
00:27:03,180 --> 00:27:05,580
the same exact attack that I just did

662
00:27:05,580 --> 00:27:09,060
use invoke Allah method of win32 process

663
00:27:09,060 --> 00:27:10,800
we're going to create a process in this

664
00:27:10,800 --> 00:27:12,060
case we're gonna try to spawn notepad

665
00:27:12,060 --> 00:27:15,810
again what you can see now is this time

666
00:27:15,810 --> 00:27:17,580
the return value is zero

667
00:27:17,580 --> 00:27:20,340
we actually got a process ID of what no

668
00:27:20,340 --> 00:27:22,679
pad should be running in and you'll see

669
00:27:22,679 --> 00:27:23,429
in just second because it's

670
00:27:23,429 --> 00:27:25,049
unfortunately off-screen there's no pad

671
00:27:25,049 --> 00:27:27,869
so no pad actually was spawned and it

672
00:27:27,869 --> 00:27:30,269
did work and so everything that was just

673
00:27:30,269 --> 00:27:32,940
done here can be you can do this within

674
00:27:32,940 --> 00:27:35,489
constrained language mode so you can as

675
00:27:35,489 --> 00:27:37,799
an attacker if you see a system that is

676
00:27:37,799 --> 00:27:40,110
a high-value target system that has ASR

677
00:27:40,110 --> 00:27:41,850
rules enabled well as long as you've

678
00:27:41,850 --> 00:27:43,440
administrator rights over that system

679
00:27:43,440 --> 00:27:45,570
you can just just disable it like you

680
00:27:45,570 --> 00:27:47,970
don't have to spend your time creating

681
00:27:47,970 --> 00:27:50,639
alerts you can do quick recon and see if

682
00:27:50,639 --> 00:27:52,559
these rules are actually enabled then

683
00:27:52,559 --> 00:27:55,080
just disable them and load your malware

684
00:27:55,080 --> 00:27:56,129
or whatever it is that you're wanting to

685
00:27:56,129 --> 00:27:58,289
run or just run a simple command and

686
00:27:58,289 --> 00:28:00,840
this is all allowed within constrained

687
00:28:00,840 --> 00:28:03,269
language mode again because it's an

688
00:28:03,269 --> 00:28:09,960
administrative task three star unit the

689
00:28:09,960 --> 00:28:15,230
next one yeah

690
00:28:30,000 --> 00:28:32,530
sorry yeah I should have brought that up

691
00:28:32,530 --> 00:28:34,210
it was a great question the question was

692
00:28:34,210 --> 00:28:36,460
if for different goods that I was like

693
00:28:36,460 --> 00:28:38,350
just referencing in that working to

694
00:28:38,350 --> 00:28:40,240
actually find what gooood correlates to

695
00:28:40,240 --> 00:28:43,299
what rule in this case Microsoft

696
00:28:43,299 --> 00:28:45,130
actually did do a good job documenting

697
00:28:45,130 --> 00:28:47,799
this so if you just do a Google search

698
00:28:47,799 --> 00:28:51,250
for Windows ASR rules I think it's like

699
00:28:51,250 --> 00:28:52,809
the very first result that you're gonna

700
00:28:52,809 --> 00:28:55,510
get actually has basically a table and

701
00:28:55,510 --> 00:28:57,730
it says like this rule is for blocking

702
00:28:57,730 --> 00:29:00,160
processes spawned via WMI RPS exact and

703
00:29:00,160 --> 00:29:01,660
then this is the gooood that's

704
00:29:01,660 --> 00:29:04,210
associated with that rule so that they

705
00:29:04,210 --> 00:29:07,740
actually do have all of that documented

706
00:29:15,540 --> 00:29:18,370
off the top the question was is there

707
00:29:18,370 --> 00:29:21,640
anything on the OS itself versus do you

708
00:29:21,640 --> 00:29:23,070
have to look at an external reference

709
00:29:23,070 --> 00:29:25,360
there probably is a way there might be a

710
00:29:25,360 --> 00:29:26,440
way to a new reign with that with

711
00:29:26,440 --> 00:29:28,299
PowerShell I just don't I don't know

712
00:29:28,299 --> 00:29:28,809
that one

713
00:29:28,809 --> 00:29:31,480
for me I just do a quick google search

714
00:29:31,480 --> 00:29:35,160
and find it out that way yeah no problem

715
00:29:35,160 --> 00:29:38,200
okay so here's another different thing

716
00:29:38,200 --> 00:29:40,450
that we can do with get MP preference

717
00:29:40,450 --> 00:29:43,960
and set MP preference so this is a

718
00:29:43,960 --> 00:29:45,370
little bit more fun okay so in this case

719
00:29:45,370 --> 00:29:47,440
I didn't show it on the last damage but

720
00:29:47,440 --> 00:29:49,030
here I'm validating and showing that I

721
00:29:49,030 --> 00:29:51,520
do have a sim session to a remote system

722
00:29:51,520 --> 00:29:53,679
and I'm connected to it over decom again

723
00:29:53,679 --> 00:29:55,000
all of this is loud and constrained

724
00:29:55,000 --> 00:29:58,570
language mode we're gonna run get MP

725
00:29:58,570 --> 00:30:01,049
preference again on this system and

726
00:30:01,049 --> 00:30:05,200
oh-oh target it and so we're gonna pass

727
00:30:05,200 --> 00:30:07,299
this in session in and what you're gonna

728
00:30:07,299 --> 00:30:11,730
see right here is that these this

729
00:30:11,730 --> 00:30:14,860
extension is allowed and exe and this

730
00:30:14,860 --> 00:30:17,580
exclusion path is also allowed see temp

731
00:30:17,580 --> 00:30:21,730
well what if I have malware that's in a

732
00:30:21,730 --> 00:30:23,919
PDF format or if I want to drop malware

733
00:30:23,919 --> 00:30:26,409
or something in a specific folder then

734
00:30:26,409 --> 00:30:28,390
what do I do in that case and so we just

735
00:30:28,390 --> 00:30:29,950
also showed that ASR rule is enabled

736
00:30:29,950 --> 00:30:32,230
well set MP preferences

737
00:30:32,230 --> 00:30:34,450
friend I actually recorded this video

738
00:30:34,450 --> 00:30:35,590
for a separate conference so you're

739
00:30:35,590 --> 00:30:37,600
gonna see something relate to this but

740
00:30:37,600 --> 00:30:40,179
in this case I'm using set MP preference

741
00:30:40,179 --> 00:30:42,760
I'm setting passing in the same session

742
00:30:42,760 --> 00:30:44,380
that I'm using that I previously created

743
00:30:44,380 --> 00:30:46,990
I'm going to exchange the exclusion

744
00:30:46,990 --> 00:30:49,720
extension in this case to PDF and

745
00:30:49,720 --> 00:30:51,820
because I'm using set MP preference that

746
00:30:51,820 --> 00:30:55,090
should be overwritten and so that will

747
00:30:55,090 --> 00:30:57,130
be there and then what I'm going to do

748
00:30:57,130 --> 00:30:58,840
now again is get MP preference we're

749
00:30:58,840 --> 00:31:00,669
gonna try to pull back the information

750
00:31:00,669 --> 00:31:05,590
and actually see if it changed so just

751
00:31:05,590 --> 00:31:08,230
pulled it back again and now we can see

752
00:31:08,230 --> 00:31:10,900
that we change from Exe to PDF so you

753
00:31:10,900 --> 00:31:12,669
can just arbitrarily whitelist whatever

754
00:31:12,669 --> 00:31:14,620
file extension you want on a remote

755
00:31:14,620 --> 00:31:17,380
system to allow your code to run and not

756
00:31:17,380 --> 00:31:20,470
even be looked at by nm Paris in this

757
00:31:20,470 --> 00:31:22,510
case we ran also change the set MP

758
00:31:22,510 --> 00:31:24,220
preference that we want to change it to

759
00:31:24,220 --> 00:31:28,020
just a separate directory from C temp

760
00:31:28,020 --> 00:31:30,160
and so yeah we're passing the same

761
00:31:30,160 --> 00:31:32,230
session again and are changing the

762
00:31:32,230 --> 00:31:35,049
exclusion path in this case something

763
00:31:35,049 --> 00:31:36,730
have like C temp it's like st. con or

764
00:31:36,730 --> 00:31:40,600
something like that yep okay and so

765
00:31:40,600 --> 00:31:42,040
we're studying that and now we're gonna

766
00:31:42,040 --> 00:31:44,200
use give MP preference oops I'm actually

767
00:31:44,200 --> 00:31:45,220
that's right haven't have an error right

768
00:31:45,220 --> 00:31:47,070
here because I gave it a dollar sign

769
00:31:47,070 --> 00:31:52,120
it's gonna fail I'll see that and then

770
00:31:52,120 --> 00:31:53,440
we're gonna try running get MP

771
00:31:53,440 --> 00:31:56,200
preference again we're gonna pass in the

772
00:31:56,200 --> 00:32:03,490
sim session and so now we can see that

773
00:32:03,490 --> 00:32:06,340
that file path is there so here's a

774
00:32:06,340 --> 00:32:08,530
weird thing also that I've also asked

775
00:32:08,530 --> 00:32:09,700
other people I haven't been able to

776
00:32:09,700 --> 00:32:11,650
completely figure out and others haven't

777
00:32:11,650 --> 00:32:12,880
been able to understand either

778
00:32:12,880 --> 00:32:14,950
so set MP preference as I mentioned

779
00:32:14,950 --> 00:32:17,230
earlier over writes the value right like

780
00:32:17,230 --> 00:32:20,860
we just changed from exe to PDF well in

781
00:32:20,860 --> 00:32:23,679
this case it also it just appended this

782
00:32:23,679 --> 00:32:26,080
because we originally had C temp and now

783
00:32:26,080 --> 00:32:29,250
this has C temp sync on and I can't

784
00:32:29,250 --> 00:32:31,780
unfortunately explain that behavior why

785
00:32:31,780 --> 00:32:35,260
for certain attributes a completely

786
00:32:35,260 --> 00:32:36,490
override switch is what it's supposed to

787
00:32:36,490 --> 00:32:38,590
do and then others in this case it's

788
00:32:38,590 --> 00:32:41,380
just appending an exclusion path I have

789
00:32:41,380 --> 00:32:43,450
asked a few friends and they they don't

790
00:32:43,450 --> 00:32:44,640
know the answer either

791
00:32:44,640 --> 00:32:47,730
it's just it's an oddity exists and you

792
00:32:47,730 --> 00:32:49,920
should be aware of it but as you can see

793
00:32:49,920 --> 00:32:51,900
though are the the path that we wanted

794
00:32:51,900 --> 00:32:54,270
to create was still created and so we're

795
00:32:54,270 --> 00:32:56,520
now blocking allowing anything from that

796
00:32:56,520 --> 00:32:58,970
that

797
00:33:09,290 --> 00:33:13,010
okay so the good bad news and the good

798
00:33:13,010 --> 00:33:15,050
news from a defensive side is besides

799
00:33:15,050 --> 00:33:16,550
built-in command lights there's not a

800
00:33:16,550 --> 00:33:17,840
whole lot that's available for

801
00:33:17,840 --> 00:33:20,660
constrained language mode I kind of like

802
00:33:20,660 --> 00:33:22,190
this because the things interesting if

803
00:33:22,190 --> 00:33:24,050
anyone else starts really dive in

804
00:33:24,050 --> 00:33:26,180
constrain language mode you can kind of

805
00:33:26,180 --> 00:33:29,000
be the people that really start building

806
00:33:29,000 --> 00:33:30,890
out capability it's like there's not

807
00:33:30,890 --> 00:33:33,500
there's not a whole lot that exists so I

808
00:33:33,500 --> 00:33:34,700
think it's kind of fun to get in there

809
00:33:34,700 --> 00:33:36,830
from the ground floor start building out

810
00:33:36,830 --> 00:33:38,150
either libraries or different

811
00:33:38,150 --> 00:33:40,010
functionality that other people can use

812
00:33:40,010 --> 00:33:43,010
from a defensive if it really helps or

813
00:33:43,010 --> 00:33:45,350
an offensive perspective where there

814
00:33:45,350 --> 00:33:47,360
just isn't a whole lot of code that

815
00:33:47,360 --> 00:33:50,030
exists the interesting that about this

816
00:33:50,030 --> 00:33:51,980
is any code that you write and constrain

817
00:33:51,980 --> 00:33:53,990
language mode will run in full language

818
00:33:53,990 --> 00:33:57,230
mode but the inverse is obviously not

819
00:33:57,230 --> 00:33:59,840
always true the other interesting thing

820
00:33:59,840 --> 00:34:02,060
is if you run it or write it in

821
00:34:02,060 --> 00:34:03,980
constrained language mode if you go

822
00:34:03,980 --> 00:34:05,960
against a device guard protected system

823
00:34:05,960 --> 00:34:08,270
or Windows Defender application control

824
00:34:08,270 --> 00:34:10,730
protected system your code will run on

825
00:34:10,730 --> 00:34:13,370
it because PowerShell is going to be

826
00:34:13,370 --> 00:34:14,899
whitelisted it's just running in

827
00:34:14,899 --> 00:34:17,379
constrained language mode

828
00:34:17,379 --> 00:34:19,610
all right so building out different

829
00:34:19,610 --> 00:34:21,050
capabilities in constrained language

830
00:34:21,050 --> 00:34:23,149
mode there's largely two different

831
00:34:23,149 --> 00:34:24,770
methods of how to survive in a

832
00:34:24,770 --> 00:34:26,270
constrained language mode protected

833
00:34:26,270 --> 00:34:29,330
environment one is to build a bypass or

834
00:34:29,330 --> 00:34:31,550
constrain language mode I believe Matt

835
00:34:31,550 --> 00:34:33,739
Nelson has developed a couple different

836
00:34:33,739 --> 00:34:35,449
bypasses for a constrained language mode

837
00:34:35,449 --> 00:34:37,460
he's also done it for device guard

838
00:34:37,460 --> 00:34:39,139
itself but for specifically considering

839
00:34:39,139 --> 00:34:41,690
language mode or w doc he's done that

840
00:34:41,690 --> 00:34:42,949
there's a couple guys I believe about an

841
00:34:42,949 --> 00:34:45,980
MD SEC that have like just recently

842
00:34:45,980 --> 00:34:48,139
published a blog post on I believe using

843
00:34:48,139 --> 00:34:51,050
different comics to or a specific common

844
00:34:51,050 --> 00:34:52,760
object or something else that normally

845
00:34:52,760 --> 00:34:54,350
you would think should be blocked but

846
00:34:54,350 --> 00:34:56,239
allows you to do something and constrain

847
00:34:56,239 --> 00:34:57,530
language mode bypassing that's

848
00:34:57,530 --> 00:34:59,630
restrictions the only thing with

849
00:34:59,630 --> 00:35:00,890
constrained language mode is it's going

850
00:35:00,890 --> 00:35:02,780
to have a limited shelf life right it's

851
00:35:02,780 --> 00:35:04,520
going to probably be serviced by

852
00:35:04,520 --> 00:35:08,390
Microsoft and would not be allowed to

853
00:35:08,390 --> 00:35:10,850
run again kind of like Ann mentioned

854
00:35:10,850 --> 00:35:12,800
before constrained language mode is also

855
00:35:12,800 --> 00:35:14,630
really only effective if it's paired

856
00:35:14,630 --> 00:35:16,070
with application whitelisting

857
00:35:16,070 --> 00:35:18,410
because if constrain language mode is

858
00:35:18,410 --> 00:35:19,370
enforced like I mentioned but

859
00:35:19,370 --> 00:35:21,020
application whitelisting isn't then I

860
00:35:21,020 --> 00:35:22,460
would just not use

861
00:35:22,460 --> 00:35:24,250
our show and write my own custom code

862
00:35:24,250 --> 00:35:27,170
the other capability or the other method

863
00:35:27,170 --> 00:35:28,880
to survive with any constraint linkage

864
00:35:28,880 --> 00:35:30,500
mode system is living off of the land

865
00:35:30,500 --> 00:35:32,720
using what's currently available so

866
00:35:32,720 --> 00:35:35,859
let's kind of explore these two options

867
00:35:35,859 --> 00:35:37,849
and here I actually kind of just

868
00:35:37,849 --> 00:35:39,619
mentioned I already talked about this as

869
00:35:39,619 --> 00:35:41,089
constraint language mode needs to be

870
00:35:41,089 --> 00:35:42,320
really pair with application

871
00:35:42,320 --> 00:35:45,890
whitelisting so one option is subvert

872
00:35:45,890 --> 00:35:47,599
constrained language mode is to develop

873
00:35:47,599 --> 00:35:50,450
a bypass you can think of this as kind

874
00:35:50,450 --> 00:35:52,190
of similar to an exploit but it's it's

875
00:35:52,190 --> 00:35:54,859
definitely not an exploit at all but I

876
00:35:54,859 --> 00:35:56,900
like to think of it as you may have only

877
00:35:56,900 --> 00:36:00,020
one shot to use your bypass because if

878
00:36:00,020 --> 00:36:01,880
it's it I would consider it essentially

879
00:36:01,880 --> 00:36:03,770
burnt after that one time because it may

880
00:36:03,770 --> 00:36:06,410
be detected by whatever defenders are on

881
00:36:06,410 --> 00:36:08,480
the system if they have the capability

882
00:36:08,480 --> 00:36:10,190
to detect what you actually ran now you

883
00:36:10,190 --> 00:36:11,450
can always hope that it wasn't caught

884
00:36:11,450 --> 00:36:13,550
and maybe you can reuse that but it's

885
00:36:13,550 --> 00:36:15,050
something that you want to make sure

886
00:36:15,050 --> 00:36:17,510
that you want to use it when you really

887
00:36:17,510 --> 00:36:21,109
need it the Casey Smith has doing a lot

888
00:36:21,109 --> 00:36:23,839
of research on bypassing largely

889
00:36:23,839 --> 00:36:25,580
application whitelisting a lot of these

890
00:36:25,580 --> 00:36:29,480
things are for bypassing device guard

891
00:36:29,480 --> 00:36:31,700
and application whitelisting rules such

892
00:36:31,700 --> 00:36:34,790
as msbuild install util and excuse me

893
00:36:34,790 --> 00:36:39,770
women but he also used c DB exe which is

894
00:36:39,770 --> 00:36:42,740
a debugger which if you can I believe he

895
00:36:42,740 --> 00:36:44,050
was able he wrote a blog post about

896
00:36:44,050 --> 00:36:46,580
changing constrained language mode or

897
00:36:46,580 --> 00:36:49,070
PowerShell was loaded in memory he

898
00:36:49,070 --> 00:36:51,740
attached a debugger to it and modified

899
00:36:51,740 --> 00:36:53,300
something in memory within that

900
00:36:53,300 --> 00:36:55,849
powershell process to actually allow and

901
00:36:55,849 --> 00:36:57,920
like have it revert back to full

902
00:36:57,920 --> 00:36:59,359
language mode so it wasn't actually

903
00:36:59,359 --> 00:37:01,099
enforcing constraint language mode

904
00:37:01,099 --> 00:37:03,650
anymore so he wrote a bypass for it and

905
00:37:03,650 --> 00:37:06,099
you can use these different capabilities

906
00:37:06,099 --> 00:37:11,839
but again it depends how the targeted

907
00:37:11,839 --> 00:37:13,070
system that you're going after is

908
00:37:13,070 --> 00:37:14,660
protecting their system if they're using

909
00:37:14,660 --> 00:37:18,109
something like device guard well if your

910
00:37:18,109 --> 00:37:20,359
bypass has ever detected they can upload

911
00:37:20,359 --> 00:37:22,339
date what they call their code integrity

912
00:37:22,339 --> 00:37:24,920
policy or update their application

913
00:37:24,920 --> 00:37:27,380
whitelisting rules that they have to go

914
00:37:27,380 --> 00:37:28,760
ahead and just block whatever program

915
00:37:28,760 --> 00:37:31,190
you're abusing to to bypass either

916
00:37:31,190 --> 00:37:32,630
device guard or constrain language mode

917
00:37:32,630 --> 00:37:35,840
itself so this is a

918
00:37:35,840 --> 00:37:39,140
approach I would say because it takes a

919
00:37:39,140 --> 00:37:40,910
lot of time and it takes research and so

920
00:37:40,910 --> 00:37:42,680
it's engineering time here people are

921
00:37:42,680 --> 00:37:44,570
working on stuff to try to develop some

922
00:37:44,570 --> 00:37:46,460
sort of a bypass you want to protect

923
00:37:46,460 --> 00:37:48,320
their use but ideally it's a quote

924
00:37:48,320 --> 00:37:50,720
guaranteed when unless something else

925
00:37:50,720 --> 00:37:52,730
happens which you is unforeseen to

926
00:37:52,730 --> 00:37:55,910
prevent it from working the other option

927
00:37:55,910 --> 00:37:57,020
is to kind of live within the

928
00:37:57,020 --> 00:37:59,030
constraints of constrained language mode

929
00:37:59,030 --> 00:38:01,160
well how do you kind of start this

930
00:38:01,160 --> 00:38:03,410
approach and it's this is approach that

931
00:38:03,410 --> 00:38:07,400
I take is first of all just deploy a VM

932
00:38:07,400 --> 00:38:10,430
of Windows 10 and force the Vice guard

933
00:38:10,430 --> 00:38:12,290
on it which is completely built into the

934
00:38:12,290 --> 00:38:14,780
OS completely free so anyone can just do

935
00:38:14,780 --> 00:38:16,400
this on a test VM to see how it looks

936
00:38:16,400 --> 00:38:19,220
and then try to see and make sure that

937
00:38:19,220 --> 00:38:20,990
constrain language map is enforced and

938
00:38:20,990 --> 00:38:22,460
so you can just do a quick test by

939
00:38:22,460 --> 00:38:25,130
seeing what language mode are we in try

940
00:38:25,130 --> 00:38:26,600
to do the square root of 9 something

941
00:38:26,600 --> 00:38:29,720
like that after you have constrained

942
00:38:29,720 --> 00:38:31,400
language mode up and running on a system

943
00:38:31,400 --> 00:38:33,350
the first that really is to figure out

944
00:38:33,350 --> 00:38:35,440
the problem that you're trying to solve

945
00:38:35,440 --> 00:38:38,170
what do you want to do so start small

946
00:38:38,170 --> 00:38:41,000
use minimal tools just write a minimal

947
00:38:41,000 --> 00:38:44,210
amount of code and test and so I when I

948
00:38:44,210 --> 00:38:46,100
kind of test building out things and

949
00:38:46,100 --> 00:38:47,750
constrain the language mode it's I kind

950
00:38:47,750 --> 00:38:48,950
of think of it as like a test-driven

951
00:38:48,950 --> 00:38:51,530
development process because I'm writing

952
00:38:51,530 --> 00:38:53,210
a couple lines and then I'm testing to

953
00:38:53,210 --> 00:38:54,350
make sure I'm getting the expected

954
00:38:54,350 --> 00:38:56,030
results and not any errors at that point

955
00:38:56,030 --> 00:38:58,490
if I'm getting like a this is blocked

956
00:38:58,490 --> 00:39:00,230
and only allowed in full language mode

957
00:39:00,230 --> 00:39:01,580
then I know I need to go back and

958
00:39:01,580 --> 00:39:05,030
rewrite something that I'm doing so each

959
00:39:05,030 --> 00:39:06,920
like I don't this is exactly next slide

960
00:39:06,920 --> 00:39:08,540
it's basically what I just said write a

961
00:39:08,540 --> 00:39:10,160
small amount of code it starts to solve

962
00:39:10,160 --> 00:39:11,540
your problem and test to see if it

963
00:39:11,540 --> 00:39:13,730
actually does solve that problem as you

964
00:39:13,730 --> 00:39:15,860
encounter different invalid operations

965
00:39:15,860 --> 00:39:17,900
or you're using restricted data types

966
00:39:17,900 --> 00:39:20,510
look to see how you can modify your code

967
00:39:20,510 --> 00:39:22,520
that you're doing that you're using to

968
00:39:22,520 --> 00:39:23,900
come up with a different way to do it

969
00:39:23,900 --> 00:39:25,700
and so I'll talk about how we do that in

970
00:39:25,700 --> 00:39:29,690
just a second with when the implant the

971
00:39:29,690 --> 00:39:31,550
big thing to go into this is writing

972
00:39:31,550 --> 00:39:32,990
constrained language mode it's going to

973
00:39:32,990 --> 00:39:34,820
be a frustrating experience because

974
00:39:34,820 --> 00:39:36,470
everything that you used to doing to

975
00:39:36,470 --> 00:39:37,940
being able to leverage with PowerShell

976
00:39:37,940 --> 00:39:40,340
is probably going to be blocked and so

977
00:39:40,340 --> 00:39:41,870
you have to try to figure out different

978
00:39:41,870 --> 00:39:43,430
ways to do it and this is very much like

979
00:39:43,430 --> 00:39:45,710
your typical hacker mindset right like

980
00:39:45,710 --> 00:39:46,850
if something doesn't work the first time

981
00:39:46,850 --> 00:39:48,590
you're not giving up you're going to

982
00:39:48,590 --> 00:39:49,790
keep going and look for different

983
00:39:49,790 --> 00:39:52,400
to solve whatever problem it is or line

984
00:39:52,400 --> 00:39:55,850
of code that you're doing again don't

985
00:39:55,850 --> 00:39:57,680
look the c-sharp code within your

986
00:39:57,680 --> 00:39:59,570
powershell scripts it's probably going

987
00:39:59,570 --> 00:40:02,000
to be blocked look to recreate the same

988
00:40:02,000 --> 00:40:05,120
end result if you will that you expect

989
00:40:05,120 --> 00:40:08,020
from C sharp within PowerShell

990
00:40:08,020 --> 00:40:11,060
so what currently is this and what's an

991
00:40:11,060 --> 00:40:13,640
example that we can reference so women

992
00:40:13,640 --> 00:40:15,350
implant so this women plant as a tool

993
00:40:15,350 --> 00:40:19,280
that I wrote that is 100% written in

994
00:40:19,280 --> 00:40:21,020
constraint to be compliant with

995
00:40:21,020 --> 00:40:23,180
constrain language mode I can't remember

996
00:40:23,180 --> 00:40:24,560
how many lines of code this is probably

997
00:40:24,560 --> 00:40:26,090
like 1500 lines it really isn't that

998
00:40:26,090 --> 00:40:27,980
much but spending that much time

999
00:40:27,980 --> 00:40:29,480
slamming your head against the desk

1000
00:40:29,480 --> 00:40:30,950
trying to deal with constrain language

1001
00:40:30,950 --> 00:40:32,240
mode block and everything you're doing

1002
00:40:32,240 --> 00:40:36,110
is an interesting development process I

1003
00:40:36,110 --> 00:40:38,990
built this to target device guard

1004
00:40:38,990 --> 00:40:41,450
protected systems and this was because I

1005
00:40:41,450 --> 00:40:44,900
wanted to as I'm assuming more people

1006
00:40:44,900 --> 00:40:46,250
are going to eventually start rolling

1007
00:40:46,250 --> 00:40:48,410
out application whitelisting I want to

1008
00:40:48,410 --> 00:40:50,210
have some sort of tooling that will let

1009
00:40:50,210 --> 00:40:52,040
me attack them while device guard

1010
00:40:52,040 --> 00:40:53,750
enforces constrain language mode so I

1011
00:40:53,750 --> 00:40:55,520
had to write a tool that worked in

1012
00:40:55,520 --> 00:40:58,940
constrain language mode when the implant

1013
00:40:58,940 --> 00:41:02,450
uses both PowerShell and W mine both of

1014
00:41:02,450 --> 00:41:05,210
these binaries and/or services are going

1015
00:41:05,210 --> 00:41:08,870
to essentially always be allowed to run

1016
00:41:08,870 --> 00:41:10,910
on a system even a system that's

1017
00:41:10,910 --> 00:41:12,680
application white this enforcing

1018
00:41:12,680 --> 00:41:13,760
application whitelisting

1019
00:41:13,760 --> 00:41:17,930
I have I have personally never seen an

1020
00:41:17,930 --> 00:41:19,550
environment that blocks completely

1021
00:41:19,550 --> 00:41:21,920
outright PowerShell dot exe even if you

1022
00:41:21,920 --> 00:41:23,390
did like I mentioned earlier you can

1023
00:41:23,390 --> 00:41:25,340
just load the DLL on the backend and

1024
00:41:25,340 --> 00:41:27,760
just gain access to PowerShell again

1025
00:41:27,760 --> 00:41:30,770
with W my I've never seen an environment

1026
00:41:30,770 --> 00:41:32,870
that prevents WMI from running I have

1027
00:41:32,870 --> 00:41:35,690
seen environments that may be block it

1028
00:41:35,690 --> 00:41:38,780
from one network to another network but

1029
00:41:38,780 --> 00:41:41,060
WMI is commonly used by administrators

1030
00:41:41,060 --> 00:41:43,850
to test the strength or the health of

1031
00:41:43,850 --> 00:41:45,650
systems gather different information so

1032
00:41:45,650 --> 00:41:48,320
that's generally always allowed so I

1033
00:41:48,320 --> 00:41:51,890
used W my for C to the mean to trigger

1034
00:41:51,890 --> 00:41:54,230
in action and data storage

1035
00:41:54,230 --> 00:41:56,990
well data storage encoding word problems

1036
00:41:56,990 --> 00:41:59,360
but we I was able to figure out how to

1037
00:41:59,360 --> 00:42:00,950
make this work in constrained language

1038
00:42:00,950 --> 00:42:03,060
mode so

1039
00:42:03,060 --> 00:42:06,570
like I mentioned earlier one thing that

1040
00:42:06,570 --> 00:42:08,490
we cannot do in constrain language mode

1041
00:42:08,490 --> 00:42:11,100
is unfortunately convert to a base64

1042
00:42:11,100 --> 00:42:14,010
string because if I'm once you download

1043
00:42:14,010 --> 00:42:17,010
or upload a file when I do this I can't

1044
00:42:17,010 --> 00:42:18,780
generally always deal with binary data

1045
00:42:18,780 --> 00:42:20,340
has to be encoded in one format or

1046
00:42:20,340 --> 00:42:24,180
another so this just outright doesn't

1047
00:42:24,180 --> 00:42:26,430
work if I want to download a file I

1048
00:42:26,430 --> 00:42:29,310
can't cover in base64 string so I trying

1049
00:42:29,310 --> 00:42:31,230
to figure out okay how do i encode data

1050
00:42:31,230 --> 00:42:32,760
in a format that does work in

1051
00:42:32,760 --> 00:42:34,440
constrained linguish mode so I was

1052
00:42:34,440 --> 00:42:36,090
actually talking with my coworker at the

1053
00:42:36,090 --> 00:42:38,610
time and my friend Daniel Kanan he wrote

1054
00:42:38,610 --> 00:42:40,670
the awesome tools invoke obfuscation

1055
00:42:40,670 --> 00:42:42,900
invoke a couple different ones that

1056
00:42:42,900 --> 00:42:45,750
makes PowerShell look disgusting so I

1057
00:42:45,750 --> 00:42:47,670
would definitely mention say to go look

1058
00:42:47,670 --> 00:42:49,950
at that what this what this lines does

1059
00:42:49,950 --> 00:42:51,660
is so this is a test data store what

1060
00:42:51,660 --> 00:42:53,040
this does this just says this is just

1061
00:42:53,040 --> 00:42:54,510
sampled data it's just a random string

1062
00:42:54,510 --> 00:42:58,020
and what this kind of like one-liner

1063
00:42:58,020 --> 00:43:00,510
here essentially does is it takes either

1064
00:43:00,510 --> 00:43:02,640
a character array or a byte array

1065
00:43:02,640 --> 00:43:05,040
depending if you're dealing with text or

1066
00:43:05,040 --> 00:43:07,620
binary data and it converts each

1067
00:43:07,620 --> 00:43:10,320
character or a bite into an integer and

1068
00:43:10,320 --> 00:43:13,050
it then does that in a comma separated

1069
00:43:13,050 --> 00:43:16,080
one line so with this string this is

1070
00:43:16,080 --> 00:43:19,020
just sampled data is converted now into

1071
00:43:19,020 --> 00:43:22,500
this so we see 84 comma 104 comma 105

1072
00:43:22,500 --> 00:43:25,650
common 115 and so forth this is perfect

1073
00:43:25,650 --> 00:43:27,330
like this is all that I actually need

1074
00:43:27,330 --> 00:43:29,490
and this completely works in constrained

1075
00:43:29,490 --> 00:43:32,040
language mode so while it's not base64

1076
00:43:32,040 --> 00:43:34,020
encoded we're just going byte by byte or

1077
00:43:34,020 --> 00:43:36,930
character by character converting into

1078
00:43:36,930 --> 00:43:39,510
an integer and that will solve our

1079
00:43:39,510 --> 00:43:42,600
encoding problem so all of our data is

1080
00:43:42,600 --> 00:43:48,840
now encoded next thing so old dog new

1081
00:43:48,840 --> 00:43:50,730
trick so I kind of wanted to try to

1082
00:43:50,730 --> 00:43:53,580
solve the encoding problem specifically

1083
00:43:53,580 --> 00:43:56,940
the base64 encoding problem I mean but

1084
00:43:56,940 --> 00:43:58,380
the thing is obviously it doesn't work

1085
00:43:58,380 --> 00:44:00,360
at all in constrained language mode so I

1086
00:44:00,360 --> 00:44:02,790
needed to figure out where is the

1087
00:44:02,790 --> 00:44:04,020
restriction and constrain language mode

1088
00:44:04,020 --> 00:44:05,490
what's preventing from happening and

1089
00:44:05,490 --> 00:44:07,380
this is where I was like okay let's I

1090
00:44:07,380 --> 00:44:09,480
guess figure out how constrained base64

1091
00:44:09,480 --> 00:44:11,970
encoding actually works so it has does

1092
00:44:11,970 --> 00:44:13,530
anyone here know how a base64 encoding

1093
00:44:13,530 --> 00:44:15,700
works awesome you

1094
00:44:15,700 --> 00:44:16,810
you want to snag something and go and

1095
00:44:16,810 --> 00:44:19,869
grab something it's so all gonna learn

1096
00:44:19,869 --> 00:44:21,730
right here basically what it is is

1097
00:44:21,730 --> 00:44:24,940
there's 64 different values that your

1098
00:44:24,940 --> 00:44:26,650
character can be and will show how to

1099
00:44:26,650 --> 00:44:29,349
determine it once you get find a number

1100
00:44:29,349 --> 00:44:32,020
if the value is nine then your character

1101
00:44:32,020 --> 00:44:34,420
that you're using is J so the way that

1102
00:44:34,420 --> 00:44:38,290
that works is you go three you have

1103
00:44:38,290 --> 00:44:41,170
let's you have a massive string of bytes

1104
00:44:41,170 --> 00:44:43,240
it's not a string advice but just a long

1105
00:44:43,240 --> 00:44:45,940
list of bytes you take three bytes at a

1106
00:44:45,940 --> 00:44:49,089
time so that's 24 bits and you split

1107
00:44:49,089 --> 00:44:52,720
those 24 bits into 6 bit chunks so you

1108
00:44:52,720 --> 00:44:56,740
end up with 4 6 bit chunks then what you

1109
00:44:56,740 --> 00:44:59,320
do is you take each of those 6 bits and

1110
00:44:59,320 --> 00:45:02,079
you look up whatever that value is and

1111
00:45:02,079 --> 00:45:03,670
so that's your basics for encoded string

1112
00:45:03,670 --> 00:45:06,010
so I know that's kind of abstract here's

1113
00:45:06,010 --> 00:45:08,290
an example so let's say we're trying to

1114
00:45:08,290 --> 00:45:11,020
be 64 encode the string man Capital m

1115
00:45:11,020 --> 00:45:13,030
lowercase a lowercase n and this is

1116
00:45:13,030 --> 00:45:15,609
taken straight from Wikipedia well this

1117
00:45:15,609 --> 00:45:18,880
is what man is the bytes and so here's

1118
00:45:18,880 --> 00:45:19,660
our 8 bits

1119
00:45:19,660 --> 00:45:21,849
here's lowercase a and here's lowercase

1120
00:45:21,849 --> 00:45:24,400
n well if we split this up into 6 bit

1121
00:45:24,400 --> 00:45:26,050
chunks we end up with this is the first

1122
00:45:26,050 --> 00:45:29,619
6 this is the next 6 next 6 and so forth

1123
00:45:29,619 --> 00:45:35,230
so this in binary is equal to 19 if we

1124
00:45:35,230 --> 00:45:39,220
go back to that table and find 19 that

1125
00:45:39,220 --> 00:45:42,130
is equal to capital T and so that's how

1126
00:45:42,130 --> 00:45:44,560
we can figure out what that first value

1127
00:45:44,560 --> 00:45:46,630
is same process for the rest of these

1128
00:45:46,630 --> 00:45:50,349
this is 22 546 so if we just go back

1129
00:45:50,349 --> 00:45:54,250
look at 46 we should see right there is

1130
00:45:54,250 --> 00:45:56,410
lowercase u so there's a known

1131
00:45:56,410 --> 00:45:58,359
associated alphabet with what every

1132
00:45:58,359 --> 00:46:00,849
single value should be so the same

1133
00:46:00,849 --> 00:46:02,680
process the next one you'll what if like

1134
00:46:02,680 --> 00:46:05,260
we only have one letter left and like

1135
00:46:05,260 --> 00:46:07,060
the rest is just blank so in this case

1136
00:46:07,060 --> 00:46:08,710
you normally would just pad these out to

1137
00:46:08,710 --> 00:46:11,560
zeros and in the case where there are no

1138
00:46:11,560 --> 00:46:13,329
extra letters that's where you get equal

1139
00:46:13,329 --> 00:46:15,010
signs and that's how they Pat it out to

1140
00:46:15,010 --> 00:46:17,589
make sure it always has 64 bits excuse

1141
00:46:17,589 --> 00:46:21,790
me 24 so if we use Python 3 and we try

1142
00:46:21,790 --> 00:46:22,990
to figure out okay what does man

1143
00:46:22,990 --> 00:46:25,030
actually look like again we can see this

1144
00:46:25,030 --> 00:46:29,220
is TW fu and that's our value

1145
00:46:29,220 --> 00:46:32,380
so I then try to figure out okay how can

1146
00:46:32,380 --> 00:46:36,160
we do this in constrain language mode so

1147
00:46:36,160 --> 00:46:38,650
I wrote this script called PowerShell

1148
00:46:38,650 --> 00:46:42,819
it's called CLM base 64 and after taking

1149
00:46:42,819 --> 00:46:44,380
a lot of time working on it was trying

1150
00:46:44,380 --> 00:46:46,180
to it was able to figure out how to get

1151
00:46:46,180 --> 00:46:48,970
a 64 encoding working I'm sorry this is

1152
00:46:48,970 --> 00:46:50,530
kind of dark I'll really I'll push these

1153
00:46:50,530 --> 00:46:52,240
slides online so that you guys can look

1154
00:46:52,240 --> 00:46:53,200
at these and see these a little bit

1155
00:46:53,200 --> 00:46:55,390
easier later but what this is doing is

1156
00:46:55,390 --> 00:46:57,280
basically it can take you to a string or

1157
00:46:57,280 --> 00:47:00,040
a file as input and it will go through

1158
00:47:00,040 --> 00:47:02,020
and perform this basic ste for encoding

1159
00:47:02,020 --> 00:47:02,650
process

1160
00:47:02,650 --> 00:47:04,750
the other interesting thing that it does

1161
00:47:04,750 --> 00:47:06,819
which I'll have in a later slide just to

1162
00:47:06,819 --> 00:47:08,890
show is you can provide what's called an

1163
00:47:08,890 --> 00:47:10,930
alternate alphabet so when we're dealing

1164
00:47:10,930 --> 00:47:14,799
with base64 according to the RFC this is

1165
00:47:14,799 --> 00:47:17,559
the standard alphabet this is 0 is

1166
00:47:17,559 --> 00:47:20,280
always equal to a 1 is always equal to B

1167
00:47:20,280 --> 00:47:22,630
well what malware authors like to do

1168
00:47:22,630 --> 00:47:24,369
sometimes is they of course like to make

1169
00:47:24,369 --> 00:47:27,099
life harder from our analysts what's

1170
00:47:27,099 --> 00:47:28,809
this prevent you from just swapping

1171
00:47:28,809 --> 00:47:31,569
Kappa like inverting this whole alphabet

1172
00:47:31,569 --> 00:47:34,960
and making 0 equal to slash 1 equal to a

1173
00:47:34,960 --> 00:47:38,020
plus you can just arbitrarily assign a

1174
00:47:38,020 --> 00:47:41,349
different alphabet to what each value

1175
00:47:41,349 --> 00:47:44,680
should be in base64 well this can

1176
00:47:44,680 --> 00:47:46,480
sometimes mess up automated analysis

1177
00:47:46,480 --> 00:47:50,079
tools so what this library does is it

1178
00:47:50,079 --> 00:47:51,970
also allows you or the this chameleon

1179
00:47:51,970 --> 00:47:53,410
does it does allow you to provide an

1180
00:47:53,410 --> 00:47:55,540
alternate alphabet if you want for

1181
00:47:55,540 --> 00:47:57,970
base64 encoding and then it will

1182
00:47:57,970 --> 00:48:00,549
validate that it's a valid alphabet and

1183
00:48:00,549 --> 00:48:03,430
then you can just start using that so

1184
00:48:03,430 --> 00:48:05,170
this is where we're going through we're

1185
00:48:05,170 --> 00:48:06,940
doing checks like if the value is not

1186
00:48:06,940 --> 00:48:10,630
equal to 0 0 0 0 0 0 then figure out

1187
00:48:10,630 --> 00:48:12,549
what that binary value is so like if

1188
00:48:12,549 --> 00:48:17,500
it's not 0 and it's so which is a then

1189
00:48:17,500 --> 00:48:19,089
figure out lookup in this chart which is

1190
00:48:19,089 --> 00:48:21,579
stored in the script what is the value

1191
00:48:21,579 --> 00:48:26,380
of whatever the number is some do you

1192
00:48:26,380 --> 00:48:28,059
write here otherwise just assume it's a

1193
00:48:28,059 --> 00:48:31,319
unless we provide an alternate alphabet

1194
00:48:31,319 --> 00:48:33,670
this is kind of at the very end where

1195
00:48:33,670 --> 00:48:35,650
it's looking in the padding so I I

1196
00:48:35,650 --> 00:48:37,359
didn't want to go over this line by line

1197
00:48:37,359 --> 00:48:38,799
just wanted to give kind of examples out

1198
00:48:38,799 --> 00:48:40,660
of this how it works is here it's

1199
00:48:40,660 --> 00:48:42,970
checking is there any equal sign

1200
00:48:42,970 --> 00:48:45,040
that we need to include in padding or if

1201
00:48:45,040 --> 00:48:47,140
we're decoding to remove before we

1202
00:48:47,140 --> 00:48:49,270
actually go through and get the the

1203
00:48:49,270 --> 00:48:51,370
actual content that we were trying to

1204
00:48:51,370 --> 00:48:53,650
get so here's where I ran into a problem

1205
00:48:53,650 --> 00:48:55,870
with base64 encoding is as you could

1206
00:48:55,870 --> 00:48:57,520
tell earlier we have to figure out what

1207
00:48:57,520 --> 00:49:01,240
the base-10 value is of a some binary

1208
00:49:01,240 --> 00:49:03,700
number to then about what that value is

1209
00:49:03,700 --> 00:49:05,590
and the basic C 4 encoded R I've seen

1210
00:49:05,590 --> 00:49:08,230
but that is actually blocked you can't

1211
00:49:08,230 --> 00:49:12,580
actually convert 1 1 1 1 1 1 2 into base

1212
00:49:12,580 --> 00:49:14,440
10 in PowerShell constrain language mode

1213
00:49:14,440 --> 00:49:17,950
it's just not allowed so I was again

1214
00:49:17,950 --> 00:49:19,450
actually talking with Daniel B Hannon

1215
00:49:19,450 --> 00:49:21,340
about this and I think before I even

1216
00:49:21,340 --> 00:49:23,260
finished explaining my problem like hey

1217
00:49:23,260 --> 00:49:24,580
I just ran into this like weird issue

1218
00:49:24,580 --> 00:49:25,930
I'm gonna try to solve he's like I

1219
00:49:25,930 --> 00:49:28,570
figured it out and so he's like here I

1220
00:49:28,570 --> 00:49:29,890
got this one line I look it's just this

1221
00:49:29,890 --> 00:49:32,020
real quick thing I was like well that's

1222
00:49:32,020 --> 00:49:33,580
awesome you just totally did this and

1223
00:49:33,580 --> 00:49:35,200
figure out how to convert this from base

1224
00:49:35,200 --> 00:49:39,220
2 to base 10 and like we now had that

1225
00:49:39,220 --> 00:49:40,660
functionality so this was one of the

1226
00:49:40,660 --> 00:49:44,200
bigger hang-ups originally and it can

1227
00:49:44,200 --> 00:49:45,550
now just easily be done with this

1228
00:49:45,550 --> 00:49:47,200
PowerShell one-liner right here well

1229
00:49:47,200 --> 00:49:48,910
we're just we have the different powers

1230
00:49:48,910 --> 00:49:50,380
of each spot and then just going through

1231
00:49:50,380 --> 00:49:52,950
and getting that data and converting it

1232
00:49:52,950 --> 00:49:56,440
so just as a quick example here using

1233
00:49:56,440 --> 00:49:58,570
this script that I wrote a host run

1234
00:49:58,570 --> 00:49:59,980
space language mode you can see we're in

1235
00:49:59,980 --> 00:50:01,780
constrained language mode we're going to

1236
00:50:01,780 --> 00:50:04,090
convert to base64 string with a string

1237
00:50:04,090 --> 00:50:07,510
man we still get our T wfu we convert

1238
00:50:07,510 --> 00:50:09,730
from base64 that string we get back our

1239
00:50:09,730 --> 00:50:11,500
main value so we have basic C for

1240
00:50:11,500 --> 00:50:13,600
encoding now completely working in

1241
00:50:13,600 --> 00:50:16,780
constrained language mode and this is

1242
00:50:16,780 --> 00:50:17,710
again where I was talking about at the

1243
00:50:17,710 --> 00:50:20,080
very end just how to do an alternate

1244
00:50:20,080 --> 00:50:23,110
alphabet and it's in there we're running

1245
00:50:23,110 --> 00:50:24,730
short on time so I'm gonna see if I can

1246
00:50:24,730 --> 00:50:27,730
do a quick snippet of this video and

1247
00:50:27,730 --> 00:50:31,480
then we will stop right after that which

1248
00:50:31,480 --> 00:50:35,170
is the end anyways so it's 50 seconds so

1249
00:50:35,170 --> 00:50:36,160
here you can see where it's gonna be

1250
00:50:36,160 --> 00:50:38,620
running host run space we are in

1251
00:50:38,620 --> 00:50:40,720
constrained language mode I already have

1252
00:50:40,720 --> 00:50:42,970
I'm gonna test ok here we're gonna try

1253
00:50:42,970 --> 00:50:44,320
doing the square root to figure out if

1254
00:50:44,320 --> 00:50:45,550
constrain lakish mode actually is

1255
00:50:45,550 --> 00:50:47,590
enforced which we will see that this is

1256
00:50:47,590 --> 00:50:51,250
an error and so now I believe the next

1257
00:50:51,250 --> 00:50:52,420
step is going to be okay we're gonna try

1258
00:50:52,420 --> 00:50:55,390
to convert to base64 and we're going to

1259
00:50:55,390 --> 00:50:56,290
put some

1260
00:50:56,290 --> 00:50:58,570
or string here in this case again Murray

1261
00:50:58,570 --> 00:51:02,250
looks like 40 north and besides Augusta

1262
00:51:02,250 --> 00:51:05,200
and we're gonna let it run and we get

1263
00:51:05,200 --> 00:51:07,030
that value of coming out of it so it

1264
00:51:07,030 --> 00:51:08,530
actually did encode that date into

1265
00:51:08,530 --> 00:51:11,200
base64 format and now we're going to

1266
00:51:11,200 --> 00:51:14,920
convert from base64 back into trying to

1267
00:51:14,920 --> 00:51:17,080
find out the original string easy way to

1268
00:51:17,080 --> 00:51:18,310
do that let's just copy and paste that

1269
00:51:18,310 --> 00:51:20,680
encoded value in put it in there it's

1270
00:51:20,680 --> 00:51:23,140
kind of off string or off the screen let

1271
00:51:23,140 --> 00:51:27,210
it run and then we got our results back

1272
00:51:35,609 --> 00:51:37,829
so that's largely it um that this

1273
00:51:37,829 --> 00:51:39,989
capability didn't exist in PowerShell

1274
00:51:39,989 --> 00:51:42,299
constrained language mode at all before

1275
00:51:42,299 --> 00:51:44,489
it's not a hard problem to solve like

1276
00:51:44,489 --> 00:51:46,200
that's it's super basic but I wanted to

1277
00:51:46,200 --> 00:51:48,180
be able to figure out how distinct code

1278
00:51:48,180 --> 00:51:50,609
data that you couldn't only do before so

1279
00:51:50,609 --> 00:51:53,339
in Microsoft's own words like CLM is

1280
00:51:53,339 --> 00:51:55,079
designed to support day-to-day

1281
00:51:55,079 --> 00:51:57,119
administrative tasks even there's a lot

1282
00:51:57,119 --> 00:51:58,739
of things that are restricted there are

1283
00:51:58,739 --> 00:52:01,440
still a lot of things you can do from

1284
00:52:01,440 --> 00:52:03,119
both largely from an attackers

1285
00:52:03,119 --> 00:52:04,650
perspective I want to be prepared for

1286
00:52:04,650 --> 00:52:06,420
that environment and have certain

1287
00:52:06,420 --> 00:52:08,999
capabilities then have not or then don't

1288
00:52:08,999 --> 00:52:10,469
have those capabilities and just be in

1289
00:52:10,469 --> 00:52:11,910
trouble

1290
00:52:11,910 --> 00:52:14,039
an attacker will look to use your

1291
00:52:14,039 --> 00:52:15,869
administrative tools as a means to

1292
00:52:15,869 --> 00:52:17,880
enable their goals so like just how we

1293
00:52:17,880 --> 00:52:20,190
could do a modify antivirus and

1294
00:52:20,190 --> 00:52:21,239
everything like that and attackers gonna

1295
00:52:21,239 --> 00:52:22,920
look to do the same thing so when you

1296
00:52:22,920 --> 00:52:25,349
see that enable your telemetry so you

1297
00:52:25,349 --> 00:52:28,200
can start caching what they're doing as

1298
00:52:28,200 --> 00:52:29,849
they do it and so you can have at least

1299
00:52:29,849 --> 00:52:31,259
of the ability to reconstruct the

1300
00:52:31,259 --> 00:52:34,469
attacks that they performed that's

1301
00:52:34,469 --> 00:52:35,369
really it at this point

1302
00:52:35,369 --> 00:52:37,739
I literally just before this talk push

1303
00:52:37,739 --> 00:52:39,869
the code and made it live so it is now

1304
00:52:39,869 --> 00:52:42,209
available on github you can go check it

1305
00:52:42,209 --> 00:52:44,339
out if it's of any interest the next

1306
00:52:44,339 --> 00:52:46,319
thing that I'm looking to do is start

1307
00:52:46,319 --> 00:52:48,869
adding encryption into this where I uh

1308
00:52:48,869 --> 00:52:50,640
there's no ability to just encrypt data

1309
00:52:50,640 --> 00:52:52,559
at all and constrain language mode that

1310
00:52:52,559 --> 00:52:54,119
I know of at this point so that's the

1311
00:52:54,119 --> 00:52:55,799
next thing I want to build out and have

1312
00:52:55,799 --> 00:52:57,779
available but um if you have any

1313
00:52:57,779 --> 00:52:59,519
questions you can we can now I know

1314
00:52:59,519 --> 00:53:00,749
we're really short on time we can also

1315
00:53:00,749 --> 00:53:02,880
talk on the side or you can hit me up on

1316
00:53:02,880 --> 00:53:03,779
Twitter

1317
00:53:03,779 --> 00:53:05,699
go to our website anything like that and

1318
00:53:05,699 --> 00:53:07,769
I'm happy to discuss anything that there

1319
00:53:07,769 --> 00:53:09,989
is so I'll take questions if I can

1320
00:53:09,989 --> 00:53:11,729
otherwise thank you everyone for your

1321
00:53:11,729 --> 00:53:13,670
time yes sir

1322
00:53:13,670 --> 00:53:18,300
[Applause]

1323
00:53:27,500 --> 00:53:29,520
probably not because it's probably

1324
00:53:29,520 --> 00:53:30,570
because if you're running that through

1325
00:53:30,570 --> 00:53:33,000
PowerShell and it's using any sort of

1326
00:53:33,000 --> 00:53:36,329
non listed data type it would not run

1327
00:53:36,329 --> 00:53:38,190
question was can you still run something

1328
00:53:38,190 --> 00:53:40,260
like PS attack or other c-sharp through

1329
00:53:40,260 --> 00:53:42,510
PowerShell on there and if it's if it's

1330
00:53:42,510 --> 00:53:44,400
enforced on there and it uses that a

1331
00:53:44,400 --> 00:53:45,810
non-white list of data type

1332
00:53:45,810 --> 00:53:49,530
it will probably be blocked any

1333
00:53:49,530 --> 00:53:52,050
questions all right thank you thank you

1334
00:53:52,050 --> 00:53:52,490
very much

1335
00:53:52,490 --> 00:53:55,250
[Applause]

