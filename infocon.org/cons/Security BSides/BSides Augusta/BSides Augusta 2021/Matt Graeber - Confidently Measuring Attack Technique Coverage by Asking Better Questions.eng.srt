1
00:00:11,360 --> 00:00:13,040
my name is matt graber i'm a threat

2
00:00:13,040 --> 00:00:15,759
researcher at red canary been there

3
00:00:15,759 --> 00:00:18,320
going on about two years now

4
00:00:18,320 --> 00:00:20,160
and i'm a defender with an adversary's

5
00:00:20,160 --> 00:00:22,480
mindset so a little bit of history for

6
00:00:22,480 --> 00:00:25,119
me i was active duty navy for some time

7
00:00:25,119 --> 00:00:29,039
as a linguist got out started infosec

8
00:00:29,039 --> 00:00:31,279
start my career in doing mostly

9
00:00:31,279 --> 00:00:34,559
offensive stuff like red teaming

10
00:00:34,559 --> 00:00:36,960
and then transition did some

11
00:00:36,960 --> 00:00:40,239
malware reversing for a little while and

12
00:00:40,239 --> 00:00:42,079
since then i've been primarily working

13
00:00:42,079 --> 00:00:43,760
as a defender

14
00:00:43,760 --> 00:00:45,920
and what's cool about that is that i'm

15
00:00:45,920 --> 00:00:48,800
able to apply an adversarial mindset to

16
00:00:48,800 --> 00:00:51,520
everything that i do in detection

17
00:00:51,520 --> 00:00:53,680
including detection engineering which is

18
00:00:53,680 --> 00:00:58,320
going to be the focus of our talk today

19
00:00:58,320 --> 00:01:01,280
and a cool thing is uh my very first

20
00:01:01,280 --> 00:01:04,799
infosec talk was right here at besides

21
00:01:04,799 --> 00:01:08,960
augusta the the very first one in 2013

22
00:01:08,960 --> 00:01:10,960
and so well

23
00:01:10,960 --> 00:01:13,680
is my mentor chris campbell who brought

24
00:01:13,680 --> 00:01:16,320
me in um and really encouraged me to

25
00:01:16,320 --> 00:01:18,880
present and that's when we presented the

26
00:01:18,880 --> 00:01:21,360
concept of living off the land for the

27
00:01:21,360 --> 00:01:24,840
first time so uh it's just crazy to

28
00:01:24,840 --> 00:01:27,759
think like how much things have changed

29
00:01:27,759 --> 00:01:29,600
and also how many things have not

30
00:01:29,600 --> 00:01:33,040
changed at the same time so um yeah it's

31
00:01:33,040 --> 00:01:35,040
it's been a wild ride

32
00:01:35,040 --> 00:01:37,040
all right so what does this talk about

33
00:01:37,040 --> 00:01:39,759
i'm going to attempt to do three things

34
00:01:39,759 --> 00:01:42,240
we're going to define a framework for an

35
00:01:42,240 --> 00:01:44,799
adversarial approach to detection

36
00:01:44,799 --> 00:01:46,079
engineering so what i mean by

37
00:01:46,079 --> 00:01:47,439
adversarial

38
00:01:47,439 --> 00:01:50,479
i mean applying an adversary mindset to

39
00:01:50,479 --> 00:01:54,079
building better more resilient

40
00:01:54,079 --> 00:01:56,960
detections getting getting as much

41
00:01:56,960 --> 00:02:00,079
coverage as we can or shelf life out of

42
00:02:00,079 --> 00:02:01,520
our detections

43
00:02:01,520 --> 00:02:03,680
because detection engineering

44
00:02:03,680 --> 00:02:06,159
it's not and there's no end state to it

45
00:02:06,159 --> 00:02:09,038
it's always a process and the more

46
00:02:09,038 --> 00:02:11,599
coverage that we want to squeeze out of

47
00:02:11,599 --> 00:02:13,840
any of our detection analytics

48
00:02:13,840 --> 00:02:16,319
it's best to apply an adversarial

49
00:02:16,319 --> 00:02:19,920
mindset to be thinking about how can we

50
00:02:19,920 --> 00:02:22,560
build good initial coverage and then

51
00:02:22,560 --> 00:02:26,720
bypass that rinse repeat

52
00:02:26,800 --> 00:02:29,360
and then we're going to actually apply

53
00:02:29,360 --> 00:02:31,040
this framework to

54
00:02:31,040 --> 00:02:33,120
to a specific attack technique in this

55
00:02:33,120 --> 00:02:37,040
case mshta so mshta is a built-in

56
00:02:37,040 --> 00:02:38,560
utility

57
00:02:38,560 --> 00:02:41,519
in windows signed by microsoft that

58
00:02:41,519 --> 00:02:42,879
allows

59
00:02:42,879 --> 00:02:46,080
an admin or an adversary to execute

60
00:02:46,080 --> 00:02:49,280
script code specifically vbscript or

61
00:02:49,280 --> 00:02:51,519
jscript and as we'll discuss and

62
00:02:51,519 --> 00:02:52,720
discover

63
00:02:52,720 --> 00:02:56,239
some variations thereof as well

64
00:02:56,239 --> 00:02:57,920
and i thought mshta would be a good

65
00:02:57,920 --> 00:03:00,080
example because it's a relatively simple

66
00:03:00,080 --> 00:03:04,159
utility it has a ton of options that we

67
00:03:04,159 --> 00:03:05,519
as the tech engineers would want to

68
00:03:05,519 --> 00:03:08,080
consider but it's also relatively

69
00:03:08,080 --> 00:03:10,959
tightly constrained in scope for

70
00:03:10,959 --> 00:03:13,120
for the length of time that we have here

71
00:03:13,120 --> 00:03:15,120
and also i want to encourage all of us

72
00:03:15,120 --> 00:03:17,120
certainly myself included

73
00:03:17,120 --> 00:03:18,959
just to get in the

74
00:03:18,959 --> 00:03:21,519
the process of asking more and better

75
00:03:21,519 --> 00:03:22,720
questions

76
00:03:22,720 --> 00:03:24,879
and so we'll discuss uh some of that as

77
00:03:24,879 --> 00:03:26,720
well

78
00:03:26,720 --> 00:03:29,200
so some aspirational goals of detection

79
00:03:29,200 --> 00:03:30,959
engineering in general

80
00:03:30,959 --> 00:03:32,879
not even applying like the um the

81
00:03:32,879 --> 00:03:36,080
adversarial mindset per se

82
00:03:36,080 --> 00:03:38,319
you'll hear me harp on this all the time

83
00:03:38,319 --> 00:03:40,799
and i have to remind myself of this

84
00:03:40,799 --> 00:03:43,680
if i ever start to get overwhelmed with

85
00:03:43,680 --> 00:03:46,959
a technique that is initially too broad

86
00:03:46,959 --> 00:03:49,680
and many of you are familiar with the

87
00:03:49,680 --> 00:03:51,760
miter attack matrix some of them are

88
00:03:51,760 --> 00:03:55,040
really freaking broad like there's a sub

89
00:03:55,040 --> 00:03:57,599
technique for powershell like there's

90
00:03:57,599 --> 00:04:00,560
nothing powershell can't do so like if

91
00:04:00,560 --> 00:04:02,400
someone was to approach me and say like

92
00:04:02,400 --> 00:04:03,120
hey

93
00:04:03,120 --> 00:04:04,720
matt i read canary do you detect

94
00:04:04,720 --> 00:04:06,000
powershell

95
00:04:06,000 --> 00:04:07,599
um i mean

96
00:04:07,599 --> 00:04:10,879
like i can't in good faith just say yes

97
00:04:10,879 --> 00:04:13,519
without caveats right it's so broad and

98
00:04:13,519 --> 00:04:15,120
so we need to start getting into the

99
00:04:15,120 --> 00:04:17,759
mindset of scope and being deliberate

100
00:04:17,759 --> 00:04:20,720
about the scope that we define and build

101
00:04:20,720 --> 00:04:23,519
coverage around

102
00:04:23,520 --> 00:04:25,440
and another goal is to continually

103
00:04:25,440 --> 00:04:27,919
increase our confidence in our ability

104
00:04:27,919 --> 00:04:30,160
to detect and attack tech being

105
00:04:30,160 --> 00:04:32,000
so i've already mentioned once i'll say

106
00:04:32,000 --> 00:04:34,800
it several other times

107
00:04:34,800 --> 00:04:37,120
detection is a process it's not an end

108
00:04:37,120 --> 00:04:39,280
state and so the best thing that we can

109
00:04:39,280 --> 00:04:42,320
do is just over time gradually increase

110
00:04:42,320 --> 00:04:44,400
our confidence like even if we're going

111
00:04:44,400 --> 00:04:46,479
to apply some of the techniques that we

112
00:04:46,479 --> 00:04:48,320
discuss here today

113
00:04:48,320 --> 00:04:50,160
in approaching things with an adversary

114
00:04:50,160 --> 00:04:52,400
mindset finding all the variations of

115
00:04:52,400 --> 00:04:55,120
any given technique

116
00:04:55,120 --> 00:04:56,639
we're still not going to have absolute

117
00:04:56,639 --> 00:04:59,199
confidence in 100 coverage like that's

118
00:04:59,199 --> 00:05:01,680
just not possible like this is one of

119
00:05:01,680 --> 00:05:03,360
the reasons like security researchers

120
00:05:03,360 --> 00:05:06,080
are so great uh anyways because they're

121
00:05:06,080 --> 00:05:08,960
continually challenging our assumptions

122
00:05:08,960 --> 00:05:11,680
and it's not my full-time job to be a

123
00:05:11,680 --> 00:05:14,080
security researcher so like i don't have

124
00:05:14,080 --> 00:05:17,039
the time or resources to be challenging

125
00:05:17,039 --> 00:05:20,400
all of the assumptions of our um corpus

126
00:05:20,400 --> 00:05:23,520
of detection analytics so um there's

127
00:05:23,520 --> 00:05:25,199
definitely give and take like as

128
00:05:25,199 --> 00:05:27,280
detection engineers we can start that

129
00:05:27,280 --> 00:05:29,520
process um but many of the security

130
00:05:29,520 --> 00:05:31,600
researchers out there can help and and

131
00:05:31,600 --> 00:05:32,479
also

132
00:05:32,479 --> 00:05:35,280
um like malware developers like can help

133
00:05:35,280 --> 00:05:39,120
build up that confidence over time

134
00:05:39,120 --> 00:05:41,600
so we do our best

135
00:05:41,600 --> 00:05:43,199
and then detection coverage lies on the

136
00:05:43,199 --> 00:05:46,080
foundation lies on a foundation of

137
00:05:46,080 --> 00:05:47,600
assumptions

138
00:05:47,600 --> 00:05:49,919
all right again this this comes back to

139
00:05:49,919 --> 00:05:53,280
confidence like we can only know so much

140
00:05:53,280 --> 00:05:55,360
like there are known and unknown

141
00:05:55,360 --> 00:05:57,199
assumptions

142
00:05:57,199 --> 00:05:59,440
the known assumptions ideally when we

143
00:05:59,440 --> 00:06:01,120
build detection analytics are things

144
00:06:01,120 --> 00:06:03,120
that we would document

145
00:06:03,120 --> 00:06:04,479
and the way i think about those known

146
00:06:04,479 --> 00:06:06,800
assumptions is those are anything that

147
00:06:06,800 --> 00:06:08,240
we document

148
00:06:08,240 --> 00:06:10,479
that we're saying deliberately fall

149
00:06:10,479 --> 00:06:12,400
outside of the scope of our detection

150
00:06:12,400 --> 00:06:13,600
analytic

151
00:06:13,600 --> 00:06:17,199
right um and that and that's okay so if

152
00:06:17,199 --> 00:06:19,120
attackers started coming around and

153
00:06:19,120 --> 00:06:20,880
abusing all those assumptions that we

154
00:06:20,880 --> 00:06:24,000
don't have a cover for uh coverage for

155
00:06:24,000 --> 00:06:26,400
again that's okay we can go focus on

156
00:06:26,400 --> 00:06:28,800
that some other time

157
00:06:28,800 --> 00:06:32,160
when it's prioritized accordingly

158
00:06:32,160 --> 00:06:35,039
but we we can't just cast a wide net and

159
00:06:35,039 --> 00:06:37,039
try to detect everything we have to be

160
00:06:37,039 --> 00:06:39,440
realistic

161
00:06:39,440 --> 00:06:41,199
um confidence is derived from our

162
00:06:41,199 --> 00:06:43,360
ability to define those clear scopes

163
00:06:43,360 --> 00:06:47,120
again and measure coverage within

164
00:06:47,120 --> 00:06:49,599
that defined scope

165
00:06:49,599 --> 00:06:51,520
and so

166
00:06:51,520 --> 00:06:53,440
with regard to measurement

167
00:06:53,440 --> 00:06:54,720
we're going to be talking about testing

168
00:06:54,720 --> 00:06:56,800
and validation quite a bit a little bit

169
00:06:56,800 --> 00:06:58,400
later on

170
00:06:58,400 --> 00:07:00,160
once again i'll be harping on this

171
00:07:00,160 --> 00:07:02,639
detection is a process and not an end

172
00:07:02,639 --> 00:07:03,599
state

173
00:07:03,599 --> 00:07:05,199
if you can confidently say that you

174
00:07:05,199 --> 00:07:07,039
detect power shell

175
00:07:07,039 --> 00:07:08,479
are you just going to go move on and

176
00:07:08,479 --> 00:07:10,720
just never care about again because like

177
00:07:10,720 --> 00:07:12,400
you have some arbitrary confidence that

178
00:07:12,400 --> 00:07:14,560
you'll always be able to detect it in

179
00:07:14,560 --> 00:07:15,680
all cases

180
00:07:15,680 --> 00:07:19,599
like but that will never be the case

181
00:07:19,599 --> 00:07:22,400
okay so now i'm going to describe the

182
00:07:22,400 --> 00:07:24,800
methodology that i apply

183
00:07:24,800 --> 00:07:26,960
um in many cases to detection

184
00:07:26,960 --> 00:07:29,280
engineering applying that adversarial

185
00:07:29,280 --> 00:07:30,560
mindset

186
00:07:30,560 --> 00:07:32,000
now you're not going to have to follow

187
00:07:32,000 --> 00:07:34,479
any of these in sequence

188
00:07:34,479 --> 00:07:37,280
think of this just as like a cycle

189
00:07:37,280 --> 00:07:39,680
and i'll go back and forth between them

190
00:07:39,680 --> 00:07:41,199
depending upon the scope of the

191
00:07:41,199 --> 00:07:44,560
technique but the first step is to

192
00:07:44,560 --> 00:07:46,960
define an initial scope

193
00:07:46,960 --> 00:07:49,199
and this can be really really easy and

194
00:07:49,199 --> 00:07:51,039
we're going to walk through this process

195
00:07:51,039 --> 00:07:53,360
step one why don't we go to

196
00:07:53,360 --> 00:07:55,759
miter's webpage and actually learn what

197
00:07:55,759 --> 00:07:58,639
this attack technique is and i'll show

198
00:07:58,639 --> 00:08:01,680
you how i kind of read between the lines

199
00:08:01,680 --> 00:08:04,560
when i'm defining an initial scope for a

200
00:08:04,560 --> 00:08:06,879
detection analytic

201
00:08:06,879 --> 00:08:10,160
we'll use things like open source intel

202
00:08:10,160 --> 00:08:12,319
but then we'll also transition into the

203
00:08:12,319 --> 00:08:16,400
next stage which i call mapping or like

204
00:08:16,400 --> 00:08:18,560
identifying key terrain

205
00:08:18,560 --> 00:08:21,039
this is where we

206
00:08:21,039 --> 00:08:23,280
can apply concepts like static and

207
00:08:23,280 --> 00:08:26,080
dynamic reverse engineering to identify

208
00:08:26,080 --> 00:08:29,039
the technical components that

209
00:08:29,039 --> 00:08:30,240
um

210
00:08:30,240 --> 00:08:32,479
that make up that attack technique so if

211
00:08:32,479 --> 00:08:34,640
we can understand the actual components

212
00:08:34,640 --> 00:08:38,719
yet the relevant executables the dlls

213
00:08:38,719 --> 00:08:41,599
any uh specific like consistent network

214
00:08:41,599 --> 00:08:45,040
connections registry modifications

215
00:08:45,040 --> 00:08:47,120
if we can be confident that within our

216
00:08:47,120 --> 00:08:49,120
scope those things are not going to

217
00:08:49,120 --> 00:08:50,800
change

218
00:08:50,800 --> 00:08:52,480
then that's where we can really start

219
00:08:52,480 --> 00:08:54,399
focusing our analytics

220
00:08:54,399 --> 00:08:55,920
because that's where we can apply those

221
00:08:55,920 --> 00:08:59,279
detection choke points because if any of

222
00:08:59,279 --> 00:09:02,640
those components are not successful well

223
00:09:02,640 --> 00:09:04,080
they're required

224
00:09:04,080 --> 00:09:05,760
in order for that attack technique to be

225
00:09:05,760 --> 00:09:07,440
successful so

226
00:09:07,440 --> 00:09:08,880
if we can

227
00:09:08,880 --> 00:09:11,519
focus our detection optics on any one of

228
00:09:11,519 --> 00:09:14,080
those finite

229
00:09:14,080 --> 00:09:16,080
technical components

230
00:09:16,080 --> 00:09:18,320
then

231
00:09:18,320 --> 00:09:20,560
we can prevent ourselves from expanding

232
00:09:20,560 --> 00:09:22,800
our scope unnecessarily

233
00:09:22,800 --> 00:09:23,920
and also

234
00:09:23,920 --> 00:09:27,600
really hone in on adversary behavior

235
00:09:27,600 --> 00:09:30,880
the next step is classification

236
00:09:30,880 --> 00:09:33,519
so here's where we will identify

237
00:09:33,519 --> 00:09:35,519
technique variations and you'll hear me

238
00:09:35,519 --> 00:09:37,440
say this a lot think of a technique

239
00:09:37,440 --> 00:09:41,360
variation as like a sub sub technique so

240
00:09:41,360 --> 00:09:43,600
if we keep talking about scope right we

241
00:09:43,600 --> 00:09:45,360
want to keep con

242
00:09:45,360 --> 00:09:47,760
like start with a relatively expanded

243
00:09:47,760 --> 00:09:49,680
scope but try to constrain it

244
00:09:49,680 --> 00:09:51,680
appropriately over time

245
00:09:51,680 --> 00:09:54,320
and so a technique variation is

246
00:09:54,320 --> 00:09:56,640
we're going to talk about mshta

247
00:09:56,640 --> 00:09:58,880
there's a handful of different ways to

248
00:09:58,880 --> 00:09:59,920
invoke

249
00:09:59,920 --> 00:10:03,360
mshta right you can use it to download

250
00:10:03,360 --> 00:10:06,160
an hta file remotely you can execute it

251
00:10:06,160 --> 00:10:09,040
from disk you can execute it in line

252
00:10:09,040 --> 00:10:10,480
right there's all these different ways

253
00:10:10,480 --> 00:10:11,680
and there's some additional ones we'll

254
00:10:11,680 --> 00:10:13,760
get into i consider all these to be

255
00:10:13,760 --> 00:10:15,440
technique variations

256
00:10:15,440 --> 00:10:17,760
and so we can identify those through

257
00:10:17,760 --> 00:10:19,920
open source intelligence right like

258
00:10:19,920 --> 00:10:21,920
whatever the adversaries are doing like

259
00:10:21,920 --> 00:10:23,279
if we're talking about coverage like

260
00:10:23,279 --> 00:10:24,640
that should be the minimum set of

261
00:10:24,640 --> 00:10:26,959
coverage that we have is against in the

262
00:10:26,959 --> 00:10:28,640
wild threats

263
00:10:28,640 --> 00:10:30,800
but we'll also want to go against like

264
00:10:30,800 --> 00:10:32,720
uh theoretical

265
00:10:32,720 --> 00:10:34,320
variations as well

266
00:10:34,320 --> 00:10:36,480
um for those theoretical variations is

267
00:10:36,480 --> 00:10:39,600
where we extrapolate uh those variations

268
00:10:39,600 --> 00:10:42,320
through reverse engineering and also

269
00:10:42,320 --> 00:10:44,240
applying that adversary mindset to

270
00:10:44,240 --> 00:10:47,519
understand what an adversary has direct

271
00:10:47,519 --> 00:10:50,480
or some level of control over for each

272
00:10:50,480 --> 00:10:52,079
one of those variations and we'll go

273
00:10:52,079 --> 00:10:54,480
into some examples

274
00:10:54,480 --> 00:10:56,720
next this is where we really put our

275
00:10:56,720 --> 00:11:00,399
adversary hat on and consider

276
00:11:00,399 --> 00:11:03,360
what an attacker has direct control over

277
00:11:03,360 --> 00:11:05,120
all right so i mentioned

278
00:11:05,120 --> 00:11:09,120
that with mshta you can execute a script

279
00:11:09,120 --> 00:11:12,000
locally on disk well does that script

280
00:11:12,000 --> 00:11:15,600
have to have a specific file extension

281
00:11:15,600 --> 00:11:17,600
mshta.exe

282
00:11:17,600 --> 00:11:20,160
does that have to be mshta.exe or can

283
00:11:20,160 --> 00:11:23,120
that be relocated renamed right so we'll

284
00:11:23,120 --> 00:11:24,560
go into this and

285
00:11:24,560 --> 00:11:26,399
put our adversary hats on and think

286
00:11:26,399 --> 00:11:29,040
about all the ways that we control so

287
00:11:29,040 --> 00:11:31,120
many things that might

288
00:11:31,120 --> 00:11:32,959
challenge some

289
00:11:32,959 --> 00:11:35,600
defender assumptions

290
00:11:35,600 --> 00:11:36,880
next we'll

291
00:11:36,880 --> 00:11:38,560
we'll apply everything that we learned

292
00:11:38,560 --> 00:11:39,920
previously

293
00:11:39,920 --> 00:11:42,240
and tie all of that to any relevant

294
00:11:42,240 --> 00:11:46,079
detection optics right are there process

295
00:11:46,079 --> 00:11:49,120
process start events module loads

296
00:11:49,120 --> 00:11:51,440
network connections all the stuff we're

297
00:11:51,440 --> 00:11:53,360
typically accustomed to

298
00:11:53,360 --> 00:11:55,279
but it's going to be more tightly

299
00:11:55,279 --> 00:11:56,959
constrained to what we've learned

300
00:11:56,959 --> 00:11:59,120
through our research process and we're

301
00:11:59,120 --> 00:12:00,320
just going to be that much more

302
00:12:00,320 --> 00:12:02,720
confident as a result

303
00:12:02,720 --> 00:12:04,800
in those detection artifacts and not

304
00:12:04,800 --> 00:12:07,440
make as many assumptions as we would

305
00:12:07,440 --> 00:12:10,800
have if we just detonated a sample in a

306
00:12:10,800 --> 00:12:13,200
sandbox and observed in like a procmond

307
00:12:13,200 --> 00:12:16,000
trace uh what what popped out on the

308
00:12:16,000 --> 00:12:17,920
other end this is definitely more of a

309
00:12:17,920 --> 00:12:21,519
deeper or holistic approach

310
00:12:21,519 --> 00:12:23,760
next is uh to validate so this is where

311
00:12:23,760 --> 00:12:25,920
we're actually developing code

312
00:12:25,920 --> 00:12:28,720
um i mean if we if we were a red teamer

313
00:12:28,720 --> 00:12:31,120
we'd be developing a red team tool to

314
00:12:31,120 --> 00:12:32,880
uh to leverage this technique but as

315
00:12:32,880 --> 00:12:36,000
detection engineers uh we're think of it

316
00:12:36,000 --> 00:12:37,839
just like we're building like unit and

317
00:12:37,839 --> 00:12:40,399
functional tests to test this one

318
00:12:40,399 --> 00:12:42,639
technique so we're taking all the

319
00:12:42,639 --> 00:12:45,040
technique variations that we identified

320
00:12:45,040 --> 00:12:47,360
and we're baking those into code and

321
00:12:47,360 --> 00:12:48,880
we're so we're

322
00:12:48,880 --> 00:12:50,800
implementing parameters

323
00:12:50,800 --> 00:12:53,600
that allow a defender or a detection

324
00:12:53,600 --> 00:12:54,800
engineer

325
00:12:54,800 --> 00:12:57,600
to flip all those bits that an adversary

326
00:12:57,600 --> 00:13:00,639
would have available to them as well and

327
00:13:00,639 --> 00:13:02,560
then we can write unit tests and

328
00:13:02,560 --> 00:13:04,880
functional tests on top of that to

329
00:13:04,880 --> 00:13:07,920
really measure our coverage and i've got

330
00:13:07,920 --> 00:13:10,000
some code that i'll show you

331
00:13:10,000 --> 00:13:12,399
that that we use to do that

332
00:13:12,399 --> 00:13:14,480
and then rinse and repeat

333
00:13:14,480 --> 00:13:17,360
so again this is a cyclical process you

334
00:13:17,360 --> 00:13:18,959
may have gotten to the last step of

335
00:13:18,959 --> 00:13:22,399
validation um only to discover or

336
00:13:22,399 --> 00:13:25,120
realize like oh yeah there's this one

337
00:13:25,120 --> 00:13:26,880
additional variation that we might want

338
00:13:26,880 --> 00:13:29,040
to get coverage for so you may have to

339
00:13:29,040 --> 00:13:30,800
do some more reversing

340
00:13:30,800 --> 00:13:32,800
some more testing some more open source

341
00:13:32,800 --> 00:13:34,160
intelligence and repeat this whole

342
00:13:34,160 --> 00:13:36,240
process until you're confident that

343
00:13:36,240 --> 00:13:38,240
you've defined your scope

344
00:13:38,240 --> 00:13:39,680
appropriately

345
00:13:39,680 --> 00:13:42,320
and can move on

346
00:13:42,320 --> 00:13:44,959
all right so um

347
00:13:44,959 --> 00:13:48,079
i think we can all collectively uh just

348
00:13:48,079 --> 00:13:50,720
get better at asking questions and uh

349
00:13:50,720 --> 00:13:52,880
the the general this morning i i think

350
00:13:52,880 --> 00:13:54,240
made some good points about like

351
00:13:54,240 --> 00:13:56,480
challenging assumptions and uh that this

352
00:13:56,480 --> 00:13:58,639
certainly applies here so this is like

353
00:13:58,639 --> 00:14:01,040
the canonical question that

354
00:14:01,040 --> 00:14:02,959
is very reasonable

355
00:14:02,959 --> 00:14:06,320
from like say a prospective customer or

356
00:14:06,320 --> 00:14:08,639
you know the latest threat drops on on

357
00:14:08,639 --> 00:14:11,360
twitter um there's a whole lot of fun

358
00:14:11,360 --> 00:14:12,880
around that maybe

359
00:14:12,880 --> 00:14:13,920
um

360
00:14:13,920 --> 00:14:15,120
malware authors are starting to

361
00:14:15,120 --> 00:14:16,320
weaponize that and so there's a

362
00:14:16,320 --> 00:14:18,079
legitimate concern

363
00:14:18,079 --> 00:14:21,040
hey vendor do you detect this thing

364
00:14:21,040 --> 00:14:23,680
right well of course you would love to

365
00:14:23,680 --> 00:14:24,480
give

366
00:14:24,480 --> 00:14:26,639
a confident yes answer

367
00:14:26,639 --> 00:14:28,320
but many of us know

368
00:14:28,320 --> 00:14:30,399
that's usually not possible without

369
00:14:30,399 --> 00:14:35,360
caveats all right so do you detect mshta

370
00:14:35,360 --> 00:14:37,440
so well what do we mean by detect this

371
00:14:37,440 --> 00:14:39,440
is not what i'm going to be saying to

372
00:14:39,440 --> 00:14:40,880
the prospective customer this is like

373
00:14:40,880 --> 00:14:42,399
what i'm thinking in my head because i

374
00:14:42,399 --> 00:14:44,240
don't i don't want to be like well

375
00:14:44,240 --> 00:14:46,800
actually like do you actually know what

376
00:14:46,800 --> 00:14:49,279
mshda is like it's not you know it's

377
00:14:49,279 --> 00:14:51,360
complicated it's not it's not that easy

378
00:14:51,360 --> 00:14:52,800
all right

379
00:14:52,800 --> 00:14:54,320
um so

380
00:14:54,320 --> 00:14:57,519
what do we mean by detect mshta what do

381
00:14:57,519 --> 00:14:59,040
we actually need

382
00:14:59,040 --> 00:15:01,680
to give that affirmative yes or no do we

383
00:15:01,680 --> 00:15:04,399
detect it well the next question i would

384
00:15:04,399 --> 00:15:08,800
ask to myself is well what is mshta

385
00:15:08,800 --> 00:15:11,519
like i know intuitively what it is i

386
00:15:11,519 --> 00:15:15,000
know that adversaries abuse

387
00:15:15,000 --> 00:15:17,760
mshta.exe but is that it

388
00:15:17,760 --> 00:15:21,279
or are there other avenues of executing

389
00:15:21,279 --> 00:15:24,079
hta script code i don't know but we'll

390
00:15:24,079 --> 00:15:27,519
investigate that

391
00:15:27,519 --> 00:15:31,120
and what is required to see mshta based

392
00:15:31,120 --> 00:15:34,480
on the scope of my specific definition

393
00:15:34,480 --> 00:15:38,000
so you see i've highlighted detect and c

394
00:15:38,000 --> 00:15:38,800
so

395
00:15:38,800 --> 00:15:41,279
my philosophy is you can't confidently

396
00:15:41,279 --> 00:15:43,199
detect something if you can't

397
00:15:43,199 --> 00:15:46,240
confidently see it in the first place

398
00:15:46,240 --> 00:15:48,079
and this is what um identifying those

399
00:15:48,079 --> 00:15:51,440
technique variations is so important for

400
00:15:51,440 --> 00:15:53,920
is uh and identifying the relevant

401
00:15:53,920 --> 00:15:56,240
optics for each variation

402
00:15:56,240 --> 00:15:58,000
so if you can't see

403
00:15:58,000 --> 00:15:59,440
um

404
00:15:59,440 --> 00:16:01,440
what those would look like in in your

405
00:16:01,440 --> 00:16:03,839
optics uh then you're not going to be

406
00:16:03,839 --> 00:16:06,240
able to confidently discern benign from

407
00:16:06,240 --> 00:16:09,040
non-benign in the first place

408
00:16:09,040 --> 00:16:10,720
so we have to have good

409
00:16:10,720 --> 00:16:13,120
optics coverage in order to have good

410
00:16:13,120 --> 00:16:16,240
detection coverage

411
00:16:17,199 --> 00:16:19,199
and then what is required to discern

412
00:16:19,199 --> 00:16:21,519
benign from non-benign

413
00:16:21,519 --> 00:16:24,160
in my mind it's generally easier to

414
00:16:24,160 --> 00:16:26,399
scope the set of

415
00:16:26,399 --> 00:16:29,839
benign behaviors than it is to scope

416
00:16:29,839 --> 00:16:31,279
non-benign and

417
00:16:31,279 --> 00:16:33,519
when i say non-benign i'm including

418
00:16:33,519 --> 00:16:36,639
suspicious and malicious categorizations

419
00:16:36,639 --> 00:16:39,120
right suspicious implies some ambiguity

420
00:16:39,120 --> 00:16:40,880
whereas malicious is like yeah that's

421
00:16:40,880 --> 00:16:43,759
overtly bad that we can all agree on

422
00:16:43,759 --> 00:16:45,759
right

423
00:16:45,759 --> 00:16:47,600
next if we want to confidently label

424
00:16:47,600 --> 00:16:49,680
something as malicious is there any

425
00:16:49,680 --> 00:16:51,120
supplemental

426
00:16:51,120 --> 00:16:54,399
data beyond the original scope of our

427
00:16:54,399 --> 00:16:57,920
optics that might be used to enrich

428
00:16:57,920 --> 00:16:58,800
the

429
00:16:58,800 --> 00:17:00,320
the event so that we can be more

430
00:17:00,320 --> 00:17:01,920
confident that something actually is

431
00:17:01,920 --> 00:17:03,199
malicious

432
00:17:03,199 --> 00:17:04,880
so that we're not just generating false

433
00:17:04,880 --> 00:17:06,959
positives all day

434
00:17:06,959 --> 00:17:09,919
so do you detect mshta

435
00:17:09,919 --> 00:17:12,640
heck yeah i do but with some reasonable

436
00:17:12,640 --> 00:17:15,359
caveats all right

437
00:17:15,359 --> 00:17:17,119
all right so let's apply this

438
00:17:17,119 --> 00:17:18,559
methodology

439
00:17:18,559 --> 00:17:20,319
so i mentioned the very first thing that

440
00:17:20,319 --> 00:17:23,520
i do in the the scoping phase

441
00:17:23,520 --> 00:17:25,760
of this adversarial approach is like

442
00:17:25,760 --> 00:17:28,640
literally just go to the website

443
00:17:28,640 --> 00:17:31,360
miter attack all right so let's read

444
00:17:31,360 --> 00:17:33,840
between the lines here a little bit so

445
00:17:33,840 --> 00:17:34,799
um

446
00:17:34,799 --> 00:17:36,720
first thing that popped out to me is

447
00:17:36,720 --> 00:17:39,520
mshta all right that first question

448
00:17:39,520 --> 00:17:42,240
was that i had to myself is what is

449
00:17:42,240 --> 00:17:43,840
mshta

450
00:17:43,840 --> 00:17:46,360
well it says here adversaries may abuse

451
00:17:46,360 --> 00:17:49,360
mshta.exe to proxy execution

452
00:17:49,360 --> 00:17:51,360
of what

453
00:17:51,360 --> 00:17:53,760
dot hta files

454
00:17:53,760 --> 00:17:57,360
okay those appear to be microsoft html

455
00:17:57,360 --> 00:17:59,679
application files and that's nice they

456
00:17:59,679 --> 00:18:01,600
have a link there so i can go maybe

457
00:18:01,600 --> 00:18:03,520
reference that and learn what the heck

458
00:18:03,520 --> 00:18:06,880
these things are in the first place

459
00:18:06,880 --> 00:18:08,480
but but uh

460
00:18:08,480 --> 00:18:11,919
some some questions i have already are

461
00:18:11,919 --> 00:18:16,080
is it just mshta or is mshta maybe just

462
00:18:16,080 --> 00:18:18,400
like a wrapper for some other

463
00:18:18,400 --> 00:18:20,720
core um like maybe

464
00:18:20,720 --> 00:18:21,520
like

465
00:18:21,520 --> 00:18:24,720
functionality built into a dll that i

466
00:18:24,720 --> 00:18:26,640
might be able to reference somewhere

467
00:18:26,640 --> 00:18:30,080
else and then hta files is that it

468
00:18:30,080 --> 00:18:33,360
or can you supply other file types file

469
00:18:33,360 --> 00:18:37,039
extensions i don't know yet

470
00:18:37,360 --> 00:18:41,440
so and javascript and vbscript okay

471
00:18:41,440 --> 00:18:42,480
i've seen

472
00:18:42,480 --> 00:18:44,799
that a lot in the wild

473
00:18:44,799 --> 00:18:47,760
but is that it i don't know and what is

474
00:18:47,760 --> 00:18:51,039
javascript and vbscript in the context

475
00:18:51,039 --> 00:18:51,840
of

476
00:18:51,840 --> 00:18:56,400
mshta so we'll investigate that

477
00:18:56,400 --> 00:18:58,799
apparently you can also execute inline

478
00:18:58,799 --> 00:19:00,960
scripts and they give a cool example of

479
00:19:00,960 --> 00:19:01,760
that

480
00:19:01,760 --> 00:19:02,720
there

481
00:19:02,720 --> 00:19:04,080
they can be invoked

482
00:19:04,080 --> 00:19:06,240
directly from urls

483
00:19:06,240 --> 00:19:09,120
so right there i see two

484
00:19:09,120 --> 00:19:11,440
unique technique variations

485
00:19:11,440 --> 00:19:13,760
inline script execution

486
00:19:13,760 --> 00:19:17,679
and execution from a url

487
00:19:17,679 --> 00:19:19,679
so again think of those as like

488
00:19:19,679 --> 00:19:21,760
sub sub techniques in

489
00:19:21,760 --> 00:19:25,320
mitre parlance

490
00:19:26,720 --> 00:19:29,039
where were we

491
00:19:29,039 --> 00:19:30,320
okay

492
00:19:30,320 --> 00:19:31,200
and then

493
00:19:31,200 --> 00:19:33,840
mshta stood out to me right

494
00:19:33,840 --> 00:19:36,000
does it have to be mshta

495
00:19:36,000 --> 00:19:40,000
can mshta be renamed relocated

496
00:19:40,000 --> 00:19:42,960
to notepad.exe i don't know it's

497
00:19:42,960 --> 00:19:45,039
certainly worth trying and building some

498
00:19:45,039 --> 00:19:46,400
test coverage

499
00:19:46,400 --> 00:19:48,640
around

500
00:19:48,640 --> 00:19:50,960
this stood out to me so i'm like trying

501
00:19:50,960 --> 00:19:52,720
to think as as a defender if i was to

502
00:19:52,720 --> 00:19:54,640
build some like command line coverage

503
00:19:54,640 --> 00:19:56,960
around this like is vbscript always

504
00:19:56,960 --> 00:19:58,640
going to be consistent

505
00:19:58,640 --> 00:20:00,640
or are there other options i mean i

506
00:20:00,640 --> 00:20:02,559
mentioned that javascript is supported

507
00:20:02,559 --> 00:20:04,640
so what would that look like

508
00:20:04,640 --> 00:20:06,480
and are there any others

509
00:20:06,480 --> 00:20:08,799
i'd like to investigate that independent

510
00:20:08,799 --> 00:20:12,960
of if they're abused in the wild or not

511
00:20:14,640 --> 00:20:16,080
and then lastly this stood out to me

512
00:20:16,080 --> 00:20:17,440
this might be something that i might

513
00:20:17,440 --> 00:20:18,799
want to

514
00:20:18,799 --> 00:20:21,120
investigate the the validity of whether

515
00:20:21,120 --> 00:20:22,799
or not it bypasses

516
00:20:22,799 --> 00:20:25,679
application control solutions

517
00:20:25,679 --> 00:20:26,880
okay

518
00:20:26,880 --> 00:20:28,880
so next we're going to move on to open

519
00:20:28,880 --> 00:20:31,600
source intelligence and actually see

520
00:20:31,600 --> 00:20:35,840
how things are being abused in the wild

521
00:20:35,840 --> 00:20:37,200
and as

522
00:20:37,200 --> 00:20:38,559
i look through all these again i'm

523
00:20:38,559 --> 00:20:40,159
trying to enumerate those technique

524
00:20:40,159 --> 00:20:43,440
variations what stand out to me is like

525
00:20:43,440 --> 00:20:47,440
unique features of each procedure being

526
00:20:47,440 --> 00:20:50,880
executed here so procedure like the ttp

527
00:20:50,880 --> 00:20:53,039
tactics techniques and procedures we're

528
00:20:53,039 --> 00:20:55,440
looking at specific procedures here

529
00:20:55,440 --> 00:20:56,880
particular instances where the

530
00:20:56,880 --> 00:20:59,280
techniques are invoked so this first one

531
00:20:59,280 --> 00:21:02,000
here looks like that um that inline

532
00:21:02,000 --> 00:21:04,559
script execution paradigm

533
00:21:04,559 --> 00:21:06,320
this looks a little bit different like

534
00:21:06,320 --> 00:21:08,799
in the one in mitre it have bb script so

535
00:21:08,799 --> 00:21:11,120
this one has javascript colon and then

536
00:21:11,120 --> 00:21:13,679
script code goes in there

537
00:21:13,679 --> 00:21:15,520
again i'm going to ask are there any

538
00:21:15,520 --> 00:21:17,440
additional

539
00:21:17,440 --> 00:21:20,159
script options that i can supply there

540
00:21:20,159 --> 00:21:21,919
is there anything else in that script

541
00:21:21,919 --> 00:21:24,960
code that might be required

542
00:21:24,960 --> 00:21:25,679
so

543
00:21:25,679 --> 00:21:28,640
as a detection engineer what i really

544
00:21:28,640 --> 00:21:30,960
want to get to the bottom of

545
00:21:30,960 --> 00:21:32,159
is

546
00:21:32,159 --> 00:21:33,919
what are the things that an adversary

547
00:21:33,919 --> 00:21:37,280
has the least amount of control over

548
00:21:37,280 --> 00:21:39,120
so in the case of

549
00:21:39,120 --> 00:21:41,360
inline script execution

550
00:21:41,360 --> 00:21:44,799
is it required to have the script

551
00:21:44,799 --> 00:21:45,760
engine

552
00:21:45,760 --> 00:21:48,159
colon script code in there

553
00:21:48,159 --> 00:21:50,960
if so i might be able to key off of that

554
00:21:50,960 --> 00:21:51,919
but

555
00:21:51,919 --> 00:21:54,960
i can't be confident in that detection

556
00:21:54,960 --> 00:21:57,679
analytical logic unless i capture the

557
00:21:57,679 --> 00:21:59,919
set of all possible

558
00:21:59,919 --> 00:22:01,520
script engines and so we'll we'll

559
00:22:01,520 --> 00:22:03,440
investigate

560
00:22:03,440 --> 00:22:07,280
what what those are comprised of

561
00:22:07,280 --> 00:22:08,080
all right

562
00:22:08,080 --> 00:22:09,360
next

563
00:22:09,360 --> 00:22:13,039
uh this looks like

564
00:22:13,440 --> 00:22:15,679
being downloaded and executed from from

565
00:22:15,679 --> 00:22:17,120
a url

566
00:22:17,120 --> 00:22:19,440
this one is a variation of something

567
00:22:19,440 --> 00:22:20,480
that

568
00:22:20,480 --> 00:22:22,400
we did see in the wild which i thought

569
00:22:22,400 --> 00:22:24,480
was really interesting

570
00:22:24,480 --> 00:22:28,080
i don't recall if it was an actual crl

571
00:22:28,080 --> 00:22:30,240
file

572
00:22:30,240 --> 00:22:32,240
but what's really interesting and this

573
00:22:32,240 --> 00:22:34,000
will come up in a little bit is you can

574
00:22:34,000 --> 00:22:37,840
embed hta scripts in any arbitrary file

575
00:22:37,840 --> 00:22:39,760
format you want

576
00:22:39,760 --> 00:22:43,039
and mshta will read it from

577
00:22:43,039 --> 00:22:45,600
from the end of the file so you can just

578
00:22:45,600 --> 00:22:47,520
tack it on to any file type you want

579
00:22:47,520 --> 00:22:50,799
including a crl a certificate revocation

580
00:22:50,799 --> 00:22:52,240
list

581
00:22:52,240 --> 00:22:54,159
which is probably going to be signed

582
00:22:54,159 --> 00:22:56,799
anyway so there's a potentially really

583
00:22:56,799 --> 00:23:00,240
good evasion opportunity

584
00:23:01,200 --> 00:23:04,000
okay uh this one was really interesting

585
00:23:04,000 --> 00:23:05,919
when when i first saw scratching my head

586
00:23:05,919 --> 00:23:09,039
a little bit like how this even works

587
00:23:09,039 --> 00:23:11,039
but it should make sense once we start

588
00:23:11,039 --> 00:23:12,640
reversing this

589
00:23:12,640 --> 00:23:15,360
how this how this is possible

590
00:23:15,360 --> 00:23:18,720
but you see that the syntax

591
00:23:18,720 --> 00:23:20,880
is somewhat similar

592
00:23:20,880 --> 00:23:23,440
in the sense that the script engine is

593
00:23:23,440 --> 00:23:25,919
there so script engine colon right so

594
00:23:25,919 --> 00:23:28,080
i'm noticing these patterns

595
00:23:28,080 --> 00:23:29,919
as a detection engineer

596
00:23:29,919 --> 00:23:31,840
the difference is the syntax is a little

597
00:23:31,840 --> 00:23:34,000
bit different that follows a colon and

598
00:23:34,000 --> 00:23:36,640
it's also run dll32 executing which is

599
00:23:36,640 --> 00:23:39,440
super interesting

600
00:23:40,880 --> 00:23:43,039
okay i just made this one up but this

601
00:23:43,039 --> 00:23:45,039
was like a theory that i had like what

602
00:23:45,039 --> 00:23:47,360
would prevent someone from renaming

603
00:23:47,360 --> 00:23:49,760
mshta to notepad.exe

604
00:23:49,760 --> 00:23:52,880
and instead of evil.hta

605
00:23:52,880 --> 00:23:55,279
renaming it to notes.text is that

606
00:23:55,279 --> 00:23:57,679
possible right we don't have to just

607
00:23:57,679 --> 00:24:00,240
rely on open source intelligence like

608
00:24:00,240 --> 00:24:02,159
we're also intelligent ourselves to

609
00:24:02,159 --> 00:24:03,120
create

610
00:24:03,120 --> 00:24:07,120
hypotheses that we could easily test

611
00:24:07,120 --> 00:24:08,080
whoa

612
00:24:08,080 --> 00:24:10,320
sorry

613
00:24:12,400 --> 00:24:13,279
okay

614
00:24:13,279 --> 00:24:15,200
some other ones i'm just throwing in

615
00:24:15,200 --> 00:24:16,720
here for reference when i was

616
00:24:16,720 --> 00:24:18,400
researching this

617
00:24:18,400 --> 00:24:20,400
again this is where like

618
00:24:20,400 --> 00:24:22,400
security researchers are constantly like

619
00:24:22,400 --> 00:24:24,320
challenging our assumptions this was a

620
00:24:24,320 --> 00:24:26,720
cool one lethal hta

621
00:24:26,720 --> 00:24:29,679
so i didn't realize that hta was also an

622
00:24:29,679 --> 00:24:31,840
implemented com object

623
00:24:31,840 --> 00:24:34,080
which means that

624
00:24:34,080 --> 00:24:36,559
hta itself actually made for a great

625
00:24:36,559 --> 00:24:37,840
potential

626
00:24:37,840 --> 00:24:40,640
lateral movement technique

627
00:24:40,640 --> 00:24:42,400
so this is something that we might want

628
00:24:42,400 --> 00:24:44,480
to consider in our research and our

629
00:24:44,480 --> 00:24:48,000
tests as well to build out coverage for

630
00:24:48,000 --> 00:24:49,600
and then finally i've already mentioned

631
00:24:49,600 --> 00:24:53,919
this so a polyglot file is a one file on

632
00:24:53,919 --> 00:24:56,400
disk that represents different formats

633
00:24:56,400 --> 00:24:57,919
simultaneously

634
00:24:57,919 --> 00:25:00,080
so this was a really cool article where

635
00:25:00,080 --> 00:25:02,240
again it turns out you can just append

636
00:25:02,240 --> 00:25:06,080
hta content to any file type uh whether

637
00:25:06,080 --> 00:25:09,039
it be a pe a certificate revocation list

638
00:25:09,039 --> 00:25:11,600
like it doesn't matter mshta just wants

639
00:25:11,600 --> 00:25:13,440
to read it from the back of the file so

640
00:25:13,440 --> 00:25:15,840
there's some really interesting evasion

641
00:25:15,840 --> 00:25:18,720
opportunities in that scenario there

642
00:25:18,720 --> 00:25:21,360
so we're taking our notes and we're

643
00:25:21,360 --> 00:25:23,279
annotating all these different technique

644
00:25:23,279 --> 00:25:24,559
variations

645
00:25:24,559 --> 00:25:26,000
and all these variations are going to

646
00:25:26,000 --> 00:25:28,640
have their own distinct

647
00:25:28,640 --> 00:25:30,799
detection scope

648
00:25:30,799 --> 00:25:33,200
there may be some overlap but many of

649
00:25:33,200 --> 00:25:35,600
these look different um because like

650
00:25:35,600 --> 00:25:37,360
there's going to be different

651
00:25:37,360 --> 00:25:39,840
detection optics unique to each one of

652
00:25:39,840 --> 00:25:42,640
these variations

653
00:25:42,640 --> 00:25:43,600
all right

654
00:25:43,600 --> 00:25:45,279
so here's the fun part

655
00:25:45,279 --> 00:25:47,120
actually digging in and learning a

656
00:25:47,120 --> 00:25:49,279
little bit about how these things work

657
00:25:49,279 --> 00:25:50,159
um

658
00:25:50,159 --> 00:25:53,360
identifying the technical components

659
00:25:53,360 --> 00:25:55,520
so i'll be glossing over

660
00:25:55,520 --> 00:25:56,799
a lot here

661
00:25:56,799 --> 00:25:58,720
but it turns out like if you just throw

662
00:25:58,720 --> 00:26:01,120
mshta in into ida

663
00:26:01,120 --> 00:26:04,400
it's a very very simple wrapper

664
00:26:04,400 --> 00:26:07,840
for the run html application export

665
00:26:07,840 --> 00:26:09,640
function in

666
00:26:09,640 --> 00:26:12,720
mshtml.exe like that's that's all it is

667
00:26:12,720 --> 00:26:15,200
it just wraps that function

668
00:26:15,200 --> 00:26:16,480
um

669
00:26:16,480 --> 00:26:17,600
and

670
00:26:17,600 --> 00:26:21,039
uh when i annotated the

671
00:26:21,039 --> 00:26:23,440
uh the parameters or the arguments that

672
00:26:23,440 --> 00:26:26,080
were being passed to it um what stood

673
00:26:26,080 --> 00:26:28,400
out to me it was interesting these four

674
00:26:28,400 --> 00:26:31,919
arguments mirrored the um the function

675
00:26:31,919 --> 00:26:34,240
signature for

676
00:26:34,240 --> 00:26:35,279
uh

677
00:26:35,279 --> 00:26:37,120
if you want to write any function that

678
00:26:37,120 --> 00:26:40,320
you intend to implement for

679
00:26:40,320 --> 00:26:42,480
run dll32

680
00:26:42,480 --> 00:26:44,559
these are the parameters that you would

681
00:26:44,559 --> 00:26:47,679
implement in in your function

682
00:26:47,679 --> 00:26:50,400
and that's what i was seeing in ida

683
00:26:50,400 --> 00:26:53,440
and so it was cool that um using that

684
00:26:53,440 --> 00:26:54,720
information

685
00:26:54,720 --> 00:26:57,600
i was able to arrive to the same like a

686
00:26:57,600 --> 00:26:59,200
similar conclusion

687
00:26:59,200 --> 00:27:01,279
to what

688
00:27:01,279 --> 00:27:03,760
was revealed was being used in the wild

689
00:27:03,760 --> 00:27:05,279
that um

690
00:27:05,279 --> 00:27:06,640
uh

691
00:27:06,640 --> 00:27:10,640
what was it yeah the run dll32 instance

692
00:27:10,640 --> 00:27:12,159
like it didn't really make sense to me

693
00:27:12,159 --> 00:27:14,640
at the time how that was even possible

694
00:27:14,640 --> 00:27:16,880
but now that i could confirm

695
00:27:16,880 --> 00:27:18,240
in ida that

696
00:27:18,240 --> 00:27:21,360
run html application was indeed uh

697
00:27:21,360 --> 00:27:22,799
designed

698
00:27:22,799 --> 00:27:25,760
more or less to be used with run dl032

699
00:27:25,760 --> 00:27:26,720
um

700
00:27:26,720 --> 00:27:29,039
a security researcher or malware author

701
00:27:29,039 --> 00:27:31,440
at some point had the same realization

702
00:27:31,440 --> 00:27:34,720
and started abusing that for

703
00:27:34,720 --> 00:27:38,720
probably evasion reasons

704
00:27:38,720 --> 00:27:40,399
all right

705
00:27:40,399 --> 00:27:42,720
so we've expanded the scope of our

706
00:27:42,720 --> 00:27:45,360
detection analytics a little bit right

707
00:27:45,360 --> 00:27:48,000
so we started with mshta.exe which was

708
00:27:48,000 --> 00:27:50,399
mentioned in the mitre

709
00:27:50,399 --> 00:27:51,760
website

710
00:27:51,760 --> 00:27:53,919
and now we've extended it to run dll32

711
00:27:53,919 --> 00:27:56,320
as well

712
00:27:57,200 --> 00:27:58,320
all right so here's what we've

713
00:27:58,320 --> 00:28:00,320
identified thus far

714
00:28:00,320 --> 00:28:04,159
run html application in mshtml.dll

715
00:28:04,159 --> 00:28:06,240
i consider it to be the lowest level

716
00:28:06,240 --> 00:28:08,480
interface to the execution of hta

717
00:28:08,480 --> 00:28:11,200
content like if you go and reverse that

718
00:28:11,200 --> 00:28:12,159
function

719
00:28:12,159 --> 00:28:14,159
like it's very complex there's a lot

720
00:28:14,159 --> 00:28:15,679
going on

721
00:28:15,679 --> 00:28:17,440
but sometimes we have to draw a line in

722
00:28:17,440 --> 00:28:19,600
the sand and say like enough is enough

723
00:28:19,600 --> 00:28:20,559
like

724
00:28:20,559 --> 00:28:23,120
is an attacker going to go to any lower

725
00:28:23,120 --> 00:28:25,360
level than that function

726
00:28:25,360 --> 00:28:28,720
to execute hta code that's probably

727
00:28:28,720 --> 00:28:30,880
unrealistic so here's where we could

728
00:28:30,880 --> 00:28:33,200
probably draw that line in the sand and

729
00:28:33,200 --> 00:28:36,960
not go any deeper than what we did

730
00:28:36,960 --> 00:28:39,679
can run dll32 be used to interface with

731
00:28:39,679 --> 00:28:42,240
html application well malware authors

732
00:28:42,240 --> 00:28:44,720
already confirmed that for us but if

733
00:28:44,720 --> 00:28:46,000
they hadn't

734
00:28:46,000 --> 00:28:47,919
we already had that suspicion anyway

735
00:28:47,919 --> 00:28:49,919
based on the implementation

736
00:28:49,919 --> 00:28:52,640
of run html application how it

737
00:28:52,640 --> 00:28:55,600
implemented its parameters

738
00:28:55,600 --> 00:28:57,840
what other built-in os components

739
00:28:57,840 --> 00:29:01,200
reference one html application

740
00:29:01,200 --> 00:29:05,360
so is it just run dll-32 and mshta

741
00:29:05,360 --> 00:29:07,679
so we'll investigate that

742
00:29:07,679 --> 00:29:09,200
and considering

743
00:29:09,200 --> 00:29:11,200
an adversary you could just call run

744
00:29:11,200 --> 00:29:14,640
html application directly

745
00:29:14,640 --> 00:29:16,480
what would prevent them from just

746
00:29:16,480 --> 00:29:18,960
implementing their own code to call that

747
00:29:18,960 --> 00:29:21,360
function instead of

748
00:29:21,360 --> 00:29:24,240
using the built-in utilities

749
00:29:24,240 --> 00:29:26,240
so first i would ask myself like is that

750
00:29:26,240 --> 00:29:28,960
actually being done in the wild

751
00:29:28,960 --> 00:29:31,520
and what does it buy an adversary to do

752
00:29:31,520 --> 00:29:32,720
that

753
00:29:32,720 --> 00:29:35,120
um that just because i've come to the

754
00:29:35,120 --> 00:29:37,200
conclusion that it's unrealistic that

755
00:29:37,200 --> 00:29:38,960
they would do it doesn't mean that they

756
00:29:38,960 --> 00:29:42,640
won't but it helps me scope my detection

757
00:29:42,640 --> 00:29:45,520
analytics so uh because i came to the

758
00:29:45,520 --> 00:29:47,120
conclusion that it doesn't really make

759
00:29:47,120 --> 00:29:48,960
sense for an adversary to do that

760
00:29:48,960 --> 00:29:51,279
because they would have already had

761
00:29:51,279 --> 00:29:53,600
arbitrary code execution why would they

762
00:29:53,600 --> 00:29:56,320
want additional hta code execution on

763
00:29:56,320 --> 00:29:58,480
top of that

764
00:29:58,480 --> 00:30:00,880
then i tell myself okay i'm just not

765
00:30:00,880 --> 00:30:02,480
going to worry about that it's not going

766
00:30:02,480 --> 00:30:04,080
to be in the scope of my detection

767
00:30:04,080 --> 00:30:06,080
analytic and i'll move on if they start

768
00:30:06,080 --> 00:30:08,320
abusing it later on then i'll start

769
00:30:08,320 --> 00:30:10,159
caring and maybe focus on that but i

770
00:30:10,159 --> 00:30:13,200
don't care about that right now

771
00:30:13,200 --> 00:30:15,200
right so would not scoping this

772
00:30:15,200 --> 00:30:18,080
constitute a detection miss

773
00:30:18,080 --> 00:30:20,880
and i would say no if an adversary

774
00:30:20,880 --> 00:30:23,440
started abusing the run html application

775
00:30:23,440 --> 00:30:25,679
using their own custom code i'll say no

776
00:30:25,679 --> 00:30:26,720
we didn't

777
00:30:26,720 --> 00:30:28,960
miss it because we like it was a

778
00:30:28,960 --> 00:30:30,320
documented

779
00:30:30,320 --> 00:30:33,360
um assumption right so we didn't catch

780
00:30:33,360 --> 00:30:35,520
it but it didn't actually miss our

781
00:30:35,520 --> 00:30:37,520
detection analytics because it wasn't in

782
00:30:37,520 --> 00:30:39,520
our scope

783
00:30:39,520 --> 00:30:41,360
all right so if it's not in scope then

784
00:30:41,360 --> 00:30:43,039
you just document that as an assumption

785
00:30:43,039 --> 00:30:44,399
accordingly

786
00:30:44,399 --> 00:30:46,799
all right so this is a really silly

787
00:30:46,799 --> 00:30:48,480
thing i do but

788
00:30:48,480 --> 00:30:50,880
it's really effective so this answers

789
00:30:50,880 --> 00:30:52,640
the question

790
00:30:52,640 --> 00:30:55,279
that i had here of uh what other

791
00:30:55,279 --> 00:30:57,919
built-in os components reference

792
00:30:57,919 --> 00:31:00,159
run html application

793
00:31:00,159 --> 00:31:02,640
so this i'm just constraining my search

794
00:31:02,640 --> 00:31:05,600
in powershell to the system32 directory

795
00:31:05,600 --> 00:31:07,200
but realistically i probably just do

796
00:31:07,200 --> 00:31:09,039
this throughout the whole file system

797
00:31:09,039 --> 00:31:12,159
i'll say show me all exes and dlls

798
00:31:12,159 --> 00:31:13,440
and then select string is like the

799
00:31:13,440 --> 00:31:16,640
equivalent of grep that have run ht the

800
00:31:16,640 --> 00:31:19,600
string run html application as both a

801
00:31:19,600 --> 00:31:22,480
unicode and an ascii string

802
00:31:22,480 --> 00:31:26,320
um and then if anything came up besides

803
00:31:26,320 --> 00:31:29,600
these two here then i i would dig into

804
00:31:29,600 --> 00:31:32,000
that like rinse repeat throw that thing

805
00:31:32,000 --> 00:31:34,720
into ida and try to figure out if if

806
00:31:34,720 --> 00:31:36,720
this is something that an attacker could

807
00:31:36,720 --> 00:31:37,679
actually

808
00:31:37,679 --> 00:31:39,039
abuse

809
00:31:39,039 --> 00:31:39,919
so

810
00:31:39,919 --> 00:31:42,399
this was a good sign for me that it only

811
00:31:42,399 --> 00:31:43,600
returned

812
00:31:43,600 --> 00:31:46,880
what i expected mshta and

813
00:31:46,880 --> 00:31:47,799
ms

814
00:31:47,799 --> 00:31:50,720
html.dll the two components that i had

815
00:31:50,720 --> 00:31:52,240
already identified

816
00:31:52,240 --> 00:31:53,279
um

817
00:31:53,279 --> 00:31:55,039
but i would encourage anyone to do this

818
00:31:55,039 --> 00:31:57,039
like again this is kind of silly like

819
00:31:57,039 --> 00:31:58,840
just grepping for strings

820
00:31:58,840 --> 00:32:00,880
um but it's

821
00:32:00,880 --> 00:32:04,080
i have found it to be extremely

822
00:32:04,080 --> 00:32:06,480
excuse me

823
00:32:06,480 --> 00:32:09,200
extremely effective

824
00:32:09,200 --> 00:32:12,519
in scope

825
00:32:17,440 --> 00:32:20,320
all right that's better

826
00:32:20,320 --> 00:32:21,519
all right so next we're going to

827
00:32:21,519 --> 00:32:23,200
classify we're going to start

828
00:32:23,200 --> 00:32:25,039
enumerating those technique variations

829
00:32:25,039 --> 00:32:26,880
and i'm going to try to go through this

830
00:32:26,880 --> 00:32:28,480
this quickly

831
00:32:28,480 --> 00:32:31,200
so of the ones that were identified at

832
00:32:31,200 --> 00:32:32,399
the end of this research were the

833
00:32:32,399 --> 00:32:35,200
following local hta file execution on

834
00:32:35,200 --> 00:32:37,200
disk

835
00:32:37,200 --> 00:32:38,799
and i've asked this before are there any

836
00:32:38,799 --> 00:32:41,039
file extension limitations or can i just

837
00:32:41,039 --> 00:32:43,840
do evil.text or whatever

838
00:32:43,840 --> 00:32:46,480
uh inline execution via protocol

839
00:32:46,480 --> 00:32:48,720
handlers like javascript colon vbscript

840
00:32:48,720 --> 00:32:50,799
colon we've seen some examples of that

841
00:32:50,799 --> 00:32:53,519
are there any more

842
00:32:53,519 --> 00:32:55,519
support for multiple scripting engines

843
00:32:55,519 --> 00:32:57,279
all right again we've seen that are

844
00:32:57,279 --> 00:32:59,600
there any more how are those defined in

845
00:32:59,600 --> 00:33:01,760
the os how would i enumerate these

846
00:33:01,760 --> 00:33:03,360
supported

847
00:33:03,360 --> 00:33:05,039
engine components

848
00:33:05,039 --> 00:33:06,960
this isn't really well documented

849
00:33:06,960 --> 00:33:09,760
anywhere so i need to figure that out

850
00:33:09,760 --> 00:33:12,320
those polyglot files right

851
00:33:12,320 --> 00:33:15,678
there's another variation there

852
00:33:16,000 --> 00:33:18,559
remote execution via unc pass is an

853
00:33:18,559 --> 00:33:21,559
option

854
00:33:26,559 --> 00:33:29,279
uh i mentioned that lethal hta project

855
00:33:29,279 --> 00:33:32,080
so execution via um

856
00:33:32,080 --> 00:33:34,720
com and dcom

857
00:33:34,720 --> 00:33:37,039
remotely and locally

858
00:33:37,039 --> 00:33:39,200
execution via emulation of a double

859
00:33:39,200 --> 00:33:40,799
click i'll show you an example what this

860
00:33:40,799 --> 00:33:42,640
looks like

861
00:33:42,640 --> 00:33:44,320
this was interesting when i discovered

862
00:33:44,320 --> 00:33:45,600
it

863
00:33:45,600 --> 00:33:47,360
that attackers were doing this they were

864
00:33:47,360 --> 00:33:48,880
doing this to

865
00:33:48,880 --> 00:33:52,640
to break a process hierarchy

866
00:33:52,640 --> 00:33:55,840
so that you didn't have like a direct

867
00:33:55,840 --> 00:33:58,960
parent-child process relationship

868
00:33:58,960 --> 00:34:01,120
next modification of the

869
00:34:01,120 --> 00:34:04,480
um the executor like mshta.exe file name

870
00:34:04,480 --> 00:34:07,039
and or path

871
00:34:07,039 --> 00:34:09,199
yep now i want to briefly discuss

872
00:34:09,199 --> 00:34:11,599
breadth and depth

873
00:34:11,599 --> 00:34:14,480
so using this paradigm that we've been

874
00:34:14,480 --> 00:34:17,599
discussing the way i think about breath

875
00:34:17,599 --> 00:34:19,599
so the breadth of your detection

876
00:34:19,599 --> 00:34:21,599
coverage increases

877
00:34:21,599 --> 00:34:24,480
with the technique variation count

878
00:34:24,480 --> 00:34:26,399
okay

879
00:34:26,399 --> 00:34:27,440
so

880
00:34:27,440 --> 00:34:29,440
here you can see those uh eight

881
00:34:29,440 --> 00:34:31,440
identified variations

882
00:34:31,440 --> 00:34:34,480
uh that con to me constitutes breadth of

883
00:34:34,480 --> 00:34:37,760
coverage depth of coverage increases as

884
00:34:37,760 --> 00:34:41,199
you develop more tests for each one of

885
00:34:41,199 --> 00:34:42,399
those

886
00:34:42,399 --> 00:34:45,440
uh variations

887
00:34:45,760 --> 00:34:47,040
okay so

888
00:34:47,040 --> 00:34:49,040
let's put our detection engineering hats

889
00:34:49,040 --> 00:34:51,839
on uh and start thinking like an

890
00:34:51,839 --> 00:34:54,560
adversary all right so here is the

891
00:34:54,560 --> 00:34:58,160
contents of one of those hta files

892
00:34:58,160 --> 00:34:59,680
all right you can probably see like some

893
00:34:59,680 --> 00:35:01,680
of the script code that's going on there

894
00:35:01,680 --> 00:35:03,520
nothing really malicious in here this is

895
00:35:03,520 --> 00:35:05,119
just a test that

896
00:35:05,119 --> 00:35:06,800
that i ran

897
00:35:06,800 --> 00:35:08,400
but what are some things that stand out

898
00:35:08,400 --> 00:35:11,200
to you that perhaps an adversary might

899
00:35:11,200 --> 00:35:12,160
have

900
00:35:12,160 --> 00:35:15,440
some control over or what do they need

901
00:35:15,440 --> 00:35:16,400
in order

902
00:35:16,400 --> 00:35:19,040
for the hta file to run

903
00:35:19,040 --> 00:35:21,359
so like you probably need the html and

904
00:35:21,359 --> 00:35:24,400
the head tags the htma the hta

905
00:35:24,400 --> 00:35:25,920
application tag

906
00:35:25,920 --> 00:35:27,119
what are some things they might be able

907
00:35:27,119 --> 00:35:28,320
to control

908
00:35:28,320 --> 00:35:30,400
maybe that window state

909
00:35:30,400 --> 00:35:31,920
attribute

910
00:35:31,920 --> 00:35:33,760
okay that could be looks like it's

911
00:35:33,760 --> 00:35:35,359
pretty convenient for them to like hide

912
00:35:35,359 --> 00:35:36,880
windows

913
00:35:36,880 --> 00:35:39,520
um script language

914
00:35:39,520 --> 00:35:40,400
okay

915
00:35:40,400 --> 00:35:42,400
this one has vbscript what other ones

916
00:35:42,400 --> 00:35:44,640
are supported

917
00:35:44,640 --> 00:35:46,720
and then the actual script code

918
00:35:46,720 --> 00:35:47,920
okay

919
00:35:47,920 --> 00:35:49,839
so this is a pretty minimal

920
00:35:49,839 --> 00:35:50,960
hta

921
00:35:50,960 --> 00:35:52,320
and

922
00:35:52,320 --> 00:35:54,480
the things that stand out to me

923
00:35:54,480 --> 00:35:56,000
that an attacker

924
00:35:56,000 --> 00:35:58,320
probably needs and of course we can

925
00:35:58,320 --> 00:36:01,520
validate this is the script language

926
00:36:01,520 --> 00:36:03,760
and the script code and then all the

927
00:36:03,760 --> 00:36:06,720
other syntactic sugar that's required to

928
00:36:06,720 --> 00:36:10,759
execute hta stuff

929
00:36:15,280 --> 00:36:16,079
okay

930
00:36:16,079 --> 00:36:18,880
we have another example here

931
00:36:18,880 --> 00:36:20,400
all right this time they're doing

932
00:36:20,400 --> 00:36:22,880
in-line execution here's something new

933
00:36:22,880 --> 00:36:24,960
to me that stands out

934
00:36:24,960 --> 00:36:27,440
so in the other examples you saw you saw

935
00:36:27,440 --> 00:36:29,119
there's a vbscript colon and a

936
00:36:29,119 --> 00:36:31,839
javascript colon now we have an about

937
00:36:31,839 --> 00:36:32,880
colon

938
00:36:32,880 --> 00:36:34,560
so when i was doing this research like i

939
00:36:34,560 --> 00:36:36,640
didn't even know that was possible

940
00:36:36,640 --> 00:36:38,880
one of our incident handlers was

941
00:36:38,880 --> 00:36:41,599
investigating something and noticed um

942
00:36:41,599 --> 00:36:43,839
that an attacker was abusing this

943
00:36:43,839 --> 00:36:45,680
reached out to me i was like oh like

944
00:36:45,680 --> 00:36:47,680
that's crazy that i didn't know that was

945
00:36:47,680 --> 00:36:49,200
possible so i was able to turn around

946
00:36:49,200 --> 00:36:52,000
some uh coverage pretty pretty quickly

947
00:36:52,000 --> 00:36:54,320
um in in the test code to to support

948
00:36:54,320 --> 00:36:55,839
this

949
00:36:55,839 --> 00:36:58,079
okay so we've seen three different

950
00:36:58,079 --> 00:37:00,320
instances right what else is required

951
00:37:00,320 --> 00:37:01,599
though

952
00:37:01,599 --> 00:37:04,800
well there's the executor so mshta.exe

953
00:37:04,800 --> 00:37:06,640
but that can probably be renamed and

954
00:37:06,640 --> 00:37:09,520
relocated the script language it's

955
00:37:09,520 --> 00:37:11,440
probably a requirement and then the

956
00:37:11,440 --> 00:37:14,320
actual script code again okay

957
00:37:14,320 --> 00:37:17,680
so if we were defenders what might be

958
00:37:17,680 --> 00:37:20,880
some of the most robust things that we

959
00:37:20,880 --> 00:37:24,160
would key in on in order to

960
00:37:24,160 --> 00:37:28,800
reliably identify this inline execution

961
00:37:28,800 --> 00:37:30,079
as

962
00:37:30,079 --> 00:37:34,000
hta inline execution

963
00:37:34,000 --> 00:37:35,640
because could this just be

964
00:37:35,640 --> 00:37:38,640
notepad.exe running

965
00:37:38,640 --> 00:37:40,880
and then what about that about colon

966
00:37:40,880 --> 00:37:43,680
what else is possible does hta colon

967
00:37:43,680 --> 00:37:45,839
application have to be there

968
00:37:45,839 --> 00:37:47,599
right so we need to be thinking about

969
00:37:47,599 --> 00:37:48,800
the things

970
00:37:48,800 --> 00:37:51,119
that an adversary has little to no

971
00:37:51,119 --> 00:37:53,119
control over and focus our detection

972
00:37:53,119 --> 00:37:54,800
analytics on that

973
00:37:54,800 --> 00:37:56,560
because otherwise it's just going to be

974
00:37:56,560 --> 00:38:00,000
brittle and subject to evasion

975
00:38:00,560 --> 00:38:03,720
all right

976
00:38:04,720 --> 00:38:06,560
okay so let's start thinking about

977
00:38:06,560 --> 00:38:07,680
possible

978
00:38:07,680 --> 00:38:10,079
optics that we could build uh detection

979
00:38:10,079 --> 00:38:13,280
analytics off of uh command line is

980
00:38:13,280 --> 00:38:14,640
pretty obvious

981
00:38:14,640 --> 00:38:16,880
now just bear in mind command line and

982
00:38:16,880 --> 00:38:19,680
attacker generally has the most level of

983
00:38:19,680 --> 00:38:21,119
control over

984
00:38:21,119 --> 00:38:22,880
they may not have complete control over

985
00:38:22,880 --> 00:38:25,200
that and like we just discussed what

986
00:38:25,200 --> 00:38:27,040
they may or may not have control over so

987
00:38:27,040 --> 00:38:29,119
we have to be very consid uh considerate

988
00:38:29,119 --> 00:38:30,320
of that

989
00:38:30,320 --> 00:38:32,480
because they exercise

990
00:38:32,480 --> 00:38:34,240
a heck of a lot of control over what

991
00:38:34,240 --> 00:38:36,480
they can supply at the command line

992
00:38:36,480 --> 00:38:39,280
next would be process path and file name

993
00:38:39,280 --> 00:38:41,119
an attacker has a tremendous amount of

994
00:38:41,119 --> 00:38:42,160
control

995
00:38:42,160 --> 00:38:43,440
over that so

996
00:38:43,440 --> 00:38:44,800
are there any

997
00:38:44,800 --> 00:38:47,359
possible mitigating controls that could

998
00:38:47,359 --> 00:38:50,079
be used to identify when an attacker

999
00:38:50,079 --> 00:38:52,280
renames and relocates

1000
00:38:52,280 --> 00:38:56,599
mshta.exe or rundll32.exe

1001
00:38:57,280 --> 00:38:59,280
well we could consider original file

1002
00:38:59,280 --> 00:39:00,320
name

1003
00:39:00,320 --> 00:39:02,640
um

1004
00:39:02,720 --> 00:39:04,560
raise a hand does anyone know what

1005
00:39:04,560 --> 00:39:06,720
original file name is and would be able

1006
00:39:06,720 --> 00:39:10,680
to explain that to me

1007
00:39:17,680 --> 00:39:19,839
yeah within the is the property within

1008
00:39:19,839 --> 00:39:22,400
the file that has the original name of

1009
00:39:22,400 --> 00:39:23,839
the executable

1010
00:39:23,839 --> 00:39:25,119
um

1011
00:39:25,119 --> 00:39:28,480
yeah so like as a defender

1012
00:39:28,480 --> 00:39:30,800
why would that be useful

1013
00:39:30,800 --> 00:39:32,560
like why would that potentially be more

1014
00:39:32,560 --> 00:39:33,680
robust

1015
00:39:33,680 --> 00:39:37,359
to key in off of versus the process path

1016
00:39:37,359 --> 00:39:40,839
and file name

1017
00:39:48,260 --> 00:39:50,400
[Music]

1018
00:39:50,400 --> 00:39:52,480
right so they might change the name of

1019
00:39:52,480 --> 00:39:55,280
the file on disk right

1020
00:39:55,280 --> 00:39:57,920
but it's unlikely that they're going to

1021
00:39:57,920 --> 00:40:00,000
change the original file name in the

1022
00:40:00,000 --> 00:40:01,200
executable

1023
00:40:01,200 --> 00:40:04,400
um especially for a built-in executable

1024
00:40:04,400 --> 00:40:06,319
because in doing so

1025
00:40:06,319 --> 00:40:08,480
they would invalidate the signature

1026
00:40:08,480 --> 00:40:10,079
so they might as well just be dropping

1027
00:40:10,079 --> 00:40:11,680
their own malicious code

1028
00:40:11,680 --> 00:40:13,359
but

1029
00:40:13,359 --> 00:40:16,400
thank you for answering that

1030
00:40:21,839 --> 00:40:24,160
okay so these are the identified

1031
00:40:24,160 --> 00:40:26,880
original file names for mshta.exe

1032
00:40:26,880 --> 00:40:28,640
and run dll-32

1033
00:40:28,640 --> 00:40:30,800
this is an extremely

1034
00:40:30,800 --> 00:40:34,240
powerful analytic for defenders if you

1035
00:40:34,240 --> 00:40:38,319
can baseline this set of uh like known

1036
00:40:38,319 --> 00:40:39,599
law bins

1037
00:40:39,599 --> 00:40:41,200
and if you're doing your detection logic

1038
00:40:41,200 --> 00:40:43,119
off of original file name

1039
00:40:43,119 --> 00:40:45,440
instead of the more naive like process

1040
00:40:45,440 --> 00:40:47,200
path and file name

1041
00:40:47,200 --> 00:40:48,880
where you're baselining it against the

1042
00:40:48,880 --> 00:40:51,599
two right so like you would expect mshta

1043
00:40:51,599 --> 00:40:55,440
to be in system 32 and syswow 64 those

1044
00:40:55,440 --> 00:40:57,839
directories right

1045
00:40:57,839 --> 00:41:00,640
so if in your analytic if you said okay

1046
00:41:00,640 --> 00:41:03,119
we have a process event

1047
00:41:03,119 --> 00:41:06,480
and the file name is food.exe but the

1048
00:41:06,480 --> 00:41:10,240
original file name is mshta.exe

1049
00:41:10,240 --> 00:41:13,119
dot mui well that that deviates from our

1050
00:41:13,119 --> 00:41:15,520
baseline so we'll we'll detect on that

1051
00:41:15,520 --> 00:41:19,480
that's extremely effective

1052
00:41:22,000 --> 00:41:25,119
okay the script host dlls

1053
00:41:25,119 --> 00:41:28,240
so these dlls are uh they'll be loaded

1054
00:41:28,240 --> 00:41:30,640
depending upon which script host

1055
00:41:30,640 --> 00:41:32,160
is executed

1056
00:41:32,160 --> 00:41:33,839
so you saw like the vbscript colon

1057
00:41:33,839 --> 00:41:36,640
javascript calling um maybe these could

1058
00:41:36,640 --> 00:41:39,440
be relevant in our detection analytics i

1059
00:41:39,440 --> 00:41:41,920
don't know uh i'm leaning towards no

1060
00:41:41,920 --> 00:41:44,079
because uh you can get

1061
00:41:44,079 --> 00:41:45,040
the most

1062
00:41:45,040 --> 00:41:46,880
you you can get a lot of context from

1063
00:41:46,880 --> 00:41:49,680
just command line and the original file

1064
00:41:49,680 --> 00:41:51,680
name

1065
00:41:51,680 --> 00:41:54,480
but i i consider everything

1066
00:41:54,480 --> 00:41:56,960
and then i just whittle down what is

1067
00:41:56,960 --> 00:41:59,760
absolutely necessary to build a

1068
00:41:59,760 --> 00:42:01,520
detection

1069
00:42:01,520 --> 00:42:03,440
all right is parent executable path

1070
00:42:03,440 --> 00:42:05,760
going to be relevant what is hta

1071
00:42:05,760 --> 00:42:07,839
executing from is parent process

1072
00:42:07,839 --> 00:42:10,079
windward dot exe

1073
00:42:10,079 --> 00:42:14,400
is it explorer.exe is it powershell.exe

1074
00:42:14,400 --> 00:42:16,160
these are all going to be very very

1075
00:42:16,160 --> 00:42:18,319
relevant in our analytics

1076
00:42:18,319 --> 00:42:20,640
is it making any external network

1077
00:42:20,640 --> 00:42:22,720
connections

1078
00:42:22,720 --> 00:42:23,480
does

1079
00:42:23,480 --> 00:42:26,000
mshtml.dll load that's what implements

1080
00:42:26,000 --> 00:42:29,440
that run html application function

1081
00:42:29,440 --> 00:42:31,440
this may be relevant maybe not i'm

1082
00:42:31,440 --> 00:42:33,920
leaning towards no unless we care about

1083
00:42:33,920 --> 00:42:36,880
the instances where attackers implement

1084
00:42:36,880 --> 00:42:38,560
their own

1085
00:42:38,560 --> 00:42:42,359
version of mshta.exe

1086
00:42:42,640 --> 00:42:43,920
because that would have the effect of

1087
00:42:43,920 --> 00:42:46,079
loading mshtml.dll

1088
00:42:46,079 --> 00:42:46,960
into

1089
00:42:46,960 --> 00:42:48,319
um

1090
00:42:48,319 --> 00:42:51,359
an executable with low reputation right

1091
00:42:51,359 --> 00:42:53,599
or or wouldn't be signed

1092
00:42:53,599 --> 00:42:55,119
um but

1093
00:42:55,119 --> 00:42:57,680
within the context of my scope

1094
00:42:57,680 --> 00:42:59,599
i don't really care about that dll load

1095
00:42:59,599 --> 00:43:01,599
but i'm just trying to

1096
00:43:01,599 --> 00:43:04,000
be exhaustive here in considering

1097
00:43:04,000 --> 00:43:06,240
everything that might be relevant within

1098
00:43:06,240 --> 00:43:09,200
the confines of our scope

1099
00:43:09,200 --> 00:43:11,680
do we track hta file rights

1100
00:43:11,680 --> 00:43:13,119
i don't know that might be difficult

1101
00:43:13,119 --> 00:43:15,359
because it's just a text file

1102
00:43:15,359 --> 00:43:16,400
and

1103
00:43:16,400 --> 00:43:18,240
it could possibly

1104
00:43:18,240 --> 00:43:20,400
have any file extension

1105
00:43:20,400 --> 00:43:22,640
right so that might not be very

1106
00:43:22,640 --> 00:43:24,480
realistic

1107
00:43:24,480 --> 00:43:25,440
okay

1108
00:43:25,440 --> 00:43:27,520
so let's talk about atomic test

1109
00:43:27,520 --> 00:43:28,880
harnesses

1110
00:43:28,880 --> 00:43:30,079
so here's where we're actually going to

1111
00:43:30,079 --> 00:43:32,000
validate all these things and actually

1112
00:43:32,000 --> 00:43:34,800
implement all of our findings from our

1113
00:43:34,800 --> 00:43:38,480
research so this is a powershell module

1114
00:43:38,480 --> 00:43:40,160
um

1115
00:43:40,160 --> 00:43:42,640
that's up on github

1116
00:43:42,640 --> 00:43:44,960
and the purpose of it is to

1117
00:43:44,960 --> 00:43:48,319
validate all of our findings in a way

1118
00:43:48,319 --> 00:43:50,319
that's abstracted such that you don't

1119
00:43:50,319 --> 00:43:52,000
have to be a subject matter expert on

1120
00:43:52,000 --> 00:43:55,280
mshta you can just go read the help and

1121
00:43:55,280 --> 00:43:58,480
flip all the relevant bits to invoke all

1122
00:43:58,480 --> 00:44:00,640
of those technique variations without

1123
00:44:00,640 --> 00:44:04,000
actually having to know how to craft

1124
00:44:04,000 --> 00:44:06,880
the html code to execute

1125
00:44:06,880 --> 00:44:10,240
everything all right so um the

1126
00:44:10,240 --> 00:44:13,839
underlying motivations to this was um

1127
00:44:13,839 --> 00:44:16,000
i can't detect what i can't see

1128
00:44:16,000 --> 00:44:18,880
okay so uh yeah i could go detonate some

1129
00:44:18,880 --> 00:44:21,520
malware in a sandbox i could go run some

1130
00:44:21,520 --> 00:44:23,040
red team tool

1131
00:44:23,040 --> 00:44:25,200
but those weren't designed with

1132
00:44:25,200 --> 00:44:27,839
detection engineers in mind

1133
00:44:27,839 --> 00:44:30,160
i might get some good ideas out of it

1134
00:44:30,160 --> 00:44:31,599
but if i don't have something that i

1135
00:44:31,599 --> 00:44:34,560
have like more direct control over

1136
00:44:34,560 --> 00:44:36,640
i don't i'm not going to be as confident

1137
00:44:36,640 --> 00:44:38,640
in what i'm able to see to

1138
00:44:38,640 --> 00:44:41,599
um infer detection logic

1139
00:44:41,599 --> 00:44:44,400
and what should i be looking at anyway

1140
00:44:44,400 --> 00:44:47,599
right like uh as a non-subject matter

1141
00:44:47,599 --> 00:44:49,040
expert on this

1142
00:44:49,040 --> 00:44:50,720
ideally like i really don't want to

1143
00:44:50,720 --> 00:44:52,880
become a subject matter expert on hta

1144
00:44:52,880 --> 00:44:55,440
like i just don't care like someone else

1145
00:44:55,440 --> 00:44:57,920
ideally should research this and just

1146
00:44:57,920 --> 00:45:00,960
present me with what i really should be

1147
00:45:00,960 --> 00:45:02,160
focusing on

1148
00:45:02,160 --> 00:45:05,040
and so that's what i aim to do in uh in

1149
00:45:05,040 --> 00:45:09,200
the functions in atomic test harnesses

1150
00:45:09,440 --> 00:45:11,440
okay and how do i distinguish technique

1151
00:45:11,440 --> 00:45:13,760
artifacts from test runner and

1152
00:45:13,760 --> 00:45:16,000
irrelevant os artifacts so this is

1153
00:45:16,000 --> 00:45:18,079
really frustrating for any detection

1154
00:45:18,079 --> 00:45:19,760
engineer you go

1155
00:45:19,760 --> 00:45:21,599
detonate a malware sample like with a

1156
00:45:21,599 --> 00:45:23,520
procmond trace and then you have to go

1157
00:45:23,520 --> 00:45:25,599
weed through everything and be like is

1158
00:45:25,599 --> 00:45:27,599
this like an os artifact is this

1159
00:45:27,599 --> 00:45:29,599
actually related to the technique i

1160
00:45:29,599 --> 00:45:31,680
don't know maybe

1161
00:45:31,680 --> 00:45:34,880
i'll go run it again and see if it

1162
00:45:34,880 --> 00:45:36,800
exhibits any any patterns that might be

1163
00:45:36,800 --> 00:45:39,119
related to the technique um and then

1164
00:45:39,119 --> 00:45:40,800
whatever you run it in

1165
00:45:40,800 --> 00:45:42,960
that runner utility is that generating

1166
00:45:42,960 --> 00:45:44,800
its own artifacts that you have to like

1167
00:45:44,800 --> 00:45:46,880
weed out too

1168
00:45:46,880 --> 00:45:48,960
so like this happens with like uh atomic

1169
00:45:48,960 --> 00:45:50,960
grid team as an example like if you're

1170
00:45:50,960 --> 00:45:54,160
running tests in uh invoke atomic test

1171
00:45:54,160 --> 00:45:56,359
like how do you discern

1172
00:45:56,359 --> 00:45:59,280
powershell.exe running the test runner

1173
00:45:59,280 --> 00:46:02,480
from the actual test artifacts

1174
00:46:02,480 --> 00:46:03,760
that's

1175
00:46:03,760 --> 00:46:05,200
that had always been a perpetual

1176
00:46:05,200 --> 00:46:06,640
challenge for me and so this is

1177
00:46:06,640 --> 00:46:09,839
something that i wanted to to help solve

1178
00:46:09,839 --> 00:46:12,079
and then what does it a successful

1179
00:46:12,079 --> 00:46:13,280
technique

1180
00:46:13,280 --> 00:46:14,560
look like

1181
00:46:14,560 --> 00:46:16,720
so in the case of uh

1182
00:46:16,720 --> 00:46:19,599
hta code how do i know that the script

1183
00:46:19,599 --> 00:46:22,000
code that was embedded in the hta

1184
00:46:22,000 --> 00:46:24,800
actually executed

1185
00:46:24,800 --> 00:46:27,280
for as great as atomic red team is like

1186
00:46:27,280 --> 00:46:29,760
it's it's one and done you go fire it

1187
00:46:29,760 --> 00:46:31,119
and then you have to interpret the

1188
00:46:31,119 --> 00:46:32,720
results yourself

1189
00:46:32,720 --> 00:46:35,520
so you may not know confidently that the

1190
00:46:35,520 --> 00:46:38,319
thing actually ran even though it said

1191
00:46:38,319 --> 00:46:40,480
even though it claims that that it did

1192
00:46:40,480 --> 00:46:42,800
because it didn't shoot out any errors

1193
00:46:42,800 --> 00:46:44,640
um but i really want to know like did

1194
00:46:44,640 --> 00:46:47,280
the hta code actually run and so there's

1195
00:46:47,280 --> 00:46:49,520
some automation and some like eventing

1196
00:46:49,520 --> 00:46:52,079
in play to um to confidently

1197
00:46:52,079 --> 00:46:54,960
know whether or not your quote payload

1198
00:46:54,960 --> 00:46:55,839
ran

1199
00:46:55,839 --> 00:46:57,599
successfully

1200
00:46:57,599 --> 00:46:59,599
and then uh how can i replicate a

1201
00:46:59,599 --> 00:47:00,880
technique without needing to be a

1202
00:47:00,880 --> 00:47:03,520
subject matter expert again like i

1203
00:47:03,520 --> 00:47:05,359
should just be able to go read uh the

1204
00:47:05,359 --> 00:47:08,160
help on this function and know like what

1205
00:47:08,160 --> 00:47:10,880
arguments i can pass to it

1206
00:47:10,880 --> 00:47:12,800
in order to

1207
00:47:12,800 --> 00:47:14,319
have some confidence that i'll be able

1208
00:47:14,319 --> 00:47:16,079
to detect this without having to form

1209
00:47:16,079 --> 00:47:18,960
the payloads myself

1210
00:47:18,960 --> 00:47:21,040
and then must i be limited to attack

1211
00:47:21,040 --> 00:47:23,359
procedures supplied by malware

1212
00:47:23,359 --> 00:47:25,520
authors or proof of concept like red

1213
00:47:25,520 --> 00:47:26,720
team tools

1214
00:47:26,720 --> 00:47:29,280
those are great for developing an

1215
00:47:29,280 --> 00:47:32,559
initial scope but they're not holistic

1216
00:47:32,559 --> 00:47:35,200
so we can miss a lot potentially

1217
00:47:35,200 --> 00:47:36,960
and then i also wanted to test one thing

1218
00:47:36,960 --> 00:47:38,960
and test out one thing really well in

1219
00:47:38,960 --> 00:47:40,079
order to

1220
00:47:40,079 --> 00:47:42,200
confidently measure

1221
00:47:42,200 --> 00:47:45,440
quantitatively what our coverage is

1222
00:47:45,440 --> 00:47:48,400
for a technique all right so let's hop

1223
00:47:48,400 --> 00:47:52,200
into the demo here

1224
00:48:15,599 --> 00:48:19,000
come on now

1225
00:48:32,720 --> 00:48:35,839
oh man

1226
00:48:41,119 --> 00:48:44,920
freezing up on me

1227
00:48:53,280 --> 00:48:54,319
well

1228
00:48:54,319 --> 00:48:57,960
this is no fun

1229
00:49:02,079 --> 00:49:04,319
here i had everything set up so

1230
00:49:04,319 --> 00:49:07,319
beautifully

1231
00:49:25,119 --> 00:49:27,040
um

1232
00:49:27,040 --> 00:49:30,040
well

1233
00:49:38,640 --> 00:49:40,960
all right so i'll do my best to explain

1234
00:49:40,960 --> 00:49:43,359
things while this uh i try to reload

1235
00:49:43,359 --> 00:49:46,240
this um so i've

1236
00:49:46,240 --> 00:49:48,960
created a powershell function in atomic

1237
00:49:48,960 --> 00:49:52,480
test harnesses called invoke ath html

1238
00:49:52,480 --> 00:49:54,000
application

1239
00:49:54,000 --> 00:49:58,359
let me try to resume this here

1240
00:50:00,559 --> 00:50:03,680
this is where i pray

1241
00:50:10,319 --> 00:50:13,319
man

1242
00:50:24,839 --> 00:50:27,359
well all right so just gonna have to do

1243
00:50:27,359 --> 00:50:30,640
my best to explain things here um

1244
00:50:30,640 --> 00:50:31,920
so what you would do

1245
00:50:31,920 --> 00:50:35,119
is you would run this function and it

1246
00:50:35,119 --> 00:50:36,960
presents a ton of different options

1247
00:50:36,960 --> 00:50:39,280
right so all those identified

1248
00:50:39,280 --> 00:50:40,880
technique variations that we talked

1249
00:50:40,880 --> 00:50:43,200
about

1250
00:50:45,280 --> 00:50:48,160
that we identified earlier

1251
00:50:48,160 --> 00:50:50,319
all these here are implemented within

1252
00:50:50,319 --> 00:50:52,720
that function

1253
00:50:52,720 --> 00:50:55,359
in a very abstracted way

1254
00:50:55,359 --> 00:50:58,480
so if you wanted to execute an hta file

1255
00:50:58,480 --> 00:51:02,000
locally it'll do that using hta as the

1256
00:51:02,000 --> 00:51:05,440
default file extension

1257
00:51:07,680 --> 00:51:09,760
but then it also lets you override that

1258
00:51:09,760 --> 00:51:11,680
so you can supply any file extension you

1259
00:51:11,680 --> 00:51:12,559
want

1260
00:51:12,559 --> 00:51:13,240
so

1261
00:51:13,240 --> 00:51:15,839
foo.txt what have you

1262
00:51:15,839 --> 00:51:20,160
um it also lets you supply any executor

1263
00:51:20,160 --> 00:51:22,640
file name that you wanted so you rename

1264
00:51:22,640 --> 00:51:25,440
it to notepad.exe test that out and it

1265
00:51:25,440 --> 00:51:26,960
will let you do that

1266
00:51:26,960 --> 00:51:29,920
so it supports all of these

1267
00:51:29,920 --> 00:51:32,160
now there's still a lot of parameters

1268
00:51:32,160 --> 00:51:34,640
that it implements

1269
00:51:34,640 --> 00:51:37,040
and so with all those options like it

1270
00:51:37,040 --> 00:51:39,280
can be pretty easy to be overwhelmed and

1271
00:51:39,280 --> 00:51:41,359
let's say i just wanted to test our

1272
00:51:41,359 --> 00:51:43,680
coverage on every one of those

1273
00:51:43,680 --> 00:51:46,000
techniques as well as all of these

1274
00:51:46,000 --> 00:51:47,280
supported

1275
00:51:47,280 --> 00:51:48,559
um

1276
00:51:48,559 --> 00:51:51,040
uh like say script engines that are

1277
00:51:51,040 --> 00:51:54,000
supported um well there's also

1278
00:51:54,000 --> 00:51:54,960
um

1279
00:51:54,960 --> 00:51:57,599
uh unit tests implemented for that

1280
00:51:57,599 --> 00:51:58,559
function

1281
00:51:58,559 --> 00:52:00,559
and so i want to say there's like 30

1282
00:52:00,559 --> 00:52:02,720
different tests implemented

1283
00:52:02,720 --> 00:52:04,880
um because for each of those technique

1284
00:52:04,880 --> 00:52:07,280
variations there's also like different

1285
00:52:07,280 --> 00:52:09,520
parameters again like different script

1286
00:52:09,520 --> 00:52:12,240
engines different file extensions

1287
00:52:12,240 --> 00:52:14,079
and it tests all of those in an

1288
00:52:14,079 --> 00:52:16,400
automated fashion and so if you're

1289
00:52:16,400 --> 00:52:19,440
getting green on all of those tests then

1290
00:52:19,440 --> 00:52:22,079
um well one you know that each of those

1291
00:52:22,079 --> 00:52:25,040
executed successfully um and then you

1292
00:52:25,040 --> 00:52:26,079
can

1293
00:52:26,079 --> 00:52:28,400
go from there and then

1294
00:52:28,400 --> 00:52:30,960
see like ask of your edr whatever your

1295
00:52:30,960 --> 00:52:33,440
sensor analytics are

1296
00:52:33,440 --> 00:52:35,440
did i actually see that and if you are

1297
00:52:35,440 --> 00:52:38,400
then you've really built that foundation

1298
00:52:38,400 --> 00:52:42,160
of optics coverage upon which

1299
00:52:42,160 --> 00:52:44,000
you can

1300
00:52:44,000 --> 00:52:47,839
develop confident detection coverage

1301
00:52:47,839 --> 00:52:50,480
all right so um

1302
00:52:50,480 --> 00:52:52,880
apologies that the

1303
00:52:52,880 --> 00:52:56,160
demo did not work out um but you can go

1304
00:52:56,160 --> 00:52:59,040
to the github um again it's atomic test

1305
00:52:59,040 --> 00:53:02,079
harnesses try it out ask me questions

1306
00:53:02,079 --> 00:53:04,480
manifestation on on twitter

1307
00:53:04,480 --> 00:53:06,160
so in conclusion

1308
00:53:06,160 --> 00:53:08,880
this methodology can apply to

1309
00:53:08,880 --> 00:53:10,960
literally any attack technique

1310
00:53:10,960 --> 00:53:13,599
i focus on just hta just because it was

1311
00:53:13,599 --> 00:53:16,240
relatively uh constrained for the um for

1312
00:53:16,240 --> 00:53:18,240
the scope of this talk

1313
00:53:18,240 --> 00:53:20,720
but again like scope is key you have to

1314
00:53:20,720 --> 00:53:23,680
be deliberate in order to not become

1315
00:53:23,680 --> 00:53:26,800
easily overwhelmed okay

1316
00:53:26,800 --> 00:53:29,760
a minor attack um i to remind myself of

1317
00:53:29,760 --> 00:53:31,359
this that it's a guideline and a

1318
00:53:31,359 --> 00:53:32,400
reference

1319
00:53:32,400 --> 00:53:34,720
um it is not like the gospel

1320
00:53:34,720 --> 00:53:36,480
uh and just because it says something

1321
00:53:36,480 --> 00:53:38,720
does not mean it's true uh if that's the

1322
00:53:38,720 --> 00:53:40,400
case like please reach out to correct

1323
00:53:40,400 --> 00:53:41,280
them

1324
00:53:41,280 --> 00:53:43,680
but they don't always get this

1325
00:53:43,680 --> 00:53:46,640
their scope may be more broad or too

1326
00:53:46,640 --> 00:53:49,680
narrow for your use cases so it really

1327
00:53:49,680 --> 00:53:51,040
is up to you

1328
00:53:51,040 --> 00:53:53,440
use it as an as an initial guide in

1329
00:53:53,440 --> 00:53:55,200
reference

1330
00:53:55,200 --> 00:53:56,880
and scope is derived from the technical

1331
00:53:56,880 --> 00:53:58,160
components

1332
00:53:58,160 --> 00:54:00,319
the level of adversary control that they

1333
00:54:00,319 --> 00:54:02,640
have over each variation the available

1334
00:54:02,640 --> 00:54:04,400
optics and whatever your available

1335
00:54:04,400 --> 00:54:06,960
resources are as a detection engineer

1336
00:54:06,960 --> 00:54:08,839
like this is a relatively expensive

1337
00:54:08,839 --> 00:54:11,200
process to

1338
00:54:11,200 --> 00:54:13,520
squeeze this coverage out of any attack

1339
00:54:13,520 --> 00:54:14,880
technique

1340
00:54:14,880 --> 00:54:17,359
and um don't let perfect be the enemy of

1341
00:54:17,359 --> 00:54:18,319
great

1342
00:54:18,319 --> 00:54:21,040
all right um that there is no perfection

1343
00:54:21,040 --> 00:54:22,960
in detection engineering you're never

1344
00:54:22,960 --> 00:54:26,240
going to have 100 confidence of anything

1345
00:54:26,240 --> 00:54:28,000
because there's always going to be

1346
00:54:28,000 --> 00:54:30,800
unknown assumptions in your logic

1347
00:54:30,800 --> 00:54:32,880
and then finally confidence is misplaced

1348
00:54:32,880 --> 00:54:34,480
without testing

1349
00:54:34,480 --> 00:54:36,240
like i could state

1350
00:54:36,240 --> 00:54:38,880
qualitatively that we have confidence

1351
00:54:38,880 --> 00:54:40,160
but

1352
00:54:40,160 --> 00:54:41,119
you know

1353
00:54:41,119 --> 00:54:44,079
show me the money right um show me those

1354
00:54:44,079 --> 00:54:46,880
tests that you're running to exercise

1355
00:54:46,880 --> 00:54:48,720
all of the identified technique

1356
00:54:48,720 --> 00:54:51,839
variations and all of these supported

1357
00:54:51,839 --> 00:54:53,440
parameters for each one of those

1358
00:54:53,440 --> 00:54:54,880
variations

1359
00:54:54,880 --> 00:54:56,640
and then do i see it on the other end

1360
00:54:56,640 --> 00:54:58,400
and if i see it on the other end then

1361
00:54:58,400 --> 00:54:59,839
i'm confident that my detection

1362
00:54:59,839 --> 00:55:01,200
analytics

1363
00:55:01,200 --> 00:55:03,440
are going to be resilient against

1364
00:55:03,440 --> 00:55:04,480
evasion

1365
00:55:04,480 --> 00:55:06,480
so with that

1366
00:55:06,480 --> 00:55:09,830
i thank everyone for your time

1367
00:55:09,830 --> 00:55:13,049
[Applause]

1368
00:55:24,240 --> 00:55:26,319
you

