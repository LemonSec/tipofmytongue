1
00:00:00,000 --> 00:00:04,589
including these registers from the

2
00:00:02,280 --> 00:00:07,439
datasheet as possible but it involves a

3
00:00:04,589 --> 00:00:10,889
lot of arithmetic and engineers are lazy

4
00:00:07,440 --> 00:00:14,429
so they want proprietary Windows tools

5
00:00:10,889 --> 00:00:15,838
to calculate a balanced corner so

6
00:00:14,429 --> 00:00:18,180
generally what you do is you run this

7
00:00:15,839 --> 00:00:21,000
program of smart art studio and it

8
00:00:18,180 --> 00:00:22,439
presents you with a list of the register

9
00:00:21,000 --> 00:00:24,810
values that you will be using in your

10
00:00:22,439 --> 00:00:29,730
own code among other things you can set

11
00:00:24,810 --> 00:00:33,269
up a template in over that X amount of

12
00:00:29,730 --> 00:00:34,950
you set up a template and then if you

13
00:00:33,270 --> 00:00:37,590
generate those settings to match your

14
00:00:34,950 --> 00:00:40,680
source code style so you can have an

15
00:00:37,590 --> 00:00:42,870
expert registers to Python array or to C

16
00:00:40,680 --> 00:00:47,760
array or whatever your internal code is

17
00:00:42,870 --> 00:00:50,699
using this becomes a good starting point

18
00:00:47,760 --> 00:00:52,829
but then you need to manually address

19
00:00:50,700 --> 00:00:59,640
the values in order to actually match

20
00:00:52,829 --> 00:01:03,629
your target I always begin a new

21
00:00:59,640 --> 00:01:06,060
standard by implementing the register

22
00:01:03,629 --> 00:01:08,250
settings in Python until I can get back

23
00:01:06,060 --> 00:01:11,400
individual packets of my UNIX command

24
00:01:08,250 --> 00:01:15,600
and at this stage of development

25
00:01:11,400 --> 00:01:18,420
I am completely away from my receiver

26
00:01:15,600 --> 00:01:23,080
herder and we usually go to a coffee

27
00:01:18,420 --> 00:01:25,270
house SSH home and then use the

28
00:01:23,080 --> 00:01:26,860
but just so that I could get out of the

29
00:01:25,270 --> 00:01:29,170
lab for a while and be away from it

30
00:01:26,860 --> 00:01:31,330
because there's no reason to touch the

31
00:01:29,170 --> 00:01:36,610
physical hardware while something else

32
00:01:31,330 --> 00:01:38,500
is your mystery the rate of

33
00:01:36,610 --> 00:01:40,420
configuration registers themselves are

34
00:01:38,500 --> 00:01:43,960
unique to the type of radio you're

35
00:01:40,420 --> 00:01:46,270
dealing with and like as a vendor or a

36
00:01:43,960 --> 00:01:48,429
chip family and then even within a

37
00:01:46,270 --> 00:01:51,699
family they will usually be different

38
00:01:48,430 --> 00:01:53,920
for the 2.4 gig levels and the sub big

39
00:01:51,700 --> 00:01:59,320
return policy the disappearance models

40
00:01:53,920 --> 00:02:02,140
will be less configurable sorry the 2.4

41
00:01:59,320 --> 00:02:04,809
gate will be less than figural because I

42
00:02:02,140 --> 00:02:07,150
guess regulation reasons or ability

43
00:02:04,810 --> 00:02:08,920
reasons there's something here it's

44
00:02:07,150 --> 00:02:10,450
level you have to choose how wide your

45
00:02:08,919 --> 00:02:12,010
filter back with is and what your

46
00:02:10,449 --> 00:02:14,799
deviation is and all these other fancy

47
00:02:12,010 --> 00:02:16,720
settings a 2.4 gig you generally just a

48
00:02:14,800 --> 00:02:18,760
what channel number your honor

49
00:02:16,720 --> 00:02:21,850
you can't even choose an individual

50
00:02:18,760 --> 00:02:25,480
frequency then you specify your rate and

51
00:02:21,850 --> 00:02:27,100
the rate won't be an exact bit timing if

52
00:02:25,480 --> 00:02:29,470
you do in the setting of Hertz bubbles

53
00:02:27,100 --> 00:02:32,140
instead it will just be 1 negative per

54
00:02:29,470 --> 00:02:36,370
second or 2 and also the modulation

55
00:02:32,140 --> 00:02:38,230
matters is this to FSK in which the

56
00:02:36,370 --> 00:02:40,630
higher frequencies of line and the lower

57
00:02:38,230 --> 00:02:43,030
frequencies is zero where is it for FS k

58
00:02:40,630 --> 00:02:48,670
which you have multiple steps and in

59
00:02:43,030 --> 00:02:51,580
code of two bits personal in addition to

60
00:02:48,670 --> 00:02:54,399
the five layer fields there are also

61
00:02:51,580 --> 00:02:57,340
some digital feels like I started frame

62
00:02:54,400 --> 00:03:02,260
delimiter the transmitter will send this

63
00:02:57,340 --> 00:03:04,350
before every packet that goes out so if

64
00:03:02,260 --> 00:03:07,350
you need to equate the transfer

65
00:03:04,350 --> 00:03:09,540
you can corrupt this to something else

66
00:03:07,350 --> 00:03:13,829
and that would just look like background

67
00:03:09,540 --> 00:03:16,200
noise and receiver there's also a length

68
00:03:13,830 --> 00:03:18,750
field which the receiver can optionally

69
00:03:16,200 --> 00:03:21,030
use in order to buffer up the packet for

70
00:03:18,750 --> 00:03:22,470
you so that your microcontroller can be

71
00:03:21,030 --> 00:03:24,690
alerted when the complete packet has

72
00:03:22,470 --> 00:03:27,390
arrived and is waiting in a buffer ready

73
00:03:24,690 --> 00:03:29,520
to be read the alternative to that is

74
00:03:27,390 --> 00:03:31,579
that your microcontroller might means

75
00:03:29,520 --> 00:03:34,170
you race the packet transmission

76
00:03:31,580 --> 00:03:37,650
flushing bikes out of the radios buffers

77
00:03:34,170 --> 00:03:40,980
so that it doesn't overfill have to do

78
00:03:37,650 --> 00:03:44,150
this for very long transmissions which

79
00:03:40,980 --> 00:03:46,649
are commonly found in voice and pager

80
00:03:44,150 --> 00:03:49,080
but you won't for short chirps that you

81
00:03:46,650 --> 00:03:54,960
would find in a home automation sensors

82
00:03:49,080 --> 00:03:57,510
and things like that in order to get

83
00:03:54,960 --> 00:03:59,430
like the very first packet out you just

84
00:03:57,510 --> 00:04:02,579
need to know your symbol rate like how

85
00:03:59,430 --> 00:04:04,950
fast are these symbols come again your

86
00:04:02,580 --> 00:04:06,450
modulation are you turning the radio on

87
00:04:04,950 --> 00:04:09,480
and off where are you taking as we can

88
00:04:06,450 --> 00:04:13,320
see you need to know that deviation if

89
00:04:09,480 --> 00:04:15,660
you are transmitting which is how wide

90
00:04:13,320 --> 00:04:19,630
of a channel you're actually using we're

91
00:04:15,660 --> 00:04:23,110
in two of us pay it's the distance

92
00:04:19,630 --> 00:04:24,790
between a 1 and a 0 on their receiving

93
00:04:23,110 --> 00:04:27,730
end you care more about the filter

94
00:04:24,790 --> 00:04:30,190
bandwidth and the filter benefit is a

95
00:04:27,730 --> 00:04:32,710
tricky thing to decide upon because if

96
00:04:30,190 --> 00:04:35,980
you make it too narrow that you might

97
00:04:32,710 --> 00:04:38,320
miss a transmission that is slightly off

98
00:04:35,980 --> 00:04:40,660
in frequency and if you make it too

99
00:04:38,320 --> 00:04:43,450
quiet then you might be blinded by a lot

100
00:04:40,660 --> 00:04:45,220
of transmission to the side when your

101
00:04:43,450 --> 00:04:47,469
real transmission is coming on exactly

102
00:04:45,220 --> 00:04:49,270
different but luckily in reverse

103
00:04:47,470 --> 00:04:51,640
engineering we can set aside the

104
00:04:49,270 --> 00:04:57,849
question of performance and so after we

105
00:04:51,640 --> 00:05:00,820
get things working now in pluck sag we

106
00:04:57,850 --> 00:05:03,940
have a defined standard that we can read

107
00:05:00,820 --> 00:05:05,770
and it says civil rate is 1200 by it

108
00:05:03,940 --> 00:05:11,230
says that it's two FS kangh which means

109
00:05:05,770 --> 00:05:12,760
that the that you have a one frequency

110
00:05:11,230 --> 00:05:14,980
for a one in a different frequency for a

111
00:05:12,760 --> 00:05:16,870
zero and you switch between them the

112
00:05:14,980 --> 00:05:19,060
deviation is defined as twelve and a

113
00:05:16,870 --> 00:05:23,290
half kilohertz older networks will use

114
00:05:19,060 --> 00:05:29,470
25 and the filter bandwidth like two

115
00:05:23,290 --> 00:05:31,270
hundred big best 8 kilohertz is fine and

116
00:05:29,470 --> 00:05:37,150
this part of frame delimiter is

117
00:05:31,270 --> 00:05:39,460
described 17 B 2 1 5 deal as far as the

118
00:05:37,150 --> 00:05:40,090
receivers to serve everything that comes

119
00:05:39,460 --> 00:05:42,729
in

120
00:05:40,090 --> 00:05:46,000
garbage and background doughnuts until

121
00:05:42,730 --> 00:05:48,760
it sees those 32 bits and that's what it

122
00:05:46,000 --> 00:05:51,790
is to begin measuring the simples

123
00:05:48,760 --> 00:05:53,560
reading the packet and then we get to

124
00:05:51,790 --> 00:05:58,510
the real-world complications where all

125
00:05:53,560 --> 00:06:02,320
of this is ever so slightly so the

126
00:05:58,510 --> 00:06:04,030
simple rate of 1200 body is like the

127
00:06:02,320 --> 00:06:05,979
standard definition but the chip itself

128
00:06:04,030 --> 00:06:08,830
doesn't need to know that the chip

129
00:06:05,979 --> 00:06:11,349
itself needs to know how wide a bit is

130
00:06:08,830 --> 00:06:15,609
and that is 8.3 3 times 10 to the

131
00:06:11,350 --> 00:06:17,530
negative 4 seconds personal so that's

132
00:06:15,610 --> 00:06:19,690
easy we're just like inverting a

133
00:06:17,530 --> 00:06:23,500
fraction here but then it comes to

134
00:06:19,690 --> 00:06:26,440
modulation so modulation is inverted to

135
00:06:23,500 --> 00:06:29,639
FSK which means that a1 is the lower

136
00:06:26,440 --> 00:06:33,160
frequency and 0 is a higher currency and

137
00:06:29,639 --> 00:06:36,850
the deviation of filter bandwidth is

138
00:06:33,160 --> 00:06:38,710
insane but that means because our ones

139
00:06:36,850 --> 00:06:40,930
and zeros are upside down our packet

140
00:06:38,710 --> 00:06:43,780
will arrive in the buffer upside down

141
00:06:40,930 --> 00:06:45,970
and we need to match on the inverse of

142
00:06:43,780 --> 00:06:49,299
the start of frame delimiter so instead

143
00:06:45,970 --> 00:06:52,750
of 7 CD 2 we have to measure out an 8-3

144
00:06:49,300 --> 00:06:54,400
each unique and the same is true for all

145
00:06:52,750 --> 00:06:57,310
of the bits in our packet every single

146
00:06:54,400 --> 00:07:00,780
one of them will be inverted so we have

147
00:06:57,310 --> 00:07:04,380
2x wear them with apps after they arrive

148
00:07:00,780 --> 00:07:06,609
we also need a transmitter to work with

149
00:07:04,380 --> 00:07:08,200
you're not going to be able to make this

150
00:07:06,610 --> 00:07:10,599
work if you do it in tired and blind

151
00:07:08,200 --> 00:07:13,120
with nothing to test against because any

152
00:07:10,599 --> 00:07:16,279
small mistake with them snowballing and

153
00:07:13,120 --> 00:07:18,199
nothing working so we have a

154
00:07:16,279 --> 00:07:21,229
concept president here in the form of an

155
00:07:18,199 --> 00:07:22,669
MMOG the airport this is a cute little

156
00:07:21,229 --> 00:07:25,339
attachment that you throw into a

157
00:07:22,669 --> 00:07:30,369
Raspberry Pi that allows it to speak p25

158
00:07:25,339 --> 00:07:34,789
DMR Parkside and many other UHF and VHF

159
00:07:30,369 --> 00:07:37,879
burglars and we need a network so that

160
00:07:34,789 --> 00:07:42,469
we can send a packet of this device so

161
00:07:37,879 --> 00:07:44,449
I've been testing through Daphna which

162
00:07:42,469 --> 00:07:46,399
is the decentralized amateur paging

163
00:07:44,449 --> 00:07:48,409
network if you're a ham radio operator

164
00:07:46,399 --> 00:07:51,499
you can register for a future number

165
00:07:48,409 --> 00:07:53,360
through them and then order a painter to

166
00:07:51,499 --> 00:07:56,239
receive it from the network or build

167
00:07:53,360 --> 00:07:57,589
your own and then there's a Hindi little

168
00:07:56,239 --> 00:08:02,479
website and the cell phone app that

169
00:07:57,589 --> 00:08:04,069
allows you to send the page at this

170
00:08:02,479 --> 00:08:05,719
point you can finally break out with

171
00:08:04,069 --> 00:08:08,059
software-defined radio and record a

172
00:08:05,719 --> 00:08:10,489
signal and then compare it to the values

173
00:08:08,059 --> 00:08:12,289
that we calculated with the standard

174
00:08:10,489 --> 00:08:16,669
down here at the bottom are the actual

175
00:08:12,289 --> 00:08:18,139
zeros and ones the message probably

176
00:08:16,669 --> 00:08:20,269
can't focus at this distance but it

177
00:08:18,139 --> 00:08:21,409
begins with a whole lot of one zero one

178
00:08:20,269 --> 00:08:24,439
zero one zero one zero

179
00:08:21,409 --> 00:08:27,889
the preamble is 480 milliseconds long

180
00:08:24,439 --> 00:08:30,019
almost half a second and that's none of

181
00:08:27,889 --> 00:08:33,829
your pain free stuff such a good battery

182
00:08:30,019 --> 00:08:35,328
life your beeper will be off for 400

183
00:08:33,828 --> 00:08:37,638
milliseconds and then it will turn on

184
00:08:35,328 --> 00:08:39,109
just to see if the packet is coming and

185
00:08:37,639 --> 00:08:41,149
it's not it turns everything all the way

186
00:08:39,110 --> 00:08:43,639
off again so that when that late battery

187
00:08:41,149 --> 00:08:48,110
can last for months of uptime far better

188
00:08:43,639 --> 00:08:50,120
than any handheld voice radio so we

189
00:08:48,110 --> 00:08:52,910
begin by recording a legitimate

190
00:08:50,120 --> 00:08:55,100
this SDR mentoring it to learn the

191
00:08:52,910 --> 00:08:57,670
parameters and then when they're correct

192
00:08:55,100 --> 00:09:00,680
we can parse the decoded bits as strings

193
00:08:57,670 --> 00:09:04,569
and begin building our software software

194
00:09:00,680 --> 00:09:04,569
parser for the incoming packets

195
00:09:07,050 --> 00:09:12,750
then after we get the right register

196
00:09:09,450 --> 00:09:15,780
settings where I guess is that them we

197
00:09:12,750 --> 00:09:18,930
talked about in Python connected to our

198
00:09:15,780 --> 00:09:20,780
secret board or is it real quick this

199
00:09:18,930 --> 00:09:24,270
way we make mistakes they're easy to fix

200
00:09:20,780 --> 00:09:26,970
we can try things out live on the

201
00:09:24,270 --> 00:09:30,210
interpreted Python command line and the

202
00:09:26,970 --> 00:09:31,740
results come out to a UNIX shell like if

203
00:09:30,210 --> 00:09:35,150
something is working on reliably you

204
00:09:31,740 --> 00:09:35,150
just correct for the right answer or

205
00:09:35,690 --> 00:09:41,880
exporting into another python class to

206
00:09:38,430 --> 00:09:43,800
begin writing a decoder on the host so

207
00:09:41,880 --> 00:09:46,860
that we understand the problem before we

208
00:09:43,800 --> 00:09:50,490
sit down to write firmer and we'd do

209
00:09:46,860 --> 00:09:52,320
this because fixing mistakes inside of

210
00:09:50,490 --> 00:09:53,730
the watch without a command line is a

211
00:09:52,320 --> 00:09:56,070
lot harder than fixing them on the

212
00:09:53,730 --> 00:09:59,700
desktop with all the resources and

213
00:09:56,070 --> 00:10:01,350
logging in the world after we then

214
00:09:59,700 --> 00:10:04,860
understand the problem in Python on the

215
00:10:01,350 --> 00:10:08,700
host we write a parser library and C to

216
00:10:04,860 --> 00:10:11,640
run hosts aside with test cases again

217
00:10:08,700 --> 00:10:15,060
away from the harbor and then finally we

218
00:10:11,640 --> 00:10:18,449
make to meet in the middle by having a

219
00:10:15,060 --> 00:10:20,130
good partnership library having our C

220
00:10:18,450 --> 00:10:21,510
code running inside of the radio and

221
00:10:20,130 --> 00:10:27,710
then making an interactive application

222
00:10:21,510 --> 00:10:31,260
to show the incoming papers this is my

223
00:10:27,710 --> 00:10:33,600
test device it's a watch wire to the USB

224
00:10:31,260 --> 00:10:36,360
serial adapter how much like one kick

225
00:10:33,600 --> 00:10:38,430
with your badges it has no display it

226
00:10:36,360 --> 00:10:42,510
has no keypad it has no buttons because

227
00:10:38,430 --> 00:10:44,550
everything is being done for side as I

228
00:10:42,510 --> 00:10:47,040
use it I have a Python script that

229
00:10:44,550 --> 00:10:49,020
connects to it and then it dumps back

230
00:10:47,040 --> 00:10:51,530
we're all packets which I can then begin

231
00:10:49,020 --> 00:10:51,530
to parts

232
00:10:51,650 --> 00:10:57,050
the Canada parser in the see this

233
00:10:54,620 --> 00:10:59,660
section of the C code has a mini-map

234
00:10:57,050 --> 00:11:01,250
if stand 11 is defined innocent it's

235
00:10:59,660 --> 00:11:04,689
being compiled to front of my desktop

236
00:11:01,250 --> 00:11:08,120
and I run all of the tests in amd64

237
00:11:04,690 --> 00:11:11,090
Linux away from the watch so that I know

238
00:11:08,120 --> 00:11:14,510
that my code is correct before I begin

239
00:11:11,090 --> 00:11:17,450
moving it into firmer and then when I

240
00:11:14,510 --> 00:11:20,380
move it into firmware it works or this

241
00:11:17,450 --> 00:11:23,600
being me sides we can send that message

242
00:11:20,380 --> 00:11:25,430
this is a page being received in a

243
00:11:23,600 --> 00:11:28,460
wristwatch about six hours of battery

244
00:11:25,430 --> 00:11:34,250
life more than enough to cheat the pop

245
00:11:28,460 --> 00:11:43,100
quiz knowing from knock you guys is here

246
00:11:34,250 --> 00:11:46,730
right so that was a lot of work right we

247
00:11:43,100 --> 00:11:49,910
had many different stages what we would

248
00:11:46,730 --> 00:11:53,620
much rather do is take the easy way out

249
00:11:49,910 --> 00:11:56,540
and reuse what's already available in

250
00:11:53,620 --> 00:11:58,370
enough hardware a receiver to sort of

251
00:11:56,540 --> 00:12:02,530
shortcut the process and known and

252
00:11:58,370 --> 00:12:02,530
that's what the right settings are to

253
00:12:03,700 --> 00:12:12,470
many of these devices the configuration

254
00:12:09,200 --> 00:12:16,700
and the packets are exposed over an SPI

255
00:12:12,470 --> 00:12:19,370
ms this is the same protocol that your

256
00:12:16,700 --> 00:12:23,240
laptop uses to grab a copy of the bios

257
00:12:19,370 --> 00:12:26,420
from the flash rom chip so we can just

258
00:12:23,240 --> 00:12:28,810
copy its configuration out by sniffing

259
00:12:26,420 --> 00:12:28,810
it and

260
00:12:29,940 --> 00:12:33,940
again thank you kindly Dusty Baker

261
00:12:32,260 --> 00:12:36,120
Corporation of America for making this

262
00:12:33,940 --> 00:12:36,120
possible

263
00:12:36,330 --> 00:12:42,280
so for this target we're going to use

264
00:12:39,220 --> 00:12:49,060
the next hook batch which I designed for

265
00:12:42,280 --> 00:12:54,339
the hook conference in 2010 on the left

266
00:12:49,060 --> 00:12:57,280
actually I can highlight stuff so on the

267
00:12:54,340 --> 00:13:00,970
Left we have this chip here and this

268
00:12:57,280 --> 00:13:04,959
chip is an msp430 running the open

269
00:13:00,970 --> 00:13:07,960
beacon in the firmware throughout the

270
00:13:04,960 --> 00:13:09,910
conference these badges would beep out

271
00:13:07,960 --> 00:13:12,990
like a little packet and then there were

272
00:13:09,910 --> 00:13:16,540
receivers running an open beacon

273
00:13:12,990 --> 00:13:18,100
infrastructure software that we record

274
00:13:16,540 --> 00:13:21,280
these packets and try to triangulate

275
00:13:18,100 --> 00:13:23,260
through the packet error rate figuring

276
00:13:21,280 --> 00:13:26,260
out where the attendees were at all

277
00:13:23,260 --> 00:13:30,100
times it was like some artistic

278
00:13:26,260 --> 00:13:32,080
mumbo-jumbo about surveillance and then

279
00:13:30,100 --> 00:13:34,360
over here on the right side of the board

280
00:13:32,080 --> 00:13:37,810
is this much smaller chip that is the

281
00:13:34,360 --> 00:13:44,260
actual radio this is an n RF 24 L 0 11

282
00:13:37,810 --> 00:13:45,969
plus it has its own crystal who is it

283
00:13:44,260 --> 00:13:47,800
has the most of the analog components on

284
00:13:45,970 --> 00:13:49,760
board involved in the filtering and

285
00:13:47,800 --> 00:13:52,579
that's what actually he sends out

286
00:13:49,760 --> 00:13:54,649
the packets in the air and it's really

287
00:13:52,579 --> 00:13:56,810
capable of receiving though even though

288
00:13:54,649 --> 00:14:04,579
that wasn't used in the open B confirm

289
00:13:56,810 --> 00:14:07,040
we're as configured at this event so the

290
00:14:04,579 --> 00:14:13,339
radio chip pointing to where this arrow

291
00:14:07,040 --> 00:14:15,050
has its own copper traces and the the

292
00:14:13,339 --> 00:14:17,540
microcontroller has its own copper

293
00:14:15,050 --> 00:14:21,709
traces that connects to them and they

294
00:14:17,540 --> 00:14:23,779
connect on this little sequence of hats

295
00:14:21,709 --> 00:14:24,589
here which is perhaps better seen in the

296
00:14:23,779 --> 00:14:29,029
photograph

297
00:14:24,589 --> 00:14:32,120
so these pins break out the SPI bus I

298
00:14:29,029 --> 00:14:34,639
did this is like an expansion port so

299
00:14:32,120 --> 00:14:37,579
that you can add a new device in

300
00:14:34,639 --> 00:14:39,470
addition to the radio to your match but

301
00:14:37,579 --> 00:14:42,769
it's also very handy and sniffing the

302
00:14:39,470 --> 00:14:45,350
connection between the CPU and the radio

303
00:14:42,769 --> 00:14:48,139
and you can use this in order to watch

304
00:14:45,350 --> 00:14:50,540
the CPU configure the radio because

305
00:14:48,139 --> 00:14:52,430
every time the radio is powered on the

306
00:14:50,540 --> 00:14:56,269
CPU will write into it the channel that

307
00:14:52,430 --> 00:14:58,099
it uses the the date array of the

308
00:14:56,269 --> 00:14:59,990
modulation type the start of frame

309
00:14:58,100 --> 00:15:01,699
delimiter all of the settings that you

310
00:14:59,990 --> 00:15:04,329
need to participate in the open beacon

311
00:15:01,699 --> 00:15:07,329
network are unloaded into this chip and

312
00:15:04,329 --> 00:15:09,819
another nordic rfj you'll then be able

313
00:15:07,329 --> 00:15:14,079
to sniff the packets that come out of

314
00:15:09,819 --> 00:15:15,399
the open Beca never it it's not Wi-Fi

315
00:15:14,079 --> 00:15:17,559
it's not bluetooth it's it's own thing

316
00:15:15,399 --> 00:15:21,549
but you can become compatible with it

317
00:15:17,559 --> 00:15:23,469
just by tapping those wires back in the

318
00:15:21,549 --> 00:15:26,019
day you would use a dedicated logic

319
00:15:23,470 --> 00:15:27,759
analyzer you use a dedicated protocol

320
00:15:26,019 --> 00:15:31,420
snipper for this like the Beagle from

321
00:15:27,759 --> 00:15:33,189
toad things nowadays these silly devices

322
00:15:31,420 --> 00:15:35,949
are more than fast and more than

323
00:15:33,189 --> 00:15:39,160
reliable enough so as you just brighten

324
00:15:35,949 --> 00:15:43,089
the pins from here to the board and

325
00:15:39,160 --> 00:15:44,799
you're trying to tap and then the

326
00:15:43,089 --> 00:15:47,559
signals will come out of it and you tell

327
00:15:44,799 --> 00:15:50,230
it which pin means whip-like which one

328
00:15:47,559 --> 00:15:51,610
is the data from the host of the device

329
00:15:50,230 --> 00:15:53,739
and which one is from the device to the

330
00:15:51,610 --> 00:15:55,689
host which one is the clock and with

331
00:15:53,739 --> 00:15:57,759
those three it's able to parse the

332
00:15:55,689 --> 00:16:00,519
entire recording and tell you an every

333
00:15:57,759 --> 00:16:06,579
transaction that occurred between the

334
00:16:00,519 --> 00:16:09,389
CPM chip and the radiation and usually

335
00:16:06,579 --> 00:16:12,549
you grab the setting is just after reset

336
00:16:09,389 --> 00:16:15,009
but you also get the packets that go

337
00:16:12,549 --> 00:16:17,470
across in the case of the open B confirm

338
00:16:15,009 --> 00:16:19,749
are the radio is held off and it never

339
00:16:17,470 --> 00:16:20,949
receives an impact but if you have

340
00:16:19,749 --> 00:16:22,520
something that is communicating

341
00:16:20,949 --> 00:16:24,920
bi-directionally is

342
00:16:22,520 --> 00:16:27,650
the network then you can see the packets

343
00:16:24,920 --> 00:16:29,089
themselves come in over the bus and that

344
00:16:27,650 --> 00:16:30,890
could be enough for us ever without

345
00:16:29,090 --> 00:16:35,960
having to write any firmware of your own

346
00:16:30,890 --> 00:16:38,210
or build any art renderer there's also a

347
00:16:35,960 --> 00:16:39,950
lovely case that a lot of these

348
00:16:38,210 --> 00:16:42,650
microcontrollers were too little power

349
00:16:39,950 --> 00:16:45,920
to support hardware acceleration of

350
00:16:42,650 --> 00:16:47,600
cryptography so the radio vendors said

351
00:16:45,920 --> 00:16:51,620
hey that's not so hard we're making our

352
00:16:47,600 --> 00:16:53,180
chip anyways let's add it yesterday but

353
00:16:51,620 --> 00:16:55,970
then you have the situation that the

354
00:16:53,180 --> 00:16:57,410
radio chip is encrypting the packet that

355
00:16:55,970 --> 00:16:58,780
is outbound and we're decrypting the

356
00:16:57,410 --> 00:17:01,400
packet that is inbound

357
00:16:58,780 --> 00:17:04,520
away from the CPU and the clear text

358
00:17:01,400 --> 00:17:06,859
packet is exposed over the bus and on

359
00:17:04,520 --> 00:17:09,260
those devices not only you get all the

360
00:17:06,859 --> 00:17:11,119
radio configuration settings but it also

361
00:17:09,260 --> 00:17:12,950
takes care about doing the cryptography

362
00:17:11,119 --> 00:17:20,000
for you so you can sniff the packets in

363
00:17:12,950 --> 00:17:22,940
the bra which is very handy now many

364
00:17:20,000 --> 00:17:25,790
boards won't tap out all of the spike

365
00:17:22,940 --> 00:17:28,310
pins as easily as like a development

366
00:17:25,790 --> 00:17:31,240
board or a hacker combat twin but none

367
00:17:28,310 --> 00:17:34,490
of this I may use hypodermic syringes I

368
00:17:31,240 --> 00:17:38,570
just stick a wire down the barrel and

369
00:17:34,490 --> 00:17:40,250
then poke them the end of the board not

370
00:17:38,570 --> 00:17:41,840
only can you poke them into BS as I

371
00:17:40,250 --> 00:17:45,290
don't care but if you're careful you can

372
00:17:41,840 --> 00:17:46,669
also hit a wire trace and the sharp end

373
00:17:45,290 --> 00:17:48,860
of the needle allows you to push it

374
00:17:46,670 --> 00:17:52,640
through within these solder nuts in

375
00:17:48,860 --> 00:17:54,770
order to touch the expensive board you

376
00:17:52,640 --> 00:17:56,679
generally do this I think is fair

377
00:17:54,770 --> 00:17:59,120
and then you switched a very thin wire

378
00:17:56,679 --> 00:18:03,400
after you know which are the right pins

379
00:17:59,120 --> 00:18:06,770
to town and then the end result you get

380
00:18:03,400 --> 00:18:09,080
their text packets and your then on the

381
00:18:06,770 --> 00:18:15,220
network of this strange device for which

382
00:18:09,080 --> 00:18:17,240
you have no documentation now as

383
00:18:15,220 --> 00:18:19,970
technology moves forward and time

384
00:18:17,240 --> 00:18:20,870
marches on especially in the very lowest

385
00:18:19,970 --> 00:18:23,210
powered devices

386
00:18:20,870 --> 00:18:27,709
the radios are beginning to become

387
00:18:23,210 --> 00:18:30,740
combined with the microcontroller and in

388
00:18:27,710 --> 00:18:31,580
these cases you have no expenses five us

389
00:18:30,740 --> 00:18:34,220
at the time

390
00:18:31,580 --> 00:18:37,309
instead you need to read out the

391
00:18:34,220 --> 00:18:40,040
firmware and then look at the firmware

392
00:18:37,309 --> 00:18:42,500
to see what's going on but as before

393
00:18:40,040 --> 00:18:47,059
your lazing in one of them is as quickly

394
00:18:42,500 --> 00:18:48,980
as possible so after you rip Dakota

395
00:18:47,059 --> 00:18:52,160
I heard three of exploiting the

396
00:18:48,980 --> 00:18:55,190
bootloader we're through reading a for

397
00:18:52,160 --> 00:18:58,390
update we're finding an unlocked chip in

398
00:18:55,190 --> 00:19:02,080
an early prototype device

399
00:18:58,390 --> 00:19:03,580
before they locked everything down you

400
00:19:02,080 --> 00:19:06,939
have this blob and you have to figure

401
00:19:03,580 --> 00:19:10,500
out where the radio code is inside of

402
00:19:06,940 --> 00:19:18,900
what might be a very large application

403
00:19:10,500 --> 00:19:22,270
so inside of the device the the raincoat

404
00:19:18,900 --> 00:19:24,430
is still connected to the CPU somehow

405
00:19:22,270 --> 00:19:26,740
and if you can find the development

406
00:19:24,430 --> 00:19:30,160
guide for the studio it will tell you

407
00:19:26,740 --> 00:19:32,410
that you write a byte to this address in

408
00:19:30,160 --> 00:19:34,470
order to send it off to the radio and

409
00:19:32,410 --> 00:19:36,880
you read the reply from this other press

410
00:19:34,470 --> 00:19:41,260
and you can search these addresses

411
00:19:36,880 --> 00:19:44,140
within the code as viola as as features

412
00:19:41,260 --> 00:19:53,290
of how the packets of formatted so for

413
00:19:44,140 --> 00:19:54,610
example in DMR a an address is forget

414
00:19:53,290 --> 00:19:57,820
how many bits long but they'll have a

415
00:19:54,610 --> 00:20:00,520
mask against them I think it's zero F F

416
00:19:57,820 --> 00:20:05,050
F so everywhere in the DMR code that you

417
00:20:00,520 --> 00:20:08,290
see something being bitwise anding zero

418
00:20:05,050 --> 00:20:13,870
of F F F that's involving the addressing

419
00:20:08,290 --> 00:20:15,070
of the DMR Network layer let's take a

420
00:20:13,870 --> 00:20:17,850
simple example which is the

421
00:20:15,070 --> 00:20:17,850
turning-point clicker

422
00:20:19,929 --> 00:20:24,129
I like using this as an example because

423
00:20:21,879 --> 00:20:26,908
when I was a graduate student they

424
00:20:24,129 --> 00:20:26,908
threatened to sue me

425
00:20:28,889 --> 00:20:34,209
today they click erase a classroom for

426
00:20:31,119 --> 00:20:38,139
mental control so I don't know any left

427
00:20:34,210 --> 00:20:40,269
college but about 2007 this dude is

428
00:20:38,139 --> 00:20:42,070
trying to starting never once said hey

429
00:20:40,269 --> 00:20:44,619
you know how students would really love

430
00:20:42,070 --> 00:20:47,789
they'd love to blow 50 dollars and

431
00:20:44,619 --> 00:20:51,279
electronic is now at the bookstore that

432
00:20:47,789 --> 00:20:55,779
they can't make themselves so he was

433
00:20:51,279 --> 00:20:59,049
however going to make one ourselves so

434
00:20:55,779 --> 00:21:05,340
this uses a tip called the NRF 24e

435
00:20:59,049 --> 00:21:09,429
1 and the 2041 is a 2.4 gigahertz

436
00:21:05,340 --> 00:21:13,090
transceiver it operates in two FS k at

437
00:21:09,429 --> 00:21:16,929
one megabit per second and when you push

438
00:21:13,090 --> 00:21:19,439
a button on your on your clicker like

439
00:21:16,929 --> 00:21:21,879
the one button in the top left that

440
00:21:19,440 --> 00:21:24,869
connects with paths the firmware makes

441
00:21:21,879 --> 00:21:28,418
up but it transmits your serial number

442
00:21:24,869 --> 00:21:31,480
along with your guests the instructors

443
00:21:28,419 --> 00:21:32,799
never cease votes from the class and can

444
00:21:31,480 --> 00:21:37,149
use it for classroom participation

445
00:21:32,799 --> 00:21:38,440
grades other within range of these

446
00:21:37,149 --> 00:21:41,399
things you better book that you're not

447
00:21:38,440 --> 00:21:41,399
sitting in the back of the classroom

448
00:21:43,989 --> 00:21:49,789
be the but here the vulnerability that

449
00:21:47,479 --> 00:21:57,739
prevents the design from being protected

450
00:21:49,789 --> 00:22:00,440
is this little chip here you - so this

451
00:21:57,739 --> 00:22:03,319
chip is the Nordic RF radio and it's a

452
00:22:00,440 --> 00:22:05,599
most of the CPU but when you're adding a

453
00:22:03,319 --> 00:22:09,469
radio and the CPU into the same package

454
00:22:05,599 --> 00:22:11,269
that season waiting you have a memory

455
00:22:09,469 --> 00:22:14,539
package and you got a CPU on top of that

456
00:22:11,269 --> 00:22:17,929
that's also easy when a CPU manufacturer

457
00:22:14,539 --> 00:22:20,509
is trying to add both the radio and

458
00:22:17,929 --> 00:22:25,999
flash at the same time that becomes

459
00:22:20,509 --> 00:22:27,889
rather hard so rather than try they have

460
00:22:25,999 --> 00:22:30,129
the Suffolk chip out of the side and

461
00:22:27,889 --> 00:22:33,859
that contains the reprogrammable memory

462
00:22:30,129 --> 00:22:37,279
the nordic RF chip here boots from

463
00:22:33,859 --> 00:22:39,289
internal master own and then copies the

464
00:22:37,279 --> 00:22:42,949
actual application out of the

465
00:22:39,289 --> 00:22:45,229
reprogrammable chip and this ugly why

466
00:22:42,949 --> 00:22:46,659
are you over here taps that out using a

467
00:22:45,229 --> 00:22:49,819
single bus that they used in the factory

468
00:22:46,659 --> 00:22:52,309
which allows us to read out all of the

469
00:22:49,819 --> 00:22:55,690
firmware and then have a copy of it to

470
00:22:52,309 --> 00:22:58,668
reverse engineer ITIN desktop computer

471
00:22:55,690 --> 00:23:00,759
now in order to lunate we need to know a

472
00:22:58,669 --> 00:23:03,429
couple of things we need to know the

473
00:23:00,759 --> 00:23:05,629
architecture of the furniture because

474
00:23:03,429 --> 00:23:08,970
each one of these devices we use a

475
00:23:05,629 --> 00:23:12,199
different instruction set in the case

476
00:23:08,970 --> 00:23:15,059
the turning-point clicker is in 805 line

477
00:23:12,200 --> 00:23:17,729
which is very old Ian towel that 8-bit

478
00:23:15,059 --> 00:23:20,879
architecture that's fun to work with and

479
00:23:17,729 --> 00:23:23,419
has excellent support in Ida we also

480
00:23:20,879 --> 00:23:26,869
need to know the loading address

481
00:23:23,419 --> 00:23:29,639
sometimes code is loaded to FST zero

482
00:23:26,869 --> 00:23:32,428
other times it goes for higher address

483
00:23:29,639 --> 00:23:35,758
like 1,100 is it common loading point to

484
00:23:32,429 --> 00:23:38,999
them as before 30 and zero eight zero

485
00:23:35,759 --> 00:23:42,809
zero and change is a popular loading

486
00:23:38,999 --> 00:23:45,899
address for arm you also need to know

487
00:23:42,809 --> 00:23:47,820
where the register addresses are you can

488
00:23:45,899 --> 00:23:50,059
find this either in the datasheet or in

489
00:23:47,820 --> 00:23:52,559
the header files for the development kit

490
00:23:50,059 --> 00:23:55,590
the header files will declare that a

491
00:23:52,559 --> 00:23:59,039
particular variable is volatile and it's

492
00:23:55,590 --> 00:24:00,570
located within the IR region and it will

493
00:23:59,039 --> 00:24:02,369
just have hundreds of these things for

494
00:24:00,570 --> 00:24:05,759
everything from general purpose i/o pins

495
00:24:02,369 --> 00:24:07,699
to interacting with the radio once you

496
00:24:05,759 --> 00:24:11,609
know their names you can search for the

497
00:24:07,700 --> 00:24:13,200
juicy ones you should always sanity

498
00:24:11,609 --> 00:24:15,779
check the firmware before you begin

499
00:24:13,200 --> 00:24:17,489
digging into it because it's easy to

500
00:24:15,779 --> 00:24:20,909
think that things are working right it

501
00:24:17,489 --> 00:24:23,999
is loaded to an incorrect address for

502
00:24:20,909 --> 00:24:27,330
example in embedded arm code which is

503
00:24:23,999 --> 00:24:28,799
called thumb function calls is a program

504
00:24:27,330 --> 00:24:31,080
relative program counter relative

505
00:24:28,799 --> 00:24:33,658
addressing so if you load your image to

506
00:24:31,080 --> 00:24:35,460
the wrong address all of the function

507
00:24:33,659 --> 00:24:42,370
calls will look right but none of the

508
00:24:35,460 --> 00:24:45,669
function pointers will attract okay

509
00:24:42,370 --> 00:24:47,110
so we begin with the basic spray we know

510
00:24:45,669 --> 00:24:49,779
that there will be functions inside of

511
00:24:47,110 --> 00:24:51,428
the code that use the i/o ports and we

512
00:24:49,779 --> 00:24:55,299
also know the functions which read

513
00:24:51,429 --> 00:24:57,130
global variables so if we see code

514
00:24:55,299 --> 00:24:59,679
interacting with a particular address as

515
00:24:57,130 --> 00:25:01,779
part of sending a packet like the

516
00:24:59,679 --> 00:25:03,880
destination address field for example we

517
00:25:01,779 --> 00:25:07,539
can mark those addresses in our reverse

518
00:25:03,880 --> 00:25:08,950
engineering tour item ports are even

519
00:25:07,539 --> 00:25:11,440
better because they're like global

520
00:25:08,950 --> 00:25:15,100
variables that can't move and are the

521
00:25:11,440 --> 00:25:16,779
same for everything in that everything

522
00:25:15,100 --> 00:25:21,668
that might possibly be compiled for that

523
00:25:16,779 --> 00:25:24,159
show so we can use this to identify like

524
00:25:21,669 --> 00:25:26,169
the valuable low-level functions and

525
00:25:24,159 --> 00:25:27,789
then work outward from there to the

526
00:25:26,169 --> 00:25:31,630
parent functions that call these the

527
00:25:27,789 --> 00:25:33,789
little ones to be identified so the

528
00:25:31,630 --> 00:25:36,580
first thing that I look for is the

529
00:25:33,789 --> 00:25:41,140
function that receives and transmits a

530
00:25:36,580 --> 00:25:42,850
byte over the SPI bus this is that

531
00:25:41,140 --> 00:25:47,260
function from the turning point clicker

532
00:25:42,850 --> 00:25:50,129
firmware now it's important understand

533
00:25:47,260 --> 00:25:53,740
the despite bus can have more than one

534
00:25:50,130 --> 00:25:56,110
slave device attached to it and that

535
00:25:53,740 --> 00:25:58,809
these are distinguished by a chip select

536
00:25:56,110 --> 00:26:00,668
pin so you use the chip select pin to

537
00:25:58,809 --> 00:26:03,279
choose which chip you want to talk to

538
00:26:00,669 --> 00:26:07,080
and then you send the data across but

539
00:26:03,279 --> 00:26:11,230
everything that sends data to either the

540
00:26:07,080 --> 00:26:14,889
the radio or the EEPROM will go over

541
00:26:11,230 --> 00:26:16,899
this function now I mentioned before

542
00:26:14,890 --> 00:26:18,730
that the radio is not a separate chip

543
00:26:16,899 --> 00:26:24,669
but here I'm saying that it's still over

544
00:26:18,730 --> 00:26:28,780
the spike ups in order to simplify there

545
00:26:24,670 --> 00:26:31,360
and there should play out they just put

546
00:26:28,780 --> 00:26:33,100
a CPU core right next to the radio core

547
00:26:31,360 --> 00:26:35,530
as if they were wired together on a

548
00:26:33,100 --> 00:26:44,260
piece of beef so it's using the same

549
00:26:35,530 --> 00:26:46,389
wiring we then can identify the all of

550
00:26:44,260 --> 00:26:48,970
the function calls that are made to this

551
00:26:46,390 --> 00:26:51,549
function so this list continues off the

552
00:26:48,970 --> 00:26:54,250
screen this is a list of everywhere in

553
00:26:51,549 --> 00:26:56,740
the firmware image that a byte is

554
00:26:54,250 --> 00:27:00,669
received and transmitted over a DSP

555
00:26:56,740 --> 00:27:01,960
honest when I first saw this list of

556
00:27:00,669 --> 00:27:04,660
course I didn't know what any of those

557
00:27:01,960 --> 00:27:07,870
other functions did but I could begin

558
00:27:04,660 --> 00:27:09,280
looking into them by how often they call

559
00:27:07,870 --> 00:27:12,629
the function about what else they had

560
00:27:09,280 --> 00:27:17,320
until eventually I had the names for all

561
00:27:12,630 --> 00:27:20,350
so this function down here transmits the

562
00:27:17,320 --> 00:27:23,409
packet and in this function here writes

563
00:27:20,350 --> 00:27:27,459
the configuration and these functions

564
00:27:23,410 --> 00:27:31,540
down here read from the external spike

565
00:27:27,460 --> 00:27:33,280
hutch and then these functions I haven't

566
00:27:31,540 --> 00:27:35,290
gotten around to reverse engineering in

567
00:27:33,280 --> 00:27:36,549
it but I don't eat them is I found

568
00:27:35,290 --> 00:27:38,620
everything that you need to elsewhere in

569
00:27:36,549 --> 00:27:40,450
the code so when you've got a firmware

570
00:27:38,620 --> 00:27:42,489
image of hundreds and thousands of or

571
00:27:40,450 --> 00:27:44,980
tens of thousands of functions you

572
00:27:42,490 --> 00:27:47,350
generally ignore everything that doesn't

573
00:27:44,980 --> 00:27:48,190
immediately relate to the mystery that

574
00:27:47,350 --> 00:27:49,899
you're trying to solve

575
00:27:48,190 --> 00:27:52,210
you're not trying to convert the entire

576
00:27:49,900 --> 00:27:53,120
thing back to source code you just try

577
00:27:52,210 --> 00:27:58,540
to understand it enough

578
00:27:53,120 --> 00:28:00,709
you can be producing or interactive so

579
00:27:58,540 --> 00:28:02,600
we have spyware it's the first you

580
00:28:00,710 --> 00:28:04,520
select the chip and then you call the

581
00:28:02,600 --> 00:28:06,439
the spy receive transmit function a

582
00:28:04,520 --> 00:28:08,300
bunch like for everybody and the buffer

583
00:28:06,440 --> 00:28:12,290
that want to exchange and then you have

584
00:28:08,300 --> 00:28:15,680
n select the shape so knowing the

585
00:28:12,290 --> 00:28:18,200
function that that actually transmits

586
00:28:15,680 --> 00:28:20,120
the bytes we can then begin looking for

587
00:28:18,200 --> 00:28:23,540
the instructions that select the radio

588
00:28:20,120 --> 00:28:26,360
and these are documented in the

589
00:28:23,540 --> 00:28:28,820
datasheet for the new Redick RF it's

590
00:28:26,360 --> 00:28:32,270
just one ship device the radio is

591
00:28:28,820 --> 00:28:34,700
selected by using the deceptive

592
00:28:32,270 --> 00:28:38,389
instruction to set the third bit of the

593
00:28:34,700 --> 00:28:41,360
radio register and then the EEPROM is

594
00:28:38,390 --> 00:28:42,770
selected by clearing and we take it low

595
00:28:41,360 --> 00:28:46,280
instead of taking it high as and into

596
00:28:42,770 --> 00:28:52,940
the radio but clearing general purpose

597
00:28:46,280 --> 00:28:56,300
i/o port 0 10 0 and then we can identify

598
00:28:52,940 --> 00:29:01,400
this code and see you how the radio is

599
00:28:56,300 --> 00:29:04,840
being set up so we see the calls being

600
00:29:01,400 --> 00:29:08,480
made and you see that it's calling

601
00:29:04,840 --> 00:29:13,790
spectrum here at Radio W our config and

602
00:29:08,480 --> 00:29:17,270
if we jump to that we jump to that we

603
00:29:13,790 --> 00:29:19,760
can see that this is really sloppy code

604
00:29:17,270 --> 00:29:22,129
instead of running through like a buffer

605
00:29:19,760 --> 00:29:26,210
they're just calling the function 30

606
00:29:22,130 --> 00:29:29,840
times in two rounds and you can see that

607
00:29:26,210 --> 00:29:34,190
it's bragging eight eight zero zero zero

608
00:29:29,840 --> 00:29:38,330
zero zero and so on until one B 1 C 1 D

609
00:29:34,190 --> 00:29:40,850
and so on this is the code that actually

610
00:29:38,330 --> 00:29:44,870
configures the radio and if you

611
00:29:40,850 --> 00:29:47,449
- in your order to save chip you have

612
00:29:44,870 --> 00:29:53,000
configured a radio the function on their

613
00:29:47,450 --> 00:29:58,610
network it's a similar function that

614
00:29:53,000 --> 00:29:59,960
reads our of the is my flash and I was

615
00:29:58,610 --> 00:30:03,709
confused as to why they would bother

616
00:29:59,960 --> 00:30:07,669
because spy flash gets copied into the

617
00:30:03,710 --> 00:30:12,830
radio in round to actually be the

618
00:30:07,669 --> 00:30:14,480
program and run the small low-end

619
00:30:12,830 --> 00:30:17,090
equivalent of the loader as the fax was

620
00:30:14,480 --> 00:30:19,250
talking about this morning the reason

621
00:30:17,090 --> 00:30:21,259
for this is that they wanted to be able

622
00:30:19,250 --> 00:30:22,730
to read the serial number out of the

623
00:30:21,259 --> 00:30:27,649
deep problem without mixing it with the

624
00:30:22,730 --> 00:30:29,480
code so by finding the region in the

625
00:30:27,649 --> 00:30:30,860
EEPROM that had the serial number that

626
00:30:29,480 --> 00:30:34,519
was written in hexadecimal on the

627
00:30:30,860 --> 00:30:37,039
sticker on the back of the device I was

628
00:30:34,519 --> 00:30:40,759
then able to know what the address field

629
00:30:37,039 --> 00:30:42,379
was and where to place it myself this

630
00:30:40,759 --> 00:30:45,259
means that not only can I communicate on

631
00:30:42,379 --> 00:30:48,439
the network but I can also go forward

632
00:30:45,259 --> 00:30:49,940
and metric between like a physical unit

633
00:30:48,440 --> 00:30:54,250
and its packets in the network and

634
00:30:49,940 --> 00:30:54,250
accurately identify who said what

635
00:30:57,050 --> 00:31:01,340
and this gives us all the results that

636
00:30:59,690 --> 00:31:03,830
we need without ever touching a

637
00:31:01,340 --> 00:31:06,290
software-defined radio we know the

638
00:31:03,830 --> 00:31:08,110
rating of rounds of 2.4 or 11 megahertz

639
00:31:06,290 --> 00:31:10,580
that she say kickers

640
00:31:08,110 --> 00:31:14,629
the dimension webbing bit per second

641
00:31:10,580 --> 00:31:17,600
into of his pay and the trickiest part

642
00:31:14,630 --> 00:31:19,360
of this the the thing that kept me from

643
00:31:17,600 --> 00:31:22,580
being able to sniff these packets

644
00:31:19,360 --> 00:31:25,909
without even opening device was that the

645
00:31:22,580 --> 00:31:27,649
Nordic RF devices have an unknown

646
00:31:25,910 --> 00:31:30,170
started frame delimiter that marks the

647
00:31:27,650 --> 00:31:33,110
beginning of the packers so without

648
00:31:30,170 --> 00:31:35,180
knowing that at the time I wasn't able

649
00:31:33,110 --> 00:31:36,590
to sniff for mischievously and later

650
00:31:35,180 --> 00:31:41,570
figured that out but did not notice the

651
00:31:36,590 --> 00:31:44,480
time so I needed to know this three to

652
00:31:41,570 --> 00:31:46,460
five by field that would describe where

653
00:31:44,480 --> 00:31:48,140
the packets begin in the air in order to

654
00:31:46,460 --> 00:31:51,590
tell my receiver when to match on and

655
00:31:48,140 --> 00:31:56,650
this secret number that made me do all

656
00:31:51,590 --> 00:31:56,649
of this work turned out to be 12 3456

657
00:31:57,580 --> 00:32:03,919
so having these parameters you can then

658
00:32:00,470 --> 00:32:06,440
sniff the traffic so you can see like is

659
00:32:03,920 --> 00:32:09,950
the classroom voting for any women

660
00:32:06,440 --> 00:32:12,260
foresee what's the most popular one you

661
00:32:09,950 --> 00:32:14,120
can emulate it in order to transmit your

662
00:32:12,260 --> 00:32:17,090
own packets so you could follow along

663
00:32:14,120 --> 00:32:19,550
with the majority and time device inside

664
00:32:17,090 --> 00:32:20,830
the rafters and just always voted as a

665
00:32:19,550 --> 00:32:25,940
straight-a student

666
00:32:20,830 --> 00:32:28,909
but had perfect attendance this also

667
00:32:25,940 --> 00:32:33,470
tells you that you can do jamming

668
00:32:28,910 --> 00:32:35,180
if you just jam 2.44 blind gigahertz and

669
00:32:33,470 --> 00:32:37,670
none of these devices will get signal

670
00:32:35,180 --> 00:32:40,060
little bit of a channel and the network

671
00:32:37,670 --> 00:32:40,060
won't function

672
00:32:42,250 --> 00:32:45,529
again I'd like to thank the speed of

673
00:32:44,720 --> 00:32:49,970
expert company

674
00:32:45,529 --> 00:32:52,399
god bless those fine folks the new to

675
00:32:49,970 --> 00:32:55,190
1964 models are really something

676
00:32:52,399 --> 00:32:59,149
different to Studebaker is different by

677
00:32:55,190 --> 00:33:02,570
design okay so we want other offensive

678
00:32:59,149 --> 00:33:06,139
targets right what other devices might

679
00:33:02,570 --> 00:33:08,299
apply these techniques to because unless

680
00:33:06,140 --> 00:33:09,950
you are both into electrical engineering

681
00:33:08,299 --> 00:33:12,019
and suffering through an undergrad

682
00:33:09,950 --> 00:33:14,750
psychology class you really don't care

683
00:33:12,019 --> 00:33:16,039
about acting the clicker for the results

684
00:33:14,750 --> 00:33:17,720
of it you care about it for the

685
00:33:16,039 --> 00:33:23,330
techniques better how might apply to

686
00:33:17,720 --> 00:33:27,080
something else so one handy target is

687
00:33:23,330 --> 00:33:28,779
the textarea nd 380 some friends and I

688
00:33:27,080 --> 00:33:30,980
reverse engineered this we started a

689
00:33:28,779 --> 00:33:34,309
project that you can find on github

690
00:33:30,980 --> 00:33:37,549
called md380 tools this is a $90

691
00:33:34,309 --> 00:33:39,289
handheld radio it's very popular for

692
00:33:37,549 --> 00:33:42,190
amateur radio but it also works on

693
00:33:39,289 --> 00:33:45,139
business networks it can be either

694
00:33:42,190 --> 00:33:49,880
murder turbo digital standard were

695
00:33:45,139 --> 00:33:51,620
regular narrowband FM modulation we

696
00:33:49,880 --> 00:33:52,750
wrote from our patches enable things

697
00:33:51,620 --> 00:33:54,699
like

698
00:33:52,750 --> 00:33:57,040
so that you can hear all of the audio

699
00:33:54,700 --> 00:33:59,160
going on in the channel and know not to

700
00:33:57,040 --> 00:34:02,560
accidentally stump on someone else's

701
00:33:59,160 --> 00:34:03,910
conversations in the business radio this

702
00:34:02,560 --> 00:34:06,159
doesn't make sense because you don't

703
00:34:03,910 --> 00:34:10,659
want the guys to the line with a carry

704
00:34:06,160 --> 00:34:12,250
management talked about them but in

705
00:34:10,659 --> 00:34:15,480
amateur radio it matters a lot because

706
00:34:12,250 --> 00:34:18,730
in amateur radio before I transmit I

707
00:34:15,480 --> 00:34:21,400
need to make sure that no one else is

708
00:34:18,730 --> 00:34:23,409
transmitting on that same repeater and

709
00:34:21,400 --> 00:34:25,690
there are time slots so two people can

710
00:34:23,409 --> 00:34:28,839
talk at the same time as long as they're

711
00:34:25,690 --> 00:34:30,670
different types of see and none of the

712
00:34:28,840 --> 00:34:32,440
commercial radio is except for the

713
00:34:30,670 --> 00:34:34,210
really high-end Motorola's allowing

714
00:34:32,440 --> 00:34:36,280
allows you to do that so you couldn't

715
00:34:34,210 --> 00:34:37,630
listen before you transmit it you then

716
00:34:36,280 --> 00:34:39,070
weren't able to know that the channel is

717
00:34:37,630 --> 00:34:41,200
really clear and people would interfere

718
00:34:39,070 --> 00:34:42,520
with each other all the time with

719
00:34:41,199 --> 00:34:44,919
permissiveness note you can then hear

720
00:34:42,520 --> 00:34:47,409
all of the conversations and know not to

721
00:34:44,920 --> 00:34:51,510
interfere we added a universal address

722
00:34:47,409 --> 00:34:51,509
book so the inside of the radio firmware

723
00:34:51,690 --> 00:34:58,210
we we hollowed out a bunch of flash

724
00:34:55,389 --> 00:35:00,220
memories where our own code but there's

725
00:34:58,210 --> 00:35:01,990
also an external spy flash chip with

726
00:35:00,220 --> 00:35:04,419
just tons of space available that was

727
00:35:01,990 --> 00:35:07,029
abused by the manufacturer so we

728
00:35:04,420 --> 00:35:09,490
replaced that with a caller ID database

729
00:35:07,030 --> 00:35:11,530
of every amateur radio user in the world

730
00:35:09,490 --> 00:35:13,149
who had registered for using its

731
00:35:11,530 --> 00:35:15,340
protocol so that when you get an

732
00:35:13,150 --> 00:35:19,000
incoming packet you know that it's like

733
00:35:15,340 --> 00:35:22,690
Jim and Arkansas and not the other Jim

734
00:35:19,000 --> 00:35:24,670
in Philadelphia yeah broad packet

735
00:35:22,690 --> 00:35:26,960
sniffing an injection so that you could

736
00:35:24,670 --> 00:35:28,460
catch all of the packets that

737
00:35:26,960 --> 00:35:33,380
in order to learn how the protocol

738
00:35:28,460 --> 00:35:36,109
really works and we ripped out the audio

739
00:35:33,380 --> 00:35:38,990
codec which is a proprietary phonetic

740
00:35:36,109 --> 00:35:41,598
called mu 2 plus and we've relinked the

741
00:35:38,990 --> 00:35:43,459
firmer image to run as a linux

742
00:35:41,599 --> 00:35:45,440
executable so that you have a

743
00:35:43,460 --> 00:35:49,309
command-line tool that can turn packets

744
00:35:45,440 --> 00:35:54,079
to a WAV audio file were WAV audio file

745
00:35:49,309 --> 00:35:57,230
back in packets this is a screenshot of

746
00:35:54,079 --> 00:36:00,290
the caller ID database sharing an

747
00:35:57,230 --> 00:36:03,140
instrument call and you know that the

748
00:36:00,290 --> 00:36:08,890
guys also I mean I was dating Susanna

749
00:36:03,140 --> 00:36:11,270
mistake with country that's red a little

750
00:36:08,890 --> 00:36:13,190
southern the common application that

751
00:36:11,270 --> 00:36:16,339
would connect to the radio through USB

752
00:36:13,190 --> 00:36:17,780
host mode so this is sharing a log of

753
00:36:16,339 --> 00:36:23,770
all the calls that were made at the

754
00:36:17,780 --> 00:36:23,770
bottom in the raw data of text message

755
00:36:24,339 --> 00:36:35,900
the program he was twelve years ago this

756
00:36:32,510 --> 00:36:39,200
thing came out as a text messaging toy

757
00:36:35,900 --> 00:36:40,930
for kids his parents didn't want to give

758
00:36:39,200 --> 00:36:43,419
them

759
00:36:40,930 --> 00:36:45,578
so instead of plugging the desktop

760
00:36:43,420 --> 00:36:48,040
computer if you have a little USB dongle

761
00:36:45,579 --> 00:36:49,480
plugged in and then this would allow

762
00:36:48,040 --> 00:36:53,650
them to chat with their friends and get

763
00:36:49,480 --> 00:36:56,410
the text back this breach at here is

764
00:36:53,650 --> 00:36:59,619
running a random number generator test

765
00:36:56,410 --> 00:37:02,200
the results of it showed that the CP

766
00:36:59,619 --> 00:37:03,849
protocol for this chip was using

767
00:37:02,200 --> 00:37:05,859
background number generators and their

768
00:37:03,849 --> 00:37:09,010
encryption making it exploitable

769
00:37:05,859 --> 00:37:10,779
over-the-air the hardware has been

770
00:37:09,010 --> 00:37:12,339
completely documented and reversed and

771
00:37:10,780 --> 00:37:15,069
you could write whatever you want to run

772
00:37:12,339 --> 00:37:16,509
inside this my favorite thing that I

773
00:37:15,069 --> 00:37:18,550
wrote for this is when I had the

774
00:37:16,510 --> 00:37:21,700
privilege of collaborating with Santa

775
00:37:18,550 --> 00:37:27,880
Clara that blades parents of a they're

776
00:37:21,700 --> 00:37:30,609
fine folks at UPenn we wrote a reflexive

777
00:37:27,880 --> 00:37:34,450
jammer for app could be 25 produced

778
00:37:30,609 --> 00:37:37,299
videos so that when the packet comes in

779
00:37:34,450 --> 00:37:40,000
it then transmits during only the

780
00:37:37,300 --> 00:37:42,700
destination in an address field which

781
00:37:40,000 --> 00:37:45,640
causes the receiver to believe that the

782
00:37:42,700 --> 00:37:46,960
packet was intended for someone else and

783
00:37:45,640 --> 00:37:52,808
it's able to do this by transmitting

784
00:37:46,960 --> 00:37:57,309
only 0.3% of the time we have Lee ran

785
00:37:52,809 --> 00:38:00,130
this on an amateur radio frequencies we

786
00:37:57,309 --> 00:38:01,809
got all sorts of phone calls from every

787
00:38:00,130 --> 00:38:04,109
fire department was having trouble with

788
00:38:01,809 --> 00:38:04,109
her life

789
00:38:04,690 --> 00:38:09,500
there's a lot to be done in making these

790
00:38:07,640 --> 00:38:12,560
radiators more reliable that needs to be

791
00:38:09,500 --> 00:38:18,590
done such as automatic failover when the

792
00:38:12,560 --> 00:38:23,230
tower is I drink completely with you and

793
00:38:18,590 --> 00:38:26,090
then the next time that makes it earlier

794
00:38:23,230 --> 00:38:27,530
in srinagar F chip is compatible with

795
00:38:26,090 --> 00:38:33,290
the ones you used you know Microsoft

796
00:38:27,530 --> 00:38:36,740
Wireless keywords so max Buddha's are

797
00:38:33,290 --> 00:38:40,160
interested shrewder made this Hardware

798
00:38:36,740 --> 00:38:42,410
clunky three key the used custom

799
00:38:40,160 --> 00:38:44,839
hardware in order to to skip the start

800
00:38:42,410 --> 00:38:50,240
of frame delimiter in order to mistress

801
00:38:44,840 --> 00:38:54,740
these no devices using a key creepy and

802
00:38:50,240 --> 00:38:56,419
I could've known the the turning point

803
00:38:54,740 --> 00:38:58,569
decorated secret number was one two

804
00:38:56,420 --> 00:39:02,540
three four five six without having to

805
00:38:58,570 --> 00:39:04,160
reverse engineering so 2010 I figured

806
00:39:02,540 --> 00:39:06,380
out how to port that technique to write

807
00:39:04,160 --> 00:39:08,270
entirely in software with build custom

808
00:39:06,380 --> 00:39:10,520
hardware and got that running on the

809
00:39:08,270 --> 00:39:15,230
next foot badge so here on the right you

810
00:39:10,520 --> 00:39:17,450
see the macro West text editor the

811
00:39:15,230 --> 00:39:19,040
string is being typed in and the same T

812
00:39:17,450 --> 00:39:21,529
prices are being caught up by the next

813
00:39:19,040 --> 00:39:23,710
web badge over the air because the

814
00:39:21,530 --> 00:39:28,630
closest thing to encryption

815
00:39:23,710 --> 00:39:32,710
we're using the time was excellent with

816
00:39:28,630 --> 00:39:35,200
their own address since then there's

817
00:39:32,710 --> 00:39:37,059
been a mouse Jack and many other

818
00:39:35,200 --> 00:39:40,480
projects that are playing with these

819
00:39:37,059 --> 00:39:43,750
devices as as these sort of like dongle

820
00:39:40,480 --> 00:39:46,720
keywords and protect for votes as they

821
00:39:43,750 --> 00:39:48,010
have an encryption it is optional so you

822
00:39:46,720 --> 00:39:51,899
wouldn't be able to know what was sent

823
00:39:48,010 --> 00:39:56,200
up the network but you could inject you

824
00:39:51,900 --> 00:39:59,140
new packets Mouse record abuses this to

825
00:39:56,200 --> 00:40:07,149
inject key presses into a mouse because

826
00:39:59,140 --> 00:40:10,029
the USB they're the same thing and aside

827
00:40:07,150 --> 00:40:12,869
from the Spanish language speed of April

828
00:40:10,030 --> 00:40:12,869
1964

829
00:40:24,280 --> 00:40:29,750
yeah I have just a few minutes for

830
00:40:26,990 --> 00:40:31,549
questions and the way that the light

831
00:40:29,750 --> 00:40:34,090
works so the way the way I'm kind of

832
00:40:31,550 --> 00:40:34,090
lined up here

833
00:40:35,500 --> 00:40:38,599
[Music]

