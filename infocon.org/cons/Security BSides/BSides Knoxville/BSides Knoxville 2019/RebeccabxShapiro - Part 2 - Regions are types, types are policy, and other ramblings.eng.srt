1
00:00:00,000 --> 00:00:04,560
did find that there are addresses that

2
00:00:02,310 --> 00:00:06,180
were written by the bootloader that were

3
00:00:04,560 --> 00:00:07,979
not anywhere in the table and I can't

4
00:00:06,180 --> 00:00:10,290
tell you whether that's a documentation

5
00:00:07,980 --> 00:00:13,139
issue or that's above in the bootloader

6
00:00:10,290 --> 00:00:15,239
but there are some yunsik's that are not

7
00:00:13,139 --> 00:00:18,090
necessarily being enforced and we could

8
00:00:15,240 --> 00:00:19,890
if we just started understanding like

9
00:00:18,090 --> 00:00:22,890
seeing these regions of memory as

10
00:00:19,890 --> 00:00:25,230
objects for a policy in which we can

11
00:00:22,890 --> 00:00:27,840
follow and we don't have to necessarily

12
00:00:25,230 --> 00:00:30,179
have a runtime enforcement of it but it

13
00:00:27,840 --> 00:00:32,729
would be helpful while testing to happen

14
00:00:30,179 --> 00:00:35,640
if we can have like the hardware support

15
00:00:32,729 --> 00:00:37,919
to do runtime all the better and yes you

16
00:00:35,640 --> 00:00:39,690
can use page table to secure you know if

17
00:00:37,920 --> 00:00:42,960
that's enabled there's ways to do this

18
00:00:39,690 --> 00:00:45,089
and I will talk we have some prototype

19
00:00:42,960 --> 00:00:46,800
that uses page tables though enforce

20
00:00:45,090 --> 00:00:48,079
this type of region needs access

21
00:00:46,800 --> 00:00:53,218
controller

22
00:00:48,079 --> 00:00:55,440
so during boot loading like gone over a

23
00:00:53,219 --> 00:00:57,989
lot of this but the memory map in the

24
00:00:55,440 --> 00:01:00,300
outer space may change over time so you

25
00:00:57,989 --> 00:01:03,809
would see phases of different APIs

26
00:01:00,300 --> 00:01:06,179
regions being okay to write to or being

27
00:01:03,809 --> 00:01:09,600
read-only or beating or containing

28
00:01:06,180 --> 00:01:14,280
nothing or not even being back to any

29
00:01:09,600 --> 00:01:16,320
backing storage registry then you know

30
00:01:14,280 --> 00:01:18,680
remember to be initialized syntax might

31
00:01:16,320 --> 00:01:18,679
be boot

32
00:01:18,950 --> 00:01:25,070
scene into five times for the particular

33
00:01:21,649 --> 00:01:27,200
bootloader I studied they just had a

34
00:01:25,070 --> 00:01:29,589
dance around itself until I got it up

35
00:01:27,200 --> 00:01:35,170
round so it can spread out not move it's

36
00:01:29,590 --> 00:01:37,850
it's up its stack anymore it's so

37
00:01:35,170 --> 00:01:41,619
execution can be divided dividing the

38
00:01:37,850 --> 00:01:44,270
sub stages by how the memory or how

39
00:01:41,619 --> 00:01:46,009
memory the attic space is intended to be

40
00:01:44,270 --> 00:01:48,590
used how the regions are intended to be

41
00:01:46,009 --> 00:01:51,140
used you know once the staff changes

42
00:01:48,590 --> 00:01:53,659
location you might want to say well this

43
00:01:51,140 --> 00:01:56,539
is a new sub stage I'm going to look the

44
00:01:53,659 --> 00:01:58,069
staff is over here now the there's just

45
00:01:56,539 --> 00:01:59,149
you know many different things that you

46
00:01:58,069 --> 00:02:02,090
can think about when you're thinking

47
00:01:59,149 --> 00:02:05,569
about policy regions as types types

48
00:02:02,090 --> 00:02:08,119
policy and so when I was thinking about

49
00:02:05,569 --> 00:02:11,030
sub stages for a pool owner for a letter

50
00:02:08,119 --> 00:02:13,940
specifically when I wanted to write a

51
00:02:11,030 --> 00:02:18,160
policy based on regions I thought well

52
00:02:13,940 --> 00:02:20,920
the major you know the major things that

53
00:02:18,160 --> 00:02:23,620
as it's executing preparing loading

54
00:02:20,920 --> 00:02:25,540
watching linking some region of memory

55
00:02:23,620 --> 00:02:28,240
need to be used by future sub stage

56
00:02:25,540 --> 00:02:30,040
which by which I mean it could be where

57
00:02:28,240 --> 00:02:32,170
the image from the neck to the target

58
00:02:30,040 --> 00:02:34,299
that's gonna be loaded is it could be

59
00:02:32,170 --> 00:02:37,660
it's setting up you know with steering

60
00:02:34,300 --> 00:02:40,650
out are we to the memory for the BSS for

61
00:02:37,660 --> 00:02:42,970
data that is assumed to be zero dad's

62
00:02:40,650 --> 00:02:44,500
bar could be performing internal

63
00:02:42,970 --> 00:02:46,690
bookkeeping and there's a lot of

64
00:02:44,500 --> 00:02:48,040
internal bookkeeping these letters they

65
00:02:46,690 --> 00:02:50,829
need to you know keep track their

66
00:02:48,040 --> 00:02:54,310
progress in you to have pointers to all

67
00:02:50,830 --> 00:02:56,650
the driver is in remember all the

68
00:02:54,310 --> 00:02:59,980
devices that it already found and

69
00:02:56,650 --> 00:03:04,000
initialized and so these are sort of the

70
00:02:59,980 --> 00:03:07,750
major stages bookkeeping preparing a

71
00:03:04,000 --> 00:03:12,880
future substage copy to feature sub

72
00:03:07,750 --> 00:03:14,560
stage and I have wrote a policy and I'm

73
00:03:12,880 --> 00:03:17,740
not really talking and it's so closely

74
00:03:14,560 --> 00:03:20,170
about the policy over here so sub stages

75
00:03:17,740 --> 00:03:22,540
the bootloader I classified as either

76
00:03:20,170 --> 00:03:25,510
loading the future sub stage at region

77
00:03:22,540 --> 00:03:28,929
so coffee save big chunks of data into

78
00:03:25,510 --> 00:03:33,130
their patching such as you know real

79
00:03:28,930 --> 00:03:39,130
doing small little hi dispatches doing

80
00:03:33,130 --> 00:03:41,410
wheels fix ups or doing stuff to keep

81
00:03:39,130 --> 00:03:43,540
track of where it is and then during

82
00:03:41,410 --> 00:03:46,299
each of these sub stages I thoughts to

83
00:03:43,540 --> 00:03:48,290
divide the region's into you know code

84
00:03:46,300 --> 00:03:50,940
which should never be

85
00:03:48,290 --> 00:03:53,239
registers I just decided to kind of make

86
00:03:50,940 --> 00:03:55,530
it something you can say maybe if it's

87
00:03:53,240 --> 00:03:57,600
bookkeeping or maybe if it's looting and

88
00:03:55,530 --> 00:04:01,230
touching can say no right intended

89
00:03:57,600 --> 00:04:02,880
registers bookkeeping stage so if it's

90
00:04:01,230 --> 00:04:05,250
in the bookkeeping stage you can allow

91
00:04:02,880 --> 00:04:07,440
it to write the bookkeeping data but if

92
00:04:05,250 --> 00:04:10,530
it's loading or patching and saying they

93
00:04:07,440 --> 00:04:12,840
know right into bookkeeping data and

94
00:04:10,530 --> 00:04:14,880
then let you know a region that's not

95
00:04:12,840 --> 00:04:17,430
quite ready yet to be used but be

96
00:04:14,880 --> 00:04:20,070
prepared to a future substage image

97
00:04:17,430 --> 00:04:21,320
region another like tag to classify it

98
00:04:20,070 --> 00:04:24,120
Oh

99
00:04:21,320 --> 00:04:26,730
so of course everyone wants to ask me

100
00:04:24,120 --> 00:04:30,140
like oh did you find any you know today

101
00:04:26,730 --> 00:04:32,730
and you did it well so every single

102
00:04:30,140 --> 00:04:34,260
device has a way different build you

103
00:04:32,730 --> 00:04:36,780
could is just like a big pile of code

104
00:04:34,260 --> 00:04:39,170
that is compiled down you know to

105
00:04:36,780 --> 00:04:42,330
something and a lot of code is not

106
00:04:39,170 --> 00:04:44,250
shared necessarily between devices but

107
00:04:42,330 --> 00:04:46,590
you know the big thing with this

108
00:04:44,250 --> 00:04:49,940
particular device that's you know this

109
00:04:46,590 --> 00:04:53,729
development board it beagleboard-xm is

110
00:04:49,940 --> 00:04:56,940
it reads the head on the image from the

111
00:04:53,730 --> 00:04:59,280
storage from the fat file system from

112
00:04:56,940 --> 00:05:02,940
that it will figure out where the header

113
00:04:59,280 --> 00:05:07,469
of it lies in memory it using that

114
00:05:02,940 --> 00:05:11,580
header it will read both using them

115
00:05:07,470 --> 00:05:13,670
sorry the header sorry this particular

116
00:05:11,580 --> 00:05:16,460
pointer was wearing a copy the header

117
00:05:13,670 --> 00:05:19,130
and it will read that chunk of the file

118
00:05:16,460 --> 00:05:21,890
that has like better information for

119
00:05:19,130 --> 00:05:23,930
this binary into memory and from there

120
00:05:21,890 --> 00:05:25,909
it will look at this header that have

121
00:05:23,930 --> 00:05:30,260
just loaded copied straight off the file

122
00:05:25,910 --> 00:05:35,630
to memory and purses and then after that

123
00:05:30,260 --> 00:05:38,240
this particular variable I circled SQL

124
00:05:35,630 --> 00:05:41,320
image loader that is directly copied

125
00:05:38,240 --> 00:05:44,800
from the header so the binary can say I

126
00:05:41,320 --> 00:05:48,320
live on top of all these registers

127
00:05:44,800 --> 00:05:53,120
memory mapped i/o and it will just read

128
00:05:48,320 --> 00:05:55,130
you know bytes into that address so it

129
00:05:53,120 --> 00:05:58,190
will just copy things in there and then

130
00:05:55,130 --> 00:06:00,110
like you have undefined behavior because

131
00:05:58,190 --> 00:06:03,290
you're just writing whatever I mean

132
00:06:00,110 --> 00:06:06,410
probably define it better but so have

133
00:06:03,290 --> 00:06:08,300
trustworthy is it well like how much you

134
00:06:06,410 --> 00:06:10,970
trust the image is loading but also you

135
00:06:08,300 --> 00:06:13,820
really have no choice to trust it this

136
00:06:10,970 --> 00:06:16,730
is this particular food environment is

137
00:06:13,820 --> 00:06:17,420
not meant to be like locked down or

138
00:06:16,730 --> 00:06:21,020
anything

139
00:06:17,420 --> 00:06:23,810
but there is this very there's often a

140
00:06:21,020 --> 00:06:25,969
trust in what you're loading is kind of

141
00:06:23,810 --> 00:06:28,550
telling you what it needs where it

142
00:06:25,970 --> 00:06:31,790
should be loaded or how big it is and

143
00:06:28,550 --> 00:06:33,710
it's up to the boob learner to know if

144
00:06:31,790 --> 00:06:36,590
that interferes with anything

145
00:06:33,710 --> 00:06:40,430
it already has set up in memory and like

146
00:06:36,590 --> 00:06:42,830
in this case it clearly doesn't but if

147
00:06:40,430 --> 00:06:46,610
we start thinking of regions as tight

148
00:06:42,830 --> 00:06:49,880
objects taking them we could write

149
00:06:46,610 --> 00:06:51,650
policy that works on that level I mean

150
00:06:49,880 --> 00:06:53,300
can you I can't imagine putting little

151
00:06:51,650 --> 00:06:55,700
types in here you know programming

152
00:06:53,300 --> 00:06:58,400
language that somehow prevents you know

153
00:06:55,700 --> 00:06:59,870
the region of memory with registers be

154
00:06:58,400 --> 00:07:02,450
overridden by this particular thing you

155
00:06:59,870 --> 00:07:07,780
have to really do a checking no packages

156
00:07:02,450 --> 00:07:10,880
and so forth so this is where I just

157
00:07:07,780 --> 00:07:14,030
speak a little of some of my thesis work

158
00:07:10,880 --> 00:07:16,760
I called it right region based right

159
00:07:14,030 --> 00:07:18,890
access control and I said writes the

160
00:07:16,760 --> 00:07:21,170
word right a lot it could be any memory

161
00:07:18,890 --> 00:07:24,680
operation so that I think is done right

162
00:07:21,170 --> 00:07:26,750
since thesis and then so this components

163
00:07:24,680 --> 00:07:29,660
of doing a policy based on beaches and

164
00:07:26,750 --> 00:07:32,600
objects regions are types are in sub

165
00:07:29,660 --> 00:07:35,450
stages distinct phases of execution and

166
00:07:32,600 --> 00:07:37,910
the memory regions themselves and how

167
00:07:35,450 --> 00:07:41,120
they're expected to be used during that

168
00:07:37,910 --> 00:07:43,540
particular sub stage I never showed you

169
00:07:41,120 --> 00:07:46,670
this but when you start thinking about

170
00:07:43,540 --> 00:07:49,690
software in this way you start thinking

171
00:07:46,670 --> 00:07:51,920
and the bigger picture of policies like

172
00:07:49,690 --> 00:07:52,990
doing this you know he jumps into this

173
00:07:51,920 --> 00:07:54,310
piece of

174
00:07:52,990 --> 00:07:56,500
and I know it's gonna start off with

175
00:07:54,310 --> 00:07:59,020
bookkeeping therefore it should not

176
00:07:56,500 --> 00:08:01,599
write to you know these particular areas

177
00:07:59,020 --> 00:08:05,289
of memory that may not have any fat in

178
00:08:01,599 --> 00:08:08,319
store or may not or be habit code itself

179
00:08:05,289 --> 00:08:11,949
that's being executed so there's like

180
00:08:08,319 --> 00:08:14,319
that phase and then suddenly it's you

181
00:08:11,949 --> 00:08:17,470
know it enables some external memory and

182
00:08:14,319 --> 00:08:19,509
it has space for a stack and now you

183
00:08:17,470 --> 00:08:21,069
have this new phase of execution of

184
00:08:19,509 --> 00:08:23,830
course this is like a hypothetical one

185
00:08:21,069 --> 00:08:27,009
but you know I'm kind of summarizing

186
00:08:23,830 --> 00:08:29,289
what I see often and boobers you know

187
00:08:27,009 --> 00:08:32,979
that will be ready and to give this

188
00:08:29,289 --> 00:08:34,449
space where there's new regions of Mary

189
00:08:32,979 --> 00:08:37,360
and new policies that you can add to

190
00:08:34,450 --> 00:08:39,610
that after that you'll have maybe be

191
00:08:37,360 --> 00:08:42,430
loading the target and so

192
00:08:39,610 --> 00:08:43,539
we wanted to write to other sensitive

193
00:08:42,429 --> 00:08:45,729
regions in February

194
00:08:43,539 --> 00:08:47,770
other than that region for the future

195
00:08:45,730 --> 00:08:50,530
substage that target image is being

196
00:08:47,770 --> 00:08:53,829
copied and then there you know some

197
00:08:50,530 --> 00:08:56,140
success you know it succeeded

198
00:08:53,830 --> 00:08:58,590
some success sub stage where it's like

199
00:08:56,140 --> 00:09:03,160
ready to just jump into that next global

200
00:08:58,590 --> 00:09:04,630
stage of booth and this is you don't

201
00:09:03,160 --> 00:09:07,150
need to read this but like I'm just

202
00:09:04,630 --> 00:09:09,010
thinking how to legal memory basing the

203
00:09:07,150 --> 00:09:12,490
substance the luck column would be like

204
00:09:09,010 --> 00:09:14,439
the initial bookkeeping sub stage where

205
00:09:12,490 --> 00:09:16,150
it just as a system registers and then

206
00:09:14,440 --> 00:09:19,260
it gets into this next up stage where

207
00:09:16,150 --> 00:09:22,120
there's some you know memory that's been

208
00:09:19,260 --> 00:09:24,580
enabled so you can start reading writing

209
00:09:22,120 --> 00:09:27,880
more places and then it's final sub

210
00:09:24,580 --> 00:09:29,380
stage where it's actually or that's not

211
00:09:27,880 --> 00:09:29,980
the final but that's the loading wrong

212
00:09:29,380 --> 00:09:32,050
word

213
00:09:29,980 --> 00:09:34,960
you still have these labels on there but

214
00:09:32,050 --> 00:09:37,120
you can't necessarily rights to certain

215
00:09:34,960 --> 00:09:42,310
regions because it's a different type of

216
00:09:37,120 --> 00:09:45,280
sub stage to the previously on the work

217
00:09:42,310 --> 00:09:48,310
I did to actually apply this type of

218
00:09:45,280 --> 00:09:51,130
policy to a good learner result in it is

219
00:09:48,310 --> 00:09:52,380
like the collaboration of tools and I

220
00:09:51,130 --> 00:09:55,260
have that

221
00:09:52,380 --> 00:09:58,980
I'm getting up and this is static

222
00:09:55,260 --> 00:10:00,870
analysis data then I use that to

223
00:09:58,980 --> 00:10:02,970
generate some tables that help with

224
00:10:00,870 --> 00:10:05,480
instrumentation and look for certain

225
00:10:02,970 --> 00:10:09,870
patterns in order for me to both study

226
00:10:05,480 --> 00:10:13,560
the how the bootloader executes and also

227
00:10:09,870 --> 00:10:16,220
to write a policy and enforce it or to

228
00:10:13,560 --> 00:10:19,050
write a policy and see if the bootloader

229
00:10:16,220 --> 00:10:21,090
follows my expectations of how memory is

230
00:10:19,050 --> 00:10:24,079
being used and with this particular tool

231
00:10:21,090 --> 00:10:26,730
set I focused on rights because your

232
00:10:24,080 --> 00:10:30,270
region-based right access control are

233
00:10:26,730 --> 00:10:32,430
back and I also because I was focused on

234
00:10:30,270 --> 00:10:34,350
boot loaders I wanted to meet all the

235
00:10:32,430 --> 00:10:38,010
memory rights even after really patient

236
00:10:34,350 --> 00:10:40,710
so part of this full suite is to keep

237
00:10:38,010 --> 00:10:43,950
track of what regions were relocated and

238
00:10:40,710 --> 00:10:46,110
you know calculate offsets and so forth

239
00:10:43,950 --> 00:10:47,430
so that it'll move breakpoints or you

240
00:10:46,110 --> 00:10:49,350
know when it's tracking and it knows

241
00:10:47,430 --> 00:10:52,050
there's a relocation it'll start

242
00:10:49,350 --> 00:10:54,300
listening to that region or will know to

243
00:10:52,050 --> 00:10:56,310
accurate points depending on you know

244
00:10:54,300 --> 00:10:57,810
the actual method of transportation I do

245
00:10:56,310 --> 00:10:58,888
have a method where it is there's a

246
00:10:57,810 --> 00:11:00,988
great point you never

247
00:10:58,889 --> 00:11:02,910
destruction so all those are you know

248
00:11:00,989 --> 00:11:07,679
who ones are added when there's a

249
00:11:02,910 --> 00:11:10,709
relocation so these tools is how I

250
00:11:07,679 --> 00:11:15,029
actually built a policy based on regions

251
00:11:10,709 --> 00:11:18,329
for a boot letter and so one of the

252
00:11:15,029 --> 00:11:22,619
things I did is I needed to identify all

253
00:11:18,329 --> 00:11:25,679
the the thesis where it was relocating

254
00:11:22,619 --> 00:11:28,230
winning is copying the image or like

255
00:11:25,679 --> 00:11:30,029
saying a future sub stage for you know

256
00:11:28,230 --> 00:11:33,179
medians doing the clearing attribute to

257
00:11:30,029 --> 00:11:36,569
the memory during it or copying the

258
00:11:33,179 --> 00:11:41,009
target image into a region my hypothesis

259
00:11:36,569 --> 00:11:44,099
was when this happens we'll see lots of

260
00:11:41,009 --> 00:11:46,319
men copyright operations by which I mean

261
00:11:44,100 --> 00:11:48,600
you know a sequence of adjacent fights

262
00:11:46,319 --> 00:11:50,128
were written entitled so but we were

263
00:11:48,600 --> 00:11:52,379
looking at just like the rights that

264
00:11:50,129 --> 00:11:54,839
happened it'll be you know right age

265
00:11:52,379 --> 00:11:56,939
right knee plus one right because to you

266
00:11:54,839 --> 00:11:59,459
know just sequentially and no other

267
00:11:56,939 --> 00:12:02,519
rights in between and so I I call these

268
00:11:59,459 --> 00:12:07,378
block write operations and my tools will

269
00:12:02,519 --> 00:12:09,809
track that and like the what I contained

270
00:12:07,379 --> 00:12:12,899
and the block write operation is the you

271
00:12:09,809 --> 00:12:15,419
know the the address that was the

272
00:12:12,899 --> 00:12:17,579
instruction the offset in the image

273
00:12:15,419 --> 00:12:18,540
where the instructions lay in case it

274
00:12:17,579 --> 00:12:21,989
was relocated

275
00:12:18,540 --> 00:12:23,910
to sort of understand but if we look at

276
00:12:21,990 --> 00:12:26,190
the metadata of this image we want to

277
00:12:23,910 --> 00:12:28,410
know we have the right one otherwise

278
00:12:26,190 --> 00:12:32,030
it's relocated no metadata and that

279
00:12:28,410 --> 00:12:35,569
image walrus will refer to the relocated

280
00:12:32,030 --> 00:12:37,949
address of the instruction then the

281
00:12:35,570 --> 00:12:39,990
destination of the right the number of

282
00:12:37,950 --> 00:12:41,640
bytes that we're good in and then I also

283
00:12:39,990 --> 00:12:43,980
keep track of where in the call stack

284
00:12:41,640 --> 00:12:46,620
that happens which is helpful because

285
00:12:43,980 --> 00:12:48,900
I'm starting to think now about thesis

286
00:12:46,620 --> 00:12:50,760
of operation and where you are on the

287
00:12:48,900 --> 00:12:53,130
stack helps you understand the phase of

288
00:12:50,760 --> 00:12:54,569
operation what the governor is trying to

289
00:12:53,130 --> 00:12:58,740
do so you can distinguish between

290
00:12:54,570 --> 00:13:01,800
different better copies or you know men

291
00:12:58,740 --> 00:13:03,150
copies zeros so that's the SS but none

292
00:13:01,800 --> 00:13:06,329
caught me something else

293
00:13:03,150 --> 00:13:08,040
music the ramen pot but then set to zero

294
00:13:06,330 --> 00:13:10,230
you mem said something else is probably

295
00:13:08,040 --> 00:13:13,140
for a different purpose

296
00:13:10,230 --> 00:13:16,110
so my corollary is that we should be

297
00:13:13,140 --> 00:13:18,510
able to use these block write operations

298
00:13:16,110 --> 00:13:21,180
to identify relocation pieces but also

299
00:13:18,510 --> 00:13:24,780
other sort of phases where large things

300
00:13:21,180 --> 00:13:27,120
are copied and that's what I did um

301
00:13:24,780 --> 00:13:28,439
you're not gonna like there's nothing to

302
00:13:27,120 --> 00:13:31,920
help you understand this except for my

303
00:13:28,440 --> 00:13:34,140
voice when I did the tracking I found

304
00:13:31,920 --> 00:13:36,880
there was about 4,000 write operations

305
00:13:34,140 --> 00:13:40,240
for the u.s. scale

306
00:13:36,880 --> 00:13:42,790
and when I map that into block rights I

307
00:13:40,240 --> 00:13:45,070
got 10,000 operations to sort of look

308
00:13:42,790 --> 00:13:47,949
through to figure out like what they did

309
00:13:45,070 --> 00:13:50,650
what they are for what phase it can be

310
00:13:47,950 --> 00:13:53,740
signed to and here is sort of like

311
00:13:50,650 --> 00:13:55,510
sorted them all by size the first

312
00:13:53,740 --> 00:13:59,770
columns like the number of consecutive

313
00:13:55,510 --> 00:14:03,100
price and then it's like I put the you

314
00:13:59,770 --> 00:14:05,350
know the name I then wrote the number of

315
00:14:03,100 --> 00:14:07,690
bytes at some certain address and then I

316
00:14:05,350 --> 00:14:09,400
just put the instruction that was used

317
00:14:07,690 --> 00:14:12,730
to actually write in the Vice send this

318
00:14:09,400 --> 00:14:15,220
one arm so the first one is actually 0

319
00:14:12,730 --> 00:14:17,830
to be SS region and they've got other

320
00:14:15,220 --> 00:14:20,290
significant ones you know mostly it's

321
00:14:17,830 --> 00:14:23,470
pretty significant I just can't remember

322
00:14:20,290 --> 00:14:27,610
what they all are but there is a bunch

323
00:14:23,470 --> 00:14:29,170
of MMC they got these data's did I found

324
00:14:27,610 --> 00:14:30,910
it like I don't list them all because

325
00:14:29,170 --> 00:14:33,160
they're all the same size but it's

326
00:14:30,910 --> 00:14:37,180
actually just reading the hex key card

327
00:14:33,160 --> 00:14:38,529
in chunks 512 bytes at a time of memory

328
00:14:37,180 --> 00:14:41,859
and that was interesting

329
00:14:38,529 --> 00:14:44,650
I found a region of relocation that I

330
00:14:41,860 --> 00:14:47,410
didn't know about and it turns out if

331
00:14:44,650 --> 00:14:50,650
there's a function called the news feed

332
00:14:47,410 --> 00:14:52,160
that is located is for tiny intercepts

333
00:14:50,650 --> 00:14:53,930
never actually execute

334
00:14:52,160 --> 00:14:56,449
must be some scene that's left over

335
00:14:53,930 --> 00:14:59,599
Wrexham older code that they branched

336
00:14:56,450 --> 00:15:01,400
off of the never bothered to change but

337
00:14:59,600 --> 00:15:04,790
that's like some of your location I

338
00:15:01,400 --> 00:15:07,130
didn't expect then they bit of course a

339
00:15:04,790 --> 00:15:09,439
lot of my call stacks changes here but

340
00:15:07,130 --> 00:15:11,689
this really helped me kind of zoom down

341
00:15:09,440 --> 00:15:13,880
and figure out what different faces

342
00:15:11,690 --> 00:15:16,010
there are and what happened to during

343
00:15:13,880 --> 00:15:19,040
those phases and this is just for like a

344
00:15:16,010 --> 00:15:21,920
rough idea of the static the call graph

345
00:15:19,040 --> 00:15:24,740
that I simplify is like a lot the

346
00:15:21,920 --> 00:15:27,380
different colors the villas are what I

347
00:15:24,740 --> 00:15:29,180
ended up to decline as a sub stage like

348
00:15:27,380 --> 00:15:31,820
an entry point to assess age so when

349
00:15:29,180 --> 00:15:36,260
starts enter spearing like some initial

350
00:15:31,820 --> 00:15:37,940
sub stage if you go from if you go into

351
00:15:36,260 --> 00:15:40,400
the level of it here in another sub

352
00:15:37,940 --> 00:15:42,530
stage cetera et cetera

353
00:15:40,400 --> 00:15:45,290
and then I decided this is a campaign

354
00:15:42,530 --> 00:15:47,180
sub stage and that's like a bell there

355
00:15:45,290 --> 00:15:49,969
is a jump to image which is sort of

356
00:15:47,180 --> 00:15:53,719
1860s gets the next sub stage and you

357
00:15:49,970 --> 00:15:56,030
can sort of have some some policy

358
00:15:53,720 --> 00:15:59,990
enforcement there if you want at the

359
00:15:56,030 --> 00:16:02,480
same time I was tracing the call being

360
00:15:59,990 --> 00:16:06,080
call trace of execution and you know

361
00:16:02,480 --> 00:16:08,930
every call function call and return so

362
00:16:06,080 --> 00:16:11,620
that I can start saying you know

363
00:16:08,930 --> 00:16:16,810
identify in the face

364
00:16:11,620 --> 00:16:19,900
that's that was copied and then in the

365
00:16:16,810 --> 00:16:22,150
end like this is complex because I this

366
00:16:19,900 --> 00:16:25,029
is actually what works that you did and

367
00:16:22,150 --> 00:16:27,069
this is real is this is what I ended up

368
00:16:25,029 --> 00:16:29,380
with the season is of execution and the

369
00:16:27,070 --> 00:16:31,750
policy I wrote and we can start seeing

370
00:16:29,380 --> 00:16:35,800
that beta as a bookkeeping phase Delta

371
00:16:31,750 --> 00:16:38,890
is loading things and PI as a patching

372
00:16:35,800 --> 00:16:41,229
phase and you can start seeing there is

373
00:16:38,890 --> 00:16:43,029
these different cases and during some of

374
00:16:41,230 --> 00:16:44,200
these phases there's different regions

375
00:16:43,029 --> 00:16:48,550
of memory that there's like important

376
00:16:44,200 --> 00:16:51,010
events so after UK you can't be

377
00:16:48,550 --> 00:16:53,199
competing blah blah blah finish this

378
00:16:51,010 --> 00:16:55,210
little go to speedy preclude located

379
00:16:53,200 --> 00:16:57,310
function is available but it stops

380
00:16:55,210 --> 00:17:00,190
becoming available at the next sub stage

381
00:16:57,310 --> 00:17:02,229
because it gets copied over if you can

382
00:17:00,190 --> 00:17:05,230
see what SRAM is like some external RAM

383
00:17:02,230 --> 00:17:07,209
that's initialized and you end up like

384
00:17:05,230 --> 00:17:09,010
seeing the progress that the lunar is

385
00:17:07,209 --> 00:17:10,360
better understanding it in a way that

386
00:17:09,010 --> 00:17:14,140
you can't get from just repeating the

387
00:17:10,359 --> 00:17:15,609
code in the end I want to build

388
00:17:14,140 --> 00:17:17,920
something on the clintus so the left

389
00:17:15,609 --> 00:17:19,809
side are the needs of sub stages the

390
00:17:17,920 --> 00:17:21,970
right size are how I need like different

391
00:17:19,809 --> 00:17:23,800
memory regions an edge between the two

392
00:17:21,970 --> 00:17:25,870
new means rights are allowed to that

393
00:17:23,800 --> 00:17:28,600
from that during that sub stage to that

394
00:17:25,869 --> 00:17:31,809
region so so the policy I made was not

395
00:17:28,600 --> 00:17:34,600
just allowed transitions between cases

396
00:17:31,809 --> 00:17:37,149
but also what regions can be written

397
00:17:34,600 --> 00:17:39,730
during a particular phase so when the

398
00:17:37,150 --> 00:17:42,309
phase cleared the assassins executed

399
00:17:39,730 --> 00:17:46,900
like only OBS s can be written and the

400
00:17:42,309 --> 00:17:48,300
stack when it's you know copying copy

401
00:17:46,900 --> 00:17:50,160
clock one is where that

402
00:17:48,300 --> 00:17:51,960
location happens well generally right

403
00:17:50,160 --> 00:17:56,730
take the staff into that little region

404
00:17:51,960 --> 00:17:59,400
that I call go to speed so back to this

405
00:17:56,730 --> 00:18:01,380
email client that I kind of for this is

406
00:17:59,400 --> 00:18:03,270
potentially vulnerable you know client I

407
00:18:01,380 --> 00:18:07,050
think it's probably horrible we can

408
00:18:03,270 --> 00:18:09,060
think about pathways and memory there's

409
00:18:07,050 --> 00:18:11,370
the application for it's there would be

410
00:18:09,060 --> 00:18:13,500
the library and let's just say there's

411
00:18:11,370 --> 00:18:16,770
something like like period animals the

412
00:18:13,500 --> 00:18:20,400
key and let the keel isn't its static

413
00:18:16,770 --> 00:18:23,340
data the stock of the heap and you know

414
00:18:20,400 --> 00:18:25,950
bikini you wanted to eat sir right to

415
00:18:23,340 --> 00:18:28,290
the key area but when it's processing

416
00:18:25,950 --> 00:18:32,040
inputs it shouldn't but the nice thing

417
00:18:28,290 --> 00:18:35,129
and this is word this project that I

418
00:18:32,040 --> 00:18:37,260
worked on old elf back comes in is we

419
00:18:35,130 --> 00:18:40,230
realized that a lot of what happens in

420
00:18:37,260 --> 00:18:42,900
memory is based on how the file looks

421
00:18:40,230 --> 00:18:45,150
like this I mean is a bunch of alfetta

422
00:18:42,900 --> 00:18:47,490
data but in it like I'm just assuming

423
00:18:45,150 --> 00:18:50,310
that this is statically compiled there

424
00:18:47,490 --> 00:18:54,210
is like a chunk of region that

425
00:18:50,310 --> 00:18:55,620
semantically you know equivalents of all

426
00:18:54,210 --> 00:18:57,510
this if we think that of course

427
00:18:55,620 --> 00:19:01,679
granularity at least so there's like

428
00:18:57,510 --> 00:19:02,970
heat code for the application data of

429
00:19:01,680 --> 00:19:05,220
the application but then there's a death

430
00:19:02,970 --> 00:19:08,550
different region that's dia for the key

431
00:19:05,220 --> 00:19:10,680
library and if you get that and start

432
00:19:08,550 --> 00:19:13,919
thinking about these out sections as

433
00:19:10,680 --> 00:19:17,580
regions region is being pipes type speed

434
00:19:13,920 --> 00:19:20,650
policy yeah the ELCA which is very

435
00:19:17,580 --> 00:19:24,280
related to my thesis work that work

436
00:19:20,650 --> 00:19:26,470
but this works uses sections in the elf

437
00:19:24,280 --> 00:19:29,440
binary as files the objects and it has

438
00:19:26,470 --> 00:19:31,360
tools fill value to define sections few

439
00:19:29,440 --> 00:19:34,260
sections for policy objects so you can

440
00:19:31,360 --> 00:19:36,729
have a fine granularity if you want

441
00:19:34,260 --> 00:19:38,590
always say that certain Dino live in

442
00:19:36,730 --> 00:19:40,600
certain sections in the L file and will

443
00:19:38,590 --> 00:19:43,870
be mapped that way put on two different

444
00:19:40,600 --> 00:19:46,570
pages and the kernel will then be set up

445
00:19:43,870 --> 00:19:49,510
each table for each phase of execution

446
00:19:46,570 --> 00:19:51,429
so during the authentication phase that

447
00:19:49,510 --> 00:19:53,890
each table will only allow will allow

448
00:19:51,430 --> 00:19:56,380
keys to be written but during the

449
00:19:53,890 --> 00:19:59,309
process input phase it does not have

450
00:19:56,380 --> 00:20:02,110
write access or bead access to the keys

451
00:19:59,309 --> 00:20:04,178
and so this alpha work has been

452
00:20:02,110 --> 00:20:07,770
championed by 70 brightest of Julian

453
00:20:04,179 --> 00:20:11,620
finger from a frontal catch for x86

454
00:20:07,770 --> 00:20:16,480
matthew maxwell Kumu let me do some work

455
00:20:11,620 --> 00:20:20,500
at gnarrk he wrote in patch for forearm

456
00:20:16,480 --> 00:20:22,210
and friend of left forearm and so I've

457
00:20:20,500 --> 00:20:26,740
no idea what kind of is but some final

458
00:20:22,210 --> 00:20:30,970
box how do we charge software when it's

459
00:20:26,740 --> 00:20:33,070
so complex and when these behavioral

460
00:20:30,970 --> 00:20:35,590
constraints we have on it don't directly

461
00:20:33,070 --> 00:20:37,629
hood it's like high level attention that

462
00:20:35,590 --> 00:20:39,280
were most interested in you do not want

463
00:20:37,630 --> 00:20:41,830
these kids to be ridden during that

464
00:20:39,280 --> 00:20:43,928
phase it seems pretty important I mean a

465
00:20:41,830 --> 00:20:46,870
lot of the constraints we have now are

466
00:20:43,929 --> 00:20:55,150
very much looking at buffer overflows

467
00:20:46,870 --> 00:20:56,860
and sorry cliff low integrity and other

468
00:20:55,150 --> 00:20:57,690
things and that it is like important

469
00:20:56,860 --> 00:21:00,330
that

470
00:20:57,690 --> 00:21:02,399
helps like lower-class packs but we

471
00:21:00,330 --> 00:21:04,769
think about the software as like an

472
00:21:02,399 --> 00:21:07,279
entity upon itself that is different

473
00:21:04,769 --> 00:21:10,019
from all other software not really but

474
00:21:07,279 --> 00:21:11,879
if you just look look at the attentions

475
00:21:10,019 --> 00:21:14,850
of the software if you want to be able

476
00:21:11,879 --> 00:21:16,559
to really enforce those intentions so as

477
00:21:14,850 --> 00:21:19,259
the agents as types we have this

478
00:21:16,559 --> 00:21:22,168
arbitrary object regularity in our

479
00:21:19,259 --> 00:21:24,389
policy and you can intuitively include

480
00:21:22,169 --> 00:21:27,090
some intended behavior with these phases

481
00:21:24,389 --> 00:21:28,979
in these regions and they kind of like

482
00:21:27,090 --> 00:21:30,360
to think of it as a policy sweet spot

483
00:21:28,980 --> 00:21:34,049
late and Commedia will find something

484
00:21:30,360 --> 00:21:36,928
even sweeter but it's very much it works

485
00:21:34,049 --> 00:21:39,658
on human-like understanding because it's

486
00:21:36,929 --> 00:21:42,059
easily applied to modules different

487
00:21:39,659 --> 00:21:44,519
libraries are fairly easily like their

488
00:21:42,059 --> 00:21:46,049
own region and they often have a

489
00:21:44,519 --> 00:21:50,340
different trust level from the

490
00:21:46,049 --> 00:21:53,129
application itself and reintroduce some

491
00:21:50,340 --> 00:21:55,980
of the the terms that I tried to present

492
00:21:53,129 --> 00:21:58,230
and trying to champion a little so the

493
00:21:55,980 --> 00:22:01,559
arc black is the region is access

494
00:21:58,230 --> 00:22:04,440
control scheme that has more theoretical

495
00:22:01,559 --> 00:22:06,928
grind up but also test tools that will

496
00:22:04,440 --> 00:22:09,629
actually fill the call scene enforce a

497
00:22:06,929 --> 00:22:13,860
policy if you want a product in GDP that

498
00:22:09,629 --> 00:22:16,259
is out back is the kernel patches that

499
00:22:13,860 --> 00:22:18,959
does that uses the elf file as a way to

500
00:22:16,259 --> 00:22:20,549
include policy and then fiddle with the

501
00:22:18,960 --> 00:22:22,590
tools in a group for foo letters

502
00:22:20,549 --> 00:22:24,580
instrumenting them and also for applying

503
00:22:22,590 --> 00:22:28,178
under finding of

504
00:22:24,580 --> 00:22:31,779
right a region based policy and applying

505
00:22:28,179 --> 00:22:33,850
that as an enforcement or just know if

506
00:22:31,779 --> 00:22:36,640
you want to see you can have it not

507
00:22:33,850 --> 00:22:39,340
actually stop the code execution you can

508
00:22:36,640 --> 00:22:42,179
just have it you know label events when

509
00:22:39,340 --> 00:22:47,889
they happen get don't follow the policy

510
00:22:42,179 --> 00:22:49,899
so thank you for its talk you can find

511
00:22:47,890 --> 00:22:52,000
more details on our block on my thesis

512
00:22:49,899 --> 00:22:53,768
at Tech region stuff comment and health

513
00:22:52,000 --> 00:22:58,330
fact that health back at work where you

514
00:22:53,769 --> 00:23:02,799
can get links to source code to my

515
00:22:58,330 --> 00:23:08,139
research advisor certain gratis work

516
00:23:02,799 --> 00:23:12,399
without too but I met narc now so thank

517
00:23:08,139 --> 00:23:14,379
you I will post slides on Twitter so if

518
00:23:12,399 --> 00:23:16,000
you follow me you can get that I'm sure

519
00:23:14,380 --> 00:23:19,570
someone else in the conference will

520
00:23:16,000 --> 00:23:21,909
between the link I will add more some

521
00:23:19,570 --> 00:23:23,710
references to it so you can see some of

522
00:23:21,909 --> 00:23:26,860
the work that I've cited including Penn

523
00:23:23,710 --> 00:23:31,000
State so that's all I have do you have

524
00:23:26,860 --> 00:23:33,908
any questions okay well earth person

525
00:23:31,000 --> 00:23:37,649
talks a questions gets the deal this

526
00:23:33,909 --> 00:23:37,649
computer book 4.0

527
00:23:39,450 --> 00:23:54,480
okay so okay so what we need this idea

528
00:23:51,570 --> 00:23:57,389
of defining the process of the stages

529
00:23:54,480 --> 00:23:59,120
and then changing the Commission's

530
00:23:57,390 --> 00:24:03,270
availability point

531
00:23:59,120 --> 00:24:06,500
could this be easily ported to desktop

532
00:24:03,270 --> 00:24:13,530
software or even like the PSP lifestyle

533
00:24:06,500 --> 00:24:18,450
so the question was is this style of the

534
00:24:13,530 --> 00:24:21,530
region's and the policy objects and the

535
00:24:18,450 --> 00:24:25,100
phases even forced by that can that be

536
00:24:21,530 --> 00:24:28,590
coordinating delete desktop pictures

537
00:24:25,100 --> 00:24:34,020
that's your question yeah okay yes it

538
00:24:28,590 --> 00:24:36,540
next well yes but Asterix so Outback is

539
00:24:34,020 --> 00:24:39,720
exactly for that it works on user land

540
00:24:36,540 --> 00:24:42,030
applications it's tricky to work with

541
00:24:39,720 --> 00:24:44,400
now like it really needs some library

542
00:24:42,030 --> 00:24:47,730
support to do well and you just don't

543
00:24:44,400 --> 00:24:50,730
have like the like developer power to

544
00:24:47,730 --> 00:24:53,910
get all that but like if you have the

545
00:24:50,730 --> 00:24:56,340
right tools I think it would be it would

546
00:24:53,910 --> 00:24:58,290
be a lot easier right now we sort of

547
00:24:56,340 --> 00:25:00,689
have to reverse engineer some of Lipsy

548
00:24:58,290 --> 00:25:03,280
to figure out how to include that in our

549
00:25:00,690 --> 00:25:06,760
policy there's a lot of floating stuff

550
00:25:03,280 --> 00:25:09,250
that does unexpected things and yeah

551
00:25:06,760 --> 00:25:11,350
there's a lot of technical things we

552
00:25:09,250 --> 00:25:15,190
need to deal with but I think the theory

553
00:25:11,350 --> 00:25:19,570
of it is sound we applied this to it

554
00:25:15,190 --> 00:25:22,210
there was a it OpenSSL about a thing and

555
00:25:19,570 --> 00:25:25,000
this was documented in an earlier talk I

556
00:25:22,210 --> 00:25:28,420
think at blackhat and so the health pack

557
00:25:25,000 --> 00:25:30,310
was used to kind of over apply at this

558
00:25:28,420 --> 00:25:34,450
policy based in regions over the

559
00:25:30,310 --> 00:25:39,790
existing open SSL library in order to

560
00:25:34,450 --> 00:25:40,900
like not let that vote or whatever the

561
00:25:39,790 --> 00:25:42,639
word is

562
00:25:40,900 --> 00:25:44,680
so that was applied to existing code

563
00:25:42,640 --> 00:25:46,210
using this sort of you should never be

564
00:25:44,680 --> 00:25:48,550
able to beat this region of memory

565
00:25:46,210 --> 00:25:50,470
during this time of execution and it was

566
00:25:48,550 --> 00:25:53,260
a very coarsely grant policy because

567
00:25:50,470 --> 00:25:55,920
focus specifically on that bug but it

568
00:25:53,260 --> 00:25:55,920
worked

569
00:25:56,530 --> 00:26:01,950
anyone else yes

570
00:26:14,090 --> 00:26:21,510
yeah so question was by being able to

571
00:26:18,120 --> 00:26:36,449
read policy and have that enforced or

572
00:26:21,510 --> 00:26:43,470
logs you can detect bugs I haven't done

573
00:26:36,450 --> 00:26:45,120
that but I mean I'm sorry but I'm

574
00:26:43,470 --> 00:26:46,260
already running in sort of a debugging

575
00:26:45,120 --> 00:26:48,379
environment so you could probably

576
00:26:46,260 --> 00:26:54,180
compile it in the code coverage

577
00:26:48,380 --> 00:26:56,010
libraries I build that in I have to

578
00:26:54,180 --> 00:26:59,670
think a little bit more how to integrate

579
00:26:56,010 --> 00:27:01,410
it all but if I because I was looking at

580
00:26:59,670 --> 00:27:06,180
boot loaders I was the only Sunday

581
00:27:01,410 --> 00:27:07,650
passed through but if yeah I think that

582
00:27:06,180 --> 00:27:11,090
could be done and it's simply a really

583
00:27:07,650 --> 00:27:19,020
interesting use for it as like an actual

584
00:27:11,090 --> 00:27:20,730
debugging any other questions in the

585
00:27:19,020 --> 00:27:22,889
back yeah I'm just trying to wrap my

586
00:27:20,730 --> 00:27:24,270
head around how you apply these policies

587
00:27:22,890 --> 00:27:27,180
I mean how much do you get for free

588
00:27:24,270 --> 00:27:31,340
based on which you can get things like

589
00:27:27,180 --> 00:27:31,340
that like the example you gave

590
00:27:33,190 --> 00:27:36,279
[Music]

591
00:27:37,590 --> 00:27:44,699
how much work is it to build a policy

592
00:27:39,539 --> 00:27:48,390
well in a little bit and how its applied

593
00:27:44,700 --> 00:27:52,230
it also depends limits not worth to and

594
00:27:48,390 --> 00:27:54,269
how its laid out so way I had a very

595
00:27:52,230 --> 00:27:56,789
specific idea of the type of policy I

596
00:27:54,269 --> 00:27:58,760
wanted to planet to a boot letter so I

597
00:27:56,789 --> 00:28:01,500
was just looking for her youth the

598
00:27:58,760 --> 00:28:03,120
regions of memory being ridden so there

599
00:28:01,500 --> 00:28:05,340
was the stage of the instrumenting it

600
00:28:03,120 --> 00:28:08,250
and getting that information and I think

601
00:28:05,340 --> 00:28:10,678
I did the Goethe policy for that and

602
00:28:08,250 --> 00:28:13,289
kind of had to fix it multiple times cuz

603
00:28:10,679 --> 00:28:15,659
I find new things I probably did like

604
00:28:13,289 --> 00:28:18,840
maybe ten phases of like fixing up the

605
00:28:15,659 --> 00:28:21,750
policy to try to get something that

606
00:28:18,840 --> 00:28:23,730
worked and then I find it I that's how I

607
00:28:21,750 --> 00:28:26,340
found all the staff changes I can notice

608
00:28:23,730 --> 00:28:27,929
them before so I yeah so it can be

609
00:28:26,340 --> 00:28:29,668
tricky and I was working with existing

610
00:28:27,929 --> 00:28:32,010
code and I cashed it a little bit to

611
00:28:29,669 --> 00:28:34,200
make it easier for me so there's more of

612
00:28:32,010 --> 00:28:36,330
like when the face was a new face

613
00:28:34,200 --> 00:28:38,850
eccentric we knew would never exit so I

614
00:28:36,330 --> 00:28:40,379
had like no I in case if you think all

615
00:28:38,850 --> 00:28:43,230
something in return

616
00:28:40,380 --> 00:28:45,779
that was just for little insurance for

617
00:28:43,230 --> 00:28:48,269
me but like who that was just for

618
00:28:45,779 --> 00:28:50,279
theoretical side of knowing that being

619
00:28:48,269 --> 00:28:52,380
able to say people never able don't

620
00:28:50,279 --> 00:28:56,100
really promise forward through this set

621
00:28:52,380 --> 00:28:57,630
of pages but I think with more complex

622
00:28:56,100 --> 00:29:00,510
soccer I wasn't the one that did the

623
00:28:57,630 --> 00:29:02,190
OpenSSL we think of as open SSL so I'm

624
00:29:00,510 --> 00:29:03,720
not sure how long that took but you

625
00:29:02,190 --> 00:29:06,419
certainly have to understand the work

626
00:29:03,720 --> 00:29:08,639
the software its if you're a developer

627
00:29:06,419 --> 00:29:11,200
for it like that's the idea of elba app

628
00:29:08,639 --> 00:29:12,850
is like the developers can bet

629
00:29:11,200 --> 00:29:13,900
to this like higher granularity and

630
00:29:12,850 --> 00:29:15,850
something another commode a little

631
00:29:13,900 --> 00:29:20,110
better if you're looking at the new code

632
00:29:15,850 --> 00:29:23,980
it's certainly harder anyone else

633
00:29:20,110 --> 00:29:25,979
I think that's time thank you for waking

634
00:29:23,980 --> 00:29:32,809
up

635
00:29:25,980 --> 00:29:32,809
[Applause]

