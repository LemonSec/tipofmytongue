1
00:00:00,030 --> 00:00:06,990
so hi my name<font color="#CCCCCC"> is Sam Rubenstein I'm a</font>

2
00:00:03,240 --> 00:00:09,090
security analyst and hacker<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> cisco</font>

3
00:00:06,990 --> 00:00:13,440
security<font color="#E5E5E5"> threat analysis and reverse</font>

4
00:00:09,090 --> 00:00:16,410
engineering<font color="#E5E5E5"> center in israel our</font><font color="#CCCCCC"> Center</font>

5
00:00:13,440 --> 00:00:19,470
performs security evaluations of<font color="#CCCCCC"> cisco</font>

6
00:00:16,410 --> 00:00:22,560
and<font color="#CCCCCC"> third-party products including</font><font color="#E5E5E5"> the</font>

7
00:00:19,470 --> 00:00:25,349
<font color="#E5E5E5">work for external customers</font><font color="#CCCCCC"> we most</font>

8
00:00:22,560 --> 00:00:29,009
evaluate the<font color="#E5E5E5"> security of blackbox</font>

9
00:00:25,350 --> 00:00:30,900
devices embedded blackbox devices<font color="#E5E5E5"> using</font>

10
00:00:29,010 --> 00:00:33,120
a black box model so we don't have

11
00:00:30,900 --> 00:00:34,949
access<font color="#CCCCCC"> to source code or</font><font color="#E5E5E5"> architectural</font>

12
00:00:33,120 --> 00:00:37,949
documentation<font color="#E5E5E5"> or anything like that</font><font color="#CCCCCC"> we</font>

13
00:00:34,950 --> 00:00:44,309
basically<font color="#CCCCCC"> just get boxes</font><font color="#E5E5E5"> and are told to</font>

14
00:00:37,950 --> 00:00:47,090
hack them let's start<font color="#CCCCCC"> off today with</font>

15
00:00:44,309 --> 00:00:47,089
<font color="#CCCCCC">quick demo</font>

16
00:00:51,750 --> 00:00:56,230
what we're going to do is I have here on

17
00:00:54,100 --> 00:01:01,030
my<font color="#E5E5E5"> desktop</font><font color="#CCCCCC"> the Twitter application</font>

18
00:00:56,230 --> 00:01:04,660
running<font color="#E5E5E5"> okay and I'm going to run</font><font color="#CCCCCC"> Freda</font>

19
00:01:01,030 --> 00:01:07,119
<font color="#E5E5E5">trace on the Twitter</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font>

20
00:01:04,660 --> 00:01:12,009
<font color="#E5E5E5">tell</font><font color="#CCCCCC"> that I'm interested</font><font color="#E5E5E5"> in all</font>

21
00:01:07,119 --> 00:01:12,700
functions which begin with<font color="#E5E5E5"> open it's</font>

22
00:01:12,010 --> 00:01:14,440
going<font color="#CCCCCC"> to tell</font><font color="#E5E5E5"> me that</font><font color="#CCCCCC"> they're</font>

23
00:01:12,700 --> 00:01:16,660
auto-generated handlers for<font color="#E5E5E5"> a bunch of</font>

24
00:01:14,440 --> 00:01:19,720
<font color="#E5E5E5">different functions</font><font color="#CCCCCC"> okay and then</font><font color="#E5E5E5"> that</font>

25
00:01:16,660 --> 00:01:22,149
<font color="#CCCCCC">it started</font><font color="#E5E5E5"> tracing 27 functions if I now</font>

26
00:01:19,720 --> 00:01:26,460
<font color="#CCCCCC">go to Twitter</font><font color="#E5E5E5"> and pull down to refresh</font>

27
00:01:22,150 --> 00:01:28,720
the list<font color="#E5E5E5"> I see</font><font color="#CCCCCC"> a whole bunch</font><font color="#E5E5E5"> of opens</font>

28
00:01:26,460 --> 00:01:30,550
there are different colors<font color="#CCCCCC"> because each</font>

29
00:01:28,720 --> 00:01:32,110
thread has a different color<font color="#E5E5E5"> color</font>

30
00:01:30,550 --> 00:01:35,380
coding so that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> easily pick out</font>

31
00:01:32,110 --> 00:01:37,690
which<font color="#E5E5E5"> function</font><font color="#CCCCCC"> call happened on which</font>

32
00:01:35,380 --> 00:01:41,670
thread we can see there's a whole<font color="#E5E5E5"> bunch</font>

33
00:01:37,690 --> 00:01:41,670
of different<font color="#CCCCCC"> open function</font><font color="#E5E5E5"> calls here</font>

34
00:01:45,010 --> 00:01:49,540
what<font color="#E5E5E5"> actually happened is that</font><font color="#CCCCCC"> Freda</font>

35
00:01:46,840 --> 00:01:51,070
generated underscore underscore handlers

36
00:01:49,540 --> 00:01:53,890
directory<font color="#E5E5E5"> okay</font>

37
00:01:51,070 --> 00:01:55,990
within which there<font color="#E5E5E5"> are two sub</font>

38
00:01:53,890 --> 00:01:59,500
directories for each of these modules

39
00:01:55,990 --> 00:02:03,160
<font color="#E5E5E5">which we hooked and if we look at</font><font color="#CCCCCC"> for</font>

40
00:01:59,500 --> 00:02:05,680
example the<font color="#CCCCCC"> libs system V die lib</font><font color="#E5E5E5"> we'll</font>

41
00:02:03,160 --> 00:02:07,630
see<font color="#E5E5E5"> that there are JavaScript files for</font>

42
00:02:05,680 --> 00:02:21,880
each of the functions that<font color="#E5E5E5"> will hook</font><font color="#CCCCCC"> to</font>

43
00:02:07,630 --> 00:02:25,209
<font color="#E5E5E5">bacteria so if we go on edits if we edit</font>

44
00:02:21,880 --> 00:02:27,130
the open<font color="#E5E5E5"> J's handler what we see is that</font>

45
00:02:25,210 --> 00:02:29,740
<font color="#E5E5E5">there's a JavaScript object here defined</font>

46
00:02:27,130 --> 00:02:31,390
<font color="#E5E5E5">okay and there's a whole bunch</font><font color="#CCCCCC"> of</font>

47
00:02:29,740 --> 00:02:32,770
comments<font color="#E5E5E5"> so that you can easily get</font>

48
00:02:31,390 --> 00:02:33,880
started with this stuff but that's<font color="#E5E5E5"> not</font>

49
00:02:32,770 --> 00:02:35,890
really important<font color="#E5E5E5"> the moment what's</font>

50
00:02:33,880 --> 00:02:38,530
important to notice<font color="#E5E5E5"> there's on enter</font>

51
00:02:35,890 --> 00:02:42,369
function defined<font color="#E5E5E5"> which receives blog</font>

52
00:02:38,530 --> 00:02:44,890
args<font color="#E5E5E5"> and state and that on enter</font>

53
00:02:42,370 --> 00:02:48,310
function just logs<font color="#E5E5E5"> open with empty</font>

54
00:02:44,890 --> 00:02:52,290
braces<font color="#E5E5E5"> and there's also an</font><font color="#CCCCCC"> only function</font>

55
00:02:48,310 --> 00:02:57,459
which<font color="#E5E5E5"> gets log</font><font color="#CCCCCC"> rat Ville and</font><font color="#E5E5E5"> States okay</font>

56
00:02:52,290 --> 00:03:00,489
if we come<font color="#E5E5E5"> here and say we know that the</font>

57
00:02:57,459 --> 00:03:07,540
open<font color="#E5E5E5"> POSIX call has a first argument</font>

58
00:03:00,489 --> 00:03:09,580
<font color="#E5E5E5">which is the the file name with the file</font>

59
00:03:07,540 --> 00:03:13,239
being<font color="#E5E5E5"> opens so let's try and print that</font>

60
00:03:09,580 --> 00:03:15,940
information we can<font color="#CCCCCC"> just go args</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> okay</font>

61
00:03:13,239 --> 00:03:20,200
to print the first<font color="#E5E5E5"> arguments we'll save</font>

62
00:03:15,940 --> 00:03:22,269
that<font color="#E5E5E5"> and one thing</font><font color="#CCCCCC"> that's pretty cool</font><font color="#E5E5E5"> by</font>

63
00:03:20,200 --> 00:03:24,190
<font color="#CCCCCC">Freda</font><font color="#E5E5E5"> is that it automatically watches</font>

64
00:03:22,269 --> 00:03:25,570
the files that you<font color="#E5E5E5"> that it's generated</font>

65
00:03:24,190 --> 00:03:29,260
so you don't have<font color="#E5E5E5"> to worry about</font>

66
00:03:25,570 --> 00:03:31,390
restarting<font color="#CCCCCC"> the trace you can just pull</font>

67
00:03:29,260 --> 00:03:34,630
down<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Twitter again</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> it to</font>

68
00:03:31,390 --> 00:03:36,458
refresh and we get new information<font color="#E5E5E5"> we</font>

69
00:03:34,630 --> 00:03:38,890
now get the pointer<font color="#CCCCCC"> printed</font><font color="#E5E5E5"> for each of</font>

70
00:03:36,459 --> 00:03:39,880
the open calls<font color="#E5E5E5"> pointers are great but</font>

71
00:03:38,890 --> 00:03:43,329
<font color="#E5E5E5">they're not really that</font><font color="#CCCCCC"> easy to</font>

72
00:03:39,880 --> 00:03:48,430
<font color="#E5E5E5">understand so let's see if we can get</font>

73
00:03:43,330 --> 00:03:50,500
the<font color="#CCCCCC"> actual</font><font color="#E5E5E5"> data for that pointer what we</font>

74
00:03:48,430 --> 00:03:53,590
can do is is that<font color="#CCCCCC"> we need to</font><font color="#E5E5E5"> read the</font>

75
00:03:50,500 --> 00:03:56,470
<font color="#CCCCCC">memory at that pointer we know that the</font>

76
00:03:53,590 --> 00:03:58,440
pointer is a pointer to<font color="#E5E5E5"> a utf-8 string</font>

77
00:03:56,470 --> 00:04:07,410
so<font color="#E5E5E5"> we can use the memory</font>

78
00:03:58,440 --> 00:04:10,620
<font color="#CCCCCC">dot read</font><font color="#E5E5E5"> utf-8</font><font color="#CCCCCC"> string function to read</font>

79
00:04:07,410 --> 00:04:16,260
the memory<font color="#E5E5E5"> at arc zero if we save this</font>

80
00:04:10,620 --> 00:04:18,989
again<font color="#E5E5E5"> and then pull down once more we</font>

81
00:04:16,260 --> 00:04:21,599
now get the full path name of the files

82
00:04:18,988 --> 00:04:24,419
being opened we can<font color="#CCCCCC"> already see that</font>

83
00:04:21,600 --> 00:04:27,140
<font color="#E5E5E5">Twitter is using crashlytics for crash</font>

84
00:04:24,420 --> 00:04:32,280
analysis and if we wait<font color="#CCCCCC"> a bit we'll see</font>

85
00:04:27,140 --> 00:04:34,409
<font color="#E5E5E5">carob seed caching of various images and</font>

86
00:04:32,280 --> 00:04:35,969
stuff<font color="#E5E5E5"> like that so</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> immediately</font>

87
00:04:34,410 --> 00:04:37,620
tell a whole bunch of stuff<font color="#CCCCCC"> about our</font>

88
00:04:35,970 --> 00:04:39,540
<font color="#CCCCCC">application</font><font color="#E5E5E5"> just from hooking</font><font color="#CCCCCC"> in one</font>

89
00:04:37,620 --> 00:04:42,410
open call<font color="#E5E5E5"> and making the</font><font color="#CCCCCC"> simple</font>

90
00:04:39,540 --> 00:04:45,180
<font color="#E5E5E5">JavaScript change the open handler</font>

91
00:04:42,410 --> 00:04:51,180
what's<font color="#E5E5E5"> even cooler is that I have here</font>

92
00:04:45,180 --> 00:04:57,270
<font color="#E5E5E5">an iPhone attached</font><font color="#CCCCCC"> okay and if I stop</font>

93
00:04:51,180 --> 00:05:00,480
<font color="#E5E5E5">the tracing and instead</font><font color="#CCCCCC"> of saying</font><font color="#E5E5E5"> Frida</font>

94
00:04:57,270 --> 00:05:02,370
to<font color="#E5E5E5"> a traitor tree to trace Twitter</font><font color="#CCCCCC"> - I</font>

95
00:05:00,480 --> 00:05:03,900
open star which<font color="#E5E5E5"> traces the Twitter</font>

96
00:05:02,370 --> 00:05:08,280
<font color="#CCCCCC">application running on my desktop</font><font color="#E5E5E5"> on my</font>

97
00:05:03,900 --> 00:05:14,580
laptop<font color="#CCCCCC"> if I add</font><font color="#E5E5E5"> the - you arguments</font><font color="#CCCCCC"> okay</font>

98
00:05:08,280 --> 00:05:16,320
for<font color="#E5E5E5"> USB it now traces the Twitter</font>

99
00:05:14,580 --> 00:05:20,930
application running on my iPhone

100
00:05:16,320 --> 00:05:24,030
if I pull down here we'll see the same

101
00:05:20,930 --> 00:05:25,560
scripts being used on a completely

102
00:05:24,030 --> 00:05:29,119
<font color="#E5E5E5">different platform complete different</font>

103
00:05:25,560 --> 00:05:29,120
application completed upon platform

104
00:05:36,650 --> 00:05:45,989
so what just<font color="#CCCCCC"> happened</font><font color="#E5E5E5"> what did we</font><font color="#CCCCCC"> just</font>

105
00:05:41,790 --> 00:05:48,480
see we saw that using<font color="#CCCCCC"> Freda we can trace</font>

106
00:05:45,990 --> 00:05:51,570
an instrument<font color="#E5E5E5"> arbitrary and functions in</font>

107
00:05:48,480 --> 00:05:54,930
processes we can<font color="#E5E5E5"> attach on enter and</font><font color="#CCCCCC"> on</font>

108
00:05:51,570 --> 00:05:56,460
leave handlers to functions on enter

109
00:05:54,930 --> 00:05:58,050
will recur before they<font color="#E5E5E5"> look at the</font>

110
00:05:56,460 --> 00:06:01,560
function runs and on leave<font color="#E5E5E5"> will occur</font>

111
00:05:58,050 --> 00:06:03,570
<font color="#E5E5E5">after the function is finished we can</font>

112
00:06:01,560 --> 00:06:05,070
<font color="#CCCCCC">even completely</font><font color="#E5E5E5"> replace a function with</font>

113
00:06:03,570 --> 00:06:07,860
a function of our own<font color="#E5E5E5"> a JavaScript</font>

114
00:06:05,070 --> 00:06:09,630
function<font color="#CCCCCC"> of an out of our own Freda</font>

115
00:06:07,860 --> 00:06:12,419
actually lets us also instrument<font color="#CCCCCC"> any</font>

116
00:06:09,630 --> 00:06:14,310
function in the<font color="#E5E5E5"> target process using</font>

117
00:06:12,419 --> 00:06:17,969
<font color="#CCCCCC">Freda trace we can trace Objective C</font>

118
00:06:14,310 --> 00:06:22,169
<font color="#E5E5E5">method functions methods functions class</font>

119
00:06:17,970 --> 00:06:24,000
methods instance methods we can<font color="#E5E5E5"> trace</font>

120
00:06:22,169 --> 00:06:26,669
functions by pattern like you saw we

121
00:06:24,000 --> 00:06:31,350
said open star and globbed it so that

122
00:06:26,669 --> 00:06:34,200
you could trace by a<font color="#E5E5E5"> pattern or name you</font>

123
00:06:31,350 --> 00:06:37,110
can even<font color="#E5E5E5"> specify a module and an offset</font>

124
00:06:34,200 --> 00:06:39,570
if you know the address<font color="#E5E5E5"> of a function</font>

125
00:06:37,110 --> 00:06:43,200
<font color="#E5E5E5">within module you can use</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> module and</font>

126
00:06:39,570 --> 00:06:44,849
offset<font color="#CCCCCC"> trace a function and in fact you</font>

127
00:06:43,200 --> 00:06:46,770
can<font color="#CCCCCC"> even get Frida to trance</font><font color="#E5E5E5"> to</font>

128
00:06:44,850 --> 00:06:48,660
instrument arbitrary function<font color="#CCCCCC"> dresses</font>

129
00:06:46,770 --> 00:06:52,469
<font color="#E5E5E5">sorry arbitrary instruction addresses</font>

130
00:06:48,660 --> 00:06:55,370
<font color="#E5E5E5">not just function boundaries our</font>

131
00:06:52,470 --> 00:06:58,050
instrumentation code is in JavaScript

132
00:06:55,370 --> 00:07:00,930
<font color="#E5E5E5">this JavaScript actually runs within the</font>

133
00:06:58,050 --> 00:07:03,120
content context of the target process<font color="#CCCCCC"> so</font>

134
00:07:00,930 --> 00:07:05,430
it has access<font color="#E5E5E5"> full access to</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

135
00:07:03,120 --> 00:07:07,979
process resources like memory file

136
00:07:05,430 --> 00:07:11,490
descriptors sockets<font color="#E5E5E5"> grows</font><font color="#CCCCCC"> at loaded</font>

137
00:07:07,979 --> 00:07:12,780
modules<font color="#E5E5E5"> etc having the instrumentation</font>

138
00:07:11,490 --> 00:07:16,650
code in JavaScript

139
00:07:12,780 --> 00:07:18,450
lets us eliminate<font color="#E5E5E5"> the compile load retry</font>

140
00:07:16,650 --> 00:07:20,820
cycle<font color="#E5E5E5"> that you need with most other</font>

141
00:07:18,450 --> 00:07:22,260
<font color="#E5E5E5">tools for</font><font color="#CCCCCC"> example techniques like</font><font color="#E5E5E5"> LD</font>

142
00:07:20,820 --> 00:07:25,950
preload<font color="#E5E5E5"> you'd have to compile your</font><font color="#CCCCCC"> C</font>

143
00:07:22,260 --> 00:07:28,229
code<font color="#E5E5E5"> load the code and target executable</font>

144
00:07:25,950 --> 00:07:29,550
retry and every time you want to<font color="#E5E5E5"> make a</font>

145
00:07:28,229 --> 00:07:31,650
tiny<font color="#E5E5E5"> change you have to go through that</font>

146
00:07:29,550 --> 00:07:33,510
whole process<font color="#E5E5E5"> again you saw how quickly</font>

147
00:07:31,650 --> 00:07:35,130
and easy it is<font color="#CCCCCC"> to make changes to the</font>

148
00:07:33,510 --> 00:07:36,570
trace<font color="#CCCCCC"> Handler and we</font><font color="#E5E5E5"> don't even</font><font color="#CCCCCC"> have to</font>

149
00:07:35,130 --> 00:07:40,740
restart<font color="#E5E5E5"> the trace that will</font>

150
00:07:36,570 --> 00:07:42,300
automatically be applied<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Fria also</font>

151
00:07:40,740 --> 00:07:44,729
with the in<font color="#E5E5E5"> process code written in</font>

152
00:07:42,300 --> 00:07:48,120
<font color="#E5E5E5">JavaScript we can conceivably use the</font>

153
00:07:44,729 --> 00:07:48,669
same in process<font color="#CCCCCC"> script for different</font>

154
00:07:48,120 --> 00:07:50,080
<font color="#CCCCCC">rket</font>

155
00:07:48,669 --> 00:07:55,180
just in platforms like we saw with<font color="#CCCCCC"> the</font>

156
00:07:50,080 --> 00:07:56,740
iPhone and IR and Mac OS we saw that we

157
00:07:55,180 --> 00:07:59,650
can life edit<font color="#CCCCCC"> the handle scripts</font>

158
00:07:56,740 --> 00:08:01,270
generated by Freda<font color="#CCCCCC"> trace</font><font color="#E5E5E5"> with changes</font>

159
00:07:59,650 --> 00:08:03,248
those scripts being immediately<font color="#CCCCCC"> and</font>

160
00:08:01,270 --> 00:08:05,770
automatically applied<font color="#E5E5E5"> without needing to</font>

161
00:08:03,249 --> 00:08:07,560
start and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> stopped the trace the</font>

162
00:08:05,770 --> 00:08:10,090
further this<font color="#E5E5E5"> further</font><font color="#CCCCCC"> reduces the</font>

163
00:08:07,560 --> 00:08:14,020
implementation<font color="#E5E5E5"> or instrumentation cycle</font>

164
00:08:10,090 --> 00:08:15,090
exploration cycle so what is free<font color="#CCCCCC"> right</font>

165
00:08:14,020 --> 00:08:18,188
exactly

166
00:08:15,090 --> 00:08:20,710
<font color="#CCCCCC">okay Frida is like grease monkey for</font>

167
00:08:18,189 --> 00:08:23,770
native applications it's an in process

168
00:08:20,710 --> 00:08:25,599
binary instrumentation framework it's in

169
00:08:23,770 --> 00:08:28,448
process<font color="#CCCCCC"> because the instrumentation code</font>

170
00:08:25,599 --> 00:08:30,969
runs within<font color="#E5E5E5"> the process unlike with gdb</font>

171
00:08:28,449 --> 00:08:33,519
where you attach from outside and you're

172
00:08:30,969 --> 00:08:36,490
<font color="#CCCCCC">working from outside the</font><font color="#E5E5E5"> process on</font><font color="#CCCCCC"> the</font>

173
00:08:33,519 --> 00:08:38,860
process with Frida<font color="#CCCCCC"> your</font><font color="#E5E5E5"> instrumentation</font>

174
00:08:36,490 --> 00:08:40,570
and exploration scripts<font color="#E5E5E5"> run within the</font>

175
00:08:38,860 --> 00:08:42,370
process in the context of<font color="#E5E5E5"> the process so</font>

176
00:08:40,570 --> 00:08:44,709
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> access to all the process</font>

177
00:08:42,370 --> 00:08:46,209
resources<font color="#E5E5E5"> as a first-class</font><font color="#CCCCCC"> citizen</font><font color="#E5E5E5"> you</font>

178
00:08:44,709 --> 00:08:50,560
<font color="#E5E5E5">don't have to worry about permissions or</font>

179
00:08:46,209 --> 00:08:52,630
anything like<font color="#E5E5E5"> that it's binary because</font>

180
00:08:50,560 --> 00:08:55,359
Frida works on compiled binaries without

181
00:08:52,630 --> 00:08:58,149
any need for source code or compile time

182
00:08:55,360 --> 00:09:00,279
instrumentation it uses techniques<font color="#E5E5E5"> like</font>

183
00:08:58,149 --> 00:09:04,660
inline<font color="#E5E5E5"> function</font><font color="#CCCCCC"> cooking in order to</font>

184
00:09:00,279 --> 00:09:06,310
implement<font color="#E5E5E5"> this functionality</font><font color="#CCCCCC"> theater</font>

185
00:09:04,660 --> 00:09:07,689
provides tools and functionality for

186
00:09:06,310 --> 00:09:10,869
<font color="#E5E5E5">instrumentation and exploration of</font>

187
00:09:07,690 --> 00:09:12,519
target processes allowing<font color="#E5E5E5"> for advanced</font>

188
00:09:10,870 --> 00:09:16,899
<font color="#E5E5E5">dynamic analysis and debugging with</font>

189
00:09:12,519 --> 00:09:20,949
<font color="#CCCCCC">easy-to-use scripting lastly Frida is a</font>

190
00:09:16,899 --> 00:09:24,040
framework<font color="#CCCCCC"> that's intended to supply the</font>

191
00:09:20,949 --> 00:09:26,319
necessary base functionality<font color="#E5E5E5"> and tooling</font>

192
00:09:24,040 --> 00:09:27,069
to allow you to<font color="#CCCCCC"> build your own tools on</font>

193
00:09:26,320 --> 00:09:30,430
top<font color="#CCCCCC"> of Frida</font>

194
00:09:27,070 --> 00:09:32,230
in fact<font color="#CCCCCC"> Sweden's license expressly</font>

195
00:09:30,430 --> 00:09:34,899
permits the development and distribution

196
00:09:32,230 --> 00:09:37,149
of tools be<font color="#CCCCCC"> their open source or</font>

197
00:09:34,899 --> 00:09:39,220
proprietary so even if you want to<font color="#E5E5E5"> take</font>

198
00:09:37,149 --> 00:09:41,829
Frida and<font color="#E5E5E5"> build your own proprietary to</font>

199
00:09:39,220 --> 00:09:46,899
applications on top<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> that's great</font>

200
00:09:41,829 --> 00:09:49,839
Frida is<font color="#E5E5E5"> happy to have</font><font color="#CCCCCC"> that happen Frida</font>

201
00:09:46,899 --> 00:09:51,430
is<font color="#CCCCCC"> multi-platform multi</font><font color="#E5E5E5"> arc it lets you</font>

202
00:09:49,839 --> 00:09:54,220
instrument processes on all the major

203
00:09:51,430 --> 00:09:55,510
platforms<font color="#E5E5E5"> and architectures</font><font color="#CCCCCC"> because the</font>

204
00:09:54,220 --> 00:09:58,180
in<font color="#E5E5E5"> process code which actually</font><font color="#CCCCCC"> runs</font>

205
00:09:55,510 --> 00:10:00,670
within<font color="#E5E5E5"> the process is in JavaScript it's</font>

206
00:09:58,180 --> 00:10:02,050
very portable as well and you can<font color="#CCCCCC"> use</font>

207
00:10:00,670 --> 00:10:03,399
<font color="#E5E5E5">the same</font><font color="#CCCCCC"> instrumentation so</font>

208
00:10:02,050 --> 00:10:05,229
<font color="#CCCCCC">trips across multiple target</font>

209
00:10:03,399 --> 00:10:07,510
architectures and target platforms<font color="#E5E5E5"> like</font>

210
00:10:05,230 --> 00:10:10,480
<font color="#CCCCCC">you can see we have Linux OS X Windows</font>

211
00:10:07,510 --> 00:10:12,160
iOS and Android as well<font color="#CCCCCC"> skew and ax we</font>

212
00:10:10,480 --> 00:10:16,480
<font color="#E5E5E5">have good support on all</font><font color="#CCCCCC"> the platforms</font>

213
00:10:12,160 --> 00:10:18,519
where there is you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> support for the</font>

214
00:10:16,480 --> 00:10:20,440
platform<font color="#E5E5E5"> itself there's just some</font>

215
00:10:18,519 --> 00:10:24,220
<font color="#CCCCCC">Windows you know I don't know if</font><font color="#E5E5E5"> this</font>

216
00:10:20,440 --> 00:10:25,630
<font color="#CCCCCC">actually support Windows an arm but just</font>

217
00:10:24,220 --> 00:10:28,120
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> that an arm that isn't supported</font>

218
00:10:25,630 --> 00:10:30,510
<font color="#CCCCCC">and Linux AR 64 because</font><font color="#E5E5E5"> we haven't</font>

219
00:10:28,120 --> 00:10:33,100
encountered that kind<font color="#E5E5E5"> of target yet</font>

220
00:10:30,510 --> 00:10:35,439
<font color="#CCCCCC">freida is self-contained and does not</font>

221
00:10:33,100 --> 00:10:39,310
require any modifications to<font color="#E5E5E5"> the system</font>

222
00:10:35,440 --> 00:10:41,769
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> running on in fact you can even use</font>

223
00:10:39,310 --> 00:10:44,369
<font color="#CCCCCC">Frida</font><font color="#E5E5E5"> on non jailbroken iOS devices and</font>

224
00:10:41,769 --> 00:10:47,560
unrooted<font color="#E5E5E5"> Android devices</font>

225
00:10:44,370 --> 00:10:50,260
<font color="#CCCCCC">Krita is fully open source with a very</font>

226
00:10:47,560 --> 00:10:53,969
<font color="#E5E5E5">active community led</font><font color="#CCCCCC"> by the creator of</font>

227
00:10:50,260 --> 00:10:56,470
the project<font color="#CCCCCC"> Ally and rave at Lara Venus</font>

228
00:10:53,970 --> 00:10:58,959
is under constant<font color="#CCCCCC"> development to provide</font>

229
00:10:56,470 --> 00:11:02,100
<font color="#E5E5E5">both better platform specific support</font>

230
00:10:58,959 --> 00:11:07,810
<font color="#E5E5E5">and new and</font><font color="#CCCCCC"> improved functionality and</font>

231
00:11:02,100 --> 00:11:12,250
<font color="#E5E5E5">api's the framework provides</font><font color="#CCCCCC"> language</font>

232
00:11:07,810 --> 00:11:15,239
bindings for<font color="#E5E5E5"> Python C Swift and nodejs</font>

233
00:11:12,250 --> 00:11:17,589
so you can build<font color="#CCCCCC"> your applications your</font>

234
00:11:15,240 --> 00:11:18,820
debugging<font color="#E5E5E5"> tools you can build them on</font>

235
00:11:17,589 --> 00:11:22,540
<font color="#E5E5E5">top of Frida in the language of your</font>

236
00:11:18,820 --> 00:11:24,010
choice more or less and you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> use the</font>

237
00:11:22,540 --> 00:11:26,800
language<font color="#CCCCCC"> which is best suited for the</font>

238
00:11:24,010 --> 00:11:29,290
particular<font color="#E5E5E5"> task</font><font color="#CCCCCC"> at hand</font><font color="#E5E5E5"> freely is built</font>

239
00:11:26,800 --> 00:11:31,449
from modular components which<font color="#CCCCCC"> can be</font>

240
00:11:29,290 --> 00:11:34,689
used independently of one another<font color="#CCCCCC"> this</font>

241
00:11:31,450 --> 00:11:38,230
further enhances the functionality and

242
00:11:34,690 --> 00:11:41,740
<font color="#E5E5E5">the way that you can</font><font color="#CCCCCC"> use Frida</font><font color="#E5E5E5"> to build</font>

243
00:11:38,230 --> 00:11:44,890
<font color="#E5E5E5">your own tools so we've said that Frida</font>

244
00:11:41,740 --> 00:11:46,839
<font color="#CCCCCC">is a framework</font><font color="#E5E5E5"> or toolkits on which you</font>

245
00:11:44,890 --> 00:11:49,180
can<font color="#CCCCCC"> build your own tools</font><font color="#E5E5E5"> but Frida also</font>

246
00:11:46,839 --> 00:11:51,430
comes out<font color="#CCCCCC"> of the box with a bunch of</font>

247
00:11:49,180 --> 00:11:53,050
utilities and tools to<font color="#CCCCCC"> get you started</font>

248
00:11:51,430 --> 00:11:56,399
instrumenting and exploring processes

249
00:11:53,050 --> 00:11:58,630
right from the first<font color="#E5E5E5"> day</font>

250
00:11:56,399 --> 00:12:00,550
most of<font color="#E5E5E5"> those tools are written in</font>

251
00:11:58,630 --> 00:12:03,250
Python<font color="#E5E5E5"> we've already seen one of those</font>

252
00:12:00,550 --> 00:12:04,689
tools<font color="#E5E5E5"> for</font><font color="#CCCCCC"> your trace let's take a look</font>

253
00:12:03,250 --> 00:12:06,959
at some<font color="#E5E5E5"> of the other tools around that</font>

254
00:12:04,690 --> 00:12:06,959
are available

255
00:12:10,440 --> 00:12:18,810
<font color="#E5E5E5">okay so the first tool</font><font color="#CCCCCC"> that we're gonna</font>

256
00:12:12,700 --> 00:12:21,970
look at is<font color="#CCCCCC"> feeder LS devices okay</font>

257
00:12:18,810 --> 00:12:25,930
<font color="#CCCCCC">freida LS devices is a tool that lets</font>

258
00:12:21,970 --> 00:12:28,420
you list<font color="#E5E5E5"> the devices that</font><font color="#CCCCCC"> freedom knows</font>

259
00:12:25,930 --> 00:12:31,300
about on which you were able<font color="#CCCCCC"> to attach</font>

260
00:12:28,420 --> 00:12:32,890
to processes<font color="#E5E5E5"> so what we have</font><font color="#CCCCCC"> here is we</font>

261
00:12:31,300 --> 00:12:34,270
have<font color="#E5E5E5"> the local system which means that</font>

262
00:12:32,890 --> 00:12:39,280
we can attach<font color="#CCCCCC"> the processes running</font><font color="#E5E5E5"> on</font>

263
00:12:34,270 --> 00:12:42,220
this Mac we<font color="#E5E5E5"> have a local TCP which is</font>

264
00:12:39,280 --> 00:12:45,400
actually used<font color="#E5E5E5"> to connect to remote hosts</font>

265
00:12:42,220 --> 00:12:47,710
over<font color="#CCCCCC"> a TCP connection and we have an</font>

266
00:12:45,400 --> 00:12:50,500
iPhone attached with the specific device

267
00:12:47,710 --> 00:12:53,530
ID you can<font color="#CCCCCC"> use the</font><font color="#E5E5E5"> minus D flag and the</font>

268
00:12:50,500 --> 00:12:55,990
device ID<font color="#E5E5E5"> if you have multiple iPhones</font>

269
00:12:53,530 --> 00:12:57,550
or Android devices attached you can<font color="#E5E5E5"> use</font>

270
00:12:55,990 --> 00:13:00,250
the minus<font color="#E5E5E5"> D flag on the other</font><font color="#CCCCCC"> frida</font>

271
00:12:57,550 --> 00:13:04,410
tools in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> specify which device</font>

272
00:13:00,250 --> 00:13:04,410
you want to connect to<font color="#E5E5E5"> and to attach to</font>

273
00:13:06,300 --> 00:13:12,209
the next tool<font color="#CCCCCC"> is that is</font><font color="#E5E5E5"> Frieda PS</font>

274
00:13:13,050 --> 00:13:20,439
Frieda PS<font color="#CCCCCC"> let's you list</font><font color="#E5E5E5"> the running</font>

275
00:13:17,710 --> 00:13:22,750
processes<font color="#E5E5E5"> on a target device if we run</font>

276
00:13:20,440 --> 00:13:24,490
it without any arguments<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> list</font>

277
00:13:22,750 --> 00:13:27,130
the<font color="#CCCCCC"> processes running</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the local</font>

278
00:13:24,490 --> 00:13:29,650
<font color="#CCCCCC">system in this</font><font color="#E5E5E5"> case my Mac you can see</font>

279
00:13:27,130 --> 00:13:34,150
the<font color="#E5E5E5"> processors name and the pit for each</font>

280
00:13:29,650 --> 00:13:37,240
process if we<font color="#CCCCCC"> add the minus u flag</font><font color="#E5E5E5"> we</font>

281
00:13:34,150 --> 00:13:39,370
are asking<font color="#E5E5E5"> Frieda to use the USB and now</font>

282
00:13:37,240 --> 00:13:44,230
we<font color="#E5E5E5"> realist processes we're</font><font color="#CCCCCC"> listening the</font>

283
00:13:39,370 --> 00:13:47,140
processes running on my iPhone<font color="#E5E5E5"> if we add</font>

284
00:13:44,230 --> 00:13:50,680
the<font color="#CCCCCC"> minus a for applications and - I</font>

285
00:13:47,140 --> 00:13:52,300
flagged for installed will list the

286
00:13:50,680 --> 00:13:56,500
applications which<font color="#E5E5E5"> are installed on the</font>

287
00:13:52,300 --> 00:13:58,750
iOS<font color="#CCCCCC"> device</font><font color="#E5E5E5"> with the kid if we're running</font>

288
00:13:56,500 --> 00:14:01,300
already<font color="#E5E5E5"> the name of the process and the</font>

289
00:13:58,750 --> 00:14:03,310
<font color="#CCCCCC">application identifier</font><font color="#E5E5E5"> so that you can</font>

290
00:14:01,300 --> 00:14:06,089
identify which applications<font color="#E5E5E5"> are running</font>

291
00:14:03,310 --> 00:14:06,089
on<font color="#CCCCCC"> your</font><font color="#E5E5E5"> device</font>

292
00:14:16,520 --> 00:14:28,590
excuse me the last tool that<font color="#E5E5E5"> we look at</font>

293
00:14:24,270 --> 00:14:32,600
is a<font color="#E5E5E5"> rattle okay we just</font><font color="#CCCCCC"> have the Freda</font>

294
00:14:28,590 --> 00:14:37,230
application itself<font color="#E5E5E5"> which is a repple a</font>

295
00:14:32,600 --> 00:14:38,550
<font color="#E5E5E5">read evaluate print loop utility which</font>

296
00:14:37,230 --> 00:14:42,960
basically<font color="#E5E5E5"> gives you a shell</font>

297
00:14:38,550 --> 00:14:46,530
if we run<font color="#E5E5E5"> Freda with Twitter</font><font color="#CCCCCC"> we'll see</font>

298
00:14:42,960 --> 00:14:49,440
that we attach to<font color="#CCCCCC"> the local machine to</font>

299
00:14:46,530 --> 00:14:53,699
<font color="#CCCCCC">the process named Twitter and we have</font>

300
00:14:49,440 --> 00:14:58,260
here a shell<font color="#CCCCCC"> okay if we hit tab</font><font color="#E5E5E5"> we'll</font>

301
00:14:53,700 --> 00:15:04,860
see all the api's and and objects<font color="#E5E5E5"> that</font>

302
00:14:58,260 --> 00:15:07,290
we<font color="#E5E5E5"> can use to</font><font color="#CCCCCC"> access Frida's api</font><font color="#E5E5E5"> this is</font>

303
00:15:04,860 --> 00:15:11,340
just a<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> record with added</font>

304
00:15:07,290 --> 00:15:13,140
api's from<font color="#CCCCCC"> Freda</font><font color="#E5E5E5"> now every expression</font>

305
00:15:11,340 --> 00:15:15,810
that you run on<font color="#E5E5E5"> this</font><font color="#CCCCCC"> repple in this</font>

306
00:15:13,140 --> 00:15:19,110
command line is actually executed within

307
00:15:15,810 --> 00:15:23,959
<font color="#CCCCCC">the process of the target process</font><font color="#E5E5E5"> that</font>

308
00:15:19,110 --> 00:15:28,340
<font color="#CCCCCC">you're instrumenting if we for example</font>

309
00:15:23,960 --> 00:15:33,510
<font color="#E5E5E5">want to look at the process and</font>

310
00:15:28,340 --> 00:15:36,090
enumerates<font color="#CCCCCC"> the modules that are loaded</font>

311
00:15:33,510 --> 00:15:39,240
<font color="#E5E5E5">into this process we can use the process</font>

312
00:15:36,090 --> 00:15:41,340
<font color="#CCCCCC">enumerate module sink function</font><font color="#E5E5E5"> and here</font>

313
00:15:39,240 --> 00:15:43,800
we get a listing of<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the modules</font><font color="#E5E5E5"> that</font>

314
00:15:41,340 --> 00:15:46,560
are<font color="#CCCCCC"> loaded into</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> F process including</font>

315
00:15:43,800 --> 00:15:52,890
the base address<font color="#E5E5E5"> name full path to the</font>

316
00:15:46,560 --> 00:15:56,790
file and the size of the image we can

317
00:15:52,890 --> 00:16:00,210
also do things like module dot find

318
00:15:56,790 --> 00:16:03,209
export by name which<font color="#E5E5E5"> will find a</font>

319
00:16:00,210 --> 00:16:06,240
<font color="#E5E5E5">exported function in a given module by</font>

320
00:16:03,210 --> 00:16:12,830
the name<font color="#CCCCCC"> that you provide</font><font color="#E5E5E5"> so if we know</font>

321
00:16:06,240 --> 00:16:15,390
<font color="#CCCCCC">that we want the Lib system</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> died a</font>

322
00:16:12,830 --> 00:16:18,990
module and we're<font color="#CCCCCC"> interested in</font><font color="#E5E5E5"> the open</font>

323
00:16:15,390 --> 00:16:21,660
function if<font color="#E5E5E5"> we do find export by name we</font>

324
00:16:18,990 --> 00:16:24,750
<font color="#E5E5E5">get the</font><font color="#CCCCCC"> address of the</font>

325
00:16:21,660 --> 00:16:27,660
<font color="#E5E5E5">can function as</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> exported from the</font>

326
00:16:24,750 --> 00:16:31,740
<font color="#CCCCCC">ellipse system be dial it</font><font color="#E5E5E5"> now if we</font>

327
00:16:27,660 --> 00:16:35,550
don't know which module exports are

328
00:16:31,740 --> 00:16:40,620
given in function or we just start lazy

329
00:16:35,550 --> 00:16:42,569
<font color="#E5E5E5">we can just drop now in here as the</font>

330
00:16:40,620 --> 00:16:44,550
<font color="#E5E5E5">first argument and then</font><font color="#CCCCCC"> Frieda</font><font color="#E5E5E5"> will go</font>

331
00:16:42,570 --> 00:16:49,160
ahead<font color="#E5E5E5"> and look at all the</font><font color="#CCCCCC"> modules</font><font color="#E5E5E5"> and</font>

332
00:16:44,550 --> 00:16:56,729
we'll find your export in<font color="#E5E5E5"> the module</font>

333
00:16:49,160 --> 00:17:00,329
that<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is there's also very powerful</font>

334
00:16:56,730 --> 00:17:03,090
<font color="#CCCCCC">objective-c</font><font color="#E5E5E5"> supports you can for example</font>

335
00:17:00,330 --> 00:17:05,010
<font color="#CCCCCC">though exact</font><font color="#E5E5E5"> Objective C</font><font color="#CCCCCC"> doc classes and</font>

336
00:17:03,090 --> 00:17:06,930
here we have a<font color="#CCCCCC"> drop-down of all the</font>

337
00:17:05,010 --> 00:17:09,329
Objective C classes that are known<font color="#CCCCCC"> to</font>

338
00:17:06,930 --> 00:17:12,740
the<font color="#CCCCCC"> process</font><font color="#E5E5E5"> I all Objective C classes</font>

339
00:17:09,329 --> 00:17:16,169
that are<font color="#CCCCCC"> loaded in</font><font color="#E5E5E5"> this process if we</font>

340
00:17:12,740 --> 00:17:17,300
start<font color="#E5E5E5"> with Twitter for example</font><font color="#CCCCCC"> we'll see</font>

341
00:17:16,170 --> 00:17:20,040
<font color="#E5E5E5">that there's a bunch of our Twitter</font>

342
00:17:17,300 --> 00:17:25,919
Objective C classes<font color="#CCCCCC"> available here for</font>

343
00:17:20,040 --> 00:17:32,629
us to explore<font color="#E5E5E5"> an instrument we can also</font>

344
00:17:25,920 --> 00:17:34,520
perform interceptor<font color="#CCCCCC"> attaches</font><font color="#E5E5E5"> okay</font>

345
00:17:32,630 --> 00:17:37,560
interceptor<font color="#E5E5E5"> attach will actually</font>

346
00:17:34,520 --> 00:17:40,800
interested in intercept a given<font color="#CCCCCC"> function</font>

347
00:17:37,560 --> 00:17:43,169
and<font color="#E5E5E5"> attach on enter on leave listeners</font>

348
00:17:40,800 --> 00:17:47,370
to that function<font color="#E5E5E5"> so we can say</font>

349
00:17:43,170 --> 00:17:52,860
intercepted<font color="#E5E5E5"> our attached memory dot not</font>

350
00:17:47,370 --> 00:17:57,239
memory sorry module<font color="#E5E5E5"> dot find exports by</font>

351
00:17:52,860 --> 00:18:01,949
name now<font color="#E5E5E5"> we're interested</font><font color="#CCCCCC"> in open okay</font>

352
00:17:57,240 --> 00:18:04,230
<font color="#CCCCCC">and then we'll say we want an on enter</font>

353
00:18:01,950 --> 00:18:08,670
handler which is a function which

354
00:18:04,230 --> 00:18:15,480
receives arguments and here we can print

355
00:18:08,670 --> 00:18:17,400
with the console dot log<font color="#E5E5E5"> open calls okay</font>

356
00:18:15,480 --> 00:18:22,230
<font color="#CCCCCC">we've now</font><font color="#E5E5E5"> implemented our interception</font>

357
00:18:17,400 --> 00:18:27,350
<font color="#E5E5E5">if we go to Twitter and pull down we'll</font>

358
00:18:22,230 --> 00:18:27,350
see a whole bunch<font color="#E5E5E5"> of open cold</font><font color="#CCCCCC"> okay</font>

359
00:18:28,910 --> 00:18:34,730
now that's really<font color="#CCCCCC"> awesome it's very</font>

360
00:18:31,850 --> 00:18:37,360
useful for exploration and<font color="#CCCCCC"> discovery of</font>

361
00:18:34,730 --> 00:18:40,610
<font color="#E5E5E5">what's going on within an application</font>

362
00:18:37,360 --> 00:18:42,649
<font color="#E5E5E5">but it's a little</font><font color="#CCCCCC"> bit painful to write</font>

363
00:18:40,610 --> 00:18:45,709
longer expressions like the one that we

364
00:18:42,650 --> 00:18:48,560
<font color="#CCCCCC">just wrote on the repple itself thanks</font>

365
00:18:45,710 --> 00:18:51,290
<font color="#CCCCCC">the need Freitas reprimand</font>

366
00:18:48,560 --> 00:18:56,570
<font color="#E5E5E5">so that's what we're gonna do now we</font>

367
00:18:51,290 --> 00:19:01,420
will write a file called<font color="#CCCCCC"> explored ojs</font>

368
00:18:56,570 --> 00:19:08,740
and<font color="#E5E5E5"> we'll drop</font><font color="#CCCCCC"> the same interceptor</font>

369
00:19:01,420 --> 00:19:08,740
<font color="#CCCCCC">attach module dot find export by name</font>

370
00:19:11,680 --> 00:19:20,510
and now because<font color="#E5E5E5"> we're lazy and open and</font>

371
00:19:17,350 --> 00:19:22,010
then<font color="#E5E5E5"> we'll it's a lot</font><font color="#CCCCCC"> easier</font><font color="#E5E5E5"> to read it</font>

372
00:19:20,510 --> 00:19:26,180
<font color="#CCCCCC">when it's</font><font color="#E5E5E5"> like this we have an</font>

373
00:19:22,010 --> 00:19:29,810
unanswered<font color="#E5E5E5"> phone which</font><font color="#CCCCCC"> has the arguments</font>

374
00:19:26,180 --> 00:19:39,550
of<font color="#E5E5E5"> the function call</font><font color="#CCCCCC"> okay and here we</font>

375
00:19:29,810 --> 00:19:43,669
can log open calls<font color="#E5E5E5"> okay and now if</font><font color="#CCCCCC"> we</font>

376
00:19:39,550 --> 00:19:46,850
quit the repple and this time<font color="#E5E5E5"> load it</font>

377
00:19:43,670 --> 00:19:50,270
with<font color="#CCCCCC"> minus l load the</font><font color="#E5E5E5"> explorer</font><font color="#CCCCCC"> DOJ's</font>

378
00:19:46,850 --> 00:19:54,740
script<font color="#E5E5E5"> it attaches and runs our</font><font color="#CCCCCC"> script</font>

379
00:19:50,270 --> 00:19:57,370
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we can now see open cold when the</font>

380
00:19:54,740 --> 00:19:57,370
open is cold

381
00:19:59,809 --> 00:20:04,070
now one<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> that's important to</font><font color="#CCCCCC"> note</font>

382
00:20:02,359 --> 00:20:06,799
<font color="#E5E5E5">is that</font><font color="#CCCCCC"> Freda does not know anything</font>

383
00:20:04,070 --> 00:20:08,450
<font color="#CCCCCC">about the function that's being</font>

384
00:20:06,799 --> 00:20:11,029
intercepted it doesn't you<font color="#E5E5E5"> don't have to</font>

385
00:20:08,450 --> 00:20:13,639
specify<font color="#E5E5E5"> the calling</font><font color="#CCCCCC"> convention you don't</font>

386
00:20:11,029 --> 00:20:14,749
have to specify the<font color="#E5E5E5"> number of arguments</font>

387
00:20:13,639 --> 00:20:16,639
you don't have to specify the<font color="#CCCCCC"> number the</font>

388
00:20:14,749 --> 00:20:18,799
type<font color="#CCCCCC"> of arguments fluid is completely</font>

389
00:20:16,639 --> 00:20:20,658
agnostic<font color="#E5E5E5"> to these things it doesn't care</font>

390
00:20:18,799 --> 00:20:22,789
<font color="#E5E5E5">about</font><font color="#CCCCCC"> them at all that performs inline</font>

391
00:20:20,659 --> 00:20:25,999
<font color="#E5E5E5">function hooking and gives you access to</font>

392
00:20:22,789 --> 00:20:29,419
<font color="#CCCCCC">the arguments by the arcs variable arcs</font>

393
00:20:25,999 --> 00:20:33,049
parameter<font color="#E5E5E5"> using</font><font color="#CCCCCC"> this given platform</font><font color="#E5E5E5"> and</font>

394
00:20:29,419 --> 00:20:35,509
architectures<font color="#CCCCCC"> standard calling</font>

395
00:20:33,049 --> 00:20:37,700
convention so on<font color="#E5E5E5"> arm you</font><font color="#CCCCCC"> have your first</font>

396
00:20:35,509 --> 00:20:40,249
four edges<font color="#CCCCCC"> arguments</font><font color="#E5E5E5"> and registers and</font>

397
00:20:37,700 --> 00:20:42,529
the rest are on<font color="#E5E5E5"> the stack and x86</font><font color="#CCCCCC"> you</font>

398
00:20:40,249 --> 00:20:45,379
<font color="#CCCCCC">are</font><font color="#E5E5E5"> register your arguments are in on</font>

399
00:20:42,529 --> 00:20:46,879
the stack<font color="#CCCCCC"> all that</font><font color="#E5E5E5"> information is</font>

400
00:20:45,379 --> 00:20:50,418
abstracted by<font color="#CCCCCC"> Frieda</font><font color="#E5E5E5"> and you can just</font>

401
00:20:46,879 --> 00:20:53,509
<font color="#CCCCCC">access the arguments via arcs</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> if</font>

402
00:20:50,419 --> 00:20:55,879
however<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a function which you</font>

403
00:20:53,509 --> 00:20:58,309
know is<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> strange is using</font>

404
00:20:55,879 --> 00:21:00,199
a non-standard calling convention<font color="#E5E5E5"> or you</font>

405
00:20:58,309 --> 00:21:01,879
<font color="#E5E5E5">just want to be able to</font><font color="#CCCCCC"> access the</font>

406
00:21:00,200 --> 00:21:04,249
processor registers at the time that the

407
00:21:01,879 --> 00:21:08,748
function<font color="#E5E5E5"> is called you can access those</font>

408
00:21:04,249 --> 00:21:11,330
things via<font color="#CCCCCC"> the this context object we</font>

409
00:21:08,749 --> 00:21:16,059
can for<font color="#E5E5E5"> example look at our di which is</font>

410
00:21:11,330 --> 00:21:19,869
the first argument<font color="#E5E5E5"> on x86 64</font><font color="#CCCCCC"> if we</font>

411
00:21:16,059 --> 00:21:19,869
consult<font color="#CCCCCC"> that log that</font>

412
00:21:23,580 --> 00:21:32,179
we get the<font color="#CCCCCC"> wait</font>

413
00:21:41,640 --> 00:21:47,820
okay we get the<font color="#E5E5E5"> pointer in</font><font color="#CCCCCC"> RDI</font><font color="#E5E5E5"> okay</font>

414
00:21:45,690 --> 00:21:53,429
point is not<font color="#E5E5E5"> really that useful for us</font>

415
00:21:47,820 --> 00:21:57,059
so<font color="#E5E5E5"> let's once again print it with print</font>

416
00:21:53,429 --> 00:22:00,420
the contact contents of the pointer

417
00:21:57,059 --> 00:22:05,250
instead<font color="#CCCCCC"> of the pointer</font><font color="#E5E5E5"> itself by</font>

418
00:22:00,420 --> 00:22:14,059
performing memory<font color="#E5E5E5"> the read utf-8 string</font>

419
00:22:05,250 --> 00:22:19,260
on the pointer<font color="#CCCCCC"> and here we'll reload and</font>

420
00:22:14,059 --> 00:22:20,418
pull<font color="#E5E5E5"> down and now we get the full path</font>

421
00:22:19,260 --> 00:22:23,760
again

422
00:22:20,419 --> 00:22:27,390
now<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> pool we can see what a</font>

423
00:22:23,760 --> 00:22:30,090
process<font color="#CCCCCC"> is what files the process is</font>

424
00:22:27,390 --> 00:22:34,410
opening but<font color="#E5E5E5"> we'd like a little bit more</font>

425
00:22:30,090 --> 00:22:37,010
<font color="#CCCCCC">context than that we can use a cool</font>

426
00:22:34,410 --> 00:22:41,370
feature<font color="#CCCCCC"> of Frida</font>

427
00:22:37,010 --> 00:22:43,679
that's called thread back<font color="#E5E5E5"> trace what</font>

428
00:22:41,370 --> 00:22:47,729
that will do is<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> take the this</font>

429
00:22:43,679 --> 00:22:51,240
context<font color="#E5E5E5"> and it will generate</font><font color="#CCCCCC"> a back</font>

430
00:22:47,730 --> 00:22:53,309
trace like you'd see in gdb for that

431
00:22:51,240 --> 00:22:54,630
given<font color="#E5E5E5"> for the point at which</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was</font>

432
00:22:53,309 --> 00:23:00,500
called<font color="#E5E5E5"> that we should call thread</font><font color="#CCCCCC"> top</font>

433
00:22:54,630 --> 00:23:00,500
actress okay<font color="#E5E5E5"> so let's try</font><font color="#CCCCCC"> that</font>

434
00:23:00,890 --> 00:23:13,020
<font color="#E5E5E5">we'll pull down and now we get a list of</font>

435
00:23:05,580 --> 00:23:15,059
pointers for<font color="#E5E5E5"> each</font><font color="#CCCCCC"> hole that's the back</font>

436
00:23:13,020 --> 00:23:17,100
trace the pointers<font color="#E5E5E5"> but pointers are</font>

437
00:23:15,059 --> 00:23:21,690
difficult to understand let's see if we

438
00:23:17,100 --> 00:23:24,449
can make it<font color="#CCCCCC"> a little bit more simple the</font>

439
00:23:21,690 --> 00:23:27,960
threat of<font color="#E5E5E5"> back trace function returns an</font>

440
00:23:24,450 --> 00:23:30,270
array of<font color="#E5E5E5"> pointers okay so what we can do</font>

441
00:23:27,960 --> 00:23:36,240
is we can use<font color="#E5E5E5"> a standard</font><font color="#CCCCCC"> JavaScript map</font>

442
00:23:30,270 --> 00:23:41,280
function to map the debug symbol dot

443
00:23:36,240 --> 00:23:44,400
<font color="#E5E5E5">from address function onto</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> element</font>

444
00:23:41,280 --> 00:23:48,690
in that array<font color="#E5E5E5"> then we can just join that</font>

445
00:23:44,400 --> 00:23:52,730
<font color="#E5E5E5">the resulting array worth new line and</font>

446
00:23:48,690 --> 00:23:52,730
tab<font color="#E5E5E5"> just to make it a little pretty</font>

447
00:23:53,260 --> 00:24:01,330
we can reload it again and pull<font color="#E5E5E5"> down</font>

448
00:23:59,250 --> 00:24:03,850
takes a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more time</font><font color="#E5E5E5"> this time</font>

449
00:24:01,330 --> 00:24:06,760
just<font color="#E5E5E5"> because it has to calculate the</font>

450
00:24:03,850 --> 00:24:09,389
debug symbols<font color="#E5E5E5"> and now you can see back</font>

451
00:24:06,760 --> 00:24:12,549
traces<font color="#E5E5E5"> that really give you a very good</font>

452
00:24:09,389 --> 00:24:15,870
<font color="#E5E5E5">picture of where in an application all</font>

453
00:24:12,549 --> 00:24:18,730
your opens up are occurring<font color="#E5E5E5"> so all these</font>

454
00:24:15,870 --> 00:24:20,559
<font color="#E5E5E5">little tricks you saw how if a couple</font><font color="#CCCCCC"> of</font>

455
00:24:18,730 --> 00:24:23,529
minutes<font color="#E5E5E5"> we've managed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get a lot</font><font color="#CCCCCC"> of</font>

456
00:24:20,559 --> 00:24:26,110
<font color="#E5E5E5">context</font><font color="#CCCCCC"> about a given call which can be</font>

457
00:24:23,529 --> 00:24:29,639
very<font color="#CCCCCC"> useful for understanding the</font>

458
00:24:26,110 --> 00:24:29,639
process that we<font color="#CCCCCC"> are targeting</font>

459
00:24:36,760 --> 00:24:41,049
while demoing the<font color="#E5E5E5"> repple we actually</font>

460
00:24:39,250 --> 00:24:42,940
started looking<font color="#E5E5E5"> at the very rich</font>

461
00:24:41,049 --> 00:24:45,250
JavaScript API<font color="#CCCCCC"> that freedom</font><font color="#E5E5E5"> makes</font>

462
00:24:42,940 --> 00:24:47,020
<font color="#E5E5E5">available to</font><font color="#CCCCCC"> your JavaScript</font>

463
00:24:45,250 --> 00:24:49,740
instrumentation fund<font color="#E5E5E5"> the scripts that</font>

464
00:24:47,020 --> 00:24:52,360
<font color="#E5E5E5">are running inside</font><font color="#CCCCCC"> the target</font><font color="#E5E5E5"> process</font>

465
00:24:49,740 --> 00:24:54,360
<font color="#E5E5E5">this API lets you interact with and</font>

466
00:24:52,360 --> 00:24:57,820
explore<font color="#E5E5E5"> the application as it runs</font>

467
00:24:54,360 --> 00:24:59,620
<font color="#CCCCCC">phears api is also memory safe so if you</font>

468
00:24:57,820 --> 00:25:02,950
for<font color="#CCCCCC"> example try to do memory that read</font>

469
00:24:59,620 --> 00:25:05,678
utf-8 string on a garbage pointer or

470
00:25:02,950 --> 00:25:07,030
<font color="#CCCCCC">zero or whatever it happens to be your</font>

471
00:25:05,679 --> 00:25:09,070
process won't crash

472
00:25:07,030 --> 00:25:11,980
<font color="#CCCCCC">freida will catch that and handle it</font>

473
00:25:09,070 --> 00:25:13,270
gracefully<font color="#CCCCCC"> so you you're safe</font><font color="#E5E5E5"> and you</font>

474
00:25:11,980 --> 00:25:17,950
don't have<font color="#E5E5E5"> to worry about your target</font>

475
00:25:13,270 --> 00:25:21,129
<font color="#E5E5E5">process caching so now we've got a</font>

476
00:25:17,950 --> 00:25:25,480
fairly<font color="#E5E5E5"> good</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> of what we can do with</font>

477
00:25:21,130 --> 00:25:28,120
<font color="#CCCCCC">Frieda it's pretty cool but let's</font><font color="#E5E5E5"> try</font>

478
00:25:25,480 --> 00:25:32,710
<font color="#E5E5E5">and do something real well let's try and</font>

479
00:25:28,120 --> 00:25:36,189
make<font color="#CCCCCC"> our understanding afraid of</font>

480
00:25:32,710 --> 00:25:37,210
<font color="#E5E5E5">concrete by forming a real task what</font>

481
00:25:36,190 --> 00:25:38,890
we're going to do is we're going<font color="#CCCCCC"> to</font>

482
00:25:37,210 --> 00:25:41,919
intercept the network track<font color="#E5E5E5"> effect of</font>

483
00:25:38,890 --> 00:25:45,880
<font color="#E5E5E5">Twitter and we're going to simply</font>

484
00:25:41,919 --> 00:25:47,380
uppercase every tweet as it comes in<font color="#E5E5E5"> so</font>

485
00:25:45,880 --> 00:25:50,650
we're basically<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to shatter Phi</font>

486
00:25:47,380 --> 00:25:53,890
<font color="#E5E5E5">Twitter okay</font><font color="#CCCCCC"> or yellow Phi you might say</font>

487
00:25:50,650 --> 00:25:55,660
here<font color="#CCCCCC"> and what we're doing is we're just</font>

488
00:25:53,890 --> 00:25:56,230
modifying the network traffic<font color="#CCCCCC"> as</font><font color="#E5E5E5"> it</font>

489
00:25:55,660 --> 00:25:59,500
comes in

490
00:25:56,230 --> 00:26:01,390
and because we're monitoring<font color="#E5E5E5"> that</font>

491
00:25:59,500 --> 00:26:05,490
<font color="#CCCCCC">network traffic</font><font color="#E5E5E5"> the Twitter application</font>

492
00:26:01,390 --> 00:26:05,490
<font color="#CCCCCC">will see our tweets as stratified</font>

493
00:26:09,680 --> 00:26:14,340
so first we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to work out how to</font>

494
00:26:12,540 --> 00:26:17,310
<font color="#CCCCCC">eater actually delivered to the Twitter</font>

495
00:26:14,340 --> 00:26:24,990
application<font color="#E5E5E5"> so let's start with</font><font color="#CCCCCC"> free to</font>

496
00:26:17,310 --> 00:26:27,750
trace on the Twitter app now we have to

497
00:26:24,990 --> 00:26:30,030
<font color="#E5E5E5">think of second how is Twitter likely to</font>

498
00:26:27,750 --> 00:26:32,570
be connecting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the network connecting</font>

499
00:26:30,030 --> 00:26:36,149
to the Twitter<font color="#CCCCCC"> API to download tweets</font>

500
00:26:32,570 --> 00:26:38,429
<font color="#E5E5E5">now because it's a native iOS X</font>

501
00:26:36,150 --> 00:26:41,640
application it's almost certain that

502
00:26:38,430 --> 00:26:46,700
it's using the<font color="#E5E5E5"> NS URL request</font><font color="#CCCCCC"> NS URL</font>

503
00:26:41,640 --> 00:26:50,100
connection classes<font color="#CCCCCC"> to</font><font color="#E5E5E5"> access HTTP or</font>

504
00:26:46,700 --> 00:26:52,950
<font color="#CCCCCC">HTTPS resources okay so what we're gonna</font>

505
00:26:50,100 --> 00:26:55,980
do is we're gonna say<font color="#CCCCCC"> - M we're</font>

506
00:26:52,950 --> 00:26:59,220
interested in<font color="#CCCCCC"> objective-c methods</font><font color="#E5E5E5"> okay</font>

507
00:26:55,980 --> 00:27:01,410
we're<font color="#E5E5E5"> interested in both class methods</font>

508
00:26:59,220 --> 00:27:04,530
and instance<font color="#CCCCCC"> methods</font><font color="#E5E5E5"> so we'll put a star</font>

509
00:27:01,410 --> 00:27:06,540
where the minus or plus would<font color="#CCCCCC"> be okay</font>

510
00:27:04,530 --> 00:27:09,620
and then we<font color="#E5E5E5"> can say we're</font><font color="#CCCCCC"> interested in</font>

511
00:27:06,540 --> 00:27:12,720
NS<font color="#E5E5E5"> URL connection</font>

512
00:27:09,620 --> 00:27:14,729
okay<font color="#E5E5E5"> that's the class and we're</font>

513
00:27:12,720 --> 00:27:16,830
interested in every function<font color="#CCCCCC"> we don't</font>

514
00:27:14,730 --> 00:27:18,360
<font color="#E5E5E5">going to be very selective</font><font color="#CCCCCC"> the spawns we</font>

515
00:27:16,830 --> 00:27:23,280
<font color="#CCCCCC">just</font><font color="#E5E5E5"> want to see everything that's going</font>

516
00:27:18,360 --> 00:27:25,350
<font color="#CCCCCC">on okay you can see again it's easy</font><font color="#E5E5E5"> to</font>

517
00:27:23,280 --> 00:27:28,350
<font color="#CCCCCC">grab easy to guess what the application</font>

518
00:27:25,350 --> 00:27:32,010
is doing<font color="#E5E5E5"> will attach again we see a</font>

519
00:27:28,350 --> 00:27:35,399
whole<font color="#E5E5E5"> bunch of handlers are generated 46</font>

520
00:27:32,010 --> 00:27:40,860
functions and now when we<font color="#CCCCCC"> go here</font><font color="#E5E5E5"> and</font>

521
00:27:35,400 --> 00:27:43,260
pull down we'll see that<font color="#CCCCCC"> we have the NS</font>

522
00:27:40,860 --> 00:27:47,850
URL connection in int with<font color="#E5E5E5"> requests and</font>

523
00:27:43,260 --> 00:27:49,110
delegates<font color="#E5E5E5"> okay and that</font><font color="#CCCCCC"> Finance URL</font>

524
00:27:47,850 --> 00:27:52,350
<font color="#E5E5E5">connection in with</font><font color="#CCCCCC"> request calls an</font>

525
00:27:49,110 --> 00:27:54,990
internal<font color="#CCCCCC"> init with requests sorry</font>

526
00:27:52,350 --> 00:27:57,080
init with requests function with a

527
00:27:54,990 --> 00:28:02,190
delegate and some other arguments and

528
00:27:57,080 --> 00:28:03,960
that<font color="#E5E5E5"> is basically the mechanism that</font>

529
00:28:02,190 --> 00:28:06,270
<font color="#CCCCCC">they're using</font><font color="#E5E5E5"> in order to download the</font>

530
00:28:03,960 --> 00:28:08,850
<font color="#E5E5E5">tweet data so what we're gonna do is</font>

531
00:28:06,270 --> 00:28:10,320
we're gonna go and look at this init

532
00:28:08,850 --> 00:28:12,389
with<font color="#E5E5E5"> request we'll look at the internal</font>

533
00:28:10,320 --> 00:28:14,550
one so that we don't<font color="#E5E5E5"> miss anything but</font>

534
00:28:12,390 --> 00:28:17,520
we can't<font color="#E5E5E5"> really understand what's</font><font color="#CCCCCC"> going</font>

535
00:28:14,550 --> 00:28:20,730
<font color="#E5E5E5">on</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> because we don't know what</font><font color="#CCCCCC"> your</font>

536
00:28:17,520 --> 00:28:22,320
<font color="#CCCCCC">L's dennis they're requesting so let's</font>

537
00:28:20,730 --> 00:28:25,380
go ahead<font color="#E5E5E5"> and try to work out</font>

538
00:28:22,320 --> 00:28:27,090
what URL each of these<font color="#E5E5E5"> nsurl requests if</font>

539
00:28:25,380 --> 00:28:31,080
nsurl connections is actually trying<font color="#E5E5E5"> to</font>

540
00:28:27,090 --> 00:28:34,830
connect<font color="#E5E5E5"> to so what we'll do</font><font color="#CCCCCC"> is we'll go</font>

541
00:28:31,080 --> 00:28:38,299
here<font color="#CCCCCC"> and we'll edit</font><font color="#E5E5E5"> the handlers here we</font>

542
00:28:34,830 --> 00:28:43,649
have<font color="#E5E5E5"> NS URL connection underscore in it</font>

543
00:28:38,299 --> 00:28:46,200
<font color="#E5E5E5">with request once</font><font color="#CCCCCC"> again we have the</font>

544
00:28:43,649 --> 00:28:48,059
<font color="#CCCCCC">unanswering</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> lee functions note</font><font color="#E5E5E5"> that</font>

545
00:28:46,200 --> 00:28:52,380
feeder<font color="#E5E5E5"> has made a guess for the names of</font>

546
00:28:48,059 --> 00:28:56,039
<font color="#E5E5E5">the arguments in this function when the</font>

547
00:28:52,380 --> 00:28:58,500
log because<font color="#E5E5E5"> in Objective C the function</font>

548
00:28:56,039 --> 00:29:00,000
<font color="#CCCCCC">of the function</font><font color="#E5E5E5"> argument names are part</font>

549
00:28:58,500 --> 00:29:02,279
of<font color="#E5E5E5"> the function prototype</font><font color="#CCCCCC"> var the</font>

550
00:29:00,000 --> 00:29:04,019
<font color="#CCCCCC">function</font><font color="#E5E5E5"> name so we know what they</font><font color="#CCCCCC"> are</font>

551
00:29:02,279 --> 00:29:07,820
so we<font color="#CCCCCC"> can guess them and freida can</font>

552
00:29:04,019 --> 00:29:10,799
output<font color="#E5E5E5"> like it did here</font><font color="#CCCCCC"> can output the</font>

553
00:29:07,820 --> 00:29:14,928
<font color="#E5E5E5">arguments one after each</font><font color="#CCCCCC"> other at the</font>

554
00:29:10,799 --> 00:29:17,789
right place<font color="#E5E5E5"> in the prints</font>

555
00:29:14,929 --> 00:29:20,070
notice that our argument starts here at

556
00:29:17,789 --> 00:29:22,769
args<font color="#E5E5E5"> - that's because Objective C</font>

557
00:29:20,070 --> 00:29:25,889
functions have<font color="#E5E5E5"> the first argument is the</font>

558
00:29:22,769 --> 00:29:28,440
<font color="#E5E5E5">self or this pointer and the second</font>

559
00:29:25,889 --> 00:29:29,879
argument is<font color="#CCCCCC"> this</font><font color="#E5E5E5"> method selector which</font>

560
00:29:28,440 --> 00:29:32,610
selects which method<font color="#E5E5E5"> is actually being</font>

561
00:29:29,879 --> 00:29:35,959
executed<font color="#E5E5E5"> so we have to skip</font><font color="#CCCCCC"> two in order</font>

562
00:29:32,610 --> 00:29:43,139
<font color="#E5E5E5">to get to</font><font color="#CCCCCC"> the actual arguments</font><font color="#E5E5E5"> to the</font>

563
00:29:35,960 --> 00:29:46,190
<font color="#E5E5E5">objective-c function method so if we go</font>

564
00:29:43,139 --> 00:29:46,189
and<font color="#CCCCCC"> look at the</font>

565
00:29:48,649 --> 00:30:03,619
nsurl connection in it with<font color="#E5E5E5"> requests</font>

566
00:29:52,220 --> 00:30:07,230
<font color="#E5E5E5">documentation in its with requests</font>

567
00:30:03,619 --> 00:30:10,649
<font color="#E5E5E5">documentation</font><font color="#CCCCCC"> ok we can see that the</font>

568
00:30:07,230 --> 00:30:14,639
request<font color="#E5E5E5"> parameter is an nsurl request</font>

569
00:30:10,649 --> 00:30:16,768
object<font color="#CCCCCC"> ok what we</font><font color="#E5E5E5"> needed</font><font color="#CCCCCC"> to do is we</font>

570
00:30:14,639 --> 00:30:20,189
<font color="#E5E5E5">need to tell</font><font color="#CCCCCC"> Freda</font><font color="#E5E5E5"> that this first</font>

571
00:30:16,769 --> 00:30:22,860
argument<font color="#E5E5E5"> is an objective-c class</font>

572
00:30:20,190 --> 00:30:28,710
instance so we do is we say<font color="#CCCCCC"> objective-c</font>

573
00:30:22,860 --> 00:30:29,820
<font color="#E5E5E5">that object on</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> x2 and what this does</font>

574
00:30:28,710 --> 00:30:32,669
is it tells<font color="#E5E5E5"> Freda</font>

575
00:30:29,820 --> 00:30:35,820
that we want<font color="#E5E5E5"> to treat this pointer as an</font>

576
00:30:32,669 --> 00:30:37,440
objective-c<font color="#E5E5E5"> instance then we can access</font>

577
00:30:35,820 --> 00:30:40,320
<font color="#E5E5E5">the properties and methods</font><font color="#CCCCCC"> of that</font>

578
00:30:37,440 --> 00:30:42,389
instance by simply calling<font color="#E5E5E5"> properties</font>

579
00:30:40,320 --> 00:30:44,399
and methods on the<font color="#CCCCCC"> Java</font><font color="#E5E5E5"> car on the</font>

580
00:30:42,389 --> 00:30:50,008
JavaScript instance

581
00:30:44,399 --> 00:30:51,840
<font color="#CCCCCC">okay now</font><font color="#E5E5E5"> init with requests</font><font color="#CCCCCC"> true</font>

582
00:30:50,009 --> 00:30:53,369
receives an nsurl request so let's click

583
00:30:51,840 --> 00:30:56,970
<font color="#E5E5E5">on nsurl request to get its</font>

584
00:30:53,369 --> 00:30:58,860
documentation<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> interested in the</font>

585
00:30:56,970 --> 00:31:01,070
<font color="#CCCCCC">request properties so we're going</font><font color="#E5E5E5"> to</font>

586
00:30:58,860 --> 00:31:04,469
click on<font color="#E5E5E5"> getting</font><font color="#CCCCCC"> request properties</font>

587
00:31:01,070 --> 00:31:07,759
<font color="#E5E5E5">we'll scroll</font><font color="#CCCCCC"> down a bit and we'll see</font>

588
00:31:04,470 --> 00:31:11,820
<font color="#E5E5E5">that there is</font><font color="#CCCCCC"> a property called URL</font>

589
00:31:07,759 --> 00:31:14,460
which gives us the requests<font color="#E5E5E5"> URL which is</font>

590
00:31:11,820 --> 00:31:20,700
<font color="#E5E5E5">exactly what we're interested in</font><font color="#CCCCCC"> okay so</font>

591
00:31:14,460 --> 00:31:25,519
we'll go<font color="#CCCCCC"> here and</font><font color="#E5E5E5"> we'll say dot dot URL</font>

592
00:31:20,700 --> 00:31:28,440
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we want the URL property ok</font>

593
00:31:25,519 --> 00:31:31,679
the URL<font color="#E5E5E5"> is an nsurl</font>

594
00:31:28,440 --> 00:31:35,340
object instance<font color="#CCCCCC"> ok so let's click</font><font color="#E5E5E5"> on</font>

595
00:31:31,679 --> 00:31:41,340
nsurl to go to its documentation<font color="#CCCCCC"> ok</font>

596
00:31:35,340 --> 00:31:43,049
we're interested<font color="#CCCCCC"> in the URL</font><font color="#E5E5E5"> itself ok</font>

597
00:31:41,340 --> 00:31:48,480
that's being used<font color="#E5E5E5"> so we can click on</font>

598
00:31:43,049 --> 00:31:50,340
<font color="#E5E5E5">accessing the parts of the URL ok and</font>

599
00:31:48,480 --> 00:31:52,440
the first property here is something

600
00:31:50,340 --> 00:31:55,470
called absolute string which gives us

601
00:31:52,440 --> 00:31:57,720
the<font color="#CCCCCC"> URL string for the receiver as an</font>

602
00:31:55,470 --> 00:32:01,570
absolute URL<font color="#E5E5E5"> ok which seems to be</font>

603
00:31:57,720 --> 00:32:08,320
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we want</font><font color="#E5E5E5"> so we'll add</font>

604
00:32:01,570 --> 00:32:10,060
the absolute string<font color="#E5E5E5"> okay now the</font>

605
00:32:08,320 --> 00:32:12,689
absolute string is already an<font color="#E5E5E5"> nsstring</font>

606
00:32:10,060 --> 00:32:14,950
objects<font color="#CCCCCC"> freedom</font><font color="#E5E5E5"> knows to automatically</font>

607
00:32:12,690 --> 00:32:17,140
<font color="#E5E5E5">convert between</font><font color="#CCCCCC"> NS strings</font><font color="#E5E5E5"> and</font>

608
00:32:14,950 --> 00:32:19,480
<font color="#E5E5E5">JavaScript strings so we're done we</font>

609
00:32:17,140 --> 00:32:23,440
don't<font color="#E5E5E5"> have to worry about retrieving</font><font color="#CCCCCC"> the</font>

610
00:32:19,480 --> 00:32:27,580
bytes from<font color="#E5E5E5"> the NS string so if we go</font>

611
00:32:23,440 --> 00:32:33,220
here<font color="#CCCCCC"> and save our file</font><font color="#E5E5E5"> and we go and</font><font color="#CCCCCC"> we</font>

612
00:32:27,580 --> 00:32:37,629
pull down on<font color="#E5E5E5"> Twitter again no I didn't</font>

613
00:32:33,220 --> 00:32:41,080
pull down<font color="#E5E5E5"> okay pull down we now see that</font>

614
00:32:37,630 --> 00:32:45,510
<font color="#CCCCCC">within it with request</font><font color="#E5E5E5"> prints the full</font>

615
00:32:41,080 --> 00:32:45,510
<font color="#E5E5E5">URL that we're trying to access</font>

616
00:32:54,800 --> 00:33:00,080
so that's cool<font color="#CCCCCC"> but we're actually</font>

617
00:32:57,600 --> 00:33:02,250
interested<font color="#E5E5E5"> in the payloads of these</font>

618
00:33:00,080 --> 00:33:08,399
requests<font color="#E5E5E5"> the data that's coming down</font>

619
00:33:02,250 --> 00:33:11,730
from the server<font color="#E5E5E5"> so we're gonna move</font><font color="#CCCCCC"> to</font>

620
00:33:08,400 --> 00:33:14,400
<font color="#CCCCCC">Frieda</font><font color="#E5E5E5"> with a script now</font>

621
00:33:11,730 --> 00:33:16,260
because it's easier<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us to write more</font>

622
00:33:14,400 --> 00:33:19,130
complex<font color="#E5E5E5"> code more complex</font>

623
00:33:16,260 --> 00:33:21,270
instrumentation code in a script file

624
00:33:19,130 --> 00:33:22,680
<font color="#CCCCCC">not within the Frieda phrase context</font>

625
00:33:21,270 --> 00:33:26,129
because we're no longer<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be just</font>

626
00:33:22,680 --> 00:33:28,560
tracing we want to actually<font color="#E5E5E5"> perform some</font>

627
00:33:26,130 --> 00:33:30,420
analysis of<font color="#E5E5E5"> the classes</font><font color="#CCCCCC"> and instances to</font>

628
00:33:28,560 --> 00:33:36,840
get the data that's coming<font color="#E5E5E5"> out of the</font>

629
00:33:30,420 --> 00:33:41,180
<font color="#E5E5E5">system so we'll just start a</font><font color="#CCCCCC"> new file</font>

630
00:33:36,840 --> 00:33:44,790
called<font color="#CCCCCC"> shouta phi dot</font><font color="#E5E5E5"> c dot</font><font color="#CCCCCC"> javascript</font>

631
00:33:41,180 --> 00:33:47,790
<font color="#E5E5E5">okay and the first thing that we want to</font>

632
00:33:44,790 --> 00:33:49,860
<font color="#E5E5E5">do is we want to get the handle to the</font>

633
00:33:47,790 --> 00:33:53,670
<font color="#E5E5E5">objective-c method that we're interested</font>

634
00:33:49,860 --> 00:33:56,790
in<font color="#E5E5E5"> okay before we saw find export by</font>

635
00:33:53,670 --> 00:33:58,740
name<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> methods are not</font>

636
00:33:56,790 --> 00:34:00,180
necessarily exported by the application

637
00:33:58,740 --> 00:34:01,320
so you<font color="#CCCCCC"> can't just</font><font color="#E5E5E5"> use finder export by</font>

638
00:34:00,180 --> 00:34:05,100
name okay

639
00:34:01,320 --> 00:34:09,650
but the<font color="#E5E5E5"> object C API in</font><font color="#CCCCCC"> Frieda lets you</font>

640
00:34:05,100 --> 00:34:14,839
easily access those classes and methods

641
00:34:09,650 --> 00:34:20,210
<font color="#E5E5E5">so what we do is we say Objective C dot</font>

642
00:34:14,840 --> 00:34:20,210
<font color="#E5E5E5">classes dot</font>

643
00:34:21,329 --> 00:34:28,720
<font color="#E5E5E5">ass URL connection whoops</font>

644
00:34:25,210 --> 00:34:39,629
connection okay and we were interested

645
00:34:28,719 --> 00:34:39,629
<font color="#E5E5E5">in the internal in it with requests</font>

646
00:34:40,440 --> 00:34:45,149
function prototype<font color="#E5E5E5"> I'm just copying it</font>

647
00:34:42,579 --> 00:34:45,149
<font color="#CCCCCC">from here okay</font>

648
00:34:47,440 --> 00:34:54,539
and now<font color="#CCCCCC"> we'll delete the argument values</font>

649
00:34:56,369 --> 00:35:02,140
to get<font color="#E5E5E5"> the method signature</font><font color="#CCCCCC"> the reason I</font>

650
00:34:59,230 --> 00:35:04,089
have to<font color="#CCCCCC"> do</font><font color="#E5E5E5"> this is because this is an</font>

651
00:35:02,140 --> 00:35:09,690
undocumented internal function<font color="#CCCCCC"> an</font>

652
00:35:04,089 --> 00:35:11,940
internal method<font color="#E5E5E5"> so Freda has no problem</font>

653
00:35:09,690 --> 00:35:15,240
numerating and

654
00:35:11,940 --> 00:35:21,579
accessing internal undocumented methods

655
00:35:15,240 --> 00:35:23,890
but<font color="#CCCCCC"> we kept</font><font color="#E5E5E5"> it you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> copy the data</font>

656
00:35:21,579 --> 00:35:25,420
like this the name like<font color="#E5E5E5"> this because</font>

657
00:35:23,890 --> 00:35:28,319
it's not<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> just copy it</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font>

658
00:35:25,420 --> 00:35:28,319
<font color="#CCCCCC">Apple</font><font color="#E5E5E5"> documentation</font>

659
00:35:39,170 --> 00:35:42,170
<font color="#E5E5E5">okay</font>

660
00:35:45,120 --> 00:35:54,779
and we need to have here a<font color="#E5E5E5"> - because</font>

661
00:35:49,140 --> 00:35:57,629
it's a class method<font color="#CCCCCC"> okay we now have a</font>

662
00:35:54,780 --> 00:36:00,660
method<font color="#CCCCCC"> a method VAR variable which is a</font>

663
00:35:57,630 --> 00:36:04,050
pointer<font color="#E5E5E5"> to the instance variable sorry</font><font color="#CCCCCC"> -</font>

664
00:36:00,660 --> 00:36:07,560
the class method<font color="#CCCCCC"> in it with request</font>

665
00:36:04,050 --> 00:36:10,380
<font color="#E5E5E5">delegate etc etc etc</font><font color="#CCCCCC"> okay so now we want</font>

666
00:36:07,560 --> 00:36:14,190
<font color="#CCCCCC">to intercept that method</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we go</font>

667
00:36:10,380 --> 00:36:21,630
interceptor dot<font color="#CCCCCC"> attached and we'll go to</font>

668
00:36:14,190 --> 00:36:32,340
the methods implementation okay<font color="#CCCCCC"> and we</font>

669
00:36:21,630 --> 00:36:33,480
want to hook the on enter function okay

670
00:36:32,340 --> 00:36:38,360
and what<font color="#E5E5E5"> we're going to do is we're just</font>

671
00:36:33,480 --> 00:36:42,600
<font color="#E5E5E5">going to say console dot log in its URL</font>

672
00:36:38,360 --> 00:36:48,390
<font color="#E5E5E5">connection and we're gonna once more</font>

673
00:36:42,600 --> 00:36:55,830
have our<font color="#CCCCCC"> objective see that args that</font>

674
00:36:48,390 --> 00:36:58,160
objects args<font color="#CCCCCC"> -</font><font color="#E5E5E5"> to our l dot absolute</font>

675
00:36:55,830 --> 00:36:58,160
string

676
00:37:02,260 --> 00:37:12,700
<font color="#E5E5E5">okay we'll save that and</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> will rerun</font>

677
00:37:09,250 --> 00:37:15,790
<font color="#CCCCCC">Frieda on Twitter with the shadow five</font>

678
00:37:12,700 --> 00:37:19,299
scripts we're attached

679
00:37:15,790 --> 00:37:23,230
let's pull down<font color="#CCCCCC"> we pull down</font><font color="#E5E5E5"> and we see</font>

680
00:37:19,300 --> 00:37:27,180
<font color="#E5E5E5">our nsurl connection being hooked now</font>

681
00:37:23,230 --> 00:37:31,869
the way<font color="#E5E5E5"> that nsurl connection works is</font>

682
00:37:27,180 --> 00:37:34,960
that it<font color="#E5E5E5"> implements access to network</font>

683
00:37:31,869 --> 00:37:36,910
resources<font color="#E5E5E5"> asynchronously what happens is</font>

684
00:37:34,960 --> 00:37:39,460
you pass to the function<font color="#CCCCCC"> nsurl</font>

685
00:37:36,910 --> 00:37:42,700
<font color="#E5E5E5">connection in it with request you pass a</font>

686
00:37:39,460 --> 00:37:47,770
delegate object<font color="#E5E5E5"> the delegate instance to</font>

687
00:37:42,700 --> 00:37:49,930
that object and the<font color="#CCCCCC"> Objective C factory</font>

688
00:37:47,770 --> 00:37:52,540
class and as your connection<font color="#E5E5E5"> will call</font>

689
00:37:49,930 --> 00:37:55,299
methods on<font color="#CCCCCC"> that delegate objects</font><font color="#E5E5E5"> when</font>

690
00:37:52,540 --> 00:37:58,750
data<font color="#CCCCCC"> is received from the</font><font color="#E5E5E5"> server for</font>

691
00:37:55,300 --> 00:38:00,820
example<font color="#E5E5E5"> okay the delegate needs to</font>

692
00:37:58,750 --> 00:38:05,350
implement<font color="#CCCCCC"> the nsurl connection data</font>

693
00:38:00,820 --> 00:38:06,640
delegate protocol where and what we're

694
00:38:05,350 --> 00:38:08,410
going<font color="#CCCCCC"> to do is what we want to</font><font color="#E5E5E5"> do is</font>

695
00:38:06,640 --> 00:38:12,069
we're going<font color="#CCCCCC"> to implement a proxy object</font>

696
00:38:08,410 --> 00:38:13,899
<font color="#E5E5E5">okay which will insert at nsurl</font>

697
00:38:12,070 --> 00:38:15,970
connection creation time are you with at

698
00:38:13,900 --> 00:38:19,359
the<font color="#CCCCCC"> init with</font><font color="#E5E5E5"> request delegate creation</font>

699
00:38:15,970 --> 00:38:23,069
time<font color="#E5E5E5"> call time we'll insert a proxy</font>

700
00:38:19,359 --> 00:38:25,810
object which will sit between<font color="#E5E5E5"> the</font>

701
00:38:23,070 --> 00:38:30,130
original delegates and the<font color="#E5E5E5"> NS URL</font>

702
00:38:25,810 --> 00:38:33,880
connection implementation<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and that</font>

703
00:38:30,130 --> 00:38:36,030
<font color="#E5E5E5">NS ural connection delegate that proxy</font>

704
00:38:33,880 --> 00:38:40,900
will implement<font color="#E5E5E5"> the NS URL connection</font>

705
00:38:36,030 --> 00:38:42,369
<font color="#E5E5E5">dotted delegates protocol okay</font><font color="#CCCCCC"> it seems</font>

706
00:38:40,900 --> 00:38:45,580
<font color="#E5E5E5">complicated but it's</font><font color="#CCCCCC"> actually really</font>

707
00:38:42,369 --> 00:38:47,980
simple<font color="#E5E5E5"> and it's really to be easy to do</font>

708
00:38:45,580 --> 00:38:52,440
in<font color="#CCCCCC"> Freda as well because</font><font color="#E5E5E5"> all we have to</font>

709
00:38:47,980 --> 00:38:52,440
do is go

710
00:38:55,240 --> 00:39:07,169
<font color="#CCCCCC">VAR my delegates is equal to Objective C</font>

711
00:39:01,859 --> 00:39:07,170
dot proxy dot register proxy

712
00:39:14,140 --> 00:39:18,999
<font color="#E5E5E5">okay and we want to tell it</font><font color="#CCCCCC"> that we're</font>

713
00:39:16,839 --> 00:39:25,328
interested in<font color="#E5E5E5"> implementing these</font>

714
00:39:18,999 --> 00:39:27,038
protocols<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Objective</font><font color="#E5E5E5"> C dot protocols</font>

715
00:39:25,329 --> 00:39:28,539
which gives<font color="#E5E5E5"> us a list of all the</font>

716
00:39:27,039 --> 00:39:33,970
protocols<font color="#E5E5E5"> that are available in this</font>

717
00:39:28,539 --> 00:39:37,749
<font color="#E5E5E5">application dot</font><font color="#CCCCCC"> nsurl</font><font color="#E5E5E5"> connection data</font>

718
00:39:33,970 --> 00:39:39,488
<font color="#E5E5E5">delegates okay we can obviously</font>

719
00:39:37,749 --> 00:39:45,700
<font color="#E5E5E5">implement more than one protocol that's</font>

720
00:39:39,489 --> 00:39:49,599
<font color="#E5E5E5">why we have a list there okay if we save</font>

721
00:39:45,700 --> 00:39:51,970
that<font color="#E5E5E5"> okay and then come over here</font><font color="#CCCCCC"> into</font>

722
00:39:49,599 --> 00:39:53,410
<font color="#E5E5E5">our</font><font color="#CCCCCC"> on enter of the method</font>

723
00:39:51,970 --> 00:39:56,109
implementation and what<font color="#E5E5E5"> we want to do is</font>

724
00:39:53,410 --> 00:39:59,140
we want to switch<font color="#E5E5E5"> the arguments for the</font>

725
00:39:56,109 --> 00:40:03,549
delegates<font color="#E5E5E5"> with an instance of our new</font>

726
00:39:59,140 --> 00:40:06,910
dot delegate proxy okay<font color="#CCCCCC"> and so what we</font>

727
00:40:03,549 --> 00:40:11,680
do is we say args 3 which is the

728
00:40:06,910 --> 00:40:17,319
delegates is<font color="#E5E5E5"> equal to new my delegates</font>

729
00:40:11,680 --> 00:40:23,470
<font color="#E5E5E5">and we'll wrap the original args 3 will</font>

730
00:40:17,319 --> 00:40:26,259
pass<font color="#E5E5E5"> empty context</font><font color="#CCCCCC"> ok now our instance</font>

731
00:40:23,470 --> 00:40:29,470
<font color="#CCCCCC">will be sitting in between the nsurl</font>

732
00:40:26,259 --> 00:40:32,380
<font color="#E5E5E5">connection class and the actual delegate</font>

733
00:40:29,470 --> 00:40:35,078
the original applications delegates<font color="#CCCCCC"> okay</font>

734
00:40:32,380 --> 00:40:38,440
<font color="#E5E5E5">notice how we just used Java scripts new</font>

735
00:40:35,079 --> 00:40:40,569
instance<font color="#E5E5E5"> call and behind the scenes will</font>

736
00:40:38,440 --> 00:40:43,690
automatically be transformed into the

737
00:40:40,569 --> 00:40:45,190
correct<font color="#E5E5E5"> objective-c magic that needs to</font>

738
00:40:43,690 --> 00:40:46,869
<font color="#CCCCCC">happen in order</font><font color="#E5E5E5"> to create an instance of</font>

739
00:40:45,190 --> 00:40:48,730
our<font color="#E5E5E5"> object our objectives the object</font>

740
00:40:46,869 --> 00:40:51,099
<font color="#E5E5E5">it's all transparent from our</font>

741
00:40:48,730 --> 00:41:01,059
perspective<font color="#CCCCCC"> ok</font>

742
00:40:51,099 --> 00:41:03,609
let's reload<font color="#E5E5E5"> and test it again</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> we see</font>

743
00:41:01,059 --> 00:41:06,190
that<font color="#E5E5E5"> nothing additional actually happens</font>

744
00:41:03,609 --> 00:41:08,410
why because although we've implemented a

745
00:41:06,190 --> 00:41:11,230
proxy object and we inserted<font color="#E5E5E5"> a between</font>

746
00:41:08,410 --> 00:41:13,239
the<font color="#CCCCCC"> ministerial connection class and the</font>

747
00:41:11,230 --> 00:41:14,920
original application<font color="#CCCCCC"> delegate</font><font color="#E5E5E5"> we haven't</font>

748
00:41:13,239 --> 00:41:16,390
actually done anything with any of<font color="#E5E5E5"> the</font>

749
00:41:14,920 --> 00:41:22,140
<font color="#CCCCCC">methods okay</font>

750
00:41:16,390 --> 00:41:22,140
<font color="#E5E5E5">we're interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> a method called</font>

751
00:41:27,690 --> 00:41:43,950
in a method<font color="#E5E5E5"> called connection did</font>

752
00:41:34,980 --> 00:41:48,450
receive data<font color="#E5E5E5"> okay that's a callback that</font>

753
00:41:43,950 --> 00:41:50,279
<font color="#CCCCCC">is called on the delegate when the</font><font color="#E5E5E5"> SQL</font>

754
00:41:48,450 --> 00:41:56,370
collection class receives data<font color="#CCCCCC"> from the</font>

755
00:41:50,280 --> 00:41:57,840
app<font color="#E5E5E5"> stream URL your resource okay now</font>

756
00:41:56,370 --> 00:41:59,790
what we do here as we say okay we want

757
00:41:57,840 --> 00:42:02,040
<font color="#CCCCCC">to</font><font color="#E5E5E5"> handle</font><font color="#CCCCCC"> the connection did</font><font color="#E5E5E5"> receive</font>

758
00:41:59,790 --> 00:42:05,070
<font color="#E5E5E5">data function we have two arguments</font><font color="#CCCCCC"> the</font>

759
00:42:02,040 --> 00:42:07,080
connection and the data<font color="#E5E5E5"> okay so we'll</font>

760
00:42:05,070 --> 00:42:11,000
say<font color="#E5E5E5"> that this is a JavaScript function</font>

761
00:42:07,080 --> 00:42:11,000
<font color="#E5E5E5">which receives a connection and data</font>

762
00:42:11,090 --> 00:42:15,930
okay

763
00:42:12,270 --> 00:42:23,210
and the first thing that<font color="#E5E5E5"> we're going to</font>

764
00:42:15,930 --> 00:42:23,210
do is we're gonna log console that<font color="#E5E5E5"> log</font>

765
00:42:24,560 --> 00:42:35,490
in connection did receive data<font color="#CCCCCC"> okay and</font>

766
00:42:33,300 --> 00:42:38,690
then what we're going<font color="#E5E5E5"> to do is we want</font>

767
00:42:35,490 --> 00:42:43,080
to<font color="#E5E5E5"> now you know</font><font color="#CCCCCC"> we've hooked</font><font color="#E5E5E5"> the method</font>

768
00:42:38,690 --> 00:42:45,120
but<font color="#E5E5E5"> we want to pass on the connection</font>

769
00:42:43,080 --> 00:42:47,279
and<font color="#E5E5E5"> the data to the original delegate</font>

770
00:42:45,120 --> 00:42:49,819
object as well<font color="#E5E5E5"> okay so that the</font>

771
00:42:47,280 --> 00:42:55,680
application<font color="#E5E5E5"> will receive the data okay</font>

772
00:42:49,820 --> 00:43:01,640
<font color="#E5E5E5">so what we do is we say this data</font>

773
00:42:55,680 --> 00:43:05,879
the targets<font color="#E5E5E5"> dot connection did receive</font>

774
00:43:01,640 --> 00:43:09,470
data and we pass on<font color="#E5E5E5"> the connection and</font>

775
00:43:05,880 --> 00:43:18,950
data to the original delegate instance

776
00:43:09,470 --> 00:43:18,950
<font color="#CCCCCC">okay if we reload</font><font color="#E5E5E5"> and pull down</font>

777
00:43:19,370 --> 00:43:25,450
<font color="#CCCCCC">oh I've made</font><font color="#E5E5E5"> a mistake</font>

778
00:43:33,590 --> 00:43:40,640
yeah this is missing an s methods<font color="#E5E5E5"> why</font>

779
00:43:37,280 --> 00:43:42,740
don't not anybody notice I'm

780
00:43:40,640 --> 00:43:47,600
disappointed

781
00:43:42,740 --> 00:43:52,580
<font color="#E5E5E5">it's rerun Twitter okay</font>

782
00:43:47,600 --> 00:43:54,670
and<font color="#E5E5E5"> we'll restart</font><font color="#CCCCCC"> free</font><font color="#E5E5E5"> that and we'll</font>

783
00:43:52,580 --> 00:43:56,930
pull down

784
00:43:54,670 --> 00:43:58,340
okay now<font color="#CCCCCC"> we're receiving our in</font>

785
00:43:56,930 --> 00:44:00,440
connection did receive<font color="#E5E5E5"> data so now our</font>

786
00:43:58,340 --> 00:44:06,140
<font color="#CCCCCC">our mechanism is working we're able to</font>

787
00:44:00,440 --> 00:44:10,130
hook the asynchronous callbacks<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

788
00:44:06,140 --> 00:44:13,520
ascent by nsurl connection<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> because</font>

789
00:44:10,130 --> 00:44:16,070
<font color="#CCCCCC">it's asynchronous we might get these in</font>

790
00:44:13,520 --> 00:44:18,140
connection did receive data<font color="#E5E5E5"> prints at</font>

791
00:44:16,070 --> 00:44:21,440
any time and we<font color="#CCCCCC"> don't know necessarily</font>

792
00:44:18,140 --> 00:44:23,870
which nsurl connection which URL

793
00:44:21,440 --> 00:44:26,150
resource they<font color="#E5E5E5"> related</font><font color="#CCCCCC"> to so let's print</font>

794
00:44:23,870 --> 00:44:28,700
<font color="#E5E5E5">the URL</font><font color="#CCCCCC"> that is related</font><font color="#E5E5E5"> to the specific</font>

795
00:44:26,150 --> 00:44:33,230
<font color="#E5E5E5">in connection did receive connection did</font>

796
00:44:28,700 --> 00:44:37,569
receive data<font color="#CCCCCC"> callback</font><font color="#E5E5E5"> okay again this is</font>

797
00:44:33,230 --> 00:44:37,570
ready this<font color="#E5E5E5"> is every simple we'll just go</font>

798
00:44:39,460 --> 00:44:45,050
<font color="#E5E5E5">consult</font><font color="#CCCCCC"> that log</font><font color="#E5E5E5"> but we'll save</font><font color="#CCCCCC"> it in a</font>

799
00:44:42,560 --> 00:44:51,830
variable<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we need later VAR URL</font>

800
00:44:45,050 --> 00:44:57,350
is equal to the connections<font color="#CCCCCC"> current</font>

801
00:44:51,830 --> 00:45:01,640
<font color="#E5E5E5">request which is a NS your request so we</font>

802
00:44:57,350 --> 00:45:05,390
<font color="#E5E5E5">know it can</font><font color="#CCCCCC"> do URL and we can go</font>

803
00:45:01,640 --> 00:45:07,609
absolute string and now we want to

804
00:45:05,390 --> 00:45:15,549
<font color="#E5E5E5">actually force it to cost to a</font>

805
00:45:07,610 --> 00:45:15,550
<font color="#E5E5E5">JavaScript string</font><font color="#CCCCCC"> okay let's log that</font>

806
00:45:22,970 --> 00:45:31,970
and<font color="#E5E5E5"> we'll save and we'll reload and</font>

807
00:45:28,339 --> 00:45:34,069
we'll pull down<font color="#E5E5E5"> okay and</font><font color="#CCCCCC"> now we get</font><font color="#E5E5E5"> the</font>

808
00:45:31,970 --> 00:45:39,890
URL<font color="#E5E5E5"> of the particularly in</font><font color="#CCCCCC"> connection</font>

809
00:45:34,069 --> 00:45:41,808
did receive data<font color="#E5E5E5"> let's look at the data</font>

810
00:45:39,890 --> 00:45:44,180
itself<font color="#E5E5E5"> that's what we're interested in</font>

811
00:45:41,809 --> 00:45:47,270
right<font color="#E5E5E5"> we don't know what format the data</font>

812
00:45:44,180 --> 00:45:51,950
takes<font color="#E5E5E5"> so what we'll do is we'll hex dump</font>

813
00:45:47,270 --> 00:45:57,759
<font color="#CCCCCC">its</font><font color="#E5E5E5"> so that we can see what it looks</font>

814
00:45:51,950 --> 00:46:02,299
<font color="#E5E5E5">like so we'll just go hex dump of the</font>

815
00:45:57,760 --> 00:46:03,799
<font color="#CCCCCC">Dada's bytes</font><font color="#E5E5E5"> which gives you from the NS</font>

816
00:46:02,299 --> 00:46:06,650
data object<font color="#E5E5E5"> the instance that we have</font>

817
00:46:03,799 --> 00:46:09,470
there it gives<font color="#E5E5E5"> you the</font><font color="#CCCCCC"> actual byte array</font>

818
00:46:06,650 --> 00:46:17,930
in memory<font color="#E5E5E5"> and we'll say that</font><font color="#CCCCCC"> we're</font>

819
00:46:09,470 --> 00:46:20,319
<font color="#CCCCCC">interested in the length being da-da-da</font>

820
00:46:17,930 --> 00:46:20,319
<font color="#E5E5E5">length</font>

821
00:46:22,480 --> 00:46:30,430
reload<font color="#CCCCCC"> pulldown and now we get a hex</font>

822
00:46:28,480 --> 00:46:33,250
dump<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the actual</font><font color="#E5E5E5"> data being received</font>

823
00:46:30,430 --> 00:46:36,100
<font color="#E5E5E5">now this is</font><font color="#CCCCCC"> just two bytes here</font><font color="#E5E5E5"> and it</font>

824
00:46:33,250 --> 00:46:38,530
looks<font color="#CCCCCC"> like an empty array</font><font color="#E5E5E5"> okay now this</font>

825
00:46:36,100 --> 00:46:42,670
makes<font color="#CCCCCC"> sense because</font><font color="#E5E5E5"> if we look here at</font>

826
00:46:38,530 --> 00:46:46,350
the URL<font color="#CCCCCC"> that's being requested</font><font color="#E5E5E5"> it says</font>

827
00:46:42,670 --> 00:46:49,000
home<font color="#CCCCCC"> time line dot</font><font color="#E5E5E5"> JSON okay so it's</font>

828
00:46:46,350 --> 00:46:52,660
makes sense that we have here a JSON RPC

829
00:46:49,000 --> 00:46:57,040
<font color="#E5E5E5">API okay or REST API our own office rest</font>

830
00:46:52,660 --> 00:47:01,180
exactly but it's a JSON based remote

831
00:46:57,040 --> 00:47:03,400
procedure call mechanism<font color="#E5E5E5"> okay so we</font>

832
00:47:01,180 --> 00:47:04,660
actually<font color="#E5E5E5"> know that these data is going</font>

833
00:47:03,400 --> 00:47:06,609
<font color="#E5E5E5">to be</font><font color="#CCCCCC"> a string so we don't</font><font color="#E5E5E5"> have to</font>

834
00:47:04,660 --> 00:47:08,859
bother with<font color="#E5E5E5"> the hex dump</font><font color="#CCCCCC"> we can go</font><font color="#E5E5E5"> right</font>

835
00:47:06,609 --> 00:47:10,869
<font color="#E5E5E5">ahead and read</font><font color="#CCCCCC"> it as a string</font><font color="#E5E5E5"> so let's</font>

836
00:47:08,859 --> 00:47:17,560
do that<font color="#CCCCCC"> instead of the hex dump</font>

837
00:47:10,869 --> 00:47:25,590
we'll go<font color="#CCCCCC"> VAR</font><font color="#E5E5E5"> data in is equal to memory</font>

838
00:47:17,560 --> 00:47:28,450
read utf-8 string on the<font color="#E5E5E5"> dollars bytes</font>

839
00:47:25,590 --> 00:47:31,890
<font color="#E5E5E5">now because this</font><font color="#CCCCCC"> is being delivered over</font>

840
00:47:28,450 --> 00:47:37,509
the<font color="#E5E5E5"> network and it has explicit length</font>

841
00:47:31,890 --> 00:47:40,930
<font color="#E5E5E5">in the content length header of the HTTP</font>

842
00:47:37,510 --> 00:47:43,630
request<font color="#E5E5E5"> or response rather it's not</font>

843
00:47:40,930 --> 00:47:45,730
necessarily a<font color="#CCCCCC"> null terminated string so</font>

844
00:47:43,630 --> 00:47:49,210
<font color="#E5E5E5">we have to tell the memory that really</font>

845
00:47:45,730 --> 00:47:51,220
<font color="#CCCCCC">of</font><font color="#E5E5E5"> a string function how long the string</font>

846
00:47:49,210 --> 00:47:53,880
is otherwise it<font color="#E5E5E5"> will depend garbage or</font>

847
00:47:51,220 --> 00:48:00,270
<font color="#CCCCCC">we'll try</font><font color="#E5E5E5"> to decode the garbage</font>

848
00:47:53,880 --> 00:48:00,270
so we'll just go data dot length here

849
00:48:02,220 --> 00:48:18,149
and let's print it so<font color="#CCCCCC"> we'll go consult</font>

850
00:48:06,640 --> 00:48:23,980
<font color="#E5E5E5">that log dot it in and start in save</font>

851
00:48:18,150 --> 00:48:26,499
<font color="#E5E5E5">reload pull down and now we see the dot</font>

852
00:48:23,980 --> 00:48:29,410
<font color="#CCCCCC">a okay</font><font color="#E5E5E5"> but the moment we're only getting</font>

853
00:48:26,499 --> 00:48:31,959
blank data in because there's no tweets

854
00:48:29,410 --> 00:48:35,190
coming<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> account</font><font color="#E5E5E5"> so let's send the</font>

855
00:48:31,960 --> 00:48:37,900
tweets<font color="#E5E5E5"> from an accounts which is</font>

856
00:48:35,190 --> 00:48:40,269
followed by<font color="#E5E5E5"> the account that you used to</font>

857
00:48:37,900 --> 00:48:43,990
log<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> application and see what an</font>

858
00:48:40,269 --> 00:48:47,769
actual tweet looks like so<font color="#E5E5E5"> I have a</font>

859
00:48:43,990 --> 00:48:52,828
Twitter account here which is used<font color="#E5E5E5"> for</font>

860
00:48:47,769 --> 00:48:58,029
<font color="#E5E5E5">testing and we can say</font><font color="#CCCCCC"> okay hi there</font>

861
00:48:52,829 --> 00:49:02,529
besides<font color="#CCCCCC"> writes and I'll just show you</font>

862
00:48:58,029 --> 00:49:06,999
that<font color="#E5E5E5"> when I tweet that it's immediately</font>

863
00:49:02,529 --> 00:49:11,529
<font color="#E5E5E5">received by the Twitter</font><font color="#CCCCCC"> application but</font>

864
00:49:06,999 --> 00:49:14,799
there's no activity it's kind of strange

865
00:49:11,529 --> 00:49:16,720
<font color="#CCCCCC">what's going</font><font color="#E5E5E5"> on over here let's try a</font>

866
00:49:14,799 --> 00:49:26,339
mention maybe mentions the treated

867
00:49:16,720 --> 00:49:31,269
differently so ago yo dummy<font color="#E5E5E5"> test 4004</font>

868
00:49:26,339 --> 00:49:33,538
what's up right<font color="#E5E5E5"> and we'll send it</font>

869
00:49:31,269 --> 00:49:41,379
immediately received by the application

870
00:49:33,539 --> 00:49:45,910
<font color="#E5E5E5">once more no</font><font color="#CCCCCC"> Dada</font><font color="#E5E5E5"> what's going on so if</font>

871
00:49:41,380 --> 00:49:47,710
we think about<font color="#E5E5E5"> it we and we were Twitter</font>

872
00:49:45,910 --> 00:49:49,299
<font color="#E5E5E5">we wouldn't actually</font><font color="#CCCCCC"> want an empty to</font>

873
00:49:47,710 --> 00:49:52,989
implement an API which<font color="#CCCCCC"> have to do</font>

874
00:49:49,299 --> 00:49:56,230
<font color="#E5E5E5">polling of a server in order to retrieve</font>

875
00:49:52,989 --> 00:49:58,329
tweets<font color="#CCCCCC"> okay for two</font><font color="#E5E5E5"> reasons first it</font>

876
00:49:56,230 --> 00:50:01,329
<font color="#CCCCCC">means that there is</font><font color="#E5E5E5"> a delay between the</font>

877
00:49:58,329 --> 00:50:03,549
<font color="#E5E5E5">tweets being published and between them</font>

878
00:50:01,329 --> 00:50:06,700
being received by<font color="#E5E5E5"> the current</font>

879
00:50:03,549 --> 00:50:08,769
application<font color="#E5E5E5"> and also if you have a</font>

880
00:50:06,700 --> 00:50:11,890
polling mechanism<font color="#E5E5E5"> that means that there</font>

881
00:50:08,769 --> 00:50:14,319
<font color="#CCCCCC">are millions of users out</font><font color="#E5E5E5"> there who are</font>

882
00:50:11,890 --> 00:50:16,480
<font color="#E5E5E5">hammering your HTTP server</font>

883
00:50:14,320 --> 00:50:18,880
all the time<font color="#E5E5E5"> in order to get new tweets</font>

884
00:50:16,480 --> 00:50:22,810
<font color="#E5E5E5">so instead of doing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> what they do is</font>

885
00:50:18,880 --> 00:50:24,670
is they have a<font color="#CCCCCC"> long-lived connection</font>

886
00:50:22,810 --> 00:50:27,730
they connect at the beginning<font color="#E5E5E5"> of the</font>

887
00:50:24,670 --> 00:50:30,880
applications lifetime<font color="#E5E5E5"> to a given HTTP</font>

888
00:50:27,730 --> 00:50:32,770
API<font color="#E5E5E5"> endpoint and then what happens is is</font>

889
00:50:30,880 --> 00:50:36,150
they they wait for<font color="#CCCCCC"> new bytes to come</font>

890
00:50:32,770 --> 00:50:38,710
down<font color="#CCCCCC"> their pipe</font><font color="#E5E5E5"> and that</font><font color="#CCCCCC"> way the</font><font color="#E5E5E5"> Twitter</font>

891
00:50:36,150 --> 00:50:42,190
backends<font color="#E5E5E5"> can actually push daughter down</font>

892
00:50:38,710 --> 00:50:45,630
the HTTP connection to the Twitter

893
00:50:42,190 --> 00:50:50,140
application<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> even though there's no</font>

894
00:50:45,630 --> 00:50:52,330
push channel in HTTP 1.1<font color="#E5E5E5"> they can use</font>

895
00:50:50,140 --> 00:50:56,910
this long live connection mechanism<font color="#E5E5E5"> in</font>

896
00:50:52,330 --> 00:50:59,259
order to do<font color="#E5E5E5"> to do this kind of behavior</font>

897
00:50:56,910 --> 00:51:04,899
<font color="#CCCCCC">so what we need to do is we need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> hook</font>

898
00:50:59,260 --> 00:51:07,090
the function nsurl connection in it with

899
00:51:04,900 --> 00:51:09,880
<font color="#CCCCCC">request</font><font color="#E5E5E5"> at the very beginning of the</font>

900
00:51:07,090 --> 00:51:13,930
<font color="#E5E5E5">twitter applications lifetime</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> in</font>

901
00:51:09,880 --> 00:51:16,480
order<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to hook that intercept</font>

902
00:51:13,930 --> 00:51:19,870
interest instruments that long-lived

903
00:51:16,480 --> 00:51:21,790
connection so what we want<font color="#E5E5E5"> to do</font>

904
00:51:19,870 --> 00:51:23,080
<font color="#CCCCCC">actually is instead of attaching to a</font>

905
00:51:21,790 --> 00:51:25,029
<font color="#E5E5E5">running instance or</font><font color="#CCCCCC"> Twitter</font>

906
00:51:23,080 --> 00:51:28,020
we<font color="#E5E5E5"> want to spawn Twitter on on our own</font>

907
00:51:25,030 --> 00:51:33,880
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> okay freida knows how to do</font><font color="#E5E5E5"> that</font>

908
00:51:28,020 --> 00:51:38,710
<font color="#E5E5E5">will stop the</font><font color="#CCCCCC"> Freda</font><font color="#E5E5E5"> rebel and I'll just</font>

909
00:51:33,880 --> 00:51:40,630
quit<font color="#E5E5E5"> Twitter here and now we'll go</font><font color="#CCCCCC"> Freda</font>

910
00:51:38,710 --> 00:51:42,340
<font color="#E5E5E5">and we're interested</font><font color="#CCCCCC"> in running</font><font color="#E5E5E5"> the</font>

911
00:51:40,630 --> 00:51:47,740
<font color="#E5E5E5">Twitter application but we have to</font>

912
00:51:42,340 --> 00:51:52,630
<font color="#CCCCCC">specify that</font><font color="#E5E5E5"> full path to</font><font color="#CCCCCC"> the executable</font>

913
00:51:47,740 --> 00:51:57,160
now<font color="#E5E5E5"> okay and we're interested in loading</font>

914
00:51:52,630 --> 00:52:02,980
a script called<font color="#E5E5E5"> shot if I okay</font><font color="#CCCCCC"> and we'll</font>

915
00:51:57,160 --> 00:52:05,770
run that what<font color="#E5E5E5"> just happened we executed</font>

916
00:52:02,980 --> 00:52:08,530
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Twitter app but we executed it in a</font>

917
00:52:05,770 --> 00:52:10,390
suspend mode<font color="#E5E5E5"> so the first instruction of</font>

918
00:52:08,530 --> 00:52:14,080
the Twitter application is not yet being

919
00:52:10,390 --> 00:52:15,670
run okay<font color="#E5E5E5"> what</font><font color="#CCCCCC"> Freda has done is it's run</font>

920
00:52:14,080 --> 00:52:18,310
it in suspended mode and then given us

921
00:52:15,670 --> 00:52:20,890
<font color="#E5E5E5">control run our little script that</font>

922
00:52:18,310 --> 00:52:22,779
<font color="#CCCCCC">satify in the background</font><font color="#E5E5E5"> and dropped us</font>

923
00:52:20,890 --> 00:52:25,420
on the repple<font color="#E5E5E5"> so that we can make</font>

924
00:52:22,780 --> 00:52:27,940
<font color="#CCCCCC">additional changes if</font><font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to the</font>

925
00:52:25,420 --> 00:52:30,700
environments before<font color="#E5E5E5"> Twitter's at</font>

926
00:52:27,940 --> 00:52:32,680
style<font color="#E5E5E5"> running what we have to do to get</font>

927
00:52:30,700 --> 00:52:37,089
<font color="#E5E5E5">to the run is we have to use the resume</font>

928
00:52:32,680 --> 00:52:38,620
<font color="#CCCCCC">commands magic commands</font><font color="#E5E5E5"> and once we hit</font>

929
00:52:37,090 --> 00:52:39,430
resume the tour application will

930
00:52:38,620 --> 00:52:42,190
actually load

931
00:52:39,430 --> 00:52:44,410
<font color="#CCCCCC">we'll hit resume oh and we see the</font>

932
00:52:42,190 --> 00:52:46,330
Twitter application<font color="#E5E5E5"> loaded</font><font color="#CCCCCC"> if we look in</font>

933
00:52:44,410 --> 00:52:52,240
<font color="#CCCCCC">our output</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> see a whole bunch</font><font color="#E5E5E5"> of</font>

934
00:52:46,330 --> 00:52:59,009
activity now<font color="#E5E5E5"> okay but that's now send</font>

935
00:52:52,240 --> 00:52:59,009
our tweets hopefully we<font color="#CCCCCC"> should see this</font>

936
00:52:59,520 --> 00:53:06,660
<font color="#E5E5E5">okay</font>

937
00:53:01,050 --> 00:53:09,400
<font color="#E5E5E5">receive them immediately and this time I</font>

938
00:53:06,660 --> 00:53:13,620
have to decrease<font color="#E5E5E5"> the font a little bit</font>

939
00:53:09,400 --> 00:53:13,620
<font color="#E5E5E5">sorry let's try that again</font>

940
00:53:24,310 --> 00:53:29,130
<font color="#CCCCCC">it's just miss just clipping off the</font>

941
00:53:26,620 --> 00:53:29,130
side there

942
00:53:29,790 --> 00:53:36,279
<font color="#E5E5E5">okay here we can see the text with the</font>

943
00:53:34,090 --> 00:53:40,000
<font color="#CCCCCC">tweaked text there</font><font color="#E5E5E5"> so now we have seeing</font>

944
00:53:36,280 --> 00:53:41,470
tweets awesome<font color="#E5E5E5"> what are we trying to do</font>

945
00:53:40,000 --> 00:53:45,250
again<font color="#E5E5E5"> we're trying</font><font color="#CCCCCC"> to shout if I ooh</font>

946
00:53:41,470 --> 00:53:48,129
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> what we're trying to</font><font color="#E5E5E5"> do is we're</font>

947
00:53:45,250 --> 00:53:49,540
trying<font color="#E5E5E5"> to defy the application so what</font>

948
00:53:48,130 --> 00:53:51,610
we're going to do is very<font color="#CCCCCC"> very quickly</font>

949
00:53:49,540 --> 00:53:54,670
because<font color="#E5E5E5"> I'm running out of time we're</font>

950
00:53:51,610 --> 00:54:03,900
<font color="#CCCCCC">just</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> use a we're going to say</font>

951
00:53:54,670 --> 00:54:03,900
if<font color="#E5E5E5"> the URL dot if the URL the index of</font>

952
00:54:03,960 --> 00:54:22,140
user<font color="#CCCCCC"> jason i if we have the user</font><font color="#E5E5E5"> jason</font>

953
00:54:13,450 --> 00:54:25,680
<font color="#E5E5E5">in our URL string</font><font color="#CCCCCC"> we'll do VAR data out</font>

954
00:54:22,140 --> 00:54:28,420
is<font color="#E5E5E5"> equal</font><font color="#CCCCCC"> to dollar in dot replace and</font>

955
00:54:25,680 --> 00:54:37,020
we'll use<font color="#CCCCCC"> a</font><font color="#E5E5E5"> regular expression just to</font>

956
00:54:28,420 --> 00:54:37,020
modify the text<font color="#E5E5E5"> we're looking for text</font><font color="#CCCCCC"> :</font>

957
00:54:42,020 --> 00:54:48,350
not not

958
00:55:01,590 --> 00:55:06,630
and we want to<font color="#E5E5E5"> find all</font><font color="#CCCCCC"> of those with so</font>

959
00:55:04,080 --> 00:55:08,640
we'll drop<font color="#CCCCCC"> the minus</font><font color="#E5E5E5"> G and what we do is</font>

960
00:55:06,630 --> 00:55:12,510
we want<font color="#E5E5E5"> to call a function which</font>

961
00:55:08,640 --> 00:55:14,629
receives<font color="#E5E5E5"> all a B and C sorry that I'm</font>

962
00:55:12,510 --> 00:55:18,450
<font color="#CCCCCC">rushing this to just run out of time and</font>

963
00:55:14,630 --> 00:55:29,580
what we'll do<font color="#E5E5E5"> is we'll return a plus B</font>

964
00:55:18,450 --> 00:55:40,680
dot to uppercase plus C<font color="#E5E5E5"> okay we'll print</font>

965
00:55:29,580 --> 00:55:42,840
our data out okay if we then we<font color="#E5E5E5"> have to</font>

966
00:55:40,680 --> 00:55:44,129
restart<font color="#CCCCCC"> frida</font><font color="#E5E5E5"> and the Twitter</font>

967
00:55:42,840 --> 00:55:46,350
application<font color="#E5E5E5"> again because we've made</font>

968
00:55:44,130 --> 00:55:51,690
modifications to that<font color="#E5E5E5"> we'll run that</font>

969
00:55:46,350 --> 00:55:57,589
will resume<font color="#E5E5E5"> wait for it to finish</font>

970
00:55:51,690 --> 00:55:57,590
loading<font color="#CCCCCC"> initial loading</font><font color="#E5E5E5"> okay</font>

971
00:56:00,059 --> 00:56:06,759
tweet some garbage<font color="#E5E5E5"> okay and now we see</font>

972
00:56:03,670 --> 00:56:08,380
<font color="#E5E5E5">that the text</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> sheriff</font><font color="#CCCCCC"> ID</font><font color="#E5E5E5"> but it's</font>

973
00:56:06,759 --> 00:56:10,210
still not shadow file in the application

974
00:56:08,380 --> 00:56:12,490
why because we haven't<font color="#E5E5E5"> passed that</font>

975
00:56:10,210 --> 00:56:14,559
information on<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the original delegates</font>

976
00:56:12,490 --> 00:56:18,038
<font color="#E5E5E5">okay so what we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is we need</font><font color="#CCCCCC"> to</font>

977
00:56:14,559 --> 00:56:21,730
create<font color="#E5E5E5"> an NS data objects instance with</font>

978
00:56:18,039 --> 00:56:25,450
that new data in order<font color="#E5E5E5"> to pass it on to</font>

979
00:56:21,730 --> 00:56:30,089
the to the override the original data<font color="#E5E5E5"> so</font>

980
00:56:25,450 --> 00:56:36,788
we'll say Dada<font color="#CCCCCC"> is equal to</font><font color="#E5E5E5"> Objective C</font>

981
00:56:30,089 --> 00:56:40,900
classes<font color="#E5E5E5"> dot NS data and we're</font><font color="#CCCCCC"> interested</font>

982
00:56:36,789 --> 00:56:50,289
in we're going<font color="#E5E5E5"> to use the data with by</font>

983
00:56:40,900 --> 00:56:57,009
its length function<font color="#E5E5E5"> to take the data out</font>

984
00:56:50,289 --> 00:56:58,180
and the data<font color="#E5E5E5"> outs length okay now the</font>

985
00:56:57,009 --> 00:57:00,190
thing<font color="#CCCCCC"> is we can't actually just passed</font>

986
00:56:58,180 --> 00:57:02,500
<font color="#E5E5E5">out because data out is this JavaScript</font>

987
00:57:00,190 --> 00:57:05,650
string we need to give this function a

988
00:57:02,500 --> 00:57:06,670
pointer<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> C string or utf-8 string so</font>

989
00:57:05,650 --> 00:57:09,069
<font color="#E5E5E5">we have to do is we have to actually</font>

990
00:57:06,670 --> 00:57:11,890
<font color="#CCCCCC">allocate memory within a target process</font>

991
00:57:09,069 --> 00:57:15,640
<font color="#E5E5E5">in order to pass this per the string on</font>

992
00:57:11,890 --> 00:57:20,710
to the NS data constructor<font color="#E5E5E5"> that's not a</font>

993
00:57:15,640 --> 00:57:23,259
problem all we<font color="#CCCCCC"> need to do is go</font><font color="#E5E5E5"> VAR a is</font>

994
00:57:20,710 --> 00:57:26,980
equal<font color="#E5E5E5"> to memory a lock</font>

995
00:57:23,259 --> 00:57:29,490
utf-8<font color="#E5E5E5"> string and we'll pass it our data</font>

996
00:57:26,980 --> 00:57:32,980
out string and it will<font color="#E5E5E5"> generate the</font>

997
00:57:29,490 --> 00:57:38,288
<font color="#CCCCCC">utf-8 string at a new location</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> memory</font>

998
00:57:32,980 --> 00:57:44,799
<font color="#E5E5E5">and now we can pass</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> on to the data</font>

999
00:57:38,289 --> 00:57:54,460
<font color="#CCCCCC">both bytes will stop the Freda and</font>

1000
00:57:44,799 --> 00:57:56,920
<font color="#CCCCCC">Twitter</font><font color="#E5E5E5"> rerun its resume and just</font><font color="#CCCCCC"> over</font>

1001
00:57:54,460 --> 00:58:01,480
here<font color="#CCCCCC"> we'll wait for it to calm down a</font>

1002
00:57:56,920 --> 00:58:03,809
<font color="#CCCCCC">bit and we'll type this should be shot</font>

1003
00:58:01,480 --> 00:58:03,809
if<font color="#E5E5E5"> ID</font>

1004
00:58:04,720 --> 00:58:10,500
and boom<font color="#E5E5E5"> awesome right</font>

1005
00:58:10,800 --> 00:58:20,770
our entire script is what<font color="#CCCCCC"> 20 something</font>

1006
00:58:18,070 --> 00:58:24,240
lines of<font color="#CCCCCC"> JavaScript with all the</font><font color="#E5E5E5"> d'bari</font>

1007
00:58:20,770 --> 00:58:24,240
outputs<font color="#CCCCCC"> okay</font>

1008
00:58:29,530 --> 00:58:36,800
so that was pretty cool<font color="#CCCCCC"> so just to</font>

1009
00:58:34,910 --> 00:58:38,509
summarize<font color="#E5E5E5"> I hope that this</font><font color="#CCCCCC"> short</font>

1010
00:58:36,800 --> 00:58:40,370
presentation was really<font color="#E5E5E5"> short</font><font color="#CCCCCC"> just an</font>

1011
00:58:38,510 --> 00:58:42,140
hour<font color="#CCCCCC"> has demonstrated the power of</font>

1012
00:58:40,370 --> 00:58:44,270
<font color="#CCCCCC">Frieda and the utility that it provides</font>

1013
00:58:42,140 --> 00:58:46,129
<font color="#E5E5E5">and the functionality</font><font color="#CCCCCC"> that it provides</font>

1014
00:58:44,270 --> 00:58:48,259
in order to be able<font color="#E5E5E5"> to instrument target</font>

1015
00:58:46,130 --> 00:58:52,490
processes<font color="#E5E5E5"> using relatively easy to write</font>

1016
00:58:48,260 --> 00:58:55,460
JavaScript<font color="#E5E5E5"> functions okay</font><font color="#CCCCCC"> it really does</font>

1017
00:58:52,490 --> 00:58:59,740
provide the capabilities<font color="#CCCCCC"> to explore</font>

1018
00:58:55,460 --> 00:59:03,050
attack and build<font color="#CCCCCC"> useful tools around</font>

1019
00:58:59,740 --> 00:59:05,689
<font color="#CCCCCC">processes obviously there's a</font><font color="#E5E5E5"> lot more</font>

1020
00:59:03,050 --> 00:59:07,130
to Frieda<font color="#E5E5E5"> then what we've shown just now</font>

1021
00:59:05,690 --> 00:59:09,110
there's a lot<font color="#E5E5E5"> more functionality we</font>

1022
00:59:07,130 --> 00:59:11,630
haven't shown the<font color="#CCCCCC"> apt growing we could</font>

1023
00:59:09,110 --> 00:59:16,610
have used the same<font color="#E5E5E5"> hooking mechanism on</font>

1024
00:59:11,630 --> 00:59:19,670
the iPhone app as well<font color="#CCCCCC"> but there's</font>

1025
00:59:16,610 --> 00:59:20,630
plenty<font color="#CCCCCC"> more to learn Frieda I recommend</font>

1026
00:59:19,670 --> 00:59:23,060
that if<font color="#CCCCCC"> you want to find more</font>

1027
00:59:20,630 --> 00:59:25,180
documentation<font color="#E5E5E5"> or tutorials you can hit</font>

1028
00:59:23,060 --> 00:59:27,770
up<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this site video there</font><font color="#CCCCCC"> are e or</font>

1029
00:59:25,180 --> 00:59:29,109
you can find us on github at github.com

1030
00:59:27,770 --> 00:59:33,020
slash<font color="#CCCCCC"> Frieda</font>

1031
00:59:29,110 --> 00:59:35,120
if you want help getting<font color="#E5E5E5"> started or</font>

1032
00:59:33,020 --> 00:59:37,670
<font color="#E5E5E5">you're encountered some difficulty or</font>

1033
00:59:35,120 --> 00:59:40,160
<font color="#CCCCCC">you're you</font><font color="#E5E5E5"> think you found a bug</font><font color="#CCCCCC"> because</font>

1034
00:59:37,670 --> 00:59:41,510
there there are bugs<font color="#CCCCCC"> if you think you</font>

1035
00:59:40,160 --> 00:59:45,230
found a<font color="#E5E5E5"> bug or whatever it is you can</font>

1036
00:59:41,510 --> 00:59:48,370
either contact<font color="#E5E5E5"> us via issues on github</font>

1037
00:59:45,230 --> 00:59:50,180
or we're very active in the<font color="#CCCCCC"> Frieda</font>

1038
00:59:48,370 --> 00:59:53,450
channel on freenode

1039
00:59:50,180 --> 00:59:56,799
IRC channel on freenode<font color="#CCCCCC"> and we're</font><font color="#E5E5E5"> happy</font>

1040
00:59:53,450 --> 01:00:01,509
<font color="#CCCCCC">to help anybody who who needs help there</font>

1041
00:59:56,800 --> 01:00:01,510
that's all<font color="#E5E5E5"> of</font><font color="#CCCCCC"> God's questions anyone</font>

1042
01:00:02,080 --> 01:00:06,400
<font color="#CCCCCC">excellent</font><font color="#E5E5E5"> so thank you</font>

