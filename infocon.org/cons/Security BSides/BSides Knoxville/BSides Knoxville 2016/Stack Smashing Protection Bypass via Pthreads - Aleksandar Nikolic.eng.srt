1
00:00:06,200 --> 00:00:10,769
so we get<font color="#CCCCCC"> that there's there's an Aegis</font>

2
00:00:08,550 --> 00:00:13,889
right we get<font color="#E5E5E5"> that much it's nighttime</font>

3
00:00:10,769 --> 00:00:18,480
English footers ninjas maybe you want to

4
00:00:13,889 --> 00:00:20,850
start out with<font color="#E5E5E5"> a little bit yeah well as</font>

5
00:00:18,480 --> 00:00:23,640
I<font color="#E5E5E5"> said ninjas are popular ninjas are</font>

6
00:00:20,850 --> 00:00:26,310
good for some reason they were hugely

7
00:00:23,640 --> 00:00:29,130
hugely popular in serbia during the

8
00:00:26,310 --> 00:00:31,409
eighties when the this is from a movie

9
00:00:29,130 --> 00:00:34,379
<font color="#CCCCCC">called how rock and roll died and it</font>

10
00:00:31,410 --> 00:00:36,710
combines some guy came up<font color="#E5E5E5"> with an idea</font>

11
00:00:34,380 --> 00:00:39,480
<font color="#E5E5E5">of making a band that combines ninjas</font>

12
00:00:36,710 --> 00:00:44,100
mrs. and surrounding ninjas and tour

13
00:00:39,480 --> 00:00:47,218
before core rather full pop music<font color="#CCCCCC"> it's a</font>

14
00:00:44,100 --> 00:00:48,989
hilarious movie<font color="#CCCCCC"> i would recommend check</font>

15
00:00:47,219 --> 00:00:51,000
it out but<font color="#CCCCCC"> i'm not sure</font><font color="#E5E5E5"> it's even</font>

16
00:00:48,989 --> 00:00:57,019
available somewhere or if there's a

17
00:00:51,000 --> 00:01:01,500
translation but piece<font color="#CCCCCC"> of local lower so</font>

18
00:00:57,020 --> 00:01:06,049
I'm Alex I come from Serbia I'm part of

19
00:01:01,500 --> 00:01:09,600
the talus vulnerability development team

20
00:01:06,049 --> 00:01:13,350
my team at Talos at Cisco tells does the

21
00:01:09,600 --> 00:01:15,658
zero-day research we are tasked with

22
00:01:13,350 --> 00:01:18,330
finding vulnerabilities in commodity

23
00:01:15,659 --> 00:01:21,270
software you can see some our work at

24
00:01:18,330 --> 00:01:25,200
our website under vulnerability reports

25
00:01:21,270 --> 00:01:28,048
or some of<font color="#E5E5E5"> our open source software and</font>

26
00:01:25,200 --> 00:01:32,340
some tools that<font color="#E5E5E5"> we've developed at this</font>

27
00:01:28,049 --> 00:01:35,579
github link so what am I going<font color="#CCCCCC"> to talk</font>

28
00:01:32,340 --> 00:01:38,369
about today<font color="#E5E5E5"> is basically a walk through</font>

29
00:01:35,579 --> 00:01:42,179
to this neat little vulnerable to that

30
00:01:38,369 --> 00:01:46,439
we found in a upnp library

31
00:01:42,180 --> 00:01:48,750
implementation some of the things that

32
00:01:46,439 --> 00:01:50,339
<font color="#E5E5E5">make this vulnerability interesting and</font>

33
00:01:48,750 --> 00:01:52,640
some<font color="#E5E5E5"> of the things that make the</font>

34
00:01:50,340 --> 00:01:55,189
exploitation itself interesting

35
00:01:52,640 --> 00:01:57,540
exploiting this vulnerability required

36
00:01:55,189 --> 00:02:00,600
stack smashing protection bypass which

37
00:01:57,540 --> 00:02:03,270
makes it somewhat interesting as a

38
00:02:00,600 --> 00:02:07,619
showcase so really<font color="#E5E5E5"> quickly i'll go and</font>

39
00:02:03,270 --> 00:02:11,420
make an overview of<font color="#CCCCCC"> upnp how the</font>

40
00:02:07,619 --> 00:02:12,520
protocol works just as a refresher

41
00:02:11,420 --> 00:02:14,640
european

42
00:02:12,520 --> 00:02:18,490
p is generally designed to be run on

43
00:02:14,640 --> 00:02:21,250
residential networks usually as a way

44
00:02:18,490 --> 00:02:26,020
and a set<font color="#CCCCCC"> of protocols for network</font>

45
00:02:21,250 --> 00:02:29,070
discovery for usually doing poor

46
00:02:26,020 --> 00:02:33,310
forwarding staff media streaming and

47
00:02:29,070 --> 00:02:38,739
things like that it runs the top it's

48
00:02:33,310 --> 00:02:41,620
built on top of<font color="#CCCCCC"> ssdp HTTP each uses soap</font>

49
00:02:38,740 --> 00:02:46,540
with<font color="#CCCCCC"> XML of course and all bunch of</font>

50
00:02:41,620 --> 00:02:50,220
fancy words they're the most the usual

51
00:02:46,540 --> 00:02:53,620
way the most used feature of upnp is

52
00:02:50,220 --> 00:02:58,500
applications that want to make incoming

53
00:02:53,620 --> 00:03:01,090
connections inside a lamp<font color="#CCCCCC"> like</font>

54
00:02:58,500 --> 00:03:04,390
applications behind an app that want to

55
00:03:01,090 --> 00:03:07,960
set up port forwarding on a gateway or

56
00:03:04,390 --> 00:03:11,230
whatever so it's usually mostly popular

57
00:03:07,960 --> 00:03:14,550
with peer-to-peer applications like

58
00:03:11,230 --> 00:03:17,399
torrent clients cryptocurrencies and

59
00:03:14,550 --> 00:03:20,140
stuff like that<font color="#CCCCCC"> wherever</font><font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to</font>

60
00:03:17,400 --> 00:03:22,660
<font color="#E5E5E5">basically accept incoming connections</font>

61
00:03:20,140 --> 00:03:26,140
into our local network<font color="#E5E5E5"> that there would</font>

62
00:03:22,660 --> 00:03:31,079
be some form of<font color="#E5E5E5"> upnp support for port</font>

63
00:03:26,140 --> 00:03:34,380
forwarding probably how does<font color="#E5E5E5"> that work</font>

64
00:03:31,080 --> 00:03:37,060
basically the connecting application

65
00:03:34,380 --> 00:03:41,950
usually on startup sends out a broadcast

66
00:03:37,060 --> 00:03:45,580
UDP packet specifying the packet is

67
00:03:41,950 --> 00:03:48,489
called<font color="#CCCCCC"> M search it just says I'm</font><font color="#E5E5E5"> new on</font>

68
00:03:45,580 --> 00:03:51,430
<font color="#E5E5E5">this network can you please tell</font><font color="#CCCCCC"> me what</font>

69
00:03:48,490 --> 00:03:53,470
kind of upnp functionality to the

70
00:03:51,430 --> 00:03:56,770
<font color="#E5E5E5">support it sends it to broadcast</font>

71
00:03:53,470 --> 00:03:59,920
received replies client parses the

72
00:03:56,770 --> 00:04:06,610
replies and then chooses to which of the

73
00:03:59,920 --> 00:04:09,640
upnp n points to connect briefly in a

74
00:04:06,610 --> 00:04:12,880
few Wireshark screenshot it looks like

75
00:04:09,640 --> 00:04:15,220
<font color="#E5E5E5">this the first packet des</font><font color="#CCCCCC"> Plantes client</font>

76
00:04:12,880 --> 00:04:21,510
sends out the M search<font color="#CCCCCC"> request to this</font>

77
00:04:15,220 --> 00:04:21,510
obviously broadcast you address or UDP

78
00:04:21,540 --> 00:04:27,430
next the

79
00:04:23,320 --> 00:04:30,340
server replies the reply<font color="#E5E5E5"> contains one</font>

80
00:04:27,430 --> 00:04:33,160
Heather called location header which

81
00:04:30,340 --> 00:04:36,250
just has an IP address a port and a

82
00:04:33,160 --> 00:04:38,260
location of an<font color="#E5E5E5"> XML file that actually</font>

83
00:04:36,250 --> 00:04:43,000
contains the description of the devices

84
00:04:38,260 --> 00:04:46,300
capabilities and the client then

85
00:04:43,000 --> 00:04:49,000
proceeds to fetch that XML and proceeded

86
00:04:46,300 --> 00:04:53,620
to parse it to see what what it can

87
00:04:49,000 --> 00:04:55,780
<font color="#CCCCCC">actually do so this is</font><font color="#E5E5E5"> basically County</font>

88
00:04:53,620 --> 00:04:59,170
XML works there's a bunch of information

89
00:04:55,780 --> 00:05:03,460
<font color="#E5E5E5">there are my colleague Martin's</font><font color="#CCCCCC"> I sir</font>

90
00:04:59,170 --> 00:05:06,400
did some interesting research which<font color="#E5E5E5"> upnp</font>

91
00:05:03,460 --> 00:05:08,650
scanning over the<font color="#CCCCCC"> Internet presented at</font>

92
00:05:06,400 --> 00:05:11,200
this year's packsack conference so if

93
00:05:08,650 --> 00:05:13,780
that's of your<font color="#CCCCCC"> interest</font><font color="#E5E5E5"> you can look it</font>

94
00:05:11,200 --> 00:05:17,710
up we're not<font color="#CCCCCC"> going to deal with the</font>

95
00:05:13,780 --> 00:05:20,739
details<font color="#CCCCCC"> of the XML so obviously this</font>

96
00:05:17,710 --> 00:05:25,210
poses a an attack surface to the<font color="#E5E5E5"> client</font>

97
00:05:20,740 --> 00:05:28,840
application client fetches the XML and

98
00:05:25,210 --> 00:05:32,400
<font color="#CCCCCC">starts parsonage the parser is exposed</font>

99
00:05:28,840 --> 00:05:35,409
<font color="#E5E5E5">to the Expos external XML files and</font>

100
00:05:32,400 --> 00:05:39,299
we've come to the fun part here because

101
00:05:35,410 --> 00:05:42,580
most upnp library implementations for

102
00:05:39,300 --> 00:05:45,430
various reasons come with their own XML

103
00:05:42,580 --> 00:05:49,479
parser implementations they're not using

104
00:05:45,430 --> 00:05:53,050
lived xml they have their homegrown<font color="#E5E5E5"> XML</font>

105
00:05:49,480 --> 00:05:58,720
parses and we know for some reason XML

106
00:05:53,050 --> 00:06:00,520
is hard to parse so on<font color="#CCCCCC"> one hand it means</font>

107
00:05:58,720 --> 00:06:03,510
for developers there is less

108
00:06:00,520 --> 00:06:06,159
dependencies because these libraries are

109
00:06:03,510 --> 00:06:08,050
intended for embedded devices you don't

110
00:06:06,160 --> 00:06:10,570
want to put a lot<font color="#E5E5E5"> of dependencies so</font>

111
00:06:08,050 --> 00:06:13,900
they're small complete libraries and<font color="#CCCCCC"> on</font>

112
00:06:10,570 --> 00:06:16,030
<font color="#CCCCCC">behalf</font><font color="#E5E5E5"> other hand we as attackers know</font>

113
00:06:13,900 --> 00:06:20,109
that this means less audited less

114
00:06:16,030 --> 00:06:23,650
audited less trusted code so i took a

115
00:06:20,110 --> 00:06:26,260
look<font color="#CCCCCC"> i</font><font color="#E5E5E5"> took a look especially this mini</font>

116
00:06:23,650 --> 00:06:30,219
PMP client which is if<font color="#CCCCCC"> not first the</font>

117
00:06:26,260 --> 00:06:32,530
second most popular mini<font color="#CCCCCC"> upnp</font>

118
00:06:30,220 --> 00:06:35,530
implementation out there it's a

119
00:06:32,530 --> 00:06:36,280
relatively small library self-contained

120
00:06:35,530 --> 00:06:41,020
and

121
00:06:36,280 --> 00:06:43,840
piles and basically everything so what's

122
00:06:41,020 --> 00:06:47,549
actually using<font color="#E5E5E5"> it a couple of examples</font>

123
00:06:43,840 --> 00:06:50,289
here as<font color="#CCCCCC"> I mentioned</font><font color="#E5E5E5"> torrent clients</font>

124
00:06:47,550 --> 00:06:52,750
almost all torrent clients we are using

125
00:06:50,290 --> 00:06:54,190
it here I give a transmission as an

126
00:06:52,750 --> 00:06:56,560
example on the other<font color="#E5E5E5"> hand</font>

127
00:06:54,190 --> 00:07:01,270
cryptocurrencies all Bitcoin

128
00:06:56,560 --> 00:07:05,800
implementations are using medium<font color="#CCCCCC"> upnp to</font>

129
00:07:01,270 --> 00:07:09,310
do their bidding<font color="#E5E5E5"> and</font><font color="#CCCCCC"> toward used to and</font>

130
00:07:05,800 --> 00:07:10,900
there's a file fact with<font color="#E5E5E5"> tor you solid</font>

131
00:07:09,310 --> 00:07:14,080
so right around the time I started

132
00:07:10,900 --> 00:07:16,479
<font color="#E5E5E5">looking at community PMP I took a look</font>

133
00:07:14,080 --> 00:07:19,120
at what's actually using it and tour had

134
00:07:16,480 --> 00:07:21,730
this tool called tor firewall helper

135
00:07:19,120 --> 00:07:24,640
which does what it says in the<font color="#E5E5E5"> box it</font>

136
00:07:21,730 --> 00:07:26,560
pierces through firewalls sets up port

137
00:07:24,640 --> 00:07:31,090
forwarding and it did that using<font color="#E5E5E5"> me new</font>

138
00:07:26,560 --> 00:07:33,460
P&P when<font color="#E5E5E5"> I found a vulnerability I went</font>

139
00:07:31,090 --> 00:07:36,820
back<font color="#CCCCCC"> to check out the torrent music how</font>

140
00:07:33,460 --> 00:07:38,680
the tour uses it and found this message

141
00:07:36,820 --> 00:07:41,740
waiting for me there they're basically

142
00:07:38,680 --> 00:07:44,620
<font color="#E5E5E5">removed the tool and</font><font color="#CCCCCC"> left a message</font><font color="#E5E5E5"> that</font>

143
00:07:41,740 --> 00:07:48,880
didn't trust the underlying girl I

144
00:07:44,620 --> 00:07:52,500
<font color="#CCCCCC">Barry's enough to have them run on their</font>

145
00:07:48,880 --> 00:07:55,750
software this wasn't used by default but

146
00:07:52,500 --> 00:08:00,280
would have been interesting either<font color="#E5E5E5"> way</font>

147
00:07:55,750 --> 00:08:02,650
<font color="#E5E5E5">so they rewrote their their firewall</font>

148
00:08:00,280 --> 00:08:08,799
helper tool and go and then went<font color="#CCCCCC"> off</font>

149
00:08:02,650 --> 00:08:11,710
from there I honestly<font color="#E5E5E5"> don't look it up</font>

150
00:08:08,800 --> 00:08:14,200
but<font color="#E5E5E5"> for some reason didn't occur to me</font>

151
00:08:11,710 --> 00:08:16,479
to check it could be<font color="#CCCCCC"> interesting to</font><font color="#E5E5E5"> see</font>

152
00:08:14,200 --> 00:08:18,760
it was a definitely good decision

153
00:08:16,479 --> 00:08:21,520
because they have some critical code

154
00:08:18,760 --> 00:08:24,550
running there even though<font color="#E5E5E5"> it was in</font>

155
00:08:21,520 --> 00:08:27,120
<font color="#E5E5E5">front by default a good decision to have</font>

156
00:08:24,550 --> 00:08:32,950
<font color="#CCCCCC">something like</font><font color="#E5E5E5"> that rewritten in a</font>

157
00:08:27,120 --> 00:08:35,320
manageable language so the you already

158
00:08:32,950 --> 00:08:37,719
see where this is all going it's<font color="#CCCCCC"> a</font>

159
00:08:35,320 --> 00:08:41,020
<font color="#E5E5E5">vulnerability that I'm showcasing is</font>

160
00:08:37,719 --> 00:08:43,570
just a vanilla buffer overflow in the

161
00:08:41,020 --> 00:08:46,250
<font color="#E5E5E5">XML parser stack buffer overflow in the</font>

162
00:08:43,570 --> 00:08:49,820
XML parser its tributary

163
00:08:46,250 --> 00:08:53,870
triggered by just sending the overly

164
00:08:49,820 --> 00:08:56,810
long xml element name<font color="#E5E5E5"> it's been patched</font>

165
00:08:53,870 --> 00:09:00,770
since<font color="#E5E5E5"> October the first last year and</font>

166
00:08:56,810 --> 00:09:02,750
has<font color="#CCCCCC"> this EV a little bit of the</font>

167
00:09:00,770 --> 00:09:06,170
vulnerability itself here we see<font color="#CCCCCC"> the</font>

168
00:09:02,750 --> 00:09:09,470
parser initialization we set<font color="#CCCCCC"> up a couple</font>

169
00:09:06,170 --> 00:09:12,140
of callback functions we<font color="#CCCCCC"> hear we're</font>

170
00:09:09,470 --> 00:09:14,360
interested in igg start element function

171
00:09:12,140 --> 00:09:17,990
which<font color="#CCCCCC"> is called back whenever it starts</font>

172
00:09:14,360 --> 00:09:20,390
parsing<font color="#E5E5E5"> XML element names and then the</font>

173
00:09:17,990 --> 00:09:23,960
parser is invoked next piece<font color="#CCCCCC"> of the</font>

174
00:09:20,390 --> 00:09:27,050
puzzle is the<font color="#CCCCCC"> igg date data structure</font>

175
00:09:23,960 --> 00:09:30,440
which<font color="#CCCCCC"> is used while parsing the element</font>

176
00:09:27,050 --> 00:09:34,540
element names and we can see it has a

177
00:09:30,440 --> 00:09:38,420
couple<font color="#CCCCCC"> of string buffers with fixed size</font>

178
00:09:34,540 --> 00:09:44,420
the<font color="#CCCCCC"> meaning p and p URL mock size is</font>

179
00:09:38,420 --> 00:09:48,079
limited to 256 bytes<font color="#E5E5E5"> so we have a fixed</font>

180
00:09:44,420 --> 00:09:52,640
size buffer and finally in this<font color="#E5E5E5"> function</font>

181
00:09:48,080 --> 00:09:56,000
we have a an unchecked mem copy call

182
00:09:52,640 --> 00:09:58,640
that just copies whatever we sent to it

183
00:09:56,000 --> 00:10:01,580
into that small buffer which is located

184
00:09:58,640 --> 00:10:06,830
in the<font color="#CCCCCC"> stack these clearly results in</font>

185
00:10:01,580 --> 00:10:10,910
stacks stack buffer overflow and we want

186
00:10:06,830 --> 00:10:12,440
to try<font color="#CCCCCC"> and</font><font color="#E5E5E5"> exploit this so reaching the</font>

187
00:10:10,910 --> 00:10:15,680
vulnerability is relatively

188
00:10:12,440 --> 00:10:19,100
straightforward you're on a fake upnp

189
00:10:15,680 --> 00:10:21,250
server on your<font color="#E5E5E5"> local lan network sound</font>

190
00:10:19,100 --> 00:10:23,870
Wickham connects to the<font color="#E5E5E5"> LAN Network</font>

191
00:10:21,250 --> 00:10:27,260
fires up an application that uses<font color="#CCCCCC"> the</font>

192
00:10:23,870 --> 00:10:31,580
<font color="#CCCCCC">new pnp sends out am search discovery</font>

193
00:10:27,260 --> 00:10:36,760
receives a reply starts parsing the<font color="#CCCCCC"> D</font>

194
00:10:31,580 --> 00:10:39,800
<font color="#E5E5E5">XML and gets owned not much in that way</font>

195
00:10:36,760 --> 00:10:45,230
the problem here is with exploiting this

196
00:10:39,800 --> 00:10:47,229
vulnerability is or was that since we

197
00:10:45,230 --> 00:10:49,970
were trying to<font color="#CCCCCC"> showcase this</font>

198
00:10:47,230 --> 00:10:51,920
vulnerability by exploiting a Bitcoin

199
00:10:49,970 --> 00:10:54,920
clients because I thought<font color="#E5E5E5"> it</font><font color="#CCCCCC"> would be an</font>

200
00:10:51,920 --> 00:10:59,130
<font color="#E5E5E5">interesting situation if I would put a</font>

201
00:10:54,920 --> 00:11:01,680
fake upnp<font color="#E5E5E5"> server on a local lan huge</font>

202
00:10:59,130 --> 00:11:04,610
land far up your<font color="#CCCCCC"> Bitcoin client and I</font>

203
00:11:01,680 --> 00:11:07,880
get access to<font color="#CCCCCC"> your box without ever</font>

204
00:11:04,610 --> 00:11:12,170
specifically targeting you<font color="#E5E5E5"> we just</font>

205
00:11:07,880 --> 00:11:15,300
virtual network discovery the thing is

206
00:11:12,170 --> 00:11:17,579
<font color="#CCCCCC">Bitcoin folks being a bit paranoid</font><font color="#E5E5E5"> as</font>

207
00:11:15,300 --> 00:11:20,880
they should<font color="#E5E5E5"> have built their binaries</font>

208
00:11:17,580 --> 00:11:24,450
with all sorts of proactive anti

209
00:11:20,880 --> 00:11:26,250
exploitation tick protections one of

210
00:11:24,450 --> 00:11:29,460
those<font color="#CCCCCC"> is obviously stack smashing</font>

211
00:11:26,250 --> 00:11:32,760
protection which kind<font color="#E5E5E5"> of gets in our way</font>

212
00:11:29,460 --> 00:11:34,770
so just as a recap a few slides about

213
00:11:32,760 --> 00:11:37,530
<font color="#E5E5E5">how the stack smashing protection or</font>

214
00:11:34,770 --> 00:11:43,020
actually works so on this slide we have

215
00:11:37,530 --> 00:11:45,660
a usual function frame function frame on

216
00:11:43,020 --> 00:11:48,540
the stack at the<font color="#E5E5E5"> bottom we</font><font color="#CCCCCC"> have local</font>

217
00:11:45,660 --> 00:11:51,209
variables in this case character buffer

218
00:11:48,540 --> 00:11:53,370
then<font color="#E5E5E5"> we have a stack canary then</font>

219
00:11:51,210 --> 00:11:56,130
<font color="#E5E5E5">afterwards we have a same frick saved</font>

220
00:11:53,370 --> 00:11:59,660
frame pointer and finally saved return

221
00:11:56,130 --> 00:12:02,130
address above it<font color="#E5E5E5"> our function arguments</font>

222
00:11:59,660 --> 00:12:05,069
when we want<font color="#E5E5E5"> to exploit this text /</font>

223
00:12:02,130 --> 00:12:07,260
stack buffer overflow what we want to do

224
00:12:05,070 --> 00:12:09,690
usually is overwrite the saved return

225
00:12:07,260 --> 00:12:12,420
address<font color="#E5E5E5"> but in this case since</font><font color="#CCCCCC"> its</font>

226
00:12:09,690 --> 00:12:15,600
protected with tax<font color="#CCCCCC"> mashing protection we</font>

227
00:12:12,420 --> 00:12:19,589
have<font color="#CCCCCC"> this tech canary between the buffer</font>

228
00:12:15,600 --> 00:12:23,160
and the return<font color="#E5E5E5"> address if we overwrite</font>

229
00:12:19,590 --> 00:12:25,980
the stack canary with anything else then

230
00:12:23,160 --> 00:12:29,459
it currently is it it can be detected

231
00:12:25,980 --> 00:12:32,280
and would stop the exploitation<font color="#E5E5E5"> in code</font>

232
00:12:29,460 --> 00:12:35,010
in a bit of assembly this is how it

233
00:12:32,280 --> 00:12:38,850
<font color="#CCCCCC">looks like at the left</font><font color="#E5E5E5"> hand side we have</font>

234
00:12:35,010 --> 00:12:43,710
<font color="#CCCCCC">the function prologue that takes a value</font>

235
00:12:38,850 --> 00:12:46,710
from GS segment register at offset 14

236
00:12:43,710 --> 00:12:50,400
and puts it in and saves it in a local

237
00:12:46,710 --> 00:12:52,890
variable here called VAR c GS is

238
00:12:50,400 --> 00:12:55,560
actually in<font color="#CCCCCC"> linux in linux</font>

239
00:12:52,890 --> 00:12:58,260
implementations GS segment register

240
00:12:55,560 --> 00:13:02,939
usually points to a<font color="#CCCCCC"> thread control block</font>

241
00:12:58,260 --> 00:13:05,460
which is<font color="#CCCCCC"> where the stack cookie is saved</font>

242
00:13:02,940 --> 00:13:09,270
each time<font color="#E5E5E5"> a process is restarted a</font>

243
00:13:05,460 --> 00:13:11,339
random stack cookie is generated and

244
00:13:09,270 --> 00:13:12,589
placed in saved in the tread control

245
00:13:11,339 --> 00:13:15,089
block

246
00:13:12,589 --> 00:13:17,970
here we are copying it to a local

247
00:13:15,089 --> 00:13:20,490
<font color="#E5E5E5">function stack at the beginning of</font>

248
00:13:17,970 --> 00:13:22,830
function on the left<font color="#E5E5E5"> hand uh I'm kind of</font>

249
00:13:20,490 --> 00:13:25,550
mixing my hand<font color="#E5E5E5"> because it keep turning</font>

250
00:13:22,830 --> 00:13:28,620
but on the other side we have the

251
00:13:25,550 --> 00:13:30,029
function epilogue and at the end of the

252
00:13:28,620 --> 00:13:32,580
function just before the function

253
00:13:30,029 --> 00:13:35,850
returns we have a check for stack smash

254
00:13:32,580 --> 00:13:39,120
stack smashing we have here we see the

255
00:13:35,850 --> 00:13:42,270
<font color="#E5E5E5">store instruction comparing the value</font>

256
00:13:39,120 --> 00:13:45,080
from variable<font color="#E5E5E5"> C with the original value</font>

257
00:13:42,270 --> 00:13:48,120
in the in the thread control block

258
00:13:45,080 --> 00:13:50,580
soaring them if they're the<font color="#CCCCCC"> same the</font>

259
00:13:48,120 --> 00:13:52,830
result will be<font color="#E5E5E5"> 0 and we continue to</font>

260
00:13:50,580 --> 00:13:55,260
<font color="#E5E5E5">return from the function otherwise we</font>

261
00:13:52,830 --> 00:13:57,810
know that something went wrong and stack

262
00:13:55,260 --> 00:14:00,089
check will start check fail function

263
00:13:57,810 --> 00:14:02,219
will be called and it usually results in

264
00:14:00,089 --> 00:14:04,380
a message<font color="#E5E5E5"> something like this you get</font>

265
00:14:02,220 --> 00:14:08,460
stack smashing detected and your process

266
00:14:04,380 --> 00:14:11,520
is terminated and you get<font color="#CCCCCC"> a core dump or</font>

267
00:14:08,460 --> 00:14:14,339
not but doesn't factor so we get this

268
00:14:11,520 --> 00:14:16,439
message whatsapp's was actually

269
00:14:14,339 --> 00:14:21,300
happening when the stat check fail gets

270
00:14:16,440 --> 00:14:23,820
called it in turn calls 45 fail so it's

271
00:14:21,300 --> 00:14:27,060
just<font color="#E5E5E5"> a wrapper from force if I fail 45</font>

272
00:14:23,820 --> 00:14:29,580
fail in turn eventually calls<font color="#E5E5E5"> lips</font>

273
00:14:27,060 --> 00:14:34,410
message which outputs<font color="#CCCCCC"> dead string</font>

274
00:14:29,580 --> 00:14:39,029
outside here<font color="#E5E5E5"> we start seeing a bit</font><font color="#CCCCCC"> of a</font>

275
00:14:34,410 --> 00:14:41,219
<font color="#CCCCCC">problem because lipped message is has</font>

276
00:14:39,029 --> 00:14:43,830
some complicated code it parses the

277
00:14:41,220 --> 00:14:46,830
environment trying to find environment

278
00:14:43,830 --> 00:14:49,350
variables to see to know what<font color="#CCCCCC"> kind of</font>

279
00:14:46,830 --> 00:14:52,200
output you want each interacts<font color="#E5E5E5"> with</font>

280
00:14:49,350 --> 00:14:56,610
sockets as with file descriptors rights

281
00:14:52,200 --> 00:14:58,529
to the screen obviously the problem is

282
00:14:56,610 --> 00:15:00,240
that<font color="#CCCCCC"> this function kicks in once you</font>

283
00:14:58,529 --> 00:15:03,209
detect that the process is not to be

284
00:15:00,240 --> 00:15:06,990
trusted and you're executing more code

285
00:15:03,209 --> 00:15:12,660
in the process that<font color="#CCCCCC"> you detected is not</font>

286
00:15:06,990 --> 00:15:15,570
to be trusted I'm not obviously<font color="#E5E5E5"> the</font>

287
00:15:12,660 --> 00:15:19,280
first one<font color="#CCCCCC"> to notice this Adam zabrowski</font>

288
00:15:15,570 --> 00:15:21,630
has a nice paper that goes deep into

289
00:15:19,280 --> 00:15:24,170
stack smashing production internals

290
00:15:21,630 --> 00:15:27,380
outlining some of these<font color="#CCCCCC"> ideas</font>

291
00:15:24,170 --> 00:15:30,610
about<font color="#E5E5E5"> its it being complex instead of</font>

292
00:15:27,380 --> 00:15:34,490
just invoking abort the second the

293
00:15:30,610 --> 00:15:37,190
instant<font color="#E5E5E5"> it detects something is wrong it</font>

294
00:15:34,490 --> 00:15:40,310
<font color="#CCCCCC">just</font><font color="#E5E5E5"> keeps executive more code one</font>

295
00:15:37,190 --> 00:15:42,740
<font color="#E5E5E5">interesting example of that was from</font><font color="#CCCCCC"> Dan</font>

296
00:15:40,310 --> 00:15:46,430
Rosenberg who posted this example where

297
00:15:42,740 --> 00:15:50,600
he did a stack smash<font color="#E5E5E5"> stack / but instead</font>

298
00:15:46,430 --> 00:15:53,660
<font color="#CCCCCC">of using it for hijacking the process</font>

299
00:15:50,600 --> 00:15:56,000
control the execution of the process he

300
00:15:53,660 --> 00:15:58,880
used it as an info leak so in this

301
00:15:56,000 --> 00:16:04,790
example here we have a buffer overflow

302
00:15:58,880 --> 00:16:07,550
which overflows a buffer and then

303
00:16:04,790 --> 00:16:11,120
overwrite the main function argument the

304
00:16:07,550 --> 00:16:14,449
art<font color="#E5E5E5"> V on them</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the main functions</font>

305
00:16:11,120 --> 00:16:16,190
stack frame and then when the stack

306
00:16:14,449 --> 00:16:18,949
smashing protection kicks in and tries

307
00:16:16,190 --> 00:16:23,180
to output<font color="#E5E5E5"> that message he gets the</font>

308
00:16:18,949 --> 00:16:25,729
memory because if you remember hear how

309
00:16:23,180 --> 00:16:29,180
the lips message looks like the argument

310
00:16:25,730 --> 00:16:32,959
s will be the name<font color="#CCCCCC"> of your binary which</font>

311
00:16:29,180 --> 00:16:34,489
comes from<font color="#E5E5E5"> arc v he wrote that controls</font>

312
00:16:32,959 --> 00:16:38,449
the pointer points it to something<font color="#E5E5E5"> that</font>

313
00:16:34,490 --> 00:16:41,839
he wants leaked so we are going to go<font color="#CCCCCC"> a</font>

314
00:16:38,449 --> 00:16:47,359
step further and abuse this subvert SSP

315
00:16:41,839 --> 00:16:49,940
for code execution a little bit of

316
00:16:47,360 --> 00:16:53,510
what's actually going on once we do

317
00:16:49,940 --> 00:16:57,079
stack / once we smash the stack with

318
00:16:53,510 --> 00:16:59,750
different lengths the first run with gdb

319
00:16:57,079 --> 00:17:02,750
we see the stack smashing detected the

320
00:16:59,750 --> 00:17:05,030
irregular message printed out second

321
00:17:02,750 --> 00:17:07,130
time the<font color="#CCCCCC"> first one was</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> 200 white</font>

322
00:17:05,030 --> 00:17:10,399
second time we had four more bites and

323
00:17:07,130 --> 00:17:14,390
we get a different crash and if we<font color="#CCCCCC"> take</font>

324
00:17:10,400 --> 00:17:20,530
a look<font color="#E5E5E5"> at the call stack we see that the</font>

325
00:17:14,390 --> 00:17:24,199
values of RV are Mangal so we over wrote

326
00:17:20,530 --> 00:17:29,660
this part of the process memory and we

327
00:17:24,199 --> 00:17:31,549
get a<font color="#CCCCCC"> different type of crash now to</font><font color="#E5E5E5"> get</font>

328
00:17:29,660 --> 00:17:35,520
to the next<font color="#E5E5E5"> part I need to make</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little</font>

329
00:17:31,549 --> 00:17:38,400
detour and get into<font color="#E5E5E5"> how cisco work</font>

330
00:17:35,520 --> 00:17:44,850
linux and something called alpha by

331
00:17:38,400 --> 00:17:49,140
<font color="#CCCCCC">larry vectors since of basically since</font>

332
00:17:44,850 --> 00:17:54,209
in modern times somewhere after the

333
00:17:49,140 --> 00:17:57,390
<font color="#E5E5E5">Linux kernel version 2.4 all system</font>

334
00:17:54,210 --> 00:18:00,540
calls were all system calls<font color="#E5E5E5"> on Linux</font>

335
00:17:57,390 --> 00:18:03,330
were executive using this kernel vc's

336
00:18:00,540 --> 00:18:06,510
called functionality or method before

337
00:18:03,330 --> 00:18:09,449
that the regular way to invoke system

338
00:18:06,510 --> 00:18:15,090
calls is by invoking an interrupt 80

339
00:18:09,450 --> 00:18:18,960
hacks that wasn't particularly efficient

340
00:18:15,090 --> 00:18:21,449
so now libs standard system for<font color="#E5E5E5"> doing</font>

341
00:18:18,960 --> 00:18:24,660
that is by using colonel vc skull and

342
00:18:21,450 --> 00:18:27,510
here we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> an example of a system call</font>

343
00:18:24,660 --> 00:18:29,250
being invoked this is a right system

344
00:18:27,510 --> 00:18:32,400
called<font color="#CCCCCC"> wrapper we have it</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> up</font>

345
00:18:29,250 --> 00:18:34,440
registers as you regularly would but

346
00:18:32,400 --> 00:18:40,020
instead<font color="#CCCCCC"> of invoking an interrupt it</font>

347
00:18:34,440 --> 00:18:43,440
calls this function pointer that again

348
00:18:40,020 --> 00:18:48,240
in gs<font color="#CCCCCC"> segments registered but this time</font>

349
00:18:43,440 --> 00:18:49,980
at offset 10 as<font color="#CCCCCC"> I mentioned</font><font color="#E5E5E5"> earlier GS</font>

350
00:18:48,240 --> 00:18:52,980
points to the trend control block and

351
00:18:49,980 --> 00:18:55,650
tread control block is this memory

352
00:18:52,980 --> 00:19:01,890
structure that holds this information on

353
00:18:55,650 --> 00:19:05,460
<font color="#E5E5E5">the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> side at offset 1010 hacks we</font>

354
00:19:01,890 --> 00:19:07,440
can see<font color="#E5E5E5"> that there's a cysteine</font>

355
00:19:05,460 --> 00:19:11,790
four-pointer sitting for pointer

356
00:19:07,440 --> 00:19:15,090
actually points to the colonel<font color="#CCCCCC"> vc skull</font>

357
00:19:11,790 --> 00:19:21,360
function which then proceeds to execute

358
00:19:15,090 --> 00:19:24,120
<font color="#E5E5E5">a system call so there has</font><font color="#CCCCCC"> to be a way</font>

359
00:19:21,360 --> 00:19:28,020
for the loader or the kernel itself to

360
00:19:24,120 --> 00:19:30,439
pass the location of the<font color="#E5E5E5"> colonel v cisco</font>

361
00:19:28,020 --> 00:19:33,889
function to the process itself<font color="#E5E5E5"> and</font>

362
00:19:30,440 --> 00:19:37,980
that's done through the<font color="#E5E5E5"> loader to lipsy</font>

363
00:19:33,890 --> 00:19:39,990
via alpha<font color="#CCCCCC"> zileri vectors alpha tillery</font>

364
00:19:37,980 --> 00:19:43,410
rector's are just an array of integers

365
00:19:39,990 --> 00:19:46,200
that's located somewhere up the stack so

366
00:19:43,410 --> 00:19:49,920
the usual stack of the

367
00:19:46,200 --> 00:19:54,500
linux process has<font color="#E5E5E5"> function stacks up up</font>

368
00:19:49,920 --> 00:19:56,970
up of those you have the environment and

369
00:19:54,500 --> 00:20:01,380
upwards of the environment there are

370
00:19:56,970 --> 00:20:04,170
<font color="#E5E5E5">alphab sealer vectors some of those</font>

371
00:20:01,380 --> 00:20:08,180
vectors are<font color="#E5E5E5"> 18 entry which points to the</font>

372
00:20:04,170 --> 00:20:11,870
entry<font color="#E5E5E5"> point to the binary ATP</font><font color="#CCCCCC"> pH</font><font color="#E5E5E5"> here</font>

373
00:20:08,180 --> 00:20:15,390
<font color="#E5E5E5">thdr which points to the</font><font color="#CCCCCC"> health hazards</font>

374
00:20:11,870 --> 00:20:18,149
<font color="#E5E5E5">page size information and of</font><font color="#CCCCCC"> course the</font>

375
00:20:15,390 --> 00:20:21,870
atcs info pointer which points the

376
00:20:18,150 --> 00:20:24,840
colonel VCC skull function so what

377
00:20:21,870 --> 00:20:27,959
happens is that at the process<font color="#E5E5E5"> start</font>

378
00:20:24,840 --> 00:20:30,870
start up after the loader is finished

379
00:20:27,960 --> 00:20:33,600
then process actually starts the sum of

380
00:20:30,870 --> 00:20:37,310
the first code that gets executives

381
00:20:33,600 --> 00:20:40,020
copies the pointer from the atcs info

382
00:20:37,310 --> 00:20:44,250
auxiliary vector into the tread control

383
00:20:40,020 --> 00:20:47,100
block for later use just a little

384
00:20:44,250 --> 00:20:50,330
disclaimer this is x86<font color="#CCCCCC"> specific</font><font color="#E5E5E5"> the</font>

385
00:20:47,100 --> 00:20:54,840
<font color="#E5E5E5">mechanism is a bit different on x86 64</font>

386
00:20:50,330 --> 00:20:58,139
but similar tricks will apply it's

387
00:20:54,840 --> 00:21:02,370
obviously somewhat more different<font color="#E5E5E5"> on</font>

388
00:20:58,140 --> 00:21:05,700
other platforms so where am I going with

389
00:21:02,370 --> 00:21:08,790
this as I mentioned<font color="#CCCCCC"> earlier stack</font><font color="#E5E5E5"> check</font>

390
00:21:05,700 --> 00:21:11,010
fail function is fairly complicated and

391
00:21:08,790 --> 00:21:13,530
it will<font color="#CCCCCC"> eventually have to write</font>

392
00:21:11,010 --> 00:21:16,980
something<font color="#CCCCCC"> on the screen it outputs that</font>

393
00:21:13,530 --> 00:21:19,170
warning message and it will do so

394
00:21:16,980 --> 00:21:22,710
<font color="#E5E5E5">eventually by invoking a right system</font>

395
00:21:19,170 --> 00:21:25,890
call so the idea<font color="#CCCCCC"> here is that if I can</font>

396
00:21:22,710 --> 00:21:30,290
<font color="#CCCCCC">somehow take control and overwrite that</font>

397
00:21:25,890 --> 00:21:32,730
Colonel<font color="#CCCCCC"> vc's</font><font color="#E5E5E5"> call function then when the</font>

398
00:21:30,290 --> 00:21:34,770
stack special protection kicks in and

399
00:21:32,730 --> 00:21:37,340
tries to write to the screen it will try

400
00:21:34,770 --> 00:21:41,490
to output something to the screen

401
00:21:37,340 --> 00:21:43,800
inadvertently calling right but since<font color="#CCCCCC"> I</font>

402
00:21:41,490 --> 00:21:47,030
<font color="#E5E5E5">have control</font><font color="#CCCCCC"> the function pointer it</font>

403
00:21:43,800 --> 00:21:47,030
will jump to<font color="#E5E5E5"> my code</font>

404
00:21:49,010 --> 00:21:53,390
that's not going to be so

405
00:21:50,780 --> 00:21:56,300
straightforward for a couple of reasons

406
00:21:53,390 --> 00:21:58,820
first if<font color="#CCCCCC"> we try and make a</font><font color="#E5E5E5"> huge buffer</font>

407
00:21:56,300 --> 00:22:02,060
overflow to reach alpha by<font color="#E5E5E5"> Larry vectors</font>

408
00:21:58,820 --> 00:22:04,460
on the stack to overwrite them we would

409
00:22:02,060 --> 00:22:07,429
inadvertently smash all the environment

410
00:22:04,460 --> 00:22:10,430
which would actually make the lips

411
00:22:07,430 --> 00:22:13,070
message code crash because<font color="#E5E5E5"> it's parsing</font>

412
00:22:10,430 --> 00:22:14,870
the environment of course we could make

413
00:22:13,070 --> 00:22:18,470
sure that the environment<font color="#CCCCCC"> stage saying</font>

414
00:22:14,870 --> 00:22:21,199
looks good but then another problem is

415
00:22:18,470 --> 00:22:23,320
<font color="#CCCCCC">that the pointer itself is already</font>

416
00:22:21,200 --> 00:22:27,260
copied into a tread control block and

417
00:22:23,320 --> 00:22:30,070
thread control block will in most cases

418
00:22:27,260 --> 00:22:33,860
won't be reachable with a reasonable

419
00:22:30,070 --> 00:22:35,870
stack overflow either way if even if we

420
00:22:33,860 --> 00:22:38,659
have a huge overflow it and it was

421
00:22:35,870 --> 00:22:40,850
reachable<font color="#CCCCCC"> its way off of our current</font>

422
00:22:38,660 --> 00:22:44,020
location that we would all right

423
00:22:40,850 --> 00:22:47,689
<font color="#E5E5E5">basically half the system memory and</font>

424
00:22:44,020 --> 00:22:58,220
kill the process anyway so we need

425
00:22:47,690 --> 00:22:59,960
another another<font color="#E5E5E5"> venue they have some</font>

426
00:22:58,220 --> 00:23:02,900
environment variable which you can set

427
00:22:59,960 --> 00:23:07,310
that would make<font color="#CCCCCC"> it output a different</font>

428
00:23:02,900 --> 00:23:10,070
message or log it into a certain<font color="#E5E5E5"> file</font>

429
00:23:07,310 --> 00:23:13,159
descriptor or something like that<font color="#E5E5E5"> so the</font>

430
00:23:10,070 --> 00:23:15,020
it just looks for different options

431
00:23:13,160 --> 00:23:19,760
which you control through the

432
00:23:15,020 --> 00:23:22,000
environment variable so as I said we

433
00:23:19,760 --> 00:23:24,740
need our another venue of attack

434
00:23:22,000 --> 00:23:27,830
interestingly<font color="#CCCCCC"> the application that we're</font>

435
00:23:24,740 --> 00:23:30,320
<font color="#CCCCCC">attack in this case is</font><font color="#E5E5E5"> Bitcoin</font><font color="#CCCCCC"> QT which</font>

436
00:23:27,830 --> 00:23:33,350
is a graphical application its uses QT

437
00:23:30,320 --> 00:23:37,399
library which means it's using its the

438
00:23:33,350 --> 00:23:39,949
threaded application and it's using a

439
00:23:37,400 --> 00:23:42,410
sick strats for it what's interesting

440
00:23:39,950 --> 00:23:51,620
<font color="#E5E5E5">about treads is that they have</font><font color="#CCCCCC"> tread</font>

441
00:23:42,410 --> 00:23:56,180
<font color="#E5E5E5">locals tax tread local stacks means that</font>

442
00:23:51,620 --> 00:23:59,510
all<font color="#CCCCCC"> of that information that kept for</font>

443
00:23:56,180 --> 00:24:02,210
the binaries for the execution of system

444
00:23:59,510 --> 00:24:04,820
calls it gets copied into

445
00:24:02,210 --> 00:24:07,420
local stack they have each thread has

446
00:24:04,820 --> 00:24:10,280
its own local copy and that

447
00:24:07,420 --> 00:24:12,320
initialization is done somewhere while

448
00:24:10,280 --> 00:24:14,680
creating the tread in this allocate

449
00:24:12,320 --> 00:24:18,560
stack function in the POSIX

450
00:24:14,680 --> 00:24:21,350
implementation so each tread will have

451
00:24:18,560 --> 00:24:23,540
its own copy of the tread control block

452
00:24:21,350 --> 00:24:27,399
which we've seen earlier which then gets

453
00:24:23,540 --> 00:24:32,990
referenced when executing system calls

454
00:24:27,400 --> 00:24:37,060
meaning<font color="#CCCCCC"> that meaning that</font><font color="#E5E5E5"> we could maybe</font>

455
00:24:32,990 --> 00:24:42,140
<font color="#E5E5E5">use this as a venue for exploitation</font>

456
00:24:37,060 --> 00:24:45,020
also going along our way is that is the

457
00:24:42,140 --> 00:24:48,890
fact that TCB tread local TCB would

458
00:24:45,020 --> 00:24:51,889
usually be located somewhere above our

459
00:24:48,890 --> 00:24:54,220
current a ESP relatively closely so we

460
00:24:51,890 --> 00:24:59,960
can relatively easily reach it and

461
00:24:54,220 --> 00:25:01,580
overflow it and take control<font color="#E5E5E5"> it so as an</font>

462
00:24:59,960 --> 00:25:04,640
illustration of this they have<font color="#CCCCCC"> a small</font>

463
00:25:01,580 --> 00:25:07,429
example<font color="#E5E5E5"> program that has a vanilla</font>

464
00:25:04,640 --> 00:25:09,860
buffer overflow in it<font color="#CCCCCC"> and this f1</font>

465
00:25:07,430 --> 00:25:12,770
<font color="#E5E5E5">function what's a bit different from</font>

466
00:25:09,860 --> 00:25:14,899
from the other examples is that it's a

467
00:25:12,770 --> 00:25:18,230
it's creating a tread detect looks

468
00:25:14,900 --> 00:25:20,960
actually calling that instruction so in

469
00:25:18,230 --> 00:25:23,090
this f1 function we have a string copy

470
00:25:20,960 --> 00:25:25,730
buffer overflow which just smashes the

471
00:25:23,090 --> 00:25:28,429
stack with no problems it's just a

472
00:25:25,730 --> 00:25:30,590
demonstration and on the<font color="#E5E5E5"> other hand we</font>

473
00:25:28,430 --> 00:25:32,870
have<font color="#CCCCCC"> a GDB session showcasing what's</font>

474
00:25:30,590 --> 00:25:36,889
actually happening when we do make the

475
00:25:32,870 --> 00:25:41,810
stack smashing you can see that<font color="#E5E5E5"> we run</font>

476
00:25:36,890 --> 00:25:45,740
<font color="#E5E5E5">the program with a buffer of 2092</font><font color="#CCCCCC"> plus 4</font>

477
00:25:41,810 --> 00:25:48,500
bytes 2092 bytes to make an overflow

478
00:25:45,740 --> 00:25:51,830
<font color="#E5E5E5">plus 4 bytes to write what we want and</font>

479
00:25:48,500 --> 00:25:54,530
when we write when we run the program

480
00:25:51,830 --> 00:25:59,210
with this buffer it crashes with

481
00:25:54,530 --> 00:26:02,090
<font color="#E5E5E5">segmentation fault error and we can see</font>

482
00:25:59,210 --> 00:26:07,760
<font color="#E5E5E5">that it crashed with EAP being set to</font>

483
00:26:02,090 --> 00:26:10,790
eaeaea which we set<font color="#E5E5E5"> upstairs when we run</font>

484
00:26:07,760 --> 00:26:14,300
the program so we've<font color="#CCCCCC"> taken control over</font>

485
00:26:10,790 --> 00:26:18,800
the execution obviously

486
00:26:14,300 --> 00:26:21,290
by overwriting the trap local tread

487
00:26:18,800 --> 00:26:23,690
control block and it's CC info pointer

488
00:26:21,290 --> 00:26:25,930
notice<font color="#CCCCCC"> that no message from stack</font>

489
00:26:23,690 --> 00:26:31,940
smashing protection is printed out

490
00:26:25,930 --> 00:26:37,570
because this kicked in the<font color="#CCCCCC"> process</font>

491
00:26:31,940 --> 00:26:41,060
crashed while it tried to invoke the the

492
00:26:37,570 --> 00:26:47,629
<font color="#E5E5E5">right system call to actually create</font>

493
00:26:41,060 --> 00:26:51,440
output on<font color="#CCCCCC"> the screen there's a one</font>

494
00:26:47,630 --> 00:26:55,060
problem with<font color="#CCCCCC"> this is that now</font><font color="#E5E5E5"> that we've</font>

495
00:26:51,440 --> 00:27:01,040
gained initial control over the process

496
00:26:55,060 --> 00:27:04,190
our kernel vc school function pointer is

497
00:27:01,040 --> 00:27:06,379
smashed it points to some of our code so

498
00:27:04,190 --> 00:27:08,330
none of the system calls it we<font color="#E5E5E5"> ourself</font>

499
00:27:06,380 --> 00:27:10,970
<font color="#E5E5E5">try to</font><font color="#CCCCCC"> execute</font><font color="#E5E5E5"> will work so our</font>

500
00:27:08,330 --> 00:27:14,379
shellcode would break wouldn't work so

501
00:27:10,970 --> 00:27:18,800
<font color="#CCCCCC">the first thing we need to do for</font>

502
00:27:14,380 --> 00:27:20,960
successful exploit is to actually repair

503
00:27:18,800 --> 00:27:23,030
this function pointer right back the

504
00:27:20,960 --> 00:27:25,700
original value<font color="#E5E5E5"> so we can</font><font color="#CCCCCC"> actually</font>

505
00:27:23,030 --> 00:27:29,720
<font color="#CCCCCC">execute childhood afterwards and another</font>

506
00:27:25,700 --> 00:27:34,190
problem<font color="#E5E5E5"> is that we need</font><font color="#CCCCCC"> to use wrap</font>

507
00:27:29,720 --> 00:27:39,170
gadgets to bypass a non-executive<font color="#E5E5E5"> on</font>

508
00:27:34,190 --> 00:27:43,070
stack in this case to<font color="#CCCCCC"> solve this problem</font>

509
00:27:39,170 --> 00:27:45,200
in my exploit<font color="#CCCCCC"> i use just two gadgets to</font>

510
00:27:43,070 --> 00:27:48,830
relatively simple and<font color="#E5E5E5"> useful gadgets</font>

511
00:27:45,200 --> 00:27:50,710
first one is your usual stack pivot

512
00:27:48,830 --> 00:27:54,260
gadgets something that you would use to

513
00:27:50,710 --> 00:27:57,290
<font color="#E5E5E5">get the stack pointer pointing back to</font>

514
00:27:54,260 --> 00:27:59,180
the area<font color="#E5E5E5"> of your buffer the area of</font>

515
00:27:57,290 --> 00:28:02,080
memory that<font color="#CCCCCC"> you control did you know</font>

516
00:27:59,180 --> 00:28:04,880
what's there and this first gadgets

517
00:28:02,080 --> 00:28:07,970
helpfully pops<font color="#E5E5E5"> four registers off the</font>

518
00:28:04,880 --> 00:28:10,910
stack so we get the controller<font color="#CCCCCC"> four</font>

519
00:28:07,970 --> 00:28:13,430
registers<font color="#E5E5E5"> from it for free second gadget</font>

520
00:28:10,910 --> 00:28:17,510
is what you would call right what we're

521
00:28:13,430 --> 00:28:20,360
gadget which uses those previously set

522
00:28:17,510 --> 00:28:23,750
registers to write for about<font color="#E5E5E5"> four bytes</font>

523
00:28:20,360 --> 00:28:25,909
of data anywhere we want using<font color="#E5E5E5"> these two</font>

524
00:28:23,750 --> 00:28:27,790
gadgets we repair the colonel v cisco

525
00:28:25,910 --> 00:28:30,920
pointer

526
00:28:27,790 --> 00:28:34,670
again enabling us to execute system

527
00:28:30,920 --> 00:28:40,880
calls of our own and then just<font color="#E5E5E5"> proceed</font>

528
00:28:34,670 --> 00:28:45,110
to execute more code so the actual

529
00:28:40,880 --> 00:28:47,390
exploit breaks down<font color="#E5E5E5"> to</font><font color="#CCCCCC"> to these few</font>

530
00:28:45,110 --> 00:28:50,090
steps first the new treads gets

531
00:28:47,390 --> 00:28:53,450
initialized video application TCB info

532
00:28:50,090 --> 00:28:55,820
is copied<font color="#CCCCCC"> to local</font><font color="#E5E5E5"> thread stack then the</font>

533
00:28:53,450 --> 00:28:58,070
<font color="#E5E5E5">other folk happens we overwrite</font>

534
00:28:55,820 --> 00:28:59,929
everything up the stack we smash the

535
00:28:58,070 --> 00:29:02,030
canary because we don't care about it we

536
00:28:59,930 --> 00:29:04,130
smash the return address because we

537
00:29:02,030 --> 00:29:06,379
don't care<font color="#CCCCCC"> about it we smash everything</font>

538
00:29:04,130 --> 00:29:09,950
up the stack<font color="#CCCCCC"> passed the environment and</font>

539
00:29:06,380 --> 00:29:13,220
all right the tread local tread control

540
00:29:09,950 --> 00:29:16,460
block with its this info pointer pointed

541
00:29:13,220 --> 00:29:19,490
to our first<font color="#CCCCCC"> Rob gadget we point it to</font>

542
00:29:16,460 --> 00:29:23,180
this first gadget which sets up the

543
00:29:19,490 --> 00:29:25,220
stack pointer and the registers and then

544
00:29:23,180 --> 00:29:28,880
jumps to the second gadget which repairs

545
00:29:25,220 --> 00:29:33,590
the repairs the kernel v<font color="#CCCCCC"> cisco function</font>

546
00:29:28,880 --> 00:29:36,440
pointer then as rob has already kicked

547
00:29:33,590 --> 00:29:38,540
in we restore it then we just call em

548
00:29:36,440 --> 00:29:41,510
protect to set memory protections<font color="#E5E5E5"> to</font>

549
00:29:38,540 --> 00:29:47,330
execute and jump to our shall killed not

550
00:29:41,510 --> 00:29:49,790
much not much to it there and what would

551
00:29:47,330 --> 00:29:54,830
be an exploitation talk without Alex

552
00:29:49,790 --> 00:29:57,879
actual vulnerability demonstration so

553
00:29:54,830 --> 00:30:02,149
I'm just going to start up a vm<font color="#E5E5E5"> and</font>

554
00:29:57,880 --> 00:30:10,990
hopefully it will<font color="#CCCCCC"> work you never know</font>

555
00:30:02,150 --> 00:30:10,990
with these things<font color="#CCCCCC"> okay just</font><font color="#E5E5E5"> see</font>

556
00:30:14,910 --> 00:30:23,740
my IP address gets reset it every time

557
00:30:18,250 --> 00:30:25,900
and my exploit is hard-coded with an IP

558
00:30:23,740 --> 00:30:30,790
address so i have to reset it so in this

559
00:30:25,900 --> 00:30:33,850
screen<font color="#CCCCCC"> i run the exploit so it listens</font>

560
00:30:30,790 --> 00:30:37,570
lessons on a on a network interface

561
00:30:33,850 --> 00:30:40,060
listens for those broadcast packets on

562
00:30:37,570 --> 00:30:42,970
another screen i'm going<font color="#E5E5E5"> to run an app</font>

563
00:30:40,060 --> 00:30:46,030
cat reverse that cat listening for

564
00:30:42,970 --> 00:30:49,450
incoming connect back shelves and then

565
00:30:46,030 --> 00:30:51,970
obviously i'm going to start up<font color="#CCCCCC"> the</font>

566
00:30:49,450 --> 00:30:55,090
vulnerable application so the

567
00:30:51,970 --> 00:30:58,300
application starts up we get a request

568
00:30:55,090 --> 00:31:04,030
we set the fake server sends out the

569
00:30:58,300 --> 00:31:06,010
reply sends out the description<font color="#E5E5E5"> xml we</font>

570
00:31:04,030 --> 00:31:09,550
don't<font color="#E5E5E5"> see the application anymore but in</font>

571
00:31:06,010 --> 00:31:14,340
<font color="#E5E5E5">the river shall we actually got them</font>

572
00:31:09,550 --> 00:31:14,340
code execution and got on a shelf

573
00:31:19,210 --> 00:31:32,350
yeah that has been<font color="#CCCCCC"> a quick demo just a</font>

574
00:31:27,010 --> 00:31:36,460
small conclusion to conclude the whole

575
00:31:32,350 --> 00:31:38,860
talk what we did here we<font color="#CCCCCC"> abused SSP</font>

576
00:31:36,460 --> 00:31:42,309
error reporting which is to complicate

577
00:31:38,860 --> 00:31:44,199
<font color="#CCCCCC">for each angle as</font><font color="#E5E5E5"> I said earlier you</font>

578
00:31:42,309 --> 00:31:46,840
detected that<font color="#CCCCCC"> the process is misbehaving</font>

579
00:31:44,200 --> 00:31:49,830
and you keep executing more code in it

580
00:31:46,840 --> 00:31:54,610
you shouldn't do that<font color="#CCCCCC"> obviously</font>

581
00:31:49,830 --> 00:31:57,520
additionally in case that there was some

582
00:31:54,610 --> 00:32:00,100
cisco executed before the function

583
00:31:57,520 --> 00:32:02,710
returns we wouldn't<font color="#CCCCCC"> even have to abuse</font>

584
00:32:00,100 --> 00:32:05,559
the stack smashing protection to get

585
00:32:02,710 --> 00:32:11,080
code execution we could<font color="#E5E5E5"> just reuse the</font>

586
00:32:05,559 --> 00:32:14,649
same thing so patching the SSP not to do

587
00:32:11,080 --> 00:32:18,279
this complicated code output wouldn't

588
00:32:14,649 --> 00:32:22,418
necessarily fix this issue and I just

589
00:32:18,279 --> 00:32:27,210
think<font color="#CCCCCC"> that this whole</font><font color="#E5E5E5"> this one er bility</font>

590
00:32:22,419 --> 00:32:27,210
and the way<font color="#CCCCCC"> it's exploited showcases how</font>

591
00:32:28,140 --> 00:32:33,190
complexities of modern process run chain

592
00:32:31,240 --> 00:32:35,919
different components in<font color="#CCCCCC"> the modern</font>

593
00:32:33,190 --> 00:32:38,350
processor on chain have unforeseen

594
00:32:35,919 --> 00:32:44,049
consequences which can always be abused

595
00:32:38,350 --> 00:32:47,080
in one way or the other<font color="#CCCCCC"> and that's</font>

596
00:32:44,049 --> 00:32:51,200
basically it from me today if you have

597
00:32:47,080 --> 00:32:57,350
any questions go ahead

598
00:32:51,200 --> 00:33:05,830
so what made the key friends I mean my

599
00:32:57,350 --> 00:33:10,370
understanding is that in people getting

600
00:33:05,830 --> 00:33:14,539
TCB it is a way to close to the rest of

601
00:33:10,370 --> 00:33:19,070
the set yes what made them not put in

602
00:33:14,539 --> 00:33:20,960
<font color="#CCCCCC">third page uh not sure that could</font>

603
00:33:19,070 --> 00:33:25,010
<font color="#E5E5E5">probably that would be a good idea</font>

604
00:33:20,960 --> 00:33:27,289
probably<font color="#E5E5E5"> I just the way</font><font color="#CCCCCC"> there the tread</font>

605
00:33:25,010 --> 00:33:30,169
local stack is set up in<font color="#CCCCCC"> the that</font>

606
00:33:27,289 --> 00:33:33,679
allocates tak function it just doesn't

607
00:33:30,169 --> 00:33:36,769
doesn't have anything<font color="#CCCCCC"> in the way of</font>

608
00:33:33,679 --> 00:33:39,909
doing the Dorothy be too much to

609
00:33:36,769 --> 00:33:43,100
subtract from the overall could be yeah

610
00:33:39,909 --> 00:33:51,590
<font color="#CCCCCC">would take too much too much space and</font>

611
00:33:43,100 --> 00:33:54,559
so is there anything in between<font color="#CCCCCC"> yeah i'm</font>

612
00:33:51,590 --> 00:33:57,860
not<font color="#E5E5E5"> sure if there are any other</font>

613
00:33:54,559 --> 00:33:59,750
structures but as i<font color="#CCCCCC"> was going along</font>

614
00:33:57,860 --> 00:34:02,779
smashing stuff trying to<font color="#E5E5E5"> see what's</font>

615
00:33:59,750 --> 00:34:04,490
<font color="#E5E5E5">going on I've only</font><font color="#CCCCCC"> interesting things</font>

616
00:34:02,779 --> 00:34:07,760
that<font color="#E5E5E5"> I saw our previous function</font>

617
00:34:04,490 --> 00:34:11,418
function stacks and previous function

618
00:34:07,760 --> 00:34:16,579
frames and then the local TCB so<font color="#E5E5E5"> I'm not</font>

619
00:34:11,418 --> 00:34:19,460
<font color="#CCCCCC">sure so all right sectors well don't</font>

620
00:34:16,579 --> 00:34:22,040
really<font color="#E5E5E5"> help yes yes by the time there</font>

621
00:34:19,460 --> 00:34:25,960
are three yeah it's<font color="#E5E5E5"> already i just used</font>

622
00:34:22,040 --> 00:34:30,639
to use<font color="#CCCCCC"> the debt detour to introduce how</font>

623
00:34:25,960 --> 00:34:34,129
howdy the<font color="#E5E5E5"> kernel which is called a</font>

624
00:34:30,639 --> 00:34:36,530
pointer gets passed from the<font color="#CCCCCC"> loner to</font>

625
00:34:34,129 --> 00:34:38,810
the process so my<font color="#CCCCCC"> question is is there</font>

626
00:34:36,530 --> 00:34:45,020
anything in the oxpecker that does it

627
00:34:38,810 --> 00:34:47,270
use gets reused oh so we know that there

628
00:34:45,020 --> 00:34:49,460
is stuff that gets used there at the

629
00:34:47,270 --> 00:34:53,480
relocation yes that's that's that that

630
00:34:49,460 --> 00:34:56,179
was our help<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> right that</font><font color="#E5E5E5"> after</font>

631
00:34:53,480 --> 00:35:00,380
<font color="#E5E5E5">that I haven't</font><font color="#CCCCCC"> looked into that after</font>

632
00:34:56,179 --> 00:35:04,970
night thank you for depression awesome

633
00:35:00,380 --> 00:35:08,990
stuff yeah the full exploit and there's

634
00:35:04,970 --> 00:35:12,618
a blog post on our blog<font color="#E5E5E5"> explaining all</font>

635
00:35:08,990 --> 00:35:17,560
the stuff<font color="#CCCCCC"> up</font><font color="#E5E5E5"> there too so if we</font><font color="#CCCCCC"> look it</font>

636
00:35:12,619 --> 00:35:17,560
up later feel free<font color="#CCCCCC"> to do so thank you</font>

