1
00:00:01,070 --> 00:00:07,049
hello everybody<font color="#CCCCCC"> my name is Brandon</font>

2
00:00:05,700 --> 00:00:10,920
Wilson and I'm here to<font color="#CCCCCC"> talk about the</font>

3
00:00:07,049 --> 00:00:13,530
end of forensics as we know it well<font color="#E5E5E5"> not</font>

4
00:00:10,920 --> 00:00:15,330
really<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> overstating a little bit</font>

5
00:00:13,530 --> 00:00:17,698
but what I'm gonna talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> and</font>

6
00:00:15,330 --> 00:00:19,320
hopefully<font color="#E5E5E5"> get across is that USB storage</font>

7
00:00:17,699 --> 00:00:22,230
devices are not<font color="#E5E5E5"> as simple as they may</font>

8
00:00:19,320 --> 00:00:23,698
seem<font color="#CCCCCC"> forensic tools like</font><font color="#E5E5E5"> right blockers</font>

9
00:00:22,230 --> 00:00:25,410
may<font color="#E5E5E5"> give the appearance that you can</font>

10
00:00:23,699 --> 00:00:27,390
<font color="#CCCCCC">preserve and extract data from</font><font color="#E5E5E5"> a device</font>

11
00:00:25,410 --> 00:00:29,759
in a safe way<font color="#CCCCCC"> but they just simply</font>

12
00:00:27,390 --> 00:00:31,590
cannot do that so I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take you</font>

13
00:00:29,760 --> 00:00:33,780
through the thought<font color="#CCCCCC"> process of how I and</font>

14
00:00:31,590 --> 00:00:35,730
you would create a flash drive<font color="#CCCCCC"> that</font><font color="#E5E5E5"> self</font>

15
00:00:33,780 --> 00:00:36,989
<font color="#E5E5E5">destructs when they're accessed or even</font>

16
00:00:35,730 --> 00:00:41,099
plugged in in a way that we don't

17
00:00:36,989 --> 00:00:42,780
authorize<font color="#CCCCCC"> so first off who here's</font>

18
00:00:41,100 --> 00:00:45,320
thought there was actually gonna<font color="#E5E5E5"> be a</font>

19
00:00:42,780 --> 00:00:51,539
thumb drive explosion<font color="#CCCCCC"> earnest</font><font color="#E5E5E5"> talk no</font>

20
00:00:45,320 --> 00:00:54,920
yes<font color="#CCCCCC"> no well sorry</font><font color="#E5E5E5"> that's not</font><font color="#CCCCCC"> gonna</font>

21
00:00:51,539 --> 00:00:56,520
<font color="#E5E5E5">happen what is gonna happen</font><font color="#CCCCCC"> though is a</font>

22
00:00:54,920 --> 00:00:58,859
<font color="#E5E5E5">discussion on what a flash drive</font>

23
00:00:56,520 --> 00:01:00,449
actually<font color="#E5E5E5"> is what it isn't</font><font color="#CCCCCC"> how I learned</font>

24
00:00:58,859 --> 00:01:02,840
more about<font color="#CCCCCC"> it and how it works</font>

25
00:01:00,449 --> 00:01:06,030
<font color="#CCCCCC">especially with little resources or</font><font color="#E5E5E5"> help</font>

26
00:01:02,840 --> 00:01:07,320
<font color="#CCCCCC">some</font><font color="#E5E5E5"> interesting things I</font><font color="#CCCCCC"> found and how</font>

27
00:01:06,030 --> 00:01:08,729
we can<font color="#E5E5E5"> all take advantage of them and</font>

28
00:01:07,320 --> 00:01:14,100
how<font color="#E5E5E5"> we can protect ourselves against</font>

29
00:01:08,729 --> 00:01:15,600
<font color="#E5E5E5">them so what is a USB flash drive well</font>

30
00:01:14,100 --> 00:01:16,949
the answer<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that it's not</font><font color="#CCCCCC"> just a</font>

31
00:01:15,600 --> 00:01:18,990
storage<font color="#E5E5E5"> device but it you know it's a</font>

32
00:01:16,950 --> 00:01:20,549
computer like any other so you know it's

33
00:01:18,990 --> 00:01:22,770
complete<font color="#CCCCCC"> with a processor code for that</font>

34
00:01:20,549 --> 00:01:25,680
processor to run<font color="#CCCCCC"> Ram for that code view</font>

35
00:01:22,770 --> 00:01:28,229
<font color="#E5E5E5">for that Co to utilize and various forms</font>

36
00:01:25,680 --> 00:01:29,700
of input<font color="#E5E5E5"> and output such as the USB</font>

37
00:01:28,229 --> 00:01:32,700
<font color="#E5E5E5">controller so it</font><font color="#CCCCCC"> can communicate with</font>

38
00:01:29,700 --> 00:01:34,229
the computer<font color="#CCCCCC"> LEDs so like little</font>

39
00:01:32,700 --> 00:01:35,490
<font color="#E5E5E5">activity light on your flash drive like</font>

40
00:01:34,229 --> 00:01:39,150
when you're<font color="#CCCCCC"> reading or writing data</font><font color="#E5E5E5"> your</font>

41
00:01:35,490 --> 00:01:40,949
blinks at you<font color="#E5E5E5"> and the NAND memory flash</font>

42
00:01:39,150 --> 00:01:42,530
chip which is<font color="#E5E5E5"> what actually holds all</font>

43
00:01:40,950 --> 00:01:44,880
your<font color="#E5E5E5"> data</font>

44
00:01:42,530 --> 00:01:46,290
<font color="#E5E5E5">USB is just the transport mechanism it</font>

45
00:01:44,880 --> 00:01:48,839
just<font color="#CCCCCC"> enables the communication between</font>

46
00:01:46,290 --> 00:01:49,950
the<font color="#E5E5E5"> drive and a host computer</font><font color="#CCCCCC"> so just</font>

47
00:01:48,840 --> 00:01:51,479
like an<font color="#E5E5E5"> Ethernet cable networks</font>

48
00:01:49,950 --> 00:01:57,149
computers<font color="#E5E5E5"> together</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is just what</font>

49
00:01:51,479 --> 00:01:58,710
links these<font color="#CCCCCC"> two computers</font><font color="#E5E5E5"> together so</font>

50
00:01:57,149 --> 00:01:59,759
how does the computer<font color="#E5E5E5"> interact with</font><font color="#CCCCCC"> a</font>

51
00:01:58,710 --> 00:02:01,140
flash<font color="#E5E5E5"> drive</font>

52
00:01:59,759 --> 00:02:03,840
well to<font color="#E5E5E5"> answer that we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to dig a</font>

53
00:02:01,140 --> 00:02:06,060
<font color="#CCCCCC">little into how USB actually works when</font>

54
00:02:03,840 --> 00:02:08,280
a USB device is plugged<font color="#CCCCCC"> into a host</font><font color="#E5E5E5"> the</font>

55
00:02:06,060 --> 00:02:10,319
hosts root hub detects<font color="#E5E5E5"> that a device is</font>

56
00:02:08,280 --> 00:02:12,150
connected<font color="#E5E5E5"> and then the host enumerates</font>

57
00:02:10,318 --> 00:02:13,920
that device which means<font color="#E5E5E5"> it makes a</font>

58
00:02:12,150 --> 00:02:16,020
series<font color="#CCCCCC"> of standard requests asking it</font>

59
00:02:13,920 --> 00:02:17,730
what kind of device it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> and these</font>

60
00:02:16,020 --> 00:02:19,230
standard requests involve getting<font color="#CCCCCC"> the</font>

61
00:02:17,730 --> 00:02:21,090
device descriptor from the device as

62
00:02:19,230 --> 00:02:23,130
well<font color="#E5E5E5"> as one</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> more configuration</font>

63
00:02:21,090 --> 00:02:25,890
descriptors<font color="#E5E5E5"> each of which holds a series</font>

64
00:02:23,130 --> 00:02:27,480
of interface descriptors<font color="#CCCCCC"> a device can</font>

65
00:02:25,890 --> 00:02:29,549
choose to<font color="#E5E5E5"> report itself as a custom</font>

66
00:02:27,480 --> 00:02:30,899
vendor specific<font color="#E5E5E5"> device or it can report</font>

67
00:02:29,550 --> 00:02:33,120
itself<font color="#E5E5E5"> as</font><font color="#CCCCCC"> part of a standard</font><font color="#E5E5E5"> device</font>

68
00:02:30,900 --> 00:02:34,739
class<font color="#E5E5E5"> such as human interface devices</font>

69
00:02:33,120 --> 00:02:36,930
which<font color="#E5E5E5"> is why keyboards and mice</font>

70
00:02:34,739 --> 00:02:39,180
joysticks<font color="#E5E5E5"> and all that are or a</font>

71
00:02:36,930 --> 00:02:41,940
<font color="#E5E5E5">Bluetooth device like a USB bluetooth</font>

72
00:02:39,180 --> 00:02:44,310
adapter<font color="#E5E5E5"> or most importantly mass storage</font>

73
00:02:41,940 --> 00:02:46,200
<font color="#E5E5E5">mass storage devices which is what flash</font>

74
00:02:44,310 --> 00:02:48,900
drives hard drives even USB floppy

75
00:02:46,200 --> 00:02:50,880
drives are and the way it reports<font color="#E5E5E5"> these</font>

76
00:02:48,900 --> 00:02:52,709
things is<font color="#E5E5E5"> through a class subclass and</font>

77
00:02:50,880 --> 00:02:54,600
protocol<font color="#E5E5E5"> IDs in either the device</font>

78
00:02:52,709 --> 00:02:56,069
<font color="#E5E5E5">descriptor or if it's not specified</font>

79
00:02:54,600 --> 00:02:59,250
there one of<font color="#CCCCCC"> the interface descriptors</font>

80
00:02:56,069 --> 00:03:00,810
within the configuration<font color="#CCCCCC"> descriptor some</font>

81
00:02:59,250 --> 00:03:02,670
IDs are reserved for specific device

82
00:03:00,810 --> 00:03:04,980
classes such as<font color="#E5E5E5"> human interface or mass</font>

83
00:03:02,670 --> 00:03:08,700
storage device classes or for custom

84
00:03:04,980 --> 00:03:10,290
vendor specific<font color="#CCCCCC"> devices and the actual</font>

85
00:03:08,700 --> 00:03:12,390
<font color="#E5E5E5">communication happens on specific</font>

86
00:03:10,290 --> 00:03:14,880
one-way unidirectional pipes called

87
00:03:12,390 --> 00:03:16,440
<font color="#CCCCCC">endpoints and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> affirmation descriptor</font>

88
00:03:14,880 --> 00:03:18,269
is<font color="#E5E5E5"> defined how many endpoints the device</font>

89
00:03:16,440 --> 00:03:20,310
has as<font color="#E5E5E5"> well as what type each of them is</font>

90
00:03:18,269 --> 00:03:22,530
and in<font color="#E5E5E5"> what</font><font color="#CCCCCC"> direction data flows through</font>

91
00:03:20,310 --> 00:03:24,269
them<font color="#E5E5E5"> so the host can send or receive a</font>

92
00:03:22,530 --> 00:03:25,980
<font color="#E5E5E5">number of specific a specific</font><font color="#CCCCCC"> number of</font>

93
00:03:24,269 --> 00:03:27,840
bytes on a particular end point or the

94
00:03:25,980 --> 00:03:30,030
device can do it and what happens<font color="#CCCCCC"> to</font>

95
00:03:27,840 --> 00:03:35,070
<font color="#E5E5E5">beyond that is entirely device or class</font>

96
00:03:30,030 --> 00:03:36,510
specific so as I said in our<font color="#E5E5E5"> specific</font>

97
00:03:35,070 --> 00:03:38,549
case<font color="#E5E5E5"> a</font><font color="#CCCCCC"> flash drive falls under the mass</font>

98
00:03:36,510 --> 00:03:40,140
storage device class and that particular

99
00:03:38,549 --> 00:03:42,480
device class defines several<font color="#E5E5E5"> different</font>

100
00:03:40,140 --> 00:03:44,100
protocols such as<font color="#CCCCCC"> cbi or control bulk</font>

101
00:03:42,480 --> 00:03:46,230
<font color="#E5E5E5">interrupt</font><font color="#CCCCCC"> which is used in USB</font><font color="#E5E5E5"> floppy</font>

102
00:03:44,100 --> 00:03:48,450
drives or the one we'll be<font color="#CCCCCC"> dealing with</font>

103
00:03:46,230 --> 00:03:50,130
the bulk only transport protocol or

104
00:03:48,450 --> 00:03:52,980
bought<font color="#E5E5E5"> which is used in pretty</font><font color="#CCCCCC"> much</font>

105
00:03:50,130 --> 00:03:55,890
everything else<font color="#E5E5E5"> bulk only transport</font>

106
00:03:52,980 --> 00:03:57,298
utilizes one bulk income one bulk

107
00:03:55,890 --> 00:03:59,940
<font color="#CCCCCC">endpoint for incoming data and another</font>

108
00:03:57,299 --> 00:04:01,769
bulk endpoint for outgoing<font color="#E5E5E5"> data so in</font>

109
00:03:59,940 --> 00:04:03,420
this<font color="#CCCCCC"> setup the</font><font color="#E5E5E5"> host always</font><font color="#CCCCCC"> issues</font>

110
00:04:01,769 --> 00:04:05,519
commands to the device and the device

111
00:04:03,420 --> 00:04:06,929
<font color="#E5E5E5">responds the device never volunteers</font>

112
00:04:05,519 --> 00:04:09,750
data on its own the<font color="#E5E5E5"> host always</font>

113
00:04:06,930 --> 00:04:11,459
initiates<font color="#E5E5E5"> these requests so a host</font>

114
00:04:09,750 --> 00:04:13,530
<font color="#E5E5E5">initiates a request by sending what's</font>

115
00:04:11,459 --> 00:04:14,940
called a CB<font color="#E5E5E5"> W or a command block wrapper</font>

116
00:04:13,530 --> 00:04:16,440
which consists of the<font color="#E5E5E5"> command and</font>

117
00:04:14,940 --> 00:04:18,000
sometimes a<font color="#CCCCCC"> little extra data kind of</font>

118
00:04:16,440 --> 00:04:19,978
like parameters if necessary for<font color="#CCCCCC"> that</font>

119
00:04:18,000 --> 00:04:22,229
<font color="#E5E5E5">command and then it</font><font color="#CCCCCC"> enters the</font><font color="#E5E5E5"> data</font>

120
00:04:19,978 --> 00:04:24,120
phase where either host the<font color="#E5E5E5"> host sends</font>

121
00:04:22,229 --> 00:04:25,620
more<font color="#E5E5E5"> outgoing data to the device or</font><font color="#CCCCCC"> the</font>

122
00:04:24,120 --> 00:04:27,540
device sends incoming data back

123
00:04:25,620 --> 00:04:29,699
<font color="#E5E5E5">to the host and</font><font color="#CCCCCC"> then it enters the final</font>

124
00:04:27,540 --> 00:04:32,070
phase where the device sends<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to the</font>

125
00:04:29,699 --> 00:04:34,710
<font color="#E5E5E5">host a</font><font color="#CCCCCC"> CSW or</font><font color="#E5E5E5"> a command status wrapper</font>

126
00:04:32,070 --> 00:04:39,330
which indicates the success or<font color="#E5E5E5"> failure</font>

127
00:04:34,710 --> 00:04:41,430
of<font color="#CCCCCC"> that request so what they did is</font>

128
00:04:39,330 --> 00:04:44,070
<font color="#E5E5E5">contained in these command and Status</font>

129
00:04:41,430 --> 00:04:46,830
wrappers<font color="#E5E5E5"> that's defined in the USB</font>

130
00:04:44,070 --> 00:04:48,479
floppy interface or<font color="#CCCCCC"> ufi protocol and it</font>

131
00:04:46,830 --> 00:04:49,530
has it has floppy<font color="#E5E5E5"> in the name because it</font>

132
00:04:48,479 --> 00:04:51,889
was<font color="#E5E5E5"> originally</font><font color="#CCCCCC"> intended for floppy</font>

133
00:04:49,530 --> 00:04:55,080
drives but it's used for<font color="#CCCCCC"> everything now</font>

134
00:04:51,889 --> 00:04:57,120
the<font color="#CCCCCC"> ufi specification defines a subset</font>

135
00:04:55,080 --> 00:04:58,770
<font color="#E5E5E5">of</font><font color="#CCCCCC"> disguisey command set which</font><font color="#E5E5E5"> contains</font>

136
00:04:57,120 --> 00:05:00,780
all<font color="#E5E5E5"> sorts of commands for getting the</font>

137
00:04:58,770 --> 00:05:04,190
capabilities and<font color="#E5E5E5"> capacity of a device</font>

138
00:05:00,780 --> 00:05:06,510
<font color="#E5E5E5">reading logical blocks or sectors</font>

139
00:05:04,190 --> 00:05:09,360
<font color="#E5E5E5">writing data to</font><font color="#CCCCCC"> a logical block or</font>

140
00:05:06,510 --> 00:05:10,889
sectors all kinds of stuff<font color="#E5E5E5"> it's also</font>

141
00:05:09,360 --> 00:05:12,060
very<font color="#CCCCCC"> flexible and that you can</font><font color="#E5E5E5"> define</font>

142
00:05:10,889 --> 00:05:13,380
your<font color="#E5E5E5"> own commands that get passed</font>

143
00:05:12,060 --> 00:05:15,270
through<font color="#E5E5E5"> this layer which the</font>

144
00:05:13,380 --> 00:05:18,330
specification defines as a<font color="#E5E5E5"> vendor</font>

145
00:05:15,270 --> 00:05:20,010
specific<font color="#E5E5E5"> command and these commands make</font>

146
00:05:18,330 --> 00:05:21,960
up the core of how we interact<font color="#CCCCCC"> with</font><font color="#E5E5E5"> USB</font>

147
00:05:20,010 --> 00:05:23,849
storage devices so as we'll see later<font color="#E5E5E5"> on</font>

148
00:05:21,960 --> 00:05:27,750
those these commands are extremely

149
00:05:23,850 --> 00:05:30,450
important so if we<font color="#E5E5E5"> open</font><font color="#CCCCCC"> up a flash drive</font>

150
00:05:27,750 --> 00:05:32,430
<font color="#E5E5E5">we'll see all the core pieces</font><font color="#CCCCCC"> we see the</font>

151
00:05:30,450 --> 00:05:34,500
USB<font color="#E5E5E5"> port on the left</font><font color="#CCCCCC"> the NAND flash</font>

152
00:05:32,430 --> 00:05:36,930
memory<font color="#E5E5E5"> chip on the right and then in</font>

153
00:05:34,500 --> 00:05:38,880
between<font color="#E5E5E5"> them we see a chip and this chip</font>

154
00:05:36,930 --> 00:05:40,860
is the<font color="#E5E5E5"> brain of</font><font color="#CCCCCC"> the whole system it is</font>

155
00:05:38,880 --> 00:05:42,599
<font color="#E5E5E5">responsible for</font><font color="#CCCCCC"> communicating over USB</font>

156
00:05:40,860 --> 00:05:45,000
<font color="#E5E5E5">and implementing all the aspects so that</font>

157
00:05:42,599 --> 00:05:47,130
<font color="#CCCCCC">protocol that I just</font><font color="#E5E5E5"> went</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> as well</font>

158
00:05:45,000 --> 00:05:49,740
<font color="#E5E5E5">as issuing commands to the NAND flash</font>

159
00:05:47,130 --> 00:05:52,020
chips it's in other<font color="#E5E5E5"> words it translates</font>

160
00:05:49,740 --> 00:05:55,800
the requests to read a<font color="#E5E5E5"> write logical</font><font color="#CCCCCC"> box</font>

161
00:05:52,020 --> 00:05:57,240
from the computer over USB and it sends

162
00:05:55,800 --> 00:05:59,070
<font color="#CCCCCC">that to</font><font color="#E5E5E5"> what the name memory chip needs</font>

163
00:05:57,240 --> 00:06:01,979
to know in order<font color="#E5E5E5"> to return</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> modify the</font>

164
00:05:59,070 --> 00:06:03,990
requested<font color="#E5E5E5"> data and in this particular</font>

165
00:06:01,979 --> 00:06:06,479
<font color="#E5E5E5">picture you could see hopefully</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

166
00:06:03,990 --> 00:06:08,460
see<font color="#CCCCCC"> it uses a chip made by faisal pH</font><font color="#E5E5E5"> ISO</font>

167
00:06:06,479 --> 00:06:10,469
n which is a<font color="#E5E5E5"> company you may have heard</font>

168
00:06:08,460 --> 00:06:13,888
<font color="#E5E5E5">of before if you follow this kind of</font>

169
00:06:10,470 --> 00:06:15,900
thing<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> recall the bad USB stuff</font>

170
00:06:13,889 --> 00:06:17,310
from<font color="#E5E5E5"> a couple years</font><font color="#CCCCCC"> ago this is the chip</font>

171
00:06:15,900 --> 00:06:21,599
<font color="#CCCCCC">that people focused</font><font color="#E5E5E5"> on in order to</font>

172
00:06:17,310 --> 00:06:22,770
implement so-called bad<font color="#E5E5E5"> USB exploits the</font>

173
00:06:21,599 --> 00:06:25,020
code<font color="#CCCCCC"> that this old ship runs can be</font>

174
00:06:22,770 --> 00:06:26,580
<font color="#CCCCCC">upgraded</font><font color="#E5E5E5"> without requiring a signature</font>

175
00:06:25,020 --> 00:06:28,680
to verify<font color="#CCCCCC"> the decision youin and came</font>

176
00:06:26,580 --> 00:06:30,180
from<font color="#E5E5E5"> a trusted</font><font color="#CCCCCC"> source</font><font color="#E5E5E5"> so since we know</font>

177
00:06:28,680 --> 00:06:34,950
<font color="#E5E5E5">this chip can run code that we write</font>

178
00:06:30,180 --> 00:06:38,069
seems like a good<font color="#E5E5E5"> target so how in the</font>

179
00:06:34,950 --> 00:06:40,139
world can<font color="#CCCCCC"> we do that well</font>

180
00:06:38,069 --> 00:06:41,339
we can maybe<font color="#E5E5E5"> buzz the commands that are</font>

181
00:06:40,139 --> 00:06:42,930
sent to<font color="#CCCCCC"> it you know see</font><font color="#E5E5E5"> if we can figure</font>

182
00:06:41,339 --> 00:06:44,849
out<font color="#E5E5E5"> some kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> buffer overflow or some</font>

183
00:06:42,930 --> 00:06:46,680
other kind of trick<font color="#CCCCCC"> I mean we could do</font>

184
00:06:44,849 --> 00:06:47,789
that but<font color="#E5E5E5"> that sounds really hard plus I</font>

185
00:06:46,680 --> 00:06:49,349
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> really know all that much</font><font color="#CCCCCC"> about</font>

186
00:06:47,789 --> 00:06:52,710
fuzzing so we'll put<font color="#E5E5E5"> that on the back</font>

187
00:06:49,349 --> 00:06:55,020
<font color="#CCCCCC">burner another thing we can do is try to</font>

188
00:06:52,710 --> 00:06:56,489
find<font color="#CCCCCC"> the tools used</font><font color="#E5E5E5"> to upgrade the</font>

189
00:06:55,020 --> 00:06:58,349
firmware<font color="#E5E5E5"> and then study how they work</font>

190
00:06:56,490 --> 00:07:02,210
<font color="#CCCCCC">and then just duplicate what they do it</font>

191
00:06:58,349 --> 00:07:02,210
sounds promising so we'll go with<font color="#CCCCCC"> that</font>

192
00:07:02,330 --> 00:07:06,058
if<font color="#E5E5E5"> we do some googling about this kind</font>

193
00:07:04,439 --> 00:07:09,149
of thing we very quickly<font color="#E5E5E5"> come across the</font>

194
00:07:06,059 --> 00:07:12,270
<font color="#E5E5E5">Russian site called the</font><font color="#CCCCCC"> USB DEVGRU USB</font>

195
00:07:09,149 --> 00:07:13,469
<font color="#E5E5E5">dev</font><font color="#CCCCCC"> dot are you this</font><font color="#E5E5E5"> site has this site</font>

196
00:07:12,270 --> 00:07:15,120
has<font color="#CCCCCC"> everything it has all sorts of</font>

197
00:07:13,469 --> 00:07:16,379
<font color="#E5E5E5">information about USB flash drives</font>

198
00:07:15,120 --> 00:07:19,259
upgrading the firmware<font color="#E5E5E5"> on them</font>

199
00:07:16,379 --> 00:07:20,879
reformatting them leaked firmware images

200
00:07:19,259 --> 00:07:24,059
the<font color="#CCCCCC"> Chinese tools and utilities</font><font color="#E5E5E5"> to flash</font>

201
00:07:20,879 --> 00:07:25,770
them everything<font color="#CCCCCC"> they're also</font><font color="#E5E5E5"> a handful</font>

202
00:07:24,059 --> 00:07:28,259
of<font color="#CCCCCC"> English utilities intended for</font><font color="#E5E5E5"> end</font>

203
00:07:25,770 --> 00:07:30,029
<font color="#E5E5E5">users</font><font color="#CCCCCC"> the most</font><font color="#E5E5E5"> important one being in my</font>

204
00:07:28,259 --> 00:07:32,849
opinion the<font color="#E5E5E5"> Patriot memory firmware</font>

205
00:07:30,029 --> 00:07:36,569
upgrade utility<font color="#CCCCCC"> it's for certain Patriot</font>

206
00:07:32,849 --> 00:07:37,619
USB flash drives these<font color="#E5E5E5"> Chinese tools are</font>

207
00:07:36,569 --> 00:07:39,270
<font color="#E5E5E5">if you don't</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> ever messed with</font>

208
00:07:37,619 --> 00:07:40,169
them but they are<font color="#CCCCCC"> very</font><font color="#E5E5E5"> finicky</font><font color="#CCCCCC"> I had a</font>

209
00:07:39,270 --> 00:07:41,339
lot<font color="#CCCCCC"> of trouble trying</font><font color="#E5E5E5"> to get these</font>

210
00:07:40,169 --> 00:07:43,198
things<font color="#CCCCCC"> to upgrade the firmware</font><font color="#E5E5E5"> on a</font>

211
00:07:41,339 --> 00:07:44,580
drive<font color="#E5E5E5"> that I actually have because</font>

212
00:07:43,199 --> 00:07:46,319
they're<font color="#E5E5E5"> highly configurable but they're</font>

213
00:07:44,580 --> 00:07:48,240
also<font color="#CCCCCC"> very</font><font color="#E5E5E5"> complex and when the interface</font>

214
00:07:46,319 --> 00:07:50,129
<font color="#E5E5E5">is partly in Chinese it's hard to</font>

215
00:07:48,240 --> 00:07:53,610
diagnose<font color="#CCCCCC"> some of the more cryptic errors</font>

216
00:07:50,129 --> 00:07:54,899
<font color="#E5E5E5">that it has but so these tools were</font>

217
00:07:53,610 --> 00:07:56,249
useful in knowing what all should

218
00:07:54,899 --> 00:07:57,809
theoretically be<font color="#E5E5E5"> possible with these</font>

219
00:07:56,249 --> 00:08:00,659
drives but getting them to<font color="#CCCCCC"> actually do</font>

220
00:07:57,809 --> 00:08:02,249
it<font color="#E5E5E5"> is kind of a challenge I'm the one</font>

221
00:08:00,659 --> 00:08:04,649
tool that<font color="#E5E5E5"> doesn't throw any errors for</font>

222
00:08:02,249 --> 00:08:06,509
me was it's called get info and it just

223
00:08:04,649 --> 00:08:08,159
retrieved get info<font color="#CCCCCC"> die XE just retrieves</font>

224
00:08:06,509 --> 00:08:10,469
information<font color="#CCCCCC"> from the drive such as what</font>

225
00:08:08,159 --> 00:08:11,938
firmware version it's currently<font color="#CCCCCC"> on what</font>

226
00:08:10,469 --> 00:08:12,659
version<font color="#CCCCCC"> of what utility</font><font color="#E5E5E5"> flashed that</font>

227
00:08:11,939 --> 00:08:14,879
version<font color="#CCCCCC"> to it</font>

228
00:08:12,659 --> 00:08:16,558
how many partitions<font color="#E5E5E5"> it has what what the</font>

229
00:08:14,879 --> 00:08:20,309
name of<font color="#CCCCCC"> the drive is vendor product IDs</font>

230
00:08:16,559 --> 00:08:21,749
<font color="#E5E5E5">all that kind of stuff as far as I'm</font>

231
00:08:20,309 --> 00:08:22,919
getting firmware<font color="#E5E5E5"> the one tool I could</font>

232
00:08:21,749 --> 00:08:24,389
get to actually<font color="#CCCCCC"> work was the one</font>

233
00:08:22,919 --> 00:08:28,339
intended for end users which is<font color="#CCCCCC"> the</font>

234
00:08:24,389 --> 00:08:30,930
<font color="#CCCCCC">Patriot firmware utility upgrade utility</font>

235
00:08:28,339 --> 00:08:32,519
to know what is<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> over USB we</font>

236
00:08:30,930 --> 00:08:34,919
need to log<font color="#CCCCCC"> that traffic somehow though</font>

237
00:08:32,519 --> 00:08:37,349
and there are a<font color="#E5E5E5"> bunch of options here we</font>

238
00:08:34,919 --> 00:08:39,360
can use one of<font color="#CCCCCC"> a number of</font><font color="#E5E5E5"> software</font>

239
00:08:37,349 --> 00:08:41,639
analyzers<font color="#E5E5E5"> that summer windows only some</font>

240
00:08:39,360 --> 00:08:45,720
work on<font color="#CCCCCC"> Linux and that works pretty well</font>

241
00:08:41,639 --> 00:08:47,699
with<font color="#E5E5E5"> most devices</font><font color="#CCCCCC"> we could fake the</font>

242
00:08:45,720 --> 00:08:50,250
device using an Arduino or<font color="#E5E5E5"> some other of</font>

243
00:08:47,699 --> 00:08:51,279
<font color="#E5E5E5">USB peripheral</font><font color="#CCCCCC"> so that means we would</font>

244
00:08:50,250 --> 00:08:53,290
write code<font color="#E5E5E5"> for</font>

245
00:08:51,279 --> 00:08:56,259
<font color="#CCCCCC">that Arduino</font><font color="#E5E5E5"> so that it would simulate a</font>

246
00:08:53,290 --> 00:08:57,670
USB<font color="#CCCCCC"> flash drive and then plug it in and</font>

247
00:08:56,259 --> 00:08:59,829
then log the traffic that it receives

248
00:08:57,670 --> 00:09:01,540
<font color="#E5E5E5">from that firmware upgrade utility you</font>

249
00:08:59,829 --> 00:09:02,859
could<font color="#E5E5E5"> even go so far as</font><font color="#CCCCCC"> to add a</font><font color="#E5E5E5"> USB</font>

250
00:09:01,540 --> 00:09:04,599
host shield to it so you could<font color="#E5E5E5"> plug the</font>

251
00:09:02,860 --> 00:09:06,100
actual flash drive<font color="#E5E5E5"> into the Arduino</font><font color="#CCCCCC"> and</font>

252
00:09:04,600 --> 00:09:07,990
then just relay the traffic<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the</font>

253
00:09:06,100 --> 00:09:10,600
two and<font color="#CCCCCC"> just log it somewhere and study</font>

254
00:09:07,990 --> 00:09:13,629
it later<font color="#E5E5E5"> but that's really complicated</font>

255
00:09:10,600 --> 00:09:14,709
<font color="#CCCCCC">and</font><font color="#E5E5E5"> that could be its own talk I have</font>

256
00:09:13,629 --> 00:09:16,569
done stuff like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> before but</font><font color="#E5E5E5"> that's</font>

257
00:09:14,709 --> 00:09:19,359
<font color="#E5E5E5">just overkill for this</font>

258
00:09:16,569 --> 00:09:21,610
so our final<font color="#E5E5E5"> option is a hardware USB</font>

259
00:09:19,360 --> 00:09:24,129
analyzer<font color="#CCCCCC"> like the total phase</font><font color="#E5E5E5"> beagle USB</font>

260
00:09:21,610 --> 00:09:25,720
protocol analyzer<font color="#E5E5E5"> here</font><font color="#CCCCCC"> I am fortunate</font>

261
00:09:24,129 --> 00:09:27,579
<font color="#CCCCCC">enough to actually own one</font><font color="#E5E5E5"> of these so</font>

262
00:09:25,720 --> 00:09:28,779
that's what I used<font color="#E5E5E5"> but the software one</font>

263
00:09:27,579 --> 00:09:31,120
would have<font color="#E5E5E5"> been fine but this made my</font>

264
00:09:28,779 --> 00:09:32,470
life a<font color="#E5E5E5"> whole lot easier unfortunately</font>

265
00:09:31,120 --> 00:09:34,300
<font color="#E5E5E5">the one I have is the cheapest one</font><font color="#CCCCCC"> you</font>

266
00:09:32,470 --> 00:09:37,029
can get which is not cheap just the

267
00:09:34,300 --> 00:09:39,639
cheapest<font color="#E5E5E5"> and it can only log</font><font color="#CCCCCC"> full-speed</font>

268
00:09:37,029 --> 00:09:41,980
or USB 1.1 traffic so to get<font color="#E5E5E5"> around that</font>

269
00:09:39,639 --> 00:09:43,269
I had to I had<font color="#E5E5E5"> to do what</font><font color="#CCCCCC"> most people</font>

270
00:09:41,980 --> 00:09:45,879
with the say<font color="#CCCCCC"> no has to</font><font color="#E5E5E5"> do they hook up a</font>

271
00:09:43,269 --> 00:09:47,670
<font color="#CCCCCC">self-powered</font><font color="#E5E5E5"> USB 1.1 hub between it and</font>

272
00:09:45,879 --> 00:09:49,720
the<font color="#E5E5E5"> host so slows it down to full speed</font>

273
00:09:47,670 --> 00:09:52,180
<font color="#E5E5E5">that way you can log whatever traffic</font>

274
00:09:49,720 --> 00:09:52,779
you<font color="#E5E5E5"> want and let me tell you finding a</font>

275
00:09:52,180 --> 00:09:54,579
self-powered

276
00:09:52,779 --> 00:09:55,629
<font color="#E5E5E5">hug</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> not a hub powered one so it has</font>

277
00:09:54,579 --> 00:09:56,258
its own<font color="#E5E5E5"> power supply finding a</font>

278
00:09:55,629 --> 00:09:59,259
<font color="#CCCCCC">self-powered</font>

279
00:09:56,259 --> 00:10:02,939
<font color="#E5E5E5">USB 1.1 hub is not easy these</font><font color="#CCCCCC"> days but I</font>

280
00:09:59,259 --> 00:10:05,050
did find one and so<font color="#E5E5E5"> that's what I did</font><font color="#CCCCCC"> so</font>

281
00:10:02,939 --> 00:10:06,819
<font color="#CCCCCC">if we hook</font><font color="#E5E5E5"> up the analyzer</font><font color="#CCCCCC"> at the hub</font>

282
00:10:05,050 --> 00:10:08,378
the flash drive and<font color="#E5E5E5"> the PC and we run</font>

283
00:10:06,819 --> 00:10:10,628
<font color="#E5E5E5">our firmware update to all the Patriot</font>

284
00:10:08,379 --> 00:10:13,660
<font color="#CCCCCC">one and this</font><font color="#E5E5E5"> is what we get</font><font color="#CCCCCC"> hopefully</font>

285
00:10:10,629 --> 00:10:15,399
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can see that but what we're looking</font>

286
00:10:13,660 --> 00:10:17,709
<font color="#CCCCCC">at</font><font color="#E5E5E5"> here is a traffic</font><font color="#CCCCCC"> log between</font><font color="#E5E5E5"> the PC</font>

287
00:10:15,399 --> 00:10:20,350
and the USB<font color="#E5E5E5"> flash drive you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see a</font>

288
00:10:17,709 --> 00:10:22,029
series<font color="#CCCCCC"> of outgoing packets in green and</font>

289
00:10:20,350 --> 00:10:24,069
then incoming packets in blue<font color="#E5E5E5"> going back</font>

290
00:10:22,029 --> 00:10:25,779
and<font color="#E5E5E5"> forth as I mentioned a little bit</font>

291
00:10:24,069 --> 00:10:27,550
ago the flash drive uses the mass

292
00:10:25,779 --> 00:10:28,839
storage device class and<font color="#E5E5E5"> since this is</font>

293
00:10:27,550 --> 00:10:31,029
not<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Drive it uses the bulk</font>

294
00:10:28,839 --> 00:10:32,529
only transport protocol which means it

295
00:10:31,029 --> 00:10:33,939
uses<font color="#E5E5E5"> an incoming and outgoing bulk</font>

296
00:10:32,529 --> 00:10:36,309
<font color="#E5E5E5">endpoint for communication back</font><font color="#CCCCCC"> and</font>

297
00:10:33,939 --> 00:10:38,110
<font color="#CCCCCC">forth</font><font color="#E5E5E5"> and it uses the</font><font color="#CCCCCC"> ufi protocol which</font>

298
00:10:36,309 --> 00:10:40,480
is<font color="#E5E5E5"> a subset of the</font><font color="#CCCCCC"> disguising command</font>

299
00:10:38,110 --> 00:10:42,370
set<font color="#E5E5E5"> so basically it wraps</font><font color="#CCCCCC"> scuzzy</font>

300
00:10:40,480 --> 00:10:45,189
commands and their responses<font color="#E5E5E5"> back and</font>

301
00:10:42,370 --> 00:10:46,629
forth so we're just scuzzy commands all

302
00:10:45,189 --> 00:10:48,129
we're talking<font color="#E5E5E5"> about here</font><font color="#CCCCCC"> so you can see</font>

303
00:10:46,629 --> 00:10:50,470
that the green<font color="#E5E5E5"> outgoing packet that I've</font>

304
00:10:48,129 --> 00:10:52,720
got highlighted starts out with bytes 55

305
00:10:50,470 --> 00:10:54,610
53 42 and 43<font color="#CCCCCC"> and eggs</font>

306
00:10:52,720 --> 00:10:59,139
those are ASCII codes that correspond to

307
00:10:54,610 --> 00:11:00,819
<font color="#E5E5E5">USB</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> C C being command which is which</font>

308
00:10:59,139 --> 00:11:02,319
means<font color="#E5E5E5"> this is a c BW or</font><font color="#CCCCCC"> a command</font><font color="#E5E5E5"> block</font>

309
00:11:00,819 --> 00:11:03,589
<font color="#E5E5E5">trapper so it's wrapping the scuzzy</font>

310
00:11:02,319 --> 00:11:06,979
<font color="#E5E5E5">request</font>

311
00:11:03,590 --> 00:11:08,990
and after that follows a unique packet

312
00:11:06,980 --> 00:11:10,250
ID and some other junk<font color="#E5E5E5"> and then a packet</font>

313
00:11:08,990 --> 00:11:13,010
length which is<font color="#E5E5E5"> in the and on</font>

314
00:11:10,250 --> 00:11:16,580
highlighted row is<font color="#CCCCCC"> ten hex and then the</font>

315
00:11:13,010 --> 00:11:19,069
command byte is right after that<font color="#E5E5E5"> so here</font>

316
00:11:16,580 --> 00:11:21,710
that's<font color="#E5E5E5"> a 6 0 6</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> 6 as it turns out is a</font>

317
00:11:19,070 --> 00:11:23,450
vendor<font color="#CCCCCC"> specific command</font><font color="#E5E5E5"> so it's reserved</font>

318
00:11:21,710 --> 00:11:25,339
in<font color="#E5E5E5"> the scuzzy command set for the vendor</font>

319
00:11:23,450 --> 00:11:27,800
<font color="#CCCCCC">or the manufacturer</font><font color="#E5E5E5"> whoever to use I</font>

320
00:11:25,339 --> 00:11:31,220
normally you'd see something<font color="#CCCCCC"> like 28</font>

321
00:11:27,800 --> 00:11:33,290
<font color="#E5E5E5">which means read sector or you are 0 0</font><font color="#CCCCCC"> I</font>

322
00:11:31,220 --> 00:11:35,240
<font color="#CCCCCC">can't like what's highlighted above</font>

323
00:11:33,290 --> 00:11:37,250
<font color="#CCCCCC">above without it but since we have 0 6</font>

324
00:11:35,240 --> 00:11:39,740
<font color="#E5E5E5">that's a vendor</font><font color="#CCCCCC"> specific command and the</font>

325
00:11:37,250 --> 00:11:43,370
byte<font color="#CCCCCC"> that follows the 0 6 which in the</font>

326
00:11:39,740 --> 00:11:45,260
screenshot can be<font color="#CCCCCC"> B 3</font><font color="#E5E5E5"> 0 5 or B 0 seems</font>

327
00:11:43,370 --> 00:11:47,029
to<font color="#E5E5E5"> be some sort</font><font color="#CCCCCC"> of sub command if you</font>

328
00:11:45,260 --> 00:11:48,380
will with<font color="#E5E5E5"> that the fights and software</font>

329
00:11:47,029 --> 00:11:50,120
uses to determine<font color="#E5E5E5"> what we're really</font>

330
00:11:48,380 --> 00:11:52,130
trying<font color="#CCCCCC"> to do so they use one command and</font>

331
00:11:50,120 --> 00:11:54,170
then all the<font color="#CCCCCC"> data that they</font><font color="#E5E5E5"> attach after</font>

332
00:11:52,130 --> 00:11:56,779
that command<font color="#E5E5E5"> is the actual command that</font>

333
00:11:54,170 --> 00:11:59,479
it's going<font color="#E5E5E5"> to work</font><font color="#CCCCCC"> with the action it's</font>

334
00:11:56,779 --> 00:12:00,710
been it's being told to do so after<font color="#E5E5E5"> that</font>

335
00:11:59,480 --> 00:12:02,900
packet we can see an incoming packet

336
00:12:00,710 --> 00:12:05,890
<font color="#CCCCCC">that starts with 55 53</font><font color="#E5E5E5"> forty to fifty</font>

337
00:12:02,900 --> 00:12:08,689
<font color="#E5E5E5">three which is USB s s being status</font>

338
00:12:05,890 --> 00:12:10,490
which signifies<font color="#CCCCCC"> the CSW or the command</font>

339
00:12:08,690 --> 00:12:11,690
status<font color="#CCCCCC"> rather</font><font color="#E5E5E5"> which is the end of the</font>

340
00:12:10,490 --> 00:12:13,130
command it's just the response to the

341
00:12:11,690 --> 00:12:15,170
success or<font color="#CCCCCC"> failure response to</font><font color="#E5E5E5"> that</font>

342
00:12:13,130 --> 00:12:16,490
command<font color="#E5E5E5"> sometimes there's data in</font>

343
00:12:15,170 --> 00:12:18,260
between<font color="#E5E5E5"> there</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> such as the long</font>

344
00:12:16,490 --> 00:12:19,520
stream<font color="#CCCCCC"> of incoming packets that</font><font color="#E5E5E5"> you can</font>

345
00:12:18,260 --> 00:12:21,260
see in the<font color="#E5E5E5"> middle that screenshot</font>

346
00:12:19,520 --> 00:12:22,810
towards the bottom<font color="#E5E5E5"> and sometimes there's</font>

347
00:12:21,260 --> 00:12:25,550
not<font color="#CCCCCC"> it</font><font color="#E5E5E5"> just depends on the command some</font>

348
00:12:22,810 --> 00:12:28,040
get read data in some send data out<font color="#E5E5E5"> and</font>

349
00:12:25,550 --> 00:12:29,359
<font color="#E5E5E5">so the c BW indicates how much data is</font>

350
00:12:28,040 --> 00:12:34,040
going to<font color="#CCCCCC"> be in between</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> and in what</font>

351
00:12:29,360 --> 00:12:35,270
<font color="#E5E5E5">direction it flows in so to summarize</font>

352
00:12:34,040 --> 00:12:36,890
this what<font color="#CCCCCC"> I discovered is the handful of</font>

353
00:12:35,270 --> 00:12:39,829
<font color="#E5E5E5">commands such as what drives that get</font>

354
00:12:36,890 --> 00:12:42,560
info<font color="#E5E5E5"> dot exe utility and in the basics</font>

355
00:12:39,830 --> 00:12:44,210
of the firmware<font color="#E5E5E5"> upgrade process so to</font>

356
00:12:42,560 --> 00:12:45,979
get basic information<font color="#CCCCCC"> we send the vendor</font>

357
00:12:44,210 --> 00:12:49,730
specific<font color="#CCCCCC"> commands 0</font><font color="#E5E5E5"> 6 which is</font><font color="#CCCCCC"> how all</font>

358
00:12:45,980 --> 00:12:51,620
<font color="#E5E5E5">these commands work and then 0 5 0 5 0</font><font color="#CCCCCC"> 0</font>

359
00:12:49,730 --> 00:12:52,940
<font color="#E5E5E5">for one type of</font><font color="#CCCCCC"> information or 0 5 and</font>

360
00:12:51,620 --> 00:12:54,770
in<font color="#E5E5E5"> the word info for another type of</font>

361
00:12:52,940 --> 00:12:56,990
<font color="#CCCCCC">information</font><font color="#E5E5E5"> what the difference is</font>

362
00:12:54,770 --> 00:13:00,949
exactly<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> not sure</font><font color="#E5E5E5"> I don't know but to</font>

363
00:12:56,990 --> 00:13:03,140
transfer some kind of block of data we

364
00:13:00,950 --> 00:13:05,510
send<font color="#CCCCCC"> an initial header using b12 check</font>

365
00:13:03,140 --> 00:13:07,550
to make sure that<font color="#CCCCCC"> it worked with B 0 and</font>

366
00:13:05,510 --> 00:13:09,290
<font color="#CCCCCC">then 512 bytes at a time</font><font color="#E5E5E5"> we send the</font>

367
00:13:07,550 --> 00:13:10,910
rest of the image with<font color="#CCCCCC"> the address</font><font color="#E5E5E5"> and</font>

368
00:13:09,290 --> 00:13:13,280
<font color="#E5E5E5">the offset there's some sort</font><font color="#CCCCCC"> of image</font>

369
00:13:10,910 --> 00:13:14,600
that<font color="#CCCCCC"> gets</font><font color="#E5E5E5"> sent across so to do the</font>

370
00:13:13,280 --> 00:13:15,949
actual firmware<font color="#CCCCCC"> okay we transfer the</font>

371
00:13:14,600 --> 00:13:17,250
data using<font color="#E5E5E5"> a certain couple of bytes</font>

372
00:13:15,950 --> 00:13:19,290
then we send this unknown

373
00:13:17,250 --> 00:13:20,610
<font color="#E5E5E5">'command don't know what that is then we</font>

374
00:13:19,290 --> 00:13:22,439
<font color="#E5E5E5">transfer the data</font><font color="#CCCCCC"> again using</font><font color="#E5E5E5"> a</font>

375
00:13:20,610 --> 00:13:25,080
different<font color="#E5E5E5"> couple of</font><font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> exact same</font>

376
00:13:22,440 --> 00:13:27,810
<font color="#E5E5E5">data again then several more</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> commands</font>

377
00:13:25,080 --> 00:13:32,550
<font color="#E5E5E5">don't know what that is</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> that's what</font>

378
00:13:27,810 --> 00:13:34,709
<font color="#CCCCCC">we've observed so far so what are these</font>

379
00:13:32,550 --> 00:13:35,790
unknown chunks of<font color="#E5E5E5"> data these images</font><font color="#CCCCCC"> that</font>

380
00:13:34,710 --> 00:13:38,160
get transferred during the firmware

381
00:13:35,790 --> 00:13:39,540
<font color="#E5E5E5">upgrade</font><font color="#CCCCCC"> well obviously at least one of</font>

382
00:13:38,160 --> 00:13:41,760
them<font color="#E5E5E5"> part of it has to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the firmware</font>

383
00:13:39,540 --> 00:13:44,240
data<font color="#E5E5E5"> so let's just reconstruct it from</font>

384
00:13:41,760 --> 00:13:46,860
<font color="#CCCCCC">the traffic</font><font color="#E5E5E5"> logs which I did by hand</font>

385
00:13:44,240 --> 00:13:49,320
<font color="#CCCCCC">loaded</font><font color="#E5E5E5"> up in ID a pro and just find out</font>

386
00:13:46,860 --> 00:13:51,120
<font color="#E5E5E5">so there's no way to know if</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would</font>

387
00:13:49,320 --> 00:13:52,440
work<font color="#E5E5E5"> if it's compressed encrypted or off</font>

388
00:13:51,120 --> 00:13:55,350
you skated in some way<font color="#CCCCCC"> but it's worth a</font>

389
00:13:52,440 --> 00:13:57,510
shot<font color="#E5E5E5"> we'll try it so when I get the ID a</font>

390
00:13:55,350 --> 00:13:59,220
<font color="#CCCCCC">pro's processor selection window you</font>

391
00:13:57,510 --> 00:14:00,720
choose what processor it is<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> know</font>

392
00:13:59,220 --> 00:14:02,520
<font color="#E5E5E5">what's</font><font color="#CCCCCC"> pic because</font><font color="#E5E5E5"> I don't know when</font>

393
00:14:00,720 --> 00:14:05,010
<font color="#CCCCCC">struction set the spice and chip uses</font>

394
00:14:02,520 --> 00:14:06,900
well a little quick googling and<font color="#CCCCCC"> phi sin</font>

395
00:14:05,010 --> 00:14:09,920
has a nice page on their own site that

396
00:14:06,900 --> 00:14:12,540
says what it is<font color="#E5E5E5"> it's an</font><font color="#CCCCCC"> Intel 851</font><font color="#E5E5E5"> CPU</font>

397
00:14:09,920 --> 00:14:15,270
now I had never seen<font color="#E5E5E5"> 8051 assembly</font>

398
00:14:12,540 --> 00:14:17,459
before<font color="#E5E5E5"> this but I did</font><font color="#CCCCCC"> no assembly for</font>

399
00:14:15,270 --> 00:14:20,939
several different processors from x86<font color="#CCCCCC"> 2</font>

400
00:14:17,460 --> 00:14:23,370
<font color="#E5E5E5">to</font><font color="#CCCCCC"> z lager zilog z80</font><font color="#E5E5E5"> to motorola 6800</font>

401
00:14:20,940 --> 00:14:24,960
dabbled a little bit in arm PowerPC so I

402
00:14:23,370 --> 00:14:27,330
figured you<font color="#CCCCCC"> know you know one you know</font>

403
00:14:24,960 --> 00:14:28,020
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> alright so I'll give it a</font><font color="#E5E5E5"> shot so I</font>

404
00:14:27,330 --> 00:14:29,640
picked 8051

405
00:14:28,020 --> 00:14:32,160
and I start analyzing it at address<font color="#CCCCCC"> zero</font>

406
00:14:29,640 --> 00:14:34,530
you<font color="#E5E5E5"> just assume it's</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and what I see</font>

407
00:14:32,160 --> 00:14:36,839
actually<font color="#E5E5E5"> seems to make sense and the</font>

408
00:14:34,530 --> 00:14:38,370
8051 like a lot of<font color="#E5E5E5"> embedded CPUs tend to</font>

409
00:14:36,839 --> 00:14:39,870
have internet vectors and<font color="#E5E5E5"> other stuff at</font>

410
00:14:38,370 --> 00:14:41,490
the very<font color="#E5E5E5"> beginning of memory so we can</font>

411
00:14:39,870 --> 00:14:42,450
see that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> do a pro if you can see if</font>

412
00:14:41,490 --> 00:14:44,730
you can see in the screenshot has

413
00:14:42,450 --> 00:14:45,930
assumed<font color="#E5E5E5"> the reset vector is at address</font>

414
00:14:44,730 --> 00:14:47,910
<font color="#CCCCCC">zero that's</font><font color="#E5E5E5"> the first code it gets</font>

415
00:14:45,930 --> 00:14:49,349
executed which<font color="#E5E5E5"> immediately jumps</font>

416
00:14:47,910 --> 00:14:50,790
<font color="#E5E5E5">elsewhere is just a jump</font><font color="#CCCCCC"> construction</font>

417
00:14:49,350 --> 00:14:52,589
jump cell<font color="#CCCCCC"> tour in memory which is</font>

418
00:14:50,790 --> 00:14:54,089
typical<font color="#E5E5E5"> and then it seems</font><font color="#CCCCCC"> to do a bunch</font>

419
00:14:52,589 --> 00:14:56,490
of initialization things before it

420
00:14:54,089 --> 00:14:57,390
enters an infinite loop<font color="#E5E5E5"> that's exactly</font>

421
00:14:56,490 --> 00:14:59,970
<font color="#E5E5E5">the kind of thing I</font><font color="#CCCCCC"> would expect</font><font color="#E5E5E5"> to see</font>

422
00:14:57,390 --> 00:15:01,410
<font color="#E5E5E5">in an embedded devices OS or firmware so</font>

423
00:14:59,970 --> 00:15:03,120
that's great<font color="#E5E5E5"> we</font><font color="#CCCCCC"> got a pretty good idea</font>

424
00:15:01,410 --> 00:15:08,010
<font color="#CCCCCC">pretty good</font><font color="#E5E5E5"> idea what's going on here we</font>

425
00:15:03,120 --> 00:15:09,990
can least see<font color="#CCCCCC"> some code so the firmware</font>

426
00:15:08,010 --> 00:15:11,790
upgrade<font color="#E5E5E5"> traffic log revealed two</font>

427
00:15:09,990 --> 00:15:15,870
different 8051 images one<font color="#E5E5E5"> of them which</font>

428
00:15:11,790 --> 00:15:17,520
<font color="#E5E5E5">is 32 kilobytes looks pretty normal</font><font color="#CCCCCC"> pad</font>

429
00:15:15,870 --> 00:15:19,740
<font color="#CCCCCC">it out to zeroes at the</font><font color="#E5E5E5"> end</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what</font>

430
00:15:17,520 --> 00:15:22,020
all the zeros are<font color="#E5E5E5"> there and but the</font>

431
00:15:19,740 --> 00:15:26,700
<font color="#E5E5E5">other one is around</font><font color="#CCCCCC"> 241 kilobytes</font>

432
00:15:22,020 --> 00:15:28,380
<font color="#E5E5E5">now if you know</font><font color="#CCCCCC"> anyway 8051 the only it</font>

433
00:15:26,700 --> 00:15:30,690
<font color="#E5E5E5">only has one useful 16-bit register</font>

434
00:15:28,380 --> 00:15:31,240
which is<font color="#E5E5E5"> the DPT</font><font color="#CCCCCC"> our data pointer</font>

435
00:15:30,690 --> 00:15:33,440
register

436
00:15:31,240 --> 00:15:36,230
that means it can't address<font color="#E5E5E5"> anything</font>

437
00:15:33,440 --> 00:15:44,930
beyond<font color="#CCCCCC"> 16</font><font color="#E5E5E5"> bits</font><font color="#CCCCCC"> so that's 64 kilobytes</font>

438
00:15:36,230 --> 00:15:47,480
because<font color="#E5E5E5"> 65535</font><font color="#CCCCCC"> Syd has</font><font color="#E5E5E5"> to be utilizing</font>

439
00:15:44,930 --> 00:15:48,709
paging and<font color="#E5E5E5"> something in some way and if</font>

440
00:15:47,480 --> 00:15:50,090
you aren't<font color="#E5E5E5"> familiar with memory paging</font>

441
00:15:48,710 --> 00:15:52,580
that means it needs<font color="#CCCCCC"> to split up the</font>

442
00:15:50,090 --> 00:15:54,710
addressable 64 kilobyte range<font color="#CCCCCC"> into</font><font color="#E5E5E5"> pages</font>

443
00:15:52,580 --> 00:15:56,540
or groups of memory and then the

444
00:15:54,710 --> 00:15:58,670
firmware<font color="#E5E5E5"> then swaps in whatever block of</font>

445
00:15:56,540 --> 00:16:00,410
memory<font color="#E5E5E5"> it needs at</font><font color="#CCCCCC"> any given time to one</font>

446
00:15:58,670 --> 00:16:02,660
of those<font color="#E5E5E5"> pages</font><font color="#CCCCCC"> so all you have</font><font color="#E5E5E5"> to do to</font>

447
00:16:00,410 --> 00:16:04,040
access<font color="#E5E5E5"> and address with is accessing</font>

448
00:16:02,660 --> 00:16:06,469
address<font color="#E5E5E5"> within that page</font><font color="#CCCCCC"> whatever you</font>

449
00:16:04,040 --> 00:16:08,089
swapped in there now some devices have

450
00:16:06,470 --> 00:16:09,500
additional hardware they do this paging

451
00:16:08,090 --> 00:16:11,300
for them and some<font color="#E5E5E5"> devices like this one</font>

452
00:16:09,500 --> 00:16:12,650
<font color="#E5E5E5">do it through a combination of hardware</font>

453
00:16:11,300 --> 00:16:16,459
and<font color="#CCCCCC"> software and I'll show you</font><font color="#E5E5E5"> what I</font>

454
00:16:12,650 --> 00:16:17,810
mean through playing around<font color="#E5E5E5"> by loading</font>

455
00:16:16,460 --> 00:16:19,580
different<font color="#CCCCCC"> chunks of the firmware into</font>

456
00:16:17,810 --> 00:16:20,660
different starting addresses an<font color="#CCCCCC"> ID a</font><font color="#E5E5E5"> pro</font>

457
00:16:19,580 --> 00:16:21,860
<font color="#CCCCCC">because I don't know where this code</font>

458
00:16:20,660 --> 00:16:23,990
running from so I'll just<font color="#E5E5E5"> try things</font>

459
00:16:21,860 --> 00:16:25,310
<font color="#E5E5E5">right but eventually</font><font color="#CCCCCC"> I figured out I</font>

460
00:16:23,990 --> 00:16:26,780
<font color="#E5E5E5">realized that the firmware</font><font color="#CCCCCC"> is actually</font>

461
00:16:25,310 --> 00:16:29,060
split<font color="#CCCCCC"> up into a</font><font color="#E5E5E5"> dozen or so different</font>

462
00:16:26,780 --> 00:16:30,410
<font color="#E5E5E5">pages</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> most important one being paged</font>

463
00:16:29,060 --> 00:16:32,469
<font color="#CCCCCC">zero at the bottom there and that's</font><font color="#E5E5E5"> the</font>

464
00:16:30,410 --> 00:16:35,420
base page which is fixed<font color="#E5E5E5"> at address zero</font>

465
00:16:32,470 --> 00:16:38,630
and<font color="#E5E5E5"> that base page is 16 kilobytes big</font>

466
00:16:35,420 --> 00:16:41,599
padded out<font color="#E5E5E5"> 16 kilobytes from</font><font color="#CCCCCC"> 0 all the</font>

467
00:16:38,630 --> 00:16:43,370
way<font color="#E5E5E5"> to 3 ffff leaving</font><font color="#CCCCCC"> 4000 upwards as</font>

468
00:16:41,600 --> 00:16:45,470
another 32 kilobytes for<font color="#E5E5E5"> swapping in</font>

469
00:16:43,370 --> 00:16:47,720
different<font color="#CCCCCC"> pages now there is code</font>

470
00:16:45,470 --> 00:16:49,940
littered all over<font color="#CCCCCC"> the place in the</font>

471
00:16:47,720 --> 00:16:52,070
firmware<font color="#E5E5E5"> that makes what I call off page</font>

472
00:16:49,940 --> 00:16:55,220
calls or calls into subroutines<font color="#CCCCCC"> that</font>

473
00:16:52,070 --> 00:16:56,480
<font color="#CCCCCC">exist</font><font color="#E5E5E5"> off on one of these other pages</font><font color="#CCCCCC"> so</font>

474
00:16:55,220 --> 00:16:58,160
it passes<font color="#CCCCCC"> the address of the function</font>

475
00:16:56,480 --> 00:16:59,840
that<font color="#E5E5E5"> it wants to</font><font color="#CCCCCC"> call at the location it</font>

476
00:16:58,160 --> 00:17:02,060
would exist<font color="#E5E5E5"> if it were swapped in at</font>

477
00:16:59,840 --> 00:17:03,530
<font color="#CCCCCC">4,000</font><font color="#E5E5E5"> and up into a function</font><font color="#CCCCCC"> that</font>

478
00:17:02,060 --> 00:17:05,270
temporarily swaps in the page you wanted

479
00:17:03,530 --> 00:17:06,829
it calls the code that you wanted<font color="#E5E5E5"> and</font>

480
00:17:05,270 --> 00:17:10,430
<font color="#CCCCCC">then it restores that whatever page was</font>

481
00:17:06,829 --> 00:17:11,629
at 4,000<font color="#E5E5E5"> before you called it so as an</font>

482
00:17:10,430 --> 00:17:14,690
example if<font color="#E5E5E5"> I wanted to call a function</font>

483
00:17:11,630 --> 00:17:16,490
at address<font color="#E5E5E5"> 5,000 on page 1</font><font color="#CCCCCC"> I would set</font>

484
00:17:14,690 --> 00:17:17,960
the<font color="#CCCCCC"> data pointer register to</font><font color="#E5E5E5"> 5,000 and</font>

485
00:17:16,490 --> 00:17:19,370
then I would<font color="#E5E5E5"> call the read in page</font><font color="#CCCCCC"> 1</font>

486
00:17:17,960 --> 00:17:21,470
<font color="#CCCCCC">function</font><font color="#E5E5E5"> that you could see in the</font>

487
00:17:19,369 --> 00:17:23,540
screenshot which would swap in page 1

488
00:17:21,470 --> 00:17:25,490
<font color="#CCCCCC">call the coded address five thousand and</font>

489
00:17:23,540 --> 00:17:27,409
then return<font color="#CCCCCC"> back to another function</font>

490
00:17:25,490 --> 00:17:30,560
<font color="#CCCCCC">that swaps in the original page that's</font>

491
00:17:27,410 --> 00:17:33,140
like I<font color="#E5E5E5"> never happened now this raises</font>

492
00:17:30,560 --> 00:17:35,000
<font color="#E5E5E5">some questions</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> off what is that</font>

493
00:17:33,140 --> 00:17:37,070
function doing and where is it<font color="#CCCCCC"> getting</font>

494
00:17:35,000 --> 00:17:38,870
the rest of the<font color="#CCCCCC"> firmware from and also</font>

495
00:17:37,070 --> 00:17:41,419
<font color="#CCCCCC">wherever</font><font color="#E5E5E5"> the base page of store just</font>

496
00:17:38,870 --> 00:17:44,080
what exactly<font color="#CCCCCC"> is initially loading it at</font>

497
00:17:41,420 --> 00:17:46,190
address<font color="#E5E5E5"> 0</font>

498
00:17:44,080 --> 00:17:47,899
well as it turns<font color="#E5E5E5"> out this reveals some</font>

499
00:17:46,190 --> 00:17:49,789
things<font color="#E5E5E5"> about the boot</font><font color="#CCCCCC"> process on</font><font color="#E5E5E5"> this</font>

500
00:17:47,900 --> 00:17:52,669
device<font color="#CCCCCC"> so take a look</font><font color="#E5E5E5"> at your typical</font>

501
00:17:49,789 --> 00:17:54,650
boot on this thing from the moment<font color="#E5E5E5"> power</font>

502
00:17:52,669 --> 00:17:56,600
<font color="#E5E5E5">supplied</font><font color="#CCCCCC"> to the device via the USB</font><font color="#E5E5E5"> port</font>

503
00:17:54,650 --> 00:17:58,400
<font color="#E5E5E5">all I need is power from the USB port it</font>

504
00:17:56,600 --> 00:18:00,260
needs to boot<font color="#E5E5E5"> off something something</font>

505
00:17:58,400 --> 00:18:01,789
that's<font color="#E5E5E5"> fixed in memory so that means it</font>

506
00:18:00,260 --> 00:18:03,860
<font color="#E5E5E5">must have some sort of read-only memory</font>

507
00:18:01,789 --> 00:18:05,539
some sort of boot<font color="#CCCCCC"> ROM in the chip</font><font color="#E5E5E5"> with</font>

508
00:18:03,860 --> 00:18:07,280
built into the<font color="#CCCCCC"> chip that square chip a</font>

509
00:18:05,539 --> 00:18:08,510
fixed block of<font color="#CCCCCC"> memory that</font><font color="#E5E5E5"> can't be</font>

510
00:18:07,280 --> 00:18:10,399
upgraded can't be<font color="#CCCCCC"> changed or anything</font>

511
00:18:08,510 --> 00:18:12,140
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> coach thought on</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> boot</font><font color="#CCCCCC"> ROM</font>

512
00:18:10,400 --> 00:18:15,020
then becomes the very first thing to

513
00:18:12,140 --> 00:18:16,610
execute at address<font color="#E5E5E5"> zero so that</font><font color="#CCCCCC"> code is</font>

514
00:18:15,020 --> 00:18:18,230
responsible for<font color="#E5E5E5"> communicating</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

515
00:18:16,610 --> 00:18:20,299
NAND<font color="#E5E5E5"> flash chip and seeing if there's</font>

516
00:18:18,230 --> 00:18:21,710
firmware stored on it<font color="#E5E5E5"> for booting so the</font>

517
00:18:20,299 --> 00:18:25,010
firmware<font color="#E5E5E5"> store actually stored on the</font>

518
00:18:21,710 --> 00:18:26,270
NAND chip with your data how it

519
00:18:25,010 --> 00:18:27,799
<font color="#CCCCCC">determines whether</font><font color="#E5E5E5"> their sperm were</font>

520
00:18:26,270 --> 00:18:29,360
there or<font color="#E5E5E5"> not I don't know we don't</font><font color="#CCCCCC"> have</font>

521
00:18:27,799 --> 00:18:31,158
<font color="#CCCCCC">the</font><font color="#E5E5E5"> code stored in the</font><font color="#CCCCCC"> boot ROM we just</font>

522
00:18:29,360 --> 00:18:33,320
<font color="#CCCCCC">you can't see</font><font color="#E5E5E5"> it we just</font><font color="#CCCCCC"> know that</font><font color="#E5E5E5"> must</font>

523
00:18:31,159 --> 00:18:35,690
be that<font color="#CCCCCC"> must be</font><font color="#E5E5E5"> what it's doing</font><font color="#CCCCCC"> so we're</font>

524
00:18:33,320 --> 00:18:37,070
<font color="#CCCCCC">just gonna go with that assumption now</font>

525
00:18:35,690 --> 00:18:38,990
if there is<font color="#E5E5E5"> firmware present it loads</font>

526
00:18:37,070 --> 00:18:41,240
<font color="#E5E5E5">the first 32 kilobytes of it to ram at</font>

527
00:18:38,990 --> 00:18:43,130
address<font color="#CCCCCC"> 0 and then tell</font><font color="#E5E5E5"> us the chip to</font>

528
00:18:41,240 --> 00:18:44,630
start booting from<font color="#E5E5E5"> ram instead of rom so</font>

529
00:18:43,130 --> 00:18:46,280
normally the firmware runs from<font color="#CCCCCC"> ram it</font>

530
00:18:44,630 --> 00:18:48,200
just gets<font color="#E5E5E5"> loaded from the NAND flash</font>

531
00:18:46,280 --> 00:18:50,110
memory<font color="#CCCCCC"> there's a fun to the</font><font color="#E5E5E5"> NAND flash</font>

532
00:18:48,200 --> 00:18:52,549
chip<font color="#E5E5E5"> into</font><font color="#CCCCCC"> ram and then runs from there</font>

533
00:18:50,110 --> 00:18:54,199
<font color="#E5E5E5">if there's not firmware present then it</font>

534
00:18:52,549 --> 00:18:56,990
just sits<font color="#CCCCCC"> there and waits for code to be</font>

535
00:18:54,200 --> 00:18:58,610
sent to it<font color="#E5E5E5"> over USB which means it has</font>

536
00:18:56,990 --> 00:19:00,320
at least a tiny amount of<font color="#E5E5E5"> code to</font>

537
00:18:58,610 --> 00:19:02,240
<font color="#CCCCCC">communicate with the USB Hardware and</font>

538
00:19:00,320 --> 00:19:04,490
<font color="#E5E5E5">expose itself as a simple mass storage</font>

539
00:19:02,240 --> 00:19:05,900
device<font color="#E5E5E5"> without any media inserted so</font>

540
00:19:04,490 --> 00:19:10,070
that the host can see it in<font color="#E5E5E5"> order to</font>

541
00:19:05,900 --> 00:19:11,780
send new firmware<font color="#CCCCCC"> to</font><font color="#E5E5E5"> it so in a lot</font><font color="#CCCCCC"> of</font>

542
00:19:10,070 --> 00:19:13,639
these revelations<font color="#E5E5E5"> we can visit</font><font color="#CCCCCC"> the USB</font>

543
00:19:11,780 --> 00:19:15,139
traffic log from<font color="#CCCCCC"> the firmware</font><font color="#E5E5E5"> upgrade</font>

544
00:19:13,640 --> 00:19:18,409
and we<font color="#E5E5E5"> can make a little more sense of</font>

545
00:19:15,140 --> 00:19:20,659
<font color="#E5E5E5">the unknown commands the</font><font color="#CCCCCC"> first command</font>

546
00:19:18,409 --> 00:19:22,220
at the<font color="#E5E5E5"> host</font><font color="#CCCCCC"> sins is bf</font><font color="#E5E5E5"> which causes the</font>

547
00:19:20,659 --> 00:19:24,650
device to the<font color="#CCCCCC"> drive to disconnect</font><font color="#E5E5E5"> and</font>

548
00:19:22,220 --> 00:19:26,900
<font color="#E5E5E5">then reappear as a basic drive with no</font>

549
00:19:24,650 --> 00:19:28,429
<font color="#E5E5E5">media present so that</font><font color="#CCCCCC"> is the boot ROM</font>

550
00:19:26,900 --> 00:19:30,650
which waits to receive more code<font color="#CCCCCC"> to</font>

551
00:19:28,429 --> 00:19:32,210
execute from<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> so we send that small</font>

552
00:19:30,650 --> 00:19:34,190
<font color="#E5E5E5">32 kilobyte image I mentioned earlier to</font>

553
00:19:32,210 --> 00:19:36,140
<font color="#CCCCCC">RAM and then send a</font><font color="#E5E5E5"> b3 command and</font><font color="#CCCCCC"> that</font>

554
00:19:34,190 --> 00:19:39,380
b3<font color="#E5E5E5"> command tells it to execute</font><font color="#CCCCCC"> whatever</font>

555
00:19:36,140 --> 00:19:40,730
we placed and ran so by that point at

556
00:19:39,380 --> 00:19:43,760
this<font color="#E5E5E5"> point</font><font color="#CCCCCC"> we're now it's not running</font>

557
00:19:40,730 --> 00:19:45,950
<font color="#E5E5E5">that small 32 kilobyte image</font><font color="#CCCCCC"> so then we</font>

558
00:19:43,760 --> 00:19:48,770
send a large firmware image<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> b3</font>

559
00:19:45,950 --> 00:19:49,429
again which causes it<font color="#CCCCCC"> to execute so it</font>

560
00:19:48,770 --> 00:19:51,379
was apparently

561
00:19:49,429 --> 00:19:53,030
<font color="#E5E5E5">necessary to be running</font><font color="#CCCCCC"> the small 32</font>

562
00:19:51,380 --> 00:19:55,159
kilobyte image before<font color="#E5E5E5"> we sent the</font>

563
00:19:53,030 --> 00:19:56,300
firmware it's reasonable<font color="#CCCCCC"> to assume that</font>

564
00:19:55,159 --> 00:19:57,770
<font color="#CCCCCC">this code</font><font color="#E5E5E5"> is</font>

565
00:19:56,300 --> 00:19:59,240
spots were actually flashing or burning

566
00:19:57,770 --> 00:20:01,190
<font color="#E5E5E5">the firmware image that it's been</font>

567
00:19:59,240 --> 00:20:03,680
receiving<font color="#CCCCCC"> tuned and to the NAND chip and</font>

568
00:20:01,190 --> 00:20:05,450
they<font color="#CCCCCC"> russian us feed</font><font color="#E5E5E5"> every</font><font color="#CCCCCC"> site refers</font>

569
00:20:03,680 --> 00:20:07,750
to this as<font color="#E5E5E5"> the burner image probably</font>

570
00:20:05,450 --> 00:20:13,430
because it burns the firmware into the

571
00:20:07,750 --> 00:20:14,630
into the<font color="#E5E5E5"> man so it's great that we</font>

572
00:20:13,430 --> 00:20:16,160
learned all this about the firmware<font color="#E5E5E5"> on</font>

573
00:20:14,630 --> 00:20:18,410
<font color="#CCCCCC">the drive but what about actually</font>

574
00:20:16,160 --> 00:20:20,630
modifying it<font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to</font>

575
00:20:18,410 --> 00:20:22,280
write our<font color="#CCCCCC"> own tools so</font><font color="#E5E5E5"> I did that</font>

576
00:20:20,630 --> 00:20:23,870
<font color="#E5E5E5">originally in c-sharp</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> wasn't</font>

577
00:20:22,280 --> 00:20:25,280
<font color="#CCCCCC">exactly happy with that</font><font color="#E5E5E5"> especially</font><font color="#CCCCCC"> since</font>

578
00:20:23,870 --> 00:20:28,219
<font color="#CCCCCC">this windows only because it's a c-sharp</font>

579
00:20:25,280 --> 00:20:31,100
<font color="#CCCCCC">so I decided</font><font color="#E5E5E5"> to rewrite it in Python</font><font color="#CCCCCC"> and</font>

580
00:20:28,220 --> 00:20:33,740
I'm glad I did<font color="#E5E5E5"> it's much better now</font>

581
00:20:31,100 --> 00:20:36,139
now a word about cross-platform

582
00:20:33,740 --> 00:20:38,210
compatibility<font color="#E5E5E5"> since the firmware okayed</font>

583
00:20:36,140 --> 00:20:39,710
process<font color="#E5E5E5"> and in fact any non-standard</font>

584
00:20:38,210 --> 00:20:41,660
communication happens over<font color="#CCCCCC"> scuzzy</font>

585
00:20:39,710 --> 00:20:43,220
vendors vendor<font color="#CCCCCC"> specific commands I</font>

586
00:20:41,660 --> 00:20:45,770
needed a cross-platform method of

587
00:20:43,220 --> 00:20:49,010
<font color="#E5E5E5">sending</font><font color="#CCCCCC"> skuzzy</font><font color="#E5E5E5"> commands to attached USB</font>

588
00:20:45,770 --> 00:20:51,139
<font color="#E5E5E5">devices now in Windows that's like all</font>

589
00:20:49,010 --> 00:20:53,480
the<font color="#CCCCCC"> Chinese tools and on that side</font><font color="#E5E5E5"> ER</font>

590
00:20:51,140 --> 00:20:55,340
that's<font color="#E5E5E5"> how they do it on</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> that's</font>

591
00:20:53,480 --> 00:20:56,630
very easy it supports a scuzzy what's

592
00:20:55,340 --> 00:20:58,639
called a scuzzy passed through interface

593
00:20:56,630 --> 00:21:00,590
that allows you<font color="#E5E5E5"> to send any command even</font>

594
00:20:58,640 --> 00:21:03,080
<font color="#E5E5E5">standard ones to any</font><font color="#CCCCCC"> storage</font><font color="#E5E5E5"> device you</font>

595
00:21:00,590 --> 00:21:05,540
specify and on<font color="#CCCCCC"> linux that's also</font><font color="#E5E5E5"> easy</font>

596
00:21:03,080 --> 00:21:07,340
there's a<font color="#E5E5E5"> io</font><font color="#CCCCCC"> coddle ioctl ever you</font>

597
00:21:05,540 --> 00:21:08,899
prefer<font color="#E5E5E5"> to say it that allows you the</font>

598
00:21:07,340 --> 00:21:12,770
same commands<font color="#E5E5E5"> through</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> cuz of</font>

599
00:21:08,900 --> 00:21:15,440
generic interface<font color="#E5E5E5"> but on OSX you just</font>

600
00:21:12,770 --> 00:21:16,670
can't not not<font color="#E5E5E5"> easily anyway and there is</font>

601
00:21:15,440 --> 00:21:18,200
one wacky way you're doing<font color="#CCCCCC"> it but I</font>

602
00:21:16,670 --> 00:21:20,630
didn't<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> even try bothering with</font>

603
00:21:18,200 --> 00:21:22,910
<font color="#E5E5E5">it so instead</font><font color="#CCCCCC"> I implemented</font><font color="#E5E5E5"> another way</font>

604
00:21:20,630 --> 00:21:25,790
of communicating<font color="#CCCCCC"> with it</font><font color="#E5E5E5"> with the USB</font>

605
00:21:22,910 --> 00:21:28,160
<font color="#E5E5E5">device</font><font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> through</font><font color="#CCCCCC"> lib</font><font color="#E5E5E5"> USB the</font>

606
00:21:25,790 --> 00:21:29,420
Python script<font color="#CCCCCC"> also supports sending Mass</font>

607
00:21:28,160 --> 00:21:31,130
<font color="#CCCCCC">Storage scuzzy commands through the live</font>

608
00:21:29,420 --> 00:21:34,010
ESP which will work on anything Windows

609
00:21:31,130 --> 00:21:35,540
Linux<font color="#E5E5E5"> and OS X but that requires</font>

610
00:21:34,010 --> 00:21:37,070
installing<font color="#CCCCCC"> a live</font><font color="#E5E5E5"> USB driver so you can</font>

611
00:21:35,540 --> 00:21:39,680
<font color="#CCCCCC">communicate with it</font><font color="#E5E5E5"> with with live USB</font>

612
00:21:37,070 --> 00:21:41,480
on Windows and<font color="#CCCCCC"> Linux that's cumbersome</font>

613
00:21:39,680 --> 00:21:43,850
<font color="#E5E5E5">so it just uses the OS is built in</font>

614
00:21:41,480 --> 00:21:46,310
scuzzy interface<font color="#E5E5E5"> but on OSX</font>

615
00:21:43,850 --> 00:21:47,480
<font color="#CCCCCC">Lybia fees you're only</font><font color="#E5E5E5"> option</font><font color="#CCCCCC"> so if you</font>

616
00:21:46,310 --> 00:21:48,740
use a<font color="#E5E5E5"> high section you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to use this</font>

617
00:21:47,480 --> 00:21:50,690
good luck

618
00:21:48,740 --> 00:21:51,980
you'll have to unload the kernel to the

619
00:21:50,690 --> 00:21:53,810
<font color="#E5E5E5">mass storage kernel driver then install</font>

620
00:21:51,980 --> 00:21:55,880
your<font color="#CCCCCC"> own driver</font><font color="#E5E5E5"> and then use that</font><font color="#CCCCCC"> live</font>

621
00:21:53,810 --> 00:21:56,780
USB method which<font color="#E5E5E5"> theoretically works but</font>

622
00:21:55,880 --> 00:21:59,780
I don't know

623
00:21:56,780 --> 00:22:01,910
so anyway using<font color="#CCCCCC"> these</font><font color="#E5E5E5"> tools I sent the</font>

624
00:21:59,780 --> 00:22:03,860
<font color="#CCCCCC">original firmware</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> drive and it's</font>

625
00:22:01,910 --> 00:22:06,590
the works<font color="#CCCCCC"> so success</font>

626
00:22:03,860 --> 00:22:08,810
<font color="#CCCCCC">yay but the the real</font><font color="#E5E5E5"> question is can</font><font color="#CCCCCC"> we</font>

627
00:22:06,590 --> 00:22:10,070
modify<font color="#E5E5E5"> it and send it well we know we</font>

628
00:22:08,810 --> 00:22:14,030
should<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to but</font>

629
00:22:10,070 --> 00:22:15,290
<font color="#E5E5E5">what should we try to modify well let's</font>

630
00:22:14,030 --> 00:22:17,270
take a look at what we<font color="#E5E5E5"> could easily</font>

631
00:22:15,290 --> 00:22:19,190
<font color="#E5E5E5">change and see the effects of it</font><font color="#CCCCCC"> are</font>

632
00:22:17,270 --> 00:22:21,530
there<font color="#E5E5E5"> any hard-coded strings if we could</font>

633
00:22:19,190 --> 00:22:24,050
<font color="#E5E5E5">change in the firmware no there's not</font>

634
00:22:21,530 --> 00:22:25,910
<font color="#E5E5E5">not that</font><font color="#CCCCCC"> I can</font><font color="#E5E5E5"> see what about crippling</font>

635
00:22:24,050 --> 00:22:29,180
functionality in some kind of semi safe

636
00:22:25,910 --> 00:22:30,770
way well digging into the code<font color="#E5E5E5"> that</font>

637
00:22:29,180 --> 00:22:32,840
handles incoming USB<font color="#E5E5E5"> data we can find</font>

638
00:22:30,770 --> 00:22:34,639
the equivalent<font color="#CCCCCC"> of a case statement which</font>

639
00:22:32,840 --> 00:22:36,110
an assembly looks like this it's a<font color="#E5E5E5"> table</font>

640
00:22:34,640 --> 00:22:38,360
of<font color="#CCCCCC"> addresses and values</font><font color="#E5E5E5"> like in the</font>

641
00:22:36,110 --> 00:22:40,370
bottom<font color="#CCCCCC"> of the screenshot where it deals</font>

642
00:22:38,360 --> 00:22:42,709
<font color="#E5E5E5">with certain commands so for example to</font>

643
00:22:40,370 --> 00:22:44,780
send to her to handle scuzzy command<font color="#E5E5E5"> 0 3</font>

644
00:22:42,710 --> 00:22:45,890
which is requesting<font color="#E5E5E5"> sense data that you</font>

645
00:22:44,780 --> 00:22:48,320
<font color="#E5E5E5">can see in</font><font color="#CCCCCC"> that table</font><font color="#E5E5E5"> there's an address</font>

646
00:22:45,890 --> 00:22:52,220
<font color="#E5E5E5">that's 0 that</font><font color="#CCCCCC"> été it would</font><font color="#E5E5E5"> jump there</font>

647
00:22:48,320 --> 00:22:53,450
<font color="#E5E5E5">and handle it interestingly despite the</font>

648
00:22:52,220 --> 00:22:56,570
read<font color="#CCCCCC"> and</font><font color="#E5E5E5"> write sector commands which I</font>

649
00:22:53,450 --> 00:22:58,580
mentioned<font color="#CCCCCC"> before is 28 and 2a they</font><font color="#E5E5E5"> are</font>

650
00:22:56,570 --> 00:23:00,889
in that they<font color="#E5E5E5"> are in that table that case</font>

651
00:22:58,580 --> 00:23:02,600
statement<font color="#CCCCCC"> but</font><font color="#E5E5E5"> they're also explicitly</font>

652
00:23:00,890 --> 00:23:03,800
checked for<font color="#CCCCCC"> checked for before we</font><font color="#E5E5E5"> get</font>

653
00:23:02,600 --> 00:23:05,810
there so if you look up a<font color="#CCCCCC"> little bit</font>

654
00:23:03,800 --> 00:23:08,210
above that<font color="#E5E5E5"> table you can</font><font color="#CCCCCC"> see it's doing</font>

655
00:23:05,810 --> 00:23:11,389
an XOR<font color="#E5E5E5"> with 28 and</font><font color="#CCCCCC"> 2a it's checking</font>

656
00:23:08,210 --> 00:23:12,500
those commands explicitly now I don't

657
00:23:11,390 --> 00:23:13,940
<font color="#CCCCCC">know why it's doing that it's probably</font>

658
00:23:12,500 --> 00:23:17,090
<font color="#CCCCCC">to speed up execution when you're</font>

659
00:23:13,940 --> 00:23:20,420
reading<font color="#E5E5E5"> or writing sectors but if we</font>

660
00:23:17,090 --> 00:23:22,610
were to patch the<font color="#E5E5E5"> to a value in that in</font>

661
00:23:20,420 --> 00:23:24,440
<font color="#CCCCCC">that code</font><font color="#E5E5E5"> that it's X or AZ well as the</font>

662
00:23:22,610 --> 00:23:28,340
<font color="#CCCCCC">to</font><font color="#E5E5E5"> a in the table</font><font color="#CCCCCC"> to something</font>

663
00:23:24,440 --> 00:23:30,530
nonsensical like f1<font color="#E5E5E5"> then the drive will</font>

664
00:23:28,340 --> 00:23:33,669
no longer have<font color="#E5E5E5"> the ability to respond</font><font color="#CCCCCC"> to</font>

665
00:23:30,530 --> 00:23:37,520
right sector requests so I did that<font color="#E5E5E5"> and</font>

666
00:23:33,670 --> 00:23:40,430
as you might expect it does work<font color="#E5E5E5"> so now</font>

667
00:23:37,520 --> 00:23:42,350
that<font color="#E5E5E5"> drive can't write to</font><font color="#CCCCCC"> its Manship so</font>

668
00:23:40,430 --> 00:23:44,030
it's<font color="#CCCCCC"> reno it's a read-only drive now so</font>

669
00:23:42,350 --> 00:23:45,199
we know we're able to<font color="#E5E5E5"> modify the form</font>

670
00:23:44,030 --> 00:23:47,389
<font color="#E5E5E5">we're successfully since we know we can</font>

671
00:23:45,200 --> 00:23:49,400
do<font color="#E5E5E5"> that well what happens we do</font>

672
00:23:47,390 --> 00:23:51,320
something dangerous<font color="#CCCCCC"> and screw up the</font>

673
00:23:49,400 --> 00:23:53,180
firmware so badly that<font color="#E5E5E5"> it can't even get</font>

674
00:23:51,320 --> 00:23:54,800
to<font color="#E5E5E5"> the bikini even boot or get to the</font>

675
00:23:53,180 --> 00:23:57,470
point where I will accept new firmware

676
00:23:54,800 --> 00:23:59,360
<font color="#E5E5E5">which I can tell</font><font color="#CCCCCC"> you I did</font><font color="#E5E5E5"> many many</font>

677
00:23:57,470 --> 00:24:03,350
many<font color="#CCCCCC"> times what are you do in that</font>

678
00:23:59,360 --> 00:24:04,520
situation<font color="#E5E5E5"> well if you recall during the</font>

679
00:24:03,350 --> 00:24:06,020
boot process<font color="#CCCCCC"> when we</font><font color="#E5E5E5"> first plug the</font>

680
00:24:04,520 --> 00:24:08,120
drive in and supply power<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> through</font>

681
00:24:06,020 --> 00:24:09,710
USB<font color="#E5E5E5"> it executes</font><font color="#CCCCCC"> the code on</font><font color="#E5E5E5"> the boot</font><font color="#CCCCCC"> rom</font>

682
00:24:08,120 --> 00:24:11,239
and then if it can<font color="#CCCCCC"> detect a valid</font>

683
00:24:09,710 --> 00:24:14,690
firmware on the<font color="#E5E5E5"> nan</font><font color="#CCCCCC"> ship it copies it to</font>

684
00:24:11,240 --> 00:24:17,090
<font color="#CCCCCC">ram and transfers control</font><font color="#E5E5E5"> to it so if we</font>

685
00:24:14,690 --> 00:24:19,370
disrupt<font color="#E5E5E5"> that process it'll enter what</font>

686
00:24:17,090 --> 00:24:21,260
that<font color="#E5E5E5"> Russian site refers to as test mode</font>

687
00:24:19,370 --> 00:24:23,779
which<font color="#E5E5E5"> is what</font><font color="#CCCCCC"> we've been</font><font color="#E5E5E5"> calling the</font>

688
00:24:21,260 --> 00:24:25,820
<font color="#E5E5E5">boot</font><font color="#CCCCCC"> rom where we'll be able</font><font color="#E5E5E5"> to transfer</font>

689
00:24:23,779 --> 00:24:29,299
more to it<font color="#CCCCCC"> so how do we disrupt that</font>

690
00:24:25,820 --> 00:24:34,549
process you disrupt the ability<font color="#CCCCCC"> to</font>

691
00:24:29,299 --> 00:24:35,779
communicate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> nanochip so if we</font>

692
00:24:34,549 --> 00:24:38,359
take a<font color="#E5E5E5"> look at the</font><font color="#CCCCCC"> datasheet and</font><font color="#E5E5E5"> pin out</font>

693
00:24:35,779 --> 00:24:40,039
<font color="#E5E5E5">online right also on the Russian site</font>

694
00:24:38,359 --> 00:24:42,080
<font color="#E5E5E5">can't tell you</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> how useful</font><font color="#CCCCCC"> that side</font>

695
00:24:40,039 --> 00:24:43,669
<font color="#CCCCCC">is</font><font color="#E5E5E5"> we could find a</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of pins next</font>

696
00:24:42,080 --> 00:24:46,218
to each other<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are tied to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> nand</font>

697
00:24:43,669 --> 00:24:47,960
<font color="#E5E5E5">data pins so if we short that's how the</font>

698
00:24:46,219 --> 00:24:49,909
<font color="#CCCCCC">chip communicate that's</font><font color="#E5E5E5"> how the name</font><font color="#CCCCCC"> g8</font>

699
00:24:47,960 --> 00:24:52,009
communicates with that bison chip to

700
00:24:49,909 --> 00:24:53,899
read or write data<font color="#E5E5E5"> on it so if we short</font>

701
00:24:52,009 --> 00:24:55,009
those pins<font color="#CCCCCC"> together there's no way you</font>

702
00:24:53,899 --> 00:24:57,738
can commute the controller can

703
00:24:55,009 --> 00:24:59,149
communicate with<font color="#E5E5E5"> that memory chip so no</font>

704
00:24:57,739 --> 00:25:01,339
communication means<font color="#CCCCCC"> no</font><font color="#E5E5E5"> firmware which</font>

705
00:24:59,149 --> 00:25:03,349
means we're in test mode<font color="#CCCCCC"> and from here</font>

706
00:25:01,339 --> 00:25:06,529
we<font color="#E5E5E5"> can just use our tools to flash it as</font>

707
00:25:03,349 --> 00:25:08,629
<font color="#E5E5E5">normal</font><font color="#CCCCCC"> now it's difficult to hold</font>

708
00:25:06,529 --> 00:25:10,729
something really<font color="#E5E5E5"> tiny and metal on to</font>

709
00:25:08,629 --> 00:25:12,738
very specific tiny pins while trying<font color="#E5E5E5"> the</font>

710
00:25:10,729 --> 00:25:16,249
plug to drive into<font color="#E5E5E5"> the USB port</font><font color="#CCCCCC"> all at</font>

711
00:25:12,739 --> 00:25:18,019
<font color="#E5E5E5">the same time so I</font><font color="#CCCCCC"> came up with a quick</font>

712
00:25:16,249 --> 00:25:19,759
reset cable which<font color="#CCCCCC"> is just a switch this</font>

713
00:25:18,019 --> 00:25:22,789
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> USB extension cable with a switch</font>

714
00:25:19,759 --> 00:25:24,320
on<font color="#E5E5E5"> the 5 volt line that way I can short</font>

715
00:25:22,789 --> 00:25:25,669
the<font color="#CCCCCC"> pants with one hand and just flick</font>

716
00:25:24,320 --> 00:25:26,539
<font color="#CCCCCC">the switch with the</font><font color="#E5E5E5"> other one</font><font color="#CCCCCC"> no so I</font>

717
00:25:25,669 --> 00:25:27,979
don't<font color="#E5E5E5"> have to plug it in so I already</font>

718
00:25:26,539 --> 00:25:31,099
point down and<font color="#CCCCCC"> that's the</font><font color="#E5E5E5"> same as</font>

719
00:25:27,979 --> 00:25:31,669
<font color="#E5E5E5">inserting</font><font color="#CCCCCC"> it into the</font><font color="#E5E5E5"> USB port</font><font color="#CCCCCC"> so I had</font>

720
00:25:31,099 --> 00:25:33,619
to do that

721
00:25:31,669 --> 00:25:39,259
<font color="#CCCCCC">host so</font><font color="#E5E5E5"> many times so I got really</font>

722
00:25:33,619 --> 00:25:40,939
<font color="#E5E5E5">frustrated so I made that thing so now</font>

723
00:25:39,259 --> 00:25:42,080
that we<font color="#E5E5E5"> have a super basic understanding</font>

724
00:25:40,940 --> 00:25:43,639
of<font color="#E5E5E5"> how the firmware works and how to go</font>

725
00:25:42,080 --> 00:25:46,039
about<font color="#CCCCCC"> making patches to it now</font><font color="#E5E5E5"> we can</font>

726
00:25:43,639 --> 00:25:48,468
finally<font color="#E5E5E5"> get</font><font color="#CCCCCC"> to decide what</font><font color="#E5E5E5"> we want to do</font>

727
00:25:46,039 --> 00:25:49,908
so if you've<font color="#E5E5E5"> seen all the bad USB talk</font>

728
00:25:48,469 --> 00:25:52,099
<font color="#E5E5E5">from a while back you may have seen</font><font color="#CCCCCC"> some</font>

729
00:25:49,909 --> 00:25:54,259
of<font color="#E5E5E5"> these patches before we can create</font>

730
00:25:52,099 --> 00:25:56,299
<font color="#E5E5E5">hidden partitions by changing the scuzzy</font>

731
00:25:54,259 --> 00:25:57,619
response code to only<font color="#E5E5E5"> return half the</font>

732
00:25:56,299 --> 00:25:58,519
<font color="#CCCCCC">capacity of the</font><font color="#E5E5E5"> drive whatever</font><font color="#CCCCCC"> would</font>

733
00:25:57,619 --> 00:25:59,658
<font color="#E5E5E5">normally were talking we'll just cut it</font>

734
00:25:58,519 --> 00:26:01,519
in half we<font color="#CCCCCC"> just patched the</font><font color="#E5E5E5"> firmware to</font>

735
00:25:59,659 --> 00:26:03,229
cut in half<font color="#CCCCCC"> and return that</font><font color="#E5E5E5"> instead and</font>

736
00:26:01,519 --> 00:26:06,289
either leave the read sector command

737
00:26:03,229 --> 00:26:07,759
alone or change it to double<font color="#E5E5E5"> the sector</font>

738
00:26:06,289 --> 00:26:11,479
<font color="#E5E5E5">that it's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be writing</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> LBA</font>

739
00:26:07,759 --> 00:26:13,309
or logical block address<font color="#CCCCCC"> so while the</font>

740
00:26:11,479 --> 00:26:14,899
user and the OS thinks that they're

741
00:26:13,309 --> 00:26:16,190
modifying the entire<font color="#E5E5E5"> drive</font><font color="#CCCCCC"> and see the</font>

742
00:26:14,899 --> 00:26:17,570
entire<font color="#CCCCCC"> drive they really only see</font><font color="#E5E5E5"> half</font>

743
00:26:16,190 --> 00:26:19,009
of it they're only<font color="#E5E5E5"> manipulating half of</font>

744
00:26:17,570 --> 00:26:21,889
it<font color="#E5E5E5"> so there's an entire half of the hand</font>

745
00:26:19,009 --> 00:26:24,109
shift I can't even see so we<font color="#E5E5E5"> can change</font>

746
00:26:21,889 --> 00:26:25,609
the way that<font color="#E5E5E5"> command works and it won't</font>

747
00:26:24,109 --> 00:26:29,570
be obvious<font color="#CCCCCC"> to any software that exists</font>

748
00:26:25,609 --> 00:26:30,978
today or since the firmware<font color="#E5E5E5"> actually the</font>

749
00:26:29,570 --> 00:26:32,450
firmware action the firmware<font color="#E5E5E5"> is really</font>

750
00:26:30,979 --> 00:26:34,279
complicated it has some<font color="#E5E5E5"> it has built-in</font>

751
00:26:32,450 --> 00:26:35,960
password protection functionality it

752
00:26:34,279 --> 00:26:37,380
even has some<font color="#E5E5E5"> basic encryption stuff in</font>

753
00:26:35,960 --> 00:26:39,150
there all kinds<font color="#E5E5E5"> of stuff</font>

754
00:26:37,380 --> 00:26:40,800
so we could cripple it to always<font color="#CCCCCC"> use the</font>

755
00:26:39,150 --> 00:26:45,620
<font color="#CCCCCC">same password so if the user tries to</font>

756
00:26:40,800 --> 00:26:48,090
set<font color="#CCCCCC"> ABC we really store DF</font><font color="#E5E5E5"> so you know</font>

757
00:26:45,620 --> 00:26:51,780
their password becomes useless<font color="#CCCCCC"> at that</font>

758
00:26:48,090 --> 00:26:53,760
point or we could send<font color="#CCCCCC"> raw nanochip</font>

759
00:26:51,780 --> 00:26:56,460
commands ourselves such as getting the

760
00:26:53,760 --> 00:27:00,450
chip ID or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> nanochip ID reading pages</font>

761
00:26:56,460 --> 00:27:03,780
or ECC data or writing<font color="#E5E5E5"> to it or erasing</font>

762
00:27:00,450 --> 00:27:07,200
<font color="#E5E5E5">it so maybe we can do some damage with</font>

763
00:27:03,780 --> 00:27:10,530
<font color="#E5E5E5">this so now we finally get</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

764
00:27:07,200 --> 00:27:12,150
<font color="#CCCCCC">self-destructing</font><font color="#E5E5E5"> drive patch</font><font color="#CCCCCC"> firmware</font>

765
00:27:10,530 --> 00:27:13,560
patch<font color="#E5E5E5"> so what we can do is patch the</font>

766
00:27:12,150 --> 00:27:16,950
<font color="#E5E5E5">firmware to start off in a</font><font color="#CCCCCC"> so-called</font>

767
00:27:13,560 --> 00:27:18,780
<font color="#E5E5E5">locked</font><font color="#CCCCCC"> state so we would</font><font color="#E5E5E5"> have to unlock</font>

768
00:27:16,950 --> 00:27:20,880
<font color="#CCCCCC">it be a special command</font><font color="#E5E5E5"> that we just</font>

769
00:27:18,780 --> 00:27:23,670
make<font color="#E5E5E5"> up and create before will</font><font color="#CCCCCC"> indicate</font>

770
00:27:20,880 --> 00:27:27,480
<font color="#E5E5E5">that there's any media present or any</font>

771
00:27:23,670 --> 00:27:30,480
read sector<font color="#CCCCCC"> request succeed</font><font color="#E5E5E5"> so we'll</font>

772
00:27:27,480 --> 00:27:31,860
also<font color="#CCCCCC"> we'll add a counter since normally</font>

773
00:27:30,480 --> 00:27:33,060
we'd<font color="#E5E5E5"> have like a timer but since we</font>

774
00:27:31,860 --> 00:27:34,169
don't know<font color="#E5E5E5"> anything about the timer</font>

775
00:27:33,060 --> 00:27:35,970
hardware in this thing we'll just use a

776
00:27:34,170 --> 00:27:37,440
counter kind of go hold school where

777
00:27:35,970 --> 00:27:38,730
they just<font color="#E5E5E5"> use</font><font color="#CCCCCC"> a counter</font><font color="#E5E5E5"> so we'll have</font><font color="#CCCCCC"> a</font>

778
00:27:37,440 --> 00:27:41,220
counter that<font color="#CCCCCC"> keeps incrementing over and</font>

779
00:27:38,730 --> 00:27:43,530
over which can only be reset<font color="#E5E5E5"> well it can</font>

780
00:27:41,220 --> 00:27:45,090
be a command that<font color="#E5E5E5"> we send it so only we</font>

781
00:27:43,530 --> 00:27:46,320
know what command to send to reset it

782
00:27:45,090 --> 00:27:48,389
otherwise it just keeps on<font color="#E5E5E5"> ticking up</font>

783
00:27:46,320 --> 00:27:50,790
<font color="#E5E5E5">and when that counter reaches a certain</font>

784
00:27:48,390 --> 00:27:52,800
<font color="#E5E5E5">point say several seconds worth of</font>

785
00:27:50,790 --> 00:27:55,050
inactivity<font color="#E5E5E5"> the</font><font color="#CCCCCC"> drive will just lock up</font>

786
00:27:52,800 --> 00:27:57,419
and erase the area of the<font color="#CCCCCC"> nanochip that</font>

787
00:27:55,050 --> 00:27:59,280
<font color="#E5E5E5">holds the</font><font color="#CCCCCC"> firmware as well as everything</font>

788
00:27:57,420 --> 00:28:02,090
else<font color="#E5E5E5"> on the nand chip and just wait for</font>

789
00:27:59,280 --> 00:28:05,340
<font color="#CCCCCC">the user to realize how screwed they are</font>

790
00:28:02,090 --> 00:28:06,780
yeah<font color="#E5E5E5"> so the net</font><font color="#CCCCCC"> effect of this is that</font>

791
00:28:05,340 --> 00:28:08,129
<font color="#E5E5E5">if</font><font color="#CCCCCC"> anyone plugs the drive or even</font>

792
00:28:06,780 --> 00:28:10,170
supplies power to<font color="#CCCCCC"> it you know you</font><font color="#E5E5E5"> can</font>

793
00:28:08,130 --> 00:28:12,270
plug it into a cigarette lighter<font color="#E5E5E5"> after</font>

794
00:28:10,170 --> 00:28:13,890
anything<font color="#E5E5E5"> without plugging it into a</font>

795
00:28:12,270 --> 00:28:15,540
computer<font color="#E5E5E5"> that</font><font color="#CCCCCC"> keeps sending that risa a</font>

796
00:28:13,890 --> 00:28:17,070
counter reset<font color="#CCCCCC"> command over and over the</font>

797
00:28:15,540 --> 00:28:19,470
drive will kill<font color="#E5E5E5"> itself within a matter</font>

798
00:28:17,070 --> 00:28:20,820
of seconds<font color="#E5E5E5"> so in fact you know unless</font>

799
00:28:19,470 --> 00:28:22,290
you send<font color="#E5E5E5"> that special command to unlock</font>

800
00:28:20,820 --> 00:28:27,570
it you can't<font color="#CCCCCC"> even access the data on it</font>

801
00:28:22,290 --> 00:28:28,860
<font color="#E5E5E5">anyway</font><font color="#CCCCCC"> so then we meant this idea there</font>

802
00:28:27,570 --> 00:28:30,840
<font color="#CCCCCC">are a whole bunch of</font><font color="#E5E5E5"> things we need</font><font color="#CCCCCC"> to</font>

803
00:28:28,860 --> 00:28:32,610
do we need<font color="#CCCCCC"> to keep</font><font color="#E5E5E5"> track</font><font color="#CCCCCC"> of this locked</font>

804
00:28:30,840 --> 00:28:34,199
<font color="#CCCCCC">versus unlocked state and the</font>

805
00:28:32,610 --> 00:28:36,030
potentially<font color="#E5E5E5"> very</font><font color="#CCCCCC"> large because</font><font color="#E5E5E5"> we don't</font>

806
00:28:34,200 --> 00:28:37,860
know how many<font color="#E5E5E5"> how big it needs to be</font>

807
00:28:36,030 --> 00:28:39,149
<font color="#CCCCCC">this very large counter value so we're</font>

808
00:28:37,860 --> 00:28:41,429
gonna<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to need to steal some bytes</font>

809
00:28:39,150 --> 00:28:42,810
<font color="#E5E5E5">from the RAM on</font><font color="#CCCCCC"> the chip</font><font color="#E5E5E5"> and we're also</font>

810
00:28:41,430 --> 00:28:44,670
<font color="#E5E5E5">gonna need to patch the initialization</font>

811
00:28:42,810 --> 00:28:46,200
<font color="#E5E5E5">code that runs at the very start</font><font color="#CCCCCC"> of the</font>

812
00:28:44,670 --> 00:28:47,880
firmware<font color="#E5E5E5"> and</font><font color="#CCCCCC"> to set the initial</font><font color="#E5E5E5"> values</font>

813
00:28:46,200 --> 00:28:49,380
of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> RAM bytes</font><font color="#CCCCCC"> I've started at 0</font>

814
00:28:47,880 --> 00:28:52,049
started it locked

815
00:28:49,380 --> 00:28:53,429
so we're gonna<font color="#E5E5E5"> need the patch we're also</font>

816
00:28:52,049 --> 00:28:54,900
gonna need<font color="#E5E5E5"> to patch the infinite loop</font>

817
00:28:53,429 --> 00:28:56,789
<font color="#E5E5E5">that it runs in over and</font><font color="#CCCCCC"> over while it</font>

818
00:28:54,900 --> 00:28:58,020
checks to see<font color="#CCCCCC"> FERS</font><font color="#E5E5E5"> in a USB data it</font>

819
00:28:56,789 --> 00:28:58,950
needs<font color="#E5E5E5"> to deal with</font><font color="#CCCCCC"> incoming any scuzzy</font>

820
00:28:58,020 --> 00:29:00,740
commands<font color="#E5E5E5"> it needs to deal with</font><font color="#CCCCCC"> we're</font>

821
00:28:58,950 --> 00:29:03,000
<font color="#E5E5E5">gonna need to patch that infinite loop</font>

822
00:29:00,740 --> 00:29:03,510
<font color="#E5E5E5">to increment the counter if it's</font>

823
00:29:03,000 --> 00:29:04,740
unlocked

824
00:29:03,510 --> 00:29:05,879
<font color="#E5E5E5">so it doesn't do anything it was locked</font>

825
00:29:04,740 --> 00:29:07,470
but as soon<font color="#E5E5E5"> as it becomes unlocked it</font>

826
00:29:05,880 --> 00:29:09,480
starts incrementing<font color="#E5E5E5"> that counter over</font>

827
00:29:07,470 --> 00:29:11,190
and over again and if we hit whatever

828
00:29:09,480 --> 00:29:12,570
threshold equates to a few seconds of

829
00:29:11,190 --> 00:29:14,910
<font color="#E5E5E5">inactivity then we disable all</font>

830
00:29:12,570 --> 00:29:16,649
interrupts<font color="#E5E5E5"> issue the raw erase commands</font>

831
00:29:14,910 --> 00:29:18,750
to the<font color="#CCCCCC"> inch to erase the firmware</font><font color="#E5E5E5"> and</font>

832
00:29:16,650 --> 00:29:20,850
everything<font color="#E5E5E5"> else on it and just lock up</font>

833
00:29:18,750 --> 00:29:29,130
just<font color="#E5E5E5"> spinning an infinite loop over and</font>

834
00:29:20,850 --> 00:29:31,918
<font color="#E5E5E5">over again a counter is probably not the</font>

835
00:29:29,130 --> 00:29:32,940
best<font color="#E5E5E5"> thing to do but you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> like I</font>

836
00:29:31,919 --> 00:29:34,620
said<font color="#E5E5E5"> it's gonna</font><font color="#CCCCCC"> old-school but</font><font color="#E5E5E5"> since</font>

837
00:29:32,940 --> 00:29:36,809
it's a<font color="#E5E5E5"> safe to assume the</font><font color="#CCCCCC"> speeded this</font>

838
00:29:34,620 --> 00:29:38,370
process is<font color="#E5E5E5"> probably constant a counter</font>

839
00:29:36,809 --> 00:29:39,960
to<font color="#E5E5E5"> kept to track the passage of times</font>

840
00:29:38,370 --> 00:29:41,489
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> okay so that's what we'll go</font>

841
00:29:39,960 --> 00:29:43,440
<font color="#CCCCCC">with</font>

842
00:29:41,490 --> 00:29:45,929
we're also<font color="#E5E5E5"> gonna need to patch in scuzzy</font>

843
00:29:43,440 --> 00:29:47,820
<font color="#E5E5E5">vendor commands to set the unlocked flag</font>

844
00:29:45,929 --> 00:29:49,980
and<font color="#E5E5E5"> to reset that counter back to zero</font>

845
00:29:47,820 --> 00:29:51,840
<font color="#E5E5E5">so we're gonna need to patch the request</font>

846
00:29:49,980 --> 00:29:53,130
since command<font color="#CCCCCC"> two that's that's the</font>

847
00:29:51,840 --> 00:29:54,689
command<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the computer uses to figure</font>

848
00:29:53,130 --> 00:29:55,860
out if there's any media<font color="#E5E5E5"> inserted or not</font>

849
00:29:54,690 --> 00:29:57,299
like for a floppy drive<font color="#CCCCCC"> you know no</font>

850
00:29:55,860 --> 00:30:00,629
floppy in the drive<font color="#E5E5E5"> you know it returns</font>

851
00:29:57,299 --> 00:30:02,100
no media present so we'll patch<font color="#E5E5E5"> the</font>

852
00:30:00,630 --> 00:30:03,870
request<font color="#E5E5E5"> since command the handling of it</font>

853
00:30:02,100 --> 00:30:06,299
<font color="#E5E5E5">to return no media present if that</font><font color="#CCCCCC"> flag</font>

854
00:30:03,870 --> 00:30:07,739
says that we're still locked and<font color="#E5E5E5"> we're</font>

855
00:30:06,299 --> 00:30:09,090
also gonna want to patch the read sector

856
00:30:07,740 --> 00:30:10,860
command to do the same thing just<font color="#CCCCCC"> in</font>

857
00:30:09,090 --> 00:30:12,178
case<font color="#E5E5E5"> some wise guy doesn't believe the</font>

858
00:30:10,860 --> 00:30:13,530
<font color="#E5E5E5">since data and tries to read it anyway</font>

859
00:30:12,179 --> 00:30:15,720
<font color="#CCCCCC">by sending the read sector command</font>

860
00:30:13,530 --> 00:30:19,129
<font color="#E5E5E5">regardless of what sensitive</font><font color="#CCCCCC"> the sense</font>

861
00:30:15,720 --> 00:30:22,980
data<font color="#E5E5E5"> says so</font>

862
00:30:19,130 --> 00:30:24,809
<font color="#CCCCCC">stealing bytes from Ram</font><font color="#E5E5E5"> we have no idea</font>

863
00:30:22,980 --> 00:30:26,460
what Ram<font color="#E5E5E5"> areas the firmware is coded to</font>

864
00:30:24,809 --> 00:30:29,399
use but we do know that<font color="#E5E5E5"> it doesn't</font>

865
00:30:26,460 --> 00:30:31,169
<font color="#E5E5E5">modify itself particularly page</font><font color="#CCCCCC"> zero</font>

866
00:30:29,400 --> 00:30:32,429
since that never changes that address

867
00:30:31,169 --> 00:30:35,490
<font color="#E5E5E5">zero it needs to be there and in order</font>

868
00:30:32,429 --> 00:30:37,830
<font color="#CCCCCC">to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> all this page swapping madness so</font>

869
00:30:35,490 --> 00:30:39,990
it's the area<font color="#E5E5E5"> from 4000 onward that the</font>

870
00:30:37,830 --> 00:30:42,059
page swapping<font color="#E5E5E5"> code uses to swap in</font>

871
00:30:39,990 --> 00:30:44,309
different pages<font color="#CCCCCC"> of code so it's probably</font>

872
00:30:42,059 --> 00:30:46,320
<font color="#CCCCCC">okay to steal</font><font color="#E5E5E5"> a little</font><font color="#CCCCCC"> a few bytes from</font>

873
00:30:44,309 --> 00:30:48,840
<font color="#E5E5E5">the end of page zero so right around</font>

874
00:30:46,320 --> 00:30:52,200
<font color="#CCCCCC">three</font><font color="#E5E5E5"> FF</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> right for for 4000</font><font color="#E5E5E5"> is</font>

875
00:30:48,840 --> 00:30:53,610
probably<font color="#E5E5E5"> okay to steal those all right</font>

876
00:30:52,200 --> 00:30:54,960
<font color="#CCCCCC">so</font><font color="#E5E5E5"> the patching calls to those</font>

877
00:30:53,610 --> 00:30:56,100
subroutines we're gonna we're<font color="#E5E5E5"> going to</font>

878
00:30:54,960 --> 00:30:57,659
need<font color="#E5E5E5"> to find a section it's at least</font>

879
00:30:56,100 --> 00:31:00,270
<font color="#CCCCCC">three</font><font color="#E5E5E5"> bytes big since that's how big an</font>

880
00:30:57,659 --> 00:31:02,460
8051 call<font color="#E5E5E5"> instruction is and replace it</font>

881
00:31:00,270 --> 00:31:03,030
<font color="#CCCCCC">with a call</font><font color="#E5E5E5"> to our code way towards the</font>

882
00:31:02,460 --> 00:31:04,740
<font color="#E5E5E5">end</font>

883
00:31:03,030 --> 00:31:06,120
<font color="#CCCCCC">page</font><font color="#E5E5E5"> zero we're gonna patch our code in</font>

884
00:31:04,740 --> 00:31:08,450
there as well or we<font color="#E5E5E5"> could patch it</font>

885
00:31:06,120 --> 00:31:10,830
<font color="#E5E5E5">somewhere</font><font color="#CCCCCC"> else but page</font><font color="#E5E5E5"> zeros easiest</font>

886
00:31:08,450 --> 00:31:12,390
<font color="#E5E5E5">any leftover bites from instructions</font>

887
00:31:10,830 --> 00:31:13,980
that<font color="#E5E5E5"> we partially over wrote with that</font>

888
00:31:12,390 --> 00:31:16,380
call<font color="#CCCCCC"> instruction</font><font color="#E5E5E5"> we can just replace</font>

889
00:31:13,980 --> 00:31:19,050
<font color="#E5E5E5">them with zeros which in 8051 is a knock</font>

890
00:31:16,380 --> 00:31:20,610
or no op or no operation instruction is

891
00:31:19,050 --> 00:31:22,500
that<font color="#CCCCCC"> it just does nothing which you've</font>

892
00:31:20,610 --> 00:31:24,360
patched anything<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's you gotta</font>

893
00:31:22,500 --> 00:31:26,760
have an off instruction or something it

894
00:31:24,360 --> 00:31:28,530
<font color="#E5E5E5">does nothing</font><font color="#CCCCCC"> and then our own code</font><font color="#E5E5E5"> could</font>

895
00:31:26,760 --> 00:31:29,610
do at the end<font color="#E5E5E5"> of the at the end of page</font>

896
00:31:28,530 --> 00:31:31,470
<font color="#CCCCCC">Dara</font><font color="#E5E5E5"> can do whatever the firmware</font>

897
00:31:29,610 --> 00:31:33,709
<font color="#E5E5E5">originally did and that we over wrote in</font>

898
00:31:31,470 --> 00:31:39,840
addition to whatever we<font color="#E5E5E5"> needed it</font><font color="#CCCCCC"> to do</font>

899
00:31:33,710 --> 00:31:40,710
in the<font color="#E5E5E5"> first place so this is great we</font>

900
00:31:39,840 --> 00:31:42,600
finally have ourselves a

901
00:31:40,710 --> 00:31:44,880
<font color="#CCCCCC">self-destructing Drive okay but</font>

902
00:31:42,600 --> 00:31:46,800
<font color="#E5E5E5">theoretically all a person would have to</font>

903
00:31:44,880 --> 00:31:48,330
do is get a hold of the<font color="#E5E5E5"> Python or</font>

904
00:31:46,800 --> 00:31:50,100
whatever computer script that sends that

905
00:31:48,330 --> 00:31:52,830
unlock and counter reset commands and

906
00:31:50,100 --> 00:31:54,360
just run that on their<font color="#E5E5E5"> own computer</font><font color="#CCCCCC"> so</font>

907
00:31:52,830 --> 00:31:57,149
then they're<font color="#E5E5E5"> free to run whatever kind</font>

908
00:31:54,360 --> 00:31:59,760
<font color="#E5E5E5">of forensic analysis they want that's</font>

909
00:31:57,150 --> 00:32:01,590
true but it<font color="#E5E5E5"> is as simple</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> sending a</font>

910
00:31:59,760 --> 00:32:03,270
<font color="#E5E5E5">counter reset</font><font color="#CCCCCC"> command</font><font color="#E5E5E5"> but what if we</font>

911
00:32:01,590 --> 00:32:06,240
made that command more complicated like

912
00:32:03,270 --> 00:32:07,650
sending a password in the command you

913
00:32:06,240 --> 00:32:09,300
could do that but then<font color="#E5E5E5"> it would be that</font>

914
00:32:07,650 --> 00:32:11,010
packet<font color="#CCCCCC"> would be vulnerable</font><font color="#E5E5E5"> to USB</font>

915
00:32:09,300 --> 00:32:14,399
traffic sniffing which you can<font color="#E5E5E5"> even do</font>

916
00:32:11,010 --> 00:32:15,360
<font color="#E5E5E5">remotely in software so that's probably</font>

917
00:32:14,400 --> 00:32:18,810
not<font color="#E5E5E5"> the best thing to do</font>

918
00:32:15,360 --> 00:32:21,540
so now<font color="#E5E5E5"> what we could scramble the</font>

919
00:32:18,810 --> 00:32:22,649
traffic between<font color="#E5E5E5"> the host and the PC so</font>

920
00:32:21,540 --> 00:32:26,090
that<font color="#CCCCCC"> if you're looking at it in an</font>

921
00:32:22,650 --> 00:32:26,090
analyzer you don't know what's<font color="#E5E5E5"> going on</font>

922
00:32:26,160 --> 00:32:29,880
it's a separate side discussion<font color="#E5E5E5"> how many</font>

923
00:32:28,380 --> 00:32:32,850
here<font color="#E5E5E5"> have heard of Disney infinity</font><font color="#CCCCCC"> a</font>

924
00:32:29,880 --> 00:32:35,520
game for<font color="#E5E5E5"> yeah overpriced game with all</font>

925
00:32:32,850 --> 00:32:37,110
the toys yeah it's a game<font color="#E5E5E5"> released for</font>

926
00:32:35,520 --> 00:32:38,610
<font color="#E5E5E5">pretty much every console that comes</font>

927
00:32:37,110 --> 00:32:40,110
with this USB<font color="#E5E5E5"> portal that you plug into</font>

928
00:32:38,610 --> 00:32:42,750
<font color="#E5E5E5">the console and you buy a ton of</font>

929
00:32:40,110 --> 00:32:44,100
expensive<font color="#E5E5E5"> RFID toys for your kids to</font>

930
00:32:42,750 --> 00:32:45,900
place on<font color="#CCCCCC"> it and then when</font><font color="#E5E5E5"> you do the</font>

931
00:32:44,100 --> 00:32:47,280
<font color="#CCCCCC">game recognizes</font><font color="#E5E5E5"> that it's a you know a</font>

932
00:32:45,900 --> 00:32:48,360
character<font color="#E5E5E5"> recognizes that you place the</font>

933
00:32:47,280 --> 00:32:50,760
character on<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and let you play as that</font>

934
00:32:48,360 --> 00:32:52,620
<font color="#CCCCCC">character in</font><font color="#E5E5E5"> the game well to prevent</font>

935
00:32:50,760 --> 00:32:54,180
<font color="#E5E5E5">people from emulating</font><font color="#CCCCCC"> that USB</font><font color="#E5E5E5"> portal</font>

936
00:32:52,620 --> 00:32:56,370
with an Arduino or<font color="#E5E5E5"> something and just</font>

937
00:32:54,180 --> 00:32:57,600
<font color="#E5E5E5">never buy any of the figures</font><font color="#CCCCCC"> they came</font>

938
00:32:56,370 --> 00:32:59,669
<font color="#E5E5E5">up with</font><font color="#CCCCCC"> Disney came</font><font color="#E5E5E5"> up with this scheme</font>

939
00:32:57,600 --> 00:33:01,020
<font color="#E5E5E5">where both the console in the portal</font><font color="#CCCCCC"> had</font>

940
00:32:59,670 --> 00:33:02,820
to keep generating<font color="#CCCCCC"> the same random</font>

941
00:33:01,020 --> 00:33:05,670
numbers based<font color="#E5E5E5"> on a shared seed</font><font color="#CCCCCC"> that they</font>

942
00:33:02,820 --> 00:33:06,840
both knew<font color="#E5E5E5"> it decided it</font><font color="#CCCCCC"> run</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> and if</font>

943
00:33:05,670 --> 00:33:09,030
they<font color="#E5E5E5"> were got out of sync the game would</font>

944
00:33:06,840 --> 00:33:10,649
just stop talking<font color="#E5E5E5"> to the portal</font><font color="#CCCCCC"> alright</font>

945
00:33:09,030 --> 00:33:12,600
so the console would generate a<font color="#CCCCCC"> random</font>

946
00:33:10,650 --> 00:33:13,980
seed<font color="#CCCCCC"> scrambler</font><font color="#E5E5E5"> so you couldn't tell what</font>

947
00:33:12,600 --> 00:33:16,199
<font color="#CCCCCC">was in the USB traffic</font><font color="#E5E5E5"> logs and then</font>

948
00:33:13,980 --> 00:33:17,190
send that<font color="#E5E5E5"> to the portal so the portal</font>

949
00:33:16,200 --> 00:33:18,600
would<font color="#E5E5E5"> then descramble that</font>

950
00:33:17,190 --> 00:33:21,810
<font color="#E5E5E5">and use the</font><font color="#CCCCCC"> sea to generate its own</font>

951
00:33:18,600 --> 00:33:23,129
<font color="#E5E5E5">random numbers</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then it would</font>

952
00:33:21,810 --> 00:33:24,600
generate<font color="#E5E5E5"> the next random number</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it</font>

953
00:33:23,130 --> 00:33:26,100
<font color="#CCCCCC">send it</font><font color="#E5E5E5"> scrambled back to the console</font>

954
00:33:24,600 --> 00:33:27,389
<font color="#E5E5E5">and so the console would do the same</font>

955
00:33:26,100 --> 00:33:29,250
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> it would generate</font><font color="#E5E5E5"> its own random</font>

956
00:33:27,390 --> 00:33:31,170
number<font color="#E5E5E5"> and if what it came up with</font>

957
00:33:29,250 --> 00:33:32,550
didn't match the random number at the

958
00:33:31,170 --> 00:33:34,380
<font color="#CCCCCC">portals and it would</font><font color="#E5E5E5"> just freak out and</font>

959
00:33:32,550 --> 00:33:35,610
stop<font color="#E5E5E5"> talking to it just assume it's a</font>

960
00:33:34,380 --> 00:33:37,410
fake and just<font color="#E5E5E5"> out talking to it</font>

961
00:33:35,610 --> 00:33:40,080
well we can do<font color="#E5E5E5"> that same kind of logic</font>

962
00:33:37,410 --> 00:33:41,760
here so if<font color="#E5E5E5"> we did that we could prevent</font>

963
00:33:40,080 --> 00:33:43,830
us be traffic sniffing but it would<font color="#E5E5E5"> only</font>

964
00:33:41,760 --> 00:33:47,370
work<font color="#E5E5E5"> well if the drive is the only one</font>

965
00:33:43,830 --> 00:33:49,290
<font color="#E5E5E5">that could descramble</font><font color="#CCCCCC"> the traffic the</font>

966
00:33:47,370 --> 00:33:50,610
big problem<font color="#E5E5E5"> with all this is what does</font>

967
00:33:49,290 --> 00:33:52,050
the<font color="#CCCCCC"> attack and never</font><font color="#E5E5E5"> plugs the drive in</font>

968
00:33:50,610 --> 00:33:53,669
which is what you should<font color="#E5E5E5"> do if you're</font>

969
00:33:52,050 --> 00:33:55,350
dealing<font color="#E5E5E5"> with this kind of</font><font color="#CCCCCC"> drive</font><font color="#E5E5E5"> and</font>

970
00:33:53,670 --> 00:33:56,520
instead dumps the entire contents of the

971
00:33:55,350 --> 00:33:58,830
<font color="#E5E5E5">name chip which would give them access</font>

972
00:33:56,520 --> 00:34:01,320
<font color="#E5E5E5">to the data as it sits and the firmware</font>

973
00:33:58,830 --> 00:34:03,000
so they could<font color="#E5E5E5"> just disassemble and</font>

974
00:34:01,320 --> 00:34:04,470
figure out<font color="#E5E5E5"> our scrambling algorithms or</font>

975
00:34:03,000 --> 00:34:06,540
passphrase<font color="#E5E5E5"> or whatever it is that we try</font>

976
00:34:04,470 --> 00:34:09,080
<font color="#CCCCCC">to do to protect it</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then they have</font>

977
00:34:06,540 --> 00:34:12,420
then<font color="#CCCCCC"> they</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to do the same</font><font color="#E5E5E5"> thing</font>

978
00:34:09,080 --> 00:34:14,009
<font color="#E5E5E5">well okay fine</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we'll patch the</font>

979
00:34:12,420 --> 00:34:15,330
firmware<font color="#E5E5E5"> so that whenever a reader right</font>

980
00:34:14,010 --> 00:34:17,580
<font color="#E5E5E5">sector' command comes in</font><font color="#CCCCCC"> we'll just</font>

981
00:34:15,330 --> 00:34:19,770
encrypt or decrypt the contents<font color="#E5E5E5"> of the</font>

982
00:34:17,580 --> 00:34:22,290
USB data buffer<font color="#E5E5E5"> before</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> sends it</font>

983
00:34:19,770 --> 00:34:23,460
passes it along to<font color="#E5E5E5"> the nand chip but</font>

984
00:34:22,290 --> 00:34:25,440
that raises<font color="#E5E5E5"> the question</font><font color="#CCCCCC"> where would the</font>

985
00:34:23,460 --> 00:34:27,090
encryption key be because if you stored

986
00:34:25,440 --> 00:34:28,080
<font color="#CCCCCC">it in</font><font color="#E5E5E5"> the firmware then all they have to</font>

987
00:34:27,090 --> 00:34:30,090
do is dump the firmware<font color="#E5E5E5"> and then they</font>

988
00:34:28,080 --> 00:34:31,529
got<font color="#E5E5E5"> the key</font><font color="#CCCCCC"> so that's useless</font><font color="#E5E5E5"> so instead</font>

989
00:34:30,090 --> 00:34:33,060
of<font color="#E5E5E5"> for storing Infirmary you could have</font>

990
00:34:31,530 --> 00:34:35,190
the firmware derive it based<font color="#E5E5E5"> on a</font>

991
00:34:33,060 --> 00:34:38,449
password or<font color="#CCCCCC"> something sent to it by the</font>

992
00:34:35,190 --> 00:34:40,350
<font color="#CCCCCC">PC so you know</font><font color="#E5E5E5"> counter resetting script</font>

993
00:34:38,449 --> 00:34:41,969
<font color="#CCCCCC">the point is this whole cat-and-mouse</font>

994
00:34:40,350 --> 00:34:44,279
game could just go<font color="#CCCCCC"> on forever it can get</font>

995
00:34:41,969 --> 00:34:47,219
as complicated as<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want or need it to</font>

996
00:34:44,280 --> 00:34:51,090
be so it's kind<font color="#CCCCCC"> of you</font><font color="#E5E5E5"> know it's</font><font color="#CCCCCC"> just a</font>

997
00:34:47,219 --> 00:34:52,859
<font color="#CCCCCC">cat-and-mouse</font><font color="#E5E5E5"> thing no demo sorry to say</font>

998
00:34:51,090 --> 00:34:55,950
I ran out of time<font color="#E5E5E5"> couldn't scramble one</font>

999
00:34:52,860 --> 00:35:01,110
<font color="#CCCCCC">together for</font><font color="#E5E5E5"> you but have a nice graphic</font>

1000
00:34:55,949 --> 00:35:04,529
it's<font color="#E5E5E5"> almost as good</font><font color="#CCCCCC"> right here</font><font color="#E5E5E5"> are some</font>

1001
00:35:01,110 --> 00:35:06,570
links<font color="#E5E5E5"> to the to the github repository</font>

1002
00:35:04,530 --> 00:35:08,340
<font color="#CCCCCC">the holds the original c-sharp values B</font>

1003
00:35:06,570 --> 00:35:10,890
code that I<font color="#E5E5E5"> wrote the the</font><font color="#CCCCCC"> new Python</font>

1004
00:35:08,340 --> 00:35:13,620
code that's the third link there the

1005
00:35:10,890 --> 00:35:14,730
Russian site specific to the<font color="#CCCCCC"> vison USB</font>

1006
00:35:13,620 --> 00:35:17,940
controller<font color="#E5E5E5"> that</font><font color="#CCCCCC"> i've been</font><font color="#E5E5E5"> talking about</font>

1007
00:35:14,730 --> 00:35:19,110
and then at the bottom repository of

1008
00:35:17,940 --> 00:35:21,090
<font color="#E5E5E5">code</font><font color="#CCCCCC"> that has a</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> scratch</font>

1009
00:35:19,110 --> 00:35:22,530
implementation of firmware<font color="#E5E5E5"> for one</font>

1010
00:35:21,090 --> 00:35:24,420
<font color="#E5E5E5">particular version of these controllers</font>

1011
00:35:22,530 --> 00:35:26,190
<font color="#CCCCCC">these spicen controllers and it also has</font>

1012
00:35:24,420 --> 00:35:27,450
a technical wiki for writing eddie 51

1013
00:35:26,190 --> 00:35:29,340
code for this<font color="#E5E5E5"> thing it's got a lot</font><font color="#CCCCCC"> of</font>

1014
00:35:27,450 --> 00:35:30,660
documentation<font color="#CCCCCC"> about all the registers</font>

1015
00:35:29,340 --> 00:35:32,069
<font color="#E5E5E5">and all the</font>

1016
00:35:30,660 --> 00:35:33,058
memory<font color="#E5E5E5"> math</font><font color="#CCCCCC"> i/o and all the stuff that</font>

1017
00:35:32,069 --> 00:35:36,930
<font color="#CCCCCC">you</font><font color="#E5E5E5"> would need to know to write code for</font>

1018
00:35:33,059 --> 00:35:40,470
<font color="#E5E5E5">this thing which can be really awful so</font>

1019
00:35:36,930 --> 00:35:42,180
I'm in conclusion<font color="#CCCCCC"> a flash drive</font><font color="#E5E5E5"> is not</font>

1020
00:35:40,470 --> 00:35:43,589
<font color="#E5E5E5">just the store</font><font color="#CCCCCC"> to device it's really not</font>

1021
00:35:42,180 --> 00:35:45,839
<font color="#E5E5E5">all</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> different from your host</font>

1022
00:35:43,589 --> 00:35:47,369
computer and USB is nothing more than a

1023
00:35:45,839 --> 00:35:49,109
transport mechanism connecting the two

1024
00:35:47,369 --> 00:35:50,220
<font color="#CCCCCC">together so you can't trust the flash</font>

1025
00:35:49,109 --> 00:35:51,930
drive any<font color="#E5E5E5"> more than you can trust</font>

1026
00:35:50,220 --> 00:35:53,729
another<font color="#E5E5E5"> computer on a network</font><font color="#CCCCCC"> that the</font>

1027
00:35:51,930 --> 00:35:55,618
moment you supply power to<font color="#CCCCCC"> a device by</font>

1028
00:35:53,729 --> 00:35:57,118
plugging<font color="#CCCCCC"> it in you're taking a risk</font><font color="#E5E5E5"> not</font>

1029
00:35:55,619 --> 00:35:58,349
<font color="#CCCCCC">only a risk for your</font><font color="#E5E5E5"> computer but a risk</font>

1030
00:35:57,119 --> 00:35:59,999
for anything<font color="#CCCCCC"> about the state of that</font>

1031
00:35:58,349 --> 00:36:02,549
device that<font color="#CCCCCC"> you might</font><font color="#E5E5E5"> care about such as</font>

1032
00:35:59,999 --> 00:36:04,109
what's currently stored on it so I

1033
00:36:02,549 --> 00:36:05,279
promise you everything<font color="#CCCCCC"> I just stood</font><font color="#E5E5E5"> up</font>

1034
00:36:04,109 --> 00:36:06,598
<font color="#E5E5E5">here and talked about there are people</font>

1035
00:36:05,279 --> 00:36:08,999
in this<font color="#E5E5E5"> world that</font><font color="#CCCCCC"> are doing it already</font>

1036
00:36:06,599 --> 00:36:10,920
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> not-- it's it's out there so it's</font>

1037
00:36:08,999 --> 00:36:12,209
<font color="#E5E5E5">not just theoretical and if you</font><font color="#CCCCCC"> truly</font>

1038
00:36:10,920 --> 00:36:14,190
care about retrieving<font color="#CCCCCC"> the data from</font>

1039
00:36:12,210 --> 00:36:17,309
something don't plug<font color="#CCCCCC"> it in right</font>

1040
00:36:14,190 --> 00:36:18,450
blockers are not good<font color="#E5E5E5"> enough it all it</font>

1041
00:36:17,309 --> 00:36:19,380
does is block<font color="#CCCCCC"> the computer for</font><font color="#E5E5E5"> sending</font>

1042
00:36:18,450 --> 00:36:20,910
the<font color="#CCCCCC"> command the flash drive can</font><font color="#E5E5E5"> do</font>

1043
00:36:19,380 --> 00:36:21,710
whatever it<font color="#E5E5E5"> wants if it's got power it</font>

1044
00:36:20,910 --> 00:36:25,319
can do anything

1045
00:36:21,710 --> 00:36:27,450
so hopefully this talk<font color="#E5E5E5"> educated and</font>

1046
00:36:25,319 --> 00:36:28,859
entertained a little bit I put<font color="#E5E5E5"> up a few</font>

1047
00:36:27,450 --> 00:36:31,890
<font color="#E5E5E5">ways to contact or follow me</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you're</font>

1048
00:36:28,859 --> 00:36:33,979
interested<font color="#CCCCCC"> and thanks retime appreciate</font>

1049
00:36:31,890 --> 00:36:33,979
it

