1
00:00:07,010 --> 00:00:09,040
[Music]

2
00:00:08,160 --> 00:00:12,400
check

3
00:00:09,040 --> 00:00:12,799
all right so i hope everybody can hear

4
00:00:12,400 --> 00:00:15,759
me

5
00:00:12,799 --> 00:00:17,920
and uh you can see my screen as well

6
00:00:15,759 --> 00:00:17,920
right

7
00:00:22,640 --> 00:00:30,080
okay so let's

8
00:00:26,240 --> 00:00:33,440
start um

9
00:00:30,080 --> 00:00:37,519
so what this talk is about is it's a

10
00:00:33,440 --> 00:00:40,640
uh it's basically uh about

11
00:00:37,520 --> 00:00:41,200
the most common vulnerabilities uh that

12
00:00:40,640 --> 00:00:43,520
are

13
00:00:41,200 --> 00:00:45,039
usually identified in today's

14
00:00:43,520 --> 00:00:49,840
penetration testing

15
00:00:45,039 --> 00:00:53,360
while uh testing.net applications and

16
00:00:49,840 --> 00:00:57,600
and why why certain bugs uh occur and

17
00:00:53,360 --> 00:01:00,960
why do and how how do

18
00:00:57,600 --> 00:01:00,960
we fix them so

19
00:01:02,399 --> 00:01:07,600
fair disclosure to before before we get

20
00:01:05,519 --> 00:01:10,720
into the talk

21
00:01:07,600 --> 00:01:12,479
i was not a full-time programmer i have

22
00:01:10,720 --> 00:01:16,560
not done programming before

23
00:01:12,479 --> 00:01:18,400
uh actually i got into this thing after

24
00:01:16,560 --> 00:01:20,080
conducting a lot of penetration tests on

25
00:01:18,400 --> 00:01:23,439
on the web applications and then

26
00:01:20,080 --> 00:01:27,360
and just to try to make sense

27
00:01:23,439 --> 00:01:30,960
uh why developer do certain things and

28
00:01:27,360 --> 00:01:33,759
and why uh xyz issue occurred

29
00:01:30,960 --> 00:01:34,880
during during as uh in a specific

30
00:01:33,759 --> 00:01:38,320
application

31
00:01:34,880 --> 00:01:41,360
well just to figure out

32
00:01:38,320 --> 00:01:42,639
what's uh what's the developer was

33
00:01:41,360 --> 00:01:44,240
thinking while developing the

34
00:01:42,640 --> 00:01:47,280
application and

35
00:01:44,240 --> 00:01:51,759
uh what might he have done wrong

36
00:01:47,280 --> 00:01:51,759
to cause such issues

37
00:01:52,479 --> 00:01:58,079
so a little bit about me um

38
00:01:56,079 --> 00:02:00,240
i'm a penetration testing consultant

39
00:01:58,079 --> 00:02:04,158
i've uh i'm working

40
00:02:00,240 --> 00:02:08,399
uh as a private uh contractor

41
00:02:04,159 --> 00:02:11,280
right now and and i've been working

42
00:02:08,399 --> 00:02:12,879
for financial organizations uh

43
00:02:11,280 --> 00:02:16,560
government organizations

44
00:02:12,879 --> 00:02:20,799
oil and gas sectors and

45
00:02:16,560 --> 00:02:23,599
whatnot so that's pretty much

46
00:02:20,800 --> 00:02:24,319
it about me and i've been into pen

47
00:02:23,599 --> 00:02:29,119
testing

48
00:02:24,319 --> 00:02:32,720
for like past five years or so

49
00:02:29,120 --> 00:02:35,840
and recently i got into this thing uh

50
00:02:32,720 --> 00:02:38,319
like to understand

51
00:02:35,840 --> 00:02:38,879
to get a better understanding of why

52
00:02:38,319 --> 00:02:41,200
bugs

53
00:02:38,879 --> 00:02:42,079
occur in the application so i decided to

54
00:02:41,200 --> 00:02:45,040
write a

55
00:02:42,080 --> 00:02:45,760
few set of vulnerable codes myself to in

56
00:02:45,040 --> 00:02:51,840
order to

57
00:02:45,760 --> 00:02:51,840
understand uh why these things happen

58
00:02:55,519 --> 00:03:02,080
so this talk uh is going to cover

59
00:02:58,560 --> 00:03:03,200
a lot of issues that that i personally

60
00:03:02,080 --> 00:03:08,080
experience you do

61
00:03:03,200 --> 00:03:10,959
during uh pen test and

62
00:03:08,080 --> 00:03:11,440
how how we can fix them we will be

63
00:03:10,959 --> 00:03:15,680
looking

64
00:03:11,440 --> 00:03:17,599
uh into a code a lot of times and then

65
00:03:15,680 --> 00:03:19,519
we'll be spending a lot of time in and

66
00:03:17,599 --> 00:03:23,280
looking into codes and then

67
00:03:19,519 --> 00:03:27,440
seeing what one line change can

68
00:03:23,280 --> 00:03:27,440
can do so

69
00:03:27,519 --> 00:03:33,840
let's get into it

70
00:03:30,799 --> 00:03:34,159
all right so the most common uh issues

71
00:03:33,840 --> 00:03:37,280
that

72
00:03:34,159 --> 00:03:38,319
uh are identified usually uh when

73
00:03:37,280 --> 00:03:41,519
testing

74
00:03:38,319 --> 00:03:42,798
a dotnet application is like um it's

75
00:03:41,519 --> 00:03:44,879
2020 but

76
00:03:42,799 --> 00:03:46,480
still i i've seen a lot of applications

77
00:03:44,879 --> 00:03:46,959
that are not using secure channel they

78
00:03:46,480 --> 00:03:50,159
they are

79
00:03:46,959 --> 00:03:53,200
still deployed uh uh

80
00:03:50,159 --> 00:03:56,159
over http and then and they are

81
00:03:53,200 --> 00:03:56,720
still communicating over http so pretty

82
00:03:56,159 --> 00:03:59,760
basic

83
00:03:56,720 --> 00:04:00,000
stuff but yes it's 20 20 and we are

84
00:03:59,760 --> 00:04:03,840
still

85
00:04:00,000 --> 00:04:06,319
seeing clear tax issues

86
00:04:03,840 --> 00:04:07,519
in production applications as well all

87
00:04:06,319 --> 00:04:10,560
right the next one is

88
00:04:07,519 --> 00:04:14,640
authentication and session management uh

89
00:04:10,560 --> 00:04:16,000
the other issues is the identify a lot

90
00:04:14,640 --> 00:04:17,680
as

91
00:04:16,000 --> 00:04:19,040
access control issues or or broken

92
00:04:17,680 --> 00:04:20,880
access control or you can

93
00:04:19,040 --> 00:04:22,400
secure object references things like

94
00:04:20,880 --> 00:04:26,560
these so

95
00:04:22,400 --> 00:04:26,560
this is one of the most common issue

96
00:04:26,639 --> 00:04:31,840
found in dotnet application a lot of uh

97
00:04:29,520 --> 00:04:35,919
input validation issues uh

98
00:04:31,840 --> 00:04:38,560
uh for example x sql xml injections

99
00:04:35,919 --> 00:04:40,000
crosstalk scripting these serializations

100
00:04:38,560 --> 00:04:41,840
uh

101
00:04:40,000 --> 00:04:43,759
sometimes command injections as well

102
00:04:41,840 --> 00:04:48,799
template injections

103
00:04:43,759 --> 00:04:50,960
uh another most common category of

104
00:04:48,800 --> 00:04:52,800
issues that are identified while

105
00:04:50,960 --> 00:04:56,560
testing.net application

106
00:04:52,800 --> 00:04:59,680
is is the file upload csrf

107
00:04:56,560 --> 00:05:02,639
is like is not

108
00:04:59,680 --> 00:05:03,199
not that common nowadays but it's still

109
00:05:02,639 --> 00:05:07,840
it's

110
00:05:03,199 --> 00:05:08,800
quite prevalent open redirect yeah it is

111
00:05:07,840 --> 00:05:11,039
still there in

112
00:05:08,800 --> 00:05:12,720
a lot of dotnet applications

113
00:05:11,039 --> 00:05:13,840
misconfigurations and information

114
00:05:12,720 --> 00:05:15,840
disclosures okay

115
00:05:13,840 --> 00:05:16,880
all right so this is uh basically

116
00:05:15,840 --> 00:05:19,359
related to like

117
00:05:16,880 --> 00:05:20,240
informative headers uh enabled and then

118
00:05:19,360 --> 00:05:23,280
how easy

119
00:05:20,240 --> 00:05:26,479
yeah we will get into it and

120
00:05:23,280 --> 00:05:28,559
and see how easy it is to fix those

121
00:05:26,479 --> 00:05:31,919
minor issues

122
00:05:28,560 --> 00:05:34,400
as well all right so

123
00:05:31,919 --> 00:05:38,719
i will just quickly uh go through the

124
00:05:34,400 --> 00:05:41,758
insecure communication channel

125
00:05:38,720 --> 00:05:43,840
and uh basically what it does is your

126
00:05:41,759 --> 00:05:46,240
application is deployed on a server but

127
00:05:43,840 --> 00:05:47,440
the server is not configured uh to use

128
00:05:46,240 --> 00:05:49,600
uh

129
00:05:47,440 --> 00:05:51,919
secure transportation medium for example

130
00:05:49,600 --> 00:05:53,840
a tls certificate is not deployed and

131
00:05:51,919 --> 00:05:55,919
your application is running over http

132
00:05:53,840 --> 00:05:58,880
protocol instead of suvps

133
00:05:55,919 --> 00:05:59,440
so this is one of the issue that's most

134
00:05:58,880 --> 00:06:02,159
common

135
00:05:59,440 --> 00:06:06,560
that's still identified on a lot of

136
00:06:02,160 --> 00:06:09,440
production applications

137
00:06:06,560 --> 00:06:10,240
so uh here is the sample screenshot i

138
00:06:09,440 --> 00:06:13,600
just took it

139
00:06:10,240 --> 00:06:15,520
uh from the internet uh

140
00:06:13,600 --> 00:06:17,759
what can go wrong here if anybody is

141
00:06:15,520 --> 00:06:20,080
sniffing over the network he can

142
00:06:17,759 --> 00:06:21,039
that that attacker can see your

143
00:06:20,080 --> 00:06:23,440
credentials

144
00:06:21,039 --> 00:06:24,318
what is being transmitted uh from the

145
00:06:23,440 --> 00:06:26,160
client side

146
00:06:24,319 --> 00:06:27,680
to the server and then he can even

147
00:06:26,160 --> 00:06:30,960
manipulate

148
00:06:27,680 --> 00:06:35,199
the communication between between the

149
00:06:30,960 --> 00:06:37,840
client and server as well

150
00:06:35,199 --> 00:06:39,520
next up all right this is this is uh

151
00:06:37,840 --> 00:06:39,840
this is where the good stuff will start

152
00:06:39,520 --> 00:06:41,840
and

153
00:06:39,840 --> 00:06:44,239
the furnace stuff will start and this is

154
00:06:41,840 --> 00:06:46,799
where we actually look into the code

155
00:06:44,240 --> 00:06:48,639
code level implementation well what can

156
00:06:46,800 --> 00:06:50,479
uh go wrong at the core level

157
00:06:48,639 --> 00:06:53,840
implementations authentication and

158
00:06:50,479 --> 00:06:56,080
session management all right the most uh

159
00:06:53,840 --> 00:06:57,840
most common issues uh while we identify

160
00:06:56,080 --> 00:06:59,359
uh we identified you during the

161
00:06:57,840 --> 00:07:02,719
pentester is uh

162
00:06:59,360 --> 00:07:06,000
related to this

163
00:07:02,720 --> 00:07:10,000
session id management or or

164
00:07:06,000 --> 00:07:13,840
logout management things for example

165
00:07:10,000 --> 00:07:15,599
when you try to log into

166
00:07:13,840 --> 00:07:16,960
an application what happens in the

167
00:07:15,599 --> 00:07:20,080
background is

168
00:07:16,960 --> 00:07:20,799
you provide your credential and a server

169
00:07:20,080 --> 00:07:23,520
process it

170
00:07:20,800 --> 00:07:27,280
and it checks if the user credentials

171
00:07:23,520 --> 00:07:30,080
are valid and then it sends you back

172
00:07:27,280 --> 00:07:30,799
to some other page and and set sets a

173
00:07:30,080 --> 00:07:33,758
cookie

174
00:07:30,800 --> 00:07:34,960
in your browser so the next time you try

175
00:07:33,759 --> 00:07:39,199
to access any

176
00:07:34,960 --> 00:07:41,680
any of the page of that application

177
00:07:39,199 --> 00:07:42,840
uh you provide the browser provides that

178
00:07:41,680 --> 00:07:46,160
cookie as well

179
00:07:42,840 --> 00:07:48,799
so uh server can identify that

180
00:07:46,160 --> 00:07:49,680
the user is already authenticated and

181
00:07:48,800 --> 00:07:52,800
does not need

182
00:07:49,680 --> 00:07:55,840
to provide uh the credentials again

183
00:07:52,800 --> 00:07:56,960
so as we can see here the first step was

184
00:07:55,840 --> 00:07:59,679
uh

185
00:07:56,960 --> 00:08:00,400
the user logging into the application

186
00:07:59,680 --> 00:08:04,400
the server

187
00:08:00,400 --> 00:08:07,198
redirects the the user and sets a cookie

188
00:08:04,400 --> 00:08:08,719
and then a user visits another page

189
00:08:07,199 --> 00:08:10,840
where he can see his

190
00:08:08,720 --> 00:08:14,240
profile information and server sends

191
00:08:10,840 --> 00:08:16,638
back this is this is the usual behavior

192
00:08:14,240 --> 00:08:18,160
and here is the attacking scenario when

193
00:08:16,639 --> 00:08:21,360
the user logs out

194
00:08:18,160 --> 00:08:23,840
server fails to invalidate uh

195
00:08:21,360 --> 00:08:26,000
the cookie but redirects the user to

196
00:08:23,840 --> 00:08:28,960
login page

197
00:08:26,000 --> 00:08:29,840
so the user tries to access the page

198
00:08:28,960 --> 00:08:33,519
again

199
00:08:29,840 --> 00:08:35,760
and and he can access the information

200
00:08:33,519 --> 00:08:36,719
or view the information again because a

201
00:08:35,760 --> 00:08:40,159
server

202
00:08:36,719 --> 00:08:43,440
or or the programmer forgot to

203
00:08:40,159 --> 00:08:43,439
invalidate those cookies

204
00:08:43,599 --> 00:08:48,480
excuse me sorry so the

205
00:08:46,800 --> 00:08:51,120
programmer basically forgot to

206
00:08:48,480 --> 00:08:54,320
invalidate those cookies that were set

207
00:08:51,120 --> 00:08:57,760
at the time of login and since those

208
00:08:54,320 --> 00:09:00,000
cookies were valid server would gladly

209
00:08:57,760 --> 00:09:00,720
process all the requests from the users

210
00:09:00,000 --> 00:09:03,200
even

211
00:09:00,720 --> 00:09:04,240
when the user clicked on the logout

212
00:09:03,200 --> 00:09:07,600
button

213
00:09:04,240 --> 00:09:09,040
or logout function and will gladly

214
00:09:07,600 --> 00:09:14,080
provide all the information

215
00:09:09,040 --> 00:09:16,319
to user uh regardless if the user is

216
00:09:14,080 --> 00:09:17,279
authenticated or not because of this

217
00:09:16,320 --> 00:09:21,440
issue so

218
00:09:17,279 --> 00:09:24,000
we will quickly look into dummy code

219
00:09:21,440 --> 00:09:25,360
what it looks like and how how we can

220
00:09:24,000 --> 00:09:29,440
fix it

221
00:09:25,360 --> 00:09:32,640
so here we have a

222
00:09:29,440 --> 00:09:36,320
code code base or or a dummy code

223
00:09:32,640 --> 00:09:37,920
basically what it is doing is if we can

224
00:09:36,320 --> 00:09:41,120
see

225
00:09:37,920 --> 00:09:44,640
this is a function or

226
00:09:41,120 --> 00:09:48,320
action you can see uh it's it's uh

227
00:09:44,640 --> 00:09:49,199
basically checking uh it's basically

228
00:09:48,320 --> 00:09:51,440
used for

229
00:09:49,200 --> 00:09:52,800
viewing your profile information all

230
00:09:51,440 --> 00:09:56,320
right and

231
00:09:52,800 --> 00:09:58,959
it checks for

232
00:09:56,320 --> 00:10:00,320
for different parameters where it's it's

233
00:09:58,959 --> 00:10:04,079
a processing

234
00:10:00,320 --> 00:10:07,519
email id as from the user

235
00:10:04,079 --> 00:10:07,920
as input and sending the response back

236
00:10:07,519 --> 00:10:10,800
to

237
00:10:07,920 --> 00:10:13,599
the users but the problem here is at the

238
00:10:10,800 --> 00:10:16,640
log out button we only use session.clear

239
00:10:13,600 --> 00:10:20,640
uh which will not

240
00:10:16,640 --> 00:10:24,160
invalidate and log on the user sessions

241
00:10:20,640 --> 00:10:24,160
even after log out properly

242
00:10:30,320 --> 00:10:36,959
so in order to fix it we have to

243
00:10:33,680 --> 00:10:37,439
remove the cookies and and set a blank

244
00:10:36,959 --> 00:10:40,719
cookie

245
00:10:37,440 --> 00:10:43,120
and then destroy the cookies

246
00:10:40,720 --> 00:10:44,000
and make sure that cookies are destroyed

247
00:10:43,120 --> 00:10:47,200
before

248
00:10:44,000 --> 00:10:49,760
before login in when the user is

249
00:10:47,200 --> 00:10:51,519
trying to log in uh make sure that user

250
00:10:49,760 --> 00:10:53,760
does not have

251
00:10:51,519 --> 00:10:55,279
any previously stored cookies or we have

252
00:10:53,760 --> 00:10:58,480
to clear it manually

253
00:10:55,279 --> 00:11:00,320
and and at the log out

254
00:10:58,480 --> 00:11:02,560
instant we also have to make sure the

255
00:11:00,320 --> 00:11:02,560
same

256
00:11:08,560 --> 00:11:14,560
so this is the actual

257
00:11:12,000 --> 00:11:15,120
page sorry i have to like go back and

258
00:11:14,560 --> 00:11:16,959
forth

259
00:11:15,120 --> 00:11:18,720
in order to explain this example this is

260
00:11:16,959 --> 00:11:21,920
this is the controller view

261
00:11:18,720 --> 00:11:25,680
and this is uh this is the this is

262
00:11:21,920 --> 00:11:28,800
actual user view so this page is not

263
00:11:25,680 --> 00:11:29,920
checking the if the session is valid or

264
00:11:28,800 --> 00:11:33,359
not

265
00:11:29,920 --> 00:11:36,719
and because of that a user

266
00:11:33,360 --> 00:11:38,720
is able to access this page which he was

267
00:11:36,720 --> 00:11:42,640
not supposed to access

268
00:11:38,720 --> 00:11:45,600
before before logging in so

269
00:11:42,640 --> 00:11:47,360
a simple check if a simple check that if

270
00:11:45,600 --> 00:11:51,519
the session is valid or not

271
00:11:47,360 --> 00:11:53,680
we can uh based on that we we can

272
00:11:51,519 --> 00:11:55,120
decide if the session is valid we can

273
00:11:53,680 --> 00:11:57,839
redirect the user

274
00:11:55,120 --> 00:12:01,040
or if they say or if the session is

275
00:11:57,839 --> 00:12:03,839
invalid we can redirect the user to

276
00:12:01,040 --> 00:12:06,639
provide its credentials again so he can

277
00:12:03,839 --> 00:12:06,639
access this page

278
00:12:06,959 --> 00:12:12,638
so just by skipping a check here

279
00:12:10,160 --> 00:12:13,680
uh we introduce our vulnerability that

280
00:12:12,639 --> 00:12:17,279
that can

281
00:12:13,680 --> 00:12:19,040
lead to information disclosure

282
00:12:17,279 --> 00:12:22,000
notice here we are not checking the

283
00:12:19,040 --> 00:12:23,599
session as highlighted in the red box

284
00:12:22,000 --> 00:12:25,600
this could be this could have been

285
00:12:23,600 --> 00:12:28,000
mitigated if we

286
00:12:25,600 --> 00:12:29,680
if the developers uh check the user

287
00:12:28,000 --> 00:12:33,760
session is valid or not

288
00:12:29,680 --> 00:12:37,199
so let's say the user uh

289
00:12:33,760 --> 00:12:40,720
the request got processed and it hits

290
00:12:37,200 --> 00:12:44,399
this control this function

291
00:12:40,720 --> 00:12:45,360
in the controller so here we have

292
00:12:44,399 --> 00:12:48,880
another

293
00:12:45,360 --> 00:12:52,639
issue which we will discuss later on but

294
00:12:48,880 --> 00:12:55,680
combining those two issues uh this

295
00:12:52,639 --> 00:12:58,560
provides a very safer

296
00:12:55,680 --> 00:12:59,279
vulnerability you can access and

297
00:12:58,560 --> 00:13:02,959
retrieve

298
00:12:59,279 --> 00:13:05,360
information of users

299
00:13:02,959 --> 00:13:06,239
without providing any login without

300
00:13:05,360 --> 00:13:10,720
knowing any

301
00:13:06,240 --> 00:13:14,160
valid login credentials if

302
00:13:10,720 --> 00:13:15,920
at the end of the talk if we get if we

303
00:13:14,160 --> 00:13:19,680
have enough time we will get get into

304
00:13:15,920 --> 00:13:23,120
the demos as well so

305
00:13:19,680 --> 00:13:24,239
how do we fix this uh the fix is uh

306
00:13:23,120 --> 00:13:27,519
quite simple

307
00:13:24,240 --> 00:13:31,200
and what we have to do

308
00:13:27,519 --> 00:13:32,480
is to make sure that the pages are well

309
00:13:31,200 --> 00:13:35,519
protected

310
00:13:32,480 --> 00:13:37,839
and and the pages uh should

311
00:13:35,519 --> 00:13:38,880
check if the user session is valid or

312
00:13:37,839 --> 00:13:42,320
not uh

313
00:13:38,880 --> 00:13:45,439
in this case how i mitigated this issue

314
00:13:42,320 --> 00:13:48,880
i was i implemented a simple check uh or

315
00:13:45,440 --> 00:13:51,279
based on the email ids because uh if

316
00:13:48,880 --> 00:13:53,040
i was restoring email id in in the

317
00:13:51,279 --> 00:13:55,279
session variable

318
00:13:53,040 --> 00:13:56,160
and and if i i checked if the session

319
00:13:55,279 --> 00:13:59,279
variable contains

320
00:13:56,160 --> 00:14:02,880
email id or not if the session email

321
00:13:59,279 --> 00:14:05,279
if the session does not contain email id

322
00:14:02,880 --> 00:14:06,480
that means the session is invalid or the

323
00:14:05,279 --> 00:14:09,199
session is blank

324
00:14:06,480 --> 00:14:09,760
so it will redirect the user to login at

325
00:14:09,199 --> 00:14:13,120
the

326
00:14:09,760 --> 00:14:14,000
at the time of login i was saving email

327
00:14:13,120 --> 00:14:17,279
id in the

328
00:14:14,000 --> 00:14:18,160
session variable so this way it can be

329
00:14:17,279 --> 00:14:20,800
mitigated

330
00:14:18,160 --> 00:14:20,800
similarly

331
00:14:21,519 --> 00:14:27,839
if we can see on line number 120

332
00:14:25,279 --> 00:14:28,560
a simple check on session variable since

333
00:14:27,839 --> 00:14:31,680
we are

334
00:14:28,560 --> 00:14:33,199
saving the session variable at the at

335
00:14:31,680 --> 00:14:36,479
the time of login

336
00:14:33,199 --> 00:14:39,680
a simple check if the session

337
00:14:36,480 --> 00:14:45,839
contains email id or not could

338
00:14:39,680 --> 00:14:45,839
have mitigated this issue

339
00:14:46,399 --> 00:14:50,160
all right uh broken access control all

340
00:14:48,880 --> 00:14:53,680
right so this is

341
00:14:50,160 --> 00:14:56,800
uh more uh this is

342
00:14:53,680 --> 00:14:58,880
this uh class of issues often called

343
00:14:56,800 --> 00:15:01,599
insecure object reference sometimes it

344
00:14:58,880 --> 00:15:03,120
is referred to as broken access control

345
00:15:01,600 --> 00:15:05,680
sometimes

346
00:15:03,120 --> 00:15:07,519
we call it elevation of privileges

347
00:15:05,680 --> 00:15:09,599
because

348
00:15:07,519 --> 00:15:11,519
there are multiple names for this class

349
00:15:09,600 --> 00:15:14,560
of bug

350
00:15:11,519 --> 00:15:17,760
depending uh upon

351
00:15:14,560 --> 00:15:21,680
the the situation if if the use

352
00:15:17,760 --> 00:15:23,600
if if the user one let's say

353
00:15:21,680 --> 00:15:26,959
it could it could be called elevation of

354
00:15:23,600 --> 00:15:31,360
privilege if not uh

355
00:15:26,959 --> 00:15:33,279
user can access or modify uh information

356
00:15:31,360 --> 00:15:34,480
of a privileged user in the web

357
00:15:33,279 --> 00:15:36,399
application

358
00:15:34,480 --> 00:15:39,440
in that case it is usually called

359
00:15:36,399 --> 00:15:42,639
elevation of privilege

360
00:15:39,440 --> 00:15:43,920
uh uh i mean horizontal uh elevation of

361
00:15:42,639 --> 00:15:47,600
privilege uh

362
00:15:43,920 --> 00:15:48,319
sorry it's vertical um uh elevation of

363
00:15:47,600 --> 00:15:52,000
privilege

364
00:15:48,320 --> 00:15:53,839
if uh a user can change or view or

365
00:15:52,000 --> 00:15:56,880
modify

366
00:15:53,839 --> 00:15:59,759
information of

367
00:15:56,880 --> 00:16:00,720
of the same role i mean let's say there

368
00:15:59,759 --> 00:16:04,079
are two users

369
00:16:00,720 --> 00:16:06,480
who have like same rights but

370
00:16:04,079 --> 00:16:08,638
a user one can modify or view

371
00:16:06,480 --> 00:16:11,279
information of user 2

372
00:16:08,639 --> 00:16:13,279
this is usually considered as a

373
00:16:11,279 --> 00:16:17,680
horizontal elevation of privilege

374
00:16:13,279 --> 00:16:20,320
this can be mitigated

375
00:16:17,680 --> 00:16:21,680
by implementing uh but just by

376
00:16:20,320 --> 00:16:24,959
implementing

377
00:16:21,680 --> 00:16:24,959
a proper access control

378
00:16:25,199 --> 00:16:29,120
the code example or the dummy code we

379
00:16:27,680 --> 00:16:37,519
are going to look into

380
00:16:29,120 --> 00:16:40,320
is quite similar to the previous one

381
00:16:37,519 --> 00:16:41,920
so just before we go into into the code

382
00:16:40,320 --> 00:16:44,639
here is an example

383
00:16:41,920 --> 00:16:45,759
an illustration so let's say a user

384
00:16:44,639 --> 00:16:48,240
tries

385
00:16:45,759 --> 00:16:49,600
to access following your example.com

386
00:16:48,240 --> 00:16:52,320
index.esp

387
00:16:49,600 --> 00:16:54,160
question mark id is equal to one and and

388
00:16:52,320 --> 00:16:54,800
the server responds right with a welcome

389
00:16:54,160 --> 00:16:58,000
exercise

390
00:16:54,800 --> 00:16:58,399
user xyz and then any when the same user

391
00:16:58,000 --> 00:17:02,240
or

392
00:16:58,399 --> 00:17:05,199
that hacker tries to manipulate the

393
00:17:02,240 --> 00:17:08,079
id value uh the server responds back

394
00:17:05,199 --> 00:17:10,480
with a different value

395
00:17:08,079 --> 00:17:11,678
and then and shows that the information

396
00:17:10,480 --> 00:17:14,720
about different user

397
00:17:11,679 --> 00:17:15,280
so this is this is a very trivial

398
00:17:14,720 --> 00:17:18,160
example

399
00:17:15,280 --> 00:17:32,240
or simple example for for a broken

400
00:17:18,160 --> 00:17:35,440
access control

401
00:17:32,240 --> 00:17:36,320
um i hope uh everything uh is fine

402
00:17:35,440 --> 00:17:39,120
because uh the

403
00:17:36,320 --> 00:17:40,000
screen is flickering at my end so i i

404
00:17:39,120 --> 00:17:44,479
just thought

405
00:17:40,000 --> 00:17:48,160
i should check if there is an issue

406
00:17:44,480 --> 00:17:48,160
with the viewers as well or not

407
00:17:53,440 --> 00:18:01,840
let me check quickly

408
00:18:17,600 --> 00:18:21,120
right right so

409
00:18:23,120 --> 00:18:26,959
again back uh back into the code this is

410
00:18:25,440 --> 00:18:30,080
this code is

411
00:18:26,960 --> 00:18:33,440
very similar in fact it's a copy of the

412
00:18:30,080 --> 00:18:34,480
previous code and we are looking at the

413
00:18:33,440 --> 00:18:37,600
same example

414
00:18:34,480 --> 00:18:40,880
here this function is basically checking

415
00:18:37,600 --> 00:18:44,399
email id and based on that it will

416
00:18:40,880 --> 00:18:45,760
return profile information and then a

417
00:18:44,400 --> 00:18:47,840
user could

418
00:18:45,760 --> 00:18:50,640
view his profile information if he

419
00:18:47,840 --> 00:18:54,000
provides his email id

420
00:18:50,640 --> 00:18:56,799
what's the problem here the problem is

421
00:18:54,000 --> 00:18:58,559
there was no check implemented by the

422
00:18:56,799 --> 00:19:02,320
developer

423
00:18:58,559 --> 00:19:05,360
and that makes sure that the user

424
00:19:02,320 --> 00:19:07,280
is providing his own email id or or

425
00:19:05,360 --> 00:19:09,039
if he is providing someone else email id

426
00:19:07,280 --> 00:19:11,200
that there was no check at all

427
00:19:09,039 --> 00:19:12,080
so what will happen is let's let's say

428
00:19:11,200 --> 00:19:15,440
that there is

429
00:19:12,080 --> 00:19:16,639
it is a user user uh user one at three

430
00:19:15,440 --> 00:19:19,440
example.com

431
00:19:16,640 --> 00:19:20,240
if he wants to view uh his information

432
00:19:19,440 --> 00:19:23,360
he would type

433
00:19:20,240 --> 00:19:26,480
in user one at the example.com and

434
00:19:23,360 --> 00:19:31,120
this would uh flow through

435
00:19:26,480 --> 00:19:31,120
this function or action

436
00:19:31,280 --> 00:19:35,200
and it will written the results for user

437
00:19:34,559 --> 00:19:38,399
one

438
00:19:35,200 --> 00:19:41,440
but if the user one tries to pass

439
00:19:38,400 --> 00:19:43,360
user two at three example.com

440
00:19:41,440 --> 00:19:45,679
the function would gladly return all the

441
00:19:43,360 --> 00:19:47,439
information about user two as well

442
00:19:45,679 --> 00:19:49,600
why because there is no check

443
00:19:47,440 --> 00:19:53,360
implemented there were uh

444
00:19:49,600 --> 00:19:54,959
to make sure that user one is actually

445
00:19:53,360 --> 00:19:57,120
requesting

446
00:19:54,960 --> 00:19:59,200
his information or user one is trying to

447
00:19:57,120 --> 00:20:02,239
view someone else's information

448
00:19:59,200 --> 00:20:05,120
so in this case we can simply

449
00:20:02,240 --> 00:20:06,320
check we can simply implement a small

450
00:20:05,120 --> 00:20:10,559
check

451
00:20:06,320 --> 00:20:15,200
by again by

452
00:20:10,559 --> 00:20:17,760
tagging email id for example let's say i

453
00:20:15,200 --> 00:20:18,840
marked email id as a primary key and i

454
00:20:17,760 --> 00:20:22,559
saved it

455
00:20:18,840 --> 00:20:22,959
uh in the session variable so i can use

456
00:20:22,559 --> 00:20:26,240
that

457
00:20:22,960 --> 00:20:28,880
same email id to check if

458
00:20:26,240 --> 00:20:29,280
that use if the user is trying to view

459
00:20:28,880 --> 00:20:32,840
his

460
00:20:29,280 --> 00:20:35,600
own data or someone else's data so when

461
00:20:32,840 --> 00:20:37,039
the user submits the request he will

462
00:20:35,600 --> 00:20:40,000
also submit his cookie

463
00:20:37,039 --> 00:20:41,600
which will be uh matched against the

464
00:20:40,000 --> 00:20:46,240
session

465
00:20:41,600 --> 00:20:49,520
session id so uh the server will check

466
00:20:46,240 --> 00:20:51,200
what value is there in in that specific

467
00:20:49,520 --> 00:20:54,639
session id and

468
00:20:51,200 --> 00:20:58,000
what value or what email id

469
00:20:54,640 --> 00:21:02,480
user has provided to check so

470
00:20:58,000 --> 00:21:05,200
this way you can the developer can check

471
00:21:02,480 --> 00:21:05,520
if the user is trying to view his own id

472
00:21:05,200 --> 00:21:09,280
uh

473
00:21:05,520 --> 00:21:13,440
his own details or if he's trying to uh

474
00:21:09,280 --> 00:21:13,440
view the details of some other user

475
00:21:13,760 --> 00:21:18,799
all right okay i missed a few

476
00:21:16,799 --> 00:21:20,400
things about broken access control what

477
00:21:18,799 --> 00:21:21,760
what could be the implication in this

478
00:21:20,400 --> 00:21:25,200
case

479
00:21:21,760 --> 00:21:28,400
all right uh depending upon the

480
00:21:25,200 --> 00:21:28,400
implementation and

481
00:21:28,480 --> 00:21:34,640
uh and and

482
00:21:31,520 --> 00:21:35,520
depending upon the implementation uh the

483
00:21:34,640 --> 00:21:39,200
impact could

484
00:21:35,520 --> 00:21:43,440
could vary and let's say if if

485
00:21:39,200 --> 00:21:43,919
if the uh if this this is a view only it

486
00:21:43,440 --> 00:21:46,640
is

487
00:21:43,919 --> 00:21:47,280
it still can leak a lot of information

488
00:21:46,640 --> 00:21:50,400
uh

489
00:21:47,280 --> 00:21:53,600
about the users let's say uh

490
00:21:50,400 --> 00:21:54,240
the user could just manipulate or temper

491
00:21:53,600 --> 00:21:58,158
the

492
00:21:54,240 --> 00:21:58,960
parameter ids to view details of all

493
00:21:58,159 --> 00:22:02,000
users

494
00:21:58,960 --> 00:22:05,520
stored in the applications database

495
00:22:02,000 --> 00:22:07,919
it could get even worse if if if

496
00:22:05,520 --> 00:22:09,760
if such kind of access control is

497
00:22:07,919 --> 00:22:10,080
missing while updating user information

498
00:22:09,760 --> 00:22:13,440
this

499
00:22:10,080 --> 00:22:16,960
this way an unauthorized user

500
00:22:13,440 --> 00:22:19,280
can update data

501
00:22:16,960 --> 00:22:21,679
of an another user of the same

502
00:22:19,280 --> 00:22:23,840
application which is

503
00:22:21,679 --> 00:22:25,760
sadly quite common

504
00:22:23,840 --> 00:22:30,000
[Music]

505
00:22:25,760 --> 00:22:30,000
in in applications today

506
00:22:32,720 --> 00:22:39,919
all right good old

507
00:22:35,919 --> 00:22:40,720
sql injection uh i think i really don't

508
00:22:39,919 --> 00:22:44,080
need to like

509
00:22:40,720 --> 00:22:47,840
dive into uh what is sql injection

510
00:22:44,080 --> 00:22:50,480
and what could go wrong here uh

511
00:22:47,840 --> 00:22:50,959
what can be done with sql injections or

512
00:22:50,480 --> 00:22:54,080
but

513
00:22:50,960 --> 00:22:57,679
i would still reiterate a few things

514
00:22:54,080 --> 00:23:01,120
about sql injection so why

515
00:22:57,679 --> 00:23:04,320
does it happen in the first place

516
00:23:01,120 --> 00:23:08,000
uh it's usually because uh of

517
00:23:04,320 --> 00:23:11,600
uh the lack of input

518
00:23:08,000 --> 00:23:14,559
sanitization input validation and

519
00:23:11,600 --> 00:23:14,559
an untrusted

520
00:23:15,039 --> 00:23:19,120
user input becomes part of developers

521
00:23:18,159 --> 00:23:22,559
sql

522
00:23:19,120 --> 00:23:25,918
query which can which

523
00:23:22,559 --> 00:23:29,280
an attacker can exploit to modify

524
00:23:25,919 --> 00:23:29,280
the data or

525
00:23:29,679 --> 00:23:35,520
retrieve the application data or

526
00:23:33,120 --> 00:23:36,639
sometimes if the database is

527
00:23:35,520 --> 00:23:39,679
misconfigured

528
00:23:36,640 --> 00:23:41,840
or is running under a

529
00:23:39,679 --> 00:23:42,799
higher privileged user this can also

530
00:23:41,840 --> 00:23:45,279
result in

531
00:23:42,799 --> 00:23:46,080
a complete compromise of the application

532
00:23:45,279 --> 00:23:50,000
server

533
00:23:46,080 --> 00:23:52,480
as well how it can be avoided it can be

534
00:23:50,000 --> 00:23:56,080
avoided in multiple ways and like

535
00:23:52,480 --> 00:23:59,120
we can use input validation

536
00:23:56,080 --> 00:24:03,360
we can use parameterized queries

537
00:23:59,120 --> 00:24:04,239
and we can use the source procedures but

538
00:24:03,360 --> 00:24:09,039
uh

539
00:24:04,240 --> 00:24:09,039
again those all have their own

540
00:24:09,360 --> 00:24:13,360
constraints while implementing so i'm

541
00:24:12,080 --> 00:24:16,720
just going to

542
00:24:13,360 --> 00:24:19,520
demonstrate a very trivial example where

543
00:24:16,720 --> 00:24:20,880
an inline theory was used and how it can

544
00:24:19,520 --> 00:24:24,639
be mitigated by

545
00:24:20,880 --> 00:24:24,640
using a parameterized query

546
00:24:29,679 --> 00:24:36,799
okay so here's uh

547
00:24:33,039 --> 00:24:40,559
here's an example code uh basically

548
00:24:36,799 --> 00:24:43,600
it's it's

549
00:24:40,559 --> 00:24:47,440
processing a user input

550
00:24:43,600 --> 00:24:51,279
and as you can see on line number 56

551
00:24:47,440 --> 00:24:54,320
there is no uh input validity

552
00:24:51,279 --> 00:24:58,960
performed on the id uh

553
00:24:54,320 --> 00:25:02,080
parameter value and this way tracker can

554
00:24:58,960 --> 00:25:06,080
terminate the developer

555
00:25:02,080 --> 00:25:08,799
theory and append his own query to

556
00:25:06,080 --> 00:25:09,840
extract data or modify the data whatever

557
00:25:08,799 --> 00:25:13,520
he wants to

558
00:25:09,840 --> 00:25:16,799
do so in order to mitigate this issue

559
00:25:13,520 --> 00:25:22,080
we can use prepared statements

560
00:25:16,799 --> 00:25:29,840
here's a simple example i'm sorry

561
00:25:22,080 --> 00:25:29,840
just hold on for a minute

562
00:25:33,520 --> 00:25:38,000
i'm really sorry guys that's that's my

563
00:25:40,840 --> 00:25:43,840
knees

564
00:25:49,279 --> 00:25:56,320
all right so we were on sql injection

565
00:25:53,039 --> 00:25:58,320
so this way if

566
00:25:56,320 --> 00:26:01,840
if the developer used a parameter

567
00:25:58,320 --> 00:26:05,840
security he could have prevented

568
00:26:01,840 --> 00:26:07,600
again if we

569
00:26:05,840 --> 00:26:10,320
at the end of the talk if we get enough

570
00:26:07,600 --> 00:26:12,719
time we will get into the demonstration

571
00:26:10,320 --> 00:26:12,720
as well

572
00:26:15,600 --> 00:26:20,639
template injection all right this is

573
00:26:18,559 --> 00:26:24,080
this is an interesting topic

574
00:26:20,640 --> 00:26:27,520
and what happens is

575
00:26:24,080 --> 00:26:29,760
uh nowadays we are used a lot of web

576
00:26:27,520 --> 00:26:33,200
applications are using templates

577
00:26:29,760 --> 00:26:38,559
template engines for for for a lot of

578
00:26:33,200 --> 00:26:41,600
uh data processing

579
00:26:38,559 --> 00:26:53,840
ah let me just

580
00:26:41,600 --> 00:26:53,840
give me

581
00:27:32,840 --> 00:27:35,840
hello

582
00:27:54,159 --> 00:27:58,480
all right sorry uh that was my knees

583
00:27:57,279 --> 00:28:01,520
again

584
00:27:58,480 --> 00:28:04,720
she just got up

585
00:28:01,520 --> 00:28:04,720
so you know the kids

586
00:28:05,919 --> 00:28:11,919
so we were discussing

587
00:28:09,279 --> 00:28:14,240
template injection all right so this

588
00:28:11,919 --> 00:28:15,279
this happens because uh an interested

589
00:28:14,240 --> 00:28:19,039
user input

590
00:28:15,279 --> 00:28:22,399
gets passed to the template engine

591
00:28:19,039 --> 00:28:25,360
and depending on the template engine

592
00:28:22,399 --> 00:28:26,158
there is there are a lot of

593
00:28:25,360 --> 00:28:29,199
possibilities

594
00:28:26,159 --> 00:28:30,159
and it can result in server side code

595
00:28:29,200 --> 00:28:33,120
execution

596
00:28:30,159 --> 00:28:34,880
and in some in some cases client-side

597
00:28:33,120 --> 00:28:38,158
code executions as well

598
00:28:34,880 --> 00:28:39,440
so how it can be avoided again it can be

599
00:28:38,159 --> 00:28:42,000
avoided by

600
00:28:39,440 --> 00:28:42,960
implementing some sort of white listing

601
00:28:42,000 --> 00:28:45,600
or

602
00:28:42,960 --> 00:28:46,640
input validation or you can implement

603
00:28:45,600 --> 00:28:50,879
rejects

604
00:28:46,640 --> 00:28:50,880
to avoid such issues and

605
00:28:51,520 --> 00:28:58,080
here is an illustration for example uh

606
00:28:54,880 --> 00:29:00,799
user input is passed to

607
00:28:58,080 --> 00:29:02,399
web application server and it it gets

608
00:29:00,799 --> 00:29:05,600
processed by

609
00:29:02,399 --> 00:29:07,840
the template engine it will

610
00:29:05,600 --> 00:29:08,719
send you back the results for in order

611
00:29:07,840 --> 00:29:11,840
to detect it

612
00:29:08,720 --> 00:29:12,559
an attacker would try to send some

613
00:29:11,840 --> 00:29:15,840
something like

614
00:29:12,559 --> 00:29:15,840
uh add the rate

615
00:29:16,080 --> 00:29:19,360
curly brackets and then some some

616
00:29:17,760 --> 00:29:21,679
mathematical operation and then

617
00:29:19,360 --> 00:29:23,520
it would it would check uh what's the

618
00:29:21,679 --> 00:29:27,039
response of the application

619
00:29:23,520 --> 00:29:29,679
if it gets evaluated if this

620
00:29:27,039 --> 00:29:30,640
seven static seven gets evaluated and

621
00:29:29,679 --> 00:29:34,320
that means that

622
00:29:30,640 --> 00:29:37,919
a template engine is in use and

623
00:29:34,320 --> 00:29:41,840
probably the input is not being

624
00:29:37,919 --> 00:29:41,840
validated properly

625
00:29:42,159 --> 00:29:48,799
so uh i borrowed this code

626
00:29:45,360 --> 00:29:52,240
from from internet and and i've

627
00:29:48,799 --> 00:29:54,158
clearly given incredits who actually

628
00:29:52,240 --> 00:29:57,919
wrote uh

629
00:29:54,159 --> 00:29:58,320
blog about this one uh i'm really sorry

630
00:29:57,919 --> 00:30:00,320
i

631
00:29:58,320 --> 00:30:01,360
i couldn't remember the name of the guy

632
00:30:00,320 --> 00:30:04,720
who who

633
00:30:01,360 --> 00:30:07,840
wrote this blog but i have mentioned

634
00:30:04,720 --> 00:30:11,120
his blog and and his github uh

635
00:30:07,840 --> 00:30:14,399
as well so basically the

636
00:30:11,120 --> 00:30:14,399
this code is

637
00:30:14,960 --> 00:30:23,600
an implementation of his code

638
00:30:19,679 --> 00:30:26,799
but here we what we are doing is as as

639
00:30:23,600 --> 00:30:30,158
basically it's it's uh taking input

640
00:30:26,799 --> 00:30:32,000
from the user and the

641
00:30:30,159 --> 00:30:33,919
template engine is processing the user

642
00:30:32,000 --> 00:30:37,679
input without

643
00:30:33,919 --> 00:30:40,000
any any sort of uh

644
00:30:37,679 --> 00:30:41,679
input validation at all so here we can

645
00:30:40,000 --> 00:30:45,039
see the string

646
00:30:41,679 --> 00:30:49,279
name gets assigned from collections

647
00:30:45,039 --> 00:30:52,320
which is passed from the client end

648
00:30:49,279 --> 00:30:52,320
to this

649
00:30:52,399 --> 00:30:55,520
code and then

650
00:30:56,720 --> 00:31:03,600
if we if we basically

651
00:31:00,799 --> 00:31:05,039
filter out the vectors that we could

652
00:31:03,600 --> 00:31:09,439
have avoided

653
00:31:05,039 --> 00:31:09,440
and the server side template injections

654
00:31:11,760 --> 00:31:17,760
all right another

655
00:31:14,960 --> 00:31:20,399
class of work is command injection it is

656
00:31:17,760 --> 00:31:22,799
again caused by

657
00:31:20,399 --> 00:31:23,840
the lack of input validation in this

658
00:31:22,799 --> 00:31:26,080
case uh

659
00:31:23,840 --> 00:31:28,080
what's happening in the back end is the

660
00:31:26,080 --> 00:31:32,960
user inputs

661
00:31:28,080 --> 00:31:36,480
becomes part of

662
00:31:32,960 --> 00:31:39,120
operating system commands as an argument

663
00:31:36,480 --> 00:31:41,120
in most cases sometimes it is used to

664
00:31:39,120 --> 00:31:44,840
launch a specific command or

665
00:31:41,120 --> 00:31:47,279
run a specific command so what happened

666
00:31:44,840 --> 00:31:51,039
is uh for example this

667
00:31:47,279 --> 00:31:53,840
uh let's look at this one so

668
00:31:51,039 --> 00:31:55,279
there is a page where you can go and

669
00:31:53,840 --> 00:31:58,480
type an ip address

670
00:31:55,279 --> 00:31:59,200
or type a domain name and and the server

671
00:31:58,480 --> 00:32:01,840
will

672
00:31:59,200 --> 00:32:03,200
go and try to ping that domain or ip

673
00:32:01,840 --> 00:32:05,279
address

674
00:32:03,200 --> 00:32:06,240
but if the user input is not validated

675
00:32:05,279 --> 00:32:11,120
properly what

676
00:32:06,240 --> 00:32:13,840
an attacker would do is he would append

677
00:32:11,120 --> 00:32:14,239
special characters or windows operating

678
00:32:13,840 --> 00:32:15,918
or

679
00:32:14,240 --> 00:32:17,279
operating system meta corrector that are

680
00:32:15,919 --> 00:32:21,279
used to

681
00:32:17,279 --> 00:32:24,000
terminate or or indicate that there is a

682
00:32:21,279 --> 00:32:24,000
new command

683
00:32:24,720 --> 00:32:28,240
for example in this case an attacker

684
00:32:27,120 --> 00:32:31,279
could simply implement

685
00:32:28,240 --> 00:32:34,640
ampersand sign and then uh type

686
00:32:31,279 --> 00:32:42,159
another command to execute a calculator

687
00:32:34,640 --> 00:32:46,080
or maybe a powershell reversal

688
00:32:42,159 --> 00:32:46,080
so how would it look like

689
00:32:46,240 --> 00:32:49,679
in terms of code so here is a very

690
00:32:47,919 --> 00:32:52,240
simple example this

691
00:32:49,679 --> 00:32:53,279
function is basically processing user

692
00:32:52,240 --> 00:32:56,720
input

693
00:32:53,279 --> 00:33:00,000
as we can see the variable ip

694
00:32:56,720 --> 00:33:00,880
gets assigned the value from uh which is

695
00:33:00,000 --> 00:33:03,760
submitted from

696
00:33:00,880 --> 00:33:04,960
from from the user end and since there

697
00:33:03,760 --> 00:33:08,240
was no

698
00:33:04,960 --> 00:33:12,240
validation it could uh easily result in

699
00:33:08,240 --> 00:33:15,919
code execution at line number 48

700
00:33:12,240 --> 00:33:19,919
so how can we fix this

701
00:33:15,919 --> 00:33:23,600
uh we could have like fix it easily by

702
00:33:19,919 --> 00:33:27,039
implementing a regex and

703
00:33:23,600 --> 00:33:29,678
and a white list which basically says

704
00:33:27,039 --> 00:33:31,440
allow all character from a to c and 0 to

705
00:33:29,679 --> 00:33:34,240
9 dot and dash

706
00:33:31,440 --> 00:33:34,240
because you

707
00:33:35,200 --> 00:33:41,679
have numbers and

708
00:33:38,559 --> 00:33:45,678
uh domain names

709
00:33:41,679 --> 00:33:49,519
usually contains dots and names and

710
00:33:45,679 --> 00:33:51,840
dashes i'm not talking about ipv6

711
00:33:49,519 --> 00:33:54,720
here otherwise we could have added

712
00:33:51,840 --> 00:33:54,720
columns as well

713
00:34:00,960 --> 00:34:07,360
all right xml injections

714
00:34:04,000 --> 00:34:10,879
uh this one is uh interesting

715
00:34:07,360 --> 00:34:14,480
uh class of work uh there are

716
00:34:10,879 --> 00:34:18,839
a lot of libraries that provide

717
00:34:14,480 --> 00:34:22,399
xml data processing we will look at one

718
00:34:18,839 --> 00:34:26,320
specific implementation

719
00:34:22,399 --> 00:34:30,239
and we will see how easy it is to fix

720
00:34:26,320 --> 00:34:32,960
that xml issue first of all why

721
00:34:30,239 --> 00:34:34,078
why does it happen it happens because

722
00:34:32,960 --> 00:34:37,119
the user

723
00:34:34,079 --> 00:34:39,839
uh the parser uh

724
00:34:37,119 --> 00:34:41,679
the parser are not configured properly

725
00:34:39,839 --> 00:34:43,759
or they are allowed to load external

726
00:34:41,679 --> 00:34:46,639
entities

727
00:34:43,760 --> 00:34:47,200
which which results in in information

728
00:34:46,639 --> 00:34:49,599
leaks

729
00:34:47,199 --> 00:34:50,799
and denial of service attacks or

730
00:34:49,599 --> 00:34:54,159
resource uh

731
00:34:50,800 --> 00:34:58,320
resource draining attacks and cpu

732
00:34:54,159 --> 00:34:58,320
cpu hogging issues things like these

733
00:34:58,400 --> 00:35:04,240
how we can avoid these kind of issues we

734
00:35:02,079 --> 00:35:07,440
can

735
00:35:04,240 --> 00:35:11,040
disable dtd loadings and

736
00:35:07,440 --> 00:35:14,480
use safer implementation methods

737
00:35:11,040 --> 00:35:17,359
uh it's time to like

738
00:35:14,480 --> 00:35:18,720
quickly dive into the code as well and

739
00:35:17,359 --> 00:35:21,279
and we will quickly look

740
00:35:18,720 --> 00:35:22,160
at how what a vulnerable code looks like

741
00:35:21,280 --> 00:35:25,280
and how we can

742
00:35:22,160 --> 00:35:28,480
fix it but again

743
00:35:25,280 --> 00:35:31,520
just before we uh pop

744
00:35:28,480 --> 00:35:34,000
into the code let's look at

745
00:35:31,520 --> 00:35:35,759
a basic illustration i i don't know but

746
00:35:34,000 --> 00:35:39,760
i i just

747
00:35:35,760 --> 00:35:42,880
love creating these user and web app

748
00:35:39,760 --> 00:35:46,880
web server interactions so basically

749
00:35:42,880 --> 00:35:50,079
here's an example user is providing

750
00:35:46,880 --> 00:35:51,839
some data and servers processors

751
00:35:50,079 --> 00:35:53,839
processing it and sending back the

752
00:35:51,839 --> 00:35:57,279
results but

753
00:35:53,839 --> 00:35:58,880
if the user tries to introduce his own

754
00:35:57,280 --> 00:36:02,800
entities and and

755
00:35:58,880 --> 00:36:04,960
send send to the server and if

756
00:36:02,800 --> 00:36:07,040
the parser is not configured properly it

757
00:36:04,960 --> 00:36:09,359
would it would uh

758
00:36:07,040 --> 00:36:11,119
process all those entities external

759
00:36:09,359 --> 00:36:14,480
entities or

760
00:36:11,119 --> 00:36:17,599
and and send back those as as

761
00:36:14,480 --> 00:36:17,599
as part of the result

762
00:36:18,000 --> 00:36:21,440
uh in this case we we are trying to

763
00:36:20,960 --> 00:36:25,359
access

764
00:36:21,440 --> 00:36:28,160
xc host files and then

765
00:36:25,359 --> 00:36:28,560
it can lead to information disclosure uh

766
00:36:28,160 --> 00:36:30,879
if

767
00:36:28,560 --> 00:36:31,680
if that was a real-world attack attacker

768
00:36:30,880 --> 00:36:35,599
would

769
00:36:31,680 --> 00:36:39,440
probably try to read your web.xml

770
00:36:35,599 --> 00:36:42,880
i mean sorry web.config files

771
00:36:39,440 --> 00:36:44,560
or maybe some backup files

772
00:36:42,880 --> 00:36:45,920
there are a lot of things that can go

773
00:36:44,560 --> 00:36:50,078
wrong

774
00:36:45,920 --> 00:36:50,079
in case of information disclosure

775
00:36:52,839 --> 00:36:59,759
so again this code was uh

776
00:36:55,920 --> 00:37:03,040
taken from utah and

777
00:36:59,760 --> 00:37:06,800
modified it and modified but

778
00:37:03,040 --> 00:37:09,200
i would like to mention where i where i

779
00:37:06,800 --> 00:37:10,079
actually stumbled upon the code and then

780
00:37:09,200 --> 00:37:13,359
uh

781
00:37:10,079 --> 00:37:17,599
modified it according to my needs

782
00:37:13,359 --> 00:37:20,078
so uh let's look into

783
00:37:17,599 --> 00:37:22,560
what uh just wanted to give a quick

784
00:37:20,079 --> 00:37:26,320
update i know that you're winding down

785
00:37:22,560 --> 00:37:28,160
um we did have one question from the

786
00:37:26,320 --> 00:37:29,760
feminine from an attendee i was

787
00:37:28,160 --> 00:37:32,560
wondering if you had time to take that

788
00:37:29,760 --> 00:37:35,440
before you wrapped up about

789
00:37:32,560 --> 00:37:36,078
the presentation yeah so the question

790
00:37:35,440 --> 00:37:39,760
was what

791
00:37:36,079 --> 00:37:41,440
tools are you using to test uh when you

792
00:37:39,760 --> 00:37:44,000
when you start to try to break net

793
00:37:41,440 --> 00:37:47,599
applications

794
00:37:44,000 --> 00:37:50,960
all right so uh from from

795
00:37:47,599 --> 00:37:53,599
the testing perspective uh i

796
00:37:50,960 --> 00:37:56,320
basically use verb suit and and and a

797
00:37:53,599 --> 00:38:00,400
few extinctions and that's more than

798
00:37:56,320 --> 00:38:03,680
enough to test web applications yeah

799
00:38:00,400 --> 00:38:07,359
and if you are looking

800
00:38:03,680 --> 00:38:10,879
into the code site and

801
00:38:07,359 --> 00:38:14,240
visual studio along with

802
00:38:10,880 --> 00:38:18,560
some code scanning tools but again

803
00:38:14,240 --> 00:38:21,359
that i won't go into the static scanning

804
00:38:18,560 --> 00:38:24,078
and solutions because the law falls

805
00:38:21,359 --> 00:38:24,078
positive and

806
00:38:24,240 --> 00:38:28,160
well that's that's another debate but

807
00:38:26,400 --> 00:38:32,560
typically i use burp suit

808
00:38:28,160 --> 00:38:35,279
for for the assessment

809
00:38:32,560 --> 00:38:36,320
and if if you are trying to recover the

810
00:38:35,280 --> 00:38:40,400
code then

811
00:38:36,320 --> 00:38:44,000
then dot peak and telricks

812
00:38:40,400 --> 00:38:45,200
have great tools to recover the source

813
00:38:44,000 --> 00:38:46,880
code and

814
00:38:45,200 --> 00:38:49,439
you can do the manual code auditing

815
00:38:46,880 --> 00:38:49,440
there as well

816
00:38:51,760 --> 00:39:00,160
all right so we were at xml attacks

817
00:38:56,000 --> 00:39:03,040
right and

818
00:39:00,160 --> 00:39:05,359
right after example attacks uh we were

819
00:39:03,040 --> 00:39:05,359
looking

820
00:39:05,599 --> 00:39:12,880
into this dummy code so this

821
00:39:08,960 --> 00:39:16,480
code is vulnerable to xml attack and

822
00:39:12,880 --> 00:39:19,200
just one line of change

823
00:39:16,480 --> 00:39:21,359
one one minor change could have uh

824
00:39:19,200 --> 00:39:24,879
mitigated this issue if if

825
00:39:21,359 --> 00:39:25,839
we set the dot xml resolver to null it

826
00:39:24,880 --> 00:39:28,640
could have prevented

827
00:39:25,839 --> 00:39:29,440
xml in external entity injections

828
00:39:28,640 --> 00:39:32,078
attacks

829
00:39:29,440 --> 00:39:32,079
in this case

830
00:39:36,320 --> 00:39:43,119
this is this is one of the

831
00:39:39,920 --> 00:39:46,000
most prevalent issue again it happens

832
00:39:43,119 --> 00:39:46,000
because of uh

833
00:39:46,560 --> 00:39:52,960
lack of the input validation and

834
00:39:49,760 --> 00:39:55,520
this this is not as safer as

835
00:39:52,960 --> 00:39:57,359
the server-side code execution but it is

836
00:39:55,520 --> 00:40:02,000
still severe and has been

837
00:39:57,359 --> 00:40:05,839
used in a lot of high profile attacks

838
00:40:02,000 --> 00:40:08,079
as well we will quickly look how

839
00:40:05,839 --> 00:40:10,960
uh it looks like and so an attacker

840
00:40:08,079 --> 00:40:12,800
basically sends a malicious script to

841
00:40:10,960 --> 00:40:15,440
the application application processes

842
00:40:12,800 --> 00:40:18,079
it and it stores it and when the

843
00:40:15,440 --> 00:40:22,560
attacker visits that same page and it

844
00:40:18,079 --> 00:40:25,920
the scripts get executed in the user's

845
00:40:22,560 --> 00:40:29,040
browser context and the data script can

846
00:40:25,920 --> 00:40:30,319
send users cookies to attacker or

847
00:40:29,040 --> 00:40:33,680
perform

848
00:40:30,319 --> 00:40:36,160
attacks or perform different kind of

849
00:40:33,680 --> 00:40:39,200
attacks for example internal port

850
00:40:36,160 --> 00:40:42,399
system scanning or maybe

851
00:40:39,200 --> 00:40:45,118
perform actions in the applications hi

852
00:40:42,400 --> 00:40:46,880
sorry how we can mitigate it yeah sorry

853
00:40:45,119 --> 00:40:50,160
to interrupt

854
00:40:46,880 --> 00:40:53,040
m is like you know you're over time so

855
00:40:50,160 --> 00:40:55,040
all right yeah just give me two more

856
00:40:53,040 --> 00:40:57,359
minutes so i will just wrap this up

857
00:40:55,040 --> 00:40:59,200
okay uh i'm just i just want to talk

858
00:40:57,359 --> 00:41:01,680
about the

859
00:40:59,200 --> 00:41:02,319
uh communication of crosstalk scripting

860
00:41:01,680 --> 00:41:05,598
so

861
00:41:02,319 --> 00:41:08,800
i hope you don't mind yeah thank okay

862
00:41:05,599 --> 00:41:09,839
so how how we can mitigate it uh the

863
00:41:08,800 --> 00:41:13,599
medication is quite

864
00:41:09,839 --> 00:41:17,279
uh simple in this case

865
00:41:13,599 --> 00:41:21,839
we can use

866
00:41:17,280 --> 00:41:21,839
uh we can use uh

867
00:41:22,319 --> 00:41:28,720
do not use html dot raw methods while

868
00:41:25,680 --> 00:41:30,960
echoing out the user input and and and

869
00:41:28,720 --> 00:41:34,078
use

870
00:41:30,960 --> 00:41:37,119
input input validation again

871
00:41:34,079 --> 00:41:39,280
html provides uh great mitigations

872
00:41:37,119 --> 00:41:41,200
against crossfire scripting attack but

873
00:41:39,280 --> 00:41:43,760
if the user input is landing somewhere

874
00:41:41,200 --> 00:41:47,839
in in html

875
00:41:43,760 --> 00:41:48,800
attribute it won't save you from from

876
00:41:47,839 --> 00:41:51,920
those attacks

877
00:41:48,800 --> 00:41:55,520
so always be careful

878
00:41:51,920 --> 00:42:00,400
while using html dot raw

879
00:41:55,520 --> 00:42:00,400
all right that's that's all i have to

880
00:42:00,839 --> 00:42:07,200
share

881
00:42:03,440 --> 00:42:07,200
any questions so

