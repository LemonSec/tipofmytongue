1
00:00:02,650 --> 00:00:07,580
it's your entire IT staff outsourced

2
00:00:05,689 --> 00:00:09,349
twenty-somethings is your cloud

3
00:00:07,580 --> 00:00:11,420
environment architected by a thought

4
00:00:09,349 --> 00:00:13,670
leaders fevered dream have you swallowed

5
00:00:11,420 --> 00:00:15,350
heaping gallons of the DevOps kool-aid

6
00:00:13,670 --> 00:00:18,050
only to find out that you're one

7
00:00:15,350 --> 00:00:21,050
msconfig away from losing everything Oh

8
00:00:18,050 --> 00:00:25,789
Sean Marshall here too and I invite you

9
00:00:21,050 --> 00:00:27,830
to flex seal your CIC D pipeline if

10
00:00:25,789 --> 00:00:30,289
you're interested in diving deeper into

11
00:00:27,830 --> 00:00:35,179
this topic my entire slide deck is on

12
00:00:30,289 --> 00:00:38,089
tiny si slash flex seal there's entire

13
00:00:35,179 --> 00:00:41,629
slide deck is also on download slide

14
00:00:38,089 --> 00:00:46,519
channel and slack so feel free to go

15
00:00:41,629 --> 00:00:50,239
either way and now transition to the

16
00:00:46,519 --> 00:00:54,170
about Me slide so three things I do i

17
00:00:50,239 --> 00:00:56,358
code I teach I hack so I'm a developer

18
00:00:54,170 --> 00:00:58,940
and cybersecurity consultant for secure

19
00:00:56,359 --> 00:01:01,819
or ghen called secure ideas we do

20
00:00:58,940 --> 00:01:04,399
penetration testing red teaming and we

21
00:01:01,819 --> 00:01:07,580
focus heavily on web applications and

22
00:01:04,400 --> 00:01:09,860
cloud infrastructure assessments we also

23
00:01:07,580 --> 00:01:10,340
do network tests and things like that as

24
00:01:09,860 --> 00:01:13,850
well

25
00:01:10,340 --> 00:01:17,830
and we also do continue continuous

26
00:01:13,850 --> 00:01:24,289
monitoring and scanning using AWS

27
00:01:17,830 --> 00:01:27,259
there's there is a full professional bio

28
00:01:24,290 --> 00:01:30,440
of me in the link in the slide deck

29
00:01:27,260 --> 00:01:33,440
below but I don't know about you I just

30
00:01:30,440 --> 00:01:34,610
want to jump into the topic so here's

31
00:01:33,440 --> 00:01:36,950
the ground that we're going to cover

32
00:01:34,610 --> 00:01:39,530
first I'll define what a sea ICD

33
00:01:36,950 --> 00:01:41,540
pipeline is and then we'll focus on

34
00:01:39,530 --> 00:01:44,900
three strategies for funneling security

35
00:01:41,540 --> 00:01:46,940
throughout the whole process if you do

36
00:01:44,900 --> 00:01:49,550
not have any idea what I'm talking about

37
00:01:46,940 --> 00:01:51,500
what Flexsteel just Google that out real

38
00:01:49,550 --> 00:01:55,789
quick just watch it after the talk

39
00:01:51,500 --> 00:01:57,770
you're in very good tree so the three

40
00:01:55,790 --> 00:02:01,280
strategies we'll be focusing on are

41
00:01:57,770 --> 00:02:04,039
based on flex seal family a product flex

42
00:02:01,280 --> 00:02:06,500
glue will flex glue different components

43
00:02:04,040 --> 00:02:09,379
together using cloud formation flex tape

44
00:02:06,500 --> 00:02:11,840
our packages and dependencies while

45
00:02:09,378 --> 00:02:13,879
we're building in the pipeline and we'll

46
00:02:11,840 --> 00:02:16,490
also flex seal the build containers that

47
00:02:13,879 --> 00:02:23,870
we'll be using and have a demo demo

48
00:02:16,490 --> 00:02:26,420
straining all of this so ACI CD pipeline

49
00:02:23,870 --> 00:02:28,250
is a system that allows multiple

50
00:02:26,420 --> 00:02:30,470
versions of the source code to be

51
00:02:28,250 --> 00:02:33,080
integrated built and rated for

52
00:02:30,470 --> 00:02:35,720
deployment in a perfect world we get

53
00:02:33,080 --> 00:02:38,360
from repo to production in seconds in

54
00:02:35,720 --> 00:02:42,770
the real world we either end up with

55
00:02:38,360 --> 00:02:46,430
something that's either painfully slow

56
00:02:42,770 --> 00:02:48,170
or something that forces out way too

57
00:02:46,430 --> 00:02:50,990
much information at once

58
00:02:48,170 --> 00:02:53,690
the focus of this talk is to bake in as

59
00:02:50,990 --> 00:02:56,540
much security as we can without

60
00:02:53,690 --> 00:02:58,910
sacrificing efficiency or availability

61
00:02:56,540 --> 00:03:02,720
this is the kind of stuff that we need

62
00:02:58,910 --> 00:03:05,870
to integrate and existing systems so

63
00:03:02,720 --> 00:03:08,090
that tagline it works under it even

64
00:03:05,870 --> 00:03:09,470
works underwater should apply to all of

65
00:03:08,090 --> 00:03:14,090
these strategies that we're going to

66
00:03:09,470 --> 00:03:17,060
talk about there's a lot of tooling

67
00:03:14,090 --> 00:03:20,120
available in this space so like Travis

68
00:03:17,060 --> 00:03:22,910
Jenkins get lab and a myriad of other

69
00:03:20,120 --> 00:03:25,940
players and this talk will be centering

70
00:03:22,910 --> 00:03:28,010
around code pipeline why because this is

71
00:03:25,940 --> 00:03:33,109
a tool I'm most familiar with and

72
00:03:28,010 --> 00:03:35,750
therefore it is perfect but now it's a

73
00:03:33,110 --> 00:03:38,900
decent tool because it's relatively easy

74
00:03:35,750 --> 00:03:41,900
to setup and it allows you to automate

75
00:03:38,900 --> 00:03:44,360
build and deployment processes this can

76
00:03:41,900 --> 00:03:50,420
be as simple as a two-step employment

77
00:03:44,360 --> 00:03:53,000
for ns3 bucket or it can be as convolute

78
00:03:50,420 --> 00:04:00,109
it can be as convoluted as you would

79
00:03:53,000 --> 00:04:02,360
like and when you use code pipeline you

80
00:04:00,110 --> 00:04:05,000
will get temporary access to a build

81
00:04:02,360 --> 00:04:08,420
container with the AWS CLI installed

82
00:04:05,000 --> 00:04:10,160
bash and now going internet access the

83
00:04:08,420 --> 00:04:13,100
other tools that we will discuss will

84
00:04:10,160 --> 00:04:17,358
fit neatly in this but first we'll think

85
00:04:13,100 --> 00:04:19,310
we'll need an example now imagine for a

86
00:04:17,358 --> 00:04:22,719
second you're building an online portal

87
00:04:19,310 --> 00:04:22,720
and it's going to be

88
00:04:23,690 --> 00:04:28,830
so you'll deploy the client-side

89
00:04:26,280 --> 00:04:30,750
application to an s3 bucket all the

90
00:04:28,830 --> 00:04:33,659
requests will be handled by lambda

91
00:04:30,750 --> 00:04:36,780
functions grouped under arrest-- API to

92
00:04:33,660 --> 00:04:39,110
find an API gateway and user information

93
00:04:36,780 --> 00:04:42,809
and user group will be distort in

94
00:04:39,110 --> 00:04:45,630
DynamoDB now each one of those lambdas

95
00:04:42,810 --> 00:04:46,520
will need to access different api's and

96
00:04:45,630 --> 00:04:49,320
other

97
00:04:46,520 --> 00:04:53,310
AWS resources at different levels of

98
00:04:49,320 --> 00:04:55,680
authorization depending on the user the

99
00:04:53,310 --> 00:04:59,220
authorization level of these are making

100
00:04:55,680 --> 00:05:06,419
the request does that sound convoluted

101
00:04:59,220 --> 00:05:08,310
to you trust me you have no idea but

102
00:05:06,419 --> 00:05:12,659
these are the types of applications

103
00:05:08,310 --> 00:05:15,240
people are building nowadays so it's

104
00:05:12,660 --> 00:05:17,940
perfectly normal to have a cloud native

105
00:05:15,240 --> 00:05:20,910
application that speaks to dozens of

106
00:05:17,940 --> 00:05:24,090
surfaces now the question is how do we

107
00:05:20,910 --> 00:05:26,430
tie all this stuff together how do we do

108
00:05:24,090 --> 00:05:29,070
so securely we could we could have

109
00:05:26,430 --> 00:05:31,800
engineers creating things like through

110
00:05:29,070 --> 00:05:34,020
the console manually but that process is

111
00:05:31,800 --> 00:05:36,060
error-prone and there are way too many

112
00:05:34,020 --> 00:05:38,310
opportunities for mistakes here and

113
00:05:36,060 --> 00:05:42,510
there so we need to tie things together

114
00:05:38,310 --> 00:05:46,860
cohesively and the first fundamentals of

115
00:05:42,510 --> 00:05:50,610
that is understanding I am in AWS so

116
00:05:46,860 --> 00:05:53,190
here's the crash course I am or identity

117
00:05:50,610 --> 00:05:55,349
access management has to do with users

118
00:05:53,190 --> 00:05:58,110
or entities acting on user's behalf

119
00:05:55,349 --> 00:06:01,409
there are hours of content to go into

120
00:05:58,110 --> 00:06:03,330
each one of the topics that we discuss

121
00:06:01,410 --> 00:06:06,450
here but we'll stick to a general

122
00:06:03,330 --> 00:06:11,039
overview for now users and groups are

123
00:06:06,450 --> 00:06:16,440
self-explanatory right we'll be focusing

124
00:06:11,039 --> 00:06:20,400
most of our definitions on we'll be

125
00:06:16,440 --> 00:06:25,440
focusing most of our definitions on I am

126
00:06:20,400 --> 00:06:28,590
roles and I am policies so let's start

127
00:06:25,440 --> 00:06:30,500
with an example I'm a user in my AWS

128
00:06:28,590 --> 00:06:33,119
environment and I have two roles as a

129
00:06:30,500 --> 00:06:35,020
developer I have access to source code

130
00:06:33,120 --> 00:06:38,680
and whether it's

131
00:06:35,020 --> 00:06:42,000
in github or eight or AWS code commits

132
00:06:38,680 --> 00:06:43,840
the Amazon based solution as a

133
00:06:42,000 --> 00:06:46,450
consultant and as part of that

134
00:06:43,840 --> 00:06:50,289
consulting world I also have permission

135
00:06:46,450 --> 00:06:55,810
to spend up an ec2 ec2 instance to crack

136
00:06:50,290 --> 00:07:00,340
passwords so that makes sense the roles

137
00:06:55,810 --> 00:07:03,370
are difference s of one or more policies

138
00:07:00,340 --> 00:07:06,340
each one of these as JSON documents

139
00:07:03,370 --> 00:07:13,060
specifying what a user can and when a

140
00:07:06,340 --> 00:07:16,750
user cannot do so if you now not only

141
00:07:13,060 --> 00:07:20,020
our users this not just users in groups

142
00:07:16,750 --> 00:07:24,790
that are aw that are can be defined with

143
00:07:20,020 --> 00:07:28,020
AWS rules and policies AWS services have

144
00:07:24,790 --> 00:07:31,510
their own rules and their own policies

145
00:07:28,020 --> 00:07:36,820
so for example in the serverless web app

146
00:07:31,510 --> 00:07:40,330
that we discussed before the pipeline is

147
00:07:36,820 --> 00:07:43,300
has its own role and part of that role

148
00:07:40,330 --> 00:07:46,960
it needs permission to access github and

149
00:07:43,300 --> 00:07:50,350
s3 and the permissions needed to build

150
00:07:46,960 --> 00:07:53,219
the source code or do n deploy it in the

151
00:07:50,350 --> 00:07:55,840
cloud if there's a cloud formation stack

152
00:07:53,220 --> 00:07:57,760
if there's a confirmation template

153
00:07:55,840 --> 00:08:01,539
embedded more on that later

154
00:07:57,760 --> 00:08:04,240
and of course s3 has its own special set

155
00:08:01,540 --> 00:08:06,960
of policies called bucket policies but

156
00:08:04,240 --> 00:08:09,970
that's out of scope for this talk

157
00:08:06,960 --> 00:08:12,520
messing up on your IM rules and policies

158
00:08:09,970 --> 00:08:14,740
can make your AWS environment and secure

159
00:08:12,520 --> 00:08:17,740
and you can also mess up your i''m roles

160
00:08:14,740 --> 00:08:20,800
and give services access that they don't

161
00:08:17,740 --> 00:08:24,160
need so in the capital one breach for

162
00:08:20,800 --> 00:08:27,850
example then the attacker uses C surf to

163
00:08:24,160 --> 00:08:29,740
get on the ec2 instance she was able to

164
00:08:27,850 --> 00:08:31,900
query the permissions that the ec2

165
00:08:29,740 --> 00:08:35,110
instance had by accessing the manatee

166
00:08:31,900 --> 00:08:38,380
that accessing the metadata so she's

167
00:08:35,110 --> 00:08:40,960
like oh the server has full s3 access

168
00:08:38,380 --> 00:08:43,809
well why don't I just dump the data for

169
00:08:40,960 --> 00:08:47,860
all 300 buckets and see what pops up

170
00:08:43,809 --> 00:08:48,430
there so if Capital One and exercise the

171
00:08:47,860 --> 00:08:51,279
principle

172
00:08:48,430 --> 00:08:53,620
of lease privilege making sure that the

173
00:08:51,279 --> 00:08:55,930
policies in line the policies and role

174
00:08:53,620 --> 00:08:58,690
attached to the services only have

175
00:08:55,930 --> 00:09:01,000
access to the things that they need then

176
00:08:58,690 --> 00:09:04,630
the breach wouldn't have nearly as much

177
00:09:01,000 --> 00:09:08,230
damage so secure use about so secure use

178
00:09:04,630 --> 00:09:14,740
of AWS involves mastering I am roles and

179
00:09:08,230 --> 00:09:16,000
I am policies here's a reality here's a

180
00:09:14,740 --> 00:09:19,600
reality

181
00:09:16,000 --> 00:09:22,360
bit of reality most of your code is

182
00:09:19,600 --> 00:09:23,980
written by someone else everything as a

183
00:09:22,360 --> 00:09:27,490
loose collection of parts stuck together

184
00:09:23,980 --> 00:09:30,130
we're talking API is micro services

185
00:09:27,490 --> 00:09:32,709
libraries open source and legacy clone

186
00:09:30,130 --> 00:09:34,899
and cloud native applications are no

187
00:09:32,709 --> 00:09:37,750
different not only do they have all of

188
00:09:34,899 --> 00:09:42,279
those things they also have AWS services

189
00:09:37,750 --> 00:09:44,649
cobbled together as well and so this is

190
00:09:42,279 --> 00:09:47,230
where you need to flex slew things

191
00:09:44,649 --> 00:09:49,930
together these is where cloud formation

192
00:09:47,230 --> 00:09:52,390
templates come in so you can think of

193
00:09:49,930 --> 00:09:54,250
CloudFormation template as a blueprint

194
00:09:52,390 --> 00:09:56,980
for provisioning cloud services and

195
00:09:54,250 --> 00:10:00,190
infrastructure think of it like a UML

196
00:09:56,980 --> 00:10:04,450
diagram except this document actually

197
00:10:00,190 --> 00:10:07,089
helps you create working software so you

198
00:10:04,450 --> 00:10:08,920
can push a button and deploy an entire

199
00:10:07,089 --> 00:10:11,800
stack for an application based on a

200
00:10:08,920 --> 00:10:14,589
single JSON file you can provision most

201
00:10:11,800 --> 00:10:18,550
AWS services including I am roles and

202
00:10:14,589 --> 00:10:20,800
policies using information templates so

203
00:10:18,550 --> 00:10:24,760
if you template your entire text stack

204
00:10:20,800 --> 00:10:28,750
you can replicate modify and version

205
00:10:24,760 --> 00:10:32,290
control it and by doing that you can get

206
00:10:28,750 --> 00:10:33,880
something a bit more elegant so if we're

207
00:10:32,290 --> 00:10:40,990
going to be gluing things together

208
00:10:33,880 --> 00:10:42,850
anyway let's flex glue it together now

209
00:10:40,990 --> 00:10:46,029
here's a bit of homework for everyone

210
00:10:42,850 --> 00:10:48,820
that has node in their stack you can use

211
00:10:46,029 --> 00:10:51,220
the package manager or to audit your

212
00:10:48,820 --> 00:10:54,070
dependencies for vulnerabilities you can

213
00:10:51,220 --> 00:10:56,110
do this with NPM on it or you are not it

214
00:10:54,070 --> 00:10:59,650
if you're a hipster trash like me and

215
00:10:56,110 --> 00:11:00,630
there's several tools that could do the

216
00:10:59,650 --> 00:11:04,040
job like sneeze

217
00:11:00,630 --> 00:11:07,140
and github stupenda bot but this is free

218
00:11:04,040 --> 00:11:10,290
you don't have to install anything extra

219
00:11:07,140 --> 00:11:14,730
and there's no con figs that you have to

220
00:11:10,290 --> 00:11:17,790
mess with often you'll find that these

221
00:11:14,730 --> 00:11:19,800
simple tests produce nothing you all

222
00:11:17,790 --> 00:11:21,480
your vulgar built all your dependencies

223
00:11:19,800 --> 00:11:25,260
are up to date and they don't have any

224
00:11:21,480 --> 00:11:27,840
active vulnerabilities but sometimes you

225
00:11:25,260 --> 00:11:34,500
get a laundry list of vulnerabilities

226
00:11:27,840 --> 00:11:37,680
ranging from low to critical so a lot

227
00:11:34,500 --> 00:11:41,520
this tooling is available in c-sharp

228
00:11:37,680 --> 00:11:45,540
Java Go and many other languages and a

229
00:11:41,520 --> 00:11:47,370
lot of tooling is of is open source now

230
00:11:45,540 --> 00:11:51,780
if you want to fix some of these

231
00:11:47,370 --> 00:11:55,500
problems we can just tack that on the

232
00:11:51,780 --> 00:11:57,990
end now never not all patches will be

233
00:11:55,500 --> 00:12:01,230
easy some will have breaking changes but

234
00:11:57,990 --> 00:12:03,270
a lot of patches are just three words on

235
00:12:01,230 --> 00:12:06,750
the command line this can be done in an

236
00:12:03,270 --> 00:12:09,840
afternoon on the staging amp or it can

237
00:12:06,750 --> 00:12:11,910
be done by one person over a course of a

238
00:12:09,840 --> 00:12:14,310
week if there are breaking changes

239
00:12:11,910 --> 00:12:16,490
rather than spending the time and money

240
00:12:14,310 --> 00:12:19,439
to get your red team to point neces

241
00:12:16,490 --> 00:12:22,710
point the SAST and DAST tools that may

242
00:12:19,440 --> 00:12:24,930
not even work or burp suite and other

243
00:12:22,710 --> 00:12:28,320
tools at the web apps you can eliminate

244
00:12:24,930 --> 00:12:31,680
and detect a lot of the look hanging

245
00:12:28,320 --> 00:12:34,530
fruit in the pipeline itself so you can

246
00:12:31,680 --> 00:12:39,449
fix leaks in your dependency by patching

247
00:12:34,530 --> 00:12:44,939
your depending with flex with this sort

248
00:12:39,450 --> 00:12:49,200
of flexed ap sort of way now we go on to

249
00:12:44,940 --> 00:12:51,450
containers with code pipeline AWS gives

250
00:12:49,200 --> 00:12:54,030
you provision container with deployment

251
00:12:51,450 --> 00:12:55,980
controls now many of you are already

252
00:12:54,030 --> 00:12:58,199
using containers in your environment and

253
00:12:55,980 --> 00:12:59,820
tech stack but it's just doctor

254
00:12:58,200 --> 00:13:01,530
containers that you manage yourself or

255
00:12:59,820 --> 00:13:04,140
multiple docker containers in a

256
00:13:01,530 --> 00:13:06,530
kubernetes cluster that in building and

257
00:13:04,140 --> 00:13:09,689
deployment of your services and products

258
00:13:06,530 --> 00:13:11,550
the world of container security and

259
00:13:09,690 --> 00:13:14,430
container hardening is vast and growing

260
00:13:11,550 --> 00:13:18,390
but here are some tips that I can offer

261
00:13:14,430 --> 00:13:22,260
first is do not run service anymore

262
00:13:18,390 --> 00:13:25,290
services that are needed okay not every

263
00:13:22,260 --> 00:13:27,450
single container in your orchestration

264
00:13:25,290 --> 00:13:33,949
cluster needs access to orchestration

265
00:13:27,450 --> 00:13:38,490
tools needs access to needs access to a

266
00:13:33,950 --> 00:13:41,370
whole suite of UNIX tools if I am in a

267
00:13:38,490 --> 00:13:44,340
tap if and if I'm an attacker on an

268
00:13:41,370 --> 00:13:48,060
engagement and I Papa can i Papa

269
00:13:44,340 --> 00:13:51,180
container one way to make my life really

270
00:13:48,060 --> 00:13:55,079
difficult is to eliminate things like

271
00:13:51,180 --> 00:13:56,790
curl and we eliminate things like curl

272
00:13:55,080 --> 00:13:59,400
and make it difficult for me to reach

273
00:13:56,790 --> 00:14:01,709
out to the Internet and download my

274
00:13:59,400 --> 00:14:05,480
tooling into the container to try to

275
00:14:01,710 --> 00:14:09,450
reverse shell and pivot throughout so

276
00:14:05,480 --> 00:14:11,190
you don't need it's not a p.m. you don't

277
00:14:09,450 --> 00:14:12,840
need to pack everything in the kitchen

278
00:14:11,190 --> 00:14:15,030
sink into your containers when you're

279
00:14:12,840 --> 00:14:18,150
building and running them second you

280
00:14:15,030 --> 00:14:21,630
need to understand that docker access is

281
00:14:18,150 --> 00:14:24,959
route access the docker daemon runs as

282
00:14:21,630 --> 00:14:28,350
route there is an experimental version

283
00:14:24,960 --> 00:14:31,100
of docker currently being played tested

284
00:14:28,350 --> 00:14:34,530
right now that involves rootless access

285
00:14:31,100 --> 00:14:36,570
those link to that is available also in

286
00:14:34,530 --> 00:14:38,220
the side deck where you can find those

287
00:14:36,570 --> 00:14:40,770
resources to try to play around with

288
00:14:38,220 --> 00:14:43,050
that in your environment but as it

289
00:14:40,770 --> 00:14:45,990
currently stands docker in production

290
00:14:43,050 --> 00:14:48,300
right now if you give the user access to

291
00:14:45,990 --> 00:14:51,350
docker by putting them in the docker

292
00:14:48,300 --> 00:14:54,060
group you're giving them root access I

293
00:14:51,350 --> 00:14:56,340
can there's also another link in the

294
00:14:54,060 --> 00:14:59,310
side deck to show a simple privilege

295
00:14:56,340 --> 00:15:02,760
escalation in about 10 seconds it's not

296
00:14:59,310 --> 00:15:05,849
that difficult so you need to understand

297
00:15:02,760 --> 00:15:08,610
that not you need to understand that

298
00:15:05,850 --> 00:15:12,840
systems need access to docker and not

299
00:15:08,610 --> 00:15:16,830
necessarily users then you need to

300
00:15:12,840 --> 00:15:20,220
understand also avoid docker bind mounts

301
00:15:16,830 --> 00:15:22,890
like the plague now find mounts are

302
00:15:20,220 --> 00:15:25,290
mind mounts are insecure because they

303
00:15:22,890 --> 00:15:27,930
open up the file system of the host to

304
00:15:25,290 --> 00:15:31,410
the container and it's fine for

305
00:15:27,930 --> 00:15:33,390
development local and play testing

306
00:15:31,410 --> 00:15:35,160
purposes but when you're shipping out

307
00:15:33,390 --> 00:15:36,750
containers in a production style of

308
00:15:35,160 --> 00:15:40,589
environment you need to use volume

309
00:15:36,750 --> 00:15:44,310
mounts in step and then finally you need

310
00:15:40,589 --> 00:15:46,709
to understand that there's an excellent

311
00:15:44,310 --> 00:15:49,829
meme going around about docker and a

312
00:15:46,709 --> 00:15:53,670
corona virus but that isolation between

313
00:15:49,830 --> 00:15:57,230
apps is not absolute it's not a VM it's

314
00:15:53,670 --> 00:16:01,319
a compromise between running virtual

315
00:15:57,230 --> 00:16:04,050
machine which could take minutes and in

316
00:16:01,320 --> 00:16:07,410
terms of DevOps and cloud infrastructure

317
00:16:04,050 --> 00:16:09,719
that centuries and then just running it

318
00:16:07,410 --> 00:16:13,829
on the hardware itself it's compromised

319
00:16:09,720 --> 00:16:16,830
between the two so the dot so any

320
00:16:13,830 --> 00:16:19,170
container shares are the kernel with its

321
00:16:16,830 --> 00:16:23,430
host so if you keep the host systems

322
00:16:19,170 --> 00:16:25,620
kernel patch you can avoid the content

323
00:16:23,430 --> 00:16:28,430
you can avoid attackers who pop the

324
00:16:25,620 --> 00:16:30,959
containers to avoid those kernel level

325
00:16:28,430 --> 00:16:35,370
vulnerabilities and in order to escape

326
00:16:30,959 --> 00:16:38,670
the container and so if you follow these

327
00:16:35,370 --> 00:16:39,930
steps you're well on your way to you're

328
00:16:38,670 --> 00:16:41,490
well on your way and improving the

329
00:16:39,930 --> 00:16:47,609
security of the containers and your

330
00:16:41,490 --> 00:16:49,529
environment now we jump into the demo so

331
00:16:47,610 --> 00:16:50,910
here we've got a brief demo with a

332
00:16:49,529 --> 00:16:53,880
portal that we've discussed in the

333
00:16:50,910 --> 00:16:58,380
beginning of the talk as we go through

334
00:16:53,880 --> 00:17:00,660
we notice that oh the build failed

335
00:16:58,380 --> 00:17:03,480
what's let's see what's going on and

336
00:17:00,660 --> 00:17:06,928
that's investigating the logs and when

337
00:17:03,480 --> 00:17:09,150
we dive into them we find that all of

338
00:17:06,929 --> 00:17:11,670
our other services work we've deployed

339
00:17:09,150 --> 00:17:14,730
the cloud formation stack the unit tests

340
00:17:11,670 --> 00:17:18,230
work the API support correctly but we

341
00:17:14,730 --> 00:17:20,640
notice that there is a moderate level

342
00:17:18,230 --> 00:17:22,890
vulnerability and we'll see that at the

343
00:17:20,640 --> 00:17:26,220
end of this log right here now I don't

344
00:17:22,890 --> 00:17:28,110
know about you but my boss will not

345
00:17:26,220 --> 00:17:30,630
allow me to ship code with cross-site

346
00:17:28,109 --> 00:17:33,559
scripting in it now if you're working in

347
00:17:30,630 --> 00:17:36,390
a system that has a high availability

348
00:17:33,559 --> 00:17:39,520
requirement maybe you would instead

349
00:17:36,390 --> 00:17:43,240
trigger something in cloud watch

350
00:17:39,520 --> 00:17:45,389
to alert any incidence response or patch

351
00:17:43,240 --> 00:17:48,850
management or the developers themselves

352
00:17:45,390 --> 00:17:50,679
to try to quickly figure out a patch to

353
00:17:48,850 --> 00:17:52,419
address the moderate level of

354
00:17:50,679 --> 00:17:55,120
vulnerabilities that wouldn't

355
00:17:52,420 --> 00:17:59,530
necessarily trigger an ultimate shutdown

356
00:17:55,120 --> 00:18:02,860
and not shipping and not shipping the D

357
00:17:59,530 --> 00:18:04,840
product into production what you do in

358
00:18:02,860 --> 00:18:08,080
your environment depends on your

359
00:18:04,840 --> 00:18:15,699
tolerance for risks and your processes

360
00:18:08,080 --> 00:18:18,610
for vulnerability management and so you

361
00:18:15,700 --> 00:18:21,340
may ask alright so give me the tool that

362
00:18:18,610 --> 00:18:24,120
automates all this work I'm sorry I

363
00:18:21,340 --> 00:18:27,010
don't have it I've shown you tools

364
00:18:24,120 --> 00:18:29,678
tactics and strategies to help builders

365
00:18:27,010 --> 00:18:30,820
and security teams to be more put me

366
00:18:29,679 --> 00:18:33,760
more effective

367
00:18:30,820 --> 00:18:35,830
there is no handyman in a can none of

368
00:18:33,760 --> 00:18:37,540
these tools replaces the people that

369
00:18:35,830 --> 00:18:40,540
must use them so whether you're a

370
00:18:37,540 --> 00:18:43,659
builder or an InfoSec you're a plumber

371
00:18:40,540 --> 00:18:46,330
you're either laying down pipes checking

372
00:18:43,660 --> 00:18:47,950
for leaks or fixing them and by

373
00:18:46,330 --> 00:18:51,490
strengthening the connections between

374
00:18:47,950 --> 00:18:54,790
parts analyzing the building materials

375
00:18:51,490 --> 00:18:56,860
and preventing data analyzing your

376
00:18:54,790 --> 00:18:59,200
building materials and preventing data

377
00:18:56,860 --> 00:19:01,629
leaks you can help keep the flow of

378
00:18:59,200 --> 00:19:04,150
information going throughout your

379
00:19:01,630 --> 00:19:14,040
organization I thank you for your time

380
00:19:04,150 --> 00:19:21,900
and I thank you for your attention and

381
00:19:14,040 --> 00:19:21,899
now I told you I'd run through its lot

