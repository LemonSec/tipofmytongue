1
00:00:02,639 --> 00:00:08,370
I'm gonna do my sponsor read thing real

2
00:00:05,850 --> 00:00:09,540
quick because these sponsors have made

3
00:00:08,370 --> 00:00:11,870
this whole thing possible

4
00:00:09,540 --> 00:00:15,149
and we are super appreciative for them

5
00:00:11,870 --> 00:00:17,880
so our diamond level sponsor is Warner

6
00:00:15,150 --> 00:00:20,220
Media Gold level we've got Kennesaw

7
00:00:17,880 --> 00:00:23,390
State University Coles College their

8
00:00:20,220 --> 00:00:26,669
Department of Information Systems also

9
00:00:23,390 --> 00:00:29,070
Bishop Fox coal fire genuine parks

10
00:00:26,670 --> 00:00:31,949
company and NCR also at the Gold level

11
00:00:29,070 --> 00:00:34,830
at Crystal we've got crisp critical

12
00:00:31,949 --> 00:00:37,589
paths and synopsis silver

13
00:00:34,830 --> 00:00:39,750
we've got Aaron's binary defense Black

14
00:00:37,589 --> 00:00:43,019
Hills core light and guide point

15
00:00:39,750 --> 00:00:45,659
security bronze level we've got NC C

16
00:00:43,019 --> 00:00:47,430
group and our in-kind sponsors EC

17
00:00:45,659 --> 00:00:50,269
Council for their online training and

18
00:00:47,430 --> 00:00:52,589
secure code warrior for the virtual CTF

19
00:00:50,269 --> 00:00:54,479
we'd also like to thank crosshair

20
00:00:52,589 --> 00:00:56,879
Information Technology Joe gray

21
00:00:54,479 --> 00:01:00,180
offensive security and pentester Labs

22
00:00:56,879 --> 00:01:02,970
for their contributions to the raffle

23
00:01:00,180 --> 00:01:04,290
prizes which are really great so make

24
00:01:02,970 --> 00:01:07,020
sure to hop into the raffle giveaways

25
00:01:04,290 --> 00:01:11,310
channel go chat with our sponsors in the

26
00:01:07,020 --> 00:01:18,420
sponsors Channel and yeah just hang out

27
00:01:11,310 --> 00:01:22,110
so next up for talks we have a stephan

28
00:01:18,420 --> 00:01:24,740
becker and ryan Baisden and they will be

29
00:01:22,110 --> 00:01:29,580
talking about Cerberus password cracking

30
00:01:24,740 --> 00:01:38,850
so I will hand it over to them awesome

31
00:01:29,580 --> 00:01:40,408
thanks Patrick let me all right so let

32
00:01:38,850 --> 00:01:44,509
me get this presentation slide real

33
00:01:40,409 --> 00:01:44,510
quick yeah I'd probably help

34
00:01:50,130 --> 00:01:58,199
all right is that fullscreen we're good

35
00:01:54,810 --> 00:02:00,270
okay great all right so introductions

36
00:01:58,200 --> 00:02:02,520
first I'll start with myself and then

37
00:02:00,270 --> 00:02:05,219
I'll hand over to my project partners to

38
00:02:02,520 --> 00:02:08,098
fajn I'm Ryan Baisden I worked for a

39
00:02:05,219 --> 00:02:09,840
company called risk 360 we're a firm out

40
00:02:08,098 --> 00:02:12,510
of Roswell Georgia that specializes in

41
00:02:09,840 --> 00:02:15,300
cyber risk IT audit penetration testing

42
00:02:12,510 --> 00:02:18,239
compliance privacy the whole gamut

43
00:02:15,300 --> 00:02:20,160
my primary role there is managing and

44
00:02:18,239 --> 00:02:22,950
executing penetration test engagements

45
00:02:20,160 --> 00:02:25,049
and red team engagements I've been doing

46
00:02:22,950 --> 00:02:28,440
this for about two years now on top of a

47
00:02:25,049 --> 00:02:30,690
an IT security career from internal

48
00:02:28,440 --> 00:02:33,750
perspective organizationally you can

49
00:02:30,690 --> 00:02:35,220
find me at my relatively new Twitter

50
00:02:33,750 --> 00:02:37,310
account at SAS Oh sick

51
00:02:35,220 --> 00:02:40,140
and I'll let Stephane introduce himself

52
00:02:37,310 --> 00:02:41,940
yeah I work for epi slabs we have

53
00:02:40,140 --> 00:02:46,048
offices here in Atlanta and all over the

54
00:02:41,940 --> 00:02:49,500
world we help our customers create

55
00:02:46,049 --> 00:02:52,140
powerful and secure sa P landscapes with

56
00:02:49,500 --> 00:02:55,380
our software value-added solutions and

57
00:02:52,140 --> 00:02:57,720
managed services I lead up our AWS team

58
00:02:55,380 --> 00:03:00,540
which just means that I help our teams

59
00:02:57,720 --> 00:03:03,030
from a technical perspective as well as

60
00:03:00,540 --> 00:03:07,760
managing our relationship with AWS

61
00:03:03,030 --> 00:03:10,500
globally cool so without further ado

62
00:03:07,760 --> 00:03:12,870
I'll jump into our talk now so this is

63
00:03:10,500 --> 00:03:14,880
serverless password cracking or how I

64
00:03:12,870 --> 00:03:18,389
learned to stop worrying and love AWS

65
00:03:14,880 --> 00:03:21,540
asterisk almost I hope there are some

66
00:03:18,389 --> 00:03:23,280
dr. Strangelove fans watching if if so

67
00:03:21,540 --> 00:03:26,160
you'll you'll especially appreciate this

68
00:03:23,280 --> 00:03:27,900
if not after this presentation go and

69
00:03:26,160 --> 00:03:30,870
watch dr. Strangelove it's a fantastic

70
00:03:27,900 --> 00:03:32,310
movie so today we're gonna be talking

71
00:03:30,870 --> 00:03:34,380
about password cracking as you might

72
00:03:32,310 --> 00:03:37,200
have guessed by now and we're gonna be

73
00:03:34,380 --> 00:03:38,579
doing it all through AWS so this could

74
00:03:37,200 --> 00:03:40,500
probably be done through whatever

75
00:03:38,579 --> 00:03:42,420
platform you like I know AWS is not the

76
00:03:40,500 --> 00:03:44,430
only cloud infrastructure platform in

77
00:03:42,420 --> 00:03:47,309
the world there's Google cloud there's

78
00:03:44,430 --> 00:03:49,560
Adger if you're in Europe there's some

79
00:03:47,310 --> 00:03:51,810
other options but it just so happens

80
00:03:49,560 --> 00:03:56,730
that my friend and local cloud cloud

81
00:03:51,810 --> 00:04:00,359
expert Stephane specializes in AWS so

82
00:03:56,730 --> 00:04:02,880
first we're gonna do a demo primarily

83
00:04:00,359 --> 00:04:07,650
because one of my favorite talks ever at

84
00:04:02,880 --> 00:04:10,650
25 was about backdoors built into x86

85
00:04:07,650 --> 00:04:12,570
processors and he did the demo first and

86
00:04:10,650 --> 00:04:14,880
I really appreciated that so what I'm

87
00:04:12,570 --> 00:04:18,029
gonna do is I'm gonna cut the screen

88
00:04:14,880 --> 00:04:19,380
share over to staff on briefly who has

89
00:04:18,029 --> 00:04:22,530
the demo setup and what we're gonna do

90
00:04:19,380 --> 00:04:25,340
is we're gonna use AWS to to crack a an

91
00:04:22,530 --> 00:04:27,869
md5 hash all from the command line

92
00:04:25,340 --> 00:04:34,289
awesome this is my favorite part live

93
00:04:27,870 --> 00:04:38,310
demos let's go cool can you see the

94
00:04:34,290 --> 00:04:40,590
right screen yep cool all right so we're

95
00:04:38,310 --> 00:04:45,590
gonna do we're gonna execute a Python

96
00:04:40,590 --> 00:04:51,960
script Ryan and I wrote called Ares py

97
00:04:45,590 --> 00:04:54,119
let me go ahead and give it a hash so

98
00:04:51,960 --> 00:04:56,130
I'm just giving it an md5 hash we don't

99
00:04:54,120 --> 00:04:57,720
know what password this corresponds to

100
00:04:56,130 --> 00:04:58,520
yet we're gonna find out here pretty

101
00:04:57,720 --> 00:05:00,390
soon

102
00:04:58,520 --> 00:05:09,990
that's exactly what didn't want to

103
00:05:00,390 --> 00:05:12,630
happen well it's again great so now what

104
00:05:09,990 --> 00:05:16,140
this script will do is first it will

105
00:05:12,630 --> 00:05:18,060
send our hash onto a messaging queue in

106
00:05:16,140 --> 00:05:20,640
this case we're using Amazon's sqs

107
00:05:18,060 --> 00:05:23,100
service it'll then go out and create a

108
00:05:20,640 --> 00:05:25,349
p3 16 Excel which is just a bunch of

109
00:05:23,100 --> 00:05:29,490
letters which roughly equates to a

110
00:05:25,350 --> 00:05:33,890
server that has about 96 V CPUs and 8

111
00:05:29,490 --> 00:05:37,620
Nvidia Tesla cards but then it waits and

112
00:05:33,890 --> 00:05:40,530
on the server side on boot the server

113
00:05:37,620 --> 00:05:43,590
will execute a script that pulls our

114
00:05:40,530 --> 00:05:46,380
hash off of our message queue puts that

115
00:05:43,590 --> 00:05:49,979
hash into a command and executes hash

116
00:05:46,380 --> 00:05:52,860
cat once hash cat is finished it'll

117
00:05:49,980 --> 00:05:55,260
upload the correct password to an s3

118
00:05:52,860 --> 00:05:59,910
bucket that our handy little script here

119
00:05:55,260 --> 00:06:01,830
is actually waiting for and our handy

120
00:05:59,910 --> 00:06:04,140
little script will download that cracked

121
00:06:01,830 --> 00:06:07,169
password upon completion the server will

122
00:06:04,140 --> 00:06:09,390
kill itself meanwhile I have I've built

123
00:06:07,170 --> 00:06:12,090
in a couple of feedback items on the

124
00:06:09,390 --> 00:06:14,640
server side it's kind of a black box so

125
00:06:12,090 --> 00:06:15,450
our server will also upon creation send

126
00:06:14,640 --> 00:06:16,530
us an email

127
00:06:15,450 --> 00:06:18,510
it's not the best

128
00:06:16,530 --> 00:06:20,130
but it will push a notification to

129
00:06:18,510 --> 00:06:21,510
Amazon simple notification service

130
00:06:20,130 --> 00:06:24,659
that'll tell us once the instance is

131
00:06:21,510 --> 00:06:27,690
launched and then once the instance has

132
00:06:24,660 --> 00:06:30,450
executed hash cat successfully we will

133
00:06:27,690 --> 00:06:34,500
also get a notification from S&S as soon

134
00:06:30,450 --> 00:06:35,969
as our cracked password is an s3 so I'm

135
00:06:34,500 --> 00:06:38,040
gonna hand it back to Ryan cuz this is

136
00:06:35,970 --> 00:06:40,770
probably gonna take about five or so

137
00:06:38,040 --> 00:06:43,200
minutes yeah this will take a minute so

138
00:06:40,770 --> 00:06:46,590
so what I'll do is I'll I'll start going

139
00:06:43,200 --> 00:06:48,750
through some background on this project

140
00:06:46,590 --> 00:06:50,340
and I'll let's define interject as soon

141
00:06:48,750 --> 00:06:53,640
as as soon as we've gotten our cracked

142
00:06:50,340 --> 00:06:56,820
password back so let me swap screen

143
00:06:53,640 --> 00:07:00,479
shares here alright so a quick word on

144
00:06:56,820 --> 00:07:02,370
server list we we intended for this to

145
00:07:00,480 --> 00:07:04,200
be truly service in the sense that we

146
00:07:02,370 --> 00:07:06,780
could crack passwords with without ever

147
00:07:04,200 --> 00:07:09,240
spinning up an ec2 instance if there are

148
00:07:06,780 --> 00:07:11,250
any other AWS experts engineers

149
00:07:09,240 --> 00:07:13,680
architects watching this you'll know

150
00:07:11,250 --> 00:07:15,750
that this is not technically serverless

151
00:07:13,680 --> 00:07:17,910
when we initially came up with the idea

152
00:07:15,750 --> 00:07:19,710
we thought how great would it be to be

153
00:07:17,910 --> 00:07:22,350
able to do this without ever spinning up

154
00:07:19,710 --> 00:07:24,299
a server at all as we move through we

155
00:07:22,350 --> 00:07:27,660
realize that wasn't necessarily possible

156
00:07:24,300 --> 00:07:29,940
in the form we were doing it and we'll

157
00:07:27,660 --> 00:07:31,080
get into that a little bit later when we

158
00:07:29,940 --> 00:07:32,250
go through the progress of actually

159
00:07:31,080 --> 00:07:34,640
building this thing so it's still

160
00:07:32,250 --> 00:07:37,680
technically used as an ec2 instance

161
00:07:34,640 --> 00:07:39,570
right now there's no way that we know of

162
00:07:37,680 --> 00:07:42,810
elegantly to do hash cracking with

163
00:07:39,570 --> 00:07:44,760
lambda but I will say if there's anyone

164
00:07:42,810 --> 00:07:48,090
watching this who knows how to port hash

165
00:07:44,760 --> 00:07:50,849
cat to lambda or use OpenCL without a

166
00:07:48,090 --> 00:07:53,130
kernel I will personally meet up with

167
00:07:50,850 --> 00:07:56,400
you buy you a beer and include you on

168
00:07:53,130 --> 00:07:58,200
this project what matters here is that

169
00:07:56,400 --> 00:08:00,419
relatively to the way people

170
00:07:58,200 --> 00:08:04,469
traditionally crack passwords which is

171
00:08:00,419 --> 00:08:07,200
maybe using a big rack of GPUs or even

172
00:08:04,470 --> 00:08:08,760
just spinning up in an AWS server for

173
00:08:07,200 --> 00:08:13,200
themselves and logging in this is

174
00:08:08,760 --> 00:08:15,240
relatively serverless so why did we

175
00:08:13,200 --> 00:08:16,800
build this first reason is that we

176
00:08:15,240 --> 00:08:19,050
wanted to crack passwords more

177
00:08:16,800 --> 00:08:21,630
specifically I wanted to crack passwords

178
00:08:19,050 --> 00:08:24,120
because it's part of my job and I wanted

179
00:08:21,630 --> 00:08:26,190
Stefan to want to help me do it in AWS

180
00:08:24,120 --> 00:08:28,620
because he's a guru with AWS and I'm a

181
00:08:26,190 --> 00:08:30,540
noob with AWS

182
00:08:28,620 --> 00:08:32,849
he didn't want to help me obviously

183
00:08:30,540 --> 00:08:34,080
which is good otherwise this may not

184
00:08:32,849 --> 00:08:36,690
have happened in the form you see it

185
00:08:34,080 --> 00:08:39,870
today the second reason is that racks of

186
00:08:36,690 --> 00:08:41,370
GPUs are insanely expensive back when I

187
00:08:39,870 --> 00:08:45,270
was trying to figure out how to do

188
00:08:41,370 --> 00:08:46,860
password cracking for RISC 360 we had

189
00:08:45,270 --> 00:08:50,280
the unfortunate experience of pricing

190
00:08:46,860 --> 00:08:52,140
GPU racks based on all of the people who

191
00:08:50,280 --> 00:08:55,589
were trying to mind Bitcoin during that

192
00:08:52,140 --> 00:08:56,670
bubble that we all observed and lost a

193
00:08:55,590 --> 00:08:58,380
bunch of money and we're trying to get

194
00:08:56,670 --> 00:09:00,990
their money back so in other words it

195
00:08:58,380 --> 00:09:04,710
was a non-starter what else is expensive

196
00:09:00,990 --> 00:09:07,530
is AWS if you forget to turn it off

197
00:09:04,710 --> 00:09:09,630
these P 3 instances because they range

198
00:09:07,530 --> 00:09:13,110
anywhere from 20 to 25 dollars per hour

199
00:09:09,630 --> 00:09:15,510
without spot pricing can become pretty

200
00:09:13,110 --> 00:09:17,580
expensive and if you go and crack a hash

201
00:09:15,510 --> 00:09:18,840
and forget to turn it off then you're

202
00:09:17,580 --> 00:09:21,540
looking at a pretty big bill

203
00:09:18,840 --> 00:09:23,910
so we weigh 20 grand a month by the way

204
00:09:21,540 --> 00:09:26,099
yeah it's a lot we wanted a way to be

205
00:09:23,910 --> 00:09:30,890
able to do this without incurring any

206
00:09:26,100 --> 00:09:34,410
cost risk so what we were doing before

207
00:09:30,890 --> 00:09:37,140
was one cracking passwords with laptop

208
00:09:34,410 --> 00:09:39,240
hardware which is not so bad if you have

209
00:09:37,140 --> 00:09:41,580
a pretty modern laptop that has the

210
00:09:39,240 --> 00:09:42,960
hardware that can handle it but in a lot

211
00:09:41,580 --> 00:09:44,520
of cases it's pretty slow and not

212
00:09:42,960 --> 00:09:46,500
everybody has access to that kind of

213
00:09:44,520 --> 00:09:48,810
hardware so one of the problems we

214
00:09:46,500 --> 00:09:51,150
wanted to solve was how to let people

215
00:09:48,810 --> 00:09:53,550
crack passwords in an accessible way

216
00:09:51,150 --> 00:09:55,920
that they wouldn't have to spend tons of

217
00:09:53,550 --> 00:09:59,520
money fifteen to two thousand dollars on

218
00:09:55,920 --> 00:10:02,699
a laptop or even worse 15 to 20 K on a

219
00:09:59,520 --> 00:10:04,380
rack of GPUs and we were able to

220
00:10:02,700 --> 00:10:07,890
accomplish that by passing all of the

221
00:10:04,380 --> 00:10:10,439
computing power off to AWS the second

222
00:10:07,890 --> 00:10:12,750
thing we started doing is we started

223
00:10:10,440 --> 00:10:15,900
spinning up very small p3 instances less

224
00:10:12,750 --> 00:10:18,240
expensive p3 instances in AWS we would

225
00:10:15,900 --> 00:10:20,069
crack the password over SSH after

226
00:10:18,240 --> 00:10:23,490
logging in and then we would spin it

227
00:10:20,070 --> 00:10:26,250
back down which again all worked but it

228
00:10:23,490 --> 00:10:29,250
required a lot of manual time and effort

229
00:10:26,250 --> 00:10:31,260
which was another thing that we felt

230
00:10:29,250 --> 00:10:35,310
like we could avoid by doing some some

231
00:10:31,260 --> 00:10:37,950
AWS maneuvering we correct it Ryan all

232
00:10:35,310 --> 00:10:40,260
right let me hand this back over to

233
00:10:37,950 --> 00:10:41,660
Stephane real quick so we can see that

234
00:10:40,260 --> 00:10:45,740
final end of the demo

235
00:10:41,660 --> 00:10:48,810
all right so here you can see my

236
00:10:45,740 --> 00:10:51,630
notifications that are received we have

237
00:10:48,810 --> 00:10:53,910
our nice little aries instance launched

238
00:10:51,630 --> 00:10:56,420
successfully message hash got executed

239
00:10:53,910 --> 00:11:00,540
successfully message as well as our

240
00:10:56,420 --> 00:11:05,579
message that said the item is an s3 so I

241
00:11:00,540 --> 00:11:11,329
could show you here that let's go do a

242
00:11:05,579 --> 00:11:11,329
quick results oh that's embarrassing

243
00:11:12,630 --> 00:11:17,519
here's our cracked hash apparently this

244
00:11:15,120 --> 00:11:20,250
person is a big fan of Panic at the

245
00:11:17,519 --> 00:11:24,750
Disco which I can't necessarily fault

246
00:11:20,250 --> 00:11:28,260
them for yeah so that's so that's the

247
00:11:24,750 --> 00:11:30,209
end that's the end result we're able to

248
00:11:28,260 --> 00:11:33,149
do this entirely from the command-line

249
00:11:30,209 --> 00:11:36,089
now there's a lot of setup in AWS that

250
00:11:33,149 --> 00:11:38,459
goes into this but being able to send a

251
00:11:36,089 --> 00:11:39,839
hash on from a command line argument and

252
00:11:38,459 --> 00:11:42,660
get the results back in the command line

253
00:11:39,839 --> 00:11:48,029
was was our golden goal we wanted to get

254
00:11:42,660 --> 00:11:50,069
to that for a lot of reasons when we

255
00:11:48,029 --> 00:11:51,689
were thinking about building this I was

256
00:11:50,070 --> 00:11:53,070
taking into account a lot of the pen

257
00:11:51,690 --> 00:11:55,620
testing tools that I use on a regular

258
00:11:53,070 --> 00:11:57,990
basis and trying to figure out what the

259
00:11:55,620 --> 00:11:59,760
best components of them were and I

260
00:11:57,990 --> 00:12:01,320
wanted to be able to implement that into

261
00:11:59,760 --> 00:12:03,209
what we were building so the first thing

262
00:12:01,320 --> 00:12:07,020
that a lot of these tools do really well

263
00:12:03,209 --> 00:12:09,149
is use AP eyes and when I say AP eyes I

264
00:12:07,020 --> 00:12:12,120
definitely mean actual ap is but I also

265
00:12:09,149 --> 00:12:14,490
mean that they get information that

266
00:12:12,120 --> 00:12:16,170
already exists or they use functionality

267
00:12:14,490 --> 00:12:18,870
that someone already built to do

268
00:12:16,170 --> 00:12:20,370
something new the second thing they do

269
00:12:18,870 --> 00:12:21,690
is they don't really require giant

270
00:12:20,370 --> 00:12:24,660
installations they don't require

271
00:12:21,690 --> 00:12:26,459
proprietary dependencies lots of system

272
00:12:24,660 --> 00:12:28,500
requirements they can be run with

273
00:12:26,459 --> 00:12:31,109
minimal setup so they can be used

274
00:12:28,500 --> 00:12:35,360
quickly get the results quickly in a

275
00:12:31,110 --> 00:12:35,360
usable format and you're done

276
00:12:36,070 --> 00:12:42,610
sidenote port your Python to to go Ling

277
00:12:38,740 --> 00:12:44,950
this is kind of a joke because if you

278
00:12:42,610 --> 00:12:47,110
use pen test tools you know that using

279
00:12:44,950 --> 00:12:49,330
Python tools ends up in a storm of

280
00:12:47,110 --> 00:12:50,950
dependency handling and sometimes your

281
00:12:49,330 --> 00:12:53,800
virtual environments can break and it's

282
00:12:50,950 --> 00:12:55,480
just a nightmare going kind of takes

283
00:12:53,800 --> 00:12:59,589
care of a lot of that stuff by being a

284
00:12:55,480 --> 00:13:01,480
compiled language so this is kind of a

285
00:12:59,590 --> 00:13:04,870
joke on Python I still love Python but

286
00:13:01,480 --> 00:13:06,580
going is great the third thing is that

287
00:13:04,870 --> 00:13:08,410
they can be run from the command line so

288
00:13:06,580 --> 00:13:10,570
there this is not a hard and fast rule

289
00:13:08,410 --> 00:13:12,339
just like any of these are not hard and

290
00:13:10,570 --> 00:13:16,540
fast rules there are great tools like

291
00:13:12,340 --> 00:13:18,700
burp suite for web hacking zap w3 af all

292
00:13:16,540 --> 00:13:20,260
of these great utilities that are used

293
00:13:18,700 --> 00:13:21,820
for pen testing that don't run from the

294
00:13:20,260 --> 00:13:24,700
command line but being able to run from

295
00:13:21,820 --> 00:13:26,650
the command line affords the person

296
00:13:24,700 --> 00:13:29,260
running the tool a lot of a lot of

297
00:13:26,650 --> 00:13:31,030
capability and a lot of customization

298
00:13:29,260 --> 00:13:32,980
that is something I've come to

299
00:13:31,030 --> 00:13:34,930
appreciate with the tools that I use so

300
00:13:32,980 --> 00:13:38,110
I wanted to implement that and ours as

301
00:13:34,930 --> 00:13:42,010
well and what that came down to was Ares

302
00:13:38,110 --> 00:13:44,710
dot pi we built this this tool and we

303
00:13:42,010 --> 00:13:50,140
named it after the Greek god Ares the

304
00:13:44,710 --> 00:13:52,510
God of War mostly for fun at risk 360 we

305
00:13:50,140 --> 00:13:55,090
do follow kind of a theme with Greek

306
00:13:52,510 --> 00:13:58,030
mythology so it seemed only fitting to

307
00:13:55,090 --> 00:13:59,860
to name this Ares and of course because

308
00:13:58,030 --> 00:14:02,530
we're so thankful for Jeff Bezos and his

309
00:13:59,860 --> 00:14:04,300
AWS invention we put his head on on our

310
00:14:02,530 --> 00:14:05,890
Ares painting here I mean he might as

311
00:14:04,300 --> 00:14:09,010
well be a modern-day Greek god of war

312
00:14:05,890 --> 00:14:10,480
let's be honest so I'm gonna I'm gonna

313
00:14:09,010 --> 00:14:13,540
let Stefan talk about some of the cost

314
00:14:10,480 --> 00:14:15,940
savings because again we we can talk all

315
00:14:13,540 --> 00:14:18,310
day about how easy this is to use and

316
00:14:15,940 --> 00:14:20,110
how much how low the overhead is but

317
00:14:18,310 --> 00:14:21,880
when it comes down to it one of the

318
00:14:20,110 --> 00:14:24,340
first problems we presented was how much

319
00:14:21,880 --> 00:14:26,860
it was costing us or potentially costing

320
00:14:24,340 --> 00:14:30,180
us to do this very simple job of

321
00:14:26,860 --> 00:14:32,410
password cracking and we theoretically

322
00:14:30,180 --> 00:14:34,359
proposed that we'd be able to save a lot

323
00:14:32,410 --> 00:14:36,640
of money we weren't exactly sure how

324
00:14:34,360 --> 00:14:38,950
much until we finished and all let's

325
00:14:36,640 --> 00:14:41,500
define go into that yeah so the real

326
00:14:38,950 --> 00:14:45,130
there the magic behind this tool is

327
00:14:41,500 --> 00:14:46,900
twofold one this saves you time and

328
00:14:45,130 --> 00:14:48,870
provisioning a server manually the

329
00:14:46,900 --> 00:14:51,180
script does all that for you

330
00:14:48,870 --> 00:14:53,430
you know it keeps it even saves you time

331
00:14:51,180 --> 00:14:54,989
on like SSA Qing into the server it's

332
00:14:53,430 --> 00:14:59,160
just a black box that you send things

333
00:14:54,990 --> 00:15:02,360
into the second thing is we are using

334
00:14:59,160 --> 00:15:05,640
what's called a bilious spot pricing

335
00:15:02,360 --> 00:15:09,360
that's just a way for the customer to

336
00:15:05,640 --> 00:15:10,980
bid on AWS is excess capacity in

337
00:15:09,360 --> 00:15:13,080
practically speaking what that means is

338
00:15:10,980 --> 00:15:15,690
instead of paying twenty four dollars an

339
00:15:13,080 --> 00:15:17,730
hour for this server we're paying seven

340
00:15:15,690 --> 00:15:22,170
dollars and forty four cents for this

341
00:15:17,730 --> 00:15:23,940
server I did a quick calculation in our

342
00:15:22,170 --> 00:15:26,939
demo the server was only up and running

343
00:15:23,940 --> 00:15:31,470
for three minutes and effectively that

344
00:15:26,940 --> 00:15:34,710
test run only cost us about 37 cents in

345
00:15:31,470 --> 00:15:37,320
our testing time we used about 10 hours

346
00:15:34,710 --> 00:15:39,120
of server time and had equated to about

347
00:15:37,320 --> 00:15:43,140
what we affectionately like to refer to

348
00:15:39,120 --> 00:15:45,120
as 44 Bezos bucks and just for a quick

349
00:15:43,140 --> 00:15:46,800
currency conversion you know basis books

350
00:15:45,120 --> 00:15:48,900
is like a one-to-one ratio with a dollar

351
00:15:46,800 --> 00:15:50,430
but it could have costed us about two

352
00:15:48,900 --> 00:15:52,589
hundred and forty dollars I don't have

353
00:15:50,430 --> 00:15:56,010
two hundred forty dollars ryan is enough

354
00:15:52,589 --> 00:15:57,480
two hundred forty dollars it's it's just

355
00:15:56,010 --> 00:16:00,750
insane the kind of cost savings that's

356
00:15:57,480 --> 00:16:04,200
about a 70% cost saving over what's

357
00:16:00,750 --> 00:16:06,390
called on-demand pricing so that's

358
00:16:04,200 --> 00:16:07,920
that's my slant on cost savings yeah

359
00:16:06,390 --> 00:16:09,720
what's what's especially important to

360
00:16:07,920 --> 00:16:12,599
mention here about this this picture we

361
00:16:09,720 --> 00:16:15,360
have on the right is that these V CPU

362
00:16:12,600 --> 00:16:19,080
hours aren't just cracking in fact they

363
00:16:15,360 --> 00:16:21,450
aren't even as far as half of the time

364
00:16:19,080 --> 00:16:23,940
actual password cracking this was the

365
00:16:21,450 --> 00:16:26,250
entire time we spent doing password

366
00:16:23,940 --> 00:16:27,720
cracking tests as well as just setting

367
00:16:26,250 --> 00:16:29,220
up the development environments

368
00:16:27,720 --> 00:16:30,930
configuring the server to work the way

369
00:16:29,220 --> 00:16:33,839
we wanted it to doing troubleshooting on

370
00:16:30,930 --> 00:16:37,859
our scripts this was the length of our

371
00:16:33,839 --> 00:16:40,230
project as far as building this so 70%

372
00:16:37,860 --> 00:16:41,850
savings on the entire project is not bad

373
00:16:40,230 --> 00:16:43,800
the fact that it costs us sixty six

374
00:16:41,850 --> 00:16:45,870
dollars and ten cents over the course

375
00:16:43,800 --> 00:16:49,920
the entire project is still amazing not

376
00:16:45,870 --> 00:16:53,370
even considering how much savings can

377
00:16:49,920 --> 00:16:54,930
you can you can have once you actually

378
00:16:53,370 --> 00:16:56,610
run this tool when you're only cracking

379
00:16:54,930 --> 00:16:58,589
passwords like Stephane said it's it's

380
00:16:56,610 --> 00:17:00,750
cents on the dollar when it comes to

381
00:16:58,589 --> 00:17:02,579
cracking individual hash the server goes

382
00:17:00,750 --> 00:17:07,829
up and when it comes back down

383
00:17:02,579 --> 00:17:11,220
incurring no extra cost at all so is

384
00:17:07,829 --> 00:17:15,119
this the best / fastest / most efficient

385
00:17:11,220 --> 00:17:17,880
way of doing this probably not for us

386
00:17:15,119 --> 00:17:21,418
this was a classic hacker in a virtual

387
00:17:17,880 --> 00:17:23,490
garage solution to a problem but in my

388
00:17:21,419 --> 00:17:26,220
perspective that's the true nature of

389
00:17:23,490 --> 00:17:28,429
hacking having a problem and solving it

390
00:17:26,220 --> 00:17:30,539
with the resources at your disposal

391
00:17:28,429 --> 00:17:33,240
those of you who have contributed to the

392
00:17:30,539 --> 00:17:35,669
open source community will sympathize

393
00:17:33,240 --> 00:17:37,710
with this we have the same goal in mind

394
00:17:35,669 --> 00:17:39,510
building this tool as we did when

395
00:17:37,710 --> 00:17:42,870
contributing to open source which is

396
00:17:39,510 --> 00:17:44,879
just do it the chances are that somebody

397
00:17:42,870 --> 00:17:46,768
will likely come along after you and

398
00:17:44,880 --> 00:17:48,750
they'll do it better they'll improve on

399
00:17:46,769 --> 00:17:51,750
what you did they might even make you

400
00:17:48,750 --> 00:17:53,279
look like an amateur but what matters is

401
00:17:51,750 --> 00:17:55,769
that you did it and you did it your way

402
00:17:53,279 --> 00:17:58,919
first so the fulfillment of this project

403
00:17:55,769 --> 00:18:02,340
for us was finding this problem that we

404
00:17:58,919 --> 00:18:06,029
had and solving it and sometimes a

405
00:18:02,340 --> 00:18:07,439
quirky way sometimes a disappointing way

406
00:18:06,029 --> 00:18:09,960
as far as things we had to cut out that

407
00:18:07,440 --> 00:18:14,429
maybe fit with our original vision but

408
00:18:09,960 --> 00:18:16,289
weren't going to be functional so people

409
00:18:14,429 --> 00:18:19,200
probably are currently doing this better

410
00:18:16,289 --> 00:18:22,950
and people will probably do this better

411
00:18:19,200 --> 00:18:26,039
after but we solved our problem and

412
00:18:22,950 --> 00:18:27,779
that's what matters to us and so we

413
00:18:26,039 --> 00:18:30,299
learned a couple of pretty important

414
00:18:27,779 --> 00:18:33,210
lessons over the course of building this

415
00:18:30,299 --> 00:18:36,480
tool sometimes the coolest option isn't

416
00:18:33,210 --> 00:18:38,730
the best option in our initial iteration

417
00:18:36,480 --> 00:18:41,549
you can call our alpha version we had

418
00:18:38,730 --> 00:18:44,490
this ridiculous serverless orchestration

419
00:18:41,549 --> 00:18:48,570
layer where like a lambda function was

420
00:18:44,490 --> 00:18:49,320
created that once triggered would launch

421
00:18:48,570 --> 00:18:51,899
rp3

422
00:18:49,320 --> 00:18:53,490
excel instance and then we'd have

423
00:18:51,899 --> 00:18:55,649
another one that would have to wait and

424
00:18:53,490 --> 00:18:58,710
go find the instance and kill it it just

425
00:18:55,649 --> 00:18:59,969
wasn't elegant and we actually found out

426
00:18:58,710 --> 00:19:03,169
there were just a lot of points of

427
00:18:59,970 --> 00:19:05,429
failure and so we just settled on

428
00:19:03,169 --> 00:19:08,549
scripting all of this out in Python

429
00:19:05,429 --> 00:19:12,929
using a very powerful library the AWS

430
00:19:08,549 --> 00:19:16,320
provides called voto 3 tool creation is

431
00:19:12,929 --> 00:19:20,880
a process we learned so many of

432
00:19:16,320 --> 00:19:24,178
valuable lessons and ultimately you can

433
00:19:20,880 --> 00:19:26,250
build this ridiculous thing and find out

434
00:19:24,179 --> 00:19:30,269
that python is just powerful to handle

435
00:19:26,250 --> 00:19:32,309
the brunt of it in this case we had we

436
00:19:30,269 --> 00:19:34,919
realized that infrastructure of code and

437
00:19:32,309 --> 00:19:39,899
scripting is just better and faster for

438
00:19:34,919 --> 00:19:42,720
me as an AWS architect I found that it

439
00:19:39,899 --> 00:19:44,279
fit the client requirements over what I

440
00:19:42,720 --> 00:19:47,460
wanted it fit the client requirements

441
00:19:44,279 --> 00:19:49,679
better to just create a script that does

442
00:19:47,460 --> 00:19:53,870
all this for us I mean Ryan would you

443
00:19:49,679 --> 00:19:56,220
say that this suits your needs better

444
00:19:53,870 --> 00:19:59,459
ridiculousness that we had planned

445
00:19:56,220 --> 00:20:00,629
before oh sure yeah I mean like I

446
00:19:59,460 --> 00:20:02,639
mentioned the last slide there were

447
00:20:00,629 --> 00:20:05,908
elements that we had to cut out that we

448
00:20:02,639 --> 00:20:08,549
were we were sort of married to but in

449
00:20:05,909 --> 00:20:10,710
the end it became choosing functionality

450
00:20:08,549 --> 00:20:14,039
over choosing what we wanted it to be

451
00:20:10,710 --> 00:20:16,620
and to meet our ultimate goal of an

452
00:20:14,039 --> 00:20:19,500
accessible way to do password cracking

453
00:20:16,620 --> 00:20:22,258
we had to make some sacrifices but in

454
00:20:19,500 --> 00:20:23,580
the end the moment where we we got it to

455
00:20:22,259 --> 00:20:26,009
run all the way through and we got a

456
00:20:23,580 --> 00:20:29,309
cracked password back was it was all the

457
00:20:26,009 --> 00:20:30,029
reward that I think we needed mm-hmm so

458
00:20:29,309 --> 00:20:34,350
what's next

459
00:20:30,029 --> 00:20:36,570
first thing more hash options if you

460
00:20:34,350 --> 00:20:38,070
were if you're familiar with with

461
00:20:36,570 --> 00:20:39,149
hashing algorithms you probably noticed

462
00:20:38,070 --> 00:20:42,120
that the one that we passed through

463
00:20:39,149 --> 00:20:44,820
during the demo was an md5 hash which is

464
00:20:42,120 --> 00:20:48,209
notoriously common and also weak as far

465
00:20:44,820 --> 00:20:50,460
as hashing algorithms go during pen

466
00:20:48,210 --> 00:20:53,730
tests and red team engagements we come

467
00:20:50,460 --> 00:20:56,009
across too much stronger types of hashes

468
00:20:53,730 --> 00:20:59,159
that are separated mostly into two

469
00:20:56,009 --> 00:21:01,409
families the Windows family so ntlm v2

470
00:20:59,159 --> 00:21:03,779
Kerberos tickets that sort of thing and

471
00:21:01,409 --> 00:21:05,850
then if you win on any UNIX based system

472
00:21:03,779 --> 00:21:07,980
you'll probably run across a shot to 50

473
00:21:05,850 --> 00:21:10,350
56 or sha-512 hash that you have to

474
00:21:07,980 --> 00:21:14,519
crack which computationally are much

475
00:21:10,350 --> 00:21:16,408
more complicated than md5 so bringing

476
00:21:14,519 --> 00:21:19,080
this to a point where there's even a

477
00:21:16,409 --> 00:21:20,879
more practical use is one of the things

478
00:21:19,080 --> 00:21:23,009
we want to do in the future the second

479
00:21:20,879 --> 00:21:26,070
thing we want to do is enable brute

480
00:21:23,009 --> 00:21:28,470
forcing this demo that we did runs

481
00:21:26,070 --> 00:21:28,860
through a word list albeit a very big

482
00:21:28,470 --> 00:21:31,860
word

483
00:21:28,860 --> 00:21:34,320
list in fact I combined the two biggest

484
00:21:31,860 --> 00:21:37,860
word lists I know of into one for this

485
00:21:34,320 --> 00:21:39,570
demo but word lists aren't always going

486
00:21:37,860 --> 00:21:42,360
to cut it you'll come across a password

487
00:21:39,570 --> 00:21:43,620
hash at some point that is overly

488
00:21:42,360 --> 00:21:45,240
complicated and has it been breached

489
00:21:43,620 --> 00:21:46,889
before so it's not in a word list and

490
00:21:45,240 --> 00:21:49,620
the only way to do that is to

491
00:21:46,890 --> 00:21:52,830
brute-force it we are doing some some

492
00:21:49,620 --> 00:21:55,229
internal rnd on how to brute force more

493
00:21:52,830 --> 00:21:57,210
effectively I'll keep that mostly secret

494
00:21:55,230 --> 00:21:59,360
for now because I definitely want to do

495
00:21:57,210 --> 00:22:01,919
a talk on it later

496
00:21:59,360 --> 00:22:04,770
the third thing because I'm not a total

497
00:22:01,919 --> 00:22:07,650
hypocrite as a golang port I bashed

498
00:22:04,770 --> 00:22:09,210
Python earlier not because I don't like

499
00:22:07,650 --> 00:22:11,280
Python but because I actually love

500
00:22:09,210 --> 00:22:13,850
Python and I like to give it a hard time

501
00:22:11,280 --> 00:22:16,470
sometimes but I would love one day to

502
00:22:13,850 --> 00:22:20,699
port this to go Ling so that it's even

503
00:22:16,470 --> 00:22:22,950
again more accessible easier to use and

504
00:22:20,700 --> 00:22:26,820
can come in the form of something like a

505
00:22:22,950 --> 00:22:29,100
compiled binary I know we have about a

506
00:22:26,820 --> 00:22:30,270
minute left so I guess we could open

507
00:22:29,100 --> 00:22:34,740
this up for questions

508
00:22:30,270 --> 00:22:36,900
oh slack for this so I saw a question

509
00:22:34,740 --> 00:22:41,250
here that asked if the p3 is launched

510
00:22:36,900 --> 00:22:43,460
with an ami or via user data so we did

511
00:22:41,250 --> 00:22:45,660
we did end up creating an ami for this

512
00:22:43,460 --> 00:22:47,010
we just found out that it works much

513
00:22:45,660 --> 00:22:50,820
better there were a couple of iterations

514
00:22:47,010 --> 00:22:53,549
where we did pass in user data but we

515
00:22:50,820 --> 00:22:55,649
ended up just you know landing on having

516
00:22:53,549 --> 00:22:59,370
a pre-configured ami with the installed

517
00:22:55,650 --> 00:23:07,080
Nvidia drivers and then including our

518
00:22:59,370 --> 00:23:09,178
server-side script in that ami also the

519
00:23:07,080 --> 00:23:11,010
other question that I see immediately

520
00:23:09,179 --> 00:23:12,540
from from Christians so can people use

521
00:23:11,010 --> 00:23:15,390
this today are we selling it as a

522
00:23:12,540 --> 00:23:18,629
proprietary open source so we we have no

523
00:23:15,390 --> 00:23:21,840
intention of selling this in fact in

524
00:23:18,630 --> 00:23:24,720
line with our accessibility goal I mean

525
00:23:21,840 --> 00:23:26,580
we we don't have it in a public repo now

526
00:23:24,720 --> 00:23:28,919
but our goal is to eventually have this

527
00:23:26,580 --> 00:23:32,610
completely open source for anyone to use

528
00:23:28,919 --> 00:23:34,500
they can implement it into their own AWS

529
00:23:32,610 --> 00:23:37,350
environment they can use our tool just

530
00:23:34,500 --> 00:23:38,640
like we did in the demo and we don't

531
00:23:37,350 --> 00:23:42,570
have control over it we don't want

532
00:23:38,640 --> 00:23:43,860
control over it I have

533
00:23:42,570 --> 00:23:45,990
a soft spot for the open source

534
00:23:43,860 --> 00:23:50,850
community so this will be entirely open

535
00:23:45,990 --> 00:23:52,590
source there was a follow-up to the

536
00:23:50,850 --> 00:23:55,799
previous question that I answered is the

537
00:23:52,590 --> 00:23:57,049
wordless baked-in or sourced from s3 you

538
00:23:55,799 --> 00:23:59,700
know I just realized it would actually

539
00:23:57,049 --> 00:24:02,789
probably be a great idea to have it in

540
00:23:59,700 --> 00:24:04,950
s3 so that you know from a engagement to

541
00:24:02,789 --> 00:24:07,500
engagement you can use a different word

542
00:24:04,950 --> 00:24:09,240
list and I can speak on that more

543
00:24:07,500 --> 00:24:11,519
because he actually does this in the

544
00:24:09,240 --> 00:24:14,090
field but just to answer your question

545
00:24:11,519 --> 00:24:17,399
simply it is baked into the AMI

546
00:24:14,090 --> 00:24:21,360
yeah we we put it into the ami just for

547
00:24:17,399 --> 00:24:26,129
convenience for us it should probably be

548
00:24:21,360 --> 00:24:28,379
stored in s3 the only only thing I can

549
00:24:26,129 --> 00:24:29,879
see being problematic and obviously you

550
00:24:28,379 --> 00:24:32,070
can write code to get around this but

551
00:24:29,879 --> 00:24:35,129
having it stored in s3 and not in the

552
00:24:32,070 --> 00:24:38,129
ami doesn't immediately give hash cat

553
00:24:35,129 --> 00:24:40,699
something to latch on to and use as a

554
00:24:38,129 --> 00:24:43,408
command-line argument so getting it to

555
00:24:40,700 --> 00:24:46,110
fetch from s3 is totally possible and

556
00:24:43,409 --> 00:24:48,590
then running hash cat but just putting

557
00:24:46,110 --> 00:24:52,229
it on the disk so it's already there was

558
00:24:48,590 --> 00:24:54,480
was easier for us and it's as far as the

559
00:24:52,230 --> 00:24:55,860
word lists again like I said it's it's a

560
00:24:54,480 --> 00:24:58,350
combination of the two biggest word

561
00:24:55,860 --> 00:25:00,209
lists I know and they're both public one

562
00:24:58,350 --> 00:25:01,769
is the RockYou word list and one is the

563
00:25:00,210 --> 00:25:04,320
crack station word lists you can google

564
00:25:01,769 --> 00:25:07,440
them both I combined them and cleverly

565
00:25:04,320 --> 00:25:10,158
called it rock station dot txt you can

566
00:25:07,440 --> 00:25:14,399
do the exact same thing if you want to

567
00:25:10,159 --> 00:25:16,860
yes the famous Rock you somebody asked

568
00:25:14,399 --> 00:25:20,969
just what was the total elapsed time we

569
00:25:16,860 --> 00:25:24,658
already mentioned this but from the time

570
00:25:20,970 --> 00:25:27,899
we executed the script to password crack

571
00:25:24,659 --> 00:25:31,259
was five minutes with about only three

572
00:25:27,899 --> 00:25:31,649
minutes of billable server time and fun

573
00:25:31,259 --> 00:25:34,470
fact

574
00:25:31,649 --> 00:25:35,789
AWS actually does per second billing for

575
00:25:34,470 --> 00:25:37,019
Linux instances I don't know if they

576
00:25:35,789 --> 00:25:39,870
have that up and running yet for

577
00:25:37,019 --> 00:25:43,700
windows-based instances but definitely I

578
00:25:39,870 --> 00:25:43,699
do for Linux

579
00:25:46,510 --> 00:25:58,790
do you see a couple people typing so now

580
00:25:50,540 --> 00:25:59,570
thank you all right if there are no more

581
00:25:58,790 --> 00:26:03,129
questions

582
00:25:59,570 --> 00:26:06,409
Patrick we can we can hand this oh wait

583
00:26:03,130 --> 00:26:08,240
Alex asks is this concept also possible

584
00:26:06,410 --> 00:26:09,710
with Azure and what made you go with AWS

585
00:26:08,240 --> 00:26:13,130
I can answer the second part of that

586
00:26:09,710 --> 00:26:15,830
question what made us go with AWS is one

587
00:26:13,130 --> 00:26:18,580
that we know that it's extensively

588
00:26:15,830 --> 00:26:22,610
documented and a lot of people use it

589
00:26:18,580 --> 00:26:24,860
the other reason is that again my my

590
00:26:22,610 --> 00:26:28,429
very good friend Stefan is an AWS expert

591
00:26:24,860 --> 00:26:31,490
so it just it just made sense yeah we

592
00:26:28,430 --> 00:26:35,600
don't write at this stage our tool isn't

593
00:26:31,490 --> 00:26:42,860
portable between clouds this is a doubly

594
00:26:35,600 --> 00:26:46,639
a specific how do we keep up with your

595
00:26:42,860 --> 00:26:49,070
work so so again what I'll do actually

596
00:26:46,640 --> 00:26:55,490
let me let me jump on to my first slide

597
00:26:49,070 --> 00:26:58,040
here since I know yes anymore so we do

598
00:26:55,490 --> 00:26:59,270
have a we do have a private github repo

599
00:26:58,040 --> 00:27:00,590
where we're working on this together

600
00:26:59,270 --> 00:27:02,510
there are a couple of things that we

601
00:27:00,590 --> 00:27:05,570
would need to do before we can make a

602
00:27:02,510 --> 00:27:09,580
public and just some nice to haves like

603
00:27:05,570 --> 00:27:12,169
we this instance doesn't use any

604
00:27:09,580 --> 00:27:15,500
programmatic access keys on the instance

605
00:27:12,170 --> 00:27:17,720
itself it's a big security no-no so what

606
00:27:15,500 --> 00:27:20,390
I what we you end up using is AWS roles

607
00:27:17,720 --> 00:27:22,820
and so as part of our github repo before

608
00:27:20,390 --> 00:27:24,890
we go public with this we'd want to make

609
00:27:22,820 --> 00:27:26,149
sure that like I'm working on a

610
00:27:24,890 --> 00:27:27,890
CloudFormation template right now

611
00:27:26,150 --> 00:27:34,490
that'll go out and create that iam role

612
00:27:27,890 --> 00:27:36,140
for you stuff like that also you do need

613
00:27:34,490 --> 00:27:39,290
to make sure that you have the AWS CLI

614
00:27:36,140 --> 00:27:40,970
configure it on your machine and we just

615
00:27:39,290 --> 00:27:43,159
want to create documentation about how

616
00:27:40,970 --> 00:27:46,520
to do that securely or just find good

617
00:27:43,160 --> 00:27:48,440
links on how to do that securely so yeah

618
00:27:46,520 --> 00:27:50,450
so definitely follow both of us on

619
00:27:48,440 --> 00:27:52,700
Twitter I know I will be posting with

620
00:27:50,450 --> 00:27:55,370
updates this project I I wish that the

621
00:27:52,700 --> 00:27:59,360
the repo was public today but I promise

622
00:27:55,370 --> 00:28:01,459
that it will be at some point anything

623
00:27:59,360 --> 00:28:03,500
bite you with the surrealist flow dying

624
00:28:01,460 --> 00:28:06,860
without results absolutely

625
00:28:03,500 --> 00:28:12,080
so I know it weekly we've had so xq s is

626
00:28:06,860 --> 00:28:15,439
is a fickle being I know that we we

627
00:28:12,080 --> 00:28:18,770
consistently had we had to clear the

628
00:28:15,440 --> 00:28:22,520
queue recheck the queue reread check the

629
00:28:18,770 --> 00:28:27,010
queue yeah I wouldn't say that's sqs is

630
00:28:22,520 --> 00:28:29,420
fault sorry please tell me I'm wrong you

631
00:28:27,010 --> 00:28:32,450
I don't know for some reason in our

632
00:28:29,420 --> 00:28:34,820
testing we did have some weird issues

633
00:28:32,450 --> 00:28:39,140
where when we were we had a server up

634
00:28:34,820 --> 00:28:42,080
and we immediately pinged sqs if the

635
00:28:39,140 --> 00:28:44,390
message just got there the instance

636
00:28:42,080 --> 00:28:45,590
would struggle to get it and so there

637
00:28:44,390 --> 00:28:48,049
doesn't need to be some exception

638
00:28:45,590 --> 00:28:49,490
handling where the instance like it's

639
00:28:48,049 --> 00:28:51,679
the script on the instant instance does

640
00:28:49,490 --> 00:28:55,240
like try and grab a message and if it

641
00:28:51,679 --> 00:29:00,230
can't it tries again we also had an

642
00:28:55,240 --> 00:29:03,500
issue where because the script because I

643
00:29:00,230 --> 00:29:07,490
executed on boot when we tried to go in

644
00:29:03,500 --> 00:29:10,280
and fix our a.m. eyes the server would

645
00:29:07,490 --> 00:29:11,600
wake up and then die immediately because

646
00:29:10,280 --> 00:29:13,190
that's just part of the script is for

647
00:29:11,600 --> 00:29:15,230
the instance to terminate itself so

648
00:29:13,190 --> 00:29:18,380
funny things like that happened it's

649
00:29:15,230 --> 00:29:21,230
funny how like programming languages do

650
00:29:18,380 --> 00:29:25,900
exactly what you want them to or do

651
00:29:21,230 --> 00:29:25,900
exactly what you tell them to yeah so

652
00:29:25,960 --> 00:29:29,990
David says you could take this one step

653
00:29:28,220 --> 00:29:31,870
further collaborative cluster for

654
00:29:29,990 --> 00:29:35,900
cracking with a credit and cue system

655
00:29:31,870 --> 00:29:37,820
definitely we more than once had to turn

656
00:29:35,900 --> 00:29:40,030
down the temptation of spinning up

657
00:29:37,820 --> 00:29:43,129
multiple instances and and

658
00:29:40,030 --> 00:29:45,678
simultaneously sending perhaps so spin

659
00:29:43,130 --> 00:29:47,590
up five instances with five hashes that

660
00:29:45,679 --> 00:29:50,120
we wanted to crack and send one to each

661
00:29:47,590 --> 00:29:51,139
I think if we had done that we would

662
00:29:50,120 --> 00:29:53,090
have fallen into a black hole that

663
00:29:51,140 --> 00:29:54,799
wouldn't have allowed us to actually

664
00:29:53,090 --> 00:29:56,570
have a working demo today but it's

665
00:29:54,799 --> 00:29:59,059
definitely something we thought about we

666
00:29:56,570 --> 00:30:01,340
have we have a pretty big vision for

667
00:29:59,059 --> 00:30:03,379
this moving forward yeah and you know

668
00:30:01,340 --> 00:30:06,290
the CLI command could easily be modified

669
00:30:03,380 --> 00:30:10,120
to launch five P three or four according

670
00:30:06,290 --> 00:30:10,120
to your AWS accounts off limits

671
00:30:17,250 --> 00:30:24,040
cool well some we've we've posted our

672
00:30:20,890 --> 00:30:26,530
our links to Twitter in the track

673
00:30:24,040 --> 00:30:30,340
protect channel for you to follow any

674
00:30:26,530 --> 00:30:32,170
updates on this also you know stephane

675
00:30:30,340 --> 00:30:34,330
spawn posts regularly about the work he

676
00:30:32,170 --> 00:30:35,560
does I am going to begin posting

677
00:30:34,330 --> 00:30:38,320
regularly about the kind of work that I

678
00:30:35,560 --> 00:30:40,419
do not just on this but on other things

679
00:30:38,320 --> 00:30:42,429
again like I said I also do pen tests so

680
00:30:40,420 --> 00:30:46,780
there's a wealth of information for me

681
00:30:42,430 --> 00:30:48,460
to share yeah follow us there and thanks

682
00:30:46,780 --> 00:30:50,800
thanks everybody for attending we've

683
00:30:48,460 --> 00:30:52,120
enjoyed this and I hope you have - feel

684
00:30:50,800 --> 00:30:53,590
free to reach out to us on Twitter and

685
00:30:52,120 --> 00:30:55,449
even slack while the conference is going

686
00:30:53,590 --> 00:30:57,159
on right and I would love to answer all

687
00:30:55,450 --> 00:31:00,240
of your questions if any more or two

688
00:30:57,160 --> 00:31:00,240
arise thanks guys

