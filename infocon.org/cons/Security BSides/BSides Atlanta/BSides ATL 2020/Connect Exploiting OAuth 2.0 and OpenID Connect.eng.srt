1
00:00:02,520 --> 00:00:09,719
hi everyone my name is noir Cavani here

2
00:00:07,200 --> 00:00:11,420
from Jacksonville Florida really glad to

3
00:00:09,719 --> 00:00:14,129
be here to give this presentation

4
00:00:11,420 --> 00:00:16,079
normally I would speak for hours about

5
00:00:14,129 --> 00:00:19,560
OAuth an open idea connect it's one of

6
00:00:16,079 --> 00:00:22,200
my passion but one of my talks that I'm

7
00:00:19,560 --> 00:00:23,729
very passionate about but I'll try to

8
00:00:22,200 --> 00:00:27,710
make it as short as possible I know I

9
00:00:23,730 --> 00:00:30,630
have only 25 minutes or even less now so

10
00:00:27,710 --> 00:00:32,759
quickly introduction about me my name is

11
00:00:30,630 --> 00:00:35,220
Noir people ask me how to pronounce your

12
00:00:32,759 --> 00:00:39,560
name it's kind of sells like Pinot Noir

13
00:00:35,220 --> 00:00:43,829
you know like the wine I am a QA

14
00:00:39,560 --> 00:00:45,840
security tester leads at Fidelity

15
00:00:43,829 --> 00:00:49,920
National Financial which is a title

16
00:00:45,840 --> 00:00:51,390
insurance company I my total official

17
00:00:49,920 --> 00:00:53,760
actress's test architects but I'm

18
00:00:51,390 --> 00:00:55,980
basically the lead of the QA security

19
00:00:53,760 --> 00:00:59,250
team which basically is responsible of

20
00:00:55,980 --> 00:01:02,610
testing for security vulnerabilities in

21
00:00:59,250 --> 00:01:07,319
our in-house applications I've been a

22
00:01:02,610 --> 00:01:09,299
tester developer and this is a picture

23
00:01:07,319 --> 00:01:12,630
of me I thought I wasn't sure if there

24
00:01:09,299 --> 00:01:14,999
was going to be a video so I decided to

25
00:01:12,630 --> 00:01:17,179
put a picture since I there's no face to

26
00:01:14,999 --> 00:01:19,889
face interaction I took this picture

27
00:01:17,179 --> 00:01:22,619
four weeks ago so before starting

28
00:01:19,889 --> 00:01:23,939
working from home and all of that then I

29
00:01:22,619 --> 00:01:25,709
realized that I changed a little bit

30
00:01:23,939 --> 00:01:28,258
since then so after working from home I

31
00:01:25,709 --> 00:01:30,779
look like this now this is more recent

32
00:01:28,259 --> 00:01:36,329
picture if you notice a difference I

33
00:01:30,779 --> 00:01:38,429
just shaved my just had a haircut the

34
00:01:36,329 --> 00:01:39,779
agenda for today I'm just gonna start

35
00:01:38,429 --> 00:01:42,119
talking about why I'm giving this

36
00:01:39,779 --> 00:01:45,060
presentation and then I'm gonna give a

37
00:01:42,119 --> 00:01:47,669
very brief overview or I'll try to make

38
00:01:45,060 --> 00:01:49,469
it brief about OAuth 2.0 and Open ID

39
00:01:47,669 --> 00:01:52,079
Connect then I'm going to talk about

40
00:01:49,469 --> 00:01:54,899
some general risks and mistakes with the

41
00:01:52,079 --> 00:01:57,538
OAuth protocol and implementation and

42
00:01:54,899 --> 00:01:59,700
design mistakes and then I'm gonna give

43
00:01:57,539 --> 00:02:01,289
some examples from bug bounty programs

44
00:01:59,700 --> 00:02:03,869
which is you know if you notice the

45
00:02:01,289 --> 00:02:09,420
title of this presentation is lessons

46
00:02:03,869 --> 00:02:12,240
learned from about manic programs so why

47
00:02:09,419 --> 00:02:15,750
am i giving this talk well the short

48
00:02:12,240 --> 00:02:16,610
answer is to spread awareness I see a

49
00:02:15,750 --> 00:02:19,470
lot of

50
00:02:16,610 --> 00:02:22,470
mistakes and misunderstanding going

51
00:02:19,470 --> 00:02:24,180
around about modern authorization and

52
00:02:22,470 --> 00:02:26,760
authentication protocols which are which

53
00:02:24,180 --> 00:02:31,620
are worth 2.0 and open ID Connect and

54
00:02:26,760 --> 00:02:33,359
related standards and it's it's a

55
00:02:31,620 --> 00:02:36,540
difficult subject and it's a very broad

56
00:02:33,360 --> 00:02:37,920
subject but definitely it's a critical

57
00:02:36,540 --> 00:02:39,630
subject because you know if you think

58
00:02:37,920 --> 00:02:41,010
about it this is your entry point your

59
00:02:39,630 --> 00:02:44,280
applications to your systems in

60
00:02:41,010 --> 00:02:46,829
authentication and authorization are in

61
00:02:44,280 --> 00:02:48,630
a your gateway for the users into your

62
00:02:46,830 --> 00:02:50,130
applications if you have one a bullet is

63
00:02:48,630 --> 00:02:56,640
there then obviously you have a big

64
00:02:50,130 --> 00:02:58,709
problem a lot an open ID are everywhere

65
00:02:56,640 --> 00:03:01,920
today if you look at single page

66
00:02:58,709 --> 00:03:04,830
applications they commonly use OAuth for

67
00:03:01,920 --> 00:03:06,839
authorization and authentication with a

68
00:03:04,830 --> 00:03:09,000
wide spread of micro-services today you

69
00:03:06,840 --> 00:03:11,760
also see these protocols being very

70
00:03:09,000 --> 00:03:14,190
widely used they're replacing older

71
00:03:11,760 --> 00:03:15,410
techniques such as using cookies for

72
00:03:14,190 --> 00:03:18,990
authentication and session management

73
00:03:15,410 --> 00:03:20,850
they're also replacing Sam old in some

74
00:03:18,990 --> 00:03:25,130
areas although I think sam'l is still

75
00:03:20,850 --> 00:03:25,130
valid and usable for a lot of use cases

76
00:03:25,220 --> 00:03:30,840
there are a lot of common mistakes

77
00:03:28,250 --> 00:03:32,970
either at the design level or at the

78
00:03:30,840 --> 00:03:34,680
implementation level so we're gonna give

79
00:03:32,970 --> 00:03:36,570
some examples about some of the common

80
00:03:34,680 --> 00:03:38,550
mistakes and the list is really long so

81
00:03:36,570 --> 00:03:42,150
I'm just gonna really just scratch the

82
00:03:38,550 --> 00:03:46,380
surface here one of the things that I

83
00:03:42,150 --> 00:03:50,190
have felt about OAuth is that there is a

84
00:03:46,380 --> 00:03:52,109
lack of understanding by everyone not

85
00:03:50,190 --> 00:03:54,359
everyone of course but some people don't

86
00:03:52,110 --> 00:03:57,000
fully understand these protocols and

87
00:03:54,360 --> 00:04:01,040
this applies to applications security

88
00:03:57,000 --> 00:04:03,060
analyst or InfoSec specialists

89
00:04:01,040 --> 00:04:05,100
especially that a lot of them that have

90
00:04:03,060 --> 00:04:06,360
met they don't really come from strong

91
00:04:05,100 --> 00:04:08,130
development background and these

92
00:04:06,360 --> 00:04:10,400
protocols require that you understand

93
00:04:08,130 --> 00:04:13,019
the web very well and you understand

94
00:04:10,400 --> 00:04:14,880
application development very well but it

95
00:04:13,019 --> 00:04:16,470
really not only that I actually see

96
00:04:14,880 --> 00:04:18,149
developers and senior developers who

97
00:04:16,470 --> 00:04:20,370
keep struggling with making the right

98
00:04:18,149 --> 00:04:24,989
design choices when it comes to OAuth

99
00:04:20,370 --> 00:04:27,930
and open idea connect so there's

100
00:04:24,990 --> 00:04:29,550
definitely a lack of skill set and I'm

101
00:04:27,930 --> 00:04:29,910
not sure what the solution is but this

102
00:04:29,550 --> 00:04:31,380
person

103
00:04:29,910 --> 00:04:33,330
diction comes in in a way to basically

104
00:04:31,380 --> 00:04:36,360
help people kind of like be aware about

105
00:04:33,330 --> 00:04:39,359
some of the common mistakes

106
00:04:36,360 --> 00:04:42,060
another problem is these tenors seem to

107
00:04:39,360 --> 00:04:43,830
be evolving with time there have been

108
00:04:42,060 --> 00:04:45,630
some best practices there used to be

109
00:04:43,830 --> 00:04:47,280
like this is the way you do it for

110
00:04:45,630 --> 00:04:49,560
native apps and mobile apps and now

111
00:04:47,280 --> 00:04:52,890
there is a change today in what is

112
00:04:49,560 --> 00:04:55,470
considered the best practice and some of

113
00:04:52,890 --> 00:04:58,380
the older kind of like recommendations

114
00:04:55,470 --> 00:05:00,450
are we find now then they're not really

115
00:04:58,380 --> 00:05:03,030
with the most secure way of doing things

116
00:05:00,450 --> 00:05:06,090
so now you see new recommendations and

117
00:05:03,030 --> 00:05:08,280
even new standards or sub standards that

118
00:05:06,090 --> 00:05:14,609
came to resolve some of the issues

119
00:05:08,280 --> 00:05:15,900
issues that came up over time now where

120
00:05:14,610 --> 00:05:17,760
do we learn about these mistakes and

121
00:05:15,900 --> 00:05:19,799
that's a problem that I've been thinking

122
00:05:17,760 --> 00:05:23,659
about for a while but recently I've been

123
00:05:19,800 --> 00:05:26,990
watching I decided that the best way to

124
00:05:23,660 --> 00:05:29,940
find in a common errors and problems

125
00:05:26,990 --> 00:05:31,470
insecurity is not really to look at you

126
00:05:29,940 --> 00:05:33,810
know you have some valuable resources

127
00:05:31,470 --> 00:05:35,910
like Oh a sub 10 which you know every 5

128
00:05:33,810 --> 00:05:37,320
years they come out and they gather you

129
00:05:35,910 --> 00:05:38,670
know user feedback about what are the

130
00:05:37,320 --> 00:05:41,310
common mistakes but there first of all

131
00:05:38,670 --> 00:05:43,260
they're very broad mister problems and

132
00:05:41,310 --> 00:05:45,060
second of all there are like how you

133
00:05:43,260 --> 00:05:49,080
gather this information is a very user

134
00:05:45,060 --> 00:05:53,120
feedback oriented so I realized that we

135
00:05:49,080 --> 00:05:58,020
actually have growing treasure trove of

136
00:05:53,120 --> 00:06:01,380
data about security vulnerabilities and

137
00:05:58,020 --> 00:06:05,669
that we can tap into that repository of

138
00:06:01,380 --> 00:06:08,100
information what matters for for for for

139
00:06:05,669 --> 00:06:10,049
finding this information about the bugs

140
00:06:08,100 --> 00:06:11,550
that are important for us because not

141
00:06:10,050 --> 00:06:13,710
everything that we see you know is

142
00:06:11,550 --> 00:06:15,720
necessarily you know a big problem that

143
00:06:13,710 --> 00:06:19,380
is going to cost us money and add value

144
00:06:15,720 --> 00:06:22,080
right so there's this famous code by

145
00:06:19,380 --> 00:06:23,820
Einstein that not everything that counts

146
00:06:22,080 --> 00:06:26,159
can be counted and not everything that

147
00:06:23,820 --> 00:06:28,260
can be counted counts so based on that I

148
00:06:26,160 --> 00:06:30,210
wanted to see ok what is what are the

149
00:06:28,260 --> 00:06:33,180
mistakes that really matter here how do

150
00:06:30,210 --> 00:06:35,640
we know that these bugs you know a lack

151
00:06:33,180 --> 00:06:37,830
of I don't know a header is that really

152
00:06:35,640 --> 00:06:42,020
a critical or a high issue or is that a

153
00:06:37,830 --> 00:06:43,800
low issue versus

154
00:06:42,020 --> 00:06:49,979
forging the signature

155
00:06:43,800 --> 00:06:51,870
on on some certificates right so so I

156
00:06:49,979 --> 00:06:54,210
went I decided to go to bug bounty

157
00:06:51,870 --> 00:06:55,830
programs and I think that's the that's

158
00:06:54,210 --> 00:06:58,710
the repository of information that I've

159
00:06:55,830 --> 00:07:02,280
been talking about the bug bounty

160
00:06:58,710 --> 00:07:03,539
programs are getting more widespread and

161
00:07:02,280 --> 00:07:08,159
they're they're getting larger and

162
00:07:03,539 --> 00:07:10,229
larger over time Google has paid

163
00:07:08,159 --> 00:07:13,530
apparently sick and half-million dollar

164
00:07:10,229 --> 00:07:14,639
in 2019 in bug bounty programs think

165
00:07:13,530 --> 00:07:17,369
about that six and a half million

166
00:07:14,639 --> 00:07:19,680
dollars and then increase there's the

167
00:07:17,370 --> 00:07:23,099
maximum prize to one and a half million

168
00:07:19,680 --> 00:07:26,219
dollar what I'm happening dollar if you

169
00:07:23,099 --> 00:07:29,280
find a critical security vulnerability

170
00:07:26,219 --> 00:07:31,560
in in Google products this just came I

171
00:07:29,280 --> 00:07:34,198
think in November think about that one

172
00:07:31,560 --> 00:07:37,199
bug could be worth 100 1 million and a

173
00:07:34,199 --> 00:07:40,979
half Apple also increase their maximum

174
00:07:37,199 --> 00:07:44,069
limit for bug bounty to a million dollar

175
00:07:40,979 --> 00:07:49,020
last year well then you have programs

176
00:07:44,069 --> 00:07:51,150
like you see here hacker 1h1 is a curve

177
00:07:49,020 --> 00:07:54,299
one which is a popular crowdsourcing

178
00:07:51,150 --> 00:07:56,340
platform for bug panic program and the

179
00:07:54,300 --> 00:08:00,810
other one on the right here is about

180
00:07:56,340 --> 00:08:03,779
crowd a hacker one paid 40 million

181
00:08:00,810 --> 00:08:07,169
dollars to their testers last year in

182
00:08:03,779 --> 00:08:08,969
2019 which is apparently more than all

183
00:08:07,169 --> 00:08:12,529
of that they've paid in the years before

184
00:08:08,969 --> 00:08:16,500
so so this is definitely growing

185
00:08:12,529 --> 00:08:18,900
sourcing of bugs but what's more

186
00:08:16,500 --> 00:08:21,120
importantly is that these bugs a lot of

187
00:08:18,900 --> 00:08:22,590
them are publicly disclosed bugs so you

188
00:08:21,120 --> 00:08:24,560
can go and read about them and learn

189
00:08:22,590 --> 00:08:27,810
from them so we have now like

190
00:08:24,560 --> 00:08:31,349
unprecedented repository of information

191
00:08:27,810 --> 00:08:33,750
that security researchers can use to

192
00:08:31,349 --> 00:08:37,110
basically gather empirical information

193
00:08:33,750 --> 00:08:43,049
about what is going on in the real world

194
00:08:37,110 --> 00:08:44,490
today these bugs some of them have value

195
00:08:43,049 --> 00:08:46,709
so not matter every bug in the bug

196
00:08:44,490 --> 00:08:48,720
bounty programs get assigned a reward

197
00:08:46,709 --> 00:08:51,529
and that depends on the policy of the

198
00:08:48,720 --> 00:08:54,949
company that is sponsoring the program

199
00:08:51,529 --> 00:08:57,260
but some of them have value assigned a

200
00:08:54,949 --> 00:09:00,719
couple months ago I remember I was

201
00:08:57,260 --> 00:09:04,140
PayPal paid about $20,000 for two

202
00:09:00,720 --> 00:09:06,480
different bucks each $20,000 and there

203
00:09:04,140 --> 00:09:09,150
were bugs in like the login screen of

204
00:09:06,480 --> 00:09:10,830
PayPal and if you think about it $1,000

205
00:09:09,150 --> 00:09:14,310
doesn't sound that high because if

206
00:09:10,830 --> 00:09:15,660
somebody were to exploit across the

207
00:09:14,310 --> 00:09:17,849
script in bug in the login screen of

208
00:09:15,660 --> 00:09:22,319
PayPal and steal the passwords of users

209
00:09:17,850 --> 00:09:24,870
that's really critical and so but yeah

210
00:09:22,320 --> 00:09:26,460
so so so some of them have met a value

211
00:09:24,870 --> 00:09:29,820
and you can use that value as a proxy

212
00:09:26,460 --> 00:09:32,280
measure to do to kind of like it and

213
00:09:29,820 --> 00:09:34,320
that's an idea of how important these

214
00:09:32,280 --> 00:09:36,120
bugs however this comes with a lot of

215
00:09:34,320 --> 00:09:39,680
caveat and you have to take it with a

216
00:09:36,120 --> 00:09:41,670
big grain of salt because you know

217
00:09:39,680 --> 00:09:43,620
they're for different reasons I'm not

218
00:09:41,670 --> 00:09:45,329
gonna get into right now but you know

219
00:09:43,620 --> 00:09:48,930
commas have different policies for how

220
00:09:45,330 --> 00:09:52,490
to assign money value to two bugs and

221
00:09:48,930 --> 00:09:52,489
also different companies have different

222
00:09:52,910 --> 00:10:04,250
priorities I guess so let me jump right

223
00:09:59,130 --> 00:10:06,900
into what is worth 2.0 Oh what 2.0 is a

224
00:10:04,250 --> 00:10:09,390
protocol that allows users to delegate

225
00:10:06,900 --> 00:10:12,750
access to their own resources resources

226
00:10:09,390 --> 00:10:15,560
they want a third party application this

227
00:10:12,750 --> 00:10:19,560
is a protocol used mainly for API

228
00:10:15,560 --> 00:10:21,569
authorization it was designed for API in

229
00:10:19,560 --> 00:10:23,099
in the first place but it can be used

230
00:10:21,570 --> 00:10:27,090
for a lot of other contexts but it is

231
00:10:23,100 --> 00:10:28,590
really for API in the first place there

232
00:10:27,090 --> 00:10:30,270
are different scenarios where this can

233
00:10:28,590 --> 00:10:33,090
be used can be used for server-to-server

234
00:10:30,270 --> 00:10:35,640
authentication scenarios can be used in

235
00:10:33,090 --> 00:10:37,860
browser-based apps can be used on native

236
00:10:35,640 --> 00:10:41,010
apps and mobile apps and it can even be

237
00:10:37,860 --> 00:10:44,670
used today in like consoles and TV smart

238
00:10:41,010 --> 00:10:47,069
TVs and things like that it is also

239
00:10:44,670 --> 00:10:48,870
important to focus on the fact that Oh

240
00:10:47,070 --> 00:10:50,430
what itself is designed to be an

241
00:10:48,870 --> 00:10:52,200
authorization protocol not an

242
00:10:50,430 --> 00:10:54,599
authentication protocol and that's a

243
00:10:52,200 --> 00:10:56,100
critical distinction I don't have time

244
00:10:54,600 --> 00:10:58,650
to get into the details for that but I

245
00:10:56,100 --> 00:11:00,630
always love to put this picture here and

246
00:10:58,650 --> 00:11:03,090
just to draw the attention that you know

247
00:11:00,630 --> 00:11:04,800
our stands for open authorization it's

248
00:11:03,090 --> 00:11:07,370
really for authorization for

249
00:11:04,800 --> 00:11:07,370
authentication

250
00:11:08,630 --> 00:11:12,750
all right quick example I'm just gonna

251
00:11:10,889 --> 00:11:14,730
run through a quick scenario or actually

252
00:11:12,750 --> 00:11:17,459
a quick example of real world use case

253
00:11:14,730 --> 00:11:19,350
of Olaf that I faced recently so I don't

254
00:11:17,459 --> 00:11:22,380
know how many of you are familiar with

255
00:11:19,350 --> 00:11:26,069
mint.com I mean that calm is a website

256
00:11:22,380 --> 00:11:29,240
that you can use to collect basically it

257
00:11:26,069 --> 00:11:32,040
gathers the your bank statements and

258
00:11:29,240 --> 00:11:33,810
sorry and transaction information from

259
00:11:32,040 --> 00:11:35,459
your bank accounts from different

260
00:11:33,810 --> 00:11:40,410
sources and put them in one place where

261
00:11:35,459 --> 00:11:44,459
you can do your budgets and get a quick

262
00:11:40,410 --> 00:11:46,439
look at your money and financials one of

263
00:11:44,459 --> 00:11:48,388
the things that mint has to be able to

264
00:11:46,440 --> 00:11:49,980
do is or the main thing is that it has

265
00:11:48,389 --> 00:11:52,380
to be able to connect to your back and

266
00:11:49,980 --> 00:11:55,079
on your behalf and get and collect your

267
00:11:52,380 --> 00:11:58,110
data and historically this used to be

268
00:11:55,079 --> 00:12:01,410
done by mint asking you to provide them

269
00:11:58,110 --> 00:12:04,079
with your credentials for these bags so

270
00:12:01,410 --> 00:12:06,259
you would basically give mint at con

271
00:12:04,079 --> 00:12:08,550
your bankofamerica.com

272
00:12:06,259 --> 00:12:10,529
username and password you'll give them

273
00:12:08,550 --> 00:12:12,269
your chase password you'll give them

274
00:12:10,529 --> 00:12:14,519
whatever bank accounts you have and

275
00:12:12,269 --> 00:12:19,829
obviously a lot of secure risks come

276
00:12:14,519 --> 00:12:22,589
with that so recently they released they

277
00:12:19,829 --> 00:12:24,109
started releasing new feature where now

278
00:12:22,589 --> 00:12:27,959
instead of asking you for a password

279
00:12:24,110 --> 00:12:29,970
they use now OAuth to ask you to

280
00:12:27,959 --> 00:12:31,439
authorize them mint.com

281
00:12:29,970 --> 00:12:35,339
or into it which is the parent company

282
00:12:31,440 --> 00:12:36,750
to access the bank on your behalf but

283
00:12:35,339 --> 00:12:38,910
they're not no longer collecting your

284
00:12:36,750 --> 00:12:41,490
password what happens is that they ask

285
00:12:38,910 --> 00:12:43,139
you to go to your bank and here in this

286
00:12:41,490 --> 00:12:46,199
case I have screenshot of Citibank

287
00:12:43,139 --> 00:12:48,600
website where city is asking me hey do

288
00:12:46,199 --> 00:12:53,729
you want to allow this application to

289
00:12:48,600 --> 00:12:56,779
access your credit card information on

290
00:12:53,730 --> 00:13:00,149
your behalf and if I click on authorize

291
00:12:56,779 --> 00:13:01,649
right if I click on authorize access

292
00:13:00,149 --> 00:13:03,870
then it will base the grant that access

293
00:13:01,649 --> 00:13:05,730
to mint.com method cam will never get my

294
00:13:03,870 --> 00:13:08,040
password but they will get instead an

295
00:13:05,730 --> 00:13:10,649
access token that allows them to access

296
00:13:08,040 --> 00:13:13,050
my bank and if you notice here in the

297
00:13:10,649 --> 00:13:15,230
URL you see the oauth2 endpoint so

298
00:13:13,050 --> 00:13:18,899
that's an indicator that their years ago

299
00:13:15,230 --> 00:13:20,760
in this example I want to grandma to

300
00:13:18,899 --> 00:13:21,950
come access to my bank accounts

301
00:13:20,760 --> 00:13:24,680
statements and balance

302
00:13:21,950 --> 00:13:27,350
is from terminology point of view I am

303
00:13:24,680 --> 00:13:30,349
the resource owner my statements these

304
00:13:27,350 --> 00:13:33,940
are the resources want to prove grant

305
00:13:30,350 --> 00:13:37,510
client meant that come which is a client

306
00:13:33,940 --> 00:13:40,310
accessed to my bank accounts which are

307
00:13:37,510 --> 00:13:42,110
you know the XYZ bank hero City Bank in

308
00:13:40,310 --> 00:13:46,069
this case was the authorization provider

309
00:13:42,110 --> 00:13:47,600
and also the resource provider and the

310
00:13:46,070 --> 00:13:48,800
resources that I'm giving access to them

311
00:13:47,600 --> 00:13:51,200
these are called scope

312
00:13:48,800 --> 00:13:52,630
you know what permissions I'm given to

313
00:13:51,200 --> 00:13:55,580
man that calm

314
00:13:52,630 --> 00:13:59,150
so the flow looks like this I get to

315
00:13:55,580 --> 00:14:00,260
enter in my browser the the client you

316
00:13:59,150 --> 00:14:02,449
know the URL of the client application

317
00:14:00,260 --> 00:14:05,150
that I want to use the client redirects

318
00:14:02,450 --> 00:14:08,660
me or maybe sometimes it shows a pop-up

319
00:14:05,150 --> 00:14:10,430
by either way it redirects me to the

320
00:14:08,660 --> 00:14:13,520
authorization provider in this case like

321
00:14:10,430 --> 00:14:16,250
Citibank in this example Citibank

322
00:14:13,520 --> 00:14:19,699
will authenticate me right and ask me

323
00:14:16,250 --> 00:14:23,150
for my consent if I approve that

324
00:14:19,700 --> 00:14:28,540
Citibank has access to my or rather mint

325
00:14:23,150 --> 00:14:30,890
has access to my bank information then

326
00:14:28,540 --> 00:14:33,020
the authorization provider of Citibank

327
00:14:30,890 --> 00:14:35,300
will generate another redirect back to

328
00:14:33,020 --> 00:14:37,520
the browser to redirect me back to the

329
00:14:35,300 --> 00:14:42,280
client app with an was something called

330
00:14:37,520 --> 00:14:45,920
authorization code pass in the URL that

331
00:14:42,280 --> 00:14:49,310
authorization code is then sent back to

332
00:14:45,920 --> 00:14:52,599
the client to Mendte to come and which

333
00:14:49,310 --> 00:14:55,489
on its own meant that come use that

334
00:14:52,600 --> 00:14:58,880
equation code in in addition to its own

335
00:14:55,490 --> 00:15:04,940
client secret that only meant that come

336
00:14:58,880 --> 00:15:07,790
has that it has generated with the

337
00:15:04,940 --> 00:15:09,470
Citibank of course and they use the

338
00:15:07,790 --> 00:15:14,089
authentication or the authorization code

339
00:15:09,470 --> 00:15:17,960
to essentially generate a new access

340
00:15:14,090 --> 00:15:20,000
token so now the the authorization

341
00:15:17,960 --> 00:15:21,800
provider will verify that the

342
00:15:20,000 --> 00:15:23,810
authorization code is valid it's the

343
00:15:21,800 --> 00:15:29,420
same one that it had just issued earlier

344
00:15:23,810 --> 00:15:30,890
right in this step and then it will if

345
00:15:29,420 --> 00:15:34,930
it's valid then it will generate a new

346
00:15:30,890 --> 00:15:38,710
access token that can be used to

347
00:15:34,930 --> 00:15:41,920
that the client can use to make a

348
00:15:38,710 --> 00:15:44,500
request to the API so from that point on

349
00:15:41,920 --> 00:15:47,529
men that come will be able to access the

350
00:15:44,500 --> 00:15:51,820
API that Citibank provides using the

351
00:15:47,529 --> 00:15:53,410
access token and every time of course

352
00:15:51,820 --> 00:15:55,330
the research provider has to validate

353
00:15:53,410 --> 00:16:01,480
it's a valid token and then return the

354
00:15:55,330 --> 00:16:04,000
requested data so some consideration is

355
00:16:01,480 --> 00:16:06,339
about this flow the authorization code

356
00:16:04,000 --> 00:16:08,080
is the first kind of like token that

357
00:16:06,339 --> 00:16:09,730
gets generated and this one is passing

358
00:16:08,080 --> 00:16:12,190
the URL and it's only meant for the

359
00:16:09,730 --> 00:16:14,800
redirect and it's meant to be sent to

360
00:16:12,190 --> 00:16:18,339
the user to the client or really the

361
00:16:14,800 --> 00:16:20,920
user agent so that they can exchange

362
00:16:18,339 --> 00:16:22,420
that and send it back to the client app

363
00:16:20,920 --> 00:16:24,490
and they can exchange it for access

364
00:16:22,420 --> 00:16:27,399
token this authorization code should be

365
00:16:24,490 --> 00:16:29,560
only usable only one time it's usually

366
00:16:27,399 --> 00:16:32,290
very short-lived so five minutes or less

367
00:16:29,560 --> 00:16:36,660
because it's done in as part of a series

368
00:16:32,290 --> 00:16:39,040
of redirects that are all automated and

369
00:16:36,660 --> 00:16:43,449
once its user should expire after that

370
00:16:39,040 --> 00:16:47,260
right later you get the access token the

371
00:16:43,450 --> 00:16:50,950
access token usually is a medium life

372
00:16:47,260 --> 00:16:52,959
span I've seen anything from 15 minutes

373
00:16:50,950 --> 00:16:57,100
to two hours that's where these are very

374
00:16:52,959 --> 00:16:58,390
common values the access token typically

375
00:16:57,100 --> 00:17:00,300
is only search on the server on the

376
00:16:58,390 --> 00:17:03,670
back-end server at least in this flow

377
00:17:00,300 --> 00:17:05,740
and it's usually so it's usually not

378
00:17:03,670 --> 00:17:10,480
provided to that to the client except in

379
00:17:05,740 --> 00:17:12,130
the cases of of native app and then it

380
00:17:10,480 --> 00:17:13,599
is also specific to the client in the

381
00:17:12,130 --> 00:17:15,910
resource owner so it has a combination

382
00:17:13,599 --> 00:17:17,230
that you know if I use this token this

383
00:17:15,910 --> 00:17:20,740
token can be only used for a specific

384
00:17:17,230 --> 00:17:23,230
user and to a specific clients so I

385
00:17:20,740 --> 00:17:25,540
can't use a token that was generated for

386
00:17:23,230 --> 00:17:29,500
a different application to access the

387
00:17:25,540 --> 00:17:33,370
API there's also a refresh token that is

388
00:17:29,500 --> 00:17:37,240
used for kind of like to extend the the

389
00:17:33,370 --> 00:17:40,050
offline access bit from the client to

390
00:17:37,240 --> 00:17:46,090
the authorization server so this way the

391
00:17:40,050 --> 00:17:48,669
client can make API calls to in this

392
00:17:46,090 --> 00:17:50,649
case Citibank in my in my example

393
00:17:48,670 --> 00:17:54,190
for indefinite amount of time usually

394
00:17:50,650 --> 00:17:58,090
refresh tokens are good until they are

395
00:17:54,190 --> 00:18:00,220
revoked sometimes they might have some

396
00:17:58,090 --> 00:18:03,100
lifespan of like a year or so they're

397
00:18:00,220 --> 00:18:05,559
usually very very long-lived they're

398
00:18:03,100 --> 00:18:07,629
meant for offline access and refresh

399
00:18:05,559 --> 00:18:09,580
tokens are used to generate new access

400
00:18:07,630 --> 00:18:15,040
tokens since access tokens generally

401
00:18:09,580 --> 00:18:17,049
expire within an hour or so another

402
00:18:15,040 --> 00:18:19,720
security consideration is that the

403
00:18:17,049 --> 00:18:22,960
client secret which I kinda quickly

404
00:18:19,720 --> 00:18:26,230
showed you in the in the in the flow the

405
00:18:22,960 --> 00:18:28,270
client secret is usually only used when

406
00:18:26,230 --> 00:18:33,780
you have a secure web server that it

407
00:18:28,270 --> 00:18:37,590
that is doing the tool can exchange flow

408
00:18:33,780 --> 00:18:40,690
you don't want to give this to end users

409
00:18:37,590 --> 00:18:42,159
there's no point in like if you put it

410
00:18:40,690 --> 00:18:43,900
in your native app in your single page

411
00:18:42,160 --> 00:18:45,610
application you have a big problem here

412
00:18:43,900 --> 00:18:48,910
so the client secret can be only used

413
00:18:45,610 --> 00:18:55,600
when you have a back-end web server that

414
00:18:48,910 --> 00:18:58,000
is managing access to the API there's a

415
00:18:55,600 --> 00:19:00,428
state variable that is bad pasts you

416
00:18:58,000 --> 00:19:02,020
know when the flow starts you the client

417
00:19:00,429 --> 00:19:04,000
has to generate a state variable and at

418
00:19:02,020 --> 00:19:06,040
the end of the flow the client has to

419
00:19:04,000 --> 00:19:08,440
verify that the state variable hasn't

420
00:19:06,040 --> 00:19:10,600
changed and it's still valid this is

421
00:19:08,440 --> 00:19:13,480
important to prevent soft request

422
00:19:10,600 --> 00:19:15,189
forgery attacks there are also you are a

423
00:19:13,480 --> 00:19:17,110
lot of redirects in this flow as you

424
00:19:15,190 --> 00:19:19,059
noticed so all of the redirects are

425
00:19:17,110 --> 00:19:21,399
always subject to you know the standard

426
00:19:19,059 --> 00:19:23,260
open redirect issues that we've known

427
00:19:21,400 --> 00:19:26,169
about for many years you know in any

428
00:19:23,260 --> 00:19:28,720
application you want to make sure that

429
00:19:26,169 --> 00:19:32,380
the redirect is always validated or the

430
00:19:28,720 --> 00:19:34,809
redirect URI is always validated by both

431
00:19:32,380 --> 00:19:37,780
the authorization provider and the

432
00:19:34,809 --> 00:19:40,360
client otherwise they can end up with

433
00:19:37,780 --> 00:19:43,480
situations where a malicious attacker

434
00:19:40,360 --> 00:19:46,500
can force the user to get redirected to

435
00:19:43,480 --> 00:19:49,419
a malicious site and steal their tokens

436
00:19:46,500 --> 00:19:51,880
there the flaw that I just described was

437
00:19:49,419 --> 00:19:53,260
the authorization code flow because as

438
00:19:51,880 --> 00:19:56,880
you notice there was an authorization

439
00:19:53,260 --> 00:19:56,879
code that get passed in the redirect

440
00:19:57,000 --> 00:20:01,840
flow there are other flaws there's

441
00:19:59,919 --> 00:20:02,440
episode flow which is used generally

442
00:20:01,840 --> 00:20:04,418
aimes

443
00:20:02,440 --> 00:20:07,000
single page applications and sometimes

444
00:20:04,419 --> 00:20:10,870
in native apps like mobile apps it's

445
00:20:07,000 --> 00:20:14,049
becoming less encouraged to be used let

446
00:20:10,870 --> 00:20:16,768
me say that because it has a problem

447
00:20:14,049 --> 00:20:19,570
that it doesn't support client secret

448
00:20:16,769 --> 00:20:21,700
and the reason is you don't you know the

449
00:20:19,570 --> 00:20:24,519
client in this case is a client is an

450
00:20:21,700 --> 00:20:27,549
app that the user has accessed or has

451
00:20:24,519 --> 00:20:29,710
control over right native app or single

452
00:20:27,549 --> 00:20:32,080
page application and you don't want to

453
00:20:29,710 --> 00:20:33,549
put client secret there there's no point

454
00:20:32,080 --> 00:20:36,759
because once you put it there then it's

455
00:20:33,549 --> 00:20:39,070
public so in in in this scenario the

456
00:20:36,759 --> 00:20:42,159
this flow is generally considered less

457
00:20:39,070 --> 00:20:46,379
secure than authorization code resource

458
00:20:42,159 --> 00:20:48,850
owner passwords is even even in worse

459
00:20:46,379 --> 00:20:51,039
flow in from security perspective

460
00:20:48,850 --> 00:20:53,918
because in that flow a client will

461
00:20:51,039 --> 00:20:56,980
capture the actual credentials of the

462
00:20:53,919 --> 00:20:59,950
user and then passed them to the

463
00:20:56,980 --> 00:21:02,230
authorization server this flow is only

464
00:20:59,950 --> 00:21:05,620
used is only recommended for legacy apps

465
00:21:02,230 --> 00:21:08,320
where you don't have like mainframe app

466
00:21:05,620 --> 00:21:14,080
for example or you don't have a browser

467
00:21:08,320 --> 00:21:18,158
and the only way to invoke that or get

468
00:21:14,080 --> 00:21:20,259
access tokens is to basically getting

469
00:21:18,159 --> 00:21:22,750
the password from the user directly and

470
00:21:20,259 --> 00:21:23,710
passing assets to the authorization

471
00:21:22,750 --> 00:21:26,049
provider

472
00:21:23,710 --> 00:21:27,460
there's client credential flow which is

473
00:21:26,049 --> 00:21:29,408
used in server-to-server authentication

474
00:21:27,460 --> 00:21:31,750
this is more like a service account flow

475
00:21:29,409 --> 00:21:33,700
but then there are few other flows the

476
00:21:31,750 --> 00:21:36,100
Refresh token flow is really a sub flow

477
00:21:33,700 --> 00:21:38,200
of the above you know it can be used

478
00:21:36,100 --> 00:21:41,250
with authorization code flow is just a

479
00:21:38,200 --> 00:21:44,200
way to extend offline access

480
00:21:41,250 --> 00:21:46,899
there's device flow that is more recent

481
00:21:44,200 --> 00:21:48,879
and that you can see now in things where

482
00:21:46,899 --> 00:21:52,029
you don't have web browser for example

483
00:21:48,879 --> 00:21:54,459
smart TV if you want to authorize your

484
00:21:52,029 --> 00:21:56,429
TV to access your Netflix account then

485
00:21:54,460 --> 00:21:58,960
the device flow is what's used here

486
00:21:56,429 --> 00:22:02,320
number seven is authorization code with

487
00:21:58,960 --> 00:22:04,179
pixee PK c ii pixie actually this this

488
00:22:02,320 --> 00:22:05,470
came to solve the issues with the

489
00:22:04,179 --> 00:22:07,870
implicit flow where you don't have

490
00:22:05,470 --> 00:22:09,909
client secrets this is actually today

491
00:22:07,870 --> 00:22:12,250
the recommended flow for native apps

492
00:22:09,909 --> 00:22:15,070
like mobile apps especially where you're

493
00:22:12,250 --> 00:22:16,290
able to invoke a web browser to do the

494
00:22:15,070 --> 00:22:19,799
authentication process

495
00:22:16,290 --> 00:22:21,360
but you don't have the ability to use

496
00:22:19,799 --> 00:22:24,389
client secret because it's a public

497
00:22:21,360 --> 00:22:25,889
client and then you have sam'l beer a

498
00:22:24,390 --> 00:22:28,309
certain profile that is used for

499
00:22:25,890 --> 00:22:33,750
compatibility with sam'l authentication

500
00:22:28,309 --> 00:22:36,000
flows token types there are two main

501
00:22:33,750 --> 00:22:37,770
types based on how they work there are

502
00:22:36,000 --> 00:22:39,570
the bearer token which basically says

503
00:22:37,770 --> 00:22:42,480
every time you see a client making a

504
00:22:39,570 --> 00:22:44,399
request if the request has that token

505
00:22:42,480 --> 00:22:47,880
then this request and if the token is

506
00:22:44,400 --> 00:22:50,130
valid then the request is authorized the

507
00:22:47,880 --> 00:22:52,140
bearer token is doesn't change between

508
00:22:50,130 --> 00:22:54,750
different requests until it expires of

509
00:22:52,140 --> 00:22:56,580
course there's another type of token

510
00:22:54,750 --> 00:22:58,950
called the Mac - okay our message access

511
00:22:56,580 --> 00:23:00,990
codes to again and this one relies on

512
00:22:58,950 --> 00:23:03,419
cryptographic signature of the request

513
00:23:00,990 --> 00:23:05,640
so so this every time you have a new

514
00:23:03,419 --> 00:23:08,850
request basically you hash the request

515
00:23:05,640 --> 00:23:12,660
and using a secret you generate a token

516
00:23:08,850 --> 00:23:16,439
that is only valid for the specific

517
00:23:12,660 --> 00:23:19,230
request this is helpful to prevent kind

518
00:23:16,440 --> 00:23:21,690
of like replay attacks however I have

519
00:23:19,230 --> 00:23:23,190
not seen this flowing practice yet read

520
00:23:21,690 --> 00:23:24,630
about it a lot but I still haven't seen

521
00:23:23,190 --> 00:23:26,070
an example of somebody using that flow

522
00:23:24,630 --> 00:23:28,140
yet I'm sure it is there but I haven't

523
00:23:26,070 --> 00:23:30,659
seen it the bearer token is by far the

524
00:23:28,140 --> 00:23:34,710
most common scenario then based on

525
00:23:30,660 --> 00:23:37,260
format you have JWT tokens which is JSON

526
00:23:34,710 --> 00:23:40,010
web token that's very common you'll see

527
00:23:37,260 --> 00:23:42,059
it everywhere but you can also have

528
00:23:40,010 --> 00:23:45,030
opaque tokens which is just like

529
00:23:42,059 --> 00:23:49,500
randomly generated long string right and

530
00:23:45,030 --> 00:23:53,129
those are only comprehensible by the

531
00:23:49,500 --> 00:23:57,179
authorization provider there the client

532
00:23:53,130 --> 00:23:59,400
cannot see inside them this is a quick

533
00:23:57,179 --> 00:24:03,179
example of what JWT token looks like

534
00:23:59,400 --> 00:24:06,059
there are three three parts each part is

535
00:24:03,179 --> 00:24:09,630
base64 encoded the first part is the

536
00:24:06,059 --> 00:24:12,360
header which defines how the the token

537
00:24:09,630 --> 00:24:14,309
is assigned the second part is the

538
00:24:12,360 --> 00:24:17,370
claims which is you know who the user is

539
00:24:14,309 --> 00:24:20,160
what they have access to when the token

540
00:24:17,370 --> 00:24:23,129
was issued and the last part is a

541
00:24:20,160 --> 00:24:26,000
signature that protects the token from

542
00:24:23,130 --> 00:24:26,000
tampering

543
00:24:27,960 --> 00:24:32,100
I'm gonna skip up an idea Connect since

544
00:24:29,640 --> 00:24:33,420
we're short on time but very quickly I

545
00:24:32,100 --> 00:24:35,310
really just want to say this is the

546
00:24:33,420 --> 00:24:37,740
authentication protocol that was based

547
00:24:35,310 --> 00:24:39,030
on all that's 2.0 so while all our talk

548
00:24:37,740 --> 00:24:41,280
we know wasn't intended for

549
00:24:39,030 --> 00:24:44,040
authentication open ID connect came to

550
00:24:41,280 --> 00:24:51,030
solve the authentication problem and it

551
00:24:44,040 --> 00:24:52,980
really just sits on top of OAuth now I'm

552
00:24:51,030 --> 00:24:58,889
gonna jump into some examples from what

553
00:24:52,980 --> 00:25:00,360
I've seen from bug bounty programs as I

554
00:24:58,890 --> 00:25:03,690
mentioned you know hacker Wong and

555
00:25:00,360 --> 00:25:05,580
bugcrowd are like platforms for where

556
00:25:03,690 --> 00:25:07,830
you can see a lot of publicly to school

557
00:25:05,580 --> 00:25:08,970
disclosed vulnerabilities you just go

558
00:25:07,830 --> 00:25:10,889
there and they're public you don't even

559
00:25:08,970 --> 00:25:15,210
have to sign in you can go there and

560
00:25:10,890 --> 00:25:17,370
search for bugs with specific keywords

561
00:25:15,210 --> 00:25:18,540
and this is like a quick search I did

562
00:25:17,370 --> 00:25:21,030
and this is really just part of the

563
00:25:18,540 --> 00:25:23,340
screen I had hundreds of results but

564
00:25:21,030 --> 00:25:26,430
quick results in a quick search shows

565
00:25:23,340 --> 00:25:28,770
that you know on earth I get several you

566
00:25:26,430 --> 00:25:31,200
know bugs and some of them are like in

567
00:25:28,770 --> 00:25:33,750
big you know apps like uber and Twitter

568
00:25:31,200 --> 00:25:36,770
and and so on

569
00:25:33,750 --> 00:25:40,400
there were paid thousands of dollars for

570
00:25:36,770 --> 00:25:44,280
four for the people who found these bugs

571
00:25:40,400 --> 00:25:47,100
so if we take a look at a couple of them

572
00:25:44,280 --> 00:25:50,340
in this example this is Twitter or more

573
00:25:47,100 --> 00:25:53,909
specifically periscope which is platform

574
00:25:50,340 --> 00:25:57,929
owned by Twitter in this case the user

575
00:25:53,910 --> 00:26:00,780
or the the tester was able to find that

576
00:25:57,930 --> 00:26:01,710
there was unvalidated redirect in the

577
00:26:00,780 --> 00:26:04,530
redirect URI

578
00:26:01,710 --> 00:26:06,930
so rather than redirecting the user to

579
00:26:04,530 --> 00:26:09,180
periscope that TV effort they walking

580
00:26:06,930 --> 00:26:11,970
with Twitter they can be redirected back

581
00:26:09,180 --> 00:26:14,040
to attacker comm slash periscope TV

582
00:26:11,970 --> 00:26:16,380
which is obviously in a malicious site

583
00:26:14,040 --> 00:26:18,320
or an example of the malicious sites nor

584
00:26:16,380 --> 00:26:20,730
real one

585
00:26:18,320 --> 00:26:21,899
this bug although this is classified

586
00:26:20,730 --> 00:26:23,130
here as cross-site scripting this is not

587
00:26:21,900 --> 00:26:26,640
really cross the script and this is an

588
00:26:23,130 --> 00:26:29,340
open redirect this bug was paid $7,000

589
00:26:26,640 --> 00:26:31,410
and I think this is fascinating and this

590
00:26:29,340 --> 00:26:35,899
is very very like if you think about it

591
00:26:31,410 --> 00:26:35,900
it's very simple and basic type of issue

592
00:26:36,380 --> 00:26:41,299
another example of

593
00:26:38,940 --> 00:26:47,190
unvalidated redirects in this case

594
00:26:41,299 --> 00:26:51,408
facebook or and uber combination of you

595
00:26:47,190 --> 00:26:53,609
know logging into uber with Facebook I

596
00:26:51,409 --> 00:26:55,139
don't I'm not sure about Facebook

597
00:26:53,609 --> 00:26:56,639
there's no Facebook here I think oh

598
00:26:55,139 --> 00:27:00,090
there it is Facebook yeah it is using

599
00:26:56,639 --> 00:27:01,439
facebook login essentially it's more

600
00:27:00,090 --> 00:27:03,418
complex here in this scenario there is a

601
00:27:01,440 --> 00:27:05,519
chain of redirects but they lead out

602
00:27:03,419 --> 00:27:08,999
essentially be having these are being

603
00:27:05,519 --> 00:27:11,309
redirected to malicious site this

604
00:27:08,999 --> 00:27:13,799
example here it's actually cross

605
00:27:11,309 --> 00:27:15,899
tripping through redirect URL so it's

606
00:27:13,799 --> 00:27:18,658
it's a probably a combination of on

607
00:27:15,899 --> 00:27:21,539
validate unvalidated redirect but also

608
00:27:18,659 --> 00:27:23,489
the way that they were presenting the

609
00:27:21,539 --> 00:27:25,320
redirects back to the user it was

610
00:27:23,489 --> 00:27:26,639
possible for the attacker to inject a

611
00:27:25,320 --> 00:27:28,109
script

612
00:27:26,639 --> 00:27:29,519
therefore across description and if you

613
00:27:28,109 --> 00:27:30,418
think about it as I mentioned earlier

614
00:27:29,519 --> 00:27:32,190
cross-site scripting on the

615
00:27:30,419 --> 00:27:33,840
authentication process is really

616
00:27:32,190 --> 00:27:36,749
dangerous because it allows an attacker

617
00:27:33,840 --> 00:27:39,299
to steal either password or access

618
00:27:36,749 --> 00:27:47,879
tokens essentially account takeover

619
00:27:39,299 --> 00:27:49,590
right so next example Shopify it's

620
00:27:47,879 --> 00:27:51,238
really a privilege escalation the

621
00:27:49,590 --> 00:27:53,309
details of this bugs were not fully

622
00:27:51,239 --> 00:27:55,049
disclosed but they basically say that

623
00:27:53,309 --> 00:27:58,859
there was a lack of foundation of the

624
00:27:55,049 --> 00:28:02,970
claims in the token that is passed to

625
00:27:58,859 --> 00:28:08,309
the stalky app here and this is called a

626
00:28:02,970 --> 00:28:09,840
sake app part of Shopify so privilege

627
00:28:08,309 --> 00:28:12,059
escalation if you're not validating the

628
00:28:09,840 --> 00:28:16,889
claims or maybe you're not validating

629
00:28:12,059 --> 00:28:20,070
the the token is signed by the the party

630
00:28:16,889 --> 00:28:21,449
that issued the token then it is easy to

631
00:28:20,070 --> 00:28:23,249
tamper with the token and inject

632
00:28:21,450 --> 00:28:25,470
whenever you want and that can lead to

633
00:28:23,249 --> 00:28:30,210
either account takeovers or privilege

634
00:28:25,470 --> 00:28:34,470
escalation issues here's another example

635
00:28:30,210 --> 00:28:38,580
of spoofing tokens in this case the JWT

636
00:28:34,470 --> 00:28:40,710
token was spoof upon or forcible and the

637
00:28:38,580 --> 00:28:43,439
reason this was possible is because the

638
00:28:40,710 --> 00:28:45,779
you know the key that is used to sign a

639
00:28:43,440 --> 00:28:49,649
token was actually in the JavaScript

640
00:28:45,779 --> 00:28:51,119
code in the client app so back to the

641
00:28:49,649 --> 00:28:52,530
point that you know you don't give the

642
00:28:51,119 --> 00:28:54,570
client secret or any

643
00:28:52,530 --> 00:28:57,450
secrets to public clients you know a

644
00:28:54,570 --> 00:28:59,010
browser JavaScript app is a public

645
00:28:57,450 --> 00:29:03,020
client when you give it to users then

646
00:28:59,010 --> 00:29:06,810
it's no longer secret so in this case

647
00:29:03,020 --> 00:29:09,210
the tester was able to find that the the

648
00:29:06,810 --> 00:29:10,889
the secret that was used to generate the

649
00:29:09,210 --> 00:29:12,810
tokens was in the JavaScript code and

650
00:29:10,890 --> 00:29:16,560
they were able to generate spoofed

651
00:29:12,810 --> 00:29:21,090
tokens and bypass the authentication and

652
00:29:16,560 --> 00:29:25,470
the authorization flow this is my last

653
00:29:21,090 --> 00:29:27,030
example CSRF on that seems to be also a

654
00:29:25,470 --> 00:29:28,710
pretty common problem and there are a

655
00:29:27,030 --> 00:29:30,750
lot of different techniques to prevent

656
00:29:28,710 --> 00:29:33,360
that you know the general technique is

657
00:29:30,750 --> 00:29:35,220
to use a CSRF token and validate that

658
00:29:33,360 --> 00:29:38,580
but in the case of earth protocol

659
00:29:35,220 --> 00:29:41,310
there's also state variable that has you

660
00:29:38,580 --> 00:29:45,300
know value or has importance in in

661
00:29:41,310 --> 00:29:46,710
preventing CSRF attacks that a lot of

662
00:29:45,300 --> 00:29:49,860
developers don't think much about it

663
00:29:46,710 --> 00:29:51,630
because states the initial initial

664
00:29:49,860 --> 00:29:54,419
purpose when state parameter was

665
00:29:51,630 --> 00:29:56,460
included in the RFC of oh it wasn't

666
00:29:54,420 --> 00:29:58,110
meant for security it wasn't meant for

667
00:29:56,460 --> 00:30:00,360
CSRF protection it was meant to

668
00:29:58,110 --> 00:30:03,510
encapsulate the state of the application

669
00:30:00,360 --> 00:30:06,120
before the authorization flow happens by

670
00:30:03,510 --> 00:30:08,730
turn tada it has a critical value in

671
00:30:06,120 --> 00:30:10,350
preventing CSRF attacks in an

672
00:30:08,730 --> 00:30:17,130
authorization actually more like

673
00:30:10,350 --> 00:30:19,679
implicit code flows so I mentioned again

674
00:30:17,130 --> 00:30:22,980
the token hijacking with CSRF for

675
00:30:19,680 --> 00:30:25,490
cross-site request forgery again using

676
00:30:22,980 --> 00:30:28,050
the state parameter is critical here

677
00:30:25,490 --> 00:30:30,660
leaking authorization codes or access

678
00:30:28,050 --> 00:30:32,790
token valid redirects we talked about

679
00:30:30,660 --> 00:30:35,250
that talking hijacking by switching

680
00:30:32,790 --> 00:30:37,590
clients when you validate the access

681
00:30:35,250 --> 00:30:39,590
token you always want to validate that

682
00:30:37,590 --> 00:30:43,830
it is meant for the clients that

683
00:30:39,590 --> 00:30:46,139
generated that token sometimes

684
00:30:43,830 --> 00:30:48,419
client-side form abilities in a crisis

685
00:30:46,140 --> 00:30:50,220
crypting allows you to steer access

686
00:30:48,420 --> 00:30:52,080
tokens because you know back in the day

687
00:30:50,220 --> 00:30:55,740
when we used to cook it for for managing

688
00:30:52,080 --> 00:30:57,120
session cookie has had an HTTP only flag

689
00:30:55,740 --> 00:30:59,340
that you know a lot of us are familiar

690
00:30:57,120 --> 00:31:01,320
with that is meant to prevent JavaScript

691
00:30:59,340 --> 00:31:02,939
from accessing the token but in the case

692
00:31:01,320 --> 00:31:05,439
of a single page application for example

693
00:31:02,940 --> 00:31:07,179
where Chavez

694
00:31:05,440 --> 00:31:10,029
needs to access the token because it

695
00:31:07,179 --> 00:31:15,009
needs to pass it to the API there's no

696
00:31:10,029 --> 00:31:17,139
equivalent to HTTP only in for access

697
00:31:15,009 --> 00:31:19,690
tokens and access tokens are often

698
00:31:17,139 --> 00:31:22,360
stored in the web storage in the web

699
00:31:19,690 --> 00:31:23,649
browser storage so in case you have a

700
00:31:22,360 --> 00:31:25,928
cross-site scripting issue for example

701
00:31:23,649 --> 00:31:28,779
in your application then your access

702
00:31:25,929 --> 00:31:32,710
tokens are immediately exposed to the

703
00:31:28,779 --> 00:31:34,509
attacker finally well not really but

704
00:31:32,710 --> 00:31:36,070
exposure of client secret I mentioned

705
00:31:34,509 --> 00:31:37,840
that you know this is seems to be a

706
00:31:36,070 --> 00:31:39,370
pretty common issue in when when

707
00:31:37,840 --> 00:31:40,870
developers put the client secret in

708
00:31:39,370 --> 00:31:42,789
their mobile app for example and they'll

709
00:31:40,870 --> 00:31:46,090
release it a mobile app can be reversed

710
00:31:42,789 --> 00:31:48,850
engineered it's easy to get those client

711
00:31:46,090 --> 00:31:51,789
secrets more things to consider in

712
00:31:48,850 --> 00:31:53,168
always enforce HTTPS I don't even know

713
00:31:51,789 --> 00:31:54,179
why I'm mentioning that everybody should

714
00:31:53,169 --> 00:31:57,370
know that by now

715
00:31:54,179 --> 00:31:59,019
no HTTPS means everything is compromised

716
00:31:57,370 --> 00:32:00,219
right you know the whole flow is you

717
00:31:59,019 --> 00:32:03,850
know it's useless if you don't have

718
00:32:00,220 --> 00:32:06,220
HTTPS Everywhere only use the

719
00:32:03,850 --> 00:32:08,500
permissions that ya needs validate

720
00:32:06,220 --> 00:32:12,669
validate validate validate redirect URI

721
00:32:08,500 --> 00:32:17,500
state non JWT signatures X whether the

722
00:32:12,669 --> 00:32:20,440
token has expired or not and the that

723
00:32:17,500 --> 00:32:21,879
the client is really the tokens are and

724
00:32:20,440 --> 00:32:26,950
the authorization code is issued to the

725
00:32:21,879 --> 00:32:29,320
white client there's one final risk that

726
00:32:26,950 --> 00:32:31,990
I found very interesting it's not really

727
00:32:29,320 --> 00:32:36,279
risking a lot itself but it was more of

728
00:32:31,990 --> 00:32:38,889
a social engineering attack that came up

729
00:32:36,279 --> 00:32:40,929
a couple of years ago on Google Docs or

730
00:32:38,889 --> 00:32:42,309
local and I'm if you look at this

731
00:32:40,929 --> 00:32:46,419
screenshot if you notice something weird

732
00:32:42,309 --> 00:32:49,779
about this screenshot this was warm that

733
00:32:46,419 --> 00:32:51,940
spread out very quickly between Gmail

734
00:32:49,779 --> 00:32:55,210
users and you basically get an email

735
00:32:51,940 --> 00:32:57,009
from somebody you know that says hey I

736
00:32:55,210 --> 00:32:59,350
shared a document with you click on this

737
00:32:57,009 --> 00:33:01,419
link to open the document and the link

738
00:32:59,350 --> 00:33:02,830
is a Google link so it's not like we've

739
00:33:01,419 --> 00:33:05,110
trained users to look at the links and

740
00:33:02,830 --> 00:33:07,299
validates they've the domain of the link

741
00:33:05,110 --> 00:33:12,490
in this case it was a Google link

742
00:33:07,299 --> 00:33:15,340
because it was you know a request to to

743
00:33:12,490 --> 00:33:17,590
use the OAuth flow in Google to provide

744
00:33:15,340 --> 00:33:19,179
access to a third party application and

745
00:33:17,590 --> 00:33:21,220
the third party application name was

746
00:33:19,180 --> 00:33:24,310
ducks now this is not the real Google

747
00:33:21,220 --> 00:33:28,540
Docs this is a fake Google Docs app that

748
00:33:24,310 --> 00:33:30,730
wanted to access the users email reads

749
00:33:28,540 --> 00:33:33,760
and delete and manage your email it also

750
00:33:30,730 --> 00:33:37,330
wanted to access your contacts so for a

751
00:33:33,760 --> 00:33:38,890
lot of users who are not really aware of

752
00:33:37,330 --> 00:33:40,929
social engine even like people who are

753
00:33:38,890 --> 00:33:43,600
trained on social engineering phishing

754
00:33:40,930 --> 00:33:46,120
attacks this is difficult to spot

755
00:33:43,600 --> 00:33:48,310
because there's the URL here on this

756
00:33:46,120 --> 00:33:49,810
page was Google right so there's not a

757
00:33:48,310 --> 00:33:54,490
lot of things that we teach users to

758
00:33:49,810 --> 00:33:56,139
avoid apply here but essentially you

759
00:33:54,490 --> 00:33:57,850
know Google Docs you know the really the

760
00:33:56,140 --> 00:33:59,830
only red flag that I would think of that

761
00:33:57,850 --> 00:34:02,139
you know why would Google Docs need

762
00:33:59,830 --> 00:34:04,750
access to your email I mean Google has

763
00:34:02,140 --> 00:34:07,060
access to Google right so it shouldn't

764
00:34:04,750 --> 00:34:09,310
really need to ask for this permission

765
00:34:07,060 --> 00:34:10,840
so it spread out very quickly and I

766
00:34:09,310 --> 00:34:14,739
think millions of users were impacted

767
00:34:10,840 --> 00:34:18,870
within like few hours so I thought that

768
00:34:14,739 --> 00:34:20,770
was very interesting attack summary alas

769
00:34:18,870 --> 00:34:23,469
vulnerabilities are very common

770
00:34:20,770 --> 00:34:25,540
unfortunately there are too many points

771
00:34:23,469 --> 00:34:29,290
of failure the protocol is complex and

772
00:34:25,540 --> 00:34:31,330
it's evolving the consequences of a

773
00:34:29,290 --> 00:34:33,909
vulnerability can be severe you know an

774
00:34:31,330 --> 00:34:36,000
account takeover an authorization PI

775
00:34:33,909 --> 00:34:40,359
pass or authentication pipe as sometimes

776
00:34:36,000 --> 00:34:41,350
privilege escalation etc and I think

777
00:34:40,360 --> 00:34:43,330
we're going to see more and more of

778
00:34:41,350 --> 00:34:46,480
those problems as you know this is

779
00:34:43,330 --> 00:34:47,980
becoming more prevalent and I really

780
00:34:46,480 --> 00:34:51,150
think there's a short shortage of

781
00:34:47,980 --> 00:34:53,530
spilitt skill set that's Givet skill set

782
00:34:51,150 --> 00:34:56,680
of people who understand these protocols

783
00:34:53,530 --> 00:34:59,290
and who are able to find issues and to

784
00:34:56,679 --> 00:35:02,470
also defend against issues like that and

785
00:34:59,290 --> 00:35:06,100
with that I hope I didn't go over time

786
00:35:02,470 --> 00:35:09,910
well I guess I did this is Yvette yeah

787
00:35:06,100 --> 00:35:13,930
you did it's ok and I am actually going

788
00:35:09,910 --> 00:35:16,990
to jump in and have you go answer

789
00:35:13,930 --> 00:35:18,549
questions on slack ones like got it I

790
00:35:16,990 --> 00:35:20,620
will answer questions on stack thank you

791
00:35:18,550 --> 00:35:22,000
everyone I really appreciate that thanks

792
00:35:20,620 --> 00:35:24,359
know are we appreciate it

793
00:35:22,000 --> 00:35:24,360
thank you

