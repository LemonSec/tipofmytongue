1
00:00:02,620 --> 00:00:07,720
we want to make sure that we thank all

2
00:00:04,870 --> 00:00:10,540
of our sponsors for supporting this

3
00:00:07,720 --> 00:00:11,650
year's virtual conference especially in

4
00:00:10,540 --> 00:00:14,948
light of the fact that they all chose to

5
00:00:11,650 --> 00:00:16,600
stay with us even though we transition

6
00:00:14,949 --> 00:00:19,179
from a physical to a virtual event so

7
00:00:16,600 --> 00:00:20,980
again diamond level Warner media gold

8
00:00:19,179 --> 00:00:23,499
level Kennesaw State University Kohl's

9
00:00:20,980 --> 00:00:26,160
college and the KSU Department of

10
00:00:23,499 --> 00:00:30,038
Information Systems Bishop Fox coal fire

11
00:00:26,160 --> 00:00:32,820
genuine parts company and NCR at the

12
00:00:30,039 --> 00:00:35,740
crystal level critical path and synopsis

13
00:00:32,820 --> 00:00:37,870
at the Silver level Aaron's binary

14
00:00:35,740 --> 00:00:41,800
Defense Black Hills Information Security

15
00:00:37,870 --> 00:00:45,339
Cora light and guide point security at

16
00:00:41,800 --> 00:00:47,559
the bronze level NCC group a couple of

17
00:00:45,340 --> 00:00:51,370
in-kind sponsors yesterday we had great

18
00:00:47,560 --> 00:00:54,010
training from EC Council and also today

19
00:00:51,370 --> 00:00:55,930
we've got great great relationship

20
00:00:54,010 --> 00:00:58,599
working with a secure code warrior for

21
00:00:55,930 --> 00:01:01,269
the virtual CTF that they are running

22
00:00:58,600 --> 00:01:02,920
over in that track today we would also

23
00:01:01,270 --> 00:01:04,600
like to thank the following individuals

24
00:01:02,920 --> 00:01:06,999
and organizations for contributing to

25
00:01:04,599 --> 00:01:09,280
our raffle prize effort crosshair

26
00:01:06,999 --> 00:01:11,158
information technology Jo gray and

27
00:01:09,280 --> 00:01:14,289
information and offensive security and

28
00:01:11,159 --> 00:01:15,549
pentester lab and so get used to hearing

29
00:01:14,289 --> 00:01:18,460
that you will hear that multiple times

30
00:01:15,549 --> 00:01:20,079
throughout the day so at this point in

31
00:01:18,460 --> 00:01:22,649
time I would like for everybody to

32
00:01:20,079 --> 00:01:24,779
welcome Shane pedan who will be talking

33
00:01:22,649 --> 00:01:27,759
running us through his presentation

34
00:01:24,780 --> 00:01:30,249
conquering the cloud defense in depth

35
00:01:27,759 --> 00:01:31,929
strategies for Amazon Web Services let

36
00:01:30,249 --> 00:01:34,719
me stop sharing my screen here and then

37
00:01:31,929 --> 00:01:35,350
Shane it will be yours there you go

38
00:01:34,719 --> 00:01:41,048
thank you

39
00:01:35,350 --> 00:01:42,939
all right guys I'm Shane Keaton as Andy

40
00:01:41,049 --> 00:01:48,549
mentioned also former Kennesaw State

41
00:01:42,939 --> 00:01:50,619
Alumni went to school and today I'm

42
00:01:48,549 --> 00:01:55,990
going to be talking about a defense in

43
00:01:50,619 --> 00:01:57,939
depth for Amazon Web Services I've got a

44
00:01:55,990 --> 00:02:00,009
Q&A section at the end of the

45
00:01:57,939 --> 00:02:02,469
presentation so I'm going to minimize

46
00:02:00,009 --> 00:02:04,950
slack or just try to keep it in the

47
00:02:02,469 --> 00:02:08,019
corner of the eye of my otherwise Miya

48
00:02:04,950 --> 00:02:09,160
Miya ATD is going to get the best of me

49
00:02:08,020 --> 00:02:16,349
I'm going to go crazy

50
00:02:09,160 --> 00:02:16,349
so AWS is a really interesting topic

51
00:02:17,549 --> 00:02:24,489
so for this talk I'm going to keep it

52
00:02:20,110 --> 00:02:26,980
kind of maybe maybe just like kind of

53
00:02:24,489 --> 00:02:28,120
semi technical but not hyper-technical I

54
00:02:26,980 --> 00:02:31,119
know that there's probably some

55
00:02:28,120 --> 00:02:33,849
engineers in the in the session that

56
00:02:31,120 --> 00:02:38,230
probably had mega expertise that vastly

57
00:02:33,849 --> 00:02:41,738
outweighs my own so by all means forgive

58
00:02:38,230 --> 00:02:47,108
me if I get anything wrong and actually

59
00:02:41,739 --> 00:02:49,240
up I'll kick in Who I am so as I

60
00:02:47,109 --> 00:02:50,860
mentioned

61
00:02:49,240 --> 00:02:53,230
I haven't mentioned yet I am a

62
00:02:50,860 --> 00:02:54,760
consultant like a vet our keynote

63
00:02:53,230 --> 00:02:57,010
speaker and have actually worked with a

64
00:02:54,760 --> 00:03:03,040
bit on past projects with crossed paths

65
00:02:57,010 --> 00:03:05,170
it's a small world I'm not an engineer I

66
00:03:03,040 --> 00:03:07,900
did do some development back in the day

67
00:03:05,170 --> 00:03:10,480
I'm a former IT guy from an earlier

68
00:03:07,900 --> 00:03:12,820
career but day-to-day I don't turn the

69
00:03:10,480 --> 00:03:15,390
gear so why should you listen to

70
00:03:12,820 --> 00:03:17,890
anything that I have to say about AWS

71
00:03:15,390 --> 00:03:19,779
I'm usually on the other side on the

72
00:03:17,890 --> 00:03:22,829
audit side of the house so usually doing

73
00:03:19,780 --> 00:03:26,500
a security assessment on it's scanning

74
00:03:22,830 --> 00:03:29,490
reviewing policies including even the

75
00:03:26,500 --> 00:03:32,920
technical policies actually within AWS

76
00:03:29,490 --> 00:03:36,940
configurations and then I'm also a pin

77
00:03:32,920 --> 00:03:39,970
test peer reviewer I'm pretty pretty bad

78
00:03:36,940 --> 00:03:41,590
at pin testing but I do a lot of pure of

79
00:03:39,970 --> 00:03:43,510
you and I'm good at picking things out

80
00:03:41,590 --> 00:03:45,970
of them asking the hard questions and

81
00:03:43,510 --> 00:03:48,220
looking at them from the perspective of

82
00:03:45,970 --> 00:03:52,120
my client and also as a business owner

83
00:03:48,220 --> 00:03:55,390
and a stakeholder so I read a ton of pin

84
00:03:52,120 --> 00:03:57,490
tests in risk 360 my team is pushing to

85
00:03:55,390 --> 00:04:00,700
actually have some amazing pen testers

86
00:03:57,490 --> 00:04:01,570
so I'm constantly also seeing how AWS is

87
00:04:00,700 --> 00:04:03,760
getting gamed

88
00:04:01,570 --> 00:04:06,130
and seeing where clients are failing and

89
00:04:03,760 --> 00:04:08,410
those patterns that emerge over and over

90
00:04:06,130 --> 00:04:10,540
and I'll share some of those of those as

91
00:04:08,410 --> 00:04:12,760
we go through my defensive death

92
00:04:10,540 --> 00:04:15,489
strategy because it's really largely

93
00:04:12,760 --> 00:04:17,890
driven off of really the state three or

94
00:04:15,490 --> 00:04:21,370
four issues that we see again and again

95
00:04:17,890 --> 00:04:24,430
at pin cysts and I also helped clients

96
00:04:21,370 --> 00:04:27,490
develop controls so where are offset

97
00:04:24,430 --> 00:04:29,500
team where I work are always attacking

98
00:04:27,490 --> 00:04:31,450
I'm usually on the other side helping

99
00:04:29,500 --> 00:04:33,340
companies figure out how to design their

100
00:04:31,450 --> 00:04:36,760
environment either to meet certain

101
00:04:33,340 --> 00:04:39,190
compliance needs especially HIPAA and

102
00:04:36,760 --> 00:04:41,170
PCI you know you have to think a lot

103
00:04:39,190 --> 00:04:42,880
about how you design your AWS

104
00:04:41,170 --> 00:04:44,950
environment to meet some of these more

105
00:04:42,880 --> 00:04:47,650
stringent industry and regulatory

106
00:04:44,950 --> 00:04:50,440
standards so we're usually thinking from

107
00:04:47,650 --> 00:04:53,020
both a compliance perspective and also

108
00:04:50,440 --> 00:04:54,880
purely a harness perspective and

109
00:04:53,020 --> 00:04:58,990
avoiding a lot of the pitfalls that you

110
00:04:54,880 --> 00:05:01,450
see happen over and over again and over

111
00:04:58,990 --> 00:05:02,999
you know the time I've been looking at

112
00:05:01,450 --> 00:05:05,248
AWS environm

113
00:05:02,999 --> 00:05:06,989
which spend six years and is really

114
00:05:05,249 --> 00:05:09,629
ramped up a lot over the last three

115
00:05:06,989 --> 00:05:11,518
years I've been fortunate enough to see

116
00:05:09,629 --> 00:05:14,279
everything from the wow that's awesome

117
00:05:11,519 --> 00:05:17,009
to the are you kidding these sadly I've

118
00:05:14,279 --> 00:05:19,379
seen the whole gamut probably probably

119
00:05:17,009 --> 00:05:21,689
60 to 70 different companies at this

120
00:05:19,379 --> 00:05:24,869
point over them the life of my career

121
00:05:21,689 --> 00:05:27,629
most of them are high-growth startups if

122
00:05:24,869 --> 00:05:29,489
you pull out your phone in scroll third

123
00:05:27,629 --> 00:05:32,669
of the appleís I've probably seen the

124
00:05:29,489 --> 00:05:34,318
AWS environment behind at least a few of

125
00:05:32,669 --> 00:05:38,369
those apps that you have on your phone

126
00:05:34,319 --> 00:05:41,159
so I'm really really lucky um as we go

127
00:05:38,369 --> 00:05:43,110
through this talk ba means like I said

128
00:05:41,159 --> 00:05:45,360
they're select messages up there we'll

129
00:05:43,110 --> 00:05:48,089
see it in the end and I'll give you some

130
00:05:45,360 --> 00:05:49,499
context about what we're we're talking

131
00:05:48,089 --> 00:05:53,639
about here where we see the biggest

132
00:05:49,499 --> 00:05:55,889
issues so the the vast majority of

133
00:05:53,639 --> 00:05:58,199
issues that we see in AWS are related to

134
00:05:55,889 --> 00:06:00,089
miss configuration and poor commits

135
00:05:58,199 --> 00:06:03,149
tremendous right and those in turn lead

136
00:06:00,089 --> 00:06:07,699
to insider threat a lot more times than

137
00:06:03,149 --> 00:06:11,309
often because AWS is so complex that

138
00:06:07,699 --> 00:06:13,079
it's it's easy to hide backdoors in it

139
00:06:11,309 --> 00:06:14,639
if you just don't have a well governed

140
00:06:13,079 --> 00:06:17,489
environment in a well controlled

141
00:06:14,639 --> 00:06:20,879
environment and these these issues

142
00:06:17,489 --> 00:06:24,029
spandy span companies and organizations

143
00:06:20,879 --> 00:06:26,519
of all sizes in the last two years even

144
00:06:24,029 --> 00:06:29,899
all the way up to US Department of

145
00:06:26,519 --> 00:06:32,999
Defense there was even a consultant for

146
00:06:29,899 --> 00:06:35,249
the Republican National Committee an

147
00:06:32,999 --> 00:06:37,559
analytics firm that gave away all of our

148
00:06:35,249 --> 00:06:40,079
boat better a few years ago so that's

149
00:06:37,559 --> 00:06:42,269
all out there you know Accenture have

150
00:06:40,079 --> 00:06:46,259
another large consulting firm they got

151
00:06:42,269 --> 00:06:48,479
hit with poorly managed s3 buckets which

152
00:06:46,259 --> 00:06:52,439
are basically online storage buckets

153
00:06:48,479 --> 00:06:55,438
awhile back and according to Gartner all

154
00:06:52,439 --> 00:06:58,049
of this boils them for the most part to

155
00:06:55,439 --> 00:07:00,749
poor access management and poor

156
00:06:58,049 --> 00:07:05,210
configuration and then somebody taking

157
00:07:00,749 --> 00:07:07,190
advantage of that so

158
00:07:05,210 --> 00:07:10,400
how is this really different from what

159
00:07:07,190 --> 00:07:13,100
has always been happy you know I say

160
00:07:10,400 --> 00:07:15,138
security in real life you know are these

161
00:07:13,100 --> 00:07:18,080
really just the same problems I believe

162
00:07:15,139 --> 00:07:21,800
existed is this just a another people

163
00:07:18,080 --> 00:07:23,870
problem like like another IT problem I'd

164
00:07:21,800 --> 00:07:27,289
argue no it's actually bigger than the

165
00:07:23,870 --> 00:07:31,370
19 because the cloud has created a new

166
00:07:27,289 --> 00:07:33,680
breed of IT IT professionals that have

167
00:07:31,370 --> 00:07:36,050
to have very different skill sets than

168
00:07:33,680 --> 00:07:39,650
what we previously saw in last

169
00:07:36,050 --> 00:07:42,349
generations IT personnel so in the past

170
00:07:39,650 --> 00:07:44,150
you could get away really with having a

171
00:07:42,349 --> 00:07:47,330
strong perimeter a strong fire

172
00:07:44,150 --> 00:07:49,909
walled-off Network and then from that

173
00:07:47,330 --> 00:07:52,219
fire one off network you can sometimes

174
00:07:49,910 --> 00:07:54,169
get away with having some really good

175
00:07:52,220 --> 00:07:56,419
security appliances and security

176
00:07:54,169 --> 00:07:58,698
utilities inside that network that we're

177
00:07:56,419 --> 00:08:00,830
very actively working on your behalf and

178
00:07:58,699 --> 00:08:04,340
supporting a lot the most common attacks

179
00:08:00,830 --> 00:08:06,318
and kind of feel good with having a

180
00:08:04,340 --> 00:08:09,049
really insecure environment that is

181
00:08:06,319 --> 00:08:11,659
actually somewhat secure and hard to

182
00:08:09,050 --> 00:08:13,729
hard to attack if you're an attacker and

183
00:08:11,659 --> 00:08:17,630
when you have these big enterprise-grade

184
00:08:13,729 --> 00:08:20,719
defenses in place web infrastructure is

185
00:08:17,630 --> 00:08:23,479
a lot different because it's so scalable

186
00:08:20,719 --> 00:08:26,449
it's so quick to change and it's all

187
00:08:23,479 --> 00:08:28,699
just up there and internet connected by

188
00:08:26,449 --> 00:08:31,070
nature of what it is that it's very easy

189
00:08:28,699 --> 00:08:34,669
to accidentally open it up to the public

190
00:08:31,070 --> 00:08:36,559
world and you also I found in my

191
00:08:34,669 --> 00:08:39,620
experience have a lot more people

192
00:08:36,559 --> 00:08:42,588
interacting with it a lot more developer

193
00:08:39,620 --> 00:08:44,300
teams a lot more engineering teams and

194
00:08:42,589 --> 00:08:47,140
whatnot and they're usually doing it

195
00:08:44,300 --> 00:08:49,790
programmatically so you don't usually

196
00:08:47,140 --> 00:08:51,680
have like a small team of network

197
00:08:49,790 --> 00:08:53,360
engineers that guard these firewalls

198
00:08:51,680 --> 00:08:54,069
like you know like it's their crown

199
00:08:53,360 --> 00:08:56,300
jewels

200
00:08:54,070 --> 00:08:57,350
instead you have a lot of different

201
00:08:56,300 --> 00:09:00,920
teams setting up different

202
00:08:57,350 --> 00:09:03,500
infrastructure across the array of

203
00:09:00,920 --> 00:09:05,360
whatever AWS sets the companies

204
00:09:03,500 --> 00:09:07,459
purchased and sometimes things got a

205
00:09:05,360 --> 00:09:10,130
sink sometimes teams aren't following

206
00:09:07,459 --> 00:09:12,380
the same change procedures you know in

207
00:09:10,130 --> 00:09:14,120
teams start to grow organically or that

208
00:09:12,380 --> 00:09:16,430
get different cultures some are more

209
00:09:14,120 --> 00:09:17,750
locked down than others so we see a lot

210
00:09:16,430 --> 00:09:20,120
Harvard actually locked

211
00:09:17,750 --> 00:09:23,090
down you margaret's incontrolable and

212
00:09:20,120 --> 00:09:26,630
it's it's really just due to how fast

213
00:09:23,090 --> 00:09:29,840
things move in the cloud so we're about

214
00:09:26,630 --> 00:09:33,620
to start getting into my strategies I've

215
00:09:29,840 --> 00:09:35,750
developed these basically as a starting

216
00:09:33,620 --> 00:09:37,970
point this is that the in buff will be

217
00:09:35,750 --> 00:09:40,700
on list of things you should do these

218
00:09:37,970 --> 00:09:42,740
are basically the foundations to meet

219
00:09:40,700 --> 00:09:48,200
both security and compliance

220
00:09:42,740 --> 00:09:50,720
requirements as we go through all of

221
00:09:48,200 --> 00:09:51,770
these can be much many more layers of

222
00:09:50,720 --> 00:09:54,530
deeper than what they are

223
00:09:51,770 --> 00:09:57,170
and I've also just tried to cut keep the

224
00:09:54,530 --> 00:09:59,300
conversation and options limited to AWS

225
00:09:57,170 --> 00:10:01,270
centric solutions there's a lot of

226
00:09:59,300 --> 00:10:04,310
third-party solutions that are amazing

227
00:10:01,270 --> 00:10:06,740
but we can talk for days that could be

228
00:10:04,310 --> 00:10:09,109
that that's a conference in of itself

229
00:10:06,740 --> 00:10:10,640
you know it's called blackhat you know I

230
00:10:09,110 --> 00:10:14,140
mean basically everyone I'm selling

231
00:10:10,640 --> 00:10:17,210
their stuff so as we go through this

232
00:10:14,140 --> 00:10:19,699
think about it is this is a base one two

233
00:10:17,210 --> 00:10:22,339
to make sure that you just have your

234
00:10:19,700 --> 00:10:23,900
basics checked off and then think about

235
00:10:22,339 --> 00:10:26,990
ways that you can build upon it from

236
00:10:23,900 --> 00:10:32,300
there so we'll kick into a strategy

237
00:10:26,990 --> 00:10:35,200
number one log some there's a certain

238
00:10:32,300 --> 00:10:39,140
amount of logging with an AWS that is

239
00:10:35,200 --> 00:10:41,240
enabled by default and AWS is logging

240
00:10:39,140 --> 00:10:44,630
solutions called cloud trail and

241
00:10:41,240 --> 00:10:47,600
basically AWS is driven completely by AP

242
00:10:44,630 --> 00:10:50,810
dust so everything is these programmable

243
00:10:47,600 --> 00:10:52,490
interfaces and on the backend that works

244
00:10:50,810 --> 00:10:53,930
a lot different than what your typical

245
00:10:52,490 --> 00:10:58,670
Windows Active Directory environment

246
00:10:53,930 --> 00:11:00,530
used to look like and AWS is really good

247
00:10:58,670 --> 00:11:02,660
about allowing you to sup all that

248
00:11:00,530 --> 00:11:05,780
information up but I've seen some

249
00:11:02,660 --> 00:11:08,360
companies that either scale back their

250
00:11:05,780 --> 00:11:10,880
logging or maybe they just weren't

251
00:11:08,360 --> 00:11:12,710
enabling it enabling cloud routes

252
00:11:10,880 --> 00:11:14,839
everywhere that this should be and not

253
00:11:12,710 --> 00:11:17,810
getting a holistic picture of everything

254
00:11:14,839 --> 00:11:21,350
that's happening in the organization so

255
00:11:17,810 --> 00:11:24,020
the first thing you have to do is enable

256
00:11:21,350 --> 00:11:28,370
logging because if you can't recreate

257
00:11:24,020 --> 00:11:29,990
history you can't track down things that

258
00:11:28,370 --> 00:11:31,550
are happening in the background

259
00:11:29,990 --> 00:11:33,110
if you can't invest

260
00:11:31,550 --> 00:11:36,290
incidents that have happened in the past

261
00:11:33,110 --> 00:11:38,090
I mean you're you have no way of getting

262
00:11:36,290 --> 00:11:40,430
to the root cause of what's happening to

263
00:11:38,090 --> 00:11:42,020
seeing what's happening or detecting it

264
00:11:40,430 --> 00:11:44,420
you're basically flying blind

265
00:11:42,020 --> 00:11:47,750
another big things we've seen in pen

266
00:11:44,420 --> 00:11:50,270
test is they're pre-built modules

267
00:11:47,750 --> 00:11:52,340
pre-built pen test modules that are open

268
00:11:50,270 --> 00:11:54,920
source anybody can grab that are made to

269
00:11:52,340 --> 00:11:56,930
attack logs and what they will do is not

270
00:11:54,920 --> 00:11:58,250
necessarily kill login you're disabled

271
00:11:56,930 --> 00:12:00,800
but they'll go in and try to

272
00:11:58,250 --> 00:12:03,410
strategically limit logging or Optus

273
00:12:00,800 --> 00:12:07,550
give them or or destroy certain logs

274
00:12:03,410 --> 00:12:09,230
that may may be damaging or reveal what

275
00:12:07,550 --> 00:12:12,319
they're doing in the environment so my

276
00:12:09,230 --> 00:12:16,040
tip number one is you get ax access lock

277
00:12:12,320 --> 00:12:18,170
access rights to logs and then also

278
00:12:16,040 --> 00:12:21,490
making sure that things like logs around

279
00:12:18,170 --> 00:12:24,439
s3 buckets which are your storage and

280
00:12:21,490 --> 00:12:26,390
basically simple storage with an AWS

281
00:12:24,440 --> 00:12:28,970
make sure that those logs are also

282
00:12:26,390 --> 00:12:31,160
protected and encrypted so that you

283
00:12:28,970 --> 00:12:34,510
can't see who's accessing what are the

284
00:12:31,160 --> 00:12:37,520
clear and that's another great point

285
00:12:34,510 --> 00:12:40,550
logs aren't necessarily encrypted by

286
00:12:37,520 --> 00:12:42,500
default another mistake and challenge we

287
00:12:40,550 --> 00:12:44,930
see customers with is not understanding

288
00:12:42,500 --> 00:12:50,570
where that shared responsibility matrix

289
00:12:44,930 --> 00:12:53,540
between AWS and the company ends and

290
00:12:50,570 --> 00:12:56,090
begins so people might assume oh it's

291
00:12:53,540 --> 00:12:58,730
AWS it's secure well yes

292
00:12:56,090 --> 00:13:00,860
AWS does a good job of securing the

293
00:12:58,730 --> 00:13:02,210
underlying infrastructure but that

294
00:13:00,860 --> 00:13:04,010
doesn't mean they're encrypting all your

295
00:13:02,210 --> 00:13:05,920
stuff by the fall and that doesn't mean

296
00:13:04,010 --> 00:13:08,360
that they're limiting access by default

297
00:13:05,920 --> 00:13:10,430
so you got to make sure also that you're

298
00:13:08,360 --> 00:13:12,950
actually tripped in your lives and then

299
00:13:10,430 --> 00:13:16,609
finally you gotta make sure that you're

300
00:13:12,950 --> 00:13:19,160
retaining them so you can set life cycle

301
00:13:16,610 --> 00:13:22,820
policies and you can store those logs in

302
00:13:19,160 --> 00:13:24,860
this three but if you don't set them to

303
00:13:22,820 --> 00:13:27,050
meet whatever industry requirements or

304
00:13:24,860 --> 00:13:28,760
regulatory requirements you're bold to

305
00:13:27,050 --> 00:13:30,079
you might get yourself in trouble it

306
00:13:28,760 --> 00:13:32,000
just shouldn't assume that it's

307
00:13:30,080 --> 00:13:34,100
happening you shouldn't assume that oh

308
00:13:32,000 --> 00:13:35,660
well if I ever have an incident AWS is

309
00:13:34,100 --> 00:13:38,300
taking care of me and I'm just gonna go

310
00:13:35,660 --> 00:13:41,270
grab them all a really good example is a

311
00:13:38,300 --> 00:13:42,790
HIPAA it has a 7 year retention on

312
00:13:41,270 --> 00:13:44,499
anything related to health care

313
00:13:42,790 --> 00:13:46,718
processing and transact

314
00:13:44,499 --> 00:13:50,229
that are happening so if you're a

315
00:13:46,719 --> 00:13:52,389
company that's touching pH I a lot of

316
00:13:50,229 --> 00:13:54,429
companies do you know that compliance

317
00:13:52,389 --> 00:13:56,049
people know this stuff that maybe the

318
00:13:54,429 --> 00:13:57,968
technical people don't and maybe that

319
00:13:56,049 --> 00:14:01,509
business requirement never got fed down

320
00:13:57,969 --> 00:14:03,579
to them and they're like well Henk we

321
00:14:01,509 --> 00:14:05,169
have to start app logs you know cloud

322
00:14:03,579 --> 00:14:07,478
trust for seven years and nobody ever

323
00:14:05,169 --> 00:14:09,189
told me that the end of the default is

324
00:14:07,479 --> 00:14:11,049
nowhere near seven years you know maybe

325
00:14:09,189 --> 00:14:13,059
they or maybe we had a policy that was

326
00:14:11,049 --> 00:14:15,339
just given rid of them so that we're

327
00:14:13,059 --> 00:14:17,769
just not incurring these extra cost of

328
00:14:15,339 --> 00:14:20,529
retaining these logs indefinitely or for

329
00:14:17,769 --> 00:14:22,089
an extended period of time you gotta

330
00:14:20,529 --> 00:14:25,059
have those conversations and figure that

331
00:14:22,089 --> 00:14:27,489
out and then another gotcha I've found

332
00:14:25,059 --> 00:14:31,299
that is worth noting is centrally

333
00:14:27,489 --> 00:14:34,539
managing those logs as you start scaling

334
00:14:31,299 --> 00:14:36,489
up their AWS infrastructure teams will

335
00:14:34,539 --> 00:14:38,109
start distributing their infrastructure

336
00:14:36,489 --> 00:14:40,749
across what are called availability

337
00:14:38,109 --> 00:14:44,469
zones this allows you to basically have

338
00:14:40,749 --> 00:14:46,359
one set of AWS infrastructure say on the

339
00:14:44,469 --> 00:14:48,159
west coast and another on the East Coast

340
00:14:46,359 --> 00:14:50,470
and it helps you achieve certain

341
00:14:48,159 --> 00:14:52,299
availability objectives or business

342
00:14:50,470 --> 00:14:55,779
continuity objectives there may be some

343
00:14:52,299 --> 00:14:57,728
failover objectives if you're not

344
00:14:55,779 --> 00:14:59,559
centrally logging and pulling all your

345
00:14:57,729 --> 00:15:01,869
logs together you're going to start

346
00:14:59,559 --> 00:15:03,238
having divisions of truth and it's going

347
00:15:01,869 --> 00:15:06,729
to get really hard to do effective

348
00:15:03,239 --> 00:15:08,939
investigations or tracking or if you're

349
00:15:06,729 --> 00:15:13,269
feeding those logs into something like

350
00:15:08,939 --> 00:15:16,449
another AWS tool cloud watch which can

351
00:15:13,269 --> 00:15:18,519
ingest AWS logs and visualize them

352
00:15:16,449 --> 00:15:19,959
before you and do automated learning on

353
00:15:18,519 --> 00:15:22,359
them and all that you got to get them

354
00:15:19,959 --> 00:15:24,279
all together at the same place so that's

355
00:15:22,359 --> 00:15:28,539
another thing I've seen some teams get

356
00:15:24,279 --> 00:15:30,430
tripped up on so after you've done with

357
00:15:28,539 --> 00:15:33,460
your logs neck

358
00:15:30,430 --> 00:15:37,149
good step is to start locking down the

359
00:15:33,460 --> 00:15:39,970
console so in AWS use different ways of

360
00:15:37,149 --> 00:15:41,980
accessing your environment you can log

361
00:15:39,970 --> 00:15:43,810
into the console which is basically go

362
00:15:41,980 --> 00:15:45,670
to the website login with your

363
00:15:43,810 --> 00:15:48,219
credentials and just start pointing and

364
00:15:45,670 --> 00:15:50,020
clicking this is probably what's

365
00:15:48,220 --> 00:15:51,910
comfortable to your more traditional IT

366
00:15:50,020 --> 00:15:53,380
employee that's just working in Active

367
00:15:51,910 --> 00:15:56,290
Directory

368
00:15:53,380 --> 00:15:57,939
I know Active Directory has moved a lot

369
00:15:56,290 --> 00:16:00,250
more towards PowerShell and a lot more

370
00:15:57,940 --> 00:16:02,320
of that is command driven more and more

371
00:16:00,250 --> 00:16:04,720
all the time but traditionally back when

372
00:16:02,320 --> 00:16:06,570
I worked at night to you it was all it

373
00:16:04,720 --> 00:16:09,040
was all front-end pointing and clicking

374
00:16:06,570 --> 00:16:12,279
AWS will give you that same capability

375
00:16:09,040 --> 00:16:14,170
to an extent in the console but then

376
00:16:12,279 --> 00:16:16,390
outside of that console a lot of other

377
00:16:14,170 --> 00:16:18,849
people are interacting with it through

378
00:16:16,390 --> 00:16:21,120
software development kits an API access

379
00:16:18,850 --> 00:16:23,620
and that's where I see the majority

380
00:16:21,120 --> 00:16:27,370
pretty much everybody working in it

381
00:16:23,620 --> 00:16:29,110
that's really AWS so that means the

382
00:16:27,370 --> 00:16:30,040
console almost becomes a security

383
00:16:29,110 --> 00:16:31,959
liability

384
00:16:30,040 --> 00:16:35,980
everybody's going over the command line

385
00:16:31,959 --> 00:16:38,469
to get to AWS and this route access in

386
00:16:35,980 --> 00:16:42,430
the console kind of gets neglected and

387
00:16:38,470 --> 00:16:45,029
forgotten so after you you know get your

388
00:16:42,430 --> 00:16:48,459
logging in place you've got a AWS setup

389
00:16:45,029 --> 00:16:49,959
my next big one is now locked on that

390
00:16:48,459 --> 00:16:54,489
console access and don't let anybody

391
00:16:49,959 --> 00:16:56,380
have access to it that doesn't usually

392
00:16:54,490 --> 00:16:58,600
that's gonna be limited to like some

393
00:16:56,380 --> 00:17:02,080
cyber liability engineering guys and

394
00:16:58,600 --> 00:17:04,900
maybe maybe a high-level executive and

395
00:17:02,080 --> 00:17:08,589
the company like the CTO somebody like

396
00:17:04,900 --> 00:17:11,559
that and then you also gotta put MFA

397
00:17:08,589 --> 00:17:14,169
multi-factor authentication on it MFA is

398
00:17:11,559 --> 00:17:16,959
actually also a compliance requirement

399
00:17:14,170 --> 00:17:19,510
now for a lot of the popular standards

400
00:17:16,959 --> 00:17:22,540
that you see out there it actually like

401
00:17:19,510 --> 00:17:25,540
PCI explicitly says hey all admin can't

402
00:17:22,540 --> 00:17:27,760
console access you gotta admit so in

403
00:17:25,540 --> 00:17:29,830
addition to just being smart it's

404
00:17:27,760 --> 00:17:31,120
probably also a compliance requirement

405
00:17:29,830 --> 00:17:34,080
for your company if you're dealing with

406
00:17:31,120 --> 00:17:38,439
most any kind of sensitive data at all

407
00:17:34,080 --> 00:17:41,020
I'd also say after you put MFA make sure

408
00:17:38,440 --> 00:17:42,580
that password strong and then go into

409
00:17:41,020 --> 00:17:46,320
your user

410
00:17:42,580 --> 00:17:49,870
ws I am identity access management

411
00:17:46,320 --> 00:17:51,939
console and start really paring down all

412
00:17:49,870 --> 00:17:55,959
those permissions to anybody that has

413
00:17:51,940 --> 00:17:58,360
that console access and also make sure

414
00:17:55,960 --> 00:18:00,700
that you're not letting people that have

415
00:17:58,360 --> 00:18:04,240
console access also have programmatic

416
00:18:00,700 --> 00:18:06,760
access on the same account it's it's

417
00:18:04,240 --> 00:18:08,740
really a big no-no just to allow people

418
00:18:06,760 --> 00:18:10,539
to both hit it on the command line and

419
00:18:08,740 --> 00:18:12,700
also be able to interactively log in

420
00:18:10,539 --> 00:18:16,600
with the same account

421
00:18:12,700 --> 00:18:19,570
I see teams consistently allow this to

422
00:18:16,600 --> 00:18:21,340
happen and I think it comes up over and

423
00:18:19,570 --> 00:18:22,750
over again that everybody's like no no

424
00:18:21,340 --> 00:18:24,939
you need you need to have the

425
00:18:22,750 --> 00:18:27,159
segregation of duties just so that we

426
00:18:24,940 --> 00:18:29,019
can really lock down and how people are

427
00:18:27,159 --> 00:18:30,789
accessing this if one account is

428
00:18:29,019 --> 00:18:35,559
compromised and don't automatically get

429
00:18:30,789 --> 00:18:36,039
access to the other good tip I have root

430
00:18:35,559 --> 00:18:38,110
account

431
00:18:36,039 --> 00:18:40,389
nobody should really be interacting

432
00:18:38,110 --> 00:18:43,539
programmatically with your environment

433
00:18:40,389 --> 00:18:45,969
is fruit you do need to be as an

434
00:18:43,539 --> 00:18:49,269
identifiable user in identity access

435
00:18:45,970 --> 00:18:52,299
management so delete those API keys

436
00:18:49,269 --> 00:18:54,370
just let the root login as root when you

437
00:18:52,299 --> 00:18:56,379
need it and that's kind of a break last

438
00:18:54,370 --> 00:18:59,439
situation you should be logging in as

439
00:18:56,380 --> 00:19:01,539
the root account anyway and don't let

440
00:18:59,440 --> 00:19:04,330
root do anything but actually hit that

441
00:19:01,539 --> 00:19:08,470
admin account and I've seen some

442
00:19:04,330 --> 00:19:10,899
companies go as far as printing up those

443
00:19:08,470 --> 00:19:12,580
word accounts the credentials and

444
00:19:10,899 --> 00:19:13,689
putting them in a fire safe and then

445
00:19:12,580 --> 00:19:17,049
also putting them in like a

446
00:19:13,690 --> 00:19:19,539
cryptographic key management system like

447
00:19:17,049 --> 00:19:21,279
a hardware security module something

448
00:19:19,539 --> 00:19:22,990
like that and then just not letting

449
00:19:21,279 --> 00:19:25,179
anybody who's root ever nobody actually

450
00:19:22,990 --> 00:19:28,019
knows the password unless they need to

451
00:19:25,179 --> 00:19:30,700
go get it for some reason and then also

452
00:19:28,019 --> 00:19:33,340
going back to strategy number one make

453
00:19:30,700 --> 00:19:36,010
sure that crown cloud trail logging is

454
00:19:33,340 --> 00:19:38,649
it able especially on anything in the

455
00:19:36,010 --> 00:19:42,100
root account is doing and I've seen some

456
00:19:38,649 --> 00:19:44,649
teams set up hi automatically flag high

457
00:19:42,100 --> 00:19:48,549
risk alerts if root does anything if

458
00:19:44,649 --> 00:19:52,000
root touches anything at all that's an

459
00:19:48,549 --> 00:19:53,440
incident and that's an instant security

460
00:19:52,000 --> 00:19:55,960
incident in their mind and it gets

461
00:19:53,440 --> 00:19:57,999
elevated to the top of the queue

462
00:19:55,960 --> 00:20:02,559
and it seemed as almost like a breach

463
00:19:57,999 --> 00:20:04,450
because nobody should have room so

464
00:20:02,559 --> 00:20:10,230
strategy number three this is a tough

465
00:20:04,450 --> 00:20:13,360
one develop an I am management strategy

466
00:20:10,230 --> 00:20:15,330
this is this has always been hard

467
00:20:13,360 --> 00:20:16,928
everywhere even back in the days of

468
00:20:15,330 --> 00:20:18,580
Active Directory

469
00:20:16,929 --> 00:20:20,950
I guess Active Directory is still a

470
00:20:18,580 --> 00:20:23,619
thing I just see less of it personally

471
00:20:20,950 --> 00:20:26,019
but even in Active Directory it's really

472
00:20:23,619 --> 00:20:30,090
hard to manage access because in large

473
00:20:26,019 --> 00:20:32,830
organizations it gets unload ly fast an

474
00:20:30,090 --> 00:20:35,470
identity access management I feel it's

475
00:20:32,830 --> 00:20:36,639
also a little bit tougher to my manager

476
00:20:35,470 --> 00:20:38,710
because everything is so

477
00:20:36,639 --> 00:20:41,529
programmatically driven like when you

478
00:20:38,710 --> 00:20:43,389
went to when you want to issue new

479
00:20:41,529 --> 00:20:47,320
permissions usually those are taking

480
00:20:43,389 --> 00:20:49,979
form is a Java JavaScript object

481
00:20:47,320 --> 00:20:52,539
notation like your programmatically

482
00:20:49,980 --> 00:20:55,600
setting up permissions and spinning it

483
00:20:52,539 --> 00:20:57,129
to AWS and your provisioning permissions

484
00:20:55,600 --> 00:20:59,379
that way and it gets really hard

485
00:20:57,129 --> 00:21:01,539
sometimes for somebody that doesn't have

486
00:20:59,379 --> 00:21:03,908
console access and they're just working

487
00:21:01,539 --> 00:21:05,529
programmatically to really tell what

488
00:21:03,909 --> 00:21:08,409
their giving permission what and what

489
00:21:05,529 --> 00:21:11,289
the consequences it also gets hard

490
00:21:08,409 --> 00:21:14,259
because within ia I in there there are

491
00:21:11,289 --> 00:21:16,029
hundreds of pre-built permissions that

492
00:21:14,259 --> 00:21:18,929
you can choose from and they all do very

493
00:21:16,029 --> 00:21:18,929
different things

494
00:21:19,870 --> 00:21:25,350
so coming up with a good come up with a

495
00:21:23,230 --> 00:21:29,260
good eye and strategy first starts with

496
00:21:25,350 --> 00:21:31,120
policies and that's really uncool to a

497
00:21:29,260 --> 00:21:32,950
lot of security people but it they

498
00:21:31,120 --> 00:21:35,919
require stepping back as a management

499
00:21:32,950 --> 00:21:37,510
team and saying who needs permission to

500
00:21:35,920 --> 00:21:40,059
do what what is our environment

501
00:21:37,510 --> 00:21:48,520
comprised of and what groups do do we

502
00:21:40,059 --> 00:21:50,710
need to to use to get this done so once

503
00:21:48,520 --> 00:21:53,230
you get those basic policies then you

504
00:21:50,710 --> 00:21:57,100
got to start mapping different roles or

505
00:21:53,230 --> 00:22:00,220
users to user groups and the goal should

506
00:21:57,100 --> 00:22:03,189
be to really make that is least

507
00:22:00,220 --> 00:22:07,480
privileged as possible that can get hard

508
00:22:03,190 --> 00:22:08,800
sometimes it can get hard for a number

509
00:22:07,480 --> 00:22:10,809
of reasons sometimes it's just hard to

510
00:22:08,800 --> 00:22:15,700
tell what groups have the ability to do

511
00:22:10,809 --> 00:22:18,580
what and then number four

512
00:22:15,700 --> 00:22:22,060
you couldn't take a lease privilege

513
00:22:18,580 --> 00:22:26,590
approach and start using AWS security

514
00:22:22,060 --> 00:22:29,860
token services so think of it this way

515
00:22:26,590 --> 00:22:31,570
you can create your baseline of AWS

516
00:22:29,860 --> 00:22:33,729
roles what they need to have permission

517
00:22:31,570 --> 00:22:37,000
to I think you could create a situation

518
00:22:33,730 --> 00:22:40,570
where users actually have to use a sink

519
00:22:37,000 --> 00:22:44,140
called AWS STS security token service to

520
00:22:40,570 --> 00:22:45,810
dynamically be given access and assume

521
00:22:44,140 --> 00:22:49,000
those roles of them the access

522
00:22:45,810 --> 00:22:53,590
automatically the automatically expires

523
00:22:49,000 --> 00:22:57,010
after a short time so let me go over to

524
00:22:53,590 --> 00:22:59,260
the next slide real quick so

525
00:22:57,010 --> 00:23:03,430
best-in-class companies I've seen spend

526
00:22:59,260 --> 00:23:06,220
a lot of time on AWS I am they use it as

527
00:23:03,430 --> 00:23:07,840
a foundation of their their program

528
00:23:06,220 --> 00:23:10,960
their information security program

529
00:23:07,840 --> 00:23:14,020
usually I am serves as a launching point

530
00:23:10,960 --> 00:23:16,840
into other solutions some of the best

531
00:23:14,020 --> 00:23:19,180
solutions I seen is people will have

532
00:23:16,840 --> 00:23:21,250
either Active Directory or to sweep in

533
00:23:19,180 --> 00:23:21,820
them integrate that with the octo r1

534
00:23:21,250 --> 00:23:24,090
login

535
00:23:21,820 --> 00:23:27,310
these are single sign-on products and

536
00:23:24,090 --> 00:23:30,010
though they'll basically let optimum

537
00:23:27,310 --> 00:23:32,290
login stand as an authentication engine

538
00:23:30,010 --> 00:23:35,200
between more of an enterprise solution

539
00:23:32,290 --> 00:23:39,010
that you're a charm Enterprise IT teams

540
00:23:35,200 --> 00:23:41,800
would interact with and you'll manage

541
00:23:39,010 --> 00:23:44,620
user identities based on you know if

542
00:23:41,800 --> 00:23:45,580
they actually work here at a minimum you

543
00:23:44,620 --> 00:23:48,070
know whether they actually have a

544
00:23:45,580 --> 00:23:50,649
legitimate account between their G suite

545
00:23:48,070 --> 00:23:53,620
or their gmail address their enterprise

546
00:23:50,650 --> 00:23:55,900
address or the Microsoft account

547
00:23:53,620 --> 00:23:58,090
that'll integrate with octo or one login

548
00:23:55,900 --> 00:24:00,940
and then those will integrate with AWS

549
00:23:58,090 --> 00:24:02,620
and you can actually tie users together

550
00:24:00,940 --> 00:24:06,750
between what they should have permission

551
00:24:02,620 --> 00:24:10,899
with in AWS time that I am back to your

552
00:24:06,750 --> 00:24:15,580
you're basically orgy suite an ad user

553
00:24:10,900 --> 00:24:17,290
access management permissions then often

554
00:24:15,580 --> 00:24:19,720
when logging give you the ability to a

555
00:24:17,290 --> 00:24:23,980
layer multi-factor authentication on top

556
00:24:19,720 --> 00:24:25,780
of it so you can actually layer on that

557
00:24:23,980 --> 00:24:28,720
extra layer of security and then you

558
00:24:25,780 --> 00:24:31,360
could even go a step further

559
00:24:28,720 --> 00:24:34,470
I seen some teams also use AWS security

560
00:24:31,360 --> 00:24:36,610
token services which are those temporary

561
00:24:34,470 --> 00:24:39,910
credentials that are dynamically

562
00:24:36,610 --> 00:24:42,550
generated and in short the way it works

563
00:24:39,910 --> 00:24:45,370
is that user will use their Active

564
00:24:42,550 --> 00:24:49,600
Directory or DC credentials to more or

565
00:24:45,370 --> 00:24:52,570
less authenticate AWS they'll be pre

566
00:24:49,600 --> 00:24:55,030
assigned roles with an AI am that the

567
00:24:52,570 --> 00:24:57,370
team has the management team has already

568
00:24:55,030 --> 00:25:00,190
developed and created a baseline for an

569
00:24:57,370 --> 00:25:03,189
AWS and then those users will make a

570
00:25:00,190 --> 00:25:06,160
request or AWS I am will make a request

571
00:25:03,190 --> 00:25:08,200
for a temporary security tool and it

572
00:25:06,160 --> 00:25:10,510
will give you that token you'll assume

573
00:25:08,200 --> 00:25:12,370
that role and be given permission for a

574
00:25:10,510 --> 00:25:14,260
short period of time you do whatever

575
00:25:12,370 --> 00:25:16,120
administrative features you need to do

576
00:25:14,260 --> 00:25:20,170
in the environment and then the

577
00:25:16,120 --> 00:25:21,969
permissions expire this alleviates one

578
00:25:20,170 --> 00:25:24,610
of the big problems we see in pin tests

579
00:25:21,970 --> 00:25:27,400
where users also will be given

580
00:25:24,610 --> 00:25:29,709
I am permissions that have a security

581
00:25:27,400 --> 00:25:32,200
key attached to it and that key allows

582
00:25:29,710 --> 00:25:35,500
them to programmatically access the

583
00:25:32,200 --> 00:25:39,430
environment usually over SSH which is a

584
00:25:35,500 --> 00:25:41,410
remote access protocol so using the

585
00:25:39,430 --> 00:25:43,660
security token services it gives you

586
00:25:41,410 --> 00:25:45,280
automatic Hakeem rotation and it keeps

587
00:25:43,660 --> 00:25:47,500
people from having that persistent

588
00:25:45,280 --> 00:25:49,149
access and then the integration with the

589
00:25:47,500 --> 00:25:51,550
enterprise security side of the house

590
00:25:49,150 --> 00:25:54,130
gives you the extra benefit of the time

591
00:25:51,550 --> 00:25:57,010
back here I am users whether they should

592
00:25:54,130 --> 00:25:59,200
be legitimately given access back to the

593
00:25:57,010 --> 00:26:01,240
HR function of the business which is

594
00:25:59,200 --> 00:26:03,430
usually working with enterprise security

595
00:26:01,240 --> 00:26:05,560
to make to provision those email

596
00:26:03,430 --> 00:26:11,080
accounts more or less at the time that

597
00:26:05,560 --> 00:26:12,940
the employee is hired so hi I am huge

598
00:26:11,080 --> 00:26:16,510
deal we could do a whole talk on that

599
00:26:12,940 --> 00:26:18,670
and I actually if you guys have any

600
00:26:16,510 --> 00:26:20,770
permit questions on that in particular

601
00:26:18,670 --> 00:26:22,750
dump those in slack because I have a lot

602
00:26:20,770 --> 00:26:25,889
of thoughts and I am and what I've seen

603
00:26:22,750 --> 00:26:30,000
seems to good and bad on that one

604
00:26:25,890 --> 00:26:32,940
so we touched on this a little bit sorry

605
00:26:30,000 --> 00:26:36,570
but after I am the next big one is

606
00:26:32,940 --> 00:26:39,750
dealing with those access keys so when

607
00:26:36,570 --> 00:26:42,540
users interact with AWS they're usually

608
00:26:39,750 --> 00:26:44,760
doing so over command line like I'd

609
00:26:42,540 --> 00:26:48,120
mentioned and the way that you

610
00:26:44,760 --> 00:26:50,460
authenticate is over an access key well

611
00:26:48,120 --> 00:26:53,129
one problem that we seem with a lot of

612
00:26:50,460 --> 00:26:54,780
teams is they're given an access to eat

613
00:26:53,130 --> 00:26:58,020
and they never wrote them and they never

614
00:26:54,780 --> 00:27:00,410
expire this is for a number of reasons

615
00:26:58,020 --> 00:27:02,668
and it's usually not because of laziness

616
00:27:00,410 --> 00:27:05,250
it's actually usually because it's

617
00:27:02,669 --> 00:27:07,890
really hard to manage access key

618
00:27:05,250 --> 00:27:10,890
rotation in AWS depending on how you're

619
00:27:07,890 --> 00:27:13,620
architecting your solution

620
00:27:10,890 --> 00:27:17,780
so for example when you're interacting

621
00:27:13,620 --> 00:27:20,669
with AWS is ec2 instances which is

622
00:27:17,780 --> 00:27:22,379
basically their basic virtual machine

623
00:27:20,670 --> 00:27:25,230
unit that you can stand up

624
00:27:22,380 --> 00:27:27,750
infrastructure in AWS a lot of times

625
00:27:25,230 --> 00:27:31,950
it's not easy to communicate those key

626
00:27:27,750 --> 00:27:34,710
rotations to the ec2 instances it can

627
00:27:31,950 --> 00:27:37,440
also be a challenge in databases as well

628
00:27:34,710 --> 00:27:40,950
so every time you read say the key

629
00:27:37,440 --> 00:27:43,710
everywhere that the the other half of

630
00:27:40,950 --> 00:27:45,780
that key the public part of that key is

631
00:27:43,710 --> 00:27:48,330
shared you would have to rotate it there

632
00:27:45,780 --> 00:27:51,299
as well because it would be a king to me

633
00:27:48,330 --> 00:27:54,000
saying say you show up to a cool night

634
00:27:51,299 --> 00:27:56,910
club in the club has a password to get

635
00:27:54,000 --> 00:27:58,200
in well you change your password and you

636
00:27:56,910 --> 00:27:59,610
never told the other guy on the other

637
00:27:58,200 --> 00:28:01,290
side of the door that the password

638
00:27:59,610 --> 00:28:03,209
changed how do you communicate that

639
00:28:01,290 --> 00:28:05,549
what's an effective way to do that

640
00:28:03,210 --> 00:28:09,809
especially in a very complex network of

641
00:28:05,549 --> 00:28:11,360
infrastructure so in pin Tessa this

642
00:28:09,809 --> 00:28:13,950
becomes a problem because usually

643
00:28:11,360 --> 00:28:16,979
developers and engineers will have those

644
00:28:13,950 --> 00:28:18,510
keys sitting on the laptop or maybe they

645
00:28:16,980 --> 00:28:20,580
were accidentally committed to your

646
00:28:18,510 --> 00:28:22,799
source code somewhere or they're late

647
00:28:20,580 --> 00:28:25,350
online or they're stolen one way or the

648
00:28:22,799 --> 00:28:26,760
other and bad guys get a hold of these

649
00:28:25,350 --> 00:28:29,219
and they exploit them and if they're

650
00:28:26,760 --> 00:28:32,610
never rotating you're expiring you got

651
00:28:29,220 --> 00:28:34,350
persistently you know usable passwords

652
00:28:32,610 --> 00:28:37,049
essentially floating out in the internet

653
00:28:34,350 --> 00:28:38,760
that anybody from anywhere might be able

654
00:28:37,049 --> 00:28:42,870
to get into the environment if you don't

655
00:28:38,760 --> 00:28:46,379
have other safeguards in place so AWS

656
00:28:42,870 --> 00:28:48,678
offers a few solutions for this and one

657
00:28:46,380 --> 00:28:51,980
of them are lambda features so lambda

658
00:28:48,679 --> 00:28:55,230
lambda is another talk but in short it's

659
00:28:51,980 --> 00:28:57,510
it's a serverless infrastructure that

660
00:28:55,230 --> 00:28:59,010
you can just throw functions at an AWS

661
00:28:57,510 --> 00:29:00,629
manages all the infrastructure

662
00:28:59,010 --> 00:29:03,540
processing behind it

663
00:29:00,630 --> 00:29:05,580
so AWS has has templates that will help

664
00:29:03,540 --> 00:29:08,070
you with managing queue rotation

665
00:29:05,580 --> 00:29:09,720
especially for databases so I'd

666
00:29:08,070 --> 00:29:13,370
encourage you to google that if you guys

667
00:29:09,720 --> 00:29:13,370
are dealing with this in your company

668
00:29:14,330 --> 00:29:19,490
and then the sts that I mentioned in the

669
00:29:17,269 --> 00:29:23,840
last slide that's another very way to

670
00:29:19,490 --> 00:29:26,000
get automated rotation keys so again I

671
00:29:23,840 --> 00:29:30,049
always come back to that if you guys can

672
00:29:26,000 --> 00:29:32,539
use those those rotating temporary STS

673
00:29:30,049 --> 00:29:34,429
tokens definitely go for it

674
00:29:32,539 --> 00:29:37,460
another got you here that I already

675
00:29:34,429 --> 00:29:40,309
mentioned make sure that you have

676
00:29:37,460 --> 00:29:43,549
policies and procedures against putting

677
00:29:40,309 --> 00:29:47,120
your access keys and the config files of

678
00:29:43,549 --> 00:29:49,399
applications with a webcam fix source

679
00:29:47,120 --> 00:29:51,168
code all of that because it just leads

680
00:29:49,399 --> 00:29:54,439
to a whole world of pain and we see a

681
00:29:51,169 --> 00:29:57,139
ton of time to get in pen tests another

682
00:29:54,440 --> 00:29:59,520
strategy different access piece for

683
00:29:57,139 --> 00:30:02,010
different applications

684
00:29:59,520 --> 00:30:04,080
but again this creates more burden and

685
00:30:02,010 --> 00:30:06,570
complexity in the environment but it's

686
00:30:04,080 --> 00:30:09,199
it is a strategy of students into

687
00:30:06,570 --> 00:30:09,200
mistake

688
00:30:09,230 --> 00:30:18,480
in web applications so layered defense

689
00:30:15,150 --> 00:30:21,810
model for web apps one thing that I've

690
00:30:18,480 --> 00:30:24,360
learned about all the organizations that

691
00:30:21,810 --> 00:30:27,810
I've worked with is organizations never

692
00:30:24,360 --> 00:30:29,850
build the same app twice or they never

693
00:30:27,810 --> 00:30:33,510
built it the same way as as one of their

694
00:30:29,850 --> 00:30:36,980
peers in the organization but a lot that

695
00:30:33,510 --> 00:30:38,879
we're using using very similar

696
00:30:36,980 --> 00:30:42,780
components on the back end

697
00:30:38,880 --> 00:30:46,650
that being your s3 buckets dlb web app

698
00:30:42,780 --> 00:30:48,120
firewall availability zones etc so as

699
00:30:46,650 --> 00:30:51,030
you're thinking about how you're

700
00:30:48,120 --> 00:30:53,669
stacking together the AWS elements of

701
00:30:51,030 --> 00:30:56,070
usability wrap you got to start thinking

702
00:30:53,670 --> 00:31:00,570
about how you how you are building

703
00:30:56,070 --> 00:31:03,629
security into the design so first things

704
00:31:00,570 --> 00:31:05,850
first you gotta identify and define all

705
00:31:03,630 --> 00:31:08,280
the business needs this this kind of

706
00:31:05,850 --> 00:31:09,810
exists outside of security you've got to

707
00:31:08,280 --> 00:31:12,780
think what does this have actually have

708
00:31:09,810 --> 00:31:14,970
to do and then as you're designing that

709
00:31:12,780 --> 00:31:17,040
you've got to tie that back to security

710
00:31:14,970 --> 00:31:19,290
departments and then those security

711
00:31:17,040 --> 00:31:21,389
requirements ultimately become technical

712
00:31:19,290 --> 00:31:23,909
requirements so once we have those

713
00:31:21,390 --> 00:31:27,360
technical requirements start thinking

714
00:31:23,910 --> 00:31:29,880
about okay what ports do we actually

715
00:31:27,360 --> 00:31:31,320
need to have available to us what kind

716
00:31:29,880 --> 00:31:35,070
of communication does the app actually

717
00:31:31,320 --> 00:31:37,889
need to have available to it to to

718
00:31:35,070 --> 00:31:40,889
basically create this this at least

719
00:31:37,890 --> 00:31:42,630
privileged situation where apps are only

720
00:31:40,890 --> 00:31:46,080
allowed to talk to each other based on

721
00:31:42,630 --> 00:31:48,390
the need-to-know basis so in AWS you

722
00:31:46,080 --> 00:31:51,510
have the concept of virtual private

723
00:31:48,390 --> 00:31:53,460
clouds and then also security groups

724
00:31:51,510 --> 00:31:57,870
we're showing a private cloud on us

725
00:31:53,460 --> 00:32:00,690
create virtualized private networks

726
00:31:57,870 --> 00:32:02,760
within AWS and then within those you can

727
00:32:00,690 --> 00:32:04,860
actually have subnets and it starts to

728
00:32:02,760 --> 00:32:06,840
look a little bit more conceptually like

729
00:32:04,860 --> 00:32:09,449
your traditional IT environment where

730
00:32:06,840 --> 00:32:12,360
you might have like a demon tiller DMZ

731
00:32:09,450 --> 00:32:14,070
and then a production network you can

732
00:32:12,360 --> 00:32:17,250
have different groups of applications

733
00:32:14,070 --> 00:32:20,340
and actually walk off and the VPC is

734
00:32:17,250 --> 00:32:22,320
allow you to have very explicit ingress

735
00:32:20,340 --> 00:32:23,939
and egress rules

736
00:32:22,320 --> 00:32:26,280
so when you're going through that

737
00:32:23,940 --> 00:32:27,810
security design phase you need to stay

738
00:32:26,280 --> 00:32:30,360
well who really needs to communicate

739
00:32:27,810 --> 00:32:33,210
with this act you might say well this is

740
00:32:30,360 --> 00:32:37,110
a web app and all we really need to come

741
00:32:33,210 --> 00:32:39,180
into this VPC is port 443 important 84

742
00:32:37,110 --> 00:32:41,490
internet traffic and then you might say

743
00:32:39,180 --> 00:32:43,770
well we need to be able to access some

744
00:32:41,490 --> 00:32:46,050
energy servers maybe we want to jump

745
00:32:43,770 --> 00:32:47,850
through a VPN tunnel so we need to open

746
00:32:46,050 --> 00:32:50,970
up whatever important we need to use for

747
00:32:47,850 --> 00:32:52,560
VP in here and that's another round in

748
00:32:50,970 --> 00:32:54,360
and then you can effectively kill

749
00:32:52,560 --> 00:32:56,879
everything else then be a very wise

750
00:32:54,360 --> 00:32:58,500
decision to make a design decision to

751
00:32:56,880 --> 00:33:01,560
make you can implement that with the B

752
00:32:58,500 --> 00:33:04,050
PC and say nothing can come in or come

753
00:33:01,560 --> 00:33:06,960
out but then once you're inside that V

754
00:33:04,050 --> 00:33:09,810
PC you can go further with the security

755
00:33:06,960 --> 00:33:13,320
groups which are almost like localized

756
00:33:09,810 --> 00:33:15,270
firewalls on every ec2 instance start

757
00:33:13,320 --> 00:33:17,429
thinking about how should those ec2

758
00:33:15,270 --> 00:33:21,810
instances be able to talk to each other

759
00:33:17,430 --> 00:33:24,900
so should that's web evidence be able to

760
00:33:21,810 --> 00:33:27,389
talk to say this database server sure

761
00:33:24,900 --> 00:33:30,140
what poor okay this you know whatever

762
00:33:27,390 --> 00:33:32,040
port based on the data base you're using

763
00:33:30,140 --> 00:33:35,010
explicitly define that and block

764
00:33:32,040 --> 00:33:37,920
everything else so it requires a lot of

765
00:33:35,010 --> 00:33:39,870
really good planning upfront and a lot

766
00:33:37,920 --> 00:33:42,090
of really stringent configuration

767
00:33:39,870 --> 00:33:44,879
management but this is really the best

768
00:33:42,090 --> 00:33:47,490
way to go to get that layered defense so

769
00:33:44,880 --> 00:33:50,130
every every step of the way you're

770
00:33:47,490 --> 00:33:52,890
adding layers of rules and layers of

771
00:33:50,130 --> 00:33:55,440
design that minimize communications and

772
00:33:52,890 --> 00:33:57,870
minimize the ability of attackers and

773
00:33:55,440 --> 00:34:02,270
malware really navigate and move within

774
00:33:57,870 --> 00:34:05,250
the environment one good thing that

775
00:34:02,270 --> 00:34:07,830
sometimes teams forget especially me

776
00:34:05,250 --> 00:34:11,820
when I'm doing audits carried verbs for

777
00:34:07,830 --> 00:34:14,610
staple where new PCs are stateless so

778
00:34:11,820 --> 00:34:16,649
what that means is the AWS security

779
00:34:14,610 --> 00:34:20,370
groups that you see on the ec2 instance

780
00:34:16,649 --> 00:34:22,679
they allow everything they allow nothing

781
00:34:20,370 --> 00:34:27,330
to come in by default but they allow

782
00:34:22,679 --> 00:34:29,820
everything to go out by default so teams

783
00:34:27,330 --> 00:34:32,129
may have to say okay we explicitly want

784
00:34:29,820 --> 00:34:35,280
to allow Internet traffic he said this

785
00:34:32,129 --> 00:34:38,299
ec2 instance but by default if you had a

786
00:34:35,280 --> 00:34:40,800
she's pista malicious software

787
00:34:38,300 --> 00:34:43,440
misconfigured application whatever on

788
00:34:40,800 --> 00:34:45,720
that instance they can dial out to

789
00:34:43,440 --> 00:34:47,730
anything at once so once you get into

790
00:34:45,719 --> 00:34:49,709
that you see two instance theoretically

791
00:34:47,730 --> 00:34:52,469
an attacker can move anywhere out of it

792
00:34:49,710 --> 00:34:55,020
unless you explicitly configure that ec2

793
00:34:52,469 --> 00:34:58,100
instance to not allow anything out as

794
00:34:55,020 --> 00:35:01,950
well except those very necessary ports

795
00:34:58,100 --> 00:35:04,740
the VP seeds or that virtualized Network

796
00:35:01,950 --> 00:35:06,779
I was talking about they have access

797
00:35:04,740 --> 00:35:09,149
control lists those are stateless

798
00:35:06,780 --> 00:35:11,520
so anything allowed to come in is not

799
00:35:09,150 --> 00:35:14,160
automatically automatically allowed to

800
00:35:11,520 --> 00:35:16,470
come so it's the it's the opposite

801
00:35:14,160 --> 00:35:19,560
situation just because you allowed

802
00:35:16,470 --> 00:35:21,930
something in say again that legitimate

803
00:35:19,560 --> 00:35:24,600
in web traffic if you don't create a

804
00:35:21,930 --> 00:35:26,399
rule that it can head back out if you

805
00:35:24,600 --> 00:35:27,960
had a legitimate user hitting a web app

806
00:35:26,400 --> 00:35:30,720
and you didn't figure out a rule that

807
00:35:27,960 --> 00:35:32,490
say can communicate back out it's it's

808
00:35:30,720 --> 00:35:35,430
going to be a broken app until you fix

809
00:35:32,490 --> 00:35:38,310
that so that's something that create

810
00:35:35,430 --> 00:35:40,589
headaches that I've seen teams that are

811
00:35:38,310 --> 00:35:42,509
less familiar with AWS get frustrated

812
00:35:40,590 --> 00:35:44,820
and just open the floodgates that's a

813
00:35:42,510 --> 00:35:47,010
huge mistake you really need to be

814
00:35:44,820 --> 00:35:49,470
thoughtful about what you're allowing in

815
00:35:47,010 --> 00:35:53,820
and out of both your VP season and your

816
00:35:49,470 --> 00:35:58,009
security groups another big one to think

817
00:35:53,820 --> 00:36:02,430
about is AWS meta meta data services and

818
00:35:58,010 --> 00:36:04,440
ec2 so an ec2 there's a service that

819
00:36:02,430 --> 00:36:06,509
allows you to see basically all the a

820
00:36:04,440 --> 00:36:10,140
lot of the configs on the machine and

821
00:36:06,510 --> 00:36:12,840
this is this is vital to allow you to

822
00:36:10,140 --> 00:36:15,060
effectively manage ec2 instances the

823
00:36:12,840 --> 00:36:17,340
problem is that if a team happens to

824
00:36:15,060 --> 00:36:19,440
have sensitive information like security

825
00:36:17,340 --> 00:36:21,420
access Keys stored on those instances

826
00:36:19,440 --> 00:36:24,630
attackers are regularly getting an

827
00:36:21,420 --> 00:36:26,550
instance an ec2 instance or though use

828
00:36:24,630 --> 00:36:29,190
something like a server side request

829
00:36:26,550 --> 00:36:32,760
forgery attacks which basically trick

830
00:36:29,190 --> 00:36:34,350
the web service on the ec2 instance and

831
00:36:32,760 --> 00:36:36,750
they're thinking that the traffic is

832
00:36:34,350 --> 00:36:38,880
originating from inside that instance to

833
00:36:36,750 --> 00:36:41,340
cough up all the secrets this is a

834
00:36:38,880 --> 00:36:43,350
really really big deal this is probably

835
00:36:41,340 --> 00:36:46,710
the second most common thing that we see

836
00:36:43,350 --> 00:36:48,210
companies fell out and pin tests so this

837
00:36:46,710 --> 00:36:50,670
is another reason

838
00:36:48,210 --> 00:36:54,089
to restrict that traffic let's say that

839
00:36:50,670 --> 00:36:57,270
you have a web app with an SS RFP

840
00:36:54,089 --> 00:37:00,810
vulnerability on it an attacker is able

841
00:36:57,270 --> 00:37:03,210
to cop that backup at least if you have

842
00:37:00,810 --> 00:37:04,380
the right role port roles in place you

843
00:37:03,210 --> 00:37:06,420
might be able to forbid them from

844
00:37:04,380 --> 00:37:09,440
actually retrieving that retrieving that

845
00:37:06,420 --> 00:37:13,369
information or give it and using it to

846
00:37:09,440 --> 00:37:17,760
to siphon it out to another area of the

847
00:37:13,369 --> 00:37:20,310
infrastructure another thing to think

848
00:37:17,760 --> 00:37:22,020
about as well just think gotcha that I

849
00:37:20,310 --> 00:37:24,240
knew were miss if I didn't mention is

850
00:37:22,020 --> 00:37:25,800
you got to think about CSL termination

851
00:37:24,240 --> 00:37:28,379
though ah that's definitely an

852
00:37:25,800 --> 00:37:31,950
engineering issue that I see happen from

853
00:37:28,380 --> 00:37:33,690
time to time that is really outside the

854
00:37:31,950 --> 00:37:35,160
scope of this talk but I just want to

855
00:37:33,690 --> 00:37:37,500
bring it up just in case it about he's

856
00:37:35,160 --> 00:37:40,230
feverish like taking notes to take back

857
00:37:37,500 --> 00:37:45,060
to their teams and make sure you go go

858
00:37:40,230 --> 00:37:49,080
that and this is just a simple example

859
00:37:45,060 --> 00:37:52,230
of how you can stack all of these AWS

860
00:37:49,080 --> 00:37:55,859
elements to get defensive depth I had a

861
00:37:52,230 --> 00:37:58,260
good buddy that is a real AWS engineer

862
00:37:55,859 --> 00:38:00,330
and when he saw this he beat it up he's

863
00:37:58,260 --> 00:38:04,140
like oh you definitely would architect

864
00:38:00,330 --> 00:38:07,200
it that way except this is graphic come

865
00:38:04,140 --> 00:38:09,480
from AWS set them so that just goes to

866
00:38:07,200 --> 00:38:14,609
show no two people have the same take on

867
00:38:09,480 --> 00:38:20,700
AWS but what you see here is these are

868
00:38:14,609 --> 00:38:23,730
AWS services that's kids but AWS has a

869
00:38:20,700 --> 00:38:28,890
service like the web app are all the

870
00:38:23,730 --> 00:38:32,400
route 53 which is their DNS server the

871
00:38:28,890 --> 00:38:35,400
storage CloudFront which is a CDN or

872
00:38:32,400 --> 00:38:37,680
content delivery network etc and you

873
00:38:35,400 --> 00:38:41,130
stack them together and along the way

874
00:38:37,680 --> 00:38:44,220
you can create different rules or or

875
00:38:41,130 --> 00:38:47,099
features that will further refine what

876
00:38:44,220 --> 00:38:49,890
is allowed to pass through these gates

877
00:38:47,099 --> 00:38:52,020
if you will and it allows you different

878
00:38:49,890 --> 00:38:53,279
ways of interacting and every time that

879
00:38:52,020 --> 00:38:55,800
you add a different future

880
00:38:53,280 --> 00:38:58,830
you got more security problems to solve

881
00:38:55,800 --> 00:39:01,220
in this example you see that s3 bucket

882
00:38:58,830 --> 00:39:01,220
up top

883
00:39:01,670 --> 00:39:06,360
you might have aesthetic what they post

884
00:39:04,260 --> 00:39:08,340
up there and then cloud front might be

885
00:39:06,360 --> 00:39:12,390
grabbing that and you basically create a

886
00:39:08,340 --> 00:39:15,210
really quick quick website that you just

887
00:39:12,390 --> 00:39:16,560
cough up let's do the end-user megafest

888
00:39:15,210 --> 00:39:19,020
and then within that maybe you have

889
00:39:16,560 --> 00:39:20,520
iframes and those iframes are time back

890
00:39:19,020 --> 00:39:23,190
to something very technical on the

891
00:39:20,520 --> 00:39:26,940
backend or some kind of API calls in the

892
00:39:23,190 --> 00:39:28,650
back ends well developers might assume

893
00:39:26,940 --> 00:39:30,960
oh we have this s3 bucket everybody

894
00:39:28,650 --> 00:39:33,990
needs I have access to these oh these

895
00:39:30,960 --> 00:39:36,360
web apps here are these static web sites

896
00:39:33,990 --> 00:39:38,279
will then be wrong CloudFront means

897
00:39:36,360 --> 00:39:40,110
access to those static web sites

898
00:39:38,280 --> 00:39:41,970
so these let's just said one example

899
00:39:40,110 --> 00:39:44,040
I've seen happen before you really got

900
00:39:41,970 --> 00:39:47,009
to think every step of the way what

901
00:39:44,040 --> 00:39:48,990
really needs access to another gotcha

902
00:39:47,010 --> 00:39:50,520
too is don't assume that these services

903
00:39:48,990 --> 00:39:53,459
are configured or right out of the box

904
00:39:50,520 --> 00:39:55,830
the laughs is a great example Amazon's

905
00:39:53,460 --> 00:39:59,370
web firewall has tons of pre-configured

906
00:39:55,830 --> 00:40:00,360
rule sets but you got to customize it to

907
00:39:59,370 --> 00:40:02,339
whatever you're using in your

908
00:40:00,360 --> 00:40:04,830
environment and you got a tailor and

909
00:40:02,340 --> 00:40:07,410
build it to suit your needs because out

910
00:40:04,830 --> 00:40:09,060
of the box sure it'll block a lot of

911
00:40:07,410 --> 00:40:11,220
junk but it's probably not doing

912
00:40:09,060 --> 00:40:13,770
everything you need so that's where that

913
00:40:11,220 --> 00:40:15,270
shared responsibility you know where it

914
00:40:13,770 --> 00:40:17,250
ends and where it begins is really

915
00:40:15,270 --> 00:40:19,740
important to be aware of and then you'll

916
00:40:17,250 --> 00:40:22,590
notice how they're using an elastic load

917
00:40:19,740 --> 00:40:25,049
balancer in this illustration to split

918
00:40:22,590 --> 00:40:28,230
the infrastructure across availability

919
00:40:25,050 --> 00:40:30,600
zones that's that could solve a bunch of

920
00:40:28,230 --> 00:40:32,550
other problems it's in itself as well

921
00:40:30,600 --> 00:40:34,350
and give you more availability give you

922
00:40:32,550 --> 00:40:36,690
more security in different ways create

923
00:40:34,350 --> 00:40:39,089
other security problems I guess my point

924
00:40:36,690 --> 00:40:41,070
is a nothing is simple and everything

925
00:40:39,090 --> 00:40:42,630
needs to be really thought through I

926
00:40:41,070 --> 00:40:44,820
think there are how it ties together and

927
00:40:42,630 --> 00:40:49,290
security requirements and no two teams

928
00:40:44,820 --> 00:40:52,230
do it the same way twice so making sure

929
00:40:49,290 --> 00:40:54,090
s3 that it is locked down this is

930
00:40:52,230 --> 00:40:56,250
probably the number one issue that we

931
00:40:54,090 --> 00:41:00,060
see in pin test and if you look at in

932
00:40:56,250 --> 00:41:01,250
the industry of the big hacks s3 buckets

933
00:41:00,060 --> 00:41:05,700
are a big problem

934
00:41:01,250 --> 00:41:07,710
by default s3 is locked down you got to

935
00:41:05,700 --> 00:41:09,720
open up access to it before it allows

936
00:41:07,710 --> 00:41:12,720
you to see anything but for whatever

937
00:41:09,720 --> 00:41:13,910
reasons is you start putting things in

938
00:41:12,720 --> 00:41:16,640
s3

939
00:41:13,910 --> 00:41:19,609
teams you know wires get crossed across

940
00:41:16,640 --> 00:41:22,279
teams and permissions get harder to

941
00:41:19,610 --> 00:41:23,630
manage you and you've really just got to

942
00:41:22,280 --> 00:41:28,160
pay attention to how you're granting

943
00:41:23,630 --> 00:41:31,250
access another problem is s3 allows for

944
00:41:28,160 --> 00:41:33,890
multiple ways to manage access to it so

945
00:41:31,250 --> 00:41:35,090
you can do it via I am you can do it

946
00:41:33,890 --> 00:41:37,970
yeah

947
00:41:35,090 --> 00:41:40,540
access control it and then there's a

948
00:41:37,970 --> 00:41:43,939
third way that escapes me at the moment

949
00:41:40,540 --> 00:41:45,410
you need to basically come come to a

950
00:41:43,940 --> 00:41:48,680
resolution of how you're going to manage

951
00:41:45,410 --> 00:41:51,350
I am as a team and make sure that you're

952
00:41:48,680 --> 00:41:53,990
not unintentionally exposing this is

953
00:41:51,350 --> 00:41:56,060
where pin testing is mega helpful

954
00:41:53,990 --> 00:41:57,740
because those fan testers that's the

955
00:41:56,060 --> 00:41:58,910
first thing one of the first things are

956
00:41:57,740 --> 00:42:01,250
going to look at they're going to start

957
00:41:58,910 --> 00:42:03,319
scanning your s3 buckets looking within

958
00:42:01,250 --> 00:42:07,430
things that are unintentionally exposed

959
00:42:03,320 --> 00:42:10,070
to the public Internet another thing to

960
00:42:07,430 --> 00:42:12,350
be aware of when public access is needed

961
00:42:10,070 --> 00:42:14,390
I hit it on this on the left side you

962
00:42:12,350 --> 00:42:16,339
got to think about the origin access

963
00:42:14,390 --> 00:42:19,490
identity especially if you're tying it

964
00:42:16,340 --> 00:42:21,740
to a cloud front make sure that you just

965
00:42:19,490 --> 00:42:24,770
really tying down those s3 permissions

966
00:42:21,740 --> 00:42:26,149
like I could beat this one into the

967
00:42:24,770 --> 00:42:28,180
ground this is another one that could

968
00:42:26,150 --> 00:42:31,790
almost have a whole talk to itself

969
00:42:28,180 --> 00:42:34,790
another good toy see teams using is AWS

970
00:42:31,790 --> 00:42:36,759
Maisie Maisie will scan your buckets and

971
00:42:34,790 --> 00:42:39,790
look for a lot of security concerns

972
00:42:36,760 --> 00:42:42,890
especially if you don't want things like

973
00:42:39,790 --> 00:42:45,800
PCI data or credit card data store

974
00:42:42,890 --> 00:42:48,500
security numbers their unique

975
00:42:45,800 --> 00:42:51,800
identifiers that might be considered

976
00:42:48,500 --> 00:42:54,830
very sensitive PII or pH I I've seen a

977
00:42:51,800 --> 00:42:58,190
lot of teams start pointing Edom AWS may

978
00:42:54,830 --> 00:42:59,600
see it s3 in scanning them as another

979
00:42:58,190 --> 00:43:02,000
safeguard just to make sure people

980
00:42:59,600 --> 00:43:06,170
aren't committing system data into clear

981
00:43:02,000 --> 00:43:08,570
over there to s3 and finally don't

982
00:43:06,170 --> 00:43:11,110
assume it's first encrypted either it's

983
00:43:08,570 --> 00:43:13,280
not encrypted by default don't assume

984
00:43:11,110 --> 00:43:15,830
communications in an animus through

985
00:43:13,280 --> 00:43:19,720
encrypted by default I mentioned earlier

986
00:43:15,830 --> 00:43:19,720
logs are not encrypted by default either

987
00:43:21,040 --> 00:43:27,319
finally

988
00:43:23,720 --> 00:43:29,209
AWS has a ton of security tools more all

989
00:43:27,319 --> 00:43:31,910
the time it's hard to keep up with the

990
00:43:29,210 --> 00:43:35,240
moment these are the ones that I've seen

991
00:43:31,910 --> 00:43:37,490
heavily used today there's also a lot of

992
00:43:35,240 --> 00:43:39,078
great third-party solutions but don't

993
00:43:37,490 --> 00:43:41,509
over rely on them and as I've mentioned

994
00:43:39,079 --> 00:43:44,579
over and over again don't assume that

995
00:43:41,510 --> 00:43:50,130
they're configured right out of the gate

996
00:43:44,579 --> 00:43:53,309
so these all serve very different needs

997
00:43:50,130 --> 00:43:56,670
I think a WS guard duty is just a

998
00:43:53,309 --> 00:43:58,739
must-have unless you've got a third

999
00:43:56,670 --> 00:44:01,199
party solution that you just think it's

1000
00:43:58,739 --> 00:44:03,390
bigger and better guard duty is so easy

1001
00:44:01,199 --> 00:44:04,369
to turn on and it gives you a ton of

1002
00:44:03,390 --> 00:44:07,670
value

1003
00:44:04,369 --> 00:44:09,989
Amazon laughs as well is very important

1004
00:44:07,670 --> 00:44:12,209
especially since if you're dealing with

1005
00:44:09,989 --> 00:44:14,189
certain compliance standards it's a

1006
00:44:12,209 --> 00:44:17,759
requirement so it's an easy way to get

1007
00:44:14,189 --> 00:44:19,199
compliant quick but again don't assume

1008
00:44:17,759 --> 00:44:20,910
that it's configured right out of the

1009
00:44:19,199 --> 00:44:22,769
gate you may just stand it up and get

1010
00:44:20,910 --> 00:44:26,729
compliant but that doesn't mean you're

1011
00:44:22,769 --> 00:44:29,538
secure AWS inspector is also another

1012
00:44:26,729 --> 00:44:32,660
great one to stand up and it does

1013
00:44:29,539 --> 00:44:35,400
configuration and vulnerability scans

1014
00:44:32,660 --> 00:44:37,348
one big problem I've seen this companies

1015
00:44:35,400 --> 00:44:39,959
move to containerized environments is

1016
00:44:37,349 --> 00:44:42,359
that those hosts that are running the

1017
00:44:39,959 --> 00:44:45,118
containers get locked into certain

1018
00:44:42,359 --> 00:44:47,429
versions of Ubuntu or whatever they're

1019
00:44:45,119 --> 00:44:50,440
using as their their cluster hosts and

1020
00:44:47,429 --> 00:44:52,240
they never update

1021
00:44:50,440 --> 00:44:55,089
inspector will do a good job of finding

1022
00:44:52,240 --> 00:44:57,939
those out-of-date Asians or urgings I

1023
00:44:55,089 --> 00:44:59,740
have ulnar abilities and lining up the

1024
00:44:57,940 --> 00:45:03,099
security to to let them know that you

1025
00:44:59,740 --> 00:45:05,439
need to patch and that that's a big deal

1026
00:45:03,099 --> 00:45:07,839
that's one of the primary another

1027
00:45:05,440 --> 00:45:11,050
primary way that we see in pin tests

1028
00:45:07,839 --> 00:45:15,910
these teams getting home is out of patch

1029
00:45:11,050 --> 00:45:18,250
systems AWS shield is also a no-brainer

1030
00:45:15,910 --> 00:45:21,640
it's basically you click on button and

1031
00:45:18,250 --> 00:45:24,819
you get aw show that's D do a DDoS or

1032
00:45:21,640 --> 00:45:26,740
distributed denial service service that

1033
00:45:24,819 --> 00:45:28,480
you can turn on I believe that one is

1034
00:45:26,740 --> 00:45:30,069
also required for some compliance

1035
00:45:28,480 --> 00:45:34,510
requirements so another way to get

1036
00:45:30,069 --> 00:45:37,420
compliant as well and then detective AWS

1037
00:45:34,510 --> 00:45:41,109
detective I'm not having an opportunity

1038
00:45:37,420 --> 00:45:43,480
to use this yet but I'm really

1039
00:45:41,109 --> 00:45:45,220
interested to see how well it does it

1040
00:45:43,480 --> 00:45:48,400
pulling together all of these different

1041
00:45:45,220 --> 00:45:50,919
sources of data and allowing me to gain

1042
00:45:48,400 --> 00:45:54,040
intelligence so be on the lookout for

1043
00:45:50,920 --> 00:45:59,319
that it was new just come out like an q4

1044
00:45:54,040 --> 00:46:01,869
of last year and this was very topical

1045
00:45:59,319 --> 00:46:05,890
if you want to go deeper you can just

1046
00:46:01,869 --> 00:46:09,130
google AWS well architected framework

1047
00:46:05,890 --> 00:46:11,879
it's going to get in a lot to that ia

1048
00:46:09,130 --> 00:46:15,010
and stuff I talked about in the V PC and

1049
00:46:11,880 --> 00:46:17,230
s3 stuff I talked about it's also going

1050
00:46:15,010 --> 00:46:20,050
to talk about how you set up multiple

1051
00:46:17,230 --> 00:46:22,150
accounts and how you can tie together

1052
00:46:20,050 --> 00:46:24,849
your accounts to get better segregation

1053
00:46:22,150 --> 00:46:27,930
of duties like getting true segregation

1054
00:46:24,849 --> 00:46:31,720
between your dev staging and production

1055
00:46:27,930 --> 00:46:33,368
environments how you can pull policies

1056
00:46:31,720 --> 00:46:36,339
together across all these different

1057
00:46:33,369 --> 00:46:38,200
environments it's if you're a geek

1058
00:46:36,339 --> 00:46:40,599
you'll love it if you're not a geek

1059
00:46:38,200 --> 00:46:44,230
it'll be dry but really informative and

1060
00:46:40,599 --> 00:46:45,760
it's free on the Kindle app so you can

1061
00:46:44,230 --> 00:46:49,210
get it on your phone right now for free

1062
00:46:45,760 --> 00:46:51,819
if you want to check it out and I've got

1063
00:46:49,210 --> 00:46:53,680
about 10 minutes left so I'm going to

1064
00:46:51,819 --> 00:46:56,290
open up slack and take a look let me

1065
00:46:53,680 --> 00:47:00,328
know if anybody has any questions here

1066
00:46:56,290 --> 00:47:00,329
and feel free to

1067
00:47:00,430 --> 00:47:05,430
to help me out of India if you saw

1068
00:47:02,170 --> 00:47:05,430
anything come up in a mist

1069
00:47:08,799 --> 00:47:13,309
no I am

1070
00:47:11,450 --> 00:47:14,960
I'm good with everything I mean there's

1071
00:47:13,309 --> 00:47:16,549
always a lot of content right you're the

1072
00:47:14,960 --> 00:47:22,940
expert that's why we brought you in I'm

1073
00:47:16,549 --> 00:47:25,940
just a lowly host today yeah we yeah so

1074
00:47:22,940 --> 00:47:28,670
we've had some good questions running in

1075
00:47:25,940 --> 00:47:29,869
a slack Channel I don't know I know

1076
00:47:28,670 --> 00:47:30,890
you've been focused on giving your talk

1077
00:47:29,869 --> 00:47:32,960
I don't know if you want to take a few

1078
00:47:30,890 --> 00:47:36,129
minutes and address some of the comments

1079
00:47:32,960 --> 00:47:40,779
that were dropped in the channel maybe

1080
00:47:36,130 --> 00:47:40,779
yeah I'm king through

1081
00:47:41,340 --> 00:47:47,600
I saw ouch one or no it was an Ultron

1082
00:47:44,180 --> 00:47:49,770
ethic Oh InfoSec asked about a casb

1083
00:47:47,600 --> 00:47:53,930
solutions of cloud access security

1084
00:47:49,770 --> 00:47:53,930
broker you know I'm actually

1085
00:47:55,470 --> 00:48:02,160
I'm actually don't know that I'm in a

1086
00:48:00,450 --> 00:48:04,470
I don't know that I'm qualified to

1087
00:48:02,160 --> 00:48:06,509
answer that when if I'm being honest

1088
00:48:04,470 --> 00:48:07,980
with you guys I mean if you google you

1089
00:48:06,510 --> 00:48:11,480
can look at the Gardiner Magic Quadrant

1090
00:48:07,980 --> 00:48:14,430
but most of the teams that I see are

1091
00:48:11,480 --> 00:48:17,160
using something like octa and one login

1092
00:48:14,430 --> 00:48:19,980
to integrate with Active Directory or G

1093
00:48:17,160 --> 00:48:22,259
suite and just tie that indirectly to

1094
00:48:19,980 --> 00:48:23,640
their there I am that's what the really

1095
00:48:22,260 --> 00:48:26,609
good companies that are more mature

1096
00:48:23,640 --> 00:48:29,848
doing and I don't know if they're using

1097
00:48:26,609 --> 00:48:34,980
any other any other solutions beyond

1098
00:48:29,849 --> 00:48:38,760
that we had another question devops for

1099
00:48:34,980 --> 00:48:39,180
second demos so this is something I

1100
00:48:38,760 --> 00:48:41,519
missed

1101
00:48:39,180 --> 00:48:45,450
it was in my notes but I miss bringing

1102
00:48:41,519 --> 00:48:49,259
up one of the challenges with moving to

1103
00:48:45,450 --> 00:48:51,899
the cloud is we have a lot of IT guys

1104
00:48:49,260 --> 00:48:55,589
that are having to move to the cloud and

1105
00:48:51,900 --> 00:48:57,109
maybe there's a gap in skill set because

1106
00:48:55,589 --> 00:49:01,230
the cloud is really geared towards

1107
00:48:57,109 --> 00:49:02,880
developers more and it's really been

1108
00:49:01,230 --> 00:49:06,960
taken over by this philosophy called

1109
00:49:02,880 --> 00:49:09,269
DevOps which blends together development

1110
00:49:06,960 --> 00:49:11,130
and operations for better or for worse

1111
00:49:09,269 --> 00:49:13,709
for better because it allows you a lot

1112
00:49:11,130 --> 00:49:15,359
more agility but worse because you lose

1113
00:49:13,710 --> 00:49:18,119
a lot of the segregation that

1114
00:49:15,359 --> 00:49:21,058
traditional IT had so a developer in an

1115
00:49:18,119 --> 00:49:23,519
IT were siloed to a point where one

1116
00:49:21,059 --> 00:49:26,609
could not adversely affect the other and

1117
00:49:23,519 --> 00:49:28,979
you can allow IT to really just focus on

1118
00:49:26,609 --> 00:49:30,509
doing what at your best well now you've

1119
00:49:28,980 --> 00:49:32,210
had teams pulling in a direction where

1120
00:49:30,509 --> 00:49:36,029
there's a lot of shared responsibility

1121
00:49:32,210 --> 00:49:38,369
DEP SEC Ops is meant to address some of

1122
00:49:36,029 --> 00:49:40,349
those challenges and find ways to

1123
00:49:38,369 --> 00:49:43,319
integrate security into the DevOps

1124
00:49:40,349 --> 00:49:45,839
lifecycle and a lot of that would be

1125
00:49:43,319 --> 00:49:48,808
things I mentioned in this presentation

1126
00:49:45,839 --> 00:49:50,670
really insisting on as you go through

1127
00:49:48,809 --> 00:49:52,529
the whole process of delivering an

1128
00:49:50,670 --> 00:49:54,720
application and then managing its

1129
00:49:52,529 --> 00:49:57,569
lifecycle finding places to plug

1130
00:49:54,720 --> 00:49:59,459
security into it along the way so

1131
00:49:57,569 --> 00:50:04,109
there's a pretty good question as well

1132
00:49:59,460 --> 00:50:07,740
do you see any anything prior mike

1133
00:50:04,109 --> 00:50:09,420
siestas virtual Mike C just said virtual

1134
00:50:07,740 --> 00:50:11,450
patching is definitely worth the effort

1135
00:50:09,420 --> 00:50:14,930
yes you are absolutely

1136
00:50:11,450 --> 00:50:18,319
right Paul mentioned Amazon laughs block

1137
00:50:14,930 --> 00:50:20,419
a lot of activity by default yeah one

1138
00:50:18,320 --> 00:50:23,930
companies get a false sense of security

1139
00:50:20,420 --> 00:50:25,610
because you hire a pen tester they hit

1140
00:50:23,930 --> 00:50:27,950
your wife and the wife does a great job

1141
00:50:25,610 --> 00:50:29,990
at killing pen testers because that's

1142
00:50:27,950 --> 00:50:31,549
what it's made to do because the pen

1143
00:50:29,990 --> 00:50:34,189
testers are you something like burp

1144
00:50:31,550 --> 00:50:36,530
suite just to like pummel the laughs and

1145
00:50:34,190 --> 00:50:37,640
laughs just like no way bro we saw this

1146
00:50:36,530 --> 00:50:42,500
coming a mile away

1147
00:50:37,640 --> 00:50:44,620
well a laugh doesn't stop very very

1148
00:50:42,500 --> 00:50:47,840
clever guys that actually know how to

1149
00:50:44,620 --> 00:50:50,720
programmatically attack Web Apps as a

1150
00:50:47,840 --> 00:50:52,880
not hit a buzzer or not hit some

1151
00:50:50,720 --> 00:50:55,009
automated tool that just sprays it but

1152
00:50:52,880 --> 00:50:57,590
guys that are like surgeons and find

1153
00:50:55,010 --> 00:51:00,890
this used so you got to actually go on

1154
00:50:57,590 --> 00:51:02,870
the left and figure out exactly it's at

1155
00:51:00,890 --> 00:51:04,520
least privilege problem all over again

1156
00:51:02,870 --> 00:51:08,020
you gotta figure out what is the

1157
00:51:04,520 --> 00:51:10,640
expected behavior of this web app what

1158
00:51:08,020 --> 00:51:13,640
functions and calls should be happening

1159
00:51:10,640 --> 00:51:16,100
and tune your wife to allow those and

1160
00:51:13,640 --> 00:51:19,430
block everything else that really takes

1161
00:51:16,100 --> 00:51:21,830
a specialized security expert to do it

1162
00:51:19,430 --> 00:51:24,500
it takes a it takes almost a developer

1163
00:51:21,830 --> 00:51:28,130
that has decided they really love

1164
00:51:24,500 --> 00:51:30,080
security across to it so tuning a wife

1165
00:51:28,130 --> 00:51:32,920
is actually really hard job it's like

1166
00:51:30,080 --> 00:51:36,470
tuning a sim same kind of situation or

1167
00:51:32,920 --> 00:51:38,330
SM being a security logical utility

1168
00:51:36,470 --> 00:51:42,500
sorry I don't want us to everybody knows

1169
00:51:38,330 --> 00:51:44,529
what these acronyms mean you guys said

1170
00:51:42,500 --> 00:51:47,780
any other sir we need to cut it off in

1171
00:51:44,530 --> 00:51:50,330
yeah we're right we're right up against

1172
00:51:47,780 --> 00:51:53,420
it here we've got maybe time for one

1173
00:51:50,330 --> 00:51:57,880
more brief question so that we can keep

1174
00:51:53,420 --> 00:51:57,880
running on schedule you got one

1175
00:51:57,950 --> 00:52:01,910
so yeah honestly this is the first time

1176
00:52:00,560 --> 00:52:04,790
we've done this today and you are the

1177
00:52:01,910 --> 00:52:07,310
first speaker in the track how did it

1178
00:52:04,790 --> 00:52:08,750
how did it work for you I thought that I

1179
00:52:07,310 --> 00:52:11,690
wasn't gonna be nervous because I do

1180
00:52:08,750 --> 00:52:14,780
this for clients all the time and then I

1181
00:52:11,690 --> 00:52:15,400
got on here and I just totally choked on

1182
00:52:14,780 --> 00:52:18,279
my tongue

1183
00:52:15,400 --> 00:52:20,869
[Laughter]

1184
00:52:18,279 --> 00:52:24,799
like what am i nervous I'm sitting in my

1185
00:52:20,869 --> 00:52:27,589
office by myself in shorts I mean yeah

1186
00:52:24,799 --> 00:52:29,359
not for nothing but you know we at our

1187
00:52:27,589 --> 00:52:31,549
high count here the last time I'm

1188
00:52:29,359 --> 00:52:35,959
keeping a periodical eye on the number

1189
00:52:31,549 --> 00:52:38,329
of participants and we're at 131 last

1190
00:52:35,959 --> 00:52:41,239
time the high number awesome there you

1191
00:52:38,329 --> 00:52:44,119
go yeah that's the high-water mark for

1192
00:52:41,239 --> 00:52:46,099
everybody to be so I know Wes Lambert is

1193
00:52:44,119 --> 00:52:49,309
cued up and on the panel and ready to go

1194
00:52:46,099 --> 00:52:51,409
next so that's that's your that's your a

1195
00:52:49,309 --> 00:52:54,140
high mark you got to beat that man yeah

1196
00:52:51,409 --> 00:52:56,869
oh oh I dumped my slides into the

1197
00:52:54,140 --> 00:53:01,609
appropriate chance laughs excellent

1198
00:52:56,869 --> 00:53:05,079
thank you guys okay all right Shane

1199
00:53:01,609 --> 00:53:05,078
thank you so much for everything

