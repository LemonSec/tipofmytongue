1
00:00:03,470 --> 00:00:08,220
welcome to<font color="#CCCCCC"> our presentation of</font><font color="#E5E5E5"> the</font>

2
00:00:05,640 --> 00:00:10,590
possibilities<font color="#CCCCCC"> today we will be</font>

3
00:00:08,220 --> 00:00:13,920
discussing<font color="#CCCCCC"> a point of sale software</font><font color="#E5E5E5"> and</font>

4
00:00:10,590 --> 00:00:15,719
their insecurities so<font color="#CCCCCC"> my name is</font><font color="#E5E5E5"> Anthony</font>

5
00:00:13,920 --> 00:00:18,029
sass news<font color="#E5E5E5"> I work as a security worship</font>

6
00:00:15,720 --> 00:00:20,789
researcher<font color="#CCCCCC"> at first light they currently</font>

7
00:00:18,029 --> 00:00:23,460
<font color="#CCCCCC">invested into hardware security</font><font color="#E5E5E5"> reverse</font>

8
00:00:20,789 --> 00:00:26,400
engineering<font color="#E5E5E5"> communication protocols and</font>

9
00:00:23,460 --> 00:00:29,460
low mobility search my<font color="#E5E5E5"> name is Fabius I</font>

10
00:00:26,400 --> 00:00:31,259
also worked for<font color="#E5E5E5"> their sprite as a</font>

11
00:00:29,460 --> 00:00:33,030
security<font color="#E5E5E5"> researcher and I'm interested</font>

12
00:00:31,259 --> 00:00:36,329
<font color="#E5E5E5">in reverse engineering vulnerability</font>

13
00:00:33,030 --> 00:00:38,850
research<font color="#E5E5E5"> and exploit</font><font color="#CCCCCC"> dev and first off</font>

14
00:00:36,329 --> 00:00:41,250
we're both the noobs at this this<font color="#CCCCCC"> is</font>

15
00:00:38,850 --> 00:00:44,519
<font color="#E5E5E5">both of</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> first real research cake and</font>

16
00:00:41,250 --> 00:00:46,920
this was our<font color="#E5E5E5"> first research project we</font>

17
00:00:44,519 --> 00:00:48,449
were tasked<font color="#E5E5E5"> with point-of-sale research</font>

18
00:00:46,920 --> 00:00:50,609
basically<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of its large scope</font>

19
00:00:48,449 --> 00:00:53,010
it'll give us the<font color="#E5E5E5"> freedom</font><font color="#CCCCCC"> to poke and</font>

20
00:00:50,609 --> 00:00:55,499
<font color="#E5E5E5">prod and actually get creative with it</font>

21
00:00:53,010 --> 00:00:57,690
<font color="#CCCCCC">yeah as Anthony said we're both new this</font>

22
00:00:55,499 --> 00:00:59,670
<font color="#E5E5E5">is</font><font color="#CCCCCC"> our first presentation so we have to</font>

23
00:00:57,690 --> 00:01:01,530
kind<font color="#E5E5E5"> of figure</font><font color="#CCCCCC"> out which tools resources</font>

24
00:00:59,670 --> 00:01:04,739
and techniques work for us throughout

25
00:01:01,530 --> 00:01:06,210
this<font color="#E5E5E5"> project so I'm certain everybody</font>

26
00:01:04,739 --> 00:01:08,580
here knows what a point-of-sale system

27
00:01:06,210 --> 00:01:11,250
is it's very<font color="#CCCCCC"> it's ubiquitous in daily</font>

28
00:01:08,580 --> 00:01:13,050
life<font color="#CCCCCC"> we understand</font><font color="#E5E5E5"> every day whether we</font>

29
00:01:11,250 --> 00:01:16,590
<font color="#E5E5E5">are going to the</font><font color="#CCCCCC"> grocery store</font><font color="#E5E5E5"> whether</font>

30
00:01:13,050 --> 00:01:17,700
<font color="#E5E5E5">we're looking</font><font color="#CCCCCC"> at a</font><font color="#E5E5E5"> hotel room yeah so at</font>

31
00:01:16,590 --> 00:01:20,100
the beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our research we</font>

32
00:01:17,700 --> 00:01:22,710
investigated on some of the high-profile

33
00:01:20,100 --> 00:01:24,030
security breaches<font color="#E5E5E5"> that happened and we</font>

34
00:01:22,710 --> 00:01:26,279
noticed that<font color="#E5E5E5"> a lot of them were due to</font>

35
00:01:24,030 --> 00:01:28,920
point of<font color="#E5E5E5"> selling securities earlier than</font>

36
00:01:26,280 --> 00:01:30,870
earlier this year<font color="#CCCCCC"> and</font><font color="#E5E5E5"> album</font><font color="#CCCCCC"> B is</font><font color="#E5E5E5"> French</font>

37
00:01:28,920 --> 00:01:33,060
I see by the name of<font color="#E5E5E5"> our</font><font color="#CCCCCC"> teenage</font>

38
00:01:30,870 --> 00:01:34,980
<font color="#E5E5E5">Holdings suffer no security breach</font><font color="#CCCCCC"> in</font>

39
00:01:33,060 --> 00:01:37,560
which they discover POS<font color="#E5E5E5"> power on their</font>

40
00:01:34,980 --> 00:01:40,020
<font color="#E5E5E5">security systems and late</font><font color="#CCCCCC"> last year</font>

41
00:01:37,560 --> 00:01:41,670
<font color="#CCCCCC">forever21 also discovered some</font>

42
00:01:40,020 --> 00:01:43,830
<font color="#CCCCCC">point-of-sale malware that have been on</font>

43
00:01:41,670 --> 00:01:44,370
their systems<font color="#CCCCCC"> for about seven months</font>

44
00:01:43,830 --> 00:01:46,800
<font color="#E5E5E5">before</font>

45
00:01:44,370 --> 00:01:48,150
<font color="#E5E5E5">detective</font><font color="#CCCCCC"> wait and we thought looking at</font>

46
00:01:46,800 --> 00:01:51,899
<font color="#CCCCCC">malware it would be</font><font color="#E5E5E5"> actually a good</font>

47
00:01:48,150 --> 00:01:54,090
<font color="#E5E5E5">place</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> so we decided to download</font>

48
00:01:51,900 --> 00:01:55,770
<font color="#E5E5E5">different families of malware actually</font>

49
00:01:54,090 --> 00:01:58,770
reverse engineer and understand what

50
00:01:55,770 --> 00:02:01,020
kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> capabilities</font><font color="#E5E5E5"> they were actually</font>

51
00:01:58,770 --> 00:02:03,960
using so we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to talk a little</font>

52
00:02:01,020 --> 00:02:05,340
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> about POS malware</font><font color="#E5E5E5"> so what</font><font color="#CCCCCC"> assault</font>

53
00:02:03,960 --> 00:02:06,839
malware is a very<font color="#E5E5E5"> different from your</font>

54
00:02:05,340 --> 00:02:09,270
traditional malware<font color="#E5E5E5"> the primary</font>

55
00:02:06,840 --> 00:02:11,970
difference is their objective<font color="#E5E5E5"> point of</font>

56
00:02:09,270 --> 00:02:13,440
<font color="#CCCCCC">sale</font><font color="#E5E5E5"> malware has the sole objective of</font>

57
00:02:11,970 --> 00:02:15,570
stealing your credit<font color="#E5E5E5"> card information</font>

58
00:02:13,440 --> 00:02:17,609
<font color="#CCCCCC">now the</font><font color="#E5E5E5"> canary</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> the same way as</font>

59
00:02:15,570 --> 00:02:19,650
traditional malware through phishing or

60
00:02:17,610 --> 00:02:21,120
<font color="#CCCCCC">brute-force attacks</font><font color="#E5E5E5"> however as I</font>

61
00:02:19,650 --> 00:02:23,640
<font color="#E5E5E5">mentioned they're just they</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> want</font>

62
00:02:21,120 --> 00:02:25,920
<font color="#E5E5E5">credit</font><font color="#CCCCCC"> card data</font><font color="#E5E5E5"> so like maybe</font><font color="#CCCCCC"> it said</font>

63
00:02:23,640 --> 00:02:27,750
the main goal of this malware<font color="#E5E5E5"> is to get</font>

64
00:02:25,920 --> 00:02:30,119
<font color="#CCCCCC">your</font><font color="#E5E5E5"> attractive your credit card data</font>

65
00:02:27,750 --> 00:02:31,310
and<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a formalized standard from</font>

66
00:02:30,120 --> 00:02:34,650
<font color="#CCCCCC">the international standards organization</font>

67
00:02:31,310 --> 00:02:36,900
<font color="#CCCCCC">so the criminals</font><font color="#E5E5E5"> already know what</font>

68
00:02:34,650 --> 00:02:39,500
format this data takes and they're able

69
00:02:36,900 --> 00:02:42,510
to use<font color="#E5E5E5"> this knowledge to</font><font color="#CCCCCC"> Parsons and</font>

70
00:02:39,500 --> 00:02:44,670
extract<font color="#CCCCCC"> your primary account number</font><font color="#E5E5E5"> your</font>

71
00:02:42,510 --> 00:02:46,260
<font color="#E5E5E5">card holder name expiration</font><font color="#CCCCCC"> date your</font>

72
00:02:44,670 --> 00:02:50,940
security code<font color="#CCCCCC"> and everything they would</font>

73
00:02:46,260 --> 00:02:52,560
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to actually make purchases so the</font>

74
00:02:50,940 --> 00:02:55,500
attack surface for point-of-sale malware

75
00:02:52,560 --> 00:02:57,600
<font color="#E5E5E5">is sort of familiar</font><font color="#CCCCCC"> it's what we usually</font>

76
00:02:55,500 --> 00:02:59,280
<font color="#E5E5E5">see most of the points</font><font color="#CCCCCC"> of applications</font>

77
00:02:57,600 --> 00:03:01,350
that<font color="#CCCCCC"> we saw are supported by the</font><font color="#E5E5E5"> Windows</font>

78
00:02:59,280 --> 00:03:03,209
platform<font color="#CCCCCC"> we also</font><font color="#E5E5E5"> discovered</font><font color="#CCCCCC"> something</font>

79
00:03:01,350 --> 00:03:04,560
called<font color="#CCCCCC"> Windows POS rain which we didn't</font>

80
00:03:03,209 --> 00:03:08,459
<font color="#E5E5E5">know about before we started</font><font color="#CCCCCC"> this</font>

81
00:03:04,560 --> 00:03:10,500
<font color="#CCCCCC">project which is a POS focus</font><font color="#E5E5E5"> Windows</font>

82
00:03:08,459 --> 00:03:13,080
distribution<font color="#E5E5E5"> a lot of the applications</font>

83
00:03:10,500 --> 00:03:15,810
<font color="#CCCCCC">are</font><font color="#E5E5E5"> also supported on Linux or Mac</font>

84
00:03:13,080 --> 00:03:19,050
<font color="#E5E5E5">however these</font><font color="#CCCCCC"> are much less common than</font>

85
00:03:15,810 --> 00:03:21,060
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Windows supported applications</font><font color="#E5E5E5"> now</font>

86
00:03:19,050 --> 00:03:24,959
there are a few<font color="#CCCCCC"> big players</font><font color="#E5E5E5"> in this</font>

87
00:03:21,060 --> 00:03:26,700
space<font color="#E5E5E5"> namely Oracle and NCR but there</font>

88
00:03:24,959 --> 00:03:28,440
are a<font color="#E5E5E5"> lot of small guys it's a very</font>

89
00:03:26,700 --> 00:03:30,420
diverse landscape when we<font color="#CCCCCC"> look at it</font>

90
00:03:28,440 --> 00:03:32,730
there<font color="#CCCCCC"> are over</font><font color="#E5E5E5"> 3,000</font><font color="#CCCCCC"> applications and</font>

91
00:03:30,420 --> 00:03:34,160
this makes it<font color="#CCCCCC"> very difficult</font><font color="#E5E5E5"> to verify</font>

92
00:03:32,730 --> 00:03:37,040
<font color="#E5E5E5">each and every one</font><font color="#CCCCCC"> to</font>

93
00:03:34,160 --> 00:03:38,000
sure that<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> the security</font><font color="#E5E5E5"> so</font>

94
00:03:37,040 --> 00:03:40,519
we're going to<font color="#E5E5E5"> start talking</font><font color="#CCCCCC"> about some</font>

95
00:03:38,000 --> 00:03:43,430
<font color="#E5E5E5">cortisone our the first one</font><font color="#CCCCCC"> we'll talk</font>

96
00:03:40,520 --> 00:03:45,290
<font color="#E5E5E5">about</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> black POS black POS edit scores</font>

97
00:03:43,430 --> 00:03:49,190
the<font color="#CCCCCC"> command-line utility for scraping</font>

98
00:03:45,290 --> 00:03:51,140
<font color="#CCCCCC">the process memory for track data as a</font>

99
00:03:49,190 --> 00:03:54,170
bundle<font color="#E5E5E5"> Trojan lactulose includes</font>

100
00:03:51,140 --> 00:03:56,450
exfiltration methods such as email and

101
00:03:54,170 --> 00:03:58,040
<font color="#CCCCCC">FTP and black POS was actually</font>

102
00:03:56,450 --> 00:04:01,040
discovered<font color="#E5E5E5"> during the forensic analysis</font>

103
00:03:58,040 --> 00:04:04,010
<font color="#E5E5E5">of the target range in 2013 next we'll</font>

104
00:04:01,040 --> 00:04:08,269
discuss<font color="#CCCCCC"> Dexter</font><font color="#E5E5E5"> what makes Dexter unique</font>

105
00:04:04,010 --> 00:04:10,160
with between instead<font color="#E5E5E5"> of the other pieces</font>

106
00:04:08,270 --> 00:04:12,470
of<font color="#E5E5E5"> malware that we looked at is its</font><font color="#CCCCCC"> RAM</font>

107
00:04:10,160 --> 00:04:14,270
scraper actually utilized<font color="#CCCCCC"> quite a</font><font color="#E5E5E5"> bite</font>

108
00:04:12,470 --> 00:04:17,060
<font color="#CCCCCC">why scraping algorithm which made it</font>

109
00:04:14,270 --> 00:04:21,079
more efficient<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> mammal malware</font>

110
00:04:17,060 --> 00:04:23,150
families used regular expressions this

111
00:04:21,079 --> 00:04:26,180
<font color="#E5E5E5">also</font><font color="#CCCCCC"> dumped dropped a</font><font color="#E5E5E5"> key logging</font>

112
00:04:23,150 --> 00:04:28,549
library which if the data wasn't swiped

113
00:04:26,180 --> 00:04:30,500
<font color="#E5E5E5">if it was just pressed in to a key</font><font color="#CCCCCC"> to a</font>

114
00:04:28,550 --> 00:04:33,320
<font color="#CCCCCC">keypad</font><font color="#E5E5E5"> don't actually capture that to</font>

115
00:04:30,500 --> 00:04:36,140
<font color="#E5E5E5">the leaked the source was also leaked</font>

116
00:04:33,320 --> 00:04:38,090
<font color="#E5E5E5">one line which newer variants of malar</font>

117
00:04:36,140 --> 00:04:40,909
actually took and incorporated some of

118
00:04:38,090 --> 00:04:43,070
<font color="#E5E5E5">their capabilities so we're gonna talk</font>

119
00:04:40,910 --> 00:04:44,930
<font color="#E5E5E5">about magic POS it gets the same from</font>

120
00:04:43,070 --> 00:04:47,120
<font color="#E5E5E5">the magic panel which</font><font color="#CCCCCC"> you can see here</font>

121
00:04:44,930 --> 00:04:49,669
<font color="#E5E5E5">the attackers actually choose a network</font>

122
00:04:47,120 --> 00:04:51,860
rank and scan them for B and C and RDP

123
00:04:49,669 --> 00:04:54,560
<font color="#E5E5E5">services attempt to</font><font color="#CCCCCC"> authenticate to</font><font color="#E5E5E5"> them</font>

124
00:04:51,860 --> 00:04:56,180
with a<font color="#CCCCCC"> brute-force</font><font color="#E5E5E5"> attack after they up</font>

125
00:04:54,560 --> 00:04:59,120
<font color="#CCCCCC">indicate</font><font color="#E5E5E5"> they installed an hour which</font><font color="#CCCCCC"> is</font>

126
00:04:56,180 --> 00:05:02,060
a dotnet application and then access its

127
00:04:59,120 --> 00:05:03,440
capabilities through the magic panel we

128
00:05:02,060 --> 00:05:05,540
also looked<font color="#E5E5E5"> at something called you</font><font color="#CCCCCC"> do</font>

129
00:05:03,440 --> 00:05:07,490
<font color="#CCCCCC">posts what may beauty poster week is</font>

130
00:05:05,540 --> 00:05:10,430
that<font color="#E5E5E5"> masquerading as a legitimate</font>

131
00:05:07,490 --> 00:05:12,560
program<font color="#E5E5E5"> this little</font><font color="#CCCCCC"> admit program must</font>

132
00:05:10,430 --> 00:05:15,650
<font color="#CCCCCC">log me in it says secure</font><font color="#E5E5E5"> remote desktop</font>

133
00:05:12,560 --> 00:05:18,050
software<font color="#E5E5E5"> it also incorporated some anti</font>

134
00:05:15,650 --> 00:05:20,390
<font color="#E5E5E5">analysis functionality which equals</font>

135
00:05:18,050 --> 00:05:24,560
install in a virtual machine<font color="#CCCCCC"> or detected</font>

136
00:05:20,390 --> 00:05:26,960
<font color="#CCCCCC">antivirus do eliminates capabilities and</font>

137
00:05:24,560 --> 00:05:29,240
the last piece of<font color="#E5E5E5"> point-of-sale malware</font>

138
00:05:26,960 --> 00:05:30,510
going to talk about<font color="#E5E5E5"> steam cut pink</font><font color="#CCCCCC"> cards</font>

139
00:05:29,240 --> 00:05:34,020
relatively new

140
00:05:30,510 --> 00:05:37,409
discovered in March of<font color="#E5E5E5"> 2018 it's a</font>

141
00:05:34,020 --> 00:05:39,419
successor of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> baton our family it's</font>

142
00:05:37,410 --> 00:05:41,430
really<font color="#CCCCCC"> small at six kilobytes it kills</font>

143
00:05:39,420 --> 00:05:43,560
itself after<font color="#E5E5E5"> 12 hours it's sort of the</font>

144
00:05:41,430 --> 00:05:45,690
quick and dirty<font color="#E5E5E5"> POS malware just to</font>

145
00:05:43,560 --> 00:05:48,540
<font color="#CCCCCC">steal card information and remove its</font>

146
00:05:45,690 --> 00:05:50,070
tracks<font color="#E5E5E5"> this is as I mentioned was one of</font>

147
00:05:48,540 --> 00:05:52,350
more<font color="#E5E5E5"> recent variants so this gives us</font>

148
00:05:50,070 --> 00:05:56,190
<font color="#E5E5E5">like an idea of where the</font><font color="#CCCCCC"> point-of-sale</font>

149
00:05:52,350 --> 00:05:58,530
<font color="#CCCCCC">malware</font><font color="#E5E5E5"> landscape is now we've talked a</font>

150
00:05:56,190 --> 00:05:59,520
<font color="#CCCCCC">lot</font><font color="#E5E5E5"> about little some of those</font><font color="#CCCCCC"> samples</font>

151
00:05:58,530 --> 00:06:00,570
of point-of-sale malware that<font color="#CCCCCC"> we've</font>

152
00:05:59,520 --> 00:06:02,700
looked<font color="#E5E5E5"> at</font><font color="#CCCCCC"> and now we want to talk</font><font color="#E5E5E5"> about</font>

153
00:06:00,570 --> 00:06:05,790
<font color="#CCCCCC">something that</font><font color="#E5E5E5"> are affected by these</font>

154
00:06:02,700 --> 00:06:08,610
pieces of malware as well as security

155
00:06:05,790 --> 00:06:10,980
problems that<font color="#CCCCCC"> we've identified</font><font color="#E5E5E5"> in the</font>

156
00:06:08,610 --> 00:06:12,830
first<font color="#E5E5E5"> point-of-sale application that we</font>

157
00:06:10,980 --> 00:06:15,420
want<font color="#E5E5E5"> to talk about</font><font color="#CCCCCC"> is called possum Evo</font>

158
00:06:12,830 --> 00:06:16,380
<font color="#E5E5E5">possum Evo is a place on inventory</font>

159
00:06:15,420 --> 00:06:18,150
management system

160
00:06:16,380 --> 00:06:20,730
it's a written<font color="#E5E5E5"> Java however when you</font>

161
00:06:18,150 --> 00:06:23,429
<font color="#CCCCCC">actually run possum Evo it triggers a</font>

162
00:06:20,730 --> 00:06:26,280
C++ launcher that calls the<font color="#CCCCCC"> Java code</font>

163
00:06:23,430 --> 00:06:28,650
<font color="#CCCCCC">it's back-end is uses a maria's DB which</font>

164
00:06:26,280 --> 00:06:31,530
<font color="#CCCCCC">is a partner for my sequel and when you</font>

165
00:06:28,650 --> 00:06:34,849
<font color="#E5E5E5">install pasta and bundles its own Java</font>

166
00:06:31,530 --> 00:06:37,890
binaries<font color="#E5E5E5"> and my sequel client utilities</font>

167
00:06:34,850 --> 00:06:39,390
since<font color="#E5E5E5"> possum is written in Java</font><font color="#CCCCCC"> we have</font>

168
00:06:37,890 --> 00:06:42,000
to figure out how we wanted<font color="#CCCCCC"> to</font>

169
00:06:39,390 --> 00:06:43,860
<font color="#E5E5E5">reverse-engineer Java applications so</font>

170
00:06:42,000 --> 00:06:45,090
Java is a programming language that<font color="#CCCCCC"> is</font>

171
00:06:43,860 --> 00:06:47,760
capable<font color="#E5E5E5"> of running on many different</font>

172
00:06:45,090 --> 00:06:49,859
architectures<font color="#E5E5E5"> due</font><font color="#CCCCCC"> to its write once run</font>

173
00:06:47,760 --> 00:06:51,840
anywhere nature<font color="#E5E5E5"> and the way it</font><font color="#CCCCCC"> does this</font>

174
00:06:49,860 --> 00:06:54,120
is by compiling down<font color="#E5E5E5"> a byte code instead</font>

175
00:06:51,840 --> 00:06:57,599
of machine code<font color="#CCCCCC"> and we discover the bike</font>

176
00:06:54,120 --> 00:06:59,670
<font color="#CCCCCC">hooks actually possible to decompile</font>

177
00:06:57,600 --> 00:07:02,280
them to relatively accurate<font color="#CCCCCC"> a source</font>

178
00:06:59,670 --> 00:07:04,320
code representation so our tool of

179
00:07:02,280 --> 00:07:06,299
choice<font color="#E5E5E5"> for this was bytecode viewer</font><font color="#CCCCCC"> my</font>

180
00:07:04,320 --> 00:07:08,849
<font color="#CCCCCC">leg</font><font color="#E5E5E5"> vidya says it allows</font><font color="#CCCCCC"> us to take</font><font color="#E5E5E5"> the</font>

181
00:07:06,300 --> 00:07:10,950
<font color="#CCCCCC">cup</font><font color="#E5E5E5"> byte code and turn it into a source</font>

182
00:07:08,850 --> 00:07:13,290
code<font color="#E5E5E5"> representation quite easily</font><font color="#CCCCCC"> and</font>

183
00:07:10,950 --> 00:07:14,909
this is<font color="#E5E5E5"> this makes it easy to</font><font color="#CCCCCC"> look at</font>

184
00:07:13,290 --> 00:07:16,020
source code<font color="#CCCCCC"> look at the flow of the</font>

185
00:07:14,910 --> 00:07:19,140
<font color="#CCCCCC">program to search for security</font>

186
00:07:16,020 --> 00:07:21,659
<font color="#CCCCCC">vulnerabilities and lots of bubbles</font><font color="#E5E5E5"> so</font>

187
00:07:19,140 --> 00:07:23,460
given the source code<font color="#CCCCCC"> representation</font><font color="#E5E5E5"> we</font>

188
00:07:21,660 --> 00:07:25,350
<font color="#CCCCCC">haven't sit down</font><font color="#E5E5E5"> to think how do what do</font>

189
00:07:23,460 --> 00:07:27,330
we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look for and the data</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

190
00:07:25,350 --> 00:07:29,160
have<font color="#E5E5E5"> so the first thing</font><font color="#CCCCCC"> what look</font><font color="#E5E5E5"> before</font>

191
00:07:27,330 --> 00:07:30,810
<font color="#E5E5E5">in the code is authentication routines</font>

192
00:07:29,160 --> 00:07:33,270
<font color="#CCCCCC">because</font><font color="#E5E5E5"> well see there's</font><font color="#CCCCCC"> any way we can</font>

193
00:07:30,810 --> 00:07:34,350
potentially bypass authentication<font color="#CCCCCC"> next</font>

194
00:07:33,270 --> 00:07:35,940
thing we looked at was cryptographic

195
00:07:34,350 --> 00:07:38,370
routines to see if there was<font color="#E5E5E5"> any keys</font>

196
00:07:35,940 --> 00:07:38,969
<font color="#E5E5E5">that we had access</font><font color="#CCCCCC"> to as low prim users</font>

197
00:07:38,370 --> 00:07:40,949
or if they

198
00:07:38,969 --> 00:07:43,049
using a weak cryptographic algorithm

199
00:07:40,949 --> 00:07:44,579
next one look at constant<font color="#E5E5E5"> Phillips</font>

200
00:07:43,049 --> 00:07:46,799
<font color="#CCCCCC">worked which</font><font color="#E5E5E5"> are just collections of</font>

201
00:07:44,579 --> 00:07:48,719
variables such as<font color="#CCCCCC"> usernames</font><font color="#E5E5E5"> port numbers</font>

202
00:07:46,799 --> 00:07:51,149
etc<font color="#E5E5E5"> that might give us an insight into</font>

203
00:07:48,719 --> 00:07:53,069
<font color="#CCCCCC">what to look for during</font><font color="#E5E5E5"> our analysis and</font>

204
00:07:51,149 --> 00:07:54,689
in that<font color="#E5E5E5"> regards we also want to look for</font>

205
00:07:53,069 --> 00:07:57,089
any hard-coded credentials<font color="#E5E5E5"> that we could</font>

206
00:07:54,689 --> 00:07:59,129
<font color="#CCCCCC">possibly use</font><font color="#E5E5E5"> we wanted to analyze how</font>

207
00:07:57,089 --> 00:08:01,439
the<font color="#E5E5E5"> model-view-controller code was set</font>

208
00:07:59,129 --> 00:08:03,029
up because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> wanna see we</font><font color="#E5E5E5"> can take a</font>

209
00:08:01,439 --> 00:08:04,529
graphical look<font color="#E5E5E5"> at the graphical</font>

210
00:08:03,029 --> 00:08:06,360
components of the<font color="#CCCCCC"> application and</font>

211
00:08:04,529 --> 00:08:08,849
<font color="#CCCCCC">they're set how its</font><font color="#E5E5E5"> underlying</font>

212
00:08:06,360 --> 00:08:10,199
functionality<font color="#E5E5E5"> was implemented well look</font>

213
00:08:08,849 --> 00:08:11,998
at the use<font color="#E5E5E5"> of</font><font color="#CCCCCC"> external dependencies</font>

214
00:08:10,199 --> 00:08:13,739
<font color="#CCCCCC">because</font><font color="#E5E5E5"> I have an issue with the</font>

215
00:08:11,999 --> 00:08:16,289
dependency<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> inherited by</font><font color="#CCCCCC"> the</font>

216
00:08:13,739 --> 00:08:17,969
application<font color="#CCCCCC"> and lastly</font><font color="#E5E5E5"> ones look at</font>

217
00:08:16,289 --> 00:08:20,248
<font color="#E5E5E5">network operations because we all know</font>

218
00:08:17,969 --> 00:08:23,339
<font color="#E5E5E5">the network attack surface is a very</font>

219
00:08:20,249 --> 00:08:24,419
juicy target for attackers<font color="#CCCCCC"> so now we're</font>

220
00:08:23,339 --> 00:08:26,849
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to talk about</font><font color="#E5E5E5"> some of the things</font>

221
00:08:24,419 --> 00:08:28,529
we found with posted<font color="#E5E5E5"> Ebola or Pasadena</font>

222
00:08:26,849 --> 00:08:30,899
our first finding was the<font color="#CCCCCC"> use of</font>

223
00:08:28,529 --> 00:08:32,729
hard-coded credentials<font color="#CCCCCC"> these were</font>

224
00:08:30,899 --> 00:08:35,279
sprinkled<font color="#E5E5E5"> throughout the source code of</font>

225
00:08:32,729 --> 00:08:37,740
<font color="#CCCCCC">D compilation we were able to use these</font>

226
00:08:35,279 --> 00:08:41,399
<font color="#E5E5E5">credentials to log into the</font><font color="#CCCCCC"> Morea</font>

227
00:08:37,740 --> 00:08:43,589
database<font color="#E5E5E5"> with this with this capability</font>

228
00:08:41,399 --> 00:08:46,559
we're able to create<font color="#E5E5E5"> user-defined</font>

229
00:08:43,589 --> 00:08:49,079
<font color="#E5E5E5">functions which we were</font><font color="#CCCCCC"> able to use</font><font color="#E5E5E5"> to</font>

230
00:08:46,559 --> 00:08:51,089
achieve code execution<font color="#E5E5E5"> one thing to note</font>

231
00:08:49,079 --> 00:08:54,029
is that<font color="#E5E5E5"> Reggie</font><font color="#CCCCCC"> bean is started by the</font>

232
00:08:51,089 --> 00:08:56,970
<font color="#E5E5E5">Maria to the Evo service and that runs</font>

233
00:08:54,029 --> 00:09:00,000
as local local system if we're able<font color="#E5E5E5"> to</font>

234
00:08:56,970 --> 00:09:03,420
get code execution<font color="#E5E5E5"> we're able to execute</font>

235
00:09:00,000 --> 00:09:08,129
<font color="#CCCCCC">codes with those privileges and here is</font>

236
00:09:03,420 --> 00:09:10,089
a demo<font color="#CCCCCC"> of us</font><font color="#E5E5E5"> doing that so first off we</font>

237
00:09:08,129 --> 00:09:12,430
are going<font color="#E5E5E5"> to</font>

238
00:09:10,090 --> 00:09:15,610
upload the netcat binary to be later

239
00:09:12,430 --> 00:09:18,640
used as<font color="#E5E5E5"> a background we upload our</font>

240
00:09:15,610 --> 00:09:21,550
shared library that is<font color="#E5E5E5"> IDF our</font><font color="#CCCCCC"> usual</font>

241
00:09:18,640 --> 00:09:24,970
<font color="#CCCCCC">flight function</font><font color="#E5E5E5"> we are going</font><font color="#CCCCCC"> to log into</font>

242
00:09:21,550 --> 00:09:27,099
the database<font color="#E5E5E5"> we are going to import the</font>

243
00:09:24,970 --> 00:09:30,940
<font color="#E5E5E5">assist exec function from that</font><font color="#CCCCCC"> shared</font>

244
00:09:27,100 --> 00:09:33,730
library<font color="#CCCCCC"> and then we use that</font><font color="#E5E5E5"> function to</font>

245
00:09:30,940 --> 00:09:36,460
the launch<font color="#E5E5E5"> netcat and here it's going to</font>

246
00:09:33,730 --> 00:09:38,950
<font color="#E5E5E5">show us logging in to that vine show</font>

247
00:09:36,460 --> 00:09:40,870
we're getting a bite shell<font color="#E5E5E5"> and we're</font>

248
00:09:38,950 --> 00:09:46,360
gonna have those privileges system

249
00:09:40,870 --> 00:09:49,000
privileges our next finding with<font color="#E5E5E5"> Placid</font>

250
00:09:46,360 --> 00:09:50,670
eval was what we call override<font color="#E5E5E5"> so</font>

251
00:09:49,000 --> 00:09:53,440
initially when we<font color="#E5E5E5"> were looking</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> this</font>

252
00:09:50,670 --> 00:09:55,180
<font color="#CCCCCC">we looked</font><font color="#E5E5E5"> at the logging</font><font color="#CCCCCC"> strain</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> on</font>

253
00:09:53,440 --> 00:09:57,339
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> bottom of the corner</font><font color="#CCCCCC"> we saw an</font>

254
00:09:55,180 --> 00:10:00,219
<font color="#E5E5E5">override button</font><font color="#CCCCCC"> we thought well this</font>

255
00:09:57,339 --> 00:10:01,960
seems<font color="#CCCCCC"> interesting what does it do you</font>

256
00:10:00,220 --> 00:10:04,710
click<font color="#E5E5E5"> on override then you find it'll</font>

257
00:10:01,960 --> 00:10:07,870
<font color="#E5E5E5">give you an override code which it then</font>

258
00:10:04,710 --> 00:10:09,580
<font color="#E5E5E5">expects you to contact an agent</font><font color="#CCCCCC"> and</font>

259
00:10:07,870 --> 00:10:13,930
they'll give<font color="#CCCCCC"> you</font><font color="#E5E5E5"> the override key to</font>

260
00:10:09,580 --> 00:10:15,790
bypass<font color="#E5E5E5"> login so we investigated the</font>

261
00:10:13,930 --> 00:10:18,400
override code was<font color="#E5E5E5"> actually generated</font>

262
00:10:15,790 --> 00:10:19,719
pretty quickly and easily<font color="#E5E5E5"> but we weren't</font>

263
00:10:18,400 --> 00:10:23,100
interested<font color="#E5E5E5"> in this we're interested in</font>

264
00:10:19,720 --> 00:10:25,720
how<font color="#E5E5E5"> this is used to</font><font color="#CCCCCC"> generate a real key</font>

265
00:10:23,100 --> 00:10:27,850
so looking at the<font color="#E5E5E5"> algorithm to generate</font>

266
00:10:25,720 --> 00:10:30,130
the real key we noticed it<font color="#CCCCCC"> wasn't very</font>

267
00:10:27,850 --> 00:10:32,950
<font color="#E5E5E5">complex at all</font><font color="#CCCCCC"> no crypto involved just</font>

268
00:10:30,130 --> 00:10:34,990
<font color="#E5E5E5">some</font><font color="#CCCCCC"> paper basic mathematics so we</font>

269
00:10:32,950 --> 00:10:37,960
thought let's<font color="#CCCCCC"> write a key generator</font><font color="#E5E5E5"> at</font>

270
00:10:34,990 --> 00:10:41,410
least try to and that's basically what

271
00:10:37,960 --> 00:10:43,570
we<font color="#E5E5E5"> did reported the logic over to Python</font>

272
00:10:41,410 --> 00:10:45,310
wrote up a little key generator and this

273
00:10:43,570 --> 00:10:49,470
will<font color="#E5E5E5"> basically allow us to bypass small</font>

274
00:10:45,310 --> 00:10:52,500
<font color="#E5E5E5">volumes</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> here's a demo of us sorry</font>

275
00:10:49,470 --> 00:10:56,650
<font color="#CCCCCC">here's the login screen we hit override</font>

276
00:10:52,500 --> 00:11:01,200
<font color="#E5E5E5">we're given an override code we run our</font>

277
00:10:56,650 --> 00:11:01,199
script in put our code that<font color="#E5E5E5"> was given</font>

278
00:11:01,260 --> 00:11:04,680
get our key

279
00:11:07,560 --> 00:11:13,000
enter our key override and we basically

280
00:11:10,030 --> 00:11:15,160
log in without any<font color="#E5E5E5"> credentials and this</font>

281
00:11:13,000 --> 00:11:19,470
will basically give you access to

282
00:11:15,160 --> 00:11:19,469
actually open cash register<font color="#E5E5E5"> or whatever</font>

283
00:11:19,650 --> 00:11:25,209
so the final component<font color="#CCCCCC"> of Postum that we</font>

284
00:11:23,620 --> 00:11:27,940
want<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about is something</font>

285
00:11:25,210 --> 00:11:30,430
regarding the auto<font color="#E5E5E5"> update feature so</font>

286
00:11:27,940 --> 00:11:32,790
<font color="#CCCCCC">possum stores a</font><font color="#E5E5E5"> copy of the installation</font>

287
00:11:30,430 --> 00:11:34,989
<font color="#E5E5E5">buyer for itself inside of the database</font>

288
00:11:32,790 --> 00:11:36,160
whenever<font color="#E5E5E5"> our</font><font color="#CCCCCC"> possum is</font><font color="#E5E5E5"> launched it</font>

289
00:11:34,990 --> 00:11:38,410
checks the version of the application

290
00:11:36,160 --> 00:11:40,540
<font color="#E5E5E5">that's latched to the immersion that's</font>

291
00:11:38,410 --> 00:11:42,370
in the database<font color="#E5E5E5"> if the</font><font color="#CCCCCC"> murders are equal</font>

292
00:11:40,540 --> 00:11:44,050
<font color="#CCCCCC">opossum lunch is normally if the</font>

293
00:11:42,370 --> 00:11:45,880
<font color="#E5E5E5">database</font><font color="#CCCCCC"> this version</font><font color="#E5E5E5"> is higher they'll</font>

294
00:11:44,050 --> 00:11:47,650
prompt the user to<font color="#CCCCCC"> update their regular</font>

295
00:11:45,880 --> 00:11:49,300
opossum to the newer version and what's

296
00:11:47,650 --> 00:11:50,949
interesting is that the databases

297
00:11:49,300 --> 00:11:52,870
version is lower than what the user is

298
00:11:50,950 --> 00:11:55,210
running who actually<font color="#E5E5E5"> upload the</font><font color="#CCCCCC"> users</font>

299
00:11:52,870 --> 00:11:57,550
installation binary to the database<font color="#E5E5E5"> so</font>

300
00:11:55,210 --> 00:11:58,570
<font color="#E5E5E5">it'll call the DB backup get software</font>

301
00:11:57,550 --> 00:12:00,339
state in order<font color="#CCCCCC"> to determine the</font>

302
00:11:58,570 --> 00:12:03,100
databases installation binary version

303
00:12:00,340 --> 00:12:05,320
and as I mentioned if<font color="#CCCCCC"> the software</font>

304
00:12:03,100 --> 00:12:07,270
<font color="#E5E5E5">version that the</font><font color="#CCCCCC"> user is running</font><font color="#E5E5E5"> is</font>

305
00:12:05,320 --> 00:12:09,280
newer than<font color="#CCCCCC"> the software ISM that's in</font>

306
00:12:07,270 --> 00:12:10,540
the<font color="#CCCCCC"> database</font><font color="#E5E5E5"> it will</font><font color="#CCCCCC"> replace the binary</font>

307
00:12:09,280 --> 00:12:13,569
in the database with the one<font color="#E5E5E5"> that the</font>

308
00:12:10,540 --> 00:12:15,819
user has so whenever<font color="#CCCCCC"> early use are</font>

309
00:12:13,570 --> 00:12:17,890
actually lunch<font color="#CCCCCC"> possum and it checks to</font>

310
00:12:15,820 --> 00:12:20,200
see<font color="#E5E5E5"> are it checks to see on the version</font>

311
00:12:17,890 --> 00:12:21,520
<font color="#E5E5E5">and</font><font color="#CCCCCC"> its newer or older and the user</font>

312
00:12:20,200 --> 00:12:23,260
decides to update

313
00:12:21,520 --> 00:12:27,910
<font color="#E5E5E5">it'll look at the database for a file</font>

314
00:12:23,260 --> 00:12:30,370
<font color="#E5E5E5">called</font><font color="#CCCCCC"> opossum evil</font><font color="#E5E5E5"> GRC so we thought</font>

315
00:12:27,910 --> 00:12:32,350
<font color="#CCCCCC">about</font><font color="#E5E5E5"> this and</font><font color="#CCCCCC"> I was in clinic</font><font color="#E5E5E5"> and given</font>

316
00:12:30,370 --> 00:12:33,970
our access to<font color="#E5E5E5"> the database from the</font>

317
00:12:32,350 --> 00:12:35,710
credentials that<font color="#E5E5E5"> we got earlier</font><font color="#CCCCCC"> we</font>

318
00:12:33,970 --> 00:12:38,560
<font color="#E5E5E5">decided to try to exploit this feature</font>

319
00:12:35,710 --> 00:12:41,080
by<font color="#CCCCCC"> foraging</font><font color="#E5E5E5"> and installation binary so</font>

320
00:12:38,560 --> 00:12:43,030
in order to trigger this routine we have

321
00:12:41,080 --> 00:12:45,520
to meet two requirements the first<font color="#CCCCCC"> is</font>

322
00:12:43,030 --> 00:12:47,620
<font color="#E5E5E5">that in the database</font><font color="#CCCCCC"> our binary</font><font color="#E5E5E5"> has to</font>

323
00:12:45,520 --> 00:12:49,930
be named<font color="#CCCCCC"> opossum underscore evilly XE</font>

324
00:12:47,620 --> 00:12:52,510
and secondly in the<font color="#E5E5E5"> file version hash</font>

325
00:12:49,930 --> 00:12:54,760
which is where the application<font color="#E5E5E5"> gets the</font>

326
00:12:52,510 --> 00:12:56,410
databases<font color="#E5E5E5"> version number has to be</font>

327
00:12:54,760 --> 00:13:01,870
higher<font color="#E5E5E5"> than the</font><font color="#CCCCCC"> version number that was</font>

328
00:12:56,410 --> 00:13:04,130
<font color="#E5E5E5">clients so whenever the binary is</font><font color="#CCCCCC"> is</font>

329
00:13:01,870 --> 00:13:06,770
downloaded by the user after<font color="#E5E5E5"> they</font>

330
00:13:04,130 --> 00:13:08,350
decide<font color="#CCCCCC"> to update opossum</font><font color="#E5E5E5"> test triggers</font>

331
00:13:06,770 --> 00:13:10,310
that<font color="#CCCCCC"> xt-1 watches it</font>

332
00:13:08,350 --> 00:13:12,290
so as I<font color="#E5E5E5"> mentioned we're gonna use the</font>

333
00:13:10,310 --> 00:13:14,150
credentials I've got<font color="#E5E5E5"> previously that's</font>

334
00:13:12,290 --> 00:13:17,540
hard code inside<font color="#E5E5E5"> it's an application</font><font color="#CCCCCC"> to</font>

335
00:13:14,150 --> 00:13:20,990
<font color="#CCCCCC">logger database</font><font color="#E5E5E5"> create a binary that's</font>

336
00:13:17,540 --> 00:13:23,420
to be used<font color="#CCCCCC"> for installation and trigger</font>

337
00:13:20,990 --> 00:13:26,870
the auto update<font color="#CCCCCC"> feature character</font><font color="#E5E5E5"> demo</font>

338
00:13:23,420 --> 00:13:29,780
<font color="#E5E5E5">of that in action so first we log</font><font color="#CCCCCC"> into</font>

339
00:13:26,870 --> 00:13:32,110
the database server<font color="#E5E5E5"> and then we</font><font color="#CCCCCC"> a switch</font>

340
00:13:29,780 --> 00:13:34,220
over<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> possum database context</font>

341
00:13:32,110 --> 00:13:36,020
<font color="#E5E5E5">after that what we want</font><font color="#CCCCCC"> to do is want to</font>

342
00:13:34,220 --> 00:13:38,330
<font color="#E5E5E5">get the actual version</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> that store</font>

343
00:13:36,020 --> 00:13:40,250
the database and you<font color="#E5E5E5"> can see here it's</font>

344
00:13:38,330 --> 00:13:41,930
one point<font color="#E5E5E5"> fifteen point five</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to</font>

345
00:13:40,250 --> 00:13:43,130
update that<font color="#E5E5E5"> so that's newer than what</font>

346
00:13:41,930 --> 00:13:44,689
the cloud<font color="#E5E5E5"> do right so we're going to</font>

347
00:13:43,130 --> 00:13:47,270
<font color="#E5E5E5">change it</font><font color="#CCCCCC"> to one point fifteen point six</font>

348
00:13:44,690 --> 00:13:49,760
<font color="#E5E5E5">and then we're going to upload a</font><font color="#CCCCCC"> binary</font>

349
00:13:47,270 --> 00:13:53,590
to the server<font color="#E5E5E5"> and we're going to name</font><font color="#CCCCCC"> it</font>

350
00:13:49,760 --> 00:13:55,580
<font color="#E5E5E5">possum underscore evil</font><font color="#CCCCCC"> exe whenever</font>

351
00:13:53,590 --> 00:13:57,740
that's<font color="#CCCCCC"> uploaded with</font><font color="#E5E5E5"> a newer version</font>

352
00:13:55,580 --> 00:14:06,320
<font color="#CCCCCC">after the user actually launches</font>

353
00:13:57,740 --> 00:14:08,750
<font color="#E5E5E5">application it prompts the user to</font>

354
00:14:06,320 --> 00:14:10,580
<font color="#E5E5E5">update it'll say hey you</font><font color="#CCCCCC"> want to update</font>

355
00:14:08,750 --> 00:14:14,980
for fifteen point five to fifteen point

356
00:14:10,580 --> 00:14:17,900
six after<font color="#E5E5E5"> the user clicks a valid update</font>

357
00:14:14,980 --> 00:14:19,460
it'll download it and<font color="#CCCCCC"> execute it</font><font color="#E5E5E5"> in the</font>

358
00:14:17,900 --> 00:14:21,199
binary<font color="#E5E5E5"> we upload</font><font color="#CCCCCC"> it as a calculator</font>

359
00:14:19,460 --> 00:14:23,450
application<font color="#E5E5E5"> so instead of actually</font>

360
00:14:21,200 --> 00:14:29,150
launching<font color="#E5E5E5"> possum it launches calculator</font>

361
00:14:23,450 --> 00:14:33,530
instead so our next point<font color="#E5E5E5"> of sale system</font>

362
00:14:29,150 --> 00:14:35,420
that<font color="#E5E5E5"> would speak home is</font><font color="#CCCCCC"> amico POS this</font>

363
00:14:33,530 --> 00:14:37,250
<font color="#E5E5E5">is basically basically used in the</font>

364
00:14:35,420 --> 00:14:39,140
hospitality industry<font color="#CCCCCC"> this</font><font color="#E5E5E5"> was a little</font>

365
00:14:37,250 --> 00:14:40,970
<font color="#CCCCCC">different than a possum</font><font color="#E5E5E5"> as it was</font>

366
00:14:39,140 --> 00:14:42,830
<font color="#E5E5E5">written in the dotnet framework and it</font>

367
00:14:40,970 --> 00:14:46,190
also<font color="#CCCCCC"> used sequel server</font><font color="#E5E5E5"> Express visits</font>

368
00:14:42,830 --> 00:14:48,350
<font color="#CCCCCC">back-end so amico comes bundled</font><font color="#E5E5E5"> with</font>

369
00:14:46,190 --> 00:14:50,600
several different application<font color="#E5E5E5"> one of the</font>

370
00:14:48,350 --> 00:14:53,270
interesting<font color="#E5E5E5"> ones we looked at was called</font>

371
00:14:50,600 --> 00:14:54,650
the<font color="#E5E5E5"> back-office application so through</font>

372
00:14:53,270 --> 00:14:56,060
some<font color="#CCCCCC"> blackbox testing of</font><font color="#E5E5E5"> this</font>

373
00:14:54,650 --> 00:14:57,439
<font color="#CCCCCC">application we discovered</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> it</font>

374
00:14:56,060 --> 00:14:59,180
<font color="#CCCCCC">accepts</font><font color="#E5E5E5"> some interesting command-line</font>

375
00:14:57,440 --> 00:15:01,460
arguments<font color="#E5E5E5"> and two of them are</font>

376
00:14:59,180 --> 00:15:03,800
particularly particularly<font color="#E5E5E5"> interesting</font>

377
00:15:01,460 --> 00:15:05,089
person is tint user if you run back

378
00:15:03,800 --> 00:15:06,049
office with<font color="#CCCCCC"> the temp</font><font color="#E5E5E5"> you are</font>

379
00:15:05,089 --> 00:15:08,359
<font color="#CCCCCC">we'll just</font><font color="#E5E5E5"> create an administrative</font>

380
00:15:06,049 --> 00:15:10,489
temporary user for you<font color="#E5E5E5"> that you can use</font>

381
00:15:08,359 --> 00:15:11,989
to log<font color="#CCCCCC"> into the POS application or to</font>

382
00:15:10,489 --> 00:15:13,489
the back office is<font color="#E5E5E5"> going end of the</font>

383
00:15:11,989 --> 00:15:16,399
application<font color="#E5E5E5"> and perform administrative</font>

384
00:15:13,489 --> 00:15:18,589
<font color="#CCCCCC">tasks</font><font color="#E5E5E5"> the more interesting argument is</font>

385
00:15:16,399 --> 00:15:20,509
the<font color="#E5E5E5"> BD argument as you can see in this</font>

386
00:15:18,589 --> 00:15:23,089
picture<font color="#E5E5E5"> here</font><font color="#CCCCCC"> it gives you</font><font color="#E5E5E5"> access to the</font>

387
00:15:20,509 --> 00:15:25,939
sequel settings allows you to modify and

388
00:15:23,089 --> 00:15:28,309
delete database entries and most

389
00:15:25,939 --> 00:15:29,659
<font color="#E5E5E5">interests most interestingly it gives</font>

390
00:15:28,309 --> 00:15:32,379
you access to<font color="#E5E5E5"> the sequel query window</font>

391
00:15:29,659 --> 00:15:35,479
where<font color="#CCCCCC"> you can just run sequel statements</font>

392
00:15:32,379 --> 00:15:36,919
so for those of<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> familiar with</font><font color="#CCCCCC"> MS</font>

393
00:15:35,479 --> 00:15:38,659
sequel or sequel server expressed or

394
00:15:36,919 --> 00:15:40,819
something called<font color="#CCCCCC"> X</font><font color="#E5E5E5"> to command shell</font><font color="#CCCCCC"> that</font>

395
00:15:38,659 --> 00:15:44,419
allows you to<font color="#CCCCCC"> recommends whenever a mido</font>

396
00:15:40,819 --> 00:15:47,059
pls is installed<font color="#E5E5E5"> it actually installs</font>

397
00:15:44,419 --> 00:15:48,679
<font color="#CCCCCC">his local system</font><font color="#E5E5E5"> it simulations installs</font>

398
00:15:47,059 --> 00:15:50,749
local system<font color="#E5E5E5"> which is interesting</font>

399
00:15:48,679 --> 00:15:52,939
because<font color="#E5E5E5"> you do a standalone install</font>

400
00:15:50,749 --> 00:15:54,589
typically the privilege level<font color="#CCCCCC"> is lower</font>

401
00:15:52,939 --> 00:15:57,679
than<font color="#E5E5E5"> that so that was a choice made by</font>

402
00:15:54,589 --> 00:15:58,849
<font color="#E5E5E5">the Amigo developers so as I said we're</font>

403
00:15:57,679 --> 00:16:00,259
going<font color="#CCCCCC"> to use the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> peak imaginal</font>

404
00:15:58,849 --> 00:16:03,079
procedure to actually run commands

405
00:16:00,259 --> 00:16:05,089
<font color="#E5E5E5">because it's install this local system</font>

406
00:16:03,079 --> 00:16:10,968
we can<font color="#CCCCCC"> use a single query</font><font color="#E5E5E5"> window it's</font>

407
00:16:05,089 --> 00:16:12,559
actually run system commands<font color="#E5E5E5"> so we just</font>

408
00:16:10,969 --> 00:16:14,089
click<font color="#E5E5E5"> on the sequel query window first</font>

409
00:16:12,559 --> 00:16:16,218
<font color="#E5E5E5">we have to enable X the command shell</font>

410
00:16:14,089 --> 00:16:18,079
because a lot of<font color="#E5E5E5"> settings</font><font color="#CCCCCC"> is disabled by</font>

411
00:16:16,219 --> 00:16:19,939
default<font color="#CCCCCC"> but</font><font color="#E5E5E5"> due to our privilege level</font>

412
00:16:18,079 --> 00:16:22,789
<font color="#CCCCCC">within the database we can easily</font>

413
00:16:19,939 --> 00:16:26,089
reenable it after we enable it we can

414
00:16:22,789 --> 00:16:28,848
run XD command shell<font color="#E5E5E5"> and we're just</font>

415
00:16:26,089 --> 00:16:32,359
<font color="#E5E5E5">going to call in that cat to start up</font><font color="#CCCCCC"> by</font>

416
00:16:28,849 --> 00:16:35,179
<font color="#CCCCCC">shelf on port</font><font color="#E5E5E5"> 4 4 4 4 and then we're</font>

417
00:16:32,359 --> 00:16:36,529
going<font color="#E5E5E5"> to click</font><font color="#CCCCCC"> a run query after that</font>

418
00:16:35,179 --> 00:16:38,209
we're<font color="#E5E5E5"> going to open</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> a command prompt</font>

419
00:16:36,529 --> 00:16:40,309
<font color="#E5E5E5">and then using that cat to connect to</font>

420
00:16:38,209 --> 00:16:44,319
the<font color="#CCCCCC"> local</font><font color="#E5E5E5"> host on that same port which</font>

421
00:16:40,309 --> 00:16:44,319
should give<font color="#E5E5E5"> us access to a second shelf</font>

422
00:16:46,150 --> 00:16:51,430
so the<font color="#E5E5E5"> next application want to talk</font>

423
00:16:48,820 --> 00:16:52,779
about is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> active POS actually</font><font color="#E5E5E5"> POS</font>

424
00:16:51,430 --> 00:16:54,699
is another<font color="#E5E5E5"> point of</font><font color="#CCCCCC"> selling</font><font color="#E5E5E5"> inventory</font>

425
00:16:52,779 --> 00:16:55,300
<font color="#E5E5E5">management system</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> also includes</font><font color="#CCCCCC"> tag</font>

426
00:16:54,700 --> 00:16:58,570
clock

427
00:16:55,300 --> 00:17:00,670
options for<font color="#E5E5E5"> employees</font><font color="#CCCCCC"> to clock in</font><font color="#E5E5E5"> and</font>

428
00:16:58,570 --> 00:17:02,500
clock out<font color="#E5E5E5"> it's written in Java so we're</font>

429
00:17:00,670 --> 00:17:05,079
gonna take sort of same approaches that

430
00:17:02,500 --> 00:17:07,780
<font color="#E5E5E5">would possum and its database back in is</font>

431
00:17:05,079 --> 00:17:09,220
actually<font color="#CCCCCC"> in the cloud</font><font color="#E5E5E5"> so we didn't touch</font>

432
00:17:07,780 --> 00:17:12,699
that<font color="#E5E5E5"> because I was strictly out of scope</font>

433
00:17:09,220 --> 00:17:15,339
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the sake of our research so</font>

434
00:17:12,699 --> 00:17:17,110
reversing IQs is very similar to<font color="#E5E5E5"> possum</font>

435
00:17:15,339 --> 00:17:19,270
as I mentioned we just use<font color="#CCCCCC"> bike over</font>

436
00:17:17,109 --> 00:17:20,619
<font color="#E5E5E5">here to decompile application and took</font>

437
00:17:19,270 --> 00:17:21,849
some<font color="#E5E5E5"> of the same approaches that we</font>

438
00:17:20,619 --> 00:17:24,698
discussed earlier

439
00:17:21,849 --> 00:17:26,198
<font color="#CCCCCC">when looking at it however a lot</font><font color="#E5E5E5"> of that</font>

440
00:17:24,699 --> 00:17:27,459
didn't work it<font color="#E5E5E5"> took us a little bit</font>

441
00:17:26,199 --> 00:17:29,830
longer<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually find anything</font>

442
00:17:27,459 --> 00:17:32,380
interesting inside of a queue POS<font color="#CCCCCC"> we had</font>

443
00:17:29,830 --> 00:17:34,659
to think<font color="#E5E5E5"> outside of the box</font><font color="#CCCCCC"> so yeah we</font>

444
00:17:32,380 --> 00:17:36,490
<font color="#CCCCCC">we</font><font color="#E5E5E5"> couldn't find anything initially so</font>

445
00:17:34,660 --> 00:17:39,160
we kind of<font color="#E5E5E5"> had to get creative</font><font color="#CCCCCC"> and how</font>

446
00:17:36,490 --> 00:17:41,020
we were looking we have to take a<font color="#E5E5E5"> brand</font>

447
00:17:39,160 --> 00:17:42,730
<font color="#E5E5E5">new approach basically and now I'm going</font>

448
00:17:41,020 --> 00:17:44,980
<font color="#E5E5E5">to run through</font><font color="#CCCCCC"> some of the rabbit holes</font>

449
00:17:42,730 --> 00:17:48,490
we fell<font color="#CCCCCC"> through and what we were trying</font>

450
00:17:44,980 --> 00:17:51,100
<font color="#CCCCCC">to do so</font><font color="#E5E5E5"> first off we noticed there was</font>

451
00:17:48,490 --> 00:17:54,820
a<font color="#CCCCCC"> java key store installed with a queue</font>

452
00:17:51,100 --> 00:17:57,070
POS now we<font color="#E5E5E5"> alongside</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> found using</font>

453
00:17:54,820 --> 00:18:00,399
<font color="#E5E5E5">static analysis that the password for</font>

454
00:17:57,070 --> 00:18:03,970
this key store was basically put in

455
00:18:00,400 --> 00:18:06,400
there<font color="#CCCCCC"> mark coated so we</font><font color="#E5E5E5"> tried to extract</font>

456
00:18:03,970 --> 00:18:08,260
the contents<font color="#CCCCCC"> we were able to do that we</font>

457
00:18:06,400 --> 00:18:11,290
got a certificate<font color="#CCCCCC"> we got a key material</font>

458
00:18:08,260 --> 00:18:13,870
and we tried<font color="#CCCCCC"> to basically decrypt the</font>

459
00:18:11,290 --> 00:18:17,620
communication<font color="#CCCCCC"> traffic going</font><font color="#E5E5E5"> to the cloud</font>

460
00:18:13,870 --> 00:18:20,439
<font color="#E5E5E5">we tried to do it but</font><font color="#CCCCCC"> we fed so what</font>

461
00:18:17,620 --> 00:18:23,169
next<font color="#E5E5E5"> we looked we want to look at the</font>

462
00:18:20,440 --> 00:18:26,830
network attack<font color="#E5E5E5"> servers now we did notice</font>

463
00:18:23,170 --> 00:18:28,870
that<font color="#E5E5E5"> the Java process was listening on a</font>

464
00:18:26,830 --> 00:18:32,169
port so<font color="#E5E5E5"> we wanted to look at the code</font>

465
00:18:28,870 --> 00:18:35,379
and<font color="#CCCCCC"> look what what was</font><font color="#E5E5E5"> actually doing</font>

466
00:18:32,170 --> 00:18:37,240
and how was it<font color="#E5E5E5"> using it</font><font color="#CCCCCC"> we found</font><font color="#E5E5E5"> it</font>

467
00:18:35,380 --> 00:18:40,900
<font color="#E5E5E5">being used</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> not just</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> instance</font>

468
00:18:37,240 --> 00:18:42,700
class<font color="#E5E5E5"> and this basically only checked to</font>

469
00:18:40,900 --> 00:18:44,250
see if there was something listening on

470
00:18:42,700 --> 00:18:46,679
port<font color="#CCCCCC"> 1 2 3 4</font>

471
00:18:44,250 --> 00:18:48,690
if there was it would assume it's a<font color="#CCCCCC"> cure</font>

472
00:18:46,679 --> 00:18:50,820
POS and it wouldn't want<font color="#CCCCCC"> to another</font>

473
00:18:48,690 --> 00:18:55,399
process and this<font color="#E5E5E5"> basically got us</font>

474
00:18:50,820 --> 00:18:58,500
nowhere also next we wanted to look at

475
00:18:55,399 --> 00:19:00,840
file permissions<font color="#E5E5E5"> what file permissions</font>

476
00:18:58,500 --> 00:19:03,840
were giving to<font color="#CCCCCC"> a cure POS Intifada was</font>

477
00:19:00,840 --> 00:19:06,720
<font color="#CCCCCC">install</font><font color="#E5E5E5"> we used a utility called</font><font color="#CCCCCC"> I</font>

478
00:19:03,840 --> 00:19:09,689
cackles that is bundled<font color="#CCCCCC"> with Windows and</font>

479
00:19:06,720 --> 00:19:14,460
<font color="#E5E5E5">it revealed that all authenticated users</font>

480
00:19:09,690 --> 00:19:16,740
<font color="#CCCCCC">are provided with modified access</font><font color="#E5E5E5"> and we</font>

481
00:19:14,460 --> 00:19:20,370
figured that we can actually backdoor

482
00:19:16,740 --> 00:19:23,100
<font color="#E5E5E5">this by</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> so we did some</font><font color="#CCCCCC"> research that</font>

483
00:19:20,370 --> 00:19:25,379
<font color="#E5E5E5">we consider</font><font color="#CCCCCC"> dealt with</font><font color="#E5E5E5"> so given that</font>

484
00:19:23,100 --> 00:19:26,639
we're able to<font color="#E5E5E5"> essentially modify jar</font>

485
00:19:25,379 --> 00:19:29,100
file we<font color="#E5E5E5"> came on something called jar</font>

486
00:19:26,639 --> 00:19:31,350
<font color="#CCCCCC">jackin jar file for those you don't know</font>

487
00:19:29,100 --> 00:19:33,120
is<font color="#CCCCCC"> basically a zip archive and they</font>

488
00:19:31,350 --> 00:19:35,219
contain the class file as well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> other</font>

489
00:19:33,120 --> 00:19:36,689
<font color="#E5E5E5">resources for the application the class</font>

490
00:19:35,220 --> 00:19:38,970
files<font color="#E5E5E5"> actually contain</font><font color="#CCCCCC"> the code so I</font>

491
00:19:36,690 --> 00:19:41,370
really to modify this file allows us to

492
00:19:38,970 --> 00:19:43,500
essentially reprogram the application

493
00:19:41,370 --> 00:19:44,928
<font color="#E5E5E5">and</font><font color="#CCCCCC"> this actually look more into jar</font>

494
00:19:43,500 --> 00:19:47,850
jackin from a post exploitation

495
00:19:44,929 --> 00:19:49,769
<font color="#E5E5E5">perspective and</font><font color="#CCCCCC"> it's led us</font><font color="#E5E5E5"> to that I</font>

496
00:19:47,850 --> 00:19:52,408
give<font color="#CCCCCC"> to develop a Java implant that we</font>

497
00:19:49,769 --> 00:19:53,909
<font color="#E5E5E5">wanted</font><font color="#CCCCCC"> to put into</font><font color="#E5E5E5"> the dark hair so an</font>

498
00:19:52,409 --> 00:19:55,679
implant is basically a covert piece of

499
00:19:53,909 --> 00:19:58,169
software that<font color="#E5E5E5"> gives someone access to</font>

500
00:19:55,679 --> 00:19:59,730
define capabilities some of the basic

501
00:19:58,169 --> 00:20:01,620
and<font color="#E5E5E5"> abilities that might</font><font color="#CCCCCC"> exist are push</font>

502
00:19:59,730 --> 00:20:04,460
and pull<font color="#CCCCCC"> and exact which allow for</font><font color="#E5E5E5"> file</font>

503
00:20:01,620 --> 00:20:07,080
transfer<font color="#E5E5E5"> and code or command execution</font>

504
00:20:04,460 --> 00:20:09,539
this led to<font color="#E5E5E5"> the creation of something</font>

505
00:20:07,080 --> 00:20:12,090
called runaway<font color="#CCCCCC"> rep sorry</font><font color="#E5E5E5"> so we decided</font>

506
00:20:09,539 --> 00:20:14,908
<font color="#E5E5E5">to</font><font color="#CCCCCC"> build our</font><font color="#E5E5E5"> framework</font><font color="#CCCCCC"> for this we</font>

507
00:20:12,090 --> 00:20:16,740
wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually emulate</font><font color="#E5E5E5"> what a real</font>

508
00:20:14,909 --> 00:20:18,600
attack or a real criminal<font color="#E5E5E5"> organization</font>

509
00:20:16,740 --> 00:20:19,620
would actually do and what that<font color="#CCCCCC"> would</font>

510
00:20:18,600 --> 00:20:21,178
<font color="#CCCCCC">look like</font>

511
00:20:19,620 --> 00:20:23,309
so what<font color="#E5E5E5"> already repertory is our</font>

512
00:20:21,179 --> 00:20:25,620
framework especially an effector<font color="#CCCCCC"> and</font>

513
00:20:23,309 --> 00:20:28,980
implant<font color="#E5E5E5"> and a command and control server</font>

514
00:20:25,620 --> 00:20:31,168
or FCC<font color="#E5E5E5"> to our attack plan was basically</font>

515
00:20:28,980 --> 00:20:32,789
<font color="#CCCCCC">inject an implant code into</font><font color="#E5E5E5"> the</font>

516
00:20:31,169 --> 00:20:36,600
application jar from a<font color="#E5E5E5"> little frivolous</font>

517
00:20:32,789 --> 00:20:40,049
<font color="#E5E5E5">context modify the</font><font color="#CCCCCC"> clasp in the</font><font color="#E5E5E5"> jar to</font>

518
00:20:36,600 --> 00:20:42,178
<font color="#E5E5E5">actually launch our implant demonstrate</font>

519
00:20:40,049 --> 00:20:44,340
capabilities that we want like you know

520
00:20:42,179 --> 00:20:46,889
being<font color="#E5E5E5"> able to grab our credit card data</font>

521
00:20:44,340 --> 00:20:48,300
<font color="#CCCCCC">you know X fill that and</font><font color="#E5E5E5"> whatnot</font>

522
00:20:46,889 --> 00:20:50,939
<font color="#E5E5E5">and you know make some</font>

523
00:20:48,300 --> 00:20:52,350
of course<font color="#E5E5E5"> it's actually</font><font color="#CCCCCC"> a joke we</font>

524
00:20:50,940 --> 00:20:54,540
reported all the things<font color="#E5E5E5"> that we found to</font>

525
00:20:52,350 --> 00:20:56,310
<font color="#CCCCCC">the vendors and some of them responded</font>

526
00:20:54,540 --> 00:20:57,480
appropriately<font color="#E5E5E5"> but they they got all the</font>

527
00:20:56,310 --> 00:21:00,960
<font color="#CCCCCC">information they needed in regards to</font>

528
00:20:57,480 --> 00:21:02,520
<font color="#E5E5E5">anything about we discovered so our</font>

529
00:21:00,960 --> 00:21:04,770
basic architecture for<font color="#E5E5E5"> what we're</font><font color="#CCCCCC"> up to</font>

530
00:21:02,520 --> 00:21:08,250
<font color="#E5E5E5">I was the infect it was written in Ruby</font>

531
00:21:04,770 --> 00:21:10,500
<font color="#E5E5E5">and as a post exploitation module</font><font color="#CCCCCC"> we</font>

532
00:21:08,250 --> 00:21:13,770
used Java for the implant with a little

533
00:21:10,500 --> 00:21:15,630
bit of<font color="#E5E5E5"> C++</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> leverage</font><font color="#CCCCCC"> AAA</font><font color="#E5E5E5"> and also</font><font color="#CCCCCC"> a</font>

534
00:21:13,770 --> 00:21:21,450
<font color="#E5E5E5">Python for the command and control</font>

535
00:21:15,630 --> 00:21:23,070
server with<font color="#CCCCCC"> plaster</font><font color="#E5E5E5"> work so the</font><font color="#CCCCCC"> c2</font><font color="#E5E5E5"> that</font>

536
00:21:21,450 --> 00:21:25,020
we<font color="#E5E5E5"> designed to use a sequel</font><font color="#CCCCCC"> life</font><font color="#E5E5E5"> for</font>

537
00:21:23,070 --> 00:21:26,639
database back in<font color="#CCCCCC"> passing a web interface</font>

538
00:21:25,020 --> 00:21:28,680
<font color="#CCCCCC">that you see here</font><font color="#E5E5E5"> for operators to</font>

539
00:21:26,640 --> 00:21:30,750
actually operate on the implants<font color="#CCCCCC"> and it</font>

540
00:21:28,680 --> 00:21:33,030
includes<font color="#CCCCCC"> web unless</font><font color="#E5E5E5"> they can't see that</font>

541
00:21:30,750 --> 00:21:36,480
the<font color="#E5E5E5"> implant actually communicates back</font>

542
00:21:33,030 --> 00:21:38,220
to in response<font color="#CCCCCC"> to any commands in</font><font color="#E5E5E5"> order</font>

543
00:21:36,480 --> 00:21:40,200
<font color="#E5E5E5">for the implant to even communicate to</font>

544
00:21:38,220 --> 00:21:42,000
the c2<font color="#CCCCCC"> pesky registered prior to</font>

545
00:21:40,200 --> 00:21:43,620
registration<font color="#E5E5E5"> a client can really</font>

546
00:21:42,000 --> 00:21:46,560
communicate to the<font color="#E5E5E5"> CCO just responds</font>

547
00:21:43,620 --> 00:21:48,300
with an empty response and the way an

548
00:21:46,560 --> 00:21:50,610
<font color="#CCCCCC">implants register of the c2 is through</font>

549
00:21:48,300 --> 00:21:52,350
<font color="#CCCCCC">an effector</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> provides the c2 with</font>

550
00:21:50,610 --> 00:21:54,240
information such<font color="#CCCCCC"> as a Geo ID a</font>

551
00:21:52,350 --> 00:21:56,399
registration key<font color="#CCCCCC"> abuse for cryptography</font>

552
00:21:54,240 --> 00:22:00,120
<font color="#E5E5E5">and a copy of</font><font color="#CCCCCC"> the original chart fell</font>

553
00:21:56,400 --> 00:22:02,580
for our future disinfection<font color="#E5E5E5"> after an</font>

554
00:22:00,120 --> 00:22:04,979
implant is registered with<font color="#E5E5E5"> the c2 and</font>

555
00:22:02,580 --> 00:22:07,800
then is able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> authenticate it does</font>

556
00:22:04,980 --> 00:22:09,330
this<font color="#E5E5E5"> by sending a packet authentication</font>

557
00:22:07,800 --> 00:22:11,820
packet<font color="#E5E5E5"> that's encrypted with the</font>

558
00:22:09,330 --> 00:22:14,669
<font color="#CCCCCC">registration key and all of the c2</font>

559
00:22:11,820 --> 00:22:16,580
packet data is basic support coded<font color="#E5E5E5"> prior</font>

560
00:22:14,670 --> 00:22:18,720
<font color="#E5E5E5">to being encrypted</font>

561
00:22:16,580 --> 00:22:20,129
next let's talk<font color="#E5E5E5"> about the design of the</font>

562
00:22:18,720 --> 00:22:21,870
implant<font color="#CCCCCC"> already made it follows a</font>

563
00:22:20,130 --> 00:22:23,730
<font color="#CCCCCC">singleton design pattern which prevents</font>

564
00:22:21,870 --> 00:22:26,070
what more than<font color="#E5E5E5"> one instance of the</font>

565
00:22:23,730 --> 00:22:28,620
<font color="#E5E5E5">implant from running at once all of</font><font color="#CCCCCC"> the</font>

566
00:22:26,070 --> 00:22:31,290
classes that<font color="#CCCCCC"> the implant uses our</font>

567
00:22:28,620 --> 00:22:33,350
<font color="#E5E5E5">threaded which prevents the implant from</font>

568
00:22:31,290 --> 00:22:35,940
affecting<font color="#E5E5E5"> the POS applications</font>

569
00:22:33,350 --> 00:22:37,800
functionality in any way and all<font color="#E5E5E5"> the</font>

570
00:22:35,940 --> 00:22:41,790
commands were chosen<font color="#E5E5E5"> to demonstrate</font>

571
00:22:37,800 --> 00:22:43,230
<font color="#E5E5E5">realistic attackers so this is based on</font>

572
00:22:41,790 --> 00:22:45,210
<font color="#E5E5E5">a lot of</font><font color="#CCCCCC"> stuff that we talked about</font>

573
00:22:43,230 --> 00:22:47,070
earlier regarding the POS malware that

574
00:22:45,210 --> 00:22:49,200
we investigated and the primary thing

575
00:22:47,070 --> 00:22:51,840
<font color="#CCCCCC">that we wanted</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> emulate and improve</font>

576
00:22:49,200 --> 00:22:54,420
upon<font color="#E5E5E5"> was</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> RAM scraping implementation</font>

577
00:22:51,840 --> 00:22:56,800
<font color="#E5E5E5">now it's worth mentioning that our</font><font color="#CCCCCC"> ram</font>

578
00:22:54,420 --> 00:22:58,000
scraper different is different<font color="#CCCCCC"> from</font>

579
00:22:56,800 --> 00:23:00,580
<font color="#E5E5E5">you read scripture</font><font color="#CCCCCC"> that a lot</font><font color="#E5E5E5"> of malware</font>

580
00:22:58,000 --> 00:23:04,150
looked at<font color="#CCCCCC"> uses because ours is much more</font>

581
00:23:00,580 --> 00:23:06,820
targeted<font color="#E5E5E5"> we are implanted inside of the</font>

582
00:23:04,150 --> 00:23:10,150
jump application we share the same Java

583
00:23:06,820 --> 00:23:16,840
heap<font color="#E5E5E5"> so we can form a much targeted</font><font color="#CCCCCC"> Ram</font>

584
00:23:10,150 --> 00:23:18,820
scraper because we because we share that

585
00:23:16,840 --> 00:23:22,000
<font color="#CCCCCC">keep and</font><font color="#E5E5E5"> we know where the</font><font color="#CCCCCC"> track data is</font>

586
00:23:18,820 --> 00:23:23,590
being stored<font color="#E5E5E5"> as Java objects now history</font>

587
00:23:22,000 --> 00:23:25,300
in order<font color="#E5E5E5"> to do everything we wanted to</font>

588
00:23:23,590 --> 00:23:29,080
<font color="#E5E5E5">accomplish</font><font color="#CCCCCC"> we had to learn a</font><font color="#E5E5E5"> lot about</font>

589
00:23:25,300 --> 00:23:30,909
<font color="#E5E5E5">low-level Java in particular we had to</font>

590
00:23:29,080 --> 00:23:32,770
learn<font color="#E5E5E5"> how to use unsafe class in order</font>

591
00:23:30,910 --> 00:23:35,020
to the leak<font color="#E5E5E5"> and address that's one with</font>

592
00:23:32,770 --> 00:23:39,160
JVM<font color="#E5E5E5"> deep now we also have to</font><font color="#CCCCCC"> learn how</font>

593
00:23:35,020 --> 00:23:41,290
<font color="#E5E5E5">Java represents pointers using optical</font>

594
00:23:39,160 --> 00:23:43,390
<font color="#E5E5E5">ordinary</font><font color="#CCCCCC"> pointers or compressed</font><font color="#E5E5E5"> oops</font><font color="#CCCCCC"> and</font>

595
00:23:41,290 --> 00:23:46,510
<font color="#E5E5E5">also we had to learn how to use Java</font>

596
00:23:43,390 --> 00:23:49,960
<font color="#E5E5E5">native access to leverage some see from</font>

597
00:23:46,510 --> 00:23:52,560
our<font color="#E5E5E5"> Ram scripting code so first off we</font>

598
00:23:49,960 --> 00:23:55,750
wanted to we can address one<font color="#E5E5E5"> in JVM deep</font>

599
00:23:52,560 --> 00:23:58,899
<font color="#CCCCCC">we could use unsafe for this but it's</font>

600
00:23:55,750 --> 00:24:02,050
usually used as her job<font color="#CCCCCC"> and internal use</font>

601
00:23:58,900 --> 00:24:03,550
only<font color="#CCCCCC"> we are able</font><font color="#E5E5E5"> to use this by jumping</font>

602
00:24:02,050 --> 00:24:06,450
<font color="#CCCCCC">through some hoops by using</font><font color="#E5E5E5"> reflection</font>

603
00:24:03,550 --> 00:24:08,860
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we are given access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the methods</font>

604
00:24:06,450 --> 00:24:10,240
<font color="#CCCCCC">lost what was important for us is</font>

605
00:24:08,860 --> 00:24:12,250
<font color="#E5E5E5">because we wanted to be</font><font color="#CCCCCC"> craft</font>

606
00:24:10,240 --> 00:24:13,960
<font color="#CCCCCC">cross-platform we wanted to be able</font><font color="#E5E5E5"> to</font>

607
00:24:12,250 --> 00:24:16,720
run them all on 32-bit<font color="#E5E5E5"> systems and</font>

608
00:24:13,960 --> 00:24:19,240
64-bit systems and we<font color="#E5E5E5"> can address we had</font>

609
00:24:16,720 --> 00:24:22,060
to understand when and where they would

610
00:24:19,240 --> 00:24:23,650
give us back a native pointer<font color="#E5E5E5"> or what</font>

611
00:24:22,060 --> 00:24:26,500
when it would compress that pointer

612
00:24:23,650 --> 00:24:29,320
where we<font color="#CCCCCC"> actually had to</font><font color="#E5E5E5"> factor it back</font>

613
00:24:26,500 --> 00:24:33,190
and do some manipulation<font color="#E5E5E5"> wanted to</font>

614
00:24:29,320 --> 00:24:35,860
actually<font color="#E5E5E5"> get incorrect address and also</font>

615
00:24:33,190 --> 00:24:39,040
<font color="#E5E5E5">we wanted to use the Java native access</font>

616
00:24:35,860 --> 00:24:43,060
to leverage<font color="#CCCCCC"> G code we decided on C code</font>

617
00:24:39,040 --> 00:24:45,909
because the win32<font color="#CCCCCC"> api has a very</font>

618
00:24:43,060 --> 00:24:49,179
powerful<font color="#E5E5E5"> process memory functionality</font>

619
00:24:45,910 --> 00:24:51,640
included in it<font color="#E5E5E5"> but in order to do this</font>

620
00:24:49,180 --> 00:24:54,700
we had<font color="#CCCCCC"> to take</font><font color="#E5E5E5"> a few steps</font><font color="#CCCCCC"> to actually</font>

621
00:24:51,640 --> 00:24:57,220
<font color="#E5E5E5">set up the</font><font color="#CCCCCC"> process to</font><font color="#E5E5E5"> be able to get the</font>

622
00:24:54,700 --> 00:24:59,770
JVM heap<font color="#E5E5E5"> to send it</font><font color="#CCCCCC"> to our</font><font color="#E5E5E5"> native side</font>

623
00:24:57,220 --> 00:25:01,090
<font color="#E5E5E5">first we had</font><font color="#CCCCCC"> to get the process</font>

624
00:24:59,770 --> 00:25:03,879
<font color="#CCCCCC">Dion the Java</font><font color="#E5E5E5"> process that</font><font color="#CCCCCC"> we're</font>

625
00:25:01,090 --> 00:25:06,070
actually<font color="#E5E5E5"> living in latina handles to</font>

626
00:25:03,880 --> 00:25:07,720
that process<font color="#CCCCCC"> we</font><font color="#E5E5E5"> read the information</font>

627
00:25:06,070 --> 00:25:11,409
<font color="#E5E5E5">about the memory region that we're</font>

628
00:25:07,720 --> 00:25:14,410
interested in and then finally copied

629
00:25:11,410 --> 00:25:17,230
that memory region which<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> JMP to a</font>

630
00:25:14,410 --> 00:25:19,840
<font color="#E5E5E5">buffer and then we basically take that</font>

631
00:25:17,230 --> 00:25:22,480
<font color="#CCCCCC">book we have passed</font><font color="#E5E5E5"> the to</font><font color="#CCCCCC"> Virginia</font><font color="#E5E5E5"> Jane</font>

632
00:25:19,840 --> 00:25:26,110
a<font color="#CCCCCC"> site to our</font><font color="#E5E5E5"> C code and then you know</font>

633
00:25:22,480 --> 00:25:29,350
scan firm<font color="#CCCCCC"> tractive and now basically our</font>

634
00:25:26,110 --> 00:25:31,860
<font color="#CCCCCC">tracks are fully written</font><font color="#E5E5E5"> in C basically</font>

635
00:25:29,350 --> 00:25:35,020
<font color="#E5E5E5">was modeled after what Dexter did</font>

636
00:25:31,860 --> 00:25:37,479
likewise tractors nothing except<font color="#E5E5E5"> like we</font>

637
00:25:35,020 --> 00:25:40,120
said our method was more targeted than

638
00:25:37,480 --> 00:25:42,040
their approach<font color="#E5E5E5"> so next we're going to</font>

639
00:25:40,120 --> 00:25:44,709
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the vector</font><font color="#CCCCCC"> component of</font>

640
00:25:42,040 --> 00:25:46,600
memory<font color="#E5E5E5"> reference so initially when were</font>

641
00:25:44,710 --> 00:25:48,700
playing<font color="#E5E5E5"> around with modifying jar files</font>

642
00:25:46,600 --> 00:25:50,709
we're using a jar archive tool which is

643
00:25:48,700 --> 00:25:53,080
included with the<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> development kit</font>

644
00:25:50,710 --> 00:25:54,280
<font color="#E5E5E5">however it was limited it didn't have</font>

645
00:25:53,080 --> 00:25:55,780
the<font color="#E5E5E5"> functionality that we</font><font color="#CCCCCC"> actually</font>

646
00:25:54,280 --> 00:25:58,780
<font color="#E5E5E5">needed it so we actually</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> our</font>

647
00:25:55,780 --> 00:26:01,240
<font color="#E5E5E5">inspector to perform any jar jacking now</font>

648
00:25:58,780 --> 00:26:03,820
in order<font color="#E5E5E5"> for the vector to</font><font color="#CCCCCC"> be built we</font>

649
00:26:01,240 --> 00:26:05,890
used Ruby<font color="#E5E5E5"> and built it with</font><font color="#CCCCCC"> Metasploit</font>

650
00:26:03,820 --> 00:26:08,620
as a post exploitation illogical<font color="#E5E5E5"> the way</font>

651
00:26:05,890 --> 00:26:11,110
it works is it actually picks a class

652
00:26:08,620 --> 00:26:13,149
within the jar file<font color="#E5E5E5"> and replaces it</font><font color="#CCCCCC"> with</font>

653
00:26:11,110 --> 00:26:15,550
a modified version that triggers are

654
00:26:13,150 --> 00:26:18,610
<font color="#E5E5E5">implied code as well as performance</font>

655
00:26:15,550 --> 00:26:22,600
original operation<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to choose an</font>

656
00:26:18,610 --> 00:26:24,760
ideal target<font color="#E5E5E5"> class to inject they have</font>

657
00:26:22,600 --> 00:26:26,139
to meet two requirements<font color="#E5E5E5"> the first one</font>

658
00:26:24,760 --> 00:26:28,600
is it has<font color="#E5E5E5"> to be much relatively soon</font>

659
00:26:26,140 --> 00:26:31,060
that<font color="#E5E5E5"> are so that our implant</font><font color="#CCCCCC"> is Luxan</font>

660
00:26:28,600 --> 00:26:33,459
and secondly needs to be able<font color="#E5E5E5"> to be</font>

661
00:26:31,060 --> 00:26:34,450
re-implemented<font color="#CCCCCC"> with</font><font color="#E5E5E5"> accuracy because we</font>

662
00:26:33,460 --> 00:26:37,660
didn't<font color="#E5E5E5"> want to change</font><font color="#CCCCCC"> the functionality</font>

663
00:26:34,450 --> 00:26:41,230
<font color="#CCCCCC">of the actual application</font><font color="#E5E5E5"> so and the</font>

664
00:26:37,660 --> 00:26:44,140
<font color="#CCCCCC">infector is initialized the operator is</font>

665
00:26:41,230 --> 00:26:46,680
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> four different</font><font color="#CCCCCC"> options see</font>

666
00:26:44,140 --> 00:26:49,210
<font color="#CCCCCC">two else's you support callback which</font>

667
00:26:46,680 --> 00:26:52,420
determines<font color="#E5E5E5"> how often the implant</font>

668
00:26:49,210 --> 00:26:55,720
actually calls back to<font color="#E5E5E5"> the c2</font><font color="#CCCCCC"> and jar</font>

669
00:26:52,420 --> 00:26:57,460
<font color="#CCCCCC">pad which</font><font color="#E5E5E5"> is used to change the target</font>

670
00:26:55,720 --> 00:26:59,389
jar path in case the application is an

671
00:26:57,460 --> 00:27:03,590
<font color="#E5E5E5">installment of default</font>

672
00:26:59,389 --> 00:27:05,299
so whenever the effector begins<font color="#CCCCCC"> it first</font>

673
00:27:03,590 --> 00:27:08,090
generates a key to be<font color="#E5E5E5"> used for</font>

674
00:27:05,299 --> 00:27:11,990
<font color="#CCCCCC">communication initial communication to</font>

675
00:27:08,090 --> 00:27:14,449
the sea to the<font color="#E5E5E5"> vector also</font><font color="#CCCCCC"> passes the</font>

676
00:27:11,990 --> 00:27:16,340
implant class<font color="#E5E5E5"> so whenever I compiled the</font>

677
00:27:14,450 --> 00:27:19,549
actual implant class<font color="#CCCCCC"> I included these</font>

678
00:27:16,340 --> 00:27:21,439
<font color="#E5E5E5">hard-coded values</font><font color="#CCCCCC"> as integers in</font><font color="#E5E5E5"> the</font>

679
00:27:19,549 --> 00:27:23,629
binary<font color="#E5E5E5"> I replaced it with the values</font>

680
00:27:21,440 --> 00:27:25,399
<font color="#CCCCCC">that</font><font color="#E5E5E5"> operator provides through</font>

681
00:27:23,630 --> 00:27:27,500
<font color="#CCCCCC">Metasploit for seats of those seat</font>

682
00:27:25,399 --> 00:27:31,699
support<font color="#CCCCCC"> callback</font><font color="#E5E5E5"> so that I have a sort</font>

683
00:27:27,500 --> 00:27:34,220
<font color="#E5E5E5">of modular implant component after</font><font color="#CCCCCC"> this</font>

684
00:27:31,700 --> 00:27:36,379
happens<font color="#E5E5E5"> the effect actually registers</font>

685
00:27:34,220 --> 00:27:39,620
the implant<font color="#E5E5E5"> on behalf of the target host</font>

686
00:27:36,379 --> 00:27:41,779
to the<font color="#E5E5E5"> c2 and it does this by sending</font>

687
00:27:39,620 --> 00:27:44,870
<font color="#CCCCCC">GUI D of the key in the original jar</font>

688
00:27:41,779 --> 00:27:47,960
file to the c2<font color="#E5E5E5"> through a post</font><font color="#CCCCCC"> request to</font>

689
00:27:44,870 --> 00:27:49,758
<font color="#E5E5E5">the registration endpoint next all of</font>

690
00:27:47,960 --> 00:27:52,129
the resources are bundled into a copy of

691
00:27:49,759 --> 00:27:54,470
the original<font color="#E5E5E5"> charm</font><font color="#CCCCCC"> all the DLL resources</font>

692
00:27:52,129 --> 00:27:56,480
needed for<font color="#CCCCCC"> J&A as well as the class</font>

693
00:27:54,470 --> 00:27:59,000
files needed<font color="#CCCCCC"> for the implant are added</font>

694
00:27:56,480 --> 00:28:00,679
to this<font color="#E5E5E5"> jar copy and all of the class</font>

695
00:27:59,000 --> 00:28:02,600
files are actually<font color="#CCCCCC"> modified to include</font>

696
00:28:00,679 --> 00:28:04,639
the version number of<font color="#E5E5E5"> the target</font><font color="#CCCCCC"> system</font>

697
00:28:02,600 --> 00:28:07,149
<font color="#E5E5E5">so that's compatible with the version of</font>

698
00:28:04,639 --> 00:28:10,519
Java that's running on that system

699
00:28:07,149 --> 00:28:12,649
lastly the<font color="#CCCCCC"> effected copy of the jar file</font>

700
00:28:10,519 --> 00:28:15,169
is copied over the<font color="#CCCCCC"> target application</font>

701
00:28:12,649 --> 00:28:18,379
<font color="#CCCCCC">jar file now completing the</font><font color="#E5E5E5"> process of</font>

702
00:28:15,169 --> 00:28:19,700
infector and any<font color="#CCCCCC"> subsequent</font><font color="#E5E5E5"> launches of</font>

703
00:28:18,379 --> 00:28:23,539
<font color="#E5E5E5">the application will launch</font><font color="#CCCCCC"> a template</font>

704
00:28:19,700 --> 00:28:25,850
code<font color="#CCCCCC"> this is the</font><font color="#E5E5E5"> completion</font><font color="#CCCCCC"> of the</font>

705
00:28:23,539 --> 00:28:29,240
<font color="#E5E5E5">runaway</font><font color="#CCCCCC"> Reptar interaction</font><font color="#E5E5E5"> process and</font>

706
00:28:25,850 --> 00:28:31,158
I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> demonstrate that here so</font>

707
00:28:29,240 --> 00:28:33,500
first I want to show you<font color="#E5E5E5"> guys the</font>

708
00:28:31,159 --> 00:28:36,230
original state<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> action</font><font color="#E5E5E5"> post jar</font>

709
00:28:33,500 --> 00:28:38,960
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> see it's 331 megabytes</font>

710
00:28:36,230 --> 00:28:41,840
<font color="#E5E5E5">approximately and the shops in 56 starts</font>

711
00:28:38,960 --> 00:28:44,290
with zero seven one one<font color="#CCCCCC"> we're will go</font>

712
00:28:41,840 --> 00:28:46,570
<font color="#E5E5E5">over</font><font color="#CCCCCC"> to attacker machine and show the</font>

713
00:28:44,290 --> 00:28:48,760
affection process so I'm going to just

714
00:28:46,570 --> 00:28:56,830
<font color="#E5E5E5">set some options inside of the Metis</font>

715
00:28:48,760 --> 00:28:58,660
point and launch the infector after

716
00:28:56,830 --> 00:29:01,210
that's complete<font color="#CCCCCC"> run</font><font color="#E5E5E5"> away Reptar is</font>

717
00:28:58,660 --> 00:29:03,610
started you can<font color="#E5E5E5"> see that the</font><font color="#CCCCCC"> active POS</font>

718
00:29:01,210 --> 00:29:04,960
jar file has changed<font color="#CCCCCC"> as it</font><font color="#E5E5E5"> claimed a</font>

719
00:29:03,610 --> 00:29:10,899
different hash and that's approximately

720
00:29:04,960 --> 00:29:13,390
<font color="#E5E5E5">380 megabytes</font><font color="#CCCCCC"> so this is the runaway</font>

721
00:29:10,900 --> 00:29:15,460
<font color="#CCCCCC">Reptar c2 interface</font><font color="#E5E5E5"> this is where the</font>

722
00:29:13,390 --> 00:29:18,210
operator will perform all their c2 tasks

723
00:29:15,460 --> 00:29:20,800
and<font color="#E5E5E5"> this is me</font><font color="#CCCCCC"> actually the</font><font color="#E5E5E5"> implant list</font>

724
00:29:18,210 --> 00:29:22,180
<font color="#E5E5E5">right now</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> just have this target you</font>

725
00:29:20,800 --> 00:29:24,520
can see there's a<font color="#E5E5E5"> JavaScript</font>

726
00:29:22,180 --> 00:29:27,040
<font color="#CCCCCC">command-line interface for anyone to</font>

727
00:29:24,520 --> 00:29:30,100
type in<font color="#E5E5E5"> commands</font><font color="#CCCCCC"> of stipend</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> MI to</font>

728
00:29:27,040 --> 00:29:33,720
demonstrate that as well as I keep<font color="#E5E5E5"> them</font>

729
00:29:30,100 --> 00:29:33,719
fake to show the<font color="#E5E5E5"> network settings</font><font color="#CCCCCC"> and</font>

730
00:29:34,410 --> 00:29:39,490
next one I demonstrate the push

731
00:29:37,360 --> 00:29:41,320
capability which is<font color="#E5E5E5"> to upload a file to</font>

732
00:29:39,490 --> 00:29:44,050
<font color="#CCCCCC">the target we're going to upload</font><font color="#E5E5E5"> the</font>

733
00:29:41,320 --> 00:29:48,639
hosts file as an example to the<font color="#CCCCCC"> target</font>

734
00:29:44,050 --> 00:29:52,060
desktop mind and Eve<font color="#CCCCCC"> don't mind any</font>

735
00:29:48,640 --> 00:29:53,440
typos in this<font color="#CCCCCC"> demonstration so as you</font>

736
00:29:52,060 --> 00:29:55,810
can<font color="#E5E5E5"> see on the desktop there's the</font><font color="#CCCCCC"> hosts</font>

737
00:29:53,440 --> 00:29:58,270
<font color="#CCCCCC">file and we open it up</font><font color="#E5E5E5"> it'll have the</font>

738
00:29:55,810 --> 00:30:03,820
contents of the<font color="#CCCCCC"> hosts file that our c2</font>

739
00:29:58,270 --> 00:30:06,550
<font color="#E5E5E5">has following this I want to show</font>

740
00:30:03,820 --> 00:30:07,810
pulling a foul from<font color="#E5E5E5"> the target we're</font>

741
00:30:06,550 --> 00:30:10,149
just going<font color="#E5E5E5"> to pull window</font><font color="#CCCCCC"> I and I just</font>

742
00:30:07,810 --> 00:30:12,610
<font color="#CCCCCC">come and</font><font color="#E5E5E5"> foul on</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> systems</font><font color="#CCCCCC"> and I'm</font>

743
00:30:10,150 --> 00:30:14,710
this<font color="#E5E5E5"> a loop button which actively takes</font>

744
00:30:12,610 --> 00:30:16,929
us to boot page now the way the loop

745
00:30:14,710 --> 00:30:19,360
page works is it identifies<font color="#CCCCCC"> the target</font>

746
00:30:16,930 --> 00:30:20,710
based on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> machine geo idea so the IMP</font>

747
00:30:19,360 --> 00:30:21,820
<font color="#CCCCCC">let's restarted and</font><font color="#E5E5E5"> has a different</font>

748
00:30:20,710 --> 00:30:24,730
registration<font color="#E5E5E5"> code that doesn't matter</font>

749
00:30:21,820 --> 00:30:26,110
because the loot is based on GID and all

750
00:30:24,730 --> 00:30:29,320
the files<font color="#E5E5E5"> pulled from that system will</font>

751
00:30:26,110 --> 00:30:30,669
be<font color="#E5E5E5"> in this folder click on this and</font>

752
00:30:29,320 --> 00:30:33,550
<font color="#E5E5E5">download I'm just going to</font><font color="#CCCCCC"> open it with</font>

753
00:30:30,670 --> 00:30:36,460
vim and show that these<font color="#E5E5E5"> are the contents</font>

754
00:30:33,550 --> 00:30:39,120
<font color="#CCCCCC">of the targets when</font><font color="#E5E5E5"> I not found next</font>

755
00:30:36,460 --> 00:30:42,460
we're going<font color="#CCCCCC"> to show the more interesting</font>

756
00:30:39,120 --> 00:30:44,080
component which is<font color="#E5E5E5"> CC</font><font color="#CCCCCC"> dot</font><font color="#E5E5E5"> so there's</font>

757
00:30:42,460 --> 00:30:45,730
just<font color="#E5E5E5"> dump</font><font color="#CCCCCC"> dollar page which is</font><font color="#E5E5E5"> empty</font>

758
00:30:44,080 --> 00:30:48,220
originally because<font color="#E5E5E5"> there's</font>

759
00:30:45,730 --> 00:30:50,470
however as things are<font color="#CCCCCC"> added they'll be</font>

760
00:30:48,220 --> 00:30:54,279
added to this page<font color="#CCCCCC"> so what we're doing</font>

761
00:30:50,470 --> 00:30:57,820
is<font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to go over</font><font color="#CCCCCC"> to the go over</font>

762
00:30:54,279 --> 00:31:02,559
to the target<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> run a</font><font color="#CCCCCC"> qtls</font><font color="#E5E5E5"> and log</font>

763
00:30:57,820 --> 00:31:04,178
in and we're<font color="#E5E5E5"> gonna buy meatball sub just</font>

764
00:31:02,559 --> 00:31:06,549
<font color="#CCCCCC">about</font><font color="#E5E5E5"> five bucks which is</font><font color="#CCCCCC"> a fair price</font>

765
00:31:04,179 --> 00:31:08,289
item we're<font color="#E5E5E5"> going to enter</font><font color="#CCCCCC"> a credit</font><font color="#E5E5E5"> card</font>

766
00:31:06,549 --> 00:31:11,408
<font color="#E5E5E5">number which is the visa one of these</font>

767
00:31:08,289 --> 00:31:14,139
<font color="#E5E5E5">says test numbers and random expiration</font>

768
00:31:11,409 --> 00:31:15,399
date and<font color="#CCCCCC"> click process card now we're</font>

769
00:31:14,139 --> 00:31:17,049
<font color="#E5E5E5">giving us an error code doesn't actually</font>

770
00:31:15,399 --> 00:31:19,299
set up<font color="#E5E5E5"> so the back ends actually work</font>

771
00:31:17,049 --> 00:31:21,690
<font color="#E5E5E5">however</font><font color="#CCCCCC"> the application at this point</font>

772
00:31:19,299 --> 00:31:25,000
has loaded the<font color="#E5E5E5"> card information into the</font>

773
00:31:21,690 --> 00:31:26,889
process<font color="#E5E5E5"> so it's in the Java heap so RCC</font>

774
00:31:25,000 --> 00:31:30,029
don't<font color="#CCCCCC"> will still work your click CC go</font>

775
00:31:26,889 --> 00:31:32,918
<font color="#E5E5E5">and then we go</font><font color="#CCCCCC"> over to dump file and</font>

776
00:31:30,029 --> 00:31:35,559
<font color="#E5E5E5">after refresh we can see the test card</font>

777
00:31:32,919 --> 00:31:38,889
number that<font color="#E5E5E5"> was loaded into the Java</font>

778
00:31:35,559 --> 00:31:41,678
process next we're going to<font color="#E5E5E5"> show</font><font color="#CCCCCC"> you the</font>

779
00:31:38,889 --> 00:31:44,019
in the persistence component of a

780
00:31:41,679 --> 00:31:46,389
<font color="#CCCCCC">runaway Reptar so the way it</font><font color="#E5E5E5"> works is</font>

781
00:31:44,019 --> 00:31:48,820
<font color="#E5E5E5">actually uploads a file to tactical file</font>

782
00:31:46,389 --> 00:31:52,449
location and<font color="#CCCCCC"> then creates a registry key</font>

783
00:31:48,820 --> 00:31:54,759
that actually copies the persistence

784
00:31:52,450 --> 00:31:56,500
<font color="#CCCCCC">foul over the application binary you can</font>

785
00:31:54,759 --> 00:31:59,799
see here it stands<font color="#CCCCCC"> at 18</font><font color="#E5E5E5"> megabytes</font>

786
00:31:56,500 --> 00:32:01,299
<font color="#CCCCCC">just us was the infected version of the</font>

787
00:31:59,799 --> 00:32:03,610
jar file and<font color="#E5E5E5"> if we open</font><font color="#CCCCCC"> the registry</font>

788
00:32:01,299 --> 00:32:05,529
<font color="#CCCCCC">editor</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see this are our key in</font>

789
00:32:03,610 --> 00:32:08,189
the registry which has the command to

790
00:32:05,529 --> 00:32:11,289
copy the file over

791
00:32:08,190 --> 00:32:14,500
now after persistence is enabled you'll

792
00:32:11,289 --> 00:32:15,399
see<font color="#E5E5E5"> this persistence true turns green at</font>

793
00:32:14,500 --> 00:32:17,259
this partner is going to demonstrate

794
00:32:15,399 --> 00:32:19,689
cleaning up so first we're going to

795
00:32:17,259 --> 00:32:22,059
disable persistence<font color="#E5E5E5"> and then as we know</font>

796
00:32:19,690 --> 00:32:23,740
<font color="#E5E5E5">we</font><font color="#CCCCCC"> copy the file over to</font><font color="#E5E5E5"> the desktop</font>

797
00:32:22,059 --> 00:32:26,678
<font color="#CCCCCC">what</font><font color="#E5E5E5"> our move that file so we're</font><font color="#CCCCCC"> just</font>

798
00:32:23,740 --> 00:32:29,139
<font color="#E5E5E5">going to run dirt on the desktop path</font>

799
00:32:26,679 --> 00:32:34,509
and then delete that hosts file that we

800
00:32:29,139 --> 00:32:36,219
uploaded earlier next<font color="#CCCCCC"> we're going to</font>

801
00:32:34,509 --> 00:32:39,850
actually<font color="#CCCCCC"> verify that that has been</font>

802
00:32:36,220 --> 00:32:41,620
deleted<font color="#CCCCCC"> as you can see here it's not</font>

803
00:32:39,850 --> 00:32:43,240
there anymore<font color="#E5E5E5"> so</font><font color="#CCCCCC"> then we're going to</font>

804
00:32:41,620 --> 00:32:45,428
clear the command<font color="#CCCCCC"> tears so</font><font color="#E5E5E5"> that no more</font>

805
00:32:43,240 --> 00:32:47,559
commands are loaded<font color="#E5E5E5"> and we're going</font><font color="#CCCCCC"> to</font>

806
00:32:45,429 --> 00:32:48,359
<font color="#E5E5E5">click disinfect whenever a disinfection</font>

807
00:32:47,559 --> 00:32:50,399
is

808
00:32:48,359 --> 00:32:58,168
complete<font color="#E5E5E5"> it'll actually remove itself</font>

809
00:32:50,399 --> 00:32:59,279
from this implant list and here we're

810
00:32:58,169 --> 00:33:01,769
<font color="#E5E5E5">going to go back over the target machine</font>

811
00:32:59,279 --> 00:33:04,109
<font color="#E5E5E5">and show you that the original jar file</font>

812
00:33:01,769 --> 00:33:07,469
has been<font color="#E5E5E5"> recovered from the seat to</font>

813
00:33:04,109 --> 00:33:09,958
<font color="#E5E5E5">database and you can see here it's back</font>

814
00:33:07,469 --> 00:33:13,229
to 331 megabytes with zero seven one

815
00:33:09,959 --> 00:33:25,139
<font color="#CCCCCC">one-shot</font><font color="#E5E5E5"> 256 hush and yeah that</font>

816
00:33:13,229 --> 00:33:26,159
concludes our demonstration of<font color="#CCCCCC"> the so</font>

817
00:33:25,139 --> 00:33:27,779
now we're going to<font color="#E5E5E5"> talk a little bit</font>

818
00:33:26,159 --> 00:33:29,909
<font color="#CCCCCC">about</font><font color="#E5E5E5"> future</font><font color="#CCCCCC"> research</font>

819
00:33:27,779 --> 00:33:32,279
so we're honoring<font color="#CCCCCC"> Reptar it's cool</font><font color="#E5E5E5"> at</font>

820
00:33:29,909 --> 00:33:33,899
least<font color="#CCCCCC"> I think it's cool</font><font color="#E5E5E5"> but we want to</font>

821
00:33:32,279 --> 00:33:36,119
<font color="#E5E5E5">actually implement a universal jar</font>

822
00:33:33,899 --> 00:33:38,008
<font color="#CCCCCC">jacker</font><font color="#E5E5E5"> we add</font><font color="#CCCCCC"> into the knowledge</font><font color="#E5E5E5"> of a</font>

823
00:33:36,119 --> 00:33:40,949
<font color="#CCCCCC">kewpie lesson is jar file a</font><font color="#E5E5E5"> new what</font>

824
00:33:38,009 --> 00:33:43,559
class the target<font color="#E5E5E5"> but if we took a look</font>

825
00:33:40,950 --> 00:33:45,899
<font color="#CCCCCC">at the manifest file identifies</font><font color="#E5E5E5"> the main</font>

826
00:33:43,559 --> 00:33:47,549
class for the jar file and modified it

827
00:33:45,899 --> 00:33:49,559
to my code<font color="#CCCCCC"> with a runner and run away</font>

828
00:33:47,549 --> 00:33:52,049
<font color="#CCCCCC">wraps our stuff</font><font color="#E5E5E5"> then we</font><font color="#CCCCCC"> can potentially</font>

829
00:33:49,559 --> 00:33:54,749
<font color="#CCCCCC">implement a universal jar jacket also</font><font color="#E5E5E5"> we</font>

830
00:33:52,049 --> 00:33:58,019
<font color="#E5E5E5">like to upgrade</font><font color="#CCCCCC"> our XOR</font><font color="#E5E5E5"> cryptography</font>

831
00:33:54,749 --> 00:34:00,269
scheme to SSL because<font color="#E5E5E5"> that's a more</font>

832
00:33:58,019 --> 00:34:03,239
robust and<font color="#E5E5E5"> secure and</font><font color="#CCCCCC"> lastly if we</font>

833
00:34:00,269 --> 00:34:05,159
implemented a pure Java version of

834
00:34:03,239 --> 00:34:08,460
runaway Reptar would be cross-platform

835
00:34:05,159 --> 00:34:11,190
<font color="#CCCCCC">it would rely on the JMA stuff or</font><font color="#E5E5E5"> deal</font>

836
00:34:08,460 --> 00:34:12,690
<font color="#E5E5E5">else it would also be</font><font color="#CCCCCC"> interesting this</font>

837
00:34:11,190 --> 00:34:16,168
actually look at the payment terminal

838
00:34:12,690 --> 00:34:19,918
hardware itself can we reverse engineer

839
00:34:16,168 --> 00:34:21,839
the protocols that<font color="#CCCCCC"> are used</font><font color="#E5E5E5"> between the</font>

840
00:34:19,918 --> 00:34:23,940
<font color="#E5E5E5">point of interaction device and the</font>

841
00:34:21,839 --> 00:34:26,308
terminal<font color="#E5E5E5"> and can we actually</font><font color="#CCCCCC"> leverage</font>

842
00:34:23,940 --> 00:34:29,879
<font color="#E5E5E5">just maybe</font><font color="#CCCCCC"> men in the</font><font color="#E5E5E5"> middle attack or</font>

843
00:34:26,309 --> 00:34:32,159
<font color="#CCCCCC">what not also is</font><font color="#E5E5E5"> memory card memory</font>

844
00:34:29,879 --> 00:34:34,828
<font color="#E5E5E5">corruption bugs thing on these devices</font>

845
00:34:32,159 --> 00:34:37,289
<font color="#CCCCCC">but that would be</font><font color="#E5E5E5"> interesting to you</font>

846
00:34:34,829 --> 00:34:40,379
know attack<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Hat attack the stack</font>

847
00:34:37,289 --> 00:34:42,990
<font color="#E5E5E5">attack the heap and</font><font color="#CCCCCC"> gain a game some bar</font>

848
00:34:40,379 --> 00:34:45,328
code execution that way or are<font color="#E5E5E5"> we able</font>

849
00:34:42,989 --> 00:34:49,918
<font color="#E5E5E5">to run unsigned code on these</font><font color="#CCCCCC"> devices</font>

850
00:34:45,329 --> 00:34:53,750
<font color="#E5E5E5">and if we're not</font><font color="#CCCCCC"> can we can</font><font color="#E5E5E5"> we fool the</font>

851
00:34:49,918 --> 00:34:57,029
device<font color="#E5E5E5"> to fake a signage</font>

852
00:34:53,750 --> 00:34:59,609
so we talked a lot amount of POS malware

853
00:34:57,029 --> 00:35:02,369
and<font color="#CCCCCC"> packet loss applications</font><font color="#E5E5E5"> and this</font>

854
00:34:59,609 --> 00:35:04,589
gave<font color="#CCCCCC"> us some</font><font color="#E5E5E5"> this attacker perspective</font>

855
00:35:02,369 --> 00:35:05,789
gave us<font color="#CCCCCC"> insight to possible indications</font>

856
00:35:04,589 --> 00:35:06,270
that<font color="#E5E5E5"> could be implemented to fix these</font>

857
00:35:05,789 --> 00:35:07,980
things

858
00:35:06,270 --> 00:35:09,990
first thing is code signing a file

859
00:35:07,980 --> 00:35:11,910
<font color="#CCCCCC">signature verification law that was</font>

860
00:35:09,990 --> 00:35:14,279
implemented<font color="#CCCCCC"> when</font><font color="#E5E5E5"> we wrapped our wouldn't</font>

861
00:35:11,910 --> 00:35:16,170
work<font color="#E5E5E5"> so we shouldn't have the ability</font><font color="#CCCCCC"> an</font>

862
00:35:14,279 --> 00:35:19,890
attacker should have the ability<font color="#CCCCCC"> to run</font>

863
00:35:16,170 --> 00:35:22,170
untrusted code<font color="#E5E5E5"> as the application and</font>

864
00:35:19,890 --> 00:35:23,819
you know make sure<font color="#CCCCCC"> your applications who</font>

865
00:35:22,170 --> 00:35:26,730
are running<font color="#E5E5E5"> with the least privilege</font>

866
00:35:23,819 --> 00:35:29,490
necessary<font color="#CCCCCC"> you know a</font><font color="#E5E5E5"> few of those demos</font>

867
00:35:26,730 --> 00:35:31,589
we were actually leveraging their

868
00:35:29,490 --> 00:35:33,240
privilege<font color="#E5E5E5"> getting code execution and</font>

869
00:35:31,589 --> 00:35:35,990
getting higher privileges<font color="#E5E5E5"> because of</font>

870
00:35:33,240 --> 00:35:37,950
that<font color="#E5E5E5"> next</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to make sure that</font>

871
00:35:35,990 --> 00:35:39,868
excessive<font color="#CCCCCC"> confirmations aren't enabled</font>

872
00:35:37,950 --> 00:35:42,089
<font color="#E5E5E5">the fact that any low</font><font color="#CCCCCC"> privileged</font>

873
00:35:39,869 --> 00:35:45,210
authenticated user can modify<font color="#E5E5E5"> a core</font>

874
00:35:42,089 --> 00:35:46,609
application of a terminal is foolish<font color="#CCCCCC"> to</font>

875
00:35:45,210 --> 00:35:49,529
say<font color="#E5E5E5"> the least</font>

876
00:35:46,609 --> 00:35:51,808
and please don't include part<font color="#E5E5E5"> code of</font>

877
00:35:49,529 --> 00:35:55,260
credentials<font color="#E5E5E5"> if you're</font><font color="#CCCCCC"> deaf even if you</font>

878
00:35:51,809 --> 00:35:56,640
try to obfuscate<font color="#CCCCCC"> or do whatever it's you</font>

879
00:35:55,260 --> 00:35:59,069
know a researcher is gonna find that

880
00:35:56,640 --> 00:36:01,920
it's pretty<font color="#E5E5E5"> trivial and you know unless</font>

881
00:35:59,069 --> 00:36:04,440
<font color="#E5E5E5">you're a PhD in mathematics don't roll</font>

882
00:36:01,920 --> 00:36:06,270
your<font color="#E5E5E5"> own crypto</font><font color="#CCCCCC"> there are plenty of</font>

883
00:36:04,440 --> 00:36:09,299
<font color="#CCCCCC">third party libraries that are</font><font color="#E5E5E5"> better to</font>

884
00:36:06,270 --> 00:36:11,369
be pretty secure<font color="#E5E5E5"> so some takeaways from</font>

885
00:36:09,299 --> 00:36:13,770
<font color="#E5E5E5">this talk and some takeaways from the</font>

886
00:36:11,369 --> 00:36:16,109
research that<font color="#E5E5E5"> we did leading</font><font color="#CCCCCC"> up to this</font>

887
00:36:13,770 --> 00:36:17,730
talk is exploits aren't always necessary

888
00:36:16,109 --> 00:36:19,740
for a<font color="#E5E5E5"> runaway reference</font><font color="#CCCCCC"> are we took</font>

889
00:36:17,730 --> 00:36:22,380
advantage<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> miss configuration that</font>

890
00:36:19,740 --> 00:36:25,078
could have<font color="#E5E5E5"> been avoided and it was</font>

891
00:36:22,380 --> 00:36:26,970
purely a post exploitation<font color="#E5E5E5"> exercise so</font>

892
00:36:25,079 --> 00:36:30,059
exploits are<font color="#E5E5E5"> are always necessary</font><font color="#CCCCCC"> to</font>

893
00:36:26,970 --> 00:36:32,970
cause<font color="#CCCCCC"> damage and</font><font color="#E5E5E5"> reverse engineering</font>

894
00:36:30,059 --> 00:36:35,730
Java is pretty nice because<font color="#E5E5E5"> you get the</font>

895
00:36:32,970 --> 00:36:37,470
source code representation<font color="#E5E5E5"> rather than</font>

896
00:36:35,730 --> 00:36:41,640
dealing with native binaries and staring

897
00:36:37,470 --> 00:36:43,348
at assembly<font color="#E5E5E5"> code on there also</font><font color="#CCCCCC"> we found</font>

898
00:36:41,640 --> 00:36:46,529
<font color="#E5E5E5">out that credentials and clear text it's</font>

899
00:36:43,349 --> 00:36:48,680
actually a pretty common issue for

900
00:36:46,529 --> 00:36:50,970
<font color="#CCCCCC">instance with possum we</font><font color="#E5E5E5"> had the</font>

901
00:36:48,680 --> 00:36:53,830
<font color="#E5E5E5">credentials</font><font color="#CCCCCC"> that were in a job of</font><font color="#E5E5E5"> binary</font>

902
00:36:50,970 --> 00:36:55,240
<font color="#CCCCCC">bug Java is decompile boy and</font><font color="#E5E5E5"> would</font>

903
00:36:53,830 --> 00:36:57,069
go<font color="#E5E5E5"> although</font><font color="#CCCCCC"> we didn't know their</font>

904
00:36:55,240 --> 00:37:00,759
credentials<font color="#E5E5E5"> they were saved and</font><font color="#CCCCCC"> stored</font>

905
00:36:57,070 --> 00:37:02,830
and loaded by a low prep user and never

906
00:37:00,760 --> 00:37:06,490
trust point-of-sales software with your

907
00:37:02,830 --> 00:37:09,370
<font color="#E5E5E5">data so there's a something</font><font color="#CCCCCC"> called PHP</font>

908
00:37:06,490 --> 00:37:11,470
or<font color="#E5E5E5"> point-to-point encryption which</font>

909
00:37:09,370 --> 00:37:13,000
actually encrypts the data at the<font color="#CCCCCC"> time</font>

910
00:37:11,470 --> 00:37:14,709
of actually swiping your card or

911
00:37:13,000 --> 00:37:16,480
<font color="#E5E5E5">entering your chip and entering your PIN</font>

912
00:37:14,710 --> 00:37:19,210
<font color="#E5E5E5">before it even reaches the payment</font>

913
00:37:16,480 --> 00:37:21,370
terminal<font color="#E5E5E5"> if this becomes a more</font>

914
00:37:19,210 --> 00:37:24,220
widespread than<font color="#CCCCCC"> the</font><font color="#E5E5E5"> application doesn't</font>

915
00:37:21,370 --> 00:37:27,490
<font color="#E5E5E5">even get a chance to</font><font color="#CCCCCC"> access any a sense</font>

916
00:37:24,220 --> 00:37:29,410
of<font color="#CCCCCC"> information</font><font color="#E5E5E5"> and that would no matter</font>

917
00:37:27,490 --> 00:37:30,850
how vulnerable the app is they'll<font color="#E5E5E5"> just</font>

918
00:37:29,410 --> 00:37:43,839
never get your track in in<font color="#E5E5E5"> that way</font>

919
00:37:30,850 --> 00:37:46,900
any questions so so it<font color="#E5E5E5"> encrypts that</font>

920
00:37:43,840 --> 00:37:49,030
swipe down right away<font color="#E5E5E5"> right as the swipe</font>

921
00:37:46,900 --> 00:37:51,250
happens<font color="#E5E5E5"> yeah it actually works there's</font>

922
00:37:49,030 --> 00:37:53,560
an application<font color="#CCCCCC"> or it's application layer</font>

923
00:37:51,250 --> 00:37:55,540
on the point of entry or point<font color="#E5E5E5"> of</font>

924
00:37:53,560 --> 00:37:57,340
interaction device depending on the

925
00:37:55,540 --> 00:38:00,460
vendor where it's<font color="#E5E5E5"> very phone or Ingenico</font>

926
00:37:57,340 --> 00:38:02,080
<font color="#E5E5E5">they have a API that the developers can</font>

927
00:38:00,460 --> 00:38:04,120
<font color="#CCCCCC">use</font><font color="#E5E5E5"> to encrypt the data at the</font>

928
00:38:02,080 --> 00:38:05,560
<font color="#E5E5E5">application layer of that device</font><font color="#CCCCCC"> prior</font>

929
00:38:04,120 --> 00:38:07,480
<font color="#CCCCCC">to actually extending it across the</font><font color="#E5E5E5"> wire</font>

930
00:38:05,560 --> 00:38:09,820
<font color="#E5E5E5">although in my belief I think nothing</font><font color="#CCCCCC"> is</font>

931
00:38:07,480 --> 00:38:14,130
<font color="#CCCCCC">100 percent so yeah we'll see we'll wait</font>

932
00:38:09,820 --> 00:38:14,130
<font color="#E5E5E5">sit down yeah did you</font>

933
00:38:17,230 --> 00:38:21,380
it won't

934
00:38:18,620 --> 00:38:24,290
it's<font color="#CCCCCC"> Oh nobody guess so the data</font><font color="#E5E5E5"> is</font>

935
00:38:21,380 --> 00:38:26,810
encrypted<font color="#CCCCCC"> we did use</font><font color="#E5E5E5"> a we did use an</font>

936
00:38:24,290 --> 00:38:29,029
<font color="#CCCCCC">endpoint</font><font color="#E5E5E5"> such as register and</font><font color="#CCCCCC"> c2 we're</font>

937
00:38:26,810 --> 00:38:31,160
trying to be stealthy<font color="#CCCCCC"> at all because</font><font color="#E5E5E5"> it</font>

938
00:38:29,030 --> 00:38:34,850
<font color="#E5E5E5">was a point of a proof of concept but</font>

939
00:38:31,160 --> 00:38:36,830
<font color="#CCCCCC">not I was curious on the unsafe you said</font>

940
00:38:34,850 --> 00:38:38,990
you found you in<font color="#E5E5E5"> the main memory</font>

941
00:38:36,830 --> 00:38:42,140
scraping<font color="#CCCCCC"> I know that there</font><font color="#E5E5E5"> is some</font>

942
00:38:38,990 --> 00:38:46,220
<font color="#CCCCCC">protection</font><font color="#E5E5E5"> around</font><font color="#CCCCCC"> busy scraping of</font>

943
00:38:42,140 --> 00:38:48,560
whether<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not that we haven't</font><font color="#CCCCCC"> check if</font>

944
00:38:46,220 --> 00:38:51,549
it's a behavioral detection<font color="#E5E5E5"> it may</font>

945
00:38:48,560 --> 00:38:51,549
possibly<font color="#E5E5E5"> yeah</font>

946
00:39:06,410 --> 00:39:14,990
right right it's<font color="#CCCCCC"> on</font><font color="#E5E5E5"> an application</font><font color="#CCCCCC"> has</font>

947
00:39:10,160 --> 00:39:18,109
been written<font color="#E5E5E5"> in that framework</font><font color="#CCCCCC"> teacher</font>

948
00:39:14,990 --> 00:39:21,080
<font color="#CCCCCC">screams I can work and</font><font color="#E5E5E5"> you can improve</font>

949
00:39:18,110 --> 00:39:23,630
your<font color="#E5E5E5"> memory scratch have you</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> on</font>

950
00:39:21,080 --> 00:39:24,660
<font color="#E5E5E5">government security dream that's a tough</font>

951
00:39:23,630 --> 00:39:30,030
one

952
00:39:24,660 --> 00:39:33,089
we have been working<font color="#E5E5E5"> on it</font><font color="#CCCCCC"> so we haven't</font>

953
00:39:30,030 --> 00:39:35,550
<font color="#E5E5E5">looked at any at</font><font color="#CCCCCC"> secur</font><font color="#E5E5E5"> secur extreme</font>

954
00:39:33,090 --> 00:39:37,950
implementation<font color="#E5E5E5"> the inside of</font><font color="#CCCCCC"> keyless</font>

955
00:39:35,550 --> 00:39:39,840
applications the<font color="#CCCCCC"> amiibo help</font><font color="#E5E5E5"> us which we</font>

956
00:39:37,950 --> 00:39:42,120
talked<font color="#E5E5E5"> about</font><font color="#CCCCCC"> earlier was written dotnet</font>

957
00:39:39,840 --> 00:39:44,760
<font color="#E5E5E5">but we didn't see it use any secure</font>

958
00:39:42,120 --> 00:39:46,290
strings to like hide any of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> essence</font>

959
00:39:44,760 --> 00:39:48,060
of<font color="#E5E5E5"> information</font><font color="#CCCCCC"> well that is something</font>

960
00:39:46,290 --> 00:39:50,250
<font color="#CCCCCC">that we could</font><font color="#E5E5E5"> look into pray to be</font>

961
00:39:48,060 --> 00:39:51,750
honest<font color="#CCCCCC"> true most of the applications we</font>

962
00:39:50,250 --> 00:39:54,150
dad would have<font color="#E5E5E5"> looked at were written in</font>

963
00:39:51,750 --> 00:40:16,910
Java<font color="#E5E5E5"> yeah it's very about 90s 90 plus</font>

964
00:39:54,150 --> 00:40:20,130
percent<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> very unpopular yes so</font>

965
00:40:16,910 --> 00:40:22,049
<font color="#CCCCCC">muslim'</font><font color="#E5E5E5"> didn't really have they didn't</font>

966
00:40:20,130 --> 00:40:24,090
care<font color="#E5E5E5"> but some of them did respond and</font>

967
00:40:22,050 --> 00:40:25,590
we're in communications with<font color="#CCCCCC"> them for</font>

968
00:40:24,090 --> 00:40:28,320
updating some<font color="#CCCCCC"> of the more serious things</font>

969
00:40:25,590 --> 00:40:31,410
<font color="#E5E5E5">haven't fixed us but some of them</font><font color="#CCCCCC"> where</font>

970
00:40:28,320 --> 00:40:33,420
<font color="#E5E5E5">Marcus won't fix</font><font color="#CCCCCC"> because I guess they</font>

971
00:40:31,410 --> 00:40:44,430
don't see it as an issue<font color="#E5E5E5"> but the more</font>

972
00:40:33,420 --> 00:40:49,440
serious<font color="#E5E5E5"> things were addressed well we</font>

973
00:40:44,430 --> 00:40:51,509
disagree<font color="#E5E5E5"> that's a yes so so we've</font>

974
00:40:49,440 --> 00:40:53,730
already published<font color="#E5E5E5"> basically our work on</font>

975
00:40:51,510 --> 00:40:56,160
this<font color="#CCCCCC"> one</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> one our</font><font color="#E5E5E5"> blog and we can now</font>

976
00:40:53,730 --> 00:40:59,520
give everybody information on that at

977
00:40:56,160 --> 00:41:02,190
first<font color="#E5E5E5"> right calm basically</font><font color="#CCCCCC"> the</font>

978
00:40:59,520 --> 00:41:03,390
additional questions alright<font color="#E5E5E5"> well that</font>

979
00:41:02,190 --> 00:41:06,050
concludes our presentation

980
00:41:03,390 --> 00:41:06,049
thank you

