1
00:00:00,000 --> 00:00:05,100
<font color="#E5E5E5">alright so this is a little bit more of</font>

2
00:00:02,040 --> 00:00:07,529
<font color="#CCCCCC">a training than a talk so to save but</font>

3
00:00:05,100 --> 00:00:11,239
there's a little bit of a talk portion

4
00:00:07,529 --> 00:00:14,549
of it so just first off so<font color="#E5E5E5"> I'm more</font>

5
00:00:11,240 --> 00:00:16,440
familiar<font color="#E5E5E5"> with the crowd how many of you</font>

6
00:00:14,549 --> 00:00:19,619
would say<font color="#CCCCCC"> you have done some malware</font>

7
00:00:16,440 --> 00:00:22,680
analysis by raising hand<font color="#E5E5E5"> okay and that</font>

8
00:00:19,619 --> 00:00:24,210
how many<font color="#CCCCCC"> of you would say you</font><font color="#E5E5E5"> have are</font>

9
00:00:22,680 --> 00:00:26,820
familiar with walking through a Windows

10
00:00:24,210 --> 00:00:31,050
executable in<font color="#E5E5E5"> auli debug or a similar</font>

11
00:00:26,820 --> 00:00:33,390
debugger ok and<font color="#E5E5E5"> then full reverse you</font>

12
00:00:31,050 --> 00:00:37,380
know using<font color="#CCCCCC"> Ida or some other static</font>

13
00:00:33,390 --> 00:00:39,149
analysis<font color="#E5E5E5"> ok so I'm not oh no not</font>

14
00:00:37,380 --> 00:00:40,410
definitely<font color="#E5E5E5"> not up at the top but i'll</font>

15
00:00:39,149 --> 00:00:43,829
share with you a couple of tips and

16
00:00:40,410 --> 00:00:45,569
<font color="#E5E5E5">tricks that</font><font color="#CCCCCC"> I've come across and</font>

17
00:00:43,829 --> 00:00:49,230
hopefully it's interesting<font color="#E5E5E5"> and</font>

18
00:00:45,570 --> 00:00:52,559
worthwhile so to<font color="#E5E5E5"> start out with just a</font>

19
00:00:49,230 --> 00:00:56,279
<font color="#E5E5E5">couple of terminology or coverage of</font>

20
00:00:52,559 --> 00:00:58,980
some terminology so for the purpose of

21
00:00:56,280 --> 00:01:02,129
this<font color="#E5E5E5"> talk I'll probably swap these three</font>

22
00:00:58,980 --> 00:01:04,830
terms quite a bit binary or sample or

23
00:01:02,129 --> 00:01:07,970
executable this is the<font color="#E5E5E5"> program or the</font>

24
00:01:04,830 --> 00:01:10,048
code<font color="#CCCCCC"> that I'm</font><font color="#E5E5E5"> going to be analyzing</font>

25
00:01:07,970 --> 00:01:13,140
sometimes I'll also swap it with that

26
00:01:10,049 --> 00:01:17,520
second statement our second one PE and

27
00:01:13,140 --> 00:01:21,020
this is a file format for<font color="#E5E5E5"> Windows that</font>

28
00:01:17,520 --> 00:01:25,020
rep<font color="#E5E5E5"> that is the executable file format</font>

29
00:01:21,020 --> 00:01:26,580
the<font color="#E5E5E5"> primary one anyhow AV we probably</font>

30
00:01:25,020 --> 00:01:30,960
all know that that one's not necessary

31
00:01:26,580 --> 00:01:33,990
but all right<font color="#CCCCCC"> okay entry point</font><font color="#E5E5E5"> this</font>

32
00:01:30,960 --> 00:01:35,070
one's a little bit more specialized I

33
00:01:33,990 --> 00:01:38,490
guess something that you may<font color="#CCCCCC"> not be</font>

34
00:01:35,070 --> 00:01:42,000
familiar with when when you<font color="#E5E5E5"> write a</font>

35
00:01:38,490 --> 00:01:46,860
program in C++ you write your int main

36
00:01:42,000 --> 00:01:48,420
right or yeah C C++ the entry point you

37
00:01:46,860 --> 00:01:50,939
know windows portable executable is the

38
00:01:48,420 --> 00:01:54,299
first line of code that the programmer

39
00:01:50,939 --> 00:01:57,240
wrote ask that the operating system has

40
00:01:54,299 --> 00:01:59,509
handed execution over to that that

41
00:01:57,240 --> 00:02:02,699
executable I'll go<font color="#CCCCCC"> with that</font><font color="#E5E5E5"> for now</font>

42
00:01:59,509 --> 00:02:05,700
there's a stack a lot of you guys<font color="#E5E5E5"> are</font>

43
00:02:02,700 --> 00:02:08,580
familiar with that concept to data

44
00:02:05,700 --> 00:02:10,140
structure in memory the<font color="#E5E5E5"> last item that</font>

45
00:02:08,580 --> 00:02:13,270
you place on the stack is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first item</font>

46
00:02:10,139 --> 00:02:16,239
to come off and then exception

47
00:02:13,270 --> 00:02:19,030
I you know this is<font color="#CCCCCC"> something</font><font color="#E5E5E5"> I'm sure we</font>

48
00:02:16,240 --> 00:02:20,740
all enjoyed in our CS classes if you

49
00:02:19,030 --> 00:02:23,500
took those or<font color="#CCCCCC"> what not and what if</font>

50
00:02:20,740 --> 00:02:26,820
<font color="#CCCCCC">you're programming</font><font color="#E5E5E5"> you know how to</font>

51
00:02:23,500 --> 00:02:29,410
handle exceptions so is the code that

52
00:02:26,820 --> 00:02:32,950
takes care of the mess that you have

53
00:02:29,410 --> 00:02:34,510
made otherwise now I<font color="#E5E5E5"> I introduced</font>

54
00:02:32,950 --> 00:02:36,160
<font color="#CCCCCC">alright I mention those because we're</font>

55
00:02:34,510 --> 00:02:38,380
<font color="#E5E5E5">going to see this sample that we're</font>

56
00:02:36,160 --> 00:02:43,090
looking<font color="#E5E5E5"> at take advantage of exception</font>

57
00:02:38,380 --> 00:02:46,180
handling let's see<font color="#CCCCCC"> all right some</font><font color="#E5E5E5"> of the</font>

58
00:02:43,090 --> 00:02:48,910
tools that we will be using<font color="#E5E5E5"> a debugger</font>

59
00:02:46,180 --> 00:02:50,500
so<font color="#CCCCCC"> all you debug is the tool that</font><font color="#E5E5E5"> I'll</font>

60
00:02:48,910 --> 00:02:52,270
be used and you can see it listed down

61
00:02:50,500 --> 00:02:54,760
there there<font color="#E5E5E5"> are a couple of there are</font>

62
00:02:52,270 --> 00:02:57,190
plenty<font color="#E5E5E5"> of other ones right and as you've</font>

63
00:02:54,760 --> 00:03:00,090
probably noticed my talk is going to

64
00:02:57,190 --> 00:03:04,270
focus on windows malware analysis so

65
00:03:00,090 --> 00:03:06,880
Ollie debug there's Ida's debugger gdb

66
00:03:04,270 --> 00:03:11,020
that's primarily useful<font color="#E5E5E5"> in Linux or UNIX</font>

67
00:03:06,880 --> 00:03:13,780
up OSS this is a debugger as a utility

68
00:03:11,020 --> 00:03:15,760
that allows you to step line by line if

69
00:03:13,780 --> 00:03:18,670
that's your<font color="#E5E5E5"> desire through the assembly</font>

70
00:03:15,760 --> 00:03:21,399
code or the machine code that makes up

71
00:03:18,670 --> 00:03:24,399
that binary you're analyzing you'll see

72
00:03:21,400 --> 00:03:27,760
that it shows you the<font color="#E5E5E5"> instructions so</font>

73
00:03:24,400 --> 00:03:31,959
the<font color="#E5E5E5"> code that</font><font color="#CCCCCC"> it will run it allows you</font>

74
00:03:27,760 --> 00:03:34,149
to see memory as each X<font color="#CCCCCC"> kotas as each</font>

75
00:03:31,959 --> 00:03:36,610
line is executed you can see how memory

76
00:03:34,150 --> 00:03:39,340
was manipulated and also the<font color="#E5E5E5"> CPU</font>

77
00:03:36,610 --> 00:03:44,790
registers how those were modified and or

78
00:03:39,340 --> 00:03:44,790
used<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> and then a disassembler is</font>

79
00:03:44,910 --> 00:03:51,400
so this is your static analysis of an

80
00:03:47,650 --> 00:03:53,070
executable you'll be able<font color="#E5E5E5"> to look at the</font>

81
00:03:51,400 --> 00:03:55,570
code but you're<font color="#E5E5E5"> not running it so</font>

82
00:03:53,070 --> 00:03:57,519
obviously a vulnerability of<font color="#E5E5E5"> a debugger</font>

83
00:03:55,570 --> 00:04:00,420
is you're running the code you need to

84
00:03:57,520 --> 00:04:02,260
take measures to ensure<font color="#CCCCCC"> that you haven't</font>

85
00:04:00,420 --> 00:04:04,809
compromised your network or your

86
00:04:02,260 --> 00:04:07,179
<font color="#CCCCCC">computer so there's either pro and</font>

87
00:04:04,810 --> 00:04:09,640
hopper there's definitely<font color="#E5E5E5"> other ones but</font>

88
00:04:07,180 --> 00:04:14,250
those are the<font color="#E5E5E5"> ones I'm familiar with so</font>

89
00:04:09,640 --> 00:04:16,930
key point debugger running code

90
00:04:14,250 --> 00:04:21,310
disassembler just viewing it hopefully

91
00:04:16,930 --> 00:04:23,260
<font color="#E5E5E5">right so the sample that we're going to</font>

92
00:04:21,310 --> 00:04:25,870
take a look<font color="#E5E5E5"> at is just an email from</font>

93
00:04:23,260 --> 00:04:28,389
well-known consumer electronics store

94
00:04:25,870 --> 00:04:30,850
and how to zip file attached to it<font color="#E5E5E5"> I</font>

95
00:04:28,389 --> 00:04:34,630
open zip look like a Microsoft Word

96
00:04:30,850 --> 00:04:37,270
document of course it wasn't it's well

97
00:04:34,630 --> 00:04:38,889
detected by<font color="#E5E5E5"> AV so I guess the the key of</font>

98
00:04:37,270 --> 00:04:41,289
this is I<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> think this is anything</font>

99
00:04:38,889 --> 00:04:44,770
super special hopefully you're<font color="#E5E5E5"> not</font>

100
00:04:41,290 --> 00:04:47,020
expecting any crazy<font color="#CCCCCC"> maler but it</font>

101
00:04:44,770 --> 00:04:48,609
nonetheless it will<font color="#E5E5E5"> allow us</font><font color="#CCCCCC"> to show</font>

102
00:04:47,020 --> 00:04:52,770
some of<font color="#E5E5E5"> the concepts that are applicable</font>

103
00:04:48,610 --> 00:04:55,840
to<font color="#E5E5E5"> more more advanced malware analysis</font>

104
00:04:52,770 --> 00:04:57,639
so I probably went through this a<font color="#E5E5E5"> little</font>

105
00:04:55,840 --> 00:05:00,030
too quick but at the<font color="#E5E5E5"> start of the talk I</font>

106
00:04:57,639 --> 00:05:02,440
<font color="#E5E5E5">kind of gave this a new title which was</font>

107
00:05:00,030 --> 00:05:03,760
how to train your malware or something

108
00:05:02,440 --> 00:05:05,590
how to how to get to know your malware I

109
00:05:03,760 --> 00:05:09,479
don't know so there's kind of a running

110
00:05:05,590 --> 00:05:13,448
theme you can laugh if you want whatever

111
00:05:09,479 --> 00:05:16,330
very so first we need to<font color="#E5E5E5"> keep the sample</font>

112
00:05:13,449 --> 00:05:18,070
that<font color="#E5E5E5"> we're analyzing controlled right so</font>

113
00:05:16,330 --> 00:05:22,710
why do we do that to protect<font color="#CCCCCC"> ourselves</font>

114
00:05:18,070 --> 00:05:24,969
to protect our network how do we do that

115
00:05:22,710 --> 00:05:27,780
generally we're<font color="#CCCCCC"> running in a virtualized</font>

116
00:05:24,970 --> 00:05:29,740
environment on a<font color="#E5E5E5"> dedicated machine I</font>

117
00:05:27,780 --> 00:05:32,500
don't have<font color="#CCCCCC"> the funds to do that right</font>

118
00:05:29,740 --> 00:05:36,550
<font color="#CCCCCC">now so this is my machine terrible as it</font>

119
00:05:32,500 --> 00:05:40,620
is but let's see Matt make them our

120
00:05:36,550 --> 00:05:44,380
believe it is free so this concept is

121
00:05:40,620 --> 00:05:46,210
your malware authors out there they know

122
00:05:44,380 --> 00:05:49,870
that people are<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at their code</font>

123
00:05:46,210 --> 00:05:52,840
right so they're going<font color="#E5E5E5"> to take measures</font>

124
00:05:49,870 --> 00:05:54,280
to try to detect if someone is analyzing

125
00:05:52,840 --> 00:05:57,820
this malware either dynamically or

126
00:05:54,280 --> 00:06:00,070
statically and if they detect that

127
00:05:57,820 --> 00:06:03,460
they're able<font color="#E5E5E5"> to detect that take an</font>

128
00:06:00,070 --> 00:06:06,010
action<font color="#E5E5E5"> to thwart your analysis so as a</font>

129
00:06:03,460 --> 00:06:07,900
malware analyst your job is<font color="#CCCCCC"> to do your</font>

130
00:06:06,010 --> 00:06:09,760
very best to<font color="#CCCCCC"> make that environment when</font>

131
00:06:07,900 --> 00:06:12,039
you're doing dynamic analysis make that

132
00:06:09,760 --> 00:06:16,870
environment seem like it is a real user

133
00:06:12,039 --> 00:06:19,599
not an analyst so how many of you would

134
00:06:16,870 --> 00:06:21,099
think that<font color="#CCCCCC"> you're your secretary at</font><font color="#E5E5E5"> the</font>

135
00:06:19,599 --> 00:06:24,430
office is going to be ruining Wireshark

136
00:06:21,099 --> 00:06:27,760
on her desktop his or her desktop very

137
00:06:24,430 --> 00:06:30,220
unlikely<font color="#E5E5E5"> right so you probably</font><font color="#CCCCCC"> don't</font>

138
00:06:27,760 --> 00:06:32,530
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to run wireshark on your directly</font>

139
00:06:30,220 --> 00:06:34,840
on your analysis machine but how do you

140
00:06:32,530 --> 00:06:37,989
<font color="#E5E5E5">capture the packets that are emitted</font>

141
00:06:34,840 --> 00:06:39,400
from a compromise machine well you have

142
00:06:37,990 --> 00:06:43,630
another virtual machine that<font color="#CCCCCC"> is</font>

143
00:06:39,400 --> 00:06:46,299
the default gateway for that the machine

144
00:06:43,630 --> 00:06:51,460
that<font color="#E5E5E5"> is running an hour so any traffic</font>

145
00:06:46,300 --> 00:06:54,100
that's originated from the compromised

146
00:06:51,460 --> 00:06:56,080
host is picked up by yours your sniffer

147
00:06:54,100 --> 00:06:58,810
box or your gateway box that's where

148
00:06:56,080 --> 00:07:02,919
you've run wireshark that's that machine

149
00:06:58,810 --> 00:07:05,440
in my my mode of operation basically

150
00:07:02,919 --> 00:07:09,219
that machine is where I collect

151
00:07:05,440 --> 00:07:13,680
information and and try to make<font color="#CCCCCC"> sure</font>

152
00:07:09,220 --> 00:07:16,270
that the environment<font color="#E5E5E5"> for that for the</font>

153
00:07:13,680 --> 00:07:19,539
compromise machine really<font color="#E5E5E5"> looks like the</font>

154
00:07:16,270 --> 00:07:21,460
<font color="#CCCCCC">internet or the</font><font color="#E5E5E5"> real environment so what</font>

155
00:07:19,539 --> 00:07:25,139
do I<font color="#CCCCCC"> mean by that</font><font color="#E5E5E5"> we run fake services</font>

156
00:07:21,460 --> 00:07:27,609
we resolve DNS and of<font color="#CCCCCC"> course there's</font>

157
00:07:25,139 --> 00:07:29,470
various tricks that<font color="#E5E5E5"> the authors can take</font>

158
00:07:27,610 --> 00:07:32,710
to detect that but you do the best you

159
00:07:29,470 --> 00:07:40,900
can you improvise it you improve as you

160
00:07:32,710 --> 00:07:42,400
go<font color="#CCCCCC"> on</font><font color="#E5E5E5"> all right so too one method or one</font>

161
00:07:40,900 --> 00:07:44,560
approach<font color="#CCCCCC"> that I take to malware analysis</font>

162
00:07:42,400 --> 00:07:47,049
so I'm<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> with static analysis i can I</font>

163
00:07:44,560 --> 00:07:49,930
<font color="#E5E5E5">can do some</font><font color="#CCCCCC"> of that but sometimes it's a</font>

164
00:07:47,050 --> 00:07:52,120
lot easier to do<font color="#CCCCCC"> night</font><font color="#E5E5E5"> dynamic analysis</font>

165
00:07:49,930 --> 00:07:55,240
walk through a debugger and let the code

166
00:07:52,120 --> 00:07:57,669
reveal itself now do you walk<font color="#E5E5E5"> through</font>

167
00:07:55,240 --> 00:07:59,320
every single<font color="#E5E5E5"> line you know that's very</font>

168
00:07:57,669 --> 00:08:02,198
unlikely because that's going to take a

169
00:07:59,320 --> 00:08:04,300
while but you'll as you go through

170
00:08:02,199 --> 00:08:07,060
malware<font color="#E5E5E5"> analysis you'll learn where you</font>

171
00:08:04,300 --> 00:08:08,590
may want<font color="#E5E5E5"> to set a breakpoint and let it</font>

172
00:08:07,060 --> 00:08:10,000
run to that break point so that you

173
00:08:08,590 --> 00:08:13,590
capture<font color="#CCCCCC"> the information that occurred</font>

174
00:08:10,000 --> 00:08:17,110
between that and the previous<font color="#E5E5E5"> breakpoint</font>

175
00:08:13,590 --> 00:08:18,280
so chances are the malware is going to

176
00:08:17,110 --> 00:08:22,090
try to<font color="#E5E5E5"> get away and we're going to see a</font>

177
00:08:18,280 --> 00:08:24,840
couple of examples of that and there

178
00:08:22,090 --> 00:08:26,888
will be especially the exceptions so

179
00:08:24,840 --> 00:08:29,429
earlier I mentioned you<font color="#CCCCCC"> know the code</font>

180
00:08:26,889 --> 00:08:32,770
that<font color="#CCCCCC"> handles when something goes wrong</font>

181
00:08:29,430 --> 00:08:36,580
and then there's<font color="#CCCCCC"> also debugger detection</font>

182
00:08:32,770 --> 00:08:38,588
so Ollie debug just really simple right

183
00:08:36,580 --> 00:08:40,390
Ollie debug runs is an executable in

184
00:08:38,589 --> 00:08:43,270
windows all ed bug exe or something like

185
00:08:40,390 --> 00:08:45,580
that<font color="#E5E5E5"> so if</font><font color="#CCCCCC"> I'm writing malware I do</font>

186
00:08:43,270 --> 00:08:48,279
processing enumeration and I check for a

187
00:08:45,580 --> 00:08:50,320
ladybug exe is it running or I check for

188
00:08:48,279 --> 00:08:53,530
wire<font color="#E5E5E5"> Shakti exe is running right</font>

189
00:08:50,320 --> 00:08:56,530
and primitive but<font color="#E5E5E5"> I may have detected</font>

190
00:08:53,530 --> 00:09:00,310
that you are analyzing this malware so

191
00:08:56,530 --> 00:09:04,530
the<font color="#E5E5E5"> point here</font><font color="#CCCCCC"> is well I'm guess I'm</font>

192
00:09:00,310 --> 00:09:04,530
kind of blending these points but

193
00:09:04,740 --> 00:09:09,130
traffic<font color="#E5E5E5"> analysis file system registry</font>

194
00:09:07,380 --> 00:09:12,250
analysis that's going to get you a

195
00:09:09,130 --> 00:09:13,780
certain way or certain you're going<font color="#E5E5E5"> to</font>

196
00:09:12,250 --> 00:09:16,840
<font color="#E5E5E5">learn a certain amount about the sample</font>

197
00:09:13,780 --> 00:09:19,270
but if it has detected your environment

198
00:09:16,840 --> 00:09:20,890
as being an analysis environment where

199
00:09:19,270 --> 00:09:23,800
if it has detected your environment as

200
00:09:20,890 --> 00:09:26,620
not being the target environment then it

201
00:09:23,800 --> 00:09:28,329
may not actually do the intended actions

202
00:09:26,620 --> 00:09:30,190
and you may have lost out on what that

203
00:09:28,330 --> 00:09:33,690
that sample is actually intended to do

204
00:09:30,190 --> 00:09:36,210
so that's why static analysis and or

205
00:09:33,690 --> 00:09:39,910
<font color="#E5E5E5">runtime analysis through a debugger is</font>

206
00:09:36,210 --> 00:09:42,130
beneficial you're able to a little bit

207
00:09:39,910 --> 00:09:45,280
<font color="#E5E5E5">further trick that sample into thinking</font>

208
00:09:42,130 --> 00:09:47,080
that it's in the<font color="#E5E5E5"> right place</font><font color="#CCCCCC"> all right</font>

209
00:09:45,280 --> 00:09:53,589
I'm going<font color="#E5E5E5"> to skip this for a minute um</font>

210
00:09:47,080 --> 00:09:55,390
<font color="#E5E5E5">all right so this is just one function</font>

211
00:09:53,590 --> 00:09:56,950
that I want to<font color="#E5E5E5"> point</font><font color="#CCCCCC"> out get proc</font>

212
00:09:55,390 --> 00:10:00,790
addressing I apologize it's probably

213
00:09:56,950 --> 00:10:03,340
hard to see in<font color="#E5E5E5"> okay yeah so get proc</font>

214
00:10:00,790 --> 00:10:04,959
address<font color="#E5E5E5"> although i don't know i'm sure</font>

215
00:10:03,340 --> 00:10:07,840
it stands for get procedure address

216
00:10:04,960 --> 00:10:10,780
basically this is a way for a<font color="#CCCCCC"> Windows</font>

217
00:10:07,840 --> 00:10:14,080
executable to at runtime discover<font color="#E5E5E5"> the</font>

218
00:10:10,780 --> 00:10:15,370
address of code for a<font color="#E5E5E5"> function that it</font>

219
00:10:14,080 --> 00:10:20,250
needs from an already established

220
00:10:15,370 --> 00:10:22,630
library so there's a library win i met

221
00:10:20,250 --> 00:10:24,570
dll and it provides as you can guess

222
00:10:22,630 --> 00:10:27,189
internet connectivity internet functions

223
00:10:24,570 --> 00:10:31,000
your malware may want to call<font color="#CCCCCC"> out using</font>

224
00:10:27,190 --> 00:10:34,150
the<font color="#E5E5E5"> internet probably right and it could</font>

225
00:10:31,000 --> 00:10:35,920
use get proc address to locate<font color="#CCCCCC"> the</font>

226
00:10:34,150 --> 00:10:37,870
function the address of<font color="#E5E5E5"> the function</font>

227
00:10:35,920 --> 00:10:41,979
that<font color="#E5E5E5"> it wants to utilize to make a call</font>

228
00:10:37,870 --> 00:10:43,840
out alternatively<font color="#CCCCCC"> more I guess more</font>

229
00:10:41,980 --> 00:10:50,740
easily discoverable right it could have

230
00:10:43,840 --> 00:10:52,330
the that function named imported a so

231
00:10:50,740 --> 00:10:54,790
this<font color="#E5E5E5"> I have to step back</font><font color="#CCCCCC"> a little bit in</font>

232
00:10:52,330 --> 00:10:58,060
the windows PE executable file format

233
00:10:54,790 --> 00:11:00,459
there's an import table and this lists

234
00:10:58,060 --> 00:11:01,839
the functions that<font color="#CCCCCC"> your the libraries</font>

235
00:11:00,460 --> 00:11:03,740
and the functions from those libraries

236
00:11:01,840 --> 00:11:07,490
that that executable will use

237
00:11:03,740 --> 00:11:10,910
so the malware sample could have this

238
00:11:07,490 --> 00:11:14,600
<font color="#E5E5E5">wininet function when I net send HTTP</font>

239
00:11:10,910 --> 00:11:16,069
request right in that import table but

240
00:11:14,600 --> 00:11:19,670
that's an easy catch for an analyst

241
00:11:16,070 --> 00:11:21,170
right so instead maybe the author will

242
00:11:19,670 --> 00:11:23,949
be a little<font color="#E5E5E5"> bit more tricky and he'll</font>

243
00:11:21,170 --> 00:11:26,510
use<font color="#CCCCCC"> get proc address to at runtime</font>

244
00:11:23,950 --> 00:11:30,650
resolve where that address<font color="#CCCCCC"> is so it's no</font>

245
00:11:26,510 --> 00:11:33,260
<font color="#CCCCCC">longer a quick scan in the import table</font>

246
00:11:30,650 --> 00:11:35,270
to see what functionality occurs now if

247
00:11:33,260 --> 00:11:37,220
they don't take other measures it is a

248
00:11:35,270 --> 00:11:41,360
quick scan in strings to see that that

249
00:11:37,220 --> 00:11:43,730
is that function name is there so

250
00:11:41,360 --> 00:11:45,140
there's other measures<font color="#CCCCCC"> that would be</font>

251
00:11:43,730 --> 00:11:49,010
necessary to make that deception and

252
00:11:45,140 --> 00:11:52,520
actually work but all right onto the

253
00:11:49,010 --> 00:11:56,870
part that<font color="#E5E5E5"> I am a lot</font><font color="#CCCCCC"> more excited for</font>

254
00:11:52,520 --> 00:11:58,100
will say that I apologize<font color="#CCCCCC"> I didn't take</font>

255
00:11:56,870 --> 00:12:03,920
<font color="#E5E5E5">the time to make sure that windows</font>

256
00:11:58,100 --> 00:12:06,380
update itself so you're going<font color="#E5E5E5"> to see</font>

257
00:12:03,920 --> 00:12:08,540
<font color="#CCCCCC">that probably a couple</font><font color="#E5E5E5"> times alright so</font>

258
00:12:06,380 --> 00:12:11,689
just<font color="#CCCCCC"> to explain the environment</font><font color="#E5E5E5"> that</font>

259
00:12:08,540 --> 00:12:15,050
I've got here I have REM<font color="#CCCCCC"> next which is</font>

260
00:12:11,690 --> 00:12:18,740
just<font color="#E5E5E5"> a linux-based now our analysis</font>

261
00:12:15,050 --> 00:12:20,060
distro and it is running Wireshark as

262
00:12:18,740 --> 00:12:22,010
you can see here a packet capture

263
00:12:20,060 --> 00:12:24,859
program it's also running something

264
00:12:22,010 --> 00:12:28,450
<font color="#E5E5E5">called I netsim which starts up a bunch</font>

265
00:12:24,860 --> 00:12:32,750
of listening port and it's running a DNS

266
00:12:28,450 --> 00:12:34,670
spoofer for lack of better terms any DNS

267
00:12:32,750 --> 00:12:37,700
request that comes into it will be

268
00:12:34,670 --> 00:12:39,740
answered with its own IP address so the

269
00:12:37,700 --> 00:12:41,420
effect of that<font color="#E5E5E5"> of course is when the now</font>

270
00:12:39,740 --> 00:12:44,630
our sample tries to call out to bad

271
00:12:41,420 --> 00:12:46,930
domain com that that actually<font color="#CCCCCC"> that the</font>

272
00:12:44,630 --> 00:12:49,820
windows machine that will get to next

273
00:12:46,930 --> 00:12:53,150
believes that this Linux machine is<font color="#E5E5E5"> that</font>

274
00:12:49,820 --> 00:13:03,320
serves that domain so we'll be able<font color="#CCCCCC"> to</font>

275
00:12:53,150 --> 00:13:09,260
watch traffic here all right<font color="#CCCCCC"> and then</font>

276
00:13:03,320 --> 00:13:12,280
I've got<font color="#E5E5E5"> my good old Windows desktop so</font>

277
00:13:09,260 --> 00:13:14,870
here's my mouth sample best buy order so

278
00:13:12,280 --> 00:13:17,680
it's definitely a word doc right it's

279
00:13:14,870 --> 00:13:19,910
got the icon I'm sure it is so

280
00:13:17,680 --> 00:13:23,569
let's take a look<font color="#E5E5E5"> at it in a hex editor</font>

281
00:13:19,910 --> 00:13:34,459
hopefully this is a<font color="#E5E5E5"> little yeah that's</font>

282
00:13:23,570 --> 00:13:36,230
not<font color="#E5E5E5"> really delicious so there is yeah</font>

283
00:13:34,460 --> 00:13:37,610
I'm going<font color="#E5E5E5"> to struggle this program i'm</font>

284
00:13:36,230 --> 00:13:41,990
not very friend it's not<font color="#E5E5E5"> very friendly</font>

285
00:13:37,610 --> 00:13:44,090
of making it larger but anyhow if you

286
00:13:41,990 --> 00:13:46,970
can see<font color="#CCCCCC"> it up at the very very first two</font>

287
00:13:44,090 --> 00:13:50,390
characters<font color="#E5E5E5"> are MZ this is a signature</font>

288
00:13:46,970 --> 00:13:54,200
for a<font color="#E5E5E5"> microsoft PE executable in it you</font>

289
00:13:50,390 --> 00:13:56,810
<font color="#CCCCCC">can see MZ so I lie a little bit there</font>

290
00:13:54,200 --> 00:13:59,000
but you can also see PE so and you have

291
00:13:56,810 --> 00:14:03,140
the two together part of<font color="#E5E5E5"> the signature</font>

292
00:13:59,000 --> 00:14:05,300
for Microsoft Windows executable so we

293
00:14:03,140 --> 00:14:07,069
it looks<font color="#E5E5E5"> like a word document here on</font>

294
00:14:05,300 --> 00:14:11,689
the desktop but it is indeed<font color="#CCCCCC"> and</font>

295
00:14:07,070 --> 00:14:13,340
executable so let's find out a little

296
00:14:11,690 --> 00:14:15,800
bit about what it does so I'm going<font color="#CCCCCC"> to</font>

297
00:14:13,340 --> 00:14:18,020
just start a process explorer kind<font color="#E5E5E5"> of</font>

298
00:14:15,800 --> 00:14:26,300
like a task manager on steroids right

299
00:14:18,020 --> 00:14:30,740
and hopefully<font color="#CCCCCC"> get that someone out of</font>

300
00:14:26,300 --> 00:14:33,229
the way clear wireshark so all this

301
00:14:30,740 --> 00:14:35,230
noise happen in the background was just

302
00:14:33,230 --> 00:14:42,770
you know your regular<font color="#E5E5E5"> Microsoft Windows</font>

303
00:14:35,230 --> 00:14:45,170
noise<font color="#E5E5E5"> alright so I run it and of course</font>

304
00:14:42,770 --> 00:14:51,350
<font color="#CCCCCC">it says hey windows cannot open this</font>

305
00:14:45,170 --> 00:14:52,640
file the windows the windows might not

306
00:14:51,350 --> 00:14:54,230
support the file type or might not

307
00:14:52,640 --> 00:14:56,660
support the codec that was used<font color="#E5E5E5"> to</font>

308
00:14:54,230 --> 00:14:59,210
compress this file okay so<font color="#E5E5E5"> I can't look</font>

309
00:14:56,660 --> 00:15:01,329
<font color="#E5E5E5">at my best buy in voice whatever but if</font>

310
00:14:59,210 --> 00:15:04,280
you<font color="#E5E5E5"> notice there's now this svchost.exe</font>

311
00:15:01,330 --> 00:15:05,600
running and<font color="#CCCCCC"> I apologize you probably</font>

312
00:15:04,280 --> 00:15:07,490
can't see that unless you're up here in

313
00:15:05,600 --> 00:15:10,760
the first front row but there<font color="#E5E5E5"> is an</font>

314
00:15:07,490 --> 00:15:12,920
extra svchost that started up those of

315
00:15:10,760 --> 00:15:16,150
you that are familiar with ancient

316
00:15:12,920 --> 00:15:19,729
<font color="#CCCCCC">windows windows XP will I realize that</font>

317
00:15:16,150 --> 00:15:22,850
<font color="#E5E5E5">svchost generally is a sub child</font><font color="#CCCCCC"> to win</font>

318
00:15:19,730 --> 00:15:24,470
logon belongs up here this one just

319
00:15:22,850 --> 00:15:26,990
<font color="#E5E5E5">popped up</font><font color="#CCCCCC"> it's kind of out of place when</font>

320
00:15:24,470 --> 00:15:28,250
if<font color="#E5E5E5"> you if you use a process explorer</font>

321
00:15:26,990 --> 00:15:31,220
they'll kind of get familiar with that

322
00:15:28,250 --> 00:15:34,100
but that is indeed arm our sample

323
00:15:31,220 --> 00:15:36,610
and part of what it<font color="#E5E5E5"> did and you can</font>

324
00:15:34,100 --> 00:15:39,980
notice also that it attempted to make

325
00:15:36,610 --> 00:15:43,339
conversation so it reached out on port

326
00:15:39,980 --> 00:15:45,649
8080 to some IP address and it looks

327
00:15:43,339 --> 00:15:48,560
like<font color="#E5E5E5"> I don't see a DNS request in here</font>

328
00:15:45,649 --> 00:15:51,879
so it didn't have that<font color="#CCCCCC"> IP address</font>

329
00:15:48,560 --> 00:15:57,050
<font color="#CCCCCC">hard-coded or maybe it was part of a</font>

330
00:15:51,879 --> 00:16:00,589
generation algorithm but let's see so

331
00:15:57,050 --> 00:16:02,569
that is not quite the focus of<font color="#CCCCCC"> this</font>

332
00:16:00,589 --> 00:16:04,790
though so I just kind of wanted to show

333
00:16:02,569 --> 00:16:06,319
<font color="#CCCCCC">you what that malware sample does and</font>

334
00:16:04,790 --> 00:16:11,990
then we'll<font color="#E5E5E5"> actually dig into it a little</font>

335
00:16:06,319 --> 00:16:14,719
bit<font color="#E5E5E5"> with these tools so it yeah it</font>

336
00:16:11,990 --> 00:16:18,259
installed an svchost<font color="#E5E5E5"> I didn't run a</font>

337
00:16:14,720 --> 00:16:20,300
registry scan but presumably it probably

338
00:16:18,259 --> 00:16:21,980
installed some persistence some way of

339
00:16:20,300 --> 00:16:24,680
starting up the<font color="#E5E5E5"> next time you reboot the</font>

340
00:16:21,980 --> 00:16:31,759
machine so we're going to throw<font color="#E5E5E5"> that in</font>

341
00:16:24,680 --> 00:16:34,310
<font color="#CCCCCC">auli debug and also a</font><font color="#E5E5E5"> United pro so</font>

342
00:16:31,759 --> 00:16:37,100
again<font color="#CCCCCC"> Ollie debug is our static analysis</font>

343
00:16:34,310 --> 00:16:39,469
or excuse<font color="#CCCCCC"> me our runtime analysis it's</font>

344
00:16:37,100 --> 00:16:41,930
our debugger so you've got<font color="#E5E5E5"> four panes</font>

345
00:16:39,470 --> 00:16:44,059
the left has the assembly instructions

346
00:16:41,930 --> 00:16:47,120
that will be executed<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the program</font>

347
00:16:44,059 --> 00:16:48,980
that is the<font color="#CCCCCC"> program on</font><font color="#E5E5E5"> the right are</font>

348
00:16:47,120 --> 00:16:51,980
your<font color="#E5E5E5"> CPU registers and other registers</font>

349
00:16:48,980 --> 00:16:56,660
bottom left is memory contents and you

350
00:16:51,980 --> 00:16:58,819
can point that most anywhere and the

351
00:16:56,660 --> 00:17:02,300
bottom so I said bottom left I hope

352
00:16:58,819 --> 00:17:03,529
bottom right is your stack so as<font color="#E5E5E5"> I</font>

353
00:17:02,300 --> 00:17:06,379
pointed out a little bit earlier<font color="#E5E5E5"> the</font>

354
00:17:03,529 --> 00:17:08,419
stack is a memory structure so the the

355
00:17:06,380 --> 00:17:10,100
far left you could actually also be

356
00:17:08,419 --> 00:17:13,789
viewing<font color="#CCCCCC"> the stack because it's part of</font>

357
00:17:10,099 --> 00:17:15,379
memory but the far right is showing or

358
00:17:13,789 --> 00:17:19,099
the bottom<font color="#E5E5E5"> right is showing you that</font>

359
00:17:15,380 --> 00:17:24,169
stack in its structure so last in first

360
00:17:19,099 --> 00:17:28,750
out<font color="#CCCCCC"> all right so i apologize i'm gonna</font>

361
00:17:24,169 --> 00:17:31,159
have<font color="#E5E5E5"> to make some jumps here in and</font>

362
00:17:28,750 --> 00:17:35,630
sharing this knowledge with you but<font color="#E5E5E5"> i</font>

363
00:17:31,159 --> 00:17:37,760
think you<font color="#E5E5E5"> can maybe trust me so and what</font>

364
00:17:35,630 --> 00:17:41,899
<font color="#CCCCCC">i mean</font><font color="#E5E5E5"> by that</font><font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to skip over so</font>

365
00:17:37,760 --> 00:17:43,309
I<font color="#CCCCCC"> to pro brought up here is our static</font>

366
00:17:41,899 --> 00:17:44,809
analysis tool it's showing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first</font>

367
00:17:43,309 --> 00:17:47,178
line of code that it

368
00:17:44,809 --> 00:17:50,269
links will be ran when<font color="#E5E5E5"> windows hands</font>

369
00:17:47,179 --> 00:17:52,120
over to this executable and what I'm

370
00:17:50,269 --> 00:17:54,590
going<font color="#CCCCCC"> to do is skip over all these</font>

371
00:17:52,120 --> 00:17:56,149
instructions though because<font color="#E5E5E5"> I've</font>

372
00:17:54,590 --> 00:17:57,918
previously looked at it and I recognize

373
00:17:56,149 --> 00:18:01,219
<font color="#CCCCCC">that it's kind of boilerplate it's</font>

374
00:17:57,919 --> 00:18:03,529
probably<font color="#CCCCCC"> from the compiler or from some</font>

375
00:18:01,220 --> 00:18:04,850
tool that they were using to create this

376
00:18:03,529 --> 00:18:07,220
so I'm going to<font color="#E5E5E5"> skip to this function</font>

377
00:18:04,850 --> 00:18:09,620
<font color="#E5E5E5">here which to me as an analyst looks</font>

378
00:18:07,220 --> 00:18:13,370
like<font color="#E5E5E5"> where the interesting code actually</font>

379
00:18:09,620 --> 00:18:16,279
starts where where their program starts

380
00:18:13,370 --> 00:18:24,439
the they're being the Malheur author of

381
00:18:16,279 --> 00:18:27,529
course<font color="#E5E5E5"> all right so when you let's say</font>

382
00:18:24,440 --> 00:18:30,590
you're doing<font color="#CCCCCC"> on exception handling and</font>

383
00:18:27,529 --> 00:18:33,889
<font color="#E5E5E5">Python how are you going to start that</font>

384
00:18:30,590 --> 00:18:35,149
out in<font color="#E5E5E5"> your code I just I'm gonna shout</font>

385
00:18:33,889 --> 00:18:37,580
it out you're going<font color="#E5E5E5"> what's the first</font>

386
00:18:35,149 --> 00:18:41,090
stands<font color="#E5E5E5"> there the first statement try</font>

387
00:18:37,580 --> 00:18:42,980
<font color="#CCCCCC">okay so similar to that here we are</font>

388
00:18:41,090 --> 00:18:45,649
<font color="#E5E5E5">going to be implementing our exception</font>

389
00:18:42,980 --> 00:18:49,659
handling and I bring that up just yeah

390
00:18:45,649 --> 00:18:52,489
we'll get<font color="#E5E5E5"> to it in a minute but so I</font>

391
00:18:49,659 --> 00:18:54,590
apologize<font color="#CCCCCC"> to those of you</font><font color="#E5E5E5"> who may not</font><font color="#CCCCCC"> be</font>

392
00:18:52,490 --> 00:18:57,980
<font color="#E5E5E5">as comfortable with assembly languages</font>

393
00:18:54,590 --> 00:19:00,549
others but I highlighted this first

394
00:18:57,980 --> 00:19:03,259
instruction which here which is a call

395
00:19:00,549 --> 00:19:07,399
so that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually where it's handing</font>

396
00:19:03,259 --> 00:19:08,990
off to another function right before

397
00:19:07,399 --> 00:19:11,869
that there is a number<font color="#E5E5E5"> of statements</font>

398
00:19:08,990 --> 00:19:12,919
that are doing what well<font color="#E5E5E5"> I'm not going</font>

399
00:19:11,869 --> 00:19:14,899
<font color="#E5E5E5">to go into every single one of them but</font>

400
00:19:12,919 --> 00:19:19,419
<font color="#E5E5E5">i am going to point out this push right</font>

401
00:19:14,899 --> 00:19:22,428
here there there's a push and for those

402
00:19:19,419 --> 00:19:25,580
not familiar with the stack two

403
00:19:22,429 --> 00:19:27,830
operations basically so a push you put a

404
00:19:25,580 --> 00:19:30,259
piece of data on<font color="#E5E5E5"> the stack and a pop you</font>

405
00:19:27,830 --> 00:19:35,360
pop off<font color="#CCCCCC"> the stack you pop that that top</font>

406
00:19:30,259 --> 00:19:36,830
item off the<font color="#E5E5E5"> stack so some address is</font>

407
00:19:35,360 --> 00:19:39,678
being pushed on the stack well<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going</font>

408
00:19:36,830 --> 00:19:40,970
<font color="#E5E5E5">to double</font><font color="#CCCCCC"> click on that and</font><font color="#E5E5E5"> Ida has gone</font>

409
00:19:39,679 --> 00:19:42,830
through and done a couple of things<font color="#CCCCCC"> for</font>

410
00:19:40,970 --> 00:19:44,809
me it recognizes<font color="#CCCCCC"> that this is actually</font>

411
00:19:42,830 --> 00:19:48,350
<font color="#E5E5E5">the installation of an exception handler</font>

412
00:19:44,809 --> 00:19:50,509
and I can see here that there are two

413
00:19:48,350 --> 00:19:52,850
handler functions so there's<font color="#E5E5E5"> this</font>

414
00:19:50,509 --> 00:19:54,340
function here and this<font color="#CCCCCC"> function here</font>

415
00:19:52,850 --> 00:19:58,840
that are going to be handling exceptions

416
00:19:54,340 --> 00:20:01,639
for this function if an exception occurs

417
00:19:58,840 --> 00:20:05,389
all right back<font color="#E5E5E5"> off for that for a second</font>

418
00:20:01,640 --> 00:20:09,020
and what I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show you now so this</font>

419
00:20:05,390 --> 00:20:11,960
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the graph view that I to gives you of</font>

420
00:20:09,020 --> 00:20:13,910
the code that<font color="#CCCCCC"> we're looking at for</font><font color="#E5E5E5"> this</font>

421
00:20:11,960 --> 00:20:17,900
specific function by the way so we<font color="#E5E5E5"> were</font>

422
00:20:13,910 --> 00:20:20,120
looking up here and this line of or this

423
00:20:17,900 --> 00:20:23,000
chain of execution is what would

424
00:20:20,120 --> 00:20:24,949
normally be executed what I<font color="#E5E5E5"> de has</font>

425
00:20:23,000 --> 00:20:27,500
identified is that there are exception

426
00:20:24,950 --> 00:20:29,440
handlers so there's<font color="#E5E5E5"> this exception</font>

427
00:20:27,500 --> 00:20:32,360
handler function and<font color="#E5E5E5"> this one</font><font color="#CCCCCC"> over here</font>

428
00:20:29,440 --> 00:20:34,250
two functions that will be called or

429
00:20:32,360 --> 00:20:48,110
could potentially be called if an

430
00:20:34,250 --> 00:20:49,880
exception occurs all right<font color="#E5E5E5"> okay first</font>

431
00:20:48,110 --> 00:20:51,500
thing to point out is the presence of

432
00:20:49,880 --> 00:20:54,530
this get proc address and this one's

433
00:20:51,500 --> 00:20:56,960
kind<font color="#E5E5E5"> of a funny one but as I mentioned</font>

434
00:20:54,530 --> 00:20:58,820
<font color="#E5E5E5">yet proc addresses used at run time to</font>

435
00:20:56,960 --> 00:21:01,490
resolve or find the address of a

436
00:20:58,820 --> 00:21:04,129
function and here get proc address is

437
00:21:01,490 --> 00:21:06,260
being used to find the address for<font color="#CCCCCC"> get</font>

438
00:21:04,130 --> 00:21:09,260
proc address all right kind of humorous

439
00:21:06,260 --> 00:21:11,690
but to tell the truth I don't<font color="#CCCCCC"> I don't</font>

440
00:21:09,260 --> 00:21:17,500
<font color="#E5E5E5">know why they didn't need to just use</font>

441
00:21:11,690 --> 00:21:21,560
the one already resolved but<font color="#E5E5E5"> whatever ok</font>

442
00:21:17,500 --> 00:21:24,140
so now continuing on there's a create

443
00:21:21,560 --> 00:21:26,270
file statement and if you were to go

444
00:21:24,140 --> 00:21:28,930
look up at the window so this

445
00:21:26,270 --> 00:21:31,580
documentation for<font color="#CCCCCC"> windows functions is</font>

446
00:21:28,930 --> 00:21:33,350
msdn if you were to go look up create

447
00:21:31,580 --> 00:21:35,689
file and msdn you would find that that

448
00:21:33,350 --> 00:21:39,469
is actually the function<font color="#CCCCCC"> that is used to</font>

449
00:21:35,690 --> 00:21:43,630
open a file for read or write so it's

450
00:21:39,470 --> 00:21:45,980
<font color="#E5E5E5">not just creating but it could be I</font>

451
00:21:43,630 --> 00:21:52,160
apologize<font color="#E5E5E5"> I wish I could make this a</font>

452
00:21:45,980 --> 00:21:54,950
little bit what you'll see here though

453
00:21:52,160 --> 00:21:57,950
is that there<font color="#E5E5E5"> are multiple pushes with</font>

454
00:21:54,950 --> 00:22:03,070
<font color="#E5E5E5">zero or null sonal is being pushed on</font>

455
00:21:57,950 --> 00:22:08,360
the stack and then a call to create file

456
00:22:03,070 --> 00:22:11,750
so if<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to create a file what's</font>

457
00:22:08,360 --> 00:22:12,300
one of<font color="#E5E5E5"> the things you might expect as an</font>

458
00:22:11,750 --> 00:22:16,650
argument

459
00:22:12,300 --> 00:22:18,810
going in to create<font color="#E5E5E5"> file maybe a file</font>

460
00:22:16,650 --> 00:22:20,490
name right<font color="#E5E5E5"> now that's not a hundred</font>

461
00:22:18,810 --> 00:22:23,370
percent true with this function but a

462
00:22:20,490 --> 00:22:25,470
file name might might be a good thing to

463
00:22:23,370 --> 00:22:28,350
have if you're going to open or create a

464
00:22:25,470 --> 00:22:30,360
file so this function looks a little bit

465
00:22:28,350 --> 00:22:35,129
odd interestingly enough though this

466
00:22:30,360 --> 00:22:38,669
this does not create an exception so

467
00:22:35,130 --> 00:22:43,440
this one goes through just fine i guess

468
00:22:38,670 --> 00:22:49,650
i should demonstrate that so what I'll

469
00:22:43,440 --> 00:22:51,420
do so here in the static analysis tool<font color="#E5E5E5"> I</font>

470
00:22:49,650 --> 00:22:54,090
just want to find the address to go in

471
00:22:51,420 --> 00:22:58,950
my<font color="#CCCCCC"> dynamic analysis tool so I've got the</font>

472
00:22:54,090 --> 00:23:03,179
address now 1f 11-8<font color="#CCCCCC"> a b6 I'm</font><font color="#E5E5E5"> just going</font>

473
00:22:58,950 --> 00:23:11,480
<font color="#CCCCCC">to</font><font color="#E5E5E5"> go there here in alley if I get that</font>

474
00:23:03,180 --> 00:23:11,480
right one if you love you sis<font color="#CCCCCC"> alright so</font>

475
00:23:13,460 --> 00:23:18,000
this is a call<font color="#E5E5E5"> to create file just like</font>

476
00:23:16,410 --> 00:23:20,430
we were looking in the analysis tool<font color="#CCCCCC"> I'm</font>

477
00:23:18,000 --> 00:23:23,460
<font color="#E5E5E5">going to hit f4 and Ollie debug runs to</font>

478
00:23:20,430 --> 00:23:24,780
that line of<font color="#E5E5E5"> code and we're now at that</font>

479
00:23:23,460 --> 00:23:28,530
<font color="#E5E5E5">line of code and then I'm going to step</font>

480
00:23:24,780 --> 00:23:30,210
over that and what<font color="#CCCCCC"> you may or may not</font>

481
00:23:28,530 --> 00:23:32,639
have noticed is that it<font color="#E5E5E5"> went to the next</font>

482
00:23:30,210 --> 00:23:35,610
line of code so in that case an

483
00:23:32,640 --> 00:23:38,550
exception did not occur although there

484
00:23:35,610 --> 00:23:42,090
were bogus or invalid arguments to

485
00:23:38,550 --> 00:23:45,690
create file the the authors of create

486
00:23:42,090 --> 00:23:48,860
file did not cause that circumstance<font color="#E5E5E5"> to</font>

487
00:23:45,690 --> 00:23:52,980
throw an exception so anyhow that's fine

488
00:23:48,860 --> 00:23:58,860
so what what really<font color="#CCCCCC"> is this sample going</font>

489
00:23:52,980 --> 00:24:08,100
to do let's continue looking on and one

490
00:23:58,860 --> 00:24:11,039
thing to<font color="#CCCCCC"> point out is ok so here is</font>

491
00:24:08,100 --> 00:24:13,949
another call another function call this

492
00:24:11,039 --> 00:24:16,799
one is to create process so create

493
00:24:13,950 --> 00:24:19,440
process creates another windows process

494
00:24:16,799 --> 00:24:22,918
right so if I if I in my<font color="#CCCCCC"> code want to</font>

495
00:24:19,440 --> 00:24:25,620
open up command esc<font color="#E5E5E5"> to get a shell to</font>

496
00:24:22,919 --> 00:24:27,570
pipe commands<font color="#E5E5E5"> to legitimately I could</font>

497
00:24:25,620 --> 00:24:29,610
call create process with one of the

498
00:24:27,570 --> 00:24:33,889
arguments pointing to a string with

499
00:24:29,610 --> 00:24:37,350
cmd.exe and it will resolve fine cmd.exe

500
00:24:33,890 --> 00:24:40,610
but again<font color="#E5E5E5"> here this create process has</font>

501
00:24:37,350 --> 00:24:43,799
all null values being pushed into it and

502
00:24:40,610 --> 00:24:56,729
as we'll find when we run to that one

503
00:24:43,799 --> 00:24:59,190
f11<font color="#CCCCCC"> ccc alright so i'm now sitting right</font>

504
00:24:56,730 --> 00:25:02,940
before execution of that command and<font color="#CCCCCC"> i</font>

505
00:24:59,190 --> 00:25:04,590
hit f8 and the screen completely changed

506
00:25:02,940 --> 00:25:08,970
which yeah you probably can't tell very

507
00:25:04,590 --> 00:25:12,360
much so but<font color="#CCCCCC"> i am now sitting far away</font>

508
00:25:08,970 --> 00:25:15,830
memory wise or instruction wise<font color="#E5E5E5"> i'm now</font>

509
00:25:12,360 --> 00:25:18,000
up in<font color="#E5E5E5"> seven Charlie nine where I was</font>

510
00:25:15,830 --> 00:25:21,780
like<font color="#CCCCCC"> a completely different memory</font>

511
00:25:18,000 --> 00:25:24,059
address what's happened here is the

512
00:25:21,780 --> 00:25:27,059
exception has occurred or<font color="#E5E5E5"> an exception</font>

513
00:25:24,059 --> 00:25:30,000
has occurred Mike or Windows has taken

514
00:25:27,059 --> 00:25:31,440
control and is about to hand us off to

515
00:25:30,000 --> 00:25:35,820
one of those installed function

516
00:25:31,440 --> 00:25:39,299
exception handler functions so what<font color="#E5E5E5"> I</font>

517
00:25:35,820 --> 00:25:46,980
need<font color="#CCCCCC"> to do is set some break points on</font>

518
00:25:39,299 --> 00:25:51,990
those addresses one ft 11 c eb + 1 i'm

519
00:25:46,980 --> 00:25:55,230
f11 d 11<font color="#E5E5E5"> and next I'm</font><font color="#CCCCCC"> just going to skip</font>

520
00:25:51,990 --> 00:26:02,220
to the one fu<font color="#CCCCCC"> Levendi love them if I can</font>

521
00:25:55,230 --> 00:26:04,260
get the right all right<font color="#CCCCCC"> okay so i'm</font>

522
00:26:02,220 --> 00:26:06,000
going<font color="#E5E5E5"> to set a breakpoint and for those</font>

523
00:26:04,260 --> 00:26:08,760
<font color="#CCCCCC">who may not know it would it with the</font>

524
00:26:06,000 --> 00:26:11,970
debugger a<font color="#CCCCCC"> break point means when you</font>

525
00:26:08,760 --> 00:26:14,429
reach this line of code actually stop

526
00:26:11,970 --> 00:26:16,620
the debugger from running and give me

527
00:26:14,429 --> 00:26:17,220
<font color="#CCCCCC">back control as the operator of the</font>

528
00:26:16,620 --> 00:26:21,510
debugger

529
00:26:17,220 --> 00:26:24,450
so as the<font color="#CCCCCC"> N so I'm going to</font><font color="#E5E5E5"> do that but</font>

530
00:26:21,510 --> 00:26:27,299
<font color="#E5E5E5">I'm also going to first go and tell</font>

531
00:26:24,450 --> 00:26:31,169
Allie debug to allow these exceptions to

532
00:26:27,299 --> 00:26:35,820
occur so one exception already occurred

533
00:26:31,169 --> 00:26:38,280
in it it stopped outing the portion of

534
00:26:35,820 --> 00:26:41,220
Windows that handles exceptions so I'm

535
00:26:38,280 --> 00:26:45,168
<font color="#CCCCCC">going to allow that and then I'm going</font>

536
00:26:41,220 --> 00:26:49,590
<font color="#CCCCCC">to let the program run continue to run</font>

537
00:26:45,169 --> 00:26:51,870
now<font color="#E5E5E5"> I am back at that the exception</font>

538
00:26:49,590 --> 00:26:55,860
handler function that was installed at

539
00:26:51,870 --> 00:27:01,799
the<font color="#E5E5E5"> very first so I the</font><font color="#CCCCCC"> the code is now</font>

540
00:26:55,860 --> 00:27:11,189
pointing to one fy11 d11 yeah and you

541
00:27:01,799 --> 00:27:14,370
can of course so as you<font color="#E5E5E5"> can see here</font>

542
00:27:11,190 --> 00:27:16,140
when f11 d11 was one of the functions

543
00:27:14,370 --> 00:27:21,989
that was installed as an exception

544
00:27:16,140 --> 00:27:26,240
handler so basically this whole now come

545
00:27:21,990 --> 00:27:30,240
on this whole branch of code over here

546
00:27:26,240 --> 00:27:34,500
on the left it looks like<font color="#E5E5E5"> it</font><font color="#CCCCCC"> does</font>

547
00:27:30,240 --> 00:27:37,230
something but what it does is pretty

548
00:27:34,500 --> 00:27:39,150
much inconsequential and we got down to

549
00:27:37,230 --> 00:27:43,409
<font color="#E5E5E5">this create process that threw an</font>

550
00:27:39,150 --> 00:27:45,630
exception and now I've got execution

551
00:27:43,409 --> 00:27:48,570
over here on this kind of this third

552
00:27:45,630 --> 00:27:52,230
branch so that could throw off some of

553
00:27:48,570 --> 00:27:55,860
your analysis tools for example if this

554
00:27:52,230 --> 00:27:58,350
binary we're running in an automated

555
00:27:55,860 --> 00:28:00,330
analysis environment perhaps<font color="#E5E5E5"> they could</font>

556
00:27:58,350 --> 00:28:02,969
have made<font color="#CCCCCC"> it such that that function the</font>

557
00:28:00,330 --> 00:28:05,490
create process with all Knowles would

558
00:28:02,970 --> 00:28:08,429
have been would have not thrown an

559
00:28:05,490 --> 00:28:09,990
exception so in that case in that invite

560
00:28:08,429 --> 00:28:12,230
in that analysis environment or that

561
00:28:09,990 --> 00:28:14,190
virtualized environment that sandbox

562
00:28:12,230 --> 00:28:16,679
execution would have continued straight

563
00:28:14,190 --> 00:28:18,990
on down that line and the actual

564
00:28:16,679 --> 00:28:21,990
interesting stuff probably would have

565
00:28:18,990 --> 00:28:24,780
never happened so that's just one method

566
00:28:21,990 --> 00:28:30,500
that that now<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> can use to escape</font>

567
00:28:24,780 --> 00:28:30,500
your analysis all right

568
00:28:30,630 --> 00:28:35,070
so now we're over here<font color="#E5E5E5"> in one ft 11 d 11</font>

569
00:28:32,940 --> 00:28:36,330
<font color="#CCCCCC">and</font><font color="#E5E5E5"> one of the one of the things that I</font>

570
00:28:35,070 --> 00:28:40,290
automatically<font color="#E5E5E5"> do when I'm looking at</font>

571
00:28:36,330 --> 00:28:41,879
code I'll look for a call and I'll you

572
00:28:40,290 --> 00:28:45,000
know I'll highlight that because again

573
00:28:41,880 --> 00:28:47,790
as I said a call as pending or calling

574
00:28:45,000 --> 00:28:51,080
another function right calling it's<font color="#E5E5E5"> kind</font>

575
00:28:47,790 --> 00:28:54,629
of<font color="#E5E5E5"> like in your C programming if you do</font>

576
00:28:51,080 --> 00:28:56,820
if you wrote another function add right

577
00:28:54,630 --> 00:29:01,020
now you're adding two integers this is a

578
00:28:56,820 --> 00:29:02,939
call to add so the sorry I apologize

579
00:29:01,020 --> 00:29:07,070
this is<font color="#E5E5E5"> not a call to add but that's as</font>

580
00:29:02,940 --> 00:29:10,350
an example so<font color="#E5E5E5"> I highlight that and I</font>

581
00:29:07,070 --> 00:29:12,929
<font color="#E5E5E5">don't see anything that triggers as a</font>

582
00:29:10,350 --> 00:29:14,699
signature in my mind in this code but I

583
00:29:12,930 --> 00:29:17,850
am interested<font color="#CCCCCC"> in finding out what that</font>

584
00:29:14,700 --> 00:29:22,470
call is<font color="#CCCCCC"> to so you'll see that it's it</font>

585
00:29:17,850 --> 00:29:25,889
unlabeled whereas previously so like

586
00:29:22,470 --> 00:29:28,830
here is a call<font color="#E5E5E5"> to get computer named Ida</font>

587
00:29:25,890 --> 00:29:31,320
pro was able to figure out by the import

588
00:29:28,830 --> 00:29:35,250
table that this<font color="#E5E5E5"> instruction is trying to</font>

589
00:29:31,320 --> 00:29:37,230
call get computer name however this code

590
00:29:35,250 --> 00:29:40,380
over here is called to some memory

591
00:29:37,230 --> 00:29:43,350
address so that is resolved during

592
00:29:40,380 --> 00:29:46,770
runtime something that can port my

593
00:29:43,350 --> 00:29:49,709
static<font color="#E5E5E5"> analysis right I could go and try</font>

594
00:29:46,770 --> 00:29:52,740
to figure<font color="#CCCCCC"> out okay where did this memory</font>

595
00:29:49,710 --> 00:29:55,170
address get populated somewhere

596
00:29:52,740 --> 00:29:58,320
presumably<font color="#CCCCCC"> on that first line of that</font>

597
00:29:55,170 --> 00:30:00,630
first waterfall down where the exception

598
00:29:58,320 --> 00:30:02,580
occurred at the very end presumably this

599
00:30:00,630 --> 00:30:06,450
memory address<font color="#CCCCCC"> Brewers resolved to</font>

600
00:30:02,580 --> 00:30:09,570
something or I can take that one ft 11 d

601
00:30:06,450 --> 00:30:13,050
to e that address and just throw that

602
00:30:09,570 --> 00:30:17,189
say<font color="#E5E5E5"> I want to go there one at ft 11 d to</font>

603
00:30:13,050 --> 00:30:20,700
e so<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> run there I'm going to</font>

604
00:30:17,190 --> 00:30:23,280
run<font color="#E5E5E5"> to it and again you probably can't</font>

605
00:30:20,700 --> 00:30:27,240
see it but now<font color="#E5E5E5"> Ollie debug has resolved</font>

606
00:30:23,280 --> 00:30:31,290
where that address points to it says<font color="#CCCCCC"> RTL</font>

607
00:30:27,240 --> 00:30:33,630
decompress buffer so again I could<font color="#E5E5E5"> have</font>

608
00:30:31,290 --> 00:30:36,600
<font color="#E5E5E5">SAT and figured it out in ida or maybe I</font>

609
00:30:33,630 --> 00:30:39,060
couldn't have I don't know but uh<font color="#E5E5E5"> Ollie</font>

610
00:30:36,600 --> 00:30:40,889
allows me to run or a debugger allows me

611
00:30:39,060 --> 00:30:43,290
to run to that point and take advantage

612
00:30:40,890 --> 00:30:46,430
<font color="#E5E5E5">of the fact that it is running</font>

613
00:30:43,290 --> 00:30:48,120
um now again<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to do that smart</font>

614
00:30:46,430 --> 00:30:51,060
wisely right you have<font color="#CCCCCC"> to have some</font>

615
00:30:48,120 --> 00:30:52,139
experience there because otherwise you

616
00:30:51,060 --> 00:30:53,580
would have just ran down that first

617
00:30:52,140 --> 00:30:56,190
chain and you would have<font color="#E5E5E5"> missed it but</font>

618
00:30:53,580 --> 00:30:57,949
anyhow this<font color="#CCCCCC"> RTL decompressed buffer it's</font>

619
00:30:56,190 --> 00:31:01,440
pretty straightforward what it does

620
00:30:57,950 --> 00:31:05,670
takes<font color="#CCCCCC"> about six arguments so just to be</font>

621
00:31:01,440 --> 00:31:09,710
quick that second argument is where the

622
00:31:05,670 --> 00:31:09,710
buffer is going to be decompressed<font color="#CCCCCC"> too</font>

623
00:31:11,570 --> 00:31:17,939
so just to get there in the future<font color="#CCCCCC"> I</font>

624
00:31:15,830 --> 00:31:19,620
jumped there so that I have a reference

625
00:31:17,940 --> 00:31:22,410
you<font color="#CCCCCC"> can see it's all empty it's all</font>

626
00:31:19,620 --> 00:31:24,989
zeros if you can see and then the other

627
00:31:22,410 --> 00:31:26,700
<font color="#CCCCCC">thing that it's the other interesting</font>

628
00:31:24,990 --> 00:31:32,490
argument to that decompressed buffer is

629
00:31:26,700 --> 00:31:35,040
this this<font color="#E5E5E5"> value where the uncompressed</font>

630
00:31:32,490 --> 00:31:38,910
fun compressed memory size will be

631
00:31:35,040 --> 00:31:42,899
<font color="#E5E5E5">placed so once once the rtl decompressed</font>

632
00:31:38,910 --> 00:31:44,670
buffer has ran that decompressed data

633
00:31:42,900 --> 00:31:47,280
what is the size of it that will be

634
00:31:44,670 --> 00:31:51,120
placed here at<font color="#E5E5E5"> this memory location so</font>

635
00:31:47,280 --> 00:31:52,889
let<font color="#E5E5E5"> me make sure I'm there</font><font color="#CCCCCC"> okay so then</font>

636
00:31:51,120 --> 00:31:56,040
I'm going<font color="#CCCCCC"> to just let</font><font color="#E5E5E5"> that function</font>

637
00:31:52,890 --> 00:31:57,900
executes its done so and the only thing

638
00:31:56,040 --> 00:31:59,899
that changed is this<font color="#CCCCCC"> 0 Charlie right</font>

639
00:31:57,900 --> 00:32:03,300
there which you have no chance of seeing

640
00:31:59,900 --> 00:32:06,840
so it's<font color="#E5E5E5"> the size of the decompressed</font>

641
00:32:03,300 --> 00:32:09,360
executable but if I<font color="#CCCCCC"> go back over to the</font>

642
00:32:06,840 --> 00:32:12,360
memory that the decompressed buffer<font color="#E5E5E5"> was</font>

643
00:32:09,360 --> 00:32:18,389
to go<font color="#E5E5E5"> to I see another Windows</font>

644
00:32:12,360 --> 00:32:21,540
executable and Z so what I'm going to do

645
00:32:18,390 --> 00:32:25,340
is take<font color="#E5E5E5"> that file or take that memory</font>

646
00:32:21,540 --> 00:32:25,340
and I'm going<font color="#E5E5E5"> to save it out to a file</font>

647
00:32:30,590 --> 00:32:39,629
and throw that<font color="#E5E5E5"> into explore real quick</font>

648
00:32:36,570 --> 00:32:42,360
it is an executable I don't yeah well

649
00:32:39,630 --> 00:32:43,350
excuse me not right here so we could go

650
00:32:42,360 --> 00:32:47,850
through and<font color="#E5E5E5"> we could do the memory</font>

651
00:32:43,350 --> 00:32:50,419
offset but for sake of time I'm<font color="#CCCCCC"> just</font>

652
00:32:47,850 --> 00:32:50,419
going to do

653
00:32:52,789 --> 00:33:03,690
this thing it's that guy so I want<font color="#E5E5E5"> to</font>

654
00:33:01,529 --> 00:33:05,309
take the second stage exit or the second

655
00:33:03,690 --> 00:33:07,830
executable and I want<font color="#E5E5E5"> to be able to</font>

656
00:33:05,309 --> 00:33:11,759
analyze it so I need<font color="#CCCCCC"> to remove all the</font>

657
00:33:07,830 --> 00:33:13,220
junk that was in memory before it that's

658
00:33:11,759 --> 00:33:17,159
<font color="#E5E5E5">all I'm going to be doing here just</font>

659
00:33:13,220 --> 00:33:26,580
deleting that that does not<font color="#CCCCCC"> look like am</font>

660
00:33:17,159 --> 00:33:39,330
I correct xq hold on that one looks a

661
00:33:26,580 --> 00:33:45,210
little more sane me good<font color="#CCCCCC"> alright so I'm</font>

662
00:33:39,330 --> 00:33:48,809
going to save that out throw<font color="#CCCCCC"> that back</font>

663
00:33:45,210 --> 00:33:52,970
in item and just something to mention

664
00:33:48,809 --> 00:33:56,759
this this is a I to demo so it's free

665
00:33:52,970 --> 00:33:58,799
you can get you<font color="#CCCCCC"> know your hands dirty a</font>

666
00:33:56,759 --> 00:33:59,940
little<font color="#E5E5E5"> bit with</font><font color="#CCCCCC"> IDA learn it and see if</font>

667
00:33:58,799 --> 00:34:03,389
it's<font color="#E5E5E5"> something actually that you want to</font>

668
00:33:59,940 --> 00:34:05,519
buy it's<font color="#E5E5E5"> kind of expensive but this even</font>

669
00:34:03,389 --> 00:34:11,250
<font color="#CCCCCC">is demo version does pretty good to</font>

670
00:34:05,519 --> 00:34:12,989
allow you<font color="#E5E5E5"> to analyze network alright so</font>

671
00:34:11,250 --> 00:34:15,839
I've got a<font color="#CCCCCC"> brand new executable to start</font>

672
00:34:12,989 --> 00:34:21,689
kind of all over the process of analysis

673
00:34:15,839 --> 00:34:24,449
right ah there's a lot to it but so I've

674
00:34:21,690 --> 00:34:26,849
kind of gone through it before hand of

675
00:34:24,449 --> 00:34:28,649
course and so I'm skipping down to here

676
00:34:26,849 --> 00:34:31,980
this is again<font color="#CCCCCC"> where get proc address is</font>

677
00:34:28,649 --> 00:34:35,819
being called to<font color="#E5E5E5"> resolve functions that</font>

678
00:34:31,980 --> 00:34:38,579
this sample will use and one of them

679
00:34:35,819 --> 00:34:41,750
that strikes as to malware<font color="#CCCCCC"> in</font><font color="#E5E5E5"> out now</font>

680
00:34:38,579 --> 00:34:44,069
our analyst is this ZW resume thread so

681
00:34:41,750 --> 00:34:46,440
seeing<font color="#E5E5E5"> that I'm going to presume that</font>

682
00:34:44,069 --> 00:34:50,579
this sample is going to start up a new

683
00:34:46,440 --> 00:34:52,440
process suspended and then it's going to

684
00:34:50,579 --> 00:34:54,629
do something<font color="#E5E5E5"> to that new process and</font>

685
00:34:52,440 --> 00:34:58,950
then it's going to resume that process

686
00:34:54,629 --> 00:35:01,618
resume thread doing something to that

687
00:34:58,950 --> 00:35:05,759
process well first actually it's likely

688
00:35:01,619 --> 00:35:07,079
to start a legitimate process so just as

689
00:35:05,760 --> 00:35:09,960
a test to see how well I'm doing

690
00:35:07,079 --> 00:35:14,579
explaining this take a guess at<font color="#CCCCCC"> what</font>

691
00:35:09,960 --> 00:35:18,359
process you think that is<font color="#CCCCCC"> okay at least</font>

692
00:35:14,579 --> 00:35:20,130
<font color="#CCCCCC">someone says okay svchost.exe is the</font>

693
00:35:18,359 --> 00:35:22,790
process that is going to be started

694
00:35:20,130 --> 00:35:25,200
suspended it's going to<font color="#E5E5E5"> be modified</font>

695
00:35:22,790 --> 00:35:28,970
someone else guess what that

696
00:35:25,200 --> 00:35:31,618
modification and a high level might be

697
00:35:28,970 --> 00:35:33,660
could be processed hollowing so it's

698
00:35:31,619 --> 00:35:36,599
going to<font color="#E5E5E5"> do something to inject its code</font>

699
00:35:33,660 --> 00:35:38,759
into that process right so that it looks

700
00:35:36,599 --> 00:35:40,740
like<font color="#E5E5E5"> it's svchost running but it's</font>

701
00:35:38,760 --> 00:35:44,540
actually sure it that's bc house running

702
00:35:40,740 --> 00:35:47,490
with some extra special code so skipping

703
00:35:44,540 --> 00:35:49,619
skipping some of the google the gory

704
00:35:47,490 --> 00:35:52,589
details<font color="#E5E5E5"> i can tell you right here this</font>

705
00:35:49,619 --> 00:35:56,220
function that is being subtracted from

706
00:35:52,589 --> 00:36:00,078
the<font color="#CCCCCC"> eax register yeah lost it well Paris</font>

707
00:35:56,220 --> 00:36:04,680
is what is being injected into svchost

708
00:36:00,079 --> 00:36:09,270
so<font color="#E5E5E5"> I scroll through here looks fairly</font>

709
00:36:04,680 --> 00:36:14,879
cryptic one of the tricks I can<font color="#CCCCCC"> okay so</font>

710
00:36:09,270 --> 00:36:17,009
actually if I if I try to<font color="#E5E5E5"> run this it's</font>

711
00:36:14,880 --> 00:36:19,290
it's very difficult to attach to a

712
00:36:17,010 --> 00:36:22,770
suspended process to attach a debugger

713
00:36:19,290 --> 00:36:24,869
to a specific suspended process and be

714
00:36:22,770 --> 00:36:29,640
able<font color="#E5E5E5"> to take control of it where you</font>

715
00:36:24,869 --> 00:36:33,359
expect to take<font color="#CCCCCC"> control so one tip or one</font>

716
00:36:29,640 --> 00:36:34,890
trick to try is think i'm going<font color="#E5E5E5"> to run</font>

717
00:36:33,359 --> 00:36:37,890
<font color="#E5E5E5">out of this run out of time on</font><font color="#CCCCCC"> this time</font>

718
00:36:34,890 --> 00:36:41,460
and<font color="#E5E5E5"> just explain</font><font color="#CCCCCC"> it what i can do is</font>

719
00:36:37,890 --> 00:36:45,029
take this this function and modify the

720
00:36:41,460 --> 00:36:48,359
memory in<font color="#CCCCCC"> the debugger that that will be</font>

721
00:36:45,030 --> 00:36:51,930
injected into<font color="#E5E5E5"> svchost to basically throw</font>

722
00:36:48,359 --> 00:36:55,589
a little tight loop in it so there's an

723
00:36:51,930 --> 00:36:58,549
instruction<font color="#CCCCCC"> EBF e which is essentially</font>

724
00:36:55,589 --> 00:37:03,049
jump to yourself and<font color="#E5E5E5"> this is Intel x86</font>

725
00:36:58,550 --> 00:37:05,670
jump to that instruction so if I modify

726
00:37:03,050 --> 00:37:08,310
the code that's going to inject this

727
00:37:05,670 --> 00:37:10,079
function into svchost with that instead

728
00:37:08,310 --> 00:37:12,119
of function or instead<font color="#E5E5E5"> of injecting this</font>

729
00:37:10,079 --> 00:37:14,520
function but a<font color="#E5E5E5"> function very much like</font>

730
00:37:12,119 --> 00:37:17,400
it<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> EVF e at the</font><font color="#E5E5E5"> start it's</font>

731
00:37:14,520 --> 00:37:19,460
going<font color="#E5E5E5"> to inject in svchost this code</font>

732
00:37:17,400 --> 00:37:21,840
it's going<font color="#E5E5E5"> to sit there in a tight loop</font>

733
00:37:19,460 --> 00:37:23,190
well assuming<font color="#E5E5E5"> it's going to have that</font>

734
00:37:21,840 --> 00:37:25,200
code sitting there and<font color="#E5E5E5"> then when this</font>

735
00:37:23,190 --> 00:37:26,490
malware gets to the point of resuming

736
00:37:25,200 --> 00:37:28,410
<font color="#E5E5E5">the thread it's going to sit there in a</font>

737
00:37:26,490 --> 00:37:31,200
tight loop and what I can then do is

738
00:37:28,410 --> 00:37:34,470
take the debugger and attached<font color="#CCCCCC"> to the</font>

739
00:37:31,200 --> 00:37:37,279
SBC host that is hogging all of CPU time

740
00:37:34,470 --> 00:37:40,799
because it's sitting in<font color="#E5E5E5"> a tight loop and</font>

741
00:37:37,280 --> 00:37:43,500
once I've attached to it it's no<font color="#E5E5E5"> longer</font>

742
00:37:40,800 --> 00:37:46,920
active at that time then I can step

743
00:37:43,500 --> 00:37:51,090
through the code and actually determine

744
00:37:46,920 --> 00:37:52,410
what's going on and not<font color="#E5E5E5"> very far</font><font color="#CCCCCC"> from it</font>

745
00:37:51,090 --> 00:37:55,530
but I<font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> quite time to show you</font>

746
00:37:52,410 --> 00:37:57,000
so basically that this next executable

747
00:37:55,530 --> 00:38:01,740
if I had done that would allow you to

748
00:37:57,000 --> 00:38:03,390
see the<font color="#E5E5E5"> the user agent string that the</font>

749
00:38:01,740 --> 00:38:04,950
now where is using it would allow you to

750
00:38:03,390 --> 00:38:08,400
see some of the commands that<font color="#E5E5E5"> it expects</font>

751
00:38:04,950 --> 00:38:10,950
to receive it's basically most<font color="#E5E5E5"> of the</font>

752
00:38:08,400 --> 00:38:12,750
way there for analysis at a high level

753
00:38:10,950 --> 00:38:16,859
to be able to know what capabilities it

754
00:38:12,750 --> 00:38:20,130
possesses so anyhow I'm going to cut it

755
00:38:16,860 --> 00:38:21,720
short there any questions from anybody

756
00:38:20,130 --> 00:38:29,400
hopefully this wasn't too much of a mess

757
00:38:21,720 --> 00:38:30,899
but<font color="#CCCCCC"> all right so as far as a malware</font>

758
00:38:29,400 --> 00:38:32,820
analysis just<font color="#E5E5E5"> wanted to point out you</font>

759
00:38:30,900 --> 00:38:35,340
know use use the tools that<font color="#CCCCCC"> are</font>

760
00:38:32,820 --> 00:38:37,170
available<font color="#E5E5E5"> to you there are free tools i</font>

761
00:38:35,340 --> 00:38:40,830
showed you all you debug and i showed

762
00:38:37,170 --> 00:38:42,360
you Ida demo so those tools are<font color="#E5E5E5"> out</font>

763
00:38:40,830 --> 00:38:44,460
there you can<font color="#CCCCCC"> perform some simple</font>

764
00:38:42,360 --> 00:38:45,620
malware analysis these tips and<font color="#E5E5E5"> tricks</font>

765
00:38:44,460 --> 00:38:48,090
are out there<font color="#E5E5E5"> on the internet as well</font>

766
00:38:45,620 --> 00:38:50,660
hopefully this has been helpful and<font color="#E5E5E5"> I</font>

767
00:38:48,090 --> 00:38:50,660
appreciate your time

