1
00:00:01,310 --> 00:00:08,069
<font color="#E5E5E5">alright so this is my presentation so</font>

2
00:00:05,970 --> 00:00:10,559
one thing<font color="#E5E5E5"> I want to say is it bear with</font>

3
00:00:08,069 --> 00:00:11,910
me a little bit<font color="#E5E5E5"> because get you used to</font>

4
00:00:10,559 --> 00:00:14,969
this type of stuff we're going<font color="#E5E5E5"> to have</font>

5
00:00:11,910 --> 00:00:19,800
to go through assembly language and it

6
00:00:14,969 --> 00:00:21,810
is<font color="#CCCCCC"> boring so that's half the</font>

7
00:00:19,800 --> 00:00:26,160
presentation the other<font color="#E5E5E5"> halves really fun</font>

8
00:00:21,810 --> 00:00:28,259
I promise so anyway Who am I you<font color="#E5E5E5"> heard</font>

9
00:00:26,160 --> 00:00:31,500
I'm just a guy who likes security I'm a

10
00:00:28,260 --> 00:00:36,020
PHP Python application developer part of

11
00:00:31,500 --> 00:00:38,850
DC 801 group I also<font color="#E5E5E5"> helped run 801 labs</font>

12
00:00:36,020 --> 00:00:40,649
just a<font color="#E5E5E5"> little quick legal disclaimer I'm</font>

13
00:00:38,850 --> 00:00:44,340
not responsible<font color="#CCCCCC"> for anything dumb you do</font>

14
00:00:40,649 --> 00:00:47,700
because you learned it to me so don't

15
00:00:44,340 --> 00:00:50,760
blow so one thing I wanted<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font>

16
00:00:47,700 --> 00:00:52,949
is that when we think of binaries and we

17
00:00:50,760 --> 00:00:55,468
<font color="#E5E5E5">think of executable files to kind of</font>

18
00:00:52,949 --> 00:00:57,510
think that's it right like<font color="#E5E5E5"> we don't have</font>

19
00:00:55,469 --> 00:00:59,219
<font color="#E5E5E5">the source code we don't have any of the</font>

20
00:00:57,510 --> 00:01:01,980
<font color="#E5E5E5">documentation we have all we have is</font>

21
00:00:59,219 --> 00:01:03,660
this binary well we're just<font color="#E5E5E5"> pretty much</font>

22
00:01:01,980 --> 00:01:07,289
stuck and there's nothing that we did

23
00:01:03,660 --> 00:01:09,210
and that<font color="#E5E5E5"> sent you know there</font><font color="#CCCCCC"> is the I</font>

24
00:01:07,290 --> 00:01:11,939
always<font color="#E5E5E5"> love this quote for the matrix is</font>

25
00:01:09,210 --> 00:01:15,570
that there is no<font color="#CCCCCC"> spoon there's only your</font>

26
00:01:11,939 --> 00:01:16,889
own inhibitions or your own perception

27
00:01:15,570 --> 00:01:19,169
of reality that's stopping you from

28
00:01:16,890 --> 00:01:21,450
doing whatever you want to do in our

29
00:01:19,170 --> 00:01:23,159
physical of limitations on computers

30
00:01:21,450 --> 00:01:25,890
what it boils down<font color="#CCCCCC"> to everything is a</font>

31
00:01:23,159 --> 00:01:28,229
file<font color="#CCCCCC"> everything is just</font><font color="#E5E5E5"> data or data</font>

32
00:01:25,890 --> 00:01:33,240
being interpreted by a processor or a

33
00:01:28,229 --> 00:01:34,770
system so<font color="#CCCCCC"> we talked about</font><font color="#E5E5E5"> this a little</font>

34
00:01:33,240 --> 00:01:36,899
bit one of the misconceptions people

35
00:01:34,770 --> 00:01:38,729
think of when they think of software is

36
00:01:36,900 --> 00:01:41,310
just how it's finished when it's in a

37
00:01:38,729 --> 00:01:42,689
binary form I mean this is convenient

38
00:01:41,310 --> 00:01:44,280
<font color="#CCCCCC">for companies to because when they</font>

39
00:01:42,689 --> 00:01:46,919
distribute software like we don't they

40
00:01:44,280 --> 00:01:48,960
expect you to not mess with it there are

41
00:01:46,920 --> 00:01:50,579
techniques and things they can do to

42
00:01:48,960 --> 00:01:52,559
<font color="#E5E5E5">make it more difficult for you to modify</font>

43
00:01:50,579 --> 00:01:55,919
their binaries or modify their software

44
00:01:52,560 --> 00:01:57,090
after sort of being deployed but we're

45
00:01:55,920 --> 00:01:58,020
<font color="#E5E5E5">not</font><font color="#CCCCCC"> going to go into those today</font><font color="#E5E5E5"> we're</font>

46
00:01:57,090 --> 00:02:01,649
just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to give you a</font><font color="#E5E5E5"> brief</font>

47
00:01:58,020 --> 00:02:05,369
introduction on how to modify binaries

48
00:02:01,649 --> 00:02:07,200
and learn some assembly language so a

49
00:02:05,369 --> 00:02:09,090
couple of misconceptions about assembly

50
00:02:07,200 --> 00:02:11,190
language is it's hard to learn yeah it

51
00:02:09,090 --> 00:02:11,640
is difficult but I mean so is any other

52
00:02:11,190 --> 00:02:15,690
pro

53
00:02:11,640 --> 00:02:17,609
language anything that you you know work

54
00:02:15,690 --> 00:02:19,680
hard at eventually<font color="#CCCCCC"> it'll start clicking</font>

55
00:02:17,610 --> 00:02:21,360
there is a<font color="#E5E5E5"> huge learning curve with</font>

56
00:02:19,680 --> 00:02:23,430
assembly language but if you just kind

57
00:02:21,360 --> 00:02:25,110
of sit down and do a little bit every

58
00:02:23,430 --> 00:02:27,870
<font color="#E5E5E5">day maybe half an hour an hour just</font>

59
00:02:25,110 --> 00:02:29,010
reading some of it and learning it you

60
00:02:27,870 --> 00:02:32,060
can kind of get familiar with the

61
00:02:29,010 --> 00:02:35,310
patterns and the concepts and the

62
00:02:32,060 --> 00:02:40,380
<font color="#E5E5E5">understanding that's required to read</font>

63
00:02:35,310 --> 00:02:41,850
assembly and use it so what another

64
00:02:40,380 --> 00:02:44,700
<font color="#E5E5E5">thing is there's you look at the</font>

65
00:02:41,850 --> 00:02:46,940
assembly manual for Intel syntax and the

66
00:02:44,700 --> 00:02:49,890
books are like this big this<font color="#CCCCCC"> is one book</font>

67
00:02:46,940 --> 00:02:51,180
like<font color="#CCCCCC"> Bray Road and brought in the</font><font color="#E5E5E5"> Intel</font>

68
00:02:49,890 --> 00:02:53,070
assembly<font color="#CCCCCC"> Bookman it was like I thought</font>

69
00:02:51,180 --> 00:02:57,150
he brought in like 64 everybody know it

70
00:02:53,070 --> 00:02:59,190
was one book he it was like tomes yeah

71
00:02:57,150 --> 00:03:01,170
<font color="#CCCCCC">it was like this tall I should have</font>

72
00:02:59,190 --> 00:03:03,239
<font color="#E5E5E5">brought it in a bit of good but like all</font>

73
00:03:01,170 --> 00:03:06,149
out of all of that book you only really

74
00:03:03,239 --> 00:03:09,570
need to know 14 instructions<font color="#CCCCCC"> consists of</font>

75
00:03:06,150 --> 00:03:11,910
ninety percent of all code and so once

76
00:03:09,570 --> 00:03:13,920
you've gone about<font color="#E5E5E5"> 20 or 30 instructions</font>

77
00:03:11,910 --> 00:03:15,989
you probably covered every scenario that

78
00:03:13,920 --> 00:03:18,390
<font color="#E5E5E5">you'll encounter with any compiled code</font>

79
00:03:15,989 --> 00:03:19,530
and the<font color="#E5E5E5"> only</font><font color="#CCCCCC"> reason you need this giant</font>

80
00:03:18,390 --> 00:03:21,630
Tommen's if you're<font color="#E5E5E5"> trying to do</font>

81
00:03:19,530 --> 00:03:25,049
something<font color="#E5E5E5"> special or outside of</font><font color="#CCCCCC"> that</font>

82
00:03:21,630 --> 00:03:26,370
realm also in that case when you're

83
00:03:25,049 --> 00:03:28,440
writing assembly assembly you're right

84
00:03:26,370 --> 00:03:30,360
for one architecture does not transfer

85
00:03:28,440 --> 00:03:33,120
to another architecture so if you write

86
00:03:30,360 --> 00:03:34,890
something<font color="#E5E5E5"> in until 86 it's not going to</font>

87
00:03:33,120 --> 00:03:36,630
go to an ARM processor it's not<font color="#E5E5E5"> going to</font>

88
00:03:34,890 --> 00:03:38,910
go to a PowerPC<font color="#CCCCCC"> coming after what</font>

89
00:03:36,630 --> 00:03:39,840
rewrite it for those and that's why

90
00:03:38,910 --> 00:03:41,730
that's one of the reasons why the

91
00:03:39,840 --> 00:03:43,950
compilers were invented is so that<font color="#E5E5E5"> you</font>

92
00:03:41,730 --> 00:03:45,660
could write programs and one language

93
00:03:43,950 --> 00:03:51,030
and it could<font color="#CCCCCC"> be ported to different</font>

94
00:03:45,660 --> 00:03:54,239
architectures so quick introduction into

95
00:03:51,030 --> 00:03:56,370
assembly language it's a completar for

96
00:03:54,239 --> 00:03:58,590
<font color="#E5E5E5">Intel</font><font color="#CCCCCC"> and sembly language and x86 are</font>

97
00:03:56,370 --> 00:04:01,530
going to<font color="#E5E5E5"> talk about 32-bit instruction</font>

98
00:03:58,590 --> 00:04:03,030
set I will talk a little<font color="#CCCCCC"> bit about 64</font>

99
00:04:01,530 --> 00:04:05,400
bit but it's easier to just start with

100
00:04:03,030 --> 00:04:08,850
<font color="#E5E5E5">32-bit and then move up to 64 bit once</font>

101
00:04:05,400 --> 00:04:11,190
<font color="#E5E5E5">the concepts are kind of solidified it's</font>

102
00:04:08,850 --> 00:04:14,130
a like we said it's a complex

103
00:04:11,190 --> 00:04:18,269
instruction set has executable

104
00:04:14,130 --> 00:04:20,099
instructions and assembly directives you

105
00:04:18,269 --> 00:04:22,500
know consists of three types of

106
00:04:20,099 --> 00:04:24,090
statements<font color="#E5E5E5"> there the executable</font>

107
00:04:22,500 --> 00:04:25,680
instruction assembly directive<font color="#E5E5E5"> and then</font>

108
00:04:24,090 --> 00:04:28,628
<font color="#E5E5E5">Mac</font>

109
00:04:25,680 --> 00:04:30,160
so when you start<font color="#E5E5E5"> learning assembly</font>

110
00:04:28,629 --> 00:04:33,729
language the thing that you need<font color="#CCCCCC"> to</font>

111
00:04:30,160 --> 00:04:36,069
memorize pretty much is this chart you

112
00:04:33,729 --> 00:04:38,740
need to be able to go from decimal to

113
00:04:36,069 --> 00:04:40,690
binary to hex now that being said that

114
00:04:38,740 --> 00:04:44,020
<font color="#CCCCCC">doesn't mean oh I have</font><font color="#E5E5E5"> to memorize it</font>

115
00:04:40,690 --> 00:04:45,879
today but after<font color="#CCCCCC"> a while you can</font><font color="#E5E5E5"> do this</font>

116
00:04:44,020 --> 00:04:47,889
enough you will start it'll<font color="#CCCCCC"> just become</font>

117
00:04:45,879 --> 00:04:51,039
easier and easier<font color="#E5E5E5"> to remember all these</font>

118
00:04:47,889 --> 00:04:55,569
things and just being able to be like oh

119
00:04:51,039 --> 00:04:57,669
you know x0 e is 11<font color="#E5E5E5"> I was looking at</font>

120
00:04:55,569 --> 00:04:59,409
<font color="#CCCCCC">that actual specific one the other day</font>

121
00:04:57,669 --> 00:05:01,448
and i was like 'hey yeah that's hex

122
00:04:59,409 --> 00:05:03,430
right because that's 11 like it's<font color="#E5E5E5"> at 11</font>

123
00:05:01,449 --> 00:05:06,610
and<font color="#E5E5E5"> i looked a little weird like yeah it</font>

124
00:05:03,430 --> 00:05:08,909
is 11 that wasn't actually expecting the

125
00:05:06,610 --> 00:05:13,449
value to be 11 but then<font color="#CCCCCC"> i</font><font color="#E5E5E5"> forgot</font><font color="#CCCCCC"> about</font>

126
00:05:08,909 --> 00:05:19,090
the extra space that he has four strings

127
00:05:13,449 --> 00:05:20,710
with the null terminator so it's a<font color="#E5E5E5"> good</font>

128
00:05:19,090 --> 00:05:22,299
idea to start if<font color="#CCCCCC"> you want to really get</font>

129
00:05:20,710 --> 00:05:25,690
into this just<font color="#E5E5E5"> kind of memorize the</font>

130
00:05:22,300 --> 00:05:27,699
conversion and so the other thing<font color="#E5E5E5"> you</font>

131
00:05:25,690 --> 00:05:28,919
need<font color="#E5E5E5"> to take an account is that an</font>

132
00:05:27,699 --> 00:05:30,610
assembly we're going to talk about

133
00:05:28,919 --> 00:05:34,960
binary and we're going to<font color="#E5E5E5"> talk about</font>

134
00:05:30,610 --> 00:05:37,300
bits and bytes and words those are<font color="#E5E5E5"> the</font>

135
00:05:34,960 --> 00:05:39,250
ones that come up a lot and<font color="#CCCCCC"> the thing</font>

136
00:05:37,300 --> 00:05:42,039
the key to remember is that one bit is

137
00:05:39,250 --> 00:05:45,940
just one is one on and off the byte is

138
00:05:42,039 --> 00:05:50,469
eight on and offs so it's eight but one

139
00:05:45,940 --> 00:05:52,479
<font color="#CCCCCC">byte is eight bit one nibble is four</font>

140
00:05:50,469 --> 00:05:54,370
bits but they don't talk about nipples

141
00:05:52,479 --> 00:05:59,169
very much but they do you do work with

142
00:05:54,370 --> 00:06:01,690
nibbles a lot so another thing is so you

143
00:05:59,169 --> 00:06:03,190
have double you can have word and you'll

144
00:06:01,690 --> 00:06:07,479
see double<font color="#CCCCCC"> words so that's just saying</font>

145
00:06:03,190 --> 00:06:12,930
that<font color="#E5E5E5"> you have a word being to bite and</font>

146
00:06:07,479 --> 00:06:17,190
then a double word would be four bytes

147
00:06:12,930 --> 00:06:18,729
making sense so far<font color="#E5E5E5"> pretty basic stuff</font>

148
00:06:17,190 --> 00:06:21,550
next we have in

149
00:06:18,729 --> 00:06:23,020
until syntax and 18t syntax the main

150
00:06:21,550 --> 00:06:24,339
<font color="#CCCCCC">difference between them is just how</font>

151
00:06:23,020 --> 00:06:26,919
their format how the<font color="#E5E5E5"> language is</font>

152
00:06:24,339 --> 00:06:31,860
formatted<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be talking in</font>

153
00:06:26,919 --> 00:06:34,120
<font color="#E5E5E5">Intel syntax today ATT syntax is not</font>

154
00:06:31,860 --> 00:06:37,150
there's not a big difference between

155
00:06:34,120 --> 00:06:39,069
<font color="#E5E5E5">them I mean there's nuances the one</font>

156
00:06:37,150 --> 00:06:41,529
that's confusing is it in reverse order

157
00:06:39,069 --> 00:06:45,520
of<font color="#CCCCCC"> the instruction set so here's just</font>

158
00:06:41,529 --> 00:06:46,949
<font color="#CCCCCC">some simple syntax we'll go over the</font>

159
00:06:45,520 --> 00:06:49,419
instructions in a little bit here but

160
00:06:46,949 --> 00:06:52,210
we're here we're<font color="#CCCCCC"> just moving of</font><font color="#E5E5E5"> the</font>

161
00:06:49,419 --> 00:06:53,859
value of one into an ee x and another

162
00:06:52,210 --> 00:06:56,198
one<font color="#CCCCCC"> here we're moving the valuable act</font>

163
00:06:53,860 --> 00:06:59,349
you see the order is flipped but it's

164
00:06:56,199 --> 00:07:00,460
the<font color="#E5E5E5"> same instruction so just remember if</font>

165
00:06:59,349 --> 00:07:03,009
you're seeing a bunch of dollar signs

166
00:07:00,460 --> 00:07:05,498
and percent signs you're in eighteen t

167
00:07:03,009 --> 00:07:09,789
syntax if you're not you can use<font color="#E5E5E5"> Intel</font>

168
00:07:05,499 --> 00:07:11,979
syntax so a couple important things to

169
00:07:09,789 --> 00:07:14,188
think about with the binaries is the

170
00:07:11,979 --> 00:07:18,370
sections of where the data is located

171
00:07:14,189 --> 00:07:19,990
the data section is where your static

172
00:07:18,370 --> 00:07:21,789
variables are going to be and<font color="#CCCCCC"> everything</font>

173
00:07:19,990 --> 00:07:25,719
that's declared beforehand before you

174
00:07:21,789 --> 00:07:28,029
compile the<font color="#E5E5E5"> BSS section is for declaring</font>

175
00:07:25,719 --> 00:07:29,409
the individual variables and<font color="#CCCCCC"> in the text</font>

176
00:07:28,029 --> 00:07:31,300
section is the important section that's

177
00:07:29,409 --> 00:07:37,449
where the actual instruction code is

178
00:07:31,300 --> 00:07:50,800
located all right we good everybody lost

179
00:07:37,449 --> 00:07:52,089
have questions yeah I haven't<font color="#CCCCCC"> really</font>

180
00:07:50,800 --> 00:07:54,599
looked because<font color="#E5E5E5"> I haven't</font><font color="#CCCCCC"> been really</font>

181
00:07:52,089 --> 00:07:57,009
important so far to me but I believe

182
00:07:54,599 --> 00:07:59,110
<font color="#CCCCCC">that that section just</font><font color="#E5E5E5"> has the</font>

183
00:07:57,009 --> 00:08:02,620
<font color="#CCCCCC">Declaration and just kind of like a</font>

184
00:07:59,110 --> 00:08:04,689
symbols table that defines<font color="#CCCCCC"> okay this</font>

185
00:08:02,620 --> 00:08:07,149
very you know we say int x equals this

186
00:08:04,689 --> 00:08:08,499
you know it's defined here and then you

187
00:08:07,149 --> 00:08:15,249
use that<font color="#E5E5E5"> variable throughout your</font>

188
00:08:08,499 --> 00:08:16,779
program so<font color="#E5E5E5"> we have registers</font><font color="#CCCCCC"> the</font>

189
00:08:15,249 --> 00:08:18,849
registers are kind of the<font color="#E5E5E5"> heart of</font>

190
00:08:16,779 --> 00:08:22,029
assembly language and in every register

191
00:08:18,849 --> 00:08:24,069
kind of has a special purpose and this

192
00:08:22,029 --> 00:08:26,439
purpose is arbitrary it's basically just

193
00:08:24,069 --> 00:08:27,669
whatever you know whoever the Intel

194
00:08:26,439 --> 00:08:29,589
designer decided that's what we're going

195
00:08:27,669 --> 00:08:30,729
to use<font color="#CCCCCC"> this register for they're all</font>

196
00:08:29,589 --> 00:08:33,760
technically this

197
00:08:30,729 --> 00:08:36,848
physical hardware and they're just

198
00:08:33,760 --> 00:08:40,689
<font color="#E5E5E5">different sections of the CPU</font><font color="#CCCCCC"> that do</font>

199
00:08:36,849 --> 00:08:43,089
the store data and one of the popular

200
00:08:40,690 --> 00:08:46,870
ones is a exe X is always<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be</font>

201
00:08:43,089 --> 00:08:50,290
the return register so later we'll talk

202
00:08:46,870 --> 00:08:51,850
about calling<font color="#E5E5E5"> procedures but everything</font>

203
00:08:50,290 --> 00:08:53,290
basically when when something called

204
00:08:51,850 --> 00:08:55,870
something and it returned that's going

205
00:08:53,290 --> 00:08:57,760
to store EXO it's kind of like the magic

206
00:08:55,870 --> 00:08:59,199
box where all your<font color="#CCCCCC"> whatever you're</font>

207
00:08:57,760 --> 00:09:02,589
expecting something for something<font color="#E5E5E5"> you</font>

208
00:08:59,199 --> 00:09:05,290
call that's where it's going to be<font color="#CCCCCC"> ebx</font>

209
00:09:02,589 --> 00:09:07,180
being the base pointer ECX is used for

210
00:09:05,290 --> 00:09:08,620
counting and looping is like<font color="#E5E5E5"> I said</font>

211
00:09:07,180 --> 00:09:11,800
these<font color="#CCCCCC"> are just general conventions</font>

212
00:09:08,620 --> 00:09:13,240
there's nothing enforcing this but what

213
00:09:11,800 --> 00:09:14,439
it's did what they're saying is that

214
00:09:13,240 --> 00:09:16,510
when you're writing code and you're

215
00:09:14,440 --> 00:09:18,639
<font color="#E5E5E5">doing some looping or operations you</font>

216
00:09:16,510 --> 00:09:23,410
should you<font color="#CCCCCC"> know you EDX is a recommended</font>

217
00:09:18,639 --> 00:09:24,699
<font color="#E5E5E5">one to use EDX for</font><font color="#CCCCCC"> i/o pointers EDS I</font>

218
00:09:23,410 --> 00:09:28,540
for source pointing for string

219
00:09:24,699 --> 00:09:31,329
operations EDI for destination pointer

220
00:09:28,540 --> 00:09:34,269
<font color="#CCCCCC">of the string operations and then so ESP</font>

221
00:09:31,329 --> 00:09:37,060
and EVP IP these are important because

222
00:09:34,269 --> 00:09:40,180
they deal with the execution<font color="#E5E5E5"> flow of</font>

223
00:09:37,060 --> 00:09:42,219
<font color="#E5E5E5">your application so ESP is a stack</font>

224
00:09:40,180 --> 00:09:43,569
<font color="#E5E5E5">pointer it basically points to the stack</font>

225
00:09:42,220 --> 00:09:46,750
will talk about the stack in just a

226
00:09:43,569 --> 00:09:49,959
little bit<font color="#CCCCCC"> ABVP is the stack frame base</font>

227
00:09:46,750 --> 00:09:51,190
pointer so it's kind of the will talk

228
00:09:49,959 --> 00:09:52,930
about the stack<font color="#E5E5E5"> we'll go over that a</font>

229
00:09:51,190 --> 00:09:56,230
little bit the EP is a cool one because

230
00:09:52,930 --> 00:09:58,180
EP is actually the next instruction<font color="#E5E5E5"> so</font>

231
00:09:56,230 --> 00:10:00,130
when a lot of buffer overflows and other

232
00:09:58,180 --> 00:10:02,349
things that<font color="#E5E5E5"> what you want to get control</font>

233
00:10:00,130 --> 00:10:05,939
<font color="#CCCCCC">of the EP if you can get figure out some</font>

234
00:10:02,350 --> 00:10:14,100
way to get your code into egipt can do

235
00:10:05,940 --> 00:10:14,100
exploits do other things that's just

236
00:10:15,630 --> 00:10:21,180
like we said

237
00:10:17,490 --> 00:10:23,550
youtube it registers they are 32 bits

238
00:10:21,180 --> 00:10:30,149
long and 64-bit machines they're 64

239
00:10:23,550 --> 00:10:32,790
bytes<font color="#E5E5E5"> fits so this is kind of a show you</font>

240
00:10:30,149 --> 00:10:36,480
the sizes of each register the art is a

241
00:10:32,790 --> 00:10:38,459
<font color="#E5E5E5">64-bit version so we have eex as the 32</font>

242
00:10:36,480 --> 00:10:41,940
bit and then we can also see references

243
00:10:38,459 --> 00:10:45,180
to the lower versions of memory like aah

244
00:10:41,940 --> 00:10:47,130
and<font color="#CCCCCC"> al here</font><font color="#E5E5E5"> I'm basically that saying is</font>

245
00:10:45,180 --> 00:10:48,810
that we're instead<font color="#E5E5E5"> of looking at the</font>

246
00:10:47,130 --> 00:10:51,870
entire register we're just going to<font color="#E5E5E5"> look</font>

247
00:10:48,810 --> 00:10:52,739
at a small<font color="#E5E5E5"> section of the register here</font>

248
00:10:51,870 --> 00:10:54,959
so we're just<font color="#E5E5E5"> going to look at these</font>

249
00:10:52,740 --> 00:10:58,740
four if<font color="#E5E5E5"> we said al we're going to look</font>

250
00:10:54,959 --> 00:11:00,510
at these first eight that we say 8h

251
00:10:58,740 --> 00:11:05,100
we're going to look at these high that

252
00:11:00,510 --> 00:11:08,100
you know eight from 16 bits and so

253
00:11:05,100 --> 00:11:10,860
another important registers<font color="#E5E5E5"> the flags</font>

254
00:11:08,100 --> 00:11:12,660
register and this basically anytime you

255
00:11:10,860 --> 00:11:15,180
do any operation depending on what that

256
00:11:12,660 --> 00:11:17,779
operation does it will put these bits

257
00:11:15,180 --> 00:11:23,609
and this is important for controlling

258
00:11:17,779 --> 00:11:25,700
execution flow we'll talk a little bit

259
00:11:23,610 --> 00:11:28,649
more<font color="#CCCCCC"> about that later so for the stack</font>

260
00:11:25,700 --> 00:11:30,899
the stack<font color="#CCCCCC"> is an area of</font><font color="#E5E5E5"> Rama is used to</font>

261
00:11:28,649 --> 00:11:33,089
store variables and temporary memory

262
00:11:30,899 --> 00:11:35,160
this track is created when you when it's

263
00:11:33,089 --> 00:11:37,440
loaded so this<font color="#E5E5E5"> is where you're just</font>

264
00:11:35,160 --> 00:11:39,420
<font color="#E5E5E5">going to push push variables and if you</font>

265
00:11:37,440 --> 00:11:42,180
need to store a register you're going to

266
00:11:39,420 --> 00:11:43,709
be pushing<font color="#CCCCCC"> it on the stack does anybody</font>

267
00:11:42,180 --> 00:11:46,949
have any questions about anything I've

268
00:11:43,709 --> 00:11:53,339
talked so far and confusion want me to

269
00:11:46,950 --> 00:11:56,459
repeat something good<font color="#CCCCCC"> ok so with the</font>

270
00:11:53,339 --> 00:11:58,620
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the stack ESP register is the the</font>

271
00:11:56,459 --> 00:12:01,619
start of the stack frame and EVPs the

272
00:11:58,620 --> 00:12:04,829
register the ends of the stack frame so

273
00:12:01,620 --> 00:12:06,959
<font color="#CCCCCC">ASP is basically it's the stack starts</font>

274
00:12:04,829 --> 00:12:09,750
here and<font color="#E5E5E5"> the EBP is ok we're going to</font>

275
00:12:06,959 --> 00:12:13,680
grow EBP and then we'll also see that

276
00:12:09,750 --> 00:12:19,860
<font color="#E5E5E5">EBP will ESP will get BBB will put the</font>

277
00:12:13,680 --> 00:12:21,359
ESP when we do a stack call so anyway

278
00:12:19,860 --> 00:12:23,610
the stack is<font color="#E5E5E5"> just basically we're going</font>

279
00:12:21,360 --> 00:12:29,040
to push data on and we're going to pop

280
00:12:23,610 --> 00:12:31,019
data out talk about that

281
00:12:29,040 --> 00:12:35,310
so here's kind<font color="#E5E5E5"> of a visualization of the</font>

282
00:12:31,019 --> 00:12:38,430
stack we can see here that anything the

283
00:12:35,310 --> 00:12:39,839
low<font color="#E5E5E5"> EP it's actually going to be the</font>

284
00:12:38,430 --> 00:12:42,660
current stack frame so if you can think

285
00:12:39,839 --> 00:12:44,790
<font color="#E5E5E5">of</font><font color="#CCCCCC"> this as</font><font color="#E5E5E5"> you like your C code this is</font>

286
00:12:42,660 --> 00:12:47,339
where you would initially this<font color="#E5E5E5"> is where</font>

287
00:12:44,790 --> 00:12:48,810
all the local variables in your local C

288
00:12:47,339 --> 00:12:52,519
code or and your function are being

289
00:12:48,810 --> 00:12:55,018
declared and then anything<font color="#E5E5E5"> above here is</font>

290
00:12:52,519 --> 00:12:56,519
anything outside of your function so

291
00:12:55,019 --> 00:12:58,709
this is why functions can get data

292
00:12:56,519 --> 00:13:01,529
outside of themselves<font color="#E5E5E5"> but other</font>

293
00:12:58,709 --> 00:13:02,790
functions can't get data inside of when

294
00:13:01,529 --> 00:13:04,800
they call them<font color="#E5E5E5"> the function they can't</font>

295
00:13:02,790 --> 00:13:06,449
get<font color="#E5E5E5"> that data because every time you do</font>

296
00:13:04,800 --> 00:13:08,310
a function call it's creating this new

297
00:13:06,449 --> 00:13:11,849
stack frame and<font color="#E5E5E5"> it's allocating more</font>

298
00:13:08,310 --> 00:13:13,560
space on the stack and then where we

299
00:13:11,850 --> 00:13:18,319
have kind of a visualizations you won't

300
00:13:13,560 --> 00:13:18,319
have any questions<font color="#E5E5E5"> about this well good</font>

301
00:13:18,680 --> 00:13:25,079
so this is<font color="#CCCCCC"> a common section of a</font>

302
00:13:23,269 --> 00:13:26,970
assembly language that you're<font color="#E5E5E5"> going to</font>

303
00:13:25,079 --> 00:13:30,060
see a lot<font color="#E5E5E5"> when</font><font color="#CCCCCC"> a stack frame is called</font>

304
00:13:26,970 --> 00:13:32,130
and so<font color="#CCCCCC"> basically we have</font><font color="#E5E5E5"> this function</font>

305
00:13:30,060 --> 00:13:33,779
called test and then we're going to see

306
00:13:32,130 --> 00:13:35,880
we're going<font color="#CCCCCC"> to push EBP onto the stack</font>

307
00:13:33,779 --> 00:13:39,839
<font color="#E5E5E5">and then we're going to move EBP into</font>

308
00:13:35,880 --> 00:13:41,670
ESP and so you'll<font color="#E5E5E5"> see this every time if</font>

309
00:13:39,839 --> 00:13:44,970
there's a new function called or<font color="#CCCCCC"> anytime</font>

310
00:13:41,670 --> 00:13:46,589
<font color="#CCCCCC">we're doing a stack frame set up and</font>

311
00:13:44,970 --> 00:13:50,220
then another another<font color="#E5E5E5"> thing to kind of</font>

312
00:13:46,589 --> 00:13:52,769
keep in your mind is there's calling

313
00:13:50,220 --> 00:13:55,800
conventions and these can switch so if

314
00:13:52,769 --> 00:14:01,410
you have the<font color="#CCCCCC"> Kali stave registers these</font>

315
00:13:55,800 --> 00:14:02,880
are basically it's that the Kali has to

316
00:14:01,410 --> 00:14:04,439
take care<font color="#E5E5E5"> of all the registers so if</font>

317
00:14:02,880 --> 00:14:05,819
it's<font color="#CCCCCC"> working with data it's got stuff in</font>

318
00:14:04,440 --> 00:14:08,339
<font color="#E5E5E5">the registers it's like I need to call</font>

319
00:14:05,819 --> 00:14:10,769
<font color="#E5E5E5">its function you're using the Kali save</font>

320
00:14:08,339 --> 00:14:13,170
registers<font color="#CCCCCC"> and the collie</font><font color="#E5E5E5"> or the caller</font>

321
00:14:10,769 --> 00:14:16,319
save registers then it's responsible for

322
00:14:13,170 --> 00:14:18,300
taking care of exe DX pushing them on

323
00:14:16,319 --> 00:14:20,790
the stack and then popping them back off

324
00:14:18,300 --> 00:14:22,589
when it returns and then the same for

325
00:14:20,790 --> 00:14:24,990
<font color="#CCCCCC">collie registers where it's like okay I</font>

326
00:14:22,589 --> 00:14:27,449
called you<font color="#E5E5E5"> the colleagues like okay I</font>

327
00:14:24,990 --> 00:14:32,639
need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> take care of all of these things</font>

328
00:14:27,449 --> 00:14:34,800
<font color="#E5E5E5">and then put them back before return</font><font color="#CCCCCC"> all</font>

329
00:14:32,639 --> 00:14:36,209
<font color="#CCCCCC">right so here we're going</font><font color="#E5E5E5"> to start</font>

330
00:14:34,800 --> 00:14:38,120
<font color="#CCCCCC">getting some more the fun stuff so we're</font>

331
00:14:36,209 --> 00:14:40,949
going to learn<font color="#CCCCCC"> 9 instructions today</font>

332
00:14:38,120 --> 00:14:42,089
there's no construction this is a great

333
00:14:40,949 --> 00:14:45,149
instruction if you

334
00:14:42,089 --> 00:14:48,120
to just kind of<font color="#CCCCCC"> override some memory and</font>

335
00:14:45,149 --> 00:14:49,319
you can like if you if you go to us will

336
00:14:48,120 --> 00:14:50,699
show this later but if you go to a

337
00:14:49,319 --> 00:14:52,829
specific point of memory and you can

338
00:14:50,699 --> 00:14:54,689
just knock it<font color="#E5E5E5"> out and so when the</font>

339
00:14:52,829 --> 00:14:56,519
instruction set gets to that section<font color="#E5E5E5"> of</font>

340
00:14:54,689 --> 00:14:58,199
<font color="#E5E5E5">the memory it'll just continue just</font>

341
00:14:56,519 --> 00:15:03,240
doing<font color="#CCCCCC"> nothing and then continue on its</font>

342
00:14:58,199 --> 00:15:04,889
way the call instruction it calls

343
00:15:03,240 --> 00:15:06,540
another section of<font color="#E5E5E5"> code so it's</font>

344
00:15:04,889 --> 00:15:09,389
basically like calling a function so

345
00:15:06,540 --> 00:15:13,439
when you see a call it's going<font color="#E5E5E5"> to go to</font>

346
00:15:09,389 --> 00:15:16,079
a different stack frame and then we have

347
00:15:13,439 --> 00:15:20,879
returned returned to the Mac frame move

348
00:15:16,079 --> 00:15:22,199
push pop subtract add le a is an

349
00:15:20,879 --> 00:15:23,730
interesting<font color="#E5E5E5"> one because</font><font color="#CCCCCC"> it's load</font>

350
00:15:22,199 --> 00:15:26,430
effective address basically it pulls

351
00:15:23,730 --> 00:15:28,290
information out of memory and puts it

352
00:15:26,430 --> 00:15:32,459
into a register or put you can push<font color="#CCCCCC"> it</font>

353
00:15:28,290 --> 00:15:34,680
onto the stag so we have another five

354
00:15:32,459 --> 00:15:36,899
instructions copies the frame pointer

355
00:15:34,680 --> 00:15:40,680
leave copies of frame point of the stack

356
00:15:36,899 --> 00:15:44,610
pointer test so test and compare and

357
00:15:40,680 --> 00:15:47,279
jump<font color="#E5E5E5"> and jump not</font><font color="#CCCCCC"> zero these are these</font>

358
00:15:44,610 --> 00:15:49,649
are your if statements so with these

359
00:15:47,279 --> 00:15:53,249
instructions like<font color="#CCCCCC"> tests you'll see test</font>

360
00:15:49,649 --> 00:15:55,559
<font color="#E5E5E5">exe X you like</font><font color="#CCCCCC"> ok why am i testing</font><font color="#E5E5E5"> the</font>

361
00:15:53,249 --> 00:15:58,110
same register<font color="#CCCCCC"> that seems silly what it's</font>

362
00:15:55,559 --> 00:15:59,969
actually doing is a test doesn't end and

363
00:15:58,110 --> 00:16:02,550
it hands<font color="#E5E5E5"> both of the registers together</font>

364
00:15:59,970 --> 00:16:05,339
to see if they're equal to<font color="#CCCCCC"> zero so you</font>

365
00:16:02,550 --> 00:16:07,559
do a test and then depending on the jump

366
00:16:05,339 --> 00:16:09,420
not<font color="#E5E5E5"> zero let's see if it is zero or if</font>

367
00:16:07,559 --> 00:16:13,110
it's one it'll be returned one if

368
00:16:09,420 --> 00:16:18,800
<font color="#E5E5E5">anything else is in them if it's not the</font>

369
00:16:13,110 --> 00:16:25,589
same brain fart<font color="#CCCCCC"> ok make sense right</font>

370
00:16:18,800 --> 00:16:29,878
question so we've just right there we've

371
00:16:25,589 --> 00:16:32,279
learned you know 14 instructions so you

372
00:16:29,879 --> 00:16:35,220
learn pretty much a good amount of

373
00:16:32,279 --> 00:16:36,779
instructions you need to do just about

374
00:16:35,220 --> 00:16:39,749
anything you want to<font color="#E5E5E5"> do with assembly</font>

375
00:16:36,779 --> 00:16:41,610
language and so I've included the

376
00:16:39,749 --> 00:16:44,910
operation code here because the

377
00:16:41,610 --> 00:16:46,709
operation code is important when you're

378
00:16:44,910 --> 00:16:48,300
actually modifying the binary because

379
00:16:46,709 --> 00:16:51,059
you're<font color="#E5E5E5"> not going to see not you're going</font>

380
00:16:48,300 --> 00:16:52,679
to see 90 and hex and the thing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> when</font>

381
00:16:51,059 --> 00:16:55,560
you're modifying your binary you need to

382
00:16:52,679 --> 00:16:58,319
find the specific code section

383
00:16:55,560 --> 00:16:59,939
and basically<font color="#E5E5E5"> you're going to look at</font>

384
00:16:58,320 --> 00:17:01,800
your disassembly and you're<font color="#E5E5E5"> going to</font>

385
00:16:59,940 --> 00:17:04,290
look<font color="#E5E5E5"> at this hex binary you're going to</font>

386
00:17:01,800 --> 00:17:06,270
say<font color="#CCCCCC"> okay I believe this section is</font>

387
00:17:04,290 --> 00:17:08,280
actually correlated to this instruction

388
00:17:06,270 --> 00:17:12,119
set and<font color="#E5E5E5"> then you go in through and make</font>

389
00:17:08,280 --> 00:17:13,859
your changes just a quick talk on

390
00:17:12,119 --> 00:17:15,989
symbols symbols are basically just a

391
00:17:13,859 --> 00:17:17,280
mapping of the addresses<font color="#E5E5E5"> there's used</font>

392
00:17:15,990 --> 00:17:20,099
during the linking process to resolve

393
00:17:17,280 --> 00:17:21,930
references to functions so basically

394
00:17:20,099 --> 00:17:24,659
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> just kind of something</font><font color="#E5E5E5"> that the</font>

395
00:17:21,930 --> 00:17:27,079
linker uses to say oh when you said test

396
00:17:24,660 --> 00:17:29,850
<font color="#E5E5E5">it's actually did this memory address</font>

397
00:17:27,079 --> 00:17:31,980
you can view the symbols with NM it's a

398
00:17:29,850 --> 00:17:36,689
program that comes installed with GCC

399
00:17:31,980 --> 00:17:40,110
and other<font color="#CCCCCC"> Linux tools another thing that</font>

400
00:17:36,690 --> 00:17:42,690
just kind of<font color="#E5E5E5"> meant mentioned briefly is</font>

401
00:17:40,110 --> 00:17:45,600
the elf instruction executable<font color="#CCCCCC"> linked</font>

402
00:17:42,690 --> 00:17:47,640
file basically<font color="#CCCCCC"> it's just the format that</font>

403
00:17:45,600 --> 00:17:50,659
the binaries in that<font color="#E5E5E5"> Linux can</font>

404
00:17:47,640 --> 00:17:53,400
understand so that<font color="#CCCCCC"> it can execute it</font>

405
00:17:50,660 --> 00:17:55,140
another thing that this quickly glanced

406
00:17:53,400 --> 00:17:56,910
over is<font color="#CCCCCC"> big-endian little</font><font color="#E5E5E5"> endian is</font>

407
00:17:55,140 --> 00:17:59,130
basically the order the order in which

408
00:17:56,910 --> 00:18:02,240
you read the least significant bit and

409
00:17:59,130 --> 00:18:07,080
the most significant bit in this example

410
00:18:02,240 --> 00:18:09,660
<font color="#CCCCCC">0001 is 128 and big</font><font color="#E5E5E5"> endian and little</font>

411
00:18:07,080 --> 00:18:11,730
<font color="#E5E5E5">endian 001 would equal 1 so depending on</font>

412
00:18:09,660 --> 00:18:14,520
<font color="#E5E5E5">your architecture if it's big Indian or</font>

413
00:18:11,730 --> 00:18:23,070
little Indian it's important because you

414
00:18:14,520 --> 00:18:23,950
<font color="#CCCCCC">want to read the the</font><font color="#E5E5E5"> data correctly yeah</font>

415
00:18:23,070 --> 00:18:25,779
so another

416
00:18:23,950 --> 00:18:28,269
a kind<font color="#E5E5E5"> of confusing thing is an Intel</font>

417
00:18:25,779 --> 00:18:30,159
<font color="#E5E5E5">little</font><font color="#CCCCCC"> Indian on registers big</font><font color="#E5E5E5"> Indian</font>

418
00:18:28,269 --> 00:18:32,080
memory so when you're reading memory

419
00:18:30,159 --> 00:18:33,940
it's a big Indian when it's actually

420
00:18:32,080 --> 00:18:36,129
being used in registers<font color="#E5E5E5"> it's little</font>

421
00:18:33,940 --> 00:18:38,139
Indian this is this kind of

422
00:18:36,130 --> 00:18:40,090
visualization the thing that's most

423
00:18:38,139 --> 00:18:44,199
confusing about this is that it's<font color="#E5E5E5"> not</font>

424
00:18:40,090 --> 00:18:47,439
reversing the bits exactly it's

425
00:18:44,200 --> 00:18:51,279
reversing the bite so<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> a being in</font>

426
00:18:47,440 --> 00:18:54,070
hex being one bite isn't reversed but

427
00:18:51,279 --> 00:18:57,730
<font color="#E5E5E5">the order of 0 a and 0 B is reversed as</font>

428
00:18:54,070 --> 00:19:02,428
you can see here all right we got

429
00:18:57,730 --> 00:19:02,429
through<font color="#CCCCCC"> all the boring stuff so good</font>

430
00:19:03,330 --> 00:19:13,389
yeah all right now to the actual meat of

431
00:19:09,519 --> 00:19:16,779
the presentation the fun stuff if you're

432
00:19:13,389 --> 00:19:18,309
<font color="#E5E5E5">still confused I'm sure I probably</font>

433
00:19:16,779 --> 00:19:21,789
screwed something up or said something

434
00:19:18,309 --> 00:19:23,500
incorrectly most of the<font color="#E5E5E5"> stuff I've</font>

435
00:19:21,789 --> 00:19:25,330
learned an open security training they

436
00:19:23,500 --> 00:19:28,000
have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> really great course it's a</font>

437
00:19:25,330 --> 00:19:33,039
<font color="#E5E5E5">two-day course it's all free videos you</font>

438
00:19:28,000 --> 00:19:34,480
can watch on assembly language so you

439
00:19:33,039 --> 00:19:36,309
<font color="#E5E5E5">can just go there and get more</font>

440
00:19:34,480 --> 00:19:38,850
information if you're still confused or

441
00:19:36,309 --> 00:19:41,379
just like i didn't understand anything

442
00:19:38,850 --> 00:19:43,990
it took me<font color="#CCCCCC"> a while to kind of get used</font>

443
00:19:41,380 --> 00:19:46,389
to this stuff so don't you<font color="#E5E5E5"> know if you</font>

444
00:19:43,990 --> 00:19:48,220
if<font color="#CCCCCC"> you feel</font><font color="#E5E5E5"> like ah this might not</font><font color="#CCCCCC"> be</font>

445
00:19:46,389 --> 00:19:50,860
for me just spend this<font color="#CCCCCC"> is one of</font><font color="#E5E5E5"> the</font>

446
00:19:48,220 --> 00:19:53,500
<font color="#E5E5E5">things he's got to spend time on so</font>

447
00:19:50,860 --> 00:19:55,479
quick setup for cali so i did all of

448
00:19:53,500 --> 00:19:57,549
this in cali<font color="#CCCCCC"> i actually ran all these</font>

449
00:19:55,480 --> 00:20:01,799
examples to make sure that what<font color="#CCCCCC"> i</font><font color="#E5E5E5"> was</font>

450
00:19:57,549 --> 00:20:04,629
saying is true did you compile 32 bit

451
00:20:01,799 --> 00:20:08,710
binaries in cali you need to have the

452
00:20:04,630 --> 00:20:11,580
GCC multi lib and then you just compile

453
00:20:08,710 --> 00:20:16,840
m32 there and then<font color="#E5E5E5"> i'll compile a 32 bit</font>

454
00:20:11,580 --> 00:20:19,918
binary and so another kind<font color="#E5E5E5"> of useful</font>

455
00:20:16,840 --> 00:20:21,939
tool to<font color="#CCCCCC"> have as Nazem Nazim's installed</font>

456
00:20:19,919 --> 00:20:23,889
automatically on cali but these are just

457
00:20:21,940 --> 00:20:27,789
<font color="#E5E5E5">some other assemblers if you want to</font>

458
00:20:23,889 --> 00:20:30,729
play around<font color="#E5E5E5"> with them another very</font>

459
00:20:27,789 --> 00:20:32,980
useful tool is object on object dump

460
00:20:30,730 --> 00:20:36,590
basically we'll we'll take the binary

461
00:20:32,980 --> 00:20:39,440
and break it out into a text version and

462
00:20:36,590 --> 00:20:41,570
<font color="#CCCCCC">it's assembly version so you can use</font>

463
00:20:39,440 --> 00:20:43,700
object<font color="#E5E5E5"> done to kind of just break</font>

464
00:20:41,570 --> 00:20:45,200
everything out and then you just take

465
00:20:43,700 --> 00:20:51,799
the sections of code that<font color="#CCCCCC"> you're most</font>

466
00:20:45,200 --> 00:20:53,510
<font color="#E5E5E5">interested in an hour alternatively dump</font>

467
00:20:51,799 --> 00:20:58,418
bin is for windows so you<font color="#E5E5E5"> can use dump</font>

468
00:20:53,510 --> 00:21:02,539
bin to do the same thing as object them

469
00:20:58,419 --> 00:21:04,429
so this<font color="#CCCCCC"> is hello world and assembly so</font>

470
00:21:02,539 --> 00:21:07,480
this is<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> that you need to run</font>

471
00:21:04,429 --> 00:21:09,679
hello<font color="#E5E5E5"> world in the assembly language and</font>

472
00:21:07,480 --> 00:21:12,110
basically all<font color="#E5E5E5"> you do is you have your</font>

473
00:21:09,679 --> 00:21:16,070
start section and<font color="#E5E5E5"> then your</font><font color="#CCCCCC"> globe will</font>

474
00:21:12,110 --> 00:21:18,709
start here your text section your data

475
00:21:16,070 --> 00:21:20,000
section here below<font color="#CCCCCC"> and one this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

476
00:21:18,710 --> 00:21:21,470
little<font color="#E5E5E5"> bit misleading because you're</font>

477
00:21:20,000 --> 00:21:23,659
like oh these these<font color="#CCCCCC"> are instructions</font>

478
00:21:21,470 --> 00:21:25,460
these should correlate to actual binary

479
00:21:23,659 --> 00:21:27,289
instructions there's actually micros in

480
00:21:25,460 --> 00:21:30,770
here that<font color="#CCCCCC"> Nazem understands like this</font>

481
00:21:27,289 --> 00:21:32,870
bottom part here is a micro where it's

482
00:21:30,770 --> 00:21:36,770
actually<font color="#E5E5E5"> going to take the sorry the</font>

483
00:21:32,870 --> 00:21:39,830
<font color="#E5E5E5">length of the DB text hello world and</font>

484
00:21:36,770 --> 00:21:42,279
<font color="#E5E5E5">actually compute that and then stick it</font>

485
00:21:39,830 --> 00:21:45,379
in the barn area which I'll show again

486
00:21:42,279 --> 00:21:48,110
so we just run<font color="#CCCCCC"> Nazem elf hello as one</font>

487
00:21:45,380 --> 00:21:50,620
would give them elf file we<font color="#E5E5E5"> link it with</font>

488
00:21:48,110 --> 00:21:56,418
the linker here we tell it's an elf I

489
00:21:50,620 --> 00:21:58,879
38-6 say hello we have an executable so

490
00:21:56,419 --> 00:22:01,490
let's take<font color="#E5E5E5"> a look at the object dump of</font>

491
00:21:58,880 --> 00:22:04,039
that binary that we just created using

492
00:22:01,490 --> 00:22:05,600
<font color="#CCCCCC">Nazem so as</font><font color="#E5E5E5"> you can see here the</font>

493
00:22:04,039 --> 00:22:08,470
instructions are actually completely

494
00:22:05,600 --> 00:22:12,469
different from<font color="#E5E5E5"> the nasm to instructions</font>

495
00:22:08,470 --> 00:22:14,620
and all we have is<font color="#E5E5E5"> just a move so we're</font>

496
00:22:12,470 --> 00:22:17,809
going to move the value of 11 and<font color="#CCCCCC"> EDX</font>

497
00:22:14,620 --> 00:22:23,389
we're going<font color="#E5E5E5"> to move etx this value into</font>

498
00:22:17,809 --> 00:22:26,240
ECX which this value here of the<font color="#CCCCCC"> 804 900</font>

499
00:22:23,390 --> 00:22:30,080
is the actual address of this text

500
00:22:26,240 --> 00:22:33,950
string and memory so it's basically<font color="#E5E5E5"> just</font>

501
00:22:30,080 --> 00:22:35,899
like<font color="#E5E5E5"> a pointer in C or C++ and then</font>

502
00:22:33,950 --> 00:22:37,899
we're going to<font color="#E5E5E5"> put</font><font color="#CCCCCC"> the value of 4 in ee</font>

503
00:22:35,899 --> 00:22:42,049
x and then we're going<font color="#CCCCCC"> to call this is a</font>

504
00:22:37,899 --> 00:22:44,330
kernel system call when we call<font color="#E5E5E5"> n86 so</font>

505
00:22:42,049 --> 00:22:47,120
what<font color="#CCCCCC"> that does is it calls the kernel</font>

506
00:22:44,330 --> 00:22:49,549
and depending on our registry settings

507
00:22:47,120 --> 00:22:51,169
it's actually going to do different do

508
00:22:49,549 --> 00:22:56,460
different

509
00:22:51,170 --> 00:23:00,510
so this is<font color="#E5E5E5"> that entire hello assembly</font>

510
00:22:56,460 --> 00:23:02,970
language<font color="#CCCCCC"> Nazem kizim assembled binary so</font>

511
00:23:00,510 --> 00:23:07,260
this is you<font color="#E5E5E5"> can visually see you have</font>

512
00:23:02,970 --> 00:23:09,540
seen hello<font color="#E5E5E5"> world and binary or hex I</font>

513
00:23:07,260 --> 00:23:12,000
guess<font color="#E5E5E5"> it's really what it is I should</font>

514
00:23:09,540 --> 00:23:14,700
<font color="#E5E5E5">say</font><font color="#CCCCCC"> so we can see that we see the elf</font>

515
00:23:12,000 --> 00:23:16,650
string up here we have the hello string

516
00:23:14,700 --> 00:23:19,740
we have the text data section the rest

517
00:23:16,650 --> 00:23:25,110
of it's just<font color="#E5E5E5"> pure hex looks like</font>

518
00:23:19,740 --> 00:23:28,200
complete nothing right so let's go back

519
00:23:25,110 --> 00:23:31,169
<font color="#CCCCCC">to that system call so if we're doing</font>

520
00:23:28,200 --> 00:23:34,320
something and see we say sis right we

521
00:23:31,170 --> 00:23:36,450
have a nun site on side int which is the

522
00:23:34,320 --> 00:23:39,570
file descriptors basically the location

523
00:23:36,450 --> 00:23:42,870
the file a constant char which is a

524
00:23:39,570 --> 00:23:45,600
buffer and then the size so in our<font color="#CCCCCC"> Nazem</font>

525
00:23:42,870 --> 00:23:47,669
instructions basically the length with

526
00:23:45,600 --> 00:23:50,520
the third with EDX was the third

527
00:23:47,670 --> 00:23:51,990
argument the text section was a pointer

528
00:23:50,520 --> 00:23:53,820
to the message in the first with the

529
00:23:51,990 --> 00:23:58,110
file hander so are basically saying here

530
00:23:53,820 --> 00:24:00,450
right to file out so our instructions

531
00:23:58,110 --> 00:24:06,620
are here<font color="#CCCCCC"> in assembly and we call we call</font>

532
00:24:00,450 --> 00:24:10,530
this<font color="#CCCCCC"> the system call here in 086 and</font>

533
00:24:06,620 --> 00:24:12,060
let's see back and then of the four was

534
00:24:10,530 --> 00:24:15,480
the<font color="#E5E5E5"> system right so we're saying when</font><font color="#CCCCCC"> we</font>

535
00:24:12,060 --> 00:24:18,419
called in to<font color="#E5E5E5"> 80 and we had a</font><font color="#CCCCCC"> ex set 24</font>

536
00:24:15,480 --> 00:24:19,830
we're calling system call for which

537
00:24:18,420 --> 00:24:23,490
basically says go look in these

538
00:24:19,830 --> 00:24:28,080
registers and then we said use standard

539
00:24:23,490 --> 00:24:30,750
out to right output to the screen then

540
00:24:28,080 --> 00:24:33,510
<font color="#E5E5E5">again</font><font color="#CCCCCC"> here is hello world</font><font color="#E5E5E5"> and Adam you</font>

541
00:24:30,750 --> 00:24:36,120
can use ml 64 which is brought in with

542
00:24:33,510 --> 00:24:43,010
visual studio you can do the hello world

543
00:24:36,120 --> 00:24:50,479
in<font color="#CCCCCC"> windows world well good makin sense</font>

544
00:24:43,010 --> 00:24:53,720
question yeah so

545
00:24:50,480 --> 00:24:55,730
in these registers here we can<font color="#E5E5E5"> see that</font>

546
00:24:53,720 --> 00:24:57,530
these are basically like these are all

547
00:24:55,730 --> 00:25:00,470
the variables that I'm passing to the

548
00:24:57,530 --> 00:25:02,570
function so we're basically instead<font color="#E5E5E5"> of</font>

549
00:25:00,470 --> 00:25:04,520
saying you know writing it out like we

550
00:25:02,570 --> 00:25:06,590
wouldn't see here so we have the C

551
00:25:04,520 --> 00:25:08,450
syntax would say system right on you

552
00:25:06,590 --> 00:25:10,220
know we'd pass in all the function

553
00:25:08,450 --> 00:25:13,340
variables we're just<font color="#E5E5E5"> putting those</font>

554
00:25:10,220 --> 00:25:15,650
values in the respective registers and

555
00:25:13,340 --> 00:25:23,330
then calling<font color="#E5E5E5"> the colonel to actually</font>

556
00:25:15,650 --> 00:25:26,270
execute and<font color="#CCCCCC"> right to the screen okay so</font>

557
00:25:23,330 --> 00:25:29,330
this is a simple C program the hello

558
00:25:26,270 --> 00:25:31,790
world and so this<font color="#CCCCCC"> is an object dump of</font>

559
00:25:29,330 --> 00:25:34,100
that<font color="#E5E5E5"> simple C program and I there's</font>

560
00:25:31,790 --> 00:25:36,918
actually a lot<font color="#E5E5E5"> of stuff</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> GCC</font>

561
00:25:34,100 --> 00:25:38,570
will add to the<font color="#E5E5E5"> binary and so it'll be a</font>

562
00:25:36,919 --> 00:25:41,870
lot longer than this but this<font color="#E5E5E5"> is</font>

563
00:25:38,570 --> 00:25:44,928
<font color="#CCCCCC">basically just the important parts of</font>

564
00:25:41,870 --> 00:25:47,989
<font color="#CCCCCC">the code that I'm highlighting here so</font>

565
00:25:44,929 --> 00:25:49,820
in<font color="#E5E5E5"> Maine Maine eventually gets called so</font>

566
00:25:47,990 --> 00:25:52,790
you always think I comains where

567
00:25:49,820 --> 00:25:54,590
everything starts but actually there's a

568
00:25:52,790 --> 00:25:57,139
bunch of preceding steps and then

569
00:25:54,590 --> 00:25:59,299
<font color="#CCCCCC">eventually it'll get to Maine but that's</font>

570
00:25:57,140 --> 00:26:01,309
basically where your code starts is it

571
00:25:59,299 --> 00:26:03,139
<font color="#E5E5E5">main after it's done all that set up and</font>

572
00:26:01,309 --> 00:26:05,540
all of its management<font color="#E5E5E5"> that's going to do</font>

573
00:26:03,140 --> 00:26:07,040
and so when<font color="#CCCCCC"> we</font><font color="#E5E5E5"> were before we were</font>

574
00:26:05,540 --> 00:26:09,200
talking<font color="#E5E5E5"> about the symbol so when you</font>

575
00:26:07,040 --> 00:26:11,629
when you're starting to do this using

576
00:26:09,200 --> 00:26:13,340
basic binaries you just go and look for

577
00:26:11,630 --> 00:26:14,870
me and you got<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find your starting</font>

578
00:26:13,340 --> 00:26:17,209
point right like<font color="#CCCCCC"> you would with any</font>

579
00:26:14,870 --> 00:26:19,219
program if you had a bunch of source

580
00:26:17,210 --> 00:26:21,110
code and<font color="#CCCCCC"> you were starting to like okay</font>

581
00:26:19,220 --> 00:26:22,970
<font color="#CCCCCC">I</font><font color="#E5E5E5"> need to learn</font><font color="#CCCCCC"> this code you'd say okay</font>

582
00:26:21,110 --> 00:26:25,219
where does<font color="#CCCCCC"> it the execution start what</font>

583
00:26:22,970 --> 00:26:27,230
does it start doing so you go and look

584
00:26:25,220 --> 00:26:29,240
for main and then you can start stepping

585
00:26:27,230 --> 00:26:33,530
through these instructions and going

586
00:26:29,240 --> 00:26:37,190
through<font color="#CCCCCC"> the</font><font color="#E5E5E5"> going through the binary and</font>

587
00:26:33,530 --> 00:26:39,980
kind of reversing it so we'll go over

588
00:26:37,190 --> 00:26:42,440
this really quick so we like we saw

589
00:26:39,980 --> 00:26:45,320
before this is a stack frame set up they

590
00:26:42,440 --> 00:26:47,660
push EBP movie be peed on ESP so these

591
00:26:45,320 --> 00:26:49,549
registers remember they control<font color="#E5E5E5"> where</font>

592
00:26:47,660 --> 00:26:50,960
the beginning<font color="#E5E5E5"> of the frame is and where</font>

593
00:26:49,549 --> 00:26:55,429
the<font color="#E5E5E5"> end of the frame is for this</font>

594
00:26:50,960 --> 00:26:57,710
function we have this area<font color="#E5E5E5"> that</font><font color="#CCCCCC"> grows</font>

595
00:26:55,429 --> 00:26:59,690
and shrinks now when we increase the

596
00:26:57,710 --> 00:27:01,100
stack we're basically declaring

597
00:26:59,690 --> 00:27:02,179
variables so inside your function you

598
00:27:01,100 --> 00:27:04,759
say

599
00:27:02,179 --> 00:27:06,590
x and y you're just going to see<font color="#CCCCCC"> that</font>

600
00:27:04,759 --> 00:27:09,320
the stack it's going to be pushed down

601
00:27:06,590 --> 00:27:12,678
and values will be put in put on the

602
00:27:09,320 --> 00:27:14,840
stack<font color="#E5E5E5"> to represent those variables and</font>

603
00:27:12,679 --> 00:27:16,789
also it also put that data into

604
00:27:14,840 --> 00:27:19,340
registers sometimes if it's just a

605
00:27:16,789 --> 00:27:22,789
temporary variable that's not being used

606
00:27:19,340 --> 00:27:25,789
outside of<font color="#CCCCCC"> the frame so with this we</font>

607
00:27:22,789 --> 00:27:29,419
just<font color="#E5E5E5"> push on the frame or we push EBP</font>

608
00:27:25,789 --> 00:27:32,059
ESP we're going to end ESP with<font color="#CCCCCC"> Deirdre</font>

609
00:27:29,419 --> 00:27:35,029
<font color="#E5E5E5">through F not quite sure what that's</font>

610
00:27:32,059 --> 00:27:38,178
doing there but so you see down here

611
00:27:35,029 --> 00:27:40,159
that we're going to call a test which<font color="#CCCCCC"> is</font>

612
00:27:38,179 --> 00:27:43,399
actually this memory address here so the

613
00:27:40,159 --> 00:27:44,629
symbols are your representation for you

614
00:27:43,399 --> 00:27:46,549
to be able to read this with the

615
00:27:44,629 --> 00:27:47,689
computer just says oh I'm going<font color="#E5E5E5"> to go to</font>

616
00:27:46,549 --> 00:27:51,049
<font color="#E5E5E5">this memory address and i'm going to</font>

617
00:27:47,690 --> 00:27:54,139
start executing this code up here so

618
00:27:51,049 --> 00:27:55,940
then it hits this code area you know

619
00:27:54,139 --> 00:27:57,830
does what's going to do says<font color="#E5E5E5"> okay i'm</font>

620
00:27:55,940 --> 00:28:01,070
going<font color="#E5E5E5"> to print hello world and then</font>

621
00:27:57,830 --> 00:28:02,960
we're going to return beef and so one

622
00:28:01,070 --> 00:28:04,700
thing you can do when you're<font color="#E5E5E5"> doing when</font>

623
00:28:02,960 --> 00:28:06,679
you're doing reversing and you're<font color="#E5E5E5"> just</font>

624
00:28:04,700 --> 00:28:09,019
working a binary you can put in this

625
00:28:06,679 --> 00:28:12,830
easy<font color="#E5E5E5"> to recognize hexadecimal</font>

626
00:28:09,019 --> 00:28:15,379
representations of integers or anything

627
00:28:12,830 --> 00:28:17,269
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the put in beef here and then</font>

628
00:28:15,379 --> 00:28:19,248
<font color="#CCCCCC">i can see beef is actually over here in</font>

629
00:28:17,269 --> 00:28:21,649
this move inscription so when it returns

630
00:28:19,249 --> 00:28:25,220
this function returns it's going<font color="#E5E5E5"> to move</font>

631
00:28:21,649 --> 00:28:27,590
beef into eex this is important because

632
00:28:25,220 --> 00:28:29,600
<font color="#CCCCCC">eex like</font><font color="#E5E5E5"> i said is this the basket where</font>

633
00:28:27,590 --> 00:28:31,970
everything looks when it comes back<font color="#E5E5E5"> for</font>

634
00:28:29,600 --> 00:28:36,559
the function so if this function was int

635
00:28:31,970 --> 00:28:40,389
of type int EXO to return value of

636
00:28:36,559 --> 00:28:43,399
whatever beef would be in decimal form

637
00:28:40,389 --> 00:28:48,168
and so we can see that when we return

638
00:28:43,399 --> 00:28:50,899
main we're returning 0 FF to the

639
00:28:48,169 --> 00:28:52,759
previous function that called main which

640
00:28:50,899 --> 00:28:54,619
so when you you know when<font color="#E5E5E5"> you return you</font>

641
00:28:52,759 --> 00:28:57,320
can have<font color="#CCCCCC"> exit' codes and stuff like that</font>

642
00:28:54,619 --> 00:29:00,980
so<font color="#CCCCCC"> basically you can just see even main</font>

643
00:28:57,320 --> 00:29:04,879
itself put stuff in e x and then returns

644
00:29:00,980 --> 00:29:07,490
back to the main section so one of the

645
00:29:04,879 --> 00:29:11,209
good tools to have when<font color="#E5E5E5"> you're doing</font>

646
00:29:07,490 --> 00:29:13,940
binary analysis is beta a<font color="#E5E5E5"> python</font><font color="#CCCCCC"> exploit</font>

647
00:29:11,210 --> 00:29:15,720
development analysis for gdb one key

648
00:29:13,940 --> 00:29:18,809
thing to<font color="#E5E5E5"> know about</font><font color="#CCCCCC"> pitta is</font>

649
00:29:15,720 --> 00:29:21,809
that it doesn't work with Python 3 and

650
00:29:18,809 --> 00:29:23,610
newer versions of gdb use Python 3 so

651
00:29:21,809 --> 00:29:25,289
when you're installing it it works

652
00:29:23,610 --> 00:29:29,370
<font color="#E5E5E5">really well of</font><font color="#CCCCCC"> calix</font><font color="#E5E5E5"> I think it uses the</font>

653
00:29:25,289 --> 00:29:32,129
older version so<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just get it</font>

654
00:29:29,370 --> 00:29:33,750
<font color="#E5E5E5">installed and run it this is what a pet</font>

655
00:29:32,130 --> 00:29:35,850
it looks like and the great thing about

656
00:29:33,750 --> 00:29:37,710
<font color="#CCCCCC">petta is it gives you a visual</font>

657
00:29:35,850 --> 00:29:39,480
representation of what's actually

658
00:29:37,710 --> 00:29:41,010
happening inside the binary when you're

659
00:29:39,480 --> 00:29:42,929
running it and you're executing it so

660
00:29:41,010 --> 00:29:44,970
you can see here you can<font color="#E5E5E5"> see your stack</font>

661
00:29:42,929 --> 00:29:46,559
down below this<font color="#E5E5E5"> is this is</font><font color="#CCCCCC"> that word</font>

662
00:29:44,970 --> 00:29:49,080
actually<font color="#E5E5E5"> says stack I know it's hard to</font>

663
00:29:46,559 --> 00:29:50,760
<font color="#E5E5E5">read this is just a screenshot</font><font color="#CCCCCC"> and then</font>

664
00:29:49,080 --> 00:29:52,918
here's your code so there's a section of

665
00:29:50,760 --> 00:29:54,360
memory you're working with and then

666
00:29:52,919 --> 00:29:55,890
here's all of your values and all of

667
00:29:54,360 --> 00:29:57,780
your registers if you don't have this

668
00:29:55,890 --> 00:30:01,140
you have to use gdb and gdb is just

669
00:29:57,780 --> 00:30:03,418
account a command line written I believe

670
00:30:01,140 --> 00:30:05,220
mostly by richard stallman and he just

671
00:30:03,419 --> 00:30:08,700
has a command line he like<font color="#E5E5E5"> okay I going</font>

672
00:30:05,220 --> 00:30:11,700
to need to look at EXC type /<font color="#E5E5E5"> xx and</font>

673
00:30:08,700 --> 00:30:13,470
look eex look at the value<font color="#CCCCCC"> here you can</font>

674
00:30:11,700 --> 00:30:15,240
just type context and just give you a

675
00:30:13,470 --> 00:30:20,789
brief overview of<font color="#E5E5E5"> everything that's</font>

676
00:30:15,240 --> 00:30:23,309
going on so quick introduction to gb we

677
00:30:20,789 --> 00:30:24,780
have the run command the break and we

678
00:30:23,309 --> 00:30:27,539
want to set the disassembly flavor

679
00:30:24,780 --> 00:30:31,770
because everything in<font color="#CCCCCC"> Linux is going to</font>

680
00:30:27,539 --> 00:30:34,530
want default to<font color="#E5E5E5"> 18t syntax and are sorry</font>

681
00:30:31,770 --> 00:30:37,500
<font color="#CCCCCC">18t sintac desk so we want</font><font color="#E5E5E5"> to set our</font>

682
00:30:34,530 --> 00:30:38,908
disassembly flavor to Intel we use the

683
00:30:37,500 --> 00:30:42,270
disassembled function to look at the

684
00:30:38,909 --> 00:30:44,880
actual instruction set on the function

685
00:30:42,270 --> 00:30:48,780
or the area<font color="#E5E5E5"> we're looking for we set</font>

686
00:30:44,880 --> 00:30:51,480
breakpoints so we can stop execution do

687
00:30:48,780 --> 00:30:53,610
info registers will tell us<font color="#E5E5E5"> what you</font>

688
00:30:51,480 --> 00:30:55,049
know<font color="#E5E5E5"> the registers are doing info break</font>

689
00:30:53,610 --> 00:30:57,990
points to show this all of our break

690
00:30:55,049 --> 00:31:01,889
points so how many people<font color="#CCCCCC"> here have used</font>

691
00:30:57,990 --> 00:31:03,510
a debugger so<font color="#E5E5E5"> your if you know what</font>

692
00:31:01,890 --> 00:31:06,960
stepping is right you hit a break point

693
00:31:03,510 --> 00:31:08,700
you stop execution stops<font color="#CCCCCC"> okay that's</font>

694
00:31:06,960 --> 00:31:10,530
critical for doing this because if you

695
00:31:08,700 --> 00:31:13,470
run it you<font color="#E5E5E5"> know it's going to go way too</font>

696
00:31:10,530 --> 00:31:18,210
fast for you<font color="#CCCCCC"> to do anything so this is</font>

697
00:31:13,470 --> 00:31:20,070
GD be disassembled main so we say we

698
00:31:18,210 --> 00:31:21,809
want to see what main looks like when

699
00:31:20,070 --> 00:31:23,879
<font color="#E5E5E5">it's disassembled and this little arrow</font>

700
00:31:21,809 --> 00:31:26,610
here is the execution point this<font color="#E5E5E5"> is</font>

701
00:31:23,880 --> 00:31:30,020
<font color="#E5E5E5">basically if you hit a</font><font color="#CCCCCC"> break point this</font>

702
00:31:26,610 --> 00:31:34,250
<font color="#E5E5E5">is where you're stopped</font><font color="#CCCCCC"> and memory</font>

703
00:31:30,020 --> 00:31:37,170
when the info registers info<font color="#CCCCCC"> breakpoints</font>

704
00:31:34,250 --> 00:31:39,540
this is a useful command at the<font color="#E5E5E5"> x /x</font>

705
00:31:37,170 --> 00:31:43,670
basically lets you look<font color="#E5E5E5"> at the register</font>

706
00:31:39,540 --> 00:31:46,470
and binary format or hexadecimal format

707
00:31:43,670 --> 00:31:50,310
then print ax lets you print the actual

708
00:31:46,470 --> 00:31:52,920
value that's stored there and so if it's

709
00:31:50,310 --> 00:31:55,530
a pointer if you do x /x it'll give you

710
00:31:52,920 --> 00:31:57,300
the pointer if you do print / x it will

711
00:31:55,530 --> 00:31:59,670
<font color="#CCCCCC">actually follow the pointer and then</font>

712
00:31:57,300 --> 00:32:00,960
follow the memory to kind of see what if

713
00:31:59,670 --> 00:32:02,820
it's a string or something<font color="#E5E5E5"> it'll fall</font>

714
00:32:00,960 --> 00:32:07,440
out till an old<font color="#CCCCCC"> terminator and give you</font>

715
00:32:02,820 --> 00:32:10,200
all<font color="#E5E5E5"> that information okay so this is our</font>

716
00:32:07,440 --> 00:32:13,560
example program that we're going<font color="#CCCCCC"> to</font>

717
00:32:10,200 --> 00:32:18,630
modify so we're going<font color="#CCCCCC"> to actually modify</font>

718
00:32:13,560 --> 00:32:20,940
some code make some changes and change

719
00:32:18,630 --> 00:32:22,350
how this execution is and so<font color="#CCCCCC"> basically</font>

720
00:32:20,940 --> 00:32:24,870
what this is<font color="#E5E5E5"> we have our test hello</font>

721
00:32:22,350 --> 00:32:27,120
world we have this hidden function which

722
00:32:24,870 --> 00:32:30,300
<font color="#CCCCCC">is not called by main at all it's just</font>

723
00:32:27,120 --> 00:32:32,280
in<font color="#E5E5E5"> the binary and then we're going to</font>

724
00:32:30,300 --> 00:32:33,930
call test we're going<font color="#E5E5E5"> to sleep for 15</font>

725
00:32:32,280 --> 00:32:36,660
seconds and then we're going to compare

726
00:32:33,930 --> 00:32:40,710
<font color="#CCCCCC">rb1 as the variable that we're passing</font>

727
00:32:36,660 --> 00:32:42,900
<font color="#CCCCCC">two main see if</font><font color="#E5E5E5"> it's secret if</font><font color="#CCCCCC"> it's</font>

728
00:32:40,710 --> 00:32:47,160
secret<font color="#CCCCCC"> we know we've got it if it's</font><font color="#E5E5E5"> not</font>

729
00:32:42,900 --> 00:32:51,000
secret sorry you missed it so we compile

730
00:32:47,160 --> 00:32:54,390
it and then we open<font color="#CCCCCC"> it up in gdb and we</font>

731
00:32:51,000 --> 00:32:56,250
do run tests and then we basically what

732
00:32:54,390 --> 00:32:58,350
this does is the run test is going<font color="#E5E5E5"> to</font>

733
00:32:56,250 --> 00:33:01,560
pass that test argument to this binary

734
00:32:58,350 --> 00:33:03,870
is art be one so we say hello<font color="#E5E5E5"> world</font>

735
00:33:01,560 --> 00:33:07,860
sorry you missed it and we say inferior

736
00:33:03,870 --> 00:33:10,010
process exited with<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> 337 which if we</font>

737
00:33:07,860 --> 00:33:20,070
look at the code here<font color="#CCCCCC"> I said oh return</font>

738
00:33:10,010 --> 00:33:21,629
0xff instead of 0 so one one thing<font color="#E5E5E5"> that</font>

739
00:33:20,070 --> 00:33:22,560
kind of gets confusing is like all right

740
00:33:21,630 --> 00:33:24,150
I'm<font color="#E5E5E5"> going to go into the memory I'm</font>

741
00:33:22,560 --> 00:33:27,000
going to change something like oh it

742
00:33:24,150 --> 00:33:28,890
won't let me why well you what the gdb

743
00:33:27,000 --> 00:33:31,440
you can only modify the binary if it's

744
00:33:28,890 --> 00:33:33,630
running in memory so<font color="#CCCCCC"> before you actually</font>

745
00:33:31,440 --> 00:33:35,400
go through and change stuff you have to

746
00:33:33,630 --> 00:33:36,660
<font color="#E5E5E5">set a breakpoint on main or set a</font>

747
00:33:35,400 --> 00:33:41,570
breakpoint in the section that you're

748
00:33:36,660 --> 00:33:44,030
interested in run it and then you can

749
00:33:41,570 --> 00:33:46,580
modify the binary

750
00:33:44,030 --> 00:33:48,960
so here we're going<font color="#E5E5E5"> to break mane and</font>

751
00:33:46,580 --> 00:33:51,870
one other thing is you<font color="#E5E5E5"> can break on</font>

752
00:33:48,960 --> 00:33:53,670
specific areas of<font color="#CCCCCC"> the binary so you know</font>

753
00:33:51,870 --> 00:33:55,679
we saw the disassembled main in the text

754
00:33:53,670 --> 00:34:00,020
section you can see<font color="#E5E5E5"> okay this memory</font>

755
00:33:55,680 --> 00:34:02,010
section over here like this 08 04 a 4 BC

756
00:34:00,020 --> 00:34:04,260
we can say we<font color="#CCCCCC"> can put a</font><font color="#E5E5E5"> breakpoint</font>

757
00:34:02,010 --> 00:34:08,280
specifically on there so we're not going

758
00:34:04,260 --> 00:34:11,280
through all the execution so we

759
00:34:08,280 --> 00:34:15,030
disassemble main and we're going to

760
00:34:11,280 --> 00:34:16,860
modify the binary here so that we<font color="#E5E5E5"> don't</font>

761
00:34:15,030 --> 00:34:18,300
because<font color="#E5E5E5"> the 15 seconds is annoying we</font>

762
00:34:16,860 --> 00:34:21,360
want to change<font color="#E5E5E5"> it to one so we're going</font>

763
00:34:18,300 --> 00:34:27,000
to<font color="#E5E5E5"> just make a very slight small change</font>

764
00:34:21,360 --> 00:34:31,590
to our binary and so you<font color="#E5E5E5"> can see here we</font>

765
00:34:27,000 --> 00:34:34,590
<font color="#CCCCCC">disassembled mate until the left section</font>

766
00:34:31,590 --> 00:34:37,530
with the win for you guys so the first

767
00:34:34,590 --> 00:34:41,010
section over here is going<font color="#CCCCCC"> to be the</font>

768
00:34:37,530 --> 00:34:44,310
before and this<font color="#CCCCCC"> is the after so if you</font>

769
00:34:41,010 --> 00:34:49,590
take<font color="#E5E5E5"> a look we're</font><font color="#CCCCCC"> passing down here</font>

770
00:34:44,310 --> 00:34:52,799
we're passing f2 ESP and if we look just

771
00:34:49,590 --> 00:34:55,740
<font color="#CCCCCC">before we do that or just after</font><font color="#E5E5E5"> we do</font>

772
00:34:52,800 --> 00:34:58,020
that we're calling sleep and so I<font color="#E5E5E5"> wonder</font>

773
00:34:55,739 --> 00:35:00,709
if this variable<font color="#CCCCCC"> is actually controlling</font>

774
00:34:58,020 --> 00:35:03,120
how long we're going to sleep for so

775
00:35:00,710 --> 00:35:04,770
using the set command in the<font color="#E5E5E5"> set command</font>

776
00:35:03,120 --> 00:35:08,940
is where all the power comes in and

777
00:35:04,770 --> 00:35:10,590
modifying the binary with gdb<font color="#E5E5E5"> we call</font>

778
00:35:08,940 --> 00:35:13,560
set we stack all set with put it in

779
00:35:10,590 --> 00:35:17,520
parentheses to put a star we go to this

780
00:35:13,560 --> 00:35:20,029
memory<font color="#E5E5E5"> address over here at the</font><font color="#CCCCCC"> 08 04</font><font color="#E5E5E5"> 84</font>

781
00:35:17,520 --> 00:35:23,580
<font color="#E5E5E5">bc and we say we're going to set u equal</font>

782
00:35:20,030 --> 00:35:30,860
to<font color="#E5E5E5"> c</font><font color="#CCCCCC"> 7 what that's going to do is it's</font>

783
00:35:23,580 --> 00:35:30,860
going to<font color="#CCCCCC"> change the</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> X F 20 x 1</font>

784
00:35:37,869 --> 00:35:44,049
the code we show that ok it's only

785
00:35:39,999 --> 00:35:47,529
sleeping for one second so now<font color="#CCCCCC"> that</font>

786
00:35:44,049 --> 00:35:49,059
we've modified the binary or with<font color="#E5E5E5"> gdb we</font>

787
00:35:47,529 --> 00:35:52,569
want to go through<font color="#E5E5E5"> and actually modify</font>

788
00:35:49,059 --> 00:35:55,150
it with on the hard drive and actually

789
00:35:52,569 --> 00:36:01,599
manipulate the binary there and so what

790
00:35:55,150 --> 00:36:05,499
we're going to do so this<font color="#E5E5E5"> is what the</font>

791
00:36:01,599 --> 00:36:09,849
value was before on the memory<font color="#E5E5E5"> address</font>

792
00:36:05,499 --> 00:36:13,990
at that location so it was 0f 2404 c7

793
00:36:09,849 --> 00:36:16,480
and we might have applied it to<font color="#E5E5E5"> 01 so we</font>

794
00:36:13,990 --> 00:36:21,729
see<font color="#CCCCCC"> that the we're</font><font color="#E5E5E5"> just changing this</font><font color="#CCCCCC"> f</font>

795
00:36:16,480 --> 00:36:25,119
<font color="#CCCCCC">2 a 1 everybody get that make</font><font color="#E5E5E5"> sense very</font>

796
00:36:21,730 --> 00:36:27,069
quick easy change we keep the rest<font color="#E5E5E5"> of it</font>

797
00:36:25,119 --> 00:36:29,289
intact because the rest of this this

798
00:36:27,069 --> 00:36:33,788
information is actually<font color="#E5E5E5"> the hexadecimal</font>

799
00:36:29,289 --> 00:36:38,740
representation of this instruction we

800
00:36:33,789 --> 00:36:41,079
change f21 here we can<font color="#CCCCCC"> use the exam and</font>

801
00:36:38,740 --> 00:36:44,160
just kind of see what portion of memory

802
00:36:41,079 --> 00:36:46,809
does what we do x /<font color="#E5E5E5"> i will show us the</font>

803
00:36:44,160 --> 00:36:48,999
instructions so this is<font color="#E5E5E5"> useful when</font>

804
00:36:46,809 --> 00:36:51,630
you're kind<font color="#E5E5E5"> of developing your you're</font>

805
00:36:48,999 --> 00:36:55,779
modifying modification for your binary

806
00:36:51,630 --> 00:36:57,880
because you can examine it change it a

807
00:36:55,779 --> 00:37:01,180
little bit<font color="#E5E5E5"> and see how what instructions</font>

808
00:36:57,880 --> 00:37:03,249
said it's going<font color="#CCCCCC"> to generate and so once</font>

809
00:37:01,180 --> 00:37:04,899
you've gone through it and gdb you're

810
00:37:03,249 --> 00:37:07,359
going through it in a debugger then you

811
00:37:04,900 --> 00:37:10,210
can go back<font color="#CCCCCC"> and in the binary itself</font>

812
00:37:07,359 --> 00:37:13,779
using them so you use them and<font color="#E5E5E5"> you call</font>

813
00:37:10,210 --> 00:37:16,089
x XD which will<font color="#E5E5E5"> change it to what vex XD</font>

814
00:37:13,779 --> 00:37:16,960
basically does what object dump does but

815
00:37:16,089 --> 00:37:20,739
it gives you<font color="#CCCCCC"> a hexadecimal</font>

816
00:37:16,960 --> 00:37:22,539
representation of the entire binary you

817
00:37:20,739 --> 00:37:24,039
go through and edit it<font color="#E5E5E5"> so you go through</font>

818
00:37:22,539 --> 00:37:27,730
and<font color="#CCCCCC"> find</font><font color="#E5E5E5"> the edit that you want to make</font>

819
00:37:24,039 --> 00:37:30,249
and then you use xxd to retake that

820
00:37:27,730 --> 00:37:31,900
binary so when we do it edit<font color="#CCCCCC"> and x XD</font>

821
00:37:30,249 --> 00:37:34,089
you don't have longer have a binary you

822
00:37:31,900 --> 00:37:36,069
just have a text file and then you need

823
00:37:34,089 --> 00:37:40,749
to run it through back through xxd to

824
00:37:36,069 --> 00:37:42,579
create a binary and then we'll see here

825
00:37:40,749 --> 00:37:44,859
that and we can do a diff to see what

826
00:37:42,579 --> 00:37:46,779
the actual differences are so when

827
00:37:44,859 --> 00:37:48,930
you're in<font color="#E5E5E5"> X XD this</font><font color="#CCCCCC"> is what you're going</font>

828
00:37:46,779 --> 00:37:50,950
to see right<font color="#CCCCCC"> you're going</font><font color="#E5E5E5"> to see a</font>

829
00:37:48,930 --> 00:37:52,100
<font color="#E5E5E5">address here and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> you're just going</font>

830
00:37:50,950 --> 00:37:55,189
to see a<font color="#E5E5E5"> bunch of hex</font>

831
00:37:52,100 --> 00:37:56,960
Group group together and we've made the

832
00:37:55,190 --> 00:38:00,050
so the slight change they've made to the

833
00:37:56,960 --> 00:38:02,720
<font color="#E5E5E5">binaries we've changed this F to a one</font>

834
00:38:00,050 --> 00:38:08,600
and somehow it dropped this<font color="#E5E5E5"> euro a I</font>

835
00:38:02,720 --> 00:38:11,270
don't know why weird so we can<font color="#E5E5E5"> see here</font>

836
00:38:08,600 --> 00:38:14,960
<font color="#E5E5E5">that the just made a slight change to</font>

837
00:38:11,270 --> 00:38:18,980
the binary so we found where this<font color="#E5E5E5"> to 40</font>

838
00:38:14,960 --> 00:38:21,710
ft set<font color="#E5E5E5"> are the c70 44 f correlated in</font>

839
00:38:18,980 --> 00:38:24,470
the actual hex editor and we made the

840
00:38:21,710 --> 00:38:26,000
slight change and then we wrote<font color="#CCCCCC"> it and</font>

841
00:38:24,470 --> 00:38:28,910
we can run it so at that point we're

842
00:38:26,000 --> 00:38:30,320
<font color="#CCCCCC">just changing a slight variable now if</font>

843
00:38:28,910 --> 00:38:33,259
we<font color="#E5E5E5"> get down to if</font><font color="#CCCCCC"> statement so</font><font color="#E5E5E5"> you have</font>

844
00:38:30,320 --> 00:38:36,410
jumps now if you want<font color="#E5E5E5"> to you know change</font>

845
00:38:33,260 --> 00:38:37,730
a jump you can just there's a couple of

846
00:38:36,410 --> 00:38:39,950
<font color="#E5E5E5">things you can do you can try and knock</font>

847
00:38:37,730 --> 00:38:43,040
<font color="#CCCCCC">sly it you can try an op over it or you</font>

848
00:38:39,950 --> 00:38:44,569
can just change the instruction so what

849
00:38:43,040 --> 00:38:46,190
we're going to do next instead of all

850
00:38:44,570 --> 00:38:49,820
you know because let's say we don't<font color="#E5E5E5"> know</font>

851
00:38:46,190 --> 00:38:51,440
secret we're going to change the binary

852
00:38:49,820 --> 00:38:56,240
so that it says<font color="#CCCCCC"> you've got</font><font color="#E5E5E5"> it for</font>

853
00:38:51,440 --> 00:38:59,870
<font color="#CCCCCC">everything that isn't a secret so quick</font>

854
00:38:56,240 --> 00:39:02,689
note on jumps there's all you also see

855
00:38:59,870 --> 00:39:04,040
jump not equal and jumping out 02 i got

856
00:39:02,690 --> 00:39:06,440
these backward they'll have to double

857
00:39:04,040 --> 00:39:09,740
check again<font color="#E5E5E5"> basically just remember for</font>

858
00:39:06,440 --> 00:39:14,030
jump not jay-z and jnz that there are

859
00:39:09,740 --> 00:39:15,890
two names<font color="#E5E5E5"> for the same thing and so what</font>

860
00:39:14,030 --> 00:39:17,770
these jumps do is depending<font color="#CCCCCC"> on the e</font>

861
00:39:15,890 --> 00:39:20,120
flagged if you go back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the e flags</font>

862
00:39:17,770 --> 00:39:22,670
depending on what operation you did

863
00:39:20,120 --> 00:39:24,049
before you're doing the jump you're

864
00:39:22,670 --> 00:39:28,310
going to have flags that are going<font color="#E5E5E5"> to be</font>

865
00:39:24,050 --> 00:39:29,930
set and so to modify the jump we need to

866
00:39:28,310 --> 00:39:34,070
know what flag is going to be said

867
00:39:29,930 --> 00:39:37,220
depending on what situation so here<font color="#CCCCCC"> we</font>

868
00:39:34,070 --> 00:39:39,860
have<font color="#E5E5E5"> jnz and then the opposite is je so</font>

869
00:39:37,220 --> 00:39:43,490
we go through we examine the memory we

870
00:39:39,860 --> 00:39:46,970
see<font color="#E5E5E5"> that the instruction here ends in 74</font>

871
00:39:43,490 --> 00:39:49,939
you know 74 is the opcode for jnz if you

872
00:39:46,970 --> 00:39:56,270
go back earlier in<font color="#E5E5E5"> the slides we</font><font color="#CCCCCC"> changed</font>

873
00:39:49,940 --> 00:39:58,990
74 275 and then now every time we run

874
00:39:56,270 --> 00:40:03,620
the binary dependent no matter what we

875
00:39:58,990 --> 00:40:05,540
put in there it will say you got<font color="#CCCCCC"> it if</font>

876
00:40:03,620 --> 00:40:08,839
we go back here

877
00:40:05,540 --> 00:40:10,640
to the instructions we've now changed

878
00:40:08,840 --> 00:40:13,460
this if statement to say anything<font color="#E5E5E5"> that</font>

879
00:40:10,640 --> 00:40:21,980
isn't secret will actually give us the

880
00:40:13,460 --> 00:40:25,100
you got it string I'm done<font color="#E5E5E5"> okay all</font>

881
00:40:21,980 --> 00:40:27,920
<font color="#E5E5E5">right I am out</font><font color="#CCCCCC"> of time so this</font><font color="#E5E5E5"> talk</font>

882
00:40:25,100 --> 00:40:31,160
really quick about calling hidden that

883
00:40:27,920 --> 00:40:32,960
hidden function I'll publish these

884
00:40:31,160 --> 00:40:34,310
slides you can go over<font color="#CCCCCC"> in more detail</font>

885
00:40:32,960 --> 00:40:36,490
but basically just run these

886
00:40:34,310 --> 00:40:41,000
instructions change<font color="#E5E5E5"> that little section</font>

887
00:40:36,490 --> 00:40:43,220
you can change the code execution with

888
00:40:41,000 --> 00:40:45,560
gdb you can just call the hidden

889
00:40:43,220 --> 00:40:49,580
function itself so you say call and it

890
00:40:45,560 --> 00:40:51,830
will actually run the function so you

891
00:40:49,580 --> 00:40:56,450
can run functions outside<font color="#CCCCCC"> of their</font>

892
00:40:51,830 --> 00:40:58,240
actual neck execution setting so you can

893
00:40:56,450 --> 00:41:00,980
easily see<font color="#E5E5E5"> with just some simple</font>

894
00:40:58,240 --> 00:41:04,819
modifications you can get in there<font color="#CCCCCC"> and</font>

895
00:41:00,980 --> 00:41:06,470
kind<font color="#E5E5E5"> of make changes to binary and then</font>

896
00:41:04,820 --> 00:41:14,800
here's some more references and stuff

897
00:41:06,470 --> 00:41:14,799
you're interested and that is<font color="#E5E5E5"> it</font><font color="#CCCCCC"> okay</font>

