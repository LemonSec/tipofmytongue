1
00:00:01,970 --> 00:00:14,580
even you hear me when I wear this maybe

2
00:00:06,029 --> 00:00:15,780
I<font color="#CCCCCC"> should try giving it with the song no</font>

3
00:00:14,580 --> 00:00:19,439
laughter<font color="#E5E5E5"> people so they were</font>

4
00:00:15,780 --> 00:00:21,859
disappointed don't want to just<font color="#E5E5E5"> put my</font>

5
00:00:19,439 --> 00:00:21,859
fans this year

6
00:00:29,250 --> 00:00:31,310
you

7
00:00:43,540 --> 00:00:45,600
you

8
00:01:00,470 --> 00:01:02,530
you

9
00:01:10,680 --> 00:01:16,960
<font color="#E5E5E5">alright so welcome</font><font color="#CCCCCC"> to fighting hardware</font>

10
00:01:14,200 --> 00:01:18,970
attacks with software if you couldn't

11
00:01:16,960 --> 00:01:20,710
tell I'm dr. unicorn even<font color="#E5E5E5"> little kids</font>

12
00:01:18,970 --> 00:01:22,330
walking on the street<font color="#CCCCCC"> seem to know my</font>

13
00:01:20,710 --> 00:01:26,619
name when I wear this outfit for some

14
00:01:22,330 --> 00:01:28,600
reason but today I'm going to<font color="#CCCCCC"> be going</font>

15
00:01:26,620 --> 00:01:31,120
over several different kinds of hardware

16
00:01:28,600 --> 00:01:32,919
based attacks and then<font color="#E5E5E5"> talking about how</font>

17
00:01:31,120 --> 00:01:35,620
to defend them<font color="#E5E5E5"> and</font><font color="#CCCCCC"> even though they're</font>

18
00:01:32,920 --> 00:01:38,020
fucking attacks I'm going<font color="#E5E5E5"> to focus on</font>

19
00:01:35,620 --> 00:01:40,950
how to defend them with software you

20
00:01:38,020 --> 00:01:44,410
might under our people and<font color="#CCCCCC"> again</font>

21
00:01:40,950 --> 00:01:46,420
blasting your cpu with a laser<font color="#CCCCCC"> but</font>

22
00:01:44,410 --> 00:01:48,580
<font color="#E5E5E5">software the answer to that is that it's</font>

23
00:01:46,420 --> 00:01:51,700
<font color="#CCCCCC">really hard but there's a few</font><font color="#E5E5E5"> tricks</font>

24
00:01:48,580 --> 00:01:54,270
that kind of do it but other kinds of a

25
00:01:51,700 --> 00:01:59,110
lot more<font color="#E5E5E5"> valuable to software solutions</font>

26
00:01:54,270 --> 00:02:00,220
that as we go on and finally but I'm

27
00:01:59,110 --> 00:02:02,200
betting that most of you in here

28
00:02:00,220 --> 00:02:04,000
<font color="#E5E5E5">probably ever going to use any of this</font>

29
00:02:02,200 --> 00:02:05,530
information i'm talking about areas here

30
00:02:04,000 --> 00:02:10,350
because that you think this kind<font color="#E5E5E5"> of</font>

31
00:02:05,530 --> 00:02:10,350
stuff is awesome anyone of that mindset

32
00:02:10,919 --> 00:02:19,510
yep<font color="#CCCCCC"> all right though I I consider myself</font>

33
00:02:15,910 --> 00:02:23,350
a side channel tech hobbyist so I find

34
00:02:19,510 --> 00:02:24,640
ways you can do things<font color="#E5E5E5"> on your own going</font>

35
00:02:23,350 --> 00:02:26,380
to be what I'm going to<font color="#CCCCCC"> go over a bit</font>

36
00:02:24,640 --> 00:02:30,929
about how<font color="#E5E5E5"> you can try some of these</font>

37
00:02:26,380 --> 00:02:30,930
attacks<font color="#CCCCCC"> for yourself all right so</font>

38
00:02:38,310 --> 00:02:44,439
okay we're nearly when<font color="#E5E5E5"> we look at an</font>

39
00:02:43,030 --> 00:02:47,109
encryption function some of the

40
00:02:44,439 --> 00:02:50,769
attackers perspective you think of it as

41
00:02:47,109 --> 00:02:52,900
a function on one in a key may be

42
00:02:50,769 --> 00:02:56,139
possible I mean our plain text maybe

43
00:02:52,900 --> 00:02:57,430
possibly<font color="#E5E5E5"> two with</font><font color="#CCCCCC"> the key but in reality</font>

44
00:02:56,139 --> 00:02:59,530
when you're an attacker you don't

45
00:02:57,430 --> 00:03:02,730
usually have<font color="#CCCCCC"> that key so we take</font><font color="#E5E5E5"> it away</font>

46
00:02:59,530 --> 00:03:10,209
in black box and cuz you just part of it

47
00:03:02,730 --> 00:03:13,120
however and when the and the output of

48
00:03:10,209 --> 00:03:16,239
that<font color="#E5E5E5"> function is our cipher text and as</font>

49
00:03:13,120 --> 00:03:18,340
attackers our goal is to<font color="#CCCCCC"> find a way to</font>

50
00:03:16,239 --> 00:03:21,669
be able to transform a cipher text back

51
00:03:18,340 --> 00:03:24,219
into the<font color="#E5E5E5"> plaintext and there's a way you</font>

52
00:03:21,669 --> 00:03:25,480
can do that but solving a really hard

53
00:03:24,219 --> 00:03:31,239
puzzle<font color="#CCCCCC"> that knowledge</font><font color="#E5E5E5"> is ever figured</font>

54
00:03:25,480 --> 00:03:32,828
out how to solve<font color="#E5E5E5"> and so that's however</font>

55
00:03:31,239 --> 00:03:35,139
if you happen to<font color="#CCCCCC"> have this little key</font>

56
00:03:32,829 --> 00:03:38,859
and it's really<font color="#CCCCCC"> easy to solve it and</font>

57
00:03:35,139 --> 00:03:47,530
probably solve by that so how do we get

58
00:03:38,859 --> 00:03:49,540
that keep<font color="#CCCCCC"> it turns out that it</font><font color="#E5E5E5"> turns out</font>

59
00:03:47,530 --> 00:03:52,930
that this is a actually a really

60
00:03:49,540 --> 00:03:56,108
simplified view of a pictographic

61
00:03:52,930 --> 00:03:58,120
function there's actually more inputs

62
00:03:56,109 --> 00:04:09,000
and outputs here then you're staying on

63
00:03:58,120 --> 00:04:09,000
<font color="#E5E5E5">this display is the mask I'll think</font>

64
00:04:14,849 --> 00:04:21,209
there's actually some unexpected inputs

65
00:04:18,099 --> 00:04:21,209
that we can look at as well

66
00:04:28,510 --> 00:04:36,340
oh wow so anyway so this<font color="#CCCCCC"> is actually</font>

67
00:04:34,600 --> 00:04:39,420
what it<font color="#E5E5E5"> really looks like in practice</font>

68
00:04:36,340 --> 00:04:46,780
you have<font color="#E5E5E5"> a whole bunch of different</font>

69
00:04:39,420 --> 00:04:49,470
unexpected i'm<font color="#E5E5E5"> using this might now okay</font>

70
00:04:46,780 --> 00:04:52,270
<font color="#E5E5E5">alright so there's a whole bunch of</font>

71
00:04:49,470 --> 00:04:53,800
unexpected inputs and outputs that you

72
00:04:52,270 --> 00:04:54,969
don't really<font color="#E5E5E5"> realize when you're just</font>

73
00:04:53,800 --> 00:04:57,810
looking at your function in this

74
00:04:54,970 --> 00:05:01,360
traditional sense for<font color="#E5E5E5"> instance you can</font>

75
00:04:57,810 --> 00:05:03,370
change the voltage when the cpu is

76
00:05:01,360 --> 00:05:05,620
running and that can interfere with<font color="#CCCCCC"> its</font>

77
00:05:03,370 --> 00:05:08,680
execution and causing it to do things

78
00:05:05,620 --> 00:05:14,020
like execute instructions incorrectly or

79
00:05:08,680 --> 00:05:16,360
skip them and on the output side you

80
00:05:14,020 --> 00:05:18,750
have like the power consumption that<font color="#E5E5E5"> the</font>

81
00:05:16,360 --> 00:05:22,150
process takes while it's running and

82
00:05:18,750 --> 00:05:24,940
<font color="#CCCCCC">it's electric fields magnetic fields the</font>

83
00:05:22,150 --> 00:05:27,570
time it takes to run and even audio

84
00:05:24,940 --> 00:05:31,060
emissions and temperature changes and

85
00:05:27,570 --> 00:05:34,270
memory usage and all<font color="#CCCCCC"> these unexpected</font>

86
00:05:31,060 --> 00:05:37,000
outputs if you're sophisticated enough

87
00:05:34,270 --> 00:05:39,460
you can find ways to exploit them to

88
00:05:37,000 --> 00:05:42,040
reveal<font color="#CCCCCC"> secrets like the key that we're</font>

89
00:05:39,460 --> 00:05:44,020
<font color="#E5E5E5">after and really all these different</font>

90
00:05:42,040 --> 00:05:45,850
things<font color="#E5E5E5"> like the magnetic field and such</font>

91
00:05:44,020 --> 00:05:47,799
are part of the environment<font color="#CCCCCC"> that the</font>

92
00:05:45,850 --> 00:05:50,890
processor<font color="#CCCCCC"> is running in so you can kind</font>

93
00:05:47,800 --> 00:05:52,990
of go back<font color="#CCCCCC"> and use those as unexpected</font>

94
00:05:50,890 --> 00:05:56,650
inputs to the processor as well because

95
00:05:52,990 --> 00:05:58,210
they interact with<font color="#CCCCCC"> it right and so when</font>

96
00:05:56,650 --> 00:06:00,010
you look at all of these different

97
00:05:58,210 --> 00:06:02,500
unexpected inputs and outputs and

98
00:06:00,010 --> 00:06:04,420
exploit them we're able to make any

99
00:06:02,500 --> 00:06:08,530
encryption function look like<font color="#CCCCCC"> nothing</font>

100
00:06:04,420 --> 00:06:11,700
more than a white box obfuscation<font color="#E5E5E5"> and we</font>

101
00:06:08,530 --> 00:06:13,809
can get the key out<font color="#E5E5E5"> of it so there's</font>

102
00:06:11,700 --> 00:06:15,849
lots of<font color="#CCCCCC"> different kinds of hardware</font>

103
00:06:13,810 --> 00:06:19,450
texts<font color="#CCCCCC"> I'm organizing them for my</font>

104
00:06:15,850 --> 00:06:22,300
purposes as attacks that exploit our

105
00:06:19,450 --> 00:06:23,680
access to information that<font color="#CCCCCC"> we expect to</font>

106
00:06:22,300 --> 00:06:25,780
<font color="#E5E5E5">be</font><font color="#CCCCCC"> there but we don't expect someone</font>

107
00:06:23,680 --> 00:06:28,930
else to have<font color="#CCCCCC"> access to that something</font>

108
00:06:25,780 --> 00:06:30,669
like that would<font color="#CCCCCC"> be sniffing a bus</font>

109
00:06:28,930 --> 00:06:33,010
connection between your<font color="#E5E5E5"> CPU and memory</font>

110
00:06:30,670 --> 00:06:36,340
for instance<font color="#E5E5E5"> and then there's also a</font>

111
00:06:33,010 --> 00:06:40,000
<font color="#E5E5E5">text that exploit unexpected inputs</font>

112
00:06:36,340 --> 00:06:41,770
those are fault attacks and<font color="#E5E5E5"> example is</font>

113
00:06:40,000 --> 00:06:45,280
<font color="#E5E5E5">like shooting a laser</font>

114
00:06:41,770 --> 00:06:46,568
a chip to cause<font color="#E5E5E5"> the sum of the</font>

115
00:06:45,280 --> 00:06:48,940
transistors to conduct when<font color="#E5E5E5"> they</font>

116
00:06:46,569 --> 00:06:51,870
normally wouldn't you can do things<font color="#E5E5E5"> like</font>

117
00:06:48,940 --> 00:06:54,969
flip bits that way and there's also

118
00:06:51,870 --> 00:06:57,159
attacks that target unexpected outputs

119
00:06:54,970 --> 00:06:58,810
so those<font color="#CCCCCC"> are side channel texts and they</font>

120
00:06:57,159 --> 00:07:05,370
get most<font color="#E5E5E5"> of the attention for a good</font>

121
00:06:58,810 --> 00:07:05,370
reason and you can do cool things like

122
00:07:05,639 --> 00:07:10,840
recover<font color="#E5E5E5"> keystrokes from across the room</font>

123
00:07:08,680 --> 00:07:13,599
by just listening to<font color="#E5E5E5"> the sound of</font>

124
00:07:10,840 --> 00:07:16,750
someone typing and one of my favorite

125
00:07:13,599 --> 00:07:18,280
attacks of all time in a<font color="#E5E5E5"> classic that is</font>

126
00:07:16,750 --> 00:07:23,460
reconstructing images on a computer

127
00:07:18,280 --> 00:07:26,440
<font color="#E5E5E5">monitor from the radiation that it emits</font>

128
00:07:23,460 --> 00:07:29,979
radio waves and here's an example of

129
00:07:26,440 --> 00:07:31,960
that process on<font color="#E5E5E5"> the left you see what is</font>

130
00:07:29,979 --> 00:07:34,568
<font color="#E5E5E5">on a screen and on the right you see</font>

131
00:07:31,960 --> 00:07:39,180
what<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're able to pick up on the</font>

132
00:07:34,569 --> 00:07:42,490
screen from across the room just by

133
00:07:39,180 --> 00:07:46,990
recording the electromagnetic radiation

134
00:07:42,490 --> 00:07:48,759
of<font color="#E5E5E5"> the monitor as it ran</font><font color="#CCCCCC"> okay and if you</font>

135
00:07:46,990 --> 00:07:49,870
want to test this effect out for

136
00:07:48,759 --> 00:07:52,509
yourself there's a program<font color="#E5E5E5"> called</font>

137
00:07:49,870 --> 00:07:54,580
tempest free<font color="#CCCCCC"> Liza that basically turns</font>

138
00:07:52,509 --> 00:07:57,219
your computer monitor into a really

139
00:07:54,580 --> 00:08:00,240
<font color="#E5E5E5">crappy low-grade AM radio station but</font>

140
00:07:57,219 --> 00:08:04,810
it's still fun to play with it some

141
00:08:00,240 --> 00:08:07,360
simple<font color="#E5E5E5"> Linux program</font><font color="#CCCCCC"> okay so out so how</font>

142
00:08:04,810 --> 00:08:11,440
can you<font color="#E5E5E5"> stop this particular attacker</font>

143
00:08:07,360 --> 00:08:14,110
reconstructing a monitor one examples

144
00:08:11,440 --> 00:08:15,789
might think of is<font color="#CCCCCC"> to just shove the</font>

145
00:08:14,110 --> 00:08:18,490
thing in a Faraday cage or maybe you're

146
00:08:15,789 --> 00:08:22,120
a bit more sophisticated<font color="#CCCCCC"> in have special</font>

147
00:08:18,490 --> 00:08:24,969
glass that shields your monitor the idea

148
00:08:22,120 --> 00:08:27,610
<font color="#E5E5E5">is just to block their your emanations</font>

149
00:08:24,969 --> 00:08:29,949
from escaping so<font color="#CCCCCC"> they're all contained</font>

150
00:08:27,610 --> 00:08:32,320
in there another way is you might decide

151
00:08:29,949 --> 00:08:34,719
that you know that your wires can also

152
00:08:32,320 --> 00:08:36,789
conduct signals and so you decide to

153
00:08:34,719 --> 00:08:38,789
shield them and go through them so that

154
00:08:36,789 --> 00:08:41,740
no one can just tap your power line and

155
00:08:38,789 --> 00:08:43,539
be able to<font color="#E5E5E5"> get that signal there or you</font>

156
00:08:41,740 --> 00:08:47,550
can even go<font color="#E5E5E5"> step up and try a full-out</font>

157
00:08:43,539 --> 00:08:52,329
isolation another<font color="#E5E5E5"> approach might be to</font>

158
00:08:47,550 --> 00:08:53,740
get a jammer and have it try to

159
00:08:52,329 --> 00:08:55,239
broadcast a signal at the same

160
00:08:53,740 --> 00:08:58,899
frequencies

161
00:08:55,240 --> 00:09:01,870
<font color="#CCCCCC">she monitors using to broadcast these</font>

162
00:08:58,899 --> 00:09:03,760
unintentional broadcasts and hopefully

163
00:09:01,870 --> 00:09:05,920
that will interfere with an attackers

164
00:09:03,760 --> 00:09:09,100
ability to reconstruct your image but

165
00:09:05,920 --> 00:09:11,860
<font color="#E5E5E5">unless your jammer signal is closely</font>

166
00:09:09,100 --> 00:09:14,050
correlated with<font color="#E5E5E5"> the signal that your</font>

167
00:09:11,860 --> 00:09:16,959
monitor is actually emitting then you

168
00:09:14,050 --> 00:09:18,550
can just average over it and reconstruct

169
00:09:16,959 --> 00:09:22,089
the<font color="#CCCCCC"> image that</font><font color="#E5E5E5"> way so it's not always</font>

170
00:09:18,550 --> 00:09:23,949
effective as simple approach is just to

171
00:09:22,089 --> 00:09:25,450
make sure that if you see anyone with a

172
00:09:23,950 --> 00:09:31,060
weird-looking antenna walking around

173
00:09:25,450 --> 00:09:33,399
that<font color="#E5E5E5"> you ask them to leave and and this</font>

174
00:09:31,060 --> 00:09:35,319
<font color="#E5E5E5">is a clever thing so when you're</font>

175
00:09:33,399 --> 00:09:38,920
reconstructing an image<font color="#E5E5E5"> of a monitor</font>

176
00:09:35,320 --> 00:09:42,360
usually will average over several frames

177
00:09:38,920 --> 00:09:44,529
in order to get a good clear image but

178
00:09:42,360 --> 00:09:46,870
ordinarily your monitor runs in<font color="#E5E5E5"> this</font>

179
00:09:44,529 --> 00:09:50,410
order from from the top left to bottom

180
00:09:46,870 --> 00:09:52,589
right like that but if you randomize the

181
00:09:50,410 --> 00:09:56,740
lines that<font color="#E5E5E5"> are displayed on the screen</font>

182
00:09:52,589 --> 00:09:58,690
then every<font color="#CCCCCC"> time it runs they'll</font><font color="#E5E5E5"> be</font>

183
00:09:56,740 --> 00:10:02,079
averaging a different part of the<font color="#E5E5E5"> screen</font>

184
00:09:58,690 --> 00:10:05,350
if they just average over by looking at

185
00:10:02,079 --> 00:10:08,560
the time it takes to display an entire

186
00:10:05,350 --> 00:10:11,800
image on your screen and that can defeat

187
00:10:08,560 --> 00:10:14,859
this attack and<font color="#E5E5E5"> you might just consider</font>

188
00:10:11,800 --> 00:10:17,109
dumping your CRT monitor because<font color="#CCCCCC"> you</font>

189
00:10:14,860 --> 00:10:19,000
know it's old and crappy and uses a<font color="#E5E5E5"> lot</font>

190
00:10:17,110 --> 00:10:21,459
<font color="#E5E5E5">of voltage for that electron beam that</font>

191
00:10:19,000 --> 00:10:23,410
gets a big leaky signal but it turns out

192
00:10:21,459 --> 00:10:25,959
that your<font color="#E5E5E5"> flat</font><font color="#CCCCCC"> screen monitor is also</font>

193
00:10:23,410 --> 00:10:30,130
are vulnerable<font color="#CCCCCC"> to this attack just not</font>

194
00:10:25,959 --> 00:10:31,899
quite as<font color="#E5E5E5"> bad so so far</font><font color="#CCCCCC"> all these attacks</font>

195
00:10:30,130 --> 00:10:34,060
I mean countermeasures<font color="#E5E5E5"> have one thing in</font>

196
00:10:31,899 --> 00:10:36,570
common and that's that<font color="#E5E5E5"> their hardware</font>

197
00:10:34,060 --> 00:10:39,069
<font color="#E5E5E5">based this</font><font color="#CCCCCC"> talk isn't about hardware</font>

198
00:10:36,570 --> 00:10:40,930
countermeasures it's about software so

199
00:10:39,070 --> 00:10:43,300
how on earth would<font color="#E5E5E5"> you defend against</font>

200
00:10:40,930 --> 00:10:45,939
something<font color="#E5E5E5"> like this at a software level</font>

201
00:10:43,300 --> 00:10:49,439
and that<font color="#CCCCCC"> is a question that I didn't</font>

202
00:10:45,940 --> 00:10:51,399
<font color="#CCCCCC">even think to ask not too long ago and</font>

203
00:10:49,440 --> 00:10:56,350
<font color="#CCCCCC">kind of surprising what the answer is</font>

204
00:10:51,399 --> 00:10:59,470
and that's<font color="#E5E5E5"> that we're so this is an</font>

205
00:10:56,350 --> 00:11:01,420
<font color="#CCCCCC">example of an image that your monitor</font>

206
00:10:59,470 --> 00:11:05,410
might be displaying the two lines there

207
00:11:01,420 --> 00:11:07,870
whenever<font color="#E5E5E5"> you have a white pixel then you</font>

208
00:11:05,410 --> 00:11:09,250
would then that means<font color="#E5E5E5"> that your electron</font>

209
00:11:07,870 --> 00:11:10,420
beam would be active in

210
00:11:09,250 --> 00:11:12,580
shooting at your screen<font color="#E5E5E5"> and then the</font>

211
00:11:10,420 --> 00:11:14,260
black pixels it wouldn't be doing

212
00:11:12,580 --> 00:11:16,660
anything so<font color="#CCCCCC"> you wouldn't be using much</font>

213
00:11:14,260 --> 00:11:18,069
power there and you<font color="#E5E5E5"> can see that it on</font>

214
00:11:16,660 --> 00:11:21,579
the bottom they have a graph showing

215
00:11:18,070 --> 00:11:23,080
this effect turns<font color="#E5E5E5"> out that the signal</font>

216
00:11:21,580 --> 00:11:24,420
that the attacker is going to get<font color="#E5E5E5"> when</font>

217
00:11:23,080 --> 00:11:27,550
they try to pull off this attack is

218
00:11:24,420 --> 00:11:30,910
caused mostly by these sharp changes in

219
00:11:27,550 --> 00:11:35,219
voltage so one approach that<font color="#CCCCCC"> was tried</font>

220
00:11:30,910 --> 00:11:38,680
was to filter out high frequency changes

221
00:11:35,220 --> 00:11:40,270
that you displayed to your screen so it

222
00:11:38,680 --> 00:11:42,339
would look something like this<font color="#E5E5E5"> I only</font>

223
00:11:40,270 --> 00:11:45,189
did the top line here unfortunately<font color="#CCCCCC"> so</font>

224
00:11:42,340 --> 00:11:48,880
it's kind of odd but you can kind of

225
00:11:45,190 --> 00:11:52,240
tell that it is not quite<font color="#E5E5E5"> as sharp now</font>

226
00:11:48,880 --> 00:11:53,680
and we<font color="#E5E5E5"> look at this in real life and see</font>

227
00:11:52,240 --> 00:11:55,330
how it works<font color="#CCCCCC"> in practice against an</font>

228
00:11:53,680 --> 00:11:58,300
attack you get<font color="#CCCCCC"> something like this for</font>

229
00:11:55,330 --> 00:12:00,010
the top lines are unfiltered<font color="#CCCCCC"> and the</font>

230
00:11:58,300 --> 00:12:02,650
bottom lines are more filtered and you

231
00:12:00,010 --> 00:12:07,830
can see that<font color="#E5E5E5"> this really works at</font><font color="#CCCCCC"> least</font>

232
00:12:02,650 --> 00:12:10,390
when they tried it so that

233
00:12:07,830 --> 00:12:13,330
countermeasures only applicable to

234
00:12:10,390 --> 00:12:15,400
<font color="#E5E5E5">analog based monitors though so for</font>

235
00:12:13,330 --> 00:12:18,160
digital monitors the compromising

236
00:12:15,400 --> 00:12:20,550
emanations emanate from the wire going

237
00:12:18,160 --> 00:12:23,469
<font color="#E5E5E5">from a</font><font color="#CCCCCC"> video card to your monitor</font><font color="#E5E5E5"> and</font>

238
00:12:20,550 --> 00:12:25,839
the signal that gets leaked depends

239
00:12:23,470 --> 00:12:28,900
really on exactly how the your ones and

240
00:12:25,839 --> 00:12:31,600
<font color="#E5E5E5">zeros flow across</font><font color="#CCCCCC"> the wire so one</font>

241
00:12:28,900 --> 00:12:34,380
approach that<font color="#E5E5E5"> works with countering</font>

242
00:12:31,600 --> 00:12:37,060
these kinds of attacks on digital

243
00:12:34,380 --> 00:12:39,640
displays is to randomize least

244
00:12:37,060 --> 00:12:42,130
significant bits of your of<font color="#E5E5E5"> your display</font>

245
00:12:39,640 --> 00:12:43,360
and that won't<font color="#E5E5E5"> make a difference when</font>

246
00:12:42,130 --> 00:12:45,850
you look at your<font color="#E5E5E5"> image with your eyes</font>

247
00:12:43,360 --> 00:12:47,589
but it will<font color="#E5E5E5"> really mess up your</font>

248
00:12:45,850 --> 00:12:51,280
attackers when they try to reconstruct

249
00:12:47,589 --> 00:12:53,560
your image<font color="#E5E5E5"> so we also have this</font>

250
00:12:51,280 --> 00:12:57,640
interesting effect where if you

251
00:12:53,560 --> 00:13:00,780
carefully analyze how the wires<font color="#E5E5E5"> transmit</font>

252
00:12:57,640 --> 00:13:04,990
and represent<font color="#CCCCCC"> the color codes you can</font>

253
00:13:00,780 --> 00:13:07,180
create interesting contrasts that don't

254
00:13:04,990 --> 00:13:13,330
show up very good when you try to do

255
00:13:07,180 --> 00:13:15,430
this attack so peering<font color="#E5E5E5"> at monitors is</font>

256
00:13:13,330 --> 00:13:17,589
fun but<font color="#E5E5E5"> it's hardly the only hardware</font>

257
00:13:15,430 --> 00:13:19,829
attack out there a really common basic

258
00:13:17,589 --> 00:13:23,110
one is<font color="#E5E5E5"> called simple power analysis and</font>

259
00:13:19,830 --> 00:13:26,440
this is where you hook up<font color="#E5E5E5"> of</font>

260
00:13:23,110 --> 00:13:30,550
like a current meter to your device and

261
00:13:26,440 --> 00:13:33,130
watch as<font color="#CCCCCC"> it executes instructions and by</font>

262
00:13:30,550 --> 00:13:35,219
looking<font color="#E5E5E5"> at that power trace you're able</font>

263
00:13:33,130 --> 00:13:37,899
to tell what instructions got executed

264
00:13:35,220 --> 00:13:41,230
so i'm going to<font color="#E5E5E5"> show you an example of</font>

265
00:13:37,899 --> 00:13:45,370
using a power a simple<font color="#E5E5E5"> power analysis</font>

266
00:13:41,230 --> 00:13:47,620
attack on our essay so for RSA we'd

267
00:13:45,370 --> 00:13:49,300
usually be interested in acquiring this

268
00:13:47,620 --> 00:13:51,790
private decrypting key<font color="#CCCCCC"> i have</font>

269
00:13:49,300 --> 00:13:56,019
represented as d here and you see on the

270
00:13:51,790 --> 00:13:59,290
decryption operation we need to take<font color="#E5E5E5"> c</font>

271
00:13:56,019 --> 00:14:01,240
to<font color="#E5E5E5"> the deep power modulo n well that</font>

272
00:13:59,290 --> 00:14:03,910
brings up an interesting question which

273
00:14:01,240 --> 00:14:07,690
is how do<font color="#E5E5E5"> you calculate that that's</font>

274
00:14:03,910 --> 00:14:10,689
those are both big numbers so one

275
00:14:07,690 --> 00:14:12,279
approach is to use this<font color="#CCCCCC"> Square and</font>

276
00:14:10,690 --> 00:14:13,870
multiply algorithm it's a pretty

277
00:14:12,279 --> 00:14:15,670
<font color="#CCCCCC">straightforward thing to do you</font>

278
00:14:13,870 --> 00:14:17,410
represent your exponent in this case

279
00:14:15,670 --> 00:14:20,709
we're going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> looking at our secret</font>

280
00:14:17,410 --> 00:14:23,380
key as I exponent and you represent as a

281
00:14:20,709 --> 00:14:26,739
binary string and going from the most

282
00:14:23,380 --> 00:14:29,019
significant digit down to the least you

283
00:14:26,740 --> 00:14:31,269
would end up performing some operations

284
00:14:29,019 --> 00:14:33,339
on it to calculate it<font color="#E5E5E5"> and it turns out</font>

285
00:14:31,269 --> 00:14:35,709
that the interesting part is that<font color="#E5E5E5"> when</font>

286
00:14:33,339 --> 00:14:37,120
the exponent bit you're looking at is a

287
00:14:35,709 --> 00:14:39,459
one you're going<font color="#CCCCCC"> to do a square</font>

288
00:14:37,120 --> 00:14:41,079
operation on a multiply operation but

289
00:14:39,459 --> 00:14:43,719
when that bit is<font color="#CCCCCC"> zero are you</font><font color="#E5E5E5"> going to</font>

290
00:14:41,079 --> 00:14:46,630
do is square it so there's now a

291
00:14:43,720 --> 00:14:50,550
dependence so there's now a dependence

292
00:14:46,630 --> 00:14:54,100
upon your secret key on what

293
00:14:50,550 --> 00:14:55,899
instructions get<font color="#E5E5E5"> executed and like I</font>

294
00:14:54,100 --> 00:14:57,850
said we can tell what instructions got

295
00:14:55,899 --> 00:15:00,060
executed just by looking at the power

296
00:14:57,850 --> 00:15:02,980
consumption then we should<font color="#CCCCCC"> be able to</font>

297
00:15:00,060 --> 00:15:05,290
acquire the secret key<font color="#E5E5E5"> I'm measuring the</font>

298
00:15:02,980 --> 00:15:08,670
power and so here is an example of that

299
00:15:05,290 --> 00:15:10,689
my lovely artistic interpretation of

300
00:15:08,670 --> 00:15:13,329
what<font color="#E5E5E5"> this would look like on our real</font>

301
00:15:10,690 --> 00:15:15,160
system you can see that<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of these</font>

302
00:15:13,329 --> 00:15:16,689
are<font color="#E5E5E5"> going to look a little skinnier than</font>

303
00:15:15,160 --> 00:15:18,430
the others and that's<font color="#CCCCCC"> because they're</font>

304
00:15:16,690 --> 00:15:20,680
only doing squaring operations which

305
00:15:18,430 --> 00:15:22,750
must mean that that bit was a zero and

306
00:15:20,680 --> 00:15:24,790
so I doing this you can see how you<font color="#E5E5E5"> can</font>

307
00:15:22,750 --> 00:15:26,829
get the secret<font color="#CCCCCC"> key just</font><font color="#E5E5E5"> by looking at</font>

308
00:15:24,790 --> 00:15:28,360
the power consumption so to defend

309
00:15:26,829 --> 00:15:30,819
against this a straightforward thing to

310
00:15:28,360 --> 00:15:33,160
do might be<font color="#E5E5E5"> to just add a dummy</font>

311
00:15:30,820 --> 00:15:36,040
operation when it's 02 always multiply

312
00:15:33,160 --> 00:15:36,819
it won't affect the outcome value but

313
00:15:36,040 --> 00:15:39,189
when you're

314
00:15:36,819 --> 00:15:40,419
doing this kind of attack yeah it will

315
00:15:39,189 --> 00:15:42,969
make<font color="#CCCCCC"> its let you can't easily</font>

316
00:15:40,419 --> 00:15:44,019
distinguish between them I say easily

317
00:15:42,970 --> 00:15:45,609
because there's a whole bunch<font color="#E5E5E5"> of</font>

318
00:15:44,019 --> 00:15:50,199
<font color="#E5E5E5">different</font><font color="#CCCCCC"> other attacks that can</font><font color="#E5E5E5"> get</font>

319
00:15:45,609 --> 00:15:52,329
past<font color="#E5E5E5"> this countermeasure yeah 11 of them</font>

320
00:15:50,199 --> 00:15:55,419
like went to look into a lot is called

321
00:15:52,329 --> 00:15:58,299
differential power analysis and unlike

322
00:15:55,419 --> 00:15:59,919
<font color="#E5E5E5">simple power analysis we're going to be</font>

323
00:15:58,299 --> 00:16:02,350
looking at a whole bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> different</font>

324
00:15:59,919 --> 00:16:06,100
traces and averaging them together and

325
00:16:02,350 --> 00:16:09,729
doing some and taking their difference

326
00:16:06,100 --> 00:16:14,289
to find where to find some interesting

327
00:16:09,729 --> 00:16:16,329
information and the cool thing about

328
00:16:14,289 --> 00:16:19,059
this is<font color="#E5E5E5"> it not only allows us to tell</font>

329
00:16:16,329 --> 00:16:21,008
what instructions got executed but what

330
00:16:19,059 --> 00:16:25,509
values those instructions were executing

331
00:16:21,009 --> 00:16:29,009
on and so it can defeat things that just

332
00:16:25,509 --> 00:16:31,629
try to rely on<font color="#E5E5E5"> a constant execution time</font>

333
00:16:29,009 --> 00:16:33,879
so to<font color="#CCCCCC"> do a difference of power analysis</font>

334
00:16:31,629 --> 00:16:35,850
attack we're going<font color="#E5E5E5"> to get a whole</font><font color="#CCCCCC"> bunch</font>

335
00:16:33,879 --> 00:16:38,139
of<font color="#CCCCCC"> different</font><font color="#E5E5E5"> plain texts and have our</font>

336
00:16:35,850 --> 00:16:40,959
encryption algorithm in this case I'm

337
00:16:38,139 --> 00:16:42,159
going to use des as an example and we're

338
00:16:40,959 --> 00:16:44,439
just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to have it encrypt it while</font>

339
00:16:42,159 --> 00:16:46,869
record its power consumption and the

340
00:16:44,439 --> 00:16:48,728
resulting ciphertext and then we're

341
00:16:46,869 --> 00:16:50,709
going to for every one of those traces

342
00:16:48,729 --> 00:16:54,669
<font color="#E5E5E5">that we got we're going</font><font color="#CCCCCC"> to try to</font>

343
00:16:50,709 --> 00:16:56,439
predict a value an intermediate value in

344
00:16:54,669 --> 00:17:00,279
this case it will<font color="#E5E5E5"> be one of the bits of</font>

345
00:16:56,439 --> 00:17:01,868
<font color="#CCCCCC">L in the very last round of desks so</font>

346
00:17:00,279 --> 00:17:04,509
that's where the red dot or the line is

347
00:17:01,869 --> 00:17:07,179
there and to do<font color="#E5E5E5"> that we're going to have</font>

348
00:17:04,509 --> 00:17:09,669
to guess so in order to calculate that

349
00:17:07,179 --> 00:17:12,669
we already have part<font color="#E5E5E5"> of the equation</font>

350
00:17:09,669 --> 00:17:15,220
which is the green part which is<font color="#E5E5E5"> fed</font>

351
00:17:12,669 --> 00:17:16,419
into this F function here but there's

352
00:17:15,220 --> 00:17:19,179
<font color="#E5E5E5">another part we would need to calculate</font>

353
00:17:16,419 --> 00:17:23,909
it turns out that the value of that it

354
00:17:19,179 --> 00:17:28,329
is going<font color="#CCCCCC"> to also depend</font><font color="#E5E5E5"> on a round key</font>

355
00:17:23,909 --> 00:17:30,269
about six bits of it<font color="#E5E5E5"> I think and so we</font>

356
00:17:28,329 --> 00:17:34,330
can just guess those six bits and

357
00:17:30,269 --> 00:17:38,110
calculate what the resulting L would be

358
00:17:34,330 --> 00:17:41,918
from our known ciphertext result and

359
00:17:38,110 --> 00:17:43,209
what we guess the key to be and so

360
00:17:41,919 --> 00:17:44,769
there's only six of them so that's just

361
00:17:43,210 --> 00:17:46,299
<font color="#E5E5E5">two to the six guesses per each of these</font>

362
00:17:44,769 --> 00:17:49,450
traces that we have to do that's

363
00:17:46,299 --> 00:17:49,809
manageable so when you do that we're

364
00:17:49,450 --> 00:17:53,019
going to

365
00:17:49,809 --> 00:17:55,899
if we<font color="#E5E5E5"> decide that</font><font color="#CCCCCC"> L is going to be 0</font>

366
00:17:53,019 --> 00:17:58,509
then we're going to<font color="#CCCCCC"> put that power trace</font>

367
00:17:55,899 --> 00:18:00,008
in one pile and if it's going<font color="#E5E5E5"> to be if</font>

368
00:17:58,509 --> 00:18:01,210
we decide that<font color="#E5E5E5"> L is going to be one will</font>

369
00:18:00,009 --> 00:18:03,960
put<font color="#E5E5E5"> it in</font><font color="#CCCCCC"> a different pile and then</font>

370
00:18:01,210 --> 00:18:09,879
<font color="#E5E5E5">we're going to average each of these</font>

371
00:18:03,960 --> 00:18:11,830
piles together and then we're going<font color="#E5E5E5"> to</font>

372
00:18:09,879 --> 00:18:15,699
<font color="#E5E5E5">take the difference of them if we're</font>

373
00:18:11,830 --> 00:18:18,428
right<font color="#CCCCCC"> and L if you're right about our</font>

374
00:18:15,700 --> 00:18:22,330
guests of the key then when we do this

375
00:18:18,429 --> 00:18:23,830
we<font color="#E5E5E5"> should see a big spike when we take</font>

376
00:18:22,330 --> 00:18:25,090
the difference of them but if we're not

377
00:18:23,830 --> 00:18:29,740
right then we're<font color="#CCCCCC"> not going to see you</font>

378
00:18:25,090 --> 00:18:32,559
spite like you see at<font color="#E5E5E5"> the top so one way</font>

379
00:18:29,740 --> 00:18:34,509
to try to get around<font color="#E5E5E5"> this problem is a</font>

380
00:18:32,559 --> 00:18:35,830
technique called masking this is where i

381
00:18:34,509 --> 00:18:39,220
was going to originally put my mask

382
00:18:35,830 --> 00:18:41,590
because<font color="#E5E5E5"> i am i can say on my twitter</font>

383
00:18:39,220 --> 00:18:45,369
account a rubber mask<font color="#CCCCCC"> Canio sure this is</font>

384
00:18:41,590 --> 00:18:49,360
kind of<font color="#CCCCCC"> my thing but this unfortunately</font>

385
00:18:45,369 --> 00:18:55,059
is not quite<font color="#E5E5E5"> as</font><font color="#CCCCCC"> awesome as that it's an</font>

386
00:18:49,360 --> 00:18:56,949
attempt to<font color="#CCCCCC"> D correlate the intermediate</font>

387
00:18:55,059 --> 00:18:59,799
values of our function while it's

388
00:18:56,950 --> 00:19:01,779
running so that when you do<font color="#E5E5E5"> attack like</font>

389
00:18:59,799 --> 00:19:05,769
DPA all you're going to get is some

390
00:19:01,779 --> 00:19:07,600
value that right is some basically

391
00:19:05,769 --> 00:19:16,600
random value that we can't do<font color="#CCCCCC"> anything</font>

392
00:19:07,600 --> 00:19:20,799
with so it makes things like are so it

393
00:19:16,600 --> 00:19:23,649
in<font color="#CCCCCC"> okay so we have</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> at a little</font>

394
00:19:20,799 --> 00:19:25,929
diagram of how this masking works the

395
00:19:23,649 --> 00:19:27,789
top is<font color="#E5E5E5"> an ordinary function at the</font>

396
00:19:25,929 --> 00:19:30,519
bottom is where it's masked in this case

397
00:19:27,789 --> 00:19:32,799
<font color="#CCCCCC">M is going to be just some random number</font>

398
00:19:30,519 --> 00:19:35,950
we pull out and then we're going<font color="#CCCCCC"> to</font>

399
00:19:32,799 --> 00:19:40,658
explore it with X and then we'll feed

400
00:19:35,950 --> 00:19:42,460
that result into our function and do our

401
00:19:40,659 --> 00:19:44,379
processing with that but when we're done

402
00:19:42,460 --> 00:19:47,139
with it and<font color="#CCCCCC"> we're type and we're trying</font>

403
00:19:44,379 --> 00:19:48,610
<font color="#E5E5E5">to get back to what the value should</font>

404
00:19:47,139 --> 00:19:50,529
have been if you didn't use masking

405
00:19:48,610 --> 00:19:53,168
we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> need another function in</font>

406
00:19:50,529 --> 00:19:54,519
<font color="#E5E5E5">this case that see that</font><font color="#CCCCCC"> you have to</font>

407
00:19:53,169 --> 00:19:58,240
combine it with that in order to get our

408
00:19:54,519 --> 00:20:00,009
end result so you have to when you use

409
00:19:58,240 --> 00:20:01,659
masking you have to mask your result

410
00:20:00,009 --> 00:20:03,040
then do all your actual work and then

411
00:20:01,659 --> 00:20:05,440
unmask it at the end

412
00:20:03,040 --> 00:20:06,730
and that puts limitations on what kind

413
00:20:05,440 --> 00:20:08,590
<font color="#E5E5E5">of operations you can do in between</font>

414
00:20:06,730 --> 00:20:11,580
<font color="#E5E5E5">without having to switch masculine types</font>

415
00:20:08,590 --> 00:20:13,959
which<font color="#E5E5E5"> there are several different kinds</font>

416
00:20:11,580 --> 00:20:16,840
so some other<font color="#CCCCCC"> county measures you might</font>

417
00:20:13,960 --> 00:20:19,780
try our making it harder to align power

418
00:20:16,840 --> 00:20:21,550
traces because<font color="#E5E5E5"> I said that you had to</font>

419
00:20:19,780 --> 00:20:24,040
collect a lot<font color="#CCCCCC"> of different power traces</font>

420
00:20:21,550 --> 00:20:28,000
in order for this attack<font color="#E5E5E5"> to work so if</font>

421
00:20:24,040 --> 00:20:29,620
you make it<font color="#E5E5E5"> so they don't line up then</font>

422
00:20:28,000 --> 00:20:31,660
when they average them together they're

423
00:20:29,620 --> 00:20:33,340
not getting anything useful so you can

424
00:20:31,660 --> 00:20:34,930
shuffle around the<font color="#E5E5E5"> order of operations</font>

425
00:20:33,340 --> 00:20:37,139
<font color="#CCCCCC">if it doesn't matter like in</font>

426
00:20:34,930 --> 00:20:41,770
multiplication nothing wrong with

427
00:20:37,140 --> 00:20:43,990
switching that 2d BAC but if you did

428
00:20:41,770 --> 00:20:45,040
<font color="#CCCCCC">that for every time you ran it and when</font>

429
00:20:43,990 --> 00:20:46,630
they<font color="#E5E5E5"> averaged them together or not going</font>

430
00:20:45,040 --> 00:20:48,820
to get anything useful and you can also

431
00:20:46,630 --> 00:20:51,280
try adding in random dummy functions

432
00:20:48,820 --> 00:20:55,360
every now and then or delays to foil

433
00:20:51,280 --> 00:20:58,810
aligning them as well so and another

434
00:20:55,360 --> 00:21:01,179
strategy is more a protocol level where

435
00:20:58,810 --> 00:21:03,100
you're going to say that you're

436
00:21:01,180 --> 00:21:05,050
<font color="#E5E5E5">expecting someone to eventually be able</font>

437
00:21:03,100 --> 00:21:06,520
to<font color="#E5E5E5"> compromise your system so one of</font>

438
00:21:05,050 --> 00:21:07,930
these attacks<font color="#E5E5E5"> so you're just going to</font>

439
00:21:06,520 --> 00:21:10,060
change the key every now and then

440
00:21:07,930 --> 00:21:13,780
hopefully<font color="#CCCCCC"> before they able to get enough</font>

441
00:21:10,060 --> 00:21:15,280
traces to pull off an attack and there's

442
00:21:13,780 --> 00:21:17,620
<font color="#E5E5E5">lots of</font><font color="#CCCCCC"> different attacks in</font><font color="#E5E5E5"> this</font>

443
00:21:15,280 --> 00:21:19,930
fashion like electro magnetic analysis

444
00:21:17,620 --> 00:21:22,780
which is where<font color="#CCCCCC"> you would look at its</font>

445
00:21:19,930 --> 00:21:24,220
electromagnetic radiation instead<font color="#CCCCCC"> of its</font>

446
00:21:22,780 --> 00:21:27,250
power consumption but those two are

447
00:21:24,220 --> 00:21:30,340
closely related but it has some

448
00:21:27,250 --> 00:21:32,050
advantages like you can focus in on a

449
00:21:30,340 --> 00:21:33,550
specific area of the chip to get a

450
00:21:32,050 --> 00:21:36,280
stronger signal for that to<font color="#CCCCCC"> fills out</font>

451
00:21:33,550 --> 00:21:37,659
some of the noise<font color="#E5E5E5"> and there are certain</font>

452
00:21:36,280 --> 00:21:40,840
instructions that are more noisy

453
00:21:37,660 --> 00:21:43,570
electromagnetically than power lies now

454
00:21:40,840 --> 00:21:46,419
you might<font color="#E5E5E5"> be able to exploit some other</font>

455
00:21:43,570 --> 00:21:51,040
things like<font color="#E5E5E5"> higher order DPA which is</font>

456
00:21:46,420 --> 00:21:53,260
uses several different<font color="#CCCCCC"> areas to counter</font>

457
00:21:51,040 --> 00:21:55,420
at masking at once and then there's

458
00:21:53,260 --> 00:21:57,010
things like template axon<font color="#E5E5E5"> Matt</font>

459
00:21:55,420 --> 00:22:00,820
correlation power analysis which won't

460
00:21:57,010 --> 00:22:03,550
get into so an interesting thing that

461
00:22:00,820 --> 00:22:07,960
happened like in<font color="#E5E5E5"> December 2013 is a cool</font>

462
00:22:03,550 --> 00:22:12,700
paper where uses really researchers<font color="#E5E5E5"> were</font>

463
00:22:07,960 --> 00:22:14,500
able to crack a gpg RSA key just by

464
00:22:12,700 --> 00:22:16,060
having a<font color="#E5E5E5"> smartphone sitting next to the</font>

465
00:22:14,500 --> 00:22:18,130
laptop is it was<font color="#E5E5E5"> running it</font>

466
00:22:16,060 --> 00:22:20,800
email program and decrypting emails in

467
00:22:18,130 --> 00:22:24,130
the background<font color="#CCCCCC"> and it did that within an</font>

468
00:22:20,800 --> 00:22:27,280
hour and the way that worked is then

469
00:22:24,130 --> 00:22:31,630
your computer's bluemont noise based on

470
00:22:27,280 --> 00:22:34,480
is power consumption so your power

471
00:22:31,630 --> 00:22:38,710
supply<font color="#E5E5E5"> unit when it's drawing power will</font>

472
00:22:34,480 --> 00:22:41,380
have to do it changes the vibration of

473
00:22:38,710 --> 00:22:44,440
your capacitors and coils and that

474
00:22:41,380 --> 00:22:47,080
creates a sound that correlates with

475
00:22:44,440 --> 00:22:50,350
your secret keys and you can extract

476
00:22:47,080 --> 00:22:52,980
them that way and the patch that<font color="#E5E5E5"> gpg</font>

477
00:22:50,350 --> 00:22:55,449
released just a little bit after<font color="#CCCCCC"> that</font>

478
00:22:52,980 --> 00:22:57,270
involve the<font color="#E5E5E5"> form of masking called</font>

479
00:22:55,450 --> 00:23:00,960
blinding and you can see it right<font color="#E5E5E5"> here</font>

480
00:22:57,270 --> 00:23:03,250
<font color="#E5E5E5">I'm going to go into it though but it's</font>

481
00:23:00,960 --> 00:23:04,840
but you can't actually patch things like

482
00:23:03,250 --> 00:23:09,760
this in software and this is just an

483
00:23:04,840 --> 00:23:12,669
example of how that looks so timing

484
00:23:09,760 --> 00:23:16,480
attacks are kind of special because for

485
00:23:12,670 --> 00:23:18,010
most of these the question is how on

486
00:23:16,480 --> 00:23:20,110
earth would you defend against this

487
00:23:18,010 --> 00:23:21,940
attack which is obviously hardware thing

488
00:23:20,110 --> 00:23:23,770
and software but for timing attacks<font color="#CCCCCC"> it's</font>

489
00:23:21,940 --> 00:23:26,470
<font color="#CCCCCC">a little bit different we're asking how</font>

490
00:23:23,770 --> 00:23:29,320
would you defend a timing a cat attack

491
00:23:26,470 --> 00:23:33,220
with<font color="#E5E5E5"> hardware when it's almost certainly</font>

492
00:23:29,320 --> 00:23:34,570
more of a software thing they're special

493
00:23:33,220 --> 00:23:36,880
because unlike the other ones we're not

494
00:23:34,570 --> 00:23:39,820
measuring a tangible thing<font color="#E5E5E5"> like</font>

495
00:23:36,880 --> 00:23:44,080
radiation or sound or measuring just

496
00:23:39,820 --> 00:23:47,970
time<font color="#CCCCCC"> and that also means that</font><font color="#E5E5E5"> we can</font>

497
00:23:44,080 --> 00:23:47,970
pull these off remotely pretty easily so

498
00:23:50,580 --> 00:23:57,189
<font color="#E5E5E5">all right so here's an example in 2003</font>

499
00:23:53,860 --> 00:24:00,340
where they were able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> extract openssl</font>

500
00:23:57,190 --> 00:24:03,460
<font color="#E5E5E5">Keys him across a network at the time up</font>

501
00:24:00,340 --> 00:24:05,530
an SSL didn't use timing attack

502
00:24:03,460 --> 00:24:07,540
mitigations by default because it was

503
00:24:05,530 --> 00:24:08,710
believed<font color="#E5E5E5"> that it wasn't important I was</font>

504
00:24:07,540 --> 00:24:10,540
only important for things like smart

505
00:24:08,710 --> 00:24:12,040
cards I didn't have a whole<font color="#E5E5E5"> bunch of</font>

506
00:24:10,540 --> 00:24:14,110
stuff going on the<font color="#CCCCCC"> background and</font><font color="#E5E5E5"> so</font>

507
00:24:12,040 --> 00:24:16,389
they weren't<font color="#CCCCCC"> very noisy but these</font>

508
00:24:14,110 --> 00:24:21,250
researchers were able to take<font color="#CCCCCC"> advantage</font>

509
00:24:16,390 --> 00:24:25,540
of some dependence on the secret<font color="#E5E5E5"> key and</font>

510
00:24:21,250 --> 00:24:28,570
the timing there are two parts of our

511
00:24:25,540 --> 00:24:29,909
essay in particular that were vulnerable

512
00:24:28,570 --> 00:24:31,230
and that was where they were<font color="#E5E5E5"> doing</font>

513
00:24:29,910 --> 00:24:32,940
these things<font color="#E5E5E5"> called Montgomery</font>

514
00:24:31,230 --> 00:24:35,070
reductions we had to do an extra one if

515
00:24:32,940 --> 00:24:36,360
the value is too big and another<font color="#E5E5E5"> thing</font>

516
00:24:35,070 --> 00:24:38,909
<font color="#E5E5E5">where they use a different</font>

517
00:24:36,360 --> 00:24:41,010
multiplication algorithm if a and B were

518
00:24:38,910 --> 00:24:43,410
the same size as opposed if they were

519
00:24:41,010 --> 00:24:45,530
different<font color="#E5E5E5"> and using these kinds of</font>

520
00:24:43,410 --> 00:24:48,660
subtleties they are able<font color="#E5E5E5"> to extract the</font>

521
00:24:45,530 --> 00:24:52,139
<font color="#E5E5E5">key and a big part of</font><font color="#CCCCCC"> that was there's a</font>

522
00:24:48,660 --> 00:24:54,150
dependence on the number of on the

523
00:24:52,140 --> 00:24:56,550
probability that an extra reduction will

524
00:24:54,150 --> 00:24:58,080
have to be done depending<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the value</font>

525
00:24:56,550 --> 00:25:03,060
of<font color="#CCCCCC"> your cipher text that you're</font><font color="#E5E5E5"> choosing</font>

526
00:24:58,080 --> 00:25:05,370
to decrypt so you can see here that if

527
00:25:03,060 --> 00:25:08,399
you chose your cipher text carefully you

528
00:25:05,370 --> 00:25:12,330
can get some<font color="#CCCCCC"> information about what Q or</font>

529
00:25:08,400 --> 00:25:14,580
P is and those are parts of about

530
00:25:12,330 --> 00:25:18,590
determine your secret keys you<font color="#CCCCCC"> can get</font>

531
00:25:14,580 --> 00:25:21,540
them from just knowing them so some for

532
00:25:18,590 --> 00:25:24,060
openssl they<font color="#CCCCCC"> patch that by just making</font>

533
00:25:21,540 --> 00:25:25,590
binding the default option<font color="#E5E5E5"> but some</font>

534
00:25:24,060 --> 00:25:28,050
other options<font color="#CCCCCC"> they could have explored</font>

535
00:25:25,590 --> 00:25:30,449
where to force everything to take an

536
00:25:28,050 --> 00:25:31,590
equal amount of time that's not

537
00:25:30,450 --> 00:25:34,110
something that people like to<font color="#E5E5E5"> do very</font>

538
00:25:31,590 --> 00:25:36,959
often because it ruins performance it

539
00:25:34,110 --> 00:25:39,030
makes it so that every operation always

540
00:25:36,960 --> 00:25:40,380
takes the worst<font color="#E5E5E5"> possible execution time</font>

541
00:25:39,030 --> 00:25:42,420
<font color="#CCCCCC">and that's not this is a really good</font>

542
00:25:40,380 --> 00:25:44,100
<font color="#E5E5E5">thing especially because we still don't</font>

543
00:25:42,420 --> 00:25:48,360
use this to sell everywhere because it

544
00:25:44,100 --> 00:25:50,550
takes my resources in part so hash

545
00:25:48,360 --> 00:25:52,560
attacks are kind of like timing attacks

546
00:25:50,550 --> 00:25:56,909
but we're going<font color="#E5E5E5"> to take a more active</font>

547
00:25:52,560 --> 00:25:58,889
role in the sense so let's<font color="#E5E5E5"> say</font><font color="#CCCCCC"> that I so</font>

548
00:25:56,910 --> 00:26:01,230
here you have your CPU and it always is

549
00:25:58,890 --> 00:26:03,270
accessing<font color="#E5E5E5"> stuff in memory but it can't</font>

550
00:26:01,230 --> 00:26:04,950
<font color="#E5E5E5">wait a macro second or whatever tiny</font>

551
00:26:03,270 --> 00:26:08,760
amount<font color="#E5E5E5"> of time it takes to transfer it</font>

552
00:26:04,950 --> 00:26:10,020
from<font color="#E5E5E5"> Ram to itself so never get</font>

553
00:26:08,760 --> 00:26:12,930
something from memory it stores it in

554
00:26:10,020 --> 00:26:15,990
its cache but the<font color="#E5E5E5"> problem is with cash</font>

555
00:26:12,930 --> 00:26:19,830
only has so much space and so sometimes

556
00:26:15,990 --> 00:26:21,600
it will have to evict some of the things

557
00:26:19,830 --> 00:26:23,850
it's cached in favor of<font color="#E5E5E5"> something it</font>

558
00:26:21,600 --> 00:26:28,379
more recently used or expects to need

559
00:26:23,850 --> 00:26:31,050
more and so we can exploit this do you

560
00:26:28,380 --> 00:26:35,520
recover a secret key like on a server

561
00:26:31,050 --> 00:26:37,169
let's say<font color="#E5E5E5"> that you had a es something</font>

562
00:26:35,520 --> 00:26:39,060
that was running<font color="#CCCCCC"> AES in the background</font>

563
00:26:37,170 --> 00:26:40,800
running on your server it was privileged

564
00:26:39,060 --> 00:26:42,270
user and you're just<font color="#E5E5E5"> a regular user so</font>

565
00:26:40,800 --> 00:26:43,570
you could just<font color="#E5E5E5"> dump its memory to find</font>

566
00:26:42,270 --> 00:26:45,460
the key that way<font color="#E5E5E5"> base</font>

567
00:26:43,570 --> 00:26:47,409
<font color="#CCCCCC">did</font><font color="#E5E5E5"> it so you can create a different</font>

568
00:26:45,460 --> 00:26:50,350
progress which will call your spy

569
00:26:47,410 --> 00:26:52,810
process and it will just go there and

570
00:26:50,350 --> 00:26:56,010
try<font color="#E5E5E5"> to pull a bunch of memory locations</font>

571
00:26:52,810 --> 00:27:01,840
and hopefully fill up the cash and then

572
00:26:56,010 --> 00:27:04,810
when you're a es program tries to run it

573
00:27:01,840 --> 00:27:08,459
there's a part in its<font color="#CCCCCC"> operation which is</font>

574
00:27:04,810 --> 00:27:11,530
like the<font color="#E5E5E5"> S box operation where it's</font>

575
00:27:08,460 --> 00:27:13,870
looks up a memory location based upon a

576
00:27:11,530 --> 00:27:18,010
value that's derived from the secret<font color="#E5E5E5"> key</font>

577
00:27:13,870 --> 00:27:19,959
and so in this case it's looking that up

578
00:27:18,010 --> 00:27:22,510
right now but your spy process already

579
00:27:19,960 --> 00:27:24,480
hogged all the cash so it has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> go into</font>

580
00:27:22,510 --> 00:27:26,890
memory and pull<font color="#E5E5E5"> that value from their</font>

581
00:27:24,480 --> 00:27:29,140
sticks it back in the<font color="#E5E5E5"> cache and now on</font>

582
00:27:26,890 --> 00:27:32,350
your spy program runs again when it

583
00:27:29,140 --> 00:27:34,810
reaches that particular value that needs

584
00:27:32,350 --> 00:27:37,810
to access that's in the same cache line

585
00:27:34,810 --> 00:27:39,310
it will it won't find it<font color="#CCCCCC"> anymore and so</font>

586
00:27:37,810 --> 00:27:42,250
we'll have to pull it from memory and

587
00:27:39,310 --> 00:27:44,350
it's going<font color="#E5E5E5"> to be timing every access it</font>

588
00:27:42,250 --> 00:27:46,330
does and so when it reaches this

589
00:27:44,350 --> 00:27:48,040
particular value that<font color="#E5E5E5"> your AES program</font>

590
00:27:46,330 --> 00:27:51,520
ran is going to take a little bit<font color="#E5E5E5"> longer</font>

591
00:27:48,040 --> 00:27:54,270
and that<font color="#E5E5E5"> will tell it that some other</font>

592
00:27:51,520 --> 00:27:58,960
program was interfering with its

593
00:27:54,270 --> 00:28:00,400
execution and it will tell it an idea of

594
00:27:58,960 --> 00:28:02,110
what memory region that program was

595
00:28:00,400 --> 00:28:05,800
trying to access and if it depends<font color="#E5E5E5"> on</font>

596
00:28:02,110 --> 00:28:07,419
this part<font color="#E5E5E5"> on the secret key then that is</font>

597
00:28:05,800 --> 00:28:13,720
an<font color="#CCCCCC"> Avenue where you might be able to use</font>

598
00:28:07,420 --> 00:28:15,910
<font color="#CCCCCC">to determine what the key is so some</font>

599
00:28:13,720 --> 00:28:19,060
ways to<font color="#CCCCCC"> the defend against these cash</font>

600
00:28:15,910 --> 00:28:20,680
attacks are to just don't use memory

601
00:28:19,060 --> 00:28:23,830
addresses that are derived<font color="#E5E5E5"> from secret</font>

602
00:28:20,680 --> 00:28:30,790
values that's not always easier said

603
00:28:23,830 --> 00:28:32,500
than<font color="#CCCCCC"> done because because it these like</font>

604
00:28:30,790 --> 00:28:35,080
an<font color="#E5E5E5"> aes the table lookup is an</font>

605
00:28:32,500 --> 00:28:37,870
optimization for a<font color="#E5E5E5"> function so it's</font><font color="#CCCCCC"> just</font>

606
00:28:35,080 --> 00:28:39,820
a pre computed function and you could

607
00:28:37,870 --> 00:28:41,290
always just try computing the function

608
00:28:39,820 --> 00:28:44,080
on the spot but<font color="#CCCCCC"> that would take longer</font>

609
00:28:41,290 --> 00:28:49,860
so you'd<font color="#E5E5E5"> rather use the lookup table if</font>

610
00:28:44,080 --> 00:28:52,030
we can and you can<font color="#CCCCCC"> also store your</font>

611
00:28:49,860 --> 00:28:54,370
lookup table<font color="#CCCCCC"> on somewhere where we won't</font>

612
00:28:52,030 --> 00:28:57,190
<font color="#E5E5E5">ever have a problem with it running into</font>

613
00:28:54,370 --> 00:28:58,989
your cash but

614
00:28:57,190 --> 00:29:01,210
there's<font color="#E5E5E5"> not that many places</font><font color="#CCCCCC"> to do that</font>

615
00:28:58,990 --> 00:29:04,180
like your CPU registers but they are

616
00:29:01,210 --> 00:29:05,830
<font color="#CCCCCC">often not large enough</font><font color="#E5E5E5"> to store that is</font>

617
00:29:04,180 --> 00:29:08,110
<font color="#E5E5E5">also another pouch called bit slicing</font>

618
00:29:05,830 --> 00:29:09,750
which you kind of process each<font color="#E5E5E5"> bit and</font>

619
00:29:08,110 --> 00:29:14,320
its own thing<font color="#E5E5E5"> but I</font><font color="#CCCCCC"> won't get into that</font>

620
00:29:09,750 --> 00:29:18,550
so is<font color="#E5E5E5"> also closely related thing called</font>

621
00:29:14,320 --> 00:29:21,610
<font color="#E5E5E5">ranch predictions attacks yeah so these</font>

622
00:29:18,550 --> 00:29:24,970
days compete processors are<font color="#E5E5E5"> highly</font>

623
00:29:21,610 --> 00:29:27,429
heavily<font color="#E5E5E5"> pipelined and they don't like</font><font color="#CCCCCC"> it</font>

624
00:29:24,970 --> 00:29:31,470
when they have to reload everything

625
00:29:27,430 --> 00:29:34,420
because they miss predicted branch so

626
00:29:31,470 --> 00:29:36,070
they have a big unit that just tries to

627
00:29:34,420 --> 00:29:37,600
predict when<font color="#E5E5E5"> eventually pick so can</font>

628
00:29:36,070 --> 00:29:41,919
continue loading instructions without

629
00:29:37,600 --> 00:29:43,840
interruptions but that process can only

630
00:29:41,920 --> 00:29:46,180
store so many different addresses in it

631
00:29:43,840 --> 00:29:51,040
so<font color="#E5E5E5"> you can do a</font><font color="#CCCCCC"> similar thing where you</font>

632
00:29:46,180 --> 00:29:55,150
have your spy process trying<font color="#E5E5E5"> to fill up</font>

633
00:29:51,040 --> 00:29:59,710
that branch target buffer and when your

634
00:29:55,150 --> 00:30:02,950
other<font color="#E5E5E5"> encryption program runs it will it</font>

635
00:29:59,710 --> 00:30:05,830
will cause the buffer to evict some of

636
00:30:02,950 --> 00:30:07,870
its addresses and then when your spy

637
00:30:05,830 --> 00:30:09,820
process runs again it will notice the

638
00:30:07,870 --> 00:30:11,350
timing difference there and you can<font color="#E5E5E5"> do</font>

639
00:30:09,820 --> 00:30:14,320
that<font color="#E5E5E5"> to break things like our balance</font>

640
00:30:11,350 --> 00:30:16,000
execution tactic the square and multiply

641
00:30:14,320 --> 00:30:20,080
always we did for simple power analysis

642
00:30:16,000 --> 00:30:21,880
of RSA because that even though each

643
00:30:20,080 --> 00:30:25,470
branch would take the same amount of

644
00:30:21,880 --> 00:30:28,690
<font color="#E5E5E5">time it would</font><font color="#CCCCCC"> be different matches still</font>

645
00:30:25,470 --> 00:30:30,160
<font color="#E5E5E5">all right so if all the tax are cool</font>

646
00:30:28,690 --> 00:30:32,140
because you get to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about lasers</font>

647
00:30:30,160 --> 00:30:33,940
even<font color="#CCCCCC"> though that's</font><font color="#E5E5E5"> just one example but</font>

648
00:30:32,140 --> 00:30:38,580
everybody loves lasers for some reason

649
00:30:33,940 --> 00:30:42,730
so so some of the<font color="#CCCCCC"> things you</font><font color="#E5E5E5"> can do are</font>

650
00:30:38,580 --> 00:30:46,990
to flip bits<font color="#CCCCCC"> in memory with lasers for</font>

651
00:30:42,730 --> 00:30:49,620
instance or or on a wire there's a

652
00:30:46,990 --> 00:30:54,490
recent thing that got in the news about

653
00:30:49,620 --> 00:30:57,899
accessing adjacent locations in physical

654
00:30:54,490 --> 00:31:01,210
memory it repeatedly can cause it<font color="#CCCCCC"> to</font>

655
00:30:57,900 --> 00:31:03,100
leak over into the<font color="#CCCCCC"> adjacent memory</font>

656
00:31:01,210 --> 00:31:05,080
regions as you can flip bits and ramp

657
00:31:03,100 --> 00:31:08,800
just by repeating<font color="#CCCCCC"> Lee repeatedly</font>

658
00:31:05,080 --> 00:31:11,129
accessing memory and they were able to

659
00:31:08,800 --> 00:31:13,740
<font color="#E5E5E5">turn that</font><font color="#CCCCCC"> into an actual exploit or two</font>

660
00:31:11,130 --> 00:31:16,740
so is it so these kinds of all the texts

661
00:31:13,740 --> 00:31:18,660
aren't just for doing<font color="#E5E5E5"> sneaky crypto</font>

662
00:31:16,740 --> 00:31:25,110
things you can just hijack systems

663
00:31:18,660 --> 00:31:26,700
<font color="#CCCCCC">outright Papa shell so but that's not</font><font color="#E5E5E5"> to</font>

664
00:31:25,110 --> 00:31:28,310
say that<font color="#CCCCCC"> there aren't any fancy crypto</font>

665
00:31:26,700 --> 00:31:31,830
attacks on there there's a lot<font color="#CCCCCC"> of</font>

666
00:31:28,310 --> 00:31:33,990
attacks that rely on measuring

667
00:31:31,830 --> 00:31:35,280
differences between an encryption that

668
00:31:33,990 --> 00:31:36,930
goes right an encryption that<font color="#E5E5E5"> you</font>

669
00:31:35,280 --> 00:31:38,790
tampered with and being able to

670
00:31:36,930 --> 00:31:41,670
determine<font color="#CCCCCC"> keys based on analyzing the</font>

671
00:31:38,790 --> 00:31:43,649
differences of the results so

672
00:31:41,670 --> 00:31:46,440
countermeasures for fall attacks aren't

673
00:31:43,650 --> 00:31:48,600
easy<font color="#E5E5E5"> to do in software I really are a</font>

674
00:31:46,440 --> 00:31:49,950
hardware problem but there<font color="#E5E5E5"> are some</font>

675
00:31:48,600 --> 00:31:51,870
<font color="#E5E5E5">things that you can do that might kind</font>

676
00:31:49,950 --> 00:31:54,300
<font color="#E5E5E5">of help like you can use error</font>

677
00:31:51,870 --> 00:31:56,699
correcting codes and I didn't know this

678
00:31:54,300 --> 00:31:58,740
before but apparently<font color="#E5E5E5"> you can use</font>

679
00:31:56,700 --> 00:32:01,620
aircrack<font color="#E5E5E5"> kinkos not just to verify</font>

680
00:31:58,740 --> 00:32:05,610
things are correct when<font color="#CCCCCC"> you store them</font>

681
00:32:01,620 --> 00:32:07,199
but also when to make<font color="#E5E5E5"> sure that a actual</font>

682
00:32:05,610 --> 00:32:08,939
operation like addition or something

683
00:32:07,200 --> 00:32:15,390
performed correctly<font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> sure how</font>

684
00:32:08,940 --> 00:32:16,800
that works<font color="#E5E5E5"> over but we often often might</font>

685
00:32:15,390 --> 00:32:19,680
just be easier to<font color="#E5E5E5"> compute something</font>

686
00:32:16,800 --> 00:32:22,590
twice and then check the results to make

687
00:32:19,680 --> 00:32:24,540
sure that<font color="#E5E5E5"> it got</font><font color="#CCCCCC"> the right answer both</font>

688
00:32:22,590 --> 00:32:26,070
times and if it didn't then you would

689
00:32:24,540 --> 00:32:27,780
assume<font color="#CCCCCC"> that there's a fault attack or</font>

690
00:32:26,070 --> 00:32:32,370
something<font color="#E5E5E5"> going on and you can take</font>

691
00:32:27,780 --> 00:32:34,560
action<font color="#E5E5E5"> with about it and a particular</font>

692
00:32:32,370 --> 00:32:36,750
good way to do that with encryption is

693
00:32:34,560 --> 00:32:38,879
to encrypt something and then try G

694
00:32:36,750 --> 00:32:42,360
cryptic it after and comparing if you

695
00:32:38,880 --> 00:32:43,860
get the original<font color="#E5E5E5"> results till so you can</font>

696
00:32:42,360 --> 00:32:46,889
also try tacking random number

697
00:32:43,860 --> 00:32:49,110
generators there was a neat attack where

698
00:32:46,890 --> 00:32:51,600
some people were modified the intel Ivy

699
00:32:49,110 --> 00:32:54,149
Bridge random number generator by

700
00:32:51,600 --> 00:32:57,629
<font color="#E5E5E5">changing the dolphin polarity of it</font>

701
00:32:54,150 --> 00:33:01,260
which is hard to detect but it would<font color="#E5E5E5"> but</font>

702
00:32:57,630 --> 00:33:03,090
their attack rerouted the entropy of the

703
00:33:01,260 --> 00:33:07,320
random<font color="#CCCCCC"> number generator significantly</font>

704
00:33:03,090 --> 00:33:09,629
and it wasn't<font color="#E5E5E5"> detected by standard</font>

705
00:33:07,320 --> 00:33:12,169
randomness tests and they also have<font color="#CCCCCC"> to</font>

706
00:33:09,630 --> 00:33:16,470
worry about other things like<font color="#CCCCCC"> backdoored</font>

707
00:33:12,170 --> 00:33:18,270
random number generator standards so if

708
00:33:16,470 --> 00:33:20,970
you want<font color="#E5E5E5"> to try to fend against your</font>

709
00:33:18,270 --> 00:33:22,800
attacks on<font color="#E5E5E5"> around number generators you</font>

710
00:33:20,970 --> 00:33:24,960
could<font color="#E5E5E5"> just try testing them to make sure</font>

711
00:33:22,800 --> 00:33:26,549
<font color="#CCCCCC">that the results actually are random</font>

712
00:33:24,960 --> 00:33:28,590
and you don't<font color="#CCCCCC"> just</font><font color="#E5E5E5"> have to do that at</font>

713
00:33:26,549 --> 00:33:34,230
one sitting you could continuously pull

714
00:33:28,590 --> 00:33:37,860
your number generator and and try seeing

715
00:33:34,230 --> 00:33:40,350
if it's still a random continuously but

716
00:33:37,860 --> 00:33:42,779
really no tests can prove whether it's

717
00:33:40,350 --> 00:33:46,110
random or not at the<font color="#CCCCCC"> end of the day</font><font color="#E5E5E5"> and</font>

718
00:33:42,779 --> 00:33:48,419
you can also try just combining

719
00:33:46,110 --> 00:33:50,969
different sources of entropy together

720
00:33:48,419 --> 00:33:53,640
just<font color="#E5E5E5"> in case one of them fails so that's</font>

721
00:33:50,970 --> 00:33:55,110
what a lot of operating systems do these

722
00:33:53,640 --> 00:33:56,640
days<font color="#E5E5E5"> because they don't</font><font color="#CCCCCC"> trust hardware</font>

723
00:33:55,110 --> 00:34:05,360
random number of<font color="#CCCCCC"> january's because of</font>

724
00:33:56,640 --> 00:34:05,360
problems with them so let's get<font color="#E5E5E5"> that</font>

725
00:34:07,190 --> 00:34:14,310
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> all right so there's some various</font>

726
00:34:12,869 --> 00:34:18,179
other things where you could like sniff

727
00:34:14,310 --> 00:34:21,119
your bus or direct memory access to tax

728
00:34:18,179 --> 00:34:22,770
those kind of things one approach to

729
00:34:21,119 --> 00:34:26,490
defending is those kinds of attacks is

730
00:34:22,770 --> 00:34:28,139
to encrypt your memory so<font color="#CCCCCC"> oftentimes</font><font color="#E5E5E5"> we</font>

731
00:34:26,489 --> 00:34:31,199
<font color="#E5E5E5">talk about encrypting hard disks but you</font>

732
00:34:28,139 --> 00:34:34,820
can also try<font color="#CCCCCC"> and krypton memory that's</font>

733
00:34:31,199 --> 00:34:36,960
what this tool called hair tries to do

734
00:34:34,820 --> 00:34:40,649
we might have heard<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> a while</font>

735
00:34:36,960 --> 00:34:45,929
<font color="#CCCCCC">ago and also trees or something similar</font>

736
00:34:40,649 --> 00:34:48,029
a lot of a lot of cryptography software

737
00:34:45,929 --> 00:34:51,240
is very careful about cleaning up after

738
00:34:48,030 --> 00:34:54,839
itself whenever<font color="#E5E5E5"> it's done using this</font>

739
00:34:51,239 --> 00:34:56,969
stack so<font color="#E5E5E5"> always do what's called stack</font>

740
00:34:54,839 --> 00:34:59,099
burning and delete it so that it doesn't

741
00:34:56,969 --> 00:35:01,680
leave any lingering values behind for

742
00:34:59,099 --> 00:35:03,390
someone to snoop on later and an

743
00:35:01,680 --> 00:35:05,368
<font color="#E5E5E5">interesting thing is that some memories</font>

744
00:35:03,390 --> 00:35:07,080
have a property where if they keep the

745
00:35:05,369 --> 00:35:09,210
same value in them for<font color="#CCCCCC"> a long time the</font>

746
00:35:07,080 --> 00:35:11,730
<font color="#CCCCCC">values can actually burn into them so if</font>

747
00:35:09,210 --> 00:35:13,170
<font color="#CCCCCC">you cut the power on it you can still go</font>

748
00:35:11,730 --> 00:35:15,390
in there and figure out what values they

749
00:35:13,170 --> 00:35:17,190
had so you<font color="#E5E5E5"> have to have something called</font>

750
00:35:15,390 --> 00:35:19,529
like a memory<font color="#E5E5E5"> saver which that functions</font>

751
00:35:17,190 --> 00:35:22,560
like a screen saver but<font color="#E5E5E5"> for a memory to</font>

752
00:35:19,530 --> 00:35:28,490
make sure that<font color="#E5E5E5"> it doesn't burn in all</font>

753
00:35:22,560 --> 00:35:33,779
right and you can also do things besides

754
00:35:28,490 --> 00:35:35,549
attacks exactly so this is<font color="#CCCCCC"> a technique</font>

755
00:35:33,780 --> 00:35:37,920
<font color="#CCCCCC">called clock skew fingerprinting where</font>

756
00:35:35,550 --> 00:35:38,790
say you have a bunch<font color="#E5E5E5"> of computers that</font>

757
00:35:37,920 --> 00:35:41,100
are all the same make

758
00:35:38,790 --> 00:35:43,230
model behind<font color="#E5E5E5"> some</font><font color="#CCCCCC"> matted firewall or</font>

759
00:35:41,100 --> 00:35:45,569
whatever and you wanted to<font color="#E5E5E5"> try telling</font>

760
00:35:43,230 --> 00:35:48,450
them<font color="#E5E5E5"> apart well if you send them a whole</font>

761
00:35:45,570 --> 00:35:51,870
bunch of if you ask if you keep asking

762
00:35:48,450 --> 00:35:53,730
them for the time it's possible<font color="#CCCCCC"> to</font>

763
00:35:51,870 --> 00:35:57,620
determine which computer is which

764
00:35:53,730 --> 00:36:00,990
because<font color="#CCCCCC"> it turns out that every computer</font>

765
00:35:57,620 --> 00:36:03,690
internal clock is going<font color="#E5E5E5"> to be slightly</font>

766
00:36:00,990 --> 00:36:06,560
unique and if you take<font color="#E5E5E5"> a whole bunch of</font>

767
00:36:03,690 --> 00:36:09,480
time some measurements and determine

768
00:36:06,560 --> 00:36:11,850
exactly how much faster<font color="#CCCCCC"> or slower their</font>

769
00:36:09,480 --> 00:36:13,980
clock is compared<font color="#E5E5E5"> to your o'clock you'll</font>

770
00:36:11,850 --> 00:36:16,920
get unique results that you can use<font color="#CCCCCC"> to</font>

771
00:36:13,980 --> 00:36:19,710
determine that this would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> the result</font>

772
00:36:16,920 --> 00:36:24,090
of two<font color="#E5E5E5"> different computers instead of</font>

773
00:36:19,710 --> 00:36:26,460
just one and you can<font color="#E5E5E5"> use this technique</font>

774
00:36:24,090 --> 00:36:28,110
or modified variants of it to like

775
00:36:26,460 --> 00:36:33,780
<font color="#CCCCCC">attack poor</font><font color="#E5E5E5"> hidden services at</font><font color="#CCCCCC"> least</font>

776
00:36:28,110 --> 00:36:35,490
theoretically in the past so to fight

777
00:36:33,780 --> 00:36:37,590
against<font color="#E5E5E5"> this kind of attack you could</font>

778
00:36:35,490 --> 00:36:40,229
<font color="#CCCCCC">just try disabling time steps that might</font>

779
00:36:37,590 --> 00:36:42,780
cause certain network problems but I

780
00:36:40,230 --> 00:36:45,030
mean windows does that and it doesn't

781
00:36:42,780 --> 00:36:47,490
<font color="#E5E5E5">seem to kill everything you can add</font>

782
00:36:45,030 --> 00:36:49,920
random noise to your time stamp but that

783
00:36:47,490 --> 00:36:52,950
will just require your attacker to take

784
00:36:49,920 --> 00:36:55,380
more samples and an in more interesting

785
00:36:52,950 --> 00:36:58,230
approach is the<font color="#E5E5E5"> scheme asking which is a</font>

786
00:36:55,380 --> 00:37:00,840
which is<font color="#E5E5E5"> a project where they made a</font>

787
00:36:58,230 --> 00:37:02,400
patch to the links kernel which I'm

788
00:37:00,840 --> 00:37:04,530
showing you in the entirety right here

789
00:37:02,400 --> 00:37:06,540
not very<font color="#E5E5E5"> big it just gives rid of the</font>

790
00:37:04,530 --> 00:37:08,220
three of<font color="#E5E5E5"> these significant bits of</font><font color="#CCCCCC"> the</font>

791
00:37:06,540 --> 00:37:10,050
<font color="#E5E5E5">time stamp so that it can still be</font>

792
00:37:08,220 --> 00:37:12,899
useful for things like pause<font color="#E5E5E5"> or round</font>

793
00:37:10,050 --> 00:37:16,620
trip time estimation while not being as

794
00:37:12,900 --> 00:37:18,930
useful for a fingerprint so its going

795
00:37:16,620 --> 00:37:22,350
over some hardware countermeasures that

796
00:37:18,930 --> 00:37:25,440
you can use you can one approaches to

797
00:37:22,350 --> 00:37:27,779
just suppress any kind of leaking

798
00:37:25,440 --> 00:37:29,550
information that's what my<font color="#E5E5E5"> hiding</font>

799
00:37:27,780 --> 00:37:34,920
category is here so things like

800
00:37:29,550 --> 00:37:36,570
shielding or using filters or making

801
00:37:34,920 --> 00:37:38,370
sure you have an instruction set

802
00:37:36,570 --> 00:37:41,730
architecture that supports constant time

803
00:37:38,370 --> 00:37:43,589
instruction execution and<font color="#E5E5E5"> I always</font>

804
00:37:41,730 --> 00:37:47,310
<font color="#E5E5E5">forget what that key is for some reason</font>

805
00:37:43,590 --> 00:37:49,380
<font color="#E5E5E5">Oh special logic</font><font color="#CCCCCC"> Styles a particular</font>

806
00:37:47,310 --> 00:37:51,840
example is called bounce<font color="#CCCCCC"> darrell logic</font>

807
00:37:49,380 --> 00:37:52,710
where instead of<font color="#E5E5E5"> just having one wire</font>

808
00:37:51,840 --> 00:37:54,990
representing about

809
00:37:52,710 --> 00:37:58,950
you have to and they'll be opposite so

810
00:37:54,990 --> 00:38:00,209
that if it's a one will be you so if so

811
00:37:58,950 --> 00:38:01,410
that the power consumption will always

812
00:38:00,210 --> 00:38:02,910
remain the<font color="#E5E5E5"> same because they'll have</font><font color="#CCCCCC"> to</font>

813
00:38:01,410 --> 00:38:04,259
be a one and A zero no matter whether

814
00:38:02,910 --> 00:38:07,259
it's supposed<font color="#CCCCCC"> to represent a one or a</font>

815
00:38:04,260 --> 00:38:11,010
zero that make any sense another

816
00:38:07,260 --> 00:38:13,170
approach<font color="#E5E5E5"> is to just try adding noise to</font>

817
00:38:11,010 --> 00:38:15,780
your system so it's harder people to

818
00:38:13,170 --> 00:38:17,880
measure it so jamming and the like but

819
00:38:15,780 --> 00:38:20,700
that<font color="#CCCCCC"> just takes more tries before you</font>

820
00:38:17,880 --> 00:38:22,050
can average away<font color="#E5E5E5"> the noise and then just</font>

821
00:38:20,700 --> 00:38:25,669
stopping people from accessing your

822
00:38:22,050 --> 00:38:30,240
systems by using like<font color="#E5E5E5"> tamper resistant</font>

823
00:38:25,670 --> 00:38:32,670
processors or or making sure that no<font color="#CCCCCC"> one</font>

824
00:38:30,240 --> 00:38:36,720
can just waltz in and poke around<font color="#E5E5E5"> your</font>

825
00:38:32,670 --> 00:38:38,760
systems for software countermeasures the

826
00:38:36,720 --> 00:38:41,310
approach is generally fall into ensuring

827
00:38:38,760 --> 00:38:43,859
that your programs run with a constant

828
00:38:41,310 --> 00:38:52,619
execution time that's where our branches

829
00:38:43,859 --> 00:38:54,930
code for instance went and I'm<font color="#CCCCCC"> print you</font>

830
00:38:52,619 --> 00:38:57,900
<font color="#CCCCCC">can also try inducing noise on</font>

831
00:38:54,930 --> 00:39:00,868
measurements in software about shuffling

832
00:38:57,900 --> 00:39:04,530
the operations or even doing random

833
00:39:00,869 --> 00:39:06,560
delays or dummy operations and also

834
00:39:04,530 --> 00:39:08,880
<font color="#CCCCCC">include that</font><font color="#E5E5E5"> we randomizing outputs like</font>

835
00:39:06,560 --> 00:39:12,180
randomizing your time stamp counter

836
00:39:08,880 --> 00:39:18,180
every time you start a new<font color="#E5E5E5"> TCP</font>

837
00:39:12,180 --> 00:39:21,118
connection and a<font color="#E5E5E5"> really</font><font color="#CCCCCC"> good attack I</font>

838
00:39:18,180 --> 00:39:23,609
mean<font color="#E5E5E5"> really good tactic is to limit your</font>

839
00:39:21,119 --> 00:39:25,440
key exposure so make sure you change

840
00:39:23,609 --> 00:39:27,930
your key before someone is able to break

841
00:39:25,440 --> 00:39:34,080
into it and get it<font color="#CCCCCC"> going on</font><font color="#E5E5E5"> these</font>

842
00:39:27,930 --> 00:39:35,190
<font color="#E5E5E5">attacks you can also work on accepting</font>

843
00:39:34,080 --> 00:39:37,680
that you're going<font color="#E5E5E5"> to leak lots of</font>

844
00:39:35,190 --> 00:39:39,300
information but just realize<font color="#CCCCCC"> that there</font>

845
00:39:37,680 --> 00:39:40,649
might be ways that you can make the

846
00:39:39,300 --> 00:39:42,930
information<font color="#CCCCCC"> that you leaked not</font>

847
00:39:40,650 --> 00:39:45,060
correlated with anything useful that's

848
00:39:42,930 --> 00:39:46,348
what the masking is all about and when

849
00:39:45,060 --> 00:39:49,560
it<font color="#E5E5E5"> comes down to it encryption</font>

850
00:39:46,349 --> 00:39:51,210
obfuscation or like that as well<font color="#E5E5E5"> and for</font>

851
00:39:49,560 --> 00:39:53,759
follow<font color="#E5E5E5"> text again we just need to detect</font>

852
00:39:51,210 --> 00:39:57,839
errors not necessarily easy to do this

853
00:39:53,760 --> 00:40:00,180
in software and the best advice though

854
00:39:57,839 --> 00:40:02,490
of all is not<font color="#E5E5E5"> to keep a secret in the</font>

855
00:40:00,180 --> 00:40:04,589
first place but that's not<font color="#CCCCCC"> always</font>

856
00:40:02,490 --> 00:40:06,270
applicable but<font color="#E5E5E5"> sometimes we forget about</font>

857
00:40:04,589 --> 00:40:11,940
that<font color="#E5E5E5"> and just store everything</font>

858
00:40:06,270 --> 00:40:13,650
the hon test later so so this<font color="#E5E5E5"> talk has a</font>

859
00:40:11,940 --> 00:40:17,310
lot about cryptography in it and<font color="#E5E5E5"> go</font>

860
00:40:13,650 --> 00:40:19,290
<font color="#CCCCCC">chop-chop cryptographers I'm</font>

861
00:40:17,310 --> 00:40:21,990
mathematicians at heart so I<font color="#E5E5E5"> always like</font>

862
00:40:19,290 --> 00:40:23,550
<font color="#CCCCCC">to do proofs and stuff and you might</font>

863
00:40:21,990 --> 00:40:25,379
notice<font color="#CCCCCC"> that I've just been talking about</font>

864
00:40:23,550 --> 00:40:27,630
attacks and then specific counter

865
00:40:25,380 --> 00:40:29,400
measures to combat them so this<font color="#E5E5E5"> is like</font>

866
00:40:27,630 --> 00:40:31,080
just finding an exploit and patching it

867
00:40:29,400 --> 00:40:34,860
we're not actually doing any real

868
00:40:31,080 --> 00:40:36,810
security engineering here possibly so I

869
00:40:34,860 --> 00:40:39,120
was there some sort of formal way that

870
00:40:36,810 --> 00:40:42,150
you can show that our systems won't be

871
00:40:39,120 --> 00:40:43,740
vulnerable<font color="#E5E5E5"> to attacks even ones that we</font>

872
00:40:42,150 --> 00:40:45,180
don't know about yet and<font color="#E5E5E5"> there's</font>

873
00:40:43,740 --> 00:40:47,040
different people working<font color="#E5E5E5"> on that problem</font>

874
00:40:45,180 --> 00:40:49,020
several different theories and things

875
00:40:47,040 --> 00:40:50,779
you<font color="#E5E5E5"> can look at if you're interested in</font>

876
00:40:49,020 --> 00:40:53,790
<font color="#E5E5E5">that but I won't talk about them here</font>

877
00:40:50,780 --> 00:40:56,310
but some interesting result so<font color="#E5E5E5"> that our</font>

878
00:40:53,790 --> 00:40:58,560
tools they research grade as far as I

879
00:40:56,310 --> 00:41:01,470
know there are any real commercial ones

880
00:40:58,560 --> 00:41:03,750
but that tried to automatically apply

881
00:41:01,470 --> 00:41:05,370
certain countermeasures here to your

882
00:41:03,750 --> 00:41:11,820
code on areas that you would market

883
00:41:05,370 --> 00:41:12,839
sensitive and you don't necessarily want

884
00:41:11,820 --> 00:41:15,600
<font color="#CCCCCC">to always implement these</font>

885
00:41:12,840 --> 00:41:17,490
countermeasures and because there's

886
00:41:15,600 --> 00:41:20,160
<font color="#E5E5E5">always trade-offs to be made it's going</font>

887
00:41:17,490 --> 00:41:21,839
<font color="#E5E5E5">to cost more money eventually your codes</font>

888
00:41:20,160 --> 00:41:23,910
going to be more<font color="#E5E5E5"> complicated so when</font>

889
00:41:21,840 --> 00:41:25,290
someone<font color="#E5E5E5"> tries to debug it or fix it when</font>

890
00:41:23,910 --> 00:41:28,069
there's an error they're<font color="#E5E5E5"> not going to</font>

891
00:41:25,290 --> 00:41:31,820
<font color="#E5E5E5">have any idea what you're</font><font color="#CCCCCC"> doing and</font>

892
00:41:28,070 --> 00:41:34,200
it'll take it more time to run and

893
00:41:31,820 --> 00:41:36,150
another<font color="#E5E5E5"> thing that's often overlooked is</font>

894
00:41:34,200 --> 00:41:38,279
that a lot of<font color="#E5E5E5"> these countermeasures like</font>

895
00:41:36,150 --> 00:41:39,750
masking require you to use lots<font color="#E5E5E5"> of extra</font>

896
00:41:38,280 --> 00:41:45,210
random numbers which aren't always in

897
00:41:39,750 --> 00:41:47,340
high supply so yeah and a particularly

898
00:41:45,210 --> 00:41:49,530
bad thing is that sometimes adding one

899
00:41:47,340 --> 00:41:51,180
of these countermeasures can invert<font color="#CCCCCC"> Lee</font>

900
00:41:49,530 --> 00:41:54,360
make it easier<font color="#E5E5E5"> to do enough different</font>

901
00:41:51,180 --> 00:41:56,609
attack so we need to just<font color="#E5E5E5"> keep in mind</font>

902
00:41:54,360 --> 00:41:58,860
<font color="#CCCCCC">that an encryption algorithm needs to be</font>

903
00:41:56,610 --> 00:42:01,400
just as efficient to run as it is

904
00:41:58,860 --> 00:42:06,900
inefficient<font color="#E5E5E5"> to crack although maybe not</font>

905
00:42:01,400 --> 00:42:08,310
quite that severe so a lot<font color="#CCCCCC"> of times you</font>

906
00:42:06,900 --> 00:42:10,350
might get<font color="#E5E5E5"> the impression that these are</font>

907
00:42:08,310 --> 00:42:12,090
just theoretical things that don't

908
00:42:10,350 --> 00:42:15,600
really matter to the real rules<font color="#E5E5E5"> all the</font>

909
00:42:12,090 --> 00:42:17,490
time but intelligence agencies have<font color="#CCCCCC"> been</font>

910
00:42:15,600 --> 00:42:19,080
exploiting the side shell and tax since

911
00:42:17,490 --> 00:42:20,058
the days of sacre machines<font color="#CCCCCC"> I might not</font>

912
00:42:19,080 --> 00:42:22,729
<font color="#E5E5E5">actually do</font>

913
00:42:20,059 --> 00:42:25,009
a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> use in them in</font><font color="#CCCCCC"> practice but</font>

914
00:42:22,729 --> 00:42:28,009
they have capabilities to do it I just

915
00:42:25,009 --> 00:42:30,979
<font color="#E5E5E5">read a while ago that like the CIA and</font>

916
00:42:28,009 --> 00:42:33,789
stuff was trying to do differential

917
00:42:30,979 --> 00:42:37,519
power analysis attacks on yeah um

918
00:42:33,789 --> 00:42:39,289
Apple's iPhones a bootloader encryption

919
00:42:37,519 --> 00:42:40,729
I'm not<font color="#CCCCCC"> sure if that's</font><font color="#E5E5E5"> true or not I</font>

920
00:42:39,289 --> 00:42:44,719
guess there's part of<font color="#E5E5E5"> the black budget</font>

921
00:42:40,729 --> 00:42:46,819
revelation or something so a while ago

922
00:42:44,719 --> 00:42:48,589
it used to be that government would

923
00:42:46,819 --> 00:42:51,949
spend billions of<font color="#E5E5E5"> dollars shielding</font>

924
00:42:48,589 --> 00:42:57,109
everything to tempest standards and

925
00:42:51,949 --> 00:42:58,880
still a big business today and when we

926
00:42:57,109 --> 00:43:02,119
try<font color="#CCCCCC"> to create new cryptographic</font>

927
00:42:58,880 --> 00:43:04,249
standards looking at their resistance<font color="#CCCCCC"> to</font>

928
00:43:02,119 --> 00:43:06,999
<font color="#E5E5E5">side channels is still a major part of</font>

929
00:43:04,249 --> 00:43:09,948
<font color="#E5E5E5">the process so we're definitely</font>

930
00:43:06,999 --> 00:43:11,899
concerned about that aspect of them

931
00:43:09,949 --> 00:43:15,349
because some algorithms are inherently

932
00:43:11,900 --> 00:43:20,959
more secure against these kinds of

933
00:43:15,349 --> 00:43:22,849
attacks than others mmm so there are

934
00:43:20,959 --> 00:43:24,649
several different companies are just

935
00:43:22,849 --> 00:43:26,839
devoted to this particular<font color="#E5E5E5"> area of</font>

936
00:43:24,650 --> 00:43:28,670
<font color="#E5E5E5">research probably the most famous of</font>

937
00:43:26,839 --> 00:43:30,769
them is cryptography research which is

938
00:43:28,670 --> 00:43:33,289
where differential power analysis was

939
00:43:30,769 --> 00:43:34,910
invented and they hold lots of patents

940
00:43:33,289 --> 00:43:37,749
on stuff<font color="#E5E5E5"> and some people have said</font><font color="#CCCCCC"> that</font>

941
00:43:34,910 --> 00:43:39,558
so reason why you're not seeing as many

942
00:43:37,749 --> 00:43:40,759
systems use some of these

943
00:43:39,559 --> 00:43:43,579
countermeasures because<font color="#CCCCCC"> we've always</font>

944
00:43:40,759 --> 00:43:46,640
under patent I'm not<font color="#E5E5E5"> sure how true that</font>

945
00:43:43,579 --> 00:43:49,339
is but you do see these kind<font color="#CCCCCC"> of measures</font>

946
00:43:46,640 --> 00:43:52,129
used a lot in things like smart cards or

947
00:43:49,339 --> 00:43:53,839
banking card satellite TV cards things

948
00:43:52,130 --> 00:43:56,599
like<font color="#CCCCCC"> that where people are concerned</font>

949
00:43:53,839 --> 00:43:58,459
<font color="#E5E5E5">about people actually using these</font>

950
00:43:56,599 --> 00:44:00,650
attacks on them enough that they

951
00:43:58,459 --> 00:44:02,868
<font color="#CCCCCC">actually going to take action where you</font>

952
00:44:00,650 --> 00:44:06,589
don't<font color="#E5E5E5"> see</font><font color="#CCCCCC"> it a whole lot are on consumer</font>

953
00:44:02,869 --> 00:44:08,890
devices it's like your phone but keep

954
00:44:06,589 --> 00:44:12,619
are currently looking<font color="#E5E5E5"> at exploiting</font>

955
00:44:08,890 --> 00:44:15,109
those kinds of vulnerabilities on

956
00:44:12,619 --> 00:44:19,699
consumer devices with interesting

957
00:44:15,109 --> 00:44:21,529
results so one countermeasure that you

958
00:44:19,699 --> 00:44:23,299
do see all over<font color="#E5E5E5"> the place our timing</font>

959
00:44:21,529 --> 00:44:25,819
attack countermeasures and<font color="#CCCCCC"> that's</font>

960
00:44:23,299 --> 00:44:29,390
<font color="#CCCCCC">because it can be</font><font color="#E5E5E5"> done remotely so very</font>

961
00:44:25,819 --> 00:44:32,499
much more likely to<font color="#E5E5E5"> be attacked because</font>

962
00:44:29,390 --> 00:44:32,499
you don't<font color="#CCCCCC"> have to be right next to them</font>

963
00:44:32,609 --> 00:44:36,250
so if you want<font color="#E5E5E5"> to know if your</font>

964
00:44:34,420 --> 00:44:39,550
particular device is protected against

965
00:44:36,250 --> 00:44:41,260
<font color="#E5E5E5">hardware attacks you can try testing</font>

966
00:44:39,550 --> 00:44:43,210
yourself but then you need to be an

967
00:44:41,260 --> 00:44:45,339
expert<font color="#CCCCCC"> in it because I certainly</font>

968
00:44:43,210 --> 00:44:46,570
wouldn't know how to test it and I at

969
00:44:45,339 --> 00:44:49,000
<font color="#E5E5E5">least knew enough to put</font><font color="#CCCCCC"> this talk</font>

970
00:44:46,570 --> 00:44:51,369
together so it takes a lot of expertise

971
00:44:49,000 --> 00:44:52,599
to do that so you might just<font color="#E5E5E5"> hire</font>

972
00:44:51,369 --> 00:44:54,430
someone else to do it but that<font color="#E5E5E5"> might</font>

973
00:44:52,599 --> 00:44:56,859
cost you too much money so maybe you

974
00:44:54,430 --> 00:44:58,890
decide you're just going to hope your

975
00:44:56,859 --> 00:45:00,848
manufacturer knows what they're doing

976
00:44:58,890 --> 00:45:03,400
well a different approach might be to

977
00:45:00,849 --> 00:45:05,640
see if it has certifications a lot of

978
00:45:03,400 --> 00:45:10,570
government agencies enlike require

979
00:45:05,640 --> 00:45:13,150
hardware to pass certain tests and even

980
00:45:10,570 --> 00:45:14,890
consumer devices like FCC regulations

981
00:45:13,150 --> 00:45:18,190
they're not really designed for security

982
00:45:14,890 --> 00:45:19,299
but<font color="#E5E5E5"> they can at least have some</font>

983
00:45:18,190 --> 00:45:21,339
assurance that your thing won't be

984
00:45:19,300 --> 00:45:29,880
emitting such a loud signal you can't

985
00:45:21,339 --> 00:45:32,020
watch<font color="#CCCCCC"> TV the FIPS 140-2 is more of the</font>

986
00:45:29,880 --> 00:45:34,660
certification against tampering attacks

987
00:45:32,020 --> 00:45:37,599
and side-channel attacks but there's

988
00:45:34,660 --> 00:45:40,598
other things like your secret classified

989
00:45:37,599 --> 00:45:42,369
government<font color="#CCCCCC"> Tempest standards that even</font>

990
00:45:40,599 --> 00:45:44,589
though we don't<font color="#E5E5E5"> know what they say are</font>

991
00:45:42,369 --> 00:45:47,829
responsible in part for that billions<font color="#E5E5E5"> of</font>

992
00:45:44,589 --> 00:45:50,319
dollars spent<font color="#E5E5E5"> on shielding everything so</font>

993
00:45:47,829 --> 00:45:52,599
they<font color="#E5E5E5"> might have some</font><font color="#CCCCCC"> interesting things</font>

994
00:45:50,319 --> 00:45:55,390
in them there's also a recent ITU

995
00:45:52,599 --> 00:45:58,359
standard called<font color="#CCCCCC"> K point eight for that</font>

996
00:45:55,390 --> 00:46:03,750
deals with<font color="#CCCCCC"> tempest attacks mitigations</font>

997
00:45:58,359 --> 00:46:08,950
for general people it's not classified

998
00:46:03,750 --> 00:46:10,930
so<font color="#CCCCCC"> we often think of side channel texts</font>

999
00:46:08,950 --> 00:46:14,740
as a bad thing that<font color="#CCCCCC"> we need to just</font>

1000
00:46:10,930 --> 00:46:16,210
suppress no matter what but but<font color="#CCCCCC"> it turns</font>

1001
00:46:14,740 --> 00:46:17,919
out they can<font color="#E5E5E5"> be put to</font><font color="#CCCCCC"> good use every</font>

1002
00:46:16,210 --> 00:46:19,900
now and then there's<font color="#E5E5E5"> a company called PP</font>

1003
00:46:17,920 --> 00:46:22,750
<font color="#E5E5E5">cyber security which was recently</font><font color="#CCCCCC"> in the</font>

1004
00:46:19,900 --> 00:46:25,680
news because they had a thing where they

1005
00:46:22,750 --> 00:46:29,710
would monitor I think the near-field

1006
00:46:25,680 --> 00:46:33,490
uncertain electronic devices like you'd

1007
00:46:29,710 --> 00:46:35,260
use in utilities and that would detect

1008
00:46:33,490 --> 00:46:37,209
it and not<font color="#E5E5E5"> whenever an anomaly happened</font>

1009
00:46:35,260 --> 00:46:40,690
so it function kind of like an<font color="#CCCCCC"> antivirus</font>

1010
00:46:37,210 --> 00:46:42,910
device for embedded systems that wasn't

1011
00:46:40,690 --> 00:46:44,710
hooked up to the device itself so you

1012
00:46:42,910 --> 00:46:45,670
did have some malware on it<font color="#CCCCCC"> you wouldn't</font>

1013
00:46:44,710 --> 00:46:49,030
be able<font color="#E5E5E5"> to attack</font>

1014
00:46:45,670 --> 00:46:52,329
<font color="#CCCCCC">you're anti-malware process and the on</font>

1015
00:46:49,030 --> 00:46:55,720
the website that you can advertise using

1016
00:46:52,329 --> 00:46:58,299
this to secure smartphones<font color="#CCCCCC"> I thought was</font>

1017
00:46:55,720 --> 00:47:01,270
<font color="#CCCCCC">pretty</font><font color="#E5E5E5"> interesting you can also</font><font color="#CCCCCC"> use</font>

1018
00:46:58,299 --> 00:47:02,740
slide channel like techniques to verify

1019
00:47:01,270 --> 00:47:05,859
that software hasn't been tampered with

1020
00:47:02,740 --> 00:47:08,770
so check your<font color="#E5E5E5"> hardware Trojans and</font>

1021
00:47:05,859 --> 00:47:10,450
there's several interesting ideas that

1022
00:47:08,770 --> 00:47:12,220
are kind of related<font color="#E5E5E5"> to this I just think</font>

1023
00:47:10,450 --> 00:47:13,868
<font color="#CCCCCC">I fascinating like for instance mind</font>

1024
00:47:12,220 --> 00:47:15,459
reading your<font color="#E5E5E5"> brain is just a machine</font>

1025
00:47:13,869 --> 00:47:17,319
when it comes down<font color="#E5E5E5"> to it so it should be</font>

1026
00:47:15,460 --> 00:47:19,390
vulnerable<font color="#E5E5E5"> to all sorts of side-channel</font>

1027
00:47:17,319 --> 00:47:21,579
attacks as well that's<font color="#E5E5E5"> basically what we</font>

1028
00:47:19,390 --> 00:47:23,259
call neuroscience today and maybe

1029
00:47:21,579 --> 00:47:26,589
<font color="#E5E5E5">someday we'll get good at it and we can</font>

1030
00:47:23,260 --> 00:47:27,940
like do sci-fi like mind-reading and it

1031
00:47:26,589 --> 00:47:29,680
makes you<font color="#E5E5E5"> wonder is there any kind of</font>

1032
00:47:27,940 --> 00:47:31,150
countermeasure for that like you see

1033
00:47:29,680 --> 00:47:33,279
sometimes the movies people<font color="#E5E5E5"> going to go</font>

1034
00:47:31,150 --> 00:47:36,099
<font color="#E5E5E5">this weird kwasi mystical training thing</font>

1035
00:47:33,280 --> 00:47:38,440
hoping<font color="#CCCCCC"> that they can defend themselves</font>

1036
00:47:36,099 --> 00:47:42,130
against mine reading device is anything

1037
00:47:38,440 --> 00:47:45,609
like that even<font color="#E5E5E5"> possible I think the</font>

1038
00:47:42,130 --> 00:47:47,920
research on using that low frequency

1039
00:47:45,609 --> 00:47:50,799
noise like an acoustic analysis is

1040
00:47:47,920 --> 00:47:52,690
pretty fascinating<font color="#E5E5E5"> because we're looking</font>

1041
00:47:50,799 --> 00:47:54,609
at low bandwidth signals instead of high

1042
00:47:52,690 --> 00:47:58,660
ones like we normally would and I opens

1043
00:47:54,609 --> 00:48:00,640
up new possibilities and looking at

1044
00:47:58,660 --> 00:48:02,799
attacking just ordinary devices instead

1045
00:48:00,640 --> 00:48:06,250
of things are specifically designed to

1046
00:48:02,799 --> 00:48:10,509
be used in high<font color="#CCCCCC"> security environments is</font>

1047
00:48:06,250 --> 00:48:12,280
always fun so I like to<font color="#E5E5E5"> think of myself</font>

1048
00:48:10,510 --> 00:48:13,809
as a hobbyist about this because I'm

1049
00:48:12,280 --> 00:48:18,520
certainly<font color="#E5E5E5"> no mathematician or anything</font>

1050
00:48:13,809 --> 00:48:20,849
like that but it's a tough copy to get

1051
00:48:18,520 --> 00:48:24,579
into I'll admit<font color="#CCCCCC"> that</font><font color="#E5E5E5"> much because it's</font>

1052
00:48:20,849 --> 00:48:27,099
you might think that you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to spend</font>

1053
00:48:24,579 --> 00:48:29,079
<font color="#E5E5E5">lots of money on it but</font><font color="#CCCCCC"> it's not really</font>

1054
00:48:27,099 --> 00:48:31,990
<font color="#CCCCCC">the money it's the knowledge to pull it</font>

1055
00:48:29,079 --> 00:48:33,400
off I think so there's cheap tools out

1056
00:48:31,990 --> 00:48:36,549
there that you can use like

1057
00:48:33,400 --> 00:48:38,440
software-defined radios to do certain

1058
00:48:36,549 --> 00:48:41,170
<font color="#CCCCCC">Tempest attacks without requiring</font>

1059
00:48:38,440 --> 00:48:43,240
specialized equipment and you can like

1060
00:48:41,170 --> 00:48:44,740
there's a bus part<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> put on there but</font>

1061
00:48:43,240 --> 00:48:46,390
what I really<font color="#E5E5E5"> excited about is this</font>

1062
00:48:44,740 --> 00:48:49,839
thing called the chip whisper or light

1063
00:48:46,390 --> 00:48:53,680
so<font color="#CCCCCC"> we're advertising it to expect</font><font color="#E5E5E5"> it to</font>

1064
00:48:49,839 --> 00:48:56,230
<font color="#CCCCCC">retail about 180 dollars and you can do</font>

1065
00:48:53,680 --> 00:48:58,770
<font color="#E5E5E5">some limited amount of differential</font>

1066
00:48:56,230 --> 00:49:01,080
power analysis attacks and glitching

1067
00:48:58,770 --> 00:49:02,670
tax which are related<font color="#E5E5E5"> to that with this</font>

1068
00:49:01,080 --> 00:49:07,549
<font color="#E5E5E5">and there's a Kickstarter going on for</font>

1069
00:49:02,670 --> 00:49:11,370
it right now if you're interested so um

1070
00:49:07,550 --> 00:49:14,100
so I'm really<font color="#E5E5E5"> interested in getting some</font>

1071
00:49:11,370 --> 00:49:15,720
resources put together to make this kind

1072
00:49:14,100 --> 00:49:18,330
of thing accessible to ordinary people

1073
00:49:15,720 --> 00:49:21,689
like<font color="#E5E5E5"> me that don't have happen to have a</font>

1074
00:49:18,330 --> 00:49:23,520
PhD in mathematics and so I just barely

1075
00:49:21,690 --> 00:49:26,010
bought this website here I really know

1076
00:49:23,520 --> 00:49:27,740
what<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna do with it yet I want to</font>

1077
00:49:26,010 --> 00:49:31,200
make it into some sort of resource for

1078
00:49:27,740 --> 00:49:33,479
actually doing these kinds of hardware

1079
00:49:31,200 --> 00:49:36,000
<font color="#E5E5E5">attacks for hobbyists because right</font><font color="#CCCCCC"> now</font>

1080
00:49:33,480 --> 00:49:41,010
there's not<font color="#E5E5E5"> very many good resources for</font>

1081
00:49:36,000 --> 00:49:43,470
that like there's no like 25 hardware's

1082
00:49:41,010 --> 00:49:45,210
attacks for the evil genius type books

1083
00:49:43,470 --> 00:49:48,629
out there that'd<font color="#E5E5E5"> be really nice to have</font>

1084
00:49:45,210 --> 00:49:52,170
<font color="#E5E5E5">them so my goal is to kind of make</font>

1085
00:49:48,630 --> 00:49:54,510
something like<font color="#CCCCCC"> that and hopefully next</font>

1086
00:49:52,170 --> 00:49:56,850
year I can bring some<font color="#E5E5E5"> of them to our</font>

1087
00:49:54,510 --> 00:49:58,110
<font color="#CCCCCC">next version of these sides as you can</font>

1088
00:49:56,850 --> 00:50:02,390
try looking at some<font color="#E5E5E5"> of these for</font>

1089
00:49:58,110 --> 00:50:02,390
yourself so you have any questions

1090
00:50:05,510 --> 00:50:09,380
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> thank you for your attention</font>

