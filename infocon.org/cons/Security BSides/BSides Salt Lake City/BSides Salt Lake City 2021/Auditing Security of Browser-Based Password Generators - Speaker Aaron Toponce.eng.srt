1
00:00:02,960 --> 00:00:04,720
a couple years ago i

2
00:00:04,720 --> 00:00:06,879
had a laptop that vga and it was always

3
00:00:06,879 --> 00:00:09,040
fun trying to get that to work

4
00:00:09,040 --> 00:00:11,519
all right um so i'm going to talk about

5
00:00:11,519 --> 00:00:12,639
auditing

6
00:00:12,639 --> 00:00:15,360
web-based or browser-based

7
00:00:15,360 --> 00:00:17,680
password generators just a little bit of

8
00:00:17,680 --> 00:00:19,039
a warning

9
00:00:19,039 --> 00:00:21,520
i have some explicit slides i'm using

10
00:00:21,520 --> 00:00:23,920
memes from ethan birds

11
00:00:23,920 --> 00:00:25,599
so if you decide that vulgarity or

12
00:00:25,599 --> 00:00:27,039
profanity

13
00:00:27,039 --> 00:00:28,960
is not for you i will not be offended if

14
00:00:28,960 --> 00:00:30,720
you decide to leave that's perfectly

15
00:00:30,720 --> 00:00:32,079
okay

16
00:00:32,079 --> 00:00:34,640
otherwise be prepared for my god damned

17
00:00:34,640 --> 00:00:36,640
slides

18
00:00:36,640 --> 00:00:39,120
uh first a little bit of background

19
00:00:39,120 --> 00:00:41,440
i work for x mission it's a local isp

20
00:00:41,440 --> 00:00:43,360
out of salt lake city

21
00:00:43,360 --> 00:00:45,440
and about five or six seven years ago we

22
00:00:45,440 --> 00:00:47,600
hired a junior web developer fresh out

23
00:00:47,600 --> 00:00:49,280
of high school

24
00:00:49,280 --> 00:00:53,360
and he was highly inexperienced i mean

25
00:00:53,360 --> 00:00:54,640
coming out of high school i guess it's

26
00:00:54,640 --> 00:00:56,320
not too surprising

27
00:00:56,320 --> 00:00:59,280
but he was also kind of cocky and his

28
00:00:59,280 --> 00:01:01,760
first task was to develop a password

29
00:01:01,760 --> 00:01:03,840
generator for our customers

30
00:01:03,840 --> 00:01:05,600
we have a control panel where they can

31
00:01:05,600 --> 00:01:07,920
manage their account

32
00:01:07,920 --> 00:01:09,760
including changing their password we

33
00:01:09,760 --> 00:01:12,799
wanted to provide a

34
00:01:12,799 --> 00:01:14,640
password generator

35
00:01:14,640 --> 00:01:16,560
in the web-based control panel and so

36
00:01:16,560 --> 00:01:18,479
that was his first task so he was asked

37
00:01:18,479 --> 00:01:19,920
to work with me

38
00:01:19,920 --> 00:01:22,400
i have a background

39
00:01:22,400 --> 00:01:24,960
in mathematics and cryptography

40
00:01:24,960 --> 00:01:27,119
as well as security

41
00:01:27,119 --> 00:01:29,280
so we were working on banging this out

42
00:01:29,280 --> 00:01:30,479
and getting this

43
00:01:30,479 --> 00:01:32,000
working

44
00:01:32,000 --> 00:01:33,759
and unfortunately he wasn't listening to

45
00:01:33,759 --> 00:01:35,520
the math i don't know what his

46
00:01:35,520 --> 00:01:37,439
mathematics background was but i have a

47
00:01:37,439 --> 00:01:39,040
degree in mathematics it's kind of my

48
00:01:39,040 --> 00:01:41,520
passion and he wasn't

49
00:01:41,520 --> 00:01:43,360
trusting it he wasn't trusting it the

50
00:01:43,360 --> 00:01:45,920
math was holding up

51
00:01:45,920 --> 00:01:48,799
and he trusted his intuition more so we

52
00:01:48,799 --> 00:01:51,840
ended up banging heads and locking horns

53
00:01:51,840 --> 00:01:53,439
during this project

54
00:01:53,439 --> 00:01:54,960
regardless though we still ended up with

55
00:01:54,960 --> 00:01:57,840
a decent result and this is a screenshot

56
00:01:57,840 --> 00:02:00,079
if you go to xmission.com generator you

57
00:02:00,079 --> 00:02:02,079
can play around with it

58
00:02:02,079 --> 00:02:04,320
but you're presented with 15 random

59
00:02:04,320 --> 00:02:07,360
words you have to select at least three

60
00:02:07,360 --> 00:02:09,520
and then you just click generate and

61
00:02:09,520 --> 00:02:11,200
every time you click generate a new

62
00:02:11,200 --> 00:02:14,080
password pops up beneath the one above

63
00:02:14,080 --> 00:02:14,800
it

64
00:02:14,800 --> 00:02:17,360
and it also will

65
00:02:17,360 --> 00:02:19,360
separate those three words or more if

66
00:02:19,360 --> 00:02:20,640
you choose more

67
00:02:20,640 --> 00:02:24,480
with numbers and special characters

68
00:02:24,640 --> 00:02:27,760
from the technical side of things

69
00:02:27,760 --> 00:02:29,760
the words are coming from a word list of

70
00:02:29,760 --> 00:02:32,560
11 121 words

71
00:02:32,560 --> 00:02:34,319
and they're shuffled

72
00:02:34,319 --> 00:02:37,360
and then we give you say the top 15 out

73
00:02:37,360 --> 00:02:38,560
of that shuffle that means there won't

74
00:02:38,560 --> 00:02:41,120
be any duplicates right in the the

75
00:02:41,120 --> 00:02:43,440
presentation of the 15 words

76
00:02:43,440 --> 00:02:44,720
you have to collect select at least

77
00:02:44,720 --> 00:02:46,239
three you can select four more if you

78
00:02:46,239 --> 00:02:47,920
want

79
00:02:47,920 --> 00:02:49,360
and like i mentioned the words are

80
00:02:49,360 --> 00:02:52,080
separated by digits and

81
00:02:52,080 --> 00:02:53,920
special characters punctuation symbols

82
00:02:53,920 --> 00:02:56,239
for everyone column i'm only choosing 24

83
00:02:56,239 --> 00:02:59,599
of them rather than the full set

84
00:02:59,760 --> 00:03:01,840
two digits have to be at least present

85
00:03:01,840 --> 00:03:03,360
in the result we require at least two

86
00:03:03,360 --> 00:03:04,720
numbers

87
00:03:04,720 --> 00:03:07,360
so from the lowest security margin

88
00:03:07,360 --> 00:03:10,879
if the user only selects three passwords

89
00:03:10,879 --> 00:03:13,680
and the separated characters are all

90
00:03:13,680 --> 00:03:16,319
digits we have four digits then i can

91
00:03:16,319 --> 00:03:18,159
find out what the security margin is

92
00:03:18,159 --> 00:03:21,360
using the log base 2 function so i can

93
00:03:21,360 --> 00:03:23,840
take the log base 2 of 11 121 times it

94
00:03:23,840 --> 00:03:26,239
by 3 for the three words log base 2 of

95
00:03:26,239 --> 00:03:29,840
10 times it by 4 and i get about 53 bits

96
00:03:29,840 --> 00:03:31,680
of security

97
00:03:31,680 --> 00:03:34,159
so the question is is 53 bits of

98
00:03:34,159 --> 00:03:35,680
security enough

99
00:03:35,680 --> 00:03:37,840
is this giving me the necessary security

100
00:03:37,840 --> 00:03:40,400
for my customers

101
00:03:40,400 --> 00:03:42,480
if you go to that url and i only created

102
00:03:42,480 --> 00:03:44,799
it for the slides i'm not interested in

103
00:03:44,799 --> 00:03:46,640
tracking your clicks

104
00:03:46,640 --> 00:03:48,720
so if someone wants to share the result

105
00:03:48,720 --> 00:03:50,400
with the rest of the class that's

106
00:03:50,400 --> 00:03:52,360
perfectly fine but if you go to

107
00:03:52,360 --> 00:03:54,159
tinyurl.com

108
00:03:54,159 --> 00:03:55,040
8

109
00:03:55,040 --> 00:03:57,120
gtx 1080

110
00:03:57,120 --> 00:04:00,560
this is a github gist basically a large

111
00:04:00,560 --> 00:04:01,680
paste

112
00:04:01,680 --> 00:04:04,400
of a hash cache benchmark from

113
00:04:04,400 --> 00:04:06,560
professional password cracker

114
00:04:06,560 --> 00:04:08,080
jeremy ghazni

115
00:04:08,080 --> 00:04:13,519
and he's got eight nvidia gtx 1080 gpus

116
00:04:13,519 --> 00:04:16,238
that he's benchmarking with hashcat

117
00:04:16,238 --> 00:04:20,000
the fastest hash in his result is ntlm

118
00:04:20,000 --> 00:04:21,600
no surprise

119
00:04:21,600 --> 00:04:24,960
and those eight gpus in concert can work

120
00:04:24,960 --> 00:04:28,479
through 513 gigahashes

121
00:04:28,479 --> 00:04:29,320
or

122
00:04:29,320 --> 00:04:31,840
513.1 billion

123
00:04:31,840 --> 00:04:34,080
ntlm hashes per second

124
00:04:34,080 --> 00:04:34,960
okay

125
00:04:34,960 --> 00:04:37,759
so if my passwords were hashed with ntlm

126
00:04:37,759 --> 00:04:39,199
at xmission

127
00:04:39,199 --> 00:04:41,840
uh what would those 53 bits of security

128
00:04:41,840 --> 00:04:44,479
provide my customers

129
00:04:44,479 --> 00:04:47,360
well 513 billion hashes per second is

130
00:04:47,360 --> 00:04:49,880
effectively exhausting the key space of

131
00:04:49,880 --> 00:04:53,280
38.9 bits of security every second and i

132
00:04:53,280 --> 00:04:54,880
broke it down you can see it by second

133
00:04:54,880 --> 00:04:57,680
minute hour day up to about 63.8 bits

134
00:04:57,680 --> 00:05:00,080
per year now i'm assuming in this case

135
00:05:00,080 --> 00:05:02,880
that he's not blindly attacking the ntlm

136
00:05:02,880 --> 00:05:05,520
password hash that he has a copy of the

137
00:05:05,520 --> 00:05:07,360
11 000 words

138
00:05:07,360 --> 00:05:09,360
he knows about the number and the

139
00:05:09,360 --> 00:05:11,759
character space separation so he's got

140
00:05:11,759 --> 00:05:14,560
an accurate hash cash

141
00:05:14,560 --> 00:05:17,199
hash cat mask

142
00:05:17,199 --> 00:05:20,000
for attacking these hashes okay he's not

143
00:05:20,000 --> 00:05:21,600
going at it blindly

144
00:05:21,600 --> 00:05:23,199
so it would only take him about five

145
00:05:23,199 --> 00:05:26,800
hours to completely guess every possible

146
00:05:26,800 --> 00:05:28,479
combination of passwords that can be

147
00:05:28,479 --> 00:05:30,880
generated with this scheme

148
00:05:30,880 --> 00:05:33,759
five hours is not great

149
00:05:33,759 --> 00:05:35,360
however

150
00:05:35,360 --> 00:05:37,600
yes i forgot the slide so this is to my

151
00:05:37,600 --> 00:05:40,240
co-worker you should stay in school and

152
00:05:40,240 --> 00:05:41,759
remind me why i shouldn't just ignore

153
00:05:41,759 --> 00:05:44,320
your

154
00:05:44,560 --> 00:05:46,720
however xmission doesn't use ntlm we

155
00:05:46,720 --> 00:05:48,479
don't use ntlm to hash our passwords we

156
00:05:48,479 --> 00:05:50,639
use sha 512 crypt and maybe pete doesn't

157
00:05:50,639 --> 00:05:52,720
appreciate me sharing that with you

158
00:05:52,720 --> 00:05:54,400
but we use shaw five shelf crypt with

159
00:05:54,400 --> 00:05:56,720
the default five thousand rounds cost

160
00:05:56,720 --> 00:05:59,440
using that same github gist that jeremy

161
00:05:59,440 --> 00:06:00,960
gasney

162
00:06:00,960 --> 00:06:04,240
provided with his eight gpus

163
00:06:04,240 --> 00:06:06,080
that same benchmark can only work

164
00:06:06,080 --> 00:06:07,840
through

165
00:06:07,840 --> 00:06:10,000
about eighteen hundred eighteen fifty

166
00:06:10,000 --> 00:06:12,800
kilohashes or one point eight

167
00:06:12,800 --> 00:06:14,800
five million hashes

168
00:06:14,800 --> 00:06:17,199
of sha-512 crypts per second which is a

169
00:06:17,199 --> 00:06:20,240
far cry from the 513 billion ntlm we saw

170
00:06:20,240 --> 00:06:22,240
earlier okay

171
00:06:22,240 --> 00:06:24,479
so with the same setup then

172
00:06:24,479 --> 00:06:27,120
he can only exhaust a full key space

173
00:06:27,120 --> 00:06:28,880
again using the correct

174
00:06:28,880 --> 00:06:31,400
hash cap mask he can only exhaust

175
00:06:31,400 --> 00:06:34,720
48.5 bits per year to get up to that

176
00:06:34,720 --> 00:06:36,400
53-bit

177
00:06:36,400 --> 00:06:37,840
benchmark it would actually take him a

178
00:06:37,840 --> 00:06:41,520
full 32 years to exhaust the key space

179
00:06:41,520 --> 00:06:42,800
so

180
00:06:42,800 --> 00:06:44,160
fair enough

181
00:06:44,160 --> 00:06:46,160
i will give credit where credit is due

182
00:06:46,160 --> 00:06:48,720
it turns out that what we have for our

183
00:06:48,720 --> 00:06:49,919
customers

184
00:06:49,919 --> 00:06:50,960
is

185
00:06:50,960 --> 00:06:55,199
a decent result it holds up okay

186
00:06:55,199 --> 00:06:57,280
that got me thinking

187
00:06:57,280 --> 00:06:58,960
here we are working on this project for

188
00:06:58,960 --> 00:07:00,319
x mission

189
00:07:00,319 --> 00:07:03,120
what would i do for a personal project

190
00:07:03,120 --> 00:07:05,039
if i were to design

191
00:07:05,039 --> 00:07:07,520
my own password generator

192
00:07:07,520 --> 00:07:10,080
and i would take my own advice that i

193
00:07:10,080 --> 00:07:11,680
was giving the junior developer when we

194
00:07:11,680 --> 00:07:13,520
were designing x missions

195
00:07:13,520 --> 00:07:15,280
what would mine look like okay what

196
00:07:15,280 --> 00:07:17,199
would my result look like

197
00:07:17,199 --> 00:07:19,120
so initially i knew what i wanted i

198
00:07:19,120 --> 00:07:21,360
wanted a reasonable default security

199
00:07:21,360 --> 00:07:23,840
margin clearly defined okay that was

200
00:07:23,840 --> 00:07:26,000
that was very important to me as a

201
00:07:26,000 --> 00:07:27,599
mathematician

202
00:07:27,599 --> 00:07:29,440
the second i wanted something clean i

203
00:07:29,440 --> 00:07:30,880
wanted something clutter free i didn't

204
00:07:30,880 --> 00:07:32,400
want a lot of switches didn't want a lot

205
00:07:32,400 --> 00:07:33,840
of options i didn't want to confuse

206
00:07:33,840 --> 00:07:36,240
people with the ui which also meant that

207
00:07:36,240 --> 00:07:38,240
i wanted a pleasant user experience i

208
00:07:38,240 --> 00:07:39,520
don't want

209
00:07:39,520 --> 00:07:41,280
to frustrate them and trying to generate

210
00:07:41,280 --> 00:07:42,560
a password

211
00:07:42,560 --> 00:07:44,000
and i came up with some other ideas

212
00:07:44,000 --> 00:07:44,879
obviously i'm going to choose

213
00:07:44,879 --> 00:07:47,280
passphrases so i probably want to

214
00:07:47,280 --> 00:07:49,199
support multiple languages besides just

215
00:07:49,199 --> 00:07:51,440
english can i do that

216
00:07:51,440 --> 00:07:53,919
um is there a way to do

217
00:07:53,919 --> 00:07:57,759
visual versus audible unambiguity in

218
00:07:57,759 --> 00:08:00,560
other words when i present a password

219
00:08:00,560 --> 00:08:02,639
visually is it visually distinct so

220
00:08:02,639 --> 00:08:04,639
there's no confusion as to what each

221
00:08:04,639 --> 00:08:06,720
character is but further what if i was

222
00:08:06,720 --> 00:08:08,560
in a noisy data center and i had to

223
00:08:08,560 --> 00:08:10,080
communicate that password to another

224
00:08:10,080 --> 00:08:10,840
system

225
00:08:10,840 --> 00:08:12,879
administrator can it be verbally

226
00:08:12,879 --> 00:08:15,680
distinct as well so he's not confused

227
00:08:15,680 --> 00:08:17,840
that it could be another word or another

228
00:08:17,840 --> 00:08:19,759
character so these are ideas that are

229
00:08:19,759 --> 00:08:21,199
working through my head

230
00:08:21,199 --> 00:08:22,560
and also different memorability

231
00:08:22,560 --> 00:08:24,400
approaches can i

232
00:08:24,400 --> 00:08:26,800
present the password in such

233
00:08:26,800 --> 00:08:30,560
a way that it's easy to recall later

234
00:08:30,560 --> 00:08:32,399
right

235
00:08:32,399 --> 00:08:34,320
so it's time for me to do some market

236
00:08:34,320 --> 00:08:35,599
research

237
00:08:35,599 --> 00:08:37,599
so the first thing is i did a duckduckgo

238
00:08:37,599 --> 00:08:40,640
search for secure password generator

239
00:08:40,640 --> 00:08:44,000
and the first result is passwords plural

240
00:08:44,000 --> 00:08:46,640
passwordsgenerator.net

241
00:08:46,640 --> 00:08:50,640
and this is a screenshot of that webpage

242
00:08:50,640 --> 00:08:52,959
this is exactly what i don't

243
00:08:52,959 --> 00:08:55,760
want there's a lot of check boxes

244
00:08:55,760 --> 00:08:58,399
there's a lot of text

245
00:08:58,399 --> 00:09:01,040
there's quite a few buttons it just is a

246
00:09:01,040 --> 00:09:03,440
little overwhelming to me the text kind

247
00:09:03,440 --> 00:09:05,279
of blurs together and i just see this

248
00:09:05,279 --> 00:09:07,519
big wall of text i'm not really

249
00:09:07,519 --> 00:09:08,880
interested or motivated to read

250
00:09:08,880 --> 00:09:11,120
everything but one thing did catch my

251
00:09:11,120 --> 00:09:12,480
eye

252
00:09:12,480 --> 00:09:15,279
halfway down those check boxes that very

253
00:09:15,279 --> 00:09:17,839
bottom blue check mark

254
00:09:17,839 --> 00:09:21,279
says generate on your own device

255
00:09:21,279 --> 00:09:22,640
otherwise do not send it across the

256
00:09:22,640 --> 00:09:24,880
internet

257
00:09:24,880 --> 00:09:26,959
so this generator can either generate

258
00:09:26,959 --> 00:09:29,040
the password on the server

259
00:09:29,040 --> 00:09:31,279
and send it to your browser

260
00:09:31,279 --> 00:09:33,600
or you could generate it locally in the

261
00:09:33,600 --> 00:09:35,600
browser make the server ignorant of what

262
00:09:35,600 --> 00:09:36,959
you're doing

263
00:09:36,959 --> 00:09:38,640
why would i want the server to generate

264
00:09:38,640 --> 00:09:41,680
the password for me and send it why

265
00:09:41,680 --> 00:09:43,440
why would i want that so this is

266
00:09:43,440 --> 00:09:45,279
something i didn't consider

267
00:09:45,279 --> 00:09:47,279
when i began doing

268
00:09:47,279 --> 00:09:50,399
you know some research into this

269
00:09:50,399 --> 00:09:52,080
let's look at a few others some heavy

270
00:09:52,080 --> 00:09:54,320
hitters like lastpass lastpass has a

271
00:09:54,320 --> 00:09:56,560
web-based password generator maybe some

272
00:09:56,560 --> 00:09:59,600
of you use lastpass

273
00:09:59,600 --> 00:10:03,200
this is their ui it's a lot more clean

274
00:10:03,200 --> 00:10:04,560
less cluttered

275
00:10:04,560 --> 00:10:06,720
the the password is prominent

276
00:10:06,720 --> 00:10:08,720
fewer check marks

277
00:10:08,720 --> 00:10:11,440
um if i go back to the previous i don't

278
00:10:11,440 --> 00:10:13,040
know if you can see right at the top the

279
00:10:13,040 --> 00:10:15,760
default password length is 16. however

280
00:10:15,760 --> 00:10:17,120
here the default password length for

281
00:10:17,120 --> 00:10:19,040
lastpass is 12.

282
00:10:19,040 --> 00:10:20,160
so

283
00:10:20,160 --> 00:10:22,000
which is better is the 16 characters

284
00:10:22,000 --> 00:10:23,440
better or is the 12 characters better

285
00:10:23,440 --> 00:10:24,880
they're all using uppercase lowercase

286
00:10:24,880 --> 00:10:27,200
numbers and symbols so why did lastpass

287
00:10:27,200 --> 00:10:29,120
go with 12 when this other

288
00:10:29,120 --> 00:10:31,680
developer is going with 16.

289
00:10:31,680 --> 00:10:34,480
there is one password even more clean

290
00:10:34,480 --> 00:10:37,680
and what i like about this is they are

291
00:10:37,680 --> 00:10:40,320
color coding certain characters

292
00:10:40,320 --> 00:10:43,839
digits the numbers 0 through 9 are blue

293
00:10:43,839 --> 00:10:45,760
and if i had added symbols those would

294
00:10:45,760 --> 00:10:46,880
be red

295
00:10:46,880 --> 00:10:48,240
so visually

296
00:10:48,240 --> 00:10:50,320
it becomes very clear to me that oh this

297
00:10:50,320 --> 00:10:52,560
is a zero and not an o

298
00:10:52,560 --> 00:10:54,560
this is an l and not a one because the

299
00:10:54,560 --> 00:10:56,000
one would be blue

300
00:10:56,000 --> 00:10:58,079
right so visually i can look at that and

301
00:10:58,079 --> 00:11:00,399
know immediately what each character is

302
00:11:00,399 --> 00:11:02,399
i kind of like that their default

303
00:11:02,399 --> 00:11:04,560
password length however is 20

304
00:11:04,560 --> 00:11:06,320
without symbols

305
00:11:06,320 --> 00:11:08,959
so is that something worth considering

306
00:11:08,959 --> 00:11:10,959
here's bit warden another heavy hitter

307
00:11:10,959 --> 00:11:12,720
in the password manager space they have

308
00:11:12,720 --> 00:11:15,279
a web-based password generator

309
00:11:15,279 --> 00:11:17,920
i'm not a fan of their ui as much as one

310
00:11:17,920 --> 00:11:22,079
passwords or lastpasses it's a little

311
00:11:22,160 --> 00:11:23,760
maybe a little cluttered a little

312
00:11:23,760 --> 00:11:25,279
spacious

313
00:11:25,279 --> 00:11:27,040
but they copied the same idea color

314
00:11:27,040 --> 00:11:29,519
coding their digits as well as their

315
00:11:29,519 --> 00:11:31,440
special characters their default length

316
00:11:31,440 --> 00:11:33,680
is 14 characters

317
00:11:33,680 --> 00:11:35,279
and then one more that came across my

318
00:11:35,279 --> 00:11:37,040
radar which i

319
00:11:37,040 --> 00:11:38,399
kind of thought was kind of funny is

320
00:11:38,399 --> 00:11:39,760
dino pass

321
00:11:39,760 --> 00:11:42,399
a password generator for kids

322
00:11:42,399 --> 00:11:43,839
now

323
00:11:43,839 --> 00:11:45,600
why do kids get a different password

324
00:11:45,600 --> 00:11:47,279
generator than adults

325
00:11:47,279 --> 00:11:49,040
like

326
00:11:49,040 --> 00:11:51,040
maybe the adult password generator could

327
00:11:51,040 --> 00:11:52,720
be profane and we don't want to put that

328
00:11:52,720 --> 00:11:54,800
in front of our kids i don't know

329
00:11:54,800 --> 00:11:56,959
the dyno pass just generates two random

330
00:11:56,959 --> 00:11:59,200
words in this case fuzzy and error and

331
00:11:59,200 --> 00:12:01,040
then appends two digits at the end and

332
00:12:01,040 --> 00:12:03,279
that's the entirety of the password they

333
00:12:03,279 --> 00:12:05,600
have another button for generating a

334
00:12:05,600 --> 00:12:07,200
strong password

335
00:12:07,200 --> 00:12:09,440
and that will randomize

336
00:12:09,440 --> 00:12:12,240
one of the words first character getting

337
00:12:12,240 --> 00:12:13,760
capitalized

338
00:12:13,760 --> 00:12:15,360
and then another character getting

339
00:12:15,360 --> 00:12:18,079
replaced with a visually

340
00:12:18,079 --> 00:12:19,120
similar

341
00:12:19,120 --> 00:12:21,200
symbol like for example

342
00:12:21,200 --> 00:12:23,920
an s could be a five or a t could be a

343
00:12:23,920 --> 00:12:27,519
plus sign something like that

344
00:12:28,560 --> 00:12:30,079
so in terms of all these password

345
00:12:30,079 --> 00:12:32,240
generators on the web security is

346
00:12:32,240 --> 00:12:34,160
defined in a number of different ways

347
00:12:34,160 --> 00:12:36,560
we've got length anywhere from 12 to 20

348
00:12:36,560 --> 00:12:37,760
characters

349
00:12:37,760 --> 00:12:39,040
complexity

350
00:12:39,040 --> 00:12:40,880
numbers uppercase lowercase digits

351
00:12:40,880 --> 00:12:43,040
punctuation

352
00:12:43,040 --> 00:12:44,880
bit warden and

353
00:12:44,880 --> 00:12:47,440
1password also provide passphrase

354
00:12:47,440 --> 00:12:48,880
generators

355
00:12:48,880 --> 00:12:51,040
so is the security the same for the

356
00:12:51,040 --> 00:12:52,880
passphrase generator as it is for the

357
00:12:52,880 --> 00:12:54,480
password

358
00:12:54,480 --> 00:12:56,560
then we also have audience which is

359
00:12:56,560 --> 00:12:57,920
something i hadn't considered until i

360
00:12:57,920 --> 00:12:59,760
stumbled on dyno pass

361
00:12:59,760 --> 00:13:02,480
if a dino pass password is not secure

362
00:13:02,480 --> 00:13:04,720
for an adult why would it be secure for

363
00:13:04,720 --> 00:13:08,959
a child that's an interesting question

364
00:13:08,959 --> 00:13:09,920
so

365
00:13:09,920 --> 00:13:12,079
as the bird says i am in no mood for

366
00:13:12,079 --> 00:13:14,079
this today

367
00:13:14,079 --> 00:13:15,920
so let's see if we can't make an attempt

368
00:13:15,920 --> 00:13:19,120
at a formal definition okay i am doing

369
00:13:19,120 --> 00:13:20,399
market research again the whole

370
00:13:20,399 --> 00:13:22,720
motivation is for me to design my own i

371
00:13:22,720 --> 00:13:23,760
don't like

372
00:13:23,760 --> 00:13:25,279
biting heads with my coworkers and

373
00:13:25,279 --> 00:13:27,120
coming up with something

374
00:13:27,120 --> 00:13:29,440
that i don't agree with 100 percent

375
00:13:29,440 --> 00:13:31,040
right

376
00:13:31,040 --> 00:13:33,200
so let's see if i can't make a formal

377
00:13:33,200 --> 00:13:35,200
definition before i start designing my

378
00:13:35,200 --> 00:13:37,040
own password generator

379
00:13:37,040 --> 00:13:38,639
so that means i'm going to start jumping

380
00:13:38,639 --> 00:13:40,800
into a slew of other generators and

381
00:13:40,800 --> 00:13:42,800
start auditing source code and learning

382
00:13:42,800 --> 00:13:44,560
from other people i want to see what

383
00:13:44,560 --> 00:13:46,480
they're doing so i'm going to be looking

384
00:13:46,480 --> 00:13:49,040
at their code and things stuck out

385
00:13:49,040 --> 00:13:50,079
immediately and we're going to look at

386
00:13:50,079 --> 00:13:52,000
some examples here

387
00:13:52,000 --> 00:13:55,760
we see uses of an insecure versus a

388
00:13:55,760 --> 00:13:57,360
secure random number generator when

389
00:13:57,360 --> 00:13:59,519
generating the password we also see

390
00:13:59,519 --> 00:14:01,279
whether or not that generator is being

391
00:14:01,279 --> 00:14:03,440
used uniformly

392
00:14:03,440 --> 00:14:05,760
or in a biased approach

393
00:14:05,760 --> 00:14:07,360
so let's look at

394
00:14:07,360 --> 00:14:09,760
four code examples and these all come

395
00:14:09,760 --> 00:14:11,199
from

396
00:14:11,199 --> 00:14:13,040
password generators that i audited web

397
00:14:13,040 --> 00:14:14,480
based password generators these are all

398
00:14:14,480 --> 00:14:16,399
javascript copy pasted right into the

399
00:14:16,399 --> 00:14:18,160
slides

400
00:14:18,160 --> 00:14:20,560
so here's an example of a generator

401
00:14:20,560 --> 00:14:22,320
that's using an insecure random number

402
00:14:22,320 --> 00:14:25,199
generator and they're doing so not

403
00:14:25,199 --> 00:14:26,959
uniformly

404
00:14:26,959 --> 00:14:27,760
so

405
00:14:27,760 --> 00:14:29,360
if you don't read source code that's

406
00:14:29,360 --> 00:14:30,959
okay i'm going to walk you through it

407
00:14:30,959 --> 00:14:32,639
it's not too painful

408
00:14:32,639 --> 00:14:37,279
so we have this variable e that we're

409
00:14:37,279 --> 00:14:39,040
adding all of our uppercase characters

410
00:14:39,040 --> 00:14:40,880
to and then we're also appending the

411
00:14:40,880 --> 00:14:43,279
lowercase characters the digits

412
00:14:43,279 --> 00:14:45,440
and then some special characters the

413
00:14:45,440 --> 00:14:48,000
length of that string e ends up becoming

414
00:14:48,000 --> 00:14:50,399
85 characters in length okay so we have

415
00:14:50,399 --> 00:14:52,560
an 85 character long

416
00:14:52,560 --> 00:14:54,399
variable e

417
00:14:54,399 --> 00:14:56,800
then i've got two for loops

418
00:14:56,800 --> 00:14:58,880
the outer for loop is actually

419
00:14:58,880 --> 00:15:01,120
generating a number of passwords that i

420
00:15:01,120 --> 00:15:02,160
request

421
00:15:02,160 --> 00:15:04,240
if i say give me 10 passwords that's

422
00:15:04,240 --> 00:15:06,800
what this outer for loop is doing it'll

423
00:15:06,800 --> 00:15:08,000
say all right here's your first one

424
00:15:08,000 --> 00:15:09,360
here's your second all the way through

425
00:15:09,360 --> 00:15:10,399
your 10th

426
00:15:10,399 --> 00:15:11,839
the inner for loop is actually

427
00:15:11,839 --> 00:15:14,000
constructing each individual password

428
00:15:14,000 --> 00:15:16,639
it's building the password itself

429
00:15:16,639 --> 00:15:19,199
um before moving out to the next the

430
00:15:19,199 --> 00:15:21,440
next one

431
00:15:21,440 --> 00:15:22,639
and then

432
00:15:22,639 --> 00:15:24,720
which is interesting is this generator

433
00:15:24,720 --> 00:15:26,959
was putting everything in a text area

434
00:15:26,959 --> 00:15:28,480
and so they're appending the carriage

435
00:15:28,480 --> 00:15:30,720
return and the new line at the end of

436
00:15:30,720 --> 00:15:33,120
the password

437
00:15:33,120 --> 00:15:35,600
so in the text area each password that

438
00:15:35,600 --> 00:15:37,199
you request

439
00:15:37,199 --> 00:15:39,600
is one right after the other rather than

440
00:15:39,600 --> 00:15:43,120
all in one long string line okay

441
00:15:43,120 --> 00:15:45,120
so why is it insecure and why is it

442
00:15:45,120 --> 00:15:47,360
biased well first off it's insecure

443
00:15:47,360 --> 00:15:50,240
because it's using math.random

444
00:15:50,240 --> 00:15:52,839
math.random is not a cryptographically

445
00:15:52,839 --> 00:15:55,440
secure random number generator and when

446
00:15:55,440 --> 00:15:58,079
we're generating secrets in this case

447
00:15:58,079 --> 00:15:59,440
passwords

448
00:15:59,440 --> 00:16:01,920
for authentication websites

449
00:16:01,920 --> 00:16:04,160
we want them to be indistinguishable

450
00:16:04,160 --> 00:16:06,720
from true random

451
00:16:06,720 --> 00:16:08,720
white noise data and that's what

452
00:16:08,720 --> 00:16:10,639
cryptographically secure random number

453
00:16:10,639 --> 00:16:13,120
generators provide for me

454
00:16:13,120 --> 00:16:16,000
math.random is not that so if i observe

455
00:16:16,000 --> 00:16:18,959
enough of math.random's output i can

456
00:16:18,959 --> 00:16:20,079
predict

457
00:16:20,079 --> 00:16:21,759
all future output

458
00:16:21,759 --> 00:16:23,759
so for a password generator this is not

459
00:16:23,759 --> 00:16:25,279
a good idea

460
00:16:25,279 --> 00:16:27,600
second math.random is actually a 32-bit

461
00:16:27,600 --> 00:16:30,560
random number generator and it turns out

462
00:16:30,560 --> 00:16:34,000
that 85 does not divide

463
00:16:34,000 --> 00:16:36,800
2 to the 32 evenly there's a remainder

464
00:16:36,800 --> 00:16:39,040
in this case a remainder of 1.

465
00:16:39,040 --> 00:16:41,839
so that means that not everything is

466
00:16:41,839 --> 00:16:44,079
going to get treated equally

467
00:16:44,079 --> 00:16:48,240
if i were to generate 0 through 84

468
00:16:48,240 --> 00:16:49,920
i would get zero

469
00:16:49,920 --> 00:16:53,279
one more time than i would 1 through 84

470
00:16:53,279 --> 00:16:55,279
as i'm working all the way up to 2 to

471
00:16:55,279 --> 00:16:57,519
the 32nd power okay

472
00:16:57,519 --> 00:16:58,959
when i'm doing mod

473
00:16:58,959 --> 00:17:01,920
85 arithmetic so in this generator

474
00:17:01,920 --> 00:17:04,720
specific case that uppercase a is going

475
00:17:04,720 --> 00:17:06,880
to get favored more

476
00:17:06,880 --> 00:17:08,319
than the rest of the characters in the

477
00:17:08,319 --> 00:17:10,799
password now it's it's it's favored by

478
00:17:10,799 --> 00:17:12,799
one i'll admit that and when you're

479
00:17:12,799 --> 00:17:15,199
generating billions of passwords

480
00:17:15,199 --> 00:17:18,000
i mean the law of averages shows that is

481
00:17:18,000 --> 00:17:20,640
this really that big of a concern

482
00:17:20,640 --> 00:17:22,079
when it comes to cryptography and

483
00:17:22,079 --> 00:17:25,520
security yes actually it is everything

484
00:17:25,520 --> 00:17:27,599
needs to be as uniform as possible we

485
00:17:27,599 --> 00:17:30,400
should not be able to give any adversary

486
00:17:30,400 --> 00:17:33,039
an advantage in being able to predict

487
00:17:33,039 --> 00:17:35,440
or make guesses at what the output is

488
00:17:35,440 --> 00:17:36,720
going to be

489
00:17:36,720 --> 00:17:39,120
so we don't like this and they're doing

490
00:17:39,120 --> 00:17:41,200
that i'm going to go back a slide if you

491
00:17:41,200 --> 00:17:43,520
look at the code right in the center m

492
00:17:43,520 --> 00:17:46,799
plus equals e dot car at they're doing

493
00:17:46,799 --> 00:17:50,160
math.floor of math.random times the

494
00:17:50,160 --> 00:17:52,400
length math.random gives you a random

495
00:17:52,400 --> 00:17:54,480
number between zero and one not

496
00:17:54,480 --> 00:17:56,400
excluding one okay

497
00:17:56,400 --> 00:17:58,400
and because it's a 32-bit random number

498
00:17:58,400 --> 00:18:00,880
generator that means there's 2 to the 32

499
00:18:00,880 --> 00:18:04,080
possible decimal values between

500
00:18:04,080 --> 00:18:05,200
0

501
00:18:05,200 --> 00:18:08,880
including 0 and 1 exclusively

502
00:18:08,880 --> 00:18:11,520
so when i times it by 85 i could get

503
00:18:11,520 --> 00:18:13,520
27.639

504
00:18:13,520 --> 00:18:14,400
something

505
00:18:14,400 --> 00:18:16,880
so we take the floor of that even though

506
00:18:16,880 --> 00:18:19,520
it's 27.6 we don't round up

507
00:18:19,520 --> 00:18:21,679
we take the floor and i get 27 and then

508
00:18:21,679 --> 00:18:24,720
i say give me the character at

509
00:18:24,720 --> 00:18:29,600
27th position in e okay so this

510
00:18:29,600 --> 00:18:32,000
what's called the multiply and floor

511
00:18:32,000 --> 00:18:32,960
method

512
00:18:32,960 --> 00:18:35,600
is a biased way

513
00:18:35,600 --> 00:18:39,120
of picking random data

514
00:18:39,520 --> 00:18:41,440
okay let's look at an insecure but

515
00:18:41,440 --> 00:18:42,559
uniform

516
00:18:42,559 --> 00:18:43,840
approach

517
00:18:43,840 --> 00:18:45,440
this comes from one where the guy was

518
00:18:45,440 --> 00:18:47,760
using your mouse as a source of entropy

519
00:18:47,760 --> 00:18:49,280
you would wiggle your mouse across the

520
00:18:49,280 --> 00:18:51,440
screen a little bar would grow and grow

521
00:18:51,440 --> 00:18:53,200
and grow until it's green and then you

522
00:18:53,200 --> 00:18:54,480
can click generate and generate your

523
00:18:54,480 --> 00:18:56,480
password

524
00:18:56,480 --> 00:18:58,640
so as this function get random number

525
00:18:58,640 --> 00:19:01,679
that max variable is how many characters

526
00:19:01,679 --> 00:19:03,919
are in our string so previously it would

527
00:19:03,919 --> 00:19:05,679
have been 85

528
00:19:05,679 --> 00:19:07,039
and then we have this variable bits

529
00:19:07,039 --> 00:19:08,400
needed

530
00:19:08,400 --> 00:19:09,600
and

531
00:19:09,600 --> 00:19:11,760
he's determining how many bits

532
00:19:11,760 --> 00:19:12,720
need

533
00:19:12,720 --> 00:19:15,280
to store that number so in the case of

534
00:19:15,280 --> 00:19:18,240
85 let's use that as an example

535
00:19:18,240 --> 00:19:19,200
um

536
00:19:19,200 --> 00:19:22,160
six bits can get me up to

537
00:19:22,160 --> 00:19:25,440
63 right zero to 63. i can represent 64

538
00:19:25,440 --> 00:19:27,840
possible values with six bits

539
00:19:27,840 --> 00:19:30,160
seven bits though i can represent 128

540
00:19:30,160 --> 00:19:31,360
values

541
00:19:31,360 --> 00:19:34,400
so for if max was 85

542
00:19:34,400 --> 00:19:36,480
then bits needed would be seven i need

543
00:19:36,480 --> 00:19:39,760
seven bits to represent all 85 possible

544
00:19:39,760 --> 00:19:41,280
values right

545
00:19:41,280 --> 00:19:43,360
so now we're going to go ahead and get

546
00:19:43,360 --> 00:19:45,520
one bit at a time with this little

547
00:19:45,520 --> 00:19:47,919
function called get random bit and we're

548
00:19:47,919 --> 00:19:50,880
going to expand that bit by multiplying

549
00:19:50,880 --> 00:19:52,400
it by two

550
00:19:52,400 --> 00:19:55,039
and then adding the new bit on the end

551
00:19:55,039 --> 00:19:57,919
okay it's very simple

552
00:19:57,919 --> 00:20:00,160
math in this regard

553
00:20:00,160 --> 00:20:02,240
where it becomes uniform

554
00:20:02,240 --> 00:20:04,559
is if that random number is greater than

555
00:20:04,559 --> 00:20:06,960
or equal to the max value in this case

556
00:20:06,960 --> 00:20:10,559
85 if the result comes out as 86 or 87

557
00:20:10,559 --> 00:20:12,559
then we discard it

558
00:20:12,559 --> 00:20:14,080
and we try again

559
00:20:14,080 --> 00:20:17,280
so we're only going to allow

560
00:20:17,280 --> 00:20:21,440
values that come between 0 and 84 as

561
00:20:21,440 --> 00:20:22,400
valid

562
00:20:22,400 --> 00:20:23,679
so that's where we're getting our

563
00:20:23,679 --> 00:20:25,280
uniform

564
00:20:25,280 --> 00:20:27,039
but what's unfortunate about this is

565
00:20:27,039 --> 00:20:30,080
even though he's using it uniformly

566
00:20:30,080 --> 00:20:32,080
and you would think using mouse movement

567
00:20:32,080 --> 00:20:35,360
as entropy would be secure

568
00:20:35,360 --> 00:20:37,280
we can get into the details of this

569
00:20:37,280 --> 00:20:39,600
after the talk if you want but physical

570
00:20:39,600 --> 00:20:42,400
sources of randomness need to be

571
00:20:42,400 --> 00:20:45,200
whitened or decorrelated before they're

572
00:20:45,200 --> 00:20:46,840
put in use they need to be

573
00:20:46,840 --> 00:20:49,440
de-biased it's unfortunate but physical

574
00:20:49,440 --> 00:20:51,840
sources of randomness have a tendency to

575
00:20:51,840 --> 00:20:54,000
skew one way or the other it's just the

576
00:20:54,000 --> 00:20:56,240
way nature kind of behaves

577
00:20:56,240 --> 00:21:00,000
so we need to remove that skewing and

578
00:21:00,000 --> 00:21:01,600
we could do that with a simple hash we

579
00:21:01,600 --> 00:21:03,840
could hash it with sha-256 that would

580
00:21:03,840 --> 00:21:05,919
certainly be appropriate

581
00:21:05,919 --> 00:21:08,159
john von neumann the computer scientist

582
00:21:08,159 --> 00:21:12,159
of the 50s invented an algorithm

583
00:21:12,159 --> 00:21:15,520
where you can remove bias out of unfair

584
00:21:15,520 --> 00:21:17,360
coin tosses called the von neumann

585
00:21:17,360 --> 00:21:20,080
debiasin algorithm we could apply that

586
00:21:20,080 --> 00:21:21,679
he's doing it one bit at a time that

587
00:21:21,679 --> 00:21:23,679
would certainly be appropriate

588
00:21:23,679 --> 00:21:26,400
but there are different approaches

589
00:21:26,400 --> 00:21:29,120
just so long as we de-bias that true

590
00:21:29,120 --> 00:21:31,840
input so if we had had decorrelated the

591
00:21:31,840 --> 00:21:34,159
mouse movement and then applied it it

592
00:21:34,159 --> 00:21:37,120
would have been secure

593
00:21:37,679 --> 00:21:39,679
there's another piece of code this is a

594
00:21:39,679 --> 00:21:42,480
secure random number generator but doing

595
00:21:42,480 --> 00:21:45,280
so biasedly oh that's a word not

596
00:21:45,280 --> 00:21:47,120
uniformly

597
00:21:47,120 --> 00:21:49,760
so he's using the web crypto api and

598
00:21:49,760 --> 00:21:51,120
right there in the top we have this

599
00:21:51,120 --> 00:21:52,960
function o

600
00:21:52,960 --> 00:21:55,840
and we're setting us a variable c to

601
00:21:55,840 --> 00:21:58,120
either be window.crypto or

602
00:21:58,120 --> 00:22:01,600
window.mscrypto before microsoft

603
00:22:01,600 --> 00:22:05,120
brought chromium into the edge browser

604
00:22:05,120 --> 00:22:06,799
and they were using their own engine i

605
00:22:06,799 --> 00:22:08,240
think it was chakra

606
00:22:08,240 --> 00:22:10,480
maybe don't quote me on that

607
00:22:10,480 --> 00:22:12,799
an internet x411 and earlier they had

608
00:22:12,799 --> 00:22:15,520
their own version of the web crypto api

609
00:22:15,520 --> 00:22:18,559
via the window.mscrypto object

610
00:22:18,559 --> 00:22:19,280
so

611
00:22:19,280 --> 00:22:21,840
we're ensuring we catch everybody either

612
00:22:21,840 --> 00:22:24,400
firefox chrome browsers or

613
00:22:24,400 --> 00:22:28,159
early microsoft uh with that variable

614
00:22:28,159 --> 00:22:31,200
and then we're creating a 32-bit

615
00:22:31,200 --> 00:22:33,360
unsigned integer array and we're

616
00:22:33,360 --> 00:22:36,000
assigning just one space for it

617
00:22:36,000 --> 00:22:37,679
and then we're using the get random

618
00:22:37,679 --> 00:22:38,880
values function which is

619
00:22:38,880 --> 00:22:40,720
cryptographically secure because it's

620
00:22:40,720 --> 00:22:42,960
coming from that web crypto api to

621
00:22:42,960 --> 00:22:44,320
populate it

622
00:22:44,320 --> 00:22:46,640
and then we're returning it divided by 2

623
00:22:46,640 --> 00:22:49,440
to the 32 so i want a number between 0

624
00:22:49,440 --> 00:22:51,200
and 1. so it's kind of behaving like

625
00:22:51,200 --> 00:22:53,679
math.random in that regard instead of

626
00:22:53,679 --> 00:22:57,039
giving me a number like 15 612

627
00:22:57,039 --> 00:22:58,600
i'm getting

628
00:22:58,600 --> 00:23:01,919
0.416 or whatever

629
00:23:01,919 --> 00:23:04,559
and then there's my variable t with my

630
00:23:04,559 --> 00:23:06,080
characters

631
00:23:06,080 --> 00:23:07,600
and then finally in that for loop

632
00:23:07,600 --> 00:23:09,200
towards the bottom of the slide we can

633
00:23:09,200 --> 00:23:12,320
see that he's using again the multiply

634
00:23:12,320 --> 00:23:13,840
and floor method

635
00:23:13,840 --> 00:23:16,720
he's doing math.floor of

636
00:23:16,720 --> 00:23:18,640
my cryptographically secure function

637
00:23:18,640 --> 00:23:20,720
which returns a random number

638
00:23:20,720 --> 00:23:23,280
times the length of t

639
00:23:23,280 --> 00:23:25,919
in this specific case he is using crypto

640
00:23:25,919 --> 00:23:27,280
dot get random values that's

641
00:23:27,280 --> 00:23:30,240
cryptographically secure that's good

642
00:23:30,240 --> 00:23:32,000
but he's using the multiply and floor

643
00:23:32,000 --> 00:23:35,039
method which is a biased approach

644
00:23:35,039 --> 00:23:38,480
just like earlier 90 does not divide 2

645
00:23:38,480 --> 00:23:40,880
to the 32 evenly

646
00:23:40,880 --> 00:23:44,559
in fact there are 76 remainders

647
00:23:44,559 --> 00:23:47,200
so we end up with

648
00:23:47,200 --> 00:23:49,200
well in this case because of the 90 the

649
00:23:49,200 --> 00:23:51,520
length of our string

650
00:23:51,520 --> 00:23:53,840
we end up with those outputs being

651
00:23:53,840 --> 00:23:54,960
favored

652
00:23:54,960 --> 00:23:57,600
over everybody else again

653
00:23:57,600 --> 00:24:00,159
observing the output i can see

654
00:24:00,159 --> 00:24:02,840
we have some favored characters in my

655
00:24:02,840 --> 00:24:05,440
password versus some unfavored

656
00:24:05,440 --> 00:24:08,960
characters we don't want this

657
00:24:08,960 --> 00:24:11,840
final example here is a secure and

658
00:24:11,840 --> 00:24:14,320
uniform example this is the golden

659
00:24:14,320 --> 00:24:16,080
standard this is what we're chasing

660
00:24:16,080 --> 00:24:18,480
after this is what we want

661
00:24:18,480 --> 00:24:20,960
so again we are we have this function

662
00:24:20,960 --> 00:24:22,799
called uniform n

663
00:24:22,799 --> 00:24:25,440
is the number of characters in my string

664
00:24:25,440 --> 00:24:27,600
or a max number if you will like give me

665
00:24:27,600 --> 00:24:31,039
a number between 0 and n

666
00:24:31,200 --> 00:24:34,320
uh then we're instantiating a new 32-bit

667
00:24:34,320 --> 00:24:37,200
unsigned integer array in the variable a

668
00:24:37,200 --> 00:24:38,080
and then

669
00:24:38,080 --> 00:24:40,159
and we're forcing it to be a 32-bit

670
00:24:40,159 --> 00:24:42,799
number so that's kind of some javascript

671
00:24:42,799 --> 00:24:45,520
uh bit manipulation fun

672
00:24:45,520 --> 00:24:48,480
but if n was larger than 2 to the 32

673
00:24:48,480 --> 00:24:53,120
this would force it into that space okay

674
00:24:53,120 --> 00:24:55,200
and then we have this do while loop and

675
00:24:55,200 --> 00:24:56,880
i'm saying

676
00:24:56,880 --> 00:24:59,039
give me a random number and populate it

677
00:24:59,039 --> 00:25:01,120
in my array

678
00:25:01,120 --> 00:25:05,440
so long as it's less than m so what is m

679
00:25:05,440 --> 00:25:09,679
m is a minimum value and if you were to

680
00:25:09,679 --> 00:25:13,200
run that code in your browser

681
00:25:13,520 --> 00:25:16,240
it would be the same as taking uh 2 to

682
00:25:16,240 --> 00:25:18,320
the 32 mod n

683
00:25:18,320 --> 00:25:20,559
we're looking for a remainder and then

684
00:25:20,559 --> 00:25:23,279
we're setting that as my lowest value

685
00:25:23,279 --> 00:25:24,640
okay

686
00:25:24,640 --> 00:25:27,120
so what i'm ensuring then if i come to

687
00:25:27,120 --> 00:25:28,799
my next slide

688
00:25:28,799 --> 00:25:31,120
is that m

689
00:25:31,120 --> 00:25:33,360
to 2 to the 32

690
00:25:33,360 --> 00:25:35,679
will always get evenly divided by n

691
00:25:35,679 --> 00:25:37,360
there will be no remainders and will

692
00:25:37,360 --> 00:25:39,440
always divide that range perfectly

693
00:25:39,440 --> 00:25:41,360
evenly so i'm not going to have any

694
00:25:41,360 --> 00:25:42,880
biased output i'm not going to have any

695
00:25:42,880 --> 00:25:44,080
favored

696
00:25:44,080 --> 00:25:47,440
numbers any favored characters

697
00:25:47,440 --> 00:25:49,120
and it doesn't matter what n is and can

698
00:25:49,120 --> 00:25:51,360
be completely variable we will always

699
00:25:51,360 --> 00:25:53,520
get uniform output

700
00:25:53,520 --> 00:25:56,400
so in the case of this example this was

701
00:25:56,400 --> 00:25:59,120
building a diceware passphrase

702
00:25:59,120 --> 00:26:02,720
dicework contains 7776

703
00:26:02,720 --> 00:26:04,480
unique words

704
00:26:04,480 --> 00:26:07,520
so n is 7776.

705
00:26:07,520 --> 00:26:10,080
when i apply that math there on the

706
00:26:10,080 --> 00:26:12,559
third line or the fourth line m equals

707
00:26:12,559 --> 00:26:14,240
negative n

708
00:26:14,240 --> 00:26:16,080
it shifts to the right

709
00:26:16,080 --> 00:26:19,919
zero mod n i end up with 2560. so this

710
00:26:19,919 --> 00:26:22,400
becomes my minimum value so when i'm

711
00:26:22,400 --> 00:26:24,799
generating random numbers

712
00:26:24,799 --> 00:26:28,159
they have to be between 2560 and 2 to

713
00:26:28,159 --> 00:26:29,679
the 32

714
00:26:29,679 --> 00:26:31,279
minus 1.

715
00:26:31,279 --> 00:26:33,440
otherwise i have to regenerate

716
00:26:33,440 --> 00:26:35,440
but if it falls within that range i know

717
00:26:35,440 --> 00:26:36,520
it'll divide

718
00:26:36,520 --> 00:26:39,520
7776 evenly i can go ahead and take that

719
00:26:39,520 --> 00:26:42,159
result mod 7776

720
00:26:42,159 --> 00:26:44,080
and i will get a uniform output and

721
00:26:44,080 --> 00:26:45,520
what's great about this is you would

722
00:26:45,520 --> 00:26:47,679
think with that minimum

723
00:26:47,679 --> 00:26:49,760
with those 2560 numbers that we're

724
00:26:49,760 --> 00:26:51,120
rejecting

725
00:26:51,120 --> 00:26:53,200
that's kind of going to hang up the

726
00:26:53,200 --> 00:26:54,880
generator right like

727
00:26:54,880 --> 00:26:56,159
how many times am i going to be

728
00:26:56,159 --> 00:26:58,000
rejecting numbers because they didn't

729
00:26:58,000 --> 00:26:59,840
fall within that range

730
00:26:59,840 --> 00:27:03,000
well 2560 is

731
00:27:03,000 --> 00:27:05,840
0.00006 percent

732
00:27:05,840 --> 00:27:08,559
to the 32 so

733
00:27:08,559 --> 00:27:10,240
effectively it's not going to happen

734
00:27:10,240 --> 00:27:13,279
you're not going to notice it

735
00:27:14,080 --> 00:27:15,600
all right

736
00:27:15,600 --> 00:27:18,720
so that was just looking at

737
00:27:18,720 --> 00:27:20,960
cryptographically secure versus insecure

738
00:27:20,960 --> 00:27:22,320
generators and whether or not it's

739
00:27:22,320 --> 00:27:23,679
uniform

740
00:27:23,679 --> 00:27:26,559
but i began noticing in the audit

741
00:27:26,559 --> 00:27:29,840
seeing and from my early market research

742
00:27:29,840 --> 00:27:31,279
that there are generators that want to

743
00:27:31,279 --> 00:27:33,039
generate it on the server

744
00:27:33,039 --> 00:27:35,440
and then send it to me over https over a

745
00:27:35,440 --> 00:27:37,120
tls connection instead of doing it in

746
00:27:37,120 --> 00:27:38,159
the client

747
00:27:38,159 --> 00:27:40,720
it usually forces a browser refresh or a

748
00:27:40,720 --> 00:27:42,880
new post to the server

749
00:27:42,880 --> 00:27:44,559
but the server is doing the generation

750
00:27:44,559 --> 00:27:46,159
not the browser

751
00:27:46,159 --> 00:27:47,120
and

752
00:27:47,120 --> 00:27:49,360
i can't audit that i can't look at the

753
00:27:49,360 --> 00:27:50,799
source code that's running on the server

754
00:27:50,799 --> 00:27:52,720
unless it's open source and on a github

755
00:27:52,720 --> 00:27:54,640
repo or somewhere else

756
00:27:54,640 --> 00:27:56,880
i can't look at that source code i can't

757
00:27:56,880 --> 00:27:58,880
see what random number generator it's

758
00:27:58,880 --> 00:28:00,159
using

759
00:28:00,159 --> 00:28:01,679
and i can't see if it's using it

760
00:28:01,679 --> 00:28:04,000
uniformly right so it's completely

761
00:28:04,000 --> 00:28:06,159
unknown to me it's a black box i don't

762
00:28:06,159 --> 00:28:09,760
know how the randomness is being handled

763
00:28:09,760 --> 00:28:12,240
i was also came across

764
00:28:12,240 --> 00:28:13,919
password generators that would do

765
00:28:13,919 --> 00:28:16,520
deterministic generation

766
00:28:16,520 --> 00:28:19,120
deterministically generate your password

767
00:28:19,120 --> 00:28:21,279
this is usually built from a master

768
00:28:21,279 --> 00:28:22,720
password you would come up with

769
00:28:22,720 --> 00:28:24,320
something in your head

770
00:28:24,320 --> 00:28:25,760
you know maybe like your mother's maiden

771
00:28:25,760 --> 00:28:28,000
name or something

772
00:28:28,000 --> 00:28:30,000
and then you would also supply like a

773
00:28:30,000 --> 00:28:32,640
username or an email address or a domain

774
00:28:32,640 --> 00:28:33,840
something

775
00:28:33,840 --> 00:28:35,120
and you would put these together in a

776
00:28:35,120 --> 00:28:37,440
form field and click generate my

777
00:28:37,440 --> 00:28:38,559
password

778
00:28:38,559 --> 00:28:41,039
and it gets hashed with a hashing

779
00:28:41,039 --> 00:28:43,679
function and then spits out the result

780
00:28:43,679 --> 00:28:45,279
and as long as you provide the same

781
00:28:45,279 --> 00:28:47,600
parameters you'll always get the same

782
00:28:47,600 --> 00:28:49,279
output

783
00:28:49,279 --> 00:28:51,520
um

784
00:28:52,080 --> 00:28:54,240
i have some issues with

785
00:28:54,240 --> 00:28:56,480
deterministic generators though first

786
00:28:56,480 --> 00:28:58,399
off they can't accommodate different

787
00:28:58,399 --> 00:29:00,880
password policies without keeping state

788
00:29:00,880 --> 00:29:02,480
i don't know how many of you guys are

789
00:29:02,480 --> 00:29:05,919
fans of bruce snyder the security expert

790
00:29:05,919 --> 00:29:08,799
i follow his blog recently he blogged

791
00:29:08,799 --> 00:29:10,320
frustration

792
00:29:10,320 --> 00:29:13,120
where his password manager generated a

793
00:29:13,120 --> 00:29:15,440
password for him for a site

794
00:29:15,440 --> 00:29:17,360
and he went to supply it and the site

795
00:29:17,360 --> 00:29:19,520
rejected it because it did not contain

796
00:29:19,520 --> 00:29:21,279
two numbers

797
00:29:21,279 --> 00:29:22,799
it only had one

798
00:29:22,799 --> 00:29:25,120
and so he was frustrated with password

799
00:29:25,120 --> 00:29:27,440
policies that are seem ambiguous and

800
00:29:27,440 --> 00:29:29,760
arbitrary

801
00:29:29,760 --> 00:29:31,440
you can't do

802
00:29:31,440 --> 00:29:34,240
pastor apology pastor paul

803
00:29:34,240 --> 00:29:35,919
you cannot accommodate different

804
00:29:35,919 --> 00:29:37,600
password policies with deterministic

805
00:29:37,600 --> 00:29:39,520
generators without keeping state if it

806
00:29:39,520 --> 00:29:41,679
doesn't provide the policy you'll need a

807
00:29:41,679 --> 00:29:43,440
counter or you'll need to be able to

808
00:29:43,440 --> 00:29:45,600
fiddle with your username or change the

809
00:29:45,600 --> 00:29:47,440
domain in some way so it gives you a

810
00:29:47,440 --> 00:29:49,120
different output that does match that

811
00:29:49,120 --> 00:29:50,960
policy but then you have to remember the

812
00:29:50,960 --> 00:29:52,559
state the next time you need to

813
00:29:52,559 --> 00:29:54,480
regenerate it in the future

814
00:29:54,480 --> 00:29:56,640
you can't handle uh

815
00:29:56,640 --> 00:29:58,480
breached passwords

816
00:29:58,480 --> 00:30:00,559
have i been pwned as a thing

817
00:30:00,559 --> 00:30:02,480
passwords getting stored in plain text

818
00:30:02,480 --> 00:30:04,640
is a thing getting password cracked is a

819
00:30:04,640 --> 00:30:05,919
thing

820
00:30:05,919 --> 00:30:08,640
if you get an alert from google that

821
00:30:08,640 --> 00:30:11,120
your password has been breached

822
00:30:11,120 --> 00:30:12,480
and you're using a deterministic

823
00:30:12,480 --> 00:30:14,159
generator

824
00:30:14,159 --> 00:30:16,240
you need some sort of counter some sort

825
00:30:16,240 --> 00:30:19,440
of state to change that password right

826
00:30:19,440 --> 00:30:20,799
you need some

827
00:30:20,799 --> 00:30:22,640
variable in order to give you a new

828
00:30:22,640 --> 00:30:23,679
password

829
00:30:23,679 --> 00:30:25,760
you can't do that without keeping state

830
00:30:25,760 --> 00:30:28,159
and further and i think the worst fatal

831
00:30:28,159 --> 00:30:29,200
flaw

832
00:30:29,200 --> 00:30:32,000
is if the master password is exposed

833
00:30:32,000 --> 00:30:33,440
and the adversary is aware of your

834
00:30:33,440 --> 00:30:36,000
system for generating passwords then all

835
00:30:36,000 --> 00:30:38,640
of your prior passwords are now breached

836
00:30:38,640 --> 00:30:40,960
he doesn't even need knowledge of what

837
00:30:40,960 --> 00:30:43,440
they are because he has the core secret

838
00:30:43,440 --> 00:30:46,000
which is your master password

839
00:30:46,000 --> 00:30:47,600
so these are these are some concerns of

840
00:30:47,600 --> 00:30:49,360
mine at least with deterministic

841
00:30:49,360 --> 00:30:50,799
password generators

842
00:30:50,799 --> 00:30:52,159
but further

843
00:30:52,159 --> 00:30:55,600
most people will deterministically use

844
00:30:55,600 --> 00:30:56,960
fast

845
00:30:56,960 --> 00:30:59,600
hashing functions like md5 or sha-1 or

846
00:30:59,600 --> 00:31:01,039
sha-2

847
00:31:01,039 --> 00:31:03,279
when in reality they probably should be

848
00:31:03,279 --> 00:31:06,080
using slow hashing functions like

849
00:31:06,080 --> 00:31:08,720
password-based key derivation functions

850
00:31:08,720 --> 00:31:11,600
the reason is let's assume

851
00:31:11,600 --> 00:31:15,200
that the adversary does know

852
00:31:15,200 --> 00:31:17,440
my system but doesn't know my master

853
00:31:17,440 --> 00:31:20,080
password he knows the approach i use

854
00:31:20,080 --> 00:31:21,679
he's just trying to figure out my master

855
00:31:21,679 --> 00:31:22,799
pass we're trying to figure out my

856
00:31:22,799 --> 00:31:24,159
secret

857
00:31:24,159 --> 00:31:25,120
if

858
00:31:25,120 --> 00:31:27,360
the generator is using md5 then he can

859
00:31:27,360 --> 00:31:29,679
work through those guesses quickly

860
00:31:29,679 --> 00:31:31,440
but if the generator is using something

861
00:31:31,440 --> 00:31:33,440
like pb kdf2

862
00:31:33,440 --> 00:31:35,919
or s-crypt or argon 2 these are things

863
00:31:35,919 --> 00:31:38,000
that are designed deliberately to be

864
00:31:38,000 --> 00:31:41,120
slow with cost factors then we can slow

865
00:31:41,120 --> 00:31:42,799
down that brute force attack we can

866
00:31:42,799 --> 00:31:43,840
prevent

867
00:31:43,840 --> 00:31:45,760
the adversary from being effective

868
00:31:45,760 --> 00:31:47,440
without

869
00:31:47,440 --> 00:31:48,960
spending more money

870
00:31:48,960 --> 00:31:51,440
distributing his workload

871
00:31:51,440 --> 00:31:53,120
that sort of thing

872
00:31:53,120 --> 00:31:55,279
um and i should this is a little nitpick

873
00:31:55,279 --> 00:31:57,600
that i put in the the final

874
00:31:57,600 --> 00:32:01,399
bullet point on the slide

875
00:32:02,000 --> 00:32:04,080
key derivation functions are more

876
00:32:04,080 --> 00:32:07,679
appropriate in this specific use case

877
00:32:07,679 --> 00:32:09,919
than password hashing functions there's

878
00:32:09,919 --> 00:32:11,279
a subtle difference

879
00:32:11,279 --> 00:32:12,960
password hashing functions give you a

880
00:32:12,960 --> 00:32:15,679
static output like bcrypt

881
00:32:15,679 --> 00:32:17,760
or shaw 512 crypt like we use at x

882
00:32:17,760 --> 00:32:18,799
mission

883
00:32:18,799 --> 00:32:21,679
um sha-512 crypt gives you 512 bits of

884
00:32:21,679 --> 00:32:23,519
output and that's just static and that's

885
00:32:23,519 --> 00:32:25,519
how it is but with key derivation

886
00:32:25,519 --> 00:32:29,200
functions i can say i want 160 bits or

887
00:32:29,200 --> 00:32:33,200
256 bits or 512 i can be completely

888
00:32:33,200 --> 00:32:35,600
variable how much data i want returned

889
00:32:35,600 --> 00:32:37,279
from the function

890
00:32:37,279 --> 00:32:38,159
so

891
00:32:38,159 --> 00:32:40,240
in the case of a deterministic password

892
00:32:40,240 --> 00:32:42,159
generator we don't need a lot of bits

893
00:32:42,159 --> 00:32:44,480
we're only generating what 12 16

894
00:32:44,480 --> 00:32:46,320
character password strings we don't need

895
00:32:46,320 --> 00:32:48,960
these massively large things so i can

896
00:32:48,960 --> 00:32:51,120
restrict this down to

897
00:32:51,120 --> 00:32:54,799
70 bits 80 bits 90 bits of output

898
00:32:54,799 --> 00:32:57,519
rather than taking 512 and then

899
00:32:57,519 --> 00:33:00,240
truncating them

900
00:33:00,880 --> 00:33:02,240
all right

901
00:33:02,240 --> 00:33:04,320
what about security margins talked a

902
00:33:04,320 --> 00:33:06,480
little bit about that earlier if i go

903
00:33:06,480 --> 00:33:08,880
back to that cluster of eight nvidia

904
00:33:08,880 --> 00:33:12,799
gpus that jeremy ghazni has

905
00:33:13,039 --> 00:33:16,480
can i make reasonable assumptions about

906
00:33:16,480 --> 00:33:17,840
bit strength

907
00:33:17,840 --> 00:33:19,120
i think i can

908
00:33:19,120 --> 00:33:20,640
so

909
00:33:20,640 --> 00:33:22,880
remember i'm trying to make a password

910
00:33:22,880 --> 00:33:25,039
generator

911
00:33:25,039 --> 00:33:27,120
that is not

912
00:33:27,120 --> 00:33:29,679
messy it's clean in the ui and it's easy

913
00:33:29,679 --> 00:33:32,000
to understand for the lay person i don't

914
00:33:32,000 --> 00:33:33,519
want to confuse them

915
00:33:33,519 --> 00:33:36,240
so when it comes to bits that is maybe a

916
00:33:36,240 --> 00:33:39,760
necessary evil but i don't want to go 55

917
00:33:39,760 --> 00:33:43,519
56 57 58 i think every five bits is

918
00:33:43,519 --> 00:33:46,320
perfectly fine for the lay person

919
00:33:46,320 --> 00:33:47,120
so

920
00:33:47,120 --> 00:33:50,799
in terms of that ntlm

921
00:33:51,200 --> 00:33:53,279
hashing password hashing

922
00:33:53,279 --> 00:33:55,600
55 bits is exhausted

923
00:33:55,600 --> 00:33:57,120
in 20 hours

924
00:33:57,120 --> 00:33:59,519
so i think anything less than a day will

925
00:33:59,519 --> 00:34:02,799
probably be considered broken

926
00:34:02,799 --> 00:34:06,799
60 bits gets us 26 days it's a month

927
00:34:06,799 --> 00:34:08,639
i consider that a week because it only

928
00:34:08,639 --> 00:34:10,960
takes a couple people to decide to join

929
00:34:10,960 --> 00:34:12,719
in and help

930
00:34:12,719 --> 00:34:15,280
that can significantly lower that time

931
00:34:15,280 --> 00:34:17,679
but as we move every five bits we can

932
00:34:17,679 --> 00:34:20,000
see that full exhaustion of that key

933
00:34:20,000 --> 00:34:23,520
space gets exponentially longer 65 bits

934
00:34:23,520 --> 00:34:25,040
is that three years

935
00:34:25,040 --> 00:34:29,199
70 bits is at 73 years and so forth

936
00:34:29,199 --> 00:34:30,320
so

937
00:34:30,320 --> 00:34:33,599
i decided and i am completely open to

938
00:34:33,599 --> 00:34:35,520
debate on this

939
00:34:35,520 --> 00:34:36,879
that

940
00:34:36,879 --> 00:34:38,800
because 60 bits might take a little bit

941
00:34:38,800 --> 00:34:41,280
of work takes a month on an individual

942
00:34:41,280 --> 00:34:44,239
person or to get a team together to

943
00:34:44,239 --> 00:34:46,879
lower that threshold we could consider

944
00:34:46,879 --> 00:34:49,918
that weak 65 bits moderate because it

945
00:34:49,918 --> 00:34:51,520
would take more of a distributed

946
00:34:51,520 --> 00:34:53,280
clustered attack to really bring that

947
00:34:53,280 --> 00:34:55,520
within a workable manner

948
00:34:55,520 --> 00:34:57,839
but i think 70 bits and above in terms

949
00:34:57,839 --> 00:34:59,599
of password security we could consider

950
00:34:59,599 --> 00:35:02,400
strong that's certainly a good market

951
00:35:02,400 --> 00:35:05,599
or a good point to reach for

952
00:35:05,599 --> 00:35:07,280
so here's just a quick table i'm going

953
00:35:07,280 --> 00:35:08,880
to go through this quickly

954
00:35:08,880 --> 00:35:10,640
but in the columns i have the unique

955
00:35:10,640 --> 00:35:12,560
characters in each set so 10 characters

956
00:35:12,560 --> 00:35:14,640
would be my digits 26 would be the

957
00:35:14,640 --> 00:35:17,599
alphabet 52 be lowercase uppercase

958
00:35:17,599 --> 00:35:19,440
94 would be every graphical ascii

959
00:35:19,440 --> 00:35:21,280
character on my keyboard and then the

960
00:35:21,280 --> 00:35:23,359
rows are my bit strings

961
00:35:23,359 --> 00:35:24,960
so how many characters would i need in

962
00:35:24,960 --> 00:35:26,320
my password

963
00:35:26,320 --> 00:35:28,320
based on the characters in the set and

964
00:35:28,320 --> 00:35:31,359
the bit strength so for 94 characters if

965
00:35:31,359 --> 00:35:34,640
i wanted to hit 70 bits of security i

966
00:35:34,640 --> 00:35:36,400
would need at least an 11 character

967
00:35:36,400 --> 00:35:39,599
password okay randomly generated

968
00:35:39,599 --> 00:35:40,960
what's interesting about this table

969
00:35:40,960 --> 00:35:43,280
however is how many sites do you see

970
00:35:43,280 --> 00:35:44,800
when you're creating a new account that

971
00:35:44,800 --> 00:35:47,760
they say your password must be at least

972
00:35:47,760 --> 00:35:49,599
eight characters

973
00:35:49,599 --> 00:35:51,359
right and that means

974
00:35:51,359 --> 00:35:53,200
as we are well aware everyone will

975
00:35:53,200 --> 00:35:54,160
create

976
00:35:54,160 --> 00:35:56,320
an eight character password

977
00:35:56,320 --> 00:35:57,599
they won't go longer if they don't have

978
00:35:57,599 --> 00:35:58,480
to

979
00:35:58,480 --> 00:36:00,160
but do you see eight anywhere on that

980
00:36:00,160 --> 00:36:01,040
table

981
00:36:01,040 --> 00:36:04,160
right we already considered 55 bits

982
00:36:04,160 --> 00:36:05,359
broken

983
00:36:05,359 --> 00:36:08,160
and if it's using all 94 graphical ascii

984
00:36:08,160 --> 00:36:09,359
characters

985
00:36:09,359 --> 00:36:11,119
on my keyboard

986
00:36:11,119 --> 00:36:13,680
i need at least nine to get to 55 bits

987
00:36:13,680 --> 00:36:15,839
eight's not even on the radar

988
00:36:15,839 --> 00:36:17,760
so it would be great if any of you are

989
00:36:17,760 --> 00:36:20,400
web developers this is just a cry

990
00:36:20,400 --> 00:36:22,560
if any of you are out there it'd be

991
00:36:22,560 --> 00:36:24,960
great to see us maybe bump that up to 10

992
00:36:24,960 --> 00:36:27,040
or 11 or 12 as a minimum because you

993
00:36:27,040 --> 00:36:28,240
know the users are going to pick that

994
00:36:28,240 --> 00:36:30,240
you say 12 they're doing 12. they're not

995
00:36:30,240 --> 00:36:32,320
going to do 13 if they don't have to

996
00:36:32,320 --> 00:36:34,640
but if they are using their password

997
00:36:34,640 --> 00:36:36,720
generator in their manager or somewhere

998
00:36:36,720 --> 00:36:37,680
else

999
00:36:37,680 --> 00:36:39,520
then we know what that security looks

1000
00:36:39,520 --> 00:36:41,440
like right and we know what it looks

1001
00:36:41,440 --> 00:36:43,599
like for eight characters

1002
00:36:43,599 --> 00:36:45,280
same thing with passphrase security

1003
00:36:45,280 --> 00:36:47,520
here's a number of unique words in a set

1004
00:36:47,520 --> 00:36:50,480
versus my bits

1005
00:36:51,040 --> 00:36:54,480
notice at 55 bits for 16 384 unique

1006
00:36:54,480 --> 00:36:56,960
words i can get four words how many are

1007
00:36:56,960 --> 00:36:59,280
familiar with the xkcd comic of correct

1008
00:36:59,280 --> 00:37:01,920
horse battery stable right generate four

1009
00:37:01,920 --> 00:37:04,320
random words good enough

1010
00:37:04,320 --> 00:37:06,480
that's fine

1011
00:37:06,480 --> 00:37:09,839
but four is 55 bits of security if your

1012
00:37:09,839 --> 00:37:13,440
word list has 16 384 unique words and it

1013
00:37:13,440 --> 00:37:15,599
was generated uniformly and securely but

1014
00:37:15,599 --> 00:37:18,320
we already decided that 55 is broken

1015
00:37:18,320 --> 00:37:21,040
so xkcd random monroe kind of hit the

1016
00:37:21,040 --> 00:37:24,560
right tone in terms of memorability

1017
00:37:24,560 --> 00:37:27,520
but the execution was sloppy four random

1018
00:37:27,520 --> 00:37:29,440
words just

1019
00:37:29,440 --> 00:37:31,520
isn't enough right we need to move

1020
00:37:31,520 --> 00:37:33,839
across that

1021
00:37:33,839 --> 00:37:36,400
so to recap really quickly

1022
00:37:36,400 --> 00:37:37,920
we started late i'm going to run a

1023
00:37:37,920 --> 00:37:40,000
little bit late i apologize to the next

1024
00:37:40,000 --> 00:37:41,119
presenter

1025
00:37:41,119 --> 00:37:43,200
but i'm moving fast

1026
00:37:43,200 --> 00:37:45,040
a secure password generator then can be

1027
00:37:45,040 --> 00:37:46,880
defined as being generated in the client

1028
00:37:46,880 --> 00:37:48,560
not on the server

1029
00:37:48,560 --> 00:37:50,480
if it is deterministic it's using a

1030
00:37:50,480 --> 00:37:52,640
proper key derivation function with a

1031
00:37:52,640 --> 00:37:53,920
cost factor

1032
00:37:53,920 --> 00:37:56,960
if it's random it's using a

1033
00:37:56,960 --> 00:37:58,480
cryptographically secure number

1034
00:37:58,480 --> 00:38:00,720
generator uniformly and we're defaulting

1035
00:38:00,720 --> 00:38:02,960
to at least 70 bits of security all

1036
00:38:02,960 --> 00:38:03,760
right

1037
00:38:03,760 --> 00:38:06,240
yes i'm completely judging you

1038
00:38:06,240 --> 00:38:08,479
so

1039
00:38:08,800 --> 00:38:10,400
let's go further are there any other

1040
00:38:10,400 --> 00:38:11,920
security concerns we can take about

1041
00:38:11,920 --> 00:38:14,000
that's all the math right that's all the

1042
00:38:14,000 --> 00:38:15,040
big

1043
00:38:15,040 --> 00:38:16,839
rocks what about some of the littler

1044
00:38:16,839 --> 00:38:19,599
rocks well i think it should be obvious

1045
00:38:19,599 --> 00:38:22,560
the page needs to be delivered over tls

1046
00:38:22,560 --> 00:38:24,960
plain http

1047
00:38:24,960 --> 00:38:27,680
opens up the user to injection attacks

1048
00:38:27,680 --> 00:38:29,440
what's to prevent

1049
00:38:29,440 --> 00:38:31,599
a man in the middle from compromising

1050
00:38:31,599 --> 00:38:33,359
the entire security of the password

1051
00:38:33,359 --> 00:38:35,520
generator system

1052
00:38:35,520 --> 00:38:37,920
ads and javascript trackers in the web

1053
00:38:37,920 --> 00:38:40,800
page also compromise the secrecy of the

1054
00:38:40,800 --> 00:38:42,880
password generation process

1055
00:38:42,880 --> 00:38:44,640
right these things are trying to track

1056
00:38:44,640 --> 00:38:46,400
you across the web they're trying to

1057
00:38:46,400 --> 00:38:48,800
build profiles of who you are

1058
00:38:48,800 --> 00:38:50,240
so

1059
00:38:50,240 --> 00:38:53,119
if these exist in the password generator

1060
00:38:53,119 --> 00:38:55,200
it may already know details about who

1061
00:38:55,200 --> 00:38:56,560
you are the

1062
00:38:56,560 --> 00:38:58,800
social accounts you have

1063
00:38:58,800 --> 00:39:01,040
you know and here we are now generating

1064
00:39:01,040 --> 00:39:03,440
a password on this password generator

1065
00:39:03,440 --> 00:39:05,839
um it just shouldn't be something that

1066
00:39:05,839 --> 00:39:08,000
they need to know

1067
00:39:08,000 --> 00:39:10,560
sub resource integrity is a standard by

1068
00:39:10,560 --> 00:39:13,119
the w3c

1069
00:39:13,119 --> 00:39:14,880
where it guarantees that if you're

1070
00:39:14,880 --> 00:39:16,640
calling a resource from a third-party

1071
00:39:16,640 --> 00:39:17,680
server

1072
00:39:17,680 --> 00:39:19,680
externally on the internet

1073
00:39:19,680 --> 00:39:21,200
that when it gets delivered it gets

1074
00:39:21,200 --> 00:39:23,520
delivered as you expect

1075
00:39:23,520 --> 00:39:26,400
and so there's this integrity

1076
00:39:26,400 --> 00:39:29,200
attribute in either an image tag a link

1077
00:39:29,200 --> 00:39:30,880
tag or a script tag

1078
00:39:30,880 --> 00:39:32,079
with

1079
00:39:32,079 --> 00:39:35,760
a integrity hash either shot 256 sha-384

1080
00:39:35,760 --> 00:39:37,599
or sha-512

1081
00:39:37,599 --> 00:39:39,680
and when that resource comes off of that

1082
00:39:39,680 --> 00:39:42,000
third-party server like the image the

1083
00:39:42,000 --> 00:39:43,839
browser then can quickly hash the image

1084
00:39:43,839 --> 00:39:46,240
and see if it matches what's in the html

1085
00:39:46,240 --> 00:39:48,240
if it does we're good to go if not the

1086
00:39:48,240 --> 00:39:50,560
browser will complain and not give you

1087
00:39:50,560 --> 00:39:53,680
the requested resource

1088
00:39:54,560 --> 00:39:56,480
usability concerns do we have a mobile

1089
00:39:56,480 --> 00:39:57,680
interface

1090
00:39:57,680 --> 00:39:59,839
right mobile is a thing now

1091
00:39:59,839 --> 00:40:02,800
it should be no surprise that we should

1092
00:40:02,800 --> 00:40:05,359
have mobile interfaces on our web pages

1093
00:40:05,359 --> 00:40:07,599
is the source code open source right

1094
00:40:07,599 --> 00:40:10,079
people like me who are auditing these

1095
00:40:10,079 --> 00:40:12,640
password generators and see legitimate

1096
00:40:12,640 --> 00:40:14,000
flaws

1097
00:40:14,000 --> 00:40:16,319
can patch it up and send patches to the

1098
00:40:16,319 --> 00:40:18,640
developer but if it's not open source if

1099
00:40:18,640 --> 00:40:20,640
i'm restricted my ability to use the

1100
00:40:20,640 --> 00:40:23,359
software i can't make those improvements

1101
00:40:23,359 --> 00:40:24,880
is there anything else worth noting

1102
00:40:24,880 --> 00:40:26,800
comments like is it stable does it

1103
00:40:26,800 --> 00:40:29,599
perform well okay

1104
00:40:29,599 --> 00:40:31,920
so this is a lot to audit so i decided

1105
00:40:31,920 --> 00:40:34,400
to do a simple scoring system out of 10

1106
00:40:34,400 --> 00:40:36,160
and i gave you one point for each of

1107
00:40:36,160 --> 00:40:37,920
those items you get a point if it's open

1108
00:40:37,920 --> 00:40:40,240
source get a point if it's generated in

1109
00:40:40,240 --> 00:40:42,160
the client a point if it's random not

1110
00:40:42,160 --> 00:40:43,680
deterministic

1111
00:40:43,680 --> 00:40:45,119
if it's using a cryptographically

1112
00:40:45,119 --> 00:40:48,319
secured number generator uniformly https

1113
00:40:48,319 --> 00:40:50,880
mobile interface no trackers

1114
00:40:50,880 --> 00:40:53,599
and we're using or not requiring sri

1115
00:40:53,599 --> 00:40:55,680
that's 9 out of the 10 for the 10th

1116
00:40:55,680 --> 00:40:58,640
point i look at the security margin

1117
00:40:58,640 --> 00:41:01,760
if it's less than 55 bits no points

1118
00:41:01,760 --> 00:41:04,319
but if it's between 55 and 69 i give you

1119
00:41:04,319 --> 00:41:06,480
half a point and if you reach that

1120
00:41:06,480 --> 00:41:09,359
70-bit security margin or better i give

1121
00:41:09,359 --> 00:41:11,359
you a full point and this is by default

1122
00:41:11,359 --> 00:41:13,520
i should mention i'm not deliberately

1123
00:41:13,520 --> 00:41:15,760
trying to make your generator weak just

1124
00:41:15,760 --> 00:41:17,440
saying what is delivered to the user so

1125
00:41:17,440 --> 00:41:19,280
when you click generate without mucking

1126
00:41:19,280 --> 00:41:20,560
with anything

1127
00:41:20,560 --> 00:41:22,960
what do we get

1128
00:41:22,960 --> 00:41:24,960
so that left me now with what to audit

1129
00:41:24,960 --> 00:41:27,280
so i started just searching and we've

1130
00:41:27,280 --> 00:41:29,599
got passwords passphrases

1131
00:41:29,599 --> 00:41:32,839
chrome extensions firefox extensions and

1132
00:41:32,839 --> 00:41:35,200
bookmarklets and i'm going to pick on a

1133
00:41:35,200 --> 00:41:36,480
couple people

1134
00:41:36,480 --> 00:41:38,720
i hope he's not watching

1135
00:41:38,720 --> 00:41:40,400
taylor hornby some of you may know him

1136
00:41:40,400 --> 00:41:42,480
as defusek on twitter security

1137
00:41:42,480 --> 00:41:44,160
researcher well known

1138
00:41:44,160 --> 00:41:46,319
has a windows password generator you can

1139
00:41:46,319 --> 00:41:50,119
go to that website defuse.capacion.htm

1140
00:41:50,240 --> 00:41:52,640
and download the windows generator

1141
00:41:52,640 --> 00:41:55,119
but on that page he also has up in the

1142
00:41:55,119 --> 00:41:57,440
header a big web-based password

1143
00:41:57,440 --> 00:41:59,440
generator and here's a screenshot of it

1144
00:41:59,440 --> 00:42:01,520
just want a password copy and paste

1145
00:42:01,520 --> 00:42:03,280
these or refresh the page to generate a

1146
00:42:03,280 --> 00:42:04,720
new set

1147
00:42:04,720 --> 00:42:08,560
so let's hold taylor's taylor up to

1148
00:42:08,560 --> 00:42:10,480
those security standards that we just

1149
00:42:10,480 --> 00:42:12,720
defined okay

1150
00:42:12,720 --> 00:42:14,400
if we're auditing his web-based

1151
00:42:14,400 --> 00:42:17,599
generator he scores seven out of ten

1152
00:42:17,599 --> 00:42:20,000
this is what he does well it's random

1153
00:42:20,000 --> 00:42:22,079
not deterministic he's using a

1154
00:42:22,079 --> 00:42:23,680
cryptographically secure random number

1155
00:42:23,680 --> 00:42:24,880
january i'll talk about more than a

1156
00:42:24,880 --> 00:42:25,760
second

1157
00:42:25,760 --> 00:42:28,720
he's doing it uniformly over https the

1158
00:42:28,720 --> 00:42:31,040
default security margin is 256 bits

1159
00:42:31,040 --> 00:42:32,560
which in my opinion is overkill but

1160
00:42:32,560 --> 00:42:34,000
that's fine point

1161
00:42:34,000 --> 00:42:35,839
there's no ads or javascript trackers

1162
00:42:35,839 --> 00:42:38,480
and he doesn't use or need sub resource

1163
00:42:38,480 --> 00:42:41,359
integrity but where he could improve is

1164
00:42:41,359 --> 00:42:43,760
even though the web

1165
00:42:43,760 --> 00:42:46,319
source code is on github he doesn't have

1166
00:42:46,319 --> 00:42:48,880
an explicit license to find now i don't

1167
00:42:48,880 --> 00:42:50,800
know about canada copyright law but in

1168
00:42:50,800 --> 00:42:53,280
united states if you don't explicitly

1169
00:42:53,280 --> 00:42:54,880
define a license

1170
00:42:54,880 --> 00:42:56,800
then it is copyright you all rights

1171
00:42:56,800 --> 00:42:59,200
reserved it's not open source it is

1172
00:42:59,200 --> 00:43:00,720
proprietary

1173
00:43:00,720 --> 00:43:01,920
so

1174
00:43:01,920 --> 00:43:03,839
until a license is there unfortunately

1175
00:43:03,839 --> 00:43:05,760
it's proprietary software

1176
00:43:05,760 --> 00:43:08,960
also it's php it's not javascript so

1177
00:43:08,960 --> 00:43:10,880
this is being done on the server and

1178
00:43:10,880 --> 00:43:14,000
he's sending it to you through https

1179
00:43:14,000 --> 00:43:15,760
and then finally he's missing a mobile

1180
00:43:15,760 --> 00:43:18,400
mobile interface

1181
00:43:18,400 --> 00:43:20,000
let's look at bit warden i mentioned

1182
00:43:20,000 --> 00:43:21,599
that let's pick one of the heavier

1183
00:43:21,599 --> 00:43:23,680
hitters bit warden in this case i'm

1184
00:43:23,680 --> 00:43:26,480
showing off the passphrase generator

1185
00:43:26,480 --> 00:43:28,480
interestingly enough

1186
00:43:28,480 --> 00:43:30,560
their passphrase generator is weaker

1187
00:43:30,560 --> 00:43:33,119
than their password generator by default

1188
00:43:33,119 --> 00:43:34,319
well look at that

1189
00:43:34,319 --> 00:43:36,560
they also get a 7 out of 10.

1190
00:43:36,560 --> 00:43:38,400
they do well it's generated in the

1191
00:43:38,400 --> 00:43:40,319
client not the server it's random not

1192
00:43:40,319 --> 00:43:41,680
deterministic they're using a

1193
00:43:41,680 --> 00:43:43,839
cryptographically secure random number

1194
00:43:43,839 --> 00:43:45,119
generator

1195
00:43:45,119 --> 00:43:47,839
uniformly https they have a mobile

1196
00:43:47,839 --> 00:43:49,280
interface and they don't need sub

1197
00:43:49,280 --> 00:43:51,040
resource integrity

1198
00:43:51,040 --> 00:43:53,520
where they can improve their web

1199
00:43:53,520 --> 00:43:55,680
source code is nowhere to be found which

1200
00:43:55,680 --> 00:43:58,480
is weird because the android the ios

1201
00:43:58,480 --> 00:44:00,480
clients and the desktop clients and

1202
00:44:00,480 --> 00:44:03,119
everything else is on github except for

1203
00:44:03,119 --> 00:44:05,040
their password generator that the source

1204
00:44:05,040 --> 00:44:07,200
code just doesn't exist

1205
00:44:07,200 --> 00:44:08,640
other than getting delivered to your

1206
00:44:08,640 --> 00:44:09,680
browser

1207
00:44:09,680 --> 00:44:11,760
also the default security for the pass

1208
00:44:11,760 --> 00:44:14,640
phrases is 51 bits but for the past

1209
00:44:14,640 --> 00:44:17,599
words it's 83. so for the password

1210
00:44:17,599 --> 00:44:20,480
generator he scores 8 out of 10

1211
00:44:20,480 --> 00:44:22,319
but for the past phrase we get 7 out of

1212
00:44:22,319 --> 00:44:24,000
10.

1213
00:44:24,000 --> 00:44:25,839
and then finally it does have javascript

1214
00:44:25,839 --> 00:44:27,440
trackers i would have expected better

1215
00:44:27,440 --> 00:44:29,359
out of bit warden but they do have that

1216
00:44:29,359 --> 00:44:31,359
on the website

1217
00:44:31,359 --> 00:44:33,040
so now we come back to my generator and

1218
00:44:33,040 --> 00:44:36,560
this is a screenshot kind of a bad one

1219
00:44:36,560 --> 00:44:39,880
if you go to my url a7.stashg

1220
00:44:39,880 --> 00:44:42,319
a7st is my

1221
00:44:42,319 --> 00:44:44,240
amateur radio call sign

1222
00:44:44,240 --> 00:44:46,560
so i just bought the dot st

1223
00:44:46,560 --> 00:44:49,200
domain slash g for generator but this is

1224
00:44:49,200 --> 00:44:51,040
what i ended up coming with

1225
00:44:51,040 --> 00:44:53,119
the default there's my security margins

1226
00:44:53,119 --> 00:44:54,319
on the top

1227
00:44:54,319 --> 00:44:56,560
and then i have a bunch of different

1228
00:44:56,560 --> 00:44:58,560
generators all of them meeting that

1229
00:44:58,560 --> 00:45:00,240
security margin that you select it

1230
00:45:00,240 --> 00:45:02,319
defaults to 70. and all you have to do

1231
00:45:02,319 --> 00:45:04,720
is click generate copy and paste it and

1232
00:45:04,720 --> 00:45:06,960
you're good to go

1233
00:45:06,960 --> 00:45:09,680
so how do i do

1234
00:45:10,560 --> 00:45:12,160
probably not very fair

1235
00:45:12,160 --> 00:45:14,240
i am the guy who's doing the auditing

1236
00:45:14,240 --> 00:45:15,760
right i am the guy who's defining the

1237
00:45:15,760 --> 00:45:16,839
standard

1238
00:45:16,839 --> 00:45:19,440
but i guess that's just how the cookie

1239
00:45:19,440 --> 00:45:20,640
crumbles

1240
00:45:20,640 --> 00:45:23,440
but i did score a perfect uh 10 out of

1241
00:45:23,440 --> 00:45:25,839
10 but i did design

1242
00:45:25,839 --> 00:45:28,240
my generator after the standard rather

1243
00:45:28,240 --> 00:45:30,000
than dividing the fighting standard

1244
00:45:30,000 --> 00:45:32,160
after the generator so i can be honest

1245
00:45:32,160 --> 00:45:34,560
about that

1246
00:45:34,720 --> 00:45:36,720
um all right the current audit status

1247
00:45:36,720 --> 00:45:38,400
i'll show a quick screenshot i've

1248
00:45:38,400 --> 00:45:40,720
currently audited 209 password

1249
00:45:40,720 --> 00:45:44,079
generators 89 passphrase 114 chrome

1250
00:45:44,079 --> 00:45:46,800
extensions 36 firefox extensions and 20

1251
00:45:46,800 --> 00:45:48,079
bookmarklets

1252
00:45:48,079 --> 00:45:49,839
you can go to that tiny url it's a

1253
00:45:49,839 --> 00:45:52,319
google spreadsheet and see the status of

1254
00:45:52,319 --> 00:45:54,880
every single one of them their urls will

1255
00:45:54,880 --> 00:45:56,480
be there you can click on we'll play

1256
00:45:56,480 --> 00:45:57,960
around with them

1257
00:45:57,960 --> 00:45:59,520
tinyurl.com

1258
00:45:59,520 --> 00:46:01,599
generator audit

1259
00:46:01,599 --> 00:46:02,400
um

1260
00:46:02,400 --> 00:46:04,880
one quick note extension score seven out

1261
00:46:04,880 --> 00:46:07,040
of seven uh

1262
00:46:07,040 --> 00:46:08,319
and when you look at the audit you'll

1263
00:46:08,319 --> 00:46:09,440
see why

1264
00:46:09,440 --> 00:46:11,680
but here is a screenshot of the

1265
00:46:11,680 --> 00:46:14,640
passwords tab of the first part of the

1266
00:46:14,640 --> 00:46:17,599
audit anyway and you can see the score

1267
00:46:17,599 --> 00:46:19,839
on the left it's kind of small

1268
00:46:19,839 --> 00:46:22,400
perfect 10 out of 10's get our color

1269
00:46:22,400 --> 00:46:24,640
blue 9

1270
00:46:24,640 --> 00:46:26,079
green

1271
00:46:26,079 --> 00:46:28,720
8 through i think it's six or five are

1272
00:46:28,720 --> 00:46:30,800
yellow and then below that is red

1273
00:46:30,800 --> 00:46:32,800
and then on the right the green and the

1274
00:46:32,800 --> 00:46:35,040
red and the yellow you can see

1275
00:46:35,040 --> 00:46:37,119
uh how they scored right greens are a

1276
00:46:37,119 --> 00:46:39,040
point red or zero point

1277
00:46:39,040 --> 00:46:40,880
uh the yellows

1278
00:46:40,880 --> 00:46:43,040
might be a half point it depends and

1279
00:46:43,040 --> 00:46:46,160
then there's notes on the side

1280
00:46:46,240 --> 00:46:48,960
all right final topic i apologize for

1281
00:46:48,960 --> 00:46:52,079
running late to the next presenter

1282
00:46:52,079 --> 00:46:54,640
webex web applications are actually

1283
00:46:54,640 --> 00:46:58,160
super dangerous very very dangerous

1284
00:46:58,160 --> 00:46:59,440
why

1285
00:46:59,440 --> 00:47:00,800
so

1286
00:47:00,800 --> 00:47:02,800
even though my password generator that i

1287
00:47:02,800 --> 00:47:04,400
built

1288
00:47:04,400 --> 00:47:06,240
has a perfect 10 out of 10 and many

1289
00:47:06,240 --> 00:47:09,200
others do as well

1290
00:47:09,200 --> 00:47:13,200
you're all we're all trusting on the

1291
00:47:13,200 --> 00:47:15,119
web server to deliver that code

1292
00:47:15,119 --> 00:47:16,720
correctly

1293
00:47:16,720 --> 00:47:18,800
what is preventing a disgruntled web

1294
00:47:18,800 --> 00:47:21,520
administrator for sending javascript on

1295
00:47:21,520 --> 00:47:23,440
a page refresh that compromises the

1296
00:47:23,440 --> 00:47:24,960
entire stack

1297
00:47:24,960 --> 00:47:26,800
nothing right it could be a perfect 10

1298
00:47:26,800 --> 00:47:28,640
out of 10. everything's done great and

1299
00:47:28,640 --> 00:47:30,240
all it takes is one descriptive web

1300
00:47:30,240 --> 00:47:32,319
admin to say screw it

1301
00:47:32,319 --> 00:47:35,200
i want a log of all the passwords so i

1302
00:47:35,200 --> 00:47:37,280
am sending this javascript on the next

1303
00:47:37,280 --> 00:47:39,760
page refresh you don't know that unless

1304
00:47:39,760 --> 00:47:41,680
every time you refresh the page you're

1305
00:47:41,680 --> 00:47:43,760
inspecting the source code this is why

1306
00:47:43,760 --> 00:47:46,559
desktop apps

1307
00:47:46,559 --> 00:47:48,559
minimize that vulnerability because

1308
00:47:48,559 --> 00:47:49,839
they're strongly versioned they're

1309
00:47:49,839 --> 00:47:52,319
compiled until you update to the newest

1310
00:47:52,319 --> 00:47:53,440
version

1311
00:47:53,440 --> 00:47:54,800
you know

1312
00:47:54,800 --> 00:47:56,960
if you've audited it at least or trust

1313
00:47:56,960 --> 00:47:59,040
someone who has you know that what

1314
00:47:59,040 --> 00:48:01,440
you're using is what you expect okay

1315
00:48:01,440 --> 00:48:03,680
until you update again

1316
00:48:03,680 --> 00:48:05,920
um that's not the case with web apps

1317
00:48:05,920 --> 00:48:08,400
anytime you hit that f5

1318
00:48:08,400 --> 00:48:09,920
you get a new version you could get a

1319
00:48:09,920 --> 00:48:12,880
new version of the software so

1320
00:48:12,880 --> 00:48:15,040
despite doing everything perfectly

1321
00:48:15,040 --> 00:48:17,040
these web-based generators are still

1322
00:48:17,040 --> 00:48:20,319
vulnerable to this sort of attack all

1323
00:48:20,319 --> 00:48:21,440
right

1324
00:48:21,440 --> 00:48:23,440
and that is all i've got

1325
00:48:23,440 --> 00:48:24,559
so i went through it quickly and we

1326
00:48:24,559 --> 00:48:26,720
started late are there any comments

1327
00:48:26,720 --> 00:48:30,078
questions or rude remarks

1328
00:48:32,240 --> 00:48:35,839
nope all right thanks guys

1329
00:48:36,060 --> 00:48:40,849
[Applause]

1330
00:49:54,079 --> 00:49:56,160
you

