1
00:00:00,500 --> 00:00:13,510
[Music]

2
00:00:14,340 --> 00:00:20,230
<font color="#E5E5E5">all right good afternoon my name</font><font color="#CCCCCC"> is</font>

3
00:00:16,449 --> 00:00:21,669
David Moore<font color="#E5E5E5"> very happy to be here</font><font color="#CCCCCC"> first</font>

4
00:00:20,230 --> 00:00:23,200
want to<font color="#E5E5E5"> say thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> so much to the</font>

5
00:00:21,669 --> 00:00:24,939
staff and<font color="#CCCCCC"> volunteers and all the</font>

6
00:00:23,200 --> 00:00:26,650
<font color="#E5E5E5">participants as</font><font color="#CCCCCC"> well at</font><font color="#E5E5E5"> besides I'm a</font>

7
00:00:24,939 --> 00:00:31,059
huge fan<font color="#CCCCCC"> of East Side's</font><font color="#E5E5E5"> I love besides</font>

8
00:00:26,650 --> 00:00:33,460
<font color="#E5E5E5">so it's really nice to</font><font color="#CCCCCC"> be here</font><font color="#E5E5E5"> and just</font>

9
00:00:31,059 --> 00:00:36,219
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> started</font><font color="#CCCCCC"> a few details</font><font color="#E5E5E5"> about my</font>

10
00:00:33,460 --> 00:00:39,670
<font color="#CCCCCC">background I became a</font><font color="#E5E5E5"> professional</font>

11
00:00:36,219 --> 00:00:40,960
developer of software in 1994 had the

12
00:00:39,670 --> 00:00:42,870
opportunity to<font color="#E5E5E5"> work for some pretty</font>

13
00:00:40,960 --> 00:00:45,219
great companies great<font color="#CCCCCC"> people in</font>

14
00:00:42,870 --> 00:00:49,300
<font color="#E5E5E5">engineering sales consulting and</font>

15
00:00:45,219 --> 00:00:50,710
business<font color="#CCCCCC"> development roles and that was</font>

16
00:00:49,300 --> 00:00:52,928
<font color="#CCCCCC">very cool</font><font color="#E5E5E5"> I was having a really cool</font>

17
00:00:50,710 --> 00:00:54,519
career<font color="#E5E5E5"> in that early</font><font color="#CCCCCC"> on in my</font><font color="#E5E5E5"> career I</font>

18
00:00:52,929 --> 00:00:57,850
got<font color="#E5E5E5"> the chance to work</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> next to work</font>

19
00:00:54,519 --> 00:01:00,460
with Steve<font color="#CCCCCC"> Jobs not</font><font color="#E5E5E5"> directly but I was</font>

20
00:00:57,850 --> 00:01:01,870
actually<font color="#E5E5E5"> one manager away from him one</font>

21
00:01:00,460 --> 00:01:04,330
of<font color="#E5E5E5"> my managers</font><font color="#CCCCCC"> left</font><font color="#E5E5E5"> and it took a month</font>

22
00:01:01,870 --> 00:01:07,210
<font color="#CCCCCC">to set up</font><font color="#E5E5E5"> a new manager so I reported to</font>

23
00:01:04,330 --> 00:01:09,310
<font color="#E5E5E5">the VP of professional services and</font><font color="#CCCCCC"> he</font>

24
00:01:07,210 --> 00:01:11,589
reported<font color="#CCCCCC"> to Steve so that was</font>

25
00:01:09,310 --> 00:01:12,970
<font color="#E5E5E5">interesting that went great though got</font>

26
00:01:11,590 --> 00:01:17,290
bought<font color="#CCCCCC"> by Apple</font><font color="#E5E5E5"> and one of the biggest</font>

27
00:01:12,970 --> 00:01:21,640
acquisitions ever went on<font color="#E5E5E5"> to you know</font>

28
00:01:17,290 --> 00:01:22,810
some<font color="#E5E5E5"> other</font><font color="#CCCCCC"> really cool companies and but</font>

29
00:01:21,640 --> 00:01:24,250
after<font color="#CCCCCC"> about</font><font color="#E5E5E5"> 10 years</font><font color="#CCCCCC"> of that</font><font color="#E5E5E5"> I decided</font>

30
00:01:22,810 --> 00:01:26,950
<font color="#CCCCCC">to</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> a break</font><font color="#E5E5E5"> and kind</font><font color="#CCCCCC"> of move into</font>

31
00:01:24,250 --> 00:01:29,740
consulting<font color="#E5E5E5"> and so there I'm called</font>

32
00:01:26,950 --> 00:01:31,860
consulting in Indonesia<font color="#E5E5E5"> and got a chance</font>

33
00:01:29,740 --> 00:01:34,869
<font color="#CCCCCC">to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> that for a little while and</font>

34
00:01:31,860 --> 00:01:37,060
continuing my<font color="#E5E5E5"> break</font><font color="#CCCCCC"> I actually also</font>

35
00:01:34,869 --> 00:01:39,969
spent a few<font color="#E5E5E5"> years as an opera singer</font>

36
00:01:37,060 --> 00:01:40,960
I trained<font color="#E5E5E5"> into opera and</font><font color="#CCCCCC"> was able</font><font color="#E5E5E5"> to get</font>

37
00:01:39,969 --> 00:01:44,229
to the professional<font color="#CCCCCC"> level</font>

38
00:01:40,960 --> 00:01:45,548
<font color="#E5E5E5">semi-professional frankly and that was</font>

39
00:01:44,229 --> 00:01:46,810
<font color="#E5E5E5">cool but I took</font><font color="#CCCCCC"> it about as far</font><font color="#E5E5E5"> as I</font>

40
00:01:45,549 --> 00:01:48,310
<font color="#CCCCCC">could I wasn't really</font><font color="#E5E5E5"> loud enough and</font>

41
00:01:46,810 --> 00:01:50,259
<font color="#E5E5E5">sometimes I'd trouble with a high note</font>

42
00:01:48,310 --> 00:01:51,609
so that's not<font color="#E5E5E5"> going to work and at the</font>

43
00:01:50,259 --> 00:01:52,810
same<font color="#E5E5E5"> time I was seeing you know I was</font>

44
00:01:51,609 --> 00:01:55,000
always following<font color="#CCCCCC"> tech and wanting</font><font color="#E5E5E5"> it</font>

45
00:01:52,810 --> 00:01:57,100
back into<font color="#E5E5E5"> tech and I was seeing a</font><font color="#CCCCCC"> lot of</font>

46
00:01:55,000 --> 00:01:59,079
<font color="#E5E5E5">amazing things happen in the security</font>

47
00:01:57,100 --> 00:02:01,809
<font color="#E5E5E5">space even going back as</font><font color="#CCCCCC"> far as Stuxnet</font>

48
00:01:59,079 --> 00:02:05,619
<font color="#E5E5E5">and some of the really</font><font color="#CCCCCC"> big hacks of 2012</font>

49
00:02:01,810 --> 00:02:07,440
<font color="#E5E5E5">and so I started doing security it's</font>

50
00:02:05,619 --> 00:02:10,449
kind of<font color="#E5E5E5"> a hobby thing just kind</font><font color="#CCCCCC"> of doing</font>

51
00:02:07,440 --> 00:02:12,460
the<font color="#E5E5E5"> venerable</font><font color="#CCCCCC"> web apps things</font><font color="#E5E5E5"> like that</font>

52
00:02:10,449 --> 00:02:14,799
and about three years<font color="#CCCCCC"> ago though I</font>

53
00:02:12,460 --> 00:02:17,500
<font color="#CCCCCC">decided to</font><font color="#E5E5E5"> to really go into a</font><font color="#CCCCCC"> full-time</font>

54
00:02:14,800 --> 00:02:21,720
and concentrate 100%<font color="#E5E5E5"> on offensive</font>

55
00:02:17,500 --> 00:02:21,720
<font color="#CCCCCC">security so</font><font color="#E5E5E5"> so I</font>

56
00:02:21,920 --> 00:02:28,839
participating in bug bounty programs my

57
00:02:26,420 --> 00:02:28,839
apologies

58
00:02:34,989 --> 00:02:40,150
small<font color="#E5E5E5"> slides</font><font color="#CCCCCC"> showed glitch so I got that</font>

59
00:02:53,000 --> 00:02:56,660
and so I<font color="#CCCCCC"> booked body programs are</font>

60
00:02:55,130 --> 00:02:57,200
awesome and<font color="#E5E5E5"> I was working mostly through</font>

61
00:02:56,660 --> 00:03:00,020
bugcrowd

62
00:02:57,200 --> 00:03:02,780
<font color="#E5E5E5">and cobalt and hacker one and so these</font>

63
00:03:00,020 --> 00:03:06,290
let you hack<font color="#E5E5E5"> websites without worrying</font>

64
00:03:02,780 --> 00:03:08,780
about being sued or being interrogated

65
00:03:06,290 --> 00:03:11,090
<font color="#CCCCCC">and if you find a vulnerability and and</font>

66
00:03:08,780 --> 00:03:12,740
report it responsibly<font color="#E5E5E5"> it's really nice</font>

67
00:03:11,090 --> 00:03:14,840
because<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can get some money back from</font>

68
00:03:12,740 --> 00:03:17,150
it but really<font color="#CCCCCC"> more importantly it's the</font>

69
00:03:14,840 --> 00:03:19,370
<font color="#E5E5E5">recognition that you get from it as well</font>

70
00:03:17,150 --> 00:03:23,540
as the<font color="#E5E5E5"> training you learn a lot hitting</font>

71
00:03:19,370 --> 00:03:25,790
real<font color="#E5E5E5"> websites</font><font color="#CCCCCC"> and so I did that for a</font>

72
00:03:23,540 --> 00:03:27,670
<font color="#CCCCCC">while I found stuff in Google full</font>

73
00:03:25,790 --> 00:03:29,799
<font color="#CCCCCC">disclosure that</font><font color="#E5E5E5"> was a couple of Google</font>

74
00:03:27,670 --> 00:03:32,780
acquisitions a couple of different<font color="#E5E5E5"> ones</font>

75
00:03:29,800 --> 00:03:34,459
<font color="#E5E5E5">and so that went great</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> then I was</font>

76
00:03:32,780 --> 00:03:38,450
<font color="#CCCCCC">thinking about getting my certificate</font>

77
00:03:34,459 --> 00:03:40,280
<font color="#E5E5E5">offensive security</font><font color="#CCCCCC"> o SCP and I knew they</font>

78
00:03:38,450 --> 00:03:41,988
had stuff about memory corruption<font color="#E5E5E5"> and</font>

79
00:03:40,280 --> 00:03:43,430
<font color="#E5E5E5">things like</font><font color="#CCCCCC"> that and I didn't know</font><font color="#E5E5E5"> that</font>

80
00:03:41,989 --> 00:03:45,560
<font color="#E5E5E5">much</font><font color="#CCCCCC"> about it</font><font color="#E5E5E5"> at the time but I decided</font>

81
00:03:43,430 --> 00:03:47,690
<font color="#E5E5E5">to start studying that and I really got</font>

82
00:03:45,560 --> 00:03:50,420
<font color="#E5E5E5">into it and so I essentially started</font>

83
00:03:47,690 --> 00:03:52,700
doing that only<font color="#E5E5E5"> and moved away from the</font>

84
00:03:50,420 --> 00:03:54,920
web stuff<font color="#E5E5E5"> pivoting or fuzzing and memory</font>

85
00:03:52,700 --> 00:03:56,810
corruption<font color="#CCCCCC"> and I was mostly using a new</font>

86
00:03:54,920 --> 00:03:58,670
fuzzer called<font color="#E5E5E5"> AFL it stands</font><font color="#CCCCCC"> for our</font>

87
00:03:56,810 --> 00:04:00,920
<font color="#E5E5E5">short for our</font><font color="#CCCCCC"> American</font><font color="#E5E5E5"> fuzzy</font><font color="#CCCCCC"> loped and</font>

88
00:03:58,670 --> 00:04:03,109
this is developed<font color="#E5E5E5"> at Google by a guy</font>

89
00:04:00,920 --> 00:04:04,910
named<font color="#E5E5E5"> Mikkel Zalewski and it's a</font>

90
00:04:03,110 --> 00:04:12,140
groundbreaking<font color="#E5E5E5"> new fuzzer and very very</font>

91
00:04:04,910 --> 00:04:13,760
<font color="#E5E5E5">powerful</font><font color="#CCCCCC"> and and then I started a</font>

92
00:04:12,140 --> 00:04:14,988
company<font color="#CCCCCC"> called fuzz station I got some</font>

93
00:04:13,760 --> 00:04:16,969
<font color="#CCCCCC">into fuzzing I started a</font><font color="#E5E5E5"> company last</font>

94
00:04:14,989 --> 00:04:21,910
summer called<font color="#CCCCCC"> flood station and we offer</font>

95
00:04:16,970 --> 00:04:25,490
fuzz testing at scale in the cloud and

96
00:04:21,910 --> 00:04:30,620
<font color="#CCCCCC">ok so enough about</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> we're going talk</font>

97
00:04:25,490 --> 00:04:31,910
about<font color="#CCCCCC"> the talk outline today when I</font>

98
00:04:30,620 --> 00:04:33,470
first started fuzzing I<font color="#E5E5E5"> wondered myself</font>

99
00:04:31,910 --> 00:04:34,880
<font color="#CCCCCC">ok what</font><font color="#E5E5E5"> am I going to do if I found a</font>

100
00:04:33,470 --> 00:04:37,729
crash the fuzzer is powerful you can

101
00:04:34,880 --> 00:04:39,140
make things crash<font color="#E5E5E5"> but didn't really know</font>

102
00:04:37,729 --> 00:04:41,450
<font color="#E5E5E5">what I would how I'd handle that what I</font>

103
00:04:39,140 --> 00:04:43,070
do if I found<font color="#E5E5E5"> one so I worked it out</font>

104
00:04:41,450 --> 00:04:45,530
through just<font color="#E5E5E5"> reading and trying lots of</font>

105
00:04:43,070 --> 00:04:47,990
stuff<font color="#E5E5E5"> and this talk is</font><font color="#CCCCCC"> the result of</font>

106
00:04:45,530 --> 00:04:50,479
<font color="#CCCCCC">that so we're going to</font><font color="#E5E5E5"> be addressing</font>

107
00:04:47,990 --> 00:04:54,020
today<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> corruption issues in</font><font color="#E5E5E5"> C and</font>

108
00:04:50,479 --> 00:04:56,570
<font color="#E5E5E5">C++ programs and I kind of call this the</font>

109
00:04:54,020 --> 00:04:59,359
<font color="#E5E5E5">middle section of the process</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> not</font>

110
00:04:56,570 --> 00:05:00,800
<font color="#E5E5E5">going to talk</font><font color="#CCCCCC"> about doing a fuzz run or</font>

111
00:04:59,360 --> 00:05:01,610
what I call<font color="#E5E5E5"> the art of fuzzing which is</font>

112
00:05:00,800 --> 00:05:04,400
choosing a fuzzer

113
00:05:01,610 --> 00:05:05,960
choosing seed files<font color="#E5E5E5"> how long to do a</font>

114
00:05:04,400 --> 00:05:07,250
fuzz run<font color="#E5E5E5"> for</font>

115
00:05:05,960 --> 00:05:10,130
that's been<font color="#E5E5E5"> pretty well covered in a</font>

116
00:05:07,250 --> 00:05:11,150
couple of talks in 2016<font color="#E5E5E5"> and we're also</font>

117
00:05:10,130 --> 00:05:12,500
<font color="#E5E5E5">not going</font><font color="#CCCCCC"> to talk about exploit</font>

118
00:05:11,150 --> 00:05:15,049
development that's definitely far beyond

119
00:05:12,500 --> 00:05:16,190
<font color="#E5E5E5">the scope of this talk or what I know</font><font color="#CCCCCC"> so</font>

120
00:05:15,050 --> 00:05:17,479
it's really the<font color="#E5E5E5"> middle you've done the</font>

121
00:05:16,190 --> 00:05:19,669
fuzz<font color="#E5E5E5"> run you've got a bunch of crashes</font>

122
00:05:17,479 --> 00:05:21,109
<font color="#CCCCCC">what do you do the goal is to get</font><font color="#E5E5E5"> to the</font>

123
00:05:19,669 --> 00:05:23,090
<font color="#E5E5E5">point where you can triage those crashes</font>

124
00:05:21,110 --> 00:05:26,000
<font color="#CCCCCC">understand if they're exploitable or not</font>

125
00:05:23,090 --> 00:05:27,888
<font color="#E5E5E5">and also to an extent</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> down the</font>

126
00:05:26,000 --> 00:05:33,620
road<font color="#CCCCCC"> of maybe finding</font><font color="#E5E5E5"> the bug</font>

127
00:05:27,889 --> 00:05:35,539
if debugging is your goal so we're going

128
00:05:33,620 --> 00:05:37,789
to<font color="#E5E5E5"> introduce</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> a quick review of memory</font>

129
00:05:35,539 --> 00:05:39,169
corruption bugs<font color="#E5E5E5"> go through the</font><font color="#CCCCCC"> workflow</font>

130
00:05:37,789 --> 00:05:43,190
<font color="#E5E5E5">I developed and then look at a couple</font><font color="#CCCCCC"> of</font>

131
00:05:39,169 --> 00:05:44,330
<font color="#E5E5E5">real-world</font><font color="#CCCCCC"> examples from</font><font color="#E5E5E5"> my research so</font>

132
00:05:43,190 --> 00:05:47,870
here's a quick review<font color="#CCCCCC"> of</font><font color="#E5E5E5"> memory</font>

133
00:05:44,330 --> 00:05:49,280
corruption bugs<font color="#CCCCCC"> really a lot</font><font color="#E5E5E5"> of times</font>

134
00:05:47,870 --> 00:05:50,570
they<font color="#E5E5E5"> come down</font><font color="#CCCCCC"> to invalid reads and</font>

135
00:05:49,280 --> 00:05:53,030
writes what do we<font color="#E5E5E5"> really mean by memory</font>

136
00:05:50,570 --> 00:05:55,070
<font color="#CCCCCC">corruption</font><font color="#E5E5E5"> and to really reduce it</font><font color="#CCCCCC"> down</font>

137
00:05:53,030 --> 00:05:57,138
<font color="#E5E5E5">it's invalid reads or writes if you can</font>

138
00:05:55,070 --> 00:05:58,909
coerce a program to read or write

139
00:05:57,139 --> 00:05:59,419
<font color="#CCCCCC">outside the bounds of where it's</font>

140
00:05:58,910 --> 00:06:02,389
supposed<font color="#E5E5E5"> to</font>

141
00:05:59,419 --> 00:06:04,340
on any given buffer or environment I'm

142
00:06:02,389 --> 00:06:06,860
sorry variable that's<font color="#CCCCCC"> what we call it</font>

143
00:06:04,340 --> 00:06:08,719
consider an invalid read or write<font color="#E5E5E5"> also</font>

144
00:06:06,860 --> 00:06:11,389
called an out of bounds<font color="#CCCCCC"> read or write</font>

145
00:06:08,720 --> 00:06:14,360
sometimes<font color="#CCCCCC"> abbreviated as oob reads and</font>

146
00:06:11,389 --> 00:06:16,010
writes you'll see and just real quickly

147
00:06:14,360 --> 00:06:19,550
the broad causes of<font color="#E5E5E5"> this kind of memory</font>

148
00:06:16,010 --> 00:06:22,610
<font color="#CCCCCC">corruption</font><font color="#E5E5E5"> are so often</font><font color="#CCCCCC"> many many cases</font>

149
00:06:19,550 --> 00:06:25,699
of off-by-one errors<font color="#E5E5E5"> so I see off-by-one</font>

150
00:06:22,610 --> 00:06:28,190
<font color="#E5E5E5">errors</font><font color="#CCCCCC"> and over half of the crashes that</font>

151
00:06:25,699 --> 00:06:31,190
that I find<font color="#E5E5E5"> and then certainly</font>

152
00:06:28,190 --> 00:06:33,770
unvalidated input<font color="#E5E5E5"> can cause problems and</font>

153
00:06:31,190 --> 00:06:36,500
in some cases still<font color="#E5E5E5"> the use of unknown</font>

154
00:06:33,770 --> 00:06:40,070
of known unsafe functions and<font color="#E5E5E5"> C like</font>

155
00:06:36,500 --> 00:06:43,759
stir copy and<font color="#CCCCCC"> getstring</font><font color="#E5E5E5"> how can cause</font>

156
00:06:40,070 --> 00:06:45,979
<font color="#E5E5E5">quite a few problems and so in a process</font>

157
00:06:43,759 --> 00:06:48,280
there's two areas<font color="#CCCCCC"> of</font><font color="#E5E5E5"> memory the stack</font>

158
00:06:45,979 --> 00:06:50,680
and the heap<font color="#E5E5E5"> either can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> corrupted</font>

159
00:06:48,280 --> 00:06:53,719
<font color="#E5E5E5">local variables are stored on the</font><font color="#CCCCCC"> stack</font>

160
00:06:50,680 --> 00:06:56,419
<font color="#CCCCCC">so if you're doing in two x equals five</font>

161
00:06:53,720 --> 00:06:59,389
that's<font color="#E5E5E5"> going to go on</font><font color="#CCCCCC"> the stack memory</font>

162
00:06:56,419 --> 00:07:01,400
obtained or using malloc<font color="#CCCCCC"> like in a</font>

163
00:06:59,389 --> 00:07:05,870
string buffer<font color="#E5E5E5"> that's going to be located</font>

164
00:07:01,400 --> 00:07:07,159
<font color="#E5E5E5">on the heap any heap memory that's been</font>

165
00:07:05,870 --> 00:07:10,099
obtained with malloc has to be

166
00:07:07,159 --> 00:07:12,409
explicitly freed<font color="#E5E5E5"> with a call to free if</font>

167
00:07:10,099 --> 00:07:14,319
not things can go south quickly<font color="#CCCCCC"> we'll</font>

168
00:07:12,409 --> 00:07:17,139
cover that a<font color="#CCCCCC"> little bit later</font>

169
00:07:14,319 --> 00:07:18,789
heap and stack buffer<font color="#E5E5E5"> overflows are</font>

170
00:07:17,139 --> 00:07:21,580
pretty common still so we see a lot of

171
00:07:18,789 --> 00:07:23,050
them both<font color="#E5E5E5"> in general stack buffer</font>

172
00:07:21,580 --> 00:07:25,568
<font color="#E5E5E5">overflows are getting harder and harder</font>

173
00:07:23,050 --> 00:07:27,930
<font color="#CCCCCC">to</font><font color="#E5E5E5"> exploit so mostly attention is being</font>

174
00:07:25,569 --> 00:07:30,069
pointed<font color="#E5E5E5"> at the heap at this point and</font>

175
00:07:27,930 --> 00:07:31,270
one quick note you'll hear the word

176
00:07:30,069 --> 00:07:33,399
<font color="#E5E5E5">stack overflow</font>

177
00:07:31,270 --> 00:07:34,839
strictly speaking that's when recursion

178
00:07:33,399 --> 00:07:37,210
gets out of<font color="#E5E5E5"> control</font><font color="#CCCCCC"> that's not a memory</font>

179
00:07:34,839 --> 00:07:38,919
corruption bug so if recursion it just

180
00:07:37,210 --> 00:07:40,388
keeps going<font color="#CCCCCC"> and you keep pushing frames</font>

181
00:07:38,919 --> 00:07:42,039
and frames<font color="#CCCCCC"> and</font><font color="#E5E5E5"> frames on the stack</font>

182
00:07:40,389 --> 00:07:44,110
eventually the stack is probably<font color="#CCCCCC"> either</font>

183
00:07:42,039 --> 00:07:45,308
going to<font color="#E5E5E5"> meet the heap or something else</font>

184
00:07:44,110 --> 00:07:47,559
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> going wrong if it's in a browser</font>

185
00:07:45,309 --> 00:07:50,680
<font color="#E5E5E5">and JavaScript</font><font color="#CCCCCC"> sometimes that will get</font>

186
00:07:47,559 --> 00:07:51,610
caught and so this is<font color="#E5E5E5"> distinct from what</font>

187
00:07:50,680 --> 00:07:55,149
we're going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about today which is</font>

188
00:07:51,610 --> 00:07:57,459
<font color="#E5E5E5">a stack based buffer overflow</font><font color="#CCCCCC"> in fact</font>

189
00:07:55,149 --> 00:07:59,649
here's a quick<font color="#CCCCCC"> example of one really</font>

190
00:07:57,459 --> 00:08:01,659
<font color="#E5E5E5">simple if you have</font><font color="#CCCCCC"> a program</font><font color="#E5E5E5"> with main</font>

191
00:07:59,649 --> 00:08:04,599
it takes an argument<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the command</font>

192
00:08:01,659 --> 00:08:06,580
line<font color="#E5E5E5"> as input creates a character</font><font color="#CCCCCC"> array</font>

193
00:08:04,599 --> 00:08:08,680
of size<font color="#E5E5E5"> 8 and then you use</font><font color="#CCCCCC"> a known</font>

194
00:08:06,580 --> 00:08:10,808
unsafe function like stir copy<font color="#E5E5E5"> and buff</font>

195
00:08:08,680 --> 00:08:13,659
copy the argument from<font color="#E5E5E5"> the command line</font>

196
00:08:10,809 --> 00:08:15,759
into there<font color="#E5E5E5"> that'll work fine up until</font>

197
00:08:13,659 --> 00:08:18,789
you send it more than<font color="#CCCCCC"> 8 characters so</font>

198
00:08:15,759 --> 00:08:21,219
here we're sending it 12 capital<font color="#E5E5E5"> A's and</font>

199
00:08:18,789 --> 00:08:23,529
that will definitely overflow by 4 bytes

200
00:08:21,219 --> 00:08:28,120
so that's a<font color="#CCCCCC"> simple example of a stack</font>

201
00:08:23,529 --> 00:08:30,389
buffer overflow<font color="#E5E5E5"> and so what happens when</font>

202
00:08:28,120 --> 00:08:33,429
free is not<font color="#E5E5E5"> called pop properly on</font>

203
00:08:30,389 --> 00:08:35,169
memory<font color="#E5E5E5"> obtained with malloc this is</font>

204
00:08:33,429 --> 00:08:38,649
another kind<font color="#E5E5E5"> of memory corruption bug</font>

205
00:08:35,169 --> 00:08:40,929
called use after free commonly called

206
00:08:38,649 --> 00:08:43,299
<font color="#CCCCCC">the UAF and this is just what it sounds</font>

207
00:08:40,929 --> 00:08:46,180
<font color="#CCCCCC">like when a program continues to use a</font>

208
00:08:43,299 --> 00:08:47,889
pointer<font color="#E5E5E5"> that's already been freed these</font>

209
00:08:46,180 --> 00:08:52,239
are highly likely to be exploitable

210
00:08:47,889 --> 00:08:54,670
<font color="#E5E5E5">especially in C++ code they often show</font>

211
00:08:52,240 --> 00:08:57,730
<font color="#CCCCCC">up during</font><font color="#E5E5E5"> error conditions and corner</font>

212
00:08:54,670 --> 00:08:59,139
cases<font color="#E5E5E5"> so</font><font color="#CCCCCC"> anytime it might</font><font color="#E5E5E5"> be unclear who</font>

213
00:08:57,730 --> 00:09:01,779
or<font color="#E5E5E5"> what part of the program is</font>

214
00:08:59,139 --> 00:09:03,699
responsible<font color="#CCCCCC"> for freeing malloc memory if</font>

215
00:09:01,779 --> 00:09:06,040
that's<font color="#E5E5E5"> not really clearly laid out you</font>

216
00:09:03,699 --> 00:09:09,189
can<font color="#CCCCCC"> definitely run</font><font color="#E5E5E5"> into use after free</font>

217
00:09:06,040 --> 00:09:10,750
vulnerability for instance who<font color="#E5E5E5"> frees the</font>

218
00:09:09,189 --> 00:09:12,160
<font color="#CCCCCC">caller</font><font color="#E5E5E5"> or the quality</font><font color="#CCCCCC"> of a function</font>

219
00:09:10,750 --> 00:09:15,220
<font color="#E5E5E5">that's not clearly laid out you're going</font>

220
00:09:12,160 --> 00:09:19,959
<font color="#E5E5E5">to see</font><font color="#CCCCCC"> these and here's a quick example</font>

221
00:09:15,220 --> 00:09:22,510
of<font color="#CCCCCC"> a UAF and so here we have</font><font color="#E5E5E5"> a pointer</font>

222
00:09:19,959 --> 00:09:24,739
<font color="#CCCCCC">to character for</font><font color="#E5E5E5"> bytes</font><font color="#CCCCCC"> we do</font><font color="#E5E5E5"> something</font>

223
00:09:22,510 --> 00:09:27,170
with<font color="#CCCCCC"> it we free it</font>

224
00:09:24,740 --> 00:09:28,370
so more stuff happens<font color="#E5E5E5"> and we forget we</font>

225
00:09:27,170 --> 00:09:29,000
freed it or maybe there's air<font color="#E5E5E5"> air</font>

226
00:09:28,370 --> 00:09:31,339
<font color="#CCCCCC">condition</font>

227
00:09:29,000 --> 00:09:34,310
maybe there's a bug and so we

228
00:09:31,339 --> 00:09:41,420
dereference<font color="#E5E5E5"> that again and and that's</font>

229
00:09:34,310 --> 00:09:42,529
your standard<font color="#CCCCCC"> u AF error and then</font>

230
00:09:41,420 --> 00:09:45,349
there's other<font color="#E5E5E5"> kinds of memory corruption</font>

231
00:09:42,529 --> 00:09:47,870
bugs as<font color="#CCCCCC"> well</font><font color="#E5E5E5"> certainly a double free or</font>

232
00:09:45,350 --> 00:09:49,970
an invalid<font color="#E5E5E5"> free it's also called it's</font>

233
00:09:47,870 --> 00:09:51,980
when you call<font color="#E5E5E5"> free a second time</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's</font>

234
00:09:49,970 --> 00:09:54,890
distinct from you AF where you call free

235
00:09:51,980 --> 00:09:56,000
and then<font color="#CCCCCC"> dereference it in this</font><font color="#E5E5E5"> case</font>

236
00:09:54,890 --> 00:09:58,640
<font color="#E5E5E5">you're calling free and then you call</font>

237
00:09:56,000 --> 00:10:00,470
free on it again<font color="#E5E5E5"> and so those are</font><font color="#CCCCCC"> pretty</font>

238
00:09:58,640 --> 00:10:03,890
hard to<font color="#E5E5E5"> exploit directly they can be</font>

239
00:10:00,470 --> 00:10:06,649
under race conditions<font color="#CCCCCC"> in</font><font color="#E5E5E5"> multi-threaded</font>

240
00:10:03,890 --> 00:10:08,120
applications however<font color="#CCCCCC"> almost more</font>

241
00:10:06,649 --> 00:10:10,279
importantly is that<font color="#CCCCCC"> a lot of double</font>

242
00:10:08,120 --> 00:10:12,440
<font color="#CCCCCC">fries can be leveraged into</font><font color="#E5E5E5"> a use after</font>

243
00:10:10,279 --> 00:10:14,510
free<font color="#E5E5E5"> so there might be a code path of</font>

244
00:10:12,440 --> 00:10:16,399
results in a double free but if<font color="#E5E5E5"> you see</font>

245
00:10:14,510 --> 00:10:19,220
one<font color="#E5E5E5"> there probably or they may well be</font>

246
00:10:16,399 --> 00:10:22,760
<font color="#E5E5E5">another code path where instead of</font><font color="#CCCCCC"> being</font>

247
00:10:19,220 --> 00:10:24,170
freed a second time erroneously the

248
00:10:22,760 --> 00:10:26,870
pointers<font color="#E5E5E5"> dereferenced and then you have</font>

249
00:10:24,170 --> 00:10:28,069
<font color="#E5E5E5">a</font><font color="#CCCCCC"> UAF so anytime I</font><font color="#E5E5E5"> see a double free I'm</font>

250
00:10:26,870 --> 00:10:29,540
definitely going<font color="#E5E5E5"> to be pretty interested</font>

251
00:10:28,070 --> 00:10:31,520
<font color="#E5E5E5">in trying to leverage that into</font><font color="#CCCCCC"> UAF</font>

252
00:10:29,540 --> 00:10:35,510
somehow<font color="#E5E5E5"> try to find another path through</font>

253
00:10:31,520 --> 00:10:38,120
the program another<font color="#E5E5E5"> kind of memory bug</font>

254
00:10:35,510 --> 00:10:40,790
is when a conditional depends on an

255
00:10:38,120 --> 00:10:44,720
uninitialized variable so if you just

256
00:10:40,790 --> 00:10:47,990
say<font color="#E5E5E5"> int X and then</font><font color="#CCCCCC"> immediately say if</font><font color="#E5E5E5"> X</font>

257
00:10:44,720 --> 00:10:49,940
then do something<font color="#E5E5E5"> you have a conditional</font>

258
00:10:47,990 --> 00:10:52,700
or a branch that's based on completely

259
00:10:49,940 --> 00:10:57,709
<font color="#E5E5E5">under low sized values and that can make</font>

260
00:10:52,700 --> 00:10:59,839
a control flow attack possible<font color="#CCCCCC"> then</font>

261
00:10:57,709 --> 00:11:02,449
finally a last<font color="#E5E5E5"> kind of other kind of</font>

262
00:10:59,839 --> 00:11:03,800
memory bug<font color="#E5E5E5"> is memory leaks and we're all</font>

263
00:11:02,450 --> 00:11:06,140
<font color="#E5E5E5">probably pretty familiar with those and</font>

264
00:11:03,800 --> 00:11:08,270
that's so if free never gets called<font color="#E5E5E5"> if</font>

265
00:11:06,140 --> 00:11:12,170
the programmer forgets to call free or

266
00:11:08,270 --> 00:11:14,300
the control flow<font color="#E5E5E5"> path never reaches a</font>

267
00:11:12,170 --> 00:11:16,219
free<font color="#E5E5E5"> and that's just going to use up</font>

268
00:11:14,300 --> 00:11:19,459
lots and lots<font color="#E5E5E5"> and</font><font color="#CCCCCC"> lots of memory and in</font>

269
00:11:16,220 --> 00:11:21,640
that case<font color="#E5E5E5"> you are potentially</font><font color="#CCCCCC"> exposed to</font>

270
00:11:19,459 --> 00:11:24,589
a<font color="#E5E5E5"> DOS attack so if a programmer or an</font>

271
00:11:21,640 --> 00:11:26,149
adversary<font color="#E5E5E5"> can leverage that again and</font>

272
00:11:24,589 --> 00:11:28,430
<font color="#E5E5E5">again use lots and lots of memory it</font>

273
00:11:26,149 --> 00:11:31,450
<font color="#E5E5E5">will exhaust the system and exhaust the</font>

274
00:11:28,430 --> 00:11:31,449
process and bring it to a halt

275
00:11:32,270 --> 00:11:37,410
<font color="#E5E5E5">all right and so next what is exploit</font>

276
00:11:35,580 --> 00:11:38,550
ability<font color="#E5E5E5"> what do we mean by actually</font>

277
00:11:37,410 --> 00:11:39,630
<font color="#CCCCCC">before</font><font color="#E5E5E5"> we go</font><font color="#CCCCCC"> into this I wanted</font><font color="#E5E5E5"> to see</font>

278
00:11:38,550 --> 00:11:42,920
if there's any<font color="#E5E5E5"> questions anybody have</font>

279
00:11:39,630 --> 00:11:42,920
any questions<font color="#E5E5E5"> about anything here</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> far</font>

280
00:11:45,740 --> 00:11:57,840
yeah yeah the<font color="#CCCCCC"> question</font><font color="#E5E5E5"> is what about</font>

281
00:11:55,770 --> 00:12:01,260
languages like rest and go that our

282
00:11:57,840 --> 00:12:04,650
memory memory<font color="#CCCCCC"> manners</font><font color="#E5E5E5"> or even Java or C</font>

283
00:12:01,260 --> 00:12:07,770
sharp<font color="#CCCCCC"> and this this kind of fuzzing</font>

284
00:12:04,650 --> 00:12:11,160
really just targets crashes and so it's

285
00:12:07,770 --> 00:12:13,860
really<font color="#E5E5E5"> only leverageable again</font><font color="#CCCCCC"> c and c++</font>

286
00:12:11,160 --> 00:12:16,380
programs<font color="#E5E5E5"> and the idea of fuzzing</font>

287
00:12:13,860 --> 00:12:18,030
generally is that<font color="#E5E5E5"> you you throw lots of</font>

288
00:12:16,380 --> 00:12:19,950
you know garbage data<font color="#E5E5E5"> lots of random</font>

289
00:12:18,030 --> 00:12:21,870
data unexpected data<font color="#E5E5E5"> and application and</font>

290
00:12:19,950 --> 00:12:23,220
then<font color="#E5E5E5"> you monitor for some anomalous</font>

291
00:12:21,870 --> 00:12:24,990
condition and so normally<font color="#E5E5E5"> what we're</font>

292
00:12:23,220 --> 00:12:27,060
talking<font color="#E5E5E5"> about today and most fuzzers and</font>

293
00:12:24,990 --> 00:12:29,010
c<font color="#E5E5E5"> and c++ the anomalous condition is a</font>

294
00:12:27,060 --> 00:12:31,349
crash<font color="#E5E5E5"> and so if you send it lots of</font>

295
00:12:29,010 --> 00:12:33,330
weird data and try<font color="#E5E5E5"> to make a crash but</font>

296
00:12:31,350 --> 00:12:34,590
certainly<font color="#CCCCCC"> I have an idea</font><font color="#E5E5E5"> that maybe you</font>

297
00:12:33,330 --> 00:12:35,970
could do the<font color="#E5E5E5"> same thing with memory</font>

298
00:12:34,590 --> 00:12:37,770
manage programs<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you just have to</font>

299
00:12:35,970 --> 00:12:39,510
<font color="#E5E5E5">monitor for other anomalous conditions</font>

300
00:12:37,770 --> 00:12:42,930
and the tricky part<font color="#E5E5E5"> is defining those</font>

301
00:12:39,510 --> 00:12:44,520
and so so<font color="#E5E5E5"> that's kind of the</font><font color="#CCCCCC"> idea you</font>

302
00:12:42,930 --> 00:12:48,620
know<font color="#E5E5E5"> in memory manage cases how you</font>

303
00:12:44,520 --> 00:12:52,069
might be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> bug them and thank you</font>

304
00:12:48,620 --> 00:12:52,070
yes so we're here

305
00:12:59,150 --> 00:13:03,199
if a conditional depends on an

306
00:13:00,710 --> 00:13:06,830
uninitialized variable like where do you

307
00:13:03,200 --> 00:13:08,420
see<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I haven't seen it a whole</font><font color="#E5E5E5"> lot</font>

308
00:13:06,830 --> 00:13:10,070
I've<font color="#CCCCCC"> seen it a few times</font><font color="#E5E5E5"> I mean it's</font>

309
00:13:08,420 --> 00:13:14,180
just it's sort of<font color="#CCCCCC"> just like a standard</font>

310
00:13:10,070 --> 00:13:15,740
<font color="#E5E5E5">programming error</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> you're always</font>

311
00:13:14,180 --> 00:13:18,650
supposed<font color="#E5E5E5"> to initialize whenever you</font>

312
00:13:15,740 --> 00:13:29,060
write and so<font color="#CCCCCC"> so it's really just</font><font color="#E5E5E5"> bad</font>

313
00:13:18,650 --> 00:13:30,560
<font color="#E5E5E5">programming uh-huh okay yeah so the</font>

314
00:13:29,060 --> 00:13:32,540
point is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the compiler</font><font color="#E5E5E5"> will catch</font>

315
00:13:30,560 --> 00:13:35,599
that<font color="#CCCCCC"> and and that's that's a</font><font color="#E5E5E5"> good point</font>

316
00:13:32,540 --> 00:13:39,020
<font color="#CCCCCC">um</font><font color="#E5E5E5"> I have seen it a</font><font color="#CCCCCC"> few times in code I</font>

317
00:13:35,600 --> 00:13:44,630
worked on<font color="#E5E5E5"> and so but but thank you for</font>

318
00:13:39,020 --> 00:13:45,860
<font color="#E5E5E5">that yeah anything</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> okay so what we</font>

319
00:13:44,630 --> 00:13:48,050
mean by exploitability

320
00:13:45,860 --> 00:13:49,970
is essentially one<font color="#CCCCCC"> way to think about</font>

321
00:13:48,050 --> 00:13:52,729
<font color="#CCCCCC">our one</font><font color="#E5E5E5"> version of it is reprogramming</font>

322
00:13:49,970 --> 00:13:55,370
with input data and<font color="#E5E5E5"> not code so if we</font>

323
00:13:52,730 --> 00:13:58,460
can trick the program into attacking<font color="#CCCCCC"> and</font>

324
00:13:55,370 --> 00:14:01,370
executing attacker controlled<font color="#E5E5E5"> input data</font>

325
00:13:58,460 --> 00:14:04,790
as if it were code<font color="#E5E5E5"> then we</font><font color="#CCCCCC"> have a code</font>

326
00:14:01,370 --> 00:14:07,280
injection<font color="#E5E5E5"> exploit there's a pretty</font>

327
00:14:04,790 --> 00:14:09,589
<font color="#E5E5E5">famous hacker named Hal var he's at</font>

328
00:14:07,280 --> 00:14:12,110
Google<font color="#E5E5E5"> project zero now and he has an</font>

329
00:14:09,590 --> 00:14:15,400
<font color="#E5E5E5">idea a way to express this he says input</font>

330
00:14:12,110 --> 00:14:18,620
streams become instruction streams or

331
00:14:15,400 --> 00:14:21,740
from an attackers perspective<font color="#E5E5E5"> can I make</font>

332
00:14:18,620 --> 00:14:24,080
your program run my program<font color="#E5E5E5"> and so this</font>

333
00:14:21,740 --> 00:14:26,450
<font color="#E5E5E5">typically involves controlling either a</font>

334
00:14:24,080 --> 00:14:28,880
IP and<font color="#CCCCCC"> 32-bit programs or our IP the</font>

335
00:14:26,450 --> 00:14:30,980
instruction pointer<font color="#E5E5E5"> our IP and 64-bit</font><font color="#CCCCCC"> if</font>

336
00:14:28,880 --> 00:14:33,200
you can get<font color="#E5E5E5"> control of that then you can</font>

337
00:14:30,980 --> 00:14:36,590
<font color="#E5E5E5">point it at maybe some code you've</font>

338
00:14:33,200 --> 00:14:38,120
injected however injection attacks have

339
00:14:36,590 --> 00:14:40,190
been really well mitigated over the

340
00:14:38,120 --> 00:14:42,920
years it's<font color="#E5E5E5"> really hard to get shell code</font>

341
00:14:40,190 --> 00:14:44,570
or custom code into a process now

342
00:14:42,920 --> 00:14:48,110
because of a lot<font color="#E5E5E5"> of mitigations</font><font color="#CCCCCC"> that</font>

343
00:14:44,570 --> 00:14:50,540
have gone on<font color="#CCCCCC"> so most of the exploits</font>

344
00:14:48,110 --> 00:14:52,610
that<font color="#E5E5E5"> we're seeing now are reprogramming</font>

345
00:14:50,540 --> 00:14:54,920
with existing<font color="#E5E5E5"> code in the process</font><font color="#CCCCCC"> so</font>

346
00:14:52,610 --> 00:14:58,220
rather than injecting<font color="#CCCCCC"> new code</font><font color="#E5E5E5"> we're</font>

347
00:14:54,920 --> 00:15:00,229
doing a code reuse attack<font color="#E5E5E5"> so as opposed</font>

348
00:14:58,220 --> 00:15:03,200
to<font color="#E5E5E5"> a code injection attack this is a</font>

349
00:15:00,230 --> 00:15:05,960
code reuse<font color="#E5E5E5"> exploit and this is called</font>

350
00:15:03,200 --> 00:15:08,300
return<font color="#E5E5E5"> oriented programming it relies on</font>

351
00:15:05,960 --> 00:15:09,530
manipulating<font color="#CCCCCC"> the return pointer on the</font>

352
00:15:08,300 --> 00:15:11,930
<font color="#E5E5E5">stack to make this happen</font>

353
00:15:09,530 --> 00:15:12,709
<font color="#E5E5E5">ROP it's also quite ROP and it's also</font>

354
00:15:11,930 --> 00:15:15,260
technically called

355
00:15:12,710 --> 00:15:16,910
weird machine programming and it's not

356
00:15:15,260 --> 00:15:19,010
easy there's the<font color="#E5E5E5"> idea is</font><font color="#CCCCCC"> that you</font>

357
00:15:16,910 --> 00:15:22,640
leverage<font color="#E5E5E5"> code and this is</font><font color="#CCCCCC"> already</font>

358
00:15:19,010 --> 00:15:24,860
compiled code<font color="#CCCCCC"> and you need to string a</font>

359
00:15:22,640 --> 00:15:25,430
<font color="#CCCCCC">bunch of the</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> together to get</font><font color="#E5E5E5"> what</font>

360
00:15:24,860 --> 00:15:27,500
you want

361
00:15:25,430 --> 00:15:29,569
typically popping a shell<font color="#CCCCCC"> and there are</font>

362
00:15:27,500 --> 00:15:32,450
<font color="#CCCCCC">tools that</font><font color="#E5E5E5"> will essentially search</font>

363
00:15:29,570 --> 00:15:35,150
process or for you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> four different</font>

364
00:15:32,450 --> 00:15:37,310
<font color="#E5E5E5">chunks</font><font color="#CCCCCC"> of code you might want to use you</font>

365
00:15:35,150 --> 00:15:38,990
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to tie them together and it</font><font color="#E5E5E5"> can be</font>

366
00:15:37,310 --> 00:15:40,310
<font color="#E5E5E5">like a Rube Goldberg machine if you've</font>

367
00:15:38,990 --> 00:15:42,470
seen these or like<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know when like</font>

368
00:15:40,310 --> 00:15:43,579
the ball comes down<font color="#E5E5E5"> and bounces and I</font>

369
00:15:42,470 --> 00:15:46,700
mean it can<font color="#CCCCCC"> be really hard to run these</font>

370
00:15:43,580 --> 00:15:52,160
<font color="#E5E5E5">things but this is</font><font color="#CCCCCC"> how most</font><font color="#E5E5E5"> at most</font>

371
00:15:46,700 --> 00:15:54,830
exploits go these<font color="#CCCCCC"> days</font><font color="#E5E5E5"> and then does</font>

372
00:15:52,160 --> 00:15:57,290
exploit ability matter<font color="#CCCCCC"> why does</font><font color="#E5E5E5"> it</font>

373
00:15:54,830 --> 00:15:58,790
matter<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I mean sort of yes and</font><font color="#CCCCCC"> no I</font>

374
00:15:57,290 --> 00:16:01,189
mean a crash should be fixed if you're

375
00:15:58,790 --> 00:16:04,189
<font color="#E5E5E5">aware of a memory corruption</font>

376
00:16:01,190 --> 00:16:07,190
vulnerability<font color="#CCCCCC"> or bug</font><font color="#E5E5E5"> it's good to fix it</font>

377
00:16:04,190 --> 00:16:09,050
and however<font color="#E5E5E5"> prioritization is important</font>

378
00:16:07,190 --> 00:16:10,340
<font color="#CCCCCC">to perhaps</font><font color="#E5E5E5"> there's many bugs to fix it's</font>

379
00:16:09,050 --> 00:16:12,680
important to know which<font color="#E5E5E5"> are exploitable</font>

380
00:16:10,340 --> 00:16:16,010
<font color="#E5E5E5">which are not if you're involved with</font>

381
00:16:12,680 --> 00:16:17,239
maintaining<font color="#E5E5E5"> some code and also certainly</font>

382
00:16:16,010 --> 00:16:19,610
if you're<font color="#E5E5E5"> doing white hat work and</font>

383
00:16:17,240 --> 00:16:21,080
reporting the bugs it's pretty important

384
00:16:19,610 --> 00:16:23,420
to<font color="#E5E5E5"> know how exploitable they are for a</font>

385
00:16:21,080 --> 00:16:24,830
couple<font color="#CCCCCC"> of reasons</font><font color="#E5E5E5"> first of all you want</font>

386
00:16:23,420 --> 00:16:27,050
<font color="#E5E5E5">to motivate the vendors or the</font>

387
00:16:24,830 --> 00:16:30,140
<font color="#E5E5E5">maintainer to fix so if you can show or</font>

388
00:16:27,050 --> 00:16:31,459
<font color="#CCCCCC">demonstrate or given a good</font><font color="#E5E5E5"> idea there's</font>

389
00:16:30,140 --> 00:16:34,310
some kind of exploit ability that's

390
00:16:31,460 --> 00:16:36,890
going to<font color="#CCCCCC"> motivate them to</font><font color="#E5E5E5"> fix it another</font>

391
00:16:34,310 --> 00:16:38,300
<font color="#E5E5E5">point is that when you report a bug</font><font color="#CCCCCC"> you</font>

392
00:16:36,890 --> 00:16:40,370
have sort of a choice in a lot of<font color="#CCCCCC"> open</font>

393
00:16:38,300 --> 00:16:42,680
<font color="#E5E5E5">source cases or other situations as</font><font color="#CCCCCC"> well</font>

394
00:16:40,370 --> 00:16:45,770
where you<font color="#CCCCCC"> can call it a security</font><font color="#E5E5E5"> bug or</font>

395
00:16:42,680 --> 00:16:49,040
not<font color="#E5E5E5"> and in open source code a lot of</font>

396
00:16:45,770 --> 00:16:50,840
times you<font color="#E5E5E5"> if you report as a security</font>

397
00:16:49,040 --> 00:16:52,730
<font color="#E5E5E5">bug</font><font color="#CCCCCC"> it won't be in</font><font color="#E5E5E5"> the bug tracking</font>

398
00:16:50,840 --> 00:16:56,180
system it won't<font color="#E5E5E5"> be publicly available</font>

399
00:16:52,730 --> 00:16:58,280
<font color="#CCCCCC">which is good</font><font color="#E5E5E5"> because if you were to</font>

400
00:16:56,180 --> 00:17:00,530
report<font color="#CCCCCC"> something otherwise that is in</font>

401
00:16:58,280 --> 00:17:01,790
there in the bug<font color="#E5E5E5"> tracking tool you might</font>

402
00:17:00,530 --> 00:17:03,079
have<font color="#CCCCCC"> just dropped</font><font color="#E5E5E5"> a zero-day like if</font>

403
00:17:01,790 --> 00:17:04,490
it's a<font color="#E5E5E5"> really critical bug and you</font>

404
00:17:03,080 --> 00:17:06,920
didn't know<font color="#CCCCCC"> that is reported it's like</font>

405
00:17:04,490 --> 00:17:08,599
boom<font color="#E5E5E5"> it's out there and then the other</font>

406
00:17:06,920 --> 00:17:10,520
side<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the coin also is that</font><font color="#E5E5E5"> you don't</font>

407
00:17:08,599 --> 00:17:11,990
<font color="#E5E5E5">want to cry wolf</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> you want to</font>

408
00:17:10,520 --> 00:17:14,810
<font color="#E5E5E5">really if you report something</font><font color="#CCCCCC"> a</font>

409
00:17:11,990 --> 00:17:17,510
security<font color="#CCCCCC"> vulnerability you</font><font color="#E5E5E5"> want it to</font>

410
00:17:14,810 --> 00:17:19,369
really<font color="#CCCCCC"> be one because</font><font color="#E5E5E5"> you know sometimes</font>

411
00:17:17,510 --> 00:17:20,629
the developers are sort of like pushing

412
00:17:19,369 --> 00:17:23,250
<font color="#E5E5E5">back a little bit right so you want to</font>

413
00:17:20,630 --> 00:17:26,050
have a good case that<font color="#CCCCCC"> it is exploitable</font>

414
00:17:23,250 --> 00:17:28,720
and then it's a matter<font color="#CCCCCC"> of exploitable by</font>

415
00:17:26,050 --> 00:17:31,990
whom<font color="#CCCCCC"> there's lots</font><font color="#E5E5E5"> of there's a broad</font>

416
00:17:28,720 --> 00:17:33,760
range<font color="#CCCCCC"> of exploit</font><font color="#E5E5E5"> dev capability out</font>

417
00:17:31,990 --> 00:17:35,080
there so certainly project<font color="#E5E5E5"> zero I talked</font>

418
00:17:33,760 --> 00:17:38,860
<font color="#E5E5E5">about them before they have some great</font>

419
00:17:35,080 --> 00:17:41,379
hackers and other groups certainly have

420
00:17:38,860 --> 00:17:43,169
very very<font color="#E5E5E5"> high level of really great</font>

421
00:17:41,380 --> 00:17:46,930
<font color="#E5E5E5">people and lots and</font><font color="#CCCCCC"> lots of resources</font>

422
00:17:43,170 --> 00:17:49,890
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is one agency we heard about</font><font color="#CCCCCC"> the CI</font>

423
00:17:46,930 --> 00:17:52,240
<font color="#CCCCCC">a very</font><font color="#E5E5E5"> recently doing similar things and</font>

424
00:17:49,890 --> 00:17:53,860
certainly<font color="#E5E5E5"> who else who knows who</font><font color="#CCCCCC"> else</font>

425
00:17:52,240 --> 00:17:55,300
<font color="#E5E5E5">like I believe that probably</font><font color="#CCCCCC"> every</font>

426
00:17:53,860 --> 00:17:58,120
country has some kind of offensive

427
00:17:55,300 --> 00:18:01,750
capability<font color="#E5E5E5"> and there's other groups and</font>

428
00:17:58,120 --> 00:18:03,310
whatever<font color="#CCCCCC"> so the general idea</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> just to</font>

429
00:18:01,750 --> 00:18:05,260
reiterate we all notice but security<font color="#E5E5E5"> is</font>

430
00:18:03,310 --> 00:18:07,659
never<font color="#CCCCCC"> 100% what we're</font><font color="#E5E5E5"> trying to do is</font>

431
00:18:05,260 --> 00:18:09,580
raise<font color="#E5E5E5"> the costs</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the attacker</font><font color="#CCCCCC"> we want</font>

432
00:18:07,660 --> 00:18:11,830
it to be more expensive to<font color="#E5E5E5"> run the hack</font>

433
00:18:09,580 --> 00:18:13,510
<font color="#E5E5E5">than it it</font><font color="#CCCCCC"> than the value of the data or</font>

434
00:18:11,830 --> 00:18:17,860
<font color="#E5E5E5">whatever nefarious purpose is going on</font>

435
00:18:13,510 --> 00:18:19,270
<font color="#E5E5E5">might be to the attacker</font><font color="#CCCCCC"> and then one</font>

436
00:18:17,860 --> 00:18:21,669
other important<font color="#CCCCCC"> point is that</font><font color="#E5E5E5"> most</font>

437
00:18:19,270 --> 00:18:25,000
exploits nowadays our bug<font color="#E5E5E5"> change it's</font>

438
00:18:21,670 --> 00:18:28,030
not<font color="#E5E5E5"> just one bug</font><font color="#CCCCCC"> it's chaining two three</font>

439
00:18:25,000 --> 00:18:30,760
four bugs<font color="#E5E5E5"> together to reach an</font>

440
00:18:28,030 --> 00:18:32,770
exploitable situation and so an

441
00:18:30,760 --> 00:18:34,810
unexploited<font color="#E5E5E5"> bug</font><font color="#CCCCCC"> when it's definitely not</font>

442
00:18:32,770 --> 00:18:37,690
exploitable could still play<font color="#E5E5E5"> a critical</font>

443
00:18:34,810 --> 00:18:43,090
role<font color="#E5E5E5"> in a bug chain that might lead to</font>

444
00:18:37,690 --> 00:18:45,430
an exploit like an RC and then one more

445
00:18:43,090 --> 00:18:47,560
important<font color="#CCCCCC"> point here is that some bugs</font>

446
00:18:45,430 --> 00:18:49,750
are really surprisingly exploitable they

447
00:18:47,560 --> 00:18:53,080
wouldn't seem that way at first<font color="#CCCCCC"> there</font>

448
00:18:49,750 --> 00:18:55,450
<font color="#E5E5E5">was a bug recently disclosed in a</font><font color="#CCCCCC"> DNS</font>

449
00:18:53,080 --> 00:18:57,970
library called<font color="#CCCCCC"> Sierras</font><font color="#E5E5E5"> this is in the</font>

450
00:18:55,450 --> 00:18:59,890
<font color="#E5E5E5">Chrome OS and a researcher</font><font color="#CCCCCC"> or</font>

451
00:18:57,970 --> 00:19:02,320
researchers<font color="#CCCCCC"> there Anonymous</font><font color="#E5E5E5"> found a</font>

452
00:18:59,890 --> 00:19:04,570
remote code execution<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was pretty</font>

453
00:19:02,320 --> 00:19:08,110
<font color="#E5E5E5">bad</font><font color="#CCCCCC"> and but what's interesting about it</font>

454
00:19:04,570 --> 00:19:12,490
<font color="#E5E5E5">is that it was just a one byte overwrite</font>

455
00:19:08,110 --> 00:19:16,000
and so and it was only<font color="#E5E5E5"> a single byte</font>

456
00:19:12,490 --> 00:19:18,190
<font color="#E5E5E5">overwrite passed the buffer and not only</font>

457
00:19:16,000 --> 00:19:19,450
<font color="#E5E5E5">that but it was always the digit</font><font color="#CCCCCC"> one so</font>

458
00:19:18,190 --> 00:19:21,840
the attacker in this case could<font color="#E5E5E5"> not</font>

459
00:19:19,450 --> 00:19:24,700
<font color="#E5E5E5">control what got written in there and</font>

460
00:19:21,840 --> 00:19:26,980
this was reported<font color="#E5E5E5"> there's a 37 page</font>

461
00:19:24,700 --> 00:19:29,650
report I didn't read but this<font color="#E5E5E5"> was</font>

462
00:19:26,980 --> 00:19:31,000
<font color="#CCCCCC">reported by anonymous researcher</font>

463
00:19:29,650 --> 00:19:33,190
researchers

464
00:19:31,000 --> 00:19:37,960
and<font color="#E5E5E5"> it was rate initially related as</font>

465
00:19:33,190 --> 00:19:40,030
moderate security impact and<font color="#E5E5E5"> but a</font><font color="#CCCCCC"> 37</font>

466
00:19:37,960 --> 00:19:42,730
page report proved<font color="#E5E5E5"> that it could gain</font>

467
00:19:40,030 --> 00:19:46,660
complete remote code execution<font color="#CCCCCC"> so very</font>

468
00:19:42,730 --> 00:19:49,090
very<font color="#E5E5E5"> serious bug and who's another note</font>

469
00:19:46,660 --> 00:19:51,160
page about<font color="#E5E5E5"> it and the way this kind of</font>

470
00:19:49,090 --> 00:19:53,139
bug would happen is<font color="#E5E5E5"> the technique called</font>

471
00:19:51,160 --> 00:19:55,210
keep grooming where you make<font color="#E5E5E5"> lots and</font>

472
00:19:53,140 --> 00:19:57,730
<font color="#E5E5E5">lots and lots of calls</font><font color="#CCCCCC"> ahead of time to</font>

473
00:19:55,210 --> 00:20:02,410
arrange<font color="#E5E5E5"> the heap in an exploitable</font>

474
00:19:57,730 --> 00:20:05,380
manner and here's the trigger this<font color="#CCCCCC"> is</font>

475
00:20:02,410 --> 00:20:07,570
<font color="#CCCCCC">what triggered this bug and</font><font color="#E5E5E5"> so is the</font>

476
00:20:05,380 --> 00:20:10,330
<font color="#CCCCCC">DNS library so a typical DNS name but if</font>

477
00:20:07,570 --> 00:20:12,129
<font color="#E5E5E5">there's a trailing escape dot that would</font>

478
00:20:10,330 --> 00:20:13,840
trigger this bug this<font color="#E5E5E5"> is the kind of</font>

479
00:20:12,130 --> 00:20:16,210
thing that you<font color="#E5E5E5"> know we don't know how</font>

480
00:20:13,840 --> 00:20:17,770
they<font color="#CCCCCC"> found this but</font><font color="#E5E5E5"> strongly</font><font color="#CCCCCC"> suggests</font>

481
00:20:16,210 --> 00:20:20,280
<font color="#E5E5E5">that buzzing might have</font><font color="#CCCCCC"> had played a</font>

482
00:20:17,770 --> 00:20:20,280
role<font color="#CCCCCC"> in this</font>

483
00:20:27,090 --> 00:20:31,030
<font color="#CCCCCC">okay and then I would like to go over a</font>

484
00:20:29,110 --> 00:20:33,699
few mitigations<font color="#E5E5E5"> that have made</font>

485
00:20:31,030 --> 00:20:34,330
exploitability a lot harder<font color="#E5E5E5"> last ten or</font>

486
00:20:33,700 --> 00:20:38,500
<font color="#E5E5E5">so years</font>

487
00:20:34,330 --> 00:20:40,120
<font color="#E5E5E5">the first one is stack Canaries</font><font color="#CCCCCC"> and the</font>

488
00:20:38,500 --> 00:20:42,370
second area is just<font color="#E5E5E5"> a random</font><font color="#CCCCCC"> integer</font>

489
00:20:40,120 --> 00:20:44,560
pushed<font color="#CCCCCC"> onto the stack in</font><font color="#E5E5E5"> between stack</font>

490
00:20:42,370 --> 00:20:47,379
frames<font color="#E5E5E5"> so just like a canary in a</font>

491
00:20:44,560 --> 00:20:48,610
coalmine<font color="#E5E5E5"> stack canary indicates when</font>

492
00:20:47,380 --> 00:20:51,250
something has gone<font color="#E5E5E5"> very wrong</font>

493
00:20:48,610 --> 00:20:52,659
it's time to<font color="#CCCCCC"> stop the program the way it</font>

494
00:20:51,250 --> 00:20:54,040
works this is<font color="#CCCCCC"> one way to</font><font color="#E5E5E5"> look at it</font>

495
00:20:52,660 --> 00:20:56,740
stack frames and<font color="#E5E5E5"> you got your Canaries</font>

496
00:20:54,040 --> 00:20:58,180
in<font color="#E5E5E5"> between there</font><font color="#CCCCCC"> it is a random integer</font>

497
00:20:56,740 --> 00:21:01,870
so this may<font color="#E5E5E5"> be a little bit wetter</font><font color="#CCCCCC"> a</font>

498
00:20:58,180 --> 00:21:05,320
better way<font color="#E5E5E5"> to visualize it and so if an</font>

499
00:21:01,870 --> 00:21:08,320
attacker can make a stack based buffer

500
00:21:05,320 --> 00:21:09,850
overflow attack<font color="#E5E5E5"> they can't cross the</font>

501
00:21:08,320 --> 00:21:11,110
<font color="#E5E5E5">boundary into the next stack frame and</font>

502
00:21:09,850 --> 00:21:12,550
it's typically<font color="#E5E5E5"> what you want</font><font color="#CCCCCC"> to do</font>

503
00:21:11,110 --> 00:21:14,949
<font color="#CCCCCC">because that's where the juicy pointers</font>

504
00:21:12,550 --> 00:21:16,690
are a lot of<font color="#E5E5E5"> times so in this case of an</font>

505
00:21:14,950 --> 00:21:18,730
attacker wanted to do an overwrite had a

506
00:21:16,690 --> 00:21:20,920
bad right<font color="#E5E5E5"> the attacker would have to</font>

507
00:21:18,730 --> 00:21:22,510
have these<font color="#E5E5E5"> numbers and recreate them but</font>

508
00:21:20,920 --> 00:21:24,130
the attacker doesn't<font color="#E5E5E5"> and can't</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> them</font>

509
00:21:22,510 --> 00:21:26,800
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> in the OS it's not available to</font>

510
00:21:24,130 --> 00:21:29,890
the attacker<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the operating system</font>

511
00:21:26,800 --> 00:21:32,980
will<font color="#E5E5E5"> check these numbers</font><font color="#CCCCCC"> every time a</font>

512
00:21:29,890 --> 00:21:33,940
stack is accessed so if there's

513
00:21:32,980 --> 00:21:35,220
something's gone wrong<font color="#E5E5E5"> with these</font>

514
00:21:33,940 --> 00:21:37,240
numbers they're not<font color="#E5E5E5"> what they</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> to be</font>

515
00:21:35,220 --> 00:21:38,470
<font color="#E5E5E5">that's a clear indication that there's a</font>

516
00:21:37,240 --> 00:21:44,200
hack going on it's time<font color="#E5E5E5"> to stop the</font>

517
00:21:38,470 --> 00:21:47,200
<font color="#E5E5E5">program</font><font color="#CCCCCC"> next up is data execution</font>

518
00:21:44,200 --> 00:21:48,850
prevention<font color="#E5E5E5"> and this simply marks some</font>

519
00:21:47,200 --> 00:21:50,890
region<font color="#E5E5E5"> in the memory or several as a non</font>

520
00:21:48,850 --> 00:21:52,600
executable so it says there's never

521
00:21:50,890 --> 00:21:55,450
going<font color="#E5E5E5"> to be any executable code in here</font>

522
00:21:52,600 --> 00:21:57,639
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> always going to be data so if the</font>

523
00:21:55,450 --> 00:21:59,740
execution pointer ever points here that

524
00:21:57,640 --> 00:22:02,830
<font color="#CCCCCC">means something's</font><font color="#E5E5E5"> going on time to stop</font>

525
00:21:59,740 --> 00:22:06,670
the program<font color="#E5E5E5"> this is supported at the</font>

526
00:22:02,830 --> 00:22:09,790
<font color="#CCCCCC">hardware level by the NX</font><font color="#E5E5E5"> bit and</font><font color="#CCCCCC"> it's</font>

527
00:22:06,670 --> 00:22:12,100
present in modern CPUs and so the

528
00:22:09,790 --> 00:22:14,230
combination<font color="#CCCCCC"> of stack Canaries</font><font color="#E5E5E5"> and data</font>

529
00:22:12,100 --> 00:22:16,209
execution prevention<font color="#E5E5E5"> has made exploiting</font>

530
00:22:14,230 --> 00:22:20,950
especially stack bugs<font color="#E5E5E5"> a lot more</font>

531
00:22:16,210 --> 00:22:23,350
difficult<font color="#CCCCCC"> one more really important</font>

532
00:22:20,950 --> 00:22:27,160
mitigation is<font color="#E5E5E5"> a SLR address space layout</font>

533
00:22:23,350 --> 00:22:29,679
<font color="#E5E5E5">randomization in this case the OS</font>

534
00:22:27,160 --> 00:22:31,690
scrambles<font color="#CCCCCC"> the memory</font><font color="#E5E5E5"> it kind of shuffles</font>

535
00:22:29,680 --> 00:22:34,540
the memory so just like we<font color="#E5E5E5"> and you buy a</font>

536
00:22:31,690 --> 00:22:37,480
deck of<font color="#CCCCCC"> cards they're in order by number</font>

537
00:22:34,540 --> 00:22:38,770
and<font color="#E5E5E5"> suit but you shuffle them and that</font>

538
00:22:37,480 --> 00:22:40,330
<font color="#E5E5E5">throws them out of order</font>

539
00:22:38,770 --> 00:22:42,610
<font color="#CCCCCC">a little nicer way to</font><font color="#E5E5E5"> maybe</font>

540
00:22:40,330 --> 00:22:45,399
visualize it<font color="#CCCCCC"> just as we map virtual</font>

541
00:22:42,610 --> 00:22:47,830
memory to physical memory<font color="#CCCCCC"> a SLR</font><font color="#E5E5E5"> adds</font>

542
00:22:45,399 --> 00:22:50,620
another level<font color="#E5E5E5"> of remapping over that and</font>

543
00:22:47,830 --> 00:22:52,600
what this does<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that even if an</font>

544
00:22:50,620 --> 00:22:54,850
attacker controlled the execution

545
00:22:52,600 --> 00:22:56,529
pointer<font color="#E5E5E5"> they don't know where to</font><font color="#CCCCCC"> jump to</font>

546
00:22:54,850 --> 00:22:58,149
maybe<font color="#E5E5E5"> to</font><font color="#CCCCCC"> start their rope chain maybe</font>

547
00:22:56,529 --> 00:23:00,190
<font color="#CCCCCC">they have a target</font><font color="#E5E5E5"> where they know some</font>

548
00:22:58,149 --> 00:23:01,989
good<font color="#E5E5E5"> code is that</font><font color="#CCCCCC"> they want to</font><font color="#E5E5E5"> run but</font>

549
00:23:00,190 --> 00:23:03,940
they don't have the real address<font color="#CCCCCC"> of it</font>

550
00:23:01,990 --> 00:23:06,159
<font color="#E5E5E5">they have a scrambled address of it and</font>

551
00:23:03,940 --> 00:23:09,640
so it makes it<font color="#E5E5E5"> very difficult for them</font>

552
00:23:06,159 --> 00:23:11,380
to<font color="#E5E5E5"> jump there and run the attack now one</font>

553
00:23:09,640 --> 00:23:14,679
<font color="#E5E5E5">thing about a</font><font color="#CCCCCC"> SLRs it's not</font><font color="#E5E5E5"> very</font>

554
00:23:11,380 --> 00:23:17,049
effective<font color="#CCCCCC"> on 32-bit</font><font color="#E5E5E5"> systems 32-bit</font>

555
00:23:14,679 --> 00:23:21,190
systems have<font color="#E5E5E5"> only a four gig heap size</font>

556
00:23:17,049 --> 00:23:22,690
and so random<font color="#CCCCCC"> heaps praying attacks can</font>

557
00:23:21,190 --> 00:23:24,669
sometimes work so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> sort of a</font>

558
00:23:22,690 --> 00:23:26,769
<font color="#CCCCCC">brute-force or you know many</font><font color="#E5E5E5"> many times</font>

559
00:23:24,669 --> 00:23:28,269
attacks but you're sort of targeting a

560
00:23:26,769 --> 00:23:30,789
section of<font color="#E5E5E5"> code you're hoping</font><font color="#CCCCCC"> to jump to</font>

561
00:23:28,269 --> 00:23:32,590
and if on<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> the executions you do</font>

562
00:23:30,789 --> 00:23:35,950
jump there then then you're in business

563
00:23:32,590 --> 00:23:40,389
<font color="#CCCCCC">so 64-bit is a different matter a SLR is</font>

564
00:23:35,950 --> 00:23:41,740
very very effective<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and that kind</font>

565
00:23:40,389 --> 00:23:43,120
of concludes the memory corruption

566
00:23:41,740 --> 00:23:45,039
review we're<font color="#CCCCCC"> going to talk about</font><font color="#E5E5E5"> the</font>

567
00:23:43,120 --> 00:23:46,899
<font color="#E5E5E5">workflow</font><font color="#CCCCCC"> before we do are there any</font>

568
00:23:45,039 --> 00:23:47,429
<font color="#E5E5E5">questions on anything we've covered so</font>

569
00:23:46,899 --> 00:23:57,969
far

570
00:23:47,429 --> 00:24:01,380
yeah<font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> it's not when did that come</font>

571
00:23:57,970 --> 00:24:04,570
<font color="#CCCCCC">out</font><font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> recently last</font><font color="#E5E5E5"> week or</font><font color="#CCCCCC"> two or</font>

572
00:24:01,380 --> 00:24:07,179
February 15th<font color="#E5E5E5"> yeah I'm I</font><font color="#CCCCCC"> don't I'm not</font>

573
00:24:04,570 --> 00:24:08,678
<font color="#E5E5E5">um I'm not really familiar with that I</font>

574
00:24:07,179 --> 00:24:10,809
remember when it<font color="#CCCCCC"> came out yeah this is a</font>

575
00:24:08,679 --> 00:24:11,889
there was a<font color="#E5E5E5"> JavaScript attack on</font><font color="#CCCCCC"> ASL</font><font color="#E5E5E5"> I</font>

576
00:24:10,809 --> 00:24:16,149
do<font color="#E5E5E5"> remember what you're talking about</font>

577
00:24:11,889 --> 00:24:17,408
and it's important I mean<font color="#E5E5E5"> I didn't get a</font>

578
00:24:16,149 --> 00:24:20,110
<font color="#E5E5E5">chance to really study it as much as I</font>

579
00:24:17,409 --> 00:24:21,399
would<font color="#CCCCCC"> have liked</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's it was</font><font color="#E5E5E5"> a</font>

580
00:24:20,110 --> 00:24:23,490
<font color="#E5E5E5">really interesting attack I don't know</font>

581
00:24:21,399 --> 00:24:27,580
how how likely it is to be leverageable

582
00:24:23,490 --> 00:24:29,559
<font color="#E5E5E5">but but that was a really cool it was a</font>

583
00:24:27,580 --> 00:24:32,289
really<font color="#E5E5E5"> cool thing yeah it was a bug</font><font color="#CCCCCC"> that</font>

584
00:24:29,559 --> 00:24:38,389
allowed<font color="#E5E5E5"> JavaScript to defeat a SLR in</font>

585
00:24:32,289 --> 00:24:39,650
some cases anything<font color="#CCCCCC"> else</font><font color="#E5E5E5"> okay so</font>

586
00:24:38,390 --> 00:24:41,390
next section we're going<font color="#E5E5E5"> to kind of go</font>

587
00:24:39,650 --> 00:24:42,710
through<font color="#E5E5E5"> the workflow itself like what do</font>

588
00:24:41,390 --> 00:24:43,970
<font color="#CCCCCC">you do once you've</font><font color="#E5E5E5"> done a fuzz run</font>

589
00:24:42,710 --> 00:24:48,860
you've got a bunch of crashes how do you

590
00:24:43,970 --> 00:24:52,010
deal with<font color="#E5E5E5"> it the steps are to minimize</font>

591
00:24:48,860 --> 00:24:53,780
the crash corpus use<font color="#CCCCCC"> several memory</font>

592
00:24:52,010 --> 00:24:55,760
corruption analysis tools to<font color="#CCCCCC"> get more</font>

593
00:24:53,780 --> 00:24:57,410
information<font color="#CCCCCC"> about what's going</font><font color="#E5E5E5"> on and</font>

594
00:24:55,760 --> 00:24:59,420
then finally determine exploit ability

595
00:24:57,410 --> 00:25:04,040
or if need be work on<font color="#E5E5E5"> trying to find the</font>

596
00:24:59,420 --> 00:25:06,290
root<font color="#CCCCCC"> cause of the bug and so the first</font>

597
00:25:04,040 --> 00:25:09,080
thing is minimization<font color="#CCCCCC"> so there's two</font>

598
00:25:06,290 --> 00:25:11,030
<font color="#CCCCCC">kinds of minimization but before</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> go</font>

599
00:25:09,080 --> 00:25:12,379
<font color="#CCCCCC">into</font><font color="#E5E5E5"> that the</font><font color="#CCCCCC"> reason you know the idea</font>

600
00:25:11,030 --> 00:25:14,090
is you've got a bunch<font color="#CCCCCC"> of cases</font><font color="#E5E5E5"> you've</font>

601
00:25:12,380 --> 00:25:16,310
got many cases like<font color="#E5E5E5"> a couple of cut</font>

602
00:25:14,090 --> 00:25:20,500
<font color="#E5E5E5">couple dozen</font><font color="#CCCCCC"> cases let's say to create</font>

603
00:25:16,310 --> 00:25:23,899
<font color="#E5E5E5">the crashes in these cases</font><font color="#CCCCCC"> are files so</font>

604
00:25:20,500 --> 00:25:26,150
many times the fuzzers<font color="#E5E5E5"> they do their</font>

605
00:25:23,900 --> 00:25:28,100
best<font color="#E5E5E5"> to</font><font color="#CCCCCC"> try to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> their make each</font>

606
00:25:26,150 --> 00:25:29,600
crash unique case<font color="#E5E5E5"> but it's hard for</font><font color="#CCCCCC"> them</font>

607
00:25:28,100 --> 00:25:31,669
<font color="#E5E5E5">to do it during the course of fuzz run</font>

608
00:25:29,600 --> 00:25:35,540
so you tend to<font color="#CCCCCC"> have a lot of</font><font color="#E5E5E5"> cases</font><font color="#CCCCCC"> that</font>

609
00:25:31,670 --> 00:25:38,230
<font color="#CCCCCC">really</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> the same bug and so so it's</font>

610
00:25:35,540 --> 00:25:40,490
important to to minimize those and

611
00:25:38,230 --> 00:25:43,310
that's called<font color="#E5E5E5"> minimizing the corpus</font><font color="#CCCCCC"> of</font>

612
00:25:40,490 --> 00:25:47,690
crashes and so there's a tool in<font color="#CCCCCC"> AFL</font>

613
00:25:43,310 --> 00:25:49,580
called<font color="#E5E5E5"> AFL</font><font color="#CCCCCC"> seaman CMI n there's also a</font>

614
00:25:47,690 --> 00:25:52,010
tool known as<font color="#CCCCCC"> C reduce that</font><font color="#E5E5E5"> will do this</font>

615
00:25:49,580 --> 00:25:54,020
as well<font color="#E5E5E5"> and the idea</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> just have</font>

616
00:25:52,010 --> 00:25:57,350
fewer make sure that every crash in case

617
00:25:54,020 --> 00:25:59,240
is<font color="#E5E5E5"> really distinct as possible and so</font>

618
00:25:57,350 --> 00:26:02,000
that's minimizing the corpus once you've

619
00:25:59,240 --> 00:26:04,130
done that it's also important to

620
00:26:02,000 --> 00:26:07,340
<font color="#CCCCCC">minimize each crashing case individually</font>

621
00:26:04,130 --> 00:26:09,050
<font color="#CCCCCC">so the</font><font color="#E5E5E5"> fuzzer is you know just making up</font>

622
00:26:07,340 --> 00:26:11,389
random stuff<font color="#E5E5E5"> trying to make things crash</font>

623
00:26:09,050 --> 00:26:13,100
<font color="#CCCCCC">a lot of times the cases that it comes</font>

624
00:26:11,390 --> 00:26:15,410
up with has a lot of<font color="#CCCCCC"> extraneous bytes</font>

625
00:26:13,100 --> 00:26:17,060
<font color="#E5E5E5">meaning there's this material in</font><font color="#CCCCCC"> that</font>

626
00:26:15,410 --> 00:26:20,690
file<font color="#CCCCCC"> that has nothing</font><font color="#E5E5E5"> to do with a crash</font>

627
00:26:17,060 --> 00:26:22,129
<font color="#E5E5E5">and so to make things easy to debug</font><font color="#CCCCCC"> it's</font>

628
00:26:20,690 --> 00:26:25,310
important to<font color="#CCCCCC"> minimize that there is a</font>

629
00:26:22,130 --> 00:26:27,170
tool called<font color="#E5E5E5"> AFL team in which handles</font>

630
00:26:25,310 --> 00:26:28,700
that for<font color="#CCCCCC"> you and the way it works is</font>

631
00:26:27,170 --> 00:26:31,490
that<font color="#E5E5E5"> it takes all the</font><font color="#CCCCCC"> bytes and</font>

632
00:26:28,700 --> 00:26:34,370
sequentially<font color="#CCCCCC"> or tries to</font><font color="#E5E5E5"> remove them and</font>

633
00:26:31,490 --> 00:26:36,140
see if<font color="#CCCCCC"> the same crash still happens if</font>

634
00:26:34,370 --> 00:26:38,239
it does happen<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same crash still</font>

635
00:26:36,140 --> 00:26:39,800
happens with<font color="#CCCCCC"> that byte removed then</font>

636
00:26:38,240 --> 00:26:42,530
<font color="#CCCCCC">teman knows that</font><font color="#E5E5E5"> that's an extraneous</font>

637
00:26:39,800 --> 00:26:44,500
fight and<font color="#CCCCCC"> to remove if the crash</font><font color="#E5E5E5"> doesn't</font>

638
00:26:42,530 --> 00:26:47,480
happen or if a<font color="#CCCCCC"> different crash happens</font>

639
00:26:44,500 --> 00:26:49,040
that means that<font color="#E5E5E5"> that byte is very</font>

640
00:26:47,480 --> 00:26:50,990
important to this case and<font color="#E5E5E5"> it stays in</font>

641
00:26:49,040 --> 00:26:52,260
the file<font color="#E5E5E5"> so when you're done with</font><font color="#CCCCCC"> both</font>

642
00:26:50,990 --> 00:26:54,540
<font color="#E5E5E5">this you have your fewer</font>

643
00:26:52,260 --> 00:26:56,360
<font color="#E5E5E5">and each one is really has only the</font>

644
00:26:54,540 --> 00:26:58,860
<font color="#E5E5E5">bytes that are relevant to the crash</font>

645
00:26:56,360 --> 00:27:01,350
then one final<font color="#E5E5E5"> tool that I</font><font color="#CCCCCC"> like to use</font>

646
00:26:58,860 --> 00:27:03,889
is called<font color="#CCCCCC"> F</font><font color="#E5E5E5"> deuce</font><font color="#CCCCCC"> and so</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> after all</font>

647
00:27:01,350 --> 00:27:06,330
this<font color="#E5E5E5"> there are cases where</font><font color="#CCCCCC"> you can have</font>

648
00:27:03,890 --> 00:27:09,240
exhibit<font color="#E5E5E5"> for byte identical crashing</font>

649
00:27:06,330 --> 00:27:11,750
files multiple<font color="#CCCCCC"> of them and so</font><font color="#E5E5E5"> what F</font>

650
00:27:09,240 --> 00:27:15,179
<font color="#CCCCCC">dupes does is it does an md5 hash on</font>

651
00:27:11,750 --> 00:27:17,370
every file in a directory and if there's

652
00:27:15,179 --> 00:27:19,679
multiple files head up the same md5 hash

653
00:27:17,370 --> 00:27:21,239
meaning<font color="#CCCCCC"> thereby two</font><font color="#E5E5E5"> byte identical it'll</font>

654
00:27:19,679 --> 00:27:23,040
remove all but<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of them for you</font><font color="#E5E5E5"> so</font>

655
00:27:21,240 --> 00:27:24,299
<font color="#E5E5E5">that's another nice way just to kind of</font>

656
00:27:23,040 --> 00:27:32,159
clean<font color="#E5E5E5"> things up</font><font color="#CCCCCC"> and get down to</font><font color="#E5E5E5"> the</font>

657
00:27:24,299 --> 00:27:33,750
<font color="#E5E5E5">minimum set of cases</font><font color="#CCCCCC"> now we're going to</font>

658
00:27:32,160 --> 00:27:36,870
go through a few memory corruption

659
00:27:33,750 --> 00:27:38,700
analysis tools<font color="#E5E5E5"> before we get into that</font>

660
00:27:36,870 --> 00:27:39,059
<font color="#E5E5E5">it's important to note that all bets are</font>

661
00:27:38,700 --> 00:27:41,910
<font color="#E5E5E5">off</font>

662
00:27:39,059 --> 00:27:44,549
<font color="#E5E5E5">when things go south in a</font><font color="#CCCCCC"> c program when</font>

663
00:27:41,910 --> 00:27:46,140
memory<font color="#E5E5E5"> gets corrupted</font><font color="#CCCCCC"> you know crazy</font>

664
00:27:44,549 --> 00:27:47,549
stuff can happen<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> can even corrupt</font>

665
00:27:46,140 --> 00:27:49,049
the tools or<font color="#CCCCCC"> caused</font><font color="#E5E5E5"> the tools to give</font>

666
00:27:47,549 --> 00:27:52,410
you in some cases erroneous information

667
00:27:49,049 --> 00:27:58,740
<font color="#E5E5E5">so a little bit of skepticism is always</font>

668
00:27:52,410 --> 00:28:00,030
<font color="#E5E5E5">very useful and so the first corruption</font>

669
00:27:58,740 --> 00:28:02,730
<font color="#E5E5E5">tool talk about is called address</font>

670
00:28:00,030 --> 00:28:07,799
sanitizer and<font color="#E5E5E5"> this is a facility in</font>

671
00:28:02,730 --> 00:28:10,860
compilers<font color="#E5E5E5"> like GCC and clang that is the</font>

672
00:28:07,799 --> 00:28:12,900
flag that<font color="#CCCCCC"> you use to to make sure that</font>

673
00:28:10,860 --> 00:28:17,340
you can pile with address sanitizer<font color="#E5E5E5"> it's</font>

674
00:28:12,900 --> 00:28:19,080
often abbreviated as a<font color="#CCCCCC"> SAN and address</font>

675
00:28:17,340 --> 00:28:22,590
sanitizer operates at both the<font color="#E5E5E5"> compile</font>

676
00:28:19,080 --> 00:28:24,449
<font color="#CCCCCC">time and the</font><font color="#E5E5E5"> run time at compile time it</font>

677
00:28:22,590 --> 00:28:28,110
adds instrumentation<font color="#E5E5E5"> into the binary</font>

678
00:28:24,450 --> 00:28:30,210
<font color="#CCCCCC">that lets a track memory use at run time</font>

679
00:28:28,110 --> 00:28:31,889
<font color="#E5E5E5">it actually replaces the malloc</font>

680
00:28:30,210 --> 00:28:34,530
allocation libraries with its own

681
00:28:31,890 --> 00:28:37,020
runtime library and again as<font color="#CCCCCC"> Alain</font>

682
00:28:34,530 --> 00:28:39,000
enables it to<font color="#E5E5E5"> really track what's</font><font color="#CCCCCC"> going</font>

683
00:28:37,020 --> 00:28:40,710
on with a memory<font color="#E5E5E5"> and really bring a high</font>

684
00:28:39,000 --> 00:28:45,809
<font color="#CCCCCC">degree of accuracy into things</font><font color="#E5E5E5"> that it</font>

685
00:28:40,710 --> 00:28:47,220
finds<font color="#E5E5E5"> and so here's a quick view</font><font color="#CCCCCC"> of it a</font>

686
00:28:45,809 --> 00:28:48,540
little bit hard to read maybe for some

687
00:28:47,220 --> 00:28:50,940
<font color="#CCCCCC">people back but it's nice because it</font>

688
00:28:48,540 --> 00:28:53,970
tells you address sanitizer it says use

689
00:28:50,940 --> 00:28:55,290
after free on address<font color="#CCCCCC"> so</font><font color="#E5E5E5"> and so and</font>

690
00:28:53,970 --> 00:28:56,760
gives you information about the<font color="#E5E5E5"> stack</font>

691
00:28:55,290 --> 00:28:59,460
pointer<font color="#E5E5E5"> in the base pointer as well and</font>

692
00:28:56,760 --> 00:29:02,158
a stack trace<font color="#E5E5E5"> in this case it says a</font>

693
00:28:59,460 --> 00:29:03,520
read<font color="#CCCCCC"> of size four was found at</font><font color="#E5E5E5"> this</font>

694
00:29:02,159 --> 00:29:08,620
memory location

695
00:29:03,520 --> 00:29:12,910
and so it finds<font color="#E5E5E5"> invalid</font><font color="#CCCCCC"> reason right</font><font color="#E5E5E5"> UAF</font>

696
00:29:08,620 --> 00:29:14,439
double<font color="#E5E5E5"> fries memory leaks</font><font color="#CCCCCC"> issues in both</font>

697
00:29:12,910 --> 00:29:18,820
<font color="#CCCCCC">the stack</font><font color="#E5E5E5"> and the heap and several other</font>

698
00:29:14,440 --> 00:29:20,920
things<font color="#E5E5E5"> as well another really important</font>

699
00:29:18,820 --> 00:29:23,290
tool is called Val grind or<font color="#CCCCCC"> that's</font>

700
00:29:20,920 --> 00:29:24,730
actually a family<font color="#CCCCCC"> of tools</font><font color="#E5E5E5"> this tool</font>

701
00:29:23,290 --> 00:29:26,710
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> is called mem Scheck but a lot of</font>

702
00:29:24,730 --> 00:29:29,380
<font color="#E5E5E5">people kind of</font><font color="#CCCCCC"> just say Val grind when</font>

703
00:29:26,710 --> 00:29:31,330
they mean<font color="#CCCCCC"> mend check and mem</font><font color="#E5E5E5"> Tech's</font>

704
00:29:29,380 --> 00:29:34,000
distinct from address sanitizer because

705
00:29:31,330 --> 00:29:36,790
there's no need to<font color="#CCCCCC"> recompile</font><font color="#E5E5E5"> you can run</font>

706
00:29:34,000 --> 00:29:38,350
it<font color="#E5E5E5"> on any binary</font><font color="#CCCCCC"> it does put out</font><font color="#E5E5E5"> lots</font>

707
00:29:36,790 --> 00:29:41,320
and lots of input which needs<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

708
00:29:38,350 --> 00:29:44,290
interpreted<font color="#CCCCCC"> and it's also distinct</font><font color="#E5E5E5"> for</font>

709
00:29:41,320 --> 00:29:47,290
<font color="#E5E5E5">Mason and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it'll allow the process</font>

710
00:29:44,290 --> 00:29:49,270
to<font color="#E5E5E5"> run until the crash</font><font color="#CCCCCC"> where as a SAN</font>

711
00:29:47,290 --> 00:29:50,920
will stop as soon<font color="#CCCCCC"> as it finds any any</font>

712
00:29:49,270 --> 00:29:53,559
memory corruption error at all<font color="#CCCCCC"> it'll</font>

713
00:29:50,920 --> 00:29:55,330
<font color="#E5E5E5">simply stop and so without</font><font color="#CCCCCC"> grind you</font>

714
00:29:53,559 --> 00:29:57,040
might see more<font color="#E5E5E5"> things going on before</font>

715
00:29:55,330 --> 00:29:58,990
<font color="#E5E5E5">the crash actually happened or maybe</font>

716
00:29:57,040 --> 00:30:00,580
<font color="#E5E5E5">it's not even</font><font color="#CCCCCC"> a crash there definitely</font>

717
00:29:58,990 --> 00:30:04,240
<font color="#E5E5E5">can be memory corruption bugs that don't</font>

718
00:30:00,580 --> 00:30:06,490
result<font color="#CCCCCC"> in a crash and so I like</font><font color="#E5E5E5"> to use</font>

719
00:30:04,240 --> 00:30:07,900
them both I like<font color="#E5E5E5"> to use Val</font><font color="#CCCCCC"> Bryan and a</font>

720
00:30:06,490 --> 00:30:11,440
sin<font color="#E5E5E5"> because</font><font color="#CCCCCC"> they kind of give different</font>

721
00:30:07,900 --> 00:30:12,580
perspectives on the crash one important

722
00:30:11,440 --> 00:30:15,809
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> to note though is</font><font color="#E5E5E5"> that they don't</font>

723
00:30:12,580 --> 00:30:18,699
play very<font color="#CCCCCC"> well together if you try to</font>

724
00:30:15,809 --> 00:30:20,530
run valgrind<font color="#CCCCCC"> on an ace and compiled</font>

725
00:30:18,700 --> 00:30:21,850
binary<font color="#CCCCCC"> you're going to get an error</font><font color="#E5E5E5"> it</font>

726
00:30:20,530 --> 00:30:25,000
doesn't doesn't<font color="#E5E5E5"> work out they</font><font color="#CCCCCC"> don't like</font>

727
00:30:21,850 --> 00:30:27,370
<font color="#CCCCCC">each</font><font color="#E5E5E5"> other very much</font><font color="#CCCCCC"> and so alkyne is</font>

728
00:30:25,000 --> 00:30:29,980
very accurate<font color="#CCCCCC"> as well</font><font color="#E5E5E5"> and here's a quick</font>

729
00:30:27,370 --> 00:30:31,510
<font color="#CCCCCC">example the output and</font><font color="#E5E5E5"> a little tough to</font>

730
00:30:29,980 --> 00:30:33,910
<font color="#E5E5E5">read but it's saying invalid write of</font>

731
00:30:31,510 --> 00:30:36,550
<font color="#CCCCCC">size 8</font><font color="#E5E5E5"> and it gives</font><font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> trace for</font>

732
00:30:33,910 --> 00:30:38,350
that as well as the memory location<font color="#E5E5E5"> and</font>

733
00:30:36,550 --> 00:30:41,290
then down a little lower<font color="#E5E5E5"> you have an</font>

734
00:30:38,350 --> 00:30:43,689
invalid read of size<font color="#CCCCCC"> 4 so anytime</font><font color="#E5E5E5"> you</font>

735
00:30:41,290 --> 00:30:45,580
see<font color="#CCCCCC"> a bad write in the heap that's</font>

736
00:30:43,690 --> 00:30:47,500
that's a bad thing<font color="#CCCCCC"> especially if you</font>

737
00:30:45,580 --> 00:30:48,639
have a<font color="#E5E5E5"> right-hand</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> read then the</font>

738
00:30:47,500 --> 00:30:50,590
attacker a lot of times can<font color="#E5E5E5"> manipulate</font>

739
00:30:48,640 --> 00:30:56,950
things and turn that into an exploitable

740
00:30:50,590 --> 00:30:59,199
bug and then<font color="#E5E5E5"> finally a last tool called</font>

741
00:30:56,950 --> 00:31:02,980
<font color="#E5E5E5">exploitable</font><font color="#CCCCCC"> simply called exploitable</font>

742
00:30:59,200 --> 00:31:04,960
<font color="#E5E5E5">and this is developed</font><font color="#CCCCCC"> by cert it's now</font>

743
00:31:02,980 --> 00:31:07,570
been open source and<font color="#E5E5E5"> available on github</font>

744
00:31:04,960 --> 00:31:09,820
<font color="#CCCCCC">it's maintained by a person named</font>

745
00:31:07,570 --> 00:31:12,700
<font color="#CCCCCC">Jonathan foot fo OTE</font>

746
00:31:09,820 --> 00:31:14,070
and so under J foot<font color="#E5E5E5"> slash exploitable</font>

747
00:31:12,700 --> 00:31:18,540
you'll find<font color="#E5E5E5"> this</font>

748
00:31:14,070 --> 00:31:20,129
it's a extension<font color="#E5E5E5"> to gdb</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> hitting but</font>

749
00:31:18,540 --> 00:31:22,950
it also includes a script to run it

750
00:31:20,130 --> 00:31:24,720
<font color="#E5E5E5">outside the context of gdb and it's</font>

751
00:31:22,950 --> 00:31:26,400
written<font color="#E5E5E5"> in Python</font><font color="#CCCCCC"> what I really like</font>

752
00:31:24,720 --> 00:31:31,770
about it<font color="#E5E5E5"> is that it attempts it does its</font>

753
00:31:26,400 --> 00:31:33,210
best<font color="#E5E5E5"> to categorize the crash and so in</font>

754
00:31:31,770 --> 00:31:35,010
this case<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> it's saying that this</font>

755
00:31:33,210 --> 00:31:36,990
is in category exploitable<font color="#CCCCCC"> who's the</font>

756
00:31:35,010 --> 00:31:38,940
example of output<font color="#E5E5E5"> of the tool</font>

757
00:31:36,990 --> 00:31:41,970
exploitable<font color="#E5E5E5"> and it gives you a really</font>

758
00:31:38,940 --> 00:31:44,040
nice explanation<font color="#CCCCCC"> as well</font><font color="#E5E5E5"> and so it's</font>

759
00:31:41,970 --> 00:31:45,870
saying here<font color="#E5E5E5"> the targets</font><font color="#CCCCCC"> back-trace</font>

760
00:31:44,040 --> 00:31:48,750
indicates live<font color="#CCCCCC"> see has detected a heap</font>

761
00:31:45,870 --> 00:31:51,959
error or that<font color="#CCCCCC"> the target was</font><font color="#E5E5E5"> executing a</font>

762
00:31:48,750 --> 00:31:54,780
<font color="#E5E5E5">heap function when it stopped and so so</font>

763
00:31:51,960 --> 00:31:56,280
it's pretty pretty handy a pretty handy

764
00:31:54,780 --> 00:31:57,750
tool<font color="#E5E5E5"> again you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a little</font>

765
00:31:56,280 --> 00:32:01,200
skeptical<font color="#E5E5E5"> you want to do your best to to</font>

766
00:31:57,750 --> 00:32:03,870
verify<font color="#CCCCCC"> these</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> the tool exploitable</font>

767
00:32:01,200 --> 00:32:07,290
will use or offers for different

768
00:32:03,870 --> 00:32:10,620
<font color="#CCCCCC">categories for crashes those are</font>

769
00:32:07,290 --> 00:32:12,710
exploitable<font color="#E5E5E5"> probably exploitable this</font>

770
00:32:10,620 --> 00:32:16,020
could be a stack buffer overflow

771
00:32:12,710 --> 00:32:17,760
<font color="#E5E5E5">probably not exploitable that's not like</font>

772
00:32:16,020 --> 00:32:19,889
things<font color="#E5E5E5"> like a null pointer dereference</font>

773
00:32:17,760 --> 00:32:22,830
or maybe a<font color="#E5E5E5"> floating-point exception and</font>

774
00:32:19,890 --> 00:32:24,450
then it'll categories categorize<font color="#E5E5E5"> things</font>

775
00:32:22,830 --> 00:32:26,010
as unknown as well<font color="#E5E5E5"> there's times when it</font>

776
00:32:24,450 --> 00:32:28,410
just<font color="#E5E5E5"> doesn't have</font><font color="#CCCCCC"> enough information to</font>

777
00:32:26,010 --> 00:32:29,879
say what's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on with a crash in that</font>

778
00:32:28,410 --> 00:32:33,420
case you need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> dig dig down a little</font>

779
00:32:29,880 --> 00:32:35,400
<font color="#E5E5E5">bit further and so</font><font color="#CCCCCC"> altogether</font><font color="#E5E5E5"> these</font>

780
00:32:33,420 --> 00:32:37,950
tools<font color="#CCCCCC"> give a great deal of</font><font color="#E5E5E5"> information</font>

781
00:32:35,400 --> 00:32:40,050
<font color="#E5E5E5">about what's</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> on put you in good</font>

782
00:32:37,950 --> 00:32:42,600
shape<font color="#E5E5E5"> to kind of manage the next step</font>

783
00:32:40,050 --> 00:32:44,760
which is just determining exploitability

784
00:32:42,600 --> 00:32:46,740
<font color="#CCCCCC">digging</font><font color="#E5E5E5"> down to the root cause of it</font>

785
00:32:44,760 --> 00:32:48,890
<font color="#E5E5E5">before we go on any questions at this</font>

786
00:32:46,740 --> 00:32:48,890
<font color="#E5E5E5">point</font>

787
00:32:55,040 --> 00:33:00,020
<font color="#E5E5E5">okay so one important thing to do before</font>

788
00:32:57,350 --> 00:33:02,929
<font color="#CCCCCC">you start working</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> to disable a</font><font color="#E5E5E5"> SLR</font>

789
00:33:00,020 --> 00:33:03,920
<font color="#E5E5E5">and so the reason for that is if you you</font>

790
00:33:02,930 --> 00:33:05,240
know<font color="#E5E5E5"> if you don't you're going to have</font>

791
00:33:03,920 --> 00:33:06,710
different<font color="#E5E5E5"> memory locations</font><font color="#CCCCCC"> on every</font>

792
00:33:05,240 --> 00:33:08,870
<font color="#CCCCCC">execution of the program and</font><font color="#E5E5E5"> that's</font>

793
00:33:06,710 --> 00:33:13,490
going<font color="#CCCCCC"> to make it extremely</font><font color="#E5E5E5"> difficult to</font>

794
00:33:08,870 --> 00:33:15,590
<font color="#E5E5E5">debug and so and certainly you want to</font>

795
00:33:13,490 --> 00:33:17,900
do this carefully<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't want to use</font>

796
00:33:15,590 --> 00:33:19,399
this with with caution behind a<font color="#E5E5E5"> NAT</font>

797
00:33:17,900 --> 00:33:23,360
router or firewall<font color="#E5E5E5"> or something like</font>

798
00:33:19,400 --> 00:33:27,170
<font color="#CCCCCC">that this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> command on in Mbutu to</font>

799
00:33:23,360 --> 00:33:29,270
<font color="#E5E5E5">disable</font><font color="#CCCCCC"> aslr temporarily</font><font color="#E5E5E5"> and it's in a</font>

800
00:33:27,170 --> 00:33:31,100
file called<font color="#CCCCCC"> randomize underscore</font><font color="#E5E5E5"> VA</font>

801
00:33:29,270 --> 00:33:33,530
underscore space and that's<font color="#E5E5E5"> under proc</font>

802
00:33:31,100 --> 00:33:35,209
so you can't just use<font color="#CCCCCC"> VI or another</font>

803
00:33:33,530 --> 00:33:38,450
editor you<font color="#CCCCCC"> have to echo a</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> into it</font>

804
00:33:35,210 --> 00:33:40,700
to turn it off<font color="#CCCCCC"> this</font><font color="#E5E5E5"> if you turn it off</font>

805
00:33:38,450 --> 00:33:44,780
this way when you reboot<font color="#E5E5E5"> you'll have a</font>

806
00:33:40,700 --> 00:33:47,030
SLR back<font color="#E5E5E5"> back in back in</font><font color="#CCCCCC"> shape so and</font>

807
00:33:44,780 --> 00:33:49,370
another thing is<font color="#CCCCCC"> like I'd like to</font><font color="#E5E5E5"> fuzz</font>

808
00:33:47,030 --> 00:33:53,389
on 32-bit I like to work<font color="#E5E5E5"> on 32-bit</font><font color="#CCCCCC"> alot</font>

809
00:33:49,370 --> 00:33:55,550
and so if you're already<font color="#E5E5E5"> on 32-bit</font>

810
00:33:53,390 --> 00:33:57,410
anyway I said before<font color="#CCCCCC"> a SLR is not as</font>

811
00:33:55,550 --> 00:33:59,450
effective<font color="#E5E5E5"> there so disabling</font><font color="#CCCCCC"> a SLR is</font>

812
00:33:57,410 --> 00:34:03,980
not necessarily<font color="#CCCCCC"> as bad of a thing on</font>

813
00:33:59,450 --> 00:34:05,300
32-bit<font color="#CCCCCC"> then really</font><font color="#E5E5E5"> the next step</font><font color="#CCCCCC"> that I</font>

814
00:34:03,980 --> 00:34:06,860
like to do and<font color="#CCCCCC"> I</font><font color="#E5E5E5"> even write these down</font>

815
00:34:05,300 --> 00:34:09,980
is to<font color="#E5E5E5"> really understand what the</font>

816
00:34:06,860 --> 00:34:11,418
<font color="#E5E5E5">critical memory locations are because it</font>

817
00:34:09,980 --> 00:34:13,250
can get a little<font color="#E5E5E5"> bit confusing you're</font>

818
00:34:11,418 --> 00:34:15,139
looking at lots of lots<font color="#E5E5E5"> of hex lots of</font>

819
00:34:13,250 --> 00:34:18,020
memory<font color="#CCCCCC"> locations</font><font color="#E5E5E5"> dumping lots of things</font>

820
00:34:15,139 --> 00:34:19,730
<font color="#E5E5E5">and so it can be confusing</font><font color="#CCCCCC"> about you</font>

821
00:34:18,020 --> 00:34:21,230
know where the crash happened was it<font color="#E5E5E5"> you</font>

822
00:34:19,730 --> 00:34:23,780
know what instruction<font color="#CCCCCC"> where in the EEP</font>

823
00:34:21,230 --> 00:34:25,850
whatever and so<font color="#CCCCCC"> I like to</font><font color="#E5E5E5"> write these</font>

824
00:34:23,780 --> 00:34:27,350
down<font color="#E5E5E5"> and the first step is understand is</font>

825
00:34:25,850 --> 00:34:30,110
it a code<font color="#E5E5E5"> you know is it a memory</font>

826
00:34:27,350 --> 00:34:32,360
location for code or is it for data<font color="#E5E5E5"> so</font>

827
00:34:30,110 --> 00:34:34,850
where the crash happened itself<font color="#E5E5E5"> that's</font>

828
00:34:32,360 --> 00:34:36,860
<font color="#E5E5E5">going to be a code location maybe</font><font color="#CCCCCC"> where</font>

829
00:34:34,850 --> 00:34:40,370
an invalid read or write occurred that's

830
00:34:36,860 --> 00:34:42,470
<font color="#E5E5E5">going to be in data where the memory in</font>

831
00:34:40,370 --> 00:34:44,830
location was<font color="#E5E5E5"> allocated or freed where in</font>

832
00:34:42,469 --> 00:34:46,819
the code<font color="#CCCCCC"> that happened and then maybe</font>

833
00:34:44,830 --> 00:34:48,739
<font color="#E5E5E5">during the course of</font><font color="#CCCCCC"> the program</font><font color="#E5E5E5"> that</font>

834
00:34:46,820 --> 00:34:50,630
data is reassigned to<font color="#CCCCCC"> another variable</font>

835
00:34:48,739 --> 00:34:51,799
<font color="#E5E5E5">or copied moved around things like that</font>

836
00:34:50,630 --> 00:34:53,600
and<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> going to be the both</font>

837
00:34:51,800 --> 00:34:55,710
code and data<font color="#E5E5E5"> that you're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> need</font>

838
00:34:53,600 --> 00:34:58,950
to track in that case

839
00:34:55,710 --> 00:35:02,950
once you do<font color="#CCCCCC"> that it's time for</font><font color="#E5E5E5"> gdb</font><font color="#CCCCCC"> and</font>

840
00:34:58,950 --> 00:35:04,359
<font color="#CCCCCC">so I</font><font color="#E5E5E5"> spend a</font><font color="#CCCCCC"> lot of time in gdb first</font>

841
00:35:02,950 --> 00:35:06,609
thing to<font color="#E5E5E5"> mention is you definitely want</font>

842
00:35:04,359 --> 00:35:09,130
to recompile with<font color="#CCCCCC"> dash G and dash</font>

843
00:35:06,609 --> 00:35:11,400
capital<font color="#E5E5E5"> o 0 dash G will get you the</font>

844
00:35:09,130 --> 00:35:14,440
symbols<font color="#E5E5E5"> each of the function names and</font>

845
00:35:11,400 --> 00:35:18,999
and you<font color="#CCCCCC"> definitely</font><font color="#E5E5E5"> want things also not</font>

846
00:35:14,440 --> 00:35:20,740
optimized<font color="#E5E5E5"> and so the usual approach</font><font color="#CCCCCC"> is</font>

847
00:35:18,999 --> 00:35:23,680
to set a<font color="#E5E5E5"> breakpoint</font><font color="#CCCCCC"> where the crash</font>

848
00:35:20,740 --> 00:35:26,229
happened<font color="#CCCCCC"> and then run</font><font color="#E5E5E5"> the target with</font>

849
00:35:23,680 --> 00:35:28,240
what I call canary values so in this

850
00:35:26,230 --> 00:35:30,910
case capital<font color="#CCCCCC"> a's are really nice</font><font color="#E5E5E5"> they</font>

851
00:35:28,240 --> 00:35:33,848
turn out<font color="#CCCCCC"> to be in hex for 1 that's the</font>

852
00:35:30,910 --> 00:35:34,868
<font color="#CCCCCC">ascii number for capital a and the</font>

853
00:35:33,849 --> 00:35:36,640
<font color="#E5E5E5">reason to do this is</font><font color="#CCCCCC"> that it's really</font>

854
00:35:34,869 --> 00:35:38,109
<font color="#CCCCCC">easy to</font><font color="#E5E5E5"> see once you start dumping</font>

855
00:35:36,640 --> 00:35:39,788
memory and trying to<font color="#E5E5E5"> figure out you know</font>

856
00:35:38,109 --> 00:35:41,259
<font color="#E5E5E5">kind of where the memory wound up the</font>

857
00:35:39,789 --> 00:35:43,599
memory input or maybe trying<font color="#E5E5E5"> to do an</font>

858
00:35:41,259 --> 00:35:46,029
overflow where did the overflow wind up

859
00:35:43,599 --> 00:35:48,160
and it's really<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> see the lots of</font>

860
00:35:46,029 --> 00:35:50,289
<font color="#CCCCCC">forty-ones</font><font color="#E5E5E5"> together if you see that in</font>

861
00:35:48,160 --> 00:35:53,589
the wrong place<font color="#CCCCCC"> you know you've got</font>

862
00:35:50,289 --> 00:35:54,789
<font color="#E5E5E5">something going there and so and the</font>

863
00:35:53,589 --> 00:35:56,230
general<font color="#E5E5E5"> approach is</font><font color="#CCCCCC"> a set a breakpoint</font>

864
00:35:54,789 --> 00:36:00,670
where the crash happens and work

865
00:35:56,230 --> 00:36:02,650
backwards<font color="#CCCCCC"> and so a lot of</font><font color="#E5E5E5"> times you need</font>

866
00:36:00,670 --> 00:36:04,739
to set breakpoints a little sooner in

867
00:36:02,650 --> 00:36:07,960
the control flow to really understand

868
00:36:04,739 --> 00:36:11,170
how things<font color="#E5E5E5"> got to the point where the</font>

869
00:36:07,960 --> 00:36:12,849
memory corruption happened other<font color="#E5E5E5"> than</font>

870
00:36:11,170 --> 00:36:13,900
that like<font color="#E5E5E5"> digging into gdb is definitely</font>

871
00:36:12,849 --> 00:36:19,359
outside<font color="#E5E5E5"> the scope of today's</font>

872
00:36:13,900 --> 00:36:21,700
<font color="#E5E5E5">conversation</font><font color="#CCCCCC"> one issue</font><font color="#E5E5E5"> with GDP</font><font color="#CCCCCC"> is that</font>

873
00:36:19,359 --> 00:36:23,109
<font color="#E5E5E5">GB is that you also have</font><font color="#CCCCCC"> to run it</font><font color="#E5E5E5"> over</font>

874
00:36:21,700 --> 00:36:24,910
and<font color="#CCCCCC"> over again a lot of times it can</font><font color="#E5E5E5"> be</font>

875
00:36:23,109 --> 00:36:26,890
<font color="#E5E5E5">pretty tedious you keep approaching it</font>

876
00:36:24,910 --> 00:36:29,109
you're<font color="#E5E5E5"> running the program from start</font><font color="#CCCCCC"> to</font>

877
00:36:26,890 --> 00:36:31,180
finish<font color="#E5E5E5"> and it can take a lot</font><font color="#CCCCCC"> of time and</font>

878
00:36:29,109 --> 00:36:32,950
it<font color="#CCCCCC"> can get pretty confusing</font><font color="#E5E5E5"> so there's</font>

879
00:36:31,180 --> 00:36:36,460
another tool that<font color="#CCCCCC"> I like using a</font><font color="#E5E5E5"> lot and</font>

880
00:36:32,950 --> 00:36:39,819
it's called<font color="#CCCCCC"> RR and this is a again</font><font color="#E5E5E5"> a</font>

881
00:36:36,460 --> 00:36:42,759
plug-in to gdb this is<font color="#E5E5E5"> developed by the</font>

882
00:36:39,819 --> 00:36:44,259
<font color="#E5E5E5">Mozilla Foundation open-source tool and</font>

883
00:36:42,759 --> 00:36:46,809
the way it works is that<font color="#E5E5E5"> you first run</font>

884
00:36:44,259 --> 00:36:49,180
the program under<font color="#E5E5E5"> RR with the input with</font>

885
00:36:46,809 --> 00:36:52,749
a crash in case input<font color="#CCCCCC"> and it will record</font>

886
00:36:49,180 --> 00:36:54,940
<font color="#E5E5E5">the execution in a way that once that's</font>

887
00:36:52,749 --> 00:36:56,919
done you can<font color="#E5E5E5"> set a breakpoint</font><font color="#CCCCCC"> again</font>

888
00:36:54,940 --> 00:36:58,509
<font color="#E5E5E5">probably where the crash happened but</font>

889
00:36:56,920 --> 00:37:00,279
you can step backwards you can reverse

890
00:36:58,509 --> 00:37:03,460
time<font color="#CCCCCC"> and so it's almost like a</font><font color="#E5E5E5"> time</font>

891
00:37:00,279 --> 00:37:05,710
machine so<font color="#CCCCCC"> you can reverse back up</font>

892
00:37:03,460 --> 00:37:07,930
through<font color="#E5E5E5"> the control flow of the program</font>

893
00:37:05,710 --> 00:37:08,480
and that can be<font color="#E5E5E5"> very powerful</font>

894
00:37:07,930 --> 00:37:11,899
the

895
00:37:08,480 --> 00:37:13,280
from difficult to<font color="#E5E5E5"> triage bugs</font><font color="#CCCCCC"> it's a way</font>

896
00:37:11,900 --> 00:37:14,900
<font color="#E5E5E5">to really understand things in a more</font>

897
00:37:13,280 --> 00:37:16,580
efficient<font color="#E5E5E5"> manner rather than using gdb</font>

898
00:37:14,900 --> 00:37:17,630
and<font color="#E5E5E5"> going forward in time every every</font>

899
00:37:16,580 --> 00:37:19,640
<font color="#E5E5E5">time and just trying to</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> work</font>

900
00:37:17,630 --> 00:37:23,150
your way<font color="#E5E5E5"> back up</font><font color="#CCCCCC"> and figure out</font><font color="#E5E5E5"> where</font>

901
00:37:19,640 --> 00:37:25,279
things went<font color="#E5E5E5"> wrong a couple</font><font color="#CCCCCC"> of caveats</font>

902
00:37:23,150 --> 00:37:27,410
with<font color="#CCCCCC"> RR you can't alter variables like</font>

903
00:37:25,280 --> 00:37:30,440
<font color="#E5E5E5">you can a</font><font color="#CCCCCC"> GB you can't say you know set</font>

904
00:37:27,410 --> 00:37:32,180
X<font color="#CCCCCC"> equal to</font><font color="#E5E5E5"> 5 you also cannot make calls</font>

905
00:37:30,440 --> 00:37:33,800
<font color="#E5E5E5">like you can from the gdb</font><font color="#CCCCCC"> command-line</font>

906
00:37:32,180 --> 00:37:35,990
you can actually just make you<font color="#CCCCCC"> know call</font>

907
00:37:33,800 --> 00:37:37,910
a function either<font color="#E5E5E5"> one of those things</font>

908
00:37:35,990 --> 00:37:39,500
<font color="#E5E5E5">will screw up the state of the</font><font color="#CCCCCC"> program</font>

909
00:37:37,910 --> 00:37:42,830
which has been<font color="#CCCCCC"> reported by RR and have</font>

910
00:37:39,500 --> 00:37:45,200
caused it to crash and here's a

911
00:37:42,830 --> 00:37:47,450
<font color="#E5E5E5">screenshot from the</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> our our</font><font color="#CCCCCC"> github</font>

912
00:37:45,200 --> 00:37:48,129
<font color="#E5E5E5">and talks a little bit about</font><font color="#CCCCCC"> how this</font>

913
00:37:47,450 --> 00:37:50,450
<font color="#E5E5E5">works</font>

914
00:37:48,130 --> 00:37:51,920
<font color="#E5E5E5">very cool tool I don't use it</font><font color="#CCCCCC"> every time</font>

915
00:37:50,450 --> 00:37:56,839
but<font color="#E5E5E5"> if when things get</font><font color="#CCCCCC"> difficult and</font>

916
00:37:51,920 --> 00:37:58,070
tricky<font color="#CCCCCC"> then I</font><font color="#E5E5E5"> definitely go</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> ok</font>

917
00:37:56,840 --> 00:37:59,840
another thing<font color="#CCCCCC"> to keep in mind</font><font color="#E5E5E5"> is that</font>

918
00:37:58,070 --> 00:38:01,310
this is<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> tough I mean</font><font color="#CCCCCC"> this stuff</font>

919
00:37:59,840 --> 00:38:03,290
is gnarly<font color="#E5E5E5"> and a lot of times you're</font>

920
00:38:01,310 --> 00:38:05,650
looking at<font color="#E5E5E5"> assembly code in some</font><font color="#CCCCCC"> cases</font>

921
00:38:03,290 --> 00:38:08,600
you're looking at<font color="#E5E5E5"> lots and lots of data</font>

922
00:38:05,650 --> 00:38:10,490
<font color="#CCCCCC">it takes persistence</font><font color="#E5E5E5"> but it also takes</font>

923
00:38:08,600 --> 00:38:11,690
<font color="#E5E5E5">you know taking breaks and</font><font color="#CCCCCC"> just working</font>

924
00:38:10,490 --> 00:38:13,459
<font color="#E5E5E5">through things so I kind</font><font color="#CCCCCC"> of compare it</font>

925
00:38:11,690 --> 00:38:15,320
<font color="#E5E5E5">to doing a manual source code review to</font>

926
00:38:13,460 --> 00:38:16,700
just literally<font color="#E5E5E5"> looking at code with your</font>

927
00:38:15,320 --> 00:38:20,060
eyes trying<font color="#CCCCCC"> to find bugs in</font><font color="#E5E5E5"> it</font>

928
00:38:16,700 --> 00:38:22,310
it's a great way to<font color="#E5E5E5"> find bugs but you</font>

929
00:38:20,060 --> 00:38:23,779
have about maybe<font color="#E5E5E5"> an hour of time in your</font>

930
00:38:22,310 --> 00:38:26,570
brain we can really concentrate the

931
00:38:23,780 --> 00:38:28,490
level necessary<font color="#E5E5E5"> to do that and I think</font>

932
00:38:26,570 --> 00:38:33,250
<font color="#CCCCCC">this kind of crash triage</font><font color="#E5E5E5"> can get to</font>

933
00:38:28,490 --> 00:38:37,009
that point<font color="#E5E5E5"> too so one more</font><font color="#CCCCCC"> thing about</font>

934
00:38:33,250 --> 00:38:38,660
about solving<font color="#E5E5E5"> these bugs once the bugs</font>

935
00:38:37,010 --> 00:38:41,900
are fixed<font color="#E5E5E5"> once the crash has been fixed</font>

936
00:38:38,660 --> 00:38:43,670
<font color="#CCCCCC">it's important</font><font color="#E5E5E5"> to reflect argot because</font>

937
00:38:41,900 --> 00:38:46,670
it<font color="#E5E5E5"> crashes a dead end for that code</font><font color="#CCCCCC"> pad</font>

938
00:38:43,670 --> 00:38:49,940
and so there<font color="#CCCCCC"> could well</font><font color="#E5E5E5"> be more crashes</font>

939
00:38:46,670 --> 00:38:52,160
more<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> further down a the code path</font>

940
00:38:49,940 --> 00:38:54,230
that<font color="#E5E5E5"> that then we did not get discovered</font>

941
00:38:52,160 --> 00:38:55,490
because the program crashed<font color="#E5E5E5"> especially</font>

942
00:38:54,230 --> 00:38:56,540
<font color="#CCCCCC">given if you're an area of the code</font>

943
00:38:55,490 --> 00:38:58,490
where<font color="#E5E5E5"> there's already a memory</font>

944
00:38:56,540 --> 00:39:00,710
corruption bug<font color="#E5E5E5"> that means that there</font>

945
00:38:58,490 --> 00:39:02,330
could be more memory corruption bugs so

946
00:39:00,710 --> 00:39:06,650
it's important to<font color="#E5E5E5"> go back and and fuzz</font>

947
00:39:02,330 --> 00:39:07,549
those things<font color="#CCCCCC"> ok and the</font><font color="#E5E5E5"> last section</font>

948
00:39:06,650 --> 00:39:10,160
we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about some</font>

949
00:39:07,550 --> 00:39:11,450
<font color="#E5E5E5">real-world</font><font color="#CCCCCC"> examples are bounds of what</font>

950
00:39:10,160 --> 00:39:12,240
we do any questions at all on any of

951
00:39:11,450 --> 00:39:21,029
this

952
00:39:12,240 --> 00:39:22,950
yeah<font color="#E5E5E5"> okay question is is</font><font color="#CCCCCC"> using our arm</font>

953
00:39:21,030 --> 00:39:26,760
properly<font color="#E5E5E5"> can make it crash is that</font>

954
00:39:22,950 --> 00:39:28,200
<font color="#E5E5E5">exploitable and I mean it might be I</font>

955
00:39:26,760 --> 00:39:30,240
mean it actually<font color="#E5E5E5"> takes down everything</font>

956
00:39:28,200 --> 00:39:32,160
<font color="#E5E5E5">like it takes down I mean it's it's</font>

957
00:39:30,240 --> 00:39:33,779
running as a plug-in within gdb<font color="#E5E5E5"> and</font>

958
00:39:32,160 --> 00:39:35,399
<font color="#CCCCCC">you're you</font><font color="#E5E5E5"> know and you're running a</font>

959
00:39:33,780 --> 00:39:36,930
program<font color="#CCCCCC"> too and so if you do either</font>

960
00:39:35,400 --> 00:39:42,540
these things that<font color="#CCCCCC"> just the whole thing</font>

961
00:39:36,930 --> 00:39:45,180
<font color="#CCCCCC">just just stops and</font><font color="#E5E5E5"> so yeah yeah so yeah</font>

962
00:39:42,540 --> 00:39:47,730
it<font color="#CCCCCC"> just generally</font><font color="#E5E5E5"> just stops like crazy</font>

963
00:39:45,180 --> 00:39:51,810
I mean it's just<font color="#E5E5E5"> it's immediately in an</font>

964
00:39:47,730 --> 00:39:53,850
unknown<font color="#CCCCCC"> State and so I'm</font><font color="#E5E5E5"> not sure</font><font color="#CCCCCC"> how</font>

965
00:39:51,810 --> 00:39:56,549
you could exploit that<font color="#E5E5E5"> that directly in</font>

966
00:39:53,850 --> 00:40:01,920
terms<font color="#E5E5E5"> of attack surface like how but I</font>

967
00:39:56,550 --> 00:40:04,890
mean you<font color="#E5E5E5"> know maybe yeah exactly</font>

968
00:40:01,920 --> 00:40:07,110
<font color="#CCCCCC">I actually found a quick aside for</font>

969
00:40:04,890 --> 00:40:10,589
<font color="#CCCCCC">awhile</font><font color="#E5E5E5"> and AFL</font><font color="#CCCCCC"> in about</font><font color="#E5E5E5"> version</font><font color="#CCCCCC"> one nine</font>

970
00:40:07,110 --> 00:40:13,410
<font color="#CCCCCC">six or so</font><font color="#E5E5E5"> there was an overflow in AFL</font>

971
00:40:10,590 --> 00:40:15,180
and AFL names<font color="#E5E5E5"> files in a particular</font>

972
00:40:13,410 --> 00:40:17,640
manner when it finds a crash it names it

973
00:40:15,180 --> 00:40:19,200
in a very particular<font color="#E5E5E5"> way that</font><font color="#CCCCCC"> lets you</font>

974
00:40:17,640 --> 00:40:20,970
kind of manage to manage it<font color="#E5E5E5"> and it's a</font>

975
00:40:19,200 --> 00:40:23,759
long<font color="#E5E5E5"> file</font><font color="#CCCCCC"> name not pretty it's</font><font color="#E5E5E5"> pretty</font>

976
00:40:20,970 --> 00:40:25,890
<font color="#E5E5E5">ugly but but I had a couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> cases and</font>

977
00:40:23,760 --> 00:40:28,290
<font color="#E5E5E5">I could never reproduce it but AFL</font>

978
00:40:25,890 --> 00:40:30,629
instead of that file name it was<font color="#E5E5E5"> garbage</font>

979
00:40:28,290 --> 00:40:33,270
<font color="#CCCCCC">or it actually</font><font color="#E5E5E5"> looked it looked like</font>

980
00:40:30,630 --> 00:40:34,680
like the data in the file<font color="#E5E5E5"> it looked like</font>

981
00:40:33,270 --> 00:40:37,170
stuff that<font color="#CCCCCC"> had been fuzz so there was</font>

982
00:40:34,680 --> 00:40:40,290
definitely<font color="#CCCCCC"> an overflow in AFL itself too</font>

983
00:40:37,170 --> 00:40:41,850
right so these<font color="#CCCCCC"> AFL's</font><font color="#E5E5E5"> written</font><font color="#CCCCCC"> C you know</font>

984
00:40:40,290 --> 00:40:43,560
<font color="#CCCCCC">fuzzer doesn't really I don't</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> has</font>

985
00:40:41,850 --> 00:40:44,759
to<font color="#CCCCCC"> be written into you but but you know</font>

986
00:40:43,560 --> 00:40:46,170
that's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> you know it's not a bad idea</font>

987
00:40:44,760 --> 00:40:47,880
<font color="#CCCCCC">to look</font><font color="#E5E5E5"> at this stuff I mean really any</font>

988
00:40:46,170 --> 00:40:50,340
security<font color="#CCCCCC"> tool</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> buzzed and</font>

989
00:40:47,880 --> 00:40:57,720
<font color="#E5E5E5">audited heavily</font><font color="#CCCCCC"> because we're the</font><font color="#E5E5E5"> ones</font>

990
00:40:50,340 --> 00:40:58,319
that<font color="#CCCCCC"> using</font><font color="#E5E5E5"> anything else yeah use Pettit</font>

991
00:40:57,720 --> 00:41:02,009
yeah

992
00:40:58,319 --> 00:41:03,900
<font color="#CCCCCC">questions do I use petaa PDA</font><font color="#E5E5E5"> and yes the</font>

993
00:41:02,009 --> 00:41:06,349
<font color="#E5E5E5">answer is yes</font><font color="#CCCCCC"> yeah so I haven't yeah</font>

994
00:41:03,900 --> 00:41:09,209
actually<font color="#E5E5E5"> I should maybe mention that</font><font color="#CCCCCC"> um</font>

995
00:41:06,349 --> 00:41:12,180
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> another great tool and so</font><font color="#CCCCCC"> peda is</font>

996
00:41:09,209 --> 00:41:14,578
also a plug-in<font color="#E5E5E5"> to gdb but it gives you a</font>

997
00:41:12,180 --> 00:41:16,948
really nice<font color="#CCCCCC"> printout of</font><font color="#E5E5E5"> the stack and</font>

998
00:41:14,579 --> 00:41:20,400
and other information<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it and</font><font color="#CCCCCC"> it</font>

999
00:41:16,949 --> 00:41:22,440
does it after every time you do a step

1000
00:41:20,400 --> 00:41:23,849
<font color="#E5E5E5">right or next things like that it</font>

1001
00:41:22,440 --> 00:41:25,499
<font color="#CCCCCC">immediately kind</font><font color="#E5E5E5"> of updates the whole</font>

1002
00:41:23,849 --> 00:41:27,660
situation<font color="#CCCCCC"> so you see everything at once</font>

1003
00:41:25,499 --> 00:41:28,948
where normal gdb you do a step and

1004
00:41:27,660 --> 00:41:30,629
you're still<font color="#CCCCCC"> just at the command lines</font>

1005
00:41:28,949 --> 00:41:32,279
<font color="#E5E5E5">then you've got to dump this memory dump</font>

1006
00:41:30,630 --> 00:41:34,559
that memory look at the registers things

1007
00:41:32,279 --> 00:41:37,949
like that and so so yeah it's called gdb

1008
00:41:34,559 --> 00:41:43,920
- PDA I believe and it's a<font color="#CCCCCC"> plugin of gdb</font>

1009
00:41:37,949 --> 00:41:45,239
yeah highly recommended all right so

1010
00:41:43,920 --> 00:41:46,709
it's just<font color="#E5E5E5"> to wrap things up we're going</font>

1011
00:41:45,239 --> 00:41:49,289
<font color="#CCCCCC">to look at a</font><font color="#E5E5E5"> couple of bugs that I found</font>

1012
00:41:46,709 --> 00:41:52,319
in<font color="#CCCCCC"> my research the</font><font color="#E5E5E5"> first one I found in</font>

1013
00:41:49,289 --> 00:41:54,349
PHP it was a low bad read and low

1014
00:41:52,319 --> 00:41:58,469
meaning<font color="#E5E5E5"> low in the memory space</font>

1015
00:41:54,349 --> 00:42:01,529
<font color="#E5E5E5">definitely</font><font color="#CCCCCC"> not exploitable I was fuzzing</font>

1016
00:41:58,469 --> 00:42:03,089
the<font color="#E5E5E5"> PHP any file and which is a weird</font>

1017
00:42:01,529 --> 00:42:04,619
<font color="#CCCCCC">thing to</font><font color="#E5E5E5"> do because that's typically</font>

1018
00:42:03,089 --> 00:42:05,369
associated with<font color="#CCCCCC"> running in the context</font>

1019
00:42:04,619 --> 00:42:06,959
<font color="#E5E5E5">of</font><font color="#CCCCCC"> a web server</font>

1020
00:42:05,369 --> 00:42:10,140
I was running PHP<font color="#E5E5E5"> from the command line</font>

1021
00:42:06,959 --> 00:42:11,969
<font color="#E5E5E5">driving it with a pleasure and so but I</font>

1022
00:42:10,140 --> 00:42:16,019
figured you know<font color="#CCCCCC"> what the</font><font color="#E5E5E5"> help and I</font>

1023
00:42:11,969 --> 00:42:20,640
found a crash<font color="#E5E5E5"> and reported it however</font>

1024
00:42:16,019 --> 00:42:24,238
it's a low read and it requires a<font color="#E5E5E5"> craft</font>

1025
00:42:20,640 --> 00:42:26,368
<font color="#E5E5E5">at any file this slide is not quite as</font>

1026
00:42:24,239 --> 00:42:29,190
important<font color="#E5E5E5"> as the</font><font color="#CCCCCC"> next one this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

1027
00:42:26,369 --> 00:42:32,160
<font color="#E5E5E5">more</font><font color="#CCCCCC"> interesting slide</font><font color="#E5E5E5"> on this this is</font>

1028
00:42:29,190 --> 00:42:34,170
<font color="#CCCCCC">the result of mm check and</font><font color="#E5E5E5"> it said</font>

1029
00:42:32,160 --> 00:42:37,589
there's an invalid<font color="#E5E5E5"> read a size</font><font color="#CCCCCC"> 4 but</font>

1030
00:42:34,170 --> 00:42:39,089
<font color="#CCCCCC">down at the bottom it says</font><font color="#E5E5E5"> address 0</font><font color="#CCCCCC"> x10</font>

1031
00:42:37,589 --> 00:42:41,369
is<font color="#CCCCCC"> not stacked malloc tour recently</font>

1032
00:42:39,089 --> 00:42:43,049
<font color="#E5E5E5">freed and so that means</font><font color="#CCCCCC"> that the read</font>

1033
00:42:41,369 --> 00:42:47,309
was was very<font color="#CCCCCC"> low</font><font color="#E5E5E5"> in the process space</font>

1034
00:42:43,049 --> 00:42:48,119
<font color="#CCCCCC">that at hex</font><font color="#E5E5E5"> 1 0 or 16 and</font><font color="#CCCCCC"> so there's</font>

1035
00:42:47,309 --> 00:42:49,229
<font color="#CCCCCC">never anything down</font><font color="#E5E5E5"> there</font>

1036
00:42:48,119 --> 00:42:50,579
there's no everything interesting<font color="#CCCCCC"> to</font>

1037
00:42:49,229 --> 00:42:52,589
either read or corrupt or anything like

1038
00:42:50,579 --> 00:42:55,349
<font color="#E5E5E5">that this is this is a null pointer</font>

1039
00:42:52,589 --> 00:42:56,999
dereference<font color="#E5E5E5"> so not exploitable in the</font>

1040
00:42:55,349 --> 00:43:00,449
olden days sometimes<font color="#E5E5E5"> you could exploit</font>

1041
00:42:56,999 --> 00:43:02,609
these but those<font color="#E5E5E5"> days are done and so</font>

1042
00:43:00,449 --> 00:43:04,739
this is a little<font color="#E5E5E5"> tough to read but this</font>

1043
00:43:02,609 --> 00:43:07,049
<font color="#E5E5E5">is the diff and all they did was their</font>

1044
00:43:04,739 --> 00:43:08,940
fix<font color="#E5E5E5"> and they just checked if they're</font>

1045
00:43:07,049 --> 00:43:10,109
operating<font color="#CCCCCC"> in the context</font><font color="#E5E5E5"> of a web server</font>

1046
00:43:08,940 --> 00:43:12,529
or<font color="#E5E5E5"> not and do the right thing</font>

1047
00:43:10,109 --> 00:43:12,529
accordingly

1048
00:43:12,549 --> 00:43:17,089
and so you know so that<font color="#CCCCCC"> was cool</font><font color="#E5E5E5"> if they</font>

1049
00:43:14,809 --> 00:43:18,289
get fixed<font color="#E5E5E5"> these all have gotten fixed so</font>

1050
00:43:17,089 --> 00:43:22,249
I turned my<font color="#CCCCCC"> attention to Ruby and</font>

1051
00:43:18,289 --> 00:43:25,489
<font color="#E5E5E5">started fuzzing that is a standard Ruby</font>

1052
00:43:22,249 --> 00:43:30,558
interpreter Mr Mr Mr I I think<font color="#E5E5E5"> it's</font>

1053
00:43:25,489 --> 00:43:32,989
<font color="#E5E5E5">called and so I found actually</font><font color="#CCCCCC"> four bugs</font>

1054
00:43:30,559 --> 00:43:35,539
in this in the regex<font color="#E5E5E5"> engine and one in</font>

1055
00:43:32,989 --> 00:43:37,429
<font color="#E5E5E5">HoN marshalling of</font><font color="#CCCCCC"> the regex bugs this</font>

1056
00:43:35,539 --> 00:43:40,880
<font color="#CCCCCC">is the more relevant one for today</font><font color="#E5E5E5"> and</font>

1057
00:43:37,429 --> 00:43:42,439
so I was fuzzing the<font color="#CCCCCC"> Reg s Excel</font>

1058
00:43:40,880 --> 00:43:44,839
meaning what a programmer would write

1059
00:43:42,439 --> 00:43:47,779
and so I was fuzzing essentially a

1060
00:43:44,839 --> 00:43:50,328
compilation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> those reg X's</font><font color="#E5E5E5"> and I found</font>

1061
00:43:47,779 --> 00:43:53,900
a<font color="#E5E5E5"> pretty nice bug in</font><font color="#CCCCCC"> that heat buffer</font>

1062
00:43:50,329 --> 00:43:56,359
overflow and here's the results of<font color="#CCCCCC"> s an</font>

1063
00:43:53,900 --> 00:43:58,339
address sanitizer said there's a heat

1064
00:43:56,359 --> 00:44:00,140
buffer overflow<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> address read</font>

1065
00:43:58,339 --> 00:44:04,219
of size<font color="#CCCCCC"> four and that is in the heat and</font>

1066
00:44:00,140 --> 00:44:06,379
so we have a bad read there<font color="#CCCCCC"> and so that</font>

1067
00:44:04,219 --> 00:44:07,880
<font color="#E5E5E5">looks you know bad reads are you know</font>

1068
00:44:06,380 --> 00:44:09,789
they're hard<font color="#CCCCCC"> to exploit</font><font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> they're</font>

1069
00:44:07,880 --> 00:44:13,429
bugs but they're not really<font color="#E5E5E5"> that bad</font>

1070
00:44:09,789 --> 00:44:15,829
<font color="#CCCCCC">standalone</font><font color="#E5E5E5"> however then I ran Val grind</font>

1071
00:44:13,429 --> 00:44:18,529
on it<font color="#CCCCCC"> and Val grind</font><font color="#E5E5E5"> indicating an</font>

1072
00:44:15,829 --> 00:44:21,319
invalid<font color="#CCCCCC"> write also as well</font><font color="#E5E5E5"> of size for</font>

1073
00:44:18,529 --> 00:44:24,079
an<font color="#E5E5E5"> invalid read also size</font><font color="#CCCCCC"> four so this</font>

1074
00:44:21,319 --> 00:44:26,359
<font color="#E5E5E5">an just quit at the first corruption it</font>

1075
00:44:24,079 --> 00:44:28,549
finds so running<font color="#E5E5E5"> Val Brian shows that</font>

1076
00:44:26,359 --> 00:44:30,529
there's a right<font color="#CCCCCC"> to and these are fairly</font>

1077
00:44:28,549 --> 00:44:31,579
close together<font color="#E5E5E5"> in memory</font><font color="#CCCCCC"> apologizing</font>

1078
00:44:30,529 --> 00:44:32,900
might<font color="#E5E5E5"> be a little hard to read but</font><font color="#CCCCCC"> the</font>

1079
00:44:31,579 --> 00:44:35,239
memory locations of the read and<font color="#CCCCCC"> write</font>

1080
00:44:32,900 --> 00:44:37,309
<font color="#CCCCCC">are close and</font><font color="#E5E5E5"> that suggests that an</font>

1081
00:44:35,239 --> 00:44:38,779
attacker could probably probably

1082
00:44:37,309 --> 00:44:40,069
leverage that probably get probably

1083
00:44:38,779 --> 00:44:42,349
<font color="#E5E5E5">write something and then later read it</font>

1084
00:44:40,069 --> 00:44:43,788
and in<font color="#E5E5E5"> fact any time you have a bad read</font>

1085
00:44:42,349 --> 00:44:47,089
in the heap that's considered

1086
00:44:43,789 --> 00:44:50,029
exploitable<font color="#E5E5E5"> and so this is a pretty good</font>

1087
00:44:47,089 --> 00:44:52,038
bug and however<font color="#CCCCCC"> you know I would</font>

1088
00:44:50,029 --> 00:44:53,779
consider this definitely exploitable<font color="#E5E5E5"> the</font>

1089
00:44:52,039 --> 00:44:55,400
good news is that it's tough<font color="#E5E5E5"> to exploit</font>

1090
00:44:53,779 --> 00:44:57,049
<font color="#E5E5E5">this and so there's not many</font>

1091
00:44:55,400 --> 00:44:59,599
applications<font color="#E5E5E5"> that allow you to upload</font>

1092
00:44:57,049 --> 00:45:01,939
arbitrary regular expressions<font color="#E5E5E5"> which is</font>

1093
00:44:59,599 --> 00:45:04,459
also<font color="#E5E5E5"> a good thing for an unrelated</font>

1094
00:45:01,939 --> 00:45:06,529
<font color="#E5E5E5">reason is that it's an easy way to</font>

1095
00:45:04,459 --> 00:45:09,049
<font color="#E5E5E5">potentially cause a</font><font color="#CCCCCC"> Doss attack if</font><font color="#E5E5E5"> you</font>

1096
00:45:06,529 --> 00:45:12,469
allow untrusted reg<font color="#CCCCCC"> X's to be uploaded</font>

1097
00:45:09,049 --> 00:45:14,150
into your system<font color="#CCCCCC"> a</font><font color="#E5E5E5"> mal actor could use a</font>

1098
00:45:12,469 --> 00:45:16,489
essentially a regex bomb or something

1099
00:45:14,150 --> 00:45:17,730
<font color="#E5E5E5">like that and so it's already in secure</font>

1100
00:45:16,489 --> 00:45:19,830
practice anyways so

1101
00:45:17,730 --> 00:45:21,210
hopefully the attack surface on this is

1102
00:45:19,830 --> 00:45:22,770
pretty<font color="#E5E5E5"> small</font><font color="#CCCCCC"> and that somewhat</font>

1103
00:45:21,210 --> 00:45:26,460
ameliorate<font color="#E5E5E5"> you know the fact that this</font>

1104
00:45:22,770 --> 00:45:29,340
is<font color="#E5E5E5"> probably an exploitable bug</font><font color="#CCCCCC"> and so I</font>

1105
00:45:26,460 --> 00:45:31,350
reported that<font color="#E5E5E5"> and they fixed it</font>

1106
00:45:29,340 --> 00:45:33,120
the interesting<font color="#E5E5E5"> part about this bug as</font>

1107
00:45:31,350 --> 00:45:36,839
well is it was a really<font color="#E5E5E5"> weird corner</font>

1108
00:45:33,120 --> 00:45:38,940
<font color="#E5E5E5">case if in the regex you opened a</font>

1109
00:45:36,840 --> 00:45:43,590
character class<font color="#E5E5E5"> that never got closed</font>

1110
00:45:38,940 --> 00:45:45,750
<font color="#CCCCCC">and there is also an octal number</font><font color="#E5E5E5"> in the</font>

1111
00:45:43,590 --> 00:45:48,180
in the regex<font color="#CCCCCC"> that would cause</font><font color="#E5E5E5"> this crash</font>

1112
00:45:45,750 --> 00:45:50,580
so super weird<font color="#E5E5E5"> corner case I mean it's</font>

1113
00:45:48,180 --> 00:45:51,750
<font color="#E5E5E5">not surprising there's stuff in here</font>

1114
00:45:50,580 --> 00:45:55,160
<font color="#E5E5E5">but this is the kind of thing</font><font color="#CCCCCC"> again</font>

1115
00:45:51,750 --> 00:45:57,960
fuzzers are really good at finding and

1116
00:45:55,160 --> 00:46:00,839
then<font color="#E5E5E5"> the last one is</font><font color="#CCCCCC"> a bug I found</font><font color="#E5E5E5"> in a</font>

1117
00:45:57,960 --> 00:46:03,960
open source<font color="#E5E5E5"> tool called Netflix</font><font color="#CCCCCC"> dynomite</font>

1118
00:46:00,840 --> 00:46:06,450
<font color="#E5E5E5">I found an invalid right here Netflix</font>

1119
00:46:03,960 --> 00:46:09,540
<font color="#E5E5E5">dynamite is a replicator and</font><font color="#CCCCCC"> chartres</font>

1120
00:46:06,450 --> 00:46:14,069
<font color="#E5E5E5">for key value storage systems like Redis</font>

1121
00:46:09,540 --> 00:46:16,710
and memcached<font color="#CCCCCC"> and so netflix</font><font color="#E5E5E5"> uses it</font>

1122
00:46:14,070 --> 00:46:18,150
other<font color="#E5E5E5"> people do Netflix uses it</font>

1123
00:46:16,710 --> 00:46:19,380
definitely at scale<font color="#E5E5E5"> in production I</font>

1124
00:46:18,150 --> 00:46:22,560
believe they use it essentially between

1125
00:46:19,380 --> 00:46:25,440
<font color="#E5E5E5">the internet and and these and reticent</font>

1126
00:46:22,560 --> 00:46:29,640
memcached<font color="#E5E5E5"> perhaps to store metadata</font>

1127
00:46:25,440 --> 00:46:32,220
<font color="#E5E5E5">related</font><font color="#CCCCCC"> to people</font><font color="#E5E5E5"> watching movies and so</font>

1128
00:46:29,640 --> 00:46:34,020
<font color="#E5E5E5">I</font><font color="#CCCCCC"> fudged it and I posed I quest it in</font>

1129
00:46:32,220 --> 00:46:36,540
kind<font color="#CCCCCC"> of an</font><font color="#E5E5E5"> oblique manner</font><font color="#CCCCCC"> like an infos</font>

1130
00:46:34,020 --> 00:46:38,220
it<font color="#CCCCCC"> head on I</font><font color="#E5E5E5"> try figure highly audited</font>

1131
00:46:36,540 --> 00:46:39,779
code bases are pretty well fuzz and

1132
00:46:38,220 --> 00:46:42,450
<font color="#E5E5E5">maybe not but I mean I didn't fuzz it</font>

1133
00:46:39,780 --> 00:46:43,950
<font color="#CCCCCC">head on</font><font color="#E5E5E5"> meaning like trying to bring in</font>

1134
00:46:42,450 --> 00:46:46,410
you know stuff from the outside<font color="#E5E5E5"> Internet</font>

1135
00:46:43,950 --> 00:46:50,160
<font color="#CCCCCC">I decided just to fuzz the</font><font color="#E5E5E5"> config file</font>

1136
00:46:46,410 --> 00:46:51,299
which is a yeah most I'll file and so in

1137
00:46:50,160 --> 00:46:52,620
a way it's not<font color="#E5E5E5"> a great</font><font color="#CCCCCC"> thing to fuzz</font>

1138
00:46:51,300 --> 00:46:54,690
because even though I<font color="#E5E5E5"> find something</font>

1139
00:46:52,620 --> 00:46:56,759
that's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> take an admin or</font>

1140
00:46:54,690 --> 00:46:58,860
somebody are they already authorized to

1141
00:46:56,760 --> 00:47:00,120
leverage this<font color="#E5E5E5"> so you're only looking at</font>

1142
00:46:58,860 --> 00:47:03,060
essentially cases where you have<font color="#CCCCCC"> a</font>

1143
00:47:00,120 --> 00:47:05,520
compromised admin or<font color="#E5E5E5"> a malicious admin</font>

1144
00:47:03,060 --> 00:47:06,960
good<font color="#E5E5E5"> leverage a thing like this</font><font color="#CCCCCC"> and I</font>

1145
00:47:05,520 --> 00:47:08,520
<font color="#E5E5E5">think it</font><font color="#CCCCCC"> may be it</font><font color="#E5E5E5"> be a bug in the yeah</font>

1146
00:47:06,960 --> 00:47:11,760
mole as well too so<font color="#E5E5E5"> I post it but I</font>

1147
00:47:08,520 --> 00:47:13,050
found<font color="#E5E5E5"> a cool crash and you can see here</font>

1148
00:47:11,760 --> 00:47:15,060
sort of on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> right-hand side</font>

1149
00:47:13,050 --> 00:47:17,550
<font color="#E5E5E5">there's a bunch of</font><font color="#CCCCCC"> a's there and some</font>

1150
00:47:15,060 --> 00:47:19,320
other<font color="#CCCCCC"> garbage that is the crash case and</font>

1151
00:47:17,550 --> 00:47:20,760
then down at the<font color="#E5E5E5"> bottom if you can see</font>

1152
00:47:19,320 --> 00:47:23,400
<font color="#CCCCCC">it there's a</font><font color="#E5E5E5"> bunch of forty ones that i</font>

1153
00:47:20,760 --> 00:47:25,590
dumped out of gdb<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> I had a six</font>

1154
00:47:23,400 --> 00:47:28,710
<font color="#E5E5E5">bytes of contiguous right into the heat</font>

1155
00:47:25,590 --> 00:47:29,970
<font color="#E5E5E5">and so that's pretty exploitable but</font>

1156
00:47:28,710 --> 00:47:31,230
again it's like<font color="#E5E5E5"> okay whatever it's just</font>

1157
00:47:29,970 --> 00:47:35,459
<font color="#CCCCCC">in any</font>

1158
00:47:31,230 --> 00:47:37,710
so I reported it and to my<font color="#E5E5E5"> surprise they</font>

1159
00:47:35,460 --> 00:47:39,270
traced<font color="#E5E5E5"> the bug into their string</font>

1160
00:47:37,710 --> 00:47:40,770
functions<font color="#E5E5E5"> the string duplication</font>

1161
00:47:39,270 --> 00:47:44,400
function how they're handling all

1162
00:47:40,770 --> 00:47:46,560
strings<font color="#E5E5E5"> and so they had a string library</font>

1163
00:47:44,400 --> 00:47:47,700
<font color="#E5E5E5">but they weren't always completely using</font>

1164
00:47:46,560 --> 00:47:49,799
it they were sort of<font color="#CCCCCC"> writing a</font><font color="#E5E5E5"> little</font>

1165
00:47:47,700 --> 00:47:51,029
extra string<font color="#CCCCCC"> Duke code over that they</font>

1166
00:47:49,800 --> 00:47:53,040
weren't<font color="#CCCCCC"> completely</font><font color="#E5E5E5"> using and that's how</font>

1167
00:47:51,030 --> 00:47:55,710
they got into<font color="#CCCCCC"> trouble</font><font color="#E5E5E5"> so I was pretty</font>

1168
00:47:53,040 --> 00:47:57,060
surprised<font color="#E5E5E5"> by this and so I haven't</font>

1169
00:47:55,710 --> 00:47:58,380
confirmed it having tried to really run

1170
00:47:57,060 --> 00:48:00,270
the hack but I think that this could<font color="#E5E5E5"> be</font>

1171
00:47:58,380 --> 00:48:01,380
<font color="#CCCCCC">a pretty serious attack it's been</font><font color="#E5E5E5"> fixed</font>

1172
00:48:00,270 --> 00:48:03,270
for<font color="#CCCCCC"> a long time</font><font color="#E5E5E5"> hopefully and</font>

1173
00:48:01,380 --> 00:48:06,990
everybody's using<font color="#E5E5E5"> it I reported this in</font>

1174
00:48:03,270 --> 00:48:08,880
May and<font color="#E5E5E5"> so</font><font color="#CCCCCC"> this is the disc where they</font>

1175
00:48:06,990 --> 00:48:11,189
fixed it<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little hard to see again</font>

1176
00:48:08,880 --> 00:48:13,500
but it's a<font color="#E5E5E5"> classic off by one error so</font>

1177
00:48:11,190 --> 00:48:16,410
they're trying to manage<font color="#E5E5E5"> things</font><font color="#CCCCCC"> lengths</font>

1178
00:48:13,500 --> 00:48:19,440
<font color="#E5E5E5">of things in doing string dupes</font><font color="#CCCCCC"> by hand</font>

1179
00:48:16,410 --> 00:48:21,330
in<font color="#E5E5E5"> the code rather than</font><font color="#CCCCCC"> relying on the</font>

1180
00:48:19,440 --> 00:48:22,800
library that<font color="#E5E5E5"> they</font><font color="#CCCCCC"> were using</font><font color="#E5E5E5"> and so</font>

1181
00:48:21,330 --> 00:48:24,990
that's kind of how they got<font color="#E5E5E5"> their selves</font>

1182
00:48:22,800 --> 00:48:27,180
into trouble but I<font color="#E5E5E5"> reported it they</font>

1183
00:48:24,990 --> 00:48:29,759
fixed it<font color="#E5E5E5"> and I got into the next Netflix</font>

1184
00:48:27,180 --> 00:48:31,560
<font color="#E5E5E5">Hall of Fame it's a nice place to</font><font color="#CCCCCC"> be</font>

1185
00:48:29,760 --> 00:48:34,920
<font color="#E5E5E5">some other pretty good researchers in</font>

1186
00:48:31,560 --> 00:48:36,540
there<font color="#E5E5E5"> and so that's going to kind of</font>

1187
00:48:34,920 --> 00:48:38,100
wrap<font color="#CCCCCC"> things up just the last thing</font><font color="#E5E5E5"> to</font>

1188
00:48:36,540 --> 00:48:40,860
say<font color="#E5E5E5"> is there's a few</font><font color="#CCCCCC"> really important</font>

1189
00:48:38,100 --> 00:48:43,830
references<font color="#E5E5E5"> Rensselaer Polytechnic</font>

1190
00:48:40,860 --> 00:48:46,590
Institute has a great course called

1191
00:48:43,830 --> 00:48:49,650
modern binary exploitation and they very

1192
00:48:46,590 --> 00:48:52,280
generously<font color="#CCCCCC"> open-source the course so on</font>

1193
00:48:49,650 --> 00:48:55,470
github they have a bunch of vulnerable

1194
00:48:52,280 --> 00:48:57,900
<font color="#CCCCCC">programs of practice against and I think</font>

1195
00:48:55,470 --> 00:48:59,310
it's on<font color="#E5E5E5"> the RPI site somewhere</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

1196
00:48:57,900 --> 00:49:01,860
<font color="#CCCCCC">search around for it but they have all</font>

1197
00:48:59,310 --> 00:49:03,240
<font color="#E5E5E5">of the slides and PDFs</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> essentially at</font>

1198
00:49:01,860 --> 00:49:04,950
the complete course and you<font color="#E5E5E5"> can easily</font>

1199
00:49:03,240 --> 00:49:06,629
do what I<font color="#E5E5E5"> did which is just take the</font>

1200
00:49:04,950 --> 00:49:08,700
course on your own and learn a great

1201
00:49:06,630 --> 00:49:10,500
deal not<font color="#E5E5E5"> just</font><font color="#CCCCCC"> about exploitation</font><font color="#E5E5E5"> and</font>

1202
00:49:08,700 --> 00:49:15,000
memory<font color="#CCCCCC"> corruption but</font><font color="#E5E5E5"> they cover reverse</font>

1203
00:49:10,500 --> 00:49:16,740
<font color="#E5E5E5">engineering very well also</font><font color="#CCCCCC"> and then the</font>

1204
00:49:15,000 --> 00:49:19,080
book<font color="#E5E5E5"> is hacking the art of exploitation</font>

1205
00:49:16,740 --> 00:49:21,029
<font color="#E5E5E5">by John</font><font color="#CCCCCC"> Ericsson pretty much a must</font><font color="#E5E5E5"> read</font>

1206
00:49:19,080 --> 00:49:23,340
for<font color="#CCCCCC"> any kind</font><font color="#E5E5E5"> of this any work like</font><font color="#CCCCCC"> this</font>

1207
00:49:21,030 --> 00:49:26,630
<font color="#CCCCCC">I got the version one the</font><font color="#E5E5E5"> first edition</font>

1208
00:49:23,340 --> 00:49:29,670
in 2005<font color="#CCCCCC"> there's another edition out now</font>

1209
00:49:26,630 --> 00:49:31,170
<font color="#E5E5E5">highly recommend</font><font color="#CCCCCC"> that and then project</font>

1210
00:49:29,670 --> 00:49:35,100
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> is a great blog and then Sean he</font>

1211
00:49:31,170 --> 00:49:37,800
lands a he's right now I believe<font color="#CCCCCC"> he's a</font>

1212
00:49:35,100 --> 00:49:39,720
<font color="#E5E5E5">PhD student but he he finds a lot of</font>

1213
00:49:37,800 --> 00:49:42,560
great stuff<font color="#E5E5E5"> and he wrote a great blog</font>

1214
00:49:39,720 --> 00:49:47,209
<font color="#CCCCCC">post on using vrr</font>

1215
00:49:42,560 --> 00:49:49,600
and so that's<font color="#E5E5E5"> going to do it any</font>

1216
00:49:47,210 --> 00:49:49,600
questions

1217
00:49:52,660 --> 00:49:55,799
[Music]

1218
00:50:04,530 --> 00:50:09,180
right that's<font color="#E5E5E5"> great</font><font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> guys very</font>

1219
00:50:05,700 --> 00:50:11,100
much thank you appreciate<font color="#E5E5E5"> it is there a</font>

1220
00:50:09,180 --> 00:50:12,779
concern happy<font color="#E5E5E5"> hour does anybody know if</font>

1221
00:50:11,100 --> 00:50:14,930
there's any evening<font color="#E5E5E5"> activity tonight or</font>

1222
00:50:12,780 --> 00:50:14,930
what

