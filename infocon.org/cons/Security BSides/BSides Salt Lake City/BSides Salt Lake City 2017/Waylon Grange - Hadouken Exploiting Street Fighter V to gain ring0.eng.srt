1
00:00:00,500 --> 00:00:19,510
[Music]

2
00:00:13,030 --> 00:00:20,330
<font color="#CCCCCC">I wanted</font><font color="#E5E5E5"> to start with a video real</font>

3
00:00:19,510 --> 00:00:28,519
<font color="#CCCCCC">quick</font>

4
00:00:20,330 --> 00:00:28,519
[Music]

5
00:00:30,000 --> 00:00:41,379
so this is from the most recent Street

6
00:00:32,920 --> 00:00:42,430
Fighter<font color="#CCCCCC"> game</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> schedule mutation</font><font color="#E5E5E5"> all</font>

7
00:00:41,379 --> 00:00:45,608
<font color="#E5E5E5">right that's it for</font><font color="#CCCCCC"> the video</font><font color="#E5E5E5"> you can</font>

8
00:00:42,430 --> 00:00:46,660
<font color="#E5E5E5">turn off</font><font color="#CCCCCC"> my computer audio</font><font color="#E5E5E5"> so that's</font>

9
00:00:45,609 --> 00:00:48,579
what we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to do today is we're</font>

10
00:00:46,660 --> 00:00:50,019
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do our own Hadouken</font><font color="#E5E5E5"> this one</font>

11
00:00:48,579 --> 00:00:52,030
we're going<font color="#E5E5E5"> to do against Street Fighter</font>

12
00:00:50,019 --> 00:00:54,370
5 the game itself<font color="#CCCCCC"> and we're going to</font>

13
00:00:52,030 --> 00:00:57,659
exploit<font color="#E5E5E5"> that to get</font><font color="#CCCCCC"> access to the kernel</font>

14
00:00:54,370 --> 00:01:01,870
and<font color="#E5E5E5"> get into our root kit in to bring</font><font color="#CCCCCC"> 0</font>

15
00:00:57,659 --> 00:01:04,330
I'll quit touching that so<font color="#E5E5E5"> just a quick</font>

16
00:01:01,870 --> 00:01:07,030
intro<font color="#E5E5E5"> like I said I'm professor plum</font>

17
00:01:04,330 --> 00:01:09,550
I<font color="#E5E5E5"> just cute threat researcher at</font>

18
00:01:07,030 --> 00:01:13,420
Symantec<font color="#E5E5E5"> so any day that</font><font color="#CCCCCC"> I'm working</font><font color="#E5E5E5"> in</font>

19
00:01:09,550 --> 00:01:16,360
<font color="#E5E5E5">Ida I'm usually happy a lot of certs</font>

20
00:01:13,420 --> 00:01:19,750
<font color="#E5E5E5">just about all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> something plus the</font>

21
00:01:16,360 --> 00:01:23,439
comp<font color="#CCCCCC"> taa ones I've got not sure they</font>

22
00:01:19,750 --> 00:01:25,540
mean much but my handle<font color="#CCCCCC"> 200 schools</font>

23
00:01:23,439 --> 00:01:27,908
because I was slow to<font color="#E5E5E5"> the Twitter scene</font>

24
00:01:25,540 --> 00:01:31,000
but here's what we're going<font color="#CCCCCC"> to do today</font>

25
00:01:27,909 --> 00:01:33,219
I do want to talk<font color="#E5E5E5"> about how to exploit</font>

26
00:01:31,000 --> 00:01:35,110
this driver<font color="#E5E5E5"> but to get there we need</font><font color="#CCCCCC"> to</font>

27
00:01:33,219 --> 00:01:37,210
<font color="#E5E5E5">get through some basic windows primer a</font>

28
00:01:35,110 --> 00:01:39,759
rootkit<font color="#E5E5E5"> information how we're hits work</font>

29
00:01:37,210 --> 00:01:40,929
how<font color="#CCCCCC"> windows kernel kind of works then</font>

30
00:01:39,759 --> 00:01:42,909
we'll<font color="#E5E5E5"> talk about Street Fighter do a</font>

31
00:01:40,930 --> 00:01:45,520
little bit<font color="#CCCCCC"> background</font><font color="#E5E5E5"> kind of talk</font><font color="#CCCCCC"> about</font>

32
00:01:42,909 --> 00:01:46,090
what led to this exploit where it came

33
00:01:45,520 --> 00:01:47,408
from

34
00:01:46,090 --> 00:01:49,750
then we'll talk<font color="#E5E5E5"> about the driver self</font>

35
00:01:47,409 --> 00:01:51,189
how to exploit it<font color="#E5E5E5"> finally will exploit</font>

36
00:01:49,750 --> 00:01:55,479
it<font color="#CCCCCC"> and we'll do a demo</font><font color="#E5E5E5"> and install our</font>

37
00:01:51,189 --> 00:01:58,029
<font color="#CCCCCC">own route K so what</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> route kids good</font>

38
00:01:55,479 --> 00:02:00,969
place<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> right let's talk about</font>

39
00:01:58,030 --> 00:02:04,420
how the<font color="#E5E5E5"> system's laid out modern</font><font color="#CCCCCC"> Auto</font>

40
00:02:00,969 --> 00:02:06,609
<font color="#E5E5E5">prating systems work in a ring system</font>

41
00:02:04,420 --> 00:02:09,009
<font color="#CCCCCC">that is enforced</font><font color="#E5E5E5"> by hardware it</font>

42
00:02:06,609 --> 00:02:10,449
specifically<font color="#E5E5E5"> the kernel or specifically</font>

43
00:02:09,008 --> 00:02:13,989
to meet<font color="#CCCCCC"> the CPU</font>

44
00:02:10,449 --> 00:02:15,640
<font color="#CCCCCC">whereas stuff in ring zero it has the</font>

45
00:02:13,990 --> 00:02:17,620
most access<font color="#E5E5E5"> it can directly access</font>

46
00:02:15,640 --> 00:02:19,869
physical<font color="#E5E5E5"> memory it can directly access</font>

47
00:02:17,620 --> 00:02:22,330
hardware or firmware or anything<font color="#CCCCCC"> that</font>

48
00:02:19,870 --> 00:02:24,010
<font color="#CCCCCC">attach to the</font><font color="#E5E5E5"> system and then down the</font>

49
00:02:22,330 --> 00:02:25,750
line<font color="#E5E5E5"> you go down to ring</font><font color="#CCCCCC"> zero which has</font>

50
00:02:24,010 --> 00:02:27,040
the least<font color="#CCCCCC"> access and that's</font><font color="#E5E5E5"> where your</font>

51
00:02:25,750 --> 00:02:30,250
typical applications

52
00:02:27,040 --> 00:02:35,040
and what they can get into<font color="#CCCCCC"> windows in</font>

53
00:02:30,250 --> 00:02:37,390
reality<font color="#E5E5E5"> doesn't use ring</font><font color="#CCCCCC"> 1 & 2 it for</font>

54
00:02:35,040 --> 00:02:39,578
legacy<font color="#CCCCCC"> reasons really the</font><font color="#E5E5E5"> only ones we</font>

55
00:02:37,390 --> 00:02:42,238
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to be concerned</font><font color="#E5E5E5"> about is ring</font><font color="#CCCCCC"> 0 the</font>

56
00:02:39,579 --> 00:02:44,049
<font color="#E5E5E5">kernel and ring 3 where applications run</font>

57
00:02:42,239 --> 00:02:46,060
applications can't directly access

58
00:02:44,049 --> 00:02:47,590
<font color="#CCCCCC">Hardware</font><font color="#E5E5E5"> when you do a open file or</font>

59
00:02:46,060 --> 00:02:48,909
<font color="#CCCCCC">whatnot it goes up to the kernel</font><font color="#E5E5E5"> the</font>

60
00:02:47,590 --> 00:02:51,340
kernel checks all the<font color="#E5E5E5"> things it wants to</font>

61
00:02:48,909 --> 00:02:52,959
check and then it accesses<font color="#E5E5E5"> the hardware</font>

62
00:02:51,340 --> 00:02:55,750
<font color="#E5E5E5">and relays the information</font><font color="#CCCCCC"> back down to</font>

63
00:02:52,959 --> 00:02:57,579
you so you can't<font color="#E5E5E5"> just say</font><font color="#CCCCCC"> I'll go right</font>

64
00:02:55,750 --> 00:02:59,470
to<font color="#E5E5E5"> sector X and once you're in the</font>

65
00:02:57,579 --> 00:03:01,359
kernel you can't say<font color="#CCCCCC"> oh what's in this</font>

66
00:02:59,470 --> 00:03:03,280
physical<font color="#E5E5E5"> memory location unless you're</font>

67
00:03:01,359 --> 00:03:06,159
in the<font color="#E5E5E5"> kernel so that's kind of a reason</font>

68
00:03:03,280 --> 00:03:07,720
why<font color="#E5E5E5"> if you're malware you might want to</font>

69
00:03:06,159 --> 00:03:09,909
be in the kernel because in the kernel

70
00:03:07,720 --> 00:03:11,620
you have all power<font color="#E5E5E5"> right if you want to</font>

71
00:03:09,909 --> 00:03:14,500
<font color="#E5E5E5">do something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> infects the boot</font>

72
00:03:11,620 --> 00:03:16,750
sector<font color="#E5E5E5"> or be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to do a boot kit</font><font color="#CCCCCC"> you</font>

73
00:03:14,500 --> 00:03:19,989
need to be in the kernel<font color="#E5E5E5"> if you want to</font>

74
00:03:16,750 --> 00:03:21,849
hide<font color="#CCCCCC"> your activity from</font><font color="#E5E5E5"> like Wireshark</font>

75
00:03:19,989 --> 00:03:23,379
<font color="#CCCCCC">you can hide Network</font><font color="#E5E5E5"> coms from even</font>

76
00:03:21,849 --> 00:03:25,720
showing<font color="#E5E5E5"> up in Wireshark if you're in the</font>

77
00:03:23,379 --> 00:03:28,179
kernel you can directly access<font color="#CCCCCC"> the</font>

78
00:03:25,720 --> 00:03:29,439
<font color="#E5E5E5">firmware of hard drive if you're in the</font>

79
00:03:28,180 --> 00:03:31,269
kernel<font color="#CCCCCC"> all these type of</font><font color="#E5E5E5"> things are</font>

80
00:03:29,439 --> 00:03:32,010
power that you may want if<font color="#CCCCCC"> you're</font>

81
00:03:31,269 --> 00:03:34,329
malware

82
00:03:32,010 --> 00:03:36,548
additionally the stealth is a great

83
00:03:34,329 --> 00:03:38,169
possibility<font color="#E5E5E5"> right you can hide processes</font>

84
00:03:36,549 --> 00:03:40,299
you<font color="#E5E5E5"> can hide files you can hide network</font>

85
00:03:38,169 --> 00:03:41,560
traffic you<font color="#CCCCCC"> can do a lot</font><font color="#E5E5E5"> from the kernel</font>

86
00:03:40,299 --> 00:03:42,760
<font color="#CCCCCC">that's just</font><font color="#E5E5E5"> hidden from the user</font><font color="#CCCCCC"> so</font>

87
00:03:41,560 --> 00:03:44,349
there's a lot<font color="#E5E5E5"> of reasons like things</font>

88
00:03:42,760 --> 00:03:46,629
want<font color="#E5E5E5"> to get in the kernel you're on</font>

89
00:03:44,349 --> 00:03:48,459
equal footing against antivirus or

90
00:03:46,629 --> 00:03:49,810
security products in the kernel<font color="#CCCCCC"> because</font>

91
00:03:48,459 --> 00:03:52,359
you're both at the same level<font color="#CCCCCC"> so you can</font>

92
00:03:49,810 --> 00:03:53,889
<font color="#E5E5E5">cat and mouse game there there's a lot</font>

93
00:03:52,359 --> 00:03:54,669
of reasons<font color="#CCCCCC"> that</font><font color="#E5E5E5"> things don't always run</font>

94
00:03:53,889 --> 00:03:56,739
in the kernel

95
00:03:54,669 --> 00:04:00,010
most malware we see today<font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> in the</font>

96
00:03:56,739 --> 00:04:01,780
kernel one because it's really<font color="#E5E5E5"> hard to</font>

97
00:04:00,010 --> 00:04:03,040
get<font color="#E5E5E5"> in the kernel first off the</font><font color="#CCCCCC"> Windows</font>

98
00:04:01,780 --> 00:04:04,750
<font color="#E5E5E5">was doing a good job of</font><font color="#CCCCCC"> making it harder</font>

99
00:04:03,040 --> 00:04:07,388
to get execution into the kernel

100
00:04:04,750 --> 00:04:09,729
<font color="#E5E5E5">- it's hard to develop code for the</font>

101
00:04:07,389 --> 00:04:11,739
kernel if you crash or<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you've got a</font>

102
00:04:09,729 --> 00:04:13,689
bug which most<font color="#CCCCCC"> malware has lots</font><font color="#E5E5E5"> of bugs</font>

103
00:04:11,739 --> 00:04:15,790
<font color="#CCCCCC">if you have a bug in your code then you</font>

104
00:04:13,689 --> 00:04:17,320
crash<font color="#CCCCCC"> the process</font><font color="#E5E5E5"> doesn't just fall</font><font color="#CCCCCC"> out</font>

105
00:04:15,790 --> 00:04:18,728
the whole kernel falls out and<font color="#E5E5E5"> you end</font>

106
00:04:17,320 --> 00:04:21,519
up<font color="#E5E5E5"> with a blue screen</font><font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> a very</font>

107
00:04:18,728 --> 00:04:25,240
<font color="#E5E5E5">easy way to get caught so writing kernel</font>

108
00:04:21,519 --> 00:04:26,500
code is very difficult more so if you do

109
00:04:25,240 --> 00:04:29,229
know you have<font color="#CCCCCC"> a bug in</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> trying to</font>

110
00:04:26,500 --> 00:04:31,030
debug it kernel code<font color="#E5E5E5"> debugging is very</font>

111
00:04:29,229 --> 00:04:32,710
hard because<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to debug</font><font color="#E5E5E5"> a remote</font>

112
00:04:31,030 --> 00:04:34,508
<font color="#E5E5E5">system the debugger</font><font color="#CCCCCC"> has to live on the</font>

113
00:04:32,710 --> 00:04:36,130
<font color="#CCCCCC">other machine</font><font color="#E5E5E5"> because you can't have a</font>

114
00:04:34,509 --> 00:04:38,590
debugger on<font color="#E5E5E5"> a kernel and stop the whole</font>

115
00:04:36,130 --> 00:04:40,360
<font color="#E5E5E5">thing it'll just is just</font><font color="#CCCCCC"> not possible</font>

116
00:04:38,590 --> 00:04:40,780
so there's a lot<font color="#CCCCCC"> of caveats</font><font color="#E5E5E5"> to doing</font>

117
00:04:40,360 --> 00:04:42,280
work

118
00:04:40,780 --> 00:04:43,869
with<font color="#CCCCCC"> kernel code writing rootkits</font><font color="#E5E5E5"> and</font>

119
00:04:42,280 --> 00:04:45,460
it's a lot<font color="#E5E5E5"> of difficulty and there's a</font>

120
00:04:43,870 --> 00:04:47,740
most of<font color="#E5E5E5"> things you want to do as a</font>

121
00:04:45,460 --> 00:04:49,810
malware<font color="#E5E5E5"> author like get credit cards or</font>

122
00:04:47,740 --> 00:04:52,990
prose passwords or whatever you can do

123
00:04:49,810 --> 00:04:55,750
<font color="#CCCCCC">neutral</font><font color="#E5E5E5"> lamps or not rootkits</font><font color="#CCCCCC"> have kind</font>

124
00:04:52,990 --> 00:04:57,790
of fallen<font color="#CCCCCC"> off recently</font><font color="#E5E5E5"> but they still</font>

125
00:04:55,750 --> 00:04:58,840
<font color="#CCCCCC">exist and that's what we're</font><font color="#E5E5E5"> going to</font>

126
00:04:57,790 --> 00:05:01,990
<font color="#E5E5E5">talk about because worse</font>

127
00:04:58,840 --> 00:05:04,630
we're power-hungry fools here today so

128
00:05:01,990 --> 00:05:08,200
for this course<font color="#E5E5E5"> I have written a special</font>

129
00:05:04,630 --> 00:05:10,270
rootkit<font color="#CCCCCC"> this is this group hid the whole</font>

130
00:05:08,200 --> 00:05:12,909
purpose of<font color="#CCCCCC"> it is very</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> it just</font>

131
00:05:10,270 --> 00:05:15,280
<font color="#CCCCCC">hides</font><font color="#E5E5E5"> any file on the file system with</font>

132
00:05:12,910 --> 00:05:17,200
<font color="#E5E5E5">b-sides in the file</font><font color="#CCCCCC"> name</font><font color="#E5E5E5"> or directory so</font>

133
00:05:15,280 --> 00:05:19,450
if it's<font color="#E5E5E5"> got b-sides in it you won't see</font>

134
00:05:17,200 --> 00:05:21,430
it still there<font color="#CCCCCC"> it can be accessed but</font>

135
00:05:19,450 --> 00:05:24,490
for anybody running<font color="#E5E5E5"> the system you won't</font>

136
00:05:21,430 --> 00:05:26,890
see the file at all<font color="#CCCCCC"> the goal is to</font>

137
00:05:24,490 --> 00:05:30,910
install this rootkit into the kernel

138
00:05:26,890 --> 00:05:33,099
<font color="#E5E5E5">using the exploit in Street Fighter 5 a</font>

139
00:05:30,910 --> 00:05:35,530
little<font color="#CCCCCC"> background when I say a rootkit</font>

140
00:05:33,100 --> 00:05:37,210
most<font color="#CCCCCC"> rootkits are really just</font><font color="#E5E5E5"> a current</font>

141
00:05:35,530 --> 00:05:40,989
implemented as a kernel driver that's

142
00:05:37,210 --> 00:05:43,659
loaded onto the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> drivers</font>

143
00:05:40,990 --> 00:05:45,850
<font color="#E5E5E5">used to be</font><font color="#CCCCCC"> is just install this driver</font>

144
00:05:43,660 --> 00:05:47,740
<font color="#E5E5E5">and it would just write right into the</font>

145
00:05:45,850 --> 00:05:48,970
kernel<font color="#E5E5E5"> you just be able</font><font color="#CCCCCC"> to tell</font><font color="#E5E5E5"> your</font>

146
00:05:47,740 --> 00:05:51,150
driver as long as you had admin rights

147
00:05:48,970 --> 00:05:53,919
and you're done<font color="#E5E5E5"> rootkit</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> installs easy</font>

148
00:05:51,150 --> 00:05:55,479
<font color="#E5E5E5">Microsoft has over the time added a lot</font>

149
00:05:53,919 --> 00:05:57,640
of<font color="#E5E5E5"> security features</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make this a lot</font>

150
00:05:55,479 --> 00:06:00,340
harder<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> assigning patch guard</font>

151
00:05:57,640 --> 00:06:03,550
<font color="#E5E5E5">secure execution of only kernel and</font>

152
00:06:00,340 --> 00:06:06,239
process<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a memory excuse me an address</font>

153
00:06:03,550 --> 00:06:10,180
<font color="#CCCCCC">space layout randomization in the kernel</font>

154
00:06:06,240 --> 00:06:12,700
<font color="#E5E5E5">so like I</font><font color="#CCCCCC"> said we started out you could</font>

155
00:06:10,180 --> 00:06:14,410
just<font color="#E5E5E5"> install your</font><font color="#CCCCCC"> rootkit as a service</font>

156
00:06:12,700 --> 00:06:16,030
<font color="#E5E5E5">so you say hey service here's my driver</font>

157
00:06:14,410 --> 00:06:18,190
<font color="#CCCCCC">when you start the service</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> service</font>

158
00:06:16,030 --> 00:06:20,349
would<font color="#E5E5E5"> load a driver into the kernel</font><font color="#CCCCCC"> root</font>

159
00:06:18,190 --> 00:06:22,719
get installed<font color="#E5E5E5"> just that easy then</font>

160
00:06:20,350 --> 00:06:25,510
<font color="#CCCCCC">Windows has said kernel bold signing all</font>

161
00:06:22,720 --> 00:06:27,400
drivers must<font color="#CCCCCC"> be</font><font color="#E5E5E5"> signed and I have to be</font>

162
00:06:25,510 --> 00:06:29,020
signed by a trusted publisher<font color="#E5E5E5"> does that</font>

163
00:06:27,400 --> 00:06:31,289
cut<font color="#E5E5E5"> down on malware rootkits</font>

164
00:06:29,020 --> 00:06:33,370
<font color="#E5E5E5">dramatically</font><font color="#CCCCCC"> I'm not going</font><font color="#E5E5E5"> to sign my</font>

165
00:06:31,289 --> 00:06:36,039
malware that's<font color="#E5E5E5"> going to tell you who</font>

166
00:06:33,370 --> 00:06:38,070
wrote it or I'm<font color="#E5E5E5"> not going to pay $300 to</font>

167
00:06:36,039 --> 00:06:40,300
get my malware signed or<font color="#E5E5E5"> or</font><font color="#CCCCCC"> whatnot</font>

168
00:06:38,070 --> 00:06:41,409
<font color="#CCCCCC">furthermore Microsoft has now made it</font>

169
00:06:40,300 --> 00:06:43,890
for like Windows 10<font color="#CCCCCC"> Don</font>

170
00:06:41,410 --> 00:06:45,700
that has to be co-signed by one of their

171
00:06:43,890 --> 00:06:47,770
certifications<font color="#E5E5E5"> and they have to go</font>

172
00:06:45,700 --> 00:06:49,570
through<font color="#CCCCCC"> a certain process to ensure that</font>

173
00:06:47,770 --> 00:06:52,510
<font color="#E5E5E5">the driver does meet certain</font>

174
00:06:49,570 --> 00:06:53,560
requirements and<font color="#CCCCCC"> is</font><font color="#E5E5E5"> good code and</font><font color="#CCCCCC"> pretty</font>

175
00:06:52,510 --> 00:06:54,700
good chance you're not<font color="#E5E5E5"> going to get</font>

176
00:06:53,560 --> 00:06:58,150
<font color="#CCCCCC">malware to get that signal</font>

177
00:06:54,700 --> 00:07:00,430
so<font color="#CCCCCC"> Colonel Oh tiny</font><font color="#E5E5E5"> code-signing has put</font>

178
00:06:58,150 --> 00:07:03,940
a large stand to just writing a rootkit

179
00:07:00,430 --> 00:07:05,710
driver<font color="#E5E5E5"> and having to be installed so how</font>

180
00:07:03,940 --> 00:07:08,110
<font color="#E5E5E5">did the malware get around this well</font>

181
00:07:05,710 --> 00:07:09,880
there's a<font color="#E5E5E5"> little flag inside the kernel</font>

182
00:07:08,110 --> 00:07:12,040
<font color="#CCCCCC">that</font><font color="#E5E5E5"> was like do I</font><font color="#CCCCCC"> need to check</font><font color="#E5E5E5"> the</font>

183
00:07:09,880 --> 00:07:14,560
certification about the drivers or do I

184
00:07:12,040 --> 00:07:16,900
<font color="#CCCCCC">just allow any driver in and malware</font>

185
00:07:14,560 --> 00:07:18,640
would use some<font color="#E5E5E5"> kind of exploit to flip</font>

186
00:07:16,900 --> 00:07:20,289
that switch off then say<font color="#CCCCCC"> hey load this</font>

187
00:07:18,640 --> 00:07:22,300
<font color="#E5E5E5">driver</font><font color="#CCCCCC"> it's like oh I don't need a check</font>

188
00:07:20,290 --> 00:07:23,650
<font color="#E5E5E5">drive the signature so I'll just go</font>

189
00:07:22,300 --> 00:07:25,270
ahead<font color="#E5E5E5"> and load this and that's how they</font>

190
00:07:23,650 --> 00:07:27,880
got their driver<font color="#CCCCCC"> or</font><font color="#E5E5E5"> rootkit into the</font>

191
00:07:25,270 --> 00:07:29,380
system Microsoft<font color="#CCCCCC"> got smart</font><font color="#E5E5E5"> and like you</font>

192
00:07:27,880 --> 00:07:31,540
know what we<font color="#CCCCCC"> really should watch that</font>

193
00:07:29,380 --> 00:07:32,950
flag and<font color="#CCCCCC"> if</font><font color="#E5E5E5"> anything changes it we've</font>

194
00:07:31,540 --> 00:07:34,360
been poned and shut it down<font color="#E5E5E5"> and so</font>

195
00:07:32,950 --> 00:07:36,789
that's what patch guard does<font color="#E5E5E5"> patch guard</font>

196
00:07:34,360 --> 00:07:38,620
watches a lot<font color="#CCCCCC"> of key structures inside</font>

197
00:07:36,790 --> 00:07:41,110
the<font color="#CCCCCC"> kernel to make sure that nothing's</font>

198
00:07:38,620 --> 00:07:43,720
being mucked with one of them now is<font color="#CCCCCC"> the</font>

199
00:07:41,110 --> 00:07:45,490
little flag the switch that<font color="#CCCCCC"> says hey do</font>

200
00:07:43,720 --> 00:07:47,440
I<font color="#CCCCCC"> have to sign</font><font color="#E5E5E5"> this code and if that</font>

201
00:07:45,490 --> 00:07:49,180
switch is flipped it notices it it'll

202
00:07:47,440 --> 00:07:51,969
<font color="#E5E5E5">throw a blue screen shut down the</font><font color="#CCCCCC"> system</font>

203
00:07:49,180 --> 00:07:53,410
<font color="#E5E5E5">easy way to get detected so now that</font>

204
00:07:51,970 --> 00:07:55,750
brings<font color="#CCCCCC"> us to</font><font color="#E5E5E5"> where we currently are in</font>

205
00:07:53,410 --> 00:07:56,860
<font color="#CCCCCC">this kind</font><font color="#E5E5E5"> of cat-and-mouse game where if</font>

206
00:07:55,750 --> 00:07:59,440
we want<font color="#E5E5E5"> to load something into the</font>

207
00:07:56,860 --> 00:08:00,130
kernel we can't do it as a service

208
00:07:59,440 --> 00:08:02,050
<font color="#CCCCCC">anymore</font>

209
00:08:00,130 --> 00:08:04,480
unless it's been signed<font color="#E5E5E5"> and verified so</font>

210
00:08:02,050 --> 00:08:06,040
we need to manually<font color="#E5E5E5"> load our driver into</font>

211
00:08:04,480 --> 00:08:10,080
the kernel<font color="#E5E5E5"> some way and that's what this</font>

212
00:08:06,040 --> 00:08:13,180
talk<font color="#E5E5E5"> is</font><font color="#CCCCCC"> really going to</font><font color="#E5E5E5"> focus on now</font>

213
00:08:10,080 --> 00:08:15,700
<font color="#CCCCCC">finding an exploit is extremely hard</font>

214
00:08:13,180 --> 00:08:17,620
<font color="#CCCCCC">especially</font><font color="#E5E5E5"> for the kernel right like the</font>

215
00:08:15,700 --> 00:08:20,110
kernel is getting tougher and<font color="#E5E5E5"> more</font>

216
00:08:17,620 --> 00:08:22,510
secure every every iteration<font color="#E5E5E5"> every bug</font>

217
00:08:20,110 --> 00:08:23,620
fix and so it's hard<font color="#E5E5E5"> to find an exploit</font>

218
00:08:22,510 --> 00:08:25,440
in<font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> even if you</font><font color="#E5E5E5"> find one you</font>

219
00:08:23,620 --> 00:08:29,350
<font color="#E5E5E5">probably want to use it just for this</font>

220
00:08:25,440 --> 00:08:32,470
but there<font color="#E5E5E5"> are numerous numerous drivers</font>

221
00:08:29,350 --> 00:08:34,300
for the kernel<font color="#E5E5E5"> that are of shady quality</font>

222
00:08:32,470 --> 00:08:36,160
and you can<font color="#E5E5E5"> find exploits in one of</font>

223
00:08:34,299 --> 00:08:37,449
<font color="#E5E5E5">those drivers and they execute in the</font>

224
00:08:36,159 --> 00:08:39,969
kernel so<font color="#CCCCCC"> if you exploit one of them</font>

225
00:08:37,450 --> 00:08:41,500
you're granted access to the kernel now

226
00:08:39,970 --> 00:08:43,210
the great<font color="#CCCCCC"> thing is is you don't have to</font>

227
00:08:41,500 --> 00:08:44,860
<font color="#E5E5E5">find an exploit in</font><font color="#CCCCCC"> the driver that's</font>

228
00:08:43,210 --> 00:08:47,200
running on<font color="#E5E5E5"> your target you can simply</font>

229
00:08:44,860 --> 00:08:49,900
find an exploit in any sign driver<font color="#CCCCCC"> and</font>

230
00:08:47,200 --> 00:08:51,730
then just bring<font color="#CCCCCC"> that driver with you say</font>

231
00:08:49,900 --> 00:08:54,220
hey but install this in the<font color="#E5E5E5"> kernel</font>

232
00:08:51,730 --> 00:08:56,680
window says<font color="#CCCCCC"> uh you're an admin yeah oh</font>

233
00:08:54,220 --> 00:08:58,180
is<font color="#CCCCCC"> it</font><font color="#E5E5E5"> signed yeah</font><font color="#CCCCCC"> okay I'll</font><font color="#E5E5E5"> load this in</font>

234
00:08:56,680 --> 00:08:59,620
<font color="#E5E5E5">the kernel then you just exploit</font><font color="#CCCCCC"> that</font>

235
00:08:58,180 --> 00:09:02,229
driver and<font color="#CCCCCC"> get</font><font color="#E5E5E5"> yourself into the kernel</font>

236
00:08:59,620 --> 00:09:03,460
<font color="#CCCCCC">and rootkits do this often Turla was</font>

237
00:09:02,230 --> 00:09:06,040
very famous<font color="#CCCCCC"> for doing this they would</font>

238
00:09:03,460 --> 00:09:08,470
bring along a signed driver for a an

239
00:09:06,040 --> 00:09:10,120
older VirtualBox driver

240
00:09:08,470 --> 00:09:12,040
they would install that driver into the

241
00:09:10,120 --> 00:09:14,080
<font color="#E5E5E5">kernel and then exploit it</font><font color="#CCCCCC"> to get access</font>

242
00:09:12,040 --> 00:09:16,689
<font color="#E5E5E5">into the kernel themselves windows would</font>

243
00:09:14,080 --> 00:09:18,090
gladly install that VirtualBox driver

244
00:09:16,690 --> 00:09:22,360
because it had been signed and<font color="#E5E5E5"> verified</font>

245
00:09:18,090 --> 00:09:23,890
and the<font color="#CCCCCC"> cool thing</font><font color="#E5E5E5"> is this VirtualBox</font>

246
00:09:22,360 --> 00:09:25,690
<font color="#CCCCCC">has now made</font><font color="#E5E5E5"> newer versions of that</font>

247
00:09:23,890 --> 00:09:27,280
driver but the older driver is still

248
00:09:25,690 --> 00:09:30,820
valid<font color="#E5E5E5"> still sign and so it still</font><font color="#CCCCCC"> works</font>

249
00:09:27,280 --> 00:09:32,709
<font color="#CCCCCC">for</font><font color="#E5E5E5"> these guys and that brings us to</font>

250
00:09:30,820 --> 00:09:34,150
<font color="#CCCCCC">where Street Fighter 5 comes into the</font>

251
00:09:32,710 --> 00:09:35,500
picture<font color="#CCCCCC"> you've noticed I've had some</font>

252
00:09:34,150 --> 00:09:36,939
Street Fighter 5 characters along<font color="#E5E5E5"> the</font>

253
00:09:35,500 --> 00:09:42,400
side<font color="#E5E5E5"> this whole way that's kind of the</font>

254
00:09:36,940 --> 00:09:43,600
theme here<font color="#CCCCCC"> Street</font><font color="#E5E5E5"> Fighter 5 is the 17th</font>

255
00:09:42,400 --> 00:09:46,420
<font color="#E5E5E5">game in the series</font>

256
00:09:43,600 --> 00:09:48,550
yeah they count<font color="#E5E5E5"> as well they're counting</font>

257
00:09:46,420 --> 00:09:50,380
<font color="#E5E5E5">seems weird but</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> Street Fighter 2</font>

258
00:09:48,550 --> 00:09:51,939
had like six variants<font color="#E5E5E5"> right like that's</font>

259
00:09:50,380 --> 00:09:54,730
<font color="#E5E5E5">the</font><font color="#CCCCCC"> one most of</font><font color="#E5E5E5"> us know I</font><font color="#CCCCCC"> feel</font><font color="#E5E5E5"> asked</font>

260
00:09:51,940 --> 00:09:57,100
when I play<font color="#E5E5E5"> sorry but so there's like</font>

261
00:09:54,730 --> 00:09:58,780
<font color="#E5E5E5">six</font><font color="#CCCCCC"> versions of</font><font color="#E5E5E5"> two and and that's how</font>

262
00:09:57,100 --> 00:10:00,520
they eventually got<font color="#CCCCCC"> up to</font><font color="#E5E5E5"> 17 it's been</font>

263
00:09:58,780 --> 00:10:02,530
going on for<font color="#CCCCCC"> thirty years now so this is</font>

264
00:10:00,520 --> 00:10:05,050
<font color="#E5E5E5">like 30 years the</font><font color="#CCCCCC"> Street Fighter and</font><font color="#E5E5E5"> I'm</font>

265
00:10:02,530 --> 00:10:07,959
not<font color="#E5E5E5"> counting here like Street Fighter</font>

266
00:10:05,050 --> 00:10:09,790
pinfall or Street Fighter<font color="#E5E5E5"> versus tech</font>

267
00:10:07,960 --> 00:10:11,050
more<font color="#E5E5E5"> you know some of the tangent</font>

268
00:10:09,790 --> 00:10:13,569
<font color="#E5E5E5">version this is just the main series</font>

269
00:10:11,050 --> 00:10:14,250
<font color="#E5E5E5">line it's a very very popular franchise</font>

270
00:10:13,570 --> 00:10:17,850
for them

271
00:10:14,250 --> 00:10:21,100
<font color="#E5E5E5">it's 305 has a lot of</font><font color="#CCCCCC"> features</font><font color="#E5E5E5"> that</font>

272
00:10:17,850 --> 00:10:23,410
<font color="#E5E5E5">Capcom wanted to make sure hackers or</font>

273
00:10:21,100 --> 00:10:25,300
cheaters weren't<font color="#E5E5E5"> allowed to break Street</font>

274
00:10:23,410 --> 00:10:28,089
<font color="#E5E5E5">Fighter 5 has online cross-platform</font>

275
00:10:25,300 --> 00:10:29,920
<font color="#CCCCCC">multi-player</font><font color="#E5E5E5"> gaming right anybody who's</font>

276
00:10:28,090 --> 00:10:31,660
played online<font color="#E5E5E5"> gaming knows</font><font color="#CCCCCC"> the thing</font>

277
00:10:29,920 --> 00:10:33,250
<font color="#E5E5E5">that can kill an online</font><font color="#CCCCCC"> gaming</font><font color="#E5E5E5"> series</font>

278
00:10:31,660 --> 00:10:34,209
faster than anything else<font color="#E5E5E5"> is rampant</font>

279
00:10:33,250 --> 00:10:35,350
cheating<font color="#CCCCCC"> if there's rampant</font><font color="#E5E5E5"> cheating</font>

280
00:10:34,210 --> 00:10:38,140
nobody<font color="#CCCCCC"> wants to play it</font><font color="#E5E5E5"> anymore</font>

281
00:10:35,350 --> 00:10:39,550
so<font color="#CCCCCC"> there's a huge</font><font color="#E5E5E5"> incentive to Capcom to</font>

282
00:10:38,140 --> 00:10:41,110
do want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> curb somebody from hacking</font>

283
00:10:39,550 --> 00:10:44,170
their local content and<font color="#CCCCCC"> doing some kind</font>

284
00:10:41,110 --> 00:10:45,700
of<font color="#E5E5E5"> automated bot keying or I don't know</font>

285
00:10:44,170 --> 00:10:47,079
what you'd<font color="#CCCCCC"> want to do to make yourself</font>

286
00:10:45,700 --> 00:10:48,520
win better but I'm sure there's plenty

287
00:10:47,080 --> 00:10:50,700
<font color="#E5E5E5">of ideas and things you could do</font>

288
00:10:48,520 --> 00:10:53,260
furthermore the game uses

289
00:10:50,700 --> 00:10:55,030
<font color="#E5E5E5">microtransactions you can buy in game</font>

290
00:10:53,260 --> 00:10:57,040
currency or earn it by<font color="#CCCCCC"> doing certain</font>

291
00:10:55,030 --> 00:10:58,540
<font color="#E5E5E5">feats I'm sure you could probably</font><font color="#CCCCCC"> scrip</font>

292
00:10:57,040 --> 00:10:59,920
<font color="#E5E5E5">that if you wanted to hack it</font><font color="#CCCCCC"> and get</font>

293
00:10:58,540 --> 00:11:01,839
money<font color="#E5E5E5"> and so they wanted to curb</font><font color="#CCCCCC"> that</font>

294
00:10:59,920 --> 00:11:03,310
and then finally there's a<font color="#E5E5E5"> global player</font>

295
00:11:01,840 --> 00:11:04,990
ranking so there's a lot of<font color="#E5E5E5"> incentive</font>

296
00:11:03,310 --> 00:11:07,630
for<font color="#CCCCCC"> Capcom to want to curb cheating</font>

297
00:11:04,990 --> 00:11:10,360
locally on the<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> and so in</font>

298
00:11:07,630 --> 00:11:10,950
September<font color="#CCCCCC"> about six months after</font><font color="#E5E5E5"> the</font>

299
00:11:10,360 --> 00:11:13,870
game's release

300
00:11:10,950 --> 00:11:15,490
<font color="#E5E5E5">they added a patch that</font><font color="#CCCCCC"> says oh</font><font color="#E5E5E5"> this is</font>

301
00:11:13,870 --> 00:11:16,990
our new anti cheating mechanism is

302
00:11:15,490 --> 00:11:19,750
coming<font color="#E5E5E5"> down to the machines and that's</font>

303
00:11:16,990 --> 00:11:21,560
really<font color="#E5E5E5"> where this caught my</font><font color="#CCCCCC"> eye as</font><font color="#E5E5E5"> I was</font>

304
00:11:19,750 --> 00:11:22,759
browsing a reddit forum<font color="#E5E5E5"> and</font>

305
00:11:21,560 --> 00:11:24,709
somebody was common<font color="#E5E5E5"> in the forum that</font>

306
00:11:22,759 --> 00:11:26,649
<font color="#E5E5E5">their game keeps crashing and causing a</font>

307
00:11:24,709 --> 00:11:29,719
blue<font color="#E5E5E5"> screen and I thought to myself</font>

308
00:11:26,649 --> 00:11:31,490
games<font color="#E5E5E5"> shouldn't be causing blue screens</font>

309
00:11:29,720 --> 00:11:33,350
because<font color="#E5E5E5"> blue screens only happen if</font>

310
00:11:31,490 --> 00:11:35,149
something's mucked up in the kernel<font color="#E5E5E5"> so</font>

311
00:11:33,350 --> 00:11:37,310
something about<font color="#E5E5E5"> this game must be</font>

312
00:11:35,149 --> 00:11:38,180
<font color="#E5E5E5">mucking in the kernel which is not a</font>

313
00:11:37,310 --> 00:11:39,800
good<font color="#CCCCCC"> idea</font>

314
00:11:38,180 --> 00:11:41,719
<font color="#CCCCCC">game</font><font color="#E5E5E5"> shouldn't be in the kernel game</font>

315
00:11:39,800 --> 00:11:43,729
still belong<font color="#CCCCCC"> to</font><font color="#E5E5E5"> everybody</font><font color="#CCCCCC"> any means</font><font color="#E5E5E5"> so</font>

316
00:11:41,720 --> 00:11:45,980
<font color="#CCCCCC">emeritus I felt it merited some more</font>

317
00:11:43,730 --> 00:11:48,290
<font color="#E5E5E5">attention</font><font color="#CCCCCC"> I got a hold of the the code</font>

318
00:11:45,980 --> 00:11:50,269
the Capcom driver<font color="#E5E5E5"> within a few hours I</font>

319
00:11:48,290 --> 00:11:55,939
realized<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is really really bad</font><font color="#E5E5E5"> this</font>

320
00:11:50,269 --> 00:11:58,970
driver has an exploit<font color="#CCCCCC"> it doesn't do a</font>

321
00:11:55,939 --> 00:12:01,639
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> good things what</font><font color="#CCCCCC"> it does it's</font>

322
00:11:58,970 --> 00:12:03,649
designed<font color="#E5E5E5"> to load code from user land and</font>

323
00:12:01,639 --> 00:12:05,329
execute it<font color="#E5E5E5"> yes I think it's designed to</font>

324
00:12:03,649 --> 00:12:06,589
<font color="#E5E5E5">say hey</font><font color="#CCCCCC"> Street Fighter game</font><font color="#E5E5E5"> do you have</font>

325
00:12:05,329 --> 00:12:08,449
something you want me to check for you

326
00:12:06,589 --> 00:12:10,129
I'll check it for<font color="#CCCCCC"> you and</font><font color="#E5E5E5"> so it will</font>

327
00:12:08,449 --> 00:12:12,800
<font color="#E5E5E5">just accept code from the Street Fighter</font>

328
00:12:10,129 --> 00:12:14,300
<font color="#CCCCCC">game to</font><font color="#E5E5E5"> run in kernel land but it</font>

329
00:12:12,800 --> 00:12:17,240
doesn't do any kind<font color="#CCCCCC"> of on a second</font>

330
00:12:14,300 --> 00:12:18,740
authentication<font color="#E5E5E5"> so any user</font><font color="#CCCCCC"> line process</font>

331
00:12:17,240 --> 00:12:20,540
could talk to this code and say hey I

332
00:12:18,740 --> 00:12:22,939
want you<font color="#E5E5E5"> to run this for me like</font><font color="#CCCCCC"> it</font>

333
00:12:20,540 --> 00:12:24,860
basically is just<font color="#E5E5E5"> opening the door and</font>

334
00:12:22,939 --> 00:12:27,980
<font color="#E5E5E5">say anybody</font><font color="#CCCCCC"> won</font><font color="#E5E5E5"> in the kernel</font><font color="#CCCCCC"> because</font>

335
00:12:24,860 --> 00:12:30,220
I've give you<font color="#E5E5E5"> access right here when I</font>

336
00:12:27,980 --> 00:12:32,839
noticed this<font color="#E5E5E5"> I read</font><font color="#CCCCCC"> we we reached out to</font>

337
00:12:30,220 --> 00:12:34,730
<font color="#E5E5E5">Capcom</font><font color="#CCCCCC"> as quickly as we could within a</font>

338
00:12:32,839 --> 00:12:35,779
few hours we<font color="#E5E5E5"> had trying to figure out</font>

339
00:12:34,730 --> 00:12:38,329
who<font color="#E5E5E5"> to talk to</font><font color="#CCCCCC"> who's the right person</font>

340
00:12:35,779 --> 00:12:39,500
<font color="#E5E5E5">and we sent emails to</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> contact</font><font color="#CCCCCC"> and</font>

341
00:12:38,329 --> 00:12:42,079
say hey you've got a really<font color="#E5E5E5"> bad problem</font>

342
00:12:39,500 --> 00:12:44,990
here<font color="#E5E5E5"> but at the same time we were doing</font>

343
00:12:42,079 --> 00:12:45,979
<font color="#CCCCCC">that it was a very</font><font color="#E5E5E5"> easy bug to notice</font>

344
00:12:44,990 --> 00:12:49,160
and<font color="#CCCCCC"> that's why I'm using</font><font color="#E5E5E5"> this driver</font>

345
00:12:45,980 --> 00:12:50,509
here it's a very<font color="#E5E5E5"> great example of</font><font color="#CCCCCC"> how to</font>

346
00:12:49,160 --> 00:12:51,649
exploit the kernel<font color="#CCCCCC"> because the bugs</font>

347
00:12:50,509 --> 00:12:53,569
<font color="#CCCCCC">really easy to spot</font>

348
00:12:51,649 --> 00:12:54,680
others had spotted<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and they just went</font>

349
00:12:53,569 --> 00:12:56,000
public with it it was all over Twitter

350
00:12:54,680 --> 00:12:58,339
at the same time we're trying<font color="#E5E5E5"> to reach</font>

351
00:12:56,000 --> 00:13:00,379
<font color="#CCCCCC">capcom under the covers Capcom was very</font>

352
00:12:58,339 --> 00:13:02,089
good<font color="#E5E5E5"> about it very cool</font><font color="#CCCCCC"> within 24 hours</font>

353
00:13:00,379 --> 00:13:03,980
they had rolled back<font color="#CCCCCC"> to patch they</font>

354
00:13:02,089 --> 00:13:06,649
<font color="#E5E5E5">realized</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> mistake and so they clean</font>

355
00:13:03,980 --> 00:13:08,360
<font color="#CCCCCC">it up very</font><font color="#E5E5E5"> quickly now I had done some</font>

356
00:13:06,649 --> 00:13:10,939
research<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this driver</font><font color="#CCCCCC"> hello to the</font>

357
00:13:08,360 --> 00:13:12,170
code I'm a malware reverser so<font color="#E5E5E5"> I I like</font>

358
00:13:10,939 --> 00:13:13,550
to find the<font color="#CCCCCC"> history of</font><font color="#E5E5E5"> something I like</font>

359
00:13:12,170 --> 00:13:15,019
to<font color="#E5E5E5"> see where it came from</font><font color="#CCCCCC"> I like to try</font>

360
00:13:13,550 --> 00:13:17,420
to<font color="#E5E5E5"> figure out who's</font><font color="#CCCCCC"> behind it and it</font>

361
00:13:15,019 --> 00:13:19,309
turns out<font color="#E5E5E5"> this particular code probably</font>

362
00:13:17,420 --> 00:13:22,639
wasn't<font color="#E5E5E5"> written by Capcom themselves</font>

363
00:13:19,309 --> 00:13:24,860
because I can find<font color="#E5E5E5"> very very similar</font>

364
00:13:22,639 --> 00:13:27,589
code<font color="#E5E5E5"> almost the exact same type of same</font>

365
00:13:24,860 --> 00:13:28,670
code<font color="#CCCCCC"> to state back</font><font color="#E5E5E5"> almost</font><font color="#CCCCCC"> ten years this</font>

366
00:13:27,589 --> 00:13:30,410
has been<font color="#CCCCCC"> around</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> quite this</font>

367
00:13:28,670 --> 00:13:33,170
particular code has been<font color="#E5E5E5"> around for</font><font color="#CCCCCC"> talk</font>

368
00:13:30,410 --> 00:13:34,520
<font color="#CCCCCC">sometime it has been used in numerous</font>

369
00:13:33,170 --> 00:13:36,380
other<font color="#E5E5E5"> gaming</font>

370
00:13:34,520 --> 00:13:38,750
other games<font color="#E5E5E5"> these are icons</font><font color="#CCCCCC"> for those</font>

371
00:13:36,380 --> 00:13:40,070
other games or images<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> recognize</font>

372
00:13:38,750 --> 00:13:42,020
<font color="#E5E5E5">any of them and that's probably why this</font>

373
00:13:40,070 --> 00:13:44,420
<font color="#E5E5E5">hasn't gotten any attention until now is</font>

374
00:13:42,020 --> 00:13:45,050
really<font color="#E5E5E5"> low under the wire small fry</font>

375
00:13:44,420 --> 00:13:47,199
stuff

376
00:13:45,050 --> 00:13:48,979
it wasn't until Capcom picked it up and

377
00:13:47,200 --> 00:13:50,900
that it<font color="#E5E5E5"> got noticed</font>

378
00:13:48,980 --> 00:13:54,860
<font color="#E5E5E5">Capcom's got a lot</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> attention I</font>

379
00:13:50,900 --> 00:13:57,740
can't completely<font color="#CCCCCC"> unlit cap come off</font>

380
00:13:54,860 --> 00:13:59,630
though because where they got<font color="#CCCCCC"> this</font>

381
00:13:57,740 --> 00:14:01,400
<font color="#CCCCCC">co-brother they got it from</font><font color="#E5E5E5"> a forum or</font>

382
00:13:59,630 --> 00:14:03,470
they hired a guy<font color="#E5E5E5"> that brought it in or</font>

383
00:14:01,400 --> 00:14:07,340
they<font color="#CCCCCC"> subcontracted</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't know I can't</font>

384
00:14:03,470 --> 00:14:08,900
say but<font color="#E5E5E5"> they signed the code</font><font color="#CCCCCC"> that's not</font>

385
00:14:07,340 --> 00:14:10,820
a good idea<font color="#CCCCCC"> to</font><font color="#E5E5E5"> think somebody</font><font color="#CCCCCC"> else was</font>

386
00:14:08,900 --> 00:14:14,390
<font color="#E5E5E5">called that</font><font color="#CCCCCC"> you didn't write it just not</font>

387
00:14:10,820 --> 00:14:16,520
good<font color="#E5E5E5"> for your own reputation so that</font>

388
00:14:14,390 --> 00:14:20,510
<font color="#E5E5E5">signature is what allows us to let this</font>

389
00:14:16,520 --> 00:14:22,010
<font color="#CCCCCC">code into modern kernels so I want</font><font color="#E5E5E5"> to</font>

390
00:14:20,510 --> 00:14:23,540
let's take part this driver now I'm

391
00:14:22,010 --> 00:14:24,890
going to we're<font color="#E5E5E5"> going to look at the key</font>

392
00:14:23,540 --> 00:14:26,390
functions in<font color="#E5E5E5"> this driver it's really</font>

393
00:14:24,890 --> 00:14:29,300
small<font color="#E5E5E5"> there's like three main functions</font>

394
00:14:26,390 --> 00:14:31,130
<font color="#CCCCCC">we're going to look</font><font color="#E5E5E5"> at and I'm going to</font>

395
00:14:29,300 --> 00:14:32,990
<font color="#E5E5E5">show some code</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to try to stay</font>

396
00:14:31,130 --> 00:14:34,430
out<font color="#CCCCCC"> of assembly</font><font color="#E5E5E5"> there's like five and</font>

397
00:14:32,990 --> 00:14:35,540
assembly instructions I'll talk<font color="#CCCCCC"> about</font>

398
00:14:34,430 --> 00:14:38,120
this<font color="#E5E5E5"> whole course so the most of</font><font color="#CCCCCC"> it's</font>

399
00:14:35,540 --> 00:14:42,550
going<font color="#E5E5E5"> to be sea level code so every</font>

400
00:14:38,120 --> 00:14:42,550
driver<font color="#CCCCCC"> has a main function</font><font color="#E5E5E5"> which is</font>

401
00:14:48,100 --> 00:14:50,160
you

402
00:18:08,480 --> 00:18:14,360
you give me<font color="#E5E5E5"> does the address before it</font>

403
00:18:12,080 --> 00:18:15,949
point back to<font color="#CCCCCC"> that same pointer</font><font color="#E5E5E5"> because</font>

404
00:18:14,360 --> 00:18:18,500
I want<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> that it does for</font><font color="#CCCCCC"> some</font>

405
00:18:15,950 --> 00:18:21,830
reason not sure why but it wants to<font color="#E5E5E5"> know</font>

406
00:18:18,500 --> 00:18:24,710
<font color="#E5E5E5">that it does and then if so then I'm</font>

407
00:18:21,830 --> 00:18:27,590
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> turn</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> s ma P now s</font><font color="#CCCCCC"> MEP is</font>

408
00:18:24,710 --> 00:18:30,110
what says<font color="#E5E5E5"> kernel-mode code must run over</font>

409
00:18:27,590 --> 00:18:31,820
here<font color="#E5E5E5"> and user mode code run must run</font>

410
00:18:30,110 --> 00:18:33,350
over here and if you're a colonel you

411
00:18:31,820 --> 00:18:34,850
can't be running<font color="#E5E5E5"> code from over here</font>

412
00:18:33,350 --> 00:18:36,530
they turn that off they said oh yeah

413
00:18:34,850 --> 00:18:38,629
yeah yeah<font color="#E5E5E5"> colonel you can read code from</font>

414
00:18:36,530 --> 00:18:40,820
<font color="#E5E5E5">the user that's fine</font><font color="#CCCCCC"> and then it finds</font>

415
00:18:38,630 --> 00:18:42,860
<font color="#E5E5E5">an address of a routine and it</font><font color="#CCCCCC"> passes</font>

416
00:18:40,820 --> 00:18:44,928
that as an<font color="#E5E5E5"> argument to</font><font color="#CCCCCC"> the user land</font>

417
00:18:42,860 --> 00:18:47,120
pointer<font color="#E5E5E5"> it zooms what you give it was a</font>

418
00:18:44,929 --> 00:18:49,490
pointer to<font color="#E5E5E5"> code and it just jumps to the</font>

419
00:18:47,120 --> 00:18:51,620
code that<font color="#CCCCCC"> the user</font><font color="#E5E5E5"> gave it once that's</font>

420
00:18:49,490 --> 00:18:54,140
<font color="#E5E5E5">done then it comes</font><font color="#CCCCCC"> back and it says okay</font>

421
00:18:51,620 --> 00:18:56,449
let's rien a bit that says<font color="#E5E5E5"> kernel mode</font>

422
00:18:54,140 --> 00:18:58,040
code can only<font color="#E5E5E5"> run in kernel and let's</font>

423
00:18:56,450 --> 00:18:59,780
not run user mode<font color="#E5E5E5"> code because</font>

424
00:18:58,040 --> 00:19:01,428
<font color="#CCCCCC">truthfully that</font><font color="#E5E5E5"> is a bit</font><font color="#CCCCCC"> that's in later</font>

425
00:18:59,780 --> 00:19:03,530
<font color="#E5E5E5">versions the window monitored my patch</font>

426
00:19:01,429 --> 00:19:05,780
guard and so<font color="#E5E5E5"> patch guard notices that's</font>

427
00:19:03,530 --> 00:19:07,100
changed<font color="#E5E5E5"> it's going to send you up the</font>

428
00:19:05,780 --> 00:19:09,500
blue screen it's going<font color="#CCCCCC"> to shut you down</font>

429
00:19:07,100 --> 00:19:11,870
but we have a window because<font color="#E5E5E5"> blue patch</font>

430
00:19:09,500 --> 00:19:13,160
guard doesn't watch every bit at all

431
00:19:11,870 --> 00:19:14,928
times it actually<font color="#CCCCCC"> kind of runs through</font>

432
00:19:13,160 --> 00:19:16,460
the cycle of I'm checking<font color="#E5E5E5"> these things</font>

433
00:19:14,929 --> 00:19:18,110
<font color="#CCCCCC">now I'm going to check these things</font><font color="#E5E5E5"> can</font>

434
00:19:16,460 --> 00:19:20,150
<font color="#E5E5E5">go back</font><font color="#CCCCCC"> and check</font><font color="#E5E5E5"> these things</font><font color="#CCCCCC"> and so if</font>

435
00:19:18,110 --> 00:19:21,740
you're<font color="#CCCCCC"> quick you can flip</font><font color="#E5E5E5"> that bit</font><font color="#CCCCCC"> run</font>

436
00:19:20,150 --> 00:19:24,080
<font color="#E5E5E5">some code flip it back and patch guard</font>

437
00:19:21,740 --> 00:19:26,030
would be none the<font color="#E5E5E5"> wiser</font><font color="#CCCCCC"> and so if the</font>

438
00:19:24,080 --> 00:19:27,620
user man code that you pass<font color="#E5E5E5"> to this is</font>

439
00:19:26,030 --> 00:19:31,820
very small<font color="#CCCCCC"> very</font><font color="#E5E5E5"> quick you won't be</font>

440
00:19:27,620 --> 00:19:33,559
caught by patch guard now the pointer

441
00:19:31,820 --> 00:19:36,200
thing<font color="#E5E5E5"> is really kind of weird</font><font color="#CCCCCC"> I'm not</font>

442
00:19:33,559 --> 00:19:38,480
going to dwell<font color="#E5E5E5"> on too much but let's</font>

443
00:19:36,200 --> 00:19:40,130
just<font color="#E5E5E5"> assume</font><font color="#CCCCCC"> that it's stipulation we</font>

444
00:19:38,480 --> 00:19:42,020
have to meet as part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our next exploit</font>

445
00:19:40,130 --> 00:19:44,390
because<font color="#CCCCCC"> whenever you're</font><font color="#E5E5E5"> exploiting</font>

446
00:19:42,020 --> 00:19:46,730
<font color="#E5E5E5">drivers that</font><font color="#CCCCCC"> are harder or real exploits</font>

447
00:19:44,390 --> 00:19:47,929
<font color="#E5E5E5">like this one's not then there's there's</font>

448
00:19:46,730 --> 00:19:49,820
going to be stipulations you have to

449
00:19:47,929 --> 00:19:50,870
meet so this is a very<font color="#E5E5E5"> easy stipulation</font>

450
00:19:49,820 --> 00:19:53,299
to me we<font color="#CCCCCC"> just have to make</font><font color="#E5E5E5"> sure there's</font>

451
00:19:50,870 --> 00:19:55,850
a pointer to<font color="#CCCCCC"> our</font><font color="#E5E5E5"> a pointer to our</font>

452
00:19:53,299 --> 00:19:59,090
pointer right<font color="#E5E5E5"> before our pointer really</font>

453
00:19:55,850 --> 00:20:00,110
kinda hard<font color="#CCCCCC"> to say but so boom that's it</font>

454
00:19:59,090 --> 00:20:02,090
that's<font color="#E5E5E5"> all there is to that driver</font>

455
00:20:00,110 --> 00:20:03,979
<font color="#E5E5E5">there's really not much else to it it</font>

456
00:20:02,090 --> 00:20:07,010
doesn't do anything elbow<font color="#E5E5E5"> can open up a</font>

457
00:20:03,980 --> 00:20:09,080
window<font color="#CCCCCC"> for you to run user code so in</font>

458
00:20:07,010 --> 00:20:10,580
user land how do we exploit<font color="#E5E5E5"> this all we</font>

459
00:20:09,080 --> 00:20:12,620
have to do is<font color="#E5E5E5"> open a handle to the</font>

460
00:20:10,580 --> 00:20:14,840
driver<font color="#E5E5E5"> that string shown there at the</font>

461
00:20:12,620 --> 00:20:17,178
top<font color="#E5E5E5"> it is the handle to the driver we</font>

462
00:20:14,840 --> 00:20:19,580
call device<font color="#CCCCCC"> i/o control with that</font>

463
00:20:17,179 --> 00:20:21,549
<font color="#CCCCCC">particular code and then we</font><font color="#E5E5E5"> just pass it</font>

464
00:20:19,580 --> 00:20:23,168
the address<font color="#CCCCCC"> of our</font><font color="#E5E5E5"> show code and if</font>

465
00:20:21,549 --> 00:20:26,739
everything's happy<font color="#E5E5E5"> it'll run our</font>

466
00:20:23,169 --> 00:20:29,529
<font color="#E5E5E5">shellcode our user line code now that's</font>

467
00:20:26,739 --> 00:20:33,100
not we're not done though that's not

468
00:20:29,529 --> 00:20:36,429
just it<font color="#CCCCCC"> remember we're not</font><font color="#E5E5E5"> exactly in</font>

469
00:20:33,100 --> 00:20:39,428
<font color="#E5E5E5">the</font><font color="#CCCCCC"> route we're</font><font color="#E5E5E5"> not in</font><font color="#CCCCCC"> Colonel yet we're</font>

470
00:20:36,429 --> 00:20:41,769
just<font color="#E5E5E5"> running from user land in a kernel</font>

471
00:20:39,429 --> 00:20:43,659
thread<font color="#E5E5E5"> so we want to get our rootkit up</font>

472
00:20:41,769 --> 00:20:45,759
in kernel<font color="#E5E5E5"> land and we want to be</font>

473
00:20:43,659 --> 00:20:47,830
officially in the kernel<font color="#CCCCCC"> and furthermore</font>

474
00:20:45,759 --> 00:20:49,389
<font color="#E5E5E5">remember this thread has to return very</font>

475
00:20:47,830 --> 00:20:50,860
quickly otherwise patch<font color="#E5E5E5"> guard is going</font>

476
00:20:49,389 --> 00:20:54,279
to catch us so we have to be<font color="#E5E5E5"> kind of</font>

477
00:20:50,860 --> 00:20:56,229
careful what we<font color="#CCCCCC"> do here</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what I've got</font>

478
00:20:54,279 --> 00:20:58,749
<font color="#CCCCCC">here is I've</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> a little rootkit kicker</font>

479
00:20:56,230 --> 00:21:00,759
function<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just call it my launch shell</font>

480
00:20:58,749 --> 00:21:04,019
which<font color="#CCCCCC"> is for launch L code and basically</font>

481
00:21:00,759 --> 00:21:04,019
<font color="#CCCCCC">its whole point is</font>

482
00:21:10,290 --> 00:21:12,350
you

483
00:23:23,060 --> 00:23:26,899
but in<font color="#CCCCCC"> 64-bit land there's not a long</font>

484
00:23:25,160 --> 00:23:27,620
jump<font color="#E5E5E5"> one instruction so that's why I</font>

485
00:23:26,900 --> 00:23:29,810
have to do it with these two

486
00:23:27,620 --> 00:23:33,530
<font color="#CCCCCC">instructions</font><font color="#E5E5E5"> now I've made it</font><font color="#CCCCCC"> as a</font>

487
00:23:29,810 --> 00:23:34,700
<font color="#CCCCCC">struck two like this to make it</font><font color="#E5E5E5"> a little</font>

488
00:23:33,530 --> 00:23:36,050
<font color="#CCCCCC">easier I could have wrought assembly</font>

489
00:23:34,700 --> 00:23:38,360
code like I said I don't<font color="#E5E5E5"> like writing</font>

490
00:23:36,050 --> 00:23:40,879
assembly<font color="#E5E5E5"> I like to</font><font color="#CCCCCC"> Li use command line</font>

491
00:23:38,360 --> 00:23:42,979
foo<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> this first structure</font><font color="#E5E5E5"> right</font>

492
00:23:40,880 --> 00:23:45,710
<font color="#CCCCCC">here is the</font><font color="#E5E5E5"> structure the pragma pack</font>

493
00:23:42,980 --> 00:23:47,480
tells the compiler do not whatsoever put

494
00:23:45,710 --> 00:23:49,100
any<font color="#CCCCCC"> spaces in</font><font color="#E5E5E5"> between this to make it</font>

495
00:23:47,480 --> 00:23:51,200
memory<font color="#E5E5E5"> lined or whatever because those</font>

496
00:23:49,100 --> 00:23:53,209
spaces<font color="#E5E5E5"> will totally</font><font color="#CCCCCC"> screw up my assembly</font>

497
00:23:51,200 --> 00:23:55,640
line<font color="#CCCCCC"> I really want this</font><font color="#E5E5E5"> to be tight</font>

498
00:23:53,210 --> 00:23:57,410
packed<font color="#E5E5E5"> these parameters to be right next</font>

499
00:23:55,640 --> 00:23:59,480
<font color="#E5E5E5">to each</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> so that's all that says</font>

500
00:23:57,410 --> 00:24:01,820
you can see that I've<font color="#CCCCCC"> got a pointer</font><font color="#E5E5E5"> and</font>

501
00:23:59,480 --> 00:24:03,140
move the jump<font color="#CCCCCC"> de três</font><font color="#E5E5E5"> I want to move in</font>

502
00:24:01,820 --> 00:24:04,189
and<font color="#E5E5E5"> then a jump</font><font color="#CCCCCC"> instruction and then</font>

503
00:24:03,140 --> 00:24:06,050
down below<font color="#E5E5E5"> is where I actually</font>

504
00:24:04,190 --> 00:24:09,980
<font color="#E5E5E5">initialize it</font><font color="#CCCCCC"> and I can</font><font color="#E5E5E5"> just initialize</font>

505
00:24:06,050 --> 00:24:12,169
it as a constant<font color="#E5E5E5"> and so I say hey here's</font>

506
00:24:09,980 --> 00:24:15,260
the<font color="#E5E5E5"> address I want in</font><font color="#CCCCCC"> that pointer that</font>

507
00:24:12,170 --> 00:24:17,390
<font color="#CCCCCC">the b84 8 is the</font><font color="#E5E5E5"> move to</font><font color="#CCCCCC"> EAX instruction</font>

508
00:24:15,260 --> 00:24:20,810
the launch shell is<font color="#E5E5E5"> the value I'm moving</font>

509
00:24:17,390 --> 00:24:21,680
into EAX and<font color="#E5E5E5"> then the EF e 0</font><font color="#CCCCCC"> FF is</font><font color="#E5E5E5"> the</font>

510
00:24:20,810 --> 00:24:23,450
jump instruction

511
00:24:21,680 --> 00:24:24,830
so I've already<font color="#E5E5E5"> initial I've just been</font>

512
00:24:23,450 --> 00:24:26,510
filled out<font color="#CCCCCC"> that structure it's already</font>

513
00:24:24,830 --> 00:24:29,689
got<font color="#CCCCCC"> everything set up</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> right I'll</font>

514
00:24:26,510 --> 00:24:32,390
pass that the address of that<font color="#CCCCCC"> shellcode</font>

515
00:24:29,690 --> 00:24:34,070
to the kernel it'll run it and then

516
00:24:32,390 --> 00:24:35,020
<font color="#E5E5E5">it'll just jump to the</font><font color="#CCCCCC"> launched shell</font>

517
00:24:34,070 --> 00:24:37,790
function<font color="#E5E5E5"> just</font><font color="#CCCCCC"> fine</font>

518
00:24:35,020 --> 00:24:39,920
<font color="#CCCCCC">the pragma there is something</font><font color="#E5E5E5"> that I</font>

519
00:24:37,790 --> 00:24:41,840
like this kind<font color="#E5E5E5"> of tricky so when you</font>

520
00:24:39,920 --> 00:24:44,420
initialize<font color="#E5E5E5"> something in</font><font color="#CCCCCC"> Visual</font><font color="#E5E5E5"> Studio as</font>

521
00:24:41,840 --> 00:24:46,490
a constant<font color="#E5E5E5"> then it's going to put it in</font>

522
00:24:44,420 --> 00:24:47,060
<font color="#E5E5E5">memory that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> read-only because it's a</font>

523
00:24:46,490 --> 00:24:49,280
constant

524
00:24:47,060 --> 00:24:51,919
but that's memory is not marked as

525
00:24:49,280 --> 00:24:54,260
executable<font color="#CCCCCC"> so if</font><font color="#E5E5E5"> I tried to pass</font><font color="#CCCCCC"> that</font>

526
00:24:51,920 --> 00:24:55,940
normally to<font color="#E5E5E5"> the kernel then they'll try</font>

527
00:24:54,260 --> 00:24:57,500
to go there in the<font color="#E5E5E5"> min and</font><font color="#CCCCCC"> the process</font>

528
00:24:55,940 --> 00:24:58,940
is<font color="#E5E5E5"> high this memory is not marked</font>

529
00:24:57,500 --> 00:25:00,620
executable<font color="#CCCCCC"> I'm going to throw an error</font>

530
00:24:58,940 --> 00:25:02,480
<font color="#E5E5E5">and you're in the kernel land so I'm</font>

531
00:25:00,620 --> 00:25:05,120
going to blue screen so to prevent that

532
00:25:02,480 --> 00:25:07,520
<font color="#CCCCCC">I despaired my says hey put this</font>

533
00:25:05,120 --> 00:25:09,649
<font color="#CCCCCC">particular structure in the code</font><font color="#E5E5E5"> section</font>

534
00:25:07,520 --> 00:25:11,750
just just do it don't<font color="#E5E5E5"> ask why just</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> it</font>

535
00:25:09,650 --> 00:25:13,970
and so sure enough link<font color="#CCCCCC"> Visual Studio</font>

536
00:25:11,750 --> 00:25:16,130
<font color="#E5E5E5">will put this constant structure in the</font>

537
00:25:13,970 --> 00:25:19,550
<font color="#E5E5E5">coat executable memory which then</font>

538
00:25:16,130 --> 00:25:21,440
doesn't cause any problems<font color="#CCCCCC"> it saves me</font>

539
00:25:19,550 --> 00:25:23,720
from at<font color="#E5E5E5"> runtime having to malloc some</font>

540
00:25:21,440 --> 00:25:25,250
executable<font color="#CCCCCC"> bramley memory copy the</font>

541
00:25:23,720 --> 00:25:28,400
structure<font color="#CCCCCC"> into it and then find the</font>

542
00:25:25,250 --> 00:25:32,350
<font color="#E5E5E5">right offsets</font><font color="#CCCCCC"> to fix up my pointers it's</font>

543
00:25:28,400 --> 00:25:32,350
just a lot<font color="#E5E5E5"> cleaner this way</font><font color="#CCCCCC"> in my mind</font>

544
00:25:32,390 --> 00:25:39,470
<font color="#E5E5E5">okay so now we have some</font><font color="#CCCCCC"> shellcode we</font>

545
00:25:37,640 --> 00:25:41,360
have all we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get chill code into</font>

546
00:25:39,470 --> 00:25:42,980
the kernel but getting<font color="#E5E5E5"> chill code into</font>

547
00:25:41,360 --> 00:25:44,750
the kernel it's not the same as having a

548
00:25:42,980 --> 00:25:46,700
rootkit driver installed in the kernel

549
00:25:44,750 --> 00:25:48,530
<font color="#E5E5E5">because</font><font color="#CCCCCC"> a driver has initialization</font>

550
00:25:46,700 --> 00:25:50,809
routines has some imports that has to be

551
00:25:48,530 --> 00:25:53,928
found<font color="#E5E5E5"> there has to be some relocations</font>

552
00:25:50,809 --> 00:25:55,850
<font color="#E5E5E5">some memory layout changes we still have</font>

553
00:25:53,929 --> 00:26:00,890
a little jump to go from<font color="#E5E5E5"> shellcode to</font>

554
00:25:55,850 --> 00:26:04,520
rootkit installed<font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> not familiar</font>

555
00:26:00,890 --> 00:26:06,230
<font color="#CCCCCC">with the a PE file when a</font><font color="#E5E5E5"> driver is a</font><font color="#CCCCCC"> PD</font>

556
00:26:04,520 --> 00:26:08,150
file<font color="#E5E5E5"> a drivers just</font><font color="#CCCCCC"> a different type</font>

557
00:26:06,230 --> 00:26:11,000
they exact same format<font color="#E5E5E5"> with just some</font>

558
00:26:08,150 --> 00:26:13,970
slight variations<font color="#E5E5E5"> a DLL at PE</font><font color="#CCCCCC"> at drivers</font>

559
00:26:11,000 --> 00:26:16,820
<font color="#CCCCCC">are all the same like</font><font color="#E5E5E5"> I was</font><font color="#CCCCCC"> just saying</font>

560
00:26:13,970 --> 00:26:19,340
we need when a driver or a PE file is

561
00:26:16,820 --> 00:26:21,409
loaded<font color="#E5E5E5"> there's some steps it does it has</font>

562
00:26:19,340 --> 00:26:24,799
<font color="#CCCCCC">to copy all the</font><font color="#E5E5E5"> sections into memory</font>

563
00:26:21,410 --> 00:26:26,179
expanded it will fix up any<font color="#CCCCCC"> relocations</font>

564
00:26:24,799 --> 00:26:28,160
<font color="#E5E5E5">based on where it was loaded into memory</font>

565
00:26:26,179 --> 00:26:29,510
<font color="#CCCCCC">it will find any function that calls</font>

566
00:26:28,160 --> 00:26:32,150
that's in a<font color="#E5E5E5"> different library it has to</font>

567
00:26:29,510 --> 00:26:33,620
find the<font color="#E5E5E5"> address of</font><font color="#CCCCCC"> that pull it in so</font>

568
00:26:32,150 --> 00:26:35,419
these all these<font color="#E5E5E5"> things are</font><font color="#CCCCCC"> things we're</font>

569
00:26:33,620 --> 00:26:36,949
going to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to do and we're gonna have</font>

570
00:26:35,419 --> 00:26:38,299
to do it manually<font color="#E5E5E5"> because we can't rely</font>

571
00:26:36,950 --> 00:26:39,530
on any<font color="#E5E5E5"> kernel function to do it at this</font>

572
00:26:38,299 --> 00:26:41,809
point<font color="#E5E5E5"> because there's not a kernel</font>

573
00:26:39,530 --> 00:26:42,290
<font color="#CCCCCC">function to load a load of driver for</font>

574
00:26:41,809 --> 00:26:44,210
memory

575
00:26:42,290 --> 00:26:46,340
there's only kernel functions to load

576
00:26:44,210 --> 00:26:48,650
drivers from disk<font color="#E5E5E5"> but then all</font><font color="#CCCCCC"> of them</font>

577
00:26:46,340 --> 00:26:50,480
also<font color="#E5E5E5"> do the code signing verification</font>

578
00:26:48,650 --> 00:26:53,720
stuff<font color="#E5E5E5"> not things we want to be screwing</font>

579
00:26:50,480 --> 00:26:56,210
<font color="#E5E5E5">with so I'm going to compare</font><font color="#CCCCCC"> side by</font>

580
00:26:53,720 --> 00:26:57,679
side loading a<font color="#E5E5E5"> DLL for a memory because</font>

581
00:26:56,210 --> 00:26:59,150
that's<font color="#CCCCCC"> very well talked about process</font>

582
00:26:57,679 --> 00:27:01,100
meterpreter does that all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> time it's</font>

583
00:26:59,150 --> 00:27:02,450
called reflective DLL loading I'm going

584
00:27:01,100 --> 00:27:05,330
to do that but I'm<font color="#CCCCCC"> going to do that</font><font color="#E5E5E5"> for</font>

585
00:27:02,450 --> 00:27:06,440
<font color="#CCCCCC">a driver and so</font><font color="#E5E5E5"> side by</font><font color="#CCCCCC"> side the steps</font>

586
00:27:05,330 --> 00:27:08,360
are almost the<font color="#CCCCCC"> same but there's</font>

587
00:27:06,440 --> 00:27:10,250
differences<font color="#E5E5E5"> in the user land called</font>

588
00:27:08,360 --> 00:27:12,199
virtual<font color="#CCCCCC"> Alex</font><font color="#E5E5E5"> to allocate some memory</font><font color="#CCCCCC"> in</font>

589
00:27:10,250 --> 00:27:15,440
<font color="#CCCCCC">kernel an</font><font color="#E5E5E5"> you call EXL like a pool with</font>

590
00:27:12,200 --> 00:27:18,799
tags<font color="#E5E5E5"> to come to allocate some memory mem</font>

591
00:27:15,440 --> 00:27:21,110
copy<font color="#E5E5E5"> memset they're both the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> in</font>

592
00:27:18,799 --> 00:27:23,120
user land<font color="#E5E5E5"> you have to there's not a</font>

593
00:27:21,110 --> 00:27:25,850
clean function for doing the relocations

594
00:27:23,120 --> 00:27:28,399
exposed by the<font color="#CCCCCC"> AP is</font><font color="#E5E5E5"> you have to do it</font>

595
00:27:25,850 --> 00:27:29,659
by hand<font color="#CCCCCC"> that exact same code works for</font>

596
00:27:28,400 --> 00:27:31,600
drivers we<font color="#E5E5E5"> can just kind of cut and</font>

597
00:27:29,660 --> 00:27:35,330
paste that<font color="#E5E5E5"> code put it in our in our</font>

598
00:27:31,600 --> 00:27:37,399
reflective<font color="#E5E5E5"> driver resolving import</font>

599
00:27:35,330 --> 00:27:39,350
that's kind of a stickier one<font color="#CCCCCC"> userland</font>

600
00:27:37,400 --> 00:27:41,330
you would say load library deep library

601
00:27:39,350 --> 00:27:43,580
<font color="#E5E5E5">say get proc address</font><font color="#CCCCCC"> say get the</font>

602
00:27:41,330 --> 00:27:44,178
function from<font color="#E5E5E5"> that library I need so I</font>

603
00:27:43,580 --> 00:27:44,820
<font color="#E5E5E5">can get the address</font>

604
00:27:44,179 --> 00:27:46,320
there's

605
00:27:44,820 --> 00:27:48,990
not the<font color="#E5E5E5"> equivalent for that</font><font color="#CCCCCC"> in</font>

606
00:27:46,320 --> 00:27:50,759
<font color="#CCCCCC">kernel-space</font><font color="#E5E5E5"> there is what we talked</font>

607
00:27:48,990 --> 00:27:52,620
<font color="#CCCCCC">about</font><font color="#E5E5E5"> before and get system routine</font>

608
00:27:50,759 --> 00:27:54,659
address which<font color="#CCCCCC"> can get the address of</font>

609
00:27:52,620 --> 00:27:58,439
system routines<font color="#E5E5E5"> but it only pulls</font>

610
00:27:54,659 --> 00:28:00,779
functions from<font color="#CCCCCC"> anta's kernel</font><font color="#E5E5E5"> or how if</font>

611
00:27:58,440 --> 00:28:02,909
you need any kind<font color="#CCCCCC"> of exported function</font>

612
00:28:00,779 --> 00:28:04,710
that's not in one of<font color="#CCCCCC"> those two</font><font color="#E5E5E5"> mm get</font>

613
00:28:02,909 --> 00:28:06,419
system routine address will<font color="#E5E5E5"> not find it</font>

614
00:28:04,710 --> 00:28:08,700
<font color="#CCCCCC">for you and</font><font color="#E5E5E5"> unfortunately because I'm</font>

615
00:28:06,419 --> 00:28:10,409
<font color="#CCCCCC">interacting with file system I do need</font>

616
00:28:08,700 --> 00:28:11,940
my rootkit needs some functions<font color="#E5E5E5"> that are</font>

617
00:28:10,409 --> 00:28:13,529
not<font color="#E5E5E5"> there so I'm going to have to do</font>

618
00:28:11,940 --> 00:28:15,630
some manual<font color="#CCCCCC"> work there to find the</font>

619
00:28:13,529 --> 00:28:17,399
driver I need or to<font color="#CCCCCC"> find the library in</font>

620
00:28:15,630 --> 00:28:19,139
the kernel I need get<font color="#E5E5E5"> the exported</font>

621
00:28:17,399 --> 00:28:22,408
function from<font color="#CCCCCC"> its port so</font><font color="#E5E5E5"> that I can</font>

622
00:28:19,139 --> 00:28:23,729
load my driver<font color="#CCCCCC"> the next thing is</font><font color="#E5E5E5"> after</font>

623
00:28:22,409 --> 00:28:25,590
you're all done<font color="#CCCCCC"> setting</font><font color="#E5E5E5"> up the memory</font>

624
00:28:23,730 --> 00:28:26,669
<font color="#E5E5E5">you set the memory protections on it and</font>

625
00:28:25,590 --> 00:28:28,139
use the line you say<font color="#E5E5E5"> this</font><font color="#CCCCCC"> member is</font>

626
00:28:26,669 --> 00:28:30,149
<font color="#E5E5E5">read-only this member is executable this</font>

627
00:28:28,139 --> 00:28:32,879
memory is rewrite this it's actually

628
00:28:30,149 --> 00:28:34,678
<font color="#CCCCCC">kind of optional if you just set the</font>

629
00:28:32,879 --> 00:28:37,500
<font color="#E5E5E5">memory to read write execute like it's</font>

630
00:28:34,679 --> 00:28:39,149
fine<font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably get caught and use the</font>

631
00:28:37,500 --> 00:28:41,039
<font color="#E5E5E5">line when you do that kind of thing but</font>

632
00:28:39,149 --> 00:28:43,168
in kernel space<font color="#E5E5E5"> the memory protections</font>

633
00:28:41,039 --> 00:28:45,240
don't quite work the<font color="#E5E5E5"> same as they</font><font color="#CCCCCC"> do in</font>

634
00:28:43,169 --> 00:28:47,460
user land and furthermore<font color="#E5E5E5"> since this is</font>

635
00:28:45,240 --> 00:28:49,169
optional we can kind of<font color="#E5E5E5"> just skip this</font>

636
00:28:47,460 --> 00:28:51,090
space<font color="#E5E5E5"> in kernel and as long as</font><font color="#CCCCCC"> the</font>

637
00:28:49,169 --> 00:28:53,490
memory is marked executable<font color="#E5E5E5"> which we can</font>

638
00:28:51,090 --> 00:28:55,350
mark when we allocate the<font color="#E5E5E5"> memory then we</font>

639
00:28:53,490 --> 00:28:57,600
should be fine<font color="#CCCCCC"> here and then the last</font>

640
00:28:55,350 --> 00:28:59,519
<font color="#E5E5E5">thing you do is to notify the DLL or the</font>

641
00:28:57,600 --> 00:29:02,129
executable or the driver<font color="#CCCCCC"> that you're</font>

642
00:28:59,519 --> 00:29:03,570
<font color="#E5E5E5">you're ready and that that's just the</font>

643
00:29:02,129 --> 00:29:07,080
name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the function based on</font><font color="#CCCCCC"> a page our</font>

644
00:29:03,570 --> 00:29:10,200
DLL<font color="#E5E5E5"> a PE or a driver it's driver entry</font>

645
00:29:07,080 --> 00:29:12,389
for a driver<font color="#E5E5E5"> you know we can call this</font>

646
00:29:10,200 --> 00:29:15,120
directly<font color="#E5E5E5"> but there's a nice kernel</font>

647
00:29:12,389 --> 00:29:16,740
function called<font color="#E5E5E5"> IO create driver where</font>

648
00:29:15,120 --> 00:29:18,629
you just pass it the<font color="#CCCCCC"> address of</font><font color="#E5E5E5"> this</font>

649
00:29:16,740 --> 00:29:20,789
function and then<font color="#E5E5E5"> in</font><font color="#CCCCCC"> its initializes</font>

650
00:29:18,629 --> 00:29:22,439
some nice memory structures for the

651
00:29:20,789 --> 00:29:23,820
driver in and that's the best and

652
00:29:22,440 --> 00:29:28,320
cleanest way to actually<font color="#E5E5E5"> kick off the</font>

653
00:29:23,820 --> 00:29:31,700
driver so in a minimum we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find</font>

654
00:29:28,320 --> 00:29:31,700
<font color="#E5E5E5">two functions</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> shellcode</font>

655
00:29:37,309 --> 00:29:39,370
you

656
00:29:51,710 --> 00:29:56,030
we'll find some<font color="#E5E5E5"> other functions that</font>

657
00:29:53,330 --> 00:29:57,290
<font color="#E5E5E5">make this a lot</font><font color="#CCCCCC"> easier</font><font color="#E5E5E5"> so my code uses a</font>

658
00:29:56,030 --> 00:29:58,790
bunch<font color="#E5E5E5"> of other functions in there to</font>

659
00:29:57,290 --> 00:30:00,530
make the loading<font color="#E5E5E5"> process a little easier</font>

660
00:29:58,790 --> 00:30:01,879
<font color="#CCCCCC">just</font><font color="#E5E5E5"> so I don't</font><font color="#CCCCCC"> have to write as much</font>

661
00:30:00,530 --> 00:30:03,170
code and that I know<font color="#CCCCCC"> if when those</font>

662
00:30:01,880 --> 00:30:06,230
changes<font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> change these</font>

663
00:30:03,170 --> 00:30:08,570
functions<font color="#CCCCCC"> too so at a minimum I need to</font>

664
00:30:06,230 --> 00:30:09,950
somehow<font color="#E5E5E5"> find the functions I need I need</font>

665
00:30:08,570 --> 00:30:11,870
to find out<font color="#E5E5E5"> where the heck I am in</font>

666
00:30:09,950 --> 00:30:14,150
memory so<font color="#E5E5E5"> that I can parse start parsing</font>

667
00:30:11,870 --> 00:30:16,370
<font color="#CCCCCC">my own PE header and find out where my</font>

668
00:30:14,150 --> 00:30:18,200
<font color="#E5E5E5">relocations are what what five functions</font>

669
00:30:16,370 --> 00:30:22,250
the driver actually<font color="#E5E5E5"> needs</font><font color="#CCCCCC"> I need to then</font>

670
00:30:18,200 --> 00:30:23,270
copy my condensed driver<font color="#E5E5E5"> into the memory</font>

671
00:30:22,250 --> 00:30:24,860
<font color="#E5E5E5">section I needed to copy the text</font>

672
00:30:23,270 --> 00:30:26,900
<font color="#CCCCCC">section over to a spa I need to talk</font>

673
00:30:24,860 --> 00:30:28,909
<font color="#CCCCCC">code section over need a copy</font><font color="#E5E5E5"> each of</font>

674
00:30:26,900 --> 00:30:31,280
these<font color="#E5E5E5"> particular sections over</font><font color="#CCCCCC"> in to the</font>

675
00:30:28,910 --> 00:30:33,230
right locations<font color="#CCCCCC"> I then need to</font><font color="#E5E5E5"> fix three</font>

676
00:30:31,280 --> 00:30:35,240
locations<font color="#CCCCCC"> inside and say hey I moved</font>

677
00:30:33,230 --> 00:30:36,830
<font color="#E5E5E5">this to here this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> over here this over</font>

678
00:30:35,240 --> 00:30:38,929
here and set the pointers correctly that

679
00:30:36,830 --> 00:30:40,909
way<font color="#E5E5E5"> find all the imports my driver needs</font>

680
00:30:38,929 --> 00:30:43,130
<font color="#E5E5E5">and then finally call create driver</font>

681
00:30:40,910 --> 00:30:44,690
<font color="#E5E5E5">passing at the address of</font><font color="#CCCCCC"> my rootkits</font>

682
00:30:43,130 --> 00:30:45,020
driver entry function and then<font color="#E5E5E5"> I'm good</font>

683
00:30:44,690 --> 00:30:49,190
to go

684
00:30:45,020 --> 00:30:51,020
<font color="#CCCCCC">my driver can just run</font><font color="#E5E5E5"> like normal so</font>

685
00:30:49,190 --> 00:30:55,150
the code to do this<font color="#E5E5E5"> like I said is</font><font color="#CCCCCC"> all</font>

686
00:30:51,020 --> 00:30:55,150
<font color="#E5E5E5">on github</font><font color="#CCCCCC"> nothing in there</font>

687
00:31:00,850 --> 00:31:02,909
you

688
00:31:10,600 --> 00:31:14,678
finding exports<font color="#CCCCCC"> and there's a</font>

689
00:31:12,279 --> 00:31:17,139
undocumented<font color="#CCCCCC"> kernel function called</font><font color="#E5E5E5"> RTL</font>

690
00:31:14,679 --> 00:31:19,710
query module<font color="#CCCCCC"> information</font><font color="#E5E5E5"> what it will do</font>

691
00:31:17,139 --> 00:31:22,779
is if you<font color="#E5E5E5"> call that it will pass you a</font>

692
00:31:19,710 --> 00:31:23,350
linked list of every module<font color="#E5E5E5"> loaded in</font>

693
00:31:22,779 --> 00:31:26,080
the kernel

694
00:31:23,350 --> 00:31:28,059
I can<font color="#E5E5E5"> then walk this list and find the</font>

695
00:31:26,080 --> 00:31:30,519
modules like oh I need to<font color="#E5E5E5"> find</font><font color="#CCCCCC"> an import</font>

696
00:31:28,059 --> 00:31:32,320
<font color="#E5E5E5">from you know beat crypt or whatever so</font>

697
00:31:30,519 --> 00:31:33,880
I can<font color="#E5E5E5"> just walk that module list until I</font>

698
00:31:32,320 --> 00:31:36,189
find<font color="#E5E5E5"> beat crypt</font><font color="#CCCCCC"> oh that's the one and</font>

699
00:31:33,880 --> 00:31:38,500
then I<font color="#E5E5E5"> have my own get proc address</font>

700
00:31:36,190 --> 00:31:40,720
<font color="#E5E5E5">routine and my own implementation of it</font>

701
00:31:38,500 --> 00:31:42,970
it's the<font color="#E5E5E5"> same implementation as any</font>

702
00:31:40,720 --> 00:31:45,039
other load from memory<font color="#E5E5E5"> library would do</font>

703
00:31:42,970 --> 00:31:47,740
<font color="#E5E5E5">because it's</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> ants just the same</font>

704
00:31:45,039 --> 00:31:49,120
as<font color="#CCCCCC"> user LAN</font><font color="#E5E5E5"> so I just have my</font><font color="#CCCCCC"> own get</font>

705
00:31:47,740 --> 00:31:50,620
proc redress routine I passed the

706
00:31:49,120 --> 00:31:52,059
address of that module<font color="#E5E5E5"> then it'll find</font>

707
00:31:50,620 --> 00:31:53,918
the<font color="#CCCCCC"> exported function I'm looking for</font>

708
00:31:52,059 --> 00:31:58,539
that's really<font color="#CCCCCC"> the only piece that's kind</font>

709
00:31:53,919 --> 00:32:01,210
of<font color="#E5E5E5"> different or new so anyways</font><font color="#CCCCCC"> I post</font>

710
00:31:58,539 --> 00:32:04,629
the code here on github<font color="#CCCCCC"> I</font><font color="#E5E5E5"> posted it like</font>

711
00:32:01,210 --> 00:32:06,759
<font color="#E5E5E5">last week and in honor of</font><font color="#CCCCCC"> streetfighter</font>

712
00:32:04,629 --> 00:32:08,019
I wrote the code in hadouken style

713
00:32:06,759 --> 00:32:10,480
programming<font color="#E5E5E5"> now if you're not</font><font color="#CCCCCC"> familiar</font>

714
00:32:08,019 --> 00:32:12,070
<font color="#E5E5E5">with</font><font color="#CCCCCC"> Dugan style programming</font><font color="#E5E5E5"> is this</font>

715
00:32:10,480 --> 00:32:13,450
might give you a<font color="#E5E5E5"> hint</font><font color="#CCCCCC"> this is why it's</font>

716
00:32:12,070 --> 00:32:15,220
<font color="#E5E5E5">called</font><font color="#CCCCCC"> hadouken style</font><font color="#E5E5E5"> programming</font>

717
00:32:13,450 --> 00:32:16,419
because<font color="#CCCCCC"> it will do</font><font color="#E5E5E5"> the nested if</font>

718
00:32:15,220 --> 00:32:18,450
statements<font color="#E5E5E5"> that it looks like the whole</font>

719
00:32:16,419 --> 00:32:20,590
thing<font color="#E5E5E5"> is being pushed</font><font color="#CCCCCC"> over by</font><font color="#E5E5E5"> a token</font>

720
00:32:18,450 --> 00:32:22,210
<font color="#CCCCCC">personally I don't</font><font color="#E5E5E5"> really like this kind</font>

721
00:32:20,590 --> 00:32:25,860
<font color="#E5E5E5">of style of writing it's kind</font><font color="#CCCCCC"> of ugly to</font>

722
00:32:22,210 --> 00:32:29,769
me but it<font color="#E5E5E5"> was fun for a change</font>

723
00:32:25,860 --> 00:32:34,678
<font color="#E5E5E5">cool</font><font color="#CCCCCC"> I think I</font><font color="#E5E5E5"> talked way</font><font color="#CCCCCC"> too fast</font>

724
00:32:29,769 --> 00:32:34,679
but I'm sorry let's do this

725
00:32:36,400 --> 00:32:41,830
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is my machine that I plan</font>

726
00:32:39,170 --> 00:32:41,830
to infect

727
00:32:47,770 --> 00:32:49,830
you

728
00:35:51,370 --> 00:35:56,799
that's how we do this now the Capcom

729
00:35:54,190 --> 00:35:59,560
driver really isn't<font color="#CCCCCC"> that exciting is</font><font color="#E5E5E5"> it</font>

730
00:35:56,800 --> 00:36:02,740
basically<font color="#CCCCCC"> just handed us access but I</font>

731
00:35:59,560 --> 00:36:05,080
hope that what I showed here<font color="#CCCCCC"> can at</font>

732
00:36:02,740 --> 00:36:07,330
<font color="#E5E5E5">least explain how the process</font><font color="#CCCCCC"> works</font>

733
00:36:05,080 --> 00:36:09,490
right like you now know this is how<font color="#E5E5E5"> I</font>

734
00:36:07,330 --> 00:36:11,529
exploit something get my kernel code

735
00:36:09,490 --> 00:36:13,390
into the kernel<font color="#E5E5E5"> and install my</font><font color="#CCCCCC"> rootkit</font>

736
00:36:11,530 --> 00:36:14,560
<font color="#E5E5E5">so that you can hunt on a different</font>

737
00:36:13,390 --> 00:36:16,180
driver that may be a<font color="#E5E5E5"> little bit more</font>

738
00:36:14,560 --> 00:36:17,830
harder to get execution on but the

739
00:36:16,180 --> 00:36:21,310
process is<font color="#E5E5E5"> still the</font><font color="#CCCCCC"> same it's just</font><font color="#E5E5E5"> kind</font>

740
00:36:17,830 --> 00:36:22,810
<font color="#CCCCCC">of</font><font color="#E5E5E5"> like this was a great baby food to</font>

741
00:36:21,310 --> 00:36:28,480
get to sink<font color="#E5E5E5"> our teeth into kernel mode</font>

742
00:36:22,810 --> 00:36:30,310
<font color="#CCCCCC">expectation</font><font color="#E5E5E5"> the current medications just</font>

743
00:36:28,480 --> 00:36:32,200
kind of<font color="#E5E5E5"> in review current</font><font color="#CCCCCC"> windows</font>

744
00:36:30,310 --> 00:36:34,779
medications do make this a lot harder

745
00:36:32,200 --> 00:36:38,169
<font color="#E5E5E5">than it used to be but it's</font><font color="#CCCCCC"> still</font>

746
00:36:34,780 --> 00:36:40,480
possible<font color="#CCCCCC"> many many drivers exist</font><font color="#E5E5E5"> with</font>

747
00:36:38,170 --> 00:36:42,310
exploits<font color="#CCCCCC"> that are signed</font><font color="#E5E5E5"> that they're</font>

748
00:36:40,480 --> 00:36:44,500
approved to run on Windows machines<font color="#CCCCCC"> and</font>

749
00:36:42,310 --> 00:36:45,700
those<font color="#E5E5E5"> are the most lucrative place to be</font>

750
00:36:44,500 --> 00:36:48,460
looking<font color="#CCCCCC"> for an exploit to get your code</font>

751
00:36:45,700 --> 00:36:51,569
into<font color="#CCCCCC"> the kernel and kernel drivers</font><font color="#E5E5E5"> just</font>

752
00:36:48,460 --> 00:36:53,890
like<font color="#E5E5E5"> dll's can be reflectively loaded</font>

753
00:36:51,570 --> 00:36:55,900
<font color="#E5E5E5">that's about it</font>

754
00:36:53,890 --> 00:36:58,089
I<font color="#CCCCCC"> talked fast so there's plenty</font><font color="#E5E5E5"> of time</font>

755
00:36:55,900 --> 00:37:01,200
<font color="#CCCCCC">do you</font><font color="#E5E5E5"> guys have any questions any other</font>

756
00:36:58,090 --> 00:37:01,200
questions thank you<font color="#E5E5E5"> for that one</font>

757
00:37:01,710 --> 00:37:07,060
how do I get<font color="#CCCCCC"> rid of</font><font color="#E5E5E5"> it mind has no</font>

758
00:37:04,510 --> 00:37:08,170
uninstall routine either<font color="#E5E5E5"> so the only way</font>

759
00:37:07,060 --> 00:37:09,730
<font color="#E5E5E5">to get rid of mine is to reboot the</font>

760
00:37:08,170 --> 00:37:11,410
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> soon as I reboot the machine if</font>

761
00:37:09,730 --> 00:37:17,170
everything<font color="#E5E5E5"> goes back to normal</font><font color="#CCCCCC"> I don't</font>

762
00:37:11,410 --> 00:37:18,850
<font color="#CCCCCC">do any kind of persistence cool</font><font color="#E5E5E5"> well</font>

763
00:37:17,170 --> 00:37:21,240
thank you<font color="#E5E5E5"> guys I hope you have a good</font>

764
00:37:18,850 --> 00:37:21,240
conference

