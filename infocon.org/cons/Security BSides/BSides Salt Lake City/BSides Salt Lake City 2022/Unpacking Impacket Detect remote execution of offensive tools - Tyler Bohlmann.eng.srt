1
00:00:08,240 --> 00:00:10,980
can everybody hear me

2
00:00:10,980 --> 00:00:14,460
sound good awesome off to a good start

3
00:00:14,460 --> 00:00:18,180
uh cool so thanks everyone for coming to

4
00:00:18,180 --> 00:00:21,060
my talk uh titled unpacking and packet

5
00:00:21,060 --> 00:00:24,180
how to detect uh remote execution of

6
00:00:24,180 --> 00:00:27,180
offensive security tools

7
00:00:27,180 --> 00:00:29,460
um I know it's close to lunchtime so I'm

8
00:00:29,460 --> 00:00:30,720
getting hungry as well so I appreciate

9
00:00:30,720 --> 00:00:32,220
the time

10
00:00:32,220 --> 00:00:35,040
uh who am I my name is Tyler Bullman I'm

11
00:00:35,040 --> 00:00:37,140
an incident Handler at a company called

12
00:00:37,140 --> 00:00:40,140
Red Canary uh I like to describe it as

13
00:00:40,140 --> 00:00:43,559
ghost hunting and computers to find evil

14
00:00:43,559 --> 00:00:44,760
and

15
00:00:44,760 --> 00:00:45,480
um

16
00:00:45,480 --> 00:00:47,460
figure out why computers misbehave and

17
00:00:47,460 --> 00:00:50,820
do bad things uh before that before

18
00:00:50,820 --> 00:00:52,860
joining incident handling I was actually

19
00:00:52,860 --> 00:00:54,600
the first technical support engineer at

20
00:00:54,600 --> 00:00:57,180
Red Canary and then before that I worked

21
00:00:57,180 --> 00:00:59,940
at various msps doing a lot of different

22
00:00:59,940 --> 00:01:02,340
I.T work help desks desktop support

23
00:01:02,340 --> 00:01:05,220
stuff like that

24
00:01:05,220 --> 00:01:07,260
um a little bit about me I'm a girl dad

25
00:01:07,260 --> 00:01:10,200
there's a picture of my two girls one is

26
00:01:10,200 --> 00:01:11,820
a dog and one is a human

27
00:01:11,820 --> 00:01:14,520
I also really enjoy Jiu Jitsu which is

28
00:01:14,520 --> 00:01:17,100
just wrestling and fancy pajamas

29
00:01:17,100 --> 00:01:19,740
and I enjoy coffee so much that I put in

30
00:01:19,740 --> 00:01:22,399
all caps

31
00:01:23,100 --> 00:01:25,799
quick overview of what we're going to

32
00:01:25,799 --> 00:01:28,740
cover we'll Define what is in packet

33
00:01:28,740 --> 00:01:30,920
next we'll

34
00:01:30,920 --> 00:01:33,420
discuss why should you care what's the

35
00:01:33,420 --> 00:01:34,740
significance here

36
00:01:34,740 --> 00:01:36,240
and then we'll cover briefly cover

37
00:01:36,240 --> 00:01:38,040
detection and response

38
00:01:38,040 --> 00:01:40,560
and then after that we'll start to talk

39
00:01:40,560 --> 00:01:43,979
about tracing it back to initial access

40
00:01:43,979 --> 00:01:46,200
after that some future considerations

41
00:01:46,200 --> 00:01:50,600
and then we'll end with a Q and A

42
00:01:50,640 --> 00:01:53,220
cool what is in packet and packet is

43
00:01:53,220 --> 00:01:54,840
basically just a collection of python

44
00:01:54,840 --> 00:01:57,600
classes that are used to Target Windows

45
00:01:57,600 --> 00:01:59,420
networking protocols

46
00:01:59,420 --> 00:02:02,159
the project used to belong to secureauth

47
00:02:02,159 --> 00:02:04,380
but I guess earlier this week fortra

48
00:02:04,380 --> 00:02:05,820
announced that they're undertaking the

49
00:02:05,820 --> 00:02:08,220
project that uh going forward

50
00:02:08,220 --> 00:02:10,440
uh Fortress formerly known as help

51
00:02:10,440 --> 00:02:13,260
systems they have everybody's favorite

52
00:02:13,260 --> 00:02:15,540
uh adversary emulation tool called

53
00:02:15,540 --> 00:02:17,879
Cobalt strike maybe they'll call it

54
00:02:17,879 --> 00:02:19,620
Cobalt impact or something like that who

55
00:02:19,620 --> 00:02:20,400
knows

56
00:02:20,400 --> 00:02:23,819
but it's essentially a low impact tool

57
00:02:23,819 --> 00:02:26,459
very versatile used to attack all the

58
00:02:26,459 --> 00:02:28,920
things can do enumeration Discovery

59
00:02:28,920 --> 00:02:31,379
capture hashes move out laterally

60
00:02:31,379 --> 00:02:34,020
throughout the environment perform some

61
00:02:34,020 --> 00:02:36,120
provesque and of course what we'll talk

62
00:02:36,120 --> 00:02:38,660
about talk about today remote execution

63
00:02:38,660 --> 00:02:41,099
and also on the right there it can

64
00:02:41,099 --> 00:02:43,440
attack those targets those protocols

65
00:02:43,440 --> 00:02:46,080
Kerberos window Secrets wmi

66
00:02:46,080 --> 00:02:47,660
Etc

67
00:02:47,660 --> 00:02:52,319
uh show of hands who had her

68
00:02:52,319 --> 00:02:55,379
who's uh used in packet but only in a

69
00:02:55,379 --> 00:02:58,019
testing scenario like pen test stuff

70
00:02:58,019 --> 00:02:59,040
like that

71
00:02:59,040 --> 00:03:02,519
has anyone encountered it on like a

72
00:03:02,519 --> 00:03:04,620
surprise pen test or malicious use

73
00:03:04,620 --> 00:03:07,640
okay cool

74
00:03:07,920 --> 00:03:09,720
um so why should you care

75
00:03:09,720 --> 00:03:12,239
uh from my perspective at least that

76
00:03:12,239 --> 00:03:14,940
Rick Canary we normally see this as

77
00:03:14,940 --> 00:03:18,180
testing activity and testing only

78
00:03:18,180 --> 00:03:19,019
um

79
00:03:19,019 --> 00:03:22,800
so it's usually used in

80
00:03:22,800 --> 00:03:25,080
common scenarios are ad assessments

81
00:03:25,080 --> 00:03:28,080
internal internal assessments assume

82
00:03:28,080 --> 00:03:30,239
breach stuff like that very limited in

83
00:03:30,239 --> 00:03:31,340
scope

84
00:03:31,340 --> 00:03:33,780
but they're trying to accomplish the

85
00:03:33,780 --> 00:03:37,440
same things as an adversary just the

86
00:03:37,440 --> 00:03:40,680
severity of what they're trying to do is

87
00:03:40,680 --> 00:03:43,200
slightly different and that's why under

88
00:03:43,200 --> 00:03:45,780
the uses they're meant to look the same

89
00:03:45,780 --> 00:03:48,540
except for adversary execute malware and

90
00:03:48,540 --> 00:03:50,060
deploy ransomware

91
00:03:50,060 --> 00:03:52,920
slightly different outcomes there

92
00:03:52,920 --> 00:03:56,040
and then for the examples pen tester I'm

93
00:03:56,040 --> 00:03:58,200
just going to pop calc remotely see if I

94
00:03:58,200 --> 00:04:01,200
can execute some code uh on an on a

95
00:04:01,200 --> 00:04:02,819
remote endpoint and then the other one

96
00:04:02,819 --> 00:04:06,480
is just not just but uh executing

97
00:04:06,480 --> 00:04:08,459
whisper gate so I'm gonna destroy the

98
00:04:08,459 --> 00:04:11,220
MBR and then leave a ransom note

99
00:04:11,220 --> 00:04:13,439
so

100
00:04:13,439 --> 00:04:15,659
in packet use essentially exists on two

101
00:04:15,659 --> 00:04:18,238
ends of the spectrum when it's testing

102
00:04:18,238 --> 00:04:20,418
it's good we kind of just shrug it off

103
00:04:20,418 --> 00:04:23,400
but when it's adversary use it can be

104
00:04:23,400 --> 00:04:25,740
bad and really lead to to worse things

105
00:04:25,740 --> 00:04:28,919
pretty quickly so it kind of blurs the

106
00:04:28,919 --> 00:04:30,780
lines and kind of lulls us into a false

107
00:04:30,780 --> 00:04:33,320
sense of security

108
00:04:33,360 --> 00:04:35,820
uh additionally it also differs from

109
00:04:35,820 --> 00:04:37,800
other threats at least from my

110
00:04:37,800 --> 00:04:39,060
perspective

111
00:04:39,060 --> 00:04:42,780
when we talk about commodity malware uh

112
00:04:42,780 --> 00:04:45,300
using bootloader as an example

113
00:04:45,300 --> 00:04:47,100
if we look at that command line there we

114
00:04:47,100 --> 00:04:50,280
can intuitively intuitively derive a lot

115
00:04:50,280 --> 00:04:52,740
of information of kind of what's going

116
00:04:52,740 --> 00:04:55,380
on pretty quickly we see W script

117
00:04:55,380 --> 00:04:56,880
executing

118
00:04:56,880 --> 00:04:59,280
I guess executing this Javascript file

119
00:04:59,280 --> 00:05:01,800
that JavaScript file was in a zip file

120
00:05:01,800 --> 00:05:04,259
and the name of the file

121
00:05:04,259 --> 00:05:06,960
uh looks to be related to some kind of

122
00:05:06,960 --> 00:05:09,900
search query possibly so really quick we

123
00:05:09,900 --> 00:05:12,180
have a lot of useful information that

124
00:05:12,180 --> 00:05:14,759
kind of drives our investigation

125
00:05:14,759 --> 00:05:17,880
next we have ex exchange exploitation

126
00:05:17,880 --> 00:05:20,759
via a web shell uh with that process

127
00:05:20,759 --> 00:05:24,060
execution there w3wp or as the cool kids

128
00:05:24,060 --> 00:05:28,620
say whoop uh spawning CMD or Powershell

129
00:05:28,620 --> 00:05:30,539
that kind of looks odd kind of looks

130
00:05:30,539 --> 00:05:33,120
very suspicious we can kind of infer it

131
00:05:33,120 --> 00:05:36,000
might be related to a web shell if there

132
00:05:36,000 --> 00:05:38,460
is command line information available

133
00:05:38,460 --> 00:05:41,580
that starts with Echo we can that kind

134
00:05:41,580 --> 00:05:44,039
of uh points us more in the direction

135
00:05:44,039 --> 00:05:45,479
that it is a web show we can start

136
00:05:45,479 --> 00:05:47,759
looking at is logs to pull in additional

137
00:05:47,759 --> 00:05:50,639
context so kind of intuitive we can

138
00:05:50,639 --> 00:05:52,560
derive a lot of information from there

139
00:05:52,560 --> 00:05:55,740
oops I forgot my memes

140
00:05:55,740 --> 00:05:57,539
so we like the first one it's easy to

141
00:05:57,539 --> 00:06:00,240
investigate second one easy

142
00:06:00,240 --> 00:06:02,220
investigative two but then we have

143
00:06:02,220 --> 00:06:04,860
remote execution uh within packet and we

144
00:06:04,860 --> 00:06:07,139
get this weird command line that

145
00:06:07,139 --> 00:06:09,060
is a bunch of gibberish

146
00:06:09,060 --> 00:06:11,340
uh initially looking at it

147
00:06:11,340 --> 00:06:13,020
so harder to investigate we don't really

148
00:06:13,020 --> 00:06:15,440
like that

149
00:06:16,080 --> 00:06:18,000
really quick just wanted to go over how

150
00:06:18,000 --> 00:06:20,940
I did my testing super simple uh at a

151
00:06:20,940 --> 00:06:22,380
high level

152
00:06:22,380 --> 00:06:24,780
uh the data collection just to spawn and

153
00:06:24,780 --> 00:06:27,300
then I'm using Olaf hartog's default

154
00:06:27,300 --> 00:06:29,340
system on config and then we just have

155
00:06:29,340 --> 00:06:31,860
the default Windows event logs that are

156
00:06:31,860 --> 00:06:33,180
available

157
00:06:33,180 --> 00:06:35,580
operating system just a local Windows 10

158
00:06:35,580 --> 00:06:37,919
VM and Kali Linux

159
00:06:37,919 --> 00:06:40,319
tools to kind of display this

160
00:06:40,319 --> 00:06:42,120
information I use Eric Zimmerman's

161
00:06:42,120 --> 00:06:44,940
timeline Explorer and also uh there's a

162
00:06:44,940 --> 00:06:46,979
suite of sysmon tools and it's just

163
00:06:46,979 --> 00:06:49,680
mumbu isn't uh in them and then the

164
00:06:49,680 --> 00:06:53,819
scripts I tested PS exec SMB exec wmi

165
00:06:53,819 --> 00:06:56,960
and dcom

166
00:06:57,120 --> 00:07:00,960
so first we'll discuss PS exec

167
00:07:00,960 --> 00:07:03,240
um it's actually not PS exec from CIS

168
00:07:03,240 --> 00:07:05,699
internals it's based off of a remcon

169
00:07:05,699 --> 00:07:07,800
which is basically just open source PS

170
00:07:07,800 --> 00:07:09,020
exec

171
00:07:09,020 --> 00:07:11,340
connects to remote machines to execute

172
00:07:11,340 --> 00:07:13,800
commands using a name pipe

173
00:07:13,800 --> 00:07:17,460
uh what is a name pipe uh just allows

174
00:07:17,460 --> 00:07:19,560
for inner process communication uses

175
00:07:19,560 --> 00:07:21,599
client server architecture to basically

176
00:07:21,599 --> 00:07:24,599
just transfer data back and forth

177
00:07:24,599 --> 00:07:25,979
um

178
00:07:25,979 --> 00:07:29,880
cool yeah communicates over 445 as well

179
00:07:29,880 --> 00:07:33,360
um so the event logs that it generates

180
00:07:33,360 --> 00:07:34,979
there's four of them

181
00:07:34,979 --> 00:07:38,160
uh 4624 so for that one we're

182
00:07:38,160 --> 00:07:40,199
specifically specifically looking for

183
00:07:40,199 --> 00:07:42,180
logon type 3 which is over the network

184
00:07:42,180 --> 00:07:44,060
it's going to contain

185
00:07:44,060 --> 00:07:46,740
the compromised username and then the

186
00:07:46,740 --> 00:07:49,259
remote IP of the device that it's coming

187
00:07:49,259 --> 00:07:53,220
from we'll also see 46.72 so those

188
00:07:53,220 --> 00:07:54,780
special permissions that are granted to

189
00:07:54,780 --> 00:07:57,780
that compromise username

190
00:07:57,780 --> 00:08:01,919
we'll also see a lot some log off events

191
00:08:01,919 --> 00:08:04,560
usually when the shell exits or when a

192
00:08:04,560 --> 00:08:07,080
command is entered

193
00:08:07,080 --> 00:08:10,380
and then lastly we get 7045 which just

194
00:08:10,380 --> 00:08:14,099
is showing that service has been created

195
00:08:14,099 --> 00:08:16,380
this is kind of what that data looks

196
00:08:16,380 --> 00:08:19,860
like in Timeline Explorer so the top red

197
00:08:19,860 --> 00:08:24,479
box is showing 4624 and 4672 and then we

198
00:08:24,479 --> 00:08:26,759
can see defected user in this case is

199
00:08:26,759 --> 00:08:30,120
Bob we have remote IPA information and

200
00:08:30,120 --> 00:08:32,099
then also that log on type 3 just

201
00:08:32,099 --> 00:08:33,899
showing that it's occurring over the

202
00:08:33,899 --> 00:08:34,799
network

203
00:08:34,799 --> 00:08:37,020
uh 4672 showing those special

204
00:08:37,020 --> 00:08:39,059
permissions assigned

205
00:08:39,059 --> 00:08:43,020
and then the 46 30 34 log off event and

206
00:08:43,020 --> 00:08:45,839
then if you look at the bottom 70 45 you

207
00:08:45,839 --> 00:08:48,200
get the display name of the the service

208
00:08:48,200 --> 00:08:51,480
and also the image path of where that's

209
00:08:51,480 --> 00:08:53,700
pointing to so pointing to that that

210
00:08:53,700 --> 00:08:55,980
service binary that gets randomly

211
00:08:55,980 --> 00:08:58,140
generated

212
00:08:58,140 --> 00:09:01,860
looking at this from sysmon we get this

213
00:09:01,860 --> 00:09:04,380
nice process hierarchy so we get that

214
00:09:04,380 --> 00:09:06,959
service binary that that gets created

215
00:09:06,959 --> 00:09:09,180
spawn CMD and then for General

216
00:09:09,180 --> 00:09:11,820
enumeration I just did who am I in

217
00:09:11,820 --> 00:09:13,080
hostname

218
00:09:13,080 --> 00:09:15,959
so pretty easy to follow there

219
00:09:15,959 --> 00:09:18,180
and then the system on events that it

220
00:09:18,180 --> 00:09:19,860
that it creates there's three of them

221
00:09:19,860 --> 00:09:23,120
that stick out at least to me system

222
00:09:23,120 --> 00:09:26,279
writing that service binary to disk and

223
00:09:26,279 --> 00:09:27,480
see windows

224
00:09:27,480 --> 00:09:30,600
get some pipe creation the name pipes

225
00:09:30,600 --> 00:09:33,360
are prepended with REM com so just

226
00:09:33,360 --> 00:09:35,940
supporting more evidence towards that it

227
00:09:35,940 --> 00:09:39,420
is REM com and not actually PS exec

228
00:09:39,420 --> 00:09:42,839
uh and then registry modifications

229
00:09:42,839 --> 00:09:45,600
so the image pass specifically pointing

230
00:09:45,600 --> 00:09:48,560
to that service binary

231
00:09:48,839 --> 00:09:51,120
and then if we're going to go about

232
00:09:51,120 --> 00:09:51,959
um

233
00:09:51,959 --> 00:09:54,300
querying or searching for this data I

234
00:09:54,300 --> 00:09:56,399
have some pseudo detection logic that

235
00:09:56,399 --> 00:09:58,440
just at a high level

236
00:09:58,440 --> 00:10:01,200
takes the system on data and kind of

237
00:10:01,200 --> 00:10:03,360
puts it in kind of a query format so we

238
00:10:03,360 --> 00:10:05,700
have system looking for a file being

239
00:10:05,700 --> 00:10:08,220
created and see windows that again that

240
00:10:08,220 --> 00:10:09,600
service binary

241
00:10:09,600 --> 00:10:12,600
uh service being created that one

242
00:10:12,600 --> 00:10:14,820
probably will be pretty noisy depending

243
00:10:14,820 --> 00:10:16,080
on

244
00:10:16,080 --> 00:10:19,080
the endpoint activity so maybe false

245
00:10:19,080 --> 00:10:21,779
positive prone there and then that pipe

246
00:10:21,779 --> 00:10:24,240
creation so that service binary creating

247
00:10:24,240 --> 00:10:28,760
a pipe that starts with remcon

248
00:10:29,040 --> 00:10:31,800
and then we move on to SMB exec so

249
00:10:31,800 --> 00:10:35,040
pretty similar to PS PS exec this is

250
00:10:35,040 --> 00:10:37,080
actually based off of Eric millem's SMB

251
00:10:37,080 --> 00:10:41,220
exec project from 2012 2013 I think

252
00:10:41,220 --> 00:10:43,440
uh his main use case was to get

253
00:10:43,440 --> 00:10:45,920
obfuscated metasploy payloads

254
00:10:45,920 --> 00:10:49,140
to a remote endpoint basically to evade

255
00:10:49,140 --> 00:10:51,680
AV

256
00:10:52,740 --> 00:10:55,560
this is again similar to PS exec except

257
00:10:55,560 --> 00:10:56,940
it doesn't actually drop a binary to

258
00:10:56,940 --> 00:10:58,140
disk

259
00:10:58,140 --> 00:11:00,540
but still creates a service

260
00:11:00,540 --> 00:11:03,779
uses a batch file for execution and then

261
00:11:03,779 --> 00:11:06,140
there's a temporary file

262
00:11:06,140 --> 00:11:09,360
that's there for the output

263
00:11:09,360 --> 00:11:12,300
and then also communicates over 445 and

264
00:11:12,300 --> 00:11:13,980
then just like PS exec it's going to

265
00:11:13,980 --> 00:11:16,040
generate those same

266
00:11:16,040 --> 00:11:18,240
Windows event logs

267
00:11:18,240 --> 00:11:21,079
as well

268
00:11:21,899 --> 00:11:24,000
so again if we look at that in Timeline

269
00:11:24,000 --> 00:11:27,000
Explorer we see kind of similar activity

270
00:11:27,000 --> 00:11:29,940
to to PS exec

271
00:11:29,940 --> 00:11:34,079
um but for the service creation if you

272
00:11:34,079 --> 00:11:37,579
look at the executable info column

273
00:11:37,579 --> 00:11:40,620
those are all the commands that are

274
00:11:40,620 --> 00:11:42,779
being generated

275
00:11:42,779 --> 00:11:44,760
into well that's going to point to the

276
00:11:44,760 --> 00:11:47,120
image path for the registry modification

277
00:11:47,120 --> 00:11:52,200
but CD is Echo CD is when the the Shell

278
00:11:52,200 --> 00:11:53,880
First connects to the remote endpoint

279
00:11:53,880 --> 00:11:57,000
and then who am I

280
00:11:57,000 --> 00:12:00,060
so that gets it or updated in an

281
00:12:00,060 --> 00:12:02,399
iterative fashion

282
00:12:02,399 --> 00:12:03,899
um so kind of interesting to see and

283
00:12:03,899 --> 00:12:05,339
this is what it looks like in cismon

284
00:12:05,339 --> 00:12:07,740
from a process hierarchy standpoint so

285
00:12:07,740 --> 00:12:12,120
Services spawning CMD and then

286
00:12:12,120 --> 00:12:13,980
again did the simple enumeration with

287
00:12:13,980 --> 00:12:17,000
who a mine hostname

288
00:12:17,820 --> 00:12:18,540
um

289
00:12:18,540 --> 00:12:20,459
so for sysmon registry modification

290
00:12:20,459 --> 00:12:22,740
events looking at the image path

291
00:12:22,740 --> 00:12:24,779
specifically

292
00:12:24,779 --> 00:12:27,060
it's going to point to not a service

293
00:12:27,060 --> 00:12:30,720
binary this time but a temporary file

294
00:12:30,720 --> 00:12:31,640
called

295
00:12:31,640 --> 00:12:33,899
execute.bat so that's that batch file

296
00:12:33,899 --> 00:12:36,839
that's executing the commands and then a

297
00:12:36,839 --> 00:12:41,760
temporary output file in the root of C

298
00:12:41,760 --> 00:12:45,720
um by default the service name for SMB

299
00:12:45,720 --> 00:12:49,560
exec is BTO BTO but you can change that

300
00:12:49,560 --> 00:12:51,959
uh in the script itself but a lot of

301
00:12:51,959 --> 00:12:53,639
people don't

302
00:12:53,639 --> 00:12:56,399
uh and then the command line down there

303
00:12:56,399 --> 00:12:58,560
I just wanted to point out the whole

304
00:12:58,560 --> 00:13:00,180
command line since it gets kind of cut

305
00:13:00,180 --> 00:13:04,339
off in the the screenshot above it

306
00:13:04,740 --> 00:13:07,800
and then file creation so it's going to

307
00:13:07,800 --> 00:13:10,740
create that execute.bat file and see see

308
00:13:10,740 --> 00:13:13,459
Windows temp

309
00:13:13,680 --> 00:13:17,700
um and then the way it executes is kind

310
00:13:17,700 --> 00:13:20,040
of interesting so if you look at the

311
00:13:20,040 --> 00:13:23,880
white box uh the bottom or the bottom uh

312
00:13:23,880 --> 00:13:25,320
Red Box

313
00:13:25,320 --> 00:13:27,480
is actually echoing the command into

314
00:13:27,480 --> 00:13:29,180
that

315
00:13:29,180 --> 00:13:32,100
execute.bat file and then the way it

316
00:13:32,100 --> 00:13:34,160
executes that is

317
00:13:34,160 --> 00:13:37,440
it spawns another CMD process and then

318
00:13:37,440 --> 00:13:39,480
that CMD process just goes ahead and

319
00:13:39,480 --> 00:13:42,180
executes that bat file so that's why you

320
00:13:42,180 --> 00:13:44,420
see

321
00:13:44,459 --> 00:13:47,100
um Services spawning CMD so that's going

322
00:13:47,100 --> 00:13:49,500
to Echo whatever command you're entering

323
00:13:49,500 --> 00:13:54,180
into that execute.bat file and then a

324
00:13:54,180 --> 00:13:56,760
secondary CMD process will spawn to

325
00:13:56,760 --> 00:13:59,820
actually execute the the batch file

326
00:13:59,820 --> 00:14:03,019
so kind of interesting

327
00:14:03,480 --> 00:14:05,519
and then again pseudo detection Logic

328
00:14:05,519 --> 00:14:10,019
for SMB exec so we have CMD

329
00:14:10,019 --> 00:14:13,980
creating a file execute.bat

330
00:14:13,980 --> 00:14:16,500
and I put C Windows underscore

331
00:14:16,500 --> 00:14:18,480
underscore output but I actually didn't

332
00:14:18,480 --> 00:14:21,480
get a file creation event for it and I'm

333
00:14:21,480 --> 00:14:23,339
wondering because that doesn't have a

334
00:14:23,339 --> 00:14:25,800
file extension so something to look out

335
00:14:25,800 --> 00:14:28,380
for there and then registry modification

336
00:14:28,380 --> 00:14:30,779
again with Services being created

337
00:14:30,779 --> 00:14:32,700
might be noisy might be false positive

338
00:14:32,700 --> 00:14:34,440
prone

339
00:14:34,440 --> 00:14:37,079
and then command line execution so CMD

340
00:14:37,079 --> 00:14:40,980
which has a CLI of that whole string

341
00:14:40,980 --> 00:14:43,160
there

342
00:14:43,560 --> 00:14:46,500
and then next we move on to WMA exec so

343
00:14:46,500 --> 00:14:48,060
it's

344
00:14:48,060 --> 00:14:50,040
say it's I was going to say it's the

345
00:14:50,040 --> 00:14:52,199
same as SMB but it's actually stealthier

346
00:14:52,199 --> 00:14:55,139
it doesn't create a service at all

347
00:14:55,139 --> 00:14:57,180
it uses Windows management

348
00:14:57,180 --> 00:14:59,880
instrumentation basically allows remote

349
00:14:59,880 --> 00:15:03,000
access to Windows endpoints a lot of

350
00:15:03,000 --> 00:15:05,060
system administrators or network admins

351
00:15:05,060 --> 00:15:07,199
use it

352
00:15:07,199 --> 00:15:09,600
to manage endpoints within within their

353
00:15:09,600 --> 00:15:13,019
environment communicates over 135 and

354
00:15:13,019 --> 00:15:15,779
445 for that initial shell connection

355
00:15:15,779 --> 00:15:20,100
and then subsequent data is sent over a

356
00:15:20,100 --> 00:15:23,160
dynamic Port through that Port range

357
00:15:23,160 --> 00:15:26,699
uh so for Windows event logs we have

358
00:15:26,699 --> 00:15:30,300
three uh just like the previous two

359
00:15:30,300 --> 00:15:33,180
scripts except for we don't get a

360
00:15:33,180 --> 00:15:35,940
service creation here so no 70 45 being

361
00:15:35,940 --> 00:15:37,740
created

362
00:15:37,740 --> 00:15:39,660
uh so again this is what it looks like

363
00:15:39,660 --> 00:15:41,519
in Timeline Explorer

364
00:15:41,519 --> 00:15:43,019
pretty similar to the previous two

365
00:15:43,019 --> 00:15:45,000
except there's going to be no service

366
00:15:45,000 --> 00:15:47,660
being created

367
00:15:48,120 --> 00:15:50,279
and then from a system on point of view

368
00:15:50,279 --> 00:15:52,500
this is the process hierarchy so we have

369
00:15:52,500 --> 00:15:55,380
wmi spawning CMD and then whatever

370
00:15:55,380 --> 00:15:59,339
command you're going to enter uh

371
00:16:00,300 --> 00:16:02,940
and then for sysmon events we have a

372
00:16:02,940 --> 00:16:04,920
file being created so

373
00:16:04,920 --> 00:16:07,079
if you look in the blue boxes see

374
00:16:07,079 --> 00:16:08,279
windows

375
00:16:08,279 --> 00:16:11,160
and then a funky string of characters or

376
00:16:11,160 --> 00:16:12,019
numbers

377
00:16:12,019 --> 00:16:14,940
uh that is actually an Epoch timestamp

378
00:16:14,940 --> 00:16:15,959
so

379
00:16:15,959 --> 00:16:18,180
forensically that's kind of nice to have

380
00:16:18,180 --> 00:16:20,839
because you get date and time of when

381
00:16:20,839 --> 00:16:24,240
the execution occurred and also when

382
00:16:24,240 --> 00:16:27,240
those commands were going off

383
00:16:27,240 --> 00:16:31,380
and then for uh process CLI just wanted

384
00:16:31,380 --> 00:16:33,540
to point out that CMD is had is

385
00:16:33,540 --> 00:16:34,639
executing

386
00:16:34,639 --> 00:16:37,320
uh this command line here so pretty

387
00:16:37,320 --> 00:16:39,600
unique it's going to proxy whatever

388
00:16:39,600 --> 00:16:41,100
command you're entering so in this case

389
00:16:41,100 --> 00:16:44,160
who am I to that temporary file in that

390
00:16:44,160 --> 00:16:45,899
admin share

391
00:16:45,899 --> 00:16:50,120
uh and then spawn who am I in this case

392
00:16:51,060 --> 00:16:53,160
and then just like the previous two some

393
00:16:53,160 --> 00:16:55,920
high level pseudo detection logic so

394
00:16:55,920 --> 00:16:58,459
again we have system creating a file

395
00:16:58,459 --> 00:17:03,000
that Epoch timestamp and C windows

396
00:17:03,000 --> 00:17:05,699
uh some command line execution so CMD

397
00:17:05,699 --> 00:17:09,179
that has a command line of

398
00:17:09,179 --> 00:17:11,880
uh that unique string of characters

399
00:17:11,880 --> 00:17:12,959
there

400
00:17:12,959 --> 00:17:16,380
and then a child process of wmi spawning

401
00:17:16,380 --> 00:17:18,540
CMD uh

402
00:17:18,540 --> 00:17:20,520
kind of one thing to look out for the

403
00:17:20,520 --> 00:17:23,819
child process one if you use wmi legitly

404
00:17:23,819 --> 00:17:26,400
in your environment like that's going to

405
00:17:26,400 --> 00:17:29,640
be the execution chain I think SCCM also

406
00:17:29,640 --> 00:17:32,160
uses this as well then additionally

407
00:17:32,160 --> 00:17:35,520
malicious word macros to

408
00:17:35,520 --> 00:17:37,919
break that parent-child process

409
00:17:37,919 --> 00:17:40,620
relationship also uses this as well so

410
00:17:40,620 --> 00:17:44,000
some things to look out for there

411
00:17:44,520 --> 00:17:47,480
and then dcom similar very similar to

412
00:17:47,480 --> 00:17:51,120
wmi except that uses decom objects it

413
00:17:51,120 --> 00:17:53,820
supports right now MMC shell windows and

414
00:17:53,820 --> 00:17:55,559
shell browser window

415
00:17:55,559 --> 00:17:59,160
and then this is actually based off of

416
00:17:59,160 --> 00:18:01,820
Matt Nelson's work that he's done for

417
00:18:01,820 --> 00:18:05,100
decom lateral movement techniques

418
00:18:05,100 --> 00:18:08,280
uh common dcom if you don't know is

419
00:18:08,280 --> 00:18:11,220
basically middleware uh it acts as a

420
00:18:11,220 --> 00:18:13,740
hidden translation layer between the

421
00:18:13,740 --> 00:18:16,919
operating system and applications to

422
00:18:16,919 --> 00:18:18,980
transmit data basically

423
00:18:18,980 --> 00:18:22,020
I also call it Blackmagic because it

424
00:18:22,020 --> 00:18:24,299
works in mysterious ways

425
00:18:24,299 --> 00:18:26,520
uh also communicates over one three five

426
00:18:26,520 --> 00:18:28,559
and four four five and then yeah for

427
00:18:28,559 --> 00:18:30,120
that initial connection then sends

428
00:18:30,120 --> 00:18:33,600
additional data over a dynamic port

429
00:18:33,600 --> 00:18:37,860
uh similar to wmi it's going to generate

430
00:18:37,860 --> 00:18:42,439
those same three Windows events

431
00:18:43,020 --> 00:18:48,419
and again looks pretty similar to wmi

432
00:18:48,419 --> 00:18:50,100
um

433
00:18:50,100 --> 00:18:53,400
looking at it in Timeline Explorer

434
00:18:53,400 --> 00:18:56,720
and this is what it looks like in

435
00:18:56,720 --> 00:18:58,620
sysmon

436
00:18:58,620 --> 00:19:00,559
so we have

437
00:19:00,559 --> 00:19:03,120
mmc.xc which is super interesting that

438
00:19:03,120 --> 00:19:06,480
it spawns CMD and then again executing

439
00:19:06,480 --> 00:19:07,460
those

440
00:19:07,460 --> 00:19:11,840
enumeration commands to a Mayan hostname

441
00:19:12,360 --> 00:19:14,280
as I was making the slide I was actually

442
00:19:14,280 --> 00:19:17,039
thinking how common is this in

443
00:19:17,039 --> 00:19:19,500
real large environments something to

444
00:19:19,500 --> 00:19:22,799
kind of further investigate

445
00:19:22,799 --> 00:19:25,860
for sysmon events we have file being

446
00:19:25,860 --> 00:19:27,360
created so

447
00:19:27,360 --> 00:19:30,960
similar to uh wmi we have a file being

448
00:19:30,960 --> 00:19:33,840
created in C windows and instead of a

449
00:19:33,840 --> 00:19:36,179
date time stamp it just looks like

450
00:19:36,179 --> 00:19:39,059
a date stamp uh

451
00:19:39,059 --> 00:19:40,940
an Epoch format

452
00:19:40,940 --> 00:19:43,679
and then also the process creation so

453
00:19:43,679 --> 00:19:46,260
MMC spawning CMD

454
00:19:46,260 --> 00:19:48,660
uh with those command lines over there

455
00:19:48,660 --> 00:19:51,440
on the right

456
00:19:56,520 --> 00:19:59,160
and then next we have some pseudo

457
00:19:59,160 --> 00:20:03,000
detection logic so pretty similar to

458
00:20:03,000 --> 00:20:06,660
wmi system creating a file and see

459
00:20:06,660 --> 00:20:08,880
Windows starting with underscore

460
00:20:08,880 --> 00:20:10,740
underscore

461
00:20:10,740 --> 00:20:13,679
command line execution so CMD having

462
00:20:13,679 --> 00:20:17,240
that command line of that unique uh

463
00:20:17,240 --> 00:20:20,220
string there and then the child process

464
00:20:20,220 --> 00:20:23,640
is interesting MMC spawning CMD

465
00:20:23,640 --> 00:20:26,299
as well

466
00:20:26,520 --> 00:20:28,860
all right now that we've covered some

467
00:20:28,860 --> 00:20:32,460
detection methods for understanding how

468
00:20:32,460 --> 00:20:34,559
those various scripts work and what they

469
00:20:34,559 --> 00:20:35,580
look like

470
00:20:35,580 --> 00:20:39,299
we can look back at our alert from

471
00:20:39,299 --> 00:20:42,240
earlier in a previous slide and kind of

472
00:20:42,240 --> 00:20:45,320
start to investigate it

473
00:20:45,679 --> 00:20:48,000
this is something that I always remember

474
00:20:48,000 --> 00:20:49,980
whenever I started investigation I don't

475
00:20:49,980 --> 00:20:52,440
know if anyone has taken Chris Sanders

476
00:20:52,440 --> 00:20:54,179
investigation Theory course but I highly

477
00:20:54,179 --> 00:20:56,640
recommend it so a question well stated

478
00:20:56,640 --> 00:20:59,960
is a problem have solved

479
00:21:00,000 --> 00:21:03,059
so some things to start asking yourself

480
00:21:03,059 --> 00:21:05,700
to help identify scope in such a

481
00:21:05,700 --> 00:21:08,160
situational awareness

482
00:21:08,160 --> 00:21:10,320
um since we just have one alert this is

483
00:21:10,320 --> 00:21:12,720
going to be a just affecting one

484
00:21:12,720 --> 00:21:14,580
endpoint so far

485
00:21:14,580 --> 00:21:18,600
and then since we know the endpoint

486
00:21:18,600 --> 00:21:20,340
we can determine Haze this is actually a

487
00:21:20,340 --> 00:21:22,980
workstation or server

488
00:21:22,980 --> 00:21:25,919
um workstation in this case

489
00:21:25,919 --> 00:21:29,220
and then uh what user or users are

490
00:21:29,220 --> 00:21:30,299
affected

491
00:21:30,299 --> 00:21:33,059
in this case we just have Bob

492
00:21:33,059 --> 00:21:34,880
who's been compromised

493
00:21:34,880 --> 00:21:37,980
can we account for this endpoint do we

494
00:21:37,980 --> 00:21:40,380
know the system owner do we know the

495
00:21:40,380 --> 00:21:43,260
endpoint role Etc

496
00:21:43,260 --> 00:21:45,539
yes but just on the affected endpoint

497
00:21:45,539 --> 00:21:46,700
here

498
00:21:46,700 --> 00:21:50,580
to cover situational awareness where are

499
00:21:50,580 --> 00:21:53,280
we in the incident response process

500
00:21:53,280 --> 00:21:55,679
So currently identification since we've

501
00:21:55,679 --> 00:21:58,140
identified this kind of execution going

502
00:21:58,140 --> 00:21:59,100
on

503
00:21:59,100 --> 00:22:00,480
workstation

504
00:22:00,480 --> 00:22:02,220
but we need to quickly move to

505
00:22:02,220 --> 00:22:05,640
containment and then remediation efforts

506
00:22:05,640 --> 00:22:08,039
to remove the threat

507
00:22:08,039 --> 00:22:11,039
and then how far is the adversary within

508
00:22:11,039 --> 00:22:12,299
their attack objectives so they're

509
00:22:12,299 --> 00:22:13,500
already performing some kind of

510
00:22:13,500 --> 00:22:15,360
execution

511
00:22:15,360 --> 00:22:17,280
there and then from that what kind of

512
00:22:17,280 --> 00:22:20,340
assumptions can I make

513
00:22:20,340 --> 00:22:22,080
initial access has already taken place

514
00:22:22,080 --> 00:22:24,480
somewhere

515
00:22:24,480 --> 00:22:26,760
user credentials is probably probably

516
00:22:26,760 --> 00:22:29,460
been compromised

517
00:22:29,460 --> 00:22:31,620
this could be coming from some

518
00:22:31,620 --> 00:22:35,600
unmonitored or Rogue endpoint

519
00:22:35,760 --> 00:22:37,919
then I made this in package cheat sheet

520
00:22:37,919 --> 00:22:39,720
just uh

521
00:22:39,720 --> 00:22:42,840
quickly to help with triage as well

522
00:22:42,840 --> 00:22:44,700
actually

523
00:22:44,700 --> 00:22:47,280
um so if we look back to this command

524
00:22:47,280 --> 00:22:50,360
line here we notice the epoch timestamp

525
00:22:50,360 --> 00:22:53,880
after you after the admin share

526
00:22:53,880 --> 00:22:56,220
and then looking at the cheat sheet okay

527
00:22:56,220 --> 00:22:58,280
this is actually

528
00:22:58,280 --> 00:23:01,799
wmi we should be looking for a file

529
00:23:01,799 --> 00:23:04,799
being created and see windows and then

530
00:23:04,799 --> 00:23:05,840
also

531
00:23:05,840 --> 00:23:09,600
some event IDs to investigate and system

532
00:23:09,600 --> 00:23:12,120
on event IDs as well if we have those

533
00:23:12,120 --> 00:23:14,360
available

534
00:23:15,179 --> 00:23:16,860
and then also just wanted to include

535
00:23:16,860 --> 00:23:17,820
this

536
00:23:17,820 --> 00:23:20,580
um since this is what each script looks

537
00:23:20,580 --> 00:23:21,659
like

538
00:23:21,659 --> 00:23:23,460
um over the network I just performed

539
00:23:23,460 --> 00:23:25,559
netstat on the remote endpoint and this

540
00:23:25,559 --> 00:23:28,020
was happening on so PS exec actually

541
00:23:28,020 --> 00:23:32,880
creates four connections on 445 SMB exec

542
00:23:32,880 --> 00:23:34,679
only creates one

543
00:23:34,679 --> 00:23:37,620
and four four five and then wmi and dcom

544
00:23:37,620 --> 00:23:40,200
exec kind of look identical so they both

545
00:23:40,200 --> 00:23:42,120
connect initially on one three five and

546
00:23:42,120 --> 00:23:43,260
four four five

547
00:23:43,260 --> 00:23:45,480
and then submit additional data over

548
00:23:45,480 --> 00:23:48,620
that Dynamic port

549
00:23:50,280 --> 00:23:52,620
and then tracing back to initial access

550
00:23:52,620 --> 00:23:54,900
so usually when it's a test

551
00:23:54,900 --> 00:23:56,880
um we don't really think about initial

552
00:23:56,880 --> 00:23:58,799
access because they're already on the

553
00:23:58,799 --> 00:24:01,080
internal Network they've been given an

554
00:24:01,080 --> 00:24:03,780
endpoint and user credentials probably

555
00:24:03,780 --> 00:24:06,299
so initial access is usually an

556
00:24:06,299 --> 00:24:07,500
afterthought

557
00:24:07,500 --> 00:24:10,679
but when it's adversary use

558
00:24:10,679 --> 00:24:13,260
we kind of panic and try to figure this

559
00:24:13,260 --> 00:24:16,200
out quickly especially if it's on an

560
00:24:16,200 --> 00:24:18,179
unmonitored endpoint

561
00:24:18,179 --> 00:24:19,679
so I like to ask how did this happen

562
00:24:19,679 --> 00:24:21,179
where did it come from

563
00:24:21,179 --> 00:24:22,440
uh

564
00:24:22,440 --> 00:24:24,960
in from my experience I've usually seen

565
00:24:24,960 --> 00:24:27,840
this come from a rogue endpoint usually

566
00:24:27,840 --> 00:24:30,419
coming from some

567
00:24:30,419 --> 00:24:32,880
VPN service getting popped or sutrix

568
00:24:32,880 --> 00:24:34,080
Gateway

569
00:24:34,080 --> 00:24:37,080
or in a rare case there was a VoIP my

570
00:24:37,080 --> 00:24:40,080
tail box that got popped and it was

571
00:24:40,080 --> 00:24:41,640
coming from that which was pretty

572
00:24:41,640 --> 00:24:43,700
interesting

573
00:24:43,700 --> 00:24:46,260
so then that leads us to think about

574
00:24:46,260 --> 00:24:48,179
other internet-facing services so that's

575
00:24:48,179 --> 00:24:50,340
why I put those three techniques there

576
00:24:50,340 --> 00:24:52,559
for initial access external remote

577
00:24:52,559 --> 00:24:53,640
services

578
00:24:53,640 --> 00:24:56,880
uh using valid accounts

579
00:24:56,880 --> 00:24:59,760
um and then maybe exploitation of

580
00:24:59,760 --> 00:25:02,100
some public facing or internet-facing

581
00:25:02,100 --> 00:25:05,640
web application and I thought this uh

582
00:25:05,640 --> 00:25:07,620
screenshot here was interesting it's

583
00:25:07,620 --> 00:25:08,760
just showing

584
00:25:08,760 --> 00:25:11,720
the most common or top cves

585
00:25:11,720 --> 00:25:14,520
exploited by Chinese apt groups since

586
00:25:14,520 --> 00:25:16,080
2020

587
00:25:16,080 --> 00:25:17,940
a few of those are VPN or Citrix

588
00:25:17,940 --> 00:25:20,280
services and then half of them I think

589
00:25:20,280 --> 00:25:22,980
are remote code execution and then

590
00:25:22,980 --> 00:25:24,299
everyone's favorite is at the top block

591
00:25:24,299 --> 00:25:25,799
for Jay

592
00:25:25,799 --> 00:25:27,779
uh so I thought that was interesting

593
00:25:27,779 --> 00:25:29,700
there and something to

594
00:25:29,700 --> 00:25:31,860
to always think about

595
00:25:31,860 --> 00:25:34,140
uh future considerations don't use

596
00:25:34,140 --> 00:25:35,940
active directory

597
00:25:35,940 --> 00:25:39,140
just use sneakernet

598
00:25:40,679 --> 00:25:44,520
you you of course use active directory

599
00:25:44,520 --> 00:25:47,340
but some things to think about uh

600
00:25:47,340 --> 00:25:48,960
there's this really great mandian

601
00:25:48,960 --> 00:25:52,200
article where they go over a lot of

602
00:25:52,200 --> 00:25:54,539
great advice so some things that they

603
00:25:54,539 --> 00:25:56,159
talk about are segmentation and

604
00:25:56,159 --> 00:25:58,559
disabling admin and hidden shares that's

605
00:25:58,559 --> 00:25:59,720
a typo

606
00:25:59,720 --> 00:26:04,020
uh and then further we have uh if you're

607
00:26:04,020 --> 00:26:06,120
familiar with atomic red team there's

608
00:26:06,120 --> 00:26:07,679
two tests in there that you can use if

609
00:26:07,679 --> 00:26:09,600
you don't want to spin up

610
00:26:09,600 --> 00:26:12,120
and pack it yourself

611
00:26:12,120 --> 00:26:16,020
so segmentation so when we think about

612
00:26:16,020 --> 00:26:17,940
um our architecture workstation or

613
00:26:17,940 --> 00:26:20,840
workstation and then workstation to any

614
00:26:20,840 --> 00:26:24,900
non-dc or non-file server

615
00:26:24,900 --> 00:26:28,260
we can consider uh blocking incoming

616
00:26:28,260 --> 00:26:31,760
connections from SMB or RPC

617
00:26:31,760 --> 00:26:34,200
so that's pretty much what impact it

618
00:26:34,200 --> 00:26:36,419
uses earlier this in this case these

619
00:26:36,419 --> 00:26:38,360
these four scripts

620
00:26:38,360 --> 00:26:42,179
additionally we can think about RDP if

621
00:26:42,179 --> 00:26:44,820
we use Windows Remote Management as well

622
00:26:44,820 --> 00:26:49,919
and then those Dynamic ports for wmi

623
00:26:49,919 --> 00:26:51,600
again this is just a consideration

624
00:26:51,600 --> 00:26:53,179
something to think about

625
00:26:53,179 --> 00:26:55,559
you could legitimately break something

626
00:26:55,559 --> 00:26:57,120
if

627
00:26:57,120 --> 00:26:59,039
you just block out these outright

628
00:26:59,039 --> 00:27:01,879
without testing so

629
00:27:02,100 --> 00:27:03,900
and then disabling admin or hidden

630
00:27:03,900 --> 00:27:05,279
shares

631
00:27:05,279 --> 00:27:08,220
so these are some common uh

632
00:27:08,220 --> 00:27:10,559
admin or hidden shares here listed at

633
00:27:10,559 --> 00:27:14,640
impact it usually abuses the admin share

634
00:27:14,640 --> 00:27:15,299
um

635
00:27:15,299 --> 00:27:16,740
again

636
00:27:16,740 --> 00:27:19,620
if you use like PS exec legitimately in

637
00:27:19,620 --> 00:27:20,820
your environment this actually might

638
00:27:20,820 --> 00:27:22,799
break things so something to consider

639
00:27:22,799 --> 00:27:25,380
there always test don't just Implement

640
00:27:25,380 --> 00:27:27,960
these without testing uh

641
00:27:27,960 --> 00:27:29,520
that's the registry key for both

642
00:27:29,520 --> 00:27:31,980
workstation and servers there you could

643
00:27:31,980 --> 00:27:35,400
also create a service to disable these

644
00:27:35,400 --> 00:27:37,919
or use GPO

645
00:27:37,919 --> 00:27:41,159
and then lastly we have two Atomic tests

646
00:27:41,159 --> 00:27:42,960
from from the art repo

647
00:27:42,960 --> 00:27:46,080
that you can test with ones for

648
00:27:46,080 --> 00:27:49,020
executing uh commands out of the local

649
00:27:49,020 --> 00:27:53,220
admin share and also wmi execution

650
00:27:53,220 --> 00:27:56,779
um for remote execution there

651
00:27:58,260 --> 00:28:02,299
that's it any questions

652
00:28:15,740 --> 00:28:19,159
super quick question

653
00:28:32,640 --> 00:28:35,580
that's

654
00:28:35,580 --> 00:28:37,939
yeah

655
00:28:45,000 --> 00:28:47,760
I think so but that's I mean that's a

656
00:28:47,760 --> 00:28:49,140
really good question I haven't really

657
00:28:49,140 --> 00:28:51,179
thought about that yet

658
00:28:51,179 --> 00:28:55,440
um but that kind of removes the scenario

659
00:28:55,440 --> 00:28:57,659
that you'd commonly use in packet for

660
00:28:57,659 --> 00:28:59,400
right you'd use it on a domain

661
00:28:59,400 --> 00:29:02,340
environment to move laterally quickly

662
00:29:02,340 --> 00:29:04,140
execute code

663
00:29:04,140 --> 00:29:06,960
um I would think so but I've got to have

664
00:29:06,960 --> 00:29:08,820
to do testing but that's a good

665
00:29:08,820 --> 00:29:12,360
consideration a great question

666
00:29:12,360 --> 00:29:13,220
um

667
00:29:13,220 --> 00:29:15,419
on uh

668
00:29:15,419 --> 00:29:17,340
women being deprecated I think earlier

669
00:29:17,340 --> 00:29:20,100
this year did you find shops that have

670
00:29:20,100 --> 00:29:22,320
it still around

671
00:29:22,320 --> 00:29:26,779
and does impact it do anything with

672
00:29:28,020 --> 00:29:28,820
um

673
00:29:28,820 --> 00:29:32,279
I it's another good question I haven't

674
00:29:32,279 --> 00:29:35,159
really noticed that or seen that

675
00:29:35,159 --> 00:29:36,000
um

676
00:29:36,000 --> 00:29:38,279
I think the two main scripts I've seen

677
00:29:38,279 --> 00:29:43,580
use are SMB and wmi exec but

678
00:29:43,860 --> 00:29:46,679
thank you yeah I I've seen it still

679
00:29:46,679 --> 00:29:48,840
working in a test scenario

680
00:29:48,840 --> 00:29:51,720
um so I haven't really seen like any

681
00:29:51,720 --> 00:29:54,799
issues with it not working

682
00:29:55,200 --> 00:29:59,179
does that help yeah okay cool

683
00:30:00,419 --> 00:30:03,360
uh my question was if uh we'd like to

684
00:30:03,360 --> 00:30:05,460
test out uh the material that you

685
00:30:05,460 --> 00:30:07,020
presented here ourselves what would be

686
00:30:07,020 --> 00:30:09,240
the best place to start you mentioned a

687
00:30:09,240 --> 00:30:11,100
few resources there I didn't get them

688
00:30:11,100 --> 00:30:12,480
all written down so I don't know if this

689
00:30:12,480 --> 00:30:14,299
slide deck is available

690
00:30:14,299 --> 00:30:18,000
shared okay they can share the side deck

691
00:30:18,000 --> 00:30:19,980
if you feel like spinning up a Windows

692
00:30:19,980 --> 00:30:21,899
domain environment you could do it that

693
00:30:21,899 --> 00:30:22,640
way

694
00:30:22,640 --> 00:30:25,620
or did like I did just test it with the

695
00:30:25,620 --> 00:30:27,419
local Windows VM

696
00:30:27,419 --> 00:30:29,520
um and then just run and pack it from

697
00:30:29,520 --> 00:30:32,399
like Cali or download the repo yourself

698
00:30:32,399 --> 00:30:36,539
does that help answer your question cool

699
00:30:41,039 --> 00:30:42,960
yeah my question

700
00:30:42,960 --> 00:30:45,539
um you you had a list of iocs for the

701
00:30:45,539 --> 00:30:48,480
the various exploits

702
00:30:48,480 --> 00:30:51,240
um how have you

703
00:30:51,240 --> 00:30:53,880
implemented it into a live environment

704
00:30:53,880 --> 00:30:57,179
as I'm sure you have but how noisy have

705
00:30:57,179 --> 00:30:59,039
you seen

706
00:30:59,039 --> 00:31:02,100
this turning on these alerts

707
00:31:02,100 --> 00:31:05,159
in conjunction with uh legitimate events

708
00:31:05,159 --> 00:31:06,960
and and I know that subjective per

709
00:31:06,960 --> 00:31:09,600
environment but in general what have you

710
00:31:09,600 --> 00:31:11,039
observed are you talking about the

711
00:31:11,039 --> 00:31:13,559
detection logic yes yeah

712
00:31:13,559 --> 00:31:14,880
um

713
00:31:14,880 --> 00:31:16,740
so obviously

714
00:31:16,740 --> 00:31:19,140
you want to tune and test uh that

715
00:31:19,140 --> 00:31:20,640
detection logic and every every

716
00:31:20,640 --> 00:31:23,159
environment's different and there's also

717
00:31:23,159 --> 00:31:26,039
since impacket is open source that that

718
00:31:26,039 --> 00:31:28,500
code has been reused for like volt

719
00:31:28,500 --> 00:31:31,320
scanners or other legitimate tools that

720
00:31:31,320 --> 00:31:33,539
kind of inventory like ad environments

721
00:31:33,539 --> 00:31:36,659
there's a tool called block 64 that

722
00:31:36,659 --> 00:31:39,419
actually does this

723
00:31:39,419 --> 00:31:41,179
um so that's something to look out for

724
00:31:41,179 --> 00:31:44,880
there as well it can be really noisy but

725
00:31:44,880 --> 00:31:47,100
again like from a vendor perspective

726
00:31:47,100 --> 00:31:49,559
it's hard to know that you know internal

727
00:31:49,559 --> 00:31:52,020
environment context but if you know your

728
00:31:52,020 --> 00:31:53,520
environment pretty well like you use PX

729
00:31:53,520 --> 00:31:56,419
exact legitimately or wmi to administer

730
00:31:56,419 --> 00:31:59,220
things remotely

731
00:31:59,220 --> 00:32:00,960
um that's additional information and

732
00:32:00,960 --> 00:32:03,659
insight that you have to say hey this is

733
00:32:03,659 --> 00:32:05,700
actually normal

734
00:32:05,700 --> 00:32:08,279
um so it would take some tuning and

735
00:32:08,279 --> 00:32:12,120
baselining to initially see like hey how

736
00:32:12,120 --> 00:32:14,279
often is this occurring in my in my

737
00:32:14,279 --> 00:32:16,620
environment and then from there Trace

738
00:32:16,620 --> 00:32:18,600
that back to either either if it's legit

739
00:32:18,600 --> 00:32:21,120
or not that's how I'd kind of

740
00:32:21,120 --> 00:32:23,220
uh handle that does that help answer

741
00:32:23,220 --> 00:32:25,940
your question cool

742
00:32:28,380 --> 00:32:32,000
thanks everyone appreciate it

