1
00:00:02,100 --> 00:00:05,700
welcome hello thank you for coming today

2
00:00:05,700 --> 00:00:08,160
my name is Taylor Wilson and I'll be

3
00:00:08,160 --> 00:00:10,800
talking a little bit about building an

4
00:00:10,800 --> 00:00:13,940
auto remediation platform for the cloud

5
00:00:13,940 --> 00:00:17,220
subtitled take advantage of all your

6
00:00:17,220 --> 00:00:19,740
cspms

7
00:00:19,740 --> 00:00:22,380
real quick just a minute about who I am

8
00:00:22,380 --> 00:00:24,560
again my name is Taylor Wilson

9
00:00:24,560 --> 00:00:28,140
I got a degree from UVU in technology

10
00:00:28,140 --> 00:00:30,960
management I think it's a sort of a

11
00:00:30,960 --> 00:00:32,340
sleeper degree right it's kind of a

12
00:00:32,340 --> 00:00:34,500
hidden degree it's a great fit for a lot

13
00:00:34,500 --> 00:00:37,340
of us in information security

14
00:00:37,340 --> 00:00:42,200
it's cross between business and I.T

15
00:00:42,200 --> 00:00:44,640
with a little bit more in project

16
00:00:44,640 --> 00:00:46,079
management than like an information

17
00:00:46,079 --> 00:00:49,860
systems degree career-wise I did CIS

18
00:00:49,860 --> 00:00:52,079
admin work for a few years security

19
00:00:52,079 --> 00:00:54,840
focused I was the new guy on the team at

20
00:00:54,840 --> 00:00:56,699
the time and they're like hey there's

21
00:00:56,699 --> 00:00:58,320
this new thing it's called security why

22
00:00:58,320 --> 00:00:59,699
don't you go ahead and learn that for us

23
00:00:59,699 --> 00:01:02,160
so we don't have to and that's how I

24
00:01:02,160 --> 00:01:04,519
ended up in the security side of things

25
00:01:04,519 --> 00:01:06,900
from the security side last six years

26
00:01:06,900 --> 00:01:08,220
I've been I've been doing just security

27
00:01:08,220 --> 00:01:10,880
full-time and Cloud security as well

28
00:01:10,880 --> 00:01:13,500
that's as the cloud security engineer or

29
00:01:13,500 --> 00:01:15,780
architect are now now director of

30
00:01:15,780 --> 00:01:17,580
engineering and architecture at NuSkin

31
00:01:17,580 --> 00:01:20,420
just down the street here

32
00:01:20,820 --> 00:01:24,000
um disclaimer I'm definitely AWS biased

33
00:01:24,000 --> 00:01:26,040
just because that's what I use the most

34
00:01:26,040 --> 00:01:28,820
and it's what lives in my brain right

35
00:01:28,820 --> 00:01:31,619
all of the terms that I'll use has

36
00:01:31,619 --> 00:01:34,460
specific examples specific application

37
00:01:34,460 --> 00:01:38,579
are AWS focused but they work across the

38
00:01:38,579 --> 00:01:40,079
the principles the same everywhere

39
00:01:40,079 --> 00:01:41,759
including any other Cloud that you use

40
00:01:41,759 --> 00:01:45,140
that isn't listed here right

41
00:01:45,600 --> 00:01:48,000
um let's see thesis right what I'm

42
00:01:48,000 --> 00:01:50,100
talking about I say thesis because I

43
00:01:50,100 --> 00:01:51,540
think it makes me sound smarter than I

44
00:01:51,540 --> 00:01:54,659
am but it's get value from all your cspm

45
00:01:54,659 --> 00:01:57,000
tools by creating your own automated

46
00:01:57,000 --> 00:01:59,579
Central remediation system

47
00:01:59,579 --> 00:02:01,799
it's easier than it sounds right and

48
00:02:01,799 --> 00:02:02,880
that's what we're talking about today

49
00:02:02,880 --> 00:02:05,759
it's it's pretty easy to extract value

50
00:02:05,759 --> 00:02:08,639
from all these sources of cloud security

51
00:02:08,639 --> 00:02:10,860
posture management that you probably

52
00:02:10,860 --> 00:02:12,540
already have today

53
00:02:12,540 --> 00:02:15,180
by show of hands real quick who has

54
00:02:15,180 --> 00:02:17,580
Cloud workloads deployed at their other

55
00:02:17,580 --> 00:02:20,160
company or personally

56
00:02:20,160 --> 00:02:22,319
anyone who doesn't is fooling yourself

57
00:02:22,319 --> 00:02:25,379
because you do everyone does

58
00:02:25,379 --> 00:02:27,300
um real quick infosec control types

59
00:02:27,300 --> 00:02:29,580
right I categorize a lot of these into

60
00:02:29,580 --> 00:02:31,500
just two simple buckets there are

61
00:02:31,500 --> 00:02:34,319
preventative controls and detective

62
00:02:34,319 --> 00:02:36,720
controls preventative of course being

63
00:02:36,720 --> 00:02:39,360
you prevent a in this case I'll be

64
00:02:39,360 --> 00:02:41,640
talking about a bad Cloud configuration

65
00:02:41,640 --> 00:02:44,700
for being pushed out through IAM at the

66
00:02:44,700 --> 00:02:46,019
Indian access management right people

67
00:02:46,019 --> 00:02:47,760
only have permission to do exactly what

68
00:02:47,760 --> 00:02:48,959
you want them to the way you want them

69
00:02:48,959 --> 00:02:51,360
to do it service control policies or

70
00:02:51,360 --> 00:02:53,099
sort of settings you can set per Cloud

71
00:02:53,099 --> 00:02:54,900
account to say you know we want things

72
00:02:54,900 --> 00:02:58,019
done this way or through pre-deployment

73
00:02:58,019 --> 00:03:00,780
infrastructure as code scans right in a

74
00:03:00,780 --> 00:03:02,819
CI job you scan the things this this

75
00:03:02,819 --> 00:03:04,800
looks good it's good to go on right and

76
00:03:04,800 --> 00:03:07,340
then detective controls you deploy it

77
00:03:07,340 --> 00:03:10,680
then you assess it and say is this does

78
00:03:10,680 --> 00:03:13,019
this meet my policy or not and those

79
00:03:13,019 --> 00:03:15,120
assessments you know come in as alerts

80
00:03:15,120 --> 00:03:17,459
or risk which you then remediate either

81
00:03:17,459 --> 00:03:21,360
manually or hopefully automatically

82
00:03:21,360 --> 00:03:23,159
um which would I rather have of course

83
00:03:23,159 --> 00:03:25,800
preventative and a perfect world we

84
00:03:25,800 --> 00:03:27,540
would only need preventative controls

85
00:03:27,540 --> 00:03:30,780
every workload we would be deployed with

86
00:03:30,780 --> 00:03:33,420
zero misconfiguration there'd be zero

87
00:03:33,420 --> 00:03:35,340
vulnerabilities as of when it's deployed

88
00:03:35,340 --> 00:03:38,040
or ever in the future right of course

89
00:03:38,040 --> 00:03:39,540
that's we all know that's not what

90
00:03:39,540 --> 00:03:40,860
really happens

91
00:03:40,860 --> 00:03:43,260
um but real quick before we get into

92
00:03:43,260 --> 00:03:45,659
preventative versus Detective

93
00:03:45,659 --> 00:03:49,620
why do companies use cloud right it's

94
00:03:49,620 --> 00:03:51,120
like the thing everyone's doing it these

95
00:03:51,120 --> 00:03:53,400
days I know I think it's important that

96
00:03:53,400 --> 00:03:55,260
we understand as Information Security

97
00:03:55,260 --> 00:03:57,360
Professionals

98
00:03:57,360 --> 00:04:00,480
um the business value the cloud brings

99
00:04:00,480 --> 00:04:04,140
um you're able to scale your costs with

100
00:04:04,140 --> 00:04:06,299
Revenue right you say here's a service

101
00:04:06,299 --> 00:04:09,239
it's paper for use as more people use it

102
00:04:09,239 --> 00:04:11,159
you're making more money your costs go

103
00:04:11,159 --> 00:04:12,900
up with your Revenue right and they go

104
00:04:12,900 --> 00:04:15,060
down those Revenue drops

105
00:04:15,060 --> 00:04:16,620
um you can quickly onboard new

106
00:04:16,620 --> 00:04:19,738
technology you can participate in more

107
00:04:19,738 --> 00:04:23,000
rapid Innovation I think of for example

108
00:04:23,000 --> 00:04:25,440
recently we had some devs say Hey you

109
00:04:25,440 --> 00:04:27,060
know this Kafka thing sounds great let's

110
00:04:27,060 --> 00:04:29,340
check it out for a little bit in AWS

111
00:04:29,340 --> 00:04:31,380
again that's just my default mindset but

112
00:04:31,380 --> 00:04:34,259
you go in manage service for it deploy

113
00:04:34,259 --> 00:04:35,759
it you don't have to worry about the

114
00:04:35,759 --> 00:04:37,699
operating system the hardware

115
00:04:37,699 --> 00:04:40,740
all of your access patterns into any new

116
00:04:40,740 --> 00:04:42,479
technology that's provided by a cloud

117
00:04:42,479 --> 00:04:44,759
provider is a known access pattern right

118
00:04:44,759 --> 00:04:47,699
it's security groups or IEM it just

119
00:04:47,699 --> 00:04:49,500
really lowers the barrier of Entry you

120
00:04:49,500 --> 00:04:51,360
know two two three days later they're

121
00:04:51,360 --> 00:04:52,500
done figuring out what it's all about

122
00:04:52,500 --> 00:04:54,660
they turn it off costs like you know two

123
00:04:54,660 --> 00:04:56,340
or three dollars

124
00:04:56,340 --> 00:04:58,740
um that's that's real business value

125
00:04:58,740 --> 00:05:01,860
and then developer efficiency I think we

126
00:05:01,860 --> 00:05:04,620
often underestimate the the value of

127
00:05:04,620 --> 00:05:08,340
having devs close to their deployments

128
00:05:08,340 --> 00:05:09,180
um

129
00:05:09,180 --> 00:05:10,820
their deployments are simple

130
00:05:10,820 --> 00:05:12,960
infrastructure is code template you push

131
00:05:12,960 --> 00:05:14,580
it out and it's there and it's deployed

132
00:05:14,580 --> 00:05:16,199
a few minutes later

133
00:05:16,199 --> 00:05:16,860
um

134
00:05:16,860 --> 00:05:19,800
I think devops is a lot like zero trust

135
00:05:19,800 --> 00:05:23,160
which in my in my opinion is a journey

136
00:05:23,160 --> 00:05:25,500
not a final destination at least not

137
00:05:25,500 --> 00:05:27,960
usually you're all there's always a give

138
00:05:27,960 --> 00:05:29,520
and take a push and pull a little bit of

139
00:05:29,520 --> 00:05:32,580
balance that goes into like what devops

140
00:05:32,580 --> 00:05:35,400
means for you so with that in mind let's

141
00:05:35,400 --> 00:05:39,199
Circle back to our two control types

142
00:05:39,199 --> 00:05:41,460
preventative and detective in the real

143
00:05:41,460 --> 00:05:43,680
world there will always need to be a

144
00:05:43,680 --> 00:05:47,100
balanced approach you prevent the worst

145
00:05:47,100 --> 00:05:49,199
things from happening

146
00:05:49,199 --> 00:05:51,240
but in order to get some of that value

147
00:05:51,240 --> 00:05:53,639
from the cloud for your company you need

148
00:05:53,639 --> 00:05:55,500
to also have detective controls there

149
00:05:55,500 --> 00:05:57,539
are some things you cannot prevent and

150
00:05:57,539 --> 00:05:59,699
some things that you'll just have to you

151
00:05:59,699 --> 00:06:01,320
know detect and respond to so prevent

152
00:06:01,320 --> 00:06:03,120
the worst things respond to everything

153
00:06:03,120 --> 00:06:05,220
else

154
00:06:05,220 --> 00:06:07,020
cspm I've mentioned it a few times

155
00:06:07,020 --> 00:06:08,699
already let's dig a little bit deeper

156
00:06:08,699 --> 00:06:12,240
into what that actually is uh in infosec

157
00:06:12,240 --> 00:06:13,979
we love acronyms right and it's just

158
00:06:13,979 --> 00:06:16,080
like everything's abbreviated everywhere

159
00:06:16,080 --> 00:06:19,440
what it is cloud security posture

160
00:06:19,440 --> 00:06:22,020
management it's a way to identify risk

161
00:06:22,020 --> 00:06:24,000
in the cloud

162
00:06:24,000 --> 00:06:27,000
of cloud configuration right it's the

163
00:06:27,000 --> 00:06:28,620
configuration of your Cloud control

164
00:06:28,620 --> 00:06:31,940
plane it's a configuration of resources

165
00:06:31,940 --> 00:06:34,800
as seen by your cloud provider right

166
00:06:34,800 --> 00:06:37,080
it's it's anything that you could get to

167
00:06:37,080 --> 00:06:40,620
through the AWS web console for example

168
00:06:40,620 --> 00:06:44,940
so what it isn't is like vulnerability

169
00:06:44,940 --> 00:06:47,039
scanning of like your operating systems

170
00:06:47,039 --> 00:06:49,380
deployed in the cloud it's not EDR and

171
00:06:49,380 --> 00:06:51,660
point detection it's not application

172
00:06:51,660 --> 00:06:53,699
security although there's a case to be

173
00:06:53,699 --> 00:06:56,340
made that application security and Cloud

174
00:06:56,340 --> 00:06:59,100
security are extremely related and I've

175
00:06:59,100 --> 00:07:02,340
got another talk about that it sure is

176
00:07:02,340 --> 00:07:04,979
but cspn as a definition

177
00:07:04,979 --> 00:07:07,620
Cloud security that it will identify

178
00:07:07,620 --> 00:07:10,919
misconfigurations let you know about it

179
00:07:10,919 --> 00:07:13,020
so I'm a very Hands-On practical learner

180
00:07:13,020 --> 00:07:15,180
so this is what helps me right here are

181
00:07:15,180 --> 00:07:16,860
some example findings that you might get

182
00:07:16,860 --> 00:07:18,720
out of a cspm tool

183
00:07:18,720 --> 00:07:20,599
Amis that are shared with an account

184
00:07:20,599 --> 00:07:22,919
that isn't yours

185
00:07:22,919 --> 00:07:25,440
right Ami being like a golden image of a

186
00:07:25,440 --> 00:07:28,020
virtual machine in the cloud IEM role

187
00:07:28,020 --> 00:07:30,840
with overprivileged policy attached you

188
00:07:30,840 --> 00:07:33,300
know this role looks like it can do more

189
00:07:33,300 --> 00:07:35,120
than it should

190
00:07:35,120 --> 00:07:38,699
or an unencrypted RDS instance just a

191
00:07:38,699 --> 00:07:40,620
database right in the cloud

192
00:07:40,620 --> 00:07:43,080
so let's look at how we would prevent or

193
00:07:43,080 --> 00:07:45,000
detect these and sort of the level of

194
00:07:45,000 --> 00:07:47,160
effort required to prevent versus detect

195
00:07:47,160 --> 00:07:49,319
these things now I did handpick these

196
00:07:49,319 --> 00:07:51,500
examples to prove my point of course but

197
00:07:51,500 --> 00:07:53,940
an am I shared with an account that

198
00:07:53,940 --> 00:07:57,960
isn't yours it is hard to prevent you

199
00:07:57,960 --> 00:07:59,699
would in order to prevent that you would

200
00:07:59,699 --> 00:08:02,520
have to maintain a list of all of your

201
00:08:02,520 --> 00:08:04,880
approved accounts you can share with

202
00:08:04,880 --> 00:08:08,759
in every single policy in every single

203
00:08:08,759 --> 00:08:10,919
cloud account you have

204
00:08:10,919 --> 00:08:13,139
maybe it's doable if you have just a

205
00:08:13,139 --> 00:08:15,419
couple accounts no big deal and just a

206
00:08:15,419 --> 00:08:17,400
few policies and roles but when you

207
00:08:17,400 --> 00:08:18,900
start operating at any kind of scale

208
00:08:18,900 --> 00:08:21,599
that that won't work right I mean we

209
00:08:21,599 --> 00:08:23,400
operated a relatively small scale and

210
00:08:23,400 --> 00:08:25,740
AWS and have 50 Plus accounts that

211
00:08:25,740 --> 00:08:28,440
constantly churn a little bit right

212
00:08:28,440 --> 00:08:29,220
um

213
00:08:29,220 --> 00:08:32,159
the in example a role with too many

214
00:08:32,159 --> 00:08:33,479
permissions

215
00:08:33,479 --> 00:08:37,140
you could say centralize all IEM roles

216
00:08:37,140 --> 00:08:38,940
with one single team who knows exactly

217
00:08:38,940 --> 00:08:40,919
what they're doing and will always honor

218
00:08:40,919 --> 00:08:42,839
the principle of least privilege

219
00:08:42,839 --> 00:08:43,919
then you're slowing down your

220
00:08:43,919 --> 00:08:45,779
deployments not getting value from the

221
00:08:45,779 --> 00:08:46,620
cloud

222
00:08:46,620 --> 00:08:48,899
um you could try service or permission

223
00:08:48,899 --> 00:08:51,959
boundaries in AWS for example

224
00:08:51,959 --> 00:08:54,000
that would require a change to every

225
00:08:54,000 --> 00:08:55,920
single deployment that goes into the

226
00:08:55,920 --> 00:08:58,200
cloud which is you know we have

227
00:08:58,200 --> 00:09:00,000
thousands and thousands of workloads

228
00:09:00,000 --> 00:09:02,339
running it would slow down be hard it'd

229
00:09:02,339 --> 00:09:04,019
be hard to hard to prevent easy to

230
00:09:04,019 --> 00:09:05,160
detect

231
00:09:05,160 --> 00:09:07,320
unencrypted RDS instances same thing

232
00:09:07,320 --> 00:09:10,680
right very hard to prevent through like

233
00:09:10,680 --> 00:09:13,140
IEM conditions or service control

234
00:09:13,140 --> 00:09:15,959
policies easy to just see that it's been

235
00:09:15,959 --> 00:09:18,779
done wrong go in and fix it so that is

236
00:09:18,779 --> 00:09:22,200
cspm is the source of information that

237
00:09:22,200 --> 00:09:24,720
we can use to respond to security

238
00:09:24,720 --> 00:09:27,060
misconfigurations

239
00:09:27,060 --> 00:09:29,220
now back in the olden days right when I

240
00:09:29,220 --> 00:09:30,720
first started doing Cloud which was just

241
00:09:30,720 --> 00:09:32,160
six years ago

242
00:09:32,160 --> 00:09:33,140
um

243
00:09:33,140 --> 00:09:36,120
we decided hey there's a new space it's

244
00:09:36,120 --> 00:09:37,740
called Cloud security posture management

245
00:09:37,740 --> 00:09:40,200
we're in the cloud let's see what's out

246
00:09:40,200 --> 00:09:43,019
there used to go out look for cspm

247
00:09:43,019 --> 00:09:45,420
Solutions cspm tools

248
00:09:45,420 --> 00:09:47,760
do a vendor selection proof a concept

249
00:09:47,760 --> 00:09:48,480
Etc

250
00:09:48,480 --> 00:09:51,660
buy something implement it good to go

251
00:09:51,660 --> 00:09:53,760
today

252
00:09:53,760 --> 00:09:57,480
every single security adjacent Cloud

253
00:09:57,480 --> 00:10:00,120
adjacent tool that's out there has some

254
00:10:00,120 --> 00:10:02,700
sort of for free will throw in some cspn

255
00:10:02,700 --> 00:10:05,040
type findings right they're they're all

256
00:10:05,040 --> 00:10:06,540
over the place I mean I was really

257
00:10:06,540 --> 00:10:09,660
surprised when like my my APM

258
00:10:09,660 --> 00:10:11,580
application performance monitoring tool

259
00:10:11,580 --> 00:10:13,740
it's like hey plus here's all the stuff

260
00:10:13,740 --> 00:10:15,720
about your Cloud configurations like

261
00:10:15,720 --> 00:10:17,760
well there are some good there's some

262
00:10:17,760 --> 00:10:18,899
good data there there's some good

263
00:10:18,899 --> 00:10:20,160
findings

264
00:10:20,160 --> 00:10:20,880
um

265
00:10:20,880 --> 00:10:23,820
EDR tools especially have those these

266
00:10:23,820 --> 00:10:26,580
days API security it's like some of my

267
00:10:26,580 --> 00:10:28,680
network stuff is surprising

268
00:10:28,680 --> 00:10:31,380
Network like nids tool it's like hey and

269
00:10:31,380 --> 00:10:33,000
since we're here in your Cloud looking

270
00:10:33,000 --> 00:10:34,620
at Network stuff we'll look around a

271
00:10:34,620 --> 00:10:35,700
little bit more and give you some good

272
00:10:35,700 --> 00:10:38,060
cspn findings so what we're talking

273
00:10:38,060 --> 00:10:41,100
cspms they really are a commodity

274
00:10:41,100 --> 00:10:42,779
they're they're something that

275
00:10:42,779 --> 00:10:44,820
everything has there's all this valuable

276
00:10:44,820 --> 00:10:48,000
data out there and my thesis today is

277
00:10:48,000 --> 00:10:50,820
that we can take advantage extract value

278
00:10:50,820 --> 00:10:53,519
from all of these Solutions

279
00:10:53,519 --> 00:10:56,220
easier than you think it might be right

280
00:10:56,220 --> 00:10:58,500
um so how do we get value from all these

281
00:10:58,500 --> 00:10:59,519
things

282
00:10:59,519 --> 00:11:02,160
real quick what a cspm standard workflow

283
00:11:02,160 --> 00:11:03,899
might be this is basically incident

284
00:11:03,899 --> 00:11:05,940
response in a lot of ways you get an

285
00:11:05,940 --> 00:11:06,839
alert

286
00:11:06,839 --> 00:11:10,320
you determine is is that resource

287
00:11:10,320 --> 00:11:13,500
allowed to be an exception to the policy

288
00:11:13,500 --> 00:11:15,540
there will always be exceptions as much

289
00:11:15,540 --> 00:11:17,579
as we might wish there weren't but it

290
00:11:17,579 --> 00:11:19,320
does make sense that there are right for

291
00:11:19,320 --> 00:11:20,339
example

292
00:11:20,339 --> 00:11:23,640
um we have some sandbox and lab AWS

293
00:11:23,640 --> 00:11:25,980
accounts back to the RDS encrypted

294
00:11:25,980 --> 00:11:29,640
database alert from from earlier

295
00:11:29,640 --> 00:11:32,100
it costs more money to have encrypted

296
00:11:32,100 --> 00:11:34,560
RDS instances right and in our lab

297
00:11:34,560 --> 00:11:36,300
accounts we have pretty strong

298
00:11:36,300 --> 00:11:38,940
guarantees of no personal data in there

299
00:11:38,940 --> 00:11:41,820
or sensitive data in those accounts and

300
00:11:41,820 --> 00:11:43,380
so let's just save a few bucks and I'll

301
00:11:43,380 --> 00:11:44,940
you know allow our sandbox and lab

302
00:11:44,940 --> 00:11:48,000
accounts to not adhere to that rule so

303
00:11:48,000 --> 00:11:49,440
you'll always have an allow this to

304
00:11:49,440 --> 00:11:50,579
check

305
00:11:50,579 --> 00:11:52,920
then you'll do your response right

306
00:11:52,920 --> 00:11:55,320
maybe you you know that's the stick's a

307
00:11:55,320 --> 00:11:56,579
problem whatever you define that to be

308
00:11:56,579 --> 00:11:59,100
fix the problem and then I'm a huge

309
00:11:59,100 --> 00:12:02,700
advocate for training right identify who

310
00:12:02,700 --> 00:12:04,620
made the configuration that was flagged

311
00:12:04,620 --> 00:12:07,500
as being insecure and let them know how

312
00:12:07,500 --> 00:12:09,180
they can avoid that problem in the

313
00:12:09,180 --> 00:12:11,640
future right so I'll talk more about

314
00:12:11,640 --> 00:12:14,459
this in a moment so we'll get to it then

315
00:12:14,459 --> 00:12:15,660
um so diving a little deeper into the

316
00:12:15,660 --> 00:12:18,180
respond box there you know there's kind

317
00:12:18,180 --> 00:12:20,459
of four basic things that you do you

318
00:12:20,459 --> 00:12:24,000
correct the resources configuration

319
00:12:24,000 --> 00:12:25,920
hopefully automatically

320
00:12:25,920 --> 00:12:28,019
that's you know if I have an S3 bucket

321
00:12:28,019 --> 00:12:30,240
policy that allows

322
00:12:30,240 --> 00:12:32,820
unencrypted objects I'll go in and

323
00:12:32,820 --> 00:12:34,440
change it to only allow encrypted

324
00:12:34,440 --> 00:12:36,959
objects you can very often do that in

325
00:12:36,959 --> 00:12:39,660
the cloud without any outage or downtime

326
00:12:39,660 --> 00:12:41,339
or incident

327
00:12:41,339 --> 00:12:43,740
you could terminate the resource some

328
00:12:43,740 --> 00:12:46,019
resources in the cloud are difficult to

329
00:12:46,019 --> 00:12:48,779
adjust once live and kind of do require

330
00:12:48,779 --> 00:12:51,180
delete and redeploy

331
00:12:51,180 --> 00:12:53,459
so you can terminate the resource only

332
00:12:53,459 --> 00:12:55,500
if you have good training and alerts to

333
00:12:55,500 --> 00:12:57,839
say tell the person that deployed an S3

334
00:12:57,839 --> 00:13:00,420
bucket the reason why it deleted itself

335
00:13:00,420 --> 00:13:02,339
after 10 seconds is because it wasn't

336
00:13:02,339 --> 00:13:04,320
secure and they need to change this so

337
00:13:04,320 --> 00:13:06,120
you know that one only works if you have

338
00:13:06,120 --> 00:13:08,040
some good training involved or automatic

339
00:13:08,040 --> 00:13:11,160
response to the end user who deployed it

340
00:13:11,160 --> 00:13:14,100
and or so other response type add

341
00:13:14,100 --> 00:13:15,600
something to the backlog right if a

342
00:13:15,600 --> 00:13:17,339
human needs to make a decision it's more

343
00:13:17,339 --> 00:13:19,019
of a strategic Direction what do we do

344
00:13:19,019 --> 00:13:21,360
here there's no established pattern to

345
00:13:21,360 --> 00:13:22,320
follow

346
00:13:22,320 --> 00:13:24,120
set into a backlog right we'll have like

347
00:13:24,120 --> 00:13:26,459
a GRC team or something um

348
00:13:26,459 --> 00:13:28,500
prioritize it send it out to the right

349
00:13:28,500 --> 00:13:30,000
person have that conversation with them

350
00:13:30,000 --> 00:13:33,180
and always log these alerts for the sock

351
00:13:33,180 --> 00:13:35,399
to correlate with other threat Intel and

352
00:13:35,399 --> 00:13:37,200
other alerts right it's always good for

353
00:13:37,200 --> 00:13:39,420
them to know when I'm looking at this

354
00:13:39,420 --> 00:13:41,459
resource what other alerts have been

355
00:13:41,459 --> 00:13:44,760
associated with this in the in the past

356
00:13:44,760 --> 00:13:46,320
getting a little bit more into the

357
00:13:46,320 --> 00:13:48,420
training side now if a cspm response

358
00:13:48,420 --> 00:13:51,240
workflow I'm a huge fan of just-in-time

359
00:13:51,240 --> 00:13:53,880
training jit it's kind of a term from

360
00:13:53,880 --> 00:13:55,740
the manufacturing space that I think

361
00:13:55,740 --> 00:13:57,600
really applies well to a lot of infosec

362
00:13:57,600 --> 00:14:01,200
applications identify the Violator tell

363
00:14:01,200 --> 00:14:04,500
them what the problem was what we did

364
00:14:04,500 --> 00:14:06,839
you know this is your old bucket policy

365
00:14:06,839 --> 00:14:09,300
we changed it this is the new one

366
00:14:09,300 --> 00:14:11,700
uh tell them how they can avoid this

367
00:14:11,700 --> 00:14:13,920
problem in the future right and we send

368
00:14:13,920 --> 00:14:15,959
out infrastructure as code you know

369
00:14:15,959 --> 00:14:18,360
terraform serverless framework cdk

370
00:14:18,360 --> 00:14:19,620
whatever

371
00:14:19,620 --> 00:14:21,000
um cloudformation

372
00:14:21,000 --> 00:14:23,459
we send a snippet say if you put this

373
00:14:23,459 --> 00:14:25,860
code use this configuration in your

374
00:14:25,860 --> 00:14:27,240
template

375
00:14:27,240 --> 00:14:28,800
you can deploy as many buckets as you

376
00:14:28,800 --> 00:14:31,019
want and they'll always be compliant

377
00:14:31,019 --> 00:14:33,779
and then lastly we always link to a

378
00:14:33,779 --> 00:14:35,579
security standard where they can just

379
00:14:35,579 --> 00:14:37,500
find out more like why is this even

380
00:14:37,500 --> 00:14:39,420
important that we require encrypted

381
00:14:39,420 --> 00:14:42,660
objects in S3 right or also there'll be

382
00:14:42,660 --> 00:14:44,639
a some like if they need if they feel

383
00:14:44,639 --> 00:14:46,260
the need to petition for an exception

384
00:14:46,260 --> 00:14:49,139
from this rule or policy for that

385
00:14:49,139 --> 00:14:51,480
resource give them instructions on how

386
00:14:51,480 --> 00:14:53,399
to how to do that

387
00:14:53,399 --> 00:14:55,620
uh we we send these out just via like

388
00:14:55,620 --> 00:14:57,240
email because it's the simplest way but

389
00:14:57,240 --> 00:14:59,279
you could easily do it through through

390
00:14:59,279 --> 00:15:01,860
your chat app or whatever

391
00:15:01,860 --> 00:15:03,600
um so so we've talked a little bit about

392
00:15:03,600 --> 00:15:06,120
what a standard workflow is for cspn

393
00:15:06,120 --> 00:15:07,860
let's talk a little bit about that

394
00:15:07,860 --> 00:15:11,160
centralized remediation service this is

395
00:15:11,160 --> 00:15:13,260
in my experience

396
00:15:13,260 --> 00:15:17,399
the best way to get value from all of

397
00:15:17,399 --> 00:15:20,699
those tools which have included and are

398
00:15:20,699 --> 00:15:22,699
starting to include increasingly more

399
00:15:22,699 --> 00:15:25,079
Cloud posture management Cloud

400
00:15:25,079 --> 00:15:28,500
configuration findings uh in in their

401
00:15:28,500 --> 00:15:29,699
alerts

402
00:15:29,699 --> 00:15:32,160
collect all the sources

403
00:15:32,160 --> 00:15:34,139
send them have them send events into one

404
00:15:34,139 --> 00:15:35,180
single place

405
00:15:35,180 --> 00:15:38,040
and do your response process from there

406
00:15:38,040 --> 00:15:41,220
right as a bonus you can often handle a

407
00:15:41,220 --> 00:15:46,079
lot of the default findings from your

408
00:15:46,079 --> 00:15:49,620
cloud provider right in AWS it's for

409
00:15:49,620 --> 00:15:52,199
example config or cloudtrail or Macy or

410
00:15:52,199 --> 00:15:54,720
whatever the same system will often

411
00:15:54,720 --> 00:15:57,899
apply to to those you can handle them

412
00:15:57,899 --> 00:16:00,060
from from the same centralized mutation

413
00:16:00,060 --> 00:16:02,100
system do your exception policy

414
00:16:02,100 --> 00:16:04,199
management there your response and your

415
00:16:04,199 --> 00:16:07,980
jit training now you might ask why why

416
00:16:07,980 --> 00:16:11,880
would I not do that from the cspm itself

417
00:16:11,880 --> 00:16:15,300
some not all not even most in my

418
00:16:15,300 --> 00:16:18,480
experience some cspm tools will have the

419
00:16:18,480 --> 00:16:21,540
ability to click a button and it will go

420
00:16:21,540 --> 00:16:23,160
into your cloud provider and make the

421
00:16:23,160 --> 00:16:24,899
change on your behalf

422
00:16:24,899 --> 00:16:26,760
if you do that you're missing out on a

423
00:16:26,760 --> 00:16:28,920
couple key steps to what I believe our

424
00:16:28,920 --> 00:16:31,800
remediation workflow should be right you

425
00:16:31,800 --> 00:16:34,440
would need to maintain a list of

426
00:16:34,440 --> 00:16:37,680
exceptions in every single tool that has

427
00:16:37,680 --> 00:16:40,560
cspn capabilities right instead of one

428
00:16:40,560 --> 00:16:42,899
central place to say this resource is

429
00:16:42,899 --> 00:16:45,420
allowed to be exempt from this policy

430
00:16:45,420 --> 00:16:47,699
you'd be stuck maintaining that a loud

431
00:16:47,699 --> 00:16:49,920
list in every single resource that's

432
00:16:49,920 --> 00:16:53,160
expensive from an operational standpoint

433
00:16:53,160 --> 00:16:57,300
also cspm tools don't often I've yet to

434
00:16:57,300 --> 00:16:59,880
see it identify the user that made the

435
00:16:59,880 --> 00:17:02,040
change and have a nice training email

436
00:17:02,040 --> 00:17:04,260
sent to them at the time that they're

437
00:17:04,260 --> 00:17:06,900
that their resources remediated or

438
00:17:06,900 --> 00:17:08,640
changed

439
00:17:08,640 --> 00:17:11,040
um in general it feels like you have a

440
00:17:11,040 --> 00:17:13,079
lot less control if you're trying to

441
00:17:13,079 --> 00:17:17,220
Leverage The built-in cspm response

442
00:17:17,220 --> 00:17:18,679
functionality

443
00:17:18,679 --> 00:17:22,260
as well as no centralized circuit

444
00:17:22,260 --> 00:17:24,419
breaker or you know on off switch kill

445
00:17:24,419 --> 00:17:26,699
switch I imagine a large machine running

446
00:17:26,699 --> 00:17:28,679
something's gone wrong where's that big

447
00:17:28,679 --> 00:17:30,480
red button you just slap it and it and

448
00:17:30,480 --> 00:17:32,220
it turns off right

449
00:17:32,220 --> 00:17:33,059
um

450
00:17:33,059 --> 00:17:35,760
you know maybe it's some resource that

451
00:17:35,760 --> 00:17:38,100
is production critical is you know being

452
00:17:38,100 --> 00:17:40,380
deleted right after it's deployed every

453
00:17:40,380 --> 00:17:43,740
time it's causing an issue do you want

454
00:17:43,740 --> 00:17:46,260
to look through all five 10 20 of your

455
00:17:46,260 --> 00:17:48,179
cspm sources to figure out which one's

456
00:17:48,179 --> 00:17:50,039
doing it or just have a centralized

457
00:17:50,039 --> 00:17:52,320
let's just turn that off for now figure

458
00:17:52,320 --> 00:17:54,419
it out and go from there

459
00:17:54,419 --> 00:17:56,160
so that's the advantage of a centralized

460
00:17:56,160 --> 00:17:59,880
service you might ask how is this what

461
00:17:59,880 --> 00:18:02,340
I'm proposing different from like

462
00:18:02,340 --> 00:18:05,280
standard soar it isn't it's the same

463
00:18:05,280 --> 00:18:06,200
thing

464
00:18:06,200 --> 00:18:08,640
so we'll talk a little bit about doing

465
00:18:08,640 --> 00:18:10,860
it yourself versus doing it in a low

466
00:18:10,860 --> 00:18:13,320
code platform if you're doing it

467
00:18:13,320 --> 00:18:15,240
yourself you of course have the ability

468
00:18:15,240 --> 00:18:17,100
to tailor it to exactly what you want

469
00:18:17,100 --> 00:18:19,799
you can customize it to your heart's

470
00:18:19,799 --> 00:18:21,059
content

471
00:18:21,059 --> 00:18:21,600
um

472
00:18:21,600 --> 00:18:23,580
I will say the people writing the code

473
00:18:23,580 --> 00:18:25,380
if you do it yourself

474
00:18:25,380 --> 00:18:28,200
um often they only need a low level of

475
00:18:28,200 --> 00:18:30,419
coding experience they don't need

476
00:18:30,419 --> 00:18:33,419
infosec experience as well right we as

477
00:18:33,419 --> 00:18:35,039
professionals can dictate what we want

478
00:18:35,039 --> 00:18:37,440
to happen and they can be enabled to

479
00:18:37,440 --> 00:18:40,380
make it happen in code the way they want

480
00:18:40,380 --> 00:18:41,039
um

481
00:18:41,039 --> 00:18:42,780
which lowers the barrier of Entry right

482
00:18:42,780 --> 00:18:44,580
it makes it easier to find people that

483
00:18:44,580 --> 00:18:46,799
are capable of writing these simple

484
00:18:46,799 --> 00:18:50,039
simple scripts to do not a centralized

485
00:18:50,039 --> 00:18:52,500
remediation platform

486
00:18:52,500 --> 00:18:55,440
um around here especially we have a lot

487
00:18:55,440 --> 00:18:57,539
of code boot camps or development boot

488
00:18:57,539 --> 00:18:59,820
camps you can get Junior devs out of

489
00:18:59,820 --> 00:19:02,280
there very affordably with excellent

490
00:19:02,280 --> 00:19:05,520
node experience node.js all the colleges

491
00:19:05,520 --> 00:19:08,280
and universities in the area I feel like

492
00:19:08,280 --> 00:19:10,260
python is on every curriculum around

493
00:19:10,260 --> 00:19:13,080
here for a lot of different majors and

494
00:19:13,080 --> 00:19:16,860
python is a great language with uh to be

495
00:19:16,860 --> 00:19:18,480
able to interact with Cloud apis

496
00:19:18,480 --> 00:19:20,700
everyone has an SDK for it it's quite

497
00:19:20,700 --> 00:19:21,960
simple

498
00:19:21,960 --> 00:19:22,620
um

499
00:19:22,620 --> 00:19:24,900
I myself run an intern program where we

500
00:19:24,900 --> 00:19:27,600
have a revolving door of two sometimes

501
00:19:27,600 --> 00:19:29,700
three interns come through and that's

502
00:19:29,700 --> 00:19:32,160
what they get to work on is adding more

503
00:19:32,160 --> 00:19:34,740
rules and code to our centralized

504
00:19:34,740 --> 00:19:36,780
remediation service

505
00:19:36,780 --> 00:19:38,160
um if you're doing it yourself it's all

506
00:19:38,160 --> 00:19:41,820
serverless so extremely cheap right and

507
00:19:41,820 --> 00:19:44,340
event based so you get very short

508
00:19:44,340 --> 00:19:46,440
response times between when the alert

509
00:19:46,440 --> 00:19:48,419
comes in from the cspm tool and you've

510
00:19:48,419 --> 00:19:50,940
acted on it it's that's less than a

511
00:19:50,940 --> 00:19:52,980
couple pennies and happens within a few

512
00:19:52,980 --> 00:19:55,320
seconds usually doing it in a low code

513
00:19:55,320 --> 00:19:58,200
platform is absolutely good enough like

514
00:19:58,200 --> 00:20:00,960
you can make you can extract a lot of

515
00:20:00,960 --> 00:20:03,539
value from your cspn by doing the same

516
00:20:03,539 --> 00:20:05,940
general workflow in your low code

517
00:20:05,940 --> 00:20:07,740
platform it could be even your store

518
00:20:07,740 --> 00:20:09,360
which is tied to your sim your security

519
00:20:09,360 --> 00:20:11,840
incident event management tool

520
00:20:11,840 --> 00:20:15,419
lower barrier of entry in most cases

521
00:20:15,419 --> 00:20:19,140
I will say some soar platforms I've seen

522
00:20:19,140 --> 00:20:23,340
out there don't integrate very easily at

523
00:20:23,340 --> 00:20:25,260
least in the in a secure manner with

524
00:20:25,260 --> 00:20:27,840
your Cloud providers most of them do

525
00:20:27,840 --> 00:20:29,400
some of them have a little bit of a hard

526
00:20:29,400 --> 00:20:31,440
time with that just in like credential

527
00:20:31,440 --> 00:20:33,240
management you'd have to fall back to

528
00:20:33,240 --> 00:20:35,100
some sort of Legacy authentication

529
00:20:35,100 --> 00:20:38,160
methods but it certainly yes it could it

530
00:20:38,160 --> 00:20:40,140
could be your sore I mean if you want to

531
00:20:40,140 --> 00:20:41,520
do it yeah you could do it a lot of

532
00:20:41,520 --> 00:20:43,679
those low code platforms which are

533
00:20:43,679 --> 00:20:45,419
gaining popularity and there's some

534
00:20:45,419 --> 00:20:46,919
there's some certain advantages to the

535
00:20:46,919 --> 00:20:49,980
to those and I will summarize again it's

536
00:20:49,980 --> 00:20:51,419
easier than it seems we'll get into that

537
00:20:51,419 --> 00:20:54,140
in just a minute here

538
00:20:54,480 --> 00:20:57,360
I will say learn from my mistakes avoid

539
00:20:57,360 --> 00:20:59,820
this Pitfall I was that poor lady

540
00:20:59,820 --> 00:21:01,559
falling into the hole there

541
00:21:01,559 --> 00:21:03,299
six years ago

542
00:21:03,299 --> 00:21:06,419
a cspm tool was the dedicated thing and

543
00:21:06,419 --> 00:21:08,160
there wasn't budget for it so I was all

544
00:21:08,160 --> 00:21:10,140
right well we'll just do I'll just do

545
00:21:10,140 --> 00:21:12,480
what I can with what I've got and I'm

546
00:21:12,480 --> 00:21:14,940
not a programmer but I hacked together a

547
00:21:14,940 --> 00:21:17,820
few scripts and made this the system and

548
00:21:17,820 --> 00:21:20,460
it and it worked but don't write your

549
00:21:20,460 --> 00:21:23,039
own evaluation logic

550
00:21:23,039 --> 00:21:25,860
use the evaluation logic built into all

551
00:21:25,860 --> 00:21:28,020
of your cspms built into all of your

552
00:21:28,020 --> 00:21:29,460
Cloud providers they'll give you

553
00:21:29,460 --> 00:21:32,520
security alerts don't try to say I'm

554
00:21:32,520 --> 00:21:34,500
going to look at this S3 bucket and

555
00:21:34,500 --> 00:21:36,059
check all these things to make sure that

556
00:21:36,059 --> 00:21:38,340
it meets my standards that's commodity

557
00:21:38,340 --> 00:21:40,740
it's out there everyone's got it don't

558
00:21:40,740 --> 00:21:41,940
write your own because then you're stuck

559
00:21:41,940 --> 00:21:44,100
maintaining your own

560
00:21:44,100 --> 00:21:46,620
unless the caveat there of course is if

561
00:21:46,620 --> 00:21:49,320
you have a very specific Threat Vector

562
00:21:49,320 --> 00:21:52,740
or you're using a cloud service and a

563
00:21:52,740 --> 00:21:54,900
very unconventional manner which I've

564
00:21:54,900 --> 00:21:58,140
seen many times then short you can it is

565
00:21:58,140 --> 00:21:59,760
easy to just add your own evaluation

566
00:21:59,760 --> 00:22:02,760
logic to say anytime whatever it is

567
00:22:02,760 --> 00:22:04,559
you're looking at is created

568
00:22:04,559 --> 00:22:07,080
let me assess it and go through my own

569
00:22:07,080 --> 00:22:08,640
checklist to make sure it's compliant or

570
00:22:08,640 --> 00:22:11,940
not and like for example in AWS that's

571
00:22:11,940 --> 00:22:13,679
what they config services for it's quite

572
00:22:13,679 --> 00:22:15,960
easy to just add your own rule but in

573
00:22:15,960 --> 00:22:17,340
general don't write your own evaluation

574
00:22:17,340 --> 00:22:20,640
logic you'll you'll kick yourself later

575
00:22:20,640 --> 00:22:23,820
okay high level architecture this is

576
00:22:23,820 --> 00:22:25,679
what a central mediation service looks

577
00:22:25,679 --> 00:22:28,159
like event sources are on the left

578
00:22:28,159 --> 00:22:32,280
mostly CS cspm tools Some Cloud events

579
00:22:32,280 --> 00:22:34,620
really could be anything right if you're

580
00:22:34,620 --> 00:22:35,820
running

581
00:22:35,820 --> 00:22:39,059
uh we're running some on-prem workloads

582
00:22:39,059 --> 00:22:41,880
in countries where that's the easiest

583
00:22:41,880 --> 00:22:43,620
way to be compliant with their local

584
00:22:43,620 --> 00:22:46,320
data tenancy laws

585
00:22:46,320 --> 00:22:49,080
you can send whatever kind of event from

586
00:22:49,080 --> 00:22:51,419
wherever you want into the system we do

587
00:22:51,419 --> 00:22:52,679
it throughout books we'll talk about

588
00:22:52,679 --> 00:22:54,720
that more in a minute but then within

589
00:22:54,720 --> 00:22:56,580
that system there's again just the three

590
00:22:56,580 --> 00:22:59,820
steps which I can allow list fix the

591
00:22:59,820 --> 00:23:02,100
problem do all your response and train

592
00:23:02,100 --> 00:23:03,840
the user

593
00:23:03,840 --> 00:23:06,480
talking more about invent event

594
00:23:06,480 --> 00:23:07,980
ingestion

595
00:23:07,980 --> 00:23:11,760
uh web hooks magical everything supports

596
00:23:11,760 --> 00:23:14,700
web hooks you can send any event out of

597
00:23:14,700 --> 00:23:17,039
any system through webhooks I would be

598
00:23:17,039 --> 00:23:19,080
very if you have a system that you use

599
00:23:19,080 --> 00:23:21,299
that's even security related in any way

600
00:23:21,299 --> 00:23:23,880
that doesn't support emitting events via

601
00:23:23,880 --> 00:23:25,559
webhook I'd love to hear about it

602
00:23:25,559 --> 00:23:27,240
because I everything I could think of

603
00:23:27,240 --> 00:23:29,159
supports sending events out as a web

604
00:23:29,159 --> 00:23:31,559
hook and they're super easy to collect

605
00:23:31,559 --> 00:23:35,220
right every single low code platform Sim

606
00:23:35,220 --> 00:23:38,220
store tool or just

607
00:23:38,220 --> 00:23:40,860
you know cloud service can can ingest

608
00:23:40,860 --> 00:23:43,860
web Hooks and I will say you're going to

609
00:23:43,860 --> 00:23:47,280
want so web hooks don't support complex

610
00:23:47,280 --> 00:23:50,580
authentication methods as a standard I

611
00:23:50,580 --> 00:23:52,860
always choose oauth 2 for authentication

612
00:23:52,860 --> 00:23:54,240
for apis

613
00:23:54,240 --> 00:23:57,120
you can't do that with web hooks so you

614
00:23:57,120 --> 00:23:59,220
do have to fall back to just API Keys

615
00:23:59,220 --> 00:24:03,059
you will want unique API Keys per Event

616
00:24:03,059 --> 00:24:05,460
Source so that if you're looking at

617
00:24:05,460 --> 00:24:07,620
events coming in in the logs and saying

618
00:24:07,620 --> 00:24:10,380
these events are strange was a key lost

619
00:24:10,380 --> 00:24:12,419
you would know which one you need to

620
00:24:12,419 --> 00:24:15,539
rotate with which tool

621
00:24:15,539 --> 00:24:17,159
and I want to point out there's no code

622
00:24:17,159 --> 00:24:19,440
in this at all so far right receiving

623
00:24:19,440 --> 00:24:22,020
web hooks through Amazon API Gateway and

624
00:24:22,020 --> 00:24:24,179
sending those events straight into

625
00:24:24,179 --> 00:24:26,580
eventbridge

626
00:24:26,580 --> 00:24:28,860
there's no code you just click click

627
00:24:28,860 --> 00:24:32,100
click Send It All Through good to go it

628
00:24:32,100 --> 00:24:33,960
does the key checks as well you don't

629
00:24:33,960 --> 00:24:35,400
have to write your own custom authorizer

630
00:24:35,400 --> 00:24:38,039
or anything and this is what enables our

631
00:24:38,039 --> 00:24:39,539
event-based architecture it's just that

632
00:24:39,539 --> 00:24:41,820
event Bridge

633
00:24:41,820 --> 00:24:44,280
uh check the allow list right the new

634
00:24:44,280 --> 00:24:46,740
purple box at the bottom there so this

635
00:24:46,740 --> 00:24:47,960
is the first time we're writing code

636
00:24:47,960 --> 00:24:51,780
it's about 10 lines of code but that's

637
00:24:51,780 --> 00:24:53,100
where you'll keep a database and

638
00:24:53,100 --> 00:24:55,860
basically you just have sets of this

639
00:24:55,860 --> 00:24:57,720
specific resource is allowed to be

640
00:24:57,720 --> 00:25:00,659
exempt from this specific Rule and that

641
00:25:00,659 --> 00:25:03,200
that's it right this little just check

642
00:25:03,200 --> 00:25:05,340
when an event gets to the event Bridge

643
00:25:05,340 --> 00:25:07,440
it's sent automatically to the allowless

644
00:25:07,440 --> 00:25:10,080
Lambda which is again a platform as

645
00:25:10,080 --> 00:25:12,780
function as a service really does it

646
00:25:12,780 --> 00:25:14,760
serverless doesn't cost us are there

647
00:25:14,760 --> 00:25:16,799
anything per run checks against the

648
00:25:16,799 --> 00:25:18,720
database which again I'm using managed

649
00:25:18,720 --> 00:25:20,700
services for nothing to maintain really

650
00:25:20,700 --> 00:25:24,179
there and then if if it is if it does

651
00:25:24,179 --> 00:25:25,500
have an exception

652
00:25:25,500 --> 00:25:27,299
that's where the story ends for that one

653
00:25:27,299 --> 00:25:30,179
since it has exception done if there is

654
00:25:30,179 --> 00:25:31,740
no exception and it is a violation

655
00:25:31,740 --> 00:25:33,900
writes another event back into that

656
00:25:33,900 --> 00:25:35,700
event Bridge that's where you get you

657
00:25:35,700 --> 00:25:36,779
know your event-based architecture

658
00:25:36,779 --> 00:25:40,080
throughout the rest of these steps

659
00:25:40,080 --> 00:25:42,960
uh now for respond the blue box

660
00:25:42,960 --> 00:25:45,240
this is where you'll do whatever

661
00:25:45,240 --> 00:25:46,679
response you want right you can do

662
00:25:46,679 --> 00:25:49,080
anything you can your response could be

663
00:25:49,080 --> 00:25:51,000
you know terminate the resource modify

664
00:25:51,000 --> 00:25:52,260
the resource

665
00:25:52,260 --> 00:25:54,960
change some other mitigating control to

666
00:25:54,960 --> 00:25:57,120
accommodate for the misconfigured

667
00:25:57,120 --> 00:25:59,039
resource you know maybe add a WAFF rule

668
00:25:59,039 --> 00:26:00,020
or whatever

669
00:26:00,020 --> 00:26:03,659
that's something we do you will need an

670
00:26:03,659 --> 00:26:06,539
IAM role for that function to be able to

671
00:26:06,539 --> 00:26:09,360
go into wherever the violating resource

672
00:26:09,360 --> 00:26:12,000
is and and adjust it right or wherever

673
00:26:12,000 --> 00:26:13,799
your destination takes you

674
00:26:13,799 --> 00:26:16,260
um so that's still very simple this is

675
00:26:16,260 --> 00:26:19,919
often just 30 to 60 lines of code for us

676
00:26:19,919 --> 00:26:22,200
in simple python

677
00:26:22,200 --> 00:26:23,580
and of course report back to the event

678
00:26:23,580 --> 00:26:25,919
bus that I have done something to this

679
00:26:25,919 --> 00:26:26,880
resource

680
00:26:26,880 --> 00:26:28,559
because of this reason

681
00:26:28,559 --> 00:26:31,559
which brings us to the last step train

682
00:26:31,559 --> 00:26:33,179
the user right again it's important

683
00:26:33,179 --> 00:26:35,039
people will keep making the same the

684
00:26:35,039 --> 00:26:36,840
same mistakes over and over if they

685
00:26:36,840 --> 00:26:38,700
don't know what they're doing wrong

686
00:26:38,700 --> 00:26:41,520
so identify the user we do it via

687
00:26:41,520 --> 00:26:43,799
cloudtrail we do that separately just so

688
00:26:43,799 --> 00:26:46,380
we don't have to embed it in every one

689
00:26:46,380 --> 00:26:48,779
of those lambdas but we have a separate

690
00:26:48,779 --> 00:26:51,179
service just step function just search

691
00:26:51,179 --> 00:26:52,679
cloudtrail who touched this resource

692
00:26:52,679 --> 00:26:54,559
last we'll we'll email them call it good

693
00:26:54,559 --> 00:26:58,080
we keep all of our emails in just Ginger

694
00:26:58,080 --> 00:26:59,220
templates

695
00:26:59,220 --> 00:27:00,840
the Lambda

696
00:27:00,840 --> 00:27:03,120
sees the event come in grabs the

697
00:27:03,120 --> 00:27:04,980
template renders it out sends it an

698
00:27:04,980 --> 00:27:07,279
email done

699
00:27:07,279 --> 00:27:10,260
so I will highlight though those three

700
00:27:10,260 --> 00:27:11,580
lambdas

701
00:27:11,580 --> 00:27:15,900
you will need one set of three per cspm

702
00:27:15,900 --> 00:27:18,179
alert that you want to auto remediate

703
00:27:18,179 --> 00:27:19,380
right

704
00:27:19,380 --> 00:27:21,480
those are all unique to the specific

705
00:27:21,480 --> 00:27:23,840
alert

706
00:27:24,600 --> 00:27:26,700
so what I what I didn't show here I

707
00:27:26,700 --> 00:27:28,380
simplified it quite a bit for the talk

708
00:27:28,380 --> 00:27:30,900
today but there's another listener on

709
00:27:30,900 --> 00:27:32,640
the event bridge that sends every event

710
00:27:32,640 --> 00:27:34,559
that goes through it to our socks so

711
00:27:34,559 --> 00:27:35,940
they can correlate against all their

712
00:27:35,940 --> 00:27:37,440
other alerts coming in

713
00:27:37,440 --> 00:27:39,919
we have a few we call them core Services

714
00:27:39,919 --> 00:27:42,299
things that live outside of this that

715
00:27:42,299 --> 00:27:44,220
these lambdas can use for their own

716
00:27:44,220 --> 00:27:46,320
convenience right like the user identity

717
00:27:46,320 --> 00:27:49,260
service identifying users that that's a

718
00:27:49,260 --> 00:27:50,520
core service there's a few other ones

719
00:27:50,520 --> 00:27:54,000
like that we do write back to our cspm

720
00:27:54,000 --> 00:27:57,179
tool to say you know using their apis

721
00:27:57,179 --> 00:27:58,799
which are super easy they all have one

722
00:27:58,799 --> 00:28:00,419
just to say you know you can dismiss

723
00:28:00,419 --> 00:28:02,159
this alert you can snooze it for two

724
00:28:02,159 --> 00:28:05,159
weeks you can close it or re-test or

725
00:28:05,159 --> 00:28:07,380
whatever the whatever the tool wants we

726
00:28:07,380 --> 00:28:09,000
just do that as a sort of abstraction

727
00:28:09,000 --> 00:28:11,400
layer so that as we

728
00:28:11,400 --> 00:28:14,039
push and pull cspms out of this whole

729
00:28:14,039 --> 00:28:16,620
process we only have one set of code to

730
00:28:16,620 --> 00:28:20,239
adjust instead of all the lambdas

731
00:28:20,460 --> 00:28:22,200
checking the database is actually it's

732
00:28:22,200 --> 00:28:24,179
the third it's a third party server it's

733
00:28:24,179 --> 00:28:25,679
a it's a separately hosted service that

734
00:28:25,679 --> 00:28:27,720
we use just for simplicity's sake and

735
00:28:27,720 --> 00:28:29,580
then I will highlight as well a lot of

736
00:28:29,580 --> 00:28:30,900
what these Landers do we're all the same

737
00:28:30,900 --> 00:28:33,059
right it's a very similar functions so

738
00:28:33,059 --> 00:28:35,340
we put all of that shared code we call

739
00:28:35,340 --> 00:28:37,140
it an SDK put it in the Lambda layer

740
00:28:37,140 --> 00:28:38,279
which is straight across the three of

741
00:28:38,279 --> 00:28:40,260
them and then you just call functions

742
00:28:40,260 --> 00:28:41,640
that already exist and each of these

743
00:28:41,640 --> 00:28:44,159
lambdas which keeps their length very

744
00:28:44,159 --> 00:28:46,679
short and they're very simple to write

745
00:28:46,679 --> 00:28:47,520
um

746
00:28:47,520 --> 00:28:50,279
and it will say sources from cloud

747
00:28:50,279 --> 00:28:52,200
events that are straight on the event

748
00:28:52,200 --> 00:28:54,419
Bridge they bypass the Gateway they just

749
00:28:54,419 --> 00:28:55,740
go straight into our eventbridge that's

750
00:28:55,740 --> 00:29:00,679
just a built-in functionality of of AWS

751
00:29:00,679 --> 00:29:03,240
looking back six years what it's been

752
00:29:03,240 --> 00:29:06,299
like to operate this tool again each

753
00:29:06,299 --> 00:29:08,760
each lamb does between 20 and I guess 80

754
00:29:08,760 --> 00:29:10,980
lines of code it's all python for me

755
00:29:10,980 --> 00:29:13,860
I've had two interns right and

756
00:29:13,860 --> 00:29:16,260
maintained basically the whole thing

757
00:29:16,260 --> 00:29:16,919
um

758
00:29:16,919 --> 00:29:21,299
we automatically respond to 85 ish plus

759
00:29:21,299 --> 00:29:23,580
or minus a lot alerts from five

760
00:29:23,580 --> 00:29:25,559
different cspm sources

761
00:29:25,559 --> 00:29:28,919
it costs 52 dollars a month in AWS spend

762
00:29:28,919 --> 00:29:32,340
plus the two interns time 50 of that is

763
00:29:32,340 --> 00:29:34,559
just the database Cost Storage is a

764
00:29:34,559 --> 00:29:36,659
little extensive there two dollars of

765
00:29:36,659 --> 00:29:39,240
which is like running the lambdas

766
00:29:39,240 --> 00:29:42,240
I would say our average mean time to

767
00:29:42,240 --> 00:29:43,919
detection or mean time to response

768
00:29:43,919 --> 00:29:46,200
really is 10 seconds as soon as that

769
00:29:46,200 --> 00:29:47,460
alert comes in it goes through the whole

770
00:29:47,460 --> 00:29:49,740
thing the reason it's 10 seconds and

771
00:29:49,740 --> 00:29:52,200
isn't shorter is because often we have

772
00:29:52,200 --> 00:29:54,419
to wait for cloudtrail to catch up

773
00:29:54,419 --> 00:29:56,580
there's often a 15-minute delay there

774
00:29:56,580 --> 00:29:57,860
sometimes but

775
00:29:57,860 --> 00:29:59,940
within about 10 seconds is our average

776
00:29:59,940 --> 00:30:02,100
run time or from from start to finish to

777
00:30:02,100 --> 00:30:05,640
response and the metric I would be most

778
00:30:05,640 --> 00:30:08,100
proud of is the number of new

779
00:30:08,100 --> 00:30:10,380
misconfigurations identified and coming

780
00:30:10,380 --> 00:30:12,539
into the system is trending downward and

781
00:30:12,539 --> 00:30:15,000
again that's because we bother to train

782
00:30:15,000 --> 00:30:17,640
our users and tell them hey this is what

783
00:30:17,640 --> 00:30:19,320
you did this is how we changed it this

784
00:30:19,320 --> 00:30:21,480
is why this is how you can prevent that

785
00:30:21,480 --> 00:30:23,940
from happening in the future

786
00:30:23,940 --> 00:30:27,059
so again back to the back to the thesis

787
00:30:27,059 --> 00:30:29,700
right you can get value from all your

788
00:30:29,700 --> 00:30:32,220
cspm tools by creating your own

789
00:30:32,220 --> 00:30:34,799
centralized identity sorry automated

790
00:30:34,799 --> 00:30:37,980
remediation system and it is easier than

791
00:30:37,980 --> 00:30:41,220
it sounds take value from all of these

792
00:30:41,220 --> 00:30:43,919
tools which you already have and start

793
00:30:43,919 --> 00:30:47,120
realizing it thank you

