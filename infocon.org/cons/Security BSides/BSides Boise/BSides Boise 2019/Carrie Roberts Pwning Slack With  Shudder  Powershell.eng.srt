1
00:00:08,119 --> 00:00:10,790
we're going to talk about extracting all

2
00:00:10,790 --> 00:00:12,920
the information that we find on slack

3
00:00:12,920 --> 00:00:14,790
once we have credentials

4
00:00:14,790 --> 00:00:17,130
really it's not a vulnerability and

5
00:00:17,130 --> 00:00:19,740
slack it's just using slack to our

6
00:00:19,740 --> 00:00:22,980
advantage as an attacker and also

7
00:00:22,980 --> 00:00:25,910
they'll talk about blue team stuff

8
00:00:25,910 --> 00:00:29,610
hi I'm Kerry Roberts I used to be a web

9
00:00:29,610 --> 00:00:32,488
app developer until I miserably failed

10
00:00:32,488 --> 00:00:34,500
the pen test which I didn't know what

11
00:00:34,500 --> 00:00:39,300
that was at the time and and so I knew

12
00:00:39,300 --> 00:00:41,610
nothing about security and I was told to

13
00:00:41,610 --> 00:00:43,920
fix these big vulnerabilities and I felt

14
00:00:43,920 --> 00:00:46,370
really stupid because I didn't know what

15
00:00:46,370 --> 00:00:48,330
anything about anything they were

16
00:00:48,330 --> 00:00:50,430
talking about so I'm kind of all I

17
00:00:50,430 --> 00:00:53,190
nothing person so I was at a point where

18
00:00:53,190 --> 00:00:55,170
I'm like okay either I'm not gonna be a

19
00:00:55,170 --> 00:00:57,720
developer or I got it just embrace the

20
00:00:57,720 --> 00:01:00,240
security thing so I decided to embrace

21
00:01:00,240 --> 00:01:02,160
security started taking some training

22
00:01:02,160 --> 00:01:03,329
from sans

23
00:01:03,329 --> 00:01:07,860
and got some education so now I'm in the

24
00:01:07,860 --> 00:01:10,439
InfoSec field it's exciting and I love I

25
00:01:10,439 --> 00:01:12,390
live local here and I love to ride

26
00:01:12,390 --> 00:01:14,340
motorcycles four-wheelers in the

27
00:01:14,340 --> 00:01:16,820
mountains

28
00:01:17,610 --> 00:01:20,220
so I'm Tony hamburger I am very

29
00:01:20,220 --> 00:01:21,810
background I currently live in

30
00:01:21,810 --> 00:01:24,030
Bentonville Arkansas working for the

31
00:01:24,030 --> 00:01:27,240
incident response team at Walmart as you

32
00:01:27,240 --> 00:01:28,650
can see I have very background in

33
00:01:28,650 --> 00:01:30,680
networking security data loss prevention

34
00:01:30,680 --> 00:01:34,890
HIPAA compliance been with the Walmart

35
00:01:34,890 --> 00:01:37,020
IR team for almost a year now before

36
00:01:37,020 --> 00:01:38,220
that was on the data loss prevention

37
00:01:38,220 --> 00:01:45,570
team okay so this is a little disclaimer

38
00:01:45,570 --> 00:01:49,080
that we're not endorsing product and

39
00:01:49,080 --> 00:01:51,000
we're also not officially representing

40
00:01:51,000 --> 00:01:52,560
Walmart even though we both work for a

41
00:01:52,560 --> 00:01:57,720
Walmart so slack

42
00:01:57,720 --> 00:02:00,000
some people may not know what slack is

43
00:02:00,000 --> 00:02:02,369
this interface where we can chat with

44
00:02:02,369 --> 00:02:06,150
people so here we have like Carrie

45
00:02:06,150 --> 00:02:08,039
talking to Martin just sending messages

46
00:02:08,039 --> 00:02:10,160
back and forth you can also send files

47
00:02:10,160 --> 00:02:12,420
on the left you have a list of channels

48
00:02:12,420 --> 00:02:14,570
that you can talk in so kind of topics

49
00:02:14,570 --> 00:02:17,940
there's public channels that anybody can

50
00:02:17,940 --> 00:02:19,680
talk to who is part of the they call it

51
00:02:19,680 --> 00:02:22,080
workspace so if you can log in your you

52
00:02:22,080 --> 00:02:23,550
can talk on the public channels there's

53
00:02:23,550 --> 00:02:25,950
private channels have the little walk by

54
00:02:25,950 --> 00:02:29,070
them that's you only can talk there if

55
00:02:29,070 --> 00:02:30,840
you're invited so you might create a

56
00:02:30,840 --> 00:02:33,090
channel invite your friends to chat with

57
00:02:33,090 --> 00:02:35,280
you they're not everybody who has the

58
00:02:35,280 --> 00:02:37,320
login can read the private channels and

59
00:02:37,320 --> 00:02:40,050
then there's direct messages where it's

60
00:02:40,050 --> 00:02:42,360
kind of one-on-one although you can do

61
00:02:42,360 --> 00:02:44,130
it to multiple people but it's not

62
00:02:44,130 --> 00:02:45,959
really a channel it's just like hey how

63
00:02:45,959 --> 00:02:48,390
about the four of us talk you usually

64
00:02:48,390 --> 00:02:50,100
more temporary than the channel and one

65
00:02:50,100 --> 00:02:52,800
thing to note is up here in the URL you

66
00:02:52,800 --> 00:02:54,630
see this channel ID

67
00:02:54,630 --> 00:02:57,480
CCE four four that's unique per channel

68
00:02:57,480 --> 00:02:58,110
so if you

69
00:02:58,110 --> 00:02:59,580
these different channels on the left you

70
00:02:59,580 --> 00:03:01,650
get a different channel ID and I just

71
00:03:01,650 --> 00:03:02,850
point that out because that comes in

72
00:03:02,850 --> 00:03:05,640
handy when we learn more about this grip

73
00:03:05,640 --> 00:03:07,740
that we can use to extract information

74
00:03:07,740 --> 00:03:11,760
from channels so slack is really popular

75
00:03:11,760 --> 00:03:15,630
last year they noted that they have six

76
00:03:15,630 --> 00:03:18,330
million daily users and that was a year

77
00:03:18,330 --> 00:03:18,780
ago

78
00:03:18,780 --> 00:03:21,090
there's over fifty thousand teams pain

79
00:03:21,090 --> 00:03:24,120
for to use the slack service although

80
00:03:24,120 --> 00:03:27,840
you can also use it for free and forty

81
00:03:27,840 --> 00:03:30,180
three percent of the largest 100

82
00:03:30,180 --> 00:03:31,980
companies in the nation use slack so

83
00:03:31,980 --> 00:03:34,680
it's widely used and more than half of

84
00:03:34,680 --> 00:03:37,520
those are outside the United States so

85
00:03:37,520 --> 00:03:41,810
how many of you use slack at work girl

86
00:03:41,810 --> 00:03:49,320
it's just freaking number so sometimes I

87
00:03:49,320 --> 00:03:52,170
talk to companies and they say you know

88
00:03:52,170 --> 00:03:53,760
we're not worried about what people put

89
00:03:53,760 --> 00:03:55,140
in slack because we have a policy

90
00:03:55,140 --> 00:03:57,990
against putting sensitive inside but

91
00:03:57,990 --> 00:04:02,400
yeah what we did we left because the

92
00:04:02,400 --> 00:04:04,890
policy here you know it's just so easy

93
00:04:04,890 --> 00:04:06,720
to share information on slack that's

94
00:04:06,720 --> 00:04:08,250
it's easy that you I can drop that file

95
00:04:08,250 --> 00:04:10,530
in you know full of passwords or to type

96
00:04:10,530 --> 00:04:13,050
you know somebody say hey Joe what's the

97
00:04:13,050 --> 00:04:18,988
password for this Wi-Fi our system so

98
00:04:18,988 --> 00:04:20,339
there is a lot of sensitive information

99
00:04:20,339 --> 00:04:23,040
in there even if your work has a policy

100
00:04:23,040 --> 00:04:23,750
and against

101
00:04:23,750 --> 00:04:26,260
that an attacker might be interested in

102
00:04:26,260 --> 00:04:33,410
extracting so slack provides an API

103
00:04:33,410 --> 00:04:36,230
which is like a way for for you to

104
00:04:36,230 --> 00:04:38,810
program programmatically interface with

105
00:04:38,810 --> 00:04:41,480
it so we can use the API to do

106
00:04:41,480 --> 00:04:43,400
everything that the web does for you

107
00:04:43,400 --> 00:04:44,420
when you're just browsing through

108
00:04:44,420 --> 00:04:46,010
channels you're doing point-and-click

109
00:04:46,010 --> 00:04:48,110
but you can do that with you could write

110
00:04:48,110 --> 00:04:51,350
a program to go see what all channels do

111
00:04:51,350 --> 00:04:53,270
I have access to what are all the

112
00:04:53,270 --> 00:04:55,820
messages download the file so you can do

113
00:04:55,820 --> 00:04:57,380
that through an API and here's an

114
00:04:57,380 --> 00:04:59,420
example I have circled the channel

115
00:04:59,420 --> 00:05:02,120
histories it it fetches all the messages

116
00:05:02,120 --> 00:05:03,830
from a channel so we can make that API

117
00:05:03,830 --> 00:05:05,560
call

118
00:05:05,560 --> 00:05:08,330
in order to use the API you have to be

119
00:05:08,330 --> 00:05:10,820
authenticated so you need a token and

120
00:05:10,820 --> 00:05:13,670
the token usually starts out like X 0 X

121
00:05:13,670 --> 00:05:16,250
s or maybe X 0 X P there's a few

122
00:05:16,250 --> 00:05:17,900
different tokens and then a dash and

123
00:05:17,900 --> 00:05:21,290
some other numbers so if you have that

124
00:05:21,290 --> 00:05:24,350
token you can use the API and extract

125
00:05:24,350 --> 00:05:27,260
information from that slack workspace to

126
00:05:27,260 --> 00:05:29,930
get the token you can you can login to

127
00:05:29,930 --> 00:05:34,250
the web interface and the first request

128
00:05:34,250 --> 00:05:36,440
it does to get your messages will ready

129
00:05:36,440 --> 00:05:37,910
turn your token so there's an example

130
00:05:37,910 --> 00:05:42,320
down there of a token and you just get

131
00:05:42,320 --> 00:05:44,570
that when you busy slack so if you were

132
00:05:44,570 --> 00:05:46,010
going to watch your network traffic you

133
00:05:46,010 --> 00:05:47,900
can see here token you can also go in

134
00:05:47,900 --> 00:05:50,300
and like sign up for a token inside your

135
00:05:50,300 --> 00:05:52,840
profile but she could also just grab it

136
00:05:52,840 --> 00:05:59,990
after you log in so I released this

137
00:05:59,990 --> 00:06:03,350
PowerShell script called slack extract

138
00:06:03,350 --> 00:06:05,360
and that's what we're gonna talk we're

139
00:06:05,360 --> 00:06:07,100
talking about today we're going to use

140
00:06:07,100 --> 00:06:09,350
that to extract all the information a

141
00:06:09,350 --> 00:06:11,990
user has access to so we get their token

142
00:06:11,990 --> 00:06:15,470
and we say we want all the files this

143
00:06:15,470 --> 00:06:20,300
user can read and all the messages we

144
00:06:20,300 --> 00:06:23,060
extract from it so if you go to Europe

145
00:06:23,060 --> 00:06:25,280
that URL there at github CLR to abate

146
00:06:25,280 --> 00:06:27,920
psycextra you don't see this script then

147
00:06:27,920 --> 00:06:31,220
you can use it for your own purposes and

148
00:06:31,220 --> 00:06:33,440
it has a little readme there which is

149
00:06:33,440 --> 00:06:36,200
shown here there's three basic steps you

150
00:06:36,200 --> 00:06:38,450
just enter PowerShell so you start

151
00:06:38,450 --> 00:06:39,290
command

152
00:06:39,290 --> 00:06:41,750
ates enter PowerShell with that command

153
00:06:41,750 --> 00:06:44,960
PowerShell exec bypass you import the

154
00:06:44,960 --> 00:06:48,470
module and then to see how to use it

155
00:06:48,470 --> 00:06:50,150
it's kind of a self documenting script

156
00:06:50,150 --> 00:06:53,090
you can just say get help with invoke

157
00:06:53,090 --> 00:06:54,680
psych extract that's the name of the

158
00:06:54,680 --> 00:06:57,200
function and if you do full it'll give

159
00:06:57,200 --> 00:06:59,300
all the examples all the parameter

160
00:06:59,300 --> 00:07:01,760
options you can use and so that's the

161
00:07:01,760 --> 00:07:05,900
best way to get started so the basic

162
00:07:05,900 --> 00:07:08,300
usage for the script you have to give it

163
00:07:08,300 --> 00:07:10,190
at least three things the first is your

164
00:07:10,190 --> 00:07:13,220
slack URL so in the examples today I'm

165
00:07:13,220 --> 00:07:16,450
using slack extract a slack calm it's a

166
00:07:16,450 --> 00:07:19,130
psych workspace that I signed up for

167
00:07:19,130 --> 00:07:22,190
just for this demo your place it might

168
00:07:22,190 --> 00:07:25,910
be like company name that's like an

169
00:07:25,910 --> 00:07:28,520
output folder name so where you want all

170
00:07:28,520 --> 00:07:30,560
this data to go into when you download

171
00:07:30,560 --> 00:07:32,150
it by default it goes into your

172
00:07:32,150 --> 00:07:34,310
documents directory into a folder called

173
00:07:34,310 --> 00:07:36,020
slack extract and then inside of that

174
00:07:36,020 --> 00:07:38,630
whatever name you give it so today for

175
00:07:38,630 --> 00:07:39,710
the examples we'll call that my

176
00:07:39,710 --> 00:07:41,990
extraction so we'll see a folder created

177
00:07:41,990 --> 00:07:44,180
with that name and the last thing we

178
00:07:44,180 --> 00:07:46,970
give it is our authentication so again

179
00:07:46,970 --> 00:07:47,470
this is

180
00:07:47,470 --> 00:07:49,840
a hack of slack but we're actually doing

181
00:07:49,840 --> 00:07:51,880
this as an authenticated user the only

182
00:07:51,880 --> 00:07:53,530
hack would be as we stole those

183
00:07:53,530 --> 00:07:56,110
credentials from someone else which is

184
00:07:56,110 --> 00:07:58,510
typically what I would do on a red team

185
00:07:58,510 --> 00:08:02,340
with let's to borrow this from somebody

186
00:08:02,340 --> 00:08:06,820
so for the authentication we can either

187
00:08:06,820 --> 00:08:10,500
give it what I call the D cookie because

188
00:08:10,500 --> 00:08:14,620
slack has a cookie and the name of the

189
00:08:14,620 --> 00:08:17,590
cookie is the letter D so it's the D

190
00:08:17,590 --> 00:08:20,230
cookie and it's your session cookie you

191
00:08:20,230 --> 00:08:21,550
can think of it it's the temporary

192
00:08:21,550 --> 00:08:24,130
password that your browser keeps for you

193
00:08:24,130 --> 00:08:26,260
so you only have to log in once and then

194
00:08:26,260 --> 00:08:29,200
every subsequent request your browser is

195
00:08:29,200 --> 00:08:31,060
handing over this temporary password or

196
00:08:31,060 --> 00:08:32,799
this D cookie which says yeah this

197
00:08:32,799 --> 00:08:34,360
person's really logged in don't make

198
00:08:34,360 --> 00:08:36,520
them enter their password every time so

199
00:08:36,520 --> 00:08:38,049
you can give them the D cookie you can

200
00:08:38,049 --> 00:08:40,059
give the script the D cookie and it will

201
00:08:40,059 --> 00:08:43,570
exchange that for the token or you can

202
00:08:43,570 --> 00:08:45,340
just give it the token itself if you've

203
00:08:45,340 --> 00:08:49,390
gotten that some other way so how do we

204
00:08:49,390 --> 00:08:52,660
get there this is just this is just an

205
00:08:52,660 --> 00:08:57,700
example exchanging the D cookie for the

206
00:08:57,700 --> 00:08:59,260
token so all we have to do if we have

207
00:08:59,260 --> 00:09:00,850
the D cookie and we'll talk about how to

208
00:09:00,850 --> 00:09:04,000
get that next is make a request to work

209
00:09:04,000 --> 00:09:07,330
to face like complex messages and in

210
00:09:07,330 --> 00:09:11,589
response you get that xox token back and

211
00:09:11,589 --> 00:09:14,140
and that's we can use either one of

212
00:09:14,140 --> 00:09:16,630
those pieces of identification for this

213
00:09:16,630 --> 00:09:20,620
group so how do we get the D cookie

214
00:09:20,620 --> 00:09:23,470
the easiest way depending on what level

215
00:09:23,470 --> 00:09:25,660
of access you have to that user system

216
00:09:25,660 --> 00:09:28,839
or your own system is to just look in

217
00:09:28,839 --> 00:09:31,089
the browser and say you know ask the

218
00:09:31,089 --> 00:09:32,710
browser to tell you what's the

219
00:09:32,710 --> 00:09:35,320
the D cookie for slack calm and I've got

220
00:09:35,320 --> 00:09:37,810
a demo video of that next there's also

221
00:09:37,810 --> 00:09:39,580
ways to do it like from a command line

222
00:09:39,580 --> 00:09:41,290
interface maybe you don't have graphical

223
00:09:41,290 --> 00:09:44,500
access to your victim

224
00:09:44,500 --> 00:09:46,420
you only have command line access here's

225
00:09:46,420 --> 00:09:49,740
some examples of using PowerShell to

226
00:09:49,740 --> 00:09:52,510
extract it from Chrome or from Windows

227
00:09:52,510 --> 00:09:53,890
and you don't have to try to write that

228
00:09:53,890 --> 00:09:56,170
down but those those commands are on the

229
00:09:56,170 --> 00:09:57,399
wiki so if you go to the github

230
00:09:57,399 --> 00:09:59,860
repository there's a wiki and there's a

231
00:09:59,860 --> 00:10:01,060
lot of information about how to get

232
00:10:01,060 --> 00:10:03,459
these deep cookies or these especially

233
00:10:03,459 --> 00:10:05,790
things

234
00:10:10,470 --> 00:10:12,480
okay so we're locked in the slack here

235
00:10:12,480 --> 00:10:14,610
we're going up to the three dots menu

236
00:10:14,610 --> 00:10:17,880
and go into settings and we're going to

237
00:10:17,880 --> 00:10:19,380
search for cookies because we're looking

238
00:10:19,380 --> 00:10:22,320
for this D cookie and scroll down we see

239
00:10:22,320 --> 00:10:25,020
content settings and then we click on

240
00:10:25,020 --> 00:10:27,570
cookies and see all the cookies inside

241
00:10:27,570 --> 00:10:30,300
data and to make it easier to find will

242
00:10:30,300 --> 00:10:32,550
type in slack comm and search for it we

243
00:10:32,550 --> 00:10:34,650
see select icon there and here's a

244
00:10:34,650 --> 00:10:36,900
cookie called D we click on that and it

245
00:10:36,900 --> 00:10:38,700
tells us the content of this cookie is

246
00:10:38,700 --> 00:10:41,520
bla bla bla bla bla that's what you need

247
00:10:41,520 --> 00:10:44,250
to use this group so that's how if you

248
00:10:44,250 --> 00:10:47,480
can do that you can use this screw

249
00:10:50,680 --> 00:10:54,220
okay so here's an example of so we've

250
00:10:54,220 --> 00:10:56,199
started up PowerShell we have import

251
00:10:56,199 --> 00:10:59,050
ported the module and now we can call it

252
00:10:59,050 --> 00:11:02,170
with invoke - slash slack extract we

253
00:11:02,170 --> 00:11:03,759
give it those three required parameters

254
00:11:03,759 --> 00:11:05,529
we give it an output folder name so my

255
00:11:05,529 --> 00:11:08,649
extraction we give it our slack URL and

256
00:11:08,649 --> 00:11:10,990
we give it either the D cookie or the

257
00:11:10,990 --> 00:11:13,509
API token here we're giving it the D

258
00:11:13,509 --> 00:11:15,939
cookie and I put a dot dot because it's

259
00:11:15,939 --> 00:11:18,069
so long and ugly I don't want to put the

260
00:11:18,069 --> 00:11:19,360
whole thing on there but that's actually

261
00:11:19,360 --> 00:11:23,170
a big cookie there so if we were to run

262
00:11:23,170 --> 00:11:26,800
that with a valid D cookie we would get

263
00:11:26,800 --> 00:11:28,449
a folder in our documents directory

264
00:11:28,449 --> 00:11:31,269
called psych extract with and then it

265
00:11:31,269 --> 00:11:33,399
makes this my extraction folder and

266
00:11:33,399 --> 00:11:37,449
inside that folder there is here's where

267
00:11:37,449 --> 00:11:39,040
inside at one of these channels so

268
00:11:39,040 --> 00:11:40,720
remember at the beginning of the URL had

269
00:11:40,720 --> 00:11:42,189
a channel ID so maybe the general

270
00:11:42,189 --> 00:11:44,470
channel has this ID the random channel

271
00:11:44,470 --> 00:11:47,470
has another ID so we're inside of one of

272
00:11:47,470 --> 00:11:49,749
these channels you'll get a directory

273
00:11:49,749 --> 00:11:51,699
for every channel the user has access to

274
00:11:51,699 --> 00:11:55,029
so usually people have access to a lot

275
00:11:55,029 --> 00:11:57,699
of channels inside each channel you have

276
00:11:57,699 --> 00:12:00,850
a folder full of files so all the files

277
00:12:00,850 --> 00:12:03,490
that that that has been uploaded to that

278
00:12:03,490 --> 00:12:07,809
channel and I folder full of messages

279
00:12:07,809 --> 00:12:10,240
and those messages are written to disk

280
00:12:10,240 --> 00:12:14,520
JSON files so right down here you see

281
00:12:14,520 --> 00:12:16,930
each one of these is a message with some

282
00:12:16,930 --> 00:12:19,060
details about when who hosted that

283
00:12:19,060 --> 00:12:21,760
message and when it was posted part of

284
00:12:21,760 --> 00:12:23,560
the filename is a timestamp so if you

285
00:12:23,560 --> 00:12:25,209
sort by a file name you'll be reading

286
00:12:25,209 --> 00:12:27,790
messages in order and then uh bottom

287
00:12:27,790 --> 00:12:30,040
right you see one example of one of the

288
00:12:30,040 --> 00:12:33,370
JSON messages which tells you who

289
00:12:33,370 --> 00:12:36,339
uploaded it when and and the message in

290
00:12:36,339 --> 00:12:37,750
this case was any news about the

291
00:12:37,750 --> 00:12:41,830
carnival next month so this makes it

292
00:12:41,830 --> 00:12:44,260
easy to do offline searching of the data

293
00:12:44,260 --> 00:12:46,270
from slack without it if you're familiar

294
00:12:46,270 --> 00:12:48,250
with using slack if you want to read

295
00:12:48,250 --> 00:12:49,959
more than the last few messages you got

296
00:12:49,959 --> 00:12:51,399
to scroll up and it loads it as you're

297
00:12:51,399 --> 00:12:53,740
scrolling up and it can it's really slow

298
00:12:53,740 --> 00:12:56,350
and that's slow to read through look

299
00:12:56,350 --> 00:13:00,370
through and search through especially

300
00:13:00,370 --> 00:13:04,899
downloading files is slow that way so it

301
00:13:04,899 --> 00:13:07,899
also creates this meta folder which is

302
00:13:07,899 --> 00:13:09,730
kind of the data about the channels like

303
00:13:09,730 --> 00:13:11,680
what's the channel name its death

304
00:13:11,680 --> 00:13:14,680
so inside chant the meta folder we've

305
00:13:14,680 --> 00:13:17,200
got the channels meta and so that's

306
00:13:17,200 --> 00:13:19,209
information about channel so you get one

307
00:13:19,209 --> 00:13:22,180
JSON file for each channel and that has

308
00:13:22,180 --> 00:13:23,649
information like the name of the channel

309
00:13:23,649 --> 00:13:26,260
the topic the purpose whether it's

310
00:13:26,260 --> 00:13:27,850
public private what it used to be called

311
00:13:27,850 --> 00:13:33,910
when it was created and at the end it

312
00:13:33,910 --> 00:13:37,089
rolls this all up into a excel file a

313
00:13:37,089 --> 00:13:39,970
CSV file so that you could open this up

314
00:13:39,970 --> 00:13:42,760
in Excel and you have a big list of all

315
00:13:42,760 --> 00:13:45,100
the channels and their topics and you

316
00:13:45,100 --> 00:13:47,620
could search look through for ones that

317
00:13:47,620 --> 00:13:48,540
sound

318
00:13:48,540 --> 00:13:50,670
maybe you want to go to those channels

319
00:13:50,670 --> 00:13:56,090
and search for sensitive information I

320
00:13:56,090 --> 00:13:58,110
said that you run this and it downloads

321
00:13:58,110 --> 00:14:01,110
all files and messages but actually

322
00:14:01,110 --> 00:14:03,030
there's some default limits but you can

323
00:14:03,030 --> 00:14:05,010
change that to be bigger but by default

324
00:14:05,010 --> 00:14:07,470
it'll download up to 10,000 messages per

325
00:14:07,470 --> 00:14:10,110
channel and up to 2,000 files per

326
00:14:10,110 --> 00:14:11,780
channel because you can fill up your

327
00:14:11,780 --> 00:14:16,200
hard drive pretty quick running this on

328
00:14:16,200 --> 00:14:20,190
big slack instances so if you just run

329
00:14:20,190 --> 00:14:21,420
out without really thinking about

330
00:14:21,420 --> 00:14:22,890
setting default - you will have those

331
00:14:22,890 --> 00:14:24,930
defaults but if you really want to

332
00:14:24,930 --> 00:14:26,040
download more than that

333
00:14:26,040 --> 00:14:29,460
for any channel you can there's a an

334
00:14:29,460 --> 00:14:33,180
option to specify a different limit and

335
00:14:33,180 --> 00:14:35,490
we'll talk about downloading agent

336
00:14:35,490 --> 00:14:39,210
profiles and logs later so when I gain

337
00:14:39,210 --> 00:14:43,290
access to a user on slack when I'm doing

338
00:14:43,290 --> 00:14:46,590
my testing I'm interested in finding out

339
00:14:46,590 --> 00:14:49,920
who else works for this company so it's

340
00:14:49,920 --> 00:14:53,700
a really typical scenario for me if I'm

341
00:14:53,700 --> 00:14:56,250
testing a company is I go to LinkedIn

342
00:14:56,250 --> 00:14:58,140
and get a list of everybody who says

343
00:14:58,140 --> 00:14:59,910
they work for this company so maybe

344
00:14:59,910 --> 00:15:01,830
that's I her out there's like 300 people

345
00:15:01,830 --> 00:15:03,270
that claim to work for this company and

346
00:15:03,270 --> 00:15:06,630
then I turn that into like first initial

347
00:15:06,630 --> 00:15:08,209
with last name

348
00:15:08,209 --> 00:15:10,579
user name and I tried a login to slack

349
00:15:10,579 --> 00:15:13,249
with those user names so I'm I'm trying

350
00:15:13,249 --> 00:15:16,100
to guess a password for one of those 300

351
00:15:16,100 --> 00:15:18,949
users so maybe they're using like fall

352
00:15:18,949 --> 00:15:21,920
2018 because that's common for people

353
00:15:21,920 --> 00:15:23,720
that use season in the air combinations

354
00:15:23,720 --> 00:15:26,420
so I'll guess a few passwords for those

355
00:15:26,420 --> 00:15:29,240
300 users and eventually get in and as

356
00:15:29,240 --> 00:15:31,879
soon as I get into slack I'm interested

357
00:15:31,879 --> 00:15:34,610
in that whole all the users is if I had

358
00:15:34,610 --> 00:15:36,860
a bigger user nameless than what I got

359
00:15:36,860 --> 00:15:39,170
from LinkedIn then my chance is like

360
00:15:39,170 --> 00:15:41,660
maybe if I guess if fall 2018 was good

361
00:15:41,660 --> 00:15:43,999
for one and three hundred people and now

362
00:15:43,999 --> 00:15:46,730
I have three thousand about live

363
00:15:46,730 --> 00:15:48,499
usernames and I try that again

364
00:15:48,499 --> 00:15:51,259
you know I'm probably going to get ten

365
00:15:51,259 --> 00:15:53,360
there's ten times the users so I'll

366
00:15:53,360 --> 00:15:55,069
probably get into ten years or accounts

367
00:15:55,069 --> 00:15:58,399
so when I get access to slack I want to

368
00:15:58,399 --> 00:16:00,679
extract the user profiles because that

369
00:16:00,679 --> 00:16:03,920
tells me every user in that slack

370
00:16:03,920 --> 00:16:06,199
workspace so now I have a very good long

371
00:16:06,199 --> 00:16:07,880
valid list of mutant

372
00:16:07,880 --> 00:16:12,740
for my password Jessie so one option we

373
00:16:12,740 --> 00:16:15,230
can do with invoke psychic strike is we

374
00:16:15,230 --> 00:16:17,330
give it that we give it the - extract

375
00:16:17,330 --> 00:16:19,700
user slag and in this case we limit the

376
00:16:19,700 --> 00:16:21,530
users to a thousand that's just to show

377
00:16:21,530 --> 00:16:24,380
you how to change those default limits

378
00:16:24,380 --> 00:16:26,660
and then the dot-dot-dot is really the

379
00:16:26,660 --> 00:16:28,430
fact that we still need to provide the

380
00:16:28,430 --> 00:16:31,430
URL the output folder and D cookie or

381
00:16:31,430 --> 00:16:33,410
token but I didn't want to tak that

382
00:16:33,410 --> 00:16:38,210
there so for that we end up with with

383
00:16:38,210 --> 00:16:40,250
inside the matter directory we have a

384
00:16:40,250 --> 00:16:42,440
user's folder and inside the user folder

385
00:16:42,440 --> 00:16:44,930
again as a JSON file for every user and

386
00:16:44,930 --> 00:16:48,700
it's named according to their user ID

387
00:16:48,700 --> 00:16:53,690
this unique alphanumeric here and each

388
00:16:53,690 --> 00:16:55,190
one of those Jason's if you look on the

389
00:16:55,190 --> 00:16:59,000
left it it has a lot of details about

390
00:16:59,000 --> 00:17:02,710
that user which I can't even read

391
00:17:02,710 --> 00:17:07,890
but it has like the profile image and

392
00:17:07,890 --> 00:17:12,670
their time zone and their name display

393
00:17:12,670 --> 00:17:14,800
name whether they're admin and then

394
00:17:14,800 --> 00:17:16,480
again at the end once it's downloaded

395
00:17:16,480 --> 00:17:18,730
all these user profiles it writes out

396
00:17:18,730 --> 00:17:20,770
this CSV file with all that stated - so

397
00:17:20,770 --> 00:17:22,800
if you open that up you've got this nice

398
00:17:22,800 --> 00:17:26,470
list in Excel of job titles phone

399
00:17:26,470 --> 00:17:28,600
numbers their names their display name

400
00:17:28,600 --> 00:17:31,060
which often is like their Active

401
00:17:31,060 --> 00:17:32,860
Directory user name because that's a

402
00:17:32,860 --> 00:17:34,450
easy thing that they fall to in a work

403
00:17:34,450 --> 00:17:37,600
environment so then you have a nice user

404
00:17:37,600 --> 00:17:39,040
name list that's different than their

405
00:17:39,040 --> 00:17:41,020
external user name and helps you when

406
00:17:41,020 --> 00:17:44,790
you get on the internal network and and

407
00:17:44,790 --> 00:17:47,160
information about whether they're admins

408
00:17:47,160 --> 00:17:49,510
so that's useful for building a user

409
00:17:49,510 --> 00:17:51,400
name list and also for targeting maybe

410
00:17:51,400 --> 00:17:54,100
we want to fish somebody and we really

411
00:17:54,100 --> 00:17:55,630
don't want to fish the head of IT

412
00:17:55,630 --> 00:17:57,160
because he's probably not gonna fall for

413
00:17:57,160 --> 00:17:59,320
it or maybe we do because he will I

414
00:17:59,320 --> 00:18:01,990
don't know and but that gives us some

415
00:18:01,990 --> 00:18:06,000
insight into who's who at the company

416
00:18:06,000 --> 00:18:09,220
another option you can just give the

417
00:18:09,220 --> 00:18:12,130
script the private only flag so that

418
00:18:12,130 --> 00:18:14,140
I'll only download information from

419
00:18:14,140 --> 00:18:16,300
private channels because you might think

420
00:18:16,300 --> 00:18:19,330
that people both more sensitive stuff in

421
00:18:19,330 --> 00:18:20,830
the private channel instead of the

422
00:18:20,830 --> 00:18:21,490
public

423
00:18:21,490 --> 00:18:23,470
and maybe you're in a hurry or I've

424
00:18:23,470 --> 00:18:25,120
limited disk space so you just tell it

425
00:18:25,120 --> 00:18:27,340
only give me the private channels or you

426
00:18:27,340 --> 00:18:29,440
can tell I'm only interested maybe

427
00:18:29,440 --> 00:18:32,020
there's you looked at your CSV file and

428
00:18:32,020 --> 00:18:35,049
there was three really interesting lis

429
00:18:35,049 --> 00:18:36,429
named channels

430
00:18:36,429 --> 00:18:38,830
and you're interested in what's in those

431
00:18:38,830 --> 00:18:40,539
channels and you can specify

432
00:18:40,539 --> 00:18:43,360
specifically those channel IDs you can

433
00:18:43,360 --> 00:18:45,730
also exclude certain channel IDs it's

434
00:18:45,730 --> 00:18:48,250
common for people that set up boss

435
00:18:48,250 --> 00:18:50,020
so automatic scripts that post to a

436
00:18:50,020 --> 00:18:51,700
slack channel you know maybe when a

437
00:18:51,700 --> 00:18:53,350
server goes up or down and those

438
00:18:53,350 --> 00:18:56,580
channels get extremely boring to read

439
00:18:56,580 --> 00:18:59,320
and there's millions of messages just

440
00:18:59,320 --> 00:19:01,360
like this server disconnected the server

441
00:19:01,360 --> 00:19:03,070
rebooted the server did that so you can

442
00:19:03,070 --> 00:19:04,570
Lance out and you see it's not posting

443
00:19:04,570 --> 00:19:06,370
passwords anything and then you you

444
00:19:06,370 --> 00:19:08,080
decided I really don't want to see a

445
00:19:08,080 --> 00:19:09,640
million of these messages or bother

446
00:19:09,640 --> 00:19:12,990
downloading so you can exclude channels

447
00:19:12,990 --> 00:19:17,649
from your extraction and then also if

448
00:19:17,649 --> 00:19:22,299
you're an admin if you the credentials

449
00:19:22,299 --> 00:19:24,730
you have a slack admin on a paid

450
00:19:24,730 --> 00:19:26,230
workspace this doesn't work for free

451
00:19:26,230 --> 00:19:28,240
workspaces but like an enterprise

452
00:19:28,240 --> 00:19:31,480
workspace you can also extract the

453
00:19:31,480 --> 00:19:34,659
access locks which is this - extract

454
00:19:34,659 --> 00:19:38,529
access logs option and you get a folder

455
00:19:38,529 --> 00:19:40,480
full of JSON files again and it tells

456
00:19:40,480 --> 00:19:44,020
you who connected at what time and from

457
00:19:44,020 --> 00:19:46,360
what IP and what the user agent is so as

458
00:19:46,360 --> 00:19:47,860
an attacker that's valuable to me

459
00:19:47,860 --> 00:19:49,740
because now I see where people are

460
00:19:49,740 --> 00:19:52,720
connecting from and you know whether

461
00:19:52,720 --> 00:19:54,370
it's their phone or their computer and

462
00:19:54,370 --> 00:19:56,260
the user agent string tells you

463
00:19:56,260 --> 00:19:57,850
interesting information about their

464
00:19:57,850 --> 00:19:59,309
system so you're going to know

465
00:19:59,309 --> 00:20:04,490
there is Windows or OSX or Linux and

466
00:20:04,490 --> 00:20:07,110
sometimes it will tell you more about

467
00:20:07,110 --> 00:20:09,240
the software what version of Office is

468
00:20:09,240 --> 00:20:15,179
being run and what browser they use okay

469
00:20:15,179 --> 00:20:19,110
so maybe I can't get the D cookie

470
00:20:19,110 --> 00:20:21,240
because the easiest way to get the D

471
00:20:21,240 --> 00:20:24,389
cookies to login in your browser and to

472
00:20:24,389 --> 00:20:27,379
read it from your browser but maybe I've

473
00:20:27,379 --> 00:20:29,429
exploited somebody's system and all I

474
00:20:29,429 --> 00:20:31,379
have is command line access so I can't

475
00:20:31,379 --> 00:20:34,619
bring up the chrome menu and look

476
00:20:34,619 --> 00:20:35,940
through it in your typical way because I

477
00:20:35,940 --> 00:20:38,549
only have command line access we can

478
00:20:38,549 --> 00:20:41,730
also just ghost out and search for their

479
00:20:41,730 --> 00:20:44,789
token because either one works for this

480
00:20:44,789 --> 00:20:48,029
extra psych extract and here's two

481
00:20:48,029 --> 00:20:51,779
examples on OS X we can grep for the

482
00:20:51,779 --> 00:20:54,299
token from the application directory or

483
00:20:54,299 --> 00:20:56,369
on Windows we can use PowerShell to

484
00:20:56,369 --> 00:20:59,639
search for it and then we can use a

485
00:20:59,639 --> 00:21:01,499
token instead of the D cookie so that's

486
00:21:01,499 --> 00:21:04,470
handy if you don't have graphical access

487
00:21:04,470 --> 00:21:07,220
to system

488
00:21:11,030 --> 00:21:13,460
okay so here's a demo of that whole

489
00:21:13,460 --> 00:21:16,780
thing working

490
00:21:19,700 --> 00:21:21,470
okay so we're logged into this slack

491
00:21:21,470 --> 00:21:23,390
extract workspace over here on the right

492
00:21:23,390 --> 00:21:25,970
and we've got a general channel which

493
00:21:25,970 --> 00:21:28,160
has like a picture of a carnival and

494
00:21:28,160 --> 00:21:31,610
this weird mask thing and then we've got

495
00:21:31,610 --> 00:21:33,710
a random Channel and it's got blue bird

496
00:21:33,710 --> 00:21:35,600
and some stickers and a pink unicorn

497
00:21:35,600 --> 00:21:40,750
pink rainbow uniform that's important so

498
00:21:40,750 --> 00:21:45,350
we're over on the Left we see I I using

499
00:21:45,350 --> 00:21:46,700
an option to write to the temp directory

500
00:21:46,700 --> 00:21:48,500
instead of the Documents folder in this

501
00:21:48,500 --> 00:21:50,600
case so we'll bring up the command

502
00:21:50,600 --> 00:21:51,260
prompt

503
00:21:51,260 --> 00:21:53,360
we've already imported suck extract so

504
00:21:53,360 --> 00:21:54,770
now we can just call it and Bob slack

505
00:21:54,770 --> 00:21:57,440
extract we give it the sake all of the

506
00:21:57,440 --> 00:21:59,780
slack extract I select I come an output

507
00:21:59,780 --> 00:22:02,840
folder of my extraction and we'll when

508
00:22:02,840 --> 00:22:04,100
we run this on the left you'll see that

509
00:22:04,100 --> 00:22:06,440
folder pop up and then we're telling it

510
00:22:06,440 --> 00:22:08,060
to put it in the C temp directory

511
00:22:08,060 --> 00:22:10,340
instead of the default My Documents and

512
00:22:10,340 --> 00:22:14,830
then we give it our token

513
00:22:19,650 --> 00:22:22,400
come on

514
00:22:29,550 --> 00:22:32,040
okay so we have here slack extraction up

515
00:22:32,040 --> 00:22:34,890
on the left and my extraction we get a

516
00:22:34,890 --> 00:22:39,870
folder for every channel and inside the

517
00:22:39,870 --> 00:22:42,960
folder we see a folder for files and

518
00:22:42,960 --> 00:22:46,080
messages we got all the messages for

519
00:22:46,080 --> 00:22:47,580
that channel there this is small for

520
00:22:47,580 --> 00:22:50,190
space and inside files we will see those

521
00:22:50,190 --> 00:22:51,840
files pop up as it downloads it

522
00:22:51,840 --> 00:22:53,550
downloads all messages from all channels

523
00:22:53,550 --> 00:22:55,440
first and files last so there we saw the

524
00:22:55,440 --> 00:22:57,930
pink unicorn show up we can go over to

525
00:22:57,930 --> 00:23:00,240
the random channel here we're

526
00:23:00,240 --> 00:23:02,100
downloading those images from the random

527
00:23:02,100 --> 00:23:03,720
channel they're at higher resolution so

528
00:23:03,720 --> 00:23:05,190
it takes a minute but there's a carnival

529
00:23:05,190 --> 00:23:11,850
and the image so now we have a like many

530
00:23:11,850 --> 00:23:14,730
gigabytes of information that's probably

531
00:23:14,730 --> 00:23:18,120
sensitive to the company that in my case

532
00:23:18,120 --> 00:23:26,880
that I'm testing and we're also gonna

533
00:23:26,880 --> 00:23:30,540
extract users so I added in seed over

534
00:23:30,540 --> 00:23:33,180
here on the right I added a - extract -

535
00:23:33,180 --> 00:23:35,300
users and now I've got a users directory

536
00:23:35,300 --> 00:23:38,580
and I can open up the all users and I

537
00:23:38,580 --> 00:23:40,560
see that spreadsheet pull up here's all

538
00:23:40,560 --> 00:23:42,390
the users of this workspace and their

539
00:23:42,390 --> 00:23:44,340
title if if they've entered that for the

540
00:23:44,340 --> 00:23:45,960
profile they're really user

541
00:23:45,960 --> 00:23:51,440
they're images so that's that's candy so

542
00:23:51,440 --> 00:23:54,869
now I have an offline copy of this data

543
00:23:54,869 --> 00:23:56,999
I can look through and see if any like

544
00:23:56,999 --> 00:23:59,159
files are called password txt or

545
00:23:59,159 --> 00:24:02,970
anything or I can search through the

546
00:24:02,970 --> 00:24:05,610
text and look for the word password or

547
00:24:05,610 --> 00:24:09,389
you know for Amazon s3 keys or anything

548
00:24:09,389 --> 00:24:10,710
that might be sensitive in that

549
00:24:10,710 --> 00:24:14,340
environment so if you go to the week

550
00:24:14,340 --> 00:24:17,549
that wiki on my github page there's two

551
00:24:17,549 --> 00:24:19,049
helpful pages there one is the

552
00:24:19,049 --> 00:24:21,749
authorization page and that goes through

553
00:24:21,749 --> 00:24:23,249
all that we talked about here some

554
00:24:23,249 --> 00:24:25,289
commands you can run to get the D cookie

555
00:24:25,289 --> 00:24:27,749
or the token and that video is also

556
00:24:27,749 --> 00:24:29,549
there how to extract it be cookie from

557
00:24:29,549 --> 00:24:33,029
the browser so you'll be able to use

558
00:24:33,029 --> 00:24:38,100
this script and then also there's some

559
00:24:38,100 --> 00:24:40,379
helpful information on how to grip

560
00:24:40,379 --> 00:24:42,029
through the results and I say grip

561
00:24:42,029 --> 00:24:43,730
through their results because you're

562
00:24:43,730 --> 00:24:46,350
running this on a Windows system which

563
00:24:46,350 --> 00:24:48,840
doesn't have grep but you might have

564
00:24:48,840 --> 00:24:51,779
grep there you know you might have

565
00:24:51,779 --> 00:24:53,759
installed the little boot - app or

566
00:24:53,759 --> 00:24:55,470
something and half prep but the problem

567
00:24:55,470 --> 00:24:57,779
is the script writes in default

568
00:24:57,779 --> 00:24:59,820
powershell output

569
00:24:59,820 --> 00:25:02,429
formatting which is utf-16 so if you

570
00:25:02,429 --> 00:25:04,379
grab for a word that you know is in

571
00:25:04,379 --> 00:25:05,999
there because you can see it this just

572
00:25:05,999 --> 00:25:07,289
doesn't really turn it and makes you

573
00:25:07,289 --> 00:25:10,139
really frustrating but hmm so I give

574
00:25:10,139 --> 00:25:12,330
some helpful hints

575
00:25:12,330 --> 00:25:14,400
wikipage of how to basically use

576
00:25:14,400 --> 00:25:16,730
PowerShell to do grep for you because it

577
00:25:16,730 --> 00:25:18,840
understands that format or you could

578
00:25:18,840 --> 00:25:21,240
change the script output in ascii if you

579
00:25:21,240 --> 00:25:22,340
wanted instead

580
00:25:22,340 --> 00:25:26,370
but here's useful searches you might

581
00:25:26,370 --> 00:25:28,289
want to do and examples of how to grip

582
00:25:28,289 --> 00:25:30,210
with powershell so if you wanted to

583
00:25:30,210 --> 00:25:33,510
extract all the user names you could use

584
00:25:33,510 --> 00:25:35,700
this powershell where you recursively go

585
00:25:35,700 --> 00:25:39,320
through the director here in and select

586
00:25:39,320 --> 00:25:43,980
name from the users directory or you can

587
00:25:43,980 --> 00:25:46,140
extract email addresses you can distract

588
00:25:46,140 --> 00:25:51,450
job titles and names and write just the

589
00:25:51,450 --> 00:25:53,130
names to a file so i like that one

590
00:25:53,130 --> 00:25:54,900
because now I can take that list of

591
00:25:54,900 --> 00:25:57,710
names and go back and password to dragon

592
00:25:57,710 --> 00:26:01,110
on some external portal and have more

593
00:26:01,110 --> 00:26:03,780
success with a bigger username list and

594
00:26:03,780 --> 00:26:07,650
then so the advantages of using slack

595
00:26:07,650 --> 00:26:10,860
extract are we quickly get all the data

596
00:26:10,860 --> 00:26:14,070
on our system so if we lose access we

597
00:26:14,070 --> 00:26:17,820
still have all that data also is there's

598
00:26:17,820 --> 00:26:20,309
a potential that the network defenders

599
00:26:20,309 --> 00:26:23,610
you know have queued up some keywords if

600
00:26:23,610 --> 00:26:25,530
they see people searching for password

601
00:26:25,530 --> 00:26:27,960
through the like web interface is that

602
00:26:27,960 --> 00:26:29,429
goes through slack itself but they see

603
00:26:29,429 --> 00:26:30,929
people searching for they sensitive

604
00:26:30,929 --> 00:26:34,470
words they might alert so as a red

605
00:26:34,470 --> 00:26:36,870
teamer I want to avoid searching for

606
00:26:36,870 --> 00:26:38,580
things that might alert and if I do that

607
00:26:38,580 --> 00:26:39,289
offline

608
00:26:39,289 --> 00:26:43,130
they won't see what I'm looking for and

609
00:26:43,130 --> 00:26:45,799
again if I lose access I still have all

610
00:26:45,799 --> 00:26:50,780
those files and trying to look through

611
00:26:50,780 --> 00:26:53,919
files online is really slow and painful

612
00:26:53,919 --> 00:26:56,600
because you have to slowly scroll back

613
00:26:56,600 --> 00:26:57,919
through and right click and download

614
00:26:57,919 --> 00:27:00,470
each file but now we have all this class

615
00:27:00,470 --> 00:27:03,500
hold down and and we can do quicker and

616
00:27:03,500 --> 00:27:05,870
more powerful searches with grabber

617
00:27:05,870 --> 00:27:14,000
power to powershell creping now is where

618
00:27:14,000 --> 00:27:15,650
i turn the time over to Tony he's going

619
00:27:15,650 --> 00:27:19,250
to talk about so now you know that these

620
00:27:19,250 --> 00:27:22,240
kind of tools exist for attackers to

621
00:27:22,240 --> 00:27:25,010
quickly pull a lot of sensitive

622
00:27:25,010 --> 00:27:27,020
information from your network so it'd be

623
00:27:27,020 --> 00:27:30,380
good as defenders if we knew how to

624
00:27:30,380 --> 00:27:32,750
watch for this detect it so that we

625
00:27:32,750 --> 00:27:34,100
would know and the account was

626
00:27:34,100 --> 00:27:37,360
compromised and that's what Tony

627
00:27:38,909 --> 00:27:43,090
so now that we know that all of this

628
00:27:43,090 --> 00:27:44,409
stuff can be pulled out it's like we had

629
00:27:44,409 --> 00:27:46,210
to come up with a way to figure out how

630
00:27:46,210 --> 00:27:48,520
to detect what's going on

631
00:27:48,520 --> 00:27:50,799
we of course sat down with Kari she

632
00:27:50,799 --> 00:27:52,690
taught us the script inside now we all

633
00:27:52,690 --> 00:27:53,980
looked at it went through it really

634
00:27:53,980 --> 00:27:55,270
carefully that's something I really

635
00:27:55,270 --> 00:27:56,650
encourage you to do go look at the

636
00:27:56,650 --> 00:28:01,419
scripts go look at the API methods there

637
00:28:01,419 --> 00:28:05,230
there are two basic types of audits or

638
00:28:05,230 --> 00:28:07,720
logging api's that you're hitting you

639
00:28:07,720 --> 00:28:09,730
have your standard API so that a user is

640
00:28:09,730 --> 00:28:10,840
going to be using and then you have your

641
00:28:10,840 --> 00:28:12,940
audit log api's which you'll have to

642
00:28:12,940 --> 00:28:14,440
have a paid Enterprise Grid didn't use

643
00:28:14,440 --> 00:28:17,770
most of that the audit log api's can

644
00:28:17,770 --> 00:28:19,900
give you access to areas that you're

645
00:28:19,900 --> 00:28:22,179
just not going to have as a free slack

646
00:28:22,179 --> 00:28:24,070
account it's just not going to be in

647
00:28:24,070 --> 00:28:26,770
there to use it you do have to be an app

648
00:28:26,770 --> 00:28:29,169
owner or an admin so the general user

649
00:28:29,169 --> 00:28:30,640
can't use the audit log after start

650
00:28:30,640 --> 00:28:32,289
scraping through your slack because of

651
00:28:32,289 --> 00:28:33,400
course then you're looking at it inside

652
00:28:33,400 --> 00:28:37,059
of trust issues so once you decide

653
00:28:37,059 --> 00:28:39,280
you've got the data what are you going

654
00:28:39,280 --> 00:28:40,179
to do it that are you gonna build a

655
00:28:40,179 --> 00:28:41,740
custom learning module or you gonna pipe

656
00:28:41,740 --> 00:28:43,659
it into your scene you really have to

657
00:28:43,659 --> 00:28:45,340
decide what is best for your

658
00:28:45,340 --> 00:28:46,780
organization look best for your

659
00:28:46,780 --> 00:28:51,909
presentation so as I said you have the

660
00:28:51,909 --> 00:28:54,580
audit log API on the standard API we can

661
00:28:54,580 --> 00:28:56,679
do as admins of a payment account you

662
00:28:56,679 --> 00:28:58,780
can use the standard API to do the calls

663
00:28:58,780 --> 00:29:02,470
like the one Kerry was talking about the

664
00:29:02,470 --> 00:29:05,380
event audits or the event logs which

665
00:29:05,380 --> 00:29:08,169
says for this one a user logged in and

666
00:29:08,169 --> 00:29:10,659
it gives me a the first time it was seen

667
00:29:10,659 --> 00:29:11,800
and the last time

668
00:29:11,800 --> 00:29:13,210
scene and that's the first time the

669
00:29:13,210 --> 00:29:15,310
combination of the user-agent the IP

670
00:29:15,310 --> 00:29:18,310
address the user sometimes of other

671
00:29:18,310 --> 00:29:21,190
metadata has been used in combination to

672
00:29:21,190 --> 00:29:23,620
log in as well as the most recent time

673
00:29:23,620 --> 00:29:25,630
that combination has been used so that

674
00:29:25,630 --> 00:29:27,820
can be good but our audit logs give a

675
00:29:27,820 --> 00:29:29,770
better more accurate information they

676
00:29:29,770 --> 00:29:31,720
break things down into an action and act

677
00:29:31,720 --> 00:29:35,260
or an entity and context format so in

678
00:29:35,260 --> 00:29:37,180
this case because this is a log in or a

679
00:29:37,180 --> 00:29:39,490
log out of it our actor and entity are

680
00:29:39,490 --> 00:29:41,380
gonna be the same exact information if

681
00:29:41,380 --> 00:29:43,690
for example were striped me out all the

682
00:29:43,690 --> 00:29:45,880
files it's actually gonna have an actor

683
00:29:45,880 --> 00:29:47,260
the entity is gonna be the file

684
00:29:47,260 --> 00:29:48,610
information so you're looking at the

685
00:29:48,610 --> 00:29:51,780
file ID inside of slack the file name

686
00:29:51,780 --> 00:29:54,430
other descriptors about and what type of

687
00:29:54,430 --> 00:29:58,810
file it is so this is a real basic

688
00:29:58,810 --> 00:30:01,240
breakdown of what we've got we have your

689
00:30:01,240 --> 00:30:03,190
audit log API so really require an owner

690
00:30:03,190 --> 00:30:05,140
or an admin account on the paid

691
00:30:05,140 --> 00:30:07,300
enterprise grids it's designed for

692
00:30:07,300 --> 00:30:10,360
monitoring not real interaction so

693
00:30:10,360 --> 00:30:11,800
you're not gonna be pushing stuff to

694
00:30:11,800 --> 00:30:13,630
slack but these accounts there are these

695
00:30:13,630 --> 00:30:15,520
tokens because you are doing all of this

696
00:30:15,520 --> 00:30:18,940
with token passing it separates logs

697
00:30:18,940 --> 00:30:20,770
your login event is gonna be separate

698
00:30:20,770 --> 00:30:22,150
from your log out okay it's not going to

699
00:30:22,150 --> 00:30:24,970
be like the event logs that says hey I

700
00:30:24,970 --> 00:30:26,470
logged in and this is the last time I

701
00:30:26,470 --> 00:30:28,450
saw this pattern you're gonna have

702
00:30:28,450 --> 00:30:31,690
downloaded files uploaded files Stanford

703
00:30:31,690 --> 00:30:33,250
and corporate exports if you already

704
00:30:33,250 --> 00:30:36,040
have a corporate a corporate environment

705
00:30:36,040 --> 00:30:38,860
for slack you can actually export all

706
00:30:38,860 --> 00:30:41,530
these logs for different compliances so

707
00:30:41,530 --> 00:30:41,870
they

708
00:30:41,870 --> 00:30:43,250
have those you can actually see when

709
00:30:43,250 --> 00:30:44,780
that was done to see if maybe a user who

710
00:30:44,780 --> 00:30:47,570
shouldn't be downloading them is users

711
00:30:47,570 --> 00:30:49,520
joining the channel and role changes if

712
00:30:49,520 --> 00:30:51,170
you're watching for administrative

713
00:30:51,170 --> 00:30:54,050
changes hey what account got accessed

714
00:30:54,050 --> 00:30:55,520
and then got elevated that shouldn't

715
00:30:55,520 --> 00:30:57,550
happen you can access it through there

716
00:30:57,550 --> 00:31:00,590
your standard API met methods are gonna

717
00:31:00,590 --> 00:31:02,540
be accessible to any user they're

718
00:31:02,540 --> 00:31:04,730
designed for user interaction so viewing

719
00:31:04,730 --> 00:31:07,520
messages sending messages uploading

720
00:31:07,520 --> 00:31:09,650
files downloading files as I said

721
00:31:09,650 --> 00:31:11,500
they're going to be less comprehensive

722
00:31:11,500 --> 00:31:15,800
so it doesn't really allow for checking

723
00:31:15,800 --> 00:31:21,650
good logging it's not a great method so

724
00:31:21,650 --> 00:31:23,300
we had to learn our source and call the

725
00:31:23,300 --> 00:31:23,660
API

726
00:31:23,660 --> 00:31:25,400
one thing we noticed is that the

727
00:31:25,400 --> 00:31:27,710
autoblog API uses a bearer token to pass

728
00:31:27,710 --> 00:31:31,000
things that means that the token

729
00:31:31,000 --> 00:31:32,960
actually has to be passed as a header

730
00:31:32,960 --> 00:31:34,429
value which I'll get to here in just a

731
00:31:34,429 --> 00:31:35,150
minute

732
00:31:35,150 --> 00:31:37,610
the token can be a little problematic to

733
00:31:37,610 --> 00:31:40,370
set up so just as some points make sure

734
00:31:40,370 --> 00:31:41,690
that you read the documentation that

735
00:31:41,690 --> 00:31:43,370
slacks got online and it's got some good

736
00:31:43,370 --> 00:31:45,740
documentation set aside a whole bunch of

737
00:31:45,740 --> 00:31:47,210
extra time to work on it and be prepared

738
00:31:47,210 --> 00:31:49,610
to contact slack I mean have their email

739
00:31:49,610 --> 00:31:50,929
address already ready for support

740
00:31:50,929 --> 00:31:52,790
because there's a really good chance

741
00:31:52,790 --> 00:31:53,960
you're gonna have to reach out to them

742
00:31:53,960 --> 00:31:56,300
about the token it may not generate the

743
00:31:56,300 --> 00:31:58,730
first time first five times you do it

744
00:31:58,730 --> 00:32:00,320
just know you may have to contact them

745
00:32:00,320 --> 00:32:01,429
they may have to give you some extra

746
00:32:01,429 --> 00:32:05,210
tips copy and paste is your friend and I

747
00:32:05,210 --> 00:32:07,550
know the seeds dumb but you may write

748
00:32:07,550 --> 00:32:10,790
for example user underscore logout very

749
00:32:10,790 --> 00:32:12,679
basic you can't really mess that up when

750
00:32:12,679 --> 00:32:14,480
you type it but you're gonna type it in

751
00:32:14,480 --> 00:32:16,550
you're gonna hit Send and it's not gonna

752
00:32:16,550 --> 00:32:19,400
work but if you copy it straight off

753
00:32:19,400 --> 00:32:21,290
their webpage or copy it out of notepad

754
00:32:21,290 --> 00:32:23,570
it works just fine we haven't figured

755
00:32:23,570 --> 00:32:25,880
out why this is something we noticed

756
00:32:25,880 --> 00:32:27,470
I've spoken with other people

757
00:32:27,470 --> 00:32:29,480
they've seen it - four of us tried it in

758
00:32:29,480 --> 00:32:31,070
multiple different browsers multiple

759
00:32:31,070 --> 00:32:33,890
different compilers didn't matter we

760
00:32:33,890 --> 00:32:35,600
just can't tell you why exactly that

761
00:32:35,600 --> 00:32:41,090
works so calling the API this is where I

762
00:32:41,090 --> 00:32:42,500
was talking about the bearer token

763
00:32:42,500 --> 00:32:44,450
you're gonna have proxies if you have

764
00:32:44,450 --> 00:32:46,370
any on your network you're gonna be

765
00:32:46,370 --> 00:32:49,580
calling directly to slack API comm if

766
00:32:49,580 --> 00:32:52,370
you notice it's Carey's script you're

767
00:32:52,370 --> 00:32:54,980
actually calling into the organization

768
00:32:54,980 --> 00:32:56,750
dot slack comm or whatever your

769
00:32:56,750 --> 00:32:59,270
workspace is called you're hitting the

770
00:32:59,270 --> 00:33:00,770
API directly for all the audit log

771
00:33:00,770 --> 00:33:03,559
information we're gonna normally be

772
00:33:03,559 --> 00:33:05,059
passing it as an application forward

773
00:33:05,059 --> 00:33:07,760
slash Jason and then we're gonna pass it

774
00:33:07,760 --> 00:33:09,380
the action is this a login is this a

775
00:33:09,380 --> 00:33:11,210
file download is this a walk out of it

776
00:33:11,210 --> 00:33:12,950
we have to pass it what event we're

777
00:33:12,950 --> 00:33:15,289
wanting to look at when we do this we

778
00:33:15,289 --> 00:33:18,320
have a 9999 limit which is the default

779
00:33:18,320 --> 00:33:19,970
for slack but you can actually set it

780
00:33:19,970 --> 00:33:21,320
lower if you're looking for very

781
00:33:21,320 --> 00:33:23,360
specific information and it has some

782
00:33:23,360 --> 00:33:24,860
other options you can pass like I only

783
00:33:24,860 --> 00:33:27,340
want stuff within the last seven days

784
00:33:27,340 --> 00:33:29,750
but if you notice we go down here we

785
00:33:29,750 --> 00:33:31,820
have a we have a header token and that's

786
00:33:31,820 --> 00:33:33,799
actually the bearer token that's where

787
00:33:33,799 --> 00:33:35,330
I've made a function that just passes my

788
00:33:35,330 --> 00:33:37,429
bearer token to me into that variable

789
00:33:37,429 --> 00:33:39,080
and I actually have to pass it as a

790
00:33:39,080 --> 00:33:42,049
headers item if I don't it's not going

791
00:33:42,049 --> 00:33:44,990
to return anything this was consistent

792
00:33:44,990 --> 00:33:48,260
not only here in Python but also in our

793
00:33:48,260 --> 00:33:49,880
powershell we went through and recreated

794
00:33:49,880 --> 00:33:51,260
this with powershell just because some

795
00:33:51,260 --> 00:33:52,549
people don't like python some people

796
00:33:52,549 --> 00:33:53,900
like our show I'll give it to you in

797
00:33:53,900 --> 00:33:56,450
both so here if you notice I've got a

798
00:33:56,450 --> 00:33:59,510
headers item or a headers variable and I

799
00:33:59,510 --> 00:34:02,390
actually add that token as an extra item

800
00:34:02,390 --> 00:34:03,520
I can't

801
00:34:03,520 --> 00:34:05,770
I can't just shove everything into it

802
00:34:05,770 --> 00:34:07,990
didn't want to return that but added a

803
00:34:07,990 --> 00:34:09,550
separate item when without through hero

804
00:34:09,550 --> 00:34:13,560
blue - headers headers works just fine

805
00:34:13,560 --> 00:34:16,270
and as you can see just from the

806
00:34:16,270 --> 00:34:17,649
PowerShell you'll see the results down

807
00:34:17,649 --> 00:34:19,418
here we give it 200 back and then we

808
00:34:19,418 --> 00:34:21,070
start getting the JSON format out of the

809
00:34:21,070 --> 00:34:23,679
content we get that with the Python also

810
00:34:23,679 --> 00:34:26,159
but it's gonna be piped into a variable

811
00:34:26,159 --> 00:34:28,360
so if we take this information either

812
00:34:28,360 --> 00:34:30,219
from powershell for python pipe it into

813
00:34:30,219 --> 00:34:32,620
a simple text document or jason document

814
00:34:32,620 --> 00:34:34,449
you'll see the exact same type of output

815
00:34:34,449 --> 00:34:37,810
we're looking at with kerry script and

816
00:34:37,810 --> 00:34:38,980
you're gonna see this too broken down

817
00:34:38,980 --> 00:34:41,380
into the actor that entity the context

818
00:34:41,380 --> 00:34:43,750
all of it breaks down you also have your

819
00:34:43,750 --> 00:34:45,340
user agent at the bottom and a lot of

820
00:34:45,340 --> 00:34:46,840
times you're gonna have to log in on key

821
00:34:46,840 --> 00:34:48,909
so for login logout you're gonna see

822
00:34:48,909 --> 00:34:50,469
that external IP where they connected to

823
00:34:50,469 --> 00:34:56,949
from that can be a good indicator so

824
00:34:56,949 --> 00:34:58,450
once we have the data we had to figure

825
00:34:58,450 --> 00:34:59,530
out what to do with it

826
00:34:59,530 --> 00:35:01,330
what are we gonna do slack generally

827
00:35:01,330 --> 00:35:04,600
uses a structured database so of course

828
00:35:04,600 --> 00:35:06,550
most people think a sequel is the way to

829
00:35:06,550 --> 00:35:09,520
go but it's not every now and then slack

830
00:35:09,520 --> 00:35:10,870
will go through and they're like hey we

831
00:35:10,870 --> 00:35:13,030
didn't include this item that's really

832
00:35:13,030 --> 00:35:14,770
important for logging so we're gonna add

833
00:35:14,770 --> 00:35:17,380
it to the structure that's great unless

834
00:35:17,380 --> 00:35:18,670
you're using a structured database

835
00:35:18,670 --> 00:35:20,230
then you had to go rebuild the tables at

836
00:35:20,230 --> 00:35:22,510
new call so we went with

837
00:35:22,510 --> 00:35:25,569
kibana what are we gonna do with our

838
00:35:25,569 --> 00:35:26,650
results we're gonna pipe it into the

839
00:35:26,650 --> 00:35:27,790
bomb and we're gonna look at it

840
00:35:27,790 --> 00:35:31,180
we're gonna use the last dessert so we

841
00:35:31,180 --> 00:35:32,950
took our elasticsearch and our phone and

842
00:35:32,950 --> 00:35:34,720
if you can see here you can see a real

843
00:35:34,720 --> 00:35:36,339
quick patter and we could review okay

844
00:35:36,339 --> 00:35:38,559
you know the weeks are busier we can see

845
00:35:38,559 --> 00:35:41,890
that we're happening to key off of file

846
00:35:41,890 --> 00:35:43,930
downloads for this specific instance

847
00:35:43,930 --> 00:35:47,819
because we're looking for identifiers so

848
00:35:47,819 --> 00:35:50,710
if we're wanting to really quickly you

849
00:35:50,710 --> 00:35:52,990
are our talk stalkers who downloads the

850
00:35:52,990 --> 00:35:55,210
most files we could fairly very quickly

851
00:35:55,210 --> 00:35:57,400
in kobata switch over to a visualization

852
00:35:57,400 --> 00:35:59,710
tab say give me all the information on

853
00:35:59,710 --> 00:36:02,859
the count of the users so here you can

854
00:36:02,859 --> 00:36:05,290
actually see the user ID which we'll get

855
00:36:05,290 --> 00:36:07,720
to here in a second as well as a count

856
00:36:07,720 --> 00:36:11,309
of how many files each person downloaded

857
00:36:11,309 --> 00:36:14,740
so when we're looking at it the user ID

858
00:36:14,740 --> 00:36:16,720
was our key item well you have to figure

859
00:36:16,720 --> 00:36:18,760
out what what can we keep of what

860
00:36:18,760 --> 00:36:21,309
doesn't change the user ID field

861
00:36:21,309 --> 00:36:23,619
happened to be it and as you can see in

862
00:36:23,619 --> 00:36:25,000
some of our testing here we have this

863
00:36:25,000 --> 00:36:28,450
user ID up here that ends in ds8 and

864
00:36:28,450 --> 00:36:31,630
they downloaded 741 files in 30 minutes

865
00:36:31,630 --> 00:36:34,840
most users aren't going to be

866
00:36:34,840 --> 00:36:38,530
that fast effort so we went down we have

867
00:36:38,530 --> 00:36:40,270
some information I want to know what the

868
00:36:40,270 --> 00:36:43,090
username is associated with this idea

869
00:36:43,090 --> 00:36:45,130
because I don't know who it is so I said

870
00:36:45,130 --> 00:36:47,140
let's take a look at that in Ulsan it's

871
00:36:47,140 --> 00:36:50,830
Kerry Roberts and its compliance experts

872
00:36:50,830 --> 00:36:53,470
and it's Tony hamburgers metric script

873
00:36:53,470 --> 00:36:55,750
please ignore and not Kerry Roberts so

874
00:36:55,750 --> 00:36:59,140
we knew it was Kerry if she changes her

875
00:36:59,140 --> 00:37:00,820
email if the user changes their email

876
00:37:00,820 --> 00:37:02,830
their ID world or their username I'm

877
00:37:02,830 --> 00:37:04,780
sorry we're gonna notice based off that

878
00:37:04,780 --> 00:37:07,960
ID so a clever adversary might go in

879
00:37:07,960 --> 00:37:09,520
here and name something compliance

880
00:37:09,520 --> 00:37:11,350
exports because that's a bot you would

881
00:37:11,350 --> 00:37:14,080
expect it to be a body but it's not it's

882
00:37:14,080 --> 00:37:16,210
an actual user ID so that's why we can

883
00:37:16,210 --> 00:37:18,550
look at all of the data we've seen if we

884
00:37:18,550 --> 00:37:20,170
see it up tick all of sudden who had

885
00:37:20,170 --> 00:37:22,720
this ID six months ago because that's

886
00:37:22,720 --> 00:37:27,700
probably gonna be the actual user so we

887
00:37:27,700 --> 00:37:29,230
decided we wanted to build some custom

888
00:37:29,230 --> 00:37:31,150
alerting with ours before we go up tight

889
00:37:31,150 --> 00:37:32,380
to get into a seam let's make sure that

890
00:37:32,380 --> 00:37:33,670
we're triggering on the right

891
00:37:33,670 --> 00:37:36,190
information so we actually went in here

892
00:37:36,190 --> 00:37:38,380
and built with Python a very simple

893
00:37:38,380 --> 00:37:43,480
custom learning module we looked for

894
00:37:43,480 --> 00:37:45,820
what we looked up the data to start off

895
00:37:45,820 --> 00:37:47,290
with and said hey what can we see that

896
00:37:47,290 --> 00:37:48,820
we know for a fact is a flat-out false

897
00:37:48,820 --> 00:37:50,490
positive let's not looking to do that

898
00:37:50,490 --> 00:37:52,630
then we went through and said okay how

899
00:37:52,630 --> 00:37:54,160
can we start tuning this to see only

900
00:37:54,160 --> 00:37:56,260
true positives for more true positives

901
00:37:56,260 --> 00:37:58,390
so we've built a basic alerting rule

902
00:37:58,390 --> 00:38:01,870
then we built a basic email system and

903
00:38:01,870 --> 00:38:03,280
all it doesn't say hey when the alert

904
00:38:03,280 --> 00:38:05,290
triggers email me something and I made

905
00:38:05,290 --> 00:38:07,600
it extremely simple all I wanted to do

906
00:38:07,600 --> 00:38:09,820
was see what was coming in get the

907
00:38:09,820 --> 00:38:11,140
alerts that way we can act on them and

908
00:38:11,140 --> 00:38:14,020
move so I literally only get the ID and

909
00:38:14,020 --> 00:38:16,360
how many files are that's it it doesn't

910
00:38:16,360 --> 00:38:18,310
have to be fancy just it has to be

911
00:38:18,310 --> 00:38:21,220
functional once I do that I can pop it

912
00:38:21,220 --> 00:38:23,800
into Mike the bottom workspace simple

913
00:38:23,800 --> 00:38:25,440
thing pop in the user ID

914
00:38:25,440 --> 00:38:27,490
narrow down the time field what do I

915
00:38:27,490 --> 00:38:30,010
have I have Kerry Roberts downloading a

916
00:38:30,010 --> 00:38:32,049
thousand files so I know that somebody

917
00:38:32,049 --> 00:38:35,589
transcript with Gary Roberts ID just

918
00:38:35,589 --> 00:38:37,029
pulled down with a thousand files it was

919
00:38:37,029 --> 00:38:38,769
a very quick easy thing to do if you do

920
00:38:38,769 --> 00:38:40,150
it every five minutes if you wanted or

921
00:38:40,150 --> 00:38:45,699
even you're so automation when you're

922
00:38:45,699 --> 00:38:47,049
going through I've been talking about

923
00:38:47,049 --> 00:38:48,549
the different types of api's and

924
00:38:48,549 --> 00:38:51,059
primarily focused on the audit log API

925
00:38:51,059 --> 00:38:53,890
when you build an audit log API token

926
00:38:53,890 --> 00:38:56,259
you actually agree with slack that you

927
00:38:56,259 --> 00:38:58,119
will not hard code this token anywhere

928
00:38:58,119 --> 00:38:59,529
which is one thing we have to do we

929
00:38:59,529 --> 00:39:00,969
could not put it a number straight up

930
00:39:00,969 --> 00:39:06,400
scripts you can't work so we have to

931
00:39:06,400 --> 00:39:08,709
keep that in mind we also have to keep

932
00:39:08,709 --> 00:39:09,549
in mind that we're gonna have to

933
00:39:09,549 --> 00:39:11,890
regularly as a blue team rotate these

934
00:39:11,890 --> 00:39:13,599
tokens because these tokens can straight

935
00:39:13,599 --> 00:39:15,910
from any single channel all user

936
00:39:15,910 --> 00:39:18,390
information we can we can collect

937
00:39:18,390 --> 00:39:20,410
significantly more information or you

938
00:39:20,410 --> 00:39:23,619
have to keep them safe one way is treat

939
00:39:23,619 --> 00:39:24,459
it like a password

940
00:39:24,459 --> 00:39:28,239
rotate it so automate what we can that

941
00:39:28,239 --> 00:39:29,619
that seems like a no-brainer we

942
00:39:29,619 --> 00:39:31,179
automated everything we could we

943
00:39:31,179 --> 00:39:32,979
automated the script to go out and call

944
00:39:32,979 --> 00:39:35,589
the api's we automated it putting it

945
00:39:35,589 --> 00:39:37,479
into the databases and then we automated

946
00:39:37,479 --> 00:39:41,410
the alerting system then that allowed us

947
00:39:41,410 --> 00:39:44,650
to look at the very quick and very messy

948
00:39:44,650 --> 00:39:46,509
sometimes alerts we were getting the

949
00:39:46,509 --> 00:39:48,939
late false positives I mean some of you

950
00:39:48,939 --> 00:39:51,189
could see like why are there 20,000

951
00:39:51,189 --> 00:39:53,619
downloads oh I see why there are 20,000

952
00:39:53,619 --> 00:39:56,549
downloads that's normal

953
00:39:58,190 --> 00:40:00,750
so we did have some hurdles with this

954
00:40:00,750 --> 00:40:04,470
whole process not all the API logs are

955
00:40:04,470 --> 00:40:06,270
called when I said that we were focused

956
00:40:06,270 --> 00:40:08,910
more on the files downloads that's

957
00:40:08,910 --> 00:40:12,300
because the message downloads weren't

958
00:40:12,300 --> 00:40:15,720
logged so there are some api's that

959
00:40:15,720 --> 00:40:17,940
aren't locked they could be called too

960
00:40:17,940 --> 00:40:19,320
we can't detect it

961
00:40:19,320 --> 00:40:21,060
slack's already aware of this and has

962
00:40:21,060 --> 00:40:23,430
been working on this but like Esther and

963
00:40:23,430 --> 00:40:24,780
I said we can't speak on behalf of

964
00:40:24,780 --> 00:40:26,460
anybody all we can tell you is the

965
00:40:26,460 --> 00:40:30,360
limited knowledge we have so optimize

966
00:40:30,360 --> 00:40:32,100
your data from the start when you're

967
00:40:32,100 --> 00:40:33,780
building a database a large database

968
00:40:33,780 --> 00:40:34,890
does anybody can tell you it's gonna

969
00:40:34,890 --> 00:40:36,510
start being harder and harder to query

970
00:40:36,510 --> 00:40:38,940
break it up break it up into chunks if

971
00:40:38,940 --> 00:40:40,680
you're using last to search or Cubana

972
00:40:40,680 --> 00:40:43,860
break up your indexes it doesn't take so

973
00:40:43,860 --> 00:40:46,110
much CPU to start scraping through and

974
00:40:46,110 --> 00:40:48,000
you don't wind up doing like I did at

975
00:40:48,000 --> 00:40:49,590
least once or twice and killing your

976
00:40:49,590 --> 00:40:50,820
whole database and rebuilding all your

977
00:40:50,820 --> 00:40:56,070
structures DLP data loss prevention make

978
00:40:56,070 --> 00:40:57,720
sure you're monitoring for the loss of

979
00:40:57,720 --> 00:41:00,270
tokens or D cookies those leaving your

980
00:41:00,270 --> 00:41:02,280
network when they're not being called is

981
00:41:02,280 --> 00:41:04,680
pretty significant if you're seeing some

982
00:41:04,680 --> 00:41:06,330
of these API calls being used with a

983
00:41:06,330 --> 00:41:08,880
user token from inside your environment

984
00:41:08,880 --> 00:41:10,320
that's probably not a good thing

985
00:41:10,320 --> 00:41:12,450
because general users won't be using

986
00:41:12,450 --> 00:41:15,090
these methods just inside your

987
00:41:15,090 --> 00:41:17,600
environment

988
00:41:17,970 --> 00:41:21,150
so lock discrepancies we noticed this

989
00:41:21,150 --> 00:41:24,900
and we looked at this multiple times run

990
00:41:24,900 --> 00:41:26,250
multiple different scripts to get it in

991
00:41:26,250 --> 00:41:27,420
different formats and we could look at

992
00:41:27,420 --> 00:41:29,790
it there are 25 times 4 log outs than

993
00:41:29,790 --> 00:41:33,450
logins that kind of threw us for a loop

994
00:41:33,450 --> 00:41:35,130
so some of the logs do have

995
00:41:35,130 --> 00:41:36,450
discrepancies when you're looking at it

996
00:41:36,450 --> 00:41:38,520
well I should have one log in for every

997
00:41:38,520 --> 00:41:40,290
log out that may not be true so if

998
00:41:40,290 --> 00:41:43,530
you're seeing a large variance get what

999
00:41:43,530 --> 00:41:45,300
somebody else have them see if they're

1000
00:41:45,300 --> 00:41:46,829
seeing the same thing it may not just be

1001
00:41:46,829 --> 00:41:49,310
your data it may be across the board

1002
00:41:49,310 --> 00:41:53,760
then our API rate limits the limits are

1003
00:41:53,760 --> 00:41:56,069
documented very well in slacks website

1004
00:41:56,069 --> 00:41:59,250
they live well this type of API can only

1005
00:41:59,250 --> 00:42:00,980
call this many per minute at this point

1006
00:42:00,980 --> 00:42:04,829
breaks down really nice but we run into

1007
00:42:04,829 --> 00:42:08,069
things like the audit log API while you

1008
00:42:08,069 --> 00:42:11,609
can query at X number of times but when

1009
00:42:11,609 --> 00:42:13,740
we're actually implementing it and using

1010
00:42:13,740 --> 00:42:15,210
it in reality we're not getting that

1011
00:42:15,210 --> 00:42:19,170
many we're getting half that many so the

1012
00:42:19,170 --> 00:42:21,540
larger data set we're having to pull for

1013
00:42:21,540 --> 00:42:25,109
example like log outs 25 times more

1014
00:42:25,109 --> 00:42:28,109
after you free that 25 times more data

1015
00:42:28,109 --> 00:42:31,230
pull down that we had to put in a time

1016
00:42:31,230 --> 00:42:32,640
limit so basically we have to put an 8

1017
00:42:32,640 --> 00:42:35,730
second pause between every single query

1018
00:42:35,730 --> 00:42:38,010
on the API just to get that information

1019
00:42:38,010 --> 00:42:39,930
to come back to us otherwise we were

1020
00:42:39,930 --> 00:42:42,869
running into timeouts for you've queried

1021
00:42:42,869 --> 00:42:45,470
too many times

1022
00:42:49,680 --> 00:42:51,990
so that kind of wraps up the detection

1023
00:42:51,990 --> 00:42:54,299
side of it do you guys have any

1024
00:42:54,299 --> 00:42:56,690
questions

1025
00:42:58,790 --> 00:43:01,160
what's the most interesting thing you

1026
00:43:01,160 --> 00:43:03,620
found in a Slackware they had a policy

1027
00:43:03,620 --> 00:43:07,540
against putting sensitive data into slag

1028
00:43:09,520 --> 00:43:12,580
from the red side or from the blue side

1029
00:43:12,580 --> 00:43:17,030
yes from the blue side we've seen

1030
00:43:17,030 --> 00:43:21,580
everything from tokens credentials

1031
00:43:21,580 --> 00:43:25,490
direct server IPS internal links

1032
00:43:25,490 --> 00:43:28,790
external links information for external

1033
00:43:28,790 --> 00:43:31,480
services

