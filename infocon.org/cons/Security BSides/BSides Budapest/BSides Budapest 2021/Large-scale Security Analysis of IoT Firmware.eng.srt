1
00:00:00,719 --> 00:00:02,960
hello and welcome to my talk

2
00:00:02,960 --> 00:00:05,359
today i want to talk about the security

3
00:00:05,359 --> 00:00:07,120
of iot fimber

4
00:00:07,120 --> 00:00:09,360
i conducted a large scale security

5
00:00:09,360 --> 00:00:11,200
analysis on firmware

6
00:00:11,200 --> 00:00:13,360
and in this talk i want to give you a

7
00:00:13,360 --> 00:00:15,519
high level overview about what i've done

8
00:00:15,519 --> 00:00:18,400
and my results

9
00:00:19,039 --> 00:00:20,720
a few words about me

10
00:00:20,720 --> 00:00:24,160
my name is daniel nusco i'm from germany

11
00:00:24,160 --> 00:00:26,640
and working as a penetration tester

12
00:00:26,640 --> 00:00:29,439
so my job is to discover vulnerabilities

13
00:00:29,439 --> 00:00:32,238
in corporate networks and applications

14
00:00:32,238 --> 00:00:33,920
i have a special interest in the field

15
00:00:33,920 --> 00:00:35,760
of iot security

16
00:00:35,760 --> 00:00:37,680
that's why i conducted a large scale

17
00:00:37,680 --> 00:00:39,680
static analysis on fimber

18
00:00:39,680 --> 00:00:43,960
and that's my topic for today

19
00:00:44,879 --> 00:00:47,520
before we start a short introduction why

20
00:00:47,520 --> 00:00:49,600
are it devices interesting and

21
00:00:49,600 --> 00:00:51,760
especially why should we care about the

22
00:00:51,760 --> 00:00:53,440
security of them

23
00:00:53,440 --> 00:00:55,199
well today we have more and more

24
00:00:55,199 --> 00:00:58,320
connected devices um in our homes as

25
00:00:58,320 --> 00:01:00,800
well as incorporate networks

26
00:01:00,800 --> 00:01:02,879
for example we have home automation

27
00:01:02,879 --> 00:01:04,959
systems which can be managed by a

28
00:01:04,959 --> 00:01:06,159
smartphone

29
00:01:06,159 --> 00:01:08,880
um we have smart speakers that are

30
00:01:08,880 --> 00:01:10,640
connected to our wi-fi

31
00:01:10,640 --> 00:01:13,040
and of course we also have a lot of

32
00:01:13,040 --> 00:01:16,479
regular internet devices like a router

33
00:01:16,479 --> 00:01:18,720
it's a violence camera a wipe phone and

34
00:01:18,720 --> 00:01:20,479
so on and so on

35
00:01:20,479 --> 00:01:22,240
but we also have more and more

36
00:01:22,240 --> 00:01:24,400
industrial devices um

37
00:01:24,400 --> 00:01:26,479
like industrial control systems to

38
00:01:26,479 --> 00:01:28,720
control machines for example

39
00:01:28,720 --> 00:01:32,159
um we have robotics or solar power

40
00:01:32,159 --> 00:01:34,560
plants and all of these devices are

41
00:01:34,560 --> 00:01:37,040
connected to the network to monitor and

42
00:01:37,040 --> 00:01:40,360
manage them

43
00:01:42,159 --> 00:01:44,560
so you see iot devices are more and more

44
00:01:44,560 --> 00:01:47,119
common and more and more widespread

45
00:01:47,119 --> 00:01:49,680
today we have about 36 billion devices

46
00:01:49,680 --> 00:01:52,479
worldwide and the number of devices

47
00:01:52,479 --> 00:01:54,479
rises from year to year so

48
00:01:54,479 --> 00:01:56,640
in 2025

49
00:01:56,640 --> 00:01:58,960
we expect to have more than 75 billion

50
00:01:58,960 --> 00:02:00,479
iot devices

51
00:02:00,479 --> 00:02:02,159
and a lot of them are connected to our

52
00:02:02,159 --> 00:02:04,079
internet

53
00:02:04,079 --> 00:02:05,840
so what does this mean

54
00:02:05,840 --> 00:02:08,318
let's take a look in the past

55
00:02:08,318 --> 00:02:12,640
in 2016 we had about 18 billion devices

56
00:02:12,640 --> 00:02:14,959
and in the same year the mirei.net

57
00:02:14,959 --> 00:02:19,200
compromised about 600 000 iot devices

58
00:02:19,200 --> 00:02:21,840
these devices were responsible for large

59
00:02:21,840 --> 00:02:24,560
distributed denial of service attacks

60
00:02:24,560 --> 00:02:27,840
for example one of these attacks hit the

61
00:02:27,840 --> 00:02:30,560
internet service provider of liberia

62
00:02:30,560 --> 00:02:32,879
and this attack was so heavy that the

63
00:02:32,879 --> 00:02:34,879
internet connectivity of the whole

64
00:02:34,879 --> 00:02:38,640
country was temporarily interrupted

65
00:02:38,959 --> 00:02:40,959
so according to the statistics we will

66
00:02:40,959 --> 00:02:44,400
have four times as much devices in 2025

67
00:02:44,400 --> 00:02:46,319
as in 2016

68
00:02:46,319 --> 00:02:47,280
and

69
00:02:47,280 --> 00:02:49,440
additionally you have to know that the

70
00:02:49,440 --> 00:02:51,840
original version of the murai botnet

71
00:02:51,840 --> 00:02:54,000
just used a simple list of default

72
00:02:54,000 --> 00:02:55,280
credentials

73
00:02:55,280 --> 00:02:58,080
and this default credentials yes was

74
00:02:58,080 --> 00:03:00,720
used to get access to these devices and

75
00:03:00,720 --> 00:03:03,200
i assume that much more devices can be

76
00:03:03,200 --> 00:03:05,760
compromised by using publicly available

77
00:03:05,760 --> 00:03:08,399
exploits

78
00:03:08,720 --> 00:03:11,040
so we have more and more devices all of

79
00:03:11,040 --> 00:03:12,959
these devices are connected to our

80
00:03:12,959 --> 00:03:15,440
network all of them have interfaces to

81
00:03:15,440 --> 00:03:19,200
manage them for example a web interface

82
00:03:19,200 --> 00:03:20,959
some of them also provide other network

83
00:03:20,959 --> 00:03:23,280
services which all pose an attack

84
00:03:23,280 --> 00:03:25,760
surface

85
00:03:29,280 --> 00:03:31,680
the security of iot device is known to

86
00:03:31,680 --> 00:03:33,920
be poor but what are the reasons for

87
00:03:33,920 --> 00:03:36,400
such bad product security

88
00:03:36,400 --> 00:03:38,879
wireless devices are often produced as

89
00:03:38,879 --> 00:03:40,720
cheap as possible

90
00:03:40,720 --> 00:03:42,959
there's a hard competition between the

91
00:03:42,959 --> 00:03:46,000
vendors and product security costs money

92
00:03:46,000 --> 00:03:48,080
and yes it's not the vendor's first

93
00:03:48,080 --> 00:03:49,760
priority

94
00:03:49,760 --> 00:03:51,840
in addition these devices are

95
00:03:51,840 --> 00:03:55,680
very diverse and very individual um

96
00:03:55,680 --> 00:03:59,680
not only hardware but also the software

97
00:03:59,680 --> 00:04:01,439
a lot of software components are

98
00:04:01,439 --> 00:04:03,680
developed by the vendor itself

99
00:04:03,680 --> 00:04:05,519
which increases the risks of design

100
00:04:05,519 --> 00:04:06,480
flaws

101
00:04:06,480 --> 00:04:08,080
compared to well-known and standardized

102
00:04:08,080 --> 00:04:09,680
components

103
00:04:09,680 --> 00:04:13,120
and iot devices have a short life cycle

104
00:04:13,120 --> 00:04:14,959
i will come to that point later at the

105
00:04:14,959 --> 00:04:17,680
end of my talk

106
00:04:18,320 --> 00:04:20,560
okay before we start diving into a large

107
00:04:20,560 --> 00:04:23,120
scale analysis i want to share my

108
00:04:23,120 --> 00:04:25,840
experience from a penetration test

109
00:04:25,840 --> 00:04:28,240
i conducted a penetration test of a

110
00:04:28,240 --> 00:04:30,240
security camera

111
00:04:30,240 --> 00:04:33,040
and now i want to mention three of the

112
00:04:33,040 --> 00:04:35,440
identified vulnerabilities

113
00:04:35,440 --> 00:04:38,000
first a buffer overflow

114
00:04:38,000 --> 00:04:39,919
which was located in the web interface

115
00:04:39,919 --> 00:04:41,360
of the device

116
00:04:41,360 --> 00:04:44,320
and a denial of service vulnerability

117
00:04:44,320 --> 00:04:46,720
also affecting the web interface

118
00:04:46,720 --> 00:04:49,680
and also here in this case um the web

119
00:04:49,680 --> 00:04:51,440
server binary was self-developed by the

120
00:04:51,440 --> 00:04:54,560
vendor and i've seen this many times

121
00:04:54,560 --> 00:04:56,960
before that vulnerabilities are often

122
00:04:56,960 --> 00:05:01,039
located in self-developed components

123
00:05:01,039 --> 00:05:03,520
i've identified a debug interface

124
00:05:03,520 --> 00:05:05,759
that can be accessed over the network

125
00:05:05,759 --> 00:05:08,840
and yes this debug interface is

126
00:05:08,840 --> 00:05:11,840
yeah enabled by default and allows to

127
00:05:11,840 --> 00:05:14,560
create memory dumps and yeah you can

128
00:05:14,560 --> 00:05:16,320
reach this debug interface over the

129
00:05:16,320 --> 00:05:18,880
network so everybody is able to access

130
00:05:18,880 --> 00:05:20,240
it

131
00:05:20,240 --> 00:05:21,840
the interesting thing about that ip

132
00:05:21,840 --> 00:05:24,800
camera was that this device was white

133
00:05:24,800 --> 00:05:25,840
labeled

134
00:05:25,840 --> 00:05:26,720
so

135
00:05:26,720 --> 00:05:29,520
on the camera there was a company logo

136
00:05:29,520 --> 00:05:32,720
of a german vendor but in fact

137
00:05:32,720 --> 00:05:35,039
this device was produced by a chinese

138
00:05:35,039 --> 00:05:36,639
manufacturer

139
00:05:36,639 --> 00:05:37,520
and

140
00:05:37,520 --> 00:05:39,600
a little research showed that this

141
00:05:39,600 --> 00:05:41,360
manufacturer is the second largest

142
00:05:41,360 --> 00:05:45,360
manufacturer of ip cameras in the world

143
00:05:45,360 --> 00:05:47,840
and a little more research showed that

144
00:05:47,840 --> 00:05:50,080
iot devices from this manufacturer were

145
00:05:50,080 --> 00:05:51,919
significantly evolved into the mirai

146
00:05:51,919 --> 00:05:54,479
botnet

147
00:05:54,639 --> 00:05:57,039
so it seems that the circumstance that

148
00:05:57,039 --> 00:05:59,840
this device was white labeled and at the

149
00:05:59,840 --> 00:06:03,120
end sold by another vendor

150
00:06:03,120 --> 00:06:05,199
lead to several problems

151
00:06:05,199 --> 00:06:06,479
first

152
00:06:06,479 --> 00:06:08,960
when i informed the vendor about the

153
00:06:08,960 --> 00:06:11,360
debugging interface

154
00:06:11,360 --> 00:06:13,280
it turned out that the vendor didn't

155
00:06:13,280 --> 00:06:15,840
even know about that feature

156
00:06:15,840 --> 00:06:17,280
and second

157
00:06:17,280 --> 00:06:18,960
it turned out that some of the

158
00:06:18,960 --> 00:06:21,520
identified vulnerabilities

159
00:06:21,520 --> 00:06:23,440
are already known by the chinese

160
00:06:23,440 --> 00:06:25,120
manufacturer

161
00:06:25,120 --> 00:06:27,199
and are also fixed in the newer firmware

162
00:06:27,199 --> 00:06:29,520
version

163
00:06:29,520 --> 00:06:31,280
so someone took a closer look on this

164
00:06:31,280 --> 00:06:32,960
device

165
00:06:32,960 --> 00:06:34,960
discovered vulnerabilities

166
00:06:34,960 --> 00:06:37,360
reported them to the manufacturer

167
00:06:37,360 --> 00:06:39,039
and the manufacturer released a new

168
00:06:39,039 --> 00:06:40,160
firmware version where this

169
00:06:40,160 --> 00:06:42,240
vulnerabilities have been fixed

170
00:06:42,240 --> 00:06:45,840
so this is the best case you can get

171
00:06:45,840 --> 00:06:48,319
and even here the device yeah stays

172
00:06:48,319 --> 00:06:50,560
vulnerable because we are

173
00:06:50,560 --> 00:06:53,520
of communication problems between the

174
00:06:53,520 --> 00:06:56,000
original manufacturer of the device

175
00:06:56,000 --> 00:06:57,759
and the vendor

176
00:06:57,759 --> 00:07:00,400
who sells this product in germany

177
00:07:00,400 --> 00:07:02,080
so the vendor didn't even know about the

178
00:07:02,080 --> 00:07:04,560
firmware and shipped their products with

179
00:07:04,560 --> 00:07:07,680
the old and vulnerable firmware versions

180
00:07:07,680 --> 00:07:10,479
so this example shows that there can be

181
00:07:10,479 --> 00:07:12,400
many many different reasons that lead to

182
00:07:12,400 --> 00:07:14,160
bad product security

183
00:07:14,160 --> 00:07:18,240
um not only programming mistakes

184
00:07:22,080 --> 00:07:23,919
okay since we cannot rely on the product

185
00:07:23,919 --> 00:07:26,080
security we need to evaluate the

186
00:07:26,080 --> 00:07:28,880
security of these devices and therefore

187
00:07:28,880 --> 00:07:31,680
several approaches exist

188
00:07:31,680 --> 00:07:34,319
we can perform a penetration test

189
00:07:34,319 --> 00:07:35,360
here we

190
00:07:35,360 --> 00:07:37,599
look at the device and its interfaces

191
00:07:37,599 --> 00:07:39,440
while it's in operation

192
00:07:39,440 --> 00:07:41,440
for that of course we need a physical

193
00:07:41,440 --> 00:07:43,440
device

194
00:07:43,440 --> 00:07:45,919
but we can analyze the device in depth

195
00:07:45,919 --> 00:07:47,599
and so we can get

196
00:07:47,599 --> 00:07:50,800
very very accurate results because we

197
00:07:50,800 --> 00:07:52,879
avoid false positives by verifying

198
00:07:52,879 --> 00:07:55,840
vulnerability directly on the device

199
00:07:55,840 --> 00:07:56,720
but

200
00:07:56,720 --> 00:07:59,280
um this approach simply does not scale

201
00:07:59,280 --> 00:08:00,319
so

202
00:08:00,319 --> 00:08:02,639
it's not practical for a large scale

203
00:08:02,639 --> 00:08:05,199
analysis

204
00:08:05,759 --> 00:08:08,319
we also have the possibility to emulate

205
00:08:08,319 --> 00:08:09,840
a firmware

206
00:08:09,840 --> 00:08:13,360
we can use qemo for the purpose

207
00:08:13,360 --> 00:08:14,639
but

208
00:08:14,639 --> 00:08:17,120
this is hard to apply because the

209
00:08:17,120 --> 00:08:19,440
hardware of iot devices

210
00:08:19,440 --> 00:08:21,120
is very diverse

211
00:08:21,120 --> 00:08:23,199
usually if you try to dynamically

212
00:08:23,199 --> 00:08:25,680
execute a firmware it is checked if the

213
00:08:25,680 --> 00:08:27,599
peripherals are connected and if they

214
00:08:27,599 --> 00:08:28,800
are working

215
00:08:28,800 --> 00:08:29,759
um

216
00:08:29,759 --> 00:08:32,479
the device may have a sensor to collect

217
00:08:32,479 --> 00:08:36,320
data or a camera or a physical button

218
00:08:36,320 --> 00:08:37,200
um

219
00:08:37,200 --> 00:08:41,279
which we don't have when we emulate them

220
00:08:41,279 --> 00:08:44,720
there also have been attempts to emulate

221
00:08:44,720 --> 00:08:47,360
only single parts of the firmware

222
00:08:47,360 --> 00:08:49,519
for example

223
00:08:49,519 --> 00:08:52,000
emulating only the web interface

224
00:08:52,000 --> 00:08:52,880
and

225
00:08:52,880 --> 00:08:54,720
this approach allows to run common

226
00:08:54,720 --> 00:08:56,640
vulnerability scanners um on the web

227
00:08:56,640 --> 00:08:59,120
interface although the device is not

228
00:08:59,120 --> 00:09:00,880
physically present

229
00:09:00,880 --> 00:09:01,920
um

230
00:09:01,920 --> 00:09:05,120
but the setup here is really complex and

231
00:09:05,120 --> 00:09:07,680
it's very difficult to automate this

232
00:09:07,680 --> 00:09:08,959
process

233
00:09:08,959 --> 00:09:12,560
for a large-scale analysis

234
00:09:12,560 --> 00:09:14,240
this is the reason why i chose a static

235
00:09:14,240 --> 00:09:15,839
analysis

236
00:09:15,839 --> 00:09:18,320
in this approach we unpacked the file

237
00:09:18,320 --> 00:09:20,560
system and the binaries

238
00:09:20,560 --> 00:09:22,880
and then we analyze them

239
00:09:22,880 --> 00:09:24,240
and of course

240
00:09:24,240 --> 00:09:27,360
this approach is much more limited um

241
00:09:27,360 --> 00:09:29,120
because we don't have the device up and

242
00:09:29,120 --> 00:09:30,160
running

243
00:09:30,160 --> 00:09:32,959
and yeah we cannot communicate with

244
00:09:32,959 --> 00:09:35,519
network services of the device um

245
00:09:35,519 --> 00:09:37,440
but it's scalable and the whole process

246
00:09:37,440 --> 00:09:39,519
can be automated to analyze a large

247
00:09:39,519 --> 00:09:42,720
amount of humor images

248
00:09:44,560 --> 00:09:47,279
the aim of this research was to obtain a

249
00:09:47,279 --> 00:09:49,040
high level overview about the security

250
00:09:49,040 --> 00:09:52,160
level of firmware and therefore a large

251
00:09:52,160 --> 00:09:54,160
number of fimber files

252
00:09:54,160 --> 00:09:56,240
from different vendors and also

253
00:09:56,240 --> 00:09:59,040
different device types was collected

254
00:09:59,040 --> 00:10:01,200
and due to the large number of firmware

255
00:10:01,200 --> 00:10:02,480
files

256
00:10:02,480 --> 00:10:04,720
it was necessary to fully automate the

257
00:10:04,720 --> 00:10:08,640
process of unpacking and analyzes

258
00:10:08,959 --> 00:10:10,640
so at the end

259
00:10:10,640 --> 00:10:12,480
every firmware file was analyzed with

260
00:10:12,480 --> 00:10:15,360
regard to several topics

261
00:10:15,360 --> 00:10:17,360
first of all the name and version

262
00:10:17,360 --> 00:10:19,600
information of common binaries and

263
00:10:19,600 --> 00:10:21,680
common system libraries have been

264
00:10:21,680 --> 00:10:23,120
identified

265
00:10:23,120 --> 00:10:25,440
so in the first step the file type was

266
00:10:25,440 --> 00:10:26,720
identified

267
00:10:26,720 --> 00:10:27,600
and

268
00:10:27,600 --> 00:10:30,160
in case of an executable file like an

269
00:10:30,160 --> 00:10:33,440
elf file um printable strings were

270
00:10:33,440 --> 00:10:34,800
extracted

271
00:10:34,800 --> 00:10:36,640
and after that

272
00:10:36,640 --> 00:10:38,560
these strings were analyzed using

273
00:10:38,560 --> 00:10:41,040
regular expressions for typical version

274
00:10:41,040 --> 00:10:43,599
information

275
00:10:43,680 --> 00:10:45,519
so the name of typical software

276
00:10:45,519 --> 00:10:48,560
components like openssl

277
00:10:48,560 --> 00:10:50,959
busybox or openssh

278
00:10:50,959 --> 00:10:52,480
along with the numerical software

279
00:10:52,480 --> 00:10:54,880
version was extracted from the binary

280
00:10:54,880 --> 00:10:55,839
and

281
00:10:55,839 --> 00:10:58,240
in this way it was identified which

282
00:10:58,240 --> 00:11:01,120
software has been used and in which

283
00:11:01,120 --> 00:11:02,079
version

284
00:11:02,079 --> 00:11:03,440
so

285
00:11:03,440 --> 00:11:04,560
for that

286
00:11:04,560 --> 00:11:06,800
i use regular expressions in combination

287
00:11:06,800 --> 00:11:10,000
with yara files

288
00:11:10,000 --> 00:11:12,720
yara is a signature format

289
00:11:12,720 --> 00:11:14,959
which was originally developed for

290
00:11:14,959 --> 00:11:17,600
malware detection and was used for

291
00:11:17,600 --> 00:11:20,640
antivirus software

292
00:11:20,640 --> 00:11:22,560
then i checked every binary file for the

293
00:11:22,560 --> 00:11:23,600
use of

294
00:11:23,600 --> 00:11:26,240
compiler based exploit mitigations

295
00:11:26,240 --> 00:11:29,040
um to give an example when compiling a

296
00:11:29,040 --> 00:11:32,880
program with gcc uh you can set

297
00:11:32,880 --> 00:11:35,200
different flags to enable exploit

298
00:11:35,200 --> 00:11:37,920
mitigations um like stack smashing

299
00:11:37,920 --> 00:11:41,200
protection or nx protection

300
00:11:41,200 --> 00:11:42,640
and

301
00:11:42,640 --> 00:11:45,200
yeah this makes exploitation of buffer

302
00:11:45,200 --> 00:11:47,360
overflow vulnerabilities much more

303
00:11:47,360 --> 00:11:49,920
difficult

304
00:11:50,079 --> 00:11:52,000
another aspect was the analysis of

305
00:11:52,000 --> 00:11:55,279
default user accounts um in this case

306
00:11:55,279 --> 00:11:58,240
the passwd file was analyzed as well as

307
00:11:58,240 --> 00:12:01,920
the shadow file and password hashes from

308
00:12:01,920 --> 00:12:04,240
shadow files have been extracted and

309
00:12:04,240 --> 00:12:06,079
after that a dictionary attack was

310
00:12:06,079 --> 00:12:08,399
conducted to recover as much plain text

311
00:12:08,399 --> 00:12:11,839
passwords as possible

312
00:12:11,839 --> 00:12:13,680
and in the last step cryptographic

313
00:12:13,680 --> 00:12:16,320
material was identified

314
00:12:16,320 --> 00:12:18,720
such as certificates private and public

315
00:12:18,720 --> 00:12:19,839
keys and

316
00:12:19,839 --> 00:12:22,480
this was also implemented by signatures

317
00:12:22,480 --> 00:12:25,839
in error format

318
00:12:27,680 --> 00:12:29,600
so how do we perform a large scale

319
00:12:29,600 --> 00:12:31,680
analysis

320
00:12:31,680 --> 00:12:33,839
there are several tasks to do

321
00:12:33,839 --> 00:12:35,839
first of all we need to collect firmware

322
00:12:35,839 --> 00:12:37,519
images and

323
00:12:37,519 --> 00:12:39,839
after that we need to unpack the

324
00:12:39,839 --> 00:12:41,600
firmware file in order to access the

325
00:12:41,600 --> 00:12:45,120
file and directory structure of them

326
00:12:45,120 --> 00:12:46,880
when this is done

327
00:12:46,880 --> 00:12:48,800
we are ready to start our analyzers

328
00:12:48,800 --> 00:12:49,920
processes

329
00:12:49,920 --> 00:12:53,200
for every file and a set of checks is

330
00:12:53,200 --> 00:12:56,000
performed for every file so we check the

331
00:12:56,000 --> 00:12:58,639
file type and in case of an executable

332
00:12:58,639 --> 00:13:00,000
file

333
00:13:00,000 --> 00:13:02,240
we analyze if exploit mitigations are

334
00:13:02,240 --> 00:13:03,440
implemented

335
00:13:03,440 --> 00:13:06,480
we scan the file for version strings and

336
00:13:06,480 --> 00:13:09,040
also for cryptographic keys and

337
00:13:09,040 --> 00:13:11,760
certificates

338
00:13:12,639 --> 00:13:14,480
all results of these analyzers are

339
00:13:14,480 --> 00:13:16,720
stored in a database

340
00:13:16,720 --> 00:13:18,880
in addition to the results i also

341
00:13:18,880 --> 00:13:22,240
collected some metadata of all files um

342
00:13:22,240 --> 00:13:25,519
which i also store in the database

343
00:13:25,519 --> 00:13:27,920
for example i created a hash value of

344
00:13:27,920 --> 00:13:30,399
each extracted file and

345
00:13:30,399 --> 00:13:33,600
yes this allows to analyze if a file was

346
00:13:33,600 --> 00:13:36,399
also present in another firmware image

347
00:13:36,399 --> 00:13:37,360
so

348
00:13:37,360 --> 00:13:40,399
in case we have a finding let's say

349
00:13:40,399 --> 00:13:42,240
hard coded certificate

350
00:13:42,240 --> 00:13:44,320
we can use the hash value of this file

351
00:13:44,320 --> 00:13:47,199
and search in our database if this

352
00:13:47,199 --> 00:13:49,440
specific certificate

353
00:13:49,440 --> 00:13:53,360
is also used in another firmware

354
00:13:53,600 --> 00:13:56,000
when our automated analysis finished we

355
00:13:56,000 --> 00:13:58,320
can use our database to create

356
00:13:58,320 --> 00:13:59,839
statistics

357
00:13:59,839 --> 00:14:01,440
about our results

358
00:14:01,440 --> 00:14:04,399
or to search for files inside a specific

359
00:14:04,399 --> 00:14:09,279
image and to manually analyze them

360
00:14:11,519 --> 00:14:13,760
all right let's take a look on the

361
00:14:13,760 --> 00:14:16,800
architecture of my analysis environment

362
00:14:16,800 --> 00:14:20,079
during my first tests it got clear that

363
00:14:20,079 --> 00:14:22,160
yeah the analyzers has high system

364
00:14:22,160 --> 00:14:24,000
requirements

365
00:14:24,000 --> 00:14:25,040
a large

366
00:14:25,040 --> 00:14:28,000
number of files are examined in parallel

367
00:14:28,000 --> 00:14:28,839
and

368
00:14:28,839 --> 00:14:31,839
therefore uh the analyzer scales with

369
00:14:31,839 --> 00:14:34,320
the number of available cpu cores

370
00:14:34,320 --> 00:14:37,519
and system memory

371
00:14:37,519 --> 00:14:40,399
and this was the reason why i decided to

372
00:14:40,399 --> 00:14:44,240
uh yeah to run this analysis um in the

373
00:14:44,240 --> 00:14:47,040
cloud environment

374
00:14:47,040 --> 00:14:49,120
the analyzer itself was implemented in

375
00:14:49,120 --> 00:14:50,160
python

376
00:14:50,160 --> 00:14:52,639
using the effect framework

377
00:14:52,639 --> 00:14:55,360
and the fact framework is built modular

378
00:14:55,360 --> 00:14:56,160
so

379
00:14:56,160 --> 00:14:58,480
it's easy to create custom modules in

380
00:14:58,480 --> 00:15:00,959
python

381
00:15:01,760 --> 00:15:03,279
so as you see we have different

382
00:15:03,279 --> 00:15:06,320
components um we have the

383
00:15:06,320 --> 00:15:09,279
firmware analysis server here we unpack

384
00:15:09,279 --> 00:15:11,519
the firmware images and analyze the

385
00:15:11,519 --> 00:15:12,959
files

386
00:15:12,959 --> 00:15:14,720
all unpacked files are stored on a

387
00:15:14,720 --> 00:15:16,959
virtual storage um

388
00:15:16,959 --> 00:15:19,680
we keep all unpacked files since we also

389
00:15:19,680 --> 00:15:21,440
may want to analyze the manual

390
00:15:21,440 --> 00:15:22,880
afterwards

391
00:15:22,880 --> 00:15:27,360
and yeah we also have a database server

392
00:15:27,360 --> 00:15:31,199
this database server is based on mongodb

393
00:15:31,199 --> 00:15:35,680
and here we store all our results

394
00:15:35,920 --> 00:15:37,600
all these components are located in the

395
00:15:37,600 --> 00:15:39,199
cloud

396
00:15:39,199 --> 00:15:42,480
i've also developed a job scheduler that

397
00:15:42,480 --> 00:15:44,399
uploads ephemera file

398
00:15:44,399 --> 00:15:46,079
to the analyzer server in the cloud

399
00:15:46,079 --> 00:15:47,920
environment and

400
00:15:47,920 --> 00:15:51,680
also monitors all tasks on the server

401
00:15:51,680 --> 00:15:55,839
this is done by a rest interface

402
00:15:58,560 --> 00:16:01,199
where did i get the firmware files from

403
00:16:01,199 --> 00:16:03,360
i downloaded the firmware files from

404
00:16:03,360 --> 00:16:06,000
manufacturers websites or

405
00:16:06,000 --> 00:16:10,160
ftp servers um thereby i only collected

406
00:16:10,160 --> 00:16:12,399
firmware images that are directly

407
00:16:12,399 --> 00:16:14,320
provided by the manufacturer

408
00:16:14,320 --> 00:16:15,199
um

409
00:16:15,199 --> 00:16:18,240
doing so i can be sure that i analyze

410
00:16:18,240 --> 00:16:20,240
the original firmware from the vendor

411
00:16:20,240 --> 00:16:21,279
and not

412
00:16:21,279 --> 00:16:23,040
any other image

413
00:16:23,040 --> 00:16:25,040
which might be customized by someone

414
00:16:25,040 --> 00:16:27,120
else

415
00:16:27,120 --> 00:16:29,120
to automate the process of downloading

416
00:16:29,120 --> 00:16:30,639
fema files

417
00:16:30,639 --> 00:16:32,720
i developed a crawler

418
00:16:32,720 --> 00:16:35,120
i developed this crawler in python based

419
00:16:35,120 --> 00:16:36,880
on the scrappy framework

420
00:16:36,880 --> 00:16:37,680
and

421
00:16:37,680 --> 00:16:38,959
in this way

422
00:16:38,959 --> 00:16:41,040
i crawled the download pages of 20

423
00:16:41,040 --> 00:16:43,839
vendors and downloaded about 10 000

424
00:16:43,839 --> 00:16:45,519
firmware files

425
00:16:45,519 --> 00:16:48,240
so i manually searched for the download

426
00:16:48,240 --> 00:16:50,480
portal of a vendor and

427
00:16:50,480 --> 00:16:52,480
then i crawled the portal for firmware

428
00:16:52,480 --> 00:16:53,759
files

429
00:16:53,759 --> 00:16:56,959
with my python crawler

430
00:16:57,279 --> 00:16:59,839
together with the firmware files

431
00:16:59,839 --> 00:17:02,560
i also stirred some metadata about

432
00:17:02,560 --> 00:17:04,640
images

433
00:17:04,640 --> 00:17:07,359
for example i generated a hash value of

434
00:17:07,359 --> 00:17:09,359
each femur file

435
00:17:09,359 --> 00:17:11,679
to avoid duplicates

436
00:17:11,679 --> 00:17:15,039
and stored the url where i downloaded

437
00:17:15,039 --> 00:17:17,280
file from

438
00:17:17,280 --> 00:17:19,919
and as you can see on this pie chart um

439
00:17:19,919 --> 00:17:22,319
most of the firmware files are for

440
00:17:22,319 --> 00:17:23,919
routers

441
00:17:23,919 --> 00:17:26,799
followed by security cameras

442
00:17:26,799 --> 00:17:28,000
printers

443
00:17:28,000 --> 00:17:30,160
switches and voip phones

444
00:17:30,160 --> 00:17:31,280
and

445
00:17:31,280 --> 00:17:34,400
a smaller number of images are for nas

446
00:17:34,400 --> 00:17:35,520
systems

447
00:17:35,520 --> 00:17:38,320
smart speakers wifi repeaters wipe

448
00:17:38,320 --> 00:17:40,000
gateways

449
00:17:40,000 --> 00:17:42,720
photovoltaic systems smart locks

450
00:17:42,720 --> 00:17:45,760
smart plugs and power line adapters so

451
00:17:45,760 --> 00:17:48,000
as you can see a wide range of device

452
00:17:48,000 --> 00:17:51,200
types has been analyzed

453
00:17:53,440 --> 00:17:55,120
so let's talk about the unpacking of the

454
00:17:55,120 --> 00:17:57,120
firmware

455
00:17:57,120 --> 00:18:00,080
most of the devices i analyzed have a

456
00:18:00,080 --> 00:18:02,240
full operating system

457
00:18:02,240 --> 00:18:05,520
so you have a kernel you have a user

458
00:18:05,520 --> 00:18:07,360
space and the file system

459
00:18:07,360 --> 00:18:08,400
and

460
00:18:08,400 --> 00:18:11,679
yeah the file the firmware files are

461
00:18:11,679 --> 00:18:14,559
often packed in multiple layers and

462
00:18:14,559 --> 00:18:16,400
different file formats

463
00:18:16,400 --> 00:18:17,360
so

464
00:18:17,360 --> 00:18:20,080
the challenge is to handle a wide range

465
00:18:20,080 --> 00:18:22,480
of file and archive formats and to

466
00:18:22,480 --> 00:18:25,200
unpack them in an automated way layer by

467
00:18:25,200 --> 00:18:27,520
layer

468
00:18:27,760 --> 00:18:29,760
manufacturers often provide firmware

469
00:18:29,760 --> 00:18:32,080
images in an archive file

470
00:18:32,080 --> 00:18:33,120
and

471
00:18:33,120 --> 00:18:36,640
after this archive file is unpacked you

472
00:18:36,640 --> 00:18:39,200
often get the binary blob and

473
00:18:39,200 --> 00:18:42,480
to extract files from this binary blob

474
00:18:42,480 --> 00:18:45,600
we use so called file carving

475
00:18:45,600 --> 00:18:47,039
this means

476
00:18:47,039 --> 00:18:50,240
we search for common file signatures and

477
00:18:50,240 --> 00:18:53,600
magic bytes within this binary blob and

478
00:18:53,600 --> 00:18:54,960
then try to

479
00:18:54,960 --> 00:18:56,960
carve and to extract

480
00:18:56,960 --> 00:18:59,919
files inside

481
00:19:00,000 --> 00:19:02,960
one very good tool for this is spin walk

482
00:19:02,960 --> 00:19:05,200
which i also used in this case in my

483
00:19:05,200 --> 00:19:07,360
analysis

484
00:19:07,360 --> 00:19:08,720
bin work is

485
00:19:08,720 --> 00:19:10,799
a well-known tool um which is very

486
00:19:10,799 --> 00:19:14,960
popular for fimber reverse engineering

487
00:19:14,960 --> 00:19:17,440
so yeah this was

488
00:19:17,440 --> 00:19:20,799
the tool i chose for this

489
00:19:21,280 --> 00:19:23,360
okay let's take a look on the results

490
00:19:23,360 --> 00:19:25,039
and start with some

491
00:19:25,039 --> 00:19:27,760
general observations

492
00:19:27,760 --> 00:19:30,240
the results show that the majority of

493
00:19:30,240 --> 00:19:32,240
the analyzed firmware images are based

494
00:19:32,240 --> 00:19:33,840
on a linux kernel

495
00:19:33,840 --> 00:19:34,559
so

496
00:19:34,559 --> 00:19:36,320
in 88

497
00:19:36,320 --> 00:19:39,200
of all firmware files a linux kernel was

498
00:19:39,200 --> 00:19:41,360
identified um

499
00:19:41,360 --> 00:19:45,200
with about six percent threadx is used

500
00:19:45,200 --> 00:19:47,679
which is a proprietary operating system

501
00:19:47,679 --> 00:19:50,640
often used for consumer electronics

502
00:19:50,640 --> 00:19:51,520
and

503
00:19:51,520 --> 00:19:54,400
in two percent of the firmware files um

504
00:19:54,400 --> 00:19:56,960
open wrt is used

505
00:19:56,960 --> 00:20:00,559
this is a linux based operating system

506
00:20:00,559 --> 00:20:03,440
used for routers

507
00:20:04,080 --> 00:20:06,559
then we have a small number of devices

508
00:20:06,559 --> 00:20:09,919
which use vxworks uh windriver linux and

509
00:20:09,919 --> 00:20:12,559
lynx os

510
00:20:12,880 --> 00:20:14,559
on the right side

511
00:20:14,559 --> 00:20:16,400
you can see statistics about the

512
00:20:16,400 --> 00:20:18,840
identified cpu architecture

513
00:20:18,840 --> 00:20:23,120
um most of the devices are based on mips

514
00:20:23,120 --> 00:20:24,000
and

515
00:20:24,000 --> 00:20:26,000
an arm cpu

516
00:20:26,000 --> 00:20:26,799
uh

517
00:20:26,799 --> 00:20:29,520
this is very very common fire for iot

518
00:20:29,520 --> 00:20:31,120
devices

519
00:20:31,120 --> 00:20:33,360
but we also have some

520
00:20:33,360 --> 00:20:35,600
yeah architectures that are not that

521
00:20:35,600 --> 00:20:40,320
common like m68k from motorola or superh

522
00:20:40,320 --> 00:20:44,240
which is a microcontroller from hitachi

523
00:20:47,360 --> 00:20:49,679
this chart illustrates a number of times

524
00:20:49,679 --> 00:20:51,679
a specific software component was

525
00:20:51,679 --> 00:20:55,280
identified among all firmware images

526
00:20:55,280 --> 00:20:57,760
the most commonly identified software

527
00:20:57,760 --> 00:21:01,039
component is open ssl

528
00:21:01,039 --> 00:21:03,280
followed by busybox

529
00:21:03,280 --> 00:21:06,480
which is very common in embedded linux

530
00:21:06,480 --> 00:21:09,200
this is a single executable file which

531
00:21:09,200 --> 00:21:13,360
combines a set of command line tools

532
00:21:13,840 --> 00:21:15,520
we also see a lot of binaries that

533
00:21:15,520 --> 00:21:18,080
provide common network services like

534
00:21:18,080 --> 00:21:20,080
udhcp

535
00:21:20,080 --> 00:21:21,600
openssh

536
00:21:21,600 --> 00:21:25,120
dns mask and dropper ssh

537
00:21:25,120 --> 00:21:27,440
and for all these programs also their

538
00:21:27,440 --> 00:21:29,919
version has been identified

539
00:21:29,919 --> 00:21:32,640
in this way we got an overview of the

540
00:21:32,640 --> 00:21:36,559
use of outdated software components

541
00:21:39,760 --> 00:21:41,280
okay here you can see the version

542
00:21:41,280 --> 00:21:44,799
landscape of openssl as an example so we

543
00:21:44,799 --> 00:21:47,679
see how often a specific version has

544
00:21:47,679 --> 00:21:49,600
been identified

545
00:21:49,600 --> 00:21:52,080
actually this is not a complete list as

546
00:21:52,080 --> 00:21:54,480
yeah the complete list would be much too

547
00:21:54,480 --> 00:21:56,080
long

548
00:21:56,080 --> 00:21:58,480
these are only the most frequently used

549
00:21:58,480 --> 00:21:59,600
versions

550
00:21:59,600 --> 00:22:00,480
and

551
00:22:00,480 --> 00:22:03,120
the extracted version information was

552
00:22:03,120 --> 00:22:05,360
then compared with the data of the

553
00:22:05,360 --> 00:22:08,240
national vulnerability database from the

554
00:22:08,240 --> 00:22:10,640
nist institute

555
00:22:10,640 --> 00:22:13,760
and in this way for each version already

556
00:22:13,760 --> 00:22:16,720
known vulnerabilities and their cve

557
00:22:16,720 --> 00:22:19,600
numbers have been identified

558
00:22:19,600 --> 00:22:22,400
as example the bar graph on the left

559
00:22:22,400 --> 00:22:23,919
shows the number of vulnerabilities

560
00:22:23,919 --> 00:22:26,960
according to the css score um in this

561
00:22:26,960 --> 00:22:28,400
example for

562
00:22:28,400 --> 00:22:32,480
open ssh 0.9.8 set

563
00:22:32,480 --> 00:22:34,159
and in this way

564
00:22:34,159 --> 00:22:36,640
we can find out vulnerabilities which

565
00:22:36,640 --> 00:22:38,799
affect this version and also that

566
00:22:38,799 --> 00:22:41,120
severity

567
00:22:41,120 --> 00:22:42,720
just some interesting statistics

568
00:22:42,720 --> 00:22:44,880
regarding three famous vulnerabilities

569
00:22:44,880 --> 00:22:46,640
in open ssl

570
00:22:46,640 --> 00:22:48,559
um according to their version

571
00:22:48,559 --> 00:22:51,039
information about 75 percent are

572
00:22:51,039 --> 00:22:53,200
affected by the freak vulnerability

573
00:22:53,200 --> 00:22:55,440
about fifty percent are affected by

574
00:22:55,440 --> 00:22:58,480
poodle and six percent by the hard plate

575
00:22:58,480 --> 00:23:01,280
vulnerability

576
00:23:01,679 --> 00:23:05,200
here open ssl is just an example um i

577
00:23:05,200 --> 00:23:08,320
created such kind of statistics for all

578
00:23:08,320 --> 00:23:10,320
software components

579
00:23:10,320 --> 00:23:12,640
also for the identified linux kernel

580
00:23:12,640 --> 00:23:13,679
versions

581
00:23:13,679 --> 00:23:15,039
and the

582
00:23:15,039 --> 00:23:16,720
results show that

583
00:23:16,720 --> 00:23:19,200
two or three kernel versions are older

584
00:23:19,200 --> 00:23:20,559
than 10 years

585
00:23:20,559 --> 00:23:22,720
and more than 90 percent of all linux

586
00:23:22,720 --> 00:23:25,120
kernels are already

587
00:23:25,120 --> 00:23:26,480
end of life

588
00:23:26,480 --> 00:23:28,480
and the oldest kernel version i found

589
00:23:28,480 --> 00:23:32,200
was from 1997.

590
00:23:34,240 --> 00:23:36,240
when i crawled the download portals of

591
00:23:36,240 --> 00:23:38,480
course also film images of old devices

592
00:23:38,480 --> 00:23:41,600
have been downloaded so uh it was not

593
00:23:41,600 --> 00:23:44,880
possible to distinguish between old and

594
00:23:44,880 --> 00:23:48,080
new devices um this is something you

595
00:23:48,080 --> 00:23:51,360
have to do manually you have to look for

596
00:23:51,360 --> 00:23:53,360
the release date of the firmware on the

597
00:23:53,360 --> 00:23:55,760
website of the vendor or

598
00:23:55,760 --> 00:23:58,159
for example take a look in the changelog

599
00:23:58,159 --> 00:24:00,480
of the firmware you cannot do that in an

600
00:24:00,480 --> 00:24:03,279
automated way

601
00:24:03,440 --> 00:24:05,760
that's why i did some manual research

602
00:24:05,760 --> 00:24:08,400
and compared the release dates of some

603
00:24:08,400 --> 00:24:11,919
single devices with their kernel version

604
00:24:11,919 --> 00:24:13,919
and the resource

605
00:24:13,919 --> 00:24:16,240
differed very strongly from manufacturer

606
00:24:16,240 --> 00:24:18,400
to manufacturer and

607
00:24:18,400 --> 00:24:20,960
it turned out that for example at

608
00:24:20,960 --> 00:24:23,440
product launch of some enterprise voip

609
00:24:23,440 --> 00:24:24,640
telephones

610
00:24:24,640 --> 00:24:26,960
a kernel version was in use that was

611
00:24:26,960 --> 00:24:29,360
already 10 years old

612
00:24:29,360 --> 00:24:31,919
so even current high-end phones which

613
00:24:31,919 --> 00:24:34,400
are dedicated to the enterprise market

614
00:24:34,400 --> 00:24:36,640
are sold with a strongly outdated linux

615
00:24:36,640 --> 00:24:38,960
kernel

616
00:24:42,640 --> 00:24:44,840
let's take a look on binary hardening

617
00:24:44,840 --> 00:24:47,600
statistics all elf executables and

618
00:24:47,600 --> 00:24:49,760
libraries are checked for the use of

619
00:24:49,760 --> 00:24:51,840
common exploit mitigations

620
00:24:51,840 --> 00:24:55,200
so when you compile a binary you can set

621
00:24:55,200 --> 00:24:58,159
compiler flags to make use of them

622
00:24:58,159 --> 00:25:00,400
and to make exploitation

623
00:25:00,400 --> 00:25:02,159
much more difficult

624
00:25:02,159 --> 00:25:04,320
and here you can see the results when

625
00:25:04,320 --> 00:25:07,279
compiling a program with gcc

626
00:25:07,279 --> 00:25:08,880
nx the

627
00:25:08,880 --> 00:25:13,360
no execution bit is set by default um i

628
00:25:13,360 --> 00:25:16,480
think this explains why 90

629
00:25:16,480 --> 00:25:21,840
of all analyzed binaries make use of nx

630
00:25:22,159 --> 00:25:24,559
as far as i know all other protection

631
00:25:24,559 --> 00:25:26,080
mechanisms like

632
00:25:26,080 --> 00:25:28,880
stack canaries railroad and fortify

633
00:25:28,880 --> 00:25:31,600
source must be explicitly enabled during

634
00:25:31,600 --> 00:25:33,520
compilation and

635
00:25:33,520 --> 00:25:35,919
i think this is the reason why they are

636
00:25:35,919 --> 00:25:37,600
not that present in most of the

637
00:25:37,600 --> 00:25:41,240
executable files

638
00:25:42,559 --> 00:25:44,480
okay as already mentioned i also

639
00:25:44,480 --> 00:25:47,520
analyzed the past w2 and shadow files

640
00:25:47,520 --> 00:25:49,200
this chart here shows the number of

641
00:25:49,200 --> 00:25:51,520
users which are allowed to log into the

642
00:25:51,520 --> 00:25:53,039
operating system

643
00:25:53,039 --> 00:25:55,039
and for which a hard coded password is

644
00:25:55,039 --> 00:25:56,960
set in the shadow file

645
00:25:56,960 --> 00:25:57,760
so

646
00:25:57,760 --> 00:25:59,760
all of these users here

647
00:25:59,760 --> 00:26:02,880
yes can be used to log into the device

648
00:26:02,880 --> 00:26:04,240
several of them

649
00:26:04,240 --> 00:26:06,640
show typical usernames for factory

650
00:26:06,640 --> 00:26:08,799
default credentials

651
00:26:08,799 --> 00:26:11,200
such as root and admin

652
00:26:11,200 --> 00:26:13,600
or user and guest

653
00:26:13,600 --> 00:26:16,000
but you also see some users with cryptic

654
00:26:16,000 --> 00:26:16,960
names

655
00:26:16,960 --> 00:26:20,000
and in the past we've seen several cases

656
00:26:20,000 --> 00:26:22,720
where such cryptic usernames um yes have

657
00:26:22,720 --> 00:26:24,720
been identified as undocumented static

658
00:26:24,720 --> 00:26:26,080
user account

659
00:26:26,080 --> 00:26:27,039
so

660
00:26:27,039 --> 00:26:29,440
in case an ssh or a telnet service is

661
00:26:29,440 --> 00:26:30,320
running

662
00:26:30,320 --> 00:26:31,120
um

663
00:26:31,120 --> 00:26:32,960
these accounts can be used for remote

664
00:26:32,960 --> 00:26:35,919
access to the device

665
00:26:35,919 --> 00:26:37,919
some of these cryptic usernames in this

666
00:26:37,919 --> 00:26:39,360
list here

667
00:26:39,360 --> 00:26:41,520
are already known and you can find cve

668
00:26:41,520 --> 00:26:42,880
numbers about them

669
00:26:42,880 --> 00:26:45,200
but others are still unknown so static

670
00:26:45,200 --> 00:26:47,120
user accounts especially when they are

671
00:26:47,120 --> 00:26:48,559
undocumented

672
00:26:48,559 --> 00:26:50,960
are a real problem

673
00:26:50,960 --> 00:26:53,840
from all shadow files i extracted the

674
00:26:53,840 --> 00:26:56,159
password hashes

675
00:26:56,159 --> 00:26:58,000
i performed the dictionary attack on

676
00:26:58,000 --> 00:26:59,120
them to

677
00:26:59,120 --> 00:27:00,559
recover

678
00:27:00,559 --> 00:27:03,120
as much passwords as possible

679
00:27:03,120 --> 00:27:04,960
and the results showed that

680
00:27:04,960 --> 00:27:08,960
pass was the most common

681
00:27:08,960 --> 00:27:11,039
hard coded password

682
00:27:11,039 --> 00:27:13,039
followed by one two three four

683
00:27:13,039 --> 00:27:16,080
and an empty password

684
00:27:16,080 --> 00:27:17,520
and all in all

685
00:27:17,520 --> 00:27:19,440
68 percent of all hard hard-coded

686
00:27:19,440 --> 00:27:22,159
passwords um have been recovered

687
00:27:22,159 --> 00:27:24,720
the mri.net used a total of 62

688
00:27:24,720 --> 00:27:26,320
predefined combinations of factory

689
00:27:26,320 --> 00:27:28,640
default usernames and passwords and 12

690
00:27:28,640 --> 00:27:31,279
of them were also identified here

691
00:27:31,279 --> 00:27:33,840
in this research

692
00:27:33,840 --> 00:27:36,000
please keep in mind

693
00:27:36,000 --> 00:27:37,600
these are the results of a static

694
00:27:37,600 --> 00:27:39,120
analysis

695
00:27:39,120 --> 00:27:41,919
we don't even know if there is yes

696
00:27:41,919 --> 00:27:43,600
a service running that

697
00:27:43,600 --> 00:27:45,440
could allow user login

698
00:27:45,440 --> 00:27:46,399
and

699
00:27:46,399 --> 00:27:48,320
in addition we cannot know what happens

700
00:27:48,320 --> 00:27:51,840
at runtime um so this is like a snapshot

701
00:27:51,840 --> 00:27:53,440
of the device software

702
00:27:53,440 --> 00:27:55,520
um which we shot before the first boot

703
00:27:55,520 --> 00:27:57,200
of the operating system

704
00:27:57,200 --> 00:27:58,159
and

705
00:27:58,159 --> 00:28:00,799
maybe after the first boot process or

706
00:28:00,799 --> 00:28:03,279
during the first boot process

707
00:28:03,279 --> 00:28:05,039
the user is forced to

708
00:28:05,039 --> 00:28:05,919
change

709
00:28:05,919 --> 00:28:08,080
the default credentials

710
00:28:08,080 --> 00:28:10,720
so this is one of the disadvantages

711
00:28:10,720 --> 00:28:15,080
of a static analysis we have here

712
00:28:16,080 --> 00:28:17,600
as part of the analysis also

713
00:28:17,600 --> 00:28:19,039
cryptographic material has been

714
00:28:19,039 --> 00:28:21,600
extracted um this table here

715
00:28:21,600 --> 00:28:24,559
uh lists a number of cryptographic keys

716
00:28:24,559 --> 00:28:26,720
by their type

717
00:28:26,720 --> 00:28:29,600
most of them are tls certificates

718
00:28:29,600 --> 00:28:31,520
among them are a lot of root

719
00:28:31,520 --> 00:28:34,720
certificates um but also hard-coded and

720
00:28:34,720 --> 00:28:37,840
self-send certificates

721
00:28:37,840 --> 00:28:40,880
also a lot of rsa keys

722
00:28:40,880 --> 00:28:42,559
some of them belong to their

723
00:28:42,559 --> 00:28:44,720
corresponding tls certificate

724
00:28:44,720 --> 00:28:47,039
others are used for ssh

725
00:28:47,039 --> 00:28:49,039
and regarding ssh

726
00:28:49,039 --> 00:28:51,520
most of the rsa keys are identified as

727
00:28:51,520 --> 00:28:53,279
ssh host keys

728
00:28:53,279 --> 00:28:55,440
and a few public keys

729
00:28:55,440 --> 00:28:57,679
have been identified

730
00:28:57,679 --> 00:28:59,039
which are used for key-based

731
00:28:59,039 --> 00:29:01,679
authentication but i will come to that

732
00:29:01,679 --> 00:29:04,240
point later

733
00:29:05,760 --> 00:29:07,279
so what's the problem with hard-coded

734
00:29:07,279 --> 00:29:08,720
keys

735
00:29:08,720 --> 00:29:10,240
let's have a look on the principle of

736
00:29:10,240 --> 00:29:12,399
asymmetric encryption

737
00:29:12,399 --> 00:29:15,360
on our device we generate an individual

738
00:29:15,360 --> 00:29:19,279
pair of keys let's say rsa keys so now

739
00:29:19,279 --> 00:29:22,399
we have two different keys a private key

740
00:29:22,399 --> 00:29:24,080
which we keep secret on the device and

741
00:29:24,080 --> 00:29:25,600
the public key which we provide to our

742
00:29:25,600 --> 00:29:27,039
clients

743
00:29:27,039 --> 00:29:28,000
and

744
00:29:28,000 --> 00:29:30,960
our client is now able to encrypt a

745
00:29:30,960 --> 00:29:34,320
message using this public key

746
00:29:34,320 --> 00:29:36,320
but the only one who is able to decrypt

747
00:29:36,320 --> 00:29:38,159
this message is the owner of the private

748
00:29:38,159 --> 00:29:40,559
key so the security is based on keeping

749
00:29:40,559 --> 00:29:43,039
the private key secret

750
00:29:43,039 --> 00:29:45,440
and in case of a hard coded certificate

751
00:29:45,440 --> 00:29:47,039
um

752
00:29:47,039 --> 00:29:49,360
all device with that firmware use the

753
00:29:49,360 --> 00:29:51,840
same public and same private key

754
00:29:51,840 --> 00:29:54,559
so for example the device may use these

755
00:29:54,559 --> 00:29:57,600
keys for https communication um due with

756
00:29:57,600 --> 00:29:59,200
the web interface

757
00:29:59,200 --> 00:30:01,440
and in this case an attacker could

758
00:30:01,440 --> 00:30:04,399
easily decrypt the tls traffic by just

759
00:30:04,399 --> 00:30:06,080
extracting the private key from the

760
00:30:06,080 --> 00:30:07,200
firmware

761
00:30:07,200 --> 00:30:09,120
and yes the firmware is publicly

762
00:30:09,120 --> 00:30:11,039
available on the internet so

763
00:30:11,039 --> 00:30:12,799
extracting the private key shouldn't be

764
00:30:12,799 --> 00:30:15,279
a problem

765
00:30:15,440 --> 00:30:17,360
in many firmware files

766
00:30:17,360 --> 00:30:18,960
i've seen hard coded certificates and

767
00:30:18,960 --> 00:30:21,440
hard code sh host keys

768
00:30:21,440 --> 00:30:23,760
but also here

769
00:30:23,760 --> 00:30:27,520
we cannot absolutely rely on the results

770
00:30:27,520 --> 00:30:28,480
because

771
00:30:28,480 --> 00:30:32,000
the device may regenerate a

772
00:30:32,000 --> 00:30:34,720
key pair during the first boot process

773
00:30:34,720 --> 00:30:37,600
and those overwrite the hard-coded key

774
00:30:37,600 --> 00:30:39,679
pair

775
00:30:39,679 --> 00:30:41,679
and we simply cannot verify that with a

776
00:30:41,679 --> 00:30:44,559
static analysis

777
00:30:46,320 --> 00:30:48,159
in addition to that

778
00:30:48,159 --> 00:30:51,440
hard-coded tls keys can be used to yes

779
00:30:51,440 --> 00:30:53,840
to identify the ip address of public

780
00:30:53,840 --> 00:30:56,480
public reachable devices

781
00:30:56,480 --> 00:30:58,240
here you can see an example where you

782
00:30:58,240 --> 00:30:59,360
show them

783
00:30:59,360 --> 00:31:00,159
to

784
00:31:00,159 --> 00:31:02,840
search for iot devices by a certificate

785
00:31:02,840 --> 00:31:05,039
fingerprint and

786
00:31:05,039 --> 00:31:07,600
as this certificate is hard coded all

787
00:31:07,600 --> 00:31:09,440
devices use the same certificate with

788
00:31:09,440 --> 00:31:11,039
the same fingerprint

789
00:31:11,039 --> 00:31:12,880
that means that i can use this approach

790
00:31:12,880 --> 00:31:14,000
to

791
00:31:14,000 --> 00:31:15,519
just to identify

792
00:31:15,519 --> 00:31:17,039
the app addresses of all internet

793
00:31:17,039 --> 00:31:18,640
reachable devices

794
00:31:18,640 --> 00:31:21,120
and this can be used to conduct very

795
00:31:21,120 --> 00:31:23,279
very targeted attacks on specific device

796
00:31:23,279 --> 00:31:24,399
models

797
00:31:24,399 --> 00:31:27,519
for example to connect to these devices

798
00:31:27,519 --> 00:31:30,080
with an hard-coded password

799
00:31:30,080 --> 00:31:31,760
that i've extracted before from the

800
00:31:31,760 --> 00:31:36,158
firmware or any any other attack

801
00:31:38,720 --> 00:31:40,960
after the automated analyzer is finished

802
00:31:40,960 --> 00:31:42,880
i had a large database of extracted

803
00:31:42,880 --> 00:31:44,480
files and

804
00:31:44,480 --> 00:31:46,640
a lot of metadata about them

805
00:31:46,640 --> 00:31:49,279
i use this database for further manual

806
00:31:49,279 --> 00:31:51,039
analysis

807
00:31:51,039 --> 00:31:54,159
for example i use the metadata of all

808
00:31:54,159 --> 00:31:56,480
identified rsa keys to search for the

809
00:31:56,480 --> 00:31:58,840
filename authorized

810
00:31:58,840 --> 00:32:01,200
keys this file allows key base

811
00:32:01,200 --> 00:32:03,120
identification so

812
00:32:03,120 --> 00:32:05,279
the owner of the private key is able to

813
00:32:05,279 --> 00:32:07,279
log into the device

814
00:32:07,279 --> 00:32:10,960
in case an ssh service is running

815
00:32:11,120 --> 00:32:13,440
in firmware images of four different

816
00:32:13,440 --> 00:32:14,480
routers

817
00:32:14,480 --> 00:32:17,200
i've identified an authorized keys file

818
00:32:17,200 --> 00:32:19,440
three of them offer an ssh service

819
00:32:19,440 --> 00:32:21,360
according to the user manual

820
00:32:21,360 --> 00:32:24,399
so i contacted the vendor and described

821
00:32:24,399 --> 00:32:25,519
the problem

822
00:32:25,519 --> 00:32:28,559
but the vendor rejected that and claimed

823
00:32:28,559 --> 00:32:31,039
that key based authentication would be

824
00:32:31,039 --> 00:32:32,559
disabled

825
00:32:32,559 --> 00:32:34,559
a little research showed that for

826
00:32:34,559 --> 00:32:37,440
dropbear um which was used in this case

827
00:32:37,440 --> 00:32:38,960
for ssh

828
00:32:38,960 --> 00:32:41,679
you cannot do that by configuration

829
00:32:41,679 --> 00:32:44,159
you have to compile the executable um

830
00:32:44,159 --> 00:32:47,200
explicitly without keypad identification

831
00:32:47,200 --> 00:32:48,000
so

832
00:32:48,000 --> 00:32:51,279
i did that and yeah compared the binary

833
00:32:51,279 --> 00:32:53,279
i've extracted

834
00:32:53,279 --> 00:32:54,840
with the compiled

835
00:32:54,840 --> 00:32:58,000
one and look for the function call used

836
00:32:58,000 --> 00:33:00,399
for key based authentication and i also

837
00:33:00,399 --> 00:33:02,080
found it index in the extracted drop

838
00:33:02,080 --> 00:33:03,440
executable

839
00:33:03,440 --> 00:33:05,679
so i'm pretty sure that key based

840
00:33:05,679 --> 00:33:07,039
identification

841
00:33:07,039 --> 00:33:08,399
is possible

842
00:33:08,399 --> 00:33:11,279
and that the owner of the private key is

843
00:33:11,279 --> 00:33:13,279
able to log into the device

844
00:33:13,279 --> 00:33:15,600
but i cannot prove that um because i

845
00:33:15,600 --> 00:33:17,360
don't have access to one of these

846
00:33:17,360 --> 00:33:19,840
devices so yes this was really

847
00:33:19,840 --> 00:33:22,720
frustrating for me

848
00:33:22,799 --> 00:33:25,279
okay i also analyzed all extracted files

849
00:33:25,279 --> 00:33:28,320
with regard to yeah let's say suspicious

850
00:33:28,320 --> 00:33:29,440
strings

851
00:33:29,440 --> 00:33:30,799
and uh

852
00:33:30,799 --> 00:33:33,919
thereby i found a cgi script um

853
00:33:33,919 --> 00:33:36,240
which is part of the web interface

854
00:33:36,240 --> 00:33:37,440
um

855
00:33:37,440 --> 00:33:40,320
i've identified this file in firmware

856
00:33:40,320 --> 00:33:45,039
files of um nine different devices um

857
00:33:45,039 --> 00:33:48,480
and yes when this cgi script is called a

858
00:33:48,480 --> 00:33:51,200
telnet service is started and a new user

859
00:33:51,200 --> 00:33:52,640
is created

860
00:33:52,640 --> 00:33:54,159
and this script

861
00:33:54,159 --> 00:33:57,200
was identified in different versions

862
00:33:57,200 --> 00:33:59,120
in a newer version an ssh service is

863
00:33:59,120 --> 00:34:02,080
started instead of telnet

864
00:34:02,080 --> 00:34:03,279
and the name

865
00:34:03,279 --> 00:34:05,600
of the created user account is nsa

866
00:34:05,600 --> 00:34:07,039
rescue angel

867
00:34:07,039 --> 00:34:09,440
and all of the affected products are

868
00:34:09,440 --> 00:34:11,760
network attached storage systems

869
00:34:11,760 --> 00:34:14,719
and most of them are yeah from the

870
00:34:14,719 --> 00:34:17,520
vendors product line called nsa so i

871
00:34:17,520 --> 00:34:18,960
think that

872
00:34:18,960 --> 00:34:23,040
lead to the username nsa rescue angel

873
00:34:23,599 --> 00:34:25,839
i reported that to the vendor and the

874
00:34:25,839 --> 00:34:27,760
vendor confirmed the backdoor

875
00:34:27,760 --> 00:34:30,960
and stated that yeah

876
00:34:30,960 --> 00:34:32,960
yeah this function was used for

877
00:34:32,960 --> 00:34:36,480
troubleshooting during development

878
00:34:36,480 --> 00:34:38,719
for four of the affected devices a new

879
00:34:38,719 --> 00:34:40,719
firmware version was released

880
00:34:40,719 --> 00:34:43,520
and the other five products

881
00:34:43,520 --> 00:34:45,918
will not receive a security patch as the

882
00:34:45,918 --> 00:34:48,399
support period already ended for them

883
00:34:48,399 --> 00:34:50,320
and yes this is

884
00:34:50,320 --> 00:34:52,079
due to the short product life cycle of

885
00:34:52,079 --> 00:34:55,119
iot devices so in this case

886
00:34:55,119 --> 00:34:56,750
they will stay vulnerable forever

887
00:34:56,750 --> 00:34:59,849
[Music]

888
00:35:00,640 --> 00:35:02,320
okay i also want to mention that i've

889
00:35:02,320 --> 00:35:04,560
identified some let's say unusual

890
00:35:04,560 --> 00:35:06,880
software components in device firmware

891
00:35:06,880 --> 00:35:10,480
for example tcp dump um tcp dump is a

892
00:35:10,480 --> 00:35:13,119
tool which allows to capture

893
00:35:13,119 --> 00:35:14,640
network traffic

894
00:35:14,640 --> 00:35:15,599
um

895
00:35:15,599 --> 00:35:19,520
i found tcp dump in 500 film images of

896
00:35:19,520 --> 00:35:21,359
eight different vendors

897
00:35:21,359 --> 00:35:24,160
mainly in firmware files of routers and

898
00:35:24,160 --> 00:35:26,560
web phones

899
00:35:26,560 --> 00:35:29,200
and in case of a router

900
00:35:29,200 --> 00:35:31,040
i could imagine that capturing network

901
00:35:31,040 --> 00:35:33,440
traffic might be an helpful feature for

902
00:35:33,440 --> 00:35:36,000
troubleshooting for example

903
00:35:36,000 --> 00:35:37,440
but i don't know why you should need

904
00:35:37,440 --> 00:35:40,960
that for a vip phone

905
00:35:41,599 --> 00:35:44,800
in addition i've identified gdp gdp is a

906
00:35:44,800 --> 00:35:47,520
debugger used for runtime analysis of

907
00:35:47,520 --> 00:35:49,920
executables

908
00:35:49,920 --> 00:35:52,160
i was surprised how often i found gdp in

909
00:35:52,160 --> 00:35:56,720
firmware files all in all 861 times from

910
00:35:56,720 --> 00:35:59,119
nine different manufacturers

911
00:35:59,119 --> 00:36:00,160
and

912
00:36:00,160 --> 00:36:03,520
yeah gdp was mainly found in firmware

913
00:36:03,520 --> 00:36:05,839
images of security cameras routers and

914
00:36:05,839 --> 00:36:07,200
switches

915
00:36:07,200 --> 00:36:10,640
and it seems that yeah developers forgot

916
00:36:10,640 --> 00:36:13,440
to remove these binaries

917
00:36:13,440 --> 00:36:15,359
but it's definitely not a good practice

918
00:36:15,359 --> 00:36:17,520
to leave that components in the image

919
00:36:17,520 --> 00:36:19,280
and to ship the products with them to

920
00:36:19,280 --> 00:36:21,839
the customer

921
00:36:23,599 --> 00:36:24,880
now we come to the end of this

922
00:36:24,880 --> 00:36:27,440
presentation to sum up we have seen that

923
00:36:27,440 --> 00:36:30,160
it's possible to automate the process of

924
00:36:30,160 --> 00:36:32,160
firmware analysis

925
00:36:32,160 --> 00:36:34,560
in this research a total of 10 000

926
00:36:34,560 --> 00:36:36,560
firmware files were automatically

927
00:36:36,560 --> 00:36:38,880
unpacked and analyzed

928
00:36:38,880 --> 00:36:41,440
and the results show that yeah there are

929
00:36:41,440 --> 00:36:43,440
a lot of best practice violations

930
00:36:43,440 --> 00:36:45,440
vendors use hard-coded credentials

931
00:36:45,440 --> 00:36:47,920
hard-coded keys they forget to remove

932
00:36:47,920 --> 00:36:50,400
ssh keys and they even ship their

933
00:36:50,400 --> 00:36:52,960
products with a back door

934
00:36:52,960 --> 00:36:54,400
a lot of software components are

935
00:36:54,400 --> 00:36:57,599
outdated we've seen that more than 90 of

936
00:36:57,599 --> 00:36:59,599
the used kernel versions are out of

937
00:36:59,599 --> 00:37:02,320
support and are therefore affected by

938
00:37:02,320 --> 00:37:04,640
publicly known vulnerabilities

939
00:37:04,640 --> 00:37:06,480
and we've seen that vendors do not make

940
00:37:06,480 --> 00:37:08,400
a good job in binary hardening

941
00:37:08,400 --> 00:37:09,920
a lot of compiler-based exploit

942
00:37:09,920 --> 00:37:13,520
mitigations are simply not used

943
00:37:13,520 --> 00:37:15,359
thank you for your listening i think we

944
00:37:15,359 --> 00:37:17,280
now have a few minutes left to answer

945
00:37:17,280 --> 00:37:21,960
your questions thank you very much

