1
00:00:06,799 --> 00:00:07,359
hi

2
00:00:07,359 --> 00:00:10,480
good morning or good afternoon i hope

3
00:00:10,480 --> 00:00:14,719
you and your family are fine and

4
00:00:15,120 --> 00:00:18,240
especially in those hard times so

5
00:00:18,240 --> 00:00:21,680
the decision will be around like threat

6
00:00:21,680 --> 00:00:22,400
hunting in

7
00:00:22,400 --> 00:00:25,519
kubernetes and we'll start from

8
00:00:25,519 --> 00:00:28,840
what is a container up to the kubernetes

9
00:00:28,840 --> 00:00:30,720
cluster

10
00:00:30,720 --> 00:00:34,160
i am my name is mutas i'm

11
00:00:34,160 --> 00:00:37,440
i'm working in ibm like since

12
00:00:37,440 --> 00:00:40,800
around 40 more than four years

13
00:00:40,800 --> 00:00:44,000
and worked in different teams

14
00:00:44,000 --> 00:00:46,719
as a security researcher security

15
00:00:46,719 --> 00:00:49,520
analyst threat hunter

16
00:00:49,520 --> 00:00:53,120
um mainly around

17
00:00:53,120 --> 00:00:57,280
edr's cloud hybrid cloud containers and

18
00:00:57,280 --> 00:01:00,800
many different directions you can reach

19
00:01:00,800 --> 00:01:02,160
me

20
00:01:02,160 --> 00:01:07,280
or using linkedin or by email

21
00:01:09,520 --> 00:01:11,840
because we might have different

22
00:01:11,840 --> 00:01:13,200
background so i will

23
00:01:13,200 --> 00:01:17,040
try to um to cover like the most

24
00:01:17,040 --> 00:01:20,479
uh basics so we'll start from what is a

25
00:01:20,479 --> 00:01:21,920
container

26
00:01:21,920 --> 00:01:25,520
and this is really a nice uh whiteboard

27
00:01:25,520 --> 00:01:27,840
by julia evans

28
00:01:27,840 --> 00:01:31,280
but we'll do it like in a practical

29
00:01:31,280 --> 00:01:34,320
a practical way so let us run an

30
00:01:34,320 --> 00:01:40,960
ubuntu container directly so we have

31
00:01:40,960 --> 00:01:45,759
the container up and running um

32
00:01:45,759 --> 00:01:48,399
the container is just like a process so

33
00:01:48,399 --> 00:01:50,479
it's not

34
00:01:50,479 --> 00:01:53,520
really um it's just like a process

35
00:01:53,520 --> 00:01:54,720
running in its own

36
00:01:54,720 --> 00:01:56,880
namespace or you can say like an

37
00:01:56,880 --> 00:01:57,840
isolated

38
00:01:57,840 --> 00:02:00,719
process to see to see that like in a

39
00:02:00,719 --> 00:02:02,000
practical way let us

40
00:02:02,000 --> 00:02:05,759
run a process so i want to do a bank

41
00:02:05,759 --> 00:02:09,520
request but we don't have

42
00:02:09,520 --> 00:02:12,879
the bearing command or utility installed

43
00:02:12,879 --> 00:02:16,000
in ubuntu container so i will just

44
00:02:16,000 --> 00:02:23,840
install it quickly

45
00:02:40,000 --> 00:02:43,519
okay so we are inside the container and

46
00:02:43,519 --> 00:02:44,560
if we do like

47
00:02:44,560 --> 00:02:49,760
a pink command to edit

48
00:02:51,040 --> 00:02:54,080
and the process is running

49
00:02:54,080 --> 00:02:56,319
it's running inside the container and if

50
00:02:56,319 --> 00:02:57,280
we'll

51
00:02:57,280 --> 00:03:00,879
go back to the host system and we'll do

52
00:03:00,879 --> 00:03:02,840
like

53
00:03:02,840 --> 00:03:05,200
bs grab

54
00:03:05,200 --> 00:03:08,640
bank we'll see it running

55
00:03:08,640 --> 00:03:12,080
so every container is just like a

56
00:03:12,080 --> 00:03:12,640
process

57
00:03:12,640 --> 00:03:15,920
but a process can also have a child

58
00:03:15,920 --> 00:03:17,200
processes

59
00:03:17,200 --> 00:03:20,560
so we we can say like um

60
00:03:20,560 --> 00:03:24,319
just as it's here it's just a group of

61
00:03:24,319 --> 00:03:26,720
processes or it's just like a process

62
00:03:26,720 --> 00:03:28,480
and it might have

63
00:03:28,480 --> 00:03:32,560
some chai some children's

64
00:03:32,560 --> 00:03:37,040
uh the same like um

65
00:03:37,040 --> 00:03:40,159
as it is a process if we want to monitor

66
00:03:40,159 --> 00:03:44,840
like any security aspects we can see

67
00:03:44,840 --> 00:03:48,959
um like

68
00:03:48,959 --> 00:03:52,000
those are different containers in other

69
00:03:52,000 --> 00:03:52,560
words

70
00:03:52,560 --> 00:03:56,000
different processes each one running in

71
00:03:56,000 --> 00:03:59,120
its own namespace all of them

72
00:03:59,120 --> 00:04:02,640
sharing the same kernel

73
00:04:02,640 --> 00:04:05,760
and this is like the value of

74
00:04:05,760 --> 00:04:08,480
the containers versus virtual machines

75
00:04:08,480 --> 00:04:09,120
we don't

76
00:04:09,120 --> 00:04:11,439
we don't have to copy the operating

77
00:04:11,439 --> 00:04:13,040
system kernel for each

78
00:04:13,040 --> 00:04:15,920
container so all of them sharing the

79
00:04:15,920 --> 00:04:17,358
same kernel

80
00:04:17,358 --> 00:04:21,040
and the added because all of them having

81
00:04:21,040 --> 00:04:23,280
the same kernel then

82
00:04:23,280 --> 00:04:26,080
if we'll monitor or if we'll have our

83
00:04:26,080 --> 00:04:27,759
security visibility

84
00:04:27,759 --> 00:04:30,000
at the kernel level then we will see

85
00:04:30,000 --> 00:04:31,120
everything

86
00:04:31,120 --> 00:04:33,759
happening in those containers because

87
00:04:33,759 --> 00:04:34,960
for any container

88
00:04:34,960 --> 00:04:37,600
if this container wants to create a

89
00:04:37,600 --> 00:04:38,960
process

90
00:04:38,960 --> 00:04:42,160
creating a process is a system call so

91
00:04:42,160 --> 00:04:45,360
it it it will be passed to the kernel

92
00:04:45,360 --> 00:04:47,840
if if this container wants to create a

93
00:04:47,840 --> 00:04:49,040
network connection

94
00:04:49,040 --> 00:04:52,240
it's another system called so having the

95
00:04:52,240 --> 00:04:52,800
current

96
00:04:52,800 --> 00:04:54,840
having the visibility at the kernel

97
00:04:54,840 --> 00:04:56,080
level

98
00:04:56,080 --> 00:04:58,240
will see everything that will be

99
00:04:58,240 --> 00:05:01,039
executed in every container

100
00:05:01,039 --> 00:05:02,960
every network connection every process

101
00:05:02,960 --> 00:05:04,880
creation every file modification

102
00:05:04,880 --> 00:05:08,479
every file creation every system call

103
00:05:08,479 --> 00:05:09,360
activity

104
00:05:09,360 --> 00:05:12,800
will go through the kernel

105
00:05:12,800 --> 00:05:16,240
and for that we

106
00:05:16,240 --> 00:05:18,800
we have like an open source solution

107
00:05:18,800 --> 00:05:19,280
called

108
00:05:19,280 --> 00:05:23,440
 flow it's a lightweight

109
00:05:23,440 --> 00:05:26,479
container aware solution to

110
00:05:26,479 --> 00:05:29,199
to get this kernel visibility to see

111
00:05:29,199 --> 00:05:31,440
every process execution every file

112
00:05:31,440 --> 00:05:34,240
modifications and so on

113
00:05:34,240 --> 00:05:37,840
and using it we can achieve

114
00:05:37,840 --> 00:05:40,479
the containers on time security we can

115
00:05:40,479 --> 00:05:41,680
detect

116
00:05:41,680 --> 00:05:44,880
several attack tactics and techniques or

117
00:05:44,880 --> 00:05:47,120
miter tactics and techniques we can do

118
00:05:47,120 --> 00:05:48,960
some for it will help us to do some

119
00:05:48,960 --> 00:05:50,479
foreign sex and

120
00:05:50,479 --> 00:05:53,840
threat hunting so it will expand

121
00:05:53,840 --> 00:05:58,230
the um the security team visibility to

122
00:05:58,230 --> 00:05:59,520
[Music]

123
00:05:59,520 --> 00:06:02,960
into this new uh container and

124
00:06:02,960 --> 00:06:06,960
container landscape

125
00:06:06,960 --> 00:06:10,000
okay so we know what is a container it's

126
00:06:10,000 --> 00:06:12,400
just simply a process

127
00:06:12,400 --> 00:06:14,800
isolated process a process running it's

128
00:06:14,800 --> 00:06:15,680
in its own

129
00:06:15,680 --> 00:06:18,720
namespace we know about the container

130
00:06:18,720 --> 00:06:20,560
runtime security

131
00:06:20,560 --> 00:06:23,039
we need to have the visibility into

132
00:06:23,039 --> 00:06:24,319
what's happening

133
00:06:24,319 --> 00:06:27,120
in the container during its run time and

134
00:06:27,120 --> 00:06:28,800
we can achieve that by

135
00:06:28,800 --> 00:06:32,160
having our or by having

136
00:06:32,160 --> 00:06:37,280
visibility at the kernel level and

137
00:06:38,800 --> 00:06:41,600
all of that so far it's just like a

138
00:06:41,600 --> 00:06:42,720
container running

139
00:06:42,720 --> 00:06:45,840
or running container

140
00:06:45,840 --> 00:06:49,840
um but um

141
00:06:50,479 --> 00:06:54,080
we need something to orchestrate the

142
00:06:54,080 --> 00:06:54,960
containers

143
00:06:54,960 --> 00:06:58,240
or to manage the containers

144
00:06:58,240 --> 00:07:00,240
and for for that one of the most

145
00:07:00,240 --> 00:07:03,919
successful platforms is kubernetes

146
00:07:03,919 --> 00:07:06,960
so in kubernetes you can have a a

147
00:07:06,960 --> 00:07:07,919
cluster

148
00:07:07,919 --> 00:07:10,240
like one master node and two worker

149
00:07:10,240 --> 00:07:12,960
nodes just like as an example

150
00:07:12,960 --> 00:07:16,240
the master node will um

151
00:07:16,240 --> 00:07:18,720
will do the management like if you want

152
00:07:18,720 --> 00:07:19,520
to

153
00:07:19,520 --> 00:07:22,319
to run a new container it will do the

154
00:07:22,319 --> 00:07:23,440
scheduling

155
00:07:23,440 --> 00:07:25,440
that con and to distribute the

156
00:07:25,440 --> 00:07:27,039
containers across

157
00:07:27,039 --> 00:07:30,400
the worker nodes you okay and

158
00:07:30,400 --> 00:07:33,599
there is also centralized database and

159
00:07:33,599 --> 00:07:37,360
so it will handle all the management or

160
00:07:37,360 --> 00:07:39,199
the cluster management

161
00:07:39,199 --> 00:07:42,840
aspects so it it will be

162
00:07:42,840 --> 00:07:45,759
um really orchestrated in

163
00:07:45,759 --> 00:07:49,599
a nice way but

164
00:07:49,599 --> 00:07:55,199
all of those different technologies

165
00:07:55,199 --> 00:07:59,759
provides or it's um

166
00:07:59,759 --> 00:08:02,240
the security analyst needs really to

167
00:08:02,240 --> 00:08:02,800
shift

168
00:08:02,800 --> 00:08:06,080
or to to add to address this new

169
00:08:06,080 --> 00:08:10,000
landscape to cover like um

170
00:08:10,000 --> 00:08:11,759
if someone wants to compromise a

171
00:08:11,759 --> 00:08:13,199
container

172
00:08:13,199 --> 00:08:16,720
how can we detect it and if he will

173
00:08:16,720 --> 00:08:18,240
already compromise

174
00:08:18,240 --> 00:08:20,960
if he already compromised a container

175
00:08:20,960 --> 00:08:21,759
what can

176
00:08:21,759 --> 00:08:25,280
he do next like can he

177
00:08:25,280 --> 00:08:27,520
escalate his privileges or escape the

178
00:08:27,520 --> 00:08:29,599
container isolation and

179
00:08:29,599 --> 00:08:33,839
control the underlying operating system

180
00:08:33,839 --> 00:08:36,880
and if so can

181
00:08:36,880 --> 00:08:40,240
can can he like um

182
00:08:40,240 --> 00:08:42,799
move laterally to the other containers

183
00:08:42,799 --> 00:08:43,760
or and

184
00:08:43,760 --> 00:08:47,440
control the whole cluster so we'll see

185
00:08:47,440 --> 00:08:50,480
like um one scenario

186
00:08:50,480 --> 00:08:52,839
starting from compromising a container

187
00:08:52,839 --> 00:08:54,640
and

188
00:08:54,640 --> 00:08:58,319
doing the privilege escalation

189
00:08:59,360 --> 00:09:04,240
i hope so far so good it's really hard

190
00:09:05,760 --> 00:09:08,160
to do it like online not on site but i

191
00:09:08,160 --> 00:09:10,800
think um

192
00:09:10,800 --> 00:09:14,080
we'll also have like uh a question

193
00:09:14,080 --> 00:09:16,880
and the answer session at the end so

194
00:09:16,880 --> 00:09:17,800
feel free to

195
00:09:17,800 --> 00:09:19,120
[Music]

196
00:09:19,120 --> 00:09:22,959
to ask like any question

197
00:09:22,959 --> 00:09:25,040
i i don't want to continue in the slides

198
00:09:25,040 --> 00:09:26,240
so i will

199
00:09:26,240 --> 00:09:29,519
jump to um a live

200
00:09:29,519 --> 00:09:32,640
demo to see how

201
00:09:32,640 --> 00:09:34,959
how the attack or the initial stage of

202
00:09:34,959 --> 00:09:36,399
the

203
00:09:36,399 --> 00:09:38,880
one attack vector to a kubernetes

204
00:09:38,880 --> 00:09:41,600
cluster or to a container and then to

205
00:09:41,600 --> 00:09:45,519
escalate it to the whole cluster

206
00:09:45,519 --> 00:09:48,720
and we'll also see how we can detect it

207
00:09:48,720 --> 00:09:51,600
as we are going through the attack

208
00:09:51,600 --> 00:09:54,080
phases

209
00:09:54,800 --> 00:09:57,680
this is my master node i have one worker

210
00:09:57,680 --> 00:09:59,519
node here

211
00:09:59,519 --> 00:10:02,640
and let me exit from this container

212
00:10:02,640 --> 00:10:06,160
so i'm in node 1

213
00:10:06,160 --> 00:10:08,800
i will go to the master node let's do

214
00:10:08,800 --> 00:10:09,920
cube city i'll

215
00:10:09,920 --> 00:10:12,719
get pots

216
00:10:13,040 --> 00:10:15,920
and i need to

217
00:10:16,079 --> 00:10:19,120
just to change to an unroot user

218
00:10:19,120 --> 00:10:22,720
cube cdl get ports

219
00:10:29,440 --> 00:10:34,160
and and this one i should have

220
00:10:34,160 --> 00:10:35,920
removed that before our session i will

221
00:10:35,920 --> 00:10:47,839
just remove it quickly

222
00:10:59,839 --> 00:11:15,839
still removing it

223
00:11:18,320 --> 00:11:21,519
yep let's do it again get

224
00:11:21,519 --> 00:11:24,560
pots so we

225
00:11:24,560 --> 00:11:28,160
we have one one pot or a container is

226
00:11:28,160 --> 00:11:31,600
running in in the cluster to see it's

227
00:11:31,600 --> 00:11:33,279
running in

228
00:11:33,279 --> 00:11:35,279
which worker node we can see it's

229
00:11:35,279 --> 00:11:38,240
running in worker node

230
00:11:38,240 --> 00:11:42,000
node one which is this one

231
00:11:42,000 --> 00:11:46,560
and i've also created

232
00:11:46,560 --> 00:11:49,839
a service for it so

233
00:11:49,839 --> 00:11:53,920
you can see we have a node board service

234
00:11:53,920 --> 00:11:56,000
running and this is the port from where

235
00:11:56,000 --> 00:12:00,720
we can access that container

236
00:12:00,720 --> 00:12:04,320
if we'll go to to our browser we can

237
00:12:04,320 --> 00:12:06,800
access it here so

238
00:12:06,800 --> 00:12:11,120
like in simple words we just i just have

239
00:12:11,120 --> 00:12:14,800
the theme and vulnerable web up with up

240
00:12:14,800 --> 00:12:17,519
running as a container so we we have a

241
00:12:17,519 --> 00:12:21,680
vulnerable container in the cluster

242
00:12:21,680 --> 00:12:24,800
and it's just like an

243
00:12:24,800 --> 00:12:28,639
easy example where we have several

244
00:12:28,639 --> 00:12:32,000
vulnerabilities or

245
00:12:32,720 --> 00:12:35,920
several weaknesses in this container but

246
00:12:35,920 --> 00:12:38,480
the same example can be in any other

247
00:12:38,480 --> 00:12:40,639
container

248
00:12:40,639 --> 00:12:43,519
so if we'll go to command injection and

249
00:12:43,519 --> 00:12:44,480
we'll do like

250
00:12:44,480 --> 00:12:53,200
um we'll inject the ls command

251
00:12:53,200 --> 00:12:56,399
we can see the bank request succeeded

252
00:12:56,399 --> 00:12:58,959
and then we have

253
00:12:58,959 --> 00:13:02,320
the results of the list command

254
00:13:02,320 --> 00:13:04,639
so if we are able to execute any

255
00:13:04,639 --> 00:13:07,440
commands in that container

256
00:13:07,440 --> 00:13:10,000
some people might say like it's already

257
00:13:10,000 --> 00:13:12,639
an isolated container so it's not

258
00:13:12,639 --> 00:13:16,000
that big risk let's say

259
00:13:16,000 --> 00:13:19,279
and the container will be isolated from

260
00:13:19,279 --> 00:13:22,880
the underlying operating system

261
00:13:23,040 --> 00:13:27,120
but in kubernetes every container

262
00:13:27,120 --> 00:13:29,519
will have an automatically assigned

263
00:13:29,519 --> 00:13:30,639
token

264
00:13:30,639 --> 00:13:34,480
using this token it can like communicate

265
00:13:34,480 --> 00:13:36,000
with the api server

266
00:13:36,000 --> 00:13:39,920
or with the cubelet so

267
00:13:39,920 --> 00:13:44,320
we and that token it's automatically

268
00:13:44,320 --> 00:13:46,839
mounted to like a local file in that

269
00:13:46,839 --> 00:13:48,000
container

270
00:13:48,000 --> 00:13:50,639
so the attacker just need to read that

271
00:13:50,639 --> 00:13:52,959
local file inside the container

272
00:13:52,959 --> 00:13:55,279
to get the container specific token and

273
00:13:55,279 --> 00:13:56,240
then

274
00:13:56,240 --> 00:13:59,920
letter based on that container

275
00:13:59,920 --> 00:14:02,639
privileges or permissions he will be

276
00:14:02,639 --> 00:14:04,800
able to do other things

277
00:14:04,800 --> 00:14:08,880
so if we'll go to here we can

278
00:14:08,880 --> 00:14:12,160
just print

279
00:14:12,160 --> 00:14:16,880
the content of that file and we'll get

280
00:14:16,880 --> 00:14:19,279
the the token that's assigned to that

281
00:14:19,279 --> 00:14:20,560
container

282
00:14:20,560 --> 00:14:23,600
and this this one so this is like an

283
00:14:23,600 --> 00:14:24,800
automatically assigned

284
00:14:24,800 --> 00:14:28,880
token there's the the devops or

285
00:14:28,880 --> 00:14:32,079
the deployment engineers can also assign

286
00:14:32,079 --> 00:14:34,079
different tokens for different

287
00:14:34,079 --> 00:14:35,600
containers but

288
00:14:35,600 --> 00:14:38,480
there's also a default one so if we'll

289
00:14:38,480 --> 00:14:40,240
use

290
00:14:40,240 --> 00:14:45,839
this token and we'll use it to call

291
00:14:45,839 --> 00:14:50,079
the kubernetes apis so we have

292
00:14:50,079 --> 00:14:52,720
in the cluster and api server we'll use

293
00:14:52,720 --> 00:14:55,120
this token to call different apis from

294
00:14:55,120 --> 00:14:56,639
this server

295
00:14:56,639 --> 00:15:01,120
i will copy it and i already have some

296
00:15:01,120 --> 00:15:04,160
initial configuration

297
00:15:04,160 --> 00:15:07,120
to to save like the token in a config

298
00:15:07,120 --> 00:15:08,000
file

299
00:15:08,000 --> 00:15:10,720
and if we'll

300
00:15:11,120 --> 00:15:14,480
here i have like a kali machine

301
00:15:14,480 --> 00:15:17,680
i will just press them and they already

302
00:15:17,680 --> 00:15:19,440
have the cube ctl

303
00:15:19,440 --> 00:15:27,839
commands here so if i will do get pots

304
00:15:29,120 --> 00:15:32,240
we can we can see the results

305
00:15:32,240 --> 00:15:36,320
so we are able to send api requests

306
00:15:36,320 --> 00:15:40,160
from our kali machine to the to the

307
00:15:40,160 --> 00:15:41,120
kubernetes

308
00:15:41,120 --> 00:15:44,160
api server and using

309
00:15:44,160 --> 00:15:47,600
the container token

310
00:15:48,480 --> 00:15:52,320
uh this one it's really a nice one

311
00:15:52,320 --> 00:15:55,839
to detect like we have the different

312
00:15:55,839 --> 00:15:59,279
symptoms the first one

313
00:16:00,320 --> 00:16:04,639
someone calling the api server

314
00:16:04,639 --> 00:16:07,440
using the container token so it's a

315
00:16:07,440 --> 00:16:08,079
leaked

316
00:16:08,079 --> 00:16:10,639
container token and he's calling it from

317
00:16:10,639 --> 00:16:12,720
outside the cluster so

318
00:16:12,720 --> 00:16:16,240
full if for my demo you will be using

319
00:16:16,240 --> 00:16:20,959
uh curadar it's just um

320
00:16:21,120 --> 00:16:24,480
like um a security

321
00:16:24,480 --> 00:16:28,000
uh same solution and there are many same

322
00:16:28,000 --> 00:16:30,079
solutions that if you want to

323
00:16:30,079 --> 00:16:33,040
to try cured there's a community edition

324
00:16:33,040 --> 00:16:34,240
i'm also using it

325
00:16:34,240 --> 00:16:38,320
in my home to secure my home network

326
00:16:38,320 --> 00:16:42,160
uh it's free and you you can try it

327
00:16:42,160 --> 00:16:45,040
or you can try elasticsearch or other

328
00:16:45,040 --> 00:16:47,519
solutions

329
00:16:47,519 --> 00:16:50,800
so if we'll go to here

330
00:16:50,800 --> 00:16:54,160
we can see the kubernetes auditing

331
00:16:54,160 --> 00:16:57,759
so what i what i have done is

332
00:16:57,759 --> 00:17:01,360
i'm forwarding the api logs from

333
00:17:01,360 --> 00:17:04,319
the cluster to my lock management

334
00:17:04,319 --> 00:17:06,400
solution

335
00:17:06,400 --> 00:17:09,760
and you can do that

336
00:17:09,760 --> 00:17:13,119
from the confi the

337
00:17:13,119 --> 00:17:16,000
the master node configuration i can just

338
00:17:16,000 --> 00:17:19,839
highlight it quickly from here

339
00:17:27,599 --> 00:17:31,039
and you need to add some flags

340
00:17:31,039 --> 00:17:34,400
so i added

341
00:17:34,400 --> 00:17:38,080
those three flags the first one to

342
00:17:38,080 --> 00:17:38,880
define

343
00:17:38,880 --> 00:17:41,840
the audit policy which looks to lock or

344
00:17:41,840 --> 00:17:42,480
not

345
00:17:42,480 --> 00:17:46,160
the second one were to save the locks

346
00:17:46,160 --> 00:17:49,360
in this lock file and the format

347
00:17:49,360 --> 00:17:53,280
i choose json and

348
00:17:53,280 --> 00:17:58,639
that's most of the config configuration

349
00:17:58,840 --> 00:18:02,640
uh i've also shared my audit policy

350
00:18:02,640 --> 00:18:06,000
on online so if

351
00:18:06,000 --> 00:18:09,520
you want the audit policy so i have

352
00:18:09,520 --> 00:18:10,799
shared my

353
00:18:10,799 --> 00:18:13,840
audit policy here you can see it here

354
00:18:13,840 --> 00:18:16,320
with this policy.tml

355
00:18:16,320 --> 00:18:20,960
and i've also shared my syslog ng

356
00:18:20,960 --> 00:18:23,120
demon set configuration and if you want

357
00:18:23,120 --> 00:18:24,559
to use fluentd

358
00:18:24,559 --> 00:18:29,840
you can also use the config from here

359
00:18:32,240 --> 00:18:35,600
the other thing is so we are getting the

360
00:18:35,600 --> 00:18:36,799
kubernetes

361
00:18:36,799 --> 00:18:40,080
api logs here let me

362
00:18:40,080 --> 00:18:44,480
filter them like um

363
00:18:47,200 --> 00:18:51,679
in the last five minutes we did that uh

364
00:18:52,160 --> 00:18:55,679
lest pots from here to get pots or less

365
00:18:55,679 --> 00:18:56,559
spots

366
00:18:56,559 --> 00:19:01,200
and we can see the kubernetes event

367
00:19:01,200 --> 00:19:05,679
this is the json event that was locked

368
00:19:05,840 --> 00:19:10,960
and we can detect that it's

369
00:19:10,960 --> 00:19:14,960
this listing or container listing

370
00:19:14,960 --> 00:19:15,520
command

371
00:19:15,520 --> 00:19:19,600
was done using a container user

372
00:19:19,600 --> 00:19:23,200
or the container specific user

373
00:19:23,200 --> 00:19:25,760
and we can see the source ibs and ib

374
00:19:25,760 --> 00:19:28,640
outside the cluster range

375
00:19:28,640 --> 00:19:32,400
so someone using the container token

376
00:19:32,400 --> 00:19:39,840
to to call the kubernetes apis

377
00:19:41,919 --> 00:19:45,200
and um no the next thing is

378
00:19:45,200 --> 00:19:48,160
based on this token the attacker can do

379
00:19:48,160 --> 00:19:49,120
other things

380
00:19:49,120 --> 00:19:52,480
like um he can try to execute commands

381
00:19:52,480 --> 00:19:54,880
in other containers

382
00:19:54,880 --> 00:19:57,679
or he can try to create another

383
00:19:57,679 --> 00:19:58,720
container

384
00:19:58,720 --> 00:20:02,000
or another privileged container

385
00:20:02,000 --> 00:20:06,799
so what we'll do here i already have um

386
00:20:06,799 --> 00:20:09,919
let me print it currently we already

387
00:20:09,919 --> 00:20:11,280
have

388
00:20:11,280 --> 00:20:15,039
um a caliphate here to use

389
00:20:15,039 --> 00:20:19,200
like would launch a kali container

390
00:20:19,200 --> 00:20:22,240
and as kali has different

391
00:20:22,240 --> 00:20:24,960
attacking tools or utilities and we

392
00:20:24,960 --> 00:20:25,919
don't need to

393
00:20:25,919 --> 00:20:28,000
install them again and again so we can

394
00:20:28,000 --> 00:20:29,200
use just

395
00:20:29,200 --> 00:20:32,559
this container i'm going to

396
00:20:32,559 --> 00:20:36,320
set the privileged flag and to mount

397
00:20:36,320 --> 00:20:39,360
this um to mount

398
00:20:39,360 --> 00:20:43,520
the host file system cube ctl

399
00:20:43,520 --> 00:20:49,840
apply minus f kali

400
00:20:51,440 --> 00:20:54,559
so calibrate created cube cdl get

401
00:20:54,559 --> 00:20:58,240
pots container it's still

402
00:20:58,240 --> 00:21:01,520
creating it it's running now

403
00:21:01,520 --> 00:21:06,400
and we can also detect

404
00:21:06,400 --> 00:21:09,760
um several symptoms

405
00:21:09,760 --> 00:21:14,640
um one like based on this one

406
00:21:14,640 --> 00:21:17,760
the first one someone creating a

407
00:21:17,760 --> 00:21:19,919
container that we usually don't agree

408
00:21:19,919 --> 00:21:20,720
yet

409
00:21:20,720 --> 00:21:23,760
so in production we don't expect a dev

410
00:21:23,760 --> 00:21:24,320
op

411
00:21:24,320 --> 00:21:28,840
engineer or ss admin to create a kali

412
00:21:28,840 --> 00:21:31,600
container and

413
00:21:31,600 --> 00:21:34,480
the other one it's a privileged

414
00:21:34,480 --> 00:21:35,679
container

415
00:21:35,679 --> 00:21:38,320
it's really ready flag because

416
00:21:38,320 --> 00:21:41,360
privileged container can access anything

417
00:21:41,360 --> 00:21:45,120
in the host system the other

418
00:21:45,120 --> 00:21:48,640
the third symptom is a

419
00:21:48,640 --> 00:21:52,000
container mounting this the slash

420
00:21:52,000 --> 00:21:55,200
from the host system so it will

421
00:21:55,200 --> 00:21:57,039
this container will have access to the

422
00:21:57,039 --> 00:22:00,640
whole host file system

423
00:22:00,640 --> 00:22:04,159
and we can detect all of that using

424
00:22:04,159 --> 00:22:06,559
um

425
00:22:10,400 --> 00:22:14,320
i need to deposit

426
00:22:14,320 --> 00:22:16,399
i

427
00:22:18,480 --> 00:22:22,400
just so once a board will be created

428
00:22:22,400 --> 00:22:25,520
the kubernetes api logs will

429
00:22:25,520 --> 00:22:28,000
create this event clear about has been

430
00:22:28,000 --> 00:22:31,520
created or create a pot

431
00:22:33,440 --> 00:22:37,679
if you will go to the json event

432
00:22:37,919 --> 00:22:40,640
we can check it from here or we can

433
00:22:40,640 --> 00:22:41,760
check some details

434
00:22:41,760 --> 00:22:44,640
like it's already here privileged

435
00:22:44,640 --> 00:22:47,200
container let's see true

436
00:22:47,200 --> 00:22:50,559
it's mounting the slash from the host

437
00:22:50,559 --> 00:22:53,760
file system and the name of the

438
00:22:53,760 --> 00:22:54,480
container is

439
00:22:54,480 --> 00:22:57,679
kali container and the

440
00:22:57,679 --> 00:23:01,760
authorization decision was allowed

441
00:23:01,760 --> 00:23:04,799
so we can detect

442
00:23:04,799 --> 00:23:07,679
all of those different symptoms like

443
00:23:07,679 --> 00:23:08,960
someone used

444
00:23:08,960 --> 00:23:10,799
a container token to create another

445
00:23:10,799 --> 00:23:12,400
container

446
00:23:12,400 --> 00:23:18,240
or also the same container it's mounting

447
00:23:18,240 --> 00:23:22,320
a sensitive or the host root

448
00:23:22,320 --> 00:23:25,039
file system and that's also a privileged

449
00:23:25,039 --> 00:23:26,159
container

450
00:23:26,159 --> 00:23:29,440
and also it's a kali

451
00:23:29,440 --> 00:23:32,000
container so all those different

452
00:23:32,000 --> 00:23:32,720
symptoms

453
00:23:32,720 --> 00:23:36,240
does not indicate a normal

454
00:23:36,240 --> 00:23:39,520
dev op activity

455
00:23:39,840 --> 00:23:42,080
uh we have a privileged we have a

456
00:23:42,080 --> 00:23:44,159
container

457
00:23:44,159 --> 00:23:47,200
a privileged container and let's try to

458
00:23:47,200 --> 00:23:51,840
access it

459
00:23:55,120 --> 00:23:58,480
we are inside our kali container

460
00:23:58,480 --> 00:24:01,600
let's check here

461
00:24:01,600 --> 00:24:04,960
as we mounted the host root file system

462
00:24:04,960 --> 00:24:08,559
under slash host root

463
00:24:08,559 --> 00:24:12,158
we can like

464
00:24:12,320 --> 00:24:15,840
modify it like anything and like one of

465
00:24:15,840 --> 00:24:18,159
the different threads is like do we

466
00:24:18,159 --> 00:24:20,880
expect the container to modify

467
00:24:20,880 --> 00:24:25,039
a file like etc bus wd

468
00:24:25,039 --> 00:24:28,559
so do you expect a container to modify

469
00:24:28,559 --> 00:24:33,840
such a file or the shadow file

470
00:24:34,400 --> 00:24:36,960
so we don't expect that the container to

471
00:24:36,960 --> 00:24:38,320
modify

472
00:24:38,320 --> 00:24:41,440
such a critical files in the underlying

473
00:24:41,440 --> 00:24:47,600
operating system and the attacker can

474
00:24:47,600 --> 00:24:50,559
just modify it using any text editor or

475
00:24:50,559 --> 00:24:51,520
we can just

476
00:24:51,520 --> 00:24:54,640
uh change the process

477
00:24:54,640 --> 00:24:56,180
root directory to

478
00:24:56,180 --> 00:24:57,840
[Music]

479
00:24:57,840 --> 00:25:01,840
host root

480
00:25:04,480 --> 00:25:06,880
and if we'll add the user now it will

481
00:25:06,880 --> 00:25:08,799
the user will be added in

482
00:25:08,799 --> 00:25:11,200
the underlying operating system because

483
00:25:11,200 --> 00:25:12,880
we will modify

484
00:25:12,880 --> 00:25:15,200
the atc bus wg and then the line

485
00:25:15,200 --> 00:25:16,480
compressing system

486
00:25:16,480 --> 00:25:20,080
so let's add mic one

487
00:25:27,440 --> 00:25:30,559
so we we've added mic one

488
00:25:30,559 --> 00:25:34,240
this user um we are already we are

489
00:25:34,240 --> 00:25:35,440
inside the container but

490
00:25:35,440 --> 00:25:37,840
the user has been added to the

491
00:25:37,840 --> 00:25:38,720
underlying

492
00:25:38,720 --> 00:25:42,240
um operating system

493
00:25:42,240 --> 00:25:45,200
and using this in recently added user we

494
00:25:45,200 --> 00:25:46,159
can ssh

495
00:25:46,159 --> 00:25:49,760
to the worker node using it and we can

496
00:25:49,760 --> 00:25:53,520
see what we can access uh

497
00:25:53,520 --> 00:26:00,240
let me ssh to it so 192.168.0191

498
00:26:03,600 --> 00:26:10,240
and the user is mic 1 the password

499
00:26:10,240 --> 00:26:12,240
and we successfully logged into the node

500
00:26:12,240 --> 00:26:13,360
one using

501
00:26:13,360 --> 00:26:17,279
this added user and

502
00:26:17,279 --> 00:26:20,799
then this activity will also introduce

503
00:26:20,799 --> 00:26:24,000
different symptoms like container

504
00:26:24,000 --> 00:26:26,640
adding a user in intended underlying

505
00:26:26,640 --> 00:26:28,159
operating system

506
00:26:28,159 --> 00:26:31,200
or container modifying a critical or

507
00:26:31,200 --> 00:26:32,400
sensitive file

508
00:26:32,400 --> 00:26:38,000
like etc bus wd in the underlying cost

509
00:26:38,000 --> 00:26:41,279
and sometimes the tackle might ssh

510
00:26:41,279 --> 00:26:43,600
to that container while he's inside to

511
00:26:43,600 --> 00:26:45,600
that worker node while he's inside this

512
00:26:45,600 --> 00:26:47,360
container

513
00:26:47,360 --> 00:26:50,840
so we can see a container doing some ssh

514
00:26:50,840 --> 00:26:56,320
activities or other symptoms like

515
00:26:56,640 --> 00:27:00,159
we don't expect really

516
00:27:00,880 --> 00:27:03,520
someone to add a new user to a worker

517
00:27:03,520 --> 00:27:04,240
node

518
00:27:04,240 --> 00:27:07,360
those worker nodes will are managed only

519
00:27:07,360 --> 00:27:08,799
by the master node

520
00:27:08,799 --> 00:27:12,559
so no one should really create a new

521
00:27:12,559 --> 00:27:15,440
user in this worker node

522
00:27:15,440 --> 00:27:19,120
or even to ssh to the worker nodes

523
00:27:19,120 --> 00:27:22,159
and we can detect also those activities

524
00:27:22,159 --> 00:27:22,720
using

525
00:27:22,720 --> 00:27:26,159
um the standard we can also utilize the

526
00:27:26,159 --> 00:27:28,000
standard linux locks

527
00:27:28,000 --> 00:27:30,880
so if we'll check the last five minutes

528
00:27:30,880 --> 00:27:33,840
we should see some

529
00:27:33,919 --> 00:27:37,200
also stand let me

530
00:27:37,200 --> 00:27:42,799
see so we can see here

531
00:27:43,520 --> 00:27:46,640
in the node one a user account has been

532
00:27:46,640 --> 00:27:47,679
added

533
00:27:47,679 --> 00:27:51,200
so if we'll go to it

534
00:27:51,200 --> 00:27:53,760
this is the standard linux

535
00:27:53,760 --> 00:27:55,279
authentication logs

536
00:27:55,279 --> 00:27:57,679
we can see a user account has been added

537
00:27:57,679 --> 00:27:59,520
the username is mic1

538
00:27:59,520 --> 00:28:02,640
this is the user id and

539
00:28:02,640 --> 00:28:05,120
this is the home directory and so on and

540
00:28:05,120 --> 00:28:06,640
also

541
00:28:06,640 --> 00:28:09,039
the attacker can make it as a privileged

542
00:28:09,039 --> 00:28:10,399
user

543
00:28:10,399 --> 00:28:11,590
he just need to

544
00:28:11,590 --> 00:28:14,399
[Music]

545
00:28:14,399 --> 00:28:17,840
to change

546
00:28:19,679 --> 00:28:25,279
the user id to zero we will change

547
00:28:28,840 --> 00:28:30,480
sorry

548
00:28:30,480 --> 00:28:33,279
let me exit from here i will do it from

549
00:28:33,279 --> 00:28:33,760
here

550
00:28:33,760 --> 00:28:38,480
slash host root btc

551
00:28:38,480 --> 00:28:41,679
bus wt

552
00:28:42,559 --> 00:28:59,840
we don't have them here we can

553
00:29:05,279 --> 00:29:07,039
because the containers will have just

554
00:29:07,039 --> 00:29:08,320
the minimal

555
00:29:08,320 --> 00:29:13,520
needed utilities i'm installing nano

556
00:29:13,520 --> 00:29:16,559
and let's

557
00:29:16,559 --> 00:29:18,720
s

558
00:29:20,399 --> 00:29:22,720
so to make it a privileged user we just

559
00:29:22,720 --> 00:29:23,760
need to change

560
00:29:23,760 --> 00:29:26,960
the uid to 0 and it will be

561
00:29:26,960 --> 00:29:31,919
effectively root user

562
00:29:36,799 --> 00:29:41,039
so now we the user that we have created

563
00:29:41,039 --> 00:29:44,559
it's also a privileged user

564
00:29:45,200 --> 00:29:47,520
um

565
00:29:49,200 --> 00:29:51,679
and

566
00:29:52,320 --> 00:29:55,520
if we go back

567
00:29:55,520 --> 00:29:58,799
to here um so we

568
00:29:58,799 --> 00:30:01,919
we compromised a container using

569
00:30:01,919 --> 00:30:06,559
of a command injection vulnerability

570
00:30:06,559 --> 00:30:09,760
we can inject even a reverse shell here

571
00:30:09,760 --> 00:30:13,840
but we we just echoed

572
00:30:13,840 --> 00:30:17,120
the container token then we can use the

573
00:30:17,120 --> 00:30:18,640
container token

574
00:30:18,640 --> 00:30:22,159
to call different kubernetes apis

575
00:30:22,159 --> 00:30:24,880
based on the token privileges we can do

576
00:30:24,880 --> 00:30:26,880
different things

577
00:30:26,880 --> 00:30:29,200
maybe if this token does not allow us to

578
00:30:29,200 --> 00:30:30,159
create

579
00:30:30,159 --> 00:30:32,799
um a port directly maybe using this

580
00:30:32,799 --> 00:30:35,039
token will be able to access something

581
00:30:35,039 --> 00:30:37,039
else and then

582
00:30:37,039 --> 00:30:39,360
maybe a database or another container

583
00:30:39,360 --> 00:30:40,399
and then

584
00:30:40,399 --> 00:30:43,679
from there we'll have another path to

585
00:30:43,679 --> 00:30:46,640
escalate our privileges

586
00:30:46,640 --> 00:30:50,480
but using this container we were able to

587
00:30:50,480 --> 00:30:53,600
to create another port

588
00:30:53,600 --> 00:30:56,720
and we created a privileged one and the

589
00:30:56,720 --> 00:30:58,240
one

590
00:30:58,240 --> 00:31:01,679
that shares or that mounted the host

591
00:31:01,679 --> 00:31:05,440
root file system into the container

592
00:31:05,440 --> 00:31:08,720
and then we used that

593
00:31:09,600 --> 00:31:11,200
while we are inside the container we

594
00:31:11,200 --> 00:31:13,519
added a user in the underlying operating

595
00:31:13,519 --> 00:31:14,559
system

596
00:31:14,559 --> 00:31:18,080
then we assessed to the worker node

597
00:31:18,080 --> 00:31:21,279
using the recently added user

598
00:31:21,279 --> 00:31:24,559
and you can really do

599
00:31:24,559 --> 00:31:27,600
anything you want at this

600
00:31:27,600 --> 00:31:32,080
stage in this in this

601
00:31:32,080 --> 00:31:34,640
worker node you can access even the

602
00:31:34,640 --> 00:31:35,200
other

603
00:31:35,200 --> 00:31:39,519
containers and so on

604
00:31:39,519 --> 00:31:43,200
um if you want to achieve

605
00:31:43,200 --> 00:31:47,039
persistence you need to run like

606
00:31:47,039 --> 00:31:51,600
a reverse shell so um

607
00:31:51,600 --> 00:31:55,360
and to run reverse shell it can be done

608
00:31:55,360 --> 00:31:55,840
in

609
00:31:55,840 --> 00:31:59,200
linux in a single command like

610
00:31:59,200 --> 00:32:02,320
this one so let's see

611
00:32:02,320 --> 00:32:06,480
um let's make it this one

612
00:32:06,480 --> 00:32:10,080
so here we have the worker node

613
00:32:10,720 --> 00:32:13,360
and we have the kali machine here the

614
00:32:13,360 --> 00:32:14,399
attacker machine will

615
00:32:14,399 --> 00:32:19,600
be listening for 444 port

616
00:32:19,679 --> 00:32:23,760
and if we'll manage to run this command

617
00:32:23,760 --> 00:32:27,279
in the worker node it will connect back

618
00:32:27,279 --> 00:32:29,519
to the attacker machine

619
00:32:29,519 --> 00:32:32,720
so this is the kali box is listening

620
00:32:32,720 --> 00:32:36,399
and we have the reverse connection

621
00:32:36,399 --> 00:32:42,080
arrived from here we can do anything

622
00:32:42,080 --> 00:32:43,000
host name

623
00:32:43,000 --> 00:32:45,120
[Music]

624
00:32:45,120 --> 00:32:48,158
f config

625
00:32:48,320 --> 00:32:52,559
and we can see

626
00:32:52,559 --> 00:32:55,760
we we have reverse channel here and

627
00:32:55,760 --> 00:32:59,039
it's really also easy to

628
00:32:59,039 --> 00:33:02,000
to detect such kind of uh reverse or

629
00:33:02,000 --> 00:33:03,279
bond shells

630
00:33:03,279 --> 00:33:06,559
because we'll see um there are there are

631
00:33:06,559 --> 00:33:08,880
multiple symptoms

632
00:33:08,880 --> 00:33:11,440
one can be like a network connection

633
00:33:11,440 --> 00:33:12,640
created out of

634
00:33:12,640 --> 00:33:15,919
a bashing process another one can be

635
00:33:15,919 --> 00:33:16,880
like

636
00:33:16,880 --> 00:33:19,039
a process and the process file

637
00:33:19,039 --> 00:33:20,320
descriptors

638
00:33:20,320 --> 00:33:22,840
for input and output will be a network

639
00:33:22,840 --> 00:33:24,640
socket

640
00:33:24,640 --> 00:33:27,039
and

641
00:33:34,000 --> 00:33:37,039
yeah so i think and

642
00:33:37,039 --> 00:33:40,480
if we want to detect it we can use also

643
00:33:40,480 --> 00:33:44,480
um the open source cc flow

644
00:33:44,480 --> 00:33:47,519
because we will have a visibility into

645
00:33:47,519 --> 00:33:49,440
the process and network and file

646
00:33:49,440 --> 00:33:50,720
activities

647
00:33:50,720 --> 00:33:54,080
so we'll search for this is flow events

648
00:33:54,080 --> 00:33:54,720
we can see

649
00:33:54,720 --> 00:33:57,679
[Music]

650
00:33:57,679 --> 00:33:59,519
you can see a process connecting to a

651
00:33:59,519 --> 00:34:01,600
remote host

652
00:34:01,600 --> 00:34:04,960
and this process is the washer process

653
00:34:04,960 --> 00:34:08,399
and it's connecting to this destination

654
00:34:08,399 --> 00:34:10,480
port

655
00:34:10,480 --> 00:34:14,239
this is the cc flow event

656
00:34:14,239 --> 00:34:17,520
that will be locked in that case

657
00:34:17,520 --> 00:34:21,839
and um

658
00:34:23,119 --> 00:34:26,480
there are really

659
00:34:26,480 --> 00:34:28,879
different visibility levels because if

660
00:34:28,879 --> 00:34:30,159
we want to

661
00:34:30,159 --> 00:34:32,560
to do the same from inside the container

662
00:34:32,560 --> 00:34:33,520
we'll have

663
00:34:33,520 --> 00:34:36,239
the container details the container name

664
00:34:36,239 --> 00:34:38,560
the container image id

665
00:34:38,560 --> 00:34:43,199
and so on another example can be if

666
00:34:43,199 --> 00:34:46,639
we do like well i think

667
00:34:46,639 --> 00:34:49,839
so far so

668
00:34:49,839 --> 00:34:52,960
good and

669
00:34:54,960 --> 00:34:58,720
so we we we have seen different

670
00:34:58,720 --> 00:35:02,720
symptoms how we can do more most of or

671
00:35:02,720 --> 00:35:07,280
the different attack or techniques

672
00:35:07,280 --> 00:35:10,400
and at the cluster level

673
00:35:10,400 --> 00:35:14,160
um what the attacker can do is

674
00:35:14,160 --> 00:35:18,079
he can each kubernetes cluster

675
00:35:18,079 --> 00:35:21,760
has um like or at the beginning the

676
00:35:21,760 --> 00:35:23,040
kubernetes clusters

677
00:35:23,040 --> 00:35:26,560
have a unsecured port

678
00:35:26,560 --> 00:35:30,480
without using it you can call any apis

679
00:35:30,480 --> 00:35:32,240
without any authentication without any

680
00:35:32,240 --> 00:35:34,000
authorization

681
00:35:34,000 --> 00:35:38,400
but then this entry or this port

682
00:35:38,400 --> 00:35:41,680
is disabled now by default

683
00:35:41,680 --> 00:35:44,320
but if the attacker already compromised

684
00:35:44,320 --> 00:35:45,599
the cluster

685
00:35:45,599 --> 00:35:48,320
then he can just re-enable this

686
00:35:48,320 --> 00:35:49,920
unsecured port

687
00:35:49,920 --> 00:35:54,000
to in a way to achieve persistence

688
00:35:54,000 --> 00:35:57,280
or as a backdoor because it can be

689
00:35:57,280 --> 00:36:00,400
really re-enabled so

690
00:36:00,400 --> 00:36:02,320
the attacker can just re-enable that

691
00:36:02,320 --> 00:36:03,680
option

692
00:36:03,680 --> 00:36:07,359
and we can do many other um

693
00:36:07,359 --> 00:36:09,680
like we can hunt for different things

694
00:36:09,680 --> 00:36:10,560
like

695
00:36:10,560 --> 00:36:13,680
successful api requests from different

696
00:36:13,680 --> 00:36:16,000
geographies for the same user

697
00:36:16,000 --> 00:36:19,200
or we can even baseline which users are

698
00:36:19,200 --> 00:36:20,400
usually calling which

699
00:36:20,400 --> 00:36:23,040
apis

700
00:36:23,680 --> 00:36:26,800
we can see like unusual

701
00:36:26,800 --> 00:36:30,400
api requests from unusual user agents

702
00:36:30,400 --> 00:36:33,440
or from unusual countries so we we can

703
00:36:33,440 --> 00:36:33,839
do

704
00:36:33,839 --> 00:36:37,119
different api security analysis or the

705
00:36:37,119 --> 00:36:38,640
traditional api

706
00:36:38,640 --> 00:36:41,920
security analysis use cases

707
00:36:41,920 --> 00:36:46,560
and so i think

708
00:36:46,560 --> 00:36:50,160
this is most of the things that

709
00:36:50,160 --> 00:36:53,599
i really wanted to

710
00:36:53,599 --> 00:36:57,520
to show and i think it's really

711
00:36:57,520 --> 00:37:00,560
um like powerful

712
00:37:00,560 --> 00:37:03,839
to see like how we can detect

713
00:37:03,839 --> 00:37:07,760
different threats in this new landscape

714
00:37:07,760 --> 00:37:10,560
at the container level at the worker

715
00:37:10,560 --> 00:37:11,200
level and

716
00:37:11,200 --> 00:37:13,839
at the whole cluster level and how we

717
00:37:13,839 --> 00:37:15,359
can combine

718
00:37:15,359 --> 00:37:19,440
different data sources so we can get

719
00:37:19,440 --> 00:37:24,240
the kubernetes api logs we can get

720
00:37:24,240 --> 00:37:26,400
decisive law logs to see what's

721
00:37:26,400 --> 00:37:27,440
happening in

722
00:37:27,440 --> 00:37:30,240
every container and it's an open source

723
00:37:30,240 --> 00:37:31,359
solution

724
00:37:31,359 --> 00:37:36,240
you can check it um

725
00:37:36,240 --> 00:37:40,720
this is the github link for cc flow

726
00:37:42,000 --> 00:37:44,320
and

727
00:37:49,520 --> 00:37:54,640
we can also get the standard linux logs

728
00:37:54,640 --> 00:37:57,359
so the more data sources the more

729
00:37:57,359 --> 00:37:58,000
evidence

730
00:37:58,000 --> 00:38:01,119
that we will have and all

731
00:38:01,119 --> 00:38:03,440
different data sources will complement

732
00:38:03,440 --> 00:38:04,720
each other

733
00:38:04,720 --> 00:38:07,520
so you can correlate from different

734
00:38:07,520 --> 00:38:09,839
sources

735
00:38:09,839 --> 00:38:13,200
and yeah i think that's

736
00:38:13,200 --> 00:38:17,839
most of the points i'm ready for

737
00:38:17,839 --> 00:38:20,400
any questions i hope you enjoyed it i'm

738
00:38:20,400 --> 00:38:21,040
sorry

739
00:38:21,040 --> 00:38:24,400
it's really hard to to do like um

740
00:38:24,400 --> 00:38:27,680
an online session but

741
00:38:27,680 --> 00:38:31,040
it's out of um our control i hope

742
00:38:31,040 --> 00:38:34,240
next year will get back

743
00:38:34,240 --> 00:38:36,880
to this not to the normal security

744
00:38:36,880 --> 00:38:38,480
conferences

745
00:38:38,480 --> 00:38:43,599
so thank you all and stay safe

