1
00:00:00,640 --> 00:00:03,760
hi and welcome i'm philip and i want to

2
00:00:03,760 --> 00:00:06,160
talk a bit about security tradeoffs

3
00:00:06,160 --> 00:00:09,440
in elasticsearch to you so let me share

4
00:00:09,440 --> 00:00:10,240
my screen

5
00:00:10,240 --> 00:00:17,440
and we'll take it from there so

6
00:00:17,440 --> 00:00:20,000
here we go um security traders in

7
00:00:20,000 --> 00:00:21,119
elasticsearch

8
00:00:21,119 --> 00:00:23,439
um why am i picking this topic to talk

9
00:00:23,439 --> 00:00:24,160
about so

10
00:00:24,160 --> 00:00:26,000
i work for elastic the company behind

11
00:00:26,000 --> 00:00:27,519
elasticsearch

12
00:00:27,519 --> 00:00:29,279
my official type is developer advocate

13
00:00:29,279 --> 00:00:31,039
so i mostly talk about the good stuff

14
00:00:31,039 --> 00:00:31,840
that we do

15
00:00:31,840 --> 00:00:33,760
but today i want to take the opportunity

16
00:00:33,760 --> 00:00:35,920
and talk a bit about the stuff that

17
00:00:35,920 --> 00:00:38,719
maybe wasn't always that great or things

18
00:00:38,719 --> 00:00:39,440
that we have

19
00:00:39,440 --> 00:00:41,680
learned over the past years so this is a

20
00:00:41,680 --> 00:00:43,040
bit about the story of

21
00:00:43,040 --> 00:00:45,120
how you can improve your own product

22
00:00:45,120 --> 00:00:46,079
over time

23
00:00:46,079 --> 00:00:48,079
if you have never heard of elasticsearch

24
00:00:48,079 --> 00:00:49,600
this is the elastic stack where

25
00:00:49,600 --> 00:00:51,360
elasticsearch is sitting in the middle

26
00:00:51,360 --> 00:00:54,160
as kind of like the data store

27
00:00:54,160 --> 00:00:57,199
it has a rest api it's scalable it's

28
00:00:57,199 --> 00:00:59,199
very widely used if you search on

29
00:00:59,199 --> 00:01:01,760
github wikipedia stick overflow behind

30
00:01:01,760 --> 00:01:03,280
the search box there is always

31
00:01:03,280 --> 00:01:05,360
elasticsearch doing the search for you

32
00:01:05,360 --> 00:01:07,439
or it's very widely used in

33
00:01:07,439 --> 00:01:09,520
many other use cases around logs also in

34
00:01:09,520 --> 00:01:11,439
security use cases but that shouldn't be

35
00:01:11,439 --> 00:01:12,240
the topic

36
00:01:12,240 --> 00:01:13,840
i really want to talk a bit about the

37
00:01:13,840 --> 00:01:16,159
evolution of elasticsearch

38
00:01:16,159 --> 00:01:19,520
or more broadly how nosql data stores

39
00:01:19,520 --> 00:01:20,000
approach

40
00:01:20,000 --> 00:01:22,799
security generally so let's dive into

41
00:01:22,799 --> 00:01:23,759
that

42
00:01:23,759 --> 00:01:26,960
um this one is of course

43
00:01:26,960 --> 00:01:29,680
a joke um yes the best argument for

44
00:01:29,680 --> 00:01:31,360
nosql is that you can't have sql

45
00:01:31,360 --> 00:01:32,240
injections

46
00:01:32,240 --> 00:01:35,439
um if you don't have sql is kind of true

47
00:01:35,439 --> 00:01:35,920
but

48
00:01:35,920 --> 00:01:38,159
that's not really the point the idea

49
00:01:38,159 --> 00:01:39,520
here is really more

50
00:01:39,520 --> 00:01:42,640
did nosql improve security overall for

51
00:01:42,640 --> 00:01:43,680
data source

52
00:01:43,680 --> 00:01:46,720
yes or no and for that we probably have

53
00:01:46,720 --> 00:01:48,399
to go a bit through a

54
00:01:48,399 --> 00:01:52,000
development and where we are going so

55
00:01:52,000 --> 00:01:55,680
this i want to have is that initially

56
00:01:55,680 --> 00:01:58,079
you're very focused on the ease of use

57
00:01:58,079 --> 00:01:59,040
to grow

58
00:01:59,040 --> 00:02:02,159
and well get your product out there

59
00:02:02,159 --> 00:02:04,640
and as you progress along things will

60
00:02:04,640 --> 00:02:05,520
change but we will

61
00:02:05,520 --> 00:02:07,759
come back to this thesis pretty much at

62
00:02:07,759 --> 00:02:09,840
the end so we start with the premise

63
00:02:09,840 --> 00:02:12,959
that the ease of use to grow is kind of

64
00:02:12,959 --> 00:02:16,879
fundamental so part of that

65
00:02:16,879 --> 00:02:19,280
was that initially elasticsearch was

66
00:02:19,280 --> 00:02:20,800
always binding to

67
00:02:20,800 --> 00:02:23,760
all the interfaces which was great if

68
00:02:23,760 --> 00:02:24,959
you wanted to demo

69
00:02:24,959 --> 00:02:27,680
some clustering and you would just start

70
00:02:27,680 --> 00:02:29,280
the binary it would bind to all

71
00:02:29,280 --> 00:02:30,160
interfaces

72
00:02:30,160 --> 00:02:32,160
and then you could easily form a cluster

73
00:02:32,160 --> 00:02:33,680
with other nodes

74
00:02:33,680 --> 00:02:36,480
obviously for security reasons this is

75
00:02:36,480 --> 00:02:37,680
not what you want

76
00:02:37,680 --> 00:02:41,440
and since elasticsearch 2.0 which was

77
00:02:41,440 --> 00:02:44,560
years and years and years ago

78
00:02:44,560 --> 00:02:46,560
elasticsearch is not doing that anymore

79
00:02:46,560 --> 00:02:48,400
so it is only binding to

80
00:02:48,400 --> 00:02:51,680
localhost by default um and we'll get

81
00:02:51,680 --> 00:02:52,319
back to

82
00:02:52,319 --> 00:02:55,440
why that is important and why this still

83
00:02:55,440 --> 00:02:56,959
doesn't solve all the problems but this

84
00:02:56,959 --> 00:02:58,000
is something that

85
00:02:58,000 --> 00:03:00,560
you really want to have not to surprise

86
00:03:00,560 --> 00:03:01,440
people they

87
00:03:01,440 --> 00:03:03,760
just start your product and then

88
00:03:03,760 --> 00:03:05,519
suddenly they run a service and whoever

89
00:03:05,519 --> 00:03:07,360
wants to reach that might reach that

90
00:03:07,360 --> 00:03:10,400
you don't want to be in that position um

91
00:03:10,400 --> 00:03:13,280
the next thing that we did initially in

92
00:03:13,280 --> 00:03:14,480
elasticsearch was

93
00:03:14,480 --> 00:03:16,480
we're clustering automatically so

94
00:03:16,480 --> 00:03:18,319
besides finding to all interfaces by

95
00:03:18,319 --> 00:03:19,200
default

96
00:03:19,200 --> 00:03:21,760
um elasticsearch would also listen and

97
00:03:21,760 --> 00:03:23,519
broadcast on the local subnet

98
00:03:23,519 --> 00:03:25,360
to see are there any other elastic

99
00:03:25,360 --> 00:03:27,519
search nodes with the default

100
00:03:27,519 --> 00:03:29,200
elasticsearch plus the name

101
00:03:29,200 --> 00:03:31,760
but every cluster would have the same by

102
00:03:31,760 --> 00:03:32,560
default

103
00:03:32,560 --> 00:03:35,599
so it was kind of a funny story when i

104
00:03:35,599 --> 00:03:37,040
was running my first last

105
00:03:37,040 --> 00:03:39,599
search training way before joining

106
00:03:39,599 --> 00:03:40,480
elastic

107
00:03:40,480 --> 00:03:43,040
um that i had a couple of students in

108
00:03:43,040 --> 00:03:44,400
one subnet

109
00:03:44,400 --> 00:03:46,080
and each one was starting their own

110
00:03:46,080 --> 00:03:47,760
elasticsearch node

111
00:03:47,760 --> 00:03:50,640
and those would just cluster

112
00:03:50,640 --> 00:03:52,000
automatically or form

113
00:03:52,000 --> 00:03:54,400
one big cluster because the binaries

114
00:03:54,400 --> 00:03:55,840
found tool interfaces

115
00:03:55,840 --> 00:03:57,599
and the cluster was just scanning the

116
00:03:57,599 --> 00:03:59,439
local subnet for other instances

117
00:03:59,439 --> 00:04:00,720
everybody was using the default

118
00:04:00,720 --> 00:04:02,879
configuration so they had one

119
00:04:02,879 --> 00:04:05,680
big nice cluster which was an

120
00:04:05,680 --> 00:04:07,519
interesting experience and showed how

121
00:04:07,519 --> 00:04:10,239
easy that was but it also showed the

122
00:04:10,239 --> 00:04:10,879
problem

123
00:04:10,879 --> 00:04:13,840
that it might create chaos that if

124
00:04:13,840 --> 00:04:15,040
someone on one hand

125
00:04:15,040 --> 00:04:17,440
inserts some data and somebody else

126
00:04:17,440 --> 00:04:19,040
tries to delete data and don't think

127
00:04:19,040 --> 00:04:21,199
they're doing that locally

128
00:04:21,199 --> 00:04:23,520
they might be doing that to the data of

129
00:04:23,520 --> 00:04:24,960
somebody else

130
00:04:24,960 --> 00:04:27,360
not something you really want to have

131
00:04:27,360 --> 00:04:29,440
which might be even worse let's assume

132
00:04:29,440 --> 00:04:29,759
you

133
00:04:29,759 --> 00:04:33,040
vpn to your production system and

134
00:04:33,040 --> 00:04:36,000
then your local test installation

135
00:04:36,000 --> 00:04:38,560
clusters with that installation there

136
00:04:38,560 --> 00:04:40,880
that might lead to a very bad day when

137
00:04:40,880 --> 00:04:43,199
you think you drop some data locally and

138
00:04:43,199 --> 00:04:46,080
maybe you actually do that in production

139
00:04:46,080 --> 00:04:47,199
so that's another thing

140
00:04:47,199 --> 00:04:49,199
what we stopped doing at some point just

141
00:04:49,199 --> 00:04:51,600
because it was very easy to get started

142
00:04:51,600 --> 00:04:54,880
but generally from the security hygiene

143
00:04:54,880 --> 00:04:56,639
or in general

144
00:04:56,639 --> 00:04:59,840
in terms of like getting to a

145
00:04:59,840 --> 00:05:02,880
a state that is predictable that is not

146
00:05:02,880 --> 00:05:05,600
where you want to be also what we added

147
00:05:05,600 --> 00:05:06,320
over time

148
00:05:06,320 --> 00:05:08,880
was the so-called production mode so the

149
00:05:08,880 --> 00:05:10,320
assumption is

150
00:05:10,320 --> 00:05:11,840
when you're in development you don't

151
00:05:11,840 --> 00:05:14,320
really care about some settings so much

152
00:05:14,320 --> 00:05:14,880
like

153
00:05:14,880 --> 00:05:17,759
file handles and some configurations um

154
00:05:17,759 --> 00:05:19,280
whereas when you go to production

155
00:05:19,280 --> 00:05:21,440
you want to really have those set up

156
00:05:21,440 --> 00:05:23,120
correctly because otherwise you will

157
00:05:23,120 --> 00:05:23,759
fall

158
00:05:23,759 --> 00:05:26,800
on your nose pretty happy and

159
00:05:26,800 --> 00:05:28,000
people will always complain if that

160
00:05:28,000 --> 00:05:29,759
happens in production so what we would

161
00:05:29,759 --> 00:05:30,960
rather do is

162
00:05:30,960 --> 00:05:33,680
fail quickly in production work have

163
00:05:33,680 --> 00:05:34,560
people fix that

164
00:05:34,560 --> 00:05:36,560
and then set up a cluster properly

165
00:05:36,560 --> 00:05:38,479
rather than running into unexpected

166
00:05:38,479 --> 00:05:40,080
issues later on

167
00:05:40,080 --> 00:05:43,759
and how that works is that

168
00:05:43,759 --> 00:05:46,400
here some java code um it's from the

169
00:05:46,400 --> 00:05:47,440
current release

170
00:05:47,440 --> 00:05:49,759
basically what we are checking here is

171
00:05:49,759 --> 00:05:50,880
if elasticsearch

172
00:05:50,880 --> 00:05:53,600
is only bound to the loopback interface

173
00:05:53,600 --> 00:05:54,320
which is also

174
00:05:54,320 --> 00:05:58,000
default we're in development mode unless

175
00:05:58,000 --> 00:05:59,919
we change that and bind to other

176
00:05:59,919 --> 00:06:01,360
interfaces so we

177
00:06:01,360 --> 00:06:04,800
could form a cluster then we assume we

178
00:06:04,800 --> 00:06:06,160
are in production mode

179
00:06:06,160 --> 00:06:09,120
and then you need to fix these specific

180
00:06:09,120 --> 00:06:10,639
settings which i will show on the next

181
00:06:10,639 --> 00:06:11,840
slide

182
00:06:11,840 --> 00:06:14,240
you need to fix those um to actually

183
00:06:14,240 --> 00:06:15,840
start the process otherwise the process

184
00:06:15,840 --> 00:06:17,199
will terminate

185
00:06:17,199 --> 00:06:19,520
why is it not a configuration flag

186
00:06:19,520 --> 00:06:20,400
because

187
00:06:20,400 --> 00:06:22,479
otherwise everybody would just comment

188
00:06:22,479 --> 00:06:24,160
out the configuration flag and everybody

189
00:06:24,160 --> 00:06:26,080
would say like oh no i'm in development

190
00:06:26,080 --> 00:06:27,759
mode i don't want to fix this stupid

191
00:06:27,759 --> 00:06:29,440
thing right now

192
00:06:29,440 --> 00:06:32,960
but for everybody's sake

193
00:06:32,960 --> 00:06:34,880
you want to make sure that they are

194
00:06:34,880 --> 00:06:37,039
really in either development mode or if

195
00:06:37,039 --> 00:06:38,560
they are not in development mode then

196
00:06:38,560 --> 00:06:40,160
you want to fail hard if you don't want

197
00:06:40,160 --> 00:06:41,919
to give any work around so there is no

198
00:06:41,919 --> 00:06:45,280
way around that here are some examples

199
00:06:45,280 --> 00:06:48,800
of file handles um

200
00:06:48,800 --> 00:06:51,120
specific garbage collectors sparks in

201
00:06:51,120 --> 00:06:51,840
the jvm

202
00:06:51,840 --> 00:06:53,280
that we know that might corrupt your

203
00:06:53,280 --> 00:06:55,680
data things that will make

204
00:06:55,680 --> 00:06:57,919
your day terrible in production later on

205
00:06:57,919 --> 00:06:59,919
and that's why we checked them upfront

206
00:06:59,919 --> 00:07:03,840
in those so-called bootstrap checks

207
00:07:04,400 --> 00:07:06,160
current question is can you run

208
00:07:06,160 --> 00:07:07,759
elasticsearch as

209
00:07:07,759 --> 00:07:10,720
root and no you cannot and obviously you

210
00:07:10,720 --> 00:07:11,360
should not

211
00:07:11,360 --> 00:07:14,160
but it is not possible so what we do

212
00:07:14,160 --> 00:07:15,680
here is

213
00:07:15,680 --> 00:07:19,120
this is the example in our code where we

214
00:07:19,120 --> 00:07:19,599
check

215
00:07:19,599 --> 00:07:22,479
if you're running as root so we're using

216
00:07:22,479 --> 00:07:24,720
the java native access features

217
00:07:24,720 --> 00:07:27,440
to check that down here if you're on

218
00:07:27,440 --> 00:07:29,280
windows we have no idea and we

219
00:07:29,280 --> 00:07:31,520
don't know and won't check this but on

220
00:07:31,520 --> 00:07:34,639
any unix operating system where you have

221
00:07:34,639 --> 00:07:36,960
the concept of root we will check that

222
00:07:36,960 --> 00:07:38,080
and actually

223
00:07:38,080 --> 00:07:41,120
when this definitely running as root if

224
00:07:41,120 --> 00:07:42,080
this returns

225
00:07:42,080 --> 00:07:44,960
true then we will just throw a runtime

226
00:07:44,960 --> 00:07:45,599
exception

227
00:07:45,599 --> 00:07:47,360
and say like you cannot run

228
00:07:47,360 --> 00:07:48,879
elasticsearch as rude

229
00:07:48,879 --> 00:07:51,840
because nobody should do that right and

230
00:07:51,840 --> 00:07:53,120
everybody agrees that this

231
00:07:53,120 --> 00:07:56,840
is a very bad idea if you try to do it

232
00:07:56,840 --> 00:07:59,919
well docker comes along and people

233
00:07:59,919 --> 00:08:02,720
get interesting ideas and we see that on

234
00:08:02,720 --> 00:08:04,400
our issue tracker every now and then

235
00:08:04,400 --> 00:08:06,720
admittedly this was a little while ago

236
00:08:06,720 --> 00:08:08,000
um but

237
00:08:08,000 --> 00:08:10,560
here somebody just commented well this

238
00:08:10,560 --> 00:08:11,599
is merely annoying

239
00:08:11,599 --> 00:08:15,680
i want to run my process as root and

240
00:08:15,680 --> 00:08:17,120
if you have any security background

241
00:08:17,120 --> 00:08:18,800
probably you're like yeah

242
00:08:18,800 --> 00:08:22,319
no i always call this the yolo mode

243
00:08:22,319 --> 00:08:25,440
so what i always imagine is that people

244
00:08:25,440 --> 00:08:27,360
assume that they have from their data

245
00:08:27,360 --> 00:08:29,280
stories something like this

246
00:08:29,280 --> 00:08:33,200
yolo and we don't run that way

247
00:08:33,200 --> 00:08:36,240
another thing that caused a lot of the

248
00:08:36,240 --> 00:08:38,159
bad security issues that elasticsearch

249
00:08:38,159 --> 00:08:41,200
had over its lifetime was scripting

250
00:08:41,200 --> 00:08:43,360
the obvious choice is you use a general

251
00:08:43,360 --> 00:08:44,959
purpose scripting language that is out

252
00:08:44,959 --> 00:08:45,760
there and people

253
00:08:45,760 --> 00:08:47,839
know it's easy to integrate for you it's

254
00:08:47,839 --> 00:08:50,080
easy for your users to integrate

255
00:08:50,080 --> 00:08:52,880
the problem is tightening down a general

256
00:08:52,880 --> 00:08:54,160
purpose programming language

257
00:08:54,160 --> 00:08:56,080
is surprisingly hard because there are

258
00:08:56,080 --> 00:08:57,440
often ways to break

259
00:08:57,440 --> 00:08:59,680
out of the sandbox or use some

260
00:08:59,680 --> 00:09:01,279
reflection to cause something that you

261
00:09:01,279 --> 00:09:02,560
shouldn't be calling

262
00:09:02,560 --> 00:09:04,160
and that's why a lot of the really bad

263
00:09:04,160 --> 00:09:05,839
security issues that elasticsearch had

264
00:09:05,839 --> 00:09:07,120
over its lifetime

265
00:09:07,120 --> 00:09:11,600
were related to scripting and

266
00:09:11,600 --> 00:09:13,839
what did we do we created our own

267
00:09:13,839 --> 00:09:15,839
scripting language which

268
00:09:15,839 --> 00:09:18,000
has the slightly unfortunate name

269
00:09:18,000 --> 00:09:19,519
painless

270
00:09:19,519 --> 00:09:21,120
and then often people will complain that

271
00:09:21,120 --> 00:09:22,880
it is actually not that painless to

272
00:09:22,880 --> 00:09:24,800
right but rather painful

273
00:09:24,800 --> 00:09:27,920
um though the back story is the creator

274
00:09:27,920 --> 00:09:29,440
of that scripting language

275
00:09:29,440 --> 00:09:31,360
has chronic back pain and his dream is

276
00:09:31,360 --> 00:09:32,959
to be painless and that's how

277
00:09:32,959 --> 00:09:36,080
how he came up with that name it's not

278
00:09:36,080 --> 00:09:37,760
because we think that that programming

279
00:09:37,760 --> 00:09:40,560
language is scripting language is that

280
00:09:40,560 --> 00:09:43,519
painless actually um but that we could

281
00:09:43,519 --> 00:09:44,560
argue

282
00:09:44,560 --> 00:09:47,600
so the goals here where we want to have

283
00:09:47,600 --> 00:09:48,720
a secure language

284
00:09:48,720 --> 00:09:50,080
and we want to have a performant

285
00:09:50,080 --> 00:09:52,320
language and the language was really

286
00:09:52,320 --> 00:09:54,880
written just for elasticsearch so just

287
00:09:54,880 --> 00:09:56,560
to expose the features

288
00:09:56,560 --> 00:10:00,560
that we deem correct or like

289
00:10:00,560 --> 00:10:04,000
the to be usable in a datastore so

290
00:10:04,000 --> 00:10:05,440
there is no way to break out of the

291
00:10:05,440 --> 00:10:07,200
sandbox because we control what is

292
00:10:07,200 --> 00:10:08,320
available in a language

293
00:10:08,320 --> 00:10:11,760
also you can do some nice checks around

294
00:10:11,760 --> 00:10:14,000
you might run into some error later on

295
00:10:14,000 --> 00:10:15,440
and you might just block specific

296
00:10:15,440 --> 00:10:16,560
operations

297
00:10:16,560 --> 00:10:18,640
like recursion or something like that

298
00:10:18,640 --> 00:10:19,600
also performance

299
00:10:19,600 --> 00:10:23,200
um making sure that stuff is cached

300
00:10:23,200 --> 00:10:26,079
and pre-compiled to make every iteration

301
00:10:26,079 --> 00:10:26,800
or call

302
00:10:26,800 --> 00:10:28,800
fast was another design goal of why we

303
00:10:28,800 --> 00:10:30,240
created this new scripting

304
00:10:30,240 --> 00:10:32,640
language there were other scripting

305
00:10:32,640 --> 00:10:34,720
languages before widely used

306
00:10:34,720 --> 00:10:37,920
but we removed all of them mostly for

307
00:10:37,920 --> 00:10:38,480
the sake

308
00:10:38,480 --> 00:10:41,600
of security because again and again they

309
00:10:41,600 --> 00:10:43,040
were causing some

310
00:10:43,040 --> 00:10:46,640
trouble another thing that we learned

311
00:10:46,640 --> 00:10:47,440
over time

312
00:10:47,440 --> 00:10:50,800
is that leniency is the devil and one

313
00:10:50,800 --> 00:10:52,240
thing where we were leaning in was

314
00:10:52,240 --> 00:10:54,079
content type guessing

315
00:10:54,079 --> 00:10:56,640
so you could just run the code command

316
00:10:56,640 --> 00:10:58,079
so this would be in the relational

317
00:10:58,079 --> 00:11:00,000
database the equivalent of select

318
00:11:00,000 --> 00:11:03,600
star from all the tables basically

319
00:11:03,600 --> 00:11:05,360
so we're just using curl and we're

320
00:11:05,360 --> 00:11:07,200
running that query

321
00:11:07,200 --> 00:11:09,440
against elasticsearch and we're sending

322
00:11:09,440 --> 00:11:12,640
a json document but we don't provide any

323
00:11:12,640 --> 00:11:15,120
content type and elasticsearch would

324
00:11:15,120 --> 00:11:16,480
basically

325
00:11:16,480 --> 00:11:18,720
apply very simple heuristic it would say

326
00:11:18,720 --> 00:11:19,680
like

327
00:11:19,680 --> 00:11:21,200
is the first thing that you have in

328
00:11:21,200 --> 00:11:23,040
there in opening curly brace

329
00:11:23,040 --> 00:11:24,720
well i guess then it will be jason and i

330
00:11:24,720 --> 00:11:26,720
will try to interpret that as json so it

331
00:11:26,720 --> 00:11:29,839
will try to sniff that

332
00:11:29,839 --> 00:11:31,760
probably you can already see what might

333
00:11:31,760 --> 00:11:32,959
go wrong here

334
00:11:32,959 --> 00:11:36,160
um if you have text

335
00:11:36,160 --> 00:11:40,079
claim that is treated as safe

336
00:11:40,079 --> 00:11:43,120
in course and that

337
00:11:43,120 --> 00:11:46,000
can lead to stupid security issues so

338
00:11:46,000 --> 00:11:47,760
for example if you would

339
00:11:47,760 --> 00:11:50,320
use this very simple example with jake

340
00:11:50,320 --> 00:11:50,959
fury

341
00:11:50,959 --> 00:11:53,600
what you would do here is we do this

342
00:11:53,600 --> 00:11:54,560
agex called

343
00:11:54,560 --> 00:11:57,040
we do a post against for example

344
00:11:57,040 --> 00:11:59,279
localhost 9200 the default port where

345
00:11:59,279 --> 00:12:01,040
elasticsearch would be listening

346
00:12:01,040 --> 00:12:04,160
and this would insert a document into

347
00:12:04,160 --> 00:12:05,839
elasticsearch right away

348
00:12:05,839 --> 00:12:08,959
because text is considered

349
00:12:08,959 --> 00:12:11,519
safe whereas json wouldn't be considered

350
00:12:11,519 --> 00:12:12,480
safe so with

351
00:12:12,480 --> 00:12:14,240
the right content type this wouldn't

352
00:12:14,240 --> 00:12:17,120
work but since we're sniffing out

353
00:12:17,120 --> 00:12:19,440
the content type this request would just

354
00:12:19,440 --> 00:12:20,800
work and you could easily

355
00:12:20,800 --> 00:12:23,760
delete data in a similar way or also

356
00:12:23,760 --> 00:12:25,600
right to another endpoint

357
00:12:25,600 --> 00:12:28,959
so you could just do some

358
00:12:28,959 --> 00:12:31,760
cross-site request forgery because of

359
00:12:31,760 --> 00:12:32,399
that

360
00:12:32,399 --> 00:12:34,959
by now you need to define the content

361
00:12:34,959 --> 00:12:38,320
type when you do a request

362
00:12:38,320 --> 00:12:40,800
something that everybody knows is a bad

363
00:12:40,800 --> 00:12:41,360
idea

364
00:12:41,360 --> 00:12:43,440
default credentials we had those for a

365
00:12:43,440 --> 00:12:45,519
long time and we called them elastic and

366
00:12:45,519 --> 00:12:46,160
changed me

367
00:12:46,160 --> 00:12:49,200
and obviously nobody ever

368
00:12:49,200 --> 00:12:52,639
changed change me and then it was pretty

369
00:12:52,639 --> 00:12:53,040
much

370
00:12:53,040 --> 00:12:56,240
pointless um so needed to find a better

371
00:12:56,240 --> 00:12:56,959
solution

372
00:12:56,959 --> 00:12:58,320
and then people say like yeah well this

373
00:12:58,320 --> 00:13:00,399
is easy you just run some

374
00:13:00,399 --> 00:13:02,720
interactive thing in the installation

375
00:13:02,720 --> 00:13:03,600
process

376
00:13:03,600 --> 00:13:05,680
the problem is it's not necessarily that

377
00:13:05,680 --> 00:13:06,800
easy um

378
00:13:06,800 --> 00:13:09,600
looking at all the operating or all the

379
00:13:09,600 --> 00:13:11,120
ways to operate and install

380
00:13:11,120 --> 00:13:12,560
elasticsearch

381
00:13:12,560 --> 00:13:14,399
maybe you don't have an interactive

382
00:13:14,399 --> 00:13:16,000
installation process what if

383
00:13:16,000 --> 00:13:18,959
happens if you run a docker container or

384
00:13:18,959 --> 00:13:19,680
if you

385
00:13:19,680 --> 00:13:23,920
use a kubernetes operator um

386
00:13:23,920 --> 00:13:26,480
many of these are different that you

387
00:13:26,480 --> 00:13:28,160
don't have anybody typing anything

388
00:13:28,160 --> 00:13:29,120
interactively

389
00:13:29,120 --> 00:13:31,200
and you need to find a generic way so

390
00:13:31,200 --> 00:13:32,959
one way how we approach this

391
00:13:32,959 --> 00:13:35,200
is you can set an environment that

392
00:13:35,200 --> 00:13:36,880
environment variable

393
00:13:36,880 --> 00:13:39,920
with a bootstrap password

394
00:13:39,920 --> 00:13:42,480
and with that you can then create your

395
00:13:42,480 --> 00:13:43,360
other accounts

396
00:13:43,360 --> 00:13:46,079
and go from there which leads us to

397
00:13:46,079 --> 00:13:47,440
another point um

398
00:13:47,440 --> 00:13:49,760
clearfix passwords are obviously not a

399
00:13:49,760 --> 00:13:51,440
great idea to have

400
00:13:51,440 --> 00:13:54,399
um for that we have added the option to

401
00:13:54,399 --> 00:13:56,079
have a key story though

402
00:13:56,079 --> 00:13:59,120
so far the key should score key store is

403
00:13:59,120 --> 00:14:00,399
only obfuscated

404
00:14:00,399 --> 00:14:03,600
and not properly encrypted

405
00:14:03,600 --> 00:14:06,079
but we will add password protection to

406
00:14:06,079 --> 00:14:06,639
that

407
00:14:06,639 --> 00:14:09,600
in the future as well but for now it

408
00:14:09,600 --> 00:14:11,440
only obfuscates your credentials but

409
00:14:11,440 --> 00:14:12,720
it's still better than

410
00:14:12,720 --> 00:14:17,279
plain text passwords um tls certificates

411
00:14:17,279 --> 00:14:20,160
are always a joy especially when you

412
00:14:20,160 --> 00:14:22,079
have lots of users and many of them

413
00:14:22,079 --> 00:14:24,399
are not so familiar with tls and all the

414
00:14:24,399 --> 00:14:26,240
errors that you can run into

415
00:14:26,240 --> 00:14:29,760
and also java can be a joy to work with

416
00:14:29,760 --> 00:14:34,000
around tls so we have our own binary to

417
00:14:34,000 --> 00:14:35,839
actually generate certificates

418
00:14:35,839 --> 00:14:39,040
for you and you should use that we have

419
00:14:39,040 --> 00:14:41,199
invested by now a lot of time to also

420
00:14:41,199 --> 00:14:43,120
make the error messages better

421
00:14:43,120 --> 00:14:45,040
and actually help you get your

422
00:14:45,040 --> 00:14:46,560
certificates

423
00:14:46,560 --> 00:14:49,600
but tls is one of the things that is

424
00:14:49,600 --> 00:14:51,680
especially around security a common pain

425
00:14:51,680 --> 00:14:54,880
point unfortunately still

426
00:14:55,199 --> 00:14:58,160
authentication well by now

427
00:14:58,160 --> 00:14:59,519
authentication is

428
00:14:59,519 --> 00:15:03,440
freely available so same 6.8 and 7.1

429
00:15:03,440 --> 00:15:05,360
before it was one of the main things

430
00:15:05,360 --> 00:15:07,519
that we could monetize and build all the

431
00:15:07,519 --> 00:15:10,320
other features and since it's all hdp

432
00:15:10,320 --> 00:15:11,279
you could always

433
00:15:11,279 --> 00:15:13,920
put that behind the reverse proxy to

434
00:15:13,920 --> 00:15:14,720
basic off

435
00:15:14,720 --> 00:15:17,360
um from the reverse proxy um terminate

436
00:15:17,360 --> 00:15:18,160
the elastic the

437
00:15:18,160 --> 00:15:21,040
reverse proxy close down the data store

438
00:15:21,040 --> 00:15:22,240
through a firewall

439
00:15:22,240 --> 00:15:24,160
but by now and especially because of

440
00:15:24,160 --> 00:15:26,880
kubernetes because running a

441
00:15:26,880 --> 00:15:29,279
reverse proxy in front of it is not that

442
00:15:29,279 --> 00:15:31,040
simple anymore and who communicates with

443
00:15:31,040 --> 00:15:32,480
who

444
00:15:32,480 --> 00:15:34,480
because of that we have made the

445
00:15:34,480 --> 00:15:35,920
security features

446
00:15:35,920 --> 00:15:39,120
like robust road based access control

447
00:15:39,120 --> 00:15:42,480
tls those are freely available and

448
00:15:42,480 --> 00:15:46,320
it is highly advisable to use those

449
00:15:46,320 --> 00:15:49,040
they are not on by default unless you

450
00:15:49,040 --> 00:15:50,560
have a paid version because then we

451
00:15:50,560 --> 00:15:52,560
would enforce that

452
00:15:52,560 --> 00:15:56,560
why because we only added them in 7.1

453
00:15:56,560 --> 00:16:00,000
enforcing um authentication would be a

454
00:16:00,000 --> 00:16:01,199
breaking change

455
00:16:01,199 --> 00:16:02,880
and we will need to wait for the next

456
00:16:02,880 --> 00:16:05,360
major version and if that

457
00:16:05,360 --> 00:16:07,600
will have authentication enabled by

458
00:16:07,600 --> 00:16:08,639
default

459
00:16:08,639 --> 00:16:10,639
we're still working out because if we

460
00:16:10,639 --> 00:16:11,680
want to have that

461
00:16:11,680 --> 00:16:14,639
probably we want to enforce tls as well

462
00:16:14,639 --> 00:16:16,720
and that might be a bit hard to swallow

463
00:16:16,720 --> 00:16:17,920
for some people to

464
00:16:17,920 --> 00:16:21,440
set up initially but we will see and

465
00:16:21,440 --> 00:16:23,600
hopefully we will get there but we'll

466
00:16:23,600 --> 00:16:25,120
see

467
00:16:25,120 --> 00:16:28,560
um which leads us to the fun

468
00:16:28,560 --> 00:16:31,519
ransomware problem of i have my data

469
00:16:31,519 --> 00:16:33,839
store and well it only binds localhost

470
00:16:33,839 --> 00:16:34,800
but

471
00:16:34,800 --> 00:16:37,040
i just want to let the world know that

472
00:16:37,040 --> 00:16:38,480
i'm running this so i bind it to all

473
00:16:38,480 --> 00:16:40,560
interfaces i don't set up a firewall

474
00:16:40,560 --> 00:16:42,240
i don't set up a reverse proxy i don't

475
00:16:42,240 --> 00:16:44,560
set up security i just open it up

476
00:16:44,560 --> 00:16:47,040
and then you can just find those on

477
00:16:47,040 --> 00:16:48,720
children like you can just

478
00:16:48,720 --> 00:16:51,040
put a default port of 9200 look for

479
00:16:51,040 --> 00:16:53,040
anything that reports back within 200

480
00:16:53,040 --> 00:16:53,680
okay

481
00:16:53,680 --> 00:16:55,920
and you will probably find some elastic

482
00:16:55,920 --> 00:16:56,959
search instances

483
00:16:56,959 --> 00:16:59,279
every now and then you find actual data

484
00:16:59,279 --> 00:17:00,079
and have

485
00:17:00,079 --> 00:17:02,800
breach that is more or less a common

486
00:17:02,800 --> 00:17:03,920
occurrence

487
00:17:03,920 --> 00:17:05,839
a lot of them are by now probably also

488
00:17:05,839 --> 00:17:08,240
forgotten test instances or honeypots as

489
00:17:08,240 --> 00:17:09,599
well

490
00:17:09,599 --> 00:17:12,079
but what you will then normally get is

491
00:17:12,079 --> 00:17:12,880
if you just

492
00:17:12,880 --> 00:17:15,919
query that

493
00:17:15,919 --> 00:17:18,559
vulnerable insulation here for example i

494
00:17:18,559 --> 00:17:19,039
just

495
00:17:19,039 --> 00:17:21,679
list all the indices that it has and

496
00:17:21,679 --> 00:17:23,919
then we have this one index called

497
00:17:23,919 --> 00:17:26,480
please read and well we're friendly

498
00:17:26,480 --> 00:17:28,240
we're interested it has one document

499
00:17:28,240 --> 00:17:30,799
um let's read that one document and what

500
00:17:30,799 --> 00:17:32,320
you would then often get

501
00:17:32,320 --> 00:17:35,280
is something like this um please send

502
00:17:35,280 --> 00:17:36,799
half a bitcoin in this case

503
00:17:36,799 --> 00:17:39,360
um to this address and then you might

504
00:17:39,360 --> 00:17:41,120
get your data back

505
00:17:41,120 --> 00:17:43,600
or not so the general idea is somebody

506
00:17:43,600 --> 00:17:45,200
downloads your data

507
00:17:45,200 --> 00:17:47,280
keeps it safe um deletes it on your

508
00:17:47,280 --> 00:17:48,720
server leaves that message

509
00:17:48,720 --> 00:17:50,720
if you pay you will get your data back

510
00:17:50,720 --> 00:17:52,559
maybe maybe they have never taken that

511
00:17:52,559 --> 00:17:54,480
backup and will just disappear after you

512
00:17:54,480 --> 00:17:55,280
wire them

513
00:17:55,280 --> 00:17:58,400
the money um also with the price of

514
00:17:58,400 --> 00:18:00,960
bitcoins um they tend to be a bit

515
00:18:00,960 --> 00:18:02,080
volatile

516
00:18:02,080 --> 00:18:05,520
so there was a time when

517
00:18:05,520 --> 00:18:07,840
the ransomwares actually said like why

518
00:18:07,840 --> 00:18:08,880
are the

519
00:18:08,880 --> 00:18:11,200
dollar equivalent of this in today's

520
00:18:11,200 --> 00:18:11,919
bitcoin

521
00:18:11,919 --> 00:18:14,080
because it was just fluctuating from one

522
00:18:14,080 --> 00:18:14,960
day to the next

523
00:18:14,960 --> 00:18:17,120
so much it was unpredictable what you

524
00:18:17,120 --> 00:18:18,400
would need to pay

525
00:18:18,400 --> 00:18:21,440
um but maybe by now it's a bit more

526
00:18:21,440 --> 00:18:22,400
stable again

527
00:18:22,400 --> 00:18:25,760
but yeah great use case for bitcoin um

528
00:18:25,760 --> 00:18:27,039
and then you might run into the

529
00:18:27,039 --> 00:18:28,960
matroshka problem so the matriarchal

530
00:18:28,960 --> 00:18:30,160
problem might be that

531
00:18:30,160 --> 00:18:32,160
somebody takes the data leaves the

532
00:18:32,160 --> 00:18:33,840
message this is how to get you data then

533
00:18:33,840 --> 00:18:35,280
somebody else since your data store is

534
00:18:35,280 --> 00:18:36,480
still unprotected

535
00:18:36,480 --> 00:18:38,880
might take that message leave their own

536
00:18:38,880 --> 00:18:39,840
message and say like

537
00:18:39,840 --> 00:18:41,360
if you want to get kind of like the

538
00:18:41,360 --> 00:18:43,200
original message how to get your data

539
00:18:43,200 --> 00:18:43,760
back

540
00:18:43,760 --> 00:18:46,880
you pay me first you can put one

541
00:18:46,880 --> 00:18:49,360
ransom attack into the other and then

542
00:18:49,360 --> 00:18:51,039
you would need to pay all of them to

543
00:18:51,039 --> 00:18:53,760
maybe get your data in the end back

544
00:18:53,760 --> 00:18:54,480
that's what i

545
00:18:54,480 --> 00:18:57,280
call the matroshka approach here which

546
00:18:57,280 --> 00:19:00,160
might not be all that fun

547
00:19:00,160 --> 00:19:03,120
and we did run into that ourselves when

548
00:19:03,120 --> 00:19:03,919
we ran some

549
00:19:03,919 --> 00:19:05,840
test installations and we didn't bother

550
00:19:05,840 --> 00:19:07,039
to secure them

551
00:19:07,039 --> 00:19:10,160
um the german cert actually scans their

552
00:19:10,160 --> 00:19:13,200
ip space to see if anybody has

553
00:19:13,200 --> 00:19:15,360
any open elastic search instances and

554
00:19:15,360 --> 00:19:17,039
they might send you this

555
00:19:17,039 --> 00:19:19,039
nice email to say like hey you have a

556
00:19:19,039 --> 00:19:20,480
problem there you should

557
00:19:20,480 --> 00:19:24,240
actually secure that and

558
00:19:24,240 --> 00:19:26,160
then ideally you do and you don't get

559
00:19:26,160 --> 00:19:27,520
ransom

560
00:19:27,520 --> 00:19:30,799
um so coming to the end here

561
00:19:30,799 --> 00:19:33,120
starting off being a simple or being

562
00:19:33,120 --> 00:19:34,559
simple to start

563
00:19:34,559 --> 00:19:36,160
is probably the right to get actually

564
00:19:36,160 --> 00:19:38,400
the broad user base but once you have

565
00:19:38,400 --> 00:19:40,080
more important data

566
00:19:40,080 --> 00:19:44,559
more secure use cases

567
00:19:44,559 --> 00:19:46,799
more enterprising customers then you

568
00:19:46,799 --> 00:19:48,000
really want to have

569
00:19:48,000 --> 00:19:51,440
these more security aware settings

570
00:19:51,440 --> 00:19:53,679
for running critical workloads and i

571
00:19:53,679 --> 00:19:55,280
think this is kind of like a normal

572
00:19:55,280 --> 00:19:57,919
maturity process that you start on

573
00:19:57,919 --> 00:20:00,480
being very easy to get started to having

574
00:20:00,480 --> 00:20:02,159
a strictest setup

575
00:20:02,159 --> 00:20:05,120
over time and i'm kind of afraid there

576
00:20:05,120 --> 00:20:06,799
is no real shortcut to that

577
00:20:06,799 --> 00:20:08,640
but this is just a learning experience

578
00:20:08,640 --> 00:20:10,080
that you will need to go

579
00:20:10,080 --> 00:20:13,200
through as a product um

580
00:20:13,200 --> 00:20:15,840
at least that's my thesis um maybe i'm

581
00:20:15,840 --> 00:20:16,960
right maybe i'm wrong

582
00:20:16,960 --> 00:20:19,360
um we'll have a discussion afterwards so

583
00:20:19,360 --> 00:20:21,440
let me know what you think about that

584
00:20:21,440 --> 00:20:24,000
so to wrap up we have seen that

585
00:20:24,000 --> 00:20:24,960
elasticsearch

586
00:20:24,960 --> 00:20:26,960
does not bind to all interfaces anymore

587
00:20:26,960 --> 00:20:28,159
on the localhost

588
00:20:28,159 --> 00:20:30,000
it doesn't cluster automatically anymore

589
00:20:30,000 --> 00:20:31,520
because it was convenient but it was

590
00:20:31,520 --> 00:20:33,120
also dangerous

591
00:20:33,120 --> 00:20:35,039
butcher checks are just checks to make

592
00:20:35,039 --> 00:20:36,799
sure you run the last search the right

593
00:20:36,799 --> 00:20:37,520
way

594
00:20:37,520 --> 00:20:39,840
and for example you don't run this route

595
00:20:39,840 --> 00:20:42,000
but that is never possible

596
00:20:42,000 --> 00:20:44,240
also scripting was a common pinpoint

597
00:20:44,240 --> 00:20:45,840
that we fixed by writing our

598
00:20:45,840 --> 00:20:49,520
own scripting language which introduced

599
00:20:49,520 --> 00:20:51,760
new pain points but at least it seems to

600
00:20:51,760 --> 00:20:53,679
have fixed the security problem pretty

601
00:20:53,679 --> 00:20:55,600
well because we haven't had any

602
00:20:55,600 --> 00:20:57,840
security issues that i would be aware of

603
00:20:57,840 --> 00:20:59,840
since we introduced our own scripting

604
00:20:59,840 --> 00:21:00,640
language

605
00:21:00,640 --> 00:21:02,400
so from the security perspective that

606
00:21:02,400 --> 00:21:04,320
worked content type

607
00:21:04,320 --> 00:21:07,200
um yeah requiring the right content type

608
00:21:07,200 --> 00:21:08,799
and not trying to guess

609
00:21:08,799 --> 00:21:11,760
um will also help your security um

610
00:21:11,760 --> 00:21:12,559
thanks to

611
00:21:12,559 --> 00:21:15,360
all the fun cross-origin requests that

612
00:21:15,360 --> 00:21:17,360
browser can do

613
00:21:17,360 --> 00:21:20,080
um having default and clear text

614
00:21:20,080 --> 00:21:21,840
creations is clearly a bad thing

615
00:21:21,840 --> 00:21:24,000
requiring tls especially for anything

616
00:21:24,000 --> 00:21:26,240
that can form a cluster over the network

617
00:21:26,240 --> 00:21:28,880
is probably what you really want to have

618
00:21:28,880 --> 00:21:29,679
and yeah

619
00:21:29,679 --> 00:21:32,799
authentication is a tricky subject and

620
00:21:32,799 --> 00:21:33,760
that you should do

621
00:21:33,760 --> 00:21:36,559
properly and hopefully we'll get to the

622
00:21:36,559 --> 00:21:37,679
point that we have

623
00:21:37,679 --> 00:21:40,400
this enabled and without making the

624
00:21:40,400 --> 00:21:41,679
bootstrapping process

625
00:21:41,679 --> 00:21:44,320
of a cluster too hard so hopefully we

626
00:21:44,320 --> 00:21:44,880
will

627
00:21:44,880 --> 00:21:48,240
get there as well and that's pretty much

628
00:21:48,240 --> 00:21:49,760
it that's kind of the learning

629
00:21:49,760 --> 00:21:52,080
experience that we had over time

630
00:21:52,080 --> 00:21:53,280
i hope you have learned something as

631
00:21:53,280 --> 00:21:55,679
well let me know in the questions

632
00:21:55,679 --> 00:21:58,240
and i'm happy to discuss with you thanks

633
00:21:58,240 --> 00:22:01,760
a lot for joining

