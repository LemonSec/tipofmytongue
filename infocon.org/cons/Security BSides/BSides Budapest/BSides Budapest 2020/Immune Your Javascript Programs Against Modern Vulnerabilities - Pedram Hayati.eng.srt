1
00:00:09,280 --> 00:00:12,240
http parameter pollution

2
00:00:12,240 --> 00:00:15,519
it is a security bug that can easily go

3
00:00:15,519 --> 00:00:19,039
unnoticed in today's microservices

4
00:00:19,039 --> 00:00:20,720
architecture

5
00:00:20,720 --> 00:00:24,080
this type of park can be more

6
00:00:24,080 --> 00:00:27,279
prevalent my name is

7
00:00:27,279 --> 00:00:31,599
pedram hayati i am a security instructor

8
00:00:31,599 --> 00:00:35,600
at a security education company called

9
00:00:35,600 --> 00:00:38,879
secting from sydney australia

10
00:00:38,879 --> 00:00:41,680
in today's talk i will be going through

11
00:00:41,680 --> 00:00:44,079
what http parameter pollution

12
00:00:44,079 --> 00:00:47,920
is how we can identify it and more

13
00:00:47,920 --> 00:00:49,039
importantly

14
00:00:49,039 --> 00:00:52,399
how we can effectively address this bug

15
00:00:52,399 --> 00:00:55,840
in our programs let me

16
00:00:55,840 --> 00:00:58,480
start by giving you a little bit of

17
00:00:58,480 --> 00:01:01,280
background information

18
00:01:01,280 --> 00:01:04,400
query in uniform resource identifier or

19
00:01:04,400 --> 00:01:06,799
commonly known as uri

20
00:01:06,799 --> 00:01:10,320
is a series of field value pairs

21
00:01:10,320 --> 00:01:13,439
some characters are reserved and have a

22
00:01:13,439 --> 00:01:14,640
special meaning

23
00:01:14,640 --> 00:01:18,320
things such as question mark equal sign

24
00:01:18,320 --> 00:01:22,000
or ampersand for example question mark

25
00:01:22,000 --> 00:01:25,600
is a start of the query parameters

26
00:01:25,600 --> 00:01:28,799
ampersand will separate out different

27
00:01:28,799 --> 00:01:30,000
fields

28
00:01:30,000 --> 00:01:33,280
now by having that in mind what is the

29
00:01:33,280 --> 00:01:34,640
value of

30
00:01:34,640 --> 00:01:38,479
action in this given url

31
00:01:38,479 --> 00:01:41,759
is the value transfer

32
00:01:41,759 --> 00:01:45,759
or is it withdrawal or none of them

33
00:01:45,759 --> 00:01:49,280
or all of them well

34
00:01:49,280 --> 00:01:52,880
the answer is it depends it depends on

35
00:01:52,880 --> 00:01:53,840
the technology

36
00:01:53,840 --> 00:01:56,640
stack that we are using for our programs

37
00:01:56,640 --> 00:01:57,200
and i have

38
00:01:57,200 --> 00:02:00,960
example of them in this table php with

39
00:02:00,960 --> 00:02:03,040
apache server in the front

40
00:02:03,040 --> 00:02:06,560
will interpret the first occurrence of

41
00:02:06,560 --> 00:02:10,160
action field java using a spring

42
00:02:10,160 --> 00:02:12,480
framework on the other hand will return

43
00:02:12,480 --> 00:02:13,440
the last

44
00:02:13,440 --> 00:02:17,280
value of action and in javascript

45
00:02:17,280 --> 00:02:20,319
we will receive an array containing both

46
00:02:20,319 --> 00:02:23,760
both values and this is the same story

47
00:02:23,760 --> 00:02:25,120
when we talking about

48
00:02:25,120 --> 00:02:28,400
python ruby golang and many other

49
00:02:28,400 --> 00:02:30,239
frameworks

50
00:02:30,239 --> 00:02:33,440
what is the problem the problem

51
00:02:33,440 --> 00:02:37,040
lies in the well rfc itself which does

52
00:02:37,040 --> 00:02:38,319
not mandate

53
00:02:38,319 --> 00:02:41,200
how to interpret multiple query

54
00:02:41,200 --> 00:02:42,239
parameters

55
00:02:42,239 --> 00:02:45,920
with the same field name now

56
00:02:45,920 --> 00:02:49,280
apart from obviously some functionality

57
00:02:49,280 --> 00:02:50,640
type bugs

58
00:02:50,640 --> 00:02:55,040
what security problems can we face

59
00:02:56,080 --> 00:02:58,400
well as you could imagine depending on

60
00:02:58,400 --> 00:02:59,280
the program

61
00:02:59,280 --> 00:03:02,800
or the middleware that we are using

62
00:03:02,800 --> 00:03:05,599
these different interpretation can

63
00:03:05,599 --> 00:03:07,200
result into

64
00:03:07,200 --> 00:03:09,760
authentication bypass authorization

65
00:03:09,760 --> 00:03:10,480
bypass

66
00:03:10,480 --> 00:03:15,280
and quite commonly validation bypasses

67
00:03:15,280 --> 00:03:17,800
and can you can imagine in today's

68
00:03:17,800 --> 00:03:20,480
microservices architecture we may have

69
00:03:20,480 --> 00:03:22,640
different technologies and by them

70
00:03:22,640 --> 00:03:24,879
different programs written in by

71
00:03:24,879 --> 00:03:25,760
different

72
00:03:25,760 --> 00:03:27,519
programming languages as are in

73
00:03:27,519 --> 00:03:29,440
different programming languages

74
00:03:29,440 --> 00:03:31,599
and they may interpret different parts

75
00:03:31,599 --> 00:03:33,440
of the input

76
00:03:33,440 --> 00:03:35,599
and they send that across and this can

77
00:03:35,599 --> 00:03:36,879
result into

78
00:03:36,879 --> 00:03:38,879
obviously some functionality but more

79
00:03:38,879 --> 00:03:39,920
importantly

80
00:03:39,920 --> 00:03:43,040
some security issues let's look at one

81
00:03:43,040 --> 00:03:45,360
real world example or incident of this

82
00:03:45,360 --> 00:03:46,400
issue

83
00:03:46,400 --> 00:03:49,760
which goes back quite quite a lot to the

84
00:03:49,760 --> 00:03:50,720
time where

85
00:03:50,720 --> 00:03:53,040
we had a thing called open source with

86
00:03:53,040 --> 00:03:54,560
application firewalls

87
00:03:54,560 --> 00:03:57,840
well firewall was a buzzword back in the

88
00:03:57,840 --> 00:03:58,560
days

89
00:03:58,560 --> 00:04:00,400
to something that we can put in our

90
00:04:00,400 --> 00:04:02,239
networks to protect

91
00:04:02,239 --> 00:04:05,280
our programs open

92
00:04:05,280 --> 00:04:07,920
source of application firewall or mod

93
00:04:07,920 --> 00:04:08,959
security

94
00:04:08,959 --> 00:04:11,519
was a popular web application firewall

95
00:04:11,519 --> 00:04:12,480
that

96
00:04:12,480 --> 00:04:14,400
was looking at the traffic that was

97
00:04:14,400 --> 00:04:16,399
coming inside the program

98
00:04:16,399 --> 00:04:19,519
and goes out of our programs

99
00:04:19,519 --> 00:04:22,479
and was checking that traffic most

100
00:04:22,479 --> 00:04:24,560
commonly http traffic

101
00:04:24,560 --> 00:04:28,160
for common blacklisted patterns

102
00:04:28,160 --> 00:04:30,240
within much security there was a rule

103
00:04:30,240 --> 00:04:32,800
set and i should say mod security is

104
00:04:32,800 --> 00:04:33,600
also

105
00:04:33,600 --> 00:04:36,000
still available today there was a rule

106
00:04:36,000 --> 00:04:37,840
set that was checking if this

107
00:04:37,840 --> 00:04:40,960
incoming traffic is may have some

108
00:04:40,960 --> 00:04:44,240
suspicious payloads inside and if it

109
00:04:44,240 --> 00:04:44,880
will mark

110
00:04:44,880 --> 00:04:47,759
or stop that traffic before that request

111
00:04:47,759 --> 00:04:48,639
will reach

112
00:04:48,639 --> 00:04:52,240
our program and similarly much sick

113
00:04:52,240 --> 00:04:55,120
was also could be set up to look at the

114
00:04:55,120 --> 00:04:57,199
response traffic

115
00:04:57,199 --> 00:04:59,680
and by looking at for example if the

116
00:04:59,680 --> 00:05:02,560
response traffic contain

117
00:05:02,560 --> 00:05:06,160
some stack information some detailed

118
00:05:06,160 --> 00:05:07,600
errors might say we'll

119
00:05:07,600 --> 00:05:10,639
block those traffic as well

120
00:05:10,639 --> 00:05:13,199
supposedly if the attacker we have a

121
00:05:13,199 --> 00:05:13,919
program

122
00:05:13,919 --> 00:05:16,960
which is vulnerable to sql injection an

123
00:05:16,960 --> 00:05:20,160
attacker wants to enter a payload

124
00:05:20,160 --> 00:05:24,400
to receive or dump all day user

125
00:05:24,400 --> 00:05:28,000
table so in example you can see here

126
00:05:28,000 --> 00:05:30,560
attacker wants to enter select username

127
00:05:30,560 --> 00:05:33,199
and password from users table

128
00:05:33,199 --> 00:05:35,360
obviously mozick will stop these type of

129
00:05:35,360 --> 00:05:37,280
patterns because it's a clear example of

130
00:05:37,280 --> 00:05:38,720
sql injection

131
00:05:38,720 --> 00:05:41,039
now if the same attack will break down

132
00:05:41,039 --> 00:05:42,479
the payload

133
00:05:42,479 --> 00:05:45,520
into multiple fields all with the same

134
00:05:45,520 --> 00:05:47,759
name and here in the example i

135
00:05:47,759 --> 00:05:50,880
in the slides is the field is page we

136
00:05:50,880 --> 00:05:52,000
have that payload

137
00:05:52,000 --> 00:05:54,960
broken down in multiple payloads all

138
00:05:54,960 --> 00:05:56,160
with the same name

139
00:05:56,160 --> 00:05:58,800
but with the different values it turned

140
00:05:58,800 --> 00:05:59,680
out to be that

141
00:05:59,680 --> 00:06:03,280
modseg will only looking at the first

142
00:06:03,280 --> 00:06:06,400
occurrence of the page parameter or the

143
00:06:06,400 --> 00:06:07,919
field that is

144
00:06:07,919 --> 00:06:10,960
being recurring in the query parameters

145
00:06:10,960 --> 00:06:13,520
and will happily allow that to go in

146
00:06:13,520 --> 00:06:14,639
because that field

147
00:06:14,639 --> 00:06:18,000
did not contain any suspicious

148
00:06:18,000 --> 00:06:21,440
pattern however the program

149
00:06:21,440 --> 00:06:24,080
which is vulnerable to sql injection may

150
00:06:24,080 --> 00:06:25,600
interpret that differently

151
00:06:25,600 --> 00:06:27,759
concatenate all those fields value

152
00:06:27,759 --> 00:06:28,639
together

153
00:06:28,639 --> 00:06:31,600
and here we go attacker was managed to

154
00:06:31,600 --> 00:06:32,800
bypass this work

155
00:06:32,800 --> 00:06:36,000
or bypass this validation better sense

156
00:06:36,000 --> 00:06:38,160
so why we have this problem well the

157
00:06:38,160 --> 00:06:39,919
problem goes back

158
00:06:39,919 --> 00:06:43,120
to the way that the programs are

159
00:06:43,120 --> 00:06:44,880
interpreting

160
00:06:44,880 --> 00:06:49,039
these situations or http parameter

161
00:06:49,039 --> 00:06:50,800
pollution in other sense that

162
00:06:50,800 --> 00:06:52,800
when a request parameter with the same

163
00:06:52,800 --> 00:06:56,319
field name is interpreted differently

164
00:06:56,319 --> 00:06:59,919
the root cause behind this

165
00:06:59,919 --> 00:07:03,520
type of attack is is that we typically

166
00:07:03,520 --> 00:07:07,039
in our microservices architecture

167
00:07:07,039 --> 00:07:10,080
or any type of programs we may have a

168
00:07:10,080 --> 00:07:11,599
component a or a type

169
00:07:11,599 --> 00:07:13,599
a component or a gateway type component

170
00:07:13,599 --> 00:07:14,880
that sits in

171
00:07:14,880 --> 00:07:17,919
in front of our program and typically

172
00:07:17,919 --> 00:07:19,360
does validation

173
00:07:19,360 --> 00:07:21,360
or verify for something an example i

174
00:07:21,360 --> 00:07:22,960
have here if we

175
00:07:22,960 --> 00:07:24,800
our program receiver an environment

176
00:07:24,800 --> 00:07:26,960
receive a get request

177
00:07:26,960 --> 00:07:29,759
we to value bar and bus for the same

178
00:07:29,759 --> 00:07:31,039
field foe

179
00:07:31,039 --> 00:07:32,960
the component a will perform the

180
00:07:32,960 --> 00:07:34,639
validation and depending on the

181
00:07:34,639 --> 00:07:36,880
technologies that used to develop that

182
00:07:36,880 --> 00:07:38,639
program

183
00:07:38,639 --> 00:07:41,919
bad or bad or bad

184
00:07:41,919 --> 00:07:45,199
and bass may get validated and then

185
00:07:45,199 --> 00:07:47,199
later on this component will send

186
00:07:47,199 --> 00:07:51,199
this value down to other microservices

187
00:07:51,199 --> 00:07:51,440
or

188
00:07:51,440 --> 00:07:53,840
inner functionalities in our program and

189
00:07:53,840 --> 00:07:55,840
again depending on the classes depending

190
00:07:55,840 --> 00:07:56,400
on

191
00:07:56,400 --> 00:07:59,120
methods or libraries that we are using

192
00:07:59,120 --> 00:08:00,879
different values will be

193
00:08:00,879 --> 00:08:03,599
interpreted

194
00:08:04,879 --> 00:08:07,840
let's now start talking about how we can

195
00:08:07,840 --> 00:08:08,639
detect

196
00:08:08,639 --> 00:08:13,039
http parameter pollution in our programs

197
00:08:13,039 --> 00:08:16,560
i will talk about two common ways that

198
00:08:16,560 --> 00:08:20,240
you can go and find this bug one through

199
00:08:20,240 --> 00:08:22,240
runtime analysis or black

200
00:08:22,240 --> 00:08:25,440
black box type assessment and then later

201
00:08:25,440 --> 00:08:26,000
i will talk

202
00:08:26,000 --> 00:08:28,240
about how you can find this bug when you

203
00:08:28,240 --> 00:08:30,000
do a static code analysis

204
00:08:30,000 --> 00:08:33,760
or you do white box type assessment

205
00:08:33,760 --> 00:08:37,760
this bug is relatively easy to detect

206
00:08:37,760 --> 00:08:41,519
during runtime analysis we can simply

207
00:08:41,519 --> 00:08:42,320
just

208
00:08:42,320 --> 00:08:44,880
duplicate the parameters in the query

209
00:08:44,880 --> 00:08:46,080
string

210
00:08:46,080 --> 00:08:49,120
and see how the program will respond or

211
00:08:49,120 --> 00:08:51,279
which one of these fields was

212
00:08:51,279 --> 00:08:54,399
interpreted by the program

213
00:08:54,399 --> 00:08:57,040
now the interesting part is that you can

214
00:08:57,040 --> 00:08:58,480
do the same thing

215
00:08:58,480 --> 00:09:02,720
read things like post requests

216
00:09:02,720 --> 00:09:05,519
you can look at the post body and

217
00:09:05,519 --> 00:09:07,760
duplicate those parameters that you see

218
00:09:07,760 --> 00:09:10,880
within the post body

219
00:09:11,360 --> 00:09:14,320
now more interestingly you can do the

220
00:09:14,320 --> 00:09:15,200
same thing

221
00:09:15,200 --> 00:09:18,080
with the http request headers there are

222
00:09:18,080 --> 00:09:20,240
some important request headers such as

223
00:09:20,240 --> 00:09:22,640
authorization header which typically

224
00:09:22,640 --> 00:09:23,760
contains

225
00:09:23,760 --> 00:09:27,360
authentication tokens commonly jw3

226
00:09:27,360 --> 00:09:29,839
or cookie headers with again which have

227
00:09:29,839 --> 00:09:32,240
have some sensitive values see if you

228
00:09:32,240 --> 00:09:34,959
duplicate these headers

229
00:09:34,959 --> 00:09:36,800
rather than sending one authorization

230
00:09:36,800 --> 00:09:38,399
header supplied their

231
00:09:38,399 --> 00:09:41,040
program with multiple authorization

232
00:09:41,040 --> 00:09:42,480
headers

233
00:09:42,480 --> 00:09:46,080
one with a valid say authentication

234
00:09:46,080 --> 00:09:46,800
token

235
00:09:46,800 --> 00:09:49,680
the other one with invalid signature but

236
00:09:49,680 --> 00:09:51,279
a valid user id

237
00:09:51,279 --> 00:09:53,440
and c you may be able to get access to

238
00:09:53,440 --> 00:09:55,120
someone else's account

239
00:09:55,120 --> 00:09:57,360
by duplicating the authorization header

240
00:09:57,360 --> 00:09:59,519
because you may find that the program

241
00:09:59,519 --> 00:10:00,880
environment is set up that the

242
00:10:00,880 --> 00:10:02,480
validation is done

243
00:10:02,480 --> 00:10:04,560
by a different service and that service

244
00:10:04,560 --> 00:10:06,560
may only look at the first occurrence of

245
00:10:06,560 --> 00:10:08,399
the authorization header

246
00:10:08,399 --> 00:10:11,200
but not the second one and similarly we

247
00:10:11,200 --> 00:10:14,320
can do the same thing with cookie

248
00:10:14,320 --> 00:10:16,880
when it comes to the static analysis you

249
00:10:16,880 --> 00:10:18,399
can look at those

250
00:10:18,399 --> 00:10:20,880
parameters that obviously coming from an

251
00:10:20,880 --> 00:10:23,279
untrusted source

252
00:10:23,279 --> 00:10:26,160
and you look at if this parameter being

253
00:10:26,160 --> 00:10:28,160
passed around in the environment or

254
00:10:28,160 --> 00:10:29,920
being passed around to the

255
00:10:29,920 --> 00:10:32,880
other services and more importantly look

256
00:10:32,880 --> 00:10:33,519
at

257
00:10:33,519 --> 00:10:36,959
if the value or the if the original

258
00:10:36,959 --> 00:10:39,120
parameter being passed around or the

259
00:10:39,120 --> 00:10:41,680
interpreted value if the original value

260
00:10:41,680 --> 00:10:43,040
is being passed around

261
00:10:43,040 --> 00:10:45,680
there is a high likely that http

262
00:10:45,680 --> 00:10:47,360
parameter pollution

263
00:10:47,360 --> 00:10:50,560
can happen now

264
00:10:50,560 --> 00:10:52,320
i would like to stop talking and talk

265
00:10:52,320 --> 00:10:54,079
about the demo

266
00:10:54,079 --> 00:10:56,160
and go through all these things that we

267
00:10:56,160 --> 00:10:57,519
just talked about

268
00:10:57,519 --> 00:11:00,560
and to see in action what

269
00:11:00,560 --> 00:11:03,760
http parameter is how we can detect it

270
00:11:03,760 --> 00:11:05,440
and later on talking about how we can

271
00:11:05,440 --> 00:11:07,440
prevent it

272
00:11:07,440 --> 00:11:10,000
the demo program as you can see you can

273
00:11:10,000 --> 00:11:12,560
find it on

274
00:11:13,040 --> 00:11:16,160
lab gitlab.com js http parameter

275
00:11:16,160 --> 00:11:17,120
pollution

276
00:11:17,120 --> 00:11:21,040
and i will go through that with you now

277
00:11:21,040 --> 00:11:24,320
this is our demo program let me talk a

278
00:11:24,320 --> 00:11:26,160
little bit about the structure of this

279
00:11:26,160 --> 00:11:27,279
demo

280
00:11:27,279 --> 00:11:29,920
so it's a broken javascript what i mean

281
00:11:29,920 --> 00:11:32,320
by broken javascript program is a

282
00:11:32,320 --> 00:11:34,399
program that is vulnerable to http

283
00:11:34,399 --> 00:11:36,399
parameter pollution

284
00:11:36,399 --> 00:11:39,839
and to run this program you can just

285
00:11:39,839 --> 00:11:40,720
simply

286
00:11:40,720 --> 00:11:43,920
clone first this repository after you

287
00:11:43,920 --> 00:11:47,839
forking it and uh just run make build

288
00:11:47,839 --> 00:11:51,040
this will build the the program install

289
00:11:51,040 --> 00:11:53,440
all the libraries and dependencies and

290
00:11:53,440 --> 00:11:55,279
then once you

291
00:11:55,279 --> 00:11:58,000
run make run it will run the program and

292
00:11:58,000 --> 00:11:59,839
we will go through the rest of it

293
00:11:59,839 --> 00:12:02,800
later the program has two main

294
00:12:02,800 --> 00:12:03,680
directories

295
00:12:03,680 --> 00:12:05,519
uh you can find the program itself

296
00:12:05,519 --> 00:12:07,360
within the source directory

297
00:12:07,360 --> 00:12:10,079
if you look at the app.js that's the

298
00:12:10,079 --> 00:12:12,880
main logic of the code

299
00:12:12,880 --> 00:12:15,600
and you can we can see here it expect a

300
00:12:15,600 --> 00:12:17,440
get request on root

301
00:12:17,440 --> 00:12:19,600
and within there it will look at two

302
00:12:19,600 --> 00:12:21,920
query parameters one call action the

303
00:12:21,920 --> 00:12:23,680
other one called amount and then later

304
00:12:23,680 --> 00:12:24,000
on we'll

305
00:12:24,000 --> 00:12:26,160
pass this to a component or sorry the

306
00:12:26,160 --> 00:12:27,519
method called payment

307
00:12:27,519 --> 00:12:30,560
which does some action on these two all

308
00:12:30,560 --> 00:12:32,399
right on line 24

309
00:12:32,399 --> 00:12:35,839
we can see that the program expect to

310
00:12:35,839 --> 00:12:38,240
receive value transfer within the query

311
00:12:38,240 --> 00:12:39,680
parameter action

312
00:12:39,680 --> 00:12:41,519
i will not go through the details of the

313
00:12:41,519 --> 00:12:43,760
code at this stage

314
00:12:43,760 --> 00:12:47,040
the other thing for us is interesting to

315
00:12:47,040 --> 00:12:47,680
know

316
00:12:47,680 --> 00:12:50,959
is the test directory which contains

317
00:12:50,959 --> 00:12:54,639
two types of tests uh app.test.js

318
00:12:54,639 --> 00:12:57,200
contained the typical usability test

319
00:12:57,200 --> 00:13:01,120
app security.test.js are example of some

320
00:13:01,120 --> 00:13:02,639
security unit test

321
00:13:02,639 --> 00:13:04,639
at this stage we are not going to look

322
00:13:04,639 --> 00:13:06,639
at the details of it

323
00:13:06,639 --> 00:13:08,800
so okay now let's look at our program

324
00:13:08,800 --> 00:13:10,320
and i have already

325
00:13:10,320 --> 00:13:12,800
cloned this the program here i've

326
00:13:12,800 --> 00:13:13,839
already done

327
00:13:13,839 --> 00:13:16,880
make build let's just run it again he's

328
00:13:16,880 --> 00:13:17,760
already

329
00:13:17,760 --> 00:13:19,360
run build and set up all the

330
00:13:19,360 --> 00:13:21,040
dependencies

331
00:13:21,040 --> 00:13:24,560
i will run this program now

332
00:13:24,560 --> 00:13:27,279
now as we can see the server is

333
00:13:27,279 --> 00:13:28,399
listening on port

334
00:13:28,399 --> 00:13:32,160
8080 let me start sending a request to

335
00:13:32,160 --> 00:13:35,120
our program

336
00:13:35,120 --> 00:13:39,040
it runs in localhost on port 8080

337
00:13:39,040 --> 00:13:42,079
then i will give it a an action

338
00:13:42,079 --> 00:13:43,839
parameter with the value

339
00:13:43,839 --> 00:13:46,839
well transfer as we could see in the

340
00:13:46,839 --> 00:13:48,720
code

341
00:13:48,720 --> 00:13:52,079
following with amount

342
00:13:52,079 --> 00:13:55,040
field we'd say a value 100 and let's see

343
00:13:55,040 --> 00:13:56,880
how the program will respond

344
00:13:56,880 --> 00:13:58,639
as we can see it successfully

345
00:13:58,639 --> 00:14:00,800
transferred 100

346
00:14:00,800 --> 00:14:03,680
now what will happen if i change this

347
00:14:03,680 --> 00:14:05,440
transfer for example to something

348
00:14:05,440 --> 00:14:06,320
different

349
00:14:06,320 --> 00:14:08,399
let's put it let's do something

350
00:14:08,399 --> 00:14:11,040
different called withdraw

351
00:14:11,040 --> 00:14:13,120
as we can see the program responded that

352
00:14:13,120 --> 00:14:15,120
you can only transfer an amount

353
00:14:15,120 --> 00:14:17,040
so this program is expected to only

354
00:14:17,040 --> 00:14:18,399
receive

355
00:14:18,399 --> 00:14:20,639
a transfer action and there is a

356
00:14:20,639 --> 00:14:22,320
validation within the code that does

357
00:14:22,320 --> 00:14:23,440
that

358
00:14:23,440 --> 00:14:25,760
now if you remember we talked about

359
00:14:25,760 --> 00:14:27,040
parameter

360
00:14:27,040 --> 00:14:28,959
http when we were talking about http

361
00:14:28,959 --> 00:14:30,880
parameter pollution

362
00:14:30,880 --> 00:14:34,560
we talked about duplicating these

363
00:14:34,560 --> 00:14:36,320
query parameters let's see what will

364
00:14:36,320 --> 00:14:40,320
happen if i duplicate the action

365
00:14:40,320 --> 00:14:42,880
parameter let me change it to the

366
00:14:42,880 --> 00:14:45,360
original transfer

367
00:14:45,360 --> 00:14:49,199
and now i want to enter another action

368
00:14:49,199 --> 00:14:52,720
field with a different value this time

369
00:14:52,720 --> 00:14:55,040
but i cannot simply send this this will

370
00:14:55,040 --> 00:14:55,839
not

371
00:14:55,839 --> 00:14:58,240
run because due to the way that you know

372
00:14:58,240 --> 00:14:59,760
my my shell script is

373
00:14:59,760 --> 00:15:01,600
my shell environment is set up i need to

374
00:15:01,600 --> 00:15:02,800
do a little bit of

375
00:15:02,800 --> 00:15:05,040
change here the first thing is that i

376
00:15:05,040 --> 00:15:07,519
need to find the url encoded value

377
00:15:07,519 --> 00:15:11,440
of the ampersand to do that you can just

378
00:15:11,440 --> 00:15:14,639
look at the ascii man page

379
00:15:14,639 --> 00:15:17,920
sorry i didn't split properly and i can

380
00:15:17,920 --> 00:15:18,880
look at the

381
00:15:18,880 --> 00:15:21,839
ampersand here and i can see it's equals

382
00:15:21,839 --> 00:15:23,199
to 26

383
00:15:23,199 --> 00:15:26,880
in higgs so going back

384
00:15:26,880 --> 00:15:30,560
i can enter a url encoded or percentage

385
00:15:30,560 --> 00:15:31,680
encoded

386
00:15:31,680 --> 00:15:35,040
value of that and that is equivalent of

387
00:15:35,040 --> 00:15:37,040
ampersand and let's see what will happen

388
00:15:37,040 --> 00:15:38,240
here

389
00:15:38,240 --> 00:15:40,959
well successfully withdraw a hundred

390
00:15:40,959 --> 00:15:42,079
dollars

391
00:15:42,079 --> 00:15:45,040
so this is just to show us that yes the

392
00:15:45,040 --> 00:15:46,880
program is interpreting

393
00:15:46,880 --> 00:15:49,600
the second value now when we are giving

394
00:15:49,600 --> 00:15:50,240
a

395
00:15:50,240 --> 00:15:53,519
duplicate action field now is the time

396
00:15:53,519 --> 00:15:55,440
we go back to our source code

397
00:15:55,440 --> 00:15:59,360
and see what actually happens

398
00:15:59,680 --> 00:16:04,239
so if i look at the source the app.js

399
00:16:05,120 --> 00:16:08,240
right on line 24 there is a check that

400
00:16:08,240 --> 00:16:09,199
is being done

401
00:16:09,199 --> 00:16:13,360
to see if this action parameter

402
00:16:13,360 --> 00:16:16,800
includes the value transfer okay that's

403
00:16:16,800 --> 00:16:18,000
that's firstly you may

404
00:16:18,000 --> 00:16:20,000
say that okay this is a quite a weak

405
00:16:20,000 --> 00:16:21,519
check because it will look at

406
00:16:21,519 --> 00:16:24,480
inside any part of the query parameter

407
00:16:24,480 --> 00:16:26,160
to find transfer and in this case

408
00:16:26,160 --> 00:16:28,079
because transfer was there

409
00:16:28,079 --> 00:16:29,920
and also with the row because transfer

410
00:16:29,920 --> 00:16:32,320
will this if condition is true

411
00:16:32,320 --> 00:16:34,399
then it will go to the second line which

412
00:16:34,399 --> 00:16:36,000
sorry the line 25

413
00:16:36,000 --> 00:16:38,880
which will pass the value that original

414
00:16:38,880 --> 00:16:40,560
value which i was talking about not the

415
00:16:40,560 --> 00:16:42,880
interpreted value the original untrusted

416
00:16:42,880 --> 00:16:44,240
value to this

417
00:16:44,240 --> 00:16:47,440
other method let's look at the content

418
00:16:47,440 --> 00:16:49,120
content of this method

419
00:16:49,120 --> 00:16:51,000
which is inside the file called

420
00:16:51,000 --> 00:16:53,360
payment.js

421
00:16:53,360 --> 00:16:55,519
and supposedly this could be a you know

422
00:16:55,519 --> 00:16:57,040
another service

423
00:16:57,040 --> 00:16:59,680
uh or another inner program between our

424
00:16:59,680 --> 00:17:00,079
in

425
00:17:00,079 --> 00:17:04,079
within our setup and it's expected to

426
00:17:04,079 --> 00:17:07,359
do both withdraw and an action so these

427
00:17:07,359 --> 00:17:09,280
are just some dummy code i've put here

428
00:17:09,280 --> 00:17:09,760
so if

429
00:17:09,760 --> 00:17:11,679
it checks if the action contains the you

430
00:17:11,679 --> 00:17:13,520
know the word withdraw it will does the

431
00:17:13,520 --> 00:17:15,439
withdraw for us it's kind of like a fake

432
00:17:15,439 --> 00:17:16,480
withdrawal

433
00:17:16,480 --> 00:17:18,319
or if the action contains the word

434
00:17:18,319 --> 00:17:19,919
transfer it will does

435
00:17:19,919 --> 00:17:22,720
the transfer for us now the way that

436
00:17:22,720 --> 00:17:24,079
this program is set up

437
00:17:24,079 --> 00:17:26,400
is that the payment does not care what

438
00:17:26,400 --> 00:17:28,640
action the user want this is the job of

439
00:17:28,640 --> 00:17:29,360
the

440
00:17:29,360 --> 00:17:31,760
the app after js the main program to

441
00:17:31,760 --> 00:17:34,480
perform the validation and only allow in

442
00:17:34,480 --> 00:17:38,000
the authorized actions

443
00:17:38,000 --> 00:17:41,919
so now i guess you already got an idea

444
00:17:41,919 --> 00:17:44,559
that what is the problem and what where

445
00:17:44,559 --> 00:17:46,080
the issue is

446
00:17:46,080 --> 00:17:49,360
now let's talk about how

447
00:17:49,360 --> 00:17:52,640
we can address this issue like can i

448
00:17:52,640 --> 00:17:55,360
just go back

449
00:17:55,919 --> 00:17:59,840
can i do something here that effectively

450
00:17:59,840 --> 00:18:01,440
address this part let me let me

451
00:18:01,440 --> 00:18:03,120
talk talk about that a little bit later

452
00:18:03,120 --> 00:18:07,360
but for now let's go back to our slides

453
00:18:07,360 --> 00:18:10,720
and uh talk a little bit about

454
00:18:10,720 --> 00:18:14,080
how we can prevent this sort of bug i

455
00:18:14,080 --> 00:18:15,039
commonly see

456
00:18:15,039 --> 00:18:17,520
like as a security professional we do

457
00:18:17,520 --> 00:18:19,120
not really talk in lens

458
00:18:19,120 --> 00:18:22,799
how the programmers need to go and

459
00:18:22,799 --> 00:18:26,240
fix these sparks properly or in the

460
00:18:26,240 --> 00:18:29,039
majority of the cases i've seen that you

461
00:18:29,039 --> 00:18:31,120
know there is a link given to an online

462
00:18:31,120 --> 00:18:32,960
resource and we expect

463
00:18:32,960 --> 00:18:35,039
our programmers to go there and figure

464
00:18:35,039 --> 00:18:37,919
out what is the best way to fix this bug

465
00:18:37,919 --> 00:18:40,720
but unfortunately over these many years

466
00:18:40,720 --> 00:18:42,960
that i was in this field i could see

467
00:18:42,960 --> 00:18:45,280
that this has resulted into even more

468
00:18:45,280 --> 00:18:46,640
bugs

469
00:18:46,640 --> 00:18:49,919
because in in most cases these uh

470
00:18:49,919 --> 00:18:52,080
generic type recommendations are

471
00:18:52,080 --> 00:18:53,280
incomplete

472
00:18:53,280 --> 00:18:55,120
and may contain loads of information

473
00:18:55,120 --> 00:18:57,200
that is not even relevant to our to our

474
00:18:57,200 --> 00:18:59,360
developers

475
00:18:59,360 --> 00:19:02,480
and a lot of times what will happen is

476
00:19:02,480 --> 00:19:05,039
we will see that these type of vlogs are

477
00:19:05,039 --> 00:19:06,559
just address

478
00:19:06,559 --> 00:19:09,280
using type like a band aid type type

479
00:19:09,280 --> 00:19:10,000
approach or

480
00:19:10,000 --> 00:19:12,000
just symptom type approach they just go

481
00:19:12,000 --> 00:19:13,760
there and

482
00:19:13,760 --> 00:19:16,160
let's let's let's let's just again look

483
00:19:16,160 --> 00:19:17,919
at the example let me just go there and

484
00:19:17,919 --> 00:19:18,880
they just put

485
00:19:18,880 --> 00:19:22,000
let's just mark this issue come in this

486
00:19:22,000 --> 00:19:24,160
issue and maybe may just add a

487
00:19:24,160 --> 00:19:27,080
more stronger check right here so

488
00:19:27,080 --> 00:19:28,880
request.query

489
00:19:28,880 --> 00:19:32,240
that action triple call

490
00:19:32,240 --> 00:19:35,760
transfer well you may agree with me that

491
00:19:35,760 --> 00:19:36,480
this will

492
00:19:36,480 --> 00:19:40,240
address this issue however

493
00:19:40,240 --> 00:19:43,280
this is not addressing the root cause of

494
00:19:43,280 --> 00:19:45,440
the problem the main problem of this

495
00:19:45,440 --> 00:19:46,480
program

496
00:19:46,480 --> 00:19:50,640
which is inherently secure so tomorrow

497
00:19:50,640 --> 00:19:52,559
if someone comes and adds another

498
00:19:52,559 --> 00:19:54,640
endpoint here or introduce a new

499
00:19:54,640 --> 00:19:55,600
controller

500
00:19:55,600 --> 00:19:57,679
they need to also make sure that all

501
00:19:57,679 --> 00:20:00,080
these checks or security checks are

502
00:20:00,080 --> 00:20:01,520
there

503
00:20:01,520 --> 00:20:05,440
and as the programs become more complex

504
00:20:05,440 --> 00:20:07,520
as the programs are starting to

505
00:20:07,520 --> 00:20:09,760
interacting with different

506
00:20:09,760 --> 00:20:12,320
different services you can see commonly

507
00:20:12,320 --> 00:20:14,240
these checks are either being is

508
00:20:14,240 --> 00:20:16,960
skipped or in other another sense it

509
00:20:16,960 --> 00:20:19,520
just makes the program ugly

510
00:20:19,520 --> 00:20:21,919
it makes the the readability of the

511
00:20:21,919 --> 00:20:24,880
program quite hard to to handle

512
00:20:24,880 --> 00:20:29,039
so i was over and over thinking could it

513
00:20:29,039 --> 00:20:29,520
be an

514
00:20:29,520 --> 00:20:31,600
approach or could it be a different way

515
00:20:31,600 --> 00:20:33,360
of thinking here that

516
00:20:33,360 --> 00:20:37,039
we it can guide the programmers with a

517
00:20:37,039 --> 00:20:39,760
with an approach that it will never

518
00:20:39,760 --> 00:20:42,960
result to problem like this

519
00:20:42,960 --> 00:20:45,440
in the first place so can we think about

520
00:20:45,440 --> 00:20:46,400
a way that we

521
00:20:46,400 --> 00:20:49,360
program or a guide or a principle that

522
00:20:49,360 --> 00:20:51,760
it will not even result a situation like

523
00:20:51,760 --> 00:20:53,520
this that later on we need to

524
00:20:53,520 --> 00:20:57,200
to put a patch on it well

525
00:20:57,200 --> 00:20:59,520
it turned out to be yes there is a way

526
00:20:59,520 --> 00:21:01,120
we can we can do

527
00:21:01,120 --> 00:21:04,640
and uh there's a programming approach

528
00:21:04,640 --> 00:21:07,600
known as defensive programming that has

529
00:21:07,600 --> 00:21:09,280
been around to build

530
00:21:09,280 --> 00:21:12,640
robust safety critical application

531
00:21:12,640 --> 00:21:15,919
and interestingly secure programming is

532
00:21:15,919 --> 00:21:20,320
also a subset of defensive programming

533
00:21:20,320 --> 00:21:22,799
the the promise of defensive programming

534
00:21:22,799 --> 00:21:23,679
is that

535
00:21:23,679 --> 00:21:27,280
it guides us this approach that plans

536
00:21:27,280 --> 00:21:27,720
for

537
00:21:27,720 --> 00:21:31,200
contingencies or unforeseen errors

538
00:21:31,200 --> 00:21:34,640
or in our case runtime exceptions

539
00:21:34,640 --> 00:21:37,840
where security is a runtime exception

540
00:21:37,840 --> 00:21:41,200
it tries to plans for them in the design

541
00:21:41,200 --> 00:21:44,880
and implementation stage of the program

542
00:21:44,880 --> 00:21:47,919
and in fact the concept of

543
00:21:47,919 --> 00:21:50,320
defensive programming or defensive

544
00:21:50,320 --> 00:21:51,840
design

545
00:21:51,840 --> 00:21:55,039
has been around in other and industries

546
00:21:55,039 --> 00:21:59,280
for very long time for example

547
00:21:59,280 --> 00:22:01,360
if you live in australia or new zealand

548
00:22:01,360 --> 00:22:03,679
or some pacific islands

549
00:22:03,679 --> 00:22:06,080
this is what you see on the wall this is

550
00:22:06,080 --> 00:22:06,720
a

551
00:22:06,720 --> 00:22:09,760
power wall socket

552
00:22:09,760 --> 00:22:13,679
and depending on the amps

553
00:22:13,679 --> 00:22:15,919
there is a different design of this

554
00:22:15,919 --> 00:22:18,080
socket

555
00:22:18,080 --> 00:22:21,360
the this design or this defensive design

556
00:22:21,360 --> 00:22:25,679
enforces the user like me only plug

557
00:22:25,679 --> 00:22:29,200
an appliance with equal or lesser

558
00:22:29,200 --> 00:22:33,760
current rating to the to these plugs

559
00:22:33,760 --> 00:22:36,720
which obviously if we didn't have this

560
00:22:36,720 --> 00:22:39,280
defensive design a user may connect an

561
00:22:39,280 --> 00:22:41,520
appliance let's say with 25

562
00:22:41,520 --> 00:22:44,320
amp to a volt socket which only gives

563
00:22:44,320 --> 00:22:44,880
out

564
00:22:44,880 --> 00:22:48,080
10 amp and that could result in two well

565
00:22:48,080 --> 00:22:50,960
short circuit circuit or fire so

566
00:22:50,960 --> 00:22:52,799
defensive design was

567
00:22:52,799 --> 00:22:56,320
inherited was inside this the the way

568
00:22:56,320 --> 00:22:57,600
that these guys they've designed the

569
00:22:57,600 --> 00:22:58,799
wall socket

570
00:22:58,799 --> 00:23:00,240
now when it comes to defensive

571
00:23:00,240 --> 00:23:01,840
programming

572
00:23:01,840 --> 00:23:04,960
my work recently has been expanding

573
00:23:04,960 --> 00:23:07,039
on the security aspect of the defensive

574
00:23:07,039 --> 00:23:08,400
programming

575
00:23:08,400 --> 00:23:11,720
and rather than focusing on

576
00:23:11,720 --> 00:23:14,400
vulnerabilities over top tens or all

577
00:23:14,400 --> 00:23:15,760
those sort of

578
00:23:15,760 --> 00:23:17,760
common type bugs and then going to the

579
00:23:17,760 --> 00:23:20,080
programs try to patch them

580
00:23:20,080 --> 00:23:23,679
i was trying to collect and come up with

581
00:23:23,679 --> 00:23:25,760
uh different design patterns and

582
00:23:25,760 --> 00:23:27,200
principles that can

583
00:23:27,200 --> 00:23:29,919
guide the programmers to write the

584
00:23:29,919 --> 00:23:31,200
program

585
00:23:31,200 --> 00:23:35,039
secure from the get go at the same time

586
00:23:35,039 --> 00:23:38,720
handle the complexity of

587
00:23:38,720 --> 00:23:41,919
a number of security bugs

588
00:23:41,919 --> 00:23:45,200
by following a principle this is

589
00:23:45,200 --> 00:23:46,960
something we haven't even discussed in

590
00:23:46,960 --> 00:23:48,480
this in this in this

591
00:23:48,480 --> 00:23:52,480
talk but some of the bugs are not that

592
00:23:52,480 --> 00:23:55,039
easy to patch just due to the nature of

593
00:23:55,039 --> 00:23:56,000
it

594
00:23:56,000 --> 00:23:58,080
at the same time the other thing is how

595
00:23:58,080 --> 00:23:59,760
we can bring in

596
00:23:59,760 --> 00:24:02,880
all those runtime exceptions earlier in

597
00:24:02,880 --> 00:24:04,080
the development

598
00:24:04,080 --> 00:24:06,799
phase of our program so we can plan for

599
00:24:06,799 --> 00:24:07,440
it we can

600
00:24:07,440 --> 00:24:10,799
we can think about it and fix it

601
00:24:10,799 --> 00:24:14,000
at that stage and interestingly some of

602
00:24:14,000 --> 00:24:16,200
these design patterns or principles can

603
00:24:16,200 --> 00:24:20,799
implicitly address many other classes of

604
00:24:20,799 --> 00:24:23,760
security bugs

605
00:24:24,240 --> 00:24:27,200
i have divided these principles to you

606
00:24:27,200 --> 00:24:29,120
know different categories of core

607
00:24:29,120 --> 00:24:31,919
and supporting and i'm not planning to

608
00:24:31,919 --> 00:24:33,279
go through them

609
00:24:33,279 --> 00:24:35,760
in this talk this is itself in another

610
00:24:35,760 --> 00:24:36,480
talk

611
00:24:36,480 --> 00:24:38,720
but for the sake of the demo examples

612
00:24:38,720 --> 00:24:41,360
that i have i will go through

613
00:24:41,360 --> 00:24:43,679
a few of these principles just to see

614
00:24:43,679 --> 00:24:45,520
how we can address a bug

615
00:24:45,520 --> 00:24:48,159
similar to the http parameter pollution

616
00:24:48,159 --> 00:24:50,159
and you will you may also agree with me

617
00:24:50,159 --> 00:24:51,279
that

618
00:24:51,279 --> 00:24:54,720
some of these principles

619
00:24:54,720 --> 00:24:57,200
not just addressing the bot but even if

620
00:24:57,200 --> 00:24:59,200
someone didn't know about http parameter

621
00:24:59,200 --> 00:25:00,799
pollution they could

622
00:25:00,799 --> 00:25:03,279
address this this issue the first

623
00:25:03,279 --> 00:25:05,520
principle untrusted data validation this

624
00:25:05,520 --> 00:25:07,600
is commonly known as input validation

625
00:25:07,600 --> 00:25:08,640
and you know

626
00:25:08,640 --> 00:25:11,120
there is technically it will address the

627
00:25:11,120 --> 00:25:12,840
block

628
00:25:12,840 --> 00:25:15,360
however when we are dealing with a

629
00:25:15,360 --> 00:25:16,480
complex program

630
00:25:16,480 --> 00:25:19,760
an enterprise type program it is not

631
00:25:19,760 --> 00:25:20,799
enough

632
00:25:20,799 --> 00:25:23,039
and this is like the promise of the

633
00:25:23,039 --> 00:25:24,960
other principle to make sure

634
00:25:24,960 --> 00:25:28,240
this uh program is robust in those

635
00:25:28,240 --> 00:25:30,880
situations

636
00:25:31,520 --> 00:25:33,919
so untrusted data validation is simply

637
00:25:33,919 --> 00:25:35,039
about

638
00:25:35,039 --> 00:25:38,000
making sure when the data sorry the data

639
00:25:38,000 --> 00:25:39,440
must be validated

640
00:25:39,440 --> 00:25:41,760
as it crosses the boundary between

641
00:25:41,760 --> 00:25:42,799
untrusted

642
00:25:42,799 --> 00:25:45,200
and trusted environment now if we look

643
00:25:45,200 --> 00:25:46,720
at our program

644
00:25:46,720 --> 00:25:50,640
here let me just shift here

645
00:25:52,320 --> 00:25:55,360
within the demo we have another

646
00:25:55,360 --> 00:25:58,799
branch called patch which there is a

647
00:25:58,799 --> 00:26:01,840
sample sorry check out patch there is a

648
00:26:01,840 --> 00:26:04,400
you can find a sample

649
00:26:04,400 --> 00:26:07,760
patch for this issue

650
00:26:08,799 --> 00:26:10,960
the first thing is within the patch

651
00:26:10,960 --> 00:26:13,039
program you know we haven't touched our

652
00:26:13,039 --> 00:26:15,520
the the test so the tests remain remain

653
00:26:15,520 --> 00:26:18,400
the same was after test security.test

654
00:26:18,400 --> 00:26:21,360
but within the source directory i have

655
00:26:21,360 --> 00:26:23,520
made some changes right here

656
00:26:23,520 --> 00:26:24,880
the first thing let's just look at the

657
00:26:24,880 --> 00:26:26,880
app.js to see how a patch

658
00:26:26,880 --> 00:26:29,440
example gonna look like the first thing

659
00:26:29,440 --> 00:26:31,520
you can notice here is

660
00:26:31,520 --> 00:26:34,799
uh we are defining two constant

661
00:26:34,799 --> 00:26:36,799
one is called action the other call

662
00:26:36,799 --> 00:26:40,000
amount and it's coming from these two

663
00:26:40,000 --> 00:26:42,080
which later i will talk about data types

664
00:26:42,080 --> 00:26:43,760
called action and emand

665
00:26:43,760 --> 00:26:45,520
and that's it and then later on i will

666
00:26:45,520 --> 00:26:47,760
pass these validated

667
00:26:47,760 --> 00:26:50,799
values to our payment method for for the

668
00:26:50,799 --> 00:26:52,720
rest of the program

669
00:26:52,720 --> 00:26:54,159
if you look at the action and amount

670
00:26:54,159 --> 00:26:56,799
they are all defined in a separate files

671
00:26:56,799 --> 00:27:00,000
uh and i call it types

672
00:27:00,000 --> 00:27:03,039
let's look at action as an example

673
00:27:03,039 --> 00:27:06,000
so what i've done here is i have defined

674
00:27:06,000 --> 00:27:06,640
a

675
00:27:06,640 --> 00:27:10,400
new type in our program and the type

676
00:27:10,400 --> 00:27:13,679
is is action now if you think

677
00:27:13,679 --> 00:27:16,799
a little bit the way that action was

678
00:27:16,799 --> 00:27:18,880
defined in our

679
00:27:18,880 --> 00:27:22,000
broken example action was defined as a

680
00:27:22,000 --> 00:27:23,279
string

681
00:27:23,279 --> 00:27:26,799
and in a lot of programs a string is not

682
00:27:26,799 --> 00:27:30,320
a good representation of this concept

683
00:27:30,320 --> 00:27:32,799
and this goes back to i don't want to

684
00:27:32,799 --> 00:27:34,640
make it more complex this actually goes

685
00:27:34,640 --> 00:27:35,520
back to

686
00:27:35,520 --> 00:27:38,799
domain driven development where it

687
00:27:38,799 --> 00:27:42,000
encourages to

688
00:27:42,080 --> 00:27:45,360
model your program as close as possible

689
00:27:45,360 --> 00:27:47,360
to the reality of this program or the

690
00:27:47,360 --> 00:27:49,760
business context of this program

691
00:27:49,760 --> 00:27:52,320
when we define things as generic like a

692
00:27:52,320 --> 00:27:53,039
string

693
00:27:53,039 --> 00:27:56,559
or integer or number although

694
00:27:56,559 --> 00:27:59,360
they can you know they can do the work

695
00:27:59,360 --> 00:28:00,960
they can model something from the

696
00:28:00,960 --> 00:28:03,279
reality but it's not

697
00:28:03,279 --> 00:28:05,840
as close as possible it's not as strict

698
00:28:05,840 --> 00:28:07,279
enough that what we

699
00:28:07,279 --> 00:28:09,360
mean by action in the real world so in

700
00:28:09,360 --> 00:28:11,279
the context of this program action

701
00:28:11,279 --> 00:28:14,640
is is a type that can only contain two

702
00:28:14,640 --> 00:28:15,440
values

703
00:28:15,440 --> 00:28:18,240
transfer and withdraw and that's it it

704
00:28:18,240 --> 00:28:19,279
is not a string

705
00:28:19,279 --> 00:28:21,120
it's not intriguing it's not even an

706
00:28:21,120 --> 00:28:24,000
enum action is action

707
00:28:24,000 --> 00:28:26,320
so by having that by modeling our

708
00:28:26,320 --> 00:28:28,159
program in this way

709
00:28:28,159 --> 00:28:30,559
by just following the business context

710
00:28:30,559 --> 00:28:33,600
or better to say the domain rules

711
00:28:33,600 --> 00:28:37,279
we can enforce these checks

712
00:28:37,279 --> 00:28:40,080
without even thinking about the the

713
00:28:40,080 --> 00:28:42,159
security problems or security things

714
00:28:42,159 --> 00:28:42,559
that

715
00:28:42,559 --> 00:28:45,120
may arise so in this example the first

716
00:28:45,120 --> 00:28:46,880
thing i will check is

717
00:28:46,880 --> 00:28:48,960
well obviously if my value is a string

718
00:28:48,960 --> 00:28:50,880
by default is a string

719
00:28:50,880 --> 00:28:52,960
and the other thing i pretty much check

720
00:28:52,960 --> 00:28:55,039
that if this value that i have is

721
00:28:55,039 --> 00:28:56,159
contains the

722
00:28:56,159 --> 00:28:57,840
the value so the field contains the

723
00:28:57,840 --> 00:28:59,600
value transfer

724
00:28:59,600 --> 00:29:03,120
and that that's pretty much it

725
00:29:03,120 --> 00:29:05,520
with the exception of the line 16 which

726
00:29:05,520 --> 00:29:06,640
i'm doing this is

727
00:29:06,640 --> 00:29:08,960
specific to javascript i'm making sure

728
00:29:08,960 --> 00:29:10,320
that this

729
00:29:10,320 --> 00:29:12,880
type that i have is immutable with the

730
00:29:12,880 --> 00:29:14,720
exception of that

731
00:29:14,720 --> 00:29:17,520
you can see all other checks that i'm

732
00:29:17,520 --> 00:29:18,000
doing

733
00:29:18,000 --> 00:29:20,080
there is nothing related to the security

734
00:29:20,080 --> 00:29:21,520
here these are pretty much

735
00:29:21,520 --> 00:29:24,720
my domain rules so as a programmer if i

736
00:29:24,720 --> 00:29:26,240
was designing this

737
00:29:26,240 --> 00:29:28,640
if i just listening to my domain expert

738
00:29:28,640 --> 00:29:29,520
about

739
00:29:29,520 --> 00:29:32,159
hey what action means in the context of

740
00:29:32,159 --> 00:29:33,360
this program

741
00:29:33,360 --> 00:29:35,679
then i could simply apply these two

742
00:29:35,679 --> 00:29:36,480
checks

743
00:29:36,480 --> 00:29:39,440
and surprise this will also address

744
00:29:39,440 --> 00:29:41,600
implicitly the problem with the http

745
00:29:41,600 --> 00:29:44,640
parameter pollution in this example

746
00:29:44,640 --> 00:29:48,960
let's also look at our amount data type

747
00:29:48,960 --> 00:29:51,360
it's similar to the previous one however

748
00:29:51,360 --> 00:29:52,240
again

749
00:29:52,240 --> 00:29:56,240
in weekly type and also dynamically type

750
00:29:56,240 --> 00:29:57,120
languages

751
00:29:57,120 --> 00:29:58,880
one of the first things we need to do we

752
00:29:58,880 --> 00:30:00,559
need to convert or

753
00:30:00,559 --> 00:30:05,039
the the value to the type that we expect

754
00:30:05,039 --> 00:30:08,320
and this is what i've done on line five

755
00:30:08,320 --> 00:30:11,279
and specific to the javascript we also

756
00:30:11,279 --> 00:30:12,960
need to immediately check

757
00:30:12,960 --> 00:30:15,760
that if this value this number value

758
00:30:15,760 --> 00:30:16,399
that we have

759
00:30:16,399 --> 00:30:19,679
is not a number or not i'm not going

760
00:30:19,679 --> 00:30:22,159
through the detail of why i did use this

761
00:30:22,159 --> 00:30:22,880
number that

762
00:30:22,880 --> 00:30:26,080
is not not just is that itself but this

763
00:30:26,080 --> 00:30:27,760
is just making sure these first few

764
00:30:27,760 --> 00:30:29,679
lines that okay what i'm receiving is a

765
00:30:29,679 --> 00:30:31,440
number type

766
00:30:31,440 --> 00:30:34,080
and then i will apply my domain rule

767
00:30:34,080 --> 00:30:35,840
which is saying in our case

768
00:30:35,840 --> 00:30:38,000
okay i'm expecting to receive an amount

769
00:30:38,000 --> 00:30:38,960
or my program

770
00:30:38,960 --> 00:30:40,559
should process an amount which is

771
00:30:40,559 --> 00:30:42,000
between one

772
00:30:42,000 --> 00:30:46,000
and i guess 10 million and that's it

773
00:30:46,000 --> 00:30:47,679
and obviously this last line is just

774
00:30:47,679 --> 00:30:49,600
making sure my

775
00:30:49,600 --> 00:30:52,880
type is immutable across my program it

776
00:30:52,880 --> 00:30:54,480
just makes it beautiful

777
00:30:54,480 --> 00:30:57,600
and it stops unexpected changes within

778
00:30:57,600 --> 00:30:59,519
our code

779
00:30:59,519 --> 00:31:02,559
so having these two let's also look at

780
00:31:02,559 --> 00:31:05,600
our payment

781
00:31:05,600 --> 00:31:08,399
service or payment method as you can see

782
00:31:08,399 --> 00:31:11,519
i have not changed anything here

783
00:31:11,519 --> 00:31:15,200
because the e this

784
00:31:15,200 --> 00:31:17,360
issue is not it should not be even

785
00:31:17,360 --> 00:31:18,320
addressed at this

786
00:31:18,320 --> 00:31:21,360
stage if we are expecting the

787
00:31:21,360 --> 00:31:23,679
our gateway program or the action is the

788
00:31:23,679 --> 00:31:25,519
place that all the validation should

789
00:31:25,519 --> 00:31:26,399
happen

790
00:31:26,399 --> 00:31:28,720
payment should just be as it is maybe

791
00:31:28,720 --> 00:31:30,320
it's a different team in the company is

792
00:31:30,320 --> 00:31:31,679
actually working on it

793
00:31:31,679 --> 00:31:34,000
and may expect you know receiving values

794
00:31:34,000 --> 00:31:36,320
like withdrawal from another

795
00:31:36,320 --> 00:31:38,799
components from another service so we

796
00:31:38,799 --> 00:31:40,159
are not going to go there and fix it

797
00:31:40,159 --> 00:31:41,039
although you

798
00:31:41,039 --> 00:31:42,960
the the first no gut feeling will be oh

799
00:31:42,960 --> 00:31:44,640
let's just go and fix payment

800
00:31:44,640 --> 00:31:47,919
but in reality in our case once we done

801
00:31:47,919 --> 00:31:49,519
these changes to

802
00:31:49,519 --> 00:31:53,200
to the our main program

803
00:31:53,200 --> 00:31:56,640
uh sorry here let me just quit this and

804
00:31:56,640 --> 00:31:57,279
run the

805
00:31:57,279 --> 00:31:59,120
tests again and see what happens so

806
00:31:59,120 --> 00:32:01,760
let's just rebuild the program

807
00:32:01,760 --> 00:32:04,000
sorry

808
00:32:05,519 --> 00:32:09,279
okay and uh one thing that i forgot to

809
00:32:09,279 --> 00:32:10,799
mention at the beginning was

810
00:32:10,799 --> 00:32:13,519
we have two sets of tests one is our

811
00:32:13,519 --> 00:32:15,519
typical usability test

812
00:32:15,519 --> 00:32:18,640
the first this test to just check if the

813
00:32:18,640 --> 00:32:19,360
program

814
00:32:19,360 --> 00:32:23,279
function as expected so in the first

815
00:32:23,279 --> 00:32:25,919
well in the second test it will check if

816
00:32:25,919 --> 00:32:28,080
there is a request to transfer 100 it

817
00:32:28,080 --> 00:32:31,200
should return 200 with a success message

818
00:32:31,200 --> 00:32:33,440
and if there is a request to withdraw

819
00:32:33,440 --> 00:32:34,799
100 dollar the program

820
00:32:34,799 --> 00:32:39,519
should return 400 with an error message

821
00:32:39,519 --> 00:32:42,080
now to run this test we can simply just

822
00:32:42,080 --> 00:32:43,279
run make test

823
00:32:43,279 --> 00:32:46,720
and it's already done the test

824
00:32:46,720 --> 00:32:49,840
nothing failed here the other sets of

825
00:32:49,840 --> 00:32:52,720
tests are our security tests

826
00:32:52,720 --> 00:32:55,519
and in this example this security says

827
00:32:55,519 --> 00:32:56,799
effectively

828
00:32:56,799 --> 00:32:59,600
does exactly what we did during the

829
00:32:59,600 --> 00:33:00,720
runtime analysis

830
00:33:00,720 --> 00:33:03,919
it its request to transfer and we draw a

831
00:33:03,919 --> 00:33:05,519
hundred dollar and expect to

832
00:33:05,519 --> 00:33:07,840
that program handles this with 100 with

833
00:33:07,840 --> 00:33:11,519
400 error and as you can see here

834
00:33:11,519 --> 00:33:14,159
we are we are passing a query parameter

835
00:33:14,159 --> 00:33:15,519
action with the value

836
00:33:15,519 --> 00:33:18,399
transfer percentage 26 which is a url

837
00:33:18,399 --> 00:33:20,320
encoded for the value

838
00:33:20,320 --> 00:33:24,960
ampersand following with row

839
00:33:24,960 --> 00:33:29,200
so let's run security test

840
00:33:29,200 --> 00:33:31,600
let me clean the program again and

841
00:33:31,600 --> 00:33:32,480
hopefully this

842
00:33:32,480 --> 00:33:35,440
will show our test will rely on again

843
00:33:35,440 --> 00:33:36,159
just

844
00:33:36,159 --> 00:33:39,840
running the cached version at the moment

845
00:33:42,080 --> 00:33:45,760
all right so make test

846
00:33:46,640 --> 00:33:53,840
let it run for a while

847
00:34:01,840 --> 00:34:06,159
okay the dependencies are set up

848
00:34:06,159 --> 00:34:09,199
the source copying the tests and

849
00:34:09,199 --> 00:34:12,320
running our test using and we can see

850
00:34:12,320 --> 00:34:12,800
that

851
00:34:12,800 --> 00:34:16,800
test is passed with no issue

852
00:34:16,800 --> 00:34:21,359
and similarly security test

853
00:34:22,079 --> 00:34:25,440
and hopefully the program yes gonna pass

854
00:34:25,440 --> 00:34:28,000
let's just you know test it together as

855
00:34:28,000 --> 00:34:30,719
well so again i got the program

856
00:34:30,719 --> 00:34:32,879
and let's just send the same command

857
00:34:32,879 --> 00:34:34,879
that we did previously and let's see

858
00:34:34,879 --> 00:34:35,520
what the

859
00:34:35,520 --> 00:34:38,399
program gonna respond obviously i didn't

860
00:34:38,399 --> 00:34:39,040
run it

861
00:34:39,040 --> 00:34:42,399
so let's run the program

862
00:34:45,119 --> 00:34:48,239
and uh uh

863
00:34:48,239 --> 00:34:50,560
let's just see what happened i make

864
00:34:50,560 --> 00:34:51,839
build

865
00:34:51,839 --> 00:34:55,839
obviously and

866
00:34:55,839 --> 00:34:59,280
copying the build

867
00:34:59,280 --> 00:35:02,800
image and then run perfect we got that

868
00:35:02,800 --> 00:35:03,760
running

869
00:35:03,760 --> 00:35:06,640
and here let's run the calculator yes on

870
00:35:06,640 --> 00:35:07,839
our program

871
00:35:07,839 --> 00:35:13,119
and nicely handle the http parameter

872
00:35:14,839 --> 00:35:16,079
pollution

873
00:35:16,079 --> 00:35:18,480
that was that pretty much that i wanted

874
00:35:18,480 --> 00:35:19,280
to talk about

875
00:35:19,280 --> 00:35:22,880
i hope well i cannot cap and answer your

876
00:35:22,880 --> 00:35:24,800
questions in this recording

877
00:35:24,800 --> 00:35:26,560
but hopefully by the time this recording

878
00:35:26,560 --> 00:35:28,720
will be played i will be there to answer

879
00:35:28,720 --> 00:35:30,240
your questions

880
00:35:30,240 --> 00:35:34,079
i hope this was useful the

881
00:35:34,079 --> 00:35:35,920
the intention of this talk was not so

882
00:35:35,920 --> 00:35:38,079
much talking about another vulnerability

883
00:35:38,079 --> 00:35:40,000
or another bad thing that can happen and

884
00:35:40,000 --> 00:35:42,480
get exploited but more around

885
00:35:42,480 --> 00:35:45,839
how even some widely known type

886
00:35:45,839 --> 00:35:49,599
bugs are not that trivial to address

887
00:35:49,599 --> 00:35:52,560
or in our complex program or complex

888
00:35:52,560 --> 00:35:54,640
environment these bugs even are even

889
00:35:54,640 --> 00:35:55,920
harder to

890
00:35:55,920 --> 00:35:58,640
to address the thing about this program

891
00:35:58,640 --> 00:35:59,839
that i have here

892
00:35:59,839 --> 00:36:03,040
if you see when i define new types

893
00:36:03,040 --> 00:36:05,359
these types can be easily shared around

894
00:36:05,359 --> 00:36:06,160
with your

895
00:36:06,160 --> 00:36:08,000
with your other services within within

896
00:36:08,000 --> 00:36:10,320
your environment so everyone can make

897
00:36:10,320 --> 00:36:10,800
sure

898
00:36:10,800 --> 00:36:12,400
all those services can make sure that

899
00:36:12,400 --> 00:36:15,440
they are applying the consistent

900
00:36:15,440 --> 00:36:18,400
validation on on these uh these

901
00:36:18,400 --> 00:36:20,720
parameters that you're dealing with

902
00:36:20,720 --> 00:36:22,800
one thing i want you to leave with is

903
00:36:22,800 --> 00:36:24,079
that this

904
00:36:24,079 --> 00:36:26,800
idea of defining custom types was also

905
00:36:26,800 --> 00:36:29,359
nicely captured in a book called

906
00:36:29,359 --> 00:36:32,240
secure by design and there are the

907
00:36:32,240 --> 00:36:33,760
authors are talking about

908
00:36:33,760 --> 00:36:36,240
domain primitive which is effectively

909
00:36:36,240 --> 00:36:38,320
similar to what we just did we define a

910
00:36:38,320 --> 00:36:39,280
custom type

911
00:36:39,280 --> 00:36:41,119
or in another in a domain driven

912
00:36:41,119 --> 00:36:43,280
development sense we defined a value

913
00:36:43,280 --> 00:36:44,320
object

914
00:36:44,320 --> 00:36:47,440
and finally here are some references

915
00:36:47,440 --> 00:36:50,480
and if you want to find me

916
00:36:50,480 --> 00:36:53,119
or contact me these are my details if

917
00:36:53,119 --> 00:36:54,800
you're part of sick talks you can

918
00:36:54,800 --> 00:36:57,079
definitely find me on

919
00:36:57,079 --> 00:36:59,200
sicktalks.slack.com

920
00:36:59,200 --> 00:37:01,920
and that was it thank you very much and

921
00:37:01,920 --> 00:37:04,800
see you later

