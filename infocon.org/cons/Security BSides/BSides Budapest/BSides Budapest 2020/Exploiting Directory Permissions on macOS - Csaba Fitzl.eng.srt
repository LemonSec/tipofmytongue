1
00:00:06,560 --> 00:00:07,359
okay

2
00:00:07,359 --> 00:00:10,080
uh welcome everyone to my talk about

3
00:00:10,080 --> 00:00:11,440
exploiting

4
00:00:11,440 --> 00:00:14,320
directory permissions on mac os my name

5
00:00:14,320 --> 00:00:17,600
is uh chabafitsu

6
00:00:17,600 --> 00:00:20,800
and i'm working for offensive security

7
00:00:20,800 --> 00:00:23,840
so just a briefly about myself right now

8
00:00:23,840 --> 00:00:26,000
i'm a content developer at offensive

9
00:00:26,000 --> 00:00:27,359
security

10
00:00:27,359 --> 00:00:30,240
i used to be a red and blue teamer

11
00:00:30,240 --> 00:00:31,519
before that

12
00:00:31,519 --> 00:00:34,239
for about eight years and recently i

13
00:00:34,239 --> 00:00:35,920
started to do

14
00:00:35,920 --> 00:00:40,160
mac os research exploitation

15
00:00:40,320 --> 00:00:44,000
i have live two kids i love hiking

16
00:00:44,000 --> 00:00:46,480
uh especially in the alps and i love to

17
00:00:46,480 --> 00:00:48,879
do yoga

18
00:00:48,879 --> 00:00:53,039
so what i will talk about today

19
00:00:53,120 --> 00:00:57,360
uh briefly first i will discuss the

20
00:00:57,360 --> 00:01:00,160
mac os file system permissions the

21
00:01:00,160 --> 00:01:00,960
entire

22
00:01:00,960 --> 00:01:03,440
model

23
00:01:04,000 --> 00:01:07,520
then we will talk about how to find box

24
00:01:07,520 --> 00:01:11,200
then i will talk about other box

25
00:01:11,200 --> 00:01:14,240
and lastly how we can prevent these

26
00:01:14,240 --> 00:01:16,640
attacks

27
00:01:17,840 --> 00:01:21,360
i will start with going over the mac os

28
00:01:21,360 --> 00:01:24,799
file system permission model

29
00:01:24,880 --> 00:01:27,840
which we need to understand uh in order

30
00:01:27,840 --> 00:01:28,240
to

31
00:01:28,240 --> 00:01:33,600
exploit all these permissions issues

32
00:01:34,159 --> 00:01:37,840
now mac os is based on a psd

33
00:01:37,840 --> 00:01:41,360
so on a on a very base case it follows

34
00:01:41,360 --> 00:01:42,240
the

35
00:01:42,240 --> 00:01:46,159
pro 6 5 permission model

36
00:01:46,159 --> 00:01:49,119
um if you are familiar with any nik

37
00:01:49,119 --> 00:01:49,980
space system

38
00:01:49,980 --> 00:01:51,200
[Music]

39
00:01:51,200 --> 00:01:53,439
essentially this is what you will see

40
00:01:53,439 --> 00:01:55,200
everywhere else

41
00:01:55,200 --> 00:01:58,399
so every file and directory has a set of

42
00:01:58,399 --> 00:02:01,439
permissions uh on the computer

43
00:02:01,439 --> 00:02:04,880
which consists of the user owner

44
00:02:04,880 --> 00:02:06,960
permission then the group owner

45
00:02:06,960 --> 00:02:08,239
permissions

46
00:02:08,239 --> 00:02:11,360
and lastly and everyone

47
00:02:11,360 --> 00:02:14,400
or the world permission as it's being

48
00:02:14,400 --> 00:02:15,520
called

49
00:02:15,520 --> 00:02:19,040
now each of these uh one by one has a

50
00:02:19,040 --> 00:02:22,400
read write and execute

51
00:02:22,400 --> 00:02:27,200
permission so in overall we have nine

52
00:02:27,200 --> 00:02:31,040
bits basically that controls the very

53
00:02:31,040 --> 00:02:32,160
basic

54
00:02:32,160 --> 00:02:36,319
permissions now

55
00:02:36,319 --> 00:02:38,800
with files having read write execute

56
00:02:38,800 --> 00:02:39,599
permissions

57
00:02:39,599 --> 00:02:42,080
is kind of straightforward it speaks to

58
00:02:42,080 --> 00:02:43,200
itself like

59
00:02:43,200 --> 00:02:45,040
if you have a read access to a file you

60
00:02:45,040 --> 00:02:46,879
can read it if you have bright access to

61
00:02:46,879 --> 00:02:47,599
it

62
00:02:47,599 --> 00:02:49,200
you can write to it and if you have

63
00:02:49,200 --> 00:02:51,760
execute permission on the file

64
00:02:51,760 --> 00:02:54,959
file then you can execute it uh if it's

65
00:02:54,959 --> 00:02:55,440
uh

66
00:02:55,440 --> 00:02:58,480
if it's an executable now

67
00:02:58,480 --> 00:03:01,200
with directories it's not that

68
00:03:01,200 --> 00:03:04,159
straightforward i think

69
00:03:04,159 --> 00:03:06,800
a read permission on a directory means

70
00:03:06,800 --> 00:03:07,519
that you can

71
00:03:07,519 --> 00:03:10,159
enumerate the directory entries so

72
00:03:10,159 --> 00:03:11,360
basically you can list

73
00:03:11,360 --> 00:03:14,480
what's inside the directory right access

74
00:03:14,480 --> 00:03:16,159
to the directory means that you can

75
00:03:16,159 --> 00:03:16,959
delete and

76
00:03:16,959 --> 00:03:21,680
write files to the directory

77
00:03:21,680 --> 00:03:24,640
regardless of the permissions of the

78
00:03:24,640 --> 00:03:25,680
file

79
00:03:25,680 --> 00:03:28,480
and execute on a directory means that

80
00:03:28,480 --> 00:03:29,519
you can

81
00:03:29,519 --> 00:03:32,879
traverse the directory and

82
00:03:32,879 --> 00:03:36,159
that you can also access the file

83
00:03:36,159 --> 00:03:39,680
contents in that directory if you don't

84
00:03:39,680 --> 00:03:40,799
have this right

85
00:03:40,799 --> 00:03:43,920
you can't access any files in the

86
00:03:43,920 --> 00:03:47,360
in the directory or any subdirectories

87
00:03:47,360 --> 00:03:50,000
now this set of permission can create

88
00:03:50,000 --> 00:03:51,040
some

89
00:03:51,040 --> 00:03:54,159
corner cases which you would think that

90
00:03:54,159 --> 00:03:55,040
you will never

91
00:03:55,040 --> 00:03:58,720
face but in reality

92
00:03:58,720 --> 00:04:02,080
there are so let's say we if we have a

93
00:04:02,080 --> 00:04:03,840
directory with

94
00:04:03,840 --> 00:04:07,760
read access only uh that means that you

95
00:04:07,760 --> 00:04:10,640
can't access any files in that directory

96
00:04:10,640 --> 00:04:11,760
because you don't have

97
00:04:11,760 --> 00:04:15,120
any execute permission it will also

98
00:04:15,120 --> 00:04:16,238
involve that

99
00:04:16,238 --> 00:04:18,798
auto read access would mean that you can

100
00:04:18,798 --> 00:04:20,639
list or enumerate entries in the

101
00:04:20,639 --> 00:04:21,759
directory

102
00:04:21,759 --> 00:04:24,160
because you don't have execute rights

103
00:04:24,160 --> 00:04:25,360
you can't

104
00:04:25,360 --> 00:04:29,520
enumerate them really

105
00:04:29,520 --> 00:04:32,960
if you have only execute permissions uh

106
00:04:32,960 --> 00:04:35,840
on a directory you can't list files

107
00:04:35,840 --> 00:04:38,160
because you don't have read permissions

108
00:04:38,160 --> 00:04:41,120
but if you know the name of the file you

109
00:04:41,120 --> 00:04:44,400
can still access it

110
00:04:44,639 --> 00:04:48,720
now imagine the following experiment

111
00:04:48,720 --> 00:04:51,840
make a any directory create a file

112
00:04:51,840 --> 00:04:55,919
inside it in this example i create aaa

113
00:04:55,919 --> 00:04:57,360
and putting aaa

114
00:04:57,360 --> 00:05:00,400
into the file called a i

115
00:05:00,400 --> 00:05:03,759
change the permissions of aaa to

116
00:05:03,759 --> 00:05:06,720
777 which means that i will grant read

117
00:05:06,720 --> 00:05:08,720
write execute

118
00:05:08,720 --> 00:05:11,759
to the user to the group and to everyone

119
00:05:11,759 --> 00:05:13,600
else

120
00:05:13,600 --> 00:05:18,240
and of course i can list the contents of

121
00:05:18,240 --> 00:05:22,080
aaa now if i change the permissions of

122
00:05:22,080 --> 00:05:23,759
the restricted

123
00:05:23,759 --> 00:05:26,800
directory to 666 which means

124
00:05:26,800 --> 00:05:30,320
read write to everyone to the user to

125
00:05:30,320 --> 00:05:31,440
the group and everyone

126
00:05:31,440 --> 00:05:35,280
but no execute for anyone else

127
00:05:35,280 --> 00:05:38,639
i can't get the contents anymore of the

128
00:05:38,639 --> 00:05:39,280
file

129
00:05:39,280 --> 00:05:41,520
now interestingly if you try to list the

130
00:05:41,520 --> 00:05:42,560
contents of

131
00:05:42,560 --> 00:05:46,880
restricted you will not see anything

132
00:05:46,880 --> 00:05:49,039
although you have read access but again

133
00:05:49,039 --> 00:05:53,120
you don't have execute

134
00:05:53,120 --> 00:05:56,000
now you can try to directly read the

135
00:05:56,000 --> 00:05:56,479
file

136
00:05:56,479 --> 00:06:00,400
or the file attributes

137
00:06:00,400 --> 00:06:06,319
it will be denied and now you can

138
00:06:06,319 --> 00:06:08,960
change back the permissions of

139
00:06:08,960 --> 00:06:10,160
restricted

140
00:06:10,160 --> 00:06:13,199
granting execute to to the user to the

141
00:06:13,199 --> 00:06:14,479
group and

142
00:06:14,479 --> 00:06:16,639
to everyone and again the file is still

143
00:06:16,639 --> 00:06:18,960
there

144
00:06:19,600 --> 00:06:23,440
you can still see it

145
00:06:25,840 --> 00:06:28,080
so

146
00:06:30,479 --> 00:06:35,039
if in case you as a user

147
00:06:35,039 --> 00:06:37,199
don't have execute permissions on a

148
00:06:37,199 --> 00:06:38,800
directory but

149
00:06:38,800 --> 00:06:42,960
maybe you have permissions on the file

150
00:06:42,960 --> 00:06:46,560
maybe you can find a way to leak that

151
00:06:46,560 --> 00:06:47,520
file

152
00:06:47,520 --> 00:06:49,199
through an exploit and we will see a

153
00:06:49,199 --> 00:06:50,560
case for this

154
00:06:50,560 --> 00:06:52,160
because normally because of the

155
00:06:52,160 --> 00:06:54,160
directory permissions you wouldn't be

156
00:06:54,160 --> 00:06:55,520
able to see

157
00:06:55,520 --> 00:06:59,440
or access that file but in case you can

158
00:06:59,440 --> 00:07:01,280
leak out that file somehow to an

159
00:07:01,280 --> 00:07:03,360
external location

160
00:07:03,360 --> 00:07:06,639
you can read it contents

161
00:07:08,560 --> 00:07:11,680
if you have read write executable

162
00:07:11,680 --> 00:07:13,280
directory

163
00:07:13,280 --> 00:07:15,440
it means that you can delete and create

164
00:07:15,440 --> 00:07:17,199
files

165
00:07:17,199 --> 00:07:20,880
regardless of the files permissions or

166
00:07:20,880 --> 00:07:24,319
file owner especially regarding the

167
00:07:24,319 --> 00:07:25,919
delete

168
00:07:25,919 --> 00:07:27,919
one so if you have right access to a

169
00:07:27,919 --> 00:07:30,400
directory and there is a file owned by

170
00:07:30,400 --> 00:07:31,919
root

171
00:07:31,919 --> 00:07:35,198
it means that you can delete it

172
00:07:35,599 --> 00:07:40,639
which we will abuse in in many cases

173
00:07:40,800 --> 00:07:44,160
now there are so called flag modifiers

174
00:07:44,160 --> 00:07:48,800
for each files there are many of those

175
00:07:48,800 --> 00:07:52,160
i will not detail all of them uh here

176
00:07:52,160 --> 00:07:54,560
from an exploitation point of view there

177
00:07:54,560 --> 00:07:56,240
are two important ones

178
00:07:56,240 --> 00:07:59,680
there is the you change unchanged

179
00:07:59,680 --> 00:08:03,360
or you immutable uh

180
00:08:03,360 --> 00:08:06,479
flag these are really all the same

181
00:08:06,479 --> 00:08:09,680
it means that no one can change the file

182
00:08:09,680 --> 00:08:13,840
until the flag is removed

183
00:08:15,360 --> 00:08:18,560
so if the file is owned by root and it

184
00:08:18,560 --> 00:08:19,759
has this

185
00:08:19,759 --> 00:08:22,800
unchanged flag

186
00:08:22,800 --> 00:08:24,800
even if you have right access to the

187
00:08:24,800 --> 00:08:29,280
directory you cannot delete this file

188
00:08:29,440 --> 00:08:32,880
so it can prevent exploitation

189
00:08:32,880 --> 00:08:36,240
restricted this is a macos specific flag

190
00:08:36,240 --> 00:08:38,559
it means that the file or the directory

191
00:08:38,559 --> 00:08:41,039
is protected by sip

192
00:08:41,039 --> 00:08:43,039
sip stands for system integrity

193
00:08:43,039 --> 00:08:45,598
protection

194
00:08:45,760 --> 00:08:48,560
it's basically enforced by the sandbox

195
00:08:48,560 --> 00:08:48,880
and

196
00:08:48,880 --> 00:08:52,160
it protects system core files and

197
00:08:52,160 --> 00:08:55,360
system core directories and not even

198
00:08:55,360 --> 00:09:01,200
jute has right access to those location

199
00:09:01,200 --> 00:09:05,920
you need to have special entitlement

200
00:09:05,920 --> 00:09:08,720
which obviously is only handed out to

201
00:09:08,720 --> 00:09:10,959
apple binaries

202
00:09:10,959 --> 00:09:13,760
that can actually write to these

203
00:09:13,760 --> 00:09:16,399
locations

204
00:09:18,320 --> 00:09:23,839
you can use the ls-l

205
00:09:24,320 --> 00:09:27,360
to show these flags if you do it on the

206
00:09:27,360 --> 00:09:29,040
root folder you will

207
00:09:29,040 --> 00:09:32,000
see a bunch of these

208
00:09:32,160 --> 00:09:34,880
you will see a bunch of restricted

209
00:09:34,880 --> 00:09:36,640
locations which are the typically the

210
00:09:36,640 --> 00:09:38,000
system being

211
00:09:38,000 --> 00:09:41,200
uh usr var

212
00:09:41,200 --> 00:09:45,440
uh ford directories are osc protected

213
00:09:45,440 --> 00:09:49,519
and the hidden here refers to

214
00:09:49,519 --> 00:09:52,000
being hidden from finder so if you just

215
00:09:52,000 --> 00:09:52,800
list these

216
00:09:52,800 --> 00:09:56,000
in in terminal you will see these

217
00:09:56,000 --> 00:09:59,279
locations but if you go to finder

218
00:09:59,279 --> 00:10:01,519
by default you you will not see these

219
00:10:01,519 --> 00:10:02,880
locations

220
00:10:02,880 --> 00:10:06,079
you need to unhide them

221
00:10:07,279 --> 00:10:11,279
there is another interesting

222
00:10:12,560 --> 00:10:15,360
bit that can affect our exploitation

223
00:10:15,360 --> 00:10:17,279
capabilities it's the sticky bit

224
00:10:17,279 --> 00:10:20,800
on directories it will mean that the

225
00:10:20,800 --> 00:10:22,720
file system will treat these files

226
00:10:22,720 --> 00:10:26,079
in a special way so basically if you

227
00:10:26,079 --> 00:10:27,440
have a

228
00:10:27,440 --> 00:10:29,120
file in the directory where the sticky

229
00:10:29,120 --> 00:10:31,120
bit is set only the file owner the

230
00:10:31,120 --> 00:10:32,560
directory owner

231
00:10:32,560 --> 00:10:36,320
or root user can rename or delete

232
00:10:36,320 --> 00:10:39,680
the file now this is

233
00:10:39,680 --> 00:10:43,360
typically applied on the temp directory

234
00:10:43,360 --> 00:10:45,440
and it's for preventing users from

235
00:10:45,440 --> 00:10:46,720
deleting

236
00:10:46,720 --> 00:10:49,839
uh each other file now you have right

237
00:10:49,839 --> 00:10:51,200
access to the temp

238
00:10:51,200 --> 00:10:53,200
directory and if we go back to the

239
00:10:53,200 --> 00:10:55,360
regular posix model

240
00:10:55,360 --> 00:10:57,600
it would mean that you can delete anyone

241
00:10:57,600 --> 00:10:59,680
else file

242
00:10:59,680 --> 00:11:02,560
there but because of the sticky bit you

243
00:11:02,560 --> 00:11:05,359
cannot do that

244
00:11:07,200 --> 00:11:10,000
there is another

245
00:11:11,440 --> 00:11:13,680
important thing one on mac os it's the

246
00:11:13,680 --> 00:11:15,360
access control list

247
00:11:15,360 --> 00:11:18,880
it's basically a more granular access

248
00:11:18,880 --> 00:11:21,920
control than the traditional posix model

249
00:11:21,920 --> 00:11:23,680
it will work with creating access

250
00:11:23,680 --> 00:11:25,120
control entries

251
00:11:25,120 --> 00:11:28,560
to various files or directories

252
00:11:28,560 --> 00:11:31,279
and it can be really applied to multiple

253
00:11:31,279 --> 00:11:32,320
users multiple

254
00:11:32,320 --> 00:11:36,480
groups and you have more

255
00:11:36,480 --> 00:11:41,279
rights than the basic three

256
00:11:41,279 --> 00:11:42,800
in the in the posix model for

257
00:11:42,800 --> 00:11:44,720
directories it means that you will have

258
00:11:44,720 --> 00:11:47,040
list search at file add subdirectory

259
00:11:47,040 --> 00:11:48,399
delete child

260
00:11:48,399 --> 00:11:50,720
for file it's read write execute and

261
00:11:50,720 --> 00:11:52,480
append

262
00:11:52,480 --> 00:11:54,399
uh which is a fourth one so you can be

263
00:11:54,399 --> 00:11:56,079
really more granular with

264
00:11:56,079 --> 00:11:59,440
controlling access in my experience i

265
00:11:59,440 --> 00:12:03,519
haven't really seen this overly used

266
00:12:03,519 --> 00:12:06,639
but you might run into it

267
00:12:06,639 --> 00:12:09,600
now there is an another thing which i

268
00:12:09,600 --> 00:12:10,480
think is

269
00:12:10,480 --> 00:12:13,920
much more limiting than the uh

270
00:12:13,920 --> 00:12:17,360
acs on file and that's the sandbox

271
00:12:17,360 --> 00:12:19,519
now sip which i mentioned before the

272
00:12:19,519 --> 00:12:20,560
system integrity

273
00:12:20,560 --> 00:12:23,200
integrity protection is also enforced by

274
00:12:23,200 --> 00:12:25,279
the sandbox

275
00:12:25,279 --> 00:12:29,519
and uh sandbox can further restrict

276
00:12:29,519 --> 00:12:31,360
your file access so there are many

277
00:12:31,360 --> 00:12:33,200
sandbox profiles

278
00:12:33,200 --> 00:12:36,160
uh on the system in these locations that

279
00:12:36,160 --> 00:12:37,440
you can

280
00:12:37,440 --> 00:12:40,720
see on the screen and those can really

281
00:12:40,720 --> 00:12:41,760
limit you

282
00:12:41,760 --> 00:12:45,040
to certain locations

283
00:12:45,040 --> 00:12:48,560
regardless of your user so there might

284
00:12:48,560 --> 00:12:49,760
be a daemon

285
00:12:49,760 --> 00:12:52,320
process running as root which would mean

286
00:12:52,320 --> 00:12:54,160
that you can really

287
00:12:54,160 --> 00:12:57,519
access almost any any place

288
00:12:57,519 --> 00:13:00,240
on the system but maybe if you have a

289
00:13:00,240 --> 00:13:02,240
sandbox profile limiting you to only

290
00:13:02,240 --> 00:13:04,160
access certain

291
00:13:04,160 --> 00:13:07,440
directories this will

292
00:13:07,440 --> 00:13:10,880
take effect and and it will be more

293
00:13:10,880 --> 00:13:13,519
restrictive

294
00:13:15,200 --> 00:13:18,720
this is an example for sandbox profile

295
00:13:18,720 --> 00:13:19,440
these are

296
00:13:19,440 --> 00:13:22,560
written in svpl language

297
00:13:22,560 --> 00:13:24,639
uh i will not detail that here it's not

298
00:13:24,639 --> 00:13:27,360
a sandbox talk but

299
00:13:27,360 --> 00:13:30,959
if you open these sb files um

300
00:13:30,959 --> 00:13:33,360
i would say even without knowing the

301
00:13:33,360 --> 00:13:35,440
sbpl language

302
00:13:35,440 --> 00:13:37,600
you can read through and it will be

303
00:13:37,600 --> 00:13:39,760
mostly self-explanatory

304
00:13:39,760 --> 00:13:42,880
uh for example here we have hello five

305
00:13:42,880 --> 00:13:45,839
five right and the literal means that

306
00:13:45,839 --> 00:13:47,440
those specific

307
00:13:47,440 --> 00:13:52,240
files basically

308
00:13:55,760 --> 00:13:59,360
so this was for the basic

309
00:13:59,360 --> 00:14:02,000
permission model and then let's see how

310
00:14:02,000 --> 00:14:03,199
we can find

311
00:14:03,199 --> 00:14:06,959
uh box so there are two methods the

312
00:14:06,959 --> 00:14:07,600
static and

313
00:14:07,600 --> 00:14:11,440
dynamic way for identifying

314
00:14:11,440 --> 00:14:14,839
uh box i mostly use the

315
00:14:14,839 --> 00:14:19,519
static option now

316
00:14:19,519 --> 00:14:22,959
here we can basically look for various

317
00:14:22,959 --> 00:14:25,760
file system

318
00:14:26,079 --> 00:14:28,400
permission combinations which

319
00:14:28,400 --> 00:14:29,760
[Music]

320
00:14:29,760 --> 00:14:33,040
if found could mean that there is an

321
00:14:33,040 --> 00:14:34,000
excludable

322
00:14:34,000 --> 00:14:36,639
scenario

323
00:14:41,279 --> 00:14:44,639
so the first one is when the file owner

324
00:14:44,639 --> 00:14:45,760
is root

325
00:14:45,760 --> 00:14:49,120
but the directory owner is different and

326
00:14:49,120 --> 00:14:51,279
this usually goes together with the

327
00:14:51,279 --> 00:14:54,160
third one where the file owner is sued

328
00:14:54,160 --> 00:14:57,600
but through one of your group

329
00:14:57,600 --> 00:14:59,680
memberships you have right access to

330
00:14:59,680 --> 00:15:01,199
that directory

331
00:15:01,199 --> 00:15:06,000
this means that you can delete that file

332
00:15:06,000 --> 00:15:09,199
which is on my own by root

333
00:15:09,199 --> 00:15:12,800
and maybe mess around with that

334
00:15:12,800 --> 00:15:16,480
this is what we mostly abuse

335
00:15:16,480 --> 00:15:19,199
in the in the following cases there is

336
00:15:19,199 --> 00:15:21,680
also another case when the file

337
00:15:21,680 --> 00:15:23,600
owner is not true so it's owned by the

338
00:15:23,600 --> 00:15:25,120
user

339
00:15:25,120 --> 00:15:28,480
and by the directory only suit now

340
00:15:28,480 --> 00:15:31,600
this could happen maybe because others

341
00:15:31,600 --> 00:15:34,000
have right access to that directory

342
00:15:34,000 --> 00:15:37,759
uh not just suit but also because of

343
00:15:37,759 --> 00:15:41,120
there is a root process touching that

344
00:15:41,120 --> 00:15:42,320
file

345
00:15:42,320 --> 00:15:45,120
but then later change changes the

346
00:15:45,120 --> 00:15:47,920
ownership of that file

347
00:15:47,920 --> 00:15:51,040
and the last one is

348
00:15:51,040 --> 00:15:54,320
when the file owner is not root but the

349
00:15:54,320 --> 00:15:54,959
group

350
00:15:54,959 --> 00:15:58,320
ownership is real which is really unique

351
00:15:58,320 --> 00:16:02,959
to the root user and the parent folder

352
00:16:02,959 --> 00:16:07,920
or directory isn't is not root owned so

353
00:16:07,920 --> 00:16:08,560
you can

354
00:16:08,560 --> 00:16:12,880
again mess that with that file

355
00:16:12,880 --> 00:16:17,519
and maybe gain some real group ownership

356
00:16:17,519 --> 00:16:20,399
through a bug so it's kind of similar to

357
00:16:20,399 --> 00:16:20,880
the

358
00:16:20,880 --> 00:16:24,399
first or third one but not targeting the

359
00:16:24,399 --> 00:16:28,560
the user but the group ownership

360
00:16:28,560 --> 00:16:30,959
now there is a dynamic method basically

361
00:16:30,959 --> 00:16:32,160
you can

362
00:16:32,160 --> 00:16:35,680
monitor for very similar relationship

363
00:16:35,680 --> 00:16:39,360
dynamically you can use tools like

364
00:16:39,360 --> 00:16:43,759
fs usage or objective c's file monitor

365
00:16:43,759 --> 00:16:47,680
tool i think you can

366
00:16:47,680 --> 00:16:50,720
find the same scenarios then we

367
00:16:50,720 --> 00:16:53,839
come with the with the static method

368
00:16:53,839 --> 00:16:57,199
but the main benefit is that you can

369
00:16:57,199 --> 00:16:57,600
find

370
00:16:57,600 --> 00:17:00,720
cases uh for example when there is a

371
00:17:00,720 --> 00:17:01,279
root

372
00:17:01,279 --> 00:17:04,480
process touching the file in a

373
00:17:04,480 --> 00:17:07,280
in a location that you can control but

374
00:17:07,280 --> 00:17:08,160
then later it

375
00:17:08,160 --> 00:17:12,000
changes the ownership of the file

376
00:17:12,000 --> 00:17:16,880
to your user maybe an installer

377
00:17:17,280 --> 00:17:19,359
this means that you cannot find it with

378
00:17:19,359 --> 00:17:21,280
the static method because the ownership

379
00:17:21,280 --> 00:17:22,480
of the file is already

380
00:17:22,480 --> 00:17:25,760
modified but you can find it through

381
00:17:25,760 --> 00:17:29,919
through dynamic monitoring

382
00:17:31,039 --> 00:17:34,080
so let's see the box

383
00:17:34,080 --> 00:17:37,840
again the general idea here uh what

384
00:17:37,840 --> 00:17:41,440
i will mostly abuse uh

385
00:17:41,440 --> 00:17:44,240
the goal is to redirect the file

386
00:17:44,240 --> 00:17:47,360
operation to a location we want

387
00:17:47,360 --> 00:17:50,400
and the typical process of the

388
00:17:50,400 --> 00:17:52,640
exploitation is we delete the file place

389
00:17:52,640 --> 00:17:53,360
a sim link

390
00:17:53,360 --> 00:17:56,559
or a hard link and

391
00:17:56,559 --> 00:17:59,360
and wait and see what happens with that

392
00:17:59,360 --> 00:18:00,320
sim link

393
00:18:00,320 --> 00:18:03,918
or hard link that we placed

394
00:18:05,520 --> 00:18:09,200
there can be a couple of problems

395
00:18:09,200 --> 00:18:12,000
with our symlink or hard link so the

396
00:18:12,000 --> 00:18:14,960
first is although the process

397
00:18:14,960 --> 00:18:17,600
is running as root because of its

398
00:18:17,600 --> 00:18:19,679
sandbox profile

399
00:18:19,679 --> 00:18:24,080
it cannot write to a location we want

400
00:18:24,080 --> 00:18:28,720
so i i redirect the network

401
00:18:28,720 --> 00:18:31,120
the next one is maybe there is a sim

402
00:18:31,120 --> 00:18:32,720
link or hard link

403
00:18:32,720 --> 00:18:36,320
but instead of following

404
00:18:36,400 --> 00:18:39,760
that it will simply overwrite the file

405
00:18:39,760 --> 00:18:41,360
so

406
00:18:41,360 --> 00:18:45,760
we can cannot do anything about this

407
00:18:45,760 --> 00:18:49,280
the third one is

408
00:18:49,280 --> 00:18:51,440
let's say we successfully redirected the

409
00:18:51,440 --> 00:18:53,760
file operation

410
00:18:53,760 --> 00:18:56,960
and the problem is that the file

411
00:18:56,960 --> 00:18:59,919
is most likely still owned by root which

412
00:18:59,919 --> 00:19:01,919
means that we cannot

413
00:19:01,919 --> 00:19:05,280
modify its contents so we need to find a

414
00:19:05,280 --> 00:19:06,320
way

415
00:19:06,320 --> 00:19:08,720
to to control the file contents if we

416
00:19:08,720 --> 00:19:09,600
cannot do that

417
00:19:09,600 --> 00:19:12,400
it means that we will only have like a

418
00:19:12,400 --> 00:19:13,919
an arbitrary override

419
00:19:13,919 --> 00:19:16,880
vulnerability but not a full-blown

420
00:19:16,880 --> 00:19:19,039
privilege escalation

421
00:19:19,039 --> 00:19:21,840
unfortunately

422
00:19:22,400 --> 00:19:24,320
we can't control the contents of the

423
00:19:24,320 --> 00:19:25,600
file in most cases

424
00:19:25,600 --> 00:19:27,360
but we will see a few interesting

425
00:19:27,360 --> 00:19:28,799
scenarios there

426
00:19:28,799 --> 00:19:31,440
where we can do that and again if we

427
00:19:31,440 --> 00:19:32,080
have

428
00:19:32,080 --> 00:19:34,160
case one or two where it's either

429
00:19:34,160 --> 00:19:36,240
limited by the sandbox

430
00:19:36,240 --> 00:19:39,360
uh or it's not following links then it's

431
00:19:39,360 --> 00:19:41,039
not really a bug

432
00:19:41,039 --> 00:19:46,480
although the permissions are not ideal

433
00:19:49,120 --> 00:19:53,840
so how we can

434
00:19:55,840 --> 00:20:00,320
control the file uh or

435
00:20:00,320 --> 00:20:03,200
by it's important we need to find a way

436
00:20:03,200 --> 00:20:05,039
again

437
00:20:05,039 --> 00:20:08,159
to inject some data into the files on by

438
00:20:08,159 --> 00:20:10,480
root

439
00:20:10,640 --> 00:20:14,960
or let's say there is a file

440
00:20:14,960 --> 00:20:17,520
maybe a

441
00:20:18,320 --> 00:20:22,159
some configuration file for uh for an av

442
00:20:22,159 --> 00:20:25,200
or some security products or or or

443
00:20:25,200 --> 00:20:27,200
anything else

444
00:20:27,200 --> 00:20:30,320
uh which is controlling the product

445
00:20:30,320 --> 00:20:32,559
itself

446
00:20:32,559 --> 00:20:36,480
if the file is in a changeable location

447
00:20:36,480 --> 00:20:38,400
you can delete that file

448
00:20:38,400 --> 00:20:40,960
create a new one with your custom

449
00:20:40,960 --> 00:20:42,080
content

450
00:20:42,080 --> 00:20:46,480
and you potentially you can bypass

451
00:20:46,480 --> 00:20:49,840
something or do something interesting

452
00:20:49,840 --> 00:20:53,280
uh with the product itself

453
00:20:54,159 --> 00:20:58,640
okay so the first one will be the

454
00:20:58,640 --> 00:21:00,960
install history please file uh

455
00:21:00,960 --> 00:21:02,799
vulnerability

456
00:21:02,799 --> 00:21:05,840
this was a macos

457
00:21:05,840 --> 00:21:09,520
vulnerability so whenever

458
00:21:09,520 --> 00:21:11,840
anyone is installing an application on

459
00:21:11,840 --> 00:21:13,200
mac os

460
00:21:13,200 --> 00:21:15,919
the either from app store or from a

461
00:21:15,919 --> 00:21:17,760
package

462
00:21:17,760 --> 00:21:20,159
the system will log into call file

463
00:21:20,159 --> 00:21:22,559
install history plist which can be found

464
00:21:22,559 --> 00:21:25,120
in the library receipts

465
00:21:25,120 --> 00:21:29,039
directory now add menu

466
00:21:29,039 --> 00:21:30,720
admin users have write access to this

467
00:21:30,720 --> 00:21:32,480
location which means you can delete the

468
00:21:32,480 --> 00:21:34,480
file place the sim link

469
00:21:34,480 --> 00:21:36,559
and because the sim link will be

470
00:21:36,559 --> 00:21:37,600
followed

471
00:21:37,600 --> 00:21:42,639
you will get arbitrary overwrite

472
00:21:42,840 --> 00:21:45,360
unfortunately we can't really control

473
00:21:45,360 --> 00:21:46,320
the contents

474
00:21:46,320 --> 00:21:49,440
uh or only in a very limited way

475
00:21:49,440 --> 00:21:51,840
uh on the screen you can see the the

476
00:21:51,840 --> 00:21:55,039
plist file how the

477
00:21:55,200 --> 00:21:57,520
uh how this install history pls file

478
00:21:57,520 --> 00:21:59,039
looks like

479
00:21:59,039 --> 00:22:02,480
you can see that there is a date

480
00:22:03,039 --> 00:22:06,320
you can affect it but again it's pretty

481
00:22:06,320 --> 00:22:08,000
limited

482
00:22:08,000 --> 00:22:13,520
there is display name of the application

483
00:22:13,520 --> 00:22:18,080
application version package id

484
00:22:18,880 --> 00:22:21,120
and so on so you can play around with

485
00:22:21,120 --> 00:22:22,000
these names

486
00:22:22,000 --> 00:22:25,679
but you cannot really do

487
00:22:25,679 --> 00:22:29,360
much beyond these

488
00:22:29,360 --> 00:22:32,400
to trigger this uh once you place

489
00:22:32,400 --> 00:22:34,159
the same link you can just install

490
00:22:34,159 --> 00:22:35,760
something maybe from the

491
00:22:35,760 --> 00:22:40,240
app store

492
00:22:40,240 --> 00:22:43,120
the next one is an adobe reader

493
00:22:43,120 --> 00:22:43,919
installer

494
00:22:43,919 --> 00:22:47,280
vulnerability so

495
00:22:47,280 --> 00:22:49,840
when you install at adobe robot reader

496
00:22:49,840 --> 00:22:50,960
on mac os

497
00:22:50,960 --> 00:22:55,760
there is a file in the temp directory

498
00:22:55,760 --> 00:22:58,880
uh with that long name and

499
00:22:58,880 --> 00:23:01,679
basically preorder installation you can

500
00:23:01,679 --> 00:23:03,760
create a sim link

501
00:23:03,760 --> 00:23:07,120
which will be followed by the installer

502
00:23:07,120 --> 00:23:09,440
which means you can overwrite an

503
00:23:09,440 --> 00:23:10,720
arbitrary

504
00:23:10,720 --> 00:23:13,840
file unfortunately the content of this

505
00:23:13,840 --> 00:23:15,679
plist is fixed

506
00:23:15,679 --> 00:23:17,520
so there is nothing really you can do

507
00:23:17,520 --> 00:23:20,000
about it

508
00:23:20,240 --> 00:23:24,320
uh the next mug is kind of interesting

509
00:23:24,320 --> 00:23:27,840
because you could grant

510
00:23:27,840 --> 00:23:31,918
permissions to please files

511
00:23:33,440 --> 00:23:35,840
so with this bug you can grant read

512
00:23:35,840 --> 00:23:38,000
write read write read permissions to any

513
00:23:38,000 --> 00:23:41,360
plist file on the system

514
00:23:42,000 --> 00:23:44,799
by abusing this diagnostic message

515
00:23:44,799 --> 00:23:46,880
history plist file which can be found in

516
00:23:46,880 --> 00:23:48,840
the library application support crash

517
00:23:48,840 --> 00:23:50,880
deporter

518
00:23:50,880 --> 00:23:55,679
directory again this directory allows

519
00:23:55,679 --> 00:23:58,880
admin users to to write

520
00:23:58,880 --> 00:24:02,320
so you can delete the file

521
00:24:02,320 --> 00:24:05,840
place a sim link

522
00:24:06,000 --> 00:24:08,320
and

523
00:24:10,159 --> 00:24:13,120
and it will be followed to some extent

524
00:24:13,120 --> 00:24:15,279
so

525
00:24:15,279 --> 00:24:18,640
it will not be overwritten

526
00:24:18,640 --> 00:24:22,159
so sorry the file that you are playing

527
00:24:22,159 --> 00:24:22,640
it

528
00:24:22,640 --> 00:24:26,000
pointing to is will not be overwritten

529
00:24:26,000 --> 00:24:30,720
but if that file is a plist file

530
00:24:31,279 --> 00:24:33,679
the process will change its permission

531
00:24:33,679 --> 00:24:36,720
to read write read write read

532
00:24:36,720 --> 00:24:39,919
because that's the expected

533
00:24:39,919 --> 00:24:42,320
uh permission on this diagnostic

534
00:24:42,320 --> 00:24:44,720
messages history plist file

535
00:24:44,720 --> 00:24:47,760
which means that you can grant word read

536
00:24:47,760 --> 00:24:49,440
access to any playlist file on the

537
00:24:49,440 --> 00:24:50,559
system

538
00:24:50,559 --> 00:24:53,279
and you can also grant group write

539
00:24:53,279 --> 00:24:54,799
access

540
00:24:54,799 --> 00:25:00,559
to any plist file on the system

541
00:25:00,559 --> 00:25:03,679
and you can trigger it by going to the

542
00:25:03,679 --> 00:25:06,880
privacy pane and

543
00:25:06,880 --> 00:25:08,799
changing the analytics and the

544
00:25:08,799 --> 00:25:11,520
improvements

545
00:25:12,840 --> 00:25:15,840
configuration

546
00:25:16,000 --> 00:25:18,720
uh the next bug the mac os phone hoover

547
00:25:18,720 --> 00:25:19,760
vulnerability

548
00:25:19,760 --> 00:25:24,640
and this was a an information leak

549
00:25:25,120 --> 00:25:28,720
so the library fonts uh

550
00:25:28,720 --> 00:25:31,200
directory has a group right permission

551
00:25:31,200 --> 00:25:33,600
set so admin users can

552
00:25:33,600 --> 00:25:37,360
write to these locations location and

553
00:25:37,360 --> 00:25:38,559
can

554
00:25:38,559 --> 00:25:40,880
drop any file here i think this

555
00:25:40,880 --> 00:25:41,600
permission

556
00:25:41,600 --> 00:25:44,720
is not needed and i will talk about it

557
00:25:44,720 --> 00:25:47,760
uh a few minutes later

558
00:25:47,760 --> 00:25:50,880
why and this is the

559
00:25:50,880 --> 00:25:52,799
the directory that contains the system

560
00:25:52,799 --> 00:25:55,039
byte fonts

561
00:25:55,039 --> 00:25:59,440
and because

562
00:25:59,600 --> 00:26:01,679
i have already have bright access to

563
00:26:01,679 --> 00:26:04,320
these locations i started to

564
00:26:04,320 --> 00:26:08,000
look on to look into it now what happens

565
00:26:08,000 --> 00:26:08,559
when you

566
00:26:08,559 --> 00:26:12,640
install a font on mac os

567
00:26:12,640 --> 00:26:15,120
so you double click the font and this is

568
00:26:15,120 --> 00:26:16,320
the the screen you

569
00:26:16,320 --> 00:26:20,240
you will get you can set the install

570
00:26:20,240 --> 00:26:22,799
location to either computer or user the

571
00:26:22,799 --> 00:26:24,080
user location will be

572
00:26:24,080 --> 00:26:26,960
on your in your home folder in the

573
00:26:26,960 --> 00:26:28,320
library fonts

574
00:26:28,320 --> 00:26:30,480
directory and the computer location will

575
00:26:30,480 --> 00:26:32,720
be the library fonts

576
00:26:32,720 --> 00:26:36,400
directory that i just spoke about

577
00:26:36,880 --> 00:26:39,919
you press install font uh you select the

578
00:26:39,919 --> 00:26:40,400
font

579
00:26:40,400 --> 00:26:43,360
on the validation screen install ticked

580
00:26:43,360 --> 00:26:43,919
and

581
00:26:43,919 --> 00:26:47,440
if you choose to install a system-wide

582
00:26:47,440 --> 00:26:49,440
font then you will get an authentication

583
00:26:49,440 --> 00:26:50,960
prompt

584
00:26:50,960 --> 00:26:53,679
this is why i said that i think having

585
00:26:53,679 --> 00:26:54,720
admin

586
00:26:54,720 --> 00:26:58,000
write access to the

587
00:26:58,159 --> 00:27:01,440
to the library fonts location is not

588
00:27:01,440 --> 00:27:03,760
needed because you will be

589
00:27:03,760 --> 00:27:06,799
prompted for authentication anyway so

590
00:27:06,799 --> 00:27:09,200
if you are authenticated then there is

591
00:27:09,200 --> 00:27:12,240
really no reason

592
00:27:12,640 --> 00:27:15,919
to have write access and then the file

593
00:27:15,919 --> 00:27:18,960
will be copied now i started to

594
00:27:18,960 --> 00:27:20,080
experiment with this

595
00:27:20,080 --> 00:27:21,919
and what i noticed that siblings

596
00:27:21,919 --> 00:27:24,480
hardlings don't work

597
00:27:24,480 --> 00:27:28,880
they will be removed and

598
00:27:28,880 --> 00:27:32,640
you can't win the race condition also

599
00:27:32,640 --> 00:27:35,760
phone hoover is pretty much restricted

600
00:27:35,760 --> 00:27:38,559
by the sandbox so even if it was

601
00:27:38,559 --> 00:27:40,000
followed

602
00:27:40,000 --> 00:27:43,520
i wouldn't really gain anything

603
00:27:43,919 --> 00:27:45,600
the file disclosure is happening

604
00:27:45,600 --> 00:27:48,240
regarding of the

605
00:27:48,240 --> 00:27:51,679
source file or on on the installation

606
00:27:51,679 --> 00:27:54,159
installation process and not the the

607
00:27:54,159 --> 00:27:55,279
target

608
00:27:55,279 --> 00:27:58,159
so between the steps when you select

609
00:27:58,159 --> 00:28:01,679
install font and then install ticked

610
00:28:01,679 --> 00:28:04,240
the file is not locked by the

611
00:28:04,240 --> 00:28:06,000
application which means that you can

612
00:28:06,000 --> 00:28:07,279
replace

613
00:28:07,279 --> 00:28:10,720
the font with a sim link

614
00:28:12,080 --> 00:28:14,399
and that will be followed during the

615
00:28:14,399 --> 00:28:15,760
copy now what

616
00:28:15,760 --> 00:28:19,039
do we really gain with this because if

617
00:28:19,039 --> 00:28:20,080
we think about it

618
00:28:20,080 --> 00:28:23,039
at first there is a root process because

619
00:28:23,039 --> 00:28:26,159
we want to install uh

620
00:28:26,159 --> 00:28:29,200
a system font it will move a file

621
00:28:29,200 --> 00:28:33,360
from its original location with its

622
00:28:33,360 --> 00:28:35,120
original permissions

623
00:28:35,120 --> 00:28:38,080
to a place where we have already write

624
00:28:38,080 --> 00:28:40,480
access

625
00:28:40,960 --> 00:28:42,960
and again the file permissions are

626
00:28:42,960 --> 00:28:45,120
remain the same

627
00:28:45,120 --> 00:28:47,919
now at first it doesn't look interesting

628
00:28:47,919 --> 00:28:48,799
at all but

629
00:28:48,799 --> 00:28:53,600
if we remember the the posix

630
00:28:53,600 --> 00:28:56,960
permissions it could actually mean

631
00:28:56,960 --> 00:28:59,520
an information leak so imagine the

632
00:28:59,520 --> 00:29:01,520
scenario that when you

633
00:29:01,520 --> 00:29:03,360
don't have execute permission on a

634
00:29:03,360 --> 00:29:05,919
specific directory

635
00:29:05,919 --> 00:29:10,480
but there is a file inside that place

636
00:29:10,480 --> 00:29:13,520
where you have read

637
00:29:13,520 --> 00:29:17,039
permissions on that on that file

638
00:29:17,039 --> 00:29:20,640
so that means that that

639
00:29:20,640 --> 00:29:22,960
we can leak that file through this

640
00:29:22,960 --> 00:29:24,880
process which is running as root to a

641
00:29:24,880 --> 00:29:27,120
location

642
00:29:27,120 --> 00:29:30,320
library fonts in this case where we have

643
00:29:30,320 --> 00:29:32,480
execute permissions so we will be able

644
00:29:32,480 --> 00:29:33,279
to

645
00:29:33,279 --> 00:29:37,039
read the contents of the file

646
00:29:39,679 --> 00:29:41,840
so yeah this is how the the exploitation

647
00:29:41,840 --> 00:29:43,760
work

648
00:29:43,760 --> 00:29:47,440
uh if we check the private bar on mdsu

649
00:29:47,440 --> 00:29:48,559
uuid token

650
00:29:48,559 --> 00:29:52,240
idp list this is a file

651
00:29:52,240 --> 00:29:55,440
where we have uh read

652
00:29:55,440 --> 00:29:57,919
permissions on it but because we don't

653
00:29:57,919 --> 00:30:00,080
have execute permissions on the

654
00:30:00,080 --> 00:30:02,720
directory we cannot read it now we can

655
00:30:02,720 --> 00:30:03,760
use this

656
00:30:03,760 --> 00:30:06,960
phone mover bug to

657
00:30:06,960 --> 00:30:09,440
move this file out to the library fonts

658
00:30:09,440 --> 00:30:10,960
and then we can

659
00:30:10,960 --> 00:30:14,399
uh read it contents

660
00:30:15,039 --> 00:30:18,159
so the fix by upper was that

661
00:30:18,159 --> 00:30:22,320
they will actually verify the the

662
00:30:22,320 --> 00:30:25,440
replacement and the symlink or

663
00:30:25,440 --> 00:30:28,880
hard link cannot be followed

664
00:30:30,480 --> 00:30:34,640
the next one is

665
00:30:34,640 --> 00:30:37,760
again a simple arbitrary file override

666
00:30:37,760 --> 00:30:40,799
vulnerability in diagnostic messages

667
00:30:40,799 --> 00:30:43,120
and the reason this is more interesting

668
00:30:43,120 --> 00:30:44,880
because i could achieve

669
00:30:44,880 --> 00:30:48,720
partial uh control of the

670
00:30:48,720 --> 00:30:53,360
of the content so again it's the usual

671
00:30:53,360 --> 00:30:56,880
story we have write access to this

672
00:30:56,880 --> 00:30:59,600
directory there are a bunch of asl log

673
00:30:59,600 --> 00:31:00,240
files

674
00:31:00,240 --> 00:31:03,120
all of them on own by root we can delete

675
00:31:03,120 --> 00:31:04,399
it and use

676
00:31:04,399 --> 00:31:06,959
hard links

677
00:31:08,640 --> 00:31:11,679
instead of sim links and what i found

678
00:31:11,679 --> 00:31:12,240
that

679
00:31:12,240 --> 00:31:14,000
you might need to reboot for the hard

680
00:31:14,000 --> 00:31:18,399
link to to take effect

681
00:31:18,399 --> 00:31:20,399
but we can still uh overwrite an

682
00:31:20,399 --> 00:31:22,320
arbitrary file

683
00:31:22,320 --> 00:31:25,600
now this is the log file so hopefully we

684
00:31:25,600 --> 00:31:26,799
can control its

685
00:31:26,799 --> 00:31:30,159
content and unfortunately

686
00:31:30,159 --> 00:31:33,519
only partially so asl logs are the apple

687
00:31:33,519 --> 00:31:35,120
system locks

688
00:31:35,120 --> 00:31:38,480
it's a very old api it's i think it's

689
00:31:38,480 --> 00:31:38,960
all

690
00:31:38,960 --> 00:31:42,159
deprecated or becoming deprecated there

691
00:31:42,159 --> 00:31:45,360
are very few documentations

692
00:31:45,360 --> 00:31:50,159
uh on that and my problem was that

693
00:31:50,159 --> 00:31:53,440
there are multiple asl files

694
00:31:53,440 --> 00:31:57,840
on the under the log directory

695
00:31:57,840 --> 00:32:02,159
and i didn't know how to end up my

696
00:32:02,159 --> 00:32:05,519
asl log in these private bar log

697
00:32:05,519 --> 00:32:07,600
diagnostic messages so

698
00:32:07,600 --> 00:32:10,480
what will make an asl look to show up in

699
00:32:10,480 --> 00:32:11,200
this log

700
00:32:11,200 --> 00:32:15,519
and not another one

701
00:32:15,519 --> 00:32:17,600
and when i started to look to look into

702
00:32:17,600 --> 00:32:18,559
these uh

703
00:32:18,559 --> 00:32:22,559
diagnostic messages asl looks

704
00:32:22,640 --> 00:32:27,039
it it didn't at first it didn't seem to

705
00:32:27,039 --> 00:32:29,200
contain any

706
00:32:29,200 --> 00:32:31,760
arbitrary text field it seemed to be

707
00:32:31,760 --> 00:32:32,399
like

708
00:32:32,399 --> 00:32:35,679
having predefined uh fields

709
00:32:35,679 --> 00:32:40,840
with some uh values it can take like a

710
00:32:40,840 --> 00:32:43,840
dictionary

711
00:32:44,480 --> 00:32:48,240
now after looking uh through the logs

712
00:32:48,240 --> 00:32:52,320
i finally found one which contained an

713
00:32:52,320 --> 00:32:53,120
arbitrary

714
00:32:53,120 --> 00:32:56,080
text and that was the card of account

715
00:32:56,080 --> 00:32:58,320
refresh completed

716
00:32:58,320 --> 00:33:01,600
now i started to search for this string

717
00:33:01,600 --> 00:33:05,840
and it led me to the calendar persistent

718
00:33:05,840 --> 00:33:09,919
framework now when i open the that

719
00:33:09,919 --> 00:33:12,799
framework and look for this string

720
00:33:12,799 --> 00:33:15,679
it made a call out to the car message

721
00:33:15,679 --> 00:33:17,679
tracer

722
00:33:17,679 --> 00:33:22,880
class with a with this log message

723
00:33:23,279 --> 00:33:26,320
and call message tracer was

724
00:33:26,320 --> 00:33:30,399
found in the calendar foundation

725
00:33:31,279 --> 00:33:34,640
framework now when i started to look

726
00:33:34,640 --> 00:33:36,399
through this

727
00:33:36,399 --> 00:33:39,760
car message tracer

728
00:33:39,760 --> 00:33:43,039
class it became obvious that okay

729
00:33:43,039 --> 00:33:45,360
this is the one that is using the the

730
00:33:45,360 --> 00:33:48,240
asl api

731
00:33:48,240 --> 00:33:50,640
and

732
00:33:51,679 --> 00:33:54,559
i started to trace the the functions if

733
00:33:54,559 --> 00:33:56,159
if i want to do

734
00:33:56,159 --> 00:33:59,039
like a custom message uh into the

735
00:33:59,039 --> 00:34:01,519
diagnostic messages it started to become

736
00:34:01,519 --> 00:34:01,919
a bit

737
00:34:01,919 --> 00:34:05,200
complicated and

738
00:34:05,200 --> 00:34:07,440
much time to to reverse the entire

739
00:34:07,440 --> 00:34:08,560
functionality

740
00:34:08,560 --> 00:34:12,159
so i decided to stop and because i

741
00:34:12,159 --> 00:34:14,000
already have a class

742
00:34:14,000 --> 00:34:17,520
uh this car message tracer that can

743
00:34:17,520 --> 00:34:20,719
place a log me look for me in a

744
00:34:20,719 --> 00:34:23,599
in this asl with a custom message i can

745
00:34:23,599 --> 00:34:24,800
just use this class

746
00:34:24,800 --> 00:34:27,679
and don't care about the actual

747
00:34:27,679 --> 00:34:30,320
underlining

748
00:34:30,320 --> 00:34:33,599
method so what we can do

749
00:34:33,599 --> 00:34:36,320
is use the yellow pen on this calendar

750
00:34:36,320 --> 00:34:37,199
foundation

751
00:34:37,199 --> 00:34:40,399
framework to load it use the

752
00:34:40,399 --> 00:34:44,719
objective c runtime to locate the class

753
00:34:44,719 --> 00:34:48,000
with the ns class from string and once

754
00:34:48,000 --> 00:34:49,520
we have that we can

755
00:34:49,520 --> 00:34:52,800
basically call its methods

756
00:34:52,800 --> 00:34:56,159
and place our custom lock message

757
00:34:56,159 --> 00:34:59,760
in this asl log and this worked

758
00:34:59,760 --> 00:35:01,760
i could place an arbitrary content in

759
00:35:01,760 --> 00:35:03,520
the log file

760
00:35:03,520 --> 00:35:06,640
but unfortunately i couldn't do more

761
00:35:06,640 --> 00:35:09,680
so even if i deleted this log file

762
00:35:09,680 --> 00:35:14,839
and i made my first

763
00:35:14,839 --> 00:35:17,359
log i i made my

764
00:35:17,359 --> 00:35:21,759
log entry the first in the log file

765
00:35:22,960 --> 00:35:26,320
it still had some headers and some other

766
00:35:26,320 --> 00:35:28,800
contents which

767
00:35:28,800 --> 00:35:33,520
would break any any useful stuff

768
00:35:33,520 --> 00:35:35,839
so it wasn't enough for good execution

769
00:35:35,839 --> 00:35:37,839
but i think it's still a useful tricar

770
00:35:37,839 --> 00:35:38,240
to

771
00:35:38,240 --> 00:35:41,359
inject uh content

772
00:35:41,359 --> 00:35:43,359
now the next one is finally like a

773
00:35:43,359 --> 00:35:45,680
full-blown privilege escalation not just

774
00:35:45,680 --> 00:35:48,079
arbitrary override it was in the adobe

775
00:35:48,079 --> 00:35:48,800
reader

776
00:35:48,800 --> 00:35:52,720
uh installer again uh

777
00:35:52,720 --> 00:35:55,680
the adobe reader used the acrobat update

778
00:35:55,680 --> 00:35:56,839
helper app

779
00:35:56,839 --> 00:36:00,960
um it's it was placed in the temp

780
00:36:00,960 --> 00:36:04,320
directory during the installation

781
00:36:04,320 --> 00:36:09,119
and there were two p list files

782
00:36:09,280 --> 00:36:11,520
inside this directory structure that

783
00:36:11,520 --> 00:36:12,400
later on

784
00:36:12,400 --> 00:36:14,560
voice were moved to the library launch

785
00:36:14,560 --> 00:36:16,240
daemons

786
00:36:16,240 --> 00:36:17,839
directory and it was in a fixed

787
00:36:17,839 --> 00:36:20,000
locations

788
00:36:20,000 --> 00:36:22,480
but before the installing happened the

789
00:36:22,480 --> 00:36:23,680
installer delete

790
00:36:23,680 --> 00:36:27,920
any existing files in from the temp

791
00:36:27,920 --> 00:36:30,560
directory

792
00:36:32,000 --> 00:36:35,599
with these names so what we can do

793
00:36:35,599 --> 00:36:38,000
is basically this is a race condition

794
00:36:38,000 --> 00:36:39,680
because adobe

795
00:36:39,680 --> 00:36:42,320
deleted the directory that it wanted to

796
00:36:42,320 --> 00:36:42,720
use

797
00:36:42,720 --> 00:36:46,160
and then recreated it now between these

798
00:36:46,160 --> 00:36:46,480
two

799
00:36:46,480 --> 00:36:50,960
we can create our directory again

800
00:36:50,960 --> 00:36:54,079
before it's being created by adobe

801
00:36:54,079 --> 00:36:57,200
which means that we will be the owner of

802
00:36:57,200 --> 00:36:57,920
the

803
00:36:57,920 --> 00:37:01,280
uh of the directory and

804
00:37:01,280 --> 00:37:04,000
i found that it's very easy to win this

805
00:37:04,000 --> 00:37:05,280
race condition

806
00:37:05,280 --> 00:37:07,680
so we can pre-create a directory

807
00:37:07,680 --> 00:37:09,520
structure

808
00:37:09,520 --> 00:37:12,320
and once the installer placed the

809
00:37:12,320 --> 00:37:14,320
original plist file

810
00:37:14,320 --> 00:37:16,400
uh in this location we can delete it

811
00:37:16,400 --> 00:37:18,160
because we own the directory

812
00:37:18,160 --> 00:37:21,839
and put there our own plist file and at

813
00:37:21,839 --> 00:37:23,040
the very end the

814
00:37:23,040 --> 00:37:25,839
installer will move the plist file into

815
00:37:25,839 --> 00:37:28,000
the launch daemon

816
00:37:28,000 --> 00:37:31,200
directory and basically it means that

817
00:37:31,200 --> 00:37:34,240
if we can move any plist file uh

818
00:37:34,240 --> 00:37:37,359
which we control to the launch demons

819
00:37:37,359 --> 00:37:39,760
we basically win because upon the next

820
00:37:39,760 --> 00:37:41,119
reboot

821
00:37:41,119 --> 00:37:44,079
uh the

822
00:37:44,160 --> 00:37:47,520
launch dv will start uh any process

823
00:37:47,520 --> 00:37:51,839
defined in this plist file as root

824
00:37:55,359 --> 00:37:58,079
so the last bug i want to talk about is

825
00:37:58,079 --> 00:37:59,920
the

826
00:37:59,920 --> 00:38:03,359
posing mac os concerning the periodic

827
00:38:03,359 --> 00:38:05,839
scripts

828
00:38:06,880 --> 00:38:09,680
mac os has a bunch of periodic

829
00:38:09,680 --> 00:38:11,040
maintenance scripts

830
00:38:11,040 --> 00:38:14,480
under the edc periodic

831
00:38:14,480 --> 00:38:19,599
directory and it used to have a

832
00:38:19,599 --> 00:38:23,520
script that repeated the the main pages

833
00:38:23,520 --> 00:38:25,920
basically or the not the main pages

834
00:38:25,920 --> 00:38:27,040
sorry the the main

835
00:38:27,040 --> 00:38:30,480
database and it was running as root

836
00:38:30,480 --> 00:38:35,040
now the problem was that it got all the

837
00:38:35,040 --> 00:38:38,000
main page parts parsed through all the

838
00:38:38,000 --> 00:38:40,079
main pages

839
00:38:40,079 --> 00:38:44,320
and created a database now

840
00:38:44,560 --> 00:38:47,280
if we have like blue package manager

841
00:38:47,280 --> 00:38:48,320
being used

842
00:38:48,320 --> 00:38:52,160
on the system uh the usr local share

843
00:38:52,160 --> 00:38:55,200
man directory is

844
00:38:55,200 --> 00:38:59,040
a user writable location

845
00:38:59,040 --> 00:39:02,480
and it was parsed

846
00:39:02,480 --> 00:39:05,599
by a process running as root and this is

847
00:39:05,599 --> 00:39:06,480
what we could

848
00:39:06,480 --> 00:39:10,000
uh abuse so what the

849
00:39:10,000 --> 00:39:12,480
make what is does it will create what is

850
00:39:12,480 --> 00:39:14,160
temp file

851
00:39:14,160 --> 00:39:17,280
for the database

852
00:39:17,280 --> 00:39:20,320
and we can redirect this uh

853
00:39:20,320 --> 00:39:23,920
temp five with a sim link and our target

854
00:39:23,920 --> 00:39:24,800
was

855
00:39:24,800 --> 00:39:28,400
again launch demons folder where we

856
00:39:28,400 --> 00:39:31,359
where i wanted to place a plist file

857
00:39:31,359 --> 00:39:34,000
but the problem was that the plist file

858
00:39:34,000 --> 00:39:36,400
in order to be loaded

859
00:39:36,400 --> 00:39:39,040
by launch d it has to be a properly

860
00:39:39,040 --> 00:39:42,800
formatted xml

861
00:39:42,800 --> 00:39:45,760
now if we look on the data on the what

862
00:39:45,760 --> 00:39:47,040
is database

863
00:39:47,040 --> 00:39:50,960
which is on the screen it's clearly

864
00:39:50,960 --> 00:39:55,599
nothing to do with xml it's basically

865
00:39:55,599 --> 00:39:58,640
a list that the first column is deleted

866
00:39:58,640 --> 00:39:59,359
by the

867
00:39:59,359 --> 00:40:02,640
from the file name of the man page

868
00:40:02,640 --> 00:40:05,200
and the second part after the dash is

869
00:40:05,200 --> 00:40:08,079
basically the name

870
00:40:08,079 --> 00:40:12,160
of the main file from the name section

871
00:40:12,160 --> 00:40:14,079
which comes from the main section of the

872
00:40:14,079 --> 00:40:15,599
of the main file

873
00:40:15,599 --> 00:40:19,599
now how do we convert this file to an

874
00:40:19,599 --> 00:40:21,520
xml file

875
00:40:21,520 --> 00:40:24,560
the first step

876
00:40:24,560 --> 00:40:27,520
created my plist file which i wanted to

877
00:40:27,520 --> 00:40:28,319
be run

878
00:40:28,319 --> 00:40:31,680
or loaded and

879
00:40:31,680 --> 00:40:36,240
i basically replaced the the name

880
00:40:36,240 --> 00:40:38,800
section or the actual name on the man

881
00:40:38,800 --> 00:40:40,400
page

882
00:40:40,400 --> 00:40:43,599
to this xml and

883
00:40:43,599 --> 00:40:47,280
i run the make what is

884
00:40:47,280 --> 00:40:51,040
tool and it was nice because this xml

885
00:40:51,040 --> 00:40:53,839
showed up in the

886
00:40:54,640 --> 00:40:58,480
database the pro the problem was still

887
00:40:58,480 --> 00:40:58,960
that

888
00:40:58,960 --> 00:41:01,359
there were a bunch of content after that

889
00:41:01,359 --> 00:41:03,359
and before that

890
00:41:03,359 --> 00:41:06,000
now to solve anything comes after we can

891
00:41:06,000 --> 00:41:06,800
just start

892
00:41:06,800 --> 00:41:10,079
an xml comment and basically that we

893
00:41:10,079 --> 00:41:12,079
comment out all the rest of the

894
00:41:12,079 --> 00:41:14,960
of the file uh i still needed to solve

895
00:41:14,960 --> 00:41:16,720
the the beginning

896
00:41:16,720 --> 00:41:20,079
of the file

897
00:41:20,079 --> 00:41:24,240
uh you can skip this so

898
00:41:24,240 --> 00:41:26,959
the file name

899
00:41:29,599 --> 00:41:31,839
is the is really the first string that

900
00:41:31,839 --> 00:41:32,960
will be

901
00:41:32,960 --> 00:41:36,400
shown in the in the men

902
00:41:36,400 --> 00:41:39,200
page database and it has to make sense

903
00:41:39,200 --> 00:41:40,640
in xml

904
00:41:40,640 --> 00:41:44,800
now interestingly the the file name that

905
00:41:44,800 --> 00:41:47,440
you can see on the screen with thread

906
00:41:47,440 --> 00:41:48,160
red

907
00:41:48,160 --> 00:41:50,560
is a valid file name which is really

908
00:41:50,560 --> 00:41:52,480
nice because that's a

909
00:41:52,480 --> 00:41:54,640
start of the command in xml so it makes

910
00:41:54,640 --> 00:41:56,079
sense in xml

911
00:41:56,079 --> 00:41:59,440
and that's a valid file name

912
00:42:00,880 --> 00:42:02,960
i had to go back to the name section

913
00:42:02,960 --> 00:42:05,040
because if the file name is starting as

914
00:42:05,040 --> 00:42:06,319
a comment

915
00:42:06,319 --> 00:42:10,240
i need to close that comment before my

916
00:42:10,240 --> 00:42:12,479
uh

917
00:42:13,680 --> 00:42:17,520
plist file or before my

918
00:42:17,520 --> 00:42:20,240
content that i want to be loaded by

919
00:42:20,240 --> 00:42:22,720
launch d starts

920
00:42:22,720 --> 00:42:25,599
which was just pretty easy adding a

921
00:42:25,599 --> 00:42:26,960
close comment

922
00:42:26,960 --> 00:42:30,640
of the file and finally

923
00:42:30,640 --> 00:42:34,960
this is how the man database started

924
00:42:34,960 --> 00:42:36,800
so we can see that there is the file

925
00:42:36,800 --> 00:42:39,359
name at the very beginning which is

926
00:42:39,359 --> 00:42:42,480
a comment basically starting

927
00:42:42,480 --> 00:42:44,720
and then there is a second part which is

928
00:42:44,720 --> 00:42:46,640
coming from the name section so we have

929
00:42:46,640 --> 00:42:48,720
a comment at the very beginning of the

930
00:42:48,720 --> 00:42:49,440
file

931
00:42:49,440 --> 00:42:51,839
then we have our properly formatted

932
00:42:51,839 --> 00:42:52,960
plist

933
00:42:52,960 --> 00:42:54,720
and then we have another command

934
00:42:54,720 --> 00:42:57,040
starting so this was a

935
00:42:57,040 --> 00:43:02,319
perfect xml and it was heavily loaded by

936
00:43:02,319 --> 00:43:06,079
launch d so let's

937
00:43:06,079 --> 00:43:13,440
see this in action

938
00:43:13,440 --> 00:43:15,680
oh

939
00:43:17,680 --> 00:43:20,319
this worked

940
00:43:21,440 --> 00:43:25,040
so it is the i'm in the

941
00:43:25,040 --> 00:43:30,640
main page for the usl local chairman

942
00:43:30,640 --> 00:43:34,879
and this is where the sim link will be

943
00:43:38,839 --> 00:43:40,960
loaded

944
00:43:40,960 --> 00:43:45,280
let's go to my desktop

945
00:43:45,280 --> 00:43:48,720
and do run the

946
00:43:48,720 --> 00:43:51,359
exploit

947
00:43:51,760 --> 00:43:54,800
there are two options to run this i will

948
00:43:54,800 --> 00:43:56,000
choose the

949
00:43:56,000 --> 00:43:58,880
click one which will place a plist file

950
00:43:58,880 --> 00:44:02,079
with starting terminal

951
00:44:02,560 --> 00:44:07,520
so it created the file which

952
00:44:07,680 --> 00:44:11,520
is here it plays the steam link

953
00:44:11,599 --> 00:44:15,440
we can check that we have the sim link

954
00:44:15,920 --> 00:44:19,520
pointing to launch demons

955
00:44:20,839 --> 00:44:23,359
and we can

956
00:44:23,359 --> 00:44:26,240
simulate running the the maintenance

957
00:44:26,240 --> 00:44:26,800
street now

958
00:44:26,800 --> 00:44:29,200
the maintenance scripts run on a weekly

959
00:44:29,200 --> 00:44:30,000
basis

960
00:44:30,000 --> 00:44:32,800
obviously i don't want to wait a week

961
00:44:32,800 --> 00:44:34,640
now so we can just

962
00:44:34,640 --> 00:44:37,839
simulate its run

963
00:44:43,680 --> 00:44:46,960
and now if we check

964
00:44:47,920 --> 00:44:51,839
this file

965
00:44:54,880 --> 00:44:57,760
we can see that

966
00:44:58,160 --> 00:45:01,280
we have the xml command at the beginning

967
00:45:01,280 --> 00:45:04,640
we have our pvs file after it

968
00:45:04,640 --> 00:45:08,960
and then we comment out the

969
00:45:08,960 --> 00:45:18,400
rest of it and basically we can

970
00:45:18,400 --> 00:45:33,839
the attibute oops

971
00:45:38,880 --> 00:45:42,160
and yeah we have a terminal

972
00:45:42,160 --> 00:45:44,880
popping up as root but unfortunately

973
00:45:44,880 --> 00:45:45,440
it's not

974
00:45:45,440 --> 00:45:48,480
always coming

975
00:45:48,480 --> 00:46:01,119
up properly

976
00:46:01,119 --> 00:46:15,200
to the screen

977
00:46:15,200 --> 00:46:29,839
but let's go to

978
00:46:34,880 --> 00:46:37,920
terminal and

979
00:46:39,280 --> 00:46:41,280
you can see that there is a terminal

980
00:46:41,280 --> 00:46:44,160
running as root

981
00:46:44,319 --> 00:46:46,640
sometimes it doesn't show up properly

982
00:46:46,640 --> 00:46:48,879
but

983
00:46:55,680 --> 00:46:58,960
you can see that if i load

984
00:46:58,960 --> 00:47:01,839
this p list

985
00:47:03,040 --> 00:47:06,160
terminal is coming up

986
00:47:06,160 --> 00:47:11,680
obviously because this is a live demo it

987
00:47:11,680 --> 00:47:15,440
doesn't work right but anyway this is

988
00:47:15,440 --> 00:47:15,920
how it

989
00:47:15,920 --> 00:47:18,160
works

990
00:47:20,160 --> 00:47:25,839
so lastly how we can avoid these attacks

991
00:47:26,800 --> 00:47:29,040
with installer regarding installers

992
00:47:29,040 --> 00:47:30,880
basically

993
00:47:30,880 --> 00:47:32,880
if you need to use the temp directory

994
00:47:32,880 --> 00:47:34,880
just use a random name that cannot be

995
00:47:34,880 --> 00:47:36,800
predicted

996
00:47:36,800 --> 00:47:38,640
or if you really don't want to use a

997
00:47:38,640 --> 00:47:41,520
random name but the predefined name

998
00:47:41,520 --> 00:47:44,240
then do these steps create a directory

999
00:47:44,240 --> 00:47:45,440
set the permissions

1000
00:47:45,440 --> 00:47:48,400
to be owned by root only and no one else

1001
00:47:48,400 --> 00:47:48,960
has any

1002
00:47:48,960 --> 00:47:51,440
right access to it clean up the

1003
00:47:51,440 --> 00:47:53,760
directory and then you can start using

1004
00:47:53,760 --> 00:47:57,040
it because then no one else can place

1005
00:47:57,040 --> 00:48:00,480
any content inside it

1006
00:48:00,480 --> 00:48:04,319
a move operation is also

1007
00:48:04,319 --> 00:48:07,440
safe so if you move a file one file to

1008
00:48:07,440 --> 00:48:10,960
a specific location if that place is a

1009
00:48:10,960 --> 00:48:12,240
sim link

1010
00:48:12,240 --> 00:48:13,839
where you move that file it will be

1011
00:48:13,839 --> 00:48:15,520
overwritten

1012
00:48:15,520 --> 00:48:19,280
by the move operation and in objective c

1013
00:48:19,280 --> 00:48:22,800
if you use the write to file method

1014
00:48:22,800 --> 00:48:26,160
of values classes like an s string

1015
00:48:26,160 --> 00:48:29,359
it will not follow symlinks it will just

1016
00:48:29,359 --> 00:48:31,200
overwrite

1017
00:48:31,200 --> 00:48:33,280
what is there so it's like a safe

1018
00:48:33,280 --> 00:48:34,720
function

1019
00:48:34,720 --> 00:48:38,400
or method to use so

1020
00:48:38,400 --> 00:48:41,599
that was all from me thank you very much

1021
00:48:41,599 --> 00:48:42,160
for

1022
00:48:42,160 --> 00:48:47,359
for listening

