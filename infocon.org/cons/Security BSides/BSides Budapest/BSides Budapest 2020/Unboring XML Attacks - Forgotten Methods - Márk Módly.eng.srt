1
00:00:00,719 --> 00:00:03,439
hi everyone my topic today is xml

2
00:00:03,439 --> 00:00:04,640
attacks on boring

3
00:00:04,640 --> 00:00:08,160
and the lost methods so

4
00:00:08,160 --> 00:00:11,120
uh in the most recent years a lot of

5
00:00:11,120 --> 00:00:12,880
eczema related problems

6
00:00:12,880 --> 00:00:15,920
came to the daylight i think this is

7
00:00:15,920 --> 00:00:17,440
partly because

8
00:00:17,440 --> 00:00:21,119
the most recent overs top 10 contains

9
00:00:21,119 --> 00:00:24,880
xxe and a lot of applications are tested

10
00:00:24,880 --> 00:00:26,240
against

11
00:00:26,240 --> 00:00:29,359
only this list sadly to include this

12
00:00:29,359 --> 00:00:30,480
vulnerability

13
00:00:30,480 --> 00:00:33,840
is uh quite great

14
00:00:33,840 --> 00:00:36,320
but there is room for improvement in the

15
00:00:36,320 --> 00:00:39,040
way we do it i think

16
00:00:39,040 --> 00:00:41,200
in the following few minutes i try to

17
00:00:41,200 --> 00:00:42,320
share some

18
00:00:42,320 --> 00:00:45,280
information to achieve this goal i mean

19
00:00:45,280 --> 00:00:45,920
the

20
00:00:45,920 --> 00:00:48,800
improvement uh the methods and

21
00:00:48,800 --> 00:00:50,640
techniques shared here are not

22
00:00:50,640 --> 00:00:54,559
the result of my greatness but

23
00:00:54,559 --> 00:00:57,600
the forgotten or not well utilized

24
00:00:57,600 --> 00:01:01,359
past discoveries this is because as i

25
00:01:01,359 --> 00:01:03,680
started to dive deep in the topic a

26
00:01:03,680 --> 00:01:04,479
while ago

27
00:01:04,479 --> 00:01:07,040
i realized that most of the areas i was

28
00:01:07,040 --> 00:01:08,799
facing were basically

29
00:01:08,799 --> 00:01:12,799
already documented and those were sadly

30
00:01:12,799 --> 00:01:14,560
rarely used so

31
00:01:14,560 --> 00:01:18,240
i hope that this will uh improve on that

32
00:01:18,240 --> 00:01:20,960
uh we will see that testing is way more

33
00:01:20,960 --> 00:01:23,520
interesting than just getting the slash

34
00:01:23,520 --> 00:01:27,759
dc slash sw file in case of a successful

35
00:01:27,759 --> 00:01:29,280
attack

36
00:01:29,280 --> 00:01:32,400
i hope that the majority of us will

37
00:01:32,400 --> 00:01:34,159
implement some of these tips

38
00:01:34,159 --> 00:01:38,159
in the future so

39
00:01:38,159 --> 00:01:40,400
this could be utilized for example in a

40
00:01:40,400 --> 00:01:42,159
bug bounty program or something like

41
00:01:42,159 --> 00:01:42,960
that

42
00:01:42,960 --> 00:01:46,399
as some introduction is always mandatory

43
00:01:46,399 --> 00:01:49,680
uh i am mark moodley and i love to teach

44
00:01:49,680 --> 00:01:53,040
and make systems better but i

45
00:01:53,040 --> 00:01:55,759
do not really would like to waste time

46
00:01:55,759 --> 00:01:56,960
on myself

47
00:01:56,960 --> 00:01:58,960
uh in case anyone is interested in

48
00:01:58,960 --> 00:02:00,399
having a chat with me

49
00:02:00,399 --> 00:02:03,439
i'm happy to do so uh but they should

50
00:02:03,439 --> 00:02:03,920
wait

51
00:02:03,920 --> 00:02:06,240
uh for the end of the talk and my email

52
00:02:06,240 --> 00:02:08,479
address will be shared there if they are

53
00:02:08,479 --> 00:02:09,440
still not

54
00:02:09,440 --> 00:02:12,480
convinced to avoid me uh just a quick

55
00:02:12,480 --> 00:02:13,360
shout out

56
00:02:13,360 --> 00:02:16,480
uh for the guys at the hungarian podcast

57
00:02:16,480 --> 00:02:17,040
called

58
00:02:17,040 --> 00:02:19,680
hackish language as one of the main

59
00:02:19,680 --> 00:02:20,879
reasons i am

60
00:02:20,879 --> 00:02:23,760
sharing this is because they had a great

61
00:02:23,760 --> 00:02:24,800
episode

62
00:02:24,800 --> 00:02:28,879
uh with otila morochi uh i guess

63
00:02:28,879 --> 00:02:32,400
uh in which they gave me the motivation

64
00:02:32,400 --> 00:02:34,080
to do this

65
00:02:34,080 --> 00:02:37,599
but do not blame them uh if my uh

66
00:02:37,599 --> 00:02:40,879
performance is not top notch or or the

67
00:02:40,879 --> 00:02:44,400
topic is evident for everyone and by the

68
00:02:44,400 --> 00:02:44,800
way

69
00:02:44,800 --> 00:02:47,040
at the end i will reveal what the

70
00:02:47,040 --> 00:02:49,040
underlying reason is for

71
00:02:49,040 --> 00:02:53,200
yoda's unusual speech patterns

72
00:02:53,200 --> 00:02:57,200
so i guess this was way more than i

73
00:02:57,200 --> 00:02:58,000
wanted to

74
00:02:58,000 --> 00:03:01,280
share or say about myself so let's get

75
00:03:01,280 --> 00:03:04,159
to the content itself

76
00:03:04,159 --> 00:03:08,159
history i know that this isn't

77
00:03:08,159 --> 00:03:12,399
a favorite topic of anyone but

78
00:03:12,480 --> 00:03:14,560
as the somewhat online nature of the

79
00:03:14,560 --> 00:03:17,040
conference

80
00:03:17,040 --> 00:03:21,360
prevents me from uh

81
00:03:21,360 --> 00:03:24,319
getting some feedback on the age of the

82
00:03:24,319 --> 00:03:25,440
audience

83
00:03:25,440 --> 00:03:27,760
i think it is better to mention some

84
00:03:27,760 --> 00:03:29,599
artifacts from the past

85
00:03:29,599 --> 00:03:32,720
that we still carry today

86
00:03:32,720 --> 00:03:36,000
i was lucky or unlucky enough depends on

87
00:03:36,000 --> 00:03:36,879
the

88
00:03:36,879 --> 00:03:40,560
aspect to see the hungarian

89
00:03:40,560 --> 00:03:44,000
internet and web grow and evolve

90
00:03:44,000 --> 00:03:48,159
into well something and slowly catching

91
00:03:48,159 --> 00:03:48,640
up

92
00:03:48,640 --> 00:03:51,760
uh with the global leaders or standards

93
00:03:51,760 --> 00:03:52,560
of the

94
00:03:52,560 --> 00:03:56,159
uh web i hope and uh from that journey

95
00:03:56,159 --> 00:03:59,519
there are some points uh to take with us

96
00:03:59,519 --> 00:04:01,840
i think

97
00:04:04,720 --> 00:04:09,200
so let's talk uh about the origins

98
00:04:09,200 --> 00:04:12,799
uh in case uh we have not heard about

99
00:04:12,799 --> 00:04:16,000
it sgml is a framework which

100
00:04:16,000 --> 00:04:19,519
helps us describe markup languages like

101
00:04:19,519 --> 00:04:20,959
the hopefully well known

102
00:04:20,959 --> 00:04:25,199
html and xml as well

103
00:04:25,199 --> 00:04:28,320
in some cases we could

104
00:04:28,320 --> 00:04:32,160
still remember the not so good old days

105
00:04:32,160 --> 00:04:34,320
when the sites we were visiting

106
00:04:34,320 --> 00:04:37,840
were not able to be displayed

107
00:04:37,840 --> 00:04:41,040
as intended and

108
00:04:41,040 --> 00:04:43,120
there was kind of an anarchy how things

109
00:04:43,120 --> 00:04:45,040
were interpreted

110
00:04:45,040 --> 00:04:48,320
and implemented in many ways

111
00:04:48,320 --> 00:04:52,160
and i think all of this was rooted

112
00:04:52,160 --> 00:04:55,120
uh deeply in the markup language itself

113
00:04:55,120 --> 00:04:55,680
i mean

114
00:04:55,680 --> 00:04:59,759
html with the early versions before 4.0

115
00:04:59,759 --> 00:05:03,759
uh i think uh but we are still using

116
00:05:03,759 --> 00:05:04,560
these

117
00:05:04,560 --> 00:05:08,160
uh levels or

118
00:05:08,160 --> 00:05:11,520
or versions of this

119
00:05:11,520 --> 00:05:14,639
language so we still carry on

120
00:05:14,639 --> 00:05:18,080
with these legacies uh not only the user

121
00:05:18,080 --> 00:05:19,520
experience was

122
00:05:19,520 --> 00:05:22,720
questionable but

123
00:05:22,720 --> 00:05:26,000
because of this nature of

124
00:05:26,000 --> 00:05:29,199
the html uh

125
00:05:29,199 --> 00:05:32,479
more mechanical and architectural

126
00:05:32,479 --> 00:05:36,080
and reliability problems arose

127
00:05:36,080 --> 00:05:39,360
uh from this ambiguity

128
00:05:39,360 --> 00:05:41,759
there was actually a case when a

129
00:05:41,759 --> 00:05:44,160
hungarian web developer forum

130
00:05:44,160 --> 00:05:48,639
uh labor uh yeah that was way way before

131
00:05:48,639 --> 00:05:53,199
a stack overflow uh had a post

132
00:05:53,199 --> 00:05:56,240
where the most accepted answer suggested

133
00:05:56,240 --> 00:05:56,720
to

134
00:05:56,720 --> 00:06:00,479
implement price management based

135
00:06:00,479 --> 00:06:04,319
on exchange rate scraped

136
00:06:04,319 --> 00:06:07,759
from a big bank's website uh the example

137
00:06:07,759 --> 00:06:08,800
provided was

138
00:06:08,800 --> 00:06:11,199
basically a regular expression it was

139
00:06:11,199 --> 00:06:12,160
working

140
00:06:12,160 --> 00:06:14,639
uh just because the html wasn't changed

141
00:06:14,639 --> 00:06:15,759
in a while

142
00:06:15,759 --> 00:06:18,080
uh everyone seemed to be happy and

143
00:06:18,080 --> 00:06:18,800
things

144
00:06:18,800 --> 00:06:23,360
were all right i guess uh until one day

145
00:06:23,360 --> 00:06:27,120
as all of the tale uh tales start

146
00:06:27,120 --> 00:06:30,720
the bank redesigned uh its web page

147
00:06:30,720 --> 00:06:33,360
uh as you can imagine all hell broke

148
00:06:33,360 --> 00:06:34,960
loose so

149
00:06:34,960 --> 00:06:38,080
some web shops were offering uh items

150
00:06:38,080 --> 00:06:39,280
priced with a

151
00:06:39,280 --> 00:06:41,600
really customer friendly uh zero

152
00:06:41,600 --> 00:06:43,360
hungarian foreign

153
00:06:43,360 --> 00:06:48,000
uh the better implemented ones um

154
00:06:48,000 --> 00:06:51,120
basically said that no item is

155
00:06:51,120 --> 00:06:54,479
purchasable at the moment so uh that was

156
00:06:54,479 --> 00:06:55,840
quite a mess

157
00:06:55,840 --> 00:06:59,360
uh and the wholesome part of the story

158
00:06:59,360 --> 00:07:02,560
is that the bank held out uh the

159
00:07:02,560 --> 00:07:04,240
developers so

160
00:07:04,240 --> 00:07:07,919
uh the bank put the html structure

161
00:07:07,919 --> 00:07:11,520
back for a while uh in order uh to give

162
00:07:11,520 --> 00:07:13,440
some time to the developers so

163
00:07:13,440 --> 00:07:16,800
they could adapt to an

164
00:07:16,800 --> 00:07:19,759
officially supported interface as far as

165
00:07:19,759 --> 00:07:22,160
i remember

166
00:07:22,160 --> 00:07:26,000
i hope that this little tale uh

167
00:07:26,000 --> 00:07:28,639
highlights the necessity having

168
00:07:28,639 --> 00:07:31,440
documents which are well formatted

169
00:07:31,440 --> 00:07:33,680
obsoleting regular expressions to get

170
00:07:33,680 --> 00:07:35,120
some information from

171
00:07:35,120 --> 00:07:38,560
sites and of course uh the structure of

172
00:07:38,560 --> 00:07:40,800
the documents needs to be verified or

173
00:07:40,800 --> 00:07:44,319
validated against of some kind of

174
00:07:44,319 --> 00:07:47,440
description as well so uh

175
00:07:47,440 --> 00:07:51,440
those were the i guess the first drivers

176
00:07:51,440 --> 00:07:52,080
of

177
00:07:52,080 --> 00:07:55,759
creating xml i i think uh

178
00:07:55,759 --> 00:07:59,199
it is one of the modern days

179
00:07:59,199 --> 00:08:02,960
7 wonder uh so xml was

180
00:08:02,960 --> 00:08:06,000
so well created or is so well created

181
00:08:06,000 --> 00:08:06,639
that

182
00:08:06,639 --> 00:08:09,919
in the past 25 years or something

183
00:08:09,919 --> 00:08:13,680
there was no hard need to redesign it

184
00:08:13,680 --> 00:08:14,639
completely

185
00:08:14,639 --> 00:08:17,680
i think uh utf-8 is the standard that

186
00:08:17,680 --> 00:08:19,120
could become

187
00:08:19,120 --> 00:08:22,160
uh could be a competitor for it

188
00:08:22,160 --> 00:08:24,720
at least but character encodings and

189
00:08:24,720 --> 00:08:26,319
hacking regarding that

190
00:08:26,319 --> 00:08:29,360
is on all uh another topic

191
00:08:29,360 --> 00:08:32,640
itself so that would be a great

192
00:08:32,640 --> 00:08:36,559
topic maybe i will present it later

193
00:08:36,559 --> 00:08:39,279
but back to the topic later as the

194
00:08:39,279 --> 00:08:41,360
internet user base was growing and

195
00:08:41,360 --> 00:08:42,640
everyone wanted to

196
00:08:42,640 --> 00:08:45,760
uh look and feel uh

197
00:08:45,760 --> 00:08:49,200
the same in each and every browser uh

198
00:08:49,200 --> 00:08:51,760
the worldwide web concert zoom came up

199
00:08:51,760 --> 00:08:52,640
uh

200
00:08:52,640 --> 00:08:56,000
with a great idea what should we do uh

201
00:08:56,000 --> 00:08:58,959
and how to solve this problem so they

202
00:08:58,959 --> 00:08:59,760
came up with

203
00:08:59,760 --> 00:09:03,200
well we kind of like xml we kind of like

204
00:09:03,200 --> 00:09:06,839
html so they came out we came up with

205
00:09:06,839 --> 00:09:08,240
xhtml

206
00:09:08,240 --> 00:09:11,839
uh what nobody likes basically

207
00:09:11,839 --> 00:09:15,680
uh i i never

208
00:09:15,680 --> 00:09:18,720
understood why anyone would think that

209
00:09:18,720 --> 00:09:21,839
developers will start to write good

210
00:09:21,839 --> 00:09:23,680
markup

211
00:09:23,680 --> 00:09:27,120
language based documents and

212
00:09:27,120 --> 00:09:31,040
create well good

213
00:09:31,040 --> 00:09:34,800
sites when they could continue with the

214
00:09:34,800 --> 00:09:37,120
crappy solution of the past because of

215
00:09:37,120 --> 00:09:38,959
backwards compatibility

216
00:09:38,959 --> 00:09:42,000
uh and that was another point

217
00:09:42,000 --> 00:09:45,600
where xml xhtml

218
00:09:45,600 --> 00:09:49,279
failed miserably because it provided

219
00:09:49,279 --> 00:09:52,320
zero backwards compatibility uh

220
00:09:52,320 --> 00:09:55,440
actually xhtml died but

221
00:09:55,440 --> 00:09:58,880
our beloved xml previewed

222
00:09:58,880 --> 00:10:01,360
uh don't get me wrong i really like to

223
00:10:01,360 --> 00:10:02,480
use

224
00:10:02,480 --> 00:10:05,519
xml itself but i think

225
00:10:05,519 --> 00:10:08,640
we are re using it really wrong so not

226
00:10:08,640 --> 00:10:10,240
the tool is bad

227
00:10:10,240 --> 00:10:13,600
uh we are just misusing it

228
00:10:13,600 --> 00:10:17,120
i think so uh why is

229
00:10:17,120 --> 00:10:20,640
xml so interesting in a hacker

230
00:10:20,640 --> 00:10:22,079
conference

231
00:10:22,079 --> 00:10:25,440
as one of the best if not the best

232
00:10:25,440 --> 00:10:27,839
uh constructed markup language in

233
00:10:27,839 --> 00:10:29,040
history

234
00:10:29,040 --> 00:10:32,560
uh it is used in a lot a lot of

235
00:10:32,560 --> 00:10:34,160
specification

236
00:10:34,160 --> 00:10:37,760
and as a standard

237
00:10:37,760 --> 00:10:41,040
even the handling is standardized

238
00:10:41,040 --> 00:10:44,240
so uh if he could exploit

239
00:10:44,240 --> 00:10:48,000
a behavior in one

240
00:10:48,000 --> 00:10:51,440
site basically we could exploit

241
00:10:51,440 --> 00:10:55,600
uh regardless of what language

242
00:10:55,600 --> 00:10:58,800
it is implemented in so i

243
00:10:58,800 --> 00:11:01,760
do not need i do not really want to bore

244
00:11:01,760 --> 00:11:02,800
anyone

245
00:11:02,800 --> 00:11:06,320
uh with further more history although i

246
00:11:06,320 --> 00:11:09,920
really like uh how it turned out

247
00:11:09,920 --> 00:11:13,040
uh but uh i would like

248
00:11:13,040 --> 00:11:17,360
to restrict myself from now on

249
00:11:17,360 --> 00:11:20,640
to technical details and solutions so uh

250
00:11:20,640 --> 00:11:23,920
let's jump to the most

251
00:11:23,920 --> 00:11:27,440
known i guess xml attack

252
00:11:27,440 --> 00:11:32,720
the xml external entity attack

253
00:11:32,720 --> 00:11:36,480
well previously i mentioned that

254
00:11:36,480 --> 00:11:40,560
there was a need or or there was

255
00:11:40,560 --> 00:11:43,600
something a driver force

256
00:11:43,600 --> 00:11:46,959
that we wanted to validate or documents

257
00:11:46,959 --> 00:11:50,079
meaning that we want to ensure that the

258
00:11:50,079 --> 00:11:51,040
structure

259
00:11:51,040 --> 00:11:54,800
is is a predefined one for example

260
00:11:54,800 --> 00:11:58,320
and this is done mostly in two ways

261
00:11:58,320 --> 00:12:03,279
one being the docty definition aka dtd

262
00:12:03,279 --> 00:12:06,720
and the other one is being the xml

263
00:12:06,720 --> 00:12:08,399
schema definition

264
00:12:08,399 --> 00:12:11,600
autoboost could be abused and this

265
00:12:11,600 --> 00:12:12,240
talk's

266
00:12:12,240 --> 00:12:16,480
focus will be the uh dtd part of it

267
00:12:16,480 --> 00:12:21,600
so uh what is the most and

268
00:12:21,839 --> 00:12:25,760
well-known attack of

269
00:12:25,760 --> 00:12:29,440
eczema so

270
00:12:29,440 --> 00:12:32,000
i'd really love to see how many of us is

271
00:12:32,000 --> 00:12:34,240
comfortable with dtd

272
00:12:34,240 --> 00:12:36,880
by raise of hand but i assumed a quick

273
00:12:36,880 --> 00:12:40,959
summary is not against anyone's wheel

274
00:12:40,959 --> 00:12:43,040
of course the online nature prevents me

275
00:12:43,040 --> 00:12:45,440
to do so so i need to get through this

276
00:12:45,440 --> 00:12:46,720
part as well

277
00:12:46,720 --> 00:12:49,839
so in the xml document we could create a

278
00:12:49,839 --> 00:12:53,440
section or reference document as well

279
00:12:53,440 --> 00:12:56,000
which is used to validate the structure

280
00:12:56,000 --> 00:12:57,279
of the markup

281
00:12:57,279 --> 00:13:00,639
uh data types uh the structure of the

282
00:13:00,639 --> 00:13:01,360
tags

283
00:13:01,360 --> 00:13:04,959
are related to itself and so on

284
00:13:04,959 --> 00:13:07,279
uh for the document it is also a

285
00:13:07,279 --> 00:13:08,639
requirement uh

286
00:13:08,639 --> 00:13:12,560
to be uh well formatted so

287
00:13:12,560 --> 00:13:15,839
the dtd check could be uh done after

288
00:13:15,839 --> 00:13:18,639
uh the document is uh checked for uh

289
00:13:18,639 --> 00:13:20,480
being well formatted

290
00:13:20,480 --> 00:13:24,720
so we are able to do here a lot of

291
00:13:24,720 --> 00:13:26,079
things in here

292
00:13:26,079 --> 00:13:29,440
and besides

293
00:13:29,440 --> 00:13:32,480
the document

294
00:13:32,720 --> 00:13:36,240
model basically we could create also

295
00:13:36,240 --> 00:13:39,279
entities and those could be simple text

296
00:13:39,279 --> 00:13:39,839
ones

297
00:13:39,839 --> 00:13:43,760
and there could be a little extra

298
00:13:43,760 --> 00:13:46,639
which is a most of the attitudes are

299
00:13:46,639 --> 00:13:48,399
relaying on

300
00:13:48,399 --> 00:13:53,120
so behold the external entity uh

301
00:13:53,120 --> 00:13:56,240
for for a long time i had no idea why

302
00:13:56,240 --> 00:13:57,040
anyone

303
00:13:57,040 --> 00:14:00,320
uh mindful would design something like

304
00:14:00,320 --> 00:14:01,519
that but

305
00:14:01,519 --> 00:14:04,720
as i was researching this i came across

306
00:14:04,720 --> 00:14:07,920
some applications that used uh

307
00:14:07,920 --> 00:14:11,120
disk technology to uh store

308
00:14:11,120 --> 00:14:13,600
environment specific variables so i

309
00:14:13,600 --> 00:14:14,560
think it could be

310
00:14:14,560 --> 00:14:18,720
okay but only as an additional feature

311
00:14:18,720 --> 00:14:22,480
um yeah so i mentioned the hackish

312
00:14:22,480 --> 00:14:23,120
language

313
00:14:23,120 --> 00:14:27,600
guys uh they were one reason why i give

314
00:14:27,600 --> 00:14:29,120
this talk

315
00:14:29,120 --> 00:14:32,480
and the second reason i really

316
00:14:32,480 --> 00:14:34,560
wanted to give this talk is that i

317
00:14:34,560 --> 00:14:36,560
really like to play ctf

318
00:14:36,560 --> 00:14:39,680
and by that i do not exclusively refer

319
00:14:39,680 --> 00:14:40,000
to

320
00:14:40,000 --> 00:14:43,040
the unreal tournament game mode but also

321
00:14:43,040 --> 00:14:44,000
the i.t security

322
00:14:44,000 --> 00:14:47,519
competitions as well and sadly

323
00:14:47,519 --> 00:14:50,800
i do not have a lot of time to do so

324
00:14:50,800 --> 00:14:54,160
so i'm always a bit disappointed

325
00:14:54,160 --> 00:14:57,360
than an xml ex challenge

326
00:14:57,360 --> 00:15:01,040
uh is marked hard

327
00:15:01,040 --> 00:15:04,320
and the solution is basically uh

328
00:15:04,320 --> 00:15:07,199
the same as uh this little example on

329
00:15:07,199 --> 00:15:08,480
the screen

330
00:15:08,480 --> 00:15:12,639
uh of course uh

331
00:15:12,639 --> 00:15:16,160
it is dressed in in different

332
00:15:16,160 --> 00:15:19,600
shapes or or addresses every time

333
00:15:19,600 --> 00:15:23,839
but it is still kind of a letdown for me

334
00:15:23,839 --> 00:15:26,639
when when the changes or the challenge

335
00:15:26,639 --> 00:15:27,360
itself

336
00:15:27,360 --> 00:15:30,560
is five lines

337
00:15:30,560 --> 00:15:33,600
and that's all and i wanted to make

338
00:15:33,600 --> 00:15:35,040
another shout out

339
00:15:35,040 --> 00:15:38,000
uh to the hungarian party participants

340
00:15:38,000 --> 00:15:39,120
um

341
00:15:39,120 --> 00:15:42,240
please play ctf games

342
00:15:42,240 --> 00:15:46,160
join ctftime.org and play ctf games

343
00:15:46,160 --> 00:15:48,959
uh i am the only semi active member of

344
00:15:48,959 --> 00:15:49,279
the

345
00:15:49,279 --> 00:15:51,880
hardcore iit team which has not

346
00:15:51,880 --> 00:15:55,120
participated in a challenge

347
00:15:55,120 --> 00:15:58,240
in like three months or something this

348
00:15:58,240 --> 00:15:58,880
year

349
00:15:58,880 --> 00:16:02,639
so there was like two active months

350
00:16:02,639 --> 00:16:03,680
where we played

351
00:16:03,680 --> 00:16:06,720
and we are still placed in uh

352
00:16:06,720 --> 00:16:10,240
fifth uh i think uh

353
00:16:10,240 --> 00:16:13,680
in the hungarian uh country so shame on

354
00:16:13,680 --> 00:16:14,399
us

355
00:16:14,399 --> 00:16:18,079
are joined to play and

356
00:16:18,079 --> 00:16:21,680
let's do some ctf plays okay

357
00:16:21,680 --> 00:16:25,920
so on to the second

358
00:16:25,920 --> 00:16:28,959
most known xml based attacks

359
00:16:28,959 --> 00:16:33,839
i think yeah and it is denial of service

360
00:16:33,839 --> 00:16:37,040
i am sure that most of us heard about

361
00:16:37,040 --> 00:16:40,160
uh one really famous uh but let's

362
00:16:40,160 --> 00:16:43,839
ex but let's explore uh a little more on

363
00:16:43,839 --> 00:16:45,839
this particular topic

364
00:16:45,839 --> 00:16:49,360
topic so uh in a

365
00:16:49,360 --> 00:16:52,480
denial of service

366
00:16:52,480 --> 00:16:56,959
example or a denial of service um

367
00:16:56,959 --> 00:17:00,240
attack we could basically aim for three

368
00:17:00,240 --> 00:17:00,880
different

369
00:17:00,880 --> 00:17:04,720
things uh these are the most valuable

370
00:17:04,720 --> 00:17:08,240
uh resources in a computer and that is

371
00:17:08,240 --> 00:17:11,599
memory cpu and network uh

372
00:17:11,599 --> 00:17:14,959
sadly most bug bounty programs forbid

373
00:17:14,959 --> 00:17:17,039
those attacks but i have seen some

374
00:17:17,039 --> 00:17:18,000
progress in

375
00:17:18,000 --> 00:17:21,119
the most recent months so

376
00:17:21,119 --> 00:17:24,400
i i hope that in the

377
00:17:24,400 --> 00:17:29,520
future we will be able to utilize

378
00:17:29,520 --> 00:17:32,080
uh some real but forgotten techniques

379
00:17:32,080 --> 00:17:33,919
regarding to those

380
00:17:33,919 --> 00:17:36,559
so when i said that there is a

381
00:17:36,559 --> 00:17:37,200
well-known

382
00:17:37,200 --> 00:17:40,080
xml dos attack probably most of the

383
00:17:40,080 --> 00:17:40,960
audience

384
00:17:40,960 --> 00:17:44,960
uh showed uh about

385
00:17:44,960 --> 00:17:48,240
some reason overlook or memory uh

386
00:17:48,240 --> 00:17:51,679
overloading or overbooking uh which is

387
00:17:51,679 --> 00:17:52,320
not

388
00:17:52,320 --> 00:17:56,799
else than uh the billion laugh attack

389
00:17:56,799 --> 00:18:00,000
uh the only requirement for this attack

390
00:18:00,000 --> 00:18:03,280
is that the internal entity

391
00:18:03,280 --> 00:18:07,280
option for the dtd must be enabled it is

392
00:18:07,280 --> 00:18:09,840
really uh one of the cheapest solution

393
00:18:09,840 --> 00:18:10,400
to

394
00:18:10,400 --> 00:18:13,919
uh dos a given service as it requires

395
00:18:13,919 --> 00:18:15,039
basically

396
00:18:15,039 --> 00:18:18,480
uh only a few lines of input and

397
00:18:18,480 --> 00:18:21,679
its effects are quite remarkable uh

398
00:18:21,679 --> 00:18:24,720
one of the given example uh which we

399
00:18:24,720 --> 00:18:25,520
could see

400
00:18:25,520 --> 00:18:28,559
uh it consumes like three gigabytes of

401
00:18:28,559 --> 00:18:29,360
memory

402
00:18:29,360 --> 00:18:31,919
and this could be scaled up by either by

403
00:18:31,919 --> 00:18:32,960
changing the

404
00:18:32,960 --> 00:18:36,559
uh contents of the lower

405
00:18:36,559 --> 00:18:40,160
entity and uh the depths as well

406
00:18:40,160 --> 00:18:43,600
so uh it is quite an interesting one it

407
00:18:43,600 --> 00:18:43,919
is

408
00:18:43,919 --> 00:18:46,720
it uses the quadratic blow up uh it

409
00:18:46,720 --> 00:18:48,640
consumes a lot of memory

410
00:18:48,640 --> 00:18:51,280
uh which could be necessary for the

411
00:18:51,280 --> 00:18:52,480
application

412
00:18:52,480 --> 00:18:55,440
and reserves a huge amount of processing

413
00:18:55,440 --> 00:18:56,160
power

414
00:18:56,160 --> 00:18:59,760
uh in order to do so and it is called

415
00:18:59,760 --> 00:19:01,120
the billion love

416
00:19:01,120 --> 00:19:05,120
uh because uh this little lull

417
00:19:05,120 --> 00:19:08,320
or laugh out loud

418
00:19:08,320 --> 00:19:12,320
uh part is repeated uh i think 10 to the

419
00:19:12,320 --> 00:19:13,280
power of

420
00:19:13,280 --> 00:19:16,400
nine i i do not want to confuse

421
00:19:16,400 --> 00:19:18,799
yes 10 to the power of nine as i do not

422
00:19:18,799 --> 00:19:19,919
want to confuse

423
00:19:19,919 --> 00:19:23,200
uh with the uh long scale billion which

424
00:19:23,200 --> 00:19:24,160
is 10 to the power

425
00:19:24,160 --> 00:19:27,760
of 12

426
00:19:27,760 --> 00:19:30,240
i guess

427
00:19:32,160 --> 00:19:35,360
so yeah the billion laugh attack

428
00:19:35,360 --> 00:19:38,559
but let's let's just not hate xml

429
00:19:38,559 --> 00:19:41,200
if someone is happy that they are using

430
00:19:41,200 --> 00:19:42,480
yamo

431
00:19:42,480 --> 00:19:45,840
for configuration files i

432
00:19:45,840 --> 00:19:50,240
have some bad news for them as well so

433
00:19:50,240 --> 00:19:53,280
the attack is possible uh in

434
00:19:53,280 --> 00:19:56,480
some scenarios here as well but

435
00:19:56,480 --> 00:20:00,080
sorry uh for the uh of tracking

436
00:20:00,080 --> 00:20:03,280
uh get back to uh the

437
00:20:03,280 --> 00:20:07,520
memory based uh attacks

438
00:20:07,520 --> 00:20:11,520
what if we do not have the luxury

439
00:20:11,520 --> 00:20:16,320
that the dtd is enabled in a document

440
00:20:16,320 --> 00:20:20,559
basically uh we've got some tricks

441
00:20:20,559 --> 00:20:24,799
in our pocket to get through this

442
00:20:24,799 --> 00:20:27,440
situation as well and cause some trouble

443
00:20:27,440 --> 00:20:29,679
uh but those could be way more painful

444
00:20:29,679 --> 00:20:31,120
for the attacker

445
00:20:31,120 --> 00:20:34,640
to employ so basically we need to have

446
00:20:34,640 --> 00:20:36,080
more resources

447
00:20:36,080 --> 00:20:39,039
dedicated for that attack a lesser known

448
00:20:39,039 --> 00:20:40,000
one

449
00:20:40,000 --> 00:20:43,440
is for example the mega tags uh here the

450
00:20:43,440 --> 00:20:46,000
adversary creates a really really large

451
00:20:46,000 --> 00:20:48,400
uh opening and closing tag

452
00:20:48,400 --> 00:20:51,520
something in order in the order of

453
00:20:51,520 --> 00:20:55,039
megabytes magnitude uh and sends it as

454
00:20:55,039 --> 00:20:57,600
an input

455
00:20:57,919 --> 00:21:00,960
this could cause quite some surprising

456
00:21:00,960 --> 00:21:02,720
failures in a target system

457
00:21:02,720 --> 00:21:06,159
ranging from buffer over slow overflows

458
00:21:06,159 --> 00:21:06,799
and

459
00:21:06,799 --> 00:21:10,960
and simple memory allocation

460
00:21:13,520 --> 00:21:16,000
yeah so that's quite an interesting

461
00:21:16,000 --> 00:21:16,799
topic

462
00:21:16,799 --> 00:21:20,240
uh we especially use the

463
00:21:20,240 --> 00:21:24,000
tags not uh the small data or the data

464
00:21:24,000 --> 00:21:24,799
part

465
00:21:24,799 --> 00:21:27,919
uh of the uh message as

466
00:21:27,919 --> 00:21:30,480
for the data in most of the parsers

467
00:21:30,480 --> 00:21:32,000
there are hard limits

468
00:21:32,000 --> 00:21:34,799
so basically there shouldn't be x amount

469
00:21:34,799 --> 00:21:36,320
of characters there

470
00:21:36,320 --> 00:21:38,960
and basically they are limiting it this

471
00:21:38,960 --> 00:21:39,760
way

472
00:21:39,760 --> 00:21:43,360
but uh in in the parsers

473
00:21:43,360 --> 00:21:46,559
are not so mindful handling

474
00:21:46,559 --> 00:21:49,760
uh the uh tags

475
00:21:49,760 --> 00:21:53,039
and thus we could uh take a look around

476
00:21:53,039 --> 00:21:53,679
there and

477
00:21:53,679 --> 00:21:57,039
cause some trouble as there uh

478
00:21:57,039 --> 00:22:00,080
another a good uh candidate for

479
00:22:00,080 --> 00:22:03,840
for an attack like that is um

480
00:22:03,840 --> 00:22:05,600
to aim for the object limit of the

481
00:22:05,600 --> 00:22:07,679
parser and stop

482
00:22:07,679 --> 00:22:10,720
other necessary objects uh to be created

483
00:22:10,720 --> 00:22:13,120
for example some gvm java virtual

484
00:22:13,120 --> 00:22:14,400
machines have

485
00:22:14,400 --> 00:22:17,760
got a smaller hard limit on how many

486
00:22:17,760 --> 00:22:19,280
objects could be

487
00:22:19,280 --> 00:22:22,080
created or are located at once by a

488
00:22:22,080 --> 00:22:22,880
process

489
00:22:22,880 --> 00:22:26,559
and this way as these objects are live

490
00:22:26,559 --> 00:22:28,720
they could not be removed by the garbage

491
00:22:28,720 --> 00:22:29,760
collector

492
00:22:29,760 --> 00:22:32,960
and the gvm crashes

493
00:22:32,960 --> 00:22:36,080
or could crash i highly recommend

494
00:22:36,080 --> 00:22:38,720
uh to try these tricks uh for the next

495
00:22:38,720 --> 00:22:40,400
penetration tests and

496
00:22:40,400 --> 00:22:43,440
and tests in our environment uh

497
00:22:43,440 --> 00:22:46,799
as i i must admit uh

498
00:22:46,799 --> 00:22:49,600
it is a joy to see the surprise on the

499
00:22:49,600 --> 00:22:51,840
local security folks face

500
00:22:51,840 --> 00:22:55,120
uh when you are able to stop a service

501
00:22:55,120 --> 00:22:58,159
with a single xmr file

502
00:22:58,159 --> 00:23:03,520
even when the dtd is completely disabled

503
00:23:04,880 --> 00:23:08,400
uh we need to really talk about uh the

504
00:23:08,400 --> 00:23:11,520
cpu are targeted

505
00:23:11,520 --> 00:23:16,240
exploits or cpu targeted problems

506
00:23:16,240 --> 00:23:18,799
a really good candidate for a surprise

507
00:23:18,799 --> 00:23:22,159
finding is a deeply nested eczema which

508
00:23:22,159 --> 00:23:26,480
could cause excessive cpu psycho usage

509
00:23:26,480 --> 00:23:30,640
a couple of thousand nested

510
00:23:31,120 --> 00:23:34,960
object or nested tag could

511
00:23:34,960 --> 00:23:37,840
lead to severe consequences as it is not

512
00:23:37,840 --> 00:23:39,039
easy to utilize

513
00:23:39,039 --> 00:23:42,080
uh parallelism on it uh even when a

514
00:23:42,080 --> 00:23:43,279
parser is using

515
00:23:43,279 --> 00:23:47,120
uh recursion uh we could as well create

516
00:23:47,120 --> 00:23:48,559
some memory error

517
00:23:48,559 --> 00:23:51,679
as the stack trace could eat up

518
00:23:51,679 --> 00:23:55,279
quite a bit of memory as well

519
00:23:55,279 --> 00:23:57,600
the next cpu attack is kind of an

520
00:23:57,600 --> 00:23:58,880
unusual one

521
00:23:58,880 --> 00:24:02,640
uh i really like uh it like it when

522
00:24:02,640 --> 00:24:05,520
we can utilize other sites and services

523
00:24:05,520 --> 00:24:07,919
in order to achieve something big

524
00:24:07,919 --> 00:24:09,840
if a service is running in a pooled

525
00:24:09,840 --> 00:24:11,039
manner

526
00:24:11,039 --> 00:24:14,159
with exclusive locks we could

527
00:24:14,159 --> 00:24:17,039
starve the other threads starting with

528
00:24:17,039 --> 00:24:19,679
remote long distance addresses

529
00:24:19,679 --> 00:24:22,799
we are uh able

530
00:24:22,799 --> 00:24:25,840
uh to slow down the parser and wait

531
00:24:25,840 --> 00:24:29,360
uh for a long time uh so uh

532
00:24:29,360 --> 00:24:32,480
we could ensure that it will be

533
00:24:32,480 --> 00:24:35,200
quite a long time to parse the xml

534
00:24:35,200 --> 00:24:36,159
itself

535
00:24:36,159 --> 00:24:39,840
if we would like to push it even further

536
00:24:39,840 --> 00:24:43,039
we could use our own slow responder

537
00:24:43,039 --> 00:24:44,640
servers

538
00:24:44,640 --> 00:24:47,120
basically if anyone heard about the slow

539
00:24:47,120 --> 00:24:48,240
loris attack

540
00:24:48,240 --> 00:24:51,840
uh we could utilize something like that

541
00:24:51,840 --> 00:24:55,600
but not uh with the apache browser but

542
00:24:55,600 --> 00:24:59,039
uh the uh xml processing part

543
00:24:59,039 --> 00:25:02,080
of an application uh and

544
00:25:02,080 --> 00:25:04,080
yeah this could exhaust the server's

545
00:25:04,080 --> 00:25:06,159
connection pool limit

546
00:25:06,159 --> 00:25:10,720
as well as the thread limit so

547
00:25:10,720 --> 00:25:14,480
yeah we could utilize it with the slow

548
00:25:14,480 --> 00:25:17,679
slow loris attack like

549
00:25:17,679 --> 00:25:22,480
behavior okay

550
00:25:22,480 --> 00:25:25,679
we really need to speak a word about

551
00:25:25,679 --> 00:25:28,799
networks most of the parsers are not

552
00:25:28,799 --> 00:25:29,360
using

553
00:25:29,360 --> 00:25:32,240
i'm header checking so we are able to

554
00:25:32,240 --> 00:25:33,360
refer to

555
00:25:33,360 --> 00:25:35,039
almost any kind of files to be

556
00:25:35,039 --> 00:25:38,240
downloaded as a mime

557
00:25:38,240 --> 00:25:42,000
sorry as a dtd document

558
00:25:42,000 --> 00:25:45,360
and if we could uh think about it

559
00:25:45,360 --> 00:25:46,080
basically

560
00:25:46,080 --> 00:25:48,559
an attacker uh could start to don't

561
00:25:48,559 --> 00:25:49,279
download

562
00:25:49,279 --> 00:25:52,480
uh four or five uh

563
00:25:52,480 --> 00:25:55,679
for example ubuntu images uh ubuntu iso

564
00:25:55,679 --> 00:25:56,400
images

565
00:25:56,400 --> 00:26:00,000
as dtd and that would uh have quite an

566
00:26:00,000 --> 00:26:04,159
impact on the application or network

567
00:26:04,159 --> 00:26:05,840
performance

568
00:26:05,840 --> 00:26:08,880
okay but we really need to get to

569
00:26:08,880 --> 00:26:10,000
something that could

570
00:26:10,000 --> 00:26:13,120
be utilized during a bug bounty session

571
00:26:13,120 --> 00:26:16,640
so i think uh we should

572
00:26:16,640 --> 00:26:20,400
speak about xml fragment injection

573
00:26:20,400 --> 00:26:23,600
uh i hope everyone is familiar with the

574
00:26:23,600 --> 00:26:24,240
uh

575
00:26:24,240 --> 00:26:28,159
injection based attacks like hq sql

576
00:26:28,159 --> 00:26:31,760
injection and ldap injection so

577
00:26:31,760 --> 00:26:35,279
let's familiarize with

578
00:26:35,279 --> 00:26:38,640
some xml based ones these

579
00:26:38,640 --> 00:26:40,720
attacks are one of the most

580
00:26:40,720 --> 00:26:42,159
underutilized

581
00:26:42,159 --> 00:26:45,520
ones i think in an xml environment

582
00:26:45,520 --> 00:26:48,640
but as almost all of the injection

583
00:26:48,640 --> 00:26:50,080
attacks are related to

584
00:26:50,080 --> 00:26:53,919
concatenation to a certain degree

585
00:26:53,919 --> 00:26:56,080
this will have this pretty condition as

586
00:26:56,080 --> 00:26:57,440
well and

587
00:26:57,440 --> 00:27:00,559
uh it is

588
00:27:00,559 --> 00:27:03,600
quite good that a lot of developers are

589
00:27:03,600 --> 00:27:06,080
using proper cell realization for

590
00:27:06,080 --> 00:27:09,440
eczema so these attacks are are more

591
00:27:09,440 --> 00:27:13,440
more likely in the trial by error

592
00:27:13,520 --> 00:27:16,720
segment so uh in which case

593
00:27:16,720 --> 00:27:20,000
uh in a case where we can alter the xml

594
00:27:20,000 --> 00:27:22,080
itself it is an easy task

595
00:27:22,080 --> 00:27:25,520
to add text to it uh i had success in

596
00:27:25,520 --> 00:27:26,159
some

597
00:27:26,159 --> 00:27:29,600
uh application adding the admin node

598
00:27:29,600 --> 00:27:32,640
uh in for example a user registration

599
00:27:32,640 --> 00:27:34,000
xml message

600
00:27:34,000 --> 00:27:36,960
and i became instantly admin on the

601
00:27:36,960 --> 00:27:38,000
system

602
00:27:38,000 --> 00:27:41,200
uh it is really unusual but sometimes it

603
00:27:41,200 --> 00:27:42,000
works

604
00:27:42,000 --> 00:27:45,360
a more likely scenario is when

605
00:27:45,360 --> 00:27:48,159
some part of the message is concatenated

606
00:27:48,159 --> 00:27:49,840
and we could simply add

607
00:27:49,840 --> 00:27:53,279
our payload in for example a post

608
00:27:53,279 --> 00:27:55,919
field post data field in a registration

609
00:27:55,919 --> 00:27:59,039
or update form

610
00:27:59,600 --> 00:28:02,799
in the case displayed here

611
00:28:02,799 --> 00:28:06,080
uh we need the parser to handle

612
00:28:06,080 --> 00:28:09,760
uh duplicated uh tags

613
00:28:09,760 --> 00:28:12,799
in in a field so as we can see

614
00:28:12,799 --> 00:28:16,240
uh the bio element is duplicated in here

615
00:28:16,240 --> 00:28:16,960
so

616
00:28:16,960 --> 00:28:19,520
uh that does not really work in most of

617
00:28:19,520 --> 00:28:20,640
the cases but

618
00:28:20,640 --> 00:28:24,480
uh there are uh some edge cases where it

619
00:28:24,480 --> 00:28:28,840
uh is really useful and fun to exploit

620
00:28:28,840 --> 00:28:32,720
um if you take a look at uh this example

621
00:28:32,720 --> 00:28:35,360
which is a modified version of uh one

622
00:28:35,360 --> 00:28:38,000
exact finding i had in a system

623
00:28:38,000 --> 00:28:41,120
uh we all know uh where this is going so

624
00:28:41,120 --> 00:28:44,480
the concatenated message

625
00:28:44,480 --> 00:28:47,919
is something that is well

626
00:28:47,919 --> 00:28:50,799
really good to be exploited in a banking

627
00:28:50,799 --> 00:28:52,159
environment

628
00:28:52,159 --> 00:28:56,480
so if we craft or specific message

629
00:28:56,480 --> 00:28:58,640
to create an additional transaction in

630
00:28:58,640 --> 00:29:00,399
the boot processing

631
00:29:00,399 --> 00:29:05,919
uh we could basically have a free

632
00:29:05,919 --> 00:29:10,080
transfer to our or another uh

633
00:29:10,080 --> 00:29:13,440
bank account uh

634
00:29:13,440 --> 00:29:16,240
it is really hard to exploit these ones

635
00:29:16,240 --> 00:29:17,120
and

636
00:29:17,120 --> 00:29:19,919
uh even with internal knowledge it is

637
00:29:19,919 --> 00:29:20,399
not

638
00:29:20,399 --> 00:29:23,679
uh easy to pull of this kind of

639
00:29:23,679 --> 00:29:27,200
uh uh but

640
00:29:27,200 --> 00:29:29,760
before with this kind discard this kind

641
00:29:29,760 --> 00:29:30,880
of attack

642
00:29:30,880 --> 00:29:33,760
i really would like to point out out

643
00:29:33,760 --> 00:29:36,159
that a lot of incidents are happening

644
00:29:36,159 --> 00:29:36,559
from

645
00:29:36,559 --> 00:29:39,679
actors that has really deep knowledge

646
00:29:39,679 --> 00:29:43,039
of the given system

647
00:29:43,120 --> 00:29:46,159
or have got some sources leaked and

648
00:29:46,159 --> 00:29:47,440
stuff

649
00:29:47,440 --> 00:29:50,559
i think uh that it is enough on the

650
00:29:50,559 --> 00:29:51,600
injection

651
00:29:51,600 --> 00:29:56,399
let's explore the following topic

652
00:29:57,679 --> 00:30:00,559
which is server side request forgery but

653
00:30:00,559 --> 00:30:01,760
why

654
00:30:01,760 --> 00:30:04,559
the xml processing server is most likely

655
00:30:04,559 --> 00:30:05,120
to be

656
00:30:05,120 --> 00:30:07,679
in an ip zone where a lot of private

657
00:30:07,679 --> 00:30:08,720
stuff is

658
00:30:08,720 --> 00:30:11,520
available uh international services

659
00:30:11,520 --> 00:30:13,039
status reports

660
00:30:13,039 --> 00:30:16,559
git likes repositories or something so

661
00:30:16,559 --> 00:30:20,159
that's quite a good target to look for

662
00:30:20,159 --> 00:30:23,679
we could discover uh internal services

663
00:30:23,679 --> 00:30:26,480
uh with the previous examples we just

664
00:30:26,480 --> 00:30:27,919
need to swap

665
00:30:27,919 --> 00:30:31,279
uh the file

666
00:30:31,279 --> 00:30:34,399
uh uri or url uh

667
00:30:34,399 --> 00:30:38,159
to an internal http or https

668
00:30:38,159 --> 00:30:40,799
based url later on we're gonna speak a

669
00:30:40,799 --> 00:30:41,919
little bit about

670
00:30:41,919 --> 00:30:44,240
uh these kind of handlers and specific

671
00:30:44,240 --> 00:30:45,120
ones

672
00:30:45,120 --> 00:30:48,240
um so it is easy to see that

673
00:30:48,240 --> 00:30:51,520
we could uh get informations from

674
00:30:51,520 --> 00:30:55,120
uh different sites i uh

675
00:30:55,120 --> 00:30:58,640
said git specifically because uh

676
00:30:58,640 --> 00:31:01,120
you could explore a git repository uh

677
00:31:01,120 --> 00:31:02,840
using get request

678
00:31:02,840 --> 00:31:06,640
so that's quite great

679
00:31:06,640 --> 00:31:09,279
okay but what happens uh when we are

680
00:31:09,279 --> 00:31:10,480
trying to reach

681
00:31:10,480 --> 00:31:14,080
something that will not be possible

682
00:31:14,080 --> 00:31:16,960
in the pet store swagger io are the

683
00:31:16,960 --> 00:31:18,559
swagger.json file

684
00:31:18,559 --> 00:31:21,600
contains special characters that are not

685
00:31:21,600 --> 00:31:22,399
able to be

686
00:31:22,399 --> 00:31:25,679
parsed or they could not be parsed uh

687
00:31:25,679 --> 00:31:28,880
so our xml parser will

688
00:31:28,880 --> 00:31:32,000
uh throw an error for us

689
00:31:32,000 --> 00:31:34,640
later on we're going to see a demo for

690
00:31:34,640 --> 00:31:36,960
that as well

691
00:31:36,960 --> 00:31:40,399
so have we ever heard about

692
00:31:40,399 --> 00:31:43,120
c data

693
00:31:43,600 --> 00:31:47,679
basically it's a block which is excluded

694
00:31:47,679 --> 00:31:50,480
from interpreting it is telling the xml

695
00:31:50,480 --> 00:31:52,080
parser that

696
00:31:52,080 --> 00:31:55,120
the following segment of the document is

697
00:31:55,120 --> 00:31:56,480
a character

698
00:31:56,480 --> 00:32:00,159
data so do not try to parse it

699
00:32:00,159 --> 00:32:04,399
it is quite a good candidate

700
00:32:04,399 --> 00:32:08,640
for having this kind of hack to be work

701
00:32:08,640 --> 00:32:12,240
but there is a problem with it

702
00:32:12,480 --> 00:32:16,399
to that problem uh we've got a solution

703
00:32:16,399 --> 00:32:19,360
which is not mentioned so far which was

704
00:32:19,360 --> 00:32:21,120
not mentioned so far

705
00:32:21,120 --> 00:32:24,880
and uh here is where the clever

706
00:32:24,880 --> 00:32:28,000
uh part comes uh in the dtd we

707
00:32:28,000 --> 00:32:31,120
are able to create uh so-called

708
00:32:31,120 --> 00:32:32,799
parameter entities

709
00:32:32,799 --> 00:32:35,120
and with the help of these we will be

710
00:32:35,120 --> 00:32:35,919
able

711
00:32:35,919 --> 00:32:39,039
uh to basically uh

712
00:32:39,039 --> 00:32:42,399
create the c data block uh

713
00:32:42,399 --> 00:32:45,279
and get the content of the site as well

714
00:32:45,279 --> 00:32:46,320
without

715
00:32:46,320 --> 00:32:50,080
uh having the failure having the parser

716
00:32:50,080 --> 00:32:51,200
to fail

717
00:32:51,200 --> 00:32:53,919
so it is not an easy one uh it is a

718
00:32:53,919 --> 00:32:56,720
multi-stage exploit so

719
00:32:56,720 --> 00:33:00,080
we've got quite some things to do

720
00:33:00,080 --> 00:33:03,840
so without further ado i would like to

721
00:33:03,840 --> 00:33:10,640
share some kind of demo

722
00:33:10,640 --> 00:33:13,919
in my lab environment i created a

723
00:33:13,919 --> 00:33:18,480
small showcase to demo this whole thing

724
00:33:18,480 --> 00:33:21,919
and the most easy xml attack that

725
00:33:21,919 --> 00:33:25,279
is employed all the time is basically

726
00:33:25,279 --> 00:33:28,960
uh utilizing this service which

727
00:33:28,960 --> 00:33:32,159
uh gives us back a simple message

728
00:33:32,159 --> 00:33:35,919
uh from the server uh the attack that we

729
00:33:35,919 --> 00:33:40,399
initially showcased or initially

730
00:33:40,399 --> 00:33:46,320
told the xxe attack is as follows

731
00:33:49,600 --> 00:33:52,480
so we could get the file content we are

732
00:33:52,480 --> 00:33:54,480
using this file handler

733
00:33:54,480 --> 00:33:56,720
uh but we really would like to get to

734
00:33:56,720 --> 00:33:57,840
this internal

735
00:33:57,840 --> 00:34:02,159
uh website of the uh on the other domain

736
00:34:02,159 --> 00:34:07,360
uh which is the 106.

737
00:34:07,360 --> 00:34:10,800
so we could utilize that service

738
00:34:10,800 --> 00:34:12,800
so imagine that this service is not

739
00:34:12,800 --> 00:34:14,320
available from us

740
00:34:14,320 --> 00:34:18,800
uh and this is a securely zoned

741
00:34:18,800 --> 00:34:22,079
computer for computer for example

742
00:34:22,079 --> 00:34:25,199
we could get the internal site

743
00:34:25,199 --> 00:34:29,199
content then the source of the internal

744
00:34:29,199 --> 00:34:30,079
file

745
00:34:30,079 --> 00:34:33,119
is valid

746
00:34:33,119 --> 00:34:35,839
and well formatted document but what

747
00:34:35,839 --> 00:34:36,560
happens

748
00:34:36,560 --> 00:34:39,760
when we uh try to get uh

749
00:34:39,760 --> 00:34:43,040
the swagger uh json

750
00:34:43,040 --> 00:34:45,639
from the pet store example from

751
00:34:45,639 --> 00:34:47,440
swagger.io

752
00:34:47,440 --> 00:34:50,560
uh the problem here is that we are

753
00:34:50,560 --> 00:34:53,918
getting an error where

754
00:34:53,918 --> 00:34:56,800
uh the uh document is not able to be

755
00:34:56,800 --> 00:34:57,680
parsed because

756
00:34:57,680 --> 00:35:01,040
it is uh containing special characters

757
00:35:01,040 --> 00:35:04,160
for example here

758
00:35:04,400 --> 00:35:06,560
but we really would like to have these

759
00:35:06,560 --> 00:35:08,079
kind of documents as

760
00:35:08,079 --> 00:35:10,000
one of the penetration tests i've

761
00:35:10,000 --> 00:35:11,520
performed

762
00:35:11,520 --> 00:35:15,040
contained a swagger documentation

763
00:35:15,040 --> 00:35:18,240
similar to this one but of course on a

764
00:35:18,240 --> 00:35:18,640
live

765
00:35:18,640 --> 00:35:22,000
and production service and

766
00:35:22,000 --> 00:35:24,480
i really wanted to see what api could i

767
00:35:24,480 --> 00:35:26,560
call because there are of course

768
00:35:26,560 --> 00:35:29,359
get services which should be available

769
00:35:29,359 --> 00:35:30,240
and

770
00:35:30,240 --> 00:35:33,599
as we can see we clearly can send uh

771
00:35:33,599 --> 00:35:36,640
or receive data from these kind of

772
00:35:36,640 --> 00:35:37,599
services

773
00:35:37,599 --> 00:35:40,640
so we create

774
00:35:40,720 --> 00:35:44,160
the example mentioned here

775
00:35:44,160 --> 00:35:46,800
which is not really working and we get

776
00:35:46,800 --> 00:35:47,520
back

777
00:35:47,520 --> 00:35:51,119
because of the c data block uh the xxe

778
00:35:51,119 --> 00:35:54,960
and not the content of this uh

779
00:35:54,960 --> 00:35:58,000
uri or url that we really would like

780
00:35:58,000 --> 00:36:01,680
to see uh so we create

781
00:36:01,680 --> 00:36:04,000
an other uh for example that could be

782
00:36:04,000 --> 00:36:04,960
the attacker

783
00:36:04,960 --> 00:36:08,079
uh service which have something like

784
00:36:08,079 --> 00:36:08,960
that

785
00:36:08,960 --> 00:36:11,839
along the lines with that uh we specify

786
00:36:11,839 --> 00:36:12,880
what kind of

787
00:36:12,880 --> 00:36:15,920
uh data we really need of course uh this

788
00:36:15,920 --> 00:36:16,720
technique is

789
00:36:16,720 --> 00:36:19,839
uh available to use

790
00:36:19,839 --> 00:36:22,160
local files as well containing special

791
00:36:22,160 --> 00:36:23,200
characters

792
00:36:23,200 --> 00:36:26,480
so we create uh us

793
00:36:26,480 --> 00:36:29,599
a malicious uh document type definition

794
00:36:29,599 --> 00:36:34,480
file and reference it

795
00:36:34,960 --> 00:36:38,400
from our attacker side and uh

796
00:36:38,400 --> 00:36:41,920
we reference the all which

797
00:36:41,920 --> 00:36:46,400
was defined here

798
00:36:47,839 --> 00:36:50,880
we are referencing it and uh

799
00:36:50,880 --> 00:36:52,720
with the special characters there should

800
00:36:52,720 --> 00:36:54,800
be no problem at all

801
00:36:54,800 --> 00:36:56,560
it takes a while to reach out to the

802
00:36:56,560 --> 00:36:58,480
swagger that io

803
00:36:58,480 --> 00:37:02,160
but as we can see we are able to pull

804
00:37:02,160 --> 00:37:05,440
this document even

805
00:37:05,440 --> 00:37:07,839
if it has got some kind of special

806
00:37:07,839 --> 00:37:08,800
characters

807
00:37:08,800 --> 00:37:13,839
which should prevent xml to fail

808
00:37:14,320 --> 00:37:18,000
okay and in the log we could see that

809
00:37:18,000 --> 00:37:21,200
the dtd was referenced

810
00:37:21,200 --> 00:37:25,520
as well and as i mentioned earlier

811
00:37:25,520 --> 00:37:29,359
the ddt is not having

812
00:37:29,359 --> 00:37:32,000
the extension of dtd and no mime

813
00:37:32,000 --> 00:37:33,280
speaking

814
00:37:33,280 --> 00:37:37,200
is a perform so the txt

815
00:37:37,200 --> 00:37:42,160
extension is valid in here as well

816
00:37:47,200 --> 00:37:51,839
so getting back to our slides

817
00:37:53,200 --> 00:37:55,599
i hope that it is understandable now

818
00:37:55,599 --> 00:37:56,640
that

819
00:37:56,640 --> 00:37:59,680
basically we can get and by that i mean

820
00:37:59,680 --> 00:38:03,040
http get almost any internal sites

821
00:38:03,040 --> 00:38:06,960
and contents so i think uh it is quite a

822
00:38:06,960 --> 00:38:08,320
useful trick to

823
00:38:08,320 --> 00:38:11,760
employ in any environment of course

824
00:38:11,760 --> 00:38:14,880
uh there are uh preconditions which is

825
00:38:14,880 --> 00:38:17,760
necessary which are necessary

826
00:38:17,760 --> 00:38:21,440
to this hack to work so

827
00:38:21,440 --> 00:38:25,200
i think it's still worth a try in most

828
00:38:25,200 --> 00:38:27,280
of the cases

829
00:38:27,280 --> 00:38:30,839
there is one topic which

830
00:38:30,839 --> 00:38:34,480
is uh worse to mention

831
00:38:34,480 --> 00:38:37,839
and that are the handlers in

832
00:38:37,839 --> 00:38:40,480
xml

833
00:38:41,680 --> 00:38:44,839
i think these

834
00:38:44,839 --> 00:38:48,560
are uh really interesting

835
00:38:48,560 --> 00:38:54,480
parts of the xml environment or word

836
00:38:54,480 --> 00:38:56,960
as of now i mentioned a lot of times

837
00:38:56,960 --> 00:38:57,839
that how

838
00:38:57,839 --> 00:39:02,480
uniform xml is and and why it is a great

839
00:39:02,480 --> 00:39:06,680
target to attack as the file http

840
00:39:06,680 --> 00:39:10,240
https and ftp

841
00:39:10,240 --> 00:39:16,079
is mostly implemented ftp is rarely

842
00:39:16,079 --> 00:39:19,119
enabled but the first three

843
00:39:19,119 --> 00:39:22,480
is kind of always enabled

844
00:39:22,480 --> 00:39:26,079
but there are special handlers where

845
00:39:26,079 --> 00:39:29,680
we could shine or really exploit

846
00:39:29,680 --> 00:39:33,520
a targeted systems system

847
00:39:33,520 --> 00:39:35,920
most of the penetration testers are

848
00:39:35,920 --> 00:39:37,760
familiar with the

849
00:39:37,760 --> 00:39:40,880
php based handler so

850
00:39:40,880 --> 00:39:44,160
php has got a handler uh which is uh

851
00:39:44,160 --> 00:39:48,800
also php which is called also php

852
00:39:48,800 --> 00:39:52,880
uh with filters and

853
00:39:52,880 --> 00:39:55,920
this is a really great stuff to get for

854
00:39:55,920 --> 00:39:57,119
example

855
00:39:57,119 --> 00:40:01,520
base64 encoded php files and contents

856
00:40:01,520 --> 00:40:04,480
from the server

857
00:40:05,359 --> 00:40:09,200
i i would like to leave for everyone

858
00:40:09,200 --> 00:40:10,079
everyone to

859
00:40:10,079 --> 00:40:15,280
digest and the following handler php has

860
00:40:15,280 --> 00:40:18,480
which is ssh 2

861
00:40:18,480 --> 00:40:23,359
tunneling i i have no comments on that

862
00:40:23,359 --> 00:40:26,720
so please

863
00:40:26,720 --> 00:40:30,079
do not enable that

864
00:40:30,079 --> 00:40:33,680
like ever in a php situation i think we

865
00:40:33,680 --> 00:40:34,319
all know

866
00:40:34,319 --> 00:40:37,680
uh where this is going that could be a

867
00:40:37,680 --> 00:40:38,960
lot of problems

868
00:40:38,960 --> 00:40:42,240
uh forwarding ports with

869
00:40:42,240 --> 00:40:45,760
php uh two external sites

870
00:40:45,760 --> 00:40:49,200
uh because of an xml attack

871
00:40:49,200 --> 00:40:52,880
uh but a lot of talks are just

872
00:40:52,880 --> 00:40:56,160
php bashing i think

873
00:40:56,160 --> 00:40:58,720
that there is some trouble elsewhere as

874
00:40:58,720 --> 00:40:59,440
well

875
00:40:59,440 --> 00:41:02,720
uh for example uh the java

876
00:41:02,720 --> 00:41:06,480
jar handler could be abused and

877
00:41:06,480 --> 00:41:09,119
we could basically access a contents of

878
00:41:09,119 --> 00:41:10,480
a zip file

879
00:41:10,480 --> 00:41:14,319
uh on a system so

880
00:41:14,319 --> 00:41:16,960
and of course uh here still could be

881
00:41:16,960 --> 00:41:18,319
working

882
00:41:18,319 --> 00:41:22,319
the uh c data hack that we had before

883
00:41:22,319 --> 00:41:26,640
uh binary files are mostly uh

884
00:41:26,640 --> 00:41:30,480
undoable but text based are mostly okay

885
00:41:30,480 --> 00:41:30,800
in

886
00:41:30,800 --> 00:41:35,200
with this c data hack so i

887
00:41:35,200 --> 00:41:37,920
could have a whole talk on on this topic

888
00:41:37,920 --> 00:41:38,880
by itself

889
00:41:38,880 --> 00:41:42,079
uh i mean the handlers uh but

890
00:41:42,079 --> 00:41:45,119
i think it is time uh to close up with

891
00:41:45,119 --> 00:41:45,839
something

892
00:41:45,839 --> 00:41:49,440
unusual so

893
00:41:49,440 --> 00:41:51,520
quite a while ago a good friend of mine

894
00:41:51,520 --> 00:41:53,680
told me that the secret of

895
00:41:53,680 --> 00:41:57,440
presentations are not to tell jokes

896
00:41:57,440 --> 00:42:00,319
constantly and be funny all the time

897
00:42:00,319 --> 00:42:03,119
but to achieve that that uh everyone in

898
00:42:03,119 --> 00:42:04,079
the end

899
00:42:04,079 --> 00:42:07,680
uh has a good laugh so to close up i

900
00:42:07,680 --> 00:42:08,480
took

901
00:42:08,480 --> 00:42:11,839
uh two of the truest

902
00:42:11,839 --> 00:42:15,520
or uh finest xml based

903
00:42:15,520 --> 00:42:19,280
software development word truce

904
00:42:19,280 --> 00:42:23,200
or or dogma and well let's agree

905
00:42:23,200 --> 00:42:26,800
on these two facts well we had one

906
00:42:26,800 --> 00:42:27,359
problem

907
00:42:27,359 --> 00:42:31,040
and we choose to solve it with xml

908
00:42:31,040 --> 00:42:35,200
now we have two problems so

909
00:42:35,200 --> 00:42:38,960
it is definitely true uh try to stay

910
00:42:38,960 --> 00:42:39,760
away from

911
00:42:39,760 --> 00:42:43,200
xml when possible if no one knows how to

912
00:42:43,200 --> 00:42:44,560
use it correctly

913
00:42:44,560 --> 00:42:48,079
it is a great tool but please please

914
00:42:48,079 --> 00:42:51,280
uh configure it and disable the features

915
00:42:51,280 --> 00:42:51,599
that

916
00:42:51,599 --> 00:42:55,839
are not necessary for the given use case

917
00:42:55,839 --> 00:42:59,040
and the second one uh as i promised i

918
00:42:59,040 --> 00:43:01,280
have something for the star wars

919
00:43:01,280 --> 00:43:05,040
star wars fan base so uh

920
00:43:05,040 --> 00:43:07,520
we had one problem and we choose to

921
00:43:07,520 --> 00:43:10,319
solve it using multi-threading

922
00:43:10,319 --> 00:43:13,760
now two problems we have

923
00:43:13,760 --> 00:43:16,800
and i think uh

924
00:43:16,800 --> 00:43:19,560
yoda approves the last statement

925
00:43:19,560 --> 00:43:21,200
[Laughter]

926
00:43:21,200 --> 00:43:23,760
okay hopefully uh there was at least a

927
00:43:23,760 --> 00:43:25,680
little grim on everyone's face

928
00:43:25,680 --> 00:43:28,800
because of the jokes i really hope that

929
00:43:28,800 --> 00:43:31,520
we had some new or so provoking

930
00:43:31,520 --> 00:43:33,839
information in the past few minutes

931
00:43:33,839 --> 00:43:37,040
i believe that we really need to show

932
00:43:37,040 --> 00:43:37,839
the word that

933
00:43:37,839 --> 00:43:40,880
eczema based services could be exploited

934
00:43:40,880 --> 00:43:43,839
in many ways

935
00:43:43,920 --> 00:43:46,960
so in case there is any question or

936
00:43:46,960 --> 00:43:49,119
criticism

937
00:43:49,119 --> 00:43:52,000
i'd love to get those via email feel

938
00:43:52,000 --> 00:43:55,280
free to contact me

939
00:43:55,280 --> 00:43:57,440
and there's just a closing fun fact

940
00:43:57,440 --> 00:44:00,480
please never ever use

941
00:44:00,480 --> 00:44:03,200
online formatters to beautify your

942
00:44:03,200 --> 00:44:04,960
hacking payloads

943
00:44:04,960 --> 00:44:08,000
i was mark moodley and i hope

944
00:44:08,000 --> 00:44:10,079
that next year we will meet in real life

945
00:44:10,079 --> 00:44:11,040
as well

946
00:44:11,040 --> 00:44:23,839
take care and enjoy the conference

947
00:44:31,119 --> 00:44:33,280
well thank you mark for the awesome

948
00:44:33,280 --> 00:44:35,760
presentation

949
00:44:35,760 --> 00:44:39,920
i think that on the discord channel

950
00:44:39,920 --> 00:44:43,119
we have not seen any questions yet but

951
00:44:43,119 --> 00:44:46,240
this is the time for the audience to ask

952
00:44:46,240 --> 00:44:49,280
so please uh if you have any questions

953
00:44:49,280 --> 00:44:50,000
just

954
00:44:50,000 --> 00:44:52,800
write it in discord until then mark uh

955
00:44:52,800 --> 00:44:54,400
could you please uh

956
00:44:54,400 --> 00:44:57,440
summarize uh your presentations in

957
00:44:57,440 --> 00:44:59,599
some sentences highlight the most

958
00:44:59,599 --> 00:45:00,640
important

959
00:45:00,640 --> 00:45:03,680
parts of it yeah of course

960
00:45:03,680 --> 00:45:07,599
i'm happy to be here and honestly

961
00:45:07,599 --> 00:45:10,000
i was quite thrilled that my talk uh

962
00:45:10,000 --> 00:45:10,880
made it to the

963
00:45:10,880 --> 00:45:14,560
uh final in here so

964
00:45:14,560 --> 00:45:17,599
i am glad that everyone uh was here

965
00:45:17,599 --> 00:45:20,079
i hope everyone enjoyed it even the dead

966
00:45:20,079 --> 00:45:21,520
jokes as well

967
00:45:21,520 --> 00:45:24,640
so the key takeaway is uh from the last

968
00:45:24,640 --> 00:45:25,440
side that

969
00:45:25,440 --> 00:45:29,520
i think we really should abuse and use

970
00:45:29,520 --> 00:45:32,720
xml in a way uh that it is not

971
00:45:32,720 --> 00:45:35,839
well utilized right now

972
00:45:35,839 --> 00:45:39,440
and i hope that everyone took away

973
00:45:39,440 --> 00:45:42,480
some part of the presentation as well so

974
00:45:42,480 --> 00:45:46,000
hopefully in the next ctf we will be

975
00:45:46,000 --> 00:45:48,800
having some kind of a better

976
00:45:48,800 --> 00:45:51,119
understanding and task

977
00:45:51,119 --> 00:45:54,400
to deploy or have even

978
00:45:54,400 --> 00:45:57,520
from both of the sides of the

979
00:45:57,520 --> 00:46:00,000
city of organizers and the participants

980
00:46:00,000 --> 00:46:02,960
as well

