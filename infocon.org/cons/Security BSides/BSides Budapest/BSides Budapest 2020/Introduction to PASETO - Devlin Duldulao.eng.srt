1
00:00:08,880 --> 00:00:11,519
hello everyone i'm dev lindelow i'm a

2
00:00:11,519 --> 00:00:12,719
software developer

3
00:00:12,719 --> 00:00:15,759
at nmeta and i'm here to talk about

4
00:00:15,759 --> 00:00:16,640
introduction

5
00:00:16,640 --> 00:00:19,680
to passato platform agnostic

6
00:00:19,680 --> 00:00:22,800
security tokens first of all i'd like to

7
00:00:22,800 --> 00:00:23,119
thank

8
00:00:23,119 --> 00:00:27,199
besides budapest for this opportunity

9
00:00:27,199 --> 00:00:30,640
i'll be uh sharing you this pasero

10
00:00:30,640 --> 00:00:34,480
okay so let's start

11
00:00:35,360 --> 00:00:38,559
so just to uh refresh our

12
00:00:38,559 --> 00:00:41,760
memory here's um

13
00:00:41,760 --> 00:00:44,800
jwt and some

14
00:00:44,800 --> 00:00:48,640
other things this is json web tokens

15
00:00:48,640 --> 00:00:52,000
you know it's our oh an open industry

16
00:00:52,000 --> 00:00:55,039
standard rfc 7519 method

17
00:00:55,039 --> 00:00:58,320
for representing claims securely between

18
00:00:58,320 --> 00:01:01,440
two parties right

19
00:01:01,760 --> 00:01:03,920
here's a sample uh token jelly belly

20
00:01:03,920 --> 00:01:05,840
token job token

21
00:01:05,840 --> 00:01:08,799
from jwt website so as you can see here

22
00:01:08,799 --> 00:01:10,799
it's divided into three

23
00:01:10,799 --> 00:01:14,080
there's the header payload and

24
00:01:14,080 --> 00:01:18,320
the signature so sub subject

25
00:01:18,320 --> 00:01:22,400
yap issue time

26
00:01:22,400 --> 00:01:26,080
jwt is used today for securely exchange

27
00:01:26,080 --> 00:01:27,680
[Music]

28
00:01:27,680 --> 00:01:31,360
information between two servers and then

29
00:01:31,360 --> 00:01:34,479
also in a single page

30
00:01:34,479 --> 00:01:38,159
application authentication or spa

31
00:01:38,159 --> 00:01:42,720
or authorized operations across servers

32
00:01:42,720 --> 00:01:46,000
we have some acronyms here

33
00:01:46,000 --> 00:01:49,439
we have uh jose or jose

34
00:01:49,439 --> 00:01:52,000
javascript object signing and encryption

35
00:01:52,000 --> 00:01:53,360
also the name

36
00:01:53,360 --> 00:01:56,399
of the working group jose

37
00:01:56,399 --> 00:01:58,719
is actually a framework intended to

38
00:01:58,719 --> 00:01:59,439
provide

39
00:01:59,439 --> 00:02:02,000
a method to securely transfer claims

40
00:02:02,000 --> 00:02:04,880
between parties

41
00:02:05,759 --> 00:02:08,720
the next is the jot you know

42
00:02:08,720 --> 00:02:11,200
representing claims in

43
00:02:11,200 --> 00:02:14,480
compact and url safe means

44
00:02:14,480 --> 00:02:17,920
nexus we have jwe or the json web

45
00:02:17,920 --> 00:02:19,599
encryption

46
00:02:19,599 --> 00:02:22,720
which encrypts content

47
00:02:22,720 --> 00:02:26,800
you know and then jws

48
00:02:26,800 --> 00:02:30,640
which is the json web signature

49
00:02:30,640 --> 00:02:32,879
which secures content with digital

50
00:02:32,879 --> 00:02:34,239
signatures

51
00:02:34,239 --> 00:02:37,519
and then jwk

52
00:02:37,519 --> 00:02:40,959
is the json web key represents

53
00:02:40,959 --> 00:02:44,560
keys used for signing and encryption

54
00:02:44,560 --> 00:02:47,599
and then we have gwa which is json web

55
00:02:47,599 --> 00:02:49,120
algorithm

56
00:02:49,120 --> 00:02:52,640
which is a cryptographic

57
00:02:52,640 --> 00:02:55,840
algorithm and identifiers use

58
00:02:55,840 --> 00:02:59,040
with all the above

59
00:03:01,840 --> 00:03:06,400
and here we have supported algorithms

60
00:03:06,400 --> 00:03:10,159
we have hmac shop

61
00:03:10,239 --> 00:03:14,560
hs and then rsa plus shop rs

62
00:03:14,560 --> 00:03:18,720
we also have es256

63
00:03:18,720 --> 00:03:21,519
which is a symmetric key cryptography

64
00:03:21,519 --> 00:03:23,040
algorithm electric

65
00:03:23,040 --> 00:03:25,599
curve digital signature algorithm and

66
00:03:25,599 --> 00:03:26,080
then

67
00:03:26,080 --> 00:03:29,280
some ps here

68
00:03:29,440 --> 00:03:34,799
so next is signing versus encryption

69
00:03:34,799 --> 00:03:38,560
uh encryption you know for unreadable

70
00:03:38,560 --> 00:03:41,840
data to unauthorize parties

71
00:03:41,840 --> 00:03:46,159
so perfect for confidentiality

72
00:03:46,159 --> 00:03:49,200
then we have signing here is for data

73
00:03:49,200 --> 00:03:50,640
integrity

74
00:03:50,640 --> 00:03:53,120
you know message authentication and

75
00:03:53,120 --> 00:03:56,000
reflection

76
00:03:56,000 --> 00:03:59,200
and you know for uh

77
00:03:59,200 --> 00:04:02,959
integrity in short and then

78
00:04:02,959 --> 00:04:06,640
multiple ways of signing

79
00:04:07,360 --> 00:04:10,319
with a secret uh using hmac that's one

80
00:04:10,319 --> 00:04:10,879
and then

81
00:04:10,879 --> 00:04:14,400
with a private key using rsa easy

82
00:04:14,400 --> 00:04:16,959
in others

83
00:04:17,759 --> 00:04:20,798
and some pointers here

84
00:04:20,798 --> 00:04:23,840
you know multiple systems can issue

85
00:04:23,840 --> 00:04:27,120
tokens a token can be used

86
00:04:27,120 --> 00:04:30,400
by multiple systems

87
00:04:30,880 --> 00:04:33,199
all these systems can use different

88
00:04:33,199 --> 00:04:35,759
libraries

89
00:04:37,840 --> 00:04:40,400
now let's go to vulnerabilities and

90
00:04:40,400 --> 00:04:41,440
exploitation

91
00:04:41,440 --> 00:04:46,080
in chat or json web tokens

92
00:04:46,080 --> 00:04:50,240
first still the first uh

93
00:04:50,240 --> 00:04:53,600
vulnerability that can be found

94
00:04:53,600 --> 00:04:56,880
it's not checking the signature so

95
00:04:56,880 --> 00:05:00,639
some jwt or json web token libraries

96
00:05:00,639 --> 00:05:05,759
methods are decode and verify

97
00:05:06,400 --> 00:05:09,600
so the problem with you know with this

98
00:05:09,600 --> 00:05:10,000
code

99
00:05:10,000 --> 00:05:13,280
here is that this is what

100
00:05:13,280 --> 00:05:16,800
i used to happen before

101
00:05:16,800 --> 00:05:21,039
in in some cases that

102
00:05:21,039 --> 00:05:25,360
uh there was a bridge or something

103
00:05:25,360 --> 00:05:29,199
here jwt.decode instead of

104
00:05:29,199 --> 00:05:34,000
you know verifying it or gwt verify

105
00:05:35,600 --> 00:05:39,479
it's a big mistake here next is

106
00:05:39,479 --> 00:05:43,199
exploitation so how do you explain this

107
00:05:43,199 --> 00:05:46,400
get a token decode

108
00:05:46,400 --> 00:05:49,520
and then tamper with payload then

109
00:05:49,520 --> 00:05:54,560
send the token that's it easy

110
00:05:56,400 --> 00:06:00,240
next vulnerability the non-algorithm

111
00:06:00,240 --> 00:06:02,479
here

112
00:06:03,919 --> 00:06:09,199
and i think i should use this one

113
00:06:09,199 --> 00:06:14,319
laser pointer yeah i think it's better

114
00:06:14,720 --> 00:06:17,759
the non-algorithm

115
00:06:19,759 --> 00:06:22,319
so used to be supported by default in

116
00:06:22,319 --> 00:06:23,360
few libraries

117
00:06:23,360 --> 00:06:27,039
basically don't sign the token

118
00:06:27,120 --> 00:06:30,560
and exploitation

119
00:06:32,800 --> 00:06:35,600
get a token decode the header and change

120
00:06:35,600 --> 00:06:37,199
the algorithm

121
00:06:37,199 --> 00:06:40,400
none or none decode and tamper with the

122
00:06:40,400 --> 00:06:41,919
payload and then

123
00:06:41,919 --> 00:06:46,799
keep or remove the signature that's it

124
00:06:47,440 --> 00:06:51,280
next is algorithm confusion h map

125
00:06:51,280 --> 00:06:54,720
rsa for instance the token

126
00:06:54,720 --> 00:06:57,120
has been signed using hmac instead of

127
00:06:57,120 --> 00:06:59,039
rsa

128
00:06:59,039 --> 00:07:01,759
you tell the receiver it's an hmac and

129
00:07:01,759 --> 00:07:02,720
it verifies

130
00:07:02,720 --> 00:07:06,479
it with the public key thinking it's rsa

131
00:07:06,479 --> 00:07:09,919
so this is the exploitation

132
00:07:09,919 --> 00:07:12,960
get a token sign with rsa decode the

133
00:07:12,960 --> 00:07:13,919
header

134
00:07:13,919 --> 00:07:17,199
and change the algorithm from rsa

135
00:07:17,199 --> 00:07:21,039
to hmac then tamper with the payload

136
00:07:21,039 --> 00:07:22,960
lastly sign the token with the public

137
00:07:22,960 --> 00:07:25,680
rsa key

138
00:07:25,680 --> 00:07:30,880
easy kid parameter

139
00:07:30,880 --> 00:07:34,000
so uh kid is an optional

140
00:07:34,000 --> 00:07:36,160
header claim which holds a key

141
00:07:36,160 --> 00:07:37,440
identifier

142
00:07:37,440 --> 00:07:40,720
particularly useful when you have

143
00:07:40,720 --> 00:07:41,360
multiple

144
00:07:41,360 --> 00:07:44,319
keys to sign the tokens and you need to

145
00:07:44,319 --> 00:07:45,360
look up the right

146
00:07:45,360 --> 00:07:47,680
one to verify the signature this is done

147
00:07:47,680 --> 00:07:50,000
prior to the verification

148
00:07:50,000 --> 00:07:52,879
of the signature

149
00:07:53,280 --> 00:07:56,840
so what kind of exploitation can we do

150
00:07:56,840 --> 00:07:59,280
here

151
00:07:59,280 --> 00:08:01,280
get assigned token containing kit

152
00:08:01,280 --> 00:08:02,879
parameter

153
00:08:02,879 --> 00:08:04,800
decode the header and change the kit

154
00:08:04,800 --> 00:08:06,240
with sql

155
00:08:06,240 --> 00:08:09,599
injection payload then tamper with a

156
00:08:09,599 --> 00:08:12,800
payload lastly sign the token using the

157
00:08:12,800 --> 00:08:14,160
return value

158
00:08:14,160 --> 00:08:18,720
from the sql injection and that's it

159
00:08:18,720 --> 00:08:21,039
rim

160
00:08:21,759 --> 00:08:25,360
next is wikis

161
00:08:25,360 --> 00:08:29,639
so here's an example jwt sign with

162
00:08:29,639 --> 00:08:34,000
hs256 any secret

163
00:08:38,839 --> 00:08:40,080
sn1f

164
00:08:40,080 --> 00:08:43,360
exploitation get the

165
00:08:43,360 --> 00:08:46,560
jwt cracker it's available online and

166
00:08:46,560 --> 00:08:47,360
then

167
00:08:47,360 --> 00:08:51,360
from this code runtime get the wt crack

168
00:08:51,360 --> 00:08:54,480
and then followed by the

169
00:08:54,480 --> 00:08:57,839
token itself you'll

170
00:08:57,839 --> 00:09:01,120
get this secret

171
00:09:01,120 --> 00:09:03,839
it's too short that's why you can easily

172
00:09:03,839 --> 00:09:09,200
do this

173
00:09:09,200 --> 00:09:11,680
and there's more you know in like

174
00:09:11,680 --> 00:09:12,399
invalid

175
00:09:12,399 --> 00:09:16,000
curve attacks yeah

176
00:09:16,000 --> 00:09:20,080
so uh as you can see here

177
00:09:20,080 --> 00:09:23,200
developers need like me we need easy to

178
00:09:23,200 --> 00:09:23,600
use

179
00:09:23,600 --> 00:09:27,040
tools that don't open the door to a ton

180
00:09:27,040 --> 00:09:29,760
of attacks

181
00:09:33,519 --> 00:09:36,160
there are a lot of ways for dwt's to go

182
00:09:36,160 --> 00:09:36,640
wrong

183
00:09:36,640 --> 00:09:39,760
big into the jose standards

184
00:09:39,760 --> 00:09:43,440
the jose uh jose you know advocate

185
00:09:43,440 --> 00:09:46,640
response to this criticism

186
00:09:46,640 --> 00:09:50,000
is use a specific library

187
00:09:50,000 --> 00:09:53,040
so this ships the blame into the library

188
00:09:53,040 --> 00:09:53,920
developers

189
00:09:53,920 --> 00:09:57,279
and the library users

190
00:09:58,399 --> 00:10:01,600
and it has industry anti-patterns

191
00:10:01,600 --> 00:10:04,640
like standard designers here

192
00:10:04,640 --> 00:10:07,600
let's give users a lot of choices it's

193
00:10:07,600 --> 00:10:08,240
not good

194
00:10:08,240 --> 00:10:12,480
right and then the advocates

195
00:10:12,480 --> 00:10:15,360
then blame the implementation rather

196
00:10:15,360 --> 00:10:15,680
than

197
00:10:15,680 --> 00:10:19,519
the standard and then the security

198
00:10:19,519 --> 00:10:21,040
experts

199
00:10:21,040 --> 00:10:24,480
just tell you declare standard harmful

200
00:10:24,480 --> 00:10:27,600
provide no alternative then we as

201
00:10:27,600 --> 00:10:32,959
developers roll our own crypto

202
00:10:32,959 --> 00:10:35,120
so yeah can you really blame the

203
00:10:35,120 --> 00:10:37,760
developers

204
00:10:38,399 --> 00:10:40,880
now we have here pasero platform

205
00:10:40,880 --> 00:10:41,600
agnostic

206
00:10:41,600 --> 00:10:44,640
security tokens

207
00:10:45,040 --> 00:10:47,680
so posero is everything you love about

208
00:10:47,680 --> 00:10:48,240
hosting

209
00:10:48,240 --> 00:10:51,760
jwt kw e jws without

210
00:10:51,760 --> 00:10:54,480
any of the many design deficits that

211
00:10:54,480 --> 00:10:55,440
plague the

212
00:10:55,440 --> 00:10:58,399
jose standards that's good definition

213
00:10:58,399 --> 00:11:00,160
from the pasero

214
00:11:00,160 --> 00:11:05,600
website so here's an example of pasero

215
00:11:05,600 --> 00:11:08,079
token

216
00:11:08,720 --> 00:11:12,720
grab my laser so it's divided into

217
00:11:12,720 --> 00:11:16,640
three and four here version

218
00:11:16,640 --> 00:11:20,399
and then purples then payload

219
00:11:20,399 --> 00:11:23,440
and there's a optional footer

220
00:11:23,440 --> 00:11:26,839
which is an example a version here v1 or

221
00:11:26,839 --> 00:11:28,800
v2

222
00:11:28,800 --> 00:11:32,000
and then local

223
00:11:32,399 --> 00:11:35,120
then the payload here up to here and

224
00:11:35,120 --> 00:11:37,040
then the filter

225
00:11:37,040 --> 00:11:40,880
so what is the version what does it do

226
00:11:40,880 --> 00:11:43,519
version tells you what version of pasero

227
00:11:43,519 --> 00:11:46,480
is being used with the token

228
00:11:46,480 --> 00:11:50,320
and if if v3 comes out

229
00:11:50,320 --> 00:11:53,680
a year from now then users would only be

230
00:11:53,680 --> 00:11:54,600
allowed to use

231
00:11:54,600 --> 00:11:58,079
v2 version 2 or version 3

232
00:11:58,079 --> 00:12:01,359
but no longer version one

233
00:12:02,399 --> 00:12:07,040
let's go to the next one the purpose

234
00:12:07,040 --> 00:12:09,920
which is local the public diff or

235
00:12:09,920 --> 00:12:11,920
different types of pasero

236
00:12:11,920 --> 00:12:15,519
so local means um referred to

237
00:12:15,519 --> 00:12:18,880
as symmetric or shared key facets

238
00:12:18,880 --> 00:12:19,519
because

239
00:12:19,519 --> 00:12:21,680
that is the type of the cryptography

240
00:12:21,680 --> 00:12:24,000
that they use

241
00:12:24,000 --> 00:12:27,680
always encrypted and

242
00:12:27,680 --> 00:12:29,920
an attacker that was able to get a hold

243
00:12:29,920 --> 00:12:31,760
of the token will not be able to see the

244
00:12:31,760 --> 00:12:34,639
data inside unless he has a key

245
00:12:34,639 --> 00:12:37,680
and then the public both paseros are

246
00:12:37,680 --> 00:12:38,000
always

247
00:12:38,000 --> 00:12:42,480
signed but public is not encrypted

248
00:12:42,480 --> 00:12:45,040
so that's the second part of the token

249
00:12:45,040 --> 00:12:46,079
the

250
00:12:46,079 --> 00:12:48,560
purpose

251
00:12:50,839 --> 00:12:53,279
so here um

252
00:12:53,279 --> 00:12:55,200
next is what's inside the passato

253
00:12:55,200 --> 00:12:57,600
payload

254
00:12:57,760 --> 00:13:02,079
this is an example of poseta payload

255
00:13:02,399 --> 00:13:05,600
we have you know id here

256
00:13:05,600 --> 00:13:09,680
email or permissions

257
00:13:11,200 --> 00:13:13,680
and here are the rest the payloads

258
00:13:13,680 --> 00:13:15,680
samples

259
00:13:15,680 --> 00:13:20,000
sub expiration issuers object audience

260
00:13:20,000 --> 00:13:23,680
variation not before issue that token id

261
00:13:23,680 --> 00:13:26,239
key id

262
00:13:30,720 --> 00:13:32,480
and then the last part which is an

263
00:13:32,480 --> 00:13:33,920
optional

264
00:13:33,920 --> 00:13:37,920
footer it's a base64 url

265
00:13:37,920 --> 00:13:41,519
some people wants to do key rotation

266
00:13:41,519 --> 00:13:47,279
so um they would want an encrypted

267
00:13:47,279 --> 00:13:50,079
part of the local token they get stored

268
00:13:50,079 --> 00:13:50,720
like

269
00:13:50,720 --> 00:13:53,519
a key identifier that references a

270
00:13:53,519 --> 00:13:54,480
specific

271
00:13:54,480 --> 00:14:03,839
public key or specific secret

272
00:14:03,920 --> 00:14:06,399
and here are some placenta

273
00:14:06,399 --> 00:14:08,800
implementations

274
00:14:08,800 --> 00:14:11,920
i'm not sure if you can see it here so

275
00:14:11,920 --> 00:14:12,399
let's

276
00:14:12,399 --> 00:14:16,959
uh take a look in the list one by one we

277
00:14:16,959 --> 00:14:17,440
have

278
00:14:17,440 --> 00:14:22,240
for c language here then for elixir

279
00:14:22,240 --> 00:14:25,360
for go language for java

280
00:14:25,360 --> 00:14:28,839
de pasetto which you'll see it uh

281
00:14:28,839 --> 00:14:31,760
later

282
00:14:31,760 --> 00:14:35,279
javascript acetojs lua

283
00:14:35,279 --> 00:14:40,880
for net and node.js

284
00:14:41,360 --> 00:14:44,880
for php python will be ros

285
00:14:44,880 --> 00:14:50,079
and swift then its features

286
00:14:56,160 --> 00:15:01,199
so a jwt versus uh pasetto

287
00:15:01,199 --> 00:15:03,519
um

288
00:15:04,480 --> 00:15:08,399
jwt here yes

289
00:15:08,399 --> 00:15:11,880
that's horror of knobs and levers and

290
00:15:11,880 --> 00:15:14,720
unauthenticated modes are available

291
00:15:14,720 --> 00:15:17,040
so json.tokens has a lot of options

292
00:15:17,040 --> 00:15:18,000
including often

293
00:15:18,000 --> 00:15:21,600
unauthenticated options right or spacero

294
00:15:21,600 --> 00:15:24,959
you have two options version and purpose

295
00:15:24,959 --> 00:15:28,480
everything is authenticated

296
00:15:28,480 --> 00:15:30,959
local tokens are always encrypted so

297
00:15:30,959 --> 00:15:32,959
that you don't actually uh

298
00:15:32,959 --> 00:15:36,399
click sensitive information

299
00:15:36,399 --> 00:15:40,639
for a local system

300
00:15:40,639 --> 00:15:43,759
so locate demo here

301
00:15:43,759 --> 00:15:46,639
i do this

302
00:15:47,839 --> 00:15:50,880
okay yeah

303
00:15:50,880 --> 00:15:54,880
so this is a java application

304
00:15:54,880 --> 00:15:58,000
and as you can see here we're importing

305
00:15:58,000 --> 00:16:03,040
jpacetto from here to here

306
00:16:05,279 --> 00:16:08,399
and now what does it do is it's

307
00:16:08,399 --> 00:16:11,759
just it's going to print some fields

308
00:16:11,759 --> 00:16:12,399
here

309
00:16:12,399 --> 00:16:15,519
so let's go to the top

310
00:16:15,600 --> 00:16:19,440
here all the way to the

311
00:16:19,440 --> 00:16:22,639
print line so yeah

312
00:16:22,639 --> 00:16:26,160
shared secret keypair

313
00:16:26,480 --> 00:16:29,279
here's create token we have great token

314
00:16:29,279 --> 00:16:30,079
here

315
00:16:30,079 --> 00:16:33,599
then parse token

316
00:16:34,480 --> 00:16:38,480
result get claims get audience

317
00:16:39,680 --> 00:16:44,959
and also custom claim here total claims

318
00:16:44,959 --> 00:16:46,880
here's the implementation of the create

319
00:16:46,880 --> 00:16:48,240
token

320
00:16:48,240 --> 00:16:51,040
in the above it returns this passato

321
00:16:51,040 --> 00:16:52,880
version one

322
00:16:52,880 --> 00:16:57,120
um we have set shared secret here

323
00:16:57,120 --> 00:17:00,480
enter then set issued at

324
00:17:00,480 --> 00:17:04,240
set expiration set audience

325
00:17:04,240 --> 00:17:07,760
set issuer then claim

326
00:17:07,760 --> 00:17:12,160
and then make it compact

327
00:17:12,160 --> 00:17:14,799
i also have a parse token here from

328
00:17:14,799 --> 00:17:16,880
pasero

329
00:17:16,880 --> 00:17:19,919
um parts builder set

330
00:17:19,919 --> 00:17:23,119
shared secret set public key we have

331
00:17:23,119 --> 00:17:23,919
build here

332
00:17:23,919 --> 00:17:26,720
then return it

333
00:17:28,960 --> 00:17:31,760
so yeah and then search secret again

334
00:17:31,760 --> 00:17:34,320
required audience record issuer build

335
00:17:34,320 --> 00:17:37,520
so let's try to run this

336
00:17:41,600 --> 00:17:44,400
so there you go there's the paseo token

337
00:17:44,400 --> 00:17:46,880
version one local

338
00:17:46,880 --> 00:17:52,400
then the payload yup over here

339
00:17:52,480 --> 00:17:55,840
we have token claims uh

340
00:17:55,840 --> 00:18:00,160
there is an audience

341
00:18:00,160 --> 00:18:03,280
and here's scott i don't know how to

342
00:18:03,280 --> 00:18:06,320
pronounce his name sorry um

343
00:18:06,320 --> 00:18:10,559
he's the the writer of pasero

344
00:18:10,559 --> 00:18:14,400
so says here's the at least

345
00:18:14,400 --> 00:18:16,480
some some list of cryptography designed

346
00:18:16,480 --> 00:18:18,240
for humans

347
00:18:18,240 --> 00:18:21,200
opinionated interfaces with few options

348
00:18:21,200 --> 00:18:23,039
now you should have an opinionated

349
00:18:23,039 --> 00:18:24,000
interface

350
00:18:24,000 --> 00:18:28,400
so here's we have encrypt and decrypt

351
00:18:28,400 --> 00:18:30,559
the encrypt here should be your api for

352
00:18:30,559 --> 00:18:32,960
any encryption library

353
00:18:32,960 --> 00:18:36,559
then users shouldn't ever need to even

354
00:18:36,559 --> 00:18:36,880
know

355
00:18:36,880 --> 00:18:39,840
what enough is to encrypt safely persian

356
00:18:39,840 --> 00:18:43,440
protocols with hard-coded cyber suites

357
00:18:43,440 --> 00:18:45,679
valid by cryptographers of course then

358
00:18:45,679 --> 00:18:46,799
logically separate

359
00:18:46,799 --> 00:18:50,520
symmetry cryptography from asymmetric

360
00:18:50,520 --> 00:18:52,080
cryptography

361
00:18:52,080 --> 00:18:53,840
api should be simple and easy to

362
00:18:53,840 --> 00:18:55,280
understand and actually there's a lot

363
00:18:55,280 --> 00:18:56,480
more

364
00:18:56,480 --> 00:18:59,760
you should see uh his presentation video

365
00:18:59,760 --> 00:19:02,480
it's in the internet i would highly

366
00:19:02,480 --> 00:19:03,440
recommend you to

367
00:19:03,440 --> 00:19:06,559
watch it so

368
00:19:06,559 --> 00:19:09,760
yeah um thank you for

369
00:19:09,760 --> 00:19:14,000
listening that's uh an introduction to

370
00:19:14,000 --> 00:19:19,120
pasero hope you learned something

371
00:19:19,200 --> 00:19:24,559
okay i'm out thanks

