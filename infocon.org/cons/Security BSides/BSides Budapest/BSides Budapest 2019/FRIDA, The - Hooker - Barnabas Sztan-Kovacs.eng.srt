1
00:00:02,550 --> 00:00:09,000
so hello everyone ladies and gentlemen

2
00:00:05,430 --> 00:00:10,559
my name is Barnabas tan Kovich and in

3
00:00:09,000 --> 00:00:14,670
this presentation we are going to dive

4
00:00:10,559 --> 00:00:18,150
into the topic of hookers and autopsy so

5
00:00:14,670 --> 00:00:20,910
first things first Who am I as you can

6
00:00:18,150 --> 00:00:23,580
say my name is not for the weak so I

7
00:00:20,910 --> 00:00:27,509
just use my initials and you can follow

8
00:00:23,580 --> 00:00:31,288
me on Twitter by the end of cyber SK the

9
00:00:27,510 --> 00:00:33,629
ink is freshly died on my BSC and I'm an

10
00:00:31,289 --> 00:00:36,690
A student of the Croesus IT security lab

11
00:00:33,629 --> 00:00:39,780
here in Budapest all right now I'm a

12
00:00:36,690 --> 00:00:44,129
technical innovation advisor at M RGA

13
00:00:39,780 --> 00:00:48,180
fitas yeah I know it sounds like

14
00:00:44,130 --> 00:00:51,030
 but it's like part cyber

15
00:00:48,180 --> 00:00:55,019
security engineer and bigger part making

16
00:00:51,030 --> 00:00:58,410
my colleagues lives much harder but they

17
00:00:55,020 --> 00:01:00,660
can tell you that also and another

18
00:00:58,410 --> 00:01:03,059
interesting thing I was a routine

19
00:01:00,660 --> 00:01:06,479
participant at NATO's Lock shields

20
00:01:03,059 --> 00:01:08,850
partner on last year and I had the idea

21
00:01:06,479 --> 00:01:12,990
to put these beautiful Hungarian letters

22
00:01:08,850 --> 00:01:15,178
in passwords and when the red team had

23
00:01:12,990 --> 00:01:18,740
these beautiful Hungarian letters in the

24
00:01:15,179 --> 00:01:21,569
passwords they didn't like me that much

25
00:01:18,740 --> 00:01:24,658
so basically I'm just good at delivering

26
00:01:21,569 --> 00:01:27,329
misery to people but it's not for me

27
00:01:24,659 --> 00:01:29,039
let's talk about the talk in this

28
00:01:27,329 --> 00:01:31,380
presentation you will be introduced a

29
00:01:29,039 --> 00:01:35,450
fantastic tool for monitoring and

30
00:01:31,380 --> 00:01:39,658
reverse engineering you will know how to

31
00:01:35,450 --> 00:01:41,819
monitor and manipulate applications and

32
00:01:39,659 --> 00:01:48,179
not only on Windows but also on other

33
00:01:41,819 --> 00:01:52,319
platforms yeah personally I have never

34
00:01:48,179 --> 00:01:55,079
tried the bet hooker but as Freda was my

35
00:01:52,319 --> 00:01:57,479
first one but my colleagues have told me

36
00:01:55,079 --> 00:01:59,189
a lot about bath hookers and that they

37
00:01:57,479 --> 00:02:02,130
come with a lot of problems and they

38
00:01:59,189 --> 00:02:03,568
raise even more problems and all they

39
00:02:02,130 --> 00:02:05,479
just randomly crash when you try to

40
00:02:03,569 --> 00:02:09,920
attach them org attention amor

41
00:02:05,479 --> 00:02:11,690
things like that so before we go into

42
00:02:09,919 --> 00:02:14,899
the presentation I want to make some

43
00:02:11,690 --> 00:02:17,959
things clear before we start the

44
00:02:14,900 --> 00:02:19,220
subtitle is hookers an autopsy so I want

45
00:02:17,959 --> 00:02:22,910
to talk about this in a few minutes

46
00:02:19,220 --> 00:02:24,880
before anyone would misunderstand me so

47
00:02:22,910 --> 00:02:27,769
what is hooker

48
00:02:24,880 --> 00:02:30,590
hooking is a general term as it covers a

49
00:02:27,769 --> 00:02:33,470
wide range of techniques and these

50
00:02:30,590 --> 00:02:36,769
techniques work in a special way as they

51
00:02:33,470 --> 00:02:39,440
monitor or manipulate intercepted

52
00:02:36,769 --> 00:02:41,299
function calls and events and messages

53
00:02:39,440 --> 00:02:46,400
placed between the software components

54
00:02:41,299 --> 00:02:49,250
and while we are here let's talk about

55
00:02:46,400 --> 00:02:52,220
the misbelief that hooking is always

56
00:02:49,250 --> 00:02:56,239
something bad or something evil it's not

57
00:02:52,220 --> 00:02:59,319
so hooking is utilized by many non

58
00:02:56,239 --> 00:03:00,970
malicious applications like debuggers

59
00:02:59,319 --> 00:03:05,179
anti-virus software

60
00:03:00,970 --> 00:03:08,540
benchmarking software so they all

61
00:03:05,180 --> 00:03:11,780
operate by utilizing hooking and they're

62
00:03:08,540 --> 00:03:14,388
still not malicious so instrumentation

63
00:03:11,780 --> 00:03:17,329
hooker is the application of script

64
00:03:14,389 --> 00:03:21,709
which does the hooking the other one is

65
00:03:17,329 --> 00:03:24,319
out of sync so during this so-called

66
00:03:21,709 --> 00:03:27,799
autopsy our goal is to get as much

67
00:03:24,319 --> 00:03:31,458
information about the behavior the inner

68
00:03:27,799 --> 00:03:35,690
state of the autopsied application as

69
00:03:31,459 --> 00:03:37,340
much as we can but we just can't as the

70
00:03:35,690 --> 00:03:39,920
application like hey what are you doing

71
00:03:37,340 --> 00:03:44,420
inside because won't answer so we will

72
00:03:39,920 --> 00:03:47,319
need some tools to tinker with these

73
00:03:44,420 --> 00:03:49,130
tools are disassemblers which are

74
00:03:47,319 --> 00:03:51,078
investigating the application it's a

75
00:03:49,130 --> 00:03:53,739
static state but it's not running so

76
00:03:51,079 --> 00:03:57,500
it's like the reload to see the doctors

77
00:03:53,739 --> 00:04:00,049
execute on dead patients and there are

78
00:03:57,500 --> 00:04:02,569
debuggers which do the same but in run

79
00:04:00,049 --> 00:04:06,349
time so why the application is alive and

80
00:04:02,569 --> 00:04:10,760
running and this is the kind of autopsy

81
00:04:06,349 --> 00:04:14,000
doctors don't do so you may have figure

82
00:04:10,760 --> 00:04:16,700
it out it's kinda obvious now that the

83
00:04:14,000 --> 00:04:19,190
autopsy is basically reverse engineering

84
00:04:16,700 --> 00:04:21,289
in this talk but

85
00:04:19,190 --> 00:04:23,060
you know hookers and reverse-engineering

86
00:04:21,290 --> 00:04:28,340
doesn't sound that and saying this is

87
00:04:23,060 --> 00:04:31,490
not good for marketing so yeah so let's

88
00:04:28,340 --> 00:04:34,609
start with a quick hands up all who have

89
00:04:31,490 --> 00:04:37,850
ever tried to somehow reverse engineer

90
00:04:34,610 --> 00:04:40,190
or peek into an application or adapt by

91
00:04:37,850 --> 00:04:45,680
debugging by disassembling or even

92
00:04:40,190 --> 00:04:48,680
opening it in notepad counts wow we are

93
00:04:45,680 --> 00:04:51,950
pretty money at guys down there it's

94
00:04:48,680 --> 00:04:58,910
cool and how many of you have tried the

95
00:04:51,950 --> 00:05:03,560
hooker in these terms there's a bit

96
00:04:58,910 --> 00:05:06,260
fewer now ok pretty cool let's get down

97
00:05:03,560 --> 00:05:08,000
to business I present some of the tools

98
00:05:06,260 --> 00:05:11,390
which can be used for reverse

99
00:05:08,000 --> 00:05:15,170
engineering applications and evaluate

100
00:05:11,390 --> 00:05:19,729
from a beginner hackers point of view so

101
00:05:15,170 --> 00:05:21,220
first on our list is a windbg it looks

102
00:05:19,730 --> 00:05:24,470
like this

103
00:05:21,220 --> 00:05:27,980
it's cool and all but it has some real

104
00:05:24,470 --> 00:05:31,370
nice features but it looks very pale and

105
00:05:27,980 --> 00:05:34,430
it's not so user-friendly for a beginner

106
00:05:31,370 --> 00:05:36,800
for an experienced dice it's pretty

107
00:05:34,430 --> 00:05:39,230
confusing and really triggers the what

108
00:05:36,800 --> 00:05:42,710
what is this feeling on experienced

109
00:05:39,230 --> 00:05:47,120
people so we're going to need another

110
00:05:42,710 --> 00:05:50,960
tool and I talked about imitative in the

111
00:05:47,120 --> 00:05:53,390
debugger it's next on our list as you

112
00:05:50,960 --> 00:05:56,330
can see it has some pretty happy bright

113
00:05:53,390 --> 00:05:58,940
colors and it's the arc like it is a

114
00:05:56,330 --> 00:06:01,789
night mode and we all know that the real

115
00:05:58,940 --> 00:06:06,260
hackers only use night mode so it's like

116
00:06:01,790 --> 00:06:10,120
200% cooler than windbg but the problem

117
00:06:06,260 --> 00:06:14,539
is that we only see our beard exams and

118
00:06:10,120 --> 00:06:16,880
addresses and assembly code so I think

119
00:06:14,540 --> 00:06:19,669
for a beginner it still really triggers

120
00:06:16,880 --> 00:06:24,680
the with the effector so we are going to

121
00:06:19,669 --> 00:06:28,490
need another tool for this which is API

122
00:06:24,680 --> 00:06:31,700
monitor it Peaks into an applications

123
00:06:28,490 --> 00:06:34,220
Windows API usage and

124
00:06:31,700 --> 00:06:38,090
we can see what doing those API calls

125
00:06:34,220 --> 00:06:40,160
have the phrase application code that's

126
00:06:38,090 --> 00:06:44,030
this is more like it because as you can

127
00:06:40,160 --> 00:06:46,100
see it's informative it has letters it's

128
00:06:44,030 --> 00:06:49,909
descriptive it doesn't cause a mental

129
00:06:46,100 --> 00:06:52,400
breakdown for less experienced people so

130
00:06:49,910 --> 00:06:56,090
it's good for us sadly it has no dark

131
00:06:52,400 --> 00:06:58,310
mode but one's got to make sacrifices so

132
00:06:56,090 --> 00:07:00,979
ap emulator is a pretty good choice

133
00:06:58,310 --> 00:07:04,460
but let's say we not only want to

134
00:07:00,980 --> 00:07:07,550
monitor applications but we also want to

135
00:07:04,460 --> 00:07:09,830
manipulate them then we can use freedom

136
00:07:07,550 --> 00:07:12,230
free that has no graphical user

137
00:07:09,830 --> 00:07:15,320
interface sadly but that's not a problem

138
00:07:12,230 --> 00:07:19,370
because real hackers only use terminals

139
00:07:15,320 --> 00:07:21,680
and freida can trace functions in

140
00:07:19,370 --> 00:07:24,830
applications it can operate as a

141
00:07:21,680 --> 00:07:27,320
debugger it can discover internal

142
00:07:24,830 --> 00:07:30,729
functions in right in runtime for

143
00:07:27,320 --> 00:07:33,409
tracing intercepting and manipulating

144
00:07:30,730 --> 00:07:34,150
yeah it's cool but what does it mean

145
00:07:33,410 --> 00:07:38,530
exactly

146
00:07:34,150 --> 00:07:43,370
so frida is a dynamic information

147
00:07:38,530 --> 00:07:46,669
instrumentation to get it does its thing

148
00:07:43,370 --> 00:07:48,940
by injecting the google chrome's v8

149
00:07:46,670 --> 00:07:52,190
JavaScript engine into a process and

150
00:07:48,940 --> 00:07:56,030
then executes your own JavaScript in the

151
00:07:52,190 --> 00:07:59,180
application few things about frida it's

152
00:07:56,030 --> 00:08:02,960
free as in freedom it's portable on

153
00:07:59,180 --> 00:08:07,190
multiple platforms such as Windows Mac

154
00:08:02,960 --> 00:08:11,330
OS Linux for mobile devices like Android

155
00:08:07,190 --> 00:08:13,940
and iOS and even on qnx which I didn't

156
00:08:11,330 --> 00:08:16,640
know it existed until now but actually

157
00:08:13,940 --> 00:08:19,280
it's an embedded platform and I think

158
00:08:16,640 --> 00:08:22,780
that's pretty cool the data we have this

159
00:08:19,280 --> 00:08:26,239
stuff or embedded platforms too and it's

160
00:08:22,780 --> 00:08:29,390
excessively scriptable in many languages

161
00:08:26,240 --> 00:08:35,240
such as a swift and Python and dotnet

162
00:08:29,390 --> 00:08:37,130
and JavaScript and even C okay so we

163
00:08:35,240 --> 00:08:42,020
know what fear is but how does freedom

164
00:08:37,130 --> 00:08:45,150
work for this model there we have our

165
00:08:42,020 --> 00:08:48,090
executable which has the head

166
00:08:45,150 --> 00:08:51,390
of the windows API calls it uses in a

167
00:08:48,090 --> 00:08:54,660
table called import address table this

168
00:08:51,390 --> 00:08:57,360
table is empty by default and when the

169
00:08:54,660 --> 00:08:59,579
application launches it fills up with

170
00:08:57,360 --> 00:09:01,680
the memory addresses of the windows api

171
00:08:59,580 --> 00:09:06,000
calls or the application they'll be

172
00:09:01,680 --> 00:09:09,030
using during its run and on the other

173
00:09:06,000 --> 00:09:12,420
side that we have our windows api with

174
00:09:09,030 --> 00:09:14,370
the functions are implemented the body

175
00:09:12,420 --> 00:09:18,209
of the functions the revolting functions

176
00:09:14,370 --> 00:09:21,660
and this is called by the executable

177
00:09:18,210 --> 00:09:25,400
during runtime okay it's pretty good

178
00:09:21,660 --> 00:09:28,709
let's model how it works on our standard

179
00:09:25,400 --> 00:09:31,740
application version windows and there

180
00:09:28,710 --> 00:09:34,380
comes our - it's the frida which

181
00:09:31,740 --> 00:09:38,700
contains the node and core components in

182
00:09:34,380 --> 00:09:42,590
the external tool and then it injects

183
00:09:38,700 --> 00:09:45,930
this little module into our executable

184
00:09:42,590 --> 00:09:48,690
which contains the Frida agent it has

185
00:09:45,930 --> 00:09:51,540
the JavaScript engine and our own

186
00:09:48,690 --> 00:09:55,710
JavaScript which we wrote - who can

187
00:09:51,540 --> 00:09:58,170
manipulate the application and these

188
00:09:55,710 --> 00:10:01,110
parts the external and inner free depart

189
00:09:58,170 --> 00:10:09,990
do you communicate with Jason messages

190
00:10:01,110 --> 00:10:12,620
all along the run ok now that we know

191
00:10:09,990 --> 00:10:15,360
how what figure is and how it works

192
00:10:12,620 --> 00:10:16,340
let's look at some hooking possibilities

193
00:10:15,360 --> 00:10:19,470
with Frida

194
00:10:16,340 --> 00:10:22,050
for instance let's just take a look at

195
00:10:19,470 --> 00:10:25,020
this very basic model so we have the

196
00:10:22,050 --> 00:10:27,150
user application we have the system on

197
00:10:25,020 --> 00:10:31,590
the right side and we have the free

198
00:10:27,150 --> 00:10:33,750
agent in the middle basically it's in

199
00:10:31,590 --> 00:10:38,820
the executable but it's easier to

200
00:10:33,750 --> 00:10:40,770
describe it this way so the user calls

201
00:10:38,820 --> 00:10:45,300
the windows api function to execute

202
00:10:40,770 --> 00:10:49,710
alpha dog but i'm free the agent is

203
00:10:45,300 --> 00:10:50,910
trained to intercept this calls and it

204
00:10:49,710 --> 00:10:54,000
sees that Oh

205
00:10:50,910 --> 00:10:56,579
so exactly we just entered me and I want

206
00:10:54,000 --> 00:10:58,529
to attach this beat the dog bed do they

207
00:10:56,580 --> 00:11:02,039
execute the boss list

208
00:10:58,529 --> 00:11:06,419
so when it leaves the Frida agent and

209
00:11:02,039 --> 00:11:11,218
the executable it goes to the Windows 8

210
00:11:06,419 --> 00:11:13,619
bank system and has our two arguments to

211
00:11:11,219 --> 00:11:16,469
execute off of that bat what the user

212
00:11:13,619 --> 00:11:20,329
called and also beta dot that what our

213
00:11:16,469 --> 00:11:23,099
feeder agent wanted to do for the

214
00:11:20,329 --> 00:11:24,988
operating system it's not problem it

215
00:11:23,099 --> 00:11:30,329
executes it and returns with the answers

216
00:11:24,989 --> 00:11:32,339
of both dot bat files and now we have a

217
00:11:30,329 --> 00:11:36,419
problem because we have two outputs when

218
00:11:32,339 --> 00:11:40,649
the user encode one so we have to define

219
00:11:36,419 --> 00:11:42,089
the only function when the function

220
00:11:40,649 --> 00:11:46,709
comes back from the system and goes back

221
00:11:42,089 --> 00:11:50,309
to the user and we have to scrape or the

222
00:11:46,709 --> 00:11:52,468
beta dot bets our output and like send

223
00:11:50,309 --> 00:11:54,839
it to our server or do something with it

224
00:11:52,469 --> 00:11:56,609
that's suppose we wanted to gather his

225
00:11:54,839 --> 00:11:59,909
information so you just send it to our

226
00:11:56,609 --> 00:12:01,949
server and send the output of alpha dot

227
00:11:59,909 --> 00:12:04,379
bat back to the user so the user

228
00:12:01,949 --> 00:12:08,008
basically sees nothing about what just

229
00:12:04,379 --> 00:12:13,529
happened and we still got what we wanted

230
00:12:08,009 --> 00:12:20,849
so I guess it's pretty cool because it's

231
00:12:13,529 --> 00:12:23,579
just so stealthy and so hacky hi ok we

232
00:12:20,849 --> 00:12:27,959
have this and we have a very huge load

233
00:12:23,579 --> 00:12:33,059
of API calls but why what can we use

234
00:12:27,959 --> 00:12:34,258
this for we can do security auditing or

235
00:12:33,059 --> 00:12:38,999
which is basically spying on

236
00:12:34,259 --> 00:12:42,209
applications we can manipulate arguments

237
00:12:38,999 --> 00:12:44,849
and return values like we did it are in

238
00:12:42,209 --> 00:12:47,929
the only functional script of an output

239
00:12:44,849 --> 00:12:51,479
and we can develop it for execution

240
00:12:47,929 --> 00:12:53,608
during the users API calls or I guess we

241
00:12:51,479 --> 00:12:57,859
added this B to the bet to the

242
00:12:53,609 --> 00:12:57,859
executables list or in the model before

243
00:12:58,519 --> 00:13:05,629
so security of the thing is as I said

244
00:13:02,519 --> 00:13:09,149
spying but this is what basically our

245
00:13:05,629 --> 00:13:11,129
API monitor does and we wanted to do

246
00:13:09,149 --> 00:13:12,390
some more wanted more function at the

247
00:13:11,129 --> 00:13:16,440
end that's why we

248
00:13:12,390 --> 00:13:19,140
chose free in the first place so let's

249
00:13:16,440 --> 00:13:22,710
rather take a look at the manipulating

250
00:13:19,140 --> 00:13:28,290
arguments and the return values by this

251
00:13:22,710 --> 00:13:32,310
we will do this by doing a small

252
00:13:28,290 --> 00:13:39,360
demonstration on an average male various

253
00:13:32,310 --> 00:13:44,520
abilities so I guess everyone knows what

254
00:13:39,360 --> 00:13:47,220
Malvo are technically a malicious

255
00:13:44,520 --> 00:13:50,550
software but what is malware analyzes

256
00:13:47,220 --> 00:13:53,510
well it's essentially the reverse

257
00:13:50,550 --> 00:13:56,640
engineering of that malware sample the

258
00:13:53,510 --> 00:13:59,490
process of learning what is inside the

259
00:13:56,640 --> 00:14:03,210
mother how does it work its behavior its

260
00:13:59,490 --> 00:14:06,060
function calls its operation the service

261
00:14:03,210 --> 00:14:10,410
is connected so actually it's pretty

262
00:14:06,060 --> 00:14:12,930
much and why are we doing this we are

263
00:14:10,410 --> 00:14:17,819
doing this because if we learn how the

264
00:14:12,930 --> 00:14:20,459
malware works we can stop it we can look

265
00:14:17,820 --> 00:14:24,600
for that behavior and we can build a

266
00:14:20,460 --> 00:14:26,820
decent protection against it now other

267
00:14:24,600 --> 00:14:29,010
authors know this and they want to

268
00:14:26,820 --> 00:14:33,060
prevent the reverse engineering of the

269
00:14:29,010 --> 00:14:38,510
malware and they do this by these and he

270
00:14:33,060 --> 00:14:38,510
analyzes measurements they take

271
00:14:38,660 --> 00:14:48,140
basically is the response to the mother

272
00:14:41,010 --> 00:14:52,080
analyzes and it's done by somehow

273
00:14:48,140 --> 00:14:57,840
looking for the traces and clues of this

274
00:14:52,080 --> 00:15:01,350
reverse engineering thing well it can be

275
00:14:57,840 --> 00:15:04,700
done really many ways but the most basic

276
00:15:01,350 --> 00:15:09,050
one is checking for virtual machine or

277
00:15:04,700 --> 00:15:11,730
existence but why because modernists

278
00:15:09,050 --> 00:15:13,650
analyze malware in virtual machines as

279
00:15:11,730 --> 00:15:16,620
they don't want to analyze malware in

280
00:15:13,650 --> 00:15:19,020
their own computer as doctors don't

281
00:15:16,620 --> 00:15:23,220
bring their patient D home and autopsy

282
00:15:19,020 --> 00:15:25,740
it on their lunch table so LVM checking

283
00:15:23,220 --> 00:15:27,570
is the most easy thing and it's

284
00:15:25,740 --> 00:15:33,540
and by checking in the Windows registry

285
00:15:27,570 --> 00:15:36,090
for our Wien phrases there are more

286
00:15:33,540 --> 00:15:40,079
sophisticated ways to check for villians

287
00:15:36,090 --> 00:15:45,650
other than checking the registry but for

288
00:15:40,080 --> 00:15:47,880
now this will be the one we are using so

289
00:15:45,650 --> 00:15:51,980
let's take a small break from a

290
00:15:47,880 --> 00:15:51,980
storytelling and get our hands dirty you

291
00:15:53,420 --> 00:15:59,339
can see anything

292
00:15:55,110 --> 00:16:01,920
let's cool now you can see it's even

293
00:15:59,340 --> 00:16:04,380
more cooler so I just happened to have

294
00:16:01,920 --> 00:16:09,870
this small bear right here on my desktop

295
00:16:04,380 --> 00:16:12,540
and if it launch is smaller we can see

296
00:16:09,870 --> 00:16:16,500
that it writes hello world is it visible

297
00:16:12,540 --> 00:16:21,390
by everyone okay so it writes hello

298
00:16:16,500 --> 00:16:24,210
world and exits the keystroke and if he

299
00:16:21,390 --> 00:16:28,439
executes it again and again and again he

300
00:16:24,210 --> 00:16:31,350
does the same thing so somehow the

301
00:16:28,440 --> 00:16:36,390
malware just are that the hunch that

302
00:16:31,350 --> 00:16:47,310
it's a virtual machine or some analyzes

303
00:16:36,390 --> 00:16:49,380
environment work for me please so how

304
00:16:47,310 --> 00:16:52,560
will we have to treat them or we can

305
00:16:49,380 --> 00:16:54,510
attach reader on the fly to an

306
00:16:52,560 --> 00:16:56,489
application but the problem is here the

307
00:16:54,510 --> 00:16:59,400
Demel are already rendered checks as you

308
00:16:56,490 --> 00:17:03,930
can see it instantly writes out that

309
00:16:59,400 --> 00:17:06,510
hello world little line so we know that

310
00:17:03,930 --> 00:17:09,329
it already ran the checks when we will

311
00:17:06,510 --> 00:17:10,980
let that should freedom so we have to

312
00:17:09,329 --> 00:17:14,458
somehow make work around this problem

313
00:17:10,980 --> 00:17:17,790
and it's done by suspended starting it's

314
00:17:14,459 --> 00:17:20,160
basically creating a process and not

315
00:17:17,790 --> 00:17:22,530
giving it creating a process in a

316
00:17:20,160 --> 00:17:26,010
suspended state where it's not getting a

317
00:17:22,530 --> 00:17:28,950
single sea beauty or execution

318
00:17:26,010 --> 00:17:31,170
possibility from the OS so when the

319
00:17:28,950 --> 00:17:33,930
process is created it haven't run a

320
00:17:31,170 --> 00:17:36,750
single line of code and then we can

321
00:17:33,930 --> 00:17:39,120
attach Frida and then let them all die

322
00:17:36,750 --> 00:17:39,540
Ron Wyatt Frida is already intercepting

323
00:17:39,120 --> 00:17:43,110
all he

324
00:17:39,540 --> 00:17:45,389
API calls or its API calls so we need to

325
00:17:43,110 --> 00:17:48,000
have the on enter and only functions

326
00:17:45,390 --> 00:17:50,460
designed I broke this model from the

327
00:17:48,000 --> 00:17:53,340
slide before so we can see the malware

328
00:17:50,460 --> 00:17:57,080
our best thing to always on the on

329
00:17:53,340 --> 00:18:00,389
intend getting banged in answer to only

330
00:17:57,080 --> 00:18:04,919
for simplicity reasons we will design

331
00:18:00,390 --> 00:18:07,740
the only function as we can always give

332
00:18:04,920 --> 00:18:09,660
back the answer the male one studio so

333
00:18:07,740 --> 00:18:11,850
how do we reach rivers and generally

334
00:18:09,660 --> 00:18:14,670
smaller how do we know how do we know

335
00:18:11,850 --> 00:18:18,209
what does it want to hear or what is it

336
00:18:14,670 --> 00:18:18,570
checking for we can use this little tool

337
00:18:18,210 --> 00:18:23,160
here

338
00:18:18,570 --> 00:18:27,780
it's called process monitor it's visible

339
00:18:23,160 --> 00:18:30,990
too cool and we can check what registry

340
00:18:27,780 --> 00:18:32,820
calls developer makes we can see that

341
00:18:30,990 --> 00:18:36,480
stuck in Texas that has called these

342
00:18:32,820 --> 00:18:38,550
operations for the path of this one is a

343
00:18:36,480 --> 00:18:42,180
weird show box castrations it's a common

344
00:18:38,550 --> 00:18:45,600
tool on virtual machines and we can

345
00:18:42,180 --> 00:18:49,170
check it that it's right here in our

346
00:18:45,600 --> 00:18:51,120
computer so okay we could do its

347
00:18:49,170 --> 00:18:56,880
registry key but we all know how fragile

348
00:18:51,120 --> 00:18:59,040
windows is so let's just try to lie to

349
00:18:56,880 --> 00:19:00,200
them over somehow

350
00:18:59,040 --> 00:19:03,899
[Music]

351
00:19:00,200 --> 00:19:09,600
the rivers an application on Windows you

352
00:19:03,900 --> 00:19:15,510
have to install Linux or Windows yeah I

353
00:19:09,600 --> 00:19:22,939
know and check for the application on

354
00:19:15,510 --> 00:19:27,300
the path for users name let's stop and

355
00:19:22,940 --> 00:19:29,100
we can see that statement is here so we

356
00:19:27,300 --> 00:19:32,700
can use this ability to our reverse

357
00:19:29,100 --> 00:19:36,540
engineers love it strings and give it

358
00:19:32,700 --> 00:19:38,820
our Malheur so it gives us a lot of

359
00:19:36,540 --> 00:19:40,649
output and we don't know what to look at

360
00:19:38,820 --> 00:19:42,629
but we know that from the process

361
00:19:40,650 --> 00:19:46,860
monitor that we need to look for

362
00:19:42,630 --> 00:19:49,740
registry operations so we just grab for

363
00:19:46,860 --> 00:19:53,010
reg open

364
00:19:49,740 --> 00:19:55,020
and voila we have these windows API

365
00:19:53,010 --> 00:19:58,770
calls which we are tracing which we are

366
00:19:55,020 --> 00:20:03,000
looking for so let's pop our code editor

367
00:19:58,770 --> 00:20:06,000
and check what JavaScript you have there

368
00:20:03,000 --> 00:20:09,840
so we can see that the API call will be

369
00:20:06,000 --> 00:20:12,300
the registry open kxw the ideal name is

370
00:20:09,840 --> 00:20:15,649
where this code is in the windows api

371
00:20:12,300 --> 00:20:18,210
it's stolen from ducks Microsoft and

372
00:20:15,650 --> 00:20:22,080
basically this is just a lot of logging

373
00:20:18,210 --> 00:20:26,040
and this is our masterpiece our code

374
00:20:22,080 --> 00:20:28,730
which will change world if the windows

375
00:20:26,040 --> 00:20:32,250
API call returns zero it means that the

376
00:20:28,730 --> 00:20:34,440
registry key is found so we have to say

377
00:20:32,250 --> 00:20:37,920
it's not fun it's not there so we just

378
00:20:34,440 --> 00:20:41,940
return to which is our the definition of

379
00:20:37,920 --> 00:20:47,070
it's not there it's not found and if we

380
00:20:41,940 --> 00:20:49,650
now launch our application with this

381
00:20:47,070 --> 00:20:53,580
terminal so this is our three letters of

382
00:20:49,650 --> 00:20:57,660
Pi and this is our stock net exe you

383
00:20:53,580 --> 00:20:59,490
just have to launch it first I'm not

384
00:20:57,660 --> 00:21:02,070
cheating so as you can see starting

385
00:20:59,490 --> 00:21:05,250
taxes just write in however but if we do

386
00:21:02,070 --> 00:21:06,559
it it's freely attached we lie to the

387
00:21:05,250 --> 00:21:11,850
model better

388
00:21:06,559 --> 00:21:17,070
it thinks that it's real system and

389
00:21:11,850 --> 00:21:21,209
attacks us so I gotta clean my computer

390
00:21:17,070 --> 00:21:21,899
from mime over now so thank you for your

391
00:21:21,210 --> 00:21:25,170
attention

392
00:21:21,900 --> 00:21:27,920
and if you have any questions please

393
00:21:25,170 --> 00:21:27,920
feel free to ask

