1
00:00:03,300 --> 00:00:12,849
okay so this is a worth top-10 like I'm

2
00:00:07,599 --> 00:00:15,429
five so let's just start so Who am I I

3
00:00:12,849 --> 00:00:17,710
am probably very nervous right now

4
00:00:15,429 --> 00:00:22,000
reading this because this is my first

5
00:00:17,710 --> 00:00:24,670
talk ever so yeah you know I expected to

6
00:00:22,000 --> 00:00:28,000
be nervous but wasn't it wasn't on this

7
00:00:24,670 --> 00:00:30,580
level but it probably will get better so

8
00:00:28,000 --> 00:00:32,829
I am also making a youtube video about

9
00:00:30,580 --> 00:00:36,879
my experience of doing this my first

10
00:00:32,829 --> 00:00:40,089
ever talk so I tried to do some kind of

11
00:00:36,879 --> 00:00:43,260
a video afterwards about going from zero

12
00:00:40,089 --> 00:00:45,550
to doing an actual talk so yeah that's

13
00:00:43,260 --> 00:00:47,019
gonna be interesting also it's super

14
00:00:45,550 --> 00:00:48,760
hard to walk around with like a big

15
00:00:47,019 --> 00:00:51,940
camera like that it's super super

16
00:00:48,760 --> 00:00:53,858
difficult so yeah also I'm a bug bounty

17
00:00:51,940 --> 00:00:57,129
hunter web developer and high school

18
00:00:53,859 --> 00:00:59,469
students also I'm a 2018 background MVP

19
00:00:57,129 --> 00:01:03,300
so that's why I'm showing off my t-shirt

20
00:00:59,469 --> 00:01:06,549
which no one can actually see but it's

21
00:01:03,300 --> 00:01:08,920
yeah I never heard that before so and

22
00:01:06,549 --> 00:01:11,740
I'm also co-host of the podcast naming

23
00:01:08,920 --> 00:01:13,719
secure space with the space hung so you

24
00:01:11,740 --> 00:01:15,429
should check that out I'm just starting

25
00:01:13,719 --> 00:01:20,500
a timer here because I'm gonna mess it

26
00:01:15,430 --> 00:01:22,360
up later so here we go yeah so for

27
00:01:20,500 --> 00:01:24,640
questions I'm trying to do a different

28
00:01:22,360 --> 00:01:27,219
approach so there is like a tinkle

29
00:01:24,640 --> 00:01:32,350
slider which is a web app where you can

30
00:01:27,219 --> 00:01:34,630
ask questions so you can just open it in

31
00:01:32,350 --> 00:01:37,240
your browser so if you go to slide that

32
00:01:34,630 --> 00:01:39,219
do and enter the event code event code

33
00:01:37,240 --> 00:01:42,339
here is always I'm really lucky to have

34
00:01:39,219 --> 00:01:44,079
that name because I mean but if you

35
00:01:42,340 --> 00:01:46,090
enter the code or you can ask questions

36
00:01:44,079 --> 00:01:48,609
and we will see that later and you can

37
00:01:46,090 --> 00:01:51,609
vote on other people's questions so it's

38
00:01:48,609 --> 00:01:53,530
probably way better than just trying at

39
00:01:51,609 --> 00:01:55,329
the end of the talk so we will look at

40
00:01:53,530 --> 00:02:00,369
slide or later so ask your questions

41
00:01:55,329 --> 00:02:02,169
there so what is all top 10 so os stands

42
00:02:00,369 --> 00:02:04,420
for open open web application security

43
00:02:02,170 --> 00:02:06,189
project and all was doped and is the

44
00:02:04,420 --> 00:02:09,820
list of the top 10 most critical web

45
00:02:06,189 --> 00:02:11,620
security risks today so it's made to

46
00:02:09,820 --> 00:02:12,970
help developers and pen testers

47
00:02:11,620 --> 00:02:14,770
understand and defend against

48
00:02:12,970 --> 00:02:16,540
variabilities and

49
00:02:14,770 --> 00:02:18,460
also a bit dance and could be hard to

50
00:02:16,540 --> 00:02:20,950
understand at first so my goal with this

51
00:02:18,460 --> 00:02:23,980
talk is to make it a bit more easily

52
00:02:20,950 --> 00:02:26,440
understandable hopefully so here is the

53
00:02:23,980 --> 00:02:29,489
list the top 10 list we are going to go

54
00:02:26,440 --> 00:02:32,590
through each of them one by one and he

55
00:02:29,490 --> 00:02:35,410
the tork structure will be like that for

56
00:02:32,590 --> 00:02:36,670
every bug or like list item there will

57
00:02:35,410 --> 00:02:39,130
be free

58
00:02:36,670 --> 00:02:40,780
slides not five because I plan to do

59
00:02:39,130 --> 00:02:42,820
five but then I realized there's no way

60
00:02:40,780 --> 00:02:44,830
it's gonna fit in 40 minutes so I had to

61
00:02:42,820 --> 00:02:46,900
delete all of that so we are only going

62
00:02:44,830 --> 00:02:50,230
to do what is it what's the impact and

63
00:02:46,900 --> 00:02:52,210
real-world examples so let's just start

64
00:02:50,230 --> 00:02:55,179
with a ten in sufficient logging and

65
00:02:52,210 --> 00:02:56,950
monitoring now this is a not as exciting

66
00:02:55,180 --> 00:02:58,870
it's kind of boring but let's just go

67
00:02:56,950 --> 00:03:01,119
for it so it's about having no or

68
00:02:58,870 --> 00:03:02,650
improper logs it crashes that don't

69
00:03:01,120 --> 00:03:04,540
generate useful logs looks are not

70
00:03:02,650 --> 00:03:06,790
monitor and basically having no bad or

71
00:03:04,540 --> 00:03:08,530
not enough logs that you know and not

72
00:03:06,790 --> 00:03:11,709
monitoring them so separately on this

73
00:03:08,530 --> 00:03:14,470
one is kind of low so because you know

74
00:03:11,710 --> 00:03:15,970
the impact of this is that you can see

75
00:03:14,470 --> 00:03:17,650
if someone is trying to attack the app

76
00:03:15,970 --> 00:03:19,570
so if you don't have logging you don't

77
00:03:17,650 --> 00:03:21,610
see people attacking and if attackers

78
00:03:19,570 --> 00:03:24,250
get in you won't notice them so this can

79
00:03:21,610 --> 00:03:27,190
lead to further exploitation so you know

80
00:03:24,250 --> 00:03:29,560
for these examples there are no real bug

81
00:03:27,190 --> 00:03:32,380
bounty examples there was a yahoo breach

82
00:03:29,560 --> 00:03:36,820
which you know got discovered in 2016

83
00:03:32,380 --> 00:03:38,440
and they hacked Yahoo at 2013 so it took

84
00:03:36,820 --> 00:03:41,470
three years and because they didn't have

85
00:03:38,440 --> 00:03:44,680
like proper logging set up so the was a

86
00:03:41,470 --> 00:03:47,859
Marriott International the hotel site

87
00:03:44,680 --> 00:03:49,540
they also got breached and in 2014 and

88
00:03:47,860 --> 00:03:53,470
they discovered it in 2018 so that's

89
00:03:49,540 --> 00:03:55,810
also kind of a big leap there that was

90
00:03:53,470 --> 00:03:58,180
logging so a nine using components with

91
00:03:55,810 --> 00:04:00,760
known vulnerabilities okay it's still

92
00:03:58,180 --> 00:04:03,370
not you know it's nothing really

93
00:04:00,760 --> 00:04:05,440
technical it's just about using software

94
00:04:03,370 --> 00:04:07,060
which you know with known bugs so not

95
00:04:05,440 --> 00:04:09,220
updating software with known viability

96
00:04:07,060 --> 00:04:11,500
and the severity of this you know it

97
00:04:09,220 --> 00:04:13,239
depends on the type of bug we are

98
00:04:11,500 --> 00:04:16,000
talking about so it can be pretty lower

99
00:04:13,239 --> 00:04:18,220
pretty high so the impact you know is

100
00:04:16,000 --> 00:04:20,048
that if an attacker scans your website

101
00:04:18,220 --> 00:04:22,720
it can find you know like version

102
00:04:20,048 --> 00:04:24,789
numbers and if it finds variable

103
00:04:22,720 --> 00:04:26,620
versions if there are you can use

104
00:04:24,790 --> 00:04:27,970
pre-written exploits or depending on a

105
00:04:26,620 --> 00:04:30,970
variety you can

106
00:04:27,970 --> 00:04:32,890
compromise like other systems maybe some

107
00:04:30,970 --> 00:04:35,140
real-world examples here is the Equifax

108
00:04:32,890 --> 00:04:37,599
breach for example which was because

109
00:04:35,140 --> 00:04:40,360
Evan apart she struts more ability and

110
00:04:37,600 --> 00:04:42,610
also there are some you know IOT botnets

111
00:04:40,360 --> 00:04:43,930
which use also a lot of already known

112
00:04:42,610 --> 00:04:46,720
bugs but you know they don't match it

113
00:04:43,930 --> 00:04:49,450
because its IOT so pregnant a mere a

114
00:04:46,720 --> 00:04:51,100
botnet was like this that its uses a lot

115
00:04:49,450 --> 00:04:54,130
of well known exploits also

116
00:04:51,100 --> 00:04:58,210
brute-forcing but a lot of exploits to

117
00:04:54,130 --> 00:04:59,800
target an updated iOS IOT IOT devices so

118
00:04:58,210 --> 00:05:03,580
yeah these were pretty boring so let's

119
00:04:59,800 --> 00:05:06,640
just try the a8 which is in security

120
00:05:03,580 --> 00:05:09,580
spherically deserialization this one is

121
00:05:06,640 --> 00:05:11,710
a bit more technical so first of all

122
00:05:09,580 --> 00:05:13,000
what is serialization it's turning an

123
00:05:11,710 --> 00:05:15,700
object that you have in a programming

124
00:05:13,000 --> 00:05:18,670
language or like an object to text which

125
00:05:15,700 --> 00:05:20,800
you can transfer so and after that using

126
00:05:18,670 --> 00:05:23,140
that serialized object in cookies or

127
00:05:20,800 --> 00:05:26,440
like hidden forms on the side so you're

128
00:05:23,140 --> 00:05:29,530
basically sending the object by the

129
00:05:26,440 --> 00:05:31,150
browser and the severity is pretty high

130
00:05:29,530 --> 00:05:33,010
on this one because the server DC

131
00:05:31,150 --> 00:05:36,250
realizes it upon receiving and this can

132
00:05:33,010 --> 00:05:39,310
go quite wrong so here's an example

133
00:05:36,250 --> 00:05:42,669
I'm gonna use my fancy pointer thing can

134
00:05:39,310 --> 00:05:44,860
you see pretty cool so we have a PHP

135
00:05:42,669 --> 00:05:46,990
object here and if you see realize

136
00:05:44,860 --> 00:05:49,120
that's what we get a PHP C realized

137
00:05:46,990 --> 00:05:52,090
object and that's a string and PHP can

138
00:05:49,120 --> 00:05:53,890
convert it back to an object but if

139
00:05:52,090 --> 00:05:57,219
there's an example attack scenario here

140
00:05:53,890 --> 00:05:59,260
it's that if we for example in D if this

141
00:05:57,220 --> 00:06:01,120
is a cookie for example and if the

142
00:05:59,260 --> 00:06:03,010
attacker changes the cookie notice there

143
00:06:01,120 --> 00:06:06,550
is user in the cookie okay what if I

144
00:06:03,010 --> 00:06:08,770
change to admin when the PHP parse is

145
00:06:06,550 --> 00:06:11,169
the cookie and commands expect an object

146
00:06:08,770 --> 00:06:14,109
it's going to convert the admin back and

147
00:06:11,169 --> 00:06:16,120
now the attacker is going to have admin

148
00:06:14,110 --> 00:06:17,669
permissions so you have to be very

149
00:06:16,120 --> 00:06:21,130
careful with sending

150
00:06:17,669 --> 00:06:22,599
objects which are you know C realized so

151
00:06:21,130 --> 00:06:24,640
there are two kinds of attacks on this

152
00:06:22,600 --> 00:06:27,340
one the data tempering attacks which I

153
00:06:24,640 --> 00:06:29,500
just showed an example of and you know

154
00:06:27,340 --> 00:06:31,900
it can be accessed control like changing

155
00:06:29,500 --> 00:06:33,669
it user ID mean a lot of other bugs

156
00:06:31,900 --> 00:06:35,080
if there are no validation you know it

157
00:06:33,669 --> 00:06:36,099
can be injection or anything that we

158
00:06:35,080 --> 00:06:37,719
will talk about later

159
00:06:36,099 --> 00:06:40,120
also there are object related attacks

160
00:06:37,720 --> 00:06:41,580
which is like crafting a payload that

161
00:06:40,120 --> 00:06:43,770
uses available class

162
00:06:41,580 --> 00:06:44,669
which can perform actions when

163
00:06:43,770 --> 00:06:47,219
deserialized

164
00:06:44,670 --> 00:06:49,530
and with this way you can get rim wood

165
00:06:47,220 --> 00:06:51,240
code execution RCE which is a pretty

166
00:06:49,530 --> 00:06:53,130
critical one of the most critical things

167
00:06:51,240 --> 00:06:55,380
you can get and this is super

168
00:06:53,130 --> 00:06:56,909
complicated I personally have no I mean

169
00:06:55,380 --> 00:06:58,830
I try to research it but it's really

170
00:06:56,910 --> 00:07:01,530
hard so fortunately there are tools

171
00:06:58,830 --> 00:07:03,930
which are pre-made duties like GSS

172
00:07:01,530 --> 00:07:06,750
serial and Java serial killer these

173
00:07:03,930 --> 00:07:08,310
tools generate you an object a theory is

174
00:07:06,750 --> 00:07:10,680
the object that you can send and it's

175
00:07:08,310 --> 00:07:13,230
gonna just execute the comment if you

176
00:07:10,680 --> 00:07:15,330
are lucky and it's a real-world example

177
00:07:13,230 --> 00:07:18,540
there was a remote code execution on a

178
00:07:15,330 --> 00:07:22,109
PayPal server there was a blog post by

179
00:07:18,540 --> 00:07:24,540
Michael Stefan keen so this is about it

180
00:07:22,110 --> 00:07:26,820
so there was a post parameter named old

181
00:07:24,540 --> 00:07:29,730
form data that was a serialized Java

182
00:07:26,820 --> 00:07:31,469
object and using the tool named JSOC

183
00:07:29,730 --> 00:07:33,630
real Michael created the proofs of proof

184
00:07:31,470 --> 00:07:36,180
of concept object proof of concept

185
00:07:33,630 --> 00:07:38,070
object and which one did you realize by

186
00:07:36,180 --> 00:07:40,290
the server it sent the content of Etsy

187
00:07:38,070 --> 00:07:42,450
password file on Linux to Michael so

188
00:07:40,290 --> 00:07:45,960
here we can see the attack so there was

189
00:07:42,450 --> 00:07:47,340
in a fancy pointer again there is he

190
00:07:45,960 --> 00:07:50,640
noticed the old form data is a

191
00:07:47,340 --> 00:07:55,169
serialized Java object so then he

192
00:07:50,640 --> 00:07:56,909
generated a a RCE Java object which

193
00:07:55,170 --> 00:07:57,720
performed which executed a common when

194
00:07:56,910 --> 00:08:00,300
deserialized

195
00:07:57,720 --> 00:08:01,860
and then he get back a request from the

196
00:08:00,300 --> 00:08:03,510
server because he made the request in

197
00:08:01,860 --> 00:08:05,490
the comments so as you can see he

198
00:08:03,510 --> 00:08:07,920
executed codon table sterber and he got

199
00:08:05,490 --> 00:08:10,290
back corresponds to his server and even

200
00:08:07,920 --> 00:08:12,090
he could also League the Etsy password

201
00:08:10,290 --> 00:08:13,650
files so he could basically just get

202
00:08:12,090 --> 00:08:18,179
room with code execution on people which

203
00:08:13,650 --> 00:08:20,940
is pretty nice so the next one a seven

204
00:08:18,180 --> 00:08:22,590
is cross-site scripting this one is

205
00:08:20,940 --> 00:08:24,450
running malicious JavaScript in the

206
00:08:22,590 --> 00:08:27,390
victims browser in the name of the site

207
00:08:24,450 --> 00:08:29,580
so this mostly caused by user input not

208
00:08:27,390 --> 00:08:32,789
being escaped and echoed back into HTML

209
00:08:29,580 --> 00:08:35,130
the severity medium depends and then you

210
00:08:32,789 --> 00:08:38,429
can argue about it but there are pretty

211
00:08:35,130 --> 00:08:41,789
high impact service as well so here's

212
00:08:38,429 --> 00:08:45,180
the basic reflected XSS so do we have a

213
00:08:41,789 --> 00:08:46,920
PHP app here we just says hello and the

214
00:08:45,180 --> 00:08:47,699
use of the get parameter get name

215
00:08:46,920 --> 00:08:50,189
parameter and

216
00:08:47,700 --> 00:08:52,710
you know echoes it back to you so if we

217
00:08:50,190 --> 00:08:54,450
say hello and we put the name David then

218
00:08:52,710 --> 00:08:54,990
it says hello David so but if we put

219
00:08:54,450 --> 00:08:59,370
hello

220
00:08:54,990 --> 00:09:02,100
if you put name script alert one closing

221
00:08:59,370 --> 00:09:03,690
script XHTML script tag that is gonna

222
00:09:02,100 --> 00:09:06,360
equate back to us so it's gonna say

223
00:09:03,690 --> 00:09:08,250
hello script alert one script and the

224
00:09:06,360 --> 00:09:10,110
browser thinks oh that's JavaScript so

225
00:09:08,250 --> 00:09:12,660
it's gonna execute the script in there

226
00:09:10,110 --> 00:09:15,060
it show as a pop-up so we can execute

227
00:09:12,660 --> 00:09:18,079
script on the website in the name of the

228
00:09:15,060 --> 00:09:21,270
website so there are three types of XSS

229
00:09:18,080 --> 00:09:23,010
reflected stored and Dom reflected is

230
00:09:21,270 --> 00:09:25,890
non persistent it's reflected from

231
00:09:23,010 --> 00:09:27,959
something like a URL for example what I

232
00:09:25,890 --> 00:09:30,060
just showed it affects only the user

233
00:09:27,959 --> 00:09:33,239
clicking on the malicious link and the

234
00:09:30,060 --> 00:09:36,119
stored XSS is a bit more it's persistent

235
00:09:33,240 --> 00:09:38,040
like a malicious comment and it affects

236
00:09:36,120 --> 00:09:40,589
every user who loads the page so for

237
00:09:38,040 --> 00:09:43,529
example you make an XSS on a forum in a

238
00:09:40,589 --> 00:09:45,360
comment and everyone who looks at the

239
00:09:43,529 --> 00:09:48,689
comment is gonna have the script running

240
00:09:45,360 --> 00:09:50,670
Dom XSS is something when payload is not

241
00:09:48,690 --> 00:09:52,770
reflected into HTML directly but

242
00:09:50,670 --> 00:09:55,020
executed by JavaScript on the page it's

243
00:09:52,770 --> 00:09:57,600
a bit more difficult to find and test

244
00:09:55,020 --> 00:10:00,870
for so what is the impact here the

245
00:09:57,600 --> 00:10:03,540
attacker can perform actions on the site

246
00:10:00,870 --> 00:10:06,209
in the name of the user still use a

247
00:10:03,540 --> 00:10:08,099
session cookies ready react users modify

248
00:10:06,209 --> 00:10:10,770
the page for there is anything that you

249
00:10:08,100 --> 00:10:12,600
can do with JavaScript and you know for

250
00:10:10,770 --> 00:10:14,910
example just give an example here that

251
00:10:12,600 --> 00:10:16,320
you can make a fishing pop-up asking for

252
00:10:14,910 --> 00:10:18,750
the victim's password or if it's a new

253
00:10:16,320 --> 00:10:22,079
site the stored exercise you can maybe

254
00:10:18,750 --> 00:10:24,470
modify news articles or something so

255
00:10:22,079 --> 00:10:27,630
anything that you can do with JavaScript

256
00:10:24,470 --> 00:10:30,440
so one example here is a steam chat

257
00:10:27,630 --> 00:10:33,420
client exercise which leads on RCE

258
00:10:30,440 --> 00:10:37,020
I'm including this report and then iid

259
00:10:33,420 --> 00:10:39,839
paths you can go on these pages by using

260
00:10:37,020 --> 00:10:41,640
HTTP hacker one that come and the URL

261
00:10:39,839 --> 00:10:45,690
here so this is these are hacker 1 URLs

262
00:10:41,640 --> 00:10:48,630
and it's paid $7,500 and it's an amazing

263
00:10:45,690 --> 00:10:50,910
write up so you can check it out if

264
00:10:48,630 --> 00:10:52,920
you're interested it worked like that in

265
00:10:50,910 --> 00:10:57,209
steam you can use this BB code thing

266
00:10:52,920 --> 00:11:00,060
where you for example specify a URL and

267
00:10:57,209 --> 00:11:02,520
you put some text with it and if you

268
00:11:00,060 --> 00:11:04,439
first include URL in google.com click me

269
00:11:02,520 --> 00:11:07,529
you render it's gonna make the click me

270
00:11:04,440 --> 00:11:11,310
a URL to Google like a red direct Puma

271
00:11:07,529 --> 00:11:14,370
but he he put JavaScript alert 1 into a

272
00:11:11,310 --> 00:11:17,939
URL and this is called the JavaScript

273
00:11:14,370 --> 00:11:20,399
URI so you can if you read direct to

274
00:11:17,939 --> 00:11:23,459
this Java computer REO URI or you keep

275
00:11:20,399 --> 00:11:26,670
click on it it's gonna execute so you

276
00:11:23,459 --> 00:11:28,619
know steam chef client generated a link

277
00:11:26,670 --> 00:11:30,899
to JavaScript alert 1 and if the other

278
00:11:28,620 --> 00:11:33,230
person clicked on the link alert 1

279
00:11:30,899 --> 00:11:37,129
executed so XSS on the other person's

280
00:11:33,230 --> 00:11:39,509
Steam website or client and he also

281
00:11:37,129 --> 00:11:41,759
converted it to err see you would like a

282
00:11:39,509 --> 00:11:43,800
fancy exploit of the steam protocol

283
00:11:41,759 --> 00:11:46,529
which I'm not gonna go to detail into

284
00:11:43,800 --> 00:11:50,008
but the excess of port was relevant to

285
00:11:46,529 --> 00:11:53,850
the talk here okay so a sick the next

286
00:11:50,009 --> 00:11:55,319
one security mix configuration this can

287
00:11:53,850 --> 00:11:57,420
be basically anything which is

288
00:11:55,319 --> 00:11:59,399
misconfigured for example you know

289
00:11:57,420 --> 00:12:03,329
improperly configuring a vs bucket

290
00:11:59,399 --> 00:12:05,939
permissions crash struck trace exposes

291
00:12:03,329 --> 00:12:07,410
secrets and password is not changed from

292
00:12:05,939 --> 00:12:09,120
the default you know anything like that

293
00:12:07,410 --> 00:12:11,059
and a separate again depends on what

294
00:12:09,120 --> 00:12:13,649
kind of issue we are talking about but

295
00:12:11,059 --> 00:12:15,480
what is the impact here because you know

296
00:12:13,649 --> 00:12:17,670
we don't know we can it can be a wide

297
00:12:15,480 --> 00:12:19,620
range of bugs basically it can range

298
00:12:17,670 --> 00:12:22,920
anything from you know a low severity

299
00:12:19,620 --> 00:12:26,040
stuff to remote code execution there is

300
00:12:22,920 --> 00:12:27,599
one we interesting but it is snapchat

301
00:12:26,040 --> 00:12:32,099
Jenkins RCE

302
00:12:27,600 --> 00:12:36,149
so it paid $15,000 which is quite a lot

303
00:12:32,100 --> 00:12:38,790
and it means basically about the Jenkins

304
00:12:36,149 --> 00:12:40,829
server which Jenkins is like a server

305
00:12:38,790 --> 00:12:42,300
which companies used to run and build

306
00:12:40,829 --> 00:12:44,489
software and like do continuous

307
00:12:42,300 --> 00:12:46,199
integration stuff but you know you could

308
00:12:44,490 --> 00:12:48,209
usually log in there with like a Google

309
00:12:46,199 --> 00:12:49,800
account but the Google account has to be

310
00:12:48,209 --> 00:12:52,349
from a steam Pearlstein

311
00:12:49,800 --> 00:12:53,758
from snapchat account so you have to you

312
00:12:52,350 --> 00:12:55,800
know only snapchat people can log in but

313
00:12:53,759 --> 00:12:58,170
with this one everyone could log in

314
00:12:55,800 --> 00:13:00,359
doesn't matter if snapshot person or not

315
00:12:58,170 --> 00:13:02,610
so any Google account could log in and

316
00:13:00,360 --> 00:13:04,350
in the janky as there is a thing called

317
00:13:02,610 --> 00:13:07,439
the script console which is basically

318
00:13:04,350 --> 00:13:08,759
like like I don't know it's them it's

319
00:13:07,439 --> 00:13:11,099
like a terminal so you can execute

320
00:13:08,759 --> 00:13:14,730
commands there so he got RC remote code

321
00:13:11,100 --> 00:13:18,660
execution that way okay a-five broken

322
00:13:14,730 --> 00:13:20,850
access control yeah I think this is my

323
00:13:18,660 --> 00:13:21,420
favorite type of bugs because I found

324
00:13:20,850 --> 00:13:24,540
most of

325
00:13:21,420 --> 00:13:27,000
bugs most of time bugs I found a BAC

326
00:13:24,540 --> 00:13:28,469
it's a broken access control when an

327
00:13:27,000 --> 00:13:30,450
attacker you know it's about when an

328
00:13:28,470 --> 00:13:33,630
attacker can perform view/edit stuff

329
00:13:30,450 --> 00:13:37,110
which he or she shouldn't so for example

330
00:13:33,630 --> 00:13:39,420
basic user can perform administer an

331
00:13:37,110 --> 00:13:41,460
access other user stuff you'll see an

332
00:13:39,420 --> 00:13:43,740
example here somebody again depends you

333
00:13:41,460 --> 00:13:45,870
know you can do it down so here's a

334
00:13:43,740 --> 00:13:48,840
simple ID or example either stands for

335
00:13:45,870 --> 00:13:50,940
insecure direct object reference so here

336
00:13:48,840 --> 00:13:53,850
we see a normal request attacker has an

337
00:13:50,940 --> 00:13:56,520
ID of two one for free and he makes a

338
00:13:53,850 --> 00:13:58,890
request to the API asking for the user

339
00:13:56,520 --> 00:14:01,079
details - one for free so this is normal

340
00:13:58,890 --> 00:14:02,730
right and he gets back the attacker his

341
00:14:01,080 --> 00:14:04,440
info like credit card number address

342
00:14:02,730 --> 00:14:06,920
everything but what happens if an

343
00:14:04,440 --> 00:14:09,690
attacker tries to request some other ID

344
00:14:06,920 --> 00:14:12,719
maybe if the app is not well protected

345
00:14:09,690 --> 00:14:16,950
the other users data is going to go get

346
00:14:12,720 --> 00:14:18,330
back so he's gonna get back the details

347
00:14:16,950 --> 00:14:20,310
of the other person so the credit card

348
00:14:18,330 --> 00:14:21,570
number and address so you know depending

349
00:14:20,310 --> 00:14:24,900
on the situation this can be pretty

350
00:14:21,570 --> 00:14:27,450
pretty severe but you know either can

351
00:14:24,900 --> 00:14:29,970
happen on a lot of places so what is the

352
00:14:27,450 --> 00:14:31,860
impact you know depends again so you can

353
00:14:29,970 --> 00:14:33,810
access modify the date of other users

354
00:14:31,860 --> 00:14:35,730
but from sensitive actions without

355
00:14:33,810 --> 00:14:37,530
having permission access paid features

356
00:14:35,730 --> 00:14:40,080
without paying for it that's that's one

357
00:14:37,530 --> 00:14:41,730
that usually companies all right in my

358
00:14:40,080 --> 00:14:43,650
experience a lot of companies don't pay

359
00:14:41,730 --> 00:14:45,990
attention so they put like a paywall and

360
00:14:43,650 --> 00:14:48,209
then you know you have to pay otherwise

361
00:14:45,990 --> 00:14:49,980
the UI on the buttons are greyed out on

362
00:14:48,210 --> 00:14:52,230
the UI you can press them but if you

363
00:14:49,980 --> 00:14:54,450
repeat the request which turns on a paid

364
00:14:52,230 --> 00:14:56,070
feature usually they don't check if you

365
00:14:54,450 --> 00:14:57,810
actually have a paid account or not so

366
00:14:56,070 --> 00:15:00,870
that's something to keep in mind and

367
00:14:57,810 --> 00:15:02,250
also basically anything that you can do

368
00:15:00,870 --> 00:15:04,740
even though you shouldn't able to so

369
00:15:02,250 --> 00:15:06,900
that work and access control there is

370
00:15:04,740 --> 00:15:09,510
one example really cool really cool it's

371
00:15:06,900 --> 00:15:11,959
the same steam CD key ID or it got it

372
00:15:09,510 --> 00:15:15,900
paid twenty thousand dollars which is

373
00:15:11,960 --> 00:15:19,730
especially it's a lot of money it was

374
00:15:15,900 --> 00:15:22,730
about an ID or unimportant in a steam

375
00:15:19,730 --> 00:15:24,990
website where people can publish games

376
00:15:22,730 --> 00:15:27,360
you know where they manage their games

377
00:15:24,990 --> 00:15:30,210
so there was an endpoint which generated

378
00:15:27,360 --> 00:15:32,100
CD keys and you know you put you pass

379
00:15:30,210 --> 00:15:34,350
the ID of your game and it gives you

380
00:15:32,100 --> 00:15:36,210
back a CD key as you

381
00:15:34,350 --> 00:15:39,510
but there was an issue that you could

382
00:15:36,210 --> 00:15:42,750
mess in any kind of game and it's going

383
00:15:39,510 --> 00:15:44,250
it gave you an a steam key for that game

384
00:15:42,750 --> 00:15:46,230
so you could just get a steam key for

385
00:15:44,250 --> 00:15:48,510
every game on Steam and Stella sell it

386
00:15:46,230 --> 00:15:51,650
if the attacker wanted to do that so

387
00:15:48,510 --> 00:15:54,720
that's that have a high impact as well

388
00:15:51,650 --> 00:15:56,550
okay a for now we are getting into

389
00:15:54,720 --> 00:16:00,570
higher priority ones

390
00:15:56,550 --> 00:16:03,650
this is XML external entities xxe this

391
00:16:00,570 --> 00:16:07,530
is really interesting in my opinion so

392
00:16:03,650 --> 00:16:09,150
here if an app uses XML to send data

393
00:16:07,530 --> 00:16:12,930
except XML file

394
00:16:09,150 --> 00:16:16,410
you know uploads it or processes XML it

395
00:16:12,930 --> 00:16:19,079
uses an XML parser to process the XML so

396
00:16:16,410 --> 00:16:21,060
if the external porter has external

397
00:16:19,080 --> 00:16:23,160
entities enabled the up might be

398
00:16:21,060 --> 00:16:25,500
probably be wearable so where it is

399
00:16:23,160 --> 00:16:27,300
really high because this have a big

400
00:16:25,500 --> 00:16:30,660
impact we will see hearing and in an

401
00:16:27,300 --> 00:16:32,160
example so I hope you can read the code

402
00:16:30,660 --> 00:16:37,410
by the way I try to make it really big

403
00:16:32,160 --> 00:16:39,900
but not sure so here is the example we

404
00:16:37,410 --> 00:16:44,430
have a basic app this is from a blog

405
00:16:39,900 --> 00:16:46,199
post by account tix.com it was really

406
00:16:44,430 --> 00:16:49,199
great I just kind of use their examples

407
00:16:46,200 --> 00:16:51,630
so that's why I'm crediting them so here

408
00:16:49,200 --> 00:16:53,610
this web app does is you send an XML

409
00:16:51,630 --> 00:16:55,200
with the Foo parameter and it just gives

410
00:16:53,610 --> 00:16:56,760
you back what the full parameter is

411
00:16:55,200 --> 00:16:59,490
pretty easy so it's ant hello world it

412
00:16:56,760 --> 00:17:02,640
says hello world now in the second one

413
00:16:59,490 --> 00:17:03,870
we set up entities so we set up entities

414
00:17:02,640 --> 00:17:06,150
like a variable in a programming

415
00:17:03,870 --> 00:17:08,250
language so for example you set AB or

416
00:17:06,150 --> 00:17:09,930
worry about a word and then you say

417
00:17:08,250 --> 00:17:11,730
hello and the bar worried about what

418
00:17:09,930 --> 00:17:13,709
does it translate to hello word so you

419
00:17:11,730 --> 00:17:16,260
get that back and it's pretty nothing

420
00:17:13,709 --> 00:17:18,600
nothing dangerous here what happens if

421
00:17:16,260 --> 00:17:21,359
you specify an external entity so you

422
00:17:18,599 --> 00:17:23,219
specify like xxe entity and Kirksey

423
00:17:21,359 --> 00:17:24,689
variable and you name it a system

424
00:17:23,220 --> 00:17:27,360
variable which is an external variable

425
00:17:24,690 --> 00:17:30,120
and you give it the best file at C

426
00:17:27,359 --> 00:17:32,550
password and you and you put it in the

427
00:17:30,120 --> 00:17:36,090
Foo parameter so the server says like

428
00:17:32,550 --> 00:17:38,550
okay I need to echo back the variable

429
00:17:36,090 --> 00:17:41,399
the variable is at C password file so I

430
00:17:38,550 --> 00:17:43,680
just read my IC password file and echo

431
00:17:41,400 --> 00:17:46,929
it back so and now you can read any file

432
00:17:43,680 --> 00:17:48,850
on the server and so what

433
00:17:46,929 --> 00:17:52,389
the impact your attacker can read files

434
00:17:48,850 --> 00:17:54,340
on the server perform SS RF arrests I

435
00:17:52,389 --> 00:17:56,379
did request forgery attacks is just

436
00:17:54,340 --> 00:17:58,418
about sending requests from the server

437
00:17:56,379 --> 00:18:00,789
it's when you you know you make the

438
00:17:58,419 --> 00:18:04,450
server send requests where you want it

439
00:18:00,789 --> 00:18:06,789
so you can scan local networks with this

440
00:18:04,450 --> 00:18:10,659
as well so for example you can send a

441
00:18:06,789 --> 00:18:16,419
request like this to like a local IP

442
00:18:10,659 --> 00:18:19,059
like 10.0.0.0 ml ports or crashes maybe

443
00:18:16,419 --> 00:18:20,919
there is no such host on the local

444
00:18:19,059 --> 00:18:23,168
network but if it gives you back some

445
00:18:20,919 --> 00:18:25,629
kind of HTML some response maybe there

446
00:18:23,169 --> 00:18:27,369
is one device so you can just like scan

447
00:18:25,629 --> 00:18:29,379
your local network as well and like

448
00:18:27,369 --> 00:18:31,539
pivot which you shouldn't will do in a

449
00:18:29,379 --> 00:18:33,580
bhagwanti situation but that is also

450
00:18:31,539 --> 00:18:36,190
possible and you can also perform

451
00:18:33,580 --> 00:18:38,289
denial-of-service DDoS attacks here for

452
00:18:36,190 --> 00:18:40,570
example by lead reading only nuke the

453
00:18:38,289 --> 00:18:42,129
file dev random which is an endless file

454
00:18:40,570 --> 00:18:44,649
so if you try to read it

455
00:18:42,129 --> 00:18:46,090
XML parser try to tries to read it it's

456
00:18:44,649 --> 00:18:48,008
just gonna read read read read and it's

457
00:18:46,090 --> 00:18:50,709
gonna fill up and it's gonna crash so

458
00:18:48,009 --> 00:18:52,690
that's denial of service and in even

459
00:18:50,710 --> 00:18:54,970
rare cases it can lead to err see II

460
00:18:52,690 --> 00:18:59,259
remote code execution so that's why the

461
00:18:54,970 --> 00:19:02,200
severity is really high on this one so

462
00:18:59,259 --> 00:19:05,860
real world examples here we have a

463
00:19:02,200 --> 00:19:09,100
Twitter xxe which paid ten thousand

464
00:19:05,860 --> 00:19:11,740
eighty dollars not sure why dat and it

465
00:19:09,100 --> 00:19:15,519
was an exact see on the ash XMP

466
00:19:11,740 --> 00:19:18,369
processor on on Twitter and Twitter web

467
00:19:15,519 --> 00:19:20,980
server so here's what the attackers sent

468
00:19:18,369 --> 00:19:23,678
as you can see he declared the entity

469
00:19:20,980 --> 00:19:25,539
external entity here so he put file and

470
00:19:23,679 --> 00:19:28,720
it's a file on the system at the

471
00:19:25,539 --> 00:19:31,389
password and what he did is at the

472
00:19:28,720 --> 00:19:35,169
operator ID parameter he refer has the

473
00:19:31,389 --> 00:19:38,139
file so that's what the request what he

474
00:19:35,169 --> 00:19:40,869
sent it was a basic post XML request and

475
00:19:38,139 --> 00:19:43,389
what he got back from the server was an

476
00:19:40,869 --> 00:19:46,629
error right oh I'm enabled to convert

477
00:19:43,389 --> 00:19:48,699
and the whole Etsy password file to an

478
00:19:46,629 --> 00:19:52,029
integer for operator ID because operator

479
00:19:48,700 --> 00:19:53,980
ID need needed an integer so he and

480
00:19:52,029 --> 00:19:55,570
error message expose the whole file and

481
00:19:53,980 --> 00:20:00,039
with this you can read any file on the

482
00:19:55,570 --> 00:20:00,790
Twitter server which is bad so there was

483
00:20:00,039 --> 00:20:02,800
another one who

484
00:20:00,790 --> 00:20:06,250
have upload server xxe which made

485
00:20:02,800 --> 00:20:07,990
$10,000 I included this because this

486
00:20:06,250 --> 00:20:09,730
isn't this is not just the neck sexy

487
00:20:07,990 --> 00:20:14,740
this was a bit more complicated than

488
00:20:09,730 --> 00:20:17,100
that but you know think about it read

489
00:20:14,740 --> 00:20:20,950
any file on the pornhub upload server

490
00:20:17,100 --> 00:20:26,230
you can decide the the impact of that

491
00:20:20,950 --> 00:20:30,130
one so yeah a free sensitive data

492
00:20:26,230 --> 00:20:31,930
exposure okay so this again includes a

493
00:20:30,130 --> 00:20:33,370
wide range of bugs so it's not like an

494
00:20:31,930 --> 00:20:35,950
exact see where you have one technical

495
00:20:33,370 --> 00:20:39,219
bug it's a lot of bugs so these bugs are

496
00:20:35,950 --> 00:20:41,350
all about exposing data for example by

497
00:20:39,220 --> 00:20:43,330
not encrypting the communication maybe

498
00:20:41,350 --> 00:20:46,330
not using SSL Certificates

499
00:20:43,330 --> 00:20:48,550
or like using old weak crypt or like

500
00:20:46,330 --> 00:20:50,879
storing sensitive data like passwords in

501
00:20:48,550 --> 00:20:53,230
clear-text which you should never do and

502
00:20:50,880 --> 00:20:55,540
accidentally exposing secrets and keys

503
00:20:53,230 --> 00:20:56,500
which you know happens more often than

504
00:20:55,540 --> 00:20:59,170
you would expect

505
00:20:56,500 --> 00:21:00,760
so and you know everything else that can

506
00:20:59,170 --> 00:21:04,060
expose sensitive later so the severity

507
00:21:00,760 --> 00:21:06,550
is high on this one so what's the impact

508
00:21:04,060 --> 00:21:08,649
here if these security practices are not

509
00:21:06,550 --> 00:21:10,810
in place and attacker could for example

510
00:21:08,650 --> 00:21:12,610
there are no SSL certificate then you

511
00:21:10,810 --> 00:21:15,040
can perform a man-in-the-middle attack

512
00:21:12,610 --> 00:21:16,330
and capture data while it's going

513
00:21:15,040 --> 00:21:19,389
through for example a public Wi-Fi

514
00:21:16,330 --> 00:21:20,980
network or you can for example steal all

515
00:21:19,390 --> 00:21:23,260
unencrypted passwords if they are not

516
00:21:20,980 --> 00:21:25,150
hashed correctly so if the someone gets

517
00:21:23,260 --> 00:21:26,680
access to the database if it's not

518
00:21:25,150 --> 00:21:27,580
helped you can see everyone's password

519
00:21:26,680 --> 00:21:30,580
which is terrible

520
00:21:27,580 --> 00:21:32,350
and also you can access internal systems

521
00:21:30,580 --> 00:21:33,970
for example by finding unintentionally

522
00:21:32,350 --> 00:21:36,879
expose secrets which we will see a

523
00:21:33,970 --> 00:21:39,150
real-world example of so he snapchat

524
00:21:36,880 --> 00:21:42,460
token leaked on github now

525
00:21:39,150 --> 00:21:49,060
it paid $15,000 which is again in test

526
00:21:42,460 --> 00:21:52,000
ID so it was that snapchat used they had

527
00:21:49,060 --> 00:21:53,590
a public github repository where they

528
00:21:52,000 --> 00:21:55,810
pushed you know their code their open

529
00:21:53,590 --> 00:21:59,020
source code but someone accidentally

530
00:21:55,810 --> 00:22:01,570
pushed an API key to beat hub which gave

531
00:21:59,020 --> 00:22:04,000
them access to their private other

532
00:22:01,570 --> 00:22:05,470
private server so as you can see the

533
00:22:04,000 --> 00:22:07,510
github they leaked the token for github

534
00:22:05,470 --> 00:22:10,840
SC Corp that Ness that was their own

535
00:22:07,510 --> 00:22:12,610
server and yeah there is no image for

536
00:22:10,840 --> 00:22:14,830
that one but basically what they did is

537
00:22:12,610 --> 00:22:17,260
just accidentally you know

538
00:22:14,830 --> 00:22:19,179
committed that code with the token in it

539
00:22:17,260 --> 00:22:21,490
and you can just reuse the token and

540
00:22:19,180 --> 00:22:25,330
then get access to the server so and

541
00:22:21,490 --> 00:22:27,490
this happened quite often you know yeah

542
00:22:25,330 --> 00:22:29,379
there are even tools to detect this

543
00:22:27,490 --> 00:22:31,330
there is a tool called get Rob I had to

544
00:22:29,380 --> 00:22:33,310
remove the slide because it took too

545
00:22:31,330 --> 00:22:37,030
much time but there's two called get Rob

546
00:22:33,310 --> 00:22:39,760
which is a made for just this purpose so

547
00:22:37,030 --> 00:22:41,770
it just cans the github repo phone

548
00:22:39,760 --> 00:22:44,410
company and sends four commits where

549
00:22:41,770 --> 00:22:46,300
they use like secrets and tokens so they

550
00:22:44,410 --> 00:22:50,040
are like already tools be it for this

551
00:22:46,300 --> 00:22:55,389
one okay so there is also broken

552
00:22:50,040 --> 00:22:59,200
authentication this is a two now what is

553
00:22:55,390 --> 00:23:01,660
it it's again not not really a technical

554
00:22:59,200 --> 00:23:04,030
bug but a collection collection of bugs

555
00:23:01,660 --> 00:23:07,570
using which an attacker can bypass the

556
00:23:04,030 --> 00:23:09,450
authentication so group of include you

557
00:23:07,570 --> 00:23:11,669
know just first of all let's note that

558
00:23:09,450 --> 00:23:13,990
authentication is not equals

559
00:23:11,670 --> 00:23:15,370
authorization so the ID or and the

560
00:23:13,990 --> 00:23:17,230
authentication is a completely different

561
00:23:15,370 --> 00:23:21,010
thing authentication has to do with

562
00:23:17,230 --> 00:23:23,710
logging in and stuff so this type of but

563
00:23:21,010 --> 00:23:27,250
the group of bugs include like having no

564
00:23:23,710 --> 00:23:29,800
rate limiting which for example can make

565
00:23:27,250 --> 00:23:32,020
brute-force attacks possible also it can

566
00:23:29,800 --> 00:23:34,540
be like allowing weak passwords like

567
00:23:32,020 --> 00:23:37,120
admin admin or you know does not

568
00:23:34,540 --> 00:23:39,190
properly in validating session IDs so

569
00:23:37,120 --> 00:23:41,229
like you know if you log out the session

570
00:23:39,190 --> 00:23:43,870
IDs the wallet which it shouldn't be or

571
00:23:41,230 --> 00:23:46,030
if you don't use the session ID for like

572
00:23:43,870 --> 00:23:49,389
an hour so the session ID should expire

573
00:23:46,030 --> 00:23:51,730
so you have to log in again so giving

574
00:23:49,390 --> 00:23:53,350
different responses for example if the

575
00:23:51,730 --> 00:23:55,450
user doesn't exist this is called the

576
00:23:53,350 --> 00:23:57,100
user and immigration which it can also

577
00:23:55,450 --> 00:23:59,320
happen if for example if you look into

578
00:23:57,100 --> 00:24:02,230
an application and gives you an error

579
00:23:59,320 --> 00:24:04,120
like oh this user does not exist

580
00:24:02,230 --> 00:24:06,400
that's bad it should give you an error

581
00:24:04,120 --> 00:24:08,110
like this user or password combination

582
00:24:06,400 --> 00:24:10,120
is not correct because if it gives you

583
00:24:08,110 --> 00:24:12,850
an error like this user does not exist

584
00:24:10,120 --> 00:24:15,010
then essentially means that you can just

585
00:24:12,850 --> 00:24:16,990
put a bunch of user like a bunch of

586
00:24:15,010 --> 00:24:19,960
lists of email addresses in there and

587
00:24:16,990 --> 00:24:22,630
see what users ordered is registered in

588
00:24:19,960 --> 00:24:24,340
the app because if they exist you get

589
00:24:22,630 --> 00:24:26,770
the error that this user doesn't exist

590
00:24:24,340 --> 00:24:28,269
that this password is incorrect but if

591
00:24:26,770 --> 00:24:29,979
they don't exist then

592
00:24:28,269 --> 00:24:33,009
and you get in other errors you should

593
00:24:29,979 --> 00:24:34,659
give one type of error for example like

594
00:24:33,009 --> 00:24:36,820
in a logging situation or everywhere so

595
00:24:34,659 --> 00:24:39,209
you shouldn't expose stuff here by

596
00:24:36,820 --> 00:24:42,369
giving too verbose error error messages

597
00:24:39,209 --> 00:24:44,440
what is the impact here like the

598
00:24:42,369 --> 00:24:47,349
attacker can get access to accounts so

599
00:24:44,440 --> 00:24:50,649
it again the severity of these depends

600
00:24:47,349 --> 00:24:53,049
on like what kind of accounts you know

601
00:24:50,649 --> 00:24:55,238
admin or basic user or like what actions

602
00:24:53,049 --> 00:24:57,459
can the user perform or what sensitive

603
00:24:55,239 --> 00:24:59,289
data is accessible so the impact is

604
00:24:57,459 --> 00:25:02,259
basically bypassing the authentication

605
00:24:59,289 --> 00:25:04,690
so it can be anything above that these

606
00:25:02,259 --> 00:25:06,339
are really it was super hard to find

607
00:25:04,690 --> 00:25:08,829
basic bug bounty examples for this

608
00:25:06,339 --> 00:25:11,049
because you know people are not

609
00:25:08,829 --> 00:25:13,509
reporting stuff like there are security

610
00:25:11,049 --> 00:25:15,399
questions like security questions on an

611
00:25:13,509 --> 00:25:16,989
se but you don't report them to bug

612
00:25:15,399 --> 00:25:19,029
bounty program bug bounty is a bit

613
00:25:16,989 --> 00:25:22,059
different of a more of a technical thing

614
00:25:19,029 --> 00:25:24,339
so they usually like this reports better

615
00:25:22,059 --> 00:25:26,889
and like what I found the watch was kind

616
00:25:24,339 --> 00:25:28,989
of considered broken authentication was

617
00:25:26,889 --> 00:25:32,079
a report by Mongo which paid ten

618
00:25:28,989 --> 00:25:35,070
thousand dollars which allowed him to

619
00:25:32,079 --> 00:25:38,379
change the password of any uber user

620
00:25:35,070 --> 00:25:42,239
just by using their phone number which

621
00:25:38,379 --> 00:25:45,458
is a pretty pretty big problem here so

622
00:25:42,239 --> 00:25:48,219
let's just see so that was the data he

623
00:25:45,459 --> 00:25:51,940
sent then when you open the application

624
00:25:48,219 --> 00:25:54,609
the iOS app it sent a request to this

625
00:25:51,940 --> 00:25:55,629
password let's sign up ting where you

626
00:25:54,609 --> 00:25:57,759
know you just enter your phone number

627
00:25:55,629 --> 00:26:00,609
and then it registers you or something

628
00:25:57,759 --> 00:26:02,379
it was along the lines of this but that

629
00:26:00,609 --> 00:26:05,099
was an issue that if you enter a phone

630
00:26:02,379 --> 00:26:08,408
number of someone else and then you

631
00:26:05,099 --> 00:26:11,769
entered a new password then it's gonna

632
00:26:08,409 --> 00:26:13,239
say ok succeeded a new password has been

633
00:26:11,769 --> 00:26:14,889
created please log in with a new

634
00:26:13,239 --> 00:26:17,320
password but you just change the

635
00:26:14,889 --> 00:26:18,549
password of someone else and you can

636
00:26:17,320 --> 00:26:20,439
just brute force lots of phone numbers

637
00:26:18,549 --> 00:26:22,749
or I don't know but this is still a

638
00:26:20,440 --> 00:26:24,969
really severe back because just by the

639
00:26:22,749 --> 00:26:29,019
phone number you can take over anyone's

640
00:26:24,969 --> 00:26:30,909
uber account so and for the left one

641
00:26:29,019 --> 00:26:36,729
something a bit more exciting which is

642
00:26:30,909 --> 00:26:38,169
injection so injection is usually

643
00:26:36,729 --> 00:26:40,599
happens when the user input is not

644
00:26:38,169 --> 00:26:41,830
sanitized or validated so for example

645
00:26:40,599 --> 00:26:44,678
user input is using

646
00:26:41,830 --> 00:26:45,939
SQL query or a command which is executed

647
00:26:44,679 --> 00:26:48,279
on the system or for example a

648
00:26:45,940 --> 00:26:51,640
templating engine so that injections can

649
00:26:48,279 --> 00:26:53,559
happen basically anywhere so for example

650
00:26:51,640 --> 00:26:57,070
a malicious user input can break out of

651
00:26:53,559 --> 00:26:59,440
the SQL injection but as of the SQL

652
00:26:57,070 --> 00:27:01,090
query and then execute something

653
00:26:59,440 --> 00:27:02,409
malicious the stability of this is

654
00:27:01,090 --> 00:27:04,779
really high this is the first one on the

655
00:27:02,409 --> 00:27:06,730
list so that's why it's a one so it's

656
00:27:04,779 --> 00:27:10,090
pretty severe so let's see an example

657
00:27:06,730 --> 00:27:13,510
here okay SQL injection here we have a

658
00:27:10,090 --> 00:27:15,820
very basic PHP app which gets the post

659
00:27:13,510 --> 00:27:19,029
ID by looking at the ID in the get

660
00:27:15,820 --> 00:27:21,639
parameter so this has idea 53 and then

661
00:27:19,029 --> 00:27:23,950
it generates a query by putting select

662
00:27:21,639 --> 00:27:26,439
from post where post ID and it appends

663
00:27:23,950 --> 00:27:30,220
the post ID this seems pretty fair right

664
00:27:26,440 --> 00:27:32,350
you put 53 in there and then it makes a

665
00:27:30,220 --> 00:27:34,630
query like select from post where post

666
00:27:32,350 --> 00:27:37,769
ID is 53 this is okay this is not a big

667
00:27:34,630 --> 00:27:42,850
deal but what happens if you put ID

668
00:27:37,769 --> 00:27:45,399
equals 53 drop table users the server is

669
00:27:42,850 --> 00:27:47,260
going to add the drop table users to the

670
00:27:45,399 --> 00:27:49,750
query because it doesn't care about it

671
00:27:47,260 --> 00:27:52,269
and then the query which is going to run

672
00:27:49,750 --> 00:27:55,179
on the SQL server is going to be select

673
00:27:52,269 --> 00:27:57,519
from post where post ID is 53 and also

674
00:27:55,179 --> 00:28:00,519
by the way drop table users and you

675
00:27:57,519 --> 00:28:05,110
don't you don't want that probably so

676
00:28:00,519 --> 00:28:07,419
what is the impact here this is and give

677
00:28:05,110 --> 00:28:09,610
you full access to databases or like

678
00:28:07,419 --> 00:28:13,450
remote code execution if you have a code

679
00:28:09,610 --> 00:28:15,879
X command injection or not sure what

680
00:28:13,450 --> 00:28:18,519
else the list you know because these are

681
00:28:15,880 --> 00:28:22,360
pretty much say it all it's really high

682
00:28:18,519 --> 00:28:23,950
impact about a bit of a remote code

683
00:28:22,360 --> 00:28:26,320
execution here for example if you have a

684
00:28:23,950 --> 00:28:28,179
command injection then you can just put

685
00:28:26,320 --> 00:28:32,200
like the end character or the pipe

686
00:28:28,179 --> 00:28:35,260
character so to exit the current command

687
00:28:32,200 --> 00:28:37,779
and execute something else so it can

688
00:28:35,260 --> 00:28:41,200
happen not even only on SQL but also on

689
00:28:37,779 --> 00:28:42,880
other like commands or like other types

690
00:28:41,200 --> 00:28:45,970
of injections you know anything can

691
00:28:42,880 --> 00:28:49,149
basically happen here so who is the real

692
00:28:45,970 --> 00:28:52,389
world example there was a steam SQL

693
00:28:49,149 --> 00:28:54,520
injection it's paid twenty five thousand

694
00:28:52,389 --> 00:28:55,059
dollars and guess what this was the same

695
00:28:54,520 --> 00:28:57,549
guy who

696
00:28:55,059 --> 00:28:59,190
found this steam cd-key bug which I told

697
00:28:57,549 --> 00:29:01,629
you earlier so I kind of made like

698
00:28:59,190 --> 00:29:05,799
twenty-five thousand plus twenty

699
00:29:01,629 --> 00:29:08,350
thousand which is not bad it was about

700
00:29:05,799 --> 00:29:11,649
an unrelated parameter as you can see on

701
00:29:08,350 --> 00:29:14,498
report XML dot PHP page which could you

702
00:29:11,649 --> 00:29:16,508
know like we used to read certain SQL

703
00:29:14,499 --> 00:29:19,179
data from a single backing database yeah

704
00:29:16,509 --> 00:29:23,679
I just read that so it was basically

705
00:29:19,179 --> 00:29:25,690
like an SQL injection okay thing is that

706
00:29:23,679 --> 00:29:27,850
I was probably a bit too fast with this

707
00:29:25,690 --> 00:29:31,059
but I don't think it's a problem because

708
00:29:27,850 --> 00:29:33,039
it's we already a bit late but if I was

709
00:29:31,059 --> 00:29:34,690
fast enough we should check the slide oh

710
00:29:33,039 --> 00:29:35,950
if we have any questions it would be

711
00:29:34,690 --> 00:29:38,169
pretty lame if I don't have any

712
00:29:35,950 --> 00:29:40,869
questions I hope some of you at least

713
00:29:38,169 --> 00:29:48,070
have the question we will see we've just

714
00:29:40,869 --> 00:29:50,908
check okay so oh oh that's the mode okay

715
00:29:48,070 --> 00:29:53,379
so at least I got one question right

716
00:29:50,909 --> 00:30:00,100
what was the most interesting bug you

717
00:29:53,379 --> 00:30:03,789
have found oh I think it was it is still

718
00:30:00,100 --> 00:30:06,969
which have a bug which I found which is

719
00:30:03,789 --> 00:30:08,830
still not it's three hours and it's

720
00:30:06,970 --> 00:30:10,809
still not confirmed and I'm waiting on

721
00:30:08,830 --> 00:30:12,490
it and it's the really really great bag

722
00:30:10,809 --> 00:30:16,539
which I'm trying to release but I can't

723
00:30:12,490 --> 00:30:19,809
talk about it because it's it's yeah but

724
00:30:16,539 --> 00:30:21,999
on other bugs I usually find I usually

725
00:30:19,809 --> 00:30:30,299
find bugs which include like you know

726
00:30:21,999 --> 00:30:30,299
what I said broken access control so oh

727
00:30:31,080 --> 00:30:40,330
hello how can i oh I can scroll okay I

728
00:30:38,070 --> 00:30:42,399
usually find broken access control stuff

729
00:30:40,330 --> 00:30:45,869
so you can you know you repeat requests

730
00:30:42,399 --> 00:30:48,580
from one user and on the other user you

731
00:30:45,869 --> 00:30:49,840
so with one test account you capture all

732
00:30:48,580 --> 00:30:52,178
the requests and the second one you

733
00:30:49,840 --> 00:30:54,399
stare you repeat it and if you you know

734
00:30:52,179 --> 00:30:56,559
if you can access stuff from the test

735
00:30:54,399 --> 00:30:58,629
account one then that's pretty bit so

736
00:30:56,559 --> 00:31:01,240
that's one bug already so I usually test

737
00:30:58,629 --> 00:31:02,619
these kind of bugs the constant are

738
00:31:01,240 --> 00:31:06,750
doing bug balance is a full-time job

739
00:31:02,619 --> 00:31:08,860
no because I'm a high school student but

740
00:31:06,750 --> 00:31:10,540
you know that's the tricky question

741
00:31:08,860 --> 00:31:12,549
bug bounty as a full-time job is really

742
00:31:10,540 --> 00:31:15,159
really stressful this that could be for

743
00:31:12,549 --> 00:31:17,559
another talk because bug bounty can be

744
00:31:15,160 --> 00:31:20,110
really hard if you are really really

745
00:31:17,559 --> 00:31:21,910
dependent on it so you know it for

746
00:31:20,110 --> 00:31:23,879
example in my case you have to wait like

747
00:31:21,910 --> 00:31:28,270
for example months until your bugs get

748
00:31:23,880 --> 00:31:29,860
you know resolved so if you really

749
00:31:28,270 --> 00:31:31,600
depend on doing backgrounds is a

750
00:31:29,860 --> 00:31:32,770
full-time job you may have like a really

751
00:31:31,600 --> 00:31:34,600
bad experience you know you're just

752
00:31:32,770 --> 00:31:36,370
stressing out that oh my god these

753
00:31:34,600 --> 00:31:39,459
reports are still not getting paid you

754
00:31:36,370 --> 00:31:41,678
know it's so what I think is the best

755
00:31:39,460 --> 00:31:43,809
thing to do if you're just starting out

756
00:31:41,679 --> 00:31:45,940
or like you know not like the best bug

757
00:31:43,809 --> 00:31:48,309
bounty hunter ever if to have a like a

758
00:31:45,940 --> 00:31:49,960
real job and then do bug bounties so

759
00:31:48,309 --> 00:31:53,110
like try to balance because doing it

760
00:31:49,960 --> 00:31:55,330
full-time can be real hard or real

761
00:31:53,110 --> 00:31:57,250
stressful but there are some people who

762
00:31:55,330 --> 00:31:59,139
are doing it so they can make a lot of

763
00:31:57,250 --> 00:32:03,220
money so it's certainly possible

764
00:31:59,140 --> 00:32:06,270
are you using a scanner or automated

765
00:32:03,220 --> 00:32:11,080
tools or is it just a waste of time you

766
00:32:06,270 --> 00:32:13,059
know in if the tool is like pretty basic

767
00:32:11,080 --> 00:32:16,149
or like something which everyone else

768
00:32:13,059 --> 00:32:19,600
uses then it's mostly a waste of time

769
00:32:16,150 --> 00:32:21,700
I'm sorry but if you run like you know

770
00:32:19,600 --> 00:32:24,129
these basic web app scans on a bug

771
00:32:21,700 --> 00:32:25,929
bounty program you just not gonna find

772
00:32:24,130 --> 00:32:29,710
anything probably because everyone can

773
00:32:25,929 --> 00:32:31,990
run that so what you should you should

774
00:32:29,710 --> 00:32:34,720
be focusing on maybe is try to build

775
00:32:31,990 --> 00:32:37,120
your own tools and try to build like

776
00:32:34,720 --> 00:32:39,400
something which is you know something

777
00:32:37,120 --> 00:32:42,309
unique to you and then no one else uses

778
00:32:39,400 --> 00:32:46,690
so okay I'm getting anonymous questions

779
00:32:42,309 --> 00:32:48,760
again so yeah automated tools can be

780
00:32:46,690 --> 00:32:50,679
pretty good if they are applied in a

781
00:32:48,760 --> 00:32:52,419
good way so it's not just you're using

782
00:32:50,679 --> 00:32:56,500
some basic scanner which is not gonna

783
00:32:52,419 --> 00:32:58,419
give you any results can you lead us

784
00:32:56,500 --> 00:33:01,110
this not sure I'm not running this slide

785
00:32:58,419 --> 00:33:04,240
though it looks like a big company so

786
00:33:01,110 --> 00:33:06,939
the wait what how did you get

787
00:33:04,240 --> 00:33:10,780
oh you're uploading stuff and the order

788
00:33:06,940 --> 00:33:16,330
is changing up so great first talk

789
00:33:10,780 --> 00:33:22,710
you're also gamer gamer I can stand

790
00:33:16,330 --> 00:33:22,710
exercise to the screen I don't know so

791
00:33:22,960 --> 00:33:26,410
what there was a game a question I'm not

792
00:33:24,940 --> 00:33:28,150
really a gamer I used to played games

793
00:33:26,410 --> 00:33:30,430
but I am not really I kind of tried to

794
00:33:28,150 --> 00:33:33,100
do some bit more productive or like you

795
00:33:30,430 --> 00:33:36,070
know but you know you can usually play

796
00:33:33,100 --> 00:33:40,230
pop G for a few minutes

797
00:33:36,070 --> 00:33:43,030
hours so chicken

798
00:33:40,230 --> 00:33:45,400
let's say I'm talking okay let's do this

799
00:33:43,030 --> 00:33:47,260
Oh somebody's DDoSing okay all are tied

800
00:33:45,400 --> 00:33:50,290
that's not gonna work you forgot the

801
00:33:47,260 --> 00:33:52,960
script tag chicken chicken

802
00:33:50,290 --> 00:33:55,270
besides the drugs yeah I agree have you

803
00:33:52,960 --> 00:33:57,340
used beef on XSS once no but that's a

804
00:33:55,270 --> 00:34:03,100
really great example if I can talk a bit

805
00:33:57,340 --> 00:34:06,760
about that's blind XSS so blind XSS is

806
00:34:03,100 --> 00:34:08,889
getting an XSS without actually using it

807
00:34:06,760 --> 00:34:10,750
so it can be pretty interesting so for

808
00:34:08,889 --> 00:34:14,290
example there was a bug I think maybe it

809
00:34:10,750 --> 00:34:16,810
doesn't go that D or something we're at

810
00:34:14,290 --> 00:34:19,389
the support forum you know you can make

811
00:34:16,810 --> 00:34:21,279
a support ticket and the guy put a blind

812
00:34:19,389 --> 00:34:24,250
XSS play loaded payload in the support

813
00:34:21,280 --> 00:34:27,130
ticket and like I don't know a few days

814
00:34:24,250 --> 00:34:31,210
later he got an XSS response back

815
00:34:27,130 --> 00:34:32,680
because on some other web application he

816
00:34:31,210 --> 00:34:34,810
stick had got into you know like a lot

817
00:34:32,679 --> 00:34:37,810
of systems there and some application

818
00:34:34,810 --> 00:34:40,179
didn't escape his script tags or like

819
00:34:37,810 --> 00:34:43,060
his payload and then it executed on like

820
00:34:40,179 --> 00:34:49,989
an internal someone system and you can

821
00:34:43,060 --> 00:34:52,449
so you can also make like blind you can

822
00:34:49,989 --> 00:34:55,060
also make like blind XSS attacks which

823
00:34:52,449 --> 00:34:57,490
is by you know exploiting something

824
00:34:55,060 --> 00:34:59,290
which can maybe take time it's really

825
00:34:57,490 --> 00:35:01,060
hard to explain without examples if

826
00:34:59,290 --> 00:35:03,100
you're interested bind XSS is something

827
00:35:01,060 --> 00:35:15,220
really cool and you can use beef to do

828
00:35:03,100 --> 00:35:20,950
that oh okay that's cool yes I accept

829
00:35:15,220 --> 00:35:27,100
thank you what's your biggest success in

830
00:35:20,950 --> 00:35:31,899
bug hunting I mean I don't know it's

831
00:35:27,100 --> 00:35:34,540
really one thing I can tell you that is

832
00:35:31,900 --> 00:35:36,050
when I was you know I was doing bug

833
00:35:34,540 --> 00:35:37,850
bounty for

834
00:35:36,050 --> 00:35:39,980
doing it I thought there is no way I can

835
00:35:37,850 --> 00:35:42,920
you know just do this there is no way I

836
00:35:39,980 --> 00:35:47,900
can find a bug and I try to do it a lot

837
00:35:42,920 --> 00:35:49,520
and in like a few months then Oh first I

838
00:35:47,900 --> 00:35:50,810
started on a point only program because

839
00:35:49,520 --> 00:35:52,190
that's where you don't get money you

840
00:35:50,810 --> 00:35:53,570
want to get points and it's way easier

841
00:35:52,190 --> 00:35:55,640
because not a lot of people are talking

842
00:35:53,570 --> 00:35:57,680
it and then I thought okay I'm just

843
00:35:55,640 --> 00:36:00,109
gonna go for the paid ones but why not

844
00:35:57,680 --> 00:36:02,779
and I went to the pay ones and I thought

845
00:36:00,110 --> 00:36:05,750
no way I'm gonna get a paid bug and I

846
00:36:02,780 --> 00:36:09,260
did it for like one week straight I

847
00:36:05,750 --> 00:36:11,570
thought you know what can I lose and I

848
00:36:09,260 --> 00:36:14,540
got the bug and then I was just like

849
00:36:11,570 --> 00:36:17,240
laying that at like 11 p.m. I was ready

850
00:36:14,540 --> 00:36:19,040
to go to sleep or something and I I got

851
00:36:17,240 --> 00:36:20,419
like emails like for emails or free

852
00:36:19,040 --> 00:36:22,430
emails because if you get a bug which

853
00:36:20,420 --> 00:36:24,170
pays then you get like lots of females

854
00:36:22,430 --> 00:36:26,540
because they confirm it they paid that's

855
00:36:24,170 --> 00:36:30,050
like so I just like look at my phone is

856
00:36:26,540 --> 00:36:31,700
buzzing like and I got the bounty my

857
00:36:30,050 --> 00:36:32,300
first bounty ever and it was a crazy

858
00:36:31,700 --> 00:36:35,750
feeling

859
00:36:32,300 --> 00:36:38,570
so it's certainly possible you just have

860
00:36:35,750 --> 00:36:45,940
to put in the work and try to do it it

861
00:36:38,570 --> 00:36:48,290
looks really impossible to to do that

862
00:36:45,940 --> 00:36:50,210
ask you I'm not such a big of a program

863
00:36:48,290 --> 00:36:54,200
how many how much time do I have

864
00:36:50,210 --> 00:36:55,700
or if we if we could the two questions

865
00:36:54,200 --> 00:36:59,000
that they're now if they could be the

866
00:36:55,700 --> 00:37:01,509
last place victims that's just what

867
00:36:59,000 --> 00:37:05,270
 I from last summer so I just

868
00:37:01,510 --> 00:37:08,030
finished that question yes flied away I

869
00:37:05,270 --> 00:37:09,350
hope it was gonna work out so s cannot

870
00:37:08,030 --> 00:37:13,220
to be with a problem yeah frameworks

871
00:37:09,350 --> 00:37:15,170
usually use some kind of to map the SQL

872
00:37:13,220 --> 00:37:17,029
database to an object so you're not

873
00:37:15,170 --> 00:37:19,970
actually writing queries you're doing

874
00:37:17,030 --> 00:37:22,220
you're communicating win an object so

875
00:37:19,970 --> 00:37:24,169
that's why they handle all of the

876
00:37:22,220 --> 00:37:27,109
queries for you in the background so you

877
00:37:24,170 --> 00:37:28,310
just don't have to you don't have to

878
00:37:27,110 --> 00:37:30,470
write the query and escape and

879
00:37:28,310 --> 00:37:35,540
everything so modern frameworks yes they

880
00:37:30,470 --> 00:37:37,790
can definitely prevent bugs nowadays and

881
00:37:35,540 --> 00:37:40,550
issues with low as a result of bug

882
00:37:37,790 --> 00:37:42,620
reporting these systems yeah in Hungary

883
00:37:40,550 --> 00:37:47,210
the situation is pretty rough in my

884
00:37:42,620 --> 00:37:49,210
opinion I don't recommend to report

885
00:37:47,210 --> 00:37:51,609
stuff to programs or not

886
00:37:49,210 --> 00:37:54,460
you shouldn't test or report or do

887
00:37:51,609 --> 00:37:57,460
anything for companies if they don't

888
00:37:54,460 --> 00:37:59,589
have a bug bounty program just just try

889
00:37:57,460 --> 00:38:01,510
to skip it you know it looks like just

890
00:37:59,589 --> 00:38:04,328
such a good thing to you know report a

891
00:38:01,510 --> 00:38:05,559
bug on a big something system but if

892
00:38:04,329 --> 00:38:07,710
they don't have a bug bounty program

893
00:38:05,559 --> 00:38:11,410
just just don't test and you're gonna

894
00:38:07,710 --> 00:38:13,150
you're gonna be way better later because

895
00:38:11,410 --> 00:38:14,950
you you don't want to get into legal

896
00:38:13,150 --> 00:38:17,770
stuff so just try to stay in bug

897
00:38:14,950 --> 00:38:19,990
bounties time is up

898
00:38:17,770 --> 00:38:23,770
hi big heavy yeah so time is up thank

899
00:38:19,990 --> 00:38:25,348
you anonymous I think that was it so I'm

900
00:38:23,770 --> 00:38:30,390
just going to do this trying to talk

901
00:38:25,349 --> 00:38:30,390
thank you thank you very much

