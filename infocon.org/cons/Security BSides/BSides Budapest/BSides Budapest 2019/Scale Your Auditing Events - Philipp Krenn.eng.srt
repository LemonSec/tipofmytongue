1
00:00:02,570 --> 00:00:09,170
thank you hi everyone let's see what we

2
00:00:06,080 --> 00:00:12,050
can take this so often I guess this is

3
00:00:09,170 --> 00:00:13,610
kind of arson we accept that the world

4
00:00:12,050 --> 00:00:16,099
is not perfect and security is not

5
00:00:13,610 --> 00:00:17,990
really perfect and we say this is fine

6
00:00:16,099 --> 00:00:19,489
but at some point maybe you reach this

7
00:00:17,990 --> 00:00:22,339
conclusion where everything is on fire

8
00:00:19,489 --> 00:00:23,840
and everything is terrible and there

9
00:00:22,340 --> 00:00:25,730
were enough recent events when this

10
00:00:23,840 --> 00:00:28,220
happened and it's kind of like we don't

11
00:00:25,730 --> 00:00:31,130
want to get to this point and obviously

12
00:00:28,220 --> 00:00:32,870
there is no silver bullet to avoid that

13
00:00:31,130 --> 00:00:34,489
and everybody trying to sell you a

14
00:00:32,870 --> 00:00:36,349
silver bullet to make that happen

15
00:00:34,489 --> 00:00:38,150
it's not it's not going to work but I

16
00:00:36,350 --> 00:00:40,340
want to look a bit at what you can do

17
00:00:38,150 --> 00:00:42,140
around auditing and figuring out like

18
00:00:40,340 --> 00:00:44,570
what has happened to your system and

19
00:00:42,140 --> 00:00:46,460
probably what hasn't happened or ideally

20
00:00:44,570 --> 00:00:49,150
what hasn't happened to your system so

21
00:00:46,460 --> 00:00:52,010
if you have any questions in the middle

22
00:00:49,150 --> 00:00:53,780
since time is not so long just post them

23
00:00:52,010 --> 00:00:56,480
to slide oh and if we have time at the

24
00:00:53,780 --> 00:00:58,130
end I will answer them live otherwise I

25
00:00:56,480 --> 00:01:01,640
will just tweet out the answer so if you

26
00:00:58,130 --> 00:01:03,649
go to slider and my Twitter handle then

27
00:01:01,640 --> 00:01:05,930
you can just post a question there just

28
00:01:03,649 --> 00:01:08,060
write any sensible question to that and

29
00:01:05,930 --> 00:01:10,070
I will come back to that at the end by

30
00:01:08,060 --> 00:01:11,750
the way did anybody figure out why I'm

31
00:01:10,070 --> 00:01:16,490
using that Twitter handle and that name

32
00:01:11,750 --> 00:01:19,280
for slider it's kind of like in the

33
00:01:16,490 --> 00:01:26,298
first slide as well did anybody see the

34
00:01:19,280 --> 00:01:29,840
connection to my name anybody old enough

35
00:01:26,299 --> 00:01:31,700
to remember rot13 where you rotated the

36
00:01:29,840 --> 00:01:34,880
letters so if you take my last name and

37
00:01:31,700 --> 00:01:36,710
rotate the letters by 13 this is what

38
00:01:34,880 --> 00:01:39,530
you get and the nice thing about rot13

39
00:01:36,710 --> 00:01:41,690
is if you rotate by 13 again you're back

40
00:01:39,530 --> 00:01:45,710
at the original that's kind of how I got

41
00:01:41,690 --> 00:01:50,210
to that anyway so let's jump into oddity

42
00:01:45,710 --> 00:01:54,199
who's using oddity already actively very

43
00:01:50,210 --> 00:01:56,539
few okay so oddity is this is from the

44
00:01:54,200 --> 00:01:58,250
main page of oddity all it is the user

45
00:01:56,540 --> 00:02:01,580
space component to the Linux auditing

46
00:01:58,250 --> 00:02:03,500
system and it's writing out records to

47
00:02:01,580 --> 00:02:07,280
disk what has happened and you'd

48
00:02:03,500 --> 00:02:09,110
basically define it to configure or to

49
00:02:07,280 --> 00:02:11,810
collect various pieces of information

50
00:02:09,110 --> 00:02:13,969
that are relevant for your instance so

51
00:02:11,810 --> 00:02:16,190
for example you could access or monitor

52
00:02:13,969 --> 00:02:18,350
the access to files or to the network

53
00:02:16,190 --> 00:02:20,690
or to system calls or whatever user

54
00:02:18,350 --> 00:02:23,359
action people are taking all of that can

55
00:02:20,690 --> 00:02:24,079
be collected by oddity and can then be

56
00:02:23,360 --> 00:02:26,000
locked

57
00:02:24,080 --> 00:02:27,830
what oddities by the way not doing is

58
00:02:26,000 --> 00:02:28,880
it's not blocking anything it's not like

59
00:02:27,830 --> 00:02:31,100
SELinux

60
00:02:28,880 --> 00:02:33,260
it's not securing your system it's just

61
00:02:31,100 --> 00:02:36,260
collecting what you are doing is just

62
00:02:33,260 --> 00:02:37,790
keeping track of that and it pretty much

63
00:02:36,260 --> 00:02:40,760
looks like this you have an application

64
00:02:37,790 --> 00:02:42,799
in user space and it calls the kernel

65
00:02:40,760 --> 00:02:45,500
and in the kernel you have these system

66
00:02:42,800 --> 00:02:47,780
calls and you have user task and exit

67
00:02:45,500 --> 00:02:50,570
those are the three hooks basically

68
00:02:47,780 --> 00:02:52,730
which you can use and if you have you

69
00:02:50,570 --> 00:02:54,920
have an exclude rule and if any of these

70
00:02:52,730 --> 00:02:56,840
actions passes through the exclude rule

71
00:02:54,920 --> 00:02:59,600
then it will be collected by the

72
00:02:56,840 --> 00:03:01,430
auditing daemon so basically you define

73
00:02:59,600 --> 00:03:04,070
your rules and everything that passes

74
00:03:01,430 --> 00:03:06,590
through your rules will be collected by

75
00:03:04,070 --> 00:03:10,250
Oddity and will be written out as a log

76
00:03:06,590 --> 00:03:17,210
file which looks something like this

77
00:03:10,250 --> 00:03:23,480
let's make this slightly larger so you

78
00:03:17,210 --> 00:03:28,400
have a report if I would be in with the

79
00:03:23,480 --> 00:03:36,079
right user obviously a non root user

80
00:03:28,400 --> 00:03:37,850
will have a hard time with that one what

81
00:03:36,080 --> 00:03:39,620
all report basically is doing is it's

82
00:03:37,850 --> 00:03:42,019
telling you when it ran so this was only

83
00:03:39,620 --> 00:03:43,670
running like a minute or so but you can

84
00:03:42,020 --> 00:03:45,620
still see it's collecting a lot of

85
00:03:43,670 --> 00:03:48,980
informations basically parsing that file

86
00:03:45,620 --> 00:03:50,959
the audit the log file and you can see

87
00:03:48,980 --> 00:03:53,269
for example we made three configuration

88
00:03:50,959 --> 00:03:55,520
changes we had 14 login attempts while

89
00:03:53,270 --> 00:03:58,340
it was running we have 3 uses in our

90
00:03:55,520 --> 00:04:00,590
system in total we have 5 terminals we

91
00:03:58,340 --> 00:04:03,440
have 3 host names all of that is being

92
00:04:00,590 --> 00:04:05,690
extracted from the logs what how do the

93
00:04:03,440 --> 00:04:09,590
logs look like you can use all search

94
00:04:05,690 --> 00:04:12,079
and then for example raw to see the raw

95
00:04:09,590 --> 00:04:14,120
events that you have in the background

96
00:04:12,080 --> 00:04:16,070
and what is going on here so for example

97
00:04:14,120 --> 00:04:19,340
here this is one entry and you can

98
00:04:16,070 --> 00:04:21,430
always see type some demon ended and

99
00:04:19,339 --> 00:04:24,320
then you see there was a message oddity

100
00:04:21,430 --> 00:04:27,410
this is the UNIX timestamp and this is

101
00:04:24,320 --> 00:04:29,450
the unique ID of the operation and then

102
00:04:27,410 --> 00:04:31,850
you can see the operation terminated

103
00:04:29,450 --> 00:04:34,969
some process and the whole thing was

104
00:04:31,850 --> 00:04:37,580
successful you could by the way have the

105
00:04:34,970 --> 00:04:39,560
same time stamp and ID if multiple

106
00:04:37,580 --> 00:04:41,690
exclude rules would let your process

107
00:04:39,560 --> 00:04:43,340
pass through it so we saw the three

108
00:04:41,690 --> 00:04:46,490
things where you could pass from the

109
00:04:43,340 --> 00:04:48,400
colonel to the logging if two or three

110
00:04:46,490 --> 00:04:51,620
of them match you would have the same

111
00:04:48,400 --> 00:04:53,570
time stamp and ID for that and that is

112
00:04:51,620 --> 00:04:55,160
one of these elements and you can see

113
00:04:53,570 --> 00:04:59,000
this is another one here the user

114
00:04:55,160 --> 00:05:01,820
started something and here we had some

115
00:04:59,000 --> 00:05:04,580
some reference that users should have

116
00:05:01,820 --> 00:05:06,380
been referenced something and all of

117
00:05:04,580 --> 00:05:08,390
these are kind of the raw events that

118
00:05:06,380 --> 00:05:10,550
you have you can also use that to filter

119
00:05:08,390 --> 00:05:12,919
for example you could say I only want to

120
00:05:10,550 --> 00:05:14,480
see the successful events and there will

121
00:05:12,920 --> 00:05:17,870
be quite a few successful events

122
00:05:14,480 --> 00:05:21,470
you could also say you don't want the

123
00:05:17,870 --> 00:05:27,590
successful ones I see for that one we

124
00:05:21,470 --> 00:05:29,810
will need sudo as well and then you can

125
00:05:27,590 --> 00:05:32,929
see we didn't have any unsuccessful

126
00:05:29,810 --> 00:05:35,660
events in our log here so all of this

127
00:05:32,930 --> 00:05:38,750
has been collected and this is working

128
00:05:35,660 --> 00:05:40,370
reasonably well but you can see the

129
00:05:38,750 --> 00:05:41,630
lines are always very different like

130
00:05:40,370 --> 00:05:44,300
this line has totally different

131
00:05:41,630 --> 00:05:46,010
parameters than this line here and if

132
00:05:44,300 --> 00:05:47,870
you want to centralize that because you

133
00:05:46,010 --> 00:05:50,390
probably have more than one instance it

134
00:05:47,870 --> 00:05:57,110
could be a bit of a pain to actually do

135
00:05:50,390 --> 00:05:58,940
that so how to understand the logs there

136
00:05:57,110 --> 00:06:01,340
is a documentation from Red Hat which

137
00:05:58,940 --> 00:06:03,800
actually describes like all the elements

138
00:06:01,340 --> 00:06:05,989
that you can have in there I could

139
00:06:03,800 --> 00:06:07,850
basically show that quickly as well so

140
00:06:05,990 --> 00:06:11,060
if you had over to the right of

141
00:06:07,850 --> 00:06:13,160
documentation they have a pretty good

142
00:06:11,060 --> 00:06:14,780
description of all the elements in that

143
00:06:13,160 --> 00:06:16,940
log and how to see how that's working

144
00:06:14,780 --> 00:06:21,169
out and if you want to define the rules

145
00:06:16,940 --> 00:06:23,540
in the github repository of Oddity you

146
00:06:21,170 --> 00:06:26,150
also have a couple of rules which you

147
00:06:23,540 --> 00:06:28,820
can define what oddity should be doing

148
00:06:26,150 --> 00:06:31,280
for you for example we will get back to

149
00:06:28,820 --> 00:06:34,460
that one for a power abuse where

150
00:06:31,280 --> 00:06:37,150
basically a root user is accessing stuff

151
00:06:34,460 --> 00:06:40,430
in the home directory of a not root user

152
00:06:37,150 --> 00:06:42,638
and this is one of the rules that Oddity

153
00:06:40,430 --> 00:06:46,539
could be working with for example so you

154
00:06:42,639 --> 00:06:50,259
can see always when they process exits

155
00:06:46,539 --> 00:06:53,860
we want to monitor the home directory if

156
00:06:50,259 --> 00:06:56,830
the user that is calling that has a low

157
00:06:53,860 --> 00:06:59,590
user ID for a user for in the developer

158
00:06:56,830 --> 00:07:03,448
group or like in a high user group has

159
00:06:59,590 --> 00:07:06,698
is the owner of that then you want to

160
00:07:03,449 --> 00:07:09,729
basically lock that event and we put it

161
00:07:06,699 --> 00:07:11,349
under the tag power abuse and this is

162
00:07:09,729 --> 00:07:13,240
how you could work with that and filter

163
00:07:11,349 --> 00:07:15,669
down on that later on so this is one of

164
00:07:13,240 --> 00:07:18,759
the rules that syntaxes may be slightly

165
00:07:15,669 --> 00:07:20,529
arcane but you have a couple of examples

166
00:07:18,759 --> 00:07:23,860
in this repository here that you can

167
00:07:20,529 --> 00:07:28,449
just reference and try to get started

168
00:07:23,860 --> 00:07:31,120
with one thing that is still a bit

169
00:07:28,449 --> 00:07:34,240
work-in-progress are containers so if

170
00:07:31,120 --> 00:07:38,020
you have a namespaces and are using

171
00:07:34,240 --> 00:07:39,729
docker saying like which event came from

172
00:07:38,020 --> 00:07:41,650
which container is sometimes a bit

173
00:07:39,729 --> 00:07:43,659
tricky and it's a multi-step approach

174
00:07:41,650 --> 00:07:47,620
and it still work in progress for all

175
00:07:43,659 --> 00:07:49,900
Italy here so did the general idea now

176
00:07:47,620 --> 00:07:51,639
is we want to collect all of these

177
00:07:49,900 --> 00:07:53,469
things and we also want to centralize

178
00:07:51,639 --> 00:07:54,819
that because you probably have more than

179
00:07:53,469 --> 00:07:58,539
one instance and you don't want to have

180
00:07:54,819 --> 00:08:02,050
it just in one place so how do you

181
00:07:58,539 --> 00:08:03,969
centralize that that is where I come

182
00:08:02,050 --> 00:08:05,469
into play so I work for elastic the

183
00:08:03,969 --> 00:08:07,509
company behind elastic search logstash

184
00:08:05,469 --> 00:08:09,729
Cubana you're probably using us

185
00:08:07,509 --> 00:08:11,289
somewhere for logging already and we

186
00:08:09,729 --> 00:08:13,389
also had that neat where we wanted to

187
00:08:11,289 --> 00:08:15,610
centralize our security events for that

188
00:08:13,389 --> 00:08:18,909
and how to do that

189
00:08:15,610 --> 00:08:20,589
I build highly monitored hello world

190
00:08:18,909 --> 00:08:24,789
applications and I want to show you how

191
00:08:20,589 --> 00:08:26,439
to do that very quickly today so I'm I

192
00:08:24,789 --> 00:08:28,060
assume some of you are familiar with the

193
00:08:26,439 --> 00:08:28,839
infamous Alex tech elasticsearch la

194
00:08:28,060 --> 00:08:30,399
Cubana

195
00:08:28,839 --> 00:08:33,578
which is like one sitting on top of the

196
00:08:30,399 --> 00:08:35,380
other we've added some more components

197
00:08:33,578 --> 00:08:38,319
later on so we have something called

198
00:08:35,380 --> 00:08:40,328
bits now the problem with Beats is there

199
00:08:38,320 --> 00:08:43,180
is no B nelq so that's why we call it

200
00:08:40,328 --> 00:08:46,359
LTP or Belk which looks something like

201
00:08:43,179 --> 00:08:50,560
this you can see it's a B and it has the

202
00:08:46,360 --> 00:08:51,850
elk horns but marketing didn't want to

203
00:08:50,560 --> 00:08:53,349
stick with that because we always are

204
00:08:51,850 --> 00:08:55,300
about scaling and this isn't very

205
00:08:53,350 --> 00:08:56,380
scalable if we have another component

206
00:08:55,300 --> 00:08:58,540
and a letter we

207
00:08:56,380 --> 00:09:00,130
need to redo the entire branding so we

208
00:08:58,540 --> 00:09:02,140
just call it the elastic sack but

209
00:09:00,130 --> 00:09:04,720
doesn't really matter here and you have

210
00:09:02,140 --> 00:09:05,860
this stack then and what the idea is you

211
00:09:04,720 --> 00:09:07,420
have the beat which is like a

212
00:09:05,860 --> 00:09:08,740
lightweight H in the shipper which is

213
00:09:07,420 --> 00:09:11,110
written in gold so you have a native

214
00:09:08,740 --> 00:09:12,430
binary to a forward your events store it

215
00:09:11,110 --> 00:09:14,620
in elasticsearch and then you can

216
00:09:12,430 --> 00:09:18,430
visualize it in Cabana to centralize

217
00:09:14,620 --> 00:09:19,810
that and all of the stuff that I'm

218
00:09:18,430 --> 00:09:21,550
showing you here is open-source you can

219
00:09:19,810 --> 00:09:24,760
just use it change it to whatever you

220
00:09:21,550 --> 00:09:27,160
want the first thing we try to do is we

221
00:09:24,760 --> 00:09:28,750
try to write the module for file bits so

222
00:09:27,160 --> 00:09:31,120
we have something called file bit which

223
00:09:28,750 --> 00:09:32,980
is basically tailing files forwarding

224
00:09:31,120 --> 00:09:36,100
them over the network and centralizing

225
00:09:32,980 --> 00:09:38,560
them the main thing is we always need to

226
00:09:36,100 --> 00:09:41,440
parse the log events and if you look at

227
00:09:38,560 --> 00:09:44,020
the raw log events that we had here you

228
00:09:41,440 --> 00:09:46,200
can see these are probably very hard to

229
00:09:44,020 --> 00:09:49,390
centralise because all the lines are

230
00:09:46,200 --> 00:09:51,310
totally different and how do we actually

231
00:09:49,390 --> 00:09:53,590
parse out the rate at the relevant

232
00:09:51,310 --> 00:09:54,699
information we write the regular

233
00:09:53,590 --> 00:09:57,870
expression to do that

234
00:09:54,700 --> 00:10:00,610
who likes writing regular expressions

235
00:09:57,870 --> 00:10:03,760
anybody okay it's the Stockholm Syndrome

236
00:10:00,610 --> 00:10:05,620
right where you got so used to writing

237
00:10:03,760 --> 00:10:10,120
regular expressions that is just part of

238
00:10:05,620 --> 00:10:12,670
how you approach stuff and for this one

239
00:10:10,120 --> 00:10:14,110
here we we did build that module and we

240
00:10:12,670 --> 00:10:16,300
collected some good information out of

241
00:10:14,110 --> 00:10:18,460
that but it was always very painful to

242
00:10:16,300 --> 00:10:20,439
write those regular expressions um just

243
00:10:18,460 --> 00:10:26,620
to give you a quick idea of what we are

244
00:10:20,440 --> 00:10:34,630
collecting in there by the way so let's

245
00:10:26,620 --> 00:10:36,310
head over so this is based on our

246
00:10:34,630 --> 00:10:38,590
auditing event since I've stopped all it

247
00:10:36,310 --> 00:10:40,449
D and I only ran it like 12 hours ago we

248
00:10:38,590 --> 00:10:42,370
need to switch to time so that time

249
00:10:40,450 --> 00:10:44,290
frame and you can see this was when

250
00:10:42,370 --> 00:10:46,510
Oddity was running and we collected a

251
00:10:44,290 --> 00:10:48,880
bunch of information here you can see

252
00:10:46,510 --> 00:10:51,010
for example these are all the things or

253
00:10:48,880 --> 00:10:52,900
the kinds of events that was the type

254
00:10:51,010 --> 00:10:55,600
field the very first one that we have

255
00:10:52,900 --> 00:11:00,060
Horst out you can see which users have

256
00:10:55,600 --> 00:11:03,220
been causing how many events you can see

257
00:11:00,060 --> 00:11:08,339
these are the raw events down here here

258
00:11:03,220 --> 00:11:09,470
I do have a map how do I get to the map

259
00:11:08,339 --> 00:11:11,060
so

260
00:11:09,470 --> 00:11:13,190
in some events we have an IP address and

261
00:11:11,060 --> 00:11:15,400
then we just do a geo IP lookup to draw

262
00:11:13,190 --> 00:11:19,490
that out we could actually try to see

263
00:11:15,400 --> 00:11:26,600
how good the map is today because GAAP

264
00:11:19,490 --> 00:11:34,040
always depends more more or less I guess

265
00:11:26,600 --> 00:11:35,600
I was in a hotel pretty close by so more

266
00:11:34,040 --> 00:11:38,480
or less you get the city you get the

267
00:11:35,600 --> 00:11:41,780
region so this is where the events were

268
00:11:38,480 --> 00:11:43,700
coming from so this has been parsed out

269
00:11:41,780 --> 00:11:45,829
just from the logs and by the way you

270
00:11:43,700 --> 00:11:47,840
can combine that with other logs so for

271
00:11:45,830 --> 00:11:49,610
example you have the auth log and you

272
00:11:47,840 --> 00:11:51,920
could figure out for example if somebody

273
00:11:49,610 --> 00:11:54,320
has to try to ssh into your instance

274
00:11:51,920 --> 00:11:57,709
since this is just a public instance you

275
00:11:54,320 --> 00:11:59,630
can see ssh login attempts you can see

276
00:11:57,710 --> 00:12:02,920
over the last 12 hours this is when I

277
00:11:59,630 --> 00:12:05,180
set up the instance this is when

278
00:12:02,920 --> 00:12:06,770
somebody else try to log in because you

279
00:12:05,180 --> 00:12:09,020
can see those were failed login attempts

280
00:12:06,770 --> 00:12:10,610
and you could see what usernames for

281
00:12:09,020 --> 00:12:13,069
example they tried to log into that

282
00:12:10,610 --> 00:12:16,430
instance and you can see where they're

283
00:12:13,070 --> 00:12:18,970
coming from so for a change it's not the

284
00:12:16,430 --> 00:12:22,040
Russians but the Chinese and the Koreans

285
00:12:18,970 --> 00:12:25,100
let's see it's I this South Korea at

286
00:12:22,040 --> 00:12:26,990
least and you can see this is where the

287
00:12:25,100 --> 00:12:29,210
SSH locking attempts were coming from

288
00:12:26,990 --> 00:12:31,340
but this is just a reverse lookup and

289
00:12:29,210 --> 00:12:34,850
this is just in the auth log so you can

290
00:12:31,340 --> 00:12:36,170
combine the audit d log and the auth log

291
00:12:34,850 --> 00:12:38,570
for example to see okay

292
00:12:36,170 --> 00:12:40,130
somebody tried to ssh into the instance

293
00:12:38,570 --> 00:12:42,080
and suddenly they were successful and

294
00:12:40,130 --> 00:12:44,540
afterwards we could collect events with

295
00:12:42,080 --> 00:12:47,990
Oddity so all of that can be collected

296
00:12:44,540 --> 00:12:50,980
and it's doable but it's still kind of

297
00:12:47,990 --> 00:12:53,780
painful to do that

298
00:12:50,980 --> 00:12:56,290
we always try to kind of talk food that

299
00:12:53,780 --> 00:12:59,180
stuff ourselves or maybe you like the

300
00:12:56,290 --> 00:13:03,140
phrase drink your own champagne better

301
00:12:59,180 --> 00:13:04,550
because that's probably nicer so we have

302
00:13:03,140 --> 00:13:06,199
a cloud service and for that cloud

303
00:13:04,550 --> 00:13:08,540
service we're kind of picky to find

304
00:13:06,200 --> 00:13:10,250
figure out all the security events and

305
00:13:08,540 --> 00:13:12,349
that's why they came around and said

306
00:13:10,250 --> 00:13:13,850
like well we want to use all the tea but

307
00:13:12,350 --> 00:13:15,890
all that parsing isn't working out so

308
00:13:13,850 --> 00:13:18,500
well and we want to get more information

309
00:13:15,890 --> 00:13:21,770
out of that so what we came up with we

310
00:13:18,500 --> 00:13:23,300
kind of wrapped audit D into a beat and

311
00:13:21,770 --> 00:13:25,160
we call it audit beat

312
00:13:23,300 --> 00:13:27,199
so it's using the same syntax and it's

313
00:13:25,160 --> 00:13:29,329
using the same base library but it's

314
00:13:27,200 --> 00:13:31,040
being wrapped and you don't need to

315
00:13:29,330 --> 00:13:33,200
write out the file and then parse it

316
00:13:31,040 --> 00:13:34,730
back rather than that we can't just

317
00:13:33,200 --> 00:13:37,910
collect the information in a more

318
00:13:34,730 --> 00:13:39,500
structured format directly also we've

319
00:13:37,910 --> 00:13:41,209
added some other events around it that

320
00:13:39,500 --> 00:13:43,880
made our life easier so we can correlate

321
00:13:41,210 --> 00:13:46,820
events we can resolve the user IDs to

322
00:13:43,880 --> 00:13:48,560
usernames directly we don't need to

323
00:13:46,820 --> 00:13:50,120
parse it out or write it out to a file

324
00:13:48,560 --> 00:13:52,209
and parse it back but we can send it to

325
00:13:50,120 --> 00:13:55,850
the elasticsearch directly

326
00:13:52,210 --> 00:13:57,830
it doesn't use EBP F but it's kind of

327
00:13:55,850 --> 00:13:59,690
closer in features than a lot of other

328
00:13:57,830 --> 00:14:02,150
things that we have the good advantage

329
00:13:59,690 --> 00:14:04,130
of oddity is that it works on all the

330
00:14:02,150 --> 00:14:05,750
kernels as well and it's easier to

331
00:14:04,130 --> 00:14:07,790
configure and since it's written in

332
00:14:05,750 --> 00:14:11,270
golang it should be reasonably secure

333
00:14:07,790 --> 00:14:13,490
hopefully and it does support doctor and

334
00:14:11,270 --> 00:14:16,160
kubernetes all the way so you can enrich

335
00:14:13,490 --> 00:14:18,740
all your events and know where they from

336
00:14:16,160 --> 00:14:21,430
which container or from which connait

337
00:14:18,740 --> 00:14:25,190
this namespace they've been coming from

338
00:14:21,430 --> 00:14:28,040
so what we've done is we took lip audit

339
00:14:25,190 --> 00:14:29,990
and have a goal library around that and

340
00:14:28,040 --> 00:14:31,819
that is communicating with the oddity

341
00:14:29,990 --> 00:14:33,740
framework that is basically the base

342
00:14:31,820 --> 00:14:37,220
library that we are using to extract

343
00:14:33,740 --> 00:14:39,110
from the kernel the messages and then

344
00:14:37,220 --> 00:14:41,410
just write them out in a structured

345
00:14:39,110 --> 00:14:46,790
format directly that's the general idea

346
00:14:41,410 --> 00:14:48,740
mom and what you can do then is let's

347
00:14:46,790 --> 00:14:51,650
just head to a dashboard so we have

348
00:14:48,740 --> 00:14:53,750
audit beet this by the way are all

349
00:14:51,650 --> 00:14:55,220
pre-built - but I'm I'm lazy I didn't

350
00:14:53,750 --> 00:14:57,680
build them myself and you don't have to

351
00:14:55,220 --> 00:14:59,570
either you can just use whatever is

352
00:14:57,680 --> 00:15:01,310
available you so you can see at night I

353
00:14:59,570 --> 00:15:03,530
started my instance we collected a

354
00:15:01,310 --> 00:15:05,540
couple of events right here and since

355
00:15:03,530 --> 00:15:08,000
then it has been a bit more quiet then I

356
00:15:05,540 --> 00:15:09,770
did something again here so you can just

357
00:15:08,000 --> 00:15:12,260
see the general spikes off for example

358
00:15:09,770 --> 00:15:13,880
connections and executed tasks and

359
00:15:12,260 --> 00:15:16,490
everything we have collected here you

360
00:15:13,880 --> 00:15:18,350
can see which rules were basically

361
00:15:16,490 --> 00:15:20,780
collected so you can see user logins

362
00:15:18,350 --> 00:15:23,600
user space etc all of this has been

363
00:15:20,780 --> 00:15:26,780
collected from Oddity and you can see

364
00:15:23,600 --> 00:15:30,350
the raw events down here and you can see

365
00:15:26,780 --> 00:15:35,420
how they are doing and before I talk too

366
00:15:30,350 --> 00:15:36,050
much about that let's do something else

367
00:15:35,420 --> 00:15:40,120
let

368
00:15:36,050 --> 00:15:45,069
look into the actual configuration file

369
00:15:40,120 --> 00:16:00,670
so let's say we want to use an elastic

370
00:15:45,070 --> 00:16:00,670
admin and we have apps on it

371
00:16:00,829 --> 00:16:07,209
aw did BMO this is where the

372
00:16:03,980 --> 00:16:09,890
configuration files should be living and

373
00:16:07,209 --> 00:16:12,290
this is just the configuration of how to

374
00:16:09,890 --> 00:16:13,910
put this into place so you have a few

375
00:16:12,290 --> 00:16:15,410
things which are kind of the

376
00:16:13,910 --> 00:16:16,880
configurations around it for example you

377
00:16:15,410 --> 00:16:18,380
can rate limit the events because

378
00:16:16,880 --> 00:16:19,910
otherwise you might be generating too

379
00:16:18,380 --> 00:16:22,010
many events and might be overloading

380
00:16:19,910 --> 00:16:23,930
your instance you could rate limit that

381
00:16:22,010 --> 00:16:26,000
I set it to zero so we don't rate limit

382
00:16:23,930 --> 00:16:27,920
right now I'm also not collecting the

383
00:16:26,000 --> 00:16:32,000
raw event messages because it might just

384
00:16:27,920 --> 00:16:33,949
be too much traffic and after that we

385
00:16:32,000 --> 00:16:36,050
have the actual raw rules that we want

386
00:16:33,950 --> 00:16:41,000
to collect so for example here we are

387
00:16:36,050 --> 00:16:43,790
watching a file PEM Khan so every time

388
00:16:41,000 --> 00:16:45,890
somebody reads writes exercise or

389
00:16:43,790 --> 00:16:48,529
changes an attribute on that file we

390
00:16:45,890 --> 00:16:51,890
want to collect that and we write out an

391
00:16:48,529 --> 00:16:53,510
event that is called PEM access with the

392
00:16:51,890 --> 00:16:55,939
tag and then you can filter down on

393
00:16:53,510 --> 00:16:58,069
those to find those probably PEM that

394
00:16:55,940 --> 00:17:00,050
conf is not a super valuable file to

395
00:16:58,070 --> 00:17:01,490
monitor but whatever important

396
00:17:00,050 --> 00:17:03,020
configuration files you have on your

397
00:17:01,490 --> 00:17:04,760
system for example that you want to

398
00:17:03,020 --> 00:17:06,859
monitor if somebody changes or exit

399
00:17:04,760 --> 00:17:08,929
system that is something that you could

400
00:17:06,859 --> 00:17:11,208
put into place so we can look into the

401
00:17:08,929 --> 00:17:13,790
raw events for that one here so I'll

402
00:17:11,209 --> 00:17:17,809
head over to the raw vents you can see

403
00:17:13,790 --> 00:17:19,010
in the last 12 hours we had 180,000

404
00:17:17,809 --> 00:17:20,209
events because well this is a hello

405
00:17:19,010 --> 00:17:22,220
world application I'm just collecting

406
00:17:20,209 --> 00:17:23,809
lots of stuff here you would need to

407
00:17:22,220 --> 00:17:27,260
fine-tune that for a production setup

408
00:17:23,809 --> 00:17:29,840
probably let's switch to over to the

409
00:17:27,260 --> 00:17:34,879
last 15 minutes to see just what we had

410
00:17:29,840 --> 00:17:41,080
here so for example I could say here I

411
00:17:34,880 --> 00:17:43,400
want to have I am accessing my file and

412
00:17:41,080 --> 00:17:45,020
then you can see we have all of these

413
00:17:43,400 --> 00:17:47,120
events here and then you could just

414
00:17:45,020 --> 00:17:48,980
either in the search bar search for Pam

415
00:17:47,120 --> 00:17:51,110
conf or in a more

416
00:17:48,980 --> 00:17:55,520
structured way you could also say since

417
00:17:51,110 --> 00:17:58,010
we have these tags and then you need to

418
00:17:55,520 --> 00:18:00,830
remember what was my rule

419
00:17:58,010 --> 00:18:04,730
I always forget what I call my rule it's

420
00:18:00,830 --> 00:18:05,960
Pam - XS and then you can just say this

421
00:18:04,730 --> 00:18:08,030
is the rule I'm interested in and

422
00:18:05,960 --> 00:18:10,130
ideally if you run that you can see this

423
00:18:08,030 --> 00:18:12,590
with just me where I've accessed that

424
00:18:10,130 --> 00:18:14,270
file and in that one event you can also

425
00:18:12,590 --> 00:18:17,059
see a couple of other pieces of

426
00:18:14,270 --> 00:18:19,820
information here so you can see the

427
00:18:17,059 --> 00:18:22,160
auditing information so you can see the

428
00:18:19,820 --> 00:18:23,600
primary actor who actually did that was

429
00:18:22,160 --> 00:18:27,260
the elastic admin user that I've been

430
00:18:23,600 --> 00:18:30,320
using you can see how I did it I ran cat

431
00:18:27,260 --> 00:18:32,780
and what I did so the primary object

432
00:18:30,320 --> 00:18:35,928
that I was monitoring was the Tamkin

433
00:18:32,780 --> 00:18:37,580
file that I've shown you before and you

434
00:18:35,929 --> 00:18:39,740
can also see there are some other pieces

435
00:18:37,580 --> 00:18:42,500
of information around it first off for

436
00:18:39,740 --> 00:18:44,840
example we can enrich every element with

437
00:18:42,500 --> 00:18:46,400
the host so here you can see where is

438
00:18:44,840 --> 00:18:48,199
this even running on what kind of post

439
00:18:46,400 --> 00:18:49,700
so for example if you know we have some

440
00:18:48,200 --> 00:18:51,290
security issued just on one specific

441
00:18:49,700 --> 00:18:53,390
operating system or at one specific

442
00:18:51,290 --> 00:18:55,490
version of it you could totally filter

443
00:18:53,390 --> 00:18:58,370
down to that so for example here I could

444
00:18:55,490 --> 00:19:01,340
say I'm only interested in Ubuntu 18:04

445
00:18:58,370 --> 00:19:03,709
- if you click on that plus it will add

446
00:19:01,340 --> 00:19:05,540
an additional filter and it will only

447
00:19:03,710 --> 00:19:07,280
filter down to instances from that

448
00:19:05,540 --> 00:19:09,139
specific version of the operating system

449
00:19:07,280 --> 00:19:10,760
which doesn't change much I only have a

450
00:19:09,140 --> 00:19:13,520
single instance which is running that

451
00:19:10,760 --> 00:19:17,540
version but you get the general idea how

452
00:19:13,520 --> 00:19:20,900
to drill into that and the second thing

453
00:19:17,540 --> 00:19:22,580
we are enriching here is the metadata

454
00:19:20,900 --> 00:19:23,630
from the cloud provider so if this is

455
00:19:22,580 --> 00:19:26,240
running on a cloud provider

456
00:19:23,630 --> 00:19:28,669
you can't just see this is running on

457
00:19:26,240 --> 00:19:30,950
AWS you can see the instance ID you can

458
00:19:28,669 --> 00:19:33,290
see this is running in Ireland on 80 -

459
00:19:30,950 --> 00:19:34,970
micro instance all of that can be

460
00:19:33,290 --> 00:19:36,889
enriched if this was running in docker

461
00:19:34,970 --> 00:19:38,540
which it's not but if it would be

462
00:19:36,890 --> 00:19:40,130
running in docker you could get the

463
00:19:38,540 --> 00:19:42,260
docker metadata as well so you would

464
00:19:40,130 --> 00:19:44,059
know which base image you have for

465
00:19:42,260 --> 00:19:45,530
Yutaka container or which labels do you

466
00:19:44,059 --> 00:19:47,780
have applied for your Tocker container

467
00:19:45,530 --> 00:19:49,730
if you are using kubernetes you could

468
00:19:47,780 --> 00:19:51,530
get the kubernetes namespace and similar

469
00:19:49,730 --> 00:19:56,990
pieces of information so that's all

470
00:19:51,530 --> 00:19:59,690
pretty easy to collect and show since

471
00:19:56,990 --> 00:20:01,640
I've shown the power abuse before let's

472
00:19:59,690 --> 00:20:02,279
quickly run through the power abuse to

473
00:20:01,640 --> 00:20:04,799
see what we

474
00:20:02,279 --> 00:20:07,799
getting out of that so let's assume we

475
00:20:04,799 --> 00:20:09,629
have our elastic admin user and he's

476
00:20:07,799 --> 00:20:12,869
curious so he just looks into the home

477
00:20:09,629 --> 00:20:15,059
directory and he finds the elastic user

478
00:20:12,869 --> 00:20:16,949
and he assumes well maybe the elastic

479
00:20:15,059 --> 00:20:19,168
user has something interesting I want to

480
00:20:16,950 --> 00:20:22,590
see and then he can see okay there's a

481
00:20:19,169 --> 00:20:30,649
secret txt file from that user maybe I

482
00:20:22,590 --> 00:20:30,649
want to take a look so will this work

483
00:20:31,549 --> 00:20:37,859
hopefully not because of this Domitian

484
00:20:34,950 --> 00:20:41,009
permission denied let's try with sudo

485
00:20:37,859 --> 00:20:42,889
again I am and you can see the file

486
00:20:41,009 --> 00:20:45,389
actually contains my secret which

487
00:20:42,889 --> 00:20:47,279
unsurprisingly there was a secret in it

488
00:20:45,389 --> 00:20:50,129
and now we want to figure out who has

489
00:20:47,279 --> 00:20:53,249
accessed that file so we have been

490
00:20:50,129 --> 00:20:56,279
tagging that with I think it was power

491
00:20:53,249 --> 00:20:58,589
abuse so what you can do is here you can

492
00:20:56,279 --> 00:21:01,109
just switch the label and say there

493
00:20:58,589 --> 00:21:04,229
should be something called power abuse

494
00:21:01,109 --> 00:21:06,089
and if you filter down to that you can

495
00:21:04,229 --> 00:21:07,679
see there were some before but this is

496
00:21:06,089 --> 00:21:11,820
probably the last one that we are

497
00:21:07,679 --> 00:21:13,950
interested in and you can see again this

498
00:21:11,820 --> 00:21:16,070
was the user doing something so you

499
00:21:13,950 --> 00:21:19,739
would know where to look you can see how

500
00:21:16,070 --> 00:21:22,439
the use cat this was the thing that we

501
00:21:19,739 --> 00:21:24,809
were monitoring the secret txt file and

502
00:21:22,440 --> 00:21:26,489
then you can see the various pieces of

503
00:21:24,809 --> 00:21:29,339
information around it that might help

504
00:21:26,489 --> 00:21:31,559
you search for example you can see the

505
00:21:29,339 --> 00:21:33,599
process ID and you can see the actual

506
00:21:31,559 --> 00:21:35,158
command that I have been running and we

507
00:21:33,599 --> 00:21:37,408
have added various tags to that so you

508
00:21:35,159 --> 00:21:40,049
could filter down so you can see who has

509
00:21:37,409 --> 00:21:43,229
been doing what and what they have been

510
00:21:40,049 --> 00:21:46,529
abusing or not abusing in your system so

511
00:21:43,229 --> 00:21:48,349
that's pretty easy another thing that

512
00:21:46,529 --> 00:21:52,009
you might be interested in let's say is

513
00:21:48,349 --> 00:21:54,359
somebody opens this socket and wants to

514
00:21:52,009 --> 00:21:55,739
yeah run something you don't want to

515
00:21:54,359 --> 00:22:01,619
have their so for example if I run

516
00:21:55,739 --> 00:22:04,109
netcat on 4025 anybody has their her

517
00:22:01,619 --> 00:22:04,978
laptop handy or something on their phone

518
00:22:04,109 --> 00:22:09,570
to talk to me

519
00:22:04,979 --> 00:22:13,889
so the instance name is you can just

520
00:22:09,570 --> 00:22:15,779
tell MIT to it's just like my twitter

521
00:22:13,889 --> 00:22:16,229
handle WTF which is like the right

522
00:22:15,779 --> 00:22:19,679
domain

523
00:22:16,230 --> 00:22:22,200
any demo if you just tellin it here you

524
00:22:19,679 --> 00:22:24,119
should be able to connect and then you

525
00:22:22,200 --> 00:22:27,539
can write whatever you want and it

526
00:22:24,119 --> 00:22:29,249
should pop up on the other side so if

527
00:22:27,539 --> 00:22:32,940
anybody has a laptop or anything handy

528
00:22:29,249 --> 00:22:35,489
you can just tell that to that instance

529
00:22:32,940 --> 00:22:38,070
on port 1025 and the messages should

530
00:22:35,489 --> 00:22:40,440
then pop up and we will be monitoring

531
00:22:38,070 --> 00:22:42,450
both which sockets have been opened and

532
00:22:40,440 --> 00:22:47,429
also which connections have been coming

533
00:22:42,450 --> 00:22:53,159
in into that instance here while you run

534
00:22:47,429 --> 00:22:54,989
that let me quickly jump back what to

535
00:22:53,159 --> 00:22:56,279
disrupt the process this is not where I

536
00:22:54,989 --> 00:22:58,049
wanted to go

537
00:22:56,279 --> 00:23:00,659
let me quickly jump back to the

538
00:22:58,049 --> 00:23:03,658
configuration file here so for example

539
00:23:00,659 --> 00:23:07,590
to log which sockets have been opened

540
00:23:03,659 --> 00:23:10,080
I'm just saying the system call is - s

541
00:23:07,590 --> 00:23:13,139
socket and then I just tag that with

542
00:23:10,080 --> 00:23:15,480
socket open for example if you connect

543
00:23:13,139 --> 00:23:16,918
to assist them out you could just you

544
00:23:15,480 --> 00:23:19,320
just need to know the right system call

545
00:23:16,919 --> 00:23:24,600
and then you can monitor any system call

546
00:23:19,320 --> 00:23:31,259
on your system so the open socket is the

547
00:23:24,600 --> 00:23:34,730
one that we're interested in let's get

548
00:23:31,259 --> 00:23:34,730
rid of this one because we don't need it

549
00:23:34,879 --> 00:23:39,469
let's say we want just the open socket

550
00:23:41,029 --> 00:23:50,009
and ideally this my browser is hanging

551
00:23:47,909 --> 00:23:51,600
ok this refreshes and then you could for

552
00:23:50,009 --> 00:23:54,210
example see here these are all the

553
00:23:51,600 --> 00:23:57,408
sockets that we have been opening and

554
00:23:54,210 --> 00:24:01,710
for example in that one here you see

555
00:23:57,409 --> 00:24:04,470
where what when has been opening sockets

556
00:24:01,710 --> 00:24:06,269
for example here you can see ok this

557
00:24:04,470 --> 00:24:09,690
Beach that is also monitoring my

558
00:24:06,269 --> 00:24:11,340
instance has been opening a socket when

559
00:24:09,690 --> 00:24:14,580
you could then just drill down into

560
00:24:11,340 --> 00:24:16,470
those um but because all of that

561
00:24:14,580 --> 00:24:18,749
configuration is kind of a bit arcane we

562
00:24:16,470 --> 00:24:20,940
have added another kind of module into

563
00:24:18,749 --> 00:24:22,710
that same thing this is not based on

564
00:24:20,940 --> 00:24:25,080
oddity this is kind of like a nicer

565
00:24:22,710 --> 00:24:26,309
syntax and just something we check in

566
00:24:25,080 --> 00:24:28,230
the background with audit beads

567
00:24:26,309 --> 00:24:30,030
automatically but we can for example

568
00:24:28,230 --> 00:24:32,760
check which

569
00:24:30,030 --> 00:24:34,649
you have which users packages logins and

570
00:24:32,760 --> 00:24:36,420
for example every two seconds I check

571
00:24:34,650 --> 00:24:38,820
which processes do I have running and

572
00:24:36,420 --> 00:24:40,440
which sockets do I have running and for

573
00:24:38,820 --> 00:24:42,689
those we have proper dashboards

574
00:24:40,440 --> 00:24:45,059
pre-built where you can just see what is

575
00:24:42,690 --> 00:24:48,240
going on on your instance so if I had

576
00:24:45,059 --> 00:24:50,370
over to the dashboards again and rather

577
00:24:48,240 --> 00:24:52,110
than looking at the raw event I'm

578
00:24:50,370 --> 00:24:54,300
looking at the audit beat dashboards

579
00:24:52,110 --> 00:24:57,870
again and you could just say like let's

580
00:24:54,300 --> 00:24:59,280
look at the sockets you can see these

581
00:24:57,870 --> 00:25:03,300
were all the sockets that were opened

582
00:24:59,280 --> 00:25:10,740
and actually does not the dashboard I

583
00:25:03,300 --> 00:25:21,360
wanted or did be if I could type audit

584
00:25:10,740 --> 00:25:23,850
beat I want the socket dashboard is the

585
00:25:21,360 --> 00:25:25,379
one I want here you can see these are

586
00:25:23,850 --> 00:25:27,570
all the sockets that have been opened

587
00:25:25,380 --> 00:25:29,190
and the connections because of the

588
00:25:27,570 --> 00:25:31,169
screen scaling this is slightly cut off

589
00:25:29,190 --> 00:25:33,120
now but you can see which IP addresses

590
00:25:31,170 --> 00:25:35,700
have been talking to you which

591
00:25:33,120 --> 00:25:38,280
destination ports I have been working

592
00:25:35,700 --> 00:25:40,380
here and you can see our 1025 is already

593
00:25:38,280 --> 00:25:42,240
sticking out here and I could just click

594
00:25:40,380 --> 00:25:45,360
on that plus here to filter down on that

595
00:25:42,240 --> 00:25:48,330
one and you can see we have in the last

596
00:25:45,360 --> 00:25:49,919
15 minutes for sockets we're open and

597
00:25:48,330 --> 00:25:52,919
you can see this is when they were open

598
00:25:49,920 --> 00:25:55,500
and you can see first here we have the

599
00:25:52,920 --> 00:25:57,390
listening command when our netcat opened

600
00:25:55,500 --> 00:25:59,340
and you can see this was the actual

601
00:25:57,390 --> 00:26:02,490
command that has been running and then

602
00:25:59,340 --> 00:26:04,530
you can see inbound connections where

603
00:26:02,490 --> 00:26:06,570
people connected to that and you can see

604
00:26:04,530 --> 00:26:08,639
from which other IP addresses to our

605
00:26:06,570 --> 00:26:10,320
system people open the socket connection

606
00:26:08,640 --> 00:26:13,110
and you can just monitor okay

607
00:26:10,320 --> 00:26:15,899
something bad started running on 1025

608
00:26:13,110 --> 00:26:18,240
and you can see when was it started

609
00:26:15,900 --> 00:26:20,910
you can also unfold that to actually see

610
00:26:18,240 --> 00:26:23,190
okay we have a socket opened and you can

611
00:26:20,910 --> 00:26:24,780
see all the details of like who has been

612
00:26:23,190 --> 00:26:26,309
doing that you can see the elastic admin

613
00:26:24,780 --> 00:26:28,470
user has been opening the socket and

614
00:26:26,309 --> 00:26:30,360
afterwards you can also see like which

615
00:26:28,470 --> 00:26:34,679
inbound connections have been coming

616
00:26:30,360 --> 00:26:36,209
into that one socket so if a remote

617
00:26:34,679 --> 00:26:38,370
shell is starting to pop up on your

618
00:26:36,210 --> 00:26:39,780
instance on one specific port you can

619
00:26:38,370 --> 00:26:41,790
then figure out which specific user

620
00:26:39,780 --> 00:26:43,230
opened it and which other systems

621
00:26:41,790 --> 00:26:45,480
connected to that pretty

622
00:26:43,230 --> 00:26:48,540
jillee so this has been going on did

623
00:26:45,480 --> 00:26:51,030
anybody write any messages no maybe the

624
00:26:48,540 --> 00:26:52,379
Wi-Fi is also blocking port 1025 I've

625
00:26:51,030 --> 00:26:55,260
seen it a couple of times that people

626
00:26:52,380 --> 00:26:57,120
try to connect and we're not able to but

627
00:26:55,260 --> 00:26:59,100
generally you should be able just to

628
00:26:57,120 --> 00:27:02,489
tell that to the instance and then it

629
00:26:59,100 --> 00:27:05,309
will show any other messages if I type

630
00:27:02,490 --> 00:27:08,280
other here it will just pop up and you

631
00:27:05,309 --> 00:27:10,649
can have those events okay

632
00:27:08,280 --> 00:27:12,620
since we were running a bit short on

633
00:27:10,650 --> 00:27:14,990
time

634
00:27:12,620 --> 00:27:18,059
[Music]

635
00:27:14,990 --> 00:27:21,960
the final thing maybe we could touch on

636
00:27:18,059 --> 00:27:23,760
is every now and then you have like some

637
00:27:21,960 --> 00:27:25,890
sensitive files you want to monitor if

638
00:27:23,760 --> 00:27:28,890
anything changed on those so what the

639
00:27:25,890 --> 00:27:33,630
file we have for example I have a very

640
00:27:28,890 --> 00:27:36,809
professional website here which is just

641
00:27:33,630 --> 00:27:38,669
welcome but maybe somebody wants to

642
00:27:36,809 --> 00:27:47,399
change the website so somebody could

643
00:27:38,669 --> 00:27:54,480
just walk in and say like the W in HTML

644
00:27:47,400 --> 00:27:57,200
we want to change that site it's

645
00:27:54,480 --> 00:27:57,200
read-only sorry

646
00:28:00,559 --> 00:28:08,770
let's change something on here let's say

647
00:28:07,230 --> 00:28:11,900
welcome to

648
00:28:08,770 --> 00:28:11,900
[Music]

649
00:28:16,160 --> 00:28:19,850
and suddenly your professional website

650
00:28:18,380 --> 00:28:21,860
is not so professional anymore so

651
00:28:19,850 --> 00:28:24,139
somebody just changed something and you

652
00:28:21,860 --> 00:28:26,919
might want to figure out what what

653
00:28:24,140 --> 00:28:30,170
changed on your system and to do that

654
00:28:26,920 --> 00:28:32,990
file bit sorry audit bit has another

655
00:28:30,170 --> 00:28:35,570
thing another module we call file

656
00:28:32,990 --> 00:28:39,710
integrity basically group basically you

657
00:28:35,570 --> 00:28:41,270
can define watch this folder exclude any

658
00:28:39,710 --> 00:28:43,550
files like these are the temporary files

659
00:28:41,270 --> 00:28:46,010
VI is creating because I don't want to

660
00:28:43,550 --> 00:28:48,320
create any noise from VI changes and

661
00:28:46,010 --> 00:28:50,270
watch for any changes basically what

662
00:28:48,320 --> 00:28:53,560
we're doing is we're hashing every file

663
00:28:50,270 --> 00:28:56,210
in there with sha-1 which is the default

664
00:28:53,560 --> 00:28:57,950
if it's smaller than ten megabytes and

665
00:28:56,210 --> 00:29:02,120
we're scanning up to fifty megabytes a

666
00:28:57,950 --> 00:29:09,500
second of files change and for that we

667
00:29:02,120 --> 00:29:11,959
can also see in a dashboard which should

668
00:29:09,500 --> 00:29:14,780
be a file integrity overview this one

669
00:29:11,960 --> 00:29:18,190
here this one will show you am we

670
00:29:14,780 --> 00:29:20,720
deleted and moved one file this one here

671
00:29:18,190 --> 00:29:22,910
you can see it was done by the root user

672
00:29:20,720 --> 00:29:24,800
because we were using sudo and you could

673
00:29:22,910 --> 00:29:26,720
see this was on this host and you can

674
00:29:24,800 --> 00:29:28,960
see these were the two files touched why

675
00:29:26,720 --> 00:29:32,510
do I haven't moved and deleted of that

676
00:29:28,960 --> 00:29:34,520
numeric file here because that's the

677
00:29:32,510 --> 00:29:35,810
pattern that VI uses to change the file

678
00:29:34,520 --> 00:29:38,450
it's actually creating a new file and

679
00:29:35,810 --> 00:29:40,970
then replacing the original one so you

680
00:29:38,450 --> 00:29:42,980
can see here this was the file that was

681
00:29:40,970 --> 00:29:44,540
deleted and this was the file that was

682
00:29:42,980 --> 00:29:46,960
changed and you can see the timestamp

683
00:29:44,540 --> 00:29:48,980
this is a way to track like what

684
00:29:46,960 --> 00:29:53,660
important files on your system are

685
00:29:48,980 --> 00:29:56,000
changing over time so depending on your

686
00:29:53,660 --> 00:29:58,990
operating system you will have different

687
00:29:56,000 --> 00:30:02,000
methods to keep track of file changes

688
00:29:58,990 --> 00:30:05,000
audit the oddity features obviously only

689
00:30:02,000 --> 00:30:07,490
work on Linux because it depends on the

690
00:30:05,000 --> 00:30:09,800
kernel to do that there is a port to Mac

691
00:30:07,490 --> 00:30:11,810
but that's very it's slightly different

692
00:30:09,800 --> 00:30:13,790
in Bakke so we haven't implemented that

693
00:30:11,810 --> 00:30:15,470
yet for the file integrity that's

694
00:30:13,790 --> 00:30:17,420
supported on all operating systems so

695
00:30:15,470 --> 00:30:18,620
you can monitor all the different

696
00:30:17,420 --> 00:30:20,660
operating systems and these are the

697
00:30:18,620 --> 00:30:22,310
calls we are using for that and you

698
00:30:20,660 --> 00:30:24,770
could switch out the hashing algorithm

699
00:30:22,310 --> 00:30:26,810
as well for example sha-1 is the one we

700
00:30:24,770 --> 00:30:28,340
use by default but this one here the

701
00:30:26,810 --> 00:30:29,510
last one would be the most performant

702
00:30:28,340 --> 00:30:31,280
one if your

703
00:30:29,510 --> 00:30:34,610
they're worried about performance in

704
00:30:31,280 --> 00:30:36,799
that okay we've seen that one to wrap-up

705
00:30:34,610 --> 00:30:38,570
I always compare this a bit to a block

706
00:30:36,799 --> 00:30:40,190
of Lego like you have a lot of rules you

707
00:30:38,570 --> 00:30:42,799
need to put together yourself

708
00:30:40,190 --> 00:30:44,360
but once you have the right rules you

709
00:30:42,799 --> 00:30:45,679
can pretty much monitor whatever you

710
00:30:44,360 --> 00:30:47,928
want on your system so it can be

711
00:30:45,679 --> 00:30:49,970
executions of processes it can be

712
00:30:47,929 --> 00:30:50,540
sockets it can be user actions it can be

713
00:30:49,970 --> 00:30:54,080
logins

714
00:30:50,540 --> 00:30:59,659
it could even by now be stuff like if I

715
00:30:54,080 --> 00:31:04,460
go back here we could even monitor for

716
00:30:59,660 --> 00:31:06,679
example packages here in the last 12

717
00:31:04,460 --> 00:31:08,990
hours it checks

718
00:31:06,679 --> 00:31:11,450
you have 620 packages installed on your

719
00:31:08,990 --> 00:31:13,850
one instance you can see when we're

720
00:31:11,450 --> 00:31:15,530
packages add it to your system and you

721
00:31:13,850 --> 00:31:17,178
have a full list including their version

722
00:31:15,530 --> 00:31:21,020
for example you could figure out like do

723
00:31:17,179 --> 00:31:22,820
I have audit bit installed and then you

724
00:31:21,020 --> 00:31:24,320
see we have one package installed called

725
00:31:22,820 --> 00:31:26,120
audit beat this is when it was installed

726
00:31:24,320 --> 00:31:27,889
and this is the version that we

727
00:31:26,120 --> 00:31:29,209
installed this can also be very helpful

728
00:31:27,890 --> 00:31:30,710
if you know there is a vulnerable

729
00:31:29,210 --> 00:31:33,169
version of one specific package out

730
00:31:30,710 --> 00:31:35,120
there you can just collect that from all

731
00:31:33,169 --> 00:31:36,860
your instances and see like where is

732
00:31:35,120 --> 00:31:38,540
that package still installed or which

733
00:31:36,860 --> 00:31:40,639
packet or which instances have already

734
00:31:38,540 --> 00:31:42,678
been updated with that so stuff like

735
00:31:40,640 --> 00:31:45,260
that will come in very handy this is

736
00:31:42,679 --> 00:31:48,200
just part of what audit beat can collect

737
00:31:45,260 --> 00:31:49,730
for you but you need to kind of

738
00:31:48,200 --> 00:31:52,429
configure the right rules whatever makes

739
00:31:49,730 --> 00:31:54,410
sense for your environment so we've seen

740
00:31:52,429 --> 00:31:56,360
oddity for the Royal ents and the base

741
00:31:54,410 --> 00:31:58,640
lab the basic kernel module that we were

742
00:31:56,360 --> 00:32:00,740
using and then we are wrapping it in to

743
00:31:58,640 --> 00:32:02,660
audit beat to make collection of events

744
00:32:00,740 --> 00:32:05,090
a bit easier and then we also have

745
00:32:02,660 --> 00:32:07,100
thrown in logs and dashboards to kind of

746
00:32:05,090 --> 00:32:09,549
like tie it all together and see a bit

747
00:32:07,100 --> 00:32:11,990
more what is happening on your system

748
00:32:09,549 --> 00:32:13,668
we're actually using our cloud

749
00:32:11,990 --> 00:32:15,860
infrastructure and we have a couple of

750
00:32:13,669 --> 00:32:17,510
thousand VMs and bare-metal instances

751
00:32:15,860 --> 00:32:19,879
and all of those are being monitored

752
00:32:17,510 --> 00:32:21,799
with audit beat and we have been doing

753
00:32:19,880 --> 00:32:23,870
that for quite a while sometimes people

754
00:32:21,799 --> 00:32:26,270
ask for the specific rules that we have

755
00:32:23,870 --> 00:32:27,860
or are using I'm not sure the colleagues

756
00:32:26,270 --> 00:32:29,179
want to put them out because then you

757
00:32:27,860 --> 00:32:31,969
could try to find something that is

758
00:32:29,179 --> 00:32:34,490
maybe not caught by those rules but

759
00:32:31,970 --> 00:32:36,350
maybe they will yeah that they plan to

760
00:32:34,490 --> 00:32:38,419
write blog post on the actual rules that

761
00:32:36,350 --> 00:32:40,158
we are using in production just to give

762
00:32:38,419 --> 00:32:42,000
you an idea what might make sense for us

763
00:32:40,159 --> 00:32:44,070
or for you

764
00:32:42,000 --> 00:32:46,050
if you want to try anything else out of

765
00:32:44,070 --> 00:32:47,939
that I have all the configuration files

766
00:32:46,050 --> 00:32:51,360
in the setup it's fully automated that's

767
00:32:47,940 --> 00:32:53,580
why I just could it set up tonight it's

768
00:32:51,360 --> 00:32:57,240
just a bit of ansible and terraform it

769
00:32:53,580 --> 00:32:59,040
will just start a cloud instance create

770
00:32:57,240 --> 00:33:03,360
all the configurations and then you can

771
00:32:59,040 --> 00:33:04,820
just go wild and try to do stuff if you

772
00:33:03,360 --> 00:33:07,530
are looking for alternative solutions

773
00:33:04,820 --> 00:33:10,230
slack has something very similar which

774
00:33:07,530 --> 00:33:11,730
is called go audit to collect auditing

775
00:33:10,230 --> 00:33:13,920
events and they are also using the

776
00:33:11,730 --> 00:33:15,810
elastic SEC to collect all the security

777
00:33:13,920 --> 00:33:18,750
events into that there is another

778
00:33:15,810 --> 00:33:21,360
project on github from scrubber e which

779
00:33:18,750 --> 00:33:23,430
is called all shape so like all report

780
00:33:21,360 --> 00:33:26,310
and all search they wrote the binary

781
00:33:23,430 --> 00:33:29,940
called all shape that can export the

782
00:33:26,310 --> 00:33:31,649
audit d-logs to Jason and XML if you

783
00:33:29,940 --> 00:33:33,290
really want to use XML that's the only

784
00:33:31,650 --> 00:33:35,760
tool that can do that from what I know

785
00:33:33,290 --> 00:33:39,060
so those are your options to get to

786
00:33:35,760 --> 00:33:41,550
those audit the event logs and with that

787
00:33:39,060 --> 00:33:44,850
I think we have one minute left for

788
00:33:41,550 --> 00:33:51,450
questions any questions in the room or

789
00:33:44,850 --> 00:33:58,139
did anybody post anything on slider are

790
00:33:51,450 --> 00:34:01,170
there any questions for Philip no

791
00:33:58,140 --> 00:34:02,670
questions here no Chris is there perfect

792
00:34:01,170 --> 00:34:06,140
then we are perfectly in time thanks a

793
00:34:02,670 --> 00:34:06,140
lot then thank you very much Philip

