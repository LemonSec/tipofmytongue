1
00:00:03,720 --> 00:00:10,389
hi there I'm glad all of you made it

2
00:00:07,900 --> 00:00:13,690
back from lunch break I'm happy to see

3
00:00:10,389 --> 00:00:16,810
so many new faces here today so I have a

4
00:00:13,690 --> 00:00:20,289
lot of things to cover so I'll get

5
00:00:16,810 --> 00:00:21,820
started so before we get into anything

6
00:00:20,289 --> 00:00:25,539
technical let me quickly introduce

7
00:00:21,820 --> 00:00:27,939
myself I lead operations at an

8
00:00:25,539 --> 00:00:31,869
independent cybersecurity organization

9
00:00:27,939 --> 00:00:35,260
called zero IT lamps and the CTO so

10
00:00:31,869 --> 00:00:38,320
mainly technical oversight there I'm

11
00:00:35,260 --> 00:00:40,800
also a member of a research laboratory

12
00:00:38,320 --> 00:00:45,399
at the Budapest University of Technology

13
00:00:40,800 --> 00:00:49,230
and economics names crisis and I'm part

14
00:00:45,399 --> 00:00:51,960
of their newfound CDF team chordoma

15
00:00:49,230 --> 00:00:54,459
CTF stands for a capture the flag if

16
00:00:51,960 --> 00:00:58,840
some of you are not yet familiar with

17
00:00:54,460 --> 00:01:01,719
that part so me personally I love

18
00:00:58,840 --> 00:01:04,089
reverse engineering I think it's my love

19
00:01:01,719 --> 00:01:08,710
and my life at least a good chunk of it

20
00:01:04,089 --> 00:01:11,380
I also like to say that I tend to open

21
00:01:08,710 --> 00:01:15,429
very expensive calculators at certain

22
00:01:11,380 --> 00:01:18,580
times that is referring to the ability

23
00:01:15,430 --> 00:01:20,619
to run arbitrary codes that as a way

24
00:01:18,580 --> 00:01:24,850
very often people demonstrate the

25
00:01:20,619 --> 00:01:27,070
capability of being able to do that and

26
00:01:24,850 --> 00:01:29,530
like I said I love capturing the flag

27
00:01:27,070 --> 00:01:32,919
I think capture the flag games are very

28
00:01:29,530 --> 00:01:37,630
competitive and hands-on way do you

29
00:01:32,920 --> 00:01:42,659
learn about cybersecurity so that is all

30
00:01:37,630 --> 00:01:46,780
about me for now here's some disclaimers

31
00:01:42,659 --> 00:01:50,220
so my opinions do not reflect any of my

32
00:01:46,780 --> 00:01:52,329
employers it's very good to say

33
00:01:50,220 --> 00:01:54,490
sometimes I use pictures from other

34
00:01:52,329 --> 00:01:56,350
places they are owned by their

35
00:01:54,490 --> 00:01:59,380
respective copyright holders please

36
00:01:56,350 --> 00:02:02,439
don't sue me and I tend to be quite

37
00:01:59,380 --> 00:02:04,839
frank as you'll see probably not very

38
00:02:02,439 --> 00:02:08,380
agreeable all the time

39
00:02:04,840 --> 00:02:12,040
we'll touch on certain topics that were

40
00:02:08,380 --> 00:02:14,920
classified at some point but everything

41
00:02:12,040 --> 00:02:17,819
in here is already public information so

42
00:02:14,920 --> 00:02:17,819
no concerns

43
00:02:17,820 --> 00:02:26,489
this will be a sort of rent but it will

44
00:02:22,960 --> 00:02:31,120
be informative and hopefully enjoyable

45
00:02:26,490 --> 00:02:35,190
and I only have 40 minutes so some

46
00:02:31,120 --> 00:02:38,020
things are naturally simplified so

47
00:02:35,190 --> 00:02:43,990
here's our opening question for today is

48
00:02:38,020 --> 00:02:46,600
cybersecurity hard well yeah why would

49
00:02:43,990 --> 00:02:49,240
being vitally be here if it wasn't hard

50
00:02:46,600 --> 00:02:51,220
but why is it hard at all

51
00:02:49,240 --> 00:02:53,020
well usually you have a lot of things to

52
00:02:51,220 --> 00:02:55,420
protect you have a lot of infrastructure

53
00:02:53,020 --> 00:02:59,710
a lot of software it's quite complicated

54
00:02:55,420 --> 00:03:05,170
and it's generally too much to handle

55
00:02:59,710 --> 00:03:06,790
for any single organization also since

56
00:03:05,170 --> 00:03:09,250
we have this thing called the internet

57
00:03:06,790 --> 00:03:11,140
as a curse and the texts are very hard

58
00:03:09,250 --> 00:03:13,690
to predict at scale you don't know

59
00:03:11,140 --> 00:03:15,399
necessarily who's targeting you what

60
00:03:13,690 --> 00:03:19,800
they're looking for what their goals are

61
00:03:15,400 --> 00:03:25,440
how they operate those are all pretty

62
00:03:19,800 --> 00:03:27,880
hard questions to do at scale that is

63
00:03:25,440 --> 00:03:30,459
and then there's people who will tell

64
00:03:27,880 --> 00:03:34,510
you social engineering is a big thing

65
00:03:30,459 --> 00:03:37,060
and the human aspect is well a certainly

66
00:03:34,510 --> 00:03:39,760
very big risk factor they're also hard

67
00:03:37,060 --> 00:03:42,280
to do correctly and then there's an

68
00:03:39,760 --> 00:03:43,989
ethic defense asymmetry where an

69
00:03:42,280 --> 00:03:47,200
attacker only has to find one

70
00:03:43,989 --> 00:03:49,480
vulnerability to exploit in order to you

71
00:03:47,200 --> 00:03:52,600
get into your systems while you have to

72
00:03:49,480 --> 00:03:56,399
do everything correctly so that is a big

73
00:03:52,600 --> 00:04:00,160
factor there but other than all of these

74
00:03:56,400 --> 00:04:02,020
here's one of my favorites it's hard

75
00:04:00,160 --> 00:04:03,880
because computers do as told

76
00:04:02,020 --> 00:04:06,880
it's hard because it's hard to make good

77
00:04:03,880 --> 00:04:08,769
rules some people say well today I'm

78
00:04:06,880 --> 00:04:12,340
here today I'm here to tell you about

79
00:04:08,770 --> 00:04:18,340
how computers well they do as told

80
00:04:12,340 --> 00:04:19,840
but who's telling them so let me jump to

81
00:04:18,339 --> 00:04:22,029
a different topic quick

82
00:04:19,839 --> 00:04:23,710
I'll introduce free software is a

83
00:04:22,029 --> 00:04:27,219
concept for those of you that are not

84
00:04:23,710 --> 00:04:29,198
familiar with what free software is free

85
00:04:27,220 --> 00:04:32,469
software is just software

86
00:04:29,199 --> 00:04:34,599
but you get four very important freedom

87
00:04:32,469 --> 00:04:37,030
rights with free software those are

88
00:04:34,599 --> 00:04:40,150
freedom zero that you can run software

89
00:04:37,030 --> 00:04:42,309
as you wish for any purpose freedom one

90
00:04:40,150 --> 00:04:45,340
that you can study the source code and

91
00:04:42,310 --> 00:04:47,379
change the program as you wish you have

92
00:04:45,340 --> 00:04:49,479
the freedom to redistribute the copies

93
00:04:47,379 --> 00:04:51,879
of the program as you like and you can

94
00:04:49,479 --> 00:04:53,560
also redistribute your changes so

95
00:04:51,879 --> 00:04:56,529
whatever change you make to the original

96
00:04:53,560 --> 00:04:58,689
software can make its way back to the

97
00:04:56,529 --> 00:05:00,789
community or the people that are

98
00:04:58,689 --> 00:05:06,849
interested in having whatever change you

99
00:05:00,789 --> 00:05:10,210
made so these are very elaborate topics

100
00:05:06,849 --> 00:05:13,569
freedom security privacy but it's not

101
00:05:10,210 --> 00:05:16,568
quite trivial how these things are may

102
00:05:13,569 --> 00:05:18,879
be related or interconnected so I think

103
00:05:16,569 --> 00:05:22,089
it's fairly easy to agree that privacy

104
00:05:18,879 --> 00:05:25,779
is a part of freedom I don't think that

105
00:05:22,089 --> 00:05:30,279
needs too much explanation probably all

106
00:05:25,779 --> 00:05:33,430
right but here's the thing there were

107
00:05:30,279 --> 00:05:35,620
studies made where the conclusion was

108
00:05:33,430 --> 00:05:38,740
that surveillance silence is dissenting

109
00:05:35,620 --> 00:05:43,060
views that is anyone with an unpopular

110
00:05:38,740 --> 00:05:45,399
or less mainstream opinion gets silenced

111
00:05:43,060 --> 00:05:48,279
or you know they don't get to present

112
00:05:45,399 --> 00:05:50,949
their views as much as people with more

113
00:05:48,279 --> 00:05:52,779
mainstream opinions so there's a

114
00:05:50,949 --> 00:05:57,879
connection there where you having

115
00:05:52,779 --> 00:05:59,139
privacy increases your freedom and then

116
00:05:57,879 --> 00:06:02,439
there's also a connection between

117
00:05:59,139 --> 00:06:05,379
security and privacy because you often

118
00:06:02,439 --> 00:06:08,169
have passwords or private keys so having

119
00:06:05,379 --> 00:06:10,210
privacy on them gives you security for

120
00:06:08,169 --> 00:06:13,240
example when you're doing authorization

121
00:06:10,210 --> 00:06:18,008
of some kind and then perhaps vice versa

122
00:06:13,240 --> 00:06:20,710
to you so the hardest connection there

123
00:06:18,009 --> 00:06:22,180
from all of these to realize is the one

124
00:06:20,710 --> 00:06:25,539
between freedom and security

125
00:06:22,180 --> 00:06:28,479
because there is a misunderstanding that

126
00:06:25,539 --> 00:06:30,729
is quite widespread in the industry

127
00:06:28,479 --> 00:06:33,550
which is generally called security by

128
00:06:30,729 --> 00:06:36,520
obscurity which means that people tend

129
00:06:33,550 --> 00:06:41,110
to think that software or in general

130
00:06:36,520 --> 00:06:42,849
designs are more secure if people cannot

131
00:06:41,110 --> 00:06:44,679
see or read them

132
00:06:42,849 --> 00:06:47,529
meaning that by this argument

133
00:06:44,679 --> 00:06:49,659
proprietary software take a a closed

134
00:06:47,529 --> 00:06:51,339
source software is more secure because

135
00:06:49,659 --> 00:06:53,649
you don't get to see how it works so it

136
00:06:51,339 --> 00:06:55,659
must be harder to exploit but that is

137
00:06:53,649 --> 00:06:58,149
quite frankly because

138
00:06:55,659 --> 00:07:01,959
proprietary software can be exploited

139
00:06:58,149 --> 00:07:05,949
just as much but the attacker is doing

140
00:07:01,959 --> 00:07:07,990
it are well more resourced so they have

141
00:07:05,949 --> 00:07:10,240
to put in more effort to get the same

142
00:07:07,990 --> 00:07:12,309
results but this only levels the playing

143
00:07:10,240 --> 00:07:13,889
fields for the attackers and not the

144
00:07:12,309 --> 00:07:17,529
defenders

145
00:07:13,889 --> 00:07:19,629
so my conclusion here is that these

146
00:07:17,529 --> 00:07:22,629
arguments these topics are

147
00:07:19,629 --> 00:07:24,699
interdependent not only related with

148
00:07:22,629 --> 00:07:27,429
each and every one of them depends on

149
00:07:24,699 --> 00:07:32,319
the others so you don't get to have any

150
00:07:27,429 --> 00:07:35,080
of them unless you have all of them so

151
00:07:32,319 --> 00:07:37,749
what what is my point here right well

152
00:07:35,080 --> 00:07:40,179
here's my point if an organization is

153
00:07:37,749 --> 00:07:42,879
aiming to do true security that is not

154
00:07:40,179 --> 00:07:43,989
like filling out check boxes and gdpr

155
00:07:42,879 --> 00:07:46,539
compliance and whatever

156
00:07:43,990 --> 00:07:48,669
well they need freedom and they need

157
00:07:46,539 --> 00:07:51,519
freedom both in software and in hardware

158
00:07:48,669 --> 00:07:53,229
because if they don't get their freedom

159
00:07:51,519 --> 00:07:57,699
like I said they don't get their

160
00:07:53,229 --> 00:08:02,019
security and privacy either so how do

161
00:07:57,699 --> 00:08:04,899
you do an entire organizations computing

162
00:08:02,019 --> 00:08:08,349
with these constraints well it's really

163
00:08:04,899 --> 00:08:11,949
hard but in the software space their

164
00:08:08,349 --> 00:08:14,800
solutions well for the most part it's

165
00:08:11,949 --> 00:08:16,899
very often the case that organizations

166
00:08:14,800 --> 00:08:20,050
have a lot of legacy software on hand

167
00:08:16,899 --> 00:08:22,269
and if it's proprietary it's really hard

168
00:08:20,050 --> 00:08:25,659
to like move over to let's say a new

169
00:08:22,269 --> 00:08:28,539
operating system and also there's the

170
00:08:25,659 --> 00:08:32,229
cost and time investment on user

171
00:08:28,539 --> 00:08:35,559
adoption people are very attached to

172
00:08:32,229 --> 00:08:37,449
things they use if you've been using I

173
00:08:35,559 --> 00:08:40,299
don't know like Microsoft Office for the

174
00:08:37,448 --> 00:08:42,279
last 20 years it's not like you're going

175
00:08:40,299 --> 00:08:44,500
to be changing to something else

176
00:08:42,279 --> 00:08:48,939
seamlessly and painlessly on hundreds of

177
00:08:44,500 --> 00:08:51,459
workstations so adoption is hard but you

178
00:08:48,939 --> 00:08:55,750
have options at least right there's nice

179
00:08:51,459 --> 00:08:59,279
life Linux where the freedom freedom

180
00:08:55,750 --> 00:09:02,949
I mean the foundation for free software

181
00:08:59,279 --> 00:09:07,899
has this certification called area for

182
00:09:02,949 --> 00:09:11,490
respects your freedom which is basically

183
00:09:07,899 --> 00:09:14,709
a certificate that they give out to

184
00:09:11,490 --> 00:09:16,060
organizations which proves that whatever

185
00:09:14,709 --> 00:09:19,149
product or service they are providing

186
00:09:16,060 --> 00:09:22,569
respects your freedom in regards to what

187
00:09:19,149 --> 00:09:25,120
we've said before and then there's also

188
00:09:22,569 --> 00:09:28,680
other operating systems such as some

189
00:09:25,120 --> 00:09:32,769
variants of BSD which are also free so

190
00:09:28,680 --> 00:09:35,739
given that you are willing to invest

191
00:09:32,769 --> 00:09:39,279
time and effort into you like using

192
00:09:35,740 --> 00:09:42,009
these which is quite hard I mean in a

193
00:09:39,279 --> 00:09:45,970
general sense given what I have said

194
00:09:42,009 --> 00:09:47,920
before you can do you free computing in

195
00:09:45,970 --> 00:09:51,550
the sense that you can have a fully free

196
00:09:47,920 --> 00:09:54,639
software stack for the most part so what

197
00:09:51,550 --> 00:10:00,040
about hardware that is a question that

198
00:09:54,639 --> 00:10:02,290
often gets overlooked so my question is

199
00:10:00,040 --> 00:10:06,099
what does your average workstation look

200
00:10:02,290 --> 00:10:09,670
like well the it looks like this or this

201
00:10:06,100 --> 00:10:11,800
or some combination or you know like

202
00:10:09,670 --> 00:10:13,240
something close to these you have an

203
00:10:11,800 --> 00:10:17,258
average for each station computer or

204
00:10:13,240 --> 00:10:19,959
laptop but not many people think about

205
00:10:17,259 --> 00:10:21,759
what the components are in these well

206
00:10:19,959 --> 00:10:24,939
you think about it's like how strong is

207
00:10:21,759 --> 00:10:27,069
the CPU or how strong is the GPU but you

208
00:10:24,939 --> 00:10:29,170
don't tend to think as much about who's

209
00:10:27,069 --> 00:10:31,689
making this components and what

210
00:10:29,170 --> 00:10:36,180
underlying assumptions they are making

211
00:10:31,689 --> 00:10:39,099
about how you want to do computing so as

212
00:10:36,180 --> 00:10:42,729
you could see in the title this is about

213
00:10:39,100 --> 00:10:45,009
x86 so actually what if you don't know

214
00:10:42,730 --> 00:10:49,540
that is let me quickly introduce it

215
00:10:45,009 --> 00:10:52,029
Intel x86 is a family of processors it's

216
00:10:49,540 --> 00:10:55,899
based on the original Intel 8086

217
00:10:52,029 --> 00:11:01,059
processor direct from 78 not yesterday

218
00:10:55,899 --> 00:11:03,610
huh so this architecture is essentially

219
00:11:01,059 --> 00:11:05,620
at the heart of most end-user computers

220
00:11:03,610 --> 00:11:09,910
that you can like go out to a store and

221
00:11:05,620 --> 00:11:12,400
buy today and then there's blue team

222
00:11:09,910 --> 00:11:15,969
which is very convenient

223
00:11:12,400 --> 00:11:18,490
everyone blue team aka Intel is one of

224
00:11:15,970 --> 00:11:21,910
the vendors who provides chips in this

225
00:11:18,490 --> 00:11:26,080
space a lot more and then there's red

226
00:11:21,910 --> 00:11:29,579
team aka AMD we also produce these x86

227
00:11:26,080 --> 00:11:34,810
chips and then there's another company

228
00:11:29,580 --> 00:11:38,860
that is not well known it is called via

229
00:11:34,810 --> 00:11:41,410
a Chinese manufacturer who has licenses

230
00:11:38,860 --> 00:11:43,660
and capability to produce other x86

231
00:11:41,410 --> 00:11:47,380
based chips but their market share is

232
00:11:43,660 --> 00:11:54,270
sub 1% so they are not really relevant

233
00:11:47,380 --> 00:11:56,500
for our intents and purposes today so

234
00:11:54,270 --> 00:11:59,770
this is technically what's called a

235
00:11:56,500 --> 00:12:05,050
duopoly the x86 market is essentially

236
00:11:59,770 --> 00:12:05,530
ruled by these two players so what can

237
00:12:05,050 --> 00:12:08,349
you do

238
00:12:05,530 --> 00:12:10,300
moving away is naturally doable like I

239
00:12:08,350 --> 00:12:12,460
said you have endless list of all

240
00:12:10,300 --> 00:12:17,020
software compiled for this very

241
00:12:12,460 --> 00:12:20,970
architecture and emulation or binary

242
00:12:17,020 --> 00:12:25,840
lifting doesn't really work at least yet

243
00:12:20,970 --> 00:12:27,940
and these companies make incredible

244
00:12:25,840 --> 00:12:30,420
amounts of money by having these

245
00:12:27,940 --> 00:12:33,880
licenses and being able to produce these

246
00:12:30,420 --> 00:12:35,500
processing units so there of course they

247
00:12:33,880 --> 00:12:37,240
are not interested in giving away any of

248
00:12:35,500 --> 00:12:39,040
their licenses our reference

249
00:12:37,240 --> 00:12:46,090
implementations for someone else

250
00:12:39,040 --> 00:12:47,770
oh why would they so as far as as far as

251
00:12:46,090 --> 00:12:53,710
you can see we are stuck with them for

252
00:12:47,770 --> 00:12:57,310
now so let me introduce our main topic

253
00:12:53,710 --> 00:12:59,590
of today Intel's management engine and

254
00:12:57,310 --> 00:13:01,599
AMD's platform security processor

255
00:12:59,590 --> 00:13:03,850
I'm calling this vault garden but it's

256
00:13:01,600 --> 00:13:10,530
more like a swamp that's rotting like

257
00:13:03,850 --> 00:13:13,740
real bad so historically since 2006

258
00:13:10,530 --> 00:13:16,030
Intel introduced this new sub system

259
00:13:13,740 --> 00:13:21,160
which was initially in the memory

260
00:13:16,030 --> 00:13:23,030
controller hub or MCH but from 2006 on

261
00:13:21,160 --> 00:13:25,310
it was relocated

262
00:13:23,030 --> 00:13:27,939
to you the PCH the platform controller

263
00:13:25,310 --> 00:13:33,589
hub that was starting with the first

264
00:13:27,940 --> 00:13:35,510
generation of Nehalem CPUs so since then

265
00:13:33,590 --> 00:13:39,500
this new subsystem is more tightly

266
00:13:35,510 --> 00:13:42,580
integrated into the Intel platform and

267
00:13:39,500 --> 00:13:44,600
the official story the official

268
00:13:42,580 --> 00:13:48,470
situation that this was supposed to

269
00:13:44,600 --> 00:13:50,540
solve as out of man management's Intel

270
00:13:48,470 --> 00:13:52,930
has this entire brand called AMT which

271
00:13:50,540 --> 00:13:55,010
stands for active management technology

272
00:13:52,930 --> 00:13:57,400
so it's supposed to provide this

273
00:13:55,010 --> 00:14:00,230
out-of-band management for your systems

274
00:13:57,400 --> 00:14:03,370
but you can't really turn it off so

275
00:14:00,230 --> 00:14:03,370
quite convenient huh

276
00:14:08,620 --> 00:14:14,060
so once again let me change gears and

277
00:14:11,930 --> 00:14:17,209
talk a bit about the Tannenbaum Torvalds

278
00:14:14,060 --> 00:14:18,979
debate those names might be familiar to

279
00:14:17,210 --> 00:14:23,090
you some of you they're very very

280
00:14:18,980 --> 00:14:25,550
important people I might say so there is

281
00:14:23,090 --> 00:14:28,810
this argument back in 92 in the unit

282
00:14:25,550 --> 00:14:30,770
Usenet discussion group about the

283
00:14:28,810 --> 00:14:33,979
advantages and disadvantages of

284
00:14:30,770 --> 00:14:37,189
monolithic versus micro kernels where

285
00:14:33,980 --> 00:14:39,650
mr. troll Torvalds said that monolithic

286
00:14:37,190 --> 00:14:43,010
kernels are better for a lot of reasons

287
00:14:39,650 --> 00:14:46,250
it is a quite complicated topic that's

288
00:14:43,010 --> 00:14:48,560
I'm not gonna open up today anyway

289
00:14:46,250 --> 00:14:52,460
mr. Tenenbaum said that micro kernels

290
00:14:48,560 --> 00:14:55,790
are the way to go so this was a quite

291
00:14:52,460 --> 00:14:57,650
heated discussion but in any case mr.

292
00:14:55,790 --> 00:15:02,360
Torvalds went on to create Linux

293
00:14:57,650 --> 00:15:05,390
starting from 91 while mr. Tenenbaum

294
00:15:02,360 --> 00:15:09,140
created an alternative kernel code MINIX

295
00:15:05,390 --> 00:15:14,180
which was a micro kernel this is going

296
00:15:09,140 --> 00:15:16,010
to be relevant later so Intel what do we

297
00:15:14,180 --> 00:15:18,530
know about them well they're this small

298
00:15:16,010 --> 00:15:21,260
in the company yeah quite a couple of

299
00:15:18,530 --> 00:15:23,020
billion dollars here and there and they

300
00:15:21,260 --> 00:15:26,060
needed something that they could take I

301
00:15:23,020 --> 00:15:28,610
mean in order to power this subsystem

302
00:15:26,060 --> 00:15:31,550
but they did not want something with

303
00:15:28,610 --> 00:15:35,450
strong copyleft licensing like the GPL

304
00:15:31,550 --> 00:15:36,498
so please no storm copyleft where can we

305
00:15:35,450 --> 00:15:38,839
take something from

306
00:15:36,499 --> 00:15:41,209
well MINIX was licensed under the bsd

307
00:15:38,839 --> 00:15:43,549
license which is free in the sense that

308
00:15:41,209 --> 00:15:46,339
you can take MINIX and not share your

309
00:15:43,549 --> 00:15:49,999
changes with the community so until was

310
00:15:46,339 --> 00:15:52,189
like yay let me take this and I'm not

311
00:15:49,999 --> 00:15:52,549
going to share whatever I'm doing with

312
00:15:52,189 --> 00:15:56,329
it

313
00:15:52,549 --> 00:15:58,608
quite convenient so they took MINIX

314
00:15:56,329 --> 00:16:00,949
because like I said it's a microkernel

315
00:15:58,609 --> 00:16:04,369
and having a microkernel helps with

316
00:16:00,949 --> 00:16:08,049
having a small memory footprint and

317
00:16:04,369 --> 00:16:10,849
since this was a subsystem that was very

318
00:16:08,049 --> 00:16:11,659
sensitive to you having a low memory

319
00:16:10,849 --> 00:16:14,179
footprint

320
00:16:11,659 --> 00:16:17,269
it was very desirable for them to you

321
00:16:14,179 --> 00:16:21,499
take something like MINIX and probably

322
00:16:17,269 --> 00:16:26,179
try to optimize it even more so they

323
00:16:21,499 --> 00:16:28,579
took MINIX so what does this subsystem

324
00:16:26,179 --> 00:16:31,968
do and what is the end platform that

325
00:16:28,579 --> 00:16:35,089
they ended up building using MINIX among

326
00:16:31,969 --> 00:16:37,819
other things well my opinion is that

327
00:16:35,089 --> 00:16:39,789
it's an abomination but maybe if you

328
00:16:37,819 --> 00:16:44,839
don't if we don't want to get that real

329
00:16:39,789 --> 00:16:46,759
let me quote some other people here I'm

330
00:16:44,839 --> 00:16:49,089
sorry in advance because I know I'm

331
00:16:46,759 --> 00:16:54,169
gonna butcher some of these names so

332
00:16:49,089 --> 00:16:57,319
sorry but in 2015 a researcher John

333
00:16:54,169 --> 00:17:01,279
Rudolph's car released a paper titled

334
00:16:57,319 --> 00:17:05,118
Intel x86 considered harmful and I very

335
00:17:01,279 --> 00:17:06,740
much agree with her we are going to look

336
00:17:05,118 --> 00:17:09,079
into some more details regarding that

337
00:17:06,740 --> 00:17:12,079
but we're also going to look at a black

338
00:17:09,079 --> 00:17:14,779
hat talk from Christopher Domas briefly

339
00:17:12,079 --> 00:17:16,849
named the memory sinkhole which was a

340
00:17:14,779 --> 00:17:21,230
universal privilege escalation exploit

341
00:17:16,849 --> 00:17:23,868
on x86 and another talk from him where

342
00:17:21,230 --> 00:17:28,879
he discovered undocumented instructions

343
00:17:23,868 --> 00:17:31,070
on x86 and also Maxim coriaci and Marc

344
00:17:28,879 --> 00:17:35,000
arm a lot from positive technologies

345
00:17:31,070 --> 00:17:39,049
they are very important people in this

346
00:17:35,000 --> 00:17:41,990
field regarding platform security so

347
00:17:39,049 --> 00:17:43,460
let's look at this paper first intellect

348
00:17:41,990 --> 00:17:47,629
86 considered harmful

349
00:17:43,460 --> 00:17:49,920
so I'm quoting here jarana says this is

350
00:17:47,629 --> 00:17:53,730
another embedded microcontroller on

351
00:17:49,920 --> 00:17:57,090
Intel platforms okay well not too

352
00:17:53,730 --> 00:17:58,560
interesting so far but she says intel on

353
00:17:57,090 --> 00:18:01,409
me is very much similar to the

354
00:17:58,560 --> 00:18:03,179
previously discussed SMM SMM stands for

355
00:18:01,410 --> 00:18:08,520
system management mode and other

356
00:18:03,180 --> 00:18:12,600
operating mode of these CPUs often

357
00:18:08,520 --> 00:18:14,879
referred to as ring -2 so she says like

358
00:18:12,600 --> 00:18:16,889
system management mode it is running all

359
00:18:14,880 --> 00:18:19,440
the time when the platform is running

360
00:18:16,890 --> 00:18:20,880
but unlike system management mode it can

361
00:18:19,440 --> 00:18:23,250
also run when the platform is shutdown

362
00:18:20,880 --> 00:18:26,280
so when I was reading this first I'm

363
00:18:23,250 --> 00:18:28,260
like holy how this is possible

364
00:18:26,280 --> 00:18:30,750
well it turns out some other words have

365
00:18:28,260 --> 00:18:33,150
power states where you know with

366
00:18:30,750 --> 00:18:35,490
seemingly no operation no offense men on

367
00:18:33,150 --> 00:18:39,480
the main CPU this thing can still

368
00:18:35,490 --> 00:18:42,540
operate so it is for all intents and

369
00:18:39,480 --> 00:18:46,170
purposes more privileged than any other

370
00:18:42,540 --> 00:18:48,389
system software and also a similarly to

371
00:18:46,170 --> 00:18:50,120
system management mode is able to read

372
00:18:48,390 --> 00:18:52,560
or write any of the hosts memory

373
00:18:50,120 --> 00:18:55,409
unconstrained by anything unconstrained

374
00:18:52,560 --> 00:18:58,889
by the memory controller hub it has the

375
00:18:55,410 --> 00:19:03,540
serve full access to you critical parts

376
00:18:58,890 --> 00:19:06,720
of the system with no oversight so then

377
00:19:03,540 --> 00:19:08,790
she goes on to say while technically

378
00:19:06,720 --> 00:19:11,160
system management mode can be disabled

379
00:19:08,790 --> 00:19:13,110
by the vendors well it's discouraged by

380
00:19:11,160 --> 00:19:17,340
that but they have the capability to

381
00:19:13,110 --> 00:19:21,179
disable SMM according to you Intel's and

382
00:19:17,340 --> 00:19:23,220
me book management engines are different

383
00:19:21,180 --> 00:19:26,240
in this regard because they're too

384
00:19:23,220 --> 00:19:29,940
interconnected to other components so

385
00:19:26,240 --> 00:19:32,760
supposedly you can disable them and

386
00:19:29,940 --> 00:19:35,730
finally the system management mode code

387
00:19:32,760 --> 00:19:38,280
is more accessible but the software

388
00:19:35,730 --> 00:19:41,640
stack for the management engine which is

389
00:19:38,280 --> 00:19:44,700
stored on the main spi flash chips aka

390
00:19:41,640 --> 00:19:47,300
the BIOS chips is encoded using

391
00:19:44,700 --> 00:19:51,900
something called a Huffman encoding

392
00:19:47,300 --> 00:19:54,740
which makes it decently more hard or

393
00:19:51,900 --> 00:19:58,830
decently harder to you reverse engineer

394
00:19:54,740 --> 00:20:01,170
so it's less accessible and she then

395
00:19:58,830 --> 00:20:03,689
goes on to you bring up other issues

396
00:20:01,170 --> 00:20:07,080
such as what she calls zombification

397
00:20:03,690 --> 00:20:09,419
they're essentially the Emmy has control

398
00:20:07,080 --> 00:20:12,809
over the main CPU and the main operating

399
00:20:09,419 --> 00:20:14,639
system so you can't really protect

400
00:20:12,809 --> 00:20:19,129
against this from userland

401
00:20:14,639 --> 00:20:23,039
or even any normal kernel environments

402
00:20:19,129 --> 00:20:26,189
and this was one of the takeaways that I

403
00:20:23,039 --> 00:20:28,350
liked reading the most she says Intel's

404
00:20:26,190 --> 00:20:30,779
beliefs that its proprietary platform

405
00:20:28,350 --> 00:20:32,850
which is unavailable for literally

406
00:20:30,779 --> 00:20:35,429
everyone else do you review can be made

407
00:20:32,850 --> 00:20:38,820
significantly more secure than open

408
00:20:35,429 --> 00:20:41,909
platforms that anyone can review so she

409
00:20:38,820 --> 00:20:50,580
concludes its unconvincing and also

410
00:20:41,909 --> 00:20:53,279
arrogant true and another final thought

411
00:20:50,580 --> 00:20:56,100
that she brings up is that Intel imme is

412
00:20:53,279 --> 00:20:58,440
the perfect place for your implant if

413
00:20:56,100 --> 00:21:00,600
you want to spy on someone well I'm not

414
00:20:58,440 --> 00:21:04,289
saying it's spying on anyone don't sue

415
00:21:00,600 --> 00:21:07,490
me but if you wanted to spy on someone

416
00:21:04,289 --> 00:21:10,889
this would be the perfect heaven for you

417
00:21:07,490 --> 00:21:13,110
there's no oversight on a me from

418
00:21:10,889 --> 00:21:16,469
userland or colonel and for that matter

419
00:21:13,110 --> 00:21:19,289
and it has this direct access like I

420
00:21:16,470 --> 00:21:22,529
mentioned so having a rootkit and death

421
00:21:19,289 --> 00:21:27,480
environments as like the best thing an

422
00:21:22,529 --> 00:21:29,700
attacker could wish for so let's go on

423
00:21:27,480 --> 00:21:32,970
to review this talk from Christopher

424
00:21:29,700 --> 00:21:36,269
Domas I'm a huge fan of him he's one of

425
00:21:32,970 --> 00:21:39,870
the most interesting presenters in my

426
00:21:36,269 --> 00:21:44,129
opinion so huge shout out to him he's a

427
00:21:39,870 --> 00:21:46,709
great dude so he presented this exploit

428
00:21:44,129 --> 00:21:48,840
which was like I said Universal local

429
00:21:46,710 --> 00:21:52,740
privilege escalation on any x86 based

430
00:21:48,840 --> 00:21:56,009
system it was hidden for a good 20 years

431
00:21:52,740 --> 00:22:00,509
you know average lifespan for a good bug

432
00:21:56,009 --> 00:22:04,049
like this well once again this is a

433
00:22:00,509 --> 00:22:05,879
really complicated topic but TLDR he

434
00:22:04,049 --> 00:22:08,039
moved the well there's a thing called

435
00:22:05,879 --> 00:22:09,809
the epic region which is a region of

436
00:22:08,039 --> 00:22:12,990
memory that you were able to reconfigure

437
00:22:09,809 --> 00:22:15,899
to certain addresses and he moved this

438
00:22:12,990 --> 00:22:17,130
epic region to overlap with the system

439
00:22:15,899 --> 00:22:20,790
management Ram

440
00:22:17,130 --> 00:22:23,520
which is a differently privileged region

441
00:22:20,790 --> 00:22:26,330
of system memory so he made it so that

442
00:22:23,520 --> 00:22:28,620
the APEC region overlapped with SM Ram

443
00:22:26,330 --> 00:22:31,409
which is essentially Singh hold

444
00:22:28,620 --> 00:22:35,419
something called the DSC or descriptor

445
00:22:31,410 --> 00:22:38,160
structure and when the CPU entered

446
00:22:35,420 --> 00:22:41,310
system management had it tried reading

447
00:22:38,160 --> 00:22:44,310
this the SC structure which was sinkhole

448
00:22:41,310 --> 00:22:46,760
by the APEC region and he managed to

449
00:22:44,310 --> 00:22:50,429
gain control over the program counter

450
00:22:46,760 --> 00:22:54,270
using information that was mapped to

451
00:22:50,430 --> 00:22:57,090
address 0 because this DSC structure was

452
00:22:54,270 --> 00:22:59,820
holding a value which was read by the

453
00:22:57,090 --> 00:23:02,429
system management center code intel's

454
00:22:59,820 --> 00:23:05,340
efi template that is so that way he

455
00:23:02,430 --> 00:23:08,100
gains control over the program counter

456
00:23:05,340 --> 00:23:12,659
and was able to escalate to full system

457
00:23:08,100 --> 00:23:17,040
privilege so it's quite trivial that

458
00:23:12,660 --> 00:23:17,670
being in control of SMM allows ludicrous

459
00:23:17,040 --> 00:23:21,080
rootkits

460
00:23:17,670 --> 00:23:24,800
that there's not much you can do about

461
00:23:21,080 --> 00:23:28,679
so here's the here's his following talk

462
00:23:24,800 --> 00:23:33,389
just a tad bit later called breaking the

463
00:23:28,680 --> 00:23:36,450
x86 instruction set so the question that

464
00:23:33,390 --> 00:23:38,790
he was looking to answer is what is the

465
00:23:36,450 --> 00:23:41,550
state of documented instructions in

466
00:23:38,790 --> 00:23:44,550
Intel's manuals versus what's actually

467
00:23:41,550 --> 00:23:46,200
implemented on the platform and he came

468
00:23:44,550 --> 00:23:49,290
up with this great tool called sense

469
00:23:46,200 --> 00:23:51,750
iftar which used what he calls tunneling

470
00:23:49,290 --> 00:23:53,940
methods essentially his idea was that he

471
00:23:51,750 --> 00:23:58,410
allocates two pages of memory with

472
00:23:53,940 --> 00:24:00,990
different privileges and he sets the

473
00:23:58,410 --> 00:24:03,650
instructions so that they are precisely

474
00:24:00,990 --> 00:24:06,900
at the boundary of these two pages and

475
00:24:03,650 --> 00:24:09,570
when the CPU tries fetching the

476
00:24:06,900 --> 00:24:12,810
instruction based on whether privileged

477
00:24:09,570 --> 00:24:16,950
boundaries are violated or not he's able

478
00:24:12,810 --> 00:24:19,980
to tell how the instruction fetching

479
00:24:16,950 --> 00:24:22,830
word and hence how long certain

480
00:24:19,980 --> 00:24:26,010
instructions are and using this method

481
00:24:22,830 --> 00:24:28,260
method of figuring out what the CPU

482
00:24:26,010 --> 00:24:30,690
thinks is a valid instruction he was

483
00:24:28,260 --> 00:24:34,410
able to go through

484
00:24:30,690 --> 00:24:37,850
image the entire relevance data ranges

485
00:24:34,410 --> 00:24:41,520
for x86 instructions and figure out

486
00:24:37,850 --> 00:24:44,100
everything in terms of instructions that

487
00:24:41,520 --> 00:24:46,770
is undocumented on the platform so

488
00:24:44,100 --> 00:24:49,350
quoting him he says I found hidden

489
00:24:46,770 --> 00:24:54,150
instructions in every single x86 chip I

490
00:24:49,350 --> 00:24:56,939
scanned oh good news huh so and here's

491
00:24:54,150 --> 00:24:59,220
another unsettling thought he says a lot

492
00:24:56,940 --> 00:25:02,280
of overlaps between these undocumented

493
00:24:59,220 --> 00:25:07,260
instructions exist between manufacturers

494
00:25:02,280 --> 00:25:09,000
so Intel AMD and why--i shall share this

495
00:25:07,260 --> 00:25:10,830
probe of information between each other

496
00:25:09,000 --> 00:25:13,230
they know what these undocumented

497
00:25:10,830 --> 00:25:18,389
instructions are but they don't care to

498
00:25:13,230 --> 00:25:24,420
tell anyone else so my thoughts once

499
00:25:18,390 --> 00:25:27,990
again doesn't look too good so now we

500
00:25:24,420 --> 00:25:31,110
enter this circle last era of my

501
00:25:27,990 --> 00:25:33,540
research positive technologies is a

502
00:25:31,110 --> 00:25:36,300
Russia based company if you read they're

503
00:25:33,540 --> 00:25:38,940
like short summary this is something

504
00:25:36,300 --> 00:25:41,159
that I read like 10 times a day from

505
00:25:38,940 --> 00:25:43,290
pretty much everyone you know this would

506
00:25:41,160 --> 00:25:45,390
be your average summary of what we do

507
00:25:43,290 --> 00:25:48,379
but here's the thing they actually do it

508
00:25:45,390 --> 00:25:51,570
instead of you know like not doing it so

509
00:25:48,380 --> 00:25:54,480
there's two researchers I must highlight

510
00:25:51,570 --> 00:25:56,730
mark armed Olaf and maxim gorky they are

511
00:25:54,480 --> 00:26:00,420
the key people here who reverse

512
00:25:56,730 --> 00:26:02,660
engineered Intel and me and pretty much

513
00:26:00,420 --> 00:26:06,090
everything that's relevant around that

514
00:26:02,660 --> 00:26:10,290
so let me go through some of what they

515
00:26:06,090 --> 00:26:12,240
found so this is 2017 April on their

516
00:26:10,290 --> 00:26:15,210
blog they released this article the way

517
00:26:12,240 --> 00:26:17,160
of static analysis so they figured out

518
00:26:15,210 --> 00:26:19,650
some of the internal file system for the

519
00:26:17,160 --> 00:26:21,570
Emmy and they also found the thing

520
00:26:19,650 --> 00:26:24,300
called the ROM bypass which is very

521
00:26:21,570 --> 00:26:27,270
important so there's a set of code

522
00:26:24,300 --> 00:26:30,080
running inside and me that is part of

523
00:26:27,270 --> 00:26:32,520
the initial ROM on the hardware and

524
00:26:30,080 --> 00:26:34,649
supposedly oh I'm not a hardware guy but

525
00:26:32,520 --> 00:26:37,290
you know people say it's really hard to

526
00:26:34,650 --> 00:26:40,050
dump that internal rom so there's a

527
00:26:37,290 --> 00:26:42,510
piece of code that you have really no

528
00:26:40,050 --> 00:26:43,549
way of dumping currently that's

529
00:26:42,510 --> 00:26:46,249
referenced by other

530
00:26:43,549 --> 00:26:47,690
code so unless you have that from it's

531
00:26:46,249 --> 00:26:49,549
really hard to figure out what the rest

532
00:26:47,690 --> 00:26:52,460
of the code is doing and they were able

533
00:26:49,549 --> 00:26:56,450
to find an image which contained a ROM

534
00:26:52,460 --> 00:26:59,539
bypass section essentially a version of

535
00:26:56,450 --> 00:27:01,669
this ROM so they could start looking at

536
00:26:59,539 --> 00:27:03,279
what's the rest of the code does but

537
00:27:01,669 --> 00:27:05,809
they are still unable to decrypt

538
00:27:03,279 --> 00:27:08,090
significant chunks of the firmer because

539
00:27:05,809 --> 00:27:11,928
it uses this thing I called Huffman

540
00:27:08,090 --> 00:27:14,480
encoding it's quite technical but you

541
00:27:11,929 --> 00:27:18,440
need so-called Hoffman dictionaries to

542
00:27:14,480 --> 00:27:20,230
be able to decrypt any firmware and it's

543
00:27:18,440 --> 00:27:24,850
not trivial how you would recover

544
00:27:20,230 --> 00:27:28,639
Huffman dictionaries from like thin air

545
00:27:24,850 --> 00:27:32,678
so later in August they release this

546
00:27:28,639 --> 00:27:35,629
other article disabling Intelli me lemon

547
00:27:32,679 --> 00:27:38,269
well it was a massive reverse

548
00:27:35,629 --> 00:27:40,759
engineering effort and there was already

549
00:27:38,269 --> 00:27:44,179
another project I related to positive

550
00:27:40,759 --> 00:27:45,889
security by a guy named Nikola corna and

551
00:27:44,179 --> 00:27:49,309
he released the pine and scripts named

552
00:27:45,889 --> 00:27:52,369
Emmy underscore underscore cleaner which

553
00:27:49,309 --> 00:27:56,570
just deleted a good chunk of Emmy firmer

554
00:27:52,369 --> 00:28:00,918
and it was still able to complete

555
00:27:56,570 --> 00:28:02,899
digital signature checks because the

556
00:28:00,919 --> 00:28:04,970
signature checks are done against

557
00:28:02,899 --> 00:28:06,998
individual Emmy modules and not the

558
00:28:04,970 --> 00:28:09,499
entire firmware so you could strip

559
00:28:06,999 --> 00:28:14,359
significant chunks of the Emmy firmer

560
00:28:09,499 --> 00:28:17,570
without failing the signature checks at

561
00:28:14,359 --> 00:28:19,489
boot and they also worked out the

562
00:28:17,570 --> 00:28:21,590
Huffman decoding so they are already

563
00:28:19,489 --> 00:28:25,609
able to load any firmware into you Ida

564
00:28:21,590 --> 00:28:28,999
and so you know you go about your

565
00:28:25,609 --> 00:28:32,090
average day you spend 16 hours in Ida

566
00:28:28,999 --> 00:28:33,799
you figure things out so they found this

567
00:28:32,090 --> 00:28:39,529
thing called the high assurance platform

568
00:28:33,799 --> 00:28:43,908
bit what is that exactly right

569
00:28:39,529 --> 00:28:48,859
well like yes there's an intel executed

570
00:28:43,909 --> 00:28:50,690
who care to respond so he says it

571
00:28:48,859 --> 00:28:52,009
responds to requests from customers with

572
00:28:50,690 --> 00:28:54,769
specialized requirements

573
00:28:52,009 --> 00:28:57,409
well we explored the modification of you

574
00:28:54,769 --> 00:29:00,200
know like actually not spying on you

575
00:28:57,409 --> 00:29:01,759
well in this case he says the

576
00:29:00,200 --> 00:29:03,649
modifications were made at the request

577
00:29:01,759 --> 00:29:05,840
of an equipment manufacturer working for

578
00:29:03,649 --> 00:29:09,189
the u.s. government and high assurance

579
00:29:05,840 --> 00:29:12,789
platform is like their way of making

580
00:29:09,190 --> 00:29:18,860
what they think is a secure environment

581
00:29:12,789 --> 00:29:21,500
so you know bla bla bla but the takeaway

582
00:29:18,860 --> 00:29:24,918
is that this very subsystem that they

583
00:29:21,500 --> 00:29:27,679
said was not up for the SE Beaumont

584
00:29:24,919 --> 00:29:29,929
you couldn't disable it yourself well

585
00:29:27,679 --> 00:29:36,740
the US government thinks it's a threat

586
00:29:29,929 --> 00:29:39,950
oh thank you Intel very cool so next up

587
00:29:36,740 --> 00:29:43,549
a vulnerability was found in Intel on me

588
00:29:39,950 --> 00:29:45,950
and November this is from Intel's own

589
00:29:43,549 --> 00:29:48,230
advisory they say that using this

590
00:29:45,950 --> 00:29:52,009
vulnerability an attacker was able to

591
00:29:48,230 --> 00:29:56,629
impersonate DME well this is kind of the

592
00:29:52,009 --> 00:30:00,080
point so you could do local security

593
00:29:56,629 --> 00:30:01,158
feature attestation validity anyway the

594
00:30:00,080 --> 00:30:05,210
point is you could load and execute

595
00:30:01,159 --> 00:30:08,240
arbitrary arbitrary code in Emme which

596
00:30:05,210 --> 00:30:11,059
like I said was invisible to the user

597
00:30:08,240 --> 00:30:13,549
and the operating system there's no you

598
00:30:11,059 --> 00:30:15,950
know like a virus defense program or

599
00:30:13,549 --> 00:30:19,009
system monitoring tool or whatever this

600
00:30:15,950 --> 00:30:23,480
kids look at this I mean code that you

601
00:30:19,009 --> 00:30:26,779
load into you I mean so it was a buffer

602
00:30:23,480 --> 00:30:29,269
overflow in any firmware and the vector

603
00:30:26,779 --> 00:30:31,700
you used to exploit this buffer overflow

604
00:30:29,269 --> 00:30:35,600
was a specially crafted file system

605
00:30:31,700 --> 00:30:38,360
state so well the way they put it is

606
00:30:35,600 --> 00:30:40,959
this an attacker with local access could

607
00:30:38,360 --> 00:30:44,449
override the content of the bias chip to

608
00:30:40,960 --> 00:30:48,379
trigger this buffer overflow in any

609
00:30:44,450 --> 00:30:51,080
firmware but the thing is having to have

610
00:30:48,379 --> 00:30:51,709
local access is not really trivial just

611
00:30:51,080 --> 00:30:55,580
like that

612
00:30:51,710 --> 00:30:57,200
you could also overwrite any firmware on

613
00:30:55,580 --> 00:30:59,949
certain platforms because the

614
00:30:57,200 --> 00:31:02,419
manufacturers don't know how to set

615
00:30:59,950 --> 00:31:05,620
manufacturing mode to off which you'll

616
00:31:02,419 --> 00:31:09,529
see Apple is one of the offenders of

617
00:31:05,620 --> 00:31:10,520
doing so let me show you why this was a

618
00:31:09,529 --> 00:31:13,760
big thing

619
00:31:10,520 --> 00:31:16,610
so history Catholic on em Yvonne's very

620
00:31:13,760 --> 00:31:19,310
first one was 2009 at black hats

621
00:31:16,610 --> 00:31:22,850
aleksander trashcan and Rafal white sook

622
00:31:19,310 --> 00:31:25,700
sorry injecting code into special region

623
00:31:22,850 --> 00:31:27,469
of EMA memory allowed them to sort of

624
00:31:25,700 --> 00:31:29,600
run code in em me but here's the thing

625
00:31:27,470 --> 00:31:31,730
the Emmy is just not is not just one

626
00:31:29,600 --> 00:31:34,100
specific software it also has versions

627
00:31:31,730 --> 00:31:37,790
as the platform's progressed DME

628
00:31:34,100 --> 00:31:39,949
firmware also progressed so 2009 semi

629
00:31:37,790 --> 00:31:42,649
was very different than me than what we

630
00:31:39,950 --> 00:31:46,310
have today so this was against a very

631
00:31:42,650 --> 00:31:49,130
old version of Intel on me similarly

632
00:31:46,310 --> 00:31:52,419
another vulnerability targeting an older

633
00:31:49,130 --> 00:31:54,710
ME version so 2007 rolls around and

634
00:31:52,420 --> 00:31:59,080
here's this other vulnerability named

635
00:31:54,710 --> 00:32:02,000
Cylon Bob is silent okay that CV number

636
00:31:59,080 --> 00:32:06,230
which well I'm gonna show you the piece

637
00:32:02,000 --> 00:32:08,300
of code or something close to it so this

638
00:32:06,230 --> 00:32:10,720
was the piece of code checking the

639
00:32:08,300 --> 00:32:14,629
authorization on the active management

640
00:32:10,720 --> 00:32:17,200
technology login interface that the

641
00:32:14,630 --> 00:32:21,260
enemy was hosting under network well

642
00:32:17,200 --> 00:32:23,930
they thought it was a good idea to do a

643
00:32:21,260 --> 00:32:29,210
string compare and use your inputs

644
00:32:23,930 --> 00:32:32,840
length as the input for which length the

645
00:32:29,210 --> 00:32:36,620
compare should be made well this is well

646
00:32:32,840 --> 00:32:40,490
silly decide the least so giving an

647
00:32:36,620 --> 00:32:44,510
empty password there passes the password

648
00:32:40,490 --> 00:32:46,340
check so you can see that we had

649
00:32:44,510 --> 00:32:48,470
significant vulnerabilities but they're

650
00:32:46,340 --> 00:32:51,199
all targeting older versions of Intel on

651
00:32:48,470 --> 00:32:54,170
me and we had a modern vulnerability

652
00:32:51,200 --> 00:32:57,380
which was more of a logic bug but we did

653
00:32:54,170 --> 00:33:00,830
not have proper code execution in em me

654
00:32:57,380 --> 00:33:08,240
on these newer versions but now positive

655
00:33:00,830 --> 00:33:10,070
technologies had one later death here

656
00:33:08,240 --> 00:33:13,430
they also recovered all the huffman

657
00:33:10,070 --> 00:33:15,379
tables the dictionaries I mean most of

658
00:33:13,430 --> 00:33:17,150
the dictionaries and they publish the

659
00:33:15,380 --> 00:33:20,720
methods on how you could recover those

660
00:33:17,150 --> 00:33:22,820
Hoffman dictionaries so once again they

661
00:33:20,720 --> 00:33:24,340
went above and beyond to put in high

662
00:33:22,820 --> 00:33:27,129
effort to reverse

663
00:33:24,340 --> 00:33:30,340
all of this and their efforts were

664
00:33:27,130 --> 00:33:34,679
fruitful see previously mentioned

665
00:33:30,340 --> 00:33:37,500
vulnerabilities also later in 2018 June

666
00:33:34,679 --> 00:33:40,770
they discovered that Apple leaves

667
00:33:37,500 --> 00:33:43,210
manufacturing mode on for ME

668
00:33:40,770 --> 00:33:46,960
manufacturing mode is a special mode of

669
00:33:43,210 --> 00:33:50,559
operation where you can just send well

670
00:33:46,960 --> 00:33:53,590
essentially SPI commands to overwrite

671
00:33:50,559 --> 00:33:57,629
the ME region so you could flush older

672
00:33:53,590 --> 00:34:00,220
versions of em E or you could flash a

673
00:33:57,630 --> 00:34:02,470
specially crafted file system to trigger

674
00:34:00,220 --> 00:34:05,409
the previously mentioned code execution

675
00:34:02,470 --> 00:34:06,760
vulnerability and this is quite

676
00:34:05,409 --> 00:34:09,730
inconvenient because these

677
00:34:06,760 --> 00:34:12,659
vulnerabilities are not patchable even

678
00:34:09,730 --> 00:34:15,339
if Intel makes a modification to ume

679
00:34:12,659 --> 00:34:21,490
these other versions especially the ones

680
00:34:15,339 --> 00:34:23,469
in manufacturing mode can get downgraded

681
00:34:21,489 --> 00:34:24,009
to these older vulnerable versions of

682
00:34:23,469 --> 00:34:27,939
Emme

683
00:34:24,010 --> 00:34:34,030
so any patches made could potentially be

684
00:34:27,940 --> 00:34:37,780
reversed on some platforms so well they

685
00:34:34,030 --> 00:34:40,240
made their patches but essentially they

686
00:34:37,780 --> 00:34:42,429
did not solve the root of the problem

687
00:34:40,239 --> 00:34:44,560
with right access to the ME region you

688
00:34:42,429 --> 00:34:46,270
could overwrite the existing mi firmware

689
00:34:44,560 --> 00:34:54,099
with older versions and exploit anything

690
00:34:46,270 --> 00:34:57,009
like before and also in July there's

691
00:34:54,099 --> 00:35:00,820
another CV and an Intel advisory

692
00:34:57,010 --> 00:35:04,150
accordingly with significantly less

693
00:35:00,820 --> 00:35:06,670
information so I can't really precisely

694
00:35:04,150 --> 00:35:10,119
tell you what's run down here but

695
00:35:06,670 --> 00:35:12,160
according to their advisory using this

696
00:35:10,119 --> 00:35:16,780
vulnerability an attacker could execute

697
00:35:12,160 --> 00:35:21,848
code fully remotely so make up that what

698
00:35:16,780 --> 00:35:24,070
you will but Intel comes on to say well

699
00:35:21,849 --> 00:35:30,550
it's only exploitable from the same

700
00:35:24,070 --> 00:35:32,589
subnet thank you very cool so one of the

701
00:35:30,550 --> 00:35:35,200
interesting aspects is what mr.

702
00:35:32,589 --> 00:35:37,970
Tenenbaum may think you may remember him

703
00:35:35,200 --> 00:35:42,149
from the microkernel debate

704
00:35:37,970 --> 00:35:44,549
well this is from his personal homepage

705
00:35:42,150 --> 00:35:48,990
he says if I had suspected they might be

706
00:35:44,550 --> 00:35:51,240
building you know whatever they he

707
00:35:48,990 --> 00:35:54,839
certainly would not have cooperated with

708
00:35:51,240 --> 00:35:57,560
them and then he goes on to make the

709
00:35:54,840 --> 00:35:59,910
statement that George Orwell's 1984 is

710
00:35:57,560 --> 00:36:02,610
not really a world we want to live in

711
00:35:59,910 --> 00:36:07,910
and I quite frankly agree with him on

712
00:36:02,610 --> 00:36:10,740
this part so it certainly has its flaws

713
00:36:07,910 --> 00:36:12,149
what can you do about this really well

714
00:36:10,740 --> 00:36:15,979
let me tell you about my new favorite

715
00:36:12,150 --> 00:36:18,840
pastime activity it is three easy steps

716
00:36:15,980 --> 00:36:23,750
first step zero you buy a motherboard

717
00:36:18,840 --> 00:36:26,190
with an Intel chipset you unbox it and

718
00:36:23,750 --> 00:36:29,070
you hook it up to an external SPI flash

719
00:36:26,190 --> 00:36:31,560
programmer to dump the BIOS from using a

720
00:36:29,070 --> 00:36:35,220
cleaner to enable the habit and strip

721
00:36:31,560 --> 00:36:37,710
all the ME modules that you can and then

722
00:36:35,220 --> 00:36:45,899
flash back the BIOS image to you make

723
00:36:37,710 --> 00:36:50,760
this subsystem in operational it's it's

724
00:36:45,900 --> 00:36:53,130
really fun I can promise you so if

725
00:36:50,760 --> 00:36:55,710
you're not one of those people who wants

726
00:36:53,130 --> 00:36:59,090
to buy an external SPI v programmer to

727
00:36:55,710 --> 00:37:02,250
disable this what is there you could do

728
00:36:59,090 --> 00:37:04,950
well I can't really tell you about

729
00:37:02,250 --> 00:37:07,470
specific vendors because this isn't a

730
00:37:04,950 --> 00:37:10,560
sales pitch but you can easily Google

731
00:37:07,470 --> 00:37:11,990
Google yourself or ask me later and I

732
00:37:10,560 --> 00:37:17,160
can tell you about some of the vendors

733
00:37:11,990 --> 00:37:21,180
that offer devices with a me disabled by

734
00:37:17,160 --> 00:37:24,210
default but in the long term I think we

735
00:37:21,180 --> 00:37:26,370
really want to get rid of x86 these two

736
00:37:24,210 --> 00:37:29,430
vendors are not serving any of our

737
00:37:26,370 --> 00:37:32,819
interests and it's not looking like they

738
00:37:29,430 --> 00:37:37,109
care to serve our interests truly well

739
00:37:32,820 --> 00:37:38,730
as it looks today so what else is there

740
00:37:37,110 --> 00:37:41,940
that we could do there's a ton of

741
00:37:38,730 --> 00:37:43,890
alternative architectures to x86 but

742
00:37:41,940 --> 00:37:46,860
they're not that relevant because end

743
00:37:43,890 --> 00:37:49,980
users care about performance probably

744
00:37:46,860 --> 00:37:51,050
more than anything so any architecture

745
00:37:49,980 --> 00:37:54,070
you have

746
00:37:51,050 --> 00:37:57,710
that doesn't provide the same speed as

747
00:37:54,070 --> 00:38:01,190
not really going to be relevant but iBM

748
00:37:57,710 --> 00:38:03,530
has open power in this space an

749
00:38:01,190 --> 00:38:06,440
alternative CPU architecture that is

750
00:38:03,530 --> 00:38:09,260
actually competitive speed wise to x86

751
00:38:06,440 --> 00:38:12,320
and there's another really cool company

752
00:38:09,260 --> 00:38:15,050
Raptor engineering who took their

753
00:38:12,320 --> 00:38:18,140
designs and released serve products

754
00:38:15,050 --> 00:38:22,730
based on the power line of CPUs namely

755
00:38:18,140 --> 00:38:26,060
it does free the later of which is quite

756
00:38:22,730 --> 00:38:28,820
competitive pricing wise so it's not as

757
00:38:26,060 --> 00:38:31,790
pricy as like their first models it's

758
00:38:28,820 --> 00:38:33,310
still not competitive to x86 in pricing

759
00:38:31,790 --> 00:38:36,350
but it's not that far off

760
00:38:33,310 --> 00:38:38,960
so I dare to talk about this because

761
00:38:36,350 --> 00:38:41,240
these are not practical once again not a

762
00:38:38,960 --> 00:38:43,460
sales pitch it's not practical for you

763
00:38:41,240 --> 00:38:46,270
today to buy any of these but they are

764
00:38:43,460 --> 00:38:49,430
the future in the sense that with these

765
00:38:46,270 --> 00:38:52,240
products and these CPUs you may get to

766
00:38:49,430 --> 00:38:55,399
have your freedom back at some point

767
00:38:52,240 --> 00:38:58,040
well thank you so much for listening if

768
00:38:55,400 --> 00:39:03,190
you have any questions feel free to ask

769
00:38:58,040 --> 00:39:07,040
me I think I'm over my time Oh

770
00:39:03,190 --> 00:39:09,200
precisely as foreign minister right if

771
00:39:07,040 --> 00:39:12,040
we still have time feel free to ask me

772
00:39:09,200 --> 00:39:12,040
if you want to

773
00:39:13,800 --> 00:39:16,999
[Applause]

