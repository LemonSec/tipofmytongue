1
00:00:02,590 --> 00:00:10,269
thank you yeah hello everyone can you

2
00:00:08,610 --> 00:00:13,178
can you hear me well

3
00:00:10,269 --> 00:00:16,299
yeah cool okay so I'm very pleased to be

4
00:00:13,179 --> 00:00:18,039
here today to talk about abusing Google

5
00:00:16,299 --> 00:00:21,160
Play billing for fun and unlimited

6
00:00:18,039 --> 00:00:23,950
credits I know I am as the only obstacle

7
00:00:21,160 --> 00:00:27,759
to lunch so I try not to be too long

8
00:00:23,950 --> 00:00:30,280
about this talk and offer of course as

9
00:00:27,760 --> 00:00:34,290
you noticed I'm French so sorry about my

10
00:00:30,280 --> 00:00:34,290
accent I'll try to do my best

11
00:00:35,999 --> 00:00:40,749
just a quick presentation about me so

12
00:00:38,920 --> 00:00:43,989
I'm a senior penetration tester at

13
00:00:40,749 --> 00:00:46,570
foundry SEC which is a small consulting

14
00:00:43,989 --> 00:00:48,489
company in France I have more than 10

15
00:00:46,570 --> 00:00:50,640
years of experience in different fields

16
00:00:48,489 --> 00:00:54,099
such as Active Directory Windows Linux

17
00:00:50,640 --> 00:00:56,979
mostly web application Wi-Fi and of

18
00:00:54,100 --> 00:00:59,440
course on Reed which is the aim of this

19
00:00:56,979 --> 00:01:02,019
talk I'm also a member of the check

20
00:00:59,440 --> 00:01:04,330
marks application security resource team

21
00:01:02,019 --> 00:01:05,649
which is the team in fact performing

22
00:01:04,330 --> 00:01:08,798
some research from some different

23
00:01:05,650 --> 00:01:12,210
aspects such as IOT Android is in this

24
00:01:08,799 --> 00:01:15,820
case for instance and other interesting

25
00:01:12,210 --> 00:01:18,280
interesting fields so they supported

26
00:01:15,820 --> 00:01:24,280
also DS DS torque that's why I'm

27
00:01:18,280 --> 00:01:27,369
mansions engine I must play as CTF

28
00:01:24,280 --> 00:01:31,469
player I mean I participated in some

29
00:01:27,369 --> 00:01:35,469
events like insomniac mid rack and

30
00:01:31,469 --> 00:01:37,270
beside this one just to give a few I'm

31
00:01:35,469 --> 00:01:42,759
also giving you n to the tip black team

32
00:01:37,270 --> 00:01:46,840
which is a French CTF team ok so let's

33
00:01:42,759 --> 00:01:49,210
start to the talk so I'm going to

34
00:01:46,840 --> 00:01:52,030
quickly present you what is Google Play

35
00:01:49,210 --> 00:01:54,939
billing then I'm going to talk about

36
00:01:52,030 --> 00:01:58,149
some known vulnerabilities on this this

37
00:01:54,939 --> 00:02:01,210
IP I I'm going to show you some examples

38
00:01:58,149 --> 00:02:04,390
about vulnerable applications and then

39
00:02:01,210 --> 00:02:06,798
I'm going to sum up the conclusion about

40
00:02:04,390 --> 00:02:08,929
this dis resource

41
00:02:06,799 --> 00:02:12,800
just a quick mention in fact this talk

42
00:02:08,929 --> 00:02:17,599
was inspired by another guy called

43
00:02:12,800 --> 00:02:20,599
Jeremy Matt of perform not see me now

44
00:02:17,599 --> 00:02:23,929
but also on the google play but he found

45
00:02:20,599 --> 00:02:27,619
a different technique to bypass payments

46
00:02:23,930 --> 00:02:32,269
in fact some some developers used out

47
00:02:27,620 --> 00:02:34,700
queried we can say keywords to bypass

48
00:02:32,269 --> 00:02:37,760
the payment but in this case we'll see

49
00:02:34,700 --> 00:02:40,488
that it's a different way to to be able

50
00:02:37,760 --> 00:02:47,480
to bypass game became I mean payments

51
00:02:40,489 --> 00:02:49,250
and Android applications so just a quick

52
00:02:47,480 --> 00:02:51,709
recap about the Google Play billing

53
00:02:49,250 --> 00:02:54,799
so it's an android framework that allows

54
00:02:51,709 --> 00:02:57,290
you to monetize application so the

55
00:02:54,799 --> 00:03:00,290
purpose of course it to allows in-app

56
00:02:57,290 --> 00:03:02,720
purchase and you can also have some kind

57
00:03:00,290 --> 00:03:05,989
of subscriptions issue on regular

58
00:03:02,720 --> 00:03:08,359
payments for instance every week every

59
00:03:05,989 --> 00:03:09,890
month depending on your business model

60
00:03:08,360 --> 00:03:11,900
you want to implement on your

61
00:03:09,890 --> 00:03:14,569
application

62
00:03:11,900 --> 00:03:17,209
so with in-app purchase for sure you

63
00:03:14,569 --> 00:03:19,220
want to sell premium features of an

64
00:03:17,209 --> 00:03:21,799
application sometimes you have a free

65
00:03:19,220 --> 00:03:23,989
application and if you want more feature

66
00:03:21,799 --> 00:03:27,680
you need to pay for the pro version or

67
00:03:23,989 --> 00:03:30,500
Enterprise or whatever or like games

68
00:03:27,680 --> 00:03:33,470
because in fact I'm going to focus more

69
00:03:30,500 --> 00:03:35,720
on android games you can buy extra

70
00:03:33,470 --> 00:03:38,239
content for instance I don't know if

71
00:03:35,720 --> 00:03:40,970
some people play fortnight or whatever

72
00:03:38,239 --> 00:03:44,410
other games but you can buy costumes you

73
00:03:40,970 --> 00:03:48,829
can buy weapons you can buy whatever and

74
00:03:44,410 --> 00:03:54,139
so it allows you to give more more fun

75
00:03:48,829 --> 00:03:56,180
we can say Oh under game so the

76
00:03:54,139 --> 00:03:58,099
principal advantage of the Google Play

77
00:03:56,180 --> 00:04:01,280
billing is that the payment is

78
00:03:58,099 --> 00:04:02,780
completely undone by Google so for the

79
00:04:01,280 --> 00:04:04,340
developer if you are developing an

80
00:04:02,780 --> 00:04:07,010
Android application if you want to

81
00:04:04,340 --> 00:04:09,560
implement Google Play billing you don't

82
00:04:07,010 --> 00:04:14,209
need to have to - under the credit card

83
00:04:09,560 --> 00:04:17,899
of the user or the customer and you just

84
00:04:14,209 --> 00:04:20,320
need to implement the API and you can

85
00:04:17,899 --> 00:04:23,799
let under Google handle or

86
00:04:20,320 --> 00:04:26,440
the payment process the only thing is

87
00:04:23,800 --> 00:04:29,830
you need to define the products you want

88
00:04:26,440 --> 00:04:32,950
to sell on the Google Play console so

89
00:04:29,830 --> 00:04:35,710
you need to say what which kind of

90
00:04:32,950 --> 00:04:39,390
content you want to sell the price for

91
00:04:35,710 --> 00:04:42,580
sure and in that role that's pretty old

92
00:04:39,390 --> 00:04:44,860
so tragic the tracking is made also by

93
00:04:42,580 --> 00:04:46,630
Google it means if for instance you want

94
00:04:44,860 --> 00:04:49,360
to auto reimbursement

95
00:04:46,630 --> 00:04:51,190
I mean someone pay something and finally

96
00:04:49,360 --> 00:04:53,770
it doesn't want anymore

97
00:04:51,190 --> 00:04:59,170
you can reimburse and this tracking is

98
00:04:53,770 --> 00:05:02,890
made also by Google just a simplified

99
00:04:59,170 --> 00:05:05,050
overview of the zip labeling so it's

100
00:05:02,890 --> 00:05:10,539
really simple so you have here's a user

101
00:05:05,050 --> 00:05:14,170
ok so it starts with by starting with

102
00:05:10,540 --> 00:05:17,440
projets inside your packages up ok

103
00:05:14,170 --> 00:05:21,220
then in fact the app is going to send

104
00:05:17,440 --> 00:05:23,219
some requests at the Google Play so in

105
00:05:21,220 --> 00:05:27,370
fact the Google Play application is

106
00:05:23,220 --> 00:05:29,340
working as a proxy to the Google Play I

107
00:05:27,370 --> 00:05:32,860
mean to the Google back-end you can say

108
00:05:29,340 --> 00:05:35,739
so this Google Play yeah I mean we can

109
00:05:32,860 --> 00:05:38,950
you can split it in two in fact you have

110
00:05:35,740 --> 00:05:41,050
the Google Play application so we will

111
00:05:38,950 --> 00:05:44,140
play store in fact application on your

112
00:05:41,050 --> 00:05:46,750
device and then you have the Google

113
00:05:44,140 --> 00:05:50,380
infrastructure the Google back-end to

114
00:05:46,750 --> 00:05:53,280
perform the easy payment so in fact the

115
00:05:50,380 --> 00:05:57,490
app send the request for the payment

116
00:05:53,280 --> 00:06:00,340
then the Google Play Store pops kind of

117
00:05:57,490 --> 00:06:03,610
a window any frame to the user to

118
00:06:00,340 --> 00:06:06,479
perform the payment so Google is going

119
00:06:03,610 --> 00:06:09,940
to ask you your credit card or a card or

120
00:06:06,480 --> 00:06:12,160
whatever to I guess you can pay also by

121
00:06:09,940 --> 00:06:13,690
paypal for instance so you are going to

122
00:06:12,160 --> 00:06:16,660
make the paper with a payment directly

123
00:06:13,690 --> 00:06:22,200
to Google after that when Google

124
00:06:16,660 --> 00:06:24,910
confirms that you do paid the product

125
00:06:22,200 --> 00:06:27,789
approach as a result is sent to the

126
00:06:24,910 --> 00:06:32,169
application and then the app need to

127
00:06:27,790 --> 00:06:34,150
verify that this this response is good

128
00:06:32,169 --> 00:06:41,890
to give the content

129
00:06:34,150 --> 00:06:44,710
to the user okay so just a quick

130
00:06:41,890 --> 00:06:47,260
overview is a mock application which is

131
00:06:44,710 --> 00:06:49,299
provided by Google so you can see you

132
00:06:47,260 --> 00:06:52,800
have the button by then you have the

133
00:06:49,300 --> 00:06:57,040
window so this is a Google Play Store

134
00:06:52,800 --> 00:06:59,500
asking you to buy to pay as the content

135
00:06:57,040 --> 00:07:02,170
and then when the payment is successful

136
00:06:59,500 --> 00:07:06,280
in fact you go back to the application

137
00:07:02,170 --> 00:07:12,490
and the application had to verify the

138
00:07:06,280 --> 00:07:14,950
response provided by Google so let's

139
00:07:12,490 --> 00:07:18,130
have a deeper look on the G response so

140
00:07:14,950 --> 00:07:20,800
in fact to simplify a JSON object is

141
00:07:18,130 --> 00:07:23,560
returned to to the application so I did

142
00:07:20,800 --> 00:07:26,560
not mention all the all the fields just

143
00:07:23,560 --> 00:07:29,080
the most important ones and in fact you

144
00:07:26,560 --> 00:07:31,180
have the process state saying okay you

145
00:07:29,080 --> 00:07:35,169
have only two possible values purchased

146
00:07:31,180 --> 00:07:37,210
or consent so purchase the process was

147
00:07:35,170 --> 00:07:39,810
successful concerned it could be

148
00:07:37,210 --> 00:07:44,200
cancelled or zero the payment was not

149
00:07:39,810 --> 00:07:46,630
fulfilled at a tilt incision you have a

150
00:07:44,200 --> 00:07:50,140
purchase token adjust the string to

151
00:07:46,630 --> 00:07:52,719
track in fact the transaction and you

152
00:07:50,140 --> 00:07:55,210
have a signature so this string in fact

153
00:07:52,720 --> 00:07:57,970
is a signature of the the process in

154
00:07:55,210 --> 00:08:05,820
fact of the old JSON object returned by

155
00:07:57,970 --> 00:08:07,980
Google okay so oh this is

156
00:08:05,820 --> 00:08:10,020
in fact when you define your products on

157
00:08:07,980 --> 00:08:12,810
use the Google Play console you need to

158
00:08:10,020 --> 00:08:17,010
generate an RSA key pair for each

159
00:08:12,810 --> 00:08:20,640
application you want to sell product so

160
00:08:17,010 --> 00:08:22,500
the private key is a key kept by Google

161
00:08:20,640 --> 00:08:24,300
so it's sign with a private key you

162
00:08:22,500 --> 00:08:27,290
define on the Google Play console and

163
00:08:24,300 --> 00:08:33,150
then you verify the signature with your

164
00:08:27,290 --> 00:08:35,700
your public key ok so let's have a look

165
00:08:33,150 --> 00:08:38,939
at the trivial drive simple application

166
00:08:35,700 --> 00:08:41,040
provided by Google so here you have the

167
00:08:38,940 --> 00:08:43,680
process of the verification of the

168
00:08:41,039 --> 00:08:46,050
process so I'm sorry it's a little bit

169
00:08:43,679 --> 00:08:48,479
small but you have a method called

170
00:08:46,050 --> 00:08:53,089
verify process and you have different

171
00:08:48,480 --> 00:08:57,900
steps to verify the signature of of the

172
00:08:53,090 --> 00:08:59,820
of the signature oh yes sorry so first

173
00:08:57,900 --> 00:09:03,360
they are looking if the signature is

174
00:08:59,820 --> 00:09:06,600
empty and so on and then they generate

175
00:09:03,360 --> 00:09:09,660
the public key of the application and

176
00:09:06,600 --> 00:09:12,180
then the reason is of method code with

177
00:09:09,660 --> 00:09:15,689
your key I mean the key of the

178
00:09:12,180 --> 00:09:19,579
application the sign data and the

179
00:09:15,690 --> 00:09:22,820
signature provided by by Google and

180
00:09:19,580 --> 00:09:27,750
normally if you look at the comments

181
00:09:22,820 --> 00:09:29,820
here I'm going to Google say for a

182
00:09:27,750 --> 00:09:31,530
secure implementation all of this code

183
00:09:29,820 --> 00:09:33,210
should be implemented on a server that

184
00:09:31,530 --> 00:09:40,130
communicate with the application and the

185
00:09:33,210 --> 00:09:43,620
device so nominee you would say what

186
00:09:40,130 --> 00:09:47,250
because in this example the signature

187
00:09:43,620 --> 00:09:50,040
make validation is performed on the

188
00:09:47,250 --> 00:09:52,410
application inside the application if

189
00:09:50,040 --> 00:09:55,140
you look at the Google documentation

190
00:09:52,410 --> 00:09:57,569
they say it's highly recommended to

191
00:09:55,140 --> 00:10:01,530
verify process details using a secure

192
00:09:57,570 --> 00:10:04,770
back-end but however if it's not

193
00:10:01,530 --> 00:10:08,490
possible you can validate the signature

194
00:10:04,770 --> 00:10:11,250
locally but I warn you this form of

195
00:10:08,490 --> 00:10:13,560
verification isn't truly secure because

196
00:10:11,250 --> 00:10:15,960
it requires you to bundle the process

197
00:10:13,560 --> 00:10:18,349
verification process inside your

198
00:10:15,960 --> 00:10:18,350
application

199
00:10:19,030 --> 00:10:28,060
so that's all for the zoo Google Play

200
00:10:23,320 --> 00:10:30,880
winning presentation let's let's start I

201
00:10:28,060 --> 00:10:36,579
mean I'm not the first one to found this

202
00:10:30,880 --> 00:10:38,380
and in fact in 2013 a guy called

203
00:10:36,580 --> 00:10:40,720
Dominique Roman already found two

204
00:10:38,380 --> 00:10:44,320
vulnerabilities allowing to bypass the

205
00:10:40,720 --> 00:10:48,210
payment process so he was rewarded sorry

206
00:10:44,320 --> 00:10:53,200
on the other Fame of Google and to show

207
00:10:48,210 --> 00:10:57,730
the severity he develop a proof of

208
00:10:53,200 --> 00:10:59,830
concept called billing ACK so this at

209
00:10:57,730 --> 00:11:01,270
this time when he launched the book it

210
00:10:59,830 --> 00:11:02,680
was pretty simple to use it you just

211
00:11:01,270 --> 00:11:05,620
need to launch the billing ACK

212
00:11:02,680 --> 00:11:08,170
application on background and every

213
00:11:05,620 --> 00:11:13,960
application every Android application

214
00:11:08,170 --> 00:11:17,380
using in-app payment will be will be

215
00:11:13,960 --> 00:11:20,290
exploited so let's have a look at what

216
00:11:17,380 --> 00:11:24,460
you found that at this time so the first

217
00:11:20,290 --> 00:11:26,110
thing I found is it's it's easily to

218
00:11:24,460 --> 00:11:28,720
impersonate in fact the Google Play bit

219
00:11:26,110 --> 00:11:31,210
in service because as I said before in

220
00:11:28,720 --> 00:11:34,360
fact the application is talking with

221
00:11:31,210 --> 00:11:38,230
Google Play Store and in fact you can

222
00:11:34,360 --> 00:11:40,200
define an intent with I priority to

223
00:11:38,230 --> 00:11:44,290
respond before the Google Play Store

224
00:11:40,200 --> 00:11:47,170
during the payment process that the

225
00:11:44,290 --> 00:11:49,540
forcing so in fact if you implement that

226
00:11:47,170 --> 00:11:51,310
on your malicious application like the

227
00:11:49,540 --> 00:11:55,930
bidding act in fact you can answer

228
00:11:51,310 --> 00:12:00,459
before the Play Store the second issue I

229
00:11:55,930 --> 00:12:03,609
found is at the time the verification

230
00:12:00,460 --> 00:12:07,840
the verify process metal provided by

231
00:12:03,610 --> 00:12:13,750
Google as a small flow in fact if you if

232
00:12:07,840 --> 00:12:17,440
you give an empty signature in fact the

233
00:12:13,750 --> 00:12:20,860
method return true because yeah the

234
00:12:17,440 --> 00:12:23,470
first check is if it's not empty perform

235
00:12:20,860 --> 00:12:25,000
the validation process so if the

236
00:12:23,470 --> 00:12:29,980
signature is empty you will never go

237
00:12:25,000 --> 00:12:31,530
there and you you go directly to the end

238
00:12:29,980 --> 00:12:34,410
and return true

239
00:12:31,530 --> 00:12:38,910
and so the building AK application proof

240
00:12:34,410 --> 00:12:41,430
of concept use these two kind these two

241
00:12:38,910 --> 00:12:45,569
vulnerabilities to bypass payment at

242
00:12:41,430 --> 00:12:47,880
this time so for sure now this run

243
00:12:45,570 --> 00:12:49,440
averages were fixed by Google so let's

244
00:12:47,880 --> 00:12:53,460
have a look at the modification well

245
00:12:49,440 --> 00:12:55,770
made the first thing is now if you want

246
00:12:53,460 --> 00:12:58,980
to deploy an application on the Google

247
00:12:55,770 --> 00:13:02,250
Play Store using Google Play billing you

248
00:12:58,980 --> 00:13:06,000
have to define correctly which is a

249
00:13:02,250 --> 00:13:09,120
targeted package for the positive

250
00:13:06,000 --> 00:13:11,820
payment so you you can see on this

251
00:13:09,120 --> 00:13:13,980
example you need to set packet to come

252
00:13:11,820 --> 00:13:16,830
that and rake that vending which is a

253
00:13:13,980 --> 00:13:18,840
package name of the Play Store okay so

254
00:13:16,830 --> 00:13:21,750
if you don't put that and you use Google

255
00:13:18,840 --> 00:13:24,060
Play billing Google doesn't let you

256
00:13:21,750 --> 00:13:28,290
publish your application and the Play

257
00:13:24,060 --> 00:13:29,579
Store flat the first thing second second

258
00:13:28,290 --> 00:13:31,949
fix pretty easy

259
00:13:29,580 --> 00:13:37,250
they just modify the verify process

260
00:13:31,950 --> 00:13:42,540
method to return false by default if the

261
00:13:37,250 --> 00:13:46,830
signature was not was not correct so now

262
00:13:42,540 --> 00:13:50,370
just let's think about that and just one

263
00:13:46,830 --> 00:13:55,440
question can we remove a client-side

264
00:13:50,370 --> 00:13:56,940
issue using a client Scientifics now so

265
00:13:55,440 --> 00:13:59,850
the answer is no if you are still

266
00:13:56,940 --> 00:14:02,910
wondering in fact if you want to bypass

267
00:13:59,850 --> 00:14:05,790
the verification process I mean if the

268
00:14:02,910 --> 00:14:08,730
application is still performing the very

269
00:14:05,790 --> 00:14:10,949
day payment process locally you can

270
00:14:08,730 --> 00:14:11,550
still bypass that in fact it's pretty

271
00:14:10,950 --> 00:14:14,570
simple

272
00:14:11,550 --> 00:14:17,640
you just need to modify the application

273
00:14:14,570 --> 00:14:20,160
you modify the abiding of the intent to

274
00:14:17,640 --> 00:14:23,069
put the package name of your application

275
00:14:20,160 --> 00:14:26,339
of your malicious application and then

276
00:14:23,070 --> 00:14:28,790
you just need to find on the the app of

277
00:14:26,340 --> 00:14:31,980
the signature verification is made and

278
00:14:28,790 --> 00:14:34,260
you can just modify the function to

279
00:14:31,980 --> 00:14:36,690
return always true whatever the

280
00:14:34,260 --> 00:14:40,350
signature is is returned by by your

281
00:14:36,690 --> 00:14:43,020
application so in fact the main problem

282
00:14:40,350 --> 00:14:45,389
in code is to find out the app is

283
00:14:43,020 --> 00:14:50,100
performing the signature verification

284
00:14:45,389 --> 00:14:53,850
we see that with the examples after so

285
00:14:50,100 --> 00:14:55,379
just to sum up the key steps you just

286
00:14:53,850 --> 00:14:58,410
have to install beginning AK on your

287
00:14:55,379 --> 00:15:00,569
device you decompile the application you

288
00:14:58,410 --> 00:15:03,179
want to bypass the payment find some

289
00:15:00,569 --> 00:15:05,610
Swiss applicator you modify the smelly

290
00:15:03,179 --> 00:15:09,480
code to replace the package and put your

291
00:15:05,610 --> 00:15:11,369
package name you modify the logic of the

292
00:15:09,480 --> 00:15:14,970
signature of animation to return always

293
00:15:11,369 --> 00:15:17,339
true whatever the signature is you recom

294
00:15:14,970 --> 00:15:18,389
Paes the app you sign the app you

295
00:15:17,339 --> 00:15:21,540
install it on your device

296
00:15:18,389 --> 00:15:29,189
and you just have to profit to bypass

297
00:15:21,540 --> 00:15:33,360
payments that's all so let's have a look

298
00:15:29,189 --> 00:15:35,519
at some some examples the first one

299
00:15:33,360 --> 00:15:38,339
pretty easy do that jump I don't know if

300
00:15:35,519 --> 00:15:42,959
you remember this game it was one of

301
00:15:38,339 --> 00:15:44,519
best games in 2015 in fact in this game

302
00:15:42,959 --> 00:15:47,069
you have a little shop you can buy

303
00:15:44,519 --> 00:15:51,329
different in terms in fact just mainly

304
00:15:47,069 --> 00:15:54,089
mainly costumes but to buy items you

305
00:15:51,329 --> 00:15:58,349
need to have candies and to work in

306
00:15:54,089 --> 00:16:00,629
these you need to use real money and so

307
00:15:58,350 --> 00:16:04,739
if you look at the code of the doodle

308
00:16:00,629 --> 00:16:06,569
jump you see as I said before you have

309
00:16:04,739 --> 00:16:10,860
an intense scent package to the Play

310
00:16:06,569 --> 00:16:13,649
Store okay so to modify that on the

311
00:16:10,860 --> 00:16:15,749
smelly code is pretty easy so just to

312
00:16:13,649 --> 00:16:18,720
give you an example but I can show you

313
00:16:15,749 --> 00:16:21,600
our after and if you look at the

314
00:16:18,720 --> 00:16:23,999
variation verify process method so it's

315
00:16:21,600 --> 00:16:26,279
made locally in this case and it's

316
00:16:23,999 --> 00:16:29,549
pretty copy paste of the Google

317
00:16:26,279 --> 00:16:32,009
documentation so in fact you just need

318
00:16:29,549 --> 00:16:36,809
to modify this function and to return

319
00:16:32,009 --> 00:16:39,480
true whatever so in example on on this

320
00:16:36,809 --> 00:16:42,569
many code you so this is the same

321
00:16:39,480 --> 00:16:45,290
function but on smelly bytecode and at

322
00:16:42,569 --> 00:16:48,449
the end you always end under go to and

323
00:16:45,290 --> 00:16:52,459
you have a return and in white it is

324
00:16:48,449 --> 00:16:55,429
what I added just I modified the vco

325
00:16:52,459 --> 00:16:59,719
variable to be always true which means

326
00:16:55,429 --> 00:16:59,720
one and bytecode

327
00:17:00,550 --> 00:17:14,959
so the more time just to to let you know

328
00:17:04,280 --> 00:17:18,050
I'm not cheating so just to show you use

329
00:17:14,959 --> 00:17:22,309
a card so on output I have this many

330
00:17:18,050 --> 00:17:40,040
code of the drug jump ok you can confirm

331
00:17:22,309 --> 00:17:42,409
that maybe and if I perform a grep okay

332
00:17:40,040 --> 00:17:46,490
so you can see that this string is used

333
00:17:42,410 --> 00:17:50,000
in several several places and in fact

334
00:17:46,490 --> 00:17:53,510
the one we interested is this one which

335
00:17:50,000 --> 00:17:57,350
is which under the payment the other one

336
00:17:53,510 --> 00:18:14,179
is just for for the palletizing so in

337
00:17:57,350 --> 00:18:16,159
fact you just need to so you see okay

338
00:18:14,179 --> 00:18:19,070
it's Mele code so it's good silly it's a

339
00:18:16,160 --> 00:18:23,480
little bit ugly but you can confirm yeah

340
00:18:19,070 --> 00:18:28,309
the set package okay and the viable use

341
00:18:23,480 --> 00:18:40,910
is calm dot and rowing vending so yeah I

342
00:18:28,309 --> 00:18:49,040
can just put hope whatever I want for

343
00:18:40,910 --> 00:18:52,700
instance and so after all compiling the

344
00:18:49,040 --> 00:18:55,659
payment will be sent to this application

345
00:18:52,700 --> 00:18:55,660
okay

346
00:18:59,610 --> 00:19:15,810
and we can do the MEMS the same thing

347
00:19:03,510 --> 00:19:18,810
with verify purchase and so yes which is

348
00:19:15,810 --> 00:19:21,210
a yeah belper but in fact we just see in

349
00:19:18,810 --> 00:19:25,050
rock static which means just calling the

350
00:19:21,210 --> 00:19:37,730
limited the function but we have a class

351
00:19:25,050 --> 00:19:37,730
called security and let's go to verify

352
00:19:37,910 --> 00:19:49,350
so we found this verified purchase and

353
00:19:41,210 --> 00:19:51,120
as I show you on the on the slides you

354
00:19:49,350 --> 00:19:54,570
seek at the end of the verification of

355
00:19:51,120 --> 00:20:00,929
the verify call we go to go to and of

356
00:19:54,570 --> 00:20:07,530
call 0 so yeah so in fact I'll show you

357
00:20:00,930 --> 00:20:12,660
just do that OOP recompile application

358
00:20:07,530 --> 00:20:24,649
in that row ok so pretty pretty easy in

359
00:20:12,660 --> 00:20:24,650
fact just to confirm that little video

360
00:20:26,240 --> 00:20:33,780
so I'm launching doodle jump so you have

361
00:20:31,620 --> 00:20:37,919
this Toria so it's in French sorry

362
00:20:33,780 --> 00:20:40,440
Mikasa and then you have some some

363
00:20:37,920 --> 00:20:43,680
costumes you can choose some are free

364
00:20:40,440 --> 00:20:46,820
and some others you can see you need

365
00:20:43,680 --> 00:20:48,860
1000 candies and you can see I have 0

366
00:20:46,820 --> 00:20:53,790
candies yeah

367
00:20:48,860 --> 00:20:55,770
so let's buy the Pupkin costume so you

368
00:20:53,790 --> 00:20:59,760
can see my clicks because it's from of

369
00:20:55,770 --> 00:21:01,560
device but I'm going to buy 1000 so

370
00:20:59,760 --> 00:21:03,810
bidding aqui asking me if I want to

371
00:21:01,560 --> 00:21:09,510
bypass the payment and you see now I

372
00:21:03,810 --> 00:21:10,330
have 1000 candies and so now I can

373
00:21:09,510 --> 00:21:25,090
process

374
00:21:10,330 --> 00:21:26,800
the Pupkin costume and play with it but

375
00:21:25,090 --> 00:21:29,199
that's it well do the jump to the jump

376
00:21:26,800 --> 00:21:32,590
was very pretty a classic classic

377
00:21:29,200 --> 00:21:36,730
example let's have a look to another one

378
00:21:32,590 --> 00:21:38,709
Snoopy pop so it's it's kind of a kindly

379
00:21:36,730 --> 00:21:41,310
similar to bubble which if you know it

380
00:21:38,710 --> 00:21:45,640
so you have to lounge bubbles and gang

381
00:21:41,310 --> 00:21:47,610
around points and and whatever so in

382
00:21:45,640 --> 00:21:54,190
this game you can buy coins and leaves

383
00:21:47,610 --> 00:21:56,860
ok so you can see here on the right and

384
00:21:54,190 --> 00:22:00,010
so forth loopy pop they didn't copy

385
00:21:56,860 --> 00:22:04,300
paste in fact the Google documentation

386
00:22:00,010 --> 00:22:07,060
they are using the unity library so this

387
00:22:04,300 --> 00:22:09,669
library is mostly known for graphics so

388
00:22:07,060 --> 00:22:12,429
maybe some gamers know already about

389
00:22:09,670 --> 00:22:15,580
unity but for hundreds they also provide

390
00:22:12,430 --> 00:22:18,040
a Google Play billing interface and what

391
00:22:15,580 --> 00:22:20,949
is funny is if you look at the Unity

392
00:22:18,040 --> 00:22:23,230
documentation they say there are two

393
00:22:20,950 --> 00:22:27,070
kind of point of validation for the

394
00:22:23,230 --> 00:22:30,300
process locally or remotely so remotely

395
00:22:27,070 --> 00:22:33,610
which means on the back end summer and

396
00:22:30,300 --> 00:22:35,740
if you look at remotely in fact they say

397
00:22:33,610 --> 00:22:40,209
unity does not offer support for

398
00:22:35,740 --> 00:22:45,280
server-side validation so you can only

399
00:22:40,210 --> 00:22:47,110
perform on local validation so I start

400
00:22:45,280 --> 00:22:50,050
looking at the Java code I didn't find

401
00:22:47,110 --> 00:22:54,219
any clue about how the validation

402
00:22:50,050 --> 00:22:57,669
process was made as I keep looking I

403
00:22:54,220 --> 00:23:01,240
tried oil and some in some manner and I

404
00:22:57,670 --> 00:23:04,690
found in fact most of the Unity Squad is

405
00:23:01,240 --> 00:23:07,300
right in module dotnet and in fact

406
00:23:04,690 --> 00:23:10,420
inside you on your application you have

407
00:23:07,300 --> 00:23:13,419
some dll's stores on assets being data

408
00:23:10,420 --> 00:23:17,020
manage and on these gels you have one

409
00:23:13,420 --> 00:23:18,740
called security dll and this one is the

410
00:23:17,020 --> 00:23:22,010
most interesting one

411
00:23:18,740 --> 00:23:26,450
because you have a function called

412
00:23:22,010 --> 00:23:28,549
validate and this function is is

413
00:23:26,450 --> 00:23:32,419
responsible to verify the signature

414
00:23:28,549 --> 00:23:35,440
purchase so it's pretty easy you can use

415
00:23:32,419 --> 00:23:39,230
for instance gns pi which is a dotnet

416
00:23:35,440 --> 00:23:43,730
decompiler and you can modify the dotnet

417
00:23:39,230 --> 00:23:46,990
code and so if you look at the validate

418
00:23:43,730 --> 00:23:50,690
function the reason we're all thrown

419
00:23:46,990 --> 00:23:51,950
when the signature is invalid so in fact

420
00:23:50,690 --> 00:23:58,880
I can show you in life

421
00:23:51,950 --> 00:24:02,539
DNS pi oh so this is a security yellow

422
00:23:58,880 --> 00:24:06,580
oh sorry you didn't see very well so the

423
00:24:02,539 --> 00:24:17,029
compile and on it you have a validate

424
00:24:06,580 --> 00:24:20,600
function and if you look here you have a

425
00:24:17,029 --> 00:24:26,210
verify function called with the

426
00:24:20,600 --> 00:24:32,870
signature and the bytes returned by a by

427
00:24:26,210 --> 00:24:36,260
the play/stop and in fact if it's if

428
00:24:32,870 --> 00:24:39,199
it's if it's not it's a very v function

429
00:24:36,260 --> 00:24:42,980
return false and you are going to there

430
00:24:39,200 --> 00:24:53,860
and an exception is thrown so in fact

431
00:24:42,980 --> 00:24:53,860
you can just modify I messed up

432
00:25:03,910 --> 00:25:10,490
okay so I just modified now there is no

433
00:25:08,270 --> 00:25:13,100
exception thrown and you just need to

434
00:25:10,490 --> 00:25:20,840
recompile the dll put it inside the

435
00:25:13,100 --> 00:25:23,178
Android application and that's all so I

436
00:25:20,840 --> 00:25:31,459
can show you live

437
00:25:23,179 --> 00:25:35,630
Snoopy pop so I'm full of life so I can

438
00:25:31,460 --> 00:25:37,340
buy more but I can buy coins so you you

439
00:25:35,630 --> 00:25:39,770
see with building AK you can say

440
00:25:37,340 --> 00:25:51,830
whatever price you want in this case I

441
00:25:39,770 --> 00:25:54,260
put zero and so let's buy some and

442
00:25:51,830 --> 00:25:55,610
that's it which is cool there is no

443
00:25:54,260 --> 00:25:58,610
interaction with Google because

444
00:25:55,610 --> 00:26:18,979
everything is made locally inside the

445
00:25:58,610 --> 00:26:21,649
device so yeah just too much zoom up you

446
00:26:18,980 --> 00:26:24,830
modify the dll you modify the set

447
00:26:21,650 --> 00:26:32,420
package as as seen before rebuild with I

448
00:26:24,830 --> 00:26:35,600
pick a tool and then you can provide now

449
00:26:32,420 --> 00:26:37,790
the last application fruit ninja which

450
00:26:35,600 --> 00:26:39,800
is a famous game I mean there is more

451
00:26:37,790 --> 00:26:42,290
than one hundred million of downloads on

452
00:26:39,800 --> 00:26:44,629
the Play Store so if you don't know this

453
00:26:42,290 --> 00:26:50,030
game it's a game where you have to cut

454
00:26:44,630 --> 00:26:52,730
fruit like ninja and so for this one I

455
00:26:50,030 --> 00:26:55,690
struggle a little bit because when I

456
00:26:52,730 --> 00:27:00,380
stop looking at the verification process

457
00:26:55,690 --> 00:27:04,490
I didn't find or anything on the Java

458
00:27:00,380 --> 00:27:07,429
code and in fact I found that fruit

459
00:27:04,490 --> 00:27:10,520
ninja was using what is called Java

460
00:27:07,429 --> 00:27:12,050
native interface gni and in fact these

461
00:27:10,520 --> 00:27:13,129
features allows you to interact with

462
00:27:12,050 --> 00:27:17,060
native code

463
00:27:13,130 --> 00:27:20,600
C and C++ so from your Java code you can

464
00:27:17,060 --> 00:27:24,889
you can execute meters from from native

465
00:27:20,600 --> 00:27:26,629
code and if you look at each have a code

466
00:27:24,890 --> 00:27:28,940
of fruit ninja in fact they implements

467
00:27:26,630 --> 00:27:32,600
the citizenship functions using this

468
00:27:28,940 --> 00:27:36,140
feature so yeah you have you can see the

469
00:27:32,600 --> 00:27:38,929
native parameter saying that this method

470
00:27:36,140 --> 00:27:41,300
is native so that's why there is no code

471
00:27:38,930 --> 00:27:44,750
for this one and there is a per

472
00:27:41,300 --> 00:27:48,760
processor result a native function and

473
00:27:44,750 --> 00:27:51,980
in fact all the code is under Shalimar

474
00:27:48,760 --> 00:27:54,379
so for that you need to reverse engineer

475
00:27:51,980 --> 00:27:57,410
such a memory so I found in fact that

476
00:27:54,380 --> 00:28:01,970
the processor result native wasn't this

477
00:27:57,410 --> 00:28:03,770
shared library limit game that he saw so

478
00:28:01,970 --> 00:28:07,550
as I said ok I'm not very good on

479
00:28:03,770 --> 00:28:11,840
reverse engineering low stuff but I will

480
00:28:07,550 --> 00:28:15,379
try I try to use a cutter I mean rather

481
00:28:11,840 --> 00:28:20,330
true if you know and after one hour of

482
00:28:15,380 --> 00:28:22,910
loading I say ok I'm going to give up I

483
00:28:20,330 --> 00:28:26,990
tried it up but the code was pretty ugly

484
00:28:22,910 --> 00:28:31,460
but finally it's it was a fail but also

485
00:28:26,990 --> 00:28:34,340
win because so I not know why but on the

486
00:28:31,460 --> 00:28:36,710
disk shaft library the signature very

487
00:28:34,340 --> 00:28:39,830
nice by the validation sir is poly made

488
00:28:36,710 --> 00:28:45,160
and so it's still possible to bypass the

489
00:28:39,830 --> 00:28:45,159
payment so I can show you quickly

490
00:29:04,770 --> 00:29:14,379
so in fact in this game you can buy

491
00:29:07,630 --> 00:29:24,669
apples and star fruit let's buy some

492
00:29:14,380 --> 00:29:31,090
apples so you will see you have a big

493
00:29:24,669 --> 00:29:34,679
display on this one I don't know I black

494
00:29:31,090 --> 00:29:39,250
screen and then that's good

495
00:29:34,679 --> 00:29:41,289
more apples so it's rocking also for for

496
00:29:39,250 --> 00:30:10,809
the staff whoops

497
00:29:41,289 --> 00:30:12,669
hit him okay so let's conclude so as I

498
00:30:10,809 --> 00:30:14,470
show you so developers use different

499
00:30:12,669 --> 00:30:17,080
techniques to perform the google play

500
00:30:14,470 --> 00:30:19,390
billing payment mostly on my research I

501
00:30:17,080 --> 00:30:22,870
found that the verification process is

502
00:30:19,390 --> 00:30:26,140
mainly performed locally which is not

503
00:30:22,870 --> 00:30:28,780
good so they tried to perform some

504
00:30:26,140 --> 00:30:32,559
obfuscation they used shell livery or

505
00:30:28,780 --> 00:30:37,570
sometimes like to that jump nothing is a

506
00:30:32,559 --> 00:30:40,450
is made I didn't write too much

507
00:30:37,570 --> 00:30:42,820
application in fact roughly thirty

508
00:30:40,450 --> 00:30:45,730
application I tested half of them are

509
00:30:42,820 --> 00:30:47,830
unable to bypass payment I only found

510
00:30:45,730 --> 00:30:51,130
four application using an external

511
00:30:47,830 --> 00:30:55,418
server to to perform additional checks

512
00:30:51,130 --> 00:30:57,730
for instance a newspaper application I

513
00:30:55,419 --> 00:31:00,940
found I was able to bypass the payment

514
00:30:57,730 --> 00:31:04,780
locally but after performing the payment

515
00:31:00,940 --> 00:31:07,990
a second step is used so you need to

516
00:31:04,780 --> 00:31:10,279
create an account on the server on the

517
00:31:07,990 --> 00:31:12,559
backend server and then the check

518
00:31:10,279 --> 00:31:15,859
if your account really performs a

519
00:31:12,559 --> 00:31:18,279
payment and so it doesn't work so that's

520
00:31:15,859 --> 00:31:20,239
that's a good point

521
00:31:18,279 --> 00:31:24,349
all this example I'll show you I

522
00:31:20,239 --> 00:31:26,570
contacted the editors I never get an

523
00:31:24,349 --> 00:31:29,059
answer in fact it's not really true I

524
00:31:26,570 --> 00:31:30,859
got an answer for fruit ninja

525
00:31:29,059 --> 00:31:34,729
they told me they are going to fix it

526
00:31:30,859 --> 00:31:40,460
but I tried the last version and it's

527
00:31:34,729 --> 00:31:42,739
silver number and if you look at other

528
00:31:40,460 --> 00:31:45,859
billing libraries so Google is not the

529
00:31:42,739 --> 00:31:49,450
only one providing a framework like that

530
00:31:45,859 --> 00:31:52,668
you have Amazon and Samsung and both

531
00:31:49,450 --> 00:31:59,379
oblige you to use a server to perform

532
00:31:52,669 --> 00:32:01,759
the validation process in that role I

533
00:31:59,379 --> 00:32:03,349
just want to thank you check mass for

534
00:32:01,759 --> 00:32:05,509
the support because they supported this

535
00:32:03,349 --> 00:32:16,249
research and now if you have question

536
00:32:05,509 --> 00:32:42,710
feel free are you sure you're working

537
00:32:16,249 --> 00:32:45,589
application is using in-app payment for

538
00:32:42,710 --> 00:32:49,070
Pokemon go I didn't try it but some

539
00:32:45,589 --> 00:32:52,369
application in fact the main the basic

540
00:32:49,070 --> 00:32:54,080
thing is to use the Google Play billing

541
00:32:52,369 --> 00:32:56,299
because for instance I was thinking

542
00:32:54,080 --> 00:32:58,460
about humor for instance but in fact

543
00:32:56,299 --> 00:33:01,879
with you well they don't use at all so

544
00:32:58,460 --> 00:33:04,580
we are play billing IP i they use their

545
00:33:01,879 --> 00:33:06,589
own interface and so you have to provide

546
00:33:04,580 --> 00:33:09,799
for instance the credit cards and some

547
00:33:06,589 --> 00:33:14,109
application sometimes they ask you is it

548
00:33:09,799 --> 00:33:14,109
ready count to perform the payment

549
00:33:50,809 --> 00:33:56,269
yes I think so we can say because at

550
00:33:53,299 --> 00:33:59,599
first when I tried to bypass payment as

551
00:33:56,269 --> 00:34:01,820
I said at the beginning in fact about to

552
00:33:59,599 --> 00:34:03,830
test the payment Google provides some

553
00:34:01,820 --> 00:34:06,908
keywords so for instance you have unread

554
00:34:03,830 --> 00:34:09,409
the test and if you send that to Google

555
00:34:06,909 --> 00:34:12,500
in fact the payment is also always

556
00:34:09,409 --> 00:34:16,849
accepted by the Play Store and so you

557
00:34:12,500 --> 00:34:19,010
have in return a fake faxing natural but

558
00:34:16,849 --> 00:34:21,319
so my ID at the end at the beginning was

559
00:34:19,010 --> 00:34:24,349
okay I'm going to send an Android dot

560
00:34:21,319 --> 00:34:28,399
test at the Google Play Store so I'm

561
00:34:24,349 --> 00:34:30,710
going to have the process validated by

562
00:34:28,399 --> 00:34:32,659
Google but in fact there is a rate

563
00:34:30,710 --> 00:34:34,909
limiting if you do that if you do that

564
00:34:32,659 --> 00:34:37,819
too much time you are blocked by Google

565
00:34:34,909 --> 00:34:40,460
during I don't know one hour or twelve

566
00:34:37,819 --> 00:34:42,409
but just with this technique you never

567
00:34:40,460 --> 00:34:50,059
touch you never communicate that always

568
00:34:42,409 --> 00:34:54,740
with Google infrastructure other any

569
00:34:50,059 --> 00:34:57,650
more questions we can take one more no

570
00:34:54,739 --> 00:35:00,520
in a case Gail thank you very much thank

571
00:34:57,650 --> 00:35:00,520
you very informative

