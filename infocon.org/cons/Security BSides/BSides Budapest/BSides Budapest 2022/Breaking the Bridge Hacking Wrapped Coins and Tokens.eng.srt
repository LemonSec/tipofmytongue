1
00:00:01,199 --> 00:00:04,240
okay ladies and gentlemen our

2
00:00:04,240 --> 00:00:06,879
third presentation of uh the morning is

3
00:00:06,879 --> 00:00:09,200
actually by

4
00:00:09,200 --> 00:00:11,518
six

5
00:00:12,240 --> 00:00:14,719
thank you

6
00:00:15,120 --> 00:00:16,880
hello everyone

7
00:00:16,880 --> 00:00:19,600
so you have probably already seen many

8
00:00:19,600 --> 00:00:21,680
smart contract hacks

9
00:00:21,680 --> 00:00:22,800
and

10
00:00:22,800 --> 00:00:25,359
it's kind of simple uh solidity-based

11
00:00:25,359 --> 00:00:27,760
vulnerabilities on the blockchain space

12
00:00:27,760 --> 00:00:30,560
and i thought uh it's a good idea

13
00:00:30,560 --> 00:00:33,360
to bring a little bit more complex

14
00:00:33,360 --> 00:00:35,840
things uh to this conference

15
00:00:35,840 --> 00:00:38,320
and the hype because what is the hype

16
00:00:38,320 --> 00:00:40,960
now in hacking it's in in webstery or

17
00:00:40,960 --> 00:00:43,600
blockchain term whichever buzzword you

18
00:00:43,600 --> 00:00:47,680
like to use um it is the bridge hacking

19
00:00:47,680 --> 00:00:48,480
so

20
00:00:48,480 --> 00:00:52,239
i have four parts in this presentation i

21
00:00:52,239 --> 00:00:55,520
will start with an introduction of what

22
00:00:55,520 --> 00:00:58,399
bridges i will explain you what are

23
00:00:58,399 --> 00:01:02,000
coins tokens rap tokens how blockchains

24
00:01:02,000 --> 00:01:03,760
are connected to

25
00:01:03,760 --> 00:01:05,280
centralized bridges

26
00:01:05,280 --> 00:01:09,040
and i will show you an example uh how

27
00:01:09,040 --> 00:01:11,280
a fun a really interesting

28
00:01:11,280 --> 00:01:13,119
project was hacked

29
00:01:13,119 --> 00:01:15,920
and how some funds were recovered

30
00:01:15,920 --> 00:01:18,400
i'll show you also the exploit

31
00:01:18,400 --> 00:01:21,439
and the tools you can use to do bridge

32
00:01:21,439 --> 00:01:22,320
hacking

33
00:01:22,320 --> 00:01:25,600
and solidity based and

34
00:01:25,600 --> 00:01:27,600
kind of depth hacking

35
00:01:27,600 --> 00:01:31,680
so um let's move on uh why would you do

36
00:01:31,680 --> 00:01:34,799
this anyways what's web3 what is this

37
00:01:34,799 --> 00:01:38,799
thing anyways uh the good thing in

38
00:01:38,799 --> 00:01:41,600
hacking cryptocurrencies in this webster

39
00:01:41,600 --> 00:01:45,200
area is that you can hack money directly

40
00:01:45,200 --> 00:01:48,399
and this was not available before in the

41
00:01:48,399 --> 00:01:51,840
web 2 area which is kind of

42
00:01:51,840 --> 00:01:53,520
yeah it's different in the way from web

43
00:01:53,520 --> 00:01:56,640
one that it is interactive but it is

44
00:01:56,640 --> 00:01:59,840
commercialized it is centralized it is

45
00:01:59,840 --> 00:02:03,280
not really private and so on um

46
00:02:03,280 --> 00:02:07,600
at this space we were not able to

47
00:02:07,600 --> 00:02:11,280
hack money in such a direct way because

48
00:02:11,280 --> 00:02:14,080
for example if there was a bank hack you

49
00:02:14,080 --> 00:02:16,080
had to transfer the balances and you had

50
00:02:16,080 --> 00:02:19,360
to uh fight with the risk management

51
00:02:19,360 --> 00:02:22,800
team in webster if you take the coins or

52
00:02:22,800 --> 00:02:24,080
tokens

53
00:02:24,080 --> 00:02:27,440
then it's gone and you already have it

54
00:02:27,440 --> 00:02:30,319
in your wallet there are right now not

55
00:02:30,319 --> 00:02:33,840
many systems that can actually stop you

56
00:02:33,840 --> 00:02:34,959
or

57
00:02:34,959 --> 00:02:37,040
stop you from taking the balances when

58
00:02:37,040 --> 00:02:39,120
your exploit is successful

59
00:02:39,120 --> 00:02:42,480
and also um

60
00:02:42,480 --> 00:02:44,800
also you can you can

61
00:02:44,800 --> 00:02:47,840
directly access the this native

62
00:02:47,840 --> 00:02:50,480
system on the blockchain because that's

63
00:02:50,480 --> 00:02:51,920
inbuilt

64
00:02:51,920 --> 00:02:52,640
so

65
00:02:52,640 --> 00:02:54,959
all this kind of buzzwords

66
00:02:54,959 --> 00:02:57,120
i'm not sure how many of you are

67
00:02:57,120 --> 00:03:00,319
familiar with uh with these

68
00:03:00,319 --> 00:03:04,239
things which are written here so uh real

69
00:03:04,239 --> 00:03:06,800
short introduction to

70
00:03:06,800 --> 00:03:07,680
um

71
00:03:07,680 --> 00:03:10,080
to what bridges and how it works and

72
00:03:10,080 --> 00:03:12,720
what we mean actually when we say

73
00:03:12,720 --> 00:03:13,920
blockchain

74
00:03:13,920 --> 00:03:17,280
it is really overused word actually in

75
00:03:17,280 --> 00:03:20,480
the bitcoin white paper um

76
00:03:20,480 --> 00:03:22,720
there was no blockchain word used so

77
00:03:22,720 --> 00:03:24,519
bitcoin is a

78
00:03:24,519 --> 00:03:28,000
decentralized peer-to-peer network uh a

79
00:03:28,000 --> 00:03:30,840
money system but the term was

80
00:03:30,840 --> 00:03:34,239
coined coin i mean uh someone figured

81
00:03:34,239 --> 00:03:36,319
this uh out this term a couple of years

82
00:03:36,319 --> 00:03:39,840
later later maybe around 2012 2011 or

83
00:03:39,840 --> 00:03:40,720
something

84
00:03:40,720 --> 00:03:42,959
so when we say blockchain most of the

85
00:03:42,959 --> 00:03:46,640
people mean that that's a data which is

86
00:03:46,640 --> 00:03:49,040
hedged and then the next block is also

87
00:03:49,040 --> 00:03:50,959
data with the hash and also with the

88
00:03:50,959 --> 00:03:53,920
previous hash and this chain continues

89
00:03:53,920 --> 00:03:57,599
plus the consensus algorithm which makes

90
00:03:57,599 --> 00:03:59,680
sure that the nodes that are

91
00:03:59,680 --> 00:04:01,920
participating at the system

92
00:04:01,920 --> 00:04:03,280
are connecting

93
00:04:03,280 --> 00:04:06,640
together and have the consensus and they

94
00:04:06,640 --> 00:04:08,640
agree that x

95
00:04:08,640 --> 00:04:09,840
current has

96
00:04:09,840 --> 00:04:12,319
y balance and so on

97
00:04:12,319 --> 00:04:13,519
and

98
00:04:13,519 --> 00:04:15,920
plus we also have the peer-to-peer uh

99
00:04:15,920 --> 00:04:18,399
library inbuilt so that's the blockchain

100
00:04:18,399 --> 00:04:21,680
package uh and in this presentation when

101
00:04:21,680 --> 00:04:23,440
i speak about a blockchain that's what

102
00:04:23,440 --> 00:04:27,520
it means so the bridge is um

103
00:04:27,520 --> 00:04:30,080
in in this case and in most cases what

104
00:04:30,080 --> 00:04:32,479
we see as bridges these are

105
00:04:32,479 --> 00:04:35,600
veptu like centralized front-end

106
00:04:35,600 --> 00:04:37,680
back-end servers that are communicating

107
00:04:37,680 --> 00:04:39,199
with apis

108
00:04:39,199 --> 00:04:43,040
through to providers who are sending uh

109
00:04:43,040 --> 00:04:46,320
data to to blockchain and uh and make

110
00:04:46,320 --> 00:04:47,919
transactions happen

111
00:04:47,919 --> 00:04:50,560
this exists so you can

112
00:04:50,560 --> 00:04:54,479
bridge coins from one blockchain uh to

113
00:04:54,479 --> 00:04:56,960
another one and the coin

114
00:04:56,960 --> 00:05:00,720
most often means that this is the the

115
00:05:00,720 --> 00:05:05,039
lowest layer of uh payment system on the

116
00:05:05,039 --> 00:05:06,479
blockchain

117
00:05:06,479 --> 00:05:08,960
and when ethereum came out with

118
00:05:08,960 --> 00:05:11,039
something new which is the evm

119
00:05:11,039 --> 00:05:13,360
which is basically the

120
00:05:13,360 --> 00:05:16,720
possibility that you can run code on top

121
00:05:16,720 --> 00:05:17,680
of

122
00:05:17,680 --> 00:05:20,479
a blockchain on this um this

123
00:05:20,479 --> 00:05:23,680
decentralized consensus-like system

124
00:05:23,680 --> 00:05:26,560
they put this evm layer where you can

125
00:05:26,560 --> 00:05:29,600
code and either solidity or viper so

126
00:05:29,600 --> 00:05:31,759
that is the more common one

127
00:05:31,759 --> 00:05:34,320
and create your own tokens so what

128
00:05:34,320 --> 00:05:36,479
actually is a token uh if you look at

129
00:05:36,479 --> 00:05:38,880
erc20 standard you will see the details

130
00:05:38,880 --> 00:05:43,360
of how this specific token looks like

131
00:05:43,360 --> 00:05:45,919
but this is nothing else than you

132
00:05:45,919 --> 00:05:48,720
specifying a variable and the max supply

133
00:05:48,720 --> 00:05:50,320
and and

134
00:05:50,320 --> 00:05:52,880
adding some logic to your tokens and

135
00:05:52,880 --> 00:05:53,840
sending

136
00:05:53,840 --> 00:05:56,560
the balances from account a to b

137
00:05:56,560 --> 00:05:59,120
and of course as we uh

138
00:05:59,120 --> 00:06:01,759
went through time uh it became more and

139
00:06:01,759 --> 00:06:04,000
more complex and more logic was added

140
00:06:04,000 --> 00:06:05,440
but the core

141
00:06:05,440 --> 00:06:08,400
is the solidity at the token so what is

142
00:06:08,400 --> 00:06:10,160
a wrapped token

143
00:06:10,160 --> 00:06:13,199
i've wrapped token and we can go to the

144
00:06:13,199 --> 00:06:15,440
next slide because i said we will see a

145
00:06:15,440 --> 00:06:19,039
fun example how uh blockchain banana

146
00:06:19,039 --> 00:06:21,759
bridge can be hacked

147
00:06:21,759 --> 00:06:23,039
this this

148
00:06:23,039 --> 00:06:24,000
will

149
00:06:24,000 --> 00:06:26,160
show you how

150
00:06:26,160 --> 00:06:28,479
the system works

151
00:06:28,479 --> 00:06:29,759
in detail

152
00:06:29,759 --> 00:06:30,479
so

153
00:06:30,479 --> 00:06:33,199
what was happening in in this part in

154
00:06:33,199 --> 00:06:35,759
this hack that there is banana

155
00:06:35,759 --> 00:06:38,240
blockchain it's a meme coin it's like

156
00:06:38,240 --> 00:06:40,240
deutsch queen but

157
00:06:40,240 --> 00:06:42,479
with bananas it's uh

158
00:06:42,479 --> 00:06:45,039
i thought it's very simple exploit it's

159
00:06:45,039 --> 00:06:47,199
fun to explain uh there will be some

160
00:06:47,199 --> 00:06:50,080
other cases at the end of this talk

161
00:06:50,080 --> 00:06:53,840
but um but this will be uh surely

162
00:06:53,840 --> 00:06:56,400
something that can get everyone started

163
00:06:56,400 --> 00:06:59,120
so what uh what was happening there so

164
00:06:59,120 --> 00:07:01,599
there is the blockchain itself

165
00:07:01,599 --> 00:07:05,120
with the coins they implemented a bridge

166
00:07:05,120 --> 00:07:08,319
where you could send your funds to so

167
00:07:08,319 --> 00:07:11,520
let's say you have some banana coins in

168
00:07:11,520 --> 00:07:13,759
the system you send it to the bridge and

169
00:07:13,759 --> 00:07:16,319
in exchange the bridge gives you a

170
00:07:16,319 --> 00:07:19,039
receipt and the receipt is generated

171
00:07:19,039 --> 00:07:21,440
from this this web tool-like

172
00:07:21,440 --> 00:07:22,800
server

173
00:07:22,800 --> 00:07:24,560
from the backend

174
00:07:24,560 --> 00:07:26,319
as i remember node.js

175
00:07:26,319 --> 00:07:28,880
is running there so you can scream oh i

176
00:07:28,880 --> 00:07:30,720
got javascript

177
00:07:30,720 --> 00:07:32,240
yes

178
00:07:32,240 --> 00:07:34,960
most of the things are actually written

179
00:07:34,960 --> 00:07:35,919
in that

180
00:07:35,919 --> 00:07:38,240
and so it gives you a receipt and then

181
00:07:38,240 --> 00:07:41,919
you can use this receipt to mint wrapped

182
00:07:41,919 --> 00:07:45,919
tokens on other solidity-enabled systems

183
00:07:45,919 --> 00:07:50,879
where the banana smart contract is um

184
00:07:50,879 --> 00:07:52,000
is running

185
00:07:52,000 --> 00:07:55,360
and in this case and in the demo which i

186
00:07:55,360 --> 00:07:58,160
prepared i show you are the two chains

187
00:07:58,160 --> 00:08:01,759
now we will be uh on polygon and we will

188
00:08:01,759 --> 00:08:05,919
be also uh on on binance smart chain

189
00:08:05,919 --> 00:08:08,400
which are um

190
00:08:08,400 --> 00:08:09,520
which are

191
00:08:09,520 --> 00:08:12,879
evm enabled systems they basically

192
00:08:12,879 --> 00:08:15,520
forged ethereum and then

193
00:08:15,520 --> 00:08:19,199
then this project started to use it

194
00:08:19,199 --> 00:08:20,319
um

195
00:08:20,319 --> 00:08:23,199
so yeah that is the basic infrastructure

196
00:08:23,199 --> 00:08:25,280
of this uh example

197
00:08:25,280 --> 00:08:28,160
and you can already start thinking about

198
00:08:28,160 --> 00:08:29,440
the issues

199
00:08:29,440 --> 00:08:30,960
you have one blockchain you have a

200
00:08:30,960 --> 00:08:33,519
centralized point a single point of

201
00:08:33,519 --> 00:08:36,159
failure and you have two

202
00:08:36,159 --> 00:08:40,640
smart contracts which accept receipts so

203
00:08:40,640 --> 00:08:44,320
if you have done some web pen testing

204
00:08:44,320 --> 00:08:46,800
maybe you already have some ideas of

205
00:08:46,800 --> 00:08:48,959
what could go wrong

206
00:08:48,959 --> 00:08:52,560
uh anyone with ideas

207
00:08:52,560 --> 00:08:55,279
if you a receipt and you have two

208
00:08:55,279 --> 00:08:59,360
systems you can use the same receipt

209
00:08:59,760 --> 00:09:02,560
yes someone

210
00:09:05,440 --> 00:09:07,040
exactly yes

211
00:09:07,040 --> 00:09:10,240
nice so uh replay attack

212
00:09:10,240 --> 00:09:13,360
so that was uh what happened

213
00:09:13,360 --> 00:09:14,480
and

214
00:09:14,480 --> 00:09:15,839
someone

215
00:09:15,839 --> 00:09:17,600
funny but the story was really funny

216
00:09:17,600 --> 00:09:20,080
because on the banana

217
00:09:20,080 --> 00:09:21,040
chat

218
00:09:21,040 --> 00:09:23,040
some guys started to ask how does this

219
00:09:23,040 --> 00:09:25,440
bridge work and how the receipts are

220
00:09:25,440 --> 00:09:29,040
working and they started to uh ask the

221
00:09:29,040 --> 00:09:30,480
developers about that because they

222
00:09:30,480 --> 00:09:32,560
didn't have enough skills to figure out

223
00:09:32,560 --> 00:09:35,279
themselves and it turns out they were

224
00:09:35,279 --> 00:09:37,120
trying to hack the bridge which they

225
00:09:37,120 --> 00:09:39,200
succeeded so

226
00:09:39,200 --> 00:09:41,519
in the end we found this uh two guys uh

227
00:09:41,519 --> 00:09:44,399
in the chat talks with road and alibaba

228
00:09:44,399 --> 00:09:47,279
who were asking uh what was going on and

229
00:09:47,279 --> 00:09:49,519
their account was connected

230
00:09:49,519 --> 00:09:50,880
to the hack

231
00:09:50,880 --> 00:09:54,000
it took uh some time until the guys

232
00:09:54,000 --> 00:09:56,720
figured out what was going on because

233
00:09:56,720 --> 00:10:00,640
yeah you send one banana to the bridge

234
00:10:00,640 --> 00:10:03,200
and then you use the receipt

235
00:10:03,200 --> 00:10:06,160
on both smart contracts and you had two

236
00:10:06,160 --> 00:10:08,640
wrapped bananas from the smart contract

237
00:10:08,640 --> 00:10:09,519
but

238
00:10:09,519 --> 00:10:12,240
it works uh the way around so when you

239
00:10:12,240 --> 00:10:14,240
have the wrap bananas you can exchange

240
00:10:14,240 --> 00:10:17,600
them back to the the blockchain coins

241
00:10:17,600 --> 00:10:19,200
the main bananas

242
00:10:19,200 --> 00:10:21,279
so that's a pretty straightforward what

243
00:10:21,279 --> 00:10:23,600
was happening but we still haven't

244
00:10:23,600 --> 00:10:25,200
looked into the

245
00:10:25,200 --> 00:10:28,000
code and what actually

246
00:10:28,000 --> 00:10:32,760
was happening on a technical level

247
00:10:33,360 --> 00:10:35,200
so first of all

248
00:10:35,200 --> 00:10:35,730
um

249
00:10:35,730 --> 00:10:37,040
[Music]

250
00:10:37,040 --> 00:10:40,399
i i won't explain the front-end back-end

251
00:10:40,399 --> 00:10:41,440
and

252
00:10:41,440 --> 00:10:44,000
and this http part level because

253
00:10:44,000 --> 00:10:48,240
we have seen this uh a lot already but

254
00:10:48,240 --> 00:10:51,200
uh what is really important in this

255
00:10:51,200 --> 00:10:52,640
exploit

256
00:10:52,640 --> 00:10:54,880
what these guys are doing is the

257
00:10:54,880 --> 00:10:58,959
transaction itself and how it's built up

258
00:10:58,959 --> 00:11:03,440
and how you can put the receipt itself

259
00:11:03,440 --> 00:11:04,640
into

260
00:11:04,640 --> 00:11:05,519
the

261
00:11:05,519 --> 00:11:08,480
the transaction so

262
00:11:08,480 --> 00:11:10,560
what the attackers had to do

263
00:11:10,560 --> 00:11:14,880
is that they took an example of the

264
00:11:14,880 --> 00:11:16,320
transaction

265
00:11:16,320 --> 00:11:18,800
and that was provided by

266
00:11:18,800 --> 00:11:21,120
the bridge front-end

267
00:11:21,120 --> 00:11:23,680
and they only had to replace basically

268
00:11:23,680 --> 00:11:24,560
the

269
00:11:24,560 --> 00:11:26,560
uh assigned

270
00:11:26,560 --> 00:11:29,279
data the the receipt in the transaction

271
00:11:29,279 --> 00:11:31,760
and a little bit of tinkering so it

272
00:11:31,760 --> 00:11:34,160
works not just on let's say polygon but

273
00:11:34,160 --> 00:11:35,519
also

274
00:11:35,519 --> 00:11:37,120
on uh

275
00:11:37,120 --> 00:11:40,160
on on the other chain the binance chain

276
00:11:40,160 --> 00:11:41,040
so

277
00:11:41,040 --> 00:11:44,480
uh we can see how it works first uh you

278
00:11:44,480 --> 00:11:47,519
put you build up the transaction uh i

279
00:11:47,519 --> 00:11:49,120
show you uh

280
00:11:49,120 --> 00:11:51,839
python script how you can do the ecdsa

281
00:11:51,839 --> 00:11:53,279
part for the

282
00:11:53,279 --> 00:11:54,079
uh

283
00:11:54,079 --> 00:11:56,720
for the receipt but the transaction you

284
00:11:56,720 --> 00:11:59,120
can pre pretty much put together with

285
00:11:59,120 --> 00:12:02,240
web3.js library you have it in node.js

286
00:12:02,240 --> 00:12:05,920
you also have it web3 in python so and

287
00:12:05,920 --> 00:12:07,600
also in rust so

288
00:12:07,600 --> 00:12:10,480
whichever language you can work with

289
00:12:10,480 --> 00:12:12,160
you can surely do it

290
00:12:12,160 --> 00:12:14,639
so you prepare your transaction and then

291
00:12:14,639 --> 00:12:18,079
you send your transaction uh to either a

292
00:12:18,079 --> 00:12:20,639
provider for example if you have used

293
00:12:20,639 --> 00:12:23,120
meta mask it's one of the most common uh

294
00:12:23,120 --> 00:12:25,760
wallet then what metamask is doing in

295
00:12:25,760 --> 00:12:28,079
the background it is using a provider

296
00:12:28,079 --> 00:12:29,040
that

297
00:12:29,040 --> 00:12:32,720
basically forwards your transaction to

298
00:12:32,720 --> 00:12:36,560
to a node uh let's say polygon node and

299
00:12:36,560 --> 00:12:38,480
on the polygon node

300
00:12:38,480 --> 00:12:41,600
uh it is it is checked and if everything

301
00:12:41,600 --> 00:12:42,320
uh

302
00:12:42,320 --> 00:12:44,560
is okay and we're broadcasting on the

303
00:12:44,560 --> 00:12:46,079
network then it

304
00:12:46,079 --> 00:12:48,000
is broadcasted to

305
00:12:48,000 --> 00:12:49,600
two more nodes and

306
00:12:49,600 --> 00:12:52,160
as time passes on and blocks are being

307
00:12:52,160 --> 00:12:55,600
mined this is propagating everywhere on

308
00:12:55,600 --> 00:12:56,880
the blockchain

309
00:12:56,880 --> 00:12:58,000
and

310
00:12:58,000 --> 00:13:00,079
if your transaction

311
00:13:00,079 --> 00:13:00,959
was

312
00:13:00,959 --> 00:13:04,240
correctly crafted then

313
00:13:04,240 --> 00:13:06,720
this won't revert it will succeed and

314
00:13:06,720 --> 00:13:08,880
you will get a notification that

315
00:13:08,880 --> 00:13:10,240
your

316
00:13:10,240 --> 00:13:11,600
transaction

317
00:13:11,600 --> 00:13:14,320
is mined in a block and now it's

318
00:13:14,320 --> 00:13:16,560
finalized and you can start seeing the

319
00:13:16,560 --> 00:13:18,880
confirmations

320
00:13:18,880 --> 00:13:19,760
so

321
00:13:19,760 --> 00:13:23,760
let's start looking into uh what was

322
00:13:23,760 --> 00:13:25,680
called in this exploit

323
00:13:25,680 --> 00:13:28,240
um basically if you

324
00:13:28,240 --> 00:13:31,839
um do go through the uh use of the

325
00:13:31,839 --> 00:13:33,920
bridge of the banana bridge which i will

326
00:13:33,920 --> 00:13:36,480
show you and i really hope it will work

327
00:13:36,480 --> 00:13:38,720
for the first time uh

328
00:13:38,720 --> 00:13:42,160
i will i will prep some bananas for you

329
00:13:42,160 --> 00:13:43,120
and

330
00:13:43,120 --> 00:13:45,519
you will see this on the

331
00:13:45,519 --> 00:13:48,639
only blockchain this exact uh function

332
00:13:48,639 --> 00:13:51,680
call when you want to meet

333
00:13:51,680 --> 00:13:56,079
with your receipt so the attackers uh

334
00:13:56,079 --> 00:13:57,839
what i explained so far they had some

335
00:13:57,839 --> 00:14:00,240
ideas about that but they were let's say

336
00:14:00,240 --> 00:14:02,000
not that bright to understand all the

337
00:14:02,000 --> 00:14:05,040
things so all they did is that they were

338
00:14:05,040 --> 00:14:07,199
like screwing around playing around and

339
00:14:07,199 --> 00:14:09,199
they figured out if you find this and

340
00:14:09,199 --> 00:14:11,360
they copy this uh

341
00:14:11,360 --> 00:14:14,560
to a transaction on the other chain then

342
00:14:14,560 --> 00:14:17,920
this um function call with the same

343
00:14:17,920 --> 00:14:19,360
receive data

344
00:14:19,360 --> 00:14:21,920
vrs is used uh

345
00:14:21,920 --> 00:14:25,120
so basically the vrs and and uid part is

346
00:14:25,120 --> 00:14:26,800
the most important

347
00:14:26,800 --> 00:14:28,480
from this

348
00:14:28,480 --> 00:14:29,760
message

349
00:14:29,760 --> 00:14:32,639
and of course the recipient address and

350
00:14:32,639 --> 00:14:34,880
they they just copied it and put

351
00:14:34,880 --> 00:14:37,519
together the transaction

352
00:14:37,519 --> 00:14:40,560
so what do we need

353
00:14:40,560 --> 00:14:44,320
for uh for hacking on these systems if

354
00:14:44,320 --> 00:14:47,040
we want to be like a bit better than

355
00:14:47,040 --> 00:14:51,680
those guys or want to go a little deeper

356
00:14:51,680 --> 00:14:54,320
actually not too much

357
00:14:54,320 --> 00:14:56,720
most of the cases when

358
00:14:56,720 --> 00:15:00,560
we see exploits in uh ethereum based

359
00:15:00,560 --> 00:15:03,440
systems and front ends you just need

360
00:15:03,440 --> 00:15:06,480
your web to hacking tools uh you can use

361
00:15:06,480 --> 00:15:09,199
firefox metamask uh if you want to

362
00:15:09,199 --> 00:15:12,320
develop the exploit on your own machine

363
00:15:12,320 --> 00:15:14,880
you either use the ethereum node get or

364
00:15:14,880 --> 00:15:16,880
you use ganache which is a one click

365
00:15:16,880 --> 00:15:18,320
blockchain

366
00:15:18,320 --> 00:15:20,160
don't ask me why they call it ganache

367
00:15:20,160 --> 00:15:21,680
and what it does with chocolate i have

368
00:15:21,680 --> 00:15:23,440
no idea

369
00:15:23,440 --> 00:15:25,519
also about truffle but with ganache and

370
00:15:25,519 --> 00:15:27,600
truffle you can run your own

371
00:15:27,600 --> 00:15:29,519
testing system

372
00:15:29,519 --> 00:15:32,240
uh on your on your laptop and it doesn't

373
00:15:32,240 --> 00:15:34,480
eat up all your processing power and all

374
00:15:34,480 --> 00:15:36,720
your memory so it's pretty convenient

375
00:15:36,720 --> 00:15:38,000
you can test

376
00:15:38,000 --> 00:15:41,519
your exploits on it and so on and um you

377
00:15:41,519 --> 00:15:44,320
can also use python um

378
00:15:44,320 --> 00:15:45,440
because

379
00:15:45,440 --> 00:15:48,199
at i would say uh if you want to

380
00:15:48,199 --> 00:15:50,880
automatize some

381
00:15:50,880 --> 00:15:52,639
like more like generating the exploits

382
00:15:52,639 --> 00:15:56,480
python can be kind of convenient

383
00:16:00,720 --> 00:16:02,720
so

384
00:16:02,720 --> 00:16:04,720
let's look into

385
00:16:04,720 --> 00:16:06,880
the

386
00:16:07,440 --> 00:16:11,600
bridge so if you open polygon.banana.cc

387
00:16:11,600 --> 00:16:15,279
and connect your metamask to

388
00:16:15,279 --> 00:16:17,279
this page there is a big connect button

389
00:16:17,279 --> 00:16:18,720
if you open it

390
00:16:18,720 --> 00:16:21,120
i already connected it and you can say i

391
00:16:21,120 --> 00:16:22,959
am new to this uh

392
00:16:22,959 --> 00:16:25,839
banana and then you can

393
00:16:25,839 --> 00:16:27,600
send the address

394
00:16:27,600 --> 00:16:30,160
and then you can get uh through this

395
00:16:30,160 --> 00:16:31,360
menu

396
00:16:31,360 --> 00:16:34,560
and in the end when you um

397
00:16:34,560 --> 00:16:37,839
when you finish the process and connect

398
00:16:37,839 --> 00:16:39,680
it to the bridge

399
00:16:39,680 --> 00:16:41,519
then

400
00:16:41,519 --> 00:16:44,800
then you can get to this point where the

401
00:16:44,800 --> 00:16:47,839
transaction will be preferred from this

402
00:16:47,839 --> 00:16:48,839
front-end

403
00:16:48,839 --> 00:16:50,800
interface

404
00:16:50,800 --> 00:16:53,120
i actually haven't prepared

405
00:16:53,120 --> 00:16:55,920
the banana address to this so let's jump

406
00:16:55,920 --> 00:16:58,639
to the transaction

407
00:16:58,639 --> 00:17:00,800
so i can show you

408
00:17:00,800 --> 00:17:01,839
how

409
00:17:01,839 --> 00:17:02,839
it

410
00:17:02,839 --> 00:17:04,559
works

411
00:17:04,559 --> 00:17:06,959
whatever transaction

412
00:17:06,959 --> 00:17:09,039
you want to have a look at you can just

413
00:17:09,039 --> 00:17:11,439
go on the explorer in this case in

414
00:17:11,439 --> 00:17:14,240
binance chain and you can see all the

415
00:17:14,240 --> 00:17:15,599
details

416
00:17:15,599 --> 00:17:16,480
and

417
00:17:16,480 --> 00:17:19,520
and you can pretty much figure out uh

418
00:17:19,520 --> 00:17:20,559
what are

419
00:17:20,559 --> 00:17:23,280
uh what was sent

420
00:17:23,280 --> 00:17:24,880
as long as

421
00:17:24,880 --> 00:17:25,839
you

422
00:17:25,839 --> 00:17:28,960
have on a smart contract level the

423
00:17:28,960 --> 00:17:32,240
uh the code because if you deploy a

424
00:17:32,240 --> 00:17:33,679
smart contract

425
00:17:33,679 --> 00:17:39,039
on a blockchain and you do not uh

426
00:17:39,039 --> 00:17:41,840
verify let's say the contract you do not

427
00:17:41,840 --> 00:17:43,919
upload it all you see on the blockchain

428
00:17:43,919 --> 00:17:45,200
is the bytecode

429
00:17:45,200 --> 00:17:48,960
so in this example

430
00:17:48,960 --> 00:17:51,039
this is the wrapped banana

431
00:17:51,039 --> 00:17:53,039
example

432
00:17:53,039 --> 00:17:55,520
i think i just take it back

433
00:17:55,520 --> 00:17:57,360
so in this

434
00:17:57,360 --> 00:18:00,559
example we can see that the guys behind

435
00:18:00,559 --> 00:18:02,559
the project

436
00:18:02,559 --> 00:18:03,760
basically

437
00:18:03,760 --> 00:18:05,440
verified the

438
00:18:05,440 --> 00:18:08,080
solidity code that they use for the

439
00:18:08,080 --> 00:18:10,799
smart contract that runs on binance and

440
00:18:10,799 --> 00:18:11,760
you can

441
00:18:11,760 --> 00:18:12,880
find

442
00:18:12,880 --> 00:18:16,559
all the all the data here

443
00:18:17,039 --> 00:18:18,320
and

444
00:18:18,320 --> 00:18:21,760
if we want to look at uh the code and

445
00:18:21,760 --> 00:18:24,880
the more interesting part of the hack

446
00:18:24,880 --> 00:18:26,080
here is git

447
00:18:26,080 --> 00:18:27,520
so basically

448
00:18:27,520 --> 00:18:30,880
a little bit extension so normally smart

449
00:18:30,880 --> 00:18:32,160
contracts

450
00:18:32,160 --> 00:18:35,760
are immutable except if you use a proxy

451
00:18:35,760 --> 00:18:37,840
smart contract and you are able to

452
00:18:37,840 --> 00:18:39,520
replace the logic

453
00:18:39,520 --> 00:18:41,440
of your smart contract but still keep

454
00:18:41,440 --> 00:18:42,400
the data

455
00:18:42,400 --> 00:18:45,440
and in this case if you look at the

456
00:18:45,440 --> 00:18:47,600
git commit you will see that they

457
00:18:47,600 --> 00:18:48,559
also

458
00:18:48,559 --> 00:18:50,720
made an upgrade

459
00:18:50,720 --> 00:18:52,320
to the smart contract

460
00:18:52,320 --> 00:18:55,679
so not all smart contracts are actually

461
00:18:55,679 --> 00:19:00,080
immutable if you see this proxy setup

462
00:19:00,080 --> 00:19:02,000
then you can

463
00:19:02,000 --> 00:19:03,280
you can see that

464
00:19:03,280 --> 00:19:04,080
that

465
00:19:04,080 --> 00:19:05,919
you are not calling basically the smart

466
00:19:05,919 --> 00:19:08,559
contract in a direct way it is proxied

467
00:19:08,559 --> 00:19:09,360
and

468
00:19:09,360 --> 00:19:13,600
and proxy admin can modify the address

469
00:19:13,600 --> 00:19:16,880
of uh of the contract that are

470
00:19:16,880 --> 00:19:19,039
that are reliant to the

471
00:19:19,039 --> 00:19:21,120
logic

472
00:19:21,120 --> 00:19:22,320
so

473
00:19:22,320 --> 00:19:23,600
but uh

474
00:19:23,600 --> 00:19:27,120
how how do we call it so one way to call

475
00:19:27,120 --> 00:19:28,559
a smart contract

476
00:19:28,559 --> 00:19:31,280
and uh for example if you

477
00:19:31,280 --> 00:19:34,240
want to do this mint with receipt

478
00:19:34,240 --> 00:19:35,200
call

479
00:19:35,200 --> 00:19:37,440
you can just connect your meta mask to

480
00:19:37,440 --> 00:19:40,480
the explorer and then

481
00:19:40,480 --> 00:19:42,240
fill

482
00:19:42,240 --> 00:19:45,200
the fields and send a transaction

483
00:19:45,200 --> 00:19:47,440
and the problem in this first of all for

484
00:19:47,440 --> 00:19:50,000
example in binance scan this is behind

485
00:19:50,000 --> 00:19:53,440
cloud flare which is pretty evil and

486
00:19:53,440 --> 00:19:55,919
not that nice so you probably don't want

487
00:19:55,919 --> 00:19:57,440
to do this

488
00:19:57,440 --> 00:19:59,280
and then it probably uh

489
00:19:59,280 --> 00:20:01,200
connects to infor and then

490
00:20:01,200 --> 00:20:03,520
sends it uh to the blockchain

491
00:20:03,520 --> 00:20:06,000
because you are using metamosk

492
00:20:06,000 --> 00:20:08,320
so if you don't want to use that

493
00:20:08,320 --> 00:20:11,039
but you want to call a smart contract

494
00:20:11,039 --> 00:20:12,720
i prepared a

495
00:20:12,720 --> 00:20:15,120
simple example a question do you see the

496
00:20:15,120 --> 00:20:18,120
code

497
00:20:30,559 --> 00:20:33,120
okay i am actually trying to zoom it but

498
00:20:33,120 --> 00:20:36,080
let's move it from here

499
00:20:44,240 --> 00:20:46,480
no syntax highlight but who's using

500
00:20:46,480 --> 00:20:49,760
syntax highlighting anyways uh

501
00:20:49,760 --> 00:20:52,720
so uh contract one

502
00:20:52,720 --> 00:20:53,760
uh

503
00:20:53,760 --> 00:20:56,799
will be calling contract you that's the

504
00:20:56,799 --> 00:20:58,720
idea so i quickly explain you what's

505
00:20:58,720 --> 00:21:00,799
happening there and then we see we try

506
00:21:00,799 --> 00:21:04,000
tried in practice on the remix ide remix

507
00:21:04,000 --> 00:21:06,000
ide is a

508
00:21:06,000 --> 00:21:09,919
javascript based uh ide which also

509
00:21:09,919 --> 00:21:13,679
implements evm in your browser so you

510
00:21:13,679 --> 00:21:15,440
have everything that you need for smart

511
00:21:15,440 --> 00:21:17,600
contract development

512
00:21:17,600 --> 00:21:19,440
so let's say you have for example the

513
00:21:19,440 --> 00:21:22,159
received or whatever um

514
00:21:22,159 --> 00:21:25,440
information you already have a contract

515
00:21:25,440 --> 00:21:26,240
to

516
00:21:26,240 --> 00:21:27,600
deployed

517
00:21:27,600 --> 00:21:28,840
like the

518
00:21:28,840 --> 00:21:30,400
banana

519
00:21:30,400 --> 00:21:33,120
and you want to call it from

520
00:21:33,120 --> 00:21:35,600
from your contract which is the contract

521
00:21:35,600 --> 00:21:37,919
that you use for exploit

522
00:21:37,919 --> 00:21:42,000
so uh basically you just

523
00:21:42,080 --> 00:21:45,440
specify the uh the contract address

524
00:21:45,440 --> 00:21:47,360
which you want to

525
00:21:47,360 --> 00:21:48,400
call

526
00:21:48,400 --> 00:21:50,240
that's the first thing

527
00:21:50,240 --> 00:21:52,159
you do and then

528
00:21:52,159 --> 00:21:54,559
if you specified it you can think about

529
00:21:54,559 --> 00:21:56,240
this like an interface

530
00:21:56,240 --> 00:21:58,559
and then in the second call you can

531
00:21:58,559 --> 00:22:01,919
already call uh the other contract and

532
00:22:01,919 --> 00:22:04,240
this simple example works in most of the

533
00:22:04,240 --> 00:22:06,400
cases um

534
00:22:06,400 --> 00:22:10,000
so it's pretty much that and in this uh

535
00:22:10,000 --> 00:22:12,080
in this line we change the other

536
00:22:12,080 --> 00:22:16,320
contracts uh integer value to one

537
00:22:16,320 --> 00:22:18,559
let's see it in solidity

538
00:22:18,559 --> 00:22:20,559
um

539
00:22:20,559 --> 00:22:22,640
question does it get recorded because

540
00:22:22,640 --> 00:22:24,080
then

541
00:22:24,080 --> 00:22:27,440
everyone can look at this later what

542
00:22:27,440 --> 00:22:31,200
happened because if i compile this um

543
00:22:31,200 --> 00:22:33,919
smart contract this uh compiles into

544
00:22:33,919 --> 00:22:36,400
bytecode which can be transacted to

545
00:22:36,400 --> 00:22:39,120
either on the blockchain or you just use

546
00:22:39,120 --> 00:22:41,440
it in your javascript vm

547
00:22:41,440 --> 00:22:42,320
and

548
00:22:42,320 --> 00:22:46,240
you can deploy it inside your browser

549
00:22:46,240 --> 00:22:49,280
and then you are immediately able to uh

550
00:22:49,280 --> 00:22:52,240
call it so we have one deployed we also

551
00:22:52,240 --> 00:22:54,240
deploy the second

552
00:22:54,240 --> 00:22:57,679
we copy the smart contract address from

553
00:22:57,679 --> 00:23:00,240
the second to the first

554
00:23:00,240 --> 00:23:01,200
you

555
00:23:01,200 --> 00:23:02,159
set it

556
00:23:02,159 --> 00:23:05,840
and then we check what is the mind value

557
00:23:05,840 --> 00:23:09,200
which is a zero we set it to

558
00:23:09,200 --> 00:23:11,440
five just as a test

559
00:23:11,440 --> 00:23:13,440
uh

560
00:23:13,440 --> 00:23:15,120
yes

561
00:23:15,120 --> 00:23:17,679
and then now we can see it that is five

562
00:23:17,679 --> 00:23:19,280
i know you don't see it but you can

563
00:23:19,280 --> 00:23:21,600
trust me i'm an engineer

564
00:23:21,600 --> 00:23:23,280
uh and now we call it from the first

565
00:23:23,280 --> 00:23:26,480
contract and again we check it from the

566
00:23:26,480 --> 00:23:29,280
other one and we see that it did change

567
00:23:29,280 --> 00:23:31,440
so we could do the call from one

568
00:23:31,440 --> 00:23:33,840
contract to another so you can take it

569
00:23:33,840 --> 00:23:37,440
this code as a skeleton of your exploit

570
00:23:37,440 --> 00:23:38,640
and

571
00:23:38,640 --> 00:23:39,760
use it

572
00:23:39,760 --> 00:23:42,320
in a way you like

573
00:23:42,320 --> 00:23:43,279
so

574
00:23:43,279 --> 00:23:46,640
what else do we have here um

575
00:23:46,640 --> 00:23:48,799
let me check my notes that i haven't

576
00:23:48,799 --> 00:23:50,880
forgot anything

577
00:23:50,880 --> 00:23:52,960
yeah so uh

578
00:23:52,960 --> 00:23:56,080
like one of the key takeaways

579
00:23:56,080 --> 00:23:57,279
from this

580
00:23:57,279 --> 00:23:58,559
is that

581
00:23:58,559 --> 00:24:03,279
we are at web 2.5 definitely not web 3

582
00:24:03,279 --> 00:24:05,840
where everything is decentralized and

583
00:24:05,840 --> 00:24:08,880
really uh working quite well we are

584
00:24:08,880 --> 00:24:10,480
right now patching

585
00:24:10,480 --> 00:24:13,279
decentralized systems with centralized

586
00:24:13,279 --> 00:24:15,760
web 3

587
00:24:15,760 --> 00:24:18,799
hex basically and when this happens then

588
00:24:18,799 --> 00:24:21,360
issues like this

589
00:24:21,360 --> 00:24:22,880
can appear

590
00:24:22,880 --> 00:24:24,320
so

591
00:24:24,320 --> 00:24:26,320
i also wanted to show you will probably

592
00:24:26,320 --> 00:24:29,639
see it better

593
00:24:34,799 --> 00:24:37,600
so uh

594
00:24:39,840 --> 00:24:44,000
to those who are familiar with python

595
00:24:44,000 --> 00:24:47,039
this might be more friendly for you so i

596
00:24:47,039 --> 00:24:50,080
was mentioning that you can put together

597
00:24:50,080 --> 00:24:54,799
the ecdsa party vrs which is needed um

598
00:24:54,799 --> 00:24:58,159
for the receipt most

599
00:24:58,159 --> 00:25:01,520
smart contract uh logic is implementing

600
00:25:01,520 --> 00:25:03,919
the ec require call

601
00:25:03,919 --> 00:25:06,640
in a solidity but how do you prepare

602
00:25:06,640 --> 00:25:07,679
something

603
00:25:07,679 --> 00:25:09,600
for easy recover and make sure that

604
00:25:09,600 --> 00:25:11,840
whatever you

605
00:25:11,840 --> 00:25:14,960
ascend or or prepare here is an example

606
00:25:14,960 --> 00:25:17,679
of how you can use ec recover in

607
00:25:17,679 --> 00:25:20,000
solidity in this last line so this is

608
00:25:20,000 --> 00:25:22,480
the solidity code example

609
00:25:22,480 --> 00:25:24,480
and if you want to

610
00:25:24,480 --> 00:25:25,679
use

611
00:25:25,679 --> 00:25:26,400
the

612
00:25:26,400 --> 00:25:28,880
the correct way then you either use my

613
00:25:28,880 --> 00:25:30,400
code or just

614
00:25:30,400 --> 00:25:32,640
search for it and you will find it

615
00:25:32,640 --> 00:25:34,960
online but i wanted to show you an

616
00:25:34,960 --> 00:25:36,240
example

617
00:25:36,240 --> 00:25:38,960
how you can provide the correct values

618
00:25:38,960 --> 00:25:42,720
uh so basically we take the message we

619
00:25:42,720 --> 00:25:44,640
take the private key

620
00:25:44,640 --> 00:25:47,120
of the so you need to generate uh an

621
00:25:47,120 --> 00:25:49,200
ethereum a private key

622
00:25:49,200 --> 00:25:51,360
and just notice the public key near that

623
00:25:51,360 --> 00:25:54,480
if it's uh needed um then

624
00:25:54,480 --> 00:25:58,080
then we will encode this uh message so

625
00:25:58,080 --> 00:25:59,679
it can be used by

626
00:25:59,679 --> 00:26:04,159
v3 which is the web 3 um python module

627
00:26:04,159 --> 00:26:06,720
and it pretty much does most of the

628
00:26:06,720 --> 00:26:09,679
work for you and you can prepare

629
00:26:09,679 --> 00:26:10,799
the

630
00:26:10,799 --> 00:26:12,559
signatures

631
00:26:12,559 --> 00:26:15,840
you can also use this example in your

632
00:26:15,840 --> 00:26:17,679
back end if you want to build a bridge

633
00:26:17,679 --> 00:26:20,080
please don't do that but you can pretty

634
00:26:20,080 --> 00:26:20,880
much

635
00:26:20,880 --> 00:26:22,480
use a similar

636
00:26:22,480 --> 00:26:26,320
example and if you want to uh use uh the

637
00:26:26,320 --> 00:26:28,480
same thing the way around uh not just to

638
00:26:28,480 --> 00:26:30,880
generate it but recover like the ec

639
00:26:30,880 --> 00:26:33,919
recover from solidity then uh

640
00:26:33,919 --> 00:26:36,159
this this is at the end is the example

641
00:26:36,159 --> 00:26:38,480
on how you do it in python you pretty

642
00:26:38,480 --> 00:26:43,200
much just pass the hash and the vrs

643
00:26:43,600 --> 00:26:45,279
to to the

644
00:26:45,279 --> 00:26:48,159
call so

645
00:26:49,039 --> 00:26:51,200
that's how it looks like so basically if

646
00:26:51,200 --> 00:26:52,559
you

647
00:26:52,559 --> 00:26:56,559
want to create this receipt for yourself

648
00:26:56,559 --> 00:27:00,159
then you can just take the arguments

649
00:27:00,159 --> 00:27:01,039
and

650
00:27:01,039 --> 00:27:03,360
insert it into your transaction which

651
00:27:03,360 --> 00:27:07,440
you can put together with remix or

652
00:27:07,440 --> 00:27:10,720
web3js or node.js or whatever tool you

653
00:27:10,720 --> 00:27:13,600
are more familiar with

654
00:27:13,600 --> 00:27:16,600
okay

655
00:27:23,200 --> 00:27:26,399
so um possible solutions

656
00:27:26,399 --> 00:27:30,159
uh one solution uh to fix this and

657
00:27:30,159 --> 00:27:32,080
that's what the

658
00:27:32,080 --> 00:27:33,679
banana guys did

659
00:27:33,679 --> 00:27:34,640
they

660
00:27:34,640 --> 00:27:37,840
upgraded the smart contract

661
00:27:37,840 --> 00:27:38,960
and they

662
00:27:38,960 --> 00:27:41,600
uh basically put the chain id they wrote

663
00:27:41,600 --> 00:27:43,840
a function for chain id which you can

664
00:27:43,840 --> 00:27:48,080
query from solidity that's inbuilt uh or

665
00:27:48,080 --> 00:27:51,440
or you can use any other uniq id uh they

666
00:27:51,440 --> 00:27:53,039
add this to the receipt and when you

667
00:27:53,039 --> 00:27:56,320
send the receipt then uh it is checked

668
00:27:56,320 --> 00:27:58,640
on the smart contract that the received

669
00:27:58,640 --> 00:28:01,039
is actually meant to be used on that

670
00:28:01,039 --> 00:28:04,720
network on which you are using it what

671
00:28:04,720 --> 00:28:06,559
can be the problem the problem can be if

672
00:28:06,559 --> 00:28:09,279
you have another wrapped token uh

673
00:28:09,279 --> 00:28:10,640
deployed

674
00:28:10,640 --> 00:28:13,760
there is no real uh reason why you would

675
00:28:13,760 --> 00:28:15,760
uh no realistic reason why you would do

676
00:28:15,760 --> 00:28:16,480
that

677
00:28:16,480 --> 00:28:18,559
but still this is not

678
00:28:18,559 --> 00:28:20,640
the perfect solution

679
00:28:20,640 --> 00:28:22,399
but works

680
00:28:22,399 --> 00:28:24,159
in limited ways

681
00:28:24,159 --> 00:28:28,640
and the other solution i i see what is

682
00:28:28,640 --> 00:28:30,960
being implemented is that you use

683
00:28:30,960 --> 00:28:34,640
different keys uh on both sides so you

684
00:28:34,640 --> 00:28:35,840
can't uh

685
00:28:35,840 --> 00:28:37,440
you can't uh

686
00:28:37,440 --> 00:28:39,919
reply the same

687
00:28:39,919 --> 00:28:42,399
receipt because the keys are the

688
00:28:42,399 --> 00:28:44,799
designer keys won't be accepted by this

689
00:28:44,799 --> 00:28:47,679
managed contract that's again kinda

690
00:28:47,679 --> 00:28:48,720
heckish

691
00:28:48,720 --> 00:28:51,279
and then we have a an actual

692
00:28:51,279 --> 00:28:53,120
webster-like solution

693
00:28:53,120 --> 00:28:56,799
which is uh xcmp they originally wanted

694
00:28:56,799 --> 00:28:59,600
to call it icmp but you can guess what's

695
00:28:59,600 --> 00:29:02,000
the issue with that so they call this

696
00:29:02,000 --> 00:29:05,520
cross chain messaging protocol

697
00:29:05,520 --> 00:29:08,080
it is a it is a system it right now it

698
00:29:08,080 --> 00:29:10,559
mostly works in substrate

699
00:29:10,559 --> 00:29:12,720
like think about polka dot systems

700
00:29:12,720 --> 00:29:15,840
and you can send messages cross chain

701
00:29:15,840 --> 00:29:17,360
through that protocol

702
00:29:17,360 --> 00:29:19,039
um without

703
00:29:19,039 --> 00:29:21,520
needing a central bridge or a central

704
00:29:21,520 --> 00:29:23,840
system now we started to see some

705
00:29:23,840 --> 00:29:26,559
projects coming out who are implementing

706
00:29:26,559 --> 00:29:29,360
decentralized bridge systems

707
00:29:29,360 --> 00:29:30,320
uh

708
00:29:30,320 --> 00:29:32,799
yes if you know the whole thing there

709
00:29:32,799 --> 00:29:34,720
are atomic steps and other kind of

710
00:29:34,720 --> 00:29:38,559
tricky ideas but xcmp is something that

711
00:29:38,559 --> 00:29:41,440
is implementing the the

712
00:29:41,440 --> 00:29:44,080
messaging between uh blockchains right

713
00:29:44,080 --> 00:29:46,640
now mostly substrate based blockchains

714
00:29:46,640 --> 00:29:49,440
and if you are into rust i really

715
00:29:49,440 --> 00:29:52,320
recommend you to have a look into that

716
00:29:52,320 --> 00:29:54,320
because that's a lot of fun and you can

717
00:29:54,320 --> 00:29:56,480
also write smart contracts in rust which

718
00:29:56,480 --> 00:29:58,960
is way more fun than solidity which is

719
00:29:58,960 --> 00:30:03,039
kind of uh java javascript like lack of

720
00:30:03,039 --> 00:30:04,159
combination

721
00:30:04,159 --> 00:30:06,240
um yeah and of course the

722
00:30:06,240 --> 00:30:10,240
banana guys refilled the uh hot wallet

723
00:30:10,240 --> 00:30:12,000
and now

724
00:30:12,000 --> 00:30:14,640
they are in in balance so one banana

725
00:30:14,640 --> 00:30:17,679
versus one wrapped banana um they

726
00:30:17,679 --> 00:30:20,880
refilled of course after the uh bridge

727
00:30:20,880 --> 00:30:22,080
i

728
00:30:22,080 --> 00:30:25,279
so what did we see like we also had the

729
00:30:25,279 --> 00:30:26,240
xc

730
00:30:26,240 --> 00:30:27,919
infinity hack

731
00:30:27,919 --> 00:30:31,440
now why i want to talk about this

732
00:30:31,440 --> 00:30:33,279
even though i think i will be soon

733
00:30:33,279 --> 00:30:36,159
running out of time

734
00:30:36,159 --> 00:30:39,360
uh so uh why i think it's interesting

735
00:30:39,360 --> 00:30:43,200
because um this uh was done by

736
00:30:43,200 --> 00:30:44,960
um

737
00:30:44,960 --> 00:30:48,799
state level kind of actors and they used

738
00:30:48,799 --> 00:30:50,559
web to um

739
00:30:50,559 --> 00:30:52,320
exploit in uh

740
00:30:52,320 --> 00:30:53,840
that's what we know so they they're

741
00:30:53,840 --> 00:30:56,240
probably using web 2 kind of exploits

742
00:30:56,240 --> 00:30:58,399
they bridged enough notes

743
00:30:58,399 --> 00:31:00,880
and that they could do the 51 percent

744
00:31:00,880 --> 00:31:04,159
attack uh and they took over the running

745
00:31:04,159 --> 00:31:05,200
bridge

746
00:31:05,200 --> 00:31:09,760
and basically if you uh are 51 percent

747
00:31:09,760 --> 00:31:10,799
or more

748
00:31:10,799 --> 00:31:12,320
in the system

749
00:31:12,320 --> 00:31:13,679
you can uh

750
00:31:13,679 --> 00:31:16,240
you can do whatever you want and you can

751
00:31:16,240 --> 00:31:18,960
push your own transactions

752
00:31:18,960 --> 00:31:21,200
sadly it took three six days until they

753
00:31:21,200 --> 00:31:22,799
realized it so they didn't have anything

754
00:31:22,799 --> 00:31:24,960
that was monitoring uh for possible

755
00:31:24,960 --> 00:31:28,000
issues which is pretty long and yeah six

756
00:31:28,000 --> 00:31:30,840
days six hundred meals

757
00:31:30,840 --> 00:31:35,440
um again why i yeah uh why i

758
00:31:35,440 --> 00:31:37,039
speak about this because

759
00:31:37,039 --> 00:31:40,399
we are far from web three being perfect

760
00:31:40,399 --> 00:31:43,039
but we are heading towards that uh and

761
00:31:43,039 --> 00:31:45,760
yeah they just got recently uh hacked on

762
00:31:45,760 --> 00:31:49,200
discord it was a phishing attack so even

763
00:31:49,200 --> 00:31:51,760
if you have like

764
00:31:51,760 --> 00:31:52,559
the

765
00:31:52,559 --> 00:31:55,919
best blockchain project you still rely

766
00:31:55,919 --> 00:31:58,640
on other systems and

767
00:31:58,640 --> 00:32:00,880
what's the takeaway of this is that it

768
00:32:00,880 --> 00:32:03,039
is never enough just to audit for

769
00:32:03,039 --> 00:32:05,440
example the smart contract because most

770
00:32:05,440 --> 00:32:07,840
uh projects do that

771
00:32:07,840 --> 00:32:10,080
okay now we have the audit report and

772
00:32:10,080 --> 00:32:13,440
it's done by uh certik audit whatever

773
00:32:13,440 --> 00:32:16,480
companies uh like the the ones that are

774
00:32:16,480 --> 00:32:19,519
more focusing on the logo um and uh and

775
00:32:19,519 --> 00:32:21,919
then they get fished then they get uh

776
00:32:21,919 --> 00:32:24,799
bridged by old school techniques which i

777
00:32:24,799 --> 00:32:27,840
was learning when i was 13.

778
00:32:27,840 --> 00:32:30,640
another recent hack a couple of days ago

779
00:32:30,640 --> 00:32:32,080
uh

780
00:32:32,080 --> 00:32:34,559
that's that's a little bit trolling from

781
00:32:34,559 --> 00:32:36,799
me uh so sorry for the guys i know some

782
00:32:36,799 --> 00:32:42,480
of them uh but uh yeah it's a quantum um

783
00:32:42,480 --> 00:32:45,360
proof blockchain that's what the idea is

784
00:32:45,360 --> 00:32:47,919
and actually the uh the blockchain base

785
00:32:47,919 --> 00:32:50,960
is uh is implementing post quantum

786
00:32:50,960 --> 00:32:53,760
algorithms uh i looked into that and

787
00:32:53,760 --> 00:32:55,600
it's pretty cool but the problem was

788
00:32:55,600 --> 00:32:56,960
that they

789
00:32:56,960 --> 00:32:59,120
haven't gone uh

790
00:32:59,120 --> 00:33:01,679
through the the audit for example on the

791
00:33:01,679 --> 00:33:04,640
on their bridge so what happened is they

792
00:33:04,640 --> 00:33:05,760
have the

793
00:33:05,760 --> 00:33:06,880
quantum

794
00:33:06,880 --> 00:33:10,640
safe system and then they are hacked

795
00:33:10,640 --> 00:33:12,559
with the newtonian hacker

796
00:33:12,559 --> 00:33:14,000
so

797
00:33:14,000 --> 00:33:17,200
that's uh kind of ironic in many ways

798
00:33:17,200 --> 00:33:20,000
and they haven't really um gave us the

799
00:33:20,000 --> 00:33:21,360
info how they

800
00:33:21,360 --> 00:33:23,679
were hacked they said this will be uh

801
00:33:23,679 --> 00:33:26,080
there will be a release uh on the

802
00:33:26,080 --> 00:33:29,840
incident response what uh i know what i

803
00:33:29,840 --> 00:33:32,640
heard let's say is that uh the key is

804
00:33:32,640 --> 00:33:34,480
the private keys where bridge uh

805
00:33:34,480 --> 00:33:37,840
breached so someone got access to the

806
00:33:37,840 --> 00:33:39,760
private keys that were controlling the

807
00:33:39,760 --> 00:33:42,399
the bridge transactions

808
00:33:42,399 --> 00:33:43,279
so

809
00:33:43,279 --> 00:33:44,960
these are the final

810
00:33:44,960 --> 00:33:46,080
thoughts

811
00:33:46,080 --> 00:33:48,399
mostly

812
00:33:48,399 --> 00:33:49,760
so when you

813
00:33:49,760 --> 00:33:51,760
want to make sure that the project is

814
00:33:51,760 --> 00:33:53,600
secure then

815
00:33:53,600 --> 00:33:56,080
audit and pen test everything not just

816
00:33:56,080 --> 00:33:59,840
parts of it and it is not enough to

817
00:33:59,840 --> 00:34:03,600
go around and show your swaggy reports

818
00:34:03,600 --> 00:34:06,640
but the actual thing needs to be done

819
00:34:06,640 --> 00:34:08,719
and yeah

820
00:34:08,719 --> 00:34:11,040
we are hopefully heading to a more

821
00:34:11,040 --> 00:34:15,359
decentralized webster like systems

822
00:34:15,359 --> 00:34:18,960
if you uh have questions i do not know

823
00:34:18,960 --> 00:34:22,320
how we are with how much time we have

824
00:34:22,320 --> 00:34:23,280
okay

825
00:34:23,280 --> 00:34:24,879
uh thank you

826
00:34:24,879 --> 00:34:28,239
so if you want to reach out to me then

827
00:34:28,239 --> 00:34:31,280
you can find me directly on matrix you

828
00:34:31,280 --> 00:34:34,800
also find me on twitter if you want to

829
00:34:34,800 --> 00:34:36,960
have your project audited hopefully not

830
00:34:36,960 --> 00:34:39,440
just smart construct audited but to have

831
00:34:39,440 --> 00:34:40,399
the full

832
00:34:40,399 --> 00:34:42,800
scale pentas then you can send us a meal

833
00:34:42,800 --> 00:34:45,040
to hello at crucial that i

834
00:34:45,040 --> 00:34:49,679
if you want to play a hacking game cctf

835
00:34:49,679 --> 00:34:53,520
then you can join the cctf matrix.org

836
00:34:53,520 --> 00:34:56,320
actually in 10 minutes

837
00:34:56,320 --> 00:34:59,040
the cctf challenge is starting which we

838
00:34:59,040 --> 00:35:02,320
prepared for b sites what you can get is

839
00:35:02,320 --> 00:35:04,640
access to the cctf yacht which will

840
00:35:04,640 --> 00:35:08,800
definitely which will be the final um

841
00:35:08,800 --> 00:35:11,760
challenge and

842
00:35:11,760 --> 00:35:14,160
don't want to spoil that but uh we

843
00:35:14,160 --> 00:35:17,040
either do it again in uh dubai or

844
00:35:17,040 --> 00:35:19,760
singapore uh we already agreed on that

845
00:35:19,760 --> 00:35:20,560
and

846
00:35:20,560 --> 00:35:23,040
if you do not know what cctf is is a

847
00:35:23,040 --> 00:35:25,520
global hacking challenge for

848
00:35:25,520 --> 00:35:28,720
cryptocurrency hackers and we don't care

849
00:35:28,720 --> 00:35:31,119
about your name whoever you are you just

850
00:35:31,119 --> 00:35:35,040
play you uh get flex you collect points

851
00:35:35,040 --> 00:35:37,920
and then if you are in the top then you

852
00:35:37,920 --> 00:35:40,480
can join the finals and also in the

853
00:35:40,480 --> 00:35:42,240
finals you can

854
00:35:42,240 --> 00:35:45,040
come totally anonymously if you want

855
00:35:45,040 --> 00:35:47,280
you can wear hats and cover your face

856
00:35:47,280 --> 00:35:50,000
you don't care just enjoy have fun and

857
00:35:50,000 --> 00:35:54,880
learn crypto hacking in a legitimate way

858
00:35:54,880 --> 00:35:58,599
so thank you for listening

859
00:36:03,200 --> 00:36:06,960
okay six thank you

860
00:36:07,119 --> 00:36:11,880
any question from anybody please

861
00:36:15,520 --> 00:36:18,079
okay well the information is there so

862
00:36:18,079 --> 00:36:20,800
don't forget to join the

863
00:36:20,800 --> 00:36:22,560
hacking game

864
00:36:22,560 --> 00:36:24,839
challenge yourselves challenge everybody

865
00:36:24,839 --> 00:36:27,280
else uh we'll start the break in that

866
00:36:27,280 --> 00:36:29,200
case early

867
00:36:29,200 --> 00:36:31,440
please do

868
00:36:31,440 --> 00:36:34,960
note that the next presentation

869
00:36:34,960 --> 00:36:38,079
will be at 11 10 if you could be back

870
00:36:38,079 --> 00:36:41,150
for them please once again six thank you

871
00:36:41,150 --> 00:36:46,449
[Applause]

