1
00:00:12,150 --> 00:00:19,289
and now we are privileged again to have

2
00:00:14,459 --> 00:00:22,050
another<font color="#CCCCCC"> amazing speaker in fact you've</font>

3
00:00:19,289 --> 00:00:24,750
al-haram<font color="#E5E5E5"> was one</font><font color="#CCCCCC"> of the authors of</font>

4
00:00:22,050 --> 00:00:27,150
Spectre and meltdown<font color="#CCCCCC"> in terms of the</font>

5
00:00:24,750 --> 00:00:29,150
research and<font color="#E5E5E5"> the only Australian of that</font>

6
00:00:27,150 --> 00:00:31,500
list<font color="#E5E5E5"> and heels going to talk today about</font>

7
00:00:29,150 --> 00:00:33,870
<font color="#E5E5E5">speculative execution being considered</font>

8
00:00:31,500 --> 00:00:36,089
<font color="#E5E5E5">harmful and it's such a</font><font color="#CCCCCC"> low-key topic</font>

9
00:00:33,870 --> 00:00:38,070
speculative execution<font color="#CCCCCC"> considered harmful</font>

10
00:00:36,089 --> 00:00:40,830
<font color="#E5E5E5">but it has such significant impact so</font>

11
00:00:38,070 --> 00:00:43,100
let's all welcome<font color="#CCCCCC"> Ivar and we'll go from</font>

12
00:00:40,830 --> 00:00:43,100
<font color="#CCCCCC">there</font>

13
00:00:47,910 --> 00:00:52,169
thank you for the introduction<font color="#E5E5E5"> and it is</font>

14
00:00:50,460 --> 00:00:56,699
a pleasure<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> here thanks everyone</font>

15
00:00:52,170 --> 00:00:59,640
for coming<font color="#CCCCCC"> this was not I was</font><font color="#E5E5E5"> not the</font>

16
00:00:56,699 --> 00:01:04,769
<font color="#E5E5E5">only one to do this work there are a lot</font>

17
00:00:59,640 --> 00:01:07,920
of a coauthors or collaborators in fact

18
00:01:04,769 --> 00:01:10,460
we were<font color="#E5E5E5"> five</font><font color="#CCCCCC"> different research groups</font>

19
00:01:07,920 --> 00:01:13,470
<font color="#E5E5E5">that have found parts of these</font>

20
00:01:10,460 --> 00:01:16,199
vulnerabilities<font color="#CCCCCC"> each of them</font>

21
00:01:13,470 --> 00:01:20,640
independently<font color="#CCCCCC"> and I'll just introduce</font>

22
00:01:16,200 --> 00:01:24,330
them<font color="#CCCCCC"> yun</font><font color="#E5E5E5"> horn from</font><font color="#CCCCCC"> Google is probably</font>

23
00:01:20,640 --> 00:01:27,289
<font color="#E5E5E5">the smartest of us all he found both a</font>

24
00:01:24,330 --> 00:01:29,460
vulnerable these he<font color="#E5E5E5"> was the first one to</font>

25
00:01:27,289 --> 00:01:31,049
<font color="#E5E5E5">identify them the first one to exploit</font>

26
00:01:29,460 --> 00:01:35,479
them and the<font color="#E5E5E5"> first one to report those</font>

27
00:01:31,049 --> 00:01:38,640
<font color="#CCCCCC">to Intel a</font><font color="#E5E5E5"> another group</font><font color="#CCCCCC"> daniel grows</font>

28
00:01:35,479 --> 00:01:41,509
more asleep stefan mangar than the

29
00:01:38,640 --> 00:01:45,030
<font color="#E5E5E5">missile</font><font color="#CCCCCC"> sparks from the Gracchi</font>

30
00:01:41,509 --> 00:01:49,380
<font color="#CCCCCC">Technical</font><font color="#E5E5E5"> University they discovered</font>

31
00:01:45,030 --> 00:01:52,170
meltdown<font color="#CCCCCC"> they are probably</font><font color="#E5E5E5"> the strongest</font>

32
00:01:49,380 --> 00:01:54,449
research team in the area<font color="#CCCCCC"> of a micro</font>

33
00:01:52,170 --> 00:01:58,350
architectural attack that we currently

34
00:01:54,450 --> 00:02:02,090
<font color="#E5E5E5">have in</font><font color="#CCCCCC"> the world a burner has</font><font color="#E5E5E5"> Thomas a</font>

35
00:01:58,350 --> 00:02:06,048
pressure are both<font color="#E5E5E5"> a Intel</font><font color="#CCCCCC"> working the</font>

36
00:02:02,090 --> 00:02:08,910
security<font color="#CCCCCC"> company cyber us in</font><font color="#E5E5E5"> Germany</font>

37
00:02:06,049 --> 00:02:11,510
<font color="#E5E5E5">others fog is a private researcher he</font>

38
00:02:08,910 --> 00:02:15,209
does research<font color="#CCCCCC"> a just does hacking</font>

39
00:02:11,510 --> 00:02:17,670
publishes his results work a lot<font color="#E5E5E5"> in a in</font>

40
00:02:15,209 --> 00:02:21,030
the area of a<font color="#CCCCCC"> microarchitecture all</font>

41
00:02:17,670 --> 00:02:23,328
<font color="#CCCCCC">attacks</font><font color="#E5E5E5"> and our group was a Mike</font><font color="#CCCCCC"> Hamburg</font>

42
00:02:21,030 --> 00:02:25,890
<font color="#E5E5E5">daniel ganc in</font><font color="#CCCCCC"> pole culture and myself</font>

43
00:02:23,329 --> 00:02:27,840
<font color="#CCCCCC">for those who don't know the name pole</font>

44
00:02:25,890 --> 00:02:30,238
culture is the person<font color="#CCCCCC"> that first</font>

45
00:02:27,840 --> 00:02:31,980
published any results<font color="#E5E5E5"> on side channel</font>

46
00:02:30,239 --> 00:02:35,370
<font color="#E5E5E5">attack so is the first person to take a</font>

47
00:02:31,980 --> 00:02:38,540
and<font color="#CCCCCC"> i scope and</font><font color="#E5E5E5"> put it to a computer</font>

48
00:02:35,370 --> 00:02:42,209
<font color="#E5E5E5">while the computer</font><font color="#CCCCCC"> runs a</font><font color="#E5E5E5"> cryptography</font>

49
00:02:38,540 --> 00:02:44,010
decryption in that case a<font color="#CCCCCC"> Mike hump</font><font color="#E5E5E5"> work</font>

50
00:02:42,209 --> 00:02:46,950
from our perspective it's<font color="#CCCCCC"> the one that</font>

51
00:02:44,010 --> 00:02:50,040
<font color="#E5E5E5">came up</font><font color="#CCCCCC"> with a question and daniel ganc</font>

52
00:02:46,950 --> 00:02:51,988
in is<font color="#E5E5E5"> a brilliant young researcher he's</font>

53
00:02:50,040 --> 00:02:55,019
the person that decided<font color="#CCCCCC"> to check</font><font color="#E5E5E5"> what</font>

54
00:02:51,989 --> 00:02:58,110
sounds computers make while they decrypt

55
00:02:55,019 --> 00:03:02,159
<font color="#E5E5E5">data</font><font color="#CCCCCC"> managed</font><font color="#E5E5E5"> to show that acoustica</font>

56
00:02:58,110 --> 00:03:03,810
cryptanalysis works<font color="#CCCCCC"> and one</font><font color="#E5E5E5"> of the</font>

57
00:03:02,159 --> 00:03:06,390
<font color="#E5E5E5">questions that we are always asked is</font>

58
00:03:03,810 --> 00:03:11,010
how come no one found<font color="#E5E5E5"> these problems for</font>

59
00:03:06,390 --> 00:03:15,298
the last decade<font color="#CCCCCC"> or</font><font color="#E5E5E5"> so and suddenly five</font>

60
00:03:11,010 --> 00:03:17,760
different groups<font color="#E5E5E5"> find it and there are</font><font color="#CCCCCC"> a</font>

61
00:03:15,299 --> 00:03:20,519
lot<font color="#CCCCCC"> of conspiracy</font><font color="#E5E5E5"> theories</font><font color="#CCCCCC"> running</font><font color="#E5E5E5"> in on</font>

62
00:03:17,760 --> 00:03:25,470
twitter if you<font color="#E5E5E5"> look Intel always knew</font>

63
00:03:20,519 --> 00:03:27,150
about it that's the NSA and we did not

64
00:03:25,470 --> 00:03:30,959
<font color="#E5E5E5">really discover it and that problem</font>

65
00:03:27,150 --> 00:03:33,830
doesn't really exist<font color="#CCCCCC"> the answer is much</font>

66
00:03:30,959 --> 00:03:36,299
<font color="#E5E5E5">simpler than that we were all working</font><font color="#CCCCCC"> in</font>

67
00:03:33,830 --> 00:03:38,340
<font color="#CCCCCC">side channel on side channel attacks</font>

68
00:03:36,299 --> 00:03:42,420
<font color="#E5E5E5">this was a natural extension</font><font color="#CCCCCC"> of the last</font>

69
00:03:38,340 --> 00:03:44,909
four years<font color="#CCCCCC"> of work for most of us and we</font>

70
00:03:42,420 --> 00:03:47,548
were<font color="#CCCCCC"> just lucky that young one gave</font>

71
00:03:44,909 --> 00:03:49,170
<font color="#CCCCCC">Intel six months to disclose</font><font color="#E5E5E5"> everything</font>

72
00:03:47,549 --> 00:03:54,150
<font color="#E5E5E5">otherwise it would</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> been the</font><font color="#CCCCCC"> only</font>

73
00:03:49,170 --> 00:03:57,420
name here okay<font color="#E5E5E5"> so what</font><font color="#CCCCCC"> are we</font><font color="#E5E5E5"> talking</font>

74
00:03:54,150 --> 00:04:01,170
about<font color="#E5E5E5"> basically we have two different</font>

75
00:03:57,420 --> 00:04:04,230
attacks<font color="#E5E5E5"> one of them is Spectre which in</font>

76
00:04:01,170 --> 00:04:07,798
it exploits<font color="#E5E5E5"> a design flaw in most modern</font>

77
00:04:04,230 --> 00:04:11,609
processors<font color="#E5E5E5"> I will explain</font><font color="#CCCCCC"> more about</font><font color="#E5E5E5"> how</font>

78
00:04:07,799 --> 00:04:14,129
<font color="#CCCCCC">the attack works later and what we do is</font>

79
00:04:11,610 --> 00:04:15,840
that<font color="#E5E5E5"> we look at speculative execution</font>

80
00:04:14,129 --> 00:04:18,089
when the processor runs code

81
00:04:15,840 --> 00:04:20,340
speculatively assuming<font color="#CCCCCC"> the believing</font>

82
00:04:18,089 --> 00:04:22,200
that the program will go there<font color="#E5E5E5"> and that</font>

83
00:04:20,339 --> 00:04:26,010
leaves traces<font color="#E5E5E5"> and we exploit these</font>

84
00:04:22,200 --> 00:04:27,930
trances and<font color="#E5E5E5"> meltdown which is more</font>

85
00:04:26,010 --> 00:04:30,690
specific<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is a bad</font>

86
00:04:27,930 --> 00:04:33,110
although<font color="#E5E5E5"> Intel doesn't</font><font color="#CCCCCC"> acknowledge it is</font>

87
00:04:30,690 --> 00:04:37,050
a bug in<font color="#E5E5E5"> Intel implementation of a</font>

88
00:04:33,110 --> 00:04:39,570
memory protection it exists also in<font color="#E5E5E5"> some</font>

89
00:04:37,050 --> 00:04:41,909
<font color="#CCCCCC">ARM processors and the result</font><font color="#E5E5E5"> is that</font>

90
00:04:39,570 --> 00:04:44,370
even though memory is protected from

91
00:04:41,909 --> 00:04:50,070
reading we<font color="#CCCCCC"> can indirectly read the data</font>

92
00:04:44,370 --> 00:04:53,310
<font color="#E5E5E5">from there from the attacker perspective</font>

93
00:04:50,070 --> 00:04:56,370
<font color="#E5E5E5">meltdown is more potent it's extremely</font>

94
00:04:53,310 --> 00:04:58,940
easy to exploit it we can read the<font color="#E5E5E5"> whole</font>

95
00:04:56,370 --> 00:05:01,080
<font color="#E5E5E5">memory of the processor or the computer</font>

96
00:04:58,940 --> 00:05:04,800
anything that is there

97
00:05:01,080 --> 00:05:08,370
we can find it from a<font color="#E5E5E5"> specter is a</font>

98
00:05:04,800 --> 00:05:11,069
little bit more complex<font color="#CCCCCC"> to exploit</font><font color="#E5E5E5"> but</font>

99
00:05:08,370 --> 00:05:13,289
it it will<font color="#E5E5E5"> probably remain it is</font>

100
00:05:11,069 --> 00:05:16,440
probably<font color="#E5E5E5"> much harder to fix and will</font>

101
00:05:13,289 --> 00:05:19,650
remain for longer with<font color="#CCCCCC"> us and it allows</font>

102
00:05:16,440 --> 00:05:21,090
<font color="#CCCCCC">us</font><font color="#E5E5E5"> to read data from other processes it</font>

103
00:05:19,650 --> 00:05:24,539
allows us<font color="#CCCCCC"> to bypass</font><font color="#E5E5E5"> language based</font>

104
00:05:21,090 --> 00:05:28,770
security<font color="#E5E5E5"> so the protection</font><font color="#CCCCCC"> that it</font>

105
00:05:24,539 --> 00:05:32,759
provides<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> the main thing that we use</font>

106
00:05:28,770 --> 00:05:35,400
is micro architectural channels what

107
00:05:32,759 --> 00:05:38,490
these are basically when we have a

108
00:05:35,400 --> 00:05:41,599
program<font color="#CCCCCC"> and it executes</font><font color="#E5E5E5"> it leaves some</font>

109
00:05:38,490 --> 00:05:45,599
traces in<font color="#E5E5E5"> the process or States and</font>

110
00:05:41,599 --> 00:05:48,900
these footprints<font color="#E5E5E5"> that it leaves in</font><font color="#CCCCCC"> just</font>

111
00:05:45,599 --> 00:05:51,030
a<font color="#E5E5E5"> a product of the fact</font><font color="#CCCCCC"> that the</font>

112
00:05:48,900 --> 00:05:53,219
processor<font color="#E5E5E5"> tries to optimize the</font>

113
00:05:51,030 --> 00:05:56,159
<font color="#E5E5E5">performance and guess what the program</font>

114
00:05:53,219 --> 00:05:59,580
going to do and that's information that

115
00:05:56,159 --> 00:06:01,770
stays there and as the<font color="#E5E5E5"> program</font><font color="#CCCCCC"> continues</font>

116
00:05:59,580 --> 00:06:05,849
to execute<font color="#E5E5E5"> it leaves more footprints</font><font color="#CCCCCC"> and</font>

117
00:06:01,770 --> 00:06:08,940
we have known for probably<font color="#CCCCCC"> 15 years</font><font color="#E5E5E5"> now</font>

118
00:06:05,849 --> 00:06:11,190
that if we<font color="#E5E5E5"> analyze these traces we can</font>

119
00:06:08,940 --> 00:06:15,090
learn information<font color="#E5E5E5"> on what's happening</font>

120
00:06:11,190 --> 00:06:17,039
there<font color="#E5E5E5"> and this this gives us information</font>

121
00:06:15,090 --> 00:06:19,888
so<font color="#E5E5E5"> we have a program running it sends us</font>

122
00:06:17,039 --> 00:06:21,870
information<font color="#E5E5E5"> the technical name for</font><font color="#CCCCCC"> this</font>

123
00:06:19,889 --> 00:06:25,740
is a channel<font color="#E5E5E5"> and information channel or</font>

124
00:06:21,870 --> 00:06:27,659
communication channel and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> when we</font>

125
00:06:25,740 --> 00:06:29,539
analyze those when<font color="#CCCCCC"> we work with</font><font color="#E5E5E5"> those we</font>

126
00:06:27,659 --> 00:06:32,310
distinguish<font color="#CCCCCC"> between two types of channel</font>

127
00:06:29,539 --> 00:06:35,128
the<font color="#CCCCCC"> covert channels are intentional we</font>

128
00:06:32,310 --> 00:06:37,440
have a sender that effects the<font color="#CCCCCC"> processor</font>

129
00:06:35,129 --> 00:06:40,139
<font color="#E5E5E5">state and the receiver that you reads</font>

130
00:06:37,440 --> 00:06:42,210
the process of<font color="#E5E5E5"> state and we have</font><font color="#CCCCCC"> a side</font>

131
00:06:40,139 --> 00:06:44,159
channel that is inadvertent we have a

132
00:06:42,210 --> 00:06:47,818
sender that<font color="#E5E5E5"> doesn't want to send but</font>

133
00:06:44,159 --> 00:06:52,349
does it by the way it works and the

134
00:06:47,819 --> 00:06:54,690
receiver<font color="#E5E5E5"> receives the data and for many</font>

135
00:06:52,349 --> 00:06:57,060
years<font color="#CCCCCC"> coverage channels</font><font color="#E5E5E5"> a were</font>

136
00:06:54,690 --> 00:06:59,250
interesting for<font color="#E5E5E5"> military</font><font color="#CCCCCC"> people that</font>

137
00:06:57,060 --> 00:07:01,560
wanted to<font color="#E5E5E5"> run multiple security levels</font>

138
00:06:59,250 --> 00:07:04,169
on the same computer but<font color="#E5E5E5"> anyone no one</font>

139
00:07:01,560 --> 00:07:05,909
else was really<font color="#E5E5E5"> interested</font><font color="#CCCCCC"> in those side</font>

140
00:07:04,169 --> 00:07:07,680
channels were more<font color="#E5E5E5"> is more interesting</font>

141
00:07:05,909 --> 00:07:10,289
<font color="#E5E5E5">because we</font><font color="#CCCCCC"> can use them to</font>

142
00:07:07,680 --> 00:07:13,130
<font color="#E5E5E5">you find cryptographic keys we can</font><font color="#CCCCCC"> use</font>

143
00:07:10,289 --> 00:07:16,680
them to<font color="#E5E5E5"> break a SLR we can use them to</font>

144
00:07:13,130 --> 00:07:18,330
get keystrokes a information<font color="#CCCCCC"> everything</font>

145
00:07:16,680 --> 00:07:20,220
<font color="#CCCCCC">that we want we can use</font><font color="#E5E5E5"> the side channel</font>

146
00:07:18,330 --> 00:07:24,479
<font color="#E5E5E5">so most of the focus was in snipe</font>

147
00:07:20,220 --> 00:07:26,669
channels<font color="#CCCCCC"> specular and melt them in my</font>

148
00:07:24,479 --> 00:07:30,030
<font color="#E5E5E5">opinion change this because we really</font>

149
00:07:26,669 --> 00:07:33,270
use cover channels here before we go to

150
00:07:30,030 --> 00:07:35,429
those<font color="#E5E5E5"> just an example of what sort of</font>

151
00:07:33,270 --> 00:07:38,430
<font color="#E5E5E5">what are these channels how do they work</font>

152
00:07:35,430 --> 00:07:40,620
<font color="#CCCCCC">and the channel that we will use is a</font>

153
00:07:38,430 --> 00:07:42,660
<font color="#CCCCCC">cache channel and what it exploits is</font>

154
00:07:40,620 --> 00:07:46,590
the difference of speed between<font color="#E5E5E5"> the</font>

155
00:07:42,660 --> 00:07:49,050
memory<font color="#E5E5E5"> and the processor and we have</font>

156
00:07:46,590 --> 00:07:52,770
what<font color="#E5E5E5"> happens is over years processors</font>

157
00:07:49,050 --> 00:07:54,509
have become really<font color="#CCCCCC"> fast</font><font color="#E5E5E5"> and memory has</font>

158
00:07:52,770 --> 00:07:57,419
<font color="#CCCCCC">become faster</font><font color="#E5E5E5"> but not</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> same rate</font>

159
00:07:54,509 --> 00:07:59,340
<font color="#E5E5E5">so when the processor reads data it has</font>

160
00:07:57,419 --> 00:08:02,008
<font color="#CCCCCC">to</font><font color="#E5E5E5"> wait</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this data to come to the</font>

161
00:07:59,340 --> 00:08:04,229
process<font color="#E5E5E5"> and if the processor needs that</font>

162
00:08:02,009 --> 00:08:09,900
data again it would<font color="#E5E5E5"> have to wait for</font><font color="#CCCCCC"> it</font>

163
00:08:04,229 --> 00:08:11,940
<font color="#E5E5E5">again so to fix this</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> designers put</font>

164
00:08:09,900 --> 00:08:14,250
a small<font color="#E5E5E5"> Bank of memory called the cache</font>

165
00:08:11,940 --> 00:08:16,409
between the processor and<font color="#CCCCCC"> the memory and</font>

166
00:08:14,250 --> 00:08:18,150
the cache because<font color="#E5E5E5"> it is fair</font><font color="#CCCCCC"> if smaller</font>

167
00:08:16,409 --> 00:08:21,389
and because<font color="#CCCCCC"> this different technology it</font>

168
00:08:18,150 --> 00:08:24,270
is<font color="#E5E5E5"> much</font><font color="#CCCCCC"> faster</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> now what we</font><font color="#E5E5E5"> can do is</font>

169
00:08:21,389 --> 00:08:27,360
when the processor reads the data<font color="#E5E5E5"> a copy</font>

170
00:08:24,270 --> 00:08:29,460
is left in the cache and the next time

171
00:08:27,360 --> 00:08:33,089
the processor needs<font color="#CCCCCC"> that data it</font><font color="#E5E5E5"> can get</font>

172
00:08:29,460 --> 00:08:37,348
it much<font color="#CCCCCC"> faster but the fact that this</font>

173
00:08:33,089 --> 00:08:39,209
data is<font color="#E5E5E5"> in the cache is some trace of</font>

174
00:08:37,349 --> 00:08:42,539
<font color="#E5E5E5">all</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> my footprint of what happened</font>

175
00:08:39,208 --> 00:08:45,779
earlier<font color="#CCCCCC"> if we can find what data is in</font>

176
00:08:42,539 --> 00:08:47,850
the cache<font color="#E5E5E5"> we know what the different</font>

177
00:08:45,779 --> 00:08:50,370
<font color="#E5E5E5">other programs have accessed</font><font color="#CCCCCC"> before we</font>

178
00:08:47,850 --> 00:08:52,829
access method and this is what we

179
00:08:50,370 --> 00:08:55,110
exploited for<font color="#E5E5E5"> the past four years</font><font color="#CCCCCC"> we</font>

180
00:08:52,829 --> 00:08:56,849
exploited caches<font color="#E5E5E5"> exploited databases</font>

181
00:08:55,110 --> 00:08:59,130
contention exploited everything as

182
00:08:56,850 --> 00:09:03,120
<font color="#CCCCCC">forgetting</font><font color="#E5E5E5"> every aspect of the processor</font>

183
00:08:59,130 --> 00:09:07,680
almost all of them<font color="#E5E5E5"> and the design</font>

184
00:09:03,120 --> 00:09:09,959
attacks from those now the other<font color="#E5E5E5"> aspect</font>

185
00:09:07,680 --> 00:09:11,399
is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> speculative execution and for</font>

186
00:09:09,959 --> 00:09:12,599
<font color="#E5E5E5">speculative execution we need to</font>

187
00:09:11,399 --> 00:09:14,190
understand a<font color="#CCCCCC"> bit more</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> how</font>

188
00:09:12,600 --> 00:09:18,010
processors

189
00:09:14,190 --> 00:09:20,560
so if we look<font color="#E5E5E5"> at our</font><font color="#CCCCCC"> processor</font><font color="#E5E5E5"> we have</font>

190
00:09:18,010 --> 00:09:22,810
the machine<font color="#CCCCCC"> code that something that</font><font color="#E5E5E5"> run</font>

191
00:09:20,560 --> 00:09:25,209
<font color="#CCCCCC">a program that runs</font><font color="#E5E5E5"> and when we think of</font>

192
00:09:22,810 --> 00:09:28,209
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> of it as executing the</font>

193
00:09:25,210 --> 00:09:30,250
instructions one<font color="#CCCCCC"> by one and</font><font color="#E5E5E5"> for in doing</font>

194
00:09:28,210 --> 00:09:32,110
and processing<font color="#CCCCCC"> the one by</font><font color="#E5E5E5"> one when one</font>

195
00:09:30,250 --> 00:09:35,410
completes the next one starts<font color="#CCCCCC"> and so</font>

196
00:09:32,110 --> 00:09:37,000
forth<font color="#CCCCCC"> and this is the way</font><font color="#E5E5E5"> that we think</font>

197
00:09:35,410 --> 00:09:39,069
<font color="#E5E5E5">about processors because that's the way</font>

198
00:09:37,000 --> 00:09:41,040
that it easy<font color="#E5E5E5"> to analyze or understand</font>

199
00:09:39,070 --> 00:09:45,670
what's going on

200
00:09:41,040 --> 00:09:48,339
however a the each instruction<font color="#CCCCCC"> the die</font>

201
00:09:45,670 --> 00:09:51,719
<font color="#E5E5E5">itself consists of multiple steps and in</font>

202
00:09:48,340 --> 00:09:55,330
<font color="#E5E5E5">modern</font><font color="#CCCCCC"> processors we have 30 to 40 steps</font>

203
00:09:51,720 --> 00:09:57,940
<font color="#CCCCCC">we'll look at</font><font color="#E5E5E5"> five here so in this</font>

204
00:09:55,330 --> 00:10:00,570
<font color="#CCCCCC">example I have</font><font color="#E5E5E5"> five steps first we need</font>

205
00:09:57,940 --> 00:10:02,830
to fetch the instruction from memory

206
00:10:00,570 --> 00:10:06,280
<font color="#E5E5E5">then we need to understand what the</font>

207
00:10:02,830 --> 00:10:08,860
instruction is get the arguments that<font color="#CCCCCC"> it</font>

208
00:10:06,280 --> 00:10:10,990
processes<font color="#E5E5E5"> do</font><font color="#CCCCCC"> whatever it does add the</font>

209
00:10:08,860 --> 00:10:13,420
arguments<font color="#E5E5E5"> multiply whatever we want and</font>

210
00:10:10,990 --> 00:10:16,780
then write the data back<font color="#E5E5E5"> and by this</font>

211
00:10:13,420 --> 00:10:20,050
<font color="#CCCCCC">time</font><font color="#E5E5E5"> the instruction completes and if we</font>

212
00:10:16,780 --> 00:10:23,980
look<font color="#E5E5E5"> at that this takes five cycles to</font>

213
00:10:20,050 --> 00:10:27,339
execute an instruction<font color="#E5E5E5"> and that's not</font>

214
00:10:23,980 --> 00:10:29,050
efficient on the<font color="#E5E5E5"> other hand we</font><font color="#CCCCCC"> know that</font>

215
00:10:27,340 --> 00:10:31,330
if you look at those<font color="#E5E5E5"> each instruction</font>

216
00:10:29,050 --> 00:10:32,800
use different<font color="#CCCCCC"> unit the Fatima unit that</font>

217
00:10:31,330 --> 00:10:34,200
fetches<font color="#E5E5E5"> instruction for memory is</font>

218
00:10:32,800 --> 00:10:37,270
different<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the unit that does the</font>

219
00:10:34,200 --> 00:10:40,000
calculation of<font color="#E5E5E5"> computation so we can use</font>

220
00:10:37,270 --> 00:10:41,880
them in parallel<font color="#E5E5E5"> and that's pipelining</font>

221
00:10:40,000 --> 00:10:44,260
is the solution<font color="#CCCCCC"> that does that</font><font color="#E5E5E5"> and</font>

222
00:10:41,880 --> 00:10:47,530
<font color="#E5E5E5">basically what we do is we execute</font>

223
00:10:44,260 --> 00:10:50,430
multiple<font color="#E5E5E5"> instructions in parallel</font><font color="#CCCCCC"> so we</font>

224
00:10:47,530 --> 00:10:53,860
first fetch the<font color="#E5E5E5"> first instruction</font><font color="#CCCCCC"> and</font>

225
00:10:50,430 --> 00:10:55,930
then in the<font color="#CCCCCC"> next cycle</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the code the</font>

226
00:10:53,860 --> 00:10:59,140
first<font color="#E5E5E5"> instruction and fetch the second</font>

227
00:10:55,930 --> 00:11:01,569
one and then<font color="#E5E5E5"> we</font><font color="#CCCCCC"> proceed to prote and get</font>

228
00:10:59,140 --> 00:11:04,449
the arguments for the first decode the

229
00:11:01,570 --> 00:11:06,010
second<font color="#E5E5E5"> fetch the third and continue that</font>

230
00:11:04,450 --> 00:11:08,830
way until<font color="#E5E5E5"> the first instruction</font>

231
00:11:06,010 --> 00:11:10,689
<font color="#E5E5E5">completes the second and so forth so</font>

232
00:11:08,830 --> 00:11:13,420
basically what we<font color="#E5E5E5"> have we have sort of a</font>

233
00:11:10,690 --> 00:11:18,540
diagonal front on the execution<font color="#E5E5E5"> of the</font>

234
00:11:13,420 --> 00:11:18,540
program<font color="#E5E5E5"> and as it progresses the program</font>

235
00:11:18,939 --> 00:11:25,879
and this allows<font color="#CCCCCC"> us to a</font><font color="#E5E5E5"> compute one</font>

236
00:11:22,699 --> 00:11:27,649
instruction per<font color="#CCCCCC"> cycle</font><font color="#E5E5E5"> on average so we</font>

237
00:11:25,879 --> 00:11:30,139
<font color="#CCCCCC">have five instructions completely</font>

238
00:11:27,649 --> 00:11:32,449
running<font color="#CCCCCC"> parallel</font><font color="#E5E5E5"> pipe a stage for each</font>

239
00:11:30,139 --> 00:11:36,220
on average<font color="#CCCCCC"> we</font><font color="#E5E5E5"> get one</font><font color="#CCCCCC"> instruction</font><font color="#E5E5E5"> then</font>

240
00:11:32,449 --> 00:11:38,839
per cycle<font color="#E5E5E5"> but this creates</font><font color="#CCCCCC"> some problem</font>

241
00:11:36,220 --> 00:11:40,189
for example<font color="#CCCCCC"> we have depend there</font>

242
00:11:38,839 --> 00:11:42,649
problems with<font color="#E5E5E5"> dependencies between</font>

243
00:11:40,189 --> 00:11:45,589
instructions<font color="#CCCCCC"> if for example the first</font>

244
00:11:42,649 --> 00:11:48,859
instructions instruction does a division

245
00:11:45,589 --> 00:11:51,799
and<font color="#E5E5E5"> this next instruction will</font><font color="#CCCCCC"> takes the</font>

246
00:11:48,859 --> 00:11:55,489
result of this division<font color="#E5E5E5"> and needs to</font>

247
00:11:51,799 --> 00:11:57,169
<font color="#E5E5E5">calculate</font><font color="#CCCCCC"> on it then</font><font color="#E5E5E5"> we can't start</font>

248
00:11:55,489 --> 00:12:01,369
executing the second instruction<font color="#E5E5E5"> before</font>

249
00:11:57,169 --> 00:12:05,239
<font color="#E5E5E5">we completed the first one so what the</font>

250
00:12:01,369 --> 00:12:07,519
processor<font color="#CCCCCC"> does in that case is what we</font>

251
00:12:05,239 --> 00:12:10,539
call a out<font color="#E5E5E5"> of order</font><font color="#CCCCCC"> execution it</font>

252
00:12:07,519 --> 00:12:13,489
<font color="#E5E5E5">actually executes the instructions in</font>

253
00:12:10,539 --> 00:12:15,829
whenever the data<font color="#E5E5E5"> is available</font><font color="#CCCCCC"> rather</font>

254
00:12:13,489 --> 00:12:18,559
than just executing them by the order

255
00:12:15,829 --> 00:12:20,449
<font color="#E5E5E5">that the program executes them so in</font>

256
00:12:18,559 --> 00:12:25,009
this example<font color="#E5E5E5"> we'll start</font><font color="#CCCCCC"> will fetch the</font>

257
00:12:20,449 --> 00:12:26,689
instruction do the execution<font color="#E5E5E5"> and now the</font>

258
00:12:25,009 --> 00:12:28,189
second instruction<font color="#E5E5E5"> needs to wait for the</font>

259
00:12:26,689 --> 00:12:31,579
results<font color="#E5E5E5"> of the first one so</font><font color="#CCCCCC"> we block it</font>

260
00:12:28,189 --> 00:12:33,589
<font color="#E5E5E5">but everything else continues finish the</font>

261
00:12:31,579 --> 00:12:37,910
first instruction and then we can

262
00:12:33,589 --> 00:12:39,470
continue<font color="#E5E5E5"> moving forward now the</font>

263
00:12:37,910 --> 00:12:40,669
important<font color="#CCCCCC"> thing is that</font><font color="#E5E5E5"> happens is that</font>

264
00:12:39,470 --> 00:12:42,019
at<font color="#E5E5E5"> this stage we</font><font color="#CCCCCC"> got the third</font>

265
00:12:40,669 --> 00:12:45,169
instruction<font color="#CCCCCC"> to complete before the</font>

266
00:12:42,019 --> 00:12:47,019
second one so the processor<font color="#E5E5E5"> instead of</font>

267
00:12:45,169 --> 00:12:49,789
<font color="#E5E5E5">really completing in storing the</font><font color="#CCCCCC"> data</font>

268
00:12:47,019 --> 00:12:54,439
store<font color="#E5E5E5"> this</font><font color="#CCCCCC"> information in the temporary</font>

269
00:12:49,789 --> 00:12:56,839
buffer and it will actually the

270
00:12:54,439 --> 00:12:58,910
instruction will wait until the<font color="#CCCCCC"> previous</font>

271
00:12:56,839 --> 00:13:02,480
instruction<font color="#E5E5E5"> completed and then all</font><font color="#CCCCCC"> of</font>

272
00:12:58,910 --> 00:13:05,209
them complete together so what we have

273
00:13:02,480 --> 00:13:06,949
<font color="#E5E5E5">again is we have our a front that is</font>

274
00:13:05,209 --> 00:13:09,138
<font color="#CCCCCC">going we don't</font><font color="#E5E5E5"> know multiple</font>

275
00:13:06,949 --> 00:13:11,179
instructions with run at<font color="#E5E5E5"> different</font>

276
00:13:09,139 --> 00:13:15,049
stages<font color="#CCCCCC"> and behind that</font><font color="#E5E5E5"> we have what</font>

277
00:13:11,179 --> 00:13:17,959
completed<font color="#CCCCCC"> execution</font><font color="#E5E5E5"> and now we have the</font>

278
00:13:15,049 --> 00:13:20,419
question<font color="#E5E5E5"> why did</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> process or not</font>

279
00:13:17,959 --> 00:13:21,599
<font color="#E5E5E5">finish the execution of the first third</font>

280
00:13:20,419 --> 00:13:24,300
instruction<font color="#E5E5E5"> before the</font>

281
00:13:21,600 --> 00:13:28,620
<font color="#E5E5E5">at the second one and the answer</font><font color="#CCCCCC"> is</font>

282
00:13:24,300 --> 00:13:32,189
<font color="#CCCCCC">answer to that is that</font><font color="#E5E5E5"> it would create a</font>

283
00:13:28,620 --> 00:13:36,389
problem<font color="#E5E5E5"> we were at this stage now what</font>

284
00:13:32,190 --> 00:13:38,910
happens if B is<font color="#CCCCCC"> 0 B</font><font color="#E5E5E5"> is 0 the first</font>

285
00:13:36,389 --> 00:13:40,560
<font color="#CCCCCC">instruction should fail that means that</font>

286
00:13:38,910 --> 00:13:43,170
neither the second nor the third<font color="#E5E5E5"> should</font>

287
00:13:40,560 --> 00:13:46,170
execute<font color="#E5E5E5"> so basically we have to</font><font color="#CCCCCC"> have</font>

288
00:13:43,170 --> 00:13:48,180
<font color="#CCCCCC">wait with all instructions</font><font color="#E5E5E5"> until</font><font color="#CCCCCC"> the all</font>

289
00:13:46,170 --> 00:13:51,599
preceding instruction<font color="#E5E5E5"> finished before</font><font color="#CCCCCC"> we</font>

290
00:13:48,180 --> 00:13:56,430
can accept the<font color="#E5E5E5"> results and what the</font>

291
00:13:51,600 --> 00:13:58,860
processor does<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> is sorry</font>

292
00:13:56,430 --> 00:14:00,689
what that means<font color="#E5E5E5"> first is that all out of</font>

293
00:13:58,860 --> 00:14:03,000
<font color="#E5E5E5">order</font><font color="#CCCCCC"> execution is speculative in nature</font>

294
00:14:00,690 --> 00:14:06,949
we<font color="#CCCCCC"> don't we start executing instruction</font>

295
00:14:03,000 --> 00:14:10,259
<font color="#CCCCCC">before we really know that they will be</font>

296
00:14:06,949 --> 00:14:12,269
<font color="#CCCCCC">needed and to</font><font color="#E5E5E5"> solve the problem of</font>

297
00:14:10,259 --> 00:14:14,209
<font color="#E5E5E5">speculative execution what the processor</font>

298
00:14:12,269 --> 00:14:17,940
does<font color="#E5E5E5"> is when it reaches to this stage</font>

299
00:14:14,209 --> 00:14:20,790
finds out<font color="#CCCCCC"> that B 0 the device</font><font color="#E5E5E5"> should</font>

300
00:14:17,940 --> 00:14:23,160
fail<font color="#E5E5E5"> it just abandons these instructions</font>

301
00:14:20,790 --> 00:14:25,829
throws the temporary results that it may

302
00:14:23,160 --> 00:14:28,560
have calculated<font color="#E5E5E5"> and continues working</font>

303
00:14:25,829 --> 00:14:31,170
<font color="#E5E5E5">and</font><font color="#CCCCCC"> an continues handling via the</font>

304
00:14:28,560 --> 00:14:33,810
exception so the behavior<font color="#CCCCCC"> is</font><font color="#E5E5E5"> if the</font>

305
00:14:31,170 --> 00:14:37,529
instructions<font color="#E5E5E5"> were executed one by one</font>

306
00:14:33,810 --> 00:14:43,130
sequentially but we got the<font color="#E5E5E5"> performance</font>

307
00:14:37,529 --> 00:14:47,459
a benefit of<font color="#E5E5E5"> using</font><font color="#CCCCCC"> out of all pipelining</font>

308
00:14:43,130 --> 00:14:51,810
<font color="#E5E5E5">now this mechanism is also used used for</font>

309
00:14:47,459 --> 00:14:53,459
<font color="#E5E5E5">handling branches</font><font color="#CCCCCC"> the problem with</font>

310
00:14:51,810 --> 00:14:55,410
branches is that we<font color="#E5E5E5"> don't really know</font>

311
00:14:53,459 --> 00:14:59,279
<font color="#CCCCCC">the process</font><font color="#E5E5E5"> or starts executing it</font>

312
00:14:55,410 --> 00:15:01,230
reaches the point good thing reaches the

313
00:14:59,279 --> 00:15:05,490
branch instruction<font color="#CCCCCC"> and this branch</font>

314
00:15:01,230 --> 00:15:07,589
instruction<font color="#CCCCCC"> depends on a data that has</font>

315
00:15:05,490 --> 00:15:09,199
not been<font color="#E5E5E5"> calculated yet</font><font color="#CCCCCC"> because the</font>

316
00:15:07,589 --> 00:15:12,449
front hasn't<font color="#E5E5E5"> there already the green</font>

317
00:15:09,199 --> 00:15:15,000
<font color="#CCCCCC">area</font><font color="#E5E5E5"> hasn't reached there yet so what</font>

318
00:15:12,449 --> 00:15:18,258
<font color="#E5E5E5">does the processor due process</font><font color="#CCCCCC"> will ask</font>

319
00:15:15,000 --> 00:15:20,970
<font color="#E5E5E5">a fortune-teller what the branch</font><font color="#CCCCCC"> will do</font>

320
00:15:18,259 --> 00:15:23,149
we have the fortune teller they look at

321
00:15:20,970 --> 00:15:23,149
<font color="#CCCCCC">their a</font>

322
00:15:23,500 --> 00:15:30,740
<font color="#E5E5E5">the crystal ball we have tells us the</font>

323
00:15:28,220 --> 00:15:33,050
branch will go to the right and<font color="#E5E5E5"> left</font>

324
00:15:30,740 --> 00:15:35,600
sorry<font color="#CCCCCC"> depends on which side I look at</font>

325
00:15:33,050 --> 00:15:38,300
them so the process of continuous

326
00:15:35,600 --> 00:15:40,370
executing and at some stage<font color="#CCCCCC"> it will</font>

327
00:15:38,300 --> 00:15:43,550
reach<font color="#E5E5E5"> to the branch with</font><font color="#CCCCCC"> the data and</font>

328
00:15:40,370 --> 00:15:46,190
<font color="#CCCCCC">we'll know what the</font><font color="#E5E5E5"> result is so now we</font>

329
00:15:43,550 --> 00:15:48,740
can test<font color="#E5E5E5"> whether they a prediction was</font>

330
00:15:46,190 --> 00:15:51,470
correct<font color="#E5E5E5"> and if it was correct everything</font>

331
00:15:48,740 --> 00:15:54,620
as well and we<font color="#E5E5E5"> can continue executing if</font>

332
00:15:51,470 --> 00:15:56,960
it<font color="#E5E5E5"> wasn't</font><font color="#CCCCCC"> correct</font><font color="#E5E5E5"> what happens what it</font>

333
00:15:54,620 --> 00:15:59,450
does is it goes to<font color="#E5E5E5"> continuous execution</font>

334
00:15:56,960 --> 00:16:00,950
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the other branch</font><font color="#E5E5E5"> other side of the</font>

335
00:15:59,450 --> 00:16:04,760
branch<font color="#E5E5E5"> and abandoning</font><font color="#CCCCCC"> everything that</font>

336
00:16:00,950 --> 00:16:07,450
has been calculated<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the way and the</font>

337
00:16:04,760 --> 00:16:10,370
<font color="#CCCCCC">nice thing about this mechanism</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

338
00:16:07,450 --> 00:16:13,190
we can't decide which way the branch

339
00:16:10,370 --> 00:16:15,980
will go before<font color="#E5E5E5"> we have the data so we</font>

340
00:16:13,190 --> 00:16:17,750
speculative execution<font color="#CCCCCC"> if we did a</font>

341
00:16:15,980 --> 00:16:21,320
correct prediction we<font color="#E5E5E5"> gain performance</font>

342
00:16:17,750 --> 00:16:24,230
<font color="#E5E5E5">benefits if we had a misprediction</font><font color="#CCCCCC"> than</font>

343
00:16:21,320 --> 00:16:27,350
<font color="#E5E5E5">in the worst case we just didn't get any</font>

344
00:16:24,230 --> 00:16:30,530
performance benefits we<font color="#CCCCCC"> just execute as</font>

345
00:16:27,350 --> 00:16:34,160
if we<font color="#E5E5E5"> as if we just</font><font color="#CCCCCC"> didn't do the</font>

346
00:16:30,530 --> 00:16:36,860
prediction so we lost<font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> of power for</font>

347
00:16:34,160 --> 00:16:41,630
calculation<font color="#E5E5E5"> but a performance remains</font>

348
00:16:36,860 --> 00:16:44,780
high technically we have a two different

349
00:16:41,630 --> 00:16:47,900
<font color="#CCCCCC">branch prediction mechanisms we have</font>

350
00:16:44,780 --> 00:16:50,930
<font color="#E5E5E5">mobile to</font><font color="#CCCCCC"> important ones</font><font color="#E5E5E5"> one of them</font>

351
00:16:47,900 --> 00:16:52,490
uses the branch history<font color="#CCCCCC"> it checks on</font>

352
00:16:50,930 --> 00:16:54,829
conditional branches whether they were

353
00:16:52,490 --> 00:16:56,330
taken or not and we<font color="#CCCCCC"> have a fortune</font>

354
00:16:54,830 --> 00:16:58,310
teller<font color="#CCCCCC"> that tells us whether the</font><font color="#E5E5E5"> next</font>

355
00:16:56,330 --> 00:17:01,460
access to this branch will<font color="#E5E5E5"> be taken or</font>

356
00:16:58,310 --> 00:17:03,319
not and then we have the branch target

357
00:17:01,460 --> 00:17:05,300
buffer which<font color="#E5E5E5"> is used for indirect</font>

358
00:17:03,320 --> 00:17:07,160
branches so if we have a branch based<font color="#E5E5E5"> on</font>

359
00:17:05,300 --> 00:17:08,629
<font color="#E5E5E5">one register or even a return</font>

360
00:17:07,160 --> 00:17:11,150
<font color="#CCCCCC">instruction which goes to somewhere</font>

361
00:17:08,630 --> 00:17:14,240
which the<font color="#E5E5E5"> program doesn't know</font>

362
00:17:11,150 --> 00:17:16,910
<font color="#CCCCCC">a priori we're Google and this</font><font color="#E5E5E5"> is a</font>

363
00:17:14,240 --> 00:17:18,800
different<font color="#CCCCCC"> predictor that just tells us</font>

364
00:17:16,910 --> 00:17:21,770
from here the program<font color="#E5E5E5"> will</font><font color="#CCCCCC"> continue at a</font>

365
00:17:18,800 --> 00:17:24,169
different location<font color="#CCCCCC"> so this is the</font>

366
00:17:21,770 --> 00:17:29,860
<font color="#CCCCCC">background we have speculative execution</font>

367
00:17:24,170 --> 00:17:34,250
how it works<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> cash footprints</font>

368
00:17:29,860 --> 00:17:36,260
<font color="#E5E5E5">so what our discovery the main discovery</font>

369
00:17:34,250 --> 00:17:38,180
with this both<font color="#CCCCCC"> spectre and meltdown that</font>

370
00:17:36,260 --> 00:17:40,370
<font color="#CCCCCC">is that whenever</font><font color="#E5E5E5"> we have abandoned</font>

371
00:17:38,180 --> 00:17:43,580
calculation what is abandoned<font color="#CCCCCC"> is the</font>

372
00:17:40,370 --> 00:17:45,560
nominal results of the calculation<font color="#CCCCCC"> what</font>

373
00:17:43,580 --> 00:17:49,990
is not<font color="#E5E5E5"> the</font><font color="#CCCCCC"> abandoned</font><font color="#E5E5E5"> is the footprint</font>

374
00:17:45,560 --> 00:17:54,590
<font color="#E5E5E5">this calculation left in the processor</font>

375
00:17:49,990 --> 00:17:58,160
so the the<font color="#CCCCCC"> specter</font><font color="#E5E5E5"> and meltdown are</font>

376
00:17:54,590 --> 00:18:01,250
techniques<font color="#E5E5E5"> that use our techniques for</font>

377
00:17:58,160 --> 00:18:03,500
extracting these footprints<font color="#E5E5E5"> and finding</font>

378
00:18:01,250 --> 00:18:08,840
out<font color="#E5E5E5"> data on what's going on in the</font>

379
00:18:03,500 --> 00:18:10,580
computer<font color="#CCCCCC"> and the distinguishing feature</font>

380
00:18:08,840 --> 00:18:12,590
between the meltdown exploits a

381
00:18:10,580 --> 00:18:16,100
instruction that should have faulted<font color="#CCCCCC"> or</font>

382
00:18:12,590 --> 00:18:18,860
the<font color="#E5E5E5"> truth that fail but something like</font>

383
00:18:16,100 --> 00:18:24,790
<font color="#E5E5E5">execute</font><font color="#CCCCCC"> after them and Specter exploits</font>

384
00:18:18,860 --> 00:18:29,600
the branch prediction<font color="#E5E5E5"> the attacks</font>

385
00:18:24,790 --> 00:18:31,100
<font color="#E5E5E5">basically work on to an attacker</font><font color="#CCCCCC"> that</font>

386
00:18:29,600 --> 00:18:33,740
runs on unprivileged<font color="#E5E5E5"> code where</font>

387
00:18:31,100 --> 00:18:36,770
<font color="#CCCCCC">unprivileged could be a user process</font>

388
00:18:33,740 --> 00:18:38,740
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> access kernel or one process</font>

389
00:18:36,770 --> 00:18:41,120
trying to<font color="#CCCCCC"> access another</font><font color="#E5E5E5"> process or</font>

390
00:18:38,740 --> 00:18:46,160
<font color="#CCCCCC">javascript code trying to access the</font>

391
00:18:41,120 --> 00:18:48,229
data that is in<font color="#CCCCCC"> the browser</font><font color="#E5E5E5"> and what the</font>

392
00:18:46,160 --> 00:18:51,800
attacker does it finds a piece<font color="#CCCCCC"> of code</font>

393
00:18:48,230 --> 00:18:55,300
that we call a gadget<font color="#E5E5E5"> that the attacker</font>

394
00:18:51,800 --> 00:18:58,550
can control the input<font color="#E5E5E5"> to that gadget</font><font color="#CCCCCC"> and</font>

395
00:18:55,300 --> 00:19:02,750
<font color="#CCCCCC">data the gadget causes sends information</font>

396
00:18:58,550 --> 00:19:04,220
<font color="#E5E5E5">over a channel and so so what the</font>

397
00:19:02,750 --> 00:19:05,990
attacker does is called<font color="#CCCCCC"> speculative</font>

398
00:19:04,220 --> 00:19:08,300
execution of this<font color="#CCCCCC"> gadget with the input</font>

399
00:19:05,990 --> 00:19:11,510
the attacker controls and the and then

400
00:19:08,300 --> 00:19:15,040
<font color="#CCCCCC">learns what the attacker what the what</font>

401
00:19:11,510 --> 00:19:18,500
the gadget leaks through<font color="#CCCCCC"> a</font><font color="#E5E5E5"> conversion</font>

402
00:19:15,040 --> 00:19:20,290
how does this work in practice<font color="#E5E5E5"> first</font>

403
00:19:18,500 --> 00:19:24,520
<font color="#E5E5E5">we'll look at meltdown</font>

404
00:19:20,290 --> 00:19:26,710
so the typical<font color="#E5E5E5"> code for meltdown</font><font color="#CCCCCC"> is two</font>

405
00:19:24,520 --> 00:19:28,800
lines<font color="#E5E5E5"> usually</font><font color="#CCCCCC"> you write it in machine</font>

406
00:19:26,710 --> 00:19:32,650
<font color="#CCCCCC">code but it will be easier to</font><font color="#E5E5E5"> see it in</font>

407
00:19:28,800 --> 00:19:36,550
<font color="#CCCCCC">C the first one the reference is the</font>

408
00:19:32,650 --> 00:19:39,790
pointer<font color="#E5E5E5"> and the second one takes the</font>

409
00:19:36,550 --> 00:19:43,389
value of<font color="#E5E5E5"> read from</font><font color="#CCCCCC"> that from that</font>

410
00:19:39,790 --> 00:19:47,830
<font color="#E5E5E5">pointer x 256</font><font color="#CCCCCC"> and the reference is an</font>

411
00:19:43,390 --> 00:19:52,210
array with that index<font color="#CCCCCC"> and the gadget</font>

412
00:19:47,830 --> 00:19:54,100
here<font color="#E5E5E5"> is the second line and</font><font color="#CCCCCC"> now we'll</font>

413
00:19:52,210 --> 00:19:58,690
<font color="#E5E5E5">look at how this works</font><font color="#CCCCCC"> so we have our</font>

414
00:19:54,100 --> 00:20:01,179
program<font color="#E5E5E5"> our address space of the of the</font>

415
00:19:58,690 --> 00:20:03,120
process<font color="#CCCCCC"> and before meltdown and</font><font color="#E5E5E5"> the</font>

416
00:20:01,180 --> 00:20:06,670
<font color="#CCCCCC">address space was divided into</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> parts</font>

417
00:20:03,120 --> 00:20:09,070
<font color="#CCCCCC">the left part is the user space</font><font color="#E5E5E5"> so where</font>

418
00:20:06,670 --> 00:20:12,040
all the data<font color="#E5E5E5"> that the user process can</font>

419
00:20:09,070 --> 00:20:14,439
access the right side is<font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> dry</font>

420
00:20:12,040 --> 00:20:16,360
space<font color="#E5E5E5"> which is protected so it is mapped</font>

421
00:20:14,440 --> 00:20:19,030
<font color="#E5E5E5">to the same address space but the user</font>

422
00:20:16,360 --> 00:20:21,010
cannot<font color="#CCCCCC"> access it</font><font color="#E5E5E5"> only called running in</font>

423
00:20:19,030 --> 00:20:22,540
<font color="#E5E5E5">proven high</font><font color="#CCCCCC"> privilege mode</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> code</font>

424
00:20:21,010 --> 00:20:24,270
<font color="#E5E5E5">running within the kernel</font><font color="#CCCCCC"> level within</font>

425
00:20:22,540 --> 00:20:28,960
the<font color="#E5E5E5"> operating system can access that</font>

426
00:20:24,270 --> 00:20:34,620
<font color="#E5E5E5">location and now we look at having a</font>

427
00:20:28,960 --> 00:20:34,620
cache in<font color="#CCCCCC"> the system and we start</font><font color="#E5E5E5"> with</font>

428
00:20:36,900 --> 00:20:44,320
beautiful so we'll start with a pointer

429
00:20:41,650 --> 00:20:46,690
that<font color="#CCCCCC"> points somewhere in memory both of</font>

430
00:20:44,320 --> 00:20:49,689
these locations<font color="#CCCCCC"> are cached</font><font color="#E5E5E5"> and we have</font>

431
00:20:46,690 --> 00:20:52,840
the array<font color="#E5E5E5"> that is not mapped in it is</font>

432
00:20:49,690 --> 00:20:54,580
not cached at the moment<font color="#E5E5E5"> and let's look</font>

433
00:20:52,840 --> 00:20:57,310
<font color="#E5E5E5">at what the executions do not just looks</font>

434
00:20:54,580 --> 00:20:59,290
like<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> thing we do is with the</font>

435
00:20:57,310 --> 00:21:03,429
<font color="#CCCCCC">reference a pointer</font><font color="#E5E5E5"> and get some value</font>

436
00:20:59,290 --> 00:21:06,600
<font color="#E5E5E5">from memory and then we use this to</font>

437
00:21:03,430 --> 00:21:09,130
<font color="#E5E5E5">point to somewhere inside the array and</font>

438
00:21:06,600 --> 00:21:12,879
<font color="#E5E5E5">access this data and that means that</font>

439
00:21:09,130 --> 00:21:14,950
this data comes to the cache<font color="#E5E5E5"> this is the</font>

440
00:21:12,880 --> 00:21:18,210
way<font color="#E5E5E5"> that this code works no problem</font><font color="#CCCCCC"> in</font>

441
00:21:14,950 --> 00:21:20,650
here<font color="#E5E5E5"> right beautiful</font>

442
00:21:18,210 --> 00:21:22,990
so<font color="#E5E5E5"> now we'll go</font><font color="#CCCCCC"> to a different</font><font color="#E5E5E5"> scenario</font>

443
00:21:20,650 --> 00:21:25,120
in<font color="#E5E5E5"> this and</font><font color="#CCCCCC"> in the different scenario</font>

444
00:21:22,990 --> 00:21:27,160
the pointer points to<font color="#CCCCCC"> a location</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

445
00:21:25,120 --> 00:21:29,110
address<font color="#E5E5E5"> space</font><font color="#CCCCCC"> of the kernel so</font>

446
00:21:27,160 --> 00:21:32,110
<font color="#E5E5E5">it's location</font><font color="#CCCCCC"> that the user should not</font>

447
00:21:29,110 --> 00:21:34,090
be able<font color="#E5E5E5"> to read the data from this</font>

448
00:21:32,110 --> 00:21:37,929
location<font color="#E5E5E5"> this location is happened to</font><font color="#CCCCCC"> be</font>

449
00:21:34,090 --> 00:21:41,080
<font color="#E5E5E5">cached and now what we do is we do the</font>

450
00:21:37,930 --> 00:21:44,050
same thing<font color="#E5E5E5"> we access the reference the</font>

451
00:21:41,080 --> 00:21:47,260
<font color="#E5E5E5">pointer at this stage what the processor</font>

452
00:21:44,050 --> 00:21:49,330
<font color="#CCCCCC">does is two</font><font color="#E5E5E5"> things it first it accesses</font>

453
00:21:47,260 --> 00:21:51,670
the data and in<font color="#E5E5E5"> parallel with</font><font color="#CCCCCC"> that it</font>

454
00:21:49,330 --> 00:21:54,159
checks<font color="#CCCCCC"> whether the user has</font><font color="#E5E5E5"> access can</font>

455
00:21:51,670 --> 00:21:56,470
access this<font color="#CCCCCC"> data and it will take</font><font color="#E5E5E5"> it</font>

456
00:21:54,160 --> 00:21:59,730
some time<font color="#E5E5E5"> to find out that the user does</font>

457
00:21:56,470 --> 00:22:02,110
not<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> allowed to</font><font color="#CCCCCC"> read this data</font>

458
00:21:59,730 --> 00:22:03,490
while<font color="#E5E5E5"> the user is not allowed we</font>

459
00:22:02,110 --> 00:22:09,159
speculatively<font color="#E5E5E5"> execute the next</font>

460
00:22:03,490 --> 00:22:11,500
instruction<font color="#E5E5E5"> the next instruction is use</font>

461
00:22:09,160 --> 00:22:14,410
the<font color="#E5E5E5"> data that we</font><font color="#CCCCCC"> got from that memory</font><font color="#E5E5E5"> to</font>

462
00:22:11,500 --> 00:22:20,740
a address<font color="#E5E5E5"> the location inside our array</font>

463
00:22:14,410 --> 00:22:22,900
and get that into Y<font color="#CCCCCC"> now this will happen</font>

464
00:22:20,740 --> 00:22:26,800
<font color="#E5E5E5">and at some stage</font><font color="#CCCCCC"> the processor will</font>

465
00:22:22,900 --> 00:22:27,310
realize<font color="#CCCCCC"> that it was</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> it has made a</font>

466
00:22:26,800 --> 00:22:29,110
mistake

467
00:22:27,310 --> 00:22:31,240
it shouldn't have allowed<font color="#E5E5E5"> this axis it</font>

468
00:22:29,110 --> 00:22:33,429
will abandon the<font color="#CCCCCC"> value of I will not</font>

469
00:22:31,240 --> 00:22:37,240
change the<font color="#CCCCCC"> value of y will not change</font>

470
00:22:33,430 --> 00:22:39,430
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we'll get the trap and here comes a</font>

471
00:22:37,240 --> 00:22:41,770
<font color="#CCCCCC">meltdown</font><font color="#E5E5E5"> attack we have</font><font color="#CCCCCC"> the meltdown</font>

472
00:22:39,430 --> 00:22:44,410
attacker now the meltdown attacker does

473
00:22:41,770 --> 00:22:47,650
<font color="#E5E5E5">this very simple</font><font color="#CCCCCC"> thing it tries to</font><font color="#E5E5E5"> read</font>

474
00:22:44,410 --> 00:22:50,040
one<font color="#E5E5E5"> location from the array and measure</font>

475
00:22:47,650 --> 00:22:52,750
how<font color="#E5E5E5"> long it takes for the data to come</font>

476
00:22:50,040 --> 00:22:55,000
to the ring<font color="#E5E5E5"> to</font><font color="#CCCCCC"> reach</font><font color="#E5E5E5"> out along States to</font>

477
00:22:52,750 --> 00:22:57,190
do this reading<font color="#E5E5E5"> and in this case this</font>

478
00:22:55,000 --> 00:22:59,860
data was<font color="#CCCCCC"> not cached so the</font><font color="#E5E5E5"> read was slow</font>

479
00:22:57,190 --> 00:23:04,450
and then<font color="#CCCCCC"> it tries another</font><font color="#E5E5E5"> location and</font>

480
00:22:59,860 --> 00:23:06,490
again it will<font color="#E5E5E5"> be slow only when it tries</font>

481
00:23:04,450 --> 00:23:10,090
the location<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> have already</font>

482
00:23:06,490 --> 00:23:12,910
<font color="#E5E5E5">brought to the cache earlier this thread</font>

483
00:23:10,090 --> 00:23:14,770
<font color="#E5E5E5">will be faced in fast and when the read</font>

484
00:23:12,910 --> 00:23:17,110
is fast<font color="#CCCCCC"> we know what the value what the</font>

485
00:23:14,770 --> 00:23:19,540
index that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> accessed our they array in</font>

486
00:23:17,110 --> 00:23:22,449
and therefore we can<font color="#E5E5E5"> find out the value</font>

487
00:23:19,540 --> 00:23:24,460
<font color="#E5E5E5">of I and this value of I comes from the</font>

488
00:23:22,450 --> 00:23:28,750
kernel space<font color="#E5E5E5"> so we can read data from</font>

489
00:23:24,460 --> 00:23:31,810
<font color="#E5E5E5">the kernel this is basic meltdown attack</font>

490
00:23:28,750 --> 00:23:35,149
there are some<font color="#E5E5E5"> complications in the init</font>

491
00:23:31,810 --> 00:23:37,219
if<font color="#E5E5E5"> you want to actually</font><font color="#CCCCCC"> implement it</font>

492
00:23:35,149 --> 00:23:39,589
first thing you need<font color="#E5E5E5"> to handle the fact</font>

493
00:23:37,219 --> 00:23:43,429
that the processes already<font color="#E5E5E5"> died</font>

494
00:23:39,589 --> 00:23:45,289
<font color="#E5E5E5">and so you need</font><font color="#CCCCCC"> to have some mechanism</font>

495
00:23:43,429 --> 00:23:47,869
<font color="#E5E5E5">that doesn't kill me</font><font color="#CCCCCC"> to keep your</font>

496
00:23:45,289 --> 00:23:52,279
process<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are several ways of doing</font>

497
00:23:47,869 --> 00:23:54,439
that<font color="#E5E5E5"> one is to catch</font><font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> we can</font>

498
00:23:52,279 --> 00:23:57,799
do that in UNIX<font color="#CCCCCC"> or at least in UNIX you</font>

499
00:23:54,440 --> 00:24:00,499
can do it easily<font color="#CCCCCC"> and the other way is to</font>

500
00:23:57,799 --> 00:24:04,479
use<font color="#CCCCCC"> a intel has a beautiful</font><font color="#E5E5E5"> feature</font>

501
00:24:00,499 --> 00:24:07,999
called<font color="#E5E5E5"> the transactional memory</font><font color="#CCCCCC"> t6</font><font color="#E5E5E5"> and</font>

502
00:24:04,479 --> 00:24:09,950
what t6 does is that it tries<font color="#CCCCCC"> to execute</font>

503
00:24:07,999 --> 00:24:11,839
<font color="#E5E5E5">access and to execute some instructions</font>

504
00:24:09,950 --> 00:24:14,450
and<font color="#CCCCCC"> if it fails</font><font color="#E5E5E5"> it failed restores the</font>

505
00:24:11,839 --> 00:24:16,099
status and goes back<font color="#E5E5E5"> and the beautiful</font>

506
00:24:14,450 --> 00:24:17,929
<font color="#CCCCCC">thing about</font><font color="#E5E5E5"> it is that if it gets an</font>

507
00:24:16,099 --> 00:24:19,399
interrupt while executing it just goes

508
00:24:17,929 --> 00:24:21,950
<font color="#CCCCCC">back and says</font><font color="#E5E5E5"> over oops</font>

509
00:24:19,399 --> 00:24:25,758
I couldn't execute this transaction<font color="#E5E5E5"> so</font>

510
00:24:21,950 --> 00:24:27,679
we start a transaction<font color="#E5E5E5"> do this code it</font>

511
00:24:25,759 --> 00:24:32,690
fails and<font color="#CCCCCC"> we know that we can continue</font>

512
00:24:27,679 --> 00:24:34,399
running<font color="#E5E5E5"> the other thing is that</font><font color="#CCCCCC"> Intel</font>

513
00:24:32,690 --> 00:24:38,799
has some mechanism which we don't know

514
00:24:34,399 --> 00:24:45,379
why they do it<font color="#E5E5E5"> that at some stage in</font>

515
00:24:38,799 --> 00:24:46,999
<font color="#CCCCCC">here when it finds</font><font color="#E5E5E5"> out that the</font>

516
00:24:45,379 --> 00:24:51,589
instruction should be dropped<font color="#E5E5E5"> it also</font>

517
00:24:46,999 --> 00:24:55,940
resets the value of I to<font color="#CCCCCC"> zero so in some</font>

518
00:24:51,589 --> 00:24:59,330
<font color="#E5E5E5">cases what we will read from here will</font>

519
00:24:55,940 --> 00:25:01,729
be<font color="#E5E5E5"> the value of is being</font><font color="#CCCCCC"> zero and the</font>

520
00:24:59,330 --> 00:25:03,978
<font color="#E5E5E5">true the problem is that we never know</font>

521
00:25:01,729 --> 00:25:07,129
<font color="#E5E5E5">whether the zero that will read is the</font>

522
00:25:03,979 --> 00:25:10,489
real value<font color="#CCCCCC"> or or not</font><font color="#E5E5E5"> so the solution is</font>

523
00:25:07,129 --> 00:25:12,289
try<font color="#E5E5E5"> to read it</font><font color="#CCCCCC"> 2,000 times if one of</font>

524
00:25:10,489 --> 00:25:13,909
them is not<font color="#E5E5E5"> the</font><font color="#CCCCCC"> zero you find that we</font>

525
00:25:12,289 --> 00:25:19,249
<font color="#CCCCCC">found the</font><font color="#E5E5E5"> value if</font><font color="#CCCCCC"> the all of them are</font>

526
00:25:13,909 --> 00:25:21,600
<font color="#E5E5E5">zero it's probably zero</font><font color="#CCCCCC"> in there so</font><font color="#E5E5E5"> this</font>

527
00:25:19,249 --> 00:25:24,130
<font color="#E5E5E5">is</font><font color="#CCCCCC"> meltin</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> spec</font>

528
00:25:21,600 --> 00:25:27,639
<font color="#CCCCCC">Spectre is two variants</font><font color="#E5E5E5"> one for each</font>

529
00:25:24,130 --> 00:25:29,590
branch predictor so for the<font color="#E5E5E5"> first</font>

530
00:25:27,640 --> 00:25:33,460
variant<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> typical code this code</font>

531
00:25:29,590 --> 00:25:36,639
is found either explicitly in<font color="#E5E5E5"> C</font>

532
00:25:33,460 --> 00:25:39,340
programming<font color="#E5E5E5"> or implicitly in problems</font>

533
00:25:36,640 --> 00:25:43,480
that<font color="#E5E5E5"> can check up for</font><font color="#CCCCCC"> array bound access</font>

534
00:25:39,340 --> 00:25:46,600
and what this does what<font color="#CCCCCC"> disgust does is</font>

535
00:25:43,480 --> 00:25:49,690
very<font color="#E5E5E5"> simple it takes an index</font><font color="#CCCCCC"> to an</font>

536
00:25:46,600 --> 00:25:52,840
array<font color="#E5E5E5"> checks that it is within the array</font>

537
00:25:49,690 --> 00:25:58,720
bound then if it is it takes the value

538
00:25:52,840 --> 00:26:00,790
that the index may point<font color="#CCCCCC"> to and accesses</font>

539
00:25:58,720 --> 00:26:05,910
a different array<font color="#E5E5E5"> again with the value</font>

540
00:26:00,790 --> 00:26:09,220
times 256<font color="#E5E5E5"> and again the gadget is here</font>

541
00:26:05,910 --> 00:26:12,910
now how do<font color="#E5E5E5"> you expect</font><font color="#CCCCCC"> air attacks that</font>

542
00:26:09,220 --> 00:26:15,070
works the first<font color="#E5E5E5"> thing we do is we call</font>

543
00:26:12,910 --> 00:26:17,230
this code we execute it with the<font color="#E5E5E5"> Knicks</font>

544
00:26:15,070 --> 00:26:20,980
<font color="#E5E5E5">with legal value of</font><font color="#CCCCCC"> X within</font><font color="#E5E5E5"> the array</font>

545
00:26:17,230 --> 00:26:23,860
and again let's look<font color="#E5E5E5"> at our memory we</font>

546
00:26:20,980 --> 00:26:25,990
have all the<font color="#E5E5E5"> elements in memory and we</font>

547
00:26:23,860 --> 00:26:28,719
also have a<font color="#E5E5E5"> secret data that some secret</font>

548
00:26:25,990 --> 00:26:31,480
<font color="#E5E5E5">data that we want</font><font color="#CCCCCC"> to read and the first</font>

549
00:26:28,720 --> 00:26:34,470
thing we do is compare the value of x

550
00:26:31,480 --> 00:26:37,510
with the<font color="#E5E5E5"> length of the array if it is</font>

551
00:26:34,470 --> 00:26:40,120
smaller<font color="#E5E5E5"> than the length of the array we</font>

552
00:26:37,510 --> 00:26:43,570
read the value from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> array this is</font>

553
00:26:40,120 --> 00:26:47,979
used as<font color="#CCCCCC"> the pointer</font><font color="#E5E5E5"> to the second array</font>

554
00:26:43,570 --> 00:26:52,720
and we can<font color="#E5E5E5"> connect and we got everything</font>

555
00:26:47,980 --> 00:26:55,780
<font color="#E5E5E5">vs. works nicely when we do that with</font><font color="#CCCCCC"> a</font>

556
00:26:52,720 --> 00:26:59,380
<font color="#E5E5E5">real with a value within the range</font>

557
00:26:55,780 --> 00:27:02,980
within the array our branch predictor

558
00:26:59,380 --> 00:27:05,890
learns that the value that<font color="#E5E5E5"> we used is</font>

559
00:27:02,980 --> 00:27:07,750
winning the array and she knows<font color="#CCCCCC"> that the</font>

560
00:27:05,890 --> 00:27:13,170
branch was<font color="#CCCCCC"> not taken we have</font><font color="#E5E5E5"> not skipped</font>

561
00:27:07,750 --> 00:27:17,970
the code of the gadget<font color="#E5E5E5"> okay</font>

562
00:27:13,170 --> 00:27:20,880
so now let's look<font color="#E5E5E5"> at the same thing with</font>

563
00:27:17,970 --> 00:27:25,740
<font color="#E5E5E5">a</font><font color="#CCCCCC"> cache we have the</font><font color="#E5E5E5"> secret cache we have</font>

564
00:27:20,880 --> 00:27:30,720
X cached<font color="#E5E5E5"> and the rest is not and we</font><font color="#CCCCCC"> have</font>

565
00:27:25,740 --> 00:27:34,700
our attacker<font color="#CCCCCC"> calls now with the value</font>

566
00:27:30,720 --> 00:27:38,460
that<font color="#CCCCCC"> is large much larger than the array</font>

567
00:27:34,700 --> 00:27:40,740
at this stage what<font color="#E5E5E5"> will happen will</font>

568
00:27:38,460 --> 00:27:42,570
start executing<font color="#E5E5E5"> the testing</font><font color="#CCCCCC"> the</font>

569
00:27:40,740 --> 00:27:44,370
condition but because<font color="#E5E5E5"> our alien is</font><font color="#CCCCCC"> not</font>

570
00:27:42,570 --> 00:27:49,919
cached<font color="#CCCCCC"> it will take some time for this</font>

571
00:27:44,370 --> 00:27:52,169
if<font color="#E5E5E5"> statement to execute while we bring</font>

572
00:27:49,920 --> 00:27:53,760
this<font color="#E5E5E5"> data from the cache</font><font color="#CCCCCC"> we need to know</font>

573
00:27:52,170 --> 00:27:56,340
whether what the processor wants<font color="#E5E5E5"> to know</font>

574
00:27:53,760 --> 00:27:59,640
whether<font color="#E5E5E5"> to</font><font color="#CCCCCC"> continue to inside the branch</font>

575
00:27:56,340 --> 00:28:00,689
<font color="#E5E5E5">or to go outside</font><font color="#CCCCCC"> consults</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> our</font>

576
00:27:59,640 --> 00:28:03,660
<font color="#E5E5E5">fortune teller</font>

577
00:28:00,690 --> 00:28:06,660
it tells<font color="#E5E5E5"> if the branch is not-taken so</font>

578
00:28:03,660 --> 00:28:10,350
it starts executing<font color="#E5E5E5"> takes the value that</font>

579
00:28:06,660 --> 00:28:14,070
a<font color="#E5E5E5"> X points to and because X is large we</font>

580
00:28:10,350 --> 00:28:17,580
now get a value from the secret<font color="#E5E5E5"> and the</font>

581
00:28:14,070 --> 00:28:19,919
rest continues the same way as before<font color="#CCCCCC"> we</font>

582
00:28:17,580 --> 00:28:25,020
get<font color="#E5E5E5"> the value into the cache</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> some</font>

583
00:28:19,920 --> 00:28:27,060
stage<font color="#CCCCCC"> the value the array length arrives</font>

584
00:28:25,020 --> 00:28:28,830
to the<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> occasion derives</font><font color="#E5E5E5"> to the</font>

585
00:28:27,060 --> 00:28:31,909
processor and<font color="#CCCCCC"> the processor</font><font color="#E5E5E5"> realizes</font>

586
00:28:28,830 --> 00:28:35,070
that it was wrong<font color="#E5E5E5"> it</font><font color="#CCCCCC"> was a misprediction</font>

587
00:28:31,910 --> 00:28:37,470
<font color="#E5E5E5">take everything back but</font><font color="#CCCCCC"> we still have</font>

588
00:28:35,070 --> 00:28:42,060
our trace in the<font color="#E5E5E5"> cache and which spoil</font>

589
00:28:37,470 --> 00:28:43,800
<font color="#CCCCCC">it the same</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> the beautiful thing with</font>

590
00:28:42,060 --> 00:28:46,050
this attack is<font color="#CCCCCC"> that we can do it from</font>

591
00:28:43,800 --> 00:28:49,020
JavaScript<font color="#E5E5E5"> we just do the same similar</font>

592
00:28:46,050 --> 00:28:51,360
<font color="#CCCCCC">code in JavaScript test for array length</font>

593
00:28:49,020 --> 00:28:53,250
and we can use<font color="#CCCCCC"> it to read</font><font color="#E5E5E5"> everything</font>

594
00:28:51,360 --> 00:28:55,379
within<font color="#E5E5E5"> the browser</font><font color="#CCCCCC"> it only works for</font>

595
00:28:53,250 --> 00:29:00,420
browsers before they were fixed now it's

596
00:28:55,380 --> 00:29:04,680
a bit harder to<font color="#E5E5E5"> do the same attack</font><font color="#CCCCCC"> the</font>

597
00:29:00,420 --> 00:29:07,440
second variant of<font color="#CCCCCC"> Spector is</font><font color="#E5E5E5"> you is a</font>

598
00:29:04,680 --> 00:29:10,230
bit<font color="#E5E5E5"> different it uses the branch target</font>

599
00:29:07,440 --> 00:29:12,660
buffer so in this<font color="#E5E5E5"> scenario we have the</font>

600
00:29:10,230 --> 00:29:15,330
attacker<font color="#E5E5E5"> the trance</font><font color="#CCCCCC"> specter and we have</font>

601
00:29:12,660 --> 00:29:18,840
a victim<font color="#CCCCCC"> that runs another runs whatever</font>

602
00:29:15,330 --> 00:29:21,240
program it runs and these are protected

603
00:29:18,840 --> 00:29:23,250
for one another we<font color="#CCCCCC"> are not expected the</font>

604
00:29:21,240 --> 00:29:24,940
attacker is not<font color="#E5E5E5"> expected to be able to</font>

605
00:29:23,250 --> 00:29:27,590
read anything from

606
00:29:24,940 --> 00:29:29,180
and now we look<font color="#E5E5E5"> at their address</font><font color="#CCCCCC"> base</font>

607
00:29:27,590 --> 00:29:31,220
and we<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> address space of both of</font>

608
00:29:29,180 --> 00:29:32,600
them and the attacker<font color="#E5E5E5"> has its own</font>

609
00:29:31,220 --> 00:29:34,250
address<font color="#E5E5E5"> space</font><font color="#CCCCCC"> the victim has its own</font>

610
00:29:32,600 --> 00:29:36,469
address<font color="#E5E5E5"> space because we use virtual</font>

611
00:29:34,250 --> 00:29:40,520
addresses<font color="#CCCCCC"> then this could be the same</font>

612
00:29:36,470 --> 00:29:42,530
addresses<font color="#E5E5E5"> in both sides and in the</font>

613
00:29:40,520 --> 00:29:46,790
attacker index or in the victim<font color="#CCCCCC"> we have</font>

614
00:29:42,530 --> 00:29:48,410
some indirect branch<font color="#E5E5E5"> that in this case</font>

615
00:29:46,790 --> 00:29:50,629
it takes<font color="#E5E5E5"> the</font><font color="#CCCCCC"> value of register and</font>

616
00:29:48,410 --> 00:29:55,340
branches<font color="#CCCCCC"> to the location of</font><font color="#E5E5E5"> the register</font>

617
00:29:50,630 --> 00:29:58,580
<font color="#CCCCCC">and we have some gadget</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> contains</font>

618
00:29:55,340 --> 00:30:08,350
code<font color="#CCCCCC"> that</font><font color="#E5E5E5"> basically does a red eye from</font>

619
00:29:58,580 --> 00:30:08,350
memory and<font color="#CCCCCC"> x</font><font color="#E5E5E5"> 256 find where it is the</font>

620
00:30:09,310 --> 00:30:13,940
the important thing is<font color="#CCCCCC"> that we don't</font>

621
00:30:11,390 --> 00:30:16,010
<font color="#E5E5E5">really need the branch to ever be able</font>

622
00:30:13,940 --> 00:30:21,460
<font color="#E5E5E5">to jump to this gadget</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> could be</font>

623
00:30:16,010 --> 00:30:24,620
<font color="#E5E5E5">totally</font><font color="#CCCCCC"> different pieces of</font><font color="#E5E5E5"> code and and</font>

624
00:30:21,460 --> 00:30:29,230
what<font color="#CCCCCC"> week we will what we will</font><font color="#E5E5E5"> exploit</font>

625
00:30:24,620 --> 00:30:34,520
is that we teach the<font color="#E5E5E5"> branch predictor to</font>

626
00:30:29,230 --> 00:30:38,300
<font color="#CCCCCC">two branch to the how many bugs are in</font>

627
00:30:34,520 --> 00:30:46,310
<font color="#CCCCCC">this code currently</font><font color="#E5E5E5"> for I just found one</font>

628
00:30:38,300 --> 00:30:48,260
at least anyway<font color="#E5E5E5"> the branch we teach the</font>

629
00:30:46,310 --> 00:30:50,480
branch predictor<font color="#E5E5E5"> that this branch is</font>

630
00:30:48,260 --> 00:30:54,010
supposed to<font color="#E5E5E5"> go to that</font><font color="#CCCCCC"> gadget and then</font>

631
00:30:50,480 --> 00:30:58,070
execute it<font color="#E5E5E5"> so</font><font color="#CCCCCC"> how do</font><font color="#E5E5E5"> we do it</font>

632
00:30:54,010 --> 00:31:00,260
we take the address<font color="#CCCCCC"> of the gadget</font><font color="#E5E5E5"> in our</font>

633
00:30:58,070 --> 00:31:02,000
in the attacker<font color="#E5E5E5"> what it does in its own</font>

634
00:31:00,260 --> 00:31:05,780
<font color="#CCCCCC">address space</font><font color="#E5E5E5"> in the same</font><font color="#CCCCCC"> Polly in the</font>

635
00:31:02,000 --> 00:31:07,910
same virtual address as the attacker<font color="#E5E5E5"> as</font>

636
00:31:05,780 --> 00:31:10,160
the jump instruction<font color="#CCCCCC"> in the way at the</font>

637
00:31:07,910 --> 00:31:13,760
victim<font color="#E5E5E5"> we take the value</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the gadget</font>

638
00:31:10,160 --> 00:31:15,650
and we<font color="#E5E5E5"> do an indirect</font><font color="#CCCCCC"> jump and in the</font>

639
00:31:13,760 --> 00:31:18,170
location of the gadget we just do a

640
00:31:15,650 --> 00:31:22,730
<font color="#E5E5E5">return or whatever way of recovering and</font>

641
00:31:18,170 --> 00:31:24,440
being able to execute it and then we

642
00:31:22,730 --> 00:31:27,860
execute<font color="#E5E5E5"> this piece of code</font><font color="#CCCCCC"> so the</font>

643
00:31:24,440 --> 00:31:31,090
attacker<font color="#CCCCCC"> just run a branch</font><font color="#E5E5E5"> into its own</font>

644
00:31:27,860 --> 00:31:34,689
address<font color="#E5E5E5"> and it does it several times</font>

645
00:31:31,090 --> 00:31:37,750
and after it<font color="#E5E5E5"> does it enough times we get</font>

646
00:31:34,690 --> 00:31:39,550
our branch our branch predictor<font color="#CCCCCC"> to learn</font>

647
00:31:37,750 --> 00:31:43,720
that this<font color="#CCCCCC"> is the branch that</font><font color="#E5E5E5"> happens</font>

648
00:31:39,550 --> 00:31:47,500
from this<font color="#E5E5E5"> location once that happens we</font>

649
00:31:43,720 --> 00:31:52,350
<font color="#CCCCCC">can actually</font><font color="#E5E5E5"> execute the</font><font color="#CCCCCC"> attack</font><font color="#E5E5E5"> we cause</font>

650
00:31:47,500 --> 00:31:55,330
the<font color="#CCCCCC"> victim</font><font color="#E5E5E5"> to execute this branch</font><font color="#CCCCCC"> and</font>

651
00:31:52,350 --> 00:31:57,429
because we have speculative execution<font color="#CCCCCC"> we</font>

652
00:31:55,330 --> 00:32:00,399
have our<font color="#E5E5E5"> a if the branch target buffer</font>

653
00:31:57,430 --> 00:32:03,700
will tell<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same branch predictor will</font>

654
00:32:00,400 --> 00:32:05,110
tell the processor<font color="#E5E5E5"> that the execution is</font>

655
00:32:03,700 --> 00:32:08,080
supposed<font color="#E5E5E5"> to continue from that gadget</font>

656
00:32:05,110 --> 00:32:12,520
<font color="#CCCCCC">and</font><font color="#E5E5E5"> for me this it follows the same way</font>

657
00:32:08,080 --> 00:32:14,350
that we had the attack<font color="#CCCCCC"> before so they</font>

658
00:32:12,520 --> 00:32:17,590
<font color="#E5E5E5">are these are the two attacks and now</font>

659
00:32:14,350 --> 00:32:19,570
we'll look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> side how we</font>

660
00:32:17,590 --> 00:32:23,470
prevent<font color="#CCCCCC"> where we</font><font color="#E5E5E5"> protect our systems</font>

661
00:32:19,570 --> 00:32:27,790
from these<font color="#CCCCCC"> attacks so first we have</font>

662
00:32:23,470 --> 00:32:30,580
meltdown the solution<font color="#CCCCCC"> from meltdown is</font>

663
00:32:27,790 --> 00:32:33,240
simple<font color="#E5E5E5"> we use the separate address space</font>

664
00:32:30,580 --> 00:32:37,240
or<font color="#CCCCCC"> the kernel so if we look at the</font>

665
00:32:33,240 --> 00:32:41,230
process as it<font color="#E5E5E5"> was before we split it</font>

666
00:32:37,240 --> 00:32:45,010
into two<font color="#CCCCCC"> different address spaces</font><font color="#E5E5E5"> one of</font>

667
00:32:41,230 --> 00:32:47,890
them<font color="#E5E5E5"> only contains</font><font color="#CCCCCC"> the user level</font><font color="#E5E5E5"> and</font>

668
00:32:45,010 --> 00:32:52,629
that's where the process<font color="#E5E5E5"> runs and the</font>

669
00:32:47,890 --> 00:32:54,790
other contains the kernel map and the a

670
00:32:52,630 --> 00:32:56,350
copy of the mapping<font color="#E5E5E5"> of the user because</font>

671
00:32:54,790 --> 00:33:03,310
the<font color="#E5E5E5"> colonel wants</font><font color="#CCCCCC"> to access this data</font>

672
00:32:56,350 --> 00:33:06,129
<font color="#CCCCCC">easy</font><font color="#E5E5E5"> the main problem of the main</font>

673
00:33:03,310 --> 00:33:08,020
problem<font color="#CCCCCC"> that was initially seen with</font>

674
00:33:06,130 --> 00:33:10,510
this is that we<font color="#E5E5E5"> have an overhead when</font>

675
00:33:08,020 --> 00:33:13,990
crossing address spaces<font color="#E5E5E5"> so when whenever</font>

676
00:33:10,510 --> 00:33:16,240
<font color="#E5E5E5">we run into a system call we need to</font>

677
00:33:13,990 --> 00:33:18,790
move from user level kernel to system

678
00:33:16,240 --> 00:33:20,580
level and<font color="#E5E5E5"> that takes no longer because</font>

679
00:33:18,790 --> 00:33:22,389
<font color="#CCCCCC">we need to switch address spaces</font>

680
00:33:20,580 --> 00:33:26,379
<font color="#E5E5E5">performance results that were published</font>

681
00:33:22,390 --> 00:33:29,440
<font color="#CCCCCC">range from</font><font color="#E5E5E5"> almost no performance impact</font>

682
00:33:26,380 --> 00:33:34,420
to<font color="#CCCCCC"> 30% performance a</font>

683
00:33:29,440 --> 00:33:37,270
<font color="#CCCCCC">it's depending</font><font color="#E5E5E5"> on the workload another</font>

684
00:33:34,420 --> 00:33:40,900
<font color="#E5E5E5">problem with this solution is that</font><font color="#CCCCCC"> it's</font>

685
00:33:37,270 --> 00:33:43,270
not easy to implement<font color="#E5E5E5"> it so not a long</font>

686
00:33:40,900 --> 00:33:47,680
<font color="#E5E5E5">time ago Microsoft had to issue an</font>

687
00:33:43,270 --> 00:33:50,080
emergency<font color="#E5E5E5"> patch</font><font color="#CCCCCC"> because it turned out</font>

688
00:33:47,680 --> 00:33:52,470
that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> solved meltdown by giving us</font>

689
00:33:50,080 --> 00:33:56,710
their<font color="#E5E5E5"> full access to the kernel space</font>

690
00:33:52,470 --> 00:33:58,570
and the more important issue is<font color="#CCCCCC"> that</font>

691
00:33:56,710 --> 00:34:01,630
this<font color="#E5E5E5"> does not really address the core</font>

692
00:33:58,570 --> 00:34:05,770
issue here<font color="#E5E5E5"> the problem that we have with</font>

693
00:34:01,630 --> 00:34:07,180
<font color="#E5E5E5">meltdown</font><font color="#CCCCCC"> is that page table protection</font>

694
00:34:05,770 --> 00:34:10,150
the protection that<font color="#E5E5E5"> the processor</font>

695
00:34:07,180 --> 00:34:12,370
provides doesn't really work what we

696
00:34:10,150 --> 00:34:14,440
have the solution here that's<font color="#E5E5E5"> that moves</font>

697
00:34:12,370 --> 00:34:17,259
the part of the address<font color="#CCCCCC"> resolved the</font>

698
00:34:14,440 --> 00:34:20,200
kernel<font color="#CCCCCC"> dregs</font><font color="#E5E5E5"> to two different address</font>

699
00:34:17,260 --> 00:34:24,970
space<font color="#CCCCCC"> it's solved</font><font color="#E5E5E5"> the symptoms it's like</font>

700
00:34:20,199 --> 00:34:28,509
giving panadol to<font color="#E5E5E5"> two person to</font><font color="#CCCCCC"> hit to</font>

701
00:34:24,969 --> 00:34:32,379
avoid a<font color="#CCCCCC"> pain</font><font color="#E5E5E5"> the caused by a tumor it's</font>

702
00:34:28,510 --> 00:34:36,610
it heal<font color="#E5E5E5"> its symptoms but the problem</font>

703
00:34:32,380 --> 00:34:38,679
remains<font color="#CCCCCC"> and any system that uses a word</font>

704
00:34:36,610 --> 00:34:41,200
that you realize on page level

705
00:34:38,679 --> 00:34:42,940
<font color="#E5E5E5">protection on process of return or</font><font color="#CCCCCC"> the</font>

706
00:34:41,199 --> 00:34:48,040
process of<font color="#CCCCCC"> providing</font><font color="#E5E5E5"> protection who</font>

707
00:34:42,940 --> 00:34:52,950
fails to will fail to<font color="#CCCCCC"> work second</font>

708
00:34:48,040 --> 00:34:58,450
mechanism suggested for variant<font color="#E5E5E5"> to the</font>

709
00:34:52,949 --> 00:35:00,430
solution is<font color="#E5E5E5"> to add</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> processor</font>

710
00:34:58,450 --> 00:35:02,770
features that prevent prediction across

711
00:35:00,430 --> 00:35:04,899
security domains<font color="#E5E5E5"> basically what that</font>

712
00:35:02,770 --> 00:35:07,240
<font color="#CCCCCC">means is that</font><font color="#E5E5E5"> instead of one branch</font>

713
00:35:04,900 --> 00:35:09,460
predictor we have<font color="#E5E5E5"> to whatever we teach</font>

714
00:35:07,240 --> 00:35:11,379
the first one we<font color="#E5E5E5"> don't teach the the</font>

715
00:35:09,460 --> 00:35:18,060
other one doesn't learn<font color="#E5E5E5"> and and vice</font>

716
00:35:11,380 --> 00:35:18,060
versa<font color="#CCCCCC"> on a technical level</font><font color="#E5E5E5"> we have three</font>

717
00:35:18,130 --> 00:35:25,770
layers of<font color="#E5E5E5"> protection</font>

718
00:35:20,290 --> 00:35:29,190
the first one<font color="#CCCCCC"> for processors that have a</font>

719
00:35:25,770 --> 00:35:32,530
<font color="#CCCCCC">hyper threading Intel hyper-threading</font>

720
00:35:29,190 --> 00:35:34,180
<font color="#CCCCCC">they prevent learning across hyper</font>

721
00:35:32,530 --> 00:35:35,770
<font color="#E5E5E5">threads so whatever happens in one eye</font>

722
00:35:34,180 --> 00:35:39,430
<font color="#CCCCCC">portraits does not affect the other</font>

723
00:35:35,770 --> 00:35:41,950
<font color="#E5E5E5">hyper thread on the same core the second</font>

724
00:35:39,430 --> 00:35:44,109
is that code running in higher security

725
00:35:41,950 --> 00:35:45,640
<font color="#E5E5E5">level does not learn from code running</font>

726
00:35:44,109 --> 00:35:49,960
in lower security<font color="#E5E5E5"> level</font>

727
00:35:45,640 --> 00:35:52,089
so whatever the user space<font color="#E5E5E5"> teaches the</font>

728
00:35:49,960 --> 00:35:53,829
branch predictor does<font color="#CCCCCC"> not affect the</font>

729
00:35:52,089 --> 00:35:57,369
kernel when the user switches<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

730
00:35:53,829 --> 00:35:58,990
kernel and<font color="#CCCCCC"> to protect between across</font>

731
00:35:57,369 --> 00:36:01,060
contexts which<font color="#CCCCCC"> though</font><font color="#E5E5E5"> will run one</font>

732
00:35:58,990 --> 00:36:03,279
program before<font color="#E5E5E5"> another and they are in</font>

733
00:36:01,060 --> 00:36:05,200
the same protection level there<font color="#E5E5E5"> is</font>

734
00:36:03,280 --> 00:36:07,480
another way another instruction that

735
00:36:05,200 --> 00:36:09,009
just kills the<font color="#E5E5E5"> branch predictor so</font>

736
00:36:07,480 --> 00:36:12,250
whatever was in the<font color="#E5E5E5"> ground predictor is</font>

737
00:36:09,010 --> 00:36:16,839
deleted<font color="#E5E5E5"> and now we don't we</font><font color="#CCCCCC"> don't rely</font>

738
00:36:12,250 --> 00:36:24,220
on<font color="#E5E5E5"> that</font><font color="#CCCCCC"> technically</font><font color="#E5E5E5"> this should solve</font>

739
00:36:16,839 --> 00:36:27,609
all issues<font color="#E5E5E5"> practically when Intel issued</font>

740
00:36:24,220 --> 00:36:31,089
the first page for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it caused some</font>

741
00:36:27,609 --> 00:36:34,029
machine to stop working<font color="#E5E5E5"> Microsoft in</font>

742
00:36:31,089 --> 00:36:37,900
this example<font color="#CCCCCC"> to K just disabled</font><font color="#E5E5E5"> the fix</font>

743
00:36:34,030 --> 00:36:39,940
<font color="#E5E5E5">others had similar things</font><font color="#CCCCCC"> I think it was</font>

744
00:36:37,900 --> 00:36:44,349
<font color="#E5E5E5">two</font><font color="#CCCCCC"> or three weeks ago</font><font color="#E5E5E5"> that Intel</font>

745
00:36:39,940 --> 00:36:45,880
released the new new page and they also

746
00:36:44,349 --> 00:36:48,010
told<font color="#E5E5E5"> us that they are not going to pitch</font>

747
00:36:45,880 --> 00:36:49,470
every processor because they don't know

748
00:36:48,010 --> 00:36:53,230
how<font color="#E5E5E5"> to do that</font>

749
00:36:49,470 --> 00:36:56,828
AMD was much more careful and the<font color="#E5E5E5"> patch</font>

750
00:36:53,230 --> 00:37:00,819
<font color="#E5E5E5">has come out I think it was yesterday</font><font color="#CCCCCC"> so</font>

751
00:36:56,829 --> 00:37:04,119
until now MP processors were vulnerable

752
00:37:00,819 --> 00:37:09,609
<font color="#E5E5E5">and now we will learn whether AMD is</font>

753
00:37:04,119 --> 00:37:12,600
doing<font color="#E5E5E5"> a better job on</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> Intel last</font>

754
00:37:09,609 --> 00:37:16,990
very inspector<font color="#E5E5E5"> variant one</font>

755
00:37:12,600 --> 00:37:18,970
the solution<font color="#CCCCCC"> then</font><font color="#E5E5E5"> most commonly</font>

756
00:37:16,990 --> 00:37:21,580
suggested solution is compiler patches

757
00:37:18,970 --> 00:37:25,890
to block speculative execution<font color="#CCCCCC"> the idea</font>

758
00:37:21,580 --> 00:37:29,710
is<font color="#CCCCCC"> that if we have our footprints here</font>

759
00:37:25,890 --> 00:37:31,650
we<font color="#E5E5E5"> don't let the code execute beyond the</font>

760
00:37:29,710 --> 00:37:34,990
<font color="#E5E5E5">point that it starts leaving footprints</font>

761
00:37:31,650 --> 00:37:37,480
<font color="#E5E5E5">so when we get to this position in the</font>

762
00:37:34,990 --> 00:37:40,149
execution<font color="#E5E5E5"> the execution they print a</font>

763
00:37:37,480 --> 00:37:42,120
speculative execution stops<font color="#E5E5E5"> and then if</font>

764
00:37:40,150 --> 00:37:47,050
we learned that we went the wrong way

765
00:37:42,120 --> 00:37:52,210
<font color="#E5E5E5">then no footprints we cannot exploit</font>

766
00:37:47,050 --> 00:37:55,240
this theoretically this<font color="#E5E5E5"> works it's very</font>

767
00:37:52,210 --> 00:37:57,730
easy to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> that we just need to</font><font color="#E5E5E5"> put in</font>

768
00:37:55,240 --> 00:37:59,740
<font color="#E5E5E5">interphase instructions so speculative</font>

769
00:37:57,730 --> 00:38:02,080
at<font color="#CCCCCC"> this portion we put them in both</font>

770
00:37:59,740 --> 00:38:06,189
sides of any conditional branch and we

771
00:38:02,080 --> 00:38:09,910
are protected<font color="#CCCCCC"> the problem with that</font><font color="#E5E5E5"> is</font>

772
00:38:06,190 --> 00:38:13,660
that<font color="#E5E5E5"> these branches are expensive in</font>

773
00:38:09,910 --> 00:38:15,520
tests that we have done<font color="#CCCCCC"> sha-256 when we</font>

774
00:38:13,660 --> 00:38:21,240
start<font color="#CCCCCC"> adding all these</font><font color="#E5E5E5"> branches into</font><font color="#CCCCCC"> it</font>

775
00:38:15,520 --> 00:38:27,100
<font color="#CCCCCC">and all these</font><font color="#E5E5E5"> barriers into it</font><font color="#CCCCCC"> executes</font>

776
00:38:21,240 --> 00:38:31,720
about<font color="#CCCCCC"> 60% slower which is usually not</font>

777
00:38:27,100 --> 00:38:34,990
<font color="#E5E5E5">acceptable so instead of using that the</font>

778
00:38:31,720 --> 00:38:37,870
<font color="#E5E5E5">solutions just</font><font color="#CCCCCC"> intrusion is let's</font><font color="#E5E5E5"> use</font>

779
00:38:34,990 --> 00:38:39,819
static<font color="#E5E5E5"> analysis our compilers will look</font>

780
00:38:37,870 --> 00:38:41,950
at<font color="#E5E5E5"> our code and decide what this code</font>

781
00:38:39,820 --> 00:38:43,690
may leak information<font color="#CCCCCC"> or not and</font><font color="#E5E5E5"> put the</font>

782
00:38:41,950 --> 00:38:47,140
barrier if they see something that may

783
00:38:43,690 --> 00:38:50,110
leak information<font color="#E5E5E5"> Microsoft has done that</font>

784
00:38:47,140 --> 00:38:52,839
<font color="#E5E5E5">there is a page in</font><font color="#CCCCCC"> M</font><font color="#E5E5E5"> SVC there are other</font>

785
00:38:50,110 --> 00:38:56,650
pages<font color="#E5E5E5"> for</font><font color="#CCCCCC"> lvm so we have some</font><font color="#E5E5E5"> patches</font>

786
00:38:52,840 --> 00:39:01,870
around<font color="#E5E5E5"> and we tested one of them or</font><font color="#CCCCCC"> pool</font>

787
00:38:56,650 --> 00:39:05,410
culture did and the result is<font color="#E5E5E5"> that yes</font>

788
00:39:01,870 --> 00:39:08,049
it does block some patterns<font color="#E5E5E5"> that leak</font>

789
00:39:05,410 --> 00:39:11,859
<font color="#CCCCCC">information exactly dot that with those</font>

790
00:39:08,050 --> 00:39:14,440
that<font color="#E5E5E5"> we mentioned in our paper Paul</font>

791
00:39:11,860 --> 00:39:16,930
tried 15 different patterns

792
00:39:14,440 --> 00:39:18,130
two of them were blocked the other<font color="#E5E5E5"> 13</font>

793
00:39:16,930 --> 00:39:21,460
were not

794
00:39:18,130 --> 00:39:23,799
and the problem is<font color="#CCCCCC"> that it is</font><font color="#E5E5E5"> not really</font>

795
00:39:21,460 --> 00:39:28,509
<font color="#CCCCCC">easy to analyze</font><font color="#E5E5E5"> the code and see whether</font>

796
00:39:23,799 --> 00:39:30,519
it<font color="#CCCCCC"> leaks or not</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> they are going to</font>

797
00:39:28,509 --> 00:39:32,890
<font color="#E5E5E5">try and it will probably be better but</font>

798
00:39:30,519 --> 00:39:36,038
the problem is will still be there<font color="#E5E5E5"> we</font>

799
00:39:32,890 --> 00:39:38,288
still<font color="#E5E5E5"> there another solution</font><font color="#CCCCCC"> that he</font>

800
00:39:36,039 --> 00:39:43,269
<font color="#E5E5E5">suggested is limit</font><font color="#CCCCCC"> the memory access or</font>

801
00:39:38,289 --> 00:39:45,430
use of data<font color="#E5E5E5"> and the example that one</font>

802
00:39:43,269 --> 00:39:47,769
example<font color="#E5E5E5"> for that is to replace this</font>

803
00:39:45,430 --> 00:39:51,190
piece of code<font color="#E5E5E5"> we've seen</font><font color="#CCCCCC"> earlier with</font>

804
00:39:47,769 --> 00:39:54,308
something<font color="#E5E5E5"> along these lines</font><font color="#CCCCCC"> so what we</font>

805
00:39:51,190 --> 00:39:57,910
have<font color="#E5E5E5"> instead of testing that we are</font>

806
00:39:54,309 --> 00:40:01,229
within the<font color="#E5E5E5"> within bounds we force the</font>

807
00:39:57,910 --> 00:40:03,489
<font color="#E5E5E5">value to</font><font color="#CCCCCC"> be within within bounds</font><font color="#E5E5E5"> we just</font>

808
00:40:01,229 --> 00:40:05,439
reduce it module with the<font color="#E5E5E5"> size of the</font>

809
00:40:03,489 --> 00:40:08,019
array<font color="#CCCCCC"> that ensures that everything</font><font color="#E5E5E5"> is</font>

810
00:40:05,440 --> 00:40:10,690
<font color="#E5E5E5">inside and we cannot read things outside</font>

811
00:40:08,019 --> 00:40:14,910
the<font color="#E5E5E5"> array and we</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> it with them</font>

812
00:40:10,690 --> 00:40:14,910
<font color="#E5E5E5">without the array the bounds tastes and</font>

813
00:40:15,119 --> 00:40:22,329
<font color="#E5E5E5">technically it works but it only</font><font color="#CCCCCC"> works</font>

814
00:40:18,759 --> 00:40:24,609
for the scenario<font color="#CCCCCC"> of arrays</font><font color="#E5E5E5"> it only works</font>

815
00:40:22,329 --> 00:40:26,950
again on the sort of attacks that<font color="#E5E5E5"> we</font>

816
00:40:24,609 --> 00:40:28,839
have shown it does<font color="#E5E5E5"> not address the</font><font color="#CCCCCC"> core</font>

817
00:40:26,950 --> 00:40:31,479
problem that speculative execution may

818
00:40:28,839 --> 00:40:35,979
leak information<font color="#CCCCCC"> in other scenarios when</font>

819
00:40:31,479 --> 00:40:37,538
we don't test<font color="#E5E5E5"> for a</font><font color="#CCCCCC"> railing</font><font color="#E5E5E5"> so we are</font>

820
00:40:35,979 --> 00:40:40,450
left with<font color="#CCCCCC"> a problem that we don't really</font>

821
00:40:37,539 --> 00:40:44,349
<font color="#E5E5E5">have</font><font color="#CCCCCC"> a good solution</font><font color="#E5E5E5"> and since this</font>

822
00:40:40,450 --> 00:40:47,529
mirrors what some<font color="#E5E5E5"> of</font><font color="#CCCCCC"> us may remember</font>

823
00:40:44,349 --> 00:40:50,229
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the 80s 90s that the scenario that</font>

824
00:40:47,529 --> 00:40:53,559
we<font color="#E5E5E5"> had with buffer overflows when they</font>

825
00:40:50,229 --> 00:40:55,529
<font color="#E5E5E5">started appearing</font><font color="#CCCCCC"> people suggested</font>

826
00:40:53,559 --> 00:40:59,440
solutions that are still used today

827
00:40:55,529 --> 00:41:01,979
<font color="#E5E5E5">non-executable stacks</font><font color="#CCCCCC"> block the</font><font color="#E5E5E5"> attacks</font>

828
00:40:59,440 --> 00:41:05,619
<font color="#E5E5E5">that were popular</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> early eighties</font>

829
00:41:01,979 --> 00:41:08,859
but as long<font color="#CCCCCC"> as we don't</font><font color="#E5E5E5"> address the core</font>

830
00:41:05,619 --> 00:41:11,019
problem the problem still remains<font color="#E5E5E5"> so we</font>

831
00:41:08,859 --> 00:41:14,739
believe<font color="#E5E5E5"> that</font><font color="#CCCCCC"> Spectre is going to haunt</font>

832
00:41:11,019 --> 00:41:16,749
<font color="#E5E5E5">us for many years</font><font color="#CCCCCC"> even though</font><font color="#E5E5E5"> inter</font>

833
00:41:14,739 --> 00:41:22,119
promises next generation of processors

834
00:41:16,749 --> 00:41:25,759
<font color="#E5E5E5">will</font><font color="#CCCCCC"> solve so</font><font color="#E5E5E5"> some up</font>

835
00:41:22,119 --> 00:41:28,309
for the past decades<font color="#E5E5E5"> processor</font>

836
00:41:25,760 --> 00:41:30,290
development focused on performance<font color="#E5E5E5"> the</font>

837
00:41:28,309 --> 00:41:34,670
<font color="#E5E5E5">war is some work on security but</font><font color="#CCCCCC"> not</font>

838
00:41:30,290 --> 00:41:38,058
<font color="#E5E5E5">enough there we got the result with</font>

839
00:41:34,670 --> 00:41:40,550
spectra and meltdown hopefully these are

840
00:41:38,059 --> 00:41:41,930
<font color="#E5E5E5">the last ones this is not much different</font>

841
00:41:40,550 --> 00:41:45,440
<font color="#CCCCCC">from</font><font color="#E5E5E5"> what happens in software</font>

842
00:41:41,930 --> 00:41:50,058
development<font color="#CCCCCC"> time to market</font><font color="#E5E5E5"> from security</font>

843
00:41:45,440 --> 00:41:54,770
all<font color="#E5E5E5"> every time a performance always more</font>

844
00:41:50,059 --> 00:41:56,540
important but so we<font color="#E5E5E5"> have bugs in</font>

845
00:41:54,770 --> 00:41:59,030
software<font color="#E5E5E5"> but the problem here is that</font>

846
00:41:56,540 --> 00:42:02,058
it's<font color="#E5E5E5"> much harder to fix those it's</font>

847
00:41:59,030 --> 00:42:06,460
relatively<font color="#E5E5E5"> it's very difficult to fix a</font>

848
00:42:02,059 --> 00:42:09,290
process<font color="#CCCCCC"> on once it's out in the market</font>

849
00:42:06,460 --> 00:42:12,290
second thing<font color="#E5E5E5"> is that we are going to</font>

850
00:42:09,290 --> 00:42:14,890
live<font color="#E5E5E5"> with this problem so if anyone is</font>

851
00:42:12,290 --> 00:42:18,710
<font color="#E5E5E5">interested to look at it more that's</font>

852
00:42:14,890 --> 00:42:21,859
something<font color="#CCCCCC"> too that I think will be a</font>

853
00:42:18,710 --> 00:42:26,000
very<font color="#E5E5E5"> good area to investigate for then</font>

854
00:42:21,859 --> 00:42:29,270
at<font color="#E5E5E5"> least two three years two three</font>

855
00:42:26,000 --> 00:42:31,430
coming years<font color="#E5E5E5"> and third thing is</font><font color="#CCCCCC"> that</font>

856
00:42:29,270 --> 00:42:35,240
<font color="#E5E5E5">micro textual channels particularly</font>

857
00:42:31,430 --> 00:42:39,109
<font color="#CCCCCC">cover channel now now matter and being</font>

858
00:42:35,240 --> 00:42:40,669
<font color="#E5E5E5">able to eliminate them or to understand</font>

859
00:42:39,109 --> 00:42:43,308
them and know what happening there is

860
00:42:40,670 --> 00:42:47,230
now is much<font color="#E5E5E5"> more important than we</font>

861
00:42:43,309 --> 00:42:49,970
thought it was until<font color="#CCCCCC"> few months ago and</font>

862
00:42:47,230 --> 00:42:51,859
in<font color="#E5E5E5"> that respect I would like to</font>

863
00:42:49,970 --> 00:42:53,930
recommend<font color="#E5E5E5"> everyone go to</font><font color="#CCCCCC"> Xi'an stuff</font>

864
00:42:51,859 --> 00:42:57,470
<font color="#E5E5E5">today because she is going</font><font color="#CCCCCC"> to speak</font>

865
00:42:53,930 --> 00:43:01,069
about how<font color="#CCCCCC"> we block how we don't</font><font color="#E5E5E5"> block</font>

866
00:42:57,470 --> 00:43:03,859
these channels<font color="#CCCCCC"> and with that I will</font>

867
00:43:01,069 --> 00:43:06,369
conclude and I'll be happy to take

868
00:43:03,859 --> 00:43:06,369
questions

869
00:43:09,580 --> 00:43:15,910
[Applause]

