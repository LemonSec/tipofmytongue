1
00:00:10,770 --> 00:00:16,530
next up we have Cameron Ford<font color="#E5E5E5"> who will be</font>

2
00:00:14,370 --> 00:00:18,689
talking<font color="#E5E5E5"> about secure</font>

3
00:00:16,530 --> 00:00:27,590
<font color="#E5E5E5">Russell let's all welcome cam to the</font>

4
00:00:18,690 --> 00:00:29,900
<font color="#E5E5E5">stage thanks very much</font>

5
00:00:27,590 --> 00:00:34,440
today I'm<font color="#E5E5E5"> gonna be talking about rust</font>

6
00:00:29,900 --> 00:00:37,140
<font color="#CCCCCC">let's get</font><font color="#E5E5E5"> into it</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> first a bit about</font>

7
00:00:34,440 --> 00:00:38,640
<font color="#E5E5E5">me</font><font color="#CCCCCC"> I do red teaming</font>

8
00:00:37,140 --> 00:00:40,610
when I do read to me I<font color="#E5E5E5"> like working</font><font color="#CCCCCC"> on</font>

9
00:00:38,640 --> 00:00:42,660
the tools<font color="#CCCCCC"> that we do to</font><font color="#E5E5E5"> our red teaming</font>

10
00:00:40,610 --> 00:00:45,690
<font color="#E5E5E5">occasionally I do a bit lecturing in</font>

11
00:00:42,660 --> 00:00:48,239
<font color="#E5E5E5">cybersecurity</font><font color="#CCCCCC"> and probably about</font><font color="#E5E5E5"> 12 or</font>

12
00:00:45,690 --> 00:00:51,500
<font color="#E5E5E5">18 months</font><font color="#CCCCCC"> ago I started to</font><font color="#E5E5E5"> get a bit</font>

13
00:00:48,239 --> 00:00:54,419
curious about rust<font color="#E5E5E5"> seeing a lot of</font>

14
00:00:51,500 --> 00:00:56,730
hacking news articles out<font color="#E5E5E5"> there</font><font color="#CCCCCC"> and a</font>

15
00:00:54,420 --> 00:01:00,930
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of claims so I just</font><font color="#E5E5E5"> want to</font><font color="#CCCCCC"> start to</font>

16
00:00:56,730 --> 00:01:04,589
explore some of<font color="#E5E5E5"> those so some ground</font>

17
00:01:00,930 --> 00:01:06,390
rules<font color="#E5E5E5"> before we start this</font><font color="#CCCCCC"> spoilers I</font>

18
00:01:04,589 --> 00:01:09,870
kind<font color="#E5E5E5"> of like rust having looked at it a</font>

19
00:01:06,390 --> 00:01:13,050
<font color="#CCCCCC">bit now but you may not that's</font><font color="#E5E5E5"> okay</font>

20
00:01:09,870 --> 00:01:14,659
so every<font color="#E5E5E5"> program image is kind of</font>

21
00:01:13,050 --> 00:01:16,979
<font color="#E5E5E5">designed for a different problem right</font>

22
00:01:14,659 --> 00:01:20,430
some<font color="#E5E5E5"> of them</font><font color="#CCCCCC"> our problems</font><font color="#E5E5E5"> better than</font>

23
00:01:16,979 --> 00:01:21,929
others<font color="#CCCCCC"> so</font><font color="#E5E5E5"> even if you don't like rust</font><font color="#CCCCCC"> at</font>

24
00:01:20,430 --> 00:01:23,130
the end of this and if you knew this I

25
00:01:21,930 --> 00:01:26,040
<font color="#E5E5E5">don't expect to convince you within an</font>

26
00:01:23,130 --> 00:01:27,390
hour<font color="#E5E5E5"> but</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> there's one or two</font><font color="#CCCCCC"> things</font>

27
00:01:26,040 --> 00:01:28,490
<font color="#E5E5E5">you can pick up and adapt into</font><font color="#CCCCCC"> the</font>

28
00:01:27,390 --> 00:01:33,170
library or something<font color="#E5E5E5"> for your own</font>

29
00:01:28,490 --> 00:01:37,798
<font color="#E5E5E5">favorite programming language okay so</font>

30
00:01:33,170 --> 00:01:40,079
what is rust the name comes from rust is

31
00:01:37,799 --> 00:01:41,340
always<font color="#E5E5E5"> kind of close to bare metal so</font>

32
00:01:40,079 --> 00:01:43,589
it's a programming language<font color="#CCCCCC"> that's</font>

33
00:01:41,340 --> 00:01:45,210
supposed to<font color="#E5E5E5"> give you control but at the</font>

34
00:01:43,590 --> 00:01:47,759
same time the three<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that they</font>

35
00:01:45,210 --> 00:01:50,189
emphasize<font color="#E5E5E5"> the language is its language</font>

36
00:01:47,759 --> 00:01:52,829
it focuses on safety<font color="#E5E5E5"> speed and</font>

37
00:01:50,189 --> 00:01:55,079
concurrency<font color="#CCCCCC"> we're gonna be</font><font color="#E5E5E5"> looking a bit</font>

38
00:01:52,829 --> 00:01:57,960
at a couple<font color="#E5E5E5"> of those today</font><font color="#CCCCCC"> particular</font>

39
00:01:55,079 --> 00:02:00,240
the safety<font color="#CCCCCC"> a bit of the concurrency and</font>

40
00:01:57,960 --> 00:02:02,719
the speed we're not gonna go into<font color="#E5E5E5"> but</font>

41
00:02:00,240 --> 00:02:06,479
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> that information elsewhere</font>

42
00:02:02,719 --> 00:02:08,758
<font color="#E5E5E5">it started in 2006 there was Mozilla</font>

43
00:02:06,479 --> 00:02:10,410
employee who kind<font color="#E5E5E5"> of got a bit sick of</font>

44
00:02:08,758 --> 00:02:12,660
<font color="#E5E5E5">seeing the similar sort of mistakes</font>

45
00:02:10,410 --> 00:02:15,120
being made in their<font color="#CCCCCC"> codebase time</font><font color="#E5E5E5"> and</font>

46
00:02:12,660 --> 00:02:16,770
time again<font color="#CCCCCC"> so he wondered</font><font color="#E5E5E5"> apart from all</font>

47
00:02:15,120 --> 00:02:18,300
the<font color="#CCCCCC"> tooling that</font><font color="#E5E5E5"> I have maybe there's</font>

48
00:02:16,770 --> 00:02:18,680
something to<font color="#CCCCCC"> programming though you can</font>

49
00:02:18,300 --> 00:02:22,849
offer

50
00:02:18,680 --> 00:02:26,090
<font color="#E5E5E5">to improve things</font><font color="#CCCCCC"> by 2009 it</font><font color="#E5E5E5"> became an</font>

51
00:02:22,849 --> 00:02:28,250
<font color="#CCCCCC">efficient Mozilla project</font><font color="#E5E5E5"> and at this</font>

52
00:02:26,090 --> 00:02:31,790
stage<font color="#CCCCCC"> we still invest a</font><font color="#E5E5E5"> lot of effort</font>

53
00:02:28,250 --> 00:02:34,280
<font color="#CCCCCC">into</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> they hired people</font><font color="#E5E5E5"> who design</font>

54
00:02:31,790 --> 00:02:36,620
programming languages<font color="#E5E5E5"> they took it</font>

55
00:02:34,280 --> 00:02:38,599
really seriously<font color="#E5E5E5"> and there's lots of</font>

56
00:02:36,620 --> 00:02:40,120
<font color="#E5E5E5">viruses lots of things put into the</font>

57
00:02:38,599 --> 00:02:42,888
language<font color="#E5E5E5"> taken out of the language</font><font color="#CCCCCC"> and</font>

58
00:02:40,120 --> 00:02:45,889
by the time we get to 2015 we've

59
00:02:42,889 --> 00:02:48,590
stabilized<font color="#E5E5E5"> we set on what we want in the</font>

60
00:02:45,889 --> 00:02:52,970
language<font color="#CCCCCC"> a year</font><font color="#E5E5E5"> later</font>

61
00:02:48,590 --> 00:02:55,359
Firefox<font color="#E5E5E5"> for 48 starts running</font><font color="#CCCCCC"> Russ code</font>

62
00:02:52,970 --> 00:02:58,849
<font color="#E5E5E5">around</font><font color="#CCCCCC"> the world</font>

63
00:02:55,359 --> 00:03:00,980
- I think<font color="#CCCCCC"> Parrs head of headers for</font>

64
00:02:58,849 --> 00:03:03,560
<font color="#CCCCCC">keiki container for video</font><font color="#E5E5E5"> files and</font>

65
00:03:00,980 --> 00:03:06,768
since then it's<font color="#E5E5E5"> been used in plenty of</font>

66
00:03:03,560 --> 00:03:08,840
<font color="#E5E5E5">other places and Firefox continues to</font>

67
00:03:06,769 --> 00:03:12,909
use<font color="#E5E5E5"> it more they rewrote the CSS CSS</font>

68
00:03:08,840 --> 00:03:15,349
engine<font color="#CCCCCC"> styling</font><font color="#E5E5E5"> and rust stuff like that</font>

69
00:03:12,909 --> 00:03:17,030
<font color="#CCCCCC">Stack</font><font color="#E5E5E5"> Overflow</font><font color="#CCCCCC"> - a developer's survey</font>

70
00:03:15,349 --> 00:03:19,069
every<font color="#CCCCCC"> year</font><font color="#E5E5E5"> where the people using Stack</font>

71
00:03:17,030 --> 00:03:20,810
Overflow yeah

72
00:03:19,069 --> 00:03:23,869
answer a bunch of questions about<font color="#E5E5E5"> their</font>

73
00:03:20,810 --> 00:03:25,340
job in their work<font color="#CCCCCC"> past</font><font color="#E5E5E5"> three years for</font>

74
00:03:23,870 --> 00:03:28,069
us<font color="#E5E5E5"> has been voted</font><font color="#CCCCCC"> the most left loose</font>

75
00:03:25,340 --> 00:03:29,690
most<font color="#E5E5E5"> loved</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> on that survey so</font>

76
00:03:28,069 --> 00:03:32,888
there's some<font color="#CCCCCC"> people</font><font color="#E5E5E5"> out there</font><font color="#CCCCCC"> who</font><font color="#E5E5E5"> like</font>

77
00:03:29,690 --> 00:03:36,079
it that's<font color="#E5E5E5"> good</font><font color="#CCCCCC"> its kind of influenced by</font>

78
00:03:32,889 --> 00:03:37,430
<font color="#E5E5E5">C and C++</font><font color="#CCCCCC"> to one degree</font><font color="#E5E5E5"> as I said it</font>

79
00:03:36,079 --> 00:03:39,349
<font color="#E5E5E5">kind of wants</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> give you that control</font>

80
00:03:37,430 --> 00:03:41,030
<font color="#E5E5E5">the language doesn't have garbage</font>

81
00:03:39,349 --> 00:03:43,399
<font color="#E5E5E5">collection and things like that it wants</font>

82
00:03:41,030 --> 00:03:45,470
you<font color="#CCCCCC"> to kind of be able</font><font color="#E5E5E5"> to account the</font>

83
00:03:43,400 --> 00:03:47,389
resources<font color="#E5E5E5"> that you're using but at the</font>

84
00:03:45,470 --> 00:03:49,370
same time it's kind<font color="#CCCCCC"> of influenced by</font><font color="#E5E5E5"> ML</font>

85
00:03:47,389 --> 00:03:51,590
type<font color="#E5E5E5"> languages so camel and Haskell</font><font color="#CCCCCC"> and</font>

86
00:03:49,370 --> 00:03:55,129
stuff like that it uses<font color="#E5E5E5"> strong typing to</font>

87
00:03:51,590 --> 00:03:57,199
offer a lot<font color="#CCCCCC"> of the safety it's kind of</font>

88
00:03:55,129 --> 00:04:00,228
similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Swift in that sense</font><font color="#CCCCCC"> Swift</font>

89
00:03:57,199 --> 00:04:02,720
also has<font color="#E5E5E5"> its</font><font color="#CCCCCC"> strong types</font><font color="#E5E5E5"> and D as well</font>

90
00:04:00,229 --> 00:04:05,209
<font color="#E5E5E5">I'd say and there's reasonable IDE</font>

91
00:04:02,720 --> 00:04:07,189
support out there<font color="#CCCCCC"> I use Ben</font><font color="#E5E5E5"> that's fine</font>

92
00:04:05,209 --> 00:04:10,549
<font color="#E5E5E5">for everything so why bother but that's</font>

93
00:04:07,189 --> 00:04:11,599
that<font color="#E5E5E5"> doesn't mean all right here's some</font>

94
00:04:10,549 --> 00:04:12,729
of the<font color="#E5E5E5"> things people have been doing</font>

95
00:04:11,599 --> 00:04:17,358
with it

96
00:04:12,729 --> 00:04:18,470
the Russ compiler uses<font color="#CCCCCC"> LVM</font><font color="#E5E5E5"> so we get all</font>

97
00:04:17,358 --> 00:04:20,909
the benefits of<font color="#E5E5E5"> talking</font>

98
00:04:18,470 --> 00:04:24,480
toting all the stuff<font color="#CCCCCC"> LVM does</font>

99
00:04:20,910 --> 00:04:25,950
over here we've got<font color="#E5E5E5"> an operating</font><font color="#CCCCCC"> system</font>

100
00:04:24,480 --> 00:04:30,350
<font color="#E5E5E5">that people</font><font color="#CCCCCC"> have been</font><font color="#E5E5E5"> running in rust</font>

101
00:04:25,950 --> 00:04:32,909
called redox<font color="#E5E5E5"> so that's coming</font><font color="#CCCCCC"> along</font>

102
00:04:30,350 --> 00:04:34,790
<font color="#CCCCCC">someone's</font><font color="#E5E5E5"> here written an iOS app and</font>

103
00:04:32,910 --> 00:04:36,930
people<font color="#E5E5E5"> using</font><font color="#CCCCCC"> it for</font><font color="#E5E5E5"> embedded development</font>

104
00:04:34,790 --> 00:04:39,090
<font color="#CCCCCC">but if using it for embedded development</font>

105
00:04:36,930 --> 00:04:41,880
gonna lose a bunch of the stuff<font color="#CCCCCC"> and Stan</font>

106
00:04:39,090 --> 00:04:43,590
library obviously<font color="#CCCCCC"> but</font><font color="#E5E5E5"> still it</font><font color="#CCCCCC"> can do</font>

107
00:04:41,880 --> 00:04:45,659
things<font color="#E5E5E5"> there and if you want to find out</font>

108
00:04:43,590 --> 00:04:49,080
more about who's using<font color="#E5E5E5"> it you can go to</font>

109
00:04:45,660 --> 00:04:50,880
this URL<font color="#CCCCCC"> down the bottom and there's a</font>

110
00:04:49,080 --> 00:04:52,050
bunch<font color="#CCCCCC"> of company logos they often link</font>

111
00:04:50,880 --> 00:04:52,770
to blog<font color="#E5E5E5"> posts and</font><font color="#CCCCCC"> they explain</font><font color="#E5E5E5"> how</font>

112
00:04:52,050 --> 00:04:55,350
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> it but I've seen</font>

113
00:04:52,770 --> 00:04:58,409
interesting things like Coursera<font color="#E5E5E5"> was</font>

114
00:04:55,350 --> 00:05:00,270
easier to bootstrap container<font color="#E5E5E5"> runtimes</font>

115
00:04:58,410 --> 00:05:02,610
so they could run<font color="#CCCCCC"> untrusted containers</font>

116
00:05:00,270 --> 00:05:04,049
and stuff like that and Dropbox I think

117
00:05:02,610 --> 00:05:06,780
rewrote a bunch of their<font color="#E5E5E5"> storage engine</font>

118
00:05:04,050 --> 00:05:10,350
in it<font color="#E5E5E5"> so people are using it</font><font color="#CCCCCC"> beyond just</font>

119
00:05:06,780 --> 00:05:15,539
Mozilla so today we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go</font>

120
00:05:10,350 --> 00:05:17,520
through four bugs<font color="#CCCCCC"> where I'm gonna</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> a</font>

121
00:05:15,540 --> 00:05:19,170
code that's not<font color="#E5E5E5"> really exploitable code</font>

122
00:05:17,520 --> 00:05:20,430
for<font color="#E5E5E5"> these bugs but it's going to show</font>

123
00:05:19,170 --> 00:05:24,630
you the primitive<font color="#CCCCCC"> that might kind</font><font color="#E5E5E5"> of</font>

124
00:05:20,430 --> 00:05:25,830
lead<font color="#E5E5E5"> to this sort of bug if you and I'm</font>

125
00:05:24,630 --> 00:05:27,600
<font color="#E5E5E5">gonna use different languages to</font><font color="#CCCCCC"> make</font>

126
00:05:25,830 --> 00:05:30,300
these<font color="#E5E5E5"> points if you use one of these</font>

127
00:05:27,600 --> 00:05:31,770
<font color="#E5E5E5">languages C C++ go you're probably not</font>

128
00:05:30,300 --> 00:05:36,419
going to<font color="#E5E5E5"> like the code that appears on</font>

129
00:05:31,770 --> 00:05:40,260
<font color="#E5E5E5">the slide</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> that's not the</font>

130
00:05:36,419 --> 00:05:41,760
<font color="#CCCCCC">point</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> point is that someone we all</font>

131
00:05:40,260 --> 00:05:44,219
kind of work in one way or<font color="#CCCCCC"> another with</font>

132
00:05:41,760 --> 00:05:47,480
this guy this<font color="#CCCCCC"> guy is nelson bighetti</font>

133
00:05:44,220 --> 00:05:50,970
from a TV<font color="#CCCCCC"> show called Silicon Valley</font>

134
00:05:47,480 --> 00:05:54,540
<font color="#CCCCCC">he's kind of this hapless programmer who</font>

135
00:05:50,970 --> 00:05:56,840
kind of falls through life<font color="#E5E5E5"> he's by his</font>

136
00:05:54,540 --> 00:05:59,450
own<font color="#CCCCCC"> admission he's not a great coder</font><font color="#E5E5E5"> and</font>

137
00:05:56,840 --> 00:06:01,950
even though we might<font color="#E5E5E5"> write perfect code</font>

138
00:05:59,450 --> 00:06:04,099
nelson bighetti doesn't it's also called

139
00:06:01,950 --> 00:06:07,260
<font color="#CCCCCC">bighead i make</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> big-headed sometimes</font>

140
00:06:04,100 --> 00:06:09,600
and maybe your<font color="#E5E5E5"> teens great maybe your</font>

141
00:06:07,260 --> 00:06:11,490
team doesn't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a nelson bighetti in</font>

142
00:06:09,600 --> 00:06:12,810
it but maybe one<font color="#CCCCCC"> of the open source</font>

143
00:06:11,490 --> 00:06:14,640
libraries is something that you<font color="#E5E5E5"> depend</font>

144
00:06:12,810 --> 00:06:16,230
on maybe<font color="#CCCCCC"> the getty</font><font color="#E5E5E5"> made a commit there</font>

145
00:06:14,640 --> 00:06:17,789
or something at<font color="#E5E5E5"> some stage who knows but</font>

146
00:06:16,230 --> 00:06:20,040
there was curly out there that's trying

147
00:06:17,790 --> 00:06:24,630
<font color="#CCCCCC">to harm us</font><font color="#E5E5E5"> so that's what we're trying</font>

148
00:06:20,040 --> 00:06:26,040
<font color="#E5E5E5">to help to that end we kind of need some</font>

149
00:06:24,630 --> 00:06:28,710
sort<font color="#E5E5E5"> of model to see how we're going to</font>

150
00:06:26,040 --> 00:06:32,330
defend<font color="#E5E5E5"> ourselves against such code so</font>

151
00:06:28,710 --> 00:06:32,330
I've kind of got these

152
00:06:32,659 --> 00:06:38,849
<font color="#E5E5E5">concentric will not concentric circles</font>

153
00:06:34,800 --> 00:06:41,009
but conjoined circles<font color="#CCCCCC"> and any</font><font color="#E5E5E5"> program</font>

154
00:06:38,849 --> 00:06:43,740
<font color="#CCCCCC">bighead rights kind of lands somewhere</font>

155
00:06:41,009 --> 00:06:45,360
<font color="#E5E5E5">in this big circle right and so a bunch</font>

156
00:06:43,740 --> 00:06:48,210
of those<font color="#E5E5E5"> sometimes are going to be a</font>

157
00:06:45,360 --> 00:06:49,800
<font color="#E5E5E5">perfect program without bugs</font><font color="#CCCCCC"> most of the</font>

158
00:06:48,210 --> 00:06:51,659
time they're not they're out here and

159
00:06:49,800 --> 00:06:54,780
what we kind<font color="#E5E5E5"> of want</font><font color="#CCCCCC"> to do is kind of</font>

160
00:06:51,659 --> 00:06:56,069
force<font color="#E5E5E5"> these programs in</font><font color="#CCCCCC"> into not</font>

161
00:06:54,780 --> 00:07:00,419
reaching into our<font color="#CCCCCC"> production environment</font>

162
00:06:56,069 --> 00:07:02,550
<font color="#CCCCCC">okay so we can put one</font><font color="#E5E5E5"> barrier behind</font>

163
00:07:00,419 --> 00:07:05,219
that<font color="#E5E5E5"> we're gonna make him</font><font color="#CCCCCC"> Musa compiled</font>

164
00:07:02,550 --> 00:07:08,039
language right so he can't bash his<font color="#CCCCCC"> head</font>

165
00:07:05,219 --> 00:07:09,750
on the keyboard anymore<font color="#E5E5E5"> and run a Perl</font>

166
00:07:08,039 --> 00:07:12,690
<font color="#CCCCCC">program or something</font><font color="#E5E5E5"> so he has to</font>

167
00:07:09,750 --> 00:07:16,680
actually now<font color="#CCCCCC"> compose programs he didn't</font>

168
00:07:12,690 --> 00:07:18,180
pick up naming variable<font color="#E5E5E5"> errors and stuff</font>

169
00:07:16,680 --> 00:07:21,509
like that you might<font color="#E5E5E5"> get an interpreted</font>

170
00:07:18,180 --> 00:07:23,460
language<font color="#E5E5E5"> we're also gonna</font><font color="#CCCCCC"> make him run</font>

171
00:07:21,509 --> 00:07:26,280
tests and we might<font color="#E5E5E5"> have some sort of</font>

172
00:07:23,460 --> 00:07:28,650
static code analysis or something<font color="#E5E5E5"> so</font>

173
00:07:26,280 --> 00:07:31,830
we're kind of each time<font color="#CCCCCC"> Co se</font><font color="#E5E5E5"> and closer</font>

174
00:07:28,650 --> 00:07:34,739
and<font color="#E5E5E5"> closer so now I</font><font color="#CCCCCC"> buy</font><font color="#E5E5E5"> random if his</font>

175
00:07:31,830 --> 00:07:38,068
program<font color="#E5E5E5"> lands anywhere in here</font><font color="#CCCCCC"> you know</font>

176
00:07:34,740 --> 00:07:40,349
<font color="#E5E5E5">we getting floating close to this small</font>

177
00:07:38,069 --> 00:07:43,979
circle<font color="#E5E5E5"> so let's start off with buffer</font>

178
00:07:40,349 --> 00:07:49,889
overflows he's a program<font color="#CCCCCC"> bigot</font><font color="#E5E5E5"> he's</font>

179
00:07:43,979 --> 00:07:51,659
written<font color="#CCCCCC"> we create a array length</font><font color="#E5E5E5"> five he</font>

180
00:07:49,889 --> 00:07:53,069
wants to look at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last element and he</font>

181
00:07:51,659 --> 00:07:56,270
wants<font color="#E5E5E5"> to look at the ninth element for</font>

182
00:07:53,069 --> 00:08:00,289
some reason so<font color="#CCCCCC"> what happened by</font><font color="#E5E5E5"> the way</font>

183
00:07:56,270 --> 00:08:02,370
<font color="#E5E5E5">just down</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the bottom right you'll see</font>

184
00:08:00,289 --> 00:08:03,628
<font color="#E5E5E5">text</font><font color="#CCCCCC"> that you probably</font><font color="#E5E5E5"> can't read these</font>

185
00:08:02,370 --> 00:08:05,729
slides going to be online

186
00:08:03,629 --> 00:08:07,770
<font color="#E5E5E5">straight away afterwards</font><font color="#CCCCCC"> and there's a</font>

187
00:08:05,729 --> 00:08:11,940
github<font color="#E5E5E5"> repo</font><font color="#CCCCCC"> this is the folder where</font><font color="#E5E5E5"> you</font>

188
00:08:07,770 --> 00:08:14,039
can<font color="#E5E5E5"> find each code each file for the</font>

189
00:08:11,940 --> 00:08:15,090
examples and you can<font color="#E5E5E5"> build them and play</font>

190
00:08:14,039 --> 00:08:16,190
<font color="#E5E5E5">with these things yourself so that's</font>

191
00:08:15,090 --> 00:08:20,310
that's what that is

192
00:08:16,190 --> 00:08:21,870
but yeah he's written this<font color="#CCCCCC"> code</font><font color="#E5E5E5"> but</font>

193
00:08:20,310 --> 00:08:23,580
<font color="#E5E5E5">we're forcing him to compile so what</font>

194
00:08:21,870 --> 00:08:26,069
happens when he uses his toolset to

195
00:08:23,580 --> 00:08:29,669
<font color="#E5E5E5">compile he gets a</font><font color="#CCCCCC"> warning the warning is</font>

196
00:08:26,069 --> 00:08:30,870
kinda useful right so we get index known

197
00:08:29,669 --> 00:08:32,909
as past the end<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> array</font><font color="#E5E5E5"> that's</font>

198
00:08:30,870 --> 00:08:36,719
that's pretty<font color="#E5E5E5"> informative and it shows</font>

199
00:08:32,909 --> 00:08:40,468
you<font color="#CCCCCC"> exactly where it's happening what's</font>

200
00:08:36,719 --> 00:08:41,820
the problem with this is we can't

201
00:08:40,469 --> 00:08:44,210
guarantee what's going to happen if<font color="#E5E5E5"> you</font>

202
00:08:41,820 --> 00:08:46,850
do this if it's reading

203
00:08:44,210 --> 00:08:50,300
obviously memory somewhere<font color="#E5E5E5"> the program</font>

204
00:08:46,850 --> 00:08:51,770
may crush it might not<font color="#E5E5E5"> in this case is</font>

205
00:08:50,300 --> 00:08:53,449
just<font color="#E5E5E5"> reading</font><font color="#CCCCCC"> the memory but if he's</font>

206
00:08:51,770 --> 00:08:57,500
writing it<font color="#E5E5E5"> it could be far far worse</font>

207
00:08:53,450 --> 00:08:59,570
right<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> what we're dealing with</font>

208
00:08:57,500 --> 00:09:02,570
<font color="#E5E5E5">here but we can implement another</font>

209
00:08:59,570 --> 00:09:05,240
control<font color="#CCCCCC"> we can just tell the compiler</font>

210
00:09:02,570 --> 00:09:07,550
with the W error flag all right all your

211
00:09:05,240 --> 00:09:10,270
<font color="#E5E5E5">warnings and our errors it's not going a</font>

212
00:09:07,550 --> 00:09:13,219
producer binary for this bit of code

213
00:09:10,270 --> 00:09:14,660
<font color="#E5E5E5">well this is kind of simple code</font><font color="#CCCCCC"> there</font>

214
00:09:13,220 --> 00:09:18,260
<font color="#E5E5E5">right we can obviously see</font><font color="#CCCCCC"> what</font>

215
00:09:14,660 --> 00:09:20,180
interesting past<font color="#CCCCCC"> thee into the array but</font>

216
00:09:18,260 --> 00:09:23,810
what if we try<font color="#E5E5E5"> and take</font><font color="#CCCCCC"> out index from</font>

217
00:09:20,180 --> 00:09:25,849
standard input<font color="#CCCCCC"> well it's kind of hard to</font>

218
00:09:23,810 --> 00:09:27,170
analyze<font color="#E5E5E5"> this now for</font><font color="#CCCCCC"> the compiler to</font>

219
00:09:25,850 --> 00:09:28,850
consider all cases<font color="#E5E5E5"> because there's going</font>

220
00:09:27,170 --> 00:09:33,140
to<font color="#CCCCCC"> be valid indexes that</font><font color="#E5E5E5"> are submitted</font>

221
00:09:28,850 --> 00:09:34,460
as well so we<font color="#E5E5E5"> have to through some other</font>

222
00:09:33,140 --> 00:09:37,760
form<font color="#E5E5E5"> of static code analysis or</font>

223
00:09:34,460 --> 00:09:39,529
something encourage bounds checking<font color="#E5E5E5"> and</font>

224
00:09:37,760 --> 00:09:41,350
of course we've got<font color="#E5E5E5"> runtime protections</font>

225
00:09:39,529 --> 00:09:44,720
like<font color="#E5E5E5"> stack cookies and</font><font color="#CCCCCC"> stuff like that</font>

226
00:09:41,350 --> 00:09:47,360
<font color="#CCCCCC">to</font><font color="#E5E5E5"> prevent you know writing over other</font>

227
00:09:44,720 --> 00:09:49,100
variables<font color="#E5E5E5"> in the stack</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> beyond that</font>

228
00:09:47,360 --> 00:09:53,900
it's good to<font color="#CCCCCC"> exercise these sorts of</font>

229
00:09:49,100 --> 00:09:56,810
things<font color="#E5E5E5"> so here's some</font><font color="#CCCCCC"> Russ code</font><font color="#E5E5E5"> very</font>

230
00:09:53,900 --> 00:09:59,449
first bit<font color="#CCCCCC"> of rust code we're still</font>

231
00:09:56,810 --> 00:10:02,930
declaring an array of<font color="#E5E5E5"> five variables</font><font color="#CCCCCC"> of</font>

232
00:09:59,450 --> 00:10:05,390
five elements<font color="#CCCCCC"> the</font><font color="#E5E5E5"> size</font><font color="#CCCCCC"> is here</font><font color="#E5E5E5"> those</font>

233
00:10:02,930 --> 00:10:07,880
things are signed 32-bit integers<font color="#E5E5E5"> as it</font>

234
00:10:05,390 --> 00:10:10,160
says<font color="#CCCCCC"> here we want</font><font color="#E5E5E5"> to index the last</font>

235
00:10:07,880 --> 00:10:12,830
element and the<font color="#E5E5E5"> ninth element and again</font>

236
00:10:10,160 --> 00:10:15,529
compiled language<font color="#E5E5E5"> okay compiler throws</font>

237
00:10:12,830 --> 00:10:20,290
out<font color="#E5E5E5"> a warning it's very similar right to</font>

238
00:10:15,529 --> 00:10:24,339
the<font color="#CCCCCC"> C one that's just a warning again so</font>

239
00:10:20,290 --> 00:10:26,630
we can<font color="#CCCCCC"> do some linting on this code and</font>

240
00:10:24,339 --> 00:10:30,050
we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> turn that warning into an error</font>

241
00:10:26,630 --> 00:10:32,180
<font color="#E5E5E5">the linter in rust is the separate tool</font>

242
00:10:30,050 --> 00:10:34,699
called clipping and like other linters

243
00:10:32,180 --> 00:10:36,529
that lets you conditionally turn sort

244
00:10:34,700 --> 00:10:41,209
some sorts of warnings<font color="#E5E5E5"> into errors and</font>

245
00:10:36,529 --> 00:10:43,100
others not<font color="#CCCCCC"> but again what if we take our</font>

246
00:10:41,209 --> 00:10:44,660
index from standard input

247
00:10:43,100 --> 00:10:48,560
<font color="#CCCCCC">we can't kind of detect that sort of</font>

248
00:10:44,660 --> 00:10:51,110
thing<font color="#CCCCCC"> so we write</font><font color="#E5E5E5"> that program we run it</font>

249
00:10:48,560 --> 00:10:53,750
with a an audience and out<font color="#E5E5E5"> of bounds</font>

250
00:10:51,110 --> 00:10:56,129
index and the program crashes<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it</font>

251
00:10:53,750 --> 00:10:57,930
kind<font color="#E5E5E5"> of crashes gracefully</font>

252
00:10:56,129 --> 00:10:59,730
it's got information<font color="#E5E5E5"> it tells us you're</font>

253
00:10:57,930 --> 00:11:02,430
<font color="#CCCCCC">trying to</font><font color="#E5E5E5"> get to the index 10 but the</font>

254
00:10:59,730 --> 00:11:04,350
only length<font color="#E5E5E5"> is only</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> and it even tells</font>

255
00:11:02,430 --> 00:11:06,569
us if<font color="#E5E5E5"> we set this environment variable</font>

256
00:11:04,350 --> 00:11:10,350
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we could get a whole stack trace</font>

257
00:11:06,569 --> 00:11:12,930
for this so that's<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> what's</font>

258
00:11:10,350 --> 00:11:14,970
actually happening here<font color="#CCCCCC"> is because</font><font color="#E5E5E5"> Russ</font>

259
00:11:12,930 --> 00:11:16,469
<font color="#E5E5E5">knows the length the array it can</font>

260
00:11:14,970 --> 00:11:19,889
automatically build in a bounced check

261
00:11:16,470 --> 00:11:21,209
in the compiled<font color="#E5E5E5"> program</font><font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> doing</font>

262
00:11:19,889 --> 00:11:23,279
<font color="#CCCCCC">a bounce it's</font><font color="#E5E5E5"> going to throw you over to</font>

263
00:11:21,209 --> 00:11:23,790
<font color="#E5E5E5">the standard routine for</font><font color="#CCCCCC"> balance</font>

264
00:11:23,279 --> 00:11:25,589
checking

265
00:11:23,790 --> 00:11:28,800
otherwise it's<font color="#E5E5E5"> going to continue</font><font color="#CCCCCC"> doing</font>

266
00:11:25,589 --> 00:11:30,059
normal things<font color="#E5E5E5"> and just as an aside we</font>

267
00:11:28,800 --> 00:11:31,290
can see here the array being<font color="#E5E5E5"> built on</font>

268
00:11:30,059 --> 00:11:35,339
<font color="#E5E5E5">the stack and</font><font color="#CCCCCC"> you can see some of</font><font color="#E5E5E5"> the</font>

269
00:11:31,290 --> 00:11:37,860
optimizations<font color="#E5E5E5"> we get out of</font><font color="#CCCCCC"> LLVM to</font>

270
00:11:35,339 --> 00:11:41,490
improve performance<font color="#CCCCCC"> and speed</font><font color="#E5E5E5"> so what</font>

271
00:11:37,860 --> 00:11:44,579
have we<font color="#E5E5E5"> done we're compiling music</font>

272
00:11:41,490 --> 00:11:46,110
compiled language<font color="#E5E5E5"> and on top of tests</font>

273
00:11:44,579 --> 00:11:47,729
and static code analysis that<font color="#E5E5E5"> may exist</font>

274
00:11:46,110 --> 00:11:49,110
<font color="#E5E5E5">we've got a linter that we can use</font>

275
00:11:47,730 --> 00:11:50,670
there's nothing particularly<font color="#E5E5E5"> special at</font>

276
00:11:49,110 --> 00:11:53,309
this stage this<font color="#E5E5E5"> is similar</font><font color="#CCCCCC"> to other</font>

277
00:11:50,670 --> 00:11:56,639
languages<font color="#CCCCCC"> but</font><font color="#E5E5E5"> that's what we have for</font>

278
00:11:53,309 --> 00:12:00,300
<font color="#E5E5E5">this kind of bug about</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> pointer</font>

279
00:11:56,639 --> 00:12:03,089
<font color="#E5E5E5">dereferences so here's an awesome C</font>

280
00:12:00,300 --> 00:12:05,819
program that<font color="#CCCCCC"> big a DS written we've got</font>

281
00:12:03,089 --> 00:12:07,350
some pointer<font color="#E5E5E5"> a bunch of stuff happens</font>

282
00:12:05,819 --> 00:12:09,240
with that<font color="#E5E5E5"> pointer</font><font color="#CCCCCC"> and a bunch of code</font>

283
00:12:07,350 --> 00:12:10,620
<font color="#CCCCCC">that</font><font color="#E5E5E5"> have excluded might have tried to</font>

284
00:12:09,240 --> 00:12:13,620
<font color="#E5E5E5">allocate some memory to it</font><font color="#CCCCCC"> or something</font>

285
00:12:10,620 --> 00:12:17,149
<font color="#CCCCCC">and</font><font color="#E5E5E5"> when we try and write to that our</font>

286
00:12:13,620 --> 00:12:19,470
whole<font color="#E5E5E5"> programs gonna explode right so</font>

287
00:12:17,149 --> 00:12:22,800
what should<font color="#E5E5E5"> you be doing should be</font>

288
00:12:19,470 --> 00:12:26,519
checking for<font color="#E5E5E5"> nails</font><font color="#CCCCCC"> before we try and use</font>

289
00:12:22,800 --> 00:12:29,399
them this actually does matter and rust

290
00:12:26,519 --> 00:12:31,439
<font color="#CCCCCC">despite</font><font color="#E5E5E5"> all the safety and everything</font><font color="#CCCCCC"> in</font>

291
00:12:29,399 --> 00:12:34,410
rust you can also do unsafe things<font color="#E5E5E5"> if</font>

292
00:12:31,439 --> 00:12:37,079
you want to talk<font color="#E5E5E5"> directly to hardware or</font>

293
00:12:34,410 --> 00:12:39,410
if you want<font color="#E5E5E5"> to optimize things somehow</font>

294
00:12:37,079 --> 00:12:41,670
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you feel you need even</font><font color="#CCCCCC"> more control</font>

295
00:12:39,410 --> 00:12:44,339
<font color="#CCCCCC">yeah you can do that but you just</font><font color="#E5E5E5"> have</font>

296
00:12:41,670 --> 00:12:47,219
<font color="#E5E5E5">to be explicit and put it in this unsafe</font>

297
00:12:44,339 --> 00:12:49,319
block yeah so let's have a look<font color="#E5E5E5"> at some</font>

298
00:12:47,220 --> 00:12:52,319
unsafe code<font color="#E5E5E5"> we've got a string that we</font>

299
00:12:49,319 --> 00:12:54,029
build up a rough string<font color="#CCCCCC"> which has the</font>

300
00:12:52,319 --> 00:12:57,050
pointer which it starts with and<font color="#CCCCCC"> its</font>

301
00:12:54,029 --> 00:12:58,820
length<font color="#E5E5E5"> we get the pointer</font>

302
00:12:57,050 --> 00:13:02,000
we print both<font color="#E5E5E5"> those out so</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see</font>

303
00:12:58,820 --> 00:13:04,490
<font color="#E5E5E5">hello world</font><font color="#CCCCCC"> the address</font><font color="#E5E5E5"> of it</font><font color="#CCCCCC"> then we</font>

304
00:13:02,000 --> 00:13:07,580
create a<font color="#CCCCCC"> C string</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so we can do that</font>

305
00:13:04,490 --> 00:13:09,529
<font color="#CCCCCC">a nice nail terminate string here and</font>

306
00:13:07,580 --> 00:13:12,640
<font color="#CCCCCC">then we get</font><font color="#E5E5E5"> to some unsafe code so we</font>

307
00:13:09,529 --> 00:13:15,230
<font color="#E5E5E5">can actually use printer from Lib C and</font>

308
00:13:12,640 --> 00:13:18,680
<font color="#CCCCCC">take</font><font color="#E5E5E5"> this format string chuck it into</font>

309
00:13:15,230 --> 00:13:24,410
<font color="#E5E5E5">printf give it our pointer and now</font><font color="#CCCCCC"> C</font>

310
00:13:18,680 --> 00:13:26,750
code is printing<font color="#E5E5E5"> out our string you can</font>

311
00:13:24,410 --> 00:13:28,160
this is nice we've got Lib C here for us

312
00:13:26,750 --> 00:13:30,110
in this case but if you've got<font color="#CCCCCC"> your</font><font color="#E5E5E5"> own</font>

313
00:13:28,160 --> 00:13:33,829
C code that you<font color="#E5E5E5"> want to call out</font><font color="#CCCCCC"> to</font>

314
00:13:30,110 --> 00:13:36,170
there's a tool<font color="#CCCCCC"> called Bonjean as well so</font>

315
00:13:33,830 --> 00:13:38,540
you can generate rust bindings for your

316
00:13:36,170 --> 00:13:40,279
C code and<font color="#E5E5E5"> whatnot and there's plenty of</font>

317
00:13:38,540 --> 00:13:43,010
function foreign function interface is

318
00:13:40,279 --> 00:13:45,620
for other<font color="#E5E5E5"> languages as well so that's</font>

319
00:13:43,010 --> 00:13:47,209
what we do there<font color="#E5E5E5"> that's a bit of C code</font>

320
00:13:45,620 --> 00:13:49,279
that we consider unsafe because<font color="#E5E5E5"> we're</font>

321
00:13:47,209 --> 00:13:50,869
<font color="#E5E5E5">calling out but there's also</font><font color="#CCCCCC"> Russ code</font>

322
00:13:49,279 --> 00:13:53,029
that's unsafe apart from the stuff we're

323
00:13:50,870 --> 00:13:56,110
creating in the standard library<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

324
00:13:53,029 --> 00:13:58,160
say hey create the string from<font color="#CCCCCC"> raw parts</font>

325
00:13:56,110 --> 00:13:59,990
<font color="#E5E5E5">here's where it</font><font color="#CCCCCC"> starts it's going to go</font>

326
00:13:58,160 --> 00:14:01,189
<font color="#E5E5E5">through this long and then</font><font color="#CCCCCC"> when we have</font>

327
00:13:59,990 --> 00:14:02,720
a<font color="#E5E5E5"> look at that we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see the</font><font color="#CCCCCC"> original</font>

328
00:14:01,190 --> 00:14:04,070
<font color="#E5E5E5">string</font><font color="#CCCCCC"> is still</font><font color="#E5E5E5"> fine</font><font color="#CCCCCC"> but we've got this</font>

329
00:14:02,720 --> 00:14:06,410
<font color="#CCCCCC">corrupters</font><font color="#E5E5E5"> dream where</font><font color="#CCCCCC"> it just keeps a</font>

330
00:14:04,070 --> 00:14:07,070
reading past memory so we can do stuff

331
00:14:06,410 --> 00:14:08,750
<font color="#CCCCCC">like</font><font color="#E5E5E5"> that</font>

332
00:14:07,070 --> 00:14:13,339
<font color="#CCCCCC">that's kind of why we care about</font><font color="#E5E5E5"> null</font>

333
00:14:08,750 --> 00:14:15,500
pointer<font color="#E5E5E5"> dereference and still so he's an</font>

334
00:14:13,339 --> 00:14:17,270
equally bad program<font color="#CCCCCC"> in</font><font color="#E5E5E5"> rust where we</font>

335
00:14:15,500 --> 00:14:19,459
create a pointer<font color="#E5E5E5"> that's a null pointer</font>

336
00:14:17,270 --> 00:14:21,230
and<font color="#E5E5E5"> we actually explicitly have to</font>

337
00:14:19,459 --> 00:14:25,219
create it as mutable by the way another

338
00:14:21,230 --> 00:14:27,550
kind of safety<font color="#CCCCCC"> /</font><font color="#E5E5E5"> optimization thing all</font>

339
00:14:25,220 --> 00:14:30,200
your data files by default<font color="#E5E5E5"> are immutable</font>

340
00:14:27,550 --> 00:14:31,370
<font color="#CCCCCC">so we have to say hey this seems</font><font color="#E5E5E5"> to be</font>

341
00:14:30,200 --> 00:14:34,070
mutable because I want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> change it</font>

342
00:14:31,370 --> 00:14:38,390
later<font color="#E5E5E5"> on and then we try and dereference</font>

343
00:14:34,070 --> 00:14:41,020
it and change it<font color="#CCCCCC"> what happens segfault</font>

344
00:14:38,390 --> 00:14:43,699
<font color="#CCCCCC">in rust</font><font color="#E5E5E5"> okay</font>

345
00:14:41,020 --> 00:14:46,579
so<font color="#E5E5E5"> Russ gives us a tool to kind</font><font color="#CCCCCC"> of deal</font>

346
00:14:43,700 --> 00:14:49,190
with<font color="#E5E5E5"> this in the sea world we're kind of</font>

347
00:14:46,579 --> 00:14:51,529
dealing with these<font color="#E5E5E5"> pointers but Russ</font>

348
00:14:49,190 --> 00:14:53,630
gives us an alternative<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is we</font><font color="#E5E5E5"> have</font>

349
00:14:51,529 --> 00:14:56,240
what's called<font color="#E5E5E5"> an option type which in</font>

350
00:14:53,630 --> 00:14:59,180
turn<font color="#E5E5E5"> wraps around a</font><font color="#CCCCCC"> non-normal type</font>

351
00:14:56,240 --> 00:15:01,310
which wraps around a<font color="#CCCCCC"> tee which is</font><font color="#E5E5E5"> just</font>

352
00:14:59,180 --> 00:15:03,859
any<font color="#E5E5E5"> any title so like that point it</font>

353
00:15:01,310 --> 00:15:05,430
could point to and in a string<font color="#CCCCCC"> whatever</font>

354
00:15:03,860 --> 00:15:08,550
<font color="#E5E5E5">that</font><font color="#CCCCCC"> T can be</font><font color="#E5E5E5"> what</font>

355
00:15:05,430 --> 00:15:09,719
<font color="#E5E5E5">okay so we have two</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> types</font><font color="#CCCCCC"> in</font>

356
00:15:08,550 --> 00:15:14,969
<font color="#E5E5E5">two different languages of dealing with</font>

357
00:15:09,720 --> 00:15:18,390
<font color="#E5E5E5">this and when we look at what can</font><font color="#CCCCCC"> be in</font>

358
00:15:14,970 --> 00:15:20,010
that<font color="#CCCCCC"> C type we get heaps and heaps of</font>

359
00:15:18,390 --> 00:15:22,080
values right<font color="#E5E5E5"> these are all valid values</font>

360
00:15:20,010 --> 00:15:24,810
for<font color="#E5E5E5"> that type anything from zero through</font>

361
00:15:22,080 --> 00:15:27,480
<font color="#CCCCCC">the</font><font color="#E5E5E5"> it max when we talk about the</font><font color="#CCCCCC"> RUS</font>

362
00:15:24,810 --> 00:15:30,209
type there's only two valid values<font color="#CCCCCC"> so</font>

363
00:15:27,480 --> 00:15:34,530
those two valid values are none or some

364
00:15:30,210 --> 00:15:36,840
and so if I ever<font color="#E5E5E5"> want to use something</font>

365
00:15:34,530 --> 00:15:38,250
that<font color="#E5E5E5"> is an option type my first step is</font>

366
00:15:36,840 --> 00:15:40,860
I have to check<font color="#E5E5E5"> whether I've got the</font>

367
00:15:38,250 --> 00:15:42,090
none version or the some version and

368
00:15:40,860 --> 00:15:43,260
I'll show you<font color="#E5E5E5"> in code how to do this in</font>

369
00:15:42,090 --> 00:15:45,930
a<font color="#E5E5E5"> second I just</font><font color="#CCCCCC"> thought</font><font color="#E5E5E5"> explain this a</font>

370
00:15:43,260 --> 00:15:47,939
<font color="#E5E5E5">bit first</font><font color="#CCCCCC"> so I have to do that check</font>

371
00:15:45,930 --> 00:15:51,959
first<font color="#E5E5E5"> and then I can access the</font>

372
00:15:47,940 --> 00:15:54,990
underlying value in<font color="#E5E5E5"> C I get</font><font color="#CCCCCC"> the value</font>

373
00:15:51,960 --> 00:15:57,900
first<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I have</font><font color="#CCCCCC"> to on my own</font><font color="#E5E5E5"> remember</font>

374
00:15:54,990 --> 00:15:58,800
to check for<font color="#E5E5E5"> that null pointer of course</font>

375
00:15:57,900 --> 00:16:00,420
there's things<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> help you</font><font color="#E5E5E5"> with</font>

376
00:15:58,800 --> 00:16:03,240
this<font color="#E5E5E5"> again in static analysis and</font>

377
00:16:00,420 --> 00:16:05,640
<font color="#E5E5E5">whatnot</font><font color="#CCCCCC"> but generally this</font><font color="#E5E5E5"> is what</font>

378
00:16:03,240 --> 00:16:07,830
you're<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> with and also I want to</font>

379
00:16:05,640 --> 00:16:11,160
<font color="#E5E5E5">point out in terms of</font><font color="#CCCCCC"> rust performance</font>

380
00:16:07,830 --> 00:16:12,960
and things<font color="#E5E5E5"> it talks about zero cost of</font>

381
00:16:11,160 --> 00:16:14,579
distractions a lot so here we have a

382
00:16:12,960 --> 00:16:17,010
zero cost<font color="#CCCCCC"> abstraction and</font><font color="#E5E5E5"> the</font>

383
00:16:14,580 --> 00:16:20,580
<font color="#CCCCCC">programming language we have these kind</font>

384
00:16:17,010 --> 00:16:21,930
<font color="#CCCCCC">of like rich types</font><font color="#E5E5E5"> which you know an</font>

385
00:16:20,580 --> 00:16:23,970
option type which becomes two types

386
00:16:21,930 --> 00:16:25,890
which then I<font color="#CCCCCC"> actually get a value but</font>

387
00:16:23,970 --> 00:16:27,570
this is actually<font color="#E5E5E5"> stored we're still</font>

388
00:16:25,890 --> 00:16:32,790
talking<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that's just four bytes</font>

389
00:16:27,570 --> 00:16:35,100
long on a 32-bit system<font color="#E5E5E5"> and if it's zero</font>

390
00:16:32,790 --> 00:16:37,079
<font color="#CCCCCC">it's what we consider none if it's not</font>

391
00:16:35,100 --> 00:16:39,840
zero it's<font color="#E5E5E5"> the some time so underneath</font>

392
00:16:37,080 --> 00:16:42,870
<font color="#E5E5E5">it's all the same</font><font color="#CCCCCC"> but when accessing</font><font color="#E5E5E5"> it</font>

393
00:16:39,840 --> 00:16:44,280
via the programming language it's we've

394
00:16:42,870 --> 00:16:52,560
got these there across the<font color="#CCCCCC"> instruction</font>

395
00:16:44,280 --> 00:16:54,510
on<font color="#E5E5E5"> top so he's our program now we've got</font>

396
00:16:52,560 --> 00:16:57,359
our pointer and then immediately<font color="#E5E5E5"> we</font>

397
00:16:54,510 --> 00:17:00,060
convert<font color="#CCCCCC"> that to a option type of an</font>

398
00:16:57,360 --> 00:17:03,090
<font color="#CCCCCC">unknown pointer scientific point of</font>

399
00:17:00,060 --> 00:17:05,550
<font color="#E5E5E5">science into</font><font color="#CCCCCC"> bit number</font><font color="#E5E5E5"> and if we want</font>

400
00:17:03,090 --> 00:17:06,959
to<font color="#CCCCCC"> access the underlying value here we</font>

401
00:17:05,550 --> 00:17:08,760
have to do this<font color="#E5E5E5"> this is kind of like</font><font color="#CCCCCC"> a</font>

402
00:17:06,959 --> 00:17:11,220
switch statement<font color="#CCCCCC"> it's called a match</font>

403
00:17:08,760 --> 00:17:13,079
statement or pattern matching<font color="#E5E5E5"> so we take</font>

404
00:17:11,220 --> 00:17:14,670
this good pointer<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> want to check</font>

405
00:17:13,079 --> 00:17:17,849
if we<font color="#CCCCCC"> have the son version or the</font>

406
00:17:14,670 --> 00:17:20,250
version if you've got the<font color="#E5E5E5"> non version</font>

407
00:17:17,849 --> 00:17:23,310
<font color="#E5E5E5">we're just going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> print out or log or</font>

408
00:17:20,250 --> 00:17:25,050
<font color="#E5E5E5">something the fact that this happened</font><font color="#CCCCCC"> if</font>

409
00:17:23,310 --> 00:17:27,030
we've<font color="#E5E5E5"> got the</font><font color="#CCCCCC"> son version</font><font color="#E5E5E5"> this is where</font>

410
00:17:25,050 --> 00:17:30,540
we now<font color="#CCCCCC"> have permission to</font><font color="#E5E5E5"> get the</font>

411
00:17:27,030 --> 00:17:33,840
underlying<font color="#CCCCCC"> value</font><font color="#E5E5E5"> this P is the what's</font>

412
00:17:30,540 --> 00:17:35,820
the<font color="#CCCCCC"> non null pointer</font><font color="#E5E5E5"> and then we can get</font>

413
00:17:33,840 --> 00:17:37,530
<font color="#CCCCCC">non null pointer has</font><font color="#E5E5E5"> a method on it</font>

414
00:17:35,820 --> 00:17:39,840
<font color="#E5E5E5">called as pointer that's the</font><font color="#CCCCCC"> actual</font>

415
00:17:37,530 --> 00:17:41,460
value we can dereference that<font color="#E5E5E5"> okay so</font>

416
00:17:39,840 --> 00:17:43,560
this is all still happening in<font color="#E5E5E5"> my unsafe</font>

417
00:17:41,460 --> 00:17:46,050
<font color="#CCCCCC">block I'm providing protections around</font>

418
00:17:43,560 --> 00:17:48,240
<font color="#E5E5E5">it but because I provided those</font>

419
00:17:46,050 --> 00:17:50,639
protections I can also now move my

420
00:17:48,240 --> 00:17:53,190
unsafe block<font color="#E5E5E5"> further in okay so you can</font>

421
00:17:50,640 --> 00:17:54,720
be more explicit<font color="#E5E5E5"> about what might</font><font color="#CCCCCC"> be a</font>

422
00:17:53,190 --> 00:17:58,920
source of memory corruption or something

423
00:17:54,720 --> 00:18:00,870
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that so unsafe code</font><font color="#E5E5E5"> can cause bugs</font>

424
00:17:58,920 --> 00:18:02,340
<font color="#E5E5E5">anywhere else in your program because</font>

425
00:18:00,870 --> 00:18:04,770
<font color="#E5E5E5">you can put the programming in invalid</font>

426
00:18:02,340 --> 00:18:07,280
<font color="#E5E5E5">state but if you're trying</font><font color="#CCCCCC"> to track down</font>

427
00:18:04,770 --> 00:18:09,900
<font color="#CCCCCC">those bugs</font><font color="#E5E5E5"> it's probably a reasonable</font>

428
00:18:07,280 --> 00:18:11,160
step to start with looking<font color="#CCCCCC"> in the unsafe</font>

429
00:18:09,900 --> 00:18:15,980
blocks<font color="#E5E5E5"> so that's going to</font><font color="#CCCCCC"> help you with</font>

430
00:18:11,160 --> 00:18:19,520
<font color="#CCCCCC">that sort of stuff so what</font><font color="#E5E5E5"> have we done</font>

431
00:18:15,980 --> 00:18:23,070
<font color="#E5E5E5">we've got again that compilation step</font>

432
00:18:19,520 --> 00:18:25,560
we've got our tests<font color="#CCCCCC"> and code analysis</font>

433
00:18:23,070 --> 00:18:27,000
but now we've<font color="#E5E5E5"> actually reduced the size</font>

434
00:18:25,560 --> 00:18:30,510
of<font color="#CCCCCC"> that circle of</font><font color="#E5E5E5"> programs that will</font>

435
00:18:27,000 --> 00:18:33,180
compile<font color="#CCCCCC"> there's no way that he can</font>

436
00:18:30,510 --> 00:18:37,050
<font color="#CCCCCC">access that underlying pointer without</font>

437
00:18:33,180 --> 00:18:38,340
going through<font color="#CCCCCC"> that option type so the</font>

438
00:18:37,050 --> 00:18:42,780
type checker is<font color="#E5E5E5"> giving us a bit more</font>

439
00:18:38,340 --> 00:18:47,610
safety<font color="#E5E5E5"> there all</font><font color="#CCCCCC"> right so dangling</font>

440
00:18:42,780 --> 00:18:50,010
pointers<font color="#E5E5E5"> we might see these creep up in</font>

441
00:18:47,610 --> 00:18:54,929
use<font color="#E5E5E5"> after free or double free sort of</font>

442
00:18:50,010 --> 00:18:57,180
bugs<font color="#E5E5E5"> where we kind of lose clarity over</font>

443
00:18:54,930 --> 00:19:02,820
<font color="#CCCCCC">who has responsibility for a particular</font>

444
00:18:57,180 --> 00:19:06,600
piece<font color="#CCCCCC"> of data so here we have a string</font>

445
00:19:02,820 --> 00:19:09,480
being created called<font color="#E5E5E5"> foo and pointer</font>

446
00:19:06,600 --> 00:19:11,010
also points to foo so now immediately

447
00:19:09,480 --> 00:19:12,390
these<font color="#E5E5E5"> two things both have</font>

448
00:19:11,010 --> 00:19:14,879
responsibility<font color="#CCCCCC"> for it they</font><font color="#E5E5E5"> both have</font>

449
00:19:12,390 --> 00:19:17,700
ability<font color="#CCCCCC"> to do things</font><font color="#E5E5E5"> to this</font><font color="#CCCCCC"> dream we</font>

450
00:19:14,880 --> 00:19:19,200
can<font color="#E5E5E5"> print them both out to give us the</font>

451
00:19:17,700 --> 00:19:22,269
name<font color="#E5E5E5"> of the variable</font><font color="#CCCCCC"> the</font>

452
00:19:19,200 --> 00:19:25,779
the address of it and the<font color="#E5E5E5"> value that's</font>

453
00:19:22,269 --> 00:19:28,720
<font color="#CCCCCC">there true then decides that it wants to</font>

454
00:19:25,779 --> 00:19:30,580
clean itself up<font color="#E5E5E5"> so we delete through we</font>

455
00:19:28,720 --> 00:19:32,679
get rid of null pointer<font color="#E5E5E5"> we set it to</font>

456
00:19:30,580 --> 00:19:34,928
null pointer and now we go to<font color="#E5E5E5"> print both</font>

457
00:19:32,679 --> 00:19:36,759
out<font color="#E5E5E5"> proves invalid</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> makes</font><font color="#E5E5E5"> sense</font>

458
00:19:34,929 --> 00:19:38,019
<font color="#CCCCCC">that's kind of what we wanted</font><font color="#E5E5E5"> that point</font>

459
00:19:36,759 --> 00:19:40,029
is still<font color="#E5E5E5"> pointing to</font><font color="#CCCCCC"> that but a memory</font>

460
00:19:38,019 --> 00:19:46,690
<font color="#E5E5E5">and now what it was</font><font color="#CCCCCC"> suspecting to be a</font>

461
00:19:40,029 --> 00:19:49,149
string is whatever so<font color="#CCCCCC"> C++ gives us</font>

462
00:19:46,690 --> 00:19:51,580
something to<font color="#E5E5E5"> deal</font><font color="#CCCCCC"> with this called</font>

463
00:19:49,149 --> 00:19:54,580
unique pointer<font color="#E5E5E5"> in more recent C++</font>

464
00:19:51,580 --> 00:19:57,189
versions so I've written a function<font color="#E5E5E5"> here</font>

465
00:19:54,580 --> 00:19:58,509
<font color="#E5E5E5">this is called take ownership this is</font>

466
00:19:57,190 --> 00:20:02,619
something<font color="#E5E5E5"> that's in the example it's not</font>

467
00:19:58,509 --> 00:20:05,470
<font color="#E5E5E5">part of C++ and all this function does</font>

468
00:20:02,619 --> 00:20:06,369
is take any<font color="#E5E5E5"> arbitrary type and does</font>

469
00:20:05,470 --> 00:20:08,830
<font color="#E5E5E5">nothing with</font><font color="#CCCCCC"> it</font>

470
00:20:06,369 --> 00:20:10,449
<font color="#E5E5E5">but it could do something with it it</font>

471
00:20:08,830 --> 00:20:14,080
could free<font color="#E5E5E5"> whatever it's getting or</font>

472
00:20:10,450 --> 00:20:16,690
<font color="#E5E5E5">decent called the Deconstructor on it it</font>

473
00:20:14,080 --> 00:20:17,439
could<font color="#E5E5E5"> create another alias or something</font>

474
00:20:16,690 --> 00:20:21,729
like<font color="#E5E5E5"> that</font>

475
00:20:17,440 --> 00:20:24,279
so the point<font color="#E5E5E5"> is it has control of it</font><font color="#CCCCCC"> so</font>

476
00:20:21,729 --> 00:20:27,789
<font color="#CCCCCC">we create a</font><font color="#E5E5E5"> new string but we wrap this</font>

477
00:20:24,279 --> 00:20:31,659
up<font color="#CCCCCC"> in a unique pointer and then</font><font color="#E5E5E5"> we print</font>

478
00:20:27,789 --> 00:20:33,369
out string<font color="#E5E5E5"> should work and then we pass</font>

479
00:20:31,659 --> 00:20:36,940
<font color="#CCCCCC">the string</font><font color="#E5E5E5"> over to our take ownership</font>

480
00:20:33,369 --> 00:20:39,340
function and this<font color="#E5E5E5"> is what happens we</font>

481
00:20:36,940 --> 00:20:46,059
actually<font color="#CCCCCC"> get this template error which</font>

482
00:20:39,340 --> 00:20:47,918
<font color="#CCCCCC">is telling us that the copies instructor</font>

483
00:20:46,059 --> 00:20:49,749
<font color="#CCCCCC">whereas a constructor is implicitly</font>

484
00:20:47,919 --> 00:20:51,340
deleted because we're using a unique

485
00:20:49,749 --> 00:20:51,729
pointer<font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> actually kind of</font>

486
00:20:51,340 --> 00:20:54,908
useful

487
00:20:51,729 --> 00:20:57,340
so<font color="#CCCCCC"> we're normally that value we copied</font>

488
00:20:54,909 --> 00:20:59,229
<font color="#E5E5E5">into this function by wrapping</font><font color="#CCCCCC"> an unique</font>

489
00:20:57,340 --> 00:21:01,059
pointer<font color="#E5E5E5"> we've disabled the ability</font><font color="#CCCCCC"> to</font>

490
00:20:59,229 --> 00:21:05,619
copy<font color="#E5E5E5"> it and we have to be more explicit</font>

491
00:21:01,059 --> 00:21:06,820
<font color="#E5E5E5">about our intentions here so</font><font color="#CCCCCC"> c++ gives</font>

492
00:21:05,619 --> 00:21:09,988
you<font color="#E5E5E5"> something for working with unique</font>

493
00:21:06,820 --> 00:21:13,389
pointers and that is<font color="#E5E5E5"> move semantics so</font>

494
00:21:09,989 --> 00:21:19,929
we say<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right this function it now</font>

495
00:21:13,389 --> 00:21:22,389
gets to take ownership of foo<font color="#CCCCCC"> and from</font>

496
00:21:19,929 --> 00:21:24,429
there<font color="#CCCCCC"> I should no longer</font><font color="#E5E5E5"> be able to</font>

497
00:21:22,389 --> 00:21:26,199
access it<font color="#CCCCCC"> so in this program</font><font color="#E5E5E5"> we've got</font>

498
00:21:24,429 --> 00:21:27,999
the string we use it with transfer

499
00:21:26,200 --> 00:21:29,070
ownership we try and use the string

500
00:21:27,999 --> 00:21:32,410
again

501
00:21:29,070 --> 00:21:33,879
and it bugs out so we've got a crash<font color="#CCCCCC"> but</font>

502
00:21:32,410 --> 00:21:38,530
it's a bit<font color="#CCCCCC"> more</font><font color="#E5E5E5"> of a controlled crash</font>

503
00:21:33,880 --> 00:21:41,410
we're not we're not opening ourselves<font color="#E5E5E5"> to</font>

504
00:21:38,530 --> 00:21:41,920
other use after<font color="#CCCCCC"> fries or other things</font>

505
00:21:41,410 --> 00:21:43,540
like<font color="#CCCCCC"> that</font>

506
00:21:41,920 --> 00:21:47,890
in fact what this is is a null pointer

507
00:21:43,540 --> 00:21:51,370
dereference<font color="#CCCCCC"> so if we check true for a</font>

508
00:21:47,890 --> 00:21:53,980
null pointer<font color="#E5E5E5"> and run the program</font><font color="#CCCCCC"> again</font>

509
00:21:51,370 --> 00:21:56,199
<font color="#E5E5E5">indeed through is now a null pointer so</font>

510
00:21:53,980 --> 00:21:58,960
what happens is<font color="#CCCCCC"> three is created we use</font>

511
00:21:56,200 --> 00:22:02,620
it as soon<font color="#E5E5E5"> as foo gets moved in here our</font>

512
00:21:58,960 --> 00:22:04,030
<font color="#E5E5E5">version of food becomes null</font><font color="#CCCCCC"> okay their</font>

513
00:22:02,620 --> 00:22:05,860
<font color="#E5E5E5">version of food they keep using</font><font color="#CCCCCC"> and</font>

514
00:22:04,030 --> 00:22:11,370
<font color="#CCCCCC">that's fine</font><font color="#E5E5E5"> so that's what we've got</font>

515
00:22:05,860 --> 00:22:14,100
there to kind of protect and<font color="#CCCCCC"> C++ rust</font>

516
00:22:11,370 --> 00:22:16,239
<font color="#CCCCCC">this is kind of one of the</font>

517
00:22:14,100 --> 00:22:21,939
differentiating features of rust I would

518
00:22:16,240 --> 00:22:23,500
say<font color="#E5E5E5"> it</font><font color="#CCCCCC"> has this ownership</font><font color="#E5E5E5"> model and</font><font color="#CCCCCC"> four</font>

519
00:22:21,940 --> 00:22:26,250
years<font color="#CCCCCC"> from the very</font><font color="#E5E5E5"> start at the</font>

520
00:22:23,500 --> 00:22:29,080
language<font color="#CCCCCC"> in 2006 is kind of</font><font color="#E5E5E5"> a</font>

521
00:22:26,250 --> 00:22:32,380
<font color="#E5E5E5">consideration to take</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> take</font>

522
00:22:29,080 --> 00:22:35,830
<font color="#CCCCCC">advantage</font><font color="#E5E5E5"> of this so it's built into</font><font color="#CCCCCC"> the</font>

523
00:22:32,380 --> 00:22:37,929
language<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I sorry hang</font><font color="#E5E5E5"> on let me go</font>

524
00:22:35,830 --> 00:22:40,510
back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> finish off the C</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> first</font>

525
00:22:37,929 --> 00:22:43,900
stuff<font color="#E5E5E5"> there's we can also access the</font>

526
00:22:40,510 --> 00:22:45,550
underlying pointer in C++<font color="#E5E5E5"> so if we want</font>

527
00:22:43,900 --> 00:22:49,030
to get the<font color="#E5E5E5"> three pointer we can a lease</font>

528
00:22:45,550 --> 00:22:50,440
it to<font color="#CCCCCC"> a three pointer using</font><font color="#E5E5E5"> this gap</font>

529
00:22:49,030 --> 00:22:53,590
function so<font color="#CCCCCC"> now we've</font><font color="#E5E5E5"> made a copy of it</font>

530
00:22:50,440 --> 00:22:55,840
ourselves explicitly<font color="#CCCCCC"> we can use it and</font>

531
00:22:53,590 --> 00:22:58,270
we can give our ownership<font color="#E5E5E5"> of it to</font>

532
00:22:55,840 --> 00:23:03,189
someone else<font color="#CCCCCC"> but</font><font color="#E5E5E5"> when we give ownership</font>

533
00:22:58,270 --> 00:23:05,260
they still may free whatever<font color="#E5E5E5"> that memory</font>

534
00:23:03,190 --> 00:23:09,400
<font color="#E5E5E5">and our</font><font color="#CCCCCC"> food pointer could be</font>

535
00:23:05,260 --> 00:23:10,540
<font color="#E5E5E5">invalidated in a way so</font><font color="#CCCCCC"> we don't know</font>

536
00:23:09,400 --> 00:23:11,020
what's<font color="#E5E5E5"> gonna happen when we get to this</font>

537
00:23:10,540 --> 00:23:12,670
line<font color="#E5E5E5"> here</font>

538
00:23:11,020 --> 00:23:18,460
the better way to do this<font color="#E5E5E5"> sort of thing</font>

539
00:23:12,670 --> 00:23:21,880
is to use the release API and get<font color="#CCCCCC"> a weak</font>

540
00:23:18,460 --> 00:23:25,300
now get the memory address into food

541
00:23:21,880 --> 00:23:27,130
pointer but when we try and transfer

542
00:23:25,300 --> 00:23:28,840
ownership<font color="#CCCCCC"> through</font><font color="#E5E5E5"> set to null straight</font>

543
00:23:27,130 --> 00:23:30,670
<font color="#E5E5E5">away when we try and transfer ownership</font>

544
00:23:28,840 --> 00:23:33,490
we're transferring ownership of null and

545
00:23:30,670 --> 00:23:35,590
therefore our own copy<font color="#E5E5E5"> of</font><font color="#CCCCCC"> reigns fine</font>

546
00:23:33,490 --> 00:23:37,070
<font color="#E5E5E5">from here you</font><font color="#CCCCCC"> forgo on an alias that</font>

547
00:23:35,590 --> 00:23:39,949
pointer and have other

548
00:23:37,070 --> 00:23:41,210
<font color="#E5E5E5">problems but it's the preferred way of</font>

549
00:23:39,950 --> 00:23:43,250
<font color="#CCCCCC">doing things here at least you're</font><font color="#E5E5E5"> being</font>

550
00:23:41,210 --> 00:23:45,620
honest and<font color="#E5E5E5"> saying that unique pointer is</font>

551
00:23:43,250 --> 00:23:46,880
unique because<font color="#E5E5E5"> it's it's not valid</font>

552
00:23:45,620 --> 00:23:48,678
anymore<font color="#E5E5E5"> here you're saying I've got a</font>

553
00:23:46,880 --> 00:23:52,880
unique pointer but really there's

554
00:23:48,679 --> 00:23:55,700
actually<font color="#E5E5E5"> other pointers as well so as I</font>

555
00:23:52,880 --> 00:24:00,529
<font color="#E5E5E5">was saying</font><font color="#CCCCCC"> rust has its own</font><font color="#E5E5E5"> ownership</font>

556
00:23:55,700 --> 00:24:04,370
model<font color="#CCCCCC"> so it tracks</font><font color="#E5E5E5"> ownership here we've</font>

557
00:24:00,529 --> 00:24:06,889
got a string food and we assign that<font color="#CCCCCC"> to</font>

558
00:24:04,370 --> 00:24:09,110
another<font color="#E5E5E5"> variable stolen so immediately</font>

559
00:24:06,889 --> 00:24:09,529
<font color="#CCCCCC">to two people</font><font color="#E5E5E5"> they're responsible for</font>

560
00:24:09,110 --> 00:24:11,600
<font color="#CCCCCC">this</font>

561
00:24:09,529 --> 00:24:13,580
in<font color="#CCCCCC"> this version</font><font color="#E5E5E5"> we're transferring that</font>

562
00:24:11,600 --> 00:24:17,570
variable into another function<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like</font>

563
00:24:13,580 --> 00:24:19,730
<font color="#E5E5E5">we were in the C++ example so what</font>

564
00:24:17,570 --> 00:24:24,049
happens<font color="#CCCCCC"> here we try and compile</font><font color="#E5E5E5"> we get a</font>

565
00:24:19,730 --> 00:24:28,159
compilation error and it says use of

566
00:24:24,049 --> 00:24:30,440
<font color="#CCCCCC">moot value value was moved here and you</font>

567
00:24:28,159 --> 00:24:32,659
used it here<font color="#CCCCCC"> after you've moved it so I</font>

568
00:24:30,440 --> 00:24:34,399
<font color="#E5E5E5">find that this</font><font color="#CCCCCC"> is a pretty simple</font>

569
00:24:32,659 --> 00:24:36,860
<font color="#E5E5E5">example but I find</font><font color="#CCCCCC"> that a really kind</font><font color="#E5E5E5"> of</font>

570
00:24:34,399 --> 00:24:40,549
nice useful<font color="#CCCCCC"> message</font><font color="#E5E5E5"> it's pretty clear to</font>

571
00:24:36,860 --> 00:24:43,610
me what's happening<font color="#E5E5E5"> so I can clean that</font>

572
00:24:40,549 --> 00:24:46,429
<font color="#E5E5E5">up and try</font><font color="#CCCCCC"> and use through other</font><font color="#E5E5E5"> ways I</font>

573
00:24:43,610 --> 00:24:48,379
<font color="#CCCCCC">can stop using through after that</font>

574
00:24:46,429 --> 00:24:49,580
function<font color="#E5E5E5"> but that's kind of a hassle</font><font color="#CCCCCC"> for</font>

575
00:24:48,379 --> 00:24:51,080
<font color="#E5E5E5">my programs I'm going to have to be</font>

576
00:24:49,580 --> 00:24:52,428
passing off these variable<font color="#CCCCCC"> D functions</font>

577
00:24:51,080 --> 00:24:55,100
and then never<font color="#E5E5E5"> ever see them again</font>

578
00:24:52,429 --> 00:24:56,990
so rust also gives us<font color="#E5E5E5"> ways of</font>

579
00:24:55,100 --> 00:25:02,059
transferring ownership and transferring

580
00:24:56,990 --> 00:25:06,230
<font color="#E5E5E5">it back so we</font><font color="#CCCCCC"> have here we</font><font color="#E5E5E5"> create a</font>

581
00:25:02,059 --> 00:25:09,590
string<font color="#E5E5E5"> we now clone this string so this</font>

582
00:25:06,230 --> 00:25:11,870
is implemented<font color="#CCCCCC"> for the type so I know</font>

583
00:25:09,590 --> 00:25:14,149
this guy gets<font color="#E5E5E5"> his own copy of that</font>

584
00:25:11,870 --> 00:25:17,989
string<font color="#CCCCCC"> and we can safely keep</font><font color="#E5E5E5"> using our</font>

585
00:25:14,149 --> 00:25:20,750
<font color="#E5E5E5">own so that's an option</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> return</font>

586
00:25:17,990 --> 00:25:22,580
ownership so the function signatures<font color="#E5E5E5"> for</font>

587
00:25:20,750 --> 00:25:24,320
these are here by<font color="#E5E5E5"> the way</font><font color="#CCCCCC"> return</font>

588
00:25:22,580 --> 00:25:26,899
<font color="#E5E5E5">ownership we take it but then we give it</font>

589
00:25:24,320 --> 00:25:28,309
back<font color="#E5E5E5"> at the end so we assign</font><font color="#CCCCCC"> that to</font>

590
00:25:26,899 --> 00:25:30,580
something<font color="#E5E5E5"> else</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we can</font><font color="#CCCCCC"> keep using</font>

591
00:25:28,309 --> 00:25:33,379
<font color="#CCCCCC">that new thing</font>

592
00:25:30,580 --> 00:25:34,908
borrowing<font color="#E5E5E5"> I can say hey you can have</font>

593
00:25:33,379 --> 00:25:36,289
this but when you're done with<font color="#E5E5E5"> it</font>

594
00:25:34,909 --> 00:25:38,320
instead<font color="#E5E5E5"> of destroying it like you</font>

595
00:25:36,289 --> 00:25:42,669
<font color="#E5E5E5">normally would</font><font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> keep using it</font>

596
00:25:38,320 --> 00:25:45,049
so we can do that<font color="#CCCCCC"> as</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> the ampersand</font>

597
00:25:42,669 --> 00:25:46,880
<font color="#CCCCCC">that's fine</font><font color="#E5E5E5"> if everyone's reading from</font>

598
00:25:45,049 --> 00:25:49,610
<font color="#E5E5E5">it</font><font color="#CCCCCC"> we can have</font>

599
00:25:46,880 --> 00:25:51,200
multiple<font color="#E5E5E5"> borrowers but if anyone wants</font>

600
00:25:49,610 --> 00:25:52,789
to<font color="#E5E5E5"> change that while other people are</font>

601
00:25:51,200 --> 00:25:54,110
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to read from</font><font color="#E5E5E5"> it the compiler is</font>

602
00:25:52,789 --> 00:25:56,299
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> complain</font><font color="#CCCCCC"> so you have to be</font>

603
00:25:54,110 --> 00:25:59,209
explicit<font color="#CCCCCC"> if you're making a mutable</font>

604
00:25:56,299 --> 00:26:00,620
<font color="#CCCCCC">borrow</font><font color="#E5E5E5"> and if the post any possibly</font>

605
00:25:59,210 --> 00:26:02,090
exists<font color="#E5E5E5"> that there could be a mutable</font>

606
00:26:00,620 --> 00:26:04,699
<font color="#E5E5E5">borrow at the same time or a</font><font color="#CCCCCC"> couple</font>

607
00:26:02,090 --> 00:26:09,500
<font color="#E5E5E5">mirrors at the same time the compiler</font>

608
00:26:04,700 --> 00:26:12,169
just won't have it so we've got a

609
00:26:09,500 --> 00:26:13,850
compilation<font color="#CCCCCC"> step again we've got</font>

610
00:26:12,169 --> 00:26:15,279
<font color="#E5E5E5">programs that pass through</font><font color="#CCCCCC"> our</font>

611
00:26:13,850 --> 00:26:20,090
continuous<font color="#CCCCCC"> integration continuous</font>

612
00:26:15,279 --> 00:26:22,159
deployment pipeline<font color="#CCCCCC"> hopefully we've</font><font color="#E5E5E5"> got</font>

613
00:26:20,090 --> 00:26:25,009
the type checker which has protected<font color="#E5E5E5"> us</font>

614
00:26:22,159 --> 00:26:26,679
from a few things<font color="#CCCCCC"> and</font><font color="#E5E5E5"> now we've got this</font>

615
00:26:25,009 --> 00:26:29,299
borrowed checker<font color="#E5E5E5"> which is further</font>

616
00:26:26,679 --> 00:26:31,309
<font color="#E5E5E5">rejecting the number of programs</font><font color="#CCCCCC"> that</font>

617
00:26:29,299 --> 00:26:33,620
are<font color="#CCCCCC"> actually going</font><font color="#E5E5E5"> to end up so you know</font>

618
00:26:31,309 --> 00:26:35,000
if if pressures on spaghetti<font color="#E5E5E5"> and he</font>

619
00:26:33,620 --> 00:26:37,610
needs<font color="#E5E5E5"> to get this fixed into production</font>

620
00:26:35,000 --> 00:26:39,409
<font color="#E5E5E5">and he's just hacked something up in his</font>

621
00:26:37,610 --> 00:26:41,689
books<font color="#CCCCCC"> and he's ready to push out and</font>

622
00:26:39,409 --> 00:26:44,240
subvert whatever CI city pipeline we

623
00:26:41,690 --> 00:26:50,000
have<font color="#E5E5E5"> he can't do it</font><font color="#CCCCCC"> because the</font>

624
00:26:44,240 --> 00:26:52,639
<font color="#CCCCCC">program's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> going to exist so the</font>

625
00:26:50,000 --> 00:26:57,259
final<font color="#E5E5E5"> bug I wanted to look at was data</font>

626
00:26:52,639 --> 00:26:59,809
races here's some go code immediate

627
00:26:57,259 --> 00:27:01,399
apologies to people<font color="#E5E5E5"> that</font><font color="#CCCCCC"> write go</font><font color="#E5E5E5"> it's</font>

628
00:26:59,809 --> 00:27:04,250
not pretty very good it's not idiomatic

629
00:27:01,399 --> 00:27:08,529
code<font color="#CCCCCC"> it's the first bit of go code</font><font color="#E5E5E5"> I've</font>

630
00:27:04,250 --> 00:27:12,639
written though<font color="#CCCCCC"> and what we're doing</font><font color="#E5E5E5"> is</font>

631
00:27:08,529 --> 00:27:14,629
we've got a variable<font color="#E5E5E5"> here we've got n</font>

632
00:27:12,639 --> 00:27:17,199
times we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> spin up this go</font>

633
00:27:14,629 --> 00:27:19,158
function<font color="#E5E5E5"> this lightweight thread</font><font color="#CCCCCC"> and</font>

634
00:27:17,200 --> 00:27:21,889
every one of those is<font color="#E5E5E5"> going to increment</font>

635
00:27:19,159 --> 00:27:23,419
this variable<font color="#E5E5E5"> and we wait till they're</font>

636
00:27:21,889 --> 00:27:25,490
<font color="#E5E5E5">all done and we want to check what</font><font color="#CCCCCC"> the</font>

637
00:27:23,419 --> 00:27:28,940
value is<font color="#E5E5E5"> at the end and we write a bit</font>

638
00:27:25,490 --> 00:27:31,309
of<font color="#CCCCCC"> rapid code around</font><font color="#E5E5E5"> this because we</font>

639
00:27:28,940 --> 00:27:33,259
kind of I<font color="#E5E5E5"> know it just seems like we're</font>

640
00:27:31,309 --> 00:27:35,720
just<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about multiple mutable</font>

641
00:27:33,259 --> 00:27:36,950
references<font color="#E5E5E5"> feels like this has a bit of</font>

642
00:27:35,720 --> 00:27:39,950
<font color="#CCCCCC">codes me all about it feels like</font>

643
00:27:36,950 --> 00:27:41,750
something should<font color="#CCCCCC"> be wrong here but yet</font>

644
00:27:39,950 --> 00:27:43,970
<font color="#CCCCCC">he's</font><font color="#E5E5E5"> done his research these times don't</font>

645
00:27:41,750 --> 00:27:46,460
<font color="#CCCCCC">a bit of disassembly he says no look</font>

646
00:27:43,970 --> 00:27:48,350
<font color="#E5E5E5">there's this that single line of code it</font>

647
00:27:46,460 --> 00:27:50,269
comes down to<font color="#E5E5E5"> that one</font><font color="#CCCCCC"> in construction</font>

648
00:27:48,350 --> 00:27:51,939
<font color="#E5E5E5">so those are instructions they can</font>

649
00:27:50,269 --> 00:27:54,759
interleave we're going to be<font color="#CCCCCC"> ok here you</font>

650
00:27:51,940 --> 00:27:55,899
<font color="#CCCCCC">think okay I'm gonna</font><font color="#E5E5E5"> write</font>

651
00:27:54,759 --> 00:27:57,339
my I'm still<font color="#E5E5E5"> gonna write this little</font>

652
00:27:55,899 --> 00:28:00,639
<font color="#E5E5E5">harness</font><font color="#CCCCCC"> around it</font><font color="#E5E5E5"> and find out</font><font color="#CCCCCC"> what</font>

653
00:27:57,339 --> 00:28:04,329
<font color="#CCCCCC">happens</font><font color="#E5E5E5"> and this is what happens so if</font>

654
00:28:00,639 --> 00:28:06,369
everything is awesome<font color="#E5E5E5"> we print it out</font><font color="#CCCCCC"> if</font>

655
00:28:04,329 --> 00:28:09,639
it's if we didn't get to<font color="#E5E5E5"> 100 for some</font>

656
00:28:06,369 --> 00:28:12,849
reason we find out what the value is and

657
00:28:09,639 --> 00:28:15,248
<font color="#E5E5E5">that value each immediately changes and</font>

658
00:28:12,849 --> 00:28:17,619
the best sort of errors right<font color="#E5E5E5"> the ones</font>

659
00:28:15,249 --> 00:28:20,049
that<font color="#E5E5E5"> just aren't consistent so that's</font>

660
00:28:17,619 --> 00:28:22,509
what's happening here<font color="#CCCCCC"> now apart from</font>

661
00:28:20,049 --> 00:28:24,849
<font color="#E5E5E5">this not being actually I'll get to that</font>

662
00:28:22,509 --> 00:28:27,969
<font color="#E5E5E5">in a second</font><font color="#CCCCCC"> the reason this is</font><font color="#E5E5E5"> happening</font>

663
00:28:24,849 --> 00:28:29,379
<font color="#CCCCCC">by the way is the lock in</font><font color="#E5E5E5"> the in</font>

664
00:28:27,969 --> 00:28:31,779
construction<font color="#CCCCCC"> isn't guaranteed to be</font>

665
00:28:29,379 --> 00:28:34,809
atomic<font color="#E5E5E5"> unless we</font><font color="#CCCCCC"> use a lot of prefix so</font>

666
00:28:31,779 --> 00:28:36,039
that kind of intuitively<font color="#E5E5E5"> makes sense you</font>

667
00:28:34,809 --> 00:28:37,839
<font color="#E5E5E5">know there's a few things</font><font color="#CCCCCC"> going on</font><font color="#E5E5E5"> with</font>

668
00:28:36,039 --> 00:28:41,649
<font color="#E5E5E5">an</font><font color="#CCCCCC"> Incan instruction we read it we</font>

669
00:28:37,839 --> 00:28:43,658
<font color="#CCCCCC">change it</font><font color="#E5E5E5"> write it back</font><font color="#CCCCCC"> you can see how</font>

670
00:28:41,649 --> 00:28:46,149
that<font color="#E5E5E5"> would happen but so we need some</font>

671
00:28:43,659 --> 00:28:47,379
<font color="#E5E5E5">sort of</font><font color="#CCCCCC"> safety around</font><font color="#E5E5E5"> this and go has</font>

672
00:28:46,149 --> 00:28:50,829
channels in the preferred way of

673
00:28:47,379 --> 00:28:53,559
actually<font color="#E5E5E5"> sharing memory to do that but</font>

674
00:28:50,829 --> 00:28:55,418
<font color="#E5E5E5">even if someone did progress with this</font>

675
00:28:53,559 --> 00:28:57,849
sort<font color="#E5E5E5"> of go code go does give them</font>

676
00:28:55,419 --> 00:29:00,819
another option<font color="#CCCCCC"> they use a data race</font>

677
00:28:57,849 --> 00:29:05,079
detector so you can run<font color="#CCCCCC"> your tests with</font>

678
00:29:00,819 --> 00:29:07,119
a<font color="#CCCCCC"> - race flag and you'll hopefully find</font>

679
00:29:05,079 --> 00:29:10,029
these data<font color="#CCCCCC"> races in your code add this</font>

680
00:29:07,119 --> 00:29:11,319
as a step in<font color="#E5E5E5"> your CID pipeline and you</font>

681
00:29:10,029 --> 00:29:14,379
can start to track<font color="#E5E5E5"> down these sorts of</font>

682
00:29:11,319 --> 00:29:20,949
<font color="#CCCCCC">bugs and reject</font><font color="#E5E5E5"> those builds so let's</font>

683
00:29:14,379 --> 00:29:22,359
try and do this<font color="#CCCCCC"> in rust</font><font color="#E5E5E5"> we've got we're</font>

684
00:29:20,949 --> 00:29:25,749
splitting up<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> threads this time and</font>

685
00:29:22,359 --> 00:29:27,158
each one is incrementing and we're using

686
00:29:25,749 --> 00:29:31,409
proper threads not lightweight threads

687
00:29:27,159 --> 00:29:37,149
<font color="#CCCCCC">just cause let's see what happens</font>

688
00:29:31,409 --> 00:29:39,459
so in this case we get<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> all the time</font><font color="#CCCCCC"> at</font>

689
00:29:37,149 --> 00:29:40,718
least<font color="#CCCCCC"> it's consistent maybe I think</font>

690
00:29:39,459 --> 00:29:43,559
<font color="#E5E5E5">that's good consistent that's</font>

691
00:29:40,719 --> 00:29:43,559
consistently<font color="#E5E5E5"> wrong</font>

692
00:29:47,220 --> 00:30:00,360
so what's going on here<font color="#E5E5E5"> yeah so because</font>

693
00:29:57,590 --> 00:30:02,399
this is<font color="#CCCCCC"> a primitive</font><font color="#E5E5E5"> data type when I</font>

694
00:30:00,360 --> 00:30:05,490
transfer ownership of<font color="#E5E5E5"> the primitive</font><font color="#CCCCCC"> data</font>

695
00:30:02,400 --> 00:30:08,690
type to this thread it<font color="#E5E5E5"> actually gets its</font>

696
00:30:05,490 --> 00:30:12,030
<font color="#E5E5E5">own copy</font><font color="#CCCCCC"> okay this is not a pointer to</font>

697
00:30:08,690 --> 00:30:14,190
<font color="#E5E5E5">some other bit of memory this is just a</font>

698
00:30:12,030 --> 00:30:16,740
<font color="#E5E5E5">single</font><font color="#CCCCCC"> value and it gets its own copy</font>

699
00:30:14,190 --> 00:30:18,840
each one of the 10 threads<font color="#E5E5E5"> adds one to</font>

700
00:30:16,740 --> 00:30:20,700
<font color="#E5E5E5">that</font><font color="#CCCCCC"> zero that they get and then throw</font>

701
00:30:18,840 --> 00:30:23,240
it away<font color="#E5E5E5"> and then we still get</font><font color="#CCCCCC"> zero at</font>

702
00:30:20,700 --> 00:30:26,070
the end<font color="#E5E5E5"> so that's what's happening here</font>

703
00:30:23,240 --> 00:30:28,710
<font color="#E5E5E5">so to kind of understand this a bit</font>

704
00:30:26,070 --> 00:30:30,679
better<font color="#E5E5E5"> let's do it with</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> that</font>

705
00:30:28,710 --> 00:30:34,820
might be<font color="#E5E5E5"> heap-allocated like a vector</font>

706
00:30:30,680 --> 00:30:37,530
<font color="#CCCCCC">vectors a variable size</font><font color="#E5E5E5"> arrays and rust</font>

707
00:30:34,820 --> 00:30:41,879
<font color="#CCCCCC">so we're going to have every single</font>

708
00:30:37,530 --> 00:30:44,520
thread<font color="#E5E5E5"> add to the vector and see how</font>

709
00:30:41,880 --> 00:30:47,370
this all behaves<font color="#E5E5E5"> all kind of mutating</font>

710
00:30:44,520 --> 00:30:50,400
this thing at the same<font color="#E5E5E5"> time right well</font>

711
00:30:47,370 --> 00:30:52,889
Australia we get a compilation error<font color="#E5E5E5"> it</font>

712
00:30:50,400 --> 00:30:54,120
says you tried<font color="#E5E5E5"> to move the value</font><font color="#CCCCCC"> into</font>

713
00:30:52,890 --> 00:30:57,720
the closure<font color="#E5E5E5"> and by the way I should</font>

714
00:30:54,120 --> 00:30:59,159
<font color="#E5E5E5">explain some syntax</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a closure so</font>

715
00:30:57,720 --> 00:31:02,010
this is a function that we're giving<font color="#CCCCCC"> to</font>

716
00:30:59,160 --> 00:31:04,110
the thread this move says we're giving

717
00:31:02,010 --> 00:31:05,580
ownership<font color="#E5E5E5"> of these values to the closure</font>

718
00:31:04,110 --> 00:31:07,889
to the anonymous<font color="#E5E5E5"> function</font>

719
00:31:05,580 --> 00:31:10,620
these pipes is where you put any

720
00:31:07,890 --> 00:31:13,620
arguments to that function<font color="#CCCCCC"> but there are</font>

721
00:31:10,620 --> 00:31:16,379
no<font color="#E5E5E5"> arguments it's just capturing this</font>

722
00:31:13,620 --> 00:31:18,179
variable from its<font color="#CCCCCC"> environment</font><font color="#E5E5E5"> so it gets</font>

723
00:31:16,380 --> 00:31:21,240
ownership of it<font color="#CCCCCC"> and then it tries to</font><font color="#E5E5E5"> use</font>

724
00:31:18,180 --> 00:31:23,520
it<font color="#CCCCCC"> and we get some sort of</font><font color="#E5E5E5"> compilation</font>

725
00:31:21,240 --> 00:31:26,340
error<font color="#E5E5E5"> this might be kind of initially</font>

726
00:31:23,520 --> 00:31:29,610
confusing I mean it's its function<font color="#CCCCCC"> can</font>

727
00:31:26,340 --> 00:31:32,340
<font color="#E5E5E5">it use</font><font color="#CCCCCC"> that so I split</font><font color="#E5E5E5"> this out</font><font color="#CCCCCC"> into two</font>

728
00:31:29,610 --> 00:31:34,040
separate threads<font color="#CCCCCC"> rather than have a loop</font>

729
00:31:32,340 --> 00:31:38,340
and let's see what happens<font color="#E5E5E5"> when we</font>

730
00:31:34,040 --> 00:31:40,860
compile this program<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so the first</font>

731
00:31:38,340 --> 00:31:43,350
<font color="#CCCCCC">one the first thread</font><font color="#E5E5E5"> that spins up</font><font color="#CCCCCC"> it</font>

732
00:31:40,860 --> 00:31:44,610
receives ownership it's the second

733
00:31:43,350 --> 00:31:46,530
thread when it tries<font color="#CCCCCC"> to use that</font>

734
00:31:44,610 --> 00:31:49,869
<font color="#E5E5E5">variable for which ownership has already</font>

735
00:31:46,530 --> 00:31:53,379
<font color="#E5E5E5">been transferred</font><font color="#CCCCCC"> it has</font>

736
00:31:49,869 --> 00:31:56,259
<font color="#CCCCCC">I fit and won't compile that makes more</font>

737
00:31:53,379 --> 00:31:59,408
sense<font color="#E5E5E5"> now I can see that so the question</font>

738
00:31:56,259 --> 00:32:02,259
is how we're going to fix<font color="#E5E5E5"> this</font><font color="#CCCCCC"> if this</font>

739
00:31:59,409 --> 00:32:06,129
<font color="#E5E5E5">is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> normal function the ownership is</font>

740
00:32:02,259 --> 00:32:09,190
kind of obvious<font color="#CCCCCC"> you know if we call this</font>

741
00:32:06,129 --> 00:32:10,149
function<font color="#E5E5E5"> first we transfer ownership</font><font color="#CCCCCC"> it</font>

742
00:32:09,190 --> 00:32:12,899
transfers it back

743
00:32:10,149 --> 00:32:14,678
<font color="#CCCCCC">Gudrun</font><font color="#E5E5E5"> back in the main function</font>

744
00:32:12,899 --> 00:32:17,109
<font color="#E5E5E5">transfer ownership to the second</font>

745
00:32:14,679 --> 00:32:18,639
function<font color="#CCCCCC"> transfer it back to refine</font><font color="#E5E5E5"> but</font>

746
00:32:17,109 --> 00:32:21,580
with threads<font color="#E5E5E5"> there's a whole new world</font>

747
00:32:18,639 --> 00:32:23,529
<font color="#E5E5E5">of</font><font color="#CCCCCC"> possibilities right so we may get a</font>

748
00:32:21,580 --> 00:32:26,978
scenario where that<font color="#E5E5E5"> execution pattern</font>

749
00:32:23,529 --> 00:32:28,509
happens again so it may transfer

750
00:32:26,979 --> 00:32:31,029
ownership there and back<font color="#CCCCCC"> and there and</font>

751
00:32:28,509 --> 00:32:32,619
back to<font color="#E5E5E5"> that second function but those</font>

752
00:32:31,029 --> 00:32:35,289
functions could happen at any<font color="#CCCCCC"> time in</font>

753
00:32:32,619 --> 00:32:40,119
this<font color="#E5E5E5"> timeline so they could end up both</font>

754
00:32:35,289 --> 00:32:41,700
running<font color="#E5E5E5"> at the same time or yeah in</font>

755
00:32:40,119 --> 00:32:44,499
different order or<font color="#CCCCCC"> something like</font><font color="#E5E5E5"> that</font>

756
00:32:41,700 --> 00:32:47,460
<font color="#E5E5E5">so we have to solve that you know how</font>

757
00:32:44,499 --> 00:32:49,539
<font color="#CCCCCC">are we gonna give these threads</font>

758
00:32:47,460 --> 00:32:51,519
<font color="#E5E5E5">concurrent access to this bit of memory</font>

759
00:32:49,539 --> 00:32:55,719
<font color="#E5E5E5">other languages obviously have things</font>

760
00:32:51,519 --> 00:32:57,339
for<font color="#E5E5E5"> dealing with this as well</font><font color="#CCCCCC"> so we have</font>

761
00:32:55,719 --> 00:32:59,559
to solve<font color="#CCCCCC"> that but we also have to solve</font>

762
00:32:57,339 --> 00:33:01,658
the<font color="#E5E5E5"> problem of once everyone's finished</font>

763
00:32:59,559 --> 00:33:02,499
with this resource<font color="#E5E5E5"> who's gonna clean it</font>

764
00:33:01,659 --> 00:33:04,719
up

765
00:33:02,499 --> 00:33:06,249
so we need to<font color="#E5E5E5"> work out when when</font>

766
00:33:04,719 --> 00:33:08,589
everyone's finished with it and<font color="#CCCCCC"> again</font>

767
00:33:06,249 --> 00:33:10,509
that could<font color="#E5E5E5"> change in time we could</font>

768
00:33:08,589 --> 00:33:12,759
happen<font color="#E5E5E5"> quicker sometimes and later at</font>

769
00:33:10,509 --> 00:33:17,139
other times so there's a couple<font color="#E5E5E5"> things</font>

770
00:33:12,759 --> 00:33:18,929
going<font color="#E5E5E5"> on here</font><font color="#CCCCCC"> at the same time</font><font color="#E5E5E5"> and Russ</font>

771
00:33:17,139 --> 00:33:23,379
gives us ways to deal<font color="#E5E5E5"> with both</font><font color="#CCCCCC"> of those</font>

772
00:33:18,929 --> 00:33:27,190
<font color="#CCCCCC">in terms</font><font color="#E5E5E5"> of allowing that controlling</font>

773
00:33:23,379 --> 00:33:28,809
<font color="#CCCCCC">that concurrent mutability mutexes you</font>

774
00:33:27,190 --> 00:33:32,349
know pretty<font color="#CCCCCC"> much real languages have</font>

775
00:33:28,809 --> 00:33:33,759
them nothing surprising there<font color="#CCCCCC"> but if we</font>

776
00:33:32,349 --> 00:33:36,999
<font color="#CCCCCC">just</font><font color="#E5E5E5"> try to write this program</font><font color="#CCCCCC"> with the</font>

777
00:33:33,759 --> 00:33:38,529
<font color="#CCCCCC">mutex</font><font color="#E5E5E5"> and compile</font><font color="#CCCCCC"> it and it's in that</font>

778
00:33:36,999 --> 00:33:41,139
github<font color="#E5E5E5"> repo but didn't put a slide for</font>

779
00:33:38,529 --> 00:33:42,729
<font color="#E5E5E5">it it still won't compile because we</font>

780
00:33:41,139 --> 00:33:44,498
<font color="#E5E5E5">still</font><font color="#CCCCCC"> need to answer</font><font color="#E5E5E5"> that question of</font>

781
00:33:42,729 --> 00:33:47,019
who's going<font color="#E5E5E5"> to clean this up when we</font>

782
00:33:44,499 --> 00:33:48,429
<font color="#E5E5E5">finish with it so to deal with that</font>

783
00:33:47,019 --> 00:33:50,139
<font color="#E5E5E5">problem we need to create a reference</font>

784
00:33:48,429 --> 00:33:53,139
count<font color="#E5E5E5"> in this case it's an atomic</font>

785
00:33:50,139 --> 00:33:55,689
<font color="#E5E5E5">reference count and through those two</font>

786
00:33:53,139 --> 00:33:57,488
kind<font color="#E5E5E5"> of container types in use</font>

787
00:33:55,690 --> 00:34:00,620
<font color="#E5E5E5">simultaneously our program will finally</font>

788
00:33:57,489 --> 00:34:06,140
compile and we get<font color="#CCCCCC"> data as compiled time</font>

789
00:34:00,620 --> 00:34:09,109
safety so here's what it<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like</font>

790
00:34:06,140 --> 00:34:13,010
so we have our mutex we're wrapping the

791
00:34:09,110 --> 00:34:16,760
original<font color="#CCCCCC"> inter-gang</font><font color="#E5E5E5"> and we're</font><font color="#CCCCCC"> wrapping</font>

792
00:34:13,010 --> 00:34:19,940
that mutex abstain in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> atomic reference</font>

793
00:34:16,760 --> 00:34:24,220
<font color="#E5E5E5">count we make sure everyone gets</font><font color="#CCCCCC"> their</font>

794
00:34:19,940 --> 00:34:26,780
own<font color="#E5E5E5"> copy</font><font color="#CCCCCC"> so that's how we allow this the</font>

795
00:34:24,219 --> 00:34:29,658
simultaneous access when they<font color="#CCCCCC"> reach this</font>

796
00:34:26,780 --> 00:34:32,540
actual clone is of the atomic reference

797
00:34:29,659 --> 00:34:33,770
counter it just<font color="#CCCCCC"> incorrect</font><font color="#E5E5E5"> increments the</font>

798
00:34:32,540 --> 00:34:37,730
reference counter that's<font color="#E5E5E5"> the definition</font>

799
00:34:33,770 --> 00:34:41,960
of clone for arc<font color="#CCCCCC"> and when it's done when</font>

800
00:34:37,730 --> 00:34:43,639
this closure<font color="#E5E5E5"> finishes rust the rust</font>

801
00:34:41,960 --> 00:34:45,530
compiler knows all right I can clean up

802
00:34:43,639 --> 00:34:47,300
<font color="#E5E5E5">this variable which</font><font color="#CCCCCC"> ran reference</font>

803
00:34:45,530 --> 00:34:51,830
counter means<font color="#E5E5E5"> I decrement that reference</font>

804
00:34:47,300 --> 00:34:54,740
counter<font color="#CCCCCC"> I need to acquire a lock to the</font>

805
00:34:51,830 --> 00:34:57,040
mutex<font color="#E5E5E5"> obviously and</font><font color="#CCCCCC"> that lock acquiring</font>

806
00:34:54,739 --> 00:35:00,620
that lock could fail or it could succeed

807
00:34:57,040 --> 00:35:03,470
<font color="#CCCCCC">so I in good rust code</font><font color="#E5E5E5"> I should be</font>

808
00:35:00,620 --> 00:35:05,299
checking that<font color="#E5E5E5"> here to fit on the slide</font>

809
00:35:03,470 --> 00:35:09,319
I'm just<font color="#E5E5E5"> using his unwrap function to</font>

810
00:35:05,300 --> 00:35:10,790
assume that it's worked<font color="#E5E5E5"> this if I'm</font>

811
00:35:09,320 --> 00:35:13,310
wrong in that assumption<font color="#E5E5E5"> the program</font>

812
00:35:10,790 --> 00:35:18,170
will blow up here and it<font color="#E5E5E5"> will tell me</font>

813
00:35:13,310 --> 00:35:19,700
why<font color="#CCCCCC"> but</font><font color="#E5E5E5"> for convenience I'm for</font>

814
00:35:18,170 --> 00:35:21,590
prototyping<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> need unwrap here and</font>

815
00:35:19,700 --> 00:35:24,560
then we increment the<font color="#E5E5E5"> value of this and</font>

816
00:35:21,590 --> 00:35:26,810
so in this way<font color="#E5E5E5"> everyone gets their</font><font color="#CCCCCC"> own</font>

817
00:35:24,560 --> 00:35:29,360
copy of<font color="#E5E5E5"> something</font><font color="#CCCCCC"> it's a reference</font><font color="#E5E5E5"> count</font>

818
00:35:26,810 --> 00:35:31,160
as far as it<font color="#E5E5E5"> doesn't know any better</font>

819
00:35:29,360 --> 00:35:33,890
<font color="#E5E5E5">it's a reference count to that Munich's</font>

820
00:35:31,160 --> 00:35:36,890
<font color="#E5E5E5">which then they try and each get their</font>

821
00:35:33,890 --> 00:35:38,960
own lock<font color="#CCCCCC"> - and with all</font><font color="#E5E5E5"> this we</font><font color="#CCCCCC"> actually</font>

822
00:35:36,890 --> 00:35:42,200
get a compiling program that works<font color="#CCCCCC"> move</font>

823
00:35:38,960 --> 00:35:43,670
any element of<font color="#E5E5E5"> that and it won't work a</font>

824
00:35:42,200 --> 00:35:45,529
couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things I</font><font color="#CCCCCC"> wanted to point</font><font color="#E5E5E5"> out</font>

825
00:35:43,670 --> 00:35:47,840
<font color="#E5E5E5">on that example</font><font color="#CCCCCC"> obviously I'm talking</font>

826
00:35:45,530 --> 00:35:49,550
<font color="#CCCCCC">about data races</font><font color="#E5E5E5"> not race conditions</font>

827
00:35:47,840 --> 00:35:51,920
<font color="#CCCCCC">rust mates no trains against</font><font color="#E5E5E5"> race</font>

828
00:35:49,550 --> 00:35:55,070
conditions data<font color="#CCCCCC"> races</font><font color="#E5E5E5"> were talking</font>

829
00:35:51,920 --> 00:35:56,360
simultaneous access<font color="#CCCCCC"> to memory race</font>

830
00:35:55,070 --> 00:35:59,320
conditions you know there's far<font color="#CCCCCC"> more</font>

831
00:35:56,360 --> 00:36:02,770
complex state that we're<font color="#CCCCCC"> dealing with</font>

832
00:35:59,320 --> 00:36:06,710
you<font color="#E5E5E5"> know within the same program or</font><font color="#CCCCCC"> not</font>

833
00:36:02,770 --> 00:36:08,800
we're<font color="#E5E5E5"> not looking at that</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we were</font>

834
00:36:06,710 --> 00:36:10,300
<font color="#E5E5E5">communicating by showing memories so I</font>

835
00:36:08,800 --> 00:36:13,360
have said that that<font color="#E5E5E5"> was no idiomatic go</font>

836
00:36:10,300 --> 00:36:15,100
code<font color="#E5E5E5"> go to my understanding would prefer</font>

837
00:36:13,360 --> 00:36:17,680
you to<font color="#E5E5E5"> share memory by communicating</font>

838
00:36:15,100 --> 00:36:20,529
through channels<font color="#CCCCCC"> rust</font><font color="#E5E5E5"> you can also use</font>

839
00:36:17,680 --> 00:36:22,060
there's a channels API<font color="#CCCCCC"> there us is kind</font>

840
00:36:20,530 --> 00:36:24,550
<font color="#CCCCCC">of giving you a choice to do one or the</font>

841
00:36:22,060 --> 00:36:26,259
<font color="#CCCCCC">other and if you try in</font><font color="#E5E5E5"> the showing</font>

842
00:36:24,550 --> 00:36:29,820
memory model it's trying to guide you

843
00:36:26,260 --> 00:36:34,750
and help you do<font color="#E5E5E5"> things more securely</font>

844
00:36:29,820 --> 00:36:37,480
<font color="#CCCCCC">okay so here we are</font><font color="#E5E5E5"> we've got the</font>

845
00:36:34,750 --> 00:36:39,610
<font color="#CCCCCC">compiled step</font><font color="#E5E5E5"> we've got that test step</font>

846
00:36:37,480 --> 00:36:41,200
in this case we had the<font color="#E5E5E5"> type checker</font>

847
00:36:39,610 --> 00:36:42,630
preventing us

848
00:36:41,200 --> 00:36:45,279
[Music]

849
00:36:42,630 --> 00:36:48,460
<font color="#CCCCCC">it didn't like it if we just using mutex</font>

850
00:36:45,280 --> 00:36:50,740
<font color="#CCCCCC">we just used an arc but once we use them</font>

851
00:36:48,460 --> 00:36:54,430
together<font color="#E5E5E5"> the type checker was happy the</font>

852
00:36:50,740 --> 00:36:58,180
<font color="#CCCCCC">borrowed checker was happy so</font><font color="#E5E5E5"> that's</font>

853
00:36:54,430 --> 00:36:59,950
kind of it<font color="#E5E5E5"> if you if I</font><font color="#CCCCCC"> despite</font><font color="#E5E5E5"> your</font>

854
00:36:58,180 --> 00:37:02,290
curiosity enough there's pretty good

855
00:36:59,950 --> 00:37:05,980
documentation<font color="#CCCCCC"> out there</font><font color="#E5E5E5"> for us</font><font color="#CCCCCC"> there's</font>

856
00:37:02,290 --> 00:37:08,590
this book which is<font color="#CCCCCC"> also</font><font color="#E5E5E5"> in high copy but</font>

857
00:37:05,980 --> 00:37:09,850
<font color="#E5E5E5">you can just read online for free if you</font>

858
00:37:08,590 --> 00:37:12,640
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> look at unsafe code</font>

859
00:37:09,850 --> 00:37:15,730
there's the<font color="#CCCCCC"> Russell nomicon that is</font><font color="#E5E5E5"> also</font>

860
00:37:12,640 --> 00:37:17,770
<font color="#E5E5E5">kind of interesting to read for security</font>

861
00:37:15,730 --> 00:37:20,580
minded people<font color="#E5E5E5"> to find out what's more of</font>

862
00:37:17,770 --> 00:37:23,560
what's happening underneath in rust

863
00:37:20,580 --> 00:37:25,569
<font color="#CCCCCC">there's a</font><font color="#E5E5E5"> rust for C++ programmers and C</font>

864
00:37:23,560 --> 00:37:27,490
programmers<font color="#E5E5E5"> Reaper which kind of kinds</font>

865
00:37:25,570 --> 00:37:31,270
tries<font color="#E5E5E5"> to transfer those concepts from</font>

866
00:37:27,490 --> 00:37:32,919
<font color="#E5E5E5">one to the other and there's a bunch of</font>

867
00:37:31,270 --> 00:37:35,710
others<font color="#E5E5E5"> this week and rust is kind</font><font color="#CCCCCC"> of</font>

868
00:37:32,920 --> 00:37:40,270
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> to see what libraries coming</font>

869
00:37:35,710 --> 00:37:42,550
out what new features<font color="#CCCCCC"> that</font><font color="#E5E5E5"> non null</font>

870
00:37:40,270 --> 00:37:44,680
pointer example in there is only a

871
00:37:42,550 --> 00:37:46,630
couple<font color="#CCCCCC"> weeks old in the stable version</font>

872
00:37:44,680 --> 00:37:50,440
of<font color="#E5E5E5"> the compiler so there's always change</font>

873
00:37:46,630 --> 00:37:53,920
happening<font color="#CCCCCC"> people have tried a bunch of</font>

874
00:37:50,440 --> 00:37:57,580
<font color="#E5E5E5">things as I said a particular point out</font>

875
00:37:53,920 --> 00:37:59,080
this one<font color="#CCCCCC"> this guy's got really great</font>

876
00:37:57,580 --> 00:38:02,230
tutorial and writing<font color="#E5E5E5"> your own operating</font>

877
00:37:59,080 --> 00:38:03,490
<font color="#CCCCCC">system and</font><font color="#E5E5E5"> rust not the redox sort of</font>

878
00:38:02,230 --> 00:38:05,770
operating system<font color="#E5E5E5"> that we saw which is</font>

879
00:38:03,490 --> 00:38:07,930
<font color="#E5E5E5">far more fully featured but you end up</font>

880
00:38:05,770 --> 00:38:11,140
<font color="#E5E5E5">with</font><font color="#CCCCCC"> something that's an ISO and you can</font>

881
00:38:07,930 --> 00:38:13,169
print<font color="#E5E5E5"> your</font><font color="#CCCCCC"> own stuff</font><font color="#E5E5E5"> to screen it's</font>

882
00:38:11,140 --> 00:38:14,970
pretty cool<font color="#E5E5E5"> pretty fun</font>

883
00:38:13,170 --> 00:38:16,349
as punching<font color="#E5E5E5"> better development</font>

884
00:38:14,970 --> 00:38:18,149
environments and stuff<font color="#CCCCCC"> that people</font><font color="#E5E5E5"> are</font>

885
00:38:16,349 --> 00:38:21,990
trying but again you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that this</font>

886
00:38:18,150 --> 00:38:24,030
is kind<font color="#E5E5E5"> of trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be close</font><font color="#CCCCCC"> to bare</font>

887
00:38:21,990 --> 00:38:28,520
metal<font color="#CCCCCC"> they</font><font color="#E5E5E5"> said people use for us to</font>

888
00:38:24,030 --> 00:38:31,650
write<font color="#E5E5E5"> rest api's and things like that</font>

889
00:38:28,520 --> 00:38:33,869
<font color="#E5E5E5">this all works because the maths so</font>

890
00:38:31,650 --> 00:38:36,920
there's a field of maths which<font color="#E5E5E5"> I don't</font>

891
00:38:33,869 --> 00:38:42,060
<font color="#CCCCCC">know a lot about called</font><font color="#E5E5E5"> linear logic</font><font color="#CCCCCC"> and</font>

892
00:38:36,920 --> 00:38:44,310
it's kind of you can use in probably

893
00:38:42,060 --> 00:38:46,470
butcher<font color="#E5E5E5"> this but you can use variables</font>

894
00:38:44,310 --> 00:38:48,270
in your<font color="#E5E5E5"> proofs but once you've used that</font>

895
00:38:46,470 --> 00:38:52,379
variable once you can only use it<font color="#CCCCCC"> in</font>

896
00:38:48,270 --> 00:38:54,240
your<font color="#E5E5E5"> other assumptions or clauses</font><font color="#CCCCCC"> that's</font>

897
00:38:52,380 --> 00:38:56,430
what the<font color="#E5E5E5"> compiler is using underneath to</font>

898
00:38:54,240 --> 00:38:58,979
do all<font color="#E5E5E5"> that borrowed checking</font><font color="#CCCCCC"> so it's</font>

899
00:38:56,430 --> 00:39:02,339
not<font color="#CCCCCC"> just kind of</font><font color="#E5E5E5"> fluked or</font><font color="#CCCCCC"> kind of</font>

900
00:38:58,980 --> 00:39:05,400
<font color="#CCCCCC">hacked together there's actually really</font>

901
00:39:02,339 --> 00:39:08,430
solid<font color="#CCCCCC"> math underneath it and there's</font>

902
00:39:05,400 --> 00:39:10,619
also some<font color="#CCCCCC"> people have done some work to</font>

903
00:39:08,430 --> 00:39:13,500
<font color="#E5E5E5">prove that those container types a</font>

904
00:39:10,619 --> 00:39:15,210
couple of which you saw the<font color="#E5E5E5"> used bit of</font>

905
00:39:13,500 --> 00:39:16,829
formal methods<font color="#CCCCCC"> to show that</font><font color="#E5E5E5"> those do</font>

906
00:39:15,210 --> 00:39:20,280
indeed have the properties that they

907
00:39:16,829 --> 00:39:22,560
claim to have<font color="#E5E5E5"> doesn't mean</font><font color="#CCCCCC"> that's</font>

908
00:39:20,280 --> 00:39:25,200
necessarily<font color="#E5E5E5"> always secure it's just what</font>

909
00:39:22,560 --> 00:39:26,910
it<font color="#E5E5E5"> says and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> are trying</font>

910
00:39:25,200 --> 00:39:29,609
<font color="#CCCCCC">to build a bit of a rust</font><font color="#E5E5E5"> ecosystem on</font>

911
00:39:26,910 --> 00:39:30,629
top and so forth<font color="#E5E5E5"> which I kind of</font>

912
00:39:29,609 --> 00:39:31,290
stumbled across but it could be

913
00:39:30,630 --> 00:39:32,609
<font color="#E5E5E5">interesting</font>

914
00:39:31,290 --> 00:39:36,690
I think it's early<font color="#E5E5E5"> days</font><font color="#CCCCCC"> for that went to</font>

915
00:39:32,609 --> 00:39:38,460
my understanding okay<font color="#E5E5E5"> so for this talk</font>

916
00:39:36,690 --> 00:39:40,950
<font color="#E5E5E5">I've just got website where I put up the</font>

917
00:39:38,460 --> 00:39:42,900
code<font color="#E5E5E5"> these slides</font><font color="#CCCCCC"> are available right</font>

918
00:39:40,950 --> 00:39:45,540
<font color="#CCCCCC">now and when there's a video for this</font>

919
00:39:42,900 --> 00:39:46,859
I'll put out<font color="#CCCCCC"> the video</font><font color="#E5E5E5"> as well but you</font>

920
00:39:45,540 --> 00:39:47,490
<font color="#E5E5E5">can go if you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> explore more of</font>

921
00:39:46,859 --> 00:39:50,940
<font color="#E5E5E5">these yourself</font>

922
00:39:47,490 --> 00:39:52,859
there and that's kind<font color="#CCCCCC"> of it thanks to</font>

923
00:39:50,940 --> 00:39:54,829
Carlene<font color="#CCCCCC"> Silvia for organizing</font><font color="#E5E5E5"> the</font>

924
00:39:52,859 --> 00:39:56,880
conference<font color="#E5E5E5"> and you guys are coming so</font>

925
00:39:54,829 --> 00:40:01,550
let's<font color="#E5E5E5"> take care</font>

926
00:39:56,880 --> 00:40:01,550
[Applause]

927
00:40:01,850 --> 00:40:03,910
you

