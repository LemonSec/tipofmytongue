1
00:00:01,569 --> 00:00:06,010
well thank you very much for coming back

2
00:00:04,359 --> 00:00:08,620
from the break I hope you checked out

3
00:00:06,010 --> 00:00:10,990
the rest of the conference if you stayed

4
00:00:08,620 --> 00:00:13,930
here in the break then that's good Euler

5
00:00:10,990 --> 00:00:16,660
be prepared for a little treat we have

6
00:00:13,930 --> 00:00:19,619
Pat hey Cho is a camera local who will

7
00:00:16,660 --> 00:00:22,210
be speaking about abuse of trust

8
00:00:19,619 --> 00:00:24,279
exploiting our relationship with public

9
00:00:22,210 --> 00:00:25,510
repository so let's give him a warm

10
00:00:24,279 --> 00:00:29,469
welcome

11
00:00:25,510 --> 00:00:29,469
[Applause]

12
00:00:31,660 --> 00:00:36,190
cool everyone thanks for coming I was

13
00:00:34,749 --> 00:00:37,359
gonna make a joke about how there's way

14
00:00:36,190 --> 00:00:38,710
too many people in this room but at

15
00:00:37,359 --> 00:00:40,420
least half the people have nicked off so

16
00:00:38,710 --> 00:00:44,739
that's great so thanks them for ruining

17
00:00:40,420 --> 00:00:46,659
the start of my talk so good hey my name

18
00:00:44,739 --> 00:00:48,309
is Kat ah so I'm a low-level programmer

19
00:00:46,659 --> 00:00:49,629
during the day but when I like to take

20
00:00:48,309 --> 00:00:52,748
my head above this sea level

21
00:00:49,629 --> 00:00:53,920
I'm a Python developer and so today I'm

22
00:00:52,749 --> 00:00:59,379
gonna be talking about the software

23
00:00:53,920 --> 00:01:01,690
supply chain and I'm gonna cover yep I'm

24
00:00:59,379 --> 00:01:03,968
gonna cover basically what this is and

25
00:01:01,690 --> 00:01:06,820
basically how malicious users can

26
00:01:03,969 --> 00:01:09,100
basically exploit that the the concept

27
00:01:06,820 --> 00:01:10,479
of modern software development all right

28
00:01:09,100 --> 00:01:13,119
and then I'm gonna sort of go about what

29
00:01:10,480 --> 00:01:15,730
can we sort of do about this now quick

30
00:01:13,120 --> 00:01:17,440
note is I am gonna focus on Python and

31
00:01:15,730 --> 00:01:20,170
pi PI which is the Python package

32
00:01:17,440 --> 00:01:22,840
repository but all of the concepts I'm

33
00:01:20,170 --> 00:01:24,340
talking about this is systemic in modern

34
00:01:22,840 --> 00:01:26,410
software development as a whole it's not

35
00:01:24,340 --> 00:01:28,060
specific to this particular language and

36
00:01:26,410 --> 00:01:30,310
I'm feeling to point out things that

37
00:01:28,060 --> 00:01:32,620
happen other languages but as a general

38
00:01:30,310 --> 00:01:35,170
rule everything I'm talking about is

39
00:01:32,620 --> 00:01:38,350
going to be possible in basically every

40
00:01:35,170 --> 00:01:40,540
other software language so first of all

41
00:01:38,350 --> 00:01:42,369
what do I mean by the software supply

42
00:01:40,540 --> 00:01:44,230
chain well modern software developing is

43
00:01:42,370 --> 00:01:45,550
hard and I'm not just saying that just

44
00:01:44,230 --> 00:01:48,070
so I own a big paycheck

45
00:01:45,550 --> 00:01:49,658
like it's a very difficult thing you

46
00:01:48,070 --> 00:01:51,789
know there's lots of moving parts in

47
00:01:49,659 --> 00:01:53,320
modern software development if you're

48
00:01:51,790 --> 00:01:54,850
building web apps you have target

49
00:01:53,320 --> 00:01:57,279
multiple different browsers across

50
00:01:54,850 --> 00:01:58,300
multiple different operating systems you

51
00:01:57,280 --> 00:02:01,540
have to deal with differences between

52
00:01:58,300 --> 00:02:03,130
computers and mobiles and tablets are

53
00:02:01,540 --> 00:02:05,380
you often have to plug your software

54
00:02:03,130 --> 00:02:07,420
into other systems such as third-party

55
00:02:05,380 --> 00:02:10,060
authentication servers so there's a lot

56
00:02:07,420 --> 00:02:12,560
of very complex things that go that was

57
00:02:10,060 --> 00:02:15,080
involved when it goes to creating

58
00:02:12,560 --> 00:02:17,600
modern software app right so say for

59
00:02:15,080 --> 00:02:19,550
example you want to create a web app

60
00:02:17,600 --> 00:02:21,530
okay and you want to create an app where

61
00:02:19,550 --> 00:02:25,610
you show people pictures of cute dogs

62
00:02:21,530 --> 00:02:27,080
and you ask their customers to guess the

63
00:02:25,610 --> 00:02:29,780
names of these dogs where nicoletto

64
00:02:27,080 --> 00:02:31,280
guess of 3000 right so you might think

65
00:02:29,780 --> 00:02:32,690
that you know you're gonna spend all

66
00:02:31,280 --> 00:02:35,150
your time when you're developing this

67
00:02:32,690 --> 00:02:39,020
app working really interesting and fun

68
00:02:35,150 --> 00:02:40,760
stuff but in reality what actually

69
00:02:39,020 --> 00:02:42,709
happens is the majority of code that

70
00:02:40,760 --> 00:02:44,570
goes into your app it's gonna fall into

71
00:02:42,709 --> 00:02:46,850
one or two buckets okay you're gonna

72
00:02:44,570 --> 00:02:49,730
have the easing and boring bit so these

73
00:02:46,850 --> 00:02:51,590
are the parts that you like every single

74
00:02:49,730 --> 00:02:53,149
web application has to do and you end up

75
00:02:51,590 --> 00:02:55,370
doing basically the same thing from

76
00:02:53,150 --> 00:02:58,069
every every app so these are things like

77
00:02:55,370 --> 00:02:59,690
hey how do you make a web request right

78
00:02:58,069 --> 00:03:01,940
how do you draw an image on the screen

79
00:02:59,690 --> 00:03:03,410
okay but like these and sort of things

80
00:03:01,940 --> 00:03:05,450
that you do time and time and time again

81
00:03:03,410 --> 00:03:07,250
and they're not really that interesting

82
00:03:05,450 --> 00:03:09,470
cuz they're not really the problem that

83
00:03:07,250 --> 00:03:11,600
you're trying to solve okay and then the

84
00:03:09,470 --> 00:03:12,859
second bucket is that really hard bits

85
00:03:11,600 --> 00:03:15,079
can go really really wrong

86
00:03:12,860 --> 00:03:17,870
okay these are things like the user

87
00:03:15,080 --> 00:03:19,910
authentication how do you keep user data

88
00:03:17,870 --> 00:03:22,340
private okay these are things that if

89
00:03:19,910 --> 00:03:24,739
not written by experts and audited by

90
00:03:22,340 --> 00:03:27,079
experts things can go really really

91
00:03:24,739 --> 00:03:28,970
badly and this is a really really bad

92
00:03:27,079 --> 00:03:31,310
thing right and so therefore if you're

93
00:03:28,970 --> 00:03:32,660
not that expert and you don't want to

94
00:03:31,310 --> 00:03:35,360
spend your time doing the boring bits

95
00:03:32,660 --> 00:03:36,980
what do you do right well so the

96
00:03:35,360 --> 00:03:39,049
community and the open source community

97
00:03:36,980 --> 00:03:41,810
is really really great and it turns out

98
00:03:39,049 --> 00:03:44,329
there's lots of libraries out there that

99
00:03:41,810 --> 00:03:47,299
take a lot of this pain away that have

100
00:03:44,329 --> 00:03:49,220
already implemented a lot of these parts

101
00:03:47,299 --> 00:03:51,380
of the application right and so you can

102
00:03:49,220 --> 00:03:53,900
just take these libraries you can use

103
00:03:51,380 --> 00:03:55,910
their code inside your web application

104
00:03:53,900 --> 00:03:57,769
and therefore you can spend less time

105
00:03:55,910 --> 00:03:59,959
doing the bits you don't want to do and

106
00:03:57,769 --> 00:04:01,459
more time doing the bits and you do want

107
00:03:59,959 --> 00:04:04,329
to do right and so this is really really

108
00:04:01,459 --> 00:04:07,519
great but the library developers also

109
00:04:04,329 --> 00:04:08,480
have the same idea they also have the

110
00:04:07,519 --> 00:04:10,310
parts of library that they were

111
00:04:08,480 --> 00:04:11,959
interested in writing and there's other

112
00:04:10,310 --> 00:04:13,730
bits don't they don't want to do right

113
00:04:11,959 --> 00:04:15,380
and so they themselves have their own

114
00:04:13,730 --> 00:04:18,500
dependencies and what you end up doing

115
00:04:15,380 --> 00:04:21,168
is this really complex chain it's really

116
00:04:18,500 --> 00:04:23,310
more like a web of dependencies and Co

117
00:04:21,168 --> 00:04:26,460
dependencies at inter dependencies

118
00:04:23,310 --> 00:04:29,639
and without realizing it you you might

119
00:04:26,460 --> 00:04:31,710
not even really know exactly who's

120
00:04:29,639 --> 00:04:34,260
written all the code that you are using

121
00:04:31,710 --> 00:04:36,000
inside your application right you you

122
00:04:34,260 --> 00:04:38,130
might not really know where that code

123
00:04:36,000 --> 00:04:41,130
has come from how well it's been written

124
00:04:38,130 --> 00:04:42,840
how well it's being tested and and you

125
00:04:41,130 --> 00:04:44,520
you don't even know my don't even know

126
00:04:42,840 --> 00:04:45,900
some of the names of these because if

127
00:04:44,520 --> 00:04:49,530
their dependencies are dependencies

128
00:04:45,900 --> 00:04:51,419
appendices and normally this is okay

129
00:04:49,530 --> 00:04:55,409
normally you can just go and you know go

130
00:04:51,419 --> 00:04:58,500
live your life but what happens when one

131
00:04:55,410 --> 00:05:01,830
of these dependencies goes bad right are

132
00:04:58,500 --> 00:05:05,190
you gonna even know about this and what

133
00:05:01,830 --> 00:05:07,260
could happen if one of these

134
00:05:05,190 --> 00:05:10,740
dependencies goes bad so that's what

135
00:05:07,260 --> 00:05:12,539
we're gonna talk about today so we're

136
00:05:10,740 --> 00:05:14,490
gonna go through a hypothetical scenario

137
00:05:12,540 --> 00:05:17,070
here so we're sort through a

138
00:05:14,490 --> 00:05:20,310
hypothetical scenario of how this can go

139
00:05:17,070 --> 00:05:23,010
bad and what that could mean for you as

140
00:05:20,310 --> 00:05:26,040
either an app developer or as the end

141
00:05:23,010 --> 00:05:28,020
user of a product okay so we're going

142
00:05:26,040 --> 00:05:29,520
through a hypothetical scenario there is

143
00:05:28,020 --> 00:05:31,560
a company out there called cool Corp

144
00:05:29,520 --> 00:05:33,450
right and cool corpse accounting

145
00:05:31,560 --> 00:05:35,550
department really loves using Python

146
00:05:33,450 --> 00:05:37,979
they like using it so much that they

147
00:05:35,550 --> 00:05:40,830
really love using this Python app called

148
00:05:37,979 --> 00:05:43,289
big money okay and big money exists in

149
00:05:40,830 --> 00:05:44,849
the pipe a packages and so every day the

150
00:05:43,289 --> 00:05:46,289
people in cool cops accounting

151
00:05:44,850 --> 00:05:48,630
department download the latest version

152
00:05:46,289 --> 00:05:50,490
of this app and use it to do whatever

153
00:05:48,630 --> 00:05:51,450
Countians do I know involves money

154
00:05:50,490 --> 00:05:54,960
that's about the extent of my knowledge

155
00:05:51,450 --> 00:05:57,780
about what they happens so we are going

156
00:05:54,960 --> 00:05:59,789
to play the evil people in this scenario

157
00:05:57,780 --> 00:06:01,289
okay and what is gonna be our God what

158
00:05:59,789 --> 00:06:03,900
our goal is gonna break in a cool court

159
00:06:01,289 --> 00:06:06,090
and if doing CDF's has taught me

160
00:06:03,900 --> 00:06:08,219
anything it's that every organization

161
00:06:06,090 --> 00:06:09,810
out there has the secret XT sitting on

162
00:06:08,220 --> 00:06:11,460
their desktop inside of that there's

163
00:06:09,810 --> 00:06:12,479
gonna be a magical hash and inside of

164
00:06:11,460 --> 00:06:14,520
that it's gonna be something is really

165
00:06:12,479 --> 00:06:17,130
really important to someone okay so our

166
00:06:14,520 --> 00:06:20,159
goal is going to be to attack cool Corp

167
00:06:17,130 --> 00:06:22,950
jump onto their desktops and steal their

168
00:06:20,160 --> 00:06:26,850
secrets or take T and X fill that out to

169
00:06:22,950 --> 00:06:28,770
our own purposes okay so what do we do

170
00:06:26,850 --> 00:06:30,660
we'll so first off we're not going to

171
00:06:28,770 --> 00:06:32,490
attack cool Corp directly and we're not

172
00:06:30,660 --> 00:06:35,010
even actually going to attack the app

173
00:06:32,490 --> 00:06:36,270
that they use okay what we're actually

174
00:06:35,010 --> 00:06:36,810
gonna do we're gonna look at that app

175
00:06:36,270 --> 00:06:38,039
and

176
00:06:36,810 --> 00:06:41,340
we have a see that there's actually a

177
00:06:38,040 --> 00:06:44,760
library that that act uses it's called

178
00:06:41,340 --> 00:06:47,099
big - lotsa - money okay what we're

179
00:06:44,760 --> 00:06:49,800
gonna do is we're gonna take over this

180
00:06:47,100 --> 00:06:53,100
app okay and so how are we gonna do this

181
00:06:49,800 --> 00:06:55,169
we'll so with Python packages and this

182
00:06:53,100 --> 00:06:57,600
is similar to all the other open-source

183
00:06:55,169 --> 00:06:58,950
software is you know these are written

184
00:06:57,600 --> 00:07:00,780
by people in the community people these

185
00:06:58,950 --> 00:07:02,400
are people who are sharing code want

186
00:07:00,780 --> 00:07:05,520
people to use their code and want to

187
00:07:02,400 --> 00:07:09,450
people to help them improve it right

188
00:07:05,520 --> 00:07:11,310
so in these packages they list

189
00:07:09,450 --> 00:07:13,740
information about how you can reach them

190
00:07:11,310 --> 00:07:15,900
okay so often you find in Python

191
00:07:13,740 --> 00:07:17,700
packages unifying these people's names

192
00:07:15,900 --> 00:07:19,940
you're gonna find their email addresses

193
00:07:17,700 --> 00:07:22,919
you might find links to their home pages

194
00:07:19,940 --> 00:07:23,940
and some people sort of go even further

195
00:07:22,919 --> 00:07:26,639
than that sometimes without even

196
00:07:23,940 --> 00:07:29,310
realizing knowing it and they might put

197
00:07:26,639 --> 00:07:31,650
up you know links through their git

198
00:07:29,310 --> 00:07:33,570
repositories that contain private SSH

199
00:07:31,650 --> 00:07:35,099
keys to their servers that they don't

200
00:07:33,570 --> 00:07:36,990
didn't necessarily realize that they'd

201
00:07:35,100 --> 00:07:38,850
made that stuff public they also might

202
00:07:36,990 --> 00:07:40,110
put things there such as like links to

203
00:07:38,850 --> 00:07:42,000
confluence pages that they haven't

204
00:07:40,110 --> 00:07:44,220
locked down properly these are things

205
00:07:42,000 --> 00:07:45,180
that if you look in pi PI today these

206
00:07:44,220 --> 00:07:48,030
are the sorts of things that you're

207
00:07:45,180 --> 00:07:50,250
going to find right so if we wanted to

208
00:07:48,030 --> 00:07:52,229
target this developer with a

209
00:07:50,250 --> 00:07:54,930
spearfishing campaigns we wanted to send

210
00:07:52,229 --> 00:07:57,390
them a crafted email that would trick

211
00:07:54,930 --> 00:08:00,240
them into handing over their credentials

212
00:07:57,390 --> 00:08:01,890
to PI pi we have a lot of information

213
00:08:00,240 --> 00:08:03,240
here to go on we have a lot of

214
00:08:01,890 --> 00:08:06,770
information we could craft something

215
00:08:03,240 --> 00:08:10,350
very very specific to that developer in

216
00:08:06,770 --> 00:08:12,479
order to trick them or potentially even

217
00:08:10,350 --> 00:08:16,139
convinced them to giving us their

218
00:08:12,479 --> 00:08:19,320
credentials okay now once we do that and

219
00:08:16,139 --> 00:08:21,930
once that's successful once we've got

220
00:08:19,320 --> 00:08:23,310
their credentials there's a really slim

221
00:08:21,930 --> 00:08:26,610
chance that developers even gonna know

222
00:08:23,310 --> 00:08:29,400
that we've done that so pi pi has no

223
00:08:26,610 --> 00:08:32,159
multi-factor authentication it has no

224
00:08:29,400 --> 00:08:34,380
notifications listing that you've logged

225
00:08:32,159 --> 00:08:35,909
into their account if you push up a new

226
00:08:34,380 --> 00:08:38,969
version of this package they're not

227
00:08:35,909 --> 00:08:41,490
gonna know about it so there is there's

228
00:08:38,969 --> 00:08:43,680
a lot of issues here where if we gain

229
00:08:41,490 --> 00:08:45,570
control of this package that developers

230
00:08:43,679 --> 00:08:47,969
not really gonna know about this and let

231
00:08:45,570 --> 00:08:53,459
alone the developer of big money and

232
00:08:47,970 --> 00:08:55,079
learn you being cool so once we can

233
00:08:53,459 --> 00:08:58,859
modify this package what are we gonna do

234
00:08:55,079 --> 00:09:01,138
about it okay so we're gonna be actually

235
00:08:58,860 --> 00:09:04,860
extra crafty here we're not actually

236
00:09:01,139 --> 00:09:07,889
going to change the library itself okay

237
00:09:04,860 --> 00:09:09,839
because maybe we think hey maybe either

238
00:09:07,889 --> 00:09:12,240
cool corporate we really think maybe big

239
00:09:09,839 --> 00:09:14,339
money you know it checks out whenever we

240
00:09:12,240 --> 00:09:16,860
push whenever a new version is bumped

241
00:09:14,339 --> 00:09:18,300
checks out saves what the code does okay

242
00:09:16,860 --> 00:09:19,649
so we're not actually going to inject

243
00:09:18,300 --> 00:09:21,359
any malicious code inside this

244
00:09:19,649 --> 00:09:24,029
application but what we're going to do

245
00:09:21,360 --> 00:09:26,339
we're going to make our own package and

246
00:09:24,029 --> 00:09:29,250
just slide that into this complex

247
00:09:26,339 --> 00:09:30,660
dependency web and then our own packages

248
00:09:29,250 --> 00:09:32,759
are going to be the dream that actually

249
00:09:30,660 --> 00:09:35,819
contains all the malicious code right

250
00:09:32,759 --> 00:09:37,980
and so from the perspective of big app

251
00:09:35,819 --> 00:09:39,060
that they don't know why this dependency

252
00:09:37,980 --> 00:09:41,339
exists because it's not their

253
00:09:39,060 --> 00:09:43,410
application all they know is one of the

254
00:09:41,339 --> 00:09:45,120
things that they use now requires

255
00:09:43,410 --> 00:09:47,250
something else and they don't know why

256
00:09:45,120 --> 00:09:48,839
and you know that they have no reason to

257
00:09:47,250 --> 00:09:51,000
sort of suspect anything suspicious and

258
00:09:48,839 --> 00:09:52,860
again cool corpse sitting right at the

259
00:09:51,000 --> 00:09:54,930
top of this there extra not gonna have

260
00:09:52,860 --> 00:09:58,250
any clue there they just know that

261
00:09:54,930 --> 00:10:02,309
something got bumped to a new version so

262
00:09:58,250 --> 00:10:05,910
we we can do this and what you have to

263
00:10:02,309 --> 00:10:09,149
publish a like legacy version like file

264
00:10:05,910 --> 00:10:14,639
version with Python so modern Python

265
00:10:09,149 --> 00:10:17,009
packages don't long so so so modern

266
00:10:14,639 --> 00:10:19,319
Python packages we you can install them

267
00:10:17,009 --> 00:10:21,569
but they don't run anything unless you

268
00:10:19,319 --> 00:10:23,519
explicitly call them but if we were to

269
00:10:21,569 --> 00:10:26,040
publish a legacy version of a Python

270
00:10:23,519 --> 00:10:28,620
package what we can actually do is we

271
00:10:26,040 --> 00:10:31,290
can add some extra code that says hey

272
00:10:28,620 --> 00:10:33,149
while I'm installing go do this other

273
00:10:31,290 --> 00:10:36,660
thing and we can make that other thing

274
00:10:33,149 --> 00:10:38,459
be whatever we want it to be so we can

275
00:10:36,660 --> 00:10:41,040
do that so we don't actually need

276
00:10:38,459 --> 00:10:43,349
anybody to call our code directly as

277
00:10:41,040 --> 00:10:45,420
long as we wear in that dependency chain

278
00:10:43,350 --> 00:10:48,569
we have code execution and we can do

279
00:10:45,420 --> 00:10:50,969
whatever we want there so we published

280
00:10:48,569 --> 00:10:53,219
this this legacy version we add that as

281
00:10:50,970 --> 00:10:56,009
a dependency and then whenever someone

282
00:10:53,220 --> 00:10:58,439
goes to grab the new version of big

283
00:10:56,009 --> 00:11:00,410
money we have code execution we can run

284
00:10:58,439 --> 00:11:01,719
whatever we want and we can run on that

285
00:11:00,410 --> 00:11:05,410
users

286
00:11:01,720 --> 00:11:07,510
now I've called this a legacy option but

287
00:11:05,410 --> 00:11:09,520
in reality there are hundreds and

288
00:11:07,510 --> 00:11:12,610
hundreds of legitimate packages out

289
00:11:09,520 --> 00:11:15,160
there that do this that do run code as

290
00:11:12,610 --> 00:11:17,770
they're installing typically it's things

291
00:11:15,160 --> 00:11:19,959
like setting up shortcuts or sometimes

292
00:11:17,770 --> 00:11:22,630
it's actually compiling some code inside

293
00:11:19,960 --> 00:11:24,940
the user system so even though this is a

294
00:11:22,630 --> 00:11:27,250
legacy thing no one has any plans to

295
00:11:24,940 --> 00:11:28,930
actually remove this functionality so

296
00:11:27,250 --> 00:11:31,480
this functionality is going to exist for

297
00:11:28,930 --> 00:11:33,579
a long time now in other languages this

298
00:11:31,480 --> 00:11:36,010
is also possible so if you're using Ruby

299
00:11:33,580 --> 00:11:37,540
or net that this thing is absolutely

300
00:11:36,010 --> 00:11:39,189
possible and in there it's not even a

301
00:11:37,540 --> 00:11:42,099
legacy system it's just something that

302
00:11:39,190 --> 00:11:44,080
you can straight-up do okay and then the

303
00:11:42,100 --> 00:11:45,790
final thing to notice about this so if

304
00:11:44,080 --> 00:11:49,510
we have code execution we're now running

305
00:11:45,790 --> 00:11:51,819
inside cool Corp servers yes we're not

306
00:11:49,510 --> 00:11:53,620
running is like a domain admin or that

307
00:11:51,820 --> 00:11:55,330
you know we're just running is generic

308
00:11:53,620 --> 00:11:57,550
boring user from accounting software but

309
00:11:55,330 --> 00:11:58,810
if we remember our goal if our goal is

310
00:11:57,550 --> 00:12:00,490
to steal secrets from the accounting

311
00:11:58,810 --> 00:12:02,349
department we don't need to main out man

312
00:12:00,490 --> 00:12:05,230
you know that the information that we

313
00:12:02,350 --> 00:12:07,270
want to steal is right there and we

314
00:12:05,230 --> 00:12:09,400
don't really need to go any further than

315
00:12:07,270 --> 00:12:12,340
that so the fact that we're just running

316
00:12:09,400 --> 00:12:14,650
as his user on a on their local machine

317
00:12:12,340 --> 00:12:17,340
that is completely fine for what our

318
00:12:14,650 --> 00:12:20,620
goal is in this scenario

319
00:12:17,340 --> 00:12:22,660
so we've now got the scenario where

320
00:12:20,620 --> 00:12:24,670
we've injected our dependency cool Corp

321
00:12:22,660 --> 00:12:25,540
has downloaded the latest version of

322
00:12:24,670 --> 00:12:27,459
this application

323
00:12:25,540 --> 00:12:30,640
we've got code execution and now we're

324
00:12:27,460 --> 00:12:32,830
running on the user's machine and we've

325
00:12:30,640 --> 00:12:34,990
got their secrets not take steam how do

326
00:12:32,830 --> 00:12:36,340
we get that out right so if this is a

327
00:12:34,990 --> 00:12:39,220
sort of diagram of what we've done so

328
00:12:36,340 --> 00:12:41,440
far so we've uploaded the malicious

329
00:12:39,220 --> 00:12:43,810
packages up to pi pi that's gone down

330
00:12:41,440 --> 00:12:45,700
through cool Corp they've downloaded the

331
00:12:43,810 --> 00:12:48,160
new version we're running that's really

332
00:12:45,700 --> 00:12:50,950
cool but you might sort of think we'll

333
00:12:48,160 --> 00:12:52,600
look if we just were to take that take

334
00:12:50,950 --> 00:12:54,700
that file and just punt it you know

335
00:12:52,600 --> 00:12:56,380
straight off to our evil server we'll

336
00:12:54,700 --> 00:12:58,270
look there's a chance that either the

337
00:12:56,380 --> 00:13:00,189
firewall might block that connection or

338
00:12:58,270 --> 00:13:01,990
your intrusion detection systems you

339
00:13:00,190 --> 00:13:03,730
know they might notice hey this regular

340
00:13:01,990 --> 00:13:05,650
user user from the counting is reaching

341
00:13:03,730 --> 00:13:07,360
out this domain that I've never heard of

342
00:13:05,650 --> 00:13:10,689
and that's that sounds like some dodgy

343
00:13:07,360 --> 00:13:14,530
going on launch investigation right so

344
00:13:10,690 --> 00:13:15,030
if that doesn't work we'll why don't we

345
00:13:14,530 --> 00:13:19,050
just

346
00:13:15,030 --> 00:13:21,360
go back through pi pi right so Python

347
00:13:19,050 --> 00:13:23,880
packages that the way you submit them to

348
00:13:21,360 --> 00:13:25,050
pi PI is just a web request it's a web

349
00:13:23,880 --> 00:13:26,730
request that really isn't that

350
00:13:25,050 --> 00:13:30,270
dissimilar to when you download a

351
00:13:26,730 --> 00:13:34,440
package right so unless you're looking

352
00:13:30,270 --> 00:13:37,170
under the TLS the the network paths to

353
00:13:34,440 --> 00:13:39,330
and from going going from pi pi to

354
00:13:37,170 --> 00:13:40,680
upload a package and downloading from pi

355
00:13:39,330 --> 00:13:43,320
pi these are going to look really really

356
00:13:40,680 --> 00:13:45,209
similar and if you're not paying

357
00:13:43,320 --> 00:13:47,100
attention you're gonna see that network

358
00:13:45,210 --> 00:13:48,420
flow and just completely dismiss it as

359
00:13:47,100 --> 00:13:50,040
someone's just downloading a package

360
00:13:48,420 --> 00:13:52,800
when in reality it's actually gone the

361
00:13:50,040 --> 00:13:54,719
other way around right and the pipe I

362
00:13:52,800 --> 00:13:56,250
mean you know it's one that you've

363
00:13:54,720 --> 00:13:58,260
already trusted because you've already

364
00:13:56,250 --> 00:14:00,330
trusted your users to download this

365
00:13:58,260 --> 00:14:01,860
package right so that you've already

366
00:14:00,330 --> 00:14:03,810
trusted this domain you've already

367
00:14:01,860 --> 00:14:07,260
trusted the certificates these domain

368
00:14:03,810 --> 00:14:09,359
presents and so what we can do as a

369
00:14:07,260 --> 00:14:12,000
malicious package will we're just gonna

370
00:14:09,360 --> 00:14:14,310
wrap we're re-upload ourselves we have a

371
00:14:12,000 --> 00:14:16,200
bumper version repackage ourselves as a

372
00:14:14,310 --> 00:14:18,030
new package except this time we're gonna

373
00:14:16,200 --> 00:14:20,190
package the secret stop takes T inside

374
00:14:18,030 --> 00:14:22,620
of us and then just push us up to pi pi

375
00:14:20,190 --> 00:14:24,390
right and then ask from our evil server

376
00:14:22,620 --> 00:14:26,100
we can just connect pi PI and just pull

377
00:14:24,390 --> 00:14:27,330
it straight from there right and then if

378
00:14:26,100 --> 00:14:29,670
we wanted to do something different we

379
00:14:27,330 --> 00:14:32,040
could bump the version again put a new

380
00:14:29,670 --> 00:14:35,250
new sort of task in there and then we've

381
00:14:32,040 --> 00:14:37,589
basically got this complete C - this is

382
00:14:35,250 --> 00:14:40,230
a complete command control system using

383
00:14:37,590 --> 00:14:42,420
these legitimate servers and again if

384
00:14:40,230 --> 00:14:44,700
the cool cop networks are not paying

385
00:14:42,420 --> 00:14:48,990
attention they're gonna trust all of

386
00:14:44,700 --> 00:14:51,510
this traffic right so you know we've got

387
00:14:48,990 --> 00:14:54,810
this complete sort of flow here right

388
00:14:51,510 --> 00:15:00,840
now that this is a hypothetical you know

389
00:14:54,810 --> 00:15:04,140
example but so how real is this okay so

390
00:15:00,840 --> 00:15:07,820
actually this sort of attacks this has

391
00:15:04,140 --> 00:15:12,930
happened already in real life okay so in

392
00:15:07,820 --> 00:15:15,480
November of last year there was a no js'

393
00:15:12,930 --> 00:15:17,520
library called a vent stream okay now

394
00:15:15,480 --> 00:15:19,950
this this attack is actually absolutely

395
00:15:17,520 --> 00:15:22,980
wild right so instead of spearfishing

396
00:15:19,950 --> 00:15:25,690
so what it's a event stream is it's a

397
00:15:22,980 --> 00:15:27,220
library that gets used similar to the

398
00:15:25,690 --> 00:15:28,870
big money it's a library that gets used

399
00:15:27,220 --> 00:15:30,640
in a lot of applications okay it has

400
00:15:28,870 --> 00:15:32,830
millions and millions of downloads every

401
00:15:30,640 --> 00:15:35,530
single day so it's a pretty popular

402
00:15:32,830 --> 00:15:37,900
library okay but the author of this

403
00:15:35,530 --> 00:15:39,310
library and they didn't really use it

404
00:15:37,900 --> 00:15:40,660
that much you know they'd moved on to

405
00:15:39,310 --> 00:15:41,290
other projects and they were keeping it

406
00:15:40,660 --> 00:15:42,910
alive

407
00:15:41,290 --> 00:15:45,130
but you know they weren't really that

408
00:15:42,910 --> 00:15:46,510
interested in it and what ended up

409
00:15:45,130 --> 00:15:49,900
happening is the author of this library

410
00:15:46,510 --> 00:15:52,000
got approached by email and far from

411
00:15:49,900 --> 00:15:53,530
someone that said hey I've noticed you

412
00:15:52,000 --> 00:15:56,110
don't really care about this this

413
00:15:53,530 --> 00:15:57,970
library that more I use it every day why

414
00:15:56,110 --> 00:16:00,190
don't you let me maintain it for you

415
00:15:57,970 --> 00:16:02,050
yeah and the library developer didn't

416
00:16:00,190 --> 00:16:03,730
have any reason to doubt this you know

417
00:16:02,050 --> 00:16:05,079
that they had their other projects

418
00:16:03,730 --> 00:16:07,120
someone was generally interested in and

419
00:16:05,080 --> 00:16:10,300
they ended up just handing over the

420
00:16:07,120 --> 00:16:12,700
credentials to part to our Malta this

421
00:16:10,300 --> 00:16:15,370
library to do maintain this library now

422
00:16:12,700 --> 00:16:16,930
it turned out that this was a social

423
00:16:15,370 --> 00:16:19,420
engineering attack and turned out that

424
00:16:16,930 --> 00:16:22,089
this was a malicious user and what this

425
00:16:19,420 --> 00:16:25,329
user did is exactly what we talked about

426
00:16:22,090 --> 00:16:27,340
they injected a dependency into the into

427
00:16:25,330 --> 00:16:29,830
the web which which was their own

428
00:16:27,340 --> 00:16:32,020
malicious JavaScript that did a bunch of

429
00:16:29,830 --> 00:16:33,700
wild crazy stuff but it it really are

430
00:16:32,020 --> 00:16:35,620
not boiling down that one in that

431
00:16:33,700 --> 00:16:37,570
happening was it was targeting a

432
00:16:35,620 --> 00:16:40,750
specific application that managed

433
00:16:37,570 --> 00:16:42,700
Bitcoin wallets and so whenever users

434
00:16:40,750 --> 00:16:45,280
use that application it would download

435
00:16:42,700 --> 00:16:48,520
the event stream library therefore a

436
00:16:45,280 --> 00:16:50,740
download the extra malicious package and

437
00:16:48,520 --> 00:16:52,930
then that malicious package would steal

438
00:16:50,740 --> 00:16:55,060
all the credentials to harvest all the

439
00:16:52,930 --> 00:16:58,270
coins from that Bitcoin wallet right so

440
00:16:55,060 --> 00:17:00,760
these are attacks that are happening in

441
00:16:58,270 --> 00:17:02,829
the wild right now okay and when it

442
00:17:00,760 --> 00:17:05,020
comes to Python although we haven't seen

443
00:17:02,830 --> 00:17:07,720
this specific attack that there are

444
00:17:05,020 --> 00:17:09,520
absolutely bein malicious packages that

445
00:17:07,720 --> 00:17:14,589
people are all the time clearing out

446
00:17:09,520 --> 00:17:18,819
from pi PI so these are things that are

447
00:17:14,589 --> 00:17:21,490
happening in the world okay so now it's

448
00:17:18,819 --> 00:17:25,810
broken about the things what can we do

449
00:17:21,490 --> 00:17:29,140
about this okay so there's a couple of

450
00:17:25,810 --> 00:17:31,149
tools that can help us to mitigate the

451
00:17:29,140 --> 00:17:33,880
these sorts of attacks and try and help

452
00:17:31,150 --> 00:17:37,060
us protect us from this so the first one

453
00:17:33,880 --> 00:17:38,900
is PI up safety and j4g x-ray safety is

454
00:17:37,060 --> 00:17:42,440
a free product x-ray is a page

455
00:17:38,900 --> 00:17:44,570
products what these do is basically they

456
00:17:42,440 --> 00:17:46,790
go in maps or if you're a developer they

457
00:17:44,570 --> 00:17:48,290
go and map all of your dependencies and

458
00:17:46,790 --> 00:17:50,330
it may give you a really useful graph

459
00:17:48,290 --> 00:17:53,030
that shows you just all the different

460
00:17:50,330 --> 00:17:54,409
packages that yours depicted that your

461
00:17:53,030 --> 00:17:56,360
library depends on certain apart from

462
00:17:54,410 --> 00:17:58,309
being pretty eye-opening because you'll

463
00:17:56,360 --> 00:18:00,889
see quite a large number of packages in

464
00:17:58,309 --> 00:18:03,559
there what they also do is that they

465
00:18:00,890 --> 00:18:07,490
check that against a database of like

466
00:18:03,559 --> 00:18:09,559
known bad packages now typically these

467
00:18:07,490 --> 00:18:11,330
aren't necessarily malicious packages

468
00:18:09,559 --> 00:18:13,940
what what these tools are mostly looking

469
00:18:11,330 --> 00:18:16,280
for is if there was a library that has a

470
00:18:13,940 --> 00:18:18,770
vulnerability in it and that that

471
00:18:16,280 --> 00:18:20,210
vulnerability got patched and and then

472
00:18:18,770 --> 00:18:21,710
they bump to a new version well if

473
00:18:20,210 --> 00:18:23,780
you're still depending on that old

474
00:18:21,710 --> 00:18:27,080
unpatched version these tools are going

475
00:18:23,780 --> 00:18:29,000
to tell you about it so so this does it

476
00:18:27,080 --> 00:18:31,428
definitely makes it useful to see if

477
00:18:29,000 --> 00:18:34,429
you're relying on these bad packages but

478
00:18:31,429 --> 00:18:37,090
their focus is all on this sort of known

479
00:18:34,429 --> 00:18:39,260
already known bad and known fixed

480
00:18:37,090 --> 00:18:41,149
packages this doesn't really do anything

481
00:18:39,260 --> 00:18:45,170
doesn't do any sort of code analysis to

482
00:18:41,150 --> 00:18:47,720
look for any malicious code ok so then

483
00:18:45,170 --> 00:18:49,940
on the outside you've got our PI C QA is

484
00:18:47,720 --> 00:18:51,980
banded okay and this is looking at code

485
00:18:49,940 --> 00:18:54,350
and so what this actually does is it

486
00:18:51,980 --> 00:18:56,720
takes the code passes it out breaks it

487
00:18:54,350 --> 00:19:01,370
all up into the abstract syntax tea tree

488
00:18:56,720 --> 00:19:05,059
and this looks for me an odd and bad

489
00:19:01,370 --> 00:19:07,580
code but sort of sort of again that the

490
00:19:05,059 --> 00:19:10,639
sort of point of this tool it's more

491
00:19:07,580 --> 00:19:12,320
it's not looking for badness it's more

492
00:19:10,640 --> 00:19:14,600
looking for you if you as a developer

493
00:19:12,320 --> 00:19:15,889
have done something wrong okay so if you

494
00:19:14,600 --> 00:19:18,800
were a developer have written some code

495
00:19:15,890 --> 00:19:20,000
that does something unsafe that's what

496
00:19:18,800 --> 00:19:23,270
this tool is designed for designed to

497
00:19:20,000 --> 00:19:25,820
protect you in those situations but what

498
00:19:23,270 --> 00:19:28,510
hasn't yet been tested and I it'd be

499
00:19:25,820 --> 00:19:31,669
interesting to find out would be if a

500
00:19:28,510 --> 00:19:33,740
malicious user wanted to try and work

501
00:19:31,670 --> 00:19:36,650
find ways around this you know Python

502
00:19:33,740 --> 00:19:38,660
being a dynamic language like it's not

503
00:19:36,650 --> 00:19:40,910
designed to be protecting against an

504
00:19:38,660 --> 00:19:44,150
actual malicious user it's just designed

505
00:19:40,910 --> 00:19:45,200
to be only like finding sort of things

506
00:19:44,150 --> 00:19:48,220
that you've accidentally done something

507
00:19:45,200 --> 00:19:51,500
wrong and then sort of on top of this is

508
00:19:48,220 --> 00:19:52,200
lots and lots of packages get flagged by

509
00:19:51,500 --> 00:19:53,970
this tool

510
00:19:52,200 --> 00:19:56,669
okay I downloaded I think I was like the

511
00:19:53,970 --> 00:19:59,490
top mm packages of pi PI and the top

512
00:19:56,669 --> 00:20:01,169
1000 all through like high warnings

513
00:19:59,490 --> 00:20:03,269
which was their second highest level of

514
00:20:01,169 --> 00:20:07,019
hey this package is doing something it

515
00:20:03,269 --> 00:20:08,460
should Sue's me it shouldn't be so like

516
00:20:07,019 --> 00:20:09,960
even though this tool is gonna be really

517
00:20:08,460 --> 00:20:12,960
really useful you're gonna have an

518
00:20:09,960 --> 00:20:14,909
absolute mountain of false positives if

519
00:20:12,960 --> 00:20:19,919
you're attempting to use this to look at

520
00:20:14,909 --> 00:20:22,590
code that isn't directly yours so on top

521
00:20:19,919 --> 00:20:25,500
of all of them so so really the best

522
00:20:22,590 --> 00:20:27,570
thing in these situations is to really

523
00:20:25,500 --> 00:20:30,809
do basically like a full source code

524
00:20:27,570 --> 00:20:33,570
audit right of all of the current all

525
00:20:30,809 --> 00:20:34,860
your packages but that's really complex

526
00:20:33,570 --> 00:20:37,139
you know it like that that's a lot of

527
00:20:34,860 --> 00:20:39,870
time a lot of complex time and it's so

528
00:20:37,139 --> 00:20:41,340
like if you're a small team you know

529
00:20:39,870 --> 00:20:43,408
there might be thousands and thousands

530
00:20:41,340 --> 00:20:44,939
of lines of Python code there that you

531
00:20:43,409 --> 00:20:46,799
you might have to review to check for

532
00:20:44,940 --> 00:20:48,840
anything dodgy you know you might not

533
00:20:46,799 --> 00:20:50,610
have time for that or what if you're a

534
00:20:48,840 --> 00:20:53,129
student right you're a student that

535
00:20:50,610 --> 00:20:55,529
might not necessarily know what bad and

536
00:20:53,130 --> 00:20:56,730
malicious code looks like so you know

537
00:20:55,529 --> 00:21:00,269
what do you do in these sorts of

538
00:20:56,730 --> 00:21:02,490
situations um also what if you like you

539
00:21:00,269 --> 00:21:03,779
just do sort of a problem once you know

540
00:21:02,490 --> 00:21:06,299
you're not making a production system

541
00:21:03,779 --> 00:21:08,340
like a bunch of times when we're doing

542
00:21:06,299 --> 00:21:10,049
CDF challenges there comes across a

543
00:21:08,340 --> 00:21:11,789
puzzle that you know there's a package

544
00:21:10,049 --> 00:21:13,260
out there that has a solution but once

545
00:21:11,789 --> 00:21:15,149
you solve that puzzle and you get that

546
00:21:13,260 --> 00:21:17,070
flag then you move on with your life you

547
00:21:15,149 --> 00:21:19,559
know you don't need that again you know

548
00:21:17,070 --> 00:21:21,240
so are you gonna do full source code

549
00:21:19,559 --> 00:21:23,370
reviews for something that you might

550
00:21:21,240 --> 00:21:26,309
only need for 15 minutes if that

551
00:21:23,370 --> 00:21:28,889
right and then even if you are looking

552
00:21:26,309 --> 00:21:31,168
at a production system well what if

553
00:21:28,889 --> 00:21:32,850
you're in a you're comparing a number of

554
00:21:31,169 --> 00:21:34,740
different products are you gonna try and

555
00:21:32,850 --> 00:21:37,709
do a code review on every single one

556
00:21:34,740 --> 00:21:39,419
before you determine if it's one of them

557
00:21:37,710 --> 00:21:42,620
is worth going down or not

558
00:21:39,419 --> 00:21:46,110
right so in these sorts of situations

559
00:21:42,620 --> 00:21:48,479
the the tools they cover that they are

560
00:21:46,110 --> 00:21:50,039
useful to have but they definitely have

561
00:21:48,480 --> 00:21:53,250
their flaws in terms of those targeted

562
00:21:50,039 --> 00:21:56,000
malicious attacks and the source code on

563
00:21:53,250 --> 00:21:59,460
it you know it's unlikely to happen so

564
00:21:56,000 --> 00:22:02,010
if only there was some sort of way where

565
00:21:59,460 --> 00:22:04,080
we could take the code and just chuck it

566
00:22:02,010 --> 00:22:05,789
in a bubble right and we can just chuck

567
00:22:04,080 --> 00:22:07,619
it in some contain

568
00:22:05,789 --> 00:22:10,289
environment and we can let everything

569
00:22:07,619 --> 00:22:12,350
there from installation code running all

570
00:22:10,289 --> 00:22:15,509
of that could happen in that bubble and

571
00:22:12,350 --> 00:22:19,199
none of its really segregated from the

572
00:22:15,509 --> 00:22:20,850
rest of our machine okay so this is what

573
00:22:19,200 --> 00:22:23,700
containers are what docker containers

574
00:22:20,850 --> 00:22:26,070
are there's sort of from up until now

575
00:22:23,700 --> 00:22:27,570
with docking containers is unless you

576
00:22:26,070 --> 00:22:29,369
really know how all this stuff works it

577
00:22:27,570 --> 00:22:30,899
can be a bit of a pain to spin up and

578
00:22:29,369 --> 00:22:33,840
test them particularly if you're just

579
00:22:30,899 --> 00:22:35,908
wanting to run a you know I project once

580
00:22:33,840 --> 00:22:38,158
or you're really just trying to focus on

581
00:22:35,909 --> 00:22:41,849
your app development and not on you know

582
00:22:38,159 --> 00:22:43,349
systems administration so I would like

583
00:22:41,849 --> 00:22:44,820
to introduce you to introduce to you a

584
00:22:43,349 --> 00:22:47,999
tool that I've been working on recently

585
00:22:44,820 --> 00:22:51,389
called Dawkins okay what this tool does

586
00:22:47,999 --> 00:22:53,399
is it makes it really easy to take

587
00:22:51,389 --> 00:22:55,469
Python code and run it inside its

588
00:22:53,399 --> 00:22:57,748
containers and protect you know protect

589
00:22:55,470 --> 00:22:59,669
your system while making it really it

590
00:22:57,749 --> 00:23:00,809
really really simple and easy to run the

591
00:22:59,669 --> 00:23:04,470
code and actually get the information

592
00:23:00,809 --> 00:23:07,349
you want to get so what doc and does and

593
00:23:04,470 --> 00:23:10,019
it takes all the packages or everything

594
00:23:07,349 --> 00:23:12,989
from the install to the running of the

595
00:23:10,019 --> 00:23:14,700
code and it puts them builds docker

596
00:23:12,989 --> 00:23:18,330
container segregated doctrine containers

597
00:23:14,700 --> 00:23:22,200
builds the containers runs them and then

598
00:23:18,330 --> 00:23:25,769
it just spits out D right there and then

599
00:23:22,200 --> 00:23:28,019
it spits out the text input okay so what

600
00:23:25,769 --> 00:23:30,179
really what happens is you can very

601
00:23:28,019 --> 00:23:33,210
simply go hey doc end create me an

602
00:23:30,179 --> 00:23:34,830
environment hey and install this package

603
00:23:33,210 --> 00:23:37,049
that my friend talked about recently I

604
00:23:34,830 --> 00:23:40,590
think it's called rongorongo one of them

605
00:23:37,049 --> 00:23:43,080
so give me an environment and installed

606
00:23:40,590 --> 00:23:44,728
ronger inside of it okay and doctor is

607
00:23:43,080 --> 00:23:46,320
gonna go and it's gonna build you this

608
00:23:44,729 --> 00:23:47,879
environment that's segregated from your

609
00:23:46,320 --> 00:23:50,220
machine and it's gonna install that

610
00:23:47,879 --> 00:23:52,830
package inside of that container then

611
00:23:50,220 --> 00:23:54,389
you can just go hey da can run this

612
00:23:52,830 --> 00:23:56,099
script over here and it's gonna take

613
00:23:54,389 --> 00:23:58,859
that script throw that inside the

614
00:23:56,099 --> 00:24:00,330
container it's gonna run all of that and

615
00:23:58,859 --> 00:24:02,369
then just spit out anything that comes

616
00:24:00,330 --> 00:24:04,529
out and if it's got any input ask you

617
00:24:02,369 --> 00:24:05,999
you know for any like user options and

618
00:24:04,529 --> 00:24:08,399
that sort of stuff then all ask you and

619
00:24:05,999 --> 00:24:12,330
so Dawkins will create this bubble

620
00:24:08,399 --> 00:24:13,559
around all of this Python code and you

621
00:24:12,330 --> 00:24:15,689
know and we'll reject your signal

622
00:24:13,559 --> 00:24:17,639
completely segregate your system and the

623
00:24:15,690 --> 00:24:18,650
Python code it's not even necessarily

624
00:24:17,639 --> 00:24:20,000
gonna even know

625
00:24:18,650 --> 00:24:22,340
that's running inside of this system

626
00:24:20,000 --> 00:24:24,410
okay it's gonna see an operating system

627
00:24:22,340 --> 00:24:26,090
it's gonna see a user but it's not gonna

628
00:24:24,410 --> 00:24:27,770
see your user you know it's not gonna

629
00:24:26,090 --> 00:24:30,260
see your passwords it's not gonna see

630
00:24:27,770 --> 00:24:34,280
your sensitive information it's only

631
00:24:30,260 --> 00:24:38,360
gonna have access to what it can see

632
00:24:34,280 --> 00:24:40,100
inside of its own bubble so how does

633
00:24:38,360 --> 00:24:41,540
this protect us against all of the

634
00:24:40,100 --> 00:24:44,600
attacks that we were talking about right

635
00:24:41,540 --> 00:24:45,950
so it prevents the code running on your

636
00:24:44,600 --> 00:24:47,149
machine you know it's gonna run inside

637
00:24:45,950 --> 00:24:50,810
of that bubble particularly at that

638
00:24:47,150 --> 00:24:52,970
install time so on top of this that the

639
00:24:50,810 --> 00:24:54,620
containers that everything runs in as

640
00:24:52,970 --> 00:24:56,570
soon as we're no longer running that

641
00:24:54,620 --> 00:24:59,000
script that gets all shut down and blown

642
00:24:56,570 --> 00:25:00,439
away so if it in attempts to install and

643
00:24:59,000 --> 00:25:01,790
it's sort of persistent backdoor well

644
00:25:00,440 --> 00:25:03,500
that stuff gets blown away and no longer

645
00:25:01,790 --> 00:25:07,399
exists and certainly isn't running on

646
00:25:03,500 --> 00:25:09,500
your machine okay and then also it even

647
00:25:07,400 --> 00:25:11,210
by default we even actually completely

648
00:25:09,500 --> 00:25:13,520
blocked the ability for it to write any

649
00:25:11,210 --> 00:25:14,990
files inside of its own bubble or even

650
00:25:13,520 --> 00:25:17,420
connect to the internet now if you

651
00:25:14,990 --> 00:25:19,370
require them we the tool can sort of let

652
00:25:17,420 --> 00:25:22,190
you do that but so by default there's

653
00:25:19,370 --> 00:25:24,409
the package can't do anything outside of

654
00:25:22,190 --> 00:25:27,050
what it is executing and has no clue

655
00:25:24,410 --> 00:25:29,450
what is happening outside of it okay and

656
00:25:27,050 --> 00:25:31,310
so if we imagine our secrets txt is

657
00:25:29,450 --> 00:25:33,620
sitting on our system you know there's

658
00:25:31,310 --> 00:25:36,760
no way that it can even read that file

659
00:25:33,620 --> 00:25:40,250
let alone even know if that file exists

660
00:25:36,760 --> 00:25:41,930
so I've made this tool and I really

661
00:25:40,250 --> 00:25:43,760
think it's really useful for those sorry

662
00:25:41,930 --> 00:25:45,680
as I was talking about for those times

663
00:25:43,760 --> 00:25:48,379
where you you've just got a quick

664
00:25:45,680 --> 00:25:50,690
problem you want to solve or you're just

665
00:25:48,380 --> 00:25:52,010
doing some testing and you know I would

666
00:25:50,690 --> 00:25:53,570
necessarily recommend this for a

667
00:25:52,010 --> 00:25:55,700
production environment that requires

668
00:25:53,570 --> 00:25:58,220
production solutions because the the

669
00:25:55,700 --> 00:26:00,440
problem with this sort of solution is if

670
00:25:58,220 --> 00:26:01,130
you are putting this in a production

671
00:26:00,440 --> 00:26:03,380
environment

672
00:26:01,130 --> 00:26:05,720
well production data is customer data

673
00:26:03,380 --> 00:26:09,110
and customer data is sensitive data

674
00:26:05,720 --> 00:26:11,200
right so at some point the tool in

675
00:26:09,110 --> 00:26:13,939
production has access to information

676
00:26:11,200 --> 00:26:15,770
that is potentially sensitive right but

677
00:26:13,940 --> 00:26:18,110
so just for testing and for development

678
00:26:15,770 --> 00:26:20,420
where you're not actually giving it any

679
00:26:18,110 --> 00:26:21,379
sensitive information I really think

680
00:26:20,420 --> 00:26:24,020
this tools gonna be really really useful

681
00:26:21,380 --> 00:26:26,060
for those sorts of situations now when

682
00:26:24,020 --> 00:26:28,670
it comes to production you know nothing

683
00:26:26,060 --> 00:26:31,310
is going to beat that full source code

684
00:26:28,670 --> 00:26:34,070
audit but for anything less than that

685
00:26:31,310 --> 00:26:37,419
this tool along with the others are

686
00:26:34,070 --> 00:26:39,919
going to be really really useful okay so

687
00:26:37,420 --> 00:26:41,980
what are we talked about so we've talked

688
00:26:39,920 --> 00:26:44,630
about the software supply chain and

689
00:26:41,980 --> 00:26:47,000
we've we've talked about how really

690
00:26:44,630 --> 00:26:48,710
complex this can be and we've walked

691
00:26:47,000 --> 00:26:51,890
through the hypothetical and showing the

692
00:26:48,710 --> 00:26:54,530
real attack of you know that can occur

693
00:26:51,890 --> 00:26:57,200
on this without you know as any user

694
00:26:54,530 --> 00:26:59,840
really really knowing about it and we've

695
00:26:57,200 --> 00:27:01,880
really gone to show that like without

696
00:26:59,840 --> 00:27:04,159
fully understanding what all the code

697
00:27:01,880 --> 00:27:07,510
depends on you you really leave yourself

698
00:27:04,160 --> 00:27:10,130
vulnerable to to these sorts of attacks

699
00:27:07,510 --> 00:27:11,780
we've also covered that so there's a

700
00:27:10,130 --> 00:27:14,060
number of tools out there now including

701
00:27:11,780 --> 00:27:15,260
Daka and but safety x-ray and bandit you

702
00:27:14,060 --> 00:27:17,960
know we've talked about there are tools

703
00:27:15,260 --> 00:27:20,660
out there that can help developers and

704
00:27:17,960 --> 00:27:23,630
can help users to understand what

705
00:27:20,660 --> 00:27:25,370
exactly what code is being run but they

706
00:27:23,630 --> 00:27:30,370
still don't necessarily help against

707
00:27:25,370 --> 00:27:33,620
these sort of targeted attacks so okay

708
00:27:30,370 --> 00:27:35,840
there we are so I'm putting I'm putting

709
00:27:33,620 --> 00:27:37,550
da camp up on github it's already up

710
00:27:35,840 --> 00:27:39,500
there if anyone's keen

711
00:27:37,550 --> 00:27:44,050
besides that does anyone have any

712
00:27:39,500 --> 00:27:44,050
questions I'm short on time

713
00:27:47,220 --> 00:27:51,230
yeah sure Oh

714
00:28:03,029 --> 00:28:09,340
if this sufferer is malicious and

715
00:28:06,669 --> 00:28:11,799
installs a back door or something in

716
00:28:09,340 --> 00:28:16,480
that container you'd be able to detect

717
00:28:11,799 --> 00:28:19,029
that fact and you know make some kind of

718
00:28:16,480 --> 00:28:22,720
indication I mean could you could you

719
00:28:19,029 --> 00:28:25,870
extend this to make it able to give some

720
00:28:22,720 --> 00:28:29,889
kind of indication whether the software

721
00:28:25,870 --> 00:28:30,668
was bad or not so the question was if

722
00:28:29,889 --> 00:28:32,139
the currents running inside the

723
00:28:30,669 --> 00:28:33,309
container could we do some detection to

724
00:28:32,139 --> 00:28:37,629
tell what's going on

725
00:28:33,309 --> 00:28:41,080
so at the moment no the tool is designed

726
00:28:37,629 --> 00:28:42,759
for just essentially making this quick

727
00:28:41,080 --> 00:28:44,678
running the code however it actually

728
00:28:42,759 --> 00:28:45,610
does a really really great idea and that

729
00:28:44,679 --> 00:28:47,499
is something I'm definitely gonna look

730
00:28:45,610 --> 00:28:49,990
into because in theory yes it should be

731
00:28:47,499 --> 00:28:51,399
quite simple to do so what what you

732
00:28:49,990 --> 00:28:52,929
could easily do is we essentially could

733
00:28:51,399 --> 00:28:55,209
just chuck something underneath Python

734
00:28:52,929 --> 00:28:58,269
that just keeps track of any files that

735
00:28:55,210 --> 00:28:59,259
get written any Network calls that

736
00:28:58,269 --> 00:29:01,869
should be something that's actually

737
00:28:59,259 --> 00:29:05,369
fairly straightforward to do so I will

738
00:29:01,869 --> 00:29:08,379
actually think about doing that so I

739
00:29:05,369 --> 00:29:09,850
think we might have to leave it there if

740
00:29:08,379 --> 00:29:12,248
you've got any more questions for Pat

741
00:29:09,850 --> 00:29:13,748
grab Eve after he's talked and asking

742
00:29:12,249 --> 00:29:14,250
there but let's thank God for a great

743
00:29:13,749 --> 00:29:18,119
talk

744
00:29:14,250 --> 00:29:20,869
[Applause]

745
00:29:18,119 --> 00:29:20,869
yeah

