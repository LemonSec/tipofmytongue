1
00:00:02,750 --> 00:00:08,430
well next up we are very privileged to

2
00:00:05,819 --> 00:00:10,949
have Lois who is the man behind

3
00:00:08,430 --> 00:00:13,949
pentester lab a bit of an icon in

4
00:00:10,949 --> 00:00:17,160
Australia and around the world and his

5
00:00:13,949 --> 00:00:23,180
talk is on j-1 attacking JSON web token

6
00:00:17,160 --> 00:00:23,180
so let's give Louis a welcome reception

7
00:00:25,280 --> 00:00:31,560
Hey

8
00:00:26,610 --> 00:00:34,469
can people hear me in the back yeah okay

9
00:00:31,560 --> 00:00:37,440
so hello everyone my name is Louis and

10
00:00:34,469 --> 00:00:41,940
I'm going to talk about GWT this is my

11
00:00:37,440 --> 00:00:43,500
son cloud so last time I did bat talk in

12
00:00:41,940 --> 00:00:46,290
New Zealand an older version of our talk

13
00:00:43,500 --> 00:00:48,720
I messed up the first demo and my laptop

14
00:00:46,290 --> 00:00:52,950
freezed in the middle of the talk so I'm

15
00:00:48,720 --> 00:00:55,290
hoping to do a bit better today and so -

16
00:00:52,950 --> 00:00:58,410
about myself I'm a security engineer -

17
00:00:55,290 --> 00:00:59,280
pen test code review security architect

18
00:00:58,410 --> 00:01:02,309
a bit of everything

19
00:00:59,280 --> 00:01:03,989
Yannick so I'm not a cryptographer not

20
00:01:02,309 --> 00:01:07,908
at all like I try to read the switch

21
00:01:03,989 --> 00:01:12,420
post paper this morning in the plane and

22
00:01:07,909 --> 00:01:14,670
yeah and I run this website named pentas

23
00:01:12,420 --> 00:01:18,209
terabyte basically teach people web

24
00:01:14,670 --> 00:01:20,340
hacking and when you teach what people

25
00:01:18,209 --> 00:01:23,039
think when you teach people web hacking

26
00:01:20,340 --> 00:01:24,659
you want good examples and JWT are

27
00:01:23,039 --> 00:01:27,060
amazing for that if you want to teach

28
00:01:24,659 --> 00:01:28,529
people applied crypto because again I'm

29
00:01:27,060 --> 00:01:33,420
not a cryptographer I really enjoy

30
00:01:28,529 --> 00:01:35,069
applied crypto and on the left corner

31
00:01:33,420 --> 00:01:37,979
you can see my probably like biggest

32
00:01:35,069 --> 00:01:42,889
achievement in life I made the CBO

33
00:01:37,979 --> 00:01:49,770
stickers right I got some if you want

34
00:01:42,889 --> 00:01:51,539
he's losing it yeah and also yeah a pen

35
00:01:49,770 --> 00:01:53,240
tester lab also has like a free a lot of

36
00:01:51,539 --> 00:01:58,409
free content so check it out

37
00:01:53,240 --> 00:01:59,579
so we're using GWT so every day when

38
00:01:58,409 --> 00:02:01,529
you're browsing the web you Ferb is

39
00:01:59,579 --> 00:02:03,208
using GWT and you don't know about it

40
00:02:01,529 --> 00:02:05,520
because everything is going like through

41
00:02:03,209 --> 00:02:08,369
cookies or for HTTP header or parameters

42
00:02:05,520 --> 00:02:11,850
and people music a lot if they're using

43
00:02:08,369 --> 00:02:14,070
both or four sessions or as well to

44
00:02:11,850 --> 00:02:14,880
manage truss I want to sign something

45
00:02:14,070 --> 00:02:16,230
and

46
00:02:14,880 --> 00:02:19,260
to someone and make sure that no one

47
00:02:16,230 --> 00:02:20,820
tampered with it I'm using GWT and

48
00:02:19,260 --> 00:02:23,090
mostly because as well be cool so I've

49
00:02:20,820 --> 00:02:25,290
only one want to use something cool

50
00:02:23,090 --> 00:02:28,140
people using it as well if they want to

51
00:02:25,290 --> 00:02:30,030
be stateless so they don't want to have

52
00:02:28,140 --> 00:02:32,250
a pool of session across multiple

53
00:02:30,030 --> 00:02:34,320
systems or a pool of session across

54
00:02:32,250 --> 00:02:39,000
multiple data centers so by using signed

55
00:02:34,320 --> 00:02:42,390
session / JWT to do this so we don't

56
00:02:39,000 --> 00:02:44,040
have to like share something like NFS or

57
00:02:42,390 --> 00:02:48,540
just one database or something ugly like

58
00:02:44,040 --> 00:02:50,940
that alright should use wasting so some

59
00:02:48,540 --> 00:02:52,500
acronyms so josée for javascript objects

60
00:02:50,940 --> 00:02:56,130
signing an encryption that's the group

61
00:02:52,500 --> 00:02:58,080
who is working on putting together or

62
00:02:56,130 --> 00:02:59,760
the RFC to say like oh that's all the

63
00:02:58,080 --> 00:03:01,680
token should be but how things should

64
00:02:59,760 --> 00:03:04,470
work blah blah blah

65
00:03:01,680 --> 00:03:08,130
dot token that's what people call them

66
00:03:04,470 --> 00:03:10,830
GWT or jot just an encryption JSON web

67
00:03:08,130 --> 00:03:12,660
encryption DW e is something I'm not

68
00:03:10,830 --> 00:03:15,860
going to talk about but also like a lot

69
00:03:12,660 --> 00:03:19,920
of interesting thing to look at and

70
00:03:15,860 --> 00:03:22,070
today I'm gonna spend my time on JSON

71
00:03:19,920 --> 00:03:25,350
web signature so jws so basically just

72
00:03:22,070 --> 00:03:25,910
sign token we're gonna talk as well

73
00:03:25,350 --> 00:03:31,350
about

74
00:03:25,910 --> 00:03:34,230
jwk so just a way to represent a key so

75
00:03:31,350 --> 00:03:36,000
just like JSON version of a public key

76
00:03:34,230 --> 00:03:39,269
or private key whatever you want to put

77
00:03:36,000 --> 00:03:46,740
in and jwa are the algorithm but you can

78
00:03:39,270 --> 00:03:48,740
use for JW s or JW e so crypto 101 so

79
00:03:46,740 --> 00:03:51,480
encryption gives you confidentiality

80
00:03:48,740 --> 00:03:52,920
signature gives you integrity and people

81
00:03:51,480 --> 00:03:55,980
get confused with both a thing like okay

82
00:03:52,920 --> 00:03:58,200
if I include something people cannot see

83
00:03:55,980 --> 00:04:01,380
this information so they're not they

84
00:03:58,200 --> 00:04:04,440
cannot tamper with it it's actually not

85
00:04:01,380 --> 00:04:06,960
true you can modify the data without

86
00:04:04,440 --> 00:04:08,940
knowing what's inside and get over

87
00:04:06,960 --> 00:04:10,890
results so when you're signing things

88
00:04:08,940 --> 00:04:14,100
what you want what when you want

89
00:04:10,890 --> 00:04:17,190
integrity what you do is you sign so

90
00:04:14,100 --> 00:04:19,260
multiple ways of signing the most common

91
00:04:17,190 --> 00:04:22,620
way if you're poisoned will play with

92
00:04:19,260 --> 00:04:24,390
payment gateway is using H mark so it's

93
00:04:22,620 --> 00:04:28,380
basically a construction around

94
00:04:24,390 --> 00:04:28,659
- like md5 and it's a chauffeur hash so

95
00:04:28,380 --> 00:04:32,340
you

96
00:04:28,660 --> 00:04:35,650
avoid attacks like length extension and

97
00:04:32,340 --> 00:04:39,400
a lot of ways to use a symmetric crypto

98
00:04:35,650 --> 00:04:42,789
with public private key so this way not

99
00:04:39,400 --> 00:04:46,120
everyone has a secret so if you're using

100
00:04:42,790 --> 00:04:48,520
a secret with a CH mark the person

101
00:04:46,120 --> 00:04:50,760
signing or the system signing needs to

102
00:04:48,520 --> 00:04:53,500
have the key because we're signing right

103
00:04:50,760 --> 00:04:56,080
but the person getting the message and

104
00:04:53,500 --> 00:04:58,000
verifying the message need also to have

105
00:04:56,080 --> 00:05:00,760
the secret because otherwise they can't

106
00:04:58,000 --> 00:05:04,300
compute the same H mark and they can't

107
00:05:00,760 --> 00:05:07,870
tell ok about the same thing if you use

108
00:05:04,300 --> 00:05:11,350
seeing a symmetric crypto the person

109
00:05:07,870 --> 00:05:13,300
signing just needs a private key we also

110
00:05:11,350 --> 00:05:15,010
get the public key for free but we get

111
00:05:13,300 --> 00:05:17,980
the per get the private key and a sign

112
00:05:15,010 --> 00:05:19,870
on the receiving end the person

113
00:05:17,980 --> 00:05:23,280
verifying of the system verifying the C

114
00:05:19,870 --> 00:05:25,930
as a signature only needs the public key

115
00:05:23,280 --> 00:05:28,690
so if you have done a bit of security

116
00:05:25,930 --> 00:05:33,010
before that sounds like a lot better

117
00:05:28,690 --> 00:05:34,300
right anyway so the JWT format so the

118
00:05:33,010 --> 00:05:37,210
good thing with readability and probably

119
00:05:34,300 --> 00:05:40,750
why people like it a lot it's very very

120
00:05:37,210 --> 00:05:43,539
simple or it looks very very simple so

121
00:05:40,750 --> 00:05:45,540
first a bit of Jason so you probably

122
00:05:43,540 --> 00:05:48,280
familiar with JSON you got like okay

123
00:05:45,540 --> 00:05:50,740
this is like a string this is like my

124
00:05:48,280 --> 00:05:54,219
first name my last name you can have

125
00:05:50,740 --> 00:05:56,530
arrays you can add a hash and you can

126
00:05:54,220 --> 00:05:58,000
put whatever you want inside it I was

127
00:05:56,530 --> 00:06:00,429
really inspired when I put that slide

128
00:05:58,000 --> 00:06:08,590
together as you can probably tell that's

129
00:06:00,430 --> 00:06:10,690
actually Silvio's address no so then you

130
00:06:08,590 --> 00:06:12,849
got three parts so that's why it's

131
00:06:10,690 --> 00:06:15,730
really easy the header the payload and

132
00:06:12,850 --> 00:06:17,650
the signature and the signature is here

133
00:06:15,730 --> 00:06:20,410
to make sure you didn't tamper with the

134
00:06:17,650 --> 00:06:22,840
payload and the header very separated by

135
00:06:20,410 --> 00:06:24,669
a dot so this way it's easy when you

136
00:06:22,840 --> 00:06:26,560
receive a token to split it you don't

137
00:06:24,669 --> 00:06:28,390
have like okay I need like five bites

138
00:06:26,560 --> 00:06:32,500
when five bites you just like split on

139
00:06:28,390 --> 00:06:36,430
the dots and it's basically base64

140
00:06:32,500 --> 00:06:38,590
encoded Jason so basically for kind of

141
00:06:36,430 --> 00:06:41,289
its URL size basic stephane coding

142
00:06:38,590 --> 00:06:42,549
without padding which is very similar to

143
00:06:41,289 --> 00:06:44,940
basics before but you will

144
00:06:42,550 --> 00:06:47,229
see it's very some little details and

145
00:06:44,940 --> 00:06:51,610
the signature is also basically fun

146
00:06:47,229 --> 00:06:55,599
coded but it's not Jason so that's why

147
00:06:51,610 --> 00:06:58,889
your token kind of looks like a YJ blah

148
00:06:55,599 --> 00:07:01,930
blah blah blah a YJ blah blah blah dot

149
00:06:58,889 --> 00:07:03,940
signature so because it's the basics t4

150
00:07:01,930 --> 00:07:07,240
of a curly bracket and opening curly

151
00:07:03,940 --> 00:07:10,569
bracket with a double code that gives

152
00:07:07,240 --> 00:07:14,289
you a YJ so really easy to spot on the

153
00:07:10,569 --> 00:07:19,840
wire right you see like a YJ daraa dot a

154
00:07:14,289 --> 00:07:22,419
YJ data a dot it's most likely a JWT so

155
00:07:19,840 --> 00:07:24,758
I was talking about basically for you

156
00:07:22,419 --> 00:07:26,500
are safe encoding without padding the

157
00:07:24,759 --> 00:07:29,169
thing is that people use GWT for web

158
00:07:26,500 --> 00:07:33,669
stuff a lot and if you do web you know

159
00:07:29,169 --> 00:07:36,549
and you do like some GWT or web power

160
00:07:33,669 --> 00:07:38,710
cool you know but some characters really

161
00:07:36,550 --> 00:07:41,560
break payloads like a plus because a

162
00:07:38,710 --> 00:07:44,289
plus is a space encoded right and a

163
00:07:41,560 --> 00:07:45,219
slash or so can break like a tough for

164
00:07:44,289 --> 00:07:49,330
example because that's the way you

165
00:07:45,219 --> 00:07:51,340
delimit paths in a file system so GWT or

166
00:07:49,330 --> 00:07:53,590
real safe basically see for you all safe

167
00:07:51,340 --> 00:07:57,690
encoding without padding get rid of all

168
00:07:53,590 --> 00:08:00,969
these characters that may mess up your

169
00:07:57,690 --> 00:08:02,469
GWT and also remove the equals for the

170
00:08:00,969 --> 00:08:05,199
same reason because that's the way to

171
00:08:02,469 --> 00:08:07,539
split between a name and a value when

172
00:08:05,199 --> 00:08:08,889
you have like HTTP parameters if you

173
00:08:07,539 --> 00:08:13,690
want to have fun you can read the errors

174
00:08:08,889 --> 00:08:16,029
at the bottom so the header contains the

175
00:08:13,690 --> 00:08:19,210
algorithm attribute so but going to tell

176
00:08:16,029 --> 00:08:22,659
the person verifying the token this is

177
00:08:19,210 --> 00:08:26,020
all you need to verify my token and here

178
00:08:22,659 --> 00:08:30,819
for example we're using HS 256 to say

179
00:08:26,020 --> 00:08:32,740
it's H mark we sha 256 it also contains

180
00:08:30,819 --> 00:08:38,079
a type here to select ok this is

181
00:08:32,740 --> 00:08:39,700
actually a JSON web sign ature so you

182
00:08:38,078 --> 00:08:42,549
have a little lot of different algorithm

183
00:08:39,700 --> 00:08:44,050
but are supported because JWT got

184
00:08:42,549 --> 00:08:46,839
created at the time where people thought

185
00:08:44,049 --> 00:08:48,130
like crypto agility is pretty cool we're

186
00:08:46,839 --> 00:08:50,079
going to do something and we can rotate

187
00:08:48,130 --> 00:08:52,810
and change algorithm and stuff like that

188
00:08:50,079 --> 00:08:54,520
which now Noah days it's like a terrible

189
00:08:52,810 --> 00:08:56,250
idea if you designing system you don't

190
00:08:54,520 --> 00:08:58,949
want to be crypto agile because

191
00:08:56,250 --> 00:09:02,130
that's how TL has got done many many

192
00:08:58,950 --> 00:09:05,730
time anyway back to generality so this

193
00:09:02,130 --> 00:09:09,630
report a lot so H much air sa an empty

194
00:09:05,730 --> 00:09:12,840
curve eros a weave so I told you I'm not

195
00:09:09,630 --> 00:09:15,750
a cryptographer MFG one partying

196
00:09:12,840 --> 00:09:19,950
something so just like weird era say oh

197
00:09:15,750 --> 00:09:22,800
but eres a weave we're parting but same

198
00:09:19,950 --> 00:09:25,890
idea private public key so why would you

199
00:09:22,800 --> 00:09:27,959
want multiple algorithm or why would

200
00:09:25,890 --> 00:09:29,939
just like stick to H much because ethnic

201
00:09:27,960 --> 00:09:33,030
is good it's fast and it works

202
00:09:29,940 --> 00:09:34,070
imagine you have like one client and

203
00:09:33,030 --> 00:09:38,430
you're talking to multiple

204
00:09:34,070 --> 00:09:40,590
micro-services pretty common nowadays so

205
00:09:38,430 --> 00:09:42,689
if you're using an H mark every I need

206
00:09:40,590 --> 00:09:45,930
to learn how to use that thing hey every

207
00:09:42,690 --> 00:09:48,570
system need to have the secret to verify

208
00:09:45,930 --> 00:09:50,280
the token otherwise we're just going to

209
00:09:48,570 --> 00:09:51,270
say like okay I got a token but I can't

210
00:09:50,280 --> 00:09:53,689
verify it because I don't have the

211
00:09:51,270 --> 00:09:57,960
secret and you signing for nothing so

212
00:09:53,690 --> 00:10:00,300
everyone got their secret it's good

213
00:09:57,960 --> 00:10:03,270
until CEO comes in and pop one of the

214
00:10:00,300 --> 00:10:03,990
your system then one of the secret is

215
00:10:03,270 --> 00:10:06,449
compromised

216
00:10:03,990 --> 00:10:08,370
but since they all the same or your

217
00:10:06,450 --> 00:10:09,839
secret are compromised so you back to

218
00:10:08,370 --> 00:10:12,030
zero you don't know which one of your

219
00:10:09,839 --> 00:10:13,440
system got popped you know but one is

220
00:10:12,030 --> 00:10:15,600
because your secret is compromised but

221
00:10:13,440 --> 00:10:17,640
you don't know which one that's why you

222
00:10:15,600 --> 00:10:21,710
probably want to use public and private

223
00:10:17,640 --> 00:10:25,020
key so what you can do is something

224
00:10:21,710 --> 00:10:27,000
pretty simple let's say not say stupid

225
00:10:25,020 --> 00:10:29,880
it's put the public and the private key

226
00:10:27,000 --> 00:10:31,170
everywhere but you back to bad scenario

227
00:10:29,880 --> 00:10:35,280
so you're not learning you're not

228
00:10:31,170 --> 00:10:37,380
gaining anything security wise if you're

229
00:10:35,280 --> 00:10:41,640
a bit smaller what you can do is just a

230
00:10:37,380 --> 00:10:43,680
being like of some micro services or API

231
00:10:41,640 --> 00:10:46,260
that are trusted like your

232
00:10:43,680 --> 00:10:49,560
authentication for example and only

233
00:10:46,260 --> 00:10:51,660
those services can issue tokens because

234
00:10:49,560 --> 00:10:55,500
they are the only one with the private

235
00:10:51,660 --> 00:10:57,990
key and everyone else can verify the

236
00:10:55,500 --> 00:11:01,770
signature because we got the public key

237
00:10:57,990 --> 00:11:03,960
and if one of the system got popped and

238
00:11:01,770 --> 00:11:06,900
you lock it's not the one with the

239
00:11:03,960 --> 00:11:10,310
private key you don't really care people

240
00:11:06,900 --> 00:11:12,670
have a shell in your in your network

241
00:11:10,310 --> 00:11:16,130
at least we didn't get the private key

242
00:11:12,670 --> 00:11:17,719
so and it's a good thing as well is that

243
00:11:16,130 --> 00:11:19,610
you can even do that in the browser so

244
00:11:17,720 --> 00:11:20,690
if you need to vary use a token inside

245
00:11:19,610 --> 00:11:22,910
your browser to do for example a

246
00:11:20,690 --> 00:11:25,070
redirect you can you verify the

247
00:11:22,910 --> 00:11:28,640
signature in the browser with the public

248
00:11:25,070 --> 00:11:31,279
key because it's public and why aren't

249
00:11:28,640 --> 00:11:33,939
anyone everyone doing that so primary

250
00:11:31,279 --> 00:11:37,850
that if you had like a really big scale

251
00:11:33,940 --> 00:11:41,600
RSA or elliptic curve is a lot more

252
00:11:37,850 --> 00:11:44,330
resource intensive and a lot bigger than

253
00:11:41,600 --> 00:11:46,490
just H mark and a lot more complex to

254
00:11:44,330 --> 00:11:52,370
deploy so that's why people tend to keep

255
00:11:46,490 --> 00:11:56,360
using H mark sorry so we did the header

256
00:11:52,370 --> 00:12:00,260
now we're moving to the payload so

257
00:11:56,360 --> 00:12:01,610
basically the payload is very 64 JSON of

258
00:12:00,260 --> 00:12:03,800
whatever you want to put you want to put

259
00:12:01,610 --> 00:12:06,560
a username you want to put rolls you

260
00:12:03,800 --> 00:12:08,949
want to put anything really like you can

261
00:12:06,560 --> 00:12:13,040
throw anything you want in the payload

262
00:12:08,950 --> 00:12:17,060
except you have reserved keyword called

263
00:12:13,040 --> 00:12:19,370
claims for example expiry so when the

264
00:12:17,060 --> 00:12:21,650
token is going to expired or issue out

265
00:12:19,370 --> 00:12:24,200
when the token was issued and you got

266
00:12:21,650 --> 00:12:28,430
like few of those for example the

267
00:12:24,200 --> 00:12:31,040
subject audience GTI claim ID so it's

268
00:12:28,430 --> 00:12:32,839
just a unique ID per token so if you

269
00:12:31,040 --> 00:12:35,180
want to do for example ante replay

270
00:12:32,839 --> 00:12:38,420
people use GTI for that because it's

271
00:12:35,180 --> 00:12:41,630
unique per token why would people use

272
00:12:38,420 --> 00:12:43,250
expiry versus issue ad so imagine you

273
00:12:41,630 --> 00:12:45,950
have like a lot of micro services and

274
00:12:43,250 --> 00:12:48,530
some of them are like synchronous and

275
00:12:45,950 --> 00:12:51,440
you want them to trust the token for two

276
00:12:48,530 --> 00:12:53,810
hours you can use expiry but when you

277
00:12:51,440 --> 00:12:57,890
got this really slow micro service but

278
00:12:53,810 --> 00:13:00,109
process like a token every two days for

279
00:12:57,890 --> 00:13:02,420
this one you can say okay use issue at

280
00:13:00,110 --> 00:13:04,610
and only trusted token for one week and

281
00:13:02,420 --> 00:13:08,420
so this way you have this balance and

282
00:13:04,610 --> 00:13:10,730
you can because otherwise you're I think

283
00:13:08,420 --> 00:13:13,490
micro services will I use the token and

284
00:13:10,730 --> 00:13:15,410
they already be expired so they don't

285
00:13:13,490 --> 00:13:17,050
use them so that's why it makes sense to

286
00:13:15,410 --> 00:13:20,270
use a bit of both

287
00:13:17,050 --> 00:13:22,130
so how do you create a token you take

288
00:13:20,270 --> 00:13:24,020
the header your JSON header your

289
00:13:22,130 --> 00:13:26,540
basically for encode it you take

290
00:13:24,020 --> 00:13:28,730
payload ubay 64 encoded then you can

291
00:13:26,540 --> 00:13:32,480
concatenate with a dot the header and

292
00:13:28,730 --> 00:13:34,700
the payload then you sign the header

293
00:13:32,480 --> 00:13:36,170
plus the payload that's important you

294
00:13:34,700 --> 00:13:39,560
don't just you could sign on either

295
00:13:36,170 --> 00:13:41,300
payload but you actually sign both when

296
00:13:39,560 --> 00:13:43,099
you buy 64 encodes the signature and you

297
00:13:41,300 --> 00:13:45,560
append the signature with a dot at the

298
00:13:43,100 --> 00:13:49,340
end and you got these three parts again

299
00:13:45,560 --> 00:13:52,550
header payload signature how do you

300
00:13:49,340 --> 00:13:55,490
verify token so you split it into three

301
00:13:52,550 --> 00:13:57,140
parts you by 64 decode each part when

302
00:13:55,490 --> 00:13:59,450
you pass the JSON of the header and the

303
00:13:57,140 --> 00:14:01,510
payload and then from that you can

304
00:13:59,450 --> 00:14:04,280
retrieve the algorithm from the header

305
00:14:01,510 --> 00:14:06,380
then you can verify the signature so if

306
00:14:04,280 --> 00:14:08,780
you have an attacker mindset you can

307
00:14:06,380 --> 00:14:11,330
tell already but that's a lot of things

308
00:14:08,780 --> 00:14:13,819
you're doing but can go wrong before you

309
00:14:11,330 --> 00:14:16,010
even verify the signature so you're like

310
00:14:13,820 --> 00:14:18,890
basically for decoding data you just on

311
00:14:16,010 --> 00:14:23,300
passing data then you're retrieving data

312
00:14:18,890 --> 00:14:26,090
from bad Jason and then finally you

313
00:14:23,300 --> 00:14:27,589
verify the signature and last step you

314
00:14:26,090 --> 00:14:30,710
verify the claims to make sure like for

315
00:14:27,590 --> 00:14:33,560
example as a token didn't expire so yeah

316
00:14:30,710 --> 00:14:36,830
that's a lot what can go wrong and it

317
00:14:33,560 --> 00:14:39,109
does keep in mind as well but multiple

318
00:14:36,830 --> 00:14:42,170
system can issue tokens like you can

319
00:14:39,110 --> 00:14:44,720
iraq if you testing like doing bug

320
00:14:42,170 --> 00:14:47,000
bounty or pen testing it's not because

321
00:14:44,720 --> 00:14:49,100
one of the token that got issued but one

322
00:14:47,000 --> 00:14:50,570
of the micro services is saying but

323
00:14:49,100 --> 00:14:52,400
we're all going to be signed so we need

324
00:14:50,570 --> 00:14:55,640
to make sure that every single micro

325
00:14:52,400 --> 00:14:59,300
servicing issuing token issues the right

326
00:14:55,640 --> 00:15:00,890
kind of token and token can be used as

327
00:14:59,300 --> 00:15:02,660
well or consumed by multiple systems so

328
00:15:00,890 --> 00:15:06,350
we need to test all this combination of

329
00:15:02,660 --> 00:15:08,270
issuer versus verify or slash user and

330
00:15:06,350 --> 00:15:13,010
all this system can use different

331
00:15:08,270 --> 00:15:14,990
libraries not Java Python Ruby so we can

332
00:15:13,010 --> 00:15:16,610
have different behavior and we can also

333
00:15:14,990 --> 00:15:18,830
use different version of the same

334
00:15:16,610 --> 00:15:21,440
library so it's a lot of testing when

335
00:15:18,830 --> 00:15:23,240
you want to test your ability so when

336
00:15:21,440 --> 00:15:26,510
you're attacking GWT is the main idea is

337
00:15:23,240 --> 00:15:30,230
to bypass or jws to be precise it's the

338
00:15:26,510 --> 00:15:32,030
main ID is to bypass the signature so

339
00:15:30,230 --> 00:15:33,740
for example you're logged in as test and

340
00:15:32,030 --> 00:15:35,449
you want to become admin so you need to

341
00:15:33,740 --> 00:15:36,850
find a way to go around the signature

342
00:15:35,450 --> 00:15:38,870
mechanism

343
00:15:36,850 --> 00:15:42,130
it's really cool actually with the to

344
00:15:38,870 --> 00:15:42,130
screen because people don't look at me

345
00:15:42,370 --> 00:15:56,990
so sorry so the first mistake people are

346
00:15:53,180 --> 00:15:58,810
making is not verifying the signature so

347
00:15:56,990 --> 00:16:02,090
for example in JavaScript you have two

348
00:15:58,810 --> 00:16:05,810
methods to verify in the JSON web token

349
00:16:02,090 --> 00:16:07,040
the default the most use JavaScript

350
00:16:05,810 --> 00:16:10,339
library you have two method you have

351
00:16:07,040 --> 00:16:13,130
decode and verify and they could one

352
00:16:10,340 --> 00:16:15,170
just get the data out whereas a verify

353
00:16:13,130 --> 00:16:18,230
actually checks the signature and a lot

354
00:16:15,170 --> 00:16:19,910
of people make that mistake they use the

355
00:16:18,230 --> 00:16:22,640
wrong one or they just do like a bit of

356
00:16:19,910 --> 00:16:24,079
the code of debugging put the wrong one

357
00:16:22,640 --> 00:16:26,750
and then forget to put back the right

358
00:16:24,080 --> 00:16:28,400
one and it's basically like you have

359
00:16:26,750 --> 00:16:29,900
signed token but you don't verify the

360
00:16:28,400 --> 00:16:31,550
signature so it's just basically you

361
00:16:29,900 --> 00:16:35,810
sending basically four encoded JSON

362
00:16:31,550 --> 00:16:38,209
string so how do you exploit that you

363
00:16:35,810 --> 00:16:41,030
get a token you temp you decode and

364
00:16:38,210 --> 00:16:43,460
temper the payload with the payload and

365
00:16:41,030 --> 00:16:45,589
when you send but token back with the

366
00:16:43,460 --> 00:16:48,140
nuke we've the new data inside the

367
00:16:45,590 --> 00:16:51,050
payload and for example you can go from

368
00:16:48,140 --> 00:16:55,610
test to admin in just like to base 64

369
00:16:51,050 --> 00:16:57,530
comment so as part of the algorithm I

370
00:16:55,610 --> 00:16:59,270
quickly went through like what was

371
00:16:57,530 --> 00:17:02,480
available and I didn't talk about this

372
00:16:59,270 --> 00:17:05,060
one the non algorithm so we have an

373
00:17:02,480 --> 00:17:07,339
algorithm that say like okay instead of

374
00:17:05,060 --> 00:17:09,649
using H mark RSA elliptic curve

375
00:17:07,339 --> 00:17:15,619
blah-blah-blah-blah-blah just use none

376
00:17:09,650 --> 00:17:17,839
don't sign the token and now in 2019

377
00:17:15,619 --> 00:17:20,270
when you look at other what were they

378
00:17:17,839 --> 00:17:22,909
thinking but it's actually pretty common

379
00:17:20,270 --> 00:17:24,550
like it was the case in a tls/ssl at the

380
00:17:22,910 --> 00:17:27,920
time at the same time with null cipher

381
00:17:24,550 --> 00:17:31,700
so it's just a way to make things easy

382
00:17:27,920 --> 00:17:33,230
to debug and I think it was like three

383
00:17:31,700 --> 00:17:36,740
four years ago but someone realized but

384
00:17:33,230 --> 00:17:39,020
a lot of implementation allowed this and

385
00:17:36,740 --> 00:17:42,560
you could just bypass or the sign token

386
00:17:39,020 --> 00:17:45,620
just using the non algorithm so what do

387
00:17:42,560 --> 00:17:47,540
you do you get two token you decode the

388
00:17:45,620 --> 00:17:49,280
header and change algorithm to none or

389
00:17:47,540 --> 00:17:51,980
non depending on those

390
00:17:49,280 --> 00:17:54,500
beside implementation you decode and

391
00:17:51,980 --> 00:17:56,020
change as a payload then you keep or

392
00:17:54,500 --> 00:17:57,800
remove the signature depending on the

393
00:17:56,020 --> 00:17:59,120
server side as well as the library

394
00:17:57,800 --> 00:18:00,710
sometime you need to remove the

395
00:17:59,120 --> 00:18:01,729
signature sometime you need to keep it

396
00:18:00,710 --> 00:18:07,370
so you need to try a bit of everything

397
00:18:01,730 --> 00:18:11,630
and you just in so we're gonna try for

398
00:18:07,370 --> 00:18:15,429
the demo I messed up last time so I got

399
00:18:11,630 --> 00:18:17,990
just a simple website I'm gonna register

400
00:18:15,430 --> 00:18:20,170
Silvio what's your password see view

401
00:18:17,990 --> 00:18:20,170
again

402
00:18:21,190 --> 00:18:29,690
let's see plop okay so I'm logged in as

403
00:18:24,380 --> 00:18:32,360
Silvio now I'm gonna get a terminal okay

404
00:18:29,690 --> 00:18:38,960
people can see that okay so I'm gonna

405
00:18:32,360 --> 00:18:46,399
get it's very bright here I'm gonna end

406
00:18:38,960 --> 00:18:56,990
up with a tan so I get my token I copy

407
00:18:46,400 --> 00:19:02,360
it in VR I'm gonna okay so I didn't I

408
00:18:56,990 --> 00:19:05,110
it's jws algorithm HS 256 so I'm gonna

409
00:19:02,360 --> 00:19:05,110
copy that

410
00:19:10,850 --> 00:19:13,480
what

411
00:19:17,570 --> 00:19:28,019
and I got my new header and yep and then

412
00:19:25,200 --> 00:19:29,789
I gonna go to the end and I'm gonna keep

413
00:19:28,019 --> 00:19:31,159
everything so I'm not gonna modify the

414
00:19:29,789 --> 00:19:34,169
payload just yet

415
00:19:31,159 --> 00:19:35,399
because you want to try when you're

416
00:19:34,169 --> 00:19:39,269
doing this kind of thing you can you

417
00:19:35,399 --> 00:19:40,768
want to try one thing at a time so

418
00:19:39,269 --> 00:19:44,279
basically I'm just doing an HTTP request

419
00:19:40,769 --> 00:19:48,440
which curl because you can't really

420
00:19:44,279 --> 00:19:52,169
trust browsers to do the right thing so

421
00:19:48,440 --> 00:19:53,759
I'm currently logged in as Sylvio no one

422
00:19:52,169 --> 00:19:55,559
care because I logged in as Silvia but

423
00:19:53,759 --> 00:19:57,840
as soon as I and you can see that I

424
00:19:55,559 --> 00:20:00,479
remove the signature as well so now the

425
00:19:57,840 --> 00:20:02,789
token is not we are not verifying the

426
00:20:00,479 --> 00:20:08,609
integrity of the token so I'm going to

427
00:20:02,789 --> 00:20:10,889
basically for decode the payload that's

428
00:20:08,609 --> 00:20:14,369
a bit better for people our thing and

429
00:20:10,889 --> 00:20:18,349
I'm gonna do the same thing I'm gonna D

430
00:20:14,369 --> 00:20:24,478
say okay now I want to be an mean oh I

431
00:20:18,349 --> 00:20:26,789
missed one thing and okay I'm good so if

432
00:20:24,479 --> 00:20:28,979
you can see here it's not it doesn't

433
00:20:26,789 --> 00:20:32,419
look really like JSON here right after

434
00:20:28,979 --> 00:20:34,739
the 44 it's because of the URL safe

435
00:20:32,419 --> 00:20:39,090
base64 encoding without padding if I add

436
00:20:34,739 --> 00:20:42,840
the padding so curly braket happier here

437
00:20:39,090 --> 00:20:44,759
because yeah it's like so basically for

438
00:20:42,840 --> 00:20:48,269
decoding just eat about part of the

439
00:20:44,759 --> 00:20:54,799
dollar so I'm gonna keep that part I'm

440
00:20:48,269 --> 00:20:54,799
gonna get back to my curl and hopefully

441
00:20:59,460 --> 00:21:04,660
see you are currently logged in as n

442
00:21:01,990 --> 00:21:05,830
means the key for its kind of CTF II so

443
00:21:04,660 --> 00:21:08,440
you got a key when you solve an exercise

444
00:21:05,830 --> 00:21:11,230
but it's Sylvia Sylvia Sylvia I really

445
00:21:08,440 --> 00:21:16,480
like Sylvia as you can for retail

446
00:21:11,230 --> 00:21:18,780
already say about the one I messed up

447
00:21:16,480 --> 00:21:18,780
last time

448
00:21:18,870 --> 00:21:28,389
poof the prom is that it's actually the

449
00:21:23,620 --> 00:21:29,830
easiest one so another one is week

450
00:21:28,390 --> 00:21:32,020
secret so especially when you're using

451
00:21:29,830 --> 00:21:34,689
so you can have week every psyche but

452
00:21:32,020 --> 00:21:37,350
it's pretty hard to mess up like every

453
00:21:34,690 --> 00:21:39,490
say key generation those days hopefully

454
00:21:37,350 --> 00:21:41,500
anyway so the thing is that the

455
00:21:39,490 --> 00:21:43,180
signature of the secret is the secret of

456
00:21:41,500 --> 00:21:44,980
the signature relies on the strength of

457
00:21:43,180 --> 00:21:46,450
the secret if your secret is like five

458
00:21:44,980 --> 00:21:49,530
characters it's going to be pretty easy

459
00:21:46,450 --> 00:21:52,780
to crack it and you can crack it offline

460
00:21:49,530 --> 00:21:55,350
with just one valid token so the good

461
00:21:52,780 --> 00:21:59,230
thing is if you want to attack like an

462
00:21:55,350 --> 00:22:02,199
application that you use JWT you get one

463
00:21:59,230 --> 00:22:04,660
token then you get that token and you

464
00:22:02,200 --> 00:22:07,450
try to crack it for six months with ash

465
00:22:04,660 --> 00:22:09,490
cut so you made one request and like

466
00:22:07,450 --> 00:22:12,970
legit requests right then six months

467
00:22:09,490 --> 00:22:14,380
later you get the secret and hopefully

468
00:22:12,970 --> 00:22:16,930
no one change it and you do another

469
00:22:14,380 --> 00:22:20,080
request and you now instead of being

470
00:22:16,930 --> 00:22:22,210
logged in as test you logged in as admin

471
00:22:20,080 --> 00:22:25,000
and you just made two requests and they

472
00:22:22,210 --> 00:22:26,410
both look legit because you don't you're

473
00:22:25,000 --> 00:22:27,760
not do it forcing you are you brute

474
00:22:26,410 --> 00:22:30,370
forcing but offline you're not attacking

475
00:22:27,760 --> 00:22:31,570
the server and like sending requests and

476
00:22:30,370 --> 00:22:33,969
requesting you okay so it's really hard

477
00:22:31,570 --> 00:22:39,250
to detect so and basically as people say

478
00:22:33,970 --> 00:22:40,390
no logs no crime that's when you can

479
00:22:39,250 --> 00:22:44,170
tell that people are from lower

480
00:22:40,390 --> 00:22:47,110
enforcement in the room yeah can tell

481
00:22:44,170 --> 00:22:49,780
when CB in Canberra where more people

482
00:22:47,110 --> 00:22:54,219
here so basically and it happens a lot

483
00:22:49,780 --> 00:22:58,090
like for example that's just one kind of

484
00:22:54,220 --> 00:23:02,440
like framework around like GWT REST API

485
00:22:58,090 --> 00:23:04,270
Express and that's always said the JWT

486
00:23:02,440 --> 00:23:05,860
we just like okay if we are in

487
00:23:04,270 --> 00:23:07,420
production we're going to use the

488
00:23:05,860 --> 00:23:09,610
environment variable Jade ability

489
00:23:07,420 --> 00:23:10,550
underscore secret if we are not in

490
00:23:09,610 --> 00:23:13,580
production mode

491
00:23:10,550 --> 00:23:14,899
we're just gonna use secret and yeah

492
00:23:13,580 --> 00:23:17,780
that's probably a terrible idea because

493
00:23:14,900 --> 00:23:20,180
someone makes a typo and just type like

494
00:23:17,780 --> 00:23:23,180
poor diction into the production and you

495
00:23:20,180 --> 00:23:25,270
in a lot of trouble so yeah you really

496
00:23:23,180 --> 00:23:27,320
want to use strong secret for that so

497
00:23:25,270 --> 00:23:29,300
exploitation you get to token you Britt

498
00:23:27,320 --> 00:23:32,450
was a secret offline until you get the

499
00:23:29,300 --> 00:23:34,700
same signature and then once you get

500
00:23:32,450 --> 00:23:38,120
this H Mac to sign the secret you can

501
00:23:34,700 --> 00:23:40,520
just create whatever durability you want

502
00:23:38,120 --> 00:23:43,879
you just signs of payload and send back

503
00:23:40,520 --> 00:23:46,930
to the application and you're in now

504
00:23:43,880 --> 00:23:51,680
we're going to go to the funny stuff

505
00:23:46,930 --> 00:23:54,470
algorithm confusion so the algorithm or

506
00:23:51,680 --> 00:23:56,600
the sender control algorithm used so

507
00:23:54,470 --> 00:24:00,050
when I create a JWT and I send it to

508
00:23:56,600 --> 00:24:02,870
like an application me as a malicious

509
00:24:00,050 --> 00:24:04,610
person I'm gonna pick what algorithm is

510
00:24:02,870 --> 00:24:06,889
used because I'm creating the gel

511
00:24:04,610 --> 00:24:08,600
ability right so I can say like okay I'm

512
00:24:06,890 --> 00:24:11,330
you're gonna use none in the application

513
00:24:08,600 --> 00:24:12,889
you select Louie it's not 2018 anymore

514
00:24:11,330 --> 00:24:13,970
known is not supported anymore so we

515
00:24:12,890 --> 00:24:16,760
need to do better than that

516
00:24:13,970 --> 00:24:21,680
and it's application use H not for

517
00:24:16,760 --> 00:24:25,550
example we're going to check my token

518
00:24:21,680 --> 00:24:27,590
using the secret if we're using error

519
00:24:25,550 --> 00:24:30,560
say they're going to check but my check

520
00:24:27,590 --> 00:24:34,220
my token using the public key because

521
00:24:30,560 --> 00:24:37,510
you verify with a public key now if you

522
00:24:34,220 --> 00:24:40,610
try to look at the source code of this

523
00:24:37,510 --> 00:24:44,000
verification of this track it's going to

524
00:24:40,610 --> 00:24:48,979
say okay get the algorithm and verify

525
00:24:44,000 --> 00:24:50,530
we've the public key thinking get so

526
00:24:48,980 --> 00:24:53,420
algorithm is going to return error say

527
00:24:50,530 --> 00:24:56,330
but what happens if gets algorithm

528
00:24:53,420 --> 00:24:59,750
return H much the application we select

529
00:24:56,330 --> 00:25:02,389
okay I'm going to verify the token the

530
00:24:59,750 --> 00:25:06,230
signature weaves a public key using H

531
00:25:02,390 --> 00:25:08,360
match and it's a public is public so you

532
00:25:06,230 --> 00:25:11,180
can put onto the get it so basically

533
00:25:08,360 --> 00:25:16,070
going to sign a token with the public

534
00:25:11,180 --> 00:25:17,480
key and manage to get through so you

535
00:25:16,070 --> 00:25:18,409
tell basically you try to talk and it

536
00:25:17,480 --> 00:25:20,150
has a receiver

537
00:25:18,410 --> 00:25:23,610
it's an H magnet an arrest service time

538
00:25:20,150 --> 00:25:25,590
not aracite air s 256 this time

539
00:25:23,610 --> 00:25:27,750
and since in the source code of the

540
00:25:25,590 --> 00:25:30,860
server application based like verifies a

541
00:25:27,750 --> 00:25:34,470
token with a private key thinking it's

542
00:25:30,860 --> 00:25:38,309
RSA but you sending this is actually H

543
00:25:34,470 --> 00:25:40,140
mark you can get through so how to get

544
00:25:38,309 --> 00:25:43,350
the public key so that's what is a

545
00:25:40,140 --> 00:25:44,700
hardest part it may be available in

546
00:25:43,350 --> 00:25:46,889
JavaScript

547
00:25:44,700 --> 00:25:48,870
it may be publicly available for example

548
00:25:46,890 --> 00:25:50,160
in a mobile client you just reverse some

549
00:25:48,870 --> 00:25:52,379
of our client because they may need to

550
00:25:50,160 --> 00:25:54,990
verify tokens so we just we can get the

551
00:25:52,380 --> 00:25:57,900
public key or maybe in the documentation

552
00:25:54,990 --> 00:26:00,660
as well few good places to get it anyway

553
00:25:57,900 --> 00:26:02,820
we get the public key what we going to

554
00:26:00,660 --> 00:26:04,919
do is we get two tokens sign with RSA

555
00:26:02,820 --> 00:26:07,139
and we have access to the public key

556
00:26:04,919 --> 00:26:09,510
we're going to decode the header and

557
00:26:07,140 --> 00:26:11,309
change the algorithm to errors 256 and

558
00:26:09,510 --> 00:26:13,049
when we're going to tamper with the

559
00:26:11,309 --> 00:26:22,139
payload and we're going to assign the

560
00:26:13,049 --> 00:26:24,418
token with H mark and the public key so

561
00:26:22,140 --> 00:26:27,390
I got another web app so you trust me

562
00:26:24,419 --> 00:26:31,250
I'm Ken register log in but I think the

563
00:26:27,390 --> 00:26:31,250
interesting part is not here

564
00:26:37,820 --> 00:26:42,240
so I got my token I just removed the

565
00:26:41,130 --> 00:26:44,640
signature because I don't care about

566
00:26:42,240 --> 00:26:47,280
that part and I got my public key so

567
00:26:44,640 --> 00:26:49,920
just do two simple things so on one

568
00:26:47,280 --> 00:26:51,990
really important thing is I don't copy

569
00:26:49,920 --> 00:26:54,120
paste the public eye just like reads a

570
00:26:51,990 --> 00:26:55,790
file so I don't make any like changes

571
00:26:54,120 --> 00:26:59,370
with new lines and things like that

572
00:26:55,790 --> 00:27:03,480
and I say like okay I'm gonna say set

573
00:26:59,370 --> 00:27:06,928
the algorithm from eres a 2h mark by

574
00:27:03,480 --> 00:27:08,610
because I'm changing erase 256 to HS 256

575
00:27:06,929 --> 00:27:13,500
then I'm going to change my username

576
00:27:08,610 --> 00:27:16,669
from test to admin and then what I'm

577
00:27:13,500 --> 00:27:21,000
gonna do is just do an H knock of the

578
00:27:16,670 --> 00:27:23,400
data so my new header and my new payload

579
00:27:21,000 --> 00:27:30,510
and I'm gonna sign that we've the public

580
00:27:23,400 --> 00:27:33,650
key so if I again but value I remove the

581
00:27:30,510 --> 00:27:33,650
records just in case

582
00:27:38,160 --> 00:27:50,190
so again using curl because hacking has

583
00:27:44,040 --> 00:27:53,879
to be visual visual localhost 18 if you

584
00:27:50,190 --> 00:27:56,070
wanna thank ya and you're currently

585
00:27:53,880 --> 00:28:01,010
logged in as I mean and the key is Kylie

586
00:27:56,070 --> 00:28:06,960
Kylie Kylie C okay

587
00:28:01,010 --> 00:28:08,700
so again as someone we really enjoy like

588
00:28:06,960 --> 00:28:14,070
applied crypto I find but a really

589
00:28:08,700 --> 00:28:15,510
really cool bug because it's like you

590
00:28:14,070 --> 00:28:16,770
don't need to be like hardcore in crypto

591
00:28:15,510 --> 00:28:21,500
to understand like what the problem is

592
00:28:16,770 --> 00:28:23,850
and why it works and how fun it is now

593
00:28:21,500 --> 00:28:27,750
again we've just ability people like to

594
00:28:23,850 --> 00:28:30,719
be crypto agile so some other this great

595
00:28:27,750 --> 00:28:33,510
idea to say like ah instead of our code

596
00:28:30,720 --> 00:28:37,800
our coding the key we're gonna use key

597
00:28:33,510 --> 00:28:40,890
ID so we can support multiple keys so

598
00:28:37,800 --> 00:28:42,389
basically it's a header in so it's an

599
00:28:40,890 --> 00:28:44,700
attribute in the header of the page of

600
00:28:42,390 --> 00:28:47,010
the durability but say it's like okay

601
00:28:44,700 --> 00:28:48,690
you can retrieve that key from for

602
00:28:47,010 --> 00:28:51,240
example just a string so you can use

603
00:28:48,690 --> 00:28:54,360
that as a path on the filesystem you can

604
00:28:51,240 --> 00:28:56,700
use that as a string to match in a

605
00:28:54,360 --> 00:28:58,800
database and the good thing is that

606
00:28:56,700 --> 00:29:03,180
since you need the key to verify the

607
00:28:58,800 --> 00:29:05,639
token you're gonna do you're gonna if

608
00:29:03,180 --> 00:29:07,260
potentially with key IDs injectable you

609
00:29:05,640 --> 00:29:09,660
can probably put onto the exploit the

610
00:29:07,260 --> 00:29:11,850
bug in that retrieval of the key to

611
00:29:09,660 --> 00:29:16,050
bypass authentication or even get a

612
00:29:11,850 --> 00:29:18,330
shell so we get a sign token containing

613
00:29:16,050 --> 00:29:19,800
a key ID parameter we decode the header

614
00:29:18,330 --> 00:29:22,020
and change a key ID for example to an

615
00:29:19,800 --> 00:29:23,340
SQL injection payload with ten pair with

616
00:29:22,020 --> 00:29:25,470
the payload and what we're going to do

617
00:29:23,340 --> 00:29:27,240
is instead of using the SQL injection to

618
00:29:25,470 --> 00:29:28,620
retrieve data from the database because

619
00:29:27,240 --> 00:29:30,840
that's pretty boring and everyone is

620
00:29:28,620 --> 00:29:32,610
doing that we're going to use this

621
00:29:30,840 --> 00:29:34,830
current injection to return a value that

622
00:29:32,610 --> 00:29:41,689
is predictable and that is going to be

623
00:29:34,830 --> 00:29:41,689
used to sign the token so

624
00:29:42,500 --> 00:29:48,059
[Music]

625
00:29:44,730 --> 00:29:48,059
so again

626
00:29:55,820 --> 00:30:08,820
so but even simpler okay it's in taxi

627
00:30:05,580 --> 00:30:12,080
like I like anyway so here the idea is

628
00:30:08,820 --> 00:30:15,990
okay we got an heiress H mark token and

629
00:30:12,080 --> 00:30:19,230
we just sign it we've the value AAA and

630
00:30:15,990 --> 00:30:21,540
why we using a a because that's going to

631
00:30:19,230 --> 00:30:24,870
be the return value of osq an injection

632
00:30:21,540 --> 00:30:29,370
so what is happening is the application

633
00:30:24,870 --> 00:30:31,889
gets the token pass the header gets a

634
00:30:29,370 --> 00:30:34,939
key ID use that key ID to retrieve the

635
00:30:31,890 --> 00:30:37,590
key to verify the token but as part of

636
00:30:34,940 --> 00:30:39,780
getting that key we do an SQL injection

637
00:30:37,590 --> 00:30:42,750
and we say like okay we're going to

638
00:30:39,780 --> 00:30:44,670
return a AAA and since that's going to

639
00:30:42,750 --> 00:30:46,920
be used as the key to verify the token

640
00:30:44,670 --> 00:30:55,620
we don't assign the token with exactly

641
00:30:46,920 --> 00:30:59,540
the same key again we get to token so

642
00:30:55,620 --> 00:30:59,540
this time I did not remove or say course

643
00:31:04,050 --> 00:31:06,710
okay

644
00:31:10,760 --> 00:31:15,320
yep

645
00:31:13,130 --> 00:31:16,909
and yeah we are currently logged in as

646
00:31:15,320 --> 00:31:20,149
admin because we put our username as an

647
00:31:16,909 --> 00:31:28,460
mean and the keys against Silvio because

648
00:31:20,149 --> 00:31:30,229
I'm someone with a lot of inspiration so

649
00:31:28,460 --> 00:31:32,019
just basically yeah since we have an SQL

650
00:31:30,230 --> 00:31:34,639
injection we can use that to predict to

651
00:31:32,019 --> 00:31:39,919
force application to use okey instead of

652
00:31:34,639 --> 00:31:47,269
the one that was in the database yep so

653
00:31:39,919 --> 00:31:49,580
see ye 2018 0 1 1 4 so as part of the

654
00:31:47,269 --> 00:31:56,419
sign token you can put in the header a

655
00:31:49,580 --> 00:31:59,029
key you say like oh this is a jws token

656
00:31:56,419 --> 00:32:02,720
this is sign using H mark obviously sign

657
00:31:59,029 --> 00:32:07,129
using RSA and this is a key but has been

658
00:32:02,720 --> 00:32:08,899
used to sign the token and obviously if

659
00:32:07,129 --> 00:32:11,240
you server you shouldn't really trust

660
00:32:08,899 --> 00:32:14,330
that key because it's like I signed up

661
00:32:11,240 --> 00:32:16,429
token with that key so I'm giving you

662
00:32:14,330 --> 00:32:18,529
everything and you can use that to check

663
00:32:16,429 --> 00:32:19,759
that I really sign it with that key so

664
00:32:18,529 --> 00:32:21,110
it's like you put the key inside the

665
00:32:19,759 --> 00:32:22,700
envelope and you open the envelope and

666
00:32:21,110 --> 00:32:25,610
select ok over the key that signs the

667
00:32:22,700 --> 00:32:28,879
envelope that's perfect and yeah

668
00:32:25,610 --> 00:32:30,439
basically it's yeah and it was but if

669
00:32:28,879 --> 00:32:32,149
you look at source code but is pretty

670
00:32:30,440 --> 00:32:35,210
complex and we got like a lot of layer

671
00:32:32,149 --> 00:32:38,090
effects abstraction you can see how that

672
00:32:35,210 --> 00:32:41,389
can happen and that happened to Cisco in

673
00:32:38,090 --> 00:32:45,139
the JavaScript library so basically if

674
00:32:41,389 --> 00:32:46,758
it trusts embedded gwk in the header and

675
00:32:45,139 --> 00:32:49,729
the good finger if you were using that

676
00:32:46,759 --> 00:32:51,409
library and never use jwk in your life

677
00:32:49,730 --> 00:32:54,519
you were still vulnerable to that

678
00:32:51,409 --> 00:32:57,980
because that's by default in the library

679
00:32:54,519 --> 00:32:59,750
so what you do you get a token you

680
00:32:57,980 --> 00:33:03,139
decode in tamper with the payload you

681
00:32:59,750 --> 00:33:05,330
generate RSA key to sign your token

682
00:33:03,139 --> 00:33:07,070
because you're going to use RSA and you

683
00:33:05,330 --> 00:33:11,178
add the exponent and the modulus to the

684
00:33:07,070 --> 00:33:12,879
header and use RS 256 and you sign the

685
00:33:11,179 --> 00:33:15,080
token because you got the private key

686
00:33:12,879 --> 00:33:16,490
and you say like ok I send the token

687
00:33:15,080 --> 00:33:19,809
with what by Ricky and check it with a

688
00:33:16,490 --> 00:33:19,809
public key but he's in the same token

689
00:33:25,470 --> 00:33:35,309
don't freeze on me oh come on not again

690
00:33:36,330 --> 00:33:39,449
come on

691
00:33:43,340 --> 00:33:54,629
I'm surprising the unlocking life anyway

692
00:33:49,080 --> 00:33:57,889
last time I managed to recover no that's

693
00:33:54,630 --> 00:33:57,890
gonna be the same thing as last time oh

694
00:33:58,220 --> 00:34:06,830
that's working this time Mike sorry

695
00:34:08,989 --> 00:34:14,580
people are gonna start believing that I

696
00:34:11,040 --> 00:34:18,989
do that on purpose to save time I swear

697
00:34:14,580 --> 00:34:21,719
I got enough content to finish so okay

698
00:34:18,989 --> 00:34:26,489
so I'm gonna do that demo later next

699
00:34:21,719 --> 00:34:28,049
thing why is my computer starting I'm

700
00:34:26,489 --> 00:34:31,770
gonna unplug it why it start because I

701
00:34:28,050 --> 00:34:35,100
may have something so when I start

702
00:34:31,770 --> 00:34:38,400
looking at JWT and GWS like few years

703
00:34:35,100 --> 00:34:40,620
back I read the RFC you know like

704
00:34:38,400 --> 00:34:42,450
everyone know whatever C is basically

705
00:34:40,620 --> 00:34:48,029
like people putting together rules to

706
00:34:42,449 --> 00:34:50,520
select to say like okay but our things

707
00:34:48,030 --> 00:34:52,620
should work when you're using TLS when

708
00:34:50,520 --> 00:34:57,840
you're using SSL when using HTTP things

709
00:34:52,620 --> 00:35:02,450
like that so what I find is FC was with

710
00:34:57,840 --> 00:35:05,640
two parameters named JK you and x5u and

711
00:35:02,450 --> 00:35:07,770
basically yeah I know that it shouldn't

712
00:35:05,640 --> 00:35:08,250
because of a problem and I'm well aware

713
00:35:07,770 --> 00:35:11,220
of that

714
00:35:08,250 --> 00:35:13,140
I was very so and basically I would like

715
00:35:11,220 --> 00:35:15,689
which is amazing it's just a way to

716
00:35:13,140 --> 00:35:19,410
select all to the application go fetch

717
00:35:15,690 --> 00:35:19,680
the key from that web server I should be

718
00:35:19,410 --> 00:35:22,500
alright

719
00:35:19,680 --> 00:35:23,430
it happened before so got to deal with

720
00:35:22,500 --> 00:35:25,190
it

721
00:35:23,430 --> 00:35:28,560
[Music]

722
00:35:25,190 --> 00:35:31,560
so we will pro means that docker takes

723
00:35:28,560 --> 00:35:38,850
like hours to start but we should still

724
00:35:31,560 --> 00:35:40,590
be good if I can fine fine yeah so

725
00:35:38,850 --> 00:35:42,089
basically I read but like oh my god

726
00:35:40,590 --> 00:35:44,670
which is amazing we get like the

727
00:35:42,090 --> 00:35:46,920
application to fetcher jwk there's gonna

728
00:35:44,670 --> 00:35:48,690
be so many bug in that like three four

729
00:35:46,920 --> 00:35:52,860
years of maybe not three forward two

730
00:35:48,690 --> 00:35:54,890
three years at least and at the time no

731
00:35:52,860 --> 00:35:56,929
one was using it

732
00:35:54,890 --> 00:36:00,929
and it was really disappointing

733
00:35:56,929 --> 00:36:07,140
disappointed I really need to get a new

734
00:36:00,929 --> 00:36:11,039
laptop okay eat something so yeah

735
00:36:07,140 --> 00:36:14,729
and so JK you is just short for jwk set

736
00:36:11,039 --> 00:36:20,640
you a hell and recently looked again at

737
00:36:14,729 --> 00:36:22,468
it and people start using it so

738
00:36:20,640 --> 00:36:24,709
basically the idea is you got to use

739
00:36:22,469 --> 00:36:28,219
your application and trusted server and

740
00:36:24,709 --> 00:36:31,558
you send an HTTP request as a user and

741
00:36:28,219 --> 00:36:35,939
the application gonna get this free if

742
00:36:31,559 --> 00:36:38,189
it works yeah get the GWT e past so

743
00:36:35,939 --> 00:36:41,969
header decoded passive editor gets a JK

744
00:36:38,189 --> 00:36:44,009
you then fetch the jwk so the key used

745
00:36:41,969 --> 00:36:48,269
to verify the signature from a trusted

746
00:36:44,009 --> 00:36:51,599
server or from itself and then it's like

747
00:36:48,269 --> 00:36:53,368
okay pass is the gwk and then it

748
00:36:51,599 --> 00:36:56,429
verifies the signature using the JW k

749
00:36:53,369 --> 00:37:00,209
and it's an better response to the user

750
00:36:56,429 --> 00:37:02,579
so if you do like a bit of pen testing

751
00:37:00,209 --> 00:37:05,009
and a bit of bug bounty you can see like

752
00:37:02,579 --> 00:37:12,150
a lot can go wrong here like in this

753
00:37:05,009 --> 00:37:14,489
number three like oh so much fun so so

754
00:37:12,150 --> 00:37:16,859
as an attacker you send an HTTP request

755
00:37:14,489 --> 00:37:19,920
with the malicious GWT so that's it

756
00:37:16,859 --> 00:37:21,749
that's easy mode so it's going to pass

757
00:37:19,920 --> 00:37:23,249
the JK you and you're going to say like

758
00:37:21,749 --> 00:37:24,839
oh instead of going to your trusted

759
00:37:23,249 --> 00:37:27,779
server you should go to my malicious

760
00:37:24,839 --> 00:37:30,779
server a lot better better keys better

761
00:37:27,779 --> 00:37:32,579
quality get V's not miss out and the

762
00:37:30,779 --> 00:37:35,160
server is going to get your malicious JW

763
00:37:32,579 --> 00:37:37,439
key and it's going to pass it and

764
00:37:35,160 --> 00:37:42,019
verifies the token you sent with your

765
00:37:37,439 --> 00:37:44,219
own malicious key and for people who are

766
00:37:42,019 --> 00:37:46,109
into that you can see as well but you

767
00:37:44,219 --> 00:37:48,269
probably got like a server-side request

768
00:37:46,109 --> 00:37:53,339
forgery inside the network of the

769
00:37:48,269 --> 00:37:56,488
application so what's fun but thankfully

770
00:37:53,339 --> 00:37:58,849
most people prevent value say like okay

771
00:37:56,489 --> 00:38:02,670
they should only be you should only

772
00:37:58,849 --> 00:38:05,099
trust some server or some website not

773
00:38:02,670 --> 00:38:07,060
everyone on the Internet so we block but

774
00:38:05,099 --> 00:38:08,890
just simple attack

775
00:38:07,060 --> 00:38:12,070
there's a really fun JavaScript

776
00:38:08,890 --> 00:38:16,210
implementation but fetch it but tell you

777
00:38:12,070 --> 00:38:19,330
like okay this signature is varied I

778
00:38:16,210 --> 00:38:19,930
fetch the token but I don't trust these

779
00:38:19,330 --> 00:38:22,120
people

780
00:38:19,930 --> 00:38:23,799
so you still can do like server-side

781
00:38:22,120 --> 00:38:27,970
request for Joe inside the network and

782
00:38:23,800 --> 00:38:29,560
do whatever you want but but will tell

783
00:38:27,970 --> 00:38:32,410
you like it's not trust it's very but

784
00:38:29,560 --> 00:38:34,930
it's not trust in but turns out

785
00:38:32,410 --> 00:38:40,390
featuring URL is incredibly hard and

786
00:38:34,930 --> 00:38:41,440
people mess it up all the time so yeah

787
00:38:40,390 --> 00:38:43,140
we good

788
00:38:41,440 --> 00:38:46,750
first people using a regular expression

789
00:38:43,140 --> 00:38:49,270
we'd forget to escape the dots so

790
00:38:46,750 --> 00:38:51,370
trusted example trusted dot example.com

791
00:38:49,270 --> 00:38:54,820
you can find a bypass by just buying the

792
00:38:51,370 --> 00:38:57,430
domain domain trusted Z or trust an ABCD

793
00:38:54,820 --> 00:38:59,800
whatever you want example.com and that's

794
00:38:57,430 --> 00:39:05,160
how you can easily bypass this simple a

795
00:38:59,800 --> 00:39:05,160
regular expression so a lot of thing is

796
00:39:05,610 --> 00:39:11,620
people you are using starts with an on

797
00:39:08,890 --> 00:39:14,170
paper starts with looks really good you

798
00:39:11,620 --> 00:39:16,779
say like oh I want the URL to start with

799
00:39:14,170 --> 00:39:18,340
trusted because I trust these people but

800
00:39:16,780 --> 00:39:21,490
if you forget the slash at the end what

801
00:39:18,340 --> 00:39:23,290
you can do is like HTTP trusted at

802
00:39:21,490 --> 00:39:24,520
pentester calm and that's going to go to

803
00:39:23,290 --> 00:39:27,060
pen test a lab that's not going to go to

804
00:39:24,520 --> 00:39:29,470
trusted because it's going to be like

805
00:39:27,060 --> 00:39:31,840
actually be client will think but but so

806
00:39:29,470 --> 00:39:34,540
username to fetch that data from

807
00:39:31,840 --> 00:39:36,220
intercom so that's pretty common

808
00:39:34,540 --> 00:39:39,580
like we've server-side request forgery

809
00:39:36,220 --> 00:39:42,490
another one is to select okay JW k /d

810
00:39:39,580 --> 00:39:44,290
wks the dot slash and a file you

811
00:39:42,490 --> 00:39:45,879
uploaded and since your plot is the key

812
00:39:44,290 --> 00:39:49,150
you can just bypass it that way or you

813
00:39:45,880 --> 00:39:51,760
can find an open redirect or even better

814
00:39:49,150 --> 00:39:52,930
and a header injection we're going to

815
00:39:51,760 --> 00:39:54,760
get back to it our injection because

816
00:39:52,930 --> 00:39:56,799
that's going to be a really fun so we go

817
00:39:54,760 --> 00:39:58,660
back to like one two three we're

818
00:39:56,800 --> 00:40:01,090
fetching the key based on to the jku

819
00:39:58,660 --> 00:40:03,640
header but this time we got an open

820
00:40:01,090 --> 00:40:05,500
redirect and we're gonna use their open

821
00:40:03,640 --> 00:40:07,150
already right to say okay actually

822
00:40:05,500 --> 00:40:10,120
instead of fetching the key from the

823
00:40:07,150 --> 00:40:11,740
trusted Oh just so trusted server is

824
00:40:10,120 --> 00:40:13,720
going to return a redirect to the

825
00:40:11,740 --> 00:40:18,160
malicious server and this application

826
00:40:13,720 --> 00:40:19,750
will fetch the malicious jwk from the

827
00:40:18,160 --> 00:40:21,730
malicious server thanks to the

828
00:40:19,750 --> 00:40:25,900
redirect and when it's given you use

829
00:40:21,730 --> 00:40:29,020
that many shoes jwk to verify the token

830
00:40:25,900 --> 00:40:31,060
and since you control the token and the

831
00:40:29,020 --> 00:40:36,790
senior and the key to sign the token

832
00:40:31,060 --> 00:40:38,920
you're in then even more fun so you know

833
00:40:36,790 --> 00:40:40,450
like I like when you do like pen test

834
00:40:38,920 --> 00:40:43,090
and you run burp and they find any

835
00:40:40,450 --> 00:40:44,799
header injection you find a header

836
00:40:43,090 --> 00:40:46,630
injection I'm gonna have to report it

837
00:40:44,800 --> 00:40:48,640
and when it's going to look lame I'm

838
00:40:46,630 --> 00:40:50,440
gonna have a low in my report and people

839
00:40:48,640 --> 00:40:52,629
are going to laugh at me that's gonna be

840
00:40:50,440 --> 00:40:58,540
terrible we're gonna make header

841
00:40:52,630 --> 00:41:00,280
injection great again so imagine you

842
00:40:58,540 --> 00:41:03,790
have like fetching of a jwk based on the

843
00:41:00,280 --> 00:41:06,070
jku header and this time you can't go

844
00:41:03,790 --> 00:41:08,259
our hole at all to your malicious server

845
00:41:06,070 --> 00:41:10,950
because they got like huge firework

846
00:41:08,260 --> 00:41:13,270
nothing can get out blah blah blah and

847
00:41:10,950 --> 00:41:18,910
you're lucky you got a header injection

848
00:41:13,270 --> 00:41:23,230
I'm going to check quickly if yeah it

849
00:41:18,910 --> 00:41:26,100
looks like a doctor is started we are

850
00:41:23,230 --> 00:41:26,100
back in business

851
00:41:34,310 --> 00:41:41,390
if you do demo it's always good to have

852
00:41:36,170 --> 00:41:42,740
a way to restart everything so you got

853
00:41:41,390 --> 00:41:45,049
to a heavier injection so that's when

854
00:41:42,740 --> 00:41:47,660
you get really tricky what you're going

855
00:41:45,050 --> 00:41:51,590
to do is you're going to exploit the

856
00:41:47,660 --> 00:41:53,810
hetero injection in your jku so you're

857
00:41:51,590 --> 00:41:57,740
going to use a header injection to

858
00:41:53,810 --> 00:42:00,620
return a full body with the key and the

859
00:41:57,740 --> 00:42:03,020
application is going to use that key

860
00:42:00,620 --> 00:42:05,810
because it comes from the trusted server

861
00:42:03,020 --> 00:42:07,640
because the URL starts with the trusted

862
00:42:05,810 --> 00:42:14,330
server and it's going to use that key to

863
00:42:07,640 --> 00:42:26,600
verify it's a token and you're in a jump

864
00:42:14,330 --> 00:42:29,210
to these okay so I'm going to quickly go

865
00:42:26,600 --> 00:42:32,029
back to the previous one to show what I

866
00:42:29,210 --> 00:42:33,860
can solve all of them so basically for

867
00:42:32,030 --> 00:42:36,290
the previous one the one with the not

868
00:42:33,860 --> 00:42:38,090
Joe's a like Cisco not Joe's a bug you

869
00:42:36,290 --> 00:42:42,170
just basically you put inside the header

870
00:42:38,090 --> 00:42:44,410
a jwk weave so it's used for signature

871
00:42:42,170 --> 00:42:46,880
and you put N and E which has a public

872
00:42:44,410 --> 00:42:48,859
the exponent and the modulus or the

873
00:42:46,880 --> 00:42:50,690
modulus and the exponent of your public

874
00:42:48,860 --> 00:42:52,220
key and you sign with the private key

875
00:42:50,690 --> 00:43:02,170
and you send back to the server and

876
00:42:52,220 --> 00:43:05,270
you're going to get in but this time so

877
00:43:02,170 --> 00:43:08,840
we have a simple script so here we're

878
00:43:05,270 --> 00:43:11,540
just generating like a jwk somewhere

879
00:43:08,840 --> 00:43:13,640
else before we just like create we have

880
00:43:11,540 --> 00:43:15,110
a private key and we just say like okay

881
00:43:13,640 --> 00:43:18,080
we get the public key we put that in

882
00:43:15,110 --> 00:43:20,120
some JSON and that's where the cool

883
00:43:18,080 --> 00:43:24,069
thing happened so here

884
00:43:20,120 --> 00:43:24,069
slash DeBerg is

885
00:43:29,650 --> 00:43:33,920
maybe I went a bit too far

886
00:43:31,759 --> 00:43:35,959
sludge debug is your header injection so

887
00:43:33,920 --> 00:43:39,440
it's just going to basic way to inject

888
00:43:35,959 --> 00:43:41,598
in so header but what we're going to do

889
00:43:39,440 --> 00:43:44,569
is inject in the header and we're going

890
00:43:41,599 --> 00:43:46,459
to inject so the end of line to go to

891
00:43:44,569 --> 00:43:47,660
the next header when we're going to then

892
00:43:46,459 --> 00:43:50,569
we're going to inject like a content

893
00:43:47,660 --> 00:43:53,509
length to like create a real response

894
00:43:50,569 --> 00:43:55,670
something that looks like a normal HTTP

895
00:43:53,509 --> 00:43:59,420
response coming from the trusted server

896
00:43:55,670 --> 00:44:00,769
which is the same system and we're gonna

897
00:43:59,420 --> 00:44:03,410
inject everything and then we're going

898
00:44:00,769 --> 00:44:07,279
to sign exactly with the same key so if

899
00:44:03,410 --> 00:44:09,019
we run that we can see like oh but RSA

900
00:44:07,279 --> 00:44:13,269
key when I said they were bigger than

901
00:44:09,019 --> 00:44:13,269
the H mark I didn't lie like that's

902
00:44:13,479 --> 00:44:21,049
that's one key so a lot bigger so here

903
00:44:18,170 --> 00:44:25,489
the first part which you probably can

904
00:44:21,049 --> 00:44:27,200
barely see is the header injection but

905
00:44:25,489 --> 00:44:31,459
exploited in a way so you can see like

906
00:44:27,200 --> 00:44:33,379
I'm adding like return and offline when

907
00:44:31,459 --> 00:44:36,828
the content length and then I'm adding

908
00:44:33,380 --> 00:44:39,709
like also Jason so I'm just using the

909
00:44:36,829 --> 00:44:43,339
header injection to create the response

910
00:44:39,709 --> 00:44:46,669
I want with the right jwk then I'm gonna

911
00:44:43,339 --> 00:44:50,749
put all of this in the header as part of

912
00:44:46,670 --> 00:44:56,479
the JK you hope no one got a headache

913
00:44:50,749 --> 00:44:58,698
from this and I'm just gonna say okay so

914
00:44:56,479 --> 00:45:01,069
this is really big token because you can

915
00:44:58,699 --> 00:45:03,529
imagine that you got like the food jwk

916
00:45:01,069 --> 00:45:05,839
embedded in the JK you embedded in the

917
00:45:03,529 --> 00:45:10,190
header by 64 encoded and then it's

918
00:45:05,839 --> 00:45:12,440
Sangha versa and basically we become

919
00:45:10,190 --> 00:45:14,630
admin and yeah

920
00:45:12,440 --> 00:45:16,219
and the key Sevilla silver so basically

921
00:45:14,630 --> 00:45:19,190
we're using the header injection to just

922
00:45:16,219 --> 00:45:21,229
create the right key and since the

923
00:45:19,190 --> 00:45:24,019
header since the response come from the

924
00:45:21,229 --> 00:45:25,819
same server we bypass any restriction

925
00:45:24,019 --> 00:45:28,519
but maybe in place around like fire

926
00:45:25,819 --> 00:45:31,269
wording or URL starting with the right

927
00:45:28,519 --> 00:45:31,269
value and things like that

928
00:45:33,699 --> 00:45:37,089
another thing is

929
00:45:37,200 --> 00:45:43,720
as part of the RFC record I'll record

930
00:45:41,680 --> 00:45:45,640
out that you should avoid many in the

931
00:45:43,720 --> 00:45:48,939
middle and to do that you need to use

932
00:45:45,640 --> 00:45:50,379
HTTPS instead of HTTP because otherwise

933
00:45:48,940 --> 00:45:53,920
if you're malicious you just say like

934
00:45:50,380 --> 00:45:55,450
okay fetch bad key and if you can many

935
00:45:53,920 --> 00:45:57,130
in the Middle's application and you man

936
00:45:55,450 --> 00:46:01,689
in the middle and respond with another

937
00:45:57,130 --> 00:46:05,440
key so the problem is that people don't

938
00:46:01,690 --> 00:46:08,789
owe some implemented get it wrong and

939
00:46:05,440 --> 00:46:13,989
try and chain but you ll start with

940
00:46:08,789 --> 00:46:16,059
HTTPS when they create the token which

941
00:46:13,989 --> 00:46:18,190
is good but you don't actually care what

942
00:46:16,059 --> 00:46:21,009
you need to check is when you retrieve

943
00:46:18,190 --> 00:46:23,140
the key over because again the person

944
00:46:21,009 --> 00:46:24,849
providing the jku is the attacker or

945
00:46:23,140 --> 00:46:26,288
someone you can't trust and we have

946
00:46:24,849 --> 00:46:30,220
control over that value so you should

947
00:46:26,289 --> 00:46:34,059
enforce TLS when you fetch the key not

948
00:46:30,220 --> 00:46:37,828
when you create the token okay

949
00:46:34,059 --> 00:46:41,039
conclusion so use strong secrets and key

950
00:46:37,829 --> 00:46:43,329
because but like the strength of your

951
00:46:41,039 --> 00:46:46,029
security relies on the strength of that

952
00:46:43,329 --> 00:46:48,279
key don't store them in your source code

953
00:46:46,029 --> 00:46:49,509
that's pretty common but like if you

954
00:46:48,279 --> 00:46:50,980
have everything in your source code and

955
00:46:49,509 --> 00:46:52,779
one day one developer leave you need to

956
00:46:50,980 --> 00:46:56,470
rotate the key or you got the key so

957
00:46:52,779 --> 00:46:58,180
it's pretty bad posture make sure you

958
00:46:56,470 --> 00:47:00,730
have here rotation built in it's really

959
00:46:58,180 --> 00:47:02,529
hard to bake here rotation after you get

960
00:47:00,730 --> 00:47:05,410
an incident or when you need to do it

961
00:47:02,529 --> 00:47:06,819
like yeah that's when yeah yeah you

962
00:47:05,410 --> 00:47:10,618
really like in the middle of an incident

963
00:47:06,819 --> 00:47:13,269
to try to get it built in from day one

964
00:47:10,619 --> 00:47:15,400
reviews the library you key your peak

965
00:47:13,269 --> 00:47:18,399
because it's not because you're using

966
00:47:15,400 --> 00:47:19,839
just h mark that the library you using

967
00:47:18,400 --> 00:47:24,069
may not be vulnerable to other things

968
00:47:19,839 --> 00:47:27,400
like the attacks we saw before make sure

969
00:47:24,069 --> 00:47:30,038
you check the signature because you will

970
00:47:27,400 --> 00:47:31,680
be surprised like yeah when I did that

971
00:47:30,039 --> 00:47:34,059
talk last time people were like okay

972
00:47:31,680 --> 00:47:35,379
actually we just took that to the source

973
00:47:34,059 --> 00:47:37,390
code and there was one of the services

974
00:47:35,380 --> 00:47:40,630
that was using day code instead of

975
00:47:37,390 --> 00:47:43,058
verified like we just dragged after the

976
00:47:40,630 --> 00:47:45,339
talk make sure you talk and expire

977
00:47:43,059 --> 00:47:47,200
because if you sign tokens and they

978
00:47:45,339 --> 00:47:49,119
never expire they're going to be valid

979
00:47:47,200 --> 00:47:49,730
forever so your only solution is to

980
00:47:49,119 --> 00:47:51,950
rotate

981
00:47:49,730 --> 00:47:55,940
so you want ready to have expiry inside

982
00:47:51,950 --> 00:47:58,009
your token and forth algorithm so don't

983
00:47:55,940 --> 00:47:59,990
let the client say like ok you're going

984
00:47:58,010 --> 00:48:03,620
to use H Mac today you're gonna use RSA

985
00:47:59,990 --> 00:48:06,290
today just writing code but okay this

986
00:48:03,620 --> 00:48:10,759
has to be verified using H Mac because

987
00:48:06,290 --> 00:48:12,860
that's eight Mac we're using GWT are

988
00:48:10,760 --> 00:48:15,200
very complex and kind of insecure by

989
00:48:12,860 --> 00:48:18,860
design like people working in security

990
00:48:15,200 --> 00:48:21,529
and especially crypto hate GWT people

991
00:48:18,860 --> 00:48:24,560
can use potato which is a lot less

992
00:48:21,530 --> 00:48:28,010
crypto agile and a lot more secure by

993
00:48:24,560 --> 00:48:30,170
design because it's less permissive JWT

994
00:48:28,010 --> 00:48:32,330
library introduced very very interesting

995
00:48:30,170 --> 00:48:35,030
bugs so make sure you check for any if

996
00:48:32,330 --> 00:48:37,490
you do like code review pen test bug

997
00:48:35,030 --> 00:48:40,190
bounty or any security testing ready

998
00:48:37,490 --> 00:48:42,620
because yeah you're gonna find stuff and

999
00:48:40,190 --> 00:48:45,070
thanks for your time and you have any

1000
00:48:42,620 --> 00:48:45,069
question

1001
00:48:52,590 --> 00:48:58,210
thanks about Louie folks do we have any

1002
00:48:55,240 --> 00:48:59,290
questions at all questions yep there's

1003
00:48:58,210 --> 00:49:03,970
just one up the back there

1004
00:48:59,290 --> 00:49:13,300
Mike runners anyone else for questions

1005
00:49:03,970 --> 00:49:15,189
Bueller yep all right that they thank

1006
00:49:13,300 --> 00:49:16,300
you for that was so super interesting

1007
00:49:15,190 --> 00:49:18,130
and some really good points about

1008
00:49:16,300 --> 00:49:20,470
checking keys and so on

1009
00:49:18,130 --> 00:49:22,150
when verifying charts one of the things

1010
00:49:20,470 --> 00:49:24,370
that we used to see quite a lot is that

1011
00:49:22,150 --> 00:49:26,650
when people would verify charts

1012
00:49:24,370 --> 00:49:27,430
particularly things like ID - there

1013
00:49:26,650 --> 00:49:29,770
might have been issued by another

1014
00:49:27,430 --> 00:49:31,330
service they would get past all of these

1015
00:49:29,770 --> 00:49:33,280
and do all these bits Rhett and that

1016
00:49:31,330 --> 00:49:34,840
they get so excited at the end that

1017
00:49:33,280 --> 00:49:36,670
forget to actually check that the token

1018
00:49:34,840 --> 00:49:38,680
was intended for them yeah and so I

1019
00:49:36,670 --> 00:49:40,120
think that's yeah something that it's a

1020
00:49:38,680 --> 00:49:41,680
real gotcha when you're using another

1021
00:49:40,120 --> 00:49:44,140
service just make sure that it's

1022
00:49:41,680 --> 00:49:53,009
actually been issued for yours and not

1023
00:49:44,140 --> 00:49:53,009
for someone else's service good point

1024
00:49:55,290 --> 00:50:03,460
thank you do we have any other questions

1025
00:49:57,340 --> 00:50:07,080
at all all right fantastic talk thanks

1026
00:50:03,460 --> 00:50:07,080
Louie all right let's humor hand

1027
00:50:09,260 --> 00:50:11,320
you

