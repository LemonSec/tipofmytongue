1
00:00:02,420 --> 00:00:07,360
alright thanks for having me back it's

2
00:00:05,180 --> 00:00:10,879
great to be here another year and

3
00:00:07,360 --> 00:00:12,590
besides Canberra so I was going to make

4
00:00:10,879 --> 00:00:16,939
a joke about you trying to compete with

5
00:00:12,590 --> 00:00:19,009
the Kiba cotton pyrotechnics but that's

6
00:00:16,940 --> 00:00:20,390
fine well we'll try to get on with it

7
00:00:19,010 --> 00:00:24,500
I basically hate that I had to talk

8
00:00:20,390 --> 00:00:24,860
about source code auditing really doing

9
00:00:24,500 --> 00:00:29,780
it

10
00:00:24,860 --> 00:00:31,759
I guess quickly and efficiently and so

11
00:00:29,780 --> 00:00:33,610
yeah we'll start some introduction a

12
00:00:31,760 --> 00:00:35,989
little bit about me a little bit about

13
00:00:33,610 --> 00:00:36,560
source code auditing talk about it the

14
00:00:35,989 --> 00:00:39,099
theory

15
00:00:36,560 --> 00:00:41,930
talk a bit about vulnerabilities and

16
00:00:39,100 --> 00:00:46,340
eventually we get on to actually

17
00:00:41,930 --> 00:00:49,100
auditing so we've sort of encompassing I

18
00:00:46,340 --> 00:00:51,470
guess three things here first being the

19
00:00:49,100 --> 00:00:52,850
traditional code review which is looking

20
00:00:51,470 --> 00:00:54,739
at the code identifying what it does

21
00:00:52,850 --> 00:00:56,630
make sure it meets the required standard

22
00:00:54,739 --> 00:00:59,379
source code a review is the same thing

23
00:00:56,630 --> 00:01:02,120
but looking for vulnerabilities and then

24
00:00:59,379 --> 00:01:06,350
for some reason I decided that trying to

25
00:01:02,120 --> 00:01:08,749
do too fast would be good that's that

26
00:01:06,350 --> 00:01:11,449
sort of the three definitions but

27
00:01:08,749 --> 00:01:12,740
essentially looking at a way to transfer

28
00:01:11,450 --> 00:01:14,959
some knowledge to you guys on how you

29
00:01:12,740 --> 00:01:20,329
can identify vulnerabilities in source

30
00:01:14,959 --> 00:01:21,649
code fast right and there is one thing I

31
00:01:20,329 --> 00:01:23,839
want you guys to take away and I'm

32
00:01:21,649 --> 00:01:25,579
pretty sure this lapin you should all

33
00:01:23,840 --> 00:01:27,709
learn at least one trick that will let

34
00:01:25,579 --> 00:01:31,068
you go home and get a CBE at the end of

35
00:01:27,709 --> 00:01:34,340
this talk yeah it's pretty easy all

36
00:01:31,069 --> 00:01:36,170
right a little bit about myself I'm a

37
00:01:34,340 --> 00:01:39,409
security researcher with Senate labs

38
00:01:36,170 --> 00:01:39,999
which is the testing validation of dark

39
00:01:39,409 --> 00:01:43,249
matter

40
00:01:39,999 --> 00:01:45,609
I'm a former developer moved into

41
00:01:43,249 --> 00:01:49,579
sysadmin moved into pen testing now do

42
00:01:45,609 --> 00:01:52,369
security research and about a little bit

43
00:01:49,579 --> 00:01:55,609
over ten years ago I found myself as a

44
00:01:52,369 --> 00:01:57,919
sysadmin having to do some code review

45
00:01:55,609 --> 00:02:01,609
for a disproportionate amount of

46
00:01:57,919 --> 00:02:03,079
developers and I kind of decided I

47
00:02:01,609 --> 00:02:04,939
needed to automate this and try to find

48
00:02:03,079 --> 00:02:07,908
a way to at least spot like the really

49
00:02:04,939 --> 00:02:11,090
bad stuff quickly and sort of try to

50
00:02:07,909 --> 00:02:13,130
pull this stuff in so I created this

51
00:02:11,090 --> 00:02:14,330
sort of hot spot checking to all based

52
00:02:13,130 --> 00:02:19,430
on grep

53
00:02:14,330 --> 00:02:19,730
and in June 2009 I made the first public

54
00:02:19,430 --> 00:02:22,340
release

55
00:02:19,730 --> 00:02:25,369
so that's officially almost 10 years

56
00:02:22,340 --> 00:02:28,100
unofficially a bit over 10 years and

57
00:02:25,370 --> 00:02:31,420
it's one of the primary tools I use

58
00:02:28,100 --> 00:02:33,890
whenever I do source code analysis

59
00:02:31,420 --> 00:02:36,049
because it's it's just I find it very

60
00:02:33,890 --> 00:02:38,209
versatile and I'm I'm very familiar with

61
00:02:36,050 --> 00:02:44,570
it because I wrote it so there might be

62
00:02:38,210 --> 00:02:47,480
a slight bias but yeah so the amok that

63
00:02:44,570 --> 00:02:49,010
percent is morning part of a great book

64
00:02:47,480 --> 00:02:51,649
called the art of software security

65
00:02:49,010 --> 00:02:53,060
assessment and it's what it what key

66
00:02:51,650 --> 00:02:55,220
takeaway when they talk about source

67
00:02:53,060 --> 00:02:58,940
code over you is that it's essentially a

68
00:02:55,220 --> 00:03:01,640
skill right you practice it you get

69
00:02:58,940 --> 00:03:03,530
better at it and as a skill it's made up

70
00:03:01,640 --> 00:03:06,260
of a lot of things so some people think

71
00:03:03,530 --> 00:03:07,880
that code review is you got to know the

72
00:03:06,260 --> 00:03:09,170
language you got to be good at language

73
00:03:07,880 --> 00:03:11,870
and then you can just sort of really

74
00:03:09,170 --> 00:03:13,700
review decode but there is a lot more to

75
00:03:11,870 --> 00:03:15,290
it than just that you need to understand

76
00:03:13,700 --> 00:03:18,140
the systems that the codes are running

77
00:03:15,290 --> 00:03:21,950
on source of like vulnerabilities in PHP

78
00:03:18,140 --> 00:03:23,950
on Windows versus Linux can be different

79
00:03:21,950 --> 00:03:25,519
things like memory allocation size

80
00:03:23,950 --> 00:03:28,280
registry size

81
00:03:25,520 --> 00:03:31,010
you know I said 32-bit 64-bit all of

82
00:03:28,280 --> 00:03:33,370
this sort of place into it you also need

83
00:03:31,010 --> 00:03:35,510
to understand vulnerabilities because

84
00:03:33,370 --> 00:03:37,130
you know code reviews the developer

85
00:03:35,510 --> 00:03:38,870
tends to be more about you know

86
00:03:37,130 --> 00:03:42,620
correctness of the code function of the

87
00:03:38,870 --> 00:03:44,360
code but you might not specifically be

88
00:03:42,620 --> 00:03:46,820
familiar with a different vulnerability

89
00:03:44,360 --> 00:03:48,290
classes that might be in the code and on

90
00:03:46,820 --> 00:03:50,690
top of that you also need to be creative

91
00:03:48,290 --> 00:03:52,340
because sometimes you know the

92
00:03:50,690 --> 00:03:54,079
vulnerability class hasn't been defined

93
00:03:52,340 --> 00:03:56,470
all right at some stage somebody had to

94
00:03:54,080 --> 00:03:59,240
be the first guide that went from a

95
00:03:56,470 --> 00:04:03,710
buffer overflow to actual code execution

96
00:03:59,240 --> 00:04:05,390
right to pivot and that correct take

97
00:04:03,710 --> 00:04:07,370
some creativity so you put all that

98
00:04:05,390 --> 00:04:10,369
together you know and you do security

99
00:04:07,370 --> 00:04:11,959
code review it's also important to

100
00:04:10,370 --> 00:04:14,990
remember that we generally don't try to

101
00:04:11,959 --> 00:04:16,940
consume the entire code base you know

102
00:04:14,990 --> 00:04:19,340
you might be handling this very big and

103
00:04:16,940 --> 00:04:21,709
if you're gonna read it all a it's very

104
00:04:19,339 --> 00:04:24,109
slow and be it's cumbersome and takes

105
00:04:21,709 --> 00:04:25,970
time so it's a bit like reverse

106
00:04:24,110 --> 00:04:27,500
engineering in that imagine that you're

107
00:04:25,970 --> 00:04:28,100
always looking at the code through like

108
00:04:27,500 --> 00:04:29,720
a

109
00:04:28,100 --> 00:04:32,720
you're only seeing a small portion of

110
00:04:29,720 --> 00:04:35,419
the code at any given time and what we

111
00:04:32,720 --> 00:04:38,770
really care about is being able to find

112
00:04:35,419 --> 00:04:42,280
a path through this sort of tube into

113
00:04:38,770 --> 00:04:45,680
code execution that's a pen tester but

114
00:04:42,280 --> 00:04:46,849
just basically find the shortest path to

115
00:04:45,680 --> 00:04:50,780
the vulnerability you don't have to

116
00:04:46,849 --> 00:04:53,539
understand the entire code base there's

117
00:04:50,780 --> 00:04:56,900
also some considerations to taking to

118
00:04:53,539 --> 00:04:59,870
account it's not just the code itself

119
00:04:56,900 --> 00:05:02,448
like we said the system matters for

120
00:04:59,870 --> 00:05:05,020
example in in PHP the configuration can

121
00:05:02,449 --> 00:05:08,570
be changed things like race conditions

122
00:05:05,020 --> 00:05:10,039
writable directories compiler

123
00:05:08,570 --> 00:05:11,870
optimization can introduce

124
00:05:10,039 --> 00:05:14,930
vulnerabilities and I'll talk a little

125
00:05:11,870 --> 00:05:17,090
bit about that later as well so all

126
00:05:14,930 --> 00:05:18,710
those things can impact the code base

127
00:05:17,090 --> 00:05:20,780
that you're looking at without

128
00:05:18,710 --> 00:05:23,180
necessarily the being a specific thing

129
00:05:20,780 --> 00:05:26,900
in the code itself it's just affected by

130
00:05:23,180 --> 00:05:28,419
external factors you know such as you

131
00:05:26,900 --> 00:05:31,280
know reading a fall isn't necessarily

132
00:05:28,419 --> 00:05:33,590
bad in the source code but you know you

133
00:05:31,280 --> 00:05:37,340
if you can introduce a race condition

134
00:05:33,590 --> 00:05:39,638
then it might be bad limitations for

135
00:05:37,340 --> 00:05:42,020
static source code analysis obviously

136
00:05:39,639 --> 00:05:44,090
dynamic evaluation any code that only

137
00:05:42,020 --> 00:05:47,448
executes at runtime and may not even be

138
00:05:44,090 --> 00:05:49,609
defined at the static time it's not

139
00:05:47,449 --> 00:05:53,719
something you can analyze by reading it

140
00:05:49,610 --> 00:05:55,250
because it's not there also often code

141
00:05:53,719 --> 00:05:57,889
that's written with a lot of callbacks

142
00:05:55,250 --> 00:06:00,759
or inside out objects can be really

143
00:05:57,889 --> 00:06:04,940
gnarly to to navigate your way through

144
00:06:00,759 --> 00:06:06,650
and also a lot of times if you find I'm

145
00:06:04,940 --> 00:06:08,919
generally say enterprises sort of

146
00:06:06,650 --> 00:06:11,630
applications where maybe they take a

147
00:06:08,919 --> 00:06:13,669
directory structure of xml files and

148
00:06:11,630 --> 00:06:15,830
apply some transforms and then write

149
00:06:13,669 --> 00:06:17,389
something out and then performs two

150
00:06:15,830 --> 00:06:19,520
other operations on that if you don't

151
00:06:17,389 --> 00:06:26,030
have the XML files it can be very hard

152
00:06:19,520 --> 00:06:27,620
to actually know what is happening so so

153
00:06:26,030 --> 00:06:30,888
when we're looking at code through this

154
00:06:27,620 --> 00:06:33,690
tube we can't want to maybe consider the

155
00:06:30,889 --> 00:06:36,220
flow of the application

156
00:06:33,690 --> 00:06:38,469
okay so I'm not sure which part I'm

157
00:06:36,220 --> 00:06:43,500
standing in front of understanding this

158
00:06:38,470 --> 00:06:47,889
side for a bit so basically flow is how

159
00:06:43,500 --> 00:06:49,990
execution of code navigates the code we

160
00:06:47,889 --> 00:06:51,370
care about the execution flow and we

161
00:06:49,990 --> 00:06:53,260
also care about the data flow where does

162
00:06:51,370 --> 00:06:56,230
the data come from where does it then

163
00:06:53,260 --> 00:06:57,610
end up and one of the other things that

164
00:06:56,230 --> 00:07:00,010
we generally find that developers don't

165
00:06:57,610 --> 00:07:03,510
think about and often researchers don't

166
00:07:00,010 --> 00:07:05,919
think about it sinks that interrupts

167
00:07:03,510 --> 00:07:08,650
interruptions to flow so let's say that

168
00:07:05,919 --> 00:07:12,400
you have an application and suddenly get

169
00:07:08,650 --> 00:07:15,219
an unexpected halt execution and it

170
00:07:12,400 --> 00:07:17,530
throws an exception and you know writes

171
00:07:15,220 --> 00:07:19,450
a bunch of sensitive data to log or to

172
00:07:17,530 --> 00:07:21,760
the exception or it's created a

173
00:07:19,450 --> 00:07:23,710
temporary file with some sensitive data

174
00:07:21,760 --> 00:07:26,289
in it like a private key that is trying

175
00:07:23,710 --> 00:07:28,450
to swap out and then execution halts at

176
00:07:26,290 --> 00:07:31,060
that very second that file remains on

177
00:07:28,450 --> 00:07:32,860
the file system it's very common to see

178
00:07:31,060 --> 00:07:35,530
in terms of file uploads and web

179
00:07:32,860 --> 00:07:37,750
applications you'll see that the file

180
00:07:35,530 --> 00:07:40,570
upload occurs gets put in the temporary

181
00:07:37,750 --> 00:07:42,880
or maybe even a web-accessible directory

182
00:07:40,570 --> 00:07:44,740
and then the script goes hey this isn't

183
00:07:42,880 --> 00:07:46,180
a valid gif file and then just leaves

184
00:07:44,740 --> 00:07:49,750
your web shop

185
00:07:46,180 --> 00:07:51,490
rotten file system so interruptions to

186
00:07:49,750 --> 00:07:54,970
flow it's also something that's

187
00:07:51,490 --> 00:07:56,680
important to consider so when you're

188
00:07:54,970 --> 00:07:58,330
looking at flow it can be helpful to

189
00:07:56,680 --> 00:08:02,770
have this kind of like nice

190
00:07:58,330 --> 00:08:04,030
visualization tools it's something I

191
00:08:02,770 --> 00:08:08,229
would generally recommend if you're if

192
00:08:04,030 --> 00:08:10,119
you're in depth analyzing large code

193
00:08:08,229 --> 00:08:11,650
base they're very handy if it's a small

194
00:08:10,120 --> 00:08:15,280
codebase I'd recommend just reading the

195
00:08:11,650 --> 00:08:18,159
code listing here the guy just took down

196
00:08:15,280 --> 00:08:22,299
is is git repo because he's working on a

197
00:08:18,160 --> 00:08:24,100
licensing issue but it's it looks really

198
00:08:22,300 --> 00:08:27,610
nice oh I haven't had a test spin myself

199
00:08:24,100 --> 00:08:31,200
so all right so there's a couple of

200
00:08:27,610 --> 00:08:33,580
things in terms of flow we care about

201
00:08:31,200 --> 00:08:36,159
basically data flow from source to sink

202
00:08:33,580 --> 00:08:39,640
and source is wherever the data enters

203
00:08:36,159 --> 00:08:42,189
the flow of the application typically we

204
00:08:39,640 --> 00:08:44,350
want to track user supplied data because

205
00:08:42,190 --> 00:08:45,910
static content is usually not

206
00:08:44,350 --> 00:08:47,290
manipulatable and

207
00:08:45,910 --> 00:08:51,010
doesn't tend to result in in

208
00:08:47,290 --> 00:08:52,510
vulnerabilities and and the sink is

209
00:08:51,010 --> 00:08:55,180
obviously the function where the code

210
00:08:52,510 --> 00:08:58,750
ends up that we care about so say that

211
00:08:55,180 --> 00:09:01,449
you take user input from the URL you put

212
00:08:58,750 --> 00:09:05,110
it in a system call that thus you know

213
00:09:01,450 --> 00:09:06,970
execute the ping utility and you don't

214
00:09:05,110 --> 00:09:09,490
filter that data then you know yeah we

215
00:09:06,970 --> 00:09:12,070
have a problem now it can be very hard

216
00:09:09,490 --> 00:09:14,020
to identify where user user input comes

217
00:09:12,070 --> 00:09:16,810
from if you look at things like

218
00:09:14,020 --> 00:09:19,000
second-order SQL injection with data is

219
00:09:16,810 --> 00:09:20,949
read out of a database and then use

220
00:09:19,000 --> 00:09:22,750
directly in an SQL statement again and

221
00:09:20,950 --> 00:09:25,510
you might be doing proper power

222
00:09:22,750 --> 00:09:27,880
optimization on the insert statement but

223
00:09:25,510 --> 00:09:29,500
then the subsequent select statement is

224
00:09:27,880 --> 00:09:32,230
insecure

225
00:09:29,500 --> 00:09:34,750
also developers tend to miss things like

226
00:09:32,230 --> 00:09:38,460
environment variables or you know

227
00:09:34,750 --> 00:09:40,600
browser headers those type of things

228
00:09:38,460 --> 00:09:43,390
other things to consider when you're

229
00:09:40,600 --> 00:09:44,740
reviewing code is trust boundaries you

230
00:09:43,390 --> 00:09:48,490
know that's the flow past the trust

231
00:09:44,740 --> 00:09:50,620
boundary and also just a flow induce a

232
00:09:48,490 --> 00:09:52,410
state change so that you know has the

233
00:09:50,620 --> 00:09:55,840
user logged in has to user logged out

234
00:09:52,410 --> 00:10:01,569
these are good areas of the application

235
00:09:55,840 --> 00:10:04,900
to audit taking it a bit beyond you know

236
00:10:01,570 --> 00:10:08,350
just using grep for full keywords or a

237
00:10:04,900 --> 00:10:09,610
reading code paint analysis is possible

238
00:10:08,350 --> 00:10:13,210
from a static perspective without

239
00:10:09,610 --> 00:10:15,130
executing code and it basically the

240
00:10:13,210 --> 00:10:17,620
notion of tent analysis for those who

241
00:10:15,130 --> 00:10:20,830
don't know is that a variable carries an

242
00:10:17,620 --> 00:10:23,610
additional flag that the compiler or the

243
00:10:20,830 --> 00:10:26,730
interpreter keeps track of and whenever

244
00:10:23,610 --> 00:10:29,530
data is assigned into that variable that

245
00:10:26,730 --> 00:10:32,050
comes from outside of the application

246
00:10:29,530 --> 00:10:34,900
it's not a constant or anything then

247
00:10:32,050 --> 00:10:37,300
this flag gets marked and and the

248
00:10:34,900 --> 00:10:40,090
variable is considered tainted and then

249
00:10:37,300 --> 00:10:41,770
eventually if a tainted variable ends up

250
00:10:40,090 --> 00:10:45,790
in a sink that you care about such as

251
00:10:41,770 --> 00:10:48,100
you know an executable function string

252
00:10:45,790 --> 00:10:50,230
copy etc then you throw a flag issue

253
00:10:48,100 --> 00:10:52,420
found that he's untrusted data going all

254
00:10:50,230 --> 00:10:55,300
the way down to a sink that's important

255
00:10:52,420 --> 00:10:57,010
so essentially this is this is the flow

256
00:10:55,300 --> 00:10:57,709
it would follow it go from hello into

257
00:10:57,010 --> 00:11:00,710
hello

258
00:10:57,710 --> 00:11:03,050
then n gets so the taint flag copies any

259
00:11:00,710 --> 00:11:05,600
tank that variable they gets us onto and

260
00:11:03,050 --> 00:11:07,579
untainted variable the tank flag carries

261
00:11:05,600 --> 00:11:12,890
over and we see in the end we end up at

262
00:11:07,580 --> 00:11:15,140
the string copy right so having sort of

263
00:11:12,890 --> 00:11:17,649
thought about the the different I guess

264
00:11:15,140 --> 00:11:21,730
tools and techniques required skills

265
00:11:17,649 --> 00:11:24,350
there's a bunch of different approaches

266
00:11:21,730 --> 00:11:26,450
so there's like what hotspot checking

267
00:11:24,350 --> 00:11:29,450
which is basically using grep for a

268
00:11:26,450 --> 00:11:31,070
keyword and then sort of based on

269
00:11:29,450 --> 00:11:33,920
whatever you find there you start

270
00:11:31,070 --> 00:11:35,360
working your way up or down to code this

271
00:11:33,920 --> 00:11:37,839
control flow sensitive where it's

272
00:11:35,360 --> 00:11:41,899
basically you're you're following

273
00:11:37,839 --> 00:11:43,370
certain functions and you only say you

274
00:11:41,899 --> 00:11:44,779
can either follow every function into

275
00:11:43,370 --> 00:11:46,580
the function and then back out and you

276
00:11:44,779 --> 00:11:49,459
you know you read the code the way would

277
00:11:46,580 --> 00:11:51,050
execute and you can maybe optimize that

278
00:11:49,459 --> 00:11:53,479
by only following the functions that

279
00:11:51,050 --> 00:11:55,670
they were use is applied data there's

280
00:11:53,480 --> 00:11:59,270
also data flow sensitive so rather than

281
00:11:55,670 --> 00:12:01,640
worrying about the code where it

282
00:11:59,270 --> 00:12:03,380
executes it's tracking the data so say

283
00:12:01,640 --> 00:12:05,959
you know this page insert saying in the

284
00:12:03,380 --> 00:12:07,880
database this page extracts it out of

285
00:12:05,959 --> 00:12:10,670
the database and then you sit in a query

286
00:12:07,880 --> 00:12:13,670
again and the flow of those new pages

287
00:12:10,670 --> 00:12:16,550
are separate but if you track the user

288
00:12:13,670 --> 00:12:19,010
data in and out of the database you'll

289
00:12:16,550 --> 00:12:22,819
find a potential second order SQL

290
00:12:19,010 --> 00:12:25,610
injection so focus oriented tends to be

291
00:12:22,820 --> 00:12:27,140
just looking at the application and you

292
00:12:25,610 --> 00:12:28,790
go I'm gonna look at like this library

293
00:12:27,140 --> 00:12:30,470
and I'm only gonna worry about any

294
00:12:28,790 --> 00:12:32,930
function calls to this library I'm gonna

295
00:12:30,470 --> 00:12:34,910
read the library top to bottom bottom to

296
00:12:32,930 --> 00:12:36,859
top whatever and I'm only going to worry

297
00:12:34,910 --> 00:12:38,930
about that so typical examples where we

298
00:12:36,860 --> 00:12:40,910
see that it seems like authentication

299
00:12:38,930 --> 00:12:42,709
authorization frameworks you know

300
00:12:40,910 --> 00:12:44,209
they're good targets you get a brand new

301
00:12:42,709 --> 00:12:45,410
application like the first thing I'm

302
00:12:44,209 --> 00:12:47,839
looking at I'm gonna look at

303
00:12:45,410 --> 00:12:51,319
authorization authentication password

304
00:12:47,839 --> 00:12:54,529
reset all those things forward and

305
00:12:51,320 --> 00:12:56,209
backward tracing is basically what it

306
00:12:54,529 --> 00:12:58,370
says you start at a certain point in the

307
00:12:56,209 --> 00:13:00,020
code and you read it down or in the case

308
00:12:58,370 --> 00:13:02,510
of hot spot checking typically you'll

309
00:13:00,020 --> 00:13:04,279
you'll find a random line of code in a

310
00:13:02,510 --> 00:13:05,779
file and you start going to work your

311
00:13:04,279 --> 00:13:09,079
way backwards like where did the data

312
00:13:05,779 --> 00:13:11,570
come from to into this this line of code

313
00:13:09,079 --> 00:13:15,540
that we're concerned

314
00:13:11,570 --> 00:13:16,740
so that's reading the code and of course

315
00:13:15,540 --> 00:13:20,670
we said we have to know about

316
00:13:16,740 --> 00:13:22,530
vulnerabilities so essentially we say

317
00:13:20,670 --> 00:13:25,290
that a vulnerability is a weakness that

318
00:13:22,530 --> 00:13:26,939
can lead to unexpected undesirable event

319
00:13:25,290 --> 00:13:30,540
compromising the security of the system

320
00:13:26,940 --> 00:13:34,950
network bla bla bla it's a bit like

321
00:13:30,540 --> 00:13:38,300
quality we know it when we see it so

322
00:13:34,950 --> 00:13:40,230
this a couple of I guess main schools of

323
00:13:38,300 --> 00:13:42,719
vulnerability classifications there are

324
00:13:40,230 --> 00:13:44,880
others but hopefully you all know these

325
00:13:42,720 --> 00:13:46,590
ones always picked up ten they're sort

326
00:13:44,880 --> 00:13:49,550
of siloed there's like top ten for

327
00:13:46,590 --> 00:13:54,360
mobile top ten for web top ten for

328
00:13:49,550 --> 00:13:58,020
whatever and then the cwe they they more

329
00:13:54,360 --> 00:14:00,870
try to index the entire thing neither of

330
00:13:58,020 --> 00:14:04,620
them are completely complete coverage

331
00:14:00,870 --> 00:14:07,650
neither of them have necessarily you

332
00:14:04,620 --> 00:14:09,690
know always up-to-date definitions there

333
00:14:07,650 --> 00:14:10,980
there's a bunch of other ones if you

334
00:14:09,690 --> 00:14:13,020
want to learn about vulnerabilities

335
00:14:10,980 --> 00:14:17,250
these aren't a bad place to start

336
00:14:13,020 --> 00:14:19,680
read you know CW have examples for most

337
00:14:17,250 --> 00:14:21,810
of the ones they've classified but also

338
00:14:19,680 --> 00:14:25,020
you know go to conferences I mean you're

339
00:14:21,810 --> 00:14:27,359
all here white papers a good advisory

340
00:14:25,020 --> 00:14:29,910
will often showcase the flow of the code

341
00:14:27,360 --> 00:14:34,800
through the application and and you know

342
00:14:29,910 --> 00:14:36,209
what led to the vulnerability so yep so

343
00:14:34,800 --> 00:14:38,579
how do you go about identifying a

344
00:14:36,210 --> 00:14:39,900
weakness in a new product or a sort of

345
00:14:38,580 --> 00:14:42,420
source code if you come through

346
00:14:39,900 --> 00:14:45,420
documentation that's a great place to

347
00:14:42,420 --> 00:14:47,430
start a lot of time I find specifically

348
00:14:45,420 --> 00:14:50,790
designed weaknesses I'll read the

349
00:14:47,430 --> 00:14:52,979
documentation I go like that doesn't add

350
00:14:50,790 --> 00:14:54,839
up you know like you're trusting the

351
00:14:52,980 --> 00:14:56,550
user to supply the the amount that

352
00:14:54,840 --> 00:14:59,130
they're paying for the thing that

353
00:14:56,550 --> 00:15:02,189
they're buying now that's that's not

354
00:14:59,130 --> 00:15:03,870
okay obviously recognizing weakness

355
00:15:02,190 --> 00:15:06,030
patterns and source code you know like

356
00:15:03,870 --> 00:15:08,580
user supplied input being concatenated

357
00:15:06,030 --> 00:15:13,140
in an SQL statement that one's pretty

358
00:15:08,580 --> 00:15:15,150
obvious but you know you sort of once

359
00:15:13,140 --> 00:15:17,520
you read a lot of code I guess you you

360
00:15:15,150 --> 00:15:20,880
you'll learn a lot of bad habits that

361
00:15:17,520 --> 00:15:23,089
developers tend to have same thing if

362
00:15:20,880 --> 00:15:24,829
you're looking at

363
00:15:23,089 --> 00:15:26,929
API you can even look look at the

364
00:15:24,829 --> 00:15:29,809
swagger Falls then you might be able to

365
00:15:26,929 --> 00:15:31,999
spot like a pattern you know direct

366
00:15:29,809 --> 00:15:33,559
object reference this is often come to

367
00:15:31,999 --> 00:15:35,749
mind there's a function that returns

368
00:15:33,559 --> 00:15:38,959
some sensitive data and it takes a

369
00:15:35,749 --> 00:15:41,629
number and you're looking yeah I think I

370
00:15:38,959 --> 00:15:45,709
think that might be you think anticipate

371
00:15:41,629 --> 00:15:49,160
poor decision-making that ones sometimes

372
00:15:45,709 --> 00:15:50,508
easy sometimes and if whenever you come

373
00:15:49,160 --> 00:15:51,379
across something that you don't know say

374
00:15:50,509 --> 00:15:54,199
you're reading a language you're not

375
00:15:51,379 --> 00:15:56,920
super familiar with like Java when

376
00:15:54,199 --> 00:15:59,089
you're a PHP dev or you know vice versa

377
00:15:56,920 --> 00:16:00,920
just write a short script and you're

378
00:15:59,089 --> 00:16:02,329
saying well if this value was that this

379
00:16:00,920 --> 00:16:03,889
value is that and they're calling the

380
00:16:02,329 --> 00:16:06,498
function this way can I write like a

381
00:16:03,889 --> 00:16:09,079
two-three line script and see whether or

382
00:16:06,499 --> 00:16:10,309
not my assumption about that being

383
00:16:09,079 --> 00:16:11,660
correct should have lived a

384
00:16:10,309 --> 00:16:13,610
vulnerability is it going to do the

385
00:16:11,660 --> 00:16:15,469
unexpected thing or it said actually

386
00:16:13,610 --> 00:16:19,429
handling it correctly on the on the

387
00:16:15,470 --> 00:16:22,819
function call so and also a peg breaks

388
00:16:19,429 --> 00:16:24,589
from complex or difficult code you know

389
00:16:22,819 --> 00:16:28,849
go have a shower if you Travis or Mandi

390
00:16:24,589 --> 00:16:31,579
it seems to work pretty well so I

391
00:16:28,850 --> 00:16:35,569
generally classify problems in source

392
00:16:31,579 --> 00:16:37,849
code as one out of two core problems

393
00:16:35,569 --> 00:16:41,179
it's either the presence of something so

394
00:16:37,850 --> 00:16:42,970
you've written in insecure things you've

395
00:16:41,179 --> 00:16:45,129
added you know hard-coded credentials

396
00:16:42,970 --> 00:16:49,069
things that generally shouldn't be there

397
00:16:45,129 --> 00:16:51,049
you know a double free format string and

398
00:16:49,069 --> 00:16:53,209
then there's the other part which is the

399
00:16:51,049 --> 00:16:55,519
absence of something right there's an

400
00:16:53,209 --> 00:16:59,559
absence of a negation or authorization

401
00:16:55,519 --> 00:17:02,989
check at this function there is lack of

402
00:16:59,559 --> 00:17:04,250
encoding use of supplied output and a

403
00:17:02,989 --> 00:17:06,289
lot of people might say don't know but

404
00:17:04,250 --> 00:17:09,829
exercise is also you know validating

405
00:17:06,289 --> 00:17:11,898
input but not so much it's mostly

406
00:17:09,829 --> 00:17:12,980
encoding output particularly once you

407
00:17:11,898 --> 00:17:15,799
get to the stage where you're dealing

408
00:17:12,980 --> 00:17:17,510
with unicode strings at the moment I'm

409
00:17:15,799 --> 00:17:19,549
working in the Middle East so we always

410
00:17:17,510 --> 00:17:23,329
have to validate at least two languages

411
00:17:19,549 --> 00:17:25,158
English and Arabic and you know it's a

412
00:17:23,329 --> 00:17:26,898
lot easier to just handily handle

413
00:17:25,159 --> 00:17:29,870
encoding securely at the time that you

414
00:17:26,898 --> 00:17:31,789
need to be encoded you know input

415
00:17:29,870 --> 00:17:34,418
validation it's nice to have you know if

416
00:17:31,789 --> 00:17:36,429
you can do both do both but

417
00:17:34,419 --> 00:17:37,899
but I consider that the absence of

418
00:17:36,429 --> 00:17:40,059
something rather than you know you're

419
00:17:37,899 --> 00:17:44,469
not encoding you could argue that one

420
00:17:40,059 --> 00:17:45,309
way or the other but yeah all right so

421
00:17:44,470 --> 00:17:47,409
now that we know a bit about

422
00:17:45,309 --> 00:17:49,690
vulnerabilities you know we know how to

423
00:17:47,409 --> 00:17:52,480
read some source code you know how do we

424
00:17:49,690 --> 00:17:54,279
actually go about auditing yeah it

425
00:17:52,480 --> 00:17:56,529
basically is a three-step process right

426
00:17:54,279 --> 00:17:58,149
it's kind like how you draw the old owl

427
00:17:56,529 --> 00:18:00,159
you know draw a circle draw the rest of

428
00:17:58,149 --> 00:18:01,779
the out let's see see so you'd enter by

429
00:18:00,159 --> 00:18:03,789
weakness however you do that through

430
00:18:01,779 --> 00:18:06,609
source code reading documentation

431
00:18:03,789 --> 00:18:08,289
whatever I tend to prioritize high

432
00:18:06,609 --> 00:18:10,330
vulnerability or high impact vulnerable

433
00:18:08,289 --> 00:18:12,369
its first always look for you know

434
00:18:10,330 --> 00:18:16,809
remote code execution authentication

435
00:18:12,369 --> 00:18:17,649
bypass ideally together and then once

436
00:18:16,809 --> 00:18:19,059
you're there you get a check

437
00:18:17,649 --> 00:18:22,178
exploitability because a lot of times

438
00:18:19,059 --> 00:18:24,519
you might jump conclusion and think that

439
00:18:22,179 --> 00:18:26,499
ah this thing you know this particular

440
00:18:24,519 --> 00:18:28,619
function doesn't encode this correctly

441
00:18:26,499 --> 00:18:31,179
and then turns out yeah you're a bit

442
00:18:28,619 --> 00:18:33,189
premature so always check that you can

443
00:18:31,179 --> 00:18:36,399
actually exploit it before you you go

444
00:18:33,190 --> 00:18:40,929
and shut about your your latest

445
00:18:36,399 --> 00:18:44,109
vulnerability now so beyond reading the

446
00:18:40,929 --> 00:18:45,789
code manually static source code

447
00:18:44,109 --> 00:18:49,119
analysis tool there's a bunch of them

448
00:18:45,789 --> 00:18:53,559
they all function mostly the same it's

449
00:18:49,119 --> 00:18:57,279
paint analysis abstract syntax notation

450
00:18:53,559 --> 00:18:58,928
you know keywords like grep honestly a

451
00:18:57,279 --> 00:19:01,570
lot of you guys here would have seen

452
00:18:58,929 --> 00:19:04,960
sílvio livestream you know it's it's

453
00:19:01,570 --> 00:19:07,450
been it's crap and a UNIX shell and very

454
00:19:04,960 --> 00:19:08,919
much the same but we ordered different

455
00:19:07,450 --> 00:19:13,749
different parts of the infinite

456
00:19:08,919 --> 00:19:15,129
ecosystem but yeah I really rely on grep

457
00:19:13,749 --> 00:19:17,769
for everything because it's it's fast

458
00:19:15,129 --> 00:19:20,049
it's very versatile you know let's

459
00:19:17,769 --> 00:19:22,299
research things and once you get

460
00:19:20,049 --> 00:19:24,668
familiar with the tool you can do a lot

461
00:19:22,299 --> 00:19:26,859
with it it's also important to remember

462
00:19:24,669 --> 00:19:29,470
the tools can't find some types of

463
00:19:26,859 --> 00:19:31,840
vulnerabilities such as usually the

464
00:19:29,470 --> 00:19:33,999
absence of things is very hard for tool

465
00:19:31,840 --> 00:19:37,988
to identify you know the absence of an

466
00:19:33,999 --> 00:19:40,539
authentication check you know or in the

467
00:19:37,989 --> 00:19:42,279
case of default insecurity fault values

468
00:19:40,539 --> 00:19:45,489
being assigned to say an integer or a

469
00:19:42,279 --> 00:19:47,250
string or anything like that the tools

470
00:19:45,489 --> 00:19:49,980
generally won't find

471
00:19:47,250 --> 00:19:53,940
human analysis is always required for

472
00:19:49,980 --> 00:19:55,530
every type of source code review so if

473
00:19:53,940 --> 00:19:57,390
you don't like grep you know say you're

474
00:19:55,530 --> 00:20:00,629
on Windows you know Windows Linux

475
00:19:57,390 --> 00:20:02,580
subsets then we'll get you grep but some

476
00:20:00,630 --> 00:20:06,030
people like a core some people like a G

477
00:20:02,580 --> 00:20:07,678
Silver Surfer because it doesn't scan

478
00:20:06,030 --> 00:20:09,629
things like subversion directories to

479
00:20:07,679 --> 00:20:12,750
get directories once you're familiar

480
00:20:09,630 --> 00:20:15,630
with grep you can tell grep not to do

481
00:20:12,750 --> 00:20:16,799
those things as well so but each through

482
00:20:15,630 --> 00:20:21,150
the wrong there's more than one way to

483
00:20:16,799 --> 00:20:22,950
do things right but let me just tell you

484
00:20:21,150 --> 00:20:25,500
a bit more about grep because I really

485
00:20:22,950 --> 00:20:27,539
like crap alright

486
00:20:25,500 --> 00:20:29,640
the benefit is a lot of the static

487
00:20:27,539 --> 00:20:32,549
source code analysis tool requires the

488
00:20:29,640 --> 00:20:34,559
ability to compile the code before they

489
00:20:32,549 --> 00:20:37,110
will analyze it so they operate on the

490
00:20:34,559 --> 00:20:39,330
bytecode intermediate language rather

491
00:20:37,110 --> 00:20:42,658
than the source code itself so if you're

492
00:20:39,330 --> 00:20:44,760
given incomplete code if you're you know

493
00:20:42,659 --> 00:20:48,059
reviewing just the partial patch or add

494
00:20:44,760 --> 00:20:49,980
if those tools won't work but grep will

495
00:20:48,059 --> 00:20:53,250
work on anything that a human can read

496
00:20:49,980 --> 00:20:57,179
so that's good it works across platform

497
00:20:53,250 --> 00:21:00,570
you know Linux UNIX PSD Windows it's all

498
00:20:57,179 --> 00:21:03,360
there and you know most programming

499
00:21:00,570 --> 00:21:07,370
languages are based on text sort of

500
00:21:03,360 --> 00:21:10,199
English word your language like syntax

501
00:21:07,370 --> 00:21:14,100
and then grep is very good at matching

502
00:21:10,200 --> 00:21:16,260
text so that's that's a benefit which

503
00:21:14,100 --> 00:21:19,590
means that you can very quickly like add

504
00:21:16,260 --> 00:21:22,110
a whole set of syntax support for custom

505
00:21:19,590 --> 00:21:24,299
languages like smarty templates if you

506
00:21:22,110 --> 00:21:26,760
wanted to write a hold as a rule set for

507
00:21:24,299 --> 00:21:28,440
reviewing smarty templates you want for

508
00:21:26,760 --> 00:21:30,179
necessarily fund a static tool that does

509
00:21:28,440 --> 00:21:32,400
it but grep can do it and it will

510
00:21:30,179 --> 00:21:33,990
probably take you half an hour an hour

511
00:21:32,400 --> 00:21:36,030
to just sit down and go through the

512
00:21:33,990 --> 00:21:39,270
syntax tree write out a whole bunch of

513
00:21:36,030 --> 00:21:40,908
keywords and now you can audit smarter

514
00:21:39,270 --> 00:21:43,020
templates it's really quick really easy

515
00:21:40,909 --> 00:21:44,520
and then of course that's a starting

516
00:21:43,020 --> 00:21:49,158
point and you build on it from there

517
00:21:44,520 --> 00:21:51,570
whichever way you go but and it usually

518
00:21:49,159 --> 00:21:52,950
and this is important to me it may not

519
00:21:51,570 --> 00:21:56,158
be important to you but I always find

520
00:21:52,950 --> 00:21:58,080
that I want to see the source code that

521
00:21:56,159 --> 00:21:59,820
grep thinks is that font something

522
00:21:58,080 --> 00:22:00,720
important on and I want to see the line

523
00:21:59,820 --> 00:22:02,220
surrounded I want to

524
00:22:00,720 --> 00:22:04,770
give it some context I don't want to

525
00:22:02,220 --> 00:22:06,270
report where they don't have to open and

526
00:22:04,770 --> 00:22:07,770
read and then go searching for the fall

527
00:22:06,270 --> 00:22:09,960
and then fund the line and then read the

528
00:22:07,770 --> 00:22:14,370
code I'd rather just get the code use to

529
00:22:09,960 --> 00:22:17,669
it straight away so yep that's a bit

530
00:22:14,370 --> 00:22:19,678
about grep so here's an example mem said

531
00:22:17,669 --> 00:22:21,890
it's a type of under ability that's

532
00:22:19,679 --> 00:22:24,450
being introduced by compiler options

533
00:22:21,890 --> 00:22:26,789
basically you're trying to zero out a

534
00:22:24,450 --> 00:22:28,140
region of memory and if you're if you're

535
00:22:26,789 --> 00:22:30,870
running this with the right compiler

536
00:22:28,140 --> 00:22:32,909
options the compiler basically goes this

537
00:22:30,870 --> 00:22:33,479
is a null rewrite I'll just optimize

538
00:22:32,909 --> 00:22:36,330
that out

539
00:22:33,480 --> 00:22:39,390
no need so if you're trying to unset

540
00:22:36,330 --> 00:22:41,549
some sensitive memory but might contain

541
00:22:39,390 --> 00:22:43,289
a password or a private key and you're

542
00:22:41,549 --> 00:22:45,330
trying to use their just straight-up

543
00:22:43,289 --> 00:22:47,520
memset zero there's a good chance that

544
00:22:45,330 --> 00:22:49,199
it does not actually get zeroed out of

545
00:22:47,520 --> 00:22:51,510
memory and that the sensitive details

546
00:22:49,200 --> 00:22:54,179
are still there so here's two very

547
00:22:51,510 --> 00:22:55,490
simple regular expressions that find it

548
00:22:54,179 --> 00:22:57,870
but it's not guaranteed to be

549
00:22:55,490 --> 00:23:00,570
exploitable even though you you know a

550
00:22:57,870 --> 00:23:02,280
lots of fun memory initialization and a

551
00:23:00,570 --> 00:23:03,720
lot of the mem sets that try to see

552
00:23:02,280 --> 00:23:06,299
right data it's not dealing with

553
00:23:03,720 --> 00:23:08,610
sensitive data at all so you probably

554
00:23:06,299 --> 00:23:10,740
have to wade through a lot of options or

555
00:23:08,610 --> 00:23:12,990
a lot of lines of code for this but you

556
00:23:10,740 --> 00:23:15,059
know it's really simple it's like he's

557
00:23:12,990 --> 00:23:17,090
two regular expressions and now we can

558
00:23:15,059 --> 00:23:22,139
go and audit this code base for a

559
00:23:17,090 --> 00:23:23,399
specific table vulnerability let's say

560
00:23:22,140 --> 00:23:27,150
that you want to audit a whole bunch of

561
00:23:23,400 --> 00:23:28,650
WordPress plugins similar thing you go

562
00:23:27,150 --> 00:23:31,380
through your CI here's all the function

563
00:23:28,650 --> 00:23:32,789
calls you see we started the top ones

564
00:23:31,380 --> 00:23:35,909
are really simple and then I've sort of

565
00:23:32,789 --> 00:23:37,230
12 in two more optimized regular

566
00:23:35,909 --> 00:23:39,929
expressions because I can't help myself

567
00:23:37,230 --> 00:23:42,840
I really don't want to get all the false

568
00:23:39,929 --> 00:23:43,590
positives so if we can sort of shave

569
00:23:42,840 --> 00:23:47,340
that down a bit

570
00:23:43,590 --> 00:23:49,470
that's really beneficial so of course

571
00:23:47,340 --> 00:23:52,080
what I use to shave this down is regular

572
00:23:49,470 --> 00:23:54,809
expressions um I'm a I'm an old-school

573
00:23:52,080 --> 00:23:57,928
Perl programmer so I really love regular

574
00:23:54,809 --> 00:23:59,700
expressions I guess you know there's

575
00:23:57,929 --> 00:24:00,539
certainly useful you got a year to know

576
00:23:59,700 --> 00:24:02,909
their limitations

577
00:24:00,539 --> 00:24:07,830
you know don't parse HTML with regular

578
00:24:02,909 --> 00:24:10,980
expressions ever but the way sort of

579
00:24:07,830 --> 00:24:14,370
grep rule sets work is at the simplest

580
00:24:10,980 --> 00:24:18,840
form you just write a list in it

581
00:24:14,370 --> 00:24:20,219
editor of keywords like require now okay

582
00:24:18,840 --> 00:24:21,449
that's gonna find every require

583
00:24:20,220 --> 00:24:23,940
statement and most of those are

584
00:24:21,450 --> 00:24:26,820
hard-coded fall parts that's not very

585
00:24:23,940 --> 00:24:30,059
useful so why don't we do any require

586
00:24:26,820 --> 00:24:31,740
that deals with you know a variable and

587
00:24:30,059 --> 00:24:34,889
we do that by sticking the dollar sign

588
00:24:31,740 --> 00:24:38,220
in there now that's better but again a

589
00:24:34,890 --> 00:24:40,290
lot of the variables are static we don't

590
00:24:38,220 --> 00:24:43,020
want that either also this this other

591
00:24:40,290 --> 00:24:45,149
function require once we want to check

592
00:24:43,020 --> 00:24:48,870
not just for require we one both so we

593
00:24:45,150 --> 00:24:51,780
can combine them and then at the end we

594
00:24:48,870 --> 00:24:54,270
have limited down to be synthetics

595
00:24:51,780 --> 00:24:56,730
ambiguous you know a developer might put

596
00:24:54,270 --> 00:25:00,150
a space between the require and the the

597
00:24:56,730 --> 00:25:01,530
parentheses I mean some do that and then

598
00:25:00,150 --> 00:25:03,690
we also make sure that the only

599
00:25:01,530 --> 00:25:05,370
variables we care about is the use of

600
00:25:03,690 --> 00:25:07,910
supplied ones that come in through get

601
00:25:05,370 --> 00:25:11,270
post repress the environment cookie etc

602
00:25:07,910 --> 00:25:14,070
there might be attacking controllable or

603
00:25:11,270 --> 00:25:16,290
influenceable and and at that point

604
00:25:14,070 --> 00:25:18,928
we've eliminated a lot of the false

605
00:25:16,290 --> 00:25:21,000
positives well literally if you find

606
00:25:18,929 --> 00:25:23,760
anything with that like last rule that

607
00:25:21,000 --> 00:25:25,620
should literally be exploitable you know

608
00:25:23,760 --> 00:25:28,850
to straight-up local or remote file

609
00:25:25,620 --> 00:25:31,949
include ninety-nine percent of the time

610
00:25:28,850 --> 00:25:33,270
so but you know that's just that's just

611
00:25:31,950 --> 00:25:34,950
like hotspot checking that's not very

612
00:25:33,270 --> 00:25:36,690
cool what about like taint analysis

613
00:25:34,950 --> 00:25:38,610
right you can trace through the code

614
00:25:36,690 --> 00:25:41,309
that's fine we can use script to do that

615
00:25:38,610 --> 00:25:42,719
we take the output of grep and then we

616
00:25:41,309 --> 00:25:44,040
message it's for Perl and regular

617
00:25:42,720 --> 00:25:46,440
expressions and then we feed it back

618
00:25:44,040 --> 00:25:49,678
into grep as a rule set so it's great to

619
00:25:46,440 --> 00:25:51,360
grab two more and you know you you

620
00:25:49,679 --> 00:25:53,250
actually get tenth analysis

621
00:25:51,360 --> 00:25:56,479
this one's been public for a while but

622
00:25:53,250 --> 00:25:59,760
it's just this is a very basic example

623
00:25:56,480 --> 00:26:01,800
but you know it's it's almost the almost

624
00:25:59,760 --> 00:26:04,320
entire script is its comments and

625
00:26:01,800 --> 00:26:05,790
version and user friendliness and then

626
00:26:04,320 --> 00:26:08,700
at the bottom there is four lines of

627
00:26:05,790 --> 00:26:10,530
code that actually does all the work and

628
00:26:08,700 --> 00:26:13,440
now it could obviously be written as a

629
00:26:10,530 --> 00:26:16,950
single line so trying to keep it you

630
00:26:13,440 --> 00:26:18,870
know readable but let's say you also

631
00:26:16,950 --> 00:26:21,120
wanted something that you haven't found

632
00:26:18,870 --> 00:26:23,909
anything else for let's say that you

633
00:26:21,120 --> 00:26:26,909
were doing research on D civilization

634
00:26:23,910 --> 00:26:28,200
vulnerabilities in PHP and you wanted a

635
00:26:26,910 --> 00:26:31,440
quick way to see

636
00:26:28,200 --> 00:26:33,570
all the classes that can be deserialized

637
00:26:31,440 --> 00:26:38,250
through a wake-up of the instructor and

638
00:26:33,570 --> 00:26:40,110
an auto load function now you can add to

639
00:26:38,250 --> 00:26:41,519
this right this the two string and

640
00:26:40,110 --> 00:26:43,199
whatever you can just expand on it but I

641
00:26:41,519 --> 00:26:45,690
generally find that these three are the

642
00:26:43,200 --> 00:26:48,690
ones I care about and then I do this

643
00:26:45,690 --> 00:26:51,570
magic trick where I actually parameter

644
00:26:48,690 --> 00:26:54,240
inject past grodan into graph itself on

645
00:26:51,570 --> 00:26:56,070
the third line there to make sure that I

646
00:26:54,240 --> 00:26:58,710
want to see the next 20 line so after

647
00:26:56,070 --> 00:27:00,899
every every function definition and then

648
00:26:58,710 --> 00:27:03,360
I pipe that back into Gaudet to look for

649
00:27:00,899 --> 00:27:06,719
potential PHP functions that we might

650
00:27:03,360 --> 00:27:07,918
care about so you know it's going to

651
00:27:06,720 --> 00:27:09,029
give you a lot of information but it's

652
00:27:07,919 --> 00:27:11,070
going to highlight the bits that are

653
00:27:09,029 --> 00:27:13,950
important so any like wake up destructor

654
00:27:11,070 --> 00:27:16,350
autoload that tries to load a file email

655
00:27:13,950 --> 00:27:20,309
a file do a system call anything like

656
00:27:16,350 --> 00:27:23,010
that it'll show up so you know yeah you

657
00:27:20,309 --> 00:27:26,309
whip this up in two minutes and then

658
00:27:23,010 --> 00:27:28,200
you're off to the races so this is why I

659
00:27:26,309 --> 00:27:29,730
love grep it's just it's really simple

660
00:27:28,200 --> 00:27:30,779
to just go I should have something to

661
00:27:29,730 --> 00:27:33,960
automate this and then five minutes

662
00:27:30,779 --> 00:27:36,389
later I have and it might be noisy but

663
00:27:33,960 --> 00:27:38,370
when you only use it ever so often that

664
00:27:36,389 --> 00:27:44,820
that noise trade office is usually

665
00:27:38,370 --> 00:27:47,489
manageable so alright don't know how

666
00:27:44,820 --> 00:27:50,340
we're doing for time hopefully I think

667
00:27:47,490 --> 00:27:54,149
we're gonna finish pretty early all

668
00:27:50,340 --> 00:27:57,178
right so so what I did for this I went

669
00:27:54,149 --> 00:28:01,889
and I downloaded eighty repositories of

670
00:27:57,179 --> 00:28:04,440
github this is 1.3 gigabyte of source

671
00:28:01,889 --> 00:28:06,389
code and you might think that might take

672
00:28:04,440 --> 00:28:08,880
a little bit of time to scan right

673
00:28:06,389 --> 00:28:11,969
granted it's on this laptop here it's an

674
00:28:08,880 --> 00:28:15,029
SSD it's not that much Ram I can't

675
00:28:11,970 --> 00:28:19,260
estimate if five to ten minutes

676
00:28:15,029 --> 00:28:23,250
code time but it actually ran in six

677
00:28:19,260 --> 00:28:26,158
seconds right so that's that's grep

678
00:28:23,250 --> 00:28:28,740
running about 50 I think regular

679
00:28:26,159 --> 00:28:32,700
expression rules an entire code base a

680
00:28:28,740 --> 00:28:34,399
text six seconds not tagged analysis

681
00:28:32,700 --> 00:28:38,629
it's a little bit more cost intensive

682
00:28:34,399 --> 00:28:40,820
they took 15 seconds to paint analysis

683
00:28:38,629 --> 00:28:42,949
string copy

684
00:28:40,820 --> 00:28:44,810
only string copy calls throughout the

685
00:28:42,950 --> 00:28:48,940
entire code base for any file ending in

686
00:28:44,810 --> 00:28:51,830
the dot C extension so it's really quick

687
00:28:48,940 --> 00:28:53,930
in fact usually I pipe it through more

688
00:28:51,830 --> 00:28:55,550
and I started reading it and even if it

689
00:28:53,930 --> 00:28:57,560
was a significantly slower even if it

690
00:28:55,550 --> 00:29:00,860
took ten minutes it'll still execute

691
00:28:57,560 --> 00:29:04,220
faster than I can read the code so it's

692
00:29:00,860 --> 00:29:06,229
pretty easy so I'm actually the

693
00:29:04,220 --> 00:29:08,420
bottleneck here you know improving

694
00:29:06,230 --> 00:29:10,010
processing time for humans first of all

695
00:29:08,420 --> 00:29:12,740
we want to avoid false positives and

696
00:29:10,010 --> 00:29:14,690
I've sort of explained I do this by

697
00:29:12,740 --> 00:29:16,700
limiting the regular expressions to like

698
00:29:14,690 --> 00:29:19,310
the very stupid vulnerabilities when

699
00:29:16,700 --> 00:29:21,050
someone takes direct user input puts it

700
00:29:19,310 --> 00:29:24,370
directly in a require statement directly

701
00:29:21,050 --> 00:29:27,740
in an SQL statement you know the really

702
00:29:24,370 --> 00:29:30,020
really simple should not occur from any

703
00:29:27,740 --> 00:29:33,920
developer kind of mistakes they're the

704
00:29:30,020 --> 00:29:36,800
one we're gonna catch and then we might

705
00:29:33,920 --> 00:29:39,110
miss some where you know the user input

706
00:29:36,800 --> 00:29:41,320
gets supplied to another variable and

707
00:29:39,110 --> 00:29:43,310
then that gets used in the SQL statement

708
00:29:41,320 --> 00:29:45,379
all right that's one we can come back

709
00:29:43,310 --> 00:29:47,000
and do the tanked analysis on the second

710
00:29:45,380 --> 00:29:48,980
run first we just want to get like a

711
00:29:47,000 --> 00:29:50,650
couple of starting points start reading

712
00:29:48,980 --> 00:29:55,430
the code get familiar with the code base

713
00:29:50,650 --> 00:29:58,880
so it's okay if ayran Ischl you know

714
00:29:55,430 --> 00:30:01,310
just stumbling through it it's rough and

715
00:29:58,880 --> 00:30:03,740
quick because I don't expect you to only

716
00:30:01,310 --> 00:30:05,690
do this one step if you remember back to

717
00:30:03,740 --> 00:30:09,110
when I spoke about the approaches you

718
00:30:05,690 --> 00:30:12,050
had hot spot hot spot checking forward

719
00:30:09,110 --> 00:30:14,179
backwards tracing focus ideally you

720
00:30:12,050 --> 00:30:15,710
should apply multiple of those whenever

721
00:30:14,180 --> 00:30:17,090
you're reviewing a code base because

722
00:30:15,710 --> 00:30:19,520
they're all good at identifying

723
00:30:17,090 --> 00:30:21,919
different problems if you want to find

724
00:30:19,520 --> 00:30:23,180
deep vulnerabilities in in a code base

725
00:30:21,920 --> 00:30:26,420
the stuff that might have lived there

726
00:30:23,180 --> 00:30:27,770
for fourteen to twenty years you have to

727
00:30:26,420 --> 00:30:29,690
read the code you have to get very

728
00:30:27,770 --> 00:30:30,950
familiar with the code you have to

729
00:30:29,690 --> 00:30:33,490
understand it and you have to look in

730
00:30:30,950 --> 00:30:36,760
sort of the the weed nooks and crannies

731
00:30:33,490 --> 00:30:38,690
or often how things integrate together

732
00:30:36,760 --> 00:30:42,740
you're not going to find that stuff

733
00:30:38,690 --> 00:30:44,240
would grep and so all right and I also

734
00:30:42,740 --> 00:30:47,410
only look for certain vulnerability

735
00:30:44,240 --> 00:30:50,780
classes like I'm here if you order it

736
00:30:47,410 --> 00:30:53,930
1.3 gigabytes of PHP scripts you're

737
00:30:50,780 --> 00:30:54,649
gonna drown in XSS if you allow any type

738
00:30:53,930 --> 00:30:56,630
of exercise to

739
00:30:54,650 --> 00:30:59,390
show up in your results you'll be there

740
00:30:56,630 --> 00:31:01,400
for a long time so I basically narrowed

741
00:30:59,390 --> 00:31:04,550
down to sort of remote code execution or

742
00:31:01,400 --> 00:31:09,800
higher critical vulnerabilities so code

743
00:31:04,550 --> 00:31:12,260
execution SQL injection and then just

744
00:31:09,800 --> 00:31:14,149
run that through and then of course I

745
00:31:12,260 --> 00:31:17,600
can come back and only look for xsf if I

746
00:31:14,150 --> 00:31:19,160
want and of course you know the text

747
00:31:17,600 --> 00:31:21,230
rules and if I find that this one

748
00:31:19,160 --> 00:31:23,630
framework and the one app I'm looking at

749
00:31:21,230 --> 00:31:26,510
rather than using the standard database

750
00:31:23,630 --> 00:31:28,640
query interface they've written a custom

751
00:31:26,510 --> 00:31:31,220
one I can just go into my text files

752
00:31:28,640 --> 00:31:33,020
update the function name or add an

753
00:31:31,220 --> 00:31:34,700
additional function name and then I'll

754
00:31:33,020 --> 00:31:38,840
try to rerun it and I'll trap all of the

755
00:31:34,700 --> 00:31:41,000
the custom developer bad habits so it

756
00:31:38,840 --> 00:31:44,149
comes back to I like it it's versatile

757
00:31:41,000 --> 00:31:45,530
it's fast so when I'm running broad it

758
00:31:44,150 --> 00:31:50,240
there's usually a couple of things that

759
00:31:45,530 --> 00:31:52,370
I gotta look at to try to help me make a

760
00:31:50,240 --> 00:31:54,830
decision as to whether or not I should

761
00:31:52,370 --> 00:31:57,050
stop reading the hotspot checking and

762
00:31:54,830 --> 00:31:59,090
start looking at the code and go reading

763
00:31:57,050 --> 00:32:01,490
the code or if I should just make a note

764
00:31:59,090 --> 00:32:03,889
of it and come back later so the first

765
00:32:01,490 --> 00:32:05,870
one is obviously the file name you know

766
00:32:03,890 --> 00:32:08,260
it's a sensitive filename or something

767
00:32:05,870 --> 00:32:11,330
that I think you know should be a

768
00:32:08,260 --> 00:32:12,740
publicly accessible index.php that's

769
00:32:11,330 --> 00:32:14,449
something that's usually publicly

770
00:32:12,740 --> 00:32:17,300
accessible and I might not have to find

771
00:32:14,450 --> 00:32:19,430
an authentication bypass to prove that

772
00:32:17,300 --> 00:32:22,490
there's a remote color code execution

773
00:32:19,430 --> 00:32:25,400
here the other thing I look at is the

774
00:32:22,490 --> 00:32:27,590
line the line number so you generally

775
00:32:25,400 --> 00:32:30,350
find that the higher up in a farm a

776
00:32:27,590 --> 00:32:33,260
vulnerability of course the easier it is

777
00:32:30,350 --> 00:32:36,159
for your exploit or your for something

778
00:32:33,260 --> 00:32:39,230
to reach that code path if it's on line

779
00:32:36,160 --> 00:32:42,050
8,000 something of something that is in

780
00:32:39,230 --> 00:32:44,150
the class file there is probably a lot

781
00:32:42,050 --> 00:32:45,919
of if statements before you get to that

782
00:32:44,150 --> 00:32:48,860
point and you know a lot of those

783
00:32:45,920 --> 00:32:52,490
statements may neutralize the potential

784
00:32:48,860 --> 00:32:55,189
vulnerability and then of course I look

785
00:32:52,490 --> 00:32:56,960
at the entire length and I say you know

786
00:32:55,190 --> 00:32:59,090
how many vulnerabilities or potential

787
00:32:56,960 --> 00:33:01,580
vulnerabilities am i seeing in this one

788
00:32:59,090 --> 00:33:03,620
file so if there's one file like a

789
00:33:01,580 --> 00:33:05,090
library that appears very full of owner

790
00:33:03,620 --> 00:33:06,020
abilities that's probably a very good

791
00:33:05,090 --> 00:33:07,850
starting point

792
00:33:06,020 --> 00:33:08,389
and then of course the last one but it's

793
00:33:07,850 --> 00:33:10,399
probably the

794
00:33:08,390 --> 00:33:12,320
I actually check first it's the actual

795
00:33:10,400 --> 00:33:15,080
code view now you can see it's

796
00:33:12,320 --> 00:33:16,550
highlighted and this one man fortunately

797
00:33:15,080 --> 00:33:18,860
this one has to cross that scripting in

798
00:33:16,550 --> 00:33:22,639
there but obviously the one that my eye

799
00:33:18,860 --> 00:33:26,000
is drawn to is the potential disasterous

800
00:33:22,640 --> 00:33:28,460
remote fall include there and I can't

801
00:33:26,000 --> 00:33:32,840
say that this particular bug was patched

802
00:33:28,460 --> 00:33:35,510
a while back but so he's won this one

803
00:33:32,840 --> 00:33:37,280
everyone here everyone everyone here can

804
00:33:35,510 --> 00:33:41,060
take this one go home

805
00:33:37,280 --> 00:33:44,030
run a single correct over any PHP base

806
00:33:41,060 --> 00:33:47,600
code base if you don't use PHP you can

807
00:33:44,030 --> 00:33:49,580
change the the curl options to something

808
00:33:47,600 --> 00:33:52,790
else but this basically looks for any

809
00:33:49,580 --> 00:33:55,250
deliberate disabling of certificate

810
00:33:52,790 --> 00:33:57,020
validation within the source code and

811
00:33:55,250 --> 00:34:00,320
that's something you can get a severe

812
00:33:57,020 --> 00:34:02,200
for it's not a very exciting bug but

813
00:34:00,320 --> 00:34:04,820
it'll get you see ve

814
00:34:02,200 --> 00:34:06,260
hey you don't even have to use UNIX and

815
00:34:04,820 --> 00:34:10,040
grep you can just go and github and

816
00:34:06,260 --> 00:34:12,918
search alright there's a couple of

817
00:34:10,040 --> 00:34:14,570
couple sitting right there and then of

818
00:34:12,918 --> 00:34:16,158
course I ran on my code base and sure

819
00:34:14,570 --> 00:34:18,950
enough there are plenty of them here

820
00:34:16,159 --> 00:34:20,659
some of these are like PayPal shopping

821
00:34:18,949 --> 00:34:25,299
carts and stuff that should absolutely

822
00:34:20,659 --> 00:34:27,530
not ignore SSL validation but you know

823
00:34:25,300 --> 00:34:30,080
turns out there's actually good reason

824
00:34:27,530 --> 00:34:33,530
the historical reason for this and goes

825
00:34:30,080 --> 00:34:37,250
back to I think it's 2003 where PHP on

826
00:34:33,530 --> 00:34:41,300
Windows would crash if you tried to do

827
00:34:37,250 --> 00:34:43,370
certificate validation so all the old or

828
00:34:41,300 --> 00:34:45,169
none of those crashes just fail the

829
00:34:43,370 --> 00:34:47,120
validation regardless so all the

830
00:34:45,168 --> 00:34:49,668
old-school PHP developers have learned

831
00:34:47,120 --> 00:34:53,350
this habit of automatically disabling it

832
00:34:49,668 --> 00:34:57,799
because that way the code will run yeah

833
00:34:53,350 --> 00:34:57,980
ship it worried about security later all

834
00:34:57,800 --> 00:35:02,210
right

835
00:34:57,980 --> 00:35:03,740
SQL injection again very simple if

836
00:35:02,210 --> 00:35:06,380
you're not regular expressions a little

837
00:35:03,740 --> 00:35:07,669
bit you should be able to read this you

838
00:35:06,380 --> 00:35:09,770
can probably read it anyway so looking

839
00:35:07,670 --> 00:35:11,810
for a query with anything that's used is

840
00:35:09,770 --> 00:35:14,210
applied looking for the key words select

841
00:35:11,810 --> 00:35:17,900
with anything that's use of supplied

842
00:35:14,210 --> 00:35:20,810
followed by from or select from followed

843
00:35:17,900 --> 00:35:23,180
by use is applied or being used

844
00:35:20,810 --> 00:35:26,270
in the matching the right hand matching

845
00:35:23,180 --> 00:35:28,640
portion of a wet cloth and then the that

846
00:35:26,270 --> 00:35:30,650
and and or statement there it's a little

847
00:35:28,640 --> 00:35:32,089
bit noisy so I had to add the quote

848
00:35:30,650 --> 00:35:35,180
single or double quotes in front because

849
00:35:32,090 --> 00:35:38,870
it's meant to match it's meant to match

850
00:35:35,180 --> 00:35:41,480
multi-line statements and so if I run

851
00:35:38,870 --> 00:35:43,400
that across a card base there's a bunch

852
00:35:41,480 --> 00:35:47,500
of ceará decidir I'll hopefully you can

853
00:35:43,400 --> 00:35:53,360
read that at the back this one is in a

854
00:35:47,500 --> 00:35:57,380
yeah clicky CMS here's a bunch more GLP

855
00:35:53,360 --> 00:35:59,660
I that's inventory and the ITIL style

856
00:35:57,380 --> 00:36:02,180
management software there might be some

857
00:35:59,660 --> 00:36:06,290
users here sentry on

858
00:36:02,180 --> 00:36:08,870
it's another inventory management system

859
00:36:06,290 --> 00:36:11,990
for you know taking care of you Nagios

860
00:36:08,870 --> 00:36:15,470
config in your systems this thing is

861
00:36:11,990 --> 00:36:18,560
very full of it at least the last two

862
00:36:15,470 --> 00:36:22,600
they're all authenticated injections so

863
00:36:18,560 --> 00:36:26,570
it's a little bit less important but

864
00:36:22,600 --> 00:36:30,589
alright cross-site scripting any output

865
00:36:26,570 --> 00:36:33,260
that directly echoes back used uh

866
00:36:30,590 --> 00:36:35,570
supplied input or in the case of PHP

867
00:36:33,260 --> 00:36:37,240
self and PHP self is a tricky one

868
00:36:35,570 --> 00:36:43,070
because the webserver would have to be

869
00:36:37,240 --> 00:36:45,229
configured with as a query in query get

870
00:36:43,070 --> 00:36:48,380
options query I don't remember there

871
00:36:45,230 --> 00:36:51,250
there's a there's a toggle in web

872
00:36:48,380 --> 00:36:54,650
service that allows you to append data

873
00:36:51,250 --> 00:36:57,050
in sort of a folder format after the

874
00:36:54,650 --> 00:36:59,420
index.php script and if you have that

875
00:36:57,050 --> 00:37:03,470
enabled then PHP self is vulnerable to

876
00:36:59,420 --> 00:37:06,500
cross-site scripting by default so here

877
00:37:03,470 --> 00:37:09,319
this one's nag Yoast dashboard it's got

878
00:37:06,500 --> 00:37:12,400
a vulnerability and mumble server for

879
00:37:09,320 --> 00:37:15,790
like the there's like a teamspeak thing

880
00:37:12,400 --> 00:37:19,520
again the mumble server that one is

881
00:37:15,790 --> 00:37:21,759
dependent obviously on the config the

882
00:37:19,520 --> 00:37:26,390
other one is straight-up cookie value

883
00:37:21,760 --> 00:37:28,310
here's a bunch in Libre NMS we see that

884
00:37:26,390 --> 00:37:31,490
these guys I think this one's one of us

885
00:37:28,310 --> 00:37:32,630
I don't know what was going on here so

886
00:37:31,490 --> 00:37:34,490
there's a there's a couple of cases

887
00:37:32,630 --> 00:37:38,119
where it's just like straight up just

888
00:37:34,490 --> 00:37:40,910
going out user-supplied it data that's

889
00:37:38,119 --> 00:37:44,530
not very good but in the same files it's

890
00:37:40,910 --> 00:37:47,600
also HTML encoding some of the data and

891
00:37:44,530 --> 00:37:49,640
then directly under the HTML encoded

892
00:37:47,600 --> 00:37:51,410
that I ghost we've got a MySQL real

893
00:37:49,640 --> 00:37:53,359
escape this starter which is obviously

894
00:37:51,410 --> 00:37:55,160
that's good if you put it in a database

895
00:37:53,360 --> 00:38:00,140
but it's not so great when you're doing

896
00:37:55,160 --> 00:38:03,109
HTML output so you kind of think that

897
00:38:00,140 --> 00:38:05,180
whoever added that initial HTML special

898
00:38:03,110 --> 00:38:09,680
characters should have fixed all of them

899
00:38:05,180 --> 00:38:11,839
but I don't know and I see that a lot

900
00:38:09,680 --> 00:38:17,060
where it's like I we fixed it in two out

901
00:38:11,840 --> 00:38:20,270
of three places unsafe to civilization

902
00:38:17,060 --> 00:38:25,100
again this one is a little bit sort of

903
00:38:20,270 --> 00:38:27,619
tricky nothing go back same thing

904
00:38:25,100 --> 00:38:30,080
looking for the really silly stuff stuff

905
00:38:27,619 --> 00:38:33,740
just an serialize with user supplied

906
00:38:30,080 --> 00:38:36,080
data ran that over found a bunch of them

907
00:38:33,740 --> 00:38:37,490
but of course not all of these are yes

908
00:38:36,080 --> 00:38:39,770
all of these are doing unsafety

909
00:38:37,490 --> 00:38:42,770
civilization but not all of them will

910
00:38:39,770 --> 00:38:45,880
lead to code execution you generally

911
00:38:42,770 --> 00:38:51,080
require a library that you can leverage

912
00:38:45,880 --> 00:38:54,290
so if we go back to slide 37 I had a

913
00:38:51,080 --> 00:38:55,819
quick script to look for these these

914
00:38:54,290 --> 00:38:59,840
ones and we'll find that for the PHP

915
00:38:55,820 --> 00:39:05,300
ipam one that was actually in the in the

916
00:38:59,840 --> 00:39:07,910
pair next to DNS client the the caching

917
00:39:05,300 --> 00:39:11,140
component will let you write arbitrary

918
00:39:07,910 --> 00:39:13,730
contents to arbitrary files so that

919
00:39:11,140 --> 00:39:17,779
that's very handy the other ones that's

920
00:39:13,730 --> 00:39:20,840
not a direct digital accession so you'd

921
00:39:17,780 --> 00:39:23,440
have to rely on a global PHP thing like

922
00:39:20,840 --> 00:39:27,200
a fire filed a civil accession or

923
00:39:23,440 --> 00:39:29,570
standard library deserialization but

924
00:39:27,200 --> 00:39:31,339
again the file where you're finding the

925
00:39:29,570 --> 00:39:33,970
unsafe to civilization it would actually

926
00:39:31,340 --> 00:39:36,350
have to have it would have to consume

927
00:39:33,970 --> 00:39:38,660
the the library that you're trying to

928
00:39:36,350 --> 00:39:40,400
inject through you can of course also

929
00:39:38,660 --> 00:39:44,149
attempt things like memory corruption

930
00:39:40,400 --> 00:39:48,440
through this realization so overall it

931
00:39:44,150 --> 00:39:50,900
shouldn't be there but exploitation is

932
00:39:48,440 --> 00:39:52,220
a little less straightforward and

933
00:39:50,900 --> 00:39:54,940
finally we're gonna talk about buffer

934
00:39:52,220 --> 00:39:58,220
overflows and I would generally say that

935
00:39:54,940 --> 00:40:00,980
greatests not so great at finding

936
00:39:58,220 --> 00:40:03,009
vulnerabilities and see very fast it's

937
00:40:00,980 --> 00:40:05,900
much better at languages that have

938
00:40:03,010 --> 00:40:07,520
variable sigils so like PHP the

939
00:40:05,900 --> 00:40:09,500
variables are the cleared with a with

940
00:40:07,520 --> 00:40:13,009
the dollar sign in front you'll find

941
00:40:09,500 --> 00:40:15,380
that in some languages and crap is very

942
00:40:13,010 --> 00:40:18,500
very good for those because you can just

943
00:40:15,380 --> 00:40:20,420
add that dollar sign in your regular

944
00:40:18,500 --> 00:40:21,890
expressions to make sure that we only

945
00:40:20,420 --> 00:40:24,350
care about information that deals with

946
00:40:21,890 --> 00:40:27,410
variables we don't you know where it's

947
00:40:24,350 --> 00:40:30,410
in C it's hard to tell a custom function

948
00:40:27,410 --> 00:40:33,410
name from a variable name when you just

949
00:40:30,410 --> 00:40:35,839
searching it with text search so this is

950
00:40:33,410 --> 00:40:40,279
a variation on that tank analysis that

951
00:40:35,840 --> 00:40:41,720
we had for for PHP but this one

952
00:40:40,280 --> 00:40:43,550
basically just goes float through and

953
00:40:41,720 --> 00:40:48,049
look for a string catch drink coffee and

954
00:40:43,550 --> 00:40:51,680
s printf as well as a character

955
00:40:48,050 --> 00:40:54,350
definition of a buffer so you put all of

956
00:40:51,680 --> 00:40:57,200
that together and in the code base I

957
00:40:54,350 --> 00:41:00,290
have here this is open Lightspeed web

958
00:40:57,200 --> 00:41:01,399
server I got a couple of couple of

959
00:41:00,290 --> 00:41:04,100
vulnerabilities here

960
00:41:01,400 --> 00:41:08,540
I'll lock this one in particular the top

961
00:41:04,100 --> 00:41:11,839
lines there the developer has an assert

962
00:41:08,540 --> 00:41:17,240
that makes sure that the max length

963
00:41:11,840 --> 00:41:18,890
being supplied is more than 255 when it

964
00:41:17,240 --> 00:41:24,080
puts it in a buffer that's defined as

965
00:41:18,890 --> 00:41:27,319
256 and then and then it doesn't

966
00:41:24,080 --> 00:41:29,270
actually utilize the max length variable

967
00:41:27,320 --> 00:41:32,960
at all it just starts copying the data

968
00:41:29,270 --> 00:41:35,900
into the buffer very handy I don't know

969
00:41:32,960 --> 00:41:38,150
what was going on there similarly they

970
00:41:35,900 --> 00:41:41,780
have this other section of the code

971
00:41:38,150 --> 00:41:45,050
where again there's a comment right

972
00:41:41,780 --> 00:41:47,630
above there that says nah we should we

973
00:41:45,050 --> 00:41:49,130
should check the length of the path but

974
00:41:47,630 --> 00:41:50,450
then that's just been commented out and

975
00:41:49,130 --> 00:41:52,370
like the line below I guess we'll take

976
00:41:50,450 --> 00:41:53,839
that comment we'll take that path out of

977
00:41:52,370 --> 00:41:54,920
the configure we just slap it in the

978
00:41:53,840 --> 00:41:58,040
buffer

979
00:41:54,920 --> 00:42:00,710
it'll be fine yeah and don't worry

980
00:41:58,040 --> 00:42:02,150
particularly you can say that maybe in

981
00:42:00,710 --> 00:42:05,059
this case the developer has

982
00:42:02,150 --> 00:42:06,829
my mistake because they think that you

983
00:42:05,059 --> 00:42:08,990
know maybe you'd want to be a fall name

984
00:42:06,829 --> 00:42:12,109
and unless you custom can partly a Linux

985
00:42:08,990 --> 00:42:15,229
kernel the files should only be that

986
00:42:12,109 --> 00:42:18,170
length so it should be safe but things

987
00:42:15,230 --> 00:42:21,410
like siblings can exceed that that

988
00:42:18,170 --> 00:42:25,579
variable length so yeah you need to have

989
00:42:21,410 --> 00:42:28,190
that systems knowledge to go with it so

990
00:42:25,579 --> 00:42:31,849
that's that's all the all the demos all

991
00:42:28,190 --> 00:42:33,710
the O'Day hopefully I'll have time to

992
00:42:31,849 --> 00:42:37,789
report it to the vendor before somebody

993
00:42:33,710 --> 00:42:40,430
else takes credit and so in conclusion

994
00:42:37,789 --> 00:42:41,690
you know bond durability discovery

995
00:42:40,430 --> 00:42:47,359
doesn't have to be advanced you can just

996
00:42:41,690 --> 00:42:49,160
go out search github for curl verify SSL

997
00:42:47,359 --> 00:42:51,319
and and you're gonna find some under

998
00:42:49,160 --> 00:42:54,049
abilities sometimes the vulnerabilities

999
00:42:51,319 --> 00:42:55,970
are very hard to identify I mean we've

1000
00:42:54,049 --> 00:42:58,700
seen that time and time again they live

1001
00:42:55,970 --> 00:43:02,450
in the code base for a decade and nobody

1002
00:42:58,700 --> 00:43:04,189
finds them again source code review if

1003
00:43:02,450 --> 00:43:05,808
you have a very dynamic application

1004
00:43:04,190 --> 00:43:09,230
source code review might not be the best

1005
00:43:05,809 --> 00:43:11,210
approach and of course finding a be so

1006
00:43:09,230 --> 00:43:12,920
vulnerable code it's only the start of

1007
00:43:11,210 --> 00:43:14,839
the journey you don't have to prove that

1008
00:43:12,920 --> 00:43:17,270
it is vulnerable you don't have to deal

1009
00:43:14,839 --> 00:43:19,670
with the vendor you know release an

1010
00:43:17,270 --> 00:43:22,660
adversary get a patch out and you know

1011
00:43:19,670 --> 00:43:24,140
hopefully everyone stays safe and secure

1012
00:43:22,660 --> 00:43:27,098
so that's it

1013
00:43:24,140 --> 00:43:27,098
any questions

1014
00:43:33,240 --> 00:43:43,569
we can take a couple of questions if

1015
00:43:35,500 --> 00:43:49,630
there any in the audience now this is

1016
00:43:43,570 --> 00:43:52,599
someone that their whereabout max

1017
00:43:49,630 --> 00:43:53,290
fitness Thais here we've got a runner

1018
00:43:52,599 --> 00:44:01,540
coming over

1019
00:43:53,290 --> 00:44:03,460
I should probably rub myself yeah I just

1020
00:44:01,540 --> 00:44:05,650
want to say thanks for making Gaea order

1021
00:44:03,460 --> 00:44:09,369
I use a nearly daily and it helps me

1022
00:44:05,650 --> 00:44:12,430
speed up my workflow insane we like it

1023
00:44:09,369 --> 00:44:14,290
speeds me up so taking two three hours

1024
00:44:12,430 --> 00:44:16,359
look through some things it takes 5-10

1025
00:44:14,290 --> 00:44:20,380
minutes to get some quick wins so just

1026
00:44:16,359 --> 00:44:22,090
once a thanks thank you for myself and

1027
00:44:20,380 --> 00:44:23,580
if anyone else gets use out of it that's

1028
00:44:22,090 --> 00:44:25,890
great

1029
00:44:23,580 --> 00:44:28,150
[Music]

1030
00:44:25,890 --> 00:44:32,250
there's people questions any other

1031
00:44:28,150 --> 00:44:32,250
questions no one here one in the front

1032
00:44:32,849 --> 00:44:43,630
that's it definitely baby you come

1033
00:44:35,260 --> 00:44:46,030
anyway so about that so what happens if

1034
00:44:43,630 --> 00:44:49,060
a vendor isn't as responsive or what

1035
00:44:46,030 --> 00:44:52,530
interested in fixing something well if

1036
00:44:49,060 --> 00:44:55,450
the vendor doesn't fix it I mean

1037
00:44:52,530 --> 00:44:57,790
everyone I generally say that whoever

1038
00:44:55,450 --> 00:44:59,618
finds the bug can't ask the right to

1039
00:44:57,790 --> 00:45:02,500
choose how they want to disclose it not

1040
00:44:59,619 --> 00:45:04,540
disclose it whatever if your company has

1041
00:45:02,500 --> 00:45:05,980
a disclosure policy you should probably

1042
00:45:04,540 --> 00:45:07,690
follow that and that should probably

1043
00:45:05,980 --> 00:45:10,270
define what you do when a vendor isn't

1044
00:45:07,690 --> 00:45:12,640
responsive but overall the standard

1045
00:45:10,270 --> 00:45:14,920
industry practice seems to be try to

1046
00:45:12,640 --> 00:45:17,230
notify them a second maybe a third time

1047
00:45:14,920 --> 00:45:21,369
and then just release it for the

1048
00:45:17,230 --> 00:45:25,170
Internet to deal with okay let's think

1049
00:45:21,369 --> 00:45:25,170
I'll go one more time for a great talk

1050
00:45:25,240 --> 00:45:27,299
you

