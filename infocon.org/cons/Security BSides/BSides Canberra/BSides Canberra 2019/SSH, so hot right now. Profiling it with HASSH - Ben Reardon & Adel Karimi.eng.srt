1
00:00:01,530 --> 00:00:06,359
hello's cyber Nats let's just start by

2
00:00:04,740 --> 00:00:08,519
introducing ourselves my name's Ben

3
00:00:06,359 --> 00:00:11,879
Rhydding I work on the detection team at

4
00:00:08,519 --> 00:00:14,099
Salesforce I'm an engineer actually a

5
00:00:11,879 --> 00:00:15,570
structural engineer from from a past

6
00:00:14,099 --> 00:00:18,350
life but I've been in information

7
00:00:15,570 --> 00:00:22,050
security for about about 18 years or so

8
00:00:18,350 --> 00:00:24,000
my my interests are around data

9
00:00:22,050 --> 00:00:25,410
visualization and most recently I've

10
00:00:24,000 --> 00:00:27,570
been going down the machine-learning

11
00:00:25,410 --> 00:00:30,509
rabbit hole and anything to do with

12
00:00:27,570 --> 00:00:32,668
robotics and electronics I once made a

13
00:00:30,510 --> 00:00:36,149
robot guitar which is pictured there

14
00:00:32,668 --> 00:00:39,239
which is made out of an Arduino a PI 6

15
00:00:36,149 --> 00:00:41,159
servos and some electronics to be able

16
00:00:39,239 --> 00:00:45,690
to play for war logs it's good fun in

17
00:00:41,159 --> 00:00:46,589
mapping robot guitars and also dad have

18
00:00:45,690 --> 00:00:49,260
anything to do with data visualization

19
00:00:46,589 --> 00:00:51,480
interests me that's some volunteer work

20
00:00:49,260 --> 00:00:53,670
I've done for the koala Base Hospital in

21
00:00:51,480 --> 00:00:55,890
southeast Queensland to try to figure

22
00:00:53,670 --> 00:01:00,050
out why the the koalas are in such steep

23
00:00:55,890 --> 00:01:03,989
decline there so that's a summary of me

24
00:01:00,050 --> 00:01:06,149
hello everyone I'm audio security

25
00:01:03,989 --> 00:01:07,969
engineer at Salesforce interested in

26
00:01:06,149 --> 00:01:12,240
anything detection deception and

27
00:01:07,969 --> 00:01:14,869
security I'm active member of the honey

28
00:01:12,240 --> 00:01:17,610
nets project for about 10 years now and

29
00:01:14,869 --> 00:01:19,140
developed a couple open-source projects

30
00:01:17,610 --> 00:01:24,090
including honey lambda and honey beads

31
00:01:19,140 --> 00:01:28,079
and yeah that's me okay so in this talk

32
00:01:24,090 --> 00:01:30,359
we're going to describe what hashes go

33
00:01:28,079 --> 00:01:33,389
over how it works and show you some use

34
00:01:30,359 --> 00:01:36,600
cases in an attempt to try to illustrate

35
00:01:33,390 --> 00:01:37,710
what problems it solves and we'll show

36
00:01:36,600 --> 00:01:39,538
you some of the tools that we've

37
00:01:37,710 --> 00:01:42,030
open-sourced that you can use in your

38
00:01:39,539 --> 00:01:45,780
own environments to to get some benefits

39
00:01:42,030 --> 00:01:48,000
out of hash so this slide is a quick tip

40
00:01:45,780 --> 00:01:49,289
of the hat to all the other technologies

41
00:01:48,000 --> 00:01:53,490
that have played in the network

42
00:01:49,289 --> 00:01:56,130
fingerprinting space most notably jar 3

43
00:01:53,490 --> 00:01:57,479
some of you might know jar 3 it was born

44
00:01:56,130 --> 00:02:00,449
out of the out of the same team that

45
00:01:57,479 --> 00:02:02,729
we're in in in Salesforce and indeed it

46
00:02:00,450 --> 00:02:05,219
was the inspiration for hash I looked at

47
00:02:02,729 --> 00:02:08,070
jar 3 which does fingerprinting in TLS

48
00:02:05,219 --> 00:02:11,220
and said hmm I think I can do something

49
00:02:08,070 --> 00:02:14,530
similar with SSH along the same vein so

50
00:02:11,220 --> 00:02:16,750
I was inspired by my previous work

51
00:02:14,530 --> 00:02:18,820
which is good I mean that's you know

52
00:02:16,750 --> 00:02:20,530
information security space we move them

53
00:02:18,820 --> 00:02:23,140
a needle we push that we push the

54
00:02:20,530 --> 00:02:25,000
envelope and we increase visibility so

55
00:02:23,140 --> 00:02:29,529
this is a tip of the hat to that um to

56
00:02:25,000 --> 00:02:31,950
that kind of con concept so what is hash

57
00:02:29,530 --> 00:02:34,930
well every encrypted protocol needs to

58
00:02:31,950 --> 00:02:38,500
exchange algorithms before it actually

59
00:02:34,930 --> 00:02:40,360
becomes encrypted and you know by

60
00:02:38,500 --> 00:02:42,940
necessity this is done in clear-text

61
00:02:40,360 --> 00:02:44,740
over the wire and it's it's a beautiful

62
00:02:42,940 --> 00:02:47,200
thing because we can have a look at

63
00:02:44,740 --> 00:02:50,590
those protocols and determine which

64
00:02:47,200 --> 00:02:53,049
compositions of them signify that you

65
00:02:50,590 --> 00:02:56,860
know using a particular app because they

66
00:02:53,050 --> 00:02:58,209
do tend to be app specific and you just

67
00:02:56,860 --> 00:03:01,890
need to figure out what that composition

68
00:02:58,209 --> 00:03:07,420
is in order to be able to successfully

69
00:03:01,890 --> 00:03:09,488
fingerprint clients and server apps now

70
00:03:07,420 --> 00:03:11,380
hash does that with SSH basically

71
00:03:09,489 --> 00:03:12,940
there's a lot of other tools around that

72
00:03:11,380 --> 00:03:15,519
to it with other protocols but

73
00:03:12,940 --> 00:03:16,810
interestingly enough it I had you know

74
00:03:15,520 --> 00:03:18,340
when I first came up with the idea I

75
00:03:16,810 --> 00:03:21,519
looked around and then really wasn't

76
00:03:18,340 --> 00:03:24,760
anything else in the SSH space an SSH

77
00:03:21,519 --> 00:03:27,790
has been around since like 1995 I think

78
00:03:24,760 --> 00:03:28,840
somewhere around that time and nothing

79
00:03:27,790 --> 00:03:32,890
has really been done in the

80
00:03:28,840 --> 00:03:35,080
fingerprinting space I think a print TLS

81
00:03:32,890 --> 00:03:37,779
and as I mentioned before jar 3 they do

82
00:03:35,080 --> 00:03:40,420
pretty much the same thing in TLS and if

83
00:03:37,780 --> 00:03:43,060
you haven't checked them out I really

84
00:03:40,420 --> 00:03:45,458
strongly suggest that you do jar 3 is a

85
00:03:43,060 --> 00:03:48,190
is a fantastic product and a quick shout

86
00:03:45,459 --> 00:03:50,170
out to UM to John old house and Jeff

87
00:03:48,190 --> 00:03:52,420
Jeff Atkinson who are also on our team

88
00:03:50,170 --> 00:03:55,530
that helped developed hash along with

89
00:03:52,420 --> 00:03:58,238
them Adel and myself

90
00:03:55,530 --> 00:04:01,390
John old house and Jeff Atkinson

91
00:03:58,239 --> 00:04:06,610
both were two of the the jars the Jas in

92
00:04:01,390 --> 00:04:07,690
ja3 the other ones josh adkins so how

93
00:04:06,610 --> 00:04:09,910
does it work

94
00:04:07,690 --> 00:04:12,400
he's a bit of a timeline between the

95
00:04:09,910 --> 00:04:15,579
client and the server and the way that

96
00:04:12,400 --> 00:04:17,918
that SSH works first of all we had the

97
00:04:15,579 --> 00:04:19,870
TCP three-way handshake that we know and

98
00:04:17,918 --> 00:04:24,340
love that occurs just like any other

99
00:04:19,870 --> 00:04:25,979
handshake syn syn ack ack next up the

100
00:04:24,340 --> 00:04:28,119
client and the server exchange

101
00:04:25,979 --> 00:04:29,919
identification strings

102
00:04:28,120 --> 00:04:34,320
you can think of these as analogous to

103
00:04:29,919 --> 00:04:37,150
user agents in in HTTP land they're

104
00:04:34,320 --> 00:04:39,099
mostly ostensible you can put in here

105
00:04:37,150 --> 00:04:41,349
whatever you want the only caveat is

106
00:04:39,100 --> 00:04:45,700
that the protocols themselves tend to

107
00:04:41,350 --> 00:04:49,720
need that SSH - 2.0 to indicate what

108
00:04:45,700 --> 00:04:51,880
version of SSH that it that it supports

109
00:04:49,720 --> 00:04:53,740
but the rest of it after that is

110
00:04:51,880 --> 00:04:54,880
basically an open string that you can

111
00:04:53,740 --> 00:04:57,850
put in whatever you like

112
00:04:54,880 --> 00:04:59,380
the RFC suggests that you put in you

113
00:04:57,850 --> 00:05:02,860
know what your product is but you can

114
00:04:59,380 --> 00:05:07,719
put in whatever you like here this is

115
00:05:02,860 --> 00:05:11,380
all in clear text right now after this

116
00:05:07,720 --> 00:05:13,990
the the server contacts the client and

117
00:05:11,380 --> 00:05:16,479
it tells the client what protocols it

118
00:05:13,990 --> 00:05:18,580
supports for various functions in the

119
00:05:16,479 --> 00:05:20,380
order in which it prefers them and this

120
00:05:18,580 --> 00:05:25,000
becomes really important with that with

121
00:05:20,380 --> 00:05:27,070
hashes you'll see soon the the client

122
00:05:25,000 --> 00:05:28,750
then tells the server the same thing and

123
00:05:27,070 --> 00:05:32,229
this is part of the negotiation piece

124
00:05:28,750 --> 00:05:35,140
and out of the out of the six protocols

125
00:05:32,229 --> 00:05:37,479
there are selected four to compose the

126
00:05:35,140 --> 00:05:39,550
the hash being the key exchanged

127
00:05:37,479 --> 00:05:42,099
protocols the encryption protocols

128
00:05:39,550 --> 00:05:45,460
message authentication and the

129
00:05:42,100 --> 00:05:49,180
compression algorithms the other two got

130
00:05:45,460 --> 00:05:52,780
left out for technical reasons basically

131
00:05:49,180 --> 00:05:54,789
the the host key changes on the first

132
00:05:52,780 --> 00:05:57,280
time a client connects to a server it's

133
00:05:54,789 --> 00:05:58,810
X and on the second time the client

134
00:05:57,280 --> 00:06:00,609
connected that same client connects to

135
00:05:58,810 --> 00:06:03,130
the server it's why the reason being is

136
00:06:00,610 --> 00:06:06,520
because the client now knows about the

137
00:06:03,130 --> 00:06:09,250
server and the server's host keys are in

138
00:06:06,520 --> 00:06:10,389
the known host file on the client and so

139
00:06:09,250 --> 00:06:12,180
now it doesn't have to have this

140
00:06:10,389 --> 00:06:15,780
guessing game it actually knows what

141
00:06:12,180 --> 00:06:20,410
algorithms it prefers and the language

142
00:06:15,780 --> 00:06:25,510
field I'll get to shortly at that stage

143
00:06:20,410 --> 00:06:27,690
they they create a key for the for the

144
00:06:25,510 --> 00:06:30,070
encryption of the session itself and

145
00:06:27,690 --> 00:06:32,800
then after that it's encrypted and

146
00:06:30,070 --> 00:06:36,010
things get a little bit tougher once

147
00:06:32,800 --> 00:06:38,289
once it's encrypted but the green

148
00:06:36,010 --> 00:06:40,920
proportion portion there is where hash

149
00:06:38,289 --> 00:06:44,080
plays in the identification phase

150
00:06:40,920 --> 00:06:47,170
in one shock this is how it looks it's

151
00:06:44,080 --> 00:06:49,240
an example of the of the client kicks

152
00:06:47,170 --> 00:06:51,160
our net packet all of this comes in one

153
00:06:49,240 --> 00:06:53,950
packet and I've highlighted in pink

154
00:06:51,160 --> 00:06:55,480
they're the components of the hash you

155
00:06:53,950 --> 00:06:57,250
can see all of the all of the lovely

156
00:06:55,480 --> 00:06:59,830
algorithms there and they're in there

157
00:06:57,250 --> 00:07:01,480
clear text format I don't know what

158
00:06:59,830 --> 00:07:04,180
these algorithms are or how they work

159
00:07:01,480 --> 00:07:07,150
but the fact is that that they're all

160
00:07:04,180 --> 00:07:09,490
there in text and they're all kind of

161
00:07:07,150 --> 00:07:14,710
turn out to be unique for per client

162
00:07:09,490 --> 00:07:16,060
pretty much so let's have a look at an

163
00:07:14,710 --> 00:07:19,419
example of how it works this is a

164
00:07:16,060 --> 00:07:22,570
cyberduck the you know it's a I guess

165
00:07:19,420 --> 00:07:24,460
maybe it's a popular I like it it's got

166
00:07:22,570 --> 00:07:28,420
a cyber I'll buy it

167
00:07:24,460 --> 00:07:32,169
it's a FTP SSH all sorts of clients um

168
00:07:28,420 --> 00:07:34,750
it's good good for Mac when this

169
00:07:32,170 --> 00:07:36,250
contacts the server these are the for

170
00:07:34,750 --> 00:07:38,170
this particular version mind you six

171
00:07:36,250 --> 00:07:39,760
point seven point one it's interesting

172
00:07:38,170 --> 00:07:43,270
because you can actually use hash to

173
00:07:39,760 --> 00:07:45,490
identify different versions at times so

174
00:07:43,270 --> 00:07:46,990
you can use hash to see if you've got a

175
00:07:45,490 --> 00:07:47,860
vulnerable version of cyberduck out

176
00:07:46,990 --> 00:07:51,250
there and you want to know if you're

177
00:07:47,860 --> 00:07:55,090
using it you can use it in this way the

178
00:07:51,250 --> 00:07:57,040
the four functions that are that are

179
00:07:55,090 --> 00:07:59,109
that compose the hash are listed here

180
00:07:57,040 --> 00:08:00,460
you can see all of the you know

181
00:07:59,110 --> 00:08:02,140
diffie-hellman

182
00:08:00,460 --> 00:08:04,750
there's elliptic curve stuff there

183
00:08:02,140 --> 00:08:07,330
there's compression measured message

184
00:08:04,750 --> 00:08:08,590
authentication these are all the

185
00:08:07,330 --> 00:08:10,870
protocols that are supported by

186
00:08:08,590 --> 00:08:13,299
cyberduck in the order in which they're

187
00:08:10,870 --> 00:08:15,250
supported which becomes important

188
00:08:13,300 --> 00:08:17,620
because what we do is we get these

189
00:08:15,250 --> 00:08:20,740
protocols and we concatenate them all

190
00:08:17,620 --> 00:08:23,440
together in a big long text string and

191
00:08:20,740 --> 00:08:25,300
just put in a semicolon in between the

192
00:08:23,440 --> 00:08:28,150
fields so that if we want to later on we

193
00:08:25,300 --> 00:08:29,920
can split these out just with a regex to

194
00:08:28,150 --> 00:08:33,610
to figure out you know what compression

195
00:08:29,920 --> 00:08:35,380
algorithms wasn't actually so you can

196
00:08:33,610 --> 00:08:38,680
see there's lots of entropy in that

197
00:08:35,380 --> 00:08:41,439
string and that's what that's what hash

198
00:08:38,679 --> 00:08:46,300
lanes on and all we do now is just take

199
00:08:41,440 --> 00:08:48,640
an md5 hash message digest of that and

200
00:08:46,300 --> 00:08:51,599
we end up with the hash which is

201
00:08:48,640 --> 00:08:54,569
pronounced exactly the same way

202
00:08:51,600 --> 00:08:56,100
so that's basically what cyberduck looks

203
00:08:54,570 --> 00:09:00,240
like on your network it's got that hash

204
00:08:56,100 --> 00:09:01,490
value of eight AAA now if we go and have

205
00:09:00,240 --> 00:09:05,490
a look at n crack which is a

206
00:09:01,490 --> 00:09:07,380
brute-forcing ssh tool and these are the

207
00:09:05,490 --> 00:09:10,380
algorithms that it supports you can see

208
00:09:07,380 --> 00:09:12,270
it's a little bit more Spartan the it

209
00:09:10,380 --> 00:09:14,100
doesn't support as many algorithms as

210
00:09:12,270 --> 00:09:18,540
cyberduck does because cyberattacks you

211
00:09:14,100 --> 00:09:20,030
know meant to to do much more than than

212
00:09:18,540 --> 00:09:23,910
n crack which is just meant to do

213
00:09:20,030 --> 00:09:26,189
password cracking now when we

214
00:09:23,910 --> 00:09:29,360
concatenate all them together a little

215
00:09:26,190 --> 00:09:32,280
bit less entropy but still pretty good

216
00:09:29,360 --> 00:09:36,030
we hashed that and now we have an

217
00:09:32,280 --> 00:09:37,319
identifier for our for n crack which is

218
00:09:36,030 --> 00:09:39,780
pretty good if you can see it and crack

219
00:09:37,320 --> 00:09:44,160
on your network and normally that's a

220
00:09:39,780 --> 00:09:45,810
bad thing so if you have a look at the

221
00:09:44,160 --> 00:09:48,829
source code of n crack you can see here

222
00:09:45,810 --> 00:09:50,819
that it's purporting to be OpenSSH 7.1

223
00:09:48,830 --> 00:09:53,040
which is fine you can change that to

224
00:09:50,820 --> 00:09:54,810
whatever you like but unless you change

225
00:09:53,040 --> 00:09:56,250
unless you get right under the hood and

226
00:09:54,810 --> 00:09:58,140
you go and change those encryption

227
00:09:56,250 --> 00:10:02,100
algorithms and start messing with them

228
00:09:58,140 --> 00:10:03,810
the hash of n crack remains the same so

229
00:10:02,100 --> 00:10:05,490
what you can do effectively is monitor

230
00:10:03,810 --> 00:10:09,150
over your network for the presence of

231
00:10:05,490 --> 00:10:12,210
this hash and and potentially identify n

232
00:10:09,150 --> 00:10:13,410
crack in a passive manner you know you

233
00:10:12,210 --> 00:10:14,580
know you're not near the endpoints

234
00:10:13,410 --> 00:10:15,990
you're not near the client you're not

235
00:10:14,580 --> 00:10:19,890
near the server you're just observing

236
00:10:15,990 --> 00:10:23,130
the network traffic a quick note on md5

237
00:10:19,890 --> 00:10:25,530
versus sha-256 so we know that you know

238
00:10:23,130 --> 00:10:27,150
md5 is a you know is subject to

239
00:10:25,530 --> 00:10:28,860
collisions and we know as security

240
00:10:27,150 --> 00:10:33,990
people we should we should be looking

241
00:10:28,860 --> 00:10:36,420
for better and so we looked at char 256

242
00:10:33,990 --> 00:10:40,110
there and we gave it a bit of a trial

243
00:10:36,420 --> 00:10:42,449
but in the end like yeah there were lots

244
00:10:40,110 --> 00:10:46,350
of reasons why we went back to md5 but

245
00:10:42,450 --> 00:10:48,930
the main one was that chapter 52 56 is

246
00:10:46,350 --> 00:10:50,550
just too big like you can't you can't

247
00:10:48,930 --> 00:10:52,229
put it in a tweet for instance if you're

248
00:10:50,550 --> 00:10:54,930
trying to share an IOC with another

249
00:10:52,230 --> 00:10:56,700
group or if you're trying to paste that

250
00:10:54,930 --> 00:10:59,219
somewhere it's just just too large and

251
00:10:56,700 --> 00:11:01,950
if you're looking at dashboards the md5

252
00:10:59,220 --> 00:11:04,440
the 32 character

253
00:11:01,950 --> 00:11:08,250
property is really nice and it lends

254
00:11:04,440 --> 00:11:11,040
itself to um to documentation and it's

255
00:11:08,250 --> 00:11:14,399
also supported by everything whereas

256
00:11:11,040 --> 00:11:15,540
charter 5256 probably is but I know

257
00:11:14,399 --> 00:11:18,000
there's definitely products out there

258
00:11:15,540 --> 00:11:21,120
that don't support it so it was the most

259
00:11:18,000 --> 00:11:23,490
interoperable hashing mechanism that we

260
00:11:21,120 --> 00:11:24,570
could use and it provided a net benefit

261
00:11:23,490 --> 00:11:28,470
we weren't really worried about

262
00:11:24,570 --> 00:11:31,440
collisions here so we start with md5

263
00:11:28,470 --> 00:11:35,120
there J 3 is also md5 by the way so it

264
00:11:31,440 --> 00:11:37,649
sort of had some some consistency there

265
00:11:35,120 --> 00:11:39,000
the language field was interesting we

266
00:11:37,649 --> 00:11:41,550
didn't know about this language field

267
00:11:39,000 --> 00:11:44,160
going into it it kind of just just just

268
00:11:41,550 --> 00:11:46,319
popped up when we were looking at it the

269
00:11:44,160 --> 00:11:49,410
RSC defines a language field for SSH

270
00:11:46,320 --> 00:11:51,740
it's I've always seen it empty I've

271
00:11:49,410 --> 00:11:56,069
never seen it anything other than empty

272
00:11:51,740 --> 00:11:57,360
I think Didier Stevens did some did some

273
00:11:56,070 --> 00:11:59,970
looking on some old P cups

274
00:11:57,360 --> 00:12:01,740
he looked at look back over three years

275
00:11:59,970 --> 00:12:04,170
of P caps and found nothing but empty as

276
00:12:01,740 --> 00:12:06,060
well so that was left out of the the

277
00:12:04,170 --> 00:12:08,550
hash but we still track it because it

278
00:12:06,060 --> 00:12:10,260
might be it might be interesting one day

279
00:12:08,550 --> 00:12:15,329
so you can still use that as a tuple

280
00:12:10,260 --> 00:12:17,149
with hash if you have seen this this

281
00:12:15,329 --> 00:12:20,010
field or if you go away and have a

282
00:12:17,149 --> 00:12:22,230
implement this hash and you see that

283
00:12:20,010 --> 00:12:26,880
field anything other than empty it'd be

284
00:12:22,230 --> 00:12:29,880
really interesting to me and here's some

285
00:12:26,880 --> 00:12:33,449
hash examples of some clients so

286
00:12:29,880 --> 00:12:36,779
cyberduck as i've ever showed you param

287
00:12:33,449 --> 00:12:39,449
echo is the ssh that go to ssh client

288
00:12:36,779 --> 00:12:40,920
and server module for python and that's

289
00:12:39,449 --> 00:12:42,569
a really important one because a lot of

290
00:12:40,920 --> 00:12:47,430
the exploit tools you know they're

291
00:12:42,570 --> 00:12:49,290
developed in Python and and so it's nice

292
00:12:47,430 --> 00:12:53,910
to be able to fingerprint when people

293
00:12:49,290 --> 00:12:56,719
are using paramiku paramiku is also like

294
00:12:53,910 --> 00:12:59,490
used legitimately by developers a lot

295
00:12:56,720 --> 00:13:02,579
which is a which is a point I wanted to

296
00:12:59,490 --> 00:13:04,380
make drop bear is a popular IOT library

297
00:13:02,579 --> 00:13:06,540
I leave it's written by an Australian

298
00:13:04,380 --> 00:13:09,779
guy I think he might actually be camera

299
00:13:06,540 --> 00:13:11,640
based but yeah it's a popular one so

300
00:13:09,779 --> 00:13:14,040
it's interesting to be able to

301
00:13:11,640 --> 00:13:15,699
fingerprint IOT traffic on your network

302
00:13:14,040 --> 00:13:17,439
to map out and it's a good

303
00:13:15,699 --> 00:13:21,669
segue into the next talk I noticed is

304
00:13:17,439 --> 00:13:24,579
about IOT rensi I call it Renzi that's

305
00:13:21,669 --> 00:13:27,579
the power shell ssh one of the power

306
00:13:24,579 --> 00:13:29,858
shell ssh modules would might be

307
00:13:27,579 --> 00:13:32,378
interesting to to you if that's on your

308
00:13:29,859 --> 00:13:34,709
network and ruby as well of course you

309
00:13:32,379 --> 00:13:39,850
know ruby is also used by developers but

310
00:13:34,709 --> 00:13:42,099
it's um used by Metasploit also hash

311
00:13:39,850 --> 00:13:46,179
server examples once again drop bear has

312
00:13:42,100 --> 00:13:50,410
a has a showing there it has a server

313
00:13:46,179 --> 00:13:52,869
component AWS and an interesting one

314
00:13:50,410 --> 00:13:55,179
that goes to the topic of deception that

315
00:13:52,869 --> 00:13:58,169
we'll be covering shortly is Carrie the

316
00:13:55,179 --> 00:14:06,220
SSH honey net a honeypot is identical

317
00:13:58,169 --> 00:14:09,100
identifiable via hash so before we go

318
00:14:06,220 --> 00:14:10,809
through some interesting use cases I'm

319
00:14:09,100 --> 00:14:14,949
going to show you some implementation

320
00:14:10,809 --> 00:14:17,319
options we have we actually used blue or

321
00:14:14,949 --> 00:14:20,709
Zika script as our main implementation

322
00:14:17,319 --> 00:14:22,599
method we actually did the same for Joe

323
00:14:20,709 --> 00:14:26,289
tree as well because you know brew is

324
00:14:22,600 --> 00:14:29,139
one of the most common NSM or network

325
00:14:26,289 --> 00:14:31,629
security monitoring tools out there it's

326
00:14:29,139 --> 00:14:33,579
a scalable it's passive you can easily

327
00:14:31,629 --> 00:14:37,389
deploy it you just need a tab to forward

328
00:14:33,579 --> 00:14:41,849
your traffic so that's why we

329
00:14:37,389 --> 00:14:44,919
implemented hash in Rose Creek you can

330
00:14:41,850 --> 00:14:48,910
just get it using a brew package manager

331
00:14:44,919 --> 00:14:51,279
so just use that for installing hash you

332
00:14:48,910 --> 00:14:56,379
don't need to manually download it from

333
00:14:51,279 --> 00:14:59,859
our repo and we also developed a Python

334
00:14:56,379 --> 00:15:03,249
script and the reason was we actually

335
00:14:59,859 --> 00:15:06,069
needed a way to capture pcaps as well or

336
00:15:03,249 --> 00:15:08,289
if someone doesn't use brew can still

337
00:15:06,069 --> 00:15:12,069
use the Python script to read from pcap

338
00:15:08,289 --> 00:15:15,039
file or capture the live traffic and it

339
00:15:12,069 --> 00:15:18,660
also helped us debug our brew escaped as

340
00:15:15,039 --> 00:15:22,749
well cause brew had some bugs in the SSH

341
00:15:18,660 --> 00:15:24,789
module e test and that was reversing the

342
00:15:22,749 --> 00:15:27,159
client and SSH it couldn't accurately

343
00:15:24,789 --> 00:15:28,850
determine the direction of the

344
00:15:27,159 --> 00:15:33,410
connection so that's how

345
00:15:28,850 --> 00:15:36,379
debug that and found that even you can

346
00:15:33,410 --> 00:15:41,269
also use this partner script on your

347
00:15:36,379 --> 00:15:43,579
servers and capture the fingerprints in

348
00:15:41,269 --> 00:15:46,089
JSON or CSV format and for what your

349
00:15:43,579 --> 00:15:50,929
logs there were actually that's how I

350
00:15:46,089 --> 00:15:53,389
get the logs from my SSH honey pots we

351
00:15:50,929 --> 00:15:56,209
also implemented a dark roast version of

352
00:15:53,389 --> 00:15:59,089
this Python script just to make it

353
00:15:56,209 --> 00:16:03,410
easier for you guys to try and see how

354
00:15:59,089 --> 00:16:06,549
it works you can build a container using

355
00:16:03,410 --> 00:16:12,879
the code we have in the repo or you can

356
00:16:06,549 --> 00:16:15,199
pull the version from docker hub and

357
00:16:12,879 --> 00:16:19,519
something called thought it might be

358
00:16:15,199 --> 00:16:21,549
interesting is hash gem so I thought it

359
00:16:19,519 --> 00:16:24,709
would be good if we can create our own

360
00:16:21,549 --> 00:16:28,129
fingerprint database so one problem with

361
00:16:24,709 --> 00:16:30,138
jatri I noticed the many companies and

362
00:16:28,129 --> 00:16:31,729
people out there had this problem with

363
00:16:30,139 --> 00:16:36,079
draw tree they want they were looking

364
00:16:31,729 --> 00:16:37,999
for a fingerprint database or they

365
00:16:36,079 --> 00:16:40,878
wanted to create their own database but

366
00:16:37,999 --> 00:16:43,639
there wasn't any automated way of doing

367
00:16:40,879 --> 00:16:46,489
this so this actually is a dynamic

368
00:16:43,639 --> 00:16:49,069
docker file and a simple Python script

369
00:16:46,489 --> 00:16:53,509
which populates that docker file with

370
00:16:49,069 --> 00:16:56,209
different SSH client versions and it

371
00:16:53,509 --> 00:16:58,429
builds a container tries to initiate SSH

372
00:16:56,209 --> 00:17:03,049
connection and then captures the hash

373
00:16:58,429 --> 00:17:06,519
value for that specific SSH client

374
00:17:03,049 --> 00:17:09,789
version so as an example we created a

375
00:17:06,519 --> 00:17:14,599
sample fingerprint database including

376
00:17:09,789 --> 00:17:16,750
drop pair OpenSSH and paramiku but you

377
00:17:14,599 --> 00:17:23,299
can create your own fingerprint database

378
00:17:16,750 --> 00:17:27,049
using this simple tool and the last

379
00:17:23,299 --> 00:17:31,549
between implementation side is a n

380
00:17:27,049 --> 00:17:35,418
mapper script we created to scan SSH

381
00:17:31,549 --> 00:17:38,330
servers and find the fingerprint of

382
00:17:35,419 --> 00:17:40,879
those SSH servers so as an example you

383
00:17:38,330 --> 00:17:41,270
can use it to find for example a

384
00:17:40,879 --> 00:17:44,689
specific

385
00:17:41,270 --> 00:17:47,360
version of like vulnerable SSH servers

386
00:17:44,690 --> 00:17:52,250
like Lib SSH which I'm going to cover in

387
00:17:47,360 --> 00:17:56,959
the next slide so let's move on to some

388
00:17:52,250 --> 00:18:01,730
use cases I'm sure you all heard about

389
00:17:56,960 --> 00:18:03,380
the ssh authentication bypass bug this

390
00:18:01,730 --> 00:18:06,260
actually happened a couple days after we

391
00:18:03,380 --> 00:18:10,100
released the hash and it was interesting

392
00:18:06,260 --> 00:18:13,400
so we downloaded a census ssh data set

393
00:18:10,100 --> 00:18:15,429
and they generated hash for all those

394
00:18:13,400 --> 00:18:19,040
state servers on the internet and

395
00:18:15,430 --> 00:18:21,680
estimated the number of vulnerable live

396
00:18:19,040 --> 00:18:26,860
SSH servers which you can see it's about

397
00:18:21,680 --> 00:18:26,860
two thousand five hundred at that time

398
00:18:26,920 --> 00:18:35,540
so the vulnerability was the attacker

399
00:18:30,440 --> 00:18:39,800
could present SSH user out success

400
00:18:35,540 --> 00:18:42,470
instead of a user out request and login

401
00:18:39,800 --> 00:18:46,040
to the servers you see that so let's see

402
00:18:42,470 --> 00:18:48,440
how we can detect that if we have the

403
00:18:46,040 --> 00:18:51,980
hash value of the exploit tools which

404
00:18:48,440 --> 00:18:55,130
are mostly based on paramiku or Ruby so

405
00:18:51,980 --> 00:18:57,230
they were module which was developed for

406
00:18:55,130 --> 00:18:59,540
Metasploit obviously was the Ruby one

407
00:18:57,230 --> 00:19:02,690
and there was heaps of python-based

408
00:18:59,540 --> 00:19:07,030
exploits out there which actually uses

409
00:19:02,690 --> 00:19:11,660
premiere Co and if we have the hash of

410
00:19:07,030 --> 00:19:13,670
vulnerable live SSH servers combining

411
00:19:11,660 --> 00:19:18,320
these two together we can find exploit

412
00:19:13,670 --> 00:19:21,590
atoms what if we have the authentication

413
00:19:18,320 --> 00:19:25,790
logs as well if we add that we can find

414
00:19:21,590 --> 00:19:28,540
the successful exploit atoms and that

415
00:19:25,790 --> 00:19:28,540
would be interesting

416
00:19:30,670 --> 00:19:36,580
so just a couple of other ideas about

417
00:19:32,710 --> 00:19:38,500
how hash can be used potentially if you

418
00:19:36,580 --> 00:19:40,540
have your production service and you

419
00:19:38,500 --> 00:19:42,670
know you you've got a relatively

420
00:19:40,540 --> 00:19:46,780
controlled environment then you could

421
00:19:42,670 --> 00:19:49,120
potentially you know what hash client

422
00:19:46,780 --> 00:19:51,910
that your best that your Bastion server

423
00:19:49,120 --> 00:19:55,360
users might use the specific version of

424
00:19:51,910 --> 00:19:57,130
open-air OpenSSH or maybe you've got an

425
00:19:55,360 --> 00:19:58,689
orchestration setup where you're using

426
00:19:57,130 --> 00:20:02,020
ansible or something like that which

427
00:19:58,690 --> 00:20:04,330
reaches out to the servers to do to do

428
00:20:02,020 --> 00:20:06,820
maintenance and that's you know also

429
00:20:04,330 --> 00:20:09,399
fingerprint of all via hash so that's

430
00:20:06,820 --> 00:20:12,429
cool you can say hash hashes from these

431
00:20:09,400 --> 00:20:15,460
our clients are okay but anything else

432
00:20:12,430 --> 00:20:18,880
including in crack or um or maybe you

433
00:20:15,460 --> 00:20:20,350
can you can set up some logic where it's

434
00:20:18,880 --> 00:20:21,370
the first time I've ever seen this hash

435
00:20:20,350 --> 00:20:25,480
in this environment

436
00:20:21,370 --> 00:20:27,340
maybe that warrants some research or you

437
00:20:25,480 --> 00:20:29,710
know a c-cert remember to have a look at

438
00:20:27,340 --> 00:20:31,419
or any anything anything else any other

439
00:20:29,710 --> 00:20:34,750
bad tools that you can think of but that

440
00:20:31,420 --> 00:20:36,490
that hash first scene idea is really

441
00:20:34,750 --> 00:20:38,710
interesting because if you've got an OT

442
00:20:36,490 --> 00:20:40,750
network and it's really tired down and

443
00:20:38,710 --> 00:20:42,250
you definitely shouldn't see anything in

444
00:20:40,750 --> 00:20:43,930
there other than your orchestration

445
00:20:42,250 --> 00:20:47,100
server then this has kind of like a

446
00:20:43,930 --> 00:20:51,390
pretty cheap and passive way of

447
00:20:47,100 --> 00:20:51,389
overloading this kind of activity you

448
00:20:51,960 --> 00:20:57,280
can also go the other way around and

449
00:20:54,430 --> 00:21:00,210
from your from your servers or your

450
00:20:57,280 --> 00:21:03,550
clients you can say okay well our

451
00:21:00,210 --> 00:21:06,850
supported version of SSH client is this

452
00:21:03,550 --> 00:21:08,889
here is the hash server for it the sorry

453
00:21:06,850 --> 00:21:11,649
the hashed value for it and we're going

454
00:21:08,890 --> 00:21:14,700
to allow that but anything else at all

455
00:21:11,650 --> 00:21:17,140
including no PowerShell or param echo

456
00:21:14,700 --> 00:21:19,330
Ruby or anything else in fact we're

457
00:21:17,140 --> 00:21:22,240
going to bump that up the alert chain

458
00:21:19,330 --> 00:21:23,800
because it might be it might be that you

459
00:21:22,240 --> 00:21:26,230
know that the client is numb is

460
00:21:23,800 --> 00:21:26,860
compromised and they've got they've got

461
00:21:26,230 --> 00:21:29,400
a PowerShell

462
00:21:26,860 --> 00:21:32,409
of obfuscated PowerShell script running

463
00:21:29,400 --> 00:21:35,520
and we're not expecting to see that so

464
00:21:32,410 --> 00:21:37,810
you can use it you can use it like that

465
00:21:35,520 --> 00:21:39,100
this requires like a lot of

466
00:21:37,810 --> 00:21:41,080
understanding you know of your

467
00:21:39,100 --> 00:21:43,389
environment obviously

468
00:21:41,080 --> 00:21:46,239
and requires a yeah a big understanding

469
00:21:43,389 --> 00:21:48,998
of what sort of clients that are that

470
00:21:46,239 --> 00:21:51,039
are usual so normally you have to do a

471
00:21:48,999 --> 00:21:53,440
lot of profiling of your environment

472
00:21:51,039 --> 00:21:59,619
which hash lets you do you can easily

473
00:21:53,440 --> 00:22:04,269
dashboard your environment another idea

474
00:21:59,619 --> 00:22:09,220
that I came up with was within GCP when

475
00:22:04,269 --> 00:22:12,489
when you SSH using the TCP console into

476
00:22:09,220 --> 00:22:14,739
one of your VM instances a lot of stuff

477
00:22:12,489 --> 00:22:17,879
happens in the background the TCP

478
00:22:14,739 --> 00:22:22,419
infrastructure goes and puts an

479
00:22:17,879 --> 00:22:25,649
ephemeral client key on your SSH client

480
00:22:22,419 --> 00:22:28,090
key on your in your known house

481
00:22:25,649 --> 00:22:30,729
I'm sorry not known how its authorized

482
00:22:28,090 --> 00:22:33,820
keys file and that allows them to

483
00:22:30,730 --> 00:22:36,609
connect to that server with their with

484
00:22:33,820 --> 00:22:39,999
their back-end systems and deliver the

485
00:22:36,609 --> 00:22:43,779
SSH session in a in the web browser and

486
00:22:39,999 --> 00:22:46,869
this is one way of contacting your GCE

487
00:22:43,779 --> 00:22:47,889
instances without an actual clients on

488
00:22:46,869 --> 00:22:51,009
your machine you do it all in the

489
00:22:47,889 --> 00:22:55,299
browser so that's good I had a look at

490
00:22:51,009 --> 00:22:57,840
the at the network traffic by installing

491
00:22:55,299 --> 00:23:01,119
hash on the server's themselves and

492
00:22:57,840 --> 00:23:03,580
noted that that that connection made by

493
00:23:01,119 --> 00:23:06,249
Google is is very fingerprint very

494
00:23:03,580 --> 00:23:08,080
finger printable and I'll just make a

495
00:23:06,249 --> 00:23:10,299
note I hope you can see that it's a bit

496
00:23:08,080 --> 00:23:14,289
small but those four a lot for black

497
00:23:10,299 --> 00:23:16,149
lines they're indicate the the protocols

498
00:23:14,289 --> 00:23:18,190
that GCP are using you can see that it's

499
00:23:16,149 --> 00:23:20,049
very very Spartan now this time we've

500
00:23:18,190 --> 00:23:23,409
only got one single protocol for each

501
00:23:20,049 --> 00:23:25,539
one of those functions so because GCP

502
00:23:23,409 --> 00:23:27,850
can google google you can do that I

503
00:23:25,539 --> 00:23:29,529
guess because they know exactly what is

504
00:23:27,850 --> 00:23:31,689
supported on that box they don't have to

505
00:23:29,529 --> 00:23:33,759
have this big line of these are all the

506
00:23:31,690 --> 00:23:36,549
things I support and hopefully we can

507
00:23:33,759 --> 00:23:40,690
agree on one they can be very efficient

508
00:23:36,549 --> 00:23:43,239
there and just list one per function so

509
00:23:40,690 --> 00:23:46,359
maybe you can say anything else if

510
00:23:43,239 --> 00:23:49,869
anything else contacts smart DC GCE

511
00:23:46,359 --> 00:23:52,678
instances then then I want that bumped

512
00:23:49,869 --> 00:23:52,678
up the alert shown

513
00:23:56,309 --> 00:24:03,580
so now my favorite part like my favorite

514
00:24:01,240 --> 00:24:06,940
use case of this hash is to detect

515
00:24:03,580 --> 00:24:08,860
lateral movement activities as we know

516
00:24:06,940 --> 00:24:12,100
like attackers usually use system's

517
00:24:08,860 --> 00:24:13,419
default SSH clients for lateral movement

518
00:24:12,100 --> 00:24:16,330
but not always

519
00:24:13,420 --> 00:24:21,190
there are cases like umpires invoke SSH

520
00:24:16,330 --> 00:24:23,889
command which that PowerShell script

521
00:24:21,190 --> 00:24:28,140
actually uses renze SSH dotnet library

522
00:24:23,890 --> 00:24:31,360
and obviously that has their specific

523
00:24:28,140 --> 00:24:35,350
client ID and hash and as you can see

524
00:24:31,360 --> 00:24:37,629
here in a screenshot of the impire code

525
00:24:35,350 --> 00:24:40,899
you can see they've mentioned that

526
00:24:37,630 --> 00:24:47,530
they're using base64 encoded hesitation

527
00:24:40,900 --> 00:24:51,460
it dot DLL so we can actually detect

528
00:24:47,530 --> 00:24:56,080
such activities easily but what about a

529
00:24:51,460 --> 00:24:59,080
cobalt strike guess what

530
00:24:56,080 --> 00:25:02,350
cobalt strike actually has a built-in

531
00:24:59,080 --> 00:25:05,678
SSH client and I've noticed that a

532
00:25:02,350 --> 00:25:09,879
couple of weeks ago and a look at the

533
00:25:05,679 --> 00:25:14,890
documentation so they actually added the

534
00:25:09,880 --> 00:25:16,870
SSH client in 2016 which is actually

535
00:25:14,890 --> 00:25:21,640
baked in you there's no way you can

536
00:25:16,870 --> 00:25:24,010
change that and the thing is cobol

537
00:25:21,640 --> 00:25:26,830
strike is a Windows tool and this is one

538
00:25:24,010 --> 00:25:29,559
of the only Linux based modules that it

539
00:25:26,830 --> 00:25:34,928
has it would be interesting it we can

540
00:25:29,559 --> 00:25:37,210
detect such activities so if I actually

541
00:25:34,929 --> 00:25:40,120
generated traffic and he'll look at the

542
00:25:37,210 --> 00:25:42,840
hash value and notice that there's a

543
00:25:40,120 --> 00:25:45,969
specific string like as you can see here

544
00:25:42,840 --> 00:25:50,709
it uses Libby SSH to a specific version

545
00:25:45,970 --> 00:25:52,840
of that with a specific hash value if

546
00:25:50,710 --> 00:25:54,640
you can if you search that in your

547
00:25:52,840 --> 00:25:57,428
network you probably find some false

548
00:25:54,640 --> 00:26:00,400
positives as well but if you limit your

549
00:25:57,429 --> 00:26:03,610
search to Windows source 2

550
00:26:00,400 --> 00:26:06,250
Linux destinations and just look for

551
00:26:03,610 --> 00:26:08,620
internal SSH connection so we don't care

552
00:26:06,250 --> 00:26:12,130
about outbound SSH just limit your

553
00:26:08,620 --> 00:26:15,459
search to internal SSH connections and

554
00:26:12,130 --> 00:26:17,470
just from Windows to Linux systems yeah

555
00:26:15,460 --> 00:26:20,289
that generates like no false positive

556
00:26:17,470 --> 00:26:21,880
and you can easily detect the attackers

557
00:26:20,289 --> 00:26:25,929
let's really move through your network

558
00:26:21,880 --> 00:26:28,120
using this COBOL strike module I thought

559
00:26:25,929 --> 00:26:30,400
it might be interesting to both blue

560
00:26:28,120 --> 00:26:32,949
teamers and red teamers as a COBOL

561
00:26:30,400 --> 00:26:39,909
strike is one of the most favorite red

562
00:26:32,950 --> 00:26:44,890
teamer so in order to use case which

563
00:26:39,909 --> 00:26:49,779
isn't like really defensive is to detect

564
00:26:44,890 --> 00:26:52,059
SSH honey pots as we can here see in the

565
00:26:49,779 --> 00:26:54,880
screenshot which is a part of a carry

566
00:26:52,059 --> 00:26:56,918
honeypot code as you know calorie is one

567
00:26:54,880 --> 00:26:59,200
of the most popular SSH honey pots out

568
00:26:56,919 --> 00:27:02,549
there which is based on a creeper

569
00:26:59,200 --> 00:27:06,480
honeypot and unfortunately they use a

570
00:27:02,549 --> 00:27:10,600
static list of ciphers and algorithms

571
00:27:06,480 --> 00:27:12,520
which can easily be fingerprinted so you

572
00:27:10,600 --> 00:27:14,469
can see here we have two hash values for

573
00:27:12,520 --> 00:27:19,000
it for some reasons which I'm not going

574
00:27:14,470 --> 00:27:21,100
to discuss here it's Jerry's two hash

575
00:27:19,000 --> 00:27:23,470
values but that's really unique

576
00:27:21,100 --> 00:27:26,770
I actually searched that in a sense this

577
00:27:23,470 --> 00:27:34,600
database and surely and found like lots

578
00:27:26,770 --> 00:27:36,399
of honey pots so as the defender site we

579
00:27:34,600 --> 00:27:39,899
actually need to improve our honeypot

580
00:27:36,399 --> 00:27:43,270
codes I actually sent a pull request and

581
00:27:39,899 --> 00:27:47,279
fix that but there's also another one

582
00:27:43,270 --> 00:27:51,129
leave SSH module in Cimmerian honeypot

583
00:27:47,279 --> 00:27:54,789
also is very a finger principle you can

584
00:27:51,130 --> 00:27:58,140
see here and yeah that's one of the

585
00:27:54,789 --> 00:27:58,140
other use cases we have

586
00:28:01,559 --> 00:28:07,899
that's just staying on the topic of um

587
00:28:04,450 --> 00:28:09,520
of evasion so I've got a number of um as

588
00:28:07,900 --> 00:28:13,540
part of this research I set up a few

589
00:28:09,520 --> 00:28:15,760
sensors on the internet and just try to

590
00:28:13,540 --> 00:28:19,210
figure out what what the internet you

591
00:28:15,760 --> 00:28:22,240
know noise look like in with regard to

592
00:28:19,210 --> 00:28:25,059
hash and here's just a bit of a table

593
00:28:22,240 --> 00:28:27,160
showing you a couple of botnets that I

594
00:28:25,059 --> 00:28:30,879
saw some of the cred stuffers or brute

595
00:28:27,160 --> 00:28:34,420
forces out there so go has its own hash

596
00:28:30,880 --> 00:28:36,070
value we can fingerprint that and it's

597
00:28:34,420 --> 00:28:39,309
that seven to the one in the red box

598
00:28:36,070 --> 00:28:42,939
there some some botnets don't bother

599
00:28:39,309 --> 00:28:45,730
masking there are there client

600
00:28:42,940 --> 00:28:47,050
identification stream string which is

601
00:28:45,730 --> 00:28:48,910
basically like as I said earlier the

602
00:28:47,050 --> 00:28:50,530
analogous to the user agent

603
00:28:48,910 --> 00:28:53,740
they just don't bother they just say yep

604
00:28:50,530 --> 00:28:56,230
I'm go it's all good but some of them

605
00:28:53,740 --> 00:29:00,059
with the same hash so we know it's go

606
00:28:56,230 --> 00:29:04,120
they do deceive and they purport to be

607
00:29:00,059 --> 00:29:05,020
OpenSSH so there's this saying that

608
00:29:04,120 --> 00:29:08,678
there's something that they're not

609
00:29:05,020 --> 00:29:11,200
that's interesting in and of itself but

610
00:29:08,679 --> 00:29:13,330
interestingly for this botnet you can

611
00:29:11,200 --> 00:29:17,850
see that the client identification

612
00:29:13,330 --> 00:29:22,120
string changes for each IP address they

613
00:29:17,850 --> 00:29:25,300
they post pend you know a string and

614
00:29:22,120 --> 00:29:28,360
it's always got a an underscore and then

615
00:29:25,300 --> 00:29:31,720
then five characters and they're always

616
00:29:28,360 --> 00:29:34,449
unique I had a little bit of a look at

617
00:29:31,720 --> 00:29:36,240
this you know I don't know what I've

618
00:29:34,450 --> 00:29:38,380
probably just random these strings

619
00:29:36,240 --> 00:29:40,630
initially I thought maybe it's some you

620
00:29:38,380 --> 00:29:42,520
know it kind of like looks like if you

621
00:29:40,630 --> 00:29:45,580
put them all together it might be base64

622
00:29:42,520 --> 00:29:48,309
I'm not sure able to find out what it

623
00:29:45,580 --> 00:29:50,919
meant it's probably just um just random

624
00:29:48,309 --> 00:29:54,149
if you apply Occam's razor there but

625
00:29:50,920 --> 00:29:56,950
that took me um half a day of research

626
00:29:54,150 --> 00:30:02,230
now there's a lot of these things too

627
00:29:56,950 --> 00:30:04,150
so these botnets pretty big and this is

628
00:30:02,230 --> 00:30:06,730
just a set of them and they're all

629
00:30:04,150 --> 00:30:08,830
different and then I just did some geo

630
00:30:06,730 --> 00:30:11,230
mapping and that's where that's where a

631
00:30:08,830 --> 00:30:15,389
lot of um that the geo Maps looked like

632
00:30:11,230 --> 00:30:15,390
actually for uh for a lot of scanners

633
00:30:16,840 --> 00:30:23,500
another botnet that I thought was

634
00:30:19,000 --> 00:30:26,950
interesting on the topic of you know the

635
00:30:23,500 --> 00:30:29,890
bots like being deceptive all of these

636
00:30:26,950 --> 00:30:31,420
four graphs have the same x timeline you

637
00:30:29,890 --> 00:30:33,400
can see that the green graph there is

638
00:30:31,420 --> 00:30:36,220
just the IP address I've just masked the

639
00:30:33,400 --> 00:30:39,310
IP address but all of these scans on my

640
00:30:36,220 --> 00:30:39,880
sensors were from the one IP address so

641
00:30:39,310 --> 00:30:41,770
that's good

642
00:30:39,880 --> 00:30:44,080
we've got the same system and they've

643
00:30:41,770 --> 00:30:46,150
all got the same hash value so we know

644
00:30:44,080 --> 00:30:47,980
that it's the same you know it's the

645
00:30:46,150 --> 00:30:51,220
same client software that's actually

646
00:30:47,980 --> 00:30:52,570
doing the scan and this is where it gets

647
00:30:51,220 --> 00:30:55,990
interesting this is the graph of that

648
00:30:52,570 --> 00:30:57,370
client identification string and you can

649
00:30:55,990 --> 00:30:59,830
see that the strings are actually all

650
00:30:57,370 --> 00:31:01,419
being cycled through so they've got some

651
00:30:59,830 --> 00:31:03,790
script in the background that's using

652
00:31:01,420 --> 00:31:05,710
the same client software but purporting

653
00:31:03,790 --> 00:31:08,710
to be different clients at different

654
00:31:05,710 --> 00:31:10,810
periods of the scan so it's at one stage

655
00:31:08,710 --> 00:31:13,270
it's saying it's it starts off saying

656
00:31:10,810 --> 00:31:19,120
it's putty and then it changes and it

657
00:31:13,270 --> 00:31:24,580
goes to OpenSSH 5.3 it says it's what's

658
00:31:19,120 --> 00:31:26,590
that OpenSSH 6.2 and and the the Aqua

659
00:31:24,580 --> 00:31:31,090
one is a product called net serene

660
00:31:26,590 --> 00:31:33,760
computer it's an ssh client that that's

661
00:31:31,090 --> 00:31:36,399
used so it's using four different client

662
00:31:33,760 --> 00:31:38,110
identification strings now why do they

663
00:31:36,400 --> 00:31:40,300
and all of all of the accounts that are

664
00:31:38,110 --> 00:31:42,370
that were being scanned I just joined

665
00:31:40,300 --> 00:31:44,020
these with the orthologues on my sensors

666
00:31:42,370 --> 00:31:46,479
to get a sense of what are they looking

667
00:31:44,020 --> 00:31:50,790
for and this particular botnet was all

668
00:31:46,480 --> 00:31:53,460
looking for root so why they why they

669
00:31:50,790 --> 00:31:59,770
why they line with that client

670
00:31:53,460 --> 00:32:01,390
identification string well I think that

671
00:31:59,770 --> 00:32:04,120
the reason is because there's tools out

672
00:32:01,390 --> 00:32:05,650
there and I think surakarta has a um you

673
00:32:04,120 --> 00:32:08,739
can basically like Sun network

674
00:32:05,650 --> 00:32:10,960
connections based on a match of client

675
00:32:08,740 --> 00:32:14,920
identification string so if you think

676
00:32:10,960 --> 00:32:16,390
fail to ban or SSH guard but with client

677
00:32:14,920 --> 00:32:20,020
identification strings you can actually

678
00:32:16,390 --> 00:32:22,150
shun connections and maybe they were

679
00:32:20,020 --> 00:32:23,830
looking to get around such controls if

680
00:32:22,150 --> 00:32:26,170
anyone is looking for that sort of stuff

681
00:32:23,830 --> 00:32:27,610
then this particular technique would get

682
00:32:26,170 --> 00:32:31,690
around those

683
00:32:27,610 --> 00:32:31,959
Auto tion kind of systems and that's the

684
00:32:31,690 --> 00:32:33,400
UM

685
00:32:31,960 --> 00:32:43,750
that's the only reason why I thought

686
00:32:33,400 --> 00:32:46,600
that this would that this would occur so

687
00:32:43,750 --> 00:32:51,610
industry support we released this I

688
00:32:46,600 --> 00:32:54,310
think it was in November October or

689
00:32:51,610 --> 00:32:56,020
November I can't recall but since then a

690
00:32:54,310 --> 00:32:59,350
lot of a lot of places have picked it up

691
00:32:56,020 --> 00:33:01,750
and and and given a support gray noise

692
00:32:59,350 --> 00:33:03,870
was one of one of the early ones they're

693
00:33:01,750 --> 00:33:08,100
a fantastic organization binary edge

694
00:33:03,870 --> 00:33:11,080
carry actually if you download the carry

695
00:33:08,100 --> 00:33:14,770
SSH they will actually document the hash

696
00:33:11,080 --> 00:33:16,389
value for you as well which is actually

697
00:33:14,770 --> 00:33:24,070
quite ironic because we can fingerprint

698
00:33:16,390 --> 00:33:25,660
carry and yes lots of other um great

699
00:33:24,070 --> 00:33:30,070
support there from from some

700
00:33:25,660 --> 00:33:32,890
organizations there's a QR codes through

701
00:33:30,070 --> 00:33:34,600
the city open source repository that we

702
00:33:32,890 --> 00:33:36,910
put out last year if you want to have a

703
00:33:34,600 --> 00:33:38,740
greater look and if you've got any

704
00:33:36,910 --> 00:33:41,830
questions I believe our times up but

705
00:33:38,740 --> 00:33:43,720
definitely hit a Dell or I up after the

706
00:33:41,830 --> 00:33:46,449
talk we're interested to hear about

707
00:33:43,720 --> 00:33:49,810
anyone who wants to do some research in

708
00:33:46,450 --> 00:33:52,720
this area to go along on that ride with

709
00:33:49,810 --> 00:33:55,810
you so thanks very much thanks Carly and

710
00:33:52,720 --> 00:33:59,220
Silvio for organizing the conference and

711
00:33:55,810 --> 00:33:59,220
see you see you next time

712
00:34:01,430 --> 00:34:03,490
you

