1
00:00:01,550 --> 00:00:10,320
okay thank you everyone so my name's Ben

2
00:00:08,100 --> 00:00:13,678
Campbell I'm a security consultant at

3
00:00:10,320 --> 00:00:16,320
Elton and we do Red Team in Pentos in

4
00:00:13,679 --> 00:00:19,470
source code auditing we also deliver

5
00:00:16,320 --> 00:00:22,350
training and I personally have over a

6
00:00:19,470 --> 00:00:25,948
decade of experience last year we ran

7
00:00:22,350 --> 00:00:29,670
the CTF here are b-sides and I love

8
00:00:25,949 --> 00:00:33,420
DevOps so I also run broxbourne up in

9
00:00:29,670 --> 00:00:37,800
Sydney so I'm I'm be dog I've given some

10
00:00:33,420 --> 00:00:39,719
talks there as well myself so just on

11
00:00:37,800 --> 00:00:40,919
that if you're if you're in Sydney if

12
00:00:39,719 --> 00:00:41,879
you're interested in giving a talk are

13
00:00:40,920 --> 00:00:45,120
you interested in getting involved

14
00:00:41,879 --> 00:00:46,680
please come up to me let me know so

15
00:00:45,120 --> 00:00:49,949
today I'm gonna be talking about Cuban

16
00:00:46,680 --> 00:00:53,070
ET's so we're gonna go over a brief

17
00:00:49,950 --> 00:00:55,770
introduction to Cuban Eadie's containers

18
00:00:53,070 --> 00:00:57,600
and darker then we're going to talk

19
00:00:55,770 --> 00:01:00,000
about some common like methods to set it

20
00:00:57,600 --> 00:01:02,149
up also some common security problems

21
00:01:00,000 --> 00:01:04,769
that occur within kubernetes clusters

22
00:01:02,149 --> 00:01:08,820
I'm going to recap just briefly on some

23
00:01:04,769 --> 00:01:11,729
cuban eddies vulnerabilities and then

24
00:01:08,820 --> 00:01:13,949
discuss how to secure the clusters and

25
00:01:11,729 --> 00:01:15,360
some tools and resources for helping to

26
00:01:13,950 --> 00:01:18,479
order clusters and then we're gonna wrap

27
00:01:15,360 --> 00:01:21,380
up with the conclusion so the cuban

28
00:01:18,479 --> 00:01:24,658
eddies there's lots and lots of

29
00:01:21,380 --> 00:01:27,509
components lots and lots of our projects

30
00:01:24,659 --> 00:01:29,329
if you if you when you first get started

31
00:01:27,509 --> 00:01:33,900
in cuban Eddie's there's a lot to learn

32
00:01:29,329 --> 00:01:36,689
and it's it's it's really it's really

33
00:01:33,900 --> 00:01:39,390
massive things really interesting so

34
00:01:36,689 --> 00:01:42,779
what is Cuban Eddie's it's all great to

35
00:01:39,390 --> 00:01:45,720
me so it's an open source container

36
00:01:42,780 --> 00:01:49,079
orchestration solution and I came out of

37
00:01:45,720 --> 00:01:51,179
Google so they had a similar internal

38
00:01:49,079 --> 00:01:54,059
project and they then effectively did a

39
00:01:51,180 --> 00:01:58,100
rewrite and and and released it it's

40
00:01:54,060 --> 00:02:01,770
like it's open source and it basically

41
00:01:58,100 --> 00:02:03,449
orchestrates clusters like all the

42
00:02:01,770 --> 00:02:05,399
containers within a cluster like so

43
00:02:03,450 --> 00:02:07,079
multiple nodes multiple hosts the

44
00:02:05,399 --> 00:02:08,640
volumes and networking and all the

45
00:02:07,079 --> 00:02:11,940
configuration it does all of that at

46
00:02:08,639 --> 00:02:14,010
scale and it's highly extensible so all

47
00:02:11,940 --> 00:02:15,930
these like various components that make

48
00:02:14,010 --> 00:02:19,620
up kubernetes

49
00:02:15,930 --> 00:02:21,180
they can either be like very highly

50
00:02:19,620 --> 00:02:23,909
configured or they can be replaced

51
00:02:21,180 --> 00:02:26,190
totally so bits and pieces can be

52
00:02:23,909 --> 00:02:29,849
swapped in and out so it's possible to

53
00:02:26,190 --> 00:02:31,650
have like every cluster can be different

54
00:02:29,849 --> 00:02:33,599
to another cluster sort of thing so like

55
00:02:31,650 --> 00:02:35,280
every different business organization

56
00:02:33,599 --> 00:02:37,828
who's going to set up a cluster they

57
00:02:35,280 --> 00:02:39,450
they can pick and choose and do it

58
00:02:37,829 --> 00:02:42,150
differently to like what suits them best

59
00:02:39,450 --> 00:02:49,078
or just however they decided to do it so

60
00:02:42,150 --> 00:02:51,989
they they have a lot of options so just

61
00:02:49,079 --> 00:02:54,120
talking about containers talking about

62
00:02:51,989 --> 00:02:58,079
communities so they have a concept of a

63
00:02:54,120 --> 00:03:00,359
pod and a pod can either be like it

64
00:02:58,079 --> 00:03:02,849
seemed as simple as a single container

65
00:03:00,359 --> 00:03:04,680
or it can be a container and a volume or

66
00:03:02,849 --> 00:03:06,720
it can be multiple containers and

67
00:03:04,680 --> 00:03:09,390
volumes or any sort of combination of

68
00:03:06,720 --> 00:03:11,940
these of these things and so they will

69
00:03:09,390 --> 00:03:14,358
all be scheduled together as a single

70
00:03:11,940 --> 00:03:16,769
sort of like entity that's get scheduled

71
00:03:14,359 --> 00:03:18,780
and then by default with the default

72
00:03:16,769 --> 00:03:21,989
networking within communities each pod

73
00:03:18,780 --> 00:03:23,400
will have one single IP address and so

74
00:03:21,989 --> 00:03:25,230
that means that like all the containers

75
00:03:23,400 --> 00:03:28,889
running within that pot they all have

76
00:03:25,230 --> 00:03:30,388
the one IP address so there may be like

77
00:03:28,889 --> 00:03:32,190
you know listening different ports and

78
00:03:30,389 --> 00:03:34,230
stuff different pieces of like different

79
00:03:32,190 --> 00:03:38,120
containers have different services on

80
00:03:34,230 --> 00:03:38,119
different ports but it's all the one IP

81
00:03:38,720 --> 00:03:45,510
okay so Kuban Eddie's like the when you

82
00:03:43,590 --> 00:03:46,680
when you set up a cluster there's all

83
00:03:45,510 --> 00:03:49,828
these different pieces or these are some

84
00:03:46,680 --> 00:03:54,780
components within it so one of the main

85
00:03:49,829 --> 00:04:02,849
things you're gonna have is down here

86
00:03:54,780 --> 00:04:06,180
this like API this API server and that's

87
00:04:02,849 --> 00:04:09,179
like all of the control when you want to

88
00:04:06,180 --> 00:04:10,139
control the cluster when you want to

89
00:04:09,180 --> 00:04:12,180
instruct it to do different things

90
00:04:10,139 --> 00:04:14,340
you're gonna be sending the messages to

91
00:04:12,180 --> 00:04:16,320
the API server then there's like

92
00:04:14,340 --> 00:04:18,238
configuration manager the scheduler

93
00:04:16,320 --> 00:04:23,250
schedule is going to be handling like

94
00:04:18,238 --> 00:04:24,840
which pods to put on which nodes and and

95
00:04:23,250 --> 00:04:27,630
then you you basically gonna run your

96
00:04:24,840 --> 00:04:30,169
containers your pods on the worker nodes

97
00:04:27,630 --> 00:04:30,169
so

98
00:04:31,380 --> 00:04:35,460
with the implementation like I do

99
00:04:34,320 --> 00:04:37,050
generally want to go for high

100
00:04:35,460 --> 00:04:39,060
availability it's a sort of a point of

101
00:04:37,050 --> 00:04:42,030
using Cuban Eddie's and you're going to

102
00:04:39,060 --> 00:04:43,350
have multiple masters the Masters are

103
00:04:42,030 --> 00:04:46,229
going to run the API server the

104
00:04:43,350 --> 00:04:47,940
configuration manager and a scheduler

105
00:04:46,230 --> 00:04:50,250
all those sort of control plane

106
00:04:47,940 --> 00:04:55,040
components and they generally don't run

107
00:04:50,250 --> 00:04:58,100
the workloads there's also the etc D

108
00:04:55,040 --> 00:05:01,320
cluster and so you can run that on the

109
00:04:58,100 --> 00:05:02,640
Masters we can run it separately and so

110
00:05:01,320 --> 00:05:07,440
you're generally going to have at least

111
00:05:02,640 --> 00:05:09,120
three except ready nodes and then in

112
00:05:07,440 --> 00:05:11,310
production you probably going to have

113
00:05:09,120 --> 00:05:15,210
more than two masters you're going to

114
00:05:11,310 --> 00:05:17,280
have a bigger etc declaw style and then

115
00:05:15,210 --> 00:05:18,870
with you with your worker nodes you may

116
00:05:17,280 --> 00:05:21,000
actually split them up and have some

117
00:05:18,870 --> 00:05:24,290
dedicated for ingress traffic and some

118
00:05:21,000 --> 00:05:26,540
just just as like general workload and

119
00:05:24,290 --> 00:05:30,150
[Music]

120
00:05:26,540 --> 00:05:34,350
and yeah and so the weave with the

121
00:05:30,150 --> 00:05:37,789
master nodes they will be running all of

122
00:05:34,350 --> 00:05:42,150
those control plan components but they

123
00:05:37,790 --> 00:05:43,680
the control manager and the scheduler

124
00:05:42,150 --> 00:05:46,020
they're going to get like a leader is

125
00:05:43,680 --> 00:05:49,290
going to get elected and the more of the

126
00:05:46,020 --> 00:05:50,820
of the control nodes master nodes that

127
00:05:49,290 --> 00:05:52,470
you have the more sort of redundancy you

128
00:05:50,820 --> 00:05:56,310
can have the more failures are going to

129
00:05:52,470 --> 00:05:59,190
be able to survive so when you when you

130
00:05:56,310 --> 00:06:00,810
set up a Cuban Eddie's like application

131
00:05:59,190 --> 00:06:03,390
you want to run a service you want to

132
00:06:00,810 --> 00:06:04,770
exploit an application there's a lot of

133
00:06:03,390 --> 00:06:08,940
different pieces that are going to use

134
00:06:04,770 --> 00:06:10,740
so you're gonna have here on the Left

135
00:06:08,940 --> 00:06:13,110
you're gonna have say lucky ingress

136
00:06:10,740 --> 00:06:14,940
you're gonna have a service and that's

137
00:06:13,110 --> 00:06:18,810
going to spread the traffic over to the

138
00:06:14,940 --> 00:06:20,400
various pods so you can Cuban Eddie's

139
00:06:18,810 --> 00:06:21,690
you can tell it I wanted to deploy an

140
00:06:20,400 --> 00:06:24,719
application I'm gonna have a deployment

141
00:06:21,690 --> 00:06:26,700
I want to have like save three instances

142
00:06:24,720 --> 00:06:29,040
of my pod and the service is gonna

143
00:06:26,700 --> 00:06:30,990
spread that across those pods and then

144
00:06:29,040 --> 00:06:33,480
if a pod dies for some reason like maybe

145
00:06:30,990 --> 00:06:36,750
your whole node dies then because you

146
00:06:33,480 --> 00:06:38,730
instructed communities to run three of

147
00:06:36,750 --> 00:06:40,110
these pods then when for some reason one

148
00:06:38,730 --> 00:06:41,900
died it's going to it's going to start

149
00:06:40,110 --> 00:06:44,270
another one and it may start on another

150
00:06:41,900 --> 00:06:46,940
the NOTAM a starter on the same node and

151
00:06:44,270 --> 00:06:52,400
you can control all of this and then you

152
00:06:46,940 --> 00:06:54,530
can also set you can set limits resource

153
00:06:52,400 --> 00:06:57,109
limits constraints and you can set up

154
00:06:54,530 --> 00:06:59,000
various policies and you can quotas and

155
00:06:57,110 --> 00:07:00,410
things like that so human it is it's

156
00:06:59,000 --> 00:07:04,039
like it's very powerful it's very

157
00:07:00,410 --> 00:07:06,110
flexible it allows you to run a lot of

158
00:07:04,039 --> 00:07:09,919
workloads and just have a lot of good

159
00:07:06,110 --> 00:07:13,220
control over them also it's going to

160
00:07:09,919 --> 00:07:15,500
manage the configuration so you can tell

161
00:07:13,220 --> 00:07:18,110
your pods like just in the center of the

162
00:07:15,500 --> 00:07:21,889
diagram here you can tell your pod ok

163
00:07:18,110 --> 00:07:24,410
get this configuration and on the left

164
00:07:21,889 --> 00:07:26,780
here like get these secrets and so this

165
00:07:24,410 --> 00:07:28,250
is going to be stored in etc D and it's

166
00:07:26,780 --> 00:07:29,960
gonna be made available to the to the

167
00:07:28,250 --> 00:07:31,639
pod server as a plug get scheduled it's

168
00:07:29,960 --> 00:07:38,989
gonna be able to grab its configuration

169
00:07:31,639 --> 00:07:41,270
and needs for for its run time settin up

170
00:07:38,990 --> 00:07:46,340
the kubernetes cluster there's many many

171
00:07:41,270 --> 00:07:48,020
ways there's a lot like five or fifty if

172
00:07:46,340 --> 00:07:49,489
you go to the communities documentation

173
00:07:48,020 --> 00:07:51,889
there's like a big page you can scroll

174
00:07:49,490 --> 00:07:53,870
through you can set it up on a local

175
00:07:51,889 --> 00:07:58,699
machine there's a few tools that help

176
00:07:53,870 --> 00:08:00,909
you do that there's there's a there's

177
00:07:58,699 --> 00:08:03,620
like there's a new tool in our code k3

178
00:08:00,909 --> 00:08:04,849
and then there's AI mini cube and a

179
00:08:03,620 --> 00:08:07,220
bunch of other tools they'll help you

180
00:08:04,849 --> 00:08:09,849
set that up you can set up hoisted you

181
00:08:07,220 --> 00:08:12,440
can set it up on openshift from Red Hat

182
00:08:09,849 --> 00:08:15,280
there's also a lot of cloud providers so

183
00:08:12,440 --> 00:08:17,690
Google themselves they have gke you got

184
00:08:15,280 --> 00:08:21,948
Amazon all the big clouds and is on

185
00:08:17,690 --> 00:08:23,539
Azure they will have at least one way to

186
00:08:21,949 --> 00:08:24,889
run communities if not more and you can

187
00:08:23,539 --> 00:08:27,349
also just to play it on the cloud

188
00:08:24,889 --> 00:08:30,050
yourself so you could set up your own

189
00:08:27,349 --> 00:08:35,750
say like ec2 instances and set up the

190
00:08:30,050 --> 00:08:37,520
communities cluster on it so get into

191
00:08:35,750 --> 00:08:40,458
the meat of the talk now cubic community

192
00:08:37,520 --> 00:08:41,809
of security first off you want to start

193
00:08:40,458 --> 00:08:45,650
off we have like what is your threat

194
00:08:41,809 --> 00:08:47,180
model so you want to think about what it

195
00:08:45,650 --> 00:08:48,670
is that you're trying to protect what it

196
00:08:47,180 --> 00:08:51,529
is you're trying to do

197
00:08:48,670 --> 00:08:53,140
whoo-hooo maybe like will be an attacker

198
00:08:51,529 --> 00:08:57,820
will be interested in

199
00:08:53,140 --> 00:08:59,740
in attacking you and so you need to take

200
00:08:57,820 --> 00:09:01,390
into in this into consideration and

201
00:08:59,740 --> 00:09:03,790
actually use this is like the whole sort

202
00:09:01,390 --> 00:09:05,800
of backbone is to like your planning and

203
00:09:03,790 --> 00:09:08,800
what sort of actions you take to defend

204
00:09:05,800 --> 00:09:11,709
your cluster and the whole reason you do

205
00:09:08,800 --> 00:09:14,160
this is because if you don't then this

206
00:09:11,709 --> 00:09:17,290
sort of thing can happen you can end up

207
00:09:14,160 --> 00:09:19,089
basically having someone being like oh

208
00:09:17,290 --> 00:09:20,560
this queue bananas cluster if I gain

209
00:09:19,089 --> 00:09:22,480
control of it then I can start to

210
00:09:20,560 --> 00:09:23,800
schedule my own workloads on it and I

211
00:09:22,480 --> 00:09:27,370
can start to do things like crypto

212
00:09:23,800 --> 00:09:30,250
mining so Tesla for example fell victim

213
00:09:27,370 --> 00:09:33,310
to this Tesla had an unauthenticated

214
00:09:30,250 --> 00:09:36,160
access to their cluster which allowed an

215
00:09:33,310 --> 00:09:38,349
attacker to come along and basically

216
00:09:36,160 --> 00:09:39,880
gain control of the cluster start to

217
00:09:38,350 --> 00:09:42,700
schedule down workloads start to do some

218
00:09:39,880 --> 00:09:49,060
crypto mining and and it also happened

219
00:09:42,700 --> 00:09:50,800
to have their they're like details for

220
00:09:49,060 --> 00:09:52,959
their cloud so they could start to get

221
00:09:50,800 --> 00:09:54,430
access keys into s3 buckets and things

222
00:09:52,959 --> 00:09:58,000
like that and start to also attack the

223
00:09:54,430 --> 00:10:00,040
cloud so it's not it's not a very good

224
00:09:58,000 --> 00:10:03,220
thing you obviously this can cost you a

225
00:10:00,040 --> 00:10:05,020
lot of money your cloud account if an

226
00:10:03,220 --> 00:10:07,360
attacker can run their own workloads

227
00:10:05,020 --> 00:10:09,699
within it then they can take up a big

228
00:10:07,360 --> 00:10:11,529
bill with with all the compute and

229
00:10:09,700 --> 00:10:16,420
storage X and networking etc that they

230
00:10:11,529 --> 00:10:20,110
use them so with your with your threat

231
00:10:16,420 --> 00:10:22,000
model you know on the defensive side

232
00:10:20,110 --> 00:10:23,649
really like what you want is lots and

233
00:10:22,000 --> 00:10:25,149
lots and lots of isolation so the more

234
00:10:23,649 --> 00:10:26,500
isolation you can get the better so if

235
00:10:25,149 --> 00:10:28,380
an attacker manages to break into

236
00:10:26,500 --> 00:10:32,020
something so they break into a container

237
00:10:28,380 --> 00:10:35,439
they compromised a pod then the less

238
00:10:32,020 --> 00:10:38,920
that pod can do the better firm for you

239
00:10:35,440 --> 00:10:40,839
for you so at every sort of level you

240
00:10:38,920 --> 00:10:43,209
want to try to have as much isolation as

241
00:10:40,839 --> 00:10:44,980
you can and that way you're going to

242
00:10:43,209 --> 00:10:48,010
limit the blast radius of other

243
00:10:44,980 --> 00:10:49,480
compromised you're going to contain them

244
00:10:48,010 --> 00:10:52,149
and it's and it all comes back to that

245
00:10:49,480 --> 00:10:54,100
principle of least privilege if you if

246
00:10:52,149 --> 00:10:56,800
your app doesn't need to be able to talk

247
00:10:54,100 --> 00:10:58,149
to too many things then like don't allow

248
00:10:56,800 --> 00:11:00,399
to talk to many things that way if it

249
00:10:58,149 --> 00:11:02,260
gets compromised it can't talk to many

250
00:11:00,399 --> 00:11:05,370
things and it all comes back to that

251
00:11:02,260 --> 00:11:05,370
principle effectively

252
00:11:08,170 --> 00:11:15,500
so some common security problems with

253
00:11:10,640 --> 00:11:19,520
kubernetes clusters so in the beginning

254
00:11:15,500 --> 00:11:26,290
cuba Nettie's up until like version 1.5

255
00:11:19,520 --> 00:11:29,300
there was no authentication for for the

256
00:11:26,290 --> 00:11:32,480
for effectively like for the control

257
00:11:29,300 --> 00:11:34,550
plane so as soon as someone like god

258
00:11:32,480 --> 00:11:36,470
access into your cluster they would be

259
00:11:34,550 --> 00:11:40,099
able to talk to the control plane and

260
00:11:36,470 --> 00:11:42,290
they would be able to make changes

261
00:11:40,100 --> 00:11:44,240
effectively be able to start up their

262
00:11:42,290 --> 00:11:44,860
own pods or in containers stop their own

263
00:11:44,240 --> 00:11:48,710
workloads

264
00:11:44,860 --> 00:11:51,500
and start to attack your infrastructure

265
00:11:48,710 --> 00:11:54,260
start to extract secrets from your

266
00:11:51,500 --> 00:11:56,720
workloads and things like that there's

267
00:11:54,260 --> 00:11:58,850
also a read-only port so you could set

268
00:11:56,720 --> 00:12:00,980
up the control plane and this was

269
00:11:58,850 --> 00:12:03,110
actually like often done by default they

270
00:12:00,980 --> 00:12:06,770
would have a read-only listener set

271
00:12:03,110 --> 00:12:08,180
there and even today it's like depending

272
00:12:06,770 --> 00:12:09,860
on how you've set up your cluster this

273
00:12:08,180 --> 00:12:12,439
may still be there on the on the

274
00:12:09,860 --> 00:12:14,930
internal on the inside of your cluster

275
00:12:12,440 --> 00:12:17,420
so your workloads containers and things

276
00:12:14,930 --> 00:12:19,839
that are running the pods they mabel to

277
00:12:17,420 --> 00:12:21,920
connect to this read-only listener and

278
00:12:19,839 --> 00:12:23,780
from there they can gather a lot of

279
00:12:21,920 --> 00:12:27,229
information so they can then work out

280
00:12:23,780 --> 00:12:30,650
how is your cluster configured how is it

281
00:12:27,230 --> 00:12:32,150
set up and from that information they

282
00:12:30,650 --> 00:12:35,689
can then work out better ways to attack

283
00:12:32,150 --> 00:12:37,160
it what sort of pieces will they try to

284
00:12:35,690 --> 00:12:38,930
attack next to gain more and more

285
00:12:37,160 --> 00:12:41,120
control until they've eventually

286
00:12:38,930 --> 00:12:46,640
achieved their goal or compromised your

287
00:12:41,120 --> 00:12:48,380
cluster privileged containers so we've

288
00:12:46,640 --> 00:12:49,850
seen this in the past when we've done

289
00:12:48,380 --> 00:12:52,550
some audits of some cuban Nettie's

290
00:12:49,850 --> 00:12:54,490
clusters for various reasons people have

291
00:12:52,550 --> 00:12:56,329
set up privileged containers and

292
00:12:54,490 --> 00:12:58,520
privilege containers they're very

293
00:12:56,330 --> 00:13:00,110
dangerous there near equivalent of

294
00:12:58,520 --> 00:13:03,730
effectively having root access to your

295
00:13:00,110 --> 00:13:07,820
node so your hosts and they're basically

296
00:13:03,730 --> 00:13:12,280
containers that have privileges to

297
00:13:07,820 --> 00:13:15,170
interact with the hosts and so they can

298
00:13:12,280 --> 00:13:16,310
they can they can because they have more

299
00:13:15,170 --> 00:13:18,290
access to the host I have a lot more

300
00:13:16,310 --> 00:13:19,369
attack surface a lot more are different

301
00:13:18,290 --> 00:13:21,050
things they can do

302
00:13:19,370 --> 00:13:23,090
so it's quite dangerous to run them and

303
00:13:21,050 --> 00:13:24,740
if you can avoid them you definitely

304
00:13:23,090 --> 00:13:27,320
should so you can configure your claw

305
00:13:24,740 --> 00:13:29,630
style to not allow privileged containers

306
00:13:27,320 --> 00:13:33,470
which is which is a thing you should do

307
00:13:29,630 --> 00:13:35,000
if you can in secure containers so this

308
00:13:33,470 --> 00:13:38,660
is also very common you'll often find

309
00:13:35,000 --> 00:13:41,720
containers which are set up where by

310
00:13:38,660 --> 00:13:46,040
default they'll run is route you can

311
00:13:41,720 --> 00:13:47,450
also have containers which the developer

312
00:13:46,040 --> 00:13:50,000
who's like build the application if

313
00:13:47,450 --> 00:13:51,770
they've included secrets things

314
00:13:50,000 --> 00:13:53,510
unnecessarily it shouldn't really be

315
00:13:51,770 --> 00:13:55,490
there they may also have sometimes like

316
00:13:53,510 --> 00:13:57,950
left the source code in there sometimes

317
00:13:55,490 --> 00:13:59,330
people will leave like git repositories

318
00:13:57,950 --> 00:14:01,250
and things like that within the image

319
00:13:59,330 --> 00:14:02,690
and so then when that container gets

320
00:14:01,250 --> 00:14:05,210
scheduled then I contend it gets wrong

321
00:14:02,690 --> 00:14:07,490
it has all these extra things like

322
00:14:05,210 --> 00:14:08,870
source code and passwords to databases

323
00:14:07,490 --> 00:14:11,020
and things like that that shouldn't be

324
00:14:08,870 --> 00:14:11,020
there

325
00:14:12,100 --> 00:14:18,380
then you can the etc D itself so this is

326
00:14:16,580 --> 00:14:21,770
like all of the storage for the

327
00:14:18,380 --> 00:14:23,870
configuration for the for the pods for

328
00:14:21,770 --> 00:14:26,569
the cluster itself and all of the

329
00:14:23,870 --> 00:14:28,370
secrets is sort of thing etc D so it's

330
00:14:26,570 --> 00:14:32,780
very important that exception D is

331
00:14:28,370 --> 00:14:34,250
secured and you can have you can miss

332
00:14:32,780 --> 00:14:36,260
configure it so it's set up without

333
00:14:34,250 --> 00:14:38,680
authentication and you can also set it

334
00:14:36,260 --> 00:14:42,470
up so that there's no encryption at rest

335
00:14:38,680 --> 00:14:44,420
so that means that you may have like

336
00:14:42,470 --> 00:14:47,270
unencrypted backups of your data as well

337
00:14:44,420 --> 00:14:49,010
you may have snapshots and things like

338
00:14:47,270 --> 00:14:52,100
that the contain is unencrypted etcetera

339
00:14:49,010 --> 00:14:55,610
D database so that's other like we

340
00:14:52,100 --> 00:14:57,080
concerns you can have in exit routine if

341
00:14:55,610 --> 00:15:00,230
you're running in the cloud often

342
00:14:57,080 --> 00:15:02,780
there's a metadata service so a node in

343
00:15:00,230 --> 00:15:04,250
the cloud I can connect to this metadata

344
00:15:02,780 --> 00:15:06,170
service and find out information about

345
00:15:04,250 --> 00:15:08,300
the cloud environments running in find

346
00:15:06,170 --> 00:15:09,740
out information about itself think

347
00:15:08,300 --> 00:15:12,829
things like it's like P address its

348
00:15:09,740 --> 00:15:17,030
hostname various other sort of details

349
00:15:12,830 --> 00:15:20,030
about the cloud environment so this is

350
00:15:17,030 --> 00:15:21,199
very common especially it's in AWS and

351
00:15:20,030 --> 00:15:28,370
Siena's your it's in all the major

352
00:15:21,200 --> 00:15:31,120
clouds so originally by default when a

353
00:15:28,370 --> 00:15:33,170
pod got scheduled they would mount in

354
00:15:31,120 --> 00:15:35,450
service token to the cubanelle

355
00:15:33,170 --> 00:15:39,260
is cluster and this could then be used

356
00:15:35,450 --> 00:15:43,100
for the plot to authenticate to the

357
00:15:39,260 --> 00:15:45,620
cluster and to be able to start your

358
00:15:43,100 --> 00:15:47,360
interact with the class to start to find

359
00:15:45,620 --> 00:15:50,899
information that it needs and various

360
00:15:47,360 --> 00:15:52,970
things like that and originally this

361
00:15:50,899 --> 00:15:55,639
service token effectively gave it full

362
00:15:52,970 --> 00:15:58,310
control of the cluster so if you didn't

363
00:15:55,639 --> 00:16:01,180
have our back enabled or some other sort

364
00:15:58,310 --> 00:16:03,649
of security authentication mechanism

365
00:16:01,180 --> 00:16:10,459
then this would effectively lead to a

366
00:16:03,649 --> 00:16:15,019
full cluster compromise the kubernetes

367
00:16:10,459 --> 00:16:17,810
api server authentication so if if you

368
00:16:15,019 --> 00:16:20,060
have a listener that's set up without

369
00:16:17,810 --> 00:16:20,779
authentication maybe it's on the inside

370
00:16:20,060 --> 00:16:23,119
only

371
00:16:20,779 --> 00:16:24,620
so maybe only like pods can talk to it

372
00:16:23,120 --> 00:16:28,430
things like that like outsiders can talk

373
00:16:24,620 --> 00:16:30,050
to him but once a malicious payload is

374
00:16:28,430 --> 00:16:32,359
running if you had an image that's been

375
00:16:30,050 --> 00:16:34,189
Trojans if you have a container that

376
00:16:32,360 --> 00:16:37,040
happens to get compromised they could

377
00:16:34,190 --> 00:16:38,570
then talk to this API server they don't

378
00:16:37,040 --> 00:16:42,290
need authentication and then I can start

379
00:16:38,570 --> 00:16:44,779
to make malicious commands they can they

380
00:16:42,290 --> 00:16:47,000
can start to schedule more pods they can

381
00:16:44,779 --> 00:16:49,250
start to pull down images they can they

382
00:16:47,000 --> 00:16:52,480
can start to run their own workloads and

383
00:16:49,250 --> 00:16:55,610
things like that Mount volumes etc

384
00:16:52,480 --> 00:16:56,930
network security so there's lots and

385
00:16:55,610 --> 00:16:57,529
lots of ways to set up they're now

386
00:16:56,930 --> 00:17:00,670
working within

387
00:16:57,529 --> 00:17:03,309
kubernetes it's probably the most

388
00:17:00,670 --> 00:17:06,949
probably has like the most alternatives

389
00:17:03,309 --> 00:17:08,149
but by default all the pods can talk to

390
00:17:06,949 --> 00:17:10,370
all the other pods within the whole

391
00:17:08,150 --> 00:17:12,709
cluster and all the pods can talk to all

392
00:17:10,369 --> 00:17:14,750
the nodes so they can talk to the work

393
00:17:12,709 --> 00:17:19,850
nodes and they can talk to the master

394
00:17:14,750 --> 00:17:21,770
nodes it's just one big flat network so

395
00:17:19,849 --> 00:17:24,079
and by default like they can all talk to

396
00:17:21,770 --> 00:17:27,230
each other so there's no there's nothing

397
00:17:24,079 --> 00:17:30,260
stopping one container there was like

398
00:17:27,230 --> 00:17:33,830
say running a simple web server from you

399
00:17:30,260 --> 00:17:34,669
talking to the database of another pod

400
00:17:33,830 --> 00:17:38,899
even though they're totally unrelated

401
00:17:34,669 --> 00:17:43,909
they can all talk to each other some

402
00:17:38,900 --> 00:17:45,409
pass vulnerabilities so the quite

403
00:17:43,909 --> 00:17:46,970
interesting vulnerability that came out

404
00:17:45,409 --> 00:17:54,559
last year

405
00:17:46,970 --> 00:17:56,049
it was found by the CTO of Rancho and so

406
00:17:54,559 --> 00:17:59,090
this this was quite interesting so

407
00:17:56,049 --> 00:18:02,900
basically on the control plane side of

408
00:17:59,090 --> 00:18:05,000
Cuba Nettie's the the various components

409
00:18:02,900 --> 00:18:06,980
like they have full trust

410
00:18:05,000 --> 00:18:08,720
they don't need authentication and like

411
00:18:06,980 --> 00:18:10,100
when they when they do things they

412
00:18:08,720 --> 00:18:15,350
basically they're the equivalent of

413
00:18:10,100 --> 00:18:18,020
route and so this vulnerability the guy

414
00:18:15,350 --> 00:18:20,600
who found out if he worked out that when

415
00:18:18,020 --> 00:18:21,679
you make this like proxied request to do

416
00:18:20,600 --> 00:18:27,250
WebSockets

417
00:18:21,679 --> 00:18:30,110
there was this failure to handle and in

418
00:18:27,250 --> 00:18:32,750
failure to properly handle like an

419
00:18:30,110 --> 00:18:35,600
exception case and it would trick the

420
00:18:32,750 --> 00:18:37,610
server into connecting to itself in

421
00:18:35,600 --> 00:18:40,639
thinking that what since since its me

422
00:18:37,610 --> 00:18:42,620
since I'm the the server I have full

423
00:18:40,640 --> 00:18:45,380
access and so an authenticated user

424
00:18:42,620 --> 00:18:47,689
could go from having like we've are back

425
00:18:45,380 --> 00:18:49,520
they could have not very many privileges

426
00:18:47,690 --> 00:18:50,870
at all like maybe just the ability to

427
00:18:49,520 --> 00:18:53,840
look at some information but not to

428
00:18:50,870 --> 00:18:54,678
actually start up their own containers

429
00:18:53,840 --> 00:18:56,899
and things like that

430
00:18:54,679 --> 00:18:59,659
they could then effectively become route

431
00:18:56,900 --> 00:19:02,960
of the cluster and have full control of

432
00:18:59,659 --> 00:19:06,380
the cluster so that was quite an

433
00:19:02,960 --> 00:19:07,909
interesting bug and a good find and then

434
00:19:06,380 --> 00:19:11,299
most recently there was a

435
00:19:07,909 --> 00:19:13,159
vulnerabilities in run C so this is not

436
00:19:11,299 --> 00:19:14,960
actually a vulnerability within Cuba

437
00:19:13,159 --> 00:19:18,049
Nettie's itself but it's a vulnerability

438
00:19:14,960 --> 00:19:21,470
in a component that that Cuba Nettie's

439
00:19:18,049 --> 00:19:24,740
uses that it leverages so run see it's

440
00:19:21,470 --> 00:19:27,429
used to start containers and there was a

441
00:19:24,740 --> 00:19:30,080
vulnerability where you could basically

442
00:19:27,429 --> 00:19:32,960
overwrite the run C binary itself on the

443
00:19:30,080 --> 00:19:36,139
host and so that meant that if the

444
00:19:32,960 --> 00:19:38,059
attacker could had a malicious image or

445
00:19:36,140 --> 00:19:41,299
if they had right access to a container

446
00:19:38,059 --> 00:19:43,940
or if they could exact into a container

447
00:19:41,299 --> 00:19:46,010
then they could overwrite that run C

448
00:19:43,940 --> 00:19:48,230
binary which is running on the host and

449
00:19:46,010 --> 00:19:50,350
it's running as root and they then

450
00:19:48,230 --> 00:19:54,860
basically have root access to that host

451
00:19:50,350 --> 00:19:56,899
and once they've got access to one host

452
00:19:54,860 --> 00:19:59,209
then they can you know start to do that

453
00:19:56,899 --> 00:20:00,199
attack again and again to compromise all

454
00:19:59,210 --> 00:20:02,899
of the worker nodes

455
00:20:00,200 --> 00:20:05,809
and with root access to the work nodes

456
00:20:02,899 --> 00:20:08,029
they had a lot more access to the master

457
00:20:05,809 --> 00:20:12,168
nodes and so they can start to try to

458
00:20:08,029 --> 00:20:15,380
take over them as well so how to secure

459
00:20:12,169 --> 00:20:16,639
clusters you want to secure the control

460
00:20:15,380 --> 00:20:18,440
plane as much as you can

461
00:20:16,639 --> 00:20:20,689
that's like the whole brains of

462
00:20:18,440 --> 00:20:23,539
communities you want to harden the

463
00:20:20,690 --> 00:20:25,130
worker nodes this is like where these

464
00:20:23,539 --> 00:20:26,419
worker nodes they're running your your

465
00:20:25,130 --> 00:20:29,120
pods they're running your workloads

466
00:20:26,419 --> 00:20:30,700
which may not you may not have like as

467
00:20:29,120 --> 00:20:34,039
much control over them you may be

468
00:20:30,700 --> 00:20:36,380
running a lot of workloads from various

469
00:20:34,039 --> 00:20:38,120
developers and things like that it may

470
00:20:36,380 --> 00:20:40,760
not have all put the same level of care

471
00:20:38,120 --> 00:20:43,070
into it as you so you want to harden

472
00:20:40,760 --> 00:20:45,139
your worker nodes so that if a pod

473
00:20:43,070 --> 00:20:47,210
happens to get compromised or if a pod

474
00:20:45,139 --> 00:20:51,289
happens to be malicious that you're

475
00:20:47,210 --> 00:20:53,480
limiting what it can do contain an image

476
00:20:51,289 --> 00:20:55,220
security you're going to want to secure

477
00:20:53,480 --> 00:20:57,799
your containers you're going to wanna

478
00:20:55,220 --> 00:20:59,419
have good secret management you really

479
00:20:57,799 --> 00:21:01,460
want like as much legislation as you can

480
00:20:59,419 --> 00:21:03,200
get and then you also want to have good

481
00:21:01,460 --> 00:21:05,539
monitoring so that when something does

482
00:21:03,200 --> 00:21:10,399
go wrong you detect it and you want that

483
00:21:05,539 --> 00:21:12,200
to have alarm in so our back I spoke

484
00:21:10,399 --> 00:21:15,168
about earlier so role based access

485
00:21:12,200 --> 00:21:16,700
control you can configure cuba Nettie's

486
00:21:15,169 --> 00:21:19,370
so that you have different roles

487
00:21:16,700 --> 00:21:21,919
different users different groups and you

488
00:21:19,370 --> 00:21:24,649
can set it up so they like different

489
00:21:21,919 --> 00:21:25,909
people they can only do just the limited

490
00:21:24,649 --> 00:21:28,639
actions that they need to do and nothing

491
00:21:25,909 --> 00:21:30,169
more and so that's generally what you

492
00:21:28,639 --> 00:21:32,658
want to do and then in their suppliers

493
00:21:30,169 --> 00:21:34,940
like not just to to black people but

494
00:21:32,659 --> 00:21:37,340
also to various components so you can

495
00:21:34,940 --> 00:21:39,730
limit what they can do and that's always

496
00:21:37,340 --> 00:21:39,730
a good thing

497
00:21:40,870 --> 00:21:47,809
pod security policies are PSP these are

498
00:21:45,460 --> 00:21:49,490
quite powerful you can do quite a lot

499
00:21:47,809 --> 00:21:51,408
with these all all these like there's a

500
00:21:49,490 --> 00:21:53,659
lot a lot of different options here

501
00:21:51,409 --> 00:21:55,940
but they can stop privileged containers

502
00:21:53,659 --> 00:21:59,740
they can control like what namespaces

503
00:21:55,940 --> 00:22:02,179
containers can use whether the

504
00:21:59,740 --> 00:22:03,950
containers can have access to hosts

505
00:22:02,179 --> 00:22:05,690
networking whether they can mount

506
00:22:03,950 --> 00:22:08,179
various things in the file system proc

507
00:22:05,690 --> 00:22:10,610
mounts all these various options around

508
00:22:08,179 --> 00:22:12,139
volumes and storage they can also

509
00:22:10,610 --> 00:22:14,500
control like whether a container is

510
00:22:12,139 --> 00:22:16,990
allowed to run its route

511
00:22:14,500 --> 00:22:19,539
and then the Linux capabilities which is

512
00:22:16,990 --> 00:22:22,840
like a way to remove privileges from

513
00:22:19,539 --> 00:22:25,270
like the root account so there's a lot

514
00:22:22,840 --> 00:22:28,510
of different capabilities within Linux

515
00:22:25,270 --> 00:22:29,950
and you can also like control like what

516
00:22:28,510 --> 00:22:33,100
capabilities are containers allowed to

517
00:22:29,950 --> 00:22:35,620
have and then you can restrict like an

518
00:22:33,100 --> 00:22:39,070
administrator who wants to connect to a

519
00:22:35,620 --> 00:22:41,889
container they the equivalent of docker

520
00:22:39,070 --> 00:22:43,510
exec you can stop that you can like

521
00:22:41,890 --> 00:22:45,220
limit that so a container may be

522
00:22:43,510 --> 00:22:46,720
privileged for some reason like for some

523
00:22:45,220 --> 00:22:50,140
reason you needed to have this

524
00:22:46,720 --> 00:22:51,370
privileged container and so on even

525
00:22:50,140 --> 00:22:53,289
though you have our back and other sort

526
00:22:51,370 --> 00:22:55,510
of mechanisms if they're able to exact

527
00:22:53,289 --> 00:22:57,158
into that container then that may give

528
00:22:55,510 --> 00:23:00,158
them an equivalent of route on that node

529
00:22:57,159 --> 00:23:02,799
and so for that reason you may want to

530
00:23:00,159 --> 00:23:04,179
say well okay we need we have our

531
00:23:02,799 --> 00:23:07,809
reasons we need this like privileged

532
00:23:04,179 --> 00:23:09,399
container but we don't want to then

533
00:23:07,809 --> 00:23:11,620
allow that is effective like a backdoor

534
00:23:09,399 --> 00:23:13,928
for operators and things like that to be

535
00:23:11,620 --> 00:23:16,449
able to escalate onto the host so we're

536
00:23:13,929 --> 00:23:17,590
going to restrict them into remoting but

537
00:23:16,450 --> 00:23:19,870
then that has like you know other

538
00:23:17,590 --> 00:23:21,399
implement implications like they may

539
00:23:19,870 --> 00:23:23,860
make troubleshooting harder and things

540
00:23:21,399 --> 00:23:26,860
like that our pod security policies can

541
00:23:23,860 --> 00:23:29,139
also control the SELinux context that

542
00:23:26,860 --> 00:23:32,949
you give a container control the

543
00:23:29,140 --> 00:23:37,380
up-armored profile second profile so set

544
00:23:32,950 --> 00:23:41,649
comp is a way to limit what Siskel's

545
00:23:37,380 --> 00:23:43,480
container can make so you can control

546
00:23:41,649 --> 00:23:48,010
that so you can like really tighten up

547
00:23:43,480 --> 00:23:49,630
what the container can do the less

548
00:23:48,010 --> 00:23:51,549
syscalls it has like the less sort of

549
00:23:49,630 --> 00:23:55,390
things you can do and this is also

550
00:23:51,549 --> 00:23:58,450
important because the containers that

551
00:23:55,390 --> 00:24:01,360
are running on a node they're all using

552
00:23:58,450 --> 00:24:04,149
the same kernel so if they if there's a

553
00:24:01,360 --> 00:24:05,469
kernel exploit they can leverage then

554
00:24:04,149 --> 00:24:07,750
they can effectively break out of that

555
00:24:05,470 --> 00:24:10,419
container and and break into the host

556
00:24:07,750 --> 00:24:13,000
and then all the containers that are

557
00:24:10,419 --> 00:24:14,230
running on at host they can they can

558
00:24:13,000 --> 00:24:19,990
start to interact with everything start

559
00:24:14,230 --> 00:24:22,510
to read so so if if you have limited

560
00:24:19,990 --> 00:24:24,159
what's his calls they can call if they

561
00:24:22,510 --> 00:24:26,700
can't call the sis call that has it's

562
00:24:24,159 --> 00:24:28,049
like vulnerability then they can't

563
00:24:26,700 --> 00:24:30,509
even though that kernel is vulnerable

564
00:24:28,049 --> 00:24:32,309
they don't have access to it so it's

565
00:24:30,509 --> 00:24:34,320
very it's very good very powerful

566
00:24:32,309 --> 00:24:36,619
mechanism to use and then you also have

567
00:24:34,320 --> 00:24:41,039
this control profile which is also

568
00:24:36,619 --> 00:24:45,149
changes our settings effectively so a

569
00:24:41,039 --> 00:24:47,399
really useful resource is the center for

570
00:24:45,149 --> 00:24:49,498
internet security so I guess they make

571
00:24:47,399 --> 00:24:52,109
many benchmarks for various things and

572
00:24:49,499 --> 00:24:53,519
they make one for Cuba Nettie's and so

573
00:24:52,109 --> 00:24:55,619
this is actually its really good guide

574
00:24:53,519 --> 00:24:58,019
it's like it's quite long I think it's

575
00:24:55,619 --> 00:25:00,749
about like 2 100 odd pages and it goes

576
00:24:58,019 --> 00:25:02,879
through like all of the options that you

577
00:25:00,749 --> 00:25:05,399
can set up in Cuba Nettie's and it goes

578
00:25:02,879 --> 00:25:07,980
into the security implications of that

579
00:25:05,399 --> 00:25:09,689
setting so like if you have left it on

580
00:25:07,980 --> 00:25:12,149
the default or if you set it to various

581
00:25:09,690 --> 00:25:14,309
values what would that do so there's

582
00:25:12,149 --> 00:25:17,369
settings for example to do with like you

583
00:25:14,309 --> 00:25:20,428
know I'll be I'll be able to schedule

584
00:25:17,369 --> 00:25:22,350
privileged pods or not and and so this

585
00:25:20,429 --> 00:25:23,820
will you know describe like you know why

586
00:25:22,350 --> 00:25:25,769
is that a bad thing and like you know

587
00:25:23,820 --> 00:25:30,178
why should you set it to a certain value

588
00:25:25,769 --> 00:25:33,029
and things like that the benchmark it

589
00:25:30,179 --> 00:25:36,090
basically details many many options but

590
00:25:33,029 --> 00:25:37,619
it's it's not it's not sort of designed

591
00:25:36,090 --> 00:25:38,999
with the idea that you're trying to get

592
00:25:37,619 --> 00:25:43,019
a hundred cent pass rate for this

593
00:25:38,999 --> 00:25:44,249
benchmark if you if you used like all of

594
00:25:43,019 --> 00:25:46,590
the settings to the maximum security

595
00:25:44,249 --> 00:25:48,090
area so they sort of recommend you'd

596
00:25:46,590 --> 00:25:51,178
probably then end up with a cluster that

597
00:25:48,090 --> 00:25:52,499
doesn't work so you have to take it with

598
00:25:51,179 --> 00:25:55,049
a grain of salt

599
00:25:52,499 --> 00:25:58,799
read read it like use it as a as a

600
00:25:55,049 --> 00:26:01,559
resource to to educate you on points

601
00:25:58,799 --> 00:26:03,359
that you may not know and then make a

602
00:26:01,559 --> 00:26:05,129
decision like whether it makes sense to

603
00:26:03,359 --> 00:26:07,080
enable this feature or disable it or

604
00:26:05,129 --> 00:26:10,859
like what sort of value to set it to and

605
00:26:07,080 --> 00:26:14,789
things like that there's also a very

606
00:26:10,859 --> 00:26:17,519
interesting project called open policy

607
00:26:14,789 --> 00:26:19,529
agent and this is like agnostic it's not

608
00:26:17,519 --> 00:26:22,619
i like limited to communities you can

609
00:26:19,529 --> 00:26:26,179
use it for anything really and it allows

610
00:26:22,619 --> 00:26:28,139
you to do policy as code so you can

611
00:26:26,179 --> 00:26:30,929
using their own like domain-specific

612
00:26:28,139 --> 00:26:33,709
language you can define your policies

613
00:26:30,929 --> 00:26:38,519
you can you can say various things like

614
00:26:33,710 --> 00:26:40,350
users from this team are allowed to are

615
00:26:38,519 --> 00:26:42,240
allowed to like

616
00:26:40,350 --> 00:26:43,620
schedule these sort of pods or users

617
00:26:42,240 --> 00:26:45,390
from this team are allowed to connect to

618
00:26:43,620 --> 00:26:47,820
these sort of resources and various

619
00:26:45,390 --> 00:26:51,419
things like that and you within Cuba

620
00:26:47,820 --> 00:26:54,120
Nettie's you can set up some emission

621
00:26:51,419 --> 00:26:56,940
controllers that will then talk to OPA

622
00:26:54,120 --> 00:27:00,120
and run through your rules and so

623
00:26:56,940 --> 00:27:04,380
anytime like someone's like trying to

624
00:27:00,120 --> 00:27:06,120
say for example schedule a pod then we

625
00:27:04,380 --> 00:27:07,530
have OPA you can be like well who's

626
00:27:06,120 --> 00:27:09,299
trying to do it like where are they from

627
00:27:07,530 --> 00:27:10,710
like what time of day is it or any sort

628
00:27:09,299 --> 00:27:13,350
of like rules you want to make up and

629
00:27:10,710 --> 00:27:15,929
then implement that and have that sort

630
00:27:13,350 --> 00:27:19,049
of control so it allows you to implement

631
00:27:15,929 --> 00:27:21,659
your own business rules and the nice

632
00:27:19,049 --> 00:27:23,280
thing about it is because it's like

633
00:27:21,659 --> 00:27:24,510
independent you can use it not just in

634
00:27:23,280 --> 00:27:26,940
Cuban Eddie's but you can use it in

635
00:27:24,510 --> 00:27:30,419
other things as well so like other parts

636
00:27:26,940 --> 00:27:35,100
of like your CI CD pipeline and your any

637
00:27:30,419 --> 00:27:36,809
various like DevOps tools you can set up

638
00:27:35,100 --> 00:27:39,750
service measures so I spoke about

639
00:27:36,809 --> 00:27:43,110
earlier how the networking within Cuban

640
00:27:39,750 --> 00:27:45,230
Eddie's by default is very flat you can

641
00:27:43,110 --> 00:27:48,149
get service measures or there's other

642
00:27:45,230 --> 00:27:50,250
networking mechanisms you can use but

643
00:27:48,150 --> 00:27:52,530
one service mesh that I quite like is

644
00:27:50,250 --> 00:27:55,530
sto it's also another project out of

645
00:27:52,530 --> 00:27:59,309
Google originally there's several others

646
00:27:55,530 --> 00:28:01,110
is do is my personal favorite it allows

647
00:27:59,309 --> 00:28:04,080
you to set up network security policies

648
00:28:01,110 --> 00:28:05,479
so you can then restrict the network

649
00:28:04,080 --> 00:28:07,320
communication their pods can make

650
00:28:05,480 --> 00:28:09,630
restrict them from me able to talk to

651
00:28:07,320 --> 00:28:11,700
other pods other containers restrict

652
00:28:09,630 --> 00:28:13,950
them from being able to talk egress out

653
00:28:11,700 --> 00:28:16,740
to the internet restrict ingress into

654
00:28:13,950 --> 00:28:18,480
your cloths tile restricts them being

655
00:28:16,740 --> 00:28:21,059
able to talk to the control plan and

656
00:28:18,480 --> 00:28:23,880
various other things you don't have to

657
00:28:21,059 --> 00:28:26,820
set up sto like just for your cluster it

658
00:28:23,880 --> 00:28:28,740
can it can be like you can govern like

659
00:28:26,820 --> 00:28:30,539
more than your cluster or it can you can

660
00:28:28,740 --> 00:28:32,549
set it up so it's like pretty much just

661
00:28:30,539 --> 00:28:34,080
controlling all of the traffic within

662
00:28:32,549 --> 00:28:36,210
your cluster and in and out of your

663
00:28:34,080 --> 00:28:38,418
cluster it's very flexible and very

664
00:28:36,210 --> 00:28:38,419
powerful

665
00:28:38,760 --> 00:28:46,590
so CPUs they have liked so we've had

666
00:28:44,970 --> 00:28:49,260
like virtual machines we got containers

667
00:28:46,590 --> 00:28:52,168
there's also secure enclaves so there's

668
00:28:49,260 --> 00:28:53,650
Intel SGX and there's AMD has your

669
00:28:52,169 --> 00:28:57,910
equivalent SUV

670
00:28:53,650 --> 00:29:01,150
and these are these like computing

671
00:28:57,910 --> 00:29:03,670
environments that like even root on the

672
00:29:01,150 --> 00:29:07,210
host like the even like Colonel in the

673
00:29:03,670 --> 00:29:09,990
host operating system can like peer

674
00:29:07,210 --> 00:29:12,280
inside to that secure container and

675
00:29:09,990 --> 00:29:14,530
interact like read its memory or write

676
00:29:12,280 --> 00:29:17,620
its memory and and spy on it and things

677
00:29:14,530 --> 00:29:19,930
like that and it's actually possible to

678
00:29:17,620 --> 00:29:22,659
spin up cuban Eddie's containers docker

679
00:29:19,930 --> 00:29:24,880
containers and etc leveraging these

680
00:29:22,660 --> 00:29:26,650
secure enclaves so there's a couple of

681
00:29:24,880 --> 00:29:30,429
interests in projects as one could

682
00:29:26,650 --> 00:29:33,790
graphene and project golem and they

683
00:29:30,429 --> 00:29:35,110
allow you to effectively quite easily

684
00:29:33,790 --> 00:29:36,520
spin up the container that's going to be

685
00:29:35,110 --> 00:29:39,699
running in this secure Enclave and

686
00:29:36,520 --> 00:29:42,700
that's going to protect it from the host

687
00:29:39,700 --> 00:29:45,820
itself so if you happen to be running

688
00:29:42,700 --> 00:29:49,960
payloads running our workloads in your

689
00:29:45,820 --> 00:29:53,010
cluster and your cluster say like one of

690
00:29:49,960 --> 00:29:56,260
the weaker containers got compromised

691
00:29:53,010 --> 00:29:57,670
and they wouldn't manage to elevate and

692
00:29:56,260 --> 00:29:59,170
get access into the hosts

693
00:29:57,670 --> 00:30:01,300
and they then started to look at like

694
00:29:59,170 --> 00:30:02,679
what else is running on this host they

695
00:30:01,300 --> 00:30:04,510
won't be able to actually appear inside

696
00:30:02,679 --> 00:30:06,190
these secure enclaves and so that's

697
00:30:04,510 --> 00:30:10,570
given you another level of protection

698
00:30:06,190 --> 00:30:15,730
another level of isolation tools for

699
00:30:10,570 --> 00:30:17,590
auditing so one one tool it's quite it's

700
00:30:15,730 --> 00:30:22,780
quite good ease cube bench it's by

701
00:30:17,590 --> 00:30:24,760
company code aqua security and they've

702
00:30:22,780 --> 00:30:28,420
got a couple tools one one is Q bench

703
00:30:24,760 --> 00:30:30,850
and Q bench uses that so IES benchmark

704
00:30:28,420 --> 00:30:34,450
that I mentioned earlier and you run it

705
00:30:30,850 --> 00:30:35,980
you can run it on your on your master

706
00:30:34,450 --> 00:30:38,080
nodes and you run it on your worker

707
00:30:35,980 --> 00:30:39,580
nodes and it's going to go through it's

708
00:30:38,080 --> 00:30:41,020
going to look at like what process is

709
00:30:39,580 --> 00:30:42,309
running like what sort of arguments do

710
00:30:41,020 --> 00:30:44,679
they have look at the config and

711
00:30:42,309 --> 00:30:47,320
basically work out like whether it

712
00:30:44,679 --> 00:30:52,200
thinks that you made or don't meet the

713
00:30:47,320 --> 00:30:52,200
various items within that benchmark so

714
00:30:53,250 --> 00:30:58,929
this is like roughly what it looks like

715
00:30:55,809 --> 00:31:02,110
so if you in this example they have

716
00:30:58,929 --> 00:31:03,850
allowed privileged allowed privilege is

717
00:31:02,110 --> 00:31:06,010
allowing privileged containers and so

718
00:31:03,850 --> 00:31:07,419
that's a that's a fail and so it's just

719
00:31:06,010 --> 00:31:09,930
going through just taken

720
00:31:07,420 --> 00:31:12,190
look like what parameters do the

721
00:31:09,930 --> 00:31:17,280
processes have basically and whether

722
00:31:12,190 --> 00:31:17,280
meets all or does not meet the benchmark

723
00:31:18,120 --> 00:31:22,899
another tool by the same company aqua

724
00:31:20,710 --> 00:31:24,970
security is coupon tour it's a similar

725
00:31:22,900 --> 00:31:27,790
tool to Cubans you run it against your

726
00:31:24,970 --> 00:31:29,350
master no it's run it against your your

727
00:31:27,790 --> 00:31:32,430
worker nodes and it's going to again

728
00:31:29,350 --> 00:31:35,260
like tell you what sort of like

729
00:31:32,430 --> 00:31:38,230
misconfigurations and and like security

730
00:31:35,260 --> 00:31:40,480
settings are or are not there and

731
00:31:38,230 --> 00:31:44,940
another interesting tool is mi contained

732
00:31:40,480 --> 00:31:48,430
it's by genuine tools and mi contained

733
00:31:44,940 --> 00:31:50,170
you run it so you like you can you can

734
00:31:48,430 --> 00:31:51,640
spin it up it's a container effectively

735
00:31:50,170 --> 00:31:53,620
so you can spin it up like using docker

736
00:31:51,640 --> 00:31:56,020
you can spin up using your Cuban Eddie's

737
00:31:53,620 --> 00:31:57,629
cluster and it's going to evaluate its

738
00:31:56,020 --> 00:31:59,800
run time it's going to take a look at

739
00:31:57,630 --> 00:32:01,120
does it think it's running in darker

740
00:31:59,800 --> 00:32:04,659
doesn't think it's running in Cuban

741
00:32:01,120 --> 00:32:06,070
Eddie's what container runtime engine

742
00:32:04,660 --> 00:32:07,630
does it think these being used because

743
00:32:06,070 --> 00:32:10,149
is there's not just docker there's

744
00:32:07,630 --> 00:32:11,860
others there's some ones like rocket etc

745
00:32:10,150 --> 00:32:14,400
so it's going to try to work that out

746
00:32:11,860 --> 00:32:17,229
and it's going to try to work out what

747
00:32:14,400 --> 00:32:21,910
Linux capabilities does it have does it

748
00:32:17,230 --> 00:32:23,830
does it have root and what sort of like

749
00:32:21,910 --> 00:32:25,120
syscalls can it make is there any sort

750
00:32:23,830 --> 00:32:30,179
of second filtering is there any

751
00:32:25,120 --> 00:32:32,199
up-armored security profiles or selinux

752
00:32:30,180 --> 00:32:34,600
profiles con texas and things like that

753
00:32:32,200 --> 00:32:36,040
so it's gonna sort of like do a bit of

754
00:32:34,600 --> 00:32:39,159
investigation and try to work out those

755
00:32:36,040 --> 00:32:42,370
sort of things and what's good about

756
00:32:39,160 --> 00:32:43,960
this tool is if you run it on standard

757
00:32:42,370 --> 00:32:46,649
docker and you run it on standard cuban

758
00:32:43,960 --> 00:32:49,090
eddies you'll be surprised to find that

759
00:32:46,650 --> 00:32:52,030
darker actually has better security out

760
00:32:49,090 --> 00:32:54,610
of the box because docker out of the box

761
00:32:52,030 --> 00:32:56,680
will give you a default second profile

762
00:32:54,610 --> 00:33:00,250
and a default up-armored profile and

763
00:32:56,680 --> 00:33:02,080
cuba Nettie's by default won't so if

764
00:33:00,250 --> 00:33:03,370
you're if you've started off with docker

765
00:33:02,080 --> 00:33:05,350
and then you sort of build up and

766
00:33:03,370 --> 00:33:07,600
started to use cuban eddies you may be

767
00:33:05,350 --> 00:33:10,510
surprised to find that it's not as locks

768
00:33:07,600 --> 00:33:13,449
down from that point of view and this is

769
00:33:10,510 --> 00:33:17,860
like a mistake or like an omission a lot

770
00:33:13,450 --> 00:33:19,720
of people have missed and so for that

771
00:33:17,860 --> 00:33:21,240
whole defense-in-depth

772
00:33:19,720 --> 00:33:23,400
you're going to want to

773
00:33:21,240 --> 00:33:25,380
set up your own sitcom profiles you earn

774
00:33:23,400 --> 00:33:27,780
up armored profiles

775
00:33:25,380 --> 00:33:31,200
selinux and things like that like which

776
00:33:27,780 --> 00:33:34,920
other tool you want to use like to try

777
00:33:31,200 --> 00:33:37,530
to ice try to minimize the amount of

778
00:33:34,920 --> 00:33:39,390
access that your containers have to just

779
00:33:37,530 --> 00:33:41,280
what they need so that if they do get

780
00:33:39,390 --> 00:33:47,180
compromised you're limiting what an

781
00:33:41,280 --> 00:33:49,889
attacker can do okay so in conclusion

782
00:33:47,180 --> 00:33:52,650
there's a lot of options like every two

783
00:33:49,890 --> 00:33:55,080
bananas cluster is can be effectively

784
00:33:52,650 --> 00:33:57,210
quite different from from others take

785
00:33:55,080 --> 00:34:00,149
care with the configuration there's all

786
00:33:57,210 --> 00:34:01,800
those options like and the defaults as

787
00:34:00,150 --> 00:34:03,450
well like you have to make make sure

788
00:34:01,800 --> 00:34:06,240
like do the defaults really meet your

789
00:34:03,450 --> 00:34:08,100
needs or you know should you do some

790
00:34:06,240 --> 00:34:11,130
more tightening and more investigation

791
00:34:08,100 --> 00:34:13,319
and look at how can you further secure

792
00:34:11,130 --> 00:34:15,090
your cluster effectively then there's

793
00:34:13,320 --> 00:34:17,700
like several tools and resources so

794
00:34:15,090 --> 00:34:19,320
there's that Cuban eighties benchmark

795
00:34:17,699 --> 00:34:21,419
and there's like various tools will help

796
00:34:19,320 --> 00:34:26,100
you compare your cluster against that

797
00:34:21,420 --> 00:34:27,690
benchmark and just enjoy and embrace the

798
00:34:26,100 --> 00:34:31,920
power of and flexibility of Cuban it is

799
00:34:27,690 --> 00:34:34,350
it's a it's a very good tool so it will

800
00:34:31,920 --> 00:34:36,180
be releasing the slides later so I put a

801
00:34:34,350 --> 00:34:42,330
bunch of references there that you can

802
00:34:36,179 --> 00:34:43,350
grab and so late links to tools and

803
00:34:42,330 --> 00:34:49,580
things like that and links to other

804
00:34:43,350 --> 00:34:49,580
talks so yeah so is there any questions

805
00:34:53,730 --> 00:34:58,559
I say we've got a runner going to a

806
00:34:55,739 --> 00:35:05,189
question out there at the back I can see

807
00:34:58,559 --> 00:35:08,809
the hands these runners they definitely

808
00:35:05,190 --> 00:35:10,880
gonna get fit over the weekend okay

809
00:35:08,809 --> 00:35:14,130
thank you

810
00:35:10,880 --> 00:35:17,040
so thank you for the interesting

811
00:35:14,130 --> 00:35:19,260
presentation now I admit I'm not that

812
00:35:17,040 --> 00:35:21,750
familiar with kubernetes and I don't

813
00:35:19,260 --> 00:35:24,000
know if it's Linux only or if it

814
00:35:21,750 --> 00:35:26,819
supports other node operating systems as

815
00:35:24,000 --> 00:35:29,700
well but when we mentioned the security

816
00:35:26,819 --> 00:35:32,520
options like armor profiles and

817
00:35:29,700 --> 00:35:34,649
psychopaths so forth that's all features

818
00:35:32,520 --> 00:35:37,380
which are inherent to the Linux kernel

819
00:35:34,650 --> 00:35:39,690
so assuming that you can have I don't

820
00:35:37,380 --> 00:35:42,299
know say a Windows node or something

821
00:35:39,690 --> 00:35:48,990
does it also support like the equivalent

822
00:35:42,299 --> 00:35:52,349
mechanisms in Windows so you can so

823
00:35:48,990 --> 00:35:53,970
daughter can run on Windows and you can

824
00:35:52,349 --> 00:35:56,430
actually set up like a Cuban a DS

825
00:35:53,970 --> 00:36:01,200
cluster using docker for Windows stuff

826
00:35:56,430 --> 00:36:03,149
like that so i i'm not actually certain

827
00:36:01,200 --> 00:36:05,098
if you can have like a worker node like

828
00:36:03,150 --> 00:36:09,150
a Windows worker node in a Cuban Indies

829
00:36:05,099 --> 00:36:11,099
cluster and yeah a lot of a lot of those

830
00:36:09,150 --> 00:36:12,869
security mechanisms are talking about

831
00:36:11,099 --> 00:36:15,150
like comm selinux

832
00:36:12,869 --> 00:36:18,030
and our Palmer and all that they're all

833
00:36:15,150 --> 00:36:20,520
Linux Pacific security mechanisms and so

834
00:36:18,030 --> 00:36:22,799
yeah Windows doesn't have them if you

835
00:36:20,520 --> 00:36:25,530
did manage to have like a Windows worker

836
00:36:22,799 --> 00:36:29,759
node there was like running containers

837
00:36:25,530 --> 00:36:31,619
directly on Windows Dan yeah you'd have

838
00:36:29,760 --> 00:36:39,119
to you'd have to use like Windows

839
00:36:31,619 --> 00:36:42,890
security mechanisms there's a question

840
00:36:39,119 --> 00:36:42,890
just next to that yet you've got him

841
00:36:44,990 --> 00:36:53,910
sorry it is question over on the on this

842
00:36:47,549 --> 00:36:55,980
side over here yeah want me to go okay

843
00:36:53,910 --> 00:36:59,040
so do you have any experience with

844
00:36:55,980 --> 00:37:01,770
people migrating from Apache me sauce to

845
00:36:59,040 --> 00:37:03,660
kubernetes because from my observation a

846
00:37:01,770 --> 00:37:06,270
lot of the security controls that

847
00:37:03,660 --> 00:37:07,410
kubernetes applies me sauce doesn't it

848
00:37:06,270 --> 00:37:12,029
just deals with the sched

849
00:37:07,410 --> 00:37:14,250
and resource handling yes I I don't have

850
00:37:12,029 --> 00:37:18,630
a lot of experience Apache Apache

851
00:37:14,250 --> 00:37:20,430
missiles so yeah and I haven't I haven't

852
00:37:18,630 --> 00:37:24,210
experienced people migrating from that

853
00:37:20,430 --> 00:37:26,250
to Cuba Nettie's yeah I'm not really

854
00:37:24,210 --> 00:37:28,380
sure of like what security mechanisms

855
00:37:26,250 --> 00:37:31,380
meat sauce has I do think that it is

856
00:37:28,380 --> 00:37:33,569
purely like more or like sort of limited

857
00:37:31,380 --> 00:37:36,240
in scope to compared to Cuban Eddie's I

858
00:37:33,569 --> 00:37:39,058
think it is more purely about scheduling

859
00:37:36,240 --> 00:37:43,078
and it's open-ended as to like how you

860
00:37:39,059 --> 00:37:45,359
control other parts so I presume there's

861
00:37:43,079 --> 00:37:47,819
ways to secure things but it may not be

862
00:37:45,359 --> 00:37:57,839
is like its integrated as sort of like

863
00:37:47,819 --> 00:38:02,308
easy as as Cuban Eddie's so yeah we get

864
00:37:57,839 --> 00:38:03,930
a bike to the front to boil it so just

865
00:38:02,309 --> 00:38:06,240
one of the earlier questions about

866
00:38:03,930 --> 00:38:07,710
running windows server containers they

867
00:38:06,240 --> 00:38:12,180
can be in the worker nodes for a

868
00:38:07,710 --> 00:38:14,190
kubernetes cluster if you have hosted

869
00:38:12,180 --> 00:38:16,680
kubernetes how much of your sort of I

870
00:38:14,190 --> 00:38:19,259
guess security advice applies or is that

871
00:38:16,680 --> 00:38:22,759
hosted kubernetes you don't worry as

872
00:38:19,259 --> 00:38:26,329
much about it so we've hosted kubernetes

873
00:38:22,759 --> 00:38:30,930
you have less control over the cluster

874
00:38:26,329 --> 00:38:32,880
so yeah you you have less control and

875
00:38:30,930 --> 00:38:35,640
it's more up to like the provider of

876
00:38:32,880 --> 00:38:36,720
that hosted communities cluster to like

877
00:38:35,640 --> 00:38:38,490
how they have locked it down and

878
00:38:36,720 --> 00:38:40,769
configured you may have like some

879
00:38:38,490 --> 00:38:43,109
control but you obviously have a lot

880
00:38:40,769 --> 00:38:46,019
less than if you was your own personal

881
00:38:43,109 --> 00:38:48,119
kubernetes cluster and so it's also

882
00:38:46,019 --> 00:38:51,899
quite interesting like for example when

883
00:38:48,119 --> 00:38:52,559
in the 20 20 18 when that when that

884
00:38:51,900 --> 00:38:54,269
privilege

885
00:38:52,559 --> 00:38:59,039
elevation privilege vulnerability came

886
00:38:54,269 --> 00:39:00,660
out you could see the public cloud can

887
00:38:59,039 --> 00:39:03,420
clusters being upgraded

888
00:39:00,660 --> 00:39:06,990
so they took them I think roughly like

889
00:39:03,420 --> 00:39:09,119
took AWS I think roughly 48 hours so

890
00:39:06,990 --> 00:39:11,578
there's like trade-offs if you if you

891
00:39:09,119 --> 00:39:13,950
use a cloud

892
00:39:11,579 --> 00:39:15,240
Kuban communities cluster it's they've

893
00:39:13,950 --> 00:39:16,769
set it up and their management for you

894
00:39:15,240 --> 00:39:18,328
so yeah basically outsource and a bunch

895
00:39:16,769 --> 00:39:20,740
of your activities you don't have to

896
00:39:18,329 --> 00:39:23,890
care about it enough to sort of like

897
00:39:20,740 --> 00:39:25,270
work on that part but you you then just

898
00:39:23,890 --> 00:39:29,790
have less flexibility you have less

899
00:39:25,270 --> 00:39:29,790
control over mr. vu

900
00:39:30,300 --> 00:39:35,650
hi thanks for the presentation I had a

901
00:39:33,430 --> 00:39:37,390
quick question about general AB security

902
00:39:35,650 --> 00:39:40,570
when developing applications giving

903
00:39:37,390 --> 00:39:42,069
these so usually when you think talk

904
00:39:40,570 --> 00:39:43,090
about general AB security also think

905
00:39:42,070 --> 00:39:46,570
about things like transport layer

906
00:39:43,090 --> 00:39:49,690
security and access management within

907
00:39:46,570 --> 00:39:51,940
the application so what's your opinion

908
00:39:49,690 --> 00:39:54,610
on putting TLS on containers that are

909
00:39:51,940 --> 00:39:56,650
deployed as within clusters because when

910
00:39:54,610 --> 00:39:58,090
I see examples online we usually don't

911
00:39:56,650 --> 00:40:00,190
do that all the applications running on

912
00:39:58,090 --> 00:40:06,760
port 80 unencrypted traffic within the

913
00:40:00,190 --> 00:40:09,730
cluster itself yeah so it's interesting

914
00:40:06,760 --> 00:40:11,800
question so some sometimes people yeah

915
00:40:09,730 --> 00:40:13,690
they won't care about unencrypted

916
00:40:11,800 --> 00:40:15,369
traffic within their cluster

917
00:40:13,690 --> 00:40:16,960
they'll say like these this is this

918
00:40:15,369 --> 00:40:19,480
trust hood so we don't care they can

919
00:40:16,960 --> 00:40:23,050
talk to each other I personally feel

920
00:40:19,480 --> 00:40:25,270
that as long as you have like restricted

921
00:40:23,050 --> 00:40:26,970
it down so that say for example a web

922
00:40:25,270 --> 00:40:29,950
application needs to talk to a database

923
00:40:26,970 --> 00:40:31,359
really only that container should be

924
00:40:29,950 --> 00:40:33,368
able to talk to that database container

925
00:40:31,359 --> 00:40:36,609
and not like any container not any pod

926
00:40:33,369 --> 00:40:38,320
so I would want to like limit that so

927
00:40:36,609 --> 00:40:40,600
that you're not just trusting like all

928
00:40:38,320 --> 00:40:42,670
of the inside of your cluster all the

929
00:40:40,600 --> 00:40:44,350
inside of a node you're you really only

930
00:40:42,670 --> 00:40:46,390
trust in one container to another

931
00:40:44,350 --> 00:40:48,640
container which are meant to talk to

932
00:40:46,390 --> 00:40:51,609
each other I personally would also have

933
00:40:48,640 --> 00:40:53,770
encryption I sort of feel like why not

934
00:40:51,609 --> 00:40:57,490
and computing is relatively cheap so

935
00:40:53,770 --> 00:40:59,980
like there's small overheads but you may

936
00:40:57,490 --> 00:41:02,020
you may have performance reasons and

937
00:40:59,980 --> 00:41:04,540
things like that or you may want to be

938
00:41:02,020 --> 00:41:06,100
able to sleep on the traffic or things

939
00:41:04,540 --> 00:41:08,220
like that so you there's like some

940
00:41:06,100 --> 00:41:10,920
trade-offs so you need to sort of

941
00:41:08,220 --> 00:41:13,868
consider what is best for your use case

942
00:41:10,920 --> 00:41:15,280
we have tools like sto you can make sure

943
00:41:13,869 --> 00:41:16,540
that all the containers are doing

944
00:41:15,280 --> 00:41:19,540
encryption to each other and things like

945
00:41:16,540 --> 00:41:25,119
that so that's one of the reasons why I

946
00:41:19,540 --> 00:41:28,680
like and effectively recommend you do we

947
00:41:25,119 --> 00:41:31,090
have any more questions in the audience

948
00:41:28,680 --> 00:41:32,419
well let's thank Ben for a great

949
00:41:31,090 --> 00:41:32,650
presentation

950
00:41:32,420 --> 00:41:35,729
you

951
00:41:32,650 --> 00:41:35,729
[Music]

