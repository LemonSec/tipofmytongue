1
00:00:00,160 --> 00:00:02,000
we are very pleased to introduce you

2
00:00:02,000 --> 00:00:03,280
christopher bella

3
00:00:03,280 --> 00:00:06,160
who will be talking about easy lpes and

4
00:00:06,160 --> 00:00:08,480
common software vulnerabilities so let's

5
00:00:08,480 --> 00:00:10,000
all welcome christopher to the stage

6
00:00:10,000 --> 00:00:17,440
with a big round of applause

7
00:00:17,440 --> 00:00:20,320
thank you and um yeah so my name is

8
00:00:20,320 --> 00:00:22,560
christopher and i'm here to talk about

9
00:00:22,560 --> 00:00:24,480
a lot of the common vulnerabilities in

10
00:00:24,480 --> 00:00:26,320
software that i find today

11
00:00:26,320 --> 00:00:29,359
and how some of them are very trivial to

12
00:00:29,359 --> 00:00:31,279
do things like privilege escalation on

13
00:00:31,279 --> 00:00:33,120
modern windows

14
00:00:33,120 --> 00:00:35,520
as a day job i'm a security researcher

15
00:00:35,520 --> 00:00:37,040
at microsoft where i write

16
00:00:37,040 --> 00:00:40,239
fuzzers for the hyper-v hypervisor and

17
00:00:40,239 --> 00:00:41,760
i've got my twitter up there as well

18
00:00:41,760 --> 00:00:43,200
where you can shoot me questions about

19
00:00:43,200 --> 00:00:43,520
this

20
00:00:43,520 --> 00:00:46,640
even after the talk and i guess a bit of

21
00:00:46,640 --> 00:00:48,960
background as to why

22
00:00:48,960 --> 00:00:51,520
i want to present this information

23
00:00:51,520 --> 00:00:52,160
during

24
00:00:52,160 --> 00:00:54,320
work and even in personal time like

25
00:00:54,320 --> 00:00:56,320
before even getting into vulnerability

26
00:00:56,320 --> 00:00:57,760
research

27
00:00:57,760 --> 00:00:59,600
a lot of the talks that i've seen

28
00:00:59,600 --> 00:01:01,600
revolve around things like complex

29
00:01:01,600 --> 00:01:03,760
memory corruption vulnerabilities

30
00:01:03,760 --> 00:01:06,479
um or things that require like maybe

31
00:01:06,479 --> 00:01:08,560
three months six months plus of deep

32
00:01:08,560 --> 00:01:11,200
reverse engineering effort

33
00:01:11,200 --> 00:01:13,680
things like writing dealing with custom

34
00:01:13,680 --> 00:01:15,840
hypervisors for housing emulators for

35
00:01:15,840 --> 00:01:17,439
fuzzing

36
00:01:17,439 --> 00:01:20,720
all these kind of complex environments

37
00:01:20,720 --> 00:01:21,759
as well

38
00:01:21,759 --> 00:01:24,400
and one of the common things i heard

39
00:01:24,400 --> 00:01:25,759
before knowing anything about

40
00:01:25,759 --> 00:01:27,119
vulnerability research

41
00:01:27,119 --> 00:01:30,400
starting out my career in security in

42
00:01:30,400 --> 00:01:31,360
general

43
00:01:31,360 --> 00:01:35,119
was kind of this complexity around

44
00:01:35,119 --> 00:01:36,799
vulnerability research

45
00:01:36,799 --> 00:01:38,960
and how finding zero days is getting

46
00:01:38,960 --> 00:01:40,720
harder and harder

47
00:01:40,720 --> 00:01:42,000
especially with the advent of

48
00:01:42,000 --> 00:01:43,920
mitigations like aslr

49
00:01:43,920 --> 00:01:46,479
and dep and things like that and when

50
00:01:46,479 --> 00:01:47,520
you browse like

51
00:01:47,520 --> 00:01:51,680
zdi and and advisories like that you see

52
00:01:51,680 --> 00:01:55,119
heaps of software volumes coming out in

53
00:01:55,119 --> 00:01:58,000
common software like adobe and that day

54
00:01:58,000 --> 00:01:59,040
after day

55
00:01:59,040 --> 00:02:00,479
and you think that you know these sorts

56
00:02:00,479 --> 00:02:02,240
of things are being looked at or being

57
00:02:02,240 --> 00:02:02,960
fuzzed

58
00:02:02,960 --> 00:02:06,640
by large companies with resources of

59
00:02:06,640 --> 00:02:07,200
like

60
00:02:07,200 --> 00:02:09,360
500 plus calls in the cloud and they're

61
00:02:09,360 --> 00:02:11,038
just fuzzing away and all these sorts of

62
00:02:11,038 --> 00:02:11,680
things

63
00:02:11,680 --> 00:02:14,720
that kind of leaves not much room for

64
00:02:14,720 --> 00:02:18,319
i guess vulnerabilities that are very

65
00:02:18,319 --> 00:02:20,400
simple and easy and can be potentially

66
00:02:20,400 --> 00:02:22,319
quick to find for people who are just

67
00:02:22,319 --> 00:02:23,680
getting into the space

68
00:02:23,680 --> 00:02:27,200
or aren't as experienced but from my

69
00:02:27,200 --> 00:02:28,640
experience there are

70
00:02:28,640 --> 00:02:31,760
entire categories of vulnerabilities not

71
00:02:31,760 --> 00:02:32,160
just

72
00:02:32,160 --> 00:02:34,640
like a bug that's not exploitable that's

73
00:02:34,640 --> 00:02:36,480
useless and no one cares about

74
00:02:36,480 --> 00:02:38,800
but actual privilege escalation bugs in

75
00:02:38,800 --> 00:02:40,800
these prominent software

76
00:02:40,800 --> 00:02:43,040
that go unnoticed and you can find

77
00:02:43,040 --> 00:02:46,319
pretty easily even today

78
00:02:46,319 --> 00:02:48,480
so that kind of set out a set of goals

79
00:02:48,480 --> 00:02:50,480
for the types of bugs that i wanted to

80
00:02:50,480 --> 00:02:52,160
find and how i wanted to find them as

81
00:02:52,160 --> 00:02:53,120
part of this little

82
00:02:53,120 --> 00:02:56,080
i guess exercise and the goal was to

83
00:02:56,080 --> 00:02:56,640
find

84
00:02:56,640 --> 00:02:58,720
find them fast find zero days fast i

85
00:02:58,720 --> 00:03:00,319
don't want to spend

86
00:03:00,319 --> 00:03:02,319
of course i could spend months reversing

87
00:03:02,319 --> 00:03:04,400
something writing a fuzzing harness for

88
00:03:04,400 --> 00:03:04,640
it

89
00:03:04,640 --> 00:03:07,599
or just manually understanding its logic

90
00:03:07,599 --> 00:03:09,360
mapping it out things like that

91
00:03:09,360 --> 00:03:12,800
but i wanted to find bugs that i could

92
00:03:12,800 --> 00:03:15,760
discover in hours or days

93
00:03:15,760 --> 00:03:18,000
maybe even minutes i mean one of the

94
00:03:18,000 --> 00:03:18,800
zero days

95
00:03:18,800 --> 00:03:21,680
that i'll be demoing later i found in

96
00:03:21,680 --> 00:03:23,120
maybe half an hour of looking on a

97
00:03:23,120 --> 00:03:24,000
system

98
00:03:24,000 --> 00:03:26,239
if that so some of these if you know

99
00:03:26,239 --> 00:03:27,200
what to look for

100
00:03:27,200 --> 00:03:30,000
are extremely easy to find and they're

101
00:03:30,000 --> 00:03:32,159
also easy to exploit

102
00:03:32,159 --> 00:03:34,239
you can go from bug to actual

103
00:03:34,239 --> 00:03:35,680
exploitation

104
00:03:35,680 --> 00:03:38,319
and get that privesque for example in a

105
00:03:38,319 --> 00:03:40,640
very short amount of time

106
00:03:40,640 --> 00:03:43,599
that kind of trials into the speed thing

107
00:03:43,599 --> 00:03:44,640
i don't want to

108
00:03:44,640 --> 00:03:46,799
well for this exercise i didn't want to

109
00:03:46,799 --> 00:03:48,720
find a bug that would then take me six

110
00:03:48,720 --> 00:03:49,840
months plus

111
00:03:49,840 --> 00:03:53,200
to actually have an exploit in so we're

112
00:03:53,200 --> 00:03:55,680
kind of focusing on speed here

113
00:03:55,680 --> 00:03:58,799
and when i think of these bugs i think

114
00:03:58,799 --> 00:03:59,599
about like

115
00:03:59,599 --> 00:04:02,400
the bugs that i would have enjoyed uh

116
00:04:02,400 --> 00:04:03,599
knowing about if

117
00:04:03,599 --> 00:04:05,920
back when i was doing red teaming for

118
00:04:05,920 --> 00:04:07,599
example where you have like limited time

119
00:04:07,599 --> 00:04:08,640
on engagement

120
00:04:08,640 --> 00:04:10,720
and you want to prove ask on a box and

121
00:04:10,720 --> 00:04:12,239
you don't really have the luxury of

122
00:04:12,239 --> 00:04:14,480
spending weeks and months diving deep

123
00:04:14,480 --> 00:04:15,680
into research

124
00:04:15,680 --> 00:04:18,238
so these are the types of things where

125
00:04:18,238 --> 00:04:19,680
you could potentially

126
00:04:19,680 --> 00:04:21,600
find these bugs very quickly and use it

127
00:04:21,600 --> 00:04:23,759
even live on engagement

128
00:04:23,759 --> 00:04:25,600
and i'll be demoing these towards the

129
00:04:25,600 --> 00:04:28,320
end of the slides as well

130
00:04:28,320 --> 00:04:30,400
so that kind of leads naturally into

131
00:04:30,400 --> 00:04:33,360
focusing on logic vulnerabilities

132
00:04:33,360 --> 00:04:35,919
mostly because we're targeting like in

133
00:04:35,919 --> 00:04:37,680
my examples we're targeting modern

134
00:04:37,680 --> 00:04:39,040
windows 10

135
00:04:39,040 --> 00:04:42,000
so a lot of the if you go for memory

136
00:04:42,000 --> 00:04:43,759
corruptions you're likely going to have

137
00:04:43,759 --> 00:04:44,479
to deal

138
00:04:44,479 --> 00:04:46,800
with things like aslr and deb or if it's

139
00:04:46,800 --> 00:04:48,400
a heap exploit you're gonna have to

140
00:04:48,400 --> 00:04:50,000
focus on heat grooming and

141
00:04:50,000 --> 00:04:52,400
all those things just take too much time

142
00:04:52,400 --> 00:04:53,280
to turn

143
00:04:53,280 --> 00:04:57,120
a bug to an exploit for the most part so

144
00:04:57,120 --> 00:04:59,120
i kind of wanted to focus or believe

145
00:04:59,120 --> 00:05:01,600
that i had more luck focusing on logic

146
00:05:01,600 --> 00:05:04,720
bonds and this also

147
00:05:04,720 --> 00:05:07,680
ties in to how lots of people do von

148
00:05:07,680 --> 00:05:08,880
research

149
00:05:08,880 --> 00:05:10,479
especially companies like google project

150
00:05:10,479 --> 00:05:12,160
zero and that

151
00:05:12,160 --> 00:05:14,800
or oss fuzz and that would focus on

152
00:05:14,800 --> 00:05:15,600
fuzzing

153
00:05:15,600 --> 00:05:19,120
or finding bugs in adobe or finding bugs

154
00:05:19,120 --> 00:05:22,560
in you know anything else you do get the

155
00:05:22,560 --> 00:05:23,759
logic vons there still

156
00:05:23,759 --> 00:05:26,320
definitely but a lot of the vons you'll

157
00:05:26,320 --> 00:05:27,520
see will be

158
00:05:27,520 --> 00:05:29,520
memory corruption volumes there will be

159
00:05:29,520 --> 00:05:31,840
things where they can write fuzzers for

160
00:05:31,840 --> 00:05:33,520
spin it up in the cloud and run that for

161
00:05:33,520 --> 00:05:35,120
like three months plus

162
00:05:35,120 --> 00:05:37,919
um which does make it a little bit more

163
00:05:37,919 --> 00:05:39,440
difficult to find

164
00:05:39,440 --> 00:05:41,520
uh memory corruption phones although i

165
00:05:41,520 --> 00:05:43,440
will say there are still plenty of

166
00:05:43,440 --> 00:05:44,880
memory corruption volumes

167
00:05:44,880 --> 00:05:47,840
in lots of software defined um so it's

168
00:05:47,840 --> 00:05:48,880
not so much

169
00:05:48,880 --> 00:05:52,080
the lack of them but more so for speed

170
00:05:52,080 --> 00:05:54,639
um that i decided to focus on logic

171
00:05:54,639 --> 00:05:57,440
vulnerabilities

172
00:05:58,000 --> 00:05:59,600
and when talking about logic

173
00:05:59,600 --> 00:06:02,080
vulnerabilities there's lots of types of

174
00:06:02,080 --> 00:06:03,919
logic vulnerabilities

175
00:06:03,919 --> 00:06:05,759
things from like read permission checks

176
00:06:05,759 --> 00:06:08,000
and things like that

177
00:06:08,000 --> 00:06:10,080
one of my favorite ones is bad

178
00:06:10,080 --> 00:06:11,280
assumptions

179
00:06:11,280 --> 00:06:13,759
which is kind of a very broad category i

180
00:06:13,759 --> 00:06:15,199
guess

181
00:06:15,199 --> 00:06:18,720
but one example of it that is very

182
00:06:18,720 --> 00:06:22,560
very common is related to file io

183
00:06:22,560 --> 00:06:25,520
so an example here a little snippet

184
00:06:25,520 --> 00:06:27,280
right where we're opening a

185
00:06:27,280 --> 00:06:29,600
hard-coded file path and writing to it

186
00:06:29,600 --> 00:06:30,960
twice

187
00:06:30,960 --> 00:06:33,840
an assumption here may be that that file

188
00:06:33,840 --> 00:06:36,319
being open is the exact same file

189
00:06:36,319 --> 00:06:39,360
in both cases or even that that file

190
00:06:39,360 --> 00:06:41,680
actually does live in c drive program

191
00:06:41,680 --> 00:06:43,360
data my folder

192
00:06:43,360 --> 00:06:45,759
which i guess technically may be the

193
00:06:45,759 --> 00:06:46,479
case

194
00:06:46,479 --> 00:06:49,120
but due to the fact that windows and

195
00:06:49,120 --> 00:06:50,720
other modern operating systems

196
00:06:50,720 --> 00:06:52,720
have file redirections in the forms of

197
00:06:52,720 --> 00:06:54,639
sim links and junctions

198
00:06:54,639 --> 00:06:57,120
and hard links and things like that um c

199
00:06:57,120 --> 00:06:58,720
drive program data my folder could

200
00:06:58,720 --> 00:07:00,400
potentially redirect to c

201
00:07:00,400 --> 00:07:02,479
drive windows system 32 and then

202
00:07:02,479 --> 00:07:04,560
suddenly your file1.txt that you're

203
00:07:04,560 --> 00:07:05,120
opening

204
00:07:05,120 --> 00:07:08,240
actually lives in system32 not in

205
00:07:08,240 --> 00:07:10,319
program data as expected

206
00:07:10,319 --> 00:07:12,160
that's just an example of like an

207
00:07:12,160 --> 00:07:14,319
assumption that a program may have

208
00:07:14,319 --> 00:07:18,160
that could be a security vulnerability

209
00:07:18,160 --> 00:07:20,240
if it's something that they haven't

210
00:07:20,240 --> 00:07:24,240
sufficiently accounted for or thought of

211
00:07:24,240 --> 00:07:26,880
and so in general when looking at what's

212
00:07:26,880 --> 00:07:28,080
in a zero day

213
00:07:28,080 --> 00:07:30,240
um there's a few components right we

214
00:07:30,240 --> 00:07:31,840
need to have a component to interact

215
00:07:31,840 --> 00:07:33,039
with

216
00:07:33,039 --> 00:07:34,960
so if we take this snippet for example

217
00:07:34,960 --> 00:07:36,639
like the principle or service we need

218
00:07:36,639 --> 00:07:37,520
some way of

219
00:07:37,520 --> 00:07:40,479
interacting with that component via some

220
00:07:40,479 --> 00:07:41,360
method maybe

221
00:07:41,360 --> 00:07:45,120
some sort of ipc shared memory file io

222
00:07:45,120 --> 00:07:47,039
something like that and then some sort

223
00:07:47,039 --> 00:07:48,400
of internals knowledge

224
00:07:48,400 --> 00:07:50,400
as to how we can abuse some of those

225
00:07:50,400 --> 00:07:51,680
behaviors via

226
00:07:51,680 --> 00:07:54,160
you know a sim link redirection or some

227
00:07:54,160 --> 00:07:55,680
other logic issue

228
00:07:55,680 --> 00:07:58,160
and then how we can turn that into a bug

229
00:07:58,160 --> 00:07:59,599
and when we're looking at

230
00:07:59,599 --> 00:08:02,000
the interaction part there's lots of

231
00:08:02,000 --> 00:08:04,639
common attack surfaces in processes

232
00:08:04,639 --> 00:08:09,199
and this mainly relates to how processes

233
00:08:09,199 --> 00:08:12,080
interact with each other for example if

234
00:08:12,080 --> 00:08:13,360
i were to install

235
00:08:13,360 --> 00:08:16,720
an antivirus on my computer most of the

236
00:08:16,720 --> 00:08:17,199
time

237
00:08:17,199 --> 00:08:19,440
it's not going to be just one executable

238
00:08:19,440 --> 00:08:20,400
and that's it

239
00:08:20,400 --> 00:08:22,000
typically there may even be like five

240
00:08:22,000 --> 00:08:25,199
exes and a few drivers

241
00:08:25,199 --> 00:08:26,960
and various other components that get

242
00:08:26,960 --> 00:08:29,599
installed alongside that

243
00:08:29,599 --> 00:08:31,759
and they need some way to interact with

244
00:08:31,759 --> 00:08:32,640
each other

245
00:08:32,640 --> 00:08:36,240
that can be via com rpc shared memory

246
00:08:36,240 --> 00:08:40,159
name pipes just file io in general

247
00:08:40,159 --> 00:08:42,320
device drivers and various other

248
00:08:42,320 --> 00:08:43,440
mechanisms

249
00:08:43,440 --> 00:08:46,560
and all these ways of communicating

250
00:08:46,560 --> 00:08:48,640
between processors

251
00:08:48,640 --> 00:08:51,040
can also be leveraged for say an

252
00:08:51,040 --> 00:08:53,360
unprivileged process that we create

253
00:08:53,360 --> 00:08:55,120
to interact with a more privileged

254
00:08:55,120 --> 00:08:56,880
process running a system

255
00:08:56,880 --> 00:09:00,160
for example this all obviously depends

256
00:09:00,160 --> 00:09:01,600
on things like

257
00:09:01,600 --> 00:09:04,720
what permissions are set on things like

258
00:09:04,720 --> 00:09:06,720
these name pipes or these shared memory

259
00:09:06,720 --> 00:09:09,200
sections that will determine if we can

260
00:09:09,200 --> 00:09:10,000
interact with them

261
00:09:10,000 --> 00:09:13,279
and how we can interact with them but

262
00:09:13,279 --> 00:09:15,120
they are definitely a lot of common

263
00:09:15,120 --> 00:09:16,480
attack services that i see

264
00:09:16,480 --> 00:09:19,360
in a lot of software and commonly you'll

265
00:09:19,360 --> 00:09:20,800
find that this software

266
00:09:20,800 --> 00:09:23,360
doesn't adequately adequately have

267
00:09:23,360 --> 00:09:24,959
permission checks in place for these

268
00:09:24,959 --> 00:09:27,440
sorts of things

269
00:09:27,440 --> 00:09:29,040
and when it comes to windows we're kind

270
00:09:29,040 --> 00:09:31,839
of lucky that a lot of the tooling

271
00:09:31,839 --> 00:09:34,320
for finding this attack surface and

272
00:09:34,320 --> 00:09:36,480
enumerating it

273
00:09:36,480 --> 00:09:39,760
is public already we have like process

274
00:09:39,760 --> 00:09:40,480
hacker

275
00:09:40,480 --> 00:09:43,760
listed we have tools from google project

276
00:09:43,760 --> 00:09:44,800
zero

277
00:09:44,800 --> 00:09:46,560
in their sandbox attack surface analysis

278
00:09:46,560 --> 00:09:49,360
toolset we have the sysinternal suite as

279
00:09:49,360 --> 00:09:50,880
a whole which is a great set of

280
00:09:50,880 --> 00:09:51,600
resources

281
00:09:51,600 --> 00:09:54,320
as well and lots of other open source or

282
00:09:54,320 --> 00:09:55,200
public

283
00:09:55,200 --> 00:09:58,399
resources for enumerating

284
00:09:58,399 --> 00:10:00,959
these attack surfaces and i'll give an

285
00:10:00,959 --> 00:10:05,519
example of that a bit later as well

286
00:10:05,519 --> 00:10:07,440
now i kind of touched on the file system

287
00:10:07,440 --> 00:10:09,200
redirection stuff and

288
00:10:09,200 --> 00:10:11,040
i have a few demos later and they're not

289
00:10:11,040 --> 00:10:13,040
all based on file system redirection

290
00:10:13,040 --> 00:10:15,120
but i feel like this kind of needs to be

291
00:10:15,120 --> 00:10:16,720
pointed out again

292
00:10:16,720 --> 00:10:19,440
simply because this is super common this

293
00:10:19,440 --> 00:10:21,279
is one of the most common things i find

294
00:10:21,279 --> 00:10:22,560
in software

295
00:10:22,560 --> 00:10:27,040
uh where they i guess don't have

296
00:10:27,040 --> 00:10:29,360
the understanding or there's oversight

297
00:10:29,360 --> 00:10:30,640
or some reason

298
00:10:30,640 --> 00:10:32,800
they do some sort of file i o in an

299
00:10:32,800 --> 00:10:34,079
insecure manner

300
00:10:34,079 --> 00:10:37,040
simply because

301
00:10:37,120 --> 00:10:39,920
we can have control over redirection of

302
00:10:39,920 --> 00:10:41,040
these paths

303
00:10:41,040 --> 00:10:45,120
so as an example c drive itself is a sim

304
00:10:45,120 --> 00:10:47,279
we link a user can change c drive to

305
00:10:47,279 --> 00:10:48,800
point to c drive temp

306
00:10:48,800 --> 00:10:51,279
or change c c drive to point to uh a

307
00:10:51,279 --> 00:10:52,880
different drive altogether

308
00:10:52,880 --> 00:10:54,959
every folder path could potentially be a

309
00:10:54,959 --> 00:10:56,399
junction that just

310
00:10:56,399 --> 00:10:59,279
redirects to another folder and every

311
00:10:59,279 --> 00:11:01,120
file could potentially be a hard link to

312
00:11:01,120 --> 00:11:02,480
another file

313
00:11:02,480 --> 00:11:04,800
um james forshaw had a good talk on a

314
00:11:04,800 --> 00:11:06,800
lot of these file system redirection

315
00:11:06,800 --> 00:11:09,519
um components in his talk called a link

316
00:11:09,519 --> 00:11:10,320
to the past

317
00:11:10,320 --> 00:11:12,640
roughly around 2015 so it's definitely

318
00:11:12,640 --> 00:11:15,760
not even a new attack surface

319
00:11:15,760 --> 00:11:18,800
and um if we start

320
00:11:18,800 --> 00:11:20,880
thinking about this sort of thing we

321
00:11:20,880 --> 00:11:22,079
also see that it's

322
00:11:22,079 --> 00:11:24,560
not unique to windows so while i am

323
00:11:24,560 --> 00:11:26,640
talking about windows in this talk

324
00:11:26,640 --> 00:11:28,560
mac os and linux all have file system

325
00:11:28,560 --> 00:11:30,399
redirection capabilities

326
00:11:30,399 --> 00:11:33,680
i've had vulnerabilities in mac where

327
00:11:33,680 --> 00:11:36,640
they use certain apis to get the path of

328
00:11:36,640 --> 00:11:37,040
their

329
00:11:37,040 --> 00:11:40,000
application bundle and that typically is

330
00:11:40,000 --> 00:11:41,519
expected to live in like slash

331
00:11:41,519 --> 00:11:44,240
applications where low privileged users

332
00:11:44,240 --> 00:11:46,880
do not have permissions to write to

333
00:11:46,880 --> 00:11:49,279
but by utilizing hard links and creating

334
00:11:49,279 --> 00:11:50,800
a hard link from a

335
00:11:50,800 --> 00:11:54,240
less pre i guess less hardened

336
00:11:54,240 --> 00:11:56,560
folder we can trick that api to

337
00:11:56,560 --> 00:11:57,440
returning

338
00:11:57,440 --> 00:11:59,600
a different path like slash temp or

339
00:11:59,600 --> 00:12:01,600
somewhere in the user's home directory

340
00:12:01,600 --> 00:12:03,360
where the user does have full control

341
00:12:03,360 --> 00:12:05,279
over that file and the application

342
00:12:05,279 --> 00:12:06,959
doesn't know any better and does

343
00:12:06,959 --> 00:12:07,680
something

344
00:12:07,680 --> 00:12:11,040
silly and insecure on the assumption

345
00:12:11,040 --> 00:12:12,399
that the only part that's going to

346
00:12:12,399 --> 00:12:14,560
return is like this slash application

347
00:12:14,560 --> 00:12:15,040
slash

348
00:12:15,040 --> 00:12:17,120
myapp.app bundle path that's really

349
00:12:17,120 --> 00:12:18,160
hardened

350
00:12:18,160 --> 00:12:21,360
but that may not be the case so it's

351
00:12:21,360 --> 00:12:23,040
definitely not a

352
00:12:23,040 --> 00:12:26,639
set of vulnerabilities unique to windows

353
00:12:26,639 --> 00:12:29,839
and when we start looking at junctions

354
00:12:29,839 --> 00:12:33,200
we can see that these types of vons are

355
00:12:33,200 --> 00:12:33,839
actually

356
00:12:33,839 --> 00:12:36,480
really really common i have a little

357
00:12:36,480 --> 00:12:37,920
scrolling thing here it's not scrolling

358
00:12:37,920 --> 00:12:40,079
but anyway if you go on zdi and you just

359
00:12:40,079 --> 00:12:40,639
search

360
00:12:40,639 --> 00:12:42,880
the keyword junction in the past few

361
00:12:42,880 --> 00:12:44,240
months alone you'll find

362
00:12:44,240 --> 00:12:47,200
heaps of vulnerabilities reported in

363
00:12:47,200 --> 00:12:48,720
core windows itself

364
00:12:48,720 --> 00:12:50,880
and third-party products and when you

365
00:12:50,880 --> 00:12:53,120
see these types of vons affecting

366
00:12:53,120 --> 00:12:56,240
the core windows operating system on

367
00:12:56,240 --> 00:12:57,760
such a level

368
00:12:57,760 --> 00:13:00,639
um you kind of realize or maybe have an

369
00:13:00,639 --> 00:13:02,720
integration that these types of things

370
00:13:02,720 --> 00:13:04,320
are also going to affect third-party

371
00:13:04,320 --> 00:13:07,200
products a lot

372
00:13:07,200 --> 00:13:08,880
it's kind of a natural assumption when

373
00:13:08,880 --> 00:13:10,800
you see that how badly it's affected by

374
00:13:10,800 --> 00:13:11,519
renders

375
00:13:11,519 --> 00:13:14,240
and windows has kind of mitigated some

376
00:13:14,240 --> 00:13:15,360
of these things

377
00:13:15,360 --> 00:13:18,399
if we go back to the whole

378
00:13:18,399 --> 00:13:20,959
potential hard links there was hard link

379
00:13:20,959 --> 00:13:22,160
mitigations

380
00:13:22,160 --> 00:13:24,880
released in the windows rs not too long

381
00:13:24,880 --> 00:13:25,680
ago

382
00:13:25,680 --> 00:13:27,920
and in the future i expect it to be also

383
00:13:27,920 --> 00:13:30,160
be mitigations against a lot of these

384
00:13:30,160 --> 00:13:31,279
junction attacks

385
00:13:31,279 --> 00:13:35,040
that we will see shortly but currently

386
00:13:35,040 --> 00:13:38,079
it kind of does plague a lot of software

387
00:13:38,079 --> 00:13:39,519
and one example of that i'm going to

388
00:13:39,519 --> 00:13:42,880
demo is related to zoom

389
00:13:42,880 --> 00:13:44,639
i'm sure everyone's familiar with what

390
00:13:44,639 --> 00:13:47,680
zoom is especially during kovid times

391
00:13:47,680 --> 00:13:50,720
so one of the bugs so this example for

392
00:13:50,720 --> 00:13:52,079
example is going to be

393
00:13:52,079 --> 00:13:55,440
a junction related logic bug in zoom

394
00:13:55,440 --> 00:13:56,720
that we can turn

395
00:13:56,720 --> 00:14:00,839
into a privilege escalation zero day for

396
00:14:00,839 --> 00:14:02,000
zoom

397
00:14:02,000 --> 00:14:04,160
so let's see if i can get the demo

398
00:14:04,160 --> 00:14:06,560
showing

399
00:14:08,160 --> 00:14:11,600
okay just fyi the vm that i'm using to

400
00:14:11,600 --> 00:14:12,399
demo these

401
00:14:12,399 --> 00:14:16,079
is just the ms edge developer

402
00:14:16,079 --> 00:14:18,000
vm that you can grab off microsoft's

403
00:14:18,000 --> 00:14:20,639
website so i pulled that down

404
00:14:20,639 --> 00:14:24,720
and just ran that as is i installed

405
00:14:24,720 --> 00:14:27,440
a few extra software packages on them

406
00:14:27,440 --> 00:14:28,240
things like

407
00:14:28,240 --> 00:14:31,040
zoom as an example and some other

408
00:14:31,040 --> 00:14:33,120
products that i'll be demoing

409
00:14:33,120 --> 00:14:37,120
and just as a quick quick review of

410
00:14:37,120 --> 00:14:39,199
the attack service stuff i mentioned

411
00:14:39,199 --> 00:14:41,279
earlier if we open up something like

412
00:14:41,279 --> 00:14:42,399
process hacker

413
00:14:42,399 --> 00:14:44,639
and then we open up just some random

414
00:14:44,639 --> 00:14:45,600
process

415
00:14:45,600 --> 00:14:47,440
we can automatically see things like

416
00:14:47,440 --> 00:14:49,760
okay it's got rpc ports

417
00:14:49,760 --> 00:14:51,120
it's got events that we could

418
00:14:51,120 --> 00:14:53,360
potentially interact with

419
00:14:53,360 --> 00:14:56,480
it's got handles to device drivers which

420
00:14:56,480 --> 00:14:57,360
are also

421
00:14:57,360 --> 00:14:59,360
a potential attack surface depending on

422
00:14:59,360 --> 00:15:02,000
if we as a low privileged user

423
00:15:02,000 --> 00:15:05,519
can interact with this device driver

424
00:15:05,519 --> 00:15:08,399
we have under files they'll be file io

425
00:15:08,399 --> 00:15:08,959
stuff

426
00:15:08,959 --> 00:15:10,880
but they'll also be things like named

427
00:15:10,880 --> 00:15:13,519
pipes if it has name pipes opened

428
00:15:13,519 --> 00:15:16,320
and there's also things like if i scroll

429
00:15:16,320 --> 00:15:17,040
down

430
00:15:17,040 --> 00:15:18,800
memory sections that we could

431
00:15:18,800 --> 00:15:21,040
potentially map into our own

432
00:15:21,040 --> 00:15:23,839
unprivileged process and modify and

433
00:15:23,839 --> 00:15:25,680
these are all potential attack surfaces

434
00:15:25,680 --> 00:15:26,639
to this process

435
00:15:26,639 --> 00:15:28,639
depending on how this process interacts

436
00:15:28,639 --> 00:15:30,320
with that and what the

437
00:15:30,320 --> 00:15:33,440
permissions are set for that

438
00:15:33,440 --> 00:15:34,880
that's kind of like a little example of

439
00:15:34,880 --> 00:15:36,720
just a very quick way to enumerate

440
00:15:36,720 --> 00:15:37,519
something

441
00:15:37,519 --> 00:15:39,839
relating to attack service on a random

442
00:15:39,839 --> 00:15:42,320
process

443
00:15:42,959 --> 00:15:44,959
so with zoom for example i have zoom

444
00:15:44,959 --> 00:15:46,399
here

445
00:15:46,399 --> 00:15:48,880
should be updated a few days ago so

446
00:15:48,880 --> 00:15:50,320
still a zero day

447
00:15:50,320 --> 00:15:53,680
and this one we need some way to get

448
00:15:53,680 --> 00:15:56,720
zoom to do something insecure

449
00:15:56,720 --> 00:15:59,279
one of the things i like to check is

450
00:15:59,279 --> 00:16:01,360
when zoom is installed via like an msi

451
00:16:01,360 --> 00:16:03,120
package and things like that

452
00:16:03,120 --> 00:16:06,839
the installer lives in c drive windows

453
00:16:06,839 --> 00:16:09,759
installer and these are interesting

454
00:16:09,759 --> 00:16:11,040
attack surfaces

455
00:16:11,040 --> 00:16:13,600
um if anyone's seen sandbox escapers

456
00:16:13,600 --> 00:16:14,800
work on twitter

457
00:16:14,800 --> 00:16:17,120
she has done a lot in this space as well

458
00:16:17,120 --> 00:16:19,040
and previously james forshaw has also

459
00:16:19,040 --> 00:16:20,320
done a lot

460
00:16:20,320 --> 00:16:22,160
like i said relating to lots of these

461
00:16:22,160 --> 00:16:24,720
simulink related vulnerabilities

462
00:16:24,720 --> 00:16:27,279
and so one way to identify if msi

463
00:16:27,279 --> 00:16:28,399
belongs to

464
00:16:28,399 --> 00:16:30,560
your target i like to just look at the

465
00:16:30,560 --> 00:16:32,560
digital signature right i see zoom there

466
00:16:32,560 --> 00:16:34,000
so i know it zooms

467
00:16:34,000 --> 00:16:37,519
that's simple enough and then if we hit

468
00:16:37,519 --> 00:16:40,560
right click and repair the nature of the

469
00:16:40,560 --> 00:16:41,839
windows installer

470
00:16:41,839 --> 00:16:45,440
is the zoom msi is going to run and it's

471
00:16:45,440 --> 00:16:46,000
going to do

472
00:16:46,000 --> 00:16:48,240
a certain set of operations to repair

473
00:16:48,240 --> 00:16:49,199
itself

474
00:16:49,199 --> 00:16:51,279
but the key point here is that when the

475
00:16:51,279 --> 00:16:52,399
msi runs

476
00:16:52,399 --> 00:16:55,040
it auto elevates itself to system even

477
00:16:55,040 --> 00:16:55,519
if we

478
00:16:55,519 --> 00:16:58,240
are just a regular user so what if it

479
00:16:58,240 --> 00:16:59,839
does in that msi package

480
00:16:59,839 --> 00:17:03,279
has to be careful in a way since it is

481
00:17:03,279 --> 00:17:04,000
operating as

482
00:17:04,000 --> 00:17:07,679
system and if i look at

483
00:17:07,679 --> 00:17:11,520
a procmon trace

484
00:17:11,520 --> 00:17:16,480
actually let me start another pokemon

485
00:17:16,839 --> 00:17:19,839
session

486
00:17:20,720 --> 00:17:23,839
so if i start procmon to capture

487
00:17:23,839 --> 00:17:29,198
and i run repair on the msi

488
00:17:29,600 --> 00:17:31,840
then the msi file like i said zoom or

489
00:17:31,840 --> 00:17:32,799
auto elevate

490
00:17:32,799 --> 00:17:36,960
do stuff whatever it's coded to do

491
00:17:36,960 --> 00:17:39,360
usually just either checking file hashes

492
00:17:39,360 --> 00:17:42,320
moving files around

493
00:17:42,320 --> 00:17:44,880
general kind of repair operations like

494
00:17:44,880 --> 00:17:47,840
that

495
00:17:49,039 --> 00:17:53,039
let that go let me check my filter

496
00:17:53,039 --> 00:17:56,240
yep i need to remove this

497
00:17:57,919 --> 00:17:59,520
and now we can see all the various

498
00:17:59,520 --> 00:18:01,840
operations that it did and typically for

499
00:18:01,840 --> 00:18:03,200
von research you know if you see your

500
00:18:03,200 --> 00:18:05,039
target has zoom installed you'll install

501
00:18:05,039 --> 00:18:06,720
it locally and do these sorts of things

502
00:18:06,720 --> 00:18:08,080
on your local machine

503
00:18:08,080 --> 00:18:11,760
to identify and if i scroll down

504
00:18:11,760 --> 00:18:15,840
we'll see certain interesting behavior

505
00:18:19,760 --> 00:18:23,840
let's see if i can spot this one

506
00:18:24,880 --> 00:18:29,840
it does a lot of things

507
00:18:31,919 --> 00:18:42,480
i think i need to adjust my filter again

508
00:18:42,480 --> 00:18:45,919
so what we should see is it trying to do

509
00:18:45,919 --> 00:18:47,440
something in our here we go

510
00:18:47,440 --> 00:18:50,320
okay found it so instantly we see here

511
00:18:50,320 --> 00:18:50,880
that

512
00:18:50,880 --> 00:18:54,400
this process which is running

513
00:18:54,400 --> 00:18:58,160
as system is trying to access something

514
00:18:58,160 --> 00:19:00,720
in our user's app data folder now since

515
00:19:00,720 --> 00:19:02,880
this is our user's app data folder we

516
00:19:02,880 --> 00:19:04,880
have full control over the contents of

517
00:19:04,880 --> 00:19:05,919
this directory

518
00:19:05,919 --> 00:19:07,600
well at least in normal cases we have

519
00:19:07,600 --> 00:19:09,200
full control over the contents

520
00:19:09,200 --> 00:19:11,600
that may not necessarily be the case but

521
00:19:11,600 --> 00:19:12,960
in most cases it is

522
00:19:12,960 --> 00:19:15,120
and it's trying to access these folders

523
00:19:15,120 --> 00:19:17,600
right bin bin001

524
00:19:17,600 --> 00:19:20,080
whatever but it can't find it so the

525
00:19:20,080 --> 00:19:21,520
thing that pops in my mind is what if i

526
00:19:21,520 --> 00:19:22,799
create this folder what is it going to

527
00:19:22,799 --> 00:19:25,840
do next

528
00:19:26,240 --> 00:19:28,080
it might try to do something silly like

529
00:19:28,080 --> 00:19:29,440
load a dll from there

530
00:19:29,440 --> 00:19:31,120
if it does then that's probably an

531
00:19:31,120 --> 00:19:34,080
instead win for us

532
00:19:34,480 --> 00:19:37,520
so one thing i'll do now is we'll go to

533
00:19:37,520 --> 00:19:39,039
that folder

534
00:19:39,039 --> 00:19:42,160
we see that there's no bin

535
00:19:42,720 --> 00:19:45,919
i'll make that directory

536
00:19:46,160 --> 00:19:48,400
and just for now i'm going to include

537
00:19:48,400 --> 00:19:51,039
just that path

538
00:19:51,039 --> 00:19:52,240
actually that didn't work but that's

539
00:19:52,240 --> 00:19:54,960
fine we'll restart

540
00:19:54,960 --> 00:19:57,120
or rerun the repair operation which we

541
00:19:57,120 --> 00:19:59,520
can just do as many times as we want

542
00:19:59,520 --> 00:20:01,039
it will run through again and we'll be

543
00:20:01,039 --> 00:20:02,880
able to see what it tries to do with

544
00:20:02,880 --> 00:20:07,840
this directory

545
00:20:09,280 --> 00:20:12,559
let's just exclude this

546
00:20:14,159 --> 00:20:17,200
still doing its thing

547
00:20:17,440 --> 00:20:19,039
and these types of things where it tries

548
00:20:19,039 --> 00:20:21,440
to access files or folders in

549
00:20:21,440 --> 00:20:23,360
in folders that we control are nice

550
00:20:23,360 --> 00:20:24,720
things to look out for

551
00:20:24,720 --> 00:20:26,640
okay so we see that it accesses it and

552
00:20:26,640 --> 00:20:28,400
then what it does afterwards is it just

553
00:20:28,400 --> 00:20:29,679
deletes the folder

554
00:20:29,679 --> 00:20:32,400
so if i go here we can see that bin no

555
00:20:32,400 --> 00:20:34,720
longer exists it just deleted the folder

556
00:20:34,720 --> 00:20:36,960
you might be like okay just deleted it

557
00:20:36,960 --> 00:20:38,240
so what

558
00:20:38,240 --> 00:20:40,320
but the thing is since we have the

559
00:20:40,320 --> 00:20:42,799
capability to do file system redirection

560
00:20:42,799 --> 00:20:44,480
we can actually leverage this to trick

561
00:20:44,480 --> 00:20:46,240
zoom to deleting any folder on the

562
00:20:46,240 --> 00:20:47,280
system we want

563
00:20:47,280 --> 00:20:50,240
which means we have an arbitrary folder

564
00:20:50,240 --> 00:20:52,559
or even file deletion

565
00:20:52,559 --> 00:20:54,880
primitive here and that is something

566
00:20:54,880 --> 00:20:56,960
that we can leverage to turn into a

567
00:20:56,960 --> 00:20:58,159
privileged

568
00:20:58,159 --> 00:21:01,440
privilege escalation exploit there's

569
00:21:01,440 --> 00:21:03,039
ways to do it with the core

570
00:21:03,039 --> 00:21:05,039
windows operating system itself there

571
00:21:05,039 --> 00:21:06,720
used to be tricks with the windows error

572
00:21:06,720 --> 00:21:07,919
reporting folder

573
00:21:07,919 --> 00:21:10,159
now there's tricks with windows defender

574
00:21:10,159 --> 00:21:11,840
and i kind of encourage anyone who's

575
00:21:11,840 --> 00:21:12,880
interested in these

576
00:21:12,880 --> 00:21:14,960
types of things to find other methods as

577
00:21:14,960 --> 00:21:16,480
well but

578
00:21:16,480 --> 00:21:18,320
when i was running through these demos a

579
00:21:18,320 --> 00:21:20,559
couple days ago on this vm

580
00:21:20,559 --> 00:21:22,480
i found something else interesting that

581
00:21:22,480 --> 00:21:24,240
stood out to me that i figured

582
00:21:24,240 --> 00:21:27,280
would be more fun to demo as well

583
00:21:27,280 --> 00:21:30,480
and that's the fact that this vm

584
00:21:30,480 --> 00:21:32,320
on the microsoft website comes

585
00:21:32,320 --> 00:21:33,520
pre-installed with

586
00:21:33,520 --> 00:21:36,240
chocolaty the software management

587
00:21:36,240 --> 00:21:37,120
package i guess

588
00:21:37,120 --> 00:21:39,600
i haven't really used it myself but it

589
00:21:39,600 --> 00:21:41,039
is installed on here

590
00:21:41,039 --> 00:21:43,520
and one thing i realized that's quite

591
00:21:43,520 --> 00:21:44,480
interesting

592
00:21:44,480 --> 00:21:46,799
that allows us to leverage this deletion

593
00:21:46,799 --> 00:21:48,720
for a priv-esque

594
00:21:48,720 --> 00:21:50,159
is the fact that if we look at the

595
00:21:50,159 --> 00:21:52,320
system environment variables

596
00:21:52,320 --> 00:21:56,240
for the system path we can see that c

597
00:21:56,240 --> 00:21:59,280
drive program data chocolaty bin

598
00:21:59,280 --> 00:22:02,960
is a path in the system path which means

599
00:22:02,960 --> 00:22:06,640
there's going to be a lot of system or

600
00:22:06,640 --> 00:22:09,280
applications that run a system that are

601
00:22:09,280 --> 00:22:11,520
going to look into this path to find

602
00:22:11,520 --> 00:22:14,000
a certain dll that it's missing and

603
00:22:14,000 --> 00:22:15,919
things like that

604
00:22:15,919 --> 00:22:19,360
and another key point about this path

605
00:22:19,360 --> 00:22:21,919
is that it lives in program data it's in

606
00:22:21,919 --> 00:22:24,240
c drive program data chocolaty

607
00:22:24,240 --> 00:22:27,200
and why that is so interesting is the

608
00:22:27,200 --> 00:22:28,240
fact that

609
00:22:28,240 --> 00:22:31,679
regular users can create folders

610
00:22:31,679 --> 00:22:34,640
in program data

611
00:22:35,280 --> 00:22:39,679
i can do make the temp and temp is there

612
00:22:39,679 --> 00:22:42,159
as an example any regular user can

613
00:22:42,159 --> 00:22:44,159
create a folder in program data it's not

614
00:22:44,159 --> 00:22:45,600
a lockdown folder

615
00:22:45,600 --> 00:22:49,280
and in chocolaty we have

616
00:22:49,280 --> 00:22:52,320
the chocolatey bin which is in the path

617
00:22:52,320 --> 00:22:55,360
this folder is locked down i can't just

618
00:22:55,360 --> 00:22:58,159
create a dll here and hope that a system

619
00:22:58,159 --> 00:22:59,280
process loads it

620
00:22:59,280 --> 00:23:01,600
if i could that would be an easy proves

621
00:23:01,600 --> 00:23:02,880
again

622
00:23:02,880 --> 00:23:05,039
but the very fact that it lives in

623
00:23:05,039 --> 00:23:07,039
program data and we have this arbitrary

624
00:23:07,039 --> 00:23:08,400
folder deletion

625
00:23:08,400 --> 00:23:10,320
what if we just delete the chocolaty

626
00:23:10,320 --> 00:23:12,720
folder create our own chocolatey folder

627
00:23:12,720 --> 00:23:13,919
with its own bin

628
00:23:13,919 --> 00:23:16,000
and since we created it we have control

629
00:23:16,000 --> 00:23:17,520
over its contents and we can put

630
00:23:17,520 --> 00:23:19,600
whatever dlls we want in there

631
00:23:19,600 --> 00:23:20,880
and that's exactly how this type of

632
00:23:20,880 --> 00:23:22,640
thing is exploited and

633
00:23:22,640 --> 00:23:25,919
i'll actually demo that so

634
00:23:25,919 --> 00:23:28,960
as an example so this shouldn't have

635
00:23:28,960 --> 00:23:31,760
been run before so i shouldn't be able

636
00:23:31,760 --> 00:23:37,280
to delete chocolatey access is denied

637
00:23:37,280 --> 00:23:38,559
obviously it's still there tried to

638
00:23:38,559 --> 00:23:40,320
delete everything didn't work because

639
00:23:40,320 --> 00:23:42,480
the acl is restricted

640
00:23:42,480 --> 00:23:44,400
so when i think about how to exploit

641
00:23:44,400 --> 00:23:46,159
this zoom vulnerability

642
00:23:46,159 --> 00:23:49,600
let's go back to our app data zoom

643
00:23:49,600 --> 00:23:51,919
let's delete the zoom folder make it as

644
00:23:51,919 --> 00:23:53,200
an empty one

645
00:23:53,200 --> 00:23:55,279
and the tools i'm using here are from

646
00:23:55,279 --> 00:23:56,720
google project xero's

647
00:23:56,720 --> 00:24:00,000
symbolic testing tools that are on

648
00:24:00,000 --> 00:24:02,159
github

649
00:24:02,159 --> 00:24:05,279
and so if i go to my user's

650
00:24:05,279 --> 00:24:08,000
package for that and i go create mount

651
00:24:08,000 --> 00:24:08,720
point

652
00:24:08,720 --> 00:24:11,360
and i say let's turn zoom into a mount

653
00:24:11,360 --> 00:24:15,199
point that points to rpc control

654
00:24:15,279 --> 00:24:18,480
and then let's create a

655
00:24:18,480 --> 00:24:22,320
another sim link from rpc control slash

656
00:24:22,320 --> 00:24:25,360
bin and we point that to

657
00:24:25,360 --> 00:24:27,360
our directory that we want to delete

658
00:24:27,360 --> 00:24:29,600
which is

659
00:24:29,600 --> 00:24:32,880
program data slash i can make this

660
00:24:32,880 --> 00:24:34,400
bigger

661
00:24:34,400 --> 00:24:38,240
program data slash chocolatey

662
00:24:39,039 --> 00:24:42,080
so if i start that way so now if i do on

663
00:24:42,080 --> 00:24:42,559
zoom

664
00:24:42,559 --> 00:24:44,240
it's going to rpc control which is

665
00:24:44,240 --> 00:24:45,840
nothing but if i dir

666
00:24:45,840 --> 00:24:48,000
zoom slash bin it should go to our

667
00:24:48,000 --> 00:24:49,039
chocolaty folder

668
00:24:49,039 --> 00:24:51,840
as it showed there so now that we have

669
00:24:51,840 --> 00:24:53,520
that and we can see that zoom here

670
00:24:53,520 --> 00:24:55,760
shows that it's a junction to rpc

671
00:24:55,760 --> 00:24:57,279
control

672
00:24:57,279 --> 00:24:59,039
and now all of this is done as a low

673
00:24:59,039 --> 00:25:01,360
privileged user so now if we go back to

674
00:25:01,360 --> 00:25:02,799
the msi

675
00:25:02,799 --> 00:25:06,159
rerun the repair operation if i go to c

676
00:25:06,159 --> 00:25:09,520
drive program data we see chocolate in

677
00:25:09,520 --> 00:25:10,880
here

678
00:25:10,880 --> 00:25:12,720
at some point thanks to the folder

679
00:25:12,720 --> 00:25:14,880
redirection chocolaty should

680
00:25:14,880 --> 00:25:17,440
disappear it shouldn't take too long to

681
00:25:17,440 --> 00:25:19,760
happen

682
00:25:20,640 --> 00:25:22,400
just give it a few steps bam chocolate

683
00:25:22,400 --> 00:25:24,159
is gone right

684
00:25:24,159 --> 00:25:27,200
and now thanks to that we can go

685
00:25:27,200 --> 00:25:30,559
into program data

686
00:25:30,880 --> 00:25:34,799
make the chocolaty bam go into chocolaty

687
00:25:34,799 --> 00:25:38,400
make the bin cd bin and suddenly now we

688
00:25:38,400 --> 00:25:40,559
can write here whatever we want

689
00:25:40,559 --> 00:25:43,120
and now since this is in the system path

690
00:25:43,120 --> 00:25:44,640
the next step to turn this to a

691
00:25:44,640 --> 00:25:46,640
privilege escalation is to find a system

692
00:25:46,640 --> 00:25:47,440
process

693
00:25:47,440 --> 00:25:49,520
that's going to try to load something

694
00:25:49,520 --> 00:25:51,039
from this directory since it's in the

695
00:25:51,039 --> 00:25:52,480
system path

696
00:25:52,480 --> 00:25:56,080
and i have a process monitor trace from

697
00:25:56,080 --> 00:25:59,520
boot that will show us something that

698
00:25:59,520 --> 00:26:02,640
does that so if we capture a boot trace

699
00:26:02,640 --> 00:26:04,480
which you can do by just going options

700
00:26:04,480 --> 00:26:06,799
enable boot logging we'll see that the

701
00:26:06,799 --> 00:26:07,600
spools

702
00:26:07,600 --> 00:26:10,080
v process which runs the system tries to

703
00:26:10,080 --> 00:26:10,720
load

704
00:26:10,720 --> 00:26:13,440
or tries to create a handle to this tp

705
00:26:13,440 --> 00:26:14,679
gen

706
00:26:14,679 --> 00:26:18,480
lic.dll in this chocolaty path

707
00:26:18,480 --> 00:26:25,840
so if i copy over our own dll

708
00:26:25,919 --> 00:26:29,200
to hear chord uh what was it

709
00:26:29,200 --> 00:26:33,360
tp gen lick.dll right that dll is here

710
00:26:33,360 --> 00:26:35,440
this dll that i created will simply

711
00:26:35,440 --> 00:26:37,120
create a file

712
00:26:37,120 --> 00:26:40,158
in c drive

713
00:26:41,279 --> 00:26:44,000
in c drive we can create folders but we

714
00:26:44,000 --> 00:26:45,520
can't create files right if i go

715
00:26:45,520 --> 00:26:46,880
test.txt and c

716
00:26:46,880 --> 00:26:49,840
drive access denied and the dll that i

717
00:26:49,840 --> 00:26:50,320
planted

718
00:26:50,320 --> 00:26:53,360
if it runs it'll create a text file in c

719
00:26:53,360 --> 00:26:56,400
drive called itworks.txt

720
00:26:56,400 --> 00:26:58,400
simple way for me to just verify that it

721
00:26:58,400 --> 00:27:00,000
executed code

722
00:27:00,000 --> 00:27:02,960
so now that we have this planted in

723
00:27:02,960 --> 00:27:05,120
program data

724
00:27:05,120 --> 00:27:08,480
well in chocolaty actually

725
00:27:08,480 --> 00:27:11,039
um all i need to do is get the spool sv

726
00:27:11,039 --> 00:27:12,400
process to

727
00:27:12,400 --> 00:27:14,640
reload there could be various ways to do

728
00:27:14,640 --> 00:27:17,279
this uh the easiest way i'm going to do

729
00:27:17,279 --> 00:27:20,480
is just restart the machine but you

730
00:27:20,480 --> 00:27:22,640
could potentially restart the service

731
00:27:22,640 --> 00:27:24,640
you could even there's bugs where

732
00:27:24,640 --> 00:27:26,640
there's been where you crash the service

733
00:27:26,640 --> 00:27:29,440
and then it just auto runs again since

734
00:27:29,440 --> 00:27:31,760
it detected that it failed

735
00:27:31,760 --> 00:27:34,000
some things when you exploit these on

736
00:27:34,000 --> 00:27:34,960
call windows

737
00:27:34,960 --> 00:27:36,880
aren't even things that you need to get

738
00:27:36,880 --> 00:27:38,399
a service to do it's something you'll do

739
00:27:38,399 --> 00:27:40,159
periodically maybe like every five

740
00:27:40,159 --> 00:27:42,080
minutes it'll do this operation

741
00:27:42,080 --> 00:27:45,120
or every time you update windows update

742
00:27:45,120 --> 00:27:45,679
or

743
00:27:45,679 --> 00:27:47,600
some sort of signature database it will

744
00:27:47,600 --> 00:27:50,559
do this operation

745
00:27:50,880 --> 00:27:53,279
okay so we're logging back in and now

746
00:27:53,279 --> 00:27:54,880
based on our procmon trace that we had

747
00:27:54,880 --> 00:27:56,000
from the bootlogging

748
00:27:56,000 --> 00:27:58,159
we expect that spool sv would still try

749
00:27:58,159 --> 00:27:59,440
to load that dll

750
00:27:59,440 --> 00:28:02,960
that now suddenly exists and if i just

751
00:28:02,960 --> 00:28:03,600
go to c

752
00:28:03,600 --> 00:28:08,959
drive try to make it a bit easier to see

753
00:28:09,600 --> 00:28:12,159
oh what do you know airworks2.txt he's

754
00:28:12,159 --> 00:28:13,279
suddenly there

755
00:28:13,279 --> 00:28:15,840
you know hello from system bam you got

756
00:28:15,840 --> 00:28:17,560
privacy in zoom

757
00:28:17,560 --> 00:28:25,520
[Applause]

758
00:28:25,520 --> 00:28:28,240
and that's just kind of one example

759
00:28:28,240 --> 00:28:28,880
right

760
00:28:28,880 --> 00:28:32,559
this is a zerodanes and uh actually one

761
00:28:32,559 --> 00:28:33,679
other thing i'll

762
00:28:33,679 --> 00:28:37,520
mention is that that zoom bin deletion

763
00:28:37,520 --> 00:28:39,120
is just one of the ways you can trick

764
00:28:39,120 --> 00:28:41,120
zoom into deleting things there's like

765
00:28:41,120 --> 00:28:42,000
three other ways

766
00:28:42,000 --> 00:28:45,360
that i found as well and for example

767
00:28:45,360 --> 00:28:46,960
this can be found by just opening up

768
00:28:46,960 --> 00:28:47,679
procmond

769
00:28:47,679 --> 00:28:50,000
knowing to how to set your filters right

770
00:28:50,000 --> 00:28:51,600
clicking in msi hitting repair and then

771
00:28:51,600 --> 00:28:52,960
finding it like i think i found this in

772
00:28:52,960 --> 00:28:53,919
about less than

773
00:28:53,919 --> 00:28:56,159
an hour of just downloading zoom and

774
00:28:56,159 --> 00:28:57,279
playing around with it and seeing what

775
00:28:57,279 --> 00:28:58,159
happens

776
00:28:58,159 --> 00:28:59,600
so these are definitely the types of

777
00:28:59,600 --> 00:29:01,279
vons that once you're aware of

778
00:29:01,279 --> 00:29:05,120
you can start seeing them everywhere

779
00:29:05,200 --> 00:29:07,840
another example i have so this one isn't

780
00:29:07,840 --> 00:29:09,760
a zero day this one's an end day i found

781
00:29:09,760 --> 00:29:10,880
this one

782
00:29:10,880 --> 00:29:12,960
earlier last year and then someone else

783
00:29:12,960 --> 00:29:14,399
found it again

784
00:29:14,399 --> 00:29:16,640
earlier this year on twitter so it kind

785
00:29:16,640 --> 00:29:18,240
of was fresh in my mind and this one's

786
00:29:18,240 --> 00:29:19,360
an interesting one

787
00:29:19,360 --> 00:29:21,360
because it's not a file to a redirection

788
00:29:21,360 --> 00:29:23,279
one and anyone who knows fox at pdf

789
00:29:23,279 --> 00:29:24,000
reader

790
00:29:24,000 --> 00:29:26,399
or i guess pdf readers in general

791
00:29:26,399 --> 00:29:28,000
they're heavily fuzzed right if you

792
00:29:28,000 --> 00:29:28,559
search for

793
00:29:28,559 --> 00:29:33,039
 uh foxit on zdi you'll find

794
00:29:33,039 --> 00:29:35,039
memory corruption vulnerabilities

795
00:29:35,039 --> 00:29:36,799
reported practically daily

796
00:29:36,799 --> 00:29:39,679
weekly over the past x amount of months

797
00:29:39,679 --> 00:29:40,799
or years

798
00:29:40,799 --> 00:29:43,919
it's something that's heavily fuzzed yet

799
00:29:43,919 --> 00:29:47,039
they lived in there one of the most

800
00:29:47,039 --> 00:29:47,760
simplistic

801
00:29:47,760 --> 00:29:50,080
logic bugs that you could easily turn to

802
00:29:50,080 --> 00:29:51,279
an lp

803
00:29:51,279 --> 00:29:54,640
ever and i'm going to demo this one

804
00:29:54,640 --> 00:29:58,559
now as well so i have the older version

805
00:29:58,559 --> 00:30:00,960
it's not that old actually but the uh

806
00:30:00,960 --> 00:30:02,960
vulnerable version of fox reader

807
00:30:02,960 --> 00:30:06,240
i've got to close the presentation

808
00:30:06,240 --> 00:30:09,840
and go back to that

809
00:30:12,399 --> 00:30:14,000
and one thing fox it reader does when

810
00:30:14,000 --> 00:30:15,600
it's installed is it

811
00:30:15,600 --> 00:30:17,840
has this foxit reader update service

812
00:30:17,840 --> 00:30:18,880
that runs as

813
00:30:18,880 --> 00:30:22,000
system and i

814
00:30:22,000 --> 00:30:24,000
believe i already have a procmond trace

815
00:30:24,000 --> 00:30:26,320
of it

816
00:30:26,799 --> 00:30:28,640
actually i don't need to i can just open

817
00:30:28,640 --> 00:30:30,240
a new one because it

818
00:30:30,240 --> 00:30:33,760
runs like crazy so this one as soon as

819
00:30:33,760 --> 00:30:34,240
you opt

820
00:30:34,240 --> 00:30:39,120
open pokemon it stands out like crazy

821
00:30:41,840 --> 00:30:44,720
there we go we can see practically every

822
00:30:44,720 --> 00:30:46,960
second it's trying to open this file

823
00:30:46,960 --> 00:30:49,120
and if i scroll to the right you know i

824
00:30:49,120 --> 00:30:50,080
have to close this because it's just

825
00:30:50,080 --> 00:30:53,039
going to lag my machine

826
00:30:53,039 --> 00:30:54,799
right it doesn't find it so it's

827
00:30:54,799 --> 00:30:56,360
searching for this fox

828
00:30:56,360 --> 00:30:59,919
data.txt file in this path like 100

829
00:30:59,919 --> 00:31:01,360
times a second it just keeps on

830
00:31:01,360 --> 00:31:02,720
searching for it keeps on trying to

831
00:31:02,720 --> 00:31:04,720
access it which

832
00:31:04,720 --> 00:31:06,240
you know probably not the best design

833
00:31:06,240 --> 00:31:08,720
but it is what it is

834
00:31:08,720 --> 00:31:10,159
and the first thing i want to check when

835
00:31:10,159 --> 00:31:11,760
i see something like this

836
00:31:11,760 --> 00:31:14,799
is can i create this file you know is it

837
00:31:14,799 --> 00:31:16,799
something that i could potentially

838
00:31:16,799 --> 00:31:18,960
create and then have the privileged

839
00:31:18,960 --> 00:31:21,120
process try to interact with

840
00:31:21,120 --> 00:31:25,519
so echo test to voxer data.txt

841
00:31:25,519 --> 00:31:27,840
ah it worked it created so i can create

842
00:31:27,840 --> 00:31:28,799
this file

843
00:31:28,799 --> 00:31:30,399
you'll notice though that if i do a

844
00:31:30,399 --> 00:31:32,000
directory listing it's not there

845
00:31:32,000 --> 00:31:33,679
that's because once it tries to pass the

846
00:31:33,679 --> 00:31:35,679
file it just deletes it and

847
00:31:35,679 --> 00:31:37,440
you'll see that in procmod but it just

848
00:31:37,440 --> 00:31:39,440
happens very quickly

849
00:31:39,440 --> 00:31:42,240
and so the next step is thinking okay

850
00:31:42,240 --> 00:31:44,159
what is it actually expecting from this

851
00:31:44,159 --> 00:31:46,240
text file

852
00:31:46,240 --> 00:31:49,279
and so one of the things i did it was a

853
00:31:49,279 --> 00:31:51,600
bit small but i'll kind of explain it

854
00:31:51,600 --> 00:31:54,320
is open up foxit reader the update

855
00:31:54,320 --> 00:31:54,960
service

856
00:31:54,960 --> 00:31:58,000
in binary ninja i do a search

857
00:31:58,000 --> 00:32:01,760
for just foxet data and

858
00:32:01,760 --> 00:32:04,559
that'll take me to this screen where i

859
00:32:04,559 --> 00:32:06,120
can see it's trying to open fox's

860
00:32:06,120 --> 00:32:08,240
data.txt here

861
00:32:08,240 --> 00:32:10,799
and then without even having to dive

862
00:32:10,799 --> 00:32:12,720
into reverse engineering too much

863
00:32:12,720 --> 00:32:14,480
i can just scroll down and just see if

864
00:32:14,480 --> 00:32:16,640
anything else nearby is interesting

865
00:32:16,640 --> 00:32:18,799
and when i scroll down i see things like

866
00:32:18,799 --> 00:32:20,000
session id

867
00:32:20,000 --> 00:32:21,440
okay that could be concerning if i need

868
00:32:21,440 --> 00:32:23,440
a valid session but then i see

869
00:32:23,440 --> 00:32:26,240
like stir temp updater path and cs

870
00:32:26,240 --> 00:32:27,279
command line

871
00:32:27,279 --> 00:32:29,519
when i say command line that stands out

872
00:32:29,519 --> 00:32:31,039
as potentially interesting

873
00:32:31,039 --> 00:32:32,559
because does that mean i can pass it a

874
00:32:32,559 --> 00:32:34,080
command line it will run it

875
00:32:34,080 --> 00:32:37,440
i don't know i continue scrolling down

876
00:32:37,440 --> 00:32:40,159
and then i see user shall execute

877
00:32:40,159 --> 00:32:41,360
success or use

878
00:32:41,360 --> 00:32:43,519
user shall execute failed okay that

879
00:32:43,519 --> 00:32:44,880
really stands out to me

880
00:32:44,880 --> 00:32:47,120
that means that this has some some

881
00:32:47,120 --> 00:32:48,720
built-in behavior to

882
00:32:48,720 --> 00:32:51,840
execute something right and then when i

883
00:32:51,840 --> 00:32:52,720
backtrace

884
00:32:52,720 --> 00:32:55,039
that a little bit what you'll find is

885
00:32:55,039 --> 00:32:56,320
that the way this

886
00:32:56,320 --> 00:32:59,840
passes the text file is

887
00:32:59,840 --> 00:33:02,240
it searches for a two byte header i

888
00:33:02,240 --> 00:33:03,600
think it's like ff

889
00:33:03,600 --> 00:33:07,120
fe and then it'll take a path similar to

890
00:33:07,120 --> 00:33:08,320
this where you can have

891
00:33:08,320 --> 00:33:10,720
any random session id it really doesn't

892
00:33:10,720 --> 00:33:11,600
matter

893
00:33:11,600 --> 00:33:13,679
you can put the stair temp updater path

894
00:33:13,679 --> 00:33:14,720
to your exe

895
00:33:14,720 --> 00:33:17,519
like cmd.exe and then you pass it the

896
00:33:17,519 --> 00:33:19,200
command line like in this case

897
00:33:19,200 --> 00:33:21,600
you know i'm echoing system to c drive

898
00:33:21,600 --> 00:33:23,279
it works.txt

899
00:33:23,279 --> 00:33:27,519
this is my fake foxed data.txt file

900
00:33:27,519 --> 00:33:30,880
that i create so to test this i can

901
00:33:30,880 --> 00:33:31,679
place this

902
00:33:31,679 --> 00:33:34,720
way it's trying to read foxet data now

903
00:33:34,720 --> 00:33:37,840
as a reminder in c drive

904
00:33:37,840 --> 00:33:42,960
since i didn't delete it we still have

905
00:33:42,960 --> 00:33:46,399
it works too dot txt but that's fine

906
00:33:46,399 --> 00:33:48,720
because my example is not it works too

907
00:33:48,720 --> 00:33:50,720
it is just edwards.txt

908
00:33:50,720 --> 00:33:52,320
right so we'll be able to see if this

909
00:33:52,320 --> 00:33:54,000
works or not

910
00:33:54,000 --> 00:33:57,360
so what happens if i just copy that file

911
00:33:57,360 --> 00:33:59,600
here

912
00:34:00,720 --> 00:34:03,120
if i just copy that here you know

913
00:34:03,120 --> 00:34:04,399
obviously that's disappeared because it

914
00:34:04,399 --> 00:34:06,080
got passed instantly

915
00:34:06,080 --> 00:34:09,440
and now if i go to c drive oh look it

916
00:34:09,440 --> 00:34:11,520
works.txt code execution again

917
00:34:11,520 --> 00:34:20,960
thank you foxset

918
00:34:20,960 --> 00:34:22,320
right and that's something that i

919
00:34:22,320 --> 00:34:25,119
spotted in fox's pdf reader by just

920
00:34:25,119 --> 00:34:27,359
opening procmond and then seeing like a

921
00:34:27,359 --> 00:34:29,440
million plus requests through this file

922
00:34:29,440 --> 00:34:32,960
and wondering can i create this file and

923
00:34:32,960 --> 00:34:34,800
what is it expecting from this file what

924
00:34:34,800 --> 00:34:36,480
is it passing from it

925
00:34:36,480 --> 00:34:39,040
and this was a zero day from earlier

926
00:34:39,040 --> 00:34:40,000
last year

927
00:34:40,000 --> 00:34:44,719
so it's fairly new new enough right

928
00:34:45,280 --> 00:34:48,159
this one this one wasn't originally in

929
00:34:48,159 --> 00:34:49,199
my talk

930
00:34:49,199 --> 00:34:52,320
but this one i found

931
00:34:52,320 --> 00:34:55,040
in the dev uh vm that i showed that you

932
00:34:55,040 --> 00:34:56,800
can pull down from microsoft

933
00:34:56,800 --> 00:34:59,280
and this one is another zero day this

934
00:34:59,280 --> 00:35:01,119
one's

935
00:35:01,119 --> 00:35:02,960
actually very common in other software

936
00:35:02,960 --> 00:35:04,240
as well i've found this

937
00:35:04,240 --> 00:35:06,800
in very very prominent antivirus

938
00:35:06,800 --> 00:35:07,680
software

939
00:35:07,680 --> 00:35:10,400
that try to open paths like they go c

940
00:35:10,400 --> 00:35:11,200
drive

941
00:35:11,200 --> 00:35:14,640
device hard disk volume 2 and try to

942
00:35:14,640 --> 00:35:16,400
open up dlls from there

943
00:35:16,400 --> 00:35:18,640
which is just a mistake in the way

944
00:35:18,640 --> 00:35:20,400
they're trying to open the path

945
00:35:20,400 --> 00:35:22,000
um they're not actually meant to be

946
00:35:22,000 --> 00:35:24,320
opening it from c drive device

947
00:35:24,320 --> 00:35:26,000
but because of a coding area they're

948
00:35:26,000 --> 00:35:27,920
opening it from c drive device and c

949
00:35:27,920 --> 00:35:29,839
drive device is a folder that typically

950
00:35:29,839 --> 00:35:31,040
doesn't exist

951
00:35:31,040 --> 00:35:32,880
and it's a folder that low privileged

952
00:35:32,880 --> 00:35:34,560
users can create

953
00:35:34,560 --> 00:35:36,960
so this is kind of a take on that by

954
00:35:36,960 --> 00:35:38,320
puppet labs

955
00:35:38,320 --> 00:35:40,320
or puppet i have no idea what this

956
00:35:40,320 --> 00:35:41,359
software is

957
00:35:41,359 --> 00:35:43,119
but it comes pre-installed in this dev

958
00:35:43,119 --> 00:35:44,880
machine

959
00:35:44,880 --> 00:35:47,359
and um here we go puppet labs and then

960
00:35:47,359 --> 00:35:48,480
it's come to puppet

961
00:35:48,480 --> 00:35:51,599
and it's got like its own

962
00:35:51,599 --> 00:35:54,720
ruby installed and various other things

963
00:35:54,720 --> 00:35:56,560
and literally i found this a couple days

964
00:35:56,560 --> 00:35:58,000
ago after looking at it for about

965
00:35:58,000 --> 00:36:01,119
a second which

966
00:36:01,119 --> 00:36:02,960
kind of drives home my point again that

967
00:36:02,960 --> 00:36:04,480
lots of these vons they're

968
00:36:04,480 --> 00:36:07,040
they're not hard to find i download

969
00:36:07,040 --> 00:36:08,560
random software even

970
00:36:08,560 --> 00:36:11,040
avs and very prominent software and find

971
00:36:11,040 --> 00:36:11,760
these things

972
00:36:11,760 --> 00:36:14,640
very quickly

973
00:36:15,119 --> 00:36:18,800
okay let me just go back to my slide for

974
00:36:18,800 --> 00:36:21,280
a minute

975
00:36:23,920 --> 00:36:25,760
okay i think if i open up the one

976
00:36:25,760 --> 00:36:27,680
captured at boot i should be able to

977
00:36:27,680 --> 00:36:30,160
find it

978
00:36:30,160 --> 00:36:32,720
we'll find something interesting that it

979
00:36:32,720 --> 00:36:33,520
tries to do

980
00:36:33,520 --> 00:36:36,240
when it boots

981
00:36:37,680 --> 00:36:41,839
let's get rid of fox reader

982
00:36:43,520 --> 00:36:48,480
okay keep going

983
00:36:49,359 --> 00:36:54,720
should be soon

984
00:36:54,720 --> 00:36:57,760
okay well there's a couple

985
00:36:57,760 --> 00:36:59,599
but i want to focus on one because this

986
00:36:59,599 --> 00:37:01,839
thing is just plagued with them

987
00:37:01,839 --> 00:37:04,480
okay so

988
00:37:04,960 --> 00:37:07,920
oh whoops i still have that there let's

989
00:37:07,920 --> 00:37:10,640
focus on a different one

990
00:37:10,640 --> 00:37:12,480
well anyway okay so i haven't cleaned up

991
00:37:12,480 --> 00:37:13,920
this vm properly but

992
00:37:13,920 --> 00:37:17,040
uh in c drive program data puppet labs

993
00:37:17,040 --> 00:37:20,160
puppet var lib it tries to load rb 3.0

994
00:37:20,160 --> 00:37:21,760
if i go further down there's actually

995
00:37:21,760 --> 00:37:23,119
more so i don't even have to go with

996
00:37:23,119 --> 00:37:24,000
that example

997
00:37:24,000 --> 00:37:27,040
there's here syslog dot so in c drive

998
00:37:27,040 --> 00:37:29,520
program data puppet labs puppet var lib

999
00:37:29,520 --> 00:37:31,839
syslog dot so right tries to create a

1000
00:37:31,839 --> 00:37:32,960
handle to it

1001
00:37:32,960 --> 00:37:34,560
if i scroll to the right you'll see that

1002
00:37:34,560 --> 00:37:36,160
it's not found so

1003
00:37:36,160 --> 00:37:38,960
first thing is do i have permissions to

1004
00:37:38,960 --> 00:37:40,320
do stuff there

1005
00:37:40,320 --> 00:37:43,920
and forgotten puppet puppet labs

1006
00:37:43,920 --> 00:37:47,599
puppet var lib

1007
00:37:47,599 --> 00:37:49,280
and this i mean you can pull down the vm

1008
00:37:49,280 --> 00:37:50,800
and verify it yourself it's nothing i've

1009
00:37:50,800 --> 00:37:51,760
modified

1010
00:37:51,760 --> 00:37:54,320
but this folder typically doesn't have

1011
00:37:54,320 --> 00:37:55,440
anything

1012
00:37:55,440 --> 00:37:57,599
and oh okay this vm is cleaned up it's

1013
00:37:57,599 --> 00:37:58,800
this

1014
00:37:58,800 --> 00:38:01,920
proc mon log that shows the wrong one

1015
00:38:01,920 --> 00:38:05,119
so here we actually have write

1016
00:38:05,119 --> 00:38:06,320
permissions

1017
00:38:06,320 --> 00:38:09,520
i can create folders i can create

1018
00:38:09,520 --> 00:38:11,599
files i can create anything in this

1019
00:38:11,599 --> 00:38:13,119
folder so i can create

1020
00:38:13,119 --> 00:38:16,560
syslog.so and things like that and that

1021
00:38:16,560 --> 00:38:17,920
means that it's going to

1022
00:38:17,920 --> 00:38:19,440
you know open a handle to it or do

1023
00:38:19,440 --> 00:38:21,440
something interesting and

1024
00:38:21,440 --> 00:38:23,040
i guess i already spoiled it but the

1025
00:38:23,040 --> 00:38:24,640
thing is when it tries to open it it

1026
00:38:24,640 --> 00:38:26,240
loads it as a dll

1027
00:38:26,240 --> 00:38:29,440
so naturally if i put a dll here

1028
00:38:29,440 --> 00:38:32,640
it's going to load it for the sake of a

1029
00:38:32,640 --> 00:38:33,359
demo

1030
00:38:33,359 --> 00:38:35,200
i'll demo that let me just get rid of

1031
00:38:35,200 --> 00:38:36,480
these two

1032
00:38:36,480 --> 00:38:38,800
oops

1033
00:38:42,720 --> 00:38:47,440
yeah yeah delete

1034
00:38:47,440 --> 00:38:51,280
okay so that's fresh so now i can copy

1035
00:38:51,280 --> 00:38:52,160
here

1036
00:38:52,160 --> 00:38:55,520
the dll i had before

1037
00:38:57,359 --> 00:39:00,320
uh rb3.0 i think was one of them that

1038
00:39:00,320 --> 00:39:01,920
tries to load

1039
00:39:01,920 --> 00:39:06,000
that's there and now to exploit this

1040
00:39:06,000 --> 00:39:08,000
i think i can just restart the service i

1041
00:39:08,000 --> 00:39:11,040
don't need to reboot again

1042
00:39:11,040 --> 00:39:15,200
so we have c driver i don't was this one

1043
00:39:15,200 --> 00:39:18,240
something just ran it again

1044
00:39:19,359 --> 00:39:21,440
did it do it on its own you know what

1045
00:39:21,440 --> 00:39:24,320
let's capture events

1046
00:39:24,320 --> 00:39:28,400
there let me run this again

1047
00:39:28,400 --> 00:39:29,760
sometimes you'll find that sometimes you

1048
00:39:29,760 --> 00:39:31,280
won't have to restart anything you'll

1049
00:39:31,280 --> 00:39:32,079
just

1050
00:39:32,079 --> 00:39:35,040
find it on its own

1051
00:39:36,880 --> 00:39:43,839
there i have another pokemon running

1052
00:39:43,920 --> 00:39:46,640
let me modify the filter i think i need

1053
00:39:46,640 --> 00:39:49,119
to remove foxed data again

1054
00:39:49,119 --> 00:39:57,839
okay go away

1055
00:39:58,000 --> 00:40:11,839
okay restart puppet

1056
00:40:18,960 --> 00:40:20,800
and we see it does a whole bunch of

1057
00:40:20,800 --> 00:40:24,880
things if we scroll down

1058
00:40:24,880 --> 00:40:27,680
arbitrary. so so it loads it as an image

1059
00:40:27,680 --> 00:40:28,800
we can see that this

1060
00:40:28,800 --> 00:40:31,839
is a system process spawned by a ruby

1061
00:40:31,839 --> 00:40:33,040
command line

1062
00:40:33,040 --> 00:40:38,160
and if i go to

1063
00:40:38,160 --> 00:40:41,440
you can probably find arbitrary.so which

1064
00:40:41,440 --> 00:40:42,720
lives in

1065
00:40:42,720 --> 00:40:44,560
you know the folder we put and the

1066
00:40:44,560 --> 00:40:46,800
company's to do company names is just

1067
00:40:46,800 --> 00:40:49,599
some dll i created in visual studio but

1068
00:40:49,599 --> 00:40:51,520
that's loaded in a system process now

1069
00:40:51,520 --> 00:40:52,800
and that means we also got code

1070
00:40:52,800 --> 00:40:54,880
execution and there's you know our code

1071
00:40:54,880 --> 00:40:56,060
execution right there

1072
00:40:56,060 --> 00:41:02,800
[Applause]

1073
00:41:02,800 --> 00:41:04,720
so that's another zero day in whatever

1074
00:41:04,720 --> 00:41:06,000
puppet labs is

1075
00:41:06,000 --> 00:41:08,160
um probably some dev thing it was

1076
00:41:08,160 --> 00:41:09,760
installed on the vm so i found that

1077
00:41:09,760 --> 00:41:11,040
pretty funny

1078
00:41:11,040 --> 00:41:14,319
um yeah and i guess

1079
00:41:14,319 --> 00:41:16,480
a key point i'm trying to drive here a

1080
00:41:16,480 --> 00:41:17,839
lot is that

1081
00:41:17,839 --> 00:41:20,880
these are so easy to find like i

1082
00:41:20,880 --> 00:41:22,560
recommend people just pulling down

1083
00:41:22,560 --> 00:41:25,200
avs avs are a great one because they

1084
00:41:25,200 --> 00:41:26,160
typically have like

1085
00:41:26,160 --> 00:41:28,960
10 executables and all these ipc

1086
00:41:28,960 --> 00:41:30,800
mechanisms going on and all these shared

1087
00:41:30,800 --> 00:41:32,880
memory and all these device drivers

1088
00:41:32,880 --> 00:41:34,400
and there's just so much going on in

1089
00:41:34,400 --> 00:41:36,640
them that there's a lot of these

1090
00:41:36,640 --> 00:41:39,599
attack services for them but as seen

1091
00:41:39,599 --> 00:41:41,440
even something like zoom

1092
00:41:41,440 --> 00:41:44,640
whatever puppet labs is um chocolate

1093
00:41:44,640 --> 00:41:46,400
well i guess chocolatey wasn't a vuln

1094
00:41:46,400 --> 00:41:47,599
but

1095
00:41:47,599 --> 00:41:49,280
it was a design decision that we could

1096
00:41:49,280 --> 00:41:51,599
exploit

1097
00:41:51,599 --> 00:41:54,720
another one this is my

1098
00:41:54,720 --> 00:41:58,800
last one is vmware workstation

1099
00:41:58,800 --> 00:42:02,000
this one is a i gotta stop presentation

1100
00:42:02,000 --> 00:42:05,760
again this one is another zero day

1101
00:42:05,760 --> 00:42:08,079
in vmware workstation or at least the

1102
00:42:08,079 --> 00:42:10,000
zero day as of a few days ago so

1103
00:42:10,000 --> 00:42:13,280
i mean probably is still a zero day

1104
00:42:13,280 --> 00:42:16,880
and with that one

1105
00:42:16,880 --> 00:42:19,200
if we go add or remove programs after

1106
00:42:19,200 --> 00:42:21,359
vmware workstation is installed

1107
00:42:21,359 --> 00:42:24,480
and we find vmware workstation this one

1108
00:42:24,480 --> 00:42:28,319
is pretty much like the zoom one

1109
00:42:28,319 --> 00:42:30,560
but you would find it in a different

1110
00:42:30,560 --> 00:42:31,760
manner so to speak

1111
00:42:31,760 --> 00:42:33,680
so if we go vmware workstation and we

1112
00:42:33,680 --> 00:42:35,920
hit modify

1113
00:42:35,920 --> 00:42:39,119
this will also auto elevate the system

1114
00:42:39,119 --> 00:42:41,839
so as a low privileged user we can get

1115
00:42:41,839 --> 00:42:43,440
the application to do stuff

1116
00:42:43,440 --> 00:42:47,040
as system which means we can be very

1117
00:42:47,040 --> 00:42:49,440
i guess scrutiness in what it does

1118
00:42:49,440 --> 00:42:50,400
because everything it does is

1119
00:42:50,400 --> 00:42:51,920
potentially dangerous if it's doing it

1120
00:42:51,920 --> 00:42:53,040
as system

1121
00:42:53,040 --> 00:42:57,119
if we hit repair now this

1122
00:42:57,119 --> 00:42:59,680
takes like a minute because it does a

1123
00:42:59,680 --> 00:43:00,720
lot of stuff

1124
00:43:00,720 --> 00:43:04,319
so i've pre-prepared a procmond

1125
00:43:04,319 --> 00:43:06,560
capture of this just so we don't have to

1126
00:43:06,560 --> 00:43:07,520
sit through

1127
00:43:07,520 --> 00:43:10,000
the entire thing but you could do this

1128
00:43:10,000 --> 00:43:11,280
yourself in your own time if you wanted

1129
00:43:11,280 --> 00:43:14,079
to verify it

1130
00:43:14,480 --> 00:43:19,760
and what we'll notice is a quick point

1131
00:43:19,760 --> 00:43:21,359
so there's one example here where it

1132
00:43:21,359 --> 00:43:22,880
tries to load

1133
00:43:22,880 --> 00:43:26,560
this dll from our app data path

1134
00:43:26,560 --> 00:43:29,680
now the name is of the folder is kind of

1135
00:43:29,680 --> 00:43:31,359
randomized

1136
00:43:31,359 --> 00:43:34,000
but there's been vulnerabilities where

1137
00:43:34,000 --> 00:43:36,160
they'll use a randomized path

1138
00:43:36,160 --> 00:43:38,560
but we can race condition this by having

1139
00:43:38,560 --> 00:43:40,000
our own executable

1140
00:43:40,000 --> 00:43:42,240
search for newly created folders and

1141
00:43:42,240 --> 00:43:44,000
then in newly created folders

1142
00:43:44,000 --> 00:43:46,400
we just drop a dll of this name such

1143
00:43:46,400 --> 00:43:48,000
that most of the time we're going to win

1144
00:43:48,000 --> 00:43:49,520
the race and when it tries to load this

1145
00:43:49,520 --> 00:43:50,400
dll

1146
00:43:50,400 --> 00:43:52,720
it will load ldl i've had that

1147
00:43:52,720 --> 00:43:54,560
vulnerability in a lot of other software

1148
00:43:54,560 --> 00:43:56,240
as well

1149
00:43:56,240 --> 00:43:59,119
in this case vmware can kind of get away

1150
00:43:59,119 --> 00:43:59,839
with it

1151
00:43:59,839 --> 00:44:02,319
because the folder it creates it creates

1152
00:44:02,319 --> 00:44:04,240
with a restrictive acl

1153
00:44:04,240 --> 00:44:07,680
that we cannot write to so

1154
00:44:07,680 --> 00:44:09,040
i haven't really looked into bypassing

1155
00:44:09,040 --> 00:44:11,200
this much potentially there are bypasses

1156
00:44:11,200 --> 00:44:12,960
obviously if you create the folder

1157
00:44:12,960 --> 00:44:14,880
before vmware creates it

1158
00:44:14,880 --> 00:44:17,200
that's potentially something how long is

1159
00:44:17,200 --> 00:44:18,000
this one two

1160
00:44:18,000 --> 00:44:20,319
three four five six seven it's seven

1161
00:44:20,319 --> 00:44:21,440
digits

1162
00:44:21,440 --> 00:44:22,880
potentially you could create every

1163
00:44:22,880 --> 00:44:24,960
single folder name seven character seven

1164
00:44:24,960 --> 00:44:25,920
digits along

1165
00:44:25,920 --> 00:44:29,359
especially if it conforms to like six

1166
00:44:29,359 --> 00:44:30,800
you know eight to zero characters and

1167
00:44:30,800 --> 00:44:32,480
then one number or something if you find

1168
00:44:32,480 --> 00:44:33,599
a pattern like that

1169
00:44:33,599 --> 00:44:34,960
you can kind of just brute force the

1170
00:44:34,960 --> 00:44:37,119
folder creation and then run this

1171
00:44:37,119 --> 00:44:39,440
msi and then hope that it uses a folder

1172
00:44:39,440 --> 00:44:41,200
name that you already have existing

1173
00:44:41,200 --> 00:44:44,319
and depending on how it handles that it

1174
00:44:44,319 --> 00:44:46,240
may not delete it or do something secure

1175
00:44:46,240 --> 00:44:48,000
it might just access the dll from there

1176
00:44:48,000 --> 00:44:49,359
and you get a brief ask

1177
00:44:49,359 --> 00:44:50,960
i haven't actually tested that on this

1178
00:44:50,960 --> 00:44:52,400
so i have no idea if that's the case in

1179
00:44:52,400 --> 00:44:53,520
this scenario

1180
00:44:53,520 --> 00:44:55,040
but it's something to keep in mind when

1181
00:44:55,040 --> 00:44:58,000
you see something like this

1182
00:44:58,480 --> 00:45:01,040
but something else interesting happens

1183
00:45:01,040 --> 00:45:03,280
if we go down

1184
00:45:03,280 --> 00:45:05,839
we see that it tries to access this c

1185
00:45:05,839 --> 00:45:06,560
drive

1186
00:45:06,560 --> 00:45:10,560
var run vmware host d ticket

1187
00:45:10,560 --> 00:45:12,240
i mean i'm not sure if that's supposed

1188
00:45:12,240 --> 00:45:14,000
to be like something it installs on

1189
00:45:14,000 --> 00:45:14,800
linux

1190
00:45:14,800 --> 00:45:17,839
i have no idea c drive var run

1191
00:45:17,839 --> 00:45:19,280
isn't really something that's going to

1192
00:45:19,280 --> 00:45:20,880
exist on windows

1193
00:45:20,880 --> 00:45:22,800
and it's not something that it installs

1194
00:45:22,800 --> 00:45:23,920
on windows

1195
00:45:23,920 --> 00:45:28,240
so that's odd but

1196
00:45:28,240 --> 00:45:31,359
spoiler alert when it finds this

1197
00:45:31,359 --> 00:45:33,440
it'll do certain parsing i'm not sure if

1198
00:45:33,440 --> 00:45:34,400
it's looking for anything else

1199
00:45:34,400 --> 00:45:34,960
interesting

1200
00:45:34,960 --> 00:45:36,800
but i know one thing it does is it'll

1201
00:45:36,800 --> 00:45:38,160
delete the folder

1202
00:45:38,160 --> 00:45:40,319
so one thing we can do to exploit this

1203
00:45:40,319 --> 00:45:42,480
again is do the whole symlink thing

1204
00:45:42,480 --> 00:45:43,200
where

1205
00:45:43,200 --> 00:45:46,000
run points to rpc control and vmware

1206
00:45:46,000 --> 00:45:48,560
host d ticket points to

1207
00:45:48,560 --> 00:45:51,680
any arbitrary folder

1208
00:45:51,680 --> 00:45:54,560
and when it finds that you'll just

1209
00:45:54,560 --> 00:45:55,680
delete it

1210
00:45:55,680 --> 00:45:59,040
and that's another arbitrary folder

1211
00:45:59,040 --> 00:46:00,480
deletion

1212
00:46:00,480 --> 00:46:03,680
zero day in

1213
00:46:03,839 --> 00:46:07,040
in vmware and like i said i gave an

1214
00:46:07,040 --> 00:46:08,880
example before of exploiting this

1215
00:46:08,880 --> 00:46:10,880
via chocolaty just because of the fun

1216
00:46:10,880 --> 00:46:12,400
fact it was installed and i found that

1217
00:46:12,400 --> 00:46:13,359
pretty funny

1218
00:46:13,359 --> 00:46:16,640
in program data of all places

1219
00:46:16,640 --> 00:46:18,560
but there are definitely core windows

1220
00:46:18,560 --> 00:46:19,839
locations where you can

1221
00:46:19,839 --> 00:46:21,760
leverage this as well so those could be

1222
00:46:21,760 --> 00:46:24,640
fun to look at too

1223
00:46:26,000 --> 00:46:27,920
for the sake of time i'm not going to

1224
00:46:27,920 --> 00:46:29,920
demo that one i already demoed the zoom

1225
00:46:29,920 --> 00:46:30,960
version

1226
00:46:30,960 --> 00:46:32,800
so feel free to try that yourself if you

1227
00:46:32,800 --> 00:46:36,000
have vmware installed

1228
00:46:39,760 --> 00:46:41,200
if i go back to some of the key

1229
00:46:41,200 --> 00:46:43,119
takeaways that i had in mind

1230
00:46:43,119 --> 00:46:47,920
when doing this is i kind of want to

1231
00:46:47,920 --> 00:46:50,319
i guess demystify the fact that

1232
00:46:50,319 --> 00:46:51,520
vulnerability research

1233
00:46:51,520 --> 00:46:53,440
especially on logic vulnerabilities

1234
00:46:53,440 --> 00:46:55,280
which aren't things that are like

1235
00:46:55,280 --> 00:46:57,520
heavily fuzzed in these applications

1236
00:46:57,520 --> 00:46:58,960
especially in some third-party

1237
00:46:58,960 --> 00:47:01,040
applications like zoom i don't know many

1238
00:47:01,040 --> 00:47:01,839
people that are

1239
00:47:01,839 --> 00:47:05,359
like logic von hunting prevests in zoom

1240
00:47:05,359 --> 00:47:08,240
people will be fuzzing for rces and

1241
00:47:08,240 --> 00:47:09,359
things like that

1242
00:47:09,359 --> 00:47:11,520
but some of these other types just

1243
00:47:11,520 --> 00:47:13,839
aren't heavily looked at

1244
00:47:13,839 --> 00:47:16,720
and they are very easy to identify and

1245
00:47:16,720 --> 00:47:18,400
exploit if you know these kind of

1246
00:47:18,400 --> 00:47:19,359
mechanisms

1247
00:47:19,359 --> 00:47:21,280
or these common weaknesses as to what to

1248
00:47:21,280 --> 00:47:23,599
look at all the vons that i've presented

1249
00:47:23,599 --> 00:47:25,359
in here all the zero days and even the

1250
00:47:25,359 --> 00:47:26,240
end days

1251
00:47:26,240 --> 00:47:28,960
took me most of them less than a day to

1252
00:47:28,960 --> 00:47:30,079
to go from

1253
00:47:30,079 --> 00:47:32,160
downloading and installing the software

1254
00:47:32,160 --> 00:47:33,920
and then finding and actually exploiting

1255
00:47:33,920 --> 00:47:34,480
the bug

1256
00:47:34,480 --> 00:47:38,079
and that is super quick and these also

1257
00:47:38,079 --> 00:47:39,920
affect lots of software like we saw

1258
00:47:39,920 --> 00:47:41,119
vmware we saw

1259
00:47:41,119 --> 00:47:42,640
zoom which is probably installed in most

1260
00:47:42,640 --> 00:47:44,400
people's machines these days

1261
00:47:44,400 --> 00:47:47,040
we have lots of other third-party

1262
00:47:47,040 --> 00:47:48,559
products that

1263
00:47:48,559 --> 00:47:51,119
i can't really talk about but avs as a

1264
00:47:51,119 --> 00:47:52,000
general is another

1265
00:47:52,000 --> 00:47:55,440
big one um but really

1266
00:47:55,440 --> 00:47:57,920
like anything kind of is affected by

1267
00:47:57,920 --> 00:47:59,520
this it's very hard for me to pull down

1268
00:47:59,520 --> 00:48:00,319
software

1269
00:48:00,319 --> 00:48:02,000
and be like okay it has no logic bonds

1270
00:48:02,000 --> 00:48:04,400
at all and as mentioned earlier this

1271
00:48:04,400 --> 00:48:07,599
isn't something unique to windows

1272
00:48:07,599 --> 00:48:09,520
i've found similar things on mac as

1273
00:48:09,520 --> 00:48:11,359
explored before and although i haven't

1274
00:48:11,359 --> 00:48:12,640
looked at these

1275
00:48:12,640 --> 00:48:15,680
much at all on linux and even on mac

1276
00:48:15,680 --> 00:48:17,440
i suspect there are very common logic

1277
00:48:17,440 --> 00:48:20,559
bonds like this there as well

1278
00:48:20,559 --> 00:48:22,800
in terms of the future of these sort of

1279
00:48:22,800 --> 00:48:23,760
bugs

1280
00:48:23,760 --> 00:48:25,920
anyone interested in the hard link side

1281
00:48:25,920 --> 00:48:27,440
of things there used to be lots of hard

1282
00:48:27,440 --> 00:48:28,160
link

1283
00:48:28,160 --> 00:48:31,599
bugs where you could create a hard link

1284
00:48:31,599 --> 00:48:33,839
from a file to any other file even if

1285
00:48:33,839 --> 00:48:35,040
you didn't have access

1286
00:48:35,040 --> 00:48:37,760
to that file like write access to it and

1287
00:48:37,760 --> 00:48:38,400
then

1288
00:48:38,400 --> 00:48:40,160
processors would do things like set

1289
00:48:40,160 --> 00:48:42,160
permissive acls on that file

1290
00:48:42,160 --> 00:48:43,760
and that would apply to the file you had

1291
00:48:43,760 --> 00:48:45,280
linked to and things like that

1292
00:48:45,280 --> 00:48:46,720
i didn't really touch on that much

1293
00:48:46,720 --> 00:48:48,400
because those have been mitigated in

1294
00:48:48,400 --> 00:48:49,119
windows

1295
00:48:49,119 --> 00:48:52,240
by a patch i think

1296
00:48:52,240 --> 00:48:54,079
towards the start of last year it might

1297
00:48:54,079 --> 00:48:55,680
have been when that started to get

1298
00:48:55,680 --> 00:48:56,880
squashed

1299
00:48:56,880 --> 00:48:58,480
and i would actually expect more

1300
00:48:58,480 --> 00:49:00,000
mitigations to follow

1301
00:49:00,000 --> 00:49:02,000
simply because that these types of bug

1302
00:49:02,000 --> 00:49:03,760
classes well at least the junctions like

1303
00:49:03,760 --> 00:49:05,440
some of the logic things we saw where

1304
00:49:05,440 --> 00:49:08,559
just loads of dll from some directory

1305
00:49:08,559 --> 00:49:09,920
i don't think windows can do much about

1306
00:49:09,920 --> 00:49:12,319
that um they are trying to do some

1307
00:49:12,319 --> 00:49:14,960
things around to like the system 10 path

1308
00:49:14,960 --> 00:49:16,880
but in regards to the junction stuff we

1309
00:49:16,880 --> 00:49:19,359
saw the folder level redirection

1310
00:49:19,359 --> 00:49:21,680
i know mitigations on that are being

1311
00:49:21,680 --> 00:49:22,880
actively looked at

1312
00:49:22,880 --> 00:49:24,880
so i would kind of expect something

1313
00:49:24,880 --> 00:49:26,559
around that to be mitigated in the

1314
00:49:26,559 --> 00:49:27,359
future

1315
00:49:27,359 --> 00:49:29,440
but currently it's something that kind

1316
00:49:29,440 --> 00:49:32,720
of plagues a lot of software

1317
00:49:32,720 --> 00:49:34,800
so yeah in the meantime there's still

1318
00:49:34,800 --> 00:49:36,640
many popular many of those bugs in

1319
00:49:36,640 --> 00:49:38,319
popular software

1320
00:49:38,319 --> 00:49:41,359
like i said we saw that c drive var run

1321
00:49:41,359 --> 00:49:43,680
example from vmware they also open c

1322
00:49:43,680 --> 00:49:44,720
drive device

1323
00:49:44,720 --> 00:49:46,800
or c drive other folders that just don't

1324
00:49:46,800 --> 00:49:49,119
exist not realizing i guess

1325
00:49:49,119 --> 00:49:51,359
that low privileged users can create

1326
00:49:51,359 --> 00:49:52,160
folders in c

1327
00:49:52,160 --> 00:49:55,359
drive and yeah i hope you enjoyed my

1328
00:49:55,359 --> 00:49:59,839
talk that was all i had for today

1329
00:50:06,559 --> 00:50:08,720
such a great presentation really really

1330
00:50:08,720 --> 00:50:09,680
enjoyable to see

1331
00:50:09,680 --> 00:50:11,440
uh so many zero days drop in one

1332
00:50:11,440 --> 00:50:13,280
presentation so that's really cool

1333
00:50:13,280 --> 00:50:14,880
uh we have a few questions i believe

1334
00:50:14,880 --> 00:50:16,240
you've already the first question that

1335
00:50:16,240 --> 00:50:17,680
we've got

1336
00:50:17,680 --> 00:50:19,200
i believe you've already answered this

1337
00:50:19,200 --> 00:50:20,720
so but i'll just repeat it anyway and it

1338
00:50:20,720 --> 00:50:21,760
talks about um

1339
00:50:21,760 --> 00:50:24,880
this person uh risen i think is the name

1340
00:50:24,880 --> 00:50:28,240
on on slack he's asked

1341
00:50:28,400 --> 00:50:30,480
microsoft uh he believes doesn't

1342
00:50:30,480 --> 00:50:31,920
consider some link abuse

1343
00:50:31,920 --> 00:50:33,920
vulnerabilities anymore in the latest

1344
00:50:33,920 --> 00:50:35,119
insider builds

1345
00:50:35,119 --> 00:50:36,240
uh do you see this category of

1346
00:50:36,240 --> 00:50:37,680
vulnerabilities disappearing in the near

1347
00:50:37,680 --> 00:50:38,800
future if you believe

1348
00:50:38,800 --> 00:50:40,480
the mitigation putting places out of it

1349
00:50:40,480 --> 00:50:41,920
i think you've answered that but did you

1350
00:50:41,920 --> 00:50:43,599
want to add any more comments

1351
00:50:43,599 --> 00:50:46,720
yeah um so i can't speak so this is my

1352
00:50:46,720 --> 00:50:48,160
personal experience i can't speak on

1353
00:50:48,160 --> 00:50:50,559
behalf of microsoft because i don't work

1354
00:50:50,559 --> 00:50:52,800
a lot in that mitigation space i know

1355
00:50:52,800 --> 00:50:53,680
that typically

1356
00:50:53,680 --> 00:50:54,880
even with hard links and things like

1357
00:50:54,880 --> 00:50:57,359
that typically when you see something

1358
00:50:57,359 --> 00:50:58,880
like that in my mind where they're not

1359
00:50:58,880 --> 00:50:59,839
accepting it

1360
00:50:59,839 --> 00:51:01,440
it's because they're already looking

1361
00:51:01,440 --> 00:51:03,760
into broader mitigations as a whole that

1362
00:51:03,760 --> 00:51:05,680
mitigates the entire bug class

1363
00:51:05,680 --> 00:51:07,280
which is why they won't accept

1364
00:51:07,280 --> 00:51:08,720
individual bugs

1365
00:51:08,720 --> 00:51:11,040
but that said if i look at zdi and type

1366
00:51:11,040 --> 00:51:12,480
in junction i still see

1367
00:51:12,480 --> 00:51:14,400
heaps of junction related bugs i'm not

1368
00:51:14,400 --> 00:51:15,839
sure if that's just because it's a zdi

1369
00:51:15,839 --> 00:51:16,880
thing

1370
00:51:16,880 --> 00:51:18,800
i know microsoft also has some

1371
00:51:18,800 --> 00:51:20,000
differences between

1372
00:51:20,000 --> 00:51:23,920
if it's a sandbox escape as well as a um

1373
00:51:23,920 --> 00:51:27,040
just a proversk um in my mind

1374
00:51:27,040 --> 00:51:28,640
obviously there's still all bugs that

1375
00:51:28,640 --> 00:51:30,240
you can exploit so there's still valid

1376
00:51:30,240 --> 00:51:31,760
lps today

1377
00:51:31,760 --> 00:51:34,880
and that's my personal view um but i

1378
00:51:34,880 --> 00:51:36,400
would definitely expect

1379
00:51:36,400 --> 00:51:38,319
that that just because that mitigations

1380
00:51:38,319 --> 00:51:39,920
are coming but that's just my personal

1381
00:51:39,920 --> 00:51:41,359
view i don't actually have any

1382
00:51:41,359 --> 00:51:43,599
work related insight into that couple

1383
00:51:43,599 --> 00:51:44,400
more questions

1384
00:51:44,400 --> 00:51:47,119
uh can you use make link instead of the

1385
00:51:47,119 --> 00:51:48,720
project zero tools for making those

1386
00:51:48,720 --> 00:51:50,319
links and junctions

1387
00:51:50,319 --> 00:51:54,480
yep so in some cases yes in some cases

1388
00:51:54,480 --> 00:51:58,480
no so the make link tool

1389
00:51:58,480 --> 00:52:01,520
by renders i think james faulco touched

1390
00:52:01,520 --> 00:52:03,760
on this as well in some of his blogs

1391
00:52:03,760 --> 00:52:05,680
have certain checks in them that

1392
00:52:05,680 --> 00:52:07,440
restrict what you can do with them but

1393
00:52:07,440 --> 00:52:09,119
those checks are in the tool itself

1394
00:52:09,119 --> 00:52:10,480
they're not really

1395
00:52:10,480 --> 00:52:12,079
enforced on like the kernel side of

1396
00:52:12,079 --> 00:52:14,000
things so for some things for some

1397
00:52:14,000 --> 00:52:15,839
junctions you can do like make links

1398
00:52:15,839 --> 00:52:18,000
j and just point it anywhere you can

1399
00:52:18,000 --> 00:52:20,559
create a junction like that that's true

1400
00:52:20,559 --> 00:52:22,079
i typically just use the symbolic

1401
00:52:22,079 --> 00:52:23,760
testing tools because i

1402
00:52:23,760 --> 00:52:25,520
remember there being some scenarios

1403
00:52:25,520 --> 00:52:26,800
where those tools

1404
00:52:26,800 --> 00:52:28,800
by google project zero don't have

1405
00:52:28,800 --> 00:52:30,319
certain checks in them that the windows

1406
00:52:30,319 --> 00:52:32,000
toolset does um

1407
00:52:32,000 --> 00:52:33,200
what those checks were from the top of

1408
00:52:33,200 --> 00:52:34,800
my head i don't know but i recommend

1409
00:52:34,800 --> 00:52:36,400
looking at james forshaw's blog

1410
00:52:36,400 --> 00:52:38,319
blogs because i reckon i'm pretty sure

1411
00:52:38,319 --> 00:52:40,880
he has those detailed in his blogs

1412
00:52:40,880 --> 00:52:43,119
a couple more questions uh by nathan

1413
00:52:43,119 --> 00:52:44,079
riley for this one

1414
00:52:44,079 --> 00:52:46,319
why are these considered drones in 30

1415
00:52:46,319 --> 00:52:47,520
third-party apps

1416
00:52:47,520 --> 00:52:51,200
instead of the msi installer framework

1417
00:52:51,200 --> 00:52:54,160
yep so all msi i guess the framework

1418
00:52:54,160 --> 00:52:56,559
does in this case is allow the process

1419
00:52:56,559 --> 00:52:58,960
to elevate the system now if that

1420
00:52:58,960 --> 00:53:00,000
process decides

1421
00:53:00,000 --> 00:53:03,200
to use paths in program data or in c

1422
00:53:03,200 --> 00:53:06,400
drive device or in the user's app data

1423
00:53:06,400 --> 00:53:08,000
my personal views that's the program's

1424
00:53:08,000 --> 00:53:10,800
choice the program could easily have

1425
00:53:10,800 --> 00:53:13,520
operated in c drive program files and

1426
00:53:13,520 --> 00:53:14,559
its own folder which

1427
00:53:14,559 --> 00:53:16,079
low privileged users shouldn't be able

1428
00:53:16,079 --> 00:53:17,760
to modify anything in c drive program

1429
00:53:17,760 --> 00:53:19,520
files

1430
00:53:19,520 --> 00:53:21,119
so the fact that it's doing arbitrary

1431
00:53:21,119 --> 00:53:23,200
deletions on c drive var

1432
00:53:23,200 --> 00:53:26,720
run vmware host d ticket that's not

1433
00:53:26,720 --> 00:53:27,599
something

1434
00:53:27,599 --> 00:53:28,960
that i see as a responsibility of

1435
00:53:28,960 --> 00:53:30,559
microsoft to reinforce that's something

1436
00:53:30,559 --> 00:53:32,319
that the programmer who coded up

1437
00:53:32,319 --> 00:53:34,559
this msi code in the first place to the

1438
00:53:34,559 --> 00:53:35,680
custom dll

1439
00:53:35,680 --> 00:53:38,240
that lives in there has decided to do

1440
00:53:38,240 --> 00:53:40,000
and they could easily decide not to

1441
00:53:40,000 --> 00:53:41,440
operate on those

1442
00:53:41,440 --> 00:53:44,400
i guess weak paths and i suppose that

1443
00:53:44,400 --> 00:53:45,760
that brings us probably to the final

1444
00:53:45,760 --> 00:53:46,480
question and

1445
00:53:46,480 --> 00:53:47,760
i guess you'd answer this in part

1446
00:53:47,760 --> 00:53:50,079
already by that answer that you just

1447
00:53:50,079 --> 00:53:50,480
gave

1448
00:53:50,480 --> 00:53:52,880
and the the question is by will i and he

1449
00:53:52,880 --> 00:53:53,520
asks

1450
00:53:53,520 --> 00:53:55,760
oh uh asks you said it's a mistake to do

1451
00:53:55,760 --> 00:53:57,920
file i o with pre-written paths

1452
00:53:57,920 --> 00:53:59,680
assuming the file there is what you

1453
00:53:59,680 --> 00:54:00,800
expect it to be but what's the

1454
00:54:00,800 --> 00:54:01,760
alternative

1455
00:54:01,760 --> 00:54:04,319
for developers yep so that all relies on

1456
00:54:04,319 --> 00:54:06,640
the security of the path to begin with

1457
00:54:06,640 --> 00:54:08,640
so when you're writing as a system user

1458
00:54:08,640 --> 00:54:11,200
c drive is going to point to c drive

1459
00:54:11,200 --> 00:54:13,680
um if you're writing as a in the context

1460
00:54:13,680 --> 00:54:14,400
of a

1461
00:54:14,400 --> 00:54:16,800
specific user account they can redirect

1462
00:54:16,800 --> 00:54:18,720
c drive to point to something else

1463
00:54:18,720 --> 00:54:20,720
so if you're concerned about that you

1464
00:54:20,720 --> 00:54:22,000
can run a system

1465
00:54:22,000 --> 00:54:24,240
and then in regards of turning the

1466
00:54:24,240 --> 00:54:26,160
folders to directory junk

1467
00:54:26,160 --> 00:54:28,559
directory junctions that can only happen

1468
00:54:28,559 --> 00:54:30,000
depending on the acl

1469
00:54:30,000 --> 00:54:32,480
so for example if a process as system

1470
00:54:32,480 --> 00:54:33,680
tries to access c

1471
00:54:33,680 --> 00:54:36,720
drive program files my folder

1472
00:54:36,720 --> 00:54:38,960
me as a regular user shouldn't have any

1473
00:54:38,960 --> 00:54:40,240
control over

1474
00:54:40,240 --> 00:54:42,400
changing that c drive program files into

1475
00:54:42,400 --> 00:54:44,240
a junction because i'll need permissions

1476
00:54:44,240 --> 00:54:46,480
to modify that folder in the first place

1477
00:54:46,480 --> 00:54:47,920
and regular users do not have that

1478
00:54:47,920 --> 00:54:49,839
permission if you're operating in c

1479
00:54:49,839 --> 00:54:53,040
drive program data then or even in c

1480
00:54:53,040 --> 00:54:54,720
drive program files but where the

1481
00:54:54,720 --> 00:54:55,839
process has

1482
00:54:55,839 --> 00:54:58,480
specifically applied a rig acl which

1483
00:54:58,480 --> 00:55:00,240
i've seen before i've seen programs live

1484
00:55:00,240 --> 00:55:01,839
in c drive program files

1485
00:55:01,839 --> 00:55:04,400
and they've added their own weak acl to

1486
00:55:04,400 --> 00:55:06,559
a specific folder path allowing regular

1487
00:55:06,559 --> 00:55:08,559
users to modify that folder

1488
00:55:08,559 --> 00:55:10,799
and that's kind of there and false for

1489
00:55:10,799 --> 00:55:12,480
weakening the acl

1490
00:55:12,480 --> 00:55:13,920
if they want to be sure that it's safe

1491
00:55:13,920 --> 00:55:15,920
they should use paths that they either

1492
00:55:15,920 --> 00:55:16,319
know

1493
00:55:16,319 --> 00:55:18,400
are hardened by acls by windows like in

1494
00:55:18,400 --> 00:55:20,160
c drive program files

1495
00:55:20,160 --> 00:55:22,880
or they apply their own acl on creation

1496
00:55:22,880 --> 00:55:25,119
and kind of treat it securely like that

1497
00:55:25,119 --> 00:55:27,200
if you're operating on directories that

1498
00:55:27,200 --> 00:55:28,640
by default the user

1499
00:55:28,640 --> 00:55:30,799
will likely have permissions on in like

1500
00:55:30,799 --> 00:55:33,200
the user's own app data folder as we saw

1501
00:55:33,200 --> 00:55:34,000
zoom operate

1502
00:55:34,000 --> 00:55:35,839
on where it operates on a user's app

1503
00:55:35,839 --> 00:55:38,160
data folder without any special acls on

1504
00:55:38,160 --> 00:55:38,640
there

1505
00:55:38,640 --> 00:55:41,119
that is a known path where users have

1506
00:55:41,119 --> 00:55:42,160
read and write access

1507
00:55:42,160 --> 00:55:44,319
to so that should be known to developer

1508
00:55:44,319 --> 00:55:46,240
not to do anything sensitive in there

1509
00:55:46,240 --> 00:55:48,000
when they're running a system so that's

1510
00:55:48,000 --> 00:55:49,440
kind of just a uh

1511
00:55:49,440 --> 00:55:50,720
something to keep in mind when you're

1512
00:55:50,720 --> 00:55:53,040
doing those privileged operations

1513
00:55:53,040 --> 00:55:54,799
yeah great presentation a great answer

1514
00:55:54,799 --> 00:55:56,319
to all of those questions really like

1515
00:55:56,319 --> 00:55:58,319
the slack question so keep them coming

1516
00:55:58,319 --> 00:56:00,319
but let's all thank christopher one more

1517
00:56:00,319 --> 00:56:03,839
time for a great presentation

