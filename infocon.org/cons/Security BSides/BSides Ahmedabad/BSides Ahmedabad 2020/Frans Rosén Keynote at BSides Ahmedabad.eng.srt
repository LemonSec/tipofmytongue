1
00:00:03,760 --> 00:00:07,050
[Music]

2
00:00:29,070 --> 00:00:37,280
[Music]

3
00:00:30,030 --> 00:00:37,280
[Applause]

4
00:00:49,830 --> 00:00:52,909
[Music]

5
00:00:57,220 --> 00:01:05,239
we had before being here today and to do

6
00:01:01,520 --> 00:01:07,100
the keynote talk this is my title I

7
00:01:05,239 --> 00:01:09,170
methodology using fussing and in full

8
00:01:07,100 --> 00:01:11,270
disclosure so I haven't done this talk

9
00:01:09,170 --> 00:01:12,850
before this is the first time I wanted

10
00:01:11,270 --> 00:01:15,860
to make something special for you guys

11
00:01:12,850 --> 00:01:19,160
so I hope you're gonna enjoy this I will

12
00:01:15,860 --> 00:01:20,840
have some time after for questions and I

13
00:01:19,160 --> 00:01:23,990
really want to see the hands in the air

14
00:01:20,840 --> 00:01:29,750
like have some really fun questions so

15
00:01:23,990 --> 00:01:32,179
my name is France I try to be open and

16
00:01:29,750 --> 00:01:34,280
talking about stuff for in the back row

17
00:01:32,179 --> 00:01:36,259
like in the part from the community I

18
00:01:34,280 --> 00:01:38,090
work as a security adviser at the

19
00:01:36,259 --> 00:01:40,160
company called detective fire I'm also

20
00:01:38,090 --> 00:01:42,229
CTO another a company called Sentra

21
00:01:40,160 --> 00:01:44,990
which is not doing like security related

22
00:01:42,229 --> 00:01:46,940
stuff with more ecommerce stuff I do a

23
00:01:44,990 --> 00:01:50,568
lot of hacking on hacker one in bugcrowd

24
00:01:46,940 --> 00:01:52,729
and some of the cynic some cobalt as

25
00:01:50,569 --> 00:01:54,860
well but I'm trying to like be all over

26
00:01:52,729 --> 00:01:57,229
the place trying to identify where to

27
00:01:54,860 --> 00:02:00,140
look for stuff and want to actually find

28
00:01:57,229 --> 00:02:03,200
and the idea of coming here today is

29
00:02:00,140 --> 00:02:06,229
that there's been a lot of advices you

30
00:02:03,200 --> 00:02:08,810
know for like fussing stuff for looking

31
00:02:06,229 --> 00:02:10,848
for information or trying to hack a

32
00:02:08,810 --> 00:02:14,060
bunch of companies and I had some really

33
00:02:10,848 --> 00:02:17,089
fun examples that I wanted to to talk

34
00:02:14,060 --> 00:02:19,310
about and you all guys know the drill

35
00:02:17,090 --> 00:02:21,500
right as soon as you find something on a

36
00:02:19,310 --> 00:02:24,290
private program you can't talk about it

37
00:02:21,500 --> 00:02:24,660
and that's so boring I don't want to do

38
00:02:24,290 --> 00:02:27,060
that

39
00:02:24,660 --> 00:02:30,420
I don't want to like try to censor all

40
00:02:27,060 --> 00:02:32,250
the images and try to explain why or

41
00:02:30,420 --> 00:02:34,049
like it's let's focus on the

42
00:02:32,250 --> 00:02:35,850
vulnerabilities instead the companies

43
00:02:34,050 --> 00:02:39,870
doesn't really matter in this case so

44
00:02:35,850 --> 00:02:42,750
what I want us to do I want us to

45
00:02:39,870 --> 00:02:44,640
actually make up an imaginary app and I

46
00:02:42,750 --> 00:02:47,610
will try and see if we can do this

47
00:02:44,640 --> 00:02:50,429
together and the whole idea is that this

48
00:02:47,610 --> 00:02:52,890
app will be so generic so you can kind

49
00:02:50,430 --> 00:02:55,230
of apply the bugs that we will talk

50
00:02:52,890 --> 00:02:57,420
about which is really like bubs you can

51
00:02:55,230 --> 00:03:08,530
apply it to this but there's no way you

52
00:02:57,420 --> 00:03:22,279
might be like into a real company so

53
00:03:08,530 --> 00:03:22,280
[Music]

54
00:03:22,910 --> 00:03:29,299
this is just this is not this is not

55
00:03:52,580 --> 00:03:55,709
[Music]

56
00:03:55,940 --> 00:04:02,780
as soon as you start using this hat it

57
00:03:59,000 --> 00:04:05,990
will make requests to three other places

58
00:04:02,780 --> 00:04:09,650
in witness API no examples for fetching

59
00:04:05,990 --> 00:04:12,290
user data and use like who is who is

60
00:04:09,650 --> 00:04:14,510
your spirit user what other users are

61
00:04:12,290 --> 00:04:18,048
there what company are you signing with

62
00:04:14,510 --> 00:04:21,320
etc etc on this business topics and

63
00:04:18,048 --> 00:04:24,710
about comics you can also subscribe for

64
00:04:21,320 --> 00:04:26,360
different subscription fantasy so you

65
00:04:24,710 --> 00:04:28,789
will be able to add your credit card and

66
00:04:26,360 --> 00:04:31,820
you will able to download existing

67
00:04:28,790 --> 00:04:34,610
invoices and this company they wanted to

68
00:04:31,820 --> 00:04:36,469
think in a micro service architecture so

69
00:04:34,610 --> 00:04:39,920
what they did was they outsource the

70
00:04:36,470 --> 00:04:42,470
invoice 10 points to be only provided

71
00:04:39,920 --> 00:04:44,960
named around and kind of invoices you as

72
00:04:42,470 --> 00:04:46,640
a company so that is not service through

73
00:04:44,960 --> 00:04:48,919
the API and the example of comm it's

74
00:04:46,640 --> 00:04:50,810
served on the invoice example all these

75
00:04:48,920 --> 00:04:53,030
requests are making sure that they're

76
00:04:50,810 --> 00:04:54,560
using proper authentication tokens and

77
00:04:53,030 --> 00:04:56,780
everything so there's no like

78
00:04:54,560 --> 00:04:58,940
authentication issue with this design

79
00:04:56,780 --> 00:05:00,440
because it's always making sure that

80
00:04:58,940 --> 00:05:04,460
it's sending the proper authentication

81
00:05:00,440 --> 00:05:07,219
headers the third thing is this pass is

82
00:05:04,460 --> 00:05:10,099
you can talk together with other people

83
00:05:07,220 --> 00:05:11,720
in this in this app so you can send EMS

84
00:05:10,100 --> 00:05:13,970
basic

85
00:05:11,720 --> 00:05:15,680
and they wanted to build that as a

86
00:05:13,970 --> 00:05:18,350
different team it was a different team

87
00:05:15,680 --> 00:05:20,330
dedicated for doing the conversation end

88
00:05:18,350 --> 00:05:23,419
point so they added another supplement

89
00:05:20,330 --> 00:05:24,948
that would only integrate with you know

90
00:05:23,419 --> 00:05:28,340
fetching messages or fetching

91
00:05:24,949 --> 00:05:29,960
conversations pretty standard structure

92
00:05:28,340 --> 00:05:33,369
right you have a micro service

93
00:05:29,960 --> 00:05:35,479
architecture with some parts like

94
00:05:33,370 --> 00:05:38,090
distributed in two different subdomains

95
00:05:35,479 --> 00:05:41,240
but you still have like a main API that

96
00:05:38,090 --> 00:05:43,760
handles are the core functionality now

97
00:05:41,240 --> 00:05:47,389
what we can see also in this javascript

98
00:05:43,760 --> 00:05:50,060
is that some of the requests will go to

99
00:05:47,389 --> 00:05:52,610
the api the example of like as I said

100
00:05:50,060 --> 00:05:54,350
the users what kind of users you will

101
00:05:52,610 --> 00:05:56,389
fetch all the user information from the

102
00:05:54,350 --> 00:05:58,910
API both example as soon as you talk

103
00:05:56,389 --> 00:06:01,070
invoices when we see that it has

104
00:05:58,910 --> 00:06:04,039
endpoints two invoices getting sent to

105
00:06:01,070 --> 00:06:07,700
English for example of what we can also

106
00:06:04,039 --> 00:06:10,550
see here is that the invoice team the

107
00:06:07,700 --> 00:06:13,460
team building the invoice domain they

108
00:06:10,550 --> 00:06:15,919
have iterated of like three times on the

109
00:06:13,460 --> 00:06:19,669
API so we have a version three for

110
00:06:15,919 --> 00:06:22,130
invoices the 13 doing the conversation

111
00:06:19,669 --> 00:06:24,229
of example.com they have a different API

112
00:06:22,130 --> 00:06:26,450
so when we're looking at the JavaScript

113
00:06:24,229 --> 00:06:31,090
we see that you can actually fetch your

114
00:06:26,450 --> 00:06:31,090
messages from the conversation example

115
00:06:37,000 --> 00:06:40,060
[Music]

116
00:06:42,039 --> 00:06:48,940
we see that you can actually show

117
00:06:44,870 --> 00:06:48,940
messages from the conversation

118
00:06:54,919 --> 00:07:02,070
now there's some ways forward we now try

119
00:06:59,430 --> 00:07:03,960
to break it this is our app let's try to

120
00:07:02,070 --> 00:07:06,030
identify the Rabinowitz in this

121
00:07:03,960 --> 00:07:09,359
structure and as you see our imaginary

122
00:07:06,030 --> 00:07:12,330
app can probably be applied to it so

123
00:07:09,360 --> 00:07:14,699
it's a very generic structure but we can

124
00:07:12,330 --> 00:07:17,099
still apply this methodology to all of

125
00:07:14,699 --> 00:07:19,650
them the first thing is that we want to

126
00:07:17,100 --> 00:07:22,350
notate all the api's that we can find

127
00:07:19,650 --> 00:07:24,448
and all the microservices groups so this

128
00:07:22,350 --> 00:07:27,150
we made the app right now it's an

129
00:07:24,449 --> 00:07:29,100
imaginary app we already know we have a

130
00:07:27,150 --> 00:07:31,320
bi we have eight points web

131
00:07:29,100 --> 00:07:34,949
conversations all of them are being

132
00:07:31,320 --> 00:07:41,969
reached from from business examiner so

133
00:07:34,949 --> 00:07:44,729
this exercise is over if you would

134
00:07:41,970 --> 00:07:47,460
basically look for other endpoints there

135
00:07:44,729 --> 00:07:50,550
might be a pattern in example it might

136
00:07:47,460 --> 00:07:52,469
be JavaScript on the business side that

137
00:07:50,550 --> 00:07:54,750
when you know give us an athlete

138
00:07:52,470 --> 00:07:56,940
it makes additional requests of other

139
00:07:54,750 --> 00:07:58,979
endpoints there might be legacy

140
00:07:56,940 --> 00:08:02,370
JavaScript somewhere where you can find

141
00:07:58,979 --> 00:08:03,960
all 10 points so this exercise for us is

142
00:08:02,370 --> 00:08:05,970
very easy because we hope we all know

143
00:08:03,960 --> 00:08:08,070
that we are just using these three micro

144
00:08:05,970 --> 00:08:15,450
services but there's a lot more to do

145
00:08:08,070 --> 00:08:18,090
here if you are actually the focus for

146
00:08:15,450 --> 00:08:20,099
us a letter should be number two first

147
00:08:18,090 --> 00:08:23,239
number two we will do is extract all the

148
00:08:20,099 --> 00:08:27,000
VI n points that we see are being used

149
00:08:23,240 --> 00:08:29,940
and we can do this very structure we can

150
00:08:27,000 --> 00:08:32,909
focus from the JavaScript that we saw on

151
00:08:29,940 --> 00:08:35,700
business we can actually focus as

152
00:08:32,909 --> 00:08:39,120
see what elements are being used to

153
00:08:35,700 --> 00:08:41,460
fetch invoice data and what we do is

154
00:08:39,120 --> 00:08:44,159
that we try there's a lot of tools

155
00:08:41,460 --> 00:08:45,870
there's like Joubert about have

156
00:08:44,159 --> 00:08:47,600
basically wrote something called a

157
00:08:45,870 --> 00:08:49,850
relative extractor which is like

158
00:08:47,600 --> 00:08:53,010
extracting out the record like relative

159
00:08:49,850 --> 00:08:54,780
API points in a JavaScript you might be

160
00:08:53,010 --> 00:08:56,880
able to just extract all the strings

161
00:08:54,780 --> 00:08:59,160
from a JavaScript to actually just get

162
00:08:56,880 --> 00:09:01,860
and you can literally search for double

163
00:08:59,160 --> 00:09:03,689
slash sometimes to get like all the

164
00:09:01,860 --> 00:09:07,710
strings that begins with a slash it's

165
00:09:03,690 --> 00:09:09,660
probably relatively API on my team but

166
00:09:07,710 --> 00:09:11,910
what we did in this we looked through

167
00:09:09,660 --> 00:09:15,270
the JavaScript we try to search for API

168
00:09:11,910 --> 00:09:17,610
slash perversion string and we saw that

169
00:09:15,270 --> 00:09:20,040
these are the ones that we found we

170
00:09:17,610 --> 00:09:23,700
found version 3 invoices invoices last

171
00:09:20,040 --> 00:09:26,699
and ID accounts and an account slash

172
00:09:23,700 --> 00:09:29,610
idea what we will do with this

173
00:09:26,700 --> 00:09:32,490
information is that we will store this

174
00:09:29,610 --> 00:09:35,280
in the best way possible for us to us

175
00:09:32,490 --> 00:09:39,090
further what are the ways that I tend to

176
00:09:35,280 --> 00:09:42,650
do it is like this what we can do it we

177
00:09:39,090 --> 00:09:45,900
can basically say that this is a prefix

178
00:09:42,650 --> 00:09:48,540
this is a prefix and there are most

179
00:09:45,900 --> 00:09:51,150
certainly more things under API version

180
00:09:48,540 --> 00:09:53,430
to me that just invoices most of the

181
00:09:51,150 --> 00:09:54,400
time they have something else right in

182
00:09:53,430 --> 00:09:56,680
this

183
00:09:54,400 --> 00:09:58,720
send invoices they're like me you know

184
00:09:56,680 --> 00:10:01,719
there might be payment methods there

185
00:09:58,720 --> 00:10:03,550
might be users there might be tests I'm

186
00:10:01,720 --> 00:10:05,529
not kidding like there might be a lot of

187
00:10:03,550 --> 00:10:08,529
these things so we want to plus

188
00:10:05,529 --> 00:10:11,710
everything underneath geography so we're

189
00:10:08,529 --> 00:10:13,810
saving a Edition 3 we also say API

190
00:10:11,710 --> 00:10:15,520
because there might be other versions

191
00:10:13,810 --> 00:10:19,540
they might be API questions you might be

192
00:10:15,520 --> 00:10:21,850
a bi-racial file we also said only the

193
00:10:19,540 --> 00:10:23,650
last part the invoices for slash

194
00:10:21,850 --> 00:10:26,350
accounts because we want to separate

195
00:10:23,650 --> 00:10:29,020
them from the prefix we think this API

196
00:10:26,350 --> 00:10:31,810
brush discreetly but we've got to keep

197
00:10:29,020 --> 00:10:34,630
the full URLs worth the form so we use

198
00:10:31,810 --> 00:10:37,359
API version 3 invoices and as you see

199
00:10:34,630 --> 00:10:40,510
here you have both invoices and invoices

200
00:10:37,360 --> 00:10:43,060
slash and ID this is a problem for us

201
00:10:40,510 --> 00:10:46,180
because we might want to also test

202
00:10:43,060 --> 00:10:48,449
invoices without the money sometimes and

203
00:10:46,180 --> 00:10:51,729
invoices but only with the slash

204
00:10:48,450 --> 00:10:53,830
sometimes invoices both Jason we want to

205
00:10:51,730 --> 00:10:56,320
test all these things so what I tend to

206
00:10:53,830 --> 00:10:58,360
say is just an imitator and this

207
00:10:56,320 --> 00:11:01,570
indicated for me is basically telling me

208
00:10:58,360 --> 00:11:04,450
that this is an endpoint that has an

209
00:11:01,570 --> 00:11:07,060
additional cast on it but it might also

210
00:11:04,450 --> 00:11:09,850
work without the path and it might also

211
00:11:07,060 --> 00:11:12,250
work just in a slash so it tells me

212
00:11:09,850 --> 00:11:15,220
those three three things so I can save

213
00:11:12,250 --> 00:11:15,810
space in my positives to say that this

214
00:11:15,220 --> 00:11:17,279
one

215
00:11:15,810 --> 00:11:19,890
we tested with an ID in this fashion

216
00:11:17,279 --> 00:11:22,680
nothing and everything so this helps me

217
00:11:19,890 --> 00:11:25,260
a lot to like curating this list because

218
00:11:22,680 --> 00:11:28,709
what we want to do now we want to like

219
00:11:25,260 --> 00:11:31,230
final words braces everything that is

220
00:11:28,710 --> 00:11:33,990
being used by this company and combine

221
00:11:31,230 --> 00:11:36,839
that into a long lists of every points

222
00:11:33,990 --> 00:11:40,800
so we can fast that everything we have

223
00:11:36,839 --> 00:11:43,710
in this company one other end point that

224
00:11:40,800 --> 00:11:46,319
we saw was conversation of example this

225
00:11:43,710 --> 00:11:48,570
one we find in the JavaScript has three

226
00:11:46,320 --> 00:11:50,820
other end points it has to slash all

227
00:11:48,570 --> 00:11:53,250
night slash positions that's WebSockets

228
00:11:50,820 --> 00:11:55,950
so we convert this and we also know that

229
00:11:53,250 --> 00:11:58,050
you can identify a specific conversation

230
00:11:55,950 --> 00:11:59,940
with an ID so we do the same thing we

231
00:11:58,050 --> 00:12:02,099
say that are used for reference so we

232
00:11:59,940 --> 00:12:03,990
know that we can replace that one with a

233
00:12:02,100 --> 00:12:06,210
path or an ID or not

234
00:12:03,990 --> 00:12:09,660
so now we have this to our office

235
00:12:06,210 --> 00:12:11,430
together with the other one the other

236
00:12:09,660 --> 00:12:13,800
thing we need to do we need to go into a

237
00:12:11,430 --> 00:12:15,839
lot of different assets to try to find

238
00:12:13,800 --> 00:12:18,540
more like what we did right now was we

239
00:12:15,839 --> 00:12:21,270
looked at the current JavaScript or the

240
00:12:18,540 --> 00:12:23,040
current website that like this is the

241
00:12:21,270 --> 00:12:25,589
line things these are the things that

242
00:12:23,040 --> 00:12:27,810
are currently now being lied but it

243
00:12:25,589 --> 00:12:30,210
might be an old version of these date

244
00:12:27,810 --> 00:12:32,579
guys remember we saw person invoices

245
00:12:30,210 --> 00:12:34,560
there might be an API endpoint with

246
00:12:32,580 --> 00:12:36,960
version 1 invoices so we want to find

247
00:12:34,560 --> 00:12:39,660
all those things in all these different

248
00:12:36,960 --> 00:12:41,550
ways like you can literally combine

249
00:12:39,660 --> 00:12:43,770
these two you can go to web archive to

250
00:12:41,550 --> 00:12:46,319
find the whole documentation perfect

251
00:12:43,770 --> 00:12:48,480
example of like let's use web part I'm

252
00:12:46,320 --> 00:12:51,180
not to look at the code look at the

253
00:12:48,480 --> 00:12:53,780
documentation from two years ago that

254
00:12:51,180 --> 00:12:56,640
one had a totally different information

255
00:12:53,780 --> 00:12:59,400
we might also look at other as the case

256
00:12:56,640 --> 00:13:00,140
may be they have local source like this

257
00:12:59,400 --> 00:13:03,199
is how

258
00:13:00,140 --> 00:13:04,939
with our business using our API maybe

259
00:13:03,200 --> 00:13:08,269
they have a desktop site you can extract

260
00:13:04,940 --> 00:13:10,880
the data from the desktop time what we

261
00:13:08,269 --> 00:13:13,910
then do is that we create the list of

262
00:13:10,880 --> 00:13:18,050
all the different animals and this list

263
00:13:13,910 --> 00:13:19,880
we break out from negative prefixes so

264
00:13:18,050 --> 00:13:22,519
now we have two lists two different

265
00:13:19,880 --> 00:13:24,589
files we have the conversation invoices

266
00:13:22,519 --> 00:13:28,700
and users and then we have all the

267
00:13:24,589 --> 00:13:31,370
prefixes of all the ones in this sense

268
00:13:28,700 --> 00:13:33,649
we also like we should probably add

269
00:13:31,370 --> 00:13:36,230
version for reversal pipe to this list

270
00:13:33,649 --> 00:13:37,880
for this company as well because we're

271
00:13:36,230 --> 00:13:41,089
pretty sure that they will have some

272
00:13:37,880 --> 00:13:41,540
later versions maybe not even used

273
00:13:41,089 --> 00:13:46,010
anymore

274
00:13:41,540 --> 00:13:48,529
or yet so when you do this and you

275
00:13:46,010 --> 00:13:51,439
combine it with all the subdomains you

276
00:13:48,529 --> 00:13:54,950
can basically see here that now our

277
00:13:51,440 --> 00:13:59,180
frosting just because we found version 3

278
00:13:54,950 --> 00:14:01,700
invoices on immortal example of phone or

279
00:13:59,180 --> 00:14:04,939
forcing my combining of these we will

280
00:14:01,700 --> 00:14:08,380
actually do a period of example of the

281
00:14:04,940 --> 00:14:11,449
form requests with API versions one with

282
00:14:08,380 --> 00:14:13,970
invoices something that we never saw

283
00:14:11,449 --> 00:14:16,519
anywhere on this on the side but just

284
00:14:13,970 --> 00:14:18,680
because we separated all these things

285
00:14:16,519 --> 00:14:21,230
and then combining them together in our

286
00:14:18,680 --> 00:14:24,019
frosting we will start testing endpoints

287
00:14:21,230 --> 00:14:26,510
that nobody else ever tested because why

288
00:14:24,019 --> 00:14:28,560
would they talk with invoices on the API

289
00:14:26,510 --> 00:14:31,649
well it turns out

290
00:14:28,560 --> 00:14:34,109
and the proxy that talks giving myself

291
00:14:31,649 --> 00:14:37,800
API Hume the regular API at that point

292
00:14:34,110 --> 00:14:38,040
because why not but nobody had tested

293
00:14:37,800 --> 00:14:39,628
that

294
00:14:38,040 --> 00:14:42,060
why would someone test worship on

295
00:14:39,629 --> 00:14:44,819
invoices where we have an invoice for

296
00:14:42,060 --> 00:14:46,949
example something so this helps us can

297
00:14:44,819 --> 00:14:49,800
identify endpoints that nobody had

298
00:14:46,949 --> 00:14:51,899
tested before just because we used our

299
00:14:49,800 --> 00:14:53,719
our our logic to separate all these

300
00:14:51,899 --> 00:14:56,129
things and then combining them together

301
00:14:53,720 --> 00:14:58,079
so we basically take all the subtle

302
00:14:56,129 --> 00:15:00,089
names list all the paths quick fixes

303
00:14:58,079 --> 00:15:02,370
some of the path prefix this should be

304
00:15:00,089 --> 00:15:05,069
negative right we maybe we want to try

305
00:15:02,370 --> 00:15:09,689
API dot example.com slash universe as

306
00:15:05,069 --> 00:15:12,329
well we don't have any and we had some

307
00:15:09,689 --> 00:15:15,629
standard parts to this some standard

308
00:15:12,329 --> 00:15:19,079
fussing sometimes you turn turns out

309
00:15:15,629 --> 00:15:21,629
like the version 1 inverse API on the

310
00:15:19,079 --> 00:15:23,878
regular API that nobody tested had a

311
00:15:21,629 --> 00:15:26,279
sequel injection in the IT team of

312
00:15:23,879 --> 00:15:28,290
payments I'm not kidding like that's the

313
00:15:26,279 --> 00:15:30,779
thing that you might find just by doing

314
00:15:28,290 --> 00:15:33,300
these weird combinations remember this

315
00:15:30,779 --> 00:15:35,699
is the company itself like if you have a

316
00:15:33,300 --> 00:15:37,769
weird endpoint of one place they

317
00:15:35,699 --> 00:15:40,469
probably use the same taxonomy that

318
00:15:37,769 --> 00:15:42,959
developers want to be smart and think

319
00:15:40,470 --> 00:15:45,569
about efficient ways of doing stuff so

320
00:15:42,959 --> 00:15:45,930
they put two like in the same kind of

321
00:15:45,569 --> 00:15:48,360
thing

322
00:15:45,930 --> 00:15:51,089
right they want to reuse things as well

323
00:15:48,360 --> 00:15:55,110
so why shouldn't we use ourselves as

324
00:15:51,089 --> 00:15:57,180
well so I tend to have these regular you

325
00:15:55,110 --> 00:15:59,490
know bunch of characters weird

326
00:15:57,180 --> 00:16:01,500
characters back slash slash single-pole

327
00:15:59,490 --> 00:16:03,990
double-throw the personal not like

328
00:16:01,500 --> 00:16:06,240
trying to find all these things if

329
00:16:03,990 --> 00:16:10,110
there's numbers in the idea tested with

330
00:16:06,240 --> 00:16:13,440
letters tests everything as - so when we

331
00:16:10,110 --> 00:16:15,959
do this combination what might we find

332
00:16:13,440 --> 00:16:18,420
by by the labels and this is where the

333
00:16:15,959 --> 00:16:21,810
fun part starts because I have examples

334
00:16:18,420 --> 00:16:23,880
for all these things so one thing that

335
00:16:21,810 --> 00:16:26,069
we might find is that we can find you

336
00:16:23,880 --> 00:16:30,209
for all 10 points that is not the news

337
00:16:26,070 --> 00:16:32,850
yet or any more one really good example

338
00:16:30,209 --> 00:16:34,859
of this was a real life scenario it

339
00:16:32,850 --> 00:16:38,550
looked like this there was a message

340
00:16:34,860 --> 00:16:40,080
board on one of the kiosks and this

341
00:16:38,550 --> 00:16:42,359
message board looks like this

342
00:16:40,080 --> 00:16:44,880
you make city made like version 2 ports

343
00:16:42,360 --> 00:16:46,830
and the ID of the message board the

344
00:16:44,880 --> 00:16:49,380
message board would give you a list of

345
00:16:46,830 --> 00:16:51,570
messages for this specific conversation

346
00:16:49,380 --> 00:16:53,850
if you look at the data there's nothing

347
00:16:51,570 --> 00:16:56,370
really secretly the message board was

348
00:16:53,850 --> 00:16:58,589
public for all the users so one user

349
00:16:56,370 --> 00:17:01,980
could see messages from others that's a

350
00:16:58,589 --> 00:17:05,160
point with a message board however when

351
00:17:01,980 --> 00:17:07,470
we started doing our exercise I broke up

352
00:17:05,160 --> 00:17:10,650
you know the API product in the vs.

353
00:17:07,470 --> 00:17:13,500
apart and the boards suddenly we get a

354
00:17:10,650 --> 00:17:16,439
different version purchased more slack

355
00:17:13,500 --> 00:17:20,030
ports and what we can see here is that

356
00:17:16,439 --> 00:17:23,000
AB developer also respected

357
00:17:20,030 --> 00:17:25,780
TI into something called the Jason API

358
00:17:23,000 --> 00:17:28,940
and the Jason API is basically a

359
00:17:25,780 --> 00:17:32,450
specification on how to do a JSON REST

360
00:17:28,940 --> 00:17:35,720
API and what we saw on this end point

361
00:17:32,450 --> 00:17:38,330
was something called includes if you

362
00:17:35,720 --> 00:17:41,840
know about JSON API includes is

363
00:17:38,330 --> 00:17:45,649
basically a ability for the server to

364
00:17:41,840 --> 00:17:48,199
say that you know and we give you the

365
00:17:45,650 --> 00:17:51,140
message words but also you have an

366
00:17:48,200 --> 00:17:53,270
option to include the whole user object

367
00:17:51,140 --> 00:17:55,700
if you want and this is a pretty

368
00:17:53,270 --> 00:17:57,770
convenient because this means that in a

369
00:17:55,700 --> 00:17:59,900
regular case fetching the message for

370
00:17:57,770 --> 00:18:02,540
you might already have you know

371
00:17:59,900 --> 00:18:04,340
information about the users and not to

372
00:18:02,540 --> 00:18:07,310
actually just fetch the message world

373
00:18:04,340 --> 00:18:08,840
but sometimes you want to maybe on an

374
00:18:07,310 --> 00:18:10,070
iPhone app you want to fetch everything

375
00:18:08,840 --> 00:18:12,649
so you want to have the information

376
00:18:10,070 --> 00:18:14,929
about each user so when you click on

377
00:18:12,650 --> 00:18:17,360
like I would click on a user it will

378
00:18:14,930 --> 00:18:20,180
find a player and then tell you all the

379
00:18:17,360 --> 00:18:23,300
information about this user now when we

380
00:18:20,180 --> 00:18:26,000
saw this we basically realized okay if

381
00:18:23,300 --> 00:18:27,139
we have done a query parameter called

382
00:18:26,000 --> 00:18:30,020
include user

383
00:18:27,140 --> 00:18:33,560
it would append an attribute to the

384
00:18:30,020 --> 00:18:36,590
response saying it's a user what was the

385
00:18:33,560 --> 00:18:39,460
interesting part here was that when they

386
00:18:36,590 --> 00:18:42,610
did the refactor of this message

387
00:18:39,460 --> 00:18:45,130
the version for they basically forgot to

388
00:18:42,610 --> 00:18:46,840
sanitize the userdata to remove the

389
00:18:45,130 --> 00:18:49,240
private properties that should not be

390
00:18:46,840 --> 00:18:51,520
publicly available but remember they

391
00:18:49,240 --> 00:18:53,919
never do this version four of the

392
00:18:51,520 --> 00:18:56,649
message board they never released it

393
00:18:53,919 --> 00:19:00,580
never went into any riptide reviews

394
00:18:56,649 --> 00:19:02,949
because it's not being abused right it's

395
00:19:00,580 --> 00:19:05,649
not like so nobody went through with

396
00:19:02,950 --> 00:19:07,419
that verify that you know you should you

397
00:19:05,649 --> 00:19:10,479
should not show these private properties

398
00:19:07,419 --> 00:19:12,250
so what happened was just by utilizing a

399
00:19:10,480 --> 00:19:14,409
mobile use maybe I that wasn't released

400
00:19:12,250 --> 00:19:16,899
yet we saw that we could in clear the

401
00:19:14,409 --> 00:19:19,090
user we never think you sir and suddenly

402
00:19:16,899 --> 00:19:21,039
we get data that we should not get so

403
00:19:19,090 --> 00:19:23,320
now we can send our first report to this

404
00:19:21,039 --> 00:19:25,720
program it tell the new version of Jason

405
00:19:23,320 --> 00:19:28,168
API for message boards leaks all the

406
00:19:25,720 --> 00:19:30,610
emails and phone numbers for all users

407
00:19:28,169 --> 00:19:33,190
anybody that ever interacted with the

408
00:19:30,610 --> 00:19:37,229
message board has now email and password

409
00:19:33,190 --> 00:19:39,929
just by us utilizing this new wave man

410
00:19:37,230 --> 00:19:42,909
another thing we might find is that

411
00:19:39,929 --> 00:19:45,760
micro services remember destruction you

412
00:19:42,909 --> 00:19:49,090
have an api inverse conversation maybe

413
00:19:45,760 --> 00:19:52,870
they also interact through making their

414
00:19:49,090 --> 00:19:54,809
own calls internally this means that

415
00:19:52,870 --> 00:19:58,510
when you talk with the employees API

416
00:19:54,809 --> 00:20:00,908
maybe there's five micro services on the

417
00:19:58,510 --> 00:20:03,760
back doing certain things maybe they

418
00:20:00,909 --> 00:20:06,640
have a endpoint for internally to

419
00:20:03,760 --> 00:20:09,000
generate the PDF for the others maybe

420
00:20:06,640 --> 00:20:10,799
they have one endpoint for in

421
00:20:09,000 --> 00:20:13,590
with the payment methods for adding

422
00:20:10,799 --> 00:20:17,490
credit card beta because maybe they need

423
00:20:13,590 --> 00:20:20,760
to be psi certified psi PSS saying they

424
00:20:17,490 --> 00:20:22,500
can't handle credit card beta themselves

425
00:20:20,760 --> 00:20:24,270
they need to outsource that so maybe

426
00:20:22,500 --> 00:20:27,330
they have a micro service just handling

427
00:20:24,270 --> 00:20:29,850
that kind of data and we want to

428
00:20:27,330 --> 00:20:33,210
identify if any of the endpoints that we

429
00:20:29,850 --> 00:20:35,250
find interacts with something wrong on

430
00:20:33,210 --> 00:20:38,669
there from the server side respectively

431
00:20:35,250 --> 00:20:40,559
and this is a really good exercise and

432
00:20:38,669 --> 00:20:43,950
it might have a perfect example of this

433
00:20:40,559 --> 00:20:46,289
where I was able to identify that yes a

434
00:20:43,950 --> 00:20:49,950
micro service in the fact was being used

435
00:20:46,289 --> 00:20:52,950
and also a way to abuse this is what I

436
00:20:49,950 --> 00:20:56,700
saw remember or not we have question

437
00:20:52,950 --> 00:20:58,890
three invoices and an ID and remember

438
00:20:56,700 --> 00:21:01,320
what I did before right I had a star of

439
00:20:58,890 --> 00:21:04,049
three voices because I want to test

440
00:21:01,320 --> 00:21:06,210
without IDs I want to test with IDs I

441
00:21:04,049 --> 00:21:08,370
want to test with a slash but I also

442
00:21:06,210 --> 00:21:11,159
want to test with like busting

443
00:21:08,370 --> 00:21:13,469
characters what I would see what I would

444
00:21:11,159 --> 00:21:16,669
do what what is the first edition of the

445
00:21:13,470 --> 00:21:20,400
read question would do if you saw this

446
00:21:16,669 --> 00:21:24,059
what would you test for four letters

447
00:21:20,400 --> 00:21:25,980
either right you see how many voice one

448
00:21:24,059 --> 00:21:29,280
two three the first thing you would do

449
00:21:25,980 --> 00:21:31,860
is to test like one two four you get an

450
00:21:29,280 --> 00:21:34,799
ID for you get that URL or downloading

451
00:21:31,860 --> 00:21:36,990
the image that you own but when you

452
00:21:34,799 --> 00:21:38,700
shake it one two four of course you want

453
00:21:36,990 --> 00:21:41,370
to test like can i download someone

454
00:21:38,700 --> 00:21:44,940
else's imports it would tell you access

455
00:21:41,370 --> 00:21:47,879
denied so now you know they have a

456
00:21:44,940 --> 00:21:51,270
proper access model of accessing

457
00:21:47,880 --> 00:21:53,610
invoices that's good right but we want

458
00:21:51,270 --> 00:21:56,418
to first this so when we try a different

459
00:21:53,610 --> 00:21:59,748
ID it tells us access denied

460
00:21:56,419 --> 00:22:03,679
they're right we tried with our Costas

461
00:21:59,749 --> 00:22:06,259
we try double quote it doesn't say

462
00:22:03,679 --> 00:22:11,659
access denied anymore it says that you

463
00:22:06,259 --> 00:22:14,059
write interesting there's something

464
00:22:11,659 --> 00:22:20,210
other interesting on this one can you

465
00:22:14,059 --> 00:22:23,059
see version one this there's a victory

466
00:22:20,210 --> 00:22:25,879
sphere this happened for real and I saw

467
00:22:23,059 --> 00:22:30,519
this and I'm like I sent the two version

468
00:22:25,879 --> 00:22:33,439
3 but it gives me an error aversion one

469
00:22:30,519 --> 00:22:36,049
that is interesting that you were ever

470
00:22:33,440 --> 00:22:40,879
like sent posted with question 1 so why

471
00:22:36,049 --> 00:22:42,830
why this what is going on here I have a

472
00:22:40,879 --> 00:22:46,009
possible explanation I still don't know

473
00:22:42,830 --> 00:22:47,809
but this is a possible explanation the

474
00:22:46,009 --> 00:22:51,139
possible explanation is that the code

475
00:22:47,809 --> 00:22:54,080
they use looks like this they have an

476
00:22:51,139 --> 00:22:55,969
endpoint on version 3 invoices there are

477
00:22:54,080 --> 00:22:59,658
looks like this you have API version 3

478
00:22:55,970 --> 00:23:03,769
invoices everything after that will be

479
00:22:59,659 --> 00:23:05,840
our ID then the function on the server

480
00:23:03,769 --> 00:23:07,759
side still we don't know it this is dead

481
00:23:05,840 --> 00:23:10,039
truth but this is a possible explanation

482
00:23:07,759 --> 00:23:12,559
from the error that we saw is that

483
00:23:10,039 --> 00:23:15,169
they're making an API call on the

484
00:23:12,559 --> 00:23:17,059
service identity and this server side

485
00:23:15,169 --> 00:23:17,779
call that they're making to an internal

486
00:23:17,059 --> 00:23:20,418
API

487
00:23:17,779 --> 00:23:23,960
have access to their basically appending

488
00:23:20,419 --> 00:23:26,090
the ID to the invoice versus one because

489
00:23:23,960 --> 00:23:29,139
the internal API to download the PDF

490
00:23:26,090 --> 00:23:32,869
invoices is usually person one instead

491
00:23:29,139 --> 00:23:36,199
in our case our assumption is also that

492
00:23:32,869 --> 00:23:38,238
how are they knowing that one two three

493
00:23:36,200 --> 00:23:40,549
we should have access to but one two or

494
00:23:38,239 --> 00:23:43,549
we should not our assumption is that

495
00:23:40,549 --> 00:23:46,908
they actually have hand token in the

496
00:23:43,549 --> 00:23:50,179
parameters and I will tell you why so

497
00:23:46,909 --> 00:23:51,889
this of course explains the bad URI at

498
00:23:50,179 --> 00:23:54,769
endpoint that means that we send in

499
00:23:51,889 --> 00:23:57,619
double code here but this API call will

500
00:23:54,769 --> 00:24:00,200
say but I don't know what URL has double

501
00:23:57,619 --> 00:24:02,959
quotes I will tell you no this is a bad

502
00:24:00,200 --> 00:24:06,379
URI and that's how we see that kind of

503
00:24:02,960 --> 00:24:08,149
error now what we want to do now the

504
00:24:06,379 --> 00:24:10,839
first thing we want to do is that we

505
00:24:08,149 --> 00:24:14,869
want to identify if our theory is right

506
00:24:10,839 --> 00:24:17,599
so when I put the word bust in here that

507
00:24:14,869 --> 00:24:19,789
basically means that part we gotta test

508
00:24:17,599 --> 00:24:21,589
with the word lists of regular

509
00:24:19,789 --> 00:24:23,929
parameters so you understand what the

510
00:24:21,589 --> 00:24:25,908
possible cost means anything that we

511
00:24:23,929 --> 00:24:27,830
want to test we want to iterate and see

512
00:24:25,909 --> 00:24:31,010
if we can find any difference

513
00:24:27,830 --> 00:24:32,899
for testing like the word API or the

514
00:24:31,010 --> 00:24:35,299
produce or the word token we want to

515
00:24:32,899 --> 00:24:38,090
test interagency if you see a nativity

516
00:24:35,299 --> 00:24:41,629
so our first practice that we want to do

517
00:24:38,090 --> 00:24:44,269
is that we want to send and verify that

518
00:24:41,630 --> 00:24:46,429
we can send additional query parameters

519
00:24:44,269 --> 00:24:48,769
because our assumption is that there's

520
00:24:46,429 --> 00:24:54,529
an API call on the other end that we

521
00:24:48,769 --> 00:24:57,409
want to inject like a query smuggling on

522
00:24:54,529 --> 00:24:59,929
the internal indictment so if we would

523
00:24:57,409 --> 00:25:02,269
send the first because to see here if we

524
00:24:59,929 --> 00:25:03,889
would send that one those three

525
00:25:02,269 --> 00:25:06,649
parameters would never descend to big

526
00:25:03,889 --> 00:25:09,168
turtle because as you remember on this

527
00:25:06,649 --> 00:25:11,658
one here it depends its own query

528
00:25:09,169 --> 00:25:14,690
parameters so this one will ignore those

529
00:25:11,659 --> 00:25:18,470
parameters however is we European code

530
00:25:14,690 --> 00:25:22,130
we might get like because this part will

531
00:25:18,470 --> 00:25:24,559
now turn into an ID from here forward to

532
00:25:22,130 --> 00:25:26,600
give and if we're lucky they actually

533
00:25:24,559 --> 00:25:28,549
you were able to code that part or the

534
00:25:26,600 --> 00:25:30,620
routing system does it by itself like

535
00:25:28,549 --> 00:25:32,990
that's what's going on in some of the

536
00:25:30,620 --> 00:25:35,479
routing systems this year and the coding

537
00:25:32,990 --> 00:25:37,730
takes his handle automatically so they

538
00:25:35,480 --> 00:25:39,440
would never see they do a little bit

539
00:25:37,730 --> 00:25:42,019
part they will actually get as the ID

540
00:25:39,440 --> 00:25:44,389
the question mark part and their person

541
00:25:42,019 --> 00:25:46,610
so we start passing this and trying to

542
00:25:44,389 --> 00:25:48,979
see what happens now

543
00:25:46,610 --> 00:25:51,559
our theory is that the server-side code

544
00:25:48,980 --> 00:25:54,710
will look like this this is the part we

545
00:25:51,559 --> 00:25:58,820
injected and hopefully we will get in

546
00:25:54,710 --> 00:26:01,330
the token in the internal API request so

547
00:25:58,820 --> 00:26:01,330
we do this

548
00:26:01,440 --> 00:26:05,490
there's like regular there's a third

549
00:26:03,809 --> 00:26:07,440
parameter list that you might use that

550
00:26:05,490 --> 00:26:09,870
it's like really comedian to pass all

551
00:26:07,440 --> 00:26:12,570
these regular ones and we run this and

552
00:26:09,870 --> 00:26:15,750
suddenly on token we get access denied

553
00:26:12,570 --> 00:26:19,289
this is awesome for us this is an

554
00:26:15,750 --> 00:26:23,100
indicator that token that we sent in as

555
00:26:19,289 --> 00:26:25,200
X made the request saying access denied

556
00:26:23,100 --> 00:26:27,990
and remember this is to the image that

557
00:26:25,200 --> 00:26:31,049
we didn't have access to but just by

558
00:26:27,990 --> 00:26:32,580
including a query string with Tokyo X we

559
00:26:31,049 --> 00:26:36,059
don't have access to it anymore

560
00:26:32,580 --> 00:26:38,549
so this tells us that token parameter is

561
00:26:36,059 --> 00:26:41,970
used for authenticating you on the

562
00:26:38,549 --> 00:26:44,250
internal area so even if we get access

563
00:26:41,970 --> 00:26:46,950
denied here we are really not here

564
00:26:44,250 --> 00:26:49,860
because we have identified that we can

565
00:26:46,950 --> 00:26:52,440
do personal smoking to an internal API

566
00:26:49,860 --> 00:26:57,809
we know exactly how the authentication

567
00:26:52,440 --> 00:27:03,000
works this is that's everything we need

568
00:26:57,809 --> 00:27:06,090
now the interesting part is that what we

569
00:27:03,000 --> 00:27:09,570
want to do here is that we won't be able

570
00:27:06,090 --> 00:27:13,799
to get a different thing boys we don't

571
00:27:09,570 --> 00:27:17,960
know the difference all right how do we

572
00:27:13,799 --> 00:27:17,960
can smuggle in our own token here

573
00:27:18,240 --> 00:27:22,830
it won't help us to get one to four

574
00:27:20,309 --> 00:27:25,050
because we don't have the user

575
00:27:22,830 --> 00:27:27,270
or different voices we don't even know

576
00:27:25,050 --> 00:27:29,190
what our documents we have no idea want

577
00:27:27,270 --> 00:27:32,940
to talk that they are sending to this

578
00:27:29,190 --> 00:27:34,020
end point actually is so what can we

579
00:27:32,940 --> 00:27:37,170
actually do with this

580
00:27:34,020 --> 00:27:40,320
well we can stop doing a query string

581
00:27:37,170 --> 00:27:42,690
smuggling and start to win yeah this is

582
00:27:40,320 --> 00:27:45,720
that basically the confirmation when you

583
00:27:42,690 --> 00:27:47,520
start to win half two versus them the

584
00:27:45,720 --> 00:27:50,880
interesting part will have traversal is

585
00:27:47,520 --> 00:27:53,730
that we now know that we are talking

586
00:27:50,880 --> 00:27:55,290
with an API on version one in versus

587
00:27:53,730 --> 00:27:58,470
when we're sending into Version three

588
00:27:55,290 --> 00:28:03,270
we know because smuggle but we can also

589
00:27:58,470 --> 00:28:05,130
eliminate table can see the first and we

590
00:28:03,270 --> 00:28:09,510
know we're talking with invoices on the

591
00:28:05,130 --> 00:28:11,150
other side so lets us instead move out

592
00:28:09,510 --> 00:28:15,360
to be moved

593
00:28:11,150 --> 00:28:19,260
let's use total /url encoded and try to

594
00:28:15,360 --> 00:28:21,780
go outside the invoices part but in the

595
00:28:19,260 --> 00:28:23,879
internal API so we you rarely code this

596
00:28:21,780 --> 00:28:25,889
and we start passing but what we also

597
00:28:23,880 --> 00:28:28,050
want to do is that we want to eliminate

598
00:28:25,890 --> 00:28:30,180
the token parameter we know that the

599
00:28:28,050 --> 00:28:33,210
token parameter was used to validate

600
00:28:30,180 --> 00:28:36,210
that it's a user sending the request

601
00:28:33,210 --> 00:28:39,180
so our assumption here is that if we

602
00:28:36,210 --> 00:28:41,850
talk with a different end point that end

603
00:28:39,180 --> 00:28:44,400
point you know might check that but

604
00:28:41,850 --> 00:28:47,250
there's a user token here the user talk

605
00:28:44,400 --> 00:28:50,580
it should not be used in this internal

606
00:28:47,250 --> 00:28:53,400
API call so what we can do because we

607
00:28:50,580 --> 00:28:55,470
know that we can smuggle queries we can

608
00:28:53,400 --> 00:28:59,280
also eliminate query strings by using

609
00:28:55,470 --> 00:29:02,160
fragments on percentage 23 is URL

610
00:28:59,280 --> 00:29:04,170
encoded fragment sign which means that

611
00:29:02,160 --> 00:29:06,870
if we send this if we do a path

612
00:29:04,170 --> 00:29:09,090
traversal back out of a noises and then

613
00:29:06,870 --> 00:29:09,649
make a post list of the course that

614
00:29:09,090 --> 00:29:11,659
might be

615
00:29:09,650 --> 00:29:13,760
there and then here's the fragment part

616
00:29:11,660 --> 00:29:16,220
we know that the request made to the

617
00:29:13,760 --> 00:29:18,350
internal API will not use the user's

618
00:29:16,220 --> 00:29:21,350
organ anymore and this could actually

619
00:29:18,350 --> 00:29:23,840
help us this might mean that they have a

620
00:29:21,350 --> 00:29:26,350
checked making sure that no users are

621
00:29:23,840 --> 00:29:29,120
talking with other endpoints and

622
00:29:26,350 --> 00:29:31,370
therefore when the totem is in the query

623
00:29:29,120 --> 00:29:33,469
they will just say access denied this

624
00:29:31,370 --> 00:29:35,840
user is not allowed but what happened if

625
00:29:33,470 --> 00:29:38,390
you send an internal API basically just

626
00:29:35,840 --> 00:29:40,939
checks if the token is there but if it's

627
00:29:38,390 --> 00:29:42,650
not there it's a legit request this

628
00:29:40,940 --> 00:29:46,700
happened for real so this is actually a

629
00:29:42,650 --> 00:29:50,210
case so what we do is basically run this

630
00:29:46,700 --> 00:29:53,660
on the posting list and suddenly a toast

631
00:29:50,210 --> 00:29:56,240
gives us theta and we remember from

632
00:29:53,660 --> 00:29:58,400
before we saw version 1 or version 3

633
00:29:56,240 --> 00:30:00,830
inverses with we also saw version 3

634
00:29:58,400 --> 00:30:03,080
accounts right so we know that not

635
00:30:00,830 --> 00:30:05,540
together with the probe can image and

636
00:30:03,080 --> 00:30:08,570
when they token we we already brute

637
00:30:05,540 --> 00:30:11,120
force our own version versus free on the

638
00:30:08,570 --> 00:30:13,370
converse API and that one didn't give us

639
00:30:11,120 --> 00:30:15,729
anything interesting but now when we use

640
00:30:13,370 --> 00:30:18,800
the fragment sign from this endpoint

641
00:30:15,730 --> 00:30:22,370
eliminating the token parameter we

642
00:30:18,800 --> 00:30:24,800
actually get paid and not only they that

643
00:30:22,370 --> 00:30:28,129
we get all the invoices for all their

644
00:30:24,800 --> 00:30:30,050
times so this is our second report we

645
00:30:28,130 --> 00:30:33,020
have a report of a few hours on getting

646
00:30:30,050 --> 00:30:37,120
access to all a most accounts due to the

647
00:30:33,020 --> 00:30:37,120
fragment elimination of the token stream

648
00:30:37,840 --> 00:30:45,860
perfect this is a critical this is the

649
00:30:43,550 --> 00:30:48,590
assumption that we have that the request

650
00:30:45,860 --> 00:30:50,959
was looking where we actually got is

651
00:30:48,590 --> 00:30:53,000
working we've made a request to the

652
00:30:50,960 --> 00:30:55,700
version three but that who made an

653
00:30:53,000 --> 00:30:57,950
internal API call to API mention one

654
00:30:55,700 --> 00:31:00,470
invoices it made a path to cursor back

655
00:30:57,950 --> 00:31:02,750
to accounts and then we eliminated the

656
00:31:00,470 --> 00:31:06,650
token parameter so the topic parameter

657
00:31:02,750 --> 00:31:08,960
is not to use another way forward is

658
00:31:06,650 --> 00:31:11,510
that let's look at other things in the

659
00:31:08,960 --> 00:31:14,030
JavaScript let's not just look at the

660
00:31:11,510 --> 00:31:19,820
API and let's look at what kind of other

661
00:31:14,030 --> 00:31:22,070
strings are in this json' and what we

662
00:31:19,820 --> 00:31:24,439
might find by doing that is that we

663
00:31:22,070 --> 00:31:27,530
might find peace or tokens that are

664
00:31:24,440 --> 00:31:29,570
expected to be sequence you know what

665
00:31:27,530 --> 00:31:32,720
like if you have a company and you have

666
00:31:29,570 --> 00:31:35,510
a JavaScript file you probably don't

667
00:31:32,720 --> 00:31:39,190
have your own internal API piece in the

668
00:31:35,510 --> 00:31:39,190
JavaScript right that would never happen

669
00:31:39,910 --> 00:31:45,440
but hopefully you don't have that but

670
00:31:43,340 --> 00:31:47,590
the thing that you should think of is

671
00:31:45,440 --> 00:31:49,640
like there's a lot of third-party

672
00:31:47,590 --> 00:31:51,409
applications out there and those

673
00:31:49,640 --> 00:31:53,720
third-party applications might have

674
00:31:51,410 --> 00:31:56,120
really sucked the documentation that is

675
00:31:53,720 --> 00:31:58,280
not really clear if this API key should

676
00:31:56,120 --> 00:32:01,610
be public or not there might also be

677
00:31:58,280 --> 00:32:04,430
third parties that are intended to have

678
00:32:01,610 --> 00:32:07,429
public API keys meaning that you should

679
00:32:04,430 --> 00:32:11,000
have the API key in your jump it's a

680
00:32:07,430 --> 00:32:13,370
legit usage on what example that I want

681
00:32:11,000 --> 00:32:15,560
to show you is something called sunders

682
00:32:13,370 --> 00:32:16,429
accessibility has someone every new

683
00:32:15,560 --> 00:32:20,780
standard

684
00:32:16,430 --> 00:32:23,450
salty interesting this is Miss Venice

685
00:32:20,780 --> 00:32:26,000
good information so what I found in one

686
00:32:23,450 --> 00:32:29,360
of the javascript files was this you had

687
00:32:26,000 --> 00:32:32,320
a CD key and you had a CD Nexus URL see

688
00:32:29,360 --> 00:32:36,919
this 10% nest and what you see here is

689
00:32:32,320 --> 00:32:40,370
you saw like a cached API key and you

690
00:32:36,920 --> 00:32:41,660
solve this accessed a table T what I saw

691
00:32:40,370 --> 00:32:43,639
this I'm like yes I have

692
00:32:41,660 --> 00:32:46,850
EDI key access I can just go to the

693
00:32:43,640 --> 00:32:48,950
service KPI for this customer and I can

694
00:32:46,850 --> 00:32:51,020
just get all the data I took the key and

695
00:32:48,950 --> 00:32:53,210
I made a call to this and this API and

696
00:32:51,020 --> 00:32:55,520
they're like no this is not an API key

697
00:32:53,210 --> 00:32:59,960
this is not even know the Yankee looks

698
00:32:55,520 --> 00:33:03,680
like some what is this the interesting

699
00:32:59,960 --> 00:33:06,410
part it was the access GWT they started

700
00:33:03,680 --> 00:33:08,900
searching for house unless uses a access

701
00:33:06,410 --> 00:33:12,080
JWT and it turns out they used it for

702
00:33:08,900 --> 00:33:14,450
episode and SSO mean this thing in final

703
00:33:12,080 --> 00:33:16,370
so basically my works is that lets say

704
00:33:14,450 --> 00:33:18,830
you have a map and you want to have like

705
00:33:16,370 --> 00:33:21,199
a link that says go to our support and

706
00:33:18,830 --> 00:33:22,909
what you want to do is that

707
00:33:21,200 --> 00:33:25,640
that name if you're signing to the

708
00:33:22,910 --> 00:33:29,720
website they want you to be signed in on

709
00:33:25,640 --> 00:33:32,660
Sundays as well so the intestate ability

710
00:33:29,720 --> 00:33:34,850
to transfer data over from the company

711
00:33:32,660 --> 00:33:37,940
website to send lists and they won't

712
00:33:34,850 --> 00:33:40,760
send us to unpack this JWT and basically

713
00:33:37,940 --> 00:33:42,410
sign leeuwin automatically and you

714
00:33:40,760 --> 00:33:44,450
probably see where we're going with this

715
00:33:42,410 --> 00:33:47,030
having these key means you can sign the

716
00:33:44,450 --> 00:33:49,690
JWT yourself the Genoa team looks like

717
00:33:47,030 --> 00:33:52,510
this you basically have five parameters

718
00:33:49,690 --> 00:33:55,220
this is like the sender stainability

719
00:33:52,510 --> 00:33:57,770
solution for a single cycle design on

720
00:33:55,220 --> 00:34:01,400
instructure the first ones are basically

721
00:33:57,770 --> 00:34:04,460
just a date and I do unique ID they can

722
00:34:01,400 --> 00:34:06,530
be whatever then the client needs to be

723
00:34:04,460 --> 00:34:09,020
very much aligned to the current time so

724
00:34:06,530 --> 00:34:11,449
it's like a UNIX micro time of the

725
00:34:09,020 --> 00:34:13,880
current date so they can like expire if

726
00:34:11,449 --> 00:34:15,469
the data at least go up to old the

727
00:34:13,880 --> 00:34:16,940
second part then the world is third

728
00:34:15,469 --> 00:34:19,100
world and the fourth part is basically

729
00:34:16,940 --> 00:34:21,830
the name and the email of the current

730
00:34:19,100 --> 00:34:23,418
user that you want to sign in as but the

731
00:34:21,830 --> 00:34:25,340
interesting part is the sentence doesn't

732
00:34:23,418 --> 00:34:29,000
really care what you send in there as

733
00:34:25,340 --> 00:34:31,730
long it is a unique email address the

734
00:34:29,000 --> 00:34:34,699
interesting part is the fixed one the

735
00:34:31,730 --> 00:34:36,440
user ID that you want to hijack and

736
00:34:34,699 --> 00:34:39,529
remember reducer I need even a website

737
00:34:36,440 --> 00:34:42,320
tends to be a public thing if you have

738
00:34:39,530 --> 00:34:45,210
profiles or conversations between two

739
00:34:42,320 --> 00:34:47,639
users you probably will see

740
00:34:45,210 --> 00:34:51,149
it's not a secret some of the users are

741
00:34:47,639 --> 00:34:53,789
numeric Becky's right if you can sign

742
00:34:51,149 --> 00:34:56,549
this JSON and senator Sanders will sign

743
00:34:53,789 --> 00:34:59,640
in as the user ID provided in the beta

744
00:34:56,549 --> 00:35:02,339
meaning he was seeing all the above the

745
00:34:59,640 --> 00:35:05,009
support tickets this user you can just

746
00:35:02,339 --> 00:35:07,650
find the user ID and then sign in as

747
00:35:05,010 --> 00:35:12,779
that user in the support family asking

748
00:35:07,650 --> 00:35:14,970
them to change email New York so this is

749
00:35:12,779 --> 00:35:17,309
how it works you find in the gemstone in

750
00:35:14,970 --> 00:35:19,799
the JWT and ascended to the access date

751
00:35:17,309 --> 00:35:22,109
ability for this customer and then then

752
00:35:19,799 --> 00:35:23,910
we give you back a session together in a

753
00:35:22,109 --> 00:35:27,000
faster digest which is basically like

754
00:35:23,910 --> 00:35:29,160
this will sign you in as that user so

755
00:35:27,000 --> 00:35:31,589
now we have a third report account

756
00:35:29,160 --> 00:35:34,109
hijacking support panel because of

757
00:35:31,589 --> 00:35:36,390
publicly disclosed standard SS okay

758
00:35:34,109 --> 00:35:38,970
and this is the only reason why this was

759
00:35:36,390 --> 00:35:41,308
a vulnerability it was that they didn't

760
00:35:38,970 --> 00:35:42,899
read about how this logic worked with

761
00:35:41,309 --> 00:35:45,029
this service a secret they didn't know

762
00:35:42,900 --> 00:35:47,579
that it was a secret because it

763
00:35:45,029 --> 00:35:50,190
basically said it Yankee and it's not an

764
00:35:47,579 --> 00:35:52,170
API key because they di doesn't use it

765
00:35:50,190 --> 00:35:55,680
so they're like this is probably not a

766
00:35:52,170 --> 00:35:57,839
secret but it actually is another thing

767
00:35:55,680 --> 00:36:00,390
that we might find another example is

768
00:35:57,839 --> 00:36:03,210
basically something that is intended to

769
00:36:00,390 --> 00:36:05,730
be perfect this is an allegory an API

770
00:36:03,210 --> 00:36:07,990
key the summer recognizable gulia

771
00:36:05,730 --> 00:36:11,590
someone seen a Maria

772
00:36:07,990 --> 00:36:14,560
or raise your hand okay some of you all

773
00:36:11,590 --> 00:36:16,900
right this is not tended to be a see

774
00:36:14,560 --> 00:36:18,610
this is actually a public information if

775
00:36:16,900 --> 00:36:21,880
you're using a movie you're probably

776
00:36:18,610 --> 00:36:24,760
using it for autocomplete for a fast

777
00:36:21,880 --> 00:36:26,980
search solution on your website but

778
00:36:24,760 --> 00:36:29,920
these parts that you see here is not

779
00:36:26,980 --> 00:36:32,620
secret true they are intended to be used

780
00:36:29,920 --> 00:36:35,920
on a website publicly in the JavaScript

781
00:36:32,620 --> 00:36:37,839
so no variability here really we see

782
00:36:35,920 --> 00:36:40,360
that to make the base of the index name

783
00:36:37,840 --> 00:36:42,490
is literally called public the database

784
00:36:40,360 --> 00:36:44,440
and when we make a request we can

785
00:36:42,490 --> 00:36:46,750
actually take these three things we have

786
00:36:44,440 --> 00:36:48,520
the API key we have the app ID and we

787
00:36:46,750 --> 00:36:50,830
have the index name as soon as you have

788
00:36:48,520 --> 00:36:53,080
those three we can actually request well

789
00:36:50,830 --> 00:36:55,480
do the exam and then we just make a

790
00:36:53,080 --> 00:36:57,850
query without store sign around or

791
00:36:55,480 --> 00:37:00,130
asterisk and see what the day

792
00:36:57,850 --> 00:37:03,880
facultative this movie was the first

793
00:37:00,130 --> 00:37:07,030
result of the query when we see that we

794
00:37:03,880 --> 00:37:10,810
see that okay it has a user ID and I

795
00:37:07,030 --> 00:37:13,420
usually that's it but what we might do

796
00:37:10,810 --> 00:37:15,700
when we see this is that we might look

797
00:37:13,420 --> 00:37:19,480
at it the other indexes that we might

798
00:37:15,700 --> 00:37:22,089
talk to we look in the code we try to

799
00:37:19,480 --> 00:37:24,700
see that okay there's not only a public

800
00:37:22,090 --> 00:37:27,910
database because when we talk about user

801
00:37:24,700 --> 00:37:30,189
database algun dia we'll say about index

802
00:37:27,910 --> 00:37:33,759
is not allowed for the signals or for

803
00:37:30,190 --> 00:37:36,820
this API key so now we know that the a

804
00:37:33,760 --> 00:37:38,950
VIP with source code scope means that

805
00:37:36,820 --> 00:37:41,560
they have said that this should only

806
00:37:38,950 --> 00:37:43,540
have access to the public database but

807
00:37:41,560 --> 00:37:46,450
what we have right now is that we have

808
00:37:43,540 --> 00:37:48,279
the app ID which means we can search for

809
00:37:46,450 --> 00:37:52,259
in all the information we have about

810
00:37:48,280 --> 00:37:52,260
this user or this company

811
00:37:52,430 --> 00:37:56,899
we will contain this database we know

812
00:37:55,220 --> 00:38:00,348
there's a relation between the app ID

813
00:37:56,900 --> 00:38:02,660
and the database called usually B and we

814
00:38:00,349 --> 00:38:06,079
know that the API key we found a scope

815
00:38:02,660 --> 00:38:07,910
to not view and we start looking at the

816
00:38:06,079 --> 00:38:10,819
web where we start looking at the

817
00:38:07,910 --> 00:38:12,618
history of this this website we start

818
00:38:10,819 --> 00:38:13,849
getting another JavaScript files and

819
00:38:12,619 --> 00:38:17,710
other sub domains from his company

820
00:38:13,849 --> 00:38:21,260
suddenly we found another API publicly

821
00:38:17,710 --> 00:38:23,900
so this public API key was an old one

822
00:38:21,260 --> 00:38:26,180
that was being replaced but we made the

823
00:38:23,900 --> 00:38:29,150
same request the user database and

824
00:38:26,180 --> 00:38:31,129
suddenly we get all the interests so we

825
00:38:29,150 --> 00:38:32,990
try to figure out ok so this another

826
00:38:31,130 --> 00:38:35,599
problem exactly what really happened

827
00:38:32,990 --> 00:38:38,419
there and the theory is they basically

828
00:38:35,599 --> 00:38:40,789
had a no scoped API key back to the day

829
00:38:38,420 --> 00:38:42,980
and they moved to a properly scope one

830
00:38:40,789 --> 00:38:45,470
because someone said so but they never

831
00:38:42,980 --> 00:38:48,470
forgot to revoke this all day yet they

832
00:38:45,470 --> 00:38:51,109
just thought it what got managed in like

833
00:38:48,470 --> 00:38:52,609
the depths of Internet but we actually

834
00:38:51,109 --> 00:38:56,180
found it because we looked at web

835
00:38:52,609 --> 00:38:58,819
archive and now we have a word report we

836
00:38:56,180 --> 00:39:01,190
basically get emails important for all

837
00:38:58,819 --> 00:39:04,930
users disclose due to a sensitive data

838
00:39:01,190 --> 00:39:07,940
in a publicly open or cooler database

839
00:39:04,930 --> 00:39:10,970
this database was supposed to be public

840
00:39:07,940 --> 00:39:13,099
but they utilized a new layer of service

841
00:39:10,970 --> 00:39:15,379
line because of nubia is also you want

842
00:39:13,099 --> 00:39:16,900
to use it because it's so fast so

843
00:39:15,380 --> 00:39:19,599
instead of only

844
00:39:16,900 --> 00:39:21,999
we think that they're they just added a

845
00:39:19,599 --> 00:39:23,349
private thing than ammonia and they

846
00:39:21,999 --> 00:39:25,598
thought they were smart because they

847
00:39:23,349 --> 00:39:27,519
scope the API key they occurred to use

848
00:39:25,599 --> 00:39:28,029
but they forgot about revoking the old

849
00:39:27,519 --> 00:39:31,269
ones

850
00:39:28,029 --> 00:39:33,339
that's what happened now another thing

851
00:39:31,269 --> 00:39:35,430
we might find in fact when looking at

852
00:39:33,339 --> 00:39:38,140
the JavaScript that we might find

853
00:39:35,430 --> 00:39:41,259
environment variables that was used in

854
00:39:38,140 --> 00:39:44,650
your CI unification this is a very very

855
00:39:41,259 --> 00:39:47,380
common issue so when people are building

856
00:39:44,650 --> 00:39:50,349
the code for their websites using

857
00:39:47,380 --> 00:39:53,769
continuous integration CI Jenkins circle

858
00:39:50,349 --> 00:39:57,039
CI whatever they use Travis sometimes

859
00:39:53,769 --> 00:39:59,078
when they build the code some of the

860
00:39:57,039 --> 00:40:00,999
modules that they use in node for

861
00:39:59,079 --> 00:40:04,150
example more in composer are similar

862
00:40:00,999 --> 00:40:06,669
they actually dump the environmental

863
00:40:04,150 --> 00:40:09,039
variables when building it sounds

864
00:40:06,670 --> 00:40:11,619
ridiculous but it's a hundred century

865
00:40:09,039 --> 00:40:13,329
this has happened multiple times that

866
00:40:11,619 --> 00:40:16,930
when you actually look up look at this

867
00:40:13,329 --> 00:40:19,349
you would see this in a judgment is

868
00:40:16,930 --> 00:40:22,649
anything standing out and screaming

869
00:40:19,349 --> 00:40:22,650
vulnerability in

870
00:40:23,450 --> 00:40:28,859
you have AWS access key for the

871
00:40:26,520 --> 00:40:31,619
production and you have an AWS secret

872
00:40:28,859 --> 00:40:33,140
access key for production they would

873
00:40:31,619 --> 00:40:35,760
just stop there in the sea

874
00:40:33,140 --> 00:40:37,680
identification of their JavaScript and

875
00:40:35,760 --> 00:40:39,960
they never thought that that would ever

876
00:40:37,680 --> 00:40:45,149
be a public thing right but suddenly

877
00:40:39,960 --> 00:40:47,280
it's just in the JavaScript so what what

878
00:40:45,150 --> 00:40:49,920
I did in this example was I noted I

879
00:40:47,280 --> 00:40:51,960
loaded my my see my version of a double

880
00:40:49,920 --> 00:40:55,050
yes I use the secret key and that to

881
00:40:51,960 --> 00:40:58,250
speed I ran out to of it just verify

882
00:40:55,050 --> 00:41:01,380
that like this are actually working and

883
00:40:58,250 --> 00:41:04,230
I asked the company can I check what

884
00:41:01,380 --> 00:41:06,089
they are doing they said yeah but we

885
00:41:04,230 --> 00:41:07,619
probably will notice that you're doing

886
00:41:06,089 --> 00:41:10,049
that and I'm saying that that's fine

887
00:41:07,619 --> 00:41:11,730
and I made like an SVG list and I got

888
00:41:10,050 --> 00:41:14,040
all their buckets that they ever used

889
00:41:11,730 --> 00:41:15,690
for everything I had their Terra firme

890
00:41:14,040 --> 00:41:18,180
scripts for provisioning I had their

891
00:41:15,690 --> 00:41:19,859
CloudFormation scripts for provisioning

892
00:41:18,180 --> 00:41:21,960
I had their source data I had their

893
00:41:19,859 --> 00:41:25,430
public clothes I had everything that

894
00:41:21,960 --> 00:41:27,420
they had was with these keys that was

895
00:41:25,430 --> 00:41:30,990
accidentally published to tomb

896
00:41:27,420 --> 00:41:33,319
unification in their Siena here's a guy

897
00:41:30,990 --> 00:41:36,029
with a horse

898
00:41:33,319 --> 00:41:38,819
another thing we might do is creating

899
00:41:36,030 --> 00:41:42,240
word lists so this is the kind of

900
00:41:38,819 --> 00:41:45,060
essence that I want to like tell you

901
00:41:42,240 --> 00:41:47,569
tell you that it's so important because

902
00:41:45,060 --> 00:41:51,089
some of the build was by commenting

903
00:41:47,569 --> 00:41:53,460
understanding the context of like this

904
00:41:51,089 --> 00:41:54,680
is the parts of API we wouldn't be able

905
00:41:53,460 --> 00:41:56,660
to find the

906
00:41:54,680 --> 00:41:59,779
we actually showed you if we didn't

907
00:41:56,660 --> 00:42:02,120
create this word list and I do this for

908
00:41:59,780 --> 00:42:04,670
every program I try to take you know

909
00:42:02,120 --> 00:42:06,440
internal indicators so we have the

910
00:42:04,670 --> 00:42:08,810
different indicators telling us that we

911
00:42:06,440 --> 00:42:10,580
reach eternal this stuff I tend to use

912
00:42:08,810 --> 00:42:12,110
like a subdomain list we know what

913
00:42:10,580 --> 00:42:15,049
subdomains are working for this company

914
00:42:12,110 --> 00:42:17,690
I tend to use multi path all the three

915
00:42:15,050 --> 00:42:19,460
fixes all the endpoints so we have all

916
00:42:17,690 --> 00:42:22,340
these for this company because this

917
00:42:19,460 --> 00:42:23,990
might be invaluable in a couple of years

918
00:42:22,340 --> 00:42:26,480
that we want to test this program again

919
00:42:23,990 --> 00:42:29,080
and it is so easy to put back into

920
00:42:26,480 --> 00:42:32,050
context because you have all the ad I am

921
00:42:29,080 --> 00:42:34,940
you also want to build income bar and

922
00:42:32,050 --> 00:42:36,860
one really is a way to actually do this

923
00:42:34,940 --> 00:42:39,950
let's say you've been using Burke Burke

924
00:42:36,860 --> 00:42:42,320
for a long time and you hang around to

925
00:42:39,950 --> 00:42:44,299
the website and you just want to extract

926
00:42:42,320 --> 00:42:46,670
all the data there's certain things you

927
00:42:44,300 --> 00:42:48,800
can do with one super easy way it's just

928
00:42:46,670 --> 00:42:52,820
literally to select in the proxy history

929
00:42:48,800 --> 00:42:56,000
select all the you know sort on URL take

930
00:42:52,820 --> 00:43:00,080
all the API endpoints complication go

931
00:42:56,000 --> 00:43:02,480
into the console PB paste in for example

932
00:43:00,080 --> 00:43:06,560
and then you cut it on the delimiter tab

933
00:43:02,480 --> 00:43:08,390
character and in my case URL is like the

934
00:43:06,560 --> 00:43:11,150
port I think that's the default and even

935
00:43:08,390 --> 00:43:13,370
burn and here we get all the paths so I

936
00:43:11,150 --> 00:43:17,000
would just sort them by being unique and

937
00:43:13,370 --> 00:43:19,609
now I have like my first workers in this

938
00:43:17,000 --> 00:43:23,350
sentence I will start using this data to

939
00:43:19,610 --> 00:43:23,350
start separating them to

940
00:43:23,570 --> 00:43:27,740
this is just like a really quick way to

941
00:43:25,820 --> 00:43:30,560
just get all the things that you may be

942
00:43:27,740 --> 00:43:33,290
playing around with to get like a list

943
00:43:30,560 --> 00:43:35,690
for being used for this word super easy

944
00:43:33,290 --> 00:43:38,240
another thing we want to do is we want

945
00:43:35,690 --> 00:43:41,480
to apply context we want to show why

946
00:43:38,240 --> 00:43:44,990
humans are smaller than machines so in

947
00:43:41,480 --> 00:43:47,900
this case we see this we see version 1

948
00:43:44,990 --> 00:43:51,020
payments payment methods and we see

949
00:43:47,900 --> 00:43:52,700
there's one shipping in this sense we

950
00:43:51,020 --> 00:43:55,550
would literally like okay what can we

951
00:43:52,700 --> 00:43:57,109
add to this list as a human problem

952
00:43:55,550 --> 00:43:59,990
machine but this is a pretty basic

953
00:43:57,110 --> 00:44:02,330
example but as a human looking at this I

954
00:43:59,990 --> 00:44:04,759
would probably add shipping methods as

955
00:44:02,330 --> 00:44:06,380
well because that's what developer does

956
00:44:04,760 --> 00:44:08,450
they want to reuse things they want to

957
00:44:06,380 --> 00:44:11,030
have the same kind of pattern or lower

958
00:44:08,450 --> 00:44:13,250
so why wouldn't we and remember this

959
00:44:11,030 --> 00:44:16,940
shipping methods was never disclosed in

960
00:44:13,250 --> 00:44:19,130
any way in any JavaScript but just

961
00:44:16,940 --> 00:44:22,190
because we are looking at it we kind of

962
00:44:19,130 --> 00:44:24,440
see that make sense an example because

963
00:44:22,190 --> 00:44:27,320
that looks similar to other things that

964
00:44:24,440 --> 00:44:29,180
we've seen in this API never disclosed

965
00:44:27,320 --> 00:44:32,450
anywhere but still we would shake this

966
00:44:29,180 --> 00:44:36,620
end point just because we apply context

967
00:44:32,450 --> 00:44:39,200
to this and the last part that we want

968
00:44:36,620 --> 00:44:40,790
to do is possible like I can't stress

969
00:44:39,200 --> 00:44:42,950
this enough you want to test so many

970
00:44:40,790 --> 00:44:45,170
things we want to test all the HTTP

971
00:44:42,950 --> 00:44:47,629
methods most passionately put all of

972
00:44:45,170 --> 00:44:49,970
them we want to test with IDs and not

973
00:44:47,630 --> 00:44:52,370
IDs and wit slash or not slash and we

974
00:44:49,970 --> 00:44:55,520
want to test dot JSON and without

975
00:44:52,370 --> 00:45:00,770
exception if you already always have

976
00:44:55,520 --> 00:45:02,960
file extensions those pilot we wanna we

977
00:45:00,770 --> 00:45:03,970
wanna like we are black box in here we

978
00:45:02,960 --> 00:45:08,050
don't know

979
00:45:03,970 --> 00:45:10,750
every kind of see how they are working

980
00:45:08,050 --> 00:45:12,730
out there became tip have literally

981
00:45:10,750 --> 00:45:14,890
released was a guy doing a blog post

982
00:45:12,730 --> 00:45:16,600
just like it and it was a week ago or

983
00:45:14,890 --> 00:45:20,049
something where he literally said that

984
00:45:16,600 --> 00:45:22,920
he could bypass the wall because he were

985
00:45:20,050 --> 00:45:26,400
standing at the request to a ten-point

986
00:45:22,920 --> 00:45:31,450
had a peep statement saying if you get

987
00:45:26,400 --> 00:45:35,140
no validation else likes tea plantation

988
00:45:31,450 --> 00:45:37,600
because a host can can always r-value

989
00:45:35,140 --> 00:45:39,069
validating CSRF no bills because the

990
00:45:37,600 --> 00:45:41,980
inspector said it yet

991
00:45:39,070 --> 00:45:45,190
show this pages else check the see

992
00:45:41,980 --> 00:45:47,860
search okay but the thing was held it

993
00:45:45,190 --> 00:45:50,440
was never like selling a sea salt on

994
00:45:47,860 --> 00:45:52,900
them but the code path basically said

995
00:45:50,440 --> 00:45:55,660
the sea salt okay is already checked

996
00:45:52,900 --> 00:45:57,940
so just by that tip statement just by

997
00:45:55,660 --> 00:46:11,490
sending ahead requests one endpoint they

998
00:45:57,940 --> 00:46:15,280
bypassed ever using this methodology

999
00:46:11,490 --> 00:46:18,020
also again you want to combine

1000
00:46:15,280 --> 00:46:19,940
one of just missed end points you want

1001
00:46:18,020 --> 00:46:22,130
to skip past upon the trial methods add

1002
00:46:19,940 --> 00:46:24,260
regular custom characters backslash in

1003
00:46:22,130 --> 00:46:26,720
person fragment want to test all these

1004
00:46:24,260 --> 00:46:28,730
things no characters literally there are

1005
00:46:26,720 --> 00:46:31,009
a bunch of places that just the Crassus

1006
00:46:28,730 --> 00:46:33,290
gives you a stack units just record by

1007
00:46:31,010 --> 00:46:36,910
the human enhancement always keep it in

1008
00:46:33,290 --> 00:46:40,009
your pocket so to take aways from this

1009
00:46:36,910 --> 00:46:42,290
you want to create your own context

1010
00:46:40,010 --> 00:46:44,089
specific word lists you want to combine

1011
00:46:42,290 --> 00:46:46,040
everything with regular posse that

1012
00:46:44,089 --> 00:46:48,319
you've already done anyway but now we

1013
00:46:46,040 --> 00:46:50,990
have context now we can reach endpoints

1014
00:46:48,319 --> 00:46:52,940
that you never reached before and you

1015
00:46:50,990 --> 00:46:53,839
also want to understand and learn as

1016
00:46:52,940 --> 00:46:55,940
being this close

1017
00:46:53,839 --> 00:46:58,220
remember the battery where i the battery

1018
00:46:55,940 --> 00:47:00,470
where I told us so much information just

1019
00:46:58,220 --> 00:47:02,359
by an error there were no access this

1020
00:47:00,470 --> 00:47:05,149
course which is a different error

1021
00:47:02,359 --> 00:47:09,160
message for them when we will didn't do

1022
00:47:05,150 --> 00:47:09,160
it the first thing that told us so much

1023
00:47:18,700 --> 00:47:28,450
so any questions we have I don't know

1024
00:47:24,250 --> 00:47:28,450
raise your hand if you have a question

1025
00:47:28,930 --> 00:47:38,149
my favorite posting - I used intruder a

1026
00:47:34,040 --> 00:47:42,770
lot in Bern I use be fuss about I think

1027
00:47:38,150 --> 00:47:46,610
I hadn't found my favorite fussing - yet

1028
00:47:42,770 --> 00:47:48,650
because I don't think it exists I tend

1029
00:47:46,610 --> 00:47:51,860
to so what I see with the problem with

1030
00:47:48,650 --> 00:47:54,170
Posse tools is if they only check status

1031
00:47:51,860 --> 00:47:57,470
code or only check content length or

1032
00:47:54,170 --> 00:47:59,000
only check what kind of data is in an

1033
00:47:57,470 --> 00:48:01,970
account that you would always miss

1034
00:47:59,000 --> 00:48:04,250
something so I wanted to be not smarter

1035
00:48:01,970 --> 00:48:07,399
than just checking one of them I wanted

1036
00:48:04,250 --> 00:48:09,080
to check one or all of them or none of

1037
00:48:07,400 --> 00:48:12,470
them like I would have like combined

1038
00:48:09,080 --> 00:48:14,960
that logic in a very specific way and I

1039
00:48:12,470 --> 00:48:17,839
want to have it as smart to actually

1040
00:48:14,960 --> 00:48:20,480
understand how it's supposed to it by

1041
00:48:17,840 --> 00:48:22,640
you saying you know it's testing a

1042
00:48:20,480 --> 00:48:24,890
endpoint that it really knows doesn't

1043
00:48:22,640 --> 00:48:26,509
exist and that compares all the things

1044
00:48:24,890 --> 00:48:28,670
but still understand that if you're

1045
00:48:26,510 --> 00:48:30,500
sending a word that is really long

1046
00:48:28,670 --> 00:48:34,460
the constant length will be longer

1047
00:48:30,500 --> 00:48:35,900
because it is reflexive right so stuff

1048
00:48:34,460 --> 00:48:38,180
like that and I haven't really found

1049
00:48:35,900 --> 00:48:40,790
that to be the easiest one is hurt

1050
00:48:38,180 --> 00:48:43,098
because you can sort it and see the sort

1051
00:48:40,790 --> 00:48:56,058
of yourself

1052
00:48:43,099 --> 00:49:10,849
oh I couldn't hear you sorry how I

1053
00:48:56,059 --> 00:49:13,279
create that's a good question okay now I

1054
00:49:10,849 --> 00:49:16,700
categorize really what abilities with

1055
00:49:13,279 --> 00:49:19,430
nan like with no more abilities and I

1056
00:49:16,700 --> 00:49:23,239
think it's also context related so

1057
00:49:19,430 --> 00:49:27,078
sometimes you need to understand a good

1058
00:49:23,239 --> 00:49:29,359
example of this is iron right so in a

1059
00:49:27,079 --> 00:49:31,579
band if you would maybe to do an ID or

1060
00:49:29,359 --> 00:49:34,970
and see someone else's bank statements

1061
00:49:31,579 --> 00:49:38,420
that's a little bit early but if you're

1062
00:49:34,970 --> 00:49:41,959
like thinking about Bitcoin looking at

1063
00:49:38,420 --> 00:49:45,920
another wallet is per defined like a

1064
00:49:41,960 --> 00:49:47,479
proper way to use people so you can't

1065
00:49:45,920 --> 00:49:49,130
really talk about the night or being

1066
00:49:47,479 --> 00:49:51,078
able to look at another wallet in

1067
00:49:49,130 --> 00:49:53,930
Bitcoin because that's how it's supposed

1068
00:49:51,079 --> 00:49:55,819
to be done so it's all about context

1069
00:49:53,930 --> 00:49:58,910
it's all about understanding what's the

1070
00:49:55,819 --> 00:50:00,529
dangerous the things for this company so

1071
00:49:58,910 --> 00:50:03,950
it's not an easy answer

1072
00:50:00,529 --> 00:50:05,930
you want to see like a comment in the

1073
00:50:03,950 --> 00:50:09,019
code saying this is a vulnerability that

1074
00:50:05,930 --> 00:50:11,239
I might see that but I mean that's not

1075
00:50:09,019 --> 00:50:13,218
what's happening most of the time so a

1076
00:50:11,239 --> 00:50:16,309
lot of the times we need to understand

1077
00:50:13,219 --> 00:50:18,650
like if this company and you can verify

1078
00:50:16,309 --> 00:50:20,930
this on other things right so if you

1079
00:50:18,650 --> 00:50:22,940
would go to the in in the example of us

1080
00:50:20,930 --> 00:50:25,308
getting the email and the phone number

1081
00:50:22,940 --> 00:50:27,319
of the user if we looked at you know

1082
00:50:25,309 --> 00:50:28,910
looking at the regular user endpoint

1083
00:50:27,319 --> 00:50:31,460
when you go to our profile for another

1084
00:50:28,910 --> 00:50:32,930
user you want victory

1085
00:50:31,460 --> 00:50:34,970
but there's no email address here

1086
00:50:32,930 --> 00:50:36,980
there's no phone number here they don't

1087
00:50:34,970 --> 00:50:38,810
want to show that for all the users of

1088
00:50:36,980 --> 00:50:41,180
course they don't want to show that why

1089
00:50:38,810 --> 00:50:43,340
would they disclose that picked up but

1090
00:50:41,180 --> 00:50:46,100
when we saw it on our different endpoint

1091
00:50:43,340 --> 00:50:48,740
we came to realize this is not intended

1092
00:50:46,100 --> 00:50:50,990
this state that was not disclosed before

1093
00:50:48,740 --> 00:50:54,799
but only on this endpoint I was able to

1094
00:50:50,990 --> 00:50:56,899
get the email and phone number so that

1095
00:50:54,800 --> 00:51:01,280
kind of gives us an indication that if

1096
00:50:56,900 --> 00:51:33,770
this point is so different there must be

1097
00:51:01,280 --> 00:51:36,680
something wrong with it so I felt as a

1098
00:51:33,770 --> 00:51:40,040
developer I would look into making sure

1099
00:51:36,680 --> 00:51:41,870
that the API we were using are the ones

1100
00:51:40,040 --> 00:51:43,790
that actually working so one of the

1101
00:51:41,870 --> 00:51:46,009
examples I showed you was that they had

1102
00:51:43,790 --> 00:51:47,390
mercenary through eating voice you

1103
00:51:46,010 --> 00:51:48,680
should make sure that like versions

1104
00:51:47,390 --> 00:51:51,170
through a person one doesn't even

1105
00:51:48,680 --> 00:51:54,290
existed like when you actually you be

1106
00:51:51,170 --> 00:51:56,240
moving your your things or like another

1107
00:51:54,290 --> 00:51:58,580
solution is to make sure that your you

1108
00:51:56,240 --> 00:52:00,439
also are checking those for the same

1109
00:51:58,580 --> 00:52:01,230
kind of your abilities like one of the

1110
00:52:00,440 --> 00:52:03,930
examples I

1111
00:52:01,230 --> 00:52:06,210
was that a new API was disability female

1112
00:52:03,930 --> 00:52:08,520
victim that's a really a hard one to

1113
00:52:06,210 --> 00:52:11,160
catch because the better person might

1114
00:52:08,520 --> 00:52:13,170
not even introducing it in you know the

1115
00:52:11,160 --> 00:52:15,060
documentation or swagger or something

1116
00:52:13,170 --> 00:52:17,550
they just introduced it because someone

1117
00:52:15,060 --> 00:52:20,250
was refactoring there may be eyes and

1118
00:52:17,550 --> 00:52:23,040
they haven't even you know put it up for

1119
00:52:20,250 --> 00:52:26,369
reading so it's really hard to make sure

1120
00:52:23,040 --> 00:52:28,500
that like all the entrants that we have

1121
00:52:26,369 --> 00:52:31,830
that we're testing that one like one of

1122
00:52:28,500 --> 00:52:34,470
the things that I would tend to do is

1123
00:52:31,830 --> 00:52:37,859
that one thing to be that you automate

1124
00:52:34,470 --> 00:52:40,410
creating swagger wise internally based

1125
00:52:37,859 --> 00:52:43,319
on the routes that are being evaluated

1126
00:52:40,410 --> 00:52:47,040
instead of disconnecting the Swagger's

1127
00:52:43,320 --> 00:52:49,350
so a swagger is made by hand you will

1128
00:52:47,040 --> 00:52:52,380
always have a disconnected so I tend to

1129
00:52:49,350 --> 00:52:54,420
like force people to have some form of

1130
00:52:52,380 --> 00:52:56,910
automation to disclose what routes are

1131
00:52:54,420 --> 00:52:58,800
actually active that way you made to

1132
00:52:56,910 --> 00:53:01,350
identify that input you're not using

1133
00:52:58,800 --> 00:53:02,940
anymore are still publicly available for

1134
00:53:01,350 --> 00:53:05,100
new endpoints that is not be used

1135
00:53:02,940 --> 00:53:07,140
anymore or publicly available that might

1136
00:53:05,100 --> 00:53:08,910
be like a good solution to it because

1137
00:53:07,140 --> 00:53:10,980
there will always be a disconnect

1138
00:53:08,910 --> 00:53:13,529
between the publishes swagger if you

1139
00:53:10,980 --> 00:53:15,750
have the public aid and the actual real

1140
00:53:13,530 --> 00:53:17,230
life scenario routing that's literally

1141
00:53:15,750 --> 00:53:19,540
the first thing I do

1142
00:53:17,230 --> 00:53:21,250
the company that I want to look at

1143
00:53:19,540 --> 00:53:23,859
together with the developers I'm like

1144
00:53:21,250 --> 00:53:25,960
give me your knocking why thanks

1145
00:53:23,859 --> 00:53:29,560
give me all your rocks some of them

1146
00:53:25,960 --> 00:53:31,839
sending me a link to the public that's

1147
00:53:29,560 --> 00:53:34,240
not the truth I will tear out from their

1148
00:53:31,839 --> 00:53:36,700
code like okay miss Wagner contain 50

1149
00:53:34,240 --> 00:53:39,879
pots but when you look at the routing it

1150
00:53:36,700 --> 00:53:42,098
has 25 and then you understand there

1151
00:53:39,880 --> 00:53:44,109
would be a problem so that might be a

1152
00:53:42,099 --> 00:53:45,910
good training session to actually

1153
00:53:44,109 --> 00:53:48,040
extract them from the real problem

1154
00:53:45,910 --> 00:53:50,490
instead of having the disconnects

1155
00:53:48,040 --> 00:53:50,490
laminate

1156
00:53:53,120 --> 00:53:59,179
[Applause]

