1
00:00:03,580 --> 00:00:09,010
hi everyone thanks for coming to hear

2
00:00:06,850 --> 00:00:11,110
this talk my name is artem soothe cough

3
00:00:09,010 --> 00:00:11,680
i'm a senior security engineer at

4
00:00:11,110 --> 00:00:14,018
Skyscanner

5
00:00:11,680 --> 00:00:15,040
and we're all about making awesome

6
00:00:14,019 --> 00:00:17,830
products for the traveler

7
00:00:15,040 --> 00:00:20,950
we are app first and so we provide our

8
00:00:17,830 --> 00:00:23,738
app on all major platforms and we

9
00:00:20,950 --> 00:00:26,860
operate our services in Amazon Cloud and

10
00:00:23,739 --> 00:00:28,329
as a security engineer I get to spend a

11
00:00:26,860 --> 00:00:30,939
lot of my time playing around in that

12
00:00:28,329 --> 00:00:33,940
and it's pretty awesome and interesting

13
00:00:30,939 --> 00:00:36,100
and so today I want to talk about AWS

14
00:00:33,940 --> 00:00:38,440
service security and present health life

15
00:00:36,100 --> 00:00:44,010
which is a little auditing tool that I

16
00:00:38,440 --> 00:00:47,050
made for lambdas so what's a serverless

17
00:00:44,010 --> 00:00:50,589
well it's called a server let's write

18
00:00:47,050 --> 00:00:52,089
but there's a server really the thing is

19
00:00:50,589 --> 00:00:54,940
just you don't have to manage any of it

20
00:00:52,089 --> 00:00:57,519
it's all taken care of by Amazon and all

21
00:00:54,940 --> 00:00:59,559
you have to do is upload your code set

22
00:00:57,519 --> 00:01:01,420
up some event sources to trigger that

23
00:00:59,559 --> 00:01:02,050
code set up some permissions and then

24
00:01:01,420 --> 00:01:06,400
you're good to go

25
00:01:02,050 --> 00:01:07,840
and what's a lambda well a lambda is an

26
00:01:06,400 --> 00:01:11,470
event-driven serverless computing

27
00:01:07,840 --> 00:01:14,320
platform by Amazon and the way it works

28
00:01:11,470 --> 00:01:17,350
is that it runs code in response to an

29
00:01:14,320 --> 00:01:19,270
event that you set up it automatically

30
00:01:17,350 --> 00:01:20,890
scales with high availability so you

31
00:01:19,270 --> 00:01:23,039
don't have to worry about the denial of

32
00:01:20,890 --> 00:01:25,960
service or anything like this

33
00:01:23,040 --> 00:01:28,509
it runs in an isolated environment with

34
00:01:25,960 --> 00:01:31,570
a read-only file system it's one

35
00:01:28,509 --> 00:01:33,189
execution per request and typically runs

36
00:01:31,570 --> 00:01:39,309
for a few seconds but there's a 15

37
00:01:33,189 --> 00:01:42,008
minute runtime limit so the way lambdas

38
00:01:39,310 --> 00:01:44,649
work is that they have versions and

39
00:01:42,009 --> 00:01:46,539
aliases and basically this means that

40
00:01:44,649 --> 00:01:48,880
you can publish multiple versions of

41
00:01:46,539 --> 00:01:52,000
your lambda and create these human

42
00:01:48,880 --> 00:01:53,920
readable tags called aliases to each

43
00:01:52,000 --> 00:01:56,079
individual version and that way you can

44
00:01:53,920 --> 00:01:58,539
have one version production one version

45
00:01:56,079 --> 00:02:01,270
in development and seamlessly switch

46
00:01:58,539 --> 00:02:05,780
these ones they're ready to be taken to

47
00:02:01,270 --> 00:02:09,650
production lambdas also have layers

48
00:02:05,780 --> 00:02:12,140
and these layers is basically a way to

49
00:02:09,650 --> 00:02:14,930
avoid code duplication across multiple

50
00:02:12,140 --> 00:02:17,230
functions so for example you can publish

51
00:02:14,930 --> 00:02:19,490
a layer with common logic like metrics

52
00:02:17,230 --> 00:02:21,590
tracking or authentication or whatever

53
00:02:19,490 --> 00:02:24,440
and then you simply reference this layer

54
00:02:21,590 --> 00:02:26,630
from your function and that way you can

55
00:02:24,440 --> 00:02:28,880
share code this is also a way to

56
00:02:26,630 --> 00:02:35,150
introduce third party code to your

57
00:02:28,880 --> 00:02:37,310
lambda functions so lambdas run with an

58
00:02:35,150 --> 00:02:41,090
execution roll which basically

59
00:02:37,310 --> 00:02:44,990
identifies the function and controls its

60
00:02:41,090 --> 00:02:49,250
access to AWS resources and apart from

61
00:02:44,990 --> 00:02:52,240
this identity based execution role other

62
00:02:49,250 --> 00:02:55,900
resources including a lambda also have a

63
00:02:52,240 --> 00:02:59,480
resource based policy which also

64
00:02:55,900 --> 00:03:02,060
specifies what are the what are the

65
00:02:59,480 --> 00:03:05,660
event sources for this function and what

66
00:03:02,060 --> 00:03:07,300
you can do with it and if we take a look

67
00:03:05,660 --> 00:03:10,280
at an example here

68
00:03:07,300 --> 00:03:11,930
on that side we have an s3 bucket and

69
00:03:10,280 --> 00:03:16,010
then on this side we have the lambda

70
00:03:11,930 --> 00:03:18,140
function and what happens is that the

71
00:03:16,010 --> 00:03:21,440
user uploads a file to the s3 bucket and

72
00:03:18,140 --> 00:03:24,470
there's a notification set up to notify

73
00:03:21,440 --> 00:03:27,410
the lambda function and trigger it and

74
00:03:24,470 --> 00:03:30,080
when the lambda function runs it uses an

75
00:03:27,410 --> 00:03:31,880
execution roll that tells it what what

76
00:03:30,080 --> 00:03:35,750
it can and can't do and who can trigger

77
00:03:31,880 --> 00:03:37,310
it and then execute some code that you

78
00:03:35,750 --> 00:03:39,260
upload them there and this code

79
00:03:37,310 --> 00:03:41,150
processes the file and so all of this

80
00:03:39,260 --> 00:03:44,359
happens without you ever configuring any

81
00:03:41,150 --> 00:03:46,100
service like any servers or anything

82
00:03:44,360 --> 00:03:48,500
else you just go into the management

83
00:03:46,100 --> 00:03:50,709
console or you upload a CloudFormation

84
00:03:48,500 --> 00:03:54,739
or whatever and all this happens

85
00:03:50,709 --> 00:03:58,550
automatically so a more interesting

86
00:03:54,739 --> 00:04:01,489
example is a micro service so you've got

87
00:03:58,550 --> 00:04:03,800
your users going in through route 53 at

88
00:04:01,489 --> 00:04:05,239
the top there they resolve the domain

89
00:04:03,800 --> 00:04:09,320
name and then they go to an s3 bucket

90
00:04:05,239 --> 00:04:14,090
which has your static website you also

91
00:04:09,320 --> 00:04:17,930
have their below route 53 right there

92
00:04:14,090 --> 00:04:19,340
you have your API gateway which

93
00:04:17,930 --> 00:04:21,680
specifies the different endpoint

94
00:04:19,339 --> 00:04:23,989
that you can access and each of these

95
00:04:21,680 --> 00:04:26,600
and points maps into a separate lambda

96
00:04:23,990 --> 00:04:29,510
function and because all of these

97
00:04:26,600 --> 00:04:30,919
probably share some common functionality

98
00:04:29,510 --> 00:04:34,010
you can probably put that into a layer

99
00:04:30,919 --> 00:04:37,070
and then these functions do stuff and

100
00:04:34,010 --> 00:04:39,830
maybe access your database and so on and

101
00:04:37,070 --> 00:04:42,139
again all of this is without you ever

102
00:04:39,830 --> 00:04:44,710
touching any server configuration then

103
00:04:42,139 --> 00:04:47,510
you software any hardware you just

104
00:04:44,710 --> 00:04:53,359
configure it like through a management

105
00:04:47,510 --> 00:04:54,919
console panel or whatever and so this is

106
00:04:53,360 --> 00:04:57,200
great right you don't have to worry

107
00:04:54,919 --> 00:04:59,440
about patching your software you don't

108
00:04:57,200 --> 00:05:02,210
have to worry about changing Hardware

109
00:04:59,440 --> 00:05:05,630
everything is already fault tolerant and

110
00:05:02,210 --> 00:05:07,760
highly available by default there's

111
00:05:05,630 --> 00:05:10,909
virtually unlimited scaling capacity in

112
00:05:07,760 --> 00:05:13,700
execution and then storage you have an

113
00:05:10,910 --> 00:05:20,330
isolated network perimeter inside your V

114
00:05:13,700 --> 00:05:21,830
PC and okay but so now mmm you know this

115
00:05:20,330 --> 00:05:23,719
is really different from the typical

116
00:05:21,830 --> 00:05:28,430
setup with your servers and stuff so how

117
00:05:23,720 --> 00:05:31,550
do we really how can we check what's

118
00:05:28,430 --> 00:05:32,950
going on in there how can we audit sort

119
00:05:31,550 --> 00:05:37,130
of the things that are happening and

120
00:05:32,950 --> 00:05:38,990
yeah again AWS shared responsibility

121
00:05:37,130 --> 00:05:40,490
model states that AWS is going to take

122
00:05:38,990 --> 00:05:43,389
care of all the software and hardware

123
00:05:40,490 --> 00:05:46,940
stuff and you have to take care of

124
00:05:43,389 --> 00:05:49,639
configuring your service and so a huge

125
00:05:46,940 --> 00:05:51,260
part really about securing your lambdas

126
00:05:49,639 --> 00:05:54,530
and serverless architecture is about

127
00:05:51,260 --> 00:05:56,150
configuration and this configuration is

128
00:05:54,530 --> 00:05:57,619
hard you need to set up permissions you

129
00:05:56,150 --> 00:06:00,020
need to set up access controls and

130
00:05:57,620 --> 00:06:03,169
there's a lot of stuff at play there's

131
00:06:00,020 --> 00:06:05,419
users roles trusted entities you know

132
00:06:03,169 --> 00:06:08,240
your access control lists resource based

133
00:06:05,419 --> 00:06:10,760
policies manage policies inline policies

134
00:06:08,240 --> 00:06:12,650
and the first time you touch this you're

135
00:06:10,760 --> 00:06:14,840
like okay well that's too much stuff

136
00:06:12,650 --> 00:06:17,599
going on and you really need to figure

137
00:06:14,840 --> 00:06:20,330
it out and so really what happens is

138
00:06:17,599 --> 00:06:23,240
that people you know developers who want

139
00:06:20,330 --> 00:06:26,030
to go fast and they really need to get

140
00:06:23,240 --> 00:06:28,280
things done they don't normally take the

141
00:06:26,030 --> 00:06:31,429
time or they're not aware of how to

142
00:06:28,280 --> 00:06:33,289
configure this well so what they do is

143
00:06:31,430 --> 00:06:36,320
for example

144
00:06:33,290 --> 00:06:38,690
you have an sqs queue right and when you

145
00:06:36,320 --> 00:06:40,520
create it there at the bottom it tells

146
00:06:38,690 --> 00:06:42,980
you okay well you have this sqs queue

147
00:06:40,520 --> 00:06:44,539
but it doesn't have a policy so you're

148
00:06:42,980 --> 00:06:46,490
the only person who can use this queue

149
00:06:44,540 --> 00:06:48,920
and that's probably not what you want

150
00:06:46,490 --> 00:06:51,290
right you want your lambda functions or

151
00:06:48,920 --> 00:06:52,700
your services to access this queue and

152
00:06:51,290 --> 00:06:55,610
use it in a way so you need to set up a

153
00:06:52,700 --> 00:06:58,400
policy and the easiest way to set it up

154
00:06:55,610 --> 00:07:01,340
is basically in two clicks everybody and

155
00:06:58,400 --> 00:07:04,549
all all actions oh add permission this

156
00:07:01,340 --> 00:07:08,229
this allows everyone to do everything on

157
00:07:04,550 --> 00:07:12,400
your queue and this will work of course

158
00:07:08,230 --> 00:07:14,510
you know it's gonna is gonna work but

159
00:07:12,400 --> 00:07:21,109
you know it's not really secure and

160
00:07:14,510 --> 00:07:22,640
we'll see why in a bit and this in

161
00:07:21,110 --> 00:07:24,650
itself the policy configuration is

162
00:07:22,640 --> 00:07:26,210
really a unique serverless challenge

163
00:07:24,650 --> 00:07:27,979
because now you don't have to worry

164
00:07:26,210 --> 00:07:29,450
about software and hardware but you do

165
00:07:27,980 --> 00:07:31,730
have to worry about setting up all these

166
00:07:29,450 --> 00:07:34,370
permissions and connecting your services

167
00:07:31,730 --> 00:07:37,070
in the right way and okay giving all

168
00:07:34,370 --> 00:07:39,050
permissions to everybody is maybe okay

169
00:07:37,070 --> 00:07:40,730
in sandbox when you want to go fast and

170
00:07:39,050 --> 00:07:42,620
you want to develop your product and

171
00:07:40,730 --> 00:07:45,740
test it but once you push it into

172
00:07:42,620 --> 00:07:47,540
production well you can't really but you

173
00:07:45,740 --> 00:07:49,810
shouldn't really push it like this you

174
00:07:47,540 --> 00:07:52,340
need to configure all your permissions

175
00:07:49,810 --> 00:07:56,510
really following the least privilege

176
00:07:52,340 --> 00:07:59,989
principle otherwise you might get public

177
00:07:56,510 --> 00:08:02,539
exposure of your s3 buckets you know

178
00:07:59,990 --> 00:08:05,600
with information about your users and so

179
00:08:02,540 --> 00:08:08,840
on as we have recently seen in the news

180
00:08:05,600 --> 00:08:10,930
and just to briefly take a look at

181
00:08:08,840 --> 00:08:13,969
what's what's at play here for

182
00:08:10,930 --> 00:08:16,700
configuring a policy policies have an

183
00:08:13,970 --> 00:08:18,470
effect which is allowed you now so it's

184
00:08:16,700 --> 00:08:22,070
telling you are you allowing or denying

185
00:08:18,470 --> 00:08:24,500
stuff it has a principle which specifies

186
00:08:22,070 --> 00:08:26,870
exactly who is affected by this policy

187
00:08:24,500 --> 00:08:30,290
it could be a user role a trusted entity

188
00:08:26,870 --> 00:08:33,140
or whatever the actions specify the

189
00:08:30,290 --> 00:08:36,830
actual things the actual permissions

190
00:08:33,140 --> 00:08:41,030
that you're allowing or denying resource

191
00:08:36,830 --> 00:08:44,750
specifies what other AWS services you

192
00:08:41,030 --> 00:08:46,839
can or cannot access or use and finally

193
00:08:44,750 --> 00:08:49,180
there is a condition which is optional

194
00:08:46,840 --> 00:08:53,020
and it specifies when the policy is in

195
00:08:49,180 --> 00:08:57,760
effect and so the common pitfalls with

196
00:08:53,020 --> 00:09:00,189
that is you know actions unrestricted

197
00:08:57,760 --> 00:09:01,840
actions we specify the permissions and

198
00:09:00,190 --> 00:09:03,940
so at the top you see an example of

199
00:09:01,840 --> 00:09:06,570
specifying a specific action for

200
00:09:03,940 --> 00:09:09,640
downloading a file from an s3 bucket and

201
00:09:06,570 --> 00:09:11,890
at the bottom you see a wild-card being

202
00:09:09,640 --> 00:09:14,110
used with these actions and so the well

203
00:09:11,890 --> 00:09:19,480
basically says all of them you know

204
00:09:14,110 --> 00:09:21,070
allow everything and if your service is

205
00:09:19,480 --> 00:09:23,320
really meant to allow users to download

206
00:09:21,070 --> 00:09:25,090
stuff well that's really the only thing

207
00:09:23,320 --> 00:09:26,500
you should allow because otherwise they

208
00:09:25,090 --> 00:09:28,480
will also be able to upload stuff to

209
00:09:26,500 --> 00:09:31,420
your three bucket maybe abused it to a

210
00:09:28,480 --> 00:09:33,250
distributed malicious content or they

211
00:09:31,420 --> 00:09:38,349
could maybe delete some stuff from your

212
00:09:33,250 --> 00:09:41,260
bucket and so on another example is the

213
00:09:38,350 --> 00:09:43,450
unrestricted principle so at the top

214
00:09:41,260 --> 00:09:45,189
again you see an example of specifying a

215
00:09:43,450 --> 00:09:48,100
concrete principle saying okay this user

216
00:09:45,190 --> 00:09:50,560
account you know my policy is about

217
00:09:48,100 --> 00:09:52,690
giving this user access or restricting

218
00:09:50,560 --> 00:09:54,160
this user in some way and then at the

219
00:09:52,690 --> 00:09:56,470
bottom you're basically saying all right

220
00:09:54,160 --> 00:09:59,050
everyone doesn't matter who public not

221
00:09:56,470 --> 00:10:01,950
public you know AWS user or not okay

222
00:09:59,050 --> 00:10:01,949
well it applies here

223
00:10:03,060 --> 00:10:08,229
and then conditions they're optional but

224
00:10:06,400 --> 00:10:09,640
when you're specifying when you're

225
00:10:08,230 --> 00:10:13,120
allowing actions and then you're

226
00:10:09,640 --> 00:10:15,730
specifying a wild-card principle that

227
00:10:13,120 --> 00:10:18,580
really makes your code or your function

228
00:10:15,730 --> 00:10:20,380
or your content public and available to

229
00:10:18,580 --> 00:10:21,970
everyone and so unless you specify an

230
00:10:20,380 --> 00:10:23,950
additional condition it's gonna stay

231
00:10:21,970 --> 00:10:25,750
like that and so this is an example of

232
00:10:23,950 --> 00:10:30,430
specifying a condition where you're

233
00:10:25,750 --> 00:10:32,950
restricting access by source IP so maybe

234
00:10:30,430 --> 00:10:34,510
for example you have I don't know a lot

235
00:10:32,950 --> 00:10:36,610
of services and there's no way for you

236
00:10:34,510 --> 00:10:39,130
to specify all the principles one by one

237
00:10:36,610 --> 00:10:41,440
so you say okay allow all principles but

238
00:10:39,130 --> 00:10:46,450
only from this private subnet that I

239
00:10:41,440 --> 00:10:49,960
have and some of that would work there

240
00:10:46,450 --> 00:10:52,990
are tons of ways to really screw this up

241
00:10:49,960 --> 00:10:58,090
there's no allowing not principal which

242
00:10:52,990 --> 00:11:00,760
is like allowing everyone but allowing

243
00:10:58,090 --> 00:11:04,120
not action allowing everything but

244
00:11:00,760 --> 00:11:07,090
there's a lot of ways to do not do well

245
00:11:04,120 --> 00:11:09,640
s3 access control list so you can use

246
00:11:07,090 --> 00:11:14,770
wildcards everywhere and there's really

247
00:11:09,640 --> 00:11:17,680
a lot a lot of stuff here at play and so

248
00:11:14,770 --> 00:11:21,550
when we were looking at this at

249
00:11:17,680 --> 00:11:24,040
Skyscanner we had service architectures

250
00:11:21,550 --> 00:11:25,630
running in production and we said okay

251
00:11:24,040 --> 00:11:28,140
well we want to see what's going on

252
00:11:25,630 --> 00:11:31,480
inside we want to see what we have and

253
00:11:28,140 --> 00:11:33,460
maybe do a security audit and see what's

254
00:11:31,480 --> 00:11:36,430
really a how do we really have it set up

255
00:11:33,460 --> 00:11:39,400
and so health life is basically this

256
00:11:36,430 --> 00:11:43,630
lamda auditing tool it's made to create

257
00:11:39,400 --> 00:11:45,189
asset visibility and security and help

258
00:11:43,630 --> 00:11:49,680
you improve security with actionable

259
00:11:45,190 --> 00:11:53,110
results it has been released to public

260
00:11:49,680 --> 00:11:56,680
has been open sourced just yesterday and

261
00:11:53,110 --> 00:11:59,950
you can install it through pip or you

262
00:11:56,680 --> 00:12:02,020
can download source code and github so

263
00:11:59,950 --> 00:12:06,240
check it out and you know peers are

264
00:12:02,020 --> 00:12:06,240
welcome and so on

265
00:12:06,930 --> 00:12:14,469
and yeah so the way how life works is

266
00:12:11,020 --> 00:12:14,920
basically it takes in a list of function

267
00:12:14,470 --> 00:12:17,080
errands

268
00:12:14,920 --> 00:12:18,969
so you're saying K or it all of them or

269
00:12:17,080 --> 00:12:21,610
maybe this one specific one that I want

270
00:12:18,970 --> 00:12:23,800
and then using this function is going to

271
00:12:21,610 --> 00:12:25,150
take is gonna find all the event sources

272
00:12:23,800 --> 00:12:29,020
for this function is gonna find all the

273
00:12:25,150 --> 00:12:31,000
resources it uses and then check the

274
00:12:29,020 --> 00:12:32,470
policies how are those configured for

275
00:12:31,000 --> 00:12:35,980
the function as well as all the

276
00:12:32,470 --> 00:12:37,510
resources and event sources and there's

277
00:12:35,980 --> 00:12:40,360
going to also check some configurations

278
00:12:37,510 --> 00:12:43,300
like for example is a storage encrypted

279
00:12:40,360 --> 00:12:46,300
or not and as you know or maybe not but

280
00:12:43,300 --> 00:12:48,160
in Amazon or everything comes for free

281
00:12:46,300 --> 00:12:50,969
regarding encryption you can always

282
00:12:48,160 --> 00:12:50,969
enable it for free

283
00:12:51,680 --> 00:12:59,160
and yeah so once when it does that you

284
00:12:56,820 --> 00:13:00,660
can also optionally enable static code

285
00:12:59,160 --> 00:13:02,880
analysis so it's going to download your

286
00:13:00,660 --> 00:13:04,769
function code and run it through summary

287
00:13:02,880 --> 00:13:06,209
cube in this case because that's what

288
00:13:04,769 --> 00:13:09,029
we're using a scanner so I made it

289
00:13:06,209 --> 00:13:10,800
compatible with summary cube and get

290
00:13:09,029 --> 00:13:13,230
help you actually have a docker file to

291
00:13:10,800 --> 00:13:18,449
build a summary cube server for yourself

292
00:13:13,230 --> 00:13:21,209
if you don't have one and yeah on the

293
00:13:18,450 --> 00:13:25,140
output you get these JSON and HTML

294
00:13:21,209 --> 00:13:27,000
reports that you can use either in some

295
00:13:25,140 --> 00:13:29,100
automatic system that you might have or

296
00:13:27,000 --> 00:13:32,579
you might you know you might want to

297
00:13:29,100 --> 00:13:34,470
take a look at it yourself so this is

298
00:13:32,579 --> 00:13:37,890
what you get when you run it from your

299
00:13:34,470 --> 00:13:40,680
terminal with verbose mode on it's made

300
00:13:37,890 --> 00:13:42,540
to be run from terminal as well as say a

301
00:13:40,680 --> 00:13:44,849
cron job like you want to set it up and

302
00:13:42,540 --> 00:13:46,829
it runs every day or whatever so you can

303
00:13:44,850 --> 00:13:49,800
turn off all the verbose output of

304
00:13:46,829 --> 00:13:51,870
course there's different switches you

305
00:13:49,800 --> 00:13:56,519
can specify you can play around with it

306
00:13:51,870 --> 00:13:58,649
and and see what it does and these are

307
00:13:56,519 --> 00:14:01,890
some of the examples of the gene JSON

308
00:13:58,649 --> 00:14:03,810
output so there's a statistics file

309
00:14:01,890 --> 00:14:07,500
which is basically like tracking what

310
00:14:03,810 --> 00:14:09,540
you have going on in your whether your

311
00:14:07,500 --> 00:14:11,339
lambda function so it's for example

312
00:14:09,540 --> 00:14:13,860
telling you the run times how many

313
00:14:11,339 --> 00:14:16,019
functions do you have where different

314
00:14:13,860 --> 00:14:19,140
run time so you can see okay I have

315
00:14:16,019 --> 00:14:22,829
maybe like 17 PI all Python images that

316
00:14:19,140 --> 00:14:25,050
I might want to update or whatever or

317
00:14:22,829 --> 00:14:27,719
you might see some you know weird

318
00:14:25,050 --> 00:14:29,699
language popping up and there's some

319
00:14:27,720 --> 00:14:32,760
custom one time that you might want to

320
00:14:29,699 --> 00:14:35,550
address it's telling you like for

321
00:14:32,760 --> 00:14:37,800
example security stuff how many high

322
00:14:35,550 --> 00:14:39,120
detections you know medium detections

323
00:14:37,800 --> 00:14:43,859
that I might want to take care of right

324
00:14:39,120 --> 00:14:46,980
away and so on this one's taken from the

325
00:14:43,860 --> 00:14:50,220
security JSON file and here it's telling

326
00:14:46,980 --> 00:14:52,050
you for each item that it finds it's

327
00:14:50,220 --> 00:14:55,560
basically telling you the function that

328
00:14:52,050 --> 00:14:58,199
this belongs to the where tells you

329
00:14:55,560 --> 00:15:00,599
exactly which event source or resource

330
00:14:58,199 --> 00:15:02,939
is affected by the vulnerability and

331
00:15:00,600 --> 00:15:04,410
then of course the level and the text

332
00:15:02,940 --> 00:15:07,410
so in this case it's selling okay you

333
00:15:04,410 --> 00:15:10,050
have a public s3 bucket that is

334
00:15:07,410 --> 00:15:11,550
affecting your lambda function so here

335
00:15:10,050 --> 00:15:16,469
the theory is that okay if I have a

336
00:15:11,550 --> 00:15:19,680
public s3 bucket if I have a public

337
00:15:16,470 --> 00:15:21,570
history bucket and somebody uploads some

338
00:15:19,680 --> 00:15:24,569
content that's not expected by my lambda

339
00:15:21,570 --> 00:15:32,100
function you know what's gonna happen

340
00:15:24,570 --> 00:15:33,960
and so on and this is also half life

341
00:15:32,100 --> 00:15:35,580
also generates per function report and

342
00:15:33,960 --> 00:15:38,570
this is where you see all the details

343
00:15:35,580 --> 00:15:42,780
for each individual function including

344
00:15:38,570 --> 00:15:45,510
you know the the description the runtime

345
00:15:42,780 --> 00:15:47,250
the region it's in it's gonna give you

346
00:15:45,510 --> 00:15:49,500
all the policies including the resource

347
00:15:47,250 --> 00:15:54,300
based policies your execution role and

348
00:15:49,500 --> 00:15:56,280
so on and this is basically the HTML

349
00:15:54,300 --> 00:16:00,630
version of the JSON reports this is the

350
00:15:56,280 --> 00:16:02,459
stats that you see sort of nice to you

351
00:16:00,630 --> 00:16:08,610
know get an overview of what's going on

352
00:16:02,460 --> 00:16:10,950
inside your service network this is the

353
00:16:08,610 --> 00:16:13,200
security part so you get a list of all

354
00:16:10,950 --> 00:16:15,990
the vulnerabilities it finds all in one

355
00:16:13,200 --> 00:16:18,360
place the middle column here will tell

356
00:16:15,990 --> 00:16:20,760
you where and then the last column will

357
00:16:18,360 --> 00:16:22,650
give you a link to the lambda function

358
00:16:20,760 --> 00:16:26,100
and when you click it it's gonna lead

359
00:16:22,650 --> 00:16:28,470
you to this individual lamda screen

360
00:16:26,100 --> 00:16:30,030
where again you have all the details as

361
00:16:28,470 --> 00:16:34,950
well as the vulnerabilities that belong

362
00:16:30,030 --> 00:16:38,370
only to this function and yeah that's

363
00:16:34,950 --> 00:16:40,470
pretty much it for the way it functions

364
00:16:38,370 --> 00:16:43,950
there's a lot of improvements to be done

365
00:16:40,470 --> 00:16:48,390
especially with the HTML report I want

366
00:16:43,950 --> 00:16:49,860
to integrate lambda layer analysis

367
00:16:48,390 --> 00:16:51,300
because there you can introduce for

368
00:16:49,860 --> 00:16:53,970
example third-party code which is

369
00:16:51,300 --> 00:16:58,199
important to keep track of and see what

370
00:16:53,970 --> 00:17:00,600
it does you know more rules extent

371
00:16:58,200 --> 00:17:06,210
static code analysis maybe other tools

372
00:17:00,600 --> 00:17:09,290
not just sort of cube tons of bugs lots

373
00:17:06,210 --> 00:17:12,900
of stuff again PRS are welcome and

374
00:17:09,290 --> 00:17:14,348
that's pretty much it thank you for your

375
00:17:12,900 --> 00:17:17,519
time and if you have any questions

376
00:17:14,348 --> 00:17:17,519
[Applause]

377
00:17:20,770 --> 00:17:40,120
a question over there if you identify a

378
00:17:38,020 --> 00:17:42,940
problem with a function and you release

379
00:17:40,120 --> 00:17:44,979
a new version to fix it how can you make

380
00:17:42,940 --> 00:17:46,510
sure that everyone starts to use the new

381
00:17:44,980 --> 00:17:50,740
version and doesn't stick with the old

382
00:17:46,510 --> 00:17:54,250
one because for you to use a version it

383
00:17:50,740 --> 00:17:55,690
has to be it has a latest tag so by

384
00:17:54,250 --> 00:17:58,350
default it's always the latest tag

385
00:17:55,690 --> 00:18:02,050
that's referenced so unless you

386
00:17:58,350 --> 00:18:03,428
specifically calling some like version 1

387
00:18:02,050 --> 00:18:13,629
and version 2 whatever you're always

388
00:18:03,429 --> 00:18:16,270
going to use the latest so you can like

389
00:18:13,630 --> 00:18:18,460
revoke in in what sense like so if

390
00:18:16,270 --> 00:18:20,470
someone is deliberately calling version

391
00:18:18,460 --> 00:18:22,300
2 for example and you have version 3 you

392
00:18:20,470 --> 00:18:24,580
can say ok version 2 is no longer

393
00:18:22,300 --> 00:18:29,200
accessible and I guess you could you

394
00:18:24,580 --> 00:18:31,300
could delete but I mean normally you'd

395
00:18:29,200 --> 00:18:34,120
either be calling the latest or you

396
00:18:31,300 --> 00:18:36,040
would make aliases and then so you'd

397
00:18:34,120 --> 00:18:38,169
always be calling the prod Alice and

398
00:18:36,040 --> 00:18:40,260
that L is you you change the mapping for

399
00:18:38,170 --> 00:18:40,260
it

400
00:18:47,690 --> 00:19:09,210
any other questions answers hi how are

401
00:19:07,500 --> 00:19:13,890
you extracting the source code of the

402
00:19:09,210 --> 00:19:20,070
functions when you using bottle 3 or

403
00:19:13,890 --> 00:19:22,050
using the console aw just click when you

404
00:19:20,070 --> 00:19:23,850
call function details like to get the

405
00:19:22,050 --> 00:19:27,240
function details it provides your URL

406
00:19:23,850 --> 00:19:29,230
for download that you can use okay thank

407
00:19:27,240 --> 00:19:32,349
you

408
00:19:29,230 --> 00:19:32,349
[Music]

409
00:19:36,990 --> 00:19:45,350
does it it communicates through the AWS

410
00:19:41,550 --> 00:19:48,149
API right that do you have plans on

411
00:19:45,350 --> 00:19:51,240
including like Terra forum files and not

412
00:19:48,150 --> 00:19:56,160
just communicating with the AWS API and

413
00:19:51,240 --> 00:20:01,290
scanning the vulnerabilities from their

414
00:19:56,160 --> 00:20:03,230
forum files for example to be honest I

415
00:20:01,290 --> 00:20:10,889
haven't thought about terraform at all

416
00:20:03,230 --> 00:20:14,300
but yeah not sure maybe in the future

417
00:20:10,890 --> 00:20:14,300
yeah ok thank you

418
00:20:47,589 --> 00:20:53,710
that's it yeah okay yeah thank you

419
00:20:52,429 --> 00:20:56,940
very cool

420
00:20:53,710 --> 00:20:56,940
[Applause]

