1
00:00:02,840 --> 00:00:09,990
yeah my name is Roberto Martinez I work

2
00:00:06,990 --> 00:00:12,540
for BBVA at the innovation labs that is

3
00:00:09,990 --> 00:00:15,150
the department and I'm going to talk

4
00:00:12,540 --> 00:00:17,189
about parasitic computing an

5
00:00:15,150 --> 00:00:22,289
introduction Diversity Committee with

6
00:00:17,189 --> 00:00:25,560
range lab so what is parasitic computing

7
00:00:22,289 --> 00:00:29,939
well it's a programming technique where

8
00:00:25,560 --> 00:00:30,720
one program that is communicating in a

9
00:00:29,939 --> 00:00:33,930
normal fashion

10
00:00:30,720 --> 00:00:36,769
with another program managed to get the

11
00:00:33,930 --> 00:00:42,059
other program to perform a computation

12
00:00:36,770 --> 00:00:43,710
ok this was first proposed in 2001 by

13
00:00:42,059 --> 00:00:45,089
the Department of Physics and they

14
00:00:43,710 --> 00:00:50,039
compared Department of Computer Science

15
00:00:45,090 --> 00:00:54,059
in the university of notre dam they

16
00:00:50,039 --> 00:00:57,350
managed to to solve this very large an

17
00:00:54,059 --> 00:01:00,959
extremely difficult 3sat problem

18
00:00:57,350 --> 00:01:05,489
proselytizing the TCP stack of a remote

19
00:01:00,960 --> 00:01:08,579
web server but what is a three-set

20
00:01:05,489 --> 00:01:11,520
problem in the first place well it's a

21
00:01:08,579 --> 00:01:12,630
problem that you have given a very

22
00:01:11,520 --> 00:01:17,220
complex

23
00:01:12,630 --> 00:01:20,158
boolean expression like that one and you

24
00:01:17,220 --> 00:01:22,350
have to what this this boolean

25
00:01:20,159 --> 00:01:25,200
expression is for my by variables and

26
00:01:22,350 --> 00:01:28,320
boolean operators and some parentheses

27
00:01:25,200 --> 00:01:30,689
and you have to find if there is any

28
00:01:28,320 --> 00:01:32,610
combination whatsoever of values for

29
00:01:30,689 --> 00:01:35,610
those parable to make the whole

30
00:01:32,610 --> 00:01:38,100
expression to evaluate to true so this

31
00:01:35,610 --> 00:01:42,930
this kind of problems can be very very

32
00:01:38,100 --> 00:01:45,030
difficult and np-complete another thing

33
00:01:42,930 --> 00:01:47,369
that you have to know that understand

34
00:01:45,030 --> 00:01:53,270
this is that one property of the TCP

35
00:01:47,369 --> 00:01:57,270
check sum function is that it has enough

36
00:01:53,270 --> 00:02:01,320
logic before implement implementing any

37
00:01:57,270 --> 00:02:07,798
boolean el operation basically and by

38
00:02:01,320 --> 00:02:11,299
extension any arithmetic operation so

39
00:02:07,799 --> 00:02:16,099
we are computing with the TCP check sum

40
00:02:11,300 --> 00:02:21,120
function did do that to solve the this

41
00:02:16,099 --> 00:02:26,940
3sat problem and the way they managed to

42
00:02:21,120 --> 00:02:29,220
resolve this point was by just by

43
00:02:26,940 --> 00:02:31,650
splitting this very large a boolean

44
00:02:29,220 --> 00:02:34,379
expression into very simple boolean

45
00:02:31,650 --> 00:02:39,319
operations that match the capabilities

46
00:02:34,379 --> 00:02:43,790
of the obvious TCP check sum function

47
00:02:39,319 --> 00:02:48,209
afterwards they encode this smaller

48
00:02:43,790 --> 00:02:53,160
boolean operation into TCP packets so

49
00:02:48,209 --> 00:02:55,110
they can manage to force the other

50
00:02:53,160 --> 00:03:00,170
computer to perform this competition for

51
00:02:55,110 --> 00:03:03,299
them and the way they did it was by

52
00:03:00,170 --> 00:03:08,250
first opening a normal TCP connection to

53
00:03:03,299 --> 00:03:12,900
the to a web server established a

54
00:03:08,250 --> 00:03:19,440
connection normally and then they Forge

55
00:03:12,900 --> 00:03:23,790
this this packet by just encoding the

56
00:03:19,440 --> 00:03:30,090
the smaller problem into into the TCP

57
00:03:23,790 --> 00:03:34,470
payload and the checksum in a way that

58
00:03:30,090 --> 00:03:37,290
if the if the TCP check sum is is

59
00:03:34,470 --> 00:03:39,870
correct for the for the data that's in

60
00:03:37,290 --> 00:03:46,200
the packets also the the boolean

61
00:03:39,870 --> 00:03:48,780
operation is true and vice-versa okay so

62
00:03:46,200 --> 00:03:50,339
what happened is that if the if the

63
00:03:48,780 --> 00:03:53,609
guess that they are doing for the

64
00:03:50,340 --> 00:03:55,560
boolean operation is is correct what

65
00:03:53,609 --> 00:03:59,040
happened is that also the checksum is

66
00:03:55,560 --> 00:04:05,760
correct and of course the packet is

67
00:03:59,040 --> 00:04:09,000
pushed up to the HTTP HTTP webserver but

68
00:04:05,760 --> 00:04:12,989
this kind of package is not a valid HTTP

69
00:04:09,000 --> 00:04:16,738
packet so the server responds is a not

70
00:04:12,989 --> 00:04:21,060
an error but this is enough information

71
00:04:16,738 --> 00:04:21,690
for the parasite to know that the case

72
00:04:21,060 --> 00:04:26,610
is true

73
00:04:21,690 --> 00:04:28,950
is correct what happens if the guess is

74
00:04:26,610 --> 00:04:33,690
not correct of course the checksum will

75
00:04:28,950 --> 00:04:35,670
will be also incorrect so the TCPS tag

76
00:04:33,690 --> 00:04:41,880
will drop the packet at the TCP level

77
00:04:35,670 --> 00:04:44,670
without washing it to the HTTP level so

78
00:04:41,880 --> 00:04:48,840
they after splitting this very big

79
00:04:44,670 --> 00:04:52,200
problem into into smaller problems they

80
00:04:48,840 --> 00:04:56,039
send him in parallel all those HDTV

81
00:04:52,200 --> 00:04:59,460
packets with the gases and only the

82
00:04:56,040 --> 00:05:01,170
correct solutions are answered by the

83
00:04:59,460 --> 00:05:06,989
server so they managed to solve this

84
00:05:01,170 --> 00:05:09,870
problem so one year later the student of

85
00:05:06,990 --> 00:05:12,930
the University of Applied Science in in

86
00:05:09,870 --> 00:05:15,770
varnish which are made this beautiful

87
00:05:12,930 --> 00:05:18,960
machine that used this technique to

88
00:05:15,770 --> 00:05:23,580
basically basic basically compute any

89
00:05:18,960 --> 00:05:25,289
kind of program so yeah if you what you

90
00:05:23,580 --> 00:05:28,080
want to use free resources you can

91
00:05:25,290 --> 00:05:30,240
compile to the city for this virtual

92
00:05:28,080 --> 00:05:33,740
machine and you just run the problem

93
00:05:30,240 --> 00:05:37,890
with the free resources of the Internet

94
00:05:33,740 --> 00:05:40,410
yeah we have free computer power guys so

95
00:05:37,890 --> 00:05:45,320
let's fight with coins and be rich

96
00:05:40,410 --> 00:05:49,350
basically but now not so fast that's why

97
00:05:45,320 --> 00:05:52,140
that's because the the just the the cost

98
00:05:49,350 --> 00:05:56,100
of encoding the problem into TCP packets

99
00:05:52,140 --> 00:05:59,300
is is is why higher than shall be

100
00:05:56,100 --> 00:06:03,120
solving the problem in the first place

101
00:05:59,300 --> 00:06:06,780
so positive computing seems impractical

102
00:06:03,120 --> 00:06:12,120
but has some very nice features for

103
00:06:06,780 --> 00:06:14,940
example logic protection I mean by logic

104
00:06:12,120 --> 00:06:17,160
protection that the the host that we are

105
00:06:14,940 --> 00:06:20,820
using to compute can discover what the

106
00:06:17,160 --> 00:06:26,640
parasite is computing that's because the

107
00:06:20,820 --> 00:06:28,409
the the parasite is not sending any any

108
00:06:26,640 --> 00:06:30,870
kind of algorithm to the parasite to the

109
00:06:28,410 --> 00:06:33,500
host just using it as a resort for cut

110
00:06:30,870 --> 00:06:33,500
the computation

111
00:06:34,020 --> 00:06:40,258
also another really nice feature is the

112
00:06:35,910 --> 00:06:43,169
house really nice I mean that the host

113
00:06:40,259 --> 00:06:46,349
is already available in in the internet

114
00:06:43,169 --> 00:06:49,020
and the resource is just there sitting

115
00:06:46,349 --> 00:06:51,330
there so they there was no need to

116
00:06:49,020 --> 00:06:56,120
install any special software in the host

117
00:06:51,330 --> 00:07:00,389
just using it and this is because the

118
00:06:56,120 --> 00:07:05,690
the Perseid is clever enough to encode

119
00:07:00,389 --> 00:07:05,690
the problem in a way that the host is

120
00:07:06,470 --> 00:07:15,440
misunderstanding the last feature is the

121
00:07:12,240 --> 00:07:18,449
host resource assist itself themselves

122
00:07:15,440 --> 00:07:23,669
just in the in the case we we indicate

123
00:07:18,449 --> 00:07:26,880
we we have seen the problem that the CPU

124
00:07:23,669 --> 00:07:30,090
was not not very well used but a

125
00:07:26,880 --> 00:07:33,360
computer are much more than just CPUs

126
00:07:30,090 --> 00:07:36,568
they have hardware and by hard way I

127
00:07:33,360 --> 00:07:39,860
mean memory storage and Express all

128
00:07:36,569 --> 00:07:42,690
Hardware GPUs etc and they have

129
00:07:39,860 --> 00:07:46,710
networking capabilities because maybe

130
00:07:42,690 --> 00:07:51,060
they are connected to another network we

131
00:07:46,710 --> 00:07:54,210
are trying to do access and also they

132
00:07:51,060 --> 00:07:58,949
have data inside that may be interesting

133
00:07:54,210 --> 00:08:02,190
for us so the question really is can we

134
00:07:58,949 --> 00:08:05,310
make is it practical and the author of

135
00:08:02,190 --> 00:08:08,159
the original papers suggests that as one

136
00:08:05,310 --> 00:08:09,900
moves up the application stack there

137
00:08:08,159 --> 00:08:13,919
might come a point were this high

138
00:08:09,900 --> 00:08:19,440
computational gain to the parasite so up

139
00:08:13,919 --> 00:08:23,099
we're up we go and I really like to do

140
00:08:19,440 --> 00:08:25,650
to to make this exercise and think about

141
00:08:23,099 --> 00:08:29,669
the the host that we were using in the

142
00:08:25,650 --> 00:08:34,169
end example has had a kind of a

143
00:08:29,669 --> 00:08:37,010
beautiful machine and if if this TCP

144
00:08:34,169 --> 00:08:40,289
check sum function were before machine

145
00:08:37,010 --> 00:08:44,218
this world this will be the properties

146
00:08:40,289 --> 00:08:46,290
and the properties are that

147
00:08:44,219 --> 00:08:49,470
the instruction set of the spirit or

148
00:08:46,290 --> 00:08:53,339
machine is very limited because we yes

149
00:08:49,470 --> 00:08:56,639
can compute boolean operation and we

150
00:08:53,339 --> 00:09:02,430
only good access to access to the CPU of

151
00:08:56,639 --> 00:09:04,410
the of the house but but if we think

152
00:09:02,430 --> 00:09:09,300
about an ideal before machine for our

153
00:09:04,410 --> 00:09:13,139
parasite to to take advantage of mmm we

154
00:09:09,300 --> 00:09:16,769
would like to to have a high level

155
00:09:13,139 --> 00:09:21,750
research trip sunset I mean by high

156
00:09:16,769 --> 00:09:24,689
level like in a in a parameter language

157
00:09:21,750 --> 00:09:27,959
a very high level stuff and richer are

158
00:09:24,689 --> 00:09:32,579
really a big variety of of instruction

159
00:09:27,959 --> 00:09:35,489
that we can perform yeah in the host and

160
00:09:32,579 --> 00:09:38,849
also will we like to to access the any

161
00:09:35,490 --> 00:09:44,610
resource that the the host has like

162
00:09:38,850 --> 00:09:46,800
harbor net world or any date so my

163
00:09:44,610 --> 00:09:48,540
conclusion is that dynamic languages are

164
00:09:46,800 --> 00:09:53,219
the perfect target for parasite

165
00:09:48,540 --> 00:09:55,230
computing why is this because they offer

166
00:09:53,220 --> 00:10:00,629
the same features that we discussed

167
00:09:55,230 --> 00:10:02,879
before like logic protection how they

168
00:10:00,629 --> 00:10:05,970
offer a logic protection well dynamic

169
00:10:02,879 --> 00:10:09,720
languages have this above function and

170
00:10:05,970 --> 00:10:12,680
that we are very familiar with and using

171
00:10:09,720 --> 00:10:17,279
the animal function we can execute a

172
00:10:12,680 --> 00:10:23,489
very small pieces of code so using this

173
00:10:17,279 --> 00:10:27,350
we can perform yes just that they also

174
00:10:23,490 --> 00:10:30,540
provide host readiness and I mean that

175
00:10:27,350 --> 00:10:33,569
dynamic languages are everywhere in

176
00:10:30,540 --> 00:10:37,290
every since then I ate I think and there

177
00:10:33,569 --> 00:10:42,329
are at least a cell and the cell is a

178
00:10:37,290 --> 00:10:44,399
kind of dynamic language in a way and

179
00:10:42,329 --> 00:10:47,399
also have access to the house resources

180
00:10:44,399 --> 00:10:50,459
dynamic language it makes it makes easy

181
00:10:47,399 --> 00:10:54,319
to access the any any kind of resources

182
00:10:50,459 --> 00:10:54,319
they are very high level languages

183
00:10:55,960 --> 00:11:02,800
so thinking about that we developed

184
00:11:00,100 --> 00:11:07,029
Ranger that is a framework for pharisee

185
00:11:02,800 --> 00:11:10,630
parasitic computing is an open-source

186
00:11:07,029 --> 00:11:14,700
project that you can you can see indeed

187
00:11:10,630 --> 00:11:19,080
hub at the official report BBVA and

188
00:11:14,700 --> 00:11:20,290
brain stack allows users to write normal

189
00:11:19,080 --> 00:11:23,410
normal-looking

190
00:11:20,290 --> 00:11:26,920
Python programs that use the resources

191
00:11:23,410 --> 00:11:31,600
from external dynamic languages from

192
00:11:26,920 --> 00:11:33,279
external interpreters and for

193
00:11:31,600 --> 00:11:34,720
understanding brains now we have to

194
00:11:33,279 --> 00:11:38,560
understand the terminology that we use

195
00:11:34,720 --> 00:11:41,740
and the first thing that I like to show

196
00:11:38,560 --> 00:11:45,670
you is is the slack the slack is the

197
00:11:41,740 --> 00:11:51,520
name that we that we give to the

198
00:11:45,670 --> 00:11:54,599
parasite and the duty of the of the

199
00:11:51,520 --> 00:11:57,699
slack is to control the program flow and

200
00:11:54,600 --> 00:11:59,290
make translation between the Python

201
00:11:57,700 --> 00:12:02,339
interpreter that we are running the

202
00:11:59,290 --> 00:12:09,370
paramon and the remote dynamic language

203
00:12:02,339 --> 00:12:12,339
okay and the next thing is the zombie

204
00:12:09,370 --> 00:12:15,430
body or just the body the zombie body is

205
00:12:12,339 --> 00:12:18,190
a small script in the remote language

206
00:12:15,430 --> 00:12:23,310
written in the remote language we want

207
00:12:18,190 --> 00:12:27,540
to control that is in charge of

208
00:12:23,310 --> 00:12:34,060
communicating with lag this is the

209
00:12:27,540 --> 00:12:36,819
pseudo code for for a very normal body

210
00:12:34,060 --> 00:12:39,640
and the the first thing it does is

211
00:12:36,820 --> 00:12:44,170
download some code from the from this

212
00:12:39,640 --> 00:12:47,920
lock via HTTP evaluate the code using

213
00:12:44,170 --> 00:12:50,349
evil and sending the result of the

214
00:12:47,920 --> 00:12:55,930
evaluation back to the server we are the

215
00:12:50,350 --> 00:12:58,510
same HTTP request and when sending back

216
00:12:55,930 --> 00:13:04,029
the result it will download some new

217
00:12:58,510 --> 00:13:08,490
code and it will repeat the same the

218
00:13:04,029 --> 00:13:08,490
same loop over and over

219
00:13:09,380 --> 00:13:16,230
okay I don't I don't know if you can

220
00:13:12,180 --> 00:13:19,140
read this this is a very simple body for

221
00:13:16,230 --> 00:13:23,790
rain sir with an impasse in subscript

222
00:13:19,140 --> 00:13:29,939
and it's exactly the same algorithm the

223
00:13:23,790 --> 00:13:33,589
first thing we do is make this this

224
00:13:29,940 --> 00:13:40,470
request sorry

225
00:13:33,590 --> 00:13:43,320
make this disk or request sending the

226
00:13:40,470 --> 00:13:48,720
variable dress that initialized to 220

227
00:13:43,320 --> 00:13:51,960
so I'm an enticing to the slack and this

228
00:13:48,720 --> 00:13:54,870
will download some new bus code that we

229
00:13:51,960 --> 00:13:57,390
will evaluate using the the dollar

230
00:13:54,870 --> 00:14:01,650
symbol parentheses stuff of the auto

231
00:13:57,390 --> 00:14:05,220
cell and this will hopefully generate

232
00:14:01,650 --> 00:14:08,520
some result that will be assigned again

233
00:14:05,220 --> 00:14:13,380
to the rest to the raspberry wall and

234
00:14:08,520 --> 00:14:18,180
this loops repeats forever it is pre

235
00:14:13,380 --> 00:14:23,760
enough okay

236
00:14:18,180 --> 00:14:26,520
so hello world in brief lack the things

237
00:14:23,760 --> 00:14:30,600
that we have here are the the same two

238
00:14:26,520 --> 00:14:33,060
things as we just saw we have in the

239
00:14:30,600 --> 00:14:35,850
left hand side they called all office LA

240
00:14:33,060 --> 00:14:40,489
and in the right hand side we have the

241
00:14:35,850 --> 00:14:43,920
same day body the decoder that we seen

242
00:14:40,490 --> 00:14:47,670
this is the decoded left-hand side of

243
00:14:43,920 --> 00:14:51,510
this lab as you can see it's a very

244
00:14:47,670 --> 00:14:54,660
normal Python code we are importing some

245
00:14:51,510 --> 00:14:58,890
stuff from the brain sparkle library and

246
00:14:54,660 --> 00:15:01,140
we are declaring this dysfunction hello

247
00:14:58,890 --> 00:15:03,530
world function that is decorated with

248
00:15:01,140 --> 00:15:06,930
this black decorator

249
00:15:03,530 --> 00:15:09,870
this just tell the system that we need

250
00:15:06,930 --> 00:15:13,530
for running this lab we need a body

251
00:15:09,870 --> 00:15:17,970
attached to us okay and this body is

252
00:15:13,530 --> 00:15:22,310
gonna be named remote okay so this

253
00:15:17,970 --> 00:15:22,310
remote is the body attached to us

254
00:15:22,399 --> 00:15:30,419
and last we we run this hello world

255
00:15:28,019 --> 00:15:34,679
function through the run function that

256
00:15:30,419 --> 00:15:37,559
we import and when this is running the

257
00:15:34,679 --> 00:15:41,218
remote has this print function inside

258
00:15:37,559 --> 00:15:46,978
that will print hello world in the host

259
00:15:41,219 --> 00:15:49,259
in the body okay in the zombie body the

260
00:15:46,979 --> 00:15:57,029
nesting we have is exactly the same code

261
00:15:49,259 --> 00:16:00,719
that we saw before and with this we can

262
00:15:57,029 --> 00:16:06,839
we have the the system making a hollow

263
00:16:00,719 --> 00:16:09,299
world okay and how it works behind the

264
00:16:06,839 --> 00:16:11,219
scenes well we have here the exactly the

265
00:16:09,299 --> 00:16:14,069
same code in the left hand side we have

266
00:16:11,219 --> 00:16:17,699
the this log in the right hand side we

267
00:16:14,069 --> 00:16:19,459
have the de body and they are talking to

268
00:16:17,699 --> 00:16:23,789
each other

269
00:16:19,459 --> 00:16:26,518
the first thing they they we have to do

270
00:16:23,789 --> 00:16:29,429
is to to initialize the the program this

271
00:16:26,519 --> 00:16:32,399
lock we do this in the parasite side and

272
00:16:29,429 --> 00:16:34,468
the first thing it does is wait for the

273
00:16:32,399 --> 00:16:36,989
body because we are trying to run this

274
00:16:34,469 --> 00:16:39,989
function that needs a body without the

275
00:16:36,989 --> 00:16:43,079
body it can it can run freely so when

276
00:16:39,989 --> 00:16:44,759
the body connects via HTTP because of

277
00:16:43,079 --> 00:16:51,478
the call but that will make we are

278
00:16:44,759 --> 00:16:54,599
making here the slug execute a start

279
00:16:51,479 --> 00:16:57,269
execution until the body is needed and

280
00:16:54,599 --> 00:17:00,899
it's very very quick here in the first

281
00:16:57,269 --> 00:17:05,220
line the queen of the hello world so in

282
00:17:00,899 --> 00:17:08,159
this in this moment some bash code is

283
00:17:05,220 --> 00:17:13,679
being generated by the slab and sent

284
00:17:08,159 --> 00:17:16,589
back by the HTTP request to the body the

285
00:17:13,679 --> 00:17:19,049
body received this bus code evaluates it

286
00:17:16,589 --> 00:17:21,688
and in this case there is no result to

287
00:17:19,049 --> 00:17:27,388
the echo of course but an empty result

288
00:17:21,689 --> 00:17:31,409
is is sent back and this operation

289
00:17:27,388 --> 00:17:33,439
continues forever or until the slack EC

290
00:17:31,409 --> 00:17:40,440
is closed

291
00:17:33,440 --> 00:17:44,250
it's clear huh okay so we are going to

292
00:17:40,440 --> 00:17:47,340
see a demo demo the first demo is a

293
00:17:44,250 --> 00:17:51,390
Pacific remote desktop so you can think

294
00:17:47,340 --> 00:17:54,959
about this have like a VNC server a BNC

295
00:17:51,390 --> 00:17:57,809
click client but the difference is that

296
00:17:54,960 --> 00:18:02,700
we are implementing this in embrace LA

297
00:17:57,809 --> 00:18:06,450
and again we have to parse the as low as

298
00:18:02,700 --> 00:18:11,150
LA and the body the slack in this case

299
00:18:06,450 --> 00:18:15,330
will ask the body for a screen shot

300
00:18:11,150 --> 00:18:19,440
continually to have this sensation of

301
00:18:15,330 --> 00:18:23,090
video okay and we can we will see this

302
00:18:19,440 --> 00:18:26,580
this video through a remote web server

303
00:18:23,090 --> 00:18:30,449
sorry a remote and a web interface that

304
00:18:26,580 --> 00:18:33,360
the is lock is disappearing for us also

305
00:18:30,450 --> 00:18:35,549
the slag will forward any mouse or

306
00:18:33,360 --> 00:18:38,549
keyboard interaction through this web

307
00:18:35,549 --> 00:18:40,559
interface to the body and what we have

308
00:18:38,549 --> 00:18:43,530
in the body in the body we have exactly

309
00:18:40,559 --> 00:18:46,379
the same code that you saw in ambass but

310
00:18:43,530 --> 00:18:49,379
of course in in empowers hello

311
00:18:46,380 --> 00:18:53,340
okay this is our remote distal for

312
00:18:49,380 --> 00:18:56,850
Windows and is all you need PowerShell

313
00:18:53,340 --> 00:18:59,370
is the only dependency here a standard

314
00:18:56,850 --> 00:19:02,719
Power Cell why is this because our site

315
00:18:59,370 --> 00:19:06,120
is capable of taking a screenshot of the

316
00:19:02,720 --> 00:19:08,669
the whole host screen and also is

317
00:19:06,120 --> 00:19:09,979
capable of moving and making clicks with

318
00:19:08,669 --> 00:19:15,630
the mouse

319
00:19:09,980 --> 00:19:22,880
okay so first demo this is going to be a

320
00:19:15,630 --> 00:19:26,220
little bit dark okay we have here three

321
00:19:22,880 --> 00:19:32,610
windows I hate you I have we have here

322
00:19:26,220 --> 00:19:36,630
three two windows in the top left in the

323
00:19:32,610 --> 00:19:40,020
top lip we have built well box with

324
00:19:36,630 --> 00:19:43,649
windows in the right hand side we have a

325
00:19:40,020 --> 00:19:48,149
normal chrome Chrome browser and in the

326
00:19:43,649 --> 00:19:56,158
bottom left we have a Linux console with

327
00:19:48,149 --> 00:20:00,658
the the the Python program here we have

328
00:19:56,159 --> 00:20:07,530
the the code you have just 86 lines long

329
00:20:00,659 --> 00:20:13,320
and it's just a standard Python so we

330
00:20:07,530 --> 00:20:17,820
will run it okay and the first thing it

331
00:20:13,320 --> 00:20:20,129
does is wait for the body okay so to get

332
00:20:17,820 --> 00:20:24,809
the body running here because this is

333
00:20:20,130 --> 00:20:30,240
this is powerful I have to to open up

334
00:20:24,809 --> 00:20:33,899
powerful window I'm right here some code

335
00:20:30,240 --> 00:20:39,419
I'm not writing here the whole body code

336
00:20:33,899 --> 00:20:46,309
I will just ask to brain slack for the

337
00:20:39,419 --> 00:20:49,320
for a launcher we can get this code by I

338
00:20:46,309 --> 00:20:52,860
think you can see that the URL is just

339
00:20:49,320 --> 00:20:58,490
they were URL of the oldest lock this

340
00:20:52,860 --> 00:21:03,539
last launch is last powerful and it will

341
00:20:58,490 --> 00:21:06,149
give us this small powerful code this is

342
00:21:03,539 --> 00:21:10,500
the smallest possible postal code for

343
00:21:06,149 --> 00:21:15,439
for evaluating some code for some

344
00:21:10,500 --> 00:21:22,549
reasons and here in the in the powerful

345
00:21:15,440 --> 00:21:22,549
console I pasted the code with once -

346
00:21:24,230 --> 00:21:32,880
okay but as soon as I press enter here

347
00:21:29,700 --> 00:21:35,840
down the brown continues and it's

348
00:21:32,880 --> 00:21:40,530
opening another web interface for us

349
00:21:35,840 --> 00:21:42,320
for the client of the of the the BNC of

350
00:21:40,530 --> 00:21:46,620
the remote desktop sorry

351
00:21:42,320 --> 00:21:50,250
and it's opening the power 1891 so here

352
00:21:46,620 --> 00:21:55,320
in my in my browser I can enter in

353
00:21:50,250 --> 00:21:56,700
alcohol's 1891 and I I'm entering the in

354
00:21:55,320 --> 00:22:01,310
the web server that the brainslug is

355
00:21:56,700 --> 00:22:04,560
opening for for us so that this moment

356
00:22:01,310 --> 00:22:07,100
in the right hand side I don't know if

357
00:22:04,560 --> 00:22:10,970
you can see it we have a terminal

358
00:22:07,100 --> 00:22:15,330
accession and we can interact with it

359
00:22:10,970 --> 00:22:21,270
it's a little bit slow but is functional

360
00:22:15,330 --> 00:22:23,460
we can write hello world turn off this

361
00:22:21,270 --> 00:22:27,510
this is happening of course in the in

362
00:22:23,460 --> 00:22:29,820
the Windows machine okay so if I if I

363
00:22:27,510 --> 00:22:32,879
move the mouse in the right hand side

364
00:22:29,820 --> 00:22:34,830
you can see with us with some laughs in

365
00:22:32,880 --> 00:22:38,640
the left hand side the most moving and

366
00:22:34,830 --> 00:22:40,889
this is all happening by sending a small

367
00:22:38,640 --> 00:22:44,850
pieces of code through the network to

368
00:22:40,890 --> 00:22:48,530
the to the overall loop and evaluating

369
00:22:44,850 --> 00:22:50,250
okay so there there's any kind of

370
00:22:48,530 --> 00:22:54,720
software installed

371
00:22:50,250 --> 00:23:03,840
ralina in the Windows machine okay

372
00:22:54,720 --> 00:23:06,660
continuum so the second with the second

373
00:23:03,840 --> 00:23:09,600
demo the second demo is a parasitical

374
00:23:06,660 --> 00:23:13,020
remote browser it's at exactly the same

375
00:23:09,600 --> 00:23:17,159
but the exactly the same code in this

376
00:23:13,020 --> 00:23:19,920
lab no changes whatsoever the time we

377
00:23:17,160 --> 00:23:24,530
are changing the body instead of power

378
00:23:19,920 --> 00:23:28,530
cell body we are using a JavaScript body

379
00:23:24,530 --> 00:23:31,410
that will load some JavaScript libraries

380
00:23:28,530 --> 00:23:35,820
on the man by the way Tesla and taking

381
00:23:31,410 --> 00:23:37,470
screenshots of the of a browser it's not

382
00:23:35,820 --> 00:23:39,960
really possible to take a screenshot of

383
00:23:37,470 --> 00:23:43,440
a browser because there is no JavaScript

384
00:23:39,960 --> 00:23:46,910
API to do to do to do that but there is

385
00:23:43,440 --> 00:23:48,050
this this JavaScript library html2canvas

386
00:23:46,910 --> 00:23:52,040
that

387
00:23:48,050 --> 00:23:54,710
renders the campus into sorry renders

388
00:23:52,040 --> 00:23:59,930
@adam into a campus so it can it can

389
00:23:54,710 --> 00:24:04,220
provide the schedule for us so in in

390
00:23:59,930 --> 00:24:07,550
this demo I have here instead of a

391
00:24:04,220 --> 00:24:11,780
Windows virtual machine I have another

392
00:24:07,550 --> 00:24:14,090
browser and the same in the same browser

393
00:24:11,780 --> 00:24:17,960
on the right and the same console in in

394
00:24:14,090 --> 00:24:26,540
the in the top in the bottom so I

395
00:24:17,960 --> 00:24:38,120
execute the code sorry I have the same

396
00:24:26,540 --> 00:24:40,610
the windows body running so I execute

397
00:24:38,120 --> 00:24:45,050
the code and the same happens it's

398
00:24:40,610 --> 00:24:46,939
waiting for the body but this time I'm

399
00:24:45,050 --> 00:24:51,560
going to use the the body of the

400
00:24:46,940 --> 00:24:55,130
JavaScript body so I have to I have to

401
00:24:51,560 --> 00:24:58,879
download the the the way to to launch it

402
00:24:55,130 --> 00:25:03,950
and this is the same instead of writing

403
00:24:58,880 --> 00:25:09,440
launch over shall I write launch browser

404
00:25:03,950 --> 00:25:14,420
and instead of having an ugly piece of

405
00:25:09,440 --> 00:25:19,910
personal code I have this link we see

406
00:25:14,420 --> 00:25:25,120
the code is just a JavaScript link that

407
00:25:19,910 --> 00:25:28,640
we can use as a as a bookmark so I will

408
00:25:25,120 --> 00:25:34,669
drag it drop the drop it here to have a

409
00:25:28,640 --> 00:25:38,720
bookmark and now I can I can navigate to

410
00:25:34,670 --> 00:25:42,530
any website for example or reference

411
00:25:38,720 --> 00:25:45,380
this first one and I will click this

412
00:25:42,530 --> 00:25:50,720
server scream and this will launch the

413
00:25:45,380 --> 00:25:54,470
body inside the the browser so when I

414
00:25:50,720 --> 00:25:58,880
click on the under link the same happen

415
00:25:54,470 --> 00:26:01,029
the the port is open so I can hear enter

416
00:25:58,880 --> 00:26:06,590
the same address

417
00:26:01,029 --> 00:26:08,539
1881 ad instead of obscene a Windows

418
00:26:06,590 --> 00:26:11,510
machine we are seeing the brochure on

419
00:26:08,539 --> 00:26:14,890
the left so here if I in the roster of

420
00:26:11,510 --> 00:26:18,860
the left with something I hello besides

421
00:26:14,890 --> 00:26:25,429
you can see in the right hand side the

422
00:26:18,860 --> 00:26:32,289
session being been drunk okay any

423
00:26:25,429 --> 00:26:32,289
questions oh okay moving on

424
00:26:33,100 --> 00:26:41,539
so what sorcerer is this the same

425
00:26:37,190 --> 00:26:44,169
program with two two languages well

426
00:26:41,539 --> 00:26:46,760
brainslug is not magic of course

427
00:26:44,169 --> 00:26:49,220
some work has to be done in order to

428
00:26:46,760 --> 00:26:53,240
translate between Python and other

429
00:26:49,220 --> 00:26:56,659
languages and is the phenol we are going

430
00:26:53,240 --> 00:26:59,210
to see now so how you can define new

431
00:26:56,659 --> 00:27:02,419
bodies with brains laughs well you have

432
00:26:59,210 --> 00:27:05,779
to declare a boot function that is the

433
00:27:02,419 --> 00:27:10,250
the one that will return the the source

434
00:27:05,779 --> 00:27:14,390
code of the body that we seen before and

435
00:27:10,250 --> 00:27:17,840
it this is the source code the first

436
00:27:14,390 --> 00:27:22,580
thing we have to we have to do is define

437
00:27:17,840 --> 00:27:25,850
this distinct we call ribosome is an

438
00:27:22,580 --> 00:27:27,678
internal object of rain start this

439
00:27:25,850 --> 00:27:30,158
ribosome is like a collection of

440
00:27:27,679 --> 00:27:32,330
function to define an external language

441
00:27:30,159 --> 00:27:34,580
and the first thing you have to do is

442
00:27:32,330 --> 00:27:39,168
declared the root of this collection in

443
00:27:34,580 --> 00:27:42,620
this case I am declaring the the bass

444
00:27:39,169 --> 00:27:46,399
language so I declare and I generate

445
00:27:42,620 --> 00:27:51,080
this object bus and I define what this

446
00:27:46,399 --> 00:27:55,100
decorator just a function that returns

447
00:27:51,080 --> 00:27:58,760
the pass code that we we saw but instead

448
00:27:55,100 --> 00:28:03,918
of hard-coding here the the URL of the

449
00:27:58,760 --> 00:28:07,520
of the is la we have to provide a way of

450
00:28:03,919 --> 00:28:11,899
getting it dynamically so here we are

451
00:28:07,520 --> 00:28:14,629
receiving the URL and this is by the way

452
00:28:11,899 --> 00:28:19,110
python 3 7 so the irony

453
00:28:14,630 --> 00:28:26,370
the new way of interpolation they have

454
00:28:19,110 --> 00:28:28,800
strings so here you have the world and

455
00:28:26,370 --> 00:28:34,050
how you can add functionality to this

456
00:28:28,800 --> 00:28:38,129
body well you have to exactly do exactly

457
00:28:34,050 --> 00:28:43,040
the same and define function the with

458
00:28:38,130 --> 00:28:46,950
this decorator define these functions

459
00:28:43,040 --> 00:28:50,159
have the responsibility of encoding and

460
00:28:46,950 --> 00:28:55,890
decoding from and to the external

461
00:28:50,160 --> 00:28:58,440
language and have to use this double

462
00:28:55,890 --> 00:29:00,690
this double underscore eval double

463
00:28:58,440 --> 00:29:03,720
underscore function that is the one that

464
00:29:00,690 --> 00:29:06,600
sends the code back to the back to the

465
00:29:03,720 --> 00:29:10,860
to the head to the body to be evaluated

466
00:29:06,600 --> 00:29:13,230
so in this case okay in this case we are

467
00:29:10,860 --> 00:29:18,780
defining the print function that we we

468
00:29:13,230 --> 00:29:21,290
saw in the in the example we have to

469
00:29:18,780 --> 00:29:24,600
define bus dot print

470
00:29:21,290 --> 00:29:26,129
okay decorating this this function the

471
00:29:24,600 --> 00:29:30,240
name of the function is not relevant so

472
00:29:26,130 --> 00:29:32,870
here I use the underscore all of these

473
00:29:30,240 --> 00:29:36,030
ribosomes that is the name of those

474
00:29:32,870 --> 00:29:38,370
functional receive a remote that it's

475
00:29:36,030 --> 00:29:43,340
the same object that we are using in

476
00:29:38,370 --> 00:29:46,590
this la so we can we can call any other

477
00:29:43,340 --> 00:29:48,300
function that we have and the result

478
00:29:46,590 --> 00:29:50,550
parameters of the function in this case

479
00:29:48,300 --> 00:29:52,649
because this is the print function we

480
00:29:50,550 --> 00:29:55,800
are receiving the text that we want to

481
00:29:52,650 --> 00:29:59,670
print and with the double underscore

482
00:29:55,800 --> 00:30:04,800
eval function we are translating this

483
00:29:59,670 --> 00:30:06,720
code to to bus so is an echo and we are

484
00:30:04,800 --> 00:30:13,500
using the escape function that we seen

485
00:30:06,720 --> 00:30:17,730
to prefer the the equitation so in

486
00:30:13,500 --> 00:30:20,670
summary when you like to use runs that

487
00:30:17,730 --> 00:30:25,230
you do want to use brainslug is you need

488
00:30:20,670 --> 00:30:28,679
any of those three properties all the

489
00:30:25,230 --> 00:30:31,419
three of them that are logic

490
00:30:28,679 --> 00:30:32,169
that's because all the probably logic is

491
00:30:31,419 --> 00:30:34,719
in the slaw

492
00:30:32,169 --> 00:30:38,919
none of the pro logic will be sent to

493
00:30:34,719 --> 00:30:41,919
the to the to the host if you need house

494
00:30:38,919 --> 00:30:44,139
readiness because you want to execute

495
00:30:41,919 --> 00:30:47,080
some program without it's installing

496
00:30:44,139 --> 00:30:52,418
anything in the body just using remote

497
00:30:47,080 --> 00:30:55,059
interpreters no deploys and finally to

498
00:30:52,419 --> 00:30:57,969
access the health resources occasionally

499
00:30:55,059 --> 00:31:01,869
this is not not the best way to access

500
00:30:57,969 --> 00:31:07,539
the resources for everyday use but that

501
00:31:01,869 --> 00:31:09,849
occasionally is it's a way and the last

502
00:31:07,539 --> 00:31:12,219
thing I want to say to you is that you

503
00:31:09,849 --> 00:31:14,710
can contribute you can write new bodies

504
00:31:12,219 --> 00:31:18,070
and new ribosomes for her brains layer

505
00:31:14,710 --> 00:31:21,759
and you can even without our

506
00:31:18,070 --> 00:31:24,639
intervention distribute these bodies and

507
00:31:21,759 --> 00:31:29,489
ribosome as Python packages show you the

508
00:31:24,639 --> 00:31:32,488
June Anita's product and that's all I

509
00:31:29,489 --> 00:31:32,489
think

510
00:31:34,200 --> 00:31:50,340
[Applause]

511
00:31:38,930 --> 00:31:52,980
I'm Molly Christo's any questions are

512
00:31:50,340 --> 00:31:55,230
you assuming cooperation of the zombie

513
00:31:52,980 --> 00:31:57,680
machines that someone's going to run a

514
00:31:55,230 --> 00:32:02,100
command to allow it to become a body

515
00:31:57,680 --> 00:32:04,620
well if there is cooperation technically

516
00:32:02,100 --> 00:32:07,469
it's not parasite computing so you have

517
00:32:04,620 --> 00:32:10,560
to provide a way of accessing the

518
00:32:07,470 --> 00:32:13,830
interpreter to be precise computing

519
00:32:10,560 --> 00:32:16,409
because if not is just distribute

520
00:32:13,830 --> 00:32:20,879
computing but for the deal for the demo

521
00:32:16,410 --> 00:32:22,950
I have to just make something simple so

522
00:32:20,880 --> 00:32:26,370
it would be maybe some other exploit -

523
00:32:22,950 --> 00:32:28,800
yeah maybe some remote code execution or

524
00:32:26,370 --> 00:32:32,310
something like that yeah of course you

525
00:32:28,800 --> 00:32:34,830
can use it the same way I did these have

526
00:32:32,310 --> 00:32:37,740
some benefits - for example that you

527
00:32:34,830 --> 00:32:40,439
don't have to deploy or or you don't

528
00:32:37,740 --> 00:32:44,330
have to reveal your your logic to the

529
00:32:40,440 --> 00:32:55,620
other party so yeah maybe it has its own

530
00:32:44,330 --> 00:32:59,300
benefits and you know the question don't

531
00:32:55,620 --> 00:32:59,300
be shy I know your trial

532
00:33:01,620 --> 00:33:04,739
[Music]

533
00:33:07,140 --> 00:33:12,960
so there's the zombie then need to have

534
00:33:10,860 --> 00:33:17,179
like complete code execution or would

535
00:33:12,960 --> 00:33:21,180
you be able to like break a payload into

536
00:33:17,180 --> 00:33:24,090
multiple steps maybe you could get out

537
00:33:21,180 --> 00:33:27,330
of it run like well you have to you have

538
00:33:24,090 --> 00:33:29,790
to have access to the full access to the

539
00:33:27,330 --> 00:33:32,879
interpreter okay to run the initial code

540
00:33:29,790 --> 00:33:36,480
and after that any other code it's just

541
00:33:32,880 --> 00:33:39,630
evaluated so I don't I don't know if I

542
00:33:36,480 --> 00:33:41,460
have answered your question

543
00:33:39,630 --> 00:33:44,340
but then once once you've got the

544
00:33:41,460 --> 00:33:47,400
framework in place maybe it's easier

545
00:33:44,340 --> 00:33:50,810
then to develop yeah yeah on top of that

546
00:33:47,400 --> 00:33:50,810
that would make this count

547
00:33:50,980 --> 00:33:55,779
this doesn't have to be the only way to

548
00:33:53,320 --> 00:33:58,928
exploit the house this is just one way

549
00:33:55,779 --> 00:34:02,429
that maybe in some occasion is useful

550
00:33:58,929 --> 00:34:06,039
because you don't have for example

551
00:34:02,429 --> 00:34:08,440
access to write anything in the disk so

552
00:34:06,039 --> 00:34:13,379
you can't deploy a scrip and then run

553
00:34:08,440 --> 00:34:16,359
the script here everything is on the fly

554
00:34:13,379 --> 00:34:19,089
nothing was written to the disk so yeah

555
00:34:16,359 --> 00:34:20,828
it was really cool it's just hard for me

556
00:34:19,089 --> 00:34:23,560
to follow at the start because it seemed

557
00:34:20,829 --> 00:34:27,250
a lot like just distribute computing as

558
00:34:23,560 --> 00:34:32,889
you say yeah it's it's really the

559
00:34:27,250 --> 00:34:36,879
difference is more philosophical because

560
00:34:32,889 --> 00:34:39,369
distribute computing do you you have to

561
00:34:36,879 --> 00:34:44,409
put all those pieces in place to make

562
00:34:39,369 --> 00:34:49,000
the computation very optimized for the

563
00:34:44,409 --> 00:34:52,800
task this is more oriented to store

564
00:34:49,000 --> 00:34:56,230
environment when you don't have really

565
00:34:52,800 --> 00:35:02,339
the benefit of the of this deployment of

566
00:34:56,230 --> 00:35:06,400
this I don't know this way of working so

567
00:35:02,339 --> 00:35:08,230
yeah maybe other use cases but it's very

568
00:35:06,400 --> 00:35:16,510
very late that you have to distribute

569
00:35:08,230 --> 00:35:18,250
committing any other question no okay

570
00:35:16,510 --> 00:35:22,539
thank you

571
00:35:18,250 --> 00:35:22,539
[Applause]

