1
00:00:03,840 --> 00:00:05,520
okay

2
00:00:05,520 --> 00:00:08,480
okay can i start

3
00:00:08,880 --> 00:00:10,880
oh good yeah go ahead

4
00:00:10,880 --> 00:00:12,000
okay

5
00:00:12,000 --> 00:00:14,880
thanks so the thanks besides for having

6
00:00:14,880 --> 00:00:17,520
me today this session will i will talk

7
00:00:17,520 --> 00:00:21,199
about the rsa private key recovery in a

8
00:00:21,199 --> 00:00:23,840
tls session which is transport layer

9
00:00:23,840 --> 00:00:25,279
security

10
00:00:25,279 --> 00:00:28,160
um i did that study a couple of years

11
00:00:28,160 --> 00:00:30,800
ago let's say one two years ago because

12
00:00:30,800 --> 00:00:32,640
i was interested in the cryptography

13
00:00:32,640 --> 00:00:36,000
parts of the rsa algorithm and this

14
00:00:36,000 --> 00:00:38,320
presentation i will show you how to

15
00:00:38,320 --> 00:00:41,280
recover a private key from a dls session

16
00:00:41,280 --> 00:00:43,760
so maybe in short because time is

17
00:00:43,760 --> 00:00:46,480
limited i'm a security researcher and a

18
00:00:46,480 --> 00:00:48,960
security specialist from belgium at the

19
00:00:48,960 --> 00:00:51,920
bottom you can see my email address so

20
00:00:51,920 --> 00:00:54,239
if you want to be in contact

21
00:00:54,239 --> 00:00:56,800
i'm linkedin as well and if you have

22
00:00:56,800 --> 00:00:58,719
questions regarding this presentation

23
00:00:58,719 --> 00:01:00,879
you can always send me an email and i'm

24
00:01:00,879 --> 00:01:04,559
glad to answer you all your questions

25
00:01:04,559 --> 00:01:05,438
now

26
00:01:05,438 --> 00:01:07,040
before we start

27
00:01:07,040 --> 00:01:09,360
first a little mad because this is

28
00:01:09,360 --> 00:01:12,159
really important to understand how the

29
00:01:12,159 --> 00:01:14,400
the rsa algorithm works

30
00:01:14,400 --> 00:01:17,439
this will just take a couple of minutes

31
00:01:17,439 --> 00:01:20,560
but during my demonstration i will come

32
00:01:20,560 --> 00:01:21,920
back to this

33
00:01:21,920 --> 00:01:25,680
so it's uh just a quick overview on what

34
00:01:25,680 --> 00:01:27,520
is what is all these

35
00:01:27,520 --> 00:01:29,200
uh the definitions

36
00:01:29,200 --> 00:01:31,520
so um

37
00:01:31,520 --> 00:01:33,520
in math we have

38
00:01:33,520 --> 00:01:34,320
uh

39
00:01:34,320 --> 00:01:36,799
yeah we have here an integer so which is

40
00:01:36,799 --> 00:01:38,880
a collection of positive numbers yeah

41
00:01:38,880 --> 00:01:40,799
positive numbers is one two three four

42
00:01:40,799 --> 00:01:42,320
five and so on

43
00:01:42,320 --> 00:01:45,680
uh a factor is basically an integer is a

44
00:01:45,680 --> 00:01:47,439
factor of c when there is another

45
00:01:47,439 --> 00:01:49,680
integer b that complies with c is a

46
00:01:49,680 --> 00:01:51,280
product of a and b

47
00:01:51,280 --> 00:01:53,759
so this basically means that if you have

48
00:01:53,759 --> 00:01:55,360
the number six

49
00:01:55,360 --> 00:01:58,000
this is a product of two numbers

50
00:01:58,000 --> 00:02:00,880
because later on in my demonstration i

51
00:02:00,880 --> 00:02:03,920
will use a factorization to calculate

52
00:02:03,920 --> 00:02:07,200
the two factors of my prime numbers

53
00:02:07,200 --> 00:02:08,878
then what is a prime number that's an

54
00:02:08,878 --> 00:02:10,800
integer is prime but it can only be

55
00:02:10,800 --> 00:02:13,280
divided by one in itself and not by a

56
00:02:13,280 --> 00:02:16,239
num but not by an another number so

57
00:02:16,239 --> 00:02:18,160
let's say four is not a prime number

58
00:02:18,160 --> 00:02:20,720
because it can be divided by two but

59
00:02:20,720 --> 00:02:22,879
five is a prime number because it can be

60
00:02:22,879 --> 00:02:24,239
divided by

61
00:02:24,239 --> 00:02:26,400
1 and itself

62
00:02:26,400 --> 00:02:28,879
now the modulo is a remainder of an

63
00:02:28,879 --> 00:02:30,560
entire division

64
00:02:30,560 --> 00:02:34,080
uh this is an example if you

65
00:02:34,080 --> 00:02:35,360
divide

66
00:02:35,360 --> 00:02:37,040
uh 10

67
00:02:37,040 --> 00:02:38,800
by 4

68
00:02:38,800 --> 00:02:40,400
then you have a reminder and the

69
00:02:40,400 --> 00:02:42,160
reminder is 2

70
00:02:42,160 --> 00:02:44,560
that's actually the example that i gave

71
00:02:44,560 --> 00:02:45,440
here

72
00:02:45,440 --> 00:02:46,800
and

73
00:02:46,800 --> 00:02:49,360
a co prime that is a number that is no

74
00:02:49,360 --> 00:02:52,000
factors in common with another number

75
00:02:52,000 --> 00:02:53,040
so

76
00:02:53,040 --> 00:02:56,000
and uh i come back on this later uh in

77
00:02:56,000 --> 00:02:58,400
the next slide

78
00:02:58,400 --> 00:03:01,120
the audience the total fee n is the

79
00:03:01,120 --> 00:03:03,760
amount of integers less than or equal to

80
00:03:03,760 --> 00:03:06,959
n and you are co-prime so this means

81
00:03:06,959 --> 00:03:08,879
the total of nine

82
00:03:08,879 --> 00:03:11,440
is six and six is the amount of prime

83
00:03:11,440 --> 00:03:12,560
numbers

84
00:03:12,560 --> 00:03:15,120
and there is no common factor between

85
00:03:15,120 --> 00:03:17,040
the nine and the prime numbers between

86
00:03:17,040 --> 00:03:19,280
the brackets so there is no common

87
00:03:19,280 --> 00:03:22,080
divider and that is actually uh the

88
00:03:22,080 --> 00:03:24,400
definition of the call prime and that is

89
00:03:24,400 --> 00:03:26,159
really important

90
00:03:26,159 --> 00:03:29,360
in the rsa algorithm because if

91
00:03:29,360 --> 00:03:32,879
uh numbers are call prime then there can

92
00:03:32,879 --> 00:03:36,159
be a common divider and you can easily

93
00:03:36,159 --> 00:03:40,080
calculate the private parts of the

94
00:03:40,080 --> 00:03:42,000
prime numbers

95
00:03:42,000 --> 00:03:44,159
now what is factorization

96
00:03:44,159 --> 00:03:46,159
factorization is a process of

97
00:03:46,159 --> 00:03:49,040
decomposing an integer into its prime

98
00:03:49,040 --> 00:03:50,159
factors

99
00:03:50,159 --> 00:03:52,480
so as i explained earlier

100
00:03:52,480 --> 00:03:55,040
uh if you when you have a number this is

101
00:03:55,040 --> 00:03:57,680
just a number six you can divide it in

102
00:03:57,680 --> 00:04:00,720
two numbers which are two and three and

103
00:04:00,720 --> 00:04:04,400
two and three are the are the factors

104
00:04:04,400 --> 00:04:06,480
and the factorization is basically the

105
00:04:06,480 --> 00:04:09,760
process of calculating the two prime

106
00:04:09,760 --> 00:04:12,560
numbers from one number and that's what

107
00:04:12,560 --> 00:04:16,238
we will do in the demo as well

108
00:04:16,238 --> 00:04:18,238
and the greatest common divider that is

109
00:04:18,238 --> 00:04:21,358
a number a largest integer that divides

110
00:04:21,358 --> 00:04:24,080
each of the integers so this means

111
00:04:24,080 --> 00:04:26,320
when you want to calculate the greatest

112
00:04:26,320 --> 00:04:30,720
common divider between 60 and 48

113
00:04:30,720 --> 00:04:33,199
you have

114
00:04:33,280 --> 00:04:34,320
12

115
00:04:34,320 --> 00:04:36,320
but you have other numbers of slow but

116
00:04:36,320 --> 00:04:39,440
in this case the largest integer is 12.

117
00:04:39,440 --> 00:04:42,320
this can be important when we calculate

118
00:04:42,320 --> 00:04:44,560
the greatest common dividers from public

119
00:04:44,560 --> 00:04:46,240
keys

120
00:04:46,240 --> 00:04:50,479
when they are available on the internet

121
00:04:51,280 --> 00:04:52,880
okay this is

122
00:04:52,880 --> 00:04:54,240
the

123
00:04:54,240 --> 00:04:56,880
mathematical parts i know it's it's very

124
00:04:56,880 --> 00:04:57,759
quick

125
00:04:57,759 --> 00:05:00,400
but again time is limited and i want to

126
00:05:00,400 --> 00:05:02,320
demonstrate some the the most

127
00:05:02,320 --> 00:05:05,360
interesting parts of this study and this

128
00:05:05,360 --> 00:05:07,600
is of course the calculation of the

129
00:05:07,600 --> 00:05:10,400
private key now before we start

130
00:05:10,400 --> 00:05:13,919
going in that what is rsa rsa is an

131
00:05:13,919 --> 00:05:16,479
algorithm that is that is based on

132
00:05:16,479 --> 00:05:19,199
asymmetric encryption and is founded by

133
00:05:19,199 --> 00:05:22,800
three guys in 1977 so it's a quite old

134
00:05:22,800 --> 00:05:24,479
algorithm

135
00:05:24,479 --> 00:05:25,440
ethic

136
00:05:25,440 --> 00:05:28,560
encryption means that you have two keys

137
00:05:28,560 --> 00:05:31,039
and we call it a key pair

138
00:05:31,039 --> 00:05:33,840
and a keypad consists of a public and a

139
00:05:33,840 --> 00:05:35,199
private key

140
00:05:35,199 --> 00:05:37,199
so it means that

141
00:05:37,199 --> 00:05:40,479
the rsa algorithm will

142
00:05:40,479 --> 00:05:42,800
generate two prime numbers

143
00:05:42,800 --> 00:05:45,199
and each prime member is part of that

144
00:05:45,199 --> 00:05:46,479
key

145
00:05:46,479 --> 00:05:48,960
and the private key needs to be kept

146
00:05:48,960 --> 00:05:50,000
right

147
00:05:50,000 --> 00:05:52,880
and the public key can go public

148
00:05:52,880 --> 00:05:56,800
but more on this within a moment

149
00:05:56,880 --> 00:05:59,759
it is very important that a security

150
00:05:59,759 --> 00:06:03,039
identity at its o key pair a security

151
00:06:03,039 --> 00:06:06,160
identity can be a web server it can be a

152
00:06:06,160 --> 00:06:09,520
workstation it can be a website it can

153
00:06:09,520 --> 00:06:13,039
be a user because we can use asymmetric

154
00:06:13,039 --> 00:06:14,160
encryption

155
00:06:14,160 --> 00:06:17,280
to authenticate a user or a system on

156
00:06:17,280 --> 00:06:18,840
the

157
00:06:18,840 --> 00:06:21,919
network i said before the keys are based

158
00:06:21,919 --> 00:06:24,720
on prime numbers but it's important that

159
00:06:24,720 --> 00:06:27,199
these prime numbers are very large

160
00:06:27,199 --> 00:06:30,000
because if prime numbers are small then

161
00:06:30,000 --> 00:06:32,319
we can use factorization to calculate

162
00:06:32,319 --> 00:06:34,880
the prime numbers and based on these

163
00:06:34,880 --> 00:06:37,039
numbers we can easily calculate the

164
00:06:37,039 --> 00:06:41,199
public part and the private parts

165
00:06:41,360 --> 00:06:42,560
another

166
00:06:42,560 --> 00:06:45,360
interesting case is that when a prime

167
00:06:45,360 --> 00:06:48,560
number is generated on a system that

168
00:06:48,560 --> 00:06:50,400
it's randomly

169
00:06:50,400 --> 00:06:52,080
the question is of course what is

170
00:06:52,080 --> 00:06:53,199
randomly

171
00:06:53,199 --> 00:06:56,560
um that is not what we will discuss here

172
00:06:56,560 --> 00:06:58,319
but

173
00:06:58,319 --> 00:07:00,319
you have to trust your random number

174
00:07:00,319 --> 00:07:03,319
generator

175
00:07:05,599 --> 00:07:09,280
finally all that material generated by a

176
00:07:09,280 --> 00:07:12,720
tool or your own application is stored

177
00:07:12,720 --> 00:07:14,560
in a pen file

178
00:07:14,560 --> 00:07:16,800
i will demonstrate this at the end of

179
00:07:16,800 --> 00:07:21,599
this presentation um how that looks like

180
00:07:21,599 --> 00:07:24,639
a pen file is a basically a base64

181
00:07:24,639 --> 00:07:27,280
translation of an certificate file a

182
00:07:27,280 --> 00:07:31,039
certificate file is also an x 509

183
00:07:31,039 --> 00:07:33,199
version 3 file

184
00:07:33,199 --> 00:07:37,680
but again more in one of the next slides

185
00:07:37,680 --> 00:07:38,560
now

186
00:07:38,560 --> 00:07:41,599
the key generation process how the rsa

187
00:07:41,599 --> 00:07:44,720
algorithm calculates the keys that is

188
00:07:44,720 --> 00:07:46,240
explained here

189
00:07:46,240 --> 00:07:49,199
so first what we need what we need is

190
00:07:49,199 --> 00:07:51,440
very large prime numbers

191
00:07:51,440 --> 00:07:53,759
and a tool will generate the prime

192
00:07:53,759 --> 00:07:56,560
members for you it can be open as a cell

193
00:07:56,560 --> 00:07:58,800
it can be a switch it can be whatever

194
00:07:58,800 --> 00:08:01,599
device that generates the prime numbers

195
00:08:01,599 --> 00:08:04,479
with a certain key size and the case

196
00:08:04,479 --> 00:08:05,919
size can be

197
00:08:05,919 --> 00:08:08,960
512 1024

198
00:08:08,960 --> 00:08:11,360
bits and more

199
00:08:11,360 --> 00:08:14,400
so in the rsa algorithm we have two

200
00:08:14,400 --> 00:08:16,479
prime numbers

201
00:08:16,479 --> 00:08:19,599
and we call them p and q p is a prime

202
00:08:19,599 --> 00:08:25,000
number and q is another prime number

203
00:08:26,319 --> 00:08:28,560
now from these two prime numbers we

204
00:08:28,560 --> 00:08:31,199
calculate the products and the products

205
00:08:31,199 --> 00:08:34,240
is named and and this is basically the

206
00:08:34,240 --> 00:08:35,760
modulus

207
00:08:35,760 --> 00:08:38,320
the modulus is also part of the

208
00:08:38,320 --> 00:08:41,839
certificate but we all will what i will

209
00:08:41,839 --> 00:08:45,919
discuss in one of the next slides

210
00:08:46,399 --> 00:08:48,640
in the beginning we just

211
00:08:48,640 --> 00:08:51,040
give the definition of the tortions and

212
00:08:51,040 --> 00:08:54,240
here we will calculate authorities which

213
00:08:54,240 --> 00:08:56,480
is a

214
00:08:56,480 --> 00:09:00,480
prime number which does not have any uh

215
00:09:00,480 --> 00:09:03,680
prime numbers in common and these tokens

216
00:09:03,680 --> 00:09:06,080
is based on the two prime numbers

217
00:09:06,080 --> 00:09:09,680
calculated before

218
00:09:09,680 --> 00:09:12,720
next is we generate another prime number

219
00:09:12,720 --> 00:09:15,279
e which is the public or encryption

220
00:09:15,279 --> 00:09:16,720
exponents

221
00:09:16,720 --> 00:09:19,519
as i discussed earlier uh

222
00:09:19,519 --> 00:09:23,279
rsa is based on two numbers on two keys

223
00:09:23,279 --> 00:09:25,920
a public and a private key so we will

224
00:09:25,920 --> 00:09:29,120
encrypt information with the public key

225
00:09:29,120 --> 00:09:31,839
and we decrypt the information with the

226
00:09:31,839 --> 00:09:33,920
private key

227
00:09:33,920 --> 00:09:36,399
the public part or the encryption part

228
00:09:36,399 --> 00:09:37,519
is e

229
00:09:37,519 --> 00:09:39,360
and these are the

230
00:09:39,360 --> 00:09:41,839
the values so it must be greater than

231
00:09:41,839 --> 00:09:44,320
one but less than the torsions that's

232
00:09:44,320 --> 00:09:46,560
the reason why we had to calculate the

233
00:09:46,560 --> 00:09:48,240
total before

234
00:09:48,240 --> 00:09:50,880
now a typical size of e

235
00:09:50,880 --> 00:09:52,080
is uh

236
00:09:52,080 --> 00:09:55,360
65 537

237
00:09:55,360 --> 00:09:58,240
um which you can find in most of the

238
00:09:58,240 --> 00:10:00,560
certificates when you buy them on the

239
00:10:00,560 --> 00:10:02,560
internet

240
00:10:02,560 --> 00:10:05,600
the next part is to calculate d

241
00:10:05,600 --> 00:10:07,760
and d is the private part or the

242
00:10:07,760 --> 00:10:09,920
decryption component

243
00:10:09,920 --> 00:10:12,880
as you can see to calculate d it's the

244
00:10:12,880 --> 00:10:14,480
inverse

245
00:10:14,480 --> 00:10:16,720
of the public part

246
00:10:16,720 --> 00:10:20,880
modulus the total value

247
00:10:21,200 --> 00:10:22,079
okay

248
00:10:22,079 --> 00:10:24,640
you don't have to remember this but it's

249
00:10:24,640 --> 00:10:27,839
just an introduction about how the rsa

250
00:10:27,839 --> 00:10:30,839
algorithm works and how the keys are

251
00:10:30,839 --> 00:10:34,959
processed so to continue the public part

252
00:10:34,959 --> 00:10:39,040
or the public key of my rsa algorithm is

253
00:10:39,040 --> 00:10:42,000
the modulus in combination with the

254
00:10:42,000 --> 00:10:45,040
public exponents which is my e

255
00:10:45,040 --> 00:10:46,560
and the private key

256
00:10:46,560 --> 00:10:49,680
is the modulus with the private parts

257
00:10:49,680 --> 00:10:50,720
so the

258
00:10:50,720 --> 00:10:52,399
e was my

259
00:10:52,399 --> 00:10:56,320
65 000 and so on and d is a private

260
00:10:56,320 --> 00:10:58,839
number it needs to be private

261
00:10:58,839 --> 00:11:02,399
so it needs to be stored securely on

262
00:11:02,399 --> 00:11:03,279
your

263
00:11:03,279 --> 00:11:04,880
system whatever

264
00:11:04,880 --> 00:11:08,000
that system is

265
00:11:08,000 --> 00:11:10,320
okay now what does this means in

266
00:11:10,320 --> 00:11:12,560
practical

267
00:11:12,560 --> 00:11:15,200
we cannot do anything with all this key

268
00:11:15,200 --> 00:11:17,680
material because our operating system

269
00:11:17,680 --> 00:11:20,240
will do that for us so we need something

270
00:11:20,240 --> 00:11:21,519
to work with

271
00:11:21,519 --> 00:11:24,079
and this is basically a certificate

272
00:11:24,079 --> 00:11:26,720
a certificate is a representation of a

273
00:11:26,720 --> 00:11:28,399
security identity

274
00:11:28,399 --> 00:11:31,680
and it basically it contains a public

275
00:11:31,680 --> 00:11:34,800
key and or a private key

276
00:11:34,800 --> 00:11:37,760
a certificate can be generated by using

277
00:11:37,760 --> 00:11:39,279
an internal

278
00:11:39,279 --> 00:11:42,320
certificate authority or you can buy a

279
00:11:42,320 --> 00:11:45,279
certificate from an external party like

280
00:11:45,279 --> 00:11:47,680
globalsign rapid as a zell let's say

281
00:11:47,680 --> 00:11:51,120
encrypt and so on

282
00:11:51,120 --> 00:11:53,680
when the key material is generated you

283
00:11:53,680 --> 00:11:55,760
need to

284
00:11:55,760 --> 00:11:58,560
generate a certificate signing request

285
00:11:58,560 --> 00:12:01,600
this is basically a file which contains

286
00:12:01,600 --> 00:12:04,560
some public information like what is the

287
00:12:04,560 --> 00:12:06,160
email address

288
00:12:06,160 --> 00:12:08,480
uh what is the fully qualified domain

289
00:12:08,480 --> 00:12:11,200
name of the website what is the it

290
00:12:11,200 --> 00:12:13,920
departments and so on and all that

291
00:12:13,920 --> 00:12:16,639
information is used to

292
00:12:16,639 --> 00:12:18,480
digitally sign

293
00:12:18,480 --> 00:12:20,639
a certificate

294
00:12:20,639 --> 00:12:22,800
in the certificate what can you find in

295
00:12:22,800 --> 00:12:25,920
a certificate you can find the public

296
00:12:25,920 --> 00:12:28,880
key and you can find the models i will

297
00:12:28,880 --> 00:12:31,760
show that to you within a moment

298
00:12:31,760 --> 00:12:34,480
when a certificate file contains as well

299
00:12:34,480 --> 00:12:37,760
the private key then they call it a bfx

300
00:12:37,760 --> 00:12:39,839
file

301
00:12:40,720 --> 00:12:42,570
or a p12 file

302
00:12:42,570 --> 00:12:45,920
[Music]

303
00:12:45,920 --> 00:12:48,639
a certificate can be used for server and

304
00:12:48,639 --> 00:12:51,360
client authentication i will use a

305
00:12:51,360 --> 00:12:54,000
certificate for server authentication

306
00:12:54,000 --> 00:12:57,440
which is assigned to my website

307
00:12:57,440 --> 00:12:59,600
to my web server so when a client

308
00:12:59,600 --> 00:13:00,880
connects to

309
00:13:00,880 --> 00:13:02,959
a web server it downloads the

310
00:13:02,959 --> 00:13:05,200
certificate from the web server it

311
00:13:05,200 --> 00:13:07,279
verifies the validity

312
00:13:07,279 --> 00:13:09,920
if it's the certificate is valid and

313
00:13:09,920 --> 00:13:11,760
then it will check the certificate

314
00:13:11,760 --> 00:13:14,639
revocation list to verify that the

315
00:13:14,639 --> 00:13:17,680
certificate is not revoked

316
00:13:17,680 --> 00:13:20,959
then finally the client will generate a

317
00:13:20,959 --> 00:13:22,720
symmetric key

318
00:13:22,720 --> 00:13:25,440
and will use asymmetric encryption which

319
00:13:25,440 --> 00:13:28,240
means now the public key of my web

320
00:13:28,240 --> 00:13:31,839
server to encrypt my symmetric key and

321
00:13:31,839 --> 00:13:34,480
it will send it to my web server

322
00:13:34,480 --> 00:13:37,600
the web server will use its private key

323
00:13:37,600 --> 00:13:40,880
to decrypt the information and then now

324
00:13:40,880 --> 00:13:43,680
has the same symmetric key which was

325
00:13:43,680 --> 00:13:47,760
previously generated on my client side

326
00:13:47,760 --> 00:13:50,240
and then finally we have a secure

327
00:13:50,240 --> 00:13:52,800
channel between the client and the web

328
00:13:52,800 --> 00:13:54,880
server and this is then based on

329
00:13:54,880 --> 00:13:57,199
transport layer security whatever

330
00:13:57,199 --> 00:14:00,560
version you have one one one or one and

331
00:14:00,560 --> 00:14:03,519
two in my demonstration i will use tls

332
00:14:03,519 --> 00:14:05,519
1.2

333
00:14:05,519 --> 00:14:08,399
to secure the traffic

334
00:14:08,399 --> 00:14:09,440
now

335
00:14:09,440 --> 00:14:12,240
this is a briefly overview on how tls

336
00:14:12,240 --> 00:14:14,399
works so first

337
00:14:14,399 --> 00:14:17,360
my web browser my client will send a

338
00:14:17,360 --> 00:14:20,079
client hello message to the web server

339
00:14:20,079 --> 00:14:22,480
with the question hey this is all the

340
00:14:22,480 --> 00:14:25,199
cipher suites i support which do you

341
00:14:25,199 --> 00:14:27,920
support the server will send its

342
00:14:27,920 --> 00:14:31,199
certificates and will also send

343
00:14:31,199 --> 00:14:33,040
a list

344
00:14:33,040 --> 00:14:36,240
no not a list but it will choose one of

345
00:14:36,240 --> 00:14:37,199
the

346
00:14:37,199 --> 00:14:39,760
selected ciphers which was previously

347
00:14:39,760 --> 00:14:41,839
sent by the client

348
00:14:41,839 --> 00:14:42,880
and then

349
00:14:42,880 --> 00:14:46,399
sent its certificate back to the clients

350
00:14:46,399 --> 00:14:49,440
when they both have an agreement

351
00:14:49,440 --> 00:14:51,600
they have the

352
00:14:51,600 --> 00:14:53,279
algorithm used

353
00:14:53,279 --> 00:14:56,160
or selected to encrypted information and

354
00:14:56,160 --> 00:14:57,680
then finally

355
00:14:57,680 --> 00:15:00,800
the https connection is

356
00:15:00,800 --> 00:15:02,560
set up

357
00:15:02,560 --> 00:15:03,519
now

358
00:15:03,519 --> 00:15:06,000
this is an example of a client hello

359
00:15:06,000 --> 00:15:07,120
message

360
00:15:07,120 --> 00:15:07,920
so

361
00:15:07,920 --> 00:15:10,959
uh here you can see a list of all the

362
00:15:10,959 --> 00:15:14,240
cipher switches that my client sends to

363
00:15:14,240 --> 00:15:16,160
the web server

364
00:15:16,160 --> 00:15:19,040
and then on the next slide we can see

365
00:15:19,040 --> 00:15:21,199
the answer of the slide

366
00:15:21,199 --> 00:15:24,639
of the server and he will send or select

367
00:15:24,639 --> 00:15:28,240
one of the cypher suite so in this case

368
00:15:28,240 --> 00:15:30,720
it's tls rsa

369
00:15:30,720 --> 00:15:34,240
the rsa algorithm and so on

370
00:15:34,240 --> 00:15:37,120
now what does this mean

371
00:15:37,120 --> 00:15:40,160
this is a breakdown of the selected

372
00:15:40,160 --> 00:15:43,519
cipher slitter so the first part is the

373
00:15:43,519 --> 00:15:46,079
transport layer security the protocol

374
00:15:46,079 --> 00:15:47,920
used to

375
00:15:47,920 --> 00:15:50,880
secure the information the second part

376
00:15:50,880 --> 00:15:53,040
is the rsa algorithm

377
00:15:53,040 --> 00:15:56,880
for key exchange and authentication

378
00:15:56,880 --> 00:16:00,079
the other part is we use randall

379
00:16:00,079 --> 00:16:03,040
encryption or ias encryption as a

380
00:16:03,040 --> 00:16:04,639
symmetric key

381
00:16:04,639 --> 00:16:05,560
which is

382
00:16:05,560 --> 00:16:08,399
256 bit length

383
00:16:08,399 --> 00:16:11,360
then we have the counter mode

384
00:16:11,360 --> 00:16:14,880
in this case each gcm you have also a

385
00:16:14,880 --> 00:16:16,000
cbc

386
00:16:16,000 --> 00:16:16,959
uh

387
00:16:16,959 --> 00:16:20,079
an ecb electronic code book and then

388
00:16:20,079 --> 00:16:22,720
finally we have the mac which is the

389
00:16:22,720 --> 00:16:25,199
message authentication codes and it's

390
00:16:25,199 --> 00:16:29,880
based on sha 384

391
00:16:30,399 --> 00:16:31,360
okay

392
00:16:31,360 --> 00:16:32,399
now

393
00:16:32,399 --> 00:16:34,839
during my study

394
00:16:34,839 --> 00:16:39,040
um i found a lot of vulnerabilities

395
00:16:39,040 --> 00:16:42,160
now did i found them by myself no

396
00:16:42,160 --> 00:16:44,880
because i previously

397
00:16:44,880 --> 00:16:47,199
i i've searched on the internet about

398
00:16:47,199 --> 00:16:49,279
known vulnerabilities in the rsa

399
00:16:49,279 --> 00:16:50,480
algorithm

400
00:16:50,480 --> 00:16:53,440
and there were some other people that

401
00:16:53,440 --> 00:16:56,639
did some work before but only from the

402
00:16:56,639 --> 00:16:59,839
mathematical part what i did is i

403
00:16:59,839 --> 00:17:02,480
translated the mathematics that other

404
00:17:02,480 --> 00:17:06,079
people did into a python script and that

405
00:17:06,079 --> 00:17:08,000
python script contains these

406
00:17:08,000 --> 00:17:11,359
vulnerabilities now

407
00:17:11,359 --> 00:17:13,919
what we will discuss or demonstrate

408
00:17:13,919 --> 00:17:16,720
today is only the first one

409
00:17:16,720 --> 00:17:19,439
when the rsa algorithm

410
00:17:19,439 --> 00:17:22,079
generates prime numbers which are close

411
00:17:22,079 --> 00:17:24,480
to each other

412
00:17:24,480 --> 00:17:27,039
that's what i talked before

413
00:17:27,039 --> 00:17:29,200
uh that you have to trust your random

414
00:17:29,200 --> 00:17:32,160
number generator the random genre number

415
00:17:32,160 --> 00:17:34,320
generator will generate prime numbers

416
00:17:34,320 --> 00:17:37,840
for you and the the num the numbers must

417
00:17:37,840 --> 00:17:38,559
be

418
00:17:38,559 --> 00:17:40,240
uh far

419
00:17:40,240 --> 00:17:41,760
from each other

420
00:17:41,760 --> 00:17:44,080
another one is a common factor and this

421
00:17:44,080 --> 00:17:47,280
means that if you generate two prime

422
00:17:47,280 --> 00:17:48,240
numbers

423
00:17:48,240 --> 00:17:51,120
that one of the true prime numbers

424
00:17:51,120 --> 00:17:52,880
is common

425
00:17:52,880 --> 00:17:56,320
and this can be a huge problem uh when

426
00:17:56,320 --> 00:17:58,880
certificates exist on the internet

427
00:17:58,880 --> 00:18:01,280
it means that somewhere

428
00:18:01,280 --> 00:18:03,520
a prime number is generated and on the

429
00:18:03,520 --> 00:18:05,679
other side of the world other prime

430
00:18:05,679 --> 00:18:08,000
numbers are generated but one of the two

431
00:18:08,000 --> 00:18:10,080
prime numbers is the one that was

432
00:18:10,080 --> 00:18:11,679
generated before

433
00:18:11,679 --> 00:18:13,919
and there are other vulnerabilities as

434
00:18:13,919 --> 00:18:16,799
well which are all

435
00:18:16,799 --> 00:18:19,520
available in the scripts the script is

436
00:18:19,520 --> 00:18:22,720
not yet publicly available but it will

437
00:18:22,720 --> 00:18:26,880
in the next couple of weeks or months

438
00:18:26,880 --> 00:18:29,679
now um

439
00:18:29,679 --> 00:18:31,520
for my demonstration

440
00:18:31,520 --> 00:18:33,919
my tool will generate

441
00:18:33,919 --> 00:18:36,240
prime numbers which are very close to

442
00:18:36,240 --> 00:18:37,360
each other

443
00:18:37,360 --> 00:18:39,960
and the size of the prime number can be

444
00:18:39,960 --> 00:18:41,520
512

445
00:18:41,520 --> 00:18:43,679
or 1024

446
00:18:43,679 --> 00:18:44,960
bits

447
00:18:44,960 --> 00:18:47,440
the size of the modulus is then the

448
00:18:47,440 --> 00:18:49,520
product of these two

449
00:18:49,520 --> 00:18:53,520
so this means if my prime number is 512

450
00:18:53,520 --> 00:18:58,160
bits then my modulus is 1024 bits if my

451
00:18:58,160 --> 00:18:59,919
prime number is

452
00:18:59,919 --> 00:19:03,440
1k then my modulus is 2k

453
00:19:03,440 --> 00:19:06,400
here we can say in the formula when the

454
00:19:06,400 --> 00:19:08,240
prime numbers are very close to each

455
00:19:08,240 --> 00:19:11,280
other that the prime number are equal

456
00:19:11,280 --> 00:19:13,679
and then we can use for fermat

457
00:19:13,679 --> 00:19:16,480
factorization to calculate the two prime

458
00:19:16,480 --> 00:19:17,520
numbers

459
00:19:17,520 --> 00:19:19,919
when we have the two parameters we can

460
00:19:19,919 --> 00:19:23,039
easily calculate the total

461
00:19:23,039 --> 00:19:25,440
and next part is to calculate the

462
00:19:25,440 --> 00:19:28,160
private exponent of my

463
00:19:28,160 --> 00:19:31,120
rsa algorithm

464
00:19:31,120 --> 00:19:32,880
okay

465
00:19:32,880 --> 00:19:36,640
this is a screenshot of my tool but i

466
00:19:36,640 --> 00:19:37,760
will

467
00:19:37,760 --> 00:19:40,720
demonstrate this life using virtual

468
00:19:40,720 --> 00:19:42,480
machines

469
00:19:42,480 --> 00:19:43,600
now

470
00:19:43,600 --> 00:19:47,039
uh in the demo what do i use i use

471
00:19:47,039 --> 00:19:48,480
python3

472
00:19:48,480 --> 00:19:50,480
i have my script

473
00:19:50,480 --> 00:19:54,960
i use yafu yafu is a tool

474
00:19:54,960 --> 00:19:56,720
that i use to

475
00:19:56,720 --> 00:19:58,480
for factorization

476
00:19:58,480 --> 00:20:00,640
which is a tool to calculate the prime

477
00:20:00,640 --> 00:20:03,600
numbers based from the modulus

478
00:20:03,600 --> 00:20:06,960
and i use open ssl to convert and to

479
00:20:06,960 --> 00:20:08,400
generate some

480
00:20:08,400 --> 00:20:10,080
key material

481
00:20:10,080 --> 00:20:12,320
okay

482
00:20:19,039 --> 00:20:21,440
i have some virtual machines

483
00:20:21,440 --> 00:20:24,880
i have a windows server an iis which

484
00:20:24,880 --> 00:20:27,360
contains a website

485
00:20:27,360 --> 00:20:30,000
and i have my clients

486
00:20:30,000 --> 00:20:34,280
with my tool available

487
00:20:34,320 --> 00:20:37,120
which is here

488
00:20:38,320 --> 00:20:40,320
you see there are there are several

489
00:20:40,320 --> 00:20:42,960
options that you can use to generate

490
00:20:42,960 --> 00:20:45,679
some faulty key material and then

491
00:20:45,679 --> 00:20:48,720
finally you can use the recover option

492
00:20:48,720 --> 00:20:51,679
to calculate the private keys and the

493
00:20:51,679 --> 00:20:54,640
output will always be a pen file

494
00:20:54,640 --> 00:20:57,120
which contains the private key of one of

495
00:20:57,120 --> 00:20:59,600
these vulnerabilities

496
00:20:59,600 --> 00:21:02,559
so i will give you the process how

497
00:21:02,559 --> 00:21:06,000
what i did before and then i start the

498
00:21:06,000 --> 00:21:08,880
to demonstrate the vulnerability so what

499
00:21:08,880 --> 00:21:11,360
i did before is first you need to

500
00:21:11,360 --> 00:21:14,480
generate some key material

501
00:21:14,480 --> 00:21:17,679
and the comments that i use

502
00:21:17,679 --> 00:21:19,039
is

503
00:21:19,039 --> 00:21:21,679
generates

504
00:21:22,720 --> 00:21:25,600
false primes

505
00:21:25,600 --> 00:21:28,200
bit length let's say uh

506
00:21:28,200 --> 00:21:30,400
1024 bits

507
00:21:30,400 --> 00:21:32,000
and then the output

508
00:21:32,000 --> 00:21:37,080
is a file let's say server02.10

509
00:21:37,760 --> 00:21:40,640
the tool will now generate prime numbers

510
00:21:40,640 --> 00:21:44,480
which are very close to each other

511
00:21:44,480 --> 00:21:47,919
this is my server2.pam

512
00:21:47,919 --> 00:21:50,559
you can have

513
00:21:50,880 --> 00:21:55,120
you can see the content by using openssl

514
00:21:55,120 --> 00:21:58,120
rsa

515
00:22:01,600 --> 00:22:03,440
this is my

516
00:22:03,440 --> 00:22:05,679
base 64

517
00:22:05,679 --> 00:22:07,679
information

518
00:22:07,679 --> 00:22:09,520
it's what i explained earlier in slides

519
00:22:09,520 --> 00:22:11,840
that the pen file is base

520
00:22:11,840 --> 00:22:14,799
but we can easily translate this into

521
00:22:14,799 --> 00:22:15,760
text

522
00:22:15,760 --> 00:22:18,080
and then you have this

523
00:22:18,080 --> 00:22:21,120
so this is the modulus which is n the

524
00:22:21,120 --> 00:22:23,600
product of the two prime numbers this is

525
00:22:23,600 --> 00:22:24,720
my

526
00:22:24,720 --> 00:22:27,679
public exponent e

527
00:22:27,679 --> 00:22:28,640
this is

528
00:22:28,640 --> 00:22:31,120
my private exponent and these are the

529
00:22:31,120 --> 00:22:33,760
two prime numbers so you can see these

530
00:22:33,760 --> 00:22:37,679
numbers are almost the same except here

531
00:22:37,679 --> 00:22:40,480
for the last two

532
00:22:40,480 --> 00:22:42,880
bytes let's say

533
00:22:42,880 --> 00:22:44,559
okay

534
00:22:44,559 --> 00:22:47,760
now when you have a pen file the next

535
00:22:47,760 --> 00:22:50,080
step is to

536
00:22:50,080 --> 00:22:52,640
generate a certificate request because

537
00:22:52,640 --> 00:22:56,159
our goal was to

538
00:22:57,280 --> 00:23:01,520
ask or request for a certificate which

539
00:23:01,520 --> 00:23:05,440
contains the public key so the next part

540
00:23:05,440 --> 00:23:06,720
is basically

541
00:23:06,720 --> 00:23:11,600
these command open ssl request new

542
00:23:11,600 --> 00:23:15,520
i need a new key which is my server

543
00:23:15,520 --> 00:23:19,520
and then the output will be

544
00:23:20,840 --> 00:23:24,640
a csr

545
00:23:24,640 --> 00:23:26,159
then you need to fill in some

546
00:23:26,159 --> 00:23:27,520
information

547
00:23:27,520 --> 00:23:30,320
so you can specify the country name

548
00:23:30,320 --> 00:23:31,440
the uh

549
00:23:31,440 --> 00:23:34,080
the states the locality name

550
00:23:34,080 --> 00:23:37,120
uh the organization name so in my case

551
00:23:37,120 --> 00:23:38,559
it's a

552
00:23:38,559 --> 00:23:39,440
a

553
00:23:39,440 --> 00:23:42,400
fake company called whitehead security

554
00:23:42,400 --> 00:23:44,080
organization name

555
00:23:44,080 --> 00:23:46,799
i.t the common name is very important

556
00:23:46,799 --> 00:23:48,720
because this will be the fully qualified

557
00:23:48,720 --> 00:23:51,360
domain name of the website

558
00:23:51,360 --> 00:23:54,080
so in my case it will be white hat

559
00:23:54,080 --> 00:23:56,000
security

560
00:23:56,000 --> 00:23:58,720
dot b e

561
00:23:58,720 --> 00:24:01,760
and then the email address your one ad

562
00:24:01,760 --> 00:24:05,360
white hat security

563
00:24:05,360 --> 00:24:08,000
dot be

564
00:24:08,000 --> 00:24:08,910
a password

565
00:24:08,910 --> 00:24:12,000
[Music]

566
00:24:12,000 --> 00:24:14,559
it's optional and then the output is a

567
00:24:14,559 --> 00:24:18,080
css file that css file that's something

568
00:24:18,080 --> 00:24:19,679
that you can use

569
00:24:19,679 --> 00:24:20,480
to

570
00:24:20,480 --> 00:24:23,360
uh buy a certificate or to request a

571
00:24:23,360 --> 00:24:26,320
certificate by let's say crypts the css

572
00:24:26,320 --> 00:24:28,960
file contains as well the public key

573
00:24:28,960 --> 00:24:32,960
because our result will be a certificate

574
00:24:32,960 --> 00:24:35,679
when you bought or when you request a

575
00:24:35,679 --> 00:24:37,200
certificate

576
00:24:37,200 --> 00:24:40,400
from let's encrypt you have a set file

577
00:24:40,400 --> 00:24:43,039
and then you need to combine the public

578
00:24:43,039 --> 00:24:45,840
key with the private key to generate a

579
00:24:45,840 --> 00:24:47,600
pfx file

580
00:24:47,600 --> 00:24:50,240
and then you can install that file on

581
00:24:50,240 --> 00:24:53,039
your web server

582
00:24:53,039 --> 00:24:56,080
so that's what i did before

583
00:24:56,080 --> 00:24:59,200
so i bought a certificate

584
00:24:59,200 --> 00:25:03,120
based on faulty gamer material and then

585
00:25:03,120 --> 00:25:04,960
i have a certificate

586
00:25:04,960 --> 00:25:07,600
of mine for my website when i double

587
00:25:07,600 --> 00:25:09,760
click on the certificate you can see

588
00:25:09,760 --> 00:25:12,480
here that it's issued to whitehead

589
00:25:12,480 --> 00:25:14,080
security.be

590
00:25:14,080 --> 00:25:17,360
it was digitally signed by rapid tessell

591
00:25:17,360 --> 00:25:20,400
it's valid up to next years

592
00:25:20,400 --> 00:25:22,880
and i have the corresponding private key

593
00:25:22,880 --> 00:25:25,039
because we know that it's based on the

594
00:25:25,039 --> 00:25:28,320
rsa algorithm and we have a public and a

595
00:25:28,320 --> 00:25:30,640
private key

596
00:25:30,640 --> 00:25:32,159
the details

597
00:25:32,159 --> 00:25:33,039
uh

598
00:25:33,039 --> 00:25:34,960
yeah we have the fully qualified domain

599
00:25:34,960 --> 00:25:38,240
name and here this is the public key

600
00:25:38,240 --> 00:25:42,640
the public key is my modules which is n

601
00:25:42,640 --> 00:25:46,480
and then we have other information

602
00:25:46,480 --> 00:25:50,559
this is elected a legitimate certificate

603
00:25:50,559 --> 00:25:54,000
because it works but it contains only

604
00:25:54,000 --> 00:25:56,480
faulty material

605
00:25:56,480 --> 00:25:58,799
okay

606
00:25:58,799 --> 00:26:00,960
to demonstrate the vulnerability to

607
00:26:00,960 --> 00:26:03,679
calculate the private part of this key

608
00:26:03,679 --> 00:26:06,000
because the private key is somewhere

609
00:26:06,000 --> 00:26:09,360
located on my web server and from the

610
00:26:09,360 --> 00:26:11,279
attacker's perspective i want to

611
00:26:11,279 --> 00:26:14,000
calculate the private key to decrypt my

612
00:26:14,000 --> 00:26:15,520
tls session

613
00:26:15,520 --> 00:26:17,600
so i go back to my

614
00:26:17,600 --> 00:26:19,679
uh to my machine

615
00:26:19,679 --> 00:26:21,679
i

616
00:26:21,679 --> 00:26:22,799
remove

617
00:26:22,799 --> 00:26:23,760
my

618
00:26:23,760 --> 00:26:26,960
files that i've generated before because

619
00:26:26,960 --> 00:26:29,679
i don't i don't need them anymore

620
00:26:29,679 --> 00:26:33,600
what i do now is i need the public key

621
00:26:33,600 --> 00:26:36,080
of the certificate from that specific

622
00:26:36,080 --> 00:26:37,600
website

623
00:26:37,600 --> 00:26:39,200
how do i do that

624
00:26:39,200 --> 00:26:42,960
i can use my web browser or i can use

625
00:26:42,960 --> 00:26:46,240
ssl to connect to that

626
00:26:46,240 --> 00:26:48,400
site

627
00:26:48,400 --> 00:26:52,279
with the following comments

628
00:27:05,039 --> 00:27:10,480
output will be written into a file

629
00:27:10,880 --> 00:27:12,000
i will

630
00:27:12,000 --> 00:27:15,360
do that in i will export that in a text

631
00:27:15,360 --> 00:27:18,000
file not as a certificate

632
00:27:18,000 --> 00:27:22,559
and i will name the file server 2 dot

633
00:27:22,559 --> 00:27:24,799
pen

634
00:27:27,120 --> 00:27:29,360
okay

635
00:27:29,600 --> 00:27:32,640
so what is the output the output here

636
00:27:32,640 --> 00:27:34,559
is server2.pen

637
00:27:34,559 --> 00:27:36,960
which is my

638
00:27:36,960 --> 00:27:38,559
public key

639
00:27:38,559 --> 00:27:41,039
to view the contents it can be easily

640
00:27:41,039 --> 00:27:41,840
done

641
00:27:41,840 --> 00:27:44,000
with

642
00:27:45,919 --> 00:27:47,360
with these commands

643
00:27:47,360 --> 00:27:49,840
oops

644
00:27:51,520 --> 00:27:55,360
it's not rsa it's uh

645
00:27:55,480 --> 00:27:59,840
x5109 because it's a certificate file

646
00:27:59,840 --> 00:28:03,120
so if you can as you can see here you

647
00:28:03,120 --> 00:28:06,960
see now the details of the same details

648
00:28:06,960 --> 00:28:09,600
of my certificates which was available

649
00:28:09,600 --> 00:28:12,240
on my website because it is digitally

650
00:28:12,240 --> 00:28:14,240
signed by rapid ssl

651
00:28:14,240 --> 00:28:16,960
this is the public key which is

652
00:28:16,960 --> 00:28:19,480
let's say pretty secure because it's

653
00:28:19,480 --> 00:28:21,360
2048 bits

654
00:28:21,360 --> 00:28:23,200
this is the modulus

655
00:28:23,200 --> 00:28:26,000
this is my exponents my encryption

656
00:28:26,000 --> 00:28:28,640
exponents e

657
00:28:28,640 --> 00:28:30,880
and then we have additional details

658
00:28:30,880 --> 00:28:33,760
about the dns name full qualified domain

659
00:28:33,760 --> 00:28:34,640
name

660
00:28:34,640 --> 00:28:37,520
who has signed the certificate

661
00:28:37,520 --> 00:28:40,159
and timestamps and and so matching

662
00:28:40,159 --> 00:28:43,360
information and so on

663
00:28:43,360 --> 00:28:44,559
this is my

664
00:28:44,559 --> 00:28:48,399
certificate which is basically my public

665
00:28:48,399 --> 00:28:49,440
key

666
00:28:49,440 --> 00:28:50,399
now

667
00:28:50,399 --> 00:28:54,000
for us it's uh the most interesting part

668
00:28:54,000 --> 00:28:56,799
is to calculate the private key before i

669
00:28:56,799 --> 00:28:59,520
can do that i need the models

670
00:28:59,520 --> 00:29:02,559
and the models can be retrieved

671
00:29:02,559 --> 00:29:06,879
by the by using the following equipment

672
00:29:07,440 --> 00:29:09,760
and now this is the modules

673
00:29:09,760 --> 00:29:11,440
as you remember from the beginning of

674
00:29:11,440 --> 00:29:14,159
the presentation the modulus is the

675
00:29:14,159 --> 00:29:18,640
product of the two prime numbers

676
00:29:19,039 --> 00:29:22,000
i copy this

677
00:29:23,279 --> 00:29:24,799
and now

678
00:29:24,799 --> 00:29:27,520
i can use factorization

679
00:29:27,520 --> 00:29:30,880
to calculate the two prime numbers

680
00:29:30,880 --> 00:29:31,679
and

681
00:29:31,679 --> 00:29:34,159
to factor

682
00:29:34,159 --> 00:29:40,039
for factorization i use the tool yahoo

683
00:29:41,200 --> 00:29:43,600
and then factof

684
00:29:43,600 --> 00:29:46,240
zero x because it's an hexadecimal

685
00:29:46,240 --> 00:29:48,640
number

686
00:29:50,320 --> 00:29:52,240
this will take let's say

687
00:29:52,240 --> 00:29:55,120
uh 30 seconds in my case or maybe a

688
00:29:55,120 --> 00:29:56,080
minute

689
00:29:56,080 --> 00:29:58,559
and the result will be

690
00:29:58,559 --> 00:30:00,240
two prime numbers

691
00:30:00,240 --> 00:30:02,720
so let's wait until the numbers are

692
00:30:02,720 --> 00:30:04,559
calculated

693
00:30:04,559 --> 00:30:07,600
they are here and as you can see

694
00:30:07,600 --> 00:30:09,679
these prime numbers are very close to

695
00:30:09,679 --> 00:30:13,679
each other only the last four digits

696
00:30:13,679 --> 00:30:15,120
are different

697
00:30:15,120 --> 00:30:16,880
and this is one of the vulnerabilities

698
00:30:16,880 --> 00:30:19,120
which currently exists in the rsa

699
00:30:19,120 --> 00:30:20,799
algorithm

700
00:30:20,799 --> 00:30:23,679
now i can do anything with this i now

701
00:30:23,679 --> 00:30:24,720
need

702
00:30:24,720 --> 00:30:25,919
the

703
00:30:25,919 --> 00:30:28,799
private key now calculate the private

704
00:30:28,799 --> 00:30:31,679
key i use my tool

705
00:30:31,679 --> 00:30:33,520
so what i do now

706
00:30:33,520 --> 00:30:36,080
is python

707
00:30:36,080 --> 00:30:39,760
and then my script

708
00:30:40,000 --> 00:30:44,320
now i use the switch recover

709
00:30:44,320 --> 00:30:46,240
closed lines

710
00:30:46,240 --> 00:30:49,200
and then the first prime number

711
00:30:49,200 --> 00:30:51,360
is that number

712
00:30:51,360 --> 00:30:53,919
and the second prime number

713
00:30:53,919 --> 00:30:56,960
is this number

714
00:30:57,919 --> 00:31:01,519
and then i want to write the private key

715
00:31:01,519 --> 00:31:05,200
of the known public key into a file

716
00:31:05,200 --> 00:31:07,679
called server02

717
00:31:07,679 --> 00:31:08,640
dash

718
00:31:08,640 --> 00:31:11,200
recover

719
00:31:12,640 --> 00:31:15,840
and it's in a written into a pen file

720
00:31:15,840 --> 00:31:19,200
so now the tool used the two prime

721
00:31:19,200 --> 00:31:21,360
numbers

722
00:31:21,360 --> 00:31:23,039
to calculate

723
00:31:23,039 --> 00:31:26,399
the private part of my public key

724
00:31:26,399 --> 00:31:29,519
and then i have now a file called server

725
00:31:29,519 --> 00:31:33,440
two dash recovered which contains my

726
00:31:33,440 --> 00:31:35,360
private key

727
00:31:35,360 --> 00:31:37,678
okay

728
00:31:38,080 --> 00:31:39,519
let's now connect

729
00:31:39,519 --> 00:31:40,880
from a web

730
00:31:40,880 --> 00:31:44,559
browser to our server

731
00:31:44,559 --> 00:31:47,120
so i open here in this case microsoft

732
00:31:47,120 --> 00:31:49,360
edge

733
00:31:49,440 --> 00:31:52,080
before i connect to my website

734
00:31:52,080 --> 00:31:55,200
first i start wireshark because i need

735
00:31:55,200 --> 00:32:00,360
wireshark to decrypt all the information

736
00:32:07,519 --> 00:32:10,000
okay

737
00:32:11,120 --> 00:32:12,880
then

738
00:32:12,880 --> 00:32:15,120
https

739
00:32:15,120 --> 00:32:18,320
whitehead security.e

740
00:32:18,320 --> 00:32:20,640
and what is the website the website is

741
00:32:20,640 --> 00:32:23,440
just a basic website and it contains

742
00:32:23,440 --> 00:32:24,799
a login page

743
00:32:24,799 --> 00:32:27,760
where you can type in a username

744
00:32:27,760 --> 00:32:31,120
and then a password

745
00:32:34,000 --> 00:32:36,080
it's ssl

746
00:32:36,080 --> 00:32:38,880
or transport player security so i'm sure

747
00:32:38,880 --> 00:32:40,960
that all my personal information is

748
00:32:40,960 --> 00:32:44,320
encrypted when i click on login

749
00:32:44,320 --> 00:32:46,320
i'm logged in

750
00:32:46,320 --> 00:32:47,760
and

751
00:32:47,760 --> 00:32:50,880
that's it i can see other stuff

752
00:32:50,880 --> 00:32:52,799
now

753
00:32:52,799 --> 00:32:53,840
for us

754
00:32:53,840 --> 00:32:57,200
the most interesting part is to

755
00:32:57,200 --> 00:32:59,039
first filter

756
00:32:59,039 --> 00:33:00,960
the traffic between

757
00:33:00,960 --> 00:33:04,720
the clients and the web server

758
00:33:06,720 --> 00:33:08,880
as you can see here

759
00:33:08,880 --> 00:33:11,200
it is all encrypted

760
00:33:11,200 --> 00:33:13,760
by use of tls

761
00:33:13,760 --> 00:33:17,039
transport layer security version 1.2

762
00:33:17,039 --> 00:33:19,840
as i explained earlier in the slides you

763
00:33:19,840 --> 00:33:22,840
can see here the client

764
00:33:22,840 --> 00:33:25,039
hello packets

765
00:33:25,039 --> 00:33:26,720
with what's sent

766
00:33:26,720 --> 00:33:29,120
by the client

767
00:33:29,120 --> 00:33:32,320
and it contains a list of all the cipher

768
00:33:32,320 --> 00:33:36,080
switches that the client supports

769
00:33:36,080 --> 00:33:39,760
and they are listed here

770
00:33:39,760 --> 00:33:42,640
and then the server will send a server

771
00:33:42,640 --> 00:33:45,039
hello packet

772
00:33:45,039 --> 00:33:47,919
with the selected cipher switcher

773
00:33:47,919 --> 00:33:51,360
and it will also send the public key or

774
00:33:51,360 --> 00:33:52,640
the certificate

775
00:33:52,640 --> 00:33:53,519
to

776
00:33:53,519 --> 00:33:54,640
the web

777
00:33:54,640 --> 00:33:58,960
to the web clients to my clients

778
00:33:59,519 --> 00:34:02,880
and then there is a key exchange

779
00:34:02,880 --> 00:34:05,120
the login page is displayed

780
00:34:05,120 --> 00:34:07,840
i type in my username and my passwords

781
00:34:07,840 --> 00:34:10,879
and all the information is encrypted

782
00:34:10,879 --> 00:34:11,918
now

783
00:34:11,918 --> 00:34:13,918
as i explained before we had a

784
00:34:13,918 --> 00:34:16,560
vulnerability in the rsa algorithm means

785
00:34:16,560 --> 00:34:18,320
that the close numbers

786
00:34:18,320 --> 00:34:20,320
the prime numbers are very close to each

787
00:34:20,320 --> 00:34:23,359
other i can now use my

788
00:34:23,359 --> 00:34:26,879
pen file which i created previously to

789
00:34:26,879 --> 00:34:29,520
decrypt all this information so i right

790
00:34:29,520 --> 00:34:30,399
click

791
00:34:30,399 --> 00:34:32,320
protocol preferences

792
00:34:32,320 --> 00:34:35,119
rsa list

793
00:34:35,119 --> 00:34:36,800
i select here

794
00:34:36,800 --> 00:34:41,679
the the ip address of my

795
00:34:41,679 --> 00:34:44,639
web server the port number

796
00:34:44,639 --> 00:34:45,918
and then

797
00:34:45,918 --> 00:34:49,040
this part is a key file and the key file

798
00:34:49,040 --> 00:34:52,639
is my recovered

799
00:34:54,639 --> 00:34:55,839
uh

800
00:34:55,839 --> 00:34:57,200
private key

801
00:34:57,200 --> 00:34:59,119
this one

802
00:34:59,119 --> 00:35:00,480
open

803
00:35:00,480 --> 00:35:01,440
okay

804
00:35:01,440 --> 00:35:04,560
and now my tls traffic is

805
00:35:04,560 --> 00:35:07,440
decrypted and you can you can now see

806
00:35:07,440 --> 00:35:10,480
the name and the password in

807
00:35:10,480 --> 00:35:12,640
clear texts

808
00:35:12,640 --> 00:35:14,880
so this is one of the vulnerabilities

809
00:35:14,880 --> 00:35:17,119
which currently exist in the rsa

810
00:35:17,119 --> 00:35:20,720
algorithm there are others as well

811
00:35:20,720 --> 00:35:23,920
but yeah during time constraints here we

812
00:35:23,920 --> 00:35:25,119
have only

813
00:35:25,119 --> 00:35:26,800
45 minutes

814
00:35:26,800 --> 00:35:27,760
so

815
00:35:27,760 --> 00:35:29,599
there are other as well and interesting

816
00:35:29,599 --> 00:35:30,400
as well

817
00:35:30,400 --> 00:35:33,520
but this gives you an idea that when the

818
00:35:33,520 --> 00:35:37,119
key material is not correctly generated

819
00:35:37,119 --> 00:35:39,200
that you have a vulnerability and the

820
00:35:39,200 --> 00:35:42,000
vulnerability in this case is that the

821
00:35:42,000 --> 00:35:44,560
private parts of the certificate can

822
00:35:44,560 --> 00:35:47,280
easily be calculated when you have only

823
00:35:47,280 --> 00:35:49,920
access to the public key and then you

824
00:35:49,920 --> 00:35:51,359
can decrypt

825
00:35:51,359 --> 00:35:53,680
all the

826
00:35:54,320 --> 00:35:56,079
tls

827
00:35:56,079 --> 00:35:57,440
packages

828
00:35:57,440 --> 00:35:58,400
now

829
00:35:58,400 --> 00:36:01,920
what can you do to avoid this

830
00:36:01,920 --> 00:36:04,000
that's my conclusion

831
00:36:04,000 --> 00:36:05,280
and

832
00:36:05,280 --> 00:36:10,839
don't use tls 1 1.1 and 1.3 anymore

833
00:36:10,839 --> 00:36:14,480
because in tls 1.3

834
00:36:14,480 --> 00:36:17,440
rsa is not supported

835
00:36:17,440 --> 00:36:21,599
because all of the known vulnerabilities

836
00:36:21,920 --> 00:36:23,359
in my case

837
00:36:23,359 --> 00:36:26,480
or in most cases the rsa algorithm is

838
00:36:26,480 --> 00:36:27,520
used

839
00:36:27,520 --> 00:36:29,680
for key exchange

840
00:36:29,680 --> 00:36:32,240
and this is now

841
00:36:32,240 --> 00:36:35,119
this is not good for the tls traffic so

842
00:36:35,119 --> 00:36:37,760
in that case it's better to use elliptic

843
00:36:37,760 --> 00:36:40,480
curve diff diffie-hellman

844
00:36:40,480 --> 00:36:42,000
it means that

845
00:36:42,000 --> 00:36:44,000
instead of using

846
00:36:44,000 --> 00:36:46,560
these these prime numbers in the key

847
00:36:46,560 --> 00:36:49,599
material that it will now use temporary

848
00:36:49,599 --> 00:36:52,240
key material and it will change during

849
00:36:52,240 --> 00:36:55,359
every session which is more secure

850
00:36:55,359 --> 00:36:56,160
but

851
00:36:56,160 --> 00:36:59,119
if your applications or your web server

852
00:36:59,119 --> 00:37:01,680
does not support uh

853
00:37:01,680 --> 00:37:03,839
other algorithms and you have to use

854
00:37:03,839 --> 00:37:06,960
resale then you have to be sure that the

855
00:37:06,960 --> 00:37:09,440
prime numbers are very large enough

856
00:37:09,440 --> 00:37:11,520
because if they are very large

857
00:37:11,520 --> 00:37:14,720
factorization is almost im

858
00:37:14,720 --> 00:37:16,400
not possible

859
00:37:16,400 --> 00:37:17,200
and

860
00:37:17,200 --> 00:37:19,119
make sure that the prime numbers are

861
00:37:19,119 --> 00:37:20,079
random

862
00:37:20,079 --> 00:37:22,160
and this is the most difficult part

863
00:37:22,160 --> 00:37:23,920
because you have to trust your random

864
00:37:23,920 --> 00:37:27,119
number generator and you do not know

865
00:37:27,119 --> 00:37:30,800
upfront which numbers are generated so

866
00:37:30,800 --> 00:37:31,920
this is

867
00:37:31,920 --> 00:37:33,280
maybe some

868
00:37:33,280 --> 00:37:36,560
uh food some thought for developers

869
00:37:36,560 --> 00:37:40,240
to to keep in mind if my tool or your

870
00:37:40,240 --> 00:37:41,599
tool use

871
00:37:41,599 --> 00:37:44,160
need to generate prime numbers

872
00:37:44,160 --> 00:37:45,599
that

873
00:37:45,599 --> 00:37:50,040
they must be randomly enough

874
00:37:50,960 --> 00:37:53,440
okay

875
00:37:53,680 --> 00:37:56,079
or there may be any questions thank you

876
00:37:56,079 --> 00:37:58,480
very much for your talk it was a really

877
00:37:58,480 --> 00:37:59,920
interesting

878
00:37:59,920 --> 00:38:01,359
study

879
00:38:01,359 --> 00:38:05,078
is there any question

880
00:38:08,079 --> 00:38:10,160
i haven't seen anyone popping up about

881
00:38:10,160 --> 00:38:11,359
the um

882
00:38:11,359 --> 00:38:13,520
as we have you know time um i've got a

883
00:38:13,520 --> 00:38:16,400
couple of questions actually for video

884
00:38:16,400 --> 00:38:18,079
yes so first of all you know the um

885
00:38:18,079 --> 00:38:20,000
really great presentations i appreciate

886
00:38:20,000 --> 00:38:22,240
you know your time today that was super

887
00:38:22,240 --> 00:38:24,160
cool you know what you're showing here

888
00:38:24,160 --> 00:38:25,119
so

889
00:38:25,119 --> 00:38:27,520
what you were talking about the um

890
00:38:27,520 --> 00:38:29,599
that you need the two prank numbers to

891
00:38:29,599 --> 00:38:32,160
be close enough so i wonder if there is

892
00:38:32,160 --> 00:38:34,079
any actual you know quantitative value

893
00:38:34,079 --> 00:38:36,560
you know for that close enough right

894
00:38:36,560 --> 00:38:38,400
because i my understanding if you know

895
00:38:38,400 --> 00:38:40,079
the if they are not close enough you

896
00:38:40,079 --> 00:38:42,000
know your two is going to take longer to

897
00:38:42,000 --> 00:38:45,599
execute or is this a specific value

898
00:38:45,599 --> 00:38:47,520
where you know that

899
00:38:47,520 --> 00:38:50,079
proximity you know stop working

900
00:38:50,079 --> 00:38:50,880
yeah

901
00:38:50,880 --> 00:38:51,839
um

902
00:38:51,839 --> 00:38:53,680
when you generate prime numbers they

903
00:38:53,680 --> 00:38:56,079
have to be not close enough to each

904
00:38:56,079 --> 00:38:59,680
other but they you have to be far enough

905
00:38:59,680 --> 00:39:00,560
uh

906
00:39:00,560 --> 00:39:03,119
far away from each other so let's say if

907
00:39:03,119 --> 00:39:05,760
you ask on people in a room give me two

908
00:39:05,760 --> 00:39:09,760
numbers one person will say one and 99

909
00:39:09,760 --> 00:39:12,079
and one per another person will say

910
00:39:12,079 --> 00:39:14,640
four and five so in that case when the

911
00:39:14,640 --> 00:39:17,280
prime numbers are close to each other

912
00:39:17,280 --> 00:39:19,040
you have the vulnerability

913
00:39:19,040 --> 00:39:21,280
and you can use factorization to

914
00:39:21,280 --> 00:39:23,839
calculate the private part so it's

915
00:39:23,839 --> 00:39:28,320
important that the prime numbers are

916
00:39:28,320 --> 00:39:32,000
far from each other

917
00:39:32,079 --> 00:39:34,400
because when they are close

918
00:39:34,400 --> 00:39:36,720
then you have a problem

919
00:39:36,720 --> 00:39:37,839
cool

920
00:39:37,839 --> 00:39:39,839
and how you can see the

921
00:39:39,839 --> 00:39:42,480
scanning the internet you see this is a

922
00:39:42,480 --> 00:39:43,280
um

923
00:39:43,280 --> 00:39:45,680
this problem has been seen in a while in

924
00:39:45,680 --> 00:39:49,119
the in the past have you said about it

925
00:39:49,119 --> 00:39:50,400
yeah um

926
00:39:50,400 --> 00:39:51,920
that is basically for another

927
00:39:51,920 --> 00:39:54,800
presentation but i'm

928
00:39:54,800 --> 00:39:56,720
i'm i'm

929
00:39:56,720 --> 00:39:59,680
involved into a project which is called

930
00:39:59,680 --> 00:40:01,280
uh

931
00:40:01,280 --> 00:40:03,359
sonar as a zl

932
00:40:03,359 --> 00:40:06,800
this is part of uh rapidly

933
00:40:06,800 --> 00:40:07,839
repeated

934
00:40:07,839 --> 00:40:10,560
rapid seven the developers of metasploit

935
00:40:10,560 --> 00:40:11,920
and other tools

936
00:40:11,920 --> 00:40:14,400
so they they have some certificates

937
00:40:14,400 --> 00:40:16,800
available and i'm currently running

938
00:40:16,800 --> 00:40:19,200
another project to calculate the

939
00:40:19,200 --> 00:40:20,800
greatest common divider between

940
00:40:20,800 --> 00:40:22,400
certificates from

941
00:40:22,400 --> 00:40:25,520
the internet and when there is a common

942
00:40:25,520 --> 00:40:28,880
divider between two certificates again

943
00:40:28,880 --> 00:40:31,839
the private part can also be calculated

944
00:40:31,839 --> 00:40:33,920
but that's something that we that i have

945
00:40:33,920 --> 00:40:36,079
to do in another presentation because it

946
00:40:36,079 --> 00:40:40,640
meets at at least one hour or more

947
00:40:42,560 --> 00:40:45,279
very interesting

948
00:40:48,240 --> 00:40:50,319
awesome so if there are no more

949
00:40:50,319 --> 00:40:51,680
questions so

950
00:40:51,680 --> 00:40:54,160
thanks johan for for your presentation

951
00:40:54,160 --> 00:40:56,240
it was great i really appreciate you

952
00:40:56,240 --> 00:40:58,240
know your your time today

953
00:40:58,240 --> 00:41:02,640
and now we have a break of 15 minutes so

954
00:41:02,640 --> 00:41:04,319
see you all in

955
00:41:04,319 --> 00:41:07,359
in if you think okay

956
00:41:07,359 --> 00:41:09,520
thank you for listening to me i hope it

957
00:41:09,520 --> 00:41:12,079
was interested interesting

958
00:41:12,079 --> 00:41:14,960
and uh yeah it's it's something that we

959
00:41:14,960 --> 00:41:16,960
as security professional do not think

960
00:41:16,960 --> 00:41:17,920
about

961
00:41:17,920 --> 00:41:20,720
but um when key material needs to be

962
00:41:20,720 --> 00:41:23,920
generated even for a medical device or

963
00:41:23,920 --> 00:41:24,800
from

964
00:41:24,800 --> 00:41:25,520
a

965
00:41:25,520 --> 00:41:28,560
an iot device where the key space is

966
00:41:28,560 --> 00:41:31,280
very limited keep in mind that when

967
00:41:31,280 --> 00:41:33,520
generating prime numbers that they are

968
00:41:33,520 --> 00:41:36,400
very large enough and randomly enough

969
00:41:36,400 --> 00:41:39,640
thank you

