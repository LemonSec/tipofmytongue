1
00:00:03,040 --> 00:00:04,880
they have great experience a ton of

2
00:00:04,880 --> 00:00:07,520
experience in you know contesting

3
00:00:07,520 --> 00:00:09,519
ethical lacking and

4
00:00:09,519 --> 00:00:11,200
they're gonna go through

5
00:00:11,200 --> 00:00:14,639
this talk about the webview security as

6
00:00:14,639 --> 00:00:15,839
you've already seen from the slides and

7
00:00:15,839 --> 00:00:17,840
especially we'll talk about

8
00:00:17,840 --> 00:00:20,560
the journey behind the the

9
00:00:20,560 --> 00:00:22,000
webview cve

10
00:00:22,000 --> 00:00:24,080
uh that they discovered and reported to

11
00:00:24,080 --> 00:00:25,199
android

12
00:00:25,199 --> 00:00:27,119
um

13
00:00:27,119 --> 00:00:30,480
guys the floor is yours

14
00:00:30,480 --> 00:00:32,880
thank you david

15
00:00:32,880 --> 00:00:34,239
first of all i would like to thank you

16
00:00:34,239 --> 00:00:36,320
all for joining this session uh we'll be

17
00:00:36,320 --> 00:00:38,559
talking about securing venues and the

18
00:00:38,559 --> 00:00:42,239
story behind cbe2021-1136

19
00:00:42,239 --> 00:00:43,360
i'll be walking you through this

20
00:00:43,360 --> 00:00:45,840
presentation with my friend and host

21
00:00:45,840 --> 00:00:48,239
speaker ingard mohammed

22
00:00:48,239 --> 00:00:49,840
so let me start this with quickly

23
00:00:49,840 --> 00:00:52,000
introducing ourselves

24
00:00:52,000 --> 00:00:54,000
my name is chef sahani i work as a

25
00:00:54,000 --> 00:00:56,559
senior associate with jp morgan

26
00:00:56,559 --> 00:00:57,920
i am one of the contributors in

27
00:00:57,920 --> 00:01:00,079
overwatch msd and also the author of

28
00:01:00,079 --> 00:01:01,920
degree matter of securing android

29
00:01:01,920 --> 00:01:04,559
applications

30
00:01:05,600 --> 00:01:06,880
hi thank you

31
00:01:06,880 --> 00:01:09,920
hi guys my name

32
00:01:10,960 --> 00:01:12,479
grab as a is

33
00:01:12,479 --> 00:01:14,799
engineer and i'm leading the

34
00:01:14,799 --> 00:01:17,360
application security initiatives for

35
00:01:17,360 --> 00:01:19,759
various engineering teams here at craft

36
00:01:19,759 --> 00:01:20,970
what do you see

37
00:01:20,970 --> 00:01:22,320
[Music]

38
00:01:22,320 --> 00:01:24,960
so before we go ahead a quick disclaimer

39
00:01:24,960 --> 00:01:27,600
any opinions expressed over here solely

40
00:01:27,600 --> 00:01:30,079
belongs to us and are nowhere related to

41
00:01:30,079 --> 00:01:31,840
our current or

42
00:01:31,840 --> 00:01:34,560
past employees

43
00:01:34,560 --> 00:01:36,960
so this would be the agenda for today's

44
00:01:36,960 --> 00:01:39,119
session we'll be starting this with

45
00:01:39,119 --> 00:01:41,680
discussing cve's interviews

46
00:01:41,680 --> 00:01:43,520
we'll talk about how exactly the views

47
00:01:43,520 --> 00:01:44,320
work

48
00:01:44,320 --> 00:01:46,640
once we have established the foundations

49
00:01:46,640 --> 00:01:50,720
we'll talk about the timeline on cbe2021

50
00:01:50,720 --> 00:01:52,960
wherein we'll discuss about the overall

51
00:01:52,960 --> 00:01:55,920
journey that uh that we went through

52
00:01:55,920 --> 00:01:57,840
and the communication we had with google

53
00:01:57,840 --> 00:02:00,560
security team

54
00:02:00,560 --> 00:02:02,000
next we'll talk about the in-depth

55
00:02:02,000 --> 00:02:04,079
analysis that we performed in order to

56
00:02:04,079 --> 00:02:05,840
claim the cbe

57
00:02:05,840 --> 00:02:07,439
last but not the least we'll talk about

58
00:02:07,439 --> 00:02:09,360
common devi related security issues in

59
00:02:09,360 --> 00:02:10,878
the way where we could prevent those

60
00:02:10,878 --> 00:02:12,879
issues in order to make our apps secure

61
00:02:12,879 --> 00:02:15,359
and globus

62
00:02:15,440 --> 00:02:16,400
so

63
00:02:16,400 --> 00:02:18,560
let me start this with introducing cvs

64
00:02:18,560 --> 00:02:21,840
and webview cve is an economy used for

65
00:02:21,840 --> 00:02:24,239
common vulnerability exposure

66
00:02:24,239 --> 00:02:26,080
it's actually a unique identifier that

67
00:02:26,080 --> 00:02:28,319
is associated with a vulnerability in a

68
00:02:28,319 --> 00:02:30,720
publicly available software package i

69
00:02:30,720 --> 00:02:33,440
hope uh and i believe most of you guys

70
00:02:33,440 --> 00:02:36,239
would be aware of the term cv though

71
00:02:36,239 --> 00:02:38,640
webview might be a alien term copy of

72
00:02:38,640 --> 00:02:39,920
the folks in the audience that is why

73
00:02:39,920 --> 00:02:41,680
we'll just establish the foundations

74
00:02:41,680 --> 00:02:43,519
first and then we'll jump to the

75
00:02:43,519 --> 00:02:47,280
analysis on on the chromium cb

76
00:02:47,280 --> 00:02:49,040
so cv

77
00:02:49,040 --> 00:02:49,440
one 2021

78
00:02:49,440 --> 00:02:51,519
six is a unique identifier that is

79
00:02:51,519 --> 00:02:53,120
associated with the vulnerability in

80
00:02:53,120 --> 00:02:54,560
android web use

81
00:02:54,560 --> 00:02:56,239
so during our security research we

82
00:02:56,239 --> 00:02:58,080
observed that a lot of mobile

83
00:02:58,080 --> 00:03:00,400
applications were actually leaking users

84
00:03:00,400 --> 00:03:02,800
or tokens to third parties

85
00:03:02,800 --> 00:03:04,800
so when we dig deeper into it we found

86
00:03:04,800 --> 00:03:06,400
out that this was happening due to a

87
00:03:06,400 --> 00:03:08,800
flaw in android web implementation

88
00:03:08,800 --> 00:03:11,120
we'll talk about this in in detail in

89
00:03:11,120 --> 00:03:13,040
the upcoming slides so which was just to

90
00:03:13,040 --> 00:03:14,879
introduce

91
00:03:14,879 --> 00:03:16,800
and talk about on a high level what the

92
00:03:16,800 --> 00:03:19,760
cd was all about

93
00:03:19,760 --> 00:03:22,159
so now let's talk about web use so

94
00:03:22,159 --> 00:03:23,760
webview is one of the mobile app

95
00:03:23,760 --> 00:03:26,480
components that allows mobile developers

96
00:03:26,480 --> 00:03:29,040
to load web content directly into their

97
00:03:29,040 --> 00:03:32,159
mobile apps so if you see a image over

98
00:03:32,159 --> 00:03:35,120
here i have provided the url and then

99
00:03:35,120 --> 00:03:37,599
the corresponding web content for that

100
00:03:37,599 --> 00:03:39,680
particular url is loaded in the mobile

101
00:03:39,680 --> 00:03:40,799
app itself

102
00:03:40,799 --> 00:03:42,319
so you could consider it to be a

103
00:03:42,319 --> 00:03:46,480
dedicated web browser of the mobile app

104
00:03:46,480 --> 00:03:48,239
since they support the concept of code

105
00:03:48,239 --> 00:03:50,879
reuse as a mobile developer doesn't need

106
00:03:50,879 --> 00:03:52,879
to rewrite the code from scratch and can

107
00:03:52,879 --> 00:03:54,959
just use the same

108
00:03:54,959 --> 00:03:57,760
the same code that is already available

109
00:03:57,760 --> 00:03:59,439
it supports the concept of food reuse

110
00:03:59,439 --> 00:04:01,519
and that is why it's extensively used in

111
00:04:01,519 --> 00:04:03,040
the current era of mobile application

112
00:04:03,040 --> 00:04:05,360
development

113
00:04:05,360 --> 00:04:07,040
so now we know what a webview is let's

114
00:04:07,040 --> 00:04:08,879
see how exactly it works so as i

115
00:04:08,879 --> 00:04:10,560
mentioned we just need to provide

116
00:04:10,560 --> 00:04:12,640
the url that is to be loaded in the

117
00:04:12,640 --> 00:04:15,040
webview and then the the corresponding

118
00:04:15,040 --> 00:04:16,560
web content is

119
00:04:16,560 --> 00:04:18,880
loaded as a part of our mobile app

120
00:04:18,880 --> 00:04:21,199
so if you see a code snippet over here

121
00:04:21,199 --> 00:04:24,000
we have a load url api so basically this

122
00:04:24,000 --> 00:04:27,759
api endpoint take uh this api takes a

123
00:04:27,759 --> 00:04:31,040
url and the corresponding web content

124
00:04:31,040 --> 00:04:32,800
is being loaded at the at the mobile

125
00:04:32,800 --> 00:04:35,199
site so what happens at the backend is

126
00:04:35,199 --> 00:04:37,840
when we are using this slowly or api

127
00:04:37,840 --> 00:04:40,160
which is an android api

128
00:04:40,160 --> 00:04:42,720
and we have provided a url so the front

129
00:04:42,720 --> 00:04:45,080
end would make a network request to

130
00:04:45,080 --> 00:04:47,199
www.google.com and the corresponding web

131
00:04:47,199 --> 00:04:50,080
content would be received by the front

132
00:04:50,080 --> 00:04:52,160
end back from the google google google

133
00:04:52,160 --> 00:04:54,479
servers and once it reaches at the front

134
00:04:54,479 --> 00:04:56,080
end the corresponding that content is

135
00:04:56,080 --> 00:04:59,280
rendered in the mobile app individually

136
00:04:59,280 --> 00:05:02,000
so this was the simple way or i would

137
00:05:02,000 --> 00:05:04,080
say a normal normal node whenever we are

138
00:05:04,080 --> 00:05:06,000
using w's

139
00:05:06,000 --> 00:05:07,759
what happens when we want to load a

140
00:05:07,759 --> 00:05:09,600
content that is protected through

141
00:05:09,600 --> 00:05:12,240
authentication for example let's say we

142
00:05:12,240 --> 00:05:14,720
want to load users profile page

143
00:05:14,720 --> 00:05:17,039
again backend won't release uses profile

144
00:05:17,039 --> 00:05:18,960
data antenna unless we are passing the

145
00:05:18,960 --> 00:05:20,400
auth data

146
00:05:20,400 --> 00:05:22,479
since it is a restricted content

147
00:05:22,479 --> 00:05:24,639
protected content in such cases we would

148
00:05:24,639 --> 00:05:27,440
need to pass the auth data in order to

149
00:05:27,440 --> 00:05:29,039
let back-end release the protected

150
00:05:29,039 --> 00:05:31,840
resource so if you see over here we have

151
00:05:31,840 --> 00:05:34,400
an overloaded version of load url api

152
00:05:34,400 --> 00:05:36,320
where an apart from providing the url

153
00:05:36,320 --> 00:05:39,199
that is to be loaded we also pass a map

154
00:05:39,199 --> 00:05:41,199
so basically headers is a map which is

155
00:05:41,199 --> 00:05:43,520
having key value pairs where p is the

156
00:05:43,520 --> 00:05:45,840
http header name the value is the

157
00:05:45,840 --> 00:05:48,240
corresponding http header value

158
00:05:48,240 --> 00:05:49,919
and what happens is

159
00:05:49,919 --> 00:05:53,440
when this this api is used the front end

160
00:05:53,440 --> 00:05:55,280
would make a

161
00:05:55,280 --> 00:05:57,440
http call to the backend and this

162
00:05:57,440 --> 00:05:59,440
request the http request would have all

163
00:05:59,440 --> 00:06:02,080
these headers attached to the request so

164
00:06:02,080 --> 00:06:04,160
now if you see since this is a protected

165
00:06:04,160 --> 00:06:06,160
request what i have done is i have

166
00:06:06,160 --> 00:06:08,319
passed the authorization header which

167
00:06:08,319 --> 00:06:11,039
would have my authentication token

168
00:06:11,039 --> 00:06:12,720
and now backlink would entertain this

169
00:06:12,720 --> 00:06:14,240
request and would release the protected

170
00:06:14,240 --> 00:06:16,240
resource once it reaches at the front

171
00:06:16,240 --> 00:06:18,000
end it would be rendered

172
00:06:18,000 --> 00:06:18,800
so

173
00:06:18,800 --> 00:06:21,600
if i just sum it up we have two flavors

174
00:06:21,600 --> 00:06:24,800
of load url api one is a normal load

175
00:06:24,800 --> 00:06:26,800
wherein we just provide the url and the

176
00:06:26,800 --> 00:06:28,800
corresponding web content is loaded the

177
00:06:28,800 --> 00:06:31,360
other one is an overloaded version of

178
00:06:31,360 --> 00:06:34,560
load url wherein we can leverage the

179
00:06:34,560 --> 00:06:37,199
same to load an authenticated content

180
00:06:37,199 --> 00:06:40,319
or a protected content

181
00:06:40,400 --> 00:06:42,240
so now we know what a webview is and how

182
00:06:42,240 --> 00:06:44,160
exactly it works now let's talk about

183
00:06:44,160 --> 00:06:45,600
details

184
00:06:45,600 --> 00:06:49,360
so deep link is is is kind of a uri

185
00:06:49,360 --> 00:06:52,160
which helps developers to improve the

186
00:06:52,160 --> 00:06:54,479
user experience so by uri and uniform

187
00:06:54,479 --> 00:06:56,639
resource identifier let's understand

188
00:06:56,639 --> 00:06:58,319
this with help of an example

189
00:06:58,319 --> 00:06:59,919
have you ever wondered why you're

190
00:06:59,919 --> 00:07:02,000
browsing web content in the mobile

191
00:07:02,000 --> 00:07:04,000
browser and you click on a link and it

192
00:07:04,000 --> 00:07:06,160
opens a specific content in the mobile

193
00:07:06,160 --> 00:07:08,319
app that is installed on your device

194
00:07:08,319 --> 00:07:10,240
this happens because of deepness if you

195
00:07:10,240 --> 00:07:12,960
see an image over here while googling i

196
00:07:12,960 --> 00:07:14,880
i searched for a particular

197
00:07:14,880 --> 00:07:17,440
particular product and then i click on a

198
00:07:17,440 --> 00:07:19,520
link and it opens that particular

199
00:07:19,520 --> 00:07:21,039
product in the mobile app that is

200
00:07:21,039 --> 00:07:23,680
installed on my my device so all this

201
00:07:23,680 --> 00:07:25,840
happens because of deep links so deep

202
00:07:25,840 --> 00:07:28,319
link is nothing but a uri a uniform

203
00:07:28,319 --> 00:07:30,639
business identifier which opens a

204
00:07:30,639 --> 00:07:32,880
specific content in the mobile apps and

205
00:07:32,880 --> 00:07:34,240
improves the user experience

206
00:07:34,240 --> 00:07:36,639
significantly

207
00:07:36,639 --> 00:07:39,039
so now that we know what our webview is

208
00:07:39,039 --> 00:07:42,000
and how exactly that views work and

209
00:07:42,000 --> 00:07:43,120
a brief on

210
00:07:43,120 --> 00:07:45,360
deep links now let's talk about

211
00:07:45,360 --> 00:07:49,199
the journey on cv2021 201136 so all

212
00:07:49,199 --> 00:07:51,039
these things that we discussed would

213
00:07:51,039 --> 00:07:52,479
help you understand

214
00:07:52,479 --> 00:07:54,720
the analysis and the journey in a better

215
00:07:54,720 --> 00:07:58,960
way my co-speaker embard would be taking

216
00:08:03,199 --> 00:08:05,039
thank you for briefing the audience with

217
00:08:05,039 --> 00:08:08,800
the basics of you and how old it works

218
00:08:08,800 --> 00:08:11,280
so from here onwards i'll be

219
00:08:11,280 --> 00:08:13,280
can be talking about a journey towards

220
00:08:13,280 --> 00:08:14,240
our

221
00:08:14,240 --> 00:08:18,919
cv 2021 21136

222
00:08:21,919 --> 00:08:24,400
so first i would like to talk about it

223
00:08:24,400 --> 00:08:26,479
you know basic example

224
00:08:26,479 --> 00:08:30,240
of of an oauth so in a standard or use

225
00:08:30,240 --> 00:08:32,958
case uh where we have uh

226
00:08:32,958 --> 00:08:35,120
uh this specific slide here we are

227
00:08:35,120 --> 00:08:37,200
talking about the standard

228
00:08:37,200 --> 00:08:39,360
use case in the context of mobile

229
00:08:39,360 --> 00:08:40,399
application

230
00:08:40,399 --> 00:08:43,440
so in in this context we have a mobile

231
00:08:43,440 --> 00:08:46,000
application we have an identity service

232
00:08:46,000 --> 00:08:48,480
and we have a third party service so

233
00:08:48,480 --> 00:08:50,959
let's assume our mobile application

234
00:08:50,959 --> 00:08:52,640
integrates with a lot of third-party

235
00:08:52,640 --> 00:08:53,519
service

236
00:08:53,519 --> 00:08:56,160
with the help of all so as soon as you

237
00:08:56,160 --> 00:08:58,880
click on the tile on the third party

238
00:08:58,880 --> 00:09:01,839
tile on the uh on the mobile application

239
00:09:01,839 --> 00:09:03,839
the first call will go to the of

240
00:09:03,839 --> 00:09:07,120
identity service with the client id as

241
00:09:07,120 --> 00:09:09,920
well as redirect url in this specific

242
00:09:09,920 --> 00:09:10,959
call

243
00:09:10,959 --> 00:09:14,080
the user's authorization token will also

244
00:09:14,080 --> 00:09:16,320
be sent in the header since it is an

245
00:09:16,320 --> 00:09:19,440
authenticated call so now what the

246
00:09:19,440 --> 00:09:21,680
identity service will do is verify the

247
00:09:21,680 --> 00:09:24,399
odd token as well as it will match the

248
00:09:24,399 --> 00:09:28,240
client id uh as well as the redirect url

249
00:09:28,240 --> 00:09:32,160
and generate a id token for for the user

250
00:09:32,160 --> 00:09:35,279
and and it will give give it as a 302

251
00:09:35,279 --> 00:09:38,320
response to the mobile application

252
00:09:38,320 --> 00:09:40,800
now what the mobile application will do

253
00:09:40,800 --> 00:09:43,920
it will redirect to third party url

254
00:09:43,920 --> 00:09:46,399
along with the id token to the third

255
00:09:46,399 --> 00:09:50,000
party service after this a couple of uh

256
00:09:50,000 --> 00:09:52,399
after this a couple of uh requests

257
00:09:52,399 --> 00:09:54,959
happens where the user gives a

258
00:09:54,959 --> 00:09:57,600
consent uh to share its data with the

259
00:09:57,600 --> 00:10:00,399
third party and finally the user in the

260
00:10:00,399 --> 00:10:02,079
mobile application can access the third

261
00:10:02,079 --> 00:10:03,519
party services

262
00:10:03,519 --> 00:10:06,959
so this is a basic or use case example

263
00:10:06,959 --> 00:10:09,519
now let's want to understand what was a

264
00:10:09,519 --> 00:10:12,480
bug at a very high level so

265
00:10:12,480 --> 00:10:15,600
if you see ended step at this step where

266
00:10:15,600 --> 00:10:18,480
the user has now got the id token and he

267
00:10:18,480 --> 00:10:20,720
is being redirected to the third party

268
00:10:20,720 --> 00:10:23,839
services with the redirect url and the

269
00:10:23,839 --> 00:10:27,200
id token so in this specific request

270
00:10:27,200 --> 00:10:29,680
where we are having an additional adder

271
00:10:29,680 --> 00:10:32,560
the users authorization token was also

272
00:10:32,560 --> 00:10:35,279
being forwarded to third party service

273
00:10:35,279 --> 00:10:37,440
which means that the user session token

274
00:10:37,440 --> 00:10:38,959
which belongs to

275
00:10:38,959 --> 00:10:42,480
the uh the this provider is being shared

276
00:10:42,480 --> 00:10:45,120
with the third party so this was the

277
00:10:45,120 --> 00:10:47,200
this was an observation at a very high

278
00:10:47,200 --> 00:10:48,160
level

279
00:10:48,160 --> 00:10:49,040
uh

280
00:10:49,040 --> 00:10:49,760
what

281
00:10:49,760 --> 00:10:52,480
during the during you know couple of

282
00:10:52,480 --> 00:10:56,240
uh a couple of use cases uh reviewing

283
00:10:56,240 --> 00:10:58,880
couple of use cases and after uh

284
00:10:58,880 --> 00:11:00,880
replicating this issue what we have

285
00:11:00,880 --> 00:11:03,440
concluded in our uh you know initial

286
00:11:03,440 --> 00:11:05,760
observation was that so

287
00:11:05,760 --> 00:11:07,440
uh if you are an android mobile

288
00:11:07,440 --> 00:11:09,920
developer then you would understand that

289
00:11:09,920 --> 00:11:11,200
when you are doing when you are

290
00:11:11,200 --> 00:11:12,720
implementing a web view and you are

291
00:11:12,720 --> 00:11:15,040
trying to use load url

292
00:11:15,040 --> 00:11:17,600
and you will of course use the uh pass

293
00:11:17,600 --> 00:11:20,399
the url inside the load url which you

294
00:11:20,399 --> 00:11:23,279
want to load inside to help you and

295
00:11:23,279 --> 00:11:25,920
in a case where we saw an example where

296
00:11:25,920 --> 00:11:28,399
we are talking about authenticated load

297
00:11:28,399 --> 00:11:30,959
we would pass additional http header

298
00:11:30,959 --> 00:11:34,000
which will be the authorization header

299
00:11:34,000 --> 00:11:35,839
and in the authorization header you will

300
00:11:35,839 --> 00:11:39,200
pass the session token so when you are

301
00:11:39,200 --> 00:11:41,680
doing an authenticated loadings in such

302
00:11:41,680 --> 00:11:44,560
a case then it sends the additional

303
00:11:44,560 --> 00:11:46,640
header to any other request trigger in

304
00:11:46,640 --> 00:11:48,000
the process of

305
00:11:48,000 --> 00:11:51,040
loading the url which is

306
00:11:51,040 --> 00:11:52,959
such as redirects so

307
00:11:52,959 --> 00:11:55,279
as we have seen in the previous example

308
00:11:55,279 --> 00:11:57,279
even if it is a redirect

309
00:11:57,279 --> 00:11:58,480
the

310
00:11:58,480 --> 00:12:01,440
origin even if it's a redirect and the

311
00:12:01,440 --> 00:12:03,360
origin is different the user's

312
00:12:03,360 --> 00:12:05,600
authorization token was me exposed to

313
00:12:05,600 --> 00:12:08,399
the third party so this was an initial

314
00:12:08,399 --> 00:12:10,880
observation now in this slide let's talk

315
00:12:10,880 --> 00:12:11,760
about

316
00:12:11,760 --> 00:12:12,800
how

317
00:12:12,800 --> 00:12:14,880
let's talk about the timeline how we

318
00:12:14,880 --> 00:12:17,680
started doing our research and how it

319
00:12:17,680 --> 00:12:20,240
ended up in an uh cve

320
00:12:20,240 --> 00:12:21,920
so

321
00:12:21,920 --> 00:12:26,079
uh in august 2019 we uh while doing our

322
00:12:26,079 --> 00:12:28,639
you know regular day uh regular research

323
00:12:28,639 --> 00:12:30,800
we observe this behavior and we

324
00:12:30,800 --> 00:12:32,880
suspected that there to be there could

325
00:12:32,880 --> 00:12:34,560
be an issue in the

326
00:12:34,560 --> 00:12:37,680
uh chromium so in december 2019 we

327
00:12:37,680 --> 00:12:39,519
started to doing a deep down

328
00:12:39,519 --> 00:12:41,680
investigation about this issue we

329
00:12:41,680 --> 00:12:44,320
developed our own uh android application

330
00:12:44,320 --> 00:12:47,360
we had our backend application uh

331
00:12:47,360 --> 00:12:49,519
written in python and we wanted to

332
00:12:49,519 --> 00:12:51,360
replicate this issue

333
00:12:51,360 --> 00:12:54,720
and we submitted uh do our an entire

334
00:12:54,720 --> 00:12:57,360
analysis to google

335
00:12:57,360 --> 00:12:59,680
in january 2020 we got a response from

336
00:12:59,680 --> 00:13:02,560
google that this is an intended behavior

337
00:13:02,560 --> 00:13:05,120
and they wanted more analysis

338
00:13:05,120 --> 00:13:07,279
to do some more analysis

339
00:13:07,279 --> 00:13:11,279
and finally in fact google accept 2020

340
00:13:11,279 --> 00:13:13,760
google accepted and they said they uh

341
00:13:13,760 --> 00:13:16,079
require more time to fix and because of

342
00:13:16,079 --> 00:13:20,320
compatibility issue and in november

343
00:13:20,320 --> 00:13:22,959
and finally in november the official fix

344
00:13:22,959 --> 00:13:26,160
was released in chromium 88

345
00:13:26,160 --> 00:13:29,040
so this was a timeline uh of how we got

346
00:13:29,040 --> 00:13:30,639
our cv

347
00:13:30,639 --> 00:13:33,279
now let's let's uh get into uh a

348
00:13:33,279 --> 00:13:36,240
in-depth analysis of the actual issue so

349
00:13:36,240 --> 00:13:38,480
here towards the right what we are

350
00:13:38,480 --> 00:13:39,760
seeing is a

351
00:13:39,760 --> 00:13:41,600
uh demo application which is simply

352
00:13:41,600 --> 00:13:43,440
loading uh

353
00:13:43,440 --> 00:13:45,120
a webview

354
00:13:45,120 --> 00:13:46,839
which is simply loading a url

355
00:13:46,839 --> 00:13:49,199
scratchpatch.org inside and review

356
00:13:49,199 --> 00:13:51,600
towards the left the port snippet here

357
00:13:51,600 --> 00:13:54,480
what we we are able to see is that

358
00:13:54,480 --> 00:13:57,360
uh an android webview component as you

359
00:13:57,360 --> 00:14:00,639
can see uh we are doing a load url

360
00:14:00,639 --> 00:14:03,040
load url loading the url over here as

361
00:14:03,040 --> 00:14:05,040
well as we are setting the additional

362
00:14:05,040 --> 00:14:08,800
http header s the authorization header

363
00:14:08,800 --> 00:14:11,600
and then uh once the url is loaded the

364
00:14:11,600 --> 00:14:14,240
headers will be sent across so if you if

365
00:14:14,240 --> 00:14:16,560
you want to uh have a look at this issue

366
00:14:16,560 --> 00:14:18,320
you can uh

367
00:14:18,320 --> 00:14:21,120
always uh take the snippet from this

368
00:14:21,120 --> 00:14:23,440
early given over here so this was our

369
00:14:23,440 --> 00:14:25,680
front fronted application

370
00:14:25,680 --> 00:14:27,600
let's look at a package so backend is a

371
00:14:27,600 --> 00:14:29,519
very simple code snippet where you are

372
00:14:29,519 --> 00:14:33,519
just trying to do a 302 redirect so

373
00:14:33,519 --> 00:14:37,519
irrespective of any request received uh

374
00:14:37,519 --> 00:14:40,560
in in this web server it will do a

375
00:14:40,560 --> 00:14:44,599
redirect to scratchpatch.org

376
00:14:46,560 --> 00:14:48,800
so after uh you know after

377
00:14:48,800 --> 00:14:50,079
when you actually run this demo

378
00:14:50,079 --> 00:14:52,720
application though and try to intercept

379
00:14:52,720 --> 00:14:54,800
the traffic this was the initial

380
00:14:54,800 --> 00:14:57,040
observation that as you can see the

381
00:14:57,040 --> 00:14:59,839
authorization header which we have said

382
00:14:59,839 --> 00:15:01,920
if in the initial request while we were

383
00:15:01,920 --> 00:15:03,040
loading the

384
00:15:03,040 --> 00:15:04,880
uh

385
00:15:04,880 --> 00:15:08,040
url is being actually forwarded to

386
00:15:08,040 --> 00:15:09,760
scratchpatch.org

387
00:15:09,760 --> 00:15:11,600
so now that we have seen a couple of

388
00:15:11,600 --> 00:15:14,240
screenshots of how exactly has happened

389
00:15:14,240 --> 00:15:17,760
we have recorded a demo uh where we are

390
00:15:17,760 --> 00:15:19,760
uh trying actually trying to replicate

391
00:15:19,760 --> 00:15:22,880
this specific issue having our own uh

392
00:15:22,880 --> 00:15:25,760
you know uh android front end as well as

393
00:15:25,760 --> 00:15:26,480
the

394
00:15:26,480 --> 00:15:29,120
uh python back-end

395
00:15:29,120 --> 00:15:30,639
let me try to

396
00:15:30,639 --> 00:15:32,959
play that for you so

397
00:15:32,959 --> 00:15:35,759
towards the right what you can see is uh

398
00:15:35,759 --> 00:15:37,700
is basically uh

399
00:15:37,700 --> 00:15:39,120
[Music]

400
00:15:39,120 --> 00:15:40,800
towards the right what you can see is

401
00:15:40,800 --> 00:15:43,759
basically uh uh our android code snippet

402
00:15:43,759 --> 00:15:45,759
which is running on four uh android

403
00:15:45,759 --> 00:15:47,120
application which is running on the

404
00:15:47,120 --> 00:15:49,600
android emulator and this is a http

405
00:15:49,600 --> 00:15:51,759
proxy which which everyone knows that

406
00:15:51,759 --> 00:15:54,000
bob should this is bubson basically http

407
00:15:54,000 --> 00:15:55,519
proxy

408
00:15:55,519 --> 00:15:57,519
so let's play the demo

409
00:15:57,519 --> 00:15:59,519
as you can see uh

410
00:15:59,519 --> 00:16:02,000
as i clicked on this button our request

411
00:16:02,000 --> 00:16:04,160
has been initiated towards my backend

412
00:16:04,160 --> 00:16:06,720
python flash server and i'm loading the

413
00:16:06,720 --> 00:16:08,880
authorization header over here and once

414
00:16:08,880 --> 00:16:12,560
i forwarded it i got a response 302 and

415
00:16:12,560 --> 00:16:14,160
it is trying to redirect me to

416
00:16:14,160 --> 00:16:15,920
scratchpatch.org

417
00:16:15,920 --> 00:16:18,560
once i forward this request back to the

418
00:16:18,560 --> 00:16:20,720
client which is the mobile application

419
00:16:20,720 --> 00:16:23,680
again here so scratch patch.org is

420
00:16:23,680 --> 00:16:26,240
getting loaded and if you see over here

421
00:16:26,240 --> 00:16:28,720
the secret header which is

422
00:16:28,720 --> 00:16:29,600
the

423
00:16:29,600 --> 00:16:30,639
actual

424
00:16:30,639 --> 00:16:34,480
user's authorization token is also being

425
00:16:34,480 --> 00:16:36,720
forwarded

426
00:16:36,720 --> 00:16:39,440
to scratch pipes or quality so this was

427
00:16:39,440 --> 00:16:42,880
the exact behavior that we have observed

428
00:16:42,880 --> 00:16:43,759
our

429
00:16:43,759 --> 00:16:45,839
research that all

430
00:16:45,839 --> 00:16:46,720
that

431
00:16:46,720 --> 00:16:49,839
users authorization token which was uh

432
00:16:49,839 --> 00:16:52,160
for was being forwarded to the third

433
00:16:52,160 --> 00:16:54,560
party

434
00:16:54,639 --> 00:16:56,639
so now that we have

435
00:16:56,639 --> 00:16:59,360
gone through the entire analysis we know

436
00:16:59,360 --> 00:17:01,519
the exact issue let let's have a look

437
00:17:01,519 --> 00:17:04,000
what was the actual fix that was rolled

438
00:17:04,000 --> 00:17:06,640
out and we roll out plan so this was

439
00:17:06,640 --> 00:17:09,039
pretty much interesting to understand

440
00:17:09,039 --> 00:17:11,520
how exactly google works when it comes

441
00:17:11,520 --> 00:17:14,319
to fixing a particular bug so if you

442
00:17:14,319 --> 00:17:16,319
want to have a look at the code snippet

443
00:17:16,319 --> 00:17:18,480
you can visit this leak over here

444
00:17:18,480 --> 00:17:21,280
which is given over here so

445
00:17:21,280 --> 00:17:24,240
so the fix was very simple they they had

446
00:17:24,240 --> 00:17:26,240
removed any extra adder from the request

447
00:17:26,240 --> 00:17:28,799
so the request is being redirected to a

448
00:17:28,799 --> 00:17:31,360
different origin so if if there is an

449
00:17:31,360 --> 00:17:33,520
origin mismatch between the request and

450
00:17:33,520 --> 00:17:37,200
the response then any extra header

451
00:17:37,200 --> 00:17:38,880
will be drawn because it could be

452
00:17:38,880 --> 00:17:40,880
sensitive and then they wanted to record

453
00:17:40,880 --> 00:17:44,240
a metric on when we added and what was

454
00:17:44,240 --> 00:17:47,280
done which means that after the redirect

455
00:17:47,280 --> 00:17:50,000
whether any header is being added in the

456
00:17:50,000 --> 00:17:52,160
process or what was done to that

457
00:17:52,160 --> 00:17:54,400
specific header and the last but not the

458
00:17:54,400 --> 00:17:56,640
least they had in test case verifying

459
00:17:56,640 --> 00:17:58,640
that the extra headers are clear up so

460
00:17:58,640 --> 00:18:00,480
once this fix is in place they wanted to

461
00:18:00,480 --> 00:18:03,039
make sure that uh there is no extra

462
00:18:03,039 --> 00:18:04,320
header being

463
00:18:04,320 --> 00:18:06,720
added anywhere in the process

464
00:18:06,720 --> 00:18:09,840
so this was the rollout and official fix

465
00:18:09,840 --> 00:18:11,760
by google so

466
00:18:11,760 --> 00:18:13,360
uh now that

467
00:18:13,360 --> 00:18:16,080
we have spoken about the cbe we have

468
00:18:16,080 --> 00:18:20,000
spoken about peopling webview and uh we

469
00:18:20,000 --> 00:18:23,520
we have focused more on the uh exact cbe

470
00:18:23,520 --> 00:18:24,799
uh now

471
00:18:24,799 --> 00:18:25,919
she will

472
00:18:25,919 --> 00:18:27,840
take on from here and he will talk about

473
00:18:27,840 --> 00:18:30,400
most common webview issues that that

474
00:18:30,400 --> 00:18:33,360
occurs over to you

475
00:18:33,360 --> 00:18:34,320
thank you

476
00:18:34,320 --> 00:18:37,440
for the detailed analysis uh now let's

477
00:18:37,440 --> 00:18:38,720
move to the second part of the

478
00:18:38,720 --> 00:18:40,240
presentation wherein we'll be talking

479
00:18:40,240 --> 00:18:42,160
about the common web related security

480
00:18:42,160 --> 00:18:43,520
issues and the way wherein we could

481
00:18:43,520 --> 00:18:45,520
prevent those issues and make our apps

482
00:18:45,520 --> 00:18:48,000
secure and global

483
00:18:48,000 --> 00:18:49,520
so over the time uh what we have

484
00:18:49,520 --> 00:18:51,520
observed is these are the four most

485
00:18:51,520 --> 00:18:54,160
common web related security issues

486
00:18:54,160 --> 00:18:56,400
the first one is lack of url validation

487
00:18:56,400 --> 00:18:57,919
followed by insufficient viewer

488
00:18:57,919 --> 00:19:00,080
revalidation in both the cases what

489
00:19:00,080 --> 00:19:02,960
happens is we are loading a ur webview

490
00:19:02,960 --> 00:19:03,919
with

491
00:19:03,919 --> 00:19:06,240
with no validation in place the first

492
00:19:06,240 --> 00:19:08,320
one and in the second one we have a

493
00:19:08,320 --> 00:19:10,000
validation in place but the validation

494
00:19:10,000 --> 00:19:12,559
is not sufficient and can be bypassed

495
00:19:12,559 --> 00:19:14,640
so the first two are related to the

496
00:19:14,640 --> 00:19:17,039
amalgamation of webview and a trigger

497
00:19:17,039 --> 00:19:17,840
which

498
00:19:17,840 --> 00:19:21,039
helps load a particular urm in the w

499
00:19:21,039 --> 00:19:23,280
that trigger could be deep link or could

500
00:19:23,280 --> 00:19:25,440
be an intent we'll talk about it in the

501
00:19:25,440 --> 00:19:26,640
next slide

502
00:19:26,640 --> 00:19:28,480
the third one is unintended leakage of

503
00:19:28,480 --> 00:19:31,200
sensory third parties so this is very

504
00:19:31,200 --> 00:19:33,679
similar to the chromium cb that we

505
00:19:33,679 --> 00:19:34,880
talked about

506
00:19:34,880 --> 00:19:37,120
where in all all those cases where in

507
00:19:37,120 --> 00:19:39,760
unintentionally we are sharing users or

508
00:19:39,760 --> 00:19:43,120
data pii or some business sensitive data

509
00:19:43,120 --> 00:19:45,440
to a third party all those categories of

510
00:19:45,440 --> 00:19:48,160
issues would fall under this this issue

511
00:19:48,160 --> 00:19:50,000
family

512
00:19:50,000 --> 00:19:51,520
last but not the least one is

513
00:19:51,520 --> 00:19:53,440
insufficient webview isolation

514
00:19:53,440 --> 00:19:56,480
it captures the scenarios wherein we are

515
00:19:56,480 --> 00:19:59,600
leveraging or using our own webviews to

516
00:19:59,600 --> 00:20:01,919
load in untrusted content by untrusted

517
00:20:01,919 --> 00:20:04,240
content i mean a partner content or a

518
00:20:04,240 --> 00:20:05,760
third party content

519
00:20:05,760 --> 00:20:08,000
we will talk about all these issues in

520
00:20:08,000 --> 00:20:10,400
detail in the upcoming slides let's

521
00:20:10,400 --> 00:20:13,120
let's talk about the first two issues so

522
00:20:13,120 --> 00:20:15,280
as i mentioned it it happens when we are

523
00:20:15,280 --> 00:20:17,520
loading a url in the w and there is no

524
00:20:17,520 --> 00:20:19,919
validation at all or a very minimal

525
00:20:19,919 --> 00:20:22,640
validation which could be bypassed

526
00:20:22,640 --> 00:20:25,039
so let's understand the use case first

527
00:20:25,039 --> 00:20:27,679
so there could be there could be two ui

528
00:20:27,679 --> 00:20:30,240
components by ui component i mean an

529
00:20:30,240 --> 00:20:31,919
activity in the case of android and a

530
00:20:31,919 --> 00:20:34,159
view controller in the case of ios so

531
00:20:34,159 --> 00:20:36,480
there are two ui elements first ui

532
00:20:36,480 --> 00:20:38,480
element calls the second ui element and

533
00:20:38,480 --> 00:20:40,799
passes a url while calling the second

534
00:20:40,799 --> 00:20:42,640
element and the second element is

535
00:20:42,640 --> 00:20:44,640
actually having a webview component and

536
00:20:44,640 --> 00:20:47,280
it loads the url that is passed by first

537
00:20:47,280 --> 00:20:50,320
component in the component of the second

538
00:20:50,320 --> 00:20:51,679
component

539
00:20:51,679 --> 00:20:52,480
so

540
00:20:52,480 --> 00:20:55,679
when we are calling the second component

541
00:20:55,679 --> 00:20:58,640
there are two ways or multiple ways i

542
00:20:58,640 --> 00:21:00,559
would say where we could trigger this

543
00:21:00,559 --> 00:21:03,280
the first one is a deep link so we could

544
00:21:03,280 --> 00:21:05,280
use a deep link if you recall we talked

545
00:21:05,280 --> 00:21:07,360
about deep links away when we could

546
00:21:07,360 --> 00:21:09,200
improve user experience by just clicking

547
00:21:09,200 --> 00:21:11,280
on a specific link and it opens specific

548
00:21:11,280 --> 00:21:14,159
content on on the on the mobile app so

549
00:21:14,159 --> 00:21:16,080
for for this particular trigger for

550
00:21:16,080 --> 00:21:17,440
calling the second component we could

551
00:21:17,440 --> 00:21:19,600
leverage deep link or we could have

552
00:21:19,600 --> 00:21:21,919
vanilla intense

553
00:21:21,919 --> 00:21:25,039
again intents are just messages that two

554
00:21:25,039 --> 00:21:27,039
components uses to interact with each

555
00:21:27,039 --> 00:21:28,159
other

556
00:21:28,159 --> 00:21:30,240
so it could be an intent or it could be

557
00:21:30,240 --> 00:21:32,080
a deep link in both the cases what

558
00:21:32,080 --> 00:21:34,080
happens is we are triggering this

559
00:21:34,080 --> 00:21:35,760
particular ui element which is having a

560
00:21:35,760 --> 00:21:37,520
value component and while we are

561
00:21:37,520 --> 00:21:40,000
triggering we are also passing a url and

562
00:21:40,000 --> 00:21:41,440
the second component loads that

563
00:21:41,440 --> 00:21:43,120
particular url

564
00:21:43,120 --> 00:21:45,600
now in this particular use case if while

565
00:21:45,600 --> 00:21:47,120
triggering the second component and

566
00:21:47,120 --> 00:21:48,799
while loading the url if you have no

567
00:21:48,799 --> 00:21:50,880
validation in place it would fall under

568
00:21:50,880 --> 00:21:52,720
the first category if you have a

569
00:21:52,720 --> 00:21:54,320
validation in place before loading the

570
00:21:54,320 --> 00:21:55,919
url it will fall under the second

571
00:21:55,919 --> 00:21:57,679
category

572
00:21:57,679 --> 00:21:59,440
let's understand this with help of some

573
00:21:59,440 --> 00:22:01,600
code snippets so the first one wherein

574
00:22:01,600 --> 00:22:03,520
we have no validation at all if you see

575
00:22:03,520 --> 00:22:06,080
we have this cheap link w demo app and

576
00:22:06,080 --> 00:22:08,559
this deep link is actually having a url

577
00:22:08,559 --> 00:22:10,240
so what happens is whenever this deep

578
00:22:10,240 --> 00:22:13,280
link is triggered it would open this url

579
00:22:13,280 --> 00:22:15,440
in the w so if you see the code snippet

580
00:22:15,440 --> 00:22:17,520
over here we have extracted this url out

581
00:22:17,520 --> 00:22:19,919
of a deep link and we are directly using

582
00:22:19,919 --> 00:22:23,120
load url api to load this url which we

583
00:22:23,120 --> 00:22:25,440
have passed out of a deep link

584
00:22:25,440 --> 00:22:26,880
so if you see we are not doing any kind

585
00:22:26,880 --> 00:22:29,039
of validation so that is what a problem

586
00:22:29,039 --> 00:22:31,200
is so we are not doing any validation

587
00:22:31,200 --> 00:22:33,360
and we are directly opening a url which

588
00:22:33,360 --> 00:22:35,760
is coming as a part of a good link in in

589
00:22:35,760 --> 00:22:37,919
our own battery companies

590
00:22:37,919 --> 00:22:40,320
we will talk about the impact in in the

591
00:22:40,320 --> 00:22:42,000
next slide now let's understand the

592
00:22:42,000 --> 00:22:44,320
second second problem

593
00:22:44,320 --> 00:22:45,919
in this particular case we have a same

594
00:22:45,919 --> 00:22:47,919
kind of a deep link webview demo app

595
00:22:47,919 --> 00:22:49,520
which has a url

596
00:22:49,520 --> 00:22:51,120
while we are passing the deep link we

597
00:22:51,120 --> 00:22:53,200
are extracting the url out of it if you

598
00:22:53,200 --> 00:22:55,280
see now we are comparing this with a

599
00:22:55,280 --> 00:22:57,039
specific domain so we are we are

600
00:22:57,039 --> 00:22:59,600
following the standard practice of by

601
00:22:59,600 --> 00:23:01,600
listing these validations where we have

602
00:23:01,600 --> 00:23:04,080
a domain which is shitsani.com and i'm

603
00:23:04,080 --> 00:23:06,799
comparing this with the domain that i

604
00:23:06,799 --> 00:23:09,520
have got while passing the url from deep

605
00:23:09,520 --> 00:23:10,400
link

606
00:23:10,400 --> 00:23:13,039
and i'm comparing whether the domain

607
00:23:13,039 --> 00:23:15,440
the host matches in both the cases so

608
00:23:15,440 --> 00:23:17,919
either divorce should be shifsani.com or

609
00:23:17,919 --> 00:23:18,960
it should be a subdomain of

610
00:23:18,960 --> 00:23:20,640
shakesani.com

611
00:23:20,640 --> 00:23:22,799
and once this validation passes only

612
00:23:22,799 --> 00:23:25,039
then we are loading a url

613
00:23:25,039 --> 00:23:26,559
this looks

614
00:23:26,559 --> 00:23:28,240
the the right way of doing things right

615
00:23:28,240 --> 00:23:29,679
wherein we have a white listing based

616
00:23:29,679 --> 00:23:31,600
approach we have a white list which is

617
00:23:31,600 --> 00:23:33,600
sunny.com and we are comparing against

618
00:23:33,600 --> 00:23:35,840
that by

619
00:23:35,840 --> 00:23:38,640
the problem is the use of get host api

620
00:23:38,640 --> 00:23:40,640
so there was a vulnerability identified

621
00:23:40,640 --> 00:23:43,360
in implementation of gethost method

622
00:23:43,360 --> 00:23:45,760
which which allows

623
00:23:45,760 --> 00:23:49,360
uh uh adversary to bypass the validation

624
00:23:49,360 --> 00:23:52,000
so now let's understand this and magnify

625
00:23:52,000 --> 00:23:54,159
it a bit so if you see we have a profit

626
00:23:54,159 --> 00:23:56,480
url here it is having two domains

627
00:23:56,480 --> 00:23:59,279
attacker.com and legitimate.com so what

628
00:23:59,279 --> 00:24:01,679
happens is when this kind of a crafted

629
00:24:01,679 --> 00:24:05,679
url which has backslash and ad symbol

630
00:24:05,679 --> 00:24:07,840
separating two domains is passed to get

631
00:24:07,840 --> 00:24:09,279
host method

632
00:24:09,279 --> 00:24:11,440
it behaves differently so it takes

633
00:24:11,440 --> 00:24:13,679
legitimate.com it takes second domain

634
00:24:13,679 --> 00:24:15,919
out of this crafted ui

635
00:24:15,919 --> 00:24:17,600
while when the same domain is being

636
00:24:17,600 --> 00:24:18,400
passed

637
00:24:18,400 --> 00:24:20,640
the same url has been passed to load url

638
00:24:20,640 --> 00:24:22,240
api it

639
00:24:22,240 --> 00:24:24,480
takes the first url so that is how we

640
00:24:24,480 --> 00:24:26,559
could bypass the validation so for

641
00:24:26,559 --> 00:24:28,880
validation we have this legitimate.com

642
00:24:28,880 --> 00:24:30,799
however when we are loading a url it

643
00:24:30,799 --> 00:24:32,640
would

644
00:24:32,640 --> 00:24:34,960
this was a very amazing finding and

645
00:24:34,960 --> 00:24:36,799
buggy pro uh

646
00:24:36,799 --> 00:24:38,400
buggy pro has written a very amazing

647
00:24:38,400 --> 00:24:40,799
report on this so there is a hyperlink

648
00:24:40,799 --> 00:24:42,320
once we'll be releasing this deck you

649
00:24:42,320 --> 00:24:44,000
can go through this

650
00:24:44,000 --> 00:24:45,679
so the problem is if i conclude the

651
00:24:45,679 --> 00:24:47,360
problem is implementation of get host

652
00:24:47,360 --> 00:24:49,520
method as it behaves differently when

653
00:24:49,520 --> 00:24:51,919
whenever we are passing a crafted url to

654
00:24:51,919 --> 00:24:54,080
a get host

655
00:24:54,080 --> 00:24:55,279
api

656
00:24:55,279 --> 00:24:57,039
so the fix is

657
00:24:57,039 --> 00:24:59,440
we should not use getpost for validation

658
00:24:59,440 --> 00:25:01,440
instead we should use with get authority

659
00:25:01,440 --> 00:25:03,440
we will talk about the secure way of

660
00:25:03,440 --> 00:25:05,919
doing things in the next section

661
00:25:05,919 --> 00:25:07,919
but for now i would recommend whenever

662
00:25:07,919 --> 00:25:09,679
we are doing a validation

663
00:25:09,679 --> 00:25:11,760
we should not use that host and we

664
00:25:11,760 --> 00:25:13,520
should always do a validation so the

665
00:25:13,520 --> 00:25:14,880
first one we were not doing any kind of

666
00:25:14,880 --> 00:25:16,799
validation and loading the url directly

667
00:25:16,799 --> 00:25:19,120
the second one we were having validation

668
00:25:19,120 --> 00:25:20,799
but that validation was of no use

669
00:25:20,799 --> 00:25:22,880
because it could be bypassed this issue

670
00:25:22,880 --> 00:25:25,600
was fixed uh the issue with get host

671
00:25:25,600 --> 00:25:28,000
method was fixed in api level 28 however

672
00:25:28,000 --> 00:25:30,480
27 and below are still vulnerable based

673
00:25:30,480 --> 00:25:32,320
on my analysis

674
00:25:32,320 --> 00:25:34,960
so we should always refrain from using

675
00:25:34,960 --> 00:25:37,520
get host if we are supporting android

676
00:25:37,520 --> 00:25:39,919
api levels 28

677
00:25:39,919 --> 00:25:43,840
and below 27 envelope

678
00:25:44,480 --> 00:25:46,640
so now we know what the issue is let's

679
00:25:46,640 --> 00:25:48,080
talk about impact

680
00:25:48,080 --> 00:25:49,120
so

681
00:25:49,120 --> 00:25:52,480
again if you see we are able to load

682
00:25:52,480 --> 00:25:54,559
a malicious url in webview now it

683
00:25:54,559 --> 00:25:56,720
totally depends it depends on the

684
00:25:56,720 --> 00:25:58,159
privileges of the underlying webview

685
00:25:58,159 --> 00:26:00,559
which is under attack so the impact

686
00:26:00,559 --> 00:26:02,720
would be as simple as just loading the

687
00:26:02,720 --> 00:26:05,520
html content and phishing the users but

688
00:26:05,520 --> 00:26:07,600
it could be as severe as executing

689
00:26:07,600 --> 00:26:10,960
remote code on the mobile device

690
00:26:10,960 --> 00:26:14,559
or uh exfiltrating users or throughputs

691
00:26:14,559 --> 00:26:16,000
so it totally depends upon the

692
00:26:16,000 --> 00:26:17,360
privileges of the underlying webview

693
00:26:17,360 --> 00:26:19,600
which is under attack the higher the

694
00:26:19,600 --> 00:26:21,840
privileges of the underlying webview is

695
00:26:21,840 --> 00:26:23,679
the more would be the impact and vice

696
00:26:23,679 --> 00:26:25,039
versa

697
00:26:25,039 --> 00:26:26,799
so if i talk about few examples let's

698
00:26:26,799 --> 00:26:29,279
say in the scenario wherein we have

699
00:26:29,279 --> 00:26:32,000
that views which are configured to

700
00:26:32,000 --> 00:26:34,000
have javascript bridges

701
00:26:34,000 --> 00:26:35,520
that that would allow

702
00:26:35,520 --> 00:26:37,760
javascript which is not now under our

703
00:26:37,760 --> 00:26:39,520
control because our value is compromised

704
00:26:39,520 --> 00:26:41,919
so this javascript could actually call

705
00:26:41,919 --> 00:26:43,760
the native methods

706
00:26:43,760 --> 00:26:46,240
with which which could be kotlin or it

707
00:26:46,240 --> 00:26:48,080
could be javascript javascript code

708
00:26:48,080 --> 00:26:50,480
would call java important methods if

709
00:26:50,480 --> 00:26:52,880
this java if this w is privileged enough

710
00:26:52,880 --> 00:26:56,159
to have uh interfaces js bridges in

711
00:26:56,159 --> 00:26:57,360
place

712
00:26:57,360 --> 00:26:58,159
so

713
00:26:58,159 --> 00:27:01,120
just to conclude the total impact of the

714
00:27:01,120 --> 00:27:02,960
issue would depend upon the privileges

715
00:27:02,960 --> 00:27:04,880
of the underlying webview and the higher

716
00:27:04,880 --> 00:27:06,480
the privileges are the more would be the

717
00:27:06,480 --> 00:27:08,880
impact

718
00:27:09,360 --> 00:27:11,120
now let's move to the third issue which

719
00:27:11,120 --> 00:27:13,200
is unintended data leakage

720
00:27:13,200 --> 00:27:15,440
so as i mentioned it's very similar to

721
00:27:15,440 --> 00:27:17,840
the chromium issue we talked about so

722
00:27:17,840 --> 00:27:19,679
there are multiple instances that we

723
00:27:19,679 --> 00:27:21,360
have observed wearing unintentionally

724
00:27:21,360 --> 00:27:24,159
developers leads users or business

725
00:27:24,159 --> 00:27:26,399
sensitive data to third parties

726
00:27:26,399 --> 00:27:28,480
let's understand this with help of some

727
00:27:28,480 --> 00:27:30,880
examples if you see over here

728
00:27:30,880 --> 00:27:32,720
this is a very common one

729
00:27:32,720 --> 00:27:35,840
wherein we have seen multiple times

730
00:27:35,840 --> 00:27:38,720
users or tokens or id tokens are being

731
00:27:38,720 --> 00:27:40,799
sent as a part of referral headers to

732
00:27:40,799 --> 00:27:42,320
google tag manager

733
00:27:42,320 --> 00:27:44,000
and google tag manager is just one

734
00:27:44,000 --> 00:27:45,600
example so

735
00:27:45,600 --> 00:27:48,000
it could be any third party domain so if

736
00:27:48,000 --> 00:27:50,320
you see the report header we are passing

737
00:27:50,320 --> 00:27:53,840
users or token to a third party

738
00:27:53,840 --> 00:27:55,440
so we should always make sure that

739
00:27:55,440 --> 00:27:56,880
whenever we are having a third party

740
00:27:56,880 --> 00:27:58,960
integration all the network requests are

741
00:27:58,960 --> 00:28:01,679
logged and verified for some potential

742
00:28:01,679 --> 00:28:04,080
like this

743
00:28:04,080 --> 00:28:05,760
in this one if you see we are doing an

744
00:28:05,760 --> 00:28:07,279
authenticated load to a third party

745
00:28:07,279 --> 00:28:09,279
domain if you recall we talked about a

746
00:28:09,279 --> 00:28:10,640
normal load in the webview and

747
00:28:10,640 --> 00:28:12,559
authenticated load in the authenticated

748
00:28:12,559 --> 00:28:14,720
load we pass auth data as a part of

749
00:28:14,720 --> 00:28:16,559
headers additional headers

750
00:28:16,559 --> 00:28:18,880
and front end passes those headers to

751
00:28:18,880 --> 00:28:20,000
the domain

752
00:28:20,000 --> 00:28:22,880
and they are not meant to be shared to

753
00:28:22,880 --> 00:28:24,240
resource servers

754
00:28:24,240 --> 00:28:25,600
they are only meant to be shared to

755
00:28:25,600 --> 00:28:27,919
identity servers which are which which

756
00:28:27,919 --> 00:28:29,919
would validate those

757
00:28:29,919 --> 00:28:32,320
or data so if you see we are leveraging

758
00:28:32,320 --> 00:28:33,760
the same webview

759
00:28:33,760 --> 00:28:35,039
component which is doing an

760
00:28:35,039 --> 00:28:37,360
authenticated load to load a third party

761
00:28:37,360 --> 00:28:39,679
domain in this particular case we are

762
00:28:39,679 --> 00:28:44,760
sending jwt to a third party domain

763
00:28:44,880 --> 00:28:47,679
uh the next one is uh sharing auth data

764
00:28:47,679 --> 00:28:49,200
or any other sensitive data as a part of

765
00:28:49,200 --> 00:28:50,880
query string

766
00:28:50,880 --> 00:28:54,240
so query string uh would so whenever you

767
00:28:54,240 --> 00:28:55,760
are passing anything as a part of query

768
00:28:55,760 --> 00:28:58,559
string it would be logged at back in

769
00:28:58,559 --> 00:29:00,960
and by this i mean anyone having access

770
00:29:00,960 --> 00:29:03,120
to logs and everyone having access to

771
00:29:03,120 --> 00:29:04,880
logs would be able to retrieve that

772
00:29:04,880 --> 00:29:06,559
sensitive information

773
00:29:06,559 --> 00:29:09,520
be qa engineers be mobile developers

774
00:29:09,520 --> 00:29:11,440
beat security engineers

775
00:29:11,440 --> 00:29:13,279
they could they would have access to

776
00:29:13,279 --> 00:29:15,360
sensitive data including all systems so

777
00:29:15,360 --> 00:29:17,840
whenever we have to pass some sensitive

778
00:29:17,840 --> 00:29:20,320
data to back-end we should never

779
00:29:20,320 --> 00:29:23,440
use query string and a get verb for

780
00:29:23,440 --> 00:29:25,440
making the http call we should always

781
00:29:25,440 --> 00:29:27,679
send it as a part of body in the post

782
00:29:27,679 --> 00:29:30,159
request

783
00:29:30,480 --> 00:29:33,120
so last last one is lack of the

784
00:29:33,120 --> 00:29:34,799
isolation so

785
00:29:34,799 --> 00:29:36,159
as i mentioned whenever we are

786
00:29:36,159 --> 00:29:37,919
leveraging our own that means to load a

787
00:29:37,919 --> 00:29:39,760
partner content or third party content

788
00:29:39,760 --> 00:29:41,200
all such issues would fall under this

789
00:29:41,200 --> 00:29:42,640
category

790
00:29:42,640 --> 00:29:44,240
again let's understand this with help of

791
00:29:44,240 --> 00:29:46,320
a use case so let's say we have an

792
00:29:46,320 --> 00:29:48,720
application which would

793
00:29:48,720 --> 00:29:50,240
which which is integrated with lot of

794
00:29:50,240 --> 00:29:52,159
third parties so

795
00:29:52,159 --> 00:29:54,320
what what happens is a user could use

796
00:29:54,320 --> 00:29:55,919
third-party services through our

797
00:29:55,919 --> 00:29:57,120
application

798
00:29:57,120 --> 00:29:59,679
and these applications are being

799
00:29:59,679 --> 00:30:01,840
accessed by user to a webview so our

800
00:30:01,840 --> 00:30:03,279
application is having lot of webby

801
00:30:03,279 --> 00:30:04,399
components

802
00:30:04,399 --> 00:30:06,640
corresponding to the third parties that

803
00:30:06,640 --> 00:30:08,320
are integrated

804
00:30:08,320 --> 00:30:10,720
to our app so whenever a user clicks on

805
00:30:10,720 --> 00:30:13,440
a particular link uh it opens a web view

806
00:30:13,440 --> 00:30:15,440
and it opens a partner content and then

807
00:30:15,440 --> 00:30:17,760
user could actually avail services that

808
00:30:17,760 --> 00:30:19,600
are provided by third party and this is

809
00:30:19,600 --> 00:30:21,120
something which is very common in the

810
00:30:21,120 --> 00:30:23,919
current era of like super apps

811
00:30:23,919 --> 00:30:25,120
so

812
00:30:25,120 --> 00:30:27,360
uh what happens in in the scenario

813
00:30:27,360 --> 00:30:29,120
wherein let's say we have this kind of

814
00:30:29,120 --> 00:30:31,679
uh implementation wherein the partner

815
00:30:31,679 --> 00:30:34,399
content is loaded as part of their deeds

816
00:30:34,399 --> 00:30:36,159
so in this particular case if we are

817
00:30:36,159 --> 00:30:38,480
using our own web views to load the

818
00:30:38,480 --> 00:30:40,799
partner content we are actually opening

819
00:30:40,799 --> 00:30:43,760
a door for a potential leakage so what

820
00:30:43,760 --> 00:30:46,000
could go wrong is uh

821
00:30:46,000 --> 00:30:48,000
if there is a breach of trust or the

822
00:30:48,000 --> 00:30:49,520
third party or a partner itself is

823
00:30:49,520 --> 00:30:51,440
compromised

824
00:30:51,440 --> 00:30:53,279
the the expected

825
00:30:53,279 --> 00:30:56,240
uh legitimate content would be replaced

826
00:30:56,240 --> 00:30:58,480
with some malicious javascript

827
00:30:58,480 --> 00:31:00,720
and again we are allowing

828
00:31:00,720 --> 00:31:02,880
since we are using our own web views

829
00:31:02,880 --> 00:31:04,559
the malicious javascript would run as a

830
00:31:04,559 --> 00:31:07,200
part of our own values and again now it

831
00:31:07,200 --> 00:31:09,200
depends upon the privileges of our own

832
00:31:09,200 --> 00:31:12,399
component so the attacks impact would be

833
00:31:12,399 --> 00:31:14,320
as simple as just phishing the users by

834
00:31:14,320 --> 00:31:16,320
just loading some malicious

835
00:31:16,320 --> 00:31:19,360
html uh it could be as severe as

836
00:31:19,360 --> 00:31:21,440
exfiltrating users or tokens or doing a

837
00:31:21,440 --> 00:31:22,720
remote for execution of the mobile

838
00:31:22,720 --> 00:31:23,919
device

839
00:31:23,919 --> 00:31:25,600
so whenever we have this kind of

840
00:31:25,600 --> 00:31:27,279
implementation in place

841
00:31:27,279 --> 00:31:28,559
we should never

842
00:31:28,559 --> 00:31:31,120
load parking content in our own web

843
00:31:31,120 --> 00:31:34,080
views we talk about the ways when we

844
00:31:34,080 --> 00:31:36,080
could prevent these issues when we could

845
00:31:36,080 --> 00:31:37,840
leverage chrome custom tabs in the case

846
00:31:37,840 --> 00:31:39,440
of android and safari view controllers

847
00:31:39,440 --> 00:31:41,279
in case of ios

848
00:31:41,279 --> 00:31:43,039
and that will be taking care of

849
00:31:43,039 --> 00:31:45,440
those recommendations

850
00:31:45,440 --> 00:31:47,760
so for now we have discussed the most

851
00:31:47,760 --> 00:31:49,519
common weather related security issues

852
00:31:49,519 --> 00:31:52,640
that we have observed over time

853
00:31:52,640 --> 00:31:53,840
in the next section we'll be talking

854
00:31:53,840 --> 00:31:55,760
about learnings and recommendations the

855
00:31:55,760 --> 00:31:57,679
way where you could prevent those issues

856
00:31:57,679 --> 00:31:59,919
and secure our mobile apps and that will

857
00:31:59,919 --> 00:32:02,000
be taking it over from here

858
00:32:02,000 --> 00:32:04,559
over here

859
00:32:05,840 --> 00:32:07,200
thank you

860
00:32:07,200 --> 00:32:09,760
uh hi guys uh so

861
00:32:09,760 --> 00:32:12,960
uh let's let's let's now understand uh

862
00:32:12,960 --> 00:32:14,159
what are the learnings and the

863
00:32:14,159 --> 00:32:17,120
recommendations that we have that we

864
00:32:17,120 --> 00:32:19,679
have so far from the entire research and

865
00:32:19,679 --> 00:32:24,000
from the entire you know analysis

866
00:32:30,880 --> 00:32:34,399
so the first and foremost like uh

867
00:32:34,399 --> 00:32:37,120
in android whenever we have a content

868
00:32:37,120 --> 00:32:40,840
provider or whenever we have a deep link

869
00:32:40,840 --> 00:32:43,760
so uh let's assume that we have a deep

870
00:32:43,760 --> 00:32:45,679
link up in the deep link

871
00:32:45,679 --> 00:32:48,159
and if you are trying to pass a url in

872
00:32:48,159 --> 00:32:50,640
the deep link so the first thing what we

873
00:32:50,640 --> 00:32:54,559
really recommend is to do a secure url

874
00:32:54,559 --> 00:32:57,919
validation so to prevent

875
00:32:57,919 --> 00:33:01,200
cases where we have seen uh

876
00:33:01,200 --> 00:33:04,320
there are you know vulnerable functions

877
00:33:04,320 --> 00:33:06,240
such as guest get post which will

878
00:33:06,240 --> 00:33:08,320
actually bypass the check you must

879
00:33:08,320 --> 00:33:11,840
always use get authority so here uh this

880
00:33:11,840 --> 00:33:14,159
is a sample android port snippet where

881
00:33:14,159 --> 00:33:17,760
where the function validate url uh

882
00:33:17,760 --> 00:33:20,720
uh takes in an url object over here and

883
00:33:20,720 --> 00:33:24,640
after that it checks whether

884
00:33:27,120 --> 00:33:30,399
as well as the uh scheme so once this

885
00:33:30,399 --> 00:33:33,039
passes the function will return either a

886
00:33:33,039 --> 00:33:35,919
troop or a pass

887
00:33:35,919 --> 00:33:38,399
the second set of example is in ios the

888
00:33:38,399 --> 00:33:41,200
sports library provided over here is is

889
00:33:41,200 --> 00:33:44,000
a swift code in which we are using the

890
00:33:44,000 --> 00:33:46,880
url component dot scheme as well as url

891
00:33:46,880 --> 00:33:50,080
component dot post so here i'm trying to

892
00:33:50,080 --> 00:33:52,480
do the same thing and extract the scheme

893
00:33:52,480 --> 00:33:56,159
as well as the post from the url and uh

894
00:33:56,159 --> 00:33:58,880
and validating it returning either false

895
00:33:58,880 --> 00:34:00,240
or true

896
00:34:00,240 --> 00:34:03,039
so this is how what we recommend to do a

897
00:34:03,039 --> 00:34:05,760
security url validation when you're

898
00:34:05,760 --> 00:34:08,239
whenever you're trying to accept the url

899
00:34:08,239 --> 00:34:10,639
from the user or via the deep link or

900
00:34:10,639 --> 00:34:12,480
any other

901
00:34:12,480 --> 00:34:13,520
way

902
00:34:13,520 --> 00:34:15,119
so

903
00:34:15,119 --> 00:34:17,679
as she already spoke about webview

904
00:34:17,679 --> 00:34:19,599
isolation so this

905
00:34:19,599 --> 00:34:21,599
feature comes into a picture where you

906
00:34:21,599 --> 00:34:22,800
are trying

907
00:34:22,800 --> 00:34:25,280
where you're wanting a user to uh you

908
00:34:25,280 --> 00:34:27,839
know access the third party service

909
00:34:27,839 --> 00:34:30,800
without any interaction with your native

910
00:34:30,800 --> 00:34:32,719
app so for example you don't want to

911
00:34:32,719 --> 00:34:34,480
have a native bridge or you don't want

912
00:34:34,480 --> 00:34:36,800
to do an auth load or you don't want to

913
00:34:36,800 --> 00:34:39,040
share any data you just won't be able to

914
00:34:39,040 --> 00:34:41,359
be isolated so in that case in android

915
00:34:41,359 --> 00:34:44,399
we have custom chrome tab and in ios we

916
00:34:44,399 --> 00:34:46,960
have safari view controller so this is

917
00:34:46,960 --> 00:34:48,879
what we recommend like when you want to

918
00:34:48,879 --> 00:34:51,199
browse a third-party services

919
00:34:51,199 --> 00:34:52,239
so

920
00:34:52,239 --> 00:34:55,839
why because it actually doesn't run as a

921
00:34:55,839 --> 00:34:57,839
process of that application instead it

922
00:34:57,839 --> 00:35:00,320
it runs as a process of safari as well

923
00:35:00,320 --> 00:35:01,359
as

924
00:35:01,359 --> 00:35:03,359
chrome process which actually minimize

925
00:35:03,359 --> 00:35:06,400
the risk of you know running a malicious

926
00:35:06,400 --> 00:35:08,800
javascript accessing non-exported

927
00:35:08,800 --> 00:35:10,560
services and

928
00:35:10,560 --> 00:35:12,560
you know other component of the mobile

929
00:35:12,560 --> 00:35:16,079
application and apart from that as it

930
00:35:16,079 --> 00:35:18,000
acts as an embedded browser into your

931
00:35:18,000 --> 00:35:20,400
application it also gives a

932
00:35:20,400 --> 00:35:23,839
seamless user experience

933
00:35:24,079 --> 00:35:25,760
so

934
00:35:25,760 --> 00:35:28,560
so let's assume uh let's have a couple

935
00:35:28,560 --> 00:35:30,880
of checklist when you're trying to

936
00:35:30,880 --> 00:35:33,440
you know secure or android link or let's

937
00:35:33,440 --> 00:35:35,040
say when you're trying to harden android

938
00:35:35,040 --> 00:35:37,119
deep link so the first and foremost

939
00:35:37,119 --> 00:35:39,599
point is this disable employee implicit

940
00:35:39,599 --> 00:35:42,160
access to content providers so the set

941
00:35:42,160 --> 00:35:44,880
allow content access property will

942
00:35:44,880 --> 00:35:48,400
by default disable uh by setting the

943
00:35:48,400 --> 00:35:50,880
this property it will disable access to

944
00:35:50,880 --> 00:35:52,720
your content provider so in case you

945
00:35:52,720 --> 00:35:55,040
have some send it sensitive information

946
00:35:55,040 --> 00:35:56,880
stored in your content provider it can

947
00:35:56,880 --> 00:35:59,680
be accessible via the webview but with

948
00:35:59,680 --> 00:36:02,079
this specific property you can disable

949
00:36:02,079 --> 00:36:04,160
it and

950
00:36:04,160 --> 00:36:06,000
the second point comes to the local

951
00:36:06,000 --> 00:36:07,599
storage so we have

952
00:36:07,599 --> 00:36:09,520
a lot of information in the apps local

953
00:36:09,520 --> 00:36:12,720
storage and this can also be accessed

954
00:36:12,720 --> 00:36:15,599
through the webview if we uh leave if we

955
00:36:15,599 --> 00:36:17,760
leave the default setting on so you can

956
00:36:17,760 --> 00:36:21,119
disable it using set allow file access

957
00:36:21,119 --> 00:36:23,680
the third point is like uh the with the

958
00:36:23,680 --> 00:36:26,240
help of clear cache you can like plus

959
00:36:26,240 --> 00:36:28,320
the webview cache whenever the web

960
00:36:28,320 --> 00:36:31,200
component is no longer required last but

961
00:36:31,200 --> 00:36:33,119
not the least it's very important most

962
00:36:33,119 --> 00:36:34,720
of the cases where

963
00:36:34,720 --> 00:36:37,200
you don't have a javascript bridge

964
00:36:37,200 --> 00:36:39,599
between your webview and as well as your

965
00:36:39,599 --> 00:36:40,400
application

966
00:36:40,400 --> 00:36:43,119
so in that case simply uh with the help

967
00:36:43,119 --> 00:36:45,520
of this property said javascript enabled

968
00:36:45,520 --> 00:36:48,560
simply disable the javascript

969
00:36:48,560 --> 00:36:49,280
uh

970
00:36:49,280 --> 00:36:53,839
javascript bridge so that uh the

971
00:36:53,839 --> 00:36:56,560
attacker is not able to

972
00:36:56,560 --> 00:36:58,560
access any sensitive information with

973
00:36:58,560 --> 00:37:00,640
the help of people or with the help of

974
00:37:00,640 --> 00:37:01,520
any

975
00:37:01,520 --> 00:37:03,839
non-exported activity or content

976
00:37:03,839 --> 00:37:06,839
provider

977
00:37:08,240 --> 00:37:10,000
so now that you have spoken about

978
00:37:10,000 --> 00:37:12,240
android let's talk about talk a little

979
00:37:12,240 --> 00:37:14,079
bit about how you can achieve this in

980
00:37:14,079 --> 00:37:15,119
ios

981
00:37:15,119 --> 00:37:17,760
so in ios uh

982
00:37:17,760 --> 00:37:19,839
uh

983
00:37:19,839 --> 00:37:22,400
people used to use ui webview which is

984
00:37:22,400 --> 00:37:24,400
actually now depreciated so if you have

985
00:37:24,400 --> 00:37:25,760
an application

986
00:37:25,760 --> 00:37:26,720
uh

987
00:37:26,720 --> 00:37:29,520
in ui review it is it will no longer be

988
00:37:29,520 --> 00:37:31,599
accepted in the app store as well as

989
00:37:31,599 --> 00:37:33,599
update to the existing application is

990
00:37:33,599 --> 00:37:36,880
also not accepted why because it has it

991
00:37:36,880 --> 00:37:38,800
had a lot of settings which was by

992
00:37:38,800 --> 00:37:42,400
default enabled uh and it it wasn't

993
00:37:42,400 --> 00:37:44,320
which will allow which which in turn is

994
00:37:44,320 --> 00:37:47,359
an open attack surface to you know

995
00:37:47,359 --> 00:37:49,440
steal sensitive information to the

996
00:37:49,440 --> 00:37:52,160
attacker for example the javascript uh

997
00:37:52,160 --> 00:37:54,800
as we've seen in the previous example

998
00:37:54,800 --> 00:37:57,040
we were able to disable it but here you

999
00:37:57,040 --> 00:37:58,720
can if you want you cannot disable it

1000
00:37:58,720 --> 00:38:00,880
and other sensitive settings are also

1001
00:38:00,880 --> 00:38:02,720
enabled by default

1002
00:38:02,720 --> 00:38:06,160
the successor of wk uh the successor of

1003
00:38:06,160 --> 00:38:09,200
ui webview comes the wk webview wherein

1004
00:38:09,200 --> 00:38:11,280
we have uh different properties with

1005
00:38:11,280 --> 00:38:13,760
which you can uh you know harden your

1006
00:38:13,760 --> 00:38:16,240
view for example using the javascript

1007
00:38:16,240 --> 00:38:19,200
enabled uh property you can actually

1008
00:38:19,200 --> 00:38:23,200
disable the javascript uh bridge

1009
00:38:23,200 --> 00:38:24,560
and uh

1010
00:38:24,560 --> 00:38:27,119
we have ash only secure content for

1011
00:38:27,119 --> 00:38:29,359
property to make sure the content loader

1012
00:38:29,359 --> 00:38:31,359
in the web view comes from an encrypted

1013
00:38:31,359 --> 00:38:32,560
connection

1014
00:38:32,560 --> 00:38:34,640
and uh apart from that similar to

1015
00:38:34,640 --> 00:38:36,800
android we have allowing read access to

1016
00:38:36,800 --> 00:38:38,800
url

1017
00:38:38,800 --> 00:38:42,000
when whenever you are you know uh

1018
00:38:42,000 --> 00:38:43,599
have whenever you are having this

1019
00:38:43,599 --> 00:38:45,520
setting enabled and you have a static

1020
00:38:45,520 --> 00:38:47,839
page you wanted to load in your webview

1021
00:38:47,839 --> 00:38:49,920
make sure that you do not give access to

1022
00:38:49,920 --> 00:38:52,160
the entire directory rather specifically

1023
00:38:52,160 --> 00:38:55,280
give access to that specific file uh

1024
00:38:55,280 --> 00:38:58,880
which you want to load in the webview so

1025
00:38:58,880 --> 00:39:00,720
apart from that we have allow file

1026
00:39:00,720 --> 00:39:03,280
access from file url and allow universal

1027
00:39:03,280 --> 00:39:06,400
access profile url which are security

1028
00:39:06,400 --> 00:39:08,960
sensitive settings which can be disabled

1029
00:39:08,960 --> 00:39:10,800
by default if

1030
00:39:10,800 --> 00:39:15,839
if it is not consumed by the feature

1031
00:39:16,000 --> 00:39:18,480
so let's move on to the key takeaways

1032
00:39:18,480 --> 00:39:20,880
for from the entire presentation first

1033
00:39:20,880 --> 00:39:22,720
and foremost always follow the least

1034
00:39:22,720 --> 00:39:24,720
privileges while review for example

1035
00:39:24,720 --> 00:39:26,880
disabling the security settings that we

1036
00:39:26,880 --> 00:39:29,520
have spoken in the previous slide also

1037
00:39:29,520 --> 00:39:31,680
disabling javascript if it is not

1038
00:39:31,680 --> 00:39:33,920
required only allow those

1039
00:39:33,920 --> 00:39:36,480
uh you know properties that is consumed

1040
00:39:36,480 --> 00:39:37,760
by the feature

1041
00:39:37,760 --> 00:39:40,400
second one so use always always use

1042
00:39:40,400 --> 00:39:43,280
custom chrome tabs in safari you can

1043
00:39:43,280 --> 00:39:44,800
view controller whenever you're trying

1044
00:39:44,800 --> 00:39:47,520
to load a third-party content so that

1045
00:39:47,520 --> 00:39:49,760
the malicious javascript cannot access

1046
00:39:49,760 --> 00:39:50,560
the

1047
00:39:50,560 --> 00:39:52,640
cannot have an interaction with your

1048
00:39:52,640 --> 00:39:54,560
native web application

1049
00:39:54,560 --> 00:39:56,800
third one if your pro

1050
00:39:56,800 --> 00:39:59,599
as we have spoken about the secure url

1051
00:39:59,599 --> 00:40:02,560
your url validation so if our deep link

1052
00:40:02,560 --> 00:40:04,720
is trying to load the url ensure that

1053
00:40:04,720 --> 00:40:08,319
url is validated in a secure way and

1054
00:40:08,319 --> 00:40:11,280
always while validating the url have an

1055
00:40:11,280 --> 00:40:13,599
explicit match with the authority and

1056
00:40:13,599 --> 00:40:17,040
protocol with a wide listed set of urls

1057
00:40:17,040 --> 00:40:19,599
last but not the least always

1058
00:40:19,599 --> 00:40:21,280
when you're trying to do a third party

1059
00:40:21,280 --> 00:40:24,800
integration make sure you have a uh make

1060
00:40:24,800 --> 00:40:26,960
sure you have a test case in place like

1061
00:40:26,960 --> 00:40:28,720
in case of google they have a test case

1062
00:40:28,720 --> 00:40:30,640
to make sure that no sensitive data is

1063
00:40:30,640 --> 00:40:33,280
being exposed and also have a check on

1064
00:40:33,280 --> 00:40:35,280
logs that whether

1065
00:40:35,280 --> 00:40:37,760
we are unintently sharing any sensitive

1066
00:40:37,760 --> 00:40:39,270
data to third party

1067
00:40:39,270 --> 00:40:42,409
[Music]

1068
00:40:42,480 --> 00:40:45,760
so we want to go uh we are coming to the

1069
00:40:45,760 --> 00:40:47,599
end of the presentation and we want to

1070
00:40:47,599 --> 00:40:49,920
thank a couple of people like mona

1071
00:40:49,920 --> 00:40:51,520
vinodan bruno

1072
00:40:51,520 --> 00:40:53,440
was involved from the end-to-end

1073
00:40:53,440 --> 00:40:55,839
analysis and he was a great motivation

1074
00:40:55,839 --> 00:40:57,839
in doing the entire research and we also

1075
00:40:57,839 --> 00:41:00,720
want to help uh thank

1076
00:41:00,720 --> 00:41:03,599
to changu for helping us during the

1077
00:41:03,599 --> 00:41:05,839
analysis and these are the couple of

1078
00:41:05,839 --> 00:41:08,160
references that we took uh in our

1079
00:41:08,160 --> 00:41:10,640
research and while preparing these uh

1080
00:41:10,640 --> 00:41:12,640
entire presentation

1081
00:41:12,640 --> 00:41:14,640
i think that that's all from from our

1082
00:41:14,640 --> 00:41:18,319
side we are open for questions so if the

1083
00:41:18,319 --> 00:41:20,000
attendees have any questions they can

1084
00:41:20,000 --> 00:41:21,280
ask us or

1085
00:41:21,280 --> 00:41:24,079
leave the question in this slack channel

1086
00:41:24,079 --> 00:41:25,760
thank you

1087
00:41:25,760 --> 00:41:27,599
i believe we don't have sufficient time

1088
00:41:27,599 --> 00:41:29,280
left for questions

1089
00:41:29,280 --> 00:41:30,560
uh

1090
00:41:30,560 --> 00:41:32,160
you can you can always reach out to us

1091
00:41:32,160 --> 00:41:34,480
on linkedin or twitter in case you have

1092
00:41:34,480 --> 00:41:35,839
some questions

1093
00:41:35,839 --> 00:41:38,560
thank you everyone

1094
00:41:38,560 --> 00:41:41,680
yes please thanks to you folks um

1095
00:41:41,680 --> 00:41:43,839
we have still a couple of minutes before

1096
00:41:43,839 --> 00:41:46,720
our break uh i actually have some

1097
00:41:46,720 --> 00:41:49,040
questions so if we see if that keeps you

1098
00:41:49,040 --> 00:41:50,480
know some time for others to come up

1099
00:41:50,480 --> 00:41:52,960
with some questions it's what about uh

1100
00:41:52,960 --> 00:41:55,839
again statistics uh i would say um it

1101
00:41:55,839 --> 00:41:57,760
seems you know through this presentation

1102
00:41:57,760 --> 00:41:59,760
that i mean security is odd right in

1103
00:41:59,760 --> 00:42:01,920
general so it seems like you have to do

1104
00:42:01,920 --> 00:42:04,000
your due diligence while implementing

1105
00:42:04,000 --> 00:42:06,319
you know web views uh so you have to you

1106
00:42:06,319 --> 00:42:08,800
know again parse and perform a lot of

1107
00:42:08,800 --> 00:42:11,520
you know um security related um controls

1108
00:42:11,520 --> 00:42:12,640
and measures

1109
00:42:12,640 --> 00:42:16,480
do you have any statistics or you know

1110
00:42:16,480 --> 00:42:18,720
that basically tell us

1111
00:42:18,720 --> 00:42:22,000
roughly you know how many implementation

1112
00:42:22,000 --> 00:42:24,800
of web views are actually lacking some

1113
00:42:24,800 --> 00:42:28,720
security uh measures um i'm talking

1114
00:42:28,720 --> 00:42:30,319
about for example i don't know usually

1115
00:42:30,319 --> 00:42:32,240
like i don't know 20 percent of your

1116
00:42:32,240 --> 00:42:34,880
application that you analyze you know

1117
00:42:34,880 --> 00:42:36,480
following some

1118
00:42:36,480 --> 00:42:38,800
issue with you know with security and

1119
00:42:38,800 --> 00:42:40,880
webview i don't know if you have done

1120
00:42:40,880 --> 00:42:43,760
this type of research

1121
00:42:46,160 --> 00:42:48,800
so basically i we don't have any

1122
00:42:48,800 --> 00:42:50,560
statistics so

1123
00:42:50,560 --> 00:42:52,480
so that is why we cannot

1124
00:42:52,480 --> 00:42:55,119
come on our specific number but based on

1125
00:42:55,119 --> 00:42:57,119
our analysis what we have observed is

1126
00:42:57,119 --> 00:43:00,560
most of the times i would say

1127
00:43:00,560 --> 00:43:03,359
9 out of 10 times what we have observed

1128
00:43:03,359 --> 00:43:04,880
is that views are not configured

1129
00:43:04,880 --> 00:43:06,240
properly

1130
00:43:06,240 --> 00:43:07,040
so

1131
00:43:07,040 --> 00:43:09,280
what happens is reviews by default have

1132
00:43:09,280 --> 00:43:11,280
certain privileges so these default

1133
00:43:11,280 --> 00:43:12,960
privileges are not even required

1134
00:43:12,960 --> 00:43:14,400
sometimes so that is why we are

1135
00:43:14,400 --> 00:43:16,240
unintentionally

1136
00:43:16,240 --> 00:43:18,640
expanding the attack surface so this is

1137
00:43:18,640 --> 00:43:20,000
something which is very common so

1138
00:43:20,000 --> 00:43:21,760
whenever we are configuring configuring

1139
00:43:21,760 --> 00:43:23,599
we should follow the principle of least

1140
00:43:23,599 --> 00:43:24,640
privilege

1141
00:43:24,640 --> 00:43:26,640
so nine out of ten times what we've

1142
00:43:26,640 --> 00:43:27,760
observed is

1143
00:43:27,760 --> 00:43:30,640
that these are overly permissive so i

1144
00:43:30,640 --> 00:43:32,720
can i can just tell you something based

1145
00:43:32,720 --> 00:43:34,319
on my analysis but we don't have

1146
00:43:34,319 --> 00:43:37,520
statistics behind this but yeah

1147
00:43:37,520 --> 00:43:39,920
this is something which is very common

1148
00:43:39,920 --> 00:43:42,800
yeah i recall that you know webview it's

1149
00:43:42,800 --> 00:43:44,800
uh there are a few some vulnerabilities

1150
00:43:44,800 --> 00:43:46,880
and cds around you know webbings in the

1151
00:43:46,880 --> 00:43:49,839
past right so it's a very sensitive

1152
00:43:49,839 --> 00:43:51,599
it's a very sensitive component as you

1153
00:43:51,599 --> 00:43:54,400
have shown right so powerful still you

1154
00:43:54,400 --> 00:43:56,880
know requires the due diligence right

1155
00:43:56,880 --> 00:43:58,240
that we have to

1156
00:43:58,240 --> 00:43:59,280
so

1157
00:43:59,280 --> 00:44:01,599
yeah again thank you very much folks and

1158
00:44:01,599 --> 00:44:02,880
again uh

1159
00:44:02,880 --> 00:44:05,280
if attendees you have any question we

1160
00:44:05,280 --> 00:44:07,760
have the public channel you can you know

1161
00:44:07,760 --> 00:44:09,440
write there your questions or reach out

1162
00:44:09,440 --> 00:44:11,839
directly to uh

1163
00:44:11,839 --> 00:44:13,760
shiv and in that

1164
00:44:13,760 --> 00:44:16,000
thank you very much gentlemen for your

1165
00:44:16,000 --> 00:44:19,000
time

