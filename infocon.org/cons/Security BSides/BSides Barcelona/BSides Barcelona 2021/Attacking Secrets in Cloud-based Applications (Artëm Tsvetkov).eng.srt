1
00:00:06,319 --> 00:00:08,080
any questions so

2
00:00:08,080 --> 00:00:08,960
um

3
00:00:08,960 --> 00:00:11,599
i'm pretty interested you know by by

4
00:00:11,599 --> 00:00:14,639
this talk um i know you know 100 secrets

5
00:00:14,639 --> 00:00:16,480
is very complicated

6
00:00:16,480 --> 00:00:18,400
and doing it wrong you know i can have

7
00:00:18,400 --> 00:00:19,680
you know tremendous you know

8
00:00:19,680 --> 00:00:21,119
consequences you know for an

9
00:00:21,119 --> 00:00:23,840
organization so i can't wait you know to

10
00:00:23,840 --> 00:00:26,400
see what you brought us today at them so

11
00:00:26,400 --> 00:00:28,400
the floor is yours

12
00:00:28,400 --> 00:00:30,400
cool thanks very much alejandro

13
00:00:30,400 --> 00:00:32,479
uh so this is attacking secrets and

14
00:00:32,479 --> 00:00:34,559
cloud-based applications

15
00:00:34,559 --> 00:00:37,840
hi everybody my name is arjun sudkov

16
00:00:37,840 --> 00:00:39,520
i'm a security engineer at skyscanner

17
00:00:39,520 --> 00:00:42,160
and this is my second time at b-sides

18
00:00:42,160 --> 00:00:45,200
happy to be here again i've been

19
00:00:45,200 --> 00:00:47,120
spending the last 20 years almost all my

20
00:00:47,120 --> 00:00:48,800
life hacking to learn

21
00:00:48,800 --> 00:00:50,800
it never gets old i do freelance

22
00:00:50,800 --> 00:00:53,039
security audits i have certifications

23
00:00:53,039 --> 00:00:54,719
and hobbies and then

24
00:00:54,719 --> 00:00:57,120
software defined radio is a really cool

25
00:00:57,120 --> 00:01:00,000
thing that i'm getting into it

26
00:01:00,000 --> 00:01:01,680
today the agenda

27
00:01:01,680 --> 00:01:03,120
looks like this

28
00:01:03,120 --> 00:01:04,879
first i want to discuss secrets what

29
00:01:04,879 --> 00:01:06,880
they look like and what they are

30
00:01:06,880 --> 00:01:09,119
then we'll take the journey to the cloud

31
00:01:09,119 --> 00:01:11,280
and finally see how we can attack and

32
00:01:11,280 --> 00:01:14,000
defend secrets

33
00:01:14,000 --> 00:01:16,720
so for the purposes of this a secret

34
00:01:16,720 --> 00:01:17,920
will be defined as a piece of

35
00:01:17,920 --> 00:01:19,840
confidential information

36
00:01:19,840 --> 00:01:22,240
that is used for programmatic access so

37
00:01:22,240 --> 00:01:23,920
for instance if you have login

38
00:01:23,920 --> 00:01:26,320
credentials to an email account right

39
00:01:26,320 --> 00:01:27,439
and you just use them through the

40
00:01:27,439 --> 00:01:30,159
browser that's not programmatic

41
00:01:30,159 --> 00:01:32,159
but if you were to write a script and

42
00:01:32,159 --> 00:01:34,320
put those credentials in the script

43
00:01:34,320 --> 00:01:36,079
then that that means you're using it in

44
00:01:36,079 --> 00:01:38,079
a programmatic way and so would fall in

45
00:01:38,079 --> 00:01:41,119
scope of this plain text secret that

46
00:01:41,119 --> 00:01:43,520
term refers to the unencrypted initial

47
00:01:43,520 --> 00:01:45,920
form of the secret itself so

48
00:01:45,920 --> 00:01:48,560
if you had a base64 encoded password

49
00:01:48,560 --> 00:01:49,680
string right

50
00:01:49,680 --> 00:01:51,360
you would say that you obtain a

51
00:01:51,360 --> 00:01:54,000
plaintext secret by base64 decoding that

52
00:01:54,000 --> 00:01:55,439
stream

53
00:01:55,439 --> 00:01:57,920
a hard-coded secret refers to the fact

54
00:01:57,920 --> 00:01:59,680
that the plaintext secret is written

55
00:01:59,680 --> 00:02:02,799
down directly in a file

56
00:02:02,799 --> 00:02:04,799
cloud is

57
00:02:04,799 --> 00:02:06,799
managed infrastructure with a shared

58
00:02:06,799 --> 00:02:09,038
ownership model so it's like a huge data

59
00:02:09,038 --> 00:02:10,800
center that you're responsible for some

60
00:02:10,800 --> 00:02:12,720
stuff but the cloud provider is

61
00:02:12,720 --> 00:02:16,080
responsible for some other stuff

62
00:02:16,080 --> 00:02:18,640
the coupling is a very important concept

63
00:02:18,640 --> 00:02:20,319
that comes into play when we talk about

64
00:02:20,319 --> 00:02:21,280
the cloud

65
00:02:21,280 --> 00:02:24,160
it's not specifically new but it's

66
00:02:24,160 --> 00:02:26,879
definitely a central theme

67
00:02:26,879 --> 00:02:28,800
and what it refers to is the separation

68
00:02:28,800 --> 00:02:30,480
of a single system into operationally

69
00:02:30,480 --> 00:02:32,239
independent components and we'll see how

70
00:02:32,239 --> 00:02:33,840
that plays out throughout the

71
00:02:33,840 --> 00:02:34,840
entire

72
00:02:34,840 --> 00:02:38,400
presentation infrastructures code is a

73
00:02:38,400 --> 00:02:40,720
sort of relatively new thing that came

74
00:02:40,720 --> 00:02:43,040
in with the cloud and machine readable

75
00:02:43,040 --> 00:02:45,280
files used for configuring the cloud and

76
00:02:45,280 --> 00:02:47,200
so just think of it as like a config

77
00:02:47,200 --> 00:02:50,000
file that you submit to your provider

78
00:02:50,000 --> 00:02:51,920
and that config file tells the provider

79
00:02:51,920 --> 00:02:54,160
how to deploy infrastructure what

80
00:02:54,160 --> 00:02:56,720
resources it needs and so on

81
00:02:56,720 --> 00:02:59,200
and then roles and policies again not

82
00:02:59,200 --> 00:03:01,040
something new but made an appearance in

83
00:03:01,040 --> 00:03:02,400
a big way

84
00:03:02,400 --> 00:03:04,319
in the cloud because these are now the

85
00:03:04,319 --> 00:03:06,400
abstractions that you as the client or

86
00:03:06,400 --> 00:03:08,480
is the user defined

87
00:03:08,480 --> 00:03:09,840
to specify authentication and

88
00:03:09,840 --> 00:03:12,400
authorization controls

89
00:03:12,400 --> 00:03:13,599
um

90
00:03:13,599 --> 00:03:15,680
and finally the pipeline

91
00:03:15,680 --> 00:03:18,560
once again not something new uh refers

92
00:03:18,560 --> 00:03:20,080
to an automated sequence of steps for

93
00:03:20,080 --> 00:03:21,360
building testing and deploying

94
00:03:21,360 --> 00:03:23,519
applications and when we talk about the

95
00:03:23,519 --> 00:03:26,720
cloud is pretty much a basic concept uh

96
00:03:26,720 --> 00:03:29,120
because you want to be able to deploy

97
00:03:29,120 --> 00:03:30,879
your code in a repeatable and automated

98
00:03:30,879 --> 00:03:33,519
way

99
00:03:33,519 --> 00:03:36,319
now so the journey looks approximately

100
00:03:36,319 --> 00:03:37,360
like this

101
00:03:37,360 --> 00:03:38,879
and we start off with one host per

102
00:03:38,879 --> 00:03:40,560
application this was a little bit back

103
00:03:40,560 --> 00:03:42,959
in the day where you have your php code

104
00:03:42,959 --> 00:03:45,280
with apache server and mysql running all

105
00:03:45,280 --> 00:03:46,720
of the same place

106
00:03:46,720 --> 00:03:49,360
ftp your files over there right and your

107
00:03:49,360 --> 00:03:53,360
servers will of course be on port 80

108
00:03:53,360 --> 00:03:55,040
if everything hard coded in code and

109
00:03:55,040 --> 00:03:57,760
config files that was all fine

110
00:03:57,760 --> 00:03:59,280
so then

111
00:03:59,280 --> 00:04:01,599
that sort of shifted into separating the

112
00:04:01,599 --> 00:04:04,400
early signs of decoupling so to speak

113
00:04:04,400 --> 00:04:06,799
having one host

114
00:04:06,799 --> 00:04:08,560
with your a web server then having

115
00:04:08,560 --> 00:04:11,920
another host of your database server

116
00:04:11,920 --> 00:04:13,920
that quickly sort of shifted into using

117
00:04:13,920 --> 00:04:15,920
containers because of course having

118
00:04:15,920 --> 00:04:17,918
multiple hosts is very expensive so

119
00:04:17,918 --> 00:04:19,519
you'd have just the one hose but with

120
00:04:19,519 --> 00:04:22,320
isolated containers which could be

121
00:04:22,320 --> 00:04:23,840
linked together

122
00:04:23,840 --> 00:04:27,840
and networked together and interoperable

123
00:04:27,840 --> 00:04:29,520
and this was good

124
00:04:29,520 --> 00:04:30,560
and then

125
00:04:30,560 --> 00:04:32,880
sort of scaling that we saw

126
00:04:32,880 --> 00:04:35,759
data centers which were the big places

127
00:04:35,759 --> 00:04:37,280
with people

128
00:04:37,280 --> 00:04:39,840
who would be managing hardware and you

129
00:04:39,840 --> 00:04:41,520
know the network behind this hardware

130
00:04:41,520 --> 00:04:43,600
linking it all together and you could

131
00:04:43,600 --> 00:04:45,520
rent some space in there and deploy your

132
00:04:45,520 --> 00:04:47,280
application there

133
00:04:47,280 --> 00:04:49,040
but the problem was that the scaling was

134
00:04:49,040 --> 00:04:51,600
manual if you had a lot of traffic

135
00:04:51,600 --> 00:04:54,160
and your resource you were just handling

136
00:04:54,160 --> 00:04:56,080
it well you needed to go in and make

137
00:04:56,080 --> 00:04:58,160
some decisions provision more

138
00:04:58,160 --> 00:05:00,880
uh resources to handle that traffic on

139
00:05:00,880 --> 00:05:02,000
the other hand

140
00:05:02,000 --> 00:05:03,919
if you have a lot of resources and then

141
00:05:03,919 --> 00:05:05,919
you have very little traffic

142
00:05:05,919 --> 00:05:07,919
effectively you're paying a lot for an

143
00:05:07,919 --> 00:05:09,520
infrastructure that you're not using and

144
00:05:09,520 --> 00:05:10,479
so that's

145
00:05:10,479 --> 00:05:12,240
not good

146
00:05:12,240 --> 00:05:15,840
and the cloud emerged out of that

147
00:05:15,840 --> 00:05:17,919
and apart from just managing the

148
00:05:17,919 --> 00:05:20,240
hardware the cloud was now managing the

149
00:05:20,240 --> 00:05:22,880
hardware and some of the software

150
00:05:22,880 --> 00:05:24,880
and it provided some really cool

151
00:05:24,880 --> 00:05:27,919
features like auto scaling

152
00:05:27,919 --> 00:05:30,400
because docker wasn't built to scale

153
00:05:30,400 --> 00:05:32,479
and cloud providers

154
00:05:32,479 --> 00:05:34,000
they designed these solutions that

155
00:05:34,000 --> 00:05:35,759
allowed you to scale it i think this was

156
00:05:35,759 --> 00:05:38,479
a real game changer overall

157
00:05:38,479 --> 00:05:40,400
there was you know a secret manager as a

158
00:05:40,400 --> 00:05:42,320
product so there's all these different

159
00:05:42,320 --> 00:05:43,440
products that you could use and there

160
00:05:43,440 --> 00:05:45,360
was this infrastructure scope syntax

161
00:05:45,360 --> 00:05:47,360
that you could use to define which

162
00:05:47,360 --> 00:05:48,960
resources you needed

163
00:05:48,960 --> 00:05:50,720
and of course roles and policies made an

164
00:05:50,720 --> 00:05:52,560
appearance because

165
00:05:52,560 --> 00:05:53,440
that's

166
00:05:53,440 --> 00:05:55,280
you know they are the links between the

167
00:05:55,280 --> 00:05:56,960
different components

168
00:05:56,960 --> 00:06:00,319
define uh how they should interoperate

169
00:06:00,319 --> 00:06:01,680
and then finally

170
00:06:01,680 --> 00:06:02,560
that

171
00:06:02,560 --> 00:06:04,800
you know today we see kubernetes as a

172
00:06:04,800 --> 00:06:07,520
really big thing trending and

173
00:06:07,520 --> 00:06:08,479
so

174
00:06:08,479 --> 00:06:10,960
one way to look at it is kubernetes

175
00:06:10,960 --> 00:06:12,479
first of all it's open source and has

176
00:06:12,479 --> 00:06:13,919
all these built-in features it's no

177
00:06:13,919 --> 00:06:16,240
longer a provider that and

178
00:06:16,240 --> 00:06:18,000
like features you pay for or products

179
00:06:18,000 --> 00:06:20,160
you pay for it's already built in

180
00:06:20,160 --> 00:06:22,319
kubernetes already knows how to handle

181
00:06:22,319 --> 00:06:24,479
auto scaling auto balancing it knows how

182
00:06:24,479 --> 00:06:26,639
to roll out roll back things

183
00:06:26,639 --> 00:06:29,199
it can do software updates at scale it

184
00:06:29,199 --> 00:06:30,639
has a secret manager and this is all

185
00:06:30,639 --> 00:06:32,800
built in like uh you know all you have

186
00:06:32,800 --> 00:06:34,400
to do is just define that you want to

187
00:06:34,400 --> 00:06:36,639
use it how you want to use it

188
00:06:36,639 --> 00:06:39,440
and what that leads into the tendency is

189
00:06:39,440 --> 00:06:41,600
application centric what that means is

190
00:06:41,600 --> 00:06:42,880
that

191
00:06:42,880 --> 00:06:45,759
uh we're trying to get developers uh to

192
00:06:45,759 --> 00:06:48,400
write code and not worry about the

193
00:06:48,400 --> 00:06:51,120
infrastructure setting it up or managing

194
00:06:51,120 --> 00:06:52,880
all they have to do now is just provide

195
00:06:52,880 --> 00:06:54,800
this additional configuration file

196
00:06:54,800 --> 00:06:56,800
infrastructures code that tells

197
00:06:56,800 --> 00:06:59,360
the cloud provider or kubernetes what

198
00:06:59,360 --> 00:07:01,759
resources are needed to support the

199
00:07:01,759 --> 00:07:03,120
application

200
00:07:03,120 --> 00:07:06,080
the code itself

201
00:07:06,080 --> 00:07:07,680
and when we zoom in on that the

202
00:07:07,680 --> 00:07:10,000
applications themselves the application

203
00:07:10,000 --> 00:07:12,240
code and how it works is also decoupled

204
00:07:12,240 --> 00:07:14,080
into several components

205
00:07:14,080 --> 00:07:15,599
and typically

206
00:07:15,599 --> 00:07:17,280
there are three of them one of them

207
00:07:17,280 --> 00:07:19,360
being the view which is generally like

208
00:07:19,360 --> 00:07:21,280
the front end it could be you know

209
00:07:21,280 --> 00:07:24,479
graphical it could be programmatic

210
00:07:24,479 --> 00:07:26,639
uh this is what your users sort of see

211
00:07:26,639 --> 00:07:27,919
and access

212
00:07:27,919 --> 00:07:29,759
and then you have controllers which is

213
00:07:29,759 --> 00:07:31,759
like the back end and this is your

214
00:07:31,759 --> 00:07:33,840
business logic it knows how to handle

215
00:07:33,840 --> 00:07:36,160
requests it knows how to handle data

216
00:07:36,160 --> 00:07:39,520
what to do with it and so on

217
00:07:39,759 --> 00:07:42,080
and then there's data which could be a

218
00:07:42,080 --> 00:07:43,680
database could be a cache but it

219
00:07:43,680 --> 00:07:45,840
provides some sort of model a structured

220
00:07:45,840 --> 00:07:47,680
model for data

221
00:07:47,680 --> 00:07:50,160
that the application expects to use

222
00:07:50,160 --> 00:07:52,319
and manipulate

223
00:07:52,319 --> 00:07:54,319
and then another dimension that that i

224
00:07:54,319 --> 00:07:56,840
want to make a point about is

225
00:07:56,840 --> 00:07:59,759
secrets and i think this is another

226
00:07:59,759 --> 00:08:01,840
damage that can be completely decoupled

227
00:08:01,840 --> 00:08:04,160
from applications and it's important

228
00:08:04,160 --> 00:08:06,319
because really secrets are the ident

229
00:08:06,319 --> 00:08:08,080
they are they're always associated with

230
00:08:08,080 --> 00:08:10,400
identity and with some permissions

231
00:08:10,400 --> 00:08:12,560
this is a security area

232
00:08:12,560 --> 00:08:13,599
and for the purposes of this

233
00:08:13,599 --> 00:08:15,280
presentation i'm going to be using this

234
00:08:15,280 --> 00:08:17,199
icon to indicate a secret

235
00:08:17,199 --> 00:08:18,960
now i could really find it like a good

236
00:08:18,960 --> 00:08:20,879
icon to indicate a secret so i use this

237
00:08:20,879 --> 00:08:22,400
one to indicate

238
00:08:22,400 --> 00:08:24,080
the moment you know you

239
00:08:24,080 --> 00:08:25,919
disclose some secret information your

240
00:08:25,919 --> 00:08:28,319
heart skips a bit

241
00:08:28,319 --> 00:08:29,680
so yeah

242
00:08:29,680 --> 00:08:30,720
and

243
00:08:30,720 --> 00:08:32,880
what you can see from here is that

244
00:08:32,880 --> 00:08:34,719
really there will be secrets always

245
00:08:34,719 --> 00:08:36,719
associated between

246
00:08:36,719 --> 00:08:38,640
uh associated with connections between

247
00:08:38,640 --> 00:08:40,719
the decoupled components

248
00:08:40,719 --> 00:08:42,719
and so they're like sort of a glue or a

249
00:08:42,719 --> 00:08:45,279
necessary part of a glue

250
00:08:45,279 --> 00:08:47,519
that keeps everything ticking together

251
00:08:47,519 --> 00:08:49,839
and we'll see how that

252
00:08:49,839 --> 00:08:51,440
plays out

253
00:08:51,440 --> 00:08:53,360
now to get all of that deployed into the

254
00:08:53,360 --> 00:08:56,640
cloud as i mentioned we use a pipeline

255
00:08:56,640 --> 00:08:59,279
pipeline is a series of automated steps

256
00:08:59,279 --> 00:09:00,959
and this here indicates that the process

257
00:09:00,959 --> 00:09:03,279
is continuous it means that developers

258
00:09:03,279 --> 00:09:05,279
keep on writing code pipeline keeps on

259
00:09:05,279 --> 00:09:06,720
doing stuff with the code and then

260
00:09:06,720 --> 00:09:08,399
feeding back some information to the

261
00:09:08,399 --> 00:09:10,720
developer whether it succeeded

262
00:09:10,720 --> 00:09:12,480
whether it failed whether it was able to

263
00:09:12,480 --> 00:09:14,240
deploy and so on and this process can

264
00:09:14,240 --> 00:09:16,480
keep on going it's repeatable and

265
00:09:16,480 --> 00:09:18,080
automated

266
00:09:18,080 --> 00:09:18,959
and

267
00:09:18,959 --> 00:09:20,240
the general

268
00:09:20,240 --> 00:09:22,320
sort of steps that happen first is

269
00:09:22,320 --> 00:09:24,640
downloading the code once the code

270
00:09:24,640 --> 00:09:26,880
repository receives some code it will

271
00:09:26,880 --> 00:09:29,680
use something like a web hook to notify

272
00:09:29,680 --> 00:09:31,200
the pipeline that there's new code the

273
00:09:31,200 --> 00:09:33,760
pipeline will use a token to access the

274
00:09:33,760 --> 00:09:36,720
repository to pull the code download it

275
00:09:36,720 --> 00:09:39,440
and it will install requirements and

276
00:09:39,440 --> 00:09:42,080
this can involve uh using internal

277
00:09:42,080 --> 00:09:44,720
package repositories and to use them you

278
00:09:44,720 --> 00:09:46,800
will always need some kind of token or

279
00:09:46,800 --> 00:09:50,320
secret to access that

280
00:09:50,320 --> 00:09:52,800
then testing

281
00:09:52,800 --> 00:09:55,760
generally uh the tests the testing phase

282
00:09:55,760 --> 00:09:57,839
consists of linting which refers to code

283
00:09:57,839 --> 00:09:58,800
style

284
00:09:58,800 --> 00:09:59,600
so

285
00:09:59,600 --> 00:10:01,760
it's like think about single quotes

286
00:10:01,760 --> 00:10:04,320
versus double both how many spaces for a

287
00:10:04,320 --> 00:10:07,519
tab so things like these

288
00:10:07,600 --> 00:10:10,480
unit tests they refer to

289
00:10:10,480 --> 00:10:12,720
testing the application code function by

290
00:10:12,720 --> 00:10:14,000
function

291
00:10:14,000 --> 00:10:15,920
and then finally you can also add a

292
00:10:15,920 --> 00:10:18,560
security test and here you can throw in

293
00:10:18,560 --> 00:10:19,680
your

294
00:10:19,680 --> 00:10:22,160
automation tooling and as you will see

295
00:10:22,160 --> 00:10:24,720
it's it's very useful and at sky scanner

296
00:10:24,720 --> 00:10:26,560
we have worked on this problem and

297
00:10:26,560 --> 00:10:28,079
towards the end we'll see

298
00:10:28,079 --> 00:10:30,800
what things you could use for this

299
00:10:30,800 --> 00:10:32,880
so then if the tests went well

300
00:10:32,880 --> 00:10:35,120
the pipeline will start building uh the

301
00:10:35,120 --> 00:10:37,440
application image and when it builds it

302
00:10:37,440 --> 00:10:38,800
it will publish it into an image

303
00:10:38,800 --> 00:10:41,279
repository which again people use some

304
00:10:41,279 --> 00:10:43,200
kind of secret or a policy associated

305
00:10:43,200 --> 00:10:47,200
with accessing that image repository

306
00:10:47,200 --> 00:10:48,880
and finally deploy the infrastructure

307
00:10:48,880 --> 00:10:50,640
and so it will use once again some kind

308
00:10:50,640 --> 00:10:53,120
of secret to send to the cloud provider

309
00:10:53,120 --> 00:10:55,279
the infrastructure is code configuration

310
00:10:55,279 --> 00:10:57,360
that will reference this newly published

311
00:10:57,360 --> 00:10:58,320
image

312
00:10:58,320 --> 00:11:01,200
and so the cloud will deploy all of that

313
00:11:01,200 --> 00:11:02,560
and then the pipeline will be sending

314
00:11:02,560 --> 00:11:04,160
notifications back to the developer

315
00:11:04,160 --> 00:11:06,959
again some kind of web hook probably

316
00:11:06,959 --> 00:11:08,000
to

317
00:11:08,000 --> 00:11:09,360
let the developer know let's see what's

318
00:11:09,360 --> 00:11:10,880
going on

319
00:11:10,880 --> 00:11:13,120
uh just to give you an example

320
00:11:13,120 --> 00:11:15,120
a pipeline configuration is just like a

321
00:11:15,120 --> 00:11:17,600
file it can be one or maybe multiple

322
00:11:17,600 --> 00:11:20,399
files per project per code repository

323
00:11:20,399 --> 00:11:22,240
but generally they're still in the code

324
00:11:22,240 --> 00:11:24,240
repository

325
00:11:24,240 --> 00:11:25,760
here this one here is from github

326
00:11:25,760 --> 00:11:26,959
actions

327
00:11:26,959 --> 00:11:29,040
in steps you can see the steps that i

328
00:11:29,040 --> 00:11:30,240
was describing

329
00:11:30,240 --> 00:11:32,320
installing linking and so on

330
00:11:32,320 --> 00:11:33,839
they are sequential so they always wait

331
00:11:33,839 --> 00:11:35,839
for the previous step to finish before

332
00:11:35,839 --> 00:11:37,360
starting the next one

333
00:11:37,360 --> 00:11:40,480
and here at the end

334
00:11:40,800 --> 00:11:42,880
this step needs a couple of secrets and

335
00:11:42,880 --> 00:11:44,480
what you can see here is that the

336
00:11:44,480 --> 00:11:46,640
pipeline exposes the secrets as

337
00:11:46,640 --> 00:11:48,720
environment variables

338
00:11:48,720 --> 00:11:52,000
and through these secret placeholders so

339
00:11:52,000 --> 00:11:53,519
it's not the real secret it's just like

340
00:11:53,519 --> 00:11:56,959
a username for a secret and this moment

341
00:11:56,959 --> 00:11:59,360
right here is key to decoupling secrets

342
00:11:59,360 --> 00:12:01,600
from the application code

343
00:12:01,600 --> 00:12:02,800
and we'll see

344
00:12:02,800 --> 00:12:05,680
how that plays out

345
00:12:05,760 --> 00:12:08,720
to put it all all together end-to-end

346
00:12:08,720 --> 00:12:10,560
this is the diagram uh there's a lot of

347
00:12:10,560 --> 00:12:12,240
information on it so just work through

348
00:12:12,240 --> 00:12:13,440
it with me

349
00:12:13,440 --> 00:12:14,800
right here in the middle we have the

350
00:12:14,800 --> 00:12:18,000
pipeline as i was just describing it

351
00:12:18,000 --> 00:12:19,760
then here on the left we have the

352
00:12:19,760 --> 00:12:21,680
developers that are going going to be

353
00:12:21,680 --> 00:12:23,120
writing some code and they're going to

354
00:12:23,120 --> 00:12:24,720
be using some kind of token to send that

355
00:12:24,720 --> 00:12:26,800
code to the repository

356
00:12:26,800 --> 00:12:29,200
then we saw what the pipeline will do

357
00:12:29,200 --> 00:12:31,839
and so once it deploys the app the

358
00:12:31,839 --> 00:12:33,760
application itself in the backend may

359
00:12:33,760 --> 00:12:37,040
have multiple secrets for accessing

360
00:12:37,040 --> 00:12:40,079
databases external service providers

361
00:12:40,079 --> 00:12:44,079
some kind of integrations what have you

362
00:12:45,040 --> 00:12:47,519
in addition the graphical user interface

363
00:12:47,519 --> 00:12:49,279
may have multiple secrets if you're

364
00:12:49,279 --> 00:12:50,240
using

365
00:12:50,240 --> 00:12:52,399
client-side widgets like

366
00:12:52,399 --> 00:12:56,079
a map or a customer service or some kind

367
00:12:56,079 --> 00:12:57,600
of contact

368
00:12:57,600 --> 00:12:59,279
bought

369
00:12:59,279 --> 00:13:00,480
they will all

370
00:13:00,480 --> 00:13:02,560
probably use some kind of token and this

371
00:13:02,560 --> 00:13:04,480
token even though it's obviously public

372
00:13:04,480 --> 00:13:06,800
being in the gui it still needs to be

373
00:13:06,800 --> 00:13:08,800
restricted

374
00:13:08,800 --> 00:13:10,399
now your users they're going to be

375
00:13:10,399 --> 00:13:12,000
accessing the application through the

376
00:13:12,000 --> 00:13:14,079
graphical interface and again they can

377
00:13:14,079 --> 00:13:15,839
authenticate themselves in the system

378
00:13:15,839 --> 00:13:17,680
using some kind of secret username and

379
00:13:17,680 --> 00:13:19,360
password typically

380
00:13:19,360 --> 00:13:21,600
and then you might also have some kind

381
00:13:21,600 --> 00:13:22,480
of

382
00:13:22,480 --> 00:13:24,320
client services that are consuming data

383
00:13:24,320 --> 00:13:26,480
from you or pushing data to you and they

384
00:13:26,480 --> 00:13:28,079
will also use some kind of token to

385
00:13:28,079 --> 00:13:29,839
authenticate them

386
00:13:29,839 --> 00:13:31,920
and so in all of this you can see that

387
00:13:31,920 --> 00:13:35,040
there's a lot of secrets

388
00:13:35,040 --> 00:13:37,519
it's not something specifically new but

389
00:13:37,519 --> 00:13:39,440
you can see how they have multiplied and

390
00:13:39,440 --> 00:13:41,600
spread all over

391
00:13:41,600 --> 00:13:43,120
and

392
00:13:43,120 --> 00:13:45,279
they have different purposes different

393
00:13:45,279 --> 00:13:46,959
scopes and and

394
00:13:46,959 --> 00:13:48,560
different types

395
00:13:48,560 --> 00:13:49,680
and

396
00:13:49,680 --> 00:13:51,199
there's different ways to attack all of

397
00:13:51,199 --> 00:13:53,040
this to gain

398
00:13:53,040 --> 00:13:56,480
advantage and to hack the application

399
00:13:56,480 --> 00:13:59,519
and so the general areas of attack

400
00:13:59,519 --> 00:14:00,800
there's three of them the first one

401
00:14:00,800 --> 00:14:03,600
being the repository

402
00:14:03,600 --> 00:14:04,720
and

403
00:14:04,720 --> 00:14:07,760
to attack it we can attack developers uh

404
00:14:07,760 --> 00:14:10,079
through social engineering malware

405
00:14:10,079 --> 00:14:11,600
infection or sometimes people

406
00:14:11,600 --> 00:14:15,120
unintentionally disclose their secrets

407
00:14:15,120 --> 00:14:17,600
and so using ocean

408
00:14:17,600 --> 00:14:19,279
potentially an attacker can recover that

409
00:14:19,279 --> 00:14:21,839
and then use a developer secret to read

410
00:14:21,839 --> 00:14:23,920
or write

411
00:14:23,920 --> 00:14:28,160
to a code to a private code repository

412
00:14:29,600 --> 00:14:31,760
having that of course you can exfiltrate

413
00:14:31,760 --> 00:14:34,240
information and potentially uh

414
00:14:34,240 --> 00:14:36,560
execute in the supply and chain attacks

415
00:14:36,560 --> 00:14:38,639
we'll see how that works in the later

416
00:14:38,639 --> 00:14:40,959
slide

417
00:14:42,079 --> 00:14:44,079
in addition you can also do code

418
00:14:44,079 --> 00:14:46,320
injection through compromised automation

419
00:14:46,320 --> 00:14:47,360
tooling

420
00:14:47,360 --> 00:14:48,800
so

421
00:14:48,800 --> 00:14:50,320
today

422
00:14:50,320 --> 00:14:52,240
more often than not in a repository

423
00:14:52,240 --> 00:14:53,760
there will be some kind of bot or

424
00:14:53,760 --> 00:14:56,399
integration that's going to be

425
00:14:56,399 --> 00:14:58,720
checking the request maybe notifying

426
00:14:58,720 --> 00:15:01,519
people perhaps commenting with a cool

427
00:15:01,519 --> 00:15:03,279
gif

428
00:15:03,279 --> 00:15:06,880
uh all of these are third-party

429
00:15:06,880 --> 00:15:08,399
things applications right and they're

430
00:15:08,399 --> 00:15:09,760
writing inside

431
00:15:09,760 --> 00:15:11,760
your code repository and so naturally

432
00:15:11,760 --> 00:15:13,839
they may have access

433
00:15:13,839 --> 00:15:15,680
to secrets

434
00:15:15,680 --> 00:15:16,480
or

435
00:15:16,480 --> 00:15:19,440
just code in general and here

436
00:15:19,440 --> 00:15:21,040
a key point to make is that if a

437
00:15:21,040 --> 00:15:22,160
developer

438
00:15:22,160 --> 00:15:24,560
writes code that has hard-coded secrets

439
00:15:24,560 --> 00:15:26,480
these hardcoded secrets are exposed

440
00:15:26,480 --> 00:15:29,680
directly in the code repository

441
00:15:29,680 --> 00:15:32,000
as well as everything that goes further

442
00:15:32,000 --> 00:15:34,240
down the line the pipeline and the

443
00:15:34,240 --> 00:15:35,440
runtime

444
00:15:35,440 --> 00:15:36,639
in the cloud

445
00:15:36,639 --> 00:15:38,639
if the credentials are hard-coded we may

446
00:15:38,639 --> 00:15:40,280
have heard

447
00:15:40,280 --> 00:15:41,440
[Music]

448
00:15:41,440 --> 00:15:42,959
uh

449
00:15:42,959 --> 00:15:45,279
stealing the

450
00:15:45,279 --> 00:15:48,160
web hook for example if you have in your

451
00:15:48,160 --> 00:15:49,839
pipeline configuration file as we saw if

452
00:15:49,839 --> 00:15:51,600
you have it hard put it in there to

453
00:15:51,600 --> 00:15:52,880
notify you

454
00:15:52,880 --> 00:15:55,040
so the attacker could read that file get

455
00:15:55,040 --> 00:15:57,040
the web hook and potentially

456
00:15:57,040 --> 00:15:58,079
uh

457
00:15:58,079 --> 00:16:00,800
continue on triggering build denying you

458
00:16:00,800 --> 00:16:02,160
sort of

459
00:16:02,160 --> 00:16:03,920
for building your own

460
00:16:03,920 --> 00:16:05,519
services because your build holes will

461
00:16:05,519 --> 00:16:08,560
always be building something

462
00:16:08,560 --> 00:16:09,600
now

463
00:16:09,600 --> 00:16:11,680
when we look at defending that

464
00:16:11,680 --> 00:16:13,440
first line of defense is due diligence

465
00:16:13,440 --> 00:16:15,600
which refers to evaluating what third

466
00:16:15,600 --> 00:16:18,160
party integrations you're bringing in

467
00:16:18,160 --> 00:16:19,440
uh

468
00:16:19,440 --> 00:16:21,360
do security self

469
00:16:21,360 --> 00:16:22,880
not some securities assessment

470
00:16:22,880 --> 00:16:25,199
questionnaires which is asking

471
00:16:25,199 --> 00:16:27,199
the providers how they handle security

472
00:16:27,199 --> 00:16:28,880
how they manage data

473
00:16:28,880 --> 00:16:30,959
do your own security audit

474
00:16:30,959 --> 00:16:32,959
you know reality versus expectation kind

475
00:16:32,959 --> 00:16:34,399
of thing

476
00:16:34,399 --> 00:16:35,440
check it

477
00:16:35,440 --> 00:16:37,920
um minimal privilege this is a big one

478
00:16:37,920 --> 00:16:41,519
restricting scope of the sequence so if

479
00:16:41,519 --> 00:16:43,680
your one developer token is able to

480
00:16:43,680 --> 00:16:45,839
access all the repositories read them

481
00:16:45,839 --> 00:16:47,279
and write to them

482
00:16:47,279 --> 00:16:48,880
that's very different from you know

483
00:16:48,880 --> 00:16:50,560
stealing a token that only has a

484
00:16:50,560 --> 00:16:53,360
specific repository in its access

485
00:16:53,360 --> 00:16:55,680
oops

486
00:16:56,000 --> 00:16:58,160
use unique expirable tokens so that you

487
00:16:58,160 --> 00:16:59,839
can identify in case of a leak you can

488
00:16:59,839 --> 00:17:03,600
identify who was affected how and so on

489
00:17:03,600 --> 00:17:06,720
uh using unique web hooks for triggering

490
00:17:06,720 --> 00:17:08,720
builds so and sort of functional

491
00:17:08,720 --> 00:17:11,119
segmentation right if you have one web

492
00:17:11,119 --> 00:17:12,319
hook

493
00:17:12,319 --> 00:17:13,760
that the attacker has and now the

494
00:17:13,760 --> 00:17:16,079
attacker can build any repository with

495
00:17:16,079 --> 00:17:17,280
that hook

496
00:17:17,280 --> 00:17:20,160
it might give a much bigger advantage

497
00:17:20,160 --> 00:17:22,000
and finally avoiding hardcoded secrets

498
00:17:22,000 --> 00:17:24,799
as i mentioned is a huge one because

499
00:17:24,799 --> 00:17:26,720
avoiding them will prevent them showing

500
00:17:26,720 --> 00:17:28,160
up all throughout the pipeline and

501
00:17:28,160 --> 00:17:29,840
avoiding them

502
00:17:29,840 --> 00:17:32,720
is mainly using these placeholders as i

503
00:17:32,720 --> 00:17:36,080
already showed in the pipeline example

504
00:17:36,080 --> 00:17:38,480
in code you can also use things like

505
00:17:38,480 --> 00:17:39,280
these

506
00:17:39,280 --> 00:17:40,880
environment variables so your app

507
00:17:40,880 --> 00:17:43,280
expects the api key to be there

508
00:17:43,280 --> 00:17:45,200
and when it starts running it first

509
00:17:45,200 --> 00:17:47,200
checks that key and then does stuff with

510
00:17:47,200 --> 00:17:48,080
you

511
00:17:48,080 --> 00:17:50,640
in this case you're avoiding a hardcore

512
00:17:50,640 --> 00:17:52,720
hard-coded api key in here and if you

513
00:17:52,720 --> 00:17:54,320
have a config file you can also use

514
00:17:54,320 --> 00:17:56,880
placeholders here the format is you know

515
00:17:56,880 --> 00:17:58,720
you can pick any format

516
00:17:58,720 --> 00:18:00,400
i guess it will largely depend on

517
00:18:00,400 --> 00:18:02,080
whether your pipeline

518
00:18:02,080 --> 00:18:05,120
is capable to of automatic substitution

519
00:18:05,120 --> 00:18:07,840
in these static files or not if not then

520
00:18:07,840 --> 00:18:09,840
what you can do is just write a simple

521
00:18:09,840 --> 00:18:11,520
shell script or python script what have

522
00:18:11,520 --> 00:18:13,360
you that would substitute these

523
00:18:13,360 --> 00:18:15,440
variables for you again using something

524
00:18:15,440 --> 00:18:16,720
like this

525
00:18:16,720 --> 00:18:18,400
alternatively if you don't want to use

526
00:18:18,400 --> 00:18:21,360
environment you can use a request to a

527
00:18:21,360 --> 00:18:24,320
secret service api like a secret manager

528
00:18:24,320 --> 00:18:26,160
you would request it with

529
00:18:26,160 --> 00:18:28,000
for example this key and then the

530
00:18:28,000 --> 00:18:30,400
service would reply to you with a secret

531
00:18:30,400 --> 00:18:32,880
value which again would avoid having the

532
00:18:32,880 --> 00:18:37,120
actual hard-coded secret value in there

533
00:18:37,360 --> 00:18:40,480
moving on to attacking a pipeline

534
00:18:40,480 --> 00:18:41,840
uh

535
00:18:41,840 --> 00:18:43,600
the pipeline can be attacked through a

536
00:18:43,600 --> 00:18:45,280
supply chain attack

537
00:18:45,280 --> 00:18:48,080
and so this attack might happen

538
00:18:48,080 --> 00:18:49,840
because of compromise packages or

539
00:18:49,840 --> 00:18:51,280
dependencies

540
00:18:51,280 --> 00:18:53,520
and

541
00:18:53,919 --> 00:18:57,120
in addition dependency confusion

542
00:18:57,120 --> 00:18:58,880
it happens on this page when the

543
00:18:58,880 --> 00:19:00,799
pipeline starts building the code and

544
00:19:00,799 --> 00:19:02,160
it's pulling some

545
00:19:02,160 --> 00:19:04,240
dependencies that it needs to install

546
00:19:04,240 --> 00:19:07,520
them so that the app can run

547
00:19:07,520 --> 00:19:10,240
and one really really cool case was by

548
00:19:10,240 --> 00:19:12,640
this guy alex berson

549
00:19:12,640 --> 00:19:13,840
uh

550
00:19:13,840 --> 00:19:14,880
he

551
00:19:14,880 --> 00:19:16,320
came up with this clever trick so

552
00:19:16,320 --> 00:19:17,679
essentially

553
00:19:17,679 --> 00:19:20,160
what happened was here you had some uh

554
00:19:20,160 --> 00:19:21,679
in this case paypal

555
00:19:21,679 --> 00:19:23,280
it's a paper project it had some

556
00:19:23,280 --> 00:19:24,880
dependencies

557
00:19:24,880 --> 00:19:27,200
and these right here highlighted in red

558
00:19:27,200 --> 00:19:29,200
these were private things right they had

559
00:19:29,200 --> 00:19:31,120
them in their own internal repository

560
00:19:31,120 --> 00:19:33,200
and they weren't in the public npm

561
00:19:33,200 --> 00:19:35,120
and so what alex did was he just

562
00:19:35,120 --> 00:19:37,919
basically published a public npm package

563
00:19:37,919 --> 00:19:40,240
cpp logger version one

564
00:19:40,240 --> 00:19:42,720
and then all this pipeline tooling or

565
00:19:42,720 --> 00:19:44,880
sorry the code repository tooling that

566
00:19:44,880 --> 00:19:46,559
bumps up your versions to keep your

567
00:19:46,559 --> 00:19:49,120
repository updated it basically saw that

568
00:19:49,120 --> 00:19:51,280
there was a newer version of this

569
00:19:51,280 --> 00:19:52,640
and it pulled it from the public

570
00:19:52,640 --> 00:19:54,559
repository and so

571
00:19:54,559 --> 00:19:56,320
here you can imagine that's like super

572
00:19:56,320 --> 00:19:58,160
very critical because you're pulling

573
00:19:58,160 --> 00:19:59,120
code

574
00:19:59,120 --> 00:20:02,480
right directly into your python

575
00:20:02,480 --> 00:20:03,679
and

576
00:20:03,679 --> 00:20:04,960
you know to make

577
00:20:04,960 --> 00:20:06,960
just to mention that we we're gonna have

578
00:20:06,960 --> 00:20:08,880
around five more meetings you know for

579
00:20:08,880 --> 00:20:10,640
the presentation

580
00:20:10,640 --> 00:20:13,120
uh okay you know uh hurrying up

581
00:20:13,120 --> 00:20:16,000
uh to make things worse uh this thing

582
00:20:16,000 --> 00:20:18,080
the pipeline normally runs as root so

583
00:20:18,080 --> 00:20:19,520
you're having a

584
00:20:19,520 --> 00:20:23,039
arbitrary code as repenting in there

585
00:20:23,039 --> 00:20:25,679
overriding pipeline configuration

586
00:20:25,679 --> 00:20:27,520
if possible is another attack vector

587
00:20:27,520 --> 00:20:29,039
which would allow you to

588
00:20:29,039 --> 00:20:30,640
maybe leak

589
00:20:30,640 --> 00:20:32,720
secrets from the pipeline

590
00:20:32,720 --> 00:20:34,240
an injection additionally can be done

591
00:20:34,240 --> 00:20:35,440
through pull requests and there was

592
00:20:35,440 --> 00:20:37,760
another case with travis ci

593
00:20:37,760 --> 00:20:41,919
and where they had masking of

594
00:20:41,919 --> 00:20:43,840
pipeline secrets but then something

595
00:20:43,840 --> 00:20:46,400
happened and this bug was disclosing uh

596
00:20:46,400 --> 00:20:48,480
secrets through an injection of pull

597
00:20:48,480 --> 00:20:49,679
requests

598
00:20:49,679 --> 00:20:51,520
through injection injecting environment

599
00:20:51,520 --> 00:20:54,799
variables in the polyrequest

600
00:20:56,080 --> 00:20:58,000
and so finally common injection through

601
00:20:58,000 --> 00:20:59,840
compromised automation doing the same if

602
00:20:59,840 --> 00:21:01,840
your pipeline here uses

603
00:21:01,840 --> 00:21:04,080
any kind of docker image or what have

604
00:21:04,080 --> 00:21:06,880
you a package that is not managed by you

605
00:21:06,880 --> 00:21:09,280
it's third party and if somebody

606
00:21:09,280 --> 00:21:11,200
compromises that once again it's very

607
00:21:11,200 --> 00:21:14,720
similar to a supply chain attack

608
00:21:15,039 --> 00:21:17,520
uh defending that the first line is once

609
00:21:17,520 --> 00:21:19,840
again due diligence uh making sure you

610
00:21:19,840 --> 00:21:21,679
know what is running in there

611
00:21:21,679 --> 00:21:22,480
uh

612
00:21:22,480 --> 00:21:25,360
hardening the build host so if you

613
00:21:25,360 --> 00:21:27,360
if you can run it not as root perfect

614
00:21:27,360 --> 00:21:29,679
restricting connect to network access

615
00:21:29,679 --> 00:21:31,760
so it doesn't have doesn't so it can't

616
00:21:31,760 --> 00:21:34,480
access all the internet in the world

617
00:21:34,480 --> 00:21:36,480
uh locking dependency scope in your

618
00:21:36,480 --> 00:21:38,799
packages to make sure that when you

619
00:21:38,799 --> 00:21:40,480
download the internal packages they're

620
00:21:40,480 --> 00:21:42,080
actually downloaded from your internal

621
00:21:42,080 --> 00:21:43,440
repository

622
00:21:43,440 --> 00:21:46,000
in npm you can scope them

623
00:21:46,000 --> 00:21:47,520
um

624
00:21:47,520 --> 00:21:49,919
taking over registering in public

625
00:21:49,919 --> 00:21:52,720
repositories registering the same names

626
00:21:52,720 --> 00:21:55,520
to prevent people from uh hijacking them

627
00:21:55,520 --> 00:21:57,679
in the way that alex did

628
00:21:57,679 --> 00:22:00,000
and of course avoid using secrets and

629
00:22:00,000 --> 00:22:03,360
pull requests in general

630
00:22:03,360 --> 00:22:06,000
uh finally attacking the application uh

631
00:22:06,000 --> 00:22:08,559
part here all the same wasp stuff still

632
00:22:08,559 --> 00:22:10,880
applies in particular path traversal or

633
00:22:10,880 --> 00:22:12,480
local file inclusion and remote code

634
00:22:12,480 --> 00:22:13,760
execution

635
00:22:13,760 --> 00:22:16,240
are nice because you can disclose

636
00:22:16,240 --> 00:22:18,080
hard-coded secrets

637
00:22:18,080 --> 00:22:20,720
and potentially with our ce call

638
00:22:20,720 --> 00:22:23,120
other endpoints to retrieve them

639
00:22:23,120 --> 00:22:25,919
if you have unrestricted api keys these

640
00:22:25,919 --> 00:22:27,200
can be abused

641
00:22:27,200 --> 00:22:28,320
[Music]

642
00:22:28,320 --> 00:22:30,400
and ssrf server-side because for sure

643
00:22:30,400 --> 00:22:32,400
this thing made an appearance in a very

644
00:22:32,400 --> 00:22:33,919
big way

645
00:22:33,919 --> 00:22:35,520
in cloud

646
00:22:35,520 --> 00:22:36,799
because of all these decoupled

647
00:22:36,799 --> 00:22:38,720
components you can abuse the trust

648
00:22:38,720 --> 00:22:42,559
between the two components there's

649
00:22:43,440 --> 00:22:46,880
capital one breach example

650
00:22:46,880 --> 00:22:48,960
what happened was that there was a role

651
00:22:48,960 --> 00:22:50,799
with all these permissions for accessing

652
00:22:50,799 --> 00:22:52,320
all over the place

653
00:22:52,320 --> 00:22:55,039
and there was a bucket an s3 bucket with

654
00:22:55,039 --> 00:22:56,880
sensitive information so the bucket was

655
00:22:56,880 --> 00:22:58,480
protected the role was protected and

656
00:22:58,480 --> 00:22:59,919
then there was this person who had

657
00:22:59,919 --> 00:23:01,360
access to the role

658
00:23:01,360 --> 00:23:03,440
and the

659
00:23:03,440 --> 00:23:04,880
trust between the role and the bucket

660
00:23:04,880 --> 00:23:06,400
was absolutely because it was supposed

661
00:23:06,400 --> 00:23:08,559
to be like an internal thing and so the

662
00:23:08,559 --> 00:23:11,039
person was able to exploit that trust

663
00:23:11,039 --> 00:23:12,799
and it says maybe a server side because

664
00:23:12,799 --> 00:23:14,400
forgery i don't think

665
00:23:14,400 --> 00:23:16,000
it exactly is a server-centered place

666
00:23:16,000 --> 00:23:17,760
for you but the idea is there it's the

667
00:23:17,760 --> 00:23:21,280
abuse of that internal trust

668
00:23:21,679 --> 00:23:23,919
uh in the aws there's an endpoint with

669
00:23:23,919 --> 00:23:25,760
metadata that you can call so if an

670
00:23:25,760 --> 00:23:27,600
attacker can't compromise your ec2

671
00:23:27,600 --> 00:23:29,280
instance for instance they inject

672
00:23:29,280 --> 00:23:30,880
through the pipeline supply injection

673
00:23:30,880 --> 00:23:32,640
and then they call this method at the

674
00:23:32,640 --> 00:23:34,880
endpoint that you can retrieve active

675
00:23:34,880 --> 00:23:37,200
instance credentials

676
00:23:37,200 --> 00:23:40,159
for your ec2

677
00:23:40,400 --> 00:23:43,520
uh the defense for this

678
00:23:43,520 --> 00:23:45,120
you know the typical staff do early

679
00:23:45,120 --> 00:23:46,720
design reviews and threat modeling of

680
00:23:46,720 --> 00:23:48,799
your application to understand all these

681
00:23:48,799 --> 00:23:51,440
different points where your secrets are

682
00:23:51,440 --> 00:23:53,600
uh what permissions they need and what

683
00:23:53,600 --> 00:23:55,679
are the vulnerable points to contest

684
00:23:55,679 --> 00:23:57,520
security reviews

685
00:23:57,520 --> 00:23:59,120
use automation tooling

686
00:23:59,120 --> 00:24:01,120
as i mentioned in your pipeline in

687
00:24:01,120 --> 00:24:02,480
security test

688
00:24:02,480 --> 00:24:04,320
run static code analysis from static

689
00:24:04,320 --> 00:24:06,480
file analysis and new secrets

690
00:24:06,480 --> 00:24:08,559
placeholders in

691
00:24:08,559 --> 00:24:11,279
your code to decouple uh the secrets

692
00:24:11,279 --> 00:24:12,880
from the application

693
00:24:12,880 --> 00:24:14,480
at sky scanner of course we have the

694
00:24:14,480 --> 00:24:16,000
opportunity to look at all of these

695
00:24:16,000 --> 00:24:17,440
problems and

696
00:24:17,440 --> 00:24:20,080
whispers is one of these uh applications

697
00:24:20,080 --> 00:24:22,159
that i've been working on it's a

698
00:24:22,159 --> 00:24:24,320
tool that you can use to detect static

699
00:24:24,320 --> 00:24:25,200
file

700
00:24:25,200 --> 00:24:26,799
credentials

701
00:24:26,799 --> 00:24:28,720
and so the difference here is that

702
00:24:28,720 --> 00:24:30,080
static code analysis tools they

703
00:24:30,080 --> 00:24:32,720
typically cover a dynamic called like

704
00:24:32,720 --> 00:24:34,559
java python

705
00:24:34,559 --> 00:24:37,520
what have you but they don't cover xml

706
00:24:37,520 --> 00:24:39,520
or json files

707
00:24:39,520 --> 00:24:41,440
uh to look for credentials specifically

708
00:24:41,440 --> 00:24:43,279
and so whispers does that and what you

709
00:24:43,279 --> 00:24:44,480
can do is you can put it in your

710
00:24:44,480 --> 00:24:46,480
pipeline for security testing or you can

711
00:24:46,480 --> 00:24:49,440
set it up as a pre-commit hook to even

712
00:24:49,440 --> 00:24:52,240
prevent your developers from committing

713
00:24:52,240 --> 00:24:55,200
potentially sensitive information

714
00:24:55,200 --> 00:24:57,919
it's expandable with rules and

715
00:24:57,919 --> 00:25:00,159
plugins and it's for non-executable

716
00:25:00,159 --> 00:25:02,720
files including iac which is making a

717
00:25:02,720 --> 00:25:04,480
big appearance and

718
00:25:04,480 --> 00:25:06,480
it does like private keys

719
00:25:06,480 --> 00:25:08,320
certificates and so on

720
00:25:08,320 --> 00:25:09,520
we have

721
00:25:09,520 --> 00:25:12,480
other security automation tooling

722
00:25:12,480 --> 00:25:14,400
recommended check it out cfripr is

723
00:25:14,400 --> 00:25:16,480
really cool if you're using aws

724
00:25:16,480 --> 00:25:18,720
confirmation it will tell you uh if your

725
00:25:18,720 --> 00:25:20,720
roles and policies are correct and this

726
00:25:20,720 --> 00:25:22,559
is a huge advantage because it's very

727
00:25:22,559 --> 00:25:24,559
difficult to understand it and if you

728
00:25:24,559 --> 00:25:26,799
have this tool i think of it as security

729
00:25:26,799 --> 00:25:29,279
thing for a yak it's super helpful

730
00:25:29,279 --> 00:25:31,279
then we have uh lambda guard which is

731
00:25:31,279 --> 00:25:33,200
for uh infrastruct serverless

732
00:25:33,200 --> 00:25:34,880
infrastructure auditing

733
00:25:34,880 --> 00:25:37,279
and certain secrets for hard-coded uh

734
00:25:37,279 --> 00:25:39,039
for detecting hardware secrets and java

735
00:25:39,039 --> 00:25:40,400
javascript but this one is sort of

736
00:25:40,400 --> 00:25:42,559
getting phased out because there's now

737
00:25:42,559 --> 00:25:44,400
other tools that are better and more

738
00:25:44,400 --> 00:25:45,919
efficient

739
00:25:45,919 --> 00:25:48,559
nevertheless check them out

740
00:25:48,559 --> 00:25:50,559
and yeah to summarize

741
00:25:50,559 --> 00:25:52,559
different types of secrets developers

742
00:25:52,559 --> 00:25:54,559
accessing code build secrets assessing

743
00:25:54,559 --> 00:25:57,039
repositories packages components runtime

744
00:25:57,039 --> 00:26:00,320
secrets accessing services and data

745
00:26:00,320 --> 00:26:01,760
different ways to provision secrets one

746
00:26:01,760 --> 00:26:03,679
of them is hard coding them

747
00:26:03,679 --> 00:26:05,360
which would be at

748
00:26:05,360 --> 00:26:07,919
coding time another way would be using

749
00:26:07,919 --> 00:26:10,480
environment variables which would be

750
00:26:10,480 --> 00:26:11,520
better

751
00:26:11,520 --> 00:26:13,919
and using a secret manager which would

752
00:26:13,919 --> 00:26:16,320
also be better with placeholders and in

753
00:26:16,320 --> 00:26:18,400
this way we want to couple secrets from

754
00:26:18,400 --> 00:26:20,080
the application

755
00:26:20,080 --> 00:26:22,559
there are many many many many problems

756
00:26:22,559 --> 00:26:24,720
and questions that must not only be

757
00:26:24,720 --> 00:26:28,240
asked but they also have to be answered

758
00:26:28,240 --> 00:26:30,799
uh around secret management

759
00:26:30,799 --> 00:26:32,720
where destroyed plane takes secrets uh

760
00:26:32,720 --> 00:26:35,120
how to share it um how to go off

761
00:26:35,120 --> 00:26:36,400
boarding you know when people are

762
00:26:36,400 --> 00:26:38,480
leaving the company and what happens if

763
00:26:38,480 --> 00:26:40,799
secrets are stolen or lost stolen or

764
00:26:40,799 --> 00:26:42,960
lost how do you rotate them how do you

765
00:26:42,960 --> 00:26:45,440
keep track of all these random expirable

766
00:26:45,440 --> 00:26:46,720
secrets

767
00:26:46,720 --> 00:26:48,960
minimal probations and in the end what

768
00:26:48,960 --> 00:26:50,880
you have is you have many people using

769
00:26:50,880 --> 00:26:52,880
many types of secrets for many different

770
00:26:52,880 --> 00:26:54,559
purposes and you can appreciate that

771
00:26:54,559 --> 00:26:56,960
this complexity goes away beyond

772
00:26:56,960 --> 00:26:59,039
uh you know the password security

773
00:26:59,039 --> 00:27:02,320
requirements that revolve around this

774
00:27:02,320 --> 00:27:05,200
best practices

775
00:27:05,279 --> 00:27:07,440
i think we're a little bit you know over

776
00:27:07,440 --> 00:27:10,320
over time so okay well this is this is

777
00:27:10,320 --> 00:27:12,799
pretty much it

778
00:27:13,279 --> 00:27:16,080
uh thanks very much for your time and um

779
00:27:16,080 --> 00:27:17,200
reach out to me if you have any

780
00:27:17,200 --> 00:27:18,399
questions you want to follow up on

781
00:27:18,399 --> 00:27:21,120
besides slack or on my linkedin and just

782
00:27:21,120 --> 00:27:22,960
to mention we're hiring in security so

783
00:27:22,960 --> 00:27:24,480
pick me up if you're interested thank

784
00:27:24,480 --> 00:27:25,360
you

785
00:27:25,360 --> 00:27:27,200
brilliant so i got a question but i

786
00:27:27,200 --> 00:27:28,559
would drop that in the in this live

787
00:27:28,559 --> 00:27:30,000
channel you know because of the time

788
00:27:30,000 --> 00:27:31,919
constraints but thank you so much you

789
00:27:31,919 --> 00:27:34,799
know for participating in visa personas

790
00:27:34,799 --> 00:27:36,960
as usual you know we've seen your your

791
00:27:36,960 --> 00:27:38,720
face a few times and you're always

792
00:27:38,720 --> 00:27:40,559
welcome you know to come again so thanks

793
00:27:40,559 --> 00:27:42,000
so much and for your presentation i

794
00:27:42,000 --> 00:27:46,679
appreciate you thank you thank you

