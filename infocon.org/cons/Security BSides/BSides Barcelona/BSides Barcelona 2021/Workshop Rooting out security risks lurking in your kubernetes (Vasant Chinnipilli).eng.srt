1
00:00:08,880 --> 00:00:11,280
so we will start with uh setting up the

2
00:00:11,280 --> 00:00:14,320
playground and i have shared a pdf

3
00:00:14,320 --> 00:00:16,400
document in the slack channel maybe if

4
00:00:16,400 --> 00:00:18,080
you click on that link it will give you

5
00:00:18,080 --> 00:00:19,840
all the instructions like what we should

6
00:00:19,840 --> 00:00:23,359
be doing to set up the playground

7
00:00:26,320 --> 00:00:28,000
so the first thing is like you will have

8
00:00:28,000 --> 00:00:30,240
to start by clicking this link and it

9
00:00:30,240 --> 00:00:32,320
will let you download the vm which we

10
00:00:32,320 --> 00:00:36,079
will be using throughout the workshop

11
00:00:39,280 --> 00:00:41,360
and these are the steps that you should

12
00:00:41,360 --> 00:00:42,840
be following

13
00:00:42,840 --> 00:00:45,200
to install

14
00:00:45,200 --> 00:00:46,879
everything you'll have to follow the

15
00:00:46,879 --> 00:00:49,200
instructions as is please don't miss any

16
00:00:49,200 --> 00:00:50,960
steps they're like very clear

17
00:00:50,960 --> 00:00:53,039
instructions like you have to be very

18
00:00:53,039 --> 00:00:54,480
careful especially with the network

19
00:00:54,480 --> 00:00:57,680
settings because your the vms needs

20
00:00:57,680 --> 00:01:00,160
network access or internet access to

21
00:01:00,160 --> 00:01:01,840
download the virtual to download the

22
00:01:01,840 --> 00:01:04,000
docker images on the go when we spin up

23
00:01:04,000 --> 00:01:05,680
some kubernetes clusters or some

24
00:01:05,680 --> 00:01:08,479
containers and it also needs a local

25
00:01:08,479 --> 00:01:10,320
network connection in order to ssh the

26
00:01:10,320 --> 00:01:12,320
host

27
00:01:12,320 --> 00:01:13,119
so

28
00:01:13,119 --> 00:01:15,759
please follow the steps as is i'll also

29
00:01:15,759 --> 00:01:17,360
do it on my screen and also have a

30
00:01:17,360 --> 00:01:18,720
recording i'll be sharing it on my

31
00:01:18,720 --> 00:01:21,040
screen if you have any issues everything

32
00:01:21,040 --> 00:01:23,119
you can always message me on the slack

33
00:01:23,119 --> 00:01:25,360
channel or in the q a channel i'll be

34
00:01:25,360 --> 00:01:27,280
shortly sharing my screen setting up the

35
00:01:27,280 --> 00:01:30,280
machine

36
00:01:45,360 --> 00:01:48,240
if you feel that the pace is a bit fast

37
00:01:48,240 --> 00:01:50,240
or is bit slow always feel free to tell

38
00:01:50,240 --> 00:01:51,920
me and i will adjust the pace

39
00:01:51,920 --> 00:01:54,320
accordingly so this these are the steps

40
00:01:54,320 --> 00:01:56,000
that you should be following

41
00:01:56,000 --> 00:01:58,560
while doing the setup after you download

42
00:01:58,560 --> 00:02:00,960
the virtual machine from the link just

43
00:02:00,960 --> 00:02:04,240
follow these steps as is

44
00:02:05,280 --> 00:02:09,840
import the vm that we have downloaded

45
00:02:11,440 --> 00:02:13,200
choose that

46
00:02:13,200 --> 00:02:15,520
virtual machine

47
00:02:15,520 --> 00:02:18,560
click on continue

48
00:02:19,200 --> 00:02:20,840
and here we will set

49
00:02:20,840 --> 00:02:23,840
up these

50
00:02:23,840 --> 00:02:25,920
always ensure you give some better ram

51
00:02:25,920 --> 00:02:27,440
i'm giving somewhere close to like six

52
00:02:27,440 --> 00:02:29,120
gigs but it's always good to give

53
00:02:29,120 --> 00:02:32,480
anything about four should be fine

54
00:02:32,480 --> 00:02:35,440
then just modify this mac address policy

55
00:02:35,440 --> 00:02:37,280
setting

56
00:02:37,280 --> 00:02:39,360
it all looks good then just click on

57
00:02:39,360 --> 00:02:42,080
import and once if you click on import

58
00:02:42,080 --> 00:02:44,959
it may take anywhere close to a minute

59
00:02:44,959 --> 00:02:48,360
or two minutes

60
00:02:51,599 --> 00:02:55,000
click on import

61
00:03:29,120 --> 00:03:31,840
the vm has been imported and now the

62
00:03:31,840 --> 00:03:33,200
first thing we will be doing is like

63
00:03:33,200 --> 00:03:34,720
doing some network settings which is

64
00:03:34,720 --> 00:03:36,640
very important

65
00:03:36,640 --> 00:03:39,599
so we click on network

66
00:03:39,599 --> 00:03:41,840
and ensure just as for the documentation

67
00:03:41,840 --> 00:03:43,920
make sure like the first one is host

68
00:03:43,920 --> 00:03:46,400
only adapter

69
00:03:46,400 --> 00:03:50,480
and the next one is netting

70
00:03:52,080 --> 00:03:54,080
so this is very important guys so first

71
00:03:54,080 --> 00:03:55,760
adapter is like host only and the next

72
00:03:55,760 --> 00:03:58,720
adapter is nat just make the settings as

73
00:03:58,720 --> 00:04:00,480
it is shown on the screen

74
00:04:00,480 --> 00:04:02,319
and we won't be touching anything else

75
00:04:02,319 --> 00:04:05,280
just click ok

76
00:04:06,159 --> 00:04:10,519
then we are all set just click on start

77
00:04:31,919 --> 00:04:34,720
so the username to login is the username

78
00:04:34,720 --> 00:04:36,720
bassand and the password is ubuntu

79
00:04:36,720 --> 00:04:38,560
everything is provided

80
00:04:38,560 --> 00:04:42,800
in the document in the setup document

81
00:04:42,800 --> 00:04:45,120
and then switch user as root and the

82
00:04:45,120 --> 00:04:48,080
password is ubuntu

83
00:04:48,800 --> 00:04:50,800
only this particular screen for the next

84
00:04:50,800 --> 00:04:52,639
one looks small and then going forward

85
00:04:52,639 --> 00:04:54,160
it will be like pretty big

86
00:04:54,160 --> 00:04:57,360
so and then issue the command bh client

87
00:04:57,360 --> 00:05:00,000
and then try to grab the ip address of

88
00:05:00,000 --> 00:05:01,199
this machine

89
00:05:01,199 --> 00:05:03,360
because we will be using a terminal to

90
00:05:03,360 --> 00:05:05,600
ssh into the box and do it continue with

91
00:05:05,600 --> 00:05:07,120
the rest of the workshop

92
00:05:07,120 --> 00:05:09,360
so here the ip address for this machine

93
00:05:09,360 --> 00:05:13,680
is 192 168 56.104 for my machine

94
00:05:13,680 --> 00:05:17,280
similarly you should have an ip address

95
00:05:17,280 --> 00:05:20,320
so grab the ip address and then just uh

96
00:05:20,320 --> 00:05:22,320
test it from your

97
00:05:22,320 --> 00:05:26,479
shell or terminal or whatever you use

98
00:05:26,960 --> 00:05:28,000
just

99
00:05:28,000 --> 00:05:29,360
ssh

100
00:05:29,360 --> 00:05:31,680
the username is bassand at the ip

101
00:05:31,680 --> 00:05:34,080
address

102
00:05:34,240 --> 00:05:38,520
yes and the password is ubuntu

103
00:05:40,479 --> 00:05:45,039
so the switch user password is ubuntu

104
00:05:46,240 --> 00:05:48,080
and then

105
00:05:48,080 --> 00:05:49,759
there is one document that you all

106
00:05:49,759 --> 00:05:51,440
should be testing it

107
00:05:51,440 --> 00:05:53,360
it is like the number step 4 in the

108
00:05:53,360 --> 00:05:56,479
documentation dot slash requirements

109
00:05:56,479 --> 00:05:58,720
and once it is done you should be able

110
00:05:58,720 --> 00:06:00,319
to see the screen

111
00:06:00,319 --> 00:06:02,319
if you could see the screen we are all

112
00:06:02,319 --> 00:06:03,600
good to go ahead with the rest of the

113
00:06:03,600 --> 00:06:06,600
workshop

114
00:06:09,440 --> 00:06:12,080
can you all just raise your hands are

115
00:06:12,080 --> 00:06:14,639
you able to follow till this step or

116
00:06:14,639 --> 00:06:16,400
do you want me to wait for a while or do

117
00:06:16,400 --> 00:06:19,520
you need any assistance

118
00:06:19,520 --> 00:06:21,440
just leave a message in the slack or

119
00:06:21,440 --> 00:06:24,440
somewhere

120
00:06:54,560 --> 00:06:57,520
yeah so we just got a message saying

121
00:06:57,520 --> 00:06:59,680
that someone needs a minute

122
00:06:59,680 --> 00:07:02,960
yep i have answered it

123
00:07:03,039 --> 00:07:04,800
no rush guys we will just wait for a

124
00:07:04,800 --> 00:07:06,240
couple of minutes to ensure everyone is

125
00:07:06,240 --> 00:07:08,319
on the same page

126
00:07:08,319 --> 00:07:09,759
we are on time

127
00:07:09,759 --> 00:07:13,960
so yeah no raj

128
00:07:27,840 --> 00:07:32,159
and now we will be setting up

129
00:07:32,800 --> 00:07:34,960
the infrastructure for the workshop so

130
00:07:34,960 --> 00:07:36,240
i'm pretty sure

131
00:07:36,240 --> 00:07:37,759
once if you give the command door

132
00:07:37,759 --> 00:07:39,520
requirements and it should say

133
00:07:39,520 --> 00:07:41,199
everything is available

134
00:07:41,199 --> 00:07:42,960
and the next probably the first thing

135
00:07:42,960 --> 00:07:44,960
i'll be doing is i will be sharing with

136
00:07:44,960 --> 00:07:46,560
you all the documentation which we will

137
00:07:46,560 --> 00:07:47,599
be following for the rest of the

138
00:07:47,599 --> 00:07:49,440
workshop it is like a huge documentation

139
00:07:49,440 --> 00:07:52,720
somewhere close to 200 pages

140
00:07:52,720 --> 00:07:55,120
so could you all please check the slack

141
00:07:55,120 --> 00:07:57,199
channel i'll be sharing it over the

142
00:07:57,199 --> 00:07:59,840
smart channel

143
00:08:28,879 --> 00:08:29,759
so

144
00:08:29,759 --> 00:08:31,599
i have just shared a document on the

145
00:08:31,599 --> 00:08:33,120
slack channel which says like attacking

146
00:08:33,120 --> 00:08:34,799
defending and monitoring your kubernetes

147
00:08:34,799 --> 00:08:36,240
ecosystem

148
00:08:36,240 --> 00:08:38,080
we will be following this documentation

149
00:08:38,080 --> 00:08:39,839
and really following the steps as is

150
00:08:39,839 --> 00:08:41,440
throughout the workshop it will cover

151
00:08:41,440 --> 00:08:43,279
all the modules like attacking defending

152
00:08:43,279 --> 00:08:46,800
monitoring and runtime protection

153
00:08:52,640 --> 00:08:54,320
could you all please check the slack

154
00:08:54,320 --> 00:08:57,279
channel and download this documentation

155
00:08:57,279 --> 00:08:59,519
even if you happen to miss any steps

156
00:08:59,519 --> 00:09:00,959
during the workshop

157
00:09:00,959 --> 00:09:02,880
this is your go-to place

158
00:09:02,880 --> 00:09:04,399
anything and everything that we do

159
00:09:04,399 --> 00:09:05,839
during the workshop

160
00:09:05,839 --> 00:09:09,640
will exist in this documentation

161
00:09:18,480 --> 00:09:20,160
so the next step that we will be doing

162
00:09:20,160 --> 00:09:21,200
is like

163
00:09:21,200 --> 00:09:24,080
everyone has to issue the command as is

164
00:09:24,080 --> 00:09:27,440
as you see on my screen create iphone n

165
00:09:27,440 --> 00:09:30,000
workshop iphone w2 this will set up the

166
00:09:30,000 --> 00:09:31,279
rest of the playground for us it will

167
00:09:31,279 --> 00:09:32,880
bring up the whole environment different

168
00:09:32,880 --> 00:09:34,560
humanities clusters and all the required

169
00:09:34,560 --> 00:09:37,120
containers for the workshop so i am

170
00:09:37,120 --> 00:09:38,720
sharing my screen and i'll show you how

171
00:09:38,720 --> 00:09:41,200
to do it

172
00:09:49,600 --> 00:09:51,040
and depending on your internet

173
00:09:51,040 --> 00:09:53,200
connection this step might take a little

174
00:09:53,200 --> 00:09:55,279
longer some machines may take like five

175
00:09:55,279 --> 00:09:57,279
minutes or some people might even take

176
00:09:57,279 --> 00:09:59,680
10 minutes but don't rush while this is

177
00:09:59,680 --> 00:10:01,920
happening i'll be covering some uh

178
00:10:01,920 --> 00:10:03,440
theory

179
00:10:03,440 --> 00:10:05,360
so don't stress yourself at this stage

180
00:10:05,360 --> 00:10:07,519
but this is very important stage if

181
00:10:07,519 --> 00:10:10,640
anybody has any difficulty or any errors

182
00:10:10,640 --> 00:10:13,200
during this stage just reissue the same

183
00:10:13,200 --> 00:10:15,920
command again

184
00:10:17,760 --> 00:10:19,839
the command is create iphone n workshop

185
00:10:19,839 --> 00:10:21,519
iphone w2 if you have any difficulty

186
00:10:21,519 --> 00:10:23,680
during the workshop please just copy and

187
00:10:23,680 --> 00:10:26,480
paste the commands through the workshop

188
00:10:26,480 --> 00:10:28,160
at times you may have to change the ip

189
00:10:28,160 --> 00:10:29,519
addresses and the port numbers here and

190
00:10:29,519 --> 00:10:32,519
there

191
00:11:04,480 --> 00:11:07,279
you should see something like this

192
00:11:07,279 --> 00:11:09,360
is this happening are we good to go with

193
00:11:09,360 --> 00:11:10,880
the theory while this is happening in

194
00:11:10,880 --> 00:11:12,160
the background because like i mentioned

195
00:11:12,160 --> 00:11:13,519
this step may take anywhere close to

196
00:11:13,519 --> 00:11:14,959
five to ten minutes

197
00:11:14,959 --> 00:11:19,040
so i will start with some theory

198
00:11:19,040 --> 00:11:20,800
so once it is done it will give you

199
00:11:20,800 --> 00:11:22,640
something like this

200
00:11:22,640 --> 00:11:25,040
and make sure you copy this

201
00:11:25,040 --> 00:11:26,880
all ip addresses and port numbers into a

202
00:11:26,880 --> 00:11:29,839
text pad if not just leave this screen

203
00:11:29,839 --> 00:11:32,720
as is and open a new terminal at least

204
00:11:32,720 --> 00:11:34,240
open two or three terminals from which

205
00:11:34,240 --> 00:11:37,279
we will be doing the stuff

206
00:11:38,640 --> 00:11:42,160
so while this is happening i will cover

207
00:11:42,160 --> 00:11:45,040
some theory part

208
00:11:46,640 --> 00:11:48,720
so first under someone mentioning an

209
00:11:48,720 --> 00:11:49,600
error

210
00:11:49,600 --> 00:11:51,680
on the start code

211
00:11:51,680 --> 00:11:54,399
code based server

212
00:11:54,399 --> 00:11:57,600
uh right like i mentioned just uh

213
00:11:57,600 --> 00:11:59,440
make sure you have like proper internet

214
00:11:59,440 --> 00:12:01,920
connection

215
00:12:04,160 --> 00:12:06,079
so just give some command like ping

216
00:12:06,079 --> 00:12:08,399
iphone c3

217
00:12:08,399 --> 00:12:10,079
some google.com and make sure you have

218
00:12:10,079 --> 00:12:12,240
proper internet connection and then give

219
00:12:12,240 --> 00:12:14,240
the command create iphone in workshop

220
00:12:14,240 --> 00:12:15,760
and it should work if you have any

221
00:12:15,760 --> 00:12:17,680
issues please read on the same command

222
00:12:17,680 --> 00:12:20,000
again

223
00:12:20,160 --> 00:12:21,839
because i have been using the same vm

224
00:12:21,839 --> 00:12:23,440
for all the workshops it's working

225
00:12:23,440 --> 00:12:25,040
absolutely fine if it is not working in

226
00:12:25,040 --> 00:12:26,160
your machine there is something wrong

227
00:12:26,160 --> 00:12:29,719
with your internet connection

228
00:12:57,440 --> 00:13:00,320
christian can you still see my screen

229
00:13:00,320 --> 00:13:01,519
yes

230
00:13:01,519 --> 00:13:03,040
all right it says containers and dockers

231
00:13:03,040 --> 00:13:03,839
right

232
00:13:03,839 --> 00:13:06,639
yeah contains okay on a diagram perfect

233
00:13:06,639 --> 00:13:09,519
cool so

234
00:13:10,959 --> 00:13:12,240
let the setup do it work in the

235
00:13:12,240 --> 00:13:13,760
background and let's complete some

236
00:13:13,760 --> 00:13:16,160
theory part so let's start with the very

237
00:13:16,160 --> 00:13:18,320
basics of microservices docker and then

238
00:13:18,320 --> 00:13:20,639
the kubernetes so the microservices

239
00:13:20,639 --> 00:13:22,320
architecture splits your application

240
00:13:22,320 --> 00:13:24,560
into multiple services that perform

241
00:13:24,560 --> 00:13:26,000
fine-grained functions and are still

242
00:13:26,000 --> 00:13:27,920
part of your application as a whole the

243
00:13:27,920 --> 00:13:30,000
advantages associated with microservices

244
00:13:30,000 --> 00:13:32,000
such as like their elements for agile

245
00:13:32,000 --> 00:13:33,760
development and artifacts and then

246
00:13:33,760 --> 00:13:35,519
architecture that is highly maintainable

247
00:13:35,519 --> 00:13:36,959
and testable which will enable

248
00:13:36,959 --> 00:13:38,880
businesses to develop and roll out new

249
00:13:38,880 --> 00:13:41,440
digital offerings faster and also evolve

250
00:13:41,440 --> 00:13:43,120
with technology stacks makes it the

251
00:13:43,120 --> 00:13:45,600
obvious choice so where do you put your

252
00:13:45,600 --> 00:13:46,959
micro services

253
00:13:46,959 --> 00:13:49,279
in containers so containers are the

254
00:13:49,279 --> 00:13:51,279
packages of your software that include

255
00:13:51,279 --> 00:13:52,560
everything that it needs to run

256
00:13:52,560 --> 00:13:54,880
including the code the dependencies

257
00:13:54,880 --> 00:13:57,199
libraries binaries and more this gives

258
00:13:57,199 --> 00:13:59,519
developers the ability to create

259
00:13:59,519 --> 00:14:01,279
predictable environments that can be run

260
00:14:01,279 --> 00:14:03,760
anywhere and allows container based

261
00:14:03,760 --> 00:14:05,760
applications to be deployed easily and

262
00:14:05,760 --> 00:14:08,079
consistently regardless of whether the

263
00:14:08,079 --> 00:14:10,240
target environment is a private data

264
00:14:10,240 --> 00:14:12,720
center or the public cloud or even a

265
00:14:12,720 --> 00:14:14,800
developer's personal laptop so this

266
00:14:14,800 --> 00:14:16,800
containerization is this trend that's

267
00:14:16,800 --> 00:14:19,040
taking over the world to allow people to

268
00:14:19,040 --> 00:14:20,880
run all kinds of different applications

269
00:14:20,880 --> 00:14:22,959
in a variety of different environments

270
00:14:22,959 --> 00:14:24,800
and when they do that they need an

271
00:14:24,800 --> 00:14:26,639
orchestration solution in order to keep

272
00:14:26,639 --> 00:14:29,040
track of all those containers and

273
00:14:29,040 --> 00:14:30,959
schedule them and orchestrate them

274
00:14:30,959 --> 00:14:33,040
that's where kubernetes comes into the

275
00:14:33,040 --> 00:14:35,360
action

276
00:14:38,560 --> 00:14:40,480
kubernetes uh is an open source

277
00:14:40,480 --> 00:14:42,480
orchestration platform that automates

278
00:14:42,480 --> 00:14:44,399
many of the manual processes involved in

279
00:14:44,399 --> 00:14:46,720
deploying and managing and scaling the

280
00:14:46,720 --> 00:14:50,079
containerized applications

281
00:14:50,720 --> 00:14:53,600
you can think of uh kubernetes as you

282
00:14:53,600 --> 00:14:55,600
would a conductor of an orchestra in the

283
00:14:55,600 --> 00:14:57,839
same way a conductor would say how many

284
00:14:57,839 --> 00:14:59,760
trumpets are needed which one plays the

285
00:14:59,760 --> 00:15:02,000
first trumpet and how loud each should

286
00:15:02,000 --> 00:15:04,320
play a container orchestrator would say

287
00:15:04,320 --> 00:15:06,160
how many web server front-end containers

288
00:15:06,160 --> 00:15:08,160
are needed what this and how many

289
00:15:08,160 --> 00:15:09,760
resources are to be dedicated to each

290
00:15:09,760 --> 00:15:10,560
one

291
00:15:10,560 --> 00:15:13,120
and kubernetes does not include

292
00:15:13,120 --> 00:15:15,680
functionality for creating or managing

293
00:15:15,680 --> 00:15:17,760
container images and it does not by

294
00:15:17,760 --> 00:15:20,480
itself run containers it needs to work

295
00:15:20,480 --> 00:15:22,399
with an external container source and

296
00:15:22,399 --> 00:15:23,519
runtime

297
00:15:23,519 --> 00:15:24,880
as kubernetes is a container

298
00:15:24,880 --> 00:15:26,480
orchestration it needs a container

299
00:15:26,480 --> 00:15:28,720
runtime in order to orchestrate well

300
00:15:28,720 --> 00:15:30,800
kubernetes is most commonly used with

301
00:15:30,800 --> 00:15:33,120
docker but can also be used with any

302
00:15:33,120 --> 00:15:36,560
other container runtime like cruncy crio

303
00:15:36,560 --> 00:15:38,160
and container the another container

304
00:15:38,160 --> 00:15:39,199
contents that you can deploy with

305
00:15:39,199 --> 00:15:40,399
kubernetes

306
00:15:40,399 --> 00:15:42,160
and kubernetes is hot in the devops

307
00:15:42,160 --> 00:15:44,399
space and is now the most uh wanted

308
00:15:44,399 --> 00:15:46,880
platform among developers

309
00:15:46,880 --> 00:15:48,720
well getting started with kubernetes is

310
00:15:48,720 --> 00:15:50,720
easy takes like matter of minutes to set

311
00:15:50,720 --> 00:15:53,519
up a new cluster and run applications

312
00:15:53,519 --> 00:15:54,959
however the real concern or the

313
00:15:54,959 --> 00:15:56,560
challenge is what follows this the

314
00:15:56,560 --> 00:15:58,800
pivotal question of how to make sure

315
00:15:58,800 --> 00:16:00,720
your cluster is secure for any

316
00:16:00,720 --> 00:16:02,079
organization

317
00:16:02,079 --> 00:16:03,360
security should be like the primary

318
00:16:03,360 --> 00:16:05,120
concern and not an afterthought because

319
00:16:05,120 --> 00:16:06,240
we all

320
00:16:06,240 --> 00:16:07,920
know well like especially in the current

321
00:16:07,920 --> 00:16:09,759
kovit environment preventation

322
00:16:09,759 --> 00:16:11,519
prevention is always like better than

323
00:16:11,519 --> 00:16:13,600
cure in fact let me tell you what

324
00:16:13,600 --> 00:16:14,880
happens in the real world when the

325
00:16:14,880 --> 00:16:16,320
kubernetes clusters aren't secured

326
00:16:16,320 --> 00:16:19,320
properly

327
00:16:29,839 --> 00:16:32,959
on uh july 19 2019

328
00:16:32,959 --> 00:16:34,560
like the second largest order finance

329
00:16:34,560 --> 00:16:36,160
company in the united states operates

330
00:16:36,160 --> 00:16:38,000
like a responsible disclosure program

331
00:16:38,000 --> 00:16:39,680
where security researchers can disclose

332
00:16:39,680 --> 00:16:41,120
potential vulnerabilities received an

333
00:16:41,120 --> 00:16:43,199
email the email was not a voluntary

334
00:16:43,199 --> 00:16:45,040
disclosure email but an email notifying

335
00:16:45,040 --> 00:16:47,120
them that they have been hacked and the

336
00:16:47,120 --> 00:16:49,279
company was asked to pay like 80 million

337
00:16:49,279 --> 00:16:50,880
civil penalty for its role in the cyber

338
00:16:50,880 --> 00:16:52,880
security breach and this is like capital

339
00:16:52,880 --> 00:16:53,839
one

340
00:16:53,839 --> 00:16:55,600
and uh there is another one like with

341
00:16:55,600 --> 00:16:57,040
the values of cryptocurrency

342
00:16:57,040 --> 00:16:59,279
skyrocketing and the limitless compute

343
00:16:59,279 --> 00:17:01,680
resources located in the cloud hijacking

344
00:17:01,680 --> 00:17:03,600
resources has become a lot more

345
00:17:03,600 --> 00:17:05,760
lucrative than stealing info and world's

346
00:17:05,760 --> 00:17:07,359
famous automaker was one of the earlier

347
00:17:07,359 --> 00:17:08,720
victims of crypto jacking when a

348
00:17:08,720 --> 00:17:11,280
kubernetes cluster was compromised due

349
00:17:11,280 --> 00:17:12,959
to an administrative console not being

350
00:17:12,959 --> 00:17:14,319
password protected

351
00:17:14,319 --> 00:17:15,760
it's tesla

352
00:17:15,760 --> 00:17:18,319
these are like a few few examples and

353
00:17:18,319 --> 00:17:20,079
what was interesting about this attack

354
00:17:20,079 --> 00:17:21,679
was the number of in genuine

355
00:17:21,679 --> 00:17:23,520
precautionary measures taken to avoid

356
00:17:23,520 --> 00:17:24,559
detection

357
00:17:24,559 --> 00:17:26,480
in this attack the attackers made sure

358
00:17:26,480 --> 00:17:28,960
like the mining script didn't use enough

359
00:17:28,960 --> 00:17:30,960
cpu resources to cause an alarm or to

360
00:17:30,960 --> 00:17:33,440
get detected and they also used a

361
00:17:33,440 --> 00:17:35,760
non-standard port making detection based

362
00:17:35,760 --> 00:17:38,160
on port traffic virtually impossible and

363
00:17:38,160 --> 00:17:39,360
we'll be looking at it in today's

364
00:17:39,360 --> 00:17:41,280
workshop as well so these are just two

365
00:17:41,280 --> 00:17:43,360
examples of many incidents but there are

366
00:17:43,360 --> 00:17:45,440
many other incidents like this

367
00:17:45,440 --> 00:17:46,720
well now that we have understood the

368
00:17:46,720 --> 00:17:48,240
danger space in our industry and given

369
00:17:48,240 --> 00:17:49,919
the knowledge gap among teams and the

370
00:17:49,919 --> 00:17:51,280
lack of solid security measures to

371
00:17:51,280 --> 00:17:53,039
protect humanities you might be

372
00:17:53,039 --> 00:17:54,480
wondering how in the world are we going

373
00:17:54,480 --> 00:17:56,799
to secure all these moving pieces and

374
00:17:56,799 --> 00:17:58,320
stop these attacks and that's exactly

375
00:17:58,320 --> 00:18:01,840
what we are going to learn today

376
00:18:30,400 --> 00:18:32,880
could anyone any issues with the setup

377
00:18:32,880 --> 00:18:37,320
or is it all like going fine

378
00:18:45,200 --> 00:18:47,039
so is everything fine can you all see

379
00:18:47,039 --> 00:18:48,400
the screen

380
00:18:48,400 --> 00:18:50,640
where it says this one and make sure you

381
00:18:50,640 --> 00:18:53,440
copy this output into a text pad or some

382
00:18:53,440 --> 00:18:55,760
document or just leave the screen as is

383
00:18:55,760 --> 00:18:57,760
because we'll be using these urls going

384
00:18:57,760 --> 00:18:59,280
forward

385
00:18:59,280 --> 00:19:02,960
so what i want you all to do is

386
00:19:03,120 --> 00:19:06,159
just copy

387
00:19:07,760 --> 00:19:11,400
this ip address

388
00:19:14,160 --> 00:19:17,440
put it in your browser

389
00:19:22,720 --> 00:19:24,720
and i have already provided the username

390
00:19:24,720 --> 00:19:26,400
and the password in the document however

391
00:19:26,400 --> 00:19:28,320
the username is admin

392
00:19:28,320 --> 00:19:30,080
the password is busan you should be able

393
00:19:30,080 --> 00:19:31,520
to log in

394
00:19:31,520 --> 00:19:33,919
and once and this ip address will change

395
00:19:33,919 --> 00:19:35,280
for each and every one you will have

396
00:19:35,280 --> 00:19:37,520
your own ip address in your local box

397
00:19:37,520 --> 00:19:40,000
so just click on the infra

398
00:19:40,000 --> 00:19:42,160
and you will have something happening

399
00:19:42,160 --> 00:19:43,600
like this which is like which will be

400
00:19:43,600 --> 00:19:45,919
setting up our infrastructure and once

401
00:19:45,919 --> 00:19:48,160
if you reach to a stage where it says

402
00:19:48,160 --> 00:19:51,360
proceed and abort just leave this one as

403
00:19:51,360 --> 00:19:53,360
is don't neither click on proceed nor

404
00:19:53,360 --> 00:19:55,200
abort at this stage i'll tell you when

405
00:19:55,200 --> 00:19:59,440
we have to click the next uh coming

406
00:19:59,919 --> 00:20:01,200
so

407
00:20:01,200 --> 00:20:03,039
are you all good till here can you all

408
00:20:03,039 --> 00:20:06,360
see the screen

409
00:20:20,080 --> 00:20:22,000
so if you are till here you are like

410
00:20:22,000 --> 00:20:23,280
pretty good to go ahead with the rest of

411
00:20:23,280 --> 00:20:25,840
the workshop

412
00:20:29,120 --> 00:20:32,000
can you cue

413
00:20:32,320 --> 00:20:33,919
uh somebody sent me a message saying

414
00:20:33,919 --> 00:20:35,919
that uh stuck on installing build server

415
00:20:35,919 --> 00:20:37,280
like i mentioned that step will take

416
00:20:37,280 --> 00:20:39,520
some time because it will

417
00:20:39,520 --> 00:20:41,200
pull down like so many docker images and

418
00:20:41,200 --> 00:20:42,640
containers and it needs to have some

419
00:20:42,640 --> 00:20:44,799
good internet connection but don't worry

420
00:20:44,799 --> 00:20:46,320
let it happen in the background but

421
00:20:46,320 --> 00:20:47,679
still we can go ahead with the rest of

422
00:20:47,679 --> 00:20:50,240
the workshop

423
00:20:56,640 --> 00:20:58,799
can you all raise your hand or give some

424
00:20:58,799 --> 00:21:00,159
thumbs up to go ahead with the rest of

425
00:21:00,159 --> 00:21:03,240
the workshop

426
00:21:04,480 --> 00:21:07,039
all good

427
00:21:12,960 --> 00:21:14,720
so some people are still

428
00:21:14,720 --> 00:21:16,159
set up is happening their machines

429
00:21:16,159 --> 00:21:18,480
however i would like to cover the very

430
00:21:18,480 --> 00:21:21,120
basics and very high level uh commands

431
00:21:21,120 --> 00:21:22,720
of docker just to ensure we are all on

432
00:21:22,720 --> 00:21:24,480
the same page and then we will see some

433
00:21:24,480 --> 00:21:26,320
very high level commands of the

434
00:21:26,320 --> 00:21:28,240
kubernetes as well

435
00:21:28,240 --> 00:21:30,640
so if you open the documentation

436
00:21:30,640 --> 00:21:33,520
there is a section it says like uh

437
00:21:33,520 --> 00:21:35,120
common docker commands so i'll be

438
00:21:35,120 --> 00:21:36,720
showing the same stuff

439
00:21:36,720 --> 00:21:38,159
one more time

440
00:21:38,159 --> 00:21:39,919
but if you have any difficulty typing

441
00:21:39,919 --> 00:21:41,760
them you can just copy and paste them in

442
00:21:41,760 --> 00:21:44,919
your screen

443
00:21:51,440 --> 00:21:52,960
right so the first command that i'll be

444
00:21:52,960 --> 00:21:54,960
using is like

445
00:21:54,960 --> 00:21:56,640
to find out the docker version in my

446
00:21:56,640 --> 00:21:58,480
machine it's a docker iphone iphone

447
00:21:58,480 --> 00:22:00,880
version

448
00:22:02,400 --> 00:22:04,480
and for example if you want to pull some

449
00:22:04,480 --> 00:22:08,159
image we use the command called

450
00:22:08,480 --> 00:22:11,039
docker full and the name of the image

451
00:22:11,039 --> 00:22:12,480
for example in this scenario i want to

452
00:22:12,480 --> 00:22:14,400
pull something called httpd

453
00:22:14,400 --> 00:22:15,919
or maybe if i want to pull something

454
00:22:15,919 --> 00:22:18,000
called alpine

455
00:22:18,000 --> 00:22:19,919
so this is how you use the command

456
00:22:19,919 --> 00:22:21,440
docker pull and the name of the image

457
00:22:21,440 --> 00:22:24,320
that you would like to pull

458
00:22:24,799 --> 00:22:27,520
or for example if you want to search

459
00:22:27,520 --> 00:22:29,840
for any image we use the command called

460
00:22:29,840 --> 00:22:31,919
docker search and the name of the image

461
00:22:31,919 --> 00:22:34,480
for example if i want to search httpd

462
00:22:34,480 --> 00:22:36,320
we use the command called docker search

463
00:22:36,320 --> 00:22:40,120
and the name of the image

464
00:22:44,159 --> 00:22:46,720
and for example if you want to run

465
00:22:46,720 --> 00:22:49,120
any

466
00:22:50,159 --> 00:22:51,679
container we use the command called

467
00:22:51,679 --> 00:22:54,240
docker run and we provide a name for

468
00:22:54,240 --> 00:22:58,640
that container for example http

469
00:23:03,120 --> 00:23:04,960
and we will be providing like some port

470
00:23:04,960 --> 00:23:06,080
numbers

471
00:23:06,080 --> 00:23:08,080
and then

472
00:23:08,080 --> 00:23:09,600
we give

473
00:23:09,600 --> 00:23:13,158
provide the image

474
00:23:30,400 --> 00:23:33,280
so this is how we are running an http

475
00:23:33,280 --> 00:23:34,960
image which is like a web server i'm

476
00:23:34,960 --> 00:23:38,000
just canceling it and if you want to see

477
00:23:38,000 --> 00:23:39,600
like all the images that are running

478
00:23:39,600 --> 00:23:40,960
inside your

479
00:23:40,960 --> 00:23:42,559
machine the command that you use is like

480
00:23:42,559 --> 00:23:45,279
drps

481
00:23:46,400 --> 00:23:49,120
and if you want to see all the

482
00:23:49,120 --> 00:23:50,960
containers that ran and that are shut

483
00:23:50,960 --> 00:23:52,880
down we use the command or we pass the

484
00:23:52,880 --> 00:23:55,600
flight icon a

485
00:23:55,600 --> 00:23:57,200
so this is the one which we ran a few

486
00:23:57,200 --> 00:23:59,840
minutes ago and for example if i want to

487
00:23:59,840 --> 00:24:01,679
remove that one

488
00:24:01,679 --> 00:24:04,159
ask the command docker container rm and

489
00:24:04,159 --> 00:24:07,520
that's how we delete our container

490
00:24:09,440 --> 00:24:11,039
and i in the

491
00:24:11,039 --> 00:24:13,600
pdf i have also given some additional

492
00:24:13,600 --> 00:24:15,120
commands like for example if you want to

493
00:24:15,120 --> 00:24:16,840
exec into one of the containers of

494
00:24:16,840 --> 00:24:19,120
youtube or if you want to stop a

495
00:24:19,120 --> 00:24:21,360
container or how to kill a container

496
00:24:21,360 --> 00:24:23,440
everything is provided in documentation

497
00:24:23,440 --> 00:24:26,080
so just keep or just practice and try

498
00:24:26,080 --> 00:24:29,520
those commands after the workshop

499
00:24:29,520 --> 00:24:31,039
and another command that we would like

500
00:24:31,039 --> 00:24:32,559
to show you is if you want to see all

501
00:24:32,559 --> 00:24:34,400
the images that are running inside the

502
00:24:34,400 --> 00:24:36,320
machine we provide like the docker

503
00:24:36,320 --> 00:24:38,159
images it will list all the images that

504
00:24:38,159 --> 00:24:41,360
exist inside that machine

505
00:24:44,080 --> 00:24:46,320
and another important command is like if

506
00:24:46,320 --> 00:24:48,080
you want to see the logs of any

507
00:24:48,080 --> 00:24:50,000
container we pass the command called

508
00:24:50,000 --> 00:24:52,320
docker logs and you provide like the

509
00:24:52,320 --> 00:24:54,559
name of the container it will provide

510
00:24:54,559 --> 00:24:56,480
logs of all the containers you can try

511
00:24:56,480 --> 00:24:57,919
with any of the containers that are

512
00:24:57,919 --> 00:25:01,480
running in your machine

513
00:25:08,640 --> 00:25:11,440
and there is a section called our docker

514
00:25:11,440 --> 00:25:13,919
kung fu which are like some good useful

515
00:25:13,919 --> 00:25:15,039
commands which we'll be using in the

516
00:25:15,039 --> 00:25:17,679
real time for example if you want to run

517
00:25:17,679 --> 00:25:19,440
or get the names of the containers that

518
00:25:19,440 --> 00:25:21,360
are running we use the

519
00:25:21,360 --> 00:25:23,360
logger ps and we are formatting it using

520
00:25:23,360 --> 00:25:26,080
go templates

521
00:25:26,320 --> 00:25:28,559
and if you want

522
00:25:28,559 --> 00:25:31,200
it in the table format

523
00:25:31,200 --> 00:25:33,039
so container id and the name of the

524
00:25:33,039 --> 00:25:36,039
container

525
00:25:44,159 --> 00:25:45,919
cool so that pretty much covers like the

526
00:25:45,919 --> 00:25:47,840
very basics of docker

527
00:25:47,840 --> 00:25:49,279
i don't want to dive deep inside the

528
00:25:49,279 --> 00:25:51,200
docker stuff we will be covering the

529
00:25:51,200 --> 00:25:52,960
contain we will be covering most of the

530
00:25:52,960 --> 00:25:54,559
stuff in the communities and we will do

531
00:25:54,559 --> 00:25:56,320
some basic commands of the kubernetes as

532
00:25:56,320 --> 00:25:58,480
well

533
00:26:04,080 --> 00:26:06,080
right well there might be some

534
00:26:06,080 --> 00:26:09,039
kubernetes experts here this content may

535
00:26:09,039 --> 00:26:10,880
sound a bit redundant to you but i want

536
00:26:10,880 --> 00:26:12,559
to make sure we are all on the same page

537
00:26:12,559 --> 00:26:14,320
so i want to start by explaining some

538
00:26:14,320 --> 00:26:15,679
important relevant components of

539
00:26:15,679 --> 00:26:17,279
kubernetes which we will be attacking in

540
00:26:17,279 --> 00:26:19,520
today's workshop so like you see on the

541
00:26:19,520 --> 00:26:20,880
screen these are like the various

542
00:26:20,880 --> 00:26:23,360
important parts of the kubernetes well

543
00:26:23,360 --> 00:26:25,679
kubernetes follows a client server

544
00:26:25,679 --> 00:26:27,360
architecture model and the working

545
00:26:27,360 --> 00:26:28,880
kubernetes deployment is called a

546
00:26:28,880 --> 00:26:31,279
cluster you can visualize the kubernetes

547
00:26:31,279 --> 00:26:33,840
cluster as two parts the control plane

548
00:26:33,840 --> 00:26:36,320
and the compute machine or the nodes

549
00:26:36,320 --> 00:26:38,799
it is possible to have a multi-master

550
00:26:38,799 --> 00:26:41,679
setup but by default there is a single

551
00:26:41,679 --> 00:26:43,200
master server which acts as a

552
00:26:43,200 --> 00:26:44,480
controlling node and it is like the

553
00:26:44,480 --> 00:26:46,320
point of contact i'll explain you what

554
00:26:46,320 --> 00:26:47,360
that means

555
00:26:47,360 --> 00:26:49,039
so what happens in the kubernetes

556
00:26:49,039 --> 00:26:50,559
control plane

557
00:26:50,559 --> 00:26:52,640
so control plane if the control plane is

558
00:26:52,640 --> 00:26:55,200
the brains of the operation the worker

559
00:26:55,200 --> 00:26:56,720
nodes are the muscles

560
00:26:56,720 --> 00:26:58,400
so let's begin in the control plane in

561
00:26:58,400 --> 00:26:59,760
the nerve center of the kubernetes

562
00:26:59,760 --> 00:27:01,600
cluster

563
00:27:01,600 --> 00:27:03,120
so the control plane here we find the

564
00:27:03,120 --> 00:27:04,880
kubernetes components that control the

565
00:27:04,880 --> 00:27:07,440
cluster along with the data about the

566
00:27:07,440 --> 00:27:09,360
cluster state and the configuration

567
00:27:09,360 --> 00:27:11,279
these core kubernetes components handle

568
00:27:11,279 --> 00:27:12,880
the important work of making sure your

569
00:27:12,880 --> 00:27:14,480
containers are running in sufficient

570
00:27:14,480 --> 00:27:17,600
numbers and with the necessary resources

571
00:27:17,600 --> 00:27:19,760
the control plane is in constant contact

572
00:27:19,760 --> 00:27:21,120
with your nodes

573
00:27:21,120 --> 00:27:22,640
if you have configured your cluster to

574
00:27:22,640 --> 00:27:24,640
run in a certain way the control plane

575
00:27:24,640 --> 00:27:26,480
make sure it does

576
00:27:26,480 --> 00:27:27,919
and the next important component is

577
00:27:27,919 --> 00:27:30,640
kubernetes api server cube api server

578
00:27:30,640 --> 00:27:32,000
so if you need to interact with your

579
00:27:32,000 --> 00:27:33,520
kubernetes cluster

580
00:27:33,520 --> 00:27:34,960
talk to the api

581
00:27:34,960 --> 00:27:37,360
the kubernetes api is the front end of

582
00:27:37,360 --> 00:27:39,200
the kubernetes control plane handling

583
00:27:39,200 --> 00:27:41,600
internal and external requests the api

584
00:27:41,600 --> 00:27:44,000
server determines if a request is valid

585
00:27:44,000 --> 00:27:47,120
and if it is processes it you can access

586
00:27:47,120 --> 00:27:49,120
the api through the rest pulse or

587
00:27:49,120 --> 00:27:50,720
through the cube cdl command line

588
00:27:50,720 --> 00:27:52,159
interface or through other command line

589
00:27:52,159 --> 00:27:53,840
tools that are like q am and many other

590
00:27:53,840 --> 00:27:54,799
tools

591
00:27:54,799 --> 00:27:57,039
and what is cube scheduler does is your

592
00:27:57,039 --> 00:27:58,320
cluster healthy

593
00:27:58,320 --> 00:28:00,000
if new containers are needed where will

594
00:28:00,000 --> 00:28:01,919
they fit these are the common concerns

595
00:28:01,919 --> 00:28:04,000
of the kubernetes scheduler

596
00:28:04,000 --> 00:28:06,240
and the cube controller manager

597
00:28:06,240 --> 00:28:07,840
the controller takes care of actually

598
00:28:07,840 --> 00:28:09,760
running the cluster and the kubernetes

599
00:28:09,760 --> 00:28:11,520
controller manager contains several

600
00:28:11,520 --> 00:28:13,440
controller functions in one one

601
00:28:13,440 --> 00:28:15,120
controller consults the scheduler and

602
00:28:15,120 --> 00:28:16,640
make sure the correct number of pods are

603
00:28:16,640 --> 00:28:18,799
running and if a port goes down another

604
00:28:18,799 --> 00:28:21,440
controller notices and responds

605
00:28:21,440 --> 00:28:24,559
so another important component is hcd

606
00:28:24,559 --> 00:28:26,880
so configuration data and information

607
00:28:26,880 --> 00:28:29,120
about the state of the cluster lives in

608
00:28:29,120 --> 00:28:30,960
that city it's a key value store

609
00:28:30,960 --> 00:28:32,960
database it's fault tolerant and

610
00:28:32,960 --> 00:28:35,279
distributed and hcd is designed to be

611
00:28:35,279 --> 00:28:37,440
like the ultimate source of truth about

612
00:28:37,440 --> 00:28:39,440
the kubernetes cluster

613
00:28:39,440 --> 00:28:40,799
now let's see what happens in the

614
00:28:40,799 --> 00:28:43,279
kubernetes node the worker nodes the

615
00:28:43,279 --> 00:28:45,840
worker nodes are the muzzles they run

616
00:28:45,840 --> 00:28:47,760
and control all the pods and containers

617
00:28:47,760 --> 00:28:49,200
from your cluster

618
00:28:49,200 --> 00:28:51,039
you can have zero or more worker nodes

619
00:28:51,039 --> 00:28:52,880
on your cluster although it is not

620
00:28:52,880 --> 00:28:54,320
recommended to run your parts on the

621
00:28:54,320 --> 00:28:56,559
same node as the control plane the main

622
00:28:56,559 --> 00:28:58,320
components of our workers are the

623
00:28:58,320 --> 00:29:00,960
cubelet the container runtime interface

624
00:29:00,960 --> 00:29:03,200
and the q proxy

625
00:29:03,200 --> 00:29:04,880
as shown in the image let's discuss what

626
00:29:04,880 --> 00:29:06,080
the pods are

627
00:29:06,080 --> 00:29:08,480
a pod is the smallest and simplest unit

628
00:29:08,480 --> 00:29:10,320
in the kubernetes object model it

629
00:29:10,320 --> 00:29:12,000
represents a single instance of an

630
00:29:12,000 --> 00:29:14,399
application each pod is made up of

631
00:29:14,399 --> 00:29:16,480
container or a series of tightly coupled

632
00:29:16,480 --> 00:29:18,559
containers along with options that

633
00:29:18,559 --> 00:29:21,440
govern how the containers are run

634
00:29:21,440 --> 00:29:23,919
and next important piece is cubelet

635
00:29:23,919 --> 00:29:25,760
each compute node each worker node

636
00:29:25,760 --> 00:29:27,679
contains a cubelet it's a tiny

637
00:29:27,679 --> 00:29:29,039
application that communicates with the

638
00:29:29,039 --> 00:29:31,360
control plane the cubelet makes sure the

639
00:29:31,360 --> 00:29:33,360
containers are running in the pod when

640
00:29:33,360 --> 00:29:35,360
the control plane needs something to

641
00:29:35,360 --> 00:29:37,679
happen in a node the cubelet executes

642
00:29:37,679 --> 00:29:39,039
the action

643
00:29:39,039 --> 00:29:41,520
and the last one is the cube proxy

644
00:29:41,520 --> 00:29:44,080
each compute node also like contains a

645
00:29:44,080 --> 00:29:46,000
cube proxy it's a network proxy for

646
00:29:46,000 --> 00:29:47,679
facilitating kubernetes networking

647
00:29:47,679 --> 00:29:50,159
services the cube proxy handles the

648
00:29:50,159 --> 00:29:52,559
network communications inside or outside

649
00:29:52,559 --> 00:29:54,240
of your cluster relaying either on your

650
00:29:54,240 --> 00:29:55,760
operating system's packet filtering

651
00:29:55,760 --> 00:30:00,600
layer or forwarding the traffic itself

652
00:30:11,600 --> 00:30:13,919
so we will also look into one quick

653
00:30:13,919 --> 00:30:16,880
stuff now let us visualize how an

654
00:30:16,880 --> 00:30:18,320
attacker will look at like different

655
00:30:18,320 --> 00:30:19,520
components of

656
00:30:19,520 --> 00:30:21,279
the kubernetes architecture

657
00:30:21,279 --> 00:30:23,520
so when an attacker has to target a map

658
00:30:23,520 --> 00:30:25,039
master like in the previous diagram we

659
00:30:25,039 --> 00:30:26,960
have shown like the diagram shows all

660
00:30:26,960 --> 00:30:28,559
the communications go through like the

661
00:30:28,559 --> 00:30:30,640
kubernetes api server this is what

662
00:30:30,640 --> 00:30:32,080
defines and controls all of the

663
00:30:32,080 --> 00:30:33,679
kubernetes management and operational

664
00:30:33,679 --> 00:30:34,960
functions

665
00:30:34,960 --> 00:30:36,640
it is generally exposed on every

666
00:30:36,640 --> 00:30:38,080
deployment since it is needed for

667
00:30:38,080 --> 00:30:39,840
management purposes you know what but

668
00:30:39,840 --> 00:30:41,840
exposing your aps server to the public

669
00:30:41,840 --> 00:30:43,440
is the most common entry point for

670
00:30:43,440 --> 00:30:45,840
attackers it is actually a really juicy

671
00:30:45,840 --> 00:30:48,080
target malicious attackers or actors

672
00:30:48,080 --> 00:30:49,440
will always try to get access to the

673
00:30:49,440 --> 00:30:51,039
kubernetes api server and the control

674
00:30:51,039 --> 00:30:53,360
plane and once it is compromised they

675
00:30:53,360 --> 00:30:54,799
can then proceed to compromising the

676
00:30:54,799 --> 00:30:56,000
whole cluster

677
00:30:56,000 --> 00:30:58,240
at times it may not be a bad day for

678
00:30:58,240 --> 00:31:00,000
just your cluster but also your

679
00:31:00,000 --> 00:31:01,360
underlying cloud account or the

680
00:31:01,360 --> 00:31:02,480
underlying infrastructure where the

681
00:31:02,480 --> 00:31:04,720
cluster is running and the next

682
00:31:04,720 --> 00:31:05,840
important component that will be

683
00:31:05,840 --> 00:31:08,000
attacked is like hcd it's a key value

684
00:31:08,000 --> 00:31:09,360
store and the core component of the

685
00:31:09,360 --> 00:31:11,760
kubernetes cluster and it's the main

686
00:31:11,760 --> 00:31:13,840
data storage of your location of the

687
00:31:13,840 --> 00:31:15,600
cluster this means that all of your

688
00:31:15,600 --> 00:31:17,919
cluster objects are saved here fcd is

689
00:31:17,919 --> 00:31:19,519
considered like the source of truth for

690
00:31:19,519 --> 00:31:21,360
kubernetes it is used to store highly

691
00:31:21,360 --> 00:31:23,279
sensitive configuration data but it is

692
00:31:23,279 --> 00:31:25,279
also easily left unprotected

693
00:31:25,279 --> 00:31:28,000
anyone who gains access to xcd targets

694
00:31:28,000 --> 00:31:29,679
to retrieve service account tokens and

695
00:31:29,679 --> 00:31:31,600
secrets and once if an attacker has

696
00:31:31,600 --> 00:31:33,200
access to privileged secret or a token

697
00:31:33,200 --> 00:31:35,120
then it's game over a very quick win for

698
00:31:35,120 --> 00:31:37,200
the attacker we'll be looking into that

699
00:31:37,200 --> 00:31:38,799
stuff during the workshop

700
00:31:38,799 --> 00:31:40,640
and likewise pretty much the attackers

701
00:31:40,640 --> 00:31:42,880
will be targeting the cubelet like we

702
00:31:42,880 --> 00:31:44,399
have seen on the node like cubelet

703
00:31:44,399 --> 00:31:47,760
exposes to uh endpoints read and read

704
00:31:47,760 --> 00:31:49,679
write and point and read only endpoint

705
00:31:49,679 --> 00:31:51,120
and we'll be looking into attacking that

706
00:31:51,120 --> 00:31:52,799
stuff and the next important thing is

707
00:31:52,799 --> 00:31:54,640
like container runtime

708
00:31:54,640 --> 00:31:56,559
this component enables the functionality

709
00:31:56,559 --> 00:31:58,720
required to start run and manage

710
00:31:58,720 --> 00:32:00,720
containers on a given node i can't

711
00:32:00,720 --> 00:32:02,320
stress enough how important it is to

712
00:32:02,320 --> 00:32:04,480
secure your workloads to the containers

713
00:32:04,480 --> 00:32:06,320
a privileged container when gained

714
00:32:06,320 --> 00:32:08,880
access gives an attacker the privilege

715
00:32:08,880 --> 00:32:10,480
to run the command in the context of the

716
00:32:10,480 --> 00:32:12,720
container and the option to escape and

717
00:32:12,720 --> 00:32:14,559
access the host resources this is an end

718
00:32:14,559 --> 00:32:16,880
game too an attacker who gains access to

719
00:32:16,880 --> 00:32:18,640
the container has gained access to your

720
00:32:18,640 --> 00:32:20,240
cluster and even eventually the

721
00:32:20,240 --> 00:32:22,159
underlying account in today's workshop

722
00:32:22,159 --> 00:32:23,519
we'll be looking into all the stuff

723
00:32:23,519 --> 00:32:25,200
stuff like the initial access like

724
00:32:25,200 --> 00:32:26,880
gaining access

725
00:32:26,880 --> 00:32:29,200
to the kubernetes cluster by using like

726
00:32:29,200 --> 00:32:32,000
anonymous access or an insecure port or

727
00:32:32,000 --> 00:32:33,919
cubelet read write ports or read only

728
00:32:33,919 --> 00:32:36,080
ports and we'll be looking into abusing

729
00:32:36,080 --> 00:32:37,840
a web application and gaining access to

730
00:32:37,840 --> 00:32:39,840
the underlying kubernetes cluster via a

731
00:32:39,840 --> 00:32:40,799
pod

732
00:32:40,799 --> 00:32:42,480
and we'll be looking into like executing

733
00:32:42,480 --> 00:32:44,000
into multiple different containers or

734
00:32:44,000 --> 00:32:46,240
doing some remote execution inside the

735
00:32:46,240 --> 00:32:47,120
stuff

736
00:32:47,120 --> 00:32:49,279
and we will also do some uh persistent

737
00:32:49,279 --> 00:32:50,720
techniques such as like back door

738
00:32:50,720 --> 00:32:52,559
containers or malicious ignition

739
00:32:52,559 --> 00:32:54,640
controllers and we will be doing some

740
00:32:54,640 --> 00:32:56,799
privilege escalation techniques and uh

741
00:32:56,799 --> 00:32:58,240
we'll be looking into defensive and

742
00:32:58,240 --> 00:33:00,240
techniques and credential access and

743
00:33:00,240 --> 00:33:01,679
we'll be performing some lateral

744
00:33:01,679 --> 00:33:04,720
movements and collection and then

745
00:33:04,720 --> 00:33:06,080
we'll be covering most of the stuff in

746
00:33:06,080 --> 00:33:09,399
today's workshop

747
00:33:10,000 --> 00:33:11,679
so now let's quickly start with some

748
00:33:11,679 --> 00:33:16,600
very basics of the kubernetes commands

749
00:33:26,320 --> 00:33:28,399
so once

750
00:33:28,399 --> 00:33:31,120
i want you to all to start by just

751
00:33:31,120 --> 00:33:32,720
running this command

752
00:33:32,720 --> 00:33:34,720
and it will ensure like it will give you

753
00:33:34,720 --> 00:33:36,399
the information it will say that your

754
00:33:36,399 --> 00:33:37,840
cluster is up and running if it is up

755
00:33:37,840 --> 00:33:38,880
and running it will give you the

756
00:33:38,880 --> 00:33:40,159
information about like your control

757
00:33:40,159 --> 00:33:42,000
plane the ip address on the port number

758
00:33:42,000 --> 00:33:45,120
and also like the cube dns

759
00:33:45,120 --> 00:33:47,600
are you all still here do you have any

760
00:33:47,600 --> 00:33:49,679
issues with the page am i going too fast

761
00:33:49,679 --> 00:33:51,120
or too slow

762
00:33:51,120 --> 00:33:52,640
just raise your hand if it is everything

763
00:33:52,640 --> 00:33:54,159
is fine and we are good to go ahead with

764
00:33:54,159 --> 00:33:57,279
the rest of the workshop

765
00:33:58,320 --> 00:34:00,320
and we are pretty good with the timing

766
00:34:00,320 --> 00:34:03,279
we are on pace

767
00:34:04,080 --> 00:34:06,159
so once this section is done we will

768
00:34:06,159 --> 00:34:07,679
have a quick five minutes break every

769
00:34:07,679 --> 00:34:09,359
one hour we i will give you like a quick

770
00:34:09,359 --> 00:34:11,440
five minutes break to revive and then

771
00:34:11,440 --> 00:34:12,879
we'll be continuing with the rest of the

772
00:34:12,879 --> 00:34:14,079
stuff

773
00:34:14,079 --> 00:34:18,359
just raise your hand are we good to go

774
00:34:29,199 --> 00:34:33,480
perfect good to go

775
00:34:35,839 --> 00:34:37,760
well the documentation we have all these

776
00:34:37,760 --> 00:34:39,918
commands guys so in order to identify

777
00:34:39,918 --> 00:34:41,359
like your kubernetes clustering for that

778
00:34:41,359 --> 00:34:43,280
is the command we use it's pretty much

779
00:34:43,280 --> 00:34:45,199
the same in the dot for docker we used

780
00:34:45,199 --> 00:34:47,280
the command called uh docker client

781
00:34:47,280 --> 00:34:49,520
docker and then we pass the verb like

782
00:34:49,520 --> 00:34:51,599
command run get something pretty much

783
00:34:51,599 --> 00:34:52,639
we'll be doing the same thing for

784
00:34:52,639 --> 00:34:54,079
kubernetes we'll be passing like the

785
00:34:54,079 --> 00:34:56,320
cube cdl client and everything by

786
00:34:56,320 --> 00:34:58,160
default is installed on your machines on

787
00:34:58,160 --> 00:34:59,520
this workstation you don't need to do

788
00:34:59,520 --> 00:35:01,040
anything i have set it up everything for

789
00:35:01,040 --> 00:35:01,760
you

790
00:35:01,760 --> 00:35:02,400
so

791
00:35:02,400 --> 00:35:04,800
we use like the cube ctl and we pass the

792
00:35:04,800 --> 00:35:06,800
work get to get some information and

793
00:35:06,800 --> 00:35:09,040
then we pass the resource name it could

794
00:35:09,040 --> 00:35:11,200
be like the pods or

795
00:35:11,200 --> 00:35:13,119
the nodes or the name spaces whatsoever

796
00:35:13,119 --> 00:35:14,160
for example if i want to get the

797
00:35:14,160 --> 00:35:15,680
information of the pod

798
00:35:15,680 --> 00:35:17,839
cube ctl get bored is the command if i

799
00:35:17,839 --> 00:35:20,000
want to see all the pods i will pass the

800
00:35:20,000 --> 00:35:21,920
flag iphone uppercase a

801
00:35:21,920 --> 00:35:23,359
it will give me all the ports that are

802
00:35:23,359 --> 00:35:24,960
running inside the cluster

803
00:35:24,960 --> 00:35:26,560
at this stage you may not see all these

804
00:35:26,560 --> 00:35:28,240
containers but don't stress you will be

805
00:35:28,240 --> 00:35:29,839
looking these many containers going

806
00:35:29,839 --> 00:35:31,680
forward

807
00:35:31,680 --> 00:35:34,400
so likewise instead of board i can give

808
00:35:34,400 --> 00:35:35,920
something like

809
00:35:35,920 --> 00:35:37,520
node which will give me like the

810
00:35:37,520 --> 00:35:38,720
information of the nodes that are

811
00:35:38,720 --> 00:35:40,240
running inside the cluster which means i

812
00:35:40,240 --> 00:35:42,720
have one control plane the master node

813
00:35:42,720 --> 00:35:44,160
and i have like two worker nodes for the

814
00:35:44,160 --> 00:35:46,640
workshop

815
00:35:46,960 --> 00:35:48,880
pretty much you can get any information

816
00:35:48,880 --> 00:35:50,800
like for example

817
00:35:50,800 --> 00:35:52,720
deployments so use the command called

818
00:35:52,720 --> 00:35:55,680
cube ctl get

819
00:35:55,920 --> 00:35:58,079
and one last one if you want to see the

820
00:35:58,079 --> 00:36:00,240
name spaces we pass the flag get

821
00:36:00,240 --> 00:36:01,839
namespace iphone 8 will list all the

822
00:36:01,839 --> 00:36:04,079
namespaces inside

823
00:36:04,079 --> 00:36:06,720
the cluster

824
00:36:09,200 --> 00:36:10,320
and for example if you want to

825
00:36:10,320 --> 00:36:12,240
exclusively get the resources in

826
00:36:12,240 --> 00:36:14,560
particular name space we pass the flag

827
00:36:14,560 --> 00:36:16,560
called hyphen n and the names for

828
00:36:16,560 --> 00:36:18,480
example this command says hey please get

829
00:36:18,480 --> 00:36:19,680
all the parts that are running in the

830
00:36:19,680 --> 00:36:21,680
name space called hube system so we pass

831
00:36:21,680 --> 00:36:23,920
the flag guy to n and cube system this

832
00:36:23,920 --> 00:36:25,680
way i will be getting all the pots or i

833
00:36:25,680 --> 00:36:27,839
am filtering the ports

834
00:36:27,839 --> 00:36:29,040
that are running in the cube system

835
00:36:29,040 --> 00:36:31,599
namespace

836
00:36:36,079 --> 00:36:37,920
and another important command

837
00:36:37,920 --> 00:36:41,079
is like

838
00:36:41,599 --> 00:36:43,119
if you want to see the configuration of

839
00:36:43,119 --> 00:36:44,640
any of

840
00:36:44,640 --> 00:36:47,200
the file

841
00:36:53,680 --> 00:36:57,760
we pass the flag called uh hyphen o ammo

842
00:36:57,760 --> 00:37:00,880
or iphone or json for example

843
00:37:00,880 --> 00:37:03,359
cube cdl

844
00:37:03,359 --> 00:37:05,680
get port

845
00:37:05,680 --> 00:37:07,520
in the cube system name space i'm giving

846
00:37:07,520 --> 00:37:09,760
this one

847
00:37:09,760 --> 00:37:11,200
in the format

848
00:37:11,200 --> 00:37:12,800
i want the output

849
00:37:12,800 --> 00:37:14,640
by amble format so i'm passing the flag

850
00:37:14,640 --> 00:37:16,000
iphone or ammo

851
00:37:16,000 --> 00:37:17,119
which will give me like the

852
00:37:17,119 --> 00:37:19,280
configuration of that pod in this gamble

853
00:37:19,280 --> 00:37:21,040
format

854
00:37:21,040 --> 00:37:22,240
so we'll be looking into this stuff

855
00:37:22,240 --> 00:37:23,680
going forward but that is the command

856
00:37:23,680 --> 00:37:25,680
that we use if you want

857
00:37:25,680 --> 00:37:27,200
the manifestation file in the json

858
00:37:27,200 --> 00:37:29,200
format we've passed the flag iphone json

859
00:37:29,200 --> 00:37:30,400
which will give everything in the json

860
00:37:30,400 --> 00:37:32,720
format

861
00:37:32,720 --> 00:37:34,320
we'll be using these commands in the

862
00:37:34,320 --> 00:37:36,240
workshop

863
00:37:36,240 --> 00:37:38,320
and for example creating anything we

864
00:37:38,320 --> 00:37:39,200
pass

865
00:37:39,200 --> 00:37:41,119
or we use the work called cube ctl

866
00:37:41,119 --> 00:37:42,640
create for example in the scenario i

867
00:37:42,640 --> 00:37:46,240
want to create called namespace

868
00:37:46,560 --> 00:37:47,920
barcelona

869
00:37:47,920 --> 00:37:50,640
it says name says created

870
00:37:50,640 --> 00:37:54,079
your cdl get namespace

871
00:37:54,079 --> 00:37:56,079
cool the name space barcelona has been

872
00:37:56,079 --> 00:37:58,320
created six seconds ago so that's how we

873
00:37:58,320 --> 00:38:00,720
create something and for example if you

874
00:38:00,720 --> 00:38:04,839
want to create some deployment

875
00:38:05,839 --> 00:38:09,280
we use a command called cubectl in the

876
00:38:09,280 --> 00:38:13,359
namespace called besides or maybe

877
00:38:14,880 --> 00:38:16,079
i will use

878
00:38:16,079 --> 00:38:19,839
the barcelona which i have created

879
00:38:20,560 --> 00:38:23,040
deployment functions it says deployment

880
00:38:23,040 --> 00:38:25,680
created we will see the deployment using

881
00:38:25,680 --> 00:38:28,160
the command ctl get deploy

882
00:38:28,160 --> 00:38:30,000
fnn

883
00:38:30,000 --> 00:38:32,960
barcelona it says it is coming up

884
00:38:32,960 --> 00:38:35,760
so that way we create the deployments

885
00:38:35,760 --> 00:38:38,240
and we can also scale the deployments

886
00:38:38,240 --> 00:38:40,079
and we scale in like scale out by

887
00:38:40,079 --> 00:38:41,920
passing the command called iphone hyphen

888
00:38:41,920 --> 00:38:44,160
replicas you have that command in the

889
00:38:44,160 --> 00:38:47,280
pdf document you can just try it

890
00:38:47,280 --> 00:38:49,359
and for example if you want to edit any

891
00:38:49,359 --> 00:38:51,599
of the deployments use the command

892
00:38:51,599 --> 00:38:53,920
called

893
00:38:54,160 --> 00:38:55,839
cubectl

894
00:38:55,839 --> 00:38:57,359
iphone

895
00:38:57,359 --> 00:39:00,560
barcelona edit deployment for example

896
00:39:00,560 --> 00:39:02,160
this one

897
00:39:02,160 --> 00:39:03,599
will give you an option to edit for

898
00:39:03,599 --> 00:39:05,680
example if you want to change the name

899
00:39:05,680 --> 00:39:07,599
of the image or if you want to change

900
00:39:07,599 --> 00:39:09,839
some specs or the flags or if you want

901
00:39:09,839 --> 00:39:12,079
to change anything else you can change

902
00:39:12,079 --> 00:39:15,079
here

903
00:39:22,720 --> 00:39:24,800
and another important command is like a

904
00:39:24,800 --> 00:39:27,520
qcbl auth can i this will tell you what

905
00:39:27,520 --> 00:39:29,359
kind of privileges you have inside the

906
00:39:29,359 --> 00:39:32,079
cluster for example cube cpl or can i

907
00:39:32,079 --> 00:39:36,400
and then i pass the verb called get

908
00:39:37,040 --> 00:39:38,880
the resource name secrets it will we are

909
00:39:38,880 --> 00:39:40,480
asking whether do i have the privileges

910
00:39:40,480 --> 00:39:42,880
to get the secrets or not it says yes i

911
00:39:42,880 --> 00:39:45,280
have privileges to get the secrets

912
00:39:45,280 --> 00:39:48,000
likewise sports yes so this is how you

913
00:39:48,000 --> 00:39:49,680
check for the privileges cube cp a lot

914
00:39:49,680 --> 00:39:52,000
can i

915
00:39:52,000 --> 00:39:53,760
or if you want to see the completely

916
00:39:53,760 --> 00:39:56,640
stock privileges that you have got

917
00:39:56,640 --> 00:39:58,560
use the command called cube city log can

918
00:39:58,560 --> 00:40:01,040
i iphone list

919
00:40:01,040 --> 00:40:03,839
so this way here it says you have like

920
00:40:03,839 --> 00:40:06,480
star on the non resource urls and the

921
00:40:06,480 --> 00:40:08,000
verb star which means you can perform

922
00:40:08,000 --> 00:40:08,839
almost

923
00:40:08,839 --> 00:40:11,359
everything because you are an admin on

924
00:40:11,359 --> 00:40:14,400
this cluster at this stage

925
00:40:23,200 --> 00:40:24,400
and

926
00:40:24,400 --> 00:40:26,720
the next command

927
00:40:26,720 --> 00:40:28,000
is like we'll be looking into some

928
00:40:28,000 --> 00:40:29,040
secrets

929
00:40:29,040 --> 00:40:32,240
cube cdl get ns

930
00:40:32,240 --> 00:40:33,680
and for example if you want to get

931
00:40:33,680 --> 00:40:36,839
secrets in the name space called

932
00:40:36,839 --> 00:40:39,440
uh cube system

933
00:40:39,440 --> 00:40:40,800
you'll see they'll get secret iphone and

934
00:40:40,800 --> 00:40:42,720
cube system it will list all the secrets

935
00:40:42,720 --> 00:40:44,400
that are running or that exist in the

936
00:40:44,400 --> 00:40:46,880
name space and if you want to describe

937
00:40:46,880 --> 00:40:48,560
or if you want to get the token of any

938
00:40:48,560 --> 00:40:49,920
particular

939
00:40:49,920 --> 00:40:52,000
secret use command called troop cdl

940
00:40:52,000 --> 00:40:54,880
describe secret and any random one for

941
00:40:54,880 --> 00:40:57,119
example name of the token and then we

942
00:40:57,119 --> 00:41:00,720
pass iphone n the name space

943
00:41:00,720 --> 00:41:02,880
it will help us to describe the secret

944
00:41:02,880 --> 00:41:05,520
which will eventually give us the token

945
00:41:05,520 --> 00:41:07,599
and using this token you can pass it to

946
00:41:07,599 --> 00:41:09,599
the rest api to authenticate and then

947
00:41:09,599 --> 00:41:11,040
for authentication authorization and you

948
00:41:11,040 --> 00:41:12,720
can start interacting with the cluster

949
00:41:12,720 --> 00:41:14,240
so you'll also see how attackers will

950
00:41:14,240 --> 00:41:17,200
abuse these things

951
00:41:18,560 --> 00:41:20,480
and at times during the deployment or

952
00:41:20,480 --> 00:41:22,240
something we may have some issues and

953
00:41:22,240 --> 00:41:23,440
that's not if you want to identify

954
00:41:23,440 --> 00:41:25,119
what's going wrong with any deployment

955
00:41:25,119 --> 00:41:27,520
or any payment set or any form

956
00:41:27,520 --> 00:41:30,640
use the command call

957
00:41:30,640 --> 00:41:32,720
describe

958
00:41:32,720 --> 00:41:35,720
cdl

959
00:41:36,160 --> 00:41:37,839
describe for example i want to describe

960
00:41:37,839 --> 00:41:40,560
this for something called

961
00:41:40,560 --> 00:41:42,800
and i will provide the name it is in the

962
00:41:42,800 --> 00:41:44,720
name space called monitoring so that way

963
00:41:44,720 --> 00:41:46,640
it will describe in case of any issues

964
00:41:46,640 --> 00:41:48,480
it will tell you what's going on what's

965
00:41:48,480 --> 00:41:50,079
going wrong with this particular part or

966
00:41:50,079 --> 00:41:51,760
the deployment that way this particular

967
00:41:51,760 --> 00:41:53,359
command will help us to troubleshoot any

968
00:41:53,359 --> 00:41:56,640
stuff cube cpl described

969
00:41:57,520 --> 00:41:59,200
and needless to say another important

970
00:41:59,200 --> 00:42:02,720
command is like

971
00:42:02,720 --> 00:42:05,920
cube cdl logs

972
00:42:05,920 --> 00:42:07,839
this will give us the logs of any

973
00:42:07,839 --> 00:42:11,599
particular power cube ctl

974
00:42:12,560 --> 00:42:15,359
so that is the command that we use

975
00:42:15,359 --> 00:42:17,359
ctl logs in the name of the particular

976
00:42:17,359 --> 00:42:19,359
pod it will give us all the logs of the

977
00:42:19,359 --> 00:42:21,920
container

978
00:42:24,400 --> 00:42:26,079
and another important command is like

979
00:42:26,079 --> 00:42:28,880
cube ctl get events which will help us

980
00:42:28,880 --> 00:42:30,400
identify all the events that are

981
00:42:30,400 --> 00:42:32,240
happening inside the cluster it says

982
00:42:32,240 --> 00:42:34,560
unhealthy something is unhealthy so let

983
00:42:34,560 --> 00:42:39,078
us see what's in healthy cp's

984
00:42:41,119 --> 00:42:42,319
here

985
00:42:42,319 --> 00:42:45,319
hey

986
00:42:46,079 --> 00:42:48,880
says pod falco exporter

987
00:42:48,880 --> 00:42:50,400
it says something is healthy but it is

988
00:42:50,400 --> 00:42:52,160
up and running arenas probe failed some

989
00:42:52,160 --> 00:42:54,000
issues so that way you identify the

990
00:42:54,000 --> 00:42:55,200
events that are happening inside the

991
00:42:55,200 --> 00:42:58,200
cluster

992
00:43:00,319 --> 00:43:01,760
and i have like few other commands

993
00:43:01,760 --> 00:43:04,160
listed in the documentation guys if you

994
00:43:04,160 --> 00:43:05,599
want to exit into one of the running

995
00:43:05,599 --> 00:43:07,760
containers how to do it

996
00:43:07,760 --> 00:43:10,000
and

997
00:43:10,079 --> 00:43:11,599
another important piece that i would

998
00:43:11,599 --> 00:43:13,359
like you to know is like the cube ctl

999
00:43:13,359 --> 00:43:15,760
config so every time you issue a command

1000
00:43:15,760 --> 00:43:17,680
using huge ctl and the way it is

1001
00:43:17,680 --> 00:43:19,200
interacting with the kubernetes cluster

1002
00:43:19,200 --> 00:43:20,240
there is something happening in the

1003
00:43:20,240 --> 00:43:22,000
background so in order to understand

1004
00:43:22,000 --> 00:43:24,319
what that is it says you are interacting

1005
00:43:24,319 --> 00:43:26,240
your current context is this the current

1006
00:43:26,240 --> 00:43:28,720
context and there is something defined

1007
00:43:28,720 --> 00:43:30,480
in this current context and we will see

1008
00:43:30,480 --> 00:43:33,960
what that is

1009
00:43:41,680 --> 00:43:45,119
cube ctl config view it will give you

1010
00:43:45,119 --> 00:43:47,680
the information of your config file

1011
00:43:47,680 --> 00:43:49,520
so here it says

1012
00:43:49,520 --> 00:43:50,720
this is the cluster that you're

1013
00:43:50,720 --> 00:43:52,240
interacting with

1014
00:43:52,240 --> 00:43:53,599
and this is the user that you are

1015
00:43:53,599 --> 00:43:55,280
interacting with

1016
00:43:55,280 --> 00:43:57,040
and this is the name

1017
00:43:57,040 --> 00:43:59,119
and this is where it has like the client

1018
00:43:59,119 --> 00:44:01,040
certificate and client key data so every

1019
00:44:01,040 --> 00:44:02,480
time you want to interact with the

1020
00:44:02,480 --> 00:44:05,440
community's cluster the tube ctl

1021
00:44:05,440 --> 00:44:07,200
client will ensure there is a acute

1022
00:44:07,200 --> 00:44:08,880
config exist and it has like defined

1023
00:44:08,880 --> 00:44:10,160
certificates

1024
00:44:10,160 --> 00:44:11,680
to ensure it has proper authentication

1025
00:44:11,680 --> 00:44:14,560
authorization in place

1026
00:44:20,800 --> 00:44:23,119
pretty much

1027
00:44:23,119 --> 00:44:24,160
and there are like so many other

1028
00:44:24,160 --> 00:44:26,400
important commands for you to try

1029
00:44:26,400 --> 00:44:30,960
just uh test them and play with them

1030
00:44:31,920 --> 00:44:34,720
and if you want to identify

1031
00:44:34,720 --> 00:44:36,480
what are like the total resources that

1032
00:44:36,480 --> 00:44:37,839
exist inside the communities we use the

1033
00:44:37,839 --> 00:44:39,440
command called huge cpl apif and

1034
00:44:39,440 --> 00:44:41,280
resources so these are the different

1035
00:44:41,280 --> 00:44:43,040
types of resources that exist inside the

1036
00:44:43,040 --> 00:44:46,079
cluster cube ctl api and resources it

1037
00:44:46,079 --> 00:44:48,400
says like the bindings the config maps

1038
00:44:48,400 --> 00:44:50,720
endpoints events image ranges namespaces

1039
00:44:50,720 --> 00:44:53,520
nodes pods secrets service account

1040
00:44:53,520 --> 00:44:54,720
services these are the different types

1041
00:44:54,720 --> 00:44:56,960
of resources that exist inside the

1042
00:44:56,960 --> 00:44:58,720
kubernetes cluster

1043
00:44:58,720 --> 00:45:00,079
and these are like the short forms

1044
00:45:00,079 --> 00:45:02,240
instead of getting something like

1045
00:45:02,240 --> 00:45:04,240
namespace instead of typing the full

1046
00:45:04,240 --> 00:45:08,240
word namespace we can just type ns

1047
00:45:10,960 --> 00:45:13,920
and if you want to get something a good

1048
00:45:13,920 --> 00:45:15,520
appropriate output

1049
00:45:15,520 --> 00:45:17,359
we use the command called cubectl api

1050
00:45:17,359 --> 00:45:20,319
resources iphone or wide it will give

1051
00:45:20,319 --> 00:45:23,119
a proper and more information like what

1052
00:45:23,119 --> 00:45:24,560
verbs applicable to that particular

1053
00:45:24,560 --> 00:45:27,440
resource iphone white is always useful

1054
00:45:27,440 --> 00:45:28,960
in some other scenarios as well for

1055
00:45:28,960 --> 00:45:30,960
example if i want to get

1056
00:45:30,960 --> 00:45:32,880
cube cdl

1057
00:45:32,880 --> 00:45:35,839
get nodes i have no y will tell us like

1058
00:45:35,839 --> 00:45:38,000
the name of the node the status of the

1059
00:45:38,000 --> 00:45:40,000
node the version and the ip address and

1060
00:45:40,000 --> 00:45:42,000
where it is deployed on which

1061
00:45:42,000 --> 00:45:43,359
it is actually running will give all

1062
00:45:43,359 --> 00:45:45,040
this information so it's always good to

1063
00:45:45,040 --> 00:45:48,079
use the command iphone y

1064
00:45:52,640 --> 00:45:54,560
cool that pretty much covers all the

1065
00:45:54,560 --> 00:45:56,800
basic stuff guys uh we have we are

1066
00:45:56,800 --> 00:45:59,200
almost close to like one hour we have

1067
00:45:59,200 --> 00:46:01,680
set up the workstation we have seen like

1068
00:46:01,680 --> 00:46:03,040
the basics of

1069
00:46:03,040 --> 00:46:05,200
docker and the kubernetes and the next

1070
00:46:05,200 --> 00:46:06,800
one over we will be completely working

1071
00:46:06,800 --> 00:46:08,560
on like the attacking stuff and then

1072
00:46:08,560 --> 00:46:10,480
we'll be looking into like the defending

1073
00:46:10,480 --> 00:46:12,480
and then we will have different kinds of

1074
00:46:12,480 --> 00:46:14,640
monitoring and then runtime monitoring

1075
00:46:14,640 --> 00:46:16,079
and container scanning all these kinds

1076
00:46:16,079 --> 00:46:18,560
of stuff so we will take a break for

1077
00:46:18,560 --> 00:46:20,160
five minutes and we will catch up in the

1078
00:46:20,160 --> 00:46:22,720
next five minutes again

1079
00:46:22,720 --> 00:46:24,960
is everything good anybody any questions

1080
00:46:24,960 --> 00:46:27,040
feel free to share them on the slack

1081
00:46:27,040 --> 00:46:30,319
channel or leave a message here

1082
00:46:30,319 --> 00:46:31,599
if you feel that you are missing

1083
00:46:31,599 --> 00:46:33,359
something anything and everything that

1084
00:46:33,359 --> 00:46:35,280
we did so far and whatever we will be

1085
00:46:35,280 --> 00:46:37,599
doing for the rest of the three hours

1086
00:46:37,599 --> 00:46:39,040
is everything is mentioned in the

1087
00:46:39,040 --> 00:46:40,400
documentation

1088
00:46:40,400 --> 00:46:42,000
if you have missed the recommendation it

1089
00:46:42,000 --> 00:46:44,160
is available in the slack channel please

1090
00:46:44,160 --> 00:46:47,040
download it from there

1091
00:46:50,079 --> 00:46:51,520
i'll catch up in the next five minutes

1092
00:46:51,520 --> 00:46:54,520
thanks

1093
00:47:18,000 --> 00:47:20,079
all right guys i'm back so let's start

1094
00:47:20,079 --> 00:47:24,839
with our attacking and defending modules

1095
00:47:26,319 --> 00:47:27,599
so

1096
00:47:27,599 --> 00:47:30,000
we have like close to 13 scenarios in

1097
00:47:30,000 --> 00:47:32,559
this one so we have like scenario one

1098
00:47:32,559 --> 00:47:34,400
two three and four

1099
00:47:34,400 --> 00:47:36,000
so

1100
00:47:36,000 --> 00:47:38,400
you also have uh the solutions for the

1101
00:47:38,400 --> 00:47:40,800
scenarios you can just uh try them if

1102
00:47:40,800 --> 00:47:42,800
you feel that i'm going slower going

1103
00:47:42,800 --> 00:47:44,880
fast you can just try it yourself

1104
00:47:44,880 --> 00:47:47,359
uh you also have the solution so let us

1105
00:47:47,359 --> 00:47:50,559
start with our scenario one two three

1106
00:47:50,559 --> 00:47:53,040
and four

1107
00:47:53,040 --> 00:47:54,400
first and then we'll go ahead with the

1108
00:47:54,400 --> 00:47:57,119
rest of the ones

1109
00:47:57,920 --> 00:48:00,000
the first our three four scenarios are

1110
00:48:00,000 --> 00:48:01,520
pretty straightforward

1111
00:48:01,520 --> 00:48:06,200
so we will see what that means

1112
00:48:16,559 --> 00:48:18,160
so in the scenario one we'll be looking

1113
00:48:18,160 --> 00:48:20,480
at the stuff called

1114
00:48:20,480 --> 00:48:23,520
anonymous access

1115
00:48:31,520 --> 00:48:34,319
so this anonymous access is not enabled

1116
00:48:34,319 --> 00:48:36,319
by default however sometimes some

1117
00:48:36,319 --> 00:48:37,760
engineers like me in order to do some

1118
00:48:37,760 --> 00:48:39,520
research or to make their lives easier

1119
00:48:39,520 --> 00:48:42,079
they can create an enormous user or give

1120
00:48:42,079 --> 00:48:43,920
some anonymous privileges and they

1121
00:48:43,920 --> 00:48:46,240
eventually forget closing the stuff so

1122
00:48:46,240 --> 00:48:48,319
if there is an anonymous access enabled

1123
00:48:48,319 --> 00:48:50,000
in any cluster we will see how to

1124
00:48:50,000 --> 00:48:51,680
identify it and what we can do in that

1125
00:48:51,680 --> 00:48:54,240
scenario

1126
00:48:56,480 --> 00:48:57,280
so

1127
00:48:57,280 --> 00:48:59,599
like the first thing uh to realize when

1128
00:48:59,599 --> 00:49:01,680
thinking about securing cloud humanities

1129
00:49:01,680 --> 00:49:03,119
based clusters is that there are

1130
00:49:03,119 --> 00:49:05,520
attackers and bots constantly searching

1131
00:49:05,520 --> 00:49:07,520
the internet for exposed api servers and

1132
00:49:07,520 --> 00:49:08,880
posts of ports that are related to

1133
00:49:08,880 --> 00:49:10,079
kubernetes

1134
00:49:10,079 --> 00:49:12,319
it is critical that the cube api server

1135
00:49:12,319 --> 00:49:14,559
is not left publicly exposed

1136
00:49:14,559 --> 00:49:16,319
although the default setting is secure

1137
00:49:16,319 --> 00:49:18,480
but exposed api servers are still the

1138
00:49:18,480 --> 00:49:19,839
main entry point for attackers to

1139
00:49:19,839 --> 00:49:23,200
compromise the kubernetes cluster

1140
00:49:23,280 --> 00:49:25,680
so we will see here

1141
00:49:25,680 --> 00:49:27,680
so the first thing i want you to try is

1142
00:49:27,680 --> 00:49:29,920
issue the command call called

1143
00:49:29,920 --> 00:49:31,760
cpl cluster iphone info the command

1144
00:49:31,760 --> 00:49:33,920
which we have seen before it will give

1145
00:49:33,920 --> 00:49:37,680
you some information about your cluster

1146
00:49:38,800 --> 00:49:40,559
and the next command that i would want

1147
00:49:40,559 --> 00:49:42,319
you to try is like cubes if you will get

1148
00:49:42,319 --> 00:49:47,680
voip and white and just make a note of

1149
00:49:48,000 --> 00:49:48,800
some

1150
00:49:48,800 --> 00:49:52,559
important containers for example

1151
00:49:52,559 --> 00:49:55,440
these are the three we have like work

1152
00:49:55,440 --> 00:49:58,839
control plane

1153
00:50:01,119 --> 00:50:02,800
so let us

1154
00:50:02,800 --> 00:50:04,559
cube cd we will get voip and white

1155
00:50:04,559 --> 00:50:07,760
iphone n q iphone

1156
00:50:07,760 --> 00:50:10,240
system

1157
00:50:10,960 --> 00:50:14,319
so i want you all to identify

1158
00:50:14,319 --> 00:50:17,280
the control plane just make a note of

1159
00:50:17,280 --> 00:50:20,720
this ip address 172 180.5 that is the ip

1160
00:50:20,720 --> 00:50:24,078
address of your control plane

1161
00:50:24,559 --> 00:50:26,079
so in order to go ahead with the rest of

1162
00:50:26,079 --> 00:50:27,680
the workshop i want you all to quickly

1163
00:50:27,680 --> 00:50:30,000
install nmap

1164
00:50:30,000 --> 00:50:31,760
so just copy and paste the commands that

1165
00:50:31,760 --> 00:50:35,200
i have given in here in the pdf

1166
00:50:35,200 --> 00:50:39,160
and map is already installed

1167
00:50:41,599 --> 00:50:44,880
so we will quickly scan

1168
00:50:47,440 --> 00:50:49,359
so this is the ipad res of the control

1169
00:50:49,359 --> 00:50:51,759
plane

1170
00:50:52,000 --> 00:50:53,119
and

1171
00:50:53,119 --> 00:50:55,520
and if you google or just do a bit of

1172
00:50:55,520 --> 00:50:57,119
research like what are the important

1173
00:50:57,119 --> 00:50:58,720
kubernetes ports it will give you the

1174
00:50:58,720 --> 00:51:00,720
list of posts so to make your lives

1175
00:51:00,720 --> 00:51:02,480
easier i have already given those ports

1176
00:51:02,480 --> 00:51:03,839
for you

1177
00:51:03,839 --> 00:51:04,550
let me

1178
00:51:04,550 --> 00:51:06,079
[Music]

1179
00:51:06,079 --> 00:51:08,800
just run the nmap command on these ports

1180
00:51:08,800 --> 00:51:11,200
for now

1181
00:51:16,400 --> 00:51:17,839
so you will see an output something like

1182
00:51:17,839 --> 00:51:19,760
discover open port on four double six

1183
00:51:19,760 --> 00:51:21,359
three two three eight zero one zero two

1184
00:51:21,359 --> 00:51:23,119
five zero we will be trying and playing

1185
00:51:23,119 --> 00:51:25,280
with all those boats so it says like two

1186
00:51:25,280 --> 00:51:27,119
three seven nine fcd client two three

1187
00:51:27,119 --> 00:51:28,720
eight zero city server

1188
00:51:28,720 --> 00:51:29,599
and

1189
00:51:29,599 --> 00:51:31,280
four double six three

1190
00:51:31,280 --> 00:51:33,200
six four four three one zero two five

1191
00:51:33,200 --> 00:51:34,400
zero one two five five we'll be

1192
00:51:34,400 --> 00:51:37,680
exploiting all the spots

1193
00:51:37,680 --> 00:51:39,919
so

1194
00:51:40,720 --> 00:51:43,119
usually the port the kubernetes secure

1195
00:51:43,119 --> 00:51:45,760
port runs on either port 443 or port

1196
00:51:45,760 --> 00:51:49,680
8443 or port 6443

1197
00:51:49,680 --> 00:51:50,960
here i'm giving you like the direct

1198
00:51:50,960 --> 00:51:53,440
solution however after enumerating a bit

1199
00:51:53,440 --> 00:51:54,960
on playing with it you will get to know

1200
00:51:54,960 --> 00:51:56,400
okay this is the kubernetes and this is

1201
00:51:56,400 --> 00:51:58,400
the port that is running so what i would

1202
00:51:58,400 --> 00:52:01,040
do is like

1203
00:52:01,119 --> 00:52:03,280
i will do

1204
00:52:03,280 --> 00:52:05,760
curl to the particular port on that ip

1205
00:52:05,760 --> 00:52:06,720
address

1206
00:52:06,720 --> 00:52:09,720
172.180.5

1207
00:52:09,839 --> 00:52:14,000
on 4643 and i also have jq installed on

1208
00:52:14,000 --> 00:52:16,640
your machine to get a good output

1209
00:52:16,640 --> 00:52:17,680
there you go

1210
00:52:17,680 --> 00:52:19,839
so you are able to interact with the

1211
00:52:19,839 --> 00:52:23,040
kubernetes cluster on the port 6443 this

1212
00:52:23,040 --> 00:52:25,040
is ip address of the control plane and

1213
00:52:25,040 --> 00:52:26,559
this is the port where the api is

1214
00:52:26,559 --> 00:52:28,480
accessible and because there is

1215
00:52:28,480 --> 00:52:31,119
anonymous access enabled which is

1216
00:52:31,119 --> 00:52:32,559
letting you to access with different

1217
00:52:32,559 --> 00:52:35,440
apis on this port number and what we do

1218
00:52:35,440 --> 00:52:38,319
is like i further go

1219
00:52:38,319 --> 00:52:41,040
and explore other stuff

1220
00:52:41,040 --> 00:52:42,240
such as like

1221
00:52:42,240 --> 00:52:43,280
slash

1222
00:52:43,280 --> 00:52:45,440
api

1223
00:52:45,440 --> 00:52:47,040
will give me like the server address and

1224
00:52:47,040 --> 00:52:49,280
the information the server address

1225
00:52:49,280 --> 00:52:50,720
the stuff

1226
00:52:50,720 --> 00:52:53,599
api or slash v1 it will give me

1227
00:52:53,599 --> 00:52:55,040
different end points that are available

1228
00:52:55,040 --> 00:52:58,000
on v1 like service accounts or forwards

1229
00:52:58,000 --> 00:53:00,480
or services secrets etc

1230
00:53:00,480 --> 00:53:03,119
if i want to further explore api v1 for

1231
00:53:03,119 --> 00:53:08,040
example i would start with the fonts

1232
00:53:18,960 --> 00:53:22,640
uh can you all still see my screen just

1233
00:53:22,640 --> 00:53:26,118
a hands up

1234
00:53:28,800 --> 00:53:30,559
cool perfect so and if you want to see

1235
00:53:30,559 --> 00:53:32,160
some other stuff we will use something

1236
00:53:32,160 --> 00:53:32,960
like

1237
00:53:32,960 --> 00:53:34,640
secrets

1238
00:53:34,640 --> 00:53:36,640
so that way you can use this anonymous

1239
00:53:36,640 --> 00:53:38,079
port

1240
00:53:38,079 --> 00:53:41,720
just one sec

1241
00:54:04,480 --> 00:54:05,760
likewise for example if you want to

1242
00:54:05,760 --> 00:54:09,960
gather the information of the nodes

1243
00:54:12,640 --> 00:54:14,640
you will pass the flag called nodes that

1244
00:54:14,640 --> 00:54:15,920
way it will give you all the information

1245
00:54:15,920 --> 00:54:17,280
so when you have

1246
00:54:17,280 --> 00:54:19,599
like an enormous port or anonymous

1247
00:54:19,599 --> 00:54:21,359
access enabled on the kubernetes cluster

1248
00:54:21,359 --> 00:54:23,520
it's almost like game over an attacker

1249
00:54:23,520 --> 00:54:25,359
who has anonymous access to the cluster

1250
00:54:25,359 --> 00:54:29,520
he can do anything and everything

1251
00:54:29,920 --> 00:54:32,880
and we will also see the reason why

1252
00:54:32,880 --> 00:54:35,359
or the reason why this anonymous axis is

1253
00:54:35,359 --> 00:54:37,280
enabled

1254
00:54:37,280 --> 00:54:38,799
so we have

1255
00:54:38,799 --> 00:54:40,480
probably i'll show it to you after a few

1256
00:54:40,480 --> 00:54:42,400
sessions when we discuss about the roles

1257
00:54:42,400 --> 00:54:43,920
the role bindings inside of the

1258
00:54:43,920 --> 00:54:45,599
kubernetes cluster why

1259
00:54:45,599 --> 00:54:47,920
or which role has actually

1260
00:54:47,920 --> 00:54:49,440
enabled this anonymous access and i'll

1261
00:54:49,440 --> 00:54:50,839
also show you how to fix

1262
00:54:50,839 --> 00:54:54,319
it so we have seen the kubernetes

1263
00:54:54,319 --> 00:54:56,400
anonymous axis on a secure port now

1264
00:54:56,400 --> 00:54:58,160
we'll be moving on to like the scenario

1265
00:54:58,160 --> 00:55:01,399
number two

1266
00:55:15,599 --> 00:55:20,599
so from the previous and map results

1267
00:55:23,680 --> 00:55:26,400
so we came across at this port we have

1268
00:55:26,400 --> 00:55:28,160
identified this is like a secure port

1269
00:55:28,160 --> 00:55:31,200
with anonymous access now let's try to

1270
00:55:31,200 --> 00:55:34,640
play with port 4663 and see what's what

1271
00:55:34,640 --> 00:55:36,240
we have there

1272
00:55:36,240 --> 00:55:39,839
so what i would be doing is like

1273
00:55:40,559 --> 00:55:42,640
and because

1274
00:55:42,640 --> 00:55:44,319
this is an insecure port what i would do

1275
00:55:44,319 --> 00:55:47,799
is call http

1276
00:55:48,559 --> 00:55:50,319
0.5

1277
00:55:50,319 --> 00:55:52,640
and i'll pass the port number

1278
00:55:52,640 --> 00:55:53,680
4

1279
00:55:53,680 --> 00:55:55,520
663 and the port number may vary for

1280
00:55:55,520 --> 00:55:57,440
different clusters this is for this

1281
00:55:57,440 --> 00:55:59,760
scenario i made your lives easier but

1282
00:55:59,760 --> 00:56:02,079
any attacker who gains like initial

1283
00:56:02,079 --> 00:56:04,000
access or has like a map access they

1284
00:56:04,000 --> 00:56:05,520
would probe and enumerate the stuff

1285
00:56:05,520 --> 00:56:07,440
that's what we are doing here so i'm

1286
00:56:07,440 --> 00:56:09,760
trying to

1287
00:56:09,760 --> 00:56:11,280
it looks like there is something i could

1288
00:56:11,280 --> 00:56:13,200
still access the same stuff but this is

1289
00:56:13,200 --> 00:56:15,040
like in secure port the major difference

1290
00:56:15,040 --> 00:56:16,720
between secure port and insecure port is

1291
00:56:16,720 --> 00:56:18,960
like on the secure port until unless

1292
00:56:18,960 --> 00:56:21,359
there is an anonymous access

1293
00:56:21,359 --> 00:56:23,200
the users or the attackers won't be able

1294
00:56:23,200 --> 00:56:25,520
to play or interact with the api

1295
00:56:25,520 --> 00:56:27,839
whereas if the insecure port is enabled

1296
00:56:27,839 --> 00:56:29,200
they don't need authentication they can

1297
00:56:29,200 --> 00:56:30,720
straight away access and start playing

1298
00:56:30,720 --> 00:56:32,079
with the cluster

1299
00:56:32,079 --> 00:56:34,000
so what let us see what else we can do

1300
00:56:34,000 --> 00:56:36,160
when an insecure code is there

1301
00:56:36,160 --> 00:56:39,118
so what i would do is

1302
00:56:42,480 --> 00:56:46,319
463 slash api

1303
00:56:48,079 --> 00:56:51,520
there you go the same stuff api slash v1

1304
00:56:51,520 --> 00:56:54,400
slash boards

1305
00:56:55,280 --> 00:56:58,079
likewise you can get the secrets

1306
00:56:58,079 --> 00:57:00,559
everything

1307
00:57:03,119 --> 00:57:05,359
even this insecure port is not enabled

1308
00:57:05,359 --> 00:57:07,040
by default like i said there is always a

1309
00:57:07,040 --> 00:57:08,880
possibility that somebody could enable

1310
00:57:08,880 --> 00:57:10,720
and leave it by default it's always good

1311
00:57:10,720 --> 00:57:12,960
to ensure you check that during your

1312
00:57:12,960 --> 00:57:14,559
risk assessments or during a penetration

1313
00:57:14,559 --> 00:57:15,599
testing

1314
00:57:15,599 --> 00:57:16,480
so

1315
00:57:16,480 --> 00:57:17,920
this covers

1316
00:57:17,920 --> 00:57:20,000
yep just going to interrupt people are

1317
00:57:20,000 --> 00:57:22,240
saying that they cannot some of them can

1318
00:57:22,240 --> 00:57:23,920
see your screen

1319
00:57:23,920 --> 00:57:26,640
can you see my i i do see your screen

1320
00:57:26,640 --> 00:57:28,960
but there are at least three people that

1321
00:57:28,960 --> 00:57:30,559
said that they cannot see it so if you

1322
00:57:30,559 --> 00:57:31,920
can try to

1323
00:57:31,920 --> 00:57:33,760
stop sharing and share again to see if

1324
00:57:33,760 --> 00:57:37,480
that fixes the issue

1325
00:57:43,440 --> 00:57:46,720
can you all see my screen now

1326
00:57:53,119 --> 00:57:55,920
christian can you see the screen

1327
00:57:55,920 --> 00:57:58,960
yes i can say it um let's see if people

1328
00:57:58,960 --> 00:58:00,480
can

1329
00:58:00,480 --> 00:58:02,079
confirm

1330
00:58:02,079 --> 00:58:05,040
can you can you confirm slack or raise

1331
00:58:05,040 --> 00:58:07,040
your hand if you can

1332
00:58:07,040 --> 00:58:10,319
see this screen again

1333
00:58:21,119 --> 00:58:22,880
yeah that's strange

1334
00:58:22,880 --> 00:58:25,200
uh chris you can see it right and others

1335
00:58:25,200 --> 00:58:26,640
can't see it

1336
00:58:26,640 --> 00:58:29,520
yeah i can see your screen

1337
00:58:29,520 --> 00:58:31,680
yeah they say like this is like now

1338
00:58:31,680 --> 00:58:34,640
which yeah i'm seeing just like screen

1339
00:58:34,640 --> 00:58:37,040
now you yeah i'm saying terminal

1340
00:58:37,040 --> 00:58:38,960
yeah it's all good i don't know why some

1341
00:58:38,960 --> 00:58:41,920
people can't see it

1342
00:58:48,960 --> 00:58:50,880
okay they say visible now good now cool

1343
00:58:50,880 --> 00:58:52,559
uh no worries guys i'll quickly cover

1344
00:58:52,559 --> 00:58:54,960
like the scenario number two again so

1345
00:58:54,960 --> 00:58:57,599
during the nmap scan we have identified

1346
00:58:57,599 --> 00:58:58,960
some quotes and we have in the first

1347
00:58:58,960 --> 00:59:02,160
scenario we have seen like how to uh

1348
00:59:02,160 --> 00:59:04,079
attack or access like a kubernetes

1349
00:59:04,079 --> 00:59:05,839
cluster when anonymous access is enabled

1350
00:59:05,839 --> 00:59:07,599
using a secure port and this scenario we

1351
00:59:07,599 --> 00:59:09,520
will be trying to access

1352
00:59:09,520 --> 00:59:11,280
and see what happens when there is an

1353
00:59:11,280 --> 00:59:12,960
insecure port of the kubernetes cluster

1354
00:59:12,960 --> 00:59:14,480
is accessible via some other port

1355
00:59:14,480 --> 00:59:16,480
calling secure port so what i will be

1356
00:59:16,480 --> 00:59:18,000
doing i'll be doing pretty much the same

1357
00:59:18,000 --> 00:59:20,799
stuff but i'll be accessing it via port

1358
00:59:20,799 --> 00:59:23,839
other port 463 where the insecure

1359
00:59:23,839 --> 00:59:24,880
is running

1360
00:59:24,880 --> 00:59:26,799
and uh

1361
00:59:26,799 --> 00:59:28,799
just instead of the flag https i'll be

1362
00:59:28,799 --> 00:59:31,359
pointing the flag http

1363
00:59:31,359 --> 00:59:32,960
and you will be able to do

1364
00:59:32,960 --> 00:59:34,640
the rest of the stuff pretty much like

1365
00:59:34,640 --> 00:59:38,720
api v1 pods or nodes etc

1366
00:59:38,720 --> 00:59:40,880
so the only difference between uh

1367
00:59:40,880 --> 00:59:43,040
the anonymous access and secure code is

1368
00:59:43,040 --> 00:59:44,559
like

1369
00:59:44,559 --> 00:59:46,480
if there is no anonymous access enabled

1370
00:59:46,480 --> 00:59:47,920
you won't be able to interact with the

1371
00:59:47,920 --> 00:59:50,799
kubernetes cluster via secure port

1372
00:59:50,799 --> 00:59:53,280
whereas with insecure port you don't

1373
00:59:53,280 --> 00:59:55,440
need any access or authorization at all

1374
00:59:55,440 --> 00:59:56,880
if there isn't secure port left by

1375
00:59:56,880 --> 00:59:58,799
default the attacker can start playing

1376
00:59:58,799 --> 01:00:01,599
with the cluster straight away

1377
01:00:01,599 --> 01:00:04,400
so i'll be moving on to like the next

1378
01:00:04,400 --> 01:00:07,520
scenario which is like uh

1379
01:00:07,520 --> 01:00:11,839
abusing the cubelet read write port

1380
01:00:12,839 --> 01:00:16,000
so kubernetes if you just google it says

1381
01:00:16,000 --> 01:00:17,680
like kubernetes read write port is

1382
01:00:17,680 --> 01:00:20,079
available on one zero two five zero so

1383
01:00:20,079 --> 01:00:22,960
what i will be doing is this time

1384
01:00:22,960 --> 01:00:25,200
after running the nmap scan i'll be

1385
01:00:25,200 --> 01:00:27,040
pretty much

1386
01:00:27,040 --> 01:00:28,960
doing the same stuff but this time i'll

1387
01:00:28,960 --> 01:00:30,720
try to proport them one zero two five

1388
01:00:30,720 --> 01:00:33,720
zeros

1389
01:00:36,860 --> 01:00:41,699
[Music]

1390
01:00:43,839 --> 01:00:46,400
there you go

1391
01:00:47,119 --> 01:00:48,640
likewise if you

1392
01:00:48,640 --> 01:00:50,880
the other is like if you want to see the

1393
01:00:50,880 --> 01:00:52,640
only running parts in the cluster we

1394
01:00:52,640 --> 01:00:56,240
should apply like running pods

1395
01:00:56,240 --> 01:00:57,520
will give you all the information of the

1396
01:00:57,520 --> 01:00:59,839
pods that are running inside the cluster

1397
01:00:59,839 --> 01:01:01,680
so this is what you can do using a

1398
01:01:01,680 --> 01:01:04,000
cubelet when a cubelet rewrite port is

1399
01:01:04,000 --> 01:01:06,240
accessible inside the network

1400
01:01:06,240 --> 01:01:08,240
so the major difference between cubelet

1401
01:01:08,240 --> 01:01:09,920
read write port and read only port as

1402
01:01:09,920 --> 01:01:12,960
the name implies using the read write

1403
01:01:12,960 --> 01:01:15,280
you can read at the same time you can

1404
01:01:15,280 --> 01:01:17,280
write by which means interact with the

1405
01:01:17,280 --> 01:01:18,240
cluster

1406
01:01:18,240 --> 01:01:20,799
if there is by default if this cubelet

1407
01:01:20,799 --> 01:01:22,640
rewrite port is accessible it's almost

1408
01:01:22,640 --> 01:01:24,880
like game over the attacker can spawn

1409
01:01:24,880 --> 01:01:26,559
different containers they can spawn some

1410
01:01:26,559 --> 01:01:28,079
shells in that and they can gain access

1411
01:01:28,079 --> 01:01:30,079
to the underlying cluster so there's a

1412
01:01:30,079 --> 01:01:32,160
section called extra mile in the

1413
01:01:32,160 --> 01:01:34,879
documentation

1414
01:01:36,079 --> 01:01:39,480
so for example

1415
01:01:40,799 --> 01:01:43,280
i want you to all to just try a few

1416
01:01:43,280 --> 01:01:46,280
commands

1417
01:01:57,280 --> 01:02:01,000
your search

1418
01:02:06,319 --> 01:02:08,000
this way you can get all the running

1419
01:02:08,000 --> 01:02:11,720
parts inside the cluster

1420
01:02:26,480 --> 01:02:27,920
we give you the containers that are

1421
01:02:27,920 --> 01:02:30,319
running

1422
01:02:31,760 --> 01:02:36,240
so what i would like you all to do is

1423
01:02:36,640 --> 01:02:38,720
there is a container called xcd client

1424
01:02:38,720 --> 01:02:40,720
and let's execute some commands using a

1425
01:02:40,720 --> 01:02:44,598
cubelet read write port

1426
01:02:58,720 --> 01:03:01,959
it's inclined

1427
01:03:09,839 --> 01:03:12,160
so we're executing a command using the

1428
01:03:12,160 --> 01:03:13,440
cube let's read write port on the

1429
01:03:13,440 --> 01:03:16,319
container called lcd client there you go

1430
01:03:16,319 --> 01:03:18,000
the command has been executed on one of

1431
01:03:18,000 --> 01:03:19,440
the containers that are running inside

1432
01:03:19,440 --> 01:03:22,240
the cluster and once i needless to say

1433
01:03:22,240 --> 01:03:24,160
like once if you know when you can

1434
01:03:24,160 --> 01:03:25,359
actually

1435
01:03:25,359 --> 01:03:27,599
run some commands on the containers you

1436
01:03:27,599 --> 01:03:29,520
know what to take it ahead like you can

1437
01:03:29,520 --> 01:03:31,760
grab like dc to instance metadata or you

1438
01:03:31,760 --> 01:03:34,160
can even like grab a river shell and you

1439
01:03:34,160 --> 01:03:37,039
can do heaps so under the extra mile

1440
01:03:37,039 --> 01:03:39,359
section in the documentation you have

1441
01:03:39,359 --> 01:03:41,200
what you can try and test just follow

1442
01:03:41,200 --> 01:03:42,559
those commands and you can even get a

1443
01:03:42,559 --> 01:03:44,000
reverse shell and gain access to the

1444
01:03:44,000 --> 01:03:45,359
underlying cluster

1445
01:03:45,359 --> 01:03:47,440
and the next one we see we will see is

1446
01:03:47,440 --> 01:03:49,599
like the cubelet

1447
01:03:49,599 --> 01:03:52,240
this time it's only read only port so

1448
01:03:52,240 --> 01:03:55,430
the read-only port runs on port 10255

1449
01:03:55,430 --> 01:03:58,489
[Music]

1450
01:04:03,520 --> 01:04:04,520
25 file

1451
01:04:04,520 --> 01:04:07,039
[Music]

1452
01:04:07,039 --> 01:04:10,280
it's actually

1453
01:04:14,799 --> 01:04:17,680
dashboards

1454
01:04:19,760 --> 01:04:21,359
so using the read write code you can

1455
01:04:21,359 --> 01:04:23,520
always gather some information

1456
01:04:23,520 --> 01:04:24,960
so it's pretty much when there are like

1457
01:04:24,960 --> 01:04:26,319
other options other things that you can

1458
01:04:26,319 --> 01:04:29,119
always try and everything is provided in

1459
01:04:29,119 --> 01:04:31,119
the documentation and you can also

1460
01:04:31,119 --> 01:04:33,039
explore different endpoints that can be

1461
01:04:33,039 --> 01:04:34,480
accessible on the cube like read write

1462
01:04:34,480 --> 01:04:36,319
port and read only for just google a bit

1463
01:04:36,319 --> 01:04:37,520
and you can always play with different

1464
01:04:37,520 --> 01:04:39,039
things

1465
01:04:39,039 --> 01:04:40,400
well that covers the first four

1466
01:04:40,400 --> 01:04:42,799
scenarios and now the game will be up we

1467
01:04:42,799 --> 01:04:45,039
will be like chaining multiple attacks

1468
01:04:45,039 --> 01:04:47,280
from uh scenario four we will initially

1469
01:04:47,280 --> 01:04:49,520
try to gain access to one of the pod or

1470
01:04:49,520 --> 01:04:51,920
the container that is running uh using a

1471
01:04:51,920 --> 01:04:53,760
vulnerable web application and using

1472
01:04:53,760 --> 01:04:55,200
that web application we perform some

1473
01:04:55,200 --> 01:04:57,119
remote code execution and then we

1474
01:04:57,119 --> 01:04:58,880
perform some lateral movements until we

1475
01:04:58,880 --> 01:05:00,880
gain a full complete access to the

1476
01:05:00,880 --> 01:05:05,079
cluster and the underlying cloud account

1477
01:05:13,359 --> 01:05:14,240
so

1478
01:05:14,240 --> 01:05:16,240
on your screens you will have something

1479
01:05:16,240 --> 01:05:18,720
like this

1480
01:05:19,119 --> 01:05:20,640
so if you go back

1481
01:05:20,640 --> 01:05:21,839
there is something called dev

1482
01:05:21,839 --> 01:05:23,039
environment

1483
01:05:23,039 --> 01:05:25,359
and we also have called web application

1484
01:05:25,359 --> 01:05:28,000
just copy and paste this url inside your

1485
01:05:28,000 --> 01:05:31,000
applications

1486
01:05:36,960 --> 01:05:39,520
there you go

1487
01:05:41,680 --> 01:05:43,359
there is some kind of web application

1488
01:05:43,359 --> 01:05:44,319
running

1489
01:05:44,319 --> 01:05:45,280
and

1490
01:05:45,280 --> 01:05:49,039
let's issue some commands test ls

1491
01:05:49,039 --> 01:05:53,039
it looks like we are getting some output

1492
01:05:53,119 --> 01:05:54,640
test

1493
01:05:54,640 --> 01:05:55,760
id

1494
01:05:55,760 --> 01:05:58,240
however that output seems to be a bit

1495
01:05:58,240 --> 01:05:59,359
encoded

1496
01:05:59,359 --> 01:06:01,280
so we will see what is the output and

1497
01:06:01,280 --> 01:06:03,119
how to decode it

1498
01:06:03,119 --> 01:06:06,640
example i'll copy this one

1499
01:06:10,720 --> 01:06:13,200
echo

1500
01:06:14,640 --> 01:06:16,240
264

1501
01:06:16,240 --> 01:06:18,079
md

1502
01:06:18,079 --> 01:06:20,319
so the output of this one when we decode

1503
01:06:20,319 --> 01:06:23,119
it's like it says uid 0 0 so when we

1504
01:06:23,119 --> 01:06:24,880
pass

1505
01:06:24,880 --> 01:06:27,359
command call test iphone id

1506
01:06:27,359 --> 01:06:28,559
it says

1507
01:06:28,559 --> 01:06:29,920
the container is running with the root

1508
01:06:29,920 --> 01:06:31,039
privileges

1509
01:06:31,039 --> 01:06:33,599
so and we also identified that there is

1510
01:06:33,599 --> 01:06:35,440
some kind of command injection or remote

1511
01:06:35,440 --> 01:06:37,920
execution bug in this application so

1512
01:06:37,920 --> 01:06:40,240
what we are going to do is

1513
01:06:40,240 --> 01:06:42,079
we try to perform some remote execution

1514
01:06:42,079 --> 01:06:43,599
and try to gain access to the underlying

1515
01:06:43,599 --> 01:06:46,720
shell so for that what i'll be doing is

1516
01:06:46,720 --> 01:06:49,520
you can either use your vm or you can

1517
01:06:49,520 --> 01:06:51,440
also use your local host for example

1518
01:06:51,440 --> 01:06:54,920
this is my localhost

1519
01:07:00,240 --> 01:07:02,319
i'll try to identify the ip address of

1520
01:07:02,319 --> 01:07:05,119
my local host

1521
01:07:08,160 --> 01:07:12,759
192 168 0.3

1522
01:07:19,440 --> 01:07:22,079
1916 56.1

1523
01:07:22,079 --> 01:07:24,079
and i just try to bring it and see

1524
01:07:24,079 --> 01:07:27,880
whether the machines are commentable

1525
01:07:30,400 --> 01:07:32,880
all good

1526
01:07:33,680 --> 01:07:35,280
so like uh

1527
01:07:35,280 --> 01:07:36,720
provided in the machine what i'll be

1528
01:07:36,720 --> 01:07:38,000
doing is like

1529
01:07:38,000 --> 01:07:39,839
i'll be using a python reverse shell to

1530
01:07:39,839 --> 01:07:41,680
gain access to the container using like

1531
01:07:41,680 --> 01:07:44,880
the vulnerable web application

1532
01:07:44,880 --> 01:07:47,520
so for that what i'll be doing is i'll

1533
01:07:47,520 --> 01:07:49,200
be running a netcat listener on my

1534
01:07:49,200 --> 01:07:50,720
machine

1535
01:07:50,720 --> 01:07:51,839
netcat

1536
01:07:51,839 --> 01:07:55,720
iphone 444

1537
01:07:57,839 --> 01:08:00,000
and in the web application what i'll be

1538
01:08:00,000 --> 01:08:02,559
doing is

1539
01:08:02,559 --> 01:08:04,079
so there is

1540
01:08:04,079 --> 01:08:05,680
a command that's been provided to you in

1541
01:08:05,680 --> 01:08:08,480
the documentation

1542
01:08:08,480 --> 01:08:10,559
just copy and paste it and make sure you

1543
01:08:10,559 --> 01:08:13,280
make some changes like the ip address

1544
01:08:13,280 --> 01:08:16,760
and the port number

1545
01:08:33,198 --> 01:08:35,679
so the port number that i used is like

1546
01:08:35,679 --> 01:08:39,799
port four four four four

1547
01:09:20,000 --> 01:09:23,640
just one second

1548
01:10:15,520 --> 01:10:17,360
i'm just replacing the port number where

1549
01:10:17,360 --> 01:10:19,040
i'm running the netcat and also this is

1550
01:10:19,040 --> 01:10:21,040
the ip address of the host where netcat

1551
01:10:21,040 --> 01:10:24,560
is running so i'll just click on encode

1552
01:10:24,560 --> 01:10:26,560
something is happening here and

1553
01:10:26,560 --> 01:10:28,560
eventually it should get me a shell but

1554
01:10:28,560 --> 01:10:30,719
there we go we got the shell

1555
01:10:30,719 --> 01:10:33,040
and being an attacker what i would do is

1556
01:10:33,040 --> 01:10:35,120
like i will do some uh initial

1557
01:10:35,120 --> 01:10:36,880
assessments like checking for some

1558
01:10:36,880 --> 01:10:39,360
environment variables and other stuff so

1559
01:10:39,360 --> 01:10:40,880
pretty much i do the same stuff i'll

1560
01:10:40,880 --> 01:10:43,920
check for environment variables and

1561
01:10:43,920 --> 01:10:46,239
after grabbing some things identified

1562
01:10:46,239 --> 01:10:48,080
there is a kubernetes something which

1563
01:10:48,080 --> 01:10:50,719
reveals us that this is a pod or this is

1564
01:10:50,719 --> 01:10:52,960
a container or this is a web application

1565
01:10:52,960 --> 01:10:54,560
running on a container that is hosted on

1566
01:10:54,560 --> 01:10:56,719
the kubernetes so from here what i would

1567
01:10:56,719 --> 01:10:58,320
do is like pretty much like an attacker

1568
01:10:58,320 --> 01:11:00,159
i will do some enumeration try to gather

1569
01:11:00,159 --> 01:11:01,760
some information such as like humanity

1570
01:11:01,760 --> 01:11:03,840
service sport and other stuff and with

1571
01:11:03,840 --> 01:11:05,520
the basic stuff with the basic knowledge

1572
01:11:05,520 --> 01:11:07,360
that we have learned during the basic

1573
01:11:07,360 --> 01:11:08,880
commands in order to interact with the

1574
01:11:08,880 --> 01:11:10,320
kubernetes cluster we need something

1575
01:11:10,320 --> 01:11:13,040
called cubectl or cubecrate kind so what

1576
01:11:13,040 --> 01:11:16,480
we do is we quickly download that one

1577
01:11:16,480 --> 01:11:19,840
so i'll go to cd slash temp

1578
01:11:19,840 --> 01:11:20,719
and

1579
01:11:20,719 --> 01:11:22,880
if you miss some commands every command

1580
01:11:22,880 --> 01:11:24,080
each and every command is available in

1581
01:11:24,080 --> 01:11:25,679
the documentation you can simply copy

1582
01:11:25,679 --> 01:11:28,320
and paste it

1583
01:11:32,800 --> 01:11:36,199
there you go

1584
01:11:40,640 --> 01:11:42,960
so

1585
01:11:44,880 --> 01:11:48,159
let's match

1586
01:11:51,280 --> 01:11:53,280
hey hassan there's someone that says

1587
01:11:53,280 --> 01:11:55,440
that one of the commands is not correct

1588
01:11:55,440 --> 01:11:57,520
on the documentation that if you can

1589
01:11:57,520 --> 01:12:00,560
send it i'm not sure which one

1590
01:12:00,560 --> 01:12:03,199
it is though

1591
01:12:03,280 --> 01:12:08,679
you can tell us like which one it was

1592
01:12:09,280 --> 01:12:12,400
uh is it in the slack

1593
01:12:13,120 --> 01:12:17,719
yeah he's saying on page 49.

1594
01:12:23,360 --> 01:12:27,120
oh sure uh this one

1595
01:12:29,679 --> 01:12:33,159
just one sec

1596
01:12:44,320 --> 01:12:45,840
and send the command you just need to

1597
01:12:45,840 --> 01:12:48,159
replace uh the ip address on the port

1598
01:12:48,159 --> 01:12:50,000
number and you don't need to use this

1599
01:12:50,000 --> 01:12:52,239
one as is there are like if you search

1600
01:12:52,239 --> 01:12:53,920
for something called reverse shell there

1601
01:12:53,920 --> 01:12:55,440
are like so many commands or so many

1602
01:12:55,440 --> 01:12:56,960
reversal snippets that are available on

1603
01:12:56,960 --> 01:12:58,800
the google this is just one example that

1604
01:12:58,800 --> 01:13:02,400
i picked up so you can use this one

1605
01:13:03,679 --> 01:13:05,440
so what i did is like i have downloaded

1606
01:13:05,440 --> 01:13:08,159
like the cube cuddle there you go

1607
01:13:08,159 --> 01:13:10,320
and now i'll quickly give the right

1608
01:13:10,320 --> 01:13:13,120
permissions to this one

1609
01:13:13,120 --> 01:13:15,199
and i'm going to move this one to the

1610
01:13:15,199 --> 01:13:17,120
bin folder

1611
01:13:17,120 --> 01:13:20,239
perfect so i will quickly check

1612
01:13:20,239 --> 01:13:22,239
the same stuff that we have tried before

1613
01:13:22,239 --> 01:13:23,440
cube cpl

1614
01:13:23,440 --> 01:13:26,480
get cluster iphone info

1615
01:13:26,480 --> 01:13:27,920
successful we are able to interact with

1616
01:13:27,920 --> 01:13:30,400
the kubernetes cluster using the port

1617
01:13:30,400 --> 01:13:32,960
that we gained access to so from here we

1618
01:13:32,960 --> 01:13:35,360
try to do some privilege discussion some

1619
01:13:35,360 --> 01:13:37,440
lateral movements and gain access all

1620
01:13:37,440 --> 01:13:38,480
the way to

1621
01:13:38,480 --> 01:13:40,239
communities cluster and the whole

1622
01:13:40,239 --> 01:13:42,640
account

1623
01:13:42,640 --> 01:13:44,719
and we will be going to use some other

1624
01:13:44,719 --> 01:13:46,640
command that we have seen learned before

1625
01:13:46,640 --> 01:13:49,040
cube cpu lot can iphone iphone list it

1626
01:13:49,040 --> 01:13:51,199
will tell the privileges that we have

1627
01:13:51,199 --> 01:13:53,199
gained on the kubernetes cluster

1628
01:13:53,199 --> 01:13:55,120
pretty much these are the commands that

1629
01:13:55,120 --> 01:13:57,440
we have for the parts for the secrets

1630
01:13:57,440 --> 01:13:59,040
and for the service accounts we can get

1631
01:13:59,040 --> 01:14:02,560
list create these kinds of stuff

1632
01:14:03,679 --> 01:14:05,120
uh

1633
01:14:05,120 --> 01:14:07,679
cube city a lot leo can i

1634
01:14:07,679 --> 01:14:10,960
get reward yes

1635
01:14:11,520 --> 01:14:15,040
cube cp a lot can i get here

1636
01:14:15,040 --> 01:14:17,360
yes

1637
01:14:21,600 --> 01:14:24,159
cubect a lot can i get secrets now it

1638
01:14:24,159 --> 01:14:26,320
says you can get the information of the

1639
01:14:26,320 --> 01:14:28,239
pods but you cannot get the information

1640
01:14:28,239 --> 01:14:30,400
of the secrets it's like there are

1641
01:14:30,400 --> 01:14:32,880
pretty limited privileges for you so let

1642
01:14:32,880 --> 01:14:34,640
us see how we can bypass certain

1643
01:14:34,640 --> 01:14:37,280
controls and let us see how we can gain

1644
01:14:37,280 --> 01:14:38,880
uh complete access to the cluster at

1645
01:14:38,880 --> 01:14:40,480
this stage we have very limited access

1646
01:14:40,480 --> 01:14:41,760
because we are not able to access the

1647
01:14:41,760 --> 01:14:44,640
secrets across the cluster likewise we

1648
01:14:44,640 --> 01:14:46,400
may not be able to access many other

1649
01:14:46,400 --> 01:14:49,440
stuff across the cluster

1650
01:14:50,640 --> 01:14:54,600
so what i will do is

1651
01:15:00,480 --> 01:15:03,040
we will create

1652
01:15:03,040 --> 01:15:06,960
a file called config

1653
01:15:07,679 --> 01:15:11,840
i have already created that for you

1654
01:15:13,520 --> 01:15:15,679
and guys if anybody has any difficulty

1655
01:15:15,679 --> 01:15:17,600
copying the commands instead of copying

1656
01:15:17,600 --> 01:15:20,400
them as is just make sure you put them

1657
01:15:20,400 --> 01:15:23,520
into a text pad format them and then

1658
01:15:23,520 --> 01:15:25,840
paste them sometimes copying or pasting

1659
01:15:25,840 --> 01:15:30,120
directly from pdf may not work

1660
01:15:39,040 --> 01:15:41,280
right tool i have created something

1661
01:15:41,280 --> 01:15:43,600
called config.sh so we will see what

1662
01:15:43,600 --> 01:15:46,239
this config.sh is

1663
01:15:46,239 --> 01:15:50,080
so it is basically trying to grab

1664
01:15:50,080 --> 01:15:52,159
the config server ip address by issuing

1665
01:15:52,159 --> 01:15:54,320
the commands called this is like a basic

1666
01:15:54,320 --> 01:15:56,640
script for example if i run this same

1667
01:15:56,640 --> 01:15:59,280
command on my terminal

1668
01:15:59,280 --> 01:16:00,960
we'll get the ip address of the cluster

1669
01:16:00,960 --> 01:16:02,480
likewise it will get the token name the

1670
01:16:02,480 --> 01:16:04,960
token config and it is creating a config

1671
01:16:04,960 --> 01:16:07,120
file for us whatever we have seen before

1672
01:16:07,120 --> 01:16:08,800
it will create some set secrets and

1673
01:16:08,800 --> 01:16:11,199
everything and using this file we are

1674
01:16:11,199 --> 01:16:12,719
going to interact with the kubernetes

1675
01:16:12,719 --> 01:16:15,120
cluster

1676
01:16:16,480 --> 01:16:18,159
and if you observe clearly we are also

1677
01:16:18,159 --> 01:16:20,560
trying to get the target config token

1678
01:16:20,560 --> 01:16:22,560
call from the developer name space we

1679
01:16:22,560 --> 01:16:24,400
are getting a secret

1680
01:16:24,400 --> 01:16:26,000
likewise

1681
01:16:26,000 --> 01:16:28,159
the reason why here i'm using a secret

1682
01:16:28,159 --> 01:16:30,159
from the developer name space is like

1683
01:16:30,159 --> 01:16:31,520
here i'm giving you like the straight

1684
01:16:31,520 --> 01:16:32,960
and pretty straightforward answer

1685
01:16:32,960 --> 01:16:34,800
because after enumerating a bit inside

1686
01:16:34,800 --> 01:16:36,000
the cluster after going through

1687
01:16:36,000 --> 01:16:38,080
different secrets inside the cluster as

1688
01:16:38,080 --> 01:16:41,520
an attacker and identified that this

1689
01:16:41,520 --> 01:16:43,360
developer someone like in the

1690
01:16:43,360 --> 01:16:44,640
development namespace or in the

1691
01:16:44,640 --> 01:16:46,080
developer namespace there is a secret

1692
01:16:46,080 --> 01:16:47,520
which has got a little bit high

1693
01:16:47,520 --> 01:16:49,840
privileges so i am saying that going

1694
01:16:49,840 --> 01:16:51,360
forward if i want to interact with the

1695
01:16:51,360 --> 01:16:53,840
cluster please use this secret use this

1696
01:16:53,840 --> 01:16:55,040
secret for authentication and

1697
01:16:55,040 --> 01:16:56,880
authorization and talk to like the

1698
01:16:56,880 --> 01:16:58,800
kubernetes cluster

1699
01:16:58,800 --> 01:17:00,880
using this secret and try to get some

1700
01:17:00,880 --> 01:17:03,679
more info so what i will do is i'll just

1701
01:17:03,679 --> 01:17:05,920
quickly

1702
01:17:05,920 --> 01:17:08,800
run this config file

1703
01:17:08,800 --> 01:17:10,480
so i'm in the temp folder sh

1704
01:17:10,480 --> 01:17:12,400
config.search

1705
01:17:12,400 --> 01:17:14,080
looks like it has done its job now let

1706
01:17:14,080 --> 01:17:16,960
us see what it has generated for us

1707
01:17:16,960 --> 01:17:18,719
cool there we go it has created a config

1708
01:17:18,719 --> 01:17:19,920
file for us

1709
01:17:19,920 --> 01:17:21,440
this is the token that we'll be using to

1710
01:17:21,440 --> 01:17:22,880
interact with the cluster this is the

1711
01:17:22,880 --> 01:17:24,960
certificate and this is ip and we are

1712
01:17:24,960 --> 01:17:26,719
using name called research which i have

1713
01:17:26,719 --> 01:17:30,440
created for the workshop

1714
01:17:30,560 --> 01:17:33,199
so in order to use a cube config

1715
01:17:33,199 --> 01:17:34,880
instead of like the default cube config

1716
01:17:34,880 --> 01:17:36,640
we pass the file called

1717
01:17:36,640 --> 01:17:39,520
flag cube config equal to config

1718
01:17:39,520 --> 01:17:40,640
and then

1719
01:17:40,640 --> 01:17:42,719
we use the flag called

1720
01:17:42,719 --> 01:17:44,080
we pass like the rest of the commands

1721
01:17:44,080 --> 01:17:46,960
cube ct will get secrets iphone a

1722
01:17:46,960 --> 01:17:49,679
so for example it says using this uh

1723
01:17:49,679 --> 01:17:52,400
thing they're using this developer uh

1724
01:17:52,400 --> 01:17:55,120
secret it says secret is forbidden user

1725
01:17:55,120 --> 01:17:56,880
developers for the service account

1726
01:17:56,880 --> 01:17:58,800
developer service account cannot list

1727
01:17:58,800 --> 01:18:01,360
secrets the user does not have

1728
01:18:01,360 --> 01:18:04,000
the privileges or the permissions tracks

1729
01:18:04,000 --> 01:18:06,080
as a secret so but being an attacker the

1730
01:18:06,080 --> 01:18:08,480
attacker won't stop there

1731
01:18:08,480 --> 01:18:10,960
and after enumerating a bet he came

1732
01:18:10,960 --> 01:18:14,159
across something called uh

1733
01:18:14,159 --> 01:18:16,880
privilege escalation using misconfigured

1734
01:18:16,880 --> 01:18:18,880
role or the role binding

1735
01:18:18,880 --> 01:18:20,800
so in kubernetes if you want to

1736
01:18:20,800 --> 01:18:24,239
impersonate a user or if you want to

1737
01:18:24,239 --> 01:18:26,080
run commands as a different user we use

1738
01:18:26,080 --> 01:18:29,440
the flag called iphone iphone yes

1739
01:18:29,440 --> 01:18:30,800
so after

1740
01:18:30,800 --> 01:18:32,239
enumerating the cluster for a while

1741
01:18:32,239 --> 01:18:33,920
after doing a bit of research the

1742
01:18:33,920 --> 01:18:36,159
attacker came across a different kind of

1743
01:18:36,159 --> 01:18:38,719
technique called impersonation so from

1744
01:18:38,719 --> 01:18:40,640
that he identified that

1745
01:18:40,640 --> 01:18:42,320
this service account called developer

1746
01:18:42,320 --> 01:18:43,600
writing essay

1747
01:18:43,600 --> 01:18:46,000
has some privileges to impersonate as a

1748
01:18:46,000 --> 01:18:47,360
group it means sometimes this is what we

1749
01:18:47,360 --> 01:18:49,280
do in the real time we may not give like

1750
01:18:49,280 --> 01:18:51,199
the privileges to the users directly but

1751
01:18:51,199 --> 01:18:52,800
we give them or we add them to a

1752
01:18:52,800 --> 01:18:54,800
different group and we let them hey

1753
01:18:54,800 --> 01:18:56,560
probably like a normal user you won't be

1754
01:18:56,560 --> 01:18:58,320
able to do it but at times if you pass

1755
01:18:58,320 --> 01:19:00,560
different flags or if you impersonate a

1756
01:19:00,560 --> 01:19:02,000
different user you will have some high

1757
01:19:02,000 --> 01:19:04,400
privileges so after a while the attacker

1758
01:19:04,400 --> 01:19:07,199
has identified that this developer

1759
01:19:07,199 --> 01:19:09,199
or someone the user called developer

1760
01:19:09,199 --> 01:19:11,440
iphone sa has some privileges to

1761
01:19:11,440 --> 01:19:13,120
impersonate the group called system

1762
01:19:13,120 --> 01:19:15,199
masters and then he tried to enumerate

1763
01:19:15,199 --> 01:19:17,120
the stuff earlier we didn't have the

1764
01:19:17,120 --> 01:19:18,719
privileges to get the secrets but when

1765
01:19:18,719 --> 01:19:20,719
he is impersonating like the admin the

1766
01:19:20,719 --> 01:19:23,120
group system masters he was able to get

1767
01:19:23,120 --> 01:19:24,800
all the secrets

1768
01:19:24,800 --> 01:19:26,640
i'll also teach you like the technique

1769
01:19:26,640 --> 01:19:28,400
uh during like the role bindings how to

1770
01:19:28,400 --> 01:19:30,080
stop these kind of impersonation attacks

1771
01:19:30,080 --> 01:19:31,920
what will let these impersonation of

1772
01:19:31,920 --> 01:19:33,920
attacks happen so here the attacker is

1773
01:19:33,920 --> 01:19:36,400
successful he was able to impersonate

1774
01:19:36,400 --> 01:19:38,800
a group called system masters using a

1775
01:19:38,800 --> 01:19:41,360
normal user he could not get the secrets

1776
01:19:41,360 --> 01:19:43,600
forbidden but after impersonating iphone

1777
01:19:43,600 --> 01:19:45,360
iphone as nil as the group system

1778
01:19:45,360 --> 01:19:46,960
masters they were able to access all the

1779
01:19:46,960 --> 01:19:48,960
secrets so this is one technique where

1780
01:19:48,960 --> 01:19:50,560
the attacker has initially gained access

1781
01:19:50,560 --> 01:19:52,640
to the underlying cloud account or the

1782
01:19:52,640 --> 01:19:54,719
underlying container of the pod but has

1783
01:19:54,719 --> 01:19:56,719
limited privileges but after enumerating

1784
01:19:56,719 --> 01:19:57,760
a bit

1785
01:19:57,760 --> 01:20:00,239
he uh identified there isn't like an

1786
01:20:00,239 --> 01:20:01,600
impersonation access to a particular

1787
01:20:01,600 --> 01:20:02,719
service account and then he is

1788
01:20:02,719 --> 01:20:04,560
impersonating the rest of the commands

1789
01:20:04,560 --> 01:20:05,760
using that service account and this is

1790
01:20:05,760 --> 01:20:07,440
something which i came across all which

1791
01:20:07,440 --> 01:20:09,040
we still come across in many of the

1792
01:20:09,040 --> 01:20:10,480
penetration testings on the real-time

1793
01:20:10,480 --> 01:20:12,159
assessments

1794
01:20:12,159 --> 01:20:14,320
so we were able to successfully access

1795
01:20:14,320 --> 01:20:15,920
the secrets

1796
01:20:15,920 --> 01:20:17,840
and now we try to identify the list of

1797
01:20:17,840 --> 01:20:20,159
pods that are running inside the cluster

1798
01:20:20,159 --> 01:20:22,080
and these are the parts that are running

1799
01:20:22,080 --> 01:20:24,880
inside the cluster

1800
01:20:28,800 --> 01:20:32,480
and after enumerating a bed the attacker

1801
01:20:32,480 --> 01:20:34,480
came across if you identify we are still

1802
01:20:34,480 --> 01:20:35,840
running inside of web application

1803
01:20:35,840 --> 01:20:37,360
container that we gained access using

1804
01:20:37,360 --> 01:20:40,000
remote execution and from this we are

1805
01:20:40,000 --> 01:20:41,440
actually interacting to the underlying

1806
01:20:41,440 --> 01:20:44,159
cluster using an impersonation technique

1807
01:20:44,159 --> 01:20:46,639
so after going through all the

1808
01:20:46,639 --> 01:20:48,639
commands and after identifying the pods

1809
01:20:48,639 --> 01:20:50,800
he came across something called jenkins

1810
01:20:50,800 --> 01:20:54,239
which is like a build server usually

1811
01:20:54,239 --> 01:20:55,920
in the recent times in the organizations

1812
01:20:55,920 --> 01:20:57,600
these build tools are like the juicy

1813
01:20:57,600 --> 01:20:59,520
targets they're like the crown jewels

1814
01:20:59,520 --> 01:21:00,960
for it for the attackers because they

1815
01:21:00,960 --> 01:21:02,000
will have

1816
01:21:02,000 --> 01:21:04,639
very high level of access to like your

1817
01:21:04,639 --> 01:21:06,639
code base or it could be to your

1818
01:21:06,639 --> 01:21:08,159
uh to the infrastructure where they

1819
01:21:08,159 --> 01:21:10,480
actually deploy uh the infrastructure or

1820
01:21:10,480 --> 01:21:12,239
the code usually these build servers are

1821
01:21:12,239 --> 01:21:14,000
given high privileges if you come across

1822
01:21:14,000 --> 01:21:15,920
10 machines and if you see like a build

1823
01:21:15,920 --> 01:21:17,840
server the attacker will always target

1824
01:21:17,840 --> 01:21:19,600
the build server first because if he

1825
01:21:19,600 --> 01:21:21,199
happens to gain access to the build

1826
01:21:21,199 --> 01:21:23,199
server it's a game over so pretty much

1827
01:21:23,199 --> 01:21:25,360
in the same scenario the attacker still

1828
01:21:25,360 --> 01:21:27,280
tries to attack this build server and we

1829
01:21:27,280 --> 01:21:28,960
see how we can attack jenkins and gain

1830
01:21:28,960 --> 01:21:29,840
access

1831
01:21:29,840 --> 01:21:33,040
so that is like the next scenario

1832
01:21:33,040 --> 01:21:35,040
so we identified all the servers that

1833
01:21:35,040 --> 01:21:37,199
are running inside the cluster there is

1834
01:21:37,199 --> 01:21:39,360
a build server called jenkins so what i

1835
01:21:39,360 --> 01:21:42,159
will try to do is i will execute some

1836
01:21:42,159 --> 01:21:44,320
commands into that server so you can

1837
01:21:44,320 --> 01:21:46,239
copy and paste the command call

1838
01:21:46,239 --> 01:21:48,719
i so what i'm doing is it's pretty much

1839
01:21:48,719 --> 01:21:50,320
the same thing which we have seen so far

1840
01:21:50,320 --> 01:21:52,400
i'm impersonating as a group system

1841
01:21:52,400 --> 01:21:54,560
masters so in the name space called

1842
01:21:54,560 --> 01:21:56,719
jenkins i'm executing some commands or

1843
01:21:56,719 --> 01:21:58,400
executing into the container which one

1844
01:21:58,400 --> 01:22:02,638
it is it is like the jenkins pod

1845
01:22:04,000 --> 01:22:07,520
knife and slash pin

1846
01:22:08,560 --> 01:22:09,760
there we go

1847
01:22:09,760 --> 01:22:12,080
so we are inside the jenkins server so

1848
01:22:12,080 --> 01:22:16,480
so far using a web application bug

1849
01:22:16,960 --> 01:22:18,639
using of application bug we gained

1850
01:22:18,639 --> 01:22:20,560
access to one of the container or the

1851
01:22:20,560 --> 01:22:22,080
underlying container and from the

1852
01:22:22,080 --> 01:22:24,719
underlying container we try to identify

1853
01:22:24,719 --> 01:22:26,000
some privilege escalation using

1854
01:22:26,000 --> 01:22:27,760
impersonation technique and using that

1855
01:22:27,760 --> 01:22:29,520
impersonation technique we identified a

1856
01:22:29,520 --> 01:22:31,360
privileged border a bill server called

1857
01:22:31,360 --> 01:22:34,159
jenkins and we executed inside the

1858
01:22:34,159 --> 01:22:35,520
jenkins and we gained access to the

1859
01:22:35,520 --> 01:22:37,679
jenkins server and from here we see what

1860
01:22:37,679 --> 01:22:38,960
else we can do

1861
01:22:38,960 --> 01:22:40,880
so basically it's as an attacker i will

1862
01:22:40,880 --> 01:22:42,960
pretty much do the same stuff

1863
01:22:42,960 --> 01:22:44,320
i will check for all the environment

1864
01:22:44,320 --> 01:22:46,400
variables there seems to be some juicy

1865
01:22:46,400 --> 01:22:49,280
information such as my secret

1866
01:22:49,280 --> 01:22:51,120
it says the password and the host name

1867
01:22:51,120 --> 01:22:53,199
the jenkins port the username just make

1868
01:22:53,199 --> 01:22:54,880
a note of them admin and the password

1869
01:22:54,880 --> 01:22:56,960
percent and we also have something

1870
01:22:56,960 --> 01:22:59,280
called gogs token

1871
01:22:59,280 --> 01:23:01,440
so we have some critical information

1872
01:23:01,440 --> 01:23:02,960
like there's some token it could be like

1873
01:23:02,960 --> 01:23:04,400
the build server and the username and

1874
01:23:04,400 --> 01:23:05,520
the password

1875
01:23:05,520 --> 01:23:07,199
and if you ask me hey wasan will this

1876
01:23:07,199 --> 01:23:08,880
really happen in the real time yes these

1877
01:23:08,880 --> 01:23:10,800
things still happen in the real time

1878
01:23:10,800 --> 01:23:12,880
most of the companies they still pass

1879
01:23:12,880 --> 01:23:15,120
secrets as environment variables or even

1880
01:23:15,120 --> 01:23:16,560
even if they inject during the runtime

1881
01:23:16,560 --> 01:23:17,840
you still be able to access this

1882
01:23:17,840 --> 01:23:19,199
information and this is something the

1883
01:23:19,199 --> 01:23:20,719
scenario which i have created based on

1884
01:23:20,719 --> 01:23:23,520
my real experience

1885
01:23:23,520 --> 01:23:26,159
so when an attacker gains access to a

1886
01:23:26,159 --> 01:23:28,000
build server there are like different

1887
01:23:28,000 --> 01:23:29,760
critical folders the attacker can always

1888
01:23:29,760 --> 01:23:32,320
play with so one such important folder

1889
01:23:32,320 --> 01:23:34,000
is like the jobs folder where different

1890
01:23:34,000 --> 01:23:36,960
kinds of build jobs or unit testings any

1891
01:23:36,960 --> 01:23:38,400
kind of jobs that might happen on the

1892
01:23:38,400 --> 01:23:40,639
builder build server so i'm getting

1893
01:23:40,639 --> 01:23:42,960
inside the jobs folder for the jenkins

1894
01:23:42,960 --> 01:23:45,280
so exploring jenkins is also off of the

1895
01:23:45,280 --> 01:23:47,600
scope of this workshop so i have given

1896
01:23:47,600 --> 01:23:49,360
like the straight commands

1897
01:23:49,360 --> 01:23:52,159
so i am inside the jobs folder there

1898
01:23:52,159 --> 01:23:54,880
seems to be one job created

1899
01:23:54,880 --> 01:23:57,280
now what i'll do is i'll get inside that

1900
01:23:57,280 --> 01:23:58,880
folder city docker file

1901
01:23:58,880 --> 01:23:59,920
[Music]

1902
01:23:59,920 --> 01:24:01,520
the job could be like some the company

1903
01:24:01,520 --> 01:24:03,040
or the organization of the devops team

1904
01:24:03,040 --> 01:24:04,639
is building some docker files using the

1905
01:24:04,639 --> 01:24:05,679
job

1906
01:24:05,679 --> 01:24:07,920
of the docker images so here there seems

1907
01:24:07,920 --> 01:24:10,400
to be config.xml looks like some juicy

1908
01:24:10,400 --> 01:24:13,600
information i will try and explore that

1909
01:24:13,600 --> 01:24:16,920
file config.xml

1910
01:24:17,199 --> 01:24:19,760
so it says it reveals me like the

1911
01:24:19,760 --> 01:24:21,679
internal git repository

1912
01:24:21,679 --> 01:24:23,920
this is like the ip address or the path

1913
01:24:23,920 --> 01:24:26,239
of the internal gate repository likewise

1914
01:24:26,239 --> 01:24:27,840
you can gather

1915
01:24:27,840 --> 01:24:29,199
some other critical information from

1916
01:24:29,199 --> 01:24:31,839
here

1917
01:24:32,159 --> 01:24:35,280
let's make a note of it

1918
01:24:37,040 --> 01:24:38,239
so this is

1919
01:24:38,239 --> 01:24:39,840
the ip address of the internal git

1920
01:24:39,840 --> 01:24:42,400
repository and from here we also have

1921
01:24:42,400 --> 01:24:44,960
something called a token so what i will

1922
01:24:44,960 --> 01:24:47,040
do is using this token

1923
01:24:47,040 --> 01:24:49,360
and using that ip address i'll try to

1924
01:24:49,360 --> 01:24:51,679
explore like the internal bit or

1925
01:24:51,679 --> 01:24:54,239
internal code base repository so that

1926
01:24:54,239 --> 01:24:59,320
the command is provided in the document

1927
01:25:00,800 --> 01:25:02,480
and these are very real-time scenarios

1928
01:25:02,480 --> 01:25:04,000
that we still use while pen testing and

1929
01:25:04,000 --> 01:25:05,440
infrastructure and this is how we change

1930
01:25:05,440 --> 01:25:08,159
different attacks

1931
01:25:08,400 --> 01:25:10,880
so i'm passing like the token that is

1932
01:25:10,880 --> 01:25:13,760
said as an environment variable

1933
01:25:13,760 --> 01:25:14,880
and

1934
01:25:14,880 --> 01:25:16,480
this is the ip address that i'm trying

1935
01:25:16,480 --> 01:25:18,480
to explore and what i'm doing is i'm

1936
01:25:18,480 --> 01:25:20,560
trying to get different reports

1937
01:25:20,560 --> 01:25:22,800
uh that exists inside that environment

1938
01:25:22,800 --> 01:25:25,440
inside that internal repository

1939
01:25:25,440 --> 01:25:27,520
there we go i got some information so

1940
01:25:27,520 --> 01:25:29,440
inside that repository there seems to be

1941
01:25:29,440 --> 01:25:31,280
having some

1942
01:25:31,280 --> 01:25:33,040
repo which is creating docker files or

1943
01:25:33,040 --> 01:25:34,400
docker images

1944
01:25:34,400 --> 01:25:36,960
some application repository

1945
01:25:36,960 --> 01:25:38,840
some developer some

1946
01:25:38,840 --> 01:25:42,639
environment repository from uh for infra

1947
01:25:42,639 --> 01:25:46,000
there is some backend repos and there

1948
01:25:46,000 --> 01:25:48,000
are some front-end reports so this is

1949
01:25:48,000 --> 01:25:49,280
how we can explore different reports and

1950
01:25:49,280 --> 01:25:51,040
you can always clone the repos and see

1951
01:25:51,040 --> 01:25:53,440
some for some use information from here

1952
01:25:53,440 --> 01:25:56,159
what i will do is

1953
01:25:56,159 --> 01:25:58,080
i will just

1954
01:25:58,080 --> 01:26:00,880
try to target

1955
01:26:01,120 --> 01:26:02,960
the repo called docker file which the

1956
01:26:02,960 --> 01:26:04,320
devops they might be using to build

1957
01:26:04,320 --> 01:26:06,400
docker images inside the infra i'll get

1958
01:26:06,400 --> 01:26:09,440
inside the temp folder

1959
01:26:09,440 --> 01:26:11,199
usually in the organizations most of the

1960
01:26:11,199 --> 01:26:13,040
time if you target like a master repo

1961
01:26:13,040 --> 01:26:14,320
there could be some restrictions in

1962
01:26:14,320 --> 01:26:16,080
place like not everybody can access

1963
01:26:16,080 --> 01:26:17,760
those reports or not everybody can push

1964
01:26:17,760 --> 01:26:19,360
directly to the master you will have

1965
01:26:19,360 --> 01:26:21,280
some workflows or you need to trigger

1966
01:26:21,280 --> 01:26:23,360
some things before you push something to

1967
01:26:23,360 --> 01:26:25,679
the master branch however many companies

1968
01:26:25,679 --> 01:26:28,000
still don't have enough uh restrictions

1969
01:26:28,000 --> 01:26:30,000
for feature branches or the branches

1970
01:26:30,000 --> 01:26:31,920
anybody can try test different things on

1971
01:26:31,920 --> 01:26:34,000
the feature branches so as an attacker

1972
01:26:34,000 --> 01:26:35,600
instead of trying or attacking the

1973
01:26:35,600 --> 01:26:38,000
master branch i'm trying to gain access

1974
01:26:38,000 --> 01:26:39,840
to the developer branch so i'm cloning

1975
01:26:39,840 --> 01:26:43,520
this one git clone ifnb dev

1976
01:26:43,520 --> 01:26:47,120
alright i have successfully cloned it

1977
01:26:47,120 --> 01:26:49,120
so i'm getting inside

1978
01:26:49,120 --> 01:26:50,560
that

1979
01:26:50,560 --> 01:26:52,800
wrapper docker file

1980
01:26:52,800 --> 01:26:55,360
and inside the docker file

1981
01:26:55,360 --> 01:26:59,040
now let us see what the docker file has

1982
01:26:59,040 --> 01:27:02,719
so here it says from httpd and when we

1983
01:27:02,719 --> 01:27:05,280
so did the team or the dog the devops

1984
01:27:05,280 --> 01:27:06,960
team they are building some images from

1985
01:27:06,960 --> 01:27:08,480
based on this image

1986
01:27:08,480 --> 01:27:10,560
so as an attacker what i will do is i'll

1987
01:27:10,560 --> 01:27:12,480
make some changes and i'll push these

1988
01:27:12,480 --> 01:27:14,400
changes to the master or to the dev

1989
01:27:14,400 --> 01:27:16,480
branch and

1990
01:27:16,480 --> 01:27:18,239
the way the workflows are designed these

1991
01:27:18,239 --> 01:27:20,000
days in the organizations is every time

1992
01:27:20,000 --> 01:27:22,159
you make some change to uh your account

1993
01:27:22,159 --> 01:27:23,600
you make some push some changes to the

1994
01:27:23,600 --> 01:27:24,960
branch it will immediately trigger the

1995
01:27:24,960 --> 01:27:26,719
build servers and it will do some

1996
01:27:26,719 --> 01:27:28,639
assessments and it will run all the

1997
01:27:28,639 --> 01:27:31,040
things all the steps or all the build

1998
01:27:31,040 --> 01:27:32,320
steps that we have configured in the

1999
01:27:32,320 --> 01:27:34,080
build server so we will see how we can

2000
01:27:34,080 --> 01:27:35,840
take advantage of it how we can attack

2001
01:27:35,840 --> 01:27:39,440
the jenkins server in this scenario

2002
01:27:39,520 --> 01:27:41,520
so here we'll have to play some bits and

2003
01:27:41,520 --> 01:27:43,280
pieces of

2004
01:27:43,280 --> 01:27:46,239
some git so what i'll do is we have seen

2005
01:27:46,239 --> 01:27:48,719
what the docker file has so i'm going to

2006
01:27:48,719 --> 01:27:51,600
remove this one

2007
01:27:51,600 --> 01:27:54,159
i don't miss an rf docker file

2008
01:27:54,159 --> 01:27:55,840
i'm going to replace this docker file

2009
01:27:55,840 --> 01:27:57,600
with a malicious docker file that i have

2010
01:27:57,600 --> 01:28:00,600
created

2011
01:28:05,280 --> 01:28:06,690
let's go once again

2012
01:28:06,690 --> 01:28:09,830
[Music]

2013
01:28:09,920 --> 01:28:11,760
so i have given the file in the

2014
01:28:11,760 --> 01:28:13,840
documentation you can just copy and

2015
01:28:13,840 --> 01:28:17,239
paste it

2016
01:28:40,560 --> 01:28:42,719
i have pulled the docker file now let us

2017
01:28:42,719 --> 01:28:44,400
see the contents of this docker file

2018
01:28:44,400 --> 01:28:46,320
which we have created which we have

2019
01:28:46,320 --> 01:28:48,559
pulled

2020
01:28:48,960 --> 01:28:51,840
cool so i'm saying from

2021
01:28:51,840 --> 01:28:54,560
so and so i'm using i'm saying like use

2022
01:28:54,560 --> 01:28:57,120
this evil image being an attacker i know

2023
01:28:57,120 --> 01:28:58,880
what the evil image does i have created

2024
01:28:58,880 --> 01:29:01,360
this evil image in such a way that every

2025
01:29:01,360 --> 01:29:03,679
time somebody spins up a container or

2026
01:29:03,679 --> 01:29:05,679
uses this docker image or this image

2027
01:29:05,679 --> 01:29:07,120
inside their infrared will immediately

2028
01:29:07,120 --> 01:29:09,679
give some kind of a shell

2029
01:29:09,679 --> 01:29:11,920
to my infrastructure so this is like the

2030
01:29:11,920 --> 01:29:13,120
real time there are like so many

2031
01:29:13,120 --> 01:29:14,880
malicious containers or crypto miners

2032
01:29:14,880 --> 01:29:17,440
that are posted in the docker hub and

2033
01:29:17,440 --> 01:29:19,280
other places which have been recently

2034
01:29:19,280 --> 01:29:21,760
deleted and it's still happening most of

2035
01:29:21,760 --> 01:29:23,679
the times

2036
01:29:23,679 --> 01:29:26,159
so i am

2037
01:29:26,159 --> 01:29:28,080
i have created replace the old docker

2038
01:29:28,080 --> 01:29:30,159
file with some malicious docker file

2039
01:29:30,159 --> 01:29:31,280
so

2040
01:29:31,280 --> 01:29:33,440
some basic git commands like git status

2041
01:29:33,440 --> 01:29:35,760
it says modify docker file

2042
01:29:35,760 --> 01:29:38,560
so git add

2043
01:29:38,560 --> 01:29:40,239
perfect

2044
01:29:40,239 --> 01:29:43,199
hit comment iphone

2045
01:29:43,199 --> 01:29:44,560
test

2046
01:29:44,560 --> 01:29:46,400
uh it says please tell me who you are

2047
01:29:46,400 --> 01:29:47,840
okay let's

2048
01:29:47,840 --> 01:29:50,159
it is advising to run some commands copy

2049
01:29:50,159 --> 01:29:53,920
this one full it's done

2050
01:29:55,040 --> 01:29:57,280
get status

2051
01:29:57,280 --> 01:30:00,000
hit add

2052
01:30:01,440 --> 01:30:04,678
hit comment

2053
01:30:06,000 --> 01:30:09,840
it's like the file changes are happening

2054
01:30:09,840 --> 01:30:13,040
now let us get push

2055
01:30:13,040 --> 01:30:14,719
so we have successfully pushed the

2056
01:30:14,719 --> 01:30:17,040
changes to like the dev branch and like

2057
01:30:17,040 --> 01:30:18,719
we discussed before every time you make

2058
01:30:18,719 --> 01:30:20,320
some changes to a dev brand there should

2059
01:30:20,320 --> 01:30:21,840
be a pipeline which will be triggered

2060
01:30:21,840 --> 01:30:23,840
and will run all the steps that has been

2061
01:30:23,840 --> 01:30:26,239
designed so if you go back the very

2062
01:30:26,239 --> 01:30:29,280
first page where we have did the setup

2063
01:30:29,280 --> 01:30:31,280
there is a build and deploy server for

2064
01:30:31,280 --> 01:30:32,719
the dev environment

2065
01:30:32,719 --> 01:30:37,520
so just go and access this url

2066
01:30:44,560 --> 01:30:46,400
right perfect my username is admin and

2067
01:30:46,400 --> 01:30:49,360
the password is basan

2068
01:30:53,600 --> 01:30:55,280
the username and the password which we

2069
01:30:55,280 --> 01:30:56,719
got it from here in the form of

2070
01:30:56,719 --> 01:31:00,280
environment variables

2071
01:31:03,040 --> 01:31:04,080
so

2072
01:31:04,080 --> 01:31:06,480
looks like a job has been run 30 seconds

2073
01:31:06,480 --> 01:31:08,400
ago when we pushed it

2074
01:31:08,400 --> 01:31:10,480
if you click on docker file let us see

2075
01:31:10,480 --> 01:31:12,000
what has happened

2076
01:31:12,000 --> 01:31:14,320
cool perfect it has pulled as per the

2077
01:31:14,320 --> 01:31:16,080
docker file it has pulled the evil image

2078
01:31:16,080 --> 01:31:17,280
from here

2079
01:31:17,280 --> 01:31:18,560
so and these are the build steps that

2080
01:31:18,560 --> 01:31:20,159
are by default defined in that

2081
01:31:20,159 --> 01:31:22,159
organization so we have just made some

2082
01:31:22,159 --> 01:31:24,880
changes to the docker file and it has

2083
01:31:24,880 --> 01:31:26,800
pulled the docker image

2084
01:31:26,800 --> 01:31:28,400
it has

2085
01:31:28,400 --> 01:31:30,480
successfully built the image

2086
01:31:30,480 --> 01:31:32,320
and it has successfully tagged as per

2087
01:31:32,320 --> 01:31:34,560
that organization's uh

2088
01:31:34,560 --> 01:31:36,960
naming schema and it has successfully

2089
01:31:36,960 --> 01:31:38,400
pushed it

2090
01:31:38,400 --> 01:31:40,639
so if you understand correctly what we

2091
01:31:40,639 --> 01:31:42,960
did is we gain act we using like the web

2092
01:31:42,960 --> 01:31:44,639
application we identified a remote

2093
01:31:44,639 --> 01:31:46,719
execution using that we gained access to

2094
01:31:46,719 --> 01:31:48,800
the underlying container and in the

2095
01:31:48,800 --> 01:31:50,880
underlying container we gained access

2096
01:31:50,880 --> 01:31:53,199
with limited privileges but then we

2097
01:31:53,199 --> 01:31:55,199
enumerated a bit and identified there is

2098
01:31:55,199 --> 01:31:56,960
some impersonation techniques

2099
01:31:56,960 --> 01:31:58,719
impersonation uh

2100
01:31:58,719 --> 01:32:00,239
impersonation vulnerability taking

2101
01:32:00,239 --> 01:32:01,920
advantage of that vulnerability we try

2102
01:32:01,920 --> 01:32:04,719
to get access to secrets and some pods

2103
01:32:04,719 --> 01:32:06,239
and from there we identified a

2104
01:32:06,239 --> 01:32:08,800
privileged board which is called jenkins

2105
01:32:08,800 --> 01:32:10,560
we gained access to the jenkins and we

2106
01:32:10,560 --> 01:32:12,239
targeted one of the bills inside the

2107
01:32:12,239 --> 01:32:14,960
jenkins we deleted and we created some

2108
01:32:14,960 --> 01:32:17,920
malicious docker file and then we pushed

2109
01:32:17,920 --> 01:32:20,080
the changes to the dev repo and then it

2110
01:32:20,080 --> 01:32:22,159
has immediately triggered the bill

2111
01:32:22,159 --> 01:32:24,800
and it has built an image based on the

2112
01:32:24,800 --> 01:32:27,040
vulnerable image that we have defined in

2113
01:32:27,040 --> 01:32:28,960
the docker file and then it pushed it to

2114
01:32:28,960 --> 01:32:30,960
the company's internal repository

2115
01:32:30,960 --> 01:32:34,080
so now what happens is every time a

2116
01:32:34,080 --> 01:32:36,400
devops or a developer whenever they use

2117
01:32:36,400 --> 01:32:38,239
this image inside their infrastructure

2118
01:32:38,239 --> 01:32:39,679
when they spin up application or

2119
01:32:39,679 --> 01:32:41,679
container based on this image it will

2120
01:32:41,679 --> 01:32:43,520
immediately give

2121
01:32:43,520 --> 01:32:45,920
access to to the attacker that's what

2122
01:32:45,920 --> 01:32:49,840
the attacker has defined in that uh

2123
01:32:49,840 --> 01:32:51,760
evil docker file so let us see like how

2124
01:32:51,760 --> 01:32:55,719
that can actually be exploited

2125
01:32:58,880 --> 01:33:01,120
so from here i'll just quickly exit from

2126
01:33:01,120 --> 01:33:02,480
the docker machine and i'll draw

2127
01:33:02,480 --> 01:33:04,480
everything from the vm the workstation

2128
01:33:04,480 --> 01:33:06,239
to make the lights easier because here

2129
01:33:06,239 --> 01:33:08,159
at times we are not use some commands

2130
01:33:08,159 --> 01:33:11,360
like control c control v or other step

2131
01:33:11,360 --> 01:33:12,560
so

2132
01:33:12,560 --> 01:33:14,159
i'll be using like the vm but pretty

2133
01:33:14,159 --> 01:33:15,920
much once if the attacker gains access

2134
01:33:15,920 --> 01:33:18,000
to like one of the containers let us

2135
01:33:18,000 --> 01:33:19,360
assume we are doing the same stuff so

2136
01:33:19,360 --> 01:33:23,600
what i'll do is i'll get back to the vm

2137
01:33:23,600 --> 01:33:25,120
so i can see all the pods that are

2138
01:33:25,120 --> 01:33:27,360
running inside the cluster

2139
01:33:27,360 --> 01:33:29,520
so these are the ports that are running

2140
01:33:29,520 --> 01:33:32,239
so what i'll do is i will target this

2141
01:33:32,239 --> 01:33:35,959
one called web app

2142
01:33:36,320 --> 01:33:37,360
so

2143
01:33:37,360 --> 01:33:39,440
cube ctl

2144
01:33:39,440 --> 01:33:42,159
get po

2145
01:33:43,040 --> 01:33:44,800
and this is running in the namespace

2146
01:33:44,800 --> 01:33:46,960
called developers

2147
01:33:46,960 --> 01:33:50,000
cubectl iphone

2148
01:33:50,000 --> 01:33:52,000
developers i would like to get the

2149
01:33:52,000 --> 01:33:54,320
manifestation file of this one

2150
01:33:54,320 --> 01:33:56,080
so that is the command which we have

2151
01:33:56,080 --> 01:33:58,159
learned at the very early stages we used

2152
01:33:58,159 --> 01:34:02,440
we passed the flag iphone or ammo

2153
01:34:05,920 --> 01:34:08,159
so

2154
01:34:08,400 --> 01:34:11,520
i will place this one into web app dot

2155
01:34:11,520 --> 01:34:13,120
ammo

2156
01:34:13,120 --> 01:34:14,080
cool

2157
01:34:14,080 --> 01:34:17,520
now let us see cat by bob dot camel we

2158
01:34:17,520 --> 01:34:20,320
has been generated

2159
01:34:21,600 --> 01:34:25,639
i will edit this file

2160
01:34:34,000 --> 01:34:36,159
so

2161
01:34:38,719 --> 01:34:40,480
what i'll be doing is

2162
01:34:40,480 --> 01:34:42,800
i will replace this image with the

2163
01:34:42,800 --> 01:34:44,960
malicious image which we have created a

2164
01:34:44,960 --> 01:34:47,440
few seconds ago

2165
01:34:47,440 --> 01:34:49,119
so and everything is dynamic guys this

2166
01:34:49,119 --> 01:34:51,679
is like happening in the real time

2167
01:34:51,679 --> 01:34:53,440
so this is the image this is the thing

2168
01:34:53,440 --> 01:34:55,920
which we have created and did it like

2169
01:34:55,920 --> 01:34:58,960
just a few seconds ago

2170
01:34:58,960 --> 01:35:02,159
it says like 30th september 2021 944 my

2171
01:35:02,159 --> 01:35:04,560
time so it's just happened like a few

2172
01:35:04,560 --> 01:35:05,760
minutes ago

2173
01:35:05,760 --> 01:35:07,920
four minutes 36 minutes ago so we are

2174
01:35:07,920 --> 01:35:11,199
going to use that image here

2175
01:35:12,080 --> 01:35:16,400
and i'll also pass some commands

2176
01:35:23,199 --> 01:35:25,679
being an attacker i know

2177
01:35:25,679 --> 01:35:27,679
these are the flags that i have passed

2178
01:35:27,679 --> 01:35:29,360
through that malicious image

2179
01:35:29,360 --> 01:35:30,639
so what i'll be doing is i'll be

2180
01:35:30,639 --> 01:35:32,310
providing the attacker id

2181
01:35:32,310 --> 01:35:35,409
[Music]

2182
01:35:35,520 --> 01:35:37,280
i will just get a netcat listener in

2183
01:35:37,280 --> 01:35:40,400
that cat iphone 7777

2184
01:35:40,400 --> 01:35:44,170
and my ip address is 190 to 168.50 6.1

2185
01:35:44,170 --> 01:35:46,080
[Music]

2186
01:35:46,080 --> 01:35:49,119
just quickly check it

2187
01:35:51,840 --> 01:35:54,840
192.166.56.1

2188
01:36:00,080 --> 01:36:03,520
only to 168 56.1 everything is good

2189
01:36:03,520 --> 01:36:06,480
install is fine

2190
01:36:08,159 --> 01:36:11,839
so i'm going to save this one

2191
01:36:13,600 --> 01:36:15,360
so before deploying i'll just check that

2192
01:36:15,360 --> 01:36:18,880
one again add to about.yaml

2193
01:36:18,880 --> 01:36:21,520
so we have replaced the image with the

2194
01:36:21,520 --> 01:36:23,199
malicious image that we have created we

2195
01:36:23,199 --> 01:36:25,440
are passing some additional facts

2196
01:36:25,440 --> 01:36:26,880
so

2197
01:36:26,880 --> 01:36:29,440
let us apply this one for applying this

2198
01:36:29,440 --> 01:36:31,520
deployment the command is cube cpl apply

2199
01:36:31,520 --> 01:36:33,040
iphone f

2200
01:36:33,040 --> 01:36:35,520
the pop dot ml so the moment it is

2201
01:36:35,520 --> 01:36:38,400
deployed we should get a shell

2202
01:36:38,400 --> 01:36:40,320
on this one so this is what happens so

2203
01:36:40,320 --> 01:36:42,320
this is one example but usually in the

2204
01:36:42,320 --> 01:36:44,800
organization the devops team will build

2205
01:36:44,800 --> 01:36:48,679
but there is something wrong

2206
01:36:55,510 --> 01:36:58,829
[Music]

2207
01:37:03,360 --> 01:37:04,840
i

2208
01:37:04,840 --> 01:37:07,760
mean one second guys i'm just checking

2209
01:37:07,760 --> 01:37:10,000
it

2210
01:37:13,360 --> 01:37:16,400
where is the ever

2211
01:37:18,159 --> 01:37:21,839
a pod someone

2212
01:37:48,000 --> 01:37:50,159
i'm checking for the error just give me

2213
01:37:50,159 --> 01:37:53,400
one second

2214
01:38:37,119 --> 01:38:41,040
well looks like i missed something

2215
01:38:41,119 --> 01:38:45,320
i don't know about ammo

2216
01:38:55,280 --> 01:38:58,280
command

2217
01:39:00,800 --> 01:39:03,800
okay

2218
01:39:16,159 --> 01:39:18,080
looks like i missed something let us try

2219
01:39:18,080 --> 01:39:19,520
this one otherwise we will move on to

2220
01:39:19,520 --> 01:39:21,040
the next scenario we will tackle this in

2221
01:39:21,040 --> 01:39:23,519
the last

2222
01:39:24,239 --> 01:39:26,880
cdl apply and i've adopted a camel or

2223
01:39:26,880 --> 01:39:30,679
still there is something wrong

2224
01:40:10,800 --> 01:40:13,470
so this except one set at 777

2225
01:40:13,470 --> 01:40:16,659
[Music]

2226
01:41:18,800 --> 01:41:21,760
or i'll try to do this one last

2227
01:41:21,760 --> 01:41:23,760
technique if this doesn't work we will

2228
01:41:23,760 --> 01:41:26,400
move on to the next one we'll get po

2229
01:41:26,400 --> 01:41:29,400
n

2230
01:41:45,119 --> 01:41:47,520
all that we are targeting this this one

2231
01:41:47,520 --> 01:41:51,000
let's see here

2232
01:42:03,920 --> 01:42:08,159
uh sorry guys just a small mistake

2233
01:42:08,159 --> 01:42:09,040
so

2234
01:42:09,040 --> 01:42:11,440
here

2235
01:42:13,040 --> 01:42:15,360
i i generated a

2236
01:42:15,360 --> 01:42:17,600
manifestation file for the pause what i

2237
01:42:17,600 --> 01:42:19,520
should be doing for the deployment

2238
01:42:19,520 --> 01:42:20,800
because i'm making a change for the

2239
01:42:20,800 --> 01:42:25,199
deployment so cool so cubectl

2240
01:42:26,840 --> 01:42:32,159
getdeploy fna so this is the deployment

2241
01:42:32,159 --> 01:42:35,759
so cube cdl get deploy

2242
01:42:37,360 --> 01:42:37,710
and then

2243
01:42:37,710 --> 01:42:39,520
[Music]

2244
01:42:39,520 --> 01:42:43,840
developers get deploy iphone

2245
01:42:44,000 --> 01:42:47,440
perfect so what i will do is

2246
01:42:47,440 --> 01:42:51,678
some evil dot yaml

2247
01:42:52,400 --> 01:42:56,960
at evil.ml perfect

2248
01:42:56,960 --> 01:43:00,400
now i will edit this file

2249
01:43:01,360 --> 01:43:02,400
perfect

2250
01:43:02,400 --> 01:43:08,199
so i am going to change this image

2251
01:43:11,760 --> 01:43:13,920
image that we created

2252
01:43:13,920 --> 01:43:15,650
which is like tag assassin

2253
01:43:15,650 --> 01:43:18,320
[Music]

2254
01:43:18,320 --> 01:43:21,320
perfect

2255
01:43:24,480 --> 01:43:28,320
and we pass some odds

2256
01:43:34,639 --> 01:43:38,040
should work

2257
01:43:39,360 --> 01:43:41,440
perfect

2258
01:43:41,440 --> 01:43:42,880
control x

2259
01:43:42,880 --> 01:43:45,199
yes

2260
01:43:46,719 --> 01:43:48,880
cpl apply for nf

2261
01:43:48,880 --> 01:43:50,880
dot ammo

2262
01:43:50,880 --> 01:43:52,480
oh there you go this time it looks like

2263
01:43:52,480 --> 01:43:55,360
it is successful it has applied

2264
01:43:55,360 --> 01:43:56,719
qpl

2265
01:43:56,719 --> 01:43:58,400
get voi

2266
01:43:58,400 --> 01:43:59,440
looks like

2267
01:43:59,440 --> 01:44:01,600
it is terminating the previous container

2268
01:44:01,600 --> 01:44:03,199
and we have like the new container

2269
01:44:03,199 --> 01:44:05,920
coming up so once the new container is

2270
01:44:05,920 --> 01:44:07,920
up and running hopefully we should have

2271
01:44:07,920 --> 01:44:09,920
the shell on the netcat listener fingers

2272
01:44:09,920 --> 01:44:12,239
crossed

2273
01:44:15,280 --> 01:44:16,370
here it may

2274
01:44:16,370 --> 01:44:19,489
[Music]

2275
01:44:23,840 --> 01:44:25,360
so yeah the

2276
01:44:25,360 --> 01:44:27,199
container is up and running did we get

2277
01:44:27,199 --> 01:44:28,480
the shell

2278
01:44:28,480 --> 01:44:30,320
let us check for it id there you go we

2279
01:44:30,320 --> 01:44:31,520
got the shell

2280
01:44:31,520 --> 01:44:33,199
on the netcat listener so this is what

2281
01:44:33,199 --> 01:44:35,840
happens so this is one example but let

2282
01:44:35,840 --> 01:44:38,080
us assume this is like a golden image or

2283
01:44:38,080 --> 01:44:40,320
this is like the base image that the

2284
01:44:40,320 --> 01:44:42,960
teams build in their infrastructure so

2285
01:44:42,960 --> 01:44:44,800
every time any developer or any

2286
01:44:44,800 --> 01:44:46,480
different teams if they consume this

2287
01:44:46,480 --> 01:44:48,400
base image this vulnerable base image

2288
01:44:48,400 --> 01:44:49,920
inside the infrastructure and if they

2289
01:44:49,920 --> 01:44:52,080
happen to deploy it it will give like

2290
01:44:52,080 --> 01:44:53,360
the remote access to the attacker

2291
01:44:53,360 --> 01:44:55,199
anytime or this is one example or

2292
01:44:55,199 --> 01:44:57,199
sometimes instead of building this kind

2293
01:44:57,199 --> 01:44:59,600
of reverse shell that the attackers may

2294
01:44:59,600 --> 01:45:01,119
also build some kind of crypto mining

2295
01:45:01,119 --> 01:45:02,560
images which will do crypto mining

2296
01:45:02,560 --> 01:45:04,000
inside the infrastructure it's not

2297
01:45:04,000 --> 01:45:05,360
always about gaining access to the

2298
01:45:05,360 --> 01:45:07,440
infrastructure or gaining access to the

2299
01:45:07,440 --> 01:45:09,360
data but given like the huge compute

2300
01:45:09,360 --> 01:45:11,360
resources located in the cloud crypto

2301
01:45:11,360 --> 01:45:12,960
mining is one form of

2302
01:45:12,960 --> 01:45:15,360
stuff that is happening these days

2303
01:45:15,360 --> 01:45:17,520
so well that successfully concludes this

2304
01:45:17,520 --> 01:45:20,080
scenario i would like to just reiterate

2305
01:45:20,080 --> 01:45:22,239
what we have done so far

2306
01:45:22,239 --> 01:45:24,239
if you're using a web application remote

2307
01:45:24,239 --> 01:45:25,920
execution vulnerability we gained access

2308
01:45:25,920 --> 01:45:28,159
to one of the container and then we

2309
01:45:28,159 --> 01:45:29,600
identified that it is running on the

2310
01:45:29,600 --> 01:45:31,840
kubernetes cluster using the environment

2311
01:45:31,840 --> 01:45:34,560
variables and then the attacker had very

2312
01:45:34,560 --> 01:45:37,040
limited privileges to that container and

2313
01:45:37,040 --> 01:45:39,199
then after enumeration he identified

2314
01:45:39,199 --> 01:45:41,760
that the service account has

2315
01:45:41,760 --> 01:45:43,679
impersonation privileges and the

2316
01:45:43,679 --> 01:45:45,280
attacker could impersonate as the group

2317
01:45:45,280 --> 01:45:47,440
system admins and using these privileges

2318
01:45:47,440 --> 01:45:49,920
he identified one uh

2319
01:45:49,920 --> 01:45:51,199
crown jewel which is like the build

2320
01:45:51,199 --> 01:45:52,560
server called jenkins and then he

2321
01:45:52,560 --> 01:45:54,320
executed inside the jenkins he gained

2322
01:45:54,320 --> 01:45:55,520
access to the jenkins and then he

2323
01:45:55,520 --> 01:45:57,119
targeted one of the builds that are

2324
01:45:57,119 --> 01:45:59,280
running inside the jenkins server he

2325
01:45:59,280 --> 01:46:01,520
made some uh changes to one of the build

2326
01:46:01,520 --> 01:46:04,000
file he removed a docker file and attack

2327
01:46:04,000 --> 01:46:06,560
and created a malicious docker image and

2328
01:46:06,560 --> 01:46:08,800
it immediately triggered the pipeline

2329
01:46:08,800 --> 01:46:10,320
the pipeline has built the image and

2330
01:46:10,320 --> 01:46:12,480
pushed the image the vulnerable docker

2331
01:46:12,480 --> 01:46:14,159
image to the docker hub and what the

2332
01:46:14,159 --> 01:46:15,600
attacker did is like

2333
01:46:15,600 --> 01:46:17,679
just to uh show you an example we

2334
01:46:17,679 --> 01:46:20,320
changed one of the deployment and used

2335
01:46:20,320 --> 01:46:21,520
the vulnerable image that we have

2336
01:46:21,520 --> 01:46:23,840
created and it immediately gave reversal

2337
01:46:23,840 --> 01:46:25,679
or the access to the attacker so it can

2338
01:46:25,679 --> 01:46:27,040
also happen in different ways like i

2339
01:46:27,040 --> 01:46:28,480
mentioned the attacker can also create

2340
01:46:28,480 --> 01:46:30,480
some crypto mining and a crypto mining

2341
01:46:30,480 --> 01:46:32,880
image and anytime the devs or the devops

2342
01:46:32,880 --> 01:46:34,400
use different images

2343
01:46:34,400 --> 01:46:36,159
it will lose it will start cryptomining

2344
01:46:36,159 --> 01:46:38,480
in favor of the attacker

2345
01:46:38,480 --> 01:46:41,760
well that concludes this uh

2346
01:46:41,760 --> 01:46:42,960
one

2347
01:46:42,960 --> 01:46:47,119
now let's move on to the next scenario

2348
01:46:47,760 --> 01:46:49,360
this is again uh some interesting stuff

2349
01:46:49,360 --> 01:46:50,880
like if using like the docker socket

2350
01:46:50,880 --> 01:46:52,800
mount like i said uh the kubernetes

2351
01:46:52,800 --> 01:46:55,280
always needs some kind of a container

2352
01:46:55,280 --> 01:46:56,560
runtime that is up and running so

2353
01:46:56,560 --> 01:46:58,719
securing kubernetes cluster or securing

2354
01:46:58,719 --> 01:47:00,880
docker runtime the container runtime is

2355
01:47:00,880 --> 01:47:02,480
as important as securing the whole

2356
01:47:02,480 --> 01:47:04,719
cluster so let us see an example how an

2357
01:47:04,719 --> 01:47:05,760
attacker

2358
01:47:05,760 --> 01:47:07,760
uh if the gains access to one of the pod

2359
01:47:07,760 --> 01:47:09,199
and if there is like a docker socket

2360
01:47:09,199 --> 01:47:10,880
mounted and how the attacker will take

2361
01:47:10,880 --> 01:47:12,960
advantage of it so if you ask me hey

2362
01:47:12,960 --> 01:47:13,920
bassan

2363
01:47:13,920 --> 01:47:15,600
will this really happen in the real time

2364
01:47:15,600 --> 01:47:17,119
will that docker containers have like

2365
01:47:17,119 --> 01:47:19,199
docker socket mounted yes

2366
01:47:19,199 --> 01:47:21,040
because any of the monitoring tools for

2367
01:47:21,040 --> 01:47:22,560
example it could be even like security

2368
01:47:22,560 --> 01:47:24,400
monitoring tools or log monitoring tools

2369
01:47:24,400 --> 01:47:26,000
will always have this docker socket

2370
01:47:26,000 --> 01:47:27,600
mounted onto the containers in case they

2371
01:47:27,600 --> 01:47:29,360
need access to the underlying post or to

2372
01:47:29,360 --> 01:47:31,280
the underlying locks let's quickly look

2373
01:47:31,280 --> 01:47:32,880
into that scenario how we can abuse

2374
01:47:32,880 --> 01:47:35,600
docker socket mount

2375
01:47:35,600 --> 01:47:40,239
so i'll quickly get into the temp folder

2376
01:47:40,239 --> 01:47:41,920
we are good guys we are still on time we

2377
01:47:41,920 --> 01:47:45,440
are on track nothing to rush

2378
01:47:46,960 --> 01:47:49,040
so

2379
01:47:49,040 --> 01:47:50,639
that should be

2380
01:47:50,639 --> 01:47:52,560
i will be creating and downloading a

2381
01:47:52,560 --> 01:47:55,280
file which i have created for you

2382
01:47:55,280 --> 01:47:56,880
so just copy and paste that if that

2383
01:47:56,880 --> 01:48:00,239
doesn't work just

2384
01:48:00,239 --> 01:48:03,559
let me know

2385
01:48:07,360 --> 01:48:11,440
so just quickly apply this one

2386
01:48:14,000 --> 01:48:16,000
it says there is a pod called monitoring

2387
01:48:16,000 --> 01:48:18,480
created we try to attack uh this

2388
01:48:18,480 --> 01:48:20,560
monitoring port and see

2389
01:48:20,560 --> 01:48:22,159
so before that i would like you to

2390
01:48:22,159 --> 01:48:25,280
understand what says so what we are

2391
01:48:25,280 --> 01:48:26,639
actually doing for the scenario is like

2392
01:48:26,639 --> 01:48:28,719
we ourselves creating uh one test

2393
01:48:28,719 --> 01:48:31,440
environment we are deploying a pod

2394
01:48:31,440 --> 01:48:33,040
called container called monitoring and

2395
01:48:33,040 --> 01:48:35,040
the base image is alpine however what we

2396
01:48:35,040 --> 01:48:37,440
are doing is we are mounting the docker

2397
01:48:37,440 --> 01:48:40,639
socket where slash run folder

2398
01:48:40,639 --> 01:48:43,119
of the host onto the container so what

2399
01:48:43,119 --> 01:48:46,800
this means we will check it so cube ctl

2400
01:48:46,800 --> 01:48:49,280
get po

2401
01:48:49,280 --> 01:48:51,199
yep the pod monitoring is up and running

2402
01:48:51,199 --> 01:48:55,440
now let's quickly exit into this pod

2403
01:48:57,040 --> 01:49:00,800
cube cpl exit iphone id monitoring

2404
01:49:00,800 --> 01:49:02,639
bash awesome perfect we are inside the

2405
01:49:02,639 --> 01:49:04,080
board

2406
01:49:04,080 --> 01:49:06,320
so after enumerating the folders for a

2407
01:49:06,320 --> 01:49:08,960
while the attacker

2408
01:49:08,960 --> 01:49:11,199
gets into the web slash run

2409
01:49:11,199 --> 01:49:12,400
folder

2410
01:49:12,400 --> 01:49:13,920
and then he identifies something called

2411
01:49:13,920 --> 01:49:17,119
docker.socket so after uh doing a bit of

2412
01:49:17,119 --> 01:49:18,719
research the attacker gets to know that

2413
01:49:18,719 --> 01:49:20,320
when there is a docker socket mounted

2414
01:49:20,320 --> 01:49:22,080
onto a container he identifies how to

2415
01:49:22,080 --> 01:49:24,000
play with it and how to gain

2416
01:49:24,000 --> 01:49:26,480
access to actually the underlying post

2417
01:49:26,480 --> 01:49:28,719
so let us see what happens so you can

2418
01:49:28,719 --> 01:49:30,480
use different ways to interact with this

2419
01:49:30,480 --> 01:49:32,639
uh docker dot socket you can use curl

2420
01:49:32,639 --> 01:49:33,760
and then you can use different other

2421
01:49:33,760 --> 01:49:35,040
clients but

2422
01:49:35,040 --> 01:49:36,560
based on my experience what i would

2423
01:49:36,560 --> 01:49:38,320
simply do is

2424
01:49:38,320 --> 01:49:40,960
i would add the docker binary to make my

2425
01:49:40,960 --> 01:49:42,719
life easier it's just one simple command

2426
01:49:42,719 --> 01:49:45,679
apk add docker

2427
01:49:46,159 --> 01:49:47,920
just remember that you are running

2428
01:49:47,920 --> 01:49:51,760
inside a pod you're not on the host

2429
01:49:52,960 --> 01:49:53,760
so

2430
01:49:53,760 --> 01:49:55,520
we already have a docker running on the

2431
01:49:55,520 --> 01:49:58,159
host however now inside another

2432
01:49:58,159 --> 01:49:59,840
container we have installed the docker

2433
01:49:59,840 --> 01:50:01,920
binary again so this is called

2434
01:50:01,920 --> 01:50:05,119
docker and docker attack sometimes so

2435
01:50:05,119 --> 01:50:06,480
now

2436
01:50:06,480 --> 01:50:08,320
using the docker client that i have

2437
01:50:08,320 --> 01:50:10,239
installed i'll be showing the all the

2438
01:50:10,239 --> 01:50:11,760
basic commands like docker images there

2439
01:50:11,760 --> 01:50:15,840
you go we are running inside

2440
01:50:17,280 --> 01:50:19,119
we are running inside a container

2441
01:50:19,119 --> 01:50:21,679
however we are able to access with the

2442
01:50:21,679 --> 01:50:23,280
underlying host and the underlying

2443
01:50:23,280 --> 01:50:26,960
images so from here needless to say

2444
01:50:26,960 --> 01:50:28,880
what you can do it's it's completely up

2445
01:50:28,880 --> 01:50:30,400
to you you can run different containers

2446
01:50:30,400 --> 01:50:32,159
you can grab reverse shells you can

2447
01:50:32,159 --> 01:50:33,520
delete images

2448
01:50:33,520 --> 01:50:35,920
and also one thing i would always do is

2449
01:50:35,920 --> 01:50:38,400
like exfiltrate the images for that what

2450
01:50:38,400 --> 01:50:42,000
i would do is you can just uh

2451
01:50:42,159 --> 01:50:43,280
simply

2452
01:50:43,280 --> 01:50:45,119
docker use the command called docker

2453
01:50:45,119 --> 01:50:47,119
login using your

2454
01:50:47,119 --> 01:50:49,520
personal credentials and once your login

2455
01:50:49,520 --> 01:50:51,920
you can just steal the images that in

2456
01:50:51,920 --> 01:50:53,599
this corporate world you can just steal

2457
01:50:53,599 --> 01:50:55,040
them into your private account upload

2458
01:50:55,040 --> 01:50:56,480
them into your private account and then

2459
01:50:56,480 --> 01:50:57,920
pull them onto your local machine

2460
01:50:57,920 --> 01:50:59,119
sometime later and do all the

2461
01:50:59,119 --> 01:51:01,679
acceleration stuff so how to do it

2462
01:51:01,679 --> 01:51:04,080
everything is given in the document so

2463
01:51:04,080 --> 01:51:05,360
you can go through it and you can try

2464
01:51:05,360 --> 01:51:06,719
the stuff these are the basic commands

2465
01:51:06,719 --> 01:51:08,400
that we have learned before like docker

2466
01:51:08,400 --> 01:51:10,480
pull docker inspect you can play with

2467
01:51:10,480 --> 01:51:12,000
all the stuff and you have the commands

2468
01:51:12,000 --> 01:51:15,199
exactly to do it in the documentation

2469
01:51:15,199 --> 01:51:17,360
so i will move on to like the next

2470
01:51:17,360 --> 01:51:19,520
scenario which is like now we have so

2471
01:51:19,520 --> 01:51:21,119
far we have seen attacking the master

2472
01:51:21,119 --> 01:51:22,800
nodes now we will try to attack the

2473
01:51:22,800 --> 01:51:24,639
worker nodes so we will see how we can

2474
01:51:24,639 --> 01:51:27,840
actually gain access to the worker nodes

2475
01:51:27,840 --> 01:51:31,520
i'll quickly exit out of this

2476
01:51:33,360 --> 01:51:36,250
i have created a file for you

2477
01:51:36,250 --> 01:51:38,480
[Music]

2478
01:51:38,480 --> 01:51:39,360
just

2479
01:51:39,360 --> 01:51:41,760
download that one from the github you

2480
01:51:41,760 --> 01:51:45,639
can use this url

2481
01:51:59,199 --> 01:52:01,199
i will show you how to gain access to

2482
01:52:01,199 --> 01:52:02,960
one of the worker nodes that are running

2483
01:52:02,960 --> 01:52:05,760
inside the cluster

2484
01:52:07,760 --> 01:52:09,520
and these attacks may not be just be

2485
01:52:09,520 --> 01:52:11,360
done by an attacker is always attacking

2486
01:52:11,360 --> 01:52:13,520
from an external party or it could

2487
01:52:13,520 --> 01:52:15,040
always be some pentesters coming inside

2488
01:52:15,040 --> 01:52:17,440
your intro or even the developers who

2489
01:52:17,440 --> 01:52:18,800
actually work with you like day in and

2490
01:52:18,800 --> 01:52:21,040
day out if by mistake if you give some

2491
01:52:21,040 --> 01:52:22,560
additional privileges developer can

2492
01:52:22,560 --> 01:52:24,159
always abuse them developers are like

2493
01:52:24,159 --> 01:52:26,639
techie savvys they are way more uh

2494
01:52:26,639 --> 01:52:28,560
technical and knowledgeable than

2495
01:52:28,560 --> 01:52:29,760
the pentesters or the security

2496
01:52:29,760 --> 01:52:31,199
professionals because they are the one

2497
01:52:31,199 --> 01:52:33,440
who actually built the stuff

2498
01:52:33,440 --> 01:52:35,440
so let us see what we have on the shell

2499
01:52:35,440 --> 01:52:37,520
on node.sh

2500
01:52:37,520 --> 01:52:39,520
so basically i'm just not doing nothing

2501
01:52:39,520 --> 01:52:41,920
but creating a power or a container i'm

2502
01:52:41,920 --> 01:52:43,119
using the command

2503
01:52:43,119 --> 01:52:45,360
called an image called nsender and i'm

2504
01:52:45,360 --> 01:52:48,320
using i'm leaving it to you like what ns

2505
01:52:48,320 --> 01:52:50,320
enter means what innercenter does just

2506
01:52:50,320 --> 01:52:51,920
do a bit of research

2507
01:52:51,920 --> 01:52:53,520
but also i want you to understand that

2508
01:52:53,520 --> 01:52:55,119
i'm passing a flag called privileged

2509
01:52:55,119 --> 01:52:58,519
equal to true

2510
01:53:01,679 --> 01:53:04,400
so what i will do is first let me

2511
01:53:04,400 --> 01:53:06,400
identify the nodes that are running

2512
01:53:06,400 --> 01:53:08,560
inside

2513
01:53:08,560 --> 01:53:11,280
the nodes okay for example let us say i

2514
01:53:11,280 --> 01:53:13,280
want to gain access to like the master

2515
01:53:13,280 --> 01:53:14,159
node

2516
01:53:14,159 --> 01:53:17,119
so what i will do is

2517
01:53:17,679 --> 01:53:21,199
dot sh and just pass the node

2518
01:53:21,199 --> 01:53:23,119
and hopefully after some time in a few

2519
01:53:23,119 --> 01:53:25,119
seconds we should get the shell on that

2520
01:53:25,119 --> 01:53:27,839
one

2521
01:53:29,360 --> 01:53:31,199
oh cool there we go

2522
01:53:31,199 --> 01:53:33,440
it says now we when we run the command

2523
01:53:33,440 --> 01:53:35,840
we are running from the host

2524
01:53:35,840 --> 01:53:37,920
but now we are inside the control plane

2525
01:53:37,920 --> 01:53:40,000
we got the shell on one of the worker

2526
01:53:40,000 --> 01:53:42,320
notes so this way the depths the devs

2527
01:53:42,320 --> 01:53:43,679
who have like limited axes or even a

2528
01:53:43,679 --> 01:53:45,440
pentesters who had like limited axes or

2529
01:53:45,440 --> 01:53:47,360
even an attacker can always gain access

2530
01:53:47,360 --> 01:53:49,440
to like the master nor or any other

2531
01:53:49,440 --> 01:53:50,800
nodes so

2532
01:53:50,800 --> 01:53:52,320
being an attacker once again access to

2533
01:53:52,320 --> 01:53:53,679
the master my target would be to

2534
01:53:53,679 --> 01:53:55,360
exfiltrate and

2535
01:53:55,360 --> 01:53:56,880
explore different sections different

2536
01:53:56,880 --> 01:53:59,360
folders

2537
01:53:59,760 --> 01:54:02,320
first name

2538
01:54:06,840 --> 01:54:11,520
id there will be some juicy folders on

2539
01:54:11,520 --> 01:54:13,760
the master node this is

2540
01:54:13,760 --> 01:54:14,800
very

2541
01:54:14,800 --> 01:54:18,159
good to keep and note

2542
01:54:19,040 --> 01:54:21,679
series slashes slash kubernetes and well

2543
01:54:21,679 --> 01:54:23,280
there you go these are some juicy files

2544
01:54:23,280 --> 01:54:25,520
for you to keep an out of it just keep

2545
01:54:25,520 --> 01:54:27,840
exploring the stuff admin.com will give

2546
01:54:27,840 --> 01:54:29,920
you huge information about you you can

2547
01:54:29,920 --> 01:54:32,080
have literally like you can take a copy

2548
01:54:32,080 --> 01:54:33,760
of this config file and like we have

2549
01:54:33,760 --> 01:54:35,679
seen before you can pass this config

2550
01:54:35,679 --> 01:54:37,040
file and keep interacting with the

2551
01:54:37,040 --> 01:54:38,639
cluster

2552
01:54:38,639 --> 01:54:40,119
or there are some other stuff like

2553
01:54:40,119 --> 01:54:42,560
cubelet.config manifestpki i'm leaving

2554
01:54:42,560 --> 01:54:44,080
it to you to explore what this does to

2555
01:54:44,080 --> 01:54:45,440
what extent you can go using this

2556
01:54:45,440 --> 01:54:47,280
information

2557
01:54:47,280 --> 01:54:48,840
i'll just quickly

2558
01:54:48,840 --> 01:54:51,360
exit so likewise

2559
01:54:51,360 --> 01:54:52,639
if you want to

2560
01:54:52,639 --> 01:54:54,000
attack some other thing for example let

2561
01:54:54,000 --> 01:54:55,679
us quickly see how we can gain access to

2562
01:54:55,679 --> 01:54:57,360
this node

2563
01:54:57,360 --> 01:54:59,599
bash

2564
01:54:59,599 --> 01:55:02,239
and spinning up same command

2565
01:55:02,239 --> 01:55:04,400
in the next few seconds i should have a

2566
01:55:04,400 --> 01:55:07,839
shell on the other worker node

2567
01:55:10,320 --> 01:55:11,840
there we go and this time we have like

2568
01:55:11,840 --> 01:55:14,000
the shell on the worker node

2569
01:55:14,000 --> 01:55:15,599
so i'll leave it to you to export the

2570
01:55:15,599 --> 01:55:17,520
rest of the stuff so that's how you can

2571
01:55:17,520 --> 01:55:19,840
actually gain access to like the worker

2572
01:55:19,840 --> 01:55:21,199
nodes directly in sometimes when you

2573
01:55:21,199 --> 01:55:22,880
don't have access to like the master

2574
01:55:22,880 --> 01:55:24,960
node or the api server you can directly

2575
01:55:24,960 --> 01:55:27,119
gain access to this one

2576
01:55:27,119 --> 01:55:29,360
so now the other important stuff is like

2577
01:55:29,360 --> 01:55:31,199
the xcd we will see how to attack the

2578
01:55:31,199 --> 01:55:34,000
xcd client this is like another

2579
01:55:34,000 --> 01:55:35,199
uh

2580
01:55:35,199 --> 01:55:37,360
critical uh thing for the kubernetes

2581
01:55:37,360 --> 01:55:39,199
cluster

2582
01:55:39,199 --> 01:55:40,239
so

2583
01:55:40,239 --> 01:55:42,560
the setup has already been done for you

2584
01:55:42,560 --> 01:55:44,639
so if you give the command call cube cpl

2585
01:55:44,639 --> 01:55:46,639
get po there is something called lcd

2586
01:55:46,639 --> 01:55:47,920
client

2587
01:55:47,920 --> 01:55:50,000
let us see i have given some more

2588
01:55:50,000 --> 01:55:51,599
commands how to interact with that cd

2589
01:55:51,599 --> 01:55:54,159
client we use a binary call

2590
01:55:54,159 --> 01:55:57,119
at cd ctl like cube ctl we use that

2591
01:55:57,119 --> 01:55:59,520
cdcdl to interact with that cd client

2592
01:55:59,520 --> 01:56:03,679
so we passed the commands there we go

2593
01:56:04,000 --> 01:56:06,239
flying and this is the server

2594
01:56:06,239 --> 01:56:08,800
and now let us try to extract some keys

2595
01:56:08,800 --> 01:56:10,560
from the xcd client

2596
01:56:10,560 --> 01:56:12,000
there you go it is listing all the

2597
01:56:12,000 --> 01:56:14,480
secrets that are available inside the

2598
01:56:14,480 --> 01:56:16,880
xcd so again pretty much what i do is

2599
01:56:16,880 --> 01:56:19,520
like as an attacker i try to enumerate

2600
01:56:19,520 --> 01:56:21,760
each and every ck secret and find out

2601
01:56:21,760 --> 01:56:23,119
which secret has got like highest

2602
01:56:23,119 --> 01:56:24,320
privileges

2603
01:56:24,320 --> 01:56:25,119
uh

2604
01:56:25,119 --> 01:56:26,719
how i would do is you can just write a

2605
01:56:26,719 --> 01:56:28,159
small bash script or a python script to

2606
01:56:28,159 --> 01:56:31,040
automate the stuff

2607
01:56:31,199 --> 01:56:32,239
so

2608
01:56:32,239 --> 01:56:33,760
cube system for example i want to

2609
01:56:33,760 --> 01:56:35,199
explore one of the secrets in the cube

2610
01:56:35,199 --> 01:56:37,280
system for example this one

2611
01:56:37,280 --> 01:56:40,559
pod garbage collector

2612
01:56:41,679 --> 01:56:43,840
that way you can you will get in the

2613
01:56:43,840 --> 01:56:46,159
namespace this is the token so pretty

2614
01:56:46,159 --> 01:56:47,520
much you can keep exploring like

2615
01:56:47,520 --> 01:56:51,119
different uh secrets and enumerate and

2616
01:56:51,119 --> 01:56:52,639
keep hunting for the token which has got

2617
01:56:52,639 --> 01:56:55,360
like high privileges

2618
01:56:55,360 --> 01:56:57,920
so this is how you can attack or exploit

2619
01:56:57,920 --> 01:56:59,520
the fcd cluster and there are different

2620
01:56:59,520 --> 01:57:00,800
other things that you can still do with

2621
01:57:00,800 --> 01:57:03,440
the lcd stuff but um i'm just leaving it

2622
01:57:03,440 --> 01:57:06,000
to you to explore the rest of the stuff

2623
01:57:06,000 --> 01:57:07,280
and there are like few other techniques

2624
01:57:07,280 --> 01:57:08,800
that i have listed in the documentation

2625
01:57:08,800 --> 01:57:12,320
please try those steps as well

2626
01:57:15,119 --> 01:57:18,560
and we have one important thing called

2627
01:57:18,560 --> 01:57:20,320
how like the crypto mining attacks

2628
01:57:20,320 --> 01:57:21,920
happen but i would like to show like the

2629
01:57:21,920 --> 01:57:23,679
crypto mining along with the monitoring

2630
01:57:23,679 --> 01:57:25,440
stuff that way we can also attack and

2631
01:57:25,440 --> 01:57:27,440
also monitor at the same time so i will

2632
01:57:27,440 --> 01:57:29,599
leave that scenario to the last one

2633
01:57:29,599 --> 01:57:31,760
so well that pretty much covers the

2634
01:57:31,760 --> 01:57:34,719
attacking scenario and after this we

2635
01:57:34,719 --> 01:57:36,480
will be looking into like the defending

2636
01:57:36,480 --> 01:57:38,080
stuff

2637
01:57:38,080 --> 01:57:39,520
we'll be looking into like the

2638
01:57:39,520 --> 01:57:41,040
role-based access controls we'll be

2639
01:57:41,040 --> 01:57:42,639
looking into network policies we will be

2640
01:57:42,639 --> 01:57:44,480
looking into security context admission

2641
01:57:44,480 --> 01:57:46,159
controllers and especially like the open

2642
01:57:46,159 --> 01:57:47,520
policy agents how do we use them for

2643
01:57:47,520 --> 01:57:48,880
defending these kind of attacks inside

2644
01:57:48,880 --> 01:57:50,159
the cluster

2645
01:57:50,159 --> 01:57:52,560
so i just need to have a quick five

2646
01:57:52,560 --> 01:57:54,239
minute break and i'll catch up with you

2647
01:57:54,239 --> 01:57:55,679
in exactly five minutes and we will go

2648
01:57:55,679 --> 01:57:59,480
ahead with the rest of the stuff

2649
01:58:34,320 --> 01:58:37,440
uh i'm back guys let's start with

2650
01:58:37,440 --> 01:58:41,280
the role based called our back

2651
01:58:47,760 --> 01:58:49,920
so well uh our bike is like a key

2652
01:58:49,920 --> 01:58:51,440
security feature that protects your

2653
01:58:51,440 --> 01:58:53,679
cluster by allowing you to control who

2654
01:58:53,679 --> 01:58:57,440
can access specific api resources

2655
01:58:57,440 --> 01:58:59,840
like we have seen before uh the attacker

2656
01:58:59,840 --> 01:59:01,520
was able to impersonate as a different

2657
01:59:01,520 --> 01:59:02,400
user

2658
01:59:02,400 --> 01:59:03,920
and we also

2659
01:59:03,920 --> 01:59:05,760
able to access the cluster anonymously

2660
01:59:05,760 --> 01:59:07,599
without any authentication authorization

2661
01:59:07,599 --> 01:59:09,280
we will see how we can actually restrict

2662
01:59:09,280 --> 01:59:11,520
these things using our back

2663
01:59:11,520 --> 01:59:13,280
so in cuban means everything is a

2664
01:59:13,280 --> 01:59:16,639
resource the pods nodes services service

2665
01:59:16,639 --> 01:59:18,719
accounts and all the rest but these

2666
01:59:18,719 --> 01:59:20,320
resources don't have ownership of

2667
01:59:20,320 --> 01:59:22,320
permission attributes instead there are

2668
01:59:22,320 --> 01:59:24,080
like additional levels of abstraction

2669
01:59:24,080 --> 01:59:26,560
called a role which will define the

2670
01:59:26,560 --> 01:59:27,599
rules

2671
01:59:27,599 --> 01:59:30,159
that specify a set of resources and also

2672
01:59:30,159 --> 01:59:31,679
set of words

2673
01:59:31,679 --> 01:59:33,679
like the actions that one can take on

2674
01:59:33,679 --> 01:59:36,480
those objects and the role binding links

2675
01:59:36,480 --> 01:59:38,639
a role to our identity this might be a

2676
01:59:38,639 --> 01:59:41,440
user a group or a service this will

2677
01:59:41,440 --> 01:59:44,239
actually complete the whole part

2678
01:59:44,239 --> 01:59:46,480
so the roles and the role mindings apply

2679
01:59:46,480 --> 01:59:48,320
to the name space level

2680
01:59:48,320 --> 01:59:50,159
there are also cluster wide equivalence

2681
01:59:50,159 --> 01:59:51,760
called cluster roles and the cluster

2682
01:59:51,760 --> 01:59:53,199
role bindings as the name implies

2683
01:59:53,199 --> 01:59:54,719
cluster role in the cluster rule mining

2684
01:59:54,719 --> 01:59:56,840
supply and the

2685
01:59:56,840 --> 01:59:59,280
clusterable so let us play with some

2686
01:59:59,280 --> 02:00:00,719
basic stuff

2687
02:00:00,719 --> 02:00:02,719
the roles and role bindings

2688
02:00:02,719 --> 02:00:05,719
so

2689
02:00:22,719 --> 02:00:24,800
cool so i want you to all to get into

2690
02:00:24,800 --> 02:00:28,320
this folder which says like root code

2691
02:00:28,320 --> 02:00:29,920
base

2692
02:00:29,920 --> 02:00:32,080
and then the files

2693
02:00:32,080 --> 02:00:33,280
and then we have a folder called

2694
02:00:33,280 --> 02:00:35,760
powerpack

2695
02:00:35,760 --> 02:00:37,760
we'll be looking into some different

2696
02:00:37,760 --> 02:00:39,760
stuff and

2697
02:00:39,760 --> 02:00:42,080
so let us start by we have already seen

2698
02:00:42,080 --> 02:00:43,840
this before however i would like to give

2699
02:00:43,840 --> 02:00:45,920
you an example let us start by creating

2700
02:00:45,920 --> 02:00:48,480
a name space called our bike example in

2701
02:00:48,480 --> 02:00:50,000
the namespace in which we will be trying

2702
02:00:50,000 --> 02:00:52,239
all the stuff and i will create a

2703
02:00:52,239 --> 02:00:54,960
service account called a dev user cube

2704
02:00:54,960 --> 02:00:56,880
ctl create service account in the name

2705
02:00:56,880 --> 02:00:59,199
space our bank example called dev user

2706
02:00:59,199 --> 02:01:01,040
likewise i'll also create another

2707
02:01:01,040 --> 02:01:02,960
service account which is called admin

2708
02:01:02,960 --> 02:01:05,440
user cool now i have a name space called

2709
02:01:05,440 --> 02:01:07,440
our bike example and two users a dev

2710
02:01:07,440 --> 02:01:10,080
user and an admin user

2711
02:01:10,080 --> 02:01:12,000
and also we have seen in the document i

2712
02:01:12,000 --> 02:01:13,599
have provided if you want to impersonate

2713
02:01:13,599 --> 02:01:15,679
we use the command called iphone hyphen

2714
02:01:15,679 --> 02:01:17,280
as

2715
02:01:17,280 --> 02:01:19,519
so

2716
02:01:19,599 --> 02:01:20,880
i'm going to

2717
02:01:20,880 --> 02:01:23,199
set some alias

2718
02:01:23,199 --> 02:01:25,360
so going forward if i issue the command

2719
02:01:25,360 --> 02:01:27,679
called cube ctrl iphone admin i am

2720
02:01:27,679 --> 02:01:29,520
giving this command as a normal user as

2721
02:01:29,520 --> 02:01:32,320
an admin user

2722
02:01:32,480 --> 02:01:36,199
i'm setting up

2723
02:01:38,000 --> 02:01:42,000
another alias are back i think

2724
02:01:42,000 --> 02:01:44,080
example which is like

2725
02:01:44,080 --> 02:01:47,840
see if i run the command as uh

2726
02:01:47,840 --> 02:01:49,920
cube ct life and user so i'm running the

2727
02:01:49,920 --> 02:01:51,760
command knife and as system service

2728
02:01:51,760 --> 02:01:54,639
account as a dev user so going forward

2729
02:01:54,639 --> 02:01:56,320
if i issue something called cube ctl

2730
02:01:56,320 --> 02:01:57,840
life and user i'm running in the context

2731
02:01:57,840 --> 02:02:00,159
of dev user if i give cube city life

2732
02:02:00,159 --> 02:02:03,199
admin i'm running as an admin user

2733
02:02:03,199 --> 02:02:05,040
so just to make the lives easier to make

2734
02:02:05,040 --> 02:02:06,880
the command short i'm just setting up

2735
02:02:06,880 --> 02:02:09,360
values

2736
02:02:09,360 --> 02:02:12,000
so let us try some quick examples as an

2737
02:02:12,000 --> 02:02:14,320
admin cube sql admin

2738
02:02:14,320 --> 02:02:16,800
get po yes because an admin have all the

2739
02:02:16,800 --> 02:02:19,599
privileges and they can get everything

2740
02:02:19,599 --> 02:02:22,159
now let us try the same stuff using a

2741
02:02:22,159 --> 02:02:23,520
cube ctl

2742
02:02:23,520 --> 02:02:26,320
as a normal user

2743
02:02:26,320 --> 02:02:27,679
not because

2744
02:02:27,679 --> 02:02:29,840
the user cannot list their user does not

2745
02:02:29,840 --> 02:02:30,840
have enough

2746
02:02:30,840 --> 02:02:33,040
privileges or

2747
02:02:33,040 --> 02:02:34,320
let us see

2748
02:02:34,320 --> 02:02:36,560
remove iphone a and just see like the

2749
02:02:36,560 --> 02:02:39,119
bots no still the

2750
02:02:39,119 --> 02:02:42,159
the user doesn't have enough privileges

2751
02:02:42,159 --> 02:02:44,719
so what do we do how do we provide

2752
02:02:44,719 --> 02:02:47,360
privileges to your user or how do we

2753
02:02:47,360 --> 02:02:48,960
delete some privileges to you so we will

2754
02:02:48,960 --> 02:02:50,639
be looking into this stuff so i have

2755
02:02:50,639 --> 02:02:52,320
already created certain examples for you

2756
02:02:52,320 --> 02:02:54,960
let us start with one called role let us

2757
02:02:54,960 --> 02:02:57,760
start let us look at an role

2758
02:02:57,760 --> 02:02:59,199
so let us

2759
02:02:59,199 --> 02:03:01,440
see what this role has so in the kind

2760
02:03:01,440 --> 02:03:04,400
role like i mentioned you provide the

2761
02:03:04,400 --> 02:03:05,920
resources

2762
02:03:05,920 --> 02:03:08,400
to what resources and what kind of

2763
02:03:08,400 --> 02:03:11,199
actions a user can do so this role says

2764
02:03:11,199 --> 02:03:13,440
that anyone who has this role attached

2765
02:03:13,440 --> 02:03:17,440
will be able to list and get secrets

2766
02:03:17,440 --> 02:03:21,519
so next one is role binding

2767
02:03:22,159 --> 02:03:24,400
so what this role binding says is i have

2768
02:03:24,400 --> 02:03:26,800
created a user called dev user

2769
02:03:26,800 --> 02:03:28,320
in the namespace called arbitration

2770
02:03:28,320 --> 02:03:30,880
example and attach the role that we are

2771
02:03:30,880 --> 02:03:32,800
creating to create role get secrets

2772
02:03:32,800 --> 02:03:35,360
above to this particular user so when

2773
02:03:35,360 --> 02:03:37,119
this is implemented

2774
02:03:37,119 --> 02:03:39,599
the dev user will be able to access

2775
02:03:39,599 --> 02:03:41,920
secrets list and get let us just quickly

2776
02:03:41,920 --> 02:03:43,280
apply them and see

2777
02:03:43,280 --> 02:03:45,119
so

2778
02:03:45,119 --> 02:03:48,639
cube cdl and admin apply secrets

2779
02:03:48,639 --> 02:03:52,000
i initially applied the role

2780
02:03:52,800 --> 02:03:55,280
now i'm applying the role binding

2781
02:03:55,280 --> 02:03:58,639
now the user should be able to get

2782
02:03:58,639 --> 02:04:00,159
or the normal user should be able to

2783
02:04:00,159 --> 02:04:01,520
access tickets

2784
02:04:01,520 --> 02:04:04,320
there we go cube ctl user get secrets

2785
02:04:04,320 --> 02:04:05,679
earlier he was not able to access

2786
02:04:05,679 --> 02:04:07,199
anything but now he is able to access

2787
02:04:07,199 --> 02:04:09,040
the secrets because of the words list

2788
02:04:09,040 --> 02:04:11,440
and get secrets and if you observe one

2789
02:04:11,440 --> 02:04:13,760
thing we have restricted the privileges

2790
02:04:13,760 --> 02:04:16,159
only to that namespace the attacker can

2791
02:04:16,159 --> 02:04:18,480
access the secrets in the name space

2792
02:04:18,480 --> 02:04:19,920
which we have created our backlight for

2793
02:04:19,920 --> 02:04:20,960
example

2794
02:04:20,960 --> 02:04:22,719
he won't be able to access secrets in

2795
02:04:22,719 --> 02:04:24,719
any other name space or for example if

2796
02:04:24,719 --> 02:04:27,199
you just pass the flag iphone a

2797
02:04:27,199 --> 02:04:29,119
there we go still the attacker cannot

2798
02:04:29,119 --> 02:04:30,719
commit the user the dev user cannot

2799
02:04:30,719 --> 02:04:32,000
access the secrets because it does not

2800
02:04:32,000 --> 02:04:34,239
have privileges so this is how and this

2801
02:04:34,239 --> 02:04:35,119
is

2802
02:04:35,119 --> 02:04:37,119
where we actually use the role based

2803
02:04:37,119 --> 02:04:39,199
access controls to limit the access this

2804
02:04:39,199 --> 02:04:40,400
is pretty much

2805
02:04:40,400 --> 02:04:42,079
like the users and the groups that we

2806
02:04:42,079 --> 02:04:44,800
have in the active directory

2807
02:04:44,800 --> 02:04:46,560
this is at the namespace level now let's

2808
02:04:46,560 --> 02:04:48,800
look at a quick example at the cluster

2809
02:04:48,800 --> 02:04:51,800
level

2810
02:04:52,400 --> 02:04:54,560
so let us i have a

2811
02:04:54,560 --> 02:04:57,920
cluster role called get ports which says

2812
02:04:57,920 --> 02:05:00,000
we we didn't define the name space name

2813
02:05:00,000 --> 02:05:02,159
space is only since cluster roles are

2814
02:05:02,159 --> 02:05:03,440
not name space

2815
02:05:03,440 --> 02:05:05,679
so to anyone

2816
02:05:05,679 --> 02:05:07,199
to whom this role is attached they will

2817
02:05:07,199 --> 02:05:08,800
be able to get to watch and list at the

2818
02:05:08,800 --> 02:05:10,960
ports across the cluster level and we

2819
02:05:10,960 --> 02:05:12,960
also see called

2820
02:05:12,960 --> 02:05:15,360
cluster role mining so i'm saying hey

2821
02:05:15,360 --> 02:05:16,960
attach this

2822
02:05:16,960 --> 02:05:18,560
role whatever i'm going to create about

2823
02:05:18,560 --> 02:05:21,360
the pod reader to the user called their

2824
02:05:21,360 --> 02:05:23,599
wife and user who exists inside the name

2825
02:05:23,599 --> 02:05:25,840
system called l back as an example so

2826
02:05:25,840 --> 02:05:30,199
let me quickly apply these things

2827
02:05:34,560 --> 02:05:36,800
i have created the role

2828
02:05:36,800 --> 02:05:39,280
now i'm also creating the role binding

2829
02:05:39,280 --> 02:05:41,440
and now let us see as a normal user will

2830
02:05:41,440 --> 02:05:43,360
he be able to access the pods or not

2831
02:05:43,360 --> 02:05:45,440
there we go initially the normal user

2832
02:05:45,440 --> 02:05:47,280
the cube ct like a normal user or the

2833
02:05:47,280 --> 02:05:48,880
dev user couldn't access the ports but

2834
02:05:48,880 --> 02:05:50,480
now because of this role binding he was

2835
02:05:50,480 --> 02:05:52,239
able to access all the ports so that's

2836
02:05:52,239 --> 02:05:53,840
how we actually use the roles and role

2837
02:05:53,840 --> 02:05:56,719
bindings to restrict the access so

2838
02:05:56,719 --> 02:05:58,320
previously there was a scenario where

2839
02:05:58,320 --> 02:05:59,840
there was like anonymous access to the

2840
02:05:59,840 --> 02:06:01,840
cluster so how did that happen i have

2841
02:06:01,840 --> 02:06:03,679
created a file called anonymous access

2842
02:06:03,679 --> 02:06:06,000
so in this scenario if you look at there

2843
02:06:06,000 --> 02:06:07,920
is a role called cluster admin role

2844
02:06:07,920 --> 02:06:09,440
which comes with the kubernetes cluster

2845
02:06:09,440 --> 02:06:11,040
by default every time you spin up a

2846
02:06:11,040 --> 02:06:12,320
kubernetes cluster you will have this

2847
02:06:12,320 --> 02:06:14,400
role called cluster admin and what i'm

2848
02:06:14,400 --> 02:06:16,000
doing is i'm attaching this cluster

2849
02:06:16,000 --> 02:06:17,520
admin role to a group called system

2850
02:06:17,520 --> 02:06:19,040
anonymously a user called system

2851
02:06:19,040 --> 02:06:20,560
anonymous that is the reason why the

2852
02:06:20,560 --> 02:06:23,119
attacker initially we were able to hack

2853
02:06:23,119 --> 02:06:25,040
or play with the kubernetes cluster

2854
02:06:25,040 --> 02:06:28,000
using anonymous access

2855
02:06:28,639 --> 02:06:31,440
so in order to see that stuff cube cdl

2856
02:06:31,440 --> 02:06:34,000
get roll bindings we are exploring the

2857
02:06:34,000 --> 02:06:35,920
rule binding the iphone a

2858
02:06:35,920 --> 02:06:39,280
so these are the role bindings

2859
02:06:42,800 --> 02:06:46,880
uh it should be cluster roll bindings

2860
02:06:49,840 --> 02:06:51,760
there is something called anonymous

2861
02:06:51,760 --> 02:06:55,760
review access which we have created

2862
02:06:55,760 --> 02:06:59,159
let us see

2863
02:06:59,360 --> 02:07:02,880
qcdl get

2864
02:07:03,840 --> 02:07:06,719
the role binding

2865
02:07:07,679 --> 02:07:08,800
there we go

2866
02:07:08,800 --> 02:07:10,639
so this there is something that exists

2867
02:07:10,639 --> 02:07:12,480
inside the cluster

2868
02:07:12,480 --> 02:07:14,639
it says like hey we are providing like

2869
02:07:14,639 --> 02:07:16,400
cluster admin access to like the user

2870
02:07:16,400 --> 02:07:18,480
system anonymous that's the reason why

2871
02:07:18,480 --> 02:07:20,480
it was able to how we how we actually

2872
02:07:20,480 --> 02:07:21,920
prevent from this one

2873
02:07:21,920 --> 02:07:24,159
just keep enumerating and testing for

2874
02:07:24,159 --> 02:07:25,679
privileged roles and eliminate these

2875
02:07:25,679 --> 02:07:27,360
kind of holes if you relate this if you

2876
02:07:27,360 --> 02:07:28,880
delete this role binding you won't be

2877
02:07:28,880 --> 02:07:30,880
able to anonymously access the cluster i

2878
02:07:30,880 --> 02:07:32,639
will leave it to you guys to test it and

2879
02:07:32,639 --> 02:07:34,639
i'll also tell you how to actually

2880
02:07:34,639 --> 02:07:36,079
implement these changes and test it

2881
02:07:36,079 --> 02:07:38,400
going forward please hold on

2882
02:07:38,400 --> 02:07:39,920
so that's pretty much here we are

2883
02:07:39,920 --> 02:07:41,599
covering like the roles and role

2884
02:07:41,599 --> 02:07:43,360
bindings at the name space level at the

2885
02:07:43,360 --> 02:07:44,800
cluster uh

2886
02:07:44,800 --> 02:07:46,480
level and we also have seen anonymous

2887
02:07:46,480 --> 02:07:48,560
level and i will also leave it to you

2888
02:07:48,560 --> 02:07:51,280
guys how to avoid the impersonation

2889
02:07:51,280 --> 02:07:54,280
stuff

2890
02:07:54,800 --> 02:07:57,850
[Music]

2891
02:08:05,760 --> 02:08:07,199
there's something called developer role

2892
02:08:07,199 --> 02:08:08,960
mining let us see

2893
02:08:08,960 --> 02:08:10,320
something else

2894
02:08:10,320 --> 02:08:13,480
i mean

2895
02:08:24,480 --> 02:08:26,000
oh yeah pretty much so that is how you

2896
02:08:26,000 --> 02:08:28,639
actually exploit or uh

2897
02:08:28,639 --> 02:08:29,840
take advantage of the additional

2898
02:08:29,840 --> 02:08:31,040
privileges and these are the different

2899
02:08:31,040 --> 02:08:32,400
ways you can actually restrict using

2900
02:08:32,400 --> 02:08:33,760
like the role based access control to

2901
02:08:33,760 --> 02:08:35,280
the cluster

2902
02:08:35,280 --> 02:08:36,400
so uh

2903
02:08:36,400 --> 02:08:39,920
let's quickly move on to

2904
02:08:44,079 --> 02:08:46,079
now let's move on to like

2905
02:08:46,079 --> 02:08:50,040
the network policy stuff

2906
02:08:52,159 --> 02:08:53,679
well basically the kubernetes network

2907
02:08:53,679 --> 02:08:55,199
policy lets uh

2908
02:08:55,199 --> 02:08:56,639
administrators and the developers

2909
02:08:56,639 --> 02:08:58,800
enforce which network is allowed uh

2910
02:08:58,800 --> 02:09:00,880
using the rules

2911
02:09:00,880 --> 02:09:02,560
so

2912
02:09:02,560 --> 02:09:04,560
kubernetes by default allows power to

2913
02:09:04,560 --> 02:09:07,040
board uh pods to communicate amongst uh

2914
02:09:07,040 --> 02:09:08,960
themselves for simplicity however you

2915
02:09:08,960 --> 02:09:10,880
can always use network security policies

2916
02:09:10,880 --> 02:09:12,639
and some interest rules and force a

2917
02:09:12,639 --> 02:09:13,760
tiered architecture within the

2918
02:09:13,760 --> 02:09:16,400
kubernetes well in simple terms network

2919
02:09:16,400 --> 02:09:18,639
security policy and kubernetes are like

2920
02:09:18,639 --> 02:09:20,960
a simple example or simple replica of

2921
02:09:20,960 --> 02:09:22,880
like the firewalls to let or block the

2922
02:09:22,880 --> 02:09:23,920
traffic

2923
02:09:23,920 --> 02:09:26,000
so we will get into some examples of

2924
02:09:26,000 --> 02:09:27,920
network policies this is going to be an

2925
02:09:27,920 --> 02:09:30,239
interesting example

2926
02:09:30,239 --> 02:09:33,040
so let us quickly look into one file and

2927
02:09:33,040 --> 02:09:36,719
see what we actually defined there

2928
02:09:38,880 --> 02:09:41,760
and before that i will quickly delete

2929
02:09:41,760 --> 02:09:43,599
cubectl

2930
02:09:43,599 --> 02:09:45,840
delete namespace our hyphen example

2931
02:09:45,840 --> 02:09:47,760
which i have created and that will

2932
02:09:47,760 --> 02:09:49,360
delete all the even the resources that

2933
02:09:49,360 --> 02:09:52,400
we have created there

2934
02:09:57,040 --> 02:10:00,040
less

2935
02:10:15,679 --> 02:10:16,960
so let us see

2936
02:10:16,960 --> 02:10:19,040
explore this manifestation file network

2937
02:10:19,040 --> 02:10:20,320
demo app

2938
02:10:20,320 --> 02:10:21,840
this seems to be pretty big file but

2939
02:10:21,840 --> 02:10:23,520
it's very easy if you understand what

2940
02:10:23,520 --> 02:10:26,000
i'm doing is i'm creating one deployment

2941
02:10:26,000 --> 02:10:28,400
which we have seen before i'm creating a

2942
02:10:28,400 --> 02:10:29,840
deployment

2943
02:10:29,840 --> 02:10:30,719
and

2944
02:10:30,719 --> 02:10:32,320
the name of the deployment is like api

2945
02:10:32,320 --> 02:10:34,000
deployment and this is the image that

2946
02:10:34,000 --> 02:10:36,239
i'm using so this is one deployment and

2947
02:10:36,239 --> 02:10:37,599
i'm creating a service for this

2948
02:10:37,599 --> 02:10:39,040
deployment services something which will

2949
02:10:39,040 --> 02:10:41,599
let us access the deployment that we are

2950
02:10:41,599 --> 02:10:42,480
creating

2951
02:10:42,480 --> 02:10:44,320
so there is like another deployment

2952
02:10:44,320 --> 02:10:46,719
called nginx deployment and i'm creating

2953
02:10:46,719 --> 02:10:49,280
another service for it so only two

2954
02:10:49,280 --> 02:10:50,800
things that i would like you to note in

2955
02:10:50,800 --> 02:10:53,440
this point is like the api deployment is

2956
02:10:53,440 --> 02:10:56,320
accessible on the port 3333 and the

2957
02:10:56,320 --> 02:10:57,840
nginx deployment is accessible on the

2958
02:10:57,840 --> 02:11:02,239
port 8808 80. so i will quickly apply

2959
02:11:02,239 --> 02:11:03,119
both

2960
02:11:03,119 --> 02:11:06,000
this file

2961
02:11:09,520 --> 02:11:11,920
so it says api deployment created api

2962
02:11:11,920 --> 02:11:14,239
service created nginx deployment created

2963
02:11:14,239 --> 02:11:15,679
engineering service creator it may take

2964
02:11:15,679 --> 02:11:17,679
just a minute or two to bring up this

2965
02:11:17,679 --> 02:11:18,880
parts

2966
02:11:18,880 --> 02:11:21,199
cube

2967
02:11:22,840 --> 02:11:26,000
ctl says container creating

2968
02:11:26,000 --> 02:11:28,159
nginx container creating it shouldn't

2969
02:11:28,159 --> 02:11:30,799
take too long

2970
02:11:32,880 --> 02:11:34,239
the api

2971
02:11:34,239 --> 02:11:37,520
api deployment is running and nginx

2972
02:11:37,520 --> 02:11:38,750
still creating

2973
02:11:38,750 --> 02:11:41,880
[Music]

2974
02:11:45,119 --> 02:11:47,199
so in order to see the

2975
02:11:47,199 --> 02:11:49,199
some flags we can use pass the flags

2976
02:11:49,199 --> 02:11:51,840
knife and selector app equal to api

2977
02:11:51,840 --> 02:11:54,719
so api is running and i'll pass one more

2978
02:11:54,719 --> 02:11:56,239
thing

2979
02:11:56,239 --> 02:11:58,000
engine x okay we have like both the

2980
02:11:58,000 --> 02:11:59,199
deployments that are up and running

2981
02:11:59,199 --> 02:12:01,199
nginx and the api that we are doing so

2982
02:12:01,199 --> 02:12:03,840
we will just check for a

2983
02:12:03,840 --> 02:12:04,960
connection

2984
02:12:04,960 --> 02:12:06,480
from the ancient export to the outer

2985
02:12:06,480 --> 02:12:07,360
world

2986
02:12:07,360 --> 02:12:10,239
cube cdl exec and i'll choose one of the

2987
02:12:10,239 --> 02:12:12,959
nginx pod

2988
02:12:18,480 --> 02:12:20,880
perfect from nginx we were able to reach

2989
02:12:20,880 --> 02:12:23,920
the external world

2990
02:12:26,000 --> 02:12:28,880
now let's see if we can reach out

2991
02:12:28,880 --> 02:12:30,400
to the api

2992
02:12:30,400 --> 02:12:33,040
from the nginx

2993
02:12:33,040 --> 02:12:34,719
remember we have created like the api

2994
02:12:34,719 --> 02:12:37,119
service on port 3333

2995
02:12:37,119 --> 02:12:38,800
there we go we are able to reach both

2996
02:12:38,800 --> 02:12:41,199
api and the external from nginx likewise

2997
02:12:41,199 --> 02:12:42,960
let us check also the connections from

2998
02:12:42,960 --> 02:12:44,560
uh the api

2999
02:12:44,560 --> 02:12:46,000
deployment

3000
02:12:46,000 --> 02:12:48,639
good cto api deployment and this is

3001
02:12:48,639 --> 02:12:50,560
where we go

3002
02:12:50,560 --> 02:12:52,560
and i will try to see if the api

3003
02:12:52,560 --> 02:12:54,480
deployment has access to the external

3004
02:12:54,480 --> 02:12:55,840
world

3005
02:12:55,840 --> 02:12:57,440
yep even the api has access to the

3006
02:12:57,440 --> 02:12:58,800
external world

3007
02:12:58,800 --> 02:13:01,199
also let us see if api

3008
02:13:01,199 --> 02:13:02,639
can interact

3009
02:13:02,639 --> 02:13:05,840
with the api itself

3010
02:13:10,159 --> 02:13:12,000
perfect there we go so from nginx

3011
02:13:12,000 --> 02:13:13,599
deployment we have access to the api on

3012
02:13:13,599 --> 02:13:15,440
the output like even from the api we

3013
02:13:15,440 --> 02:13:16,639
have access to

3014
02:13:16,639 --> 02:13:18,800
uh nginx and api and the outer world now

3015
02:13:18,800 --> 02:13:21,679
let us play with some rules and see how

3016
02:13:21,679 --> 02:13:23,119
we can actually restrict the traffic

3017
02:13:23,119 --> 02:13:24,880
inside the kubernetes cluster

3018
02:13:24,880 --> 02:13:26,880
so the first one i would slay or play

3019
02:13:26,880 --> 02:13:28,960
with is like

3020
02:13:28,960 --> 02:13:31,119
the address rule i have created a file

3021
02:13:31,119 --> 02:13:32,960
manifestation file for you let us see

3022
02:13:32,960 --> 02:13:35,520
what this means so here we are saying we

3023
02:13:35,520 --> 02:13:37,599
apply this one

3024
02:13:37,599 --> 02:13:41,040
address to the match to the api

3025
02:13:41,040 --> 02:13:43,360
port 3333

3026
02:13:43,360 --> 02:13:44,960
only to

3027
02:13:44,960 --> 02:13:47,440
port 53 to the outer world let us see

3028
02:13:47,440 --> 02:13:49,199
what this means

3029
02:13:49,199 --> 02:13:53,519
qcdl apply fnf

3030
02:13:54,159 --> 02:13:55,760
address

3031
02:13:55,760 --> 02:13:58,320
network policy has been created now

3032
02:13:58,320 --> 02:14:01,040
let's quickly

3033
02:14:05,040 --> 02:14:06,719
click

3034
02:14:06,719 --> 02:14:09,119
on mention export let's try to

3035
02:14:09,119 --> 02:14:12,920
exit the outer world

3036
02:14:23,119 --> 02:14:25,760
we can't access google

3037
02:14:25,760 --> 02:14:26,800
now

3038
02:14:26,800 --> 02:14:30,800
let's try and access

3039
02:14:30,800 --> 02:14:34,560
the nginx service on the port 80.

3040
02:14:35,760 --> 02:14:38,880
now click on access

3041
02:14:38,960 --> 02:14:41,679
however let's try and access the api

3042
02:14:41,679 --> 02:14:46,119
service on port 3333

3043
02:14:48,079 --> 02:14:51,040
there we go we were able to access

3044
02:14:51,040 --> 02:14:53,679
so what we defined the rule is like hey

3045
02:14:53,679 --> 02:14:56,239
if somebody is trying to access to any

3046
02:14:56,239 --> 02:14:58,079
of the applications with the label

3047
02:14:58,079 --> 02:15:01,840
called api and port 3333 let it access

3048
02:15:01,840 --> 02:15:03,440
and we are applying it to the engine so

3049
02:15:03,440 --> 02:15:05,360
that is the reason why from nginx we

3050
02:15:05,360 --> 02:15:07,520
were able to access port or the api

3051
02:15:07,520 --> 02:15:10,960
service on port three three three three

3052
02:15:10,960 --> 02:15:13,360
likewise to make your likes more easier

3053
02:15:13,360 --> 02:15:17,040
let us see another quick example

3054
02:15:18,159 --> 02:15:19,679
cat

3055
02:15:19,679 --> 02:15:22,719
so i'm saying that hey

3056
02:15:22,719 --> 02:15:24,159
from the api

3057
02:15:24,159 --> 02:15:25,199
or

3058
02:15:25,199 --> 02:15:27,760
nginx like

3059
02:15:27,760 --> 02:15:30,880
happy block to this one

3060
02:15:30,880 --> 02:15:33,440
we are trying to block some access

3061
02:15:33,440 --> 02:15:35,119
so this is like the ip address of the

3062
02:15:35,119 --> 02:15:37,360
google let me quickly check must have

3063
02:15:37,360 --> 02:15:39,759
changed

3064
02:15:42,880 --> 02:15:44,320
oh yeah it has changed so i'll quickly

3065
02:15:44,320 --> 02:15:47,040
change this one

3066
02:15:47,199 --> 02:15:50,199
and

3067
02:16:05,599 --> 02:16:11,560
so i will apply this one cdl apply iph

3068
02:16:32,570 --> 02:16:35,860
[Music]

3069
02:16:37,920 --> 02:16:40,160
so now from the api pod

3070
02:16:40,160 --> 02:16:42,160
i'll try to accept and see if i have

3071
02:16:42,160 --> 02:16:46,039
access to

3072
02:16:56,160 --> 02:16:59,120
no i can't access on port 80

3073
02:16:59,120 --> 02:17:02,000
however let me see an access on port 443

3074
02:17:02,000 --> 02:17:03,760
there we go i have access

3075
02:17:03,760 --> 02:17:05,519
the reason is that's what we have

3076
02:17:05,519 --> 02:17:08,000
defined in the file let it access only

3077
02:17:08,000 --> 02:17:10,478
on port 443 but not any other port

3078
02:17:10,478 --> 02:17:13,040
that's so we can restrict the traffic

3079
02:17:13,040 --> 02:17:15,040
inside the kubernetes cluster based on

3080
02:17:15,040 --> 02:17:17,120
the ip address range and the port number

3081
02:17:17,120 --> 02:17:19,920
or even or on the labels i have like few

3082
02:17:19,920 --> 02:17:22,638
more examples provided to you in the pdf

3083
02:17:22,638 --> 02:17:24,398
sheet just go and try them and play with

3084
02:17:24,398 --> 02:17:27,200
how different network pulses can be used

3085
02:17:27,200 --> 02:17:29,040
to segregate or network the traffic for

3086
02:17:29,040 --> 02:17:30,478
example in one of the scenarios we

3087
02:17:30,478 --> 02:17:32,638
gained access to the web application and

3088
02:17:32,638 --> 02:17:33,920
from the web application we gained

3089
02:17:33,920 --> 02:17:35,599
access to the jenkins server and that

3090
02:17:35,599 --> 02:17:36,478
place

3091
02:17:36,478 --> 02:17:37,920
really the web application doesn't need

3092
02:17:37,920 --> 02:17:39,920
to have access to doesn't need an access

3093
02:17:39,920 --> 02:17:42,638
to like the build server or any other

3094
02:17:42,638 --> 02:17:44,799
server so that way we can use these

3095
02:17:44,799 --> 02:17:46,318
network policies to segregate the

3096
02:17:46,318 --> 02:17:49,280
traffic and stop certain attacks pretty

3097
02:17:49,280 --> 02:17:52,599
much like fireballs

3098
02:17:59,760 --> 02:18:01,840
now let us look at uh

3099
02:18:01,840 --> 02:18:03,840
something called resource constraints

3100
02:18:03,840 --> 02:18:05,519
which is again a very important thing

3101
02:18:05,519 --> 02:18:08,080
which will help us to uh stop some kind

3102
02:18:08,080 --> 02:18:10,080
of dos tags or the resource consumption

3103
02:18:10,080 --> 02:18:12,080
attacks so when kubernetes schedules a

3104
02:18:12,080 --> 02:18:13,840
pod it is important that the containers

3105
02:18:13,840 --> 02:18:15,840
have enough resources to actually run if

3106
02:18:15,840 --> 02:18:17,920
you schedule a large application on a

3107
02:18:17,920 --> 02:18:19,439
node with limited resources it is

3108
02:18:19,439 --> 02:18:21,679
possible for the road to run out of

3109
02:18:21,679 --> 02:18:24,318
memory or cpu resources or for things to

3110
02:18:24,318 --> 02:18:26,478
stop working it is also possible for

3111
02:18:26,478 --> 02:18:28,240
applications to take up more resources

3112
02:18:28,240 --> 02:18:30,160
than they should this could be caused by

3113
02:18:30,160 --> 02:18:32,478
a team uh spinning up more replicas than

3114
02:18:32,478 --> 02:18:34,240
they actually need to artificially

3115
02:18:34,240 --> 02:18:35,840
decrease the latency

3116
02:18:35,840 --> 02:18:37,679
or to a bad conservation chain that

3117
02:18:37,679 --> 02:18:39,200
causes a program to go out of the

3118
02:18:39,200 --> 02:18:40,799
control and use hundred percent of the

3119
02:18:40,799 --> 02:18:42,799
available cpm so regardless of whether

3120
02:18:42,799 --> 02:18:44,879
the issue is caused by a bad developer a

3121
02:18:44,879 --> 02:18:46,638
bad code or some bad luck what's

3122
02:18:46,638 --> 02:18:48,558
important is that it has to be in the

3123
02:18:48,558 --> 02:18:50,558
control so that's where we actually use

3124
02:18:50,558 --> 02:18:52,478
this resource constraint and for that we

3125
02:18:52,478 --> 02:18:54,478
use something called request and limit

3126
02:18:54,478 --> 02:18:56,398
so request and limit are the mechanisms

3127
02:18:56,398 --> 02:18:58,558
the kubernetes uses to control resources

3128
02:18:58,558 --> 02:19:01,840
such as like the cpu and the memory

3129
02:19:01,840 --> 02:19:04,558
we will look into that example

3130
02:19:04,558 --> 02:19:07,040
so

3131
02:19:07,040 --> 02:19:12,439
so let us look into cv memory limits

3132
02:19:25,599 --> 02:19:27,280
so let us start with a file called set

3133
02:19:27,280 --> 02:19:28,959
limit range i want you to explore and

3134
02:19:28,959 --> 02:19:31,760
see what this is strange so we are

3135
02:19:31,760 --> 02:19:33,280
creating a tile called limit range and

3136
02:19:33,280 --> 02:19:34,558
we are setting some limits like the

3137
02:19:34,558 --> 02:19:36,558
maximum cpu is like 800 and the minimum

3138
02:19:36,558 --> 02:19:38,558
is like 200 n so let us see what this

3139
02:19:38,558 --> 02:19:40,558
means

3140
02:19:40,558 --> 02:19:44,160
cube cdl apply iphone f

3141
02:19:45,599 --> 02:19:49,240
set limit range.yaml

3142
02:19:52,720 --> 02:19:54,800
the set limit range is created

3143
02:19:54,800 --> 02:19:57,200
and uh

3144
02:19:57,200 --> 02:19:59,520
i have created another file called

3145
02:19:59,520 --> 02:20:02,399
pod with cpu within the range

3146
02:20:02,399 --> 02:20:04,319
which means i'm creating a pod with the

3147
02:20:04,319 --> 02:20:07,520
limits like 800 m and 500 m which is

3148
02:20:07,520 --> 02:20:09,520
as per the specs that we have defined

3149
02:20:09,520 --> 02:20:11,280
however instead of testing it let us

3150
02:20:11,280 --> 02:20:13,439
test something which is a

3151
02:20:13,439 --> 02:20:15,359
power cpu like less than or more than

3152
02:20:15,359 --> 02:20:18,880
that gives us like a better example

3153
02:20:18,880 --> 02:20:20,479
so by default these are the limits that

3154
02:20:20,479 --> 02:20:21,840
i have said but i'm trying to deploy a

3155
02:20:21,840 --> 02:20:23,439
pod with the cpu limits which is higher

3156
02:20:23,439 --> 02:20:25,439
than what i have defined so what i'll do

3157
02:20:25,439 --> 02:20:30,040
is cube cpl apply it

3158
02:20:30,399 --> 02:20:31,680
it says

3159
02:20:31,680 --> 02:20:33,760
forbidden error when creating pod with

3160
02:20:33,760 --> 02:20:36,640
cpu more than limit.angle because

3161
02:20:36,640 --> 02:20:38,560
maximum cpu usage per container is only

3162
02:20:38,560 --> 02:20:40,960
800 but the limit is 1500 this way if

3163
02:20:40,960 --> 02:20:42,240
there is some crypto mining attack

3164
02:20:42,240 --> 02:20:43,760
happening inside the cluster or if some

3165
02:20:43,760 --> 02:20:45,920
of the containers are utilizing like

3166
02:20:45,920 --> 02:20:47,600
higher resources than what they actually

3167
02:20:47,600 --> 02:20:50,080
require this way we can actually stop

3168
02:20:50,080 --> 02:20:52,080
likewise if you want a container to be

3169
02:20:52,080 --> 02:20:54,479
running always with some

3170
02:20:54,479 --> 02:20:57,200
more than what is defined for example a

3171
02:20:57,200 --> 02:20:59,600
pod with cpu more than limit

3172
02:20:59,600 --> 02:21:01,200
so that we have seen with less than

3173
02:21:01,200 --> 02:21:02,240
limit

3174
02:21:02,240 --> 02:21:04,240
now

3175
02:21:04,240 --> 02:21:07,600
let's see here that's right and f

3176
02:21:10,000 --> 02:21:11,680
less than limit because this time we are

3177
02:21:11,680 --> 02:21:14,080
trying to spin up a container with 100 m

3178
02:21:14,080 --> 02:21:15,520
but the minimum limit that we have

3179
02:21:15,520 --> 02:21:17,120
defined is like 200 m that's how we

3180
02:21:17,120 --> 02:21:19,600
actually define like the memory limits

3181
02:21:19,600 --> 02:21:21,439
like higher limit and the lower limit to

3182
02:21:21,439 --> 02:21:23,439
ensure everything is under our control

3183
02:21:23,439 --> 02:21:25,120
the utilization and the consumption of

3184
02:21:25,120 --> 02:21:26,800
the cpu or the memory is always under

3185
02:21:26,800 --> 02:21:28,560
control

3186
02:21:28,560 --> 02:21:32,399
so likewise i have a few more

3187
02:21:32,399 --> 02:21:34,240
files and examples for you like the

3188
02:21:34,240 --> 02:21:35,840
playing with the same stuff like we have

3189
02:21:35,840 --> 02:21:37,680
seen like the cpu elements likewise you

3190
02:21:37,680 --> 02:21:39,280
can also try for the memory limits and

3191
02:21:39,280 --> 02:21:40,720
then spin up some containers with higher

3192
02:21:40,720 --> 02:21:43,280
memory limits and lower memory limits

3193
02:21:43,280 --> 02:21:46,319
now what i will do is i will quickly

3194
02:21:46,319 --> 02:21:48,800
delete whatever i have created so that

3195
02:21:48,800 --> 02:21:51,120
it won't stop the rest of the workshop

3196
02:21:51,120 --> 02:21:53,840
but it might

3197
02:21:55,120 --> 02:21:56,960
likewise whatever stuff i have created

3198
02:21:56,960 --> 02:21:58,880
in the network policies

3199
02:21:58,880 --> 02:22:00,319
i will try to create them so that it

3200
02:22:00,319 --> 02:22:04,600
won't impact the rest of the workshop

3201
02:22:27,920 --> 02:22:29,280
we have seen like role-based access

3202
02:22:29,280 --> 02:22:31,359
controls and we have seen like uh

3203
02:22:31,359 --> 02:22:33,200
resource constraints

3204
02:22:33,200 --> 02:22:36,200
now

3205
02:22:36,960 --> 02:22:38,640
we'll be looking into the stuff called

3206
02:22:38,640 --> 02:22:41,280
uh security context this is uh another

3207
02:22:41,280 --> 02:22:42,479
important piece like the security

3208
02:22:42,479 --> 02:22:44,800
context defines like the privileges and

3209
02:22:44,800 --> 02:22:46,000
the access control settings for a

3210
02:22:46,000 --> 02:22:47,840
powerdirector container and they are

3211
02:22:47,840 --> 02:22:49,760
actually defined as a part of the pod

3212
02:22:49,760 --> 02:22:51,359
and container specification in the pod

3213
02:22:51,359 --> 02:22:53,359
manifest and represent parameters of the

3214
02:22:53,359 --> 02:22:55,439
container online what it means is like

3215
02:22:55,439 --> 02:22:56,640
there are different flags like

3216
02:22:56,640 --> 02:22:58,720
privileged flag

3217
02:22:58,720 --> 02:23:00,560
privilege escalation flag or run as a

3218
02:23:00,560 --> 02:23:03,040
group run as a non-proof run as a user

3219
02:23:03,040 --> 02:23:04,319
the different flags that you can

3220
02:23:04,319 --> 02:23:06,080
actually pass to the manifestation file

3221
02:23:06,080 --> 02:23:07,920
or to the deployment of the daemon set

3222
02:23:07,920 --> 02:23:10,000
or the pod when you deploy it

3223
02:23:10,000 --> 02:23:11,760
and

3224
02:23:11,760 --> 02:23:13,439
you will see like different flags what

3225
02:23:13,439 --> 02:23:17,479
it can actually be run

3226
02:23:18,560 --> 02:23:21,439
so for that i would like to use uh

3227
02:23:21,439 --> 02:23:23,920
an example called popa so for this one

3228
02:23:23,920 --> 02:23:25,840
you need to spin up like the oppa stuff

3229
02:23:25,840 --> 02:23:27,760
in your machine so what i want you all

3230
02:23:27,760 --> 02:23:30,720
to do is uh

3231
02:23:30,720 --> 02:23:34,399
just please run this command in your

3232
02:23:34,399 --> 02:23:35,439
machines

3233
02:23:35,439 --> 02:23:36,399
launch

3234
02:23:36,399 --> 02:23:39,200
oppai fn stack workshop iphone dev if

3235
02:23:39,200 --> 02:23:40,800
you go to the section called uh

3236
02:23:40,800 --> 02:23:43,200
admission controllers

3237
02:23:43,200 --> 02:23:45,040
and we have something called open or

3238
02:23:45,040 --> 02:23:47,520
admission controllers and there is this

3239
02:23:47,520 --> 02:23:49,120
command

3240
02:23:49,120 --> 02:23:51,280
launch or python stack workshop iphone

3241
02:23:51,280 --> 02:23:53,359
dev

3242
02:23:53,359 --> 02:23:55,120
and it will bring up like the opa stack

3243
02:23:55,120 --> 02:23:56,640
and we'll be able to do the rest of this

3244
02:23:56,640 --> 02:23:58,880
thing so when it actually asks for any

3245
02:23:58,880 --> 02:24:01,200
like a slack or a web url

3246
02:24:01,200 --> 02:24:02,640
you don't need to provide anything just

3247
02:24:02,640 --> 02:24:04,960
press enter and it will spin up some

3248
02:24:04,960 --> 02:24:09,720
containers i'll just show you

3249
02:24:23,520 --> 02:24:25,840
so when you run this command launch or

3250
02:24:25,840 --> 02:24:28,720
python stack

3251
02:24:36,240 --> 02:24:37,359
it will

3252
02:24:37,359 --> 02:24:38,720
bring up some

3253
02:24:38,720 --> 02:24:40,800
containers cubes and you'll get voip

3254
02:24:40,800 --> 02:24:43,520
iphone a

3255
02:24:43,520 --> 02:24:45,840
it will bring up these four containers

3256
02:24:45,840 --> 02:24:48,160
called gatekeeper system and it may take

3257
02:24:48,160 --> 02:24:50,240
like a couple of minutes for

3258
02:24:50,240 --> 02:24:52,640
you to see these things

3259
02:24:52,640 --> 02:24:56,680
so just issue this command

3260
02:24:56,800 --> 02:24:58,960
launch for python stack workshop iphone

3261
02:24:58,960 --> 02:25:01,199
dev

3262
02:25:02,319 --> 02:25:04,230
and once it is done

3263
02:25:04,230 --> 02:25:07,359
[Music]

3264
02:25:07,520 --> 02:25:08,960
we can go ahead and practice with the

3265
02:25:08,960 --> 02:25:11,839
stuff so

3266
02:25:18,240 --> 02:25:20,399
well basically like what is this uh what

3267
02:25:20,399 --> 02:25:22,399
is an automation controller basically it

3268
02:25:22,399 --> 02:25:24,319
is a mechanism by which the request

3269
02:25:24,319 --> 02:25:26,160
coming to the cuban base api server can

3270
02:25:26,160 --> 02:25:28,399
be intercepted prior to getting stored

3271
02:25:28,399 --> 02:25:29,760
in xcd they are like part of the

3272
02:25:29,760 --> 02:25:32,080
kubernetes api server and using this

3273
02:25:32,080 --> 02:25:33,600
admission controller like the word

3274
02:25:33,600 --> 02:25:35,680
implies controller we can control the

3275
02:25:35,680 --> 02:25:38,080
request coming to the kubernetes cluster

3276
02:25:38,080 --> 02:25:40,080
admission controller limit

3277
02:25:40,080 --> 02:25:42,720
like request to create delete modify or

3278
02:25:42,720 --> 02:25:44,240
connect they do not support like the

3279
02:25:44,240 --> 02:25:45,840
read request through

3280
02:25:45,840 --> 02:25:48,479
so open policy oppa agent is like offers

3281
02:25:48,479 --> 02:25:49,840
it's like an open source service that

3282
02:25:49,840 --> 02:25:52,800
can evaluate the inputs against the user

3283
02:25:52,800 --> 02:25:54,720
defined policies so how this works is

3284
02:25:54,720 --> 02:25:57,120
like we use the language called rego the

3285
02:25:57,120 --> 02:25:59,040
users can write some policies using the

3286
02:25:59,040 --> 02:26:01,680
oppa custom language record it's very

3287
02:26:01,680 --> 02:26:03,359
simple syntax and small set of functions

3288
02:26:03,359 --> 02:26:05,520
and operators so once you write

3289
02:26:05,520 --> 02:26:07,920
something in the ego it will be

3290
02:26:07,920 --> 02:26:11,200
checked against the rule set so here i

3291
02:26:11,200 --> 02:26:13,840
want you all to remember two important

3292
02:26:13,840 --> 02:26:16,640
terminology one is constraint template

3293
02:26:16,640 --> 02:26:18,240
and the constraint

3294
02:26:18,240 --> 02:26:20,319
the constraint template consists of both

3295
02:26:20,319 --> 02:26:22,960
the logic that enforces the constraint

3296
02:26:22,960 --> 02:26:24,720
and the schema for the constraint which

3297
02:26:24,720 --> 02:26:26,560
includes like the parameters that can be

3298
02:26:26,560 --> 02:26:28,640
passed into a constraint so what is a

3299
02:26:28,640 --> 02:26:30,080
constraint

3300
02:26:30,080 --> 02:26:32,080
it is an object that says on which

3301
02:26:32,080 --> 02:26:34,800
resources are these policies applicable

3302
02:26:34,800 --> 02:26:39,039
i'll show that to you in action

3303
02:26:44,000 --> 02:26:46,960
so this is uh

3304
02:26:47,439 --> 02:26:49,920
the architecture or how how like the

3305
02:26:49,920 --> 02:26:53,120
oppa was it's like a

3306
02:26:53,120 --> 02:26:56,399
policy or a decision based some request

3307
02:26:56,399 --> 02:26:58,560
comes in we have like the policies that

3308
02:26:58,560 --> 02:27:00,800
we have written oppa validates the

3309
02:27:00,800 --> 02:27:02,800
income incoming service or the request

3310
02:27:02,800 --> 02:27:04,399
against the policies everything is fine

3311
02:27:04,399 --> 02:27:06,080
it will let it to happen otherwise it

3312
02:27:06,080 --> 02:27:08,399
will detect it straight away

3313
02:27:08,399 --> 02:27:09,920
for example these are the examples like

3314
02:27:09,920 --> 02:27:11,840
which subnets the traffic is allowed to

3315
02:27:11,840 --> 02:27:13,600
or which cluster the workload must be

3316
02:27:13,600 --> 02:27:15,760
deployed to or from which registry we

3317
02:27:15,760 --> 02:27:17,680
can actually download the images or the

3318
02:27:17,680 --> 02:27:19,120
capabilities of the flags that a

3319
02:27:19,120 --> 02:27:20,960
container can run with so all these can

3320
02:27:20,960 --> 02:27:23,439
be defined in the oppa

3321
02:27:23,439 --> 02:27:24,880
like i said this is the command that you

3322
02:27:24,880 --> 02:27:26,319
should be our

3323
02:27:26,319 --> 02:27:27,840
implement

3324
02:27:27,840 --> 02:27:29,760
running it to have the hope up and

3325
02:27:29,760 --> 02:27:32,080
running

3326
02:27:33,120 --> 02:27:35,439
so

3327
02:27:36,560 --> 02:27:40,279
let us see a demo

3328
02:27:48,800 --> 02:27:50,640
all right uh quickly can you all still

3329
02:27:50,640 --> 02:27:52,240
see my screen

3330
02:27:52,240 --> 02:27:55,040
or any issues

3331
02:27:55,040 --> 02:27:58,319
just a quick hands up or some answer any

3332
02:27:58,319 --> 02:28:02,000
issues or you can still see my screen

3333
02:28:04,160 --> 02:28:07,359
uh christian can you still see my screen

3334
02:28:07,359 --> 02:28:09,760
ah yes so you can see this screen still

3335
02:28:09,760 --> 02:28:12,800
okay perfect

3336
02:28:12,800 --> 02:28:15,760
so there is a folder called oppa just

3337
02:28:15,760 --> 02:28:18,720
let's get into like the oppa

3338
02:28:18,720 --> 02:28:20,319
like different uh files that i have

3339
02:28:20,319 --> 02:28:23,120
created for you to try test and play so

3340
02:28:23,120 --> 02:28:24,960
let us start with something called

3341
02:28:24,960 --> 02:28:28,000
privileged containers

3342
02:28:28,640 --> 02:28:31,920
cd privileged containers

3343
02:28:33,359 --> 02:28:36,359
samples

3344
02:28:57,680 --> 02:28:59,920
so here let us look at like the constant

3345
02:28:59,920 --> 02:29:02,000
template it's it may look like greek and

3346
02:29:02,000 --> 02:29:03,520
latin but it's very straightforward here

3347
02:29:03,520 --> 02:29:05,520
what what i'm trying to do is like we

3348
02:29:05,520 --> 02:29:06,640
are

3349
02:29:06,640 --> 02:29:09,040
trying to identify a flag called

3350
02:29:09,040 --> 02:29:11,760
privileged under the security context

3351
02:29:11,760 --> 02:29:14,080
so if this flag is identified we are

3352
02:29:14,080 --> 02:29:15,600
saying like privileged container is not

3353
02:29:15,600 --> 02:29:17,439
allowed we want this to be blocked we

3354
02:29:17,439 --> 02:29:19,280
don't want the users or the devs or

3355
02:29:19,280 --> 02:29:22,240
anyone to uh spin up like the privileged

3356
02:29:22,240 --> 02:29:23,120
flag

3357
02:29:23,120 --> 02:29:24,479
containers with the privileged flag

3358
02:29:24,479 --> 02:29:26,640
inside of the kubernetes cluster

3359
02:29:26,640 --> 02:29:29,760
so let us apply this one cube ctl apply

3360
02:29:29,760 --> 02:29:32,319
iphone f

3361
02:29:32,319 --> 02:29:35,880
that has been applied

3362
02:29:38,800 --> 02:29:40,640
now we need to apply

3363
02:29:40,640 --> 02:29:42,479
the constraint so how does the constant

3364
02:29:42,479 --> 02:29:44,640
look like so we have already created a

3365
02:29:44,640 --> 02:29:46,080
constant template

3366
02:29:46,080 --> 02:29:48,399
now we are saying hey please apply that

3367
02:29:48,399 --> 02:29:50,880
template to

3368
02:29:50,880 --> 02:29:53,279
pods

3369
02:29:55,040 --> 02:29:58,439
apply sms

3370
02:30:04,479 --> 02:30:07,200
it has been applied

3371
02:30:07,200 --> 02:30:09,760
let us see some quick examples

3372
02:30:09,760 --> 02:30:13,520
example underscore allowed

3373
02:30:13,520 --> 02:30:16,160
we are trying to run a container with a

3374
02:30:16,160 --> 02:30:18,319
flag privileged equal to false which

3375
02:30:18,319 --> 02:30:19,920
will actually let us deploy because we

3376
02:30:19,920 --> 02:30:21,600
have written a rule to

3377
02:30:21,600 --> 02:30:23,040
stop any containers that are being

3378
02:30:23,040 --> 02:30:25,120
deployed with the flag

3379
02:30:25,120 --> 02:30:27,600
privileged equal to true so let us apply

3380
02:30:27,600 --> 02:30:30,760
and see

3381
02:30:35,439 --> 02:30:38,560
says uh privileged allowed created now

3382
02:30:38,560 --> 02:30:40,720
likewise let us apply

3383
02:30:40,720 --> 02:30:42,240
let us see

3384
02:30:42,240 --> 02:30:44,479
what is cat

3385
02:30:44,479 --> 02:30:47,359
example disallowed

3386
02:30:47,359 --> 02:30:48,800
so we are trying to spin up a container

3387
02:30:48,800 --> 02:30:50,399
with a flag called privileged equal to

3388
02:30:50,399 --> 02:30:53,399
true

3389
02:31:05,520 --> 02:31:07,600
there we go

3390
02:31:07,600 --> 02:31:10,479
so it says privileged container is not

3391
02:31:10,479 --> 02:31:11,520
allowed

3392
02:31:11,520 --> 02:31:13,920
because privileged flagpole true exist

3393
02:31:13,920 --> 02:31:15,439
this is the reason why

3394
02:31:15,439 --> 02:31:17,200
previous content is not allowed nginx

3395
02:31:17,200 --> 02:31:18,800
security context privileged equally true

3396
02:31:18,800 --> 02:31:20,160
that's the reason

3397
02:31:20,160 --> 02:31:22,160
why it could not deploy because we have

3398
02:31:22,160 --> 02:31:24,880
created a rule saying that don't let

3399
02:31:24,880 --> 02:31:27,200
anyone to spin up a container or a board

3400
02:31:27,200 --> 02:31:29,760
or a demon set for example a pod if the

3401
02:31:29,760 --> 02:31:31,520
flag privileged equal to true enabled

3402
02:31:31,520 --> 02:31:33,760
this way we can stop most of the stuff

3403
02:31:33,760 --> 02:31:36,160
this is also called as compliance

3404
02:31:36,160 --> 02:31:36,960
uh

3405
02:31:36,960 --> 02:31:39,680
policy as a code or compliance as a code

3406
02:31:39,680 --> 02:31:41,280
in your organization you might have sort

3407
02:31:41,280 --> 02:31:42,880
of compliance or the policies saying

3408
02:31:42,880 --> 02:31:44,960
that hey don't let users to spin up

3409
02:31:44,960 --> 02:31:47,120
privileged containers or some flags with

3410
02:31:47,120 --> 02:31:48,960
host path mounts or maximize that rules

3411
02:31:48,960 --> 02:31:50,800
so we define those policies or

3412
02:31:50,800 --> 02:31:53,040
compliance rules in the form of a code

3413
02:31:53,040 --> 02:31:56,680
so this is one example

3414
02:31:57,600 --> 02:32:00,319
so i will quickly delete whatever i'm

3415
02:32:00,319 --> 02:32:01,439
creating

3416
02:32:01,439 --> 02:32:03,040
so it won't impact the rest of the

3417
02:32:03,040 --> 02:32:06,000
workshop ucl delete iphone f example

3418
02:32:06,000 --> 02:32:09,880
underscore dot ammo

3419
02:32:21,840 --> 02:32:25,640
also leading constraint

3420
02:32:45,520 --> 02:32:48,399
now let us look at a similar example

3421
02:32:48,399 --> 02:32:49,840
where we have a low privileged

3422
02:32:49,840 --> 02:32:51,600
escalation flag

3423
02:32:51,600 --> 02:32:53,120
so we don't want the containers of the

3424
02:32:53,120 --> 02:32:54,800
pods to be spinning up or to be running

3425
02:32:54,800 --> 02:32:56,080
with a lot of privilege especially in

3426
02:32:56,080 --> 02:32:58,800
flag what i will do is

3427
02:32:58,800 --> 02:33:02,319
template.animal i'm simply saying that

3428
02:33:02,319 --> 02:33:04,160
where we have like

3429
02:33:04,160 --> 02:33:06,880
a low privileged installation just say

3430
02:33:06,880 --> 02:33:08,399
or block it saying that privileged

3431
02:33:08,399 --> 02:33:10,240
escalation container is not allowed so

3432
02:33:10,240 --> 02:33:14,359
let us apply this one

3433
02:33:23,040 --> 02:33:25,200
now

3434
02:33:25,200 --> 02:33:27,040
let us apply let's look at the

3435
02:33:27,040 --> 02:33:29,040
constraints so we have created a

3436
02:33:29,040 --> 02:33:30,800
constant template and now i'm applying

3437
02:33:30,800 --> 02:33:34,720
it to the kind called pods

3438
02:33:34,720 --> 02:33:38,519
ctl apply actions

3439
02:33:56,720 --> 02:33:59,200
so that has been applied let's look at a

3440
02:33:59,200 --> 02:34:01,600
quick example of example this allowed

3441
02:34:01,600 --> 02:34:04,240
what they are trying to do

3442
02:34:04,240 --> 02:34:06,000
and we are trying to spin up a container

3443
02:34:06,000 --> 02:34:07,600
with the flag called hello privilege

3444
02:34:07,600 --> 02:34:12,040
escalation true and see what happens

3445
02:34:18,479 --> 02:34:20,160
this checking against uh the open

3446
02:34:20,160 --> 02:34:23,600
policies that we have created

3447
02:34:24,000 --> 02:34:26,319
and ideally should not let us to spin up

3448
02:34:26,319 --> 02:34:28,800
this container or this pod because we

3449
02:34:28,800 --> 02:34:30,399
have the security context hello

3450
02:34:30,399 --> 02:34:33,439
privileges solution flag enable true

3451
02:34:33,439 --> 02:34:35,920
there we go it says denied the request

3452
02:34:35,920 --> 02:34:37,520
privileges station container is not

3453
02:34:37,520 --> 02:34:39,359
allowed nginx so this is how we

3454
02:34:39,359 --> 02:34:43,120
basically use oppa

3455
02:34:43,120 --> 02:34:44,399
[Music]

3456
02:34:44,399 --> 02:34:46,720
in fact the oppa can be applied uh

3457
02:34:46,720 --> 02:34:48,640
anywhere to any action you can use the

3458
02:34:48,640 --> 02:34:50,560
oppa even to your cloud infrastructure

3459
02:34:50,560 --> 02:34:52,240
to the cloud uh

3460
02:34:52,240 --> 02:34:53,600
to restrict certain things even in the

3461
02:34:53,600 --> 02:34:55,280
cloud as well let's see we'll give you

3462
02:34:55,280 --> 02:34:57,920
guys an app

3463
02:35:08,080 --> 02:35:10,160
so

3464
02:35:10,160 --> 02:35:12,080
i have like created many other files for

3465
02:35:12,080 --> 02:35:14,160
you like testing like letting or pulling

3466
02:35:14,160 --> 02:35:15,760
the images only for the allowed reports

3467
02:35:15,760 --> 02:35:17,280
or the capabilities

3468
02:35:17,280 --> 02:35:20,000
or the host file system https only you

3469
02:35:20,000 --> 02:35:21,680
you can just try them you have all the

3470
02:35:21,680 --> 02:35:22,800
commands and

3471
02:35:22,800 --> 02:35:24,720
everything is just in the pdf just give

3472
02:35:24,720 --> 02:35:26,720
a go

3473
02:35:26,720 --> 02:35:28,960
so

3474
02:35:34,960 --> 02:35:36,399
no worries

3475
02:35:36,399 --> 02:35:41,399
so well that concludes the over section

3476
02:35:42,800 --> 02:35:44,720
so we have seen uh different things

3477
02:35:44,720 --> 02:35:46,319
under like the defending section we have

3478
02:35:46,319 --> 02:35:48,000
seen like covered like the role based

3479
02:35:48,000 --> 02:35:50,720
access controls like role bindings uh

3480
02:35:50,720 --> 02:35:52,319
roles cluster rule bindings cluster

3481
02:35:52,319 --> 02:35:54,080
rules and we have seen like the network

3482
02:35:54,080 --> 02:35:56,479
policies ingress and aggress and then we

3483
02:35:56,479 --> 02:35:58,319
have seen uh

3484
02:35:58,319 --> 02:35:59,200
uh

3485
02:35:59,200 --> 02:36:00,960
constraints such as like memory limits

3486
02:36:00,960 --> 02:36:03,520
and cpu limits and we have seen uh like

3487
02:36:03,520 --> 02:36:04,880
the opa stack

3488
02:36:04,880 --> 02:36:06,399
and in the documentation i have also

3489
02:36:06,399 --> 02:36:08,399
provided like the port security policy a

3490
02:36:08,399 --> 02:36:10,240
power security policy is a cluster level

3491
02:36:10,240 --> 02:36:12,640
resource that basically controls

3492
02:36:12,640 --> 02:36:14,319
uh security sensitive aspects of the

3493
02:36:14,319 --> 02:36:16,720
port specification it also defines a set

3494
02:36:16,720 --> 02:36:19,120
of conditions that a pod must run within

3495
02:36:19,120 --> 02:36:20,479
order to be accepted into system it's

3496
02:36:20,479 --> 02:36:22,640
pretty much like oppa however it is

3497
02:36:22,640 --> 02:36:25,200
going to be deprecated sometime soon and

3498
02:36:25,200 --> 02:36:26,560
i'm going to leave it to you guys to

3499
02:36:26,560 --> 02:36:28,960
test it

3500
02:36:33,200 --> 02:36:36,319
so now let's move on to

3501
02:36:36,319 --> 02:36:40,240
interesting stuff like the monitoring

3502
02:36:40,560 --> 02:36:43,040
i have like two or three minutes of

3503
02:36:43,040 --> 02:36:45,760
monitoring the theory part so before we

3504
02:36:45,760 --> 02:36:48,720
do monitoring i want to run this command

3505
02:36:48,720 --> 02:36:50,399
in your machines

3506
02:36:50,399 --> 02:36:51,680
so this is the command that you should

3507
02:36:51,680 --> 02:36:54,240
be running

3508
02:36:54,240 --> 02:36:56,800
launch monitoring iphone stack workshop

3509
02:36:56,800 --> 02:36:58,160
iphone dev it will spin up a few

3510
02:36:58,160 --> 02:37:00,240
containers and it will bring up whatever

3511
02:37:00,240 --> 02:37:02,319
we need for this workshop to go ahead

3512
02:37:02,319 --> 02:37:03,680
and please

3513
02:37:03,680 --> 02:37:05,520
make a note of this ip address this is

3514
02:37:05,520 --> 02:37:07,200
like dynamic it will depends on your

3515
02:37:07,200 --> 02:37:08,880
machine and it also the username and

3516
02:37:08,880 --> 02:37:10,960
password is dynamic for everyone so

3517
02:37:10,960 --> 02:37:12,560
please make a note of this username and

3518
02:37:12,560 --> 02:37:14,080
password which we will be using to log

3519
02:37:14,080 --> 02:37:17,479
into the screen

3520
02:37:19,359 --> 02:37:23,240
how this works is

3521
02:37:32,160 --> 02:37:33,920
just from the command launch monitoring

3522
02:37:33,920 --> 02:37:36,080
iphone stack the workshop in dell just

3523
02:37:36,080 --> 02:37:37,359
copy and paste this command from the

3524
02:37:37,359 --> 02:37:40,000
documentation

3525
02:37:40,160 --> 02:37:42,000
and if you have any issues any errors

3526
02:37:42,000 --> 02:37:44,160
with this step just read on the command

3527
02:37:44,160 --> 02:37:47,760
it should work and please make a note of

3528
02:37:47,760 --> 02:37:49,439
this ip address and the username and the

3529
02:37:49,439 --> 02:37:51,920
password

3530
02:37:55,280 --> 02:37:57,680
and if you look at the parts cube ctl

3531
02:37:57,680 --> 02:37:59,520
get poi iphone a

3532
02:37:59,520 --> 02:38:01,120
you should see some new ports coming up

3533
02:38:01,120 --> 02:38:02,960
it says like container creating it will

3534
02:38:02,960 --> 02:38:04,560
create around seven or eight containers

3535
02:38:04,560 --> 02:38:06,160
which we'll be using for monitoring the

3536
02:38:06,160 --> 02:38:07,359
stuff

3537
02:38:07,359 --> 02:38:09,359
so while this is happening i would like

3538
02:38:09,359 --> 02:38:11,120
to go ahead and uh

3539
02:38:11,120 --> 02:38:14,080
discuss about some theory part shouldn't

3540
02:38:14,080 --> 02:38:17,439
take more than one or two minutes

3541
02:38:19,200 --> 02:38:21,120
so you might be wondering like why are

3542
02:38:21,120 --> 02:38:22,800
we even doing this after all the

3543
02:38:22,800 --> 02:38:24,880
monitoring stuff because a kubernetes

3544
02:38:24,880 --> 02:38:26,800
cluster has multiple components and

3545
02:38:26,800 --> 02:38:29,280
layers and across each of them we will

3546
02:38:29,280 --> 02:38:31,040
find different failure points that we

3547
02:38:31,040 --> 02:38:33,600
need to monitor these are

3548
02:38:33,600 --> 02:38:35,359
we'll be looking at some uh typical use

3549
02:38:35,359 --> 02:38:37,120
cases of monitoring today

3550
02:38:37,120 --> 02:38:38,960
uh especially by monitoring the cluster

3551
02:38:38,960 --> 02:38:40,080
you can get

3552
02:38:40,080 --> 02:38:42,160
an across the board view of overall

3553
02:38:42,160 --> 02:38:44,080
platform health and capacity

3554
02:38:44,080 --> 02:38:45,760
specific use cases could be like cluster

3555
02:38:45,760 --> 02:38:47,840
resource usage project and team

3556
02:38:47,840 --> 02:38:49,840
chargeback or node availability and

3557
02:38:49,840 --> 02:38:50,800
health

3558
02:38:50,800 --> 02:38:52,720
likewise we will also look into like

3559
02:38:52,720 --> 02:38:54,720
missing and the failed ports the number

3560
02:38:54,720 --> 02:38:57,040
of running pods or the secrets and all

3561
02:38:57,040 --> 02:38:58,240
kinds of stuff like everything like

3562
02:38:58,240 --> 02:38:59,760
application availability application

3563
02:38:59,760 --> 02:39:02,080
health and performance and i needless to

3564
02:39:02,080 --> 02:39:03,920
say like the monitoring is place a very

3565
02:39:03,920 --> 02:39:05,520
vital role for any infrastructure and

3566
02:39:05,520 --> 02:39:08,560
kubernetes is no exemption

3567
02:39:08,560 --> 02:39:10,960
so let's start

3568
02:39:10,960 --> 02:39:14,479
so i will try to access

3569
02:39:14,479 --> 02:39:18,560
my monitoring stack on this url

3570
02:39:21,280 --> 02:39:23,760
for 2000

3571
02:39:23,760 --> 02:39:24,960
it will ask you for the username and

3572
02:39:24,960 --> 02:39:28,399
password i have just logged in so

3573
02:39:28,800 --> 02:39:31,840
in the document i have given to json

3574
02:39:31,840 --> 02:39:33,760
files that needs to be downloaded please

3575
02:39:33,760 --> 02:39:35,840
make sure you download them and we'll be

3576
02:39:35,840 --> 02:39:38,000
using them in the workshop just copy and

3577
02:39:38,000 --> 02:39:41,120
paste that url in the browser

3578
02:39:41,120 --> 02:39:43,680
and if you have any issues with that url

3579
02:39:43,680 --> 02:39:45,760
just copy them in a text pad format it

3580
02:39:45,760 --> 02:39:47,840
and then use it in the command prompt

3581
02:39:47,840 --> 02:39:49,600
so what i will do is once after you

3582
02:39:49,600 --> 02:39:52,160
download those two json files just click

3583
02:39:52,160 --> 02:39:53,280
on this

3584
02:39:53,280 --> 02:39:54,640
plus sign

3585
02:39:54,640 --> 02:39:57,359
and you need to click on import

3586
02:39:57,359 --> 02:40:00,000
so click on upload json file

3587
02:40:00,000 --> 02:40:02,240
and you should be downloading

3588
02:40:02,240 --> 02:40:04,640
those two json files and

3589
02:40:04,640 --> 02:40:07,840
load them humanities

3590
02:40:08,399 --> 02:40:11,520
so i'm just renaming it to prometheus

3591
02:40:11,520 --> 02:40:14,000
dashboard

3592
02:40:14,000 --> 02:40:16,080
make sure you always

3593
02:40:16,080 --> 02:40:18,319
search for this prometheus data source

3594
02:40:18,319 --> 02:40:21,520
like prometheus this is very important

3595
02:40:21,520 --> 02:40:23,520
and then click on import

3596
02:40:23,520 --> 02:40:27,840
and once the dashboard is imported

3597
02:40:28,319 --> 02:40:30,399
you should see some data being populated

3598
02:40:30,399 --> 02:40:31,920
on the screen

3599
02:40:31,920 --> 02:40:34,080
it will give you heaps of information

3600
02:40:34,080 --> 02:40:36,160
such as like the nodes this is like a

3601
02:40:36,160 --> 02:40:37,600
demo cluster that's the reason why you

3602
02:40:37,600 --> 02:40:38,960
see a limited information but in the

3603
02:40:38,960 --> 02:40:40,800
real time you have like the whole screen

3604
02:40:40,800 --> 02:40:42,560
like blowing up

3605
02:40:42,560 --> 02:40:44,160
like christmas tree

3606
02:40:44,160 --> 02:40:46,640
so here it will starting word that is

3607
02:40:46,640 --> 02:40:48,399
giving the information about like the

3608
02:40:48,399 --> 02:40:51,200
nodes or shop network one developer two

3609
02:40:51,200 --> 02:40:52,880
it is giving like the up time since when

3610
02:40:52,880 --> 02:40:55,120
it is up and running and the memory that

3611
02:40:55,120 --> 02:40:57,120
it has and the cpu that is being

3612
02:40:57,120 --> 02:40:58,479
utilized the memory that is being

3613
02:40:58,479 --> 02:41:01,120
utilized the screens and rides and heaps

3614
02:41:01,120 --> 02:41:03,840
of information

3615
02:41:03,920 --> 02:41:05,600
now let us

3616
02:41:05,600 --> 02:41:07,680
import the other one

3617
02:41:07,680 --> 02:41:11,080
json file

3618
02:41:23,920 --> 02:41:25,439
this is another kind of dashboard which

3619
02:41:25,439 --> 02:41:26,560
will give us like all the network

3620
02:41:26,560 --> 02:41:28,240
related activities the cluster memory

3621
02:41:28,240 --> 02:41:30,800
usage if you don't see any information

3622
02:41:30,800 --> 02:41:32,319
immediately just give it some time

3623
02:41:32,319 --> 02:41:34,080
because still the containers are coming

3624
02:41:34,080 --> 02:41:36,560
up because the vm is a small vm it might

3625
02:41:36,560 --> 02:41:37,840
take some time everything however it

3626
02:41:37,840 --> 02:41:39,680
will slowly show up all the information

3627
02:41:39,680 --> 02:41:42,479
the next few minutes

3628
02:41:42,640 --> 02:41:45,200
so this way this is how we can use the

3629
02:41:45,200 --> 02:41:47,279
mounting stuff now let us dive into some

3630
02:41:47,279 --> 02:41:48,880
more interesting stuff let us see how we

3631
02:41:48,880 --> 02:41:50,399
can actually identify different kinds of

3632
02:41:50,399 --> 02:41:51,680
attacks that are happening inside the

3633
02:41:51,680 --> 02:41:56,399
cluster so let us start with uh

3634
02:41:57,520 --> 02:41:58,960
let's click on this button called

3635
02:41:58,960 --> 02:42:01,438
explore

3636
02:42:02,800 --> 02:42:05,840
explore i want to use just choose loki

3637
02:42:05,840 --> 02:42:08,160
loki will help us to get all the events

3638
02:42:08,160 --> 02:42:09,840
or the audit logs that are happening

3639
02:42:09,840 --> 02:42:11,120
audit events that are happening inside

3640
02:42:11,120 --> 02:42:12,560
the cluster and prometheus will give us

3641
02:42:12,560 --> 02:42:14,319
all the resource usage so let us start

3642
02:42:14,319 --> 02:42:16,560
with loki

3643
02:42:16,560 --> 02:42:17,520
and

3644
02:42:17,520 --> 02:42:19,279
i know this is all together a different

3645
02:42:19,279 --> 02:42:21,200
uh thing like writing these queries is

3646
02:42:21,200 --> 02:42:23,520
not the scope of this workshop but i

3647
02:42:23,520 --> 02:42:25,520
have already written some queries for

3648
02:42:25,520 --> 02:42:27,040
you and i have put them in the document

3649
02:42:27,040 --> 02:42:29,840
you can just try them but just to test

3650
02:42:29,840 --> 02:42:32,000
like click on the log browser

3651
02:42:32,000 --> 02:42:34,880
and then let us choose the pod here

3652
02:42:34,880 --> 02:42:38,240
and then always

3653
02:42:38,840 --> 02:42:41,040
choose make sure you always choose the

3654
02:42:41,040 --> 02:42:43,120
control plane pod because control pane

3655
02:42:43,120 --> 02:42:46,479
will have all the juicy information

3656
02:42:46,479 --> 02:42:48,800
where is the control okay this is the

3657
02:42:48,800 --> 02:42:50,880
kubernetes api server workshop control

3658
02:42:50,880 --> 02:42:52,160
plane

3659
02:42:52,160 --> 02:42:54,479
and for the last one hour

3660
02:42:54,479 --> 02:42:56,399
show logs

3661
02:42:56,399 --> 02:42:57,600
there we go

3662
02:42:57,600 --> 02:42:59,600
or maybe if you want to see for more

3663
02:42:59,600 --> 02:43:03,279
just click on like last three hours

3664
02:43:03,279 --> 02:43:04,720
here we go it will give all the audit

3665
02:43:04,720 --> 02:43:05,840
logs that are happening inside the

3666
02:43:05,840 --> 02:43:08,160
cluster so for example let us start and

3667
02:43:08,160 --> 02:43:10,240
say if you want to identify any requests

3668
02:43:10,240 --> 02:43:11,760
that are coming from the anonymous group

3669
02:43:11,760 --> 02:43:13,520
or the anonymous users of the company's

3670
02:43:13,520 --> 02:43:14,800
resources

3671
02:43:14,800 --> 02:43:16,640
let us see how we can actually identify

3672
02:43:16,640 --> 02:43:20,039
uh these things

3673
02:43:43,439 --> 02:43:44,960
one second

3674
02:43:44,960 --> 02:43:48,679
bringing up my notes

3675
02:43:58,399 --> 02:44:00,800
yep there we go and let us give

3676
02:44:00,800 --> 02:44:03,600
something some power supply called

3677
02:44:03,600 --> 02:44:06,600
you

3678
02:44:38,800 --> 02:44:40,800
so if you look at i'm passing the flag

3679
02:44:40,800 --> 02:44:42,399
called anonymous to identify all the

3680
02:44:42,399 --> 02:44:43,680
anonymous requests that are happening

3681
02:44:43,680 --> 02:44:45,680
inside the cluster this has brought up

3682
02:44:45,680 --> 02:44:47,040
some hey these are the anonymous

3683
02:44:47,040 --> 02:44:48,720
requests that are happening

3684
02:44:48,720 --> 02:44:50,240
so probably if you click it it will show

3685
02:44:50,240 --> 02:44:52,560
you like oh the time where the anonymous

3686
02:44:52,560 --> 02:44:54,800
request has come from which end point it

3687
02:44:54,800 --> 02:44:58,358
is actually hitting

3688
02:45:00,080 --> 02:45:01,840
along with it or these are the anonymous

3689
02:45:01,840 --> 02:45:03,120
requests that are happening inside the

3690
02:45:03,120 --> 02:45:04,399
cluster out of which if you want to

3691
02:45:04,399 --> 02:45:06,640
extract only the logs which are like

3692
02:45:06,640 --> 02:45:08,720
successful

3693
02:45:08,720 --> 02:45:12,000
so you can pass like 200

3694
02:45:12,000 --> 02:45:14,080
it will further uh drill down everything

3695
02:45:14,080 --> 02:45:15,439
it will give you all the results which

3696
02:45:15,439 --> 02:45:17,359
are like successful also it says if you

3697
02:45:17,359 --> 02:45:19,600
look at this one it says user system

3698
02:45:19,600 --> 02:45:21,760
anonymous this is the source ip and the

3699
02:45:21,760 --> 02:45:24,000
user agent response status and the code

3700
02:45:24,000 --> 02:45:26,399
200 and the ip and the end point that

3701
02:45:26,399 --> 02:45:27,840
they are

3702
02:45:27,840 --> 02:45:29,920
so this is how you can actually

3703
02:45:29,920 --> 02:45:31,200
for example

3704
02:45:31,200 --> 02:45:34,720
let us do a quick stuff

3705
02:45:36,399 --> 02:45:38,319
let us make some uh

3706
02:45:38,319 --> 02:45:43,399
curl requests as an anonymous user

3707
02:45:51,279 --> 02:45:52,000
so

3708
02:45:52,000 --> 02:45:56,160
curlifun k we are trying to access nodes

3709
02:45:56,160 --> 02:45:59,680
and we are trying to access pods

3710
02:45:59,680 --> 02:46:02,240
or we are trying to access

3711
02:46:02,240 --> 02:46:03,760
secrets

3712
02:46:03,760 --> 02:46:06,240
the address one more time secrets as i'm

3713
02:46:06,240 --> 02:46:10,840
creating some junk data for the example

3714
02:46:14,479 --> 02:46:17,279
now let me

3715
02:46:17,279 --> 02:46:20,640
reduce the time to the last five minutes

3716
02:46:20,640 --> 02:46:22,720
and if you look at

3717
02:46:22,720 --> 02:46:24,000
these are the logs that have been

3718
02:46:24,000 --> 02:46:27,120
successful in the last five minutes

3719
02:46:27,120 --> 02:46:28,479
so if you look at

3720
02:46:28,479 --> 02:46:30,479
this is the stuff that we did just a few

3721
02:46:30,479 --> 02:46:31,920
seconds ago we are trying to hit the

3722
02:46:31,920 --> 02:46:33,520
pods

3723
02:46:33,520 --> 02:46:36,160
or we are trying to hit the other stuff

3724
02:46:36,160 --> 02:46:38,880
likewise

3725
02:46:38,880 --> 02:46:41,120
if you want to further drill down

3726
02:46:41,120 --> 02:46:42,960
anonymous

3727
02:46:42,960 --> 02:46:45,600
if you want to extract the data where

3728
02:46:45,600 --> 02:46:47,680
you know most anonymously is trying to

3729
02:46:47,680 --> 02:46:50,479
access the secrets

3730
02:46:50,479 --> 02:46:54,399
so this is how we filter the data

3731
02:46:54,560 --> 02:46:57,600
so press class finance there we go it

3732
02:46:57,600 --> 02:46:59,760
says an anonymous user is trying to

3733
02:46:59,760 --> 02:47:02,160
access the verb secrets so this way you

3734
02:47:02,160 --> 02:47:04,160
can actually identify any anonymous and

3735
02:47:04,160 --> 02:47:05,520
any anomalies

3736
02:47:05,520 --> 02:47:06,880
behavior that is happening inside the

3737
02:47:06,880 --> 02:47:08,160
cluster

3738
02:47:08,160 --> 02:47:10,240
or for example

3739
02:47:10,240 --> 02:47:13,680
if you want to identify

3740
02:47:13,840 --> 02:47:15,439
the total number of requests that are

3741
02:47:15,439 --> 02:47:16,870
actually happening

3742
02:47:16,870 --> 02:47:19,600
[Music]

3743
02:47:19,600 --> 02:47:21,040
it gives you like hey these many

3744
02:47:21,040 --> 02:47:22,479
requests that have happened i don't like

3745
02:47:22,479 --> 02:47:23,920
six requests

3746
02:47:23,920 --> 02:47:25,439
uh somebody's trying to access in the

3747
02:47:25,439 --> 02:47:27,439
last 60 minutes this is how you can

3748
02:47:27,439 --> 02:47:29,840
actually define or write some additional

3749
02:47:29,840 --> 02:47:30,800
stuff

3750
02:47:30,800 --> 02:47:32,960
so

3751
02:47:33,279 --> 02:47:35,200
there is like heaps of other information

3752
02:47:35,200 --> 02:47:36,880
that we can actually see now let's look

3753
02:47:36,880 --> 02:47:39,120
at the prometheus stuff

3754
02:47:39,120 --> 02:47:41,520
if you choose like the prometheus here

3755
02:47:41,520 --> 02:47:44,000
and if you click on metrics

3756
02:47:44,000 --> 02:47:45,600
there are like heaps of metrics that

3757
02:47:45,600 --> 02:47:47,600
comes by default with prometheus if you

3758
02:47:47,600 --> 02:47:49,520
go to api server it will give you all

3759
02:47:49,520 --> 02:47:52,000
the information such as like

3760
02:47:52,000 --> 02:47:54,160
the total number of api audits even

3761
02:47:54,160 --> 02:47:55,359
total

3762
02:47:55,359 --> 02:47:59,359
for example if you look at these things

3763
02:47:59,600 --> 02:48:03,720
or audit level total

3764
02:48:03,760 --> 02:48:06,240
inflate request encryption

3765
02:48:06,240 --> 02:48:09,680
or init events total

3766
02:48:11,200 --> 02:48:12,880
can get lots of information likewise for

3767
02:48:12,880 --> 02:48:13,840
authenticated if you want to see

3768
02:48:13,840 --> 02:48:15,279
authenticated user requests these are

3769
02:48:15,279 --> 02:48:17,120
the number of requests that have

3770
02:48:17,120 --> 02:48:19,040
authenticated users done they're like

3771
02:48:19,040 --> 02:48:20,319
heaps of information that basically

3772
02:48:20,319 --> 02:48:22,479
comes with this thing

3773
02:48:22,479 --> 02:48:25,040
likewise i have given i have written

3774
02:48:25,040 --> 02:48:27,359
some additional

3775
02:48:27,359 --> 02:48:30,640
things in the document

3776
02:48:30,640 --> 02:48:34,560
example cube or container info

3777
02:48:34,560 --> 02:48:36,160
it will give all the pods on the

3778
02:48:36,160 --> 02:48:37,840
containers info running inside the

3779
02:48:37,840 --> 02:48:40,000
cluster it is the name and this is the

3780
02:48:40,000 --> 02:48:42,160
container where it is running

3781
02:48:42,160 --> 02:48:43,760
so for example if you want to see the

3782
02:48:43,760 --> 02:48:46,160
information of the nodes

3783
02:48:46,160 --> 02:48:47,760
cube mode created

3784
02:48:47,760 --> 02:48:49,120
so it gives all the information about

3785
02:48:49,120 --> 02:48:50,960
the nodes and the other stuff if you

3786
02:48:50,960 --> 02:48:54,800
want to see like the list of the secrets

3787
02:48:55,520 --> 02:48:57,840
hcl secret

3788
02:48:57,840 --> 02:48:59,520
you a list of all the secrets that are

3789
02:48:59,520 --> 02:49:01,200
inside the cluster

3790
02:49:01,200 --> 02:49:03,279
so this is how you can actually leverage

3791
02:49:03,279 --> 02:49:05,040
the monitoring stuff monitoring is all

3792
02:49:05,040 --> 02:49:06,880
together different animal to what extent

3793
02:49:06,880 --> 02:49:08,080
you can take it it's up to you there

3794
02:49:08,080 --> 02:49:09,439
like many other tutorials that are

3795
02:49:09,439 --> 02:49:11,040
available to do like the monitoring

3796
02:49:11,040 --> 02:49:12,720
stuff

3797
02:49:12,720 --> 02:49:15,120
we are actually running out of time we

3798
02:49:15,120 --> 02:49:16,800
have like one hour we have a few more

3799
02:49:16,800 --> 02:49:18,399
things to cover

3800
02:49:18,399 --> 02:49:20,000
but in the documentation there are like

3801
02:49:20,000 --> 02:49:21,920
heaps of other stuff for you to

3802
02:49:21,920 --> 02:49:23,600
try and see for example if you want to

3803
02:49:23,600 --> 02:49:25,840
see the containers that have been uh

3804
02:49:25,840 --> 02:49:27,040
deleted

3805
02:49:27,040 --> 02:49:29,279
or which has been seen in the last 60

3806
02:49:29,279 --> 02:49:31,760
seconds

3807
02:49:32,640 --> 02:49:34,160
so it will give you all the containers

3808
02:49:34,160 --> 02:49:35,920
that have been deleted

3809
02:49:35,920 --> 02:49:37,760
likewise we have we want to identify the

3810
02:49:37,760 --> 02:49:39,359
total number of namespaces there are

3811
02:49:39,359 --> 02:49:40,880
different operations that you can do

3812
02:49:40,880 --> 02:49:42,960
using like prometheus and grafana this

3813
02:49:42,960 --> 02:49:44,479
is just for example likewise you can

3814
02:49:44,479 --> 02:49:46,240
also use yellowstack like many other

3815
02:49:46,240 --> 02:49:48,880
things so i leave it to you guys to

3816
02:49:48,880 --> 02:49:50,800
try different other metrics inside the

3817
02:49:50,800 --> 02:49:52,800
kubernetes

3818
02:49:52,800 --> 02:49:54,160
and everything is defined in the

3819
02:49:54,160 --> 02:49:55,520
documentation with different queries you

3820
02:49:55,520 --> 02:49:57,520
can try that stuff

3821
02:49:57,520 --> 02:50:00,160
so now

3822
02:50:00,880 --> 02:50:02,479
let us look at like the build phase

3823
02:50:02,479 --> 02:50:04,720
security so build phase security is

3824
02:50:04,720 --> 02:50:07,359
where we actually define or look into

3825
02:50:07,359 --> 02:50:08,960
the security one during the build stage

3826
02:50:08,960 --> 02:50:11,200
for example we have used oppa that is

3827
02:50:11,200 --> 02:50:13,279
considered as a build state security one

3828
02:50:13,279 --> 02:50:15,279
building or deploying a cluster it is

3829
02:50:15,279 --> 02:50:17,520
being validated against a set of rules

3830
02:50:17,520 --> 02:50:19,359
likewise when building or deploying the

3831
02:50:19,359 --> 02:50:20,720
containers we can also perform like

3832
02:50:20,720 --> 02:50:22,399
document scanning or container scanning

3833
02:50:22,399 --> 02:50:23,760
i'm sure most of you must have already

3834
02:50:23,760 --> 02:50:26,080
done this but still let us see a quick

3835
02:50:26,080 --> 02:50:27,120
example

3836
02:50:27,120 --> 02:50:30,399
for that i would like to use

3837
02:50:30,399 --> 02:50:35,720
a tool called uh i'm core drive

3838
02:50:40,800 --> 02:50:42,319
this is one of my favorite tools which i

3839
02:50:42,319 --> 02:50:44,479
use mostly for scanning like many other

3840
02:50:44,479 --> 02:50:46,000
tools that are available but this is my

3841
02:50:46,000 --> 02:50:49,000
favorite

3842
02:50:54,479 --> 02:50:57,840
so it has been installed

3843
02:50:58,720 --> 02:51:01,720
right

3844
02:51:24,399 --> 02:51:26,319
i think it's populating the database for

3845
02:51:26,319 --> 02:51:27,439
the very first time that's why it's

3846
02:51:27,439 --> 02:51:28,720
taking uh

3847
02:51:28,720 --> 02:51:33,160
some time let's give a few minutes

3848
02:51:42,640 --> 02:51:44,960
there you go it is up and running now

3849
02:51:44,960 --> 02:51:47,840
let us list some docker images that are

3850
02:51:47,840 --> 02:51:49,920
running inside the machine yep we have a

3851
02:51:49,920 --> 02:51:52,160
few images

3852
02:51:52,160 --> 02:51:54,800
now use scribe and let us test some

3853
02:51:54,800 --> 02:51:57,439
image for example maybe this one or i

3854
02:51:57,439 --> 02:51:59,200
provide the image id

3855
02:51:59,200 --> 02:52:02,640
describe the image id

3856
02:52:08,960 --> 02:52:11,040
it is like setting up the tv should be

3857
02:52:11,040 --> 02:52:14,600
done in a few seconds

3858
02:53:04,000 --> 02:53:07,000
uh

3859
02:53:10,080 --> 02:53:14,039
it is loading the image

3860
02:53:34,960 --> 02:53:39,240
so it's scanning the image

3861
02:54:56,479 --> 02:54:58,560
there you go the scan has been completed

3862
02:54:58,560 --> 02:55:00,560
and it says like hey these many

3863
02:55:00,560 --> 02:55:02,560
vulnerabilities exist inside this docker

3864
02:55:02,560 --> 02:55:04,160
image

3865
02:55:04,160 --> 02:55:05,920
so this is one example

3866
02:55:05,920 --> 02:55:07,840
like you can even imagine like the

3867
02:55:07,840 --> 02:55:10,080
number of bugs that it has just one

3868
02:55:10,080 --> 02:55:11,760
image has

3869
02:55:11,760 --> 02:55:13,920
like almost in hundreds so this is one

3870
02:55:13,920 --> 02:55:15,760
of the reason why like scanning a docker

3871
02:55:15,760 --> 02:55:17,439
image is always like plays a very vital

3872
02:55:17,439 --> 02:55:20,160
role in securing it says like 1004

3873
02:55:20,160 --> 02:55:22,479
vulnerabilities

3874
02:55:22,479 --> 02:55:25,359
in just one image

3875
02:55:25,359 --> 02:55:27,600
so i want you to try scanning some other

3876
02:55:27,600 --> 02:55:29,359
images as well like many other open

3877
02:55:29,359 --> 02:55:31,120
source or scanning tools but this is one

3878
02:55:31,120 --> 02:55:33,840
of my favorites

3879
02:55:35,600 --> 02:55:37,920
now we will look at some uh other

3880
02:55:37,920 --> 02:55:39,920
interesting tools like trivia and play

3881
02:55:39,920 --> 02:55:40,880
they have been provided in the

3882
02:55:40,880 --> 02:55:43,040
documentation we can scan them now we

3883
02:55:43,040 --> 02:55:45,200
will look at uh the interesting aspect

3884
02:55:45,200 --> 02:55:47,279
which is like runtime security

3885
02:55:47,279 --> 02:55:49,279
so what is runtime security it means

3886
02:55:49,279 --> 02:55:51,040
like betting all activities within the

3887
02:55:51,040 --> 02:55:52,800
container application environment from

3888
02:55:52,800 --> 02:55:54,720
analysis of container and host activity

3889
02:55:54,720 --> 02:55:56,240
to monitoring the protocols and the

3890
02:55:56,240 --> 02:55:59,040
payloads of all the network connections

3891
02:55:59,040 --> 02:56:01,200
while creating an environment prevents

3892
02:56:01,200 --> 02:56:03,040
the security of risks from becoming the

3893
02:56:03,040 --> 02:56:04,640
realities paramount

3894
02:56:04,640 --> 02:56:06,240
monitoring containerized applications

3895
02:56:06,240 --> 02:56:08,800
that run time is still essential runtime

3896
02:56:08,800 --> 02:56:10,399
protection involves monitoring every

3897
02:56:10,399 --> 02:56:11,840
cluster for all containerized

3898
02:56:11,840 --> 02:56:14,640
applications running in each node

3899
02:56:14,640 --> 02:56:17,760
so for this uh i will be using cystic

3900
02:56:17,760 --> 02:56:19,520
falco

3901
02:56:19,520 --> 02:56:21,600
so hope you set it up it's like pretty

3902
02:56:21,600 --> 02:56:24,600
straightforward

3903
02:56:26,160 --> 02:56:28,240
so this is the only one command that you

3904
02:56:28,240 --> 02:56:29,359
should be

3905
02:56:29,359 --> 02:56:30,880
running in your machines

3906
02:56:30,880 --> 02:56:33,200
launch runtime security stack workshop

3907
02:56:33,200 --> 02:56:34,800
python there you can just copy the

3908
02:56:34,800 --> 02:56:37,279
command as is from the documentation and

3909
02:56:37,279 --> 02:56:39,840
uh run it and when it actually asks for

3910
02:56:39,840 --> 02:56:42,000
the slack webhook url just press enter

3911
02:56:42,000 --> 02:56:43,359
if you have one you may give it

3912
02:56:43,359 --> 02:56:46,240
otherwise just press enter

3913
02:56:46,240 --> 02:56:48,080
the reason why i have set it up slack is

3914
02:56:48,080 --> 02:56:49,359
like very straightforward if something

3915
02:56:49,359 --> 02:56:50,800
happens if there is some normally it

3916
02:56:50,800 --> 02:56:54,000
will immediately alert you on slack

3917
02:56:54,000 --> 02:56:56,160
and once you have everything up and

3918
02:56:56,160 --> 02:56:58,160
running like once you shoot this command

3919
02:56:58,160 --> 02:56:59,520
it will bring up some containers in the

3920
02:56:59,520 --> 02:57:00,960
background which may take around two to

3921
02:57:00,960 --> 02:57:04,080
three minutes based on your speed

3922
02:57:04,080 --> 02:57:06,000
so it is already set up in my machine i

3923
02:57:06,000 --> 02:57:08,000
will quickly walk you through this

3924
02:57:08,000 --> 02:57:10,800
runtime stuff

3925
02:57:11,439 --> 02:57:13,040
cool

3926
02:57:13,040 --> 02:57:14,800
so this is how it looks like runtime

3927
02:57:14,800 --> 02:57:17,279
security so we have so far we have done

3928
02:57:17,279 --> 02:57:19,120
so much stuff and everything has been

3929
02:57:19,120 --> 02:57:20,399
recorded

3930
02:57:20,399 --> 02:57:22,000
and these are the events that have

3931
02:57:22,000 --> 02:57:23,439
happened

3932
02:57:23,439 --> 02:57:25,200
for example we try to do some remote

3933
02:57:25,200 --> 02:57:28,160
code execution on the port 7777

3934
02:57:28,160 --> 02:57:29,840
and netcat remote for execution by

3935
02:57:29,840 --> 02:57:32,640
container launch privileged container

3936
02:57:32,640 --> 02:57:34,399
and these other stuff for example let's

3937
02:57:34,399 --> 02:57:36,160
do some

3938
02:57:36,160 --> 02:57:40,520
hands-on demo and see what happens

3939
02:57:56,000 --> 02:57:57,600
and there is a file called event

3940
02:57:57,600 --> 02:57:59,279
generator which will basically generate

3941
02:57:59,279 --> 02:58:02,080
some test data for us to inspect so i

3942
02:58:02,080 --> 02:58:04,319
will just apply only before applying

3943
02:58:04,319 --> 02:58:08,479
lettuce to it one hands-on

3944
02:58:09,120 --> 02:58:11,680
i will execute into one of the shell

3945
02:58:11,680 --> 02:58:15,359
called exiga alpine bin dash

3946
02:58:15,359 --> 02:58:18,160
cool i'm inside the container ls and

3947
02:58:18,160 --> 02:58:20,560
just do some stuff like netcat

3948
02:58:20,560 --> 02:58:22,800
or

3949
02:58:24,240 --> 02:58:27,040
echo

3950
02:58:27,040 --> 02:58:28,319
txt

3951
02:58:28,319 --> 02:58:30,080
so whatever we have done so far should

3952
02:58:30,080 --> 02:58:32,880
be reflecting in the run security stuff

3953
02:58:32,880 --> 02:58:35,120
so there we go this is the stuff which i

3954
02:58:35,120 --> 02:58:37,760
have done

3955
02:58:38,080 --> 02:58:40,479
terminal shell in a container

3956
02:58:40,479 --> 02:58:42,080
and it will also give us the information

3957
02:58:42,080 --> 02:58:43,680
about the name of the container every

3958
02:58:43,680 --> 02:58:45,359
stuff this has happened just like few

3959
02:58:45,359 --> 02:58:47,840
seconds ago

3960
02:58:49,279 --> 02:58:51,920
and we launched a command called netcat

3961
02:58:51,920 --> 02:58:53,520
launched suspicious and put two in the

3962
02:58:53,520 --> 02:58:55,760
container and then we tried to create a

3963
02:58:55,760 --> 02:58:58,319
file called test.txt echo

3964
02:58:58,319 --> 02:58:59,920
so this is like the runtime production

3965
02:58:59,920 --> 02:59:01,680
everything every anytime there is an

3966
02:59:01,680 --> 02:59:04,560
anomaly it will immediately alert us so

3967
02:59:04,560 --> 02:59:07,680
the reason why i have used slack is that

3968
02:59:07,680 --> 02:59:11,040
because every time there is an anomaly

3969
02:59:11,040 --> 02:59:13,920
it will alert me on the slack channel so

3970
02:59:13,920 --> 02:59:16,000
runtime security monitoring

3971
02:59:16,000 --> 02:59:17,359
so many alerts since the start of the

3972
02:59:17,359 --> 02:59:19,840
workshop

3973
02:59:20,240 --> 02:59:22,000
but these are the recent ones recently i

3974
02:59:22,000 --> 02:59:24,160
have created a file for test.txt in the

3975
02:59:24,160 --> 02:59:26,880
container like alpine so this is one

3976
02:59:26,880 --> 02:59:28,640
and the next one

3977
02:59:28,640 --> 02:59:30,880
like we try to exit and gain access to

3978
02:59:30,880 --> 02:59:32,800
one of the containers

3979
02:59:32,800 --> 02:59:34,319
so this is like the runtime protection

3980
02:59:34,319 --> 02:59:36,080
every time there is an anomaly it

3981
02:59:36,080 --> 02:59:37,840
immediately alerts us

3982
02:59:37,840 --> 02:59:40,080
since setting up this lab hasn't been

3983
02:59:40,080 --> 02:59:42,080
easy like monitoring and everything like

3984
02:59:42,080 --> 02:59:44,080
the runtime protection i have made your

3985
02:59:44,080 --> 02:59:46,240
lives easier you just need to like run

3986
02:59:46,240 --> 02:59:47,359
one command to set up this

3987
02:59:47,359 --> 02:59:49,040
infrastructure and then just try and

3988
02:59:49,040 --> 02:59:51,600
practice it

3989
02:59:53,600 --> 02:59:55,359
so likewise you can try different stuff

3990
02:59:55,359 --> 02:59:57,600
and i also have for something called

3991
02:59:57,600 --> 02:59:59,760
event generator which will generate some

3992
02:59:59,760 --> 03:00:03,439
test events cube cdl apply icon f even

3993
03:00:03,439 --> 03:00:05,920
generated dot ammo

3994
03:00:05,920 --> 03:00:11,319
it has been created qcdr will get void

3995
03:00:12,800 --> 03:00:16,160
event generator

3996
03:00:20,399 --> 03:00:24,240
that should be job

3997
03:00:24,240 --> 03:00:26,399
even general job has been completed it

3998
03:00:26,399 --> 03:00:30,599
must have generated some colors

3999
03:00:38,479 --> 03:00:40,720
so these are the some alerts that has uh

4000
03:00:40,720 --> 03:00:42,319
created

4001
03:00:42,319 --> 03:00:45,039
dashboard

4002
03:00:45,200 --> 03:00:46,960
so that's how you can actually use like

4003
03:00:46,960 --> 03:00:48,240
the runtime protection runtime

4004
03:00:48,240 --> 03:00:52,920
production plays a very vital role

4005
03:00:56,800 --> 03:00:59,920
uh well one thing i would like to show

4006
03:00:59,920 --> 03:01:02,000
which i didn't show in the

4007
03:01:02,000 --> 03:01:04,000
beginning of the workshop is like the

4008
03:01:04,000 --> 03:01:07,359
crypto mining attack i'll just uh do it

4009
03:01:07,359 --> 03:01:09,040
you can do it in your machine or there's

4010
03:01:09,040 --> 03:01:10,399
a possibility that it might crash

4011
03:01:10,399 --> 03:01:11,920
however let me try in my machine or you

4012
03:01:11,920 --> 03:01:13,520
can do it along with me

4013
03:01:13,520 --> 03:01:16,520
so

4014
03:01:19,710 --> 03:01:22,740
[Music]

4015
03:01:25,439 --> 03:01:26,800
in the attack scenarios we have

4016
03:01:26,800 --> 03:01:28,960
something called crypto mining attack

4017
03:01:28,960 --> 03:01:32,839
just follow those steps

4018
03:01:35,120 --> 03:01:39,319
we will be deploying one container

4019
03:01:51,600 --> 03:01:54,600
message

4020
03:02:06,160 --> 03:02:09,200
let's get into temp folder and download

4021
03:02:09,200 --> 03:02:12,520
this file

4022
03:02:16,080 --> 03:02:17,920
at the same time we will be monitoring

4023
03:02:17,920 --> 03:02:19,840
this wasn't like the oppa monitoring

4024
03:02:19,840 --> 03:02:22,840
stack

4025
03:02:33,359 --> 03:02:35,120
what the file has been downloaded let us

4026
03:02:35,120 --> 03:02:38,080
see what this does

4027
03:02:39,439 --> 03:02:41,279
i'm running like an image called

4028
03:02:41,279 --> 03:02:43,520
cryptominer and it is doing something

4029
03:02:43,520 --> 03:02:46,319
else it is doing some kind of mining and

4030
03:02:46,319 --> 03:02:48,560
it is also has like the memory limits

4031
03:02:48,560 --> 03:02:50,560
and cpu limits set appropriately so that

4032
03:02:50,560 --> 03:02:52,960
it won't alert anything also the memory

4033
03:02:52,960 --> 03:02:54,479
request has been set so that it won't

4034
03:02:54,479 --> 03:02:56,560
consume too much

4035
03:02:56,560 --> 03:03:01,600
so cute ctl apply iphone f

4036
03:03:01,600 --> 03:03:04,640
ammo cool the pod miner is created so

4037
03:03:04,640 --> 03:03:06,720
while this is happening what i would do

4038
03:03:06,720 --> 03:03:10,560
is i will get into my opa

4039
03:03:10,840 --> 03:03:14,560
stack i'm sorry i get into my

4040
03:03:14,560 --> 03:03:17,120
monitoring stack

4041
03:03:17,120 --> 03:03:19,279
which is running on port 2000 which we

4042
03:03:19,279 --> 03:03:22,680
have seen before

4043
03:03:27,359 --> 03:03:31,040
so let us get into kubernetes dashboard

4044
03:03:31,040 --> 03:03:32,720
just keep observing this stuff we have

4045
03:03:32,720 --> 03:03:35,680
just launched the miner

4046
03:03:35,680 --> 03:03:37,920
and let us see how the behavior changes

4047
03:03:37,920 --> 03:03:40,920
here

4048
03:03:42,800 --> 03:03:45,120
let us observe like the used section and

4049
03:03:45,120 --> 03:03:46,640
also while this is happening let's see

4050
03:03:46,640 --> 03:03:49,279
some interesting stuff like the matrix

4051
03:03:49,279 --> 03:03:51,920
example let us choose uh loki and let us

4052
03:03:51,920 --> 03:03:53,600
see what this pod miner is actually

4053
03:03:53,600 --> 03:03:58,600
doing like log under the pods

4054
03:04:15,279 --> 03:04:18,279
um

4055
03:04:30,240 --> 03:04:32,479
oh the pod miner is still being created

4056
03:04:32,479 --> 03:04:34,640
that's why it is not showing up let's

4057
03:04:34,640 --> 03:04:37,840
give us a few more seconds

4058
03:04:43,040 --> 03:04:46,960
now the pod miner is up and running

4059
03:04:49,840 --> 03:04:52,240
loki

4060
03:04:53,279 --> 03:04:54,720
log browser

4061
03:04:54,720 --> 03:04:56,640
pods

4062
03:04:56,640 --> 03:05:00,800
or let us search for the miner pod

4063
03:05:03,439 --> 03:05:05,200
cool

4064
03:05:05,200 --> 03:05:07,840
show logs

4065
03:05:08,399 --> 03:05:10,160
so this is how also you can use the

4066
03:05:10,160 --> 03:05:11,840
monitoring source to see actually what's

4067
03:05:11,840 --> 03:05:14,880
happening inside a pod or a container

4068
03:05:14,880 --> 03:05:16,560
probably i would not want to discuss

4069
03:05:16,560 --> 03:05:18,080
this stuff this is out of the scope like

4070
03:05:18,080 --> 03:05:19,600
what's happening as a part of the crypto

4071
03:05:19,600 --> 03:05:21,359
mining but in the monitoring using the

4072
03:05:21,359 --> 03:05:22,880
monitoring stuff you can use you can

4073
03:05:22,880 --> 03:05:24,080
monitor like what's happening with the

4074
03:05:24,080 --> 03:05:27,840
containers and also

4075
03:05:28,640 --> 03:05:33,040
if you go back uh to like the dashboards

4076
03:05:33,040 --> 03:05:34,640
using one of the dashboards which we

4077
03:05:34,640 --> 03:05:36,319
have seen before

4078
03:05:36,319 --> 03:05:38,880
initially everything was like green and

4079
03:05:38,880 --> 03:05:40,399
now seems to be if you look at the cpu

4080
03:05:40,399 --> 03:05:43,359
utilization has increased to 96 98 and

4081
03:05:43,359 --> 03:05:45,359
the partition memory has utilization has

4082
03:05:45,359 --> 03:05:46,399
been increased

4083
03:05:46,399 --> 03:05:48,720
i'll quickly delete this one otherwise

4084
03:05:48,720 --> 03:05:51,359
it might crash my machine

4085
03:05:51,359 --> 03:05:55,600
cpl apply ctl delete so this is how

4086
03:05:55,600 --> 03:05:57,840
you can leverage monitoring stuff to

4087
03:05:57,840 --> 03:05:59,120
identify any

4088
03:05:59,120 --> 03:06:00,479
cryptomining attacks that are happening

4089
03:06:00,479 --> 03:06:02,560
inside the cluster you can directly see

4090
03:06:02,560 --> 03:06:04,399
what's happening with the pods using the

4091
03:06:04,399 --> 03:06:05,520
logs and also you can use like

4092
03:06:05,520 --> 03:06:07,760
utilization resources so within just

4093
03:06:07,760 --> 03:06:09,359
fraction of seconds utilization has

4094
03:06:09,359 --> 03:06:13,120
picked up has spiked up to like 96

4095
03:06:13,120 --> 03:06:14,720
if you leave it for a while the machine

4096
03:06:14,720 --> 03:06:16,640
might crash or the utilization might be

4097
03:06:16,640 --> 03:06:18,560
like very high not letting the other

4098
03:06:18,560 --> 03:06:22,000
resources to have enough resources

4099
03:06:22,479 --> 03:06:24,230
machine has become already

4100
03:06:24,230 --> 03:06:26,840
[Music]

4101
03:06:26,840 --> 03:06:30,080
slow but in the next one or two minutes

4102
03:06:30,080 --> 03:06:31,359
again everything should be like back to

4103
03:06:31,359 --> 03:06:33,279
green and back to normal so this is how

4104
03:06:33,279 --> 03:06:35,040
like the crypto mining attacks happen

4105
03:06:35,040 --> 03:06:36,479
and this is how we can actually raise

4106
03:06:36,479 --> 03:06:38,560
the monitoring stuff to identify and

4107
03:06:38,560 --> 03:06:40,160
defend against the victimizing attacks

4108
03:06:40,160 --> 03:06:42,319
we can also write some kind of slack

4109
03:06:42,319 --> 03:06:43,760
channels and alerting

4110
03:06:43,760 --> 03:06:45,200
possibly we can also use like the

4111
03:06:45,200 --> 03:06:46,800
runtime protection to identify these

4112
03:06:46,800 --> 03:06:50,119
kind of attacks

4113
03:07:08,960 --> 03:07:10,720
if you go through these logs you will

4114
03:07:10,720 --> 03:07:12,080
find somewhere about the cryptomining

4115
03:07:12,080 --> 03:07:14,319
stuff

4116
03:07:15,600 --> 03:07:16,960
it's been already one minute since i

4117
03:07:16,960 --> 03:07:17,920
deployed now if you look at the

4118
03:07:17,920 --> 03:07:20,000
utilization is coming down slowly back

4119
03:07:20,000 --> 03:07:21,920
to orange and then it will be like back

4120
03:07:21,920 --> 03:07:23,279
to normal because i have deleted my

4121
03:07:23,279 --> 03:07:26,640
crypto mining uh stuff

4122
03:07:31,600 --> 03:07:33,520
well that pretty much concludes uh like

4123
03:07:33,520 --> 03:07:36,000
the runtime security i just want to

4124
03:07:36,000 --> 03:07:38,080
cover like the last piece which are like

4125
03:07:38,080 --> 03:07:39,680
some useful tools which we use in the

4126
03:07:39,680 --> 03:07:40,960
real time

4127
03:07:40,960 --> 03:07:43,279
and uh i would like to start with

4128
03:07:43,279 --> 03:07:45,279
canines basically canines provides a

4129
03:07:45,279 --> 03:07:47,200
terminal or the ui to interact with your

4130
03:07:47,200 --> 03:07:48,960
kubernetes cluster it's a very handy

4131
03:07:48,960 --> 03:07:51,439
tool and the aim of this project is to

4132
03:07:51,439 --> 03:07:53,040
make it easy to navigate observe and

4133
03:07:53,040 --> 03:07:55,200
manage your applications in the wild and

4134
03:07:55,200 --> 03:07:57,120
canines continually watches communities

4135
03:07:57,120 --> 03:07:58,720
for changes and offers like subsequent

4136
03:07:58,720 --> 03:08:00,319
commands to interact with your observed

4137
03:08:00,319 --> 03:08:01,680
resources

4138
03:08:01,680 --> 03:08:03,840
so it has already been set up in your

4139
03:08:03,840 --> 03:08:05,680
vms you can just follow the commands

4140
03:08:05,680 --> 03:08:08,720
that i have provided in your machine in

4141
03:08:08,720 --> 03:08:11,760
your in the pdf so in order to bring up

4142
03:08:11,760 --> 03:08:15,680
canines the command is like just k9s

4143
03:08:15,680 --> 03:08:18,840
that's it and it will bring a beautiful

4144
03:08:18,840 --> 03:08:21,439
cli this is a cli though it looks like a

4145
03:08:21,439 --> 03:08:22,479
ui

4146
03:08:22,479 --> 03:08:25,120
so this is a my pod my cluster

4147
03:08:25,120 --> 03:08:26,399
information

4148
03:08:26,399 --> 03:08:28,000
if i choose it will provide me all the

4149
03:08:28,000 --> 03:08:29,520
information such as like different name

4150
03:08:29,520 --> 03:08:31,520
spaces powers and everything

4151
03:08:31,520 --> 03:08:32,319
so

4152
03:08:32,319 --> 03:08:35,200
you just need to press escape and shift

4153
03:08:35,200 --> 03:08:36,960
semicolon to run the commands for

4154
03:08:36,960 --> 03:08:38,240
example if i want to see all the

4155
03:08:38,240 --> 03:08:41,120
namespaces just namespace it will list

4156
03:08:41,120 --> 03:08:42,319
all the namespaces that are running

4157
03:08:42,319 --> 03:08:43,760
inside the cluster for example if you

4158
03:08:43,760 --> 03:08:45,040
want to see all the information of the

4159
03:08:45,040 --> 03:08:46,160
pods

4160
03:08:46,160 --> 03:08:50,399
cards likewise secrets secrets

4161
03:08:50,399 --> 03:08:52,319
or

4162
03:08:52,319 --> 03:08:53,840
deployments you give me all the

4163
03:08:53,840 --> 03:08:56,720
information about the deployments

4164
03:08:56,720 --> 03:08:58,720
now for example if you want to get a

4165
03:08:58,720 --> 03:09:00,240
shell access into one of the ports

4166
03:09:00,240 --> 03:09:02,319
choose the port that you want and here

4167
03:09:02,319 --> 03:09:03,920
it defines if you want like the shell

4168
03:09:03,920 --> 03:09:05,680
just press s

4169
03:09:05,680 --> 03:09:07,760
so i'm pressing yes and it will give me

4170
03:09:07,760 --> 03:09:10,800
a shell on inside that port that's so

4171
03:09:10,800 --> 03:09:12,399
handy this

4172
03:09:12,399 --> 03:09:14,160
so what else you can do it will if you

4173
03:09:14,160 --> 03:09:16,319
want to see like the deployment just

4174
03:09:16,319 --> 03:09:18,240
press y it will give you like the

4175
03:09:18,240 --> 03:09:21,120
complete manifestation file of

4176
03:09:21,120 --> 03:09:23,359
those deployments

4177
03:09:23,359 --> 03:09:24,239
and there are like many other things

4178
03:09:24,239 --> 03:09:25,760
that you can try and play with this

4179
03:09:25,760 --> 03:09:27,439
stuff

4180
03:09:27,439 --> 03:09:28,560
so

4181
03:09:28,560 --> 03:09:33,119
let me quickly go to the next one

4182
03:09:39,600 --> 03:09:41,920
i would like to show you

4183
03:09:41,920 --> 03:09:44,399
the tool or the tool called cube striker

4184
03:09:44,399 --> 03:09:48,399
which i have been working and building

4185
03:09:51,840 --> 03:09:55,120
last few months you can spin up the cube

4186
03:09:55,120 --> 03:09:59,200
striker with just one command

4187
03:09:59,200 --> 03:10:00,880
well i would like to show you the

4188
03:10:00,880 --> 03:10:05,200
documentation side of cube striker it is

4189
03:10:05,200 --> 03:10:08,200
cubestriker.io

4190
03:10:09,200 --> 03:10:10,960
there is the documentation click on box

4191
03:10:10,960 --> 03:10:12,880
at a glance it will give you like the

4192
03:10:12,880 --> 03:10:14,880
different editions it has like two types

4193
03:10:14,880 --> 03:10:16,319
of versions one is command line

4194
03:10:16,319 --> 03:10:17,359
interface the other one is the

4195
03:10:17,359 --> 03:10:19,520
application it will have like the

4196
03:10:19,520 --> 03:10:21,680
current capabilities it can do and how

4197
03:10:21,680 --> 03:10:23,520
you can actually spin up a container or

4198
03:10:23,520 --> 03:10:25,680
you can perform different kind of scans

4199
03:10:25,680 --> 03:10:26,640
everything is listed in the

4200
03:10:26,640 --> 03:10:28,800
documentation just give a go give it a

4201
03:10:28,800 --> 03:10:29,840
try

4202
03:10:29,840 --> 03:10:34,319
and it also exists on github

4203
03:10:35,359 --> 03:10:36,680
this is the page just type

4204
03:10:36,680 --> 03:10:38,319
githubcubestriker

4205
03:10:38,319 --> 03:10:40,720
and this is the link for the tool just

4206
03:10:40,720 --> 03:10:43,439
started because i'm going to uh release

4207
03:10:43,439 --> 03:10:44,399
a

4208
03:10:44,399 --> 03:10:46,560
good version with some major updates for

4209
03:10:46,560 --> 03:10:48,399
the black hat europe come which is

4210
03:10:48,399 --> 03:10:50,720
happening next month just keep an eye on

4211
03:10:50,720 --> 03:10:52,399
this one and share the word with your

4212
03:10:52,399 --> 03:10:54,399
community and with everyone and always

4213
03:10:54,399 --> 03:10:56,560
looking for contributors if you're lucky

4214
03:10:56,560 --> 03:10:58,160
to contribute like part of this project

4215
03:10:58,160 --> 03:10:59,760
just please let me know and i'm more

4216
03:10:59,760 --> 03:11:02,720
than happy to welcome

4217
03:11:02,720 --> 03:11:04,399
so this is the link

4218
03:11:04,399 --> 03:11:07,359
github and cubestriker

4219
03:11:07,359 --> 03:11:08,800
and this is the documentation cube

4220
03:11:08,800 --> 03:11:10,399
striker dot io

4221
03:11:10,399 --> 03:11:12,080
and let us see like the cube striker in

4222
03:11:12,080 --> 03:11:13,680
action at least the command line form so

4223
03:11:13,680 --> 03:11:15,840
we are inside the container

4224
03:11:15,840 --> 03:11:18,160
python iphone m

4225
03:11:18,160 --> 03:11:20,080
striker

4226
03:11:20,080 --> 03:11:23,840
will care of the cube striker

4227
03:11:24,800 --> 03:11:27,800
interesting

4228
03:11:40,840 --> 03:11:42,560
[Music]

4229
03:11:42,560 --> 03:11:45,200
just a small spilling mistake

4230
03:11:45,200 --> 03:11:47,439
it's nice and cute striker there you go

4231
03:11:47,439 --> 03:11:49,279
the cube track is up and running so it

4232
03:11:49,279 --> 03:11:51,359
will accept three types of inputs the

4233
03:11:51,359 --> 03:11:53,840
url or the ip address or the config file

4234
03:11:53,840 --> 03:11:55,920
or like the range of ip addresses which

4235
03:11:55,920 --> 03:11:57,760
can have like the list of master ids and

4236
03:11:57,760 --> 03:11:59,840
the worker nodes so in this scenario let

4237
03:11:59,840 --> 03:12:02,640
me scan using a url with an ip

4238
03:12:02,640 --> 03:12:05,840
so my

4239
03:12:09,520 --> 03:12:12,000
my ip address this is the ip address or

4240
03:12:12,000 --> 03:12:15,520
the url i just provided

4241
03:12:15,520 --> 03:12:17,520
so once if you provide the url in the ip

4242
03:12:17,520 --> 03:12:20,319
it will start uh enumerating like for

4243
03:12:20,319 --> 03:12:21,840
different services it will start for

4244
03:12:21,840 --> 03:12:23,520
secure board and secure all the things

4245
03:12:23,520 --> 03:12:25,439
that we have covered during the workshop

4246
03:12:25,439 --> 03:12:27,120
and once it is identified it says hey

4247
03:12:27,120 --> 03:12:28,319
these are the end points that have been

4248
03:12:28,319 --> 03:12:30,479
identified in this cluster we have cube

4249
03:12:30,479 --> 03:12:32,399
server secure endpoint identified read

4250
03:12:32,399 --> 03:12:34,399
write service endpoint identified

4251
03:12:34,399 --> 03:12:35,920
at city client that city server queue

4252
03:12:35,920 --> 03:12:37,920
proxy and there is like open 42 which is

4253
03:12:37,920 --> 03:12:40,160
an ssh that has been identified and it

4254
03:12:40,160 --> 03:12:41,840
will give you two options to perform the

4255
03:12:41,840 --> 03:12:43,040
scans whether it is like an

4256
03:12:43,040 --> 03:12:45,200
authenticated scan or an authenticated

4257
03:12:45,200 --> 03:12:46,720
scan which is like a black box testing

4258
03:12:46,720 --> 03:12:48,960
versus like a white box testing so in

4259
03:12:48,960 --> 03:12:51,120
this scenario let us because i have an

4260
03:12:51,120 --> 03:12:53,120
anonymous access enabled i'll go and

4261
03:12:53,120 --> 03:12:55,680
scan like an authenticated scan

4262
03:12:55,680 --> 03:12:57,680
and it supports like different clusters

4263
03:12:57,680 --> 03:12:59,359
running on-prem or it could be like a

4264
03:12:59,359 --> 03:13:01,040
cluster running in azure it is or it

4265
03:13:01,040 --> 03:13:02,960
could be a cluster running in eks or it

4266
03:13:02,960 --> 03:13:04,720
could be a cluster running in google it

4267
03:13:04,720 --> 03:13:07,120
will support all kinds of clusters and

4268
03:13:07,120 --> 03:13:09,040
in order to provide a token or an

4269
03:13:09,040 --> 03:13:10,080
authenticated scan these are the

4270
03:13:10,080 --> 03:13:11,439
commands that you should be using to

4271
03:13:11,439 --> 03:13:13,200
grab the token so in this scenario

4272
03:13:13,200 --> 03:13:14,720
because there is an anonymous access

4273
03:13:14,720 --> 03:13:16,479
enabled i'll just press enter without

4274
03:13:16,479 --> 03:13:17,920
providing any token

4275
03:13:17,920 --> 03:13:19,439
and it says authentication successful

4276
03:13:19,439 --> 03:13:21,520
because anonymous access is enabled and

4277
03:13:21,520 --> 03:13:23,200
will give us an information option like

4278
03:13:23,200 --> 03:13:24,880
perform all checks or perform individual

4279
03:13:24,880 --> 03:13:27,359
checks i'll go with perform all checks

4280
03:13:27,359 --> 03:13:29,600
it will start our scanning for

4281
03:13:29,600 --> 03:13:31,680
iam miss configurations like admin roles

4282
03:13:31,680 --> 03:13:33,040
relationally admin roles destructive

4283
03:13:33,040 --> 03:13:34,399
roles whatever we have seen like

4284
03:13:34,399 --> 03:13:36,239
impersonation all these things are

4285
03:13:36,239 --> 03:13:37,520
identified

4286
03:13:37,520 --> 03:13:39,359
using this tool then it will scan for

4287
03:13:39,359 --> 03:13:40,880
misconfigured containers such as like

4288
03:13:40,880 --> 03:13:42,399
privileged containers liveness pro

4289
03:13:42,399 --> 03:13:44,160
readiness group these things

4290
03:13:44,160 --> 03:13:45,840
and then we'll check for port security

4291
03:13:45,840 --> 03:13:47,760
policies network policies cube like

4292
03:13:47,760 --> 03:13:50,000
reader service if you run the scanner in

4293
03:13:50,000 --> 03:13:52,319
a real time in a on a running cluster it

4294
03:13:52,319 --> 03:13:54,080
will give like heaps of vulnerabilities

4295
03:13:54,080 --> 03:13:56,399
or misconfiguration inside the cluster

4296
03:13:56,399 --> 03:13:57,760
and once the scan is done it will also

4297
03:13:57,760 --> 03:13:59,760
give you an option called uh execute

4298
03:13:59,760 --> 03:14:02,080
commands on the containers you can play

4299
03:14:02,080 --> 03:14:03,600
or interact with the containers during

4300
03:14:03,600 --> 03:14:05,200
the printers if you come across with any

4301
03:14:05,200 --> 03:14:06,319
of uh

4302
03:14:06,319 --> 03:14:08,000
like anonymous access or any other stuff

4303
03:14:08,000 --> 03:14:11,040
you can actually execute the commands so

4304
03:14:11,040 --> 03:14:12,880
these are these are the ports that are

4305
03:14:12,880 --> 03:14:15,600
available i choose one of the ports it

4306
03:14:15,600 --> 03:14:16,960
will list all the containers that are

4307
03:14:16,960 --> 03:14:18,720
running inside the pod and we choose one

4308
03:14:18,720 --> 03:14:21,120
of the container it will ask me to

4309
03:14:21,120 --> 03:14:24,399
enter the command i press ls so command

4310
03:14:24,399 --> 03:14:26,479
execution successful so that way you can

4311
03:14:26,479 --> 03:14:30,160
do it and once it is done click on exit

4312
03:14:30,160 --> 03:14:31,920
it says scan completed and the results

4313
03:14:31,920 --> 03:14:35,359
generated with the target file name

4314
03:14:35,359 --> 03:14:38,160
so the target file name this is the

4315
03:14:38,160 --> 03:14:39,359
target

4316
03:14:39,359 --> 03:14:41,760
what is the target that we have input

4317
03:14:41,760 --> 03:14:44,319
192 168.99 101

4318
03:14:44,319 --> 03:14:48,239
and we have 5.99 let us see the output

4319
03:14:48,239 --> 03:14:50,960
it gives like a very elaborate output

4320
03:14:50,960 --> 03:14:52,880
this is the beauty of this tool

4321
03:14:52,880 --> 03:14:54,640
it gives like for example read-only

4322
03:14:54,640 --> 03:14:57,439
admin roles it says like who has what

4323
03:14:57,439 --> 03:14:59,760
kind of role it is a cluster admin role

4324
03:14:59,760 --> 03:15:01,120
and this particular service account

4325
03:15:01,120 --> 03:15:02,399
called generic garbage collector has

4326
03:15:02,399 --> 03:15:03,920
created privileges in the name subscript

4327
03:15:03,920 --> 03:15:06,319
system will give very useful information

4328
03:15:06,319 --> 03:15:09,840
like what who have access what can do

4329
03:15:09,840 --> 03:15:12,720
and we'll check for uh premature roles

4330
03:15:12,720 --> 03:15:14,560
for security policies it will check for

4331
03:15:14,560 --> 03:15:15,600
containers with various

4332
03:15:15,600 --> 03:15:17,359
misconfigurations like cpu limits or

4333
03:15:17,359 --> 03:15:19,200
events pro memory limits priority class

4334
03:15:19,200 --> 03:15:21,520
name secrets mounted on socket etc

4335
03:15:21,520 --> 03:15:23,200
just give a go and try it on different

4336
03:15:23,200 --> 03:15:25,040
clusters and you will

4337
03:15:25,040 --> 03:15:27,279
make the best views of it

4338
03:15:27,279 --> 03:15:29,680
well that pretty much covers the cube

4339
03:15:29,680 --> 03:15:31,840
striker and there are a few other tools

4340
03:15:31,840 --> 03:15:34,479
that i have listed

4341
03:15:34,479 --> 03:15:37,600
inside the documentation like popoy

4342
03:15:37,600 --> 03:15:38,479
and

4343
03:15:38,479 --> 03:15:41,119
other stuff

4344
03:15:45,040 --> 03:15:47,279
so popoy is pretty straightforward to

4345
03:15:47,279 --> 03:15:50,640
install it is again uh

4346
03:15:50,640 --> 03:15:52,720
built by the same team who has built the

4347
03:15:52,720 --> 03:15:56,960
canines so just run powerpoint

4348
03:15:59,200 --> 03:16:00,880
probably it's not set up in my machine

4349
03:16:00,880 --> 03:16:05,679
but yeah you can try it and give it a go

4350
03:16:12,160 --> 03:16:17,040
and needless to say keyboard it

4351
03:16:17,040 --> 03:16:19,040
there's another tool that you can try i

4352
03:16:19,040 --> 03:16:20,479
have given the commands and everything

4353
03:16:20,479 --> 03:16:23,358
in the documentation

4354
03:16:29,200 --> 03:16:30,960
bench is another tool that we can try

4355
03:16:30,960 --> 03:16:33,519
and test

4356
03:16:35,680 --> 03:16:38,560
cool we are on time exactly and uh i

4357
03:16:38,560 --> 03:16:40,479
think that we have covered pretty much

4358
03:16:40,479 --> 03:16:42,239
everything all the

4359
03:16:42,239 --> 03:16:44,160
fortunately all the attack scenarios

4360
03:16:44,160 --> 03:16:45,920
have worked we have seen different kinds

4361
03:16:45,920 --> 03:16:47,680
of defending scenarios

4362
03:16:47,680 --> 03:16:51,279
and we have covered monitoring stuff

4363
03:16:51,279 --> 03:16:53,439
and if you feel that this is not enough

4364
03:16:53,439 --> 03:16:54,960
there is like heaps of stuff in the

4365
03:16:54,960 --> 03:16:56,720
documentation just

4366
03:16:56,720 --> 03:16:59,359
give a go and practice the stuff

4367
03:16:59,359 --> 03:17:01,279
and try like the runtime security and

4368
03:17:01,279 --> 03:17:03,600
all other things

4369
03:17:03,600 --> 03:17:05,520
well that pretty much concludes the

4370
03:17:05,520 --> 03:17:07,600
session for today we still have like 20

4371
03:17:07,600 --> 03:17:09,840
minutes left if you have any questions

4372
03:17:09,840 --> 03:17:12,239
i'm like more than happy to take them

4373
03:17:12,239 --> 03:17:13,920
and you can always reach out to me on

4374
03:17:13,920 --> 03:17:15,520
linkedin if you need more information

4375
03:17:15,520 --> 03:17:17,359
and one thing i would like to share with

4376
03:17:17,359 --> 03:17:20,399
you all is

4377
03:17:20,720 --> 03:17:22,319
at the very beginning we have set up

4378
03:17:22,319 --> 03:17:25,520
this stuff so just go to like the build

4379
03:17:25,520 --> 03:17:28,880
server 8080

4380
03:17:32,800 --> 03:17:34,300
okay

4381
03:17:34,300 --> 03:17:36,720
[Music]

4382
03:17:36,720 --> 03:17:38,560
now initially at the very beginning i

4383
03:17:38,560 --> 03:17:40,399
told you like whether you want to click

4384
03:17:40,399 --> 03:17:42,160
on proceed and abort

4385
03:17:42,160 --> 03:17:44,800
so now if you click on proceed it will

4386
03:17:44,800 --> 03:17:46,720
spin up another kubernetes cluster along

4387
03:17:46,720 --> 03:17:48,800
with the cluster that we have tried

4388
03:17:48,800 --> 03:17:50,960
so if you want to fix the bugs and test

4389
03:17:50,960 --> 03:17:53,439
it you will have like two more clusters

4390
03:17:53,439 --> 03:17:55,120
so i will leave it to you how to

4391
03:17:55,120 --> 03:17:56,880
actually interact with the second

4392
03:17:56,880 --> 03:17:59,040
cluster now we will have two clusters

4393
03:17:59,040 --> 03:18:00,720
running in the same vm

4394
03:18:00,720 --> 03:18:02,319
but so far we have been interacting with

4395
03:18:02,319 --> 03:18:04,080
one cluster and i will leave it to you

4396
03:18:04,080 --> 03:18:05,200
to figure out how to interact with the

4397
03:18:05,200 --> 03:18:06,960
second cluster you need to play with the

4398
03:18:06,960 --> 03:18:08,720
q config files that we have discussed in

4399
03:18:08,720 --> 03:18:10,560
the document the solution is inside the

4400
03:18:10,560 --> 03:18:12,399
document i'll leave it to you to test it

4401
03:18:12,399 --> 03:18:13,920
and go ahead

4402
03:18:13,920 --> 03:18:15,920
and it is like an inception everything

4403
03:18:15,920 --> 03:18:17,359
is built using the containers for

4404
03:18:17,359 --> 03:18:19,760
example

4405
03:18:20,560 --> 03:18:22,880
docker pierce i'm using something called

4406
03:18:22,880 --> 03:18:23,760
kind

4407
03:18:23,760 --> 03:18:26,880
so on a host everything is spin up using

4408
03:18:26,880 --> 03:18:28,800
containers and inside the containers we

4409
03:18:28,800 --> 03:18:30,239
have like the kubernetes containers

4410
03:18:30,239 --> 03:18:32,319
humanities clusters running and inside

4411
03:18:32,319 --> 03:18:33,840
the kubernetes clusters again we have

4412
03:18:33,840 --> 03:18:35,359
like multiple containers and the build

4413
03:18:35,359 --> 03:18:36,880
tools build servers running and along

4414
03:18:36,880 --> 03:18:39,120
with web applications

4415
03:18:39,120 --> 03:18:40,880
some decent amount in time has been

4416
03:18:40,880 --> 03:18:42,960
spent on setting up this lab to teach

4417
03:18:42,960 --> 03:18:44,640
people and everything hope you liked it

4418
03:18:44,640 --> 03:18:46,720
and appreciate it if you need like more

4419
03:18:46,720 --> 03:18:48,319
information if you would like to learn

4420
03:18:48,319 --> 03:18:52,319
more stuff like i said i had to uh

4421
03:18:52,319 --> 03:18:54,399
make some changes to the content to

4422
03:18:54,399 --> 03:18:55,760
fit in the like the three and a half to

4423
03:18:55,760 --> 03:18:57,200
four hours but if you like to learn more

4424
03:18:57,200 --> 03:18:59,279
i have like more modules just reach out

4425
03:18:59,279 --> 03:19:01,359
to me and i can help you with some more

4426
03:19:01,359 --> 03:19:05,200
labs to just practice and test

4427
03:19:05,200 --> 03:19:06,399
well that pretty much concludes the

4428
03:19:06,399 --> 03:19:07,840
session if you have any questions i'm

4429
03:19:07,840 --> 03:19:10,800
like more than happy to take them

4430
03:19:10,800 --> 03:19:12,560
thank you very much

4431
03:19:12,560 --> 03:19:15,279
that was uh very good um very

4432
03:19:15,279 --> 03:19:17,040
professional and

4433
03:19:17,040 --> 03:19:19,120
i think quite clear and a lot of

4434
03:19:19,120 --> 03:19:21,120
thoughts for everyone

4435
03:19:21,120 --> 03:19:23,439
um so there is a question on the q a and

4436
03:19:23,439 --> 03:19:27,200
i also saw that adrian rico you had your

4437
03:19:27,200 --> 03:19:28,720
hand raised

4438
03:19:28,720 --> 03:19:31,359
but you lowered that do you want to

4439
03:19:31,359 --> 03:19:33,600
ask a question live i can give you you

4440
03:19:33,600 --> 03:19:35,760
know i i can allow you to talk if you

4441
03:19:35,760 --> 03:19:37,840
want to so you raise your hand again i

4442
03:19:37,840 --> 03:19:40,160
can pick and load uh does it works in a

4443
03:19:40,160 --> 03:19:43,680
bare metal air gap cluster

4444
03:19:43,680 --> 03:19:46,640
uh adrian i didn't do much research on

4445
03:19:46,640 --> 03:19:48,560
the adriat cluster but i can definitely

4446
03:19:48,560 --> 03:19:51,439
get back to you in some time

4447
03:19:51,439 --> 03:19:53,279
oh yeah oh yeah absolutely cube striker

4448
03:19:53,279 --> 03:19:55,920
works on a cube striker just uh needs

4449
03:19:55,920 --> 03:19:58,239
access to your url or the ip address and

4450
03:19:58,239 --> 03:20:00,640
it does all the scanning on it

4451
03:20:00,640 --> 03:20:02,239
like i said you can perform two types of

4452
03:20:02,239 --> 03:20:03,840
scanning like authenticated scan and

4453
03:20:03,840 --> 03:20:05,520
authenticated scan

4454
03:20:05,520 --> 03:20:07,760
uh and you can also use it in the ci cd

4455
03:20:07,760 --> 03:20:09,520
pipeline even before you deploy the

4456
03:20:09,520 --> 03:20:11,120
cluster with the protection if you have

4457
03:20:11,120 --> 03:20:13,279
it up and running in the dev you can

4458
03:20:13,279 --> 03:20:15,120
invoke this container in the form of ci

4459
03:20:15,120 --> 03:20:17,359
cd and it's it's very user friendly csc

4460
03:20:17,359 --> 03:20:18,640
differently you don't need to pass any

4461
03:20:18,640 --> 03:20:20,160
commands in between just one single

4462
03:20:20,160 --> 03:20:22,399
command will scan your cluster you can

4463
03:20:22,399 --> 03:20:24,160
build a different step in your pipeline

4464
03:20:24,160 --> 03:20:25,520
and you can scan the whole cluster and

4465
03:20:25,520 --> 03:20:26,880
just refer to the documentation like

4466
03:20:26,880 --> 03:20:28,399
cube cubestriker.io

4467
03:20:28,399 --> 03:20:30,000
it will do it has like heaps of

4468
03:20:30,000 --> 03:20:32,239
information and just keep an eye on it i

4469
03:20:32,239 --> 03:20:34,000
have like new version releasing in the

4470
03:20:34,000 --> 03:20:36,080
next month which will have like a better

4471
03:20:36,080 --> 03:20:38,399
ui with more features with continuous

4472
03:20:38,399 --> 03:20:40,239
runtime monitoring and protection with

4473
03:20:40,239 --> 03:20:41,600
container scanning everything and it's

4474
03:20:41,600 --> 03:20:44,720
going to be like an open source

4475
03:20:48,080 --> 03:20:50,080
cool thank you so i don't if you like to

4476
03:20:50,080 --> 03:20:52,800
follow up or something you can now uh

4477
03:20:52,800 --> 03:20:54,080
talk on the

4478
03:20:54,080 --> 03:20:57,840
insole if you want to

4479
03:20:58,640 --> 03:21:00,239
well i don't have

4480
03:21:00,239 --> 03:21:02,319
anything much to discuss but if you are

4481
03:21:02,319 --> 03:21:03,920
if anybody has any questions i'm more

4482
03:21:03,920 --> 03:21:06,239
than happy to take them or else i'm

4483
03:21:06,239 --> 03:21:08,399
available on slack just ping me there

4484
03:21:08,399 --> 03:21:10,960
all feel free to reach me on my linkedin

4485
03:21:10,960 --> 03:21:14,399
i'm available at uh

4486
03:21:15,920 --> 03:21:17,520
so this is my linkedin name

4487
03:21:17,520 --> 03:21:19,680
passanchinibili you can just uh send me

4488
03:21:19,680 --> 03:21:21,760
a request over here i can

4489
03:21:21,760 --> 03:21:25,840
always anytime reach out to me

4490
03:21:25,920 --> 03:21:28,000
all right thank you very much uh and i

4491
03:21:28,000 --> 03:21:30,640
guess you also can drop questions later

4492
03:21:30,640 --> 03:21:33,120
on slag or something or contact us on

4493
03:21:33,120 --> 03:21:35,439
twitter or whatever about the cubist

4494
03:21:35,439 --> 03:21:37,760
striker or the workshop in general

4495
03:21:37,760 --> 03:21:39,439
remember also that he

4496
03:21:39,439 --> 03:21:41,600
uh put all the information on the pdf so

4497
03:21:41,600 --> 03:21:43,040
you can like

4498
03:21:43,040 --> 03:21:45,520
complete all the steps again

4499
03:21:45,520 --> 03:21:46,560
um

4500
03:21:46,560 --> 03:21:49,279
so yeah you have a ton of information to

4501
03:21:49,279 --> 03:21:51,040
play with

4502
03:21:51,040 --> 03:21:53,120
thank you very much for your time i know

4503
03:21:53,120 --> 03:21:55,840
it's very late now in australia

4504
03:21:55,840 --> 03:21:57,200
thanks so much for organizing this

4505
03:21:57,200 --> 03:21:58,880
christian it's very good and thank you

4506
03:21:58,880 --> 03:22:00,560
very much for giving me the opportunity

4507
03:22:00,560 --> 03:22:02,160
looking forward to work with you again

4508
03:22:02,160 --> 03:22:05,160
soon

