1
00:01:17,230 --> 00:01:20,339
[Applause]

2
00:01:21,040 --> 00:01:25,250
all right everyone you can take your

3
00:01:23,750 --> 00:01:27,850
seats we're about to get started with

4
00:01:25,250 --> 00:01:27,850
the next top

5
00:01:41,240 --> 00:01:46,280
all right and I'm sorry I don't we don't

6
00:01:43,400 --> 00:01:48,619
have a second mic go upstairs to the

7
00:01:46,280 --> 00:01:50,930
second track so I guess I'll have to

8
00:01:48,619 --> 00:01:52,119
yell which is no problem raise your hand

9
00:01:50,930 --> 00:01:55,009
in the back you can hear me

10
00:01:52,119 --> 00:01:56,630
awesome thank you thank you so I'd like

11
00:01:55,009 --> 00:01:59,090
to introduce our next speaker his name

12
00:01:56,630 --> 00:02:01,039
is pal Millman and he's speaking on

13
00:01:59,090 --> 00:02:02,869
event injection sending evil to the

14
00:02:01,040 --> 00:02:03,950
cloud so it's help thank you take it

15
00:02:02,869 --> 00:02:06,409
away thanks a lot

16
00:02:03,950 --> 00:02:09,619
hi everyone thanks for coming just

17
00:02:06,409 --> 00:02:13,880
checking can you hear me well alright so

18
00:02:09,619 --> 00:02:18,170
a few questions how many of you here

19
00:02:13,880 --> 00:02:20,150
heard my talk last year okay okay I just

20
00:02:18,170 --> 00:02:25,399
want to know how much stuff I can't

21
00:02:20,150 --> 00:02:27,650
repeat joking yeah so my name is Todd

22
00:02:25,400 --> 00:02:29,750
I'm originally from Israel I live here

23
00:02:27,650 --> 00:02:32,780
in New Haven Connecticut this is the

24
00:02:29,750 --> 00:02:36,080
past this is the second year for me not

25
00:02:32,780 --> 00:02:39,680
looking forward for the winter okay

26
00:02:36,080 --> 00:02:42,410
it's been tough so again thanks for

27
00:02:39,680 --> 00:02:44,620
coming I'm gonna talk about this this

28
00:02:42,410 --> 00:02:49,190
talk is going to be a fairly technical

29
00:02:44,620 --> 00:02:51,560
and another thing that I would like to

30
00:02:49,190 --> 00:02:55,489
know that a to tell you is that if any

31
00:02:51,560 --> 00:02:59,390
of you attended Def Con and seen my talk

32
00:02:55,489 --> 00:03:01,310
there it's gonna be pretty similar so if

33
00:02:59,390 --> 00:03:05,298
not you're welcome to stay now that

34
00:03:01,310 --> 00:03:07,820
we've established that okay just a word

35
00:03:05,299 --> 00:03:09,860
for the new guys here so I want to thank

36
00:03:07,820 --> 00:03:12,890
Brian again for his keynote was great

37
00:03:09,860 --> 00:03:14,570
and I was I just want to know to tell

38
00:03:12,890 --> 00:03:16,309
you that from my personal experience

39
00:03:14,570 --> 00:03:20,329
that's exactly right what he said I

40
00:03:16,310 --> 00:03:23,450
remember three years ago yeah September

41
00:03:20,329 --> 00:03:26,359
three years ago was my first talk at a

42
00:03:23,450 --> 00:03:29,060
local event on West local event in in

43
00:03:26,359 --> 00:03:31,100
Israel and I did it the first time I was

44
00:03:29,060 --> 00:03:33,829
nervous and I liked it and three years

45
00:03:31,100 --> 00:03:36,230
after that then I started of course with

46
00:03:33,829 --> 00:03:39,880
some other local besides and always

47
00:03:36,230 --> 00:03:43,459
meetings and now three three years after

48
00:03:39,880 --> 00:03:48,380
I'm giving this around this topic these

49
00:03:43,459 --> 00:03:50,960
talks that blackhat RSA Derby called and

50
00:03:48,380 --> 00:03:53,960
and I just want to tell you guys that

51
00:03:50,960 --> 00:03:56,360
are studying up now don't be afraid go

52
00:03:53,960 --> 00:04:00,280
and try and if you like it I'm sure you

53
00:03:56,360 --> 00:04:12,110
can grow and do a great stuff all right

54
00:04:00,280 --> 00:04:14,270
so I'm working in a start-up based in

55
00:04:12,110 --> 00:04:16,940
Israel called pretty go labs what we do

56
00:04:14,270 --> 00:04:20,260
is we provide a several a security

57
00:04:16,940 --> 00:04:23,360
solution if you like it after the talk

58
00:04:20,260 --> 00:04:27,080
you're more than welcome to speak to

59
00:04:23,360 --> 00:04:29,330
come and catch catch up with me also so

60
00:04:27,080 --> 00:04:33,260
here are my if you want to find me over

61
00:04:29,330 --> 00:04:35,419
LinkedIn or Twitter or whatever I'm also

62
00:04:33,260 --> 00:04:38,450
teaching at Quinnipiac University in

63
00:04:35,420 --> 00:04:40,610
Hamden Connecticut at a master's program

64
00:04:38,450 --> 00:04:43,789
there it's 100 cent online so if you

65
00:04:40,610 --> 00:04:46,430
want to master in cybersecurity and also

66
00:04:43,790 --> 00:04:51,290
come talk to me after this talk all

67
00:04:46,430 --> 00:04:53,210
right we covered what we needed now what

68
00:04:51,290 --> 00:04:54,800
we're going to talk about is just a

69
00:04:53,210 --> 00:04:57,710
little bit about the technology itself

70
00:04:54,800 --> 00:05:00,470
because service is quite new so I'm

71
00:04:57,710 --> 00:05:02,690
gonna just introduce you to the to the

72
00:05:00,470 --> 00:05:07,220
technology and then we're gonna have

73
00:05:02,690 --> 00:05:10,070
some fun with the fun part where I do a

74
00:05:07,220 --> 00:05:12,560
lot of damage in the cloud mostly AWS

75
00:05:10,070 --> 00:05:16,310
but it could be any cloud provider and

76
00:05:12,560 --> 00:05:19,640
we see I'll introduce you to some work

77
00:05:16,310 --> 00:05:22,610
that you can work with or you can get to

78
00:05:19,640 --> 00:05:26,229
know to practice yourself and then if we

79
00:05:22,610 --> 00:05:30,880
have some time than some Q&A all right

80
00:05:26,230 --> 00:05:34,460
so basically what we know today is that

81
00:05:30,880 --> 00:05:37,360
most companies or organizations even the

82
00:05:34,460 --> 00:05:39,950
the government's most governments and

83
00:05:37,360 --> 00:05:42,320
secret services everyone is going to the

84
00:05:39,950 --> 00:05:45,440
cloud so pretty much the cloud now owns

85
00:05:42,320 --> 00:05:48,349
the upper is the new OS for us we don't

86
00:05:45,440 --> 00:05:50,810
need to take care of everything of all

87
00:05:48,350 --> 00:05:52,450
the infrastructure infrastructure we

88
00:05:50,810 --> 00:05:55,360
don't have to

89
00:05:52,450 --> 00:05:57,070
take all they have a lifting of building

90
00:05:55,360 --> 00:05:59,830
and connecting stuff we can just use

91
00:05:57,070 --> 00:06:05,320
resources that are ready and secure and

92
00:05:59,830 --> 00:06:08,409
good to go and in server less the idea

93
00:06:05,320 --> 00:06:11,050
is that it was meant for developers

94
00:06:08,410 --> 00:06:14,170
basically it gives them the power to

95
00:06:11,050 --> 00:06:17,140
just go ahead develop features develop

96
00:06:14,170 --> 00:06:19,330
the logic of the application and not

97
00:06:17,140 --> 00:06:21,580
think about servers and how they have to

98
00:06:19,330 --> 00:06:24,729
manage them and configure them so this

99
00:06:21,580 --> 00:06:28,840
is all taken away also in service

100
00:06:24,730 --> 00:06:30,400
technology the everything is scales up

101
00:06:28,840 --> 00:06:34,619
automatically so it's transparent

102
00:06:30,400 --> 00:06:39,460
doesn't matter if your application hits

103
00:06:34,620 --> 00:06:42,460
1,000 seconds or 10 requests per week

104
00:06:39,460 --> 00:06:45,729
eight automatics automatically scale up

105
00:06:42,460 --> 00:06:48,280
and down by the cloud provider also very

106
00:06:45,730 --> 00:06:50,230
good thing the pricing model is that you

107
00:06:48,280 --> 00:06:51,609
don't pay for what you don't use so even

108
00:06:50,230 --> 00:06:53,170
if you want to build something and

109
00:06:51,610 --> 00:06:55,540
you're not sure anyone is going to use

110
00:06:53,170 --> 00:06:58,060
it you can just build it just go ahead

111
00:06:55,540 --> 00:07:00,670
and write code in the cloud and if you

112
00:06:58,060 --> 00:07:02,380
if no one uses it or if it being used

113
00:07:00,670 --> 00:07:04,600
very lightly you don't pay for anything

114
00:07:02,380 --> 00:07:07,150
so basically you just pay for what you

115
00:07:04,600 --> 00:07:09,910
use and if you don't if you build even

116
00:07:07,150 --> 00:07:14,140
we have some customers that have like

117
00:07:09,910 --> 00:07:16,420
internal IT or automation services that

118
00:07:14,140 --> 00:07:18,940
run that barely run like once a day like

119
00:07:16,420 --> 00:07:20,500
a build a nightly build or whatever they

120
00:07:18,940 --> 00:07:21,969
don't pay for that even though it runs

121
00:07:20,500 --> 00:07:24,010
in the cloud and they use a lot of

122
00:07:21,970 --> 00:07:26,400
services they pay like it seems

123
00:07:24,010 --> 00:07:30,159
significant like under under a dollar

124
00:07:26,400 --> 00:07:33,280
and also you get the availability and

125
00:07:30,160 --> 00:07:37,600
resiliency of the cloud so whenever you

126
00:07:33,280 --> 00:07:39,159
deploy something it is populated in AWS

127
00:07:37,600 --> 00:07:41,860
or the cloud providers data centers

128
00:07:39,160 --> 00:07:45,130
across the region's that you have so you

129
00:07:41,860 --> 00:07:47,220
have all the power of the cloud okay

130
00:07:45,130 --> 00:07:51,280
what are the security challenged

131
00:07:47,220 --> 00:07:54,520
challenges or is that so I choose I

132
00:07:51,280 --> 00:07:57,280
chose for but which will make our or the

133
00:07:54,520 --> 00:08:00,740
hackers life easier or

134
00:07:57,280 --> 00:08:04,039
I'll give them the opportunity so the

135
00:08:00,740 --> 00:08:06,320
first one on top left is that in service

136
00:08:04,040 --> 00:08:08,720
you have to give a specific permission

137
00:08:06,320 --> 00:08:11,349
or policy for each of the functions that

138
00:08:08,720 --> 00:08:14,510
you build so think about it it's very

139
00:08:11,350 --> 00:08:17,960
very good in app stick in the obstacles

140
00:08:14,510 --> 00:08:20,870
if you can take every 10 100 lines of

141
00:08:17,960 --> 00:08:22,849
code and tell them oh this function

142
00:08:20,870 --> 00:08:24,920
which always writes to the database can

143
00:08:22,850 --> 00:08:28,010
only write to the database and only the

144
00:08:24,920 --> 00:08:30,169
database and you don't have to to make

145
00:08:28,010 --> 00:08:31,700
sure that it enforced its enforced by

146
00:08:30,169 --> 00:08:35,179
the cloud you just have to choose the

147
00:08:31,700 --> 00:08:37,640
right policy but the problem is that AWS

148
00:08:35,179 --> 00:08:39,228
for example have 5,000 different more

149
00:08:37,640 --> 00:08:41,809
than 5,000 different actions that you

150
00:08:39,229 --> 00:08:45,460
can choose from so yeah you can do it

151
00:08:41,809 --> 00:08:47,660
for 1 or 2 function 3 4 maybe if you are

152
00:08:45,460 --> 00:08:50,000
doing it for yourself but if you're a

153
00:08:47,660 --> 00:08:52,430
bigger organization and we have

154
00:08:50,000 --> 00:08:55,520
customers with thousands of functions

155
00:08:52,430 --> 00:08:58,250
how do you do that it's very difficult

156
00:08:55,520 --> 00:09:00,800
and they end up not doing it right

157
00:08:58,250 --> 00:09:03,680
like what happened is actually that the

158
00:09:00,800 --> 00:09:05,900
developer goes to a Stack Overflow copy

159
00:09:03,680 --> 00:09:09,380
paste their first examples it works and

160
00:09:05,900 --> 00:09:11,689
they stay with it and this what will

161
00:09:09,380 --> 00:09:16,310
eventually lead up to some damage in the

162
00:09:11,690 --> 00:09:19,100
cloud in case of an attack also top

163
00:09:16,310 --> 00:09:23,420
right but it's your left okay so top

164
00:09:19,100 --> 00:09:25,850
left you have that we in service we lose

165
00:09:23,420 --> 00:09:27,709
the perimeter so in the traditional

166
00:09:25,850 --> 00:09:29,990
monolithic application we usually have

167
00:09:27,710 --> 00:09:33,500
just one way in so it doesn't matter

168
00:09:29,990 --> 00:09:37,839
what protocol usually HTTP or HTTPS but

169
00:09:33,500 --> 00:09:40,460
it can be any I don't TCP or IOT related

170
00:09:37,839 --> 00:09:44,120
traffic but it's usually just one way

171
00:09:40,460 --> 00:09:45,980
into the to the DMZ to the load balancer

172
00:09:44,120 --> 00:09:48,560
to the firewall whatever you have there

173
00:09:45,980 --> 00:09:51,560
and when you put all your security

174
00:09:48,560 --> 00:09:54,680
controls in that place so you monitor

175
00:09:51,560 --> 00:09:56,599
you could firewalls DLP's or whatever

176
00:09:54,680 --> 00:09:59,209
you want and everything that comes in

177
00:09:56,600 --> 00:10:01,490
and goes out is being scanned or checked

178
00:09:59,210 --> 00:10:05,089
so sometimes we're lucky sometimes less

179
00:10:01,490 --> 00:10:07,070
but we have some security control that

180
00:10:05,089 --> 00:10:09,620
barrier to check that

181
00:10:07,070 --> 00:10:12,529
and we're gonna lose that now because in

182
00:10:09,620 --> 00:10:15,800
service the technology really is an

183
00:10:12,529 --> 00:10:18,470
event-driven the architecture which runs

184
00:10:15,800 --> 00:10:21,199
codes based on events that happen in the

185
00:10:18,470 --> 00:10:24,889
clouds could be file upload file

186
00:10:21,199 --> 00:10:26,870
download change in a database and IP IOT

187
00:10:24,889 --> 00:10:29,600
device connected whatever you can think

188
00:10:26,870 --> 00:10:33,860
of email was sent its and so on so on

189
00:10:29,600 --> 00:10:36,529
and the problem is for the developers

190
00:10:33,860 --> 00:10:39,529
for the organization is that there are

191
00:10:36,529 --> 00:10:41,120
very quite a lot resources that they

192
00:10:39,529 --> 00:10:43,399
have to connect together and make sure

193
00:10:41,120 --> 00:10:45,649
that they have the entire security

194
00:10:43,399 --> 00:10:47,690
access control and everything configured

195
00:10:45,649 --> 00:10:49,940
right and it's kind of a problem because

196
00:10:47,690 --> 00:10:52,130
it's not one server that you can just

197
00:10:49,940 --> 00:10:55,100
deploy make sure it does the right

198
00:10:52,130 --> 00:10:57,649
things maybe put some things before the

199
00:10:55,100 --> 00:11:00,910
they hit the server know it's different

200
00:10:57,649 --> 00:11:04,310
resources unconnected that you somehow

201
00:11:00,910 --> 00:11:06,170
put arrows between at one another or

202
00:11:04,310 --> 00:11:08,329
connect them connect the dots and you

203
00:11:06,170 --> 00:11:10,880
have to make sure the security stays and

204
00:11:08,329 --> 00:11:17,469
it updates a lot so it's very hard to

205
00:11:10,880 --> 00:11:20,569
make to keep up so sorry ok so I like to

206
00:11:17,470 --> 00:11:25,100
think about the regular traditional

207
00:11:20,569 --> 00:11:27,110
application as the football fields yeah

208
00:11:25,100 --> 00:11:29,660
the New England's here they have to

209
00:11:27,110 --> 00:11:32,480
defend the the incoming attack and you

210
00:11:29,660 --> 00:11:34,130
always have the line of scrimmage and

211
00:11:32,480 --> 00:11:36,350
you have the always the internal network

212
00:11:34,130 --> 00:11:38,389
is always ten feet away you have you

213
00:11:36,350 --> 00:11:40,610
know what you're protecting and you put

214
00:11:38,389 --> 00:11:43,310
all your security controls in line

215
00:11:40,610 --> 00:11:46,370
against yet the incoming attack so most

216
00:11:43,310 --> 00:11:47,839
of the time the incoming attack is being

217
00:11:46,370 --> 00:11:49,760
prevented or the attack is being

218
00:11:47,839 --> 00:11:53,060
prevented sometimes there it's very

219
00:11:49,760 --> 00:11:56,600
agile and jumps jumps on top of your

220
00:11:53,060 --> 00:11:58,699
defense but it barely happens but in

221
00:11:56,600 --> 00:12:00,829
server less you pretty much lose all of

222
00:11:58,699 --> 00:12:03,079
that because you don't have an internal

223
00:12:00,829 --> 00:12:06,258
network you have well you might have a

224
00:12:03,079 --> 00:12:08,630
private network for yourself but if you

225
00:12:06,259 --> 00:12:10,730
don't own it I mean you cannot put

226
00:12:08,630 --> 00:12:13,160
controls there it's it's not yours it's

227
00:12:10,730 --> 00:12:17,269
the cloud and you don't know where the

228
00:12:13,160 --> 00:12:19,219
attack is gonna come because well it

229
00:12:17,269 --> 00:12:20,030
could be an email how do you protect

230
00:12:19,220 --> 00:12:22,250
that

231
00:12:20,030 --> 00:12:24,199
so in this talk I'm going to show you a

232
00:12:22,250 --> 00:12:25,910
different type of injection attacks or

233
00:12:24,200 --> 00:12:30,740
it's gonna be the same injection attack

234
00:12:25,910 --> 00:12:34,160
but all are different or r-va areas and

235
00:12:30,740 --> 00:12:36,920
events that happens in the cloud so just

236
00:12:34,160 --> 00:12:39,530
so sorry we're good

237
00:12:36,920 --> 00:12:43,729
remove the logo there so just or you

238
00:12:39,530 --> 00:12:46,310
understand how it actually works then

239
00:12:43,730 --> 00:12:48,680
when your code needs to run or the

240
00:12:46,310 --> 00:12:51,920
developer the code needs to run the

241
00:12:48,680 --> 00:12:55,579
container sorry the cloud provider which

242
00:12:51,920 --> 00:13:01,089
could be any of the big ones GCPs or

243
00:12:55,580 --> 00:13:03,920
Google IBM Microsoft sup AWS and they

244
00:13:01,090 --> 00:13:05,750
spin up a container so this container is

245
00:13:03,920 --> 00:13:07,490
out of your control really it's not like

246
00:13:05,750 --> 00:13:10,010
you can connect to the container or you

247
00:13:07,490 --> 00:13:12,890
can decide what's gonna be there no it's

248
00:13:10,010 --> 00:13:16,670
not your container the container randoms

249
00:13:12,890 --> 00:13:19,850
randomly spin up for your code and runs

250
00:13:16,670 --> 00:13:21,620
the code that that you decide that you

251
00:13:19,850 --> 00:13:23,720
want to run for this event so what

252
00:13:21,620 --> 00:13:28,400
actually happens is that the container

253
00:13:23,720 --> 00:13:30,950
itself is a read-only environment apart

254
00:13:28,400 --> 00:13:33,199
from the slash temp directory whatever

255
00:13:30,950 --> 00:13:34,580
you want to process you want to you're

256
00:13:33,200 --> 00:13:36,860
gonna do it in the slash temp directory

257
00:13:34,580 --> 00:13:38,660
because it's the only play place that

258
00:13:36,860 --> 00:13:42,650
you can write stuff or process stuff

259
00:13:38,660 --> 00:13:46,060
into so in a attacker perspective this

260
00:13:42,650 --> 00:13:50,079
is a nice place to look at right okay

261
00:13:46,060 --> 00:13:52,790
the event triggers from different of

262
00:13:50,080 --> 00:13:55,820
events sources could be an email a log

263
00:13:52,790 --> 00:13:58,189
an API gateway and I'm qtt which is an

264
00:13:55,820 --> 00:14:00,950
IOT protocol file that was changed in

265
00:13:58,190 --> 00:14:03,740
authentication service and so on and the

266
00:14:00,950 --> 00:14:05,510
source code of the source code that you

267
00:14:03,740 --> 00:14:07,850
wrote for this specific function is

268
00:14:05,510 --> 00:14:13,939
gonna be stored under a slash var slash

269
00:14:07,850 --> 00:14:17,810
desk or link to it in under slash proc

270
00:14:13,940 --> 00:14:20,750
process ID CWD so your source code is

271
00:14:17,810 --> 00:14:22,819
also also resides in the container this

272
00:14:20,750 --> 00:14:26,420
is also a nice place to look at if

273
00:14:22,820 --> 00:14:29,450
you're in attacker another important and

274
00:14:26,420 --> 00:14:32,660
interesting stuff depends were what side

275
00:14:29,450 --> 00:14:33,199
of the attacker are you the environment

276
00:14:32,660 --> 00:14:37,009
variable

277
00:14:33,199 --> 00:14:39,229
are located in the environment they are

278
00:14:37,009 --> 00:14:44,059
built in there and you can call them

279
00:14:39,230 --> 00:14:46,970
with and the ants and process and what

280
00:14:44,059 --> 00:14:50,059
happens is that when this container

281
00:14:46,970 --> 00:14:51,859
spins up the cloud provider takes the

282
00:14:50,059 --> 00:14:53,899
policy or the permissions that you gave

283
00:14:51,859 --> 00:14:58,220
the function and translated it

284
00:14:53,899 --> 00:15:00,589
translates it into a temporary token and

285
00:14:58,220 --> 00:15:02,779
this token valley's for a couple of

286
00:15:00,589 --> 00:15:04,850
minutes couple of depends it could be

287
00:15:02,779 --> 00:15:06,799
even for a couple of hours and it's

288
00:15:04,850 --> 00:15:09,559
gonna reside inside environment

289
00:15:06,799 --> 00:15:12,309
variables so if someone can access the

290
00:15:09,559 --> 00:15:16,839
environment variables they can actually

291
00:15:12,309 --> 00:15:19,519
impersonate to the function so if I am

292
00:15:16,839 --> 00:15:21,529
somehow again access to D to the

293
00:15:19,519 --> 00:15:22,939
container or T the function with an

294
00:15:21,529 --> 00:15:24,799
injection code injection command

295
00:15:22,939 --> 00:15:27,230
injection whatever I have and I can

296
00:15:24,799 --> 00:15:30,679
steal the environment variables I can

297
00:15:27,230 --> 00:15:32,899
run from my own computer at home with

298
00:15:30,679 --> 00:15:34,369
the same permissions that the function

299
00:15:32,899 --> 00:15:39,769
has and I can do whatever the function

300
00:15:34,369 --> 00:15:42,589
has okay so just so we understand how

301
00:15:39,769 --> 00:15:45,799
the policy works before we can before we

302
00:15:42,589 --> 00:15:48,799
move on to see how things go bad if you

303
00:15:45,799 --> 00:15:51,559
do it wrong I have this very short

304
00:15:48,799 --> 00:15:54,999
function what it does it's it's a code

305
00:15:51,559 --> 00:16:00,410
that of a function that is triggered via

306
00:15:54,999 --> 00:16:05,829
an f3 f3 is a cloud storage for files or

307
00:16:00,410 --> 00:16:09,049
a blob if your imager and the trigger

308
00:16:05,829 --> 00:16:13,549
the file upload file download whatever

309
00:16:09,049 --> 00:16:15,499
that was file delete triggers a function

310
00:16:13,549 --> 00:16:19,279
now this function all it knows is that

311
00:16:15,499 --> 00:16:22,519
it got an event it literally a variable

312
00:16:19,279 --> 00:16:24,199
called event from the cloud and then you

313
00:16:22,519 --> 00:16:27,949
can do whatever you want was this event

314
00:16:24,199 --> 00:16:29,599
variable argument you don't control

315
00:16:27,949 --> 00:16:31,729
anything else but inside the event

316
00:16:29,600 --> 00:16:34,730
argument you're gonna find the records

317
00:16:31,730 --> 00:16:39,679
and the f3 and you can get the file name

318
00:16:34,730 --> 00:16:43,220
under bucket name sorry the bucket name

319
00:16:39,679 --> 00:16:46,939
under bucket name and the file key is

320
00:16:43,220 --> 00:16:50,379
called key and under object key so now

321
00:16:46,939 --> 00:16:54,679
that I have have the buckets and the key

322
00:16:50,379 --> 00:16:58,100
what I can do is call an API and AWS API

323
00:16:54,679 --> 00:17:00,279
in this case which is called get object

324
00:16:58,100 --> 00:17:04,909
and all I have to do is give the

325
00:17:00,279 --> 00:17:07,039
function or this API the bucket name and

326
00:17:04,909 --> 00:17:08,329
the key name now if my function has

327
00:17:07,039 --> 00:17:13,398
permission to do so

328
00:17:08,329 --> 00:17:15,888
it can go and grab the file okay so the

329
00:17:13,398 --> 00:17:18,559
best way would be to do something like

330
00:17:15,888 --> 00:17:21,019
that so the policy for the function will

331
00:17:18,559 --> 00:17:24,109
be very limited and will tell the

332
00:17:21,019 --> 00:17:26,839
function well you can only do a 3 get

333
00:17:24,109 --> 00:17:29,570
object which is what I actually do but

334
00:17:26,839 --> 00:17:32,090
you can also only do that on this

335
00:17:29,570 --> 00:17:35,600
specific bucket which is what you want

336
00:17:32,090 --> 00:17:38,870
to do if you're a developer but most of

337
00:17:35,600 --> 00:17:40,879
the time wind up like this which means

338
00:17:38,870 --> 00:17:42,080
well you you're limited to the bucket

339
00:17:40,879 --> 00:17:44,510
because I know what bucket you're

340
00:17:42,080 --> 00:17:46,699
working on I'm working on I mean from

341
00:17:44,510 --> 00:17:49,639
the developer perspective but I'm not

342
00:17:46,700 --> 00:17:52,549
sure if I want to download the file what

343
00:17:49,639 --> 00:17:55,340
it is translated to in terms of API so

344
00:17:52,549 --> 00:17:58,908
I'm gonna do in terms of actions in the

345
00:17:55,340 --> 00:18:01,699
policy so I'm gonna put here wild card

346
00:17:58,909 --> 00:18:04,220
which means that in this case the

347
00:18:01,700 --> 00:18:07,149
function can do whatever it wants

348
00:18:04,220 --> 00:18:09,700
inside is a three bucket so it can

349
00:18:07,149 --> 00:18:12,739
actually delete the bucket Korea

350
00:18:09,700 --> 00:18:14,450
changed policies their upload file

351
00:18:12,740 --> 00:18:18,440
delete files download for whatever you

352
00:18:14,450 --> 00:18:21,470
want but in some cases we're gonna get

353
00:18:18,440 --> 00:18:23,929
something like that which is where it

354
00:18:21,470 --> 00:18:27,889
really gets interesting because if you

355
00:18:23,929 --> 00:18:30,590
go to stack overflow or even in some

356
00:18:27,889 --> 00:18:31,908
cases to the documentation of the cloud

357
00:18:30,590 --> 00:18:34,760
provider you're gonna find this

358
00:18:31,909 --> 00:18:36,710
permission which tells you well we don't

359
00:18:34,760 --> 00:18:38,629
know what you want or we don't know what

360
00:18:36,710 --> 00:18:41,059
bucket you want so let's just put that

361
00:18:38,629 --> 00:18:42,649
and tell the function or give the

362
00:18:41,059 --> 00:18:45,408
function permission to do whatever it

363
00:18:42,649 --> 00:18:47,570
wants over the f3 service which means

364
00:18:45,409 --> 00:18:49,580
not only it can do whatever it wants

365
00:18:47,570 --> 00:18:51,800
inside as

366
00:18:49,580 --> 00:18:55,010
in action like the leads upload and so

367
00:18:51,800 --> 00:18:59,180
on it can do that on any bucket in the

368
00:18:55,010 --> 00:19:02,600
account so if my function even though it

369
00:18:59,180 --> 00:19:06,560
does always get the same event from the

370
00:19:02,600 --> 00:19:09,280
same a3 and will originally or in the

371
00:19:06,560 --> 00:19:11,450
valid case it will go to the specific

372
00:19:09,280 --> 00:19:15,020
bucket that I'm working with and

373
00:19:11,450 --> 00:19:18,140
download the file potentially it can do

374
00:19:15,020 --> 00:19:19,790
whatever it wants it can go and go to a

375
00:19:18,140 --> 00:19:21,920
different bucket that unrelated to the

376
00:19:19,790 --> 00:19:24,170
application and stores even internal

377
00:19:21,920 --> 00:19:26,450
information and get information out of

378
00:19:24,170 --> 00:19:29,120
there change the policy of the bucket

379
00:19:26,450 --> 00:19:34,340
and make it public so everyone will see

380
00:19:29,120 --> 00:19:38,899
it so this can ends up in really a very

381
00:19:34,340 --> 00:19:41,929
serious breach in your organization and

382
00:19:38,900 --> 00:19:44,270
I mean if you do it in something that

383
00:19:41,930 --> 00:19:47,120
happens you're fired for sure about that

384
00:19:44,270 --> 00:19:48,800
it could be even illegal actions against

385
00:19:47,120 --> 00:19:51,800
you I know it depends how you did it I

386
00:19:48,800 --> 00:19:54,320
mean okay so after we established all

387
00:19:51,800 --> 00:19:59,120
the grounds what we're gonna do now is

388
00:19:54,320 --> 00:20:01,730
I'm gonna go and start taking services

389
00:19:59,120 --> 00:20:04,040
that are available in the cloud and are

390
00:20:01,730 --> 00:20:06,290
not very common in the traditional

391
00:20:04,040 --> 00:20:10,460
monolith applications and see how

392
00:20:06,290 --> 00:20:12,530
through these events I can still cause

393
00:20:10,460 --> 00:20:14,420
damage using injection attacks

394
00:20:12,530 --> 00:20:15,950
so you're I hope you know injection

395
00:20:14,420 --> 00:20:18,080
attacks it's not like limited to a

396
00:20:15,950 --> 00:20:20,090
specific injection can be code injection

397
00:20:18,080 --> 00:20:21,169
command injection and SQL injection

398
00:20:20,090 --> 00:20:24,230
whatever injections that you want

399
00:20:21,170 --> 00:20:27,470
anything that transfer bad input into

400
00:20:24,230 --> 00:20:32,150
the cloud all right first one is gonna

401
00:20:27,470 --> 00:20:35,870
be most the more may be similar to them

402
00:20:32,150 --> 00:20:38,000
to the traditional application was to

403
00:20:35,870 --> 00:20:40,909
start with so what I have what I have

404
00:20:38,000 --> 00:20:43,220
here is a set up that has a slack chat

405
00:20:40,910 --> 00:20:48,020
bot that interacts with the user it

406
00:20:43,220 --> 00:20:50,720
could be a support sales whatever you

407
00:20:48,020 --> 00:20:53,080
want whatever you want to use your chat

408
00:20:50,720 --> 00:20:56,120
it's very common to use chat bots on

409
00:20:53,080 --> 00:20:58,310
server list because whenever someone

410
00:20:56,120 --> 00:21:00,229
sends an email you can just trigger a

411
00:20:58,310 --> 00:21:02,639
code that will run process whatever you

412
00:21:00,230 --> 00:21:05,520
need and that's it you don't have to

413
00:21:02,640 --> 00:21:07,860
putting I am running idle for the entire

414
00:21:05,520 --> 00:21:10,379
time so what's gonna happen is that the

415
00:21:07,860 --> 00:21:14,250
user interact with slack slack wolf is

416
00:21:10,380 --> 00:21:16,710
configured to send the event to an alum

417
00:21:14,250 --> 00:21:19,350
the function through the slack API to

418
00:21:16,710 --> 00:21:22,380
the API gateway of the organization and

419
00:21:19,350 --> 00:21:25,110
then it's going to trigger the lambda

420
00:21:22,380 --> 00:21:28,080
function which is the lot a function

421
00:21:25,110 --> 00:21:30,389
that runs the code which gonna write the

422
00:21:28,080 --> 00:21:33,149
message and the reply to the DynamoDB

423
00:21:30,390 --> 00:21:35,910
database it's a no sequel database for

424
00:21:33,150 --> 00:21:38,270
records and then it's going to go back

425
00:21:35,910 --> 00:21:39,480
and send the response back to the user

426
00:21:38,270 --> 00:21:42,299
okay

427
00:21:39,480 --> 00:21:43,260
there are no limitations there you can

428
00:21:42,299 --> 00:21:47,340
do whatever you want

429
00:21:43,260 --> 00:21:51,480
in terms of inputs and we're gonna

430
00:21:47,340 --> 00:22:03,389
target the slack Channel all right let's

431
00:21:51,480 --> 00:22:06,360
see how we do that so as I said I

432
00:22:03,390 --> 00:22:09,210
presented those demos on DEFCON so

433
00:22:06,360 --> 00:22:12,270
you're gonna see some background related

434
00:22:09,210 --> 00:22:14,309
to the event so here I have the channel

435
00:22:12,270 --> 00:22:17,010
that I'm interacting with it's just a

436
00:22:14,309 --> 00:22:19,410
chat bar that I'm sending has some

437
00:22:17,010 --> 00:22:22,320
machine learning or actually a lot of

438
00:22:19,410 --> 00:22:25,650
ifs or actually not so many ifs just

439
00:22:22,320 --> 00:22:28,649
like five and I'm gonna interact with it

440
00:22:25,650 --> 00:22:31,049
and as we know in the security world

441
00:22:28,650 --> 00:22:32,880
it's not like we we know what's going on

442
00:22:31,049 --> 00:22:35,429
behind the scenes so we have to do some

443
00:22:32,880 --> 00:22:38,760
trial and error and find out if it's

444
00:22:35,429 --> 00:22:40,860
vulnerable so let's say I figure it out

445
00:22:38,760 --> 00:22:44,910
and there is there are ways to know that

446
00:22:40,860 --> 00:22:46,979
maybe from github maybe from again

447
00:22:44,910 --> 00:22:49,410
travel mirror seeing source code or

448
00:22:46,980 --> 00:22:51,630
whatever maybe internal knowledge let's

449
00:22:49,410 --> 00:22:55,500
say I found out that this function is

450
00:22:51,630 --> 00:22:57,660
vulnerable to a specific or has a

451
00:22:55,500 --> 00:23:00,890
specific library that is vulnerable to

452
00:22:57,660 --> 00:23:03,299
command code injection now I knew this

453
00:23:00,890 --> 00:23:05,970
vulnerability or libraries that the

454
00:23:03,299 --> 00:23:08,639
function is using I went to the internet

455
00:23:05,970 --> 00:23:10,890
Google and found out some nice exploits

456
00:23:08,640 --> 00:23:13,250
there so basically it's a prepared

457
00:23:10,890 --> 00:23:15,799
exploit only I modified it a little bit

458
00:23:13,250 --> 00:23:17,870
to attack lambda function rather than a

459
00:23:15,799 --> 00:23:19,580
server cut think about it there is no

460
00:23:17,870 --> 00:23:23,120
server where I'm standing

461
00:23:19,580 --> 00:23:25,158
my code is not gonna leave in the server

462
00:23:23,120 --> 00:23:27,889
it's just gonna run inside a read-only

463
00:23:25,159 --> 00:23:30,020
container which is a single purpose

464
00:23:27,890 --> 00:23:33,620
container and it's gonna die right after

465
00:23:30,020 --> 00:23:35,658
I send the request but nevertheless I'm

466
00:23:33,620 --> 00:23:38,899
gonna try so what I'm gonna do is I'm

467
00:23:35,659 --> 00:23:43,280
gonna run a child process that exits so

468
00:23:38,900 --> 00:23:46,059
we node which is very common back end or

469
00:23:43,280 --> 00:23:50,629
runtime for lambda functions I'm gonna

470
00:23:46,059 --> 00:23:54,918
start a child process and Ron curl I

471
00:23:50,630 --> 00:23:58,880
just split it up so slack would not

472
00:23:54,919 --> 00:24:00,919
translated it into a link and then you

473
00:23:58,880 --> 00:24:03,610
can see I got it here barely

474
00:24:00,919 --> 00:24:06,890
you can barely see but I got here in my

475
00:24:03,610 --> 00:24:09,678
computer this is just an HTTP tunnel in

476
00:24:06,890 --> 00:24:11,480
my own computer so I can receive

477
00:24:09,679 --> 00:24:14,900
requests from the internet without

478
00:24:11,480 --> 00:24:17,780
having to have a static IP address so

479
00:24:14,900 --> 00:24:19,280
now I did the test it worked now I want

480
00:24:17,780 --> 00:24:20,750
to get some information so what I'm

481
00:24:19,280 --> 00:24:24,639
gonna do is I'm gonna change the slash

482
00:24:20,750 --> 00:24:26,809
tab there to another command which is LS

483
00:24:24,640 --> 00:24:29,150
just because I want to know what's

484
00:24:26,809 --> 00:24:33,740
inside and you can see that I got the

485
00:24:29,150 --> 00:24:35,900
index jjswitzer Dame you can do whatever

486
00:24:33,740 --> 00:24:39,380
you want but it's that the default name

487
00:24:35,900 --> 00:24:41,630
for the handler or the file the original

488
00:24:39,380 --> 00:24:44,059
file that receives the event so now I

489
00:24:41,630 --> 00:24:46,220
want this file even though it's not it

490
00:24:44,059 --> 00:24:48,678
doesn't reside on this on a server it

491
00:24:46,220 --> 00:24:50,330
still give me a lot of information

492
00:24:48,679 --> 00:24:53,570
because I know what the function is

493
00:24:50,330 --> 00:24:58,090
going to do so I'm gonna send and

494
00:24:53,570 --> 00:25:00,889
replace this now with cat index dot JSON

495
00:24:58,090 --> 00:25:03,230
just in order for me to get that through

496
00:25:00,890 --> 00:25:05,840
HTTP I'm gonna wrap it up with base64

497
00:25:03,230 --> 00:25:10,130
right because I want to be able to send

498
00:25:05,840 --> 00:25:14,000
new lines and CRLs into my computer and

499
00:25:10,130 --> 00:25:18,620
I got the basics T for let's face

500
00:25:14,000 --> 00:25:21,620
forward that's board I got this into my

501
00:25:18,620 --> 00:25:25,600
computer and just gonna copy that now

502
00:25:21,620 --> 00:25:29,949
and decode it on my computer

503
00:25:25,600 --> 00:25:34,750
echo base64 pi base64 decode that's it

504
00:25:29,950 --> 00:25:38,320
what I have now on the on there is a

505
00:25:34,750 --> 00:25:40,090
source code of the function it's now in

506
00:25:38,320 --> 00:25:41,679
my computer I can investigate what I

507
00:25:40,090 --> 00:25:44,560
want and see what happens

508
00:25:41,680 --> 00:25:47,230
so first thing that I notice is that the

509
00:25:44,560 --> 00:25:52,210
function interactions flag which I knew

510
00:25:47,230 --> 00:25:54,850
already but now I know how or what code

511
00:25:52,210 --> 00:25:58,120
it uses to interact blue slack and I can

512
00:25:54,850 --> 00:26:00,399
imitate that so I'll see we'll see in a

513
00:25:58,120 --> 00:26:02,320
second how I can use that I can also

514
00:26:00,400 --> 00:26:05,680
notice if you notice here if you can see

515
00:26:02,320 --> 00:26:08,710
here I also noticed some environment

516
00:26:05,680 --> 00:26:10,990
variables called token token and channel

517
00:26:08,710 --> 00:26:13,870
so I can use those even though I don't

518
00:26:10,990 --> 00:26:18,310
know them no yet I can get them but I

519
00:26:13,870 --> 00:26:19,570
can just use them as they as is but what

520
00:26:18,310 --> 00:26:22,360
I'm gonna show you now is the most

521
00:26:19,570 --> 00:26:25,510
important part is that as you can see

522
00:26:22,360 --> 00:26:30,790
here there is a var DynamoDB equals new

523
00:26:25,510 --> 00:26:33,790
AWS dynamodb and one line above is aw s

524
00:26:30,790 --> 00:26:38,980
equals require AWS SDK so the function

525
00:26:33,790 --> 00:26:41,320
uses WS SDK okay which also resides

526
00:26:38,980 --> 00:26:44,230
automatically in the environment and it

527
00:26:41,320 --> 00:26:47,770
uses dynamodb which is a variable name

528
00:26:44,230 --> 00:26:49,840
for using the DynamoDB service one night

529
00:26:47,770 --> 00:26:53,020
we have beneath that you can see that

530
00:26:49,840 --> 00:26:55,260
the not DynamoDB puts item which is what

531
00:26:53,020 --> 00:26:57,730
the function is doing is taking my

532
00:26:55,260 --> 00:27:00,030
conversation or my message and the

533
00:26:57,730 --> 00:27:02,710
response that was generated for me and

534
00:27:00,030 --> 00:27:06,010
as you can see user name time step

535
00:27:02,710 --> 00:27:08,590
message responds and writes it into the

536
00:27:06,010 --> 00:27:12,280
dynamo DB database using the food item

537
00:27:08,590 --> 00:27:13,570
api here but we already saw that the

538
00:27:12,280 --> 00:27:17,590
developer wasn't really a security

539
00:27:13,570 --> 00:27:19,990
person and it puts some wildcards in

540
00:27:17,590 --> 00:27:23,169
there so what I'm gonna do now is I'm

541
00:27:19,990 --> 00:27:25,240
gonna prepare a specific exploit that

542
00:27:23,170 --> 00:27:28,180
will take all this information that I

543
00:27:25,240 --> 00:27:29,710
got and let me take you through it it's

544
00:27:28,180 --> 00:27:32,230
not very complicated I'm gonna do a

545
00:27:29,710 --> 00:27:34,060
require because I'm not sure exactly

546
00:27:32,230 --> 00:27:36,610
where again I'm gonna fall in the code

547
00:27:34,060 --> 00:27:39,129
it was already imported or not

548
00:27:36,610 --> 00:27:41,919
and then I'm gonna do a VAR HTTP so I

549
00:27:39,130 --> 00:27:45,309
can send an HTTP request and I'm gonna

550
00:27:41,920 --> 00:27:49,240
do of our new dynamo DB document dot

551
00:27:45,309 --> 00:27:51,550
scan the difference between scan and put

552
00:27:49,240 --> 00:27:53,170
item is that put item that's what it

553
00:27:51,550 --> 00:27:56,080
needs to be doing to write into the

554
00:27:53,170 --> 00:27:59,530
database and scan basically scans the

555
00:27:56,080 --> 00:28:02,169
entire database and split and pushes the

556
00:27:59,530 --> 00:28:06,490
or gives the output of the entire

557
00:28:02,170 --> 00:28:08,559
database out and then I don't need to

558
00:28:06,490 --> 00:28:10,630
use the tunnel anymore because slack the

559
00:28:08,559 --> 00:28:12,520
function can interact to this track

560
00:28:10,630 --> 00:28:15,280
right so I'm gonna make it either fun

561
00:28:12,520 --> 00:28:17,470
even nicer for me and I'm gonna use the

562
00:28:15,280 --> 00:28:19,270
same environment variables that the

563
00:28:17,470 --> 00:28:23,890
function is doing and I'm gonna send an

564
00:28:19,270 --> 00:28:27,040
HTTP request into slack API again all

565
00:28:23,890 --> 00:28:29,980
the information is already there so when

566
00:28:27,040 --> 00:28:32,620
I sent that you can see that I got the

567
00:28:29,980 --> 00:28:35,530
entire database dump into my slack

568
00:28:32,620 --> 00:28:38,770
channel here and all of that and I also

569
00:28:35,530 --> 00:28:41,350
change the icon just for fun but again

570
00:28:38,770 --> 00:28:43,570
this happens only for me it's not like

571
00:28:41,350 --> 00:28:46,419
it's gonna be persistent and anyone else

572
00:28:43,570 --> 00:28:48,610
is gonna have it it just it ran once and

573
00:28:46,420 --> 00:28:50,590
that's it the codec died but for me it's

574
00:28:48,610 --> 00:28:51,459
enough I got the entire database or a

575
00:28:50,590 --> 00:28:54,520
part of it

576
00:28:51,460 --> 00:28:56,170
maybe the function is limited for there

577
00:28:54,520 --> 00:28:58,210
are most of the time there are limited

578
00:28:56,170 --> 00:29:02,500
for 5 seconds and I cannot scan entire

579
00:28:58,210 --> 00:29:04,210
database so I can do it in chunks but I

580
00:29:02,500 --> 00:29:06,220
got the entire database here and that

581
00:29:04,210 --> 00:29:11,910
was just because the developer put a

582
00:29:06,220 --> 00:29:17,800
wild card in the function actions okay

583
00:29:11,910 --> 00:29:20,440
so we we saw how we can do it through an

584
00:29:17,800 --> 00:29:23,260
API which was really party application

585
00:29:20,440 --> 00:29:25,809
it's very common in serverless it's not

586
00:29:23,260 --> 00:29:28,690
uncommon in regular application now

587
00:29:25,809 --> 00:29:32,500
we're gonna slowly get into things that

588
00:29:28,690 --> 00:29:35,500
are more related to server less specific

589
00:29:32,500 --> 00:29:37,140
or traditional or service environments

590
00:29:35,500 --> 00:29:40,210
so the first the second part is gonna be

591
00:29:37,140 --> 00:29:43,270
a cloud storage so what's gonna happen

592
00:29:40,210 --> 00:29:46,030
here is that I'm gonna upload a file

593
00:29:43,270 --> 00:29:48,520
into a cloud storage so the application

594
00:29:46,030 --> 00:29:49,350
wants me to upload a file and it takes

595
00:29:48,520 --> 00:29:51,929
the file and up

596
00:29:49,350 --> 00:29:54,149
- cloud storage through some JavaScript

597
00:29:51,929 --> 00:29:57,929
in the client and that triggers a

598
00:29:54,150 --> 00:29:59,760
function so to process my file upload so

599
00:29:57,929 --> 00:30:02,730
what I'm gonna do and I'm gonna get to

600
00:29:59,760 --> 00:30:05,669
get to do that I'm actually gonna use a

601
00:30:02,730 --> 00:30:09,419
very secure like a sick normally secured

602
00:30:05,669 --> 00:30:11,789
environment where I get a signed link to

603
00:30:09,419 --> 00:30:13,919
my specific bucket which I can use for

604
00:30:11,789 --> 00:30:17,520
two minutes only to upload a specific

605
00:30:13,919 --> 00:30:20,340
file that I requested previously so it

606
00:30:17,520 --> 00:30:23,490
sounds secure it is the it's not the

607
00:30:20,340 --> 00:30:26,639
problem the problem is that the function

608
00:30:23,490 --> 00:30:29,100
that gonna process that one has too many

609
00:30:26,640 --> 00:30:31,799
permissions and to is not validating

610
00:30:29,100 --> 00:30:33,990
anything and I can just put some

611
00:30:31,799 --> 00:30:36,450
injections command injections in the

612
00:30:33,990 --> 00:30:39,780
file name so the process is that I'm

613
00:30:36,450 --> 00:30:42,030
going to call an API gateway and then

614
00:30:39,780 --> 00:30:43,710
get a silent link from the lambda

615
00:30:42,030 --> 00:30:46,350
function and then I'm gonna upload it

616
00:30:43,710 --> 00:30:49,289
directly to an s3 bucket so not going

617
00:30:46,350 --> 00:30:52,770
through an API gateway and this is gonna

618
00:30:49,289 --> 00:30:55,260
be triggering a function and I'm gonna

619
00:30:52,770 --> 00:30:58,168
target this part so everything on the

620
00:30:55,260 --> 00:31:01,230
left is not important for me and there

621
00:30:58,169 --> 00:31:02,610
are some limitations basically I don't

622
00:31:01,230 --> 00:31:04,590
know why they did that but the only

623
00:31:02,610 --> 00:31:07,168
limitation is putting a slash in the

624
00:31:04,590 --> 00:31:09,299
file name and that's only because it's

625
00:31:07,169 --> 00:31:11,039
gonna put you inside like split it into

626
00:31:09,299 --> 00:31:12,809
a directory so it's gonna maybe

627
00:31:11,039 --> 00:31:17,789
interfere with your payload it's not

628
00:31:12,809 --> 00:31:20,090
like it's unacceptable so let's see how

629
00:31:17,789 --> 00:31:20,090
we do that

630
00:31:24,820 --> 00:31:34,270
the open and okay so this is I'll

631
00:31:33,220 --> 00:31:37,990
introduce you later

632
00:31:34,270 --> 00:31:40,720
this is a vulnerable application that is

633
00:31:37,990 --> 00:31:42,880
written entirely on Cerberus so this is

634
00:31:40,720 --> 00:31:44,800
an application like Annie calm but you

635
00:31:42,880 --> 00:31:48,940
can see there is also a leave a feedback

636
00:31:44,800 --> 00:31:54,159
here so I can send a feedback to the the

637
00:31:48,940 --> 00:31:57,610
website and I can also attach files now

638
00:31:54,160 --> 00:31:59,590
I open the developer tools and you can

639
00:31:57,610 --> 00:32:00,790
see that when I uploaded a file or

640
00:31:59,590 --> 00:32:05,620
selected a file

641
00:32:00,790 --> 00:32:07,690
I got an attachment this is what I'm

642
00:32:05,620 --> 00:32:10,570
sending an attachment and I got a

643
00:32:07,690 --> 00:32:13,470
response which is a sign link to a

644
00:32:10,570 --> 00:32:15,790
specific bucket in the cloud which is

645
00:32:13,470 --> 00:32:21,430
configured securely I mean the bucket is

646
00:32:15,790 --> 00:32:23,470
not public I cannot upload I cannot

647
00:32:21,430 --> 00:32:25,870
upload it directly to the bucket I have

648
00:32:23,470 --> 00:32:29,620
this sign linked and linked and this is

649
00:32:25,870 --> 00:32:31,149
the entire thing I can use but the

650
00:32:29,620 --> 00:32:33,340
function that is going to be triggered

651
00:32:31,150 --> 00:32:35,770
is not doing enough so what's gonna be

652
00:32:33,340 --> 00:32:39,370
what's gonna happen is that I'm gonna

653
00:32:35,770 --> 00:32:42,970
now do the same thing only I'm gonna

654
00:32:39,370 --> 00:32:47,560
change the file name to something that

655
00:32:42,970 --> 00:32:49,390
will do a curl as we can see and this is

656
00:32:47,560 --> 00:32:51,310
there gonna be a curl into my computer

657
00:32:49,390 --> 00:32:53,740
that is gonna send me the environment

658
00:32:51,310 --> 00:32:59,679
variables which we discussed that's it

659
00:32:53,740 --> 00:33:03,790
and pipe base rapid that's it and it's

660
00:32:59,680 --> 00:33:07,380
good to be a PDF or for that reason so I

661
00:33:03,790 --> 00:33:07,379
can just put a dot PDF at the end

662
00:33:09,049 --> 00:33:15,658
okay let's see so I uploaded I got a

663
00:33:13,620 --> 00:33:18,299
signed link and when I click send

664
00:33:15,659 --> 00:33:21,840
feedback is gonna actually upload it to

665
00:33:18,299 --> 00:33:24,090
the a3 bucket in a sec new way but it

666
00:33:21,840 --> 00:33:27,899
triggers the function and the function

667
00:33:24,090 --> 00:33:30,720
wasn't secure so I got the base64 and

668
00:33:27,899 --> 00:33:32,850
now what I'm gonna do is again I'm gonna

669
00:33:30,720 --> 00:33:36,950
decode that environment variables or

670
00:33:32,850 --> 00:33:36,949
base64 and get the environment variables

671
00:33:37,519 --> 00:33:42,509
these are the environment variables of

672
00:33:39,840 --> 00:33:44,189
every lambda function unless you edit

673
00:33:42,509 --> 00:33:47,009
some of your own but this is a default

674
00:33:44,190 --> 00:33:48,889
one and if you can see here there are

675
00:33:47,009 --> 00:33:52,470
some interesting parts

676
00:33:48,889 --> 00:33:54,779
that's just so what I'm doing now is I

677
00:33:52,470 --> 00:33:57,029
can use environment variables to use

678
00:33:54,779 --> 00:34:00,169
them but what I'm doing actually is I'm

679
00:33:57,029 --> 00:34:03,240
writing the credentials under the

680
00:34:00,169 --> 00:34:04,830
default location for AWS credentials in

681
00:34:03,240 --> 00:34:08,520
my in the computer so whenever you run

682
00:34:04,830 --> 00:34:11,279
an AWS CLI command it goes to that

683
00:34:08,520 --> 00:34:14,069
location and try to find a profile I'll

684
00:34:11,280 --> 00:34:15,899
call the profile DEF CON because it was

685
00:34:14,069 --> 00:34:16,440
a different conference and I'm only

686
00:34:15,899 --> 00:34:18,149
needs

687
00:34:16,440 --> 00:34:21,359
I only need some of them which is the

688
00:34:18,149 --> 00:34:24,839
default region I don't even have to use

689
00:34:21,359 --> 00:34:26,819
it but I use it for miss confusion the

690
00:34:24,839 --> 00:34:28,949
session token' the access key and the

691
00:34:26,819 --> 00:34:30,629
secret key and these are the things that

692
00:34:28,949 --> 00:34:34,469
live in the environment variables I

693
00:34:30,629 --> 00:34:35,460
stored that and now I don't need the

694
00:34:34,469 --> 00:34:38,098
application anymore

695
00:34:35,460 --> 00:34:41,280
I can now from this moment on I can

696
00:34:38,099 --> 00:34:44,030
interact with a cloud or with the yeah

697
00:34:41,280 --> 00:34:46,319
with the account of the cloud of this

698
00:34:44,030 --> 00:34:48,780
the cloud account of this application

699
00:34:46,319 --> 00:34:51,659
directly for my own computer using this

700
00:34:48,780 --> 00:34:53,129
profile and what the application is

701
00:34:51,659 --> 00:34:54,720
gonna see or what the organization is

702
00:34:53,129 --> 00:34:57,149
gonna see is that their function is

703
00:34:54,719 --> 00:34:58,649
doing some weird stuff they don't not

704
00:34:57,149 --> 00:35:00,390
gonna know it's me I'm using the

705
00:34:58,650 --> 00:35:04,079
environment variables of the function so

706
00:35:00,390 --> 00:35:07,109
I'm basically the function and now I can

707
00:35:04,079 --> 00:35:09,660
use AWS CLI which is provided by AWS of

708
00:35:07,109 --> 00:35:15,180
course and what I'm gonna do is I'm

709
00:35:09,660 --> 00:35:18,118
gonna do an f3 LS and LS is just listing

710
00:35:15,180 --> 00:35:19,980
the entire add three buckets and you can

711
00:35:18,119 --> 00:35:21,900
see I got the entire list over three

712
00:35:19,980 --> 00:35:24,300
buckets some of them in

713
00:35:21,900 --> 00:35:27,150
justing more some of them less I don't

714
00:35:24,300 --> 00:35:29,120
know what permission I have I can just

715
00:35:27,150 --> 00:35:32,010
try there are tools that let you try

716
00:35:29,120 --> 00:35:35,160
just running AWS commands and see what

717
00:35:32,010 --> 00:35:42,690
you can get so I want a specific one

718
00:35:35,160 --> 00:35:46,080
which is the DVS a receipt bucket bucket

719
00:35:42,690 --> 00:35:49,320
and I'm gonna use the profile and I'm

720
00:35:46,080 --> 00:35:51,450
gonna see there is a folder inside so

721
00:35:49,320 --> 00:35:53,660
I'm gonna get inside a folder and there

722
00:35:51,450 --> 00:35:56,160
are no there is another folder and

723
00:35:53,660 --> 00:36:00,540
another folder which is basically the

724
00:35:56,160 --> 00:36:02,910
date and you can see that there are two

725
00:36:00,540 --> 00:36:06,360
files there so now I want to get a

726
00:36:02,910 --> 00:36:08,879
specific file which I'm gonna use a

727
00:36:06,360 --> 00:36:10,980
different CLI which is get object we see

728
00:36:08,880 --> 00:36:13,590
that before I'm gonna give it as the

729
00:36:10,980 --> 00:36:16,800
bucket and the key that I need which is

730
00:36:13,590 --> 00:36:19,620
the full path to the file and now I'm

731
00:36:16,800 --> 00:36:22,290
gonna downloaded it into my slash temp

732
00:36:19,620 --> 00:36:24,960
received file and actually got a file

733
00:36:22,290 --> 00:36:26,790
from the s3 bucket from a secured bucket

734
00:36:24,960 --> 00:36:28,440
just because I had the environment

735
00:36:26,790 --> 00:36:30,480
variables of a function that has

736
00:36:28,440 --> 00:36:32,070
permissions to interact with it and you

737
00:36:30,480 --> 00:36:37,280
can see that I got someone else's

738
00:36:32,070 --> 00:36:40,410
receipt now I'm gonna do is I'm gonna

739
00:36:37,280 --> 00:36:42,060
maybe like a whatever I have the

740
00:36:40,410 --> 00:36:43,799
permissions to do that now I don't need

741
00:36:42,060 --> 00:36:48,090
to go through the application so I'm

742
00:36:43,800 --> 00:36:50,130
gonna make a fake fake receipt upload it

743
00:36:48,090 --> 00:36:52,050
into the same cloud because now I can do

744
00:36:50,130 --> 00:36:54,060
that and then call the service support

745
00:36:52,050 --> 00:36:56,010
service and say they placed an order I

746
00:36:54,060 --> 00:36:57,870
didn't get anything and then gonna see

747
00:36:56,010 --> 00:37:00,450
their estate and gonna send me of course

748
00:36:57,870 --> 00:37:02,940
this is just an example of a small thing

749
00:37:00,450 --> 00:37:04,859
that I did but actually I could delete

750
00:37:02,940 --> 00:37:07,430
the entire data they have in the account

751
00:37:04,860 --> 00:37:10,080
so this is like something more

752
00:37:07,430 --> 00:37:15,180
problematic or maybe they have a backup

753
00:37:10,080 --> 00:37:19,680
so I can just publish it and then being

754
00:37:15,180 --> 00:37:22,440
famous and then alright so we did that

755
00:37:19,680 --> 00:37:25,890
and now we're gonna use an

756
00:37:22,440 --> 00:37:28,170
authentication service to cause an

757
00:37:25,890 --> 00:37:32,609
injection attack so again all the

758
00:37:28,170 --> 00:37:35,550
examples here are AWS just because they

759
00:37:32,610 --> 00:37:37,980
are usually more there

760
00:37:35,550 --> 00:37:39,600
basically rule in the market and and I

761
00:37:37,980 --> 00:37:42,630
agree with that actually they're their

762
00:37:39,600 --> 00:37:45,779
solution is best it's so I forget to

763
00:37:42,630 --> 00:37:47,850
mention its disclaimer it's not AWS is

764
00:37:45,780 --> 00:37:50,670
problem here right everything that I

765
00:37:47,850 --> 00:37:53,810
show is because someone misconfigure

766
00:37:50,670 --> 00:37:56,130
their code and someone wrote a bad code

767
00:37:53,810 --> 00:37:58,740
so all the problems that you're gonna

768
00:37:56,130 --> 00:38:01,380
see here are not a problem of the

769
00:37:58,740 --> 00:38:05,279
provider of the infrastructure but I'm

770
00:38:01,380 --> 00:38:07,740
gonna maybe target the difficulties that

771
00:38:05,280 --> 00:38:09,810
or the struggles that the developers in

772
00:38:07,740 --> 00:38:12,209
the organization have to cause some

773
00:38:09,810 --> 00:38:14,070
damage through maybe and this is what we

774
00:38:12,210 --> 00:38:19,130
get from our customers and people that I

775
00:38:14,070 --> 00:38:22,500
talk to unsuspected or regions so

776
00:38:19,130 --> 00:38:25,140
someone is not used to the thought that

777
00:38:22,500 --> 00:38:27,360
maybe they can get hacked through an

778
00:38:25,140 --> 00:38:31,020
email or an authentication service

779
00:38:27,360 --> 00:38:32,670
because they also lived a lot of time in

780
00:38:31,020 --> 00:38:36,090
the traditional application and they're

781
00:38:32,670 --> 00:38:42,510
expecting requests and responses from an

782
00:38:36,090 --> 00:38:45,240
API okay so this scenario what I'm gonna

783
00:38:42,510 --> 00:38:49,350
do is I'm gonna use Cognito which is an

784
00:38:45,240 --> 00:38:51,990
authentication service directory of AWS

785
00:38:49,350 --> 00:38:53,880
and what's happened here is that when I

786
00:38:51,990 --> 00:38:55,950
log into the application it

787
00:38:53,880 --> 00:38:58,080
automatically routed me through the

788
00:38:55,950 --> 00:38:59,430
cognitive service to get a token and

789
00:38:58,080 --> 00:39:03,840
then I'm gonna get into the application

790
00:38:59,430 --> 00:39:06,450
using this token but for some reasons

791
00:39:03,840 --> 00:39:09,180
and this is an actual reason we mean

792
00:39:06,450 --> 00:39:13,020
it's a good reason also when I

793
00:39:09,180 --> 00:39:18,810
authenticate they organization wants to

794
00:39:13,020 --> 00:39:21,750
run a code to verify my user my email if

795
00:39:18,810 --> 00:39:24,240
I'm registering it could be to put some

796
00:39:21,750 --> 00:39:27,720
additional information inside my token

797
00:39:24,240 --> 00:39:29,520
you can give a community of trigger code

798
00:39:27,720 --> 00:39:31,709
that will put some information from the

799
00:39:29,520 --> 00:39:33,870
database to the specific user and they

800
00:39:31,710 --> 00:39:35,610
will sign it for you inside the token so

801
00:39:33,870 --> 00:39:37,319
you don't have to go to the database

802
00:39:35,610 --> 00:39:39,240
later on because it's already in the

803
00:39:37,320 --> 00:39:41,910
token so there are a lot of services

804
00:39:39,240 --> 00:39:44,189
where you can hook an authentication

805
00:39:41,910 --> 00:39:45,990
service with a lambda function and run

806
00:39:44,190 --> 00:39:48,680
code during the process of

807
00:39:45,990 --> 00:39:50,868
authentication so and

808
00:39:48,680 --> 00:39:54,319
we're gonna target okay so the

809
00:39:50,869 --> 00:39:57,530
limitation so Cognito verifies all the

810
00:39:54,319 --> 00:39:59,779
verifies emails and phone numbers and

811
00:39:57,530 --> 00:40:01,670
they have limitations of how they look

812
00:39:59,780 --> 00:40:02,990
because emails should be emails and

813
00:40:01,670 --> 00:40:06,020
phone numbers should be phone numbers

814
00:40:02,990 --> 00:40:08,839
but they also allow you to if you want

815
00:40:06,020 --> 00:40:14,109
to have custom types and have types like

816
00:40:08,839 --> 00:40:17,058
usernames that are not the actual maybe

817
00:40:14,109 --> 00:40:19,220
serve it or the optional type that is

818
00:40:17,059 --> 00:40:20,599
your gonna they're gonna validate but

819
00:40:19,220 --> 00:40:24,529
you can still use it for your

820
00:40:20,599 --> 00:40:27,920
authentication so I'm gonna sorry so I'm

821
00:40:24,530 --> 00:40:31,280
gonna target the authentication request

822
00:40:27,920 --> 00:40:34,849
to Cognito and maybe you're not maybe

823
00:40:31,280 --> 00:40:45,079
but basically get some damage done in

824
00:40:34,849 --> 00:40:47,839
the cloud it's already open all right so

825
00:40:45,079 --> 00:40:49,490
this is the authentication service you

826
00:40:47,839 --> 00:40:56,140
can custom it if you want if you're a

827
00:40:49,490 --> 00:40:59,240
developer and this is the admin right

828
00:40:56,140 --> 00:41:02,299
just log in as an administrator I have

829
00:40:59,240 --> 00:41:04,339
access to the admin section and I can

830
00:41:02,299 --> 00:41:06,020
list all the orders in the application

831
00:41:04,339 --> 00:41:08,180
it's for just for reference now I'm

832
00:41:06,020 --> 00:41:14,540
going to create a new user which is an

833
00:41:08,180 --> 00:41:22,779
on main user so I'm just gonna register

834
00:41:14,540 --> 00:41:26,450
here and then I'm gonna get a code to

835
00:41:22,780 --> 00:41:29,569
confirm my authentication service and I

836
00:41:26,450 --> 00:41:32,210
can log in and now that I'm trying to

837
00:41:29,569 --> 00:41:34,549
access the admin I'm not authorized all

838
00:41:32,210 --> 00:41:39,410
right it's not client-side it's also

839
00:41:34,549 --> 00:41:42,920
quite so so here I try to get the admin

840
00:41:39,410 --> 00:41:45,910
by force and nothing came up so just to

841
00:41:42,920 --> 00:41:45,910
show you you are unauthorised

842
00:41:46,000 --> 00:41:54,049
now so I've prepared so again I trial an

843
00:41:51,559 --> 00:41:57,470
or I find out that this functionality is

844
00:41:54,049 --> 00:42:01,280
vulnerable and we'll see as soon how I

845
00:41:57,470 --> 00:42:02,299
prepared a payload that is very hard to

846
00:42:01,280 --> 00:42:09,410
see

847
00:42:02,299 --> 00:42:11,599
and yeah let's see I hope I so what

848
00:42:09,410 --> 00:42:13,489
basically what I'm doing here

849
00:42:11,599 --> 00:42:16,549
it's an Ubuntu so I don't know how to

850
00:42:13,489 --> 00:42:20,959
zoom it zoom in right now so basically

851
00:42:16,549 --> 00:42:25,699
what I'm doing is calling some AWS SDK

852
00:42:20,959 --> 00:42:27,169
that is gonna do send an email sorry

853
00:42:25,699 --> 00:42:28,969
alright not send an email this is the

854
00:42:27,170 --> 00:42:31,579
next one this one is to set me as an

855
00:42:28,969 --> 00:42:35,929
admin user and let's see if I mark it in

856
00:42:31,579 --> 00:42:39,229
their admin set user password and then

857
00:42:35,929 --> 00:42:42,709
I'm gonna change the password for the

858
00:42:39,229 --> 00:42:46,549
administrator this is an IP I that has

859
00:42:42,709 --> 00:42:48,348
to exist and also just for myself I'm

860
00:42:46,549 --> 00:42:50,839
gonna put myself in the administrator

861
00:42:48,349 --> 00:42:54,079
group this is also open source

862
00:42:50,839 --> 00:42:56,719
everything I don't the bucket is open so

863
00:42:54,079 --> 00:42:58,549
you can just either come to me or look

864
00:42:56,719 --> 00:43:00,140
at the video later go to the bucket and

865
00:42:58,549 --> 00:43:04,579
download the payload so you can see for

866
00:43:00,140 --> 00:43:06,890
yourself basically this is what I'm

867
00:43:04,579 --> 00:43:10,819
gonna do change the password for the

868
00:43:06,890 --> 00:43:13,249
administrator and myself to an admin and

869
00:43:10,819 --> 00:43:15,019
this is a command that I'm just not now

870
00:43:13,249 --> 00:43:21,919
doing all I'm doing right now is I'm

871
00:43:15,019 --> 00:43:24,288
wrapping this payload inside the I'm

872
00:43:21,920 --> 00:43:28,819
wrapping this payload and then I'm gonna

873
00:43:24,289 --> 00:43:30,769
put it in our remote host and just

874
00:43:28,819 --> 00:43:34,849
upload it I have all the libraries that

875
00:43:30,769 --> 00:43:43,238
I need to use and then now let's go to

876
00:43:34,849 --> 00:43:47,809
the attack so I'm gonna register again

877
00:43:43,239 --> 00:43:50,089
domain does not exist I just put a typo

878
00:43:47,809 --> 00:43:52,249
in the domain this is how actually how I

879
00:43:50,089 --> 00:43:53,959
found out that it's vulnerable because I

880
00:43:52,249 --> 00:43:56,448
got a domain does not exist so they

881
00:43:53,959 --> 00:44:01,189
actually verify someone verifies my

882
00:43:56,449 --> 00:44:05,779
domain so wait before registering I have

883
00:44:01,189 --> 00:44:10,549
my help and I'm gonna put a user name

884
00:44:05,779 --> 00:44:14,179
which has the payload to go and fetch

885
00:44:10,549 --> 00:44:14,940
the exploit that I had so it's going to

886
00:44:14,179 --> 00:44:18,089
do

887
00:44:14,940 --> 00:44:20,099
some cdcd to get inside the / temp

888
00:44:18,089 --> 00:44:22,230
directory because I cannot use slashes

889
00:44:20,099 --> 00:44:23,970
and then I'm going to download the

890
00:44:22,230 --> 00:44:25,890
remote host add the payload from the

891
00:44:23,970 --> 00:44:27,868
remote host and then I'm gonna uncover

892
00:44:25,890 --> 00:44:30,328
it into the slash temp directory and

893
00:44:27,869 --> 00:44:33,480
then I'm gonna run I don't know if you

894
00:44:30,329 --> 00:44:37,740
can see that but it says here Python dot

895
00:44:33,480 --> 00:44:40,410
PI into the file a Python sorry

896
00:44:37,740 --> 00:44:45,598
space Y dot PI which is a file and then

897
00:44:40,410 --> 00:44:47,250
you guys sent myself some notification

898
00:44:45,599 --> 00:44:49,680
along the way to see that things are

899
00:44:47,250 --> 00:44:51,710
actually happening okay so I got a you

900
00:44:49,680 --> 00:44:59,149
are and then main password changed and

901
00:44:51,710 --> 00:44:59,150
let's see so now I'm gonna log back in I

902
00:45:00,559 --> 00:45:06,839
don't know I'm nervous that it works

903
00:45:02,819 --> 00:45:09,690
it's just it's recorded so now I logged

904
00:45:06,839 --> 00:45:12,270
in with my regular user joking and I got

905
00:45:09,690 --> 00:45:14,579
all the admitting formation okay I

906
00:45:12,270 --> 00:45:16,799
change myself when I moved to a group

907
00:45:14,579 --> 00:45:20,099
that is called administrator and now

908
00:45:16,799 --> 00:45:21,809
which is the nicest part in this case I

909
00:45:20,099 --> 00:45:24,440
don't know because maybe I don't know

910
00:45:21,809 --> 00:45:27,809
the group of it means I'm gonna log in

911
00:45:24,440 --> 00:45:30,089
with the password that I set to the

912
00:45:27,809 --> 00:45:32,579
administrator and now I logged in with a

913
00:45:30,089 --> 00:45:36,180
different password which is someone that

914
00:45:32,579 --> 00:45:38,039
I said now this API is exists you just

915
00:45:36,180 --> 00:45:41,299
need to be very careful with what you're

916
00:45:38,039 --> 00:45:44,099
doing but sometimes you need some admin

917
00:45:41,299 --> 00:45:48,359
capabilities in the cloud because you're

918
00:45:44,099 --> 00:45:50,460
an administrative the function

919
00:45:48,359 --> 00:45:52,890
permissions to do that without

920
00:45:50,460 --> 00:45:54,960
previewing without checking that

921
00:45:52,890 --> 00:45:57,089
actually or making sure that you're

922
00:45:54,960 --> 00:45:59,640
doing it correctly or manually that

923
00:45:57,089 --> 00:46:00,990
becomes a problem all right we have 15

924
00:45:59,640 --> 00:46:05,940
more minutes and I'm going to show you

925
00:46:00,990 --> 00:46:09,029
the last example so well because I have

926
00:46:05,940 --> 00:46:12,980
them okay so the next one is email let's

927
00:46:09,029 --> 00:46:12,980
keep it short and just go to the video

928
00:46:13,860 --> 00:46:21,750
all right so I have a call for papers

929
00:46:17,950 --> 00:46:30,100
and I'm gonna submit a paper here

930
00:46:21,750 --> 00:46:31,990
regular innocent submission and I'm

931
00:46:30,100 --> 00:46:33,730
gonna get an auto-reply because there is

932
00:46:31,990 --> 00:46:34,509
along the function behind you don't have

933
00:46:33,730 --> 00:46:36,760
to tell you again

934
00:46:34,510 --> 00:46:38,980
that tells me well thank you for your

935
00:46:36,760 --> 00:46:39,430
submission we got it and we'll be in

936
00:46:38,980 --> 00:46:41,350
touch

937
00:46:39,430 --> 00:46:43,359
now I'm gonna do is I'm gonna send them

938
00:46:41,350 --> 00:46:45,700
our just a regular amount we're PD a

939
00:46:43,360 --> 00:46:48,250
regular mobile click it's my everyday

940
00:46:45,700 --> 00:46:51,009
I'm doing that regularly while we're

941
00:46:48,250 --> 00:46:52,180
here so I'm sending a malware just a PDF

942
00:46:51,010 --> 00:46:54,340
with a malware here it's not an

943
00:46:52,180 --> 00:46:57,100
injection attack it just get some

944
00:46:54,340 --> 00:47:00,880
information out of that and I actually

945
00:46:57,100 --> 00:47:04,089
got the response that says hey hold up

946
00:47:00,880 --> 00:47:06,190
we found him out we're inside your it's

947
00:47:04,090 --> 00:47:09,070
not an actual right way but one

948
00:47:06,190 --> 00:47:11,350
but we found a malicious submission you

949
00:47:09,070 --> 00:47:13,990
can click here to review your submission

950
00:47:11,350 --> 00:47:17,170
this is it's actually works because I

951
00:47:13,990 --> 00:47:19,600
built it but it I mean it that what

952
00:47:17,170 --> 00:47:22,420
happened this is why I thought maybe

953
00:47:19,600 --> 00:47:25,180
they run some code behind the scene to

954
00:47:22,420 --> 00:47:27,880
check some stuff and then I prepared a

955
00:47:25,180 --> 00:47:31,419
payload that what it does is two things

956
00:47:27,880 --> 00:47:33,430
one is gonna send an email from the

957
00:47:31,420 --> 00:47:35,200
organization and I'm gonna send it to

958
00:47:33,430 --> 00:47:37,299
myself just to see that it works but I

959
00:47:35,200 --> 00:47:40,089
couldn't actually send it to anyone

960
00:47:37,300 --> 00:47:43,750
but again I always do two things one is

961
00:47:40,090 --> 00:47:45,790
nice and one is very nice and the more

962
00:47:43,750 --> 00:47:48,790
the nicer part is that I'm gonna take

963
00:47:45,790 --> 00:47:51,490
the bucket which is highly secured with

964
00:47:48,790 --> 00:47:54,880
all the submission and I'll show you and

965
00:47:51,490 --> 00:47:58,000
change the policy of the bucket to be

966
00:47:54,880 --> 00:48:01,320
open just because someone configured the

967
00:47:58,000 --> 00:48:04,990
bucket extremely well but someone else

968
00:48:01,320 --> 00:48:07,960
configured the function very bad so I

969
00:48:04,990 --> 00:48:10,270
can turn the secure bucket into an

970
00:48:07,960 --> 00:48:13,270
insecure bucket from a different maybe a

971
00:48:10,270 --> 00:48:15,220
different developer not maybe probably

972
00:48:13,270 --> 00:48:17,380
gonna be a different developer in some

973
00:48:15,220 --> 00:48:20,379
cases could be a different application

974
00:48:17,380 --> 00:48:23,560
entirely so they might not even know

975
00:48:20,380 --> 00:48:25,290
each other and again I'm gonna wrap that

976
00:48:23,560 --> 00:48:30,390
up and upload it to a remote

977
00:48:25,290 --> 00:48:33,960
host and then through email I'm gonna I

978
00:48:30,390 --> 00:48:36,930
prepare that a submission which is again

979
00:48:33,960 --> 00:48:40,050
going out into the slash directory curl

980
00:48:36,930 --> 00:48:43,220
into the exploit that I prepared on

981
00:48:40,050 --> 00:48:46,800
tardy hunter it and then run Python dot

982
00:48:43,220 --> 00:48:51,089
space X dot pi which is denied and I did

983
00:48:46,800 --> 00:48:54,680
the the pound key there to make the rest

984
00:48:51,090 --> 00:48:58,650
of it comment so now I'm gonna upload it

985
00:48:54,680 --> 00:49:00,270
and first I'm gonna show you the bucket

986
00:48:58,650 --> 00:49:01,980
is secured so you I don't have access to

987
00:49:00,270 --> 00:49:06,960
it even though I know the address and

988
00:49:01,980 --> 00:49:08,910
now I'm gonna submit my malicious file

989
00:49:06,960 --> 00:49:14,190
name or submission with the malicious

990
00:49:08,910 --> 00:49:16,080
file and again I submitted myself some

991
00:49:14,190 --> 00:49:19,200
notifications so I'll see that things

992
00:49:16,080 --> 00:49:21,810
happen phishing email bucket it hijacked

993
00:49:19,200 --> 00:49:23,490
okay so first of all I got two responses

994
00:49:21,810 --> 00:49:26,730
the first one is okay thank you

995
00:49:23,490 --> 00:49:29,930
we got your submission the second one is

996
00:49:26,730 --> 00:49:33,300
the one that I submitted from the

997
00:49:29,930 --> 00:49:36,149
origins of the organization and they say

998
00:49:33,300 --> 00:49:38,430
thank you for your submission you were

999
00:49:36,150 --> 00:49:42,210
you have been selected and click here

1000
00:49:38,430 --> 00:49:43,799
fishing comm to get your honorarium for

1001
00:49:42,210 --> 00:49:45,240
your application they're probably gonna

1002
00:49:43,800 --> 00:49:48,630
ask before Maybank you can do whatever

1003
00:49:45,240 --> 00:49:52,379
but as you can see i also change the

1004
00:49:48,630 --> 00:49:57,960
permissions of the bucket that holds the

1005
00:49:52,380 --> 00:50:01,410
entire submissions to be public and I

1006
00:49:57,960 --> 00:50:03,660
can now well I can now see the inter

1007
00:50:01,410 --> 00:50:06,350
files I can even download them if I want

1008
00:50:03,660 --> 00:50:10,020
and again this is fun because it's

1009
00:50:06,350 --> 00:50:15,330
submissions but it could be more severe

1010
00:50:10,020 --> 00:50:17,700
things that happens and because we're a

1011
00:50:15,330 --> 00:50:19,980
lacking time I'm not going to show you I

1012
00:50:17,700 --> 00:50:21,720
did it also with Alexa voice command so

1013
00:50:19,980 --> 00:50:23,550
you can actually do injections with

1014
00:50:21,720 --> 00:50:26,790
voice commands you can look it up in the

1015
00:50:23,550 --> 00:50:31,260
internet I actually basic basically I

1016
00:50:26,790 --> 00:50:33,900
said Alex please hack now yeah

1017
00:50:31,260 --> 00:50:37,980
now I'm joking but I did something like

1018
00:50:33,900 --> 00:50:41,430
I give it the information or the ID or

1019
00:50:37,980 --> 00:50:44,609
the account ID and then I said or true

1020
00:50:41,430 --> 00:50:46,799
or and you can pipe commands and then II

1021
00:50:44,609 --> 00:50:51,480
can cause SQL injection if the developer

1022
00:50:46,800 --> 00:50:55,790
wasn't smart enough is now security you

1023
00:50:51,480 --> 00:50:57,750
can do it with logs with code and

1024
00:50:55,790 --> 00:50:59,369
basically you can do it with a lot of

1025
00:50:57,750 --> 00:51:01,500
stuff so two things that I'm going to

1026
00:50:59,369 --> 00:51:04,140
mention is that I started the OS service

1027
00:51:01,500 --> 00:51:06,990
top 10 which is again it's open source

1028
00:51:04,140 --> 00:51:09,810
you can go and look take a look read the

1029
00:51:06,990 --> 00:51:12,000
report we have a first report and you

1030
00:51:09,810 --> 00:51:14,310
can participate and the second part you

1031
00:51:12,000 --> 00:51:16,859
can also open source you can download

1032
00:51:14,310 --> 00:51:19,230
the demo neural service application and

1033
00:51:16,859 --> 00:51:21,180
you can practice for yourself it's open

1034
00:51:19,230 --> 00:51:22,980
source you can actually if you have you

1035
00:51:21,180 --> 00:51:25,799
if you have an AWS account you can just

1036
00:51:22,980 --> 00:51:27,420
go to the repository and do three clicks

1037
00:51:25,800 --> 00:51:29,340
to get it installed so it no

1038
00:51:27,420 --> 00:51:31,590
configuration zero configurations you

1039
00:51:29,340 --> 00:51:34,530
have it up and running this is recorded

1040
00:51:31,590 --> 00:51:36,540
so I know I said it and it's recorded

1041
00:51:34,530 --> 00:51:40,109
don't install it on anyone's production

1042
00:51:36,540 --> 00:51:44,490
account because you'll get fired if not

1043
00:51:40,109 --> 00:51:46,799
go in prison they're just a bunch of

1044
00:51:44,490 --> 00:51:48,569
resources that are vulnerable to do

1045
00:51:46,800 --> 00:51:50,550
whatever they want in the account so

1046
00:51:48,570 --> 00:51:52,400
does that dumb do that thank you very

1047
00:51:50,550 --> 00:51:55,939
much for attending this talk

1048
00:51:52,400 --> 00:51:55,939
[Applause]

1049
00:51:56,940 --> 00:52:10,120
just in time for for questions demands

1050
00:52:02,350 --> 00:52:15,160
for questions yeah sorry oh they

1051
00:52:10,120 --> 00:52:21,940
repository it's recorded but okay you

1052
00:52:15,160 --> 00:52:25,000
know na komm /a /div ESA or I didn't put

1053
00:52:21,940 --> 00:52:36,520
it here you can just look it up okay any

1054
00:52:25,000 --> 00:52:38,020
other questions yeah okay so first of

1055
00:52:36,520 --> 00:52:39,759
all it's very difficult to even know

1056
00:52:38,020 --> 00:52:43,360
that there is a lambda function behind

1057
00:52:39,760 --> 00:52:46,270
there are some ways or another clouds

1058
00:52:43,360 --> 00:52:49,300
function there are some ways to know

1059
00:52:46,270 --> 00:52:51,850
they involve usually around headers but

1060
00:52:49,300 --> 00:52:53,920
this is only if it's an HTTP request and

1061
00:52:51,850 --> 00:52:57,460
you can see the headers if it's an email

1062
00:52:53,920 --> 00:53:00,280
there is no way to know you can just try

1063
00:52:57,460 --> 00:53:02,470
so if you suspect the function or an

1064
00:53:00,280 --> 00:53:05,530
application is built on server list you

1065
00:53:02,470 --> 00:53:07,750
have to know some payloads that will

1066
00:53:05,530 --> 00:53:11,380
target functions and try them like you

1067
00:53:07,750 --> 00:53:13,530
would do in regular applications all

1068
00:53:11,380 --> 00:53:13,530
right

