1
00:00:00,510 --> 00:00:08,309
this talk on extensible dev second

2
00:00:05,460 --> 00:00:11,030
pipelines with Jenkins docker terraform

3
00:00:08,309 --> 00:00:15,419
and a kitchen sink full of scanners by

4
00:00:11,030 --> 00:00:18,859
Richard McGuire I'll let him do the self

5
00:00:15,420 --> 00:00:22,198
introduction but he's from motifs create

6
00:00:18,859 --> 00:00:22,710
Richard hi I'm Richard Bullington

7
00:00:22,199 --> 00:00:24,480
McGuire

8
00:00:22,710 --> 00:00:25,949
my wife and I - aided so on the

9
00:00:24,480 --> 00:00:32,189
Bullington part and she's the McGuire

10
00:00:25,949 --> 00:00:35,670
part and I'm a principal architect at

11
00:00:32,189 --> 00:00:37,770
Lotus create we are a software product

12
00:00:35,670 --> 00:00:39,030
consultancy out of Reston Virginia and

13
00:00:37,770 --> 00:00:42,450
were one of the sponsors of the

14
00:00:39,030 --> 00:00:47,120
conference and over the last several

15
00:00:42,450 --> 00:00:49,559
years I've been working with dev sac ops

16
00:00:47,120 --> 00:00:52,769
concepts and practices quite a bit and

17
00:00:49,559 --> 00:00:55,860
I've wanted to show you some of the work

18
00:00:52,770 --> 00:00:59,070
in progress and share the repository

19
00:00:55,860 --> 00:01:06,060
that contains all of the consolidated

20
00:00:59,070 --> 00:01:12,960
demos so go ahead and see if it'll

21
00:01:06,060 --> 00:01:15,360
present for me yes okay so how does all

22
00:01:12,960 --> 00:01:18,330
this stuff fit together okay you might

23
00:01:15,360 --> 00:01:21,030
have all these tools you might wonder no

24
00:01:18,330 --> 00:01:24,240
does this even make sense that you need

25
00:01:21,030 --> 00:01:27,869
to pick something that is going to run

26
00:01:24,240 --> 00:01:30,899
your pipelines provide an auditable path

27
00:01:27,869 --> 00:01:32,130
that other people can see now there's so

28
00:01:30,900 --> 00:01:34,079
many different ways you can mutate

29
00:01:32,130 --> 00:01:36,899
infrastructure out there and if you

30
00:01:34,079 --> 00:01:39,059
don't have a good trail what happened

31
00:01:36,900 --> 00:01:41,040
you're gonna be in a in big trouble when

32
00:01:39,060 --> 00:01:46,290
the next person comes along and tries to

33
00:01:41,040 --> 00:01:51,960
mess with things so I'm going to show a

34
00:01:46,290 --> 00:01:55,829
little bit of the I'm gonna show a

35
00:01:51,960 --> 00:01:57,320
little bit of the the the setup that

36
00:01:55,829 --> 00:02:04,699
powers this okay

37
00:01:57,320 --> 00:02:11,160
so we have a we have a Jenkins server

38
00:02:04,700 --> 00:02:12,959
that talks to our github account and we

39
00:02:11,160 --> 00:02:13,950
have a repository in it that has a

40
00:02:12,959 --> 00:02:15,870
jenkins file

41
00:02:13,950 --> 00:02:19,109
so our folks here generally familiar

42
00:02:15,870 --> 00:02:21,510
with Jenkins is a CI system yeah okay

43
00:02:19,110 --> 00:02:24,390
you know it's it is not the sexiest CI

44
00:02:21,510 --> 00:02:26,549
system it is it's getting getting a

45
00:02:24,390 --> 00:02:28,109
little older a little creaky but it's in

46
00:02:26,550 --> 00:02:30,180
place in a lot of different places

47
00:02:28,110 --> 00:02:32,280
and it's very flexible despite its

48
00:02:30,180 --> 00:02:34,890
shortcomings it's it gets really heavy

49
00:02:32,280 --> 00:02:38,610
used in a lot of the accounts that I

50
00:02:34,890 --> 00:02:40,440
work with so one of the things that I've

51
00:02:38,610 --> 00:02:44,910
learned over the last decade is that you

52
00:02:40,440 --> 00:02:48,300
can use Jenkins to to act as like a task

53
00:02:44,910 --> 00:02:57,299
runner and if you use task act as a task

54
00:02:48,300 --> 00:02:59,819
runner and you set things up right you

55
00:02:57,299 --> 00:03:01,709
can have it run anything and this

56
00:02:59,819 --> 00:03:04,380
includes running your infrastructure as

57
00:03:01,709 --> 00:03:08,250
code tools so the pattern that this

58
00:03:04,380 --> 00:03:10,170
repository uses is to be able to run a

59
00:03:08,250 --> 00:03:13,590
whole host of infrastructure as code

60
00:03:10,170 --> 00:03:15,089
tools to deploy and maintain the little

61
00:03:13,590 --> 00:03:20,190
baby applications that live in this

62
00:03:15,090 --> 00:03:22,620
repository so no I can I can run Packer

63
00:03:20,190 --> 00:03:26,010
to build a new am i using ansible

64
00:03:22,620 --> 00:03:27,630
scripts to to build up you know the

65
00:03:26,010 --> 00:03:30,750
right set of packages to support the

66
00:03:27,630 --> 00:03:33,030
applications i want i can create code

67
00:03:30,750 --> 00:03:35,579
deploy archives so AWS code deploy is

68
00:03:33,030 --> 00:03:38,340
one of these tools that lets you pull

69
00:03:35,579 --> 00:03:40,890
applications that maybe have a

70
00:03:38,340 --> 00:03:42,420
complicated install process maybe there

71
00:03:40,890 --> 00:03:44,040
are legacy applications maybe they've

72
00:03:42,420 --> 00:03:46,738
lived in the datacenter under someone's

73
00:03:44,040 --> 00:03:48,000
desk for the last 10 years and now lucky

74
00:03:46,739 --> 00:03:50,010
you you have to get this stuff to the

75
00:03:48,000 --> 00:03:52,410
cloud and there is no way you're going

76
00:03:50,010 --> 00:03:54,660
to spend less than say a year twelve

77
00:03:52,410 --> 00:03:56,160
factorizing this thing and splitting it

78
00:03:54,660 --> 00:03:57,390
into a fleet of containerized micro

79
00:03:56,160 --> 00:04:00,150
services what do you do what's a

80
00:03:57,390 --> 00:04:06,119
practical approach this provides kind of

81
00:04:00,150 --> 00:04:09,390
a middle way so you know I could check

82
00:04:06,120 --> 00:04:11,370
some of the boxes here to tell it to

83
00:04:09,390 --> 00:04:16,978
package a new code to play archive for

84
00:04:11,370 --> 00:04:19,709
my latest for my latest codebase say

85
00:04:16,978 --> 00:04:21,750
deploy the current deploy the current

86
00:04:19,709 --> 00:04:24,630
one apply terraform if there are any

87
00:04:21,750 --> 00:04:27,300
changes to infrastructure you know I

88
00:04:24,630 --> 00:04:31,500
could even tell it like if I've

89
00:04:27,300 --> 00:04:33,000
had terraform rotating a new ami to

90
00:04:31,500 --> 00:04:35,069
actually rotate all the servers out so

91
00:04:33,000 --> 00:04:37,740
that those use the new ami instead of

92
00:04:35,069 --> 00:04:39,630
the old one I can also run load tests

93
00:04:37,740 --> 00:04:44,360
from this so I'll run a little baby load

94
00:04:39,630 --> 00:04:44,360
test on this just like a two-minute one

95
00:04:44,900 --> 00:04:50,789
as part of this this load test won't run

96
00:04:48,810 --> 00:04:53,669
unless the software deploys correctly so

97
00:04:50,789 --> 00:04:57,690
and that's been an issue you know for me

98
00:04:53,669 --> 00:04:59,159
since about two o'clock this morning so

99
00:04:57,690 --> 00:05:02,039
the nice one of the nice things about

100
00:04:59,160 --> 00:05:06,870
code deploy is that it will roll back to

101
00:05:02,039 --> 00:05:10,050
the last known good deployment so you'll

102
00:05:06,870 --> 00:05:12,810
see in the code deploy console with all

103
00:05:10,050 --> 00:05:15,240
the deployments that there is a huge

104
00:05:12,810 --> 00:05:16,500
march of failed succeeded failed

105
00:05:15,240 --> 00:05:19,440
succeeded where the new things I've been

106
00:05:16,500 --> 00:05:21,570
trying get rolled back and then the old

107
00:05:19,440 --> 00:05:23,759
the older version that was good

108
00:05:21,570 --> 00:05:25,020
gets put back in place this is one of

109
00:05:23,759 --> 00:05:28,680
the other nice things about code deploy

110
00:05:25,020 --> 00:05:31,099
is it lets you do this okay so I've got

111
00:05:28,680 --> 00:05:34,080
this in here and I'm gonna let er rip

112
00:05:31,099 --> 00:05:36,030
except of course if I'm I'm doing things

113
00:05:34,080 --> 00:05:37,380
that like would let me destroy my entire

114
00:05:36,030 --> 00:05:39,508
set of infrastructure I don't want to do

115
00:05:37,380 --> 00:05:41,039
that by accident so I've got a little

116
00:05:39,509 --> 00:05:44,880
CAPTCHA system in here that relies on

117
00:05:41,039 --> 00:05:46,770
modular arithmetic it's not RSA but it's

118
00:05:44,880 --> 00:05:50,550
very effective it like I don't just

119
00:05:46,770 --> 00:05:55,409
press the button by accident so 8 plus

120
00:05:50,550 --> 00:05:59,520
10 minus 5i I think that's their team

121
00:05:55,409 --> 00:06:03,210
all right okay I get it wrong it's gonna

122
00:05:59,520 --> 00:06:05,340
fail fast nothing's gonna happen which

123
00:06:03,210 --> 00:06:09,049
has happened in multiple of the demos

124
00:06:05,340 --> 00:06:13,289
that I've done you know with this stack

125
00:06:09,050 --> 00:06:15,630
okay so this is now happily running a

126
00:06:13,289 --> 00:06:18,780
bunch of software a lot of it is running

127
00:06:15,630 --> 00:06:20,340
as docker containers so this setup

128
00:06:18,780 --> 00:06:21,960
doesn't use docker to deploy the

129
00:06:20,340 --> 00:06:26,429
applications but it relies on docker

130
00:06:21,960 --> 00:06:29,880
very heavily in order to spin up Tara

131
00:06:26,430 --> 00:06:31,289
form itself the spin up ansible or to

132
00:06:29,880 --> 00:06:33,719
spin a packer rather which will then run

133
00:06:31,289 --> 00:06:36,870
ansible on an ec2 host in order to

134
00:06:33,719 --> 00:06:38,310
provision it and I'm just going to go

135
00:06:36,870 --> 00:06:40,420
ahead and let this run right now it's

136
00:06:38,310 --> 00:06:41,920
doing some validations on this

137
00:06:40,420 --> 00:06:50,470
and it'll take a little while and we'll

138
00:06:41,920 --> 00:06:52,960
come back to this so why bother with dev

139
00:06:50,470 --> 00:06:56,110
sekai ops at all what you want to avoid

140
00:06:52,960 --> 00:06:58,150
is the swirling snowflake hell of all

141
00:06:56,110 --> 00:07:01,330
the servers that are maintained by hand

142
00:06:58,150 --> 00:07:04,900
that are patched by hand that nobody

143
00:07:01,330 --> 00:07:07,690
really knows how to know how to make

144
00:07:04,900 --> 00:07:09,669
them secure okay at best you'll be able

145
00:07:07,690 --> 00:07:11,469
to get a golden image and keep punching

146
00:07:09,670 --> 00:07:12,760
away at that and maybe you'll take your

147
00:07:11,470 --> 00:07:14,890
golden image and deploy that in your

148
00:07:12,760 --> 00:07:16,960
fleet and but you just don't you won't

149
00:07:14,890 --> 00:07:19,780
know how to get it up there or if you're

150
00:07:16,960 --> 00:07:22,320
really unlucky and I know that some of

151
00:07:19,780 --> 00:07:25,179
you given the sponsors here must work in

152
00:07:22,320 --> 00:07:27,240
defense or intelligence you'll have to

153
00:07:25,180 --> 00:07:29,440
deal with what used to be called

154
00:07:27,240 --> 00:07:31,900
information assurance and I guess now is

155
00:07:29,440 --> 00:07:33,610
risk management framework so I hear daya

156
00:07:31,900 --> 00:07:34,859
cap is dead which makes me very very

157
00:07:33,610 --> 00:07:37,920
happy

158
00:07:34,860 --> 00:07:41,640
because that that security framework

159
00:07:37,920 --> 00:07:46,540
relied a lot on checking the boxes and

160
00:07:41,640 --> 00:07:50,349
not not necessarily assessing the risk

161
00:07:46,540 --> 00:07:51,670
of realistic security threats there are

162
00:07:50,350 --> 00:07:52,540
some benefits to doing that you know you

163
00:07:51,670 --> 00:07:53,950
want to make sure that you have a

164
00:07:52,540 --> 00:07:57,880
checklist driven system in some in some

165
00:07:53,950 --> 00:07:59,409
cases now the new way is to write

166
00:07:57,880 --> 00:08:03,760
infrastructure as code treat your

167
00:07:59,410 --> 00:08:05,650
servers as not as pets but but cattle

168
00:08:03,760 --> 00:08:08,320
you know you might nurse the pet back to

169
00:08:05,650 --> 00:08:10,419
health but if the you know if the you

170
00:08:08,320 --> 00:08:12,940
know if one cow and the in the herd is

171
00:08:10,420 --> 00:08:16,690
sick it gets called and you hop a new

172
00:08:12,940 --> 00:08:18,580
one in its place or you know since since

173
00:08:16,690 --> 00:08:20,530
I'm a vegan I really prefer the house

174
00:08:18,580 --> 00:08:26,800
plants versus crops and allergy but it's

175
00:08:20,530 --> 00:08:29,109
never gonna catch on so the thing with

176
00:08:26,800 --> 00:08:31,570
dev sock ops is you use the same tools

177
00:08:29,110 --> 00:08:33,640
that you use to build out the

178
00:08:31,570 --> 00:08:36,460
infrastructure in order to ensure that

179
00:08:33,640 --> 00:08:39,400
you have a secure environment okay

180
00:08:36,460 --> 00:08:45,130
that's that's really the it's that

181
00:08:39,400 --> 00:08:47,319
simple so well how do you make the

182
00:08:45,130 --> 00:08:51,189
system secure no there is no one answer

183
00:08:47,320 --> 00:08:52,720
but a great answer that people will keep

184
00:08:51,190 --> 00:08:53,769
coming back to is defense-in-depth

185
00:08:52,720 --> 00:08:55,059
you

186
00:08:53,769 --> 00:08:57,129
have firewalls you want to have

187
00:08:55,059 --> 00:08:58,689
intrusion detection systems maybe you

188
00:08:57,129 --> 00:09:01,660
definitely want to make sure you know

189
00:08:58,689 --> 00:09:08,019
what ports your your system is listening

190
00:09:01,660 --> 00:09:11,379
on so the code here has two different

191
00:09:08,019 --> 00:09:15,189
checks on this it does a check when you

192
00:09:11,379 --> 00:09:18,519
first build your your baseline image and

193
00:09:15,189 --> 00:09:20,199
in the architecture here you build kind

194
00:09:18,519 --> 00:09:21,910
of a baseline image that maybe would be

195
00:09:20,199 --> 00:09:24,368
useful for deploying one or more

196
00:09:21,910 --> 00:09:26,439
applications it's not the like tightest

197
00:09:24,369 --> 00:09:29,110
most focused way of doing this but it's

198
00:09:26,439 --> 00:09:31,118
very practical if you have an enterprise

199
00:09:29,110 --> 00:09:32,730
that needs to trust that golden image

200
00:09:31,119 --> 00:09:34,679
and make sure that it's gone through the

201
00:09:32,730 --> 00:09:36,639
security checkpoints it has to have

202
00:09:34,679 --> 00:09:38,619
before it makes it to production and

203
00:09:36,639 --> 00:09:40,480
then maybe you put a PHP application on

204
00:09:38,619 --> 00:09:42,069
it or a go application or an ojs

205
00:09:40,480 --> 00:09:43,209
application on it or a java application

206
00:09:42,069 --> 00:09:45,128
whatever it doesn't really matter what

207
00:09:43,209 --> 00:09:47,410
goes on it after that but you this lets

208
00:09:45,129 --> 00:09:50,410
you focus you know your your efforts on

209
00:09:47,410 --> 00:09:53,049
that one image okay otherwise you have

210
00:09:50,410 --> 00:09:54,879
to do and images for you know for n

211
00:09:53,049 --> 00:09:59,999
runtimes and that's that can be really

212
00:09:54,879 --> 00:10:02,799
painful the you know I've presented on

213
00:09:59,999 --> 00:10:05,439
variants of topics from this repository

214
00:10:02,799 --> 00:10:09,399
before and the innovation here in this

215
00:10:05,439 --> 00:10:11,679
one is this also attempts to check

216
00:10:09,399 --> 00:10:13,629
things when it deploys they will find

217
00:10:11,679 --> 00:10:15,850
out if it actually work when we come

218
00:10:13,629 --> 00:10:17,139
back and if it didn't well we can dig

219
00:10:15,850 --> 00:10:19,449
into a little bit and find out why it

220
00:10:17,139 --> 00:10:23,129
didn't work that this is an incremental

221
00:10:19,449 --> 00:10:26,079
iterative process so and with the

222
00:10:23,129 --> 00:10:28,119
safeguards that are in place you can

223
00:10:26,079 --> 00:10:29,888
continue to hack at it until you get

224
00:10:28,119 --> 00:10:31,269
things to work all the way through and

225
00:10:29,889 --> 00:10:34,449
then you can try to call them up the

226
00:10:31,269 --> 00:10:36,189
next ladder so what's not in here is

227
00:10:34,449 --> 00:10:37,479
checking on schedule or checking on

228
00:10:36,189 --> 00:10:39,248
demand there are other products that

229
00:10:37,480 --> 00:10:43,660
deal with that but it does not in scope

230
00:10:39,249 --> 00:10:45,660
for this so about me I've been doing

231
00:10:43,660 --> 00:10:49,118
stuff on the internet for a long time

232
00:10:45,660 --> 00:10:50,829
I've had my nonprofit the obscure

233
00:10:49,119 --> 00:10:53,559
organization on the internet

234
00:10:50,829 --> 00:10:55,628
continuously since March 1995 I had a

235
00:10:53,559 --> 00:10:57,610
twenty eight eight full time slip

236
00:10:55,629 --> 00:11:00,730
account when I started out and now it's

237
00:10:57,610 --> 00:11:06,089
you know Verizon FiOS with you know tens

238
00:11:00,730 --> 00:11:06,089
of tens of megabits a second bandwidth

239
00:11:06,800 --> 00:11:10,939
you know and I I personally sort of

240
00:11:09,260 --> 00:11:14,000
shuttled between technology and business

241
00:11:10,940 --> 00:11:17,720
I've run small consulting companies I've

242
00:11:14,000 --> 00:11:20,060
a versatile list I do I know a lot about

243
00:11:17,720 --> 00:11:21,770
a little about a lot of things but when

244
00:11:20,060 --> 00:11:25,279
it's necessary I can dive all the way

245
00:11:21,770 --> 00:11:27,620
down to the bottom of the stack to to

246
00:11:25,279 --> 00:11:29,330
solve a really thorny problem and in the

247
00:11:27,620 --> 00:11:32,360
last decade a lot of these thorny

248
00:11:29,330 --> 00:11:35,080
problems have been in cloud deployments

249
00:11:32,360 --> 00:11:38,330
and scaling performance improvement so

250
00:11:35,080 --> 00:11:40,610
you know in the last last five years

251
00:11:38,330 --> 00:11:43,490
I've done a lot of work with AWS and

252
00:11:40,610 --> 00:11:46,580
infrastructure as code I did a lot of

253
00:11:43,490 --> 00:11:51,110
work about performance improvement you

254
00:11:46,580 --> 00:11:52,580
know where I got to I got to improve the

255
00:11:51,110 --> 00:11:53,660
forms of these systems and then like

256
00:11:52,580 --> 00:11:55,910
performance and security are very

257
00:11:53,660 --> 00:11:57,709
closely related now you use the same

258
00:11:55,910 --> 00:11:59,089
kind of toolkit in some cases to hit

259
00:11:57,709 --> 00:12:03,410
performance as you do security you

260
00:11:59,089 --> 00:12:05,410
measure it's not quantifiable then your

261
00:12:03,410 --> 00:12:07,279
grasp on it may be weaker than you think

262
00:12:05,410 --> 00:12:10,250
and you also have to worry about

263
00:12:07,279 --> 00:12:13,070
validity you can do as many load tests

264
00:12:10,250 --> 00:12:15,410
as you that test your your site under a

265
00:12:13,070 --> 00:12:17,029
10 user load but if a thousand people

266
00:12:15,410 --> 00:12:18,319
come and hit your site on the busiest

267
00:12:17,029 --> 00:12:20,649
day of the year you're gonna be in big

268
00:12:18,320 --> 00:12:20,649
trouble

269
00:12:21,320 --> 00:12:28,040
in 2017 the scale of the challenges that

270
00:12:24,560 --> 00:12:31,399
I got to tackle got much larger and I

271
00:12:28,040 --> 00:12:33,589
helped a large education company migrate

272
00:12:31,399 --> 00:12:35,630
their 14 mission-critical applications

273
00:12:33,589 --> 00:12:37,339
from a data center environment where

274
00:12:35,630 --> 00:12:40,520
things were managed to pop it over to

275
00:12:37,339 --> 00:12:42,170
AWS and use the stock that was similar

276
00:12:40,520 --> 00:12:44,329
to the one you see here

277
00:12:42,170 --> 00:12:47,390
now more sophisticated in many ways but

278
00:12:44,329 --> 00:12:49,219
but it's very similar in the concept now

279
00:12:47,390 --> 00:12:52,790
it has Jenkins it has code deploy it as

280
00:12:49,220 --> 00:12:55,700
terraform has task runners you know so

281
00:12:52,790 --> 00:13:01,099
this this kind of thing is a very

282
00:12:55,700 --> 00:13:03,709
reasonable way to to migrate some legacy

283
00:13:01,100 --> 00:13:06,320
applications now with that app with that

284
00:13:03,709 --> 00:13:08,390
endeavor mandate was don't make security

285
00:13:06,320 --> 00:13:10,100
worse okay we already have enough

286
00:13:08,390 --> 00:13:11,750
problems don't make it worse for us so

287
00:13:10,100 --> 00:13:14,440
like okay we'll take this a cops

288
00:13:11,750 --> 00:13:18,650
approach we'll make sure that we have

289
00:13:14,440 --> 00:13:20,720
CIS baseline remediations to our golden

290
00:13:18,650 --> 00:13:23,089
image we'll work with the security team

291
00:13:20,720 --> 00:13:25,279
get that scanned I have another talk

292
00:13:23,089 --> 00:13:26,959
that's also linked to in this that goes

293
00:13:25,279 --> 00:13:30,050
into that in a lot more detail if you're

294
00:13:26,959 --> 00:13:31,939
interested in that and there's a brand

295
00:13:30,050 --> 00:13:33,680
new thing I learned just this morning

296
00:13:31,939 --> 00:13:35,899
that it's kind of an impediment to doing

297
00:13:33,680 --> 00:13:37,849
the same kind of work that I did like

298
00:13:35,899 --> 00:13:44,300
over a year ago which is unfortunate

299
00:13:37,850 --> 00:13:46,250
I'll get to that you know and in the the

300
00:13:44,300 --> 00:13:48,199
year since you know I've done more work

301
00:13:46,250 --> 00:13:51,110
along these lines and built out this

302
00:13:48,199 --> 00:13:52,519
demo which is MIT license you can use it

303
00:13:51,110 --> 00:13:54,949
and adapt it for whatever purpose as

304
00:13:52,519 --> 00:14:00,949
long as you give credit you know and

305
00:13:54,949 --> 00:14:02,719
retain the copyright notice so the

306
00:14:00,949 --> 00:14:04,540
education client that I dealt with I

307
00:14:02,720 --> 00:14:07,610
learned that they they actually called

308
00:14:04,540 --> 00:14:09,829
the the combination of terraforming code

309
00:14:07,610 --> 00:14:12,199
deploy Richards stack which really

310
00:14:09,829 --> 00:14:14,930
bugged me you know so I tried to find a

311
00:14:12,199 --> 00:14:17,389
better name for it the only a gram of

312
00:14:14,930 --> 00:14:18,888
Terra form and code deploy in the

313
00:14:17,389 --> 00:14:22,250
English language is corporately deform

314
00:14:18,889 --> 00:14:24,319
okay this stack is an ugly baby it's got

315
00:14:22,250 --> 00:14:26,600
a horn sticking out of one eye but it

316
00:14:24,319 --> 00:14:29,180
has muscles where it counts and if you

317
00:14:26,600 --> 00:14:31,430
need to scale to massive size you know

318
00:14:29,180 --> 00:14:33,920
and have tens of thousands of

319
00:14:31,430 --> 00:14:37,989
simultaneous users you can use stuff

320
00:14:33,920 --> 00:14:41,949
that's in this toolkit to get there so

321
00:14:37,990 --> 00:14:47,269
you know this large education company

322
00:14:41,949 --> 00:14:51,079
ended up with no over 100 running ec2

323
00:14:47,269 --> 00:14:53,870
machines at the at the peak and you know

324
00:14:51,079 --> 00:14:58,219
you can see just a little bit here like

325
00:14:53,870 --> 00:15:00,009
a terraform so terraform has whenever

326
00:14:58,220 --> 00:15:03,769
you make change to your terraform stuff

327
00:15:00,009 --> 00:15:07,370
it presents you with a plan to execute

328
00:15:03,769 --> 00:15:09,860
those changes and in this case we were

329
00:15:07,370 --> 00:15:11,839
making huge numbers of changes quite a

330
00:15:09,860 --> 00:15:13,430
bit it's like oh we were ready with the

331
00:15:11,839 --> 00:15:14,779
first six applications okay we have the

332
00:15:13,430 --> 00:15:15,109
next three out in two weeks what do we

333
00:15:14,779 --> 00:15:18,170
do

334
00:15:15,110 --> 00:15:20,149
I have new databases they have new new

335
00:15:18,170 --> 00:15:21,829
requirements for caches all kinds of

336
00:15:20,149 --> 00:15:25,910
weird wacky stuff so we would do things

337
00:15:21,829 --> 00:15:27,859
and we would end up with with dozens or

338
00:15:25,910 --> 00:15:29,360
hundreds of changes with terraform and

339
00:15:27,860 --> 00:15:30,889
we were able to do this with successive

340
00:15:29,360 --> 00:15:32,660
environments now having a dev

341
00:15:30,889 --> 00:15:34,339
environment having a staging environment

342
00:15:32,660 --> 00:15:34,529
having a production environment and if

343
00:15:34,339 --> 00:15:36,839
you

344
00:15:34,529 --> 00:15:37,920
make sure that you use kind of the same

345
00:15:36,839 --> 00:15:40,019
kind of discipline you'd use when

346
00:15:37,920 --> 00:15:42,870
pulling an application to the east then

347
00:15:40,019 --> 00:15:44,699
you can have the same discipline about

348
00:15:42,870 --> 00:15:47,329
your infrastructure as code and the same

349
00:15:44,699 --> 00:15:52,609
discipline about your security controls

350
00:15:47,329 --> 00:15:54,748
so this was really large you know like

351
00:15:52,610 --> 00:15:56,759
the at least this is the probably the

352
00:15:54,749 --> 00:15:59,519
largest system that I've worked on in my

353
00:15:56,759 --> 00:16:01,199
career so far and you know some of you

354
00:15:59,519 --> 00:16:03,089
are like that's not large hi bill if

355
00:16:01,199 --> 00:16:07,199
exabytes data all the time but for me

356
00:16:03,089 --> 00:16:09,360
this was a big deal and the peak load on

357
00:16:07,199 --> 00:16:10,680
this like for this the system that I

358
00:16:09,360 --> 00:16:13,649
dealt with it at the highest peak load

359
00:16:10,680 --> 00:16:16,319
had to have 2,000 simultaneous users and

360
00:16:13,649 --> 00:16:20,009
I spent two years getting it to that

361
00:16:16,319 --> 00:16:22,019
point very painfully like inch-by-inch

362
00:16:20,009 --> 00:16:23,519
and with this one it's like you know

363
00:16:22,019 --> 00:16:25,860
they already had tens of thousands of

364
00:16:23,519 --> 00:16:27,629
simultaneous users at peak and it had to

365
00:16:25,860 --> 00:16:28,740
perform when it was migrated off of

366
00:16:27,629 --> 00:16:31,829
their old infrastructure into the new

367
00:16:28,740 --> 00:16:33,449
one at the same level or better because

368
00:16:31,829 --> 00:16:36,899
you know like the whole company's

369
00:16:33,449 --> 00:16:40,349
futures on the line given past mistakes

370
00:16:36,899 --> 00:16:42,029
and this helped get it done on New Relic

371
00:16:40,350 --> 00:16:43,889
to monitor the whole thing which was

372
00:16:42,029 --> 00:16:45,420
very important to be able to get it

373
00:16:43,889 --> 00:16:47,699
right there's probably other tools that

374
00:16:45,420 --> 00:16:49,709
could do it as well but this is the one

375
00:16:47,699 --> 00:16:52,019
that I've seen bring the best results

376
00:16:49,709 --> 00:16:55,859
when you know you have something at a

377
00:16:52,019 --> 00:16:57,569
scale that's on the line like what about

378
00:16:55,860 --> 00:16:58,949
docker what about kubernetes what about

379
00:16:57,569 --> 00:17:00,719
dr. swarm what about all these other

380
00:16:58,949 --> 00:17:02,609
things that's great but you might not

381
00:17:00,720 --> 00:17:05,970
have a year to rewrite your applications

382
00:17:02,610 --> 00:17:07,620
and twelve factor awesome okay you know

383
00:17:05,970 --> 00:17:08,789
the benefits that that stuff brings is

384
00:17:07,619 --> 00:17:11,398
huge

385
00:17:08,789 --> 00:17:13,289
but you're gonna have a huge refactoring

386
00:17:11,398 --> 00:17:14,760
in order to do it it might cost you know

387
00:17:13,289 --> 00:17:17,760
if you have a dozen applications it

388
00:17:14,760 --> 00:17:21,270
might cost you three or thirty million

389
00:17:17,760 --> 00:17:23,429
dollars to redo all of that stuff in a

390
00:17:21,270 --> 00:17:27,209
containerized micro-services twelve

391
00:17:23,429 --> 00:17:29,490
factor off world and then you'll have a

392
00:17:27,209 --> 00:17:31,470
30% decreasing your operational costs

393
00:17:29,490 --> 00:17:32,580
well you know like that's nothing

394
00:17:31,470 --> 00:17:35,580
compared with the development time

395
00:17:32,580 --> 00:17:37,080
sometimes so and it's really hard to

396
00:17:35,580 --> 00:17:38,639
stuff legacy apps into containers if

397
00:17:37,080 --> 00:17:41,158
you're if you need a writable store

398
00:17:38,640 --> 00:17:43,740
somewhere or you need something really

399
00:17:41,159 --> 00:17:45,480
weird in the setup like it's just not

400
00:17:43,740 --> 00:17:47,340
gonna happen no you're gonna have to

401
00:17:45,480 --> 00:17:51,150
find another way

402
00:17:47,340 --> 00:17:54,679
this this way works pretty well this

403
00:17:51,150 --> 00:18:00,150
repo supports local development it has

404
00:17:54,680 --> 00:18:03,180
vagrant and a ansible set up that allow

405
00:18:00,150 --> 00:18:06,440
you to kind of massage your golden image

406
00:18:03,180 --> 00:18:10,190
using ansible scripts you know before

407
00:18:06,440 --> 00:18:12,750
running it on AWS through packer and

408
00:18:10,190 --> 00:18:16,500
then you know once you've debug your

409
00:18:12,750 --> 00:18:21,330
scripts a bit you can use your local dev

410
00:18:16,500 --> 00:18:26,300
to initiate a Packer run run Packer

411
00:18:21,330 --> 00:18:29,610
through docker and have it create a

412
00:18:26,300 --> 00:18:31,620
template image on ec2 a fresh ami from a

413
00:18:29,610 --> 00:18:33,689
vendor image and then apply all the

414
00:18:31,620 --> 00:18:35,939
changes on it so this particular stack

415
00:18:33,690 --> 00:18:40,230
is like a fairly simple nginx Python

416
00:18:35,940 --> 00:18:41,910
stack with a little sidecar of Ruby to

417
00:18:40,230 --> 00:18:46,710
help with some of the automated testing

418
00:18:41,910 --> 00:18:48,840
stuff so I showed you a little bit about

419
00:18:46,710 --> 00:18:50,610
this but but really it's not good enough

420
00:18:48,840 --> 00:18:52,320
to just do this on your local system if

421
00:18:50,610 --> 00:18:53,669
it's just you then maybe you can get

422
00:18:52,320 --> 00:18:56,280
away with it but if you're working with

423
00:18:53,670 --> 00:18:58,470
the team of size two or more you really

424
00:18:56,280 --> 00:19:01,860
want everyone to be able to see every

425
00:18:58,470 --> 00:19:03,780
run of the tariff one does especially in

426
00:19:01,860 --> 00:19:12,629
your pradhan firemen especially when you

427
00:19:03,780 --> 00:19:16,649
apply the changes okay the the way that

428
00:19:12,630 --> 00:19:19,560
that this works for getting the

429
00:19:16,650 --> 00:19:22,320
applications to scale involves AWS

430
00:19:19,560 --> 00:19:26,760
elastic load balancing and auto scaling

431
00:19:22,320 --> 00:19:29,040
group so the modern apps should probably

432
00:19:26,760 --> 00:19:30,930
use the application load balancing and I

433
00:19:29,040 --> 00:19:33,180
think I had some of that in my notes in

434
00:19:30,930 --> 00:19:36,090
the abstract but this one uses the

435
00:19:33,180 --> 00:19:38,040
old-school elastic load balancer which

436
00:19:36,090 --> 00:19:40,830
has a few advantages and a lot of

437
00:19:38,040 --> 00:19:46,170
disadvantages compared with the ALB but

438
00:19:40,830 --> 00:19:48,750
it works now in all of the code deploy

439
00:19:46,170 --> 00:19:50,790
bits like they get assembled in Jenkins

440
00:19:48,750 --> 00:19:52,740
no there's just a script that creates a

441
00:19:50,790 --> 00:19:54,690
zip file and it has a manifest and the

442
00:19:52,740 --> 00:19:59,370
manifest says where the where the code

443
00:19:54,690 --> 00:20:00,930
goes and it and it shows it shows it has

444
00:19:59,370 --> 00:20:02,820
scripts that have hooks like

445
00:20:00,930 --> 00:20:05,040
Oh before the application starts run

446
00:20:02,820 --> 00:20:06,659
this script after the application has

447
00:20:05,040 --> 00:20:08,690
started run this validation script and

448
00:20:06,660 --> 00:20:10,650
with with that with that kind of

449
00:20:08,690 --> 00:20:13,140
structured approach to deploying

450
00:20:10,650 --> 00:20:14,610
applications you know you can take very

451
00:20:13,140 --> 00:20:16,080
different applications and write scripts

452
00:20:14,610 --> 00:20:18,060
that will work for all of them under

453
00:20:16,080 --> 00:20:20,399
under Linux or under windows and I've

454
00:20:18,060 --> 00:20:27,570
used it in both environments it's easier

455
00:20:20,400 --> 00:20:30,000
under Linux by a factor of about 4 you

456
00:20:27,570 --> 00:20:32,310
really want to use Packer know or some

457
00:20:30,000 --> 00:20:34,770
equivalent tool to create those machine

458
00:20:32,310 --> 00:20:36,659
images this is the bakery pattern now

459
00:20:34,770 --> 00:20:39,270
there's some companies like Netflix that

460
00:20:36,660 --> 00:20:42,810
take the bakery pattern to a further

461
00:20:39,270 --> 00:20:45,720
extreme so they might bake their entire

462
00:20:42,810 --> 00:20:48,000
application and all of its code for

463
00:20:45,720 --> 00:20:49,140
every release into a separate machine am

464
00:20:48,000 --> 00:20:50,700
i okay

465
00:20:49,140 --> 00:20:53,760
at least they used to I've read some

466
00:20:50,700 --> 00:20:57,600
articles about this and that's that's a

467
00:20:53,760 --> 00:20:58,950
nice way to do it but it's it's also

468
00:20:57,600 --> 00:21:00,750
inconvenient because you're going to

469
00:20:58,950 --> 00:21:01,950
have dozens or hundreds of a.m. eyes

470
00:21:00,750 --> 00:21:03,480
floating around you're gonna have to

471
00:21:01,950 --> 00:21:05,940
deal with a lifecycle of those they all

472
00:21:03,480 --> 00:21:07,170
take up storage you know the you're

473
00:21:05,940 --> 00:21:09,420
gonna have to audit which ones are

474
00:21:07,170 --> 00:21:11,520
running in production if you had one

475
00:21:09,420 --> 00:21:16,140
golden ami it's really easy to see like

476
00:21:11,520 --> 00:21:19,710
oh I have 40 instances running in ec2

477
00:21:16,140 --> 00:21:21,390
and 38 of them are the the new one why

478
00:21:19,710 --> 00:21:22,590
are those old ones hanging around I

479
00:21:21,390 --> 00:21:26,090
don't care I'm just gonna kill them off

480
00:21:22,590 --> 00:21:26,090
and let get replaced by the new ones

481
00:21:26,840 --> 00:21:31,260
during the bakery process run security

482
00:21:29,460 --> 00:21:36,060
scans this is where the dev SEC Ops

483
00:21:31,260 --> 00:21:38,460
comes in and at least part of it so the

484
00:21:36,060 --> 00:21:42,350
this repository has two types of scans

485
00:21:38,460 --> 00:21:44,550
built into it open s cap and gauntlet so

486
00:21:42,350 --> 00:21:48,209
open s cap is one of these security

487
00:21:44,550 --> 00:21:52,020
tools that's come out of the kind of Red

488
00:21:48,210 --> 00:21:54,480
Hat world and the world of kind of big

489
00:21:52,020 --> 00:21:56,670
checklist driven security so this will

490
00:21:54,480 --> 00:21:59,100
this will spit out a beautiful checklist

491
00:21:56,670 --> 00:22:05,970
report for you if you if you use it

492
00:21:59,100 --> 00:22:09,629
correctly and gauntlet is like a Swiss

493
00:22:05,970 --> 00:22:10,980
Army knife is anyone used cucumber No

494
00:22:09,630 --> 00:22:14,340
maybe with selenium to do automated

495
00:22:10,980 --> 00:22:16,139
testing for web applications

496
00:22:14,340 --> 00:22:17,939
it's one of these domain-specific

497
00:22:16,139 --> 00:22:23,580
languages that makes it easy to

498
00:22:17,940 --> 00:22:35,580
understand kind of what a what the steps

499
00:22:23,580 --> 00:22:39,678
in a test are so so you know so getting

500
00:22:35,580 --> 00:22:42,749
a lot of blank stares on that one the

501
00:22:39,679 --> 00:22:45,210
the nice thing here is you write some

502
00:22:42,749 --> 00:22:48,929
simple features with scenarios given and

503
00:22:45,210 --> 00:22:52,440
when you know this is the result and and

504
00:22:48,929 --> 00:22:54,779
when when you're done you know the test

505
00:22:52,440 --> 00:22:57,059
runner goes and runs steps that

506
00:22:54,779 --> 00:23:00,299
correspond to each of those things and

507
00:22:57,059 --> 00:23:05,999
the test is green when it's done and you

508
00:23:00,299 --> 00:23:08,879
know that it's worked well okay so I

509
00:23:05,999 --> 00:23:11,039
have a couple cucumber reports here for

510
00:23:08,879 --> 00:23:12,539
the interim failures that I encountered

511
00:23:11,039 --> 00:23:14,999
this morning while trying to publish my

512
00:23:12,539 --> 00:23:18,509
talk okay so this these are from

513
00:23:14,999 --> 00:23:20,639
gauntlet so you know I started out over

514
00:23:18,509 --> 00:23:23,159
here I'm like oh what is going on with

515
00:23:20,639 --> 00:23:24,599
my with my stupid testing tool this was

516
00:23:23,159 --> 00:23:26,099
working great before and now it doesn't

517
00:23:24,599 --> 00:23:28,080
work at all oh wait I didn't try to run

518
00:23:26,099 --> 00:23:29,129
it like this I'm trying to run it a new

519
00:23:28,080 --> 00:23:32,189
way so I have to make sure the

520
00:23:29,129 --> 00:23:33,509
environments good in this case it

521
00:23:32,190 --> 00:23:35,940
couldn't write to some temp directories

522
00:23:33,509 --> 00:23:38,639
so I did just a bunch of C shown and

523
00:23:35,940 --> 00:23:41,129
chmod stuff on that and got it to the

524
00:23:38,639 --> 00:23:43,830
point where you know the only thing left

525
00:23:41,129 --> 00:23:46,769
was like it can't find in the XML file

526
00:23:43,830 --> 00:23:48,658
okay so the last commit I did it's

527
00:23:46,769 --> 00:23:50,849
intending to fix this up so I hopefully

528
00:23:48,659 --> 00:23:57,179
this one will run clean we'll find out

529
00:23:50,849 --> 00:23:58,499
soon enough you know like but you can

530
00:23:57,179 --> 00:24:01,859
see that there's plain English in these

531
00:23:58,499 --> 00:24:04,379
scenarios okay like well I do this the

532
00:24:01,859 --> 00:24:06,478
output should match blah and all the

533
00:24:04,379 --> 00:24:08,699
gauntlet stuff is built like this so you

534
00:24:06,479 --> 00:24:11,190
know the people have built like attack

535
00:24:08,700 --> 00:24:13,710
components for many different tools I

536
00:24:11,190 --> 00:24:16,769
just have n map and a like a file

537
00:24:13,710 --> 00:24:18,389
verification tool here but there's all

538
00:24:16,769 --> 00:24:22,009
kinds of great stuff that you can dig

539
00:24:18,389 --> 00:24:28,500
into for that the the open s gap stuff

540
00:24:22,009 --> 00:24:33,180
has has another set of report

541
00:24:28,500 --> 00:24:36,000
so I have a good Packer build here which

542
00:24:33,180 --> 00:24:38,130
will show one of the open Escott bits

543
00:24:36,000 --> 00:24:39,930
like is this gonna show up as raw HTML

544
00:24:38,130 --> 00:24:42,000
or is it going to show up nicely if I

545
00:24:39,930 --> 00:24:44,730
click click on it I guess we'll find out

546
00:24:42,000 --> 00:24:48,480
oh sure it up nicely

547
00:24:44,730 --> 00:24:51,270
okay so secure configuration of Red Hat

548
00:24:48,480 --> 00:24:54,240
you know 1 X 7 this is this is a report

549
00:24:51,270 --> 00:24:56,370
that that a manager or a security

550
00:24:54,240 --> 00:24:59,490
officer would probably love especially

551
00:24:56,370 --> 00:25:02,879
if it had more than 9 items on it okay

552
00:24:59,490 --> 00:25:06,300
one of the real bummers and that i found

553
00:25:02,880 --> 00:25:08,070
is that the the definitions for the

554
00:25:06,300 --> 00:25:10,530
security scan I had been using or no

555
00:25:08,070 --> 00:25:15,149
longer ship with CentOS this is like a

556
00:25:10,530 --> 00:25:17,220
much much weaker set of stuff and if you

557
00:25:15,150 --> 00:25:19,470
want the full-blown security test

558
00:25:17,220 --> 00:25:21,270
definitions you really need to be a

559
00:25:19,470 --> 00:25:23,700
center for internet security member and

560
00:25:21,270 --> 00:25:25,320
that is kind of expensive on an

561
00:25:23,700 --> 00:25:26,430
individual project basis you like

562
00:25:25,320 --> 00:25:28,050
they'll give you a license to do it on

563
00:25:26,430 --> 00:25:30,450
one project for about a thousand dollars

564
00:25:28,050 --> 00:25:32,490
but if you're an organization it's like

565
00:25:30,450 --> 00:25:34,200
membership on a sliding scale so if your

566
00:25:32,490 --> 00:25:36,570
giant defense contractor you're gonna

567
00:25:34,200 --> 00:25:38,820
pay them I don't know how much hundreds

568
00:25:36,570 --> 00:25:40,590
of thousands of dollars a year and if

569
00:25:38,820 --> 00:25:41,669
you're you know a mid-sized contracting

570
00:25:40,590 --> 00:25:45,500
company you're gonna have to fight for

571
00:25:41,670 --> 00:25:45,500
that budget it's gonna be pretty dear

572
00:25:49,880 --> 00:25:54,300
when you use these scans you want to

573
00:25:52,440 --> 00:25:56,220
make sure you understand kind of where

574
00:25:54,300 --> 00:25:58,230
your scan results are before you deploy

575
00:25:56,220 --> 00:26:01,400
like no like what risks you're taking

576
00:25:58,230 --> 00:26:03,660
that your scanning tools come up with

577
00:26:01,400 --> 00:26:08,520
yeah it's just you don't want to go in

578
00:26:03,660 --> 00:26:10,140
blind with it so gauntlet you know I

579
00:26:08,520 --> 00:26:12,180
showed a little bit of that now it's a

580
00:26:10,140 --> 00:26:15,240
ruby framework tool so you have to have

581
00:26:12,180 --> 00:26:18,120
Ruby in your test environment somewhere

582
00:26:15,240 --> 00:26:20,970
I chose to put it like on the host

583
00:26:18,120 --> 00:26:23,250
that's being tested which you know is

584
00:26:20,970 --> 00:26:26,550
being in but has drawbacks to maybe you

585
00:26:23,250 --> 00:26:27,720
don't want to do that but the

586
00:26:26,550 --> 00:26:31,919
extensibility of that is really

587
00:26:27,720 --> 00:26:33,870
wonderful the big bummer again is like

588
00:26:31,920 --> 00:26:36,180
the the c2s profile doesn't ship with

589
00:26:33,870 --> 00:26:38,159
Santa c2s was derived from an earlier

590
00:26:36,180 --> 00:26:40,980
Center internet security baseline it was

591
00:26:38,160 --> 00:26:42,029
a US government security profile but

592
00:26:40,980 --> 00:26:44,309
it's no longer there

593
00:26:42,029 --> 00:26:46,169
like weird my profile goes I had it I

594
00:26:44,309 --> 00:26:47,549
had like 60 different controls that were

595
00:26:46,169 --> 00:26:49,889
imposed with this and now all I got are

596
00:26:47,549 --> 00:26:53,999
these seven lousy controls so that was

597
00:26:49,889 --> 00:26:55,109
disappointing you can see more known all

598
00:26:53,999 --> 00:26:57,119
this stuff is linked into the main

599
00:26:55,109 --> 00:26:59,999
talked to so you can see all the links

600
00:26:57,119 --> 00:27:02,369
for the different the different talks in

601
00:26:59,999 --> 00:27:06,690
there and their slide shares you know in

602
00:27:02,369 --> 00:27:09,269
in the link to the the repo ok bakery

603
00:27:06,690 --> 00:27:12,479
scans gauntlet and open s cap so I

604
00:27:09,269 --> 00:27:13,950
showed a little bit of this about kind

605
00:27:12,479 --> 00:27:17,070
of how they were showing up but I'm

606
00:27:13,950 --> 00:27:22,460
gonna show also show kind of how that

607
00:27:17,070 --> 00:27:26,729
how they're hooked in and where so the

608
00:27:22,460 --> 00:27:29,429
you can see here that this Jenkins

609
00:27:26,729 --> 00:27:34,139
output is from a Packer run that worked

610
00:27:29,429 --> 00:27:37,289
hi I'm like yay no this is in UTC is all

611
00:27:34,139 --> 00:27:39,539
good server times should be and it's

612
00:27:37,289 --> 00:27:45,839
embarrassingly recent but that's it is

613
00:27:39,539 --> 00:27:47,609
what it is so when you run Packer I'll

614
00:27:45,839 --> 00:27:50,428
make this a little bigger so you can

615
00:27:47,609 --> 00:27:53,668
sort of see it ok

616
00:27:50,429 --> 00:27:55,859
know it you know it

617
00:27:53,669 --> 00:27:57,719
like I have I have a bunch of scripts in

618
00:27:55,859 --> 00:27:59,789
here that do more than just run Packer

619
00:27:57,719 --> 00:28:01,229
you know I got I'll in tall the things

620
00:27:59,789 --> 00:28:02,249
I'll int the shell scripts with shell

621
00:28:01,229 --> 00:28:04,049
track ok

622
00:28:02,249 --> 00:28:06,570
so if you you so much as have some

623
00:28:04,049 --> 00:28:08,070
missing quotes and you're in your shell

624
00:28:06,570 --> 00:28:09,899
scripts this thing is gonna be like I'm

625
00:28:08,070 --> 00:28:13,049
not gonna run any of your garbage until

626
00:28:09,899 --> 00:28:15,029
you fix the problems in your scripts and

627
00:28:13,049 --> 00:28:16,918
you should look in every linter you can

628
00:28:15,029 --> 00:28:19,229
for every language that is used actively

629
00:28:16,919 --> 00:28:21,629
in your project here so that you cannot

630
00:28:19,229 --> 00:28:25,499
have the development team screw it up by

631
00:28:21,629 --> 00:28:26,789
like being super careless so they can

632
00:28:25,499 --> 00:28:34,979
still screw it up but they have to work

633
00:28:26,789 --> 00:28:36,089
it harder so hacker when it runs spits

634
00:28:34,979 --> 00:28:38,609
out a whole bunch of output

635
00:28:36,089 --> 00:28:40,589
hey I'm spinning up an Amazon box hey

636
00:28:38,609 --> 00:28:42,178
I'm you know setting up all the key

637
00:28:40,589 --> 00:28:45,479
rings hey I'm gonna transfer the stuff

638
00:28:42,179 --> 00:28:51,409
over and then it runs whatever script

639
00:28:45,479 --> 00:28:51,409
you give it so in in this system

640
00:28:54,620 --> 00:29:09,570
the this comes in through through Packer

641
00:29:04,970 --> 00:29:12,210
Packer has a JSON file it defines some

642
00:29:09,570 --> 00:29:14,939
variable wiring and then it just runs

643
00:29:12,210 --> 00:29:17,700
some shell scripts on your on your

644
00:29:14,940 --> 00:29:20,249
target machine that you're building the

645
00:29:17,700 --> 00:29:22,499
image so you know there's some scripts

646
00:29:20,249 --> 00:29:25,669
here that will install the tools and

647
00:29:22,499 --> 00:29:27,440
then run ansible to do to do the tests

648
00:29:25,669 --> 00:29:30,720
now

649
00:29:27,440 --> 00:29:33,539
Packer has support for ansible like is

650
00:29:30,720 --> 00:29:35,009
one of its provisioners but if you're

651
00:29:33,539 --> 00:29:35,580
gonna walk your system down it's not

652
00:29:35,009 --> 00:29:36,720
gonna work

653
00:29:35,580 --> 00:29:39,449
you have a non writable temp directory

654
00:29:36,720 --> 00:29:41,249
that provision is not gonna work okay

655
00:29:39,450 --> 00:29:44,279
so this has a lot of stuff to work

656
00:29:41,249 --> 00:29:47,549
around that because I when you have to

657
00:29:44,279 --> 00:29:48,899
lock it down tight you also want it your

658
00:29:47,549 --> 00:29:50,730
your scripts to work at an idempotent

659
00:29:48,899 --> 00:29:52,830
way you're like I'll lock it down once

660
00:29:50,730 --> 00:29:54,299
can I rerun the lockdown suite on it if

661
00:29:52,830 --> 00:29:55,918
the answer is no you're gonna have to

662
00:29:54,299 --> 00:29:58,610
rebuild it every time whenever you make

663
00:29:55,919 --> 00:30:01,590
change even locally you won't be able to

664
00:29:58,610 --> 00:30:03,559
do the nice thing where you have you

665
00:30:01,590 --> 00:30:06,418
know a terminal window that's open in

666
00:30:03,559 --> 00:30:08,158
your you know your nice little you know

667
00:30:06,419 --> 00:30:11,730
local vagrant environment here where you

668
00:30:08,159 --> 00:30:12,990
can run the same scripts it's really

669
00:30:11,730 --> 00:30:15,330
nice to be able to do that it's really

670
00:30:12,990 --> 00:30:18,570
nice to be able to do you know a vagrant

671
00:30:15,330 --> 00:30:22,559
provision and have it kick off the same

672
00:30:18,570 --> 00:30:25,309
ansible script you'd have running

673
00:30:22,559 --> 00:30:25,309
through Packer

674
00:30:25,530 --> 00:30:28,660
[Music]

675
00:30:32,740 --> 00:30:41,780
and in this very end here like it does a

676
00:30:39,440 --> 00:30:45,440
whole bunch of stuff at the very very

677
00:30:41,780 --> 00:30:46,760
end it ends up scanning a server with

678
00:30:45,440 --> 00:30:49,309
gauntlet okay

679
00:30:46,760 --> 00:30:51,680
this makes very heavy use of ansible as

680
00:30:49,309 --> 00:30:53,090
a task runner but you could use whatever

681
00:30:51,680 --> 00:30:54,940
you wanted you could use shell scripts

682
00:30:53,090 --> 00:30:57,350
you can use chef you could use puppet

683
00:30:54,940 --> 00:30:58,370
whatever whatever corporate standard

684
00:30:57,350 --> 00:31:02,360
you've got for that stuff you could

685
00:30:58,370 --> 00:31:05,510
build something like this and then at

686
00:31:02,360 --> 00:31:07,580
the end it copies the files out of the

687
00:31:05,510 --> 00:31:09,290
host that it's just templated and back

688
00:31:07,580 --> 00:31:11,419
over into the workspace that's been

689
00:31:09,290 --> 00:31:15,070
checked out to run things so that maybe

690
00:31:11,420 --> 00:31:18,830
your CI CI system could archive it so

691
00:31:15,070 --> 00:31:20,240
you know the CI system archiving it is

692
00:31:18,830 --> 00:31:22,730
also great to have and it's one of the

693
00:31:20,240 --> 00:31:24,679
huge benefits of running it running a

694
00:31:22,730 --> 00:31:26,510
stuff in CI because if you didn't if you

695
00:31:24,679 --> 00:31:27,440
didn't have the CI system archiving it

696
00:31:26,510 --> 00:31:29,240
you'd probably just throw these away

697
00:31:27,440 --> 00:31:30,950
every time you do this you can come back

698
00:31:29,240 --> 00:31:35,690
come and see oh this is this has worked

699
00:31:30,950 --> 00:31:40,429
did this one use that that lovely you

700
00:31:35,690 --> 00:31:43,250
know that lovely system for for doing

701
00:31:40,429 --> 00:31:46,370
the scans you know I could come back to

702
00:31:43,250 --> 00:31:50,090
one of my older ones and you know if I

703
00:31:46,370 --> 00:31:50,479
found one of these like this is probably

704
00:31:50,090 --> 00:31:53,750
it

705
00:31:50,480 --> 00:31:57,800
yeah the base line so you know from my

706
00:31:53,750 --> 00:32:00,920
previous thing you know the the C 2's

707
00:31:57,800 --> 00:32:02,510
profile you know this has look at this

708
00:32:00,920 --> 00:32:06,350
this is great right it's like wow

709
00:32:02,510 --> 00:32:08,120
there's a lot of things in here yeah but

710
00:32:06,350 --> 00:32:10,459
this doesn't ship with it anymore so

711
00:32:08,120 --> 00:32:14,120
you're kind of stuck not having that now

712
00:32:10,460 --> 00:32:15,559
it sucks I don't know how to get it get

713
00:32:14,120 --> 00:32:17,239
it but if I've spent three hours of

714
00:32:15,559 --> 00:32:25,129
internet research I would probably find

715
00:32:17,240 --> 00:32:27,830
out moving on any any questions so far

716
00:32:25,130 --> 00:32:29,480
as audience has been very like quiet is

717
00:32:27,830 --> 00:32:34,370
it just that you're tired after lunch or

718
00:32:29,480 --> 00:32:35,480
am I really boring I don't know a lot of

719
00:32:34,370 --> 00:32:37,070
information there is a lot of

720
00:32:35,480 --> 00:32:39,880
information here this this like this is

721
00:32:37,070 --> 00:32:42,980
essentially like the quick version of

722
00:32:39,880 --> 00:32:43,879
the last like four years of heavy duty

723
00:32:42,980 --> 00:32:45,979
work

724
00:32:43,879 --> 00:32:51,408
that I've done for multiple clients you

725
00:32:45,979 --> 00:32:53,719
know hardening okay if you are going to

726
00:32:51,409 --> 00:32:55,309
harden your image you have to decide are

727
00:32:53,719 --> 00:32:57,469
you going to do that hardening before or

728
00:32:55,309 --> 00:32:58,819
after you install your software maybe

729
00:32:57,469 --> 00:33:00,679
you have to loosen things up a little

730
00:32:58,819 --> 00:33:02,509
bit to install your software maybe you'd

731
00:33:00,679 --> 00:33:05,239
have to do that at deployment time if

732
00:33:02,509 --> 00:33:06,649
you're running SELinux if you're running

733
00:33:05,239 --> 00:33:09,379
it at legacy app you might have to

734
00:33:06,649 --> 00:33:11,418
disable SELinux temporarily to get the

735
00:33:09,379 --> 00:33:14,928
darn thing installed hopefully you can

736
00:33:11,419 --> 00:33:18,919
turn it back on afterwards but if you're

737
00:33:14,929 --> 00:33:20,149
using this CIS hardening baseline like

738
00:33:18,919 --> 00:33:21,409
there's a bunch of ansible scripts in

739
00:33:20,149 --> 00:33:23,809
here there right now are turned off

740
00:33:21,409 --> 00:33:25,519
because they're in it interferes with

741
00:33:23,809 --> 00:33:27,829
code deploys correct operation I have a

742
00:33:25,519 --> 00:33:29,809
bug in my repo to fix that and I wasn't

743
00:33:27,829 --> 00:33:32,989
able to get to it before the this talk

744
00:33:29,809 --> 00:33:35,719
but we have had that working before my

745
00:33:32,989 --> 00:33:37,339
code deploy and the CIS baseline

746
00:33:35,719 --> 00:33:39,769
remediated images play nicely together

747
00:33:37,339 --> 00:33:41,269
but it was tricky it was very tricky

748
00:33:39,769 --> 00:33:43,489
because of things like oh there's no

749
00:33:41,269 --> 00:33:45,169
more writable or you can't have an

750
00:33:43,489 --> 00:33:48,229
executable file in your temp directory

751
00:33:45,169 --> 00:33:52,549
or there no it no sqv file is allowed on

752
00:33:48,229 --> 00:33:54,019
that in the home directories yeah so you

753
00:33:52,549 --> 00:33:56,599
know you run into some rocks and you

754
00:33:54,019 --> 00:33:58,309
need to do a lot of work and here's the

755
00:33:56,599 --> 00:33:59,718
big question do you want to fix all the

756
00:33:58,309 --> 00:34:01,279
upstream bugs in your vendor software

757
00:33:59,719 --> 00:34:03,589
that prevent them from installing

758
00:34:01,279 --> 00:34:04,969
correctly probably not is that a good

759
00:34:03,589 --> 00:34:11,629
waste is that a good use of your time

760
00:34:04,969 --> 00:34:13,668
probably not so and if you're going to

761
00:34:11,629 --> 00:34:15,859
run some of these scanners you also have

762
00:34:13,668 --> 00:34:18,828
to decide am I going to fail fast on

763
00:34:15,859 --> 00:34:20,659
every violation or is there a certain

764
00:34:18,829 --> 00:34:22,970
level of violations that's acceptable

765
00:34:20,659 --> 00:34:25,069
a lot of Jenkins plugins classically

766
00:34:22,969 --> 00:34:27,918
like the violations plug-in have a

767
00:34:25,069 --> 00:34:30,259
threshold they say you know if you have

768
00:34:27,918 --> 00:34:32,658
90 percent success on these tests it's

769
00:34:30,259 --> 00:34:35,029
good enough to pass if it gets worse

770
00:34:32,659 --> 00:34:36,950
then you're gonna fail so you might want

771
00:34:35,029 --> 00:34:41,210
to consider doing something along those

772
00:34:36,949 --> 00:34:42,678
lines in order to like start in a good

773
00:34:41,210 --> 00:34:49,879
place and then be able to push things

774
00:34:42,679 --> 00:34:51,769
out farther terraform terraform is super

775
00:34:49,879 --> 00:34:54,799
awesome how many people have worked with

776
00:34:51,768 --> 00:34:57,290
terraform now like this how many people

777
00:34:54,799 --> 00:35:00,830
work with say cloud formation

778
00:34:57,290 --> 00:35:03,350
now and the equivalent on say a juror or

779
00:35:00,830 --> 00:35:05,000
you know Alibaba or something else okay

780
00:35:03,350 --> 00:35:08,569
like all of these systems let you

781
00:35:05,000 --> 00:35:13,670
provision cloud infrastructure database

782
00:35:08,570 --> 00:35:16,370
servers you know load balancers all that

783
00:35:13,670 --> 00:35:19,030
stuff by writing code and it is the way

784
00:35:16,370 --> 00:35:21,319
to do it in 2019 you do not want to be

785
00:35:19,030 --> 00:35:24,230
spinning up stuff in the console except

786
00:35:21,320 --> 00:35:27,110
as proof of concept test while you're on

787
00:35:24,230 --> 00:35:30,590
your way to writing this stuff terraform

788
00:35:27,110 --> 00:35:32,600
is also great because it has plug-ins

789
00:35:30,590 --> 00:35:37,280
for every major cloud provider out there

790
00:35:32,600 --> 00:35:41,540
it'll do amazon it'll do no Ezzor it'll

791
00:35:37,280 --> 00:35:42,800
do Google Google Cloud and many more you

792
00:35:41,540 --> 00:35:46,550
can use it to provision your VMware

793
00:35:42,800 --> 00:35:48,080
machines if you want and if you're not

794
00:35:46,550 --> 00:35:49,280
using anything to provision your VMware

795
00:35:48,080 --> 00:35:51,980
machines you should strongly consider

796
00:35:49,280 --> 00:35:53,480
using something like this to do it you

797
00:35:51,980 --> 00:35:56,840
can use packer to spin up VMware

798
00:35:53,480 --> 00:36:01,810
machines you got it you have to run

799
00:35:56,840 --> 00:36:01,810
VMware machines locked you know

800
00:36:08,480 --> 00:36:14,140
hi folks our geek here unfortunately we

801
00:36:11,300 --> 00:36:16,880
had another video slash audio freeze

802
00:36:14,140 --> 00:36:18,319
track - seems to be a problem child at

803
00:36:16,880 --> 00:36:19,790
this con

804
00:36:18,320 --> 00:36:22,490
I let the person attending the video

805
00:36:19,790 --> 00:36:23,869
station know to stop and restart OBS if

806
00:36:22,490 --> 00:36:26,299
this happens and we'll just do a part

807
00:36:23,869 --> 00:36:28,930
one in part 2 and combine them sorry for

808
00:36:26,300 --> 00:36:28,930
the inconvenience

809
00:41:54,930 --> 00:41:56,990
you

