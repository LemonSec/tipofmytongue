1
00:00:11,960 --> 00:00:17,160
every night yes this is my talk and

2
00:00:14,940 --> 00:00:21,720
reversing and bypassing dongle based DRM

3
00:00:17,160 --> 00:00:23,430
systems so Who am I I'm security

4
00:00:21,720 --> 00:00:25,859
engineer I work in vertical

5
00:00:23,430 --> 00:00:28,800
transportation here in Connecticut it's

6
00:00:25,859 --> 00:00:31,050
only a couple of those companies I work

7
00:00:28,800 --> 00:00:33,239
mostly in Apps Act right so I work with

8
00:00:31,050 --> 00:00:34,950
our development teams trying to make

9
00:00:33,239 --> 00:00:38,218
sure that the products that we produce

10
00:00:34,950 --> 00:00:40,670
are ready to go and be out in the world

11
00:00:38,219 --> 00:00:43,440
and you know kind of all over the world

12
00:00:40,670 --> 00:00:46,680
about 80% of the blue team working

13
00:00:43,440 --> 00:00:48,629
secure architecture code reviews that

14
00:00:46,680 --> 00:00:50,789
kind of thing but about 20% of the time

15
00:00:48,629 --> 00:00:52,468
I get to you know kind of put my my

16
00:00:50,789 --> 00:00:54,449
black head on and do some red team stuff

17
00:00:52,469 --> 00:00:56,719
testing some some vendor supplied

18
00:00:54,449 --> 00:00:59,370
products or products that we produce

19
00:00:56,719 --> 00:01:03,239
which I guess makes me on the dark

20
00:00:59,370 --> 00:01:08,840
medium violet team we're all about

21
00:01:03,239 --> 00:01:11,280
adding extra colors so dongles right I

22
00:01:08,840 --> 00:01:13,470
imagine most of the people in this room

23
00:01:11,280 --> 00:01:14,610
in most of your industries think the

24
00:01:13,470 --> 00:01:17,189
dongles are pretty much dead

25
00:01:14,610 --> 00:01:20,460
you probably don't deal with them on any

26
00:01:17,189 --> 00:01:21,750
kind of frequent basis but they still

27
00:01:20,460 --> 00:01:24,600
exist and they're still out there and

28
00:01:21,750 --> 00:01:26,130
there's a couple of reasons why the

29
00:01:24,600 --> 00:01:28,829
first is that there's lots of systems

30
00:01:26,130 --> 00:01:31,380
that are offline especially in the

31
00:01:28,829 --> 00:01:34,589
defense industry there are air gap

32
00:01:31,380 --> 00:01:37,679
systems in my industry there's a lot of

33
00:01:34,590 --> 00:01:41,310
remote sites right places where Internet

34
00:01:37,680 --> 00:01:44,100
connectivity isn't a given right to G

35
00:01:41,310 --> 00:01:47,070
cell access isn't even a given right so

36
00:01:44,100 --> 00:01:52,048
companies still have a need to want to

37
00:01:47,070 --> 00:01:53,520
enforce DRM whether that's for licensing

38
00:01:52,049 --> 00:01:56,189
right making sure that they're getting

39
00:01:53,520 --> 00:01:59,369
the money that's owed to them and by

40
00:01:56,189 --> 00:02:00,508
their clients or if it's the protection

41
00:01:59,369 --> 00:02:03,119
of intellectual property right

42
00:02:00,509 --> 00:02:04,710
protecting against you know industrial

43
00:02:03,119 --> 00:02:08,068
espionage and things like that

44
00:02:04,710 --> 00:02:10,109
there's also legacy products I imagine

45
00:02:08,068 --> 00:02:12,179
lots of people here who work in the

46
00:02:10,110 --> 00:02:13,510
industry know that legacy is incredibly

47
00:02:12,180 --> 00:02:15,610
hard to kill so

48
00:02:13,510 --> 00:02:18,129
something might have been produced 15 20

49
00:02:15,610 --> 00:02:19,660
years ago that used a dongle based DRM

50
00:02:18,129 --> 00:02:22,060
system it's still there it's still

51
00:02:19,660 --> 00:02:23,200
kicking around it's probably not going

52
00:02:22,060 --> 00:02:27,340
anywhere in the next five to ten years

53
00:02:23,200 --> 00:02:30,190
either so the one that happened across

54
00:02:27,340 --> 00:02:31,840
my desk is made by a company called seku

55
00:02:30,190 --> 00:02:33,790
tech and they make something called the

56
00:02:31,840 --> 00:02:36,640
eunuch II and it comes in a couple

57
00:02:33,790 --> 00:02:39,160
different flavors there's the standard

58
00:02:36,640 --> 00:02:40,798
right where you know this thing

59
00:02:39,160 --> 00:02:44,079
basically has a microcontroller on it

60
00:02:40,799 --> 00:02:48,010
where you can store some on dongle

61
00:02:44,080 --> 00:02:51,280
instructions on there you can store some

62
00:02:48,010 --> 00:02:52,750
encryption keys there are some license

63
00:02:51,280 --> 00:02:54,519
modules on there right this is how you

64
00:02:52,750 --> 00:02:55,989
control what features of an application

65
00:02:54,519 --> 00:02:58,360
are on there how many times it can

66
00:02:55,989 --> 00:03:00,519
launch things like that there's also a

67
00:02:58,360 --> 00:03:01,900
random number generator there's also the

68
00:03:00,519 --> 00:03:03,849
unit key time which takes all of those

69
00:03:01,900 --> 00:03:05,650
same features and adds a real-time clock

70
00:03:03,849 --> 00:03:07,209
and a battery on there right so now you

71
00:03:05,650 --> 00:03:09,720
can't just change the time on your

72
00:03:07,209 --> 00:03:11,920
server and look you're licensed again

73
00:03:09,720 --> 00:03:13,390
and then there's the unique E Drive

74
00:03:11,920 --> 00:03:15,548
which takes all of those same standards

75
00:03:13,390 --> 00:03:19,510
but it also adds so like some read-only

76
00:03:15,549 --> 00:03:22,980
storage to it some cd-rom emulation and

77
00:03:19,510 --> 00:03:25,929
it also adds some RSA functionality

78
00:03:22,980 --> 00:03:29,410
signing encrypting decrypting of things

79
00:03:25,930 --> 00:03:30,940
like that so the one that I had like I

80
00:03:29,410 --> 00:03:32,290
said came across my desk is that the

81
00:03:30,940 --> 00:03:34,180
unique e time and that's that's the one

82
00:03:32,290 --> 00:03:37,690
that I had for doing all this actual

83
00:03:34,180 --> 00:03:39,519
hands-on testing but all of the

84
00:03:37,690 --> 00:03:41,109
libraries that we go through when we're

85
00:03:39,519 --> 00:03:43,180
doing this reversing are standard across

86
00:03:41,109 --> 00:03:45,340
all of them so really this is like this

87
00:03:43,180 --> 00:03:49,209
is like a product line level of

88
00:03:45,340 --> 00:03:52,150
vulnerability so some of the key

89
00:03:49,209 --> 00:03:54,549
features that I investigated and they're

90
00:03:52,150 --> 00:03:56,109
there in quotes for a reason the first

91
00:03:54,549 --> 00:03:57,579
is the envelop er right which is your

92
00:03:56,109 --> 00:03:59,380
company has an application it was

93
00:03:57,579 --> 00:04:01,599
developed it was tested and now you want

94
00:03:59,380 --> 00:04:03,010
to just add DRM to it well they provide

95
00:04:01,599 --> 00:04:04,450
something called the envelop er which is

96
00:04:03,010 --> 00:04:06,370
just take that existing application

97
00:04:04,450 --> 00:04:08,290
shove it into this tool it's going to

98
00:04:06,370 --> 00:04:11,530
spit you out a protected executable with

99
00:04:08,290 --> 00:04:13,150
DRM functionality built into it also

100
00:04:11,530 --> 00:04:15,370
those dongles stored and executed

101
00:04:13,150 --> 00:04:17,019
instructions this should in theory be

102
00:04:15,370 --> 00:04:19,329
really hard to reverse without

103
00:04:17,019 --> 00:04:22,320
exploiting the hardware it turns out

104
00:04:19,329 --> 00:04:24,550
that's not the case and we'll see why

105
00:04:22,320 --> 00:04:26,700
licensing modes right this is the number

106
00:04:24,550 --> 00:04:29,760
of launches time to expire feature

107
00:04:26,700 --> 00:04:32,729
available of the random number generator

108
00:04:29,760 --> 00:04:34,680
its built-in there as well as some anti

109
00:04:32,730 --> 00:04:39,390
debug functionality which they claim is

110
00:04:34,680 --> 00:04:43,560
robust and some ability to encrypt and

111
00:04:39,390 --> 00:04:47,190
decrypt buffers so the authentication

112
00:04:43,560 --> 00:04:49,080
system for the eunuch II it's there's

113
00:04:47,190 --> 00:04:51,690
two there's a two password scheme the

114
00:04:49,080 --> 00:04:54,210
first is a user password right this is

115
00:04:51,690 --> 00:04:56,460
essentially a read-only user and it's

116
00:04:54,210 --> 00:05:00,150
made up of two 16-bit integers we have

117
00:04:56,460 --> 00:05:02,190
32 bits of password if we're gonna try

118
00:05:00,150 --> 00:05:03,960
and brute-force this and the second one

119
00:05:02,190 --> 00:05:05,070
is an admin password which means that

120
00:05:03,960 --> 00:05:08,130
you need to have those two user

121
00:05:05,070 --> 00:05:10,700
passwords as well as the two admin

122
00:05:08,130 --> 00:05:14,040
passwords right so we've got 64 bits

123
00:05:10,700 --> 00:05:17,099
needed to log in and that gives you read

124
00:05:14,040 --> 00:05:18,720
and write functionality however some of

125
00:05:17,100 --> 00:05:21,240
those functions still aren't directly

126
00:05:18,720 --> 00:05:23,460
exposed and we'll see that's actually

127
00:05:21,240 --> 00:05:27,660
the only part of this that does so far

128
00:05:23,460 --> 00:05:28,950
we I haven't been able to to break so

129
00:05:27,660 --> 00:05:31,250
the first is the envelop err right it

130
00:05:28,950 --> 00:05:35,099
takes the application in and it wraps it

131
00:05:31,250 --> 00:05:36,360
the enveloped app app basically works by

132
00:05:35,100 --> 00:05:38,760
checking for the dongles existence

133
00:05:36,360 --> 00:05:41,100
making sure that that user key that

134
00:05:38,760 --> 00:05:42,599
exists can log into the dongle right

135
00:05:41,100 --> 00:05:47,070
making sure that there's there's a match

136
00:05:42,600 --> 00:05:48,510
there and then it's constantly in the

137
00:05:47,070 --> 00:05:51,690
background it spawns a thread which is

138
00:05:48,510 --> 00:05:53,219
just some random time interval checking

139
00:05:51,690 --> 00:05:56,550
for the existence that dongle and that

140
00:05:53,220 --> 00:05:57,990
the logins still works on Windows it

141
00:05:56,550 --> 00:06:01,980
turns out that this is just a really

142
00:05:57,990 --> 00:06:04,350
heavily obfuscated dotnet executable so

143
00:06:01,980 --> 00:06:06,330
since it's dotnet my preferred tool

144
00:06:04,350 --> 00:06:09,600
whenever I have something in dotnet that

145
00:06:06,330 --> 00:06:10,890
I'm gonna start reversing his DNS by and

146
00:06:09,600 --> 00:06:14,430
like I said it's it's really heavily

147
00:06:10,890 --> 00:06:16,469
obfuscated things are kind of all over

148
00:06:14,430 --> 00:06:18,660
the place these these screenshots

149
00:06:16,470 --> 00:06:22,680
actually don't do a very good job of

150
00:06:18,660 --> 00:06:25,620
showing kind of how spread out things

151
00:06:22,680 --> 00:06:28,020
got after it was obfuscated tools like

152
00:06:25,620 --> 00:06:31,560
de for dot didn't really help D

153
00:06:28,020 --> 00:06:34,560
obfuscate it it's really awesome when it

154
00:06:31,560 --> 00:06:37,950
does work out that way you're right back

155
00:06:34,560 --> 00:06:39,600
to basically the same executable so so

156
00:06:37,950 --> 00:06:40,820
we're kind of stuck manually digging our

157
00:06:39,600 --> 00:06:43,530
way through it

158
00:06:40,820 --> 00:06:45,210
unfortunately right the the anti debug

159
00:06:43,530 --> 00:06:47,070
functionality that we talked about is is

160
00:06:45,210 --> 00:06:48,599
there so as I'm trying to step through

161
00:06:47,070 --> 00:06:50,880
this and set breakpoints on interesting

162
00:06:48,600 --> 00:06:55,800
looking functions the application keeps

163
00:06:50,880 --> 00:06:58,170
crashing kind of manually digging our

164
00:06:55,800 --> 00:07:01,890
way through we find it to a single call

165
00:06:58,170 --> 00:07:04,380
to unique e DLL and this functions to

166
00:07:01,890 --> 00:07:10,169
spend other thread and the crash is

167
00:07:04,380 --> 00:07:12,990
happening after this call so this is not

168
00:07:10,170 --> 00:07:15,300
a dotnet library

169
00:07:12,990 --> 00:07:17,600
unfortunately so we're gonna change

170
00:07:15,300 --> 00:07:20,610
tools and working it over to Guidry

171
00:07:17,600 --> 00:07:22,290
luckily when we're looking for anti

172
00:07:20,610 --> 00:07:24,750
debug functionality there's only a few

173
00:07:22,290 --> 00:07:26,250
places that we can actually you know

174
00:07:24,750 --> 00:07:28,050
where you can determine whether or not a

175
00:07:26,250 --> 00:07:31,890
debuggers present and all of them are

176
00:07:28,050 --> 00:07:35,160
coming from kernel32.dll so we can go to

177
00:07:31,890 --> 00:07:38,969
the imports tab look up you know go to

178
00:07:35,160 --> 00:07:40,320
all of our imports to from kernel32 and

179
00:07:38,970 --> 00:07:43,520
we can hopefully you can see it there

180
00:07:40,320 --> 00:07:46,260
but we can find is debugger present and

181
00:07:43,520 --> 00:07:49,590
ghij is really nice there's every place

182
00:07:46,260 --> 00:07:51,120
where is debugger present is called so

183
00:07:49,590 --> 00:07:53,909
now literally all we have to do is

184
00:07:51,120 --> 00:07:55,950
double click on that and we're move on

185
00:07:53,910 --> 00:07:58,470
to our function you should also notice

186
00:07:55,950 --> 00:08:00,690
that for this being one of the main

187
00:07:58,470 --> 00:08:03,900
features is the anti debug functionality

188
00:08:00,690 --> 00:08:10,100
this is a small list right there's one

189
00:08:03,900 --> 00:08:14,030
function call so we move over to that

190
00:08:10,100 --> 00:08:17,190
function call and we see that we have

191
00:08:14,030 --> 00:08:19,049
our call here to is debugger present

192
00:08:17,190 --> 00:08:22,500
you'll see it on the decompiled view

193
00:08:19,050 --> 00:08:24,960
there and then we have a comparison to

194
00:08:22,500 --> 00:08:26,640
whether or not it's equal to zero which

195
00:08:24,960 --> 00:08:28,169
luckily means that the patch for this is

196
00:08:26,640 --> 00:08:29,580
going to be really tiny right we only

197
00:08:28,170 --> 00:08:31,380
have to patch a single instruction and

198
00:08:29,580 --> 00:08:35,400
we've bypassed all of the anti debug

199
00:08:31,380 --> 00:08:37,289
functionality unfortunately the only

200
00:08:35,400 --> 00:08:41,579
place where kyndra has really choked on

201
00:08:37,289 --> 00:08:47,069
me is in patching binaries so I had to

202
00:08:41,580 --> 00:08:48,950
move from cateura to r2 and cutter and I

203
00:08:47,070 --> 00:08:51,120
performed the patch there and then

204
00:08:48,950 --> 00:08:51,830
re-exam bit right so we're gonna we're

205
00:08:51,120 --> 00:08:54,620
going to patch

206
00:08:51,830 --> 00:08:56,930
are jumping on zero here to jump less

207
00:08:54,620 --> 00:09:02,030
than and all of the anti debug

208
00:08:56,930 --> 00:09:05,089
functionality is gone so we can go back

209
00:09:02,030 --> 00:09:06,709
into DN Spy and now debugging is a lot

210
00:09:05,090 --> 00:09:07,910
easier we can start tracking we also

211
00:09:06,710 --> 00:09:10,010
know that we're looking for interesting

212
00:09:07,910 --> 00:09:12,829
calls to unique e 32 dll that's where

213
00:09:10,010 --> 00:09:16,040
all of the the interesting calls to you

214
00:09:12,830 --> 00:09:17,270
know the actual drm are happening and so

215
00:09:16,040 --> 00:09:21,110
one of the first things that we can find

216
00:09:17,270 --> 00:09:25,579
is the first half of our password right

217
00:09:21,110 --> 00:09:27,530
this these are our user keys this is

218
00:09:25,580 --> 00:09:29,510
gonna be really important later for

219
00:09:27,530 --> 00:09:32,660
bypassing the rest of the system is the

220
00:09:29,510 --> 00:09:36,530
fact that these user keys must be in any

221
00:09:32,660 --> 00:09:40,219
application that's going to be using the

222
00:09:36,530 --> 00:09:44,990
dongle functionality we can also extract

223
00:09:40,220 --> 00:09:46,880
the AES key some things can't be diabla

224
00:09:44,990 --> 00:09:50,930
scattered away it's right there we can

225
00:09:46,880 --> 00:09:52,340
just dump that AES key and the last

226
00:09:50,930 --> 00:09:54,550
piece of this this is just an Etsy

227
00:09:52,340 --> 00:09:59,240
executable which is short for the

228
00:09:54,550 --> 00:10:00,949
original executable that we had rent

229
00:09:59,240 --> 00:10:02,510
that we were attempting to protect it

230
00:10:00,950 --> 00:10:05,330
basically just got put into an encrypted

231
00:10:02,510 --> 00:10:07,189
zip functionality included in the dotnet

232
00:10:05,330 --> 00:10:10,190
assembly and that's what's being shipped

233
00:10:07,190 --> 00:10:12,560
out here with the code to check for the

234
00:10:10,190 --> 00:10:14,570
dongle so that's been covered in a bunch

235
00:10:12,560 --> 00:10:17,989
of other places if you google dumping

236
00:10:14,570 --> 00:10:22,600
Nazi executables you'll find it in about

237
00:10:17,990 --> 00:10:25,310
three seconds it's a really trivial task

238
00:10:22,600 --> 00:10:25,990
so kind of like we said right there's

239
00:10:25,310 --> 00:10:27,770
easy enough

240
00:10:25,990 --> 00:10:29,960
unfortunately the vendor even says that

241
00:10:27,770 --> 00:10:32,420
that's easy enough which is surprising

242
00:10:29,960 --> 00:10:35,300
for one of their core claims for their

243
00:10:32,420 --> 00:10:36,890
marketing right they say you know this

244
00:10:35,300 --> 00:10:38,420
is from their documentation please do

245
00:10:36,890 --> 00:10:41,000
not only check if the unique a dongle

246
00:10:38,420 --> 00:10:42,680
exists right if the dongles attached

247
00:10:41,000 --> 00:10:47,060
this form of protection is extremely

248
00:10:42,680 --> 00:10:49,099
easy to crack it was they say the real

249
00:10:47,060 --> 00:10:51,469
value add is and again this is in their

250
00:10:49,100 --> 00:10:53,210
words from their documentation in the

251
00:10:51,470 --> 00:10:56,090
random number generation which is based

252
00:10:53,210 --> 00:10:57,920
off of the vendor seen value securely

253
00:10:56,090 --> 00:10:59,690
reading and checking the license modules

254
00:10:57,920 --> 00:11:03,589
those license modules that we talked

255
00:10:59,690 --> 00:11:05,240
about only you can't directly read the

256
00:11:03,590 --> 00:11:06,380
value out of this as a user

257
00:11:05,240 --> 00:11:08,029
you can only kind of check whether or

258
00:11:06,380 --> 00:11:11,480
not the value that you passed in is

259
00:11:08,029 --> 00:11:15,500
valid but admins can write new values to

260
00:11:11,480 --> 00:11:17,149
these modules or in performing unusual

261
00:11:15,500 --> 00:11:19,880
mathematical algorithms right these are

262
00:11:17,149 --> 00:11:22,100
those dongle based instructions that we

263
00:11:19,880 --> 00:11:25,459
talked about and viewing and editing

264
00:11:22,100 --> 00:11:27,020
those requires the full password right

265
00:11:25,459 --> 00:11:31,550
which requires the add the vendor seed

266
00:11:27,020 --> 00:11:40,579
value to get they also say the password

267
00:11:31,550 --> 00:11:42,920
generation algorithm is irreversible so

268
00:11:40,580 --> 00:11:44,930
yeah clearly we need that vendor seed

269
00:11:42,920 --> 00:11:46,910
value right that's that's the keys to

270
00:11:44,930 --> 00:11:48,649
the kingdom here um and if we've

271
00:11:46,910 --> 00:11:50,990
compromised that we've compromised

272
00:11:48,649 --> 00:11:52,700
pretty much everything that you could do

273
00:11:50,990 --> 00:11:55,520
with this all of their core claims over

274
00:11:52,700 --> 00:11:57,350
protecting that value so there's there's

275
00:11:55,520 --> 00:11:58,970
two obvious places to start right the

276
00:11:57,350 --> 00:12:00,830
first is we can check where it's

277
00:11:58,970 --> 00:12:04,100
consumed right when you go to perform an

278
00:12:00,830 --> 00:12:05,839
admin action the other place that would

279
00:12:04,100 --> 00:12:08,240
make sense is where that vendor seed

280
00:12:05,839 --> 00:12:09,529
value gets turned into for passwords

281
00:12:08,240 --> 00:12:10,970
right there it's not a it's not a

282
00:12:09,529 --> 00:12:12,770
one-to-one relationship there's some

283
00:12:10,970 --> 00:12:13,579
kind of there's some kind of math that's

284
00:12:12,770 --> 00:12:17,329
happening there

285
00:12:13,579 --> 00:12:18,949
right the the password consumption API

286
00:12:17,329 --> 00:12:21,859
is non-trivial right there's a lot of

287
00:12:18,950 --> 00:12:25,040
weirdness going on with random values

288
00:12:21,860 --> 00:12:28,430
based off of the current system time and

289
00:12:25,040 --> 00:12:30,230
I'm lazy so I'm not doing that one but

290
00:12:28,430 --> 00:12:33,109
the API for where that seed has turned

291
00:12:30,230 --> 00:12:37,190
into passwords looks far less complex so

292
00:12:33,110 --> 00:12:39,350
that's where I focused my time so we're

293
00:12:37,190 --> 00:12:40,250
back into getcha and the method that

294
00:12:39,350 --> 00:12:42,410
we're looking for from their

295
00:12:40,250 --> 00:12:44,570
documentation is the Uni key generate

296
00:12:42,410 --> 00:12:47,829
new password method right which is where

297
00:12:44,570 --> 00:12:51,380
we pass in a 32-bit vendor seed value

298
00:12:47,829 --> 00:12:53,510
now if you are somebody who's involved

299
00:12:51,380 --> 00:12:54,410
with cryptography quite a bit alarm

300
00:12:53,510 --> 00:12:57,470
bells should already be going off in

301
00:12:54,410 --> 00:13:01,939
your head somehow 32 bits of value is

302
00:12:57,470 --> 00:13:05,660
becoming 64 bits of password there's

303
00:13:01,940 --> 00:13:10,250
only a couple of ways to do that kind of

304
00:13:05,660 --> 00:13:12,589
key expansion right um and the even less

305
00:13:10,250 --> 00:13:15,699
of them to do it securely and they did

306
00:13:12,589 --> 00:13:15,699
not choose any of those

307
00:13:15,790 --> 00:13:23,120
so we end up in this block of code so if

308
00:13:21,440 --> 00:13:24,770
you're if you take a look at it

309
00:13:23,120 --> 00:13:28,700
some things should already start to jump

310
00:13:24,770 --> 00:13:34,579
out for you primarily should be that md5

311
00:13:28,700 --> 00:13:36,860
piece of things so basically what's

312
00:13:34,580 --> 00:13:40,160
happening here is you're just passing in

313
00:13:36,860 --> 00:13:43,640
that 32-bit z value you're passing it in

314
00:13:40,160 --> 00:13:44,829
to md5 and you're you're taking its

315
00:13:43,640 --> 00:13:47,150
digest

316
00:13:44,830 --> 00:13:50,780
that's your mathematically slow

317
00:13:47,150 --> 00:13:53,959
operation of this whole thing that's it

318
00:13:50,780 --> 00:13:55,640
I mean it's sort of it there's also some

319
00:13:53,960 --> 00:13:57,590
weird map that happens on the digest

320
00:13:55,640 --> 00:14:01,130
right they do some like rotation of this

321
00:13:57,590 --> 00:14:02,420
hash that way it's not just an md5 hash

322
00:14:01,130 --> 00:14:07,700
I think this is how they made themselves

323
00:14:02,420 --> 00:14:09,079
feel better at night I really genuinely

324
00:14:07,700 --> 00:14:12,280
don't know what this block of code is

325
00:14:09,080 --> 00:14:15,800
doing I also genuinely don't care

326
00:14:12,280 --> 00:14:16,970
because get so far especially with arm

327
00:14:15,800 --> 00:14:18,650
right they provide a whole bunch of

328
00:14:16,970 --> 00:14:20,270
libraries compiled for a whole bunch of

329
00:14:18,650 --> 00:14:22,280
things so I actually got to pick and

330
00:14:20,270 --> 00:14:26,079
choose what D compiled more nicely um

331
00:14:22,280 --> 00:14:28,420
GUID row for arm is like really good

332
00:14:26,080 --> 00:14:31,670
very very close to what the original

333
00:14:28,420 --> 00:14:35,630
values would be so I literally took this

334
00:14:31,670 --> 00:14:38,839
and copied it and then finally after

335
00:14:35,630 --> 00:14:41,390
that that weird math function we're just

336
00:14:38,840 --> 00:14:45,380
taking the bottom 64 bits of that hash

337
00:14:41,390 --> 00:14:49,010
plus that weird math and those are our

338
00:14:45,380 --> 00:14:51,530
passwords so kind of just sum up what

339
00:14:49,010 --> 00:14:54,530
we've got to this point right is we have

340
00:14:51,530 --> 00:15:00,490
a 32-bit input expanded to 128 bits but

341
00:14:54,530 --> 00:15:02,689
a md5 sum computationally not important

342
00:15:00,490 --> 00:15:06,110
obfuscation of the fact that it's just

343
00:15:02,690 --> 00:15:09,980
an md5 hash right then we're only using

344
00:15:06,110 --> 00:15:11,420
the bottom 64 bits of it and this is the

345
00:15:09,980 --> 00:15:13,970
really important piece we have an Oracle

346
00:15:11,420 --> 00:15:17,360
for what the likely inputs are we have

347
00:15:13,970 --> 00:15:19,550
an Oracle because we have to have the

348
00:15:17,360 --> 00:15:24,350
bottom 32 bits of that that's our user

349
00:15:19,550 --> 00:15:26,479
password so we can brute force this

350
00:15:24,350 --> 00:15:29,130
without needing to do anything fancy

351
00:15:26,480 --> 00:15:31,200
right this isn't going to require

352
00:15:29,130 --> 00:15:33,990
a GPU cluster we're not going to go over

353
00:15:31,200 --> 00:15:37,980
to AWS and go rent some GPUs I'm just

354
00:15:33,990 --> 00:15:39,210
gonna use my laptop so I did and there's

355
00:15:37,980 --> 00:15:42,570
a proof of concept out there that you

356
00:15:39,210 --> 00:15:45,330
can go and grab I wrote it in rust

357
00:15:42,570 --> 00:15:47,940
because rust is awesome if any of you

358
00:15:45,330 --> 00:15:49,500
deal with CVS on a daily basis and you

359
00:15:47,940 --> 00:15:50,520
see how many of them come from see and

360
00:15:49,500 --> 00:15:52,710
memory

361
00:15:50,520 --> 00:15:57,120
you should also love for rust that's my

362
00:15:52,710 --> 00:15:58,410
my little plug but the the end state of

363
00:15:57,120 --> 00:16:00,000
this is you can brute force the entire

364
00:15:58,410 --> 00:16:04,439
key space in about 10 minutes on a

365
00:16:00,000 --> 00:16:07,290
reasonably powerful laptop and what you

366
00:16:04,440 --> 00:16:12,900
can see from this output is uh I gave it

367
00:16:07,290 --> 00:16:15,329
to user C values and I think this one

368
00:16:12,900 --> 00:16:17,069
took about six minutes it spit out what

369
00:16:15,330 --> 00:16:21,000
the admin speed values are as well as

370
00:16:17,070 --> 00:16:23,310
what the original vendor seed was so now

371
00:16:21,000 --> 00:16:24,570
with just that and using a tool that

372
00:16:23,310 --> 00:16:26,310
they provide for free called their

373
00:16:24,570 --> 00:16:27,420
console right we can dump the

374
00:16:26,310 --> 00:16:28,589
instructions that are on the dongle

375
00:16:27,420 --> 00:16:30,209
right those things that should have

376
00:16:28,590 --> 00:16:33,090
required us to compromise the hardware

377
00:16:30,210 --> 00:16:34,740
right or just displayed and we can take

378
00:16:33,090 --> 00:16:36,660
them and copy them and do whatever we

379
00:16:34,740 --> 00:16:38,720
want with them or change them right and

380
00:16:36,660 --> 00:16:40,860
just say oh you're just return zero now

381
00:16:38,720 --> 00:16:43,410
that was easy

382
00:16:40,860 --> 00:16:46,410
we can predict the output of the dongle

383
00:16:43,410 --> 00:16:48,060
based random number generator if the

384
00:16:46,410 --> 00:16:49,980
software that's using this was relying

385
00:16:48,060 --> 00:16:51,209
on that random number generator to do

386
00:16:49,980 --> 00:16:53,880
anything especially if it was

387
00:16:51,210 --> 00:16:58,500
cryptographic um he was probably owned

388
00:16:53,880 --> 00:17:00,810
anyway because this is as bad you can

389
00:16:58,500 --> 00:17:03,510
also change this licensing my modes and

390
00:17:00,810 --> 00:17:05,280
the time-based expiration value so you

391
00:17:03,510 --> 00:17:08,819
know you're licensed for all of the

392
00:17:05,280 --> 00:17:11,879
features forever you can dump or change

393
00:17:08,819 --> 00:17:14,579
the dongles memory and you can change

394
00:17:11,880 --> 00:17:18,360
the dongle encryption keys but you can't

395
00:17:14,579 --> 00:17:19,980
view them so you can change those keys

396
00:17:18,359 --> 00:17:27,719
but you'll you'll lose any of the old

397
00:17:19,980 --> 00:17:29,070
data that was encrypted by it so kinda

398
00:17:27,720 --> 00:17:31,680
that's that's bad enough right we

399
00:17:29,070 --> 00:17:33,750
bypassed it without doing using any of

400
00:17:31,680 --> 00:17:37,620
the expanded functionality that was

401
00:17:33,750 --> 00:17:39,660
available to us by the vendor but there

402
00:17:37,620 --> 00:17:42,139
is an additional feature they provide

403
00:17:39,660 --> 00:17:47,000
and that additional feature

404
00:17:42,140 --> 00:17:50,180
is the ability to remotely update

405
00:17:47,000 --> 00:17:51,320
someone's software right so let's

406
00:17:50,180 --> 00:17:53,060
imagine at the pre-course didn't work

407
00:17:51,320 --> 00:17:57,080
right they they provide this remote

408
00:17:53,060 --> 00:17:58,760
update utility and what you do is you

409
00:17:57,080 --> 00:18:00,409
take the updated data that you want to

410
00:17:58,760 --> 00:18:02,360
store in the dongle right whether that's

411
00:18:00,410 --> 00:18:07,130
an update to the dongles memory and

412
00:18:02,360 --> 00:18:08,570
update to the licensing modules or you

413
00:18:07,130 --> 00:18:12,470
know and anything else that its doors

414
00:18:08,570 --> 00:18:13,939
and you produce an update file and

415
00:18:12,470 --> 00:18:16,580
there's an optional password on here

416
00:18:13,940 --> 00:18:19,850
which is going to do some encryption for

417
00:18:16,580 --> 00:18:21,520
us of that file which also doesn't make

418
00:18:19,850 --> 00:18:23,840
a tremendous amount of sense because

419
00:18:21,520 --> 00:18:26,330
you're about to give that password to

420
00:18:23,840 --> 00:18:30,110
the user who's required to use it in

421
00:18:26,330 --> 00:18:31,669
order to update their dongle so I'm not

422
00:18:30,110 --> 00:18:35,840
quite sure who that encryption is

423
00:18:31,670 --> 00:18:38,660
protecting against but it's there so

424
00:18:35,840 --> 00:18:40,280
then the user runs the updater or some

425
00:18:38,660 --> 00:18:42,860
or you use the library that they

426
00:18:40,280 --> 00:18:45,860
provided to to interface with that

427
00:18:42,860 --> 00:18:47,300
update file and the the dongle is

428
00:18:45,860 --> 00:18:52,219
updated right that that unit key is

429
00:18:47,300 --> 00:18:57,260
updated but that's a right operation

430
00:18:52,220 --> 00:19:05,180
right right operations required the

431
00:18:57,260 --> 00:19:12,830
admin password also correct it can't

432
00:19:05,180 --> 00:19:15,290
just be in there can it yes it can yeah

433
00:19:12,830 --> 00:19:20,030
so long story short this is an ini file

434
00:19:15,290 --> 00:19:22,820
that has been kind of minorly obfuscated

435
00:19:20,030 --> 00:19:25,850
and gets parsed it's also potentially

436
00:19:22,820 --> 00:19:27,980
encrypted but they provide on their

437
00:19:25,850 --> 00:19:32,389
website the libraries so reverse

438
00:19:27,980 --> 00:19:34,520
engineering the weird xor obfuscation

439
00:19:32,390 --> 00:19:36,140
that they did of this file in order to

440
00:19:34,520 --> 00:19:39,010
just take an update file that they gave

441
00:19:36,140 --> 00:19:42,500
you and reverse-engineer it it's just

442
00:19:39,010 --> 00:19:44,000
really really easy so I didn't I didn't

443
00:19:42,500 --> 00:19:46,070
build a proof of concept for this

444
00:19:44,000 --> 00:19:48,890
because I kind of tackled this piece of

445
00:19:46,070 --> 00:19:52,460
it later on but it's really trivial to

446
00:19:48,890 --> 00:19:55,520
do and as soon as as anybody's gone and

447
00:19:52,460 --> 00:19:57,290
done it you you have the

448
00:19:55,520 --> 00:20:01,790
under passwords because they supplied

449
00:19:57,290 --> 00:20:04,190
them to you um so about that password

450
00:20:01,790 --> 00:20:05,420
protection right they do provide it

451
00:20:04,190 --> 00:20:06,740
right that should add some level

452
00:20:05,420 --> 00:20:08,480
functionality other than the fact that

453
00:20:06,740 --> 00:20:13,610
they're gonna give you the password for

454
00:20:08,480 --> 00:20:30,260
it but even if you didn't right even if

455
00:20:13,610 --> 00:20:36,110
we were trying to think so they were

456
00:20:30,260 --> 00:20:37,790
upset I tried to work the word dongle as

457
00:20:36,110 --> 00:20:52,909
many times into this presentation as I

458
00:20:37,790 --> 00:20:55,959
could I just tried to hand that back on

459
00:20:52,910 --> 00:20:55,959
[Music]

460
00:21:36,770 --> 00:22:03,330
it's just sorry about that

461
00:21:41,010 --> 00:22:11,610
technical difficulties quick replay for

462
00:22:03,330 --> 00:22:14,699
everybody who came in late all right yes

463
00:22:11,610 --> 00:22:17,580
who about that password protection right

464
00:22:14,700 --> 00:22:19,530
it turns out that they are they kind of

465
00:22:17,580 --> 00:22:22,860
follow a familiar pattern here right of

466
00:22:19,530 --> 00:22:26,910
not really understanding how to do key

467
00:22:22,860 --> 00:22:29,370
expansion or key derivation they follow

468
00:22:26,910 --> 00:22:31,050
that exact same scheme which is taking

469
00:22:29,370 --> 00:22:35,250
in the password running it through md5

470
00:22:31,050 --> 00:22:37,980
and using that as a generation into a es

471
00:22:35,250 --> 00:22:40,920
so there are other definite

472
00:22:37,980 --> 00:22:43,830
cryptographic attacks here in even in

473
00:22:40,920 --> 00:22:46,200
the case where you're trying to prevent

474
00:22:43,830 --> 00:22:48,810
you know the the use case where this

475
00:22:46,200 --> 00:22:53,130
update file is intercepted in transit

476
00:22:48,810 --> 00:23:00,960
right cracking it md5 just isn't isn't

477
00:22:53,130 --> 00:23:03,060
suitable for that task to make matters

478
00:23:00,960 --> 00:23:06,420
worse that a big file they also don't

479
00:23:03,060 --> 00:23:09,750
really understand how to use AES it's an

480
00:23:06,420 --> 00:23:11,820
ECB mode which means that especially in

481
00:23:09,750 --> 00:23:13,380
the case where one of those key features

482
00:23:11,820 --> 00:23:16,560
that you're doing is updating that

483
00:23:13,380 --> 00:23:19,860
dongle memory right we should be able to

484
00:23:16,560 --> 00:23:22,080
play pick and choose with blocks of

485
00:23:19,860 --> 00:23:24,149
memory and repeat them right so even if

486
00:23:22,080 --> 00:23:25,370
we didn't have the ability to correct

487
00:23:24,150 --> 00:23:27,480
the vendor seed value there's other

488
00:23:25,370 --> 00:23:31,229
probably very serious cryptographic

489
00:23:27,480 --> 00:23:34,290
flaws in how this update mechanism is

490
00:23:31,230 --> 00:23:37,020
working that should result in more

491
00:23:34,290 --> 00:23:39,440
serious things than just just a crash of

492
00:23:37,020 --> 00:23:39,440
the updater

493
00:23:39,480 --> 00:23:45,490
and for any of you this is just kind of

494
00:23:41,890 --> 00:23:52,090
a public service announcement yeah all

495
00:23:45,490 --> 00:23:57,220
modes are beautiful but not easy be so

496
00:23:52,090 --> 00:24:00,309
to sum it up there's a couple things

497
00:23:57,220 --> 00:24:02,140
that haven't been broken yet right there

498
00:24:00,309 --> 00:24:05,529
are four encryption slots that store

499
00:24:02,140 --> 00:24:06,760
those four 128-bit keys for us

500
00:24:05,529 --> 00:24:10,419
and there's that encrypt and decrypt

501
00:24:06,760 --> 00:24:12,820
buffer API however that isn't even a yes

502
00:24:10,419 --> 00:24:14,139
being used in the case of that right and

503
00:24:12,820 --> 00:24:15,850
it kind of makes sense because this is a

504
00:24:14,139 --> 00:24:19,689
really tiny cheap microcontroller that

505
00:24:15,850 --> 00:24:21,279
was developed I probably not in the past

506
00:24:19,690 --> 00:24:24,130
ten years probably older than that which

507
00:24:21,279 --> 00:24:26,380
drove their decision to use T the tiny

508
00:24:24,130 --> 00:24:29,470
encryption algorithm but it is also an

509
00:24:26,380 --> 00:24:32,350
ECB mode so even if you do have some set

510
00:24:29,470 --> 00:24:36,100
of values that are you know encrypted by

511
00:24:32,350 --> 00:24:37,779
a key right there are you're depending

512
00:24:36,100 --> 00:24:40,689
on how they're used right like any other

513
00:24:37,779 --> 00:24:43,750
crypto mode it there could be very

514
00:24:40,690 --> 00:24:46,720
serious issues with it unfortunately

515
00:24:43,750 --> 00:24:49,809
well fortunately right-t isn't

516
00:24:46,720 --> 00:24:52,149
explicitly broken the best case is a two

517
00:24:49,809 --> 00:24:56,139
to the hundred twenty six based attack

518
00:24:52,149 --> 00:24:58,000
which means that for any encrypted block

519
00:24:56,139 --> 00:25:00,279
there are three possible passwords for

520
00:24:58,000 --> 00:25:02,200
decrypting it that's still well above

521
00:25:00,279 --> 00:25:03,970
probably anybody that's in this room

522
00:25:02,200 --> 00:25:07,570
unless you're working for the NSA which

523
00:25:03,970 --> 00:25:09,220
case we should talk uh but probably not

524
00:25:07,570 --> 00:25:12,279
going to be the way I haven't found a

525
00:25:09,220 --> 00:25:15,279
way to dump these keys yet that being

526
00:25:12,279 --> 00:25:17,289
said I've recently kind of continuing

527
00:25:15,279 --> 00:25:19,360
research I took this thing apart there's

528
00:25:17,289 --> 00:25:22,299
an exposed you are that's that's exposed

529
00:25:19,360 --> 00:25:26,610
on the board that I've started playing

530
00:25:22,299 --> 00:25:30,330
around with it has some non-trivial API

531
00:25:26,610 --> 00:25:32,229
so I'm hoping to continue to break this

532
00:25:30,330 --> 00:25:35,080
additionally it looks like there's a lot

533
00:25:32,230 --> 00:25:37,899
of user side checking when you perform

534
00:25:35,080 --> 00:25:42,610
the read dongle memory on those bounds

535
00:25:37,899 --> 00:25:45,100
I'm also hopeful that kind of continuing

536
00:25:42,610 --> 00:25:47,500
reversing this will find a way to just

537
00:25:45,100 --> 00:25:48,908
dump all of the firmware from the dongle

538
00:25:47,500 --> 00:25:51,510
because then we can find all sorts of

539
00:25:48,909 --> 00:25:51,510
other fun things

540
00:25:51,640 --> 00:25:57,570
um soon I think it's important to add a

541
00:25:55,600 --> 00:25:59,830
time frame to this right especially

542
00:25:57,570 --> 00:26:01,000
there were some people who this was

543
00:25:59,830 --> 00:26:04,270
their first besides and I know uh

544
00:26:01,000 --> 00:26:06,190
certainly was the case for me which is

545
00:26:04,270 --> 00:26:07,780
you kind of get that feeling when you're

546
00:26:06,190 --> 00:26:10,330
watching something that someone just sat

547
00:26:07,780 --> 00:26:11,678
down and hacked this out maybe there are

548
00:26:10,330 --> 00:26:15,610
people in this room who could do that

549
00:26:11,679 --> 00:26:17,490
but it is not me dumping of the

550
00:26:15,610 --> 00:26:20,350
enveloped app was probably about like

551
00:26:17,490 --> 00:26:22,299
two days of man-hours but I'm also

552
00:26:20,350 --> 00:26:25,240
really familiar with reversing dotnet

553
00:26:22,299 --> 00:26:27,160
executables so I had a step forward

554
00:26:25,240 --> 00:26:29,500
there I'd also already seen nazi

555
00:26:27,160 --> 00:26:31,900
executables and in that kind of storage

556
00:26:29,500 --> 00:26:35,230
so dumping that piece of it was was

557
00:26:31,900 --> 00:26:37,120
really pretty trivial reversing and

558
00:26:35,230 --> 00:26:39,549
creating the seed exploit was a few

559
00:26:37,120 --> 00:26:42,100
weeks worth of work this was on and off

560
00:26:39,549 --> 00:26:45,850
but that includes a lot of other time

561
00:26:42,100 --> 00:26:49,059
spent on failed exploitation paths and

562
00:26:45,850 --> 00:26:50,678
trying to find other exploits that may

563
00:26:49,059 --> 00:26:51,850
have been here I actually kind of

564
00:26:50,679 --> 00:26:55,750
thought things would be harder than they

565
00:26:51,850 --> 00:26:56,980
were to to reverse that vendor seed

566
00:26:55,750 --> 00:26:58,960
value because I was looking at where

567
00:26:56,980 --> 00:27:00,250
they were consumed for a while I also

568
00:26:58,960 --> 00:27:03,040
spend some time trying to find out

569
00:27:00,250 --> 00:27:05,260
exactly how they were there's no

570
00:27:03,040 --> 00:27:08,350
explicit replay attack that's available

571
00:27:05,260 --> 00:27:11,429
of just sniffing the the USB bus between

572
00:27:08,350 --> 00:27:14,020
the PC and the dongle like there are on

573
00:27:11,429 --> 00:27:16,480
some other very large manufacturers

574
00:27:14,020 --> 00:27:19,570
right so you can just create a virtual

575
00:27:16,480 --> 00:27:21,340
USB Drive and launch the application

576
00:27:19,570 --> 00:27:23,520
once and then you have a replay attack

577
00:27:21,340 --> 00:27:25,750
and you're done

578
00:27:23,520 --> 00:27:28,570
so yes Bennett spent a lot of other time

579
00:27:25,750 --> 00:27:31,630
on that um this should be reversible in

580
00:27:28,570 --> 00:27:32,860
in future work I'm probably mostly done

581
00:27:31,630 --> 00:27:36,220
with the eunich II but if you're

582
00:27:32,860 --> 00:27:38,199
interested it's it's just a random value

583
00:27:36,220 --> 00:27:43,059
based off of the current time and some

584
00:27:38,200 --> 00:27:47,320
other weird obfuscation so the

585
00:27:43,059 --> 00:27:50,520
conclusions running your crypto on

586
00:27:47,320 --> 00:27:53,139
someone else's machine doesn't work

587
00:27:50,520 --> 00:27:56,590
right it hasn't worked for like

588
00:27:53,140 --> 00:28:00,309
literally anybody it hasn't worked for

589
00:27:56,590 --> 00:28:03,189
the HDMI standard it didn't work with

590
00:28:00,309 --> 00:28:04,649
DVDs it hasn't worked with DRM systems

591
00:28:03,190 --> 00:28:09,780
up until now

592
00:28:04,650 --> 00:28:11,130
so you there there is a there is a drive

593
00:28:09,780 --> 00:28:12,930
from the upper levels of business

594
00:28:11,130 --> 00:28:14,430
especially those who may not be very

595
00:28:12,930 --> 00:28:17,430
familiar with the work it is that we're

596
00:28:14,430 --> 00:28:21,770
doing to try and get you to perform DRM

597
00:28:17,430 --> 00:28:24,650
and it's really hard to explain that

598
00:28:21,770 --> 00:28:26,850
somebody probably put more work into

599
00:28:24,650 --> 00:28:31,820
integrating the unit integrating the

600
00:28:26,850 --> 00:28:35,219
unity into their application to prevent

601
00:28:31,820 --> 00:28:38,909
things being stolen right than it did

602
00:28:35,220 --> 00:28:40,380
for me to crack it and that's you know

603
00:28:38,910 --> 00:28:42,840
that's just that that's a lot of wasted

604
00:28:40,380 --> 00:28:44,400
time on something that if there's a

605
00:28:42,840 --> 00:28:49,169
dedicated attacker who's attempting to

606
00:28:44,400 --> 00:28:52,380
do this they're just going to do so yeah

607
00:28:49,170 --> 00:28:55,980
DRM is hard offline DRM is even harder

608
00:28:52,380 --> 00:28:58,140
right because you control everything you

609
00:28:55,980 --> 00:29:00,059
control the full piece of this rig which

610
00:28:58,140 --> 00:29:02,940
is like with the other DRM systems I

611
00:29:00,059 --> 00:29:04,740
mean just replaying over a USB bus it's

612
00:29:02,940 --> 00:29:08,059
a lot harder to do when it's your server

613
00:29:04,740 --> 00:29:11,010
on the other side in your data center

614
00:29:08,059 --> 00:29:13,470
and I guess the last thing is don't use

615
00:29:11,010 --> 00:29:17,340
md5 most of you should know that already

616
00:29:13,470 --> 00:29:20,400
but just in case don't uh and especially

617
00:29:17,340 --> 00:29:22,590
you don't use it for key derivation and

618
00:29:20,400 --> 00:29:26,880
also don't use ECB mode that's just my

619
00:29:22,590 --> 00:29:32,370
my public service piece that does

620
00:29:26,880 --> 00:29:33,690
anybody have any questions now the

621
00:29:32,370 --> 00:29:40,320
question was are they still being sold

622
00:29:33,690 --> 00:29:43,559
yes they are now they're like $40 a pop

623
00:29:40,320 --> 00:29:45,178
or something like that and it they're

624
00:29:43,559 --> 00:29:46,678
not always explicitly branded as unique

625
00:29:45,179 --> 00:29:49,080
keys what are the things that they offer

626
00:29:46,679 --> 00:29:50,520
right is is rescanning them and and

627
00:29:49,080 --> 00:29:53,480
having your company's name on the

628
00:29:50,520 --> 00:29:53,480
outside of them and things like that

629
00:29:54,020 --> 00:30:02,970
why so the question was what motivated

630
00:29:59,910 --> 00:30:05,520
me to do this work the answer to that is

631
00:30:02,970 --> 00:30:08,250
that I had a push from higher levels of

632
00:30:05,520 --> 00:30:10,590
my organization to try and find out a

633
00:30:08,250 --> 00:30:13,410
DRM system that would protect our

634
00:30:10,590 --> 00:30:15,750
intellectual property and so part of

635
00:30:13,410 --> 00:30:17,190
that work is taking a vendor solution

636
00:30:15,750 --> 00:30:19,320
and finding out whether

637
00:30:17,190 --> 00:30:20,730
it's worth something right it's possible

638
00:30:19,320 --> 00:30:24,179
that some company out there is gonna

639
00:30:20,730 --> 00:30:25,860
finish figure out DRM right at some

640
00:30:24,180 --> 00:30:28,830
point that will probably be the case

641
00:30:25,860 --> 00:30:36,000
it's just not today and not with what we

642
00:30:28,830 --> 00:30:37,020
currently know about Krypton the

643
00:30:36,000 --> 00:30:42,000
question was do they have a bug bounty

644
00:30:37,020 --> 00:30:48,450
program no and this is really just the

645
00:30:42,000 --> 00:30:49,710
inherent design of their software I even

646
00:30:48,450 --> 00:30:51,390
if they wanted to fix this I'd really

647
00:30:49,710 --> 00:30:53,040
think that the only fix for them is to

648
00:30:51,390 --> 00:30:57,350
build a different product that would

649
00:30:53,040 --> 00:30:57,350
just be broken in some other way I

650
00:31:01,490 --> 00:31:07,500
haven't had any interactions at the

651
00:31:03,480 --> 00:31:10,320
bender I have not so this is essentially

652
00:31:07,500 --> 00:31:24,210
just a full disclosure of of these

653
00:31:10,320 --> 00:31:27,600
issues the question is uh could it have

654
00:31:24,210 --> 00:31:31,860
been harder to do yes it could have been

655
00:31:27,600 --> 00:31:33,030
harder um unfortunately right I imagine

656
00:31:31,860 --> 00:31:34,620
that their business requirements are

657
00:31:33,030 --> 00:31:36,090
that it needs to be remotely updatable

658
00:31:34,620 --> 00:31:39,449
and it needs to be remotely a payable

659
00:31:36,090 --> 00:31:41,250
offline right so could it have been

660
00:31:39,450 --> 00:31:43,230
harder to brute force that yeah

661
00:31:41,250 --> 00:31:46,110
absolutely it could have been you know

662
00:31:43,230 --> 00:31:48,090
pbkdf2 and ten thousand iterations right

663
00:31:46,110 --> 00:31:50,159
and it would still be running on my

664
00:31:48,090 --> 00:31:56,100
laptop from several months ago and my

665
00:31:50,160 --> 00:31:59,040
house would be a lot warmer but at the

666
00:31:56,100 --> 00:32:00,629
end of the day right it needs to be we

667
00:31:59,040 --> 00:32:02,940
need to talk about much larger values

668
00:32:00,630 --> 00:32:04,710
and that also for them probably means a

669
00:32:02,940 --> 00:32:07,160
more expensive microcontroller on the

670
00:32:04,710 --> 00:32:07,160
other end of it

671
00:32:12,510 --> 00:32:16,060
all right awesome thank you so much I

672
00:32:15,130 --> 00:32:21,810
really appreciate

673
00:32:16,060 --> 00:32:21,810
[Applause]

