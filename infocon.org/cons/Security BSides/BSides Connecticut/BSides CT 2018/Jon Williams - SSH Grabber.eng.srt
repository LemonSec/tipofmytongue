1
00:00:00,709 --> 00:00:08,460
hello everybody can you hear me sound

2
00:00:04,350 --> 00:00:09,920
good all right our emcee has stepped

3
00:00:08,460 --> 00:00:12,389
away so I'm going to introduce myself

4
00:00:09,920 --> 00:00:14,580
thanks for coming to my talk this is SSH

5
00:00:12,389 --> 00:00:16,680
grabber which is about a simple hack to

6
00:00:14,580 --> 00:00:20,850
sniff Linux passwords from a control

7
00:00:16,680 --> 00:00:22,710
host our agenda for today we're gonna do

8
00:00:20,850 --> 00:00:24,449
a very quick introduction we'll talk

9
00:00:22,710 --> 00:00:26,250
about the dependencies for the tool that

10
00:00:24,449 --> 00:00:28,680
I wrote and do a little overview about

11
00:00:26,250 --> 00:00:30,689
how it works from there we'll step

12
00:00:28,680 --> 00:00:34,079
through the code do a bit of code review

13
00:00:30,689 --> 00:00:35,610
see exactly how it does it's magic God's

14
00:00:34,079 --> 00:00:38,250
willing we'll have a live demo after

15
00:00:35,610 --> 00:00:41,460
that you can see how it actually works

16
00:00:38,250 --> 00:00:45,030
we'll talk about some limitations and

17
00:00:41,460 --> 00:00:47,579
criticisms of it after that and follow

18
00:00:45,030 --> 00:00:49,170
that up with a proof of concept see what

19
00:00:47,579 --> 00:00:50,640
where this tool would actually be useful

20
00:00:49,170 --> 00:00:52,289
we'll walk through some scenarios where

21
00:00:50,640 --> 00:00:55,289
you can actually put it into practice

22
00:00:52,289 --> 00:00:57,750
and we'll end with the tool release you

23
00:00:55,289 --> 00:01:01,699
can test it play with it see how it goes

24
00:00:57,750 --> 00:01:05,099
alright so without further ado Who am I

25
00:01:01,699 --> 00:01:06,600
my name is John I'm a network security

26
00:01:05,099 --> 00:01:09,199
engineer I work in the financial

27
00:01:06,600 --> 00:01:11,158
industry here in Connecticut my primary

28
00:01:09,200 --> 00:01:12,900
responsibilities are centered around

29
00:01:11,159 --> 00:01:16,590
Incident Response and Red Team

30
00:01:12,900 --> 00:01:19,049
operations I do have a sip I also got to

31
00:01:16,590 --> 00:01:20,549
test the the pen test Plus while it was

32
00:01:19,049 --> 00:01:24,330
in beta phase which was very interesting

33
00:01:20,549 --> 00:01:26,340
experience I tried the OS CP I failed

34
00:01:24,330 --> 00:01:29,640
the OS CP and I'm currently in the

35
00:01:26,340 --> 00:01:31,250
process of trying harder I've been a

36
00:01:29,640 --> 00:01:33,810
b-sides organizer for the last two years

37
00:01:31,250 --> 00:01:35,610
it's good fun you might see me up in the

38
00:01:33,810 --> 00:01:37,460
CTF room if you haven't yet come check

39
00:01:35,610 --> 00:01:39,930
it out is we're having a good time today

40
00:01:37,460 --> 00:01:42,089
I'm a security researcher on my own time

41
00:01:39,930 --> 00:01:44,820
I build a test I break I

42
00:01:42,090 --> 00:01:46,649
play a lot of CTF and according to hack

43
00:01:44,820 --> 00:01:48,740
the box I'm a pro hacker so it must be

44
00:01:46,649 --> 00:01:48,740
true

45
00:01:49,220 --> 00:01:53,610
dependencies so this tool is written in

46
00:01:52,049 --> 00:01:55,560
bash it's simple bash script and it's

47
00:01:53,610 --> 00:01:57,869
basically got two programs that it

48
00:01:55,560 --> 00:02:01,020
depends upon first one I bet you're all

49
00:01:57,869 --> 00:02:03,270
familiar with it's sshd right a little

50
00:02:01,020 --> 00:02:05,579
background on this tool SSH stands for

51
00:02:03,270 --> 00:02:08,190
secure shell it was designed to replace

52
00:02:05,579 --> 00:02:10,019
telnet which came before and the whole

53
00:02:08,190 --> 00:02:12,720
purpose of that tool was to allow remote

54
00:02:10,020 --> 00:02:13,620
administration of your servers right the

55
00:02:12,720 --> 00:02:16,379
telnet was never

56
00:02:13,620 --> 00:02:17,819
built for security everything all its

57
00:02:16,379 --> 00:02:19,640
authentication all its commands

58
00:02:17,819 --> 00:02:22,140
everything are transmitted in clear text

59
00:02:19,640 --> 00:02:23,339
which is a problem nowadays because if

60
00:02:22,140 --> 00:02:25,170
you're in the middle of the wire you can

61
00:02:23,340 --> 00:02:27,209
see everything going through you can

62
00:02:25,170 --> 00:02:30,958
capture credentials it's just terrible

63
00:02:27,209 --> 00:02:32,400
so they replaced it with SSH SSH does

64
00:02:30,959 --> 00:02:34,620
the same thing has the same basic

65
00:02:32,400 --> 00:02:36,690
functionality but it adds encryption

66
00:02:34,620 --> 00:02:38,280
from end to end on that connection so

67
00:02:36,690 --> 00:02:41,819
that you can administer your servers

68
00:02:38,280 --> 00:02:44,400
more securely uses TLS for that and it's

69
00:02:41,819 --> 00:02:46,230
designed to work with RSA keys so you've

70
00:02:44,400 --> 00:02:47,519
got a key pair for authentication which

71
00:02:46,230 --> 00:02:49,470
you can handoff securely using

72
00:02:47,519 --> 00:02:50,430
diffie-hellman and the whole thing is

73
00:02:49,470 --> 00:02:52,739
secured

74
00:02:50,430 --> 00:02:54,859
but it's flexible it doesn't just use

75
00:02:52,739 --> 00:02:57,750
keys it can also work with whatever

76
00:02:54,859 --> 00:02:59,519
authentication your OS is using so it

77
00:02:57,750 --> 00:03:00,959
can be local authentication or it can

78
00:02:59,519 --> 00:03:03,659
use Pam your pluggable authentication

79
00:03:00,959 --> 00:03:05,519
module so you can do LDAP or whatever

80
00:03:03,659 --> 00:03:08,970
else your system is designed to handle

81
00:03:05,519 --> 00:03:11,879
so it's great that way SSH is designed

82
00:03:08,970 --> 00:03:14,129
to be a client server system so on the

83
00:03:11,879 --> 00:03:16,319
server side you have sshd your daemon

84
00:03:14,129 --> 00:03:18,120
which is running listening for

85
00:03:16,319 --> 00:03:19,918
connections to come in on the client

86
00:03:18,120 --> 00:03:21,540
side you've got a small program as long

87
00:03:19,919 --> 00:03:23,579
as it's built to work with the protocol

88
00:03:21,540 --> 00:03:25,980
it can interact with the server and

89
00:03:23,579 --> 00:03:30,739
establish your connection okay

90
00:03:25,980 --> 00:03:35,220
pretty basic dependency number two is

91
00:03:30,739 --> 00:03:37,410
this trace ok system call tracer this

92
00:03:35,220 --> 00:03:39,780
program is designed to show interactions

93
00:03:37,410 --> 00:03:41,489
between a process and the kernel it's a

94
00:03:39,780 --> 00:03:43,199
simple debugger you often find it

95
00:03:41,489 --> 00:03:44,669
pre-installed on Linux systems it's

96
00:03:43,199 --> 00:03:46,230
great because it's super lightweight but

97
00:03:44,669 --> 00:03:49,650
it'll give you all kinds of visibility

98
00:03:46,230 --> 00:03:51,988
into process that you're running nice

99
00:03:49,650 --> 00:03:54,299
thing about s trace is that you can use

100
00:03:51,989 --> 00:03:56,519
it to spawn a process and then debug it

101
00:03:54,299 --> 00:03:58,290
from end to end or you can attach it to

102
00:03:56,519 --> 00:04:00,780
one that's already running which becomes

103
00:03:58,290 --> 00:04:04,500
very useful in this scenario normally

104
00:04:00,780 --> 00:04:06,269
SSH doesn't give you any way to view or

105
00:04:04,500 --> 00:04:08,879
log the credentials that it's capturing

106
00:04:06,269 --> 00:04:10,470
but you throw s trace into the mix and

107
00:04:08,879 --> 00:04:14,160
suddenly things get a little more

108
00:04:10,470 --> 00:04:16,199
interesting so here's a theory of how

109
00:04:14,160 --> 00:04:18,779
this tool works pretty simple honestly

110
00:04:16,199 --> 00:04:21,299
you have a server it's running SSH

111
00:04:18,779 --> 00:04:24,270
listening for connections you have a

112
00:04:21,298 --> 00:04:27,440
client initiates a connection to the

113
00:04:24,270 --> 00:04:29,940
server and the SSH daemon

114
00:04:27,440 --> 00:04:31,800
forks a process off of that and see it

115
00:04:29,940 --> 00:04:34,350
actually runs a separate child process

116
00:04:31,800 --> 00:04:36,270
for every connection that comes in which

117
00:04:34,350 --> 00:04:38,940
is great it can multitask it's well

118
00:04:36,270 --> 00:04:41,400
designed if you're running SSH grabber

119
00:04:38,940 --> 00:04:44,460
on your server it'll see that child fork

120
00:04:41,400 --> 00:04:46,080
off and it'll attach s trace to it so

121
00:04:44,460 --> 00:04:49,109
now we can start capturing what's coming

122
00:04:46,080 --> 00:04:52,349
in when the client sends its input to

123
00:04:49,110 --> 00:04:54,420
authenticate to the server s trace we'll

124
00:04:52,350 --> 00:04:57,360
see that coming in on the socket and

125
00:04:54,420 --> 00:04:59,070
calling to the kernel so now you have

126
00:04:57,360 --> 00:05:01,710
visibility into that authentication

127
00:04:59,070 --> 00:05:03,300
process as trace logs those kernel calls

128
00:05:01,710 --> 00:05:05,549
then all we have to do is parse the

129
00:05:03,300 --> 00:05:09,720
output and we can get the creds easy

130
00:05:05,550 --> 00:05:11,100
right so let's look at the code they're

131
00:05:09,720 --> 00:05:13,169
basically two parts to the way this

132
00:05:11,100 --> 00:05:15,780
script works first we find the right

133
00:05:13,169 --> 00:05:17,909
process to processes to attach s trace

134
00:05:15,780 --> 00:05:21,030
onto in the second part is we have to

135
00:05:17,910 --> 00:05:24,390
parse out the krint as I already

136
00:05:21,030 --> 00:05:26,669
mentioned SH sshd multitasks is creating

137
00:05:24,390 --> 00:05:28,110
new Forks every time somebody connects

138
00:05:26,669 --> 00:05:30,990
so we have to figure out how to attach

139
00:05:28,110 --> 00:05:33,479
to those so the first step here is

140
00:05:30,990 --> 00:05:36,180
simple we have a while loop that runs

141
00:05:33,479 --> 00:05:39,000
infinitely and it uses the PS utility to

142
00:05:36,180 --> 00:05:41,250
just monitor a process list in that list

143
00:05:39,000 --> 00:05:43,860
it's looking for two key words ssh and

144
00:05:41,250 --> 00:05:45,630
net Wynette because that's what we can

145
00:05:43,860 --> 00:05:48,210
use to distinguish between the parent

146
00:05:45,630 --> 00:05:50,850
process and the children it has both of

147
00:05:48,210 --> 00:05:52,890
those then we know it's a child once we

148
00:05:50,850 --> 00:05:55,500
spot that in the list we grab the

149
00:05:52,890 --> 00:05:59,849
process identifier and then we use the

150
00:05:55,500 --> 00:06:01,320
pin to attach s trace - it s trace has a

151
00:05:59,850 --> 00:06:02,729
lot of different options for it so it's

152
00:06:01,320 --> 00:06:04,080
important to make sure we're configuring

153
00:06:02,729 --> 00:06:06,510
it in a way that's efficient for our

154
00:06:04,080 --> 00:06:08,849
needs so have a look at the flags there

155
00:06:06,510 --> 00:06:10,409
first one we have Q which makes it quiet

156
00:06:08,850 --> 00:06:11,760
which means it's not gonna log anything

157
00:06:10,410 --> 00:06:13,140
that we don't care about you know

158
00:06:11,760 --> 00:06:15,000
telling us that it's attaching to a

159
00:06:13,140 --> 00:06:18,180
process it's only gonna give us the

160
00:06:15,000 --> 00:06:21,510
output the X flag is important because

161
00:06:18,180 --> 00:06:24,240
it makes the contents of the calls that

162
00:06:21,510 --> 00:06:26,969
it's logging B output in hexadecimal why

163
00:06:24,240 --> 00:06:28,710
is that important because the logs that

164
00:06:26,970 --> 00:06:32,040
come from s trace aren't really that

165
00:06:28,710 --> 00:06:33,479
nice and it they include brackets they

166
00:06:32,040 --> 00:06:34,860
include quotes they include other things

167
00:06:33,479 --> 00:06:36,840
and if you're manually parsing that

168
00:06:34,860 --> 00:06:39,240
output it can be hard to distinguish the

169
00:06:36,840 --> 00:06:40,710
contents of the call from the other

170
00:06:39,240 --> 00:06:42,990
stuff that's logged

171
00:06:40,710 --> 00:06:44,820
we put the contents in hexadecimal then

172
00:06:42,990 --> 00:06:48,150
it's really easy to extract it without

173
00:06:44,820 --> 00:06:50,400
messing up our parser the S flag here

174
00:06:48,150 --> 00:06:52,260
sets the size of our string buffer this

175
00:06:50,400 --> 00:06:54,810
again is important because s trace by

176
00:06:52,260 --> 00:06:57,180
default only captures 32 characters of

177
00:06:54,810 --> 00:06:58,200
whatever call it's bringing in and this

178
00:06:57,180 --> 00:06:59,280
screwed me up for a while when I was

179
00:06:58,200 --> 00:07:00,930
writing it because I couldn't figure out

180
00:06:59,280 --> 00:07:03,210
why I was only getting partial passwords

181
00:07:00,930 --> 00:07:04,800
logged out make that string buffer nice

182
00:07:03,210 --> 00:07:05,190
and long and you'll get whatever you

183
00:07:04,800 --> 00:07:06,570
need

184
00:07:05,190 --> 00:07:07,860
do you hundred fifty should be good if

185
00:07:06,570 --> 00:07:09,780
you're catching passwords longer than

186
00:07:07,860 --> 00:07:13,710
that feel free to you know bullet out

187
00:07:09,780 --> 00:07:16,140
the e call this is basically a filter

188
00:07:13,710 --> 00:07:18,239
for which calls s trace should care

189
00:07:16,140 --> 00:07:20,969
about in this case we really only care

190
00:07:18,240 --> 00:07:22,650
about rights and this is just you know

191
00:07:20,970 --> 00:07:25,650
from straight-up testing and watching

192
00:07:22,650 --> 00:07:27,840
how SSH does it's magic it turns out

193
00:07:25,650 --> 00:07:29,760
that all of the user input is being

194
00:07:27,840 --> 00:07:30,989
written to the kernel because of the

195
00:07:29,760 --> 00:07:32,580
socket it's being written to the socket

196
00:07:30,990 --> 00:07:34,650
and so that's how the kernel sees it so

197
00:07:32,580 --> 00:07:37,680
anything that's not a right call to the

198
00:07:34,650 --> 00:07:39,479
kernel we don't care about P flag tells

199
00:07:37,680 --> 00:07:42,420
us what process to attach to we already

200
00:07:39,480 --> 00:07:44,730
got the pig from above and then the O

201
00:07:42,420 --> 00:07:46,200
flag just sets the filename of the log

202
00:07:44,730 --> 00:07:47,820
that we're gonna store this data into

203
00:07:46,200 --> 00:07:49,800
and so what this means is for every

204
00:07:47,820 --> 00:07:51,750
child process that comes in its gonna be

205
00:07:49,800 --> 00:07:53,400
generating a separate log file and that

206
00:07:51,750 --> 00:07:56,780
log file will only have the information

207
00:07:53,400 --> 00:07:59,489
from that process so it's nice and clean

208
00:07:56,780 --> 00:08:01,679
the double and means that after the S

209
00:07:59,490 --> 00:08:03,210
trace process finishes and quits it'll

210
00:08:01,680 --> 00:08:04,920
move on to the next part which just

211
00:08:03,210 --> 00:08:07,620
passes the log file that was created

212
00:08:04,920 --> 00:08:09,510
into our parse Kranz function yeah nice

213
00:08:07,620 --> 00:08:11,370
and easy now some of you who are

214
00:08:09,510 --> 00:08:13,560
familiar with s trace might be asking

215
00:08:11,370 --> 00:08:16,050
the question why didn't you just use its

216
00:08:13,560 --> 00:08:17,700
built-in capability to follow Forks and

217
00:08:16,050 --> 00:08:19,770
that's a perfectly valid question

218
00:08:17,700 --> 00:08:22,349
because it can do that the reason why

219
00:08:19,770 --> 00:08:25,229
we're doing it this way is because if we

220
00:08:22,350 --> 00:08:26,790
use if we use the process to follow

221
00:08:25,230 --> 00:08:29,100
Forks automatically then there's only

222
00:08:26,790 --> 00:08:31,080
one s trace process running the whole

223
00:08:29,100 --> 00:08:33,180
time the script is running it never

224
00:08:31,080 --> 00:08:35,130
finishes which means we don't have an

225
00:08:33,179 --> 00:08:38,280
easy way to pipe its output to our

226
00:08:35,130 --> 00:08:39,960
parsing function so if we use even

227
00:08:38,280 --> 00:08:43,380
though this is a little bit less clean

228
00:08:39,960 --> 00:08:46,320
using PS to monitor manually for those

229
00:08:43,380 --> 00:08:49,110
processes allows us to pipe the output

230
00:08:46,320 --> 00:08:51,360
every time a session closes make sense

231
00:08:49,110 --> 00:08:52,800
and if somebody knows a better way to

232
00:08:51,360 --> 00:08:55,430
code this to me feel free to fork this

233
00:08:52,800 --> 00:08:55,430
in github and

234
00:08:55,880 --> 00:09:00,420
now here's a sample of what the output

235
00:08:58,410 --> 00:09:01,980
looks like coming from s trace and

236
00:09:00,420 --> 00:09:04,050
they're basically five components to

237
00:09:01,980 --> 00:09:05,250
this first we have the name of the call

238
00:09:04,050 --> 00:09:06,750
which in this case it's always going to

239
00:09:05,250 --> 00:09:08,880
be right because that's what we told it

240
00:09:06,750 --> 00:09:10,110
we only want to see writes that second

241
00:09:08,880 --> 00:09:12,270
thing the number that comes right after

242
00:09:10,110 --> 00:09:15,000
is the file descriptor the identifier of

243
00:09:12,270 --> 00:09:17,880
where the content is being written to

244
00:09:15,000 --> 00:09:20,100
which in this case is a socket and again

245
00:09:17,880 --> 00:09:23,130
it's for just because testing shows it

246
00:09:20,100 --> 00:09:24,630
always ends up being on for what we have

247
00:09:23,130 --> 00:09:26,640
in quotes after that is the actual

248
00:09:24,630 --> 00:09:30,540
content of the call which you can see is

249
00:09:26,640 --> 00:09:32,280
all in hexadecimal after that the number

250
00:09:30,540 --> 00:09:34,560
you see at the end is the length of the

251
00:09:32,280 --> 00:09:37,079
content and then the final thing after

252
00:09:34,560 --> 00:09:38,609
the equal sign is the result which ends

253
00:09:37,080 --> 00:09:41,970
up being the same the length of the

254
00:09:38,610 --> 00:09:43,470
content now anybody familiar enough with

255
00:09:41,970 --> 00:09:49,980
hexadecimal tell me what that actually

256
00:09:43,470 --> 00:09:52,020
says no yeah so first four but bits

257
00:09:49,980 --> 00:09:54,780
there are nothing there just metadata

258
00:09:52,020 --> 00:10:02,310
and the ones a fights sorry not bits the

259
00:09:54,780 --> 00:10:03,990
ones after that spell secret so that was

260
00:10:02,310 --> 00:10:06,660
part one part two is our parsing

261
00:10:03,990 --> 00:10:08,520
function right so each log is gonna be

262
00:10:06,660 --> 00:10:13,319
passed into this so we can try and get

263
00:10:08,520 --> 00:10:15,060
the creds out of it now the ssh process

264
00:10:13,320 --> 00:10:16,290
the way it works when you try and log in

265
00:10:15,060 --> 00:10:17,579
the first thing you do is you send it

266
00:10:16,290 --> 00:10:19,469
your username and then it'll prompt you

267
00:10:17,580 --> 00:10:20,730
for a password you can either pass the

268
00:10:19,470 --> 00:10:22,020
username on the command line or if you

269
00:10:20,730 --> 00:10:24,450
have a different client it'll prompt you

270
00:10:22,020 --> 00:10:26,880
when you connect but username goes first

271
00:10:24,450 --> 00:10:28,740
and then you have up to three tries to

272
00:10:26,880 --> 00:10:30,360
enter your password and if you don't get

273
00:10:28,740 --> 00:10:32,400
it by the third one then it just closes

274
00:10:30,360 --> 00:10:34,110
out so this is nice because it means

275
00:10:32,400 --> 00:10:37,520
that it'll close cleanly each time we

276
00:10:34,110 --> 00:10:40,170
have a distinction between our logs so

277
00:10:37,520 --> 00:10:42,569
we're gonna bring read the file in and

278
00:10:40,170 --> 00:10:45,060
go through it line by line and filter

279
00:10:42,570 --> 00:10:46,860
out the lines that we care about now in

280
00:10:45,060 --> 00:10:48,660
this case we already established file

281
00:10:46,860 --> 00:10:50,370
descriptor four is the one that's being

282
00:10:48,660 --> 00:10:53,010
used for user input so we only care

283
00:10:50,370 --> 00:10:54,360
about ones with that file descriptor the

284
00:10:53,010 --> 00:10:56,160
other thing we care about is the length

285
00:10:54,360 --> 00:10:58,350
in this case we want to make sure it's

286
00:10:56,160 --> 00:11:00,810
more than five characters long why five

287
00:10:58,350 --> 00:11:02,130
well for the first four we already

288
00:11:00,810 --> 00:11:03,869
established our metadata and this is

289
00:11:02,130 --> 00:11:06,330
just part of the protocol that SSH uses

290
00:11:03,870 --> 00:11:07,490
I don't know what they actually do but

291
00:11:06,330 --> 00:11:08,630
it doesn't matter because

292
00:11:07,490 --> 00:11:11,510
irrelevant to what we're doing we're

293
00:11:08,630 --> 00:11:11,930
just gonna skip those four but the fifth

294
00:11:11,510 --> 00:11:14,330
one

295
00:11:11,930 --> 00:11:16,459
there are also some control plane

296
00:11:14,330 --> 00:11:18,080
commands that are five characters long

297
00:11:16,459 --> 00:11:20,479
and so it turns out if you just ignore

298
00:11:18,080 --> 00:11:24,320
those ones then you you get your user

299
00:11:20,480 --> 00:11:25,940
input pretty reliably so this won't work

300
00:11:24,320 --> 00:11:27,380
if you're only capturing a password

301
00:11:25,940 --> 00:11:29,750
that's one character long because it's

302
00:11:27,380 --> 00:11:31,310
gonna ignore it but if that's your

303
00:11:29,750 --> 00:11:35,810
target then you really don't need this

304
00:11:31,310 --> 00:11:37,640
script so now we've narrowed it down so

305
00:11:35,810 --> 00:11:39,560
we can extract the content from it which

306
00:11:37,640 --> 00:11:41,779
is in hex we're gonna drop the first

307
00:11:39,560 --> 00:11:43,399
four characters off of it and then we'll

308
00:11:41,779 --> 00:11:45,500
do one more check for filtering right

309
00:11:43,399 --> 00:11:46,730
we're going to check for null bytes the

310
00:11:45,500 --> 00:11:48,440
reason for that of course is that if

311
00:11:46,730 --> 00:11:50,089
you're sending user input to a service

312
00:11:48,440 --> 00:11:52,040
there should not be any null characters

313
00:11:50,089 --> 00:11:54,529
and if there are then you've got other

314
00:11:52,040 --> 00:11:57,020
issues going on in your network but in

315
00:11:54,529 --> 00:11:58,610
this case it means if you find a null

316
00:11:57,020 --> 00:12:01,430
byte it means that there's another

317
00:11:58,610 --> 00:12:04,040
control plane you know command going

318
00:12:01,430 --> 00:12:06,770
through so we ignore all of those and

319
00:12:04,040 --> 00:12:10,219
what's left should be up to four strings

320
00:12:06,770 --> 00:12:11,779
so we convert them to ASCII last bit is

321
00:12:10,220 --> 00:12:14,600
just to differentiate between the

322
00:12:11,779 --> 00:12:16,279
username and the passwords which I said

323
00:12:14,600 --> 00:12:18,620
before is as simple as is it the first

324
00:12:16,279 --> 00:12:21,110
one then it's the user name if it's not

325
00:12:18,620 --> 00:12:24,620
then it's a password so we get those all

326
00:12:21,110 --> 00:12:26,060
set up and that's it that's the body of

327
00:12:24,620 --> 00:12:27,890
the script right there

328
00:12:26,060 --> 00:12:29,329
the actual script has a little bit more

329
00:12:27,890 --> 00:12:31,250
because I have to close the loops and

330
00:12:29,329 --> 00:12:32,239
increment counters I also have some code

331
00:12:31,250 --> 00:12:34,250
at the beginning that checks your

332
00:12:32,240 --> 00:12:35,930
dependencies before you run it to make

333
00:12:34,250 --> 00:12:38,060
sure that everything's in line but

334
00:12:35,930 --> 00:12:41,630
otherwise that's it dead simple all

335
00:12:38,060 --> 00:12:44,209
right now it's demo time if anybody

336
00:12:41,630 --> 00:12:46,640
wants to fire up sh and hit that IP

337
00:12:44,209 --> 00:12:48,680
address just give me one quick second so

338
00:12:46,640 --> 00:12:53,350
I can actually start the process that's

339
00:12:48,680 --> 00:12:53,349
listening and you can see it in action

340
00:13:01,940 --> 00:13:06,120
here we go

341
00:13:03,620 --> 00:13:08,550
you can see what I've done is I started

342
00:13:06,120 --> 00:13:10,560
SSH and then I started SSH grabber and

343
00:13:08,550 --> 00:13:12,359
if anybody tries to authenticate right

344
00:13:10,560 --> 00:13:15,900
now you should see the username and

345
00:13:12,360 --> 00:13:18,770
password drop in if nobody does it

346
00:13:15,900 --> 00:13:18,770
quickly I'll do it myself

347
00:13:29,769 --> 00:13:35,139
they won't drop until the session closes

348
00:13:32,550 --> 00:13:36,969
if you've failed three times it won't

349
00:13:35,139 --> 00:13:47,230
show up until you actually finish the

350
00:13:36,970 --> 00:13:51,069
last one see what it yep

351
00:13:47,230 --> 00:13:52,600
all right well there's mine

352
00:13:51,069 --> 00:13:55,299
oh no that's not mine somebody else got

353
00:13:52,600 --> 00:13:58,379
one in there so there you go that's the

354
00:13:55,299 --> 00:14:06,040
tool it shows you what's going on there

355
00:13:58,379 --> 00:14:11,920
now if I cancel this if it'll let me

356
00:14:06,040 --> 00:14:13,839
somebody must have a session open let's

357
00:14:11,920 --> 00:14:16,899
get that part I was just gonna show that

358
00:14:13,839 --> 00:14:18,699
it also it will log him to a file too so

359
00:14:16,899 --> 00:14:21,220
you can go back and just dump the log to

360
00:14:18,699 --> 00:14:33,819
see all your creds later on so that's

361
00:14:21,220 --> 00:14:34,990
the tool and so let's think about that

362
00:14:33,819 --> 00:14:37,240
for a minute that's handy it's very

363
00:14:34,990 --> 00:14:38,649
simple does something very obvious but

364
00:14:37,240 --> 00:14:40,839
there are some problems with it right

365
00:14:38,649 --> 00:14:42,720
don't you need root in the first place

366
00:14:40,839 --> 00:14:45,459
to be able to run as trace on the box

367
00:14:42,720 --> 00:14:46,899
okay I mean if you have root already you

368
00:14:45,459 --> 00:14:48,910
can dump the password hashes you can

369
00:14:46,899 --> 00:14:51,339
change passwords so who cares why does

370
00:14:48,910 --> 00:14:53,079
this even matter right also if you're

371
00:14:51,339 --> 00:14:55,360
attacking a box and you compromised the

372
00:14:53,079 --> 00:14:57,489
box maybe it doesn't even have s Tracey

373
00:14:55,360 --> 00:14:58,689
installed like so what do you do that

374
00:14:57,490 --> 00:14:59,829
and I mean what if you don't want to

375
00:14:58,689 --> 00:15:02,920
install it because you're gonna trip

376
00:14:59,829 --> 00:15:04,989
somebody's alarm also as we pointed out

377
00:15:02,920 --> 00:15:07,269
earlier this only works for passwords

378
00:15:04,990 --> 00:15:08,589
right if you're using RSA keys to do

379
00:15:07,269 --> 00:15:09,759
your authentication this isn't going to

380
00:15:08,589 --> 00:15:11,559
help you because it won't capture the

381
00:15:09,759 --> 00:15:13,029
keys they're never actually transmitted

382
00:15:11,559 --> 00:15:16,719
to the server that's the way it's

383
00:15:13,029 --> 00:15:18,279
designed to work so okay oops these are

384
00:15:16,720 --> 00:15:23,199
all really valid points right these are

385
00:15:18,279 --> 00:15:25,209
limitations of the script so when is it

386
00:15:23,199 --> 00:15:26,949
actually useful I mean the obvious case

387
00:15:25,209 --> 00:15:28,868
of course is if you compromise a box and

388
00:15:26,949 --> 00:15:31,179
it does have s Trace installed then

389
00:15:28,869 --> 00:15:33,189
you're golden right also if you can

390
00:15:31,179 --> 00:15:35,350
install it it's just a simple apt-get to

391
00:15:33,189 --> 00:15:36,610
get it on the box and if depending on

392
00:15:35,350 --> 00:15:39,579
your environment that may not be a

393
00:15:36,610 --> 00:15:41,049
problem but consider this like what if

394
00:15:39,579 --> 00:15:42,910
you have a transient compromised so

395
00:15:41,049 --> 00:15:43,329
you've gotten in through a web server or

396
00:15:42,910 --> 00:15:44,559
so

397
00:15:43,329 --> 00:15:46,059
thing else and you've elevated your

398
00:15:44,559 --> 00:15:48,129
privileges to route you don't actually

399
00:15:46,059 --> 00:15:50,199
have the password you want to get it so

400
00:15:48,129 --> 00:15:52,480
that you have easier access to the box

401
00:15:50,199 --> 00:15:54,488
you don't password hashes but you can't

402
00:15:52,480 --> 00:15:56,019
seem to crack it if you can get this on

403
00:15:54,489 --> 00:15:57,100
there you can sit and wait and see if

404
00:15:56,019 --> 00:16:00,989
they log in and then you'll actually

405
00:15:57,100 --> 00:16:02,889
have the password and clear text also

406
00:16:00,989 --> 00:16:05,860
consider scenario where they're using

407
00:16:02,889 --> 00:16:07,509
Pam instead of local authentication if

408
00:16:05,860 --> 00:16:10,239
they're connected to LDAP or even better

409
00:16:07,509 --> 00:16:12,129
if they're in a Windows domain then all

410
00:16:10,239 --> 00:16:14,319
the users that are logging into this box

411
00:16:12,129 --> 00:16:15,939
are not saving their credentials locally

412
00:16:14,319 --> 00:16:18,189
you wouldn't have any way to get it from

413
00:16:15,939 --> 00:16:19,599
the box directly so if you have this

414
00:16:18,189 --> 00:16:20,829
sitting there running suddenly you can

415
00:16:19,600 --> 00:16:22,809
start grabbing credentials off the

416
00:16:20,829 --> 00:16:25,420
network this is getting a little more

417
00:16:22,809 --> 00:16:28,420
interesting what if the host is a

418
00:16:25,420 --> 00:16:29,889
bastion what if this is the box that

419
00:16:28,420 --> 00:16:31,839
sits on the edge of network that grants

420
00:16:29,889 --> 00:16:32,980
everybody access into the network and

421
00:16:31,839 --> 00:16:34,959
they have to go through as at stage

422
00:16:32,980 --> 00:16:38,259
suddenly this is starting to look a

423
00:16:34,959 --> 00:16:40,719
little more compelling right now proof

424
00:16:38,259 --> 00:16:42,610
of concept right even better is when you

425
00:16:40,720 --> 00:16:46,809
actually own the box so consider this

426
00:16:42,610 --> 00:16:48,850
take a Raspberry Pi install SSH and SSH

427
00:16:46,809 --> 00:16:50,559
grabber on it and then drop it into

428
00:16:48,850 --> 00:16:51,129
network so now you got a rogue host

429
00:16:50,559 --> 00:16:53,829
right

430
00:16:51,129 --> 00:16:55,899
along comes a spider spider is your

431
00:16:53,829 --> 00:16:57,160
asset inventory okay this is your

432
00:16:55,899 --> 00:16:59,019
process on the network that's going

433
00:16:57,160 --> 00:17:00,999
around interrogating every box to make

434
00:16:59,019 --> 00:17:03,850
sure it actually belongs there all right

435
00:17:00,999 --> 00:17:06,339
it's an AK network access control now

436
00:17:03,850 --> 00:17:08,110
how do these work with Linux typically

437
00:17:06,339 --> 00:17:10,599
at least in my experience they tend to

438
00:17:08,109 --> 00:17:12,458
try and authenticate over SSH if they

439
00:17:10,599 --> 00:17:15,339
can log in then they know who you are

440
00:17:12,459 --> 00:17:17,529
and if they'll either accept that as

441
00:17:15,339 --> 00:17:19,269
proof that you belong there or they'll

442
00:17:17,529 --> 00:17:22,480
go on to interrogate you once they have

443
00:17:19,269 --> 00:17:24,699
an authenticated account so this box

444
00:17:22,480 --> 00:17:28,200
logs in suddenly now you've grabbed the

445
00:17:24,699 --> 00:17:30,909
credentials from the neck not bad and

446
00:17:28,200 --> 00:17:33,399
what else have you learned from it you

447
00:17:30,909 --> 00:17:34,570
know the IP address now you've got

448
00:17:33,399 --> 00:17:36,729
enough information that you can

449
00:17:34,570 --> 00:17:39,309
impersonate the nak you know the address

450
00:17:36,730 --> 00:17:41,350
you know the credentials and let me just

451
00:17:39,309 --> 00:17:43,570
ask a question but how many of you work

452
00:17:41,350 --> 00:17:48,340
in companies where the service accounts

453
00:17:43,570 --> 00:17:49,860
are reused and over privileged yeah I

454
00:17:48,340 --> 00:17:52,299
thought so

455
00:17:49,860 --> 00:17:53,830
so chances are if your nak is using

456
00:17:52,299 --> 00:17:56,350
password authentication in the first

457
00:17:53,830 --> 00:17:57,199
place instead of RSA keys like it should

458
00:17:56,350 --> 00:17:58,610
do

459
00:17:57,200 --> 00:18:00,619
you've probably just landed some

460
00:17:58,610 --> 00:18:03,289
accounts that have serious privilege in

461
00:18:00,619 --> 00:18:10,418
the network so now it's time to do your

462
00:18:03,289 --> 00:18:13,399
own spidering right now you've got a PI

463
00:18:10,419 --> 00:18:15,200
that can traverse the network log into

464
00:18:13,399 --> 00:18:17,869
just about anything or at least anything

465
00:18:15,200 --> 00:18:20,299
that's configured with SSH and get in

466
00:18:17,869 --> 00:18:23,928
with likely some pretty decent privilege

467
00:18:20,299 --> 00:18:25,429
this could all be automated right with

468
00:18:23,929 --> 00:18:27,169
SSH grabber at the middle doing the

469
00:18:25,429 --> 00:18:29,440
credentials you can easily build this

470
00:18:27,169 --> 00:18:32,509
out to do the whole attack stream

471
00:18:29,440 --> 00:18:33,889
automatically and if you add an

472
00:18:32,509 --> 00:18:35,989
out-of-band communication channel

473
00:18:33,889 --> 00:18:37,668
suddenly now you got a walking talking

474
00:18:35,989 --> 00:18:42,889
laterally hopping now we're getting

475
00:18:37,669 --> 00:18:44,929
behemoth so go get the creds and of

476
00:18:42,889 --> 00:18:49,908
course if you're on blue team it makes a

477
00:18:44,929 --> 00:18:52,639
really nice honeypot so that's it tools

478
00:18:49,909 --> 00:19:08,239
on github go check it out I hope you

479
00:18:52,639 --> 00:19:10,789
like the talk any questions yes sure you

480
00:19:08,239 --> 00:19:12,710
could yes in fact I think some of the

481
00:19:10,789 --> 00:19:14,419
when I was doing research for this I'm

482
00:19:12,710 --> 00:19:16,460
pretty sure some people have played with

483
00:19:14,419 --> 00:19:18,200
that I hadn't seen them try and do it

484
00:19:16,460 --> 00:19:19,759
this way through s trace but Pam modules

485
00:19:18,200 --> 00:19:27,980
you might have a starting point to work

486
00:19:19,759 --> 00:19:29,870
with anyone else well thank you very

487
00:19:27,980 --> 00:19:33,240
much

488
00:19:29,870 --> 00:19:33,239
[Applause]

