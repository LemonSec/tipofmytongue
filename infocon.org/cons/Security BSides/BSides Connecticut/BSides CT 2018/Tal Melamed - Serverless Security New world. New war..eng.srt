1
00:00:00,060 --> 00:00:03,600
all right thank you everyone for coming

2
00:00:01,199 --> 00:00:07,319
to besides hope everyone enjoyed the

3
00:00:03,600 --> 00:00:10,260
lunch and and and saw John's tool there

4
00:00:07,319 --> 00:00:11,400
the SSH grabber that's pretty fancy but

5
00:00:10,260 --> 00:00:13,200
I would like to introduce our next

6
00:00:11,400 --> 00:00:15,089
speaker we are getting started a couple

7
00:00:13,200 --> 00:00:17,549
minutes early but that's okay

8
00:00:15,089 --> 00:00:19,590
his name is tal Muhammad and he's the

9
00:00:17,550 --> 00:00:24,900
director of security research proteger

10
00:00:19,590 --> 00:00:29,448
so welcome thank you thanks ed one you

11
00:00:24,900 --> 00:00:29,448
hear me all right

12
00:00:29,510 --> 00:00:37,739
okay so hi everyone thanks for coming

13
00:00:32,520 --> 00:00:41,010
my name is tal um I just moved to the to

14
00:00:37,739 --> 00:00:45,500
Connecticut from Israel and Italy I did

15
00:00:41,010 --> 00:00:48,000
around so I've been in the israelian

16
00:00:45,500 --> 00:00:50,219
cyber security industry for a while

17
00:00:48,000 --> 00:00:54,570
worked for companies like ours a

18
00:00:50,219 --> 00:00:56,430
checkpoint app six in AK and more

19
00:00:54,570 --> 00:00:59,670
recently I just moved to New Haven

20
00:00:56,430 --> 00:01:04,949
Connecticut so the weather is different

21
00:00:59,670 --> 00:01:08,790
so I got cold and thanks for having me

22
00:01:04,949 --> 00:01:12,090
nice seeing all the Connecticut security

23
00:01:08,790 --> 00:01:15,630
scene here so I specialize in

24
00:01:12,090 --> 00:01:17,820
application security started 15 years

25
00:01:15,630 --> 00:01:21,000
ago with web application moved to client

26
00:01:17,820 --> 00:01:23,490
mobile IOT and our server list but what

27
00:01:21,000 --> 00:01:26,070
is service we'll see in a second if you

28
00:01:23,490 --> 00:01:29,729
would like to follow me pretty active on

29
00:01:26,070 --> 00:01:32,699
the social media currently I'm the

30
00:01:29,729 --> 00:01:34,320
director of security research company at

31
00:01:32,700 --> 00:01:38,070
a company called fatigue elapsed or

32
00:01:34,320 --> 00:01:41,279
pretty go we're we're a service security

33
00:01:38,070 --> 00:01:46,500
company startup based in Jerusalem

34
00:01:41,280 --> 00:01:50,159
Israel and we have a service security

35
00:01:46,500 --> 00:01:51,780
solution won't show the the product but

36
00:01:50,159 --> 00:01:53,689
we'll see we'll talk about it in a

37
00:01:51,780 --> 00:01:57,030
second

38
00:01:53,689 --> 00:02:01,408
right so let's start with what the hell

39
00:01:57,030 --> 00:02:06,329
is service does anyone here heard about

40
00:02:01,409 --> 00:02:08,520
serverless one ok that's about what I

41
00:02:06,329 --> 00:02:12,510
thought so pretty much no one knows what

42
00:02:08,520 --> 00:02:13,120
service is so any of you actually wrote

43
00:02:12,510 --> 00:02:15,989
like

44
00:02:13,120 --> 00:02:21,159
lambda function or something like that

45
00:02:15,989 --> 00:02:24,640
okay yeah we have a winner so as you see

46
00:02:21,159 --> 00:02:25,810
no one really knows it I'll start by

47
00:02:24,640 --> 00:02:29,018
explaining what it means

48
00:02:25,810 --> 00:02:31,709
so if back on the 90s or even before

49
00:02:29,019 --> 00:02:34,750
that we were we started with on premise

50
00:02:31,709 --> 00:02:38,409
application where it took everything and

51
00:02:34,750 --> 00:02:41,560
had it on the site then we move on I

52
00:02:38,409 --> 00:02:45,310
won't go through all of them you all

53
00:02:41,560 --> 00:02:47,349
know that I'll make a stop a quick stop

54
00:02:45,310 --> 00:02:50,799
on the containers where everybody heard

55
00:02:47,349 --> 00:02:54,040
of and see that when we moved to

56
00:02:50,799 --> 00:02:56,709
containers we were we we could eliminate

57
00:02:54,040 --> 00:02:58,989
all the need to control operation

58
00:02:56,709 --> 00:03:00,849
systems and virtualization and

59
00:02:58,989 --> 00:03:02,680
provisioning and of course the networks

60
00:03:00,849 --> 00:03:05,018
in the service okay

61
00:03:02,680 --> 00:03:08,200
came in that box called Sur container

62
00:03:05,019 --> 00:03:10,690
but we needed to we still need to patch

63
00:03:08,200 --> 00:03:13,390
it to set it up to see what's inside you

64
00:03:10,690 --> 00:03:16,090
know how to scale it and it's still a

65
00:03:13,390 --> 00:03:19,958
lot of DevOps or a lot of operations and

66
00:03:16,090 --> 00:03:21,970
also security so we moved to server less

67
00:03:19,959 --> 00:03:28,090
which is kind of new just introduced

68
00:03:21,970 --> 00:03:31,090
first in 2016 by AWS we've been we got a

69
00:03:28,090 --> 00:03:33,209
technology that allows us to write code

70
00:03:31,090 --> 00:03:38,109
and that's it maybe just a few

71
00:03:33,209 --> 00:03:39,730
configuration requirements so how many

72
00:03:38,109 --> 00:03:42,510
memory do you want for the function

73
00:03:39,730 --> 00:03:47,649
etcetera but that's it so it allows

74
00:03:42,510 --> 00:03:51,069
companies especially startups to that

75
00:03:47,650 --> 00:03:53,769
has an idea to come right up write code

76
00:03:51,069 --> 00:03:57,238
or their application logic and have it

77
00:03:53,769 --> 00:04:01,389
launched in a few few days not having to

78
00:03:57,239 --> 00:04:03,430
to deal with anything related to

79
00:04:01,389 --> 00:04:05,410
scalability monitoring fetching or

80
00:04:03,430 --> 00:04:07,810
anything like that so that cloud

81
00:04:05,410 --> 00:04:10,090
providers already take care of that oh

82
00:04:07,810 --> 00:04:13,720
you can do all you need to do is write

83
00:04:10,090 --> 00:04:16,478
your code okay what is service who are

84
00:04:13,720 --> 00:04:19,060
the the providers so all the big

85
00:04:16,478 --> 00:04:22,659
companies this is why we know it's it's

86
00:04:19,060 --> 00:04:25,690
a thing because as your AWS Google stop

87
00:04:22,659 --> 00:04:26,590
just joined IBM with open whisk and some

88
00:04:25,690 --> 00:04:29,380
other companies now

89
00:04:26,590 --> 00:04:31,330
allow that so they are the

90
00:04:29,380 --> 00:04:35,139
infrastructure providers and they have

91
00:04:31,330 --> 00:04:38,289
their console or their api's to just

92
00:04:35,139 --> 00:04:43,320
come up write function write codes code

93
00:04:38,290 --> 00:04:45,850
and launch your application or are the

94
00:04:43,320 --> 00:04:47,919
early adapters or the first adapters of

95
00:04:45,850 --> 00:04:51,610
the technology so we have some big

96
00:04:47,919 --> 00:04:54,940
companies so Netflix it's very strong on

97
00:04:51,610 --> 00:05:00,210
that Expedia with other sub companies

98
00:04:54,940 --> 00:05:04,270
also bank one of the biggest coca-cola

99
00:05:00,210 --> 00:05:06,880
iRobot the zone and some more big

100
00:05:04,270 --> 00:05:08,859
companies that you see that it's a

101
00:05:06,880 --> 00:05:10,630
little tough to move I mean there are a

102
00:05:08,860 --> 00:05:12,760
lot of startups so it's starting with

103
00:05:10,630 --> 00:05:14,950
that because it's easier to just start

104
00:05:12,760 --> 00:05:17,110
with it but there it's it's a little

105
00:05:14,950 --> 00:05:18,610
tougher transition to move to serve

106
00:05:17,110 --> 00:05:21,550
others because you already have your

107
00:05:18,610 --> 00:05:24,970
servers you need to refine your code and

108
00:05:21,550 --> 00:05:26,440
do some changes around that but there

109
00:05:24,970 --> 00:05:30,400
are some big companies are doing that

110
00:05:26,440 --> 00:05:35,350
also this is also how we see that it

111
00:05:30,400 --> 00:05:44,190
goes further so this is how this is a

112
00:05:35,350 --> 00:05:52,210
Google Trends graph again ok so if we

113
00:05:44,190 --> 00:05:56,349
start back then in 2016 has a graph that

114
00:05:52,210 --> 00:05:58,330
goes up but like always even if it's a

115
00:05:56,349 --> 00:06:00,940
new technology as and we thought that we

116
00:05:58,330 --> 00:06:04,450
have we've learned in from birth best

117
00:06:00,940 --> 00:06:13,130
experience I'll just type sorry sir

118
00:06:04,450 --> 00:06:16,070
server less security right so right

119
00:06:13,130 --> 00:06:18,850
no one and probably that is me doing

120
00:06:16,070 --> 00:06:22,969
that the research or something like that

121
00:06:18,850 --> 00:06:26,330
to here right but just to make you

122
00:06:22,970 --> 00:06:28,370
understand how News Service and what are

123
00:06:26,330 --> 00:06:31,250
we doing here I'll just write docker

124
00:06:28,370 --> 00:06:36,100
here so like the biggest container thing

125
00:06:31,250 --> 00:06:39,470
and we'll get thing in perspective right

126
00:06:36,100 --> 00:06:44,270
so containers right everyone goes with

127
00:06:39,470 --> 00:06:47,180
containers we just started so we see us

128
00:06:44,270 --> 00:06:50,210
as ahead of a curve this is what we also

129
00:06:47,180 --> 00:06:53,510
sorry what we see from customers and

130
00:06:50,210 --> 00:06:54,440
people that would need so would use

131
00:06:53,510 --> 00:06:57,890
serverless

132
00:06:54,440 --> 00:06:59,270
in general they're just experiencing

133
00:06:57,890 --> 00:07:01,340
with it there are there are some

134
00:06:59,270 --> 00:07:04,070
companies as I showed that are already

135
00:07:01,340 --> 00:07:06,890
all in but most of them are just

136
00:07:04,070 --> 00:07:09,469
experiencing with technology thinking

137
00:07:06,890 --> 00:07:11,960
about moving it eventually but they're

138
00:07:09,470 --> 00:07:13,730
you're starting with a small project and

139
00:07:11,960 --> 00:07:16,159
see how it goes okay

140
00:07:13,730 --> 00:07:19,040
so what are the service basics why move

141
00:07:16,160 --> 00:07:21,470
to service so part from what I already

142
00:07:19,040 --> 00:07:24,860
told you so the interest on

143
00:07:21,470 --> 00:07:27,230
infrastructure scales for zero you don't

144
00:07:24,860 --> 00:07:29,420
have to deal with anything right so

145
00:07:27,230 --> 00:07:31,330
everything the infrastructure is built

146
00:07:29,420 --> 00:07:36,050
in you just need to know how to use it

147
00:07:31,330 --> 00:07:38,000
also one of the service basics that you

148
00:07:36,050 --> 00:07:39,890
pay only for what you use so you can

149
00:07:38,000 --> 00:07:42,860
write up an application up and running

150
00:07:39,890 --> 00:07:45,500
and if no one ever uses that you don't

151
00:07:42,860 --> 00:07:47,450
per think you pay only for the

152
00:07:45,500 --> 00:07:50,270
invocations of your application so we

153
00:07:47,450 --> 00:07:51,800
started start suddenly there is some

154
00:07:50,270 --> 00:07:53,870
traffic into your application you pay a

155
00:07:51,800 --> 00:07:57,170
few cents for every call and when it

156
00:07:53,870 --> 00:08:00,080
goes higher you probably start seeing

157
00:07:57,170 --> 00:08:03,650
more of your payment increases but also

158
00:08:00,080 --> 00:08:09,229
your application traffic and this is how

159
00:08:03,650 --> 00:08:13,880
how it works with service ok so the

160
00:08:09,230 --> 00:08:15,860
architecture as I mentioned times so you

161
00:08:13,880 --> 00:08:19,159
actually go and write functions

162
00:08:15,860 --> 00:08:21,770
functions like functions like code but

163
00:08:19,160 --> 00:08:24,470
there are called functions because each

164
00:08:21,770 --> 00:08:26,469
of them is supposed or the architecture

165
00:08:24,470 --> 00:08:28,439
allows you to

166
00:08:26,469 --> 00:08:31,090
it's intended for sorry intended for

167
00:08:28,439 --> 00:08:33,849
microservices that means that you go and

168
00:08:31,090 --> 00:08:37,149
you write simple codes on each of the

169
00:08:33,849 --> 00:08:39,459
functions so also functions can only run

170
00:08:37,149 --> 00:08:41,708
for up to 15 minutes or 5 minutes or

171
00:08:39,458 --> 00:08:43,779
depends on the under infrastructure so

172
00:08:41,708 --> 00:08:45,670
you write a short code that this is the

173
00:08:43,779 --> 00:08:47,170
specific of what this function needs to

174
00:08:45,670 --> 00:08:49,300
do and then you start building your

175
00:08:47,170 --> 00:08:52,389
application with hundreds I'm sorry

176
00:08:49,300 --> 00:08:54,250
Thanks hundreds of functions and

177
00:08:52,389 --> 00:08:56,709
services and resources it's not only

178
00:08:54,250 --> 00:09:01,449
functions - you can use databases cloud

179
00:08:56,709 --> 00:09:04,000
storage etc and just I'll mention it's

180
00:09:01,449 --> 00:09:07,000
called maybe you heard of it it's called

181
00:09:04,000 --> 00:09:08,829
ephemeral and stateless you probably

182
00:09:07,000 --> 00:09:12,519
heard of it because each function when

183
00:09:08,829 --> 00:09:15,699
it goes up or when it runs it has no

184
00:09:12,519 --> 00:09:18,399
notion of what's going on besides yeah

185
00:09:15,699 --> 00:09:20,829
on the on the application level so it it

186
00:09:18,399 --> 00:09:23,410
is really stateless it knows nothing

187
00:09:20,829 --> 00:09:26,109
about nothing it just runs do this does

188
00:09:23,410 --> 00:09:29,620
it job and then dies so the ephemeral

189
00:09:26,110 --> 00:09:32,740
means that when the function or the code

190
00:09:29,620 --> 00:09:35,860
finishes to execute it just dies and the

191
00:09:32,740 --> 00:09:37,209
container that was loading this function

192
00:09:35,860 --> 00:09:38,980
so you don't have to deal with these

193
00:09:37,209 --> 00:09:41,160
containers it's managed by the called

194
00:09:38,980 --> 00:09:44,920
provider but it dies with it

195
00:09:41,160 --> 00:09:46,689
so there is no after function before

196
00:09:44,920 --> 00:09:50,290
function is just the function what it

197
00:09:46,690 --> 00:09:53,620
does and that's it and the operation

198
00:09:50,290 --> 00:09:55,000
also is a one of the reasons that people

199
00:09:53,620 --> 00:09:58,089
move there the companies move there

200
00:09:55,000 --> 00:10:01,480
because it really minimizes the DevOps

201
00:09:58,089 --> 00:10:05,800
and we will talk more about this

202
00:10:01,480 --> 00:10:08,350
security aspect of it but it's imagine

203
00:10:05,800 --> 00:10:10,329
that the you don't have to have to deal

204
00:10:08,350 --> 00:10:12,970
with anything related to infrastructure

205
00:10:10,329 --> 00:10:17,229
so that gives you a very high velocity

206
00:10:12,970 --> 00:10:22,600
of your development ok why does security

207
00:10:17,230 --> 00:10:24,790
here any different will we read about it

208
00:10:22,600 --> 00:10:28,269
and we'll talk about in a few seconds so

209
00:10:24,790 --> 00:10:31,540
let's do a quick gap analysis right so

210
00:10:28,269 --> 00:10:33,970
what are the cons there are no servers

211
00:10:31,540 --> 00:10:36,540
so now I'm talking security right I just

212
00:10:33,970 --> 00:10:39,640
moved from what in service to security

213
00:10:36,540 --> 00:10:42,280
there is no there are no servers so

214
00:10:39,640 --> 00:10:44,650
where do we deploy things right we want

215
00:10:42,280 --> 00:10:46,959
monitor the network we want to scan it

216
00:10:44,650 --> 00:10:49,780
we want to put a firewall we want to put

217
00:10:46,960 --> 00:10:52,570
an IPS IDs whatever we want where do we

218
00:10:49,780 --> 00:10:56,949
put it we can't because it's not ours so

219
00:10:52,570 --> 00:11:01,330
this is this is a kind of a con no

220
00:10:56,950 --> 00:11:03,130
perimeter so if we were talking with if

221
00:11:01,330 --> 00:11:04,660
we think of what we know of the

222
00:11:03,130 --> 00:11:07,420
traditional application the monolithic

223
00:11:04,660 --> 00:11:11,650
application we know there is it could be

224
00:11:07,420 --> 00:11:14,500
any type of network that it uses but

225
00:11:11,650 --> 00:11:17,410
usually it just goes one way so it could

226
00:11:14,500 --> 00:11:19,900
be HTTP disappear any proprietary

227
00:11:17,410 --> 00:11:22,870
network but it always comes from the

228
00:11:19,900 --> 00:11:27,670
client to the server through that port

229
00:11:22,870 --> 00:11:30,970
or yeah they didn't network interface

230
00:11:27,670 --> 00:11:33,610
but in server less that is gone I mean

231
00:11:30,970 --> 00:11:35,680
it's not gone but it's just one out of

232
00:11:33,610 --> 00:11:38,490
many so several that's one of the things

233
00:11:35,680 --> 00:11:41,979
about it that it allows you to run

234
00:11:38,490 --> 00:11:44,590
functions based on events and the events

235
00:11:41,980 --> 00:11:47,980
could be anything so it could be emails

236
00:11:44,590 --> 00:11:50,050
received it could be a file was that was

237
00:11:47,980 --> 00:11:52,120
uploaded a line in the tail in a

238
00:11:50,050 --> 00:11:55,000
specific table that would change will

239
00:11:52,120 --> 00:11:56,650
trigger your functions where do you put

240
00:11:55,000 --> 00:11:59,050
your security control your network

241
00:11:56,650 --> 00:12:01,180
control between those you don't have it

242
00:11:59,050 --> 00:12:05,800
you don't control the net the network

243
00:12:01,180 --> 00:12:09,239
between the the email the email there is

244
00:12:05,800 --> 00:12:13,390
no service of the email service or the

245
00:12:09,240 --> 00:12:17,650
database service so DynamoDB or a cloud

246
00:12:13,390 --> 00:12:20,830
storage so Azure blob or s3 bucket you

247
00:12:17,650 --> 00:12:22,600
don't have that security the network

248
00:12:20,830 --> 00:12:24,880
between them so you don't control it

249
00:12:22,600 --> 00:12:27,130
well that gives us more complexity

250
00:12:24,880 --> 00:12:29,800
because the the application architecture

251
00:12:27,130 --> 00:12:33,070
is different you don't have one way in

252
00:12:29,800 --> 00:12:36,280
you have multiple way in and everything

253
00:12:33,070 --> 00:12:38,170
triggers a new new event or new new code

254
00:12:36,280 --> 00:12:40,510
in your application and the high

255
00:12:38,170 --> 00:12:42,699
velocity of the development makes it

256
00:12:40,510 --> 00:12:46,810
even harder for the security person to

257
00:12:42,700 --> 00:12:49,810
cope with it so imagine that I don't

258
00:12:46,810 --> 00:12:51,260
know like developed at dev team wrote a

259
00:12:49,810 --> 00:12:53,750
feature and now

260
00:12:51,260 --> 00:12:55,580
want to test your firewall against you

261
00:12:53,750 --> 00:12:58,700
to see that it matches but doesn't do

262
00:12:55,580 --> 00:13:01,100
much on false positives so it takes a

263
00:12:58,700 --> 00:13:02,690
few days maybe in staging but here the

264
00:13:01,100 --> 00:13:04,670
velocity is very so - every day every

265
00:13:02,690 --> 00:13:08,030
developer on its own writes his own

266
00:13:04,670 --> 00:13:09,800
function how do you deal with 100

267
00:13:08,030 --> 00:13:11,449
different functions that trigger is

268
00:13:09,800 --> 00:13:14,209
different or have different entry points

269
00:13:11,450 --> 00:13:17,630
in one day or a week or I don't know you

270
00:13:14,210 --> 00:13:23,750
develop your cycles so that makes it

271
00:13:17,630 --> 00:13:26,360
hard but there are many pros so yeh no

272
00:13:23,750 --> 00:13:26,780
servers you don't have to deal with that

273
00:13:26,360 --> 00:13:29,270
anymore

274
00:13:26,780 --> 00:13:36,260
so yeah every time I had an idea and I

275
00:13:29,270 --> 00:13:38,650
wanted to write up code I thought patch

276
00:13:36,260 --> 00:13:40,880
make sure that it's ok how do i scale it

277
00:13:38,650 --> 00:13:43,400
so you don't have to deal with it

278
00:13:40,880 --> 00:13:46,790
anymore so the fine grained is as I told

279
00:13:43,400 --> 00:13:49,730
as I said the architecture is built for

280
00:13:46,790 --> 00:13:51,319
micro services this gives us really if

281
00:13:49,730 --> 00:13:55,040
you think about it a really fine grained

282
00:13:51,320 --> 00:13:57,200
of what each function should do in your

283
00:13:55,040 --> 00:14:00,230
system not only in terms of code because

284
00:13:57,200 --> 00:14:03,140
you don't the security person or the

285
00:14:00,230 --> 00:14:05,450
security manager doesn't have to

286
00:14:03,140 --> 00:14:11,620
understand what each function does but

287
00:14:05,450 --> 00:14:15,110
it could you have a limited like right

288
00:14:11,620 --> 00:14:17,030
that the security person doesn't need to

289
00:14:15,110 --> 00:14:20,630
know what the function is doing in terms

290
00:14:17,030 --> 00:14:23,209
of code but they can understand what is

291
00:14:20,630 --> 00:14:26,210
the function doing in the system it

292
00:14:23,210 --> 00:14:29,480
could also help you find grained your

293
00:14:26,210 --> 00:14:32,140
application and make your security tied

294
00:14:29,480 --> 00:14:35,330
tight your security about it

295
00:14:32,140 --> 00:14:38,420
transparency so if you have like you

296
00:14:35,330 --> 00:14:39,950
download a container image and you don't

297
00:14:38,420 --> 00:14:42,620
know what's inside you know what you

298
00:14:39,950 --> 00:14:45,260
need but maybe there are hundreds of

299
00:14:42,620 --> 00:14:48,320
things services and ports open besides

300
00:14:45,260 --> 00:14:50,420
it so I don't know like SSH or whatever

301
00:14:48,320 --> 00:14:52,100
and you have to look for it and see that

302
00:14:50,420 --> 00:14:54,110
you don't have backdoors into your

303
00:14:52,100 --> 00:14:57,800
system or open ports that you don't need

304
00:14:54,110 --> 00:14:59,750
but here it's different because you

305
00:14:57,800 --> 00:15:02,089
don't need to deal with that you know

306
00:14:59,750 --> 00:15:05,450
that you need an API gateway so you have

307
00:15:02,090 --> 00:15:09,290
an API gateway you need a DynamoDB

308
00:15:05,450 --> 00:15:11,600
table or any other database or but a

309
00:15:09,290 --> 00:15:14,329
cloud storage this is what you get you

310
00:15:11,600 --> 00:15:16,790
don't have to look for other things

311
00:15:14,330 --> 00:15:19,330
because you don't deal with any type of

312
00:15:16,790 --> 00:15:22,459
container you just deal with the code

313
00:15:19,330 --> 00:15:27,320
right so there are a few big challenges

314
00:15:22,460 --> 00:15:31,340
and we'll discuss a few of them right so

315
00:15:27,320 --> 00:15:34,820
let's take an example a code example it

316
00:15:31,340 --> 00:15:37,750
uses the this code uses AWS which is the

317
00:15:34,820 --> 00:15:40,880
biggest service by far the biggest

318
00:15:37,750 --> 00:15:41,570
service provider but it could be

319
00:15:40,880 --> 00:15:43,189
anything else

320
00:15:41,570 --> 00:15:46,820
so what this function is doing is very

321
00:15:43,190 --> 00:15:49,760
very simple it reads a file so it is

322
00:15:46,820 --> 00:15:53,990
triggered by an event let's say of a

323
00:15:49,760 --> 00:15:55,850
file uploaded for our file create and it

324
00:15:53,990 --> 00:15:58,910
goes to the bucket that triggers it

325
00:15:55,850 --> 00:16:02,210
takes the file name and reads it right

326
00:15:58,910 --> 00:16:06,319
doesn't matter what it needs to do so I

327
00:16:02,210 --> 00:16:08,360
talked about fine-grained application or

328
00:16:06,320 --> 00:16:11,330
fine-grained security so let's see the

329
00:16:08,360 --> 00:16:14,030
process of what we could do in make it

330
00:16:11,330 --> 00:16:15,920
fine grain so the first stage you'd go

331
00:16:14,030 --> 00:16:18,260
okay Europe your developer wrote this

332
00:16:15,920 --> 00:16:20,510
code and you go and tell him right but

333
00:16:18,260 --> 00:16:22,580
you need to provide a permission for

334
00:16:20,510 --> 00:16:24,680
this specific or I mentioned that say

335
00:16:22,580 --> 00:16:28,580
that so you need to provide a permission

336
00:16:24,680 --> 00:16:31,939
for each of the functions separate that

337
00:16:28,580 --> 00:16:34,510
makes it hard in one way but could allow

338
00:16:31,940 --> 00:16:36,920
you to fine grain it to a very tight

339
00:16:34,510 --> 00:16:39,950
attack surface so you tell your

340
00:16:36,920 --> 00:16:43,729
developer a go read the documentation

341
00:16:39,950 --> 00:16:45,440
and bring the right permission for the

342
00:16:43,730 --> 00:16:49,640
function so the developer goes to the

343
00:16:45,440 --> 00:16:52,190
AWS examples which is actually what it

344
00:16:49,640 --> 00:16:54,230
is and brings this okay they are gonna

345
00:16:52,190 --> 00:16:56,930
give this policy to the function and

346
00:16:54,230 --> 00:16:59,000
what this policy means is that it allows

347
00:16:56,930 --> 00:17:03,050
to the function right this is the

348
00:16:59,000 --> 00:17:06,369
permission of the function to use any f3

349
00:17:03,050 --> 00:17:10,940
serve any action inside an a3 service

350
00:17:06,369 --> 00:17:13,189
this one and the wild car means

351
00:17:10,940 --> 00:17:17,140
everything so the action could be file

352
00:17:13,190 --> 00:17:20,440
upload file rate change permission

353
00:17:17,140 --> 00:17:23,530
downloads rewrite delete whatever you

354
00:17:20,440 --> 00:17:25,780
think about storage and it allows

355
00:17:23,530 --> 00:17:29,020
everything to do everything and this

356
00:17:25,780 --> 00:17:31,300
resource also with a wild car also great

357
00:17:29,020 --> 00:17:34,420
it means that the function can do

358
00:17:31,300 --> 00:17:36,280
anything to any cloud storage in the

359
00:17:34,420 --> 00:17:39,340
account so we imagine that you have I

360
00:17:36,280 --> 00:17:42,220
don't know like one let's keep it small

361
00:17:39,340 --> 00:17:44,169
then cloud storage that your application

362
00:17:42,220 --> 00:17:46,780
it deals with and this function can do

363
00:17:44,170 --> 00:17:48,190
anything including deleting them or

364
00:17:46,780 --> 00:17:52,240
changing the permission making them

365
00:17:48,190 --> 00:17:54,520
public to any of these cloud storages

366
00:17:52,240 --> 00:17:57,610
that means that if someone managed to

367
00:17:54,520 --> 00:18:01,750
hack or to have access to exploit this

368
00:17:57,610 --> 00:18:03,399
function they can do really big problems

369
00:18:01,750 --> 00:18:06,580
into your application we'll see later

370
00:18:03,400 --> 00:18:09,640
how it really goes so you go and say hey

371
00:18:06,580 --> 00:18:11,980
what is this bring me some security into

372
00:18:09,640 --> 00:18:15,340
that so the developer goes and takes

373
00:18:11,980 --> 00:18:18,430
this reads further and say I only need

374
00:18:15,340 --> 00:18:20,320
to deal with a specific bucket why do I

375
00:18:18,430 --> 00:18:22,990
knew the wild core and he say who I

376
00:18:20,320 --> 00:18:25,060
found a solution so now I will allow

377
00:18:22,990 --> 00:18:27,520
this function to do everything but only

378
00:18:25,060 --> 00:18:29,470
to this specific bucket so the function

379
00:18:27,520 --> 00:18:31,360
cannot buy the infrastructure so you

380
00:18:29,470 --> 00:18:34,270
didn't have to deal with it now cannot

381
00:18:31,360 --> 00:18:36,639
deal with any other cloud storage that

382
00:18:34,270 --> 00:18:39,370
means that even if someone exploited the

383
00:18:36,640 --> 00:18:42,190
function they cannot do anything to a

384
00:18:39,370 --> 00:18:44,139
different card storage but that's not

385
00:18:42,190 --> 00:18:45,940
enough because you're a security person

386
00:18:44,140 --> 00:18:47,740
you say why do you need to delete I

387
00:18:45,940 --> 00:18:49,720
don't know why do you you need to have

388
00:18:47,740 --> 00:18:51,370
to be able to delete the function or

389
00:18:49,720 --> 00:18:54,010
upload file you just need to read files

390
00:18:51,370 --> 00:18:57,030
so go ahead and you find the best

391
00:18:54,010 --> 00:19:01,120
solution which is this this privilege

392
00:18:57,030 --> 00:19:04,870
only get object for this specific bucket

393
00:19:01,120 --> 00:19:09,250
so even if the function is exploited you

394
00:19:04,870 --> 00:19:11,620
can only read a file from this bucket so

395
00:19:09,250 --> 00:19:16,120
that's great but how do you do that for

396
00:19:11,620 --> 00:19:18,489
hundreds of functions every week Wow you

397
00:19:16,120 --> 00:19:20,379
you really gone and this is just one one

398
00:19:18,490 --> 00:19:23,610
simple event a three is very common

399
00:19:20,380 --> 00:19:27,580
there there are hundreds of services and

400
00:19:23,610 --> 00:19:29,290
about four hundred five thousand actions

401
00:19:27,580 --> 00:19:31,949
in total how

402
00:19:29,290 --> 00:19:36,370
you dig into that and find the specific

403
00:19:31,950 --> 00:19:38,320
action - all of it - everything so the

404
00:19:36,370 --> 00:19:45,820
only solution that we see is automating

405
00:19:38,320 --> 00:19:48,429
it so I won't show it but we provide an

406
00:19:45,820 --> 00:19:51,149
ability to automate that if you're

407
00:19:48,430 --> 00:19:53,380
interested in that come to me later and

408
00:19:51,150 --> 00:19:56,650
I'll discuss it further and other

409
00:19:53,380 --> 00:19:58,780
challenges as I said the velocity gives

410
00:19:56,650 --> 00:20:01,300
you hundreds and thousands of resources

411
00:19:58,780 --> 00:20:04,690
into your account how do you deal with

412
00:20:01,300 --> 00:20:09,399
all of the security you need an observer

413
00:20:04,690 --> 00:20:13,290
ability and this is the solution here is

414
00:20:09,400 --> 00:20:15,910
to - to know how to use all the

415
00:20:13,290 --> 00:20:18,909
infrastructure or the service provider

416
00:20:15,910 --> 00:20:22,420
resources so there are logs and there

417
00:20:18,910 --> 00:20:24,400
are there are reports for everything in

418
00:20:22,420 --> 00:20:28,150
graphs in metrics but you need to know

419
00:20:24,400 --> 00:20:31,360
to use them in order to understand what

420
00:20:28,150 --> 00:20:33,340
is going on in to your application ok

421
00:20:31,360 --> 00:20:38,110
let's talk about another challenge which

422
00:20:33,340 --> 00:20:41,350
is big we mentioned no parameter so no

423
00:20:38,110 --> 00:20:44,800
one parameter so monolithic application

424
00:20:41,350 --> 00:20:48,490
everything came from one point in

425
00:20:44,800 --> 00:20:51,970
serverless saurian service you can so

426
00:20:48,490 --> 00:20:53,890
imagine this is some kind of a simple

427
00:20:51,970 --> 00:20:55,690
application architecture the attacker

428
00:20:53,890 --> 00:20:58,180
can come from the API gateway and

429
00:20:55,690 --> 00:21:01,330
trigger your function but they can also

430
00:20:58,180 --> 00:21:02,980
upload a file to the s3 bucket or any

431
00:21:01,330 --> 00:21:06,429
cloud storage which will trigger

432
00:21:02,980 --> 00:21:08,500
function and I can also write something

433
00:21:06,430 --> 00:21:10,360
that will be written to a log which will

434
00:21:08,500 --> 00:21:12,340
trigger a function so eventually you

435
00:21:10,360 --> 00:21:15,610
don't know where is the entry point for

436
00:21:12,340 --> 00:21:17,740
your for your for the attacker it could

437
00:21:15,610 --> 00:21:24,010
be anything in the application and you

438
00:21:17,740 --> 00:21:26,550
need to worry about that so what we do

439
00:21:24,010 --> 00:21:30,340
is we give you both security and

440
00:21:26,550 --> 00:21:32,320
observability into your account by so

441
00:21:30,340 --> 00:21:34,570
you cannot put a firewall right so how

442
00:21:32,320 --> 00:21:37,419
do you protect I don't know ask you an

443
00:21:34,570 --> 00:21:39,070
injection cross-site scripting or pass

444
00:21:37,420 --> 00:21:41,230
traverse or any other other attack how

445
00:21:39,070 --> 00:21:42,770
do you protect it so the only only way

446
00:21:41,230 --> 00:21:46,850
that we see too

447
00:21:42,770 --> 00:21:50,330
it is to run the protection inside your

448
00:21:46,850 --> 00:21:52,129
function and Oh with in your function so

449
00:21:50,330 --> 00:21:56,510
we don't actually change your code but

450
00:21:52,130 --> 00:21:58,850
if you can invoke us like import us as

451
00:21:56,510 --> 00:22:03,379
part of your code we can instrument or

452
00:21:58,850 --> 00:22:05,480
we can instrument the function or get a

453
00:22:03,380 --> 00:22:07,310
hold of the old system operation system

454
00:22:05,480 --> 00:22:10,580
or like let's say the container running

455
00:22:07,310 --> 00:22:13,060
by the service provider and then gives

456
00:22:10,580 --> 00:22:16,669
you a visibility there so we can stop

457
00:22:13,060 --> 00:22:19,720
malicious traffic and we can we can see

458
00:22:16,670 --> 00:22:23,270
if the function needs is over privileged

459
00:22:19,720 --> 00:22:26,930
we can see if the function need tries

460
00:22:23,270 --> 00:22:30,590
suddenly tries to connect to a pastebin

461
00:22:26,930 --> 00:22:34,370
or or anything that we suspected is

462
00:22:30,590 --> 00:22:36,230
different we also learn as I said

463
00:22:34,370 --> 00:22:39,649
fine-grained we also learn the behavior

464
00:22:36,230 --> 00:22:43,880
of each function so we can actually

465
00:22:39,650 --> 00:22:46,370
profile it and see that it needs to do

466
00:22:43,880 --> 00:22:48,530
only a certain thing but let's see now

467
00:22:46,370 --> 00:22:51,080
how an attack or a surrealist attack

468
00:22:48,530 --> 00:22:57,290
would look like so we have like setup

469
00:22:51,080 --> 00:22:59,360
here that is slack channel right so it's

470
00:22:57,290 --> 00:23:03,170
let's say the sales slack channel or

471
00:22:59,360 --> 00:23:04,729
anything like that and or support slack

472
00:23:03,170 --> 00:23:08,960
channel and the user interact with it

473
00:23:04,730 --> 00:23:12,440
when the user writes a message into the

474
00:23:08,960 --> 00:23:14,120
slack it goes to the slack API and I can

475
00:23:12,440 --> 00:23:16,400
figure this is how I configure the

476
00:23:14,120 --> 00:23:19,699
application that it will go to my API

477
00:23:16,400 --> 00:23:23,030
gateway so if you look at number 3 here

478
00:23:19,700 --> 00:23:25,910
so the API gateway is the trigger for

479
00:23:23,030 --> 00:23:28,580
the lambda function or the start of the

480
00:23:25,910 --> 00:23:31,430
process of this application which what

481
00:23:28,580 --> 00:23:34,129
it is is a service or a slack chat bot

482
00:23:31,430 --> 00:23:36,170
so when you type a message this bot

483
00:23:34,130 --> 00:23:38,090
tries to understand what you're talking

484
00:23:36,170 --> 00:23:41,390
about and to respond to counter

485
00:23:38,090 --> 00:23:45,050
accordingly so I have there after the

486
00:23:41,390 --> 00:23:47,150
bot understood or let's say decided what

487
00:23:45,050 --> 00:23:49,100
to are how to reply they write

488
00:23:47,150 --> 00:23:52,310
everything to do that normal DB database

489
00:23:49,100 --> 00:23:54,199
just for the record and then sends it

490
00:23:52,310 --> 00:23:55,169
back to slack which will appear

491
00:23:54,200 --> 00:23:58,050
eventually

492
00:23:55,170 --> 00:24:00,360
on the stack channel so let's see the

493
00:23:58,050 --> 00:24:02,550
attacker can come here from the slack of

494
00:24:00,360 --> 00:24:05,280
course this is the slack channel but it

495
00:24:02,550 --> 00:24:09,240
can also send requests directly to the

496
00:24:05,280 --> 00:24:12,530
slack API or directly to the API gateway

497
00:24:09,240 --> 00:24:14,940
and we'll see how that goes

498
00:24:12,530 --> 00:24:17,610
right so the attack steps are going to

499
00:24:14,940 --> 00:24:19,890
be first I'm gonna validate the Volta

500
00:24:17,610 --> 00:24:22,490
vulnerability then I'm gonna extract the

501
00:24:19,890 --> 00:24:25,170
source code which is fun in server let's

502
00:24:22,490 --> 00:24:27,990
read some environment variables which

503
00:24:25,170 --> 00:24:30,870
usually hold the securities or the

504
00:24:27,990 --> 00:24:33,090
secrets for your application and person

505
00:24:30,870 --> 00:24:40,129
it to the function and then steal some

506
00:24:33,090 --> 00:24:40,129
stuff and write so let's do do that

507
00:24:41,540 --> 00:24:53,129
alright yeah so here is my my slack

508
00:24:50,430 --> 00:24:58,110
channel and there is a slack but behind

509
00:24:53,130 --> 00:25:00,560
it and I can write reply everything our

510
00:24:58,110 --> 00:25:04,560
conversation is going to the database

511
00:25:00,560 --> 00:25:09,720
right so first thing first let's just

512
00:25:04,560 --> 00:25:13,980
see that it's vulnerable so what we have

513
00:25:09,720 --> 00:25:16,830
here is a function that the code is okay

514
00:25:13,980 --> 00:25:19,110
so there is no security gaps in the code

515
00:25:16,830 --> 00:25:25,530
itself that develop a wrote me the

516
00:25:19,110 --> 00:25:28,590
developer but I imported a dependency

517
00:25:25,530 --> 00:25:33,420
that has a known vulnerability so I used

518
00:25:28,590 --> 00:25:37,010
known node serialize library I do not

519
00:25:33,420 --> 00:25:40,290
write a bad code I just imported this

520
00:25:37,010 --> 00:25:42,390
library and I used its function its

521
00:25:40,290 --> 00:25:46,139
methods right but the code of the

522
00:25:42,390 --> 00:25:50,310
library is vulnerable and it allows you

523
00:25:46,140 --> 00:25:54,090
to write code and run them inside as a

524
00:25:50,310 --> 00:25:56,580
function inside a code so and the

525
00:25:54,090 --> 00:26:03,800
function oh I'll show you that it would

526
00:25:56,580 --> 00:26:03,800
be easier right so I have a function

527
00:26:09,770 --> 00:26:14,790
right so I have a function and I have a

528
00:26:12,240 --> 00:26:17,460
vulnerable dependency which is no to

529
00:26:14,790 --> 00:26:20,389
realize in the version but and we'll get

530
00:26:17,460 --> 00:26:22,860
to it later the function also have

531
00:26:20,390 --> 00:26:25,950
permission and excessive permission role

532
00:26:22,860 --> 00:26:28,740
which is DynamoDB wild card as I

533
00:26:25,950 --> 00:26:31,740
mentioned earlier the wild card allows

534
00:26:28,740 --> 00:26:34,440
us to do everything inside the DynamoDB

535
00:26:31,740 --> 00:26:39,240
right so after we know these two facts

536
00:26:34,440 --> 00:26:46,230
was let's exploit it so first I'm gonna

537
00:26:39,240 --> 00:26:49,350
do right just gonna luncheon and rock

538
00:26:46,230 --> 00:26:54,420
HTTP tunnel into my computer and I'm

539
00:26:49,350 --> 00:26:56,750
gonna take this sub domain forgive me

540
00:26:54,420 --> 00:27:00,060
for having these pellets ready for me

541
00:26:56,750 --> 00:27:01,980
but you can find so if you know that

542
00:27:00,060 --> 00:27:04,110
it's an ode to realized wrong ability

543
00:27:01,980 --> 00:27:06,060
and you're gonna write notes you realize

544
00:27:04,110 --> 00:27:10,229
in Google you're gonna get this type of

545
00:27:06,060 --> 00:27:12,240
payload so it's not that I write

546
00:27:10,230 --> 00:27:14,520
something new here and what I'm gonna do

547
00:27:12,240 --> 00:27:17,810
here is I'm gonna send this payload

548
00:27:14,520 --> 00:27:20,850
which you can see here what it does is

549
00:27:17,810 --> 00:27:23,310
require child person a child process

550
00:27:20,850 --> 00:27:25,770
exec so I'm going to run a child process

551
00:27:23,310 --> 00:27:29,700
inside the function and I'm gonna do

552
00:27:25,770 --> 00:27:32,400
eventually occur into my computer which

553
00:27:29,700 --> 00:27:35,070
is the anger that I just launched so far

554
00:27:32,400 --> 00:27:36,480
nothing related to server list rather

555
00:27:35,070 --> 00:27:40,980
than other than the function is a

556
00:27:36,480 --> 00:27:43,920
service function so when I send it I got

557
00:27:40,980 --> 00:27:48,330
it into my computer this curl request

558
00:27:43,920 --> 00:27:51,270
was launched from the container which in

559
00:27:48,330 --> 00:27:54,659
which the function runs so when I say

560
00:27:51,270 --> 00:27:57,450
container I mean the the server less or

561
00:27:54,660 --> 00:27:59,130
the service provider runs a container

562
00:27:57,450 --> 00:28:01,710
one you call the applicator function

563
00:27:59,130 --> 00:28:03,930
runs a container run the code and then

564
00:28:01,710 --> 00:28:05,220
brings everything down and you don't

565
00:28:03,930 --> 00:28:07,380
have to deal with anything whether

566
00:28:05,220 --> 00:28:10,170
they're two containers just write the

567
00:28:07,380 --> 00:28:12,870
function right so first thing I just

568
00:28:10,170 --> 00:28:15,750
just realized that it's vulnerable now

569
00:28:12,870 --> 00:28:17,879
let's do some attack or some attacks

570
00:28:15,750 --> 00:28:21,170
related to server less so I'm going to

571
00:28:17,880 --> 00:28:21,170
take this the second

572
00:28:27,660 --> 00:28:36,420
and here what I'm doing is I'm gonna

573
00:28:31,960 --> 00:28:39,300
take open another child process same

574
00:28:36,420 --> 00:28:45,610
destination my computer only this time

575
00:28:39,300 --> 00:28:48,430
I'm gonna do a tower so I'm gonna grab

576
00:28:45,610 --> 00:28:51,159
all the source code which locates in the

577
00:28:48,430 --> 00:28:53,800
current folder apart from the node

578
00:28:51,160 --> 00:28:58,450
models which I don't need basically for

579
00:28:53,800 --> 00:29:00,250
wrap them then tar.gz them and curl them

580
00:28:58,450 --> 00:29:03,280
to me of course there are hundreds of

581
00:29:00,250 --> 00:29:06,760
other ways to do that but this is an

582
00:29:03,280 --> 00:29:09,430
easy one so in serverless the code runs

583
00:29:06,760 --> 00:29:13,480
or the code is located inside the

584
00:29:09,430 --> 00:29:16,420
container because the service priority

585
00:29:13,480 --> 00:29:18,790
took this code loads it into memory and

586
00:29:16,420 --> 00:29:21,160
runs it so this is how it works that

587
00:29:18,790 --> 00:29:23,830
also means that if someone has access to

588
00:29:21,160 --> 00:29:27,100
your environment then they can steal the

589
00:29:23,830 --> 00:29:30,639
source code fun so yeah I wrote this

590
00:29:27,100 --> 00:29:32,860
this request came in victim source let's

591
00:29:30,640 --> 00:29:36,250
see what is it what it has inside so

592
00:29:32,860 --> 00:29:38,860
right so this is the basics T for app I

593
00:29:36,250 --> 00:29:47,740
don't need that anymore so just let's

594
00:29:38,860 --> 00:29:56,530
just echo 864 decode into victim or

595
00:29:47,740 --> 00:30:00,880
jay-z right and then just open it and we

596
00:29:56,530 --> 00:30:04,750
have the index dot JSON side so this is

597
00:30:00,880 --> 00:30:07,120
the function code that runs in your

598
00:30:04,750 --> 00:30:09,280
background let's say let's call it so

599
00:30:07,120 --> 00:30:13,030
you can see that the file is protected

600
00:30:09,280 --> 00:30:15,820
protected with particular solution the

601
00:30:13,030 --> 00:30:18,129
the reason that things weren't blocked

602
00:30:15,820 --> 00:30:21,070
is because the function is on alert mode

603
00:30:18,130 --> 00:30:23,020
at the moment but that's not important

604
00:30:21,070 --> 00:30:25,899
what we need to do is investigate the

605
00:30:23,020 --> 00:30:28,450
code now part of the fact that we now

606
00:30:25,900 --> 00:30:31,060
have some back-end code we can now

607
00:30:28,450 --> 00:30:31,340
trigger a more accurate attack against

608
00:30:31,060 --> 00:30:34,429
the

609
00:30:31,340 --> 00:30:38,240
function so if we look here we'll see

610
00:30:34,430 --> 00:30:41,780
the the brain of the of the bot in case

611
00:30:38,240 --> 00:30:44,600
it finds this it works it will answer

612
00:30:41,780 --> 00:30:47,840
like that etc but the more interesting

613
00:30:44,600 --> 00:30:49,520
thing is that here we can see the

614
00:30:47,840 --> 00:30:52,129
function or the part of the function

615
00:30:49,520 --> 00:30:55,850
that sends the messages back so if you

616
00:30:52,130 --> 00:31:00,700
can see here I have an API sorry an HTTP

617
00:30:55,850 --> 00:31:06,020
request to API chat post message of

618
00:31:00,700 --> 00:31:09,950
Stratcom this is the port and in order

619
00:31:06,020 --> 00:31:11,750
to respond to the right channel we have

620
00:31:09,950 --> 00:31:14,600
all these environment variables here

621
00:31:11,750 --> 00:31:17,990
which are the channel the channel and

622
00:31:14,600 --> 00:31:21,290
the text itself and then the bot token

623
00:31:17,990 --> 00:31:23,990
and then the boat user and then the icon

624
00:31:21,290 --> 00:31:25,790
of the boat so these are all nice I

625
00:31:23,990 --> 00:31:28,220
cannot steal them like steal them

626
00:31:25,790 --> 00:31:32,240
because they are environment variable

627
00:31:28,220 --> 00:31:34,880
well I can but not like that but I can

628
00:31:32,240 --> 00:31:37,460
if I run the code inside the context of

629
00:31:34,880 --> 00:31:40,640
the func of the code then I can just use

630
00:31:37,460 --> 00:31:43,310
them so what I'm gonna do here is that

631
00:31:40,640 --> 00:31:45,110
no more curls I'm gonna the function

632
00:31:43,310 --> 00:31:47,840
rights into the slack right so why do I

633
00:31:45,110 --> 00:31:49,840
need curl anymore so what I'm gonna do

634
00:31:47,840 --> 00:31:52,570
here is I'm gonna have a third payload

635
00:31:49,840 --> 00:31:55,220
here I'm not gonna use a child process

636
00:31:52,570 --> 00:31:57,050
because I don't need that anymore what

637
00:31:55,220 --> 00:32:00,710
I'm gonna do here is I'm gonna do a

638
00:31:57,050 --> 00:32:04,280
require HTTP so and then I'm gonna send

639
00:32:00,710 --> 00:32:10,720
a request to slack comm so I separated

640
00:32:04,280 --> 00:32:14,300
them just because slack would treat URLs

641
00:32:10,720 --> 00:32:16,700
in a different way so it will go and

642
00:32:14,300 --> 00:32:19,220
bring the image like Skype etc so I just

643
00:32:16,700 --> 00:32:21,020
split them so slack will not understand

644
00:32:19,220 --> 00:32:23,180
it's it's a URL but it doesn't really

645
00:32:21,020 --> 00:32:25,910
matter and then I'm gonna use the same

646
00:32:23,180 --> 00:32:27,950
variables so process and is the

647
00:32:25,910 --> 00:32:31,520
environment variables Channel and then

648
00:32:27,950 --> 00:32:33,530
the token and then the user and now I'm

649
00:32:31,520 --> 00:32:35,750
gonna launch this and you can see the

650
00:32:33,530 --> 00:32:38,510
icon here right this is the icon of the

651
00:32:35,750 --> 00:32:40,190
chat bot so when I run this I'm gonna

652
00:32:38,510 --> 00:32:43,250
have a different icon for the slack but

653
00:32:40,190 --> 00:32:43,900
because I just switched the URL that the

654
00:32:43,250 --> 00:32:45,880
request

655
00:32:43,900 --> 00:32:48,730
be sent with and then I stole the

656
00:32:45,880 --> 00:32:53,110
original one so I can do the same thing

657
00:32:48,730 --> 00:32:58,750
with the channel and get the channel

658
00:32:53,110 --> 00:33:01,169
which is slack chat channel right that's

659
00:32:58,750 --> 00:33:01,170
the problem

660
00:33:02,310 --> 00:33:11,169
black Channel and I can do the same with

661
00:33:06,300 --> 00:33:16,360
the username which is also slack yet not

662
00:33:11,170 --> 00:33:18,250
really interesting but I can also do it

663
00:33:16,360 --> 00:33:24,429
with the token which I won't because I

664
00:33:18,250 --> 00:33:27,610
don't want you to copy it I'll say I'll

665
00:33:24,430 --> 00:33:30,670
set it with this so till now I just

666
00:33:27,610 --> 00:33:33,909
I read the code and then I managed to

667
00:33:30,670 --> 00:33:35,920
explain so think about it like that

668
00:33:33,910 --> 00:33:38,920
so now nothing really bad happened

669
00:33:35,920 --> 00:33:41,290
because I'm talking with my own chat but

670
00:33:38,920 --> 00:33:43,390
if this chat the back end is a

671
00:33:41,290 --> 00:33:47,050
multi-tenant now I can interact with

672
00:33:43,390 --> 00:33:48,850
different users and write them write

673
00:33:47,050 --> 00:33:52,540
messages to them so if someone else

674
00:33:48,850 --> 00:33:55,659
installed much mice cells bought my

675
00:33:52,540 --> 00:33:59,379
slack chat bot and I can steal their

676
00:33:55,660 --> 00:34:04,090
data so now I showed you that the

677
00:33:59,380 --> 00:34:07,180
function has over promise or redundant

678
00:34:04,090 --> 00:34:09,250
permissions which allows it to do

679
00:34:07,180 --> 00:34:11,980
anything on the database which is the

680
00:34:09,250 --> 00:34:14,199
DynamoDB well in fact it only needs a

681
00:34:11,980 --> 00:34:16,120
pod item which is the right because the

682
00:34:14,199 --> 00:34:18,489
function only writes everything to the

683
00:34:16,120 --> 00:34:22,540
database why do it does it need a wild

684
00:34:18,489 --> 00:34:25,509
card it doesn't and let's see how I

685
00:34:22,540 --> 00:34:28,830
exploit that so that's gonna be the last

686
00:34:25,510 --> 00:34:28,830
one for now sorry

687
00:34:32,460 --> 00:34:37,540
right so there's a force payload again

688
00:34:35,530 --> 00:34:40,149
what I'm gonna do here is I'm gonna do a

689
00:34:37,540 --> 00:34:44,620
require AWS SDK so I'm gonna use the

690
00:34:40,149 --> 00:34:46,389
actual SDK of the provider require HTTP

691
00:34:44,620 --> 00:34:48,429
for it to send a request and then what

692
00:34:46,389 --> 00:34:50,980
I'm gonna do is I'm gonna do a dynamo D

693
00:34:48,429 --> 00:34:56,659
so this is part of the SDK right so it's

694
00:34:50,980 --> 00:34:58,970
a dynamo DB dot document client dot scan

695
00:34:56,659 --> 00:35:01,640
the scan is actually just get the data

696
00:34:58,970 --> 00:35:05,930
out of the database so scan everything

697
00:35:01,640 --> 00:35:07,520
and the table name is gonna be DynamoDB

698
00:35:05,930 --> 00:35:11,270
table which is an environment variable

699
00:35:07,520 --> 00:35:12,890
and then these things doesn't matter and

700
00:35:11,270 --> 00:35:16,250
then I'm gonna send everything back to

701
00:35:12,890 --> 00:35:19,430
slack like I did before and when I press

702
00:35:16,250 --> 00:35:23,030
this I'm gonna see everything out of the

703
00:35:19,430 --> 00:35:25,399
DynamoDB database which is in this case

704
00:35:23,030 --> 00:35:27,950
you know we could prevent that if we

705
00:35:25,400 --> 00:35:31,640
could just give the function the put

706
00:35:27,950 --> 00:35:34,368
item permission then even if the

707
00:35:31,640 --> 00:35:37,038
attacker has done that we could prevent

708
00:35:34,369 --> 00:35:38,839
that just by changing the permissions

709
00:35:37,039 --> 00:35:40,849
right it's just like any other

710
00:35:38,839 --> 00:35:43,400
application if you can block the

711
00:35:40,849 --> 00:35:45,640
permission level then even if the

712
00:35:43,400 --> 00:35:49,549
attacker tries to exploit it it cannot

713
00:35:45,640 --> 00:35:53,690
so we could do that but we didn't so we

714
00:35:49,549 --> 00:35:56,240
came up we handed up with this this is a

715
00:35:53,690 --> 00:35:59,750
type of injection attack for server less

716
00:35:56,240 --> 00:36:02,569
so the attack is not new so everyone

717
00:35:59,750 --> 00:36:04,369
knows code injection right but the

718
00:36:02,569 --> 00:36:07,910
attack vectors are a little different

719
00:36:04,369 --> 00:36:10,339
because here you have a few different

720
00:36:07,910 --> 00:36:12,500
vectors so first you can steal the

721
00:36:10,339 --> 00:36:15,069
source code if you're running the code

722
00:36:12,500 --> 00:36:17,480
and the second is you're gonna target

723
00:36:15,069 --> 00:36:20,569
you're gonna write a code that is

724
00:36:17,480 --> 00:36:23,059
related to your cloud provider so if I

725
00:36:20,569 --> 00:36:27,319
want to do I have I'd say I have a

726
00:36:23,059 --> 00:36:30,230
function that write it is funny

727
00:36:27,319 --> 00:36:32,420
so I told them don't interfere with the

728
00:36:30,230 --> 00:36:35,380
slack Channel they just replied it would

729
00:36:32,420 --> 00:36:35,380
be funny if we did

730
00:36:35,789 --> 00:36:45,910
yeah and that's actually funny so yeah

731
00:36:42,520 --> 00:36:47,920
so what I in the in that term I'm gonna

732
00:36:45,910 --> 00:36:50,649
attack the function and I'm not just

733
00:36:47,920 --> 00:36:52,960
gonna write PHP code or something else

734
00:36:50,650 --> 00:36:56,970
I'm gonna try and write a code that will

735
00:36:52,960 --> 00:37:00,430
go and look for resources inside the

736
00:36:56,970 --> 00:37:03,970
cloud account so if you have DynamoDB or

737
00:37:00,430 --> 00:37:07,390
s3 bucket or SES SNS or any other

738
00:37:03,970 --> 00:37:10,660
resource like logs etc I'm gonna write

739
00:37:07,390 --> 00:37:13,118
an exploit that gonna that going to try

740
00:37:10,660 --> 00:37:15,368
and interact with these resources and

741
00:37:13,119 --> 00:37:22,089
then steal them just like I did here

742
00:37:15,369 --> 00:37:32,020
with DynamoDB scan right ok let's go

743
00:37:22,089 --> 00:37:34,599
back to the presentation all right right

744
00:37:32,020 --> 00:37:37,059
now that I know the sorry now that I

745
00:37:34,599 --> 00:37:39,460
know the how to interact with the slack

746
00:37:37,059 --> 00:37:41,500
I don't actually need to go need to go

747
00:37:39,460 --> 00:37:46,089
through the slack I can actually just

748
00:37:41,500 --> 00:37:49,779
curl to the slack API but it's nicer

749
00:37:46,089 --> 00:37:52,599
like that right so we see how we stole

750
00:37:49,779 --> 00:37:54,549
it okay so this was something called

751
00:37:52,599 --> 00:37:57,339
event injection I showed it it was

752
00:37:54,549 --> 00:38:00,670
partially APA gateway so it's kind of a

753
00:37:57,339 --> 00:38:02,680
way that you understand but as I

754
00:38:00,670 --> 00:38:07,299
mentioned earlier you can trigger

755
00:38:02,680 --> 00:38:10,569
functions with nothing related to an API

756
00:38:07,299 --> 00:38:13,240
call so this was a REST API - sorry - my

757
00:38:10,569 --> 00:38:16,150
our API gateway but if a function is

758
00:38:13,240 --> 00:38:18,160
triggered for every email that is

759
00:38:16,150 --> 00:38:20,440
received it's enough that I will send an

760
00:38:18,160 --> 00:38:22,598
email and it will trigger the function

761
00:38:20,440 --> 00:38:25,089
now if the function doesn't do any

762
00:38:22,599 --> 00:38:28,630
validation on the code and it has some

763
00:38:25,089 --> 00:38:30,490
vulnerability maybe I can I will attack

764
00:38:28,630 --> 00:38:33,609
your function through the subject of the

765
00:38:30,490 --> 00:38:36,189
email which is new and it can happend

766
00:38:33,609 --> 00:38:38,410
and I haven't seen it in the wild

767
00:38:36,190 --> 00:38:43,150
because there isn't much of in the world

768
00:38:38,410 --> 00:38:45,279
at this moment but I'm pretty sure we're

769
00:38:43,150 --> 00:38:46,910
gonna see it just like we saw on every

770
00:38:45,279 --> 00:38:49,819
other technology that came in

771
00:38:46,910 --> 00:38:51,680
someone said oh nice mobile now we don't

772
00:38:49,819 --> 00:38:55,660
need to deal with security right and

773
00:38:51,680 --> 00:38:58,700
then we had it all over again fun for us

774
00:38:55,660 --> 00:39:00,140
so it's gonna be pretty sure the same

775
00:38:58,700 --> 00:39:00,649
for civil is they're gonna do even

776
00:39:00,140 --> 00:39:02,150
better

777
00:39:00,650 --> 00:39:03,920
oh now we have the server less

778
00:39:02,150 --> 00:39:06,140
infrastructure we don't need to deal

779
00:39:03,920 --> 00:39:08,839
with security and then we add up with

780
00:39:06,140 --> 00:39:11,480
this so the first one is event injection

781
00:39:08,839 --> 00:39:14,359
again it could be maybe this is a good

782
00:39:11,480 --> 00:39:16,460
scenario that you probably saw somewhere

783
00:39:14,359 --> 00:39:18,740
where you interact with an application

784
00:39:16,460 --> 00:39:22,430
that allows you to upload file and you

785
00:39:18,740 --> 00:39:25,038
get and a URL to upload the file to an

786
00:39:22,430 --> 00:39:27,348
s3 bucket to Amazon s3 bucket this is

787
00:39:25,039 --> 00:39:31,160
very very common also before the service

788
00:39:27,349 --> 00:39:34,220
so if the let's think about that if the

789
00:39:31,160 --> 00:39:37,940
bucket itself is configured in securely

790
00:39:34,220 --> 00:39:41,899
and is open I mean anyone can upload

791
00:39:37,940 --> 00:39:44,230
them I can maybe upload files which if

792
00:39:41,900 --> 00:39:47,470
malicious files which will trigger your

793
00:39:44,230 --> 00:39:50,480
error functions and I wrote a few

794
00:39:47,470 --> 00:39:52,939
example blogs about it how you can write

795
00:39:50,480 --> 00:39:55,099
malicious code or even in the file name

796
00:39:52,940 --> 00:39:56,779
if the function takes the file name and

797
00:39:55,099 --> 00:40:00,829
the file name is malicious you can

798
00:39:56,779 --> 00:40:04,130
actually get some cool attacks like that

799
00:40:00,829 --> 00:40:06,589
so I'm gonna do some go through some

800
00:40:04,130 --> 00:40:09,349
different attacks that we have in server

801
00:40:06,589 --> 00:40:12,410
lists they're not specifically the first

802
00:40:09,349 --> 00:40:15,500
top ten but we're trying to establish

803
00:40:12,410 --> 00:40:17,420
that now I'll mention that later so

804
00:40:15,500 --> 00:40:20,960
another big issue that we have with

805
00:40:17,420 --> 00:40:23,930
server less is that so yeah every

806
00:40:20,960 --> 00:40:27,589
function is about from what we saw is

807
00:40:23,930 --> 00:40:30,348
about from three five let's say five

808
00:40:27,589 --> 00:40:33,529
lines of code to three hundred lines of

809
00:40:30,349 --> 00:40:35,480
code this is the average so three it's

810
00:40:33,529 --> 00:40:37,099
because it's called some other function

811
00:40:35,480 --> 00:40:40,069
it's just a wrapper or something so

812
00:40:37,099 --> 00:40:43,220
let's say something between 20 line of

813
00:40:40,069 --> 00:40:46,038
code to 300 lines of code that's it

814
00:40:43,220 --> 00:40:47,990
pretty much what each function does but

815
00:40:46,039 --> 00:40:51,260
in in order to be able to do that they

816
00:40:47,990 --> 00:40:53,930
need to bring out a lot of dependencies

817
00:40:51,260 --> 00:40:56,420
with them because right you cannot

818
00:40:53,930 --> 00:40:58,279
really right so it's stateless so you

819
00:40:56,420 --> 00:41:00,380
cannot just get something from another

820
00:40:58,279 --> 00:41:02,329
way but

821
00:41:00,380 --> 00:41:04,519
you need the functions to be able to do

822
00:41:02,329 --> 00:41:06,319
this so you bring a lot and a lot of

823
00:41:04,519 --> 00:41:08,689
dependencies into your function your

824
00:41:06,319 --> 00:41:13,029
application and every function uses that

825
00:41:08,690 --> 00:41:15,950
this is a very big source for

826
00:41:13,029 --> 00:41:18,799
vulnerabilities so there are companies

827
00:41:15,950 --> 00:41:22,368
that does this vulnerability dependency

828
00:41:18,799 --> 00:41:26,150
check likes sneak or black duck which

829
00:41:22,369 --> 00:41:29,690
was acquired by synopsis and white

830
00:41:26,150 --> 00:41:32,989
source we also do that but there is an

831
00:41:29,690 --> 00:41:36,289
open database so the nice database that

832
00:41:32,989 --> 00:41:40,940
you can use the best ways to automate

833
00:41:36,289 --> 00:41:44,450
that of course open resources so as I

834
00:41:40,940 --> 00:41:46,460
mentioned if Nathalie bucket is open and

835
00:41:44,450 --> 00:41:49,038
you haven't figured it out

836
00:41:46,460 --> 00:41:52,450
someone can trigger your business logic

837
00:41:49,039 --> 00:41:55,700
or your code without you knowing and

838
00:41:52,450 --> 00:41:58,160
this could be apart from the fact that

839
00:41:55,700 --> 00:42:00,589
if your s3 bucket is open anyone can

840
00:41:58,160 --> 00:42:02,989
just download the files that in it they

841
00:42:00,589 --> 00:42:06,859
can actually run code and let's see you

842
00:42:02,989 --> 00:42:10,130
probably know showdown for IOT that you

843
00:42:06,859 --> 00:42:14,029
go and search for open IOT so fun thing

844
00:42:10,130 --> 00:42:17,180
is there is one for cloud storage so you

845
00:42:14,029 --> 00:42:21,200
can it's called grey hat warfare and you

846
00:42:17,180 --> 00:42:23,690
can just go through thousands and

847
00:42:21,200 --> 00:42:25,299
thousands of open buckets people that

848
00:42:23,690 --> 00:42:28,940
either that did it

849
00:42:25,299 --> 00:42:32,089
intentionally or not and you can go it

850
00:42:28,940 --> 00:42:34,789
goes like without limits alright so you

851
00:42:32,089 --> 00:42:38,269
can just click on one and if there are

852
00:42:34,789 --> 00:42:40,789
files inside let's take another one

853
00:42:38,269 --> 00:42:43,430
Ruiz free so you can see all the file

854
00:42:40,789 --> 00:42:46,400
inside right and you can just download

855
00:42:43,430 --> 00:42:48,319
them some of them are not oh yeah some

856
00:42:46,400 --> 00:42:52,369
of them are not there anymore some some

857
00:42:48,319 --> 00:42:56,180
of them are not sensitive but I just

858
00:42:52,369 --> 00:43:01,819
happen to this is a demo bug find some

859
00:42:56,180 --> 00:43:04,899
very funny and not funny files open yeah

860
00:43:01,819 --> 00:43:07,999
ok so we don't know what's inside but

861
00:43:04,900 --> 00:43:10,249
it's like show them so you can try your

862
00:43:07,999 --> 00:43:12,379
luck and there are hundreds of them or

863
00:43:10,249 --> 00:43:13,240
sorry one hundred and thousands and

864
00:43:12,380 --> 00:43:16,390
thousands of them

865
00:43:13,240 --> 00:43:21,700
that weren't supposed to be open so this

866
00:43:16,390 --> 00:43:28,150
is a big problem also there are ways to

867
00:43:21,700 --> 00:43:31,060
do few open an API REST API you can so

868
00:43:28,150 --> 00:43:33,070
the default of the REST API is without

869
00:43:31,060 --> 00:43:35,440
any authentication so it's good if it's

870
00:43:33,070 --> 00:43:37,780
just a informational application or

871
00:43:35,440 --> 00:43:41,260
something but in many cases you just

872
00:43:37,780 --> 00:43:43,360
build up a function you and deploy a

873
00:43:41,260 --> 00:43:45,460
function and the default state of it is

874
00:43:43,360 --> 00:43:49,240
it's open no other indication whatsoever

875
00:43:45,460 --> 00:43:51,119
in any one can trigger your functions so

876
00:43:49,240 --> 00:43:53,649
you need to be aware about that as well

877
00:43:51,119 --> 00:43:56,740
over privileged function this is a very

878
00:43:53,650 --> 00:43:59,260
very big issue here that we saw what it

879
00:43:56,740 --> 00:44:02,020
can cause but the biggest challenge here

880
00:43:59,260 --> 00:44:04,360
is that so yeah we can really find gray

881
00:44:02,020 --> 00:44:07,000
in it so you think about it if you can

882
00:44:04,360 --> 00:44:09,360
really make all your function this list

883
00:44:07,000 --> 00:44:12,340
privileged it's it would really really

884
00:44:09,360 --> 00:44:15,220
decrease your attack surface but how do

885
00:44:12,340 --> 00:44:17,350
you do that for hundreds and thousands

886
00:44:15,220 --> 00:44:20,439
of functions and you don't expect the

887
00:44:17,350 --> 00:44:23,190
developers to to own but to own the the

888
00:44:20,440 --> 00:44:26,410
permission I mean maybe you do in your

889
00:44:23,190 --> 00:44:29,260
organization level but the usual

890
00:44:26,410 --> 00:44:31,480
developers has no idea of what security

891
00:44:29,260 --> 00:44:34,750
is and this is why it's so fun for us

892
00:44:31,480 --> 00:44:38,770
and then how do you deal with it

893
00:44:34,750 --> 00:44:41,650
so again we believe you should automate

894
00:44:38,770 --> 00:44:45,670
it part of what we do is we scan your

895
00:44:41,650 --> 00:44:48,820
your code and we see what our API calls

896
00:44:45,670 --> 00:44:50,740
like service provider SDK API calls you

897
00:44:48,820 --> 00:44:53,980
are doing and then we match it with your

898
00:44:50,740 --> 00:44:57,430
permission and we say hey you only write

899
00:44:53,980 --> 00:45:00,400
to a dynamodb why do you need the wild

900
00:44:57,430 --> 00:45:02,830
card so the only way to do it is by

901
00:45:00,400 --> 00:45:05,020
automated sensitive that explode

902
00:45:02,830 --> 00:45:08,950
exposure it's not new everything that

903
00:45:05,020 --> 00:45:11,259
indica is in the cloud is prone to you

904
00:45:08,950 --> 00:45:14,560
know the data is out there so you need

905
00:45:11,260 --> 00:45:17,710
to beware again sensitive data here will

906
00:45:14,560 --> 00:45:19,690
be a little different so for for one

907
00:45:17,710 --> 00:45:24,250
fact that the source code is an inside

908
00:45:19,690 --> 00:45:26,520
environment and you don't want people to

909
00:45:24,250 --> 00:45:29,610
steal your code oh another thing

910
00:45:26,520 --> 00:45:32,370
that when the function goes up it's a

911
00:45:29,610 --> 00:45:35,430
read-only file system that you don't

912
00:45:32,370 --> 00:45:39,290
control but there is a one folder is the

913
00:45:35,430 --> 00:45:41,279
temp folder which is the right has right

914
00:45:39,290 --> 00:45:43,860
privileged of the functions can write

915
00:45:41,280 --> 00:45:45,930
into it so you can so most of the data

916
00:45:43,860 --> 00:45:50,310
is written to that file at that folder

917
00:45:45,930 --> 00:45:51,480
and sometimes people think hey we just I

918
00:45:50,310 --> 00:45:53,460
also said that right

919
00:45:51,480 --> 00:45:56,100
so the function goes write something to

920
00:45:53,460 --> 00:46:01,080
the slash temp folder and then the

921
00:45:56,100 --> 00:46:06,569
container dies right theoretically yes

922
00:46:01,080 --> 00:46:11,569
but and someone back then validated the

923
00:46:06,570 --> 00:46:14,940
90a for that but they don't they die and

924
00:46:11,570 --> 00:46:19,500
then in order to keep your performance

925
00:46:14,940 --> 00:46:21,810
level like high to give you a high

926
00:46:19,500 --> 00:46:24,000
performance level they are not really

927
00:46:21,810 --> 00:46:26,190
dying and they just waiting for someone

928
00:46:24,000 --> 00:46:28,260
else to call your function not

929
00:46:26,190 --> 00:46:31,080
necessarily the next one and randomly

930
00:46:28,260 --> 00:46:34,440
land there so you cannot control who is

931
00:46:31,080 --> 00:46:36,960
gonna land on that container but someone

932
00:46:34,440 --> 00:46:38,760
will and might not if your function

933
00:46:36,960 --> 00:46:41,970
doesn't run for a while that eventually

934
00:46:38,760 --> 00:46:44,430
it will get killed but if someone is not

935
00:46:41,970 --> 00:46:48,149
if your function is or your code is

936
00:46:44,430 --> 00:46:50,879
triggered more than once in four minutes

937
00:46:48,150 --> 00:46:53,340
that someone will land on the same

938
00:46:50,880 --> 00:46:56,520
container having the same file that you

939
00:46:53,340 --> 00:46:59,070
left behind and maybe steal them so you

940
00:46:56,520 --> 00:47:02,790
need to do some cleanup after your

941
00:46:59,070 --> 00:47:04,530
function runs right you now have wallet

942
00:47:02,790 --> 00:47:08,040
against denial of service so the attack

943
00:47:04,530 --> 00:47:10,730
here is different right the attack here

944
00:47:08,040 --> 00:47:13,440
is different so denial service

945
00:47:10,730 --> 00:47:15,360
you don't really attack the

946
00:47:13,440 --> 00:47:17,280
infrastructure right so I mean if you

947
00:47:15,360 --> 00:47:18,960
someone attack attacks us our

948
00:47:17,280 --> 00:47:21,210
application they really attacks the

949
00:47:18,960 --> 00:47:25,380
infrastructure providers or AWS or Azure

950
00:47:21,210 --> 00:47:28,800
so we don't care about it right but in

951
00:47:25,380 --> 00:47:31,320
order to prevent in our wallet because

952
00:47:28,800 --> 00:47:33,120
we pay for each call right so someone

953
00:47:31,320 --> 00:47:36,420
can just call I don't know

954
00:47:33,120 --> 00:47:38,339
unlimited loop our api's and we are

955
00:47:36,420 --> 00:47:40,110
gonna pay maybe a few tens

956
00:47:38,340 --> 00:47:42,480
but assent for each but eventually it

957
00:47:40,110 --> 00:47:45,390
can grow up so in order to prevent in

958
00:47:42,480 --> 00:47:48,060
our wallet what we have the service

959
00:47:45,390 --> 00:47:50,750
providers allows us to do either a

960
00:47:48,060 --> 00:47:55,710
budget limit to the specific function or

961
00:47:50,750 --> 00:47:59,100
account so if so if H is $100 stop it or

962
00:47:55,710 --> 00:48:00,960
if you want you can have a limited

963
00:47:59,100 --> 00:48:05,040
concurrency for your function so you can

964
00:48:00,960 --> 00:48:07,650
say I want only 10 parallel calls to the

965
00:48:05,040 --> 00:48:10,620
specific to this function so I won't

966
00:48:07,650 --> 00:48:12,150
have a denial of wallet here but then of

967
00:48:10,620 --> 00:48:13,970
course it's a trade off because someone

968
00:48:12,150 --> 00:48:16,290
can just trigger your function

969
00:48:13,970 --> 00:48:18,810
repeatedly and no one will else will be

970
00:48:16,290 --> 00:48:23,759
able to use your your function there is

971
00:48:18,810 --> 00:48:26,670
no real solution for that execution flow

972
00:48:23,760 --> 00:48:29,040
manipulation as I said the attacker can

973
00:48:26,670 --> 00:48:31,440
come from different weights so they can

974
00:48:29,040 --> 00:48:35,509
actually bypass part of the application

975
00:48:31,440 --> 00:48:38,670
flow it's more complicated now so I'll

976
00:48:35,510 --> 00:48:41,640
show you later how to interact with that

977
00:48:38,670 --> 00:48:44,390
to do to read about it it's a cure short

978
00:48:41,640 --> 00:48:46,259
space as I mentioned the slash tamp

979
00:48:44,390 --> 00:48:49,020
insufficient logging and monitoring

980
00:48:46,260 --> 00:48:51,480
these are just part of the top ten the

981
00:48:49,020 --> 00:48:54,750
original top ten and there are logging

982
00:48:51,480 --> 00:48:58,500
and monitoring of the of the

983
00:48:54,750 --> 00:49:00,540
cloud account but they are not just they

984
00:48:58,500 --> 00:49:02,550
can be visible to you but you need to

985
00:49:00,540 --> 00:49:04,320
know how to get them so it's not like

986
00:49:02,550 --> 00:49:05,550
someone is attacking your service and

987
00:49:04,320 --> 00:49:08,640
someone will say hey someone is

988
00:49:05,550 --> 00:49:12,420
attacking your service no you need to go

989
00:49:08,640 --> 00:49:16,470
over logs like sock sock while or a type

990
00:49:12,420 --> 00:49:18,900
or uses other solution like us and then

991
00:49:16,470 --> 00:49:21,240
see that someone is actually attacking

992
00:49:18,900 --> 00:49:24,150
your of your your functions or your

993
00:49:21,240 --> 00:49:26,609
application and insecure secret

994
00:49:24,150 --> 00:49:28,590
management as I said if you can put if

995
00:49:26,610 --> 00:49:30,900
you put secrets into your code or your

996
00:49:28,590 --> 00:49:34,860
environment variables and someone land

997
00:49:30,900 --> 00:49:36,870
someone sort someone got can exploit

998
00:49:34,860 --> 00:49:39,990
your function they can steal it so you

999
00:49:36,870 --> 00:49:42,210
can maybe encrypt them so there this is

1000
00:49:39,990 --> 00:49:44,729
another way to do that or you can use

1001
00:49:42,210 --> 00:49:49,020
some other vault like solution that

1002
00:49:44,730 --> 00:49:52,390
brings your your secrets in runtime

1003
00:49:49,020 --> 00:49:57,880
right that's it what you can do about it

1004
00:49:52,390 --> 00:50:00,339
so first of course don't panic we talked

1005
00:49:57,880 --> 00:50:02,080
a lot about it we really actually after

1006
00:50:00,340 --> 00:50:03,700
all this talk I showed you yeah it's not

1007
00:50:02,080 --> 00:50:06,000
secure but we actually believe that

1008
00:50:03,700 --> 00:50:08,529
service could be the most secure

1009
00:50:06,000 --> 00:50:11,920
infrastructure for your application our

1010
00:50:08,530 --> 00:50:14,980
solution is also several s 100% service

1011
00:50:11,920 --> 00:50:17,440
and I mean think about that you don't

1012
00:50:14,980 --> 00:50:19,780
need to invest in operation system and

1013
00:50:17,440 --> 00:50:21,700
patching or a Persian system security or

1014
00:50:19,780 --> 00:50:25,030
patching on or anything you just need to

1015
00:50:21,700 --> 00:50:28,480
be able to write secure code so yeah

1016
00:50:25,030 --> 00:50:32,530
security goes a long way but you can

1017
00:50:28,480 --> 00:50:35,170
limit it to secure code and then we I

1018
00:50:32,530 --> 00:50:39,130
show I write a lot of blogs and webinars

1019
00:50:35,170 --> 00:50:41,800
I'm doing about how to attack and how to

1020
00:50:39,130 --> 00:50:44,500
defend several applications so you can

1021
00:50:41,800 --> 00:50:48,220
read about it just launched recently Oh

1022
00:50:44,500 --> 00:50:51,430
a step service top ten we just released

1023
00:50:48,220 --> 00:50:54,730
our first draft last week or sorry this

1024
00:50:51,430 --> 00:50:57,370
week the first draft what it does it

1025
00:50:54,730 --> 00:51:00,550
goes to the original OS top ten that

1026
00:50:57,370 --> 00:51:04,029
hopefully most of you know I go one by

1027
00:51:00,550 --> 00:51:05,650
one and I show how they defer when we go

1028
00:51:04,030 --> 00:51:08,320
to service what are the new attack

1029
00:51:05,650 --> 00:51:10,420
services how to identify security issues

1030
00:51:08,320 --> 00:51:11,140
how do you protect against it because

1031
00:51:10,420 --> 00:51:13,690
it's different

1032
00:51:11,140 --> 00:51:15,700
Yukie I showed you one example so the

1033
00:51:13,690 --> 00:51:17,890
attack and the attack vectors are

1034
00:51:15,700 --> 00:51:20,319
different and the defense defenses

1035
00:51:17,890 --> 00:51:22,420
different mechanisms are different so if

1036
00:51:20,320 --> 00:51:25,150
you go and look and try to compare you

1037
00:51:22,420 --> 00:51:29,650
see that almost none of them are the

1038
00:51:25,150 --> 00:51:31,390
same so same application but different

1039
00:51:29,650 --> 00:51:33,730
techniques different attacks different

1040
00:51:31,390 --> 00:51:35,140
defense techniques right thank you

1041
00:51:33,730 --> 00:51:39,570
everyone

1042
00:51:35,140 --> 00:51:39,569
any questions yeah

1043
00:51:46,869 --> 00:51:53,720
yeah so depends on your service provider

1044
00:51:50,390 --> 00:51:57,200
AWS will allow you to integrate their

1045
00:51:53,720 --> 00:52:03,770
API Gateway firewall so you can use that

1046
00:51:57,200 --> 00:52:06,919
but it's only for API recalls and yeah

1047
00:52:03,770 --> 00:52:08,569
if this is the question that this is the

1048
00:52:06,920 --> 00:52:12,140
question then yeah you can use API

1049
00:52:08,569 --> 00:52:14,390
Gateway firewall for that specific not

1050
00:52:12,140 --> 00:52:19,009
all the service providers are having

1051
00:52:14,390 --> 00:52:20,960
that has that solution and it all yeah

1052
00:52:19,010 --> 00:52:24,010
so there are a lot of problems sorry one

1053
00:52:20,960 --> 00:52:27,109
second a lot of problem with Google GCP

1054
00:52:24,010 --> 00:52:28,400
also for example their current and

1055
00:52:27,109 --> 00:52:31,098
they're going to change it soon but

1056
00:52:28,400 --> 00:52:34,010
their current permission roles is one

1057
00:52:31,099 --> 00:52:36,140
per application so no matter what you

1058
00:52:34,010 --> 00:52:38,150
can do you can only give them one

1059
00:52:36,140 --> 00:52:40,520
permission to all the functions in your

1060
00:52:38,150 --> 00:52:42,349
application and they're gonna have to

1061
00:52:40,520 --> 00:52:45,650
all the abilities of all the rest of the

1062
00:52:42,349 --> 00:52:48,410
function so certain AWS is that one step

1063
00:52:45,650 --> 00:52:51,950
ahead of them but there are phases in

1064
00:52:48,410 --> 00:52:59,259
keeping up with them yeah one second

1065
00:52:51,950 --> 00:52:59,259
yeah we are

1066
00:53:10,310 --> 00:53:22,720
sorry I'm not sure I understood the

1067
00:53:12,020 --> 00:53:22,720
question I also have death deaf so yeah

1068
00:53:28,300 --> 00:53:33,620
it's not possible unless your fault your

1069
00:53:31,760 --> 00:53:36,170
whole application is really really small

1070
00:53:33,620 --> 00:53:38,870
because they are limited in terms of how

1071
00:53:36,170 --> 00:53:41,090
long they can run each function can run

1072
00:53:38,870 --> 00:53:45,140
up to the depending again depends on the

1073
00:53:41,090 --> 00:53:47,920
the the service provider it was up to

1074
00:53:45,140 --> 00:53:50,839
five minutes now it could be

1075
00:53:47,920 --> 00:53:53,540
it's a doubles just raise it to 15

1076
00:53:50,840 --> 00:53:56,720
minutes probably is it gonna increase

1077
00:53:53,540 --> 00:53:59,150
but I'm not sure this is the right way

1078
00:53:56,720 --> 00:54:06,589
to do that if you're going to do the

1079
00:53:59,150 --> 00:54:12,860
service yeah sorry

1080
00:54:06,590 --> 00:54:16,040
yeah what about it yeah of course you

1081
00:54:12,860 --> 00:54:19,460
can use source codes static analysis and

1082
00:54:16,040 --> 00:54:23,150
then you can fix your code but again it

1083
00:54:19,460 --> 00:54:24,890
will really limit your it's just like

1084
00:54:23,150 --> 00:54:27,260
any application do you think that if you

1085
00:54:24,890 --> 00:54:29,629
ran checkmarks we see very good about

1086
00:54:27,260 --> 00:54:31,520
source code static analysis gonna make

1087
00:54:29,630 --> 00:54:35,810
sure that you have no security issues in

1088
00:54:31,520 --> 00:54:37,880
your application they can help really

1089
00:54:35,810 --> 00:54:40,730
I'm just not sure that it's the only

1090
00:54:37,880 --> 00:54:51,560
solution you have to do other things as

1091
00:54:40,730 --> 00:54:54,140
well yeah all right nope yeah okay so

1092
00:54:51,560 --> 00:54:56,810
there is no standard again if you're

1093
00:54:54,140 --> 00:54:59,299
using only API gateway which is it's

1094
00:54:56,810 --> 00:55:01,640
kind of common but not not for new

1095
00:54:59,300 --> 00:55:04,190
companies that go there you can use

1096
00:55:01,640 --> 00:55:06,740
their solution there are FBI firewall

1097
00:55:04,190 --> 00:55:09,320
API Gateway firewall but behind that

1098
00:55:06,740 --> 00:55:11,540
there is no other solution if your

1099
00:55:09,320 --> 00:55:13,610
function is called from other things

1100
00:55:11,540 --> 00:55:15,620
there is guarantee I mean there is no

1101
00:55:13,610 --> 00:55:18,280
solution that the service provider will

1102
00:55:15,620 --> 00:55:20,600
give you you need to either in your code

1103
00:55:18,280 --> 00:55:23,720
make sure you know what you're doing so

1104
00:55:20,600 --> 00:55:27,020
validate it or run a solution like we

1105
00:55:23,720 --> 00:55:37,850
provide which protects your function at

1106
00:55:27,020 --> 00:55:41,509
runtime yeah yeah I mean that let's say

1107
00:55:37,850 --> 00:55:43,700
that you're someone is trying to do some

1108
00:55:41,510 --> 00:55:46,040
injections or attacks into your

1109
00:55:43,700 --> 00:55:50,299
functions how do you get that from you

1110
00:55:46,040 --> 00:55:52,490
don't have a control that looks for

1111
00:55:50,300 --> 00:55:56,270
patterns over the networks because you

1112
00:55:52,490 --> 00:55:58,310
don't own it so how do you know so you

1113
00:55:56,270 --> 00:56:01,310
have a few ways to do that and the

1114
00:55:58,310 --> 00:56:04,700
easiest one would be probably it easiest

1115
00:56:01,310 --> 00:56:07,850
the technology was maybe not easiest

1116
00:56:04,700 --> 00:56:10,700
like in doing that actually doing that

1117
00:56:07,850 --> 00:56:14,240
because it's it's gonna be tough to find

1118
00:56:10,700 --> 00:56:16,700
it it's going through the logs that you

1119
00:56:14,240 --> 00:56:18,990
have certain log services so the a just

1120
00:56:16,700 --> 00:56:22,410
the cloud provider has

1121
00:56:18,990 --> 00:56:24,560
log services that they give you and by

1122
00:56:22,410 --> 00:56:27,540
default every function that you're right

1123
00:56:24,560 --> 00:56:30,509
automatically writes to its specific log

1124
00:56:27,540 --> 00:56:32,700
and you can then go to the log service

1125
00:56:30,510 --> 00:56:34,980
and then try to find out that someone

1126
00:56:32,700 --> 00:56:37,710
attacks you but it's hard to do it in

1127
00:56:34,980 --> 00:56:40,020
real time if you have hundreds and

1128
00:56:37,710 --> 00:56:42,300
hundreds of function running and

1129
00:56:40,020 --> 00:56:44,730
invoking location repeatedly so how do

1130
00:56:42,300 --> 00:56:46,410
you find it so you don't actually you

1131
00:56:44,730 --> 00:56:49,230
don't find it so you need some someone

1132
00:56:46,410 --> 00:56:52,040
to give you this insight so there are

1133
00:56:49,230 --> 00:56:56,900
other solutions we're not the only one

1134
00:56:52,040 --> 00:56:59,360
but we're the best any other question

1135
00:56:56,900 --> 00:57:02,469
thank you everyone

1136
00:56:59,360 --> 00:57:02,469
[Applause]

