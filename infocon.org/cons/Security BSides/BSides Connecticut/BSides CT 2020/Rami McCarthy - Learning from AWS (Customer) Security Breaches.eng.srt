1
00:00:00,240 --> 00:00:02,159
uh but let's introduce our next speaker

2
00:00:02,159 --> 00:00:04,319
uh ramy mcmccarthy he's going to be

3
00:00:04,319 --> 00:00:04,880
speaking

4
00:00:04,880 --> 00:00:07,680
on learning from aws customer security

5
00:00:07,680 --> 00:00:08,559
breaches

6
00:00:08,559 --> 00:00:10,480
uh in light of the increasing cloud

7
00:00:10,480 --> 00:00:11,679
adoption there have been

8
00:00:11,679 --> 00:00:14,320
a broad coverage in on a compromise of

9
00:00:14,320 --> 00:00:16,640
customer environments in the cloud

10
00:00:16,640 --> 00:00:19,199
anything from the simplest open s3

11
00:00:19,199 --> 00:00:20,240
buckets to

12
00:00:20,240 --> 00:00:22,960
deeper and much broader tactics that are

13
00:00:22,960 --> 00:00:24,720
used by attackers and researchers to

14
00:00:24,720 --> 00:00:27,199
compromise cloud environments

15
00:00:27,199 --> 00:00:29,920
so this talk will focus on aws and

16
00:00:29,920 --> 00:00:30,960
discuss over

17
00:00:30,960 --> 00:00:33,200
a different dozen different public

18
00:00:33,200 --> 00:00:34,960
breaches so let's welcome

19
00:00:34,960 --> 00:00:38,000
ramy mccarthy thank you

20
00:00:38,960 --> 00:00:42,559
hi folks let me

21
00:00:42,559 --> 00:00:47,199
get my slides up on screen

22
00:00:52,079 --> 00:00:54,640
awesome so thank you for the

23
00:00:54,640 --> 00:00:55,520
introduction

24
00:00:55,520 --> 00:00:57,039
thanks everyone for tuning in to this

25
00:00:57,039 --> 00:00:58,399
talk and of course thank you to the

26
00:00:58,399 --> 00:01:00,239
organizers of b-sides connecticut for

27
00:01:00,239 --> 00:01:01,840
putting this all together and for having

28
00:01:01,840 --> 00:01:02,480
me

29
00:01:02,480 --> 00:01:05,040
this talk is learning it from aws

30
00:01:05,040 --> 00:01:07,280
customer security incidents and we'll

31
00:01:07,280 --> 00:01:09,119
dive right in

32
00:01:09,119 --> 00:01:10,960
uh first before we get into the core

33
00:01:10,960 --> 00:01:13,040
content some quick background on me

34
00:01:13,040 --> 00:01:15,040
my name is ramy mccarthy and i'm a

35
00:01:15,040 --> 00:01:16,960
former security consultant turned

36
00:01:16,960 --> 00:01:18,640
product security engineer

37
00:01:18,640 --> 00:01:21,119
i'm aws certified in security and hold

38
00:01:21,119 --> 00:01:22,479
the ccsk

39
00:01:22,479 --> 00:01:24,799
from the cloud security alliance i'm

40
00:01:24,799 --> 00:01:26,640
also the creator of sad cloud which is

41
00:01:26,640 --> 00:01:28,560
an open source tool that lets you create

42
00:01:28,560 --> 00:01:31,280
configurably insecure aws

43
00:01:31,280 --> 00:01:33,520
environments via terraform and i'm

44
00:01:33,520 --> 00:01:35,280
contributor to scout suite which is an

45
00:01:35,280 --> 00:01:39,360
open source multi-cloud auditing tool

46
00:01:39,439 --> 00:01:42,079
so let's talk aws customer security

47
00:01:42,079 --> 00:01:42,640
breaches

48
00:01:42,640 --> 00:01:44,880
here's the plan for the next 28 or so

49
00:01:44,880 --> 00:01:46,000
minutes

50
00:01:46,000 --> 00:01:48,399
first we'll do a quick background on the

51
00:01:48,399 --> 00:01:50,479
cloud and aws security

52
00:01:50,479 --> 00:01:53,200
to baseline everything then i'll

53
00:01:53,200 --> 00:01:54,000
introduce the main

54
00:01:54,000 --> 00:01:56,880
topic of aws security instance i'll

55
00:01:56,880 --> 00:01:58,880
detour and tip my hat to some prior art

56
00:01:58,880 --> 00:01:59,759
on this topic

57
00:01:59,759 --> 00:02:01,360
and then dive in and we'll go through

58
00:02:01,360 --> 00:02:02,960
the case studies that make up the meat

59
00:02:02,960 --> 00:02:04,240
of this talk

60
00:02:04,240 --> 00:02:06,320
finally we'll pull out some trends from

61
00:02:06,320 --> 00:02:07,439
these cases and i'll give

62
00:02:07,439 --> 00:02:09,520
recommendations to address what we find

63
00:02:09,520 --> 00:02:11,599
are the most common causes of real world

64
00:02:11,599 --> 00:02:14,720
aws breaches

65
00:02:14,720 --> 00:02:19,520
so we need to start by

66
00:02:19,920 --> 00:02:21,360
we need to start by establishing a

67
00:02:21,360 --> 00:02:23,280
working definition of the cloud

68
00:02:23,280 --> 00:02:25,440
in essence the cloud is just software

69
00:02:25,440 --> 00:02:26,959
and services that are running on the

70
00:02:26,959 --> 00:02:28,640
internet as opposed to locally on your

71
00:02:28,640 --> 00:02:30,480
computer or private network

72
00:02:30,480 --> 00:02:33,040
that's the entire difference in this

73
00:02:33,040 --> 00:02:34,840
talk we'll be focusing on

74
00:02:34,840 --> 00:02:37,840
aws which is the largest public cloud

75
00:02:37,840 --> 00:02:39,519
provider by market share

76
00:02:39,519 --> 00:02:41,280
about you know a third or more of all

77
00:02:41,280 --> 00:02:42,959
companies working in the cloud or

78
00:02:42,959 --> 00:02:44,800
running on aws

79
00:02:44,800 --> 00:02:47,519
so while we're looking at aws here and

80
00:02:47,519 --> 00:02:49,440
the cases we'll be looking at are all

81
00:02:49,440 --> 00:02:51,040
aws specific

82
00:02:51,040 --> 00:02:52,400
i do expect that many of the

83
00:02:52,400 --> 00:02:54,640
vulnerability trends and recommendations

84
00:02:54,640 --> 00:02:56,080
will be generalizable

85
00:02:56,080 --> 00:02:57,920
out to the broader cloud computing

86
00:02:57,920 --> 00:02:59,360
landscape

87
00:02:59,360 --> 00:03:01,440
it's important to note this talk isn't

88
00:03:01,440 --> 00:03:02,720
intended to

89
00:03:02,720 --> 00:03:05,920
criticize aws or compare aws its general

90
00:03:05,920 --> 00:03:07,040
security posture

91
00:03:07,040 --> 00:03:10,239
to any other cloud provider um but

92
00:03:10,239 --> 00:03:12,800
as aws is the dominant platform

93
00:03:12,800 --> 00:03:13,519
currently

94
00:03:13,519 --> 00:03:15,680
it has the most public examples we can

95
00:03:15,680 --> 00:03:18,720
pull from so

96
00:03:18,720 --> 00:03:20,879
uh before we get into examples this is

97
00:03:20,879 --> 00:03:22,560
the shared responsibility model

98
00:03:22,560 --> 00:03:24,640
and every talk about aws should start

99
00:03:24,640 --> 00:03:26,239
with a discussion of the shared

100
00:03:26,239 --> 00:03:27,760
responsibility model

101
00:03:27,760 --> 00:03:30,159
it comes directly from aws and its

102
00:03:30,159 --> 00:03:32,080
purpose is to break down

103
00:03:32,080 --> 00:03:34,080
in detail the balance of responsibility

104
00:03:34,080 --> 00:03:35,760
and securing your cloud

105
00:03:35,760 --> 00:03:38,959
account between you and aws

106
00:03:38,959 --> 00:03:41,920
as you can see based on this visual aws

107
00:03:41,920 --> 00:03:43,519
is responsible for securing

108
00:03:43,519 --> 00:03:46,000
underlying resources and services well

109
00:03:46,000 --> 00:03:48,400
you the customer need to own security

110
00:03:48,400 --> 00:03:49,040
for

111
00:03:49,040 --> 00:03:51,840
your workloads as well as configuration

112
00:03:51,840 --> 00:03:54,159
that means that when you operate in aws

113
00:03:54,159 --> 00:03:55,840
you don't have to worry about you know

114
00:03:55,840 --> 00:03:57,760
securing data centers

115
00:03:57,760 --> 00:04:00,560
for services like s3 you don't need to

116
00:04:00,560 --> 00:04:01,599
be concerned

117
00:04:01,599 --> 00:04:04,640
directly with api security or the

118
00:04:04,640 --> 00:04:05,840
security of the underlying

119
00:04:05,840 --> 00:04:06,879
infrastructure

120
00:04:06,879 --> 00:04:08,959
however you're still responsible for

121
00:04:08,959 --> 00:04:10,000
configuration

122
00:04:10,000 --> 00:04:11,840
and that includes authentication

123
00:04:11,840 --> 00:04:14,319
authorization firewalls

124
00:04:14,319 --> 00:04:17,040
and a bunch of other things the focus of

125
00:04:17,040 --> 00:04:19,040
this talk is going to fall entirely on

126
00:04:19,040 --> 00:04:22,959
the customer side of this model

127
00:04:23,360 --> 00:04:28,560
so before we talk about specific cases

128
00:04:28,560 --> 00:04:30,080
there are a few points i want to hammer

129
00:04:30,080 --> 00:04:31,680
on first

130
00:04:31,680 --> 00:04:33,600
uh the cases we discussed do not

131
00:04:33,600 --> 00:04:35,600
represent any breach or exploitation of

132
00:04:35,600 --> 00:04:37,360
aws itself

133
00:04:37,360 --> 00:04:39,040
i'm not gonna be talking about any you

134
00:04:39,040 --> 00:04:41,600
know zero days in aws

135
00:04:41,600 --> 00:04:44,320
instead they're instances of specific

136
00:04:44,320 --> 00:04:46,800
incidents with individual customers

137
00:04:46,800 --> 00:04:48,400
and this is generally going to be due to

138
00:04:48,400 --> 00:04:49,840
their usage of aws

139
00:04:49,840 --> 00:04:51,440
or how they configure the services

140
00:04:51,440 --> 00:04:54,240
they're using and in some cases due to

141
00:04:54,240 --> 00:04:56,400
unrelated security posture of these

142
00:04:56,400 --> 00:04:59,040
companies at the time

143
00:04:59,040 --> 00:05:01,440
i also want to make sure we enter this

144
00:05:01,440 --> 00:05:03,520
conversation with empathy

145
00:05:03,520 --> 00:05:05,199
incidents happen and there's no such

146
00:05:05,199 --> 00:05:06,960
thing as perfect security

147
00:05:06,960 --> 00:05:08,560
my goal is to keep this talk in line

148
00:05:08,560 --> 00:05:10,400
with this you know principal blameless

149
00:05:10,400 --> 00:05:11,840
postmortems

150
00:05:11,840 --> 00:05:13,360
on this slide is a discussion of the

151
00:05:13,360 --> 00:05:14,960
concept pulled from

152
00:05:14,960 --> 00:05:17,120
google's site reliable and site

153
00:05:17,120 --> 00:05:19,520
reliability engineering book

154
00:05:19,520 --> 00:05:21,759
blameless postmortems focus on the root

155
00:05:21,759 --> 00:05:23,039
cause of an issue

156
00:05:23,039 --> 00:05:25,120
and try to remove any focus on the you

157
00:05:25,120 --> 00:05:26,800
know people involved

158
00:05:26,800 --> 00:05:28,800
this is based on the idea that incidents

159
00:05:28,800 --> 00:05:31,120
are not the result of individuals but

160
00:05:31,120 --> 00:05:32,400
are broader failures of

161
00:05:32,400 --> 00:05:35,520
process technology etc and these

162
00:05:35,520 --> 00:05:37,440
instances should be owned by the whole

163
00:05:37,440 --> 00:05:38,080
organization

164
00:05:38,080 --> 00:05:40,720
and looked at holistically with that

165
00:05:40,720 --> 00:05:41,520
said

166
00:05:41,520 --> 00:05:42,720
we're going to talk about some public

167
00:05:42,720 --> 00:05:44,880
ews security incidents and

168
00:05:44,880 --> 00:05:47,280
uh you know i appreciate the those of

169
00:05:47,280 --> 00:05:48,720
these organizations that released

170
00:05:48,720 --> 00:05:50,479
postmortems publicly that sort of

171
00:05:50,479 --> 00:05:52,000
transparency is super valuable

172
00:05:52,000 --> 00:05:54,240
to us all and so i really want to

173
00:05:54,240 --> 00:05:55,840
highlight that as a positive as opposed

174
00:05:55,840 --> 00:05:57,840
to criticize any of the organizations

175
00:05:57,840 --> 00:05:58,400
who

176
00:05:58,400 --> 00:05:59,919
you know have unfortunately suffered a

177
00:05:59,919 --> 00:06:02,240
breach

178
00:06:02,319 --> 00:06:04,479
first i want to touch on the most common

179
00:06:04,479 --> 00:06:07,039
and most publicized incidents in aws as

180
00:06:07,039 --> 00:06:08,479
a broad class

181
00:06:08,479 --> 00:06:10,400
which is the accidental exposure of

182
00:06:10,400 --> 00:06:11,520
sensitive data by

183
00:06:11,520 --> 00:06:14,400
misconfigured services which allow

184
00:06:14,400 --> 00:06:16,319
unintentional public access

185
00:06:16,319 --> 00:06:18,319
this is most broadly discussed through

186
00:06:18,319 --> 00:06:19,600
the numerous

187
00:06:19,600 --> 00:06:22,160
you know broadly covered examples of s3

188
00:06:22,160 --> 00:06:23,840
buckets being open

189
00:06:23,840 --> 00:06:26,160
and breached but can also include things

190
00:06:26,160 --> 00:06:28,319
like misconfigured elastic search

191
00:06:28,319 --> 00:06:29,520
clusters

192
00:06:29,520 --> 00:06:31,120
i'm not going to explore these in depth

193
00:06:31,120 --> 00:06:32,720
in this talk just because i think it's

194
00:06:32,720 --> 00:06:34,160
been covered at length

195
00:06:34,160 --> 00:06:37,360
the links on the slides there do

196
00:06:37,360 --> 00:06:39,360
give you some kind of compilations of

197
00:06:39,360 --> 00:06:40,800
these sorts of interests if that's

198
00:06:40,800 --> 00:06:42,240
something that piques your interest and

199
00:06:42,240 --> 00:06:43,840
you're looking to learn more

200
00:06:43,840 --> 00:06:45,440
i'll also share these slides at the end

201
00:06:45,440 --> 00:06:47,280
of the talk so all these links will be

202
00:06:47,280 --> 00:06:49,680
accessible

203
00:06:49,680 --> 00:06:51,120
the other type of instant i want to

204
00:06:51,120 --> 00:06:52,880
highlight without going into specific

205
00:06:52,880 --> 00:06:53,919
cases really

206
00:06:53,919 --> 00:06:56,880
is ransomware ransomware is a type of

207
00:06:56,880 --> 00:06:58,560
malware that steals data

208
00:06:58,560 --> 00:07:00,880
encrypts it or both and then threatens

209
00:07:00,880 --> 00:07:02,720
to release or retain that data unless

210
00:07:02,720 --> 00:07:04,960
the attacker is paid a ransom

211
00:07:04,960 --> 00:07:07,280
ransomware is most commonly discussed in

212
00:07:07,280 --> 00:07:08,639
traditional environments

213
00:07:08,639 --> 00:07:10,639
recently it was in the news due to

214
00:07:10,639 --> 00:07:13,039
hitting a lot of hospital networks

215
00:07:13,039 --> 00:07:16,000
but ransomware can also target cloud

216
00:07:16,000 --> 00:07:17,520
environments and is growing more common

217
00:07:17,520 --> 00:07:18,160
there

218
00:07:18,160 --> 00:07:20,240
there's no good single case to discuss

219
00:07:20,240 --> 00:07:22,400
because this is a more recent trend

220
00:07:22,400 --> 00:07:24,400
but i won't give the high level

221
00:07:24,400 --> 00:07:26,400
ransomware can target either aws

222
00:07:26,400 --> 00:07:28,800
services or user managed resources

223
00:07:28,800 --> 00:07:30,160
running in aws

224
00:07:30,160 --> 00:07:33,520
so you know your redshift or maybe rds

225
00:07:33,520 --> 00:07:36,080
is an aws service that could be targeted

226
00:07:36,080 --> 00:07:38,000
or if you're running my sql server

227
00:07:38,000 --> 00:07:40,160
on an ec2 instance in the cloud that

228
00:07:40,160 --> 00:07:42,160
also could be a target

229
00:07:42,160 --> 00:07:44,400
generally the root cause here i've seen

230
00:07:44,400 --> 00:07:46,160
is internet exposure combined with a

231
00:07:46,160 --> 00:07:47,759
weak password

232
00:07:47,759 --> 00:07:50,000
uh and then of course a brute force

233
00:07:50,000 --> 00:07:51,919
attack against that password grants the

234
00:07:51,919 --> 00:07:53,840
attacker access and they can start you

235
00:07:53,840 --> 00:07:54,879
know ransoming the

236
00:07:54,879 --> 00:07:57,919
database i've linked to some forum

237
00:07:57,919 --> 00:07:59,599
threads with users reporting this in

238
00:07:59,599 --> 00:08:01,120
their environment just to show you that

239
00:08:01,120 --> 00:08:01,440
this

240
00:08:01,440 --> 00:08:04,400
is an active threat and i've also heard

241
00:08:04,400 --> 00:08:06,000
from some peers who've seen this happen

242
00:08:06,000 --> 00:08:07,680
at their companies but those incidents

243
00:08:07,680 --> 00:08:08,879
aren't public yet

244
00:08:08,879 --> 00:08:10,720
it's definitely something to be aware of

245
00:08:10,720 --> 00:08:12,000
on the horizon

246
00:08:12,000 --> 00:08:13,680
but again there just aren't some good

247
00:08:13,680 --> 00:08:17,840
cases to point to so i call it out here

248
00:08:17,919 --> 00:08:19,520
as promised i want to provide some

249
00:08:19,520 --> 00:08:21,520
pointers to other discussions on this

250
00:08:21,520 --> 00:08:23,360
topic and you know tip my hat

251
00:08:23,360 --> 00:08:25,599
to previous talks and perspectives on

252
00:08:25,599 --> 00:08:28,560
aws customer security incidents

253
00:08:28,560 --> 00:08:30,960
first off spencer gave a forward-looking

254
00:08:30,960 --> 00:08:33,919
talk at defcon's cloud village this year

255
00:08:33,919 --> 00:08:35,919
where he discusses kind of what the

256
00:08:35,919 --> 00:08:37,519
future of ransomware in the cloud will

257
00:08:37,519 --> 00:08:38,320
look like

258
00:08:38,320 --> 00:08:40,080
with the mechanisms for ransom in the

259
00:08:40,080 --> 00:08:41,599
cloud are

260
00:08:41,599 --> 00:08:43,679
if my earlier mention of ransomware if

261
00:08:43,679 --> 00:08:45,360
this is a talk that interests you

262
00:08:45,360 --> 00:08:47,920
spencer's talk's a good place to start

263
00:08:47,920 --> 00:08:48,640
there were also

264
00:08:48,640 --> 00:08:51,920
two talks on cloud security incidents at

265
00:08:51,920 --> 00:08:54,080
the sans cloud security summit this year

266
00:08:54,080 --> 00:08:56,080
first from dave shackleford

267
00:08:56,080 --> 00:09:00,240
and then from firearm india um

268
00:09:00,240 --> 00:09:02,080
and james condon gave this talk at the

269
00:09:02,080 --> 00:09:04,000
inaugural forward cloud set conference

270
00:09:04,000 --> 00:09:05,519
this year where he highlighted some

271
00:09:05,519 --> 00:09:08,800
cloud threat actors

272
00:09:08,800 --> 00:09:11,279
finally f5 included a bunch of instances

273
00:09:11,279 --> 00:09:12,080
part of their

274
00:09:12,080 --> 00:09:15,120
is the cloud safe series uh and again

275
00:09:15,120 --> 00:09:17,440
all of these uh all the instances in all

276
00:09:17,440 --> 00:09:18,800
of these talks are gonna be present in

277
00:09:18,800 --> 00:09:20,399
this presentation but they're a place to

278
00:09:20,399 --> 00:09:23,279
go to learn more

279
00:09:23,279 --> 00:09:25,200
now it's time to move on to sort of the

280
00:09:25,200 --> 00:09:26,880
main event here which is going to be a

281
00:09:26,880 --> 00:09:29,839
survey of aws customer security instance

282
00:09:29,839 --> 00:09:32,080
for each one i'll give you a pointer for

283
00:09:32,080 --> 00:09:33,440
where to learn more but i'm going to

284
00:09:33,440 --> 00:09:33,839
cover

285
00:09:33,839 --> 00:09:36,240
just the initial vector of compromise

286
00:09:36,240 --> 00:09:38,560
any escalation or pivoting mechanisms

287
00:09:38,560 --> 00:09:39,839
that were used

288
00:09:39,839 --> 00:09:42,399
and the resultant impact as a result of

289
00:09:42,399 --> 00:09:45,760
the breach or incident

290
00:09:46,240 --> 00:09:48,640
so the first one we have to talk about

291
00:09:48,640 --> 00:09:50,480
is probably the example most people will

292
00:09:50,480 --> 00:09:52,240
be likely to be familiar with which is

293
00:09:52,240 --> 00:09:55,200
last year's capital one breach in august

294
00:09:55,200 --> 00:09:57,200
of last year a former aws

295
00:09:57,200 --> 00:09:59,680
employee exploited a misconfigured

296
00:09:59,680 --> 00:10:01,680
instance of mod security which is an

297
00:10:01,680 --> 00:10:04,480
open source web application firewall

298
00:10:04,480 --> 00:10:06,240
and this was misconfigured in a way that

299
00:10:06,240 --> 00:10:08,000
let them perform an ssrf

300
00:10:08,000 --> 00:10:10,160
attack on the metadata service and to

301
00:10:10,160 --> 00:10:11,279
break that down a little more

302
00:10:11,279 --> 00:10:13,360
a server side request forgery attack is

303
00:10:13,360 --> 00:10:15,839
where the attacker manages to get

304
00:10:15,839 --> 00:10:18,320
a victim server to make responses on

305
00:10:18,320 --> 00:10:18,959
their

306
00:10:18,959 --> 00:10:21,040
behalf and return the response they can

307
00:10:21,040 --> 00:10:23,200
control the victim server

308
00:10:23,200 --> 00:10:25,440
to that extent in aws this was

309
00:10:25,440 --> 00:10:27,920
particularly high impact as an ssrf

310
00:10:27,920 --> 00:10:29,680
vulnerability could retrieve the

311
00:10:29,680 --> 00:10:31,600
credentials that were connected to an

312
00:10:31,600 --> 00:10:34,720
instance and then gave the attacker aws

313
00:10:34,720 --> 00:10:36,160
permissions

314
00:10:36,160 --> 00:10:37,680
in this case the role stored in the

315
00:10:37,680 --> 00:10:39,279
metadata service was

316
00:10:39,279 --> 00:10:40,880
over permissions this is a web

317
00:10:40,880 --> 00:10:43,120
application firewall that had some aws

318
00:10:43,120 --> 00:10:44,640
permissions

319
00:10:44,640 --> 00:10:46,560
but for whatever reason in this

320
00:10:46,560 --> 00:10:48,399
environment those permissions included

321
00:10:48,399 --> 00:10:50,480
undue access to sensitive data from

322
00:10:50,480 --> 00:10:52,320
capital one's s3 buckets

323
00:10:52,320 --> 00:10:54,320
the data included over 100 million

324
00:10:54,320 --> 00:10:55,760
credit card applications that were

325
00:10:55,760 --> 00:10:57,600
stored in s3 with all sorts of

326
00:10:57,600 --> 00:11:00,959
uh you know sensitive data thankfully

327
00:11:00,959 --> 00:11:01,760
the attacker

328
00:11:01,760 --> 00:11:04,560
was arrested and had never spread the

329
00:11:04,560 --> 00:11:06,640
data so this didn't make it into broader

330
00:11:06,640 --> 00:11:08,000
distribution but

331
00:11:08,000 --> 00:11:10,320
um is still a really notable incident

332
00:11:10,320 --> 00:11:12,839
and got a ton of press coverage at the

333
00:11:12,839 --> 00:11:14,480
time

334
00:11:14,480 --> 00:11:16,320
this next case is pretty much a worst

335
00:11:16,320 --> 00:11:18,320
case scenario and is often bandied about

336
00:11:18,320 --> 00:11:20,720
as a horror story effectively

337
00:11:20,720 --> 00:11:24,000
cloud spaces sorry code spaces was a

338
00:11:24,000 --> 00:11:26,320
cloud-based code hosting collaboration

339
00:11:26,320 --> 00:11:27,120
company

340
00:11:27,120 --> 00:11:28,399
and they were breached all the way back

341
00:11:28,399 --> 00:11:30,320
in 2014.

342
00:11:30,320 --> 00:11:33,440
attackers somehow gained access to aws

343
00:11:33,440 --> 00:11:35,040
console credentials

344
00:11:35,040 --> 00:11:36,880
for code spaces through an unknown

345
00:11:36,880 --> 00:11:39,279
vector a lot of peel suspects

346
00:11:39,279 --> 00:11:41,920
phishing but we don't know that for sure

347
00:11:41,920 --> 00:11:44,160
they also simultaneously were performing

348
00:11:44,160 --> 00:11:46,240
a denial of service attack that was

349
00:11:46,240 --> 00:11:49,279
you know a distraction for this breach

350
00:11:49,279 --> 00:11:51,519
the attackers created backup logins

351
00:11:51,519 --> 00:11:53,440
additional accounts and keys

352
00:11:53,440 --> 00:11:55,519
and when codespaces attempted to regain

353
00:11:55,519 --> 00:11:57,120
control of the account

354
00:11:57,120 --> 00:11:58,959
the attackers began wiping data s3

355
00:11:58,959 --> 00:12:00,800
buckets ec2 instances

356
00:12:00,800 --> 00:12:04,000
snapshots in the end codespaces was

357
00:12:04,000 --> 00:12:06,000
actually completely unable to recover

358
00:12:06,000 --> 00:12:07,600
and went out of business as a result

359
00:12:07,600 --> 00:12:09,360
which is why this is such a notable

360
00:12:09,360 --> 00:12:13,120
incident it's it's shown

361
00:12:13,120 --> 00:12:15,760
that the consequences of a breach can

362
00:12:15,760 --> 00:12:16,240
you know

363
00:12:16,240 --> 00:12:19,760
ruin your company effectively

364
00:12:20,240 --> 00:12:22,639
next up is the dmc hacked by the greu

365
00:12:22,639 --> 00:12:25,040
during the 2016 election

366
00:12:25,040 --> 00:12:26,800
i pulled these details actually from the

367
00:12:26,800 --> 00:12:28,480
dnc's lawsuit

368
00:12:28,480 --> 00:12:30,399
which is linked at the bottom there the

369
00:12:30,399 --> 00:12:33,120
initial vector here wasn't disclosed but

370
00:12:33,120 --> 00:12:34,800
the result was a compromise of

371
00:12:34,800 --> 00:12:37,760
test instances of tableau and vertica

372
00:12:37,760 --> 00:12:39,360
which were being used for some data

373
00:12:39,360 --> 00:12:40,480
analysis

374
00:12:40,480 --> 00:12:43,360
the attackers exfiltrated the data by

375
00:12:43,360 --> 00:12:44,399
copying

376
00:12:44,399 --> 00:12:47,040
ec2 snapshots to accounts they

377
00:12:47,040 --> 00:12:48,000
controlled

378
00:12:48,000 --> 00:12:50,800
and they walked away with not sensitive

379
00:12:50,800 --> 00:12:52,880
data but actually the queries themselves

380
00:12:52,880 --> 00:12:54,480
which were considered sensitive by the

381
00:12:54,480 --> 00:12:55,360
dnc

382
00:12:55,360 --> 00:12:57,680
as they gave away some strategic you

383
00:12:57,680 --> 00:12:59,760
know signals

384
00:12:59,760 --> 00:13:01,120
and this was only with the breach of a

385
00:13:01,120 --> 00:13:02,880
test cluster so again something to think

386
00:13:02,880 --> 00:13:03,600
about there

387
00:13:03,600 --> 00:13:05,360
a lot of people secure their test and

388
00:13:05,360 --> 00:13:07,120
production environments differently

389
00:13:07,120 --> 00:13:08,560
this goes to show that you need to be

390
00:13:08,560 --> 00:13:10,079
really conscious of where your sensitive

391
00:13:10,079 --> 00:13:11,760
data lies what you care about and how

392
00:13:11,760 --> 00:13:14,480
you protect it

393
00:13:14,720 --> 00:13:16,720
the data dog case is in my opinion a

394
00:13:16,720 --> 00:13:18,800
much more standard example of an aws

395
00:13:18,800 --> 00:13:20,639
security breach datadog had an

396
00:13:20,639 --> 00:13:24,079
incident in 2016 where the aws access

397
00:13:24,079 --> 00:13:24,560
key

398
00:13:24,560 --> 00:13:27,839
and an ssh private key used for their ci

399
00:13:27,839 --> 00:13:28,800
cd pipeline

400
00:13:28,800 --> 00:13:31,519
think something like jenkins were leaked

401
00:13:31,519 --> 00:13:32,959
however

402
00:13:32,959 --> 00:13:34,639
they don't know exactly how these were

403
00:13:34,639 --> 00:13:36,399
leaked or at least it wasn't disclosed

404
00:13:36,399 --> 00:13:38,079
but generally this is via

405
00:13:38,079 --> 00:13:39,760
accidental commits to public give

406
00:13:39,760 --> 00:13:41,839
repositories which we'll see and discuss

407
00:13:41,839 --> 00:13:44,000
in some of the other cases

408
00:13:44,000 --> 00:13:47,040
the attacker in this case was able to

409
00:13:47,040 --> 00:13:49,760
use the keys to access a small subset of

410
00:13:49,760 --> 00:13:51,839
ec2 instances and s3 buckets and

411
00:13:51,839 --> 00:13:53,920
datadog's account and then tried to use

412
00:13:53,920 --> 00:13:55,279
that access to pivot

413
00:13:55,279 --> 00:13:56,880
with customer credentials because

414
00:13:56,880 --> 00:14:00,000
datadog is sas software

415
00:14:00,000 --> 00:14:02,079
that was unsuccessful thankfully and the

416
00:14:02,079 --> 00:14:04,000
attack took place over just like seven

417
00:14:04,000 --> 00:14:04,480
or so

418
00:14:04,480 --> 00:14:06,720
hours um and was identified in

419
00:14:06,720 --> 00:14:10,160
quarantine shortly after

420
00:14:11,199 --> 00:14:14,720
uber had a 2016 aws

421
00:14:14,720 --> 00:14:16,560
incident which wasn't disclosed until

422
00:14:16,560 --> 00:14:18,079
2017.

423
00:14:18,079 --> 00:14:20,880
here again we're seeing aws credentials

424
00:14:20,880 --> 00:14:23,279
accessed via a git repository

425
00:14:23,279 --> 00:14:24,880
in this case it was actually a private

426
00:14:24,880 --> 00:14:26,639
github repo

427
00:14:26,639 --> 00:14:28,320
but it was lacking multi-factor

428
00:14:28,320 --> 00:14:29,839
authentication at the time which was a

429
00:14:29,839 --> 00:14:31,600
contributing factor

430
00:14:31,600 --> 00:14:33,839
attackers were able to access personally

431
00:14:33,839 --> 00:14:36,240
identifiable information on 57 million

432
00:14:36,240 --> 00:14:37,279
users

433
00:14:37,279 --> 00:14:39,279
as well as names and driver license

434
00:14:39,279 --> 00:14:40,320
numbers for

435
00:14:40,320 --> 00:14:43,360
600 000 drivers the case had an

436
00:14:43,360 --> 00:14:44,320
interesting twist

437
00:14:44,320 --> 00:14:45,680
actually and i recommend you kind of

438
00:14:45,680 --> 00:14:47,440
read up on this because

439
00:14:47,440 --> 00:14:49,279
uber paid the attackers a hundred

440
00:14:49,279 --> 00:14:51,199
thousand dollars as a bug bounty

441
00:14:51,199 --> 00:14:54,320
um to resolve the breach

442
00:14:54,320 --> 00:14:56,639
uh and that was paid through hacker one

443
00:14:56,639 --> 00:14:58,560
but the incident continues to make waves

444
00:14:58,560 --> 00:14:59,199
uber's

445
00:14:59,199 --> 00:15:01,519
former chief security officer was just

446
00:15:01,519 --> 00:15:03,680
charged back in august i believe

447
00:15:03,680 --> 00:15:05,600
uh by the department of justice for

448
00:15:05,600 --> 00:15:07,279
allegedly covering up this breach and

449
00:15:07,279 --> 00:15:09,440
there's definitely a lot of interesting

450
00:15:09,440 --> 00:15:12,160
um discussions around that and important

451
00:15:12,160 --> 00:15:13,360
to think about as a security

452
00:15:13,360 --> 00:15:16,000
practitioner

453
00:15:16,399 --> 00:15:19,760
one login's 2017 instant is another case

454
00:15:19,760 --> 00:15:20,240
of an

455
00:15:20,240 --> 00:15:23,519
unknown origin and somehow aws keys were

456
00:15:23,519 --> 00:15:25,279
compromised in this case

457
00:15:25,279 --> 00:15:28,720
the attackers created ec2 instances

458
00:15:28,720 --> 00:15:31,120
within the environment and used those to

459
00:15:31,120 --> 00:15:33,120
perform further reconnaissance

460
00:15:33,120 --> 00:15:35,279
they moved on to access database tables

461
00:15:35,279 --> 00:15:37,199
that had sensitive data

462
00:15:37,199 --> 00:15:38,800
but in fact some of that data was

463
00:15:38,800 --> 00:15:41,120
encrypted unfortunately

464
00:15:41,120 --> 00:15:43,040
despite the use of encryption here when

465
00:15:43,040 --> 00:15:44,959
login wasn't able to

466
00:15:44,959 --> 00:15:47,360
confirm whether or not the attackers had

467
00:15:47,360 --> 00:15:48,800
also accessed the encryption

468
00:15:48,800 --> 00:15:51,040
keys and as a result they had to treat

469
00:15:51,040 --> 00:15:53,440
the data as compromised as a whole

470
00:15:53,440 --> 00:15:54,800
again as we're talking through these

471
00:15:54,800 --> 00:15:56,399
instances if you're administering an

472
00:15:56,399 --> 00:15:58,320
awareness environment i definitely

473
00:15:58,320 --> 00:16:00,160
in the back your mind think about how

474
00:16:00,160 --> 00:16:02,000
and where you would be detecting these

475
00:16:02,000 --> 00:16:02,959
incidents

476
00:16:02,959 --> 00:16:04,720
uh what you would do to resolve them and

477
00:16:04,720 --> 00:16:06,839
i'll go into some recommendations at the

478
00:16:06,839 --> 00:16:08,880
end

479
00:16:08,880 --> 00:16:10,959
politifact had a very different type of

480
00:16:10,959 --> 00:16:13,360
instant in 2017 and there's minimal

481
00:16:13,360 --> 00:16:15,199
information on it because it was fairly

482
00:16:15,199 --> 00:16:17,440
small but effectively a twitter

483
00:16:17,440 --> 00:16:20,000
user researcher noticed coin hive

484
00:16:20,000 --> 00:16:22,079
running on politifact's website

485
00:16:22,079 --> 00:16:25,040
um coinhive is a monero crypto mining

486
00:16:25,040 --> 00:16:25,680
script

487
00:16:25,680 --> 00:16:28,000
so basically it uses some or all of the

488
00:16:28,000 --> 00:16:30,160
browser resources of a person visiting

489
00:16:30,160 --> 00:16:32,800
the site to try and mine cryptocurrency

490
00:16:32,800 --> 00:16:35,759
politifacts executive director did

491
00:16:35,759 --> 00:16:37,839
attribute this to a misconfigured cloud

492
00:16:37,839 --> 00:16:40,160
computing server um but there's no

493
00:16:40,160 --> 00:16:43,040
further information as far as i'm aware

494
00:16:43,040 --> 00:16:45,440
but the la times had a 2018 incident

495
00:16:45,440 --> 00:16:47,360
that was very similar with coin high

496
00:16:47,360 --> 00:16:48,880
crypto mining

497
00:16:48,880 --> 00:16:50,800
in this case it was directly attributed

498
00:16:50,800 --> 00:16:53,680
to an s3 bucket with global write access

499
00:16:53,680 --> 00:16:56,160
the attackers were able to add that

500
00:16:56,160 --> 00:16:57,519
crypto mining code

501
00:16:57,519 --> 00:16:59,440
directly to the s3 bucket because of

502
00:16:59,440 --> 00:17:01,440
that misconfiguration and so it's likely

503
00:17:01,440 --> 00:17:05,839
that politifact had similar causes

504
00:17:07,039 --> 00:17:10,240
tesla in 2018 also had a incident

505
00:17:10,240 --> 00:17:12,240
in their case a misconfigured kubernetes

506
00:17:12,240 --> 00:17:14,319
console lacked password protection which

507
00:17:14,319 --> 00:17:15,839
attackers used to

508
00:17:15,839 --> 00:17:17,280
spin up resources and mind

509
00:17:17,280 --> 00:17:19,199
cryptocurrency and so this was similar

510
00:17:19,199 --> 00:17:21,520
to crypto mining attacks in this case

511
00:17:21,520 --> 00:17:23,199
the attackers instead of using kind of

512
00:17:23,199 --> 00:17:24,799
browser resources

513
00:17:24,799 --> 00:17:27,679
actually spun up inside tesla's aws

514
00:17:27,679 --> 00:17:29,360
account resources they used to mine

515
00:17:29,360 --> 00:17:31,520
cryptocurrency

516
00:17:31,520 --> 00:17:34,160
imperva also disclosed to breach in 2018

517
00:17:34,160 --> 00:17:36,080
and in their case they had externally

518
00:17:36,080 --> 00:17:38,799
exposed a compute instance

519
00:17:38,799 --> 00:17:40,240
and it was globally accessible and they

520
00:17:40,240 --> 00:17:43,120
said it contained an aws api key

521
00:17:43,120 --> 00:17:44,720
and it's not clear whether this is you

522
00:17:44,720 --> 00:17:46,559
know a key stored directly in the

523
00:17:46,559 --> 00:17:48,640
instance or if this is another

524
00:17:48,640 --> 00:17:50,559
incident with metadata access

525
00:17:50,559 --> 00:17:52,960
potentially like capital one

526
00:17:52,960 --> 00:17:55,200
that access that the attackers gained

527
00:17:55,200 --> 00:17:57,440
was used to steal a database snapshot

528
00:17:57,440 --> 00:17:59,520
that had been created during testing and

529
00:17:59,520 --> 00:18:01,360
kind of forgotten about

530
00:18:01,360 --> 00:18:03,679
so again think about a lot of things

531
00:18:03,679 --> 00:18:05,120
that went wrong here

532
00:18:05,120 --> 00:18:06,880
and imperva's blog talks about their

533
00:18:06,880 --> 00:18:08,480
lessons learned as well as do many of

534
00:18:08,480 --> 00:18:10,320
these postmortems which makes them so

535
00:18:10,320 --> 00:18:12,400
valuable

536
00:18:12,400 --> 00:18:14,799
in a fairly novel example a recent plea

537
00:18:14,799 --> 00:18:15,600
agreement

538
00:18:15,600 --> 00:18:18,640
uh highlighted a 2018 cisco security

539
00:18:18,640 --> 00:18:19,520
incident which

540
00:18:19,520 --> 00:18:22,080
in that case a former employee um who

541
00:18:22,080 --> 00:18:23,679
hadn't been working for them for about

542
00:18:23,679 --> 00:18:26,960
five months or so deleted a bunch of ec2

543
00:18:26,960 --> 00:18:28,799
instances in their account

544
00:18:28,799 --> 00:18:31,039
this is interesting because there's some

545
00:18:31,039 --> 00:18:32,559
speculation that this was just a

546
00:18:32,559 --> 00:18:34,160
complete accident

547
00:18:34,160 --> 00:18:37,440
that the engineer was trying to you know

548
00:18:37,440 --> 00:18:39,039
destroy some infrastructure

549
00:18:39,039 --> 00:18:41,360
in either their current employer or

550
00:18:41,360 --> 00:18:42,559
personal

551
00:18:42,559 --> 00:18:44,400
using infrastructure as code something

552
00:18:44,400 --> 00:18:47,120
like terraform or cloud formation

553
00:18:47,120 --> 00:18:48,720
this hasn't been confirmed that this was

554
00:18:48,720 --> 00:18:50,960
an accident and that was the case

555
00:18:50,960 --> 00:18:53,440
but it does show that malice is not

556
00:18:53,440 --> 00:18:56,400
always a component of an incident

557
00:18:56,400 --> 00:18:58,080
jw player is another victim of

558
00:18:58,080 --> 00:19:00,640
cryptojacking this time in 2019 in their

559
00:19:00,640 --> 00:19:01,039
case

560
00:19:01,039 --> 00:19:03,679
weave scope was publicly exposed and

561
00:19:03,679 --> 00:19:04,480
that's a

562
00:19:04,480 --> 00:19:06,880
container monitoring tool that has rce

563
00:19:06,880 --> 00:19:08,240
by design

564
00:19:08,240 --> 00:19:10,080
the tool has code execution

565
00:19:10,080 --> 00:19:11,679
functionality so the attackers could

566
00:19:11,679 --> 00:19:14,080
just directly use this public tool

567
00:19:14,080 --> 00:19:16,000
uh to spin up resources and mine

568
00:19:16,000 --> 00:19:18,720
cryptocurrency

569
00:19:18,720 --> 00:19:21,440
malindo air is another new vector we

570
00:19:21,440 --> 00:19:23,919
haven't seen in these previous cases

571
00:19:23,919 --> 00:19:26,160
former employees for a contractor of

572
00:19:26,160 --> 00:19:29,520
theirs used their authorized access

573
00:19:29,520 --> 00:19:32,160
and expanded it to pull down 35 million

574
00:19:32,160 --> 00:19:34,000
customer records they were not approved

575
00:19:34,000 --> 00:19:36,080
to access

576
00:19:36,080 --> 00:19:38,720
and twilio like the la times uh this

577
00:19:38,720 --> 00:19:40,320
time in 2020 had a

578
00:19:40,320 --> 00:19:42,960
s3 bucket with global write access in

579
00:19:42,960 --> 00:19:44,000
this case

580
00:19:44,000 --> 00:19:46,080
it was opportunistically exploited so

581
00:19:46,080 --> 00:19:48,559
they weren't specifically targeted here

582
00:19:48,559 --> 00:19:51,520
and an sdk they provide was backdoored

583
00:19:51,520 --> 00:19:52,880
with mage cart which

584
00:19:52,880 --> 00:19:54,400
tries to do credit card skimming

585
00:19:54,400 --> 00:19:57,120
generally in this case the instant was

586
00:19:57,120 --> 00:19:59,200
quickly identified and resolved

587
00:19:59,200 --> 00:20:02,000
um and there was really no impact

588
00:20:02,000 --> 00:20:02,720
because

589
00:20:02,720 --> 00:20:04,960
the sdk that was backdoored had nothing

590
00:20:04,960 --> 00:20:08,480
to do with credit card processing

591
00:20:08,640 --> 00:20:11,520
so quick sidebar on mage cart and s3

592
00:20:11,520 --> 00:20:13,120
global right

593
00:20:13,120 --> 00:20:15,200
i'm going through these cases this is

594
00:20:15,200 --> 00:20:16,960
non-scientific and is going to be much

595
00:20:16,960 --> 00:20:18,640
more qualitative than quantitative

596
00:20:18,640 --> 00:20:20,559
throughout this talk but i do want to

597
00:20:20,559 --> 00:20:21,840
point out that there are far more

598
00:20:21,840 --> 00:20:24,159
instances of s3 global right

599
00:20:24,159 --> 00:20:25,919
being an issue for organizations than

600
00:20:25,919 --> 00:20:27,600
i'm talking about here

601
00:20:27,600 --> 00:20:31,120
risk iq in 2019 uh discovered that

602
00:20:31,120 --> 00:20:34,480
you know magekart was hitting over 17

603
00:20:34,480 --> 00:20:35,440
000

604
00:20:35,440 --> 00:20:39,039
uh domains or organizations via s3

605
00:20:39,039 --> 00:20:40,799
bucket global right

606
00:20:40,799 --> 00:20:43,120
so this is a well-known and broad issue

607
00:20:43,120 --> 00:20:44,880
even though i'm only going to call out a

608
00:20:44,880 --> 00:20:48,400
couple specific examples

609
00:20:48,400 --> 00:20:51,200
all right just a few more here expel is

610
00:20:51,200 --> 00:20:51,679
a

611
00:20:51,679 --> 00:20:53,440
sock as a service provider so they

612
00:20:53,440 --> 00:20:55,520
provide managed security services and

613
00:20:55,520 --> 00:20:56,880
they've blogged about a couple of the

614
00:20:56,880 --> 00:20:58,640
instances they respond to and these blog

615
00:20:58,640 --> 00:21:00,400
posts are really excellent

616
00:21:00,400 --> 00:21:02,240
excellent and i recommend tracking them

617
00:21:02,240 --> 00:21:04,640
down um if you're interested

618
00:21:04,640 --> 00:21:07,120
uh in the first of these a root im user

619
00:21:07,120 --> 00:21:09,520
access key was somehow compromised and

620
00:21:09,520 --> 00:21:12,159
attackers generate ssh keys

621
00:21:12,159 --> 00:21:14,080
for a bunch of vc2 instances and then

622
00:21:14,080 --> 00:21:16,080
use those for crypto cryptojacking

623
00:21:16,080 --> 00:21:18,320
again we see you know using computing

624
00:21:18,320 --> 00:21:20,240
resources to mine cryptocurrencies one

625
00:21:20,240 --> 00:21:21,360
of the

626
00:21:21,360 --> 00:21:24,720
common results of these breaches

627
00:21:24,720 --> 00:21:26,320
as it's an easy way for attackers to

628
00:21:26,320 --> 00:21:28,880
turn their access into cash

629
00:21:28,880 --> 00:21:31,520
in the second of these blogs eight im

630
00:21:31,520 --> 00:21:33,520
access keys were compromised

631
00:21:33,520 --> 00:21:35,600
those keys were used to back door

632
00:21:35,600 --> 00:21:37,679
security groups to allow the attacker's

633
00:21:37,679 --> 00:21:39,360
internet access

634
00:21:39,360 --> 00:21:42,720
into the environment to ec2 instances

635
00:21:42,720 --> 00:21:44,799
the final impact we don't actually know

636
00:21:44,799 --> 00:21:47,039
because once attackers had command line

637
00:21:47,039 --> 00:21:49,280
access to ec2 instances there was not

638
00:21:49,280 --> 00:21:51,200
sufficient monitoring or visibility in

639
00:21:51,200 --> 00:21:52,880
place really to

640
00:21:52,880 --> 00:21:55,039
determine what they did with that access

641
00:21:55,039 --> 00:21:56,799
um so again a lesson there about

642
00:21:56,799 --> 00:21:57,679
monitoring

643
00:21:57,679 --> 00:21:59,039
and where you need it in cloud

644
00:21:59,039 --> 00:22:01,520
environment

645
00:22:01,760 --> 00:22:04,640
the team tnt worm is an escalation to

646
00:22:04,640 --> 00:22:06,640
these cryptojacking attacks because it

647
00:22:06,640 --> 00:22:08,320
automatically scans and exploits

648
00:22:08,320 --> 00:22:10,320
misconfigured docker and kubernetes

649
00:22:10,320 --> 00:22:11,440
platforms

650
00:22:11,440 --> 00:22:14,000
and has recently added features recently

651
00:22:14,000 --> 00:22:15,280
as in this year

652
00:22:15,280 --> 00:22:18,000
to steal aws credentials from the

653
00:22:18,000 --> 00:22:19,280
directory in which they're stored in

654
00:22:19,280 --> 00:22:20,480
plain text

655
00:22:20,480 --> 00:22:23,039
so far it's only been observed to do

656
00:22:23,039 --> 00:22:25,120
cryptojacking for monero

657
00:22:25,120 --> 00:22:26,880
and to pass those credentials back to

658
00:22:26,880 --> 00:22:28,320
the control server

659
00:22:28,320 --> 00:22:30,320
um so it hasn't actually used these

660
00:22:30,320 --> 00:22:32,799
credentials yet but that's only

661
00:22:32,799 --> 00:22:35,200
likely to change as the uh you know this

662
00:22:35,200 --> 00:22:38,480
and similar worms mature

663
00:22:39,600 --> 00:22:42,640
crypto mining ami uh this is another

664
00:22:42,640 --> 00:22:43,520
vector again

665
00:22:43,520 --> 00:22:46,320
for cryptocurrency mining uh abusing

666
00:22:46,320 --> 00:22:47,280
cloud incidents

667
00:22:47,280 --> 00:22:51,120
in this case a windows 2008 server

668
00:22:51,120 --> 00:22:53,679
ami amazon machine image had been around

669
00:22:53,679 --> 00:22:55,200
for five years

670
00:22:55,200 --> 00:22:57,120
was identified that contained a monero

671
00:22:57,120 --> 00:22:59,200
miner so amis are pretty much

672
00:22:59,200 --> 00:23:01,200
templates for spinning up a virtual

673
00:23:01,200 --> 00:23:02,799
machine in ec2

674
00:23:02,799 --> 00:23:04,559
and you can create them yourself you can

675
00:23:04,559 --> 00:23:06,240
buy them or you can retrieve them from

676
00:23:06,240 --> 00:23:07,679
the community marketplace and so this

677
00:23:07,679 --> 00:23:09,919
was one that was publicly available

678
00:23:09,919 --> 00:23:11,919
on aws in the community marketplace if

679
00:23:11,919 --> 00:23:14,000
you searched windows 2008

680
00:23:14,000 --> 00:23:16,640
at the time and once you started using

681
00:23:16,640 --> 00:23:17,760
it it would actually

682
00:23:17,760 --> 00:23:21,280
uh you know be mining monero in your

683
00:23:21,280 --> 00:23:23,600
account

684
00:23:23,600 --> 00:23:25,840
finally the mandiant talk i referenced

685
00:23:25,840 --> 00:23:26,960
earlier gave

686
00:23:26,960 --> 00:23:28,799
a really interesting insider threat

687
00:23:28,799 --> 00:23:30,799
scenario again go to that source if you

688
00:23:30,799 --> 00:23:32,640
want to see the full details

689
00:23:32,640 --> 00:23:35,679
in this case a fired employee shortly

690
00:23:35,679 --> 00:23:36,000
after

691
00:23:36,000 --> 00:23:38,400
their final day used their credentials

692
00:23:38,400 --> 00:23:41,360
to reach a ci cd server created new

693
00:23:41,360 --> 00:23:43,440
users stole additional credentials and

694
00:23:43,440 --> 00:23:46,400
eventually deleted production databases

695
00:23:46,400 --> 00:23:47,919
obviously the recovery effort here is

696
00:23:47,919 --> 00:23:49,600
going to be huge

697
00:23:49,600 --> 00:23:51,360
so that's you know a risk to be really

698
00:23:51,360 --> 00:23:53,679
concerned about

699
00:23:53,679 --> 00:23:55,760
having surveyed that wide range of cases

700
00:23:55,760 --> 00:23:57,279
we're going to kind of blow through some

701
00:23:57,279 --> 00:23:59,600
trends this is not scientific this is

702
00:23:59,600 --> 00:24:01,679
qualitative more than quantitative these

703
00:24:01,679 --> 00:24:04,080
numbers are not representative

704
00:24:04,080 --> 00:24:06,720
just a bunch of caveats there but

705
00:24:06,720 --> 00:24:08,400
quickly looking at it before looking at

706
00:24:08,400 --> 00:24:10,080
our cases i wanted to point to mitre

707
00:24:10,080 --> 00:24:12,080
attack aws matrix

708
00:24:12,080 --> 00:24:14,559
miters and knowledge base of tactics

709
00:24:14,559 --> 00:24:16,320
techniques and procedures they released

710
00:24:16,320 --> 00:24:18,320
metrics for cloud providers fairly

711
00:24:18,320 --> 00:24:19,200
recently

712
00:24:19,200 --> 00:24:20,799
but they're planning to merge these into

713
00:24:20,799 --> 00:24:23,120
a single matrix soon

714
00:24:23,120 --> 00:24:24,880
the most important category for us is

715
00:24:24,880 --> 00:24:26,320
initial access where you can see

716
00:24:26,320 --> 00:24:28,080
exploring public-facing applications

717
00:24:28,080 --> 00:24:30,000
trusted relationships and valid accounts

718
00:24:30,000 --> 00:24:32,320
are the three main techniques

719
00:24:32,320 --> 00:24:34,559
and now looking at our data we saw

720
00:24:34,559 --> 00:24:35,760
single instances

721
00:24:35,760 --> 00:24:38,080
of an unknown initial access vector as

722
00:24:38,080 --> 00:24:40,080
well as malicious ami

723
00:24:40,080 --> 00:24:42,080
we saw a couple instances likely tied to

724
00:24:42,080 --> 00:24:43,440
metadata access

725
00:24:43,440 --> 00:24:46,559
three each of abuse of valid credentials

726
00:24:46,559 --> 00:24:49,120
vulnerabilities in apps and s3 global

727
00:24:49,120 --> 00:24:49,679
right

728
00:24:49,679 --> 00:24:52,080
and valid credential theft and again i

729
00:24:52,080 --> 00:24:53,520
just want to highlight there are far

730
00:24:53,520 --> 00:24:55,919
more instances due to s3 global right

731
00:24:55,919 --> 00:24:57,600
than our cases indicated

732
00:24:57,600 --> 00:24:59,200
and that could be true of other classes

733
00:24:59,200 --> 00:25:01,840
of vulnerability

734
00:25:02,559 --> 00:25:05,120
so in the last few minutes here i'm

735
00:25:05,120 --> 00:25:07,360
going to do a speed run through the most

736
00:25:07,360 --> 00:25:09,360
the best controls the recommended

737
00:25:09,360 --> 00:25:11,120
controls for the common vectors we've

738
00:25:11,120 --> 00:25:11,679
talked about

739
00:25:11,679 --> 00:25:15,039
here so first up metadata access

740
00:25:15,039 --> 00:25:18,000
uh metadata access generally requires

741
00:25:18,000 --> 00:25:19,520
some sort of vulnerability to be

742
00:25:19,520 --> 00:25:20,400
exploited

743
00:25:20,400 --> 00:25:22,240
first so if you have a secure software

744
00:25:22,240 --> 00:25:23,840
development life cycle if you're doing

745
00:25:23,840 --> 00:25:24,159
pen

746
00:25:24,159 --> 00:25:28,000
testing uh stack analysis etc a general

747
00:25:28,000 --> 00:25:30,159
code hygiene will prevent those initial

748
00:25:30,159 --> 00:25:32,480
vulnerabilities from being exploitable

749
00:25:32,480 --> 00:25:35,120
and the metadata service imds is the med

750
00:25:35,120 --> 00:25:37,120
data service has a second version that

751
00:25:37,120 --> 00:25:37,679
uses

752
00:25:37,679 --> 00:25:40,000
a put request to create a session token

753
00:25:40,000 --> 00:25:41,840
that you then need to use that token to

754
00:25:41,840 --> 00:25:43,039
get the metadata

755
00:25:43,039 --> 00:25:45,440
and this will defend against ssrf

756
00:25:45,440 --> 00:25:48,159
getting you directly metadata access

757
00:25:48,159 --> 00:25:50,559
s3 global write has been a big problem

758
00:25:50,559 --> 00:25:51,840
and so aws released

759
00:25:51,840 --> 00:25:53,760
access analyzer for s3 that will

760
00:25:53,760 --> 00:25:55,679
directly tell you

761
00:25:55,679 --> 00:25:58,559
whether any s3 buckets are configured to

762
00:25:58,559 --> 00:26:00,720
allow internet access or access to

763
00:26:00,720 --> 00:26:02,720
accounts outside your organization so

764
00:26:02,720 --> 00:26:04,159
that's a huge win there

765
00:26:04,159 --> 00:26:06,000
and malicious ami is similarly

766
00:26:06,000 --> 00:26:08,000
straightforward make sure you're using

767
00:26:08,000 --> 00:26:10,640
trusted sources for your machine images

768
00:26:10,640 --> 00:26:12,240
the convenience and cost of the

769
00:26:12,240 --> 00:26:14,240
community marketplace is appealing

770
00:26:14,240 --> 00:26:17,520
um but you know as that case showed uh

771
00:26:17,520 --> 00:26:18,640
and especially the fact that the

772
00:26:18,640 --> 00:26:20,400
malicious image lasted in the community

773
00:26:20,400 --> 00:26:22,000
marketplace for five years you just

774
00:26:22,000 --> 00:26:23,120
shouldn't be using the community

775
00:26:23,120 --> 00:26:27,120
marketplace for amis for production

776
00:26:27,760 --> 00:26:30,080
application vulnerabilities aren't super

777
00:26:30,080 --> 00:26:31,840
cloud specific generally

778
00:26:31,840 --> 00:26:34,080
um you know asset inventory and patch

779
00:26:34,080 --> 00:26:35,520
management you need to know what apps

780
00:26:35,520 --> 00:26:37,120
you have and you need to make sure that

781
00:26:37,120 --> 00:26:38,880
you're at least defending against known

782
00:26:38,880 --> 00:26:40,159
vulnerabilities

783
00:26:40,159 --> 00:26:41,919
in those applications through patch

784
00:26:41,919 --> 00:26:44,320
management cloud specific is

785
00:26:44,320 --> 00:26:48,080
external exposure so most services and

786
00:26:48,080 --> 00:26:48,799
resources

787
00:26:48,799 --> 00:26:51,039
in aws and in all cloud environments can

788
00:26:51,039 --> 00:26:52,480
be publicly exposed but

789
00:26:52,480 --> 00:26:55,279
shouldn't be us keep that in mind valid

790
00:26:55,279 --> 00:26:57,120
credential abuse is a big one this is

791
00:26:57,120 --> 00:26:59,200
where former employees or maybe third

792
00:26:59,200 --> 00:27:01,600
parties are abusing their access

793
00:27:01,600 --> 00:27:03,360
so step one off-boarding make sure you

794
00:27:03,360 --> 00:27:04,960
have an off-boarding plan in place and

795
00:27:04,960 --> 00:27:06,400
you activate it as soon as someone

796
00:27:06,400 --> 00:27:08,080
leaves your organizations there's no

797
00:27:08,080 --> 00:27:09,840
access lingering there

798
00:27:09,840 --> 00:27:12,159
watch out for third party risk follow

799
00:27:12,159 --> 00:27:13,600
the principle of least privilege and

800
00:27:13,600 --> 00:27:15,360
minimize access in your environment in

801
00:27:15,360 --> 00:27:16,880
the first place and then log in

802
00:27:16,880 --> 00:27:18,320
monitoring is important and these are

803
00:27:18,320 --> 00:27:20,000
some of the heuristics for

804
00:27:20,000 --> 00:27:22,159
login activity that are common to use

805
00:27:22,159 --> 00:27:23,919
you know check what times a day location

806
00:27:23,919 --> 00:27:25,520
activity and look for

807
00:27:25,520 --> 00:27:28,559
deviations and then there is valid

808
00:27:28,559 --> 00:27:30,480
credential theft

809
00:27:30,480 --> 00:27:32,240
this has been maybe the most common

810
00:27:32,240 --> 00:27:34,320
reason is someone somehow gains access

811
00:27:34,320 --> 00:27:35,919
to valid credentials and uses them in

812
00:27:35,919 --> 00:27:36,799
your environment

813
00:27:36,799 --> 00:27:39,200
follow i am best practices with mfa key

814
00:27:39,200 --> 00:27:40,000
rotation

815
00:27:40,000 --> 00:27:41,760
and avoiding static credentials where

816
00:27:41,760 --> 00:27:43,600
possible and again this is a huge topic

817
00:27:43,600 --> 00:27:45,679
i'm just glancing over

818
00:27:45,679 --> 00:27:46,799
you know the principle of least

819
00:27:46,799 --> 00:27:48,399
privilege helps here there's a really

820
00:27:48,399 --> 00:27:50,159
good tool that was released this year

821
00:27:50,159 --> 00:27:52,240
called cloudsplaining

822
00:27:52,240 --> 00:27:54,720
cloudsplain will actually break down

823
00:27:54,720 --> 00:27:56,880
across your environment uh in iam

824
00:27:56,880 --> 00:27:58,720
whether there's privilege escalation or

825
00:27:58,720 --> 00:28:00,240
maybe over privileging

826
00:28:00,240 --> 00:28:02,399
and so you can use this open source tool

827
00:28:02,399 --> 00:28:04,559
to audit im in your account

828
00:28:04,559 --> 00:28:06,080
and again these slides will be available

829
00:28:06,080 --> 00:28:07,760
so you can kind of go back and grab

830
00:28:07,760 --> 00:28:10,799
these links if you want to know more

831
00:28:10,799 --> 00:28:12,799
awesome so that was a bit of a speed run

832
00:28:12,799 --> 00:28:14,000
thank you all for uh

833
00:28:14,000 --> 00:28:16,240
seeing through with me um i'm paying the

834
00:28:16,240 --> 00:28:18,399
puppy tax with my eight week old puppy

835
00:28:18,399 --> 00:28:18,799
so

836
00:28:18,799 --> 00:28:22,559
uh there's that feel free to track me

837
00:28:22,559 --> 00:28:24,399
down in discord or on twitter if you

838
00:28:24,399 --> 00:28:26,159
have any questions

839
00:28:26,159 --> 00:28:30,080
um but otherwise these slides will be

840
00:28:30,080 --> 00:28:33,600
up on speaker deck and i'll drop a link

841
00:28:33,600 --> 00:28:35,840
in the discord channel for this talk

842
00:28:35,840 --> 00:28:39,600
where you have access to those so thanks

843
00:28:42,840 --> 00:28:45,840
everyone

844
00:28:46,720 --> 00:28:48,799
you

