1
00:00:00,030 --> 00:00:04,110
okay so we're gonna get started with the

2
00:00:01,890 --> 00:00:05,250
next talk please welcome John Stickle

3
00:00:04,110 --> 00:00:07,109
and the name of his talk is

4
00:00:05,250 --> 00:00:09,980
vulnerabilities and modern cryptography

5
00:00:07,109 --> 00:00:09,980
give him a warm welcome

6
00:00:12,320 --> 00:00:20,130
thank you so it was my first

7
00:00:16,619 --> 00:00:25,490
presentation super nervous so sorry if

8
00:00:20,130 --> 00:00:29,909
my voice is stuttering all right so

9
00:00:25,490 --> 00:00:31,909
let's fit alright thank you thanks so

10
00:00:29,910 --> 00:00:34,260
yeah today I'm going to talk about

11
00:00:31,910 --> 00:00:37,469
vulnerabilities in modern-day crypto and

12
00:00:34,260 --> 00:00:39,239
how to exploit them so my name is John

13
00:00:37,469 --> 00:00:42,210
Stickle I'm a security researcher with

14
00:00:39,239 --> 00:00:44,879
coal fire labs mostly doing penetration

15
00:00:42,210 --> 00:00:46,800
testing and exploit dev so we're gonna

16
00:00:44,879 --> 00:00:48,960
start today with an overview of some

17
00:00:46,800 --> 00:00:51,149
commonly seen vulnerabilities on Penn

18
00:00:48,960 --> 00:00:52,649
test such as poodle heartbleed then

19
00:00:51,149 --> 00:00:55,800
we're gonna get into some more technical

20
00:00:52,649 --> 00:00:58,620
attacks like stream cipher attacks side

21
00:00:55,800 --> 00:01:00,149
channel attacks and then then we're

22
00:00:58,620 --> 00:01:03,300
gonna move on to some developer flaws

23
00:01:00,149 --> 00:01:07,290
like apples go to fail and back doors

24
00:01:03,300 --> 00:01:12,840
that people for whatever reason decided

25
00:01:07,290 --> 00:01:14,310
a bug crypto great so we'll start off

26
00:01:12,840 --> 00:01:16,799
with saying that vulnerabilities in

27
00:01:14,310 --> 00:01:20,939
encryption or everywhere they're just

28
00:01:16,799 --> 00:01:22,650
appearing seemingly every day for a lot

29
00:01:20,939 --> 00:01:24,720
of different reasons a lot of people try

30
00:01:22,650 --> 00:01:26,600
to implement their own crypto a lot of

31
00:01:24,720 --> 00:01:28,890
times there's programming mistakes

32
00:01:26,600 --> 00:01:32,460
improper QA which we'll see in a minute

33
00:01:28,890 --> 00:01:35,970
and backdoors placed by different

34
00:01:32,460 --> 00:01:37,470
agencies or organizations so let's jump

35
00:01:35,970 --> 00:01:38,479
right in here and we'll talk about

36
00:01:37,470 --> 00:01:43,110
poodle

37
00:01:38,479 --> 00:01:43,740
so poodle was found in late 2014 I think

38
00:01:43,110 --> 00:01:46,079
it was

39
00:01:43,740 --> 00:01:48,658
it's a man-in-the-middle style attack

40
00:01:46,079 --> 00:01:50,520
that allows for a tls/ssl downgrade

41
00:01:48,659 --> 00:01:53,840
followed by a padding Oracle attack

42
00:01:50,520 --> 00:01:56,759
which is pretty cool pretty cool the

43
00:01:53,840 --> 00:01:58,860
downgrades not too cool but padding

44
00:01:56,759 --> 00:02:03,420
Oracle attacks pretty cool so this is

45
00:01:58,860 --> 00:02:06,550
how the this is how the downgrade works

46
00:02:03,420 --> 00:02:08,679
all right so we have the client here the

47
00:02:06,550 --> 00:02:11,230
server there we're just chilling right

48
00:02:08,679 --> 00:02:13,540
here with a man in the middle and so

49
00:02:11,230 --> 00:02:16,019
when the client goes to establish a

50
00:02:13,540 --> 00:02:20,380
connection with the server it's like hey

51
00:02:16,020 --> 00:02:22,600
you speak TLS and then we say no we

52
00:02:20,380 --> 00:02:25,570
don't speak TLS we only speak SSL

53
00:02:22,600 --> 00:02:26,620
because the cell was vulnerable and then

54
00:02:25,570 --> 00:02:32,170
he's like really

55
00:02:26,620 --> 00:02:33,790
what about TLS 1.1 nope TLS 1.0 no and

56
00:02:32,170 --> 00:02:36,359
then finally the client gives in and

57
00:02:33,790 --> 00:02:40,000
he's like all right let's speak in SSL

58
00:02:36,360 --> 00:02:41,530
3.0 and that's great because now we can

59
00:02:40,000 --> 00:02:44,200
go ahead and perform a padding Oracle

60
00:02:41,530 --> 00:02:46,750
attack on it so in order to understand

61
00:02:44,200 --> 00:02:49,450
padding Oracle attacks let's first

62
00:02:46,750 --> 00:02:51,550
understand a little bit about padding so

63
00:02:49,450 --> 00:02:54,850
this this slides kind of weird but

64
00:02:51,550 --> 00:02:57,040
somewhat straightforward I hope so with

65
00:02:54,850 --> 00:02:59,620
the stream cyphers stream cipher

66
00:02:57,040 --> 00:03:01,570
encryption if if we go to encrypt one

67
00:02:59,620 --> 00:03:03,940
byte of data we get one byte of data out

68
00:03:01,570 --> 00:03:06,700
two bytes a day that we got two bytes of

69
00:03:03,940 --> 00:03:09,190
data out but with block ciphers which

70
00:03:06,700 --> 00:03:11,470
CBC mode encryption works in blocks if

71
00:03:09,190 --> 00:03:15,190
we go to encrypt one by today 2 we get

72
00:03:11,470 --> 00:03:18,190
16 bytes out 2 bytes of data again 16

73
00:03:15,190 --> 00:03:22,180
bytes out now the rest of the bytes that

74
00:03:18,190 --> 00:03:24,340
we get are padding and it's also the

75
00:03:22,180 --> 00:03:27,610
first example here if I wanted to

76
00:03:24,340 --> 00:03:28,959
encrypt crypt the character J we'll go

77
00:03:27,610 --> 00:03:33,790
ahead and do that and it's going to add

78
00:03:28,959 --> 00:03:36,549
15 15 pads on there so our goal is to

79
00:03:33,790 --> 00:03:38,380
figure out what the value of the pads

80
00:03:36,549 --> 00:03:40,090
are because if we can figure out what

81
00:03:38,380 --> 00:03:42,700
the value of the pads are and an

82
00:03:40,090 --> 00:03:45,310
encrypted message then we can go ahead

83
00:03:42,700 --> 00:03:47,018
we have known plaintext and then we can

84
00:03:45,310 --> 00:03:52,120
go ahead and perform a known plaintext

85
00:03:47,019 --> 00:03:56,410
attack on it so how do we know what

86
00:03:52,120 --> 00:03:59,829
value these pads have well the what's it

87
00:03:56,410 --> 00:04:01,750
called PC KS seven states that the

88
00:03:59,829 --> 00:04:05,440
padding value equals the number of pads

89
00:04:01,750 --> 00:04:09,670
left to fill so here we only encrypted a

90
00:04:05,440 --> 00:04:13,720
J we have 15 pads left so the pad value

91
00:04:09,670 --> 00:04:16,029
is 15 and then for the message hello we

92
00:04:13,720 --> 00:04:21,010
have 11 pads left

93
00:04:16,029 --> 00:04:23,559
oh the pad value there it's 11 so this

94
00:04:21,010 --> 00:04:25,719
is how we this is how we go ahead and

95
00:04:23,560 --> 00:04:28,419
perform the padding Oracle attack to

96
00:04:25,720 --> 00:04:30,910
figure out what these pad values are we

97
00:04:28,419 --> 00:04:33,370
start guessing and the beautiful thing

98
00:04:30,910 --> 00:04:35,169
about the server is the server tells us

99
00:04:33,370 --> 00:04:37,810
whether we're right or wrong with the

100
00:04:35,169 --> 00:04:39,880
padding value so the server's gonna be

101
00:04:37,810 --> 00:04:42,070
like hey you have a padding err you have

102
00:04:39,880 --> 00:04:45,520
a padding err when we're trying one two

103
00:04:42,070 --> 00:04:47,680
and then once it doesn't say that we

104
00:04:45,520 --> 00:04:49,840
have a padding err we know that we have

105
00:04:47,680 --> 00:04:52,030
the correct padding so here's a visual

106
00:04:49,840 --> 00:04:55,479
example of it I'm really glad that that

107
00:04:52,030 --> 00:04:58,179
text isn't too small so in order to

108
00:04:55,480 --> 00:05:00,550
start guessing the padding value we

109
00:04:58,180 --> 00:05:03,280
begin incrementing values within the

110
00:05:00,550 --> 00:05:04,990
initialization vector right here we do

111
00:05:03,280 --> 00:05:07,270
this all the way until we don't receive

112
00:05:04,990 --> 00:05:08,860
a padding error once we don't receive a

113
00:05:07,270 --> 00:05:12,130
padding error we know that we have the

114
00:05:08,860 --> 00:05:14,680
correct padding so once we do have the

115
00:05:12,130 --> 00:05:16,930
correct padding we go ahead and we XOR

116
00:05:14,680 --> 00:05:19,479
that with the modified initialization

117
00:05:16,930 --> 00:05:21,880
vector value so if we had to change this

118
00:05:19,479 --> 00:05:25,000
one to a four in order to get the right

119
00:05:21,880 --> 00:05:31,419
padding then we XOR our padding value

120
00:05:25,000 --> 00:05:33,700
with four and then after that we receive

121
00:05:31,419 --> 00:05:35,260
a bite from the keystream once we have a

122
00:05:33,700 --> 00:05:38,080
bite from the keystream we can go ahead

123
00:05:35,260 --> 00:05:40,060
and have fun and decrypt the rest of the

124
00:05:38,080 --> 00:05:42,550
day to buy X owing that against the

125
00:05:40,060 --> 00:05:44,770
original IV value so that would be a 1

126
00:05:42,550 --> 00:05:52,750
in this case and then we receive our

127
00:05:44,770 --> 00:05:54,490
plaintext all right so enough with block

128
00:05:52,750 --> 00:05:57,400
ciphers love to talk about stream

129
00:05:54,490 --> 00:05:59,560
ciphers and a common attack on them so

130
00:05:57,400 --> 00:06:01,989
the stream cipher encrypts data as we

131
00:05:59,560 --> 00:06:05,350
mentioned earlier one bit at a time

132
00:06:01,990 --> 00:06:07,930
and unlike block ciphers which encrypt

133
00:06:05,350 --> 00:06:09,310
data in blocks so also unlike block

134
00:06:07,930 --> 00:06:11,289
ciphers the number of bytes in the

135
00:06:09,310 --> 00:06:13,510
plaintext remains the same number of

136
00:06:11,289 --> 00:06:17,380
bytes in the ciphertext like we just

137
00:06:13,510 --> 00:06:20,169
mentioned one byte in one bite out so as

138
00:06:17,380 --> 00:06:22,510
we can see here about how it works the

139
00:06:20,169 --> 00:06:24,340
plaintext is X sword against a key and

140
00:06:22,510 --> 00:06:26,800
then you get your cipher text there's a

141
00:06:24,340 --> 00:06:29,590
really simple example of it it's not

142
00:06:26,800 --> 00:06:31,569
all of them and then then we're gonna

143
00:06:29,590 --> 00:06:33,039
want to change that key we want to

144
00:06:31,569 --> 00:06:35,139
change that key so that we don't get

145
00:06:33,039 --> 00:06:37,509
collisions because if we get collisions

146
00:06:35,139 --> 00:06:40,419
we can go ahead and perform a key reduce

147
00:06:37,509 --> 00:06:44,259
attack like if I wanted to encrypt the

148
00:06:40,419 --> 00:06:46,719
plaintext John then I get my ciphertext

149
00:06:44,259 --> 00:06:48,789
then I want to encrypt the plaintext of

150
00:06:46,720 --> 00:06:53,800
John again I don't want to get the same

151
00:06:48,789 --> 00:06:55,509
ciphertext that's that's not cool so as

152
00:06:53,800 --> 00:06:57,610
we just said collisions occur when we

153
00:06:55,509 --> 00:07:02,620
utilize the same key to encrypt two

154
00:06:57,610 --> 00:07:06,099
different messages so the XOR is pretty

155
00:07:02,620 --> 00:07:08,409
cool so let's imagine that we just

156
00:07:06,099 --> 00:07:11,530
encrypted two different messages with

157
00:07:08,409 --> 00:07:14,440
the same key if we XOR those two

158
00:07:11,530 --> 00:07:16,719
messages together the encryption key

159
00:07:14,440 --> 00:07:19,840
cancels out and we get an overlay of the

160
00:07:16,719 --> 00:07:33,909
actual text here is a visual example of

161
00:07:19,840 --> 00:07:36,340
that so so if we go ahead and we XOR

162
00:07:33,909 --> 00:07:39,580
these two messages together we receive

163
00:07:36,340 --> 00:07:42,818
an overlay right there seen a smiling

164
00:07:39,580 --> 00:07:48,300
face the same cache that's that's how

165
00:07:42,819 --> 00:07:48,300
that goes so key reuse is pretty bad

166
00:07:48,389 --> 00:07:51,599
don't do it

167
00:07:53,300 --> 00:07:57,780
so side channel attacks are indirect

168
00:07:56,100 --> 00:08:01,130
attacks on crypto systems these are

169
00:07:57,780 --> 00:08:04,340
pretty sweet so we can think of them as

170
00:08:01,130 --> 00:08:06,840
utilizing information that either

171
00:08:04,340 --> 00:08:09,539
utilizing information like the power

172
00:08:06,840 --> 00:08:13,109
that the machines using what the time on

173
00:08:09,540 --> 00:08:15,480
the clock is how much battery is left we

174
00:08:13,110 --> 00:08:18,180
can use cool stuff like that to go ahead

175
00:08:15,480 --> 00:08:21,090
and attack a crypto system so here's a

176
00:08:18,180 --> 00:08:23,850
theoretical example so it's our birthday

177
00:08:21,090 --> 00:08:26,010
friend got us a gift we want to figure

178
00:08:23,850 --> 00:08:30,750
out what that gift is here's an example

179
00:08:26,010 --> 00:08:34,650
of a side channel so this right here's a

180
00:08:30,750 --> 00:08:37,080
side channel boom alright so we ask him

181
00:08:34,650 --> 00:08:40,289
hey is it a new watch and he looks at us

182
00:08:37,080 --> 00:08:42,419
and he goes no with the neutral facial

183
00:08:40,289 --> 00:08:46,080
expression staring it to your eyes and

184
00:08:42,419 --> 00:08:48,199
then you ask is it a hat he looks to you

185
00:08:46,080 --> 00:08:51,270
again same it's same neutral expression

186
00:08:48,200 --> 00:08:51,960
now and then we asked him is it a

187
00:08:51,270 --> 00:08:54,240
computer

188
00:08:51,960 --> 00:08:56,790
his expression gets all excited his eyes

189
00:08:54,240 --> 00:08:59,760
light up well and looks like it's a

190
00:08:56,790 --> 00:09:01,589
computer so that's how we that's how we

191
00:08:59,760 --> 00:09:04,530
use to side-channel the information to

192
00:09:01,590 --> 00:09:06,240
go ahead and figure that out so we can

193
00:09:04,530 --> 00:09:08,400
relate this to crypto in a few different

194
00:09:06,240 --> 00:09:14,700
ways let's go from theoretical to

195
00:09:08,400 --> 00:09:16,560
practical there we go all right yeah

196
00:09:14,700 --> 00:09:19,890
there we are all right so what this code

197
00:09:16,560 --> 00:09:22,560
right here does is takes two different

198
00:09:19,890 --> 00:09:26,370
strings comparison returns true if it's

199
00:09:22,560 --> 00:09:28,260
equal false if they're not equal so most

200
00:09:26,370 --> 00:09:29,970
programming languages designed string

201
00:09:28,260 --> 00:09:32,189
comparisons in a way that can pair each

202
00:09:29,970 --> 00:09:33,690
other character by character and that

203
00:09:32,190 --> 00:09:36,960
bail out as soon as there's a mismatch

204
00:09:33,690 --> 00:09:39,030
so we're gonna see that input string 2

205
00:09:36,960 --> 00:09:41,280
is going to bail out a lot sooner than

206
00:09:39,030 --> 00:09:44,670
input string 1 because there's less

207
00:09:41,280 --> 00:09:46,260
matching characters so the time that it

208
00:09:44,670 --> 00:09:49,620
takes for the application of bailouts

209
00:09:46,260 --> 00:09:52,170
and our side-channel we can we can use

210
00:09:49,620 --> 00:09:55,500
this to deduce information about the

211
00:09:52,170 --> 00:09:58,439
string like let's say it takes 2 seconds

212
00:09:55,500 --> 00:10:01,500
to return if these two strings match and

213
00:09:58,440 --> 00:10:02,970
then 1 second to return if they don't so

214
00:10:01,500 --> 00:10:05,100
just knowing this little bit of

215
00:10:02,970 --> 00:10:06,660
information from our side channel we

216
00:10:05,100 --> 00:10:08,910
can change our inputs during one

217
00:10:06,660 --> 00:10:11,370
character at a time measure the time it

218
00:10:08,910 --> 00:10:13,949
takes for the function to return and the

219
00:10:11,370 --> 00:10:15,750
sensually brute force the password so

220
00:10:13,950 --> 00:10:18,050
always be aware of what your side

221
00:10:15,750 --> 00:10:22,590
channels are leaking because they're

222
00:10:18,050 --> 00:10:24,780
they're chatty all right here's one that

223
00:10:22,590 --> 00:10:27,750
I think everyone here's got experience

224
00:10:24,780 --> 00:10:30,660
with that's heartbleed had to throw it

225
00:10:27,750 --> 00:10:33,210
in so it was found in late 2014

226
00:10:30,660 --> 00:10:36,390
it's a vulnerability within open SSL's

227
00:10:33,210 --> 00:10:39,270
heartbeat extension and basically when

228
00:10:36,390 --> 00:10:42,330
we send a malformed request to the

229
00:10:39,270 --> 00:10:44,670
server the server will respond with a

230
00:10:42,330 --> 00:10:46,530
bunch of bunch of good stuff that keys

231
00:10:44,670 --> 00:10:48,599
to the kingdom which private keys

232
00:10:46,530 --> 00:10:52,890
certificate signatures credentials

233
00:10:48,600 --> 00:10:55,650
emails weird stuff so this is how a

234
00:10:52,890 --> 00:10:57,150
standard heartbeat request works every

235
00:10:55,650 --> 00:10:59,160
now and then the client needs to reach

236
00:10:57,150 --> 00:11:01,170
out to the server and be like hey you're

237
00:10:59,160 --> 00:11:04,500
still alive and kick'n and then the

238
00:11:01,170 --> 00:11:06,300
server is like hey yeah and so the way

239
00:11:04,500 --> 00:11:07,740
that it does that the client sends it a

240
00:11:06,300 --> 00:11:10,620
heartbeat request which has two

241
00:11:07,740 --> 00:11:13,620
parameters it has the text of okay and

242
00:11:10,620 --> 00:11:17,040
then the length of the text two bytes

243
00:11:13,620 --> 00:11:20,700
and then the server responds with okay

244
00:11:17,040 --> 00:11:23,459
which is two bytes this is how the

245
00:11:20,700 --> 00:11:26,190
exploit works so there's no bounds

246
00:11:23,460 --> 00:11:30,980
checking on this length parameter at all

247
00:11:26,190 --> 00:11:35,210
so we can say hey here's an OK and it's

248
00:11:30,980 --> 00:11:37,950
65,536 bytes it'll return with that

249
00:11:35,210 --> 00:11:42,630
it'll say ok and then it will barf all

250
00:11:37,950 --> 00:11:45,300
over us so that's that's that's pretty

251
00:11:42,630 --> 00:11:47,400
cool it returns a bunch of great stuff

252
00:11:45,300 --> 00:11:49,560
and a lot a lot of people were affected

253
00:11:47,400 --> 00:11:51,900
by this attack whether it was directly

254
00:11:49,560 --> 00:11:53,969
or indirectly I mean you know simply

255
00:11:51,900 --> 00:11:57,270
using an online form heartbleed could

256
00:11:53,970 --> 00:11:59,340
have indirectly hit you so the way that

257
00:11:57,270 --> 00:12:02,640
this relates to crypto is this isn't a

258
00:11:59,340 --> 00:12:04,890
flaw within the crypto itself at all TLS

259
00:12:02,640 --> 00:12:07,980
can be flawless but if it's not

260
00:12:04,890 --> 00:12:12,270
implemented properly then then you're

261
00:12:07,980 --> 00:12:15,170
done son so this is Apple's go-to fail

262
00:12:12,270 --> 00:12:18,019
this is embarrassing so

263
00:12:15,170 --> 00:12:20,479
this is another implementation related

264
00:12:18,019 --> 00:12:24,980
failure in which certificates are always

265
00:12:20,480 --> 00:12:31,160
accepted just always accepted it it's

266
00:12:24,980 --> 00:12:41,630
bad there's so here's how it happens so

267
00:12:31,160 --> 00:12:44,209
go to fail is called twice no it's

268
00:12:41,630 --> 00:12:45,260
always gonna be called always and then

269
00:12:44,209 --> 00:12:47,329
it's going to skip some key

270
00:12:45,260 --> 00:12:49,040
verifications right here which have to

271
00:12:47,329 --> 00:12:53,510
deal with you know verifying that the

272
00:12:49,040 --> 00:12:55,670
certificates valid not malicious so that

273
00:12:53,510 --> 00:12:57,560
happened and that's why you should

274
00:12:55,670 --> 00:13:00,349
always QA your code because it's really

275
00:12:57,560 --> 00:13:02,359
weird that this bug got passed QA a lot

276
00:13:00,350 --> 00:13:05,240
of people there's conspiracy theories

277
00:13:02,360 --> 00:13:07,910
around this one saying it's a backdoor

278
00:13:05,240 --> 00:13:10,279
you know backdoor in place by either

279
00:13:07,910 --> 00:13:13,130
Apple or the developer who's gonna cash

280
00:13:10,279 --> 00:13:18,529
out on the CVE later no I'm sure how

281
00:13:13,130 --> 00:13:20,660
this happened but it did so apples not

282
00:13:18,529 --> 00:13:22,820
the only culprit this hit Linux too

283
00:13:20,660 --> 00:13:26,240
this hit a lot of Linux distros

284
00:13:22,820 --> 00:13:28,519
including a boon to Debian Arch got a

285
00:13:26,240 --> 00:13:32,420
lot of them and it was a vulnerability

286
00:13:28,519 --> 00:13:35,089
in the is it the new TLS or new TLS good

287
00:13:32,420 --> 00:13:37,370
new thank you and the new TLS library

288
00:13:35,089 --> 00:13:40,070
it's really similar to go to fail

289
00:13:37,370 --> 00:13:43,070
instead of a misplaced go to fail we

290
00:13:40,070 --> 00:13:46,399
have a misplaced go to clean up which it

291
00:13:43,070 --> 00:13:48,260
does similar and so again proper QA

292
00:13:46,399 --> 00:14:06,800
would have prevented this bug from being

293
00:13:48,260 --> 00:14:09,170
released some validity measures so

294
00:14:06,800 --> 00:14:13,790
that's that's not good at all very

295
00:14:09,170 --> 00:14:16,459
similar to goto fail but it hit Linux no

296
00:14:13,790 --> 00:14:17,810
no and also this failure so what we can

297
00:14:16,459 --> 00:14:20,420
do with this is use a self-signed

298
00:14:17,810 --> 00:14:22,699
certificate and pose as an authenticated

299
00:14:20,420 --> 00:14:24,170
operator of a vulnerable website we

300
00:14:22,699 --> 00:14:25,910
could do that we could go ahead and

301
00:14:24,170 --> 00:14:26,939
perform a man-in-the-middle attack with

302
00:14:25,910 --> 00:14:29,618
the

303
00:14:26,939 --> 00:14:33,309
a few things we could do

304
00:14:29,619 --> 00:14:35,199
but again proper QA your encryption can

305
00:14:33,309 --> 00:14:40,598
be flawless but if you don't implement

306
00:14:35,199 --> 00:14:42,819
it right not good right so we can't have

307
00:14:40,599 --> 00:14:47,109
a crypto talk without mentioning dual EC

308
00:14:42,819 --> 00:14:50,799
drbg which is it's a random number 8 er

309
00:14:47,109 --> 00:14:52,809
that was well it contains a backdoor it

310
00:14:50,799 --> 00:14:54,728
was approved by NIST as a standard for

311
00:14:52,809 --> 00:14:57,819
seven years and then adopted by

312
00:14:54,729 --> 00:15:04,599
companies such as Microsoft and Cisco to

313
00:14:57,819 --> 00:15:07,598
use in their crypto so this is how it's

314
00:15:04,599 --> 00:15:10,209
supposed to work it might look a little

315
00:15:07,599 --> 00:15:15,209
daunting but it's not we have a sequence

316
00:15:10,209 --> 00:15:18,478
that goes to an update function that's

317
00:15:15,209 --> 00:15:20,919
pretty much all it is nothing too fancy

318
00:15:18,479 --> 00:15:27,519
sequence is represented by s update

319
00:15:20,919 --> 00:15:30,449
functions represented by F I'm going

320
00:15:27,519 --> 00:15:33,069
through these slides way too fast ok so

321
00:15:30,449 --> 00:15:34,539
given the random number there's a way

322
00:15:33,069 --> 00:15:36,519
that the Duce with the sequence of the

323
00:15:34,539 --> 00:15:45,309
output values will be that's what the

324
00:15:36,519 --> 00:15:46,839
backdoor is and because of that we can

325
00:15:45,309 --> 00:15:49,179
go ahead and brute-force all of the

326
00:15:46,839 --> 00:15:51,489
random numbers so there's a lot of

327
00:15:49,179 --> 00:15:54,478
exploits online demonstrating this and

328
00:15:51,489 --> 00:15:57,129
its impact hit pretty far and wide

329
00:15:54,479 --> 00:15:58,809
pretty far and wide as I mentioned there

330
00:15:57,129 --> 00:16:01,239
was a lot of sketchiness surrounding

331
00:15:58,809 --> 00:16:04,149
this one - speaking of conspiracy

332
00:16:01,239 --> 00:16:06,220
theories it's alleged that mist and the

333
00:16:04,149 --> 00:16:09,899
RSA may have been involved knowing that

334
00:16:06,220 --> 00:16:12,429
it was a backdoor before releasing it

335
00:16:09,899 --> 00:16:16,559
this food for thought it's worth at

336
00:16:12,429 --> 00:16:19,720
Google definitely worth of Google so

337
00:16:16,559 --> 00:16:22,679
cons talk about unfortunately in a

338
00:16:19,720 --> 00:16:25,989
little early but getting their height so

339
00:16:22,679 --> 00:16:28,529
the TS 550 Evo so I found this one

340
00:16:25,989 --> 00:16:31,569
during some independent research I

341
00:16:28,529 --> 00:16:34,869
forget if it was this year last year but

342
00:16:31,569 --> 00:16:36,439
recently so the TS 550 is a large scale

343
00:16:34,869 --> 00:16:38,660
fuel management system that

344
00:16:36,440 --> 00:16:43,340
controls fuel levels sensor alarms and

345
00:16:38,660 --> 00:16:46,760
whatnot so it also has a user that's

346
00:16:43,340 --> 00:16:49,640
diagnostic level so this diagnostic user

347
00:16:46,760 --> 00:16:52,790
has full rein across the entire system

348
00:16:49,640 --> 00:16:58,370
he can do whatever he's better than an

349
00:16:52,790 --> 00:17:02,060
admin and so a weird thing is that their

350
00:16:58,370 --> 00:17:05,000
password is hiding right here every time

351
00:17:02,060 --> 00:17:08,720
that we make a specific post to a

352
00:17:05,000 --> 00:17:11,300
specific CGI element a specific key is

353
00:17:08,720 --> 00:17:13,730
returned along with the response it's

354
00:17:11,300 --> 00:17:15,438
kind of weird so this key when you des

355
00:17:13,730 --> 00:17:19,000
encrypt it with two ways and send it

356
00:17:15,439 --> 00:17:25,100
back as a valid password for the user

357
00:17:19,000 --> 00:17:26,750
talk about a backdoor Wow so I'm not

358
00:17:25,099 --> 00:17:28,550
sure if this was a programming mistake

359
00:17:26,750 --> 00:17:31,850
or not though could could have been just

360
00:17:28,550 --> 00:17:34,750
a programming mistake can't can't get

361
00:17:31,850 --> 00:17:34,750
hit for slander

362
00:17:37,400 --> 00:17:43,410
all right so so today I have a spent

363
00:17:41,880 --> 00:17:45,390
through that it's supposed to be another

364
00:17:43,410 --> 00:17:48,390
five minutes or so I hopefully there's

365
00:17:45,390 --> 00:17:51,630
questions so today yeah we saw a couple

366
00:17:48,390 --> 00:17:54,330
of ulnar abilities cryptographic related

367
00:17:51,630 --> 00:17:56,100
and backdoors so I'd like the main

368
00:17:54,330 --> 00:17:57,840
takeaway from this talk to be always

369
00:17:56,100 --> 00:18:00,959
always try to look for vulnerabilities

370
00:17:57,840 --> 00:18:03,209
and exploit crypto systems especially if

371
00:18:00,960 --> 00:18:06,630
somebody made it themselves you get

372
00:18:03,210 --> 00:18:09,060
weird stuff like key reuse attacks non

373
00:18:06,630 --> 00:18:11,400
randomized initialization vectors it's

374
00:18:09,060 --> 00:18:14,220
it's a mess crypto is hard to implement

375
00:18:11,400 --> 00:18:18,210
it's it's really hard to implement it's

376
00:18:14,220 --> 00:18:22,500
like a glass house and if one thing's

377
00:18:18,210 --> 00:18:27,690
wrong the whole house Falls not good not

378
00:18:22,500 --> 00:18:29,370
good at all so and there's a lot more

379
00:18:27,690 --> 00:18:32,280
out there that are still undiscovered

380
00:18:29,370 --> 00:18:34,649
like go-to fail that was undiscovered

381
00:18:32,280 --> 00:18:37,620
for many years and that was just

382
00:18:34,650 --> 00:18:43,280
blatantly obvious and to go to fail was

383
00:18:37,620 --> 00:18:46,919
open source so figure that one out and

384
00:18:43,280 --> 00:18:51,080
I'm not sure if Knut Els was too but it

385
00:18:46,920 --> 00:18:53,600
might have been it might have been it is

386
00:18:51,080 --> 00:18:58,260
okay all right thank you

387
00:18:53,600 --> 00:19:03,120
pardon me uh-huh you're right yep thank

388
00:18:58,260 --> 00:19:05,910
you thank you cool so um I guess we're

389
00:19:03,120 --> 00:19:08,610
about five minutes short there any

390
00:19:05,910 --> 00:19:11,670
questions sorry I sped through it

391
00:19:08,610 --> 00:19:11,669
[Music]

392
00:19:15,140 --> 00:19:30,240
oh that is sweet on a what ah oh man

393
00:19:26,940 --> 00:19:39,900
oh that is pretty cool that is cool

394
00:19:30,240 --> 00:19:42,779
ah there oh go ahead what you ever sure

395
00:19:39,900 --> 00:19:45,630
so on that was basically distilling some

396
00:19:42,779 --> 00:19:48,630
independent research on a lot of random

397
00:19:45,630 --> 00:19:51,289
stuff out there and we ended up just

398
00:19:48,630 --> 00:19:54,390
noticing that a key came back during

399
00:19:51,289 --> 00:19:56,730
doing one request that that we made

400
00:19:54,390 --> 00:19:58,740
there was just a randomized key that

401
00:19:56,730 --> 00:20:01,740
came back that was pretty weird

402
00:19:58,740 --> 00:20:06,480
and then just send it up utilizing that

403
00:20:01,740 --> 00:20:09,779
is it's a password and within the we

404
00:20:06,480 --> 00:20:12,149
were what was it in the manual so the

405
00:20:09,779 --> 00:20:16,470
manual was given away a lot about the

406
00:20:12,149 --> 00:20:21,270
diagnostic user so we knew to look out

407
00:20:16,470 --> 00:20:24,059
for a diagnostic user first and then

408
00:20:21,270 --> 00:20:26,730
from there we went ahead and just made

409
00:20:24,059 --> 00:20:28,260
that request got the key and then

410
00:20:26,730 --> 00:20:31,110
started looking at the key a little bit

411
00:20:28,260 --> 00:20:33,779
more heavily I forgot how we found out

412
00:20:31,110 --> 00:20:35,309
that it was two A's that one I was

413
00:20:33,779 --> 00:20:38,520
trying to figure that one out before the

414
00:20:35,309 --> 00:20:45,649
talk and couldn't do it but it was two

415
00:20:38,520 --> 00:20:45,649
A's very weird no sir

416
00:20:47,029 --> 00:21:00,210
really yeah oh it's called cracked on Sh

417
00:20:57,350 --> 00:21:00,449
okay oh cool I'm gonna write that one

418
00:21:00,210 --> 00:21:03,190
down

419
00:21:00,450 --> 00:21:10,660
thank you nope no heads

420
00:21:03,190 --> 00:21:12,220
oh god yes I did yep yep yes I did I was

421
00:21:10,660 --> 00:21:22,630
thinking about it I was thinking about

422
00:21:12,220 --> 00:21:28,200
it but I wasn't sure if it was well I

423
00:21:22,630 --> 00:21:28,200
guess it is related but yeah next time

424
00:21:39,450 --> 00:21:48,670
probably right probably I mean yeah cuz

425
00:21:46,240 --> 00:21:51,220
Microsoft implemented it in Microsoft

426
00:21:48,670 --> 00:21:54,000
just everywhere so they might have I

427
00:21:51,220 --> 00:21:57,100
mean we did a bowling alley that we were

428
00:21:54,000 --> 00:21:59,680
bowling at we found the machine with the

429
00:21:57,100 --> 00:22:00,129
Windows XP still running on it it's just

430
00:21:59,680 --> 00:22:13,090
crazy

431
00:22:00,130 --> 00:22:13,990
yeah probably not a list of all the

432
00:22:13,090 --> 00:22:29,429
crypto homes

433
00:22:13,990 --> 00:22:29,430
oh the casinos no I'm down let's roll

434
00:22:29,470 --> 00:22:41,560
oh cool alrighty well 23 minutes oh

435
00:22:37,020 --> 00:22:44,720
thank you guys thank you

436
00:22:41,560 --> 00:22:44,720
[Applause]

