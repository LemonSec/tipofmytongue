1
00:00:04,120 --> 00:00:11,600
hello everybody my name is Jeremiah

2
00:00:07,550 --> 00:00:13,719
chick and today I'm here to tell you our

3
00:00:11,600 --> 00:00:18,320
little story with a partner

4
00:00:13,720 --> 00:00:21,289
so why is a primer at all interesting if

5
00:00:18,320 --> 00:00:24,350
you use a primer properly and you take

6
00:00:21,289 --> 00:00:27,650
care of it and and you really put in the

7
00:00:24,350 --> 00:00:31,059
effort then it can be used to immunize

8
00:00:27,650 --> 00:00:33,829
your applications against their own

9
00:00:31,059 --> 00:00:37,399
vulnerabilities known or unknown wonder

10
00:00:33,829 --> 00:00:39,379
abilities and this is why it was kind of

11
00:00:37,399 --> 00:00:43,010
interesting to us but let's let's first

12
00:00:39,379 --> 00:00:45,349
look into what it is actually so just a

13
00:00:43,010 --> 00:00:49,218
little introduction if you know what

14
00:00:45,350 --> 00:00:51,649
SELinux is then just take out a lot of

15
00:00:49,219 --> 00:00:53,629
features and a lot of complexities and

16
00:00:51,649 --> 00:00:57,440
then you will end up at something like a

17
00:00:53,629 --> 00:01:00,379
primer so you have process running

18
00:00:57,440 --> 00:01:05,209
somewhere it is trying to make a system

19
00:01:00,379 --> 00:01:06,440
call and a primer basically hooks into

20
00:01:05,209 --> 00:01:09,050
the system calls

21
00:01:06,440 --> 00:01:12,590
we are the Linux security module

22
00:01:09,050 --> 00:01:14,929
framework simple any kind of file

23
00:01:12,590 --> 00:01:19,160
operation network operations obvious

24
00:01:14,930 --> 00:01:24,290
exactly and of course signals be trace

25
00:01:19,160 --> 00:01:28,759
actually quite a few and then what I

26
00:01:24,290 --> 00:01:31,190
ever gonna look up a centralized like a

27
00:01:28,760 --> 00:01:34,010
central policy a profile for that

28
00:01:31,190 --> 00:01:36,140
process identified by the path of the

29
00:01:34,010 --> 00:01:39,140
executable and it's gonna ask this

30
00:01:36,140 --> 00:01:42,260
profile ok is it ok for this process to

31
00:01:39,140 --> 00:01:45,050
do the system call so basically the

32
00:01:42,260 --> 00:01:47,180
profile is a wide list it says what your

33
00:01:45,050 --> 00:01:50,899
application is supposed to do what it

34
00:01:47,180 --> 00:01:52,670
can actually do and of course if based

35
00:01:50,900 --> 00:01:55,010
on that profile that application just

36
00:01:52,670 --> 00:01:56,659
cannot make that call then it will deny

37
00:01:55,010 --> 00:01:58,250
it and and your app will receive a

38
00:01:56,659 --> 00:02:02,659
permission denied error or something

39
00:01:58,250 --> 00:02:04,930
like that so it's like the Cliff Notes

40
00:02:02,659 --> 00:02:04,930
version

41
00:02:06,560 --> 00:02:14,020
but there's the story I mean our story

42
00:02:09,110 --> 00:02:16,130
with this begins somewhere else so I

43
00:02:14,020 --> 00:02:21,680
haven't told you anything about Prezi

44
00:02:16,130 --> 00:02:24,049
yet Press is this I'm presenting right

45
00:02:21,680 --> 00:02:25,849
now with Prezi it's it's basically an

46
00:02:24,050 --> 00:02:30,410
online presentation software that gives

47
00:02:25,849 --> 00:02:33,619
you this zooming interface and it we

48
00:02:30,410 --> 00:02:37,099
believe at least it's a better way to to

49
00:02:33,620 --> 00:02:39,590
visually communicate because it gives

50
00:02:37,099 --> 00:02:43,040
you kind of a spatial impression of

51
00:02:39,590 --> 00:02:46,670
everything and one of the features in

52
00:02:43,040 --> 00:02:49,329
Prezi is that you can upload a video

53
00:02:46,670 --> 00:02:55,040
file and actually embed it into your

54
00:02:49,330 --> 00:02:56,900
presentation so let me show you actually

55
00:02:55,040 --> 00:02:57,440
I prepared a little demo for this oh

56
00:02:56,900 --> 00:03:01,760
sorry

57
00:02:57,440 --> 00:03:06,920
just one more thing this whole thing

58
00:03:01,760 --> 00:03:10,220
this video upload is served by a micro

59
00:03:06,920 --> 00:03:12,350
service with written in Python and it

60
00:03:10,220 --> 00:03:14,690
will actually take your video that does

61
00:03:12,350 --> 00:03:17,810
some processing on it and it's gonna put

62
00:03:14,690 --> 00:03:21,130
it into the present and I made a little

63
00:03:17,810 --> 00:03:26,109
replica of this service so that I can

64
00:03:21,130 --> 00:03:26,109
demo your really nice thinking about it

65
00:03:33,640 --> 00:03:41,929
so this is basically the user interface

66
00:03:37,130 --> 00:03:44,930
of that service whatever and I'm gonna

67
00:03:41,930 --> 00:03:47,030
say okay let's scale my whatever

68
00:03:44,930 --> 00:03:50,209
everyday why I'm uploading it doesn't

69
00:03:47,030 --> 00:03:54,370
really matter and I'm gonna upload this

70
00:03:50,209 --> 00:03:54,370
cute kittens thoughts avi of course and

71
00:03:54,910 --> 00:04:00,739
the conversion is happening in the

72
00:03:57,440 --> 00:04:03,139
background and this is really what used

73
00:04:00,739 --> 00:04:06,240
to happen when you when you embedded a

74
00:04:03,139 --> 00:04:08,190
video to Prezi so let's see oh

75
00:04:06,240 --> 00:04:10,890
[Music]

76
00:04:08,190 --> 00:04:13,680
this is really lootcrate I don't know if

77
00:04:10,890 --> 00:04:16,860
you if you had a chance to spot it but

78
00:04:13,680 --> 00:04:26,130
this is exactly the contents of the etc

79
00:04:16,860 --> 00:04:30,630
password file okay so so this this

80
00:04:26,130 --> 00:04:32,100
happened I mean one day we receive a bug

81
00:04:30,630 --> 00:04:36,360
bounty submission we have a bug bounty

82
00:04:32,100 --> 00:04:39,030
program and and it was telling us that

83
00:04:36,360 --> 00:04:42,270
hey this this works I mean they could

84
00:04:39,030 --> 00:04:44,369
actually read the password file from the

85
00:04:42,270 --> 00:04:51,060
nodes that were running the conversions

86
00:04:44,370 --> 00:04:52,830
for for these video files so just just

87
00:04:51,060 --> 00:04:54,480
for I mean I'm pretty sure you see what

88
00:04:52,830 --> 00:04:57,990
was happening this is just a recap of

89
00:04:54,480 --> 00:05:04,610
this there was a CV about this so the

90
00:04:57,990 --> 00:05:07,590
issue was in in ffmpeg HTTP live stream

91
00:05:04,610 --> 00:05:09,870
processing feature it basically did not

92
00:05:07,590 --> 00:05:11,969
properly validate the URLs and it

93
00:05:09,870 --> 00:05:14,820
allowed to access local files as well

94
00:05:11,970 --> 00:05:17,850
instead of perforated to teach me

95
00:05:14,820 --> 00:05:20,070
requests so that was the CV and the

96
00:05:17,850 --> 00:05:23,070
funny thing is that CV II was released

97
00:05:20,070 --> 00:05:27,020
three days three days after we received

98
00:05:23,070 --> 00:05:31,560
the valve anticipation so we were a bit

99
00:05:27,020 --> 00:05:38,010
surprised and also impressed but of

100
00:05:31,560 --> 00:05:40,050
course we had to do something right one

101
00:05:38,010 --> 00:05:42,510
of the things I want to add here is that

102
00:05:40,050 --> 00:05:46,470
of course we did a lot of love digging

103
00:05:42,510 --> 00:05:48,390
and looked into and looked into all the

104
00:05:46,470 --> 00:05:50,580
ffmpeg logs we had actually pretty good

105
00:05:48,390 --> 00:05:53,280
logging about what ffmpeg dogs does in

106
00:05:50,580 --> 00:05:56,039
the background and we found hard

107
00:05:53,280 --> 00:05:58,590
evidence that nobody could exploit this

108
00:05:56,040 --> 00:06:02,100
to extract any kind of user data so this

109
00:05:58,590 --> 00:06:06,929
did not escalate into into an actual

110
00:06:02,100 --> 00:06:14,580
incident of course we found the

111
00:06:06,930 --> 00:06:18,690
researchers attempt which is great so so

112
00:06:14,580 --> 00:06:20,568
this this happened but of course we were

113
00:06:18,690 --> 00:06:23,149
ok ok this this was not

114
00:06:20,569 --> 00:06:26,589
not escalating to an incident but we

115
00:06:23,149 --> 00:06:29,839
still had to mitigate the issue right so

116
00:06:26,589 --> 00:06:31,939
we asked the question what the hell

117
00:06:29,839 --> 00:06:35,740
should we do and there were a bunch of

118
00:06:31,939 --> 00:06:39,319
options like patching ffmpeg or

119
00:06:35,740 --> 00:06:39,860
container rising ffmpeg with darker C's

120
00:06:39,319 --> 00:06:43,759
roots

121
00:06:39,860 --> 00:06:46,999
whatever and we found both of the

122
00:06:43,759 --> 00:06:48,529
options pretty slow and I think this

123
00:06:46,999 --> 00:06:52,219
requires a bit of explanation

124
00:06:48,529 --> 00:06:54,499
so we handle all of these valid bug

125
00:06:52,219 --> 00:06:58,729
bounty submissions as potential

126
00:06:54,499 --> 00:07:00,889
incidents so and for for Incident

127
00:06:58,729 --> 00:07:05,020
Response we have an SLA that is measured

128
00:07:00,889 --> 00:07:08,479
in the order of magnitude of hours and

129
00:07:05,020 --> 00:07:10,729
patching this thing rebuilding these

130
00:07:08,479 --> 00:07:15,080
services redeploying it to a bunch of

131
00:07:10,729 --> 00:07:17,119
ec2 nodes all the this stuff validation

132
00:07:15,080 --> 00:07:20,779
testing whatever all the processes it

133
00:07:17,119 --> 00:07:23,559
would have taken as days so I think this

134
00:07:20,779 --> 00:07:27,139
gives you the context why why we found

135
00:07:23,559 --> 00:07:31,369
these two options slow but there was a

136
00:07:27,139 --> 00:07:33,409
farm where we already had okay so I'm

137
00:07:31,369 --> 00:07:35,899
cheating a bit here because we already

138
00:07:33,409 --> 00:07:41,240
had some basic infrastructure around it

139
00:07:35,899 --> 00:07:45,619
and it was not the first time we we used

140
00:07:41,240 --> 00:07:48,169
it but it turned out to be like a viable

141
00:07:45,619 --> 00:07:50,209
option I mean we could do mitigation

142
00:07:48,169 --> 00:07:55,068
with that part more like in an hour or

143
00:07:50,209 --> 00:07:58,279
so so let me show you what we did we

144
00:07:55,069 --> 00:08:01,009
created this profile for for ffmpeg it

145
00:07:58,279 --> 00:08:04,939
basically says ok it's ok to execute the

146
00:08:01,009 --> 00:08:07,069
binary it can read the uploaded video

147
00:08:04,939 --> 00:08:09,139
files and it can write to the directory

148
00:08:07,069 --> 00:08:11,569
where we store the converted video files

149
00:08:09,139 --> 00:08:15,769
and basically that's it some common

150
00:08:11,569 --> 00:08:19,329
stuff is there that is basically often

151
00:08:15,769 --> 00:08:22,579
aided by by all processes basically so

152
00:08:19,329 --> 00:08:26,569
and that was it I mean we came up with

153
00:08:22,579 --> 00:08:28,759
this now you're wondering ok but you

154
00:08:26,569 --> 00:08:30,439
could still read other people's video

155
00:08:28,759 --> 00:08:32,808
files but luckily it's not the case

156
00:08:30,439 --> 00:08:34,159
because then you would have to guess the

157
00:08:32,808 --> 00:08:38,899
file name which

158
00:08:34,159 --> 00:08:41,659
you will not be able to so that was our

159
00:08:38,899 --> 00:08:44,300
our mitigation back then and of course

160
00:08:41,659 --> 00:08:45,980
I'm not trying to say that it's a bad

161
00:08:44,300 --> 00:08:49,269
idea to patch it's always a good idea to

162
00:08:45,980 --> 00:08:53,360
patch but as I said because of her SLA

163
00:08:49,269 --> 00:08:56,029
we we wanted to find a quicker solution

164
00:08:53,360 --> 00:08:58,459
and then later on we of course moved on

165
00:08:56,029 --> 00:09:00,110
with patching a fan back to the latest

166
00:08:58,459 --> 00:09:05,359
version but this was this was pretty new

167
00:09:00,110 --> 00:09:08,839
stuff there then so and then I thought

168
00:09:05,360 --> 00:09:12,529
to myself why not why not take this a

169
00:09:08,839 --> 00:09:14,569
little bit further I mean yeah now

170
00:09:12,529 --> 00:09:16,639
ffmpeg was vulnerable but this was a

171
00:09:14,569 --> 00:09:19,790
Python web service that could have been

172
00:09:16,639 --> 00:09:24,319
any vulnerability inside Python or any

173
00:09:19,790 --> 00:09:27,349
Python library that we were using and of

174
00:09:24,319 --> 00:09:29,779
course we do not really know so so why

175
00:09:27,350 --> 00:09:31,639
not why not confine the entire web

176
00:09:29,779 --> 00:09:35,959
service for pepper mark we have a really

177
00:09:31,639 --> 00:09:37,790
good idea what this web service does on

178
00:09:35,959 --> 00:09:40,130
a system call level we can we can easily

179
00:09:37,790 --> 00:09:43,120
come up with a profile like it's it's

180
00:09:40,130 --> 00:09:49,790
it's really not that not difficult so I

181
00:09:43,120 --> 00:09:56,180
started to experiment and came up with

182
00:09:49,790 --> 00:10:00,219
with this thing so what you can see here

183
00:09:56,180 --> 00:10:05,508
is basically two profiles the first one

184
00:10:00,220 --> 00:10:09,350
says that it's that the web service can

185
00:10:05,509 --> 00:10:11,920
read this configuration file and I

186
00:10:09,350 --> 00:10:14,329
created a profile that this kind of

187
00:10:11,920 --> 00:10:15,589
profiles come on gene Aquarian

188
00:10:14,329 --> 00:10:18,349
applications I don't know if you know

189
00:10:15,589 --> 00:10:23,300
about Gina crane it's basically a Python

190
00:10:18,350 --> 00:10:27,170
web server and and yeah the last line

191
00:10:23,300 --> 00:10:30,769
says that it is allowed for this service

192
00:10:27,170 --> 00:10:35,389
to switch from this profile to another

193
00:10:30,769 --> 00:10:38,420
profile and this is quite important

194
00:10:35,389 --> 00:10:41,500
because this is how a part more makes it

195
00:10:38,420 --> 00:10:45,349
possible to do privilege separation

196
00:10:41,500 --> 00:10:47,110
right now it kind of makes sense to have

197
00:10:45,350 --> 00:10:49,329
like two phases for

198
00:10:47,110 --> 00:10:51,310
application 1 initialization phase where

199
00:10:49,329 --> 00:10:54,310
it's okay to access the configuration

200
00:10:51,310 --> 00:10:58,420
file and then a phase when your service

201
00:10:54,310 --> 00:11:00,969
listens to client requests and then in

202
00:10:58,420 --> 00:11:02,349
that profile it's not okay to read the

203
00:11:00,970 --> 00:11:05,110
configuration file because we already

204
00:11:02,350 --> 00:11:06,550
read the secrets from there you see

205
00:11:05,110 --> 00:11:09,579
what's happening so so it means that

206
00:11:06,550 --> 00:11:14,019
when the processing is in this place

207
00:11:09,579 --> 00:11:15,699
then no matter if an attacker can can

208
00:11:14,019 --> 00:11:19,120
find a vulnerability by which it can

209
00:11:15,700 --> 00:11:21,100
read local files he won't be able to

210
00:11:19,120 --> 00:11:24,370
access the configuration file which of

211
00:11:21,100 --> 00:11:29,589
course may contain some some sensitive

212
00:11:24,370 --> 00:11:30,880
secrets there and of course then when

213
00:11:29,589 --> 00:11:33,190
when it started to listen to these

214
00:11:30,880 --> 00:11:36,430
requests it must be allowed to execute

215
00:11:33,190 --> 00:11:38,709
ffmpeg but only can find with the

216
00:11:36,430 --> 00:11:43,089
profile with which I just showed you

217
00:11:38,709 --> 00:11:48,430
earlier so yeah there's the basic idea

218
00:11:43,089 --> 00:11:50,320
of course you will have to tell apparmor

219
00:11:48,430 --> 00:11:53,079
somehow from your application that you

220
00:11:50,320 --> 00:11:56,800
want to make this profile transition so

221
00:11:53,079 --> 00:12:01,060
for that you will have to use LeapPad

222
00:11:56,800 --> 00:12:05,550
Parmar which is basically the user space

223
00:12:01,060 --> 00:12:10,300
library for doing this kind of stuff

224
00:12:05,550 --> 00:12:14,109
it's it has a Python binding compiled by

225
00:12:10,300 --> 00:12:17,260
swig and it's basically one line of code

226
00:12:14,110 --> 00:12:18,940
really I mean it's really not that's not

227
00:12:17,260 --> 00:12:20,529
difficult you read out the conflict

228
00:12:18,940 --> 00:12:22,870
files and then you switch to a profile

229
00:12:20,529 --> 00:12:32,949
where it's no longer allowed to read the

230
00:12:22,870 --> 00:12:36,910
config files now demo time again so I

231
00:12:32,949 --> 00:12:41,620
have my little service here and I'm

232
00:12:36,910 --> 00:12:45,790
actually on the node that is hosting

233
00:12:41,620 --> 00:12:50,980
this thing and I'm going to say okay at

234
00:12:45,790 --> 00:12:53,019
murmur please and force the profile for

235
00:12:50,980 --> 00:12:56,699
this web service I call this profile one

236
00:12:53,019 --> 00:12:56,699
variable never mind

237
00:12:57,029 --> 00:13:03,579
so let's try our little exploit again I

238
00:13:00,490 --> 00:13:05,680
just enforced this profile for a primer

239
00:13:03,579 --> 00:13:09,339
and I'm gonna upload my specially

240
00:13:05,680 --> 00:13:11,709
crafted cute kittens avi I know doesn't

241
00:13:09,339 --> 00:13:15,369
really matter about let's change

242
00:13:11,709 --> 00:13:18,040
resolution as well and it is doing the

243
00:13:15,369 --> 00:13:21,249
conversion again now with the profile I

244
00:13:18,040 --> 00:13:22,389
I showed you in the previous slides and

245
00:13:21,249 --> 00:13:24,160
that part my working in the background

246
00:13:22,389 --> 00:13:32,290
so let's see the results

247
00:13:24,160 --> 00:13:37,389
oops no more password fie there so it

248
00:13:32,290 --> 00:13:40,240
works but of course I mean I showed you

249
00:13:37,389 --> 00:13:44,970
that profile there it's not trivial to

250
00:13:40,240 --> 00:13:47,290
come up with this it's not like I mean

251
00:13:44,970 --> 00:13:48,610
you will definitely have to have some

252
00:13:47,290 --> 00:13:52,089
tooling around especially if your

253
00:13:48,610 --> 00:13:54,459
service is a live thing so we started to

254
00:13:52,089 --> 00:13:57,069
come up with some infrastructure that

255
00:13:54,459 --> 00:13:59,439
supports developing these profiles by

256
00:13:57,069 --> 00:14:02,139
basically letting you know what the hell

257
00:13:59,439 --> 00:14:04,120
is going on inside that Parmar luckily

258
00:14:02,139 --> 00:14:06,910
apparmor has really good integration

259
00:14:04,120 --> 00:14:10,769
with the audit subsystem so you can find

260
00:14:06,910 --> 00:14:15,370
all the audit logs about access denials

261
00:14:10,769 --> 00:14:19,480
in the audit logs and you can basically

262
00:14:15,370 --> 00:14:21,490
just pours it we we do lock stash so it

263
00:14:19,480 --> 00:14:24,879
was pretty easy I mean I know it's not

264
00:14:21,490 --> 00:14:26,769
readable but it's really up in this

265
00:14:24,879 --> 00:14:30,639
repository I just linked on the other

266
00:14:26,769 --> 00:14:32,379
slide and of course you can stream all

267
00:14:30,639 --> 00:14:35,620
these logs into elasticsearch and then

268
00:14:32,379 --> 00:14:39,610
you can do some visualization in kibana

269
00:14:35,620 --> 00:14:41,019
where you can see your the all the

270
00:14:39,610 --> 00:14:44,679
system calls all the operations that

271
00:14:41,019 --> 00:14:46,990
were denied all the profiles all the

272
00:14:44,679 --> 00:14:48,370
objects that the applications are trying

273
00:14:46,990 --> 00:14:53,079
to access and of course the individual

274
00:14:48,370 --> 00:14:55,660
events and this gives you like live

275
00:14:53,079 --> 00:14:58,809
feedback on what is happening and how

276
00:14:55,660 --> 00:15:01,059
good your profile is doing and of course

277
00:14:58,809 --> 00:15:04,540
if you're already advanced and we do

278
00:15:01,059 --> 00:15:06,939
this at Prezi already you can build some

279
00:15:04,540 --> 00:15:08,769
alerting around this whenever a par more

280
00:15:06,939 --> 00:15:11,110
says no too

281
00:15:08,769 --> 00:15:13,749
to some system call you can for example

282
00:15:11,110 --> 00:15:15,069
to your slack alerts and tell the

283
00:15:13,749 --> 00:15:17,699
security team this is this is pretty

284
00:15:15,069 --> 00:15:21,189
important because this tells me that

285
00:15:17,699 --> 00:15:23,410
either so either there's a new

286
00:15:21,189 --> 00:15:26,110
vulnerability we did not know about and

287
00:15:23,410 --> 00:15:28,509
someone is trying to exploit it or our

288
00:15:26,110 --> 00:15:31,799
profile is not correct and it's not

289
00:15:28,509 --> 00:15:34,869
allowing some action for that service to

290
00:15:31,799 --> 00:15:37,029
to carry out even though that action is

291
00:15:34,869 --> 00:15:39,970
legitimate so these are the two things

292
00:15:37,029 --> 00:15:51,629
and both cases and both pieces of

293
00:15:39,970 --> 00:15:56,889
information are really useful so yep a

294
00:15:51,629 --> 00:15:59,379
lot of things was said I want to give

295
00:15:56,889 --> 00:16:02,079
you a little recap like a little summary

296
00:15:59,379 --> 00:16:04,749
of what we learned during this whole

297
00:16:02,079 --> 00:16:06,638
process of playing with that partner so

298
00:16:04,749 --> 00:16:08,949
one thing is that you probably shouldn't

299
00:16:06,639 --> 00:16:11,799
confine all the processes I mean even if

300
00:16:08,949 --> 00:16:13,628
you have all this tooling around it it

301
00:16:11,799 --> 00:16:15,459
probably doesn't make sense to create a

302
00:16:13,629 --> 00:16:17,559
profile for every single thing that you

303
00:16:15,459 --> 00:16:19,628
have instead you would probably want to

304
00:16:17,559 --> 00:16:23,889
do a proper risk assessment approach and

305
00:16:19,629 --> 00:16:26,170
and see see what the risk of an

306
00:16:23,889 --> 00:16:27,850
arbitrary command execution or an

307
00:16:26,170 --> 00:16:29,319
arbitrary fire rate can be on that

308
00:16:27,850 --> 00:16:34,170
mission because it might not be that's

309
00:16:29,319 --> 00:16:36,309
critical in all the cases yeah so

310
00:16:34,170 --> 00:16:39,729
probably you don't want to go crazy and

311
00:16:36,309 --> 00:16:42,399
and start kind of finding everything but

312
00:16:39,730 --> 00:16:44,249
it is as I showed you a good idea to

313
00:16:42,399 --> 00:16:48,399
integrate it with your existing

314
00:16:44,249 --> 00:16:51,749
monitoring system because this is really

315
00:16:48,399 --> 00:16:56,110
the thing that will make a poor more a a

316
00:16:51,749 --> 00:16:58,230
viable tool for your developers and it

317
00:16:56,110 --> 00:17:02,410
really has to be the developers because

318
00:16:58,230 --> 00:17:04,299
the profile describes so the profile

319
00:17:02,410 --> 00:17:08,138
depends on how your application works

320
00:17:04,299 --> 00:17:10,929
under normal circumstances how this

321
00:17:08,138 --> 00:17:15,039
supposed to work so it really lives

322
00:17:10,929 --> 00:17:17,750
together with the code so so actually it

323
00:17:15,039 --> 00:17:21,859
could be regarded as part of the code

324
00:17:17,750 --> 00:17:24,230
and and yeah so because the code is

325
00:17:21,859 --> 00:17:26,750
understood by the developers you really

326
00:17:24,230 --> 00:17:28,730
really have to give them some tooling

327
00:17:26,750 --> 00:17:31,940
that makes makes it possible for them to

328
00:17:28,730 --> 00:17:38,029
use a primer as an additional line of

329
00:17:31,940 --> 00:17:41,000
defense on the other hand testing it is

330
00:17:38,029 --> 00:17:45,620
not it's far from trivial I think it

331
00:17:41,000 --> 00:17:48,259
starts from having good acceptance tests

332
00:17:45,620 --> 00:17:52,100
actually this is what we did when when

333
00:17:48,259 --> 00:17:55,000
the ffmpeg thingie happened we basically

334
00:17:52,100 --> 00:17:59,299
started to iterate on the profile always

335
00:17:55,000 --> 00:18:01,460
updating it adding some extra permission

336
00:17:59,299 --> 00:18:04,309
and then running the acceptance tests

337
00:18:01,460 --> 00:18:06,740
and see where it breaks and then we

338
00:18:04,309 --> 00:18:08,450
iterate again and again and again and in

339
00:18:06,740 --> 00:18:13,789
the meantime we could monitor this whole

340
00:18:08,450 --> 00:18:17,509
thing on cabaña as I showed to you and

341
00:18:13,789 --> 00:18:22,730
finally a primer is just as good as your

342
00:18:17,509 --> 00:18:26,919
profiles I think this came up earlier in

343
00:18:22,730 --> 00:18:29,210
the apostille assist talk that basically

344
00:18:26,919 --> 00:18:30,799
profiles our whitelist if you say in a

345
00:18:29,210 --> 00:18:33,649
white is that it's okay to do anything

346
00:18:30,799 --> 00:18:35,240
then you are not better at all and you

347
00:18:33,649 --> 00:18:37,758
are just adding complexity but not

348
00:18:35,240 --> 00:18:42,230
security and that doesn't make too much

349
00:18:37,759 --> 00:18:45,950
sense so it really has to be has to be

350
00:18:42,230 --> 00:18:48,529
maintained and it's not snake oil I mean

351
00:18:45,950 --> 00:18:54,700
it's not like your security solution for

352
00:18:48,529 --> 00:19:10,970
everything yeah so that was kind of it

353
00:18:54,700 --> 00:19:18,919
questions no question what about

354
00:19:10,970 --> 00:19:24,830
selinux in comparison so we considered

355
00:19:18,919 --> 00:19:26,179
as Linux as well but we found that the

356
00:19:24,830 --> 00:19:28,309
cost of a Scylla looks for an

357
00:19:26,179 --> 00:19:29,330
organization like us like Prezi which is

358
00:19:28,309 --> 00:19:33,110
like

359
00:19:29,330 --> 00:19:36,939
a midsize organization is this way too

360
00:19:33,110 --> 00:19:40,550
high because of the extra complexities

361
00:19:36,940 --> 00:19:42,740
because of the whole difficulties around

362
00:19:40,550 --> 00:19:44,960
the cynics I mean I know that there are

363
00:19:42,740 --> 00:19:47,270
definitely some advantages it has a lot

364
00:19:44,960 --> 00:19:51,110
more features it has a lot better

365
00:19:47,270 --> 00:19:53,780
documentation but if we really want to

366
00:19:51,110 --> 00:19:57,290
distribute this and ask developers to

367
00:19:53,780 --> 00:19:59,300
actually develop and maintain these

368
00:19:57,290 --> 00:20:01,250
profiles then I Parmar is a lot more

369
00:19:59,300 --> 00:20:12,950
viable option because of its simplicity

370
00:20:01,250 --> 00:20:15,080
then then I see Linux so what you just

371
00:20:12,950 --> 00:20:16,700
mentioned about armed developer square

372
00:20:15,080 --> 00:20:19,490
in the profiles do you think that's

373
00:20:16,700 --> 00:20:21,770
realistic um or do you think maybe

374
00:20:19,490 --> 00:20:23,840
another approach might be to kind of

375
00:20:21,770 --> 00:20:26,090
enforce a profile and say the

376
00:20:23,840 --> 00:20:28,100
application needs to conform to this

377
00:20:26,090 --> 00:20:32,000
like which approach do you think would

378
00:20:28,100 --> 00:20:34,010
work better so when you mentioned about

379
00:20:32,000 --> 00:20:35,570
the profiles and having developers

380
00:20:34,010 --> 00:20:37,760
create them do you think that's

381
00:20:35,570 --> 00:20:40,100
realistic or do you think maybe it might

382
00:20:37,760 --> 00:20:42,770
be better to I mean that gives them say

383
00:20:40,100 --> 00:20:45,010
your application needs to work with with

384
00:20:42,770 --> 00:20:45,010
this

385
00:20:49,290 --> 00:20:53,550
thanks very much for that question

386
00:20:50,980 --> 00:20:56,740
because I actually wanted to point out

387
00:20:53,550 --> 00:21:00,550
one thing is that the idea of using a

388
00:20:56,740 --> 00:21:03,210
perm were in this case with ffmpeg it

389
00:21:00,550 --> 00:21:05,169
came from a developer one of our

390
00:21:03,210 --> 00:21:07,030
developers so I was I was actually

391
00:21:05,170 --> 00:21:10,330
really proud and and I and I was like

392
00:21:07,030 --> 00:21:13,750
okay so people are already already aware

393
00:21:10,330 --> 00:21:16,389
of this and and the are okay with using

394
00:21:13,750 --> 00:21:19,630
it and trying it out with all this extra

395
00:21:16,390 --> 00:21:21,700
tooling so yeah based on that I think

396
00:21:19,630 --> 00:21:25,690
it's it's totally realistic of course

397
00:21:21,700 --> 00:21:28,660
your profile will not be like at any

398
00:21:25,690 --> 00:21:32,290
certain time fully up-to-date and and

399
00:21:28,660 --> 00:21:34,420
perfect but we are probably probably

400
00:21:32,290 --> 00:21:47,530
good with not perfect but almost perfect

401
00:21:34,420 --> 00:21:51,070
so I mean it's thank you very much it

402
00:21:47,530 --> 00:21:54,850
might be the case that developers are

403
00:21:51,070 --> 00:21:56,350
very relaxed about permissions and also

404
00:21:54,850 --> 00:22:00,010
we have to take into account that with

405
00:21:56,350 --> 00:22:02,020
each update of application things might

406
00:22:00,010 --> 00:22:05,740
break might not work anymore so I will

407
00:22:02,020 --> 00:22:07,990
advise also to put one point about put

408
00:22:05,740 --> 00:22:09,640
it on monitoring mode for the first part

409
00:22:07,990 --> 00:22:11,530
of installation first few days I would

410
00:22:09,640 --> 00:22:15,040
say week and then on with every major

411
00:22:11,530 --> 00:22:17,430
update depending on how bold our

412
00:22:15,040 --> 00:22:20,620
developers with major and minor updates

413
00:22:17,430 --> 00:22:25,830
have a look out about things that get

414
00:22:20,620 --> 00:22:25,830
denied just for maintaining operations

415
00:22:30,060 --> 00:22:35,200
yep thanks for thanks for pointing that

416
00:22:32,260 --> 00:22:37,510
out so apparmor has a like a complaint

417
00:22:35,200 --> 00:22:40,480
mode where it only logs what it would

418
00:22:37,510 --> 00:22:44,080
deny in enforcing mode and of course I

419
00:22:40,480 --> 00:22:46,060
did not say but quite obviously we did

420
00:22:44,080 --> 00:22:48,040
not run when we were fixing FM pi we

421
00:22:46,060 --> 00:22:49,810
were not running it's in enforce mode

422
00:22:48,040 --> 00:22:53,860
like in the beginning we were iterating

423
00:22:49,810 --> 00:22:56,020
it in complaint mode so

424
00:22:53,860 --> 00:22:59,320
because of exactly the reasons you were

425
00:22:56,020 --> 00:23:01,270
mentioning because of preparing for

426
00:22:59,320 --> 00:23:03,280
possible downtime and now voltages and

427
00:23:01,270 --> 00:23:05,310
and just breaking the whole thing we

428
00:23:03,280 --> 00:23:07,389
really have to take a careful approach

429
00:23:05,310 --> 00:23:08,830
approach there but it's but it's totally

430
00:23:07,390 --> 00:23:14,290
feasible to do that so thanks for

431
00:23:08,830 --> 00:23:17,620
pointing that out yeah thanks for the

432
00:23:14,290 --> 00:23:26,110
talk I have a question so in the first

433
00:23:17,620 --> 00:23:29,139
demo you created the profile to harden

434
00:23:26,110 --> 00:23:31,330
the filesystem and specify specific

435
00:23:29,140 --> 00:23:33,420
locations that it has access to and

436
00:23:31,330 --> 00:23:38,770
you're allowed access to the uploads

437
00:23:33,420 --> 00:23:41,230
directory only now this was working for

438
00:23:38,770 --> 00:23:45,220
you guys because the filenames in that

439
00:23:41,230 --> 00:23:47,590
directory we're using UUID as a file

440
00:23:45,220 --> 00:23:50,920
name so the attacker a possible attacker

441
00:23:47,590 --> 00:23:54,790
could not identify not guess the file

442
00:23:50,920 --> 00:23:57,820
name to access it correct what would

443
00:23:54,790 --> 00:24:00,820
happen if you didn't use UUID and you

444
00:23:57,820 --> 00:24:10,120
had other types of file names like

445
00:24:00,820 --> 00:24:14,290
sequence I don't know would it work so

446
00:24:10,120 --> 00:24:17,580
yeah if you if you take this perspective

447
00:24:14,290 --> 00:24:20,139
then basically this only works because

448
00:24:17,580 --> 00:24:22,480
there was no way for the attacker to

449
00:24:20,140 --> 00:24:24,580
list the directories right because if we

450
00:24:22,480 --> 00:24:29,160
can look up any file name then even the

451
00:24:24,580 --> 00:24:31,330
UUID thing will not really save us so

452
00:24:29,160 --> 00:24:33,670
actually that is also something that you

453
00:24:31,330 --> 00:24:36,250
can control with a primer so you can say

454
00:24:33,670 --> 00:24:38,770
that you cannot released this directory

455
00:24:36,250 --> 00:24:42,640
so that's that's what you can leave and

456
00:24:38,770 --> 00:24:45,639
of course there is as I mentioned the

457
00:24:42,640 --> 00:24:47,320
issue that these paths might change the

458
00:24:45,640 --> 00:24:49,060
application might change how it handles

459
00:24:47,320 --> 00:24:51,909
these file names and everything so this

460
00:24:49,060 --> 00:24:54,550
is why you actually you're kind of you

461
00:24:51,910 --> 00:25:03,610
kind of have to adapt your profile to

462
00:24:54,550 --> 00:25:05,850
the application all the time what if the

463
00:25:03,610 --> 00:25:07,679
file names are predictable

464
00:25:05,850 --> 00:25:09,540
that's my point okay you cannot list the

465
00:25:07,680 --> 00:25:10,830
contents of the directory what if the

466
00:25:09,540 --> 00:25:14,940
filenames are predictably

467
00:25:10,830 --> 00:25:20,360
like 1 2 3 4 ok so using parameter

468
00:25:14,940 --> 00:25:20,360
tampering you know I can get any final 1

469
00:25:21,590 --> 00:25:25,860
so the findings are predictable than a

470
00:25:24,090 --> 00:25:29,959
primer will not save you because it has

471
00:25:25,860 --> 00:25:32,370
no idea of the context in the sense that

472
00:25:29,960 --> 00:25:33,480
of course it doesn't know about any kind

473
00:25:32,370 --> 00:25:36,149
of authorization that you might

474
00:25:33,480 --> 00:25:40,140
implement on the application level so it

475
00:25:36,150 --> 00:25:44,240
speaks system calls it speaks 5

476
00:25:40,140 --> 00:25:46,530
permissions it doesn't speak user or

477
00:25:44,240 --> 00:25:48,780
stuff like that because because that's

478
00:25:46,530 --> 00:25:57,440
like like a much higher level concept so

479
00:25:48,780 --> 00:25:57,440
you cannot cannot really do that anyone

480
00:25:57,560 --> 00:26:05,129
will you publish for example the profile

481
00:26:01,500 --> 00:26:14,100
generator or the L configuration on some

482
00:26:05,130 --> 00:26:15,780
github or yes I mean even even the

483
00:26:14,100 --> 00:26:17,879
application I mean I mean this little

484
00:26:15,780 --> 00:26:19,050
Python thing is is already app the

485
00:26:17,880 --> 00:26:21,570
profiles are already up

486
00:26:19,050 --> 00:26:23,250
I think the locks - config is nothing

487
00:26:21,570 --> 00:26:27,149
that's wrap or yet but I can push it of

488
00:26:23,250 --> 00:26:31,790
course and I will yeah sorry

489
00:26:27,150 --> 00:26:31,790
so that was in the Oh No

490
00:26:44,160 --> 00:26:55,000
so this is the link sorry I don't know

491
00:26:52,780 --> 00:27:05,230
what's the good formats of sharing these

492
00:26:55,000 --> 00:27:07,510
after not doing what if I'm running my

493
00:27:05,230 --> 00:27:09,760
services on docker for instance what

494
00:27:07,510 --> 00:27:09,940
would be the benefit or the added value

495
00:27:09,760 --> 00:27:15,970
of

496
00:27:09,940 --> 00:27:21,100
apparmor in this case so the thing that

497
00:27:15,970 --> 00:27:24,190
docker is that sorry so with docker you

498
00:27:21,100 --> 00:27:28,510
can do all this without a parmer the

499
00:27:24,190 --> 00:27:30,970
thing is that the all these security

500
00:27:28,510 --> 00:27:34,060
related features around docker tries to

501
00:27:30,970 --> 00:27:35,350
build on security in depth so they are

502
00:27:34,060 --> 00:27:38,379
providing a bunch of security related

503
00:27:35,350 --> 00:27:40,899
technologies and they might be redundant

504
00:27:38,380 --> 00:27:44,980
they might do the same thing so for

505
00:27:40,900 --> 00:27:47,170
example with some volumes and SATCOM and

506
00:27:44,980 --> 00:27:49,540
and capability restrictions and are

507
00:27:47,170 --> 00:27:54,150
limits for example you can you can do

508
00:27:49,540 --> 00:27:58,720
the same as with an epimer profile but

509
00:27:54,150 --> 00:28:02,020
the idea behind this model is that you

510
00:27:58,720 --> 00:28:05,470
might want to use some technologies for

511
00:28:02,020 --> 00:28:07,680
a specific use case you might want to

512
00:28:05,470 --> 00:28:10,720
combine these technologies just in case

513
00:28:07,680 --> 00:28:13,630
any of these might fail or not up to

514
00:28:10,720 --> 00:28:16,200
date or not correctly configured so

515
00:28:13,630 --> 00:28:18,880
that's that's really like just taking a

516
00:28:16,200 --> 00:28:20,860
security in-depth approach and actually

517
00:28:18,880 --> 00:28:23,980
docker really supports a perm we're

518
00:28:20,860 --> 00:28:26,649
pretty well now of course the dr. Damon

519
00:28:23,980 --> 00:28:28,870
itself has an epimer profile and it has

520
00:28:26,650 --> 00:28:31,750
a pretty good default that former

521
00:28:28,870 --> 00:28:33,729
profile for for the containers which you

522
00:28:31,750 --> 00:28:43,750
can start with and then you can then you

523
00:28:33,730 --> 00:28:46,830
can iterate on that okay so Joey thank

524
00:28:43,750 --> 00:28:48,890
you very much for your torch

525
00:28:46,830 --> 00:28:48,889
you

