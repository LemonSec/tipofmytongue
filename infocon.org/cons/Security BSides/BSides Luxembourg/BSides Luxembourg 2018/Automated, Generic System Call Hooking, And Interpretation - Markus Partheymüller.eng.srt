1
00:00:02,580 --> 00:00:06,779
thank you and thanks to all of you who

2
00:00:05,160 --> 00:00:08,850
are sticking around to this last talk

3
00:00:06,779 --> 00:00:11,760
I'll try to make it entertaining and

4
00:00:08,850 --> 00:00:13,799
quick so I'll repeat some of that

5
00:00:11,760 --> 00:00:16,500
interjection again but I'll go quickly

6
00:00:13,799 --> 00:00:19,110
through it so I'm a software developer

7
00:00:16,500 --> 00:00:21,390
with OS and virtualization background I

8
00:00:19,110 --> 00:00:25,259
studied at the Technical University in

9
00:00:21,390 --> 00:00:27,960
Dresden which is the home for something

10
00:00:25,260 --> 00:00:30,000
called the Nova micro hypervisor without

11
00:00:27,960 --> 00:00:32,460
going into too much detail but micro

12
00:00:30,000 --> 00:00:34,140
hypervisor is a very tiny operating

13
00:00:32,460 --> 00:00:36,030
system kernel that's been designed with

14
00:00:34,140 --> 00:00:38,190
virtualization in mind from the start

15
00:00:36,030 --> 00:00:41,340
and it only implements the necessary

16
00:00:38,190 --> 00:00:43,019
mechanisms in the kernel mode and then

17
00:00:41,340 --> 00:00:48,329
everything else is built on top of that

18
00:00:43,020 --> 00:00:50,940
in the user land yeah as mentioned I've

19
00:00:48,329 --> 00:00:52,760
worked with Intel and fireEye where we

20
00:00:50,940 --> 00:00:55,739
try to apply virtual machine technology

21
00:00:52,760 --> 00:00:59,420
in security related areas for example

22
00:00:55,739 --> 00:01:02,218
endpoint protection or malware analysis

23
00:00:59,420 --> 00:01:04,469
after that we decided to found this

24
00:01:02,219 --> 00:01:06,210
company cypress technology where we

25
00:01:04,468 --> 00:01:09,568
wanted to bring something on the market

26
00:01:06,210 --> 00:01:12,059
that features Nova at its core and that

27
00:01:09,569 --> 00:01:14,700
brings me to the motivation of this talk

28
00:01:12,060 --> 00:01:16,920
which is our Tyco malware analysis

29
00:01:14,700 --> 00:01:18,990
platform and again I won't go into too

30
00:01:16,920 --> 00:01:20,850
much detail but the platform looks like

31
00:01:18,990 --> 00:01:23,699
this we have the analysts laptop on the

32
00:01:20,850 --> 00:01:25,969
Left which contains your usual work

33
00:01:23,700 --> 00:01:28,350
environment like Ida Pro debuggers

34
00:01:25,969 --> 00:01:30,419
volatility static analysis stuff and

35
00:01:28,350 --> 00:01:33,509
then you have a target that's connected

36
00:01:30,420 --> 00:01:36,539
to it that basically runs just an normal

37
00:01:33,509 --> 00:01:38,249
install Windows System unmodified and

38
00:01:36,539 --> 00:01:41,219
then we just slip our hypervisor and the

39
00:01:38,249 --> 00:01:44,158
virtualization underneath and we use it

40
00:01:41,219 --> 00:01:46,048
to analyze malware now the question is

41
00:01:44,159 --> 00:01:49,109
what do we actually analyze in malware

42
00:01:46,049 --> 00:01:52,049
and that's the application behavior so

43
00:01:49,109 --> 00:01:54,359
we have this application that's usually

44
00:01:52,049 --> 00:01:57,389
to do something that is useful to the

45
00:01:54,359 --> 00:02:00,929
application it accesses files or the

46
00:01:57,389 --> 00:02:02,729
network or the Windows registry and the

47
00:02:00,929 --> 00:02:05,310
way to do that on pretty much every

48
00:02:02,729 --> 00:02:08,818
operating system I know is system calls

49
00:02:05,310 --> 00:02:10,860
and so a system call is just the

50
00:02:08,818 --> 00:02:12,690
interface between the kernel the

51
00:02:10,860 --> 00:02:14,440
operating system kernel and the

52
00:02:12,690 --> 00:02:16,990
application that wants some

53
00:02:14,440 --> 00:02:18,880
thing done so the operating system is

54
00:02:16,990 --> 00:02:22,510
there to service requests that are

55
00:02:18,880 --> 00:02:24,940
signified by system calls and these

56
00:02:22,510 --> 00:02:28,390
include stuff like file access network

57
00:02:24,940 --> 00:02:30,790
access you know all those things that

58
00:02:28,390 --> 00:02:33,609
you want to yeah control as an

59
00:02:30,790 --> 00:02:37,690
application including studying processes

60
00:02:33,610 --> 00:02:41,200
threads and modifying your memory layout

61
00:02:37,690 --> 00:02:43,900
and in the application and for the rest

62
00:02:41,200 --> 00:02:47,109
of the talk we'll be using one system

63
00:02:43,900 --> 00:02:51,460
called example to see how we interpret

64
00:02:47,110 --> 00:02:53,440
this in our analysis platform and again

65
00:02:51,460 --> 00:02:55,600
you don't have to look too closely well

66
00:02:53,440 --> 00:02:58,090
yeah this system call will haunt you for

67
00:02:55,600 --> 00:03:00,760
the rest of the talk this is how the

68
00:02:58,090 --> 00:03:03,400
system call looks like an Ida Pro you

69
00:03:00,760 --> 00:03:05,739
just have something here that's the

70
00:03:03,400 --> 00:03:07,600
system called instruction and then you

71
00:03:05,740 --> 00:03:10,000
have just a bunch of numbers ones and

72
00:03:07,600 --> 00:03:12,070
zeros and nothing makes any sense what

73
00:03:10,000 --> 00:03:15,790
we actually want is a picture like this

74
00:03:12,070 --> 00:03:17,950
so we have printed output of the system

75
00:03:15,790 --> 00:03:19,540
called parameters of what this is

76
00:03:17,950 --> 00:03:22,500
actually about we don't want to look at

77
00:03:19,540 --> 00:03:25,720
all those numbers in detail all the time

78
00:03:22,500 --> 00:03:28,989
yeah and the way from the previous bit

79
00:03:25,720 --> 00:03:32,260
image to this one will be what I'm gonna

80
00:03:28,989 --> 00:03:34,480
be talking about in this talk but first

81
00:03:32,260 --> 00:03:36,579
we have to feel some of that pain so we

82
00:03:34,480 --> 00:03:40,299
do that manually first and then see how

83
00:03:36,580 --> 00:03:41,890
we can automate it and first of all we

84
00:03:40,300 --> 00:03:44,880
have to think about how we interpret the

85
00:03:41,890 --> 00:03:47,440
system call on the Windows machine and

86
00:03:44,880 --> 00:03:49,359
one of the key things is we have to find

87
00:03:47,440 --> 00:03:51,880
out which system call it actually is and

88
00:03:49,360 --> 00:03:55,420
that is sort in a register called

89
00:03:51,880 --> 00:03:57,910
IRA X on 64-bit Windows so that we

90
00:03:55,420 --> 00:03:59,799
actually know and we also know that the

91
00:03:57,910 --> 00:04:02,160
result of the system call after it was

92
00:03:59,800 --> 00:04:04,450
handled is also stored in that register

93
00:04:02,160 --> 00:04:06,100
and then the system called on Windows

94
00:04:04,450 --> 00:04:08,920
pretty much follows the Microsoft

95
00:04:06,100 --> 00:04:11,950
calling convention so we have four

96
00:04:08,920 --> 00:04:12,940
registers four parameters for this is

97
00:04:11,950 --> 00:04:16,450
our CX

98
00:04:12,940 --> 00:04:18,310
RDX r8 and r9 however on system call

99
00:04:16,450 --> 00:04:20,440
that doesn't really work because our CX

100
00:04:18,310 --> 00:04:23,260
is used internally so that is swapped

101
00:04:20,440 --> 00:04:25,030
with our 10 but still we end up with

102
00:04:23,260 --> 00:04:26,210
these four registers for the first four

103
00:04:25,030 --> 00:04:29,210
parameters

104
00:04:26,210 --> 00:04:30,830
the rest is just past on the sack but

105
00:04:29,210 --> 00:04:32,900
for the rest of this talk to make it

106
00:04:30,830 --> 00:04:35,500
simple we just focus on the register

107
00:04:32,900 --> 00:04:38,929
once so it doesn't get too complicated

108
00:04:35,500 --> 00:04:41,479
so what do we need to know in order to

109
00:04:38,930 --> 00:04:43,220
interpret the system call now we need to

110
00:04:41,479 --> 00:04:46,818
know the Windows version for example we

111
00:04:43,220 --> 00:04:48,860
have a Windows 7 Service Pack 1 and then

112
00:04:46,819 --> 00:04:50,630
we need the architectural state which

113
00:04:48,860 --> 00:04:52,699
contains the registers that we've been

114
00:04:50,630 --> 00:04:54,919
talking about and we also need the

115
00:04:52,699 --> 00:04:57,319
memory dumps and both of them we need

116
00:04:54,919 --> 00:05:00,169
before and after the system calls so we

117
00:04:57,319 --> 00:05:03,470
see what went into the corner and what

118
00:05:00,169 --> 00:05:06,320
came out of it now coming back to the

119
00:05:03,470 --> 00:05:08,060
example we have this register state now

120
00:05:06,320 --> 00:05:09,650
in a little bit more readable form

121
00:05:08,060 --> 00:05:11,389
because I've already highlighted the

122
00:05:09,650 --> 00:05:15,049
four parameters for you and also the

123
00:05:11,389 --> 00:05:18,259
number now we see it's hexadecimal

124
00:05:15,050 --> 00:05:20,960
52 and we have four parameters that

125
00:05:18,259 --> 00:05:23,659
still don't really make sense to most of

126
00:05:20,960 --> 00:05:25,698
us I guess and what we also know is

127
00:05:23,659 --> 00:05:27,770
after the system called the result is

128
00:05:25,699 --> 00:05:29,509
zero so yeah it's the first information

129
00:05:27,770 --> 00:05:32,570
we understand it's the error code zero

130
00:05:29,509 --> 00:05:33,889
which is successful but all the rest is

131
00:05:32,570 --> 00:05:36,530
still yeah pretty much

132
00:05:33,889 --> 00:05:39,020
unclear we have to figure out what

133
00:05:36,530 --> 00:05:41,809
system for was that and what parameters

134
00:05:39,020 --> 00:05:43,490
went in now how do we find that of

135
00:05:41,810 --> 00:05:46,759
course as usual the internet knows

136
00:05:43,490 --> 00:05:48,969
things there is for example the

137
00:05:46,759 --> 00:05:51,500
Microsoft developer documentation

138
00:05:48,969 --> 00:05:53,300
unfortunately that's pretty incomplete

139
00:05:51,500 --> 00:05:55,520
when it comes to those low-level system

140
00:05:53,300 --> 00:05:57,650
calls and that's also partly on purpose

141
00:05:55,520 --> 00:05:59,719
because that's something Microsoft

142
00:05:57,650 --> 00:06:01,219
usually wants to hide because they have

143
00:05:59,719 --> 00:06:04,219
their own system called wrapper

144
00:06:01,219 --> 00:06:06,979
libraries like ntdll that contain all

145
00:06:04,219 --> 00:06:08,900
the wrapper code so you as a developer

146
00:06:06,979 --> 00:06:10,900
don't have to worry about it you just

147
00:06:08,900 --> 00:06:14,210
call a function and out comes the result

148
00:06:10,900 --> 00:06:16,880
but for us from the hardware low-level

149
00:06:14,210 --> 00:06:19,250
perspective we have to deal with this

150
00:06:16,880 --> 00:06:21,320
low-level system call so we have to find

151
00:06:19,250 --> 00:06:23,210
out what it's all about and of course

152
00:06:21,320 --> 00:06:25,460
we're not the only ones there are

153
00:06:23,210 --> 00:06:27,979
third-party websites who contain who

154
00:06:25,460 --> 00:06:30,770
gathered this information and presented

155
00:06:27,979 --> 00:06:34,099
it and I've give you I'll give you two

156
00:06:30,770 --> 00:06:36,830
examples one of them is Vic's ilium org

157
00:06:34,099 --> 00:06:38,300
which contains the system call list for

158
00:06:36,830 --> 00:06:41,030
all the Windows versions

159
00:06:38,300 --> 00:06:43,039
that this person found and the

160
00:06:41,030 --> 00:06:45,068
respective numbers for the system calls

161
00:06:43,039 --> 00:06:47,870
and then there's also something called

162
00:06:45,069 --> 00:06:50,539
undocumented auntie internals which

163
00:06:47,870 --> 00:06:52,129
contains system called signatures for

164
00:06:50,539 --> 00:06:55,280
most of the system calls we're looking

165
00:06:52,129 --> 00:06:57,560
at so again coming back to the example

166
00:06:55,280 --> 00:07:00,770
we can do a first assessment with those

167
00:06:57,560 --> 00:07:05,240
websites and we have the signature here

168
00:07:00,770 --> 00:07:07,068
for empty create file because this x52

169
00:07:05,240 --> 00:07:08,960
that i've shown you earlier actually

170
00:07:07,069 --> 00:07:12,139
corresponds to auntie create fire on

171
00:07:08,960 --> 00:07:14,060
windows 7 so now we can make sense of

172
00:07:12,139 --> 00:07:16,759
the parameters we have the first one

173
00:07:14,060 --> 00:07:19,009
pointing to a file handle that will be

174
00:07:16,759 --> 00:07:21,319
the result of the system call and then

175
00:07:19,009 --> 00:07:24,740
we have something called desired access

176
00:07:21,319 --> 00:07:27,949
which is the access that the application

177
00:07:24,740 --> 00:07:30,020
wants and we have object attributes

178
00:07:27,949 --> 00:07:32,090
which is again a pointer we'll come to

179
00:07:30,020 --> 00:07:34,340
that in a bit and then we have another

180
00:07:32,090 --> 00:07:37,330
parameter that yeah it's just there for

181
00:07:34,340 --> 00:07:40,429
completeness because it's the fourth one

182
00:07:37,330 --> 00:07:43,460
now as I mentioned this there are

183
00:07:40,430 --> 00:07:45,169
pointers in there so to interpret what's

184
00:07:43,460 --> 00:07:47,359
going into the kernel we have to follow

185
00:07:45,169 --> 00:07:50,029
that pointer for example this object

186
00:07:47,360 --> 00:07:50,870
attributes thing because we want to make

187
00:07:50,029 --> 00:07:55,969
sense out of it

188
00:07:50,870 --> 00:07:57,669
so we take this number and yeah it's we

189
00:07:55,969 --> 00:08:00,830
take this pointer to the data structure

190
00:07:57,669 --> 00:08:02,659
read it from the memory dump and then

191
00:08:00,830 --> 00:08:04,550
yeah kind of have to make sense of it

192
00:08:02,659 --> 00:08:07,099
but what's this structure layout you

193
00:08:04,550 --> 00:08:08,750
have no idea again so we also need type

194
00:08:07,099 --> 00:08:10,849
information in addition to this

195
00:08:08,750 --> 00:08:14,120
signature signature of the system call

196
00:08:10,849 --> 00:08:15,919
but yeah the previous paste that we

197
00:08:14,120 --> 00:08:17,779
found doesn't have this information

198
00:08:15,919 --> 00:08:21,979
again so we're looking somewhere else

199
00:08:17,779 --> 00:08:24,139
and where do we look if anyone of you is

200
00:08:21,979 --> 00:08:26,169
familiar with the windows debugger it

201
00:08:24,139 --> 00:08:30,229
will know that the windows debugger has

202
00:08:26,169 --> 00:08:32,120
these type information but where does it

203
00:08:30,229 --> 00:08:34,789
get that from there's something called

204
00:08:32,120 --> 00:08:36,828
the symbol fires the program data phase

205
00:08:34,789 --> 00:08:39,078
files and these contain type information

206
00:08:36,828 --> 00:08:41,750
and luckily we can download them from

207
00:08:39,078 --> 00:08:44,120
the Microsoft server and again luckily

208
00:08:41,750 --> 00:08:47,510
there are pausing libraries for Python

209
00:08:44,120 --> 00:08:50,910
that can just interpret that file for us

210
00:08:47,510 --> 00:08:52,350
and give us the output we need and

211
00:08:50,910 --> 00:08:53,990
to warn you a bit there's a lot of text

212
00:08:52,350 --> 00:08:57,000
but I've highlighted some of it again

213
00:08:53,990 --> 00:08:59,100
this is what comes out of the the

214
00:08:57,000 --> 00:09:01,080
program database file if we look at this

215
00:08:59,100 --> 00:09:03,570
signature and the object attributes

216
00:09:01,080 --> 00:09:06,600
structure that's actually the one at the

217
00:09:03,570 --> 00:09:09,300
top and the one I'm particularly

218
00:09:06,600 --> 00:09:12,390
interested in today is the object name

219
00:09:09,300 --> 00:09:14,490
which is at a given offset within the

220
00:09:12,390 --> 00:09:18,660
structure and it has a certain type

221
00:09:14,490 --> 00:09:21,240
again but this type is again something

222
00:09:18,660 --> 00:09:24,089
non-trivial so we have to reinterpret

223
00:09:21,240 --> 00:09:26,730
the PDB file and find that type inside

224
00:09:24,090 --> 00:09:30,000
and that's the lower part this is

225
00:09:26,730 --> 00:09:32,250
actually the unicode string type in

226
00:09:30,000 --> 00:09:34,410
Windows that's a began a structure that

227
00:09:32,250 --> 00:09:36,660
contains the length and a pointer to the

228
00:09:34,410 --> 00:09:38,790
buffer of that string now with this

229
00:09:36,660 --> 00:09:42,020
knowledge we can actually go into the

230
00:09:38,790 --> 00:09:45,240
memory dump and see what's in there and

231
00:09:42,020 --> 00:09:47,370
this is looks like this we have the

232
00:09:45,240 --> 00:09:50,910
pointer to the object attributes which

233
00:09:47,370 --> 00:09:52,440
is this one and at the beginning we have

234
00:09:50,910 --> 00:09:54,990
the length that's not too interesting

235
00:09:52,440 --> 00:09:58,140
but then at offset 16 so the second line

236
00:09:54,990 --> 00:10:00,090
we have a net an 8 byte pointer in this

237
00:09:58,140 --> 00:10:02,370
case little-endian so we have to read it

238
00:10:00,090 --> 00:10:05,670
backwards and we end up with something

239
00:10:02,370 --> 00:10:07,890
to 2f for 10 so we go again into the

240
00:10:05,670 --> 00:10:10,579
memory dump and read that part which is

241
00:10:07,890 --> 00:10:14,250
this one there a Unicode string and

242
00:10:10,580 --> 00:10:16,920
again that and the given offset we have

243
00:10:14,250 --> 00:10:20,010
an 8 byte pointer read it backwards we

244
00:10:16,920 --> 00:10:23,069
have to d1 a 80 we go into the memory

245
00:10:20,010 --> 00:10:26,040
dump again and finally read the string

246
00:10:23,070 --> 00:10:28,740
of the object name attribute which is

247
00:10:26,040 --> 00:10:31,020
some start MoDOT but fire in the

248
00:10:28,740 --> 00:10:33,060
administrator home directory those of

249
00:10:31,020 --> 00:10:35,730
you who already met us at the booth they

250
00:10:33,060 --> 00:10:39,380
will know this string already the rest

251
00:10:35,730 --> 00:10:42,540
of us maybe you will find out later and

252
00:10:39,380 --> 00:10:45,360
now this decoding the memory is quite a

253
00:10:42,540 --> 00:10:48,120
cumbersome process we have to do it we

254
00:10:45,360 --> 00:10:50,250
have to find the memory location we have

255
00:10:48,120 --> 00:10:51,810
to decode a structure so we have to find

256
00:10:50,250 --> 00:10:54,840
out what this structure is what it looks

257
00:10:51,810 --> 00:10:56,819
like what members it has and then we

258
00:10:54,840 --> 00:10:58,140
have to follow pointers again so we do

259
00:10:56,820 --> 00:10:59,880
the whole thing over and over again

260
00:10:58,140 --> 00:11:02,460
until we find the information we

261
00:10:59,880 --> 00:11:04,410
actually want and once we've done that

262
00:11:02,460 --> 00:11:06,360
even if we write it in a script

263
00:11:04,410 --> 00:11:08,279
it's gonna be pretty tailored to the

264
00:11:06,360 --> 00:11:12,089
specific system called weave we're

265
00:11:08,279 --> 00:11:13,980
dealing with and if we have to decode

266
00:11:12,089 --> 00:11:16,699
the next system call we end up doing

267
00:11:13,980 --> 00:11:19,920
most of it again or at least modify it

268
00:11:16,699 --> 00:11:21,469
now to write a generic script we would

269
00:11:19,920 --> 00:11:25,170
actually need something machine readable

270
00:11:21,470 --> 00:11:29,639
like a lookup knowledge database and

271
00:11:25,170 --> 00:11:31,709
this is what we've built so to remind

272
00:11:29,639 --> 00:11:35,579
you what we want is to go from ones and

273
00:11:31,709 --> 00:11:37,500
zeros through one interpreter module to

274
00:11:35,579 --> 00:11:40,050
something like this nice picture that

275
00:11:37,500 --> 00:11:42,990
just shows us our information and this

276
00:11:40,050 --> 00:11:46,109
is where the main core of this talk

277
00:11:42,990 --> 00:11:49,050
comes into play which is our s internal

278
00:11:46,110 --> 00:11:51,209
scraping toolkit so we've seen all this

279
00:11:49,050 --> 00:11:53,359
information on the Internet and what we

280
00:11:51,209 --> 00:11:55,800
want is you want to take it all in and

281
00:11:53,360 --> 00:11:57,360
munch it up and then out comes the

282
00:11:55,800 --> 00:12:00,628
knowledge base that we can use in the

283
00:11:57,360 --> 00:12:02,819
script so we take these sources that

284
00:12:00,629 --> 00:12:04,949
I've talked about the Internet and the

285
00:12:02,819 --> 00:12:06,719
symbol files and also sometimes we need

286
00:12:04,949 --> 00:12:09,719
some custom knowledge to make sense of

287
00:12:06,720 --> 00:12:12,630
out of all of it we throw it into this

288
00:12:09,720 --> 00:12:15,180
this Graper and hauser for the pdb files

289
00:12:12,630 --> 00:12:17,250
and what comes out is a knowledge

290
00:12:15,180 --> 00:12:20,300
database containing the system core

291
00:12:17,250 --> 00:12:23,939
definitions numbers and also the types

292
00:12:20,300 --> 00:12:26,399
and the current sources we have for this

293
00:12:23,939 --> 00:12:28,769
are the aforementioned Beck zillion dot

294
00:12:26,399 --> 00:12:31,589
org for the system called lists of

295
00:12:28,769 --> 00:12:33,449
numbers and we have the intern in the

296
00:12:31,589 --> 00:12:36,060
internals website for the signature

297
00:12:33,449 --> 00:12:38,160
definitions and then we also have the

298
00:12:36,060 --> 00:12:40,920
symbol files from Microsoft for the type

299
00:12:38,160 --> 00:12:43,050
definitions and now I'll show you how

300
00:12:40,920 --> 00:12:45,660
this output knowledgebase looks like

301
00:12:43,050 --> 00:12:48,199
first of all we have the system call

302
00:12:45,660 --> 00:12:51,420
list which is just a normal table

303
00:12:48,199 --> 00:12:53,430
mapping the system call name to the

304
00:12:51,420 --> 00:12:55,949
respective number on the Windows version

305
00:12:53,430 --> 00:12:58,339
we're dealing with as you can see

306
00:12:55,949 --> 00:13:00,899
sometimes the number is different in

307
00:12:58,339 --> 00:13:04,259
different Windows versions so we have to

308
00:13:00,899 --> 00:13:06,839
deal with that then once we find the

309
00:13:04,259 --> 00:13:11,339
corresponding name for the number we

310
00:13:06,839 --> 00:13:13,589
have to still you have to look at the

311
00:13:11,339 --> 00:13:15,509
system called signatures which is

312
00:13:13,589 --> 00:13:17,590
represented in Jason in our case and

313
00:13:15,509 --> 00:13:21,610
that's just a list

314
00:13:17,590 --> 00:13:23,860
Maps the system call name to a list of

315
00:13:21,610 --> 00:13:26,020
parameters that it takes and every

316
00:13:23,860 --> 00:13:28,120
parameter is described by the direction

317
00:13:26,020 --> 00:13:30,880
so if it's going into the corner out of

318
00:13:28,120 --> 00:13:34,750
the corner or both it describes the type

319
00:13:30,880 --> 00:13:37,030
and also the name of it and this type

320
00:13:34,750 --> 00:13:39,790
that is in there we can actually look up

321
00:13:37,030 --> 00:13:43,060
in the type definitions that's the third

322
00:13:39,790 --> 00:13:47,319
output artifact we have which is just a

323
00:13:43,060 --> 00:13:50,619
map from object from the type name for

324
00:13:47,320 --> 00:13:52,270
example object attributes sorry that

325
00:13:50,620 --> 00:13:54,970
map's it to the length of the structure

326
00:13:52,270 --> 00:13:57,790
and then all the members that are again

327
00:13:54,970 --> 00:14:00,280
described by their name the offset and

328
00:13:57,790 --> 00:14:03,099
the type so we can go recursively

329
00:14:00,280 --> 00:14:05,770
and find in the object attributes the

330
00:14:03,100 --> 00:14:08,350
only unicode string and then find the

331
00:14:05,770 --> 00:14:11,710
unicode string in the same file and see

332
00:14:08,350 --> 00:14:14,350
what's in there now with all this we can

333
00:14:11,710 --> 00:14:16,510
do this painful manual interpretation

334
00:14:14,350 --> 00:14:19,840
I've shown you earlier just in one

335
00:14:16,510 --> 00:14:21,960
script and the script looks like this by

336
00:14:19,840 --> 00:14:24,370
the way you can download the entire

337
00:14:21,960 --> 00:14:26,770
presentation and the example together

338
00:14:24,370 --> 00:14:29,320
with jumps to play with it yourself with

339
00:14:26,770 --> 00:14:32,620
this URL it's also on the summary slide

340
00:14:29,320 --> 00:14:36,070
and yeah what you can see if you run

341
00:14:32,620 --> 00:14:40,150
that script on the register states and

342
00:14:36,070 --> 00:14:42,130
the before and after a memory dump you

343
00:14:40,150 --> 00:14:45,010
see that it is the anti create

344
00:14:42,130 --> 00:14:46,750
filesystem call it finds the parameter

345
00:14:45,010 --> 00:14:50,050
going into the kernel that's called

346
00:14:46,750 --> 00:14:52,420
desired access it's a bit mass and then

347
00:14:50,050 --> 00:14:55,180
it finds this object attributes pointer

348
00:14:52,420 --> 00:14:57,760
so it will follow that one because it's

349
00:14:55,180 --> 00:15:00,069
a pointer argument it will decode it by

350
00:14:57,760 --> 00:15:03,130
looking it up and say there's a length

351
00:15:00,070 --> 00:15:05,020
parameter root directory and then it

352
00:15:03,130 --> 00:15:07,750
finds this Unicode string which is again

353
00:15:05,020 --> 00:15:11,319
a pointer so it follows it and it prints

354
00:15:07,750 --> 00:15:13,300
this name that we've seen earlier and

355
00:15:11,320 --> 00:15:17,050
then it just goes through the rest which

356
00:15:13,300 --> 00:15:19,870
is not too interesting but it also find

357
00:15:17,050 --> 00:15:21,839
then that the system call has a result

358
00:15:19,870 --> 00:15:25,270
of 0 so we're now moving to the

359
00:15:21,840 --> 00:15:27,340
afterwards interpretation and one of the

360
00:15:25,270 --> 00:15:28,420
output parameters if you remember is the

361
00:15:27,340 --> 00:15:30,430
file handler

362
00:15:28,420 --> 00:15:33,329
which is again a pointer so it follows

363
00:15:30,430 --> 00:15:35,380
it and says the handle is hex 34 and

364
00:15:33,330 --> 00:15:41,440
then just for completeness

365
00:15:35,380 --> 00:15:45,010
it also outputs the rest yeah so this

366
00:15:41,440 --> 00:15:47,350
also looks already looks quite nice but

367
00:15:45,010 --> 00:15:49,030
there is always when there's some good

368
00:15:47,350 --> 00:15:52,210
there's also some bad and ugly involved

369
00:15:49,030 --> 00:15:55,180
so as I've mentioned before maybe you've

370
00:15:52,210 --> 00:15:57,250
heard it there are some missing entries

371
00:15:55,180 --> 00:16:00,339
because this and the internal website

372
00:15:57,250 --> 00:16:02,020
only has documentation for most of the

373
00:16:00,340 --> 00:16:03,910
system calls we're looking for for

374
00:16:02,020 --> 00:16:06,699
example I was looking the other day for

375
00:16:03,910 --> 00:16:09,040
anti open key X and this one was not

376
00:16:06,700 --> 00:16:11,170
included in the website there are also

377
00:16:09,040 --> 00:16:13,810
sometimes some inaccuracies in those

378
00:16:11,170 --> 00:16:15,849
websites for example there is a missing

379
00:16:13,810 --> 00:16:19,030
pointer indicator in this system call

380
00:16:15,850 --> 00:16:21,400
when combined input output parameter is

381
00:16:19,030 --> 00:16:24,010
marked as you long when instead it

382
00:16:21,400 --> 00:16:26,079
should be PU long as a pointer so we

383
00:16:24,010 --> 00:16:27,670
have to kind of deal with this in our

384
00:16:26,080 --> 00:16:30,340
knowledge base because it would be bad

385
00:16:27,670 --> 00:16:33,670
if you look up the wrong type and that's

386
00:16:30,340 --> 00:16:35,980
why we have some work infrastructure to

387
00:16:33,670 --> 00:16:38,680
deal with these Corrections at least

388
00:16:35,980 --> 00:16:41,200
until after we've reported it to the

389
00:16:38,680 --> 00:16:43,979
website maintainer until that is fixed

390
00:16:41,200 --> 00:16:47,020
we have to kind of deal with it local

391
00:16:43,980 --> 00:16:49,570
which brings us also to the next steps

392
00:16:47,020 --> 00:16:51,490
because of course we want to add more

393
00:16:49,570 --> 00:16:54,160
sources to this we want more coverage

394
00:16:51,490 --> 00:16:56,050
and more accuracy and one example that

395
00:16:54,160 --> 00:16:59,589
I've left out earlier where we can find

396
00:16:56,050 --> 00:17:01,900
stuff is source code of Windows related

397
00:16:59,590 --> 00:17:03,850
projects because those projects already

398
00:17:01,900 --> 00:17:06,010
have this kind of information in them

399
00:17:03,850 --> 00:17:08,380
they implement part of this interface so

400
00:17:06,010 --> 00:17:10,390
they have to know it and that's why we

401
00:17:08,380 --> 00:17:12,970
want to look at stuff like react OS wine

402
00:17:10,390 --> 00:17:15,280
or process hacker and pass their source

403
00:17:12,970 --> 00:17:18,190
code or use some part of their knowledge

404
00:17:15,280 --> 00:17:21,430
base to include it in ours or may be

405
00:17:18,190 --> 00:17:23,680
merged and at some point and one other

406
00:17:21,430 --> 00:17:26,020
thing is if we build something like a

407
00:17:23,680 --> 00:17:29,350
scraper we don't want to do that all the

408
00:17:26,020 --> 00:17:31,480
time because maybe there is no update

409
00:17:29,350 --> 00:17:33,790
maybe the updates are wrong maybe the

410
00:17:31,480 --> 00:17:35,440
updates are incomplete so we want some

411
00:17:33,790 --> 00:17:39,280
kind of versioning and update checker

412
00:17:35,440 --> 00:17:40,750
and what we also want is more operating

413
00:17:39,280 --> 00:17:42,070
systems because currently we only

414
00:17:40,750 --> 00:17:44,370
support Windows 7

415
00:17:42,070 --> 00:17:46,840
64bit because that's the one we needed

416
00:17:44,370 --> 00:17:48,840
of course it would be nice to include

417
00:17:46,840 --> 00:17:53,830
all the other operating systems as well

418
00:17:48,840 --> 00:17:56,260
and the result of all of that is we

419
00:17:53,830 --> 00:17:57,610
realized that there is no such thing as

420
00:17:56,260 --> 00:17:59,379
the complete knowledge base on the

421
00:17:57,610 --> 00:18:00,669
internet yet and part of the reason is

422
00:17:59,380 --> 00:18:02,350
that everyone just builds their own

423
00:18:00,670 --> 00:18:04,480
little stuff that they need and then

424
00:18:02,350 --> 00:18:06,189
they're happy so we decided to open

425
00:18:04,480 --> 00:18:08,200
source this part and we've already

426
00:18:06,190 --> 00:18:10,450
announced this this knowledge based

427
00:18:08,200 --> 00:18:12,880
generation is available on our public

428
00:18:10,450 --> 00:18:16,180
github account and what we're hoping for

429
00:18:12,880 --> 00:18:19,270
is to engage with the open source

430
00:18:16,180 --> 00:18:22,570
community and make this better over time

431
00:18:19,270 --> 00:18:23,830
and there's another thing we're running

432
00:18:22,570 --> 00:18:25,780
a little bit late so it might not be

433
00:18:23,830 --> 00:18:28,330
possible but thanks to all of you who

434
00:18:25,780 --> 00:18:30,760
already participated in our tiny CTF

435
00:18:28,330 --> 00:18:32,590
challenge we had a life set up there

436
00:18:30,760 --> 00:18:35,110
where you can play with this system

437
00:18:32,590 --> 00:18:39,010
called interpretation live on a running

438
00:18:35,110 --> 00:18:42,040
system now to summarize this and then

439
00:18:39,010 --> 00:18:44,860
yeah we all can go into a nice evening

440
00:18:42,040 --> 00:18:46,899
and have a beer we've seen that

441
00:18:44,860 --> 00:18:52,090
interpreting low level system cars is

442
00:18:46,900 --> 00:18:53,590
very hard and annoying work and part of

443
00:18:52,090 --> 00:18:55,120
that is that the information is

444
00:18:53,590 --> 00:18:56,709
scattered around the internet and it's

445
00:18:55,120 --> 00:18:58,840
difficult to find and it's cumbersome

446
00:18:56,710 --> 00:19:00,520
but then what we've also seen is that

447
00:18:58,840 --> 00:19:03,639
once you have the nice knowledge

448
00:19:00,520 --> 00:19:06,430
database scalability really can Rock and

449
00:19:03,640 --> 00:19:08,830
you can build something nice that can be

450
00:19:06,430 --> 00:19:11,310
applied in a generic way to every system

451
00:19:08,830 --> 00:19:13,899
how do you find and then we also

452
00:19:11,310 --> 00:19:16,000
hopefully establish that open source

453
00:19:13,900 --> 00:19:18,580
rocks because we can just all profit

454
00:19:16,000 --> 00:19:22,000
from this effort and hopefully never do

455
00:19:18,580 --> 00:19:25,360
this again so as I mentioned we have

456
00:19:22,000 --> 00:19:26,950
this on our public gitlab the

457
00:19:25,360 --> 00:19:30,070
presentation and the example can be

458
00:19:26,950 --> 00:19:32,470
downloaded here and if you need anything

459
00:19:30,070 --> 00:19:34,870
more our wanna get in touch with us

460
00:19:32,470 --> 00:19:37,360
there's our Twitter handles - clay party

461
00:19:34,870 --> 00:19:39,580
and we're Cypress tech and with that I'd

462
00:19:37,360 --> 00:19:43,560
like to thank you for the attention and

463
00:19:39,580 --> 00:19:43,560
if there are any questions fire away

464
00:19:44,430 --> 00:19:50,559
[Applause]

465
00:19:47,700 --> 00:19:51,730
so thank you Marcus twas really

466
00:19:50,559 --> 00:19:59,200
interesting

467
00:19:51,730 --> 00:20:03,820
anyone asks question okay so I do have

468
00:19:59,200 --> 00:20:07,900
questions in the canal

469
00:20:03,820 --> 00:20:10,629
isn't there an August structure that

470
00:20:07,900 --> 00:20:13,270
would allow you at least to know whether

471
00:20:10,630 --> 00:20:17,559
at least the number of parameter of the

472
00:20:13,270 --> 00:20:21,760
Cisco and some kind of type information

473
00:20:17,559 --> 00:20:23,230
involved the Cisco where exactly would

474
00:20:21,760 --> 00:20:27,240
you find us

475
00:20:23,230 --> 00:20:30,340
I think I'm not a colonel expert but I

476
00:20:27,240 --> 00:20:32,140
think I've read that there is the sea

477
00:20:30,340 --> 00:20:36,220
school table inside the channel

478
00:20:32,140 --> 00:20:38,290
structure but also an odd list table

479
00:20:36,220 --> 00:20:40,929
which is maintained in the Canon so that

480
00:20:38,290 --> 00:20:45,100
when it goes into the Cisco it knows

481
00:20:40,929 --> 00:20:47,470
what kind of argument it expects no I

482
00:20:45,100 --> 00:20:51,149
have to admit I didn't hear of that so

483
00:20:47,470 --> 00:20:51,150
it's worth looking into it I don't know

484
00:20:51,840 --> 00:21:00,250
we don't have any data on this I'm sorry

485
00:20:54,760 --> 00:21:05,160
okay yes and that was my only question

486
00:21:00,250 --> 00:21:14,100
so I think everyone wants to go home now

487
00:21:05,160 --> 00:21:14,100
maybe okay so thank you thank you

488
00:21:15,170 --> 00:21:18,749
[Applause]

