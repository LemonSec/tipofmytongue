1
00:00:03,520 --> 00:00:09,110
<font color="#E5E5E5">hello</font><font color="#CCCCCC"> gran I'm Nikki blue and</font><font color="#E5E5E5"> I'm sad</font>

2
00:00:08,119 --> 00:00:10,520
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about practical</font>

3
00:00:09,110 --> 00:00:14,870
<font color="#E5E5E5">serialization attacks</font>

4
00:00:10,520 --> 00:00:16,160
<font color="#CCCCCC">I am</font><font color="#E5E5E5"> imagine security consultant NCC</font>

5
00:00:14,870 --> 00:00:18,800
group have been out for<font color="#CCCCCC"> about five and a</font>

6
00:00:16,160 --> 00:00:21,410
half years now<font color="#CCCCCC"> an X software developer</font>

7
00:00:18,800 --> 00:00:24,220
ran<font color="#CCCCCC"> all kinds of software from desktop</font>

8
00:00:21,410 --> 00:00:28,910
applications to web web stuff<font color="#E5E5E5"> to games</font>

9
00:00:24,220 --> 00:00:30,948
<font color="#E5E5E5">ICS stuff</font><font color="#CCCCCC"> I think of myself as a as a</font>

10
00:00:28,910 --> 00:00:32,780
hacker I like to solve problems<font color="#CCCCCC"> I like</font>

11
00:00:30,949 --> 00:00:34,819
<font color="#CCCCCC">to break stuff build stuff I like</font><font color="#E5E5E5"> to</font>

12
00:00:32,780 --> 00:00:37,129
build stuff to break stuff<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> of</font>

13
00:00:34,819 --> 00:00:39,289
<font color="#E5E5E5">work and technology and</font><font color="#CCCCCC"> always kind of</font>

14
00:00:37,129 --> 00:00:43,280
stuff I'm a hacker<font color="#CCCCCC"> rock climb I might</font>

15
00:00:39,289 --> 00:00:47,469
look look it but I am and<font color="#E5E5E5"> I am next to</font>

16
00:00:43,280 --> 00:00:52,699
<font color="#CCCCCC">DB on</font><font color="#E5E5E5"> the internet so Twitter and so</font><font color="#CCCCCC"> on</font>

17
00:00:47,469 --> 00:00:54,170
so stuff<font color="#E5E5E5"> hands up if you would know what</font>

18
00:00:52,699 --> 00:00:56,989
<font color="#CCCCCC">to do with that</font><font color="#E5E5E5"> bucket if you saw a</font>

19
00:00:54,170 --> 00:01:00,999
packet during a application<font color="#CCCCCC"> assessment</font>

20
00:00:56,989 --> 00:01:06,370
would<font color="#E5E5E5"> you know what to do with it cool</font>

21
00:01:00,999 --> 00:01:09,260
so start<font color="#CCCCCC"> with</font><font color="#E5E5E5"> quick story and I went to</font>

22
00:01:06,370 --> 00:01:14,810
customer site to do<font color="#E5E5E5"> a web</font><font color="#CCCCCC"> application</font>

23
00:01:09,260 --> 00:01:17,090
assessment and and when<font color="#E5E5E5"> I rocks up on</font>

24
00:01:14,810 --> 00:01:20,660
site<font color="#CCCCCC"> they said you need this version of</font>

25
00:01:17,090 --> 00:01:22,700
Java<font color="#CCCCCC"> that that's a bit strange for a web</font>

26
00:01:20,660 --> 00:01:24,800
<font color="#E5E5E5">application</font><font color="#CCCCCC"> assessment okay</font><font color="#E5E5E5"> so I figured</font>

27
00:01:22,700 --> 00:01:27,910
it might be a Java and the client

28
00:01:24,800 --> 00:01:31,610
application that communicates<font color="#E5E5E5"> over HTTP</font>

29
00:01:27,910 --> 00:01:33,470
<font color="#E5E5E5">so I got a VM built corrupt version of</font>

30
00:01:31,610 --> 00:01:37,600
Java on there and well as<font color="#CCCCCC"> a way of</font>

31
00:01:33,470 --> 00:01:39,080
<font color="#CCCCCC">logging</font><font color="#E5E5E5"> credentials from the customer I</font>

32
00:01:37,600 --> 00:01:41,210
stopped playing around with the

33
00:01:39,080 --> 00:01:43,580
application<font color="#CCCCCC"> submit some false</font>

34
00:01:41,210 --> 00:01:45,919
credentials to<font color="#E5E5E5"> Evernote</font><font color="#CCCCCC"> what what</font>

35
00:01:43,580 --> 00:01:50,090
happened I saw a bit<font color="#CCCCCC"> of traffic flow and</font>

36
00:01:45,920 --> 00:01:51,770
fruit<font color="#CCCCCC"> verb sweet but everything then</font>

37
00:01:50,090 --> 00:01:54,350
<font color="#CCCCCC">seams were going through</font><font color="#E5E5E5"> there so so a</font>

38
00:01:51,770 --> 00:01:55,940
couple<font color="#E5E5E5"> of login attempts an application</font>

39
00:01:54,350 --> 00:01:58,759
responded and said something like<font color="#E5E5E5"> I</font>

40
00:01:55,940 --> 00:02:04,030
can't blocks out or whatever<font color="#CCCCCC"> and sign up</font>

41
00:01:58,760 --> 00:02:04,030
a bit strange so fired up by a shark<font color="#CCCCCC"> and</font>

42
00:02:06,190 --> 00:02:13,099
said some one of these logging requests

43
00:02:09,169 --> 00:02:16,440
to see what was<font color="#E5E5E5"> happening and any login</font>

44
00:02:13,099 --> 00:02:19,560
attempts that<font color="#E5E5E5"> I submitted ended up</font>

45
00:02:16,440 --> 00:02:21,510
and with a<font color="#CCCCCC"> packet</font><font color="#E5E5E5"> similar to the one I</font>

46
00:02:19,560 --> 00:02:27,660
<font color="#E5E5E5">just showed</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> and traversing the</font>

47
00:02:21,510 --> 00:02:31,649
network so it was actually a job

48
00:02:27,660 --> 00:02:33,480
<font color="#CCCCCC">applications served by HTTP page nothing</font>

49
00:02:31,650 --> 00:02:38,190
else was and<font color="#E5E5E5"> had anything to do a web</font>

50
00:02:33,480 --> 00:02:39,950
<font color="#CCCCCC">application assessment</font><font color="#E5E5E5"> so but packet I</font>

51
00:02:38,190 --> 00:02:43,079
just showed<font color="#E5E5E5"> you was a dummy</font><font color="#CCCCCC"> logging</font>

52
00:02:39,950 --> 00:02:46,250
packet so I<font color="#CCCCCC"> submitted just random</font>

53
00:02:43,080 --> 00:02:51,810
credentials and they in the application

54
00:02:46,250 --> 00:02:57,120
and<font color="#CCCCCC"> actually led to the discovery of a</font>

55
00:02:51,810 --> 00:03:03,150
vulnerability that's had survived

56
00:02:57,120 --> 00:03:07,230
multiple previous pen tests and<font color="#E5E5E5"> allowed</font>

57
00:03:03,150 --> 00:03:09,840
me to access<font color="#CCCCCC"> a server</font><font color="#E5E5E5"> that's for the</font>

58
00:03:07,230 --> 00:03:12,000
<font color="#E5E5E5">most part looked but he was raw secured</font>

59
00:03:09,840 --> 00:03:14,130
on the outside but<font color="#CCCCCC"> on the inside was</font>

60
00:03:12,000 --> 00:03:18,780
well<font color="#E5E5E5"> the server in the</font><font color="#CCCCCC"> old whole</font>

61
00:03:14,130 --> 00:03:20,990
<font color="#E5E5E5">environment was weak insecure but not</font>

62
00:03:18,780 --> 00:03:23,400
<font color="#CCCCCC">server</font><font color="#E5E5E5"> managed to jump around the entire</font>

63
00:03:20,990 --> 00:03:24,780
<font color="#E5E5E5">supporting infrastructure I think</font><font color="#CCCCCC"> I had</font>

64
00:03:23,400 --> 00:03:27,000
<font color="#CCCCCC">access to</font><font color="#E5E5E5"> certain twenty or thirty</font>

65
00:03:24,780 --> 00:03:28,470
servers<font color="#E5E5E5"> multiple</font><font color="#CCCCCC"> datacenters</font><font color="#E5E5E5"> the drop</font>

66
00:03:27,000 --> 00:03:30,840
between<font color="#E5E5E5"> their pre part of the blood</font>

67
00:03:28,470 --> 00:03:32,130
environments<font color="#E5E5E5"> at the UNIX admins running</font>

68
00:03:30,840 --> 00:03:37,020
around going crazy going<font color="#E5E5E5"> what are you</font>

69
00:03:32,130 --> 00:03:41,160
doing<font color="#CCCCCC"> I think my sides have booked</font><font color="#E5E5E5"> it up</font>

70
00:03:37,020 --> 00:03:42,420
a<font color="#E5E5E5"> bit there but and I would have missed</font>

71
00:03:41,160 --> 00:03:43,770
that vulnerability<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> I survived</font>

72
00:03:42,420 --> 00:03:46,679
multiple previous<font color="#E5E5E5"> pen test I would have</font>

73
00:03:43,770 --> 00:03:49,200
<font color="#E5E5E5">missed that</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> ability as well quite a</font>

74
00:03:46,680 --> 00:03:51,510
bit of exposure<font color="#CCCCCC"> so Java sterilization</font>

75
00:03:49,200 --> 00:03:54,359
<font color="#CCCCCC">because in some bits of research</font><font color="#E5E5E5"> over</font>

76
00:03:51,510 --> 00:03:55,859
the<font color="#E5E5E5"> last few years and so soon as I saw</font>

77
00:03:54,360 --> 00:03:57,750
that packet I<font color="#E5E5E5"> recognized</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> straight</font>

78
00:03:55,860 --> 00:04:01,440
<font color="#E5E5E5">away and I knew exactly what was going</font>

79
00:03:57,750 --> 00:04:02,820
<font color="#E5E5E5">to do and and</font><font color="#CCCCCC"> I saw putting together</font>

80
00:04:01,440 --> 00:04:07,079
some scripts and<font color="#CCCCCC"> attacking that</font>

81
00:04:02,820 --> 00:04:08,459
<font color="#E5E5E5">application and I saw about half an hour</font>

82
00:04:07,080 --> 00:04:10,860
<font color="#CCCCCC">think it took well together</font>

83
00:04:08,460 --> 00:04:12,120
I'd really the first<font color="#E5E5E5"> server from there</font>

84
00:04:10,860 --> 00:04:17,310
or could basically<font color="#E5E5E5"> jump around the whole</font>

85
00:04:12,120 --> 00:04:21,149
whole network and<font color="#CCCCCC"> I can actually read</font>

86
00:04:17,310 --> 00:04:22,800
raw serialization<font color="#E5E5E5"> by hex bytes because</font>

87
00:04:21,149 --> 00:04:25,440
of lots of that looks of it that many

88
00:04:22,800 --> 00:04:28,500
times<font color="#CCCCCC"> and manually decoding that in</font>

89
00:04:25,440 --> 00:04:30,029
<font color="#E5E5E5">debugging so obviously that packet I</font>

90
00:04:28,500 --> 00:04:33,119
showed you contains

91
00:04:30,029 --> 00:04:37,558
<font color="#CCCCCC">serialize</font><font color="#E5E5E5"> Java data and the goal is</font>

92
00:04:33,119 --> 00:04:39,659
<font color="#E5E5E5">start today is to help improve</font><font color="#CCCCCC"> your</font>

93
00:04:37,559 --> 00:04:42,209
understanding of Java<font color="#CCCCCC"> d</font><font color="#E5E5E5"> serialization</font>

94
00:04:39,659 --> 00:04:45,869
<font color="#CCCCCC">firm abilities</font><font color="#E5E5E5"> lower the bar to</font>

95
00:04:42,209 --> 00:04:48,629
attacking<font color="#CCCCCC"> these</font><font color="#E5E5E5"> vulnerabilities and so</font>

96
00:04:45,869 --> 00:04:50,939
help you to<font color="#E5E5E5"> recognize essentially the</font>

97
00:04:48,629 --> 00:04:53,159
vulnerable targets and then use existing

98
00:04:50,939 --> 00:04:59,309
tools to enumerate and attack<font color="#E5E5E5"> these</font>

99
00:04:53,159 --> 00:05:01,919
targets first<font color="#E5E5E5"> I should probably say</font>

100
00:04:59,309 --> 00:05:06,479
about<font color="#E5E5E5"> this is that practical doesn't</font>

101
00:05:01,919 --> 00:05:08,969
mean by and click generally attacks

102
00:05:06,479 --> 00:05:11,579
against<font color="#E5E5E5"> serialization more</font><font color="#CCCCCC"> evolved than</font>

103
00:05:08,969 --> 00:05:14,179
<font color="#CCCCCC">the Nova coming for</font><font color="#E5E5E5"> nobility classes and</font>

104
00:05:11,579 --> 00:05:16,679
but with<font color="#E5E5E5"> the right tools</font><font color="#CCCCCC"> and knowledge</font>

105
00:05:14,179 --> 00:05:19,529
the complexity<font color="#CCCCCC"> should be</font><font color="#E5E5E5"> similar to</font>

106
00:05:16,679 --> 00:05:23,008
manual<font color="#E5E5E5"> SQL</font><font color="#CCCCCC"> injection so you've got to</font>

107
00:05:19,529 --> 00:05:27,149
<font color="#E5E5E5">put a bit of work</font><font color="#CCCCCC"> in to to exploit the</font>

108
00:05:23,009 --> 00:05:30,029
target but<font color="#CCCCCC"> the real worlds are quite</font>

109
00:05:27,149 --> 00:05:32,219
significant<font color="#CCCCCC"> so we can often</font><font color="#E5E5E5"> get remote</font>

110
00:05:30,029 --> 00:05:43,319
command execution<font color="#E5E5E5"> using serialization</font>

111
00:05:32,219 --> 00:05:45,659
<font color="#E5E5E5">attacks so it's absolutely important</font><font color="#CCCCCC"> to</font>

112
00:05:43,319 --> 00:05:48,149
understand how serious<font color="#E5E5E5"> a</font><font color="#CCCCCC"> ssin works</font><font color="#E5E5E5"> in</font>

113
00:05:45,659 --> 00:05:51,199
<font color="#E5E5E5">order to attack it so we start</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> with</font>

114
00:05:48,149 --> 00:05:53,759
a bit of key<font color="#E5E5E5"> background information</font>

115
00:05:51,199 --> 00:05:56,129
briefly<font color="#E5E5E5"> serialization</font><font color="#CCCCCC"> is the process of</font>

116
00:05:53,759 --> 00:05:59,189
<font color="#E5E5E5">converting</font><font color="#CCCCCC"> one-time program dates are</font>

117
00:05:56,129 --> 00:06:01,759
variables objects in some program<font color="#E5E5E5"> into a</font>

118
00:05:59,189 --> 00:06:06,599
format<font color="#CCCCCC"> that can be stored or transmitted</font>

119
00:06:01,759 --> 00:06:09,449
so into a byte stream or various

120
00:06:06,599 --> 00:06:12,019
different<font color="#E5E5E5"> formats</font><font color="#CCCCCC"> and the reverse</font>

121
00:06:09,449 --> 00:06:14,579
process do sterilization converts

122
00:06:12,019 --> 00:06:18,299
<font color="#E5E5E5">records are stored on disk or a database</font>

123
00:06:14,579 --> 00:06:23,699
<font color="#E5E5E5">or network packets back into</font><font color="#CCCCCC"> in memory</font>

124
00:06:18,299 --> 00:06:25,619
<font color="#E5E5E5">variables and objects the more complex</font>

125
00:06:23,699 --> 00:06:28,169
the data structures are so if we've got

126
00:06:25,619 --> 00:06:30,569
<font color="#E5E5E5">we're using a language that</font><font color="#CCCCCC"> supports</font>

127
00:06:28,169 --> 00:06:32,339
object-oriented programming the more

128
00:06:30,569 --> 00:06:35,759
complex the serialization process needs

129
00:06:32,339 --> 00:06:39,749
to<font color="#CCCCCC"> be to</font><font color="#E5E5E5"> be able to turn arbitrary data</font>

130
00:06:35,759 --> 00:06:41,550
structures into by extremum back and the

131
00:06:39,749 --> 00:06:43,320
more complex the serialization<font color="#CCCCCC"> process</font>

132
00:06:41,550 --> 00:06:46,740
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> more scope the</font>

133
00:06:43,320 --> 00:06:51,659
for school name and<font color="#CCCCCC"> bond abilities</font>

134
00:06:46,740 --> 00:06:57,120
things to go wrong<font color="#E5E5E5"> it's no fixed</font><font color="#CCCCCC"> bar map</font>

135
00:06:51,660 --> 00:06:59,250
for serialize<font color="#E5E5E5"> data data and you</font><font color="#CCCCCC"> know you</font>

136
00:06:57,120 --> 00:07:02,190
can serialize data into simple text

137
00:06:59,250 --> 00:07:03,780
formats such as JSON and XML<font color="#E5E5E5"> binary</font>

138
00:07:02,190 --> 00:07:06,290
<font color="#E5E5E5">farmer or you can use a lot of</font>

139
00:07:03,780 --> 00:07:09,090
<font color="#CCCCCC">higher-level</font><font color="#E5E5E5"> languages have a built in</font>

140
00:07:06,290 --> 00:07:11,760
format and<font color="#CCCCCC"> built-in civilization</font>

141
00:07:09,090 --> 00:07:13,340
functionality for this start we're going

142
00:07:11,760 --> 00:07:18,990
<font color="#E5E5E5">to focus on</font>

143
00:07:13,340 --> 00:07:21,510
<font color="#E5E5E5">Java's</font><font color="#CCCCCC"> built-in serialization just keep</font>

144
00:07:18,990 --> 00:07:24,330
things simple but the<font color="#CCCCCC"> high-level</font>

145
00:07:21,510 --> 00:07:28,920
concepts same kind of ideas and do apply

146
00:07:24,330 --> 00:07:31,409
to<font color="#CCCCCC"> although</font><font color="#E5E5E5"> technologies such as PHP so</font>

147
00:07:28,920 --> 00:07:35,250
in Java<font color="#E5E5E5"> but I'd say</font><font color="#CCCCCC"> realizations dead</font>

148
00:07:31,410 --> 00:07:37,410
easy to use if you<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> if you create</font>

149
00:07:35,250 --> 00:07:40,440
class and your Java program and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want</font>

150
00:07:37,410 --> 00:07:42,150
cost to be serializable<font color="#E5E5E5"> simply implement</font>

151
00:07:40,440 --> 00:07:43,800
implement the interface<font color="#E5E5E5"> Java dot IO</font><font color="#CCCCCC"> dot</font>

152
00:07:42,150 --> 00:07:47,840
serializable<font color="#CCCCCC"> you have to do anything</font>

153
00:07:43,800 --> 00:07:50,670
more<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> then pass</font><font color="#E5E5E5"> that object to</font>

154
00:07:47,840 --> 00:07:52,830
object output stream<font color="#E5E5E5"> dot write object</font>

155
00:07:50,670 --> 00:07:54,450
and it will serialize it into a byte

156
00:07:52,830 --> 00:07:58,890
stream whether that's<font color="#CCCCCC"> going to a file</font>

157
00:07:54,450 --> 00:08:00,090
<font color="#E5E5E5">and over the network whatever and then</font>

158
00:07:58,890 --> 00:08:03,180
to get<font color="#E5E5E5"> that object back to deserialize</font>

159
00:08:00,090 --> 00:08:05,119
<font color="#E5E5E5">it you call object</font><font color="#CCCCCC"> to input streams up</font>

160
00:08:03,180 --> 00:08:07,620
read<font color="#CCCCCC"> objects and you can get those bytes</font>

161
00:08:05,120 --> 00:08:15,330
<font color="#E5E5E5">convert them back into a one-time</font>

162
00:08:07,620 --> 00:08:19,640
objects the actual data format can be

163
00:08:15,330 --> 00:08:22,500
described<font color="#E5E5E5"> as a simple stream farmer</font>

164
00:08:19,640 --> 00:08:25,919
consists are starts off with a<font color="#E5E5E5"> see</font><font color="#CCCCCC"> byte</font>

165
00:08:22,500 --> 00:08:28,380
magic number<font color="#E5E5E5"> hex a</font><font color="#CCCCCC"> CEB should be a</font><font color="#E5E5E5"> start</font>

166
00:08:25,920 --> 00:08:31,099
of<font color="#CCCCCC"> any civilization</font><font color="#E5E5E5"> stream that's</font>

167
00:08:28,380 --> 00:08:35,580
followed by a 2-bike version number<font color="#E5E5E5"> and</font>

168
00:08:31,099 --> 00:08:36,990
I've<font color="#E5E5E5"> always seen version 5 there might</font>

169
00:08:35,580 --> 00:08:39,719
be older versions and future there might

170
00:08:36,990 --> 00:08:42,799
<font color="#CCCCCC">be new versions and then following</font><font color="#E5E5E5"> that</font>

171
00:08:39,719 --> 00:08:45,080
there is at<font color="#E5E5E5"> least one content element</font>

172
00:08:42,799 --> 00:08:47,400
<font color="#E5E5E5">the first byte of a Content element</font>

173
00:08:45,080 --> 00:08:51,510
<font color="#E5E5E5">tells us the type of the content Hellman</font>

174
00:08:47,400 --> 00:08:52,920
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> from site we can infer the</font>

175
00:08:51,510 --> 00:08:55,120
<font color="#E5E5E5">structure of the data that follows in</font>

176
00:08:52,920 --> 00:08:58,360
the stream

177
00:08:55,120 --> 00:09:01,630
<font color="#CCCCCC">there can be more</font><font color="#E5E5E5"> content elements and</font>

178
00:08:58,360 --> 00:09:03,070
<font color="#E5E5E5">and you can continue reading</font><font color="#CCCCCC"> depending</font>

179
00:09:01,630 --> 00:09:06,430
<font color="#E5E5E5">on how you're reading</font><font color="#CCCCCC"> that serialize</font>

180
00:09:03,070 --> 00:09:07,480
<font color="#E5E5E5">data Java</font><font color="#CCCCCC"> Mac can might keep reading</font>

181
00:09:06,430 --> 00:09:12,930
<font color="#CCCCCC">that day until it hits the</font><font color="#E5E5E5"> end</font><font color="#CCCCCC"> of</font>

182
00:09:07,480 --> 00:09:12,930
<font color="#CCCCCC">streaming and thus the return the result</font>

183
00:09:14,040 --> 00:09:20,670
and<font color="#E5E5E5"> the various there are various types</font>

184
00:09:17,170 --> 00:09:23,410
of<font color="#E5E5E5"> content elements</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example null</font>

185
00:09:20,670 --> 00:09:24,490
which is<font color="#E5E5E5"> nothing so if you have a class</font>

186
00:09:23,410 --> 00:09:26,670
description and it's not got a

187
00:09:24,490 --> 00:09:28,750
<font color="#CCCCCC">superclass</font><font color="#E5E5E5"> then you might see an old</font>

188
00:09:26,670 --> 00:09:35,469
console element for the superclass

189
00:09:28,750 --> 00:09:37,300
object array<font color="#E5E5E5"> so on and I said the first</font>

190
00:09:35,470 --> 00:09:42,610
<font color="#E5E5E5">byte tells us the format</font><font color="#CCCCCC"> of the date</font><font color="#E5E5E5"> of</font>

191
00:09:37,300 --> 00:09:44,800
<font color="#E5E5E5">the</font><font color="#CCCCCC"> follows</font><font color="#E5E5E5"> the serialization protocol</font>

192
00:09:42,610 --> 00:09:46,300
can<font color="#CCCCCC"> be found at the specification at the</font>

193
00:09:44,800 --> 00:09:47,890
<font color="#CCCCCC">farm it can be found online on the</font>

194
00:09:46,300 --> 00:09:51,699
<font color="#E5E5E5">Oracle website but it's a bit unclear in</font>

195
00:09:47,890 --> 00:09:54,840
places so got<font color="#E5E5E5"> some</font><font color="#CCCCCC"> examples to show you</font>

196
00:09:51,700 --> 00:09:58,720
what serialize Java do you can<font color="#E5E5E5"> look like</font>

197
00:09:54,840 --> 00:10:01,900
first one is a minimal stream so we've

198
00:09:58,720 --> 00:10:04,660
got the a CED<font color="#CCCCCC"> they so the serialization</font>

199
00:10:01,900 --> 00:10:12,610
header<font color="#E5E5E5"> 0 0 0 5 which is</font><font color="#CCCCCC"> a version number</font>

200
00:10:04,660 --> 00:10:15,579
<font color="#CCCCCC">and then 7 0 which is no string AAA this</font>

201
00:10:12,610 --> 00:10:19,150
time<font color="#E5E5E5"> by 5 is 7 4 which</font><font color="#CCCCCC"> is a string</font>

202
00:10:15,580 --> 00:10:21,060
constant<font color="#E5E5E5"> element and the next two bytes</font>

203
00:10:19,150 --> 00:10:24,340
<font color="#E5E5E5">are the length of the string so</font><font color="#CCCCCC"> 4 and</font>

204
00:10:21,060 --> 00:10:29,020
then the<font color="#E5E5E5"> string bytes</font><font color="#CCCCCC"> and then set</font>

205
00:10:24,340 --> 00:10:31,480
themselves<font color="#E5E5E5"> and they've got simple</font>

206
00:10:29,020 --> 00:10:35,170
objects and the objects has no

207
00:10:31,480 --> 00:10:37,540
properties so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the data in</font><font color="#CCCCCC"> upstream</font>

208
00:10:35,170 --> 00:10:40,060
<font color="#CCCCCC">73 is an object 7-series a</font><font color="#E5E5E5"> class</font>

209
00:10:37,540 --> 00:10:42,490
description we've got the length of the

210
00:10:40,060 --> 00:10:45,310
class<font color="#E5E5E5"> name</font><font color="#CCCCCC"> the class name itself</font><font color="#E5E5E5"> serial</font>

211
00:10:42,490 --> 00:10:48,300
version UID and<font color="#CCCCCC"> there's some other</font>

212
00:10:45,310 --> 00:10:55,510
<font color="#CCCCCC">things</font><font color="#E5E5E5"> like cross description flags and</font>

213
00:10:48,300 --> 00:10:58,810
<font color="#CCCCCC">super class so in Java we deserialize</font>

214
00:10:55,510 --> 00:11:03,280
objects using the<font color="#E5E5E5"> java dot io object</font>

215
00:10:58,810 --> 00:11:07,839
input stream class<font color="#CCCCCC"> date</font><font color="#E5E5E5"> so that's passed</font>

216
00:11:03,280 --> 00:11:13,420
to this cross and<font color="#CCCCCC"> is our sequentially so</font>

217
00:11:07,840 --> 00:11:16,990
<font color="#E5E5E5">with each bite</font><font color="#CCCCCC"> one by</font><font color="#E5E5E5"> one theta is</font>

218
00:11:13,420 --> 00:11:19,270
<font color="#E5E5E5">instantiated instantly so if there is an</font>

219
00:11:16,990 --> 00:11:21,160
object<font color="#CCCCCC"> element in the stream</font><font color="#E5E5E5"> as soon as</font>

220
00:11:19,270 --> 00:11:24,819
the<font color="#E5E5E5"> as soon as Java gets to the</font><font color="#CCCCCC"> end of</font>

221
00:11:21,160 --> 00:11:27,360
<font color="#E5E5E5">that object objects data it will</font>

222
00:11:24,820 --> 00:11:32,410
instantiate<font color="#E5E5E5"> that objects in memory and</font>

223
00:11:27,360 --> 00:11:35,830
there's little to no validation<font color="#E5E5E5"> them so</font>

224
00:11:32,410 --> 00:11:41,290
validation is essentially handled by

225
00:11:35,830 --> 00:11:43,920
exceptions so<font color="#E5E5E5"> if for example we we want</font>

226
00:11:41,290 --> 00:11:47,199
<font color="#E5E5E5">to read a string objects from a stream</font>

227
00:11:43,920 --> 00:11:49,990
we can do<font color="#E5E5E5"> objects input stream reader</font>

228
00:11:47,200 --> 00:11:53,770
<font color="#CCCCCC">Jets cast that</font><font color="#E5E5E5"> to a string and then</font>

229
00:11:49,990 --> 00:11:56,560
assign that<font color="#CCCCCC"> to a string variable</font><font color="#E5E5E5"> if the</font>

230
00:11:53,770 --> 00:11:58,779
objects returned by read objects<font color="#E5E5E5"> cannot</font>

231
00:11:56,560 --> 00:12:03,279
be cast so a string<font color="#E5E5E5"> I said exception</font>

232
00:11:58,779 --> 00:12:06,550
will be thrown their cost cast cast

233
00:12:03,279 --> 00:12:09,130
<font color="#E5E5E5">exception so that's where validation</font>

234
00:12:06,550 --> 00:12:11,469
happens but<font color="#CCCCCC"> at this</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> read object</font>

235
00:12:09,130 --> 00:12:13,000
read objects is already read the bytes

236
00:12:11,470 --> 00:12:16,089
from the stream instantiated<font color="#CCCCCC"> that</font>

237
00:12:13,000 --> 00:12:17,560
objects in<font color="#CCCCCC"> memory and then that's the</font>

238
00:12:16,089 --> 00:12:25,810
point<font color="#E5E5E5"> where generally our payload has</font>

239
00:12:17,560 --> 00:12:27,880
already executed if we make a class

240
00:12:25,810 --> 00:12:31,150
serializable by implement in the

241
00:12:27,880 --> 00:12:34,089
serializable interface<font color="#E5E5E5"> we can provide a</font>

242
00:12:31,150 --> 00:12:38,520
read object method and that<font color="#E5E5E5"> can be used</font>

243
00:12:34,089 --> 00:12:43,120
in place of<font color="#CCCCCC"> Java's default read objects</font>

244
00:12:38,520 --> 00:12:45,880
or it can be used alongside it so you

245
00:12:43,120 --> 00:12:48,550
can for example<font color="#E5E5E5"> use your</font><font color="#CCCCCC"> own read object</font>

246
00:12:45,880 --> 00:12:50,050
method to implement backwards

247
00:12:48,550 --> 00:12:51,819
compatibility<font color="#E5E5E5"> with different versions of</font>

248
00:12:50,050 --> 00:12:57,420
the same data for<font color="#CCCCCC"> different versions</font>

249
00:12:51,820 --> 00:12:59,800
<font color="#E5E5E5">your application but we can use that</font>

250
00:12:57,420 --> 00:13:02,410
<font color="#E5E5E5">essentially to handle the the</font><font color="#CCCCCC"> object</font>

251
00:12:59,800 --> 00:13:04,990
loaded<font color="#CCCCCC"> event</font><font color="#E5E5E5"> so given class implements</font>

252
00:13:02,410 --> 00:13:08,020
<font color="#E5E5E5">serializable we have a read object</font>

253
00:13:04,990 --> 00:13:09,760
method and we can<font color="#E5E5E5"> handle the event that</font>

254
00:13:08,020 --> 00:13:15,510
an<font color="#CCCCCC"> object</font><font color="#E5E5E5"> of that type is loaded into</font>

255
00:13:09,760 --> 00:13:18,880
memory<font color="#E5E5E5"> an example use of that might</font><font color="#CCCCCC"> be</font>

256
00:13:15,510 --> 00:13:21,710
<font color="#E5E5E5">cross that manages database connectivity</font>

257
00:13:18,880 --> 00:13:24,020
<font color="#E5E5E5">and interaction with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> database</font>

258
00:13:21,710 --> 00:13:25,970
we could serialize it<font color="#E5E5E5"> to save the day</font>

259
00:13:24,020 --> 00:13:28,250
<font color="#CCCCCC">best connection settings and then</font>

260
00:13:25,970 --> 00:13:30,290
deserialize it and at<font color="#E5E5E5"> that time we might</font>

261
00:13:28,250 --> 00:13:34,000
use read objects to establish<font color="#CCCCCC"> a</font>

262
00:13:30,290 --> 00:13:34,000
<font color="#E5E5E5">connection to the database automatically</font>

263
00:13:34,990 --> 00:13:41,510
so<font color="#CCCCCC"> gonna bail is this serialization</font>

264
00:13:38,779 --> 00:13:43,370
<font color="#E5E5E5">vulnerabilities</font><font color="#CCCCCC"> occur when we as an</font>

265
00:13:41,510 --> 00:13:48,920
attacker<font color="#E5E5E5"> control the date has being</font>

266
00:13:43,370 --> 00:13:50,839
deserialized that allows us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> control</font>

267
00:13:48,920 --> 00:13:54,620
<font color="#CCCCCC">the</font><font color="#E5E5E5"> properties</font><font color="#CCCCCC"> of the objects being</font>

268
00:13:50,839 --> 00:13:56,390
deserialized or even the type of the

269
00:13:54,620 --> 00:14:00,529
objects being deserialized<font color="#CCCCCC"> or</font>

270
00:13:56,390 --> 00:14:03,850
instantiated but<font color="#E5E5E5"> controlling that date</font>

271
00:14:00,529 --> 00:14:06,170
sir we control<font color="#CCCCCC"> we can potentially</font>

272
00:14:03,850 --> 00:14:08,510
control the flow of code that<font color="#CCCCCC"> uses</font><font color="#E5E5E5"> that</font>

273
00:14:06,170 --> 00:14:11,689
<font color="#E5E5E5">data so if there's an if statement</font><font color="#CCCCCC"> that</font>

274
00:14:08,510 --> 00:14:12,860
<font color="#E5E5E5">is based on</font><font color="#CCCCCC"> the based on the</font><font color="#E5E5E5"> property of</font>

275
00:14:11,690 --> 00:14:14,600
an object that's deserialized

276
00:14:12,860 --> 00:14:21,080
we can control the outcome<font color="#E5E5E5"> of that if</font>

277
00:14:14,600 --> 00:14:26,740
<font color="#CCCCCC">statement which branch it takes so we</font>

278
00:14:21,080 --> 00:14:28,700
can control code that's is within the

279
00:14:26,740 --> 00:14:30,770
serializable that read object method

280
00:14:28,700 --> 00:14:33,860
that we implement<font color="#CCCCCC"> on</font><font color="#E5E5E5"> a class and we can</font>

281
00:14:30,770 --> 00:14:35,600
control<font color="#E5E5E5"> code potentially the interrupts</font>

282
00:14:33,860 --> 00:14:37,670
will be loaded<font color="#E5E5E5"> object so if a program</font>

283
00:14:35,600 --> 00:14:40,700
calls objects inputstreamreader

284
00:14:37,670 --> 00:14:42,229
yet uses that return value in some way

285
00:14:40,700 --> 00:14:53,420
<font color="#E5E5E5">we can potentially control that code</font>

286
00:14:42,230 --> 00:14:57,290
there so exploitation of<font color="#CCCCCC"> detail ization</font>

287
00:14:53,420 --> 00:15:00,709
<font color="#CCCCCC">biroba is known as how expire by</font>

288
00:14:57,290 --> 00:15:02,779
controlling properties of objects<font color="#CCCCCC"> and</font>

289
00:15:00,709 --> 00:15:04,849
using<font color="#E5E5E5"> that</font><font color="#CCCCCC"> to manipulate</font><font color="#E5E5E5"> the flow of</font>

290
00:15:02,779 --> 00:15:13,490
<font color="#E5E5E5">execution of code is called property</font>

291
00:15:04,850 --> 00:15:16,910
oriented programming<font color="#E5E5E5"> a payload consists</font>

292
00:15:13,490 --> 00:15:18,529
of objects properties<font color="#E5E5E5"> of objects</font><font color="#CCCCCC"> that's</font>

293
00:15:16,910 --> 00:15:20,899
control adjusting code and that's

294
00:15:18,529 --> 00:15:23,920
something<font color="#E5E5E5"> that seems to</font><font color="#CCCCCC"> tripoli block</font>

295
00:15:20,899 --> 00:15:28,100
with<font color="#E5E5E5"> the sterilization</font><font color="#CCCCCC"> vulnerability</font><font color="#E5E5E5"> is</font>

296
00:15:23,920 --> 00:15:30,680
we're not<font color="#CCCCCC"> providing cold to</font><font color="#E5E5E5"> the target</font>

297
00:15:28,100 --> 00:15:34,420
to execute we're providing<font color="#E5E5E5"> properties</font>

298
00:15:30,680 --> 00:15:34,420
<font color="#E5E5E5">that manipulate the code already exists</font>

299
00:15:36,870 --> 00:15:41,320
so the code that<font color="#E5E5E5"> we control is known as</font>

300
00:15:39,970 --> 00:15:44,800
a pop gadget<font color="#CCCCCC"> a property oriented</font>

301
00:15:41,320 --> 00:15:46,269
programming gadget<font color="#E5E5E5"> and it's just a</font>

302
00:15:44,800 --> 00:15:47,589
snippet<font color="#E5E5E5"> of code that we can control</font>

303
00:15:46,269 --> 00:15:50,050
through<font color="#CCCCCC"> the properties of an object</font><font color="#E5E5E5"> and</font>

304
00:15:47,589 --> 00:15:53,290
you<font color="#CCCCCC"> can think of it like a high-level</font>

305
00:15:50,050 --> 00:15:55,560
<font color="#CCCCCC">rock gadget but instead of</font><font color="#E5E5E5"> just pushing</font>

306
00:15:53,290 --> 00:15:58,660
a value to a stuck<font color="#E5E5E5"> we might have a</font>

307
00:15:55,560 --> 00:15:59,349
budget<font color="#E5E5E5"> that rights they are we control</font>

308
00:15:58,660 --> 00:16:01,959
to a file

309
00:15:59,350 --> 00:16:04,990
we might not control<font color="#E5E5E5"> a file name so</font>

310
00:16:01,959 --> 00:16:08,290
generally<font color="#E5E5E5"> say we brought gadgets we</font>

311
00:16:04,990 --> 00:16:09,399
<font color="#CCCCCC">multiple to create a football</font><font color="#E5E5E5"> x-play so</font>

312
00:16:08,290 --> 00:16:12,660
we might need another<font color="#CCCCCC"> gadget</font><font color="#E5E5E5"> it's going</font>

313
00:16:09,399 --> 00:16:12,660
to rename a file<font color="#CCCCCC"> or</font><font color="#E5E5E5"> move a file</font>

314
00:16:14,370 --> 00:16:17,980
<font color="#CCCCCC">exploitation relies on knowledge</font><font color="#E5E5E5"> of the</font>

315
00:16:16,360 --> 00:16:19,449
source<font color="#E5E5E5"> code if we don't know what source</font>

316
00:16:17,980 --> 00:16:28,209
codes there we<font color="#E5E5E5"> don't know how we</font>

317
00:16:19,449 --> 00:16:30,219
communicate it how do<font color="#E5E5E5"> we attack</font>

318
00:16:28,209 --> 00:16:39,369
serialization<font color="#E5E5E5"> vulnerabilities without</font>

319
00:16:30,220 --> 00:16:43,029
source code<font color="#E5E5E5"> there's a tool</font><font color="#CCCCCC"> why so serial</font>

320
00:16:39,370 --> 00:16:44,350
have you know much anything<font color="#E5E5E5"> about</font><font color="#CCCCCC"> Java D</font>

321
00:16:43,029 --> 00:16:47,040
serialization<font color="#CCCCCC"> fun abilities and</font>

322
00:16:44,350 --> 00:16:49,720
<font color="#CCCCCC">attacking them then</font><font color="#E5E5E5"> you're a pair of it</font>

323
00:16:47,040 --> 00:16:55,149
so there are<font color="#E5E5E5"> lots of libraries that are</font>

324
00:16:49,720 --> 00:16:56,380
<font color="#E5E5E5">out there</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> develop in a big</font>

325
00:16:55,149 --> 00:16:58,990
<font color="#CCCCCC">application you don't</font><font color="#E5E5E5"> want to be</font>

326
00:16:56,380 --> 00:17:00,670
reinventing the wheel so use existing

327
00:16:58,990 --> 00:17:04,329
<font color="#E5E5E5">libraries that do whatever you need to</font>

328
00:17:00,670 --> 00:17:06,069
do<font color="#E5E5E5"> and but those libraries are obviously</font>

329
00:17:04,329 --> 00:17:10,839
obviously<font color="#E5E5E5"> containing code and we know</font>

330
00:17:06,069 --> 00:17:15,099
what code is so why<font color="#CCCCCC"> saw serial</font><font color="#E5E5E5"> has a lot</font>

331
00:17:10,839 --> 00:17:19,208
of pop gadget chains<font color="#E5E5E5"> that work for</font>

332
00:17:15,099 --> 00:17:21,428
common libraries nice amazing<font color="#E5E5E5"> so for</font>

333
00:17:19,209 --> 00:17:26,650
<font color="#CCCCCC">attacking</font><font color="#E5E5E5"> serialization vulnerabilities</font>

334
00:17:21,429 --> 00:17:29,770
<font color="#CCCCCC">and most of the payloads not all of them</font>

335
00:17:26,650 --> 00:17:32,470
but<font color="#E5E5E5"> most of them lead to blind command</font>

336
00:17:29,770 --> 00:17:39,040
execution<font color="#CCCCCC"> we're going to focus on those</font>

337
00:17:32,470 --> 00:17:40,600
<font color="#E5E5E5">payloads for this talk</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> background</font>

338
00:17:39,040 --> 00:17:43,590
<font color="#CCCCCC">information covered off</font><font color="#E5E5E5"> let's have a</font>

339
00:17:40,600 --> 00:17:47,100
look at how we attack serialization

340
00:17:43,590 --> 00:17:50,010
<font color="#E5E5E5">first thing we need</font><font color="#CCCCCC"> three</font>

341
00:17:47,100 --> 00:17:53,310
things<font color="#E5E5E5"> two main things but we're gonna</font>

342
00:17:50,010 --> 00:17:55,230
talk<font color="#CCCCCC"> about three to attack serialization</font>

343
00:17:53,310 --> 00:17:57,629
<font color="#E5E5E5">first thing we need is an entry point we</font>

344
00:17:55,230 --> 00:17:58,680
need<font color="#E5E5E5"> to know where we can provide data</font>

345
00:17:57,630 --> 00:18:00,120
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the application so that the</font>

346
00:17:58,680 --> 00:18:04,530
application would be<font color="#CCCCCC"> sterilize</font><font color="#E5E5E5"> it and</font>

347
00:18:00,120 --> 00:18:07,379
<font color="#CCCCCC">rescue a payload we need pop gadgets pop</font>

348
00:18:04,530 --> 00:18:09,330
gadget chains that the application is

349
00:18:07,380 --> 00:18:13,950
aware<font color="#CCCCCC"> of so that</font><font color="#E5E5E5"> we can manipulate those</font>

350
00:18:09,330 --> 00:18:15,570
to do something advantageous<font color="#E5E5E5"> and because</font>

351
00:18:13,950 --> 00:18:17,370
we're<font color="#E5E5E5"> looking at blind command execution</font>

352
00:18:15,570 --> 00:18:20,360
we need appropriate<font color="#E5E5E5"> commands it's much</font>

353
00:18:17,370 --> 00:18:20,360
<font color="#CCCCCC">skew</font><font color="#E5E5E5"> on the target</font>

354
00:18:21,230 --> 00:18:26,000
so the<font color="#CCCCCC"> enterprise</font><font color="#E5E5E5"> could be any part of</font>

355
00:18:23,430 --> 00:18:28,770
the application that<font color="#CCCCCC"> deserialize is data</font>

356
00:18:26,000 --> 00:18:30,390
if we have access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> source code then we</font>

357
00:18:28,770 --> 00:18:32,340
<font color="#E5E5E5">can look</font><font color="#CCCCCC"> for things</font><font color="#E5E5E5"> like objects</font><font color="#CCCCCC"> inputs</font>

358
00:18:30,390 --> 00:18:34,080
<font color="#CCCCCC">dreamed up</font><font color="#E5E5E5"> read objects go up first</font>

359
00:18:32,340 --> 00:18:36,480
serializable classes in the read objects

360
00:18:34,080 --> 00:18:40,710
methods and look at what code is<font color="#E5E5E5"> in</font>

361
00:18:36,480 --> 00:18:42,300
those methods are around that code<font color="#E5E5E5"> if</font>

362
00:18:40,710 --> 00:18:45,390
we're<font color="#E5E5E5"> looking at the application from a</font>

363
00:18:42,300 --> 00:18:50,100
blackbox perspective then we can look

364
00:18:45,390 --> 00:18:53,280
<font color="#E5E5E5">for</font><font color="#CCCCCC"> the serialization</font><font color="#E5E5E5"> header</font><font color="#CCCCCC"> sort of ice</font>

365
00:18:50,100 --> 00:19:01,139
a CED zero zero zero<font color="#E5E5E5"> five followed by a</font>

366
00:18:53,280 --> 00:19:04,230
bytes in the<font color="#CCCCCC"> range hex 7 0</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 17 so here</font>

367
00:19:01,140 --> 00:19:08,300
we've<font color="#E5E5E5"> got an example of some data</font><font color="#CCCCCC"> that's</font>

368
00:19:04,230 --> 00:19:10,950
<font color="#E5E5E5">obviously binary data in burp suite</font>

369
00:19:08,300 --> 00:19:18,560
<font color="#E5E5E5">switch</font><font color="#CCCCCC"> over to the hex view and we can</font>

370
00:19:10,950 --> 00:19:26,820
<font color="#E5E5E5">see</font><font color="#CCCCCC"> a c</font><font color="#E5E5E5"> e</font><font color="#CCCCCC"> d 0 0 0</font><font color="#E5E5E5"> 5 7</font><font color="#CCCCCC"> 3 again Wireshark</font>

371
00:19:18,560 --> 00:19:29,250
<font color="#CCCCCC">TCP</font><font color="#E5E5E5"> packet AC e d0 0 0 5 7</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> sex mate</font>

372
00:19:26,820 --> 00:19:31,800
protocols and formats so just<font color="#CCCCCC"> say HTTP</font>

373
00:19:29,250 --> 00:19:34,500
and XML could also<font color="#CCCCCC"> rupp serialized data</font>

374
00:19:31,800 --> 00:19:37,649
and but they're more likely to basically

375
00:19:34,500 --> 00:19:41,400
throwing<font color="#CCCCCC"> Kove the data because it's</font>

376
00:19:37,650 --> 00:19:45,240
binary<font color="#CCCCCC"> it's a binary farmer and but</font><font color="#E5E5E5"> that</font>

377
00:19:41,400 --> 00:19:46,770
also generates<font color="#E5E5E5"> a recognizable pattern so</font>

378
00:19:45,240 --> 00:19:51,240
we're looking at basics<font color="#E5E5E5"> prone coded data</font>

379
00:19:46,770 --> 00:19:55,790
we see low case<font color="#CCCCCC"> are ok</font><font color="#E5E5E5"> so 0</font><font color="#CCCCCC"> up case</font><font color="#E5E5E5"> a B</font>

380
00:19:51,240 --> 00:19:55,790
X<font color="#E5E5E5"> and that's the serialization header</font>

381
00:19:57,450 --> 00:20:02,259
so there<font color="#E5E5E5"> are other hints and indicators</font>

382
00:20:00,909 --> 00:20:05,590
<font color="#CCCCCC">that we can use so identify</font><font color="#E5E5E5"> Java</font>

383
00:20:02,259 --> 00:20:07,929
serialization<font color="#E5E5E5"> if we look at suspected</font>

384
00:20:05,590 --> 00:20:10,360
<font color="#CCCCCC">serialize data in a text our ask</font><font color="#E5E5E5"> you</font>

385
00:20:07,929 --> 00:20:12,070
view then there are various strings<font color="#E5E5E5"> that</font>

386
00:20:10,360 --> 00:20:15,309
should stand<font color="#CCCCCC"> out the first and</font><font color="#E5E5E5"> most</font>

387
00:20:12,070 --> 00:20:19,168
obvious<font color="#CCCCCC"> Java cross names Java dot</font><font color="#E5E5E5"> line</font>

388
00:20:15,309 --> 00:20:21,850
<font color="#E5E5E5">got objects</font><font color="#CCCCCC"> come top feeder</font><font color="#E5E5E5"> and so on</font>

389
00:20:19,169 --> 00:20:24,460
<font color="#CCCCCC">they might</font><font color="#E5E5E5"> also be in an alternative</font>

390
00:20:21,850 --> 00:20:30,189
form and<font color="#E5E5E5"> that's just that's the</font>

391
00:20:24,460 --> 00:20:31,840
serialization protocol and the

392
00:20:30,190 --> 00:20:34,899
specification where they where they<font color="#CCCCCC"> use</font>

393
00:20:31,840 --> 00:20:37,658
sometimes need this<font color="#E5E5E5"> format and begins</font>

394
00:20:34,899 --> 00:20:41,709
when capital L<font color="#E5E5E5"> and ends with a semicolon</font>

395
00:20:37,659 --> 00:20:44,769
<font color="#E5E5E5">and instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that's between the</font>

396
00:20:41,710 --> 00:20:48,279
namespace parts and the class name we've

397
00:20:44,769 --> 00:20:52,149
got four slashes and we've also got<font color="#E5E5E5"> the</font>

398
00:20:48,279 --> 00:20:53,830
strings s<font color="#E5E5E5"> are exp they appear</font><font color="#CCCCCC"> just again</font>

399
00:20:52,149 --> 00:20:59,258
as a<font color="#E5E5E5"> side effects of the serialization</font>

400
00:20:53,830 --> 00:21:02,110
<font color="#CCCCCC">format</font><font color="#E5E5E5"> so s are commonly appears like</font>

401
00:20:59,259 --> 00:21:04,059
that that means<font color="#E5E5E5"> we've got essentially an</font>

402
00:21:02,110 --> 00:21:06,668
object<font color="#E5E5E5"> content element followed by a</font>

403
00:21:04,059 --> 00:21:08,710
class description content element so

404
00:21:06,669 --> 00:21:14,500
you'll see you'll see<font color="#E5E5E5"> this by</font><font color="#CCCCCC"> its seven</font>

405
00:21:08,710 --> 00:21:17,200
three seven two which is<font color="#CCCCCC"> sr</font><font color="#E5E5E5"> XP similar</font>

406
00:21:14,500 --> 00:21:21,070
so a class description can have

407
00:21:17,200 --> 00:21:24,220
annotations<font color="#E5E5E5"> and they must end with a and</font>

408
00:21:21,070 --> 00:21:28,090
<font color="#CCCCCC">block data content element which is</font><font color="#E5E5E5"> the</font>

409
00:21:24,220 --> 00:21:31,230
X and then<font color="#E5E5E5"> if the class has no super</font>

410
00:21:28,090 --> 00:21:37,269
class<font color="#CCCCCC"> we'll have a null</font>

411
00:21:31,230 --> 00:21:41,610
content element<font color="#E5E5E5"> that selasa</font><font color="#CCCCCC"> P so we go</font>

412
00:21:37,269 --> 00:21:45,700
<font color="#CCCCCC">back</font><font color="#E5E5E5"> to that login packet we can see</font>

413
00:21:41,610 --> 00:21:48,758
those indicators so we've got string s

414
00:21:45,700 --> 00:21:53,289
<font color="#E5E5E5">our Java dot Lancashire</font><font color="#CCCCCC"> Java</font><font color="#E5E5E5"> doc</font><font color="#CCCCCC"> blank</font>

415
00:21:48,759 --> 00:21:56,860
<font color="#E5E5E5">number and we've got</font><font color="#CCCCCC"> X P well</font><font color="#E5E5E5"> there's</font>

416
00:21:53,289 --> 00:21:59,669
<font color="#E5E5E5">one thing</font><font color="#CCCCCC"> missing</font><font color="#E5E5E5"> in this packet we</font>

417
00:21:56,860 --> 00:22:02,080
don't have this serialization<font color="#E5E5E5"> header and</font>

418
00:21:59,669 --> 00:22:05,409
so that first<font color="#E5E5E5"> the first part of the</font>

419
00:22:02,080 --> 00:22:07,960
packet<font color="#E5E5E5"> there seven nine that's a reset</font>

420
00:22:05,409 --> 00:22:10,890
<font color="#E5E5E5">content element so in a serialization</font>

421
00:22:07,960 --> 00:22:15,660
stream<font color="#E5E5E5"> certain concert elements how</font>

422
00:22:10,890 --> 00:22:19,080
<font color="#CCCCCC">I resigned</font><font color="#E5E5E5"> to handle so we I was</font>

423
00:22:15,660 --> 00:22:22,380
<font color="#E5E5E5">stringing for example in a consonant in</font>

424
00:22:19,080 --> 00:22:24,480
a<font color="#E5E5E5"> civilization stream that string might</font>

425
00:22:22,380 --> 00:22:26,130
be repeated throughout<font color="#E5E5E5"> the stream and</font>

426
00:22:24,480 --> 00:22:29,700
<font color="#E5E5E5">other parts of the stream for whatever</font>

427
00:22:26,130 --> 00:22:32,460
reason there's no reason<font color="#CCCCCC"> on it and it's</font>

428
00:22:29,700 --> 00:22:34,320
easier to<font color="#E5E5E5"> assign that string a handle</font>

429
00:22:32,460 --> 00:22:37,020
<font color="#E5E5E5">and then later on if you need to seize</font><font color="#CCCCCC"> a</font>

430
00:22:34,320 --> 00:22:41,580
string<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a reference to that that</font>

431
00:22:37,020 --> 00:22:44,160
original<font color="#E5E5E5"> instance and so the first</font>

432
00:22:41,580 --> 00:22:46,970
handle that gets assigned to<font color="#E5E5E5"> an element</font>

433
00:22:44,160 --> 00:22:50,460
that has<font color="#CCCCCC"> a handle as a specific value</font>

434
00:22:46,970 --> 00:22:53,340
<font color="#CCCCCC">70000 zero and then each each one has</font>

435
00:22:50,460 --> 00:22:56,160
that incremented by one the reset

436
00:22:53,340 --> 00:22:59,939
element resets that<font color="#E5E5E5"> counselor that</font>

437
00:22:56,160 --> 00:23:02,100
handle value back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the default</font><font color="#CCCCCC"> it's</font>

438
00:22:59,940 --> 00:23:05,010
<font color="#CCCCCC">just basically it's like saying start a</font>

439
00:23:02,100 --> 00:23:07,169
new stream here that's<font color="#E5E5E5"> followed by 73</font>

440
00:23:05,010 --> 00:23:10,170
which is an object<font color="#CCCCCC"> 7c which is a class</font>

441
00:23:07,170 --> 00:23:12,120
description but<font color="#E5E5E5"> the important point is</font>

442
00:23:10,170 --> 00:23:17,040
you might<font color="#E5E5E5"> not see the serialization</font>

443
00:23:12,120 --> 00:23:19,939
<font color="#E5E5E5">header and the story that started off</font>

444
00:23:17,040 --> 00:23:23,600
with<font color="#E5E5E5"> but client out an IDs in place</font>

445
00:23:19,940 --> 00:23:26,490
which<font color="#E5E5E5"> looked for serialization attacks</font>

446
00:23:23,600 --> 00:23:28,469
<font color="#E5E5E5">missed everything that I did because</font><font color="#CCCCCC"> it</font>

447
00:23:26,490 --> 00:23:29,580
was<font color="#E5E5E5"> looking</font><font color="#CCCCCC"> for this in the same packet</font>

448
00:23:28,470 --> 00:23:37,020
as it was<font color="#CCCCCC"> looking for the payload</font>

449
00:23:29,580 --> 00:23:38,429
objects so we've identified<font color="#E5E5E5"> an</font>

450
00:23:37,020 --> 00:23:44,340
application<font color="#E5E5E5"> that's using serialization</font>

451
00:23:38,430 --> 00:23:46,590
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> it's the next</font><font color="#E5E5E5"> thing that we</font><font color="#CCCCCC"> need</font>

452
00:23:44,340 --> 00:23:50,429
<font color="#CCCCCC">to do is work</font><font color="#E5E5E5"> up where we can</font><font color="#CCCCCC"> inject our</font>

453
00:23:46,590 --> 00:23:54,320
payload into that stream so a simple

454
00:23:50,430 --> 00:23:58,650
case is we have the serialization<font color="#E5E5E5"> header</font>

455
00:23:54,320 --> 00:24:07,530
followed by a byte in their range<font color="#CCCCCC"> X</font><font color="#E5E5E5"> 7 0</font>

456
00:23:58,650 --> 00:24:11,640
<font color="#CCCCCC">0</font><font color="#E5E5E5"> 7 6 or X 7</font><font color="#CCCCCC"> bisa 7e and those by those</font>

457
00:24:07,530 --> 00:24:14,280
<font color="#CCCCCC">C ranges are the content types that Java</font>

458
00:24:11,640 --> 00:24:16,350
can when you call object<font color="#CCCCCC"> input stream</font>

459
00:24:14,280 --> 00:24:21,480
that read objects<font color="#E5E5E5"> so there are things</font>

460
00:24:16,350 --> 00:24:24,330
like<font color="#CCCCCC"> no can</font><font color="#E5E5E5"> be returned reference and a</font>

461
00:24:21,480 --> 00:24:27,029
string<font color="#E5E5E5"> an object a class description</font>

462
00:24:24,330 --> 00:24:28,769
things fall in those those ranges<font color="#E5E5E5"> and if</font>

463
00:24:27,029 --> 00:24:31,320
you call object<font color="#E5E5E5"> input stream</font><font color="#CCCCCC"> not read</font>

464
00:24:28,769 --> 00:24:33,350
<font color="#CCCCCC">objects and any of those exists in the</font>

465
00:24:31,320 --> 00:24:37,470
stream<font color="#CCCCCC"> at that</font><font color="#E5E5E5"> point the current offset</font>

466
00:24:33,350 --> 00:24:39,959
<font color="#E5E5E5">they'll be read as</font><font color="#CCCCCC"> on objects what that</font>

467
00:24:37,470 --> 00:24:41,250
means is we<font color="#CCCCCC"> can inject</font><font color="#E5E5E5"> an arbitrary</font>

468
00:24:39,960 --> 00:24:43,679
objects in so stream in that location

469
00:24:41,250 --> 00:24:45,840
<font color="#E5E5E5">and that will be read as an object so we</font>

470
00:24:43,679 --> 00:24:53,779
can<font color="#E5E5E5"> infer kind of reverse</font><font color="#CCCCCC"> ooh further</font>

471
00:24:45,840 --> 00:24:56,149
that offset will be read as an<font color="#CCCCCC"> object so</font>

472
00:24:53,779 --> 00:24:59,070
comment also<font color="#CCCCCC"> save it start the stream</font>

473
00:24:56,149 --> 00:25:03,239
instead of one<font color="#E5E5E5"> of the backs listed there</font>

474
00:24:59,070 --> 00:25:08,610
we might have a<font color="#E5E5E5"> what data or what</font><font color="#CCCCCC"> gates</font>

475
00:25:03,240 --> 00:25:12,029
<font color="#CCCCCC">a long element so we'll have the</font>

476
00:25:08,610 --> 00:25:15,629
serialization header followed by one<font color="#E5E5E5"> of</font>

477
00:25:12,029 --> 00:25:17,070
the two<font color="#CCCCCC"> either</font><font color="#E5E5E5"> hex 77 and then a single</font>

478
00:25:15,630 --> 00:25:19,769
<font color="#E5E5E5">byte</font><font color="#CCCCCC"> that represents the</font><font color="#E5E5E5"> length of the</font>

479
00:25:17,070 --> 00:25:21,049
block<font color="#CCCCCC"> data and then that many bytes of</font>

480
00:25:19,769 --> 00:25:24,360
data

481
00:25:21,049 --> 00:25:26,700
similarly<font color="#CCCCCC"> 7</font><font color="#E5E5E5"> a for blood</font><font color="#CCCCCC"> day along which</font>

482
00:25:24,360 --> 00:25:30,719
has a<font color="#CCCCCC"> 4 byte length field followed by</font>

483
00:25:26,700 --> 00:25:33,409
that many bytes of data if that is then

484
00:25:30,720 --> 00:25:36,899
followed by<font color="#E5E5E5"> byte and one of these ranges</font>

485
00:25:33,409 --> 00:25:39,990
<font color="#E5E5E5">but is that we can inject</font><font color="#CCCCCC"> payloader that</font>

486
00:25:36,899 --> 00:25:42,139
at the offset of that a byte so here we

487
00:25:39,990 --> 00:25:44,279
<font color="#E5E5E5">can see an example with a block data</font>

488
00:25:42,139 --> 00:25:48,600
element and<font color="#E5E5E5"> start so we've got seven</font>

489
00:25:44,279 --> 00:25:51,210
seven zero eight<font color="#E5E5E5"> we've got the bytes 1 1</font>

490
00:25:48,600 --> 00:25:53,580
<font color="#E5E5E5">2 2 so on and then that's followed by 7</font>

491
00:25:51,210 --> 00:25:57,750
<font color="#E5E5E5">3 which is an</font><font color="#CCCCCC"> object so we can inject</font><font color="#E5E5E5"> a</font>

492
00:25:53,580 --> 00:25:59,840
payload at that offset but<font color="#E5E5E5"> what about</font>

493
00:25:57,750 --> 00:26:04,799
more<font color="#E5E5E5"> complex cases</font>

494
00:25:59,840 --> 00:26:09,059
<font color="#E5E5E5">we're basically this is why I said I've</font>

495
00:26:04,799 --> 00:26:10,710
read I can read<font color="#CCCCCC"> sex-role serialized data</font>

496
00:26:09,059 --> 00:26:13,580
because I've spent<font color="#E5E5E5"> loads of time I've</font>

497
00:26:10,710 --> 00:26:16,769
answered decode things and debug things

498
00:26:13,580 --> 00:26:20,820
<font color="#E5E5E5">I've done it that many</font><font color="#CCCCCC"> times I wrote a</font>

499
00:26:16,769 --> 00:26:22,559
tool that will do it<font color="#CCCCCC"> for me now and so</font>

500
00:26:20,820 --> 00:26:24,120
what we<font color="#E5E5E5"> can do with serialization</font>

501
00:26:22,559 --> 00:26:27,750
<font color="#E5E5E5">dumping</font><font color="#CCCCCC"> I'm releasing</font><font color="#E5E5E5"> this I've got the</font>

502
00:26:24,120 --> 00:26:32,309
link<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end of</font><font color="#E5E5E5"> the slides</font><font color="#CCCCCC"> released</font>

503
00:26:27,750 --> 00:26:34,740
it sorry<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> we can pass the raw hex</font>

504
00:26:32,309 --> 00:26:37,918
bikes of a serialization stream to

505
00:26:34,740 --> 00:26:38,160
serialization don't put a doctor I don't

506
00:26:37,919 --> 00:26:40,620
<font color="#E5E5E5">what</font>

507
00:26:38,160 --> 00:26:43,410
<font color="#CCCCCC">in accordance</font><font color="#E5E5E5"> with the civilization</font>

508
00:26:40,620 --> 00:26:45,449
civilization<font color="#CCCCCC"> Parma specification doesn't</font>

509
00:26:43,410 --> 00:26:46,830
pass<font color="#E5E5E5"> everything at the minute it passes</font>

510
00:26:45,450 --> 00:26:50,760
<font color="#E5E5E5">everything I've needed to pass that</font>

511
00:26:46,830 --> 00:26:53,070
<font color="#CCCCCC">let's say decode and which should do for</font>

512
00:26:50,760 --> 00:26:56,490
<font color="#E5E5E5">most cases and but you can see there</font>

513
00:26:53,070 --> 00:26:59,040
it's<font color="#CCCCCC"> dumps out we've got</font><font color="#E5E5E5"> a TC string</font>

514
00:26:56,490 --> 00:27:00,930
<font color="#E5E5E5">element</font><font color="#CCCCCC"> TC know</font><font color="#E5E5E5"> TC reference all of</font>

515
00:26:59,040 --> 00:27:03,060
those<font color="#CCCCCC"> ups offsets</font><font color="#E5E5E5"> in the stream can be</font>

516
00:27:00,930 --> 00:27:06,900
replaced<font color="#E5E5E5"> with an arbitrary object</font><font color="#CCCCCC"> I</font>

517
00:27:03,060 --> 00:27:09,120
payload<font color="#E5E5E5"> and provided the application</font>

518
00:27:06,900 --> 00:27:12,900
that reads<font color="#E5E5E5"> the state sir calls read</font>

519
00:27:09,120 --> 00:27:18,320
objects to read those then we can<font color="#CCCCCC"> ask</font>

520
00:27:12,900 --> 00:27:21,870
<font color="#CCCCCC">you a payload</font><font color="#E5E5E5"> one thing to note there is</font>

521
00:27:18,320 --> 00:27:24,379
you can<font color="#E5E5E5"> take the hex values that</font><font color="#CCCCCC"> were</font>

522
00:27:21,870 --> 00:27:27,179
<font color="#CCCCCC">dumped out by</font><font color="#E5E5E5"> serialization dumper</font>

523
00:27:24,380 --> 00:27:31,070
<font color="#E5E5E5">I'm rebuilt the stream from them except</font>

524
00:27:27,180 --> 00:27:33,450
you<font color="#E5E5E5"> need to ignore the new handle lines</font>

525
00:27:31,070 --> 00:27:34,889
because that's the handle value that was

526
00:27:33,450 --> 00:27:38,010
assigned<font color="#E5E5E5"> to that string so</font><font color="#CCCCCC"> we can see</font>

527
00:27:34,890 --> 00:27:41,340
<font color="#E5E5E5">their string with handle value</font><font color="#CCCCCC"> 7000 0 0</font>

528
00:27:38,010 --> 00:27:46,020
and then a reference<font color="#CCCCCC"> that references</font>

529
00:27:41,340 --> 00:27:50,370
that string sets<font color="#CCCCCC"> of</font><font color="#E5E5E5"> put Fe 0 0 that</font>

530
00:27:46,020 --> 00:27:52,740
<font color="#CCCCCC">should be 7e at the bottom and so what</font>

531
00:27:50,370 --> 00:27:54,810
we<font color="#E5E5E5"> can do with that is we can bus up</font><font color="#CCCCCC"> I</font>

532
00:27:52,740 --> 00:27:57,600
<font color="#E5E5E5">talk of serious data we've seen passed</font>

533
00:27:54,810 --> 00:28:01,200
around by some application<font color="#CCCCCC"> decode it</font>

534
00:27:57,600 --> 00:28:08,219
<font color="#E5E5E5">work out if there is a</font><font color="#CCCCCC"> content element</font>

535
00:28:01,200 --> 00:28:09,600
of so things like TC string where the

536
00:28:08,220 --> 00:28:11,820
<font color="#CCCCCC">byte that tells us the type</font><font color="#E5E5E5"> of the</font>

537
00:28:09,600 --> 00:28:15,679
concept I want is<font color="#CCCCCC"> in the range</font><font color="#E5E5E5"> seven</font>

538
00:28:11,820 --> 00:28:18,120
<font color="#E5E5E5">zero two seven six or seven beats</font><font color="#CCCCCC"> 70 and</font>

539
00:28:15,680 --> 00:28:20,430
we can replace<font color="#E5E5E5"> that element in the</font>

540
00:28:18,120 --> 00:28:22,469
stream send<font color="#E5E5E5"> that at the target and it</font>

541
00:28:20,430 --> 00:28:27,360
should attempt to deserialize it as an

542
00:28:22,470 --> 00:28:30,150
<font color="#CCCCCC">object so</font><font color="#E5E5E5"> record entry point we were to</font>

543
00:28:27,360 --> 00:28:36,360
<font color="#E5E5E5">identify entry points we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find</font>

544
00:28:30,150 --> 00:28:39,110
some pop gadgets that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can use to find</font>

545
00:28:36,360 --> 00:28:41,280
gadgets<font color="#CCCCCC"> like said before we</font><font color="#E5E5E5"> need to know</font>

546
00:28:39,110 --> 00:28:45,090
really access<font color="#E5E5E5"> to source code we can</font>

547
00:28:41,280 --> 00:28:48,149
<font color="#E5E5E5">review read object methods code around</font>

548
00:28:45,090 --> 00:28:50,669
read objects work out what<font color="#E5E5E5"> that code</font>

549
00:28:48,150 --> 00:28:51,840
does with with the day<font color="#CCCCCC"> and it's read</font>

550
00:28:50,670 --> 00:28:55,110
from the stream

551
00:28:51,840 --> 00:28:57,000
but it's not<font color="#E5E5E5"> very practical</font><font color="#CCCCCC"> doing that</font>

552
00:28:55,110 --> 00:29:03,209
and we don't<font color="#E5E5E5"> might not obvious always</font>

553
00:28:57,000 --> 00:29:05,490
have the<font color="#CCCCCC"> sauce cold so and yeah we're</font>

554
00:29:03,210 --> 00:29:10,110
going to we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use essentially</font>

555
00:29:05,490 --> 00:29:14,010
and I saw cereal<font color="#CCCCCC"> look</font><font color="#E5E5E5"> that's how I get</font>

556
00:29:10,110 --> 00:29:15,240
common libraries and so the<font color="#E5E5E5"> first thing</font>

557
00:29:14,010 --> 00:29:16,740
that<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is work out what</font>

558
00:29:15,240 --> 00:29:18,330
libraries are there what libraries can

559
00:29:16,740 --> 00:29:21,840
we can we attack because they're alive

560
00:29:18,330 --> 00:29:23,939
why so I saw sales payloads for maybe 15

561
00:29:21,840 --> 00:29:28,949
or<font color="#E5E5E5"> 20 libraries or 15</font><font color="#CCCCCC"> or 20 different</font>

562
00:29:23,940 --> 00:29:31,410
payloads and when<font color="#CCCCCC"> it's work out which</font>

563
00:29:28,950 --> 00:29:34,350
<font color="#E5E5E5">libraries are the application uses so</font>

564
00:29:31,410 --> 00:29:36,540
<font color="#CCCCCC">ideally</font><font color="#E5E5E5"> we've got</font><font color="#CCCCCC"> we'll use background</font>

565
00:29:34,350 --> 00:29:39,030
<font color="#E5E5E5">knowledge or an information disclosure</font>

566
00:29:36,540 --> 00:29:44,610
issue to identify libraries that<font color="#E5E5E5"> we can</font>

567
00:29:39,030 --> 00:29:45,990
use and then if that fails we<font color="#CCCCCC"> can catch</font>

568
00:29:44,610 --> 00:29:51,209
and<font color="#CCCCCC"> sync it</font><font color="#E5E5E5"> we can throw everything but</font>

569
00:29:45,990 --> 00:29:52,530
the kitchen sink<font color="#E5E5E5"> okay so we know what</font>

570
00:29:51,210 --> 00:29:54,900
libraries<font color="#E5E5E5"> are available to the tag</font>

571
00:29:52,530 --> 00:29:58,080
<font color="#CCCCCC">application we know what gadget chains</font>

572
00:29:54,900 --> 00:30:01,920
we can use so this<font color="#E5E5E5"> is a partial mapping</font>

573
00:29:58,080 --> 00:30:04,919
of Java file names of libraries<font color="#CCCCCC"> to Y</font>

574
00:30:01,920 --> 00:30:08,100
source<font color="#E5E5E5"> aerial pop gadget chains so comes</font>

575
00:30:04,920 --> 00:30:09,990
collections - for old jar we can<font color="#E5E5E5"> tap</font>

576
00:30:08,100 --> 00:30:14,580
that<font color="#E5E5E5"> with the white sauce aerial payload</font>

577
00:30:09,990 --> 00:30:17,130
comes questions for and so on um there

578
00:30:14,580 --> 00:30:19,110
are some overlaps<font color="#E5E5E5"> in white sauce serial</font>

579
00:30:17,130 --> 00:30:22,710
payloads<font color="#E5E5E5"> so for example is a</font><font color="#CCCCCC"> commons</font>

580
00:30:19,110 --> 00:30:24,149
bean utils payload<font color="#CCCCCC"> that relies on</font><font color="#E5E5E5"> and</font>

581
00:30:22,710 --> 00:30:26,790
outdated<font color="#E5E5E5"> come into collections</font><font color="#CCCCCC"> library</font>

582
00:30:24,150 --> 00:30:29,970
in<font color="#E5E5E5"> order to attack that in order to</font>

583
00:30:26,790 --> 00:30:32,790
<font color="#E5E5E5">exploit that by</font><font color="#CCCCCC"> generator to get command</font>

584
00:30:29,970 --> 00:30:35,130
execution<font color="#E5E5E5"> so we might as well just</font><font color="#CCCCCC"> use</font>

585
00:30:32,790 --> 00:30:43,770
the comments collections payload in that

586
00:30:35,130 --> 00:30:46,470
case so kitchen<font color="#E5E5E5"> sink in this is step at</font>

587
00:30:43,770 --> 00:30:48,900
a Python that<font color="#E5E5E5"> I've used a few</font><font color="#CCCCCC"> times in</font>

588
00:30:46,470 --> 00:30:50,700
attacking<font color="#E5E5E5"> these these kind of</font>

589
00:30:48,900 --> 00:30:53,220
vulnerabilities essentially<font color="#E5E5E5"> just got a</font>

590
00:30:50,700 --> 00:30:58,740
list of<font color="#CCCCCC"> Y</font><font color="#E5E5E5"> source aerial command</font>

591
00:30:53,220 --> 00:31:01,200
execution and gadget chains<font color="#E5E5E5"> we call</font><font color="#CCCCCC"> Y</font>

592
00:30:58,740 --> 00:31:03,870
source aerial we have a given command

593
00:31:01,200 --> 00:31:05,610
payload command generate the bikes<font color="#E5E5E5"> and</font>

594
00:31:03,870 --> 00:31:09,540
then we pass<font color="#E5E5E5"> those on so function</font>

595
00:31:05,610 --> 00:31:11,580
fire payload which is implement it in

596
00:31:09,540 --> 00:31:17,670
whatever way<font color="#E5E5E5"> needed needed to deliver</font>

597
00:31:11,580 --> 00:31:20,310
that payload so target first<font color="#E5E5E5"> and that</font>

598
00:31:17,670 --> 00:31:23,730
should say<font color="#E5E5E5"> about that is that kitchen</font>

599
00:31:20,310 --> 00:31:26,310
sink<font color="#CCCCCC"> approach is since the risky there's</font>

600
00:31:23,730 --> 00:31:28,950
always a risk<font color="#E5E5E5"> of triggering an unhandled</font>

601
00:31:26,310 --> 00:31:31,770
exception<font color="#CCCCCC"> and Saiga application which my</font>

602
00:31:28,950 --> 00:31:34,320
crush the target in practice it's

603
00:31:31,770 --> 00:31:37,260
unlikely<font color="#CCCCCC"> that we're going to do that</font>

604
00:31:34,320 --> 00:31:42,120
because even<font color="#CCCCCC"> an nmap version scam would</font>

605
00:31:37,260 --> 00:31:44,879
crush the target and all this malformed

606
00:31:42,120 --> 00:31:50,340
<font color="#CCCCCC">data and I've never</font><font color="#E5E5E5"> come</font><font color="#CCCCCC"> across anything</font>

607
00:31:44,880 --> 00:31:52,350
that<font color="#CCCCCC"> one</font><font color="#E5E5E5"> stable but if we scan a box and</font>

608
00:31:50,340 --> 00:31:53,909
we not not<font color="#E5E5E5"> service over you probably</font>

609
00:31:52,350 --> 00:31:57,870
gonna knock<font color="#E5E5E5"> it</font><font color="#CCCCCC"> over again if you try</font>

610
00:31:53,910 --> 00:32:00,150
this<font color="#E5E5E5"> kind of attack against it it goes</font>

611
00:31:57,870 --> 00:32:02,729
well saying that<font color="#CCCCCC"> throwing all possible</font>

612
00:32:00,150 --> 00:32:05,160
<font color="#CCCCCC">payload types at target is noisy</font><font color="#E5E5E5"> it's</font>

613
00:32:02,730 --> 00:32:07,140
going to<font color="#CCCCCC"> lead to more log entries being</font>

614
00:32:05,160 --> 00:32:09,240
generated obviously a lot more network

615
00:32:07,140 --> 00:32:12,960
traffic<font color="#E5E5E5"> then then</font><font color="#CCCCCC"> just tuck in a</font>

616
00:32:09,240 --> 00:32:15,450
specific<font color="#E5E5E5"> library and then the other</font>

617
00:32:12,960 --> 00:32:18,150
issue<font color="#E5E5E5"> is that these command execution</font>

618
00:32:15,450 --> 00:32:20,070
payloads<font color="#E5E5E5"> are blind</font><font color="#CCCCCC"> we don't get any</font>

619
00:32:18,150 --> 00:32:22,340
command<font color="#CCCCCC"> output back when we execute one</font>

620
00:32:20,070 --> 00:32:25,679
<font color="#E5E5E5">of these payloads so how do we know that</font>

621
00:32:22,340 --> 00:32:27,290
<font color="#E5E5E5">those pop gadgets and chains a available</font>

622
00:32:25,680 --> 00:32:30,540
<font color="#CCCCCC">say application which ones are available</font>

623
00:32:27,290 --> 00:32:34,470
<font color="#E5E5E5">we run all possible payloads I the</font>

624
00:32:30,540 --> 00:32:35,879
application the target how do we know

625
00:32:34,470 --> 00:32:40,740
that<font color="#E5E5E5"> the actual command</font><font color="#CCCCCC"> we're trying to</font>

626
00:32:35,880 --> 00:32:43,170
execute<font color="#E5E5E5"> is available so ideally we need</font>

627
00:32:40,740 --> 00:32:45,870
some<font color="#CCCCCC"> feedback from the target so one</font>

628
00:32:43,170 --> 00:32:48,270
option<font color="#E5E5E5"> and common</font><font color="#CCCCCC"> option option is to</font>

629
00:32:45,870 --> 00:32:50,310
try and<font color="#E5E5E5"> ping our own machine</font><font color="#CCCCCC"> mono</font>

630
00:32:48,270 --> 00:32:53,030
network traffic<font color="#E5E5E5"> to verify whether a</font>

631
00:32:50,310 --> 00:32:55,649
payload that<font color="#E5E5E5"> the payload command</font><font color="#CCCCCC"> S cubed</font>

632
00:32:53,030 --> 00:32:59,700
remember<font color="#E5E5E5"> to limit the ping count if you</font>

633
00:32:55,650 --> 00:33:01,140
do that at<font color="#E5E5E5"> the server</font><font color="#CCCCCC"> pinion and pinion</font>

634
00:32:59,700 --> 00:33:02,550
and pinion and because I spoke at my

635
00:33:01,140 --> 00:33:03,930
scripts at the first time<font color="#CCCCCC"> well the data</font>

636
00:33:02,550 --> 00:33:07,680
<font color="#E5E5E5">again and</font><font color="#CCCCCC"> the server was going nuts</font>

637
00:33:03,930 --> 00:33:08,820
pinging me and then<font color="#E5E5E5"> it was</font><font color="#CCCCCC"> Sallisaw</font>

638
00:33:07,680 --> 00:33:11,660
processes it<font color="#E5E5E5"> were just constantly</font>

639
00:33:08,820 --> 00:33:11,659
<font color="#E5E5E5">pinging my box</font>

640
00:33:14,450 --> 00:33:22,220
so a better<font color="#CCCCCC"> option is actually send an</font>

641
00:33:19,279 --> 00:33:26,590
invalid command<font color="#E5E5E5"> with all possible</font><font color="#CCCCCC"> gutter</font>

642
00:33:22,220 --> 00:33:29,389
chains<font color="#CCCCCC"> if the application responds with</font>

643
00:33:26,590 --> 00:33:31,488
exceptions which<font color="#E5E5E5"> I've found</font><font color="#CCCCCC"> that to be</font>

644
00:33:29,389 --> 00:33:34,488
<font color="#E5E5E5">the case I</font><font color="#CCCCCC"> think every time</font><font color="#E5E5E5"> I've come</font>

645
00:33:31,489 --> 00:33:38,859
<font color="#E5E5E5">across this kind</font><font color="#CCCCCC"> of stuff we</font><font color="#E5E5E5"> can tell</font>

646
00:33:34,489 --> 00:33:40,940
whether the payload works<font color="#CCCCCC"> so we get</font>

647
00:33:38,859 --> 00:33:42,408
<font color="#CCCCCC">Javadoc</font><font color="#E5E5E5"> Languedoc</font><font color="#CCCCCC"> run time through an</font>

648
00:33:40,940 --> 00:33:46,730
exception<font color="#E5E5E5"> in Java the IOLTA i/o</font>

649
00:33:42,409 --> 00:33:48,049
exception cannot run program the tag

650
00:33:46,730 --> 00:33:50,269
<font color="#E5E5E5">application is attempted to run</font><font color="#CCCCCC"> that</font>

651
00:33:48,049 --> 00:33:53,379
<font color="#E5E5E5">program</font><font color="#CCCCCC"> it doesn't exist</font><font color="#E5E5E5"> on the target</font>

652
00:33:50,269 --> 00:33:55,909
system<font color="#E5E5E5"> it's thrown exception</font>

653
00:33:53,379 --> 00:33:57,699
<font color="#E5E5E5">alternatively we find if we get a</font><font color="#CCCCCC"> class</font>

654
00:33:55,909 --> 00:34:00,230
not found exception coming back

655
00:33:57,700 --> 00:34:03,470
generally telling us that's one of the

656
00:34:00,230 --> 00:34:05,749
classes used by<font color="#E5E5E5"> our gadget chain doesn't</font>

657
00:34:03,470 --> 00:34:07,609
exist<font color="#E5E5E5"> on the server side it's not</font>

658
00:34:05,749 --> 00:34:08,750
<font color="#E5E5E5">present</font><font color="#CCCCCC"> for it's not available to the</font>

659
00:34:07,609 --> 00:34:11,690
application it's not on the cross<font color="#E5E5E5"> puff</font>

660
00:34:08,750 --> 00:34:13,489
and so that entire gadget chain we<font color="#CCCCCC"> can</font>

661
00:34:11,690 --> 00:34:16,569
disregard<font color="#E5E5E5"> it it's probably</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> not going</font>

662
00:34:13,489 --> 00:34:20,058
<font color="#E5E5E5">to be not gonna get us anywhere</font>

663
00:34:16,569 --> 00:34:24,429
<font color="#E5E5E5">so that we've</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> entry point we've got</font>

664
00:34:20,059 --> 00:34:28,099
pop gadgets<font color="#CCCCCC"> we need some fellow commands</font>

665
00:34:24,429 --> 00:34:31,220
<font color="#E5E5E5">execute ideally we want to get from</font>

666
00:34:28,099 --> 00:34:33,049
blind<font color="#CCCCCC"> RCE</font><font color="#E5E5E5"> to a shell so we can interrupt</font>

667
00:34:31,219 --> 00:34:34,459
with<font color="#CCCCCC"> a machine and and</font><font color="#E5E5E5"> gain</font><font color="#CCCCCC"> favour</font>

668
00:34:33,049 --> 00:34:38,119
access to the<font color="#E5E5E5"> to the server our</font>

669
00:34:34,460 --> 00:34:40,609
environment so first thing that we might

670
00:34:38,119 --> 00:34:44,960
do is enumerate commands<font color="#E5E5E5"> that are</font>

671
00:34:40,609 --> 00:34:48,440
<font color="#CCCCCC">available and again we can use</font><font color="#E5E5E5"> same</font>

672
00:34:44,960 --> 00:34:50,839
technique<font color="#CCCCCC"> kind of run program if we try</font>

673
00:34:48,440 --> 00:34:53,179
to execute<font color="#CCCCCC"> whatever we get and</font><font color="#E5E5E5"> we get</font>

674
00:34:50,839 --> 00:34:58,520
<font color="#E5E5E5">that back then we've not got W get as a</font>

675
00:34:53,179 --> 00:35:01,160
as a central command<font color="#CCCCCC"> there are some</font>

676
00:34:58,520 --> 00:35:05,000
limitations with the<font color="#CCCCCC"> whites or</font><font color="#E5E5E5"> serial</font>

677
00:35:01,160 --> 00:35:06,379
<font color="#CCCCCC">RCE gadgets because they use java dot</font>

678
00:35:05,000 --> 00:35:12,920
<font color="#CCCCCC">Languedoc runtime that exec with a</font>

679
00:35:06,380 --> 00:35:15,460
single string parameter<font color="#E5E5E5"> so we can't have</font>

680
00:35:12,920 --> 00:35:23,319
white space in command promises

681
00:35:15,460 --> 00:35:26,780
so the<font color="#E5E5E5"> /a c users is fine this we've got</font>

682
00:35:23,319 --> 00:35:28,040
<font color="#CCCCCC">c colon slash</font><font color="#E5E5E5"> documents and settings in</font>

683
00:35:26,780 --> 00:35:29,150
double quotes

684
00:35:28,040 --> 00:35:31,040
but the way that<font color="#CCCCCC"> Javadoc Languedoc</font>

685
00:35:29,150 --> 00:35:35,510
runtime splits that<font color="#E5E5E5"> command string up</font>

686
00:35:31,040 --> 00:35:38,450
means those<font color="#E5E5E5"> the</font><font color="#CCCCCC"> separate parts and</font><font color="#E5E5E5"> look</font>

687
00:35:35,510 --> 00:35:43,520
being separate parameters so more

688
00:35:38,450 --> 00:35:45,379
actually work there's also no shell

689
00:35:43,520 --> 00:35:46,670
operator support<font color="#E5E5E5"> so we can't pipe output</font>

690
00:35:45,380 --> 00:35:48,620
<font color="#CCCCCC">from one</font><font color="#E5E5E5"> command to</font><font color="#CCCCCC"> another</font>

691
00:35:46,670 --> 00:35:55,690
we can't<font color="#E5E5E5"> redirect outputs or fail or</font>

692
00:35:48,620 --> 00:35:58,190
from a<font color="#CCCCCC"> fail so some</font><font color="#E5E5E5"> common commands</font>

693
00:35:55,690 --> 00:36:00,260
expect some people most people<font color="#CCCCCC"> should</font><font color="#E5E5E5"> be</font>

694
00:35:58,190 --> 00:36:04,130
aware<font color="#CCCCCC"> of these kind of commands it might</font>

695
00:36:00,260 --> 00:36:07,130
use in a unix linux environment<font color="#CCCCCC"> knockout</font>

696
00:36:04,130 --> 00:36:09,890
showers that are you getting a payload

697
00:36:07,130 --> 00:36:11,270
from somewhere and executing<font color="#CCCCCC"> that and</font>

698
00:36:09,890 --> 00:36:14,330
it's also worth<font color="#E5E5E5"> testing for the presence</font>

699
00:36:11,270 --> 00:36:17,300
of<font color="#CCCCCC"> interpreters</font><font color="#E5E5E5"> perl python they're</font>

700
00:36:14,330 --> 00:36:19,460
going to<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> W</font><font color="#E5E5E5"> get a script from</font>

701
00:36:17,300 --> 00:36:22,580
somewhere<font color="#CCCCCC"> than those those interpreters</font>

702
00:36:19,460 --> 00:36:26,600
might be useful<font color="#CCCCCC"> windows we might do a</font>

703
00:36:22,580 --> 00:36:30,110
<font color="#E5E5E5">copy command</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> File share</font><font color="#E5E5E5"> its a</font>

704
00:36:26,600 --> 00:36:34,040
copy<font color="#E5E5E5"> a shell and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> might also be</font><font color="#CCCCCC"> able</font>

705
00:36:30,110 --> 00:36:37,280
<font color="#CCCCCC">to</font><font color="#E5E5E5"> use that</font><font color="#CCCCCC"> so capture hashes but even</font>

706
00:36:34,040 --> 00:36:42,140
better<font color="#E5E5E5"> than</font><font color="#CCCCCC"> that and there's a command</font>

707
00:36:37,280 --> 00:36:45,380
encoder<font color="#CCCCCC"> online that's will basically</font>

708
00:36:42,140 --> 00:36:49,700
take arbitrary<font color="#E5E5E5"> bash commands PowerShell</font>

709
00:36:45,380 --> 00:36:55,310
- perl<font color="#E5E5E5"> and encode it such</font><font color="#CCCCCC"> that it</font>

710
00:36:49,700 --> 00:36:56,779
doesn't<font color="#CCCCCC"> use um shell operators and the</font>

711
00:36:55,310 --> 00:36:59,360
parameters to the command don't contain

712
00:36:56,780 --> 00:37:02,000
spaces so we<font color="#E5E5E5"> can use whatever we want</font>

713
00:36:59,360 --> 00:37:05,630
basically<font color="#CCCCCC"> so</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> a basis for encoding</font>

714
00:37:02,000 --> 00:37:07,700
<font color="#E5E5E5">for example that can be really powerful</font>

715
00:37:05,630 --> 00:37:10,970
in attacking<font color="#E5E5E5"> these with more complex</font>

716
00:37:07,700 --> 00:37:12,879
commands so that's<font color="#E5E5E5"> everything that we</font>

717
00:37:10,970 --> 00:37:15,560
need<font color="#E5E5E5"> to execute a serialization attack</font>

718
00:37:12,880 --> 00:37:20,560
we<font color="#E5E5E5"> will look at some examples</font><font color="#CCCCCC"> now so</font>

719
00:37:15,560 --> 00:37:23,450
first one<font color="#E5E5E5"> Spring Framework and</font>

720
00:37:20,560 --> 00:37:28,400
specifically spring frameworks<font color="#CCCCCC"> AC</font><font color="#E5E5E5"> to be</font>

721
00:37:23,450 --> 00:37:31,100
remoting this technology allows us<font color="#CCCCCC"> to</font>

722
00:37:28,400 --> 00:37:33,440
<font color="#CCCCCC">access exposed</font><font color="#E5E5E5"> arbitrary Java crosses</font>

723
00:37:31,100 --> 00:37:35,720
over hayseeds<font color="#E5E5E5"> piece of our</font><font color="#CCCCCC"> barbeque Java</font>

724
00:37:33,440 --> 00:37:40,000
objects<font color="#E5E5E5"> and it just does magic</font><font color="#CCCCCC"> in the</font>

725
00:37:35,720 --> 00:37:40,000
background so I

726
00:37:41,620 --> 00:37:46,460
you can<font color="#E5E5E5"> basically just just call a</font>

727
00:37:44,360 --> 00:37:48,920
method on it<font color="#E5E5E5"> on an object and it will</font>

728
00:37:46,460 --> 00:37:50,540
spring<font color="#E5E5E5"> we'll do some some work in the</font>

729
00:37:48,920 --> 00:37:55,820
<font color="#CCCCCC">background to send</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> the network</font>

730
00:37:50,540 --> 00:37:59,990
of HTTP<font color="#CCCCCC"> its facilitate facilitated by a</font>

731
00:37:55,820 --> 00:38:03,140
remote invocation class which which<font color="#CCCCCC"> is</font>

732
00:37:59,990 --> 00:38:07,399
part of the<font color="#CCCCCC"> Spring Framework it's like</font>

733
00:38:03,140 --> 00:38:09,259
say when<font color="#CCCCCC"> a client application</font><font color="#E5E5E5"> makes it</font>

734
00:38:07,400 --> 00:38:11,660
calls a<font color="#CCCCCC"> method on an object's that uses</font>

735
00:38:09,260 --> 00:38:13,160
spring<font color="#CCCCCC"> cases to be remoting and by</font>

736
00:38:11,660 --> 00:38:15,080
client application we haven't seen

737
00:38:13,160 --> 00:38:17,390
Spring Framework will generate<font color="#E5E5E5"> a</font><font color="#CCCCCC"> pasty</font>

738
00:38:15,080 --> 00:38:20,600
to post<font color="#CCCCCC"> request send that sort of server</font>

739
00:38:17,390 --> 00:38:23,259
<font color="#CCCCCC">decode</font><font color="#E5E5E5"> that request</font><font color="#CCCCCC"> made the rule method</font>

740
00:38:20,600 --> 00:38:28,460
coil<font color="#E5E5E5"> and then send</font><font color="#CCCCCC"> back a response</font>

741
00:38:23,260 --> 00:38:32,150
<font color="#E5E5E5">that's where it looks like Java</font>

742
00:38:28,460 --> 00:38:33,830
serialization so<font color="#E5E5E5"> Spring Framework say</font>

743
00:38:32,150 --> 00:38:35,810
realizes this<font color="#E5E5E5"> remote invocation object</font>

744
00:38:33,830 --> 00:38:37,190
<font color="#E5E5E5">puts in the body of</font><font color="#CCCCCC"> a hayseed</font><font color="#E5E5E5"> post</font>

745
00:38:35,810 --> 00:38:41,020
request sends it to the server

746
00:38:37,190 --> 00:38:46,700
and that's an entry<font color="#CCCCCC"> point for attack</font>

747
00:38:41,020 --> 00:38:49,690
so this scripts and well<font color="#E5E5E5"> will will</font>

748
00:38:46,700 --> 00:38:51,770
attack<font color="#CCCCCC"> that using a kitchen sink method</font>

749
00:38:49,690 --> 00:38:54,530
<font color="#CCCCCC">cherry it's all my source aerial</font>

750
00:38:51,770 --> 00:38:56,990
payloads<font color="#CCCCCC"> puts the whole payload into the</font>

751
00:38:54,530 --> 00:38:58,100
body of a<font color="#CCCCCC"> HTTP POST request</font><font color="#E5E5E5"> and then</font>

752
00:38:56,990 --> 00:39:01,580
looks further<font color="#CCCCCC"> costs not</font><font color="#E5E5E5"> found exception</font>

753
00:38:58,100 --> 00:39:02,839
<font color="#CCCCCC">and it</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> whether</font><font color="#CCCCCC"> that pop got to</font>

754
00:39:01,580 --> 00:39:12,140
chain<font color="#CCCCCC"> appears to be vulnerable or not</font>

755
00:39:02,840 --> 00:39:13,820
<font color="#CCCCCC">this be present Hana so if we run that</font>

756
00:39:12,140 --> 00:39:16,549
script<font color="#CCCCCC"> again</font><font color="#E5E5E5"> an application using spring</font>

757
00:39:13,820 --> 00:39:20,000
<font color="#CCCCCC">Haiti's few remote in its runnable then</font>

758
00:39:16,550 --> 00:39:23,180
we'll get<font color="#E5E5E5"> our</font><font color="#CCCCCC"> CA what they shouldn't</font>

759
00:39:20,000 --> 00:39:25,880
happen applications that deserialize

760
00:39:23,180 --> 00:39:28,390
data should<font color="#E5E5E5"> validate the type of the day</font>

761
00:39:25,880 --> 00:39:29,810
being<font color="#E5E5E5"> deserialized so</font><font color="#CCCCCC"> spring framework</font>

762
00:39:28,390 --> 00:39:32,270
<font color="#CCCCCC">remote saying</font>

763
00:39:29,810 --> 00:39:36,799
expects me to send a remote invocation

764
00:39:32,270 --> 00:39:39,410
<font color="#CCCCCC">object</font><font color="#E5E5E5"> to it what I actually sent in</font>

765
00:39:36,800 --> 00:39:41,800
<font color="#CCCCCC">this case</font><font color="#E5E5E5"> was a hash</font><font color="#CCCCCC"> step which</font><font color="#E5E5E5"> isn't</font>

766
00:39:39,410 --> 00:39:46,790
<font color="#CCCCCC">compatible</font><font color="#E5E5E5"> with a remote invocation</font>

767
00:39:41,800 --> 00:39:49,910
so when<font color="#CCCCCC"> spring framework</font><font color="#E5E5E5"> PC realizes</font>

768
00:39:46,790 --> 00:39:52,580
this<font color="#E5E5E5"> hash that objects then gets</font>

769
00:39:49,910 --> 00:39:53,009
returned<font color="#E5E5E5"> and spring framework attempts</font>

770
00:39:52,580 --> 00:39:56,009
to cast

771
00:39:53,010 --> 00:39:57,990
so remote<font color="#CCCCCC"> except remote</font><font color="#E5E5E5"> invocation</font>

772
00:39:56,010 --> 00:40:00,660
objects at that<font color="#CCCCCC"> plane</font><font color="#E5E5E5"> an exception is</font>

773
00:39:57,990 --> 00:40:03,540
triggered and<font color="#E5E5E5"> exception response is sent</font>

774
00:40:00,660 --> 00:40:06,899
<font color="#CCCCCC">back to there so the</font><font color="#E5E5E5"> cryin</font><font color="#CCCCCC"> and nothing</font>

775
00:40:03,540 --> 00:40:09,840
else<font color="#E5E5E5"> happens on the server side that</font>

776
00:40:06,900 --> 00:40:12,510
happens<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> after the objects been</font>

777
00:40:09,840 --> 00:40:14,760
deserialized<font color="#E5E5E5"> payload is executed we're</font>

778
00:40:12,510 --> 00:40:16,950
<font color="#CCCCCC">also happens before</font><font color="#E5E5E5"> that payload ever</font>

779
00:40:14,760 --> 00:40:19,860
reaches the application that usually

780
00:40:16,950 --> 00:40:22,980
spring AC to be<font color="#E5E5E5"> remoting so if you're a</font>

781
00:40:19,860 --> 00:40:26,010
developer<font color="#E5E5E5"> using spring remote</font><font color="#CCCCCC"> sing you</font>

782
00:40:22,980 --> 00:40:27,660
won't ever<font color="#CCCCCC"> see that payload and but</font>

783
00:40:26,010 --> 00:40:29,520
<font color="#CCCCCC">according to David Saul who</font><font color="#E5E5E5"> makes</font><font color="#CCCCCC"> Spring</font>

784
00:40:27,660 --> 00:40:33,299
<font color="#CCCCCC">Framework</font><font color="#E5E5E5"> that's not an issue whispering</font>

785
00:40:29,520 --> 00:40:36,600
framework and they<font color="#E5E5E5"> refuse to fix it one</font>

786
00:40:33,300 --> 00:40:38,600
of the security<font color="#E5E5E5"> team has a CBE for a</font>

787
00:40:36,600 --> 00:40:41,190
<font color="#E5E5E5">similar vulnerability in jboss</font>

788
00:40:38,600 --> 00:40:42,660
and I actually spoke to<font color="#CCCCCC"> that member of</font>

789
00:40:41,190 --> 00:40:44,820
<font color="#CCCCCC">their</font><font color="#E5E5E5"> security team about</font><font color="#CCCCCC"> this issue and</font>

790
00:40:42,660 --> 00:40:46,319
he said it's<font color="#CCCCCC"> not our problem even though</font>

791
00:40:44,820 --> 00:40:47,670
<font color="#CCCCCC">an application developer using</font><font color="#E5E5E5"> this</font>

792
00:40:46,320 --> 00:40:48,230
won't see the payload to<font color="#CCCCCC"> do anything</font>

793
00:40:47,670 --> 00:40:53,220
<font color="#E5E5E5">about it</font>

794
00:40:48,230 --> 00:40:55,590
<font color="#E5E5E5">so whatever another example case study</font>

795
00:40:53,220 --> 00:40:57,419
Acme money<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not called</font>

796
00:40:55,590 --> 00:40:59,400
Acme money but I can't talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> this</font>

797
00:40:57,420 --> 00:41:01,560
one can't reveal the details<font color="#E5E5E5"> this one</font>

798
00:40:59,400 --> 00:41:05,870
<font color="#E5E5E5">yet because these are trying to fix it</font>

799
00:41:01,560 --> 00:41:05,870
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> login packet from</font><font color="#E5E5E5"> the start</font>

800
00:41:07,040 --> 00:41:17,220
obviously<font color="#CCCCCC"> that's our</font><font color="#E5E5E5"> entry point the</font>

801
00:41:14,610 --> 00:41:21,870
exploit was<font color="#CCCCCC"> bit more</font><font color="#E5E5E5"> involved this time</font>

802
00:41:17,220 --> 00:41:23,790
but still easily done so after<font color="#E5E5E5"> respited</font>

803
00:41:21,870 --> 00:41:28,259
<font color="#E5E5E5">thought serialization data in the login</font>

804
00:41:23,790 --> 00:41:31,680
packet and I didn't see the

805
00:41:28,260 --> 00:41:33,140
<font color="#E5E5E5">serialization header</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> CED</font><font color="#CCCCCC"> so on</font><font color="#E5E5E5"> so a</font>

806
00:41:31,680 --> 00:41:35,970
<font color="#CCCCCC">course application down completely</font>

807
00:41:33,140 --> 00:41:37,890
<font color="#E5E5E5">stared at Wireshark star new packet</font>

808
00:41:35,970 --> 00:41:40,830
capture<font color="#CCCCCC"> fired the application back up to</font>

809
00:41:37,890 --> 00:41:44,240
see what<font color="#E5E5E5"> was going on</font><font color="#CCCCCC"> and following the</font>

810
00:41:40,830 --> 00:41:46,470
<font color="#E5E5E5">CCP stream in Wireshark showed me this</font>

811
00:41:44,240 --> 00:41:48,839
which was<font color="#E5E5E5"> everything that I needed to</font>

812
00:41:46,470 --> 00:41:51,149
know<font color="#CCCCCC"> so</font><font color="#E5E5E5"> first thing we've</font><font color="#CCCCCC"> got here</font>

813
00:41:48,840 --> 00:41:54,810
serialization series like serialization

814
00:41:51,150 --> 00:41:57,210
header followed by<font color="#CCCCCC"> 77 which</font><font color="#E5E5E5"> is a block</font>

815
00:41:54,810 --> 00:42:01,710
data element<font color="#CCCCCC"> 2 which is the length</font><font color="#E5E5E5"> of</font>

816
00:41:57,210 --> 00:42:05,550
<font color="#E5E5E5">the block and then 0 0 0 0 which is the</font>

817
00:42:01,710 --> 00:42:06,720
data in<font color="#E5E5E5"> that block</font><font color="#CCCCCC"> and we get this</font><font color="#E5E5E5"> data</font>

818
00:42:05,550 --> 00:42:08,310
coming back<font color="#E5E5E5"> from the server</font>

819
00:42:06,720 --> 00:42:10,470
<font color="#E5E5E5">two pockets come back first as a</font>

820
00:42:08,310 --> 00:42:13,920
<font color="#E5E5E5">serialization had a second one has an</font>

821
00:42:10,470 --> 00:42:16,618
<font color="#CCCCCC">object coming from the server next one</font>

822
00:42:13,920 --> 00:42:19,109
that goes out<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the server is a</font>

823
00:42:16,619 --> 00:42:22,320
serialized object<font color="#CCCCCC"> seven</font><font color="#E5E5E5"> three seven</font>

824
00:42:19,109 --> 00:42:24,299
<font color="#CCCCCC">series across description that's</font>

825
00:42:22,320 --> 00:42:29,640
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> that I needed to attack the</font>

826
00:42:24,300 --> 00:42:33,960
application so this is the exploit

827
00:42:29,640 --> 00:42:37,470
<font color="#E5E5E5">script we start off we send the first</font>

828
00:42:33,960 --> 00:42:37,830
packet that<font color="#CCCCCC"> just show just so a</font><font color="#E5E5E5"> CED so</font>

829
00:42:37,470 --> 00:42:40,618
on

830
00:42:37,830 --> 00:42:43,500
I did notice every time<font color="#E5E5E5"> I did a packet</font>

831
00:42:40,619 --> 00:42:45,109
capture<font color="#E5E5E5"> this and that packet was same</font>

832
00:42:43,500 --> 00:42:48,000
every single time so I made<font color="#E5E5E5"> it easier</font>

833
00:42:45,109 --> 00:42:50,060
and then<font color="#E5E5E5"> receive two packets back from</font>

834
00:42:48,000 --> 00:42:52,530
the server<font color="#CCCCCC"> let's see that I showed you</font>

835
00:42:50,060 --> 00:42:53,849
<font color="#E5E5E5">and I</font><font color="#CCCCCC"> don't care what they are</font><font color="#E5E5E5"> don't</font>

836
00:42:52,530 --> 00:42:57,060
<font color="#E5E5E5">care about them so</font><font color="#CCCCCC"> I'll just chuck them</font>

837
00:42:53,849 --> 00:42:59,070
away once<font color="#CCCCCC"> we</font><font color="#E5E5E5"> received them and then send</font>

838
00:42:57,060 --> 00:43:00,990
the payload<font color="#E5E5E5"> so this is just a fire</font>

839
00:42:59,070 --> 00:43:03,869
payload method that is part of that

840
00:43:00,990 --> 00:43:08,040
script I showed earlier<font color="#E5E5E5"> so this method</font>

841
00:43:03,869 --> 00:43:09,330
receives<font color="#E5E5E5"> a sterilized payload using one</font>

842
00:43:08,040 --> 00:43:14,339
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> white sorcery</font><font color="#E5E5E5"> or gadget chains</font>

843
00:43:09,330 --> 00:43:17,580
and the reason for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> for : in square</font>

844
00:43:14,339 --> 00:43:21,000
brackets is that in this<font color="#E5E5E5"> case we go back</font>

845
00:43:17,580 --> 00:43:22,410
<font color="#E5E5E5">here we've got the serialization had</font>

846
00:43:21,000 --> 00:43:23,880
already been sent<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> server that</font>

847
00:43:22,410 --> 00:43:26,700
<font color="#CCCCCC">should only ever exist once in a</font>

848
00:43:23,880 --> 00:43:28,740
serialization stream and the payload

849
00:43:26,700 --> 00:43:30,830
generated by<font color="#E5E5E5"> Weiss or serial as</font><font color="#CCCCCC"> past</font><font color="#E5E5E5"> to</font>

850
00:43:28,740 --> 00:43:33,660
fire payload contains<font color="#E5E5E5"> that serialization</font>

851
00:43:30,830 --> 00:43:35,040
serialization header so the<font color="#CCCCCC"> for</font><font color="#E5E5E5"> : just</font>

852
00:43:33,660 --> 00:43:38,450
skipped over<font color="#CCCCCC"> that and</font><font color="#E5E5E5"> it sends the rest</font>

853
00:43:35,040 --> 00:43:42,410
of the payload<font color="#E5E5E5"> and this then in the</font>

854
00:43:38,450 --> 00:43:42,410
<font color="#CCCCCC">second packet</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> sent to the</font><font color="#E5E5E5"> server</font>

855
00:43:44,810 --> 00:43:54,240
so um as we've<font color="#E5E5E5"> spring</font><font color="#CCCCCC"> remoting found</font>

856
00:43:52,680 --> 00:43:57,060
that the underlying application didn't

857
00:43:54,240 --> 00:44:00,598
care if<font color="#E5E5E5"> I sent it for example a Java</font>

858
00:43:57,060 --> 00:44:03,270
<font color="#CCCCCC">high set rather than Java dot Lancashire</font>

859
00:44:00,599 --> 00:44:05,880
which is why expected<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see there</font>

860
00:44:03,270 --> 00:44:08,310
<font color="#E5E5E5">no bottom packet that string</font><font color="#CCCCCC"> Java doc</font>

861
00:44:05,880 --> 00:44:12,960
Lancashire<font color="#E5E5E5"> it didn't care that I sent it</font>

862
00:44:08,310 --> 00:44:14,460
a different type<font color="#CCCCCC"> of objects and it's</font>

863
00:44:12,960 --> 00:44:17,700
still<font color="#E5E5E5"> be sterilizers</font><font color="#CCCCCC"> at an</font><font color="#E5E5E5"> instantiated</font>

864
00:44:14,460 --> 00:44:19,910
<font color="#CCCCCC">object in our</font><font color="#E5E5E5"> sunday.and so using a</font>

865
00:44:17,700 --> 00:44:21,560
brute force<font color="#E5E5E5"> crypto just showed you</font>

866
00:44:19,910 --> 00:44:23,000
identified that<font color="#CCCCCC"> we use in</font><font color="#E5E5E5"> Commons</font>

867
00:44:21,560 --> 00:44:26,320
collections<font color="#CCCCCC"> three points epoch one which</font>

868
00:44:23,000 --> 00:44:28,820
is one on<font color="#CCCCCC"> super vulnerable are to</font>

869
00:44:26,320 --> 00:44:32,360
facilitate remote<font color="#CCCCCC"> commanders command</font>

870
00:44:28,820 --> 00:44:35,110
execution<font color="#CCCCCC"> through DC realization so it</font>

871
00:44:32,360 --> 00:44:37,430
did a<font color="#CCCCCC"> quick test with</font><font color="#E5E5E5"> a ping command</font><font color="#CCCCCC"> and</font>

872
00:44:35,110 --> 00:44:39,860
ended<font color="#E5E5E5"> up with a few thousand things</font>

873
00:44:37,430 --> 00:44:45,129
<font color="#E5E5E5">hitting me because I forgot</font><font color="#CCCCCC"> to set a</font>

874
00:44:39,860 --> 00:44:47,330
limit and<font color="#E5E5E5"> yeah so so this point I've</font>

875
00:44:45,130 --> 00:44:51,350
proved that<font color="#E5E5E5"> I'm executing commands on</font>

876
00:44:47,330 --> 00:44:52,190
<font color="#E5E5E5">the server so essentially um but I</font>

877
00:44:51,350 --> 00:44:54,170
thought this was<font color="#E5E5E5"> quite an interesting</font>

878
00:44:52,190 --> 00:44:56,300
<font color="#CCCCCC">example of what you</font><font color="#E5E5E5"> can achieve with</font>

879
00:44:54,170 --> 00:44:57,790
these<font color="#E5E5E5"> guns are</font><font color="#CCCCCC"> vulnerabilities so we're</font>

880
00:44:56,300 --> 00:45:00,590
kind of<font color="#E5E5E5"> carry on</font><font color="#CCCCCC"> with the story and</font>

881
00:44:57,790 --> 00:45:02,090
obviously<font color="#E5E5E5"> I wanted to get from executing</font>

882
00:45:00,590 --> 00:45:03,770
commands<font color="#E5E5E5"> to</font><font color="#CCCCCC"> obviously having a and</font>

883
00:45:02,090 --> 00:45:07,420
<font color="#CCCCCC">interrupts of shell on the box or can do</font>

884
00:45:03,770 --> 00:45:07,420
more trainers<font color="#CCCCCC"> escalating</font><font color="#E5E5E5"> for religious</font>

885
00:45:08,890 --> 00:45:14,529
well this proved fiddly because I didn't

886
00:45:12,710 --> 00:45:18,760
have access<font color="#E5E5E5"> to any of these commands I</font>

887
00:45:14,530 --> 00:45:21,740
did see<font color="#E5E5E5"> that pearl was available but</font>

888
00:45:18,760 --> 00:45:24,740
honestly at the time I did this I wasn't

889
00:45:21,740 --> 00:45:28,970
aware of the payload encoder that<font color="#E5E5E5"> I</font>

890
00:45:24,740 --> 00:45:30,859
showed earlier<font color="#CCCCCC"> so as far as</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> was aware</font>

891
00:45:28,970 --> 00:45:32,569
<font color="#E5E5E5">I with pearl avoidance again say say if</font>

892
00:45:30,860 --> 00:45:36,650
I went<font color="#CCCCCC"> to do a reverse shell one-liner I</font>

893
00:45:32,570 --> 00:45:39,170
need to use the cold<font color="#E5E5E5"> use space socket so</font>

894
00:45:36,650 --> 00:45:41,600
I can't actually do<font color="#CCCCCC"> that so</font><font color="#E5E5E5"> I ignored</font>

895
00:45:39,170 --> 00:45:43,940
that<font color="#E5E5E5"> food sign beam and I eventually</font>

896
00:45:41,600 --> 00:45:45,950
found that the<font color="#CCCCCC"> TFTP command was</font>

897
00:45:43,940 --> 00:45:47,890
available on<font color="#E5E5E5"> the server so there's a</font>

898
00:45:45,950 --> 00:45:50,899
nice<font color="#E5E5E5"> little library Python</font><font color="#CCCCCC"> IOB TFT pie</font>

899
00:45:47,890 --> 00:45:52,370
run that<font color="#CCCCCC"> TFTP server</font><font color="#E5E5E5"> that gave me access</font>

900
00:45:50,900 --> 00:45:55,190
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> filesystem on the server I was</font>

901
00:45:52,370 --> 00:45:57,020
able<font color="#E5E5E5"> to download files upload files so</font>

902
00:45:55,190 --> 00:46:00,230
he lorded<font color="#CCCCCC"> apparel reversed shelf of the</font>

903
00:45:57,020 --> 00:46:02,120
box and it turns out<font color="#CCCCCC"> though</font><font color="#E5E5E5"> it was a a</font>

904
00:46:00,230 --> 00:46:06,980
<font color="#CCCCCC">IX box which</font><font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> it's the only one</font>

905
00:46:02,120 --> 00:46:10,069
<font color="#E5E5E5">I've</font><font color="#CCCCCC"> ever actually encountered and but</font>

906
00:46:06,980 --> 00:46:13,120
wanted more<font color="#CCCCCC"> so I only had a low</font>

907
00:46:10,070 --> 00:46:14,960
privileged user shell there and

908
00:46:13,120 --> 00:46:17,900
fortunately most people don't prioritize

909
00:46:14,960 --> 00:46:21,670
<font color="#E5E5E5">operating system updates so there was a</font>

910
00:46:17,900 --> 00:46:24,650
nice local privilege escalate escalation

911
00:46:21,670 --> 00:46:27,320
except<font color="#E5E5E5"> that it was written in seek and</font>

912
00:46:24,650 --> 00:46:29,760
the necessary build tools and libraries

913
00:46:27,320 --> 00:46:33,420
weren't available on the box

914
00:46:29,760 --> 00:46:37,560
so I ended<font color="#E5E5E5"> up rewriting that play simple</font>

915
00:46:33,420 --> 00:46:41,130
which was horrendous<font color="#E5E5E5"> but it was worth it</font>

916
00:46:37,560 --> 00:46:43,080
<font color="#E5E5E5">because I got root on that box and that</font>

917
00:46:41,130 --> 00:46:45,090
allowed<font color="#CCCCCC"> me to jump around the entire</font>

918
00:46:43,080 --> 00:46:49,369
infrastructure had I was jumping<font color="#CCCCCC"> between</font>

919
00:46:45,090 --> 00:46:49,369
data centers<font color="#E5E5E5"> between pre prod and prod</font>

920
00:46:49,580 --> 00:46:55,710
so raise<font color="#CCCCCC"> your hand now if you</font><font color="#E5E5E5"> think that</font>

921
00:46:53,760 --> 00:46:59,850
you would know what<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> if you saw</font>

922
00:46:55,710 --> 00:47:02,880
that<font color="#E5E5E5"> packet from the start that's</font>

923
00:46:59,850 --> 00:47:03,960
<font color="#E5E5E5">definitely an improvement</font><font color="#CCCCCC"> awesome</font><font color="#E5E5E5"> so</font>

924
00:47:02,880 --> 00:47:09,590
let's<font color="#CCCCCC"> say we</font><font color="#E5E5E5"> can make it a bit more</font>

925
00:47:03,960 --> 00:47:13,109
<font color="#E5E5E5">practical so first thing I've got is a</font>

926
00:47:09,590 --> 00:47:15,680
<font color="#CCCCCC">piping script which is essentially what</font>

927
00:47:13,109 --> 00:47:18,029
the<font color="#E5E5E5"> snippets were that I was showing</font>

928
00:47:15,680 --> 00:47:20,250
which automates some of the things<font color="#E5E5E5"> I've</font>

929
00:47:18,030 --> 00:47:24,030
been<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about so serial grouped up</font>

930
00:47:20,250 --> 00:47:26,490
by and the scripts can automate the

931
00:47:24,030 --> 00:47:29,550
process<font color="#CCCCCC"> of delivering</font><font color="#E5E5E5"> the various</font><font color="#CCCCCC"> y</font>

932
00:47:26,490 --> 00:47:33,979
source<font color="#CCCCCC"> Ariel RC e gadget chains to a</font>

933
00:47:29,550 --> 00:47:36,150
target by either<font color="#E5E5E5"> replaying</font><font color="#CCCCCC"> CCP</font>

934
00:47:33,980 --> 00:47:40,440
conversation and in<font color="#E5E5E5"> jets in the pack</font>

935
00:47:36,150 --> 00:47:43,590
they payload<font color="#E5E5E5"> location you specify or by</font>

936
00:47:40,440 --> 00:47:45,210
replaying HTTP<font color="#CCCCCC"> requests</font><font color="#E5E5E5"> there's actually</font>

937
00:47:43,590 --> 00:47:49,710
a burp suite<font color="#CCCCCC"> plug-in freely available</font>

938
00:47:45,210 --> 00:47:51,320
that<font color="#E5E5E5"> and does this stuff HTTP so that</font>

939
00:47:49,710 --> 00:47:55,050
might<font color="#E5E5E5"> be a bit easier in those cases and</font>

940
00:47:51,320 --> 00:47:57,240
but I regularly<font color="#E5E5E5"> use</font><font color="#CCCCCC"> their iterating</font>

941
00:47:55,050 --> 00:48:02,880
through<font color="#E5E5E5"> different payloads for TCP</font>

942
00:47:57,240 --> 00:48:04,140
conversations<font color="#CCCCCC"> I also looks at</font><font color="#E5E5E5"> the</font>

943
00:48:02,880 --> 00:48:06,900
response data that comes back<font color="#CCCCCC"> from</font>

944
00:48:04,140 --> 00:48:10,049
<font color="#E5E5E5">target if there is any and it looks for</font>

945
00:48:06,900 --> 00:48:12,660
class not found exception and the<font color="#CCCCCC"> IO</font>

946
00:48:10,050 --> 00:48:15,390
exception<font color="#CCCCCC"> that tells us whether payload</font>

947
00:48:12,660 --> 00:48:20,580
gadget chains are useless<font color="#E5E5E5"> or whether the</font>

948
00:48:15,390 --> 00:48:23,220
commands<font color="#E5E5E5"> didn't exist on the server yes</font>

949
00:48:20,580 --> 00:48:25,500
by no means<font color="#E5E5E5"> a robust attack saw it's</font>

950
00:48:23,220 --> 00:48:29,330
just add a script<font color="#E5E5E5"> that I've used fair</font>

951
00:48:25,500 --> 00:48:32,070
<font color="#E5E5E5">few times and it can only handle simple</font>

952
00:48:29,330 --> 00:48:34,920
<font color="#E5E5E5">protocols so for example if there's a</font>

953
00:48:32,070 --> 00:48:35,880
session<font color="#E5E5E5"> sent back from the server and</font>

954
00:48:34,920 --> 00:48:38,420
<font color="#E5E5E5">you need to use</font><font color="#CCCCCC"> our session in</font>

955
00:48:35,880 --> 00:48:42,430
<font color="#E5E5E5">subsequent requests it's</font>

956
00:48:38,420 --> 00:48:46,790
<font color="#E5E5E5">it can't</font><font color="#CCCCCC"> handle that</font><font color="#E5E5E5"> but there is also</font>

957
00:48:42,430 --> 00:48:49,940
<font color="#CCCCCC">Sarah Brut</font><font color="#E5E5E5"> sharland the pack which</font>

958
00:48:46,790 --> 00:48:52,670
basically has the same<font color="#E5E5E5"> loop which calls</font>

959
00:48:49,940 --> 00:48:55,250
dispatch payload<font color="#CCCCCC"> you just need to</font>

960
00:48:52,670 --> 00:48:57,230
implement<font color="#E5E5E5"> that to deliver a payload to</font>

961
00:48:55,250 --> 00:48:59,720
your<font color="#E5E5E5"> application so you can do things</font>

962
00:48:57,230 --> 00:49:04,130
<font color="#CCCCCC">like get a session ID back and use</font><font color="#E5E5E5"> that</font>

963
00:48:59,720 --> 00:49:08,000
in the payload packet next and I've got

964
00:49:04,130 --> 00:49:11,390
is serialization<font color="#CCCCCC"> thumper again some</font>

965
00:49:08,000 --> 00:49:14,150
<font color="#CCCCCC">someone github and we can use this to</font>

966
00:49:11,390 --> 00:49:17,690
help<font color="#CCCCCC"> work out where to</font><font color="#E5E5E5"> inject a payload</font>

967
00:49:14,150 --> 00:49:19,670
by pasinetta<font color="#E5E5E5"> a sample serialization</font>

968
00:49:17,690 --> 00:49:22,099
stream that's used<font color="#E5E5E5"> by the</font><font color="#CCCCCC"> application</font>

969
00:49:19,670 --> 00:49:24,470
<font color="#E5E5E5">target application decoder net and</font>

970
00:49:22,099 --> 00:49:29,660
working out we're interested in<font color="#CCCCCC"> almond</font>

971
00:49:24,470 --> 00:49:33,220
<font color="#CCCCCC">sour in that stream and then lastly</font><font color="#E5E5E5"> the</font>

972
00:49:29,660 --> 00:49:35,808
<font color="#E5E5E5">sale up however you</font><font color="#CCCCCC"> want to prance up</font>

973
00:49:33,220 --> 00:49:39,919
which is basically a demo<font color="#CCCCCC"> application to</font>

974
00:49:35,809 --> 00:49:42,530
<font color="#E5E5E5">allow people to practice this and so run</font>

975
00:49:39,920 --> 00:49:49,220
server<font color="#CCCCCC"> run the client</font><font color="#E5E5E5"> and then pop some</font>

976
00:49:42,530 --> 00:50:07,609
gunk layers I'm going to attempt to<font color="#E5E5E5"> do a</font>

977
00:49:49,220 --> 00:50:10,569
demo so there we've got<font color="#E5E5E5"> the</font><font color="#CCCCCC"> D</font>

978
00:50:07,609 --> 00:50:10,569
<font color="#E5E5E5">serialization server</font>

979
00:50:31,390 --> 00:50:41,230
this is the<font color="#E5E5E5"> client so yeah shut up</font>

980
00:50:50,210 --> 00:50:54,810
we run that<font color="#E5E5E5"> you can see subtext</font>

981
00:50:53,250 --> 00:50:57,150
appearing on service<font color="#E5E5E5"> telling</font><font color="#CCCCCC"> was that</font>

982
00:50:54,810 --> 00:50:59,700
it's<font color="#E5E5E5"> received data from the</font><font color="#CCCCCC"> claim</font><font color="#E5E5E5"> and I</font>

983
00:50:57,150 --> 00:51:02,850
think you just<font color="#E5E5E5"> asked us for a name just</font>

984
00:50:59,700 --> 00:51:06,600
<font color="#E5E5E5">there's no reason for</font><font color="#CCCCCC"> a book</font><font color="#E5E5E5"> that's for</font>

985
00:51:02,850 --> 00:51:08,640
a name<font color="#E5E5E5"> and then a string to hash so the</font>

986
00:51:06,600 --> 00:51:13,650
server just<font color="#E5E5E5"> hashes a string and send it</font>

987
00:51:08,640 --> 00:51:30,480
back now<font color="#CCCCCC"> you can see the result printed</font>

988
00:51:13,650 --> 00:51:32,550
out so<font color="#E5E5E5"> what can do is run</font>

989
00:51:30,480 --> 00:51:34,860
why should<font color="#CCCCCC"> I capture the packets have</font><font color="#E5E5E5"> a</font>

990
00:51:32,550 --> 00:51:36,510
look at the data that's there and see

991
00:51:34,860 --> 00:51:41,310
what's going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> when that</font><font color="#CCCCCC"> client-server</font>

992
00:51:36,510 --> 00:51:44,270
<font color="#E5E5E5">interactions</font><font color="#CCCCCC"> going on happening and if</font>

993
00:51:41,310 --> 00:51:44,270
this loads up

994
00:51:54,940 --> 00:52:04,040
<font color="#CCCCCC">hey that's gonna be horrendous so it's</font>

995
00:52:00,800 --> 00:52:05,690
just<font color="#E5E5E5"> however looks</font><font color="#CCCCCC"> sooo brooken</font><font color="#E5E5E5"> so</font>

996
00:52:04,040 --> 00:52:10,130
they're down<font color="#E5E5E5"> birthday dates that we can</font>

997
00:52:05,690 --> 00:52:11,450
see a CED zero zero zero five so<font color="#E5E5E5"> I'm we</font>

998
00:52:10,130 --> 00:52:15,200
can see if it's a day<font color="#E5E5E5"> of</font><font color="#CCCCCC"> going back and</font>

999
00:52:11,450 --> 00:52:17,359
<font color="#E5E5E5">forth and we get answer here you see</font>

1000
00:52:15,200 --> 00:52:21,379
<font color="#CCCCCC">envy that</font><font color="#E5E5E5"> they said that</font><font color="#CCCCCC"> hash</font><font color="#E5E5E5"> request</font>

1001
00:52:17,360 --> 00:52:25,810
looks like a sterilized object so I'm

1002
00:52:21,380 --> 00:52:25,810
just going<font color="#CCCCCC"> to get rid of</font><font color="#E5E5E5"> that for now</font>

1003
00:52:27,610 --> 00:52:45,860
<font color="#CCCCCC">and</font><font color="#E5E5E5"> now what we can do with that data</font><font color="#CCCCCC"> is</font>

1004
00:52:40,970 --> 00:52:47,899
we can say that<font color="#E5E5E5"> whole conversation</font><font color="#CCCCCC"> or if</font>

1005
00:52:45,860 --> 00:52:49,270
we<font color="#E5E5E5"> stop and starve it we can take those</font>

1006
00:52:47,900 --> 00:52:51,770
packets say that are<font color="#E5E5E5"> going outbound</font>

1007
00:52:49,270 --> 00:52:54,560
<font color="#E5E5E5">that's one</font><font color="#CCCCCC"> sterilization stream the</font>

1008
00:52:51,770 --> 00:52:58,359
inbound stream is another if we<font color="#E5E5E5"> take all</font>

1009
00:52:54,560 --> 00:53:01,279
the outbound packets<font color="#E5E5E5"> copy the bikes and</font>

1010
00:52:58,359 --> 00:53:03,319
then pass them<font color="#E5E5E5"> to serialization dumper</font>

1011
00:53:01,280 --> 00:53:05,780
as long<font color="#E5E5E5"> as we've got to start we don't</font>

1012
00:53:03,320 --> 00:53:08,570
have to get the end<font color="#E5E5E5"> we can dump out as</font>

1013
00:53:05,780 --> 00:53:11,990
far<font color="#CCCCCC"> as um essentially looks like a</font>

1014
00:53:08,570 --> 00:53:23,570
<font color="#CCCCCC">sterilization</font><font color="#E5E5E5"> stream so quick example of</font>

1015
00:53:11,990 --> 00:53:25,700
<font color="#E5E5E5">that no we can see this is</font><font color="#CCCCCC"> our four</font><font color="#E5E5E5"> main</font>

1016
00:53:23,570 --> 00:53:27,770
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> that we're looking</font><font color="#E5E5E5"> for hey we've</font>

1017
00:53:25,700 --> 00:53:28,939
got an object<font color="#CCCCCC"> in the stream</font><font color="#E5E5E5"> that tells</font>

1018
00:53:27,770 --> 00:53:31,520
us<font color="#CCCCCC"> that the service</font><font color="#E5E5E5"> going to deserialize</font>

1019
00:53:28,940 --> 00:53:34,040
<font color="#E5E5E5">that</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> at that point</font><font color="#CCCCCC"> I gave us an</font>

1020
00:53:31,520 --> 00:53:42,470
<font color="#CCCCCC">app give us an idea where we</font><font color="#E5E5E5"> can inject</font>

1021
00:53:34,040 --> 00:53:44,710
<font color="#CCCCCC">the payload</font><font color="#E5E5E5"> and then hopefully this will</font>

1022
00:53:42,470 --> 00:53:44,709
work

1023
00:53:57,440 --> 00:54:05,339
so here's what I made earlier dot txt

1024
00:54:01,800 --> 00:54:17,880
<font color="#E5E5E5">that contains the import</font><font color="#CCCCCC"> fair serial</font>

1025
00:54:05,339 --> 00:54:19,619
<font color="#E5E5E5">break</font><font color="#CCCCCC"> Oh bollocks has</font><font color="#E5E5E5"> networks wherever</font>

1026
00:54:17,880 --> 00:54:23,490
right<font color="#E5E5E5"> you cannot work out to do that</font>

1027
00:54:19,619 --> 00:54:25,369
<font color="#E5E5E5">yourselves</font><font color="#CCCCCC"> it's on github I didn't</font>

1028
00:54:23,490 --> 00:54:29,490
sacrifice<font color="#E5E5E5"> a go</font>

1029
00:54:25,369 --> 00:54:31,470
so just to conclude exploitation of

1030
00:54:29,490 --> 00:54:33,509
<font color="#E5E5E5">serialization the</font><font color="#CCCCCC"> tax is typically more</font>

1031
00:54:31,470 --> 00:54:36,779
involved than other common a tactical

1032
00:54:33,510 --> 00:54:38,700
move<font color="#CCCCCC"> owner abilities</font><font color="#E5E5E5"> it's important to</font>

1033
00:54:36,780 --> 00:54:40,230
understand what's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on helps a</font>

1034
00:54:38,700 --> 00:54:42,480
<font color="#CCCCCC">validation</font><font color="#E5E5E5"> works how the exploits work</font>

1035
00:54:40,230 --> 00:54:44,640
in<font color="#E5E5E5"> order to attack these vulnerabilities</font>

1036
00:54:42,480 --> 00:54:46,410
offensively science<font color="#CCCCCC"> Emma's SQL injection</font>

1037
00:54:44,640 --> 00:54:50,640
we need to understand SQL to do manual

1038
00:54:46,410 --> 00:54:53,460
<font color="#CCCCCC">sqli exploitation is rewarding again</font>

1039
00:54:50,640 --> 00:54:55,200
<font color="#E5E5E5">similar to SQL I quite often get we</font><font color="#CCCCCC"> walk</font>

1040
00:54:53,460 --> 00:54:58,640
come to command execution<font color="#CCCCCC"> desk well</font><font color="#E5E5E5"> I</font>

1041
00:54:55,200 --> 00:54:58,640
gives<font color="#E5E5E5"> you the full database generally</font>

1042
00:54:58,670 --> 00:55:02,970
<font color="#E5E5E5">you quite often see this stuff</font><font color="#CCCCCC"> in big in</font>

1043
00:55:01,320 --> 00:55:04,859
total enterprise applications that

1044
00:55:02,970 --> 00:55:05,939
target<font color="#CCCCCC"> that I've been talking about</font><font color="#E5E5E5"> a</font>

1045
00:55:04,859 --> 00:55:08,640
story I've been talking<font color="#E5E5E5"> about is</font>

1046
00:55:05,940 --> 00:55:11,790
something<font color="#E5E5E5"> I think it cost like five</font>

1047
00:55:08,640 --> 00:55:13,950
million<font color="#E5E5E5"> to</font><font color="#CCCCCC"> forget html5 interface</font><font color="#E5E5E5"> for</font>

1048
00:55:11,790 --> 00:55:15,450
<font color="#E5E5E5">the application it's ridiculous</font><font color="#CCCCCC"> so this</font>

1049
00:55:13,950 --> 00:55:17,160
<font color="#E5E5E5">kind of stuff</font><font color="#CCCCCC"> isn't ready</font><font color="#E5E5E5"> ready</font><font color="#CCCCCC"> to</font>

1050
00:55:15,450 --> 00:55:22,799
<font color="#E5E5E5">available to just anyone's of research</font>

1051
00:55:17,160 --> 00:55:25,009
and pull apart<font color="#E5E5E5"> that's it questions</font>

1052
00:55:22,800 --> 00:55:26,430
there's some references<font color="#E5E5E5"> and some</font>

1053
00:55:25,010 --> 00:55:29,160
shameful plugs

1054
00:55:26,430 --> 00:55:31,410
I brought an article which has<font color="#CCCCCC"> a lot of</font>

1055
00:55:29,160 --> 00:55:34,080
information<font color="#E5E5E5"> that I've spoken about today</font>

1056
00:55:31,410 --> 00:55:35,879
<font color="#E5E5E5">and so go and check</font><font color="#CCCCCC"> that I have a lot</font>

1057
00:55:34,080 --> 00:55:40,580
give me some feedback<font color="#E5E5E5"> tell me it's a lot</font>

1058
00:55:35,880 --> 00:55:40,580
of<font color="#CCCCCC"> rubbish should be one questions</font>

1059
00:55:42,650 --> 00:55:45,000
cool

1060
00:55:44,390 --> 00:55:48,190
<font color="#E5E5E5">Thanks</font>

1061
00:55:45,000 --> 00:55:48,190
[Applause]

