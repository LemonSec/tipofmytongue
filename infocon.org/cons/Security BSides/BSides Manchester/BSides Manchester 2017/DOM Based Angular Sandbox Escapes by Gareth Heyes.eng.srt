1
00:00:02,620 --> 00:00:09,200
good afternoon everybody welcome<font color="#CCCCCC"> to</font>

2
00:00:05,960 --> 00:00:11,300
dom-based angular sandbox<font color="#CCCCCC"> escapes in</font>

3
00:00:09,200 --> 00:00:13,790
this talk<font color="#E5E5E5"> I will demonstrate various</font>

4
00:00:11,300 --> 00:00:15,650
sandbox escapes<font color="#E5E5E5"> in different different</font>

5
00:00:13,790 --> 00:00:18,140
versions of<font color="#CCCCCC"> angular and a Dom based</font>

6
00:00:15,650 --> 00:00:20,419
context and<font color="#CCCCCC"> will be a live demo as well</font>

7
00:00:18,140 --> 00:00:22,759
<font color="#E5E5E5">so if you want to join you can</font><font color="#CCCCCC"> actually</font>

8
00:00:20,419 --> 00:00:24,439
hack with me and try and break the

9
00:00:22,759 --> 00:00:27,200
sandbox so if you want<font color="#E5E5E5"> to open</font><font color="#CCCCCC"> your</font>

10
00:00:24,439 --> 00:00:31,130
laptop's ready<font color="#E5E5E5"> and</font><font color="#CCCCCC"> open chrome</font><font color="#E5E5E5"> then we</font>

11
00:00:27,200 --> 00:00:33,110
can do that<font color="#E5E5E5"> together</font><font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> it's a</font>

12
00:00:31,130 --> 00:00:35,330
little bit about me<font color="#CCCCCC"> I'm a researcher at</font>

13
00:00:33,110 --> 00:00:36,920
ports<font color="#CCCCCC"> mcgerr I consider ports with the</font>

14
00:00:35,330 --> 00:00:38,780
<font color="#CCCCCC">other</font><font color="#E5E5E5"> best web security company</font><font color="#CCCCCC"> to work</font>

15
00:00:36,920 --> 00:00:41,690
for<font color="#E5E5E5"> right now</font><font color="#CCCCCC"> I really enjoy working</font>

16
00:00:38,780 --> 00:00:43,580
there I<font color="#E5E5E5"> love every presentation always</font>

17
00:00:41,690 --> 00:00:47,589
<font color="#E5E5E5">say this but</font><font color="#CCCCCC"> I love</font><font color="#E5E5E5"> hacking</font><font color="#CCCCCC"> javascript</font>

18
00:00:43,580 --> 00:00:50,930
and browsers<font color="#CCCCCC"> I</font><font color="#E5E5E5"> recently tweeted this</font>

19
00:00:47,590 --> 00:00:53,120
this uses the<font color="#E5E5E5"> from function</font><font color="#CCCCCC"> i of the</font>

20
00:00:50,930 --> 00:00:55,460
array constructor<font color="#E5E5E5"> the from function</font>

21
00:00:53,120 --> 00:00:57,709
takes in<font color="#E5E5E5"> a real like object in the first</font>

22
00:00:55,460 --> 00:00:59,960
<font color="#E5E5E5">argument and converts it</font><font color="#CCCCCC"> to an array</font><font color="#E5E5E5"> and</font>

23
00:00:57,710 --> 00:01:01,520
then<font color="#CCCCCC"> the second</font><font color="#E5E5E5"> argument</font><font color="#CCCCCC"> calls the</font>

24
00:00:59,960 --> 00:01:06,590
function<font color="#CCCCCC"> on every</font><font color="#E5E5E5"> element of the array</font>

25
00:01:01,520 --> 00:01:08,090
<font color="#CCCCCC">so this results in alert one you can</font>

26
00:01:06,590 --> 00:01:10,100
follow me<font color="#CCCCCC"> on Twitter</font><font color="#E5E5E5"> I tweet about this</font>

27
00:01:08,090 --> 00:01:12,650
sort of stuff<font color="#CCCCCC"> and what generally happens</font>

28
00:01:10,100 --> 00:01:15,500
I find this<font color="#E5E5E5"> stuff and it leads to more</font>

29
00:01:12,650 --> 00:01:19,640
interesting<font color="#E5E5E5"> research and then I do blog</font>

30
00:01:15,500 --> 00:01:22,909
<font color="#CCCCCC">posts</font><font color="#E5E5E5"> and talks about that so the</font>

31
00:01:19,640 --> 00:01:26,120
<font color="#E5E5E5">angular sandbox is a lot like an</font><font color="#CCCCCC"> aging</font>

32
00:01:22,909 --> 00:01:28,760
<font color="#E5E5E5">Mike Tyson he's tough he can say at the</font>

33
00:01:26,120 --> 00:01:32,930
punches but luckily for<font color="#E5E5E5"> us he's not</font>

34
00:01:28,760 --> 00:01:36,200
<font color="#E5E5E5">fighting anymore angle is shipped on</font>

35
00:01:32,930 --> 00:01:39,790
versions 1.0<font color="#E5E5E5"> without a sandbox so from</font>

36
00:01:36,200 --> 00:01:42,350
<font color="#E5E5E5">1.0 to 1.15 there was no sandbox at all</font>

37
00:01:39,790 --> 00:01:45,260
<font color="#E5E5E5">but what happens in angular is that</font>

38
00:01:42,350 --> 00:01:48,470
expressions are<font color="#E5E5E5"> scored</font><font color="#CCCCCC"> to an object that</font>

39
00:01:45,260 --> 00:01:50,180
<font color="#CCCCCC">the developer creates</font><font color="#E5E5E5"> so when you call</font>

40
00:01:48,470 --> 00:01:53,060
<font color="#CCCCCC">alert one for example what you're</font>

41
00:01:50,180 --> 00:01:55,390
actually doing is calling<font color="#E5E5E5"> a work one on</font>

42
00:01:53,060 --> 00:01:58,130
the scorp object that the developer has

43
00:01:55,390 --> 00:01:59,659
<font color="#CCCCCC">designed and because the alert</font><font color="#E5E5E5"> one</font>

44
00:01:58,130 --> 00:02:02,030
function doesn't<font color="#CCCCCC"> exist on that</font><font color="#E5E5E5"> score</font>

45
00:01:59,659 --> 00:02:05,930
object then the<font color="#E5E5E5"> alert function more be</font>

46
00:02:02,030 --> 00:02:08,239
<font color="#CCCCCC">called</font><font color="#E5E5E5"> Mario discovered that you can get</font>

47
00:02:05,930 --> 00:02:10,510
<font color="#E5E5E5">round</font><font color="#CCCCCC"> the ship restriction and he could</font>

48
00:02:08,239 --> 00:02:14,090
execute<font color="#CCCCCC"> Arbutus card using expressions</font>

49
00:02:10,509 --> 00:02:15,739
<font color="#E5E5E5">and he did that using the constructor</font>

50
00:02:14,090 --> 00:02:20,450
function

51
00:02:15,740 --> 00:02:23,180
so here<font color="#E5E5E5"> constructor refers to the scope</font>

52
00:02:20,450 --> 00:02:24,829
object constructor<font color="#E5E5E5"> and the scope</font><font color="#CCCCCC"> object</font>

53
00:02:23,180 --> 00:02:29,090
constructor is the<font color="#CCCCCC"> object constructor</font>

54
00:02:24,830 --> 00:02:30,890
<font color="#E5E5E5">and the constructor of the object</font>

55
00:02:29,090 --> 00:02:33,230
constructor is the function constructor

56
00:02:30,890 --> 00:02:35,630
and the function constructor<font color="#E5E5E5"> allows you</font>

57
00:02:33,230 --> 00:02:37,640
to generate<font color="#CCCCCC"> cord</font><font color="#E5E5E5"> and execute arbitrary</font>

58
00:02:35,630 --> 00:02:39,799
code<font color="#E5E5E5"> so this will generate a function</font>

59
00:02:37,640 --> 00:02:44,359
you can then call that<font color="#CCCCCC"> function and</font><font color="#E5E5E5"> then</font>

60
00:02:39,800 --> 00:02:49,130
that will execute<font color="#E5E5E5"> alert one angular</font>

61
00:02:44,360 --> 00:02:51,140
introduced to basic sandbox<font color="#E5E5E5"> in 1.2.0 so</font>

62
00:02:49,130 --> 00:02:54,049
they had an<font color="#CCCCCC"> ensure safe member name</font>

63
00:02:51,140 --> 00:02:56,450
function<font color="#E5E5E5"> and that function checks</font>

64
00:02:54,050 --> 00:02:59,240
<font color="#CCCCCC">javascript properties for the word</font>

65
00:02:56,450 --> 00:03:02,869
constructor<font color="#E5E5E5"> and it would throw an</font>

66
00:02:59,240 --> 00:03:05,200
exception and prevent access<font color="#CCCCCC"> to that it</font>

67
00:03:02,870 --> 00:03:07,700
also<font color="#CCCCCC"> checks</font><font color="#E5E5E5"> if there was an underscore</font>

68
00:03:05,200 --> 00:03:10,760
at the start or at the end of<font color="#CCCCCC"> the</font>

69
00:03:07,700 --> 00:03:14,350
property<font color="#E5E5E5"> name and</font><font color="#CCCCCC"> throw an exception so</font>

70
00:03:10,760 --> 00:03:14,350
this is a very basic sandbox

71
00:03:15,230 --> 00:03:22,369
eunho and found the first sandbox<font color="#CCCCCC"> escape</font>

72
00:03:17,690 --> 00:03:24,350
<font color="#E5E5E5">for version one</font><font color="#CCCCCC"> point two point zero</font><font color="#E5E5E5"> so</font>

73
00:03:22,370 --> 00:03:28,880
here<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to be complicated try</font>

74
00:03:24,350 --> 00:03:30,980
to explain it as<font color="#E5E5E5"> better camp</font><font color="#CCCCCC"> this he</font>

75
00:03:28,880 --> 00:03:34,250
uses<font color="#E5E5E5"> an equation new string with</font>

76
00:03:30,980 --> 00:03:38,750
constructor in he then creates an<font color="#E5E5E5"> object</font>

77
00:03:34,250 --> 00:03:44,210
literal then he uses<font color="#E5E5E5"> the string that</font>

78
00:03:38,750 --> 00:03:47,360
<font color="#E5E5E5">he's already created which is so he uses</font>

79
00:03:44,210 --> 00:03:49,880
<font color="#CCCCCC">a string there and then he uses</font><font color="#E5E5E5"> the sub</font>

80
00:03:47,360 --> 00:03:51,860
function so the sub function is an

81
00:03:49,880 --> 00:03:54,140
ancient JavaScript<font color="#E5E5E5"> string method and</font>

82
00:03:51,860 --> 00:03:56,180
what that does is basically<font color="#E5E5E5"> creates a</font>

83
00:03:54,140 --> 00:03:58,250
sub tag and it's been<font color="#E5E5E5"> around in</font>

84
00:03:56,180 --> 00:04:00,200
<font color="#E5E5E5">JavaScript for years but the reason</font><font color="#CCCCCC"> it</font>

85
00:03:58,250 --> 00:04:03,320
<font color="#E5E5E5">uses that is simply as a shortcut in</font>

86
00:04:00,200 --> 00:04:06,530
angular<font color="#E5E5E5"> to get a function whilst he's</font>

87
00:04:03,320 --> 00:04:10,250
got a function he can then use call so a

88
00:04:06,530 --> 00:04:12,380
<font color="#E5E5E5">single function call</font><font color="#CCCCCC"> to the call method</font>

89
00:04:10,250 --> 00:04:15,200
will call the current<font color="#E5E5E5"> function of the</font>

90
00:04:12,380 --> 00:04:17,988
<font color="#CCCCCC">object of the current function so here</font>

91
00:04:15,200 --> 00:04:21,560
<font color="#CCCCCC">sub</font><font color="#E5E5E5"> block call would call the sub</font>

92
00:04:17,988 --> 00:04:25,099
function<font color="#E5E5E5"> well by using call call he gets</font>

93
00:04:21,560 --> 00:04:27,410
the generic function method and the

94
00:04:25,100 --> 00:04:29,180
generic<font color="#E5E5E5"> function call method allows</font><font color="#CCCCCC"> you</font>

95
00:04:27,410 --> 00:04:30,039
<font color="#CCCCCC">to choose the function that you want to</font>

96
00:04:29,180 --> 00:04:33,710
call

97
00:04:30,039 --> 00:04:35,688
so here<font color="#E5E5E5"> he uses his of object literal</font>

98
00:04:33,710 --> 00:04:39,438
which is defined in<font color="#CCCCCC"> be</font><font color="#E5E5E5"> he then</font><font color="#CCCCCC"> uses</font>

99
00:04:35,689 --> 00:04:40,969
square brackets and<font color="#E5E5E5"> then with the string</font>

100
00:04:39,439 --> 00:04:43,639
constructor<font color="#E5E5E5"> in to get the object</font>

101
00:04:40,969 --> 00:04:45,949
<font color="#E5E5E5">constructor once he's got the object</font>

102
00:04:43,639 --> 00:04:48,319
constructor<font color="#CCCCCC"> he can</font><font color="#E5E5E5"> then call get on</font>

103
00:04:45,949 --> 00:04:51,680
property descriptor<font color="#CCCCCC"> and what get on</font>

104
00:04:48,319 --> 00:04:53,479
<font color="#E5E5E5">property descriptor does is it returns a</font>

105
00:04:51,680 --> 00:04:55,939
descriptor<font color="#E5E5E5"> which is like an</font><font color="#CCCCCC"> object</font>

106
00:04:53,479 --> 00:04:58,550
literal<font color="#CCCCCC"> and it defines what that object</font>

107
00:04:55,939 --> 00:05:00,710
<font color="#E5E5E5">property can do so it can it</font><font color="#CCCCCC"> will say if</font>

108
00:04:58,550 --> 00:05:02,749
it's configurable<font color="#CCCCCC"> if it's enumerable</font><font color="#E5E5E5"> if</font>

109
00:05:00,710 --> 00:05:06,529
it has get is if it has setters<font color="#E5E5E5"> and</font>

110
00:05:02,749 --> 00:05:08,659
finally if<font color="#E5E5E5"> it's its value so he calls</font>

111
00:05:06,529 --> 00:05:10,669
get on property descriptor<font color="#E5E5E5"> with the</font>

112
00:05:08,659 --> 00:05:13,339
first argument<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the object that he</font>

113
00:05:10,669 --> 00:05:17,150
wants<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change to get the descriptor of</font>

114
00:05:13,339 --> 00:05:18,919
sorry<font color="#CCCCCC"> so here he passes the object</font>

115
00:05:17,150 --> 00:05:22,399
literal again with the constructor

116
00:05:18,919 --> 00:05:24,229
property<font color="#E5E5E5"> he uses get prototype off which</font>

117
00:05:22,399 --> 00:05:27,499
gets the prototype of the object<font color="#E5E5E5"> that</font>

118
00:05:24,229 --> 00:05:29,300
you specify<font color="#E5E5E5"> and he passes the sub</font>

119
00:05:27,499 --> 00:05:32,120
function<font color="#CCCCCC"> shocker</font><font color="#E5E5E5"> again as a means to get</font>

120
00:05:29,300 --> 00:05:34,219
a<font color="#E5E5E5"> function so that gets the function</font>

121
00:05:32,120 --> 00:05:38,870
prototype<font color="#CCCCCC"> as the first argument</font><font color="#E5E5E5"> to the</font>

122
00:05:34,219 --> 00:05:41,419
get on property descriptor<font color="#CCCCCC"> and when the</font>

123
00:05:38,870 --> 00:05:43,370
<font color="#CCCCCC">the</font><font color="#E5E5E5"> next augment in the get on property</font>

124
00:05:41,419 --> 00:05:45,318
descriptor function is the string

125
00:05:43,370 --> 00:05:47,509
constructor so he<font color="#CCCCCC"> passes</font><font color="#E5E5E5"> that as a</font>

126
00:05:45,319 --> 00:05:50,060
second argument so this gets the

127
00:05:47,509 --> 00:05:52,520
property descriptor<font color="#E5E5E5"> for the object</font>

128
00:05:50,060 --> 00:05:56,330
literal for the function prototype<font color="#CCCCCC"> and</font>

129
00:05:52,520 --> 00:05:58,998
the string constructor<font color="#E5E5E5"> so then value has</font>

130
00:05:56,330 --> 00:06:02,479
a<font color="#E5E5E5"> reference to the function constructor</font>

131
00:05:58,999 --> 00:06:05,180
<font color="#E5E5E5">because the descriptor as I said returns</font>

132
00:06:02,479 --> 00:06:07,580
an<font color="#E5E5E5"> object literal and has various</font>

133
00:06:05,180 --> 00:06:09,979
properties and the value has the value

134
00:06:07,580 --> 00:06:12,159
<font color="#E5E5E5">of that object property so a value will</font>

135
00:06:09,979 --> 00:06:15,349
actually be<font color="#E5E5E5"> the function constructor</font>

136
00:06:12,159 --> 00:06:16,998
then the generic call method accepts

137
00:06:15,349 --> 00:06:25,688
<font color="#CCCCCC">another argument so this is the second</font>

138
00:06:16,999 --> 00:06:30,919
argument of the generic call method yeah

139
00:06:25,689 --> 00:06:33,279
so that method<font color="#E5E5E5"> that argument assigns the</font>

140
00:06:30,919 --> 00:06:36,258
object that you want<font color="#CCCCCC"> the function to</font>

141
00:06:33,279 --> 00:06:38,000
execute<font color="#E5E5E5"> with but for</font><font color="#CCCCCC"> the function</font>

142
00:06:36,259 --> 00:06:41,240
<font color="#E5E5E5">constructor this is</font><font color="#CCCCCC"> not poor important</font>

143
00:06:38,000 --> 00:06:43,550
it executes on the window so<font color="#CCCCCC"> he provides</font>

144
00:06:41,240 --> 00:06:46,220
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> as a minimal value</font><font color="#E5E5E5"> for</font>

145
00:06:43,550 --> 00:06:49,629
so it's not important<font color="#E5E5E5"> then he passes the</font>

146
00:06:46,220 --> 00:06:52,310
<font color="#E5E5E5">stringer</font><font color="#CCCCCC"> one which will</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> the</font>

147
00:06:49,629 --> 00:06:58,550
function<font color="#CCCCCC"> constructor generator way at</font>

148
00:06:52,310 --> 00:07:01,460
one<font color="#CCCCCC"> and then bypass the</font><font color="#E5E5E5"> Sun box angular</font>

149
00:06:58,550 --> 00:07:03,440
improve the<font color="#CCCCCC"> someone's quite a bit</font>

150
00:07:01,460 --> 00:07:04,729
they<font color="#E5E5E5"> created an insurer</font><font color="#CCCCCC"> if remember</font><font color="#E5E5E5"> him</font>

151
00:07:03,440 --> 00:07:07,099
<font color="#E5E5E5">well they improved the</font><font color="#CCCCCC"> insurer safe</font>

152
00:07:04,729 --> 00:07:08,599
<font color="#E5E5E5">member name function so this time they</font>

153
00:07:07,099 --> 00:07:11,060
were checking<font color="#CCCCCC"> for these</font><font color="#E5E5E5"> properties</font>

154
00:07:08,599 --> 00:07:12,860
directly<font color="#E5E5E5"> so if there was a defying</font>

155
00:07:11,060 --> 00:07:15,530
getter<font color="#CCCCCC"> defined setter</font><font color="#E5E5E5"> lookup getter</font>

156
00:07:12,860 --> 00:07:19,789
<font color="#E5E5E5">lookup setter or the</font><font color="#CCCCCC"> pro tour property</font>

157
00:07:15,530 --> 00:07:21,919
<font color="#E5E5E5">and it would throw an exception and they</font>

158
00:07:19,789 --> 00:07:24,919
also added<font color="#E5E5E5"> a new function called</font><font color="#CCCCCC"> ensure</font>

159
00:07:21,919 --> 00:07:27,859
a safe object so this is<font color="#E5E5E5"> quite a cool</font>

160
00:07:24,919 --> 00:07:30,948
<font color="#E5E5E5">function</font><font color="#CCCCCC"> it first checks</font><font color="#E5E5E5"> to see if the</font>

161
00:07:27,860 --> 00:07:32,810
object<font color="#CCCCCC"> is truth e or not so this</font><font color="#E5E5E5"> will</font>

162
00:07:30,949 --> 00:07:34,520
rule out non undefined for example

163
00:07:32,810 --> 00:07:39,259
because you<font color="#E5E5E5"> can't get a property</font><font color="#CCCCCC"> on on a</font>

164
00:07:34,520 --> 00:07:42,020
null or undefined object<font color="#E5E5E5"> and they check</font>

165
00:07:39,259 --> 00:07:44,240
the constructor property<font color="#E5E5E5"> so this is a</font>

166
00:07:42,020 --> 00:07:46,310
really cool check<font color="#E5E5E5"> because the</font>

167
00:07:44,240 --> 00:07:49,490
constructor<font color="#E5E5E5"> property of the function</font>

168
00:07:46,310 --> 00:07:52,069
constructor is always itself so this

169
00:07:49,490 --> 00:07:53,780
detects the function constructor<font color="#E5E5E5"> so this</font>

170
00:07:52,069 --> 00:07:56,270
is a really cool<font color="#E5E5E5"> check that works cross</font>

171
00:07:53,780 --> 00:07:58,008
<font color="#CCCCCC">them in</font><font color="#E5E5E5"> and they would throw an</font>

172
00:07:56,270 --> 00:07:59,810
exception<font color="#E5E5E5"> if you've got access to the</font>

173
00:07:58,009 --> 00:08:01,490
function constructor<font color="#E5E5E5"> because</font><font color="#CCCCCC"> as we've</font>

174
00:07:59,810 --> 00:08:05,449
<font color="#CCCCCC">seen with</font><font color="#E5E5E5"> Mario's exploit you can</font>

175
00:08:01,490 --> 00:08:07,759
execute arbitrary code<font color="#E5E5E5"> then they have a</font>

176
00:08:05,449 --> 00:08:10,370
similar<font color="#E5E5E5"> check for the window object</font><font color="#CCCCCC"> so</font>

177
00:08:07,759 --> 00:08:12,349
they use the window property and compare

178
00:08:10,370 --> 00:08:14,060
it to<font color="#E5E5E5"> see if it matches itself and this</font>

179
00:08:12,349 --> 00:08:15,979
will detect<font color="#E5E5E5"> the window and this also</font>

180
00:08:14,060 --> 00:08:20,000
works<font color="#E5E5E5"> cross them in so it's a really</font>

181
00:08:15,979 --> 00:08:23,599
cool check and they also check<font color="#CCCCCC"> for a Dom</font>

182
00:08:20,000 --> 00:08:25,729
<font color="#CCCCCC">node</font><font color="#E5E5E5"> so if this</font><font color="#CCCCCC"> condition is</font><font color="#E5E5E5"> true then</font>

183
00:08:23,599 --> 00:08:27,710
<font color="#CCCCCC">it will be detected as a Dom node so</font>

184
00:08:25,729 --> 00:08:30,110
that<font color="#CCCCCC"> could be</font><font color="#E5E5E5"> a document it could be</font>

185
00:08:27,710 --> 00:08:32,718
<font color="#E5E5E5">document up body or an image</font><font color="#CCCCCC"> object</font>

186
00:08:30,110 --> 00:08:35,810
<font color="#E5E5E5">whatever just a Dom</font><font color="#CCCCCC"> node and it will</font>

187
00:08:32,719 --> 00:08:38,029
<font color="#E5E5E5">throw an exception now finally they</font>

188
00:08:35,809 --> 00:08:41,029
check the object to see if it matches

189
00:08:38,029 --> 00:08:43,279
<font color="#E5E5E5">the object constructor so they do this</font>

190
00:08:41,029 --> 00:08:44,870
<font color="#CCCCCC">because the constructor of the object</font>

191
00:08:43,279 --> 00:08:47,360
constructor<font color="#E5E5E5"> is in fact the function</font>

192
00:08:44,870 --> 00:08:49,970
constructor<font color="#E5E5E5"> so they compare it</font><font color="#CCCCCC"> directly</font>

193
00:08:47,360 --> 00:08:51,560
with the object constructor<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to</font>

194
00:08:49,970 --> 00:08:55,180
<font color="#E5E5E5">detect it because this was the only way</font>

195
00:08:51,560 --> 00:08:55,180
they<font color="#CCCCCC"> could come up</font><font color="#E5E5E5"> with with doing that</font>

196
00:08:56,620 --> 00:09:01,970
then we had a bit of<font color="#E5E5E5"> a sandbox party me</font>

197
00:09:00,380 --> 00:09:05,689
<font color="#CCCCCC">yam</font><font color="#E5E5E5"> Mateus</font>

198
00:09:01,970 --> 00:09:07,490
<font color="#E5E5E5">Gabor</font><font color="#CCCCCC"> and Ian</font><font color="#E5E5E5"> all broke the sandbox and</font>

199
00:09:05,690 --> 00:09:09,800
<font color="#E5E5E5">I did a blog</font><font color="#CCCCCC"> post about my</font><font color="#E5E5E5"> particular</font>

200
00:09:07,490 --> 00:09:11,780
sandbox escape<font color="#CCCCCC"> so notice this is</font><font color="#E5E5E5"> in the</font>

201
00:09:09,800 --> 00:09:16,490
reflecting context it's not<font color="#CCCCCC"> a Dom based</font>

202
00:09:11,780 --> 00:09:20,060
vector but what my sandbox<font color="#CCCCCC"> Escape boiled</font>

203
00:09:16,490 --> 00:09:24,650
down to was<font color="#CCCCCC"> I</font><font color="#E5E5E5"> modified the straw the</font>

204
00:09:20,060 --> 00:09:26,660
string prototype I<font color="#E5E5E5"> changed the char</font><font color="#CCCCCC"> up</font>

205
00:09:24,650 --> 00:09:29,449
function<font color="#CCCCCC"> of</font><font color="#E5E5E5"> every string</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> in</font>

206
00:09:26,660 --> 00:09:31,310
<font color="#E5E5E5">JavaScript and what the char up function</font>

207
00:09:29,450 --> 00:09:34,720
<font color="#E5E5E5">normally does is return a single</font>

208
00:09:31,310 --> 00:09:38,209
character<font color="#CCCCCC"> but what I did was overall the</font>

209
00:09:34,720 --> 00:09:40,460
string prototype method char<font color="#CCCCCC"> out so</font>

210
00:09:38,210 --> 00:09:43,160
every string method now had this poison

211
00:09:40,460 --> 00:09:46,130
function<font color="#E5E5E5"> and what happens is instead of</font>

212
00:09:43,160 --> 00:09:47,930
returning a single character so normally

213
00:09:46,130 --> 00:09:49,490
when<font color="#E5E5E5"> you call char</font><font color="#CCCCCC"> out you can pass like</font>

214
00:09:47,930 --> 00:09:51,530
a number<font color="#E5E5E5"> and it will</font><font color="#CCCCCC"> return the</font>

215
00:09:49,490 --> 00:09:53,360
character at<font color="#CCCCCC"> that position</font><font color="#E5E5E5"> but what</font>

216
00:09:51,530 --> 00:09:55,880
<font color="#CCCCCC">actually happens is the string returns</font>

217
00:09:53,360 --> 00:09:58,520
<font color="#CCCCCC">all</font><font color="#E5E5E5"> of its value</font><font color="#CCCCCC"> and the joining</font>

218
00:09:55,880 --> 00:10:00,640
<font color="#E5E5E5">character whatever you specified and the</font>

219
00:09:58,520 --> 00:10:04,250
reason I did this<font color="#CCCCCC"> is because this is</font>

220
00:10:00,640 --> 00:10:07,520
<font color="#E5E5E5">because in angular when it</font><font color="#CCCCCC"> passes</font>

221
00:10:04,250 --> 00:10:09,920
<font color="#E5E5E5">identifiers it checks the result of this</font>

222
00:10:07,520 --> 00:10:11,449
<font color="#CCCCCC">function and</font><font color="#E5E5E5"> compares another character</font>

223
00:10:09,920 --> 00:10:13,880
to<font color="#E5E5E5"> see if it's less than</font><font color="#CCCCCC"> the results of</font>

224
00:10:11,450 --> 00:10:16,100
<font color="#E5E5E5">this function but it will</font><font color="#CCCCCC"> always be the</font>

225
00:10:13,880 --> 00:10:17,570
<font color="#CCCCCC">case for a single character</font><font color="#E5E5E5"> so you can</font>

226
00:10:16,100 --> 00:10:19,760
<font color="#CCCCCC">imagine they have some cord like</font>

227
00:10:17,570 --> 00:10:21,410
<font color="#CCCCCC">checking to see if</font><font color="#E5E5E5"> a is less</font><font color="#CCCCCC"> than this</font>

228
00:10:19,760 --> 00:10:24,800
and it will<font color="#CCCCCC"> always be the case because</font>

229
00:10:21,410 --> 00:10:27,829
<font color="#E5E5E5">it's a longer character a longer string</font>

230
00:10:24,800 --> 00:10:30,170
<font color="#E5E5E5">and so once we've</font><font color="#CCCCCC"> done that then we can</font>

231
00:10:27,830 --> 00:10:31,520
call the eval function<font color="#E5E5E5"> and the reason we</font>

232
00:10:30,170 --> 00:10:34,099
need<font color="#CCCCCC"> to call the eval function is</font>

233
00:10:31,520 --> 00:10:36,710
<font color="#E5E5E5">because we've broke the parser so now we</font>

234
00:10:34,100 --> 00:10:39,140
need<font color="#E5E5E5"> to get it to execute again so that</font>

235
00:10:36,710 --> 00:10:41,390
we can bypass the<font color="#E5E5E5"> sambars so the dollar</font>

236
00:10:39,140 --> 00:10:44,449
eval function is like an eval function

237
00:10:41,390 --> 00:10:47,660
in JavaScript<font color="#CCCCCC"> only it works in angular</font>

238
00:10:44,450 --> 00:10:51,800
<font color="#E5E5E5">so then</font><font color="#CCCCCC"> angler now thinks that that</font>

239
00:10:47,660 --> 00:10:53,870
string is an identifier<font color="#E5E5E5"> so we can</font>

240
00:10:51,800 --> 00:10:58,280
execute arbitrary code and bypass the

241
00:10:53,870 --> 00:11:00,860
<font color="#E5E5E5">sandbox angular decided to leave the</font>

242
00:10:58,280 --> 00:11:04,520
party<font color="#CCCCCC"> take the toys home and remove the</font>

243
00:11:00,860 --> 00:11:08,450
sandbox in version 1.6<font color="#E5E5E5"> you can be if you</font>

244
00:11:04,520 --> 00:11:09,310
<font color="#CCCCCC">liked that sparked my forum is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> full</font>

245
00:11:08,450 --> 00:11:11,990
over though

246
00:11:09,310 --> 00:11:16,489
what about<font color="#E5E5E5"> under the context what about</font>

247
00:11:11,990 --> 00:11:19,190
<font color="#E5E5E5">a Dom based context after my talk in</font>

248
00:11:16,490 --> 00:11:21,380
London about<font color="#E5E5E5"> JSON hijacking</font><font color="#CCCCCC"> Lewis</font>

249
00:11:19,190 --> 00:11:24,110
<font color="#E5E5E5">mentioned to me that angular</font><font color="#CCCCCC"> execute</font>

250
00:11:21,380 --> 00:11:27,500
expressions in an order by filter which

251
00:11:24,110 --> 00:11:29,210
I found<font color="#E5E5E5"> really fascinating</font><font color="#CCCCCC"> he did a blog</font>

252
00:11:27,500 --> 00:11:32,060
<font color="#CCCCCC">post</font><font color="#E5E5E5"> about it which you can find there</font>

253
00:11:29,210 --> 00:11:34,070
with some code samples<font color="#E5E5E5"> but basically</font>

254
00:11:32,060 --> 00:11:35,900
what<font color="#CCCCCC"> it boils</font><font color="#E5E5E5"> down to is a developer</font>

255
00:11:34,070 --> 00:11:37,850
might<font color="#E5E5E5"> introduce something into the score</font>

256
00:11:35,900 --> 00:11:41,780
that takes data<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> location dot</font>

257
00:11:37,850 --> 00:11:45,410
hash and once they've got<font color="#CCCCCC"> that data in</font>

258
00:11:41,780 --> 00:11:49,910
an<font color="#E5E5E5"> NG repeat expression or whatever you</font>

259
00:11:45,410 --> 00:11:53,030
call<font color="#CCCCCC"> it</font><font color="#E5E5E5"> there they will then so you loop</font>

260
00:11:49,910 --> 00:11:56,870
through the friends<font color="#E5E5E5"> array so friends is</font>

261
00:11:53,030 --> 00:11:59,360
an array of objects and the pipe

262
00:11:56,870 --> 00:12:02,810
operator<font color="#CCCCCC"> normally in</font><font color="#E5E5E5"> JavaScript is a</font>

263
00:11:59,360 --> 00:12:06,020
bitwise or operation<font color="#CCCCCC"> well in angular</font><font color="#E5E5E5"> the</font>

264
00:12:02,810 --> 00:12:07,609
pipe operator is a filter operation<font color="#E5E5E5"> so</font>

265
00:12:06,020 --> 00:12:10,550
what you're saying is you take the

266
00:12:07,610 --> 00:12:13,190
<font color="#E5E5E5">friends</font><font color="#CCCCCC"> our air with a array of friends</font>

267
00:12:10,550 --> 00:12:15,949
and objects pass it<font color="#E5E5E5"> to the order by</font>

268
00:12:13,190 --> 00:12:18,380
<font color="#E5E5E5">filter the colon signifies the argument</font>

269
00:12:15,950 --> 00:12:21,890
that<font color="#CCCCCC"> you want to pass to the</font><font color="#E5E5E5"> order by</font>

270
00:12:18,380 --> 00:12:24,920
<font color="#E5E5E5">filter so here we the order by is passed</font>

271
00:12:21,890 --> 00:12:26,930
the<font color="#E5E5E5"> location to hash so you use it for</font>

272
00:12:24,920 --> 00:12:31,069
sorting<font color="#E5E5E5"> data so you could sort by</font>

273
00:12:26,930 --> 00:12:34,760
<font color="#E5E5E5">telephone number by name</font><font color="#CCCCCC"> etc so it's a</font>

274
00:12:31,070 --> 00:12:37,370
<font color="#E5E5E5">convenient way of sorting data and what</font>

275
00:12:34,760 --> 00:12:39,860
I found was that<font color="#CCCCCC"> angle is executing</font><font color="#E5E5E5"> cord</font>

276
00:12:37,370 --> 00:12:43,340
here but the previous<font color="#E5E5E5"> unboxer skips</font>

277
00:12:39,860 --> 00:12:45,410
didn't work and interestingly the

278
00:12:43,340 --> 00:12:47,930
<font color="#CCCCCC">Curly's that are normally required in us</font>

279
00:12:45,410 --> 00:12:51,079
angular expressions<font color="#E5E5E5"> are not required</font>

280
00:12:47,930 --> 00:12:53,420
here<font color="#CCCCCC"> the most</font><font color="#E5E5E5"> likely</font><font color="#CCCCCC"> target for this</font>

281
00:12:51,080 --> 00:12:55,670
will be a in<font color="#CCCCCC"> a Dom based context using</font>

282
00:12:53,420 --> 00:12:58,150
<font color="#E5E5E5">location to hash because</font><font color="#CCCCCC"> it provides a</font>

283
00:12:55,670 --> 00:12:59,810
convenient<font color="#E5E5E5"> way for the developer</font><font color="#CCCCCC"> to</font>

284
00:12:58,150 --> 00:13:04,670
change the state<font color="#CCCCCC"> of the application</font>

285
00:12:59,810 --> 00:13:07,010
<font color="#CCCCCC">without refreshing the page so from one</font>

286
00:13:04,670 --> 00:13:09,800
<font color="#E5E5E5">point zero</font><font color="#CCCCCC"> point one to one point</font><font color="#E5E5E5"> two</font>

287
00:13:07,010 --> 00:13:12,740
<font color="#CCCCCC">point</font><font color="#E5E5E5"> two three existing sandbox</font><font color="#CCCCCC"> of</font>

288
00:13:09,800 --> 00:13:14,719
skips work but<font color="#E5E5E5"> anything greater than one</font>

289
00:13:12,740 --> 00:13:17,810
point<font color="#CCCCCC"> two</font><font color="#E5E5E5"> point two three they don't</font>

290
00:13:14,720 --> 00:13:21,620
work<font color="#CCCCCC"> so guess</font><font color="#E5E5E5"> what we need new sandbox</font>

291
00:13:17,810 --> 00:13:23,138
<font color="#CCCCCC">the skips</font><font color="#E5E5E5"> so the first question</font><font color="#CCCCCC"> they</font>

292
00:13:21,620 --> 00:13:26,290
<font color="#CCCCCC">asked myself</font><font color="#E5E5E5"> in this context</font>

293
00:13:23,139 --> 00:13:29,199
is what properties are<font color="#CCCCCC"> available to me</font>

294
00:13:26,290 --> 00:13:32,410
so in this sandbox environment why are

295
00:13:29,199 --> 00:13:34,748
these previous publicly<font color="#E5E5E5"> known sandbox</font>

296
00:13:32,410 --> 00:13:37,499
<font color="#CCCCCC">escape not working in this context</font><font color="#E5E5E5"> so</font>

297
00:13:34,749 --> 00:13:42,100
what properties were available to<font color="#CCCCCC"> me so</font>

298
00:13:37,499 --> 00:13:44,079
<font color="#CCCCCC">in some box card</font><font color="#E5E5E5"> I got</font><font color="#CCCCCC"> a I extracted all</font>

299
00:13:42,100 --> 00:13:46,720
the<font color="#E5E5E5"> angular sauce got all the keywords</font>

300
00:13:44,079 --> 00:13:51,910
<font color="#CCCCCC">out of the</font><font color="#E5E5E5"> angular sauce and JavaScript</font>

301
00:13:46,720 --> 00:13:55,089
keywords<font color="#E5E5E5"> and then I went through every</font>

302
00:13:51,910 --> 00:13:57,488
property modified the string prototype

303
00:13:55,089 --> 00:13:59,290
with and then prefixed it with an X and

304
00:13:57,489 --> 00:14:00,939
<font color="#E5E5E5">passed it property that I wanted to</font>

305
00:13:59,290 --> 00:14:02,910
inspect<font color="#E5E5E5"> and assigned it with the</font>

306
00:14:00,939 --> 00:14:05,559
property that<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to inspect</font>

307
00:14:02,910 --> 00:14:08,730
so this is a way<font color="#CCCCCC"> of getting</font><font color="#E5E5E5"> data out of</font>

308
00:14:05,559 --> 00:14:12,459
<font color="#E5E5E5">the sandbox environment in to the normal</font>

309
00:14:08,730 --> 00:14:13,449
JavaScript<font color="#E5E5E5"> environment</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> outside of</font>

310
00:14:12,459 --> 00:14:15,459
<font color="#CCCCCC">sandbox called</font>

311
00:14:13,449 --> 00:14:19,118
<font color="#E5E5E5">I could then loop through</font><font color="#CCCCCC"> this data and</font>

312
00:14:15,459 --> 00:14:23,049
gather the<font color="#CCCCCC"> information so this would</font>

313
00:14:19,119 --> 00:14:25,089
explain what what functions are

314
00:14:23,049 --> 00:14:29,529
<font color="#CCCCCC">available is a vowel available for</font>

315
00:14:25,089 --> 00:14:32,439
example<font color="#CCCCCC"> I also created some helper</font>

316
00:14:29,529 --> 00:14:33,999
methods so here we have a keys<font color="#E5E5E5"> function</font>

317
00:14:32,439 --> 00:14:37,629
that returns<font color="#CCCCCC"> the property names of an</font>

318
00:14:33,999 --> 00:14:41,799
object then<font color="#E5E5E5"> we have a log function that</font>

319
00:14:37,629 --> 00:14:46,179
logs the objects of the console but<font color="#CCCCCC"> what</font>

320
00:14:41,799 --> 00:14:48,489
happened was the<font color="#E5E5E5"> helper functions didn't</font>

321
00:14:46,179 --> 00:14:51,850
work<font color="#E5E5E5"> so</font><font color="#CCCCCC"> keys didn't work</font>

322
00:14:48,489 --> 00:14:55,089
logs didn't work<font color="#E5E5E5"> eval dollar eval didn't</font>

323
00:14:51,850 --> 00:14:57,279
<font color="#E5E5E5">work and watches didn't work and the</font>

324
00:14:55,089 --> 00:14:59,529
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> for this is interesting so you</font>

325
00:14:57,279 --> 00:15:01,239
might have<font color="#CCCCCC"> remembered the array of</font>

326
00:14:59,529 --> 00:15:03,959
<font color="#E5E5E5">objects on the</font><font color="#CCCCCC"> left</font><font color="#E5E5E5"> hand side</font><font color="#CCCCCC"> that was</font>

327
00:15:01,239 --> 00:15:06,910
<font color="#E5E5E5">being passed to the water by filter and</font>

328
00:15:03,959 --> 00:15:09,339
what happens is the sandbox code is

329
00:15:06,910 --> 00:15:12,160
executed in the scope of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> element</font><font color="#E5E5E5"> of</font>

330
00:15:09,339 --> 00:15:14,499
<font color="#CCCCCC">the</font><font color="#E5E5E5"> array so</font><font color="#CCCCCC"> you're no</font><font color="#E5E5E5"> longer in the</font>

331
00:15:12,160 --> 00:15:17,169
<font color="#CCCCCC">developer's scorp object you're in the</font>

332
00:15:14,499 --> 00:15:18,939
element<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> array so if you wanted</font>

333
00:15:17,169 --> 00:15:22,419
<font color="#E5E5E5">these helper methods to work for</font><font color="#CCCCCC"> example</font>

334
00:15:18,939 --> 00:15:25,238
then<font color="#E5E5E5"> you'd simply modify the array</font>

335
00:15:22,419 --> 00:15:27,459
elements and they would work but<font color="#E5E5E5"> this</font>

336
00:15:25,239 --> 00:15:31,899
<font color="#E5E5E5">would explain why eval wasn't working so</font>

337
00:15:27,459 --> 00:15:34,539
<font color="#CCCCCC">I started</font><font color="#E5E5E5"> hunting for books so the first</font>

338
00:15:31,899 --> 00:15:36,940
interesting<font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> I found</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> array</font>

339
00:15:34,539 --> 00:15:39,699
<font color="#E5E5E5">dot</font><font color="#CCCCCC"> C string can be called</font>

340
00:15:36,940 --> 00:15:42,730
I could call<font color="#CCCCCC"> arena</font><font color="#E5E5E5"> to string as a getter</font>

341
00:15:39,700 --> 00:15:44,500
<font color="#CCCCCC">and it calls the join function</font><font color="#E5E5E5"> which</font>

342
00:15:42,730 --> 00:15:47,620
you'd probably expect but it's<font color="#E5E5E5"> pretty</font>

343
00:15:44,500 --> 00:15:50,440
cool<font color="#E5E5E5"> so here we modify the function</font>

344
00:15:47,620 --> 00:15:52,360
cross<font color="#CCCCCC"> sack</font><font color="#E5E5E5"> add a new getter so define</font>

345
00:15:50,440 --> 00:15:54,790
gets it defines a getter on that<font color="#CCCCCC"> object</font>

346
00:15:52,360 --> 00:15:57,010
<font color="#E5E5E5">X is the property of that once I add the</font>

347
00:15:54,790 --> 00:16:02,110
getter on and the function I want<font color="#CCCCCC"> to</font>

348
00:15:57,010 --> 00:16:05,200
call is<font color="#CCCCCC"> array dot</font><font color="#E5E5E5"> to string and I define</font>

349
00:16:02,110 --> 00:16:07,210
a<font color="#E5E5E5"> join function on that</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> and the</font>

350
00:16:05,200 --> 00:16:09,990
John function is called when the getter

351
00:16:07,210 --> 00:16:12,160
is accessed this is pretty cool<font color="#E5E5E5"> because</font>

352
00:16:09,990 --> 00:16:14,590
<font color="#E5E5E5">it also works on window</font>

353
00:16:12,160 --> 00:16:16,780
so because window is an object you<font color="#CCCCCC"> can</font>

354
00:16:14,590 --> 00:16:20,440
do<font color="#CCCCCC"> to string equals array</font><font color="#E5E5E5"> dot to string</font>

355
00:16:16,780 --> 00:16:21,970
some<font color="#E5E5E5"> in JavaScript normally you're</font>

356
00:16:20,440 --> 00:16:26,230
working on the window<font color="#E5E5E5"> so this is really</font>

357
00:16:21,970 --> 00:16:28,540
window<font color="#CCCCCC"> to string and then I add another</font>

358
00:16:26,230 --> 00:16:30,670
<font color="#E5E5E5">property</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> joint and then assigns the</font>

359
00:16:28,540 --> 00:16:32,709
alert function<font color="#E5E5E5"> and then when to string</font>

360
00:16:30,670 --> 00:16:36,339
is<font color="#E5E5E5"> called on window</font><font color="#CCCCCC"> the function will be</font>

361
00:16:32,710 --> 00:16:39,070
executed<font color="#CCCCCC"> I couldn't</font><font color="#E5E5E5"> find a way of</font>

362
00:16:36,340 --> 00:16:42,760
<font color="#CCCCCC">passing arguments but</font><font color="#E5E5E5"> if you could then</font>

363
00:16:39,070 --> 00:16:44,530
<font color="#E5E5E5">you could bypass the sandbox so to find</font>

364
00:16:42,760 --> 00:16:49,240
my first sandbox escape<font color="#CCCCCC"> I looked at</font>

365
00:16:44,530 --> 00:16:51,040
version<font color="#E5E5E5"> 1.3 point</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> in that</font><font color="#CCCCCC"> big long</font>

366
00:16:49,240 --> 00:16:54,640
list of property names of that first<font color="#E5E5E5"> I</font>

367
00:16:51,040 --> 00:16:58,480
found that the function constructor was

368
00:16:54,640 --> 00:17:00,699
being called by the join method<font color="#E5E5E5"> that as</font>

369
00:16:58,480 --> 00:17:03,460
I showed you<font color="#CCCCCC"> just before</font><font color="#E5E5E5"> but what was</font>

370
00:17:00,700 --> 00:17:04,870
really<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> was I could get a</font>

371
00:17:03,460 --> 00:17:09,220
reference<font color="#E5E5E5"> to the object constructor</font>

372
00:17:04,869 --> 00:17:13,359
<font color="#E5E5E5">using this technique so here you might</font>

373
00:17:09,220 --> 00:17:16,270
notice that<font color="#CCCCCC"> I'm using an array in an</font>

374
00:17:13,359 --> 00:17:17,619
object accessor<font color="#E5E5E5"> so normally in</font><font color="#CCCCCC"> Java</font>

375
00:17:16,270 --> 00:17:19,990
<font color="#CCCCCC">scripts</font><font color="#E5E5E5"> you can have square</font><font color="#CCCCCC"> brackets</font>

376
00:17:17,619 --> 00:17:23,079
around a an<font color="#CCCCCC"> object property</font><font color="#E5E5E5"> to enable</font>

377
00:17:19,990 --> 00:17:25,810
you enable you to pass characters that

378
00:17:23,079 --> 00:17:28,060
normally<font color="#E5E5E5"> won't be allowed it will also</font>

379
00:17:25,810 --> 00:17:30,370
accept an expression but here<font color="#E5E5E5"> I</font><font color="#CCCCCC"> passing</font>

380
00:17:28,060 --> 00:17:32,230
are<font color="#E5E5E5"> in and what JavaScript does is it</font>

381
00:17:30,370 --> 00:17:35,129
converts<font color="#E5E5E5"> that into a string and then</font>

382
00:17:32,230 --> 00:17:37,570
<font color="#CCCCCC">that's fine</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a for an object property</font>

383
00:17:35,130 --> 00:17:40,210
but the ensure a safe member name

384
00:17:37,570 --> 00:17:43,810
<font color="#E5E5E5">function is checking</font><font color="#CCCCCC"> for prata</font>

385
00:17:40,210 --> 00:17:46,390
but<font color="#CCCCCC"> I pass an array and the ensure safe</font>

386
00:17:43,810 --> 00:17:48,550
member name<font color="#E5E5E5"> function is use these triple</font>

387
00:17:46,390 --> 00:17:50,559
equals so it's come it's comparing for

388
00:17:48,550 --> 00:17:53,139
<font color="#E5E5E5">the string and it's</font><font color="#CCCCCC"> also convert</font>

389
00:17:50,559 --> 00:17:56,259
<font color="#CCCCCC">purring</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> tag</font><font color="#E5E5E5"> so because I pass an</font>

390
00:17:53,139 --> 00:17:58,539
<font color="#CCCCCC">array it is</font><font color="#E5E5E5"> an array so it's not a</font>

391
00:17:56,259 --> 00:18:01,179
string<font color="#E5E5E5"> even though the string when it</font>

392
00:17:58,539 --> 00:18:03,039
when<font color="#CCCCCC"> it gets converted</font><font color="#E5E5E5"> is proton so this</font>

393
00:18:01,179 --> 00:18:06,850
bypasses the<font color="#CCCCCC"> insurers safer member name</font>

394
00:18:03,039 --> 00:18:09,179
<font color="#E5E5E5">function so once I've got that I can get</font>

395
00:18:06,850 --> 00:18:14,289
the on<font color="#E5E5E5"> property descriptor function and</font>

396
00:18:09,179 --> 00:18:16,570
then I can store a reference<font color="#E5E5E5"> to it</font><font color="#CCCCCC"> then</font>

397
00:18:14,289 --> 00:18:18,720
we can use the get on property

398
00:18:16,570 --> 00:18:21,789
descriptor<font color="#E5E5E5"> with the function prototype</font>

399
00:18:18,720 --> 00:18:24,460
<font color="#CCCCCC">so I call get on property descriptor I</font>

400
00:18:21,789 --> 00:18:26,769
use the sub function shortcut again to

401
00:18:24,460 --> 00:18:28,840
<font color="#CCCCCC">forget the</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> prototype so get on</font>

402
00:18:26,769 --> 00:18:30,249
property descriptor<font color="#CCCCCC"> ticks</font><font color="#E5E5E5"> the first</font>

403
00:18:28,840 --> 00:18:33,100
<font color="#E5E5E5">argument the object to the second</font>

404
00:18:30,249 --> 00:18:35,769
argument<font color="#E5E5E5"> the property so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> pass the</font>

405
00:18:33,100 --> 00:18:37,779
<font color="#E5E5E5">function</font><font color="#CCCCCC"> prototype and pass the string</font>

406
00:18:35,769 --> 00:18:40,419
constructor and this will get<font color="#E5E5E5"> me a</font>

407
00:18:37,779 --> 00:18:43,269
descriptor for the function constructor

408
00:18:40,419 --> 00:18:48,009
which is really useful<font color="#CCCCCC"> so I store that</font>

409
00:18:43,269 --> 00:18:51,039
in<font color="#E5E5E5"> Y to use letter</font><font color="#CCCCCC"> so Y will store the</font>

410
00:18:48,009 --> 00:18:54,039
object descriptor for<font color="#E5E5E5"> the function</font>

411
00:18:51,039 --> 00:18:57,820
constructor so now we need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find</font>

412
00:18:54,039 --> 00:18:59,320
property<font color="#E5E5E5"> and we need</font><font color="#CCCCCC"> defined property</font><font color="#E5E5E5"> so</font>

413
00:18:57,820 --> 00:19:02,230
that<font color="#CCCCCC"> we can overwrite the constructor</font>

414
00:18:59,320 --> 00:19:04,539
property so I store a<font color="#CCCCCC"> reference to</font>

415
00:19:02,230 --> 00:19:07,960
define property using<font color="#CCCCCC"> the same technique</font>

416
00:19:04,539 --> 00:19:09,460
with the array and then now we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> use</font>

417
00:19:07,960 --> 00:19:13,110
<font color="#CCCCCC">defined property to overwrite the</font>

418
00:19:09,460 --> 00:19:16,749
<font color="#E5E5E5">constructor property on every function</font>

419
00:19:13,110 --> 00:19:19,559
so<font color="#CCCCCC"> here I</font><font color="#E5E5E5"> called define property so D</font>

420
00:19:16,749 --> 00:19:22,809
contains<font color="#E5E5E5"> a</font><font color="#CCCCCC"> reference to the define</font>

421
00:19:19,559 --> 00:19:24,399
property function that function accepts

422
00:19:22,809 --> 00:19:26,590
<font color="#E5E5E5">three arguments the first argument is</font>

423
00:19:24,399 --> 00:19:28,600
<font color="#E5E5E5">the object so I passed this sub function</font>

424
00:19:26,590 --> 00:19:30,668
and get the function<font color="#CCCCCC"> prototype</font><font color="#E5E5E5"> again</font>

425
00:19:28,600 --> 00:19:32,799
<font color="#E5E5E5">then the constructor</font><font color="#CCCCCC"> is the property</font>

426
00:19:30,669 --> 00:19:34,929
<font color="#E5E5E5">that I want to change and the descriptor</font>

427
00:19:32,799 --> 00:19:37,720
<font color="#CCCCCC">is just an object</font><font color="#E5E5E5"> literal and I want to</font>

428
00:19:34,929 --> 00:19:40,869
change<font color="#E5E5E5"> this property to false but why do</font>

429
00:19:37,720 --> 00:19:43,360
I want to<font color="#E5E5E5"> do that well if you look at</font>

430
00:19:40,869 --> 00:19:45,699
<font color="#E5E5E5">the ensure a safe object function it has</font>

431
00:19:43,360 --> 00:19:48,248
<font color="#CCCCCC">a truth</font><font color="#E5E5E5"> you check and it's checking the</font>

432
00:19:45,700 --> 00:19:50,649
constructor to equal itself so I'm

433
00:19:48,249 --> 00:19:52,629
<font color="#CCCCCC">changing that value to false</font><font color="#E5E5E5"> so this</font>

434
00:19:50,649 --> 00:19:59,559
will skip that<font color="#E5E5E5"> check and</font><font color="#CCCCCC"> that exception</font>

435
00:19:52,629 --> 00:20:04,100
<font color="#E5E5E5">will not be from and now I can</font><font color="#CCCCCC"> reuse the</font>

436
00:19:59,559 --> 00:20:06,200
<font color="#CCCCCC">I can be used the descriptor</font>

437
00:20:04,100 --> 00:20:09,980
and value contains a reference<font color="#E5E5E5"> to the</font>

438
00:20:06,200 --> 00:20:12,650
function constructor so here we have the

439
00:20:09,980 --> 00:20:15,230
Y property that<font color="#E5E5E5"> I mentioned before this</font>

440
00:20:12,650 --> 00:20:17,860
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> descriptor the value property</font>

441
00:20:15,230 --> 00:20:20,450
refers to the function<font color="#CCCCCC"> constructor</font><font color="#E5E5E5"> and</font>

442
00:20:17,860 --> 00:20:22,129
if you call the function constructor

443
00:20:20,450 --> 00:20:23,690
with the string but you want<font color="#E5E5E5"> to call it</font>

444
00:20:22,130 --> 00:20:25,160
will generate a<font color="#E5E5E5"> new function and then we</font>

445
00:20:23,690 --> 00:20:28,600
can call<font color="#CCCCCC"> that and</font><font color="#E5E5E5"> that will bypass the</font>

446
00:20:25,160 --> 00:20:31,100
sandbox<font color="#E5E5E5"> so this is pretty cool</font>

447
00:20:28,600 --> 00:20:35,149
and it I<font color="#CCCCCC"> got through all that</font><font color="#E5E5E5"> trouble to</font>

448
00:20:31,100 --> 00:20:36,709
avoid the word constructor<font color="#E5E5E5"> so so the the</font>

449
00:20:35,150 --> 00:20:37,909
value property gets the function

450
00:20:36,710 --> 00:20:40,820
constructor<font color="#CCCCCC"> without mentioning</font>

451
00:20:37,909 --> 00:20:43,490
constructor because<font color="#CCCCCC"> now constructor is</font>

452
00:20:40,820 --> 00:20:44,080
false<font color="#E5E5E5"> so that's why</font><font color="#CCCCCC"> I got all</font><font color="#E5E5E5"> that</font>

453
00:20:43,490 --> 00:20:47,330
trouble

454
00:20:44,080 --> 00:20:49,158
<font color="#E5E5E5">so now this sandbox escape works on one</font>

455
00:20:47,330 --> 00:20:51,168
point<font color="#E5E5E5"> two point two four to one point</font>

456
00:20:49,159 --> 00:20:52,970
<font color="#E5E5E5">two point</font><font color="#CCCCCC"> two six</font><font color="#E5E5E5"> and versions one point</font>

457
00:20:51,169 --> 00:20:56,210
three<font color="#E5E5E5"> point zero to one point three</font>

458
00:20:52,970 --> 00:20:58,970
point one that was cool<font color="#CCCCCC"> but I wanted</font>

459
00:20:56,210 --> 00:21:02,360
<font color="#E5E5E5">more I wanted to or more versions of the</font>

460
00:20:58,970 --> 00:21:04,280
<font color="#E5E5E5">angular sandbox in this context</font><font color="#CCCCCC"> so I</font>

461
00:21:02,360 --> 00:21:07,490
thought why don't<font color="#E5E5E5"> we</font><font color="#CCCCCC"> attack the rewriter</font>

462
00:21:04,280 --> 00:21:11,210
<font color="#E5E5E5">and the rewriter simply rewrites your</font>

463
00:21:07,490 --> 00:21:14,419
JavaScript<font color="#E5E5E5"> as valid JavaScript within a</font>

464
00:21:11,210 --> 00:21:18,260
<font color="#E5E5E5">sum in a sandbox environment so that you</font>

465
00:21:14,419 --> 00:21:20,600
can't execute arbitrary code but what I

466
00:21:18,260 --> 00:21:23,299
noticed was<font color="#E5E5E5"> invalid JavaScript syntax</font>

467
00:21:20,600 --> 00:21:28,309
was<font color="#E5E5E5"> being rewritten as valid JavaScript</font>

468
00:21:23,299 --> 00:21:29,870
syntax<font color="#E5E5E5"> so here we have some</font><font color="#CCCCCC"> Curly's now</font>

469
00:21:28,309 --> 00:21:31,490
normally in<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> if you begin a</font>

470
00:21:29,870 --> 00:21:33,860
statement<font color="#CCCCCC"> with Curly's it's a block</font>

471
00:21:31,490 --> 00:21:36,280
statement<font color="#E5E5E5"> what you did you dev tools</font>

472
00:21:33,860 --> 00:21:40,399
console<font color="#E5E5E5"> wise to you it gets converted</font>

473
00:21:36,280 --> 00:21:43,039
<font color="#E5E5E5">into an object and angular also does the</font>

474
00:21:40,400 --> 00:21:44,419
<font color="#E5E5E5">same and converts this into an</font><font color="#CCCCCC"> object so</font>

475
00:21:43,039 --> 00:21:47,720
this is really an object<font color="#E5E5E5"> literal and</font>

476
00:21:44,419 --> 00:21:49,789
then I<font color="#CCCCCC"> used dot for</font><font color="#E5E5E5"> the property but</font>

477
00:21:47,720 --> 00:21:52,309
instead<font color="#CCCCCC"> of providing a valid dot</font><font color="#E5E5E5"> I use a</font>

478
00:21:49,789 --> 00:21:56,030
semicolon<font color="#CCCCCC"> I don't guess what</font><font color="#E5E5E5"> the rewrite</font>

479
00:21:52,309 --> 00:22:01,428
it is the rewriter<font color="#E5E5E5"> converts it into</font>

480
00:21:56,030 --> 00:22:04,760
valid JavaScript<font color="#CCCCCC"> and you can see the saw</font>

481
00:22:01,429 --> 00:22:07,190
heart you can see the semicolon in pink

482
00:22:04,760 --> 00:22:08,750
there<font color="#E5E5E5"> that's been</font><font color="#CCCCCC"> injected in the</font>

483
00:22:07,190 --> 00:22:11,480
rewritten<font color="#CCCCCC"> cord</font><font color="#E5E5E5"> as a valid JavaScript</font>

484
00:22:08,750 --> 00:22:15,049
property<font color="#E5E5E5"> so angular thinks that the</font>

485
00:22:11,480 --> 00:22:17,990
semicolon is a JavaScript property this

486
00:22:15,049 --> 00:22:21,168
<font color="#E5E5E5">is cool so what if we use quartz</font>

487
00:22:17,990 --> 00:22:23,149
so we're using invalid JavaScript syntax

488
00:22:21,169 --> 00:22:26,649
using<font color="#CCCCCC"> their double quarts of property</font>

489
00:22:23,149 --> 00:22:31,299
what<font color="#E5E5E5"> will angular do so I injected my</font>

490
00:22:26,649 --> 00:22:34,789
<font color="#CCCCCC">Curly's again with a double quote and</font>

491
00:22:31,299 --> 00:22:37,070
<font color="#E5E5E5">don't like Sarah</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> terminating quarter</font>

492
00:22:34,789 --> 00:22:38,539
columns<font color="#E5E5E5"> three to five but what's</font>

493
00:22:37,070 --> 00:22:40,520
<font color="#CCCCCC">interesting is that this is a lecture</font>

494
00:22:38,539 --> 00:22:44,120
<font color="#CCCCCC">it's not saying syntax error</font><font color="#E5E5E5"> as you</font>

495
00:22:40,520 --> 00:22:49,039
would probably<font color="#CCCCCC"> expect so all we need</font><font color="#E5E5E5"> to</font>

496
00:22:44,120 --> 00:22:51,320
do is balance the<font color="#E5E5E5"> quartz</font><font color="#CCCCCC"> may I present</font>

497
00:22:49,039 --> 00:22:53,840
to<font color="#E5E5E5"> you the smallest possible angular</font>

498
00:22:51,320 --> 00:22:55,879
sandbox<font color="#CCCCCC"> escape for version 1.2</font><font color="#E5E5E5"> point two</font>

499
00:22:53,840 --> 00:22:59,059
seven<font color="#E5E5E5"> and I challenge you to</font><font color="#CCCCCC"> find a</font>

500
00:22:55,880 --> 00:23:03,440
smaller one<font color="#E5E5E5"> so here we create an object</font>

501
00:22:59,059 --> 00:23:07,100
literal<font color="#CCCCCC"> use dark</font><font color="#E5E5E5"> use a double quote use</font>

502
00:23:03,440 --> 00:23:08,539
a comma operator<font color="#CCCCCC"> call it well continue</font>

503
00:23:07,100 --> 00:23:11,658
with another comma operator and then a

504
00:23:08,539 --> 00:23:16,490
double quotes and then angular<font color="#E5E5E5"> rewrites</font>

505
00:23:11,659 --> 00:23:18,890
this<font color="#CCCCCC"> chord like so so it breaks out of</font>

506
00:23:16,490 --> 00:23:21,230
<font color="#E5E5E5">the double quarts of in the hassle and</font>

507
00:23:18,890 --> 00:23:23,120
property call it calls alert one and

508
00:23:21,230 --> 00:23:25,940
then continues the string and<font color="#E5E5E5"> you can</font>

509
00:23:23,120 --> 00:23:32,629
see the rewritten<font color="#CCCCCC"> chord has</font><font color="#E5E5E5"> our alert</font>

510
00:23:25,940 --> 00:23:33,919
one<font color="#E5E5E5"> twice in the</font><font color="#CCCCCC"> rewritten cod but</font><font color="#E5E5E5"> it</font>

511
00:23:32,630 --> 00:23:37,850
didn't work<font color="#CCCCCC"> on the one</font><font color="#E5E5E5"> point three</font>

512
00:23:33,919 --> 00:23:39,200
branch<font color="#E5E5E5"> and I wondered why so I looked at</font>

513
00:23:37,850 --> 00:23:42,980
the rear<font color="#E5E5E5"> and cord in the one point three</font>

514
00:23:39,200 --> 00:23:45,799
branch<font color="#E5E5E5"> and I noticed the First Alert was</font>

515
00:23:42,980 --> 00:23:48,710
injected correctly but<font color="#E5E5E5"> not is the second</font>

516
00:23:45,799 --> 00:23:51,799
alert<font color="#E5E5E5"> is actually producing invalid</font>

517
00:23:48,710 --> 00:23:53,720
JavaScript syntax<font color="#E5E5E5"> and if it's invalid</font>

518
00:23:51,799 --> 00:23:55,908
syntax<font color="#E5E5E5"> there's no</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> chrome is going</font>

519
00:23:53,720 --> 00:24:00,140
to<font color="#E5E5E5"> execute that</font><font color="#CCCCCC"> so our sandbox escape</font>

520
00:23:55,909 --> 00:24:01,520
would<font color="#E5E5E5"> fail</font><font color="#CCCCCC"> on that branch so what we</font>

521
00:24:00,140 --> 00:24:03,590
need to<font color="#E5E5E5"> do is break out of the</font>

522
00:24:01,520 --> 00:24:05,299
<font color="#E5E5E5">parentheses</font><font color="#CCCCCC"> and comment out that invalid</font>

523
00:24:03,590 --> 00:24:08,779
syntax<font color="#E5E5E5"> and then we've got</font><font color="#CCCCCC"> a sandbox a</font>

524
00:24:05,299 --> 00:24:11,960
skip for that version<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> modified</font>

525
00:24:08,779 --> 00:24:13,970
the vector slightly to work on the

526
00:24:11,960 --> 00:24:15,649
entire<font color="#CCCCCC"> one point three branch so this</font>

527
00:24:13,970 --> 00:24:19,429
works on all the<font color="#CCCCCC"> versions of the one</font>

528
00:24:15,649 --> 00:24:21,590
point<font color="#CCCCCC"> three branch so we</font><font color="#E5E5E5"> inject I we</font>

529
00:24:19,429 --> 00:24:23,330
have a an object<font color="#CCCCCC"> literal</font><font color="#E5E5E5"> we used our</font>

530
00:24:21,590 --> 00:24:25,908
double quote break out the<font color="#E5E5E5"> parentheses</font>

531
00:24:23,330 --> 00:24:28,520
<font color="#E5E5E5">execute alert one and use a single</font><font color="#CCCCCC"> line</font>

532
00:24:25,909 --> 00:24:30,950
comment so normally in a classic XSS

533
00:24:28,520 --> 00:24:31,820
vector the double court<font color="#CCCCCC"> isn't required</font>

534
00:24:30,950 --> 00:24:35,090
<font color="#E5E5E5">at the end of the</font>

535
00:24:31,820 --> 00:24:36,860
<font color="#E5E5E5">comment</font><font color="#CCCCCC"> because it doesn't matter</font>

536
00:24:35,090 --> 00:24:38,840
<font color="#CCCCCC">because of the single line comment well</font>

537
00:24:36,860 --> 00:24:41,060
in angular<font color="#E5E5E5"> we use that double</font><font color="#CCCCCC"> quote to</font>

538
00:24:38,840 --> 00:24:43,310
<font color="#CCCCCC">keep the LexA happy so</font><font color="#E5E5E5"> I saw that it</font>

539
00:24:41,060 --> 00:24:44,149
will still work<font color="#E5E5E5"> and if you look at the</font>

540
00:24:43,310 --> 00:24:47,360
rear end<font color="#CCCCCC"> cord</font>

541
00:24:44,150 --> 00:24:49,190
you'll see the alert one is<font color="#E5E5E5"> called then</font>

542
00:24:47,360 --> 00:24:50,949
I<font color="#E5E5E5"> use the single line comment and</font>

543
00:24:49,190 --> 00:24:53,600
luckily for<font color="#E5E5E5"> us</font>

544
00:24:50,950 --> 00:24:55,280
angular puts all the rewritten<font color="#CCCCCC"> code on</font>

545
00:24:53,600 --> 00:24:57,260
<font color="#CCCCCC">one line so</font><font color="#E5E5E5"> we can</font><font color="#CCCCCC"> use a</font><font color="#E5E5E5"> single line</font>

546
00:24:55,280 --> 00:25:02,210
comment which comments out the invalid

547
00:24:57,260 --> 00:25:03,560
syntax and bypasses<font color="#E5E5E5"> the sandbox so I</font>

548
00:25:02,210 --> 00:25:05,510
like<font color="#CCCCCC"> to give you a demo now</font><font color="#E5E5E5"> and if</font>

549
00:25:03,560 --> 00:25:09,110
you've got<font color="#CCCCCC"> your</font><font color="#E5E5E5"> laptop open then you</font><font color="#CCCCCC"> can</font>

550
00:25:05,510 --> 00:25:11,270
<font color="#E5E5E5">play along with me</font><font color="#CCCCCC"> so if you</font><font color="#E5E5E5"> want to</font>

551
00:25:09,110 --> 00:25:16,510
<font color="#E5E5E5">visit ports with your half and labs net</font>

552
00:25:11,270 --> 00:25:16,510
<font color="#CCCCCC">slash demo I'm going to</font><font color="#E5E5E5"> use my VM</font>

553
00:25:24,150 --> 00:25:28,470
so here is the URL<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> want to</font>

554
00:25:26,790 --> 00:25:33,530
<font color="#CCCCCC">visit if you want to do it and here's</font>

555
00:25:28,470 --> 00:25:33,530
<font color="#CCCCCC">the vector so if you open up dev tools</font>

556
00:25:36,950 --> 00:25:46,530
<font color="#CCCCCC">and then click the sources tab and then</font>

557
00:25:44,640 --> 00:25:48,870
<font color="#E5E5E5">you want to</font><font color="#CCCCCC"> open up the CloudFlare</font>

558
00:25:46,530 --> 00:25:51,330
folder online<font color="#CCCCCC"> but</font><font color="#E5E5E5"> I'm here is just index</font>

559
00:25:48,870 --> 00:25:56,189
files<font color="#E5E5E5"> and then you want to open</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> the</font>

560
00:25:51,330 --> 00:25:57,689
angularjs file then if you hit ctrl F or

561
00:25:56,190 --> 00:25:59,550
command<font color="#E5E5E5"> F whatever they are prayer in</font>

562
00:25:57,690 --> 00:26:04,080
system<font color="#E5E5E5"> you're on and search for a new</font>

563
00:25:59,550 --> 00:26:06,690
space<font color="#E5E5E5"> function so this will tell you</font>

564
00:26:04,080 --> 00:26:09,210
<font color="#E5E5E5">this will take you to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> point in the</font>

565
00:26:06,690 --> 00:26:12,000
angular<font color="#CCCCCC"> source where they check to see</font>

566
00:26:09,210 --> 00:26:14,100
if CSP is active or not<font color="#E5E5E5"> so they call the</font>

567
00:26:12,000 --> 00:26:16,920
function constructor with the string

568
00:26:14,100 --> 00:26:18,270
arguments<font color="#E5E5E5"> to see if CSP is activated</font><font color="#CCCCCC"> so</font>

569
00:26:16,920 --> 00:26:21,170
we're not<font color="#CCCCCC"> interested in that</font><font color="#E5E5E5"> one we need</font>

570
00:26:18,270 --> 00:26:25,110
the<font color="#E5E5E5"> next one so I'll click search next</font>

571
00:26:21,170 --> 00:26:29,580
and now we need<font color="#E5E5E5"> to add a</font><font color="#CCCCCC"> breakpoint at</font><font color="#E5E5E5"> 1</font>

572
00:26:25,110 --> 00:26:32,250
1 1 9<font color="#E5E5E5"> 2 and then if you scroll across</font>

573
00:26:29,580 --> 00:26:34,860
our<font color="#CCCCCC"> cord is</font><font color="#E5E5E5"> actually going to be stored</font>

574
00:26:32,250 --> 00:26:37,850
on the in the<font color="#CCCCCC"> chord variable in this</font>

575
00:26:34,860 --> 00:26:40,229
version of angular<font color="#E5E5E5"> so now with it we've</font>

576
00:26:37,850 --> 00:26:44,189
added the<font color="#CCCCCC"> breakpoint we need to inject</font>

577
00:26:40,230 --> 00:26:47,850
<font color="#E5E5E5">our vector which is here so click on the</font>

578
00:26:44,190 --> 00:26:51,630
end of<font color="#E5E5E5"> the URL</font><font color="#CCCCCC"> inject</font><font color="#E5E5E5"> a hash up and</font>

579
00:26:47,850 --> 00:26:55,439
curly<font color="#CCCCCC"> class</font><font color="#E5E5E5"> curly dart double</font><font color="#CCCCCC"> quark</font>

580
00:26:51,630 --> 00:26:59,490
comma<font color="#E5E5E5"> oh it's opening</font><font color="#CCCCCC"> parenthesis 1</font>

581
00:26:55,440 --> 00:27:01,740
close parenthesis<font color="#CCCCCC"> comma</font><font color="#E5E5E5"> double quote and</font>

582
00:26:59,490 --> 00:27:04,050
then now we need to hit<font color="#CCCCCC"> return</font>

583
00:27:01,740 --> 00:27:07,220
so we've modified the hash but we need

584
00:27:04,050 --> 00:27:09,180
to reload<font color="#CCCCCC"> the page now saw</font><font color="#E5E5E5"> that the</font>

585
00:27:07,220 --> 00:27:13,140
debugger kicks in<font color="#E5E5E5"> and stops at that</font>

586
00:27:09,180 --> 00:27:15,060
<font color="#E5E5E5">break</font><font color="#CCCCCC"> point so hit reload and then</font>

587
00:27:13,140 --> 00:27:18,780
fingers crossed<font color="#E5E5E5"> prayer to the demo gods</font>

588
00:27:15,060 --> 00:27:23,520
yes<font color="#E5E5E5"> so we've got that break point</font><font color="#CCCCCC"> so if</font>

589
00:27:18,780 --> 00:27:25,860
you scroll across the chord variable now

590
00:27:23,520 --> 00:27:28,500
contains a string<font color="#E5E5E5"> that's got JavaScript</font>

591
00:27:25,860 --> 00:27:30,540
in it but what you<font color="#E5E5E5"> might notice</font><font color="#CCCCCC"> is it</font>

592
00:27:28,500 --> 00:27:33,330
doesn't<font color="#E5E5E5"> contain our vector that we've</font>

593
00:27:30,540 --> 00:27:36,000
injected and this is because<font color="#CCCCCC"> angular is</font>

594
00:27:33,330 --> 00:27:38,439
some boxing the<font color="#CCCCCC"> chord multiple times</font><font color="#E5E5E5"> for</font>

595
00:27:36,000 --> 00:27:40,630
every element<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> array</font>

596
00:27:38,440 --> 00:27:43,410
what we need to do is hit resume on the

597
00:27:40,630 --> 00:27:46,890
debugger five times in<font color="#CCCCCC"> order to see</font><font color="#E5E5E5"> our</font>

598
00:27:43,410 --> 00:27:54,970
rewritten code<font color="#E5E5E5"> so hit resume five times</font>

599
00:27:46,890 --> 00:27:57,400
<font color="#E5E5E5">one two three four five and now if we</font>

600
00:27:54,970 --> 00:28:00,160
<font color="#E5E5E5">scroll across to that variable you can</font>

601
00:27:57,400 --> 00:28:03,250
see our injecting<font color="#CCCCCC"> chord</font><font color="#E5E5E5"> appears in the</font>

602
00:28:00,160 --> 00:28:06,660
rewritten<font color="#E5E5E5"> output so then the next</font><font color="#CCCCCC"> time I</font>

603
00:28:03,250 --> 00:28:09,970
hit resume<font color="#E5E5E5"> we'll get a flurry of alerts</font>

604
00:28:06,660 --> 00:28:15,850
and<font color="#CCCCCC"> this is because it's been Sun boxed</font>

605
00:28:09,970 --> 00:28:19,200
multiple times cool<font color="#CCCCCC"> so if anybody tried</font>

606
00:28:15,850 --> 00:28:19,199
it<font color="#E5E5E5"> I hope you</font><font color="#CCCCCC"> had some</font><font color="#E5E5E5"> success</font>

607
00:28:19,470 --> 00:28:27,610
so I started hunting<font color="#E5E5E5"> for more books</font><font color="#CCCCCC"> I</font>

608
00:28:24,160 --> 00:28:29,500
started to look<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> 1.4 branch the</font>

609
00:28:27,610 --> 00:28:32,830
one point<font color="#E5E5E5"> one point</font><font color="#CCCCCC"> four branch was more</font>

610
00:28:29,500 --> 00:28:34,750
<font color="#E5E5E5">challenging the object constructor is</font>

611
00:28:32,830 --> 00:28:36,850
protected correctly now so I couldn't

612
00:28:34,750 --> 00:28:39,190
<font color="#CCCCCC">use the a rare trick with the prot or</font>

613
00:28:36,850 --> 00:28:42,580
property to<font color="#E5E5E5"> get a reference</font><font color="#CCCCCC"> to the</font>

614
00:28:39,190 --> 00:28:44,620
object constructor identifier<font color="#CCCCCC"> to check</font>

615
00:28:42,580 --> 00:28:48,310
correctly now so I couldn't<font color="#E5E5E5"> exercise the</font>

616
00:28:44,620 --> 00:28:50,679
V writer<font color="#E5E5E5"> so I thought maybe we</font><font color="#CCCCCC"> could</font>

617
00:28:48,310 --> 00:28:53,500
<font color="#E5E5E5">over act global variables so as I said</font>

618
00:28:50,680 --> 00:28:57,010
angular forces<font color="#CCCCCC"> a</font><font color="#E5E5E5"> scope into</font><font color="#CCCCCC"> the scorp</font>

619
00:28:53,500 --> 00:28:58,870
<font color="#CCCCCC">object</font><font color="#E5E5E5"> that the developer defines so</font>

620
00:28:57,010 --> 00:29:02,620
normally<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can't override global</font>

621
00:28:58,870 --> 00:29:04,620
variables but if we<font color="#E5E5E5"> use an object</font>

622
00:29:02,620 --> 00:29:08,439
literal<font color="#CCCCCC"> and we use Pro Tour de prata</font>

623
00:29:04,620 --> 00:29:11,290
product proto is the<font color="#E5E5E5"> wind or global</font>

624
00:29:08,440 --> 00:29:13,780
scope polluter<font color="#E5E5E5"> we assign that</font><font color="#CCCCCC"> to an</font>

625
00:29:11,290 --> 00:29:16,120
object literal and we use proton<font color="#CCCCCC"> our</font>

626
00:29:13,780 --> 00:29:18,220
<font color="#CCCCCC">proton is an important part</font><font color="#E5E5E5"> here so</font><font color="#CCCCCC"> we</font>

627
00:29:16,120 --> 00:29:20,739
assign prata to null<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that that object</font>

628
00:29:18,220 --> 00:29:23,620
<font color="#E5E5E5">does not inherit from any other object</font>

629
00:29:20,740 --> 00:29:25,920
and<font color="#CCCCCC"> we need this in</font><font color="#E5E5E5"> order to</font><font color="#CCCCCC"> keep the</font>

630
00:29:23,620 --> 00:29:28,120
<font color="#CCCCCC">assignment</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the global scope polluter</font>

631
00:29:25,920 --> 00:29:31,000
<font color="#E5E5E5">so the sort of it will work basically</font>

632
00:29:28,120 --> 00:29:33,429
<font color="#E5E5E5">and then we have an X property</font><font color="#CCCCCC"> that we</font>

633
00:29:31,000 --> 00:29:35,350
<font color="#E5E5E5">assign to</font><font color="#CCCCCC"> one two</font><font color="#E5E5E5"> three and we've got a</font>

634
00:29:33,430 --> 00:29:38,080
global<font color="#CCCCCC"> variable on window without</font>

635
00:29:35,350 --> 00:29:39,399
<font color="#E5E5E5">specifying window dot which</font><font color="#CCCCCC"> is pretty</font>

636
00:29:38,080 --> 00:29:43,120
cool<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that works in the</font><font color="#E5E5E5"> angular</font>

637
00:29:39,400 --> 00:29:46,330
sandbox this works on<font color="#CCCCCC"> older versions of</font>

638
00:29:43,120 --> 00:29:48,719
ie<font color="#CCCCCC"> um sorry it works on ie 11</font><font color="#E5E5E5"> and older</font>

639
00:29:46,330 --> 00:29:51,240
<font color="#CCCCCC">versions of Safari</font>

640
00:29:48,720 --> 00:29:52,800
the thing is we're<font color="#CCCCCC"> not really</font><font color="#E5E5E5"> getting a</font>

641
00:29:51,240 --> 00:29:54,210
global variable<font color="#CCCCCC"> we've got the</font><font color="#E5E5E5"> effects of</font>

642
00:29:52,800 --> 00:29:56,520
a global variable<font color="#CCCCCC"> but what we're</font>

643
00:29:54,210 --> 00:29:59,160
actually doing<font color="#CCCCCC"> is we're modifying the</font>

644
00:29:56,520 --> 00:30:01,110
global score<font color="#E5E5E5"> polluter prot attack</font><font color="#CCCCCC"> so we</font>

645
00:29:59,160 --> 00:30:03,510
can create new properties but we can't

646
00:30:01,110 --> 00:30:09,090
<font color="#E5E5E5">over our existing ones so I couldn't use</font>

647
00:30:03,510 --> 00:30:10,980
this for the hack<font color="#CCCCCC"> you might remember the</font>

648
00:30:09,090 --> 00:30:13,500
<font color="#CCCCCC">insurer safe object function</font><font color="#E5E5E5"> that I</font>

649
00:30:10,980 --> 00:30:15,570
showed<font color="#E5E5E5"> you earlier</font><font color="#CCCCCC"> so in angular</font><font color="#E5E5E5"> there's</font>

650
00:30:13,500 --> 00:30:17,730
an insurer safe object function<font color="#E5E5E5"> and it</font>

651
00:30:15,570 --> 00:30:20,669
checks<font color="#E5E5E5"> to see</font><font color="#CCCCCC"> if the object is truthy or</font>

652
00:30:17,730 --> 00:30:24,360
not so what I thought well what about<font color="#E5E5E5"> if</font>

653
00:30:20,670 --> 00:30:26,880
I provide<font color="#E5E5E5"> an object that is false so</font>

654
00:30:24,360 --> 00:30:30,360
here<font color="#CCCCCC"> I modify the boolean prot attack</font>

655
00:30:26,880 --> 00:30:33,390
and then assign<font color="#CCCCCC"> that to</font><font color="#E5E5E5"> the function</font>

656
00:30:30,360 --> 00:30:35,490
constructor so now we've got an<font color="#E5E5E5"> object</font>

657
00:30:33,390 --> 00:30:37,950
that is<font color="#E5E5E5"> false but allows the Turks acute</font>

658
00:30:35,490 --> 00:30:40,710
<font color="#CCCCCC">Arbit record so I thought maybe we could</font>

659
00:30:37,950 --> 00:30:43,950
use that to<font color="#E5E5E5"> skip that</font><font color="#CCCCCC"> security check and</font>

660
00:30:40,710 --> 00:30:46,290
it does work<font color="#E5E5E5"> but it will only work on</font>

661
00:30:43,950 --> 00:30:49,560
<font color="#E5E5E5">the false objects every other property</font>

662
00:30:46,290 --> 00:30:54,149
will be checked<font color="#CCCCCC"> so it will bypass the</font>

663
00:30:49,560 --> 00:30:57,540
<font color="#E5E5E5">sandbox another thought I had was maybe</font>

664
00:30:54,150 --> 00:30:59,130
<font color="#E5E5E5">overwrite the function prototype so here</font>

665
00:30:57,540 --> 00:31:01,830
I use the function constructor and

666
00:30:59,130 --> 00:31:04,350
modify its prototype<font color="#E5E5E5"> and assign it</font><font color="#CCCCCC"> to</font>

667
00:31:01,830 --> 00:31:07,220
null<font color="#CCCCCC"> and what that does</font><font color="#E5E5E5"> is removes the</font>

668
00:31:04,350 --> 00:31:10,889
constructor property<font color="#E5E5E5"> it's now undefined</font>

669
00:31:07,220 --> 00:31:12,660
and because we've<font color="#E5E5E5"> made that undefined we</font>

670
00:31:10,890 --> 00:31:15,720
need access to<font color="#E5E5E5"> the function constructor</font>

671
00:31:12,660 --> 00:31:18,090
in order to execute<font color="#CCCCCC"> chord so here we can</font>

672
00:31:15,720 --> 00:31:21,270
use<font color="#E5E5E5"> the function constructor dot prod</font>

673
00:31:18,090 --> 00:31:25,350
<font color="#E5E5E5">sack constructor and we can execute away</font>

674
00:31:21,270 --> 00:31:29,129
at one<font color="#CCCCCC"> or in angular there is no way</font><font color="#E5E5E5"> to</font>

675
00:31:25,350 --> 00:31:31,830
override the<font color="#E5E5E5"> function</font><font color="#CCCCCC"> prata to the</font>

676
00:31:29,130 --> 00:31:33,900
function constructor you could you can

677
00:31:31,830 --> 00:31:37,770
only modify every function

678
00:31:33,900 --> 00:31:40,170
so once you've modified unassigned<font color="#E5E5E5"> the</font>

679
00:31:37,770 --> 00:31:42,389
<font color="#CCCCCC">proto</font><font color="#E5E5E5"> property to null then constructor</font>

680
00:31:40,170 --> 00:31:45,240
is removed on every function<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that you</font>

681
00:31:42,390 --> 00:31:49,050
can't access<font color="#CCCCCC"> that later so the attack</font>

682
00:31:45,240 --> 00:31:52,500
<font color="#E5E5E5">failed but interestingly another thing I</font>

683
00:31:49,050 --> 00:31:55,680
found was<font color="#E5E5E5"> in Firefox 51 you can get the</font>

684
00:31:52,500 --> 00:32:00,330
caller using a<font color="#E5E5E5"> lookup getter so if we</font>

685
00:31:55,680 --> 00:32:02,450
have a function<font color="#E5E5E5"> of X which calls Y then</font>

686
00:32:00,330 --> 00:32:05,779
the<font color="#E5E5E5"> Y for</font>

687
00:32:02,450 --> 00:32:08,690
has a<font color="#CCCCCC"> look-up getter method we call</font><font color="#E5E5E5"> the</font>

688
00:32:05,779 --> 00:32:11,570
lookup getter<font color="#E5E5E5"> and get the call a getter</font>

689
00:32:08,690 --> 00:32:14,059
<font color="#CCCCCC">and then we can call the caller get it</font>

690
00:32:11,570 --> 00:32:16,668
and provide<font color="#CCCCCC"> Y as the</font><font color="#E5E5E5"> argument and this</font>

691
00:32:14,059 --> 00:32:19,309
will<font color="#E5E5E5"> return the caller for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> function</font>

692
00:32:16,669 --> 00:32:22,580
so this<font color="#E5E5E5"> is quite</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> cool hack to get a</font>

693
00:32:19,309 --> 00:32:24,259
caller without specifying<font color="#E5E5E5"> caller</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it</font>

694
00:32:22,580 --> 00:32:27,499
only works<font color="#E5E5E5"> on Firefox it doesn't work on</font>

695
00:32:24,259 --> 00:32:29,570
any<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the browser but we don't have any</font>

696
00:32:27,499 --> 00:32:33,080
functions in angular so I couldn't use

697
00:32:29,570 --> 00:32:36,700
<font color="#CCCCCC">this technique but you'll see this later</font>

698
00:32:33,080 --> 00:32:38,689
<font color="#CCCCCC">lookup Gator did prove very</font><font color="#E5E5E5"> interesting</font>

699
00:32:36,700 --> 00:32:41,359
<font color="#E5E5E5">another thought I have was maybe</font>

700
00:32:38,690 --> 00:32:44,629
<font color="#E5E5E5">aliasing the function constructor and</font>

701
00:32:41,359 --> 00:32:48,678
this is<font color="#E5E5E5"> quite a cool trick so we use the</font>

702
00:32:44,629 --> 00:32:51,049
sub function shortcut<font color="#E5E5E5"> again</font><font color="#CCCCCC"> we modify</font>

703
00:32:48,679 --> 00:32:53,450
the function<font color="#CCCCCC"> prototype we define a</font><font color="#E5E5E5"> new</font>

704
00:32:51,049 --> 00:32:55,549
getter<font color="#E5E5E5"> and then it and</font><font color="#CCCCCC"> the getter is X</font>

705
00:32:53,450 --> 00:32:58,309
and the function<font color="#E5E5E5"> that we want</font><font color="#CCCCCC"> to call is</font>

706
00:32:55,549 --> 00:33:03,889
value of now what that<font color="#CCCCCC"> does is</font><font color="#E5E5E5"> returns</font>

707
00:32:58,309 --> 00:33:06,799
the value<font color="#CCCCCC"> of the object so now the</font>

708
00:33:03,889 --> 00:33:08,869
function constructor has<font color="#E5E5E5"> a property of X</font>

709
00:33:06,799 --> 00:33:09,259
that allows<font color="#CCCCCC"> us to execute</font><font color="#E5E5E5"> our beauty</font>

710
00:33:08,869 --> 00:33:11,600
called

711
00:33:09,259 --> 00:33:15,220
<font color="#E5E5E5">without specifying function constructor</font>

712
00:33:11,600 --> 00:33:18,168
so you can see<font color="#CCCCCC"> where as</font><font color="#E5E5E5"> going with this</font>

713
00:33:15,220 --> 00:33:19,999
<font color="#CCCCCC">you could</font><font color="#E5E5E5"> also use</font><font color="#CCCCCC"> prot or the ProTour</font>

714
00:33:18,169 --> 00:33:23,450
get it in this way<font color="#E5E5E5"> so normally in</font>

715
00:33:19,999 --> 00:33:26,179
angular the ProTour getter<font color="#E5E5E5"> requires an</font>

716
00:33:23,450 --> 00:33:30,489
<font color="#CCCCCC">object and you can</font><font color="#E5E5E5"> provide</font><font color="#CCCCCC"> that object</font>

717
00:33:26,179 --> 00:33:32,809
using bind for example so this provides

718
00:33:30,489 --> 00:33:34,940
using<font color="#CCCCCC"> define getter provides a way of</font>

719
00:33:32,809 --> 00:33:38,899
<font color="#E5E5E5">doing that providing the object to the</font>

720
00:33:34,940 --> 00:33:41,239
function without<font color="#E5E5E5"> specifying</font><font color="#CCCCCC"> bind so here</font>

721
00:33:38,899 --> 00:33:45,139
we have an<font color="#CCCCCC"> object literal</font><font color="#E5E5E5"> we use define</font>

722
00:33:41,239 --> 00:33:49,489
getter we define nugatory of X we use

723
00:33:45,139 --> 00:33:51,799
lookup getter<font color="#E5E5E5"> get the proto getter so</font>

724
00:33:49,489 --> 00:33:53,989
when the getter is called

725
00:33:51,799 --> 00:33:55,609
the proto getter is called and<font color="#E5E5E5"> that will</font>

726
00:33:53,989 --> 00:33:58,759
return the<font color="#CCCCCC"> proto of the current object</font>

727
00:33:55,609 --> 00:34:02,119
so it's just<font color="#E5E5E5"> a cool way of providing an</font>

728
00:33:58,759 --> 00:34:06,109
object<font color="#E5E5E5"> that normally that</font><font color="#CCCCCC"> normally a</font>

729
00:34:02,119 --> 00:34:12,589
function requires that object but what I

730
00:34:06,109 --> 00:34:13,819
<font color="#E5E5E5">need he was can anybody guess see what</font>

731
00:34:12,589 --> 00:34:19,379
you see

732
00:34:13,820 --> 00:34:21,780
window leak<font color="#CCCCCC"> I need a window so I thought</font>

733
00:34:19,379 --> 00:34:24,690
maybe<font color="#E5E5E5"> I</font><font color="#CCCCCC"> could use lookup get</font><font color="#E5E5E5"> it in the</font>

734
00:34:21,780 --> 00:34:28,980
scope of window<font color="#E5E5E5"> so this is really cool</font>

735
00:34:24,690 --> 00:34:31,760
<font color="#E5E5E5">so what in</font><font color="#CCCCCC"> chrome what happens is when</font>

736
00:34:28,980 --> 00:34:35,060
you<font color="#CCCCCC"> ileus a function</font><font color="#E5E5E5"> like this</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> i</font>

737
00:34:31,760 --> 00:34:37,889
use<font color="#CCCCCC"> l and you assign it to</font><font color="#E5E5E5"> lookup getter</font>

738
00:34:35,060 --> 00:34:40,469
so I normally look<font color="#E5E5E5"> up getter is a member</font>

739
00:34:37,889 --> 00:34:41,909
function<font color="#E5E5E5"> so it requires an object using</font>

740
00:34:40,469 --> 00:34:44,819
a<font color="#E5E5E5"> reference to a function in this way</font>

741
00:34:41,909 --> 00:34:46,980
<font color="#E5E5E5">converts it to a general function and</font>

742
00:34:44,820 --> 00:34:50,369
when it's a general function<font color="#CCCCCC"> it loses</font>

743
00:34:46,980 --> 00:34:54,990
the<font color="#E5E5E5"> reference to the object</font><font color="#CCCCCC"> and now</font><font color="#E5E5E5"> we</font>

744
00:34:50,369 --> 00:34:56,940
can execute<font color="#CCCCCC"> that function with in the</font>

745
00:34:54,989 --> 00:34:59,399
scope of window so chrome is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only</font>

746
00:34:56,940 --> 00:35:02,700
browser<font color="#E5E5E5"> that does this so I call lookup</font>

747
00:34:59,400 --> 00:35:04,830
getter<font color="#E5E5E5"> ask for the document getter</font><font color="#CCCCCC"> I get</font>

748
00:35:02,700 --> 00:35:08,310
the document getter<font color="#E5E5E5"> call the document</font>

749
00:35:04,830 --> 00:35:11,250
getter<font color="#CCCCCC"> and that return the document then</font>

750
00:35:08,310 --> 00:35:13,200
default view we returns the current

751
00:35:11,250 --> 00:35:16,859
<font color="#E5E5E5">window so we've got our window leak and</font>

752
00:35:13,200 --> 00:35:20,069
then<font color="#E5E5E5"> I can execute away at one</font><font color="#CCCCCC"> define</font>

753
00:35:16,859 --> 00:35:22,560
<font color="#E5E5E5">Center also works in this way so again</font>

754
00:35:20,070 --> 00:35:25,680
our reference<font color="#CCCCCC"> I used defined setter this</font>

755
00:35:22,560 --> 00:35:27,810
time I<font color="#E5E5E5"> called define setter which works</font>

756
00:35:25,680 --> 00:35:30,290
on window<font color="#E5E5E5"> so it adds a new setter on</font>

757
00:35:27,810 --> 00:35:34,049
window of<font color="#E5E5E5"> Y and</font><font color="#CCCCCC"> calls a function alert</font>

758
00:35:30,290 --> 00:35:36,210
<font color="#E5E5E5">so when you</font><font color="#CCCCCC"> assign to Y then the alert</font>

759
00:35:34,050 --> 00:35:41,160
function will be called<font color="#E5E5E5"> and chrome will</font>

760
00:35:36,210 --> 00:35:44,880
be using the window<font color="#E5E5E5"> object but would</font>

761
00:35:41,160 --> 00:35:47,569
this work in<font color="#E5E5E5"> angular no it wouldn't and</font>

762
00:35:44,880 --> 00:35:51,359
the reason it wouldn't is because the

763
00:35:47,570 --> 00:35:54,510
score object is being forced<font color="#E5E5E5"> on the</font>

764
00:35:51,359 --> 00:35:56,880
function call and<font color="#CCCCCC"> so what we need to</font><font color="#E5E5E5"> do</font>

765
00:35:54,510 --> 00:35:58,980
is find a way<font color="#E5E5E5"> of forcing angular to</font>

766
00:35:56,880 --> 00:36:01,349
execute as a general function<font color="#E5E5E5"> not as a</font>

767
00:35:58,980 --> 00:36:02,970
member<font color="#CCCCCC"> function</font><font color="#E5E5E5"> so a member function is</font>

768
00:36:01,349 --> 00:36:04,560
when you call it from an<font color="#CCCCCC"> object</font><font color="#E5E5E5"> a</font>

769
00:36:02,970 --> 00:36:06,680
general function<font color="#CCCCCC"> is when</font><font color="#E5E5E5"> you've just</font>

770
00:36:04,560 --> 00:36:09,210
<font color="#E5E5E5">calling the function without an object</font>

771
00:36:06,680 --> 00:36:11,460
<font color="#E5E5E5">and what we need to</font><font color="#CCCCCC"> do we need to talk</font>

772
00:36:09,210 --> 00:36:14,490
<font color="#CCCCCC">about</font><font color="#E5E5E5"> direct and indirect calls because</font>

773
00:36:11,460 --> 00:36:16,440
<font color="#E5E5E5">we can use this technique</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> force</font>

774
00:36:14,490 --> 00:36:19,830
<font color="#E5E5E5">angular to executing as a general</font>

775
00:36:16,440 --> 00:36:22,490
function not as a<font color="#E5E5E5"> member function so of</font>

776
00:36:19,830 --> 00:36:25,950
direct calls<font color="#E5E5E5"> execute in the global scope</font>

777
00:36:22,490 --> 00:36:27,479
<font color="#E5E5E5">so if we have a wire property of global</font>

778
00:36:25,950 --> 00:36:29,759
so we start<font color="#E5E5E5"> to global</font>

779
00:36:27,480 --> 00:36:32,250
and we have a function of<font color="#E5E5E5"> X and a</font>

780
00:36:29,760 --> 00:36:35,190
<font color="#CCCCCC">lochley sculpt y variable which is</font>

781
00:36:32,250 --> 00:36:39,210
assigned<font color="#CCCCCC"> to local and when you call eval</font>

782
00:36:35,190 --> 00:36:42,870
<font color="#CCCCCC">this is a direct call to eval a direct</font>

783
00:36:39,210 --> 00:36:45,600
call means that the<font color="#CCCCCC"> chord is val is</font>

784
00:36:42,870 --> 00:36:48,359
knitted<font color="#E5E5E5"> Coralville</font><font color="#CCCCCC"> and its identifier is</font>

785
00:36:45,600 --> 00:36:51,480
also<font color="#CCCCCC"> eval</font><font color="#E5E5E5"> if those two conditions are</font>

786
00:36:48,360 --> 00:36:54,720
true then<font color="#E5E5E5"> that's a direct call so what Y</font>

787
00:36:51,480 --> 00:36:57,750
is<font color="#E5E5E5"> assigned is in the local scope so</font>

788
00:36:54,720 --> 00:37:02,220
when alert is called<font color="#CCCCCC"> y is in</font><font color="#E5E5E5"> the local</font>

789
00:36:57,750 --> 00:37:06,740
<font color="#CCCCCC">scope</font><font color="#E5E5E5"> and so you get that data in direct</font>

790
00:37:02,220 --> 00:37:10,200
calls are anything<font color="#E5E5E5"> that the eval</font>

791
00:37:06,740 --> 00:37:12,689
identifier is not about so an indirect

792
00:37:10,200 --> 00:37:15,720
call is like<font color="#E5E5E5"> this so we</font><font color="#CCCCCC"> have a</font>

793
00:37:12,690 --> 00:37:18,360
<font color="#CCCCCC">parenthesis expression we use</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> Comet</font>

794
00:37:15,720 --> 00:37:21,089
eval so the comma<font color="#E5E5E5"> operator returns the</font>

795
00:37:18,360 --> 00:37:23,340
rightmost<font color="#E5E5E5"> expression which is about so</font>

796
00:37:21,090 --> 00:37:25,920
the<font color="#CCCCCC"> parentheses expression</font><font color="#E5E5E5"> will have a</font>

797
00:37:23,340 --> 00:37:27,720
<font color="#E5E5E5">reference to eval but because the eval</font>

798
00:37:25,920 --> 00:37:30,510
function<font color="#CCCCCC"> doesn't have an identifier of</font>

799
00:37:27,720 --> 00:37:32,609
<font color="#E5E5E5">it Val that's an indirect call and an</font>

800
00:37:30,510 --> 00:37:34,650
indirect call<font color="#CCCCCC"> executes</font><font color="#E5E5E5"> in the global</font>

801
00:37:32,610 --> 00:37:37,320
scope so when that alert function<font color="#CCCCCC"> is</font>

802
00:37:34,650 --> 00:37:40,560
<font color="#E5E5E5">called Y will be in the scope of window</font>

803
00:37:37,320 --> 00:37:44,940
saw<font color="#E5E5E5"> it will be global so I needed an</font>

804
00:37:40,560 --> 00:37:49,080
indirect call<font color="#E5E5E5"> to fool angular angular</font>

805
00:37:44,940 --> 00:37:50,840
doesn't support the comma operator<font color="#CCCCCC"> so I</font>

806
00:37:49,080 --> 00:37:53,779
had to<font color="#E5E5E5"> look at perfection kills</font><font color="#CCCCCC"> comm</font>

807
00:37:50,840 --> 00:37:58,350
<font color="#CCCCCC">it's a really cool resource check it out</font>

808
00:37:53,780 --> 00:38:01,350
<font color="#CCCCCC">and there's plenty</font><font color="#E5E5E5"> of indirect call</font>

809
00:37:58,350 --> 00:38:03,450
examples on them so I've showed you<font color="#E5E5E5"> the</font>

810
00:38:01,350 --> 00:38:06,810
classic one<font color="#E5E5E5"> we first discovered this on</font>

811
00:38:03,450 --> 00:38:09,810
slackers slackers was like<font color="#CCCCCC"> a security</font>

812
00:38:06,810 --> 00:38:15,690
<font color="#CCCCCC">forum</font><font color="#E5E5E5"> many years ago that</font><font color="#CCCCCC"> everybody did</font>

813
00:38:09,810 --> 00:38:17,490
research on<font color="#E5E5E5"> we this saw for</font><font color="#CCCCCC"> example here</font>

814
00:38:15,690 --> 00:38:19,020
that<font color="#CCCCCC"> the avowal on</font><font color="#E5E5E5"> the left is not</font>

815
00:38:17,490 --> 00:38:20,790
<font color="#E5E5E5">important because the comma operator</font>

816
00:38:19,020 --> 00:38:22,920
<font color="#E5E5E5">always returns the expression on the</font>

817
00:38:20,790 --> 00:38:26,580
right<font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> just another example</font><font color="#E5E5E5"> of</font>

818
00:38:22,920 --> 00:38:29,370
<font color="#CCCCCC">the one above ternary operations</font><font color="#E5E5E5"> also</font>

819
00:38:26,580 --> 00:38:31,710
produce an indirect call<font color="#E5E5E5"> so here we have</font>

820
00:38:29,370 --> 00:38:33,900
a<font color="#CCCCCC"> parenthesis expression</font><font color="#E5E5E5"> one evaluates</font>

821
00:38:31,710 --> 00:38:36,360
to true<font color="#CCCCCC"> it returns a vowel</font><font color="#E5E5E5"> the</font>

822
00:38:33,900 --> 00:38:40,380
<font color="#CCCCCC">parentheses X expression</font><font color="#E5E5E5"> returns</font><font color="#CCCCCC"> eval</font><font color="#E5E5E5"> we</font>

823
00:38:36,360 --> 00:38:41,369
can then call eval<font color="#E5E5E5"> as in the global</font>

824
00:38:40,380 --> 00:38:44,099
scope

825
00:38:41,369 --> 00:38:48,749
and interestingly<font color="#E5E5E5"> an assignment also</font>

826
00:38:44,099 --> 00:38:52,259
<font color="#CCCCCC">works as an indirect call too so I</font>

827
00:38:48,749 --> 00:38:55,618
attempted to<font color="#CCCCCC"> break 1.4 so I created an</font>

828
00:38:52,259 --> 00:38:57,989
<font color="#CCCCCC">object literal I had a reference</font><font color="#E5E5E5"> to the</font>

829
00:38:55,619 --> 00:39:02,400
lookup getter function using the array

830
00:38:57,989 --> 00:39:05,069
trick then I have an<font color="#E5E5E5"> assignment so I</font>

831
00:39:02,400 --> 00:39:07,200
have a<font color="#E5E5E5"> nice</font><font color="#CCCCCC"> ax or</font><font color="#E5E5E5"> L equals L</font><font color="#CCCCCC"> so L</font><font color="#E5E5E5"> is</font>

832
00:39:05,069 --> 00:39:09,450
equal<font color="#CCCCCC"> to itself so that's</font><font color="#E5E5E5"> an assignment</font>

833
00:39:07,200 --> 00:39:12,960
that's<font color="#CCCCCC"> Lac</font><font color="#E5E5E5"> and indirect call so we</font>

834
00:39:09,450 --> 00:39:15,359
forcing angular to execute as a general

835
00:39:12,960 --> 00:39:18,059
function not as a member function we

836
00:39:15,359 --> 00:39:20,549
call lookup getter<font color="#CCCCCC"> Crom</font><font color="#E5E5E5"> execute that in</font>

837
00:39:18,059 --> 00:39:22,589
the window<font color="#CCCCCC"> Scot</font><font color="#E5E5E5"> we get the document</font>

838
00:39:20,549 --> 00:39:25,019
getter<font color="#E5E5E5"> we call the document getter and</font>

839
00:39:22,589 --> 00:39:25,759
we've got the document<font color="#E5E5E5"> don't write that</font>

840
00:39:25,019 --> 00:39:29,930
should work

841
00:39:25,759 --> 00:39:34,289
any observant among you might wonder at

842
00:39:29,930 --> 00:39:36,180
the ensure a safe object function if we

843
00:39:34,289 --> 00:39:39,420
recap on the<font color="#CCCCCC"> ensure</font><font color="#E5E5E5"> safe object function</font>

844
00:39:36,180 --> 00:39:42,210
<font color="#E5E5E5">and this particular Lam it detects a Dom</font>

845
00:39:39,420 --> 00:39:44,999
<font color="#CCCCCC">element so</font><font color="#E5E5E5"> a document will be</font><font color="#CCCCCC"> detected</font>

846
00:39:42,210 --> 00:39:49,369
as a Dom<font color="#CCCCCC"> element</font><font color="#E5E5E5"> and an exception will</font>

847
00:39:44,999 --> 00:39:49,368
be thrown<font color="#E5E5E5"> and access will be</font><font color="#CCCCCC"> prevented I</font>

848
00:39:51,109 --> 00:39:59,759
love<font color="#E5E5E5"> chrome 57 chrome 57 was like a</font>

849
00:39:57,239 --> 00:40:03,359
<font color="#CCCCCC">birthday present</font><font color="#E5E5E5"> to a security of</font>

850
00:39:59,759 --> 00:40:06,239
searches such as myself<font color="#E5E5E5"> because before</font>

851
00:40:03,359 --> 00:40:09,140
the<font color="#CCCCCC"> 57 updates</font><font color="#E5E5E5"> the only get is on window</font>

852
00:40:06,239 --> 00:40:12,119
where proto<font color="#CCCCCC"> and document but after 57</font>

853
00:40:09,140 --> 00:40:13,710
<font color="#E5E5E5">there are a lot more and that was the</font>

854
00:40:12,119 --> 00:40:16,619
list to get<font color="#E5E5E5"> and extracted all the</font>

855
00:40:13,710 --> 00:40:18,749
<font color="#CCCCCC">getters on window so already with my son</font>

856
00:40:16,619 --> 00:40:20,729
<font color="#CCCCCC">boxes skip I could call history dot back</font>

857
00:40:18,749 --> 00:40:22,828
for example<font color="#CCCCCC"> but</font><font color="#E5E5E5"> that's a</font><font color="#CCCCCC"> bit lame I</font>

858
00:40:20,729 --> 00:40:24,210
could also call<font color="#E5E5E5"> local storage and</font>

859
00:40:22,829 --> 00:40:26,670
getting set local<font color="#E5E5E5"> storage</font>

860
00:40:24,210 --> 00:40:28,829
<font color="#CCCCCC">but again that's</font><font color="#E5E5E5"> still a bit lame but</font>

861
00:40:26,670 --> 00:40:30,259
what<font color="#E5E5E5"> really stood out was the event</font>

862
00:40:28,829 --> 00:40:32,910
<font color="#E5E5E5">object getter</font>

863
00:40:30,259 --> 00:40:36,299
using the<font color="#CCCCCC"> events object getter I was</font>

864
00:40:32,910 --> 00:40:40,469
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> break the sandbox again and he</font>

865
00:40:36,299 --> 00:40:43,799
is<font color="#CCCCCC"> a sandbox</font><font color="#E5E5E5"> escape for 1.4 so we create</font>

866
00:40:40,469 --> 00:40:45,839
an<font color="#CCCCCC"> object literal we use the array trick</font>

867
00:40:43,799 --> 00:40:48,569
on the object successor to get the

868
00:40:45,839 --> 00:40:52,619
<font color="#CCCCCC">lookup get a function we use our</font>

869
00:40:48,569 --> 00:40:54,490
indirect<font color="#CCCCCC"> lag call so l</font><font color="#E5E5E5"> equals L and then</font>

870
00:40:52,619 --> 00:40:57,310
we call the event getter

871
00:40:54,490 --> 00:40:59,500
we call the event<font color="#E5E5E5"> getter and then target</font>

872
00:40:57,310 --> 00:41:02,230
contains a<font color="#CCCCCC"> reference to the</font><font color="#E5E5E5"> document</font>

873
00:40:59,500 --> 00:41:04,240
object then<font color="#E5E5E5"> default view contains a</font>

874
00:41:02,230 --> 00:41:06,339
<font color="#E5E5E5">reference to window then we can you</font>

875
00:41:04,240 --> 00:41:08,680
assign<font color="#CCCCCC"> to location and bypass the</font>

876
00:41:06,339 --> 00:41:12,130
sandbox<font color="#E5E5E5"> so interestingly you might be</font>

877
00:41:08,680 --> 00:41:14,830
<font color="#E5E5E5">wondering why target</font><font color="#CCCCCC"> is not detected as</font>

878
00:41:12,130 --> 00:41:17,050
a document and why default view<font color="#E5E5E5"> is not</font>

879
00:41:14,830 --> 00:41:19,240
detected as a window and I think it's

880
00:41:17,050 --> 00:41:21,280
because after the function<font color="#E5E5E5"> call for</font>

881
00:41:19,240 --> 00:41:23,470
performance reasons<font color="#E5E5E5"> angular doesn't</font>

882
00:41:21,280 --> 00:41:26,500
bother checking those properties<font color="#CCCCCC"> luckily</font>

883
00:41:23,470 --> 00:41:29,669
<font color="#CCCCCC">for me</font><font color="#E5E5E5"> and if you replace the location</font>

884
00:41:26,500 --> 00:41:33,780
of salmon for example with an alert one

885
00:41:29,670 --> 00:41:36,520
that will be detected<font color="#E5E5E5"> as the window and</font>

886
00:41:33,780 --> 00:41:40,480
<font color="#E5E5E5">so the expert will fail</font><font color="#CCCCCC"> so this is why</font>

887
00:41:36,520 --> 00:41:42,609
use a location assignment<font color="#CCCCCC"> this</font><font color="#E5E5E5"> vector</font>

888
00:41:40,480 --> 00:41:46,780
works on one point four<font color="#CCCCCC"> point</font><font color="#E5E5E5"> zero to</font>

889
00:41:42,609 --> 00:41:50,500
one point four point<font color="#E5E5E5"> five I was gonna</font>

890
00:41:46,780 --> 00:41:53,710
end my<font color="#CCCCCC"> presentation there but it kept</font>

891
00:41:50,500 --> 00:41:57,040
bugging me how<font color="#E5E5E5"> can we make previous</font>

892
00:41:53,710 --> 00:41:59,950
unboxer<font color="#CCCCCC"> escapes work there's no eval</font>

893
00:41:57,040 --> 00:42:04,990
<font color="#E5E5E5">right dollar eval doesn't work how can I</font>

894
00:41:59,950 --> 00:42:08,049
do<font color="#E5E5E5"> it we need to go deeper we need order</font>

895
00:42:04,990 --> 00:42:09,848
<font color="#E5E5E5">by with in order</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> so if we call order</font>

896
00:42:08,050 --> 00:42:13,930
back with in<font color="#E5E5E5"> order by we've got our of</font>

897
00:42:09,849 --> 00:42:16,869
<font color="#E5E5E5">our so angular house filters which are</font>

898
00:42:13,930 --> 00:42:19,359
called from expressions<font color="#E5E5E5"> so here for</font>

899
00:42:16,869 --> 00:42:21,640
<font color="#E5E5E5">example</font><font color="#CCCCCC"> the string on the left is</font>

900
00:42:19,359 --> 00:42:23,560
<font color="#CCCCCC">converted to uppercase with the filter</font>

901
00:42:21,640 --> 00:42:26,859
on the right so it's not<font color="#CCCCCC"> a bitwise or</font>

902
00:42:23,560 --> 00:42:30,450
operation it's a filter operation<font color="#E5E5E5"> so</font>

903
00:42:26,859 --> 00:42:33,220
order by<font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> a vowel and it's a filter</font>

904
00:42:30,450 --> 00:42:37,899
so we<font color="#E5E5E5"> can call order by from within</font>

905
00:42:33,220 --> 00:42:41,490
<font color="#E5E5E5">order by and here's the sandbox</font><font color="#CCCCCC"> escape</font>

906
00:42:37,900 --> 00:42:45,010
for<font color="#E5E5E5"> 1.5 so we create an object</font><font color="#CCCCCC"> literal</font>

907
00:42:41,490 --> 00:42:47,470
<font color="#E5E5E5">we use a wire property so normally in</font>

908
00:42:45,010 --> 00:42:49,900
angular in this version<font color="#E5E5E5"> you're prevented</font>

909
00:42:47,470 --> 00:42:54,490
from assigning to<font color="#CCCCCC"> the string processor</font>

910
00:42:49,900 --> 00:42:56,980
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of my char at attack so here I</font>

911
00:42:54,490 --> 00:42:59,609
<font color="#CCCCCC">have a</font><font color="#E5E5E5"> reference to the string</font><font color="#CCCCCC"> prototype</font>

912
00:42:56,980 --> 00:43:03,640
to get<font color="#E5E5E5"> round the check in angular and</font>

913
00:42:59,609 --> 00:43:06,400
then once I can get<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to the string</font>

914
00:43:03,640 --> 00:43:08,170
prototype and assign<font color="#CCCCCC"> it I can alright</font>

915
00:43:06,400 --> 00:43:10,540
the char<font color="#E5E5E5"> out function and</font>

916
00:43:08,170 --> 00:43:14,650
<font color="#E5E5E5">all red giant</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> as we've seen that</font>

917
00:43:10,540 --> 00:43:17,230
breaks the identify check so then we

918
00:43:14,650 --> 00:43:18,910
have an array on<font color="#E5E5E5"> the left the array is</font>

919
00:43:17,230 --> 00:43:23,170
not important we just need the<font color="#E5E5E5"> order by</font>

920
00:43:18,910 --> 00:43:24,940
filter to be our<font color="#E5E5E5"> vowel basically so the</font>

921
00:43:23,170 --> 00:43:27,640
array is passed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the order by filter</font>

922
00:43:24,940 --> 00:43:31,180
the column signifies the argument<font color="#E5E5E5"> and</font>

923
00:43:27,640 --> 00:43:33,339
the argument we provide is arbitrary

924
00:43:31,180 --> 00:43:36,339
<font color="#CCCCCC">code so we can</font><font color="#E5E5E5"> execute whatever</font><font color="#CCCCCC"> cork you</font>

925
00:43:33,339 --> 00:43:41,279
like and angular<font color="#E5E5E5"> will think this</font><font color="#CCCCCC"> is an</font>

926
00:43:36,339 --> 00:43:43,720
identifier<font color="#E5E5E5"> the sandbox will be bypassed</font>

927
00:43:41,280 --> 00:43:45,819
<font color="#CCCCCC">this works on versions one point five</font>

928
00:43:43,720 --> 00:43:50,078
<font color="#E5E5E5">point zero to</font><font color="#CCCCCC"> one point</font><font color="#E5E5E5"> five point</font><font color="#CCCCCC"> eight</font>

929
00:43:45,819 --> 00:43:51,759
<font color="#E5E5E5">I also attempted</font><font color="#CCCCCC"> to break the latest</font>

930
00:43:50,079 --> 00:43:55,599
version of the angular<font color="#E5E5E5"> sandbox saw a</font>

931
00:43:51,760 --> 00:43:57,760
version<font color="#E5E5E5"> one</font><font color="#CCCCCC"> point five point eleven so</font>

932
00:43:55,599 --> 00:44:00,430
normally angular prevents you<font color="#E5E5E5"> in this</font>

933
00:43:57,760 --> 00:44:01,630
version<font color="#E5E5E5"> of</font><font color="#CCCCCC"> angular</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> trick that I've</font>

934
00:44:00,430 --> 00:44:04,390
just showed you<font color="#CCCCCC"> on the previous slide</font>

935
00:44:01,630 --> 00:44:07,990
<font color="#E5E5E5">doesn't work now it will prevent access</font>

936
00:44:04,390 --> 00:44:11,170
to modifying the string prototype but if

937
00:44:07,990 --> 00:44:13,529
you pass<font color="#CCCCCC"> it in an array</font><font color="#E5E5E5"> and use the pipe</font>

938
00:44:11,170 --> 00:44:16,270
operator<font color="#E5E5E5"> in angular the filter operation</font>

939
00:44:13,530 --> 00:44:20,260
<font color="#CCCCCC">and then that will get passed to the</font>

940
00:44:16,270 --> 00:44:23,530
order<font color="#CCCCCC"> by a</font><font color="#E5E5E5"> filter then we can modify the</font>

941
00:44:20,260 --> 00:44:23,980
string<font color="#CCCCCC"> prot attack so because X</font><font color="#E5E5E5"> doesn't</font>

942
00:44:23,530 --> 00:44:26,020
exist

943
00:44:23,980 --> 00:44:29,650
angular quite helpfully creates an

944
00:44:26,020 --> 00:44:32,009
object<font color="#E5E5E5"> and then we had a wire property</font>

945
00:44:29,650 --> 00:44:35,890
with one two three<font color="#E5E5E5"> so this allows us</font><font color="#CCCCCC"> to</font>

946
00:44:32,010 --> 00:44:38,680
<font color="#E5E5E5">modify the string prototype with an</font>

947
00:44:35,890 --> 00:44:43,629
undefined<font color="#E5E5E5"> object it's cool but it's</font><font color="#CCCCCC"> not</font>

948
00:44:38,680 --> 00:44:48,308
<font color="#E5E5E5">really useful</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> we can modify the</font>

949
00:44:43,630 --> 00:44:50,200
replace function value off so if you

950
00:44:48,309 --> 00:44:52,030
could modify<font color="#E5E5E5"> the replace function then</font>

951
00:44:50,200 --> 00:44:55,270
<font color="#E5E5E5">you could bypass the one point</font><font color="#CCCCCC"> five</font>

952
00:44:52,030 --> 00:44:58,150
<font color="#CCCCCC">point eleven</font><font color="#E5E5E5"> version but here</font><font color="#CCCCCC"> I'd change</font>

953
00:44:55,270 --> 00:45:01,480
value after<font color="#CCCCCC"> one</font><font color="#E5E5E5"> to two three so I can</font>

954
00:44:58,150 --> 00:45:03,700
only change properties<font color="#CCCCCC"> two levels deep I</font>

955
00:45:01,480 --> 00:45:06,010
can't change just<font color="#E5E5E5"> one</font><font color="#CCCCCC"> level deep but</font>

956
00:45:03,700 --> 00:45:08,169
maybe you come<font color="#E5E5E5"> I come back plus one</font>

957
00:45:06,010 --> 00:45:11,290
<font color="#E5E5E5">point five point</font><font color="#CCCCCC"> eleven</font><font color="#E5E5E5"> but you can have</font>

958
00:45:08,170 --> 00:45:13,270
a<font color="#CCCCCC"> got</font><font color="#E5E5E5"> try and do it but</font><font color="#CCCCCC"> I couldn't leave</font>

959
00:45:11,290 --> 00:45:16,630
<font color="#E5E5E5">it there either</font><font color="#CCCCCC"> I needed to break one</font>

960
00:45:13,270 --> 00:45:20,990
point five<font color="#CCCCCC"> point</font><font color="#E5E5E5"> eleven and what happens</font>

961
00:45:16,630 --> 00:45:25,460
in angular<font color="#CCCCCC"> if you have an onclick</font><font color="#E5E5E5"> event</font>

962
00:45:20,990 --> 00:45:27,979
so in angular that's ng<font color="#E5E5E5"> - click</font><font color="#CCCCCC"> angular</font>

963
00:45:25,460 --> 00:45:29,930
<font color="#CCCCCC">has a dollar event</font><font color="#E5E5E5"> object that it</font>

964
00:45:27,980 --> 00:45:33,140
assigns to<font color="#CCCCCC"> the event objects in the</font>

965
00:45:29,930 --> 00:45:35,899
JavaScript function<font color="#E5E5E5"> and interestingly in</font>

966
00:45:33,140 --> 00:45:39,650
<font color="#CCCCCC">chrome this</font><font color="#E5E5E5"> event object has a path</font>

967
00:45:35,900 --> 00:45:43,040
property<font color="#E5E5E5"> that path property is an array</font>

968
00:45:39,650 --> 00:45:47,089
and in that area<font color="#CCCCCC"> you might notice</font><font color="#E5E5E5"> the</font>

969
00:45:43,040 --> 00:45:51,650
last element<font color="#E5E5E5"> is the window object so if</font>

970
00:45:47,089 --> 00:45:56,869
I<font color="#E5E5E5"> pass the path array to the order</font><font color="#CCCCCC"> by</font>

971
00:45:51,650 --> 00:45:59,270
filter the sandbox<font color="#E5E5E5"> cord will be executed</font>

972
00:45:56,869 --> 00:46:01,430
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the scope of the array element so it</font>

973
00:45:59,270 --> 00:46:05,349
will loop through<font color="#CCCCCC"> every element</font><font color="#E5E5E5"> of the</font>

974
00:46:01,430 --> 00:46:05,348
<font color="#E5E5E5">array until it gets to the window</font><font color="#CCCCCC"> so</font>

975
00:46:05,560 --> 00:46:13,279
<font color="#CCCCCC">here we have an ng-click</font><font color="#E5E5E5"> we pass the</font>

976
00:46:09,260 --> 00:46:16,310
path property to the order by<font color="#CCCCCC"> filter the</font>

977
00:46:13,280 --> 00:46:19,460
order by filter will like execute the

978
00:46:16,310 --> 00:46:21,500
cord<font color="#E5E5E5"> in the scope of the array</font><font color="#CCCCCC"> elements</font>

979
00:46:19,460 --> 00:46:24,650
and eventually you get<font color="#CCCCCC"> it'll get to</font>

980
00:46:21,500 --> 00:46:25,849
window and<font color="#E5E5E5"> then we can call</font><font color="#CCCCCC"> alert 1</font><font color="#E5E5E5"> and</font>

981
00:46:24,650 --> 00:46:31,640
bypass<font color="#E5E5E5"> the sandbox</font>

982
00:46:25,849 --> 00:46:33,170
<font color="#E5E5E5">but this doesn't work on the CSP mod and</font>

983
00:46:31,640 --> 00:46:35,900
the reason it doesn't<font color="#E5E5E5"> work on the CSP</font>

984
00:46:33,170 --> 00:46:39,490
<font color="#E5E5E5">mod is because angular doesn't execute</font>

985
00:46:35,900 --> 00:46:42,849
the<font color="#E5E5E5"> cord with the function constructor</font>

986
00:46:39,490 --> 00:46:45,740
<font color="#CCCCCC">but you might remember the vector that</font><font color="#E5E5E5"> I</font>

987
00:46:42,849 --> 00:46:49,310
started<font color="#CCCCCC"> off</font><font color="#E5E5E5"> with in in the earlier</font>

988
00:46:45,740 --> 00:46:53,290
slides<font color="#CCCCCC"> and you can get around</font><font color="#E5E5E5"> that and</font>

989
00:46:49,310 --> 00:47:00,470
bypass CSP mod using the from function

990
00:46:53,290 --> 00:47:06,440
so we pass the<font color="#E5E5E5"> half property</font><font color="#CCCCCC"> to the</font>

991
00:47:00,470 --> 00:47:08,509
order by<font color="#E5E5E5"> filter</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> we pass the path</font>

992
00:47:06,440 --> 00:47:10,580
property to the order<font color="#CCCCCC"> by filter and then</font>

993
00:47:08,510 --> 00:47:12,890
use array dot constructor<font color="#E5E5E5"> to get the</font>

994
00:47:10,580 --> 00:47:17,480
array constructor<font color="#E5E5E5"> call the from function</font>

995
00:47:12,890 --> 00:47:18,830
with array<font color="#CCCCCC"> 1 that gets</font><font color="#E5E5E5"> converted to an</font>

996
00:47:17,480 --> 00:47:22,790
array even<font color="#CCCCCC"> though it's already</font><font color="#E5E5E5"> an array</font>

997
00:47:18,830 --> 00:47:25,339
and then<font color="#CCCCCC"> alert will</font><font color="#E5E5E5"> be called on</font><font color="#CCCCCC"> every</font>

998
00:47:22,790 --> 00:47:29,619
<font color="#E5E5E5">element of the array</font><font color="#CCCCCC"> and then bypass</font><font color="#E5E5E5"> the</font>

999
00:47:25,339 --> 00:47:32,770
sandbox<font color="#CCCCCC"> and that works in CSP mode</font>

1000
00:47:29,619 --> 00:47:34,940
<font color="#E5E5E5">thanks so much thank Mario Hyun</font><font color="#CCCCCC"> Mateus</font>

1001
00:47:32,770 --> 00:47:36,890
cowboy<font color="#E5E5E5"> Ian and the</font>

1002
00:47:34,940 --> 00:47:39,549
<font color="#CCCCCC">I'd also like to</font><font color="#E5E5E5"> thank ports</font><font color="#CCCCCC"> with</font>

1003
00:47:36,890 --> 00:47:42,049
<font color="#CCCCCC">therefore enabling</font><font color="#E5E5E5"> me to do the research</font>

1004
00:47:39,549 --> 00:47:44,210
so my question to<font color="#E5E5E5"> you is</font><font color="#CCCCCC"> can you find an</font>

1005
00:47:42,049 --> 00:47:48,109
exploit for<font color="#E5E5E5"> greater than one point</font><font color="#CCCCCC"> five</font>

1006
00:47:44,210 --> 00:48:04,750
<font color="#E5E5E5">point</font><font color="#CCCCCC"> eight outside of CSP</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> Thanks</font>

1007
00:47:48,109 --> 00:48:04,750
any questions sorry can you repeat that

1008
00:48:05,170 --> 00:48:11,059
<font color="#E5E5E5">no they've no sandbox in angular so it</font>

1009
00:48:07,940 --> 00:48:13,430
wasn't much fun<font color="#CCCCCC"> for</font><font color="#E5E5E5"> me because yeah you</font>

1010
00:48:11,059 --> 00:48:19,150
come<font color="#E5E5E5"> back</font><font color="#CCCCCC"> our CSP</font><font color="#E5E5E5"> mod because there's no</font>

1011
00:48:13,430 --> 00:48:21,980
sandbox<font color="#CCCCCC"> but angular changes how you use</font>

1012
00:48:19,150 --> 00:48:24,339
HTML so yeah it's not<font color="#E5E5E5"> really</font><font color="#CCCCCC"> interesting</font>

1013
00:48:21,980 --> 00:48:24,339
<font color="#CCCCCC">from</font>

1014
00:48:26,740 --> 00:48:31,109
[Music]

1015
00:48:28,030 --> 00:48:31,109
[Applause]

