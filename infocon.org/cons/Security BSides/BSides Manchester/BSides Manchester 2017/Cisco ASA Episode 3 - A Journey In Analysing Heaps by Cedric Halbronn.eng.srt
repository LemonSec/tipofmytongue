1
00:00:02,550 --> 00:00:09,240
<font color="#E5E5E5">okay so hi everyone so I'm gonna talk</font>

2
00:00:06,390 --> 00:00:12,600
about<font color="#E5E5E5"> Cisco</font><font color="#CCCCCC"> si firewalls</font><font color="#E5E5E5"> so just a</font>

3
00:00:09,240 --> 00:00:14,940
little<font color="#E5E5E5"> bit about us because it's a it's</font>

4
00:00:12,600 --> 00:00:17,970
<font color="#CCCCCC">been a work that</font><font color="#E5E5E5"> I did</font><font color="#CCCCCC"> with the iron</font>

5
00:00:14,940 --> 00:00:19,980
atoms and we're a<font color="#E5E5E5"> part of EDG which is</font>

6
00:00:17,970 --> 00:00:22,110
the exploit development group of<font color="#E5E5E5"> NCC</font>

7
00:00:19,980 --> 00:00:25,500
group and we do basically energy

8
00:00:22,110 --> 00:00:28,320
<font color="#E5E5E5">research</font><font color="#CCCCCC"> reverse</font><font color="#E5E5E5"> engineering</font><font color="#CCCCCC"> explore</font>

9
00:00:25,500 --> 00:00:31,650
development<font color="#E5E5E5"> so a little bit of context</font>

10
00:00:28,320 --> 00:00:33,239
first if you<font color="#E5E5E5"> don't know what an</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

11
00:00:31,650 --> 00:00:37,500
firewall<font color="#CCCCCC"> is it's basically</font><font color="#E5E5E5"> what you have</font>

12
00:00:33,239 --> 00:00:41,129
<font color="#E5E5E5">at the bottom left it's it's a sa stands</font>

13
00:00:37,500 --> 00:00:43,500
for adaptive security appliance<font color="#E5E5E5"> and it's</font>

14
00:00:41,130 --> 00:00:47,340
basically full of<font color="#E5E5E5"> features</font>

15
00:00:43,500 --> 00:00:50,100
it supports firewalling VPN gateway

16
00:00:47,340 --> 00:00:52,829
<font color="#E5E5E5">router and it's pretty it's pretty</font>

17
00:00:50,100 --> 00:00:54,750
amazing system and you can have

18
00:00:52,829 --> 00:00:58,739
<font color="#E5E5E5">different</font><font color="#CCCCCC"> sizes but basically underneath</font>

19
00:00:54,750 --> 00:01:01,410
<font color="#E5E5E5">it's the same software internally and</font>

20
00:00:58,739 --> 00:01:03,690
<font color="#CCCCCC">now you say it's a</font><font color="#E5E5E5"> Linux with a special</font>

21
00:01:01,410 --> 00:01:06,390
<font color="#E5E5E5">a</font><font color="#CCCCCC"> sa folder which contains</font><font color="#E5E5E5"> everything</font>

22
00:01:03,690 --> 00:01:09,569
related to<font color="#E5E5E5"> a sa and it's a little bit</font>

23
00:01:06,390 --> 00:01:11,520
<font color="#E5E5E5">different than iOS in that that</font><font color="#CCCCCC"> Nancy</font>

24
00:01:09,569 --> 00:01:14,280
<font color="#CCCCCC">Squires in that Cisco is is a</font>

25
00:01:11,520 --> 00:01:18,060
proprietary operating system here<font color="#CCCCCC"> we are</font>

26
00:01:14,280 --> 00:01:22,859
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> a Linux</font><font color="#E5E5E5"> space</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> support both</font>

27
00:01:18,060 --> 00:01:25,529
32 and 64-bit<font color="#CCCCCC"> devices and the main</font>

28
00:01:22,859 --> 00:01:27,859
binary is called liner and it's in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> SI</font>

29
00:01:25,529 --> 00:01:33,598
bin<font color="#E5E5E5"> liner and it's basically a 40 Meg</font>

30
00:01:27,859 --> 00:01:35,880
<font color="#CCCCCC">binary</font><font color="#E5E5E5"> that contains everything it's</font>

31
00:01:33,599 --> 00:01:40,049
kind of a critical device because it's

32
00:01:35,880 --> 00:01:42,990
it's the entry point for basically all

33
00:01:40,049 --> 00:01:45,389
<font color="#CCCCCC">company's networks</font><font color="#E5E5E5"> and so basically if</font>

34
00:01:42,990 --> 00:01:47,818
<font color="#E5E5E5">you control an AAC</font><font color="#CCCCCC"> device then you</font><font color="#E5E5E5"> can</font>

35
00:01:45,389 --> 00:01:50,490
<font color="#E5E5E5">basically access to the VPN</font><font color="#CCCCCC"> you can</font>

36
00:01:47,819 --> 00:01:53,609
access<font color="#CCCCCC"> to the routing stuff</font><font color="#E5E5E5"> credentials</font>

37
00:01:50,490 --> 00:01:55,798
and you<font color="#E5E5E5"> basically have access to all the</font>

38
00:01:53,609 --> 00:01:57,779
the internal network<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can see</font>

39
00:01:55,799 --> 00:02:00,239
everything<font color="#CCCCCC"> that goes through</font><font color="#E5E5E5"> the VPN so</font>

40
00:01:57,779 --> 00:02:03,270
it's it's<font color="#CCCCCC"> really scary if we if we think</font>

41
00:02:00,239 --> 00:02:07,590
about it<font color="#E5E5E5"> but let's let's understand</font>

42
00:02:03,270 --> 00:02:12,150
something<font color="#E5E5E5"> in 2016 last year</font><font color="#CCCCCC"> existence</font>

43
00:02:07,590 --> 00:02:14,390
<font color="#CCCCCC">our released an exploit for foreign</font>

44
00:02:12,150 --> 00:02:17,750
<font color="#CCCCCC">ability or</font><font color="#E5E5E5"> hip over proven ability in</font>

45
00:02:14,390 --> 00:02:20,779
in the<font color="#CCCCCC"> Cisco essay they called their</font>

46
00:02:17,750 --> 00:02:24,200
research executive Ike at<font color="#E5E5E5"> the it was</font>

47
00:02:20,780 --> 00:02:27,830
<font color="#E5E5E5">responsibly disclosed to Cisco before</font>

48
00:02:24,200 --> 00:02:30,950
<font color="#CCCCCC">releasing its basically the</font><font color="#E5E5E5"> the nobility</font>

49
00:02:27,830 --> 00:02:32,870
that targeted is in the Cisco

50
00:02:30,950 --> 00:02:36,260
fragmentation payload so it's something

51
00:02:32,870 --> 00:02:38,510
that<font color="#E5E5E5"> is related</font><font color="#CCCCCC"> to Cisco like the</font><font color="#E5E5E5"> name</font>

52
00:02:36,260 --> 00:02:42,920
Cisco fragmentation<font color="#CCCCCC"> it's basically a</font>

53
00:02:38,510 --> 00:02:46,609
payload specific to to their need<font color="#E5E5E5"> to do</font>

54
00:02:42,920 --> 00:02:47,929
reassembly inside<font color="#CCCCCC"> Ikey itself so the</font>

55
00:02:46,610 --> 00:02:49,610
idea is you would send<font color="#E5E5E5"> different</font>

56
00:02:47,930 --> 00:02:51,440
fragments<font color="#E5E5E5"> and they're going to be</font>

57
00:02:49,610 --> 00:02:52,970
already assembled into a packet<font color="#E5E5E5"> that's</font>

58
00:02:51,440 --> 00:02:55,310
going to be interpreted as<font color="#E5E5E5"> Ikey and</font>

59
00:02:52,970 --> 00:02:57,140
there was an ability in the way the

60
00:02:55,310 --> 00:02:59,120
reassembly<font color="#E5E5E5"> worked we're going to talk</font>

61
00:02:57,140 --> 00:03:00,738
<font color="#E5E5E5">about it I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> explain you</font><font color="#CCCCCC"> how it</font>

62
00:02:59,120 --> 00:03:03,709
what was the burn every table basically

63
00:03:00,739 --> 00:03:05,420
<font color="#E5E5E5">for now we just</font><font color="#CCCCCC"> need to know that there</font>

64
00:03:03,709 --> 00:03:06,860
was<font color="#E5E5E5"> a</font><font color="#CCCCCC"> nobility in the way</font><font color="#E5E5E5"> there is on</font>

65
00:03:05,420 --> 00:03:10,190
the packet what the packet was

66
00:03:06,860 --> 00:03:12,890
reassembled<font color="#E5E5E5"> and it wasn't integer</font>

67
00:03:10,190 --> 00:03:16,820
overflow and it it resulted into a heap

68
00:03:12,890 --> 00:03:19,429
overflow so what is<font color="#E5E5E5"> really interesting</font>

69
00:03:16,820 --> 00:03:22,040
about this<font color="#E5E5E5"> rarity is its in its pre off</font>

70
00:03:19,430 --> 00:03:24,110
so meaning<font color="#E5E5E5"> Ikey is used to establish a</font>

71
00:03:22,040 --> 00:03:27,440
VPN so it's it's<font color="#E5E5E5"> the VPN is not</font>

72
00:03:24,110 --> 00:03:28,700
<font color="#CCCCCC">established yet so it's</font><font color="#E5E5E5"> preauth and Ikey</font>

73
00:03:27,440 --> 00:03:32,540
is available on<font color="#CCCCCC"> the internet everywhere</font>

74
00:03:28,700 --> 00:03:36,048
<font color="#E5E5E5">because it's used for the VPN so they</font>

75
00:03:32,540 --> 00:03:38,239
released their exploit in April 2016<font color="#E5E5E5"> and</font>

76
00:03:36,049 --> 00:03:40,640
<font color="#E5E5E5">their explore targeted I give it to a</font>

77
00:03:38,239 --> 00:03:44,120
specific<font color="#CCCCCC"> sa version nine to four and</font>

78
00:03:40,640 --> 00:03:45,738
32-bit<font color="#E5E5E5"> only it's pretty awesome research</font>

79
00:03:44,120 --> 00:03:49,010
if you<font color="#E5E5E5"> think about it and they actually</font>

80
00:03:45,739 --> 00:03:52,519
<font color="#E5E5E5">got the pony</font><font color="#CCCCCC"> awards</font><font color="#E5E5E5"> up last year so it</font>

81
00:03:49,010 --> 00:03:55,489
<font color="#CCCCCC">was pretty cool</font><font color="#E5E5E5"> so what what</font><font color="#CCCCCC"> are we</font>

82
00:03:52,519 --> 00:03:57,290
<font color="#E5E5E5">going to do from that the thing is</font>

83
00:03:55,489 --> 00:03:59,810
exploiting a<font color="#E5E5E5"> heap overflow requires</font>

84
00:03:57,290 --> 00:04:03,769
understanding heap internals<font color="#CCCCCC"> so we can</font>

85
00:03:59,810 --> 00:04:05,209
<font color="#E5E5E5">abuse them we we actually understood</font>

86
00:04:03,769 --> 00:04:07,850
<font color="#E5E5E5">their research and then we ported</font><font color="#CCCCCC"> there</font>

87
00:04:05,209 --> 00:04:10,310
exploit<font color="#E5E5E5"> to Ikey v1 with different</font>

88
00:04:07,850 --> 00:04:12,859
constraints and also both<font color="#E5E5E5"> for 32-bit and</font>

89
00:04:10,310 --> 00:04:15,280
64-bit and all AAC versions but<font color="#E5E5E5"> to do</font>

90
00:04:12,860 --> 00:04:18,620
<font color="#E5E5E5">that we had to understand heap internals</font>

91
00:04:15,280 --> 00:04:20,810
<font color="#E5E5E5">also we built three gdb plugins to</font>

92
00:04:18,620 --> 00:04:23,419
analyze heaps<font color="#E5E5E5"> and understand</font><font color="#CCCCCC"> and</font>

93
00:04:20,810 --> 00:04:26,390
<font color="#E5E5E5">basically abstract things so we could</font>

94
00:04:23,419 --> 00:04:27,590
basically exploit bugs<font color="#CCCCCC"> without</font><font color="#E5E5E5"> just</font>

95
00:04:26,390 --> 00:04:28,849
relying on

96
00:04:27,590 --> 00:04:31,969
<font color="#E5E5E5">Radames and without</font><font color="#CCCCCC"> understanding</font>

97
00:04:28,850 --> 00:04:35,590
anything and it really<font color="#CCCCCC"> has</font><font color="#E5E5E5"> to assisted</font>

98
00:04:31,970 --> 00:04:38,150
us in to exploit<font color="#E5E5E5"> exploiting the bugs</font><font color="#CCCCCC"> so</font>

99
00:04:35,590 --> 00:04:39,409
<font color="#CCCCCC">what I'm</font><font color="#E5E5E5"> going to propose you to do is</font>

100
00:04:38,150 --> 00:04:42,500
to participate<font color="#E5E5E5"> to an awesome journey</font>

101
00:04:39,410 --> 00:04:45,949
into<font color="#E5E5E5"> a scale a heap internals and and</font>

102
00:04:42,500 --> 00:04:47,870
flows so we're going<font color="#E5E5E5"> to focus our</font><font color="#CCCCCC"> our</font>

103
00:04:45,949 --> 00:04:50,960
<font color="#E5E5E5">talk on</font><font color="#CCCCCC"> 32-bit</font><font color="#E5E5E5"> just for the sake of</font>

104
00:04:47,870 --> 00:04:57,290
simplicity<font color="#E5E5E5"> but lots of concepts actually</font>

105
00:04:50,960 --> 00:05:01,729
<font color="#E5E5E5">applies to 64-bit</font><font color="#CCCCCC"> ok so let's go so what</font>

106
00:04:57,290 --> 00:05:03,830
is cisco fragmentation<font color="#CCCCCC"> so the idea is</font>

107
00:05:01,729 --> 00:05:05,450
you have a fragment ID which<font color="#E5E5E5"> is going to</font>

108
00:05:03,830 --> 00:05:07,490
<font color="#E5E5E5">be the same for all</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> fragments and</font>

109
00:05:05,450 --> 00:05:09,590
then<font color="#E5E5E5"> you have a sequence number which is</font>

110
00:05:07,490 --> 00:05:11,930
different for<font color="#E5E5E5"> each segment</font><font color="#CCCCCC"> in each</font>

111
00:05:09,590 --> 00:05:14,060
fragment<font color="#E5E5E5"> so you have six wins number</font>

112
00:05:11,930 --> 00:05:16,460
sequence number<font color="#E5E5E5"> two one seconds number</font>

113
00:05:14,060 --> 00:05:18,050
two and then one of the flag is to set

114
00:05:16,460 --> 00:05:21,590
the<font color="#E5E5E5"> last fragment</font><font color="#CCCCCC"> to one for example</font>

115
00:05:18,050 --> 00:05:23,750
<font color="#E5E5E5">what happens is the derailleur knows it</font>

116
00:05:21,590 --> 00:05:28,460
received all the<font color="#CCCCCC"> fragments</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it can</font>

117
00:05:23,750 --> 00:05:30,169
reassemble<font color="#CCCCCC"> then now every time if a</font>

118
00:05:28,460 --> 00:05:32,239
fragment is receive is going to be added

119
00:05:30,169 --> 00:05:34,849
to<font color="#CCCCCC"> a queue</font><font color="#E5E5E5"> and when they are all</font>

120
00:05:32,240 --> 00:05:36,530
received<font color="#CCCCCC"> it's it's reassemble</font><font color="#E5E5E5"> so you can</font>

121
00:05:34,850 --> 00:05:39,830
have<font color="#CCCCCC"> another fragment ID then you can</font>

122
00:05:36,530 --> 00:05:41,359
have sequence<font color="#E5E5E5"> you can have fragmented</font>

123
00:05:39,830 --> 00:05:42,770
with<font color="#E5E5E5"> different sequence number they can</font>

124
00:05:41,360 --> 00:05:43,070
be in<font color="#E5E5E5"> different orders it doesn't really</font>

125
00:05:42,770 --> 00:05:45,169
matter

126
00:05:43,070 --> 00:05:46,639
number<font color="#CCCCCC"> two then one three and</font><font color="#E5E5E5"> then at</font>

127
00:05:45,169 --> 00:05:48,799
the end when you get their last<font color="#E5E5E5"> strike</font>

128
00:05:46,639 --> 00:05:52,849
you<font color="#E5E5E5"> know you can we have some of your</font>

129
00:05:48,800 --> 00:05:57,500
packets<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so we're at the pin ability</font>

130
00:05:52,849 --> 00:05:59,870
the thing is the<font color="#E5E5E5"> way the the the</font>

131
00:05:57,500 --> 00:06:02,240
fragment are received the each fragment

132
00:05:59,870 --> 00:06:04,190
will have a header and<font color="#E5E5E5"> some data and the</font>

133
00:06:02,240 --> 00:06:06,260
header will tell basically the size of

134
00:06:04,190 --> 00:06:08,960
it<font color="#E5E5E5"> of the data and and you will have the</font>

135
00:06:06,260 --> 00:06:11,300
last frag bits also to indicate<font color="#CCCCCC"> if it's</font>

136
00:06:08,960 --> 00:06:13,669
the last fragment but<font color="#E5E5E5"> basically because</font>

137
00:06:11,300 --> 00:06:14,660
each fragment has a header<font color="#E5E5E5"> we don't care</font>

138
00:06:13,669 --> 00:06:17,210
<font color="#CCCCCC">about the header because</font><font color="#E5E5E5"> it's just</font>

139
00:06:14,660 --> 00:06:19,460
metadata to say what the fragment is for

140
00:06:17,210 --> 00:06:22,789
so when<font color="#CCCCCC"> you're save a fragment</font><font color="#E5E5E5"> you add</font>

141
00:06:19,460 --> 00:06:25,638
it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the queue but the</font><font color="#CCCCCC"> the header is</font>

142
00:06:22,789 --> 00:06:27,349
removed<font color="#E5E5E5"> so you you basically</font><font color="#CCCCCC"> we subtract</font>

143
00:06:25,639 --> 00:06:30,110
<font color="#E5E5E5">eight to the</font><font color="#CCCCCC"> length of the of the data</font>

144
00:06:27,349 --> 00:06:32,870
but<font color="#CCCCCC"> the thing is</font><font color="#E5E5E5"> you can fake</font><font color="#CCCCCC"> the actual</font>

145
00:06:30,110 --> 00:06:35,599
<font color="#E5E5E5">fragment length and basically if you</font>

146
00:06:32,870 --> 00:06:37,909
<font color="#CCCCCC">specify your</font><font color="#E5E5E5"> length of</font><font color="#CCCCCC"> one minus eight</font>

147
00:06:35,599 --> 00:06:40,340
it gives minus seven so basically the

148
00:06:37,909 --> 00:06:41,360
<font color="#CCCCCC">queue is it's</font><font color="#E5E5E5"> going to be added a</font>

149
00:06:40,340 --> 00:06:45,258
negative length and you

150
00:06:41,360 --> 00:06:46,580
decrease the<font color="#CCCCCC"> actual length of</font><font color="#E5E5E5"> the of the</font>

151
00:06:45,259 --> 00:06:48,349
<font color="#E5E5E5">the total length of the different</font>

152
00:06:46,580 --> 00:06:50,719
fragments<font color="#E5E5E5"> so when you basically</font>

153
00:06:48,349 --> 00:06:53,750
<font color="#E5E5E5">reassemble when the the bucket is</font>

154
00:06:50,719 --> 00:06:55,430
reassemble the buffer<font color="#CCCCCC"> that is going to</font>

155
00:06:53,750 --> 00:06:56,870
be<font color="#CCCCCC"> allocated is going to be less</font><font color="#E5E5E5"> than</font>

156
00:06:55,430 --> 00:06:58,550
the actual fragment data and then

157
00:06:56,870 --> 00:07:01,099
basically when you copy the different

158
00:06:58,550 --> 00:07:03,439
fragments you overflow into the<font color="#E5E5E5"> batter</font>

159
00:07:01,099 --> 00:07:08,090
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you guys you can basically corrupt</font>

160
00:07:03,439 --> 00:07:10,330
<font color="#E5E5E5">things on the heap so what we try to</font>

161
00:07:08,090 --> 00:07:13,008
achieve is quite hard because basically

162
00:07:10,330 --> 00:07:16,128
we don't<font color="#E5E5E5"> control the allocation or the</font>

163
00:07:13,009 --> 00:07:19,430
free but we can<font color="#E5E5E5"> still gain code</font>

164
00:07:16,129 --> 00:07:20,960
execution by<font color="#E5E5E5"> correcting things and by</font>

165
00:07:19,430 --> 00:07:22,610
<font color="#CCCCCC">making the right</font><font color="#E5E5E5"> request at the right</font>

166
00:07:20,960 --> 00:07:25,099
time<font color="#CCCCCC"> but what I haven't explained what</font>

167
00:07:22,610 --> 00:07:26,270
how so we<font color="#E5E5E5"> we</font><font color="#CCCCCC"> actually need to understand</font>

168
00:07:25,099 --> 00:07:28,819
the<font color="#CCCCCC"> heats because we're going</font><font color="#E5E5E5"> to correct</font>

169
00:07:26,270 --> 00:07:32,750
things on the heap but<font color="#CCCCCC"> we want to get</font>

170
00:07:28,819 --> 00:07:34,490
<font color="#CCCCCC">codification right so at the moment like</font>

171
00:07:32,750 --> 00:07:37,400
one<font color="#E5E5E5"> of my colleague Chris and I would</font>

172
00:07:34,490 --> 00:07:43,550
say it's<font color="#E5E5E5"> it's a little</font><font color="#CCCCCC"> bit like like if</font>

173
00:07:37,400 --> 00:07:49,068
we're trying to<font color="#E5E5E5"> pick a lock through an</font>

174
00:07:43,550 --> 00:07:49,779
instrument<font color="#CCCCCC"> fan</font><font color="#E5E5E5"> in the dark</font><font color="#CCCCCC"> and with a</font>

175
00:07:49,069 --> 00:07:52,729
<font color="#E5E5E5">paper clip</font>

176
00:07:49,779 --> 00:07:56,740
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> basically need some tool right</font>

177
00:07:52,729 --> 00:08:00,039
because it's it's really hard<font color="#CCCCCC"> otherwise</font>

178
00:07:56,740 --> 00:08:03,289
so our<font color="#E5E5E5"> talk is going to</font><font color="#CCCCCC"> be about</font>

179
00:08:00,039 --> 00:08:05,509
understanding a<font color="#CCCCCC"> sa heaps</font><font color="#E5E5E5"> understanding</font>

180
00:08:03,289 --> 00:08:10,250
<font color="#CCCCCC">cisco sa modifications that actually</font>

181
00:08:05,509 --> 00:08:11,889
made<font color="#E5E5E5"> it worse</font><font color="#CCCCCC"> and then in the</font><font color="#E5E5E5"> process of</font>

182
00:08:10,250 --> 00:08:15,409
the presentation I'm<font color="#CCCCCC"> going to show you</font>

183
00:08:11,889 --> 00:08:19,909
some tool that we've developed<font color="#E5E5E5"> that</font>

184
00:08:15,409 --> 00:08:23,960
helped us<font color="#E5E5E5"> exploiting the bugs</font><font color="#CCCCCC"> okay let's</font>

185
00:08:19,909 --> 00:08:25,819
let's go through what is<font color="#CCCCCC"> a heap so I'm</font>

186
00:08:23,960 --> 00:08:28,188
going<font color="#CCCCCC"> to talk about three well-known</font>

187
00:08:25,819 --> 00:08:30,589
heap alligators that are of interest

188
00:08:28,189 --> 00:08:33,699
here<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> alma rock which</font><font color="#CCCCCC"> is the</font>

189
00:08:30,589 --> 00:08:35,929
dog<font color="#CCCCCC"> lee alligator which is quite old</font>

190
00:08:33,698 --> 00:08:38,718
<font color="#CCCCCC">1993 and then</font><font color="#E5E5E5"> we have Peeta Mellark</font>

191
00:08:35,929 --> 00:08:41,659
which is the<font color="#E5E5E5"> past red alligator which is</font>

192
00:08:38,719 --> 00:08:43,039
the this real<font color="#CCCCCC"> three - okay ders</font><font color="#E5E5E5"> I'm</font>

193
00:08:41,659 --> 00:08:44,689
going to talk<font color="#CCCCCC"> about are really related</font>

194
00:08:43,039 --> 00:08:46,459
because<font color="#E5E5E5"> they are folk from each other</font><font color="#CCCCCC"> so</font>

195
00:08:44,690 --> 00:08:48,730
<font color="#E5E5E5">we had</font><font color="#CCCCCC"> gel Mellark pitting</font><font color="#E5E5E5"> lock is a</font>

196
00:08:46,459 --> 00:08:52,359
fork of<font color="#E5E5E5"> the El Morocco so they share</font>

197
00:08:48,730 --> 00:08:55,910
<font color="#E5E5E5">things that basically</font><font color="#CCCCCC"> patema rock was</font>

198
00:08:52,360 --> 00:08:57,769
developed in order to support<font color="#E5E5E5"> mr.</font>

199
00:08:55,910 --> 00:09:00,079
in a better<font color="#E5E5E5"> way the hip</font><font color="#CCCCCC"> irregular</font><font color="#E5E5E5"> would</font>

200
00:08:57,769 --> 00:09:04,370
support<font color="#CCCCCC"> misreading and avoid lock</font>

201
00:09:00,079 --> 00:09:06,229
contention and then we had the new<font color="#E5E5E5"> lead</font>

202
00:09:04,370 --> 00:09:07,850
see here alligator<font color="#E5E5E5"> which is probably the</font>

203
00:09:06,230 --> 00:09:13,579
<font color="#E5E5E5">most famous because it's used everywhere</font>

204
00:09:07,850 --> 00:09:17,750
on<font color="#CCCCCC"> Linux and is used a lot</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> all the</font>

205
00:09:13,579 --> 00:09:21,729
system that<font color="#E5E5E5"> are based on Linux so hip</font>

206
00:09:17,750 --> 00:09:24,680
manager usually<font color="#E5E5E5"> assists us in a location</font>

207
00:09:21,730 --> 00:09:27,170
<font color="#E5E5E5">allocating and freeing chunks</font><font color="#CCCCCC"> so if we</font>

208
00:09:24,680 --> 00:09:29,209
want<font color="#CCCCCC"> to get some memory to do some stuff</font>

209
00:09:27,170 --> 00:09:31,880
<font color="#CCCCCC">we're going to</font><font color="#E5E5E5"> ask the</font><font color="#CCCCCC"> Gila garage to</font>

210
00:09:29,209 --> 00:09:35,989
that for us<font color="#E5E5E5"> so it provides the api's</font>

211
00:09:31,880 --> 00:09:39,140
malloc and free usually so it<font color="#E5E5E5"> usually it</font>

212
00:09:35,990 --> 00:09:41,450
has some<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of region that the</font><font color="#E5E5E5"> hip</font>

213
00:09:39,140 --> 00:09:44,180
<font color="#E5E5E5">alligator controls and</font><font color="#CCCCCC"> know it can use</font>

214
00:09:41,450 --> 00:09:45,769
<font color="#E5E5E5">for for allocating stuff and basically</font>

215
00:09:44,180 --> 00:09:48,109
<font color="#CCCCCC">when we do</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> malach we're going to</font>

216
00:09:45,769 --> 00:09:51,950
basically<font color="#E5E5E5"> get some parts of this region</font>

217
00:09:48,110 --> 00:09:54,050
<font color="#E5E5E5">that's going</font><font color="#CCCCCC"> to be given to</font><font color="#E5E5E5"> us so we can</font>

218
00:09:51,950 --> 00:09:56,600
do whatever<font color="#E5E5E5"> we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> and when we don't</font>

219
00:09:54,050 --> 00:09:58,729
want<font color="#E5E5E5"> it anymore we call free and the hip</font>

220
00:09:56,600 --> 00:10:00,370
alligator knows<font color="#E5E5E5"> you can retrieve</font><font color="#CCCCCC"> it for</font>

221
00:09:58,730 --> 00:10:04,880
another use

222
00:10:00,370 --> 00:10:06,410
so we allocate stuff and basically the

223
00:10:04,880 --> 00:10:09,230
hip alligator<font color="#E5E5E5"> there are two strategies</font>

224
00:10:06,410 --> 00:10:10,910
<font color="#CCCCCC">it could either track allocated chunks</font>

225
00:10:09,230 --> 00:10:12,829
there are actually three<font color="#CCCCCC"> strategies you</font>

226
00:10:10,910 --> 00:10:15,199
could<font color="#E5E5E5"> you could track free chunk</font>

227
00:10:12,829 --> 00:10:17,449
allocated chunk or both<font color="#E5E5E5"> before</font><font color="#CCCCCC"> primer</font>

228
00:10:15,199 --> 00:10:20,540
<font color="#E5E5E5">performance reasons usually the</font>

229
00:10:17,449 --> 00:10:22,640
<font color="#CCCCCC">hipergator only track free chunks</font>

230
00:10:20,540 --> 00:10:26,180
because if you<font color="#E5E5E5"> if you track three</font><font color="#CCCCCC"> free</font>

231
00:10:22,640 --> 00:10:27,800
<font color="#E5E5E5">trunks when you do malloc it</font><font color="#CCCCCC"> knows the</font>

232
00:10:26,180 --> 00:10:30,079
free chance so<font color="#CCCCCC"> it's gonna</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> take</font>

233
00:10:27,800 --> 00:10:31,910
one of them<font color="#CCCCCC"> give it to you remove</font><font color="#E5E5E5"> it</font>

234
00:10:30,079 --> 00:10:35,300
<font color="#E5E5E5">from the list and</font><font color="#CCCCCC"> then last time you</font>

235
00:10:31,910 --> 00:10:36,680
call free<font color="#E5E5E5"> it's gonna take it back and</font>

236
00:10:35,300 --> 00:10:38,390
put<font color="#E5E5E5"> it back in the fridge and it doesn't</font>

237
00:10:36,680 --> 00:10:41,420
need it doesn't<font color="#E5E5E5"> really need to track</font>

238
00:10:38,390 --> 00:10:43,189
allocated chunks and obviously because

239
00:10:41,420 --> 00:10:47,870
<font color="#E5E5E5">malloc and free are called</font><font color="#CCCCCC"> Lots</font>

240
00:10:43,190 --> 00:10:49,660
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> worth performance reason so</font><font color="#E5E5E5"> let's</font>

241
00:10:47,870 --> 00:10:52,760
say we want<font color="#E5E5E5"> to allocate something</font>

242
00:10:49,660 --> 00:10:56,089
<font color="#E5E5E5">detective free trunk</font><font color="#CCCCCC"> it becomes</font><font color="#E5E5E5"> an</font>

243
00:10:52,760 --> 00:10:59,170
<font color="#E5E5E5">allocated</font><font color="#CCCCCC"> and and so</font><font color="#E5E5E5"> on so I've talked</font>

244
00:10:56,089 --> 00:11:02,240
about<font color="#E5E5E5"> Chuck's chunks a chunk is a memory</font>

245
00:10:59,170 --> 00:11:05,479
part that is basically returned by the

246
00:11:02,240 --> 00:11:06,940
<font color="#CCCCCC">heap alligator</font><font color="#E5E5E5"> for us to use that's we</font>

247
00:11:05,480 --> 00:11:09,310
<font color="#CCCCCC">call it chunk</font>

248
00:11:06,940 --> 00:11:11,020
and what is<font color="#E5E5E5"> really important</font><font color="#CCCCCC"> about the</font>

249
00:11:09,310 --> 00:11:13,329
the three hip<font color="#E5E5E5"> alligators up I've been</font>

250
00:11:11,020 --> 00:11:16,329
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about is that</font><font color="#E5E5E5"> the the they store</font>

251
00:11:13,330 --> 00:11:19,780
the metadata for<font color="#E5E5E5"> the chunk before</font><font color="#CCCCCC"> the</font>

252
00:11:16,330 --> 00:11:22,570
chunk<font color="#E5E5E5"> so when you basically have a heap</font>

253
00:11:19,780 --> 00:11:25,630
overflow<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example if we the the</font>

254
00:11:22,570 --> 00:11:28,030
chunk on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Left we can</font><font color="#E5E5E5"> correct memory</font>

255
00:11:25,630 --> 00:11:29,740
<font color="#E5E5E5">we're going to basically</font><font color="#CCCCCC"> corrupt</font><font color="#E5E5E5"> some</font>

256
00:11:28,030 --> 00:11:31,600
memory of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> following chunk and</font>

257
00:11:29,740 --> 00:11:33,490
basically<font color="#CCCCCC"> corrupt some metadata on the</font>

258
00:11:31,600 --> 00:11:36,460
heap<font color="#E5E5E5"> so that's why we need</font><font color="#CCCCCC"> to understand</font>

259
00:11:33,490 --> 00:11:38,020
what the how the heap works<font color="#E5E5E5"> because</font>

260
00:11:36,460 --> 00:11:41,800
we're going<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to corrupt</font><font color="#E5E5E5"> things</font>

261
00:11:38,020 --> 00:11:44,290
on the heap the last term we use is bin

262
00:11:41,800 --> 00:11:47,140
<font color="#E5E5E5">so the bin is basically a way to track</font>

263
00:11:44,290 --> 00:11:49,780
free chunk<font color="#CCCCCC"> we have been of different</font>

264
00:11:47,140 --> 00:11:52,689
size so if for example you<font color="#CCCCCC"> want to</font>

265
00:11:49,780 --> 00:11:55,120
<font color="#E5E5E5">allocate a 100 byte chunk it's gonna</font>

266
00:11:52,690 --> 00:11:57,880
<font color="#E5E5E5">look at the bin for 100</font><font color="#CCCCCC"> bytes chance and</font>

267
00:11:55,120 --> 00:12:00,280
just take one<font color="#CCCCCC"> of them it's easier for</font>

268
00:11:57,880 --> 00:12:04,770
the he burger to return you a chunk if

269
00:12:00,280 --> 00:12:07,270
you<font color="#CCCCCC"> thought the chunks by by being and</font>

270
00:12:04,770 --> 00:12:08,920
the last thing that<font color="#E5E5E5"> is important it</font><font color="#CCCCCC"> are</font>

271
00:12:07,270 --> 00:12:11,350
all<font color="#CCCCCC"> open source so if you actually want</font>

272
00:12:08,920 --> 00:12:13,569
<font color="#CCCCCC">to understand what a HIPAA locator is</font>

273
00:12:11,350 --> 00:12:15,310
it's more complex<font color="#E5E5E5"> that then I'm not</font>

274
00:12:13,570 --> 00:12:17,560
gonna explain everything<font color="#E5E5E5"> in one talk but</font>

275
00:12:15,310 --> 00:12:19,630
basically if you look<font color="#E5E5E5"> at the source it's</font>

276
00:12:17,560 --> 00:12:24,609
<font color="#E5E5E5">the best way in</font><font color="#CCCCCC"> my opinion to get used</font>

277
00:12:19,630 --> 00:12:27,550
to what<font color="#CCCCCC"> a HIPAA regular is</font><font color="#E5E5E5"> okay so now</font>

278
00:12:24,610 --> 00:12:30,540
we have these three<font color="#CCCCCC"> heap alligators</font><font color="#E5E5E5"> we</font>

279
00:12:27,550 --> 00:12:34,150
want to know what is used on Cisco<font color="#CCCCCC"> si</font>

280
00:12:30,540 --> 00:12:36,880
they<font color="#CCCCCC"> are</font><font color="#E5E5E5"> based on Linux</font><font color="#CCCCCC"> so probably</font><font color="#E5E5E5"> one</font>

281
00:12:34,150 --> 00:12:38,890
of the string<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> gonna figure sound a</font>

282
00:12:36,880 --> 00:12:41,020
little<font color="#E5E5E5"> bit and we actually if you</font>

283
00:12:38,890 --> 00:12:43,600
reverse<font color="#CCCCCC"> engineer the</font><font color="#E5E5E5"> liner binary you</font>

284
00:12:41,020 --> 00:12:45,670
will realize that it uses a version of

285
00:12:43,600 --> 00:12:49,570
<font color="#CCCCCC">dilma lock which is compiled directly</font>

286
00:12:45,670 --> 00:12:52,959
into the elf rather than national<font color="#E5E5E5"> GDP</font><font color="#CCCCCC"> so</font>

287
00:12:49,570 --> 00:12:56,020
that's quite<font color="#CCCCCC"> interesting and it does</font>

288
00:12:52,960 --> 00:12:57,910
link with<font color="#CCCCCC"> GDP</font><font color="#E5E5E5"> but it doesn't use the</font>

289
00:12:56,020 --> 00:13:01,360
<font color="#E5E5E5">malloc function from</font><font color="#CCCCCC"> gilepsy</font>

290
00:12:57,910 --> 00:13:04,240
<font color="#E5E5E5">so if we look at the disassembly</font><font color="#CCCCCC"> even if</font>

291
00:13:01,360 --> 00:13:06,790
you're not<font color="#E5E5E5"> familiar with x86 you can see</font>

292
00:13:04,240 --> 00:13:09,010
strings that are<font color="#E5E5E5"> used next P</font><font color="#CCCCCC"> news P and</font>

293
00:13:06,790 --> 00:13:11,140
if you look at the source code<font color="#CCCCCC"> you can</font>

294
00:13:09,010 --> 00:13:14,020
directly<font color="#E5E5E5"> see that you have this kind of</font>

295
00:13:11,140 --> 00:13:16,360
string<font color="#E5E5E5"> so you can say</font><font color="#CCCCCC"> okay they are</font>

296
00:13:14,020 --> 00:13:18,339
<font color="#CCCCCC">using the element inside the binary</font><font color="#E5E5E5"> and</font>

297
00:13:16,360 --> 00:13:20,110
actually if<font color="#E5E5E5"> you look at more strings and</font>

298
00:13:18,339 --> 00:13:21,880
you try<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> more that</font><font color="#CCCCCC"> our</font>

299
00:13:20,110 --> 00:13:23,769
in the<font color="#E5E5E5"> injection</font><font color="#CCCCCC"> mark</font><font color="#E5E5E5"> source code you</font>

300
00:13:21,880 --> 00:13:26,019
you can find<font color="#CCCCCC"> variable</font><font color="#E5E5E5"> this one</font><font color="#CCCCCC"> and</font>

301
00:13:23,769 --> 00:13:28,269
another<font color="#E5E5E5"> one</font><font color="#CCCCCC"> you realize that if</font><font color="#E5E5E5"> you</font>

302
00:13:26,019 --> 00:13:29,950
actually look for<font color="#CCCCCC"> this too</font>

303
00:13:28,269 --> 00:13:32,230
you can<font color="#CCCCCC"> actually determine the exact</font>

304
00:13:29,950 --> 00:13:34,240
exact version of GL<font color="#CCCCCC"> Malaga's embedded</font>

305
00:13:32,230 --> 00:13:38,050
<font color="#CCCCCC">into the</font><font color="#E5E5E5"> binary because it's it's the</font>

306
00:13:34,240 --> 00:13:40,810
only<font color="#E5E5E5"> one</font><font color="#CCCCCC"> that has this two is to dot I</font>

307
00:13:38,050 --> 00:13:44,229
<font color="#CCCCCC">dot string so it's it's it's actually</font>

308
00:13:40,810 --> 00:13:46,119
very it's<font color="#E5E5E5"> a very nice step to understand</font>

309
00:13:44,230 --> 00:13:49,000
that it's a person to<font color="#E5E5E5"> a three because</font>

310
00:13:46,120 --> 00:13:51,430
you<font color="#CCCCCC"> have some</font><font color="#E5E5E5"> mitigations</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are added</font>

311
00:13:49,000 --> 00:13:54,760
over<font color="#E5E5E5"> time in the analog so for example</font>

312
00:13:51,430 --> 00:13:56,800
we know<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this specific versions</font>

313
00:13:54,760 --> 00:13:59,410
<font color="#E5E5E5">doesn't have safe and linking which is a</font>

314
00:13:56,800 --> 00:14:01,870
mitigation to deal with memory

315
00:13:59,410 --> 00:14:04,990
<font color="#E5E5E5">corruption on the heap metadata</font><font color="#CCCCCC"> because</font>

316
00:14:01,870 --> 00:14:09,070
it's<font color="#E5E5E5"> only unable laughter</font><font color="#CCCCCC"> 285</font><font color="#E5E5E5"> so it's</font>

317
00:14:04,990 --> 00:14:10,990
it's good to know<font color="#CCCCCC"> okay so more concept</font>

318
00:14:09,070 --> 00:14:13,930
about DML<font color="#CCCCCC"> up 2.8 because now we know</font>

319
00:14:10,990 --> 00:14:16,600
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> still</font><font color="#CCCCCC"> mark 2.8 we have this concept</font>

320
00:14:13,930 --> 00:14:18,790
of<font color="#CCCCCC"> n state and</font><font color="#E5E5E5"> M space I'm set on</font><font color="#CCCCCC"> a V</font>

321
00:14:16,600 --> 00:14:20,560
space it's basically the memory region<font color="#E5E5E5"> I</font>

322
00:14:18,790 --> 00:14:23,680
was talking about<font color="#CCCCCC"> that the here</font>

323
00:14:20,560 --> 00:14:25,689
<font color="#E5E5E5">alligator need to deal</font><font color="#CCCCCC"> with an</font><font color="#E5E5E5"> enemy</font>

324
00:14:23,680 --> 00:14:28,239
state<font color="#E5E5E5"> actually can contain several</font>

325
00:14:25,690 --> 00:14:30,040
<font color="#E5E5E5">segments it's just a way for</font><font color="#CCCCCC"> them to say</font>

326
00:14:28,240 --> 00:14:32,470
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> if we</font><font color="#E5E5E5"> want to have</font><font color="#CCCCCC"> several segments</font>

327
00:14:30,040 --> 00:14:36,370
allocated in different places<font color="#E5E5E5"> they are</font>

328
00:14:32,470 --> 00:14:39,339
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to be managed</font><font color="#E5E5E5"> by the same the same</font>

329
00:14:36,370 --> 00:14:42,459
<font color="#CCCCCC">m space so I'm gonna use</font><font color="#E5E5E5"> n States</font>

330
00:14:39,339 --> 00:14:48,430
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> M space and vice versa</font><font color="#E5E5E5"> there</font>

331
00:14:42,459 --> 00:14:52,899
are very close concepts so that's why

332
00:14:48,430 --> 00:14:54,699
but<font color="#E5E5E5"> basically when you look</font><font color="#CCCCCC"> at things is</font>

333
00:14:52,899 --> 00:14:57,040
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> allocated in one segment or</font>

334
00:14:54,699 --> 00:14:59,439
another it<font color="#E5E5E5"> does we don't really care but</font>

335
00:14:57,040 --> 00:15:01,029
what is important is if you<font color="#CCCCCC"> actually</font>

336
00:14:59,440 --> 00:15:03,100
know how<font color="#CCCCCC"> the heap allocated works then</font>

337
00:15:01,029 --> 00:15:04,689
you<font color="#E5E5E5"> can basically build tools to part</font>

338
00:15:03,100 --> 00:15:06,370
the memory<font color="#E5E5E5"> and give you a representation</font>

339
00:15:04,690 --> 00:15:07,440
<font color="#E5E5E5">so you can interpret the stuff you know</font>

340
00:15:06,370 --> 00:15:10,540
in an easy way

341
00:15:07,440 --> 00:15:13,120
so for example<font color="#CCCCCC"> first thing we wanted</font><font color="#E5E5E5"> is</font>

342
00:15:10,540 --> 00:15:15,459
to<font color="#E5E5E5"> be able to pass</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> M States because</font>

343
00:15:13,120 --> 00:15:21,370
basically it it outpost<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> to</font>

344
00:15:15,459 --> 00:15:23,619
okay<font color="#CCCCCC"> add that here we have</font><font color="#E5E5E5"> the bin so</font>

345
00:15:21,370 --> 00:15:26,649
here we have the bin so the bin for each

346
00:15:23,620 --> 00:15:29,740
size when we have a list a doubly linked

347
00:15:26,649 --> 00:15:31,480
list<font color="#CCCCCC"> that's going to list</font><font color="#E5E5E5"> us all the</font>

348
00:15:29,740 --> 00:15:33,160
chunks<font color="#E5E5E5"> of a specific size so if we</font>

349
00:15:31,480 --> 00:15:33,790
allocate stuff we want to<font color="#E5E5E5"> find our</font>

350
00:15:33,160 --> 00:15:35,650
chance

351
00:15:33,790 --> 00:15:39,209
we're<font color="#E5E5E5"> gonna find</font><font color="#CCCCCC"> them here</font><font color="#E5E5E5"> and then we</font>

352
00:15:35,650 --> 00:15:43,120
have this<font color="#E5E5E5"> map</font><font color="#CCCCCC"> that basically</font><font color="#E5E5E5"> indicates</font>

353
00:15:39,210 --> 00:15:46,120
how many chunks<font color="#CCCCCC"> there are in the or if</font>

354
00:15:43,120 --> 00:15:47,920
the indicates basically if a chunk is if

355
00:15:46,120 --> 00:15:50,500
a specific bin is empty so if you have

356
00:15:47,920 --> 00:15:52,870
one<font color="#E5E5E5"> it means it's</font><font color="#CCCCCC"> not empty</font><font color="#E5E5E5"> and if you</font>

357
00:15:50,500 --> 00:15:55,240
have zero it<font color="#E5E5E5"> means it's an empty bin and</font>

358
00:15:52,870 --> 00:15:57,760
then<font color="#E5E5E5"> you have other interesting concept</font>

359
00:15:55,240 --> 00:16:00,100
is for example<font color="#CCCCCC"> this magic we're going to</font>

360
00:15:57,760 --> 00:16:02,319
talk about<font color="#CCCCCC"> it it's it's like a global</font>

361
00:16:00,100 --> 00:16:08,650
cookie that<font color="#CCCCCC"> is used to</font><font color="#E5E5E5"> cause some kind</font>

362
00:16:02,320 --> 00:16:11,050
<font color="#E5E5E5">of</font><font color="#CCCCCC"> security which is helpful and then we</font>

363
00:16:08,650 --> 00:16:13,600
have<font color="#CCCCCC"> DV with it which which stands for</font>

364
00:16:11,050 --> 00:16:16,449
visit designated victim<font color="#E5E5E5"> basically when</font>

365
00:16:13,600 --> 00:16:19,900
<font color="#E5E5E5">you free a chunk</font><font color="#CCCCCC"> the latest chunk it's</font>

366
00:16:16,450 --> 00:16:22,300
going to be pointed by the DV<font color="#E5E5E5"> the idea</font>

367
00:16:19,900 --> 00:16:23,860
is usually when you have locate stuff

368
00:16:22,300 --> 00:16:26,109
and free stuff<font color="#CCCCCC"> it's gonna be already</font><font color="#E5E5E5"> the</font>

369
00:16:23,860 --> 00:16:27,370
same kind of size<font color="#CCCCCC"> so it's an</font>

370
00:16:26,110 --> 00:16:28,870
optimization to say if you free

371
00:16:27,370 --> 00:16:31,540
something<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> relocate it it's</font>

372
00:16:28,870 --> 00:16:34,570
<font color="#E5E5E5">gonna basically access the TV and it</font>

373
00:16:31,540 --> 00:16:37,120
<font color="#E5E5E5">know the TV size</font><font color="#CCCCCC"> so it can know if it</font>

374
00:16:34,570 --> 00:16:39,610
<font color="#E5E5E5">can reuse it it's actually</font><font color="#CCCCCC"> something</font>

375
00:16:37,120 --> 00:16:42,220
<font color="#CCCCCC">that we want to exploit in</font><font color="#E5E5E5"> terms of</font>

376
00:16:39,610 --> 00:16:44,560
<font color="#E5E5E5">exploitation because usually we rely on</font>

377
00:16:42,220 --> 00:16:47,620
freeing things and then having<font color="#E5E5E5"> a hole</font>

378
00:16:44,560 --> 00:16:50,319
before staff and correcting this so if

379
00:16:47,620 --> 00:16:52,030
you if you if<font color="#E5E5E5"> you can access DV it's</font>

380
00:16:50,320 --> 00:16:54,880
helpful<font color="#CCCCCC"> for us because we can check our</font>

381
00:16:52,030 --> 00:16:57,430
exploits<font color="#E5E5E5"> is actually on the right path</font>

382
00:16:54,880 --> 00:17:00,390
<font color="#E5E5E5">and you have the segment which basically</font>

383
00:16:57,430 --> 00:17:04,240
indicates where in<font color="#E5E5E5"> memory are our data</font>

384
00:17:00,390 --> 00:17:06,099
so we it's easy to<font color="#CCCCCC"> determine</font><font color="#E5E5E5"> the address</font>

385
00:17:04,240 --> 00:17:10,480
of the<font color="#CCCCCC"> EM state because it's passed to M</font>

386
00:17:06,099 --> 00:17:13,810
<font color="#E5E5E5">space malloc so let's talk about that so</font>

387
00:17:10,480 --> 00:17:17,230
they<font color="#E5E5E5"> introduced this term</font><font color="#CCCCCC"> F n</font><font color="#E5E5E5"> space the</font>

388
00:17:13,810 --> 00:17:19,960
<font color="#CCCCCC">idea is before it</font><font color="#E5E5E5"> was it was called an</font>

389
00:17:17,230 --> 00:17:22,569
end<font color="#E5E5E5"> state but it was because the the</font>

390
00:17:19,960 --> 00:17:25,000
HIPAA regular would manage<font color="#E5E5E5"> the heap</font><font color="#CCCCCC"> on</font>

391
00:17:22,569 --> 00:17:28,780
its own<font color="#E5E5E5"> but what you can do with the new</font>

392
00:17:25,000 --> 00:17:31,750
<font color="#E5E5E5">deal malloc is you can manage your own</font><font color="#CCCCCC"> m</font>

393
00:17:28,780 --> 00:17:33,460
space which is like a<font color="#CCCCCC"> name state but</font><font color="#E5E5E5"> you</font>

394
00:17:31,750 --> 00:17:36,160
can manage it and<font color="#E5E5E5"> you can have</font><font color="#CCCCCC"> several</font>

395
00:17:33,460 --> 00:17:39,190
ramps pace and and you're going to<font color="#E5E5E5"> pass</font>

396
00:17:36,160 --> 00:17:41,560
the<font color="#CCCCCC"> n space to the n space malloc</font>

397
00:17:39,190 --> 00:17:44,290
function and you<font color="#CCCCCC"> can irrigate</font><font color="#E5E5E5"> things on</font>

398
00:17:41,560 --> 00:17:46,840
different<font color="#CCCCCC"> end spaces so you define</font><font color="#E5E5E5"> M</font>

399
00:17:44,290 --> 00:17:47,168
space and instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> calling malloc you</font>

400
00:17:46,840 --> 00:17:49,649
can

401
00:17:47,169 --> 00:17:52,480
call em<font color="#CCCCCC"> Spice Malik</font><font color="#E5E5E5"> and pasty in space</font>

402
00:17:49,649 --> 00:17:55,139
<font color="#E5E5E5">at the function so you create your own</font>

403
00:17:52,480 --> 00:17:59,710
space<font color="#CCCCCC"> um</font>

404
00:17:55,139 --> 00:18:02,350
and the idea is the alligator<font color="#CCCCCC"> maps</font><font color="#E5E5E5"> the</font>

405
00:17:59,710 --> 00:18:04,690
mirror segments and stole the<font color="#E5E5E5"> EM</font><font color="#CCCCCC"> state</font>

406
00:18:02,350 --> 00:18:08,918
into the the first<font color="#CCCCCC"> second the</font><font color="#E5E5E5"> first</font>

407
00:18:04,690 --> 00:18:13,169
<font color="#E5E5E5">chunk of the M space so this is how it</font>

408
00:18:08,919 --> 00:18:16,539
looks<font color="#CCCCCC"> like when you call em space model</font>

409
00:18:13,169 --> 00:18:20,259
<font color="#E5E5E5">so you have your M space your you have</font>

410
00:18:16,539 --> 00:18:21,759
your<font color="#E5E5E5"> segment inside the space and the</font><font color="#CCCCCC"> M</font>

411
00:18:20,259 --> 00:18:24,009
state structure that we saw earlier

412
00:18:21,759 --> 00:18:26,859
which is<font color="#E5E5E5"> just here to track things is</font>

413
00:18:24,009 --> 00:18:30,489
basically in the first<font color="#E5E5E5"> segment it's not</font>

414
00:18:26,859 --> 00:18:32,320
really useful from an exploitation point

415
00:18:30,489 --> 00:18:34,059
of view but it's useful to know where<font color="#E5E5E5"> to</font>

416
00:18:32,320 --> 00:18:40,299
find things<font color="#E5E5E5"> because we want</font><font color="#CCCCCC"> to build</font>

417
00:18:34,059 --> 00:18:42,908
<font color="#E5E5E5">tools to analyze the heap okay so</font>

418
00:18:40,299 --> 00:18:46,299
theoretically<font color="#E5E5E5"> you can still use the</font>

419
00:18:42,909 --> 00:18:50,200
malloc and free so you<font color="#E5E5E5"> can have your own</font>

420
00:18:46,299 --> 00:18:51,970
<font color="#CCCCCC">m space and still use</font><font color="#E5E5E5"> the MV and call</font>

421
00:18:50,200 --> 00:18:53,470
<font color="#E5E5E5">your M space malloc and you can still</font>

422
00:18:51,970 --> 00:18:57,279
call the malloc function that's going<font color="#CCCCCC"> to</font>

423
00:18:53,470 --> 00:19:00,999
be<font color="#E5E5E5"> handled by</font><font color="#CCCCCC"> the he bragger itself but</font>

424
00:18:57,279 --> 00:19:04,840
you you can also choose to not use<font color="#E5E5E5"> the</font>

425
00:19:00,999 --> 00:19:07,720
<font color="#CCCCCC">maroc</font><font color="#E5E5E5"> so basically you define only</font><font color="#CCCCCC"> m</font>

426
00:19:04,840 --> 00:19:10,590
spaces and then you you won't<font color="#E5E5E5"> have the</font>

427
00:19:07,720 --> 00:19:13,419
<font color="#CCCCCC">manag functions anymore that's actually</font>

428
00:19:10,590 --> 00:19:17,918
what we have in AAC<font color="#CCCCCC"> so if you actually</font>

429
00:19:13,419 --> 00:19:20,619
<font color="#CCCCCC">look at</font><font color="#E5E5E5"> a disassembled firmware you you</font>

430
00:19:17,919 --> 00:19:23,499
look at<font color="#CCCCCC"> mallik calls and under</font>

431
00:19:20,619 --> 00:19:25,840
underneath<font color="#E5E5E5"> it's actually calling several</font>

432
00:19:23,499 --> 00:19:28,090
<font color="#E5E5E5">wrappers</font><font color="#CCCCCC"> but at the end of course and</font>

433
00:19:25,840 --> 00:19:30,059
space<font color="#CCCCCC"> malloc and you can match that</font><font color="#E5E5E5"> the</font>

434
00:19:28,090 --> 00:19:32,139
end the the<font color="#CCCCCC"> function you don't have the</font>

435
00:19:30,059 --> 00:19:34,389
<font color="#E5E5E5">the symbols and everything but you can</font>

436
00:19:32,139 --> 00:19:38,258
write<font color="#E5E5E5"> this function and space Malik has</font>

437
00:19:34,389 --> 00:19:40,269
all the the<font color="#E5E5E5"> GL malach debiting strings</font>

438
00:19:38,259 --> 00:19:42,609
and it's it matches with<font color="#CCCCCC"> the actual</font>

439
00:19:40,269 --> 00:19:44,970
source<font color="#CCCCCC"> code</font><font color="#E5E5E5"> of the unmarked so you have</font>

440
00:19:42,609 --> 00:19:47,678
basically<font color="#CCCCCC"> a wrapper that</font><font color="#E5E5E5"> calls</font><font color="#CCCCCC"> their</font>

441
00:19:44,970 --> 00:19:49,929
<font color="#CCCCCC">space model</font><font color="#E5E5E5"> so they based their</font>

442
00:19:47,679 --> 00:19:53,859
implementation on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> analog and</font><font color="#CCCCCC"> they</font>

443
00:19:49,929 --> 00:19:56,320
they<font color="#E5E5E5"> don't use real malloc so they</font>

444
00:19:53,859 --> 00:19:58,749
basically use M spaces and only n spaces

445
00:19:56,320 --> 00:20:00,299
and<font color="#E5E5E5"> it's statically compiled into line</font>

446
00:19:58,749 --> 00:20:02,909
<font color="#E5E5E5">now Oh</font>

447
00:20:00,299 --> 00:20:04,769
so the last concept<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to</font>

448
00:20:02,909 --> 00:20:06,779
understand is<font color="#E5E5E5"> the concept of men</font><font color="#CCCCCC"> poles</font>

449
00:20:04,769 --> 00:20:10,109
<font color="#CCCCCC">it's something specific to this query</font>

450
00:20:06,779 --> 00:20:12,299
say that they added on top<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Dominic</font>

451
00:20:10,109 --> 00:20:15,899
<font color="#E5E5E5">the idea is they want to track different</font>

452
00:20:12,299 --> 00:20:18,539
<font color="#CCCCCC">M</font><font color="#E5E5E5"> States and and then they use this term</font>

453
00:20:15,899 --> 00:20:20,869
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> men</font><font color="#CCCCCC"> pores so men poles is like</font>

454
00:20:18,539 --> 00:20:25,289
a region<font color="#E5E5E5"> of memory dedicated to</font>

455
00:20:20,869 --> 00:20:28,708
allocations for<font color="#CCCCCC"> Cisco SI components so</font>

456
00:20:25,289 --> 00:20:31,200
<font color="#E5E5E5">we built this tool which basically</font><font color="#CCCCCC"> shows</font>

457
00:20:28,709 --> 00:20:34,349
<font color="#E5E5E5">a structure which is the member list</font>

458
00:20:31,200 --> 00:20:37,559
with which contains<font color="#E5E5E5"> different members</font>

459
00:20:34,349 --> 00:20:42,259
and each<font color="#CCCCCC"> member will point to a end</font>

460
00:20:37,559 --> 00:20:46,549
<font color="#E5E5E5">state which a different name so we have</font>

461
00:20:42,259 --> 00:20:48,719
the one for GM a related<font color="#E5E5E5"> allocations and</font>

462
00:20:46,549 --> 00:20:50,908
the most important one which<font color="#E5E5E5"> is the</font>

463
00:20:48,719 --> 00:20:53,190
<font color="#CCCCCC">general</font><font color="#E5E5E5"> purpose allocation so the M</font>

464
00:20:50,909 --> 00:21:00,450
<font color="#CCCCCC">State</font><font color="#E5E5E5"> we saw earlier is actually is</font>

465
00:20:53,190 --> 00:21:02,549
actually tracked from an<font color="#E5E5E5"> mmm pool so if</font>

466
00:21:00,450 --> 00:21:04,829
we actually look more<font color="#E5E5E5"> in detail on</font><font color="#CCCCCC"> the</font>

467
00:21:02,549 --> 00:21:07,129
different wrappers why they use wrappers

468
00:21:04,829 --> 00:21:09,479
and<font color="#E5E5E5"> what they actually do with that</font>

469
00:21:07,129 --> 00:21:12,658
<font color="#CCCCCC">we're going to explain that basically</font>

470
00:21:09,479 --> 00:21:14,759
rest rest<font color="#E5E5E5"> manager</font><font color="#CCCCCC"> CL oak</font><font color="#E5E5E5"> doesn't do much</font>

471
00:21:12,659 --> 00:21:16,519
except dispatching<font color="#E5E5E5"> to the next wrapper</font>

472
00:21:14,759 --> 00:21:20,369
and then

473
00:21:16,519 --> 00:21:24,389
<font color="#E5E5E5">mmmmh CL oak will actually add different</font>

474
00:21:20,369 --> 00:21:26,458
<font color="#CCCCCC">things to the</font><font color="#E5E5E5"> metadata it will basically</font>

475
00:21:24,389 --> 00:21:30,809
it will basically inject booking

476
00:21:26,459 --> 00:21:32,789
structures into the<font color="#CCCCCC"> allocation so if you</font>

477
00:21:30,809 --> 00:21:35,428
reverse<font color="#E5E5E5"> engineer</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> you realize that</font>

478
00:21:32,789 --> 00:21:37,379
it's<font color="#CCCCCC"> indeed it's calling and space</font>

479
00:21:35,429 --> 00:21:42,899
mallow<font color="#E5E5E5"> which is which is what we saw we</font>

480
00:21:37,379 --> 00:21:46,769
told earlier and EBX<font color="#CCCCCC"> is the length and</font>

481
00:21:42,899 --> 00:21:49,649
it's going<font color="#E5E5E5"> to add 24 before calling</font>

482
00:21:46,769 --> 00:21:52,289
malloc<font color="#E5E5E5"> so basically it's asking malloc</font>

483
00:21:49,649 --> 00:21:55,349
to allocate more than the actual

484
00:21:52,289 --> 00:21:58,289
requests that was made from from the

485
00:21:55,349 --> 00:22:01,109
user perspective<font color="#CCCCCC"> so why</font><font color="#E5E5E5"> does it do that</font>

486
00:21:58,289 --> 00:22:04,320
<font color="#E5E5E5">actually it's adding another header</font>

487
00:22:01,109 --> 00:22:07,799
inside<font color="#E5E5E5"> because we saw we talked we saw</font>

488
00:22:04,320 --> 00:22:11,189
we<font color="#E5E5E5"> said earlier that gel</font><font color="#CCCCCC"> malach has its</font>

489
00:22:07,799 --> 00:22:14,129
own metadata but mempool actually<font color="#CCCCCC"> cisco</font>

490
00:22:11,190 --> 00:22:16,590
adds another layer<font color="#E5E5E5"> so</font><font color="#CCCCCC"> after the</font>

491
00:22:14,130 --> 00:22:18,780
the allocation<font color="#CCCCCC"> we can see that it's it's</font>

492
00:22:16,590 --> 00:22:21,209
storing the<font color="#E5E5E5"> length it's storing the</font>

493
00:22:18,780 --> 00:22:23,250
magic and it's storing a magic at<font color="#CCCCCC"> the</font>

494
00:22:21,210 --> 00:22:25,800
end<font color="#CCCCCC"> ubx being the size so at the</font>

495
00:22:23,250 --> 00:22:27,690
beginning<font color="#CCCCCC"> is</font><font color="#E5E5E5"> during the magic which</font>

496
00:22:25,800 --> 00:22:31,260
which is<font color="#E5E5E5"> quite funny because they use a</font>

497
00:22:27,690 --> 00:22:33,930
lock<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 1:1 see a lock</font><font color="#E5E5E5"> one two three and</font>

498
00:22:31,260 --> 00:22:38,670
a log cdef pretty cool when you look at

499
00:22:33,930 --> 00:22:41,300
them and then you<font color="#E5E5E5"> the another</font>

500
00:22:38,670 --> 00:22:44,940
interesting thing<font color="#E5E5E5"> is they actually store</font>

501
00:22:41,300 --> 00:22:47,610
the color of my log<font color="#CCCCCC"> so basically here</font>

502
00:22:44,940 --> 00:22:49,110
they retrieve the stack pointer<font color="#CCCCCC"> well the</font>

503
00:22:47,610 --> 00:22:52,169
base pointer but<font color="#E5E5E5"> it's points to the</font>

504
00:22:49,110 --> 00:22:55,860
stack<font color="#E5E5E5"> and basically use that to find the</font>

505
00:22:52,170 --> 00:22:59,010
<font color="#CCCCCC">address</font><font color="#E5E5E5"> the return address</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> maroc in</font>

506
00:22:55,860 --> 00:23:01,320
order to store the<font color="#E5E5E5"> return address which</font>

507
00:22:59,010 --> 00:23:05,820
is<font color="#E5E5E5"> basically the color of the function</font>

508
00:23:01,320 --> 00:23:07,500
<font color="#CCCCCC">malik</font><font color="#E5E5E5"> so if we actually now that we've</font>

509
00:23:05,820 --> 00:23:10,760
done the reverse<font color="#E5E5E5"> engineer part we're</font>

510
00:23:07,500 --> 00:23:13,470
<font color="#E5E5E5">going to build the actual header that is</font>

511
00:23:10,760 --> 00:23:16,040
specific to Cisco<font color="#E5E5E5"> this is a structure</font>

512
00:23:13,470 --> 00:23:19,200
like<font color="#CCCCCC"> this you have a magic you have</font>

513
00:23:16,040 --> 00:23:21,270
which<font color="#CCCCCC"> is only the same you have the</font>

514
00:23:19,200 --> 00:23:24,030
length of the data with that<font color="#E5E5E5"> without</font>

515
00:23:21,270 --> 00:23:27,480
this header and the the<font color="#CCCCCC"> al-malik</font><font color="#E5E5E5"> header</font>

516
00:23:24,030 --> 00:23:30,840
and<font color="#E5E5E5"> you have two pointers that</font><font color="#CCCCCC"> points to</font>

517
00:23:27,480 --> 00:23:34,170
another allocated chunk and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you</font>

518
00:23:30,840 --> 00:23:38,250
have a log PC which is<font color="#E5E5E5"> the address of</font>

519
00:23:34,170 --> 00:23:42,030
<font color="#E5E5E5">the color so easy now now we can build a</font>

520
00:23:38,250 --> 00:23:45,450
tool to see what chunk looks like so if

521
00:23:42,030 --> 00:23:47,910
we look at<font color="#CCCCCC"> a specific chunk and specific</font>

522
00:23:45,450 --> 00:23:52,170
<font color="#CCCCCC">unspecified</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> V to specify that it's we</font>

523
00:23:47,910 --> 00:23:54,930
want<font color="#CCCCCC"> to to see rubber city for the chunk</font>

524
00:23:52,170 --> 00:23:59,880
we see the this is the general<font color="#CCCCCC"> option so</font>

525
00:23:54,930 --> 00:24:02,100
it's<font color="#E5E5E5"> gonna contain a footer and and the</font>

526
00:23:59,880 --> 00:24:04,290
size of the chunk and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> we have the</font>

527
00:24:02,100 --> 00:24:06,270
<font color="#CCCCCC">cisco specific header which which</font>

528
00:24:04,290 --> 00:24:11,129
<font color="#CCCCCC">contains the magic we saw our the</font>

529
00:24:06,270 --> 00:24:14,129
<font color="#E5E5E5">lengths and this this double</font><font color="#CCCCCC"> W link</font>

530
00:24:11,130 --> 00:24:16,680
<font color="#CCCCCC">lists pointers and then the a log PC so</font>

531
00:24:14,130 --> 00:24:19,260
here for example we<font color="#E5E5E5"> can see that the</font>

532
00:24:16,680 --> 00:24:21,150
color of this chunk is<font color="#CCCCCC"> Ikey I'd receive</font>

533
00:24:19,260 --> 00:24:23,910
<font color="#CCCCCC">frag</font><font color="#E5E5E5"> it's pretty cool because it means</font>

534
00:24:21,150 --> 00:24:26,070
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can actually track who allocated</font><font color="#E5E5E5"> what</font>

535
00:24:23,910 --> 00:24:27,740
chunks<font color="#E5E5E5"> so that that's something is not</font>

536
00:24:26,070 --> 00:24:30,020
it's not possible to do it<font color="#CCCCCC"> with DLR</font>

537
00:24:27,740 --> 00:24:32,679
but with their<font color="#E5E5E5"> audition from our</font>

538
00:24:30,020 --> 00:24:36,889
perspective it's it's pretty useful<font color="#CCCCCC"> and</font>

539
00:24:32,679 --> 00:24:39,740
<font color="#E5E5E5">then we if we don't specify - V for our</font>

540
00:24:36,890 --> 00:24:41,720
chunk we can just print like a simple

541
00:24:39,740 --> 00:24:44,270
representation of the chunk so the way

542
00:24:41,720 --> 00:24:47,059
we<font color="#E5E5E5"> chose to</font><font color="#CCCCCC"> represent things</font><font color="#E5E5E5"> is we print</font>

543
00:24:44,270 --> 00:24:49,520
the address<font color="#E5E5E5"> then M formal exchange or F</font>

544
00:24:47,059 --> 00:24:52,220
<font color="#CCCCCC">for free Chang</font><font color="#E5E5E5"> then the size then the</font>

545
00:24:49,520 --> 00:24:54,770
flag that<font color="#E5E5E5"> correspond to if</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> current</font>

546
00:24:52,220 --> 00:24:56,510
in news<font color="#E5E5E5"> previously news and then the</font>

547
00:24:54,770 --> 00:24:58,910
<font color="#E5E5E5">allowed PC</font><font color="#CCCCCC"> because we found it's pretty</font>

548
00:24:56,510 --> 00:25:01,790
cool<font color="#CCCCCC"> to to have</font><font color="#E5E5E5"> to know the allowed PC</font>

549
00:24:58,910 --> 00:25:04,190
so we just decided<font color="#CCCCCC"> to print</font><font color="#E5E5E5"> it as well</font>

550
00:25:01,790 --> 00:25:06,170
but we didn't print<font color="#CCCCCC"> all our stuff in the</font>

551
00:25:04,190 --> 00:25:08,740
<font color="#E5E5E5">simple representation</font><font color="#CCCCCC"> and here for</font>

552
00:25:06,170 --> 00:25:14,690
<font color="#CCCCCC">example for this</font><font color="#E5E5E5"> chunk if we take the</font>

553
00:25:08,740 --> 00:25:17,809
forward pointer which is<font color="#CCCCCC"> M</font><font color="#E5E5E5"> H F D link -</font>

554
00:25:14,690 --> 00:25:19,610
<font color="#CCCCCC">8</font><font color="#E5E5E5"> - punch to the DL manag header and we</font>

555
00:25:17,809 --> 00:25:21,320
print it<font color="#E5E5E5"> we can see that it still</font>

556
00:25:19,610 --> 00:25:24,050
something<font color="#E5E5E5"> valid and it's another chunk</font>

557
00:25:21,320 --> 00:25:27,370
<font color="#CCCCCC">that was allocated from I key so that's</font>

558
00:25:24,050 --> 00:25:32,928
but it means<font color="#E5E5E5"> our opportunities working</font>

559
00:25:27,370 --> 00:25:35,419
here we have another<font color="#E5E5E5"> example where yeah</font>

560
00:25:32,929 --> 00:25:37,700
that's the same chunk as here<font color="#E5E5E5"> but with</font>

561
00:25:35,420 --> 00:25:41,690
detailed information just<font color="#E5E5E5"> for them</font>

562
00:25:37,700 --> 00:25:43,600
<font color="#E5E5E5">completeness so if we take that yeah</font>

563
00:25:41,690 --> 00:25:48,620
<font color="#E5E5E5">that's just what I say</font>

564
00:25:43,600 --> 00:25:51,469
okay so if you look<font color="#CCCCCC"> at actually the</font>

565
00:25:48,620 --> 00:25:54,439
<font color="#CCCCCC">Cisco</font><font color="#E5E5E5"> shell you can see that there</font><font color="#CCCCCC"> is a</font>

566
00:25:51,470 --> 00:25:57,080
common which<font color="#CCCCCC"> is show mem detail which</font>

567
00:25:54,440 --> 00:26:00,110
<font color="#E5E5E5">basically allow you to print information</font>

568
00:25:57,080 --> 00:26:03,590
<font color="#E5E5E5">about allocated</font><font color="#CCCCCC"> chunks and free chunks</font>

569
00:26:00,110 --> 00:26:04,790
<font color="#E5E5E5">and this is a hint that something is</font>

570
00:26:03,590 --> 00:26:07,669
going on<font color="#E5E5E5"> under the hood because usually</font>

571
00:26:04,790 --> 00:26:08,928
a<font color="#CCCCCC"> HIPAA regular will only track free</font>

572
00:26:07,670 --> 00:26:11,300
chunk so it wouldn't know how many

573
00:26:08,929 --> 00:26:14,120
chunks<font color="#E5E5E5"> were allocated but because they</font>

574
00:26:11,300 --> 00:26:17,919
added<font color="#E5E5E5"> a specific header they are able to</font>

575
00:26:14,120 --> 00:26:21,949
<font color="#E5E5E5">track free and allocated chunks</font><font color="#CCCCCC"> just</font>

576
00:26:17,920 --> 00:26:24,650
interesting another interesting thing is

577
00:26:21,950 --> 00:26:27,440
when a chunk is freed there is no safe

578
00:26:24,650 --> 00:26:30,350
and linking and meaning that<font color="#E5E5E5"> even though</font>

579
00:26:27,440 --> 00:26:33,559
the<font color="#E5E5E5"> gel mark would have</font><font color="#CCCCCC"> safer linking</font>

580
00:26:30,350 --> 00:26:35,990
<font color="#CCCCCC">their mempool header</font><font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> Hammett's</font>

581
00:26:33,559 --> 00:26:39,320
<font color="#CCCCCC">say anything even</font><font color="#E5E5E5"> though I</font><font color="#CCCCCC"> said earlier</font>

582
00:26:35,990 --> 00:26:41,360
<font color="#E5E5E5">that's anyway the two version version</font>

583
00:26:39,320 --> 00:26:43,970
<font color="#E5E5E5">283 doesn't have safe and anything</font>

584
00:26:41,360 --> 00:26:45,889
anyway<font color="#E5E5E5"> it's actually interesting to see</font>

585
00:26:43,970 --> 00:26:48,440
that<font color="#E5E5E5"> it evolved and the recent version</font>

586
00:26:45,890 --> 00:26:49,670
now has<font color="#CCCCCC"> anything but the mempool still</font>

587
00:26:48,440 --> 00:26:52,040
has safe

588
00:26:49,670 --> 00:26:56,270
the<font color="#CCCCCC"> mempool still doesn't have safe and</font>

589
00:26:52,040 --> 00:26:57,770
<font color="#CCCCCC">linking</font><font color="#E5E5E5"> so anyway this this the fact</font>

590
00:26:56,270 --> 00:27:00,080
that it<font color="#E5E5E5"> doesn't have same</font><font color="#CCCCCC"> fun inking is</font>

591
00:26:57,770 --> 00:27:04,600
<font color="#E5E5E5">used by the</font><font color="#CCCCCC"> exodus</font><font color="#E5E5E5"> Intel</font><font color="#CCCCCC"> I give it</font><font color="#E5E5E5"> to</font>

592
00:27:00,080 --> 00:27:06,830
exploit<font color="#E5E5E5"> together to get me rights and</font>

593
00:27:04,600 --> 00:27:08,600
another<font color="#CCCCCC"> interesting thing about these</font>

594
00:27:06,830 --> 00:27:11,449
mental<font color="#E5E5E5"> structures is that if you have a</font>

595
00:27:08,600 --> 00:27:14,719
memory<font color="#CCCCCC"> Revolution</font><font color="#E5E5E5"> bag where you can leak</font>

596
00:27:11,450 --> 00:27:16,669
data from the heap you can actually get

597
00:27:14,720 --> 00:27:20,030
<font color="#E5E5E5">some really useful information because</font>

598
00:27:16,669 --> 00:27:22,610
<font color="#CCCCCC">you have the pointers for the from the</font>

599
00:27:20,030 --> 00:27:25,610
top for the<font color="#E5E5E5"> W</font><font color="#CCCCCC"> link</font><font color="#E5E5E5"> list which basically</font>

600
00:27:22,610 --> 00:27:29,750
leak in pointers to the heap<font color="#E5E5E5"> and you had</font>

601
00:27:25,610 --> 00:27:34,340
<font color="#CCCCCC">these pointers to the text</font><font color="#E5E5E5"> section which</font>

602
00:27:29,750 --> 00:27:37,610
is a function powder and basically you

603
00:27:34,340 --> 00:27:42,790
you leak that an<font color="#E5E5E5"> address from the text</font>

604
00:27:37,610 --> 00:27:46,928
so it can be useful to bypass<font color="#E5E5E5"> a</font><font color="#CCCCCC"> etc okay</font>

605
00:27:42,790 --> 00:27:53,720
<font color="#E5E5E5">so we know they use the analog we know</font>

606
00:27:46,929 --> 00:27:56,570
they use this<font color="#E5E5E5"> M space only way but</font>

607
00:27:53,720 --> 00:28:00,260
<font color="#E5E5E5">actually one interesting</font><font color="#CCCCCC"> thing is Delman</font>

608
00:27:56,570 --> 00:28:03,530
<font color="#CCCCCC">lock has security features and</font><font color="#E5E5E5"> it</font>

609
00:28:00,260 --> 00:28:05,210
shouldn't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> easy to exploit but</font>

610
00:28:03,530 --> 00:28:07,668
we're gonna see<font color="#E5E5E5"> that actually C square</font>

611
00:28:05,210 --> 00:28:13,040
say I added modified the code and

612
00:28:07,669 --> 00:28:15,470
actually<font color="#E5E5E5"> made</font><font color="#CCCCCC"> it made it worse so</font><font color="#E5E5E5"> this</font>

613
00:28:13,040 --> 00:28:19,399
is the dilma lock header which<font color="#CCCCCC"> is before</font>

614
00:28:15,470 --> 00:28:23,179
the the<font color="#CCCCCC"> cisco main pool header so it has</font>

615
00:28:19,400 --> 00:28:25,370
a preferred the size which is called

616
00:28:23,179 --> 00:28:28,309
head and then for free<font color="#E5E5E5"> chunk you have</font>

617
00:28:25,370 --> 00:28:31,250
these free<font color="#E5E5E5"> boundaries but was into</font>

618
00:28:28,309 --> 00:28:34,639
<font color="#CCCCCC">injury</font><font color="#E5E5E5"> what is interesting is usually</font>

619
00:28:31,250 --> 00:28:36,980
<font color="#E5E5E5">heap managers reuse the first field for</font>

620
00:28:34,640 --> 00:28:38,660
as a spillover when the chunk<font color="#E5E5E5"> is</font>

621
00:28:36,980 --> 00:28:44,900
allocated because<font color="#E5E5E5"> if the chunk is</font>

622
00:28:38,660 --> 00:28:46,760
allocated well usually this this field

623
00:28:44,900 --> 00:28:48,530
will be will hold the size of the

624
00:28:46,760 --> 00:28:51,440
previous<font color="#CCCCCC"> track</font><font color="#E5E5E5"> but if the site if the</font>

625
00:28:48,530 --> 00:28:52,820
check is allocated you can reuse<font color="#CCCCCC"> that</font>

626
00:28:51,440 --> 00:28:57,340
and base

627
00:28:52,820 --> 00:28:59,658
keypad and use that as a spillover<font color="#E5E5E5"> so</font>

628
00:28:57,340 --> 00:29:02,600
it's really<font color="#CCCCCC"> handy for HIPAA regular</font>

629
00:28:59,659 --> 00:29:05,809
<font color="#E5E5E5">because it can save space</font><font color="#CCCCCC"> and simplify</font>

630
00:29:02,600 --> 00:29:08,059
the lineman's but for<font color="#E5E5E5"> DL for the newest</font>

631
00:29:05,809 --> 00:29:10,759
version of<font color="#CCCCCC"> DL manag basically if you</font>

632
00:29:08,059 --> 00:29:13,190
define footers instead of using this

633
00:29:10,759 --> 00:29:15,110
part of memory as a<font color="#E5E5E5"> spillover when you</font>

634
00:29:13,190 --> 00:29:19,909
create an<font color="#CCCCCC"> image chunk</font><font color="#E5E5E5"> it will basically</font>

635
00:29:15,110 --> 00:29:22,580
store into the the pref foot of the

636
00:29:19,909 --> 00:29:25,159
adjacent shank<font color="#E5E5E5"> spot some specific magic</font>

637
00:29:22,580 --> 00:29:26,360
<font color="#CCCCCC">as a</font><font color="#E5E5E5"> security measure so it's not called</font>

638
00:29:25,159 --> 00:29:29,539
<font color="#CCCCCC">pref size</font><font color="#E5E5E5"> anymore</font>

639
00:29:26,360 --> 00:29:32,360
like previous<font color="#E5E5E5"> size but but is its it's</font>

640
00:29:29,539 --> 00:29:34,970
like a it's<font color="#E5E5E5"> like a global cookie which</font>

641
00:29:32,360 --> 00:29:36,860
the purpose is if you corrupt the

642
00:29:34,970 --> 00:29:39,080
<font color="#CCCCCC">adjacent chunk you don't know the cookie</font>

643
00:29:36,860 --> 00:29:43,729
so you it's<font color="#E5E5E5"> going to break and HIPAA</font>

644
00:29:39,080 --> 00:29:45,019
regular is gonna abort<font color="#CCCCCC"> or</font><font color="#E5E5E5"> assert well</font>

645
00:29:43,730 --> 00:29:49,149
actually if you look<font color="#E5E5E5"> at the the source</font>

646
00:29:45,019 --> 00:29:51,830
code<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> anak it says this check</font>

647
00:29:49,149 --> 00:29:54,168
<font color="#CCCCCC">words are</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same within</font><font color="#E5E5E5"> each execution</font>

648
00:29:51,830 --> 00:29:56,149
<font color="#E5E5E5">of program using malloc but differs</font>

649
00:29:54,169 --> 00:29:58,789
across execution so<font color="#CCCCCC"> externally crafted</font>

650
00:29:56,149 --> 00:30:00,500
<font color="#CCCCCC">fake chunks</font><font color="#E5E5E5"> cannot be freed so</font><font color="#CCCCCC"> that's</font>

651
00:29:58,789 --> 00:30:02,750
exactly what<font color="#CCCCCC"> I</font><font color="#E5E5E5"> said if you if you have a</font>

652
00:30:00,500 --> 00:30:05,149
chunk before<font color="#E5E5E5"> another chunk</font><font color="#CCCCCC"> if you</font>

653
00:30:02,750 --> 00:30:08,629
corrupt the<font color="#CCCCCC"> preffered</font><font color="#E5E5E5"> you don't know in</font>

654
00:30:05,149 --> 00:30:11,719
advance<font color="#E5E5E5"> what</font><font color="#CCCCCC"> the cookie is</font><font color="#E5E5E5"> you're not</font>

655
00:30:08,629 --> 00:30:13,959
gonna<font color="#E5E5E5"> be able to do anything so how does</font>

656
00:30:11,720 --> 00:30:13,960
it<font color="#E5E5E5"> work</font>

657
00:30:14,019 --> 00:30:20,419
refuge is calculated when the chunk is

658
00:30:18,200 --> 00:30:23,299
allocated so if you have the address of

659
00:30:20,419 --> 00:30:25,700
<font color="#CCCCCC">the N state</font><font color="#E5E5E5"> M P the pointer to the</font><font color="#CCCCCC"> image</font>

660
00:30:23,299 --> 00:30:27,470
chunk and<font color="#CCCCCC"> s the size of the chunk</font><font color="#E5E5E5"> it</font>

661
00:30:25,700 --> 00:30:30,860
doesn't mean it's<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> basically</font>

662
00:30:27,470 --> 00:30:34,129
take<font color="#E5E5E5"> the P the chunk</font><font color="#CCCCCC"> plus the size to</font>

663
00:30:30,860 --> 00:30:37,459
point to the next<font color="#E5E5E5"> previous to the next</font>

664
00:30:34,129 --> 00:30:40,459
chunk<font color="#E5E5E5"> take the</font><font color="#CCCCCC"> pre-flood field field and</font>

665
00:30:37,460 --> 00:30:44,379
set it to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> address of the</font><font color="#E5E5E5"> M States X</font>

666
00:30:40,460 --> 00:30:48,139
so this magic<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> magic is like</font><font color="#E5E5E5"> a</font>

667
00:30:44,379 --> 00:30:50,959
global magic<font color="#E5E5E5"> so we can see that the</font>

668
00:30:48,139 --> 00:30:55,100
security relies on the inability<font color="#E5E5E5"> to</font>

669
00:30:50,960 --> 00:30:57,490
predict both<font color="#E5E5E5"> m and</font><font color="#CCCCCC"> the magic if you look</font>

670
00:30:55,100 --> 00:31:00,139
at the source code<font color="#E5E5E5"> of DMARC again</font>

671
00:30:57,490 --> 00:31:02,149
<font color="#CCCCCC">Emperor magic is initialized by the</font>

672
00:31:00,139 --> 00:31:06,229
certain function called init parents and

673
00:31:02,149 --> 00:31:08,719
<font color="#E5E5E5">it uses</font><font color="#CCCCCC"> either a deadly random to read</font>

674
00:31:06,230 --> 00:31:14,030
the number<font color="#E5E5E5"> of bytes to to set this value</font>

675
00:31:08,720 --> 00:31:17,510
to<font color="#CCCCCC"> a random value or call</font><font color="#E5E5E5"> time zero okay</font>

676
00:31:14,030 --> 00:31:20,389
<font color="#E5E5E5">so it</font><font color="#CCCCCC"> looks it's secure and then you</font>

677
00:31:17,510 --> 00:31:21,770
need<font color="#CCCCCC"> to have additional checks</font><font color="#E5E5E5"> when the</font>

678
00:31:20,390 --> 00:31:24,350
chunk<font color="#E5E5E5"> is huntable to check that the</font>

679
00:31:21,770 --> 00:31:27,670
cookie is correct<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so the thing</font>

680
00:31:24,350 --> 00:31:29,929
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> done is when you free a chunk</font>

681
00:31:27,670 --> 00:31:33,950
<font color="#E5E5E5">it's going to take the address of the</font>

682
00:31:29,930 --> 00:31:37,480
other chunk make it point<font color="#E5E5E5"> to before the</font>

683
00:31:33,950 --> 00:31:41,060
general<font color="#CCCCCC"> Chiang get the end state</font><font color="#E5E5E5"> for</font>

684
00:31:37,480 --> 00:31:44,180
this chunk and<font color="#CCCCCC"> then check the</font><font color="#E5E5E5"> magic from</font>

685
00:31:41,060 --> 00:31:48,080
the M States<font color="#E5E5E5"> so how does it</font><font color="#CCCCCC"> work get'em</font>

686
00:31:44,180 --> 00:31:51,560
States for is<font color="#E5E5E5"> actually taking the chunk</font>

687
00:31:48,080 --> 00:31:54,889
<font color="#E5E5E5">plus the size to access the private prep</font>

688
00:31:51,560 --> 00:31:57,020
food field of the adjacent<font color="#E5E5E5"> shank XOR</font>

689
00:31:54,890 --> 00:31:58,850
that with<font color="#CCCCCC"> a global and</font><font color="#E5E5E5"> we should it's</font>

690
00:31:57,020 --> 00:32:02,870
basically the<font color="#E5E5E5"> reverse operation as when</font>

691
00:31:58,850 --> 00:32:05,080
we we set it at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> beginning so we are</font>

692
00:32:02,870 --> 00:32:07,310
<font color="#CCCCCC">supposed to get an M</font><font color="#E5E5E5"> State address and</font>

693
00:32:05,080 --> 00:32:10,460
then once we have this M<font color="#E5E5E5"> State address</font>

694
00:32:07,310 --> 00:32:13,669
<font color="#CCCCCC">we</font><font color="#E5E5E5"> basically just access the magic</font><font color="#CCCCCC"> and</font>

695
00:32:10,460 --> 00:32:15,140
it should be the same as our global<font color="#E5E5E5"> if</font>

696
00:32:13,670 --> 00:32:17,380
we don't get<font color="#E5E5E5"> that it means something</font>

697
00:32:15,140 --> 00:32:22,820
<font color="#E5E5E5">went wrong so it's an interesting</font>

698
00:32:17,380 --> 00:32:26,060
<font color="#CCCCCC">mechanism in that if</font><font color="#E5E5E5"> we define</font><font color="#CCCCCC"> n spaces</font>

699
00:32:22,820 --> 00:32:32,389
and footers<font color="#E5E5E5"> we have this global cookie</font>

700
00:32:26,060 --> 00:32:34,399
<font color="#E5E5E5">so how is it implemented into a say the</font>

701
00:32:32,390 --> 00:32:36,440
first thing<font color="#E5E5E5"> we can notice</font><font color="#CCCCCC"> is they</font><font color="#E5E5E5"> don't</font>

702
00:32:34,400 --> 00:32:38,630
<font color="#E5E5E5">use dev random because if you reverse</font>

703
00:32:36,440 --> 00:32:41,000
engineer<font color="#E5E5E5"> the function you're going to</font>

704
00:32:38,630 --> 00:32:42,560
call that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> creating</font><font color="#E5E5E5"> space with good</font>

705
00:32:41,000 --> 00:32:48,110
base<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> gonna see that there is</font><font color="#CCCCCC"> a</font>

706
00:32:42,560 --> 00:32:50,510
call to<font color="#E5E5E5"> time zero so it uses time zero</font>

707
00:32:48,110 --> 00:32:53,949
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> copying a random cookie from</font>

708
00:32:50,510 --> 00:32:58,010
<font color="#CCCCCC">dev you random the other thing is that</font>

709
00:32:53,950 --> 00:33:01,210
<font color="#E5E5E5">is interesting is</font><font color="#CCCCCC"> because some for some</font>

710
00:32:58,010 --> 00:33:04,220
reason it's called really early at boot

711
00:33:01,210 --> 00:33:09,970
wrap<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> wrap time zero</font><font color="#E5E5E5"> actually return</font>

712
00:33:04,220 --> 00:33:13,850
a static<font color="#E5E5E5"> value which is this value and</font>

713
00:33:09,970 --> 00:33:16,340
this corresponds to<font color="#CCCCCC"> an NTP</font><font color="#E5E5E5"> time stamp</font>

714
00:33:13,850 --> 00:33:18,469
which<font color="#E5E5E5"> is the new epoch but what is it</font>

715
00:33:16,340 --> 00:33:19,929
<font color="#E5E5E5">what is interesting is it's it's</font>

716
00:33:18,470 --> 00:33:23,660
constant

717
00:33:19,930 --> 00:33:25,880
so what can we<font color="#CCCCCC"> do with</font><font color="#E5E5E5"> that week all</font>

718
00:33:23,660 --> 00:33:28,820
right time<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> returned</font><font color="#E5E5E5"> the constants</font>

719
00:33:25,880 --> 00:33:30,740
<font color="#E5E5E5">and then we see a bunch of operation</font><font color="#CCCCCC"> XO</font>

720
00:33:28,820 --> 00:33:34,520
with five high five<font color="#E5E5E5"> which is basically</font>

721
00:33:30,740 --> 00:33:37,630
these three operations so<font color="#CCCCCC"> times 0 is</font>

722
00:33:34,520 --> 00:33:43,160
<font color="#E5E5E5">constants XO constants it gives us a</font>

723
00:33:37,630 --> 00:33:45,410
constant<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> confirm</font>

724
00:33:43,160 --> 00:33:46,850
that with<font color="#E5E5E5"> our tool because the</font><font color="#CCCCCC"> dalm</font>

725
00:33:45,410 --> 00:33:48,440
<font color="#E5E5E5">state so I didn't show the whole</font>

726
00:33:46,850 --> 00:33:50,780
structure it like a big<font color="#E5E5E5"> structure but</font>

727
00:33:48,440 --> 00:33:52,910
the magic<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is stored is always the</font>

728
00:33:50,780 --> 00:33:57,020
same<font color="#CCCCCC"> it doesn't change which makes sense</font>

729
00:33:52,910 --> 00:33:59,990
<font color="#E5E5E5">now we know why and if you</font><font color="#CCCCCC"> actually do</font>

730
00:33:57,020 --> 00:34:04,460
the<font color="#E5E5E5"> operation to set a prayerful</font>

731
00:33:59,990 --> 00:34:05,990
<font color="#E5E5E5">into a chunk n space X</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> the magic if</font>

732
00:34:04,460 --> 00:34:10,370
you take for example this and space

733
00:34:05,990 --> 00:34:15,050
<font color="#E5E5E5">value</font><font color="#CCCCCC"> X all this</font><font color="#E5E5E5"> it gives you this magic</font>

734
00:34:10,370 --> 00:34:18,850
<font color="#E5E5E5">and we could see that in our chunks the</font>

735
00:34:15,050 --> 00:34:21,380
preffered is always<font color="#E5E5E5"> set to this is it</font>

736
00:34:18,850 --> 00:34:23,659
<font color="#E5E5E5">it's still rely on on the M State</font>

737
00:34:21,380 --> 00:34:26,960
address right we still need to know<font color="#E5E5E5"> the</font>

738
00:34:23,659 --> 00:34:29,120
<font color="#CCCCCC">M state</font><font color="#E5E5E5"> address well on an SI 505 where</font>

739
00:34:26,960 --> 00:34:31,100
there is no SLR we<font color="#E5E5E5"> only observed two</font>

740
00:34:29,120 --> 00:34:33,199
different<font color="#CCCCCC"> addresses for the my name</font>

741
00:34:31,100 --> 00:34:35,569
<font color="#CCCCCC">states</font><font color="#E5E5E5"> so in meaning we have two</font>

742
00:34:33,199 --> 00:34:37,549
different<font color="#E5E5E5"> address and we have two</font>

743
00:34:35,570 --> 00:34:40,190
<font color="#CCCCCC">different values</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> right it's still</font>

744
00:34:37,550 --> 00:34:41,720
<font color="#E5E5E5">online in a</font><font color="#CCCCCC"> non-ideal from an</font>

745
00:34:40,190 --> 00:34:43,070
expectation point of view<font color="#E5E5E5"> because we</font>

746
00:34:41,719 --> 00:34:45,830
still<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to override</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> pray fruit</font>

747
00:34:43,070 --> 00:34:48,440
for field and if we<font color="#E5E5E5"> don't know it in</font>

748
00:34:45,830 --> 00:34:50,899
advance<font color="#CCCCCC"> it's really hard</font><font color="#E5E5E5"> well it turns</font>

749
00:34:48,440 --> 00:34:54,620
out there<font color="#CCCCCC"> is another Christianisation</font>

750
00:34:50,899 --> 00:34:59,750
<font color="#CCCCCC">cisco made which actually makes it all</font>

751
00:34:54,620 --> 00:35:02,509
irrelevant<font color="#E5E5E5"> anyway so what did they do if</font>

752
00:34:59,750 --> 00:35:06,050
you<font color="#E5E5E5"> look at the</font><font color="#CCCCCC"> unmarked</font><font color="#E5E5E5"> 283 you have</font>

753
00:35:02,510 --> 00:35:08,650
this<font color="#E5E5E5"> n space free function which if</font>

754
00:35:06,050 --> 00:35:11,420
footer is defined<font color="#E5E5E5"> like I said it's gonna</font>

755
00:35:08,650 --> 00:35:14,150
get the M<font color="#E5E5E5"> States and then check the</font>

756
00:35:11,420 --> 00:35:16,640
magic<font color="#E5E5E5"> but if you look at at Cisco</font>

757
00:35:14,150 --> 00:35:18,890
implementation what they did is they're

758
00:35:16,640 --> 00:35:20,540
checking if the M space is<font color="#CCCCCC"> normal and if</font>

759
00:35:18,890 --> 00:35:24,379
they know<font color="#CCCCCC"> they</font><font color="#E5E5E5"> basically trust the M</font>

760
00:35:20,540 --> 00:35:28,460
space and they don't they don't try to

761
00:35:24,380 --> 00:35:32,180
get<font color="#E5E5E5"> the M space from the chunk itself</font>

762
00:35:28,460 --> 00:35:33,130
meaning when they check the magic since

763
00:35:32,180 --> 00:35:37,009
the<font color="#E5E5E5"> trusty Amster</font>

764
00:35:33,130 --> 00:35:38,240
<font color="#CCCCCC">them space is going to access the magic</font>

765
00:35:37,010 --> 00:35:41,360
from the end space and it's going<font color="#E5E5E5"> to be</font>

766
00:35:38,240 --> 00:35:43,339
valued all the time right<font color="#E5E5E5"> so and the</font>

767
00:35:41,360 --> 00:35:45,680
<font color="#CCCCCC">thing is all</font><font color="#E5E5E5"> the function</font><font color="#CCCCCC"> actually</font>

768
00:35:43,340 --> 00:35:48,020
internally use<font color="#CCCCCC"> em space with a space</font>

769
00:35:45,680 --> 00:35:50,660
nominal so it<font color="#CCCCCC"> assume it's correct em</font>

770
00:35:48,020 --> 00:35:53,240
space<font color="#E5E5E5"> doesn't rely on using the pointers</font>

771
00:35:50,660 --> 00:35:56,529
derived from<font color="#CCCCCC"> fooder</font><font color="#E5E5E5"> and we don't even</font>

772
00:35:53,240 --> 00:35:59,479
<font color="#E5E5E5">have to guess</font><font color="#CCCCCC"> the footer</font><font color="#E5E5E5"> at all so</font>

773
00:35:56,530 --> 00:36:01,850
interestingly you can<font color="#E5E5E5"> confirm</font><font color="#CCCCCC"> that by</font>

774
00:35:59,480 --> 00:36:04,880
using their<font color="#CCCCCC"> IQ exploits</font><font color="#E5E5E5"> that they</font>

775
00:36:01,850 --> 00:36:07,580
<font color="#E5E5E5">release because they use a static prep</font>

776
00:36:04,880 --> 00:36:11,810
<font color="#E5E5E5">food that when you decode it it gives</font><font color="#CCCCCC"> an</font>

777
00:36:07,580 --> 00:36:13,819
<font color="#CCCCCC">m-space address at this c8 address but</font>

778
00:36:11,810 --> 00:36:15,620
in our case we did we didn't know we

779
00:36:13,820 --> 00:36:17,870
didn't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> an M space at</font><font color="#E5E5E5"> this address</font>

780
00:36:15,620 --> 00:36:20,480
<font color="#E5E5E5">we only had we only uncultured</font>

781
00:36:17,870 --> 00:36:23,690
two different<font color="#CCCCCC"> addresses but</font><font color="#E5E5E5"> if you try</font>

782
00:36:20,480 --> 00:36:25,640
their exploits on your<font color="#CCCCCC"> race a</font><font color="#E5E5E5"> it still</font>

783
00:36:23,690 --> 00:36:37,270
worked<font color="#E5E5E5"> because</font><font color="#CCCCCC"> they don't check the</font>

784
00:36:25,640 --> 00:36:41,089
<font color="#E5E5E5">actual magic so for Francisco</font><font color="#CCCCCC"> excuse</font>

785
00:36:37,270 --> 00:36:43,160
it's it's<font color="#E5E5E5"> quite hard</font><font color="#CCCCCC"> to implement like a</font>

786
00:36:41,090 --> 00:36:47,570
device which handles<font color="#CCCCCC"> a million of</font>

787
00:36:43,160 --> 00:36:49,850
packets<font color="#E5E5E5"> every</font><font color="#CCCCCC"> day or more so basically</font>

788
00:36:47,570 --> 00:36:53,330
they try to do<font color="#E5E5E5"> something performant</font>

789
00:36:49,850 --> 00:36:55,310
right and and<font color="#E5E5E5"> so they they don't want</font><font color="#CCCCCC"> to</font>

790
00:36:53,330 --> 00:36:59,299
do extra check where there is no need<font color="#CCCCCC"> to</font>

791
00:36:55,310 --> 00:37:01,370
well in terms<font color="#E5E5E5"> of security we can see</font>

792
00:36:59,300 --> 00:37:04,580
that it<font color="#CCCCCC"> actually allowed us to to</font>

793
00:37:01,370 --> 00:37:07,670
<font color="#CCCCCC">override chunks and code things because</font>

794
00:37:04,580 --> 00:37:13,790
there is no check so what is what is

795
00:37:07,670 --> 00:37:21,410
this good<font color="#CCCCCC"> for oh</font><font color="#E5E5E5"> let's use our tools</font><font color="#CCCCCC"> to</font>

796
00:37:13,790 --> 00:37:23,450
rule them all so one thing<font color="#E5E5E5"> we can do</font>

797
00:37:21,410 --> 00:37:26,240
with our tool is<font color="#E5E5E5"> we can send</font><font color="#CCCCCC"> different</font>

798
00:37:23,450 --> 00:37:30,470
chunks<font color="#E5E5E5"> of the same size and we can count</font>

799
00:37:26,240 --> 00:37:34,540
<font color="#E5E5E5">where they end up being stored so we see</font>

800
00:37:30,470 --> 00:37:39,890
for<font color="#CCCCCC"> example that</font><font color="#E5E5E5"> the small bin for c0</font>

801
00:37:34,540 --> 00:37:43,070
chunks is empty then<font color="#E5E5E5"> we send packets</font><font color="#CCCCCC"> of</font>

802
00:37:39,890 --> 00:37:44,900
specific fragment of specific size for

803
00:37:43,070 --> 00:37:46,220
example<font color="#CCCCCC"> with</font><font color="#E5E5E5"> lots of fragments</font><font color="#CCCCCC"> of the of</font>

804
00:37:44,900 --> 00:37:49,580
the same size<font color="#E5E5E5"> seven</font>

805
00:37:46,220 --> 00:37:52,759
eight bytes<font color="#E5E5E5"> itv1 fragments which end up</font>

806
00:37:49,580 --> 00:37:56,810
being allocated into c0 byte chunks<font color="#E5E5E5"> and</font>

807
00:37:52,760 --> 00:38:02,660
then we can check see that our chunks

808
00:37:56,810 --> 00:38:05,570
are allocated into<font color="#E5E5E5"> this bin for example</font>

809
00:38:02,660 --> 00:38:07,040
if we take<font color="#CCCCCC"> the first one and we use DL</font>

810
00:38:05,570 --> 00:38:11,540
<font color="#CCCCCC">Chang</font><font color="#E5E5E5"> to print the information we can</font>

811
00:38:07,040 --> 00:38:17,359
<font color="#E5E5E5">see that it's been it's been allocated</font>

812
00:38:11,540 --> 00:38:19,849
by by the<font color="#CCCCCC"> ID stack and here we can</font><font color="#E5E5E5"> even</font>

813
00:38:17,359 --> 00:38:22,250
see that<font color="#E5E5E5"> it's been freed afterwards</font>

814
00:38:19,849 --> 00:38:27,070
<font color="#E5E5E5">because it has the F flag and it's been</font>

815
00:38:22,250 --> 00:38:29,780
freed by a Nike<font color="#E5E5E5"> free or frogs function</font>

816
00:38:27,070 --> 00:38:33,920
so we know it comes for from our<font color="#CCCCCC"> Feng</font>

817
00:38:29,780 --> 00:38:35,810
<font color="#CCCCCC">Shui so the next thing we can</font><font color="#E5E5E5"> do is we</font>

818
00:38:33,920 --> 00:38:39,109
want to neither the<font color="#E5E5E5"> heap layouts because</font>

819
00:38:35,810 --> 00:38:41,240
it's cool to<font color="#E5E5E5"> know that it's out showing</font>

820
00:38:39,109 --> 00:38:43,220
the good size but we want them to<font color="#CCCCCC"> be</font>

821
00:38:41,240 --> 00:38:46,250
adjacent<font color="#CCCCCC"> because we want to</font><font color="#E5E5E5"> curb them</font>

822
00:38:43,220 --> 00:38:49,970
say<font color="#CCCCCC"> something that we control so for</font>

823
00:38:46,250 --> 00:38:52,190
<font color="#E5E5E5">example if we print which</font><font color="#CCCCCC"> does she as</font>

824
00:38:49,970 --> 00:38:56,020
count<font color="#E5E5E5"> 10 chunks</font><font color="#CCCCCC"> we're going to print</font>

825
00:38:52,190 --> 00:38:59,480
tensions<font color="#E5E5E5"> and we can see that they're</font><font color="#CCCCCC"> all</font>

826
00:38:56,020 --> 00:39:02,540
from<font color="#CCCCCC"> IQ receiver processed data which is</font>

827
00:38:59,480 --> 00:39:04,609
pointing to our data and<font color="#CCCCCC"> we can see that</font>

828
00:39:02,540 --> 00:39:08,119
<font color="#E5E5E5">there are some free chunks</font><font color="#CCCCCC"> in between so</font>

829
00:39:04,609 --> 00:39:09,920
we're going to see why so we can see<font color="#CCCCCC"> we</font>

830
00:39:08,119 --> 00:39:12,410
have<font color="#CCCCCC"> some allocated chunks and some</font><font color="#E5E5E5"> free</font>

831
00:39:09,920 --> 00:39:16,670
chance so it gives us<font color="#E5E5E5"> some kind</font><font color="#CCCCCC"> of</font>

832
00:39:12,410 --> 00:39:21,500
abstraction if we get a<font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more</font>

833
00:39:16,670 --> 00:39:22,300
detail<font color="#E5E5E5"> here we are we are analyzing a</font>

834
00:39:21,500 --> 00:39:26,630
free chunk

835
00:39:22,300 --> 00:39:29,780
so this free chunk that's cool it's been

836
00:39:26,630 --> 00:39:32,510
free by<font color="#CCCCCC"> Aiki but actually if we free if</font>

837
00:39:29,780 --> 00:39:34,700
we show the detail of the chunk with

838
00:39:32,510 --> 00:39:38,390
<font color="#E5E5E5">Dodgeville for verbals</font><font color="#CCCCCC"> and dash X</font><font color="#E5E5E5"> for</font>

839
00:39:34,700 --> 00:39:41,598
<font color="#E5E5E5">hex dump</font><font color="#CCCCCC"> we can see that it has metadata</font>

840
00:39:38,390 --> 00:39:44,359
which is the deal<font color="#CCCCCC"> malloc</font><font color="#E5E5E5"> plus the main</font>

841
00:39:41,599 --> 00:39:46,880
pool header and then the data<font color="#E5E5E5"> actually</font>

842
00:39:44,359 --> 00:39:49,190
contain the<font color="#CCCCCC"> bytes we send a</font><font color="#E5E5E5"> 42 42</font>

843
00:39:46,880 --> 00:39:51,170
<font color="#E5E5E5">because we send we send</font><font color="#CCCCCC"> acid that</font>

844
00:39:49,190 --> 00:39:54,170
payload in our example so we we know for

845
00:39:51,170 --> 00:39:55,700
sure it's<font color="#E5E5E5"> it's our data</font><font color="#CCCCCC"> right because</font>

846
00:39:54,170 --> 00:39:57,290
<font color="#CCCCCC">we're selling something to</font><font color="#E5E5E5"> the rawr</font><font color="#CCCCCC"> we</font>

847
00:39:55,700 --> 00:39:59,870
want to know where it ends up being

848
00:39:57,290 --> 00:40:01,990
stored

849
00:39:59,870 --> 00:40:06,319
another<font color="#E5E5E5"> example with allocated chunks</font>

850
00:40:01,990 --> 00:40:10,629
same thing but here we know it's been

851
00:40:06,320 --> 00:40:10,630
allocated here and it contains<font color="#E5E5E5"> our data</font>

852
00:40:11,290 --> 00:40:19,520
so we want to<font color="#E5E5E5"> exploit the designated</font>

853
00:40:14,480 --> 00:40:20,930
victim<font color="#E5E5E5"> scenario for example</font><font color="#CCCCCC"> here we show</font>

854
00:40:19,520 --> 00:40:23,120
that<font color="#CCCCCC"> the LM</font><font color="#E5E5E5"> states with a designated</font>

855
00:40:20,930 --> 00:40:27,049
<font color="#CCCCCC">victim it's the latest chunk that has</font>

856
00:40:23,120 --> 00:40:29,240
been freed by by the hip alligator<font color="#E5E5E5"> so in</font>

857
00:40:27,050 --> 00:40:33,320
this case we can see<font color="#E5E5E5"> that it's</font><font color="#CCCCCC"> an 80 by</font>

858
00:40:29,240 --> 00:40:35,779
chunk and what is really cool<font color="#CCCCCC"> is</font><font color="#E5E5E5"> if you</font>

859
00:40:33,320 --> 00:40:38,090
have<font color="#E5E5E5"> your debugger attached and you see</font>

860
00:40:35,780 --> 00:40:40,130
<font color="#E5E5E5">after</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> sending some stuff where</font>

861
00:40:38,090 --> 00:40:42,410
what<font color="#CCCCCC"> is the digit activity then you can</font>

862
00:40:40,130 --> 00:40:45,830
<font color="#E5E5E5">basically send packets of this specific</font>

863
00:40:42,410 --> 00:40:48,319
<font color="#CCCCCC">size that end up being allocated in a</font>

864
00:40:45,830 --> 00:40:49,819
<font color="#CCCCCC">specific size and and you know it's</font>

865
00:40:48,320 --> 00:40:52,280
going<font color="#E5E5E5"> to replace this</font><font color="#CCCCCC"> Chiang</font><font color="#E5E5E5"> because</font>

866
00:40:49,820 --> 00:41:00,590
this chunk is going to be taken so you

867
00:40:52,280 --> 00:41:03,320
can exploit this this so the<font color="#CCCCCC"> other</font>

868
00:41:00,590 --> 00:41:05,930
interesting<font color="#CCCCCC"> thing is we want to be able</font>

869
00:41:03,320 --> 00:41:08,180
<font color="#CCCCCC">to analyze allocated chunks so we saw</font>

870
00:41:05,930 --> 00:41:10,879
earlier we<font color="#E5E5E5"> are able</font><font color="#CCCCCC"> to track</font><font color="#E5E5E5"> free chunks</font>

871
00:41:08,180 --> 00:41:12,770
but here we we are able<font color="#E5E5E5"> to track</font>

872
00:41:10,880 --> 00:41:15,980
allocated chunk using the main<font color="#CCCCCC"> pools</font><font color="#E5E5E5"> the</font>

873
00:41:12,770 --> 00:41:17,720
<font color="#E5E5E5">Cisco main pools so in this example we</font>

874
00:41:15,980 --> 00:41:25,150
can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that the small</font><font color="#E5E5E5"> bin which</font>

875
00:41:17,720 --> 00:41:25,149
<font color="#CCCCCC">contained the c0 byte chunks</font><font color="#E5E5E5"> is here and</font>

876
00:41:25,870 --> 00:41:32,150
we can actually<font color="#E5E5E5"> found all our chunks in</font>

877
00:41:29,060 --> 00:41:34,490
this in this bin and<font color="#CCCCCC"> we can see</font><font color="#E5E5E5"> that it</font>

878
00:41:32,150 --> 00:41:41,980
corresponds<font color="#CCCCCC"> to the to the allocations we</font>

879
00:41:34,490 --> 00:41:41,979
we made okay

880
00:41:48,920 --> 00:41:54,180
so now let's say we don't<font color="#E5E5E5"> know where our</font>

881
00:41:51,450 --> 00:41:56,520
<font color="#E5E5E5">chunks are but we want to find it in an</font>

882
00:41:54,180 --> 00:41:58,830
easy way<font color="#E5E5E5"> without</font><font color="#CCCCCC"> having to parse the</font>

883
00:41:56,520 --> 00:42:04,050
structure by hand because<font color="#CCCCCC"> it's it's</font><font color="#E5E5E5"> okay</font>

884
00:41:58,830 --> 00:42:06,120
to find<font color="#CCCCCC"> you're sorry to find your bin</font>

885
00:42:04,050 --> 00:42:08,100
and<font color="#E5E5E5"> then find</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> chunk and do it by</font>

886
00:42:06,120 --> 00:42:09,779
<font color="#E5E5E5">hand but actually we have everything you</font>

887
00:42:08,100 --> 00:42:12,569
<font color="#CCCCCC">need we need now to actually do it</font>

888
00:42:09,780 --> 00:42:16,290
automatically<font color="#CCCCCC"> we can just call our new</font>

889
00:42:12,570 --> 00:42:18,840
new command and be bin work<font color="#E5E5E5"> specify the</font>

890
00:42:16,290 --> 00:42:22,590
string data that we<font color="#CCCCCC"> wanted the string</font>

891
00:42:18,840 --> 00:42:25,050
<font color="#CCCCCC">the</font><font color="#E5E5E5"> data that we</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> for and</font>

892
00:42:22,590 --> 00:42:27,840
specify just<font color="#E5E5E5"> print me five chunks and I</font>

893
00:42:25,050 --> 00:42:29,190
want you to<font color="#E5E5E5"> look for chunk of the</font>

894
00:42:27,840 --> 00:42:31,440
specific size and it's going<font color="#E5E5E5"> to</font>

895
00:42:29,190 --> 00:42:34,950
<font color="#E5E5E5">basically print as all the chunks</font><font color="#CCCCCC"> that</font>

896
00:42:31,440 --> 00:42:37,530
contain<font color="#E5E5E5"> our pattern</font><font color="#CCCCCC"> and for example here</font>

897
00:42:34,950 --> 00:42:44,250
in<font color="#E5E5E5"> this example if we take this chunk it</font>

898
00:42:37,530 --> 00:42:48,990
does contain<font color="#CCCCCC"> the for one for one</font><font color="#E5E5E5"> okay</font>

899
00:42:44,250 --> 00:42:53,940
<font color="#E5E5E5">swimmin</font><font color="#CCCCCC"> now so now basically we want to</font>

900
00:42:48,990 --> 00:42:57,569
<font color="#E5E5E5">be able to to craft the heap in a</font>

901
00:42:53,940 --> 00:43:00,630
deterministic<font color="#CCCCCC"> way we are</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to print</font>

902
00:42:57,570 --> 00:43:03,240
chunks<font color="#CCCCCC"> so we set a breakpoint on the the</font>

903
00:43:00,630 --> 00:43:07,590
function where<font color="#E5E5E5"> we know our interesting</font>

904
00:43:03,240 --> 00:43:11,549
<font color="#CCCCCC">chunks for i key are allocated and we</font>

905
00:43:07,590 --> 00:43:13,980
use our tool to<font color="#E5E5E5"> just print the chunk</font><font color="#CCCCCC"> the</font>

906
00:43:11,550 --> 00:43:18,140
data<font color="#E5E5E5"> and here we can see all</font><font color="#CCCCCC"> the</font>

907
00:43:13,980 --> 00:43:20,430
allocate so we send a bunch<font color="#E5E5E5"> of chunks a</font>

908
00:43:18,140 --> 00:43:22,440
bunch of<font color="#CCCCCC"> fragments that</font><font color="#E5E5E5"> end up being</font>

909
00:43:20,430 --> 00:43:24,509
<font color="#CCCCCC">allocated in chunks and we</font><font color="#E5E5E5"> see here the</font>

910
00:43:22,440 --> 00:43:28,230
address<font color="#E5E5E5"> the addresses are random but at</font>

911
00:43:24,510 --> 00:43:30,450
some<font color="#CCCCCC"> point it's</font><font color="#E5E5E5"> it's beginning to be</font>

912
00:43:28,230 --> 00:43:34,320
<font color="#CCCCCC">adjacent so we use our</font><font color="#E5E5E5"> tool to say okay</font>

913
00:43:30,450 --> 00:43:36,240
that's<font color="#E5E5E5"> cool now now we can we can</font>

914
00:43:34,320 --> 00:43:38,400
allocate<font color="#E5E5E5"> chunks in a deterministic</font><font color="#CCCCCC"> way</font>

915
00:43:36,240 --> 00:43:43,399
and all our future chunks are<font color="#CCCCCC"> B are</font>

916
00:43:38,400 --> 00:43:43,400
going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> allocated in</font><font color="#CCCCCC"> an adjacent way</font>

917
00:43:44,030 --> 00:43:49,740
so the<font color="#E5E5E5"> other thing</font><font color="#CCCCCC"> is we talked about</font>

918
00:43:46,770 --> 00:43:52,080
reassembly we we can send different

919
00:43:49,740 --> 00:43:55,790
<font color="#CCCCCC">fragments they are going</font><font color="#E5E5E5"> to be resembled</font>

920
00:43:52,080 --> 00:43:59,690
and we<font color="#E5E5E5"> can exploit this why because</font>

921
00:43:55,790 --> 00:44:01,490
if you send<font color="#CCCCCC"> different fragments they are</font>

922
00:43:59,690 --> 00:44:03,890
<font color="#CCCCCC">allocated somewhere then you</font><font color="#E5E5E5"> trigger</font>

923
00:44:01,490 --> 00:44:05,089
reassembly and we don't need the

924
00:44:03,890 --> 00:44:06,710
fragment anymore because<font color="#E5E5E5"> now we are</font>

925
00:44:05,090 --> 00:44:08,630
<font color="#E5E5E5">going to to deal with the actual</font>

926
00:44:06,710 --> 00:44:10,610
reassemble<font color="#CCCCCC"> packets so the the the</font>

927
00:44:08,630 --> 00:44:12,260
<font color="#E5E5E5">previous fragments are gonna be freed so</font>

928
00:44:10,610 --> 00:44:16,780
we can basically control<font color="#E5E5E5"> allocation and</font>

929
00:44:12,260 --> 00:44:20,030
and free as well<font color="#E5E5E5"> so for example here we</font>

930
00:44:16,780 --> 00:44:23,690
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> see what happens</font>

931
00:44:20,030 --> 00:44:25,790
<font color="#E5E5E5">a when we send three fragments so we saw</font>

932
00:44:23,690 --> 00:44:27,980
in this case<font color="#E5E5E5"> we basically set a</font>

933
00:44:25,790 --> 00:44:30,620
breakpoint on<font color="#CCCCCC"> my log - to see all the</font>

934
00:44:27,980 --> 00:44:33,100
allocations<font color="#CCCCCC"> and we see that there</font><font color="#E5E5E5"> are</font>

935
00:44:30,620 --> 00:44:36,980
<font color="#CCCCCC">bunch of allocations that</font><font color="#E5E5E5"> go on the way</font>

936
00:44:33,100 --> 00:44:38,440
so we see allocations<font color="#E5E5E5"> for one fragment</font>

937
00:44:36,980 --> 00:44:40,600
allocation for another fragment

938
00:44:38,440 --> 00:44:43,540
allocation for<font color="#E5E5E5"> the third fragment and</font>

939
00:44:40,600 --> 00:44:46,190
this just using this we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> actually</font>

940
00:44:43,540 --> 00:44:49,370
guess by the name what they are<font color="#CCCCCC"> useful</font>

941
00:44:46,190 --> 00:44:53,930
so<font color="#E5E5E5"> you actually have some structures to</font>

942
00:44:49,370 --> 00:44:56,480
track the actual<font color="#E5E5E5"> packets and then you</font>

943
00:44:53,930 --> 00:44:58,940
have the first for the<font color="#CCCCCC"> first fragment</font>

944
00:44:56,480 --> 00:45:00,890
structure<font color="#E5E5E5"> - to track the queue because</font>

945
00:44:58,940 --> 00:45:03,110
<font color="#CCCCCC">the queue is antiphonal so we we have</font>

946
00:45:00,890 --> 00:45:05,089
this fragment queue<font color="#E5E5E5"> and then the queue</font>

947
00:45:03,110 --> 00:45:06,770
entry to point<font color="#E5E5E5"> to the packet and then</font>

948
00:45:05,090 --> 00:45:09,530
for the other<font color="#CCCCCC"> one you have the same</font><font color="#E5E5E5"> kind</font>

949
00:45:06,770 --> 00:45:11,150
<font color="#CCCCCC">of structure</font><font color="#E5E5E5"> to track the</font><font color="#CCCCCC"> packets</font><font color="#E5E5E5"> but</font>

950
00:45:09,530 --> 00:45:14,150
<font color="#E5E5E5">then</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't need a fragment queue</font>

951
00:45:11,150 --> 00:45:16,250
anymore because the queue is already

952
00:45:14,150 --> 00:45:18,590
created but<font color="#CCCCCC"> we</font><font color="#E5E5E5"> just need to create an</font>

953
00:45:16,250 --> 00:45:20,390
entry for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> for for adding the element</font>

954
00:45:18,590 --> 00:45:22,310
to the queue<font color="#CCCCCC"> and same thing for the</font>

955
00:45:20,390 --> 00:45:24,350
<font color="#CCCCCC">third packet the</font><font color="#E5E5E5"> only difference is for</font>

956
00:45:22,310 --> 00:45:27,590
<font color="#E5E5E5">the third packet because it's the last</font>

957
00:45:24,350 --> 00:45:30,950
frag bit set<font color="#E5E5E5"> we're going to trigger</font>

958
00:45:27,590 --> 00:45:32,630
reassembly so our our<font color="#CCCCCC"> I</font><font color="#E5E5E5"> key get a simple</font>

959
00:45:30,950 --> 00:45:35,089
packet function is going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> to</font>

960
00:45:32,630 --> 00:45:36,950
trigger<font color="#E5E5E5"> reassembly so just setting a</font>

961
00:45:35,090 --> 00:45:38,390
breakpoint on<font color="#CCCCCC"> my log we can see</font><font color="#E5E5E5"> that</font>

962
00:45:36,950 --> 00:45:40,790
there are some allocations and<font color="#E5E5E5"> we know</font>

963
00:45:38,390 --> 00:45:45,890
exactly<font color="#E5E5E5"> what it's doing without having</font>

964
00:45:40,790 --> 00:45:48,290
<font color="#E5E5E5">to reverse engineer</font><font color="#CCCCCC"> everything so the</font>

965
00:45:45,890 --> 00:45:51,170
other thing<font color="#E5E5E5"> we want is basically we want</font>

966
00:45:48,290 --> 00:45:53,450
<font color="#E5E5E5">to be able to control what we correct so</font>

967
00:45:51,170 --> 00:45:56,660
<font color="#E5E5E5">let's take a scenario we want basically</font>

968
00:45:53,450 --> 00:45:59,240
<font color="#E5E5E5">to allocate chunks in two</font><font color="#CCCCCC"> different</font>

969
00:45:56,660 --> 00:46:01,339
sessions<font color="#CCCCCC"> the idea is if we control two</font>

970
00:45:59,240 --> 00:46:03,080
different<font color="#E5E5E5"> sessions we can free one of</font>

971
00:46:01,340 --> 00:46:05,870
them but not<font color="#CCCCCC"> the other and</font><font color="#E5E5E5"> create some</font>

972
00:46:03,080 --> 00:46:08,360
<font color="#E5E5E5">kind of holes</font><font color="#CCCCCC"> before the other which we</font>

973
00:46:05,870 --> 00:46:09,319
control still and then use<font color="#E5E5E5"> this second</font>

974
00:46:08,360 --> 00:46:12,800
one to do<font color="#CCCCCC"> start</font>

975
00:46:09,320 --> 00:46:14,600
so we're<font color="#E5E5E5"> going to use two sessions with</font>

976
00:46:12,800 --> 00:46:16,130
fragment for both<font color="#E5E5E5"> so we're gonna send</font>

977
00:46:14,600 --> 00:46:19,520
fragments one after the other we know we

978
00:46:16,130 --> 00:46:22,970
can have this<font color="#CCCCCC"> at a jet adjacency</font><font color="#E5E5E5"> because</font>

979
00:46:19,520 --> 00:46:24,890
we saw it<font color="#CCCCCC"> earlier</font><font color="#E5E5E5"> so we're gonna craft</font>

980
00:46:22,970 --> 00:46:27,770
<font color="#E5E5E5">online</font><font color="#CCCCCC"> do some brainstorming and think</font>

981
00:46:24,890 --> 00:46:30,140
we can maybe do that send fragment one

982
00:46:27,770 --> 00:46:31,730
from<font color="#E5E5E5"> session one fragment one from</font>

983
00:46:30,140 --> 00:46:33,710
session<font color="#E5E5E5"> to fragment to from session one</font>

984
00:46:31,730 --> 00:46:36,350
fragment<font color="#E5E5E5"> two from session two at cetera</font>

985
00:46:33,710 --> 00:46:38,330
<font color="#CCCCCC">and</font><font color="#E5E5E5"> there is then at some point we send</font>

986
00:46:36,350 --> 00:46:40,220
the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> flag from for the second</font>

987
00:46:38,330 --> 00:46:44,779
session and<font color="#E5E5E5"> be and we're gonna create</font>

988
00:46:40,220 --> 00:46:46,669
holes and actually if we do that and we

989
00:46:44,780 --> 00:46:49,340
actually<font color="#E5E5E5"> then look at the</font><font color="#CCCCCC"> other memory</font>

990
00:46:46,670 --> 00:46:50,930
we can<font color="#E5E5E5"> see that we have</font><font color="#CCCCCC"> M F M F so we</font>

991
00:46:49,340 --> 00:46:53,570
can see<font color="#E5E5E5"> that we have exactly what we</font>

992
00:46:50,930 --> 00:46:58,250
<font color="#E5E5E5">wanted we have our session</font><font color="#CCCCCC"> one still</font>

993
00:46:53,570 --> 00:47:02,540
here<font color="#E5E5E5"> and we have holes for for them for</font>

994
00:46:58,250 --> 00:47:06,860
<font color="#E5E5E5">us to to put stuff in basically so now</font>

995
00:47:02,540 --> 00:47:09,320
what we can<font color="#CCCCCC"> do is trigger reassembly</font><font color="#E5E5E5"> for</font>

996
00:47:06,860 --> 00:47:13,460
<font color="#E5E5E5">specific size and it will end up being</font>

997
00:47:09,320 --> 00:47:16,100
it will<font color="#E5E5E5"> end up reusing a hole because</font>

998
00:47:13,460 --> 00:47:18,470
the<font color="#CCCCCC"> size is</font><font color="#E5E5E5"> correct</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case we can</font>

999
00:47:16,100 --> 00:47:24,140
see that<font color="#E5E5E5"> it's actually</font><font color="#CCCCCC"> reusing a part of</font>

1000
00:47:18,470 --> 00:47:30,709
the<font color="#E5E5E5"> hole and still be still leaving a</font>

1001
00:47:24,140 --> 00:47:32,420
hole afterwards so now we want<font color="#E5E5E5"> to do</font>

1002
00:47:30,710 --> 00:47:35,170
better<font color="#E5E5E5"> because we want</font><font color="#CCCCCC"> to create</font><font color="#E5E5E5"> more</font>

1003
00:47:32,420 --> 00:47:37,940
memory to<font color="#CCCCCC"> cope more chance and</font><font color="#E5E5E5"> get more</font>

1004
00:47:35,170 --> 00:47:40,880
data corrupted<font color="#E5E5E5"> and more arbitrary right</font>

1005
00:47:37,940 --> 00:47:44,000
<font color="#E5E5E5">and more me oh right</font><font color="#CCCCCC"> sorry</font>

1006
00:47:40,880 --> 00:47:45,860
so what we want<font color="#E5E5E5"> basically is to send</font>

1007
00:47:44,000 --> 00:47:47,870
fragment for session<font color="#E5E5E5"> one to fill hole</font>

1008
00:47:45,860 --> 00:47:49,910
the<font color="#E5E5E5"> holes then different fragment in</font>

1009
00:47:47,870 --> 00:47:53,630
different<font color="#E5E5E5"> sessions the idea is we can</font>

1010
00:47:49,910 --> 00:47:54,890
<font color="#CCCCCC">arbitrary free session too by sending</font>

1011
00:47:53,630 --> 00:47:58,160
the last<font color="#CCCCCC"> frag it's going to free</font><font color="#E5E5E5"> the</font>

1012
00:47:54,890 --> 00:48:00,129
fragments<font color="#E5E5E5"> so we can trigger reassembly</font>

1013
00:47:58,160 --> 00:48:02,779
into this hole and<font color="#E5E5E5"> then when we</font><font color="#CCCCCC"> correct</font>

1014
00:48:00,130 --> 00:48:04,750
<font color="#CCCCCC">a lot of</font><font color="#E5E5E5"> memory we're going to</font><font color="#CCCCCC"> correct</font>

1015
00:48:02,780 --> 00:48:07,520
fragment from different session and

1016
00:48:04,750 --> 00:48:10,910
basically now we are corrupting the

1017
00:48:07,520 --> 00:48:12,410
metadata for all<font color="#E5E5E5"> the chunks and because</font>

1018
00:48:10,910 --> 00:48:15,920
we control<font color="#E5E5E5"> this session we</font><font color="#CCCCCC"> can basically</font>

1019
00:48:12,410 --> 00:48:21,348
<font color="#E5E5E5">arbitrary free each one and get</font>

1020
00:48:15,920 --> 00:48:24,470
different me rights when<font color="#E5E5E5"> I design</font>

1021
00:48:21,349 --> 00:48:27,769
but we want to use our<font color="#E5E5E5"> tool to check it</font>

1022
00:48:24,470 --> 00:48:31,069
<font color="#E5E5E5">works so basically we we do that we send</font>

1023
00:48:27,769 --> 00:48:33,169
our fragment<font color="#E5E5E5"> and we and</font><font color="#CCCCCC"> we trigger</font>

1024
00:48:31,069 --> 00:48:36,979
reassembly<font color="#CCCCCC"> and we can see we can see</font>

1025
00:48:33,170 --> 00:48:40,359
here<font color="#E5E5E5"> that our allocated buffer is before</font>

1026
00:48:36,979 --> 00:48:44,808
a<font color="#CCCCCC"> free chunk so once you 0 plus 40 which</font>

1027
00:48:40,359 --> 00:48:47,119
<font color="#CCCCCC">gives</font><font color="#E5E5E5"> us 200 and we can see that it's</font>

1028
00:48:44,809 --> 00:48:48,769
<font color="#E5E5E5">before sweet chunks</font><font color="#CCCCCC"> each one</font>

1029
00:48:47,119 --> 00:48:51,619
corresponding<font color="#CCCCCC"> to a different session</font>

1030
00:48:48,769 --> 00:48:53,988
<font color="#E5E5E5">because we on</font><font color="#CCCCCC"> propose send</font><font color="#E5E5E5"> different</font>

1031
00:48:51,619 --> 00:48:54,289
data in there just to to see them in

1032
00:48:53,989 --> 00:48:59,390
action

1033
00:48:54,289 --> 00:49:01,339
so it works so here it's a different

1034
00:48:59,390 --> 00:49:03,470
<font color="#CCCCCC">view where</font><font color="#E5E5E5"> basically we have our</font>

1035
00:49:01,339 --> 00:49:07,009
allocated chunk<font color="#E5E5E5"> before the free chunk</font>

1036
00:49:03,470 --> 00:49:10,189
and before<font color="#CCCCCC"> our control chunk so here</font><font color="#E5E5E5"> I</font>

1037
00:49:07,009 --> 00:49:13,279
just annotated<font color="#CCCCCC"> the different data for</font>

1038
00:49:10,190 --> 00:49:17,029
our<font color="#CCCCCC"> chain so we</font><font color="#E5E5E5"> can follow and then we</font>

1039
00:49:13,279 --> 00:49:19,450
can basically overflow the chunk<font color="#E5E5E5"> so by</font>

1040
00:49:17,029 --> 00:49:23,690
overflowing<font color="#E5E5E5"> the interesting thing is we</font>

1041
00:49:19,450 --> 00:49:25,160
we we we overthrow the size and we

1042
00:49:23,690 --> 00:49:28,039
change<font color="#E5E5E5"> it to a larger size</font>

1043
00:49:25,160 --> 00:49:31,249
<font color="#E5E5E5">so what hands up being changes</font><font color="#CCCCCC"> the 40</font>

1044
00:49:28,039 --> 00:49:34,219
here which is changed<font color="#E5E5E5"> to 6</font><font color="#CCCCCC"> B zero</font><font color="#E5E5E5"> so</font>

1045
00:49:31,249 --> 00:49:36,979
basically<font color="#CCCCCC"> we just overflowed a little</font>

1046
00:49:34,219 --> 00:49:39,829
bit to<font color="#CCCCCC"> just the adjacent chunk and we</font>

1047
00:49:36,979 --> 00:49:41,718
just change this<font color="#E5E5E5"> this size and the thing</font>

1048
00:49:39,829 --> 00:49:46,069
is we can<font color="#E5E5E5"> check with our tool that the</font>

1049
00:49:41,719 --> 00:49:47,719
memory is<font color="#CCCCCC"> still is still the layout is</font>

1050
00:49:46,069 --> 00:49:51,259
still<font color="#E5E5E5"> valid and for the</font><font color="#CCCCCC"> hip irregular is</font>

1051
00:49:47,719 --> 00:49:52,640
very important now basically what<font color="#E5E5E5"> is</font>

1052
00:49:51,259 --> 00:49:54,440
important to know<font color="#E5E5E5"> is that we were</font>

1053
00:49:52,640 --> 00:49:57,348
<font color="#CCCCCC">actually in the</font><font color="#E5E5E5"> middle by changing</font><font color="#CCCCCC"> this</font>

1054
00:49:54,440 --> 00:50:01,400
size<font color="#E5E5E5"> we're actually saying to the hip</font>

1055
00:49:57,349 --> 00:50:03,950
irregular<font color="#E5E5E5"> this is this this is all part</font>

1056
00:50:01,400 --> 00:50:08,119
<font color="#E5E5E5">of the same</font><font color="#CCCCCC"> shank which</font><font color="#E5E5E5"> is free and and</font>

1057
00:50:03,950 --> 00:50:10,489
this chunk are<font color="#CCCCCC"> all part of</font><font color="#E5E5E5"> the chunk so</font>

1058
00:50:08,119 --> 00:50:13,670
now what what happens is when this one

1059
00:50:10,489 --> 00:50:16,309
is coalesced with<font color="#CCCCCC"> the previous one which</font>

1060
00:50:13,670 --> 00:50:19,880
is now free<font color="#E5E5E5"> it gives us a</font><font color="#CCCCCC"> louder chunk</font>

1061
00:50:16,309 --> 00:50:22,190
and this larger chunk<font color="#E5E5E5"> angels end up ends</font>

1062
00:50:19,880 --> 00:50:25,039
up being<font color="#E5E5E5"> basically all this change and</font>

1063
00:50:22,190 --> 00:50:29,359
we can reallocate it<font color="#E5E5E5"> and correct more</font>

1064
00:50:25,039 --> 00:50:30,920
data so<font color="#E5E5E5"> that's that's what we do we know</font>

1065
00:50:29,359 --> 00:50:33,799
the size because<font color="#E5E5E5"> we've used</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> tool to</font>

1066
00:50:30,920 --> 00:50:35,520
know the size so we can<font color="#CCCCCC"> allocate exist</font>

1067
00:50:33,799 --> 00:50:40,530
<font color="#E5E5E5">this exact size</font>

1068
00:50:35,520 --> 00:50:42,990
take and exploit the designee designated

1069
00:50:40,530 --> 00:50:47,970
victim scenario to<font color="#E5E5E5"> basically replace the</font>

1070
00:50:42,990 --> 00:50:53,279
<font color="#CCCCCC">friction with an elongated chunk right</font>

1071
00:50:47,970 --> 00:50:56,939
so in conclusion for<font color="#CCCCCC"> 60 to 64 bits</font><font color="#E5E5E5"> it's</font>

1072
00:50:53,280 --> 00:51:00,870
the same as<font color="#E5E5E5"> 66 for</font><font color="#CCCCCC"> 64-bit</font><font color="#E5E5E5"> is the same as</font>

1073
00:50:56,940 --> 00:51:03,480
32-bit for the old<font color="#E5E5E5"> 64</font><font color="#CCCCCC"> bits on your 64</font>

1074
00:51:00,870 --> 00:51:06,270
bits<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have different hip alligator</font>

1075
00:51:03,480 --> 00:51:09,900
<font color="#E5E5E5">that is used if you look at and</font>

1076
00:51:06,270 --> 00:51:11,690
disassemble the actual<font color="#E5E5E5"> liner binary you</font>

1077
00:51:09,900 --> 00:51:14,490
will realize that you have still this

1078
00:51:11,690 --> 00:51:16,710
chain of<font color="#CCCCCC"> wrappers but at the end</font><font color="#E5E5E5"> they</font>

1079
00:51:14,490 --> 00:51:18,089
end up calling the leap Sima<font color="#CCCCCC"> rock but</font>

1080
00:51:16,710 --> 00:51:20,520
they don't call<font color="#E5E5E5"> the m-space malloc</font>

1081
00:51:18,090 --> 00:51:27,030
anymore they call an external<font color="#E5E5E5"> malach</font>

1082
00:51:20,520 --> 00:51:29,640
from<font color="#CCCCCC"> gilepsy</font><font color="#E5E5E5"> and basically to summarize</font>

1083
00:51:27,030 --> 00:51:35,070
the<font color="#CCCCCC"> d</font><font color="#E5E5E5"> for hip alligator on C square</font><font color="#CCCCCC"> say</font>

1084
00:51:29,640 --> 00:51:37,859
for all 32 for all 32<font color="#E5E5E5"> sorry for 32-bit</font>

1085
00:51:35,070 --> 00:51:40,500
version and all 64<font color="#E5E5E5"> bit they use the</font>

1086
00:51:37,860 --> 00:51:45,360
analog<font color="#E5E5E5"> to 83 and for the recent version</font>

1087
00:51:40,500 --> 00:51:47,280
that you used a<font color="#CCCCCC"> lip see</font><font color="#E5E5E5"> so it means now</font>

1088
00:51:45,360 --> 00:51:52,590
with GDP<font color="#E5E5E5"> they have safe and linking</font>

1089
00:51:47,280 --> 00:51:55,500
which prevents this kind<font color="#E5E5E5"> of overflow</font><font color="#CCCCCC"> but</font>

1090
00:51:52,590 --> 00:51:57,600
they still don't have<font color="#E5E5E5"> safe and linking</font>

1091
00:51:55,500 --> 00:52:00,420
on the actual<font color="#E5E5E5"> mempool</font><font color="#CCCCCC"> meta data that the</font>

1092
00:51:57,600 --> 00:52:03,540
<font color="#E5E5E5">specifics for Cisco so basically you can</font>

1093
00:52:00,420 --> 00:52:06,960
still corrupt<font color="#E5E5E5"> data even though</font><font color="#CCCCCC"> G Lipsy</font>

1094
00:52:03,540 --> 00:52:08,790
has safe and linking<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> actually need</font>

1095
00:52:06,960 --> 00:52:12,000
a<font color="#CCCCCC"> library to pass patema log two chunks</font>

1096
00:52:08,790 --> 00:52:15,410
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we actually did it and we basically</font>

1097
00:52:12,000 --> 00:52:18,450
<font color="#E5E5E5">built three</font><font color="#CCCCCC"> lives which I showed you</font>

1098
00:52:15,410 --> 00:52:20,759
some<font color="#E5E5E5"> part there are very similar</font><font color="#CCCCCC"> to</font>

1099
00:52:18,450 --> 00:52:23,669
<font color="#E5E5E5">other</font><font color="#CCCCCC"> lives that allow you</font><font color="#E5E5E5"> to pass</font>

1100
00:52:20,760 --> 00:52:25,830
chunks in memory<font color="#E5E5E5"> likely</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> a log from</font>

1101
00:52:23,670 --> 00:52:31,830
our own<font color="#CCCCCC"> islands or shadow from</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> P</font>

1102
00:52:25,830 --> 00:52:33,680
which is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> parse</font><font color="#CCCCCC"> GAE Malacca chunks the</font>

1103
00:52:31,830 --> 00:52:38,700
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is we've tested it on</font>

1104
00:52:33,680 --> 00:52:41,490
both<font color="#CCCCCC"> GL maroc & peeta mellark and 32 and</font>

1105
00:52:38,700 --> 00:52:43,049
<font color="#E5E5E5">64 bits and we've used</font><font color="#CCCCCC"> red sync which</font><font color="#E5E5E5"> is</font>

1106
00:52:41,490 --> 00:52:45,959
a<font color="#CCCCCC"> plug-in to synchronize</font>

1107
00:52:43,050 --> 00:52:48,030
<font color="#E5E5E5">gdb and Ida Pro to basically retrieve</font>

1108
00:52:45,960 --> 00:52:48,540
the<font color="#CCCCCC"> symbols so that's how we are able to</font>

1109
00:52:48,030 --> 00:52:53,220
show the

1110
00:52:48,540 --> 00:52:55,380
the name for the functions and both both

1111
00:52:53,220 --> 00:52:59,819
both<font color="#E5E5E5"> stool actually</font><font color="#CCCCCC"> supports callback to</font>

1112
00:52:55,380 --> 00:53:02,040
<font color="#E5E5E5">actually deal</font><font color="#CCCCCC"> with the mental headers</font><font color="#E5E5E5"> so</font>

1113
00:52:59,820 --> 00:53:03,870
<font color="#CCCCCC">del maguey called will call</font><font color="#E5E5E5"> in to</font><font color="#CCCCCC"> lis</font>

1114
00:53:02,040 --> 00:53:08,279
mempool and<font color="#CCCCCC"> leap it even</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> fall</font><font color="#E5E5E5"> into</font>

1115
00:53:03,870 --> 00:53:13,049
even poorer so<font color="#CCCCCC"> leap Peeta Mellark</font>

1116
00:53:08,280 --> 00:53:15,810
we built a fork from<font color="#CCCCCC"> leap heap developed</font>

1117
00:53:13,050 --> 00:53:18,960
by<font color="#E5E5E5"> cloudburst because</font><font color="#CCCCCC"> basically even</font>

1118
00:53:15,810 --> 00:53:20,910
though<font color="#E5E5E5"> his stool is pretty awesome</font><font color="#CCCCCC"> we</font>

1119
00:53:18,960 --> 00:53:22,740
wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> basically have the same kind</font>

1120
00:53:20,910 --> 00:53:25,109
of<font color="#CCCCCC"> commons</font><font color="#E5E5E5"> for all our tool for</font>

1121
00:53:22,740 --> 00:53:27,509
consistency it's easier<font color="#CCCCCC"> for us to to</font>

1122
00:53:25,110 --> 00:53:29,610
have the same kind of<font color="#CCCCCC"> comments</font><font color="#E5E5E5"> it's the</font>

1123
00:53:27,510 --> 00:53:33,390
process of using<font color="#E5E5E5"> them and we also needed</font>

1124
00:53:29,610 --> 00:53:37,680
to<font color="#E5E5E5"> integrate with the</font><font color="#CCCCCC"> cisco header so to</font>

1125
00:53:33,390 --> 00:53:42,750
summarize the security of<font color="#E5E5E5"> cisco</font><font color="#CCCCCC"> is a old</font>

1126
00:53:37,680 --> 00:53:44,790
versions used in<font color="#E5E5E5"> Melaka 2.8 they don't</font>

1127
00:53:42,750 --> 00:53:46,110
have safe<font color="#E5E5E5"> and linking on the</font><font color="#CCCCCC"> GL maroc</font>

1128
00:53:44,790 --> 00:53:48,930
<font color="#E5E5E5">they don't have safe and inking on the</font>

1129
00:53:46,110 --> 00:53:50,910
<font color="#E5E5E5">mempool and their future is is broken in</font>

1130
00:53:48,930 --> 00:53:53,279
that<font color="#E5E5E5"> we can actually curb data and they</font>

1131
00:53:50,910 --> 00:53:54,720
don't check the footer and on the more

1132
00:53:53,280 --> 00:53:57,750
<font color="#E5E5E5">recent version they use peeta mellark</font>

1133
00:53:54,720 --> 00:54:01,459
<font color="#E5E5E5">which has safe and linking but still the</font>

1134
00:53:57,750 --> 00:54:03,870
<font color="#E5E5E5">mempool cisco specific data doesn't have</font>

1135
00:54:01,460 --> 00:54:07,800
<font color="#CCCCCC">safer linking so</font><font color="#E5E5E5"> we can still exploit</font>

1136
00:54:03,870 --> 00:54:09,750
that and the good thing about<font color="#E5E5E5"> cisco as</font>

1137
00:54:07,800 --> 00:54:12,180
well is when we reverse engineer<font color="#E5E5E5"> more</font>

1138
00:54:09,750 --> 00:54:14,820
versions in more<font color="#E5E5E5"> recent versions they</font>

1139
00:54:12,180 --> 00:54:19,799
actually added<font color="#CCCCCC"> a SLR</font><font color="#E5E5E5"> and dep which</font>

1140
00:54:14,820 --> 00:54:22,640
<font color="#E5E5E5">wasn't supported</font><font color="#CCCCCC"> before so just to</font>

1141
00:54:19,800 --> 00:54:27,090
summarize good tooling is usually

1142
00:54:22,640 --> 00:54:30,569
synonym of success<font color="#CCCCCC"> future</font><font color="#E5E5E5"> work we want</font>

1143
00:54:27,090 --> 00:54:32,490
<font color="#CCCCCC">to achieve we want to basic abstract</font>

1144
00:54:30,570 --> 00:54:36,500
things so our tool can<font color="#CCCCCC"> be using</font><font color="#E5E5E5"> other</font>

1145
00:54:32,490 --> 00:54:39,299
debuggers<font color="#CCCCCC"> I want to test on more targets</font>

1146
00:54:36,500 --> 00:54:42,570
<font color="#CCCCCC">maybe</font><font color="#E5E5E5"> on more cisco devices because we</font>

1147
00:54:39,300 --> 00:54:44,420
focused our research on cisco<font color="#E5E5E5"> essays</font><font color="#CCCCCC"> we</font>

1148
00:54:42,570 --> 00:54:47,340
want to implement maybe other<font color="#CCCCCC"> commands</font>

1149
00:54:44,420 --> 00:54:49,410
<font color="#CCCCCC">for now we</font><font color="#E5E5E5"> just implemented the one we</font>

1150
00:54:47,340 --> 00:54:51,810
<font color="#E5E5E5">needed to actually achieve our goal to</font>

1151
00:54:49,410 --> 00:54:57,720
speed the process of developing exploits

1152
00:54:51,810 --> 00:55:01,230
but you can make<font color="#E5E5E5"> it more powerful</font>

1153
00:54:57,720 --> 00:55:02,459
<font color="#CCCCCC">because we can realize it we're going to</font>

1154
00:55:01,230 --> 00:55:08,069
realize this tool

1155
00:55:02,460 --> 00:55:21,250
very soon thank you<font color="#CCCCCC"> if you have any</font>

1156
00:55:08,069 --> 00:55:28,360
question yeah<font color="#E5E5E5"> no thank you very much</font>

1157
00:55:21,250 --> 00:55:28,360
[Applause]

1158
00:55:59,059 --> 00:56:08,220
that's a good question<font color="#E5E5E5"> is very own very</font>

1159
00:56:02,849 --> 00:56:11,099
method<font color="#E5E5E5"> in practice what you do is you</font>

1160
00:56:08,220 --> 00:56:14,759
try and<font color="#CCCCCC"> just do more locations if you</font>

1161
00:56:11,099 --> 00:56:16,470
need yeah<font color="#CCCCCC"> yeah what I should</font><font color="#E5E5E5"> what I</font>

1162
00:56:14,760 --> 00:56:20,369
showed is basically<font color="#CCCCCC"> after I already</font>

1163
00:56:16,470 --> 00:56:22,680
<font color="#E5E5E5">tried several several times and so I end</font>

1164
00:56:20,369 --> 00:56:24,740
up having<font color="#CCCCCC"> this</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of adjust adjacency</font>

1165
00:56:22,680 --> 00:56:28,109
<font color="#CCCCCC">and it's a</font><font color="#E5E5E5"> very good question</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> and</font>

1166
00:56:24,740 --> 00:56:30,959
it's very similar with<font color="#CCCCCC"> what you would do</font>

1167
00:56:28,109 --> 00:56:33,058
on browser<font color="#CCCCCC"> bugs where you need to spray</font>

1168
00:56:30,960 --> 00:56:35,790
some or spray some kind of memory<font color="#E5E5E5"> to</font>

1169
00:56:33,059 --> 00:56:37,530
fill all<font color="#CCCCCC"> the holes</font><font color="#E5E5E5"> and at some point you</font>

1170
00:56:35,790 --> 00:56:39,349
know<font color="#CCCCCC"> you've achieved your</font><font color="#E5E5E5"> goal</font><font color="#CCCCCC"> and</font>

1171
00:56:37,530 --> 00:56:45,420
usually you do a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more just</font><font color="#E5E5E5"> to</font>

1172
00:56:39,349 --> 00:56:47,549
handle yeah but some sometimes<font color="#CCCCCC"> you don't</font>

1173
00:56:45,420 --> 00:56:48,869
have<font color="#E5E5E5"> this capability because it's</font>

1174
00:56:47,549 --> 00:56:50,130
multi-threading peeta mellark is a

1175
00:56:48,869 --> 00:56:52,859
little bit more complicated<font color="#E5E5E5"> because it's</font>

1176
00:56:50,130 --> 00:56:55,500
<font color="#CCCCCC">mootisse</font><font color="#E5E5E5"> ready it's gonna allocate stuff</font>

1177
00:56:52,859 --> 00:56:58,140
in a less deterministic way but with in

1178
00:56:55,500 --> 00:57:03,270
our case it was deterministic so we are

1179
00:56:58,140 --> 00:57:07,520
we<font color="#E5E5E5"> sorry yeah so we we managed to</font>

1180
00:57:03,270 --> 00:57:09,630
exploit this this heap management

1181
00:57:07,520 --> 00:57:13,079
determinism<font color="#E5E5E5"> but it's not always</font><font color="#CCCCCC"> the case</font>

1182
00:57:09,630 --> 00:57:15,000
<font color="#E5E5E5">but it's</font><font color="#CCCCCC"> good to</font><font color="#E5E5E5"> you know that's the way</font>

1183
00:57:13,079 --> 00:57:16,070
to do<font color="#CCCCCC"> that's the</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> to go but it's good</font>

1184
00:57:15,000 --> 00:57:17,840
to<font color="#E5E5E5"> confirm it's actually</font>

1185
00:57:16,070 --> 00:57:20,110
it's actually a<font color="#CCCCCC"> Justin</font><font color="#E5E5E5"> just because you</font>

1186
00:57:17,840 --> 00:57:23,300
<font color="#E5E5E5">need that</font><font color="#CCCCCC"> these are just</font><font color="#E5E5E5"> Jason</font><font color="#CCCCCC"> Seifer</font>

1187
00:57:20,110 --> 00:57:26,350
<font color="#CCCCCC">for exploit purpose but</font><font color="#E5E5E5"> it's a good</font>

1188
00:57:23,300 --> 00:57:26,350
question<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> okay</font>

