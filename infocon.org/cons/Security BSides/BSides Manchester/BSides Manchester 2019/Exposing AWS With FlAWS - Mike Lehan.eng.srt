1
00:00:03,319 --> 00:00:07,350
thank you very much

2
00:00:04,799 --> 00:00:09,090
just the choice check I know they've had

3
00:00:07,350 --> 00:00:10,950
a people issues with the audio today can

4
00:00:09,090 --> 00:00:12,330
people hear me give her the back give me

5
00:00:10,950 --> 00:00:14,849
my pace all rather light give me a wave

6
00:00:12,330 --> 00:00:17,279
excellent I'm I'm Miley Han I'm a

7
00:00:14,849 --> 00:00:19,800
software engineer CTO of a student prop

8
00:00:17,279 --> 00:00:21,198
textile and northerner and the skydiver

9
00:00:19,800 --> 00:00:24,170
we can talk about that later of the bar

10
00:00:21,199 --> 00:00:26,849
you can follow me on Twitter and 1k and

11
00:00:24,170 --> 00:00:28,830
the cloud has produced a really great

12
00:00:26,849 --> 00:00:32,099
new way for people to leak your personal

13
00:00:28,830 --> 00:00:34,620
data to random strangers and so what I'm

14
00:00:32,098 --> 00:00:37,709
going to talk to today talk to you about

15
00:00:34,620 --> 00:00:39,419
today is how you can find out whether

16
00:00:37,710 --> 00:00:41,460
your cloud is leaking random data to

17
00:00:39,420 --> 00:00:43,469
strangers and if you are responsible for

18
00:00:41,460 --> 00:00:46,399
managing that cloud how you can prevent

19
00:00:43,469 --> 00:00:49,320
it this is going to be focused on AWS

20
00:00:46,399 --> 00:00:50,670
and is relatively entry-level so if you

21
00:00:49,320 --> 00:00:52,410
come in here as a sort of hardened

22
00:00:50,670 --> 00:00:53,699
database pen tester there might not be

23
00:00:52,410 --> 00:00:55,410
much new for you today

24
00:00:53,699 --> 00:00:56,969
but what hopefully you would get is an

25
00:00:55,410 --> 00:00:59,089
idea of some resources that you could

26
00:00:56,969 --> 00:01:02,760
use to train other people in 80s

27
00:00:59,090 --> 00:01:05,580
security this is going to use a platform

28
00:01:02,760 --> 00:01:07,560
of floors cloud which is set up by a

29
00:01:05,580 --> 00:01:09,658
security researcher called Scott Piper

30
00:01:07,560 --> 00:01:11,880
officer maruka solving and who's very

31
00:01:09,659 --> 00:01:14,909
kind of let me use his resource in this

32
00:01:11,880 --> 00:01:16,949
talk today these principles are directly

33
00:01:14,909 --> 00:01:18,509
around AWS however if you are

34
00:01:16,950 --> 00:01:20,820
responsible for managing infrastructure

35
00:01:18,509 --> 00:01:22,830
on Google cloud platform or as you'll a

36
00:01:20,820 --> 00:01:24,000
lot of the same principles are likely to

37
00:01:22,830 --> 00:01:25,679
apply they might be presented

38
00:01:24,000 --> 00:01:27,540
differently there might be different

39
00:01:25,680 --> 00:01:28,650
interfaces and different patches and

40
00:01:27,540 --> 00:01:31,229
holes that people are fixed over the

41
00:01:28,650 --> 00:01:33,630
time but essentially the core features

42
00:01:31,229 --> 00:01:35,340
of how you manage access and how users

43
00:01:33,630 --> 00:01:37,079
can inverting if the wrong people access

44
00:01:35,340 --> 00:01:38,850
will generally be consistent and

45
00:01:37,079 --> 00:01:40,740
flawless our cloud has presented as a

46
00:01:38,850 --> 00:01:43,140
sort of training exercise that simple is

47
00:01:40,740 --> 00:01:45,929
like a CTF so if you've ever done CCF's

48
00:01:43,140 --> 00:01:48,090
either competitively or just practice

49
00:01:45,930 --> 00:01:49,200
websites to teach you various skills in

50
00:01:48,090 --> 00:01:50,640
testing or hacking

51
00:01:49,200 --> 00:01:54,180
then you're probably familiar with the

52
00:01:50,640 --> 00:01:55,470
format forces in six parts so I'm going

53
00:01:54,180 --> 00:01:56,939
to go through each part of the floors

54
00:01:55,470 --> 00:01:58,649
program the best thing about this

55
00:01:56,939 --> 00:02:00,240
hopefully is that it means that after

56
00:01:58,649 --> 00:02:02,610
this talk you can go away and do this

57
00:02:00,240 --> 00:02:04,259
yourself you could try and follow up a

58
00:02:02,610 --> 00:02:06,750
lot of the things I'm going to be doing

59
00:02:04,259 --> 00:02:09,119
are quite complicated to just do it

60
00:02:06,750 --> 00:02:10,919
manually it involves a lot of messing

61
00:02:09,119 --> 00:02:13,440
around in the console in your browser or

62
00:02:10,919 --> 00:02:14,820
typing commands in CLI

63
00:02:13,440 --> 00:02:17,430
so if you try to follow along you'd have

64
00:02:14,820 --> 00:02:19,859
to be really fast which you might not be

65
00:02:17,430 --> 00:02:21,870
the move for after a heavy carb lunch

66
00:02:19,860 --> 00:02:23,220
so this talk if you recorded the slides

67
00:02:21,870 --> 00:02:25,530
will be available immediately as soon as

68
00:02:23,220 --> 00:02:28,800
I finish on the besides works like and

69
00:02:25,530 --> 00:02:29,340
so I encourage you to listen and what

70
00:02:28,800 --> 00:02:30,600
I'm doing

71
00:02:29,340 --> 00:02:31,740
and then afterwards go and try to sell

72
00:02:30,600 --> 00:02:33,420
yourself especially if you've never used

73
00:02:31,740 --> 00:02:34,890
any basketball it's a really great

74
00:02:33,420 --> 00:02:36,450
introduction to how you can start doing

75
00:02:34,890 --> 00:02:38,760
some basic testing and securing a

76
00:02:36,450 --> 00:02:39,089
various resources so challenge number

77
00:02:38,760 --> 00:02:41,489
one

78
00:02:39,090 --> 00:02:43,050
web hosting and public Commission's the

79
00:02:41,490 --> 00:02:44,640
challenge presented like this each time

80
00:02:43,050 --> 00:02:46,920
on their pretend challenge it gives a

81
00:02:44,640 --> 00:02:48,690
URL which is going to be helpful if

82
00:02:46,920 --> 00:02:50,609
you're a look at the slides later and

83
00:02:48,690 --> 00:02:52,530
the description on the website so this

84
00:02:50,610 --> 00:02:53,760
level is buckets of fun see if you can

85
00:02:52,530 --> 00:02:55,830
find the first subdomain so this is

86
00:02:53,760 --> 00:02:57,840
presented like a traditional sort of CTF

87
00:02:55,830 --> 00:03:00,000
hint and you need to know a few

88
00:02:57,840 --> 00:03:02,790
principles about aid aggresses storage

89
00:03:00,000 --> 00:03:04,910
platform for this s3 is Amazon simple

90
00:03:02,790 --> 00:03:07,170
storage service it was not their first

91
00:03:04,910 --> 00:03:08,460
service that released but it definitely

92
00:03:07,170 --> 00:03:11,489
was the one that propelled their DBS

93
00:03:08,460 --> 00:03:12,390
into the use of lots of companies and to

94
00:03:11,490 --> 00:03:15,180
this day it's one of their most

95
00:03:12,390 --> 00:03:17,670
successful and most used services stands

96
00:03:15,180 --> 00:03:20,160
for simple storage service and the

97
00:03:17,670 --> 00:03:22,679
principal part of s3 is the bucket a

98
00:03:20,160 --> 00:03:25,920
bucket is essentially your area for

99
00:03:22,680 --> 00:03:27,360
storing some sort of files online a key

100
00:03:25,920 --> 00:03:29,609
thing is Buffett buckets are

101
00:03:27,360 --> 00:03:31,590
geographically located so I can have a

102
00:03:29,610 --> 00:03:34,800
bucket in London you can have a bucket

103
00:03:31,590 --> 00:03:36,540
in West Virginia and that plays a part

104
00:03:34,800 --> 00:03:38,850
however despite the fact pockets are

105
00:03:36,540 --> 00:03:40,410
unique to a region their host names the

106
00:03:38,850 --> 00:03:42,299
name of the book it is globally unique

107
00:03:40,410 --> 00:03:44,700
and this is going to be important in a

108
00:03:42,300 --> 00:03:47,040
moment and funnily an object is

109
00:03:44,700 --> 00:03:49,500
basically a file it's a file always some

110
00:03:47,040 --> 00:03:51,540
metadata and so everything in ideographs

111
00:03:49,500 --> 00:03:54,989
refers to buckets and objects rather

112
00:03:51,540 --> 00:03:56,370
than folders and files an object can

113
00:03:54,989 --> 00:03:58,530
have lushes in its name which sort of

114
00:03:56,370 --> 00:04:00,780
makes like a pseudo file file structure

115
00:03:58,530 --> 00:04:02,489
but it's not really it's really a DST

116
00:04:00,780 --> 00:04:03,690
book it's are flats and you just happen

117
00:04:02,489 --> 00:04:05,790
to be pointing slashes in your object

118
00:04:03,690 --> 00:04:07,590
names that's not hugely important for

119
00:04:05,790 --> 00:04:08,640
the what we're gonna do today and web

120
00:04:07,590 --> 00:04:11,400
hosting has become one of the most

121
00:04:08,640 --> 00:04:13,410
popular uses of s/3 s/3 allows you to

122
00:04:11,400 --> 00:04:16,470
click a button in the console and host a

123
00:04:13,410 --> 00:04:18,209
website directly from s3 and one of the

124
00:04:16,470 --> 00:04:20,370
key things about that is this book it

125
00:04:18,209 --> 00:04:22,380
having globally unique names your book

126
00:04:20,370 --> 00:04:24,240
is in a region before websites your

127
00:04:22,380 --> 00:04:26,250
bucket name much must match the address

128
00:04:24,240 --> 00:04:27,370
of your web player so if you want to

129
00:04:26,250 --> 00:04:29,230
host Google

130
00:04:27,370 --> 00:04:30,970
from a book it he needs to have a bookie

131
00:04:29,230 --> 00:04:32,710
called google.com I'd only want a

132
00:04:30,970 --> 00:04:35,500
diverse account in the world kind of

133
00:04:32,710 --> 00:04:37,150
hole in a bucket called google.com now

134
00:04:35,500 --> 00:04:38,500
obviously chosen ones like Google comm

135
00:04:37,150 --> 00:04:39,669
you also need Google's name servers

136
00:04:38,500 --> 00:04:42,040
which they're probably not going to give

137
00:04:39,670 --> 00:04:43,870
you to test it but if you wanted to do

138
00:04:42,040 --> 00:04:45,730
this you can do that it leads to a

139
00:04:43,870 --> 00:04:47,170
slightly strange domain sporting issue

140
00:04:45,730 --> 00:04:48,580
where you can sort of predict domains

141
00:04:47,170 --> 00:04:50,560
that might want to host an s3 and future

142
00:04:48,580 --> 00:04:51,640
and just take their domain names I mean

143
00:04:50,560 --> 00:04:53,290
that's just kind of a dick move

144
00:04:51,640 --> 00:04:54,250
but maybe you want to have some fun with

145
00:04:53,290 --> 00:04:55,780
someone you know setting up a company

146
00:04:54,250 --> 00:04:58,330
and you can sell the book it matter than

147
00:04:55,780 --> 00:05:00,460
or something Oh s3 websites are also

148
00:04:58,330 --> 00:05:03,070
accessible at this longer URL at the

149
00:05:00,460 --> 00:05:07,840
bottom of the slide bucket name dot s3

150
00:05:03,070 --> 00:05:09,580
website - region Amazon is calm so for

151
00:05:07,840 --> 00:05:11,590
example if you are hosting google.com

152
00:05:09,580 --> 00:05:15,159
from an address book it here big you'll

153
00:05:11,590 --> 00:05:18,909
calm s3 - website - say you're in London

154
00:05:15,160 --> 00:05:20,950
EU - West at $2 in NBS calm and this is

155
00:05:18,910 --> 00:05:22,900
pretty useful for research so it's more

156
00:05:20,950 --> 00:05:24,729
stock cloud is itself hosted as an s3

157
00:05:22,900 --> 00:05:26,229
static website and so the first

158
00:05:24,730 --> 00:05:28,120
challenge has told us we want to find

159
00:05:26,230 --> 00:05:30,430
something to do with that bucket we can

160
00:05:28,120 --> 00:05:32,590
run dig to find an airport floor soft

161
00:05:30,430 --> 00:05:34,840
cloud which gives us an IP address but

162
00:05:32,590 --> 00:05:37,929
running nslookup on the IP address we

163
00:05:34,840 --> 00:05:39,460
find that its s3 website uswest - great

164
00:05:37,930 --> 00:05:41,350
we know now that there is a bucket

165
00:05:39,460 --> 00:05:45,849
called floor sock cloud and it's hosted

166
00:05:41,350 --> 00:05:47,650
in the region us West - so now we have

167
00:05:45,850 --> 00:05:49,180
this ability to find what's in the

168
00:05:47,650 --> 00:05:52,330
bucket but obvious that doesn't give us

169
00:05:49,180 --> 00:05:53,920
access straight away what does it anyway

170
00:05:52,330 --> 00:05:55,840
us have a really great command-line tool

171
00:05:53,920 --> 00:05:57,370
and the idea is you have an account you

172
00:05:55,840 --> 00:05:58,599
miss all the Kamala tool and you log in

173
00:05:57,370 --> 00:06:00,370
with your account and you do stuff on

174
00:05:58,600 --> 00:06:01,570
your account but the Kamala tool isn't

175
00:06:00,370 --> 00:06:03,370
fully restricted to using your own

176
00:06:01,570 --> 00:06:05,320
account it can be used honestly you can

177
00:06:03,370 --> 00:06:07,060
simply tell it don't look for my account

178
00:06:05,320 --> 00:06:10,570
credentials use any credentials you want

179
00:06:07,060 --> 00:06:14,560
and so we can do a simple lookup in s3

180
00:06:10,570 --> 00:06:16,150
to check for this book it using LS which

181
00:06:14,560 --> 00:06:19,690
is very familiar for anyone who uses

182
00:06:16,150 --> 00:06:21,760
UNIX system so LS s3 protocol floors

183
00:06:19,690 --> 00:06:23,740
cloud and then there's no sign request

184
00:06:21,760 --> 00:06:24,880
parameter which says don't give any

185
00:06:23,740 --> 00:06:27,190
credentials along with this request

186
00:06:24,880 --> 00:06:29,040
I'm totally anonymous the way thing is

187
00:06:27,190 --> 00:06:30,850
people can absolutely block

188
00:06:29,040 --> 00:06:33,880
authenticated users but not anonymous

189
00:06:30,850 --> 00:06:35,920
users because address and in this case

190
00:06:33,880 --> 00:06:36,909
we see secret man hash and that's the

191
00:06:35,920 --> 00:06:38,560
way the rest of these levels all work

192
00:06:36,910 --> 00:06:39,879
we'll find a secret page and when we

193
00:06:38,560 --> 00:06:41,529
pass our secret page

194
00:06:39,879 --> 00:06:44,499
we will get told you found a secret file

195
00:06:41,529 --> 00:06:46,058
go on to the next level the mitigation

196
00:06:44,499 --> 00:06:48,819
of this is that when you enable website

197
00:06:46,059 --> 00:06:50,409
access s3 adds a policy and these

198
00:06:48,819 --> 00:06:52,149
policies are used to control access to

199
00:06:50,409 --> 00:06:54,909
all resources in any way that's not just

200
00:06:52,149 --> 00:06:55,779
s3 so if you want to use anybody s a lot

201
00:06:54,909 --> 00:06:57,909
you're going to have to learn that

202
00:06:55,779 --> 00:06:59,770
policy language it's known as I am

203
00:06:57,909 --> 00:07:01,629
identity access management and the

204
00:06:59,770 --> 00:07:04,659
policies have this very similar format

205
00:07:01,629 --> 00:07:06,520
in JSON so they add that positive to you

206
00:07:04,659 --> 00:07:08,438
so that anyone can access your website

207
00:07:06,520 --> 00:07:09,938
what a lot of people do though is they

208
00:07:08,439 --> 00:07:10,929
panic and go on reflects not working

209
00:07:09,939 --> 00:07:12,249
because they aim on the policy that

210
00:07:10,929 --> 00:07:14,109
inste try and be their website and it

211
00:07:12,249 --> 00:07:16,809
can take a few seconds so then they go

212
00:07:14,110 --> 00:07:18,789
to this page and they have say oh look

213
00:07:16,809 --> 00:07:20,019
there's an access control listing and I

214
00:07:18,789 --> 00:07:21,938
need to allow everyone to list my

215
00:07:20,019 --> 00:07:23,139
objects at this point you've exposed the

216
00:07:21,939 --> 00:07:24,699
entirety of your book it permanently

217
00:07:23,139 --> 00:07:26,019
which means even things that aren't

218
00:07:24,699 --> 00:07:27,459
linked in your web route could be

219
00:07:26,019 --> 00:07:29,919
accessed by anyone using the address

220
00:07:27,459 --> 00:07:31,659
command-line tools we'll see why that

221
00:07:29,919 --> 00:07:34,149
could be a properly dangerous it's a bit

222
00:07:31,659 --> 00:07:36,938
later so we're on to challenge number

223
00:07:34,149 --> 00:07:39,819
two and this uses the access controllers

224
00:07:36,939 --> 00:07:41,019
as well so again we've got the level ID

225
00:07:39,819 --> 00:07:42,099
at the top therefore if you follow this

226
00:07:41,019 --> 00:07:43,269
on the slides later you can jump

227
00:07:42,099 --> 00:07:45,519
straight to a level and cheat your way

228
00:07:43,269 --> 00:07:46,809
through this and we say the level is

229
00:07:45,519 --> 00:07:47,829
similar with a slight twist but you're

230
00:07:46,809 --> 00:07:49,719
gonna need your own database account

231
00:07:47,829 --> 00:07:51,669
setting up your own NOS account is

232
00:07:49,719 --> 00:07:54,189
pretty helpful if you want to be testing

233
00:07:51,669 --> 00:07:55,448
anybody s for someone else obviously if

234
00:07:54,189 --> 00:07:57,129
you're running on any BS if you all have

235
00:07:55,449 --> 00:07:58,240
an interesting out but if you're testing

236
00:07:57,129 --> 00:07:59,829
stuff it might be helpful to have a

237
00:07:58,240 --> 00:08:02,289
separate account for running your

238
00:07:59,829 --> 00:08:03,550
testing in I'm definitely recommend

239
00:08:02,289 --> 00:08:04,729
splitting out any BS accounts for

240
00:08:03,550 --> 00:08:05,789
different purposes wherever possible

241
00:08:04,730 --> 00:08:07,930
[Music]

242
00:08:05,789 --> 00:08:09,909
when you create an alias account you get

243
00:08:07,930 --> 00:08:11,319
given route credentials and as is

244
00:08:09,909 --> 00:08:13,149
standard practice don't use your route

245
00:08:11,319 --> 00:08:14,829
credentials for everyday access you can

246
00:08:13,149 --> 00:08:16,809
create a user and you can give it an

247
00:08:14,829 --> 00:08:17,889
admin access policy or you can give it a

248
00:08:16,809 --> 00:08:19,329
more specific policy than what you're

249
00:08:17,889 --> 00:08:20,679
doing I'm not going to come out here

250
00:08:19,329 --> 00:08:21,789
because I could do an entire talk just

251
00:08:20,679 --> 00:08:23,438
on setting up your initial database

252
00:08:21,789 --> 00:08:25,779
account there are plenty of tutorials

253
00:08:23,439 --> 00:08:27,669
online to do that the key thing here is

254
00:08:25,779 --> 00:08:29,558
you generate an access key you'll see a

255
00:08:27,669 --> 00:08:32,468
security key for it and you can insert

256
00:08:29,559 --> 00:08:34,180
this into the console so if you go into

257
00:08:32,469 --> 00:08:35,469
any PS of type configure you can give it

258
00:08:34,179 --> 00:08:37,598
a profile name so let's say you're doing

259
00:08:35,469 --> 00:08:39,729
this after the talk you want to type a

260
00:08:37,599 --> 00:08:41,829
profile be size 19 and then put in your

261
00:08:39,729 --> 00:08:44,229
access key and secret key and now you

262
00:08:41,828 --> 00:08:45,880
can run as that user on that account for

263
00:08:44,229 --> 00:08:47,290
the work you're doing here and it won't

264
00:08:45,880 --> 00:08:48,839
affect any other LMS accounts that you

265
00:08:47,290 --> 00:08:51,250
happen to be running with on your system

266
00:08:48,839 --> 00:08:52,650
and you can put in a default region

267
00:08:51,250 --> 00:08:53,910
you best west to is good but this

268
00:08:52,650 --> 00:08:56,699
because everything is hosted in u.s.

269
00:08:53,910 --> 00:08:58,350
West to this exercise and now we can

270
00:08:56,700 --> 00:09:00,480
simply do the same thing when you're

271
00:08:58,350 --> 00:09:03,210
lost I'll put now with our own profile

272
00:09:00,480 --> 00:09:04,890
and uh if we'd run this with no sign

273
00:09:03,210 --> 00:09:06,570
requests we'd have gotten access denied

274
00:09:04,890 --> 00:09:08,430
but suddenly even though we're not the

275
00:09:06,570 --> 00:09:10,560
account that is the Bukit we can see all

276
00:09:08,430 --> 00:09:13,410
the files and once again we get on to

277
00:09:10,560 --> 00:09:15,750
the next level the reason for this is a

278
00:09:13,410 --> 00:09:18,060
canned access control list doesn't have

279
00:09:15,750 --> 00:09:19,260
a set of Canvassers control lists how

280
00:09:18,060 --> 00:09:21,540
easily can you see that there you should

281
00:09:19,260 --> 00:09:22,650
see it relatively easily and the

282
00:09:21,540 --> 00:09:25,020
different Isis control lists can be

283
00:09:22,650 --> 00:09:27,300
applied to a bucket or an object to

284
00:09:25,020 --> 00:09:30,810
allow different levels of user certain

285
00:09:27,300 --> 00:09:32,160
accounts certain groups of users things

286
00:09:30,810 --> 00:09:35,729
like the ADA best mod delivery system

287
00:09:32,160 --> 00:09:37,050
access to your buckets it can details

288
00:09:35,730 --> 00:09:39,810
are great for quickly setting up buckets

289
00:09:37,050 --> 00:09:41,400
and easy security fencing but they're

290
00:09:39,810 --> 00:09:43,800
also great for not quite understanding

291
00:09:41,400 --> 00:09:48,420
what they do for example this can be a

292
00:09:43,800 --> 00:09:50,459
CL is about authentication so the only

293
00:09:48,420 --> 00:09:52,410
it's full access and authenticated users

294
00:09:50,460 --> 00:09:53,700
get full access so to me an

295
00:09:52,410 --> 00:09:56,219
authenticated user means an

296
00:09:53,700 --> 00:09:58,440
authenticated user of my system so if I

297
00:09:56,220 --> 00:10:00,390
set up a bucket and give it this ACL I

298
00:09:58,440 --> 00:10:01,410
expect other users in my a degress

299
00:10:00,390 --> 00:10:03,089
account can access it

300
00:10:01,410 --> 00:10:05,010
anyway this language is slightly

301
00:10:03,089 --> 00:10:08,160
ambiguous here authenticated user means

302
00:10:05,010 --> 00:10:10,050
any user of AWS in the world and at this

303
00:10:08,160 --> 00:10:12,390
point you apply what looks like a secure

304
00:10:10,050 --> 00:10:14,339
policy to your bucket and anyone with an

305
00:10:12,390 --> 00:10:18,209
MS account which is free to set up can

306
00:10:14,339 --> 00:10:19,410
go and view your bucket this was easy to

307
00:10:18,209 --> 00:10:20,790
apply it all the roof of the console

308
00:10:19,410 --> 00:10:22,410
they have removed that now because it

309
00:10:20,790 --> 00:10:23,699
was such a big floor but it's still

310
00:10:22,410 --> 00:10:25,949
possible to apply in the command line

311
00:10:23,700 --> 00:10:28,200
and a lot of old tools that kind of

312
00:10:25,950 --> 00:10:29,850
create s3 buckets for you and do like a

313
00:10:28,200 --> 00:10:30,870
lot of setup for some sort of data

314
00:10:29,850 --> 00:10:32,490
storage maybe for something like

315
00:10:30,870 --> 00:10:35,580
WordPress as a content management system

316
00:10:32,490 --> 00:10:37,290
stories area may still use the old ACLs

317
00:10:35,580 --> 00:10:39,740
so do check when you're installing these

318
00:10:37,290 --> 00:10:43,620
whether they have these ACLs attached to

319
00:10:39,740 --> 00:10:46,050
ok on to number three a whole new way to

320
00:10:43,620 --> 00:10:47,670
expose get once again we have the URL

321
00:10:46,050 --> 00:10:49,319
there and this is similar to the

322
00:10:47,670 --> 00:10:51,750
previous levels but we're going to find

323
00:10:49,320 --> 00:10:53,310
that AWS key any of us keys are really

324
00:10:51,750 --> 00:10:56,100
the bread and butter of any sort of

325
00:10:53,310 --> 00:10:57,900
attempts a hack or test any res accounts

326
00:10:56,100 --> 00:10:59,040
if you have a key you can probably do

327
00:10:57,900 --> 00:11:02,459
something that someone doesn't want you

328
00:10:59,040 --> 00:11:05,699
to do we can do the same thing we didn't

329
00:11:02,459 --> 00:11:06,180
challenge one so we go on how we list

330
00:11:05,700 --> 00:11:08,820
the

331
00:11:06,180 --> 00:11:11,010
to the Bukit with no sign request this

332
00:11:08,820 --> 00:11:13,350
pre symbol appears in our command output

333
00:11:11,010 --> 00:11:14,880
is prefix so even though they don't

334
00:11:13,350 --> 00:11:16,620
technically have directory structures

335
00:11:14,880 --> 00:11:18,450
they will tell you this is the prefix

336
00:11:16,620 --> 00:11:24,330
you can look inside it and here's a

337
00:11:18,450 --> 00:11:26,070
prefix called docket ah hello what you

338
00:11:24,330 --> 00:11:28,339
reckons happened here well some poor

339
00:11:26,070 --> 00:11:31,470
soul has uploaded their docket file

340
00:11:28,339 --> 00:11:34,740
let's pull it down to our system we

341
00:11:31,470 --> 00:11:36,779
extracts it using s3 sync and now we

342
00:11:34,740 --> 00:11:39,630
find out within a regular git repository

343
00:11:36,779 --> 00:11:41,430
and we can run git log we see some

344
00:11:39,630 --> 00:11:43,200
commits we see the first commit and then

345
00:11:41,430 --> 00:11:46,079
we see another commit home I've added

346
00:11:43,200 --> 00:11:48,029
something I shouldn't have done using it

347
00:11:46,080 --> 00:11:50,450
we can now check out what's in that

348
00:11:48,029 --> 00:11:53,580
first commit that the second one did so

349
00:11:50,450 --> 00:11:58,290
going to check it out I'm going to an LS

350
00:11:53,580 --> 00:11:59,880
a look access Keys dot txt probably more

351
00:11:58,290 --> 00:12:04,170
regularly named than it would be in a

352
00:11:59,880 --> 00:12:07,230
real scenario and now we haven't any BS

353
00:12:04,170 --> 00:12:08,209
access key and secret key let's check if

354
00:12:07,230 --> 00:12:10,320
it's still valid

355
00:12:08,209 --> 00:12:11,760
we've run a TS configure with a new

356
00:12:10,320 --> 00:12:13,020
profile name so we can keep sort of

357
00:12:11,760 --> 00:12:16,740
ramping these up and store them as we go

358
00:12:13,020 --> 00:12:20,220
to continue our test and then we can run

359
00:12:16,740 --> 00:12:22,920
some commands as this key so let's list

360
00:12:20,220 --> 00:12:25,350
all the buckets on this account and we

361
00:12:22,920 --> 00:12:29,430
see an bucket called level 4 well don't

362
00:12:25,350 --> 00:12:31,410
run to the next level now another

363
00:12:29,430 --> 00:12:33,120
vulnerability was needed to expose this

364
00:12:31,410 --> 00:12:34,800
problem they already have this open

365
00:12:33,120 --> 00:12:37,320
bucket but actually if you're building

366
00:12:34,800 --> 00:12:39,089
website a static website what's the

367
00:12:37,320 --> 00:12:42,029
likelihood that you'll simply sink your

368
00:12:39,089 --> 00:12:44,670
entire directory oops in a TBS now the

369
00:12:42,029 --> 00:12:47,760
IDS sync command ignores dot files by

370
00:12:44,670 --> 00:12:49,829
default until you add a whitelist

371
00:12:47,760 --> 00:12:51,990
include or what or blacklist exclude

372
00:12:49,829 --> 00:12:54,239
flag at which point if you add an S to

373
00:12:51,990 --> 00:12:56,100
flag it will then include everything you

374
00:12:54,240 --> 00:12:58,560
didn't s clewd which can include your

375
00:12:56,100 --> 00:13:00,180
dock your file directory and so now

376
00:12:58,560 --> 00:13:02,310
you've synced your kit directory to your

377
00:13:00,180 --> 00:13:03,630
web server and that access key might

378
00:13:02,310 --> 00:13:04,949
just be used for this simple static site

379
00:13:03,630 --> 00:13:07,170
people use such as us a lot in

380
00:13:04,950 --> 00:13:10,079
businesses something like a marketing

381
00:13:07,170 --> 00:13:11,610
sort of marketing campaign how likely is

382
00:13:10,079 --> 00:13:14,430
the marketing department to roll their

383
00:13:11,610 --> 00:13:16,140
keys regularly how likely are you to

384
00:13:14,430 --> 00:13:17,640
have just given them a key that has way

385
00:13:16,140 --> 00:13:18,920
more access than it needed to for them

386
00:13:17,640 --> 00:13:20,449
to run their marketing campaign

387
00:13:18,920 --> 00:13:21,709
you know you've got that email from them

388
00:13:20,449 --> 00:13:23,839
while this isn't working again and you

389
00:13:21,709 --> 00:13:25,670
throw your toys down and you could add

390
00:13:23,839 --> 00:13:27,170
admin access to them for their for the

391
00:13:25,670 --> 00:13:28,549
week you say well I'll take it off the

392
00:13:27,170 --> 00:13:32,089
end of the week and then life happens

393
00:13:28,549 --> 00:13:33,170
and suddenly your keys being exposed you

394
00:13:32,089 --> 00:13:35,679
can look at this and guys it's all

395
00:13:33,170 --> 00:13:38,149
hypothetical this happened to Instagram

396
00:13:35,679 --> 00:13:40,759
it was reported as instagrams million

397
00:13:38,149 --> 00:13:42,109
dollar book because instagrams security

398
00:13:40,759 --> 00:13:43,549
team famously said they would pay a

399
00:13:42,109 --> 00:13:46,549
million dollar book bounty if one was

400
00:13:43,549 --> 00:13:48,529
found spoiler alert they didn't pay the

401
00:13:46,549 --> 00:13:52,369
bounty instead they sent the FBI

402
00:13:48,529 --> 00:13:53,540
happened first and found it so Google

403
00:13:52,369 --> 00:13:54,109
that one you can find a really good rise

404
00:13:53,540 --> 00:13:57,529
up on it

405
00:13:54,109 --> 00:13:59,869
eventually they paid a bit of money but

406
00:13:57,529 --> 00:14:01,069
make sure to ignore docket files bore so

407
00:13:59,869 --> 00:14:02,980
don't commit your credentials in the

408
00:14:01,069 --> 00:14:05,929
first place this is source security 101

409
00:14:02,980 --> 00:14:09,019
credentials don't exist in version

410
00:14:05,929 --> 00:14:11,269
control or just anywhere near something

411
00:14:09,019 --> 00:14:12,919
you're deploying and if credentials are

412
00:14:11,269 --> 00:14:15,949
expose don't just do a commit and hope

413
00:14:12,919 --> 00:14:17,929
no one notices role the credentials

414
00:14:15,949 --> 00:14:19,399
recreate them and that's another good

415
00:14:17,929 --> 00:14:21,108
reason to use separate credentials for

416
00:14:19,399 --> 00:14:22,759
everything you do because if you expose

417
00:14:21,109 --> 00:14:24,290
your providential as on some random

418
00:14:22,759 --> 00:14:25,759
marketing website they need to roll them

419
00:14:24,290 --> 00:14:27,498
and they're the same credentials now

420
00:14:25,759 --> 00:14:29,149
prod us to go down watch you finish your

421
00:14:27,499 --> 00:14:30,860
potential so separate credentials

422
00:14:29,149 --> 00:14:34,369
for every use case is a really good

423
00:14:30,860 --> 00:14:35,959
lesson from this as well we're going to

424
00:14:34,369 --> 00:14:37,999
learn to break into servers by cloning

425
00:14:35,959 --> 00:14:40,669
their hard disks this is something you

426
00:14:37,999 --> 00:14:42,199
couldn't do before the cloud so once

427
00:14:40,669 --> 00:14:43,549
again we have a lower URL and you're

428
00:14:42,199 --> 00:14:46,669
going to get access to an easy to

429
00:14:43,549 --> 00:14:48,319
running at this very long subdomain and

430
00:14:46,669 --> 00:14:51,049
we're told that a snapshot was made of

431
00:14:48,319 --> 00:14:54,009
this ec2 instance right before nginx was

432
00:14:51,049 --> 00:14:56,689
set up on it let's go over some jargon

433
00:14:54,009 --> 00:14:59,989
ec2 is Elastic Compute cloud basically

434
00:14:56,689 --> 00:15:02,868
Amazon's VPS offering and the snapshot

435
00:14:59,989 --> 00:15:05,329
is a full copy of a disk stored in s3

436
00:15:02,869 --> 00:15:06,439
now unlike a lot of things in s3 buckets

437
00:15:05,329 --> 00:15:09,258
you can't access it through the regular

438
00:15:06,439 --> 00:15:11,329
s3 command line but it is essentially in

439
00:15:09,259 --> 00:15:14,089
s3 and at me that's inherent to a lot of

440
00:15:11,329 --> 00:15:17,209
the sharing and access resources that s3

441
00:15:14,089 --> 00:15:19,879
is your formal to and EBS is elastic

442
00:15:17,209 --> 00:15:21,799
block store basically hard disks 80 refs

443
00:15:19,879 --> 00:15:26,269
have to give an acronym to everything

444
00:15:21,799 --> 00:15:28,069
they do so hard this become EBS etc but

445
00:15:26,269 --> 00:15:28,870
after a while you learn to speak in

446
00:15:28,069 --> 00:15:30,310
acronyms and you say

447
00:15:28,870 --> 00:15:33,040
cleverly taught some headers and thought

448
00:15:30,310 --> 00:15:35,170
about snapshots often made public to

449
00:15:33,040 --> 00:15:36,670
transfer them as been accounts so I want

450
00:15:35,170 --> 00:15:37,990
to move my account that's doing

451
00:15:36,670 --> 00:15:40,630
everything after one account is doing

452
00:15:37,990 --> 00:15:42,190
prod staging dev marketing testing

453
00:15:40,630 --> 00:15:43,600
analytics all this sort of stuff I'm

454
00:15:42,190 --> 00:15:46,600
hosting us a random katfoe is in there

455
00:15:43,600 --> 00:15:48,040
for my life and actually I decide maybe

456
00:15:46,600 --> 00:15:49,480
that's not good idea I want to move to

457
00:15:48,040 --> 00:15:51,969
multiple accounts that make a sensible

458
00:15:49,480 --> 00:15:53,529
structure for my organization but I mean

459
00:15:51,970 --> 00:15:55,779
there's all my images that are built on

460
00:15:53,529 --> 00:15:57,880
my servers need to be transferred there

461
00:15:55,779 --> 00:15:59,320
are ways to do this to involve changing

462
00:15:57,880 --> 00:16:01,540
permissions on both sides and using

463
00:15:59,320 --> 00:16:02,470
interesting command-line tools the other

464
00:16:01,540 --> 00:16:04,599
way to do this is to go into your

465
00:16:02,470 --> 00:16:07,450
snapshots and take make public and then

466
00:16:04,600 --> 00:16:09,130
send the URL to someone else this is a

467
00:16:07,450 --> 00:16:10,630
common way people transfer snapshots and

468
00:16:09,130 --> 00:16:13,960
guess how many people forget to punt it

469
00:16:10,630 --> 00:16:16,000
and make public box afterwards to find

470
00:16:13,960 --> 00:16:17,890
out snapshots on an account all you need

471
00:16:16,000 --> 00:16:19,000
to do is know the account ID so let's go

472
00:16:17,890 --> 00:16:21,580
back to our hacker credentials from

473
00:16:19,000 --> 00:16:23,020
before and we can use this get call

474
00:16:21,580 --> 00:16:24,339
identity command this is really handy

475
00:16:23,020 --> 00:16:25,689
for when you're testing if you find some

476
00:16:24,339 --> 00:16:27,610
keys the first thing you want to do is

477
00:16:25,690 --> 00:16:30,040
run this and this will tell you who you

478
00:16:27,610 --> 00:16:32,529
are and I know the account ID now of

479
00:16:30,040 --> 00:16:36,130
someone who I can look for easy to

480
00:16:32,529 --> 00:16:38,439
snapshots and so now as anyone not just

481
00:16:36,130 --> 00:16:41,020
as the user there I can do it as my own

482
00:16:38,440 --> 00:16:44,589
account I can check for snapshots owned

483
00:16:41,020 --> 00:16:46,000
by that account ID and I'm putting here

484
00:16:44,589 --> 00:16:47,140
region uswest to just didn't think

485
00:16:46,000 --> 00:16:48,310
because you might learn it if you've

486
00:16:47,140 --> 00:16:49,569
configured it the right way but I often

487
00:16:48,310 --> 00:16:51,099
add the region just to make sure I'm in

488
00:16:49,570 --> 00:16:52,660
the right place if you really should be

489
00:16:51,100 --> 00:16:54,250
doing a test and you admit the region

490
00:16:52,660 --> 00:16:56,680
one time and you totally missed

491
00:16:54,250 --> 00:16:58,300
something that's blatant and obvious so

492
00:16:56,680 --> 00:17:00,180
always try and people for both in in

493
00:16:58,300 --> 00:17:02,290
anything you're doing here for testing

494
00:17:00,180 --> 00:17:05,740
and look we've got a snapshot

495
00:17:02,290 --> 00:17:10,300
staff ID real on hash and hey it's not

496
00:17:05,740 --> 00:17:11,890
encrypted that's good news for us so we

497
00:17:10,300 --> 00:17:13,389
can now do this this is a long procedure

498
00:17:11,890 --> 00:17:14,380
this will take you probably 10-15

499
00:17:13,390 --> 00:17:15,550
minutes if you try and do it yourself

500
00:17:14,380 --> 00:17:16,709
I'm not going to in front of you because

501
00:17:15,550 --> 00:17:19,629
that will take up all the time I have

502
00:17:16,709 --> 00:17:21,280
and so I'm just gonna walk through what

503
00:17:19,630 --> 00:17:23,410
you do go and try this yourself it's

504
00:17:21,280 --> 00:17:26,170
quite interesting you create a volume

505
00:17:23,410 --> 00:17:28,209
using a snapshot ID so a new EBS volume

506
00:17:26,170 --> 00:17:30,400
new hard disk and then you create the

507
00:17:28,209 --> 00:17:32,590
new easy to your instance and you give

508
00:17:30,400 --> 00:17:34,179
it your own key to log into so when you

509
00:17:32,590 --> 00:17:35,740
create an instance even give it a key

510
00:17:34,179 --> 00:17:37,570
even if you're using someone else's hard

511
00:17:35,740 --> 00:17:39,250
disk image you can give it a key enabler

512
00:17:37,570 --> 00:17:39,870
for just inject a key into the system

513
00:17:39,250 --> 00:17:41,669
for

514
00:17:39,870 --> 00:17:42,689
so therefore you can always login even

515
00:17:41,669 --> 00:17:45,450
if you're shooting someone else's disk

516
00:17:42,690 --> 00:17:46,980
image you sign this is for that key and

517
00:17:45,450 --> 00:17:49,020
then you mount this extra volume you've

518
00:17:46,980 --> 00:17:51,299
added to it the commands are mounting

519
00:17:49,020 --> 00:17:54,960
different / OS but you should be also

520
00:17:51,299 --> 00:17:56,520
find those up fairly easily and so we're

521
00:17:54,960 --> 00:17:58,350
on this disk we've got our instance we

522
00:17:56,520 --> 00:18:00,120
can SH into it because our instance this

523
00:17:58,350 --> 00:18:01,260
isn't anyone else's system now the nice

524
00:18:00,120 --> 00:18:03,030
thing here as well is that once you're

525
00:18:01,260 --> 00:18:04,559
exploiting a snapshot anything you do on

526
00:18:03,030 --> 00:18:06,330
here isn't likely to hit the original

527
00:18:04,559 --> 00:18:08,340
target so you can do quite destructive

528
00:18:06,330 --> 00:18:09,360
things testing here to find out whether

529
00:18:08,340 --> 00:18:13,049
it be vulnerabilities in the original

530
00:18:09,360 --> 00:18:15,449
server and look we found a file sets or

531
00:18:13,049 --> 00:18:16,889
nginx fire stage again well better name

532
00:18:15,450 --> 00:18:22,200
than any of the files you tend to use

533
00:18:16,890 --> 00:18:23,730
you know attempt 3 dot H dot back and so

534
00:18:22,200 --> 00:18:25,290
let's have a look what's in it and we

535
00:18:23,730 --> 00:18:27,860
have a HT password commands that's

536
00:18:25,290 --> 00:18:31,168
saying a pasty password file in our

537
00:18:27,860 --> 00:18:33,030
nginx setup and as you may expect we can

538
00:18:31,169 --> 00:18:34,980
now browse the original URL and we enter

539
00:18:33,030 --> 00:18:37,470
our username and password for HTTP basic

540
00:18:34,980 --> 00:18:38,450
auth and we get the link to floors level

541
00:18:37,470 --> 00:18:41,190
5

542
00:18:38,450 --> 00:18:42,870
where's I'm instigation for this don't

543
00:18:41,190 --> 00:18:45,660
open snapshots to the public unless

544
00:18:42,870 --> 00:18:47,489
that's forgot if it is your goal I'm

545
00:18:45,660 --> 00:18:49,440
quite wondering what you're doing but

546
00:18:47,490 --> 00:18:50,790
also be careful the process of creating

547
00:18:49,440 --> 00:18:52,320
a disk image is very different from the

548
00:18:50,790 --> 00:18:53,850
process of writing some sort of

549
00:18:52,320 --> 00:18:55,049
provisioning file because when you write

550
00:18:53,850 --> 00:18:56,280
provisioning file you know exactly

551
00:18:55,049 --> 00:18:57,480
what's in it you can read it when you're

552
00:18:56,280 --> 00:18:59,490
creating a disk image you're not always

553
00:18:57,480 --> 00:19:00,690
certain what credentials you invented at

554
00:18:59,490 --> 00:19:02,730
some point that might be stored in a dot

555
00:19:00,690 --> 00:19:04,830
batch history file stored in the temp

556
00:19:02,730 --> 00:19:06,120
directory stored in logs so if you do

557
00:19:04,830 --> 00:19:07,889
want to make it easy to and share it

558
00:19:06,120 --> 00:19:09,059
publicly for some reason really check

559
00:19:07,890 --> 00:19:11,040
how you've built that and make sure

560
00:19:09,059 --> 00:19:13,049
there's nothing sensitive on it when you

561
00:19:11,040 --> 00:19:14,610
are sharing share with one specific

562
00:19:13,049 --> 00:19:15,690
accounts you can do this it's a bit more

563
00:19:14,610 --> 00:19:17,459
complicated but if you know someone

564
00:19:15,690 --> 00:19:20,010
else's account ID to transfer an ec2

565
00:19:17,460 --> 00:19:22,320
instance you can share the account I'll

566
00:19:20,010 --> 00:19:24,030
find a way to encrypt snapshots when

567
00:19:22,320 --> 00:19:25,620
everybody encrypts a disk snapshot you

568
00:19:24,030 --> 00:19:27,210
need to permission to access that

569
00:19:25,620 --> 00:19:28,979
snapshot one permission to look at the

570
00:19:27,210 --> 00:19:30,900
snapshot which we had because it was

571
00:19:28,980 --> 00:19:33,210
publicly but the second thing is

572
00:19:30,900 --> 00:19:35,549
permission to use the key that encrypts

573
00:19:33,210 --> 00:19:36,720
our snapshot and keys are much harder to

574
00:19:35,549 --> 00:19:38,760
accidentally grant access to someone

575
00:19:36,720 --> 00:19:41,490
else you have to go and say I want to

576
00:19:38,760 --> 00:19:43,080
give this person access to my key and

577
00:19:41,490 --> 00:19:44,940
the nice thing is if someone gets you of

578
00:19:43,080 --> 00:19:46,379
this snapshot which is public and tries

579
00:19:44,940 --> 00:19:48,659
to decrypt it without access to your key

580
00:19:46,380 --> 00:19:50,610
you'll get a message in your logs saying

581
00:19:48,659 --> 00:19:52,260
hey someone tried to use your key they

582
00:19:50,610 --> 00:19:52,590
didn't get in they tried to use it and

583
00:19:52,260 --> 00:19:54,059
now you

584
00:19:52,590 --> 00:19:55,860
someone's trying to venture into your

585
00:19:54,059 --> 00:19:57,480
system and take the distaff shots which

586
00:19:55,860 --> 00:19:59,699
means you can firstly make them private

587
00:19:57,480 --> 00:20:01,740
and secondly you know you've got someone

588
00:19:59,700 --> 00:20:03,059
targeting you that might be a pendant or

589
00:20:01,740 --> 00:20:04,770
you've employed and yet which is good

590
00:20:03,059 --> 00:20:06,870
you can say hey we're aware of this or

591
00:20:04,770 --> 00:20:11,100
it might be someone malicious so be

592
00:20:06,870 --> 00:20:15,809
aware of that exposing credentials via

593
00:20:11,100 --> 00:20:18,389
proxy this is a fun one this is to have

594
00:20:15,809 --> 00:20:19,770
a simple HTTP only proxy on it and

595
00:20:18,390 --> 00:20:22,980
there's an example growing never at

596
00:20:19,770 --> 00:20:24,360
Cellcom through a proxy running open

597
00:20:22,980 --> 00:20:26,399
boxes isn't something most people tend

598
00:20:24,360 --> 00:20:29,729
to do but is something people can do

599
00:20:26,399 --> 00:20:31,139
accidentally for other reasons and to

600
00:20:29,730 --> 00:20:33,659
exploit this we need to know about the

601
00:20:31,140 --> 00:20:35,610
easiest view metadata instance every

602
00:20:33,659 --> 00:20:37,350
store instance has a server brewing

603
00:20:35,610 --> 00:20:38,850
locally to it which can be hit on one

604
00:20:37,350 --> 00:20:41,129
sixty nine two four four one six nine

605
00:20:38,850 --> 00:20:42,750
two five four if you hit the server with

606
00:20:41,130 --> 00:20:45,630
a HTTP request you get a really long

607
00:20:42,750 --> 00:20:47,149
list of commands and information about

608
00:20:45,630 --> 00:20:49,679
the server that you're currently our

609
00:20:47,149 --> 00:20:51,149
anywh esq is this but also Google cloud

610
00:20:49,679 --> 00:20:54,350
platform users they might be addressed

611
00:20:51,149 --> 00:20:56,370
as Ewing is this same IP address to host

612
00:20:54,350 --> 00:20:58,620
information about the server that you

613
00:20:56,370 --> 00:21:01,110
are running on which can include loads

614
00:20:58,620 --> 00:21:02,279
of random and pointless details also

615
00:21:01,110 --> 00:21:04,229
could include things like security

616
00:21:02,279 --> 00:21:05,340
credentials and this is useful for the

617
00:21:04,230 --> 00:21:07,320
system because it means that if I'm

618
00:21:05,340 --> 00:21:09,270
writing an application to run on ec2 and

619
00:21:07,320 --> 00:21:10,439
my application doesn't need to find

620
00:21:09,270 --> 00:21:12,870
credentials I have its own credentials

621
00:21:10,440 --> 00:21:14,730
to access area services I could simply

622
00:21:12,870 --> 00:21:16,770
provision an instance with a role that

623
00:21:14,730 --> 00:21:18,630
allows that instance to do something

624
00:21:16,770 --> 00:21:21,210
anywhere say create and us three bucket

625
00:21:18,630 --> 00:21:22,470
or file in it and that's a really handy

626
00:21:21,210 --> 00:21:24,000
way to limit your security because your

627
00:21:22,470 --> 00:21:27,360
instances and your code base doesn't

628
00:21:24,000 --> 00:21:29,210
have access keys in anymore but we have

629
00:21:27,360 --> 00:21:32,549
an open proxy on this system

630
00:21:29,210 --> 00:21:35,130
so let's curl it so we're curling prop

631
00:21:32,549 --> 00:21:37,500
the floor cloud address soft proxy and

632
00:21:35,130 --> 00:21:39,480
the metadata server as you might have

633
00:21:37,500 --> 00:21:42,720
expected with my long preamble we get

634
00:21:39,480 --> 00:21:45,299
into it the first set of listings you

635
00:21:42,720 --> 00:21:47,130
get is API versions each time they add

636
00:21:45,299 --> 00:21:48,750
new things they roll the version so that

637
00:21:47,130 --> 00:21:50,190
they don't break all things which don't

638
00:21:48,750 --> 00:21:52,140
expect things to be there or so the

639
00:21:50,190 --> 00:21:54,720
format's but you can generally just use

640
00:21:52,140 --> 00:21:57,539
latest if you're testing what's

641
00:21:54,720 --> 00:21:58,950
available in our latest so we have a

642
00:21:57,539 --> 00:22:00,240
whole list of things but you'll

643
00:21:58,950 --> 00:22:01,870
hopefully notice one right in the middle

644
00:22:00,240 --> 00:22:04,860
on the

645
00:22:01,870 --> 00:22:08,520
phone column there that says I am

646
00:22:04,860 --> 00:22:13,300
identity access management and

647
00:22:08,520 --> 00:22:15,610
predictably if we go into it we get an

648
00:22:13,300 --> 00:22:17,590
access key and a secret key we also get

649
00:22:15,610 --> 00:22:19,330
the token and that's interesting because

650
00:22:17,590 --> 00:22:22,330
this is using not a database user

651
00:22:19,330 --> 00:22:23,559
account or group but a role and the

652
00:22:22,330 --> 00:22:24,669
reason it's using a role is because

653
00:22:23,559 --> 00:22:26,320
that's how instances are given

654
00:22:24,670 --> 00:22:27,520
permissions roles were excited

655
00:22:26,320 --> 00:22:28,840
differently to use this the user has

656
00:22:27,520 --> 00:22:32,139
access key and secret key they can just

657
00:22:28,840 --> 00:22:33,909
access any BS with anytime a role uses

658
00:22:32,140 --> 00:22:37,059
its access and secret key to generate a

659
00:22:33,910 --> 00:22:39,820
short term anywhere from 15 minutes up

660
00:22:37,059 --> 00:22:42,940
to I think four it's 48 hours it's other

661
00:22:39,820 --> 00:22:45,490
limit and might change key that can then

662
00:22:42,940 --> 00:22:47,470
be used in perpetuity for the time to do

663
00:22:45,490 --> 00:22:48,790
things so therefore if you want to

664
00:22:47,470 --> 00:22:50,620
exploit this you can't just say the

665
00:22:48,790 --> 00:22:52,420
access key and secret access key and

666
00:22:50,620 --> 00:22:54,699
your talk will only be valid for a

667
00:22:52,420 --> 00:22:56,650
certain amount of time or expires so if

668
00:22:54,700 --> 00:22:58,000
you get hold of this you have a time

669
00:22:56,650 --> 00:22:59,530
limit now on your further test with it

670
00:22:58,000 --> 00:23:02,020
unless you can just go back and abused a

671
00:22:59,530 --> 00:23:04,928
proxy a second time so we're going to

672
00:23:02,020 --> 00:23:07,030
put these into our aggregate credentials

673
00:23:04,929 --> 00:23:08,440
but we have to add an extra field we

674
00:23:07,030 --> 00:23:10,120
have to edit this a degree exponentials

675
00:23:08,440 --> 00:23:11,950
file where we have the name of our

676
00:23:10,120 --> 00:23:13,750
profile whether we put the access key

677
00:23:11,950 --> 00:23:17,110
and secret key and z and then add this

678
00:23:13,750 --> 00:23:19,210
session token' and you can use the SDS

679
00:23:17,110 --> 00:23:21,610
accord entity feature and other features

680
00:23:19,210 --> 00:23:23,140
to find out how long you have so if the

681
00:23:21,610 --> 00:23:24,669
person is smart this has a token my on

682
00:23:23,140 --> 00:23:26,679
your last 15 minutes that limits what

683
00:23:24,670 --> 00:23:27,820
you can do in that time and hopefully by

684
00:23:26,679 --> 00:23:30,010
that point they've spawned in the logs

685
00:23:27,820 --> 00:23:31,149
that someone's hid their proxy the other

686
00:23:30,010 --> 00:23:32,890
day if they're not monitoring it though

687
00:23:31,150 --> 00:23:34,090
you can just keep getting a token again

688
00:23:32,890 --> 00:23:35,350
and again and again and keep exploiting

689
00:23:34,090 --> 00:23:38,169
them it doesn't matter what time limits

690
00:23:35,350 --> 00:23:42,070
on it so let's use these credentials now

691
00:23:38,170 --> 00:23:44,500
and predictably we get a address to

692
00:23:42,070 --> 00:23:47,189
another file in this directory and we

693
00:23:44,500 --> 00:23:50,260
can go on to level 6

694
00:23:47,190 --> 00:23:53,110
what's our mitigation here don't run

695
00:23:50,260 --> 00:23:54,580
proxies would be my number one thing the

696
00:23:53,110 --> 00:23:56,199
chances that you need a publicly

697
00:23:54,580 --> 00:23:57,550
accessible web server running a proxy

698
00:23:56,200 --> 00:24:00,610
that can proxy any website on the

699
00:23:57,550 --> 00:24:01,780
Internet is pretty low maybe you have

700
00:24:00,610 --> 00:24:04,419
use cases I would love to hear about

701
00:24:01,780 --> 00:24:06,220
them but in general if you can help it

702
00:24:04,420 --> 00:24:07,310
don't run proxies through public less or

703
00:24:06,220 --> 00:24:09,410
web servers

704
00:24:07,310 --> 00:24:10,760
if you do need to use a white list of

705
00:24:09,410 --> 00:24:12,200
allowed proxy domains you probably don't

706
00:24:10,760 --> 00:24:13,460
need to proxy the entire internet unless

707
00:24:12,200 --> 00:24:16,220
that's you literally your point of your

708
00:24:13,460 --> 00:24:18,890
service you can specifically block the

709
00:24:16,220 --> 00:24:20,810
method ater IP in your proxy or you can

710
00:24:18,890 --> 00:24:23,540
use a wife to block any request that

711
00:24:20,810 --> 00:24:25,190
comes in with that IP string in it do be

712
00:24:23,540 --> 00:24:27,770
aware that various X points exist for a

713
00:24:25,190 --> 00:24:29,360
lot of common wefts that people can find

714
00:24:27,770 --> 00:24:30,560
weird ways to encode a string so that

715
00:24:29,360 --> 00:24:32,209
the laughs doesn't see it but it still

716
00:24:30,560 --> 00:24:34,310
goes to the proxy eventually so you have

717
00:24:32,210 --> 00:24:35,480
sort of walking on eggshells point where

718
00:24:34,310 --> 00:24:36,800
you're trying to block sir and IP

719
00:24:35,480 --> 00:24:39,980
addresses should be entered in query

720
00:24:36,800 --> 00:24:42,169
strings or headers so the nuclear option

721
00:24:39,980 --> 00:24:43,940
is you can use route tables on your

722
00:24:42,170 --> 00:24:46,100
instance to block anything on the system

723
00:24:43,940 --> 00:24:47,930
accessing the method a service this will

724
00:24:46,100 --> 00:24:49,219
also hose any application on the system

725
00:24:47,930 --> 00:24:51,050
that relies on the metadata service

726
00:24:49,220 --> 00:24:52,550
existing to get credentials - it's not

727
00:24:51,050 --> 00:24:53,840
that useful but I guess if you were

728
00:24:52,550 --> 00:24:55,190
running an easy view server that was

729
00:24:53,840 --> 00:24:57,770
doing nothing with anything else on any

730
00:24:55,190 --> 00:24:58,930
bus this would work for you I don't

731
00:24:57,770 --> 00:25:02,330
generally recommend it

732
00:24:58,930 --> 00:25:04,550
our final point here is the insecure

733
00:25:02,330 --> 00:25:06,350
security audit I'm always very

734
00:25:04,550 --> 00:25:08,149
suspicious of anything being given out

735
00:25:06,350 --> 00:25:11,360
with the word security in it that turns

736
00:25:08,150 --> 00:25:13,700
out to be insecure that seems to be this

737
00:25:11,360 --> 00:25:15,590
kind of false confidence thing that

738
00:25:13,700 --> 00:25:16,730
generally leads to people ignoring the

739
00:25:15,590 --> 00:25:18,350
thing with the word security in it

740
00:25:16,730 --> 00:25:21,290
because oh that must be secure we'll

741
00:25:18,350 --> 00:25:22,189
look at all the other things so this

742
00:25:21,290 --> 00:25:23,450
final challenge you're going to get a

743
00:25:22,190 --> 00:25:24,590
user access key so you're gonna have to

744
00:25:23,450 --> 00:25:26,840
make another leave account with this

745
00:25:24,590 --> 00:25:28,639
user access key and secret key and

746
00:25:26,840 --> 00:25:31,959
you've been told by the challenge that

747
00:25:28,640 --> 00:25:33,980
it has a policy called security audit

748
00:25:31,960 --> 00:25:35,720
security audit sounds very formal and

749
00:25:33,980 --> 00:25:37,960
very nice ah I can order some security

750
00:25:35,720 --> 00:25:41,360
with this policy that's really useful

751
00:25:37,960 --> 00:25:42,950
and this exploits very common thing in

752
00:25:41,360 --> 00:25:45,379
any BS which is the canned policy

753
00:25:42,950 --> 00:25:47,180
anyways have a lot of manage policies

754
00:25:45,380 --> 00:25:48,890
that they provide to do certain things

755
00:25:47,180 --> 00:25:49,820
that anywhere slightly happen access one

756
00:25:48,890 --> 00:25:53,000
which just grant you access to

757
00:25:49,820 --> 00:25:54,290
everything and you generally you if you

758
00:25:53,000 --> 00:25:56,000
give someone up in access you sort of

759
00:25:54,290 --> 00:25:57,200
know what you're getting into but if you

760
00:25:56,000 --> 00:25:58,970
give someone something called security

761
00:25:57,200 --> 00:26:01,070
order you'd expect are they can they can

762
00:25:58,970 --> 00:26:02,810
audit my account that it's secure but

763
00:26:01,070 --> 00:26:04,939
that stuff the end of it right that's

764
00:26:02,810 --> 00:26:06,169
not a hugely important account and

765
00:26:04,940 --> 00:26:07,280
there's a number of any best policies

766
00:26:06,170 --> 00:26:09,230
that have this kind of risk

767
00:26:07,280 --> 00:26:11,240
the most common thing they do is that

768
00:26:09,230 --> 00:26:12,650
they need s3 access at some point so

769
00:26:11,240 --> 00:26:14,600
they need to put some files in s3 to

770
00:26:12,650 --> 00:26:16,220
work properly and what they do to do

771
00:26:14,600 --> 00:26:19,399
that is they just grant full access to

772
00:26:16,220 --> 00:26:21,080
s3 and which is great for listing

773
00:26:19,400 --> 00:26:23,060
buckets and things but now if your story

774
00:26:21,080 --> 00:26:24,409
database backups in s3 that policy also

775
00:26:23,060 --> 00:26:26,720
allows anyone to download your bandwidth

776
00:26:24,410 --> 00:26:28,040
backups chances are even your security

777
00:26:26,720 --> 00:26:30,830
auditor probably doesn't want to be

778
00:26:28,040 --> 00:26:33,050
given access to your database backups or

779
00:26:30,830 --> 00:26:34,580
anything else that sense in s3 there any

780
00:26:33,050 --> 00:26:36,379
ones we have to get the things that they

781
00:26:34,580 --> 00:26:37,730
are auditing they're probably not Oddity

782
00:26:36,380 --> 00:26:40,520
in the content of all your files that

783
00:26:37,730 --> 00:26:43,220
you're storing there and overly

784
00:26:40,520 --> 00:26:45,860
permission are is policies are just very

785
00:26:43,220 --> 00:26:47,570
common another keyword is the session

786
00:26:45,860 --> 00:26:49,280
manager policy if you are using session

787
00:26:47,570 --> 00:26:50,990
manager at all if anyone knows that

788
00:26:49,280 --> 00:26:53,180
addressed is using that the default

789
00:26:50,990 --> 00:26:54,470
session manager policy is insecure and

790
00:26:53,180 --> 00:26:57,200
if you're using it on a role that role

791
00:26:54,470 --> 00:26:59,210
has way too much access to s3 go and

792
00:26:57,200 --> 00:27:00,350
find a better one comes up anywhere

793
00:26:59,210 --> 00:27:03,320
support they will give you a better

794
00:27:00,350 --> 00:27:05,750
policy for that so let's have a look

795
00:27:03,320 --> 00:27:07,490
specifically at security on it this is a

796
00:27:05,750 --> 00:27:10,370
cam policy which allows examination of

797
00:27:07,490 --> 00:27:12,560
resources in an account it allows

798
00:27:10,370 --> 00:27:14,719
viewing policy content and here's a key

799
00:27:12,560 --> 00:27:16,310
thing for privilege escalation if you

800
00:27:14,720 --> 00:27:17,900
get an account access key the next you

801
00:27:16,310 --> 00:27:20,179
need to do is know what your account has

802
00:27:17,900 --> 00:27:21,440
access to by default any risk doesn't

803
00:27:20,180 --> 00:27:23,390
tell you that and there's a reason for

804
00:27:21,440 --> 00:27:25,790
it because now if you start something

805
00:27:23,390 --> 00:27:27,320
from a list buckets and you can't that

806
00:27:25,790 --> 00:27:29,240
pops up in the logs of whoever owns the

807
00:27:27,320 --> 00:27:31,070
account hey someone's using this key

808
00:27:29,240 --> 00:27:33,020
list buckets but they're not being there

809
00:27:31,070 --> 00:27:34,250
being blocked and now you know that

810
00:27:33,020 --> 00:27:35,240
someone's obtained the key to your

811
00:27:34,250 --> 00:27:38,840
system that they're trying to use

812
00:27:35,240 --> 00:27:40,160
maliciously if the user can find out

813
00:27:38,840 --> 00:27:42,320
what policies are attached to their

814
00:27:40,160 --> 00:27:44,480
account they now know exactly what

815
00:27:42,320 --> 00:27:46,010
actions they can or can't before now

816
00:27:44,480 --> 00:27:47,780
that might mean that they can't form any

817
00:27:46,010 --> 00:27:49,520
decent actions but it also means they

818
00:27:47,780 --> 00:27:51,350
can now evade detection for anything

819
00:27:49,520 --> 00:27:53,780
else they do in future you now have no

820
00:27:51,350 --> 00:27:55,189
way to find out if that user is doing

821
00:27:53,780 --> 00:27:56,990
anything malicious so so you've granted

822
00:27:55,190 --> 00:27:58,610
one of your Regulus team members secure

823
00:27:56,990 --> 00:28:01,070
if you order along with a few of the

824
00:27:58,610 --> 00:28:03,050
permissions someone now gets into their

825
00:28:01,070 --> 00:28:04,520
account and use your security on it they

826
00:28:03,050 --> 00:28:07,430
can find out who they are what they can

827
00:28:04,520 --> 00:28:09,230
do that won't raise alarm bells and now

828
00:28:07,430 --> 00:28:11,030
any other permissions that user has are

829
00:28:09,230 --> 00:28:12,890
open to them and they can find out

830
00:28:11,030 --> 00:28:14,870
anything they can work on in your system

831
00:28:12,890 --> 00:28:16,160
so this is a classic routes of privilege

832
00:28:14,870 --> 00:28:17,510
escalation once you do someone's

833
00:28:16,160 --> 00:28:18,800
policies you probably know way more

834
00:28:17,510 --> 00:28:21,379
about our organization than you need to

835
00:28:18,800 --> 00:28:24,139
and you can work your way from there I'm

836
00:28:21,380 --> 00:28:25,880
also likely to refuse like users and

837
00:28:24,140 --> 00:28:27,050
obviously if you find a username you can

838
00:28:25,880 --> 00:28:28,970
then go and check a publicly available

839
00:28:27,050 --> 00:28:30,409
database of leaked passwords like

840
00:28:28,970 --> 00:28:32,750
username and maybe you get in that way

841
00:28:30,410 --> 00:28:34,910
and to actually exploit this on floors

842
00:28:32,750 --> 00:28:36,620
like cloud is really

843
00:28:34,910 --> 00:28:38,150
it takes lots of individual steps I need

844
00:28:36,620 --> 00:28:39,860
to onto my complex none of them really

845
00:28:38,150 --> 00:28:41,360
have anything to do with security and

846
00:28:39,860 --> 00:28:43,370
more to do with specific resources that

847
00:28:41,360 --> 00:28:44,719
exist in a dress so I encourage you

848
00:28:43,370 --> 00:28:46,969
really to go and try and do this

849
00:28:44,720 --> 00:28:48,830
yourself with what you've learned but if

850
00:28:46,970 --> 00:28:53,809
you do do it you'll get through to the

851
00:28:48,830 --> 00:28:55,520
end of floor stop clap and summary you

852
00:28:53,809 --> 00:28:56,870
want to roll credentials regularly this

853
00:28:55,520 --> 00:28:58,550
is a general practice that you should be

854
00:28:56,870 --> 00:29:00,199
applying everywhere ADF's credentials

855
00:28:58,550 --> 00:29:02,080
generally hold the keys to the kingdom

856
00:29:00,200 --> 00:29:05,510
for most companies running on any breast

857
00:29:02,080 --> 00:29:07,280
rather regularly rather than immediately

858
00:29:05,510 --> 00:29:09,740
if you suspect they're being compromised

859
00:29:07,280 --> 00:29:12,200
and check out Adrienne volts for secure

860
00:29:09,740 --> 00:29:14,510
credential storage apply at least

861
00:29:12,200 --> 00:29:17,690
privilege on I am and seize any user

862
00:29:14,510 --> 00:29:19,550
role group anyone that sax SNES find out

863
00:29:17,690 --> 00:29:21,350
what they need to do don't give them

864
00:29:19,550 --> 00:29:23,690
admin and then decide to restrict it

865
00:29:21,350 --> 00:29:24,949
later because later is too late you

866
00:29:23,690 --> 00:29:26,720
won't know what they're using you'll

867
00:29:24,950 --> 00:29:27,830
block them from servicing production

868
00:29:26,720 --> 00:29:29,870
website to stop working

869
00:29:27,830 --> 00:29:31,639
I have policies one at a time add

870
00:29:29,870 --> 00:29:32,840
provisions one at a time find out if the

871
00:29:31,640 --> 00:29:36,500
user can do what they need to do and

872
00:29:32,840 --> 00:29:38,510
then stop s3 has released a new public

873
00:29:36,500 --> 00:29:41,809
block public access feature in the last

874
00:29:38,510 --> 00:29:43,309
few months I would advise using those if

875
00:29:41,809 --> 00:29:45,260
you don't know book it needs to public

876
00:29:43,309 --> 00:29:46,910
click the big block public access what

877
00:29:45,260 --> 00:29:48,440
this does is override policies and

878
00:29:46,910 --> 00:29:51,080
access control lists on a bucket

879
00:29:48,440 --> 00:29:52,640
permanently but still understand what's

880
00:29:51,080 --> 00:29:54,080
under the hood because sometimes you

881
00:29:52,640 --> 00:29:55,670
might need a service a bucket to be

882
00:29:54,080 --> 00:29:56,990
public and these kind of nuclear

883
00:29:55,670 --> 00:29:59,600
solutions will break things for you

884
00:29:56,990 --> 00:30:02,300
finally if you're a pen tester checkbook

885
00:29:59,600 --> 00:30:03,709
it's fine creds and examine policies and

886
00:30:02,300 --> 00:30:05,510
hopefully you're going to get somewhere

887
00:30:03,710 --> 00:30:07,670
and get your report done or your

888
00:30:05,510 --> 00:30:10,309
bounties claimed thank you very much for

889
00:30:07,670 --> 00:30:11,870
listening I am NOT evil of questions

890
00:30:10,309 --> 00:30:13,010
because I've used all my time but I'm

891
00:30:11,870 --> 00:30:14,059
going to stand in the hall out there and

892
00:30:13,010 --> 00:30:14,990
I won't talk to me and I'll be at the

893
00:30:14,059 --> 00:30:18,530
after-party as well

894
00:30:14,990 --> 00:30:20,660
boom you can check out the slide which

895
00:30:18,530 --> 00:30:23,809
will be on this URL here as soon as I

896
00:30:20,660 --> 00:30:24,650
get outside tweet me if you like this if

897
00:30:23,809 --> 00:30:25,940
you didn't like this if you have

898
00:30:24,650 --> 00:30:29,360
complaints if I misled you with the

899
00:30:25,940 --> 00:30:30,920
title and check out oh gee lbs on slack

900
00:30:29,360 --> 00:30:34,370
it's a great group really great security

901
00:30:30,920 --> 00:30:36,320
channel as well in that so come and talk

902
00:30:34,370 --> 00:30:37,689
to people be nice ask questions and

903
00:30:36,320 --> 00:30:40,850
thanks again to scott piper for

904
00:30:37,690 --> 00:30:42,830
providing floral cloud and there is now

905
00:30:40,850 --> 00:30:44,240
floors - if i don't wants to go further

906
00:30:42,830 --> 00:30:45,659
with this hopefully i'll be doing a talk

907
00:30:44,240 --> 00:30:48,689
on that next year

908
00:30:45,660 --> 00:30:48,689
[Music]

909
00:30:52,830 --> 00:30:54,889
you

