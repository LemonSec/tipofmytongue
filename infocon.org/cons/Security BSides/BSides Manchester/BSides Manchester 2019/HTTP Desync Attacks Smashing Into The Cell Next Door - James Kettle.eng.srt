1
00:00:03,600 --> 00:00:09,549
good morning thanks for coming out so

2
00:00:06,910 --> 00:00:13,329
early I welcome to httpd simcha tax

3
00:00:09,549 --> 00:00:15,849
smashing into the cell next door have

4
00:00:13,329 --> 00:00:18,060
you ever seen a system that was so

5
00:00:15,849 --> 00:00:21,130
complex it just had to be vulnerable

6
00:00:18,060 --> 00:00:22,900
these days we will on layer upon layer

7
00:00:21,130 --> 00:00:24,910
of abstraction to have the faintest

8
00:00:22,900 --> 00:00:27,538
understanding of how a website really

9
00:00:24,910 --> 00:00:30,609
works a way to tell people things like

10
00:00:27,539 --> 00:00:32,730
HTTP is stateless and you send one

11
00:00:30,609 --> 00:00:35,800
request you get one of the spots but

12
00:00:32,729 --> 00:00:38,739
what if both of those with just kind of

13
00:00:35,800 --> 00:00:40,870
one in this session I'm going to share

14
00:00:38,739 --> 00:00:43,269
with you new tools and techniques to be

15
00:00:40,870 --> 00:00:44,980
syncronised complex systems smash

16
00:00:43,270 --> 00:00:47,770
through the barriers around HTTP

17
00:00:44,980 --> 00:00:51,459
requests and make websites rain exploits

18
00:00:47,770 --> 00:00:54,070
on their visitors during some research

19
00:00:51,460 --> 00:00:56,109
last year I came up with a theory which

20
00:00:54,070 --> 00:00:59,079
was if you're trying to select a topic

21
00:00:56,109 --> 00:01:01,690
to research then the best topic is the

22
00:00:59,079 --> 00:01:03,609
one that makes you the most nervous and

23
00:01:01,690 --> 00:01:05,679
this year I thought ok I'm gonna try

24
00:01:03,609 --> 00:01:08,500
this theory out so I asked myself what

25
00:01:05,680 --> 00:01:11,860
topic am I personally really scared of

26
00:01:08,500 --> 00:01:14,200
trying out and the answer was hate to

27
00:01:11,860 --> 00:01:17,140
pee requests like I saw a presentation

28
00:01:14,200 --> 00:01:19,990
on this called hiding wiki's in HTTP 3

29
00:01:17,140 --> 00:01:21,790
years ago at difficult and it was a

30
00:01:19,990 --> 00:01:24,640
thrilling presentation but it also left

31
00:01:21,790 --> 00:01:29,350
me kind of too nervous to tackle this

32
00:01:24,640 --> 00:01:31,600
topic myself one reason is that this

33
00:01:29,350 --> 00:01:34,119
technique was first documented way back

34
00:01:31,600 --> 00:01:36,899
in 2005 and yeah I never seen it

35
00:01:34,119 --> 00:01:39,009
successfully used on a real web site

36
00:01:36,899 --> 00:01:40,899
another is that my technical

37
00:01:39,009 --> 00:01:42,820
understanding just wasn't there so some

38
00:01:40,899 --> 00:01:46,180
of the diagrams made absolutely no sense

39
00:01:42,820 --> 00:01:47,679
to me and also there was some kind of

40
00:01:46,180 --> 00:01:51,130
worrying statements on some of the

41
00:01:47,680 --> 00:01:53,890
slides one of them said you'll not earn

42
00:01:51,130 --> 00:01:56,020
bounties using this technique and

43
00:01:53,890 --> 00:01:57,939
another said you will certainly not be

44
00:01:56,020 --> 00:02:00,369
considered like a white hat if you even

45
00:01:57,939 --> 00:02:02,500
try and find out if a live web site is

46
00:02:00,369 --> 00:02:03,390
vulnerable because this technique is so

47
00:02:02,500 --> 00:02:06,009
dangerous

48
00:02:03,390 --> 00:02:07,570
another time I thought okay I'm just

49
00:02:06,009 --> 00:02:09,370
gonna leave this well alone but this

50
00:02:07,570 --> 00:02:11,950
year to test my theory out I decided to

51
00:02:09,370 --> 00:02:17,290
try this and see what happened

52
00:02:11,950 --> 00:02:19,619
and well quite a few things out I did

53
00:02:17,290 --> 00:02:22,120
manage to earn some bounties and

54
00:02:19,620 --> 00:02:23,890
nobody's called me a black hat for it so

55
00:02:22,120 --> 00:02:29,110
far although one go on Twitter did call

56
00:02:23,890 --> 00:02:31,450
me a terrorist but I thought quite a few

57
00:02:29,110 --> 00:02:33,220
interesting reactions off people a few

58
00:02:31,450 --> 00:02:36,429
people were surprised one guy that I

59
00:02:33,220 --> 00:02:39,100
submitted a vulnerability to and was so

60
00:02:36,430 --> 00:02:41,830
amazed by this he concluded that I was

61
00:02:39,100 --> 00:02:44,250
faking the entire report in order to

62
00:02:41,830 --> 00:02:46,530
trick him into paying me a bounty and

63
00:02:44,250 --> 00:02:49,300
the other end of the spectrum and

64
00:02:46,530 --> 00:02:52,120
another guy likes the unique technique

65
00:02:49,300 --> 00:02:53,440
that I used on his website so much he

66
00:02:52,120 --> 00:02:55,540
thought he'd take that technique for

67
00:02:53,440 --> 00:02:57,370
himself and use it to make himself some

68
00:02:55,540 --> 00:03:00,640
bug bounty money in his spare time

69
00:02:57,370 --> 00:03:02,049
behind my back of course I had no idea

70
00:03:00,640 --> 00:03:05,200
it was doing this he didn't tell me

71
00:03:02,049 --> 00:03:06,730
until he ran into some technical

72
00:03:05,200 --> 00:03:07,810
problems with the technique because

73
00:03:06,730 --> 00:03:10,959
there's not the easiest thing in the

74
00:03:07,810 --> 00:03:13,120
world and decided that the best solution

75
00:03:10,959 --> 00:03:14,769
to these was to pretend to be someone

76
00:03:13,120 --> 00:03:17,560
else and then email me asking for help

77
00:03:14,769 --> 00:03:20,290
with it which didn't work out very well

78
00:03:17,560 --> 00:03:22,150
for him but out of all of this chaos

79
00:03:20,290 --> 00:03:24,160
I've been able to bring you safe

80
00:03:22,150 --> 00:03:25,810
detection methods that will let you find

81
00:03:24,160 --> 00:03:28,450
this vulnerability without being called

82
00:03:25,810 --> 00:03:30,250
a blackhat all new methods to trigger

83
00:03:28,450 --> 00:03:33,070
the synchronization and exploit the

84
00:03:30,250 --> 00:03:34,840
results and methodology and talling to

85
00:03:33,070 --> 00:03:39,040
bring clarity to a topic that's been

86
00:03:34,840 --> 00:03:40,600
overlooked for far too long so first I'm

87
00:03:39,040 --> 00:03:43,000
going to talk about what makes this

88
00:03:40,600 --> 00:03:44,590
attack possible how to assess if a given

89
00:03:43,000 --> 00:03:47,320
target is vulnerable one what to do next

90
00:03:44,590 --> 00:03:49,540
after that I'll take a look at how we

91
00:03:47,320 --> 00:03:51,940
can exploit it demonstrated using case

92
00:03:49,540 --> 00:03:54,130
studies on real websites starting out

93
00:03:51,940 --> 00:03:56,109
simple within building in complexity and

94
00:03:54,130 --> 00:03:58,269
ending with a live demo in which I'll

95
00:03:56,109 --> 00:04:00,459
also show how to use the free open

96
00:03:58,269 --> 00:04:02,769
source tool that I'm releasing as part

97
00:04:00,459 --> 00:04:05,260
of this research for that I'll talk

98
00:04:02,769 --> 00:04:09,060
about defense a bit and then wrap up and

99
00:04:05,260 --> 00:04:09,060
on some questions at the back

100
00:04:09,319 --> 00:04:15,170
so if you picture a website as an end

101
00:04:12,709 --> 00:04:17,570
user it probably looks something like

102
00:04:15,170 --> 00:04:20,149
this because as an end user that's all

103
00:04:17,570 --> 00:04:22,430
that we can directly see but behind the

104
00:04:20,149 --> 00:04:24,440
scenes most modern websites are routing

105
00:04:22,430 --> 00:04:27,320
requests through a chain of web servers

106
00:04:24,440 --> 00:04:29,330
speaking to each other over HTTP over a

107
00:04:27,320 --> 00:04:33,199
stream based transport layer protocol

108
00:04:29,330 --> 00:04:35,840
like TCP or TLS and for the sake of

109
00:04:33,199 --> 00:04:38,690
performance these streams are heavily

110
00:04:35,840 --> 00:04:41,270
reused following the HTTP 1.1 to keep

111
00:04:38,690 --> 00:04:43,940
like protocol which simply means the

112
00:04:41,270 --> 00:04:46,280
HTTP requests are placed back-to-back on

113
00:04:43,940 --> 00:04:48,860
the street with no delimiters in between

114
00:04:46,280 --> 00:04:51,138
them and every server in the chain is

115
00:04:48,860 --> 00:04:52,820
expected to pause the hasty headers to

116
00:04:51,139 --> 00:04:56,990
work out where each message stops and

117
00:04:52,820 --> 00:04:59,090
the next one starts so we have requests

118
00:04:56,990 --> 00:05:00,919
from users all around the world being

119
00:04:59,090 --> 00:05:03,380
funneled through these tiny pools of

120
00:05:00,919 --> 00:05:06,169
back-end streams to the application

121
00:05:03,380 --> 00:05:07,729
server sitting in the back it's pretty

122
00:05:06,169 --> 00:05:08,240
obvious what's going to go wrong here

123
00:05:07,729 --> 00:05:11,210
right

124
00:05:08,240 --> 00:05:13,550
what happens if as an attacker we send

125
00:05:11,210 --> 00:05:15,500
an ambiguous message one that gets

126
00:05:13,550 --> 00:05:17,120
paused differently by the front end of

127
00:05:15,500 --> 00:05:18,259
the back end leading to the front end in

128
00:05:17,120 --> 00:05:22,310
the back end thinking that this message

129
00:05:18,259 --> 00:05:24,919
is a different length take this blob of

130
00:05:22,310 --> 00:05:26,930
blue knowledge data here the front-end

131
00:05:24,919 --> 00:05:28,909
views this is one request so it's

132
00:05:26,930 --> 00:05:30,590
pulling the whole thing immediately onto

133
00:05:28,909 --> 00:05:32,630
the back end but when the backend

134
00:05:30,590 --> 00:05:35,119
reassembles it and pauses those headers

135
00:05:32,630 --> 00:05:37,880
for some reason if thinks this message

136
00:05:35,120 --> 00:05:40,849
is shorter and it thinks it ends with a

137
00:05:37,880 --> 00:05:43,780
final blue square so a things to orange

138
00:05:40,849 --> 00:05:46,669
square is the start of the next message

139
00:05:43,780 --> 00:05:48,979
and it's gonna wait for that phantom

140
00:05:46,669 --> 00:05:51,049
second message to be completed until

141
00:05:48,979 --> 00:05:53,240
someone else sends a request to that

142
00:05:51,050 --> 00:05:56,330
website at which point there's will get

143
00:05:53,240 --> 00:05:59,930
concatenated onto the end of it and that

144
00:05:56,330 --> 00:06:01,400
is the essence of a request smuggling we

145
00:05:59,930 --> 00:06:04,550
can effectively apply an are between

146
00:06:01,400 --> 00:06:08,630
prefix to the second request to hit the

147
00:06:04,550 --> 00:06:10,009
server now because we can't directly see

148
00:06:08,630 --> 00:06:11,930
what's happening behind the front end

149
00:06:10,009 --> 00:06:14,000
it's quite easy to get bogged down in

150
00:06:11,930 --> 00:06:15,440
the technical details here I certainly

151
00:06:14,000 --> 00:06:17,630
did myself but throughout the

152
00:06:15,440 --> 00:06:20,140
presentation please remember it's really

153
00:06:17,630 --> 00:06:23,120
just that simple

154
00:06:20,140 --> 00:06:27,800
now let's zoom in and see what the data

155
00:06:23,120 --> 00:06:29,780
looks like on the wire so this attack is

156
00:06:27,800 --> 00:06:32,000
ambiguous because we're using an

157
00:06:29,780 --> 00:06:33,770
absolutely classic D synchronization

158
00:06:32,000 --> 00:06:35,780
technique which is that we've simply

159
00:06:33,770 --> 00:06:38,479
specified the content let's header twice

160
00:06:35,780 --> 00:06:40,159
so in this example the front end server

161
00:06:38,480 --> 00:06:42,710
just looked at the first content antenna

162
00:06:40,160 --> 00:06:44,690
it's so it's forwarded all the blue data

163
00:06:42,710 --> 00:06:46,549
and the whole energy onto the back end

164
00:06:44,690 --> 00:06:48,469
the back end has looked at the second

165
00:06:46,550 --> 00:06:50,840
content length header it's only red in

166
00:06:48,470 --> 00:06:53,090
the blue data if things the G is the

167
00:06:50,840 --> 00:06:56,270
start of the next message so when an

168
00:06:53,090 --> 00:06:58,130
actual second message turns up however

169
00:06:56,270 --> 00:07:00,710
that user is it's going to get on a

170
00:06:58,130 --> 00:07:03,110
response saying something like unload

171
00:07:00,710 --> 00:07:04,820
method G post that's it we've

172
00:07:03,110 --> 00:07:08,120
successfully done a request smuggling

173
00:07:04,820 --> 00:07:10,790
attack the only catch is this technique

174
00:07:08,120 --> 00:07:12,410
is so classic that it doesn't really

175
00:07:10,790 --> 00:07:15,500
work on anything that's actually worth

176
00:07:12,410 --> 00:07:18,110
hacking these days what does work on

177
00:07:15,500 --> 00:07:20,930
plenty of interesting systems is using

178
00:07:18,110 --> 00:07:23,450
chunked encoding chunked encoding is an

179
00:07:20,930 --> 00:07:25,340
alternative to using content length

180
00:07:23,450 --> 00:07:27,920
whereby instead of specifying the length

181
00:07:25,340 --> 00:07:29,900
of the message upfront the server that

182
00:07:27,920 --> 00:07:32,000
receives it is expected to parse the

183
00:07:29,900 --> 00:07:35,150
body of the message until it reaches a

184
00:07:32,000 --> 00:07:37,010
zero followed by an empty line so this

185
00:07:35,150 --> 00:07:39,979
is pretty much exactly the same as the

186
00:07:37,010 --> 00:07:41,210
previous technique the front end here is

187
00:07:39,980 --> 00:07:42,980
looking at the content length and

188
00:07:41,210 --> 00:07:45,260
forwarding the blue and orange data and

189
00:07:42,980 --> 00:07:45,710
the back end is thinks this message is

190
00:07:45,260 --> 00:07:47,300
chunked

191
00:07:45,710 --> 00:07:48,830
it's reading in the blue data and when

192
00:07:47,300 --> 00:07:51,470
it sees the zero followed by a new line

193
00:07:48,830 --> 00:07:53,359
it stops pausing that message and it

194
00:07:51,470 --> 00:07:55,610
once again the victim gets a message

195
00:07:53,360 --> 00:07:59,810
saying something like unknown method G

196
00:07:55,610 --> 00:08:01,730
post now the key difference with this

197
00:07:59,810 --> 00:08:05,870
technique is that it actually works on

198
00:08:01,730 --> 00:08:07,490
plenty of real systems but what if the D

199
00:08:05,870 --> 00:08:09,470
synchronization happens the other way

200
00:08:07,490 --> 00:08:10,880
around what if it's the front end there

201
00:08:09,470 --> 00:08:12,350
looks at the transfer encoding header

202
00:08:10,880 --> 00:08:14,780
and the back end that looks at the

203
00:08:12,350 --> 00:08:17,450
content well we can still exploit that

204
00:08:14,780 --> 00:08:18,679
we just have to reformat requests

205
00:08:17,450 --> 00:08:20,900
slightly and we have this minor

206
00:08:18,680 --> 00:08:23,300
limitation which is that the malicious

207
00:08:20,900 --> 00:08:25,580
prefix which is shown in orange has to

208
00:08:23,300 --> 00:08:27,620
end with a zero followed by a a blank

209
00:08:25,580 --> 00:08:29,719
line but in general that's not going to

210
00:08:27,620 --> 00:08:32,270
cause us any problems

211
00:08:29,720 --> 00:08:35,240
now if you're looking at the content

212
00:08:32,270 --> 00:08:36,710
length in the request you might be

213
00:08:35,240 --> 00:08:39,710
wondering why it's three when there's

214
00:08:36,710 --> 00:08:42,080
only one of this byte of data in real

215
00:08:39,710 --> 00:08:43,400
quest that's because every line in

216
00:08:42,080 --> 00:08:45,890
pretty much every message here and

217
00:08:43,400 --> 00:08:47,720
Twitter such are slashing that's just

218
00:08:45,890 --> 00:08:49,550
the normal line living and it's not

219
00:08:47,720 --> 00:08:55,220
showing on slides to keep them amazingly

220
00:08:49,550 --> 00:08:58,219
clear so why does that chunk technique

221
00:08:55,220 --> 00:08:59,810
work on so many systems well I think

222
00:08:58,220 --> 00:09:05,270
we've got to give some credit to the

223
00:08:59,810 --> 00:09:07,130
specification RFC 261 6 says you should

224
00:09:05,270 --> 00:09:09,439
if you get a message that uses transfer

225
00:09:07,130 --> 00:09:11,510
encoding chunked and the continent you

226
00:09:09,440 --> 00:09:14,180
should give priority to the chunked

227
00:09:11,510 --> 00:09:16,790
header and that kind of is taken to

228
00:09:14,180 --> 00:09:18,589
implicitly say these messages are

229
00:09:16,790 --> 00:09:20,750
acceptable and you shouldn't just be

230
00:09:18,590 --> 00:09:23,420
rejecting them outlined with the bad

231
00:09:20,750 --> 00:09:26,090
with a bad request message or something

232
00:09:23,420 --> 00:09:28,849
like that and so all you need in the

233
00:09:26,090 --> 00:09:30,800
chain of web servers is one server that

234
00:09:28,850 --> 00:09:32,780
doesn't support chocolate encoding and

235
00:09:30,800 --> 00:09:35,030
that will fall back to using the content

236
00:09:32,780 --> 00:09:37,220
length and you'll be able to desync

237
00:09:35,030 --> 00:09:39,079
revise them so that take me by yourself

238
00:09:37,220 --> 00:09:40,760
let's do D synchronize and do proof

239
00:09:39,080 --> 00:09:43,550
requests smugly mom tons of systems

240
00:09:40,760 --> 00:09:45,830
including at the time I felt that pretty

241
00:09:43,550 --> 00:09:48,199
much every single website using the

242
00:09:45,830 --> 00:09:52,280
content delivery network I can buy back

243
00:09:48,200 --> 00:09:54,830
and I have no patch this last week so it

244
00:09:52,280 --> 00:09:56,270
in now it doesn't work on all I can buy

245
00:09:54,830 --> 00:09:59,510
systems but it does still work on some

246
00:09:56,270 --> 00:10:02,240
of them now what if you want a decent

247
00:09:59,510 --> 00:10:04,010
revised a website and all the servers

248
00:10:02,240 --> 00:10:06,500
and the chain do support Charlotte

249
00:10:04,010 --> 00:10:07,760
encoding well the chances are you still

250
00:10:06,500 --> 00:10:10,250
can but you're just gonna have to work

251
00:10:07,760 --> 00:10:12,470
slightly harder what you need to do is

252
00:10:10,250 --> 00:10:14,870
find a way to hide the transfer encoding

253
00:10:12,470 --> 00:10:17,570
chunked header from one server in the

254
00:10:14,870 --> 00:10:20,089
chain and there's tons of ways of doing

255
00:10:17,570 --> 00:10:23,089
that for example some servers trim

256
00:10:20,089 --> 00:10:25,010
trailing whitespace in in head amazed

257
00:10:23,089 --> 00:10:26,360
whereas others though so some will think

258
00:10:25,010 --> 00:10:28,370
a message with that head of is chunked

259
00:10:26,360 --> 00:10:31,250
and others will think it's not chunked

260
00:10:28,370 --> 00:10:34,130
and fall back to using the content other

261
00:10:31,250 --> 00:10:35,750
systems simply grip the transfer

262
00:10:34,130 --> 00:10:37,550
encoding header for the word child

263
00:10:35,750 --> 00:10:39,560
rather than tokenizing year so they will

264
00:10:37,550 --> 00:10:40,819
think that that message is chance and

265
00:10:39,560 --> 00:10:42,949
others won't

266
00:10:40,820 --> 00:10:46,040
and there's loads of techniques that you

267
00:10:42,950 --> 00:10:48,290
can use to D synchronize systems this is

268
00:10:46,040 --> 00:10:50,270
just a tiny sampling of them but every

269
00:10:48,290 --> 00:10:51,980
technique shown on this slide is one

270
00:10:50,270 --> 00:10:54,980
that I've successfully used on a real

271
00:10:51,980 --> 00:10:57,170
system during this research and the ones

272
00:10:54,980 --> 00:10:59,210
highlighted in orange are those that I

273
00:10:57,170 --> 00:11:05,839
came up with myself that I don't think

274
00:10:59,210 --> 00:11:07,970
have been documented anywhere else so at

275
00:11:05,840 --> 00:11:09,680
this point we understand the

276
00:11:07,970 --> 00:11:11,450
fundamentals of how to decent kunai

277
00:11:09,680 --> 00:11:14,060
service and that is a really powerful

278
00:11:11,450 --> 00:11:16,010
building block but if we just try and

279
00:11:14,060 --> 00:11:18,170
whack a server with this building block

280
00:11:16,010 --> 00:11:19,880
I can tell you with confidence that you

281
00:11:18,170 --> 00:11:22,880
wanted to hazards and complications and

282
00:11:19,880 --> 00:11:25,310
end up wasting loads of time so to avoid

283
00:11:22,880 --> 00:11:27,590
that I've developed this methodology to

284
00:11:25,310 --> 00:11:31,339
guide us in a controlled manner step by

285
00:11:27,590 --> 00:11:33,110
step towards a successful exploit first

286
00:11:31,340 --> 00:11:35,930
off we need to detect Wendy

287
00:11:33,110 --> 00:11:37,580
synchronization is possible the obvious

288
00:11:35,930 --> 00:11:40,219
approach to doing this is to send the

289
00:11:37,580 --> 00:11:42,080
payload designed to poison the backend

290
00:11:40,220 --> 00:11:44,060
system right with the malicious prefix

291
00:11:42,080 --> 00:11:46,520
as shown in orange earlier and then send

292
00:11:44,060 --> 00:11:48,560
a second request and see if the response

293
00:11:46,520 --> 00:11:51,800
to that message looks like it's been

294
00:11:48,560 --> 00:11:54,319
poisoned but there's a massive flaw with

295
00:11:51,800 --> 00:11:56,569
this technique which is that if anyone

296
00:11:54,320 --> 00:11:58,010
else's request hits the server in in

297
00:11:56,570 --> 00:12:00,140
between your two they will get the

298
00:11:58,010 --> 00:12:02,030
poison response they'll have a bad day

299
00:12:00,140 --> 00:12:05,540
and you will find the vulnerability

300
00:12:02,030 --> 00:12:07,660
you'll get a false negative so we need a

301
00:12:05,540 --> 00:12:10,880
better way that's actually reliable and

302
00:12:07,660 --> 00:12:14,240
after quite a lot of effort I've got one

303
00:12:10,880 --> 00:12:16,250
here so how will this how this request

304
00:12:14,240 --> 00:12:17,690
gets process depends heavily on the

305
00:12:16,250 --> 00:12:20,510
configuration or the phone end in the

306
00:12:17,690 --> 00:12:22,190
back end if the funnin in the back end

307
00:12:20,510 --> 00:12:23,990
both look at the content length the

308
00:12:22,190 --> 00:12:25,430
whole thing will get afforded on to the

309
00:12:23,990 --> 00:12:26,810
back end and responded to immediately

310
00:12:25,430 --> 00:12:29,420
everything's fine

311
00:12:26,810 --> 00:12:31,729
if the front end looks at the transfer

312
00:12:29,420 --> 00:12:33,140
encoding chunked header then here we'll

313
00:12:31,730 --> 00:12:35,990
pause the first chunk size which is

314
00:12:33,140 --> 00:12:37,310
three it will be in the ABC and then it

315
00:12:35,990 --> 00:12:39,680
will try to cause the next chunk size

316
00:12:37,310 --> 00:12:41,780
which is Q and the chunk slice is meant

317
00:12:39,680 --> 00:12:43,520
to be hexadecimal so that Q is not valid

318
00:12:41,780 --> 00:12:45,949
and this message will just get rejected

319
00:12:43,520 --> 00:12:47,019
immediately by the front end and it will

320
00:12:45,950 --> 00:12:50,319
never even reach

321
00:12:47,019 --> 00:12:52,449
back in server but if the front-end

322
00:12:50,319 --> 00:12:54,099
server looks at the content length it

323
00:12:52,449 --> 00:12:56,019
will forward the blue data but north

324
00:12:54,100 --> 00:12:58,240
average queue and that means that if the

325
00:12:56,019 --> 00:13:00,999
backend receives that and treat this

326
00:12:58,240 --> 00:13:04,149
message is being chomped it will timeout

327
00:13:00,999 --> 00:13:07,149
while waiting for the best of the best

328
00:13:04,149 --> 00:13:09,459
for the next chunk size to turn up so if

329
00:13:07,149 --> 00:13:11,439
you send this request and you get a

330
00:13:09,459 --> 00:13:13,388
chomp and you get a timeout that's a

331
00:13:11,439 --> 00:13:15,839
strong indication that this server is

332
00:13:13,389 --> 00:13:18,450
probably volleyball 2d synchronization

333
00:13:15,839 --> 00:13:22,499
I'm just going to move this mics like

334
00:13:18,450 --> 00:13:22,499
[Music]

335
00:13:22,649 --> 00:13:26,050
what hopefully that's gonna be less

336
00:13:24,999 --> 00:13:28,089
noisy

337
00:13:26,050 --> 00:13:33,008
can they office can everyone still hear

338
00:13:28,089 --> 00:13:34,779
me come right so yeah what if the server

339
00:13:33,009 --> 00:13:38,079
is vulnerable the other way around well

340
00:13:34,779 --> 00:13:40,499
we can still detect that using a similar

341
00:13:38,079 --> 00:13:42,609
technique but there is a minor catch

342
00:13:40,499 --> 00:13:44,499
which is that if the server is

343
00:13:42,610 --> 00:13:46,179
vulnerable the first way round then we

344
00:13:44,499 --> 00:13:48,220
end up accidentally poisoning it's a

345
00:13:46,179 --> 00:13:49,540
back-end socket with this X and we're

346
00:13:48,220 --> 00:13:52,509
potentially going to screw up some real

347
00:13:49,540 --> 00:13:54,189
user as browsers on the site so with

348
00:13:52,509 --> 00:13:56,980
this strategy it's important to always

349
00:13:54,189 --> 00:13:58,899
try the technique on the Left first to

350
00:13:56,980 --> 00:14:01,089
make sure that you don't do any harm but

351
00:13:58,899 --> 00:14:03,610
as long as you stick to that trying out

352
00:14:01,089 --> 00:14:06,040
these techniques on live websites it's

353
00:14:03,610 --> 00:14:07,360
more or less completely safe and should

354
00:14:06,040 --> 00:14:11,980
definitely if they really have no

355
00:14:07,360 --> 00:14:13,959
repercussions or no users now this

356
00:14:11,980 --> 00:14:16,660
technique should be tried on every

357
00:14:13,959 --> 00:14:19,300
single URL other on the target website

358
00:14:16,660 --> 00:14:20,769
because websites often requests two

359
00:14:19,300 --> 00:14:22,990
different URLs two different back-end

360
00:14:20,769 --> 00:14:27,429
servers and you can't always visibly

361
00:14:22,990 --> 00:14:28,629
tell when that's happening and to help

362
00:14:27,429 --> 00:14:30,759
you out without obviously that will be

363
00:14:28,629 --> 00:14:32,410
pretty tedious I have released an

364
00:14:30,759 --> 00:14:34,120
open-source tool which is a burp suite

365
00:14:32,410 --> 00:14:36,639
extension which works with a free

366
00:14:34,120 --> 00:14:38,709
version proper and more animal or

367
00:14:36,639 --> 00:14:41,350
automatically try out that technique for

368
00:14:38,709 --> 00:14:43,029
you and it won't heal which route with

369
00:14:41,350 --> 00:14:45,249
all the try it out with all the

370
00:14:43,029 --> 00:14:47,470
different decent ization techniques I

371
00:14:45,249 --> 00:14:52,779
showed you on the previous slide as

372
00:14:47,470 --> 00:14:55,269
hosting later now because this technique

373
00:14:52,779 --> 00:14:57,040
is reliant on a kind of inference to

374
00:14:55,269 --> 00:14:59,720
find their vulnerability it does get a

375
00:14:57,040 --> 00:15:01,579
small number of false positives

376
00:14:59,720 --> 00:15:03,440
but it doesn't get many and the real

377
00:15:01,580 --> 00:15:06,500
strength is that you'll get vastly less

378
00:15:03,440 --> 00:15:09,320
false negatives for example on one

379
00:15:06,500 --> 00:15:11,390
particular target so I found this

380
00:15:09,320 --> 00:15:13,220
technique found the vulnerability every

381
00:15:11,390 --> 00:15:16,370
single time where's with the classic

382
00:15:13,220 --> 00:15:20,180
technique where you send to two requests

383
00:15:16,370 --> 00:15:22,910
I had 800 failed attempts before it

384
00:15:20,180 --> 00:15:27,800
works and that's probably 800 real users

385
00:15:22,910 --> 00:15:29,449
that got junk responses so in an ideal

386
00:15:27,800 --> 00:15:31,579
world it you can probably stop there and

387
00:15:29,450 --> 00:15:33,080
report that but in reality most clients

388
00:15:31,580 --> 00:15:35,210
probably heard take that before

389
00:15:33,080 --> 00:15:37,760
seriously they'll want more evidence for

390
00:15:35,210 --> 00:15:39,050
their server it's really on the boss so

391
00:15:37,760 --> 00:15:41,689
now we're gonna have to switch back to

392
00:15:39,050 --> 00:15:44,930
using this this technique where you send

393
00:15:41,690 --> 00:15:47,600
a pair a pair of requests so the first

394
00:15:44,930 --> 00:15:50,030
one should try poison the back end

395
00:15:47,600 --> 00:15:52,880
socket so that the subsequent so the

396
00:15:50,030 --> 00:15:56,420
second request shown ingly should get a

397
00:15:52,880 --> 00:15:58,910
different response code if the system is

398
00:15:56,420 --> 00:16:01,099
really fun please remember you'll need

399
00:15:58,910 --> 00:16:02,930
to try this multiple times if the

400
00:16:01,100 --> 00:16:05,780
website is getting traffic from me if

401
00:16:02,930 --> 00:16:07,760
some anybody else even if it isn't many

402
00:16:05,780 --> 00:16:09,920
websites don't use a pool of connections

403
00:16:07,760 --> 00:16:11,360
to the backend so you're spilt the soap

404
00:16:09,920 --> 00:16:14,449
so you're still you need to try it

405
00:16:11,360 --> 00:16:18,200
multiple times and yes sometimes you all

406
00:16:14,450 --> 00:16:20,660
need to try it a hundred times now it's

407
00:16:18,200 --> 00:16:23,180
really important the the blue and orange

408
00:16:20,660 --> 00:16:25,550
attack and the green follow-up and not

409
00:16:23,180 --> 00:16:27,469
send over the same connection because if

410
00:16:25,550 --> 00:16:29,839
you do that you'll get false positives

411
00:16:27,470 --> 00:16:32,300
and the other key thing is that the end

412
00:16:29,840 --> 00:16:35,600
point that you sent the blue and orange

413
00:16:32,300 --> 00:16:38,750
requests to is really important because

414
00:16:35,600 --> 00:16:40,760
if the backend server doesn't light your

415
00:16:38,750 --> 00:16:44,540
message maybe because it's not expecting

416
00:16:40,760 --> 00:16:46,910
to get a post request then it may reject

417
00:16:44,540 --> 00:16:49,189
it and when it rejects it it will

418
00:16:46,910 --> 00:16:50,810
typically close the connection which

419
00:16:49,190 --> 00:16:52,940
will lead to the homage data being flown

420
00:16:50,810 --> 00:16:56,060
out and the attack failing so you

421
00:16:52,940 --> 00:16:59,060
ideally want to target ie to target an

422
00:16:56,060 --> 00:17:00,920
end point the expects to get a post

423
00:16:59,060 --> 00:17:02,839
request and try and preserve any see

424
00:17:00,920 --> 00:17:08,510
surf tokens and such like that it might

425
00:17:02,839 --> 00:17:10,220
be expecting as well ok now we're

426
00:17:08,510 --> 00:17:13,119
finally done with a theory we can take a

427
00:17:10,220 --> 00:17:16,000
look our damage we can do with this

428
00:17:13,119 --> 00:17:17,500
so every every case study that I'm

429
00:17:16,000 --> 00:17:19,780
looking at here are going to look at now

430
00:17:17,500 --> 00:17:22,180
there's a real system that I exploited

431
00:17:19,780 --> 00:17:23,619
during this research they all have bug

432
00:17:22,180 --> 00:17:26,170
bounty programs please don't exploit

433
00:17:23,619 --> 00:17:28,169
magnet websites I've been forced to

434
00:17:26,170 --> 00:17:30,250
adapt quite a few company names

435
00:17:28,170 --> 00:17:31,780
unfortunately but I'd like to give a

436
00:17:30,250 --> 00:17:34,570
shout out to every company that actually

437
00:17:31,780 --> 00:17:36,280
let me name them please remember these

438
00:17:34,570 --> 00:17:39,639
are the guys that are actually securing

439
00:17:36,280 --> 00:17:41,800
up during this section I'm also going to

440
00:17:39,640 --> 00:17:43,870
keep a running total of the bounties

441
00:17:41,800 --> 00:17:47,230
earth during this research of these

442
00:17:43,870 --> 00:17:49,389
bounties as usual we spend 15% on beer

443
00:17:47,230 --> 00:17:53,140
as a company I donate the other 50% to

444
00:17:49,390 --> 00:17:55,470
local charities right it'll be the

445
00:17:53,140 --> 00:17:57,790
easiest attack that you can do with

446
00:17:55,470 --> 00:17:59,740
requests smuggling is bypassing security

447
00:17:57,790 --> 00:18:03,010
rules that have been implemented on the

448
00:17:59,740 --> 00:18:04,900
front end system from sample 1 1 will no

449
00:18:03,010 --> 00:18:07,150
software vendor though I sadly can me

450
00:18:04,900 --> 00:18:09,880
they had their fun any to set up to

451
00:18:07,150 --> 00:18:12,640
block access to the euro / admin but by

452
00:18:09,880 --> 00:18:14,980
using the quest smuggling you can hide

453
00:18:12,640 --> 00:18:17,530
that euro from the front end system so

454
00:18:14,980 --> 00:18:19,120
when all I said ii sequester the server

455
00:18:17,530 --> 00:18:21,100
so that the back end thinks i'm

456
00:18:19,120 --> 00:18:23,919
accessing the route the server but i

457
00:18:21,100 --> 00:18:29,320
actually get access to the admin page so

458
00:18:23,920 --> 00:18:31,570
far so easy now lots of front ends like

459
00:18:29,320 --> 00:18:34,060
to rewrite requests by adding headers

460
00:18:31,570 --> 00:18:35,800
into them and one head over practically

461
00:18:34,060 --> 00:18:38,679
every single website users some

462
00:18:35,800 --> 00:18:41,590
variation off is exported for which just

463
00:18:38,680 --> 00:18:44,410
specifies the remote users IP on a well

464
00:18:41,590 --> 00:18:46,480
configured system if you specify that i

465
00:18:44,410 --> 00:18:50,050
paint yourself directly and a normal

466
00:18:46,480 --> 00:18:52,480
request the front end will rewrite that

467
00:18:50,050 --> 00:18:55,450
header or remove entirely so you can't

468
00:18:52,480 --> 00:18:57,790
just use it to spoof your IP but using

469
00:18:55,450 --> 00:18:59,080
request smuggling we can bypass that

470
00:18:57,790 --> 00:19:01,600
mean writing because the front end

471
00:18:59,080 --> 00:19:04,480
doesn't see it as being part as being a

472
00:19:01,600 --> 00:19:06,580
header and thereby spoof our IP are

473
00:19:04,480 --> 00:19:10,720
using that technique just for itself i

474
00:19:06,580 --> 00:19:12,189
got an incredible $300 bounty so i'm not

475
00:19:10,720 --> 00:19:14,020
suggesting you're gonna get rich quick

476
00:19:12,190 --> 00:19:15,490
using this particular this strategy but

477
00:19:14,020 --> 00:19:18,240
it is worth knowing because it does work

478
00:19:15,490 --> 00:19:22,480
on pretty much every single target and

479
00:19:18,240 --> 00:19:25,450
it also has a slightly less obvious use

480
00:19:22,480 --> 00:19:27,160
which is imagine you have a target where

481
00:19:25,450 --> 00:19:29,440
for this where the timing based

482
00:19:27,160 --> 00:19:31,480
technique suggests it's vulnerable but

483
00:19:29,440 --> 00:19:33,310
this target gets loads of traffic so

484
00:19:31,480 --> 00:19:35,260
you've effectively got zero chance of

485
00:19:33,310 --> 00:19:38,020
getting half a poison for sponsor

486
00:19:35,260 --> 00:19:39,610
yourself how do you prove that's really

487
00:19:38,020 --> 00:19:41,950
vulnerable you basically got a blind

488
00:19:39,610 --> 00:19:44,469
request smuggling vulnerability there

489
00:19:41,950 --> 00:19:47,590
well one thing you can do is send a

490
00:19:44,470 --> 00:19:50,170
request something like this but specify

491
00:19:47,590 --> 00:19:53,530
a unique hostname in the exported for

492
00:19:50,170 --> 00:19:57,340
heather if you get a DNS lookup for that

493
00:19:53,530 --> 00:19:59,950
first header for the exporter for know

494
00:19:57,340 --> 00:20:01,510
then that proofs for that server is that

495
00:19:59,950 --> 00:20:03,280
the back end is pausing that as a

496
00:20:01,510 --> 00:20:05,379
separate message of their bite first so

497
00:20:03,280 --> 00:20:11,530
that target is really vulnerable to

498
00:20:05,380 --> 00:20:14,890
request smuggling okay now

499
00:20:11,530 --> 00:20:16,600
IP spoofing is okay but a bit boy but

500
00:20:14,890 --> 00:20:18,760
really interesting behavior there's

501
00:20:16,600 --> 00:20:21,070
going to come from application specific

502
00:20:18,760 --> 00:20:22,390
edits but how can you exploit an

503
00:20:21,070 --> 00:20:24,970
application if you don't know what the

504
00:20:22,390 --> 00:20:26,890
value of these headers well on most

505
00:20:24,970 --> 00:20:30,280
sites you can basically ask the

506
00:20:26,890 --> 00:20:32,710
application so here I'm targeting new

507
00:20:30,280 --> 00:20:36,129
New Relic you make analytical software

508
00:20:32,710 --> 00:20:37,750
stuff and I've smuggled a login request

509
00:20:36,130 --> 00:20:39,580
and I've made sure that the email

510
00:20:37,750 --> 00:20:42,340
address that I'm trying to login with is

511
00:20:39,580 --> 00:20:44,770
the last parameter so that means when I

512
00:20:42,340 --> 00:20:46,929
send the next request that effect if it

513
00:20:44,770 --> 00:20:49,290
gets concatenated on to the email

514
00:20:46,930 --> 00:20:51,580
address that I'm trying to log in with

515
00:20:49,290 --> 00:20:53,920
and then the server comes back and says

516
00:20:51,580 --> 00:20:56,050
that's not a valid email address in and

517
00:20:53,920 --> 00:20:58,300
it reflects the email address I've

518
00:20:56,050 --> 00:21:01,360
supplied and that includes the whole of

519
00:20:58,300 --> 00:21:03,879
them as of the second request after it

520
00:21:01,360 --> 00:21:06,699
yet being written by the front end

521
00:21:03,880 --> 00:21:08,140
system so that effectively leaks all the

522
00:21:06,700 --> 00:21:11,020
head is that the front end system is

523
00:21:08,140 --> 00:21:12,340
putting on to the request and some of

524
00:21:11,020 --> 00:21:16,840
those headers are going to come in

525
00:21:12,340 --> 00:21:19,570
useful surely so on the new la the back

526
00:21:16,840 --> 00:21:20,830
end system was actually a reverse proxy

527
00:21:19,570 --> 00:21:22,870
server ID changing the host header I

528
00:21:20,830 --> 00:21:25,030
could get access to different internal

529
00:21:22,870 --> 00:21:26,649
systems but initially they all just came

530
00:21:25,030 --> 00:21:28,870
back with this booming redirected to

531
00:21:26,650 --> 00:21:31,630
HTTPS but by looking at the previous

532
00:21:28,870 --> 00:21:33,399
slide we can see that they using the

533
00:21:31,630 --> 00:21:35,620
exported proto header and by

534
00:21:33,400 --> 00:21:37,450
sticking now on this moment as the quest

535
00:21:35,620 --> 00:21:39,939
I can tell the server yeah I'm using

536
00:21:37,450 --> 00:21:41,710
HTTP you can trust this and then we can

537
00:21:39,940 --> 00:21:45,120
actually access whatever that internal

538
00:21:41,710 --> 00:21:47,800
silence so I went hunting for some

539
00:21:45,120 --> 00:21:50,770
interesting content and found on a

540
00:21:47,800 --> 00:21:53,020
particular URL we get this really

541
00:21:50,770 --> 00:21:55,180
daunting error message it says not

542
00:21:53,020 --> 00:21:57,040
authorized with header and then there's

543
00:21:55,180 --> 00:21:58,660
a colon but then it doesn't tell me what

544
00:21:57,040 --> 00:22:02,559
the name of the headed I'm the author

545
00:21:58,660 --> 00:22:05,080
vice with its so I thought okay maybe I

546
00:22:02,559 --> 00:22:07,059
could just flick back and try and leak

547
00:22:05,080 --> 00:22:08,889
the header and I thought okay maybe it's

548
00:22:07,059 --> 00:22:11,290
this xni external service header that we

549
00:22:08,890 --> 00:22:14,860
saw but that actually just makes the

550
00:22:11,290 --> 00:22:16,300
problem worse and at this point I could

551
00:22:14,860 --> 00:22:18,610
have used that a technique that I just

552
00:22:16,300 --> 00:22:21,370
showed you on loads of different new and

553
00:22:18,610 --> 00:22:24,639
endpoints until I found the name of this

554
00:22:21,370 --> 00:22:26,649
authorization header but I was getting

555
00:22:24,640 --> 00:22:29,140
kind of bored by this point so instead I

556
00:22:26,650 --> 00:22:34,270
cheated and I consulted my votes from

557
00:22:29,140 --> 00:22:36,190
last time I compromised develop that

558
00:22:34,270 --> 00:22:38,830
movie with the service gateway account

559
00:22:36,190 --> 00:22:42,280
ID and service gateway is New Relic

560
00:22:38,830 --> 00:22:45,428
admin headers so using those by

561
00:22:42,280 --> 00:22:48,220
accessing a specific internal API I

562
00:22:45,429 --> 00:22:50,380
could access that API as every account

563
00:22:48,220 --> 00:22:52,360
on their system as an admin and

564
00:22:50,380 --> 00:22:54,760
basically take full control over

565
00:22:52,360 --> 00:22:57,969
everything so I got decent three

566
00:22:54,760 --> 00:22:59,650
thousand dollar bounty for that and they

567
00:22:57,970 --> 00:23:01,510
patch that with a whole fix but they

568
00:22:59,650 --> 00:23:04,510
said that the root cause was their f5

569
00:23:01,510 --> 00:23:06,850
load balancer and I don't think that's

570
00:23:04,510 --> 00:23:08,650
been fixed so if you see a system

571
00:23:06,850 --> 00:23:12,309
running Fi definitely try this technique

572
00:23:08,650 --> 00:23:13,630
out now what we've seen here is with

573
00:23:12,309 --> 00:23:16,690
requests bugging if you're willing to

574
00:23:13,630 --> 00:23:18,640
put a bunch of time in you can often

575
00:23:16,690 --> 00:23:21,460
break directly into n into internal

576
00:23:18,640 --> 00:23:23,500
systems and have a good time but there's

577
00:23:21,460 --> 00:23:28,000
often much easier techniques focused on

578
00:23:23,500 --> 00:23:30,220
attacking other users for start if the

579
00:23:28,000 --> 00:23:32,500
application has any way of persistently

580
00:23:30,220 --> 00:23:36,820
storing text later exploitation is

581
00:23:32,500 --> 00:23:37,420
really easy so here I'm targeting Trello

582
00:23:36,820 --> 00:23:40,899
which is a

583
00:23:37,420 --> 00:23:43,030
notetaking application and I've smuggled

584
00:23:40,900 --> 00:23:45,190
out a requester saying please update my

585
00:23:43,030 --> 00:23:47,590
public profile

586
00:23:45,190 --> 00:23:49,690
I'm innocent and not send a follow-up so

587
00:23:47,590 --> 00:23:51,279
if someone else's the quest is going to

588
00:23:49,690 --> 00:23:53,019
get stuck on the end of it and then that

589
00:23:51,279 --> 00:23:55,989
was and then that effectively could get

590
00:23:53,019 --> 00:23:58,330
saved on my profile so I can just browse

591
00:23:55,989 --> 00:24:01,029
to my profile and see the whole of this

592
00:23:58,330 --> 00:24:02,529
users request including their session

593
00:24:01,029 --> 00:24:04,389
cookies regardless of whether they're

594
00:24:02,529 --> 00:24:06,909
secure and HTTP only and just really

595
00:24:04,389 --> 00:24:09,699
easy easily a hot pie jack their account

596
00:24:06,909 --> 00:24:11,349
so every time I send that payload I hide

597
00:24:09,700 --> 00:24:15,759
out someone's account with no use of

598
00:24:11,349 --> 00:24:17,950
interaction whatsoever I got a couple of

599
00:24:15,759 --> 00:24:19,989
bounties before that on a different site

600
00:24:17,950 --> 00:24:22,749
I found there was a low obvious way of

601
00:24:19,989 --> 00:24:25,509
storing text later but they had a

602
00:24:22,749 --> 00:24:29,019
support ticket system so by making the

603
00:24:25,509 --> 00:24:31,149
victims request land in a support ticket

604
00:24:29,019 --> 00:24:33,309
I couldn't log in and view that but it

605
00:24:31,149 --> 00:24:38,228
got emailed to me later on and I could

606
00:24:33,309 --> 00:24:40,869
hijack never count the only limitation

607
00:24:38,229 --> 00:24:43,239
with this technique is is that you can

608
00:24:40,869 --> 00:24:46,090
only steal data up to the first

609
00:24:43,239 --> 00:24:47,769
ampersand in the victims request because

610
00:24:46,090 --> 00:24:50,769
everything after that is interpreted as

611
00:24:47,769 --> 00:24:54,729
being a separate parameter so that means

612
00:24:50,769 --> 00:24:56,109
you sadly generally can't still log in

613
00:24:54,729 --> 00:24:59,590
requests and get people with usernames

614
00:24:56,109 --> 00:25:01,299
and passwords in in plain text the only

615
00:24:59,590 --> 00:25:04,238
exception to that is if the site is

616
00:25:01,299 --> 00:25:06,879
doing their login using a JSON request

617
00:25:04,239 --> 00:25:13,479
then you can unless the victim has an

618
00:25:06,879 --> 00:25:15,549
ampersand in their password okay so what

619
00:25:13,479 --> 00:25:17,799
if you can't store data well there's a

620
00:25:15,549 --> 00:25:21,899
whole nother launch of attacks based on

621
00:25:17,799 --> 00:25:24,639
causing victims to get harmful responses

622
00:25:21,899 --> 00:25:27,070
so here's a he's the most conceptually

623
00:25:24,639 --> 00:25:30,279
simple example on this site I found some

624
00:25:27,070 --> 00:25:32,470
reflected exercise reflected exercises

625
00:25:30,279 --> 00:25:35,169
okay by itself but it's not great for

626
00:25:32,470 --> 00:25:37,479
mass exploitation because it requires

627
00:25:35,169 --> 00:25:39,129
some kind of user interaction the victim

628
00:25:37,479 --> 00:25:41,919
has to click a link I send them or

629
00:25:39,129 --> 00:25:44,109
something like that but by smuggling the

630
00:25:41,919 --> 00:25:45,909
request to trigger the XSS then some

631
00:25:44,109 --> 00:25:48,369
random other person browsing the site is

632
00:25:45,909 --> 00:25:52,359
is gonna get it's the harmful response

633
00:25:48,369 --> 00:25:54,789
and get it footage the main advantage of

634
00:25:52,359 --> 00:25:56,050
this are other than in working other

635
00:25:54,789 --> 00:25:58,420
than it not requiring

636
00:25:56,050 --> 00:26:00,520
user interaction is that this technique

637
00:25:58,420 --> 00:26:03,520
works with traditionally on exploitable

638
00:26:00,520 --> 00:26:06,879
XSS vulnerability slight XSS in the user

639
00:26:03,520 --> 00:26:10,560
agent header and reflected XSS on posts

640
00:26:06,880 --> 00:26:15,130
requests to have CSF tokens and so on

641
00:26:10,560 --> 00:26:16,720
now while testing one target I happen to

642
00:26:15,130 --> 00:26:20,080
load their homepage in a web browser

643
00:26:16,720 --> 00:26:22,330
with the developer tools open and this

644
00:26:20,080 --> 00:26:25,360
message popped up which made me nervous

645
00:26:22,330 --> 00:26:26,949
because I recognized the IP in that

646
00:26:25,360 --> 00:26:29,679
message and I got this message

647
00:26:26,950 --> 00:26:31,840
regardless of what browser is don't load

648
00:26:29,680 --> 00:26:34,780
their homepage and what device in one

649
00:26:31,840 --> 00:26:38,290
network I connected from and I turned

650
00:26:34,780 --> 00:26:39,850
out yep that was my fault what I've been

651
00:26:38,290 --> 00:26:43,149
doing was I was trying to trigger a

652
00:26:39,850 --> 00:26:45,879
redirect from the server and I'd

653
00:26:43,150 --> 00:26:47,530
successfully found a prefix that caused

654
00:26:45,880 --> 00:26:48,970
the video image but someone else's

655
00:26:47,530 --> 00:26:50,410
requested snuck in there

656
00:26:48,970 --> 00:26:53,290
and they were trying to load this image

657
00:26:50,410 --> 00:26:55,120
so if they received mr. Nino X myself

658
00:26:53,290 --> 00:26:59,350
you know that's not ideal but we've only

659
00:26:55,120 --> 00:27:02,770
annoyed one person by unfortunately a

660
00:26:59,350 --> 00:27:04,719
cache saw this happening so the cache

661
00:27:02,770 --> 00:27:06,790
saw someone try and get this image which

662
00:27:04,720 --> 00:27:08,950
is on the websites home page and then

663
00:27:06,790 --> 00:27:12,520
they see the redirect to my server

664
00:27:08,950 --> 00:27:14,260
coming as a response and then they save

665
00:27:12,520 --> 00:27:15,879
it and then for several days anyone that

666
00:27:14,260 --> 00:27:17,800
goes to the home page of that site ends

667
00:27:15,880 --> 00:27:19,420
up trying to fetch this image from my

668
00:27:17,800 --> 00:27:24,520
server how do I get how do I get quite

669
00:27:19,420 --> 00:27:26,170
stressed out so if we just hijacked a

670
00:27:24,520 --> 00:27:28,000
javascript file there we would have

671
00:27:26,170 --> 00:27:29,890
taken full control over over that

672
00:27:28,000 --> 00:27:31,750
website we could hijack the account of

673
00:27:29,890 --> 00:27:34,990
anyone that went to that home page with

674
00:27:31,750 --> 00:27:37,330
no use it when though user interactions

675
00:27:34,990 --> 00:27:39,990
so on the one hand here I've shown how

676
00:27:37,330 --> 00:27:42,879
easy it is to do cache poisoning with

677
00:27:39,990 --> 00:27:45,520
with request smuggling it's so easy that

678
00:27:42,880 --> 00:27:47,140
you can do it by accident but on the

679
00:27:45,520 --> 00:27:49,300
other hand it's not really something you

680
00:27:47,140 --> 00:27:50,980
want to happen by accident so we need to

681
00:27:49,300 --> 00:27:53,320
think about how we're gonna stop this

682
00:27:50,980 --> 00:27:55,510
from happening or at least reduce the

683
00:27:53,320 --> 00:27:57,730
chance for happening one way of doing

684
00:27:55,510 --> 00:28:00,760
that is to try and craft a prefix that

685
00:27:57,730 --> 00:28:04,510
triggers triggers a response it has anti

686
00:28:00,760 --> 00:28:06,760
caching headers and another is that if

687
00:28:04,510 --> 00:28:08,379
you've got a choice of of one ends like

688
00:28:06,760 --> 00:28:11,230
you will have if the front-end server it

689
00:28:08,380 --> 00:28:12,700
just is just part of a CDN try and

690
00:28:11,230 --> 00:28:15,610
target a front-end and the geographic

691
00:28:12,700 --> 00:28:17,560
region that's either said that's remote

692
00:28:15,610 --> 00:28:20,560
or sleep and is therefore not getting

693
00:28:17,560 --> 00:28:22,149
much traffic and thereby setting faces a

694
00:28:20,560 --> 00:28:24,159
chance that your winter face you'll get

695
00:28:22,150 --> 00:28:25,780
the poison response rather than some

696
00:28:24,160 --> 00:28:33,220
random other person trails on the

697
00:28:25,780 --> 00:28:34,629
website so that was bad but that left me

698
00:28:33,220 --> 00:28:38,530
wondering what happens if we embrace

699
00:28:34,630 --> 00:28:40,540
this possibility so here i've smuggled a

700
00:28:38,530 --> 00:28:45,070
request they're saying please fetch me

701
00:28:40,540 --> 00:28:47,409
my API key and it is and when some well

702
00:28:45,070 --> 00:28:49,270
someone else's request gets concatenates

703
00:28:47,410 --> 00:28:50,980
don't that it will be committed with a

704
00:28:49,270 --> 00:28:52,629
cookie which means it'll be committed in

705
00:28:50,980 --> 00:28:56,320
their session and it will fetch that

706
00:28:52,630 --> 00:28:58,360
other users API key that user will

707
00:28:56,320 --> 00:29:01,270
receive an API key which is white as

708
00:28:58,360 --> 00:29:03,790
their own key which is Hollis but if the

709
00:29:01,270 --> 00:29:05,379
cache sees that happening and the user

710
00:29:03,790 --> 00:29:07,990
was actually trying to fetch some static

711
00:29:05,380 --> 00:29:09,760
resource that users can ends up being

712
00:29:07,990 --> 00:29:13,330
saved in the cache and then we can just

713
00:29:09,760 --> 00:29:15,700
go in and grab it there if this

714
00:29:13,330 --> 00:29:17,590
technique sounds kind of familiar that's

715
00:29:15,700 --> 00:29:21,310
because it's basically just a variation

716
00:29:17,590 --> 00:29:24,250
of the web cache deception technique the

717
00:29:21,310 --> 00:29:26,169
key difference being that this technique

718
00:29:24,250 --> 00:29:28,330
doesn't require any user interaction

719
00:29:26,170 --> 00:29:30,190
you're just exploiting a random person

720
00:29:28,330 --> 00:29:33,189
growls on the website and you can do it

721
00:29:30,190 --> 00:29:34,900
over and over there's also a small catch

722
00:29:33,190 --> 00:29:37,420
which is that as they attack that you've

723
00:29:34,900 --> 00:29:39,940
got no control over where this users API

724
00:29:37,420 --> 00:29:40,780
key lands on the site it's just going to

725
00:29:39,940 --> 00:29:42,820
land on a random

726
00:29:40,780 --> 00:29:44,710
static file and you're gonna have to

727
00:29:42,820 --> 00:29:49,000
hide browser all of them in order to

728
00:29:44,710 --> 00:29:50,890
find it so this is the only technique in

729
00:29:49,000 --> 00:29:53,380
this slides where I wasn't able to find

730
00:29:50,890 --> 00:29:55,660
a live example of it that's because you

731
00:29:53,380 --> 00:29:58,420
have to log into a site to find this

732
00:29:55,660 --> 00:30:01,090
kind of content and by pipeline I used

733
00:29:58,420 --> 00:30:03,430
to stand to find eases these samples

734
00:30:01,090 --> 00:30:06,490
does login but I'm pretty sure it's out

735
00:30:03,430 --> 00:30:10,900
there and that's roughly the location I

736
00:30:06,490 --> 00:30:12,400
would expect fine now on New Relic we

737
00:30:10,900 --> 00:30:13,400
saw that their back-end was an internal

738
00:30:12,400 --> 00:30:16,250
proxy

739
00:30:13,400 --> 00:30:17,930
but some other websites take things one

740
00:30:16,250 --> 00:30:20,900
step further and they decided to train

741
00:30:17,930 --> 00:30:23,660
the scene in Monterey CDN I saw a

742
00:30:20,900 --> 00:30:26,030
commode chained onto CloudFlare which is

743
00:30:23,660 --> 00:30:28,100
insane but I couldn't exploit that but

744
00:30:26,030 --> 00:30:32,120
these guys had chained a Cabaye on to

745
00:30:28,100 --> 00:30:34,189
Akamai I've dyed it how or why but the

746
00:30:32,120 --> 00:30:36,770
end result is if I change the host

747
00:30:34,190 --> 00:30:38,870
header in the smuggled request then I

748
00:30:36,770 --> 00:30:41,870
can get the response from anywhere any

749
00:30:38,870 --> 00:30:44,780
website any page on any website on the

750
00:30:41,870 --> 00:30:46,909
at my network and the front end Akamai

751
00:30:44,780 --> 00:30:49,340
is happy to saver so I can basically

752
00:30:46,910 --> 00:30:53,500
override their home page with any

753
00:30:49,340 --> 00:30:57,020
content from any web site on my network

754
00:30:53,500 --> 00:30:59,480
now while looking at better calm itself

755
00:30:57,020 --> 00:31:00,860
I found it was vulnerable to request

756
00:30:59,480 --> 00:31:03,350
marketing and I was looking before a

757
00:31:00,860 --> 00:31:05,389
vulnerability to chain with it and I

758
00:31:03,350 --> 00:31:07,459
found this dom-based open redirects and

759
00:31:05,390 --> 00:31:10,550
this raised an interesting challenge

760
00:31:07,460 --> 00:31:13,040
because with with requests smuggling we

761
00:31:10,550 --> 00:31:15,409
control the URL that the backend server

762
00:31:13,040 --> 00:31:18,200
thinks the user is on but we don't

763
00:31:15,410 --> 00:31:21,050
control the oil and their victims web

764
00:31:18,200 --> 00:31:22,580
browser so when this get get query

765
00:31:21,050 --> 00:31:24,590
proper function is executed in

766
00:31:22,580 --> 00:31:26,330
JavaScript in the victims web browser

767
00:31:24,590 --> 00:31:30,470
that's running on a URL we don't control

768
00:31:26,330 --> 00:31:33,290
and we can't exploit it but by finding a

769
00:31:30,470 --> 00:31:35,300
local redirect on the target site

770
00:31:33,290 --> 00:31:37,490
there's a server-side redirect I was

771
00:31:35,300 --> 00:31:39,139
able to take control of that oil and

772
00:31:37,490 --> 00:31:42,560
basically chain that with dock based a

773
00:31:39,140 --> 00:31:46,400
direct descendant an arbitrary location

774
00:31:42,560 --> 00:31:48,590
so this is a generic technique that that

775
00:31:46,400 --> 00:31:53,180
you can use to make any kind of dot

776
00:31:48,590 --> 00:31:54,709
based issue exploitable now we've seen

777
00:31:53,180 --> 00:31:56,630
locally though X can be useful but

778
00:31:54,710 --> 00:31:58,160
actually quite a few things that are

779
00:31:56,630 --> 00:32:00,650
normally local I mean you may direct

780
00:31:58,160 --> 00:32:04,610
turn into open redirects in their

781
00:32:00,650 --> 00:32:07,790
presence of requests modeling so on this

782
00:32:04,610 --> 00:32:09,949
site it's got a very common behavior

783
00:32:07,790 --> 00:32:12,500
that's a default behavior minute Apache

784
00:32:09,950 --> 00:32:14,630
and some versions of Ras which is if you

785
00:32:12,500 --> 00:32:16,490
try and access a folder without a

786
00:32:14,630 --> 00:32:18,260
trailing slash they'll give you a

787
00:32:16,490 --> 00:32:20,810
helpful redirect to put the slash off

788
00:32:18,260 --> 00:32:22,820
and when they do that the host part of

789
00:32:20,810 --> 00:32:25,340
that redirect is populated

790
00:32:22,820 --> 00:32:27,710
the host header now this technique is

791
00:32:25,340 --> 00:32:29,209
really predictable it's really easy and

792
00:32:27,710 --> 00:32:31,639
if you can be right back the JavaScript

793
00:32:29,210 --> 00:32:32,809
file you can hijack and counts it if you

794
00:32:31,639 --> 00:32:35,059
can get that cash you can hijack

795
00:32:32,809 --> 00:32:37,970
everyone's account so this became my

796
00:32:35,059 --> 00:32:40,399
kind of go to technique for exploiting

797
00:32:37,970 --> 00:32:42,289
this book for exploiting this

798
00:32:40,399 --> 00:32:46,518
probability and I got quite a few

799
00:32:42,289 --> 00:32:49,190
separate bounties with it now there's a

800
00:32:46,519 --> 00:32:52,309
couple of points or worth mentioning if

801
00:32:49,190 --> 00:32:54,759
you get a 307 may direct to your

802
00:32:52,309 --> 00:32:58,178
arbitrary location that's wonderful

803
00:32:54,759 --> 00:33:00,679
because if the browser is doing a post

804
00:32:58,179 --> 00:33:02,480
request let's say it's trying to log

805
00:33:00,679 --> 00:33:05,330
someone in by submitting their username

806
00:33:02,480 --> 00:33:08,480
and password and it gets the 307 B I

807
00:33:05,330 --> 00:33:11,029
wrecked it will reset that data to the

808
00:33:08,480 --> 00:33:12,470
new website so someone's browser there

809
00:33:11,029 --> 00:33:14,629
will be trouble and login and then the

810
00:33:12,470 --> 00:33:17,769
browser will just send their password to

811
00:33:14,629 --> 00:33:20,360
you in plain text which is fantastic

812
00:33:17,769 --> 00:33:23,990
also it's worth mentioning that some

813
00:33:20,360 --> 00:33:26,389
stick some thick thick clients like

814
00:33:23,990 --> 00:33:28,700
Lauren browser-based HTTP like piece

815
00:33:26,389 --> 00:33:30,799
whatever we'll also have this later

816
00:33:28,700 --> 00:33:33,649
reposted on arbitrary status codes

817
00:33:30,799 --> 00:33:36,470
rather than just 307 so on new hillock

818
00:33:33,649 --> 00:33:40,129
they had some kind of API based command

819
00:33:36,470 --> 00:33:42,559
line client thing and that was happy to

820
00:33:40,129 --> 00:33:46,820
resend its credentials even though I was

821
00:33:42,559 --> 00:33:49,220
just using a 301 redirect so one of the

822
00:33:46,820 --> 00:33:52,539
targets this read over based cache

823
00:33:49,220 --> 00:33:56,389
poisoning stuff worked on was PayPal

824
00:33:52,539 --> 00:33:58,340
which is also so here if we try if we

825
00:33:56,389 --> 00:34:00,769
send a URL that look like this they

826
00:33:58,340 --> 00:34:03,620
would respond with a redirect containing

827
00:34:00,769 --> 00:34:06,950
my domain there were a couple of catches

828
00:34:03,620 --> 00:34:08,810
here one has the minder main one would

829
00:34:06,950 --> 00:34:11,030
yet concatenated with the domain for the

830
00:34:08,810 --> 00:34:12,859
victims house header but that was easily

831
00:34:11,030 --> 00:34:15,829
worked around by sticking a question

832
00:34:12,859 --> 00:34:17,750
mark at the end of the house error

833
00:34:15,829 --> 00:34:19,669
the other problem is a slightly bigger

834
00:34:17,750 --> 00:34:21,179
problem which is the this video effect

835
00:34:19,668 --> 00:34:25,770
is being done using hey

836
00:34:21,179 --> 00:34:27,629
EP or HTTP that means that this video

837
00:34:25,770 --> 00:34:30,750
act is at risk of getting blocked by

838
00:34:27,629 --> 00:34:32,879
browsers mixed content protections but

839
00:34:30,750 --> 00:34:35,309
there were ways to bypass that in Safari

840
00:34:32,879 --> 00:34:36,509
and edge and I which I don't have time

841
00:34:35,309 --> 00:34:38,760
to talk about here but they're in my

842
00:34:36,510 --> 00:34:43,200
massage presentation from last year so

843
00:34:38,760 --> 00:34:45,210
we can exploit people with this using as

844
00:34:43,199 --> 00:34:46,138
long as they're using Safari or edge or

845
00:34:45,210 --> 00:34:48,389
IE

846
00:34:46,139 --> 00:34:50,569
and paper had a cache so we could

847
00:34:48,389 --> 00:34:53,730
persistently quite wrap this JavaScript

848
00:34:50,569 --> 00:34:56,969
and it was being used on PayPal's silent

849
00:34:53,730 --> 00:34:58,529
page unfortunately there was a catch

850
00:34:56,969 --> 00:35:01,078
which is PayPal's landing page also

851
00:34:58,529 --> 00:35:03,660
here's a CSP which one block that may

852
00:35:01,079 --> 00:35:07,650
direct but I wasn't even give up they're

853
00:35:03,660 --> 00:35:09,420
not on paper sign-in page and I noticed

854
00:35:07,650 --> 00:35:12,000
that the same page also loads a

855
00:35:09,420 --> 00:35:14,670
different debate inside an iframe and

856
00:35:12,000 --> 00:35:16,710
this yo is our seed or paypal calm and

857
00:35:14,670 --> 00:35:19,049
it also loads my poisoned javascript

858
00:35:16,710 --> 00:35:22,020
file and it doesn't have CSP so that

859
00:35:19,049 --> 00:35:24,150
means I can hijack that iframe but I

860
00:35:22,020 --> 00:35:25,680
can't just leave the users password out

861
00:35:24,150 --> 00:35:27,720
of a parent page because at the same

862
00:35:25,680 --> 00:35:30,690
origin policy with docker because I'm

863
00:35:27,720 --> 00:35:33,089
long the same to me but my colleague go

864
00:35:30,690 --> 00:35:36,960
with her he's spotted paper calm slash

865
00:35:33,089 --> 00:35:41,930
us slash gifts which was a static page

866
00:35:36,960 --> 00:35:44,970
on paypal it didn't UCSB and it did

867
00:35:41,930 --> 00:35:47,549
import my malicious javascript file so i

868
00:35:44,970 --> 00:35:49,439
could first hijack the iframe on see

869
00:35:47,549 --> 00:35:52,500
topic our calm and then read over the

870
00:35:49,440 --> 00:35:55,559
iframe to paypal.com / EO / gifts we

871
00:35:52,500 --> 00:35:56,789
hijack it on that domain and then I was

872
00:35:55,559 --> 00:35:58,650
same domain with the parent so I could

873
00:35:56,789 --> 00:36:01,049
just grab the users PayPal password and

874
00:35:58,650 --> 00:36:04,160
send it off to my website and I got

875
00:36:01,049 --> 00:36:04,160
nineteen thousand dollar bounty

876
00:36:11,560 --> 00:36:16,279
thank you so PayPal fix this issue by

877
00:36:14,720 --> 00:36:18,890
making their front end which was a

878
00:36:16,280 --> 00:36:20,720
combined block any requests that had the

879
00:36:18,890 --> 00:36:27,470
word chunked and the transfer encoding

880
00:36:20,720 --> 00:36:29,299
henna and I was like well they they

881
00:36:27,470 --> 00:36:31,640
asked me like James do you think this is

882
00:36:29,300 --> 00:36:33,260
secure and I kind of spent my half half

883
00:36:31,640 --> 00:36:36,859
a day on it I was like yeah seems

884
00:36:33,260 --> 00:36:39,340
perfectly solid to me oh dear

885
00:36:36,860 --> 00:36:42,140
but then a couple of weeks later I

886
00:36:39,340 --> 00:36:44,150
decided to try out using my mapping to

887
00:36:42,140 --> 00:36:45,740
try and decent my servers and I don't

888
00:36:44,150 --> 00:36:48,140
really think this was gonna work on

889
00:36:45,740 --> 00:36:51,140
anything because a line mapping is

890
00:36:48,140 --> 00:36:54,620
completely valid as per the RFC and yeah

891
00:36:51,140 --> 00:36:56,029
it didn't work on anything directly but

892
00:36:54,620 --> 00:36:58,670
what it did don't wasn't make the word

893
00:36:56,030 --> 00:37:00,470
chunked invisible to Akamai so they they

894
00:36:58,670 --> 00:37:04,580
let the request through I could once

895
00:37:00,470 --> 00:37:06,319
again hijack PayPal's login page and

896
00:37:04,580 --> 00:37:07,759
going over 20,000 thought about T which

897
00:37:06,320 --> 00:37:13,130
was a really generous given it was kind

898
00:37:07,760 --> 00:37:14,690
of my fault in the first place so at

899
00:37:13,130 --> 00:37:17,480
this point we've seen a whole range of

900
00:37:14,690 --> 00:37:21,230
different attacks you can do with

901
00:37:17,480 --> 00:37:25,010
requests lovely now it's time to attend

902
00:37:21,230 --> 00:37:27,740
the birthday boy who happens so this is

903
00:37:25,010 --> 00:37:30,250
a replica of a mail system it's pretty

904
00:37:27,740 --> 00:37:34,609
much an exact replica so this is

905
00:37:30,250 --> 00:37:38,420
Bugzilla this typically has lots of duty

906
00:37:34,610 --> 00:37:41,750
girls a zero base then bob visible to

907
00:37:38,420 --> 00:37:43,340
the public and so i i'm gonna take the

908
00:37:41,750 --> 00:37:45,200
request the homepage I'm going to

909
00:37:43,340 --> 00:37:46,970
right-click on it and click Launch

910
00:37:45,200 --> 00:37:49,310
smuggle chrome so that option is there

911
00:37:46,970 --> 00:37:52,040
because of this open-source extension

912
00:37:49,310 --> 00:37:55,430
I've installed here we can see all the

913
00:37:52,040 --> 00:37:56,720
DS synchronization techniques that it's

914
00:37:55,430 --> 00:37:57,919
that is support so I've turned them all

915
00:37:56,720 --> 00:37:59,500
off apart from the ones - you're gonna

916
00:37:57,920 --> 00:38:03,350
work so I'm just going to say that money

917
00:37:59,500 --> 00:38:06,140
and now if we look a flow which is not

918
00:38:03,350 --> 00:38:07,730
part of this extension but is also free

919
00:38:06,140 --> 00:38:09,379
in the App Store we can see what my

920
00:38:07,730 --> 00:38:12,200
extension is actually doing behind the

921
00:38:09,380 --> 00:38:12,830
scenes so you can see it's using this

922
00:38:12,200 --> 00:38:16,000
timeout

923
00:38:12,830 --> 00:38:18,950
technique that I showed you at the start

924
00:38:16,000 --> 00:38:21,380
this message is ambiguous it's causing

925
00:38:18,950 --> 00:38:23,270
distinct realization and because of this

926
00:38:21,380 --> 00:38:25,990
header here so if we look at the hex

927
00:38:23,270 --> 00:38:31,790
view it's probably too small to see but

928
00:38:25,990 --> 00:38:35,419
this though the ending of this vine ends

929
00:38:31,790 --> 00:38:37,460
with 0 a whereas every other line ends

930
00:38:35,420 --> 00:38:39,140
with 0 D 0 a

931
00:38:37,460 --> 00:38:41,120
so what that means is that the front end

932
00:38:39,140 --> 00:38:43,600
server thinks that this whole thing is

933
00:38:41,120 --> 00:38:46,640
one header and falls back to using the

934
00:38:43,600 --> 00:38:48,319
content length whereas the back end

935
00:38:46,640 --> 00:38:50,180
system sees that as being a valid line

936
00:38:48,320 --> 00:38:51,200
ending and thereby thinks is messages

937
00:38:50,180 --> 00:38:53,270
chunked which means we can do

938
00:38:51,200 --> 00:38:55,939
synchronize it which is why we're

939
00:38:53,270 --> 00:38:58,130
getting this time up so in theory if I

940
00:38:55,940 --> 00:39:04,180
browse to the target panel now see it

941
00:38:58,130 --> 00:39:06,890
stands for velocity may be fantastic

942
00:39:04,180 --> 00:39:08,990
so in it's attached there evidence

943
00:39:06,890 --> 00:39:10,640
showing there it send this request and

944
00:39:08,990 --> 00:39:11,899
it ain't got a timeout so now if i were

945
00:39:10,640 --> 00:39:14,379
i click on this request we've got an

946
00:39:11,900 --> 00:39:17,840
integer option you choose smuggle it up

947
00:39:14,380 --> 00:39:19,490
it pops open a turbo intruder window and

948
00:39:17,840 --> 00:39:22,850
there you don't need to worry about any

949
00:39:19,490 --> 00:39:25,220
of the content here except this prefix

950
00:39:22,850 --> 00:39:28,069
variable so this is the evilicious

951
00:39:25,220 --> 00:39:32,990
prefix we'll get though they'll get

952
00:39:28,070 --> 00:39:34,670
applied to the next request and the tool

953
00:39:32,990 --> 00:39:36,200
will automatically fix up all the

954
00:39:34,670 --> 00:39:38,180
offsets and such life for you which is

955
00:39:36,200 --> 00:39:39,830
absolutely horrific to determine

956
00:39:38,180 --> 00:39:42,230
manually so here we're going to try and

957
00:39:39,830 --> 00:39:47,170
make the second request to hit the

958
00:39:42,230 --> 00:39:50,270
server get boy for and if i send that

959
00:39:47,170 --> 00:39:52,670
hopefully yeah sure enough we can see we

960
00:39:50,270 --> 00:39:55,550
got a 4/4 here even though this is

961
00:39:52,670 --> 00:39:58,220
identical to this request and that got a

962
00:39:55,550 --> 00:40:01,460
200 because of the smuggle content this

963
00:39:58,220 --> 00:40:07,609
score of 4 4 so you can see this mobile

964
00:40:01,460 --> 00:40:09,770
content just here say so that proves

965
00:40:07,610 --> 00:40:12,710
that this system is vulnerable to a

966
00:40:09,770 --> 00:40:14,090
quest modeling but we just want to prove

967
00:40:12,710 --> 00:40:17,450
it you can actually do some damage with

968
00:40:14,090 --> 00:40:19,970
it right so on Bugzilla anyone can

969
00:40:17,450 --> 00:40:22,180
register an account and file a bug ID on

970
00:40:19,970 --> 00:40:24,580
a bug they can put and

971
00:40:22,180 --> 00:40:27,160
and the attachment can contain HTML but

972
00:40:24,580 --> 00:40:29,170
this is actually safe because if you

973
00:40:27,160 --> 00:40:31,180
look here this site is off BMO web

974
00:40:29,170 --> 00:40:34,060
davia but as soon as I upload a

975
00:40:31,180 --> 00:40:37,390
suspicious attachment I end up on BMO

976
00:40:34,060 --> 00:40:39,070
sandbox table VM which means that the

977
00:40:37,390 --> 00:40:40,690
malicious JavaScript I've got there

978
00:40:39,070 --> 00:40:46,210
doesn't actually work because of the

979
00:40:40,690 --> 00:40:48,070
same origin policy so that by itself is

980
00:40:46,210 --> 00:40:50,230
completely harmless but maybe we can

981
00:40:48,070 --> 00:40:52,240
take advantage of that behavior so I'm

982
00:40:50,230 --> 00:40:55,770
going to take the request to load that

983
00:40:52,240 --> 00:41:02,129
attachment from BMO sandbox of him and

984
00:40:55,770 --> 00:41:02,130
I'm going to use that as my malicious

985
00:41:02,250 --> 00:41:08,920
prefix here so it's important to leave

986
00:41:06,790 --> 00:41:12,180
this X ignore ahead on the end because

987
00:41:08,920 --> 00:41:15,700
the victims the quest is gonna get stuck

988
00:41:12,180 --> 00:41:16,899
directly like on there like like that

989
00:41:15,700 --> 00:41:19,149
and if that lands on the host header

990
00:41:16,900 --> 00:41:21,150
then it will just break the request so

991
00:41:19,150 --> 00:41:25,000
now the second request to hit the server

992
00:41:21,150 --> 00:41:27,160
should get different my spots and as you

993
00:41:25,000 --> 00:41:30,040
can see this contains some suspicious

994
00:41:27,160 --> 00:41:31,810
JavaScript so now in order to prove his

995
00:41:30,040 --> 00:41:33,160
works probably what I'm going to do is

996
00:41:31,810 --> 00:41:35,970
I'm going to send that payload but I'm

997
00:41:33,160 --> 00:41:38,230
not gonna send the fake victim follow-up

998
00:41:35,970 --> 00:41:40,060
requests so I'm gonna leave the back in

999
00:41:38,230 --> 00:41:44,050
socket who is it

1000
00:41:40,060 --> 00:41:45,940
and that means in theory whoever else is

1001
00:41:44,050 --> 00:41:47,530
browsing the site whatever they click it

1002
00:41:45,940 --> 00:41:50,170
doesn't matter they're going to get my

1003
00:41:47,530 --> 00:41:58,750
ex right back and it's gonna steal a

1004
00:41:50,170 --> 00:42:01,990
password and I got roughly $9,000 for

1005
00:41:58,750 --> 00:42:03,910
that one which takes the total to

1006
00:42:01,990 --> 00:42:08,979
roughly 75 K which is the full amount

1007
00:42:03,910 --> 00:42:11,109
earned yeah this research so far so how

1008
00:42:08,980 --> 00:42:12,850
do you prevent this well first that you

1009
00:42:11,109 --> 00:42:14,590
can't prevent it unless you could find

1010
00:42:12,850 --> 00:42:17,380
it and that makes you to be careful what

1011
00:42:14,590 --> 00:42:18,670
tools you're using in particular make

1012
00:42:17,380 --> 00:42:20,350
sure that your table doesn't

1013
00:42:18,670 --> 00:42:21,460
automatically fix this content length

1014
00:42:20,350 --> 00:42:25,029
because that will prevent you from

1015
00:42:21,460 --> 00:42:28,690
finding half of these probabilities and

1016
00:42:25,030 --> 00:42:32,440
also has some tools a particular curl or

1017
00:42:28,690 --> 00:42:34,119
normalize malformed requests and once

1018
00:42:32,440 --> 00:42:35,320
again that will make things look secure

1019
00:42:34,119 --> 00:42:38,630
when they're not

1020
00:42:35,320 --> 00:42:42,470
also some companies like to force pen

1021
00:42:38,630 --> 00:42:43,970
testers to use a proxy and if you've got

1022
00:42:42,470 --> 00:42:46,669
pen testers using a proxy in a week

1023
00:42:43,970 --> 00:42:49,189
we'll add users normal users accessing

1024
00:42:46,670 --> 00:42:51,140
the site directly that's terrible

1025
00:42:49,190 --> 00:42:52,730
because those because it's a proxy

1026
00:42:51,140 --> 00:42:53,930
walkman all their payloads the pen

1027
00:42:52,730 --> 00:42:56,450
testers won't find the real

1028
00:42:53,930 --> 00:42:58,399
probabilities and they and it may

1029
00:42:56,450 --> 00:43:00,290
actually introduce extra vulnerabilities

1030
00:42:58,400 --> 00:43:04,220
that can only be used to hack on the pen

1031
00:43:00,290 --> 00:43:06,500
testers so as far as preventing this go

1032
00:43:04,220 --> 00:43:09,410
goes the ideal is to have the front end

1033
00:43:06,500 --> 00:43:11,540
system exclusive being HT to be - - to

1034
00:43:09,410 --> 00:43:13,759
talk to backends I believe hastily trans

1035
00:43:11,540 --> 00:43:15,710
building defenses against this kind of

1036
00:43:13,760 --> 00:43:17,630
stuff but that's probably not very

1037
00:43:15,710 --> 00:43:19,700
realistic for everyone so the next best

1038
00:43:17,630 --> 00:43:21,560
option is to have the front end realign

1039
00:43:19,700 --> 00:43:24,649
and normalize any kind of ambiguous

1040
00:43:21,560 --> 00:43:28,549
let's just this approach is backed up by

1041
00:43:24,650 --> 00:43:31,400
more modern RFC's if you're forced to

1042
00:43:28,550 --> 00:43:33,020
try it to try and prevent this by

1043
00:43:31,400 --> 00:43:34,670
changing the backend system you should

1044
00:43:33,020 --> 00:43:37,970
make it doesn't drop any ambiguous

1045
00:43:34,670 --> 00:43:40,750
requests and also drop the connection so

1046
00:43:37,970 --> 00:43:43,790
the subsequent messages aren't poison

1047
00:43:40,750 --> 00:43:46,550
there's loads of further bathing on this

1048
00:43:43,790 --> 00:43:49,009
topic will be the most noteworthy thing

1049
00:43:46,550 --> 00:43:51,619
is this year we've released a whole

1050
00:43:49,010 --> 00:43:53,690
bunch of online me now so you can test

1051
00:43:51,619 --> 00:43:56,060
out the old life systems that are so

1052
00:43:53,690 --> 00:43:59,180
vulnerable to these techniques in

1053
00:43:56,060 --> 00:44:02,390
relative safety and kind of get familiar

1054
00:43:59,180 --> 00:44:04,339
with the vulnerability for yourself the

1055
00:44:02,390 --> 00:44:07,368
three key things to take away are the

1056
00:44:04,340 --> 00:44:09,280
HTTP requests smuggling is real doesn't

1057
00:44:07,369 --> 00:44:13,010
matter how scary is it definitely exists

1058
00:44:09,280 --> 00:44:14,750
hey CV 1.1 Ozzie is a security critical

1059
00:44:13,010 --> 00:44:17,690
function and it should always be audited

1060
00:44:14,750 --> 00:44:20,630
in web servers and if you're using some

1061
00:44:17,690 --> 00:44:23,480
kind of obscure web server you should be

1062
00:44:20,630 --> 00:44:26,300
really careful and finally detection

1063
00:44:23,480 --> 00:44:28,730
doesn't have to be dangerous I'm gonna

1064
00:44:26,300 --> 00:44:31,460
take five minutes of questions now maybe

1065
00:44:28,730 --> 00:44:32,660
just about yep cool and if you have any

1066
00:44:31,460 --> 00:44:34,070
more after that just come and speak to

1067
00:44:32,660 --> 00:44:35,779
me out the back or send me an email

1068
00:44:34,070 --> 00:44:38,980
don't forget to follow me on Twitter

1069
00:44:35,780 --> 00:44:38,980
thank you for listening

1070
00:44:46,840 --> 00:44:54,250
if anyone has a question put your hand

1071
00:44:48,700 --> 00:44:55,049
up and I'll bring the mic over hi thanks

1072
00:44:54,250 --> 00:44:57,790
James

1073
00:44:55,050 --> 00:45:02,770
there's a sort of application this is

1074
00:44:57,790 --> 00:45:05,050
like implementation independence so I'm

1075
00:45:02,770 --> 00:45:09,759
assuming what your outcomes from this

1076
00:45:05,050 --> 00:45:13,570
was enumerating which sorta servers

1077
00:45:09,760 --> 00:45:18,070
behave in different ways this may be you

1078
00:45:13,570 --> 00:45:20,040
were going to make public no that's a

1079
00:45:18,070 --> 00:45:22,360
long way approach to finding these

1080
00:45:20,040 --> 00:45:24,490
examples basically I put a bird project

1081
00:45:22,360 --> 00:45:27,520
flower and as every single bug ballast

1082
00:45:24,490 --> 00:45:31,180
white in it and I'm just like select all

1083
00:45:27,520 --> 00:45:32,920
my click scan with my attention so I

1084
00:45:31,180 --> 00:45:34,500
love the vulnerable systems I've got no

1085
00:45:32,920 --> 00:45:37,420
idea what they want

1086
00:45:34,500 --> 00:45:40,030
often it's quite hard to tell what the

1087
00:45:37,420 --> 00:45:42,790
fun in system is is running no I think

1088
00:45:40,030 --> 00:45:45,340
they don't really advertise themselves

1089
00:45:42,790 --> 00:45:50,050
there were some systems that I know were

1090
00:45:45,340 --> 00:45:54,870
honorable but some of them I I can't

1091
00:45:50,050 --> 00:45:57,640
make others like Akamai and f5 I can

1092
00:45:54,870 --> 00:46:00,490
your best bet is just to test whatever

1093
00:45:57,640 --> 00:46:06,609
your self whatever your setup is ok

1094
00:46:00,490 --> 00:46:09,299
anyone else it's not then a big round of

1095
00:46:06,610 --> 00:46:09,300
applause for change

