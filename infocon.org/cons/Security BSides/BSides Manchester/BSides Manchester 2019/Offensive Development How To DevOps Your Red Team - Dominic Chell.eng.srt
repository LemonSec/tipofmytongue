1
00:00:04,750 --> 00:00:11,150
so my name is Dominic Chell work for a

2
00:00:08,420 --> 00:00:14,629
company based just south of Manchester

3
00:00:11,150 --> 00:00:17,810
called mb/sec day today most of my time

4
00:00:14,629 --> 00:00:20,330
spent are doing red team engagements you

5
00:00:17,810 --> 00:00:23,570
can find me on Twitter this kind of

6
00:00:20,330 --> 00:00:26,479
unimaginative handle of a bombshell and

7
00:00:23,570 --> 00:00:31,250
I just a quick disclaimer I'm not a

8
00:00:26,480 --> 00:00:33,140
devil expert the talk is mostly on red

9
00:00:31,250 --> 00:00:34,220
teaming on red team tradecraft and we're

10
00:00:33,140 --> 00:00:37,370
just looking how we can apply some

11
00:00:34,220 --> 00:00:41,450
principles stolen from the devops world

12
00:00:37,370 --> 00:00:43,030
into red teaming so before I start I'm

13
00:00:41,450 --> 00:00:45,500
just going to give a quick story

14
00:00:43,030 --> 00:00:47,990
so we're doing a phishing campaign we

15
00:00:45,500 --> 00:00:50,860
call a lot of time into crafting the

16
00:00:47,990 --> 00:00:55,820
perfect payload we send it to our user

17
00:00:50,860 --> 00:00:58,580
we get a shell the next thing we do is a

18
00:00:55,820 --> 00:01:00,050
little bit of situational awareness we

19
00:00:58,580 --> 00:01:01,640
do a little bit of probing on the

20
00:01:00,050 --> 00:01:04,009
endpoint check that we're in the right

21
00:01:01,640 --> 00:01:07,130
environment see what privileges we've

22
00:01:04,010 --> 00:01:08,750
got we have often around looking on the

23
00:01:07,130 --> 00:01:11,240
file system see what we can find see if

24
00:01:08,750 --> 00:01:13,340
there's anything useful to us and

25
00:01:11,240 --> 00:01:15,710
suddenly your implant dies

26
00:01:13,340 --> 00:01:19,100
you've lost connectivity what's the

27
00:01:15,710 --> 00:01:22,429
reason for this so if we look into what

28
00:01:19,100 --> 00:01:26,210
the blue team sees they've got quite a

29
00:01:22,430 --> 00:01:27,230
sophisticated EDR deployment in this

30
00:01:26,210 --> 00:01:27,710
case we're just looking at crouched

31
00:01:27,230 --> 00:01:28,940
right

32
00:01:27,710 --> 00:01:30,979
they can see everything that we've done

33
00:01:28,940 --> 00:01:32,929
they've got a threat hunting team they

34
00:01:30,980 --> 00:01:36,290
can see we've empowered shell they can

35
00:01:32,930 --> 00:01:37,580
see Weaver and ipconfig they know

36
00:01:36,290 --> 00:01:41,300
everything we've done they've kicked us

37
00:01:37,580 --> 00:01:44,330
out of the network so what is the

38
00:01:41,300 --> 00:01:45,979
problem well fundamentally defenses are

39
00:01:44,330 --> 00:01:48,260
advancing we're getting things like

40
00:01:45,979 --> 00:01:51,789
command line logging PowerShell script

41
00:01:48,260 --> 00:01:55,640
block logging some boxes EDR edp's

42
00:01:51,790 --> 00:01:57,500
application whitelisting Hamsi the blue

43
00:01:55,640 --> 00:01:58,970
teams are up in the game and they've got

44
00:01:57,500 --> 00:02:02,390
all this fancy tool and that's

45
00:01:58,970 --> 00:02:03,979
supporting them now this is a problem

46
00:02:02,390 --> 00:02:08,030
for us as a red team because we've got a

47
00:02:03,979 --> 00:02:10,100
growing investment just dfi our team can

48
00:02:08,030 --> 00:02:13,290
quickly burn an entire campaign that we

49
00:02:10,100 --> 00:02:16,049
spent weeks or even months mature

50
00:02:13,290 --> 00:02:18,060
putting together and building that trust

51
00:02:16,049 --> 00:02:22,010
with the user and we've lost it very

52
00:02:18,060 --> 00:02:24,120
quickly because of our port or aircraft

53
00:02:22,010 --> 00:02:28,140
so what I'm going to introduce to you

54
00:02:24,120 --> 00:02:30,480
today is a concept that I've been

55
00:02:28,140 --> 00:02:32,640
working on within our team for a while

56
00:02:30,480 --> 00:02:35,608
we've recently started using it on

57
00:02:32,640 --> 00:02:37,439
engagements and it's moving away from

58
00:02:35,609 --> 00:02:39,030
the traditional crate trade craft of

59
00:02:37,439 --> 00:02:42,420
actually winning any operating system

60
00:02:39,030 --> 00:02:44,489
commands what I want to show is that we

61
00:02:42,420 --> 00:02:46,768
can actually abstract ourselves from

62
00:02:44,489 --> 00:02:49,079
this concept and actually only perform a

63
00:02:46,769 --> 00:02:50,870
red team engagement from an IDE we can

64
00:02:49,079 --> 00:02:52,859
do everything that we want to encode

65
00:02:50,870 --> 00:02:54,810
okay so what challenges might have

66
00:02:52,859 --> 00:02:56,939
actually posed to us was a few things

67
00:02:54,810 --> 00:03:00,060
that we need to be aware of if we go

68
00:02:56,939 --> 00:03:02,099
down this room so AM Z threat hunting

69
00:03:00,060 --> 00:03:03,810
they've got memory inspections so we

70
00:03:02,099 --> 00:03:06,030
need to be aware of that and how I'll

71
00:03:03,810 --> 00:03:07,980
show some concepts that I deployed in

72
00:03:06,030 --> 00:03:11,489
instant to them I'm going to release to

73
00:03:07,980 --> 00:03:13,828
actually get around some of these we

74
00:03:11,489 --> 00:03:17,669
need to be aware of injection techniques

75
00:03:13,829 --> 00:03:19,409
so in this example I'm looking at COBOL

76
00:03:17,669 --> 00:03:21,750
strike will the power pick and execute

77
00:03:19,409 --> 00:03:25,290
assembly commands and COBOL strike use

78
00:03:21,750 --> 00:03:26,669
injection to inject the CLR into any

79
00:03:25,290 --> 00:03:30,209
arbitrary process whatever you define

80
00:03:26,669 --> 00:03:31,829
any malleable profile then how do we

81
00:03:30,209 --> 00:03:33,989
actually go about kind of building or

82
00:03:31,829 --> 00:03:37,139
tooling delivering it into an

83
00:03:33,989 --> 00:03:38,579
environment and running it and how do we

84
00:03:37,139 --> 00:03:41,340
prevent this this tool in getting

85
00:03:38,579 --> 00:03:42,629
identified and video if I are actually

86
00:03:41,340 --> 00:03:44,549
identifying any of our artifacts

87
00:03:42,629 --> 00:03:45,720
Willingham in their own environments so

88
00:03:44,549 --> 00:03:46,859
these are some of the things that some

89
00:03:45,720 --> 00:03:50,549
of the challenges that we might have

90
00:03:46,859 --> 00:03:53,180
I'll talk a little bit about how we kind

91
00:03:50,549 --> 00:03:56,099
of approached it and how I kind of

92
00:03:53,180 --> 00:03:59,819
applied or address those challenges in

93
00:03:56,099 --> 00:04:01,948
the tool and I developed so what the

94
00:03:59,819 --> 00:04:04,168
first thing I did was really had a

95
00:04:01,949 --> 00:04:06,389
little bit of experience with some

96
00:04:04,169 --> 00:04:07,769
DevOps concepts and one of the if you

97
00:04:06,389 --> 00:04:09,840
are a DevOps person and you're probably

98
00:04:07,769 --> 00:04:10,979
familiar with the concept of having your

99
00:04:09,840 --> 00:04:13,799
own continuous integration continuous

100
00:04:10,979 --> 00:04:15,750
development pipeline I every time you're

101
00:04:13,799 --> 00:04:17,548
wanting to run at all you're building

102
00:04:15,750 --> 00:04:18,720
something fresh it's not you're

103
00:04:17,548 --> 00:04:21,209
basically in a position where you can

104
00:04:18,720 --> 00:04:23,610
continually distribute code condition

105
00:04:21,209 --> 00:04:24,900
continually distribute builds and that's

106
00:04:23,610 --> 00:04:26,700
fundamentally what we want to actually

107
00:04:24,900 --> 00:04:29,190
do we want to have

108
00:04:26,700 --> 00:04:31,500
process and a tooling in place that will

109
00:04:29,190 --> 00:04:35,150
allow us to consume build and deploy our

110
00:04:31,500 --> 00:04:37,470
code within an endpoint continuously

111
00:04:35,150 --> 00:04:40,349
additionally some nice things that would

112
00:04:37,470 --> 00:04:42,390
be good for us would be to have a

113
00:04:40,350 --> 00:04:44,640
pipeline that allows us to use all the

114
00:04:42,390 --> 00:04:45,870
existing tools that are out there so I'm

115
00:04:44,640 --> 00:04:48,270
a lot of the kind of writing tools

116
00:04:45,870 --> 00:04:51,060
developed in PowerShell c-sharp so we

117
00:04:48,270 --> 00:04:53,940
might want to use those to basically get

118
00:04:51,060 --> 00:04:56,160
a foot up we want to be agnostic of NEC

119
00:04:53,940 --> 00:04:57,480
to platform because we don't want to

120
00:04:56,160 --> 00:05:01,560
kind of limit ourselves and see it's

121
00:04:57,480 --> 00:05:03,090
using one as specific implant we want to

122
00:05:01,560 --> 00:05:05,480
be able to modify our tools

123
00:05:03,090 --> 00:05:08,789
programmatically on the fly

124
00:05:05,480 --> 00:05:11,430
apply customizations to existing tools

125
00:05:08,790 --> 00:05:14,460
so for example maybe we want to run

126
00:05:11,430 --> 00:05:17,180
something like Power View and we

127
00:05:14,460 --> 00:05:21,450
bootstrap Power View inside our own

128
00:05:17,180 --> 00:05:23,070
dotnet and we before that we run I could

129
00:05:21,450 --> 00:05:25,800
by Pan Am's II bypass before we actually

130
00:05:23,070 --> 00:05:27,780
want our own dotnet program so we can do

131
00:05:25,800 --> 00:05:30,060
that if we if we've got the ability to

132
00:05:27,780 --> 00:05:33,330
modify any tool and any code before it's

133
00:05:30,060 --> 00:05:36,870
run we can bootstrap our own code it

134
00:05:33,330 --> 00:05:38,430
before to disable protections but

135
00:05:36,870 --> 00:05:40,590
effectively what we want to do is is

136
00:05:38,430 --> 00:05:45,570
perform this concept of offensive

137
00:05:40,590 --> 00:05:48,750
development in real time so what I

138
00:05:45,570 --> 00:05:50,280
decided to do is kind of took these

139
00:05:48,750 --> 00:05:52,310
things that were nice to have and look

140
00:05:50,280 --> 00:05:54,690
at how we could kind of address them so

141
00:05:52,310 --> 00:05:56,280
if you're familiar with c-sharp you're

142
00:05:54,690 --> 00:05:58,830
probably familiar with the Roslyn

143
00:05:56,280 --> 00:06:02,849
compiler basically allows you to compile

144
00:05:58,830 --> 00:06:05,640
source code in inline using the hidden C

145
00:06:02,850 --> 00:06:07,440
sharp again you may be familiar with

146
00:06:05,640 --> 00:06:09,419
dotnet core it's basically an open

147
00:06:07,440 --> 00:06:12,780
source version of the dotnet framework

148
00:06:09,420 --> 00:06:17,550
for hidden docker so what I basically

149
00:06:12,780 --> 00:06:20,309
did was took Roslyn and took dotnet core

150
00:06:17,550 --> 00:06:25,080
and used them to build a CI CD pipeline

151
00:06:20,310 --> 00:06:26,430
and used it to integrate into well in

152
00:06:25,080 --> 00:06:31,169
this case cohort strike but it is

153
00:06:26,430 --> 00:06:33,000
agnostic of any c2 framework so that's

154
00:06:31,170 --> 00:06:35,510
all I create it was called read pipe and

155
00:06:33,000 --> 00:06:39,390
it consists of three specific components

156
00:06:35,510 --> 00:06:40,289
so firstly the loader so the loader is

157
00:06:39,390 --> 00:06:43,380
basically

158
00:06:40,290 --> 00:06:46,890
every single time you you want to run

159
00:06:43,380 --> 00:06:49,260
something on an endpoint and currently

160
00:06:46,890 --> 00:06:50,460
it uses the execute assembly commanding

161
00:06:49,260 --> 00:06:52,530
curve ball strike which will basically

162
00:06:50,460 --> 00:06:54,090
spawn a compare any arbitrary

163
00:06:52,530 --> 00:06:56,250
commandment you can define in a

164
00:06:54,090 --> 00:06:59,039
suspended state injection and manage CLR

165
00:06:56,250 --> 00:07:01,140
into that and that's basically the load

166
00:06:59,040 --> 00:07:04,290
of what a loader will then do is it will

167
00:07:01,140 --> 00:07:07,200
talk over a reverse port forward to the

168
00:07:04,290 --> 00:07:09,210
CI CD pipeline and it will retrieve

169
00:07:07,200 --> 00:07:11,430
whatever projects that you want it to to

170
00:07:09,210 --> 00:07:14,010
retrieve so the projects are basically

171
00:07:11,430 --> 00:07:15,570
either existing projects such as ghost

172
00:07:14,010 --> 00:07:18,750
pack so see about all those kind of

173
00:07:15,570 --> 00:07:20,310
tools reversed or it will basically take

174
00:07:18,750 --> 00:07:23,490
a command to generate an artifact

175
00:07:20,310 --> 00:07:24,810
well then xq is in memory or drop in to

176
00:07:23,490 --> 00:07:27,240
disk if you want to drop the artifact to

177
00:07:24,810 --> 00:07:29,490
disk and then the third component is the

178
00:07:27,240 --> 00:07:33,300
actual engine which is basically just a

179
00:07:29,490 --> 00:07:35,160
dotnet core web api that receives the

180
00:07:33,300 --> 00:07:38,670
requests for projects compiles them in

181
00:07:35,160 --> 00:07:40,050
memory and it will obviate them and

182
00:07:38,670 --> 00:07:42,150
encrypt them deliver them back to the

183
00:07:40,050 --> 00:07:46,440
loader and run them in memory on the

184
00:07:42,150 --> 00:07:52,229
employed so if we look at this this kind

185
00:07:46,440 --> 00:07:55,560
of process we basically have your your

186
00:07:52,230 --> 00:07:56,880
user operating on your c2 clam it's got

187
00:07:55,560 --> 00:08:00,180
an aggressive script that's buildings

188
00:07:56,880 --> 00:08:02,070
COBOL strike and you say I want to run

189
00:08:00,180 --> 00:08:04,740
something on this specific endpoint so

190
00:08:02,070 --> 00:08:06,450
you might you'll say I want to run the

191
00:08:04,740 --> 00:08:08,700
loader and I want it to run like rubus

192
00:08:06,450 --> 00:08:12,090
for example that would execute assembly

193
00:08:08,700 --> 00:08:13,830
on the loader go through the clouds with

194
00:08:12,090 --> 00:08:17,880
vile or whatever you using for your C to

195
00:08:13,830 --> 00:08:20,760
the loader will run in memory again on

196
00:08:17,880 --> 00:08:23,040
the endpoint it will then talk over a

197
00:08:20,760 --> 00:08:26,670
reverse port forward back through your

198
00:08:23,040 --> 00:08:29,280
c2 framework to the read PI API rip PI

199
00:08:26,670 --> 00:08:31,830
it will build modify deliver the

200
00:08:29,280 --> 00:08:34,228
compiled tool and then encrypted format

201
00:08:31,830 --> 00:08:35,970
key to the endpoint and back to the user

202
00:08:34,229 --> 00:08:39,240
and then that that gets run and you see

203
00:08:35,970 --> 00:08:42,440
you see there was all sinem not sure

204
00:08:39,240 --> 00:08:45,270
that that's the kind of workflow at all

205
00:08:42,440 --> 00:08:48,240
every tool that you want to run with the

206
00:08:45,270 --> 00:08:50,730
loader and has its own profile and these

207
00:08:48,240 --> 00:08:52,170
are really easy to graph basically it's

208
00:08:50,730 --> 00:08:52,839
just a block of JSON that looks a little

209
00:08:52,170 --> 00:08:54,248
bit like this

210
00:08:52,839 --> 00:08:55,839
and you just tell it the name of the

211
00:08:54,249 --> 00:08:57,430
tour what you can point it to the source

212
00:08:55,839 --> 00:08:59,860
code of whatever tools you want so I

213
00:08:57,430 --> 00:09:01,239
just got all the tools up the PowerShell

214
00:08:59,860 --> 00:09:02,680
and C sharp tools I'm using on

215
00:09:01,240 --> 00:09:04,540
engagement just got them all sitting

216
00:09:02,680 --> 00:09:05,859
there in a directory I just write wrote

217
00:09:04,540 --> 00:09:07,389
a little profiles quick for each one of

218
00:09:05,860 --> 00:09:09,249
them like this and just say this is

219
00:09:07,389 --> 00:09:10,449
where the source code is compiled it

220
00:09:09,249 --> 00:09:11,800
with this version and they've got that

221
00:09:10,449 --> 00:09:13,628
framework and these are the dependencies

222
00:09:11,800 --> 00:09:17,079
the reference libraries that are using

223
00:09:13,629 --> 00:09:18,850
this tool and then they get stored in a

224
00:09:17,079 --> 00:09:21,660
sequel like database and they're

225
00:09:18,850 --> 00:09:25,559
accessible from that from the pipeline

226
00:09:21,660 --> 00:09:37,860
so let's look a very simple example

227
00:09:25,559 --> 00:09:37,860
first of all wow it's been that bigger

228
00:09:38,850 --> 00:09:47,110
okay how far is big enough so see if I

229
00:09:44,980 --> 00:09:49,660
see it so what's going on is effects

230
00:09:47,110 --> 00:09:52,689
effect just started up the pipeline tool

231
00:09:49,660 --> 00:09:56,069
and I'm just reading it in an IDE so

232
00:09:52,689 --> 00:10:00,670
this is actually waiting on my laptop

233
00:09:56,069 --> 00:10:04,420
the implant is actually on a separate

234
00:10:00,670 --> 00:10:08,469
network talking through is all CDN to an

235
00:10:04,420 --> 00:10:09,819
Amazon host to over SSH tunnel to our

236
00:10:08,470 --> 00:10:12,040
internal network where the team server

237
00:10:09,819 --> 00:10:15,430
is and then I'm SSH into the team server

238
00:10:12,040 --> 00:10:18,040
doing a port forward to the the CEO CDI

239
00:10:15,430 --> 00:10:19,388
pipeline on port 5000 so that is

240
00:10:18,040 --> 00:10:21,160
actually all then getting forwarded over

241
00:10:19,389 --> 00:10:22,360
an SSH tunnel so that's why it takes a

242
00:10:21,160 --> 00:10:26,079
couple of minutes because it's going

243
00:10:22,360 --> 00:10:28,420
through as or CDN to Amazon to over SSH

244
00:10:26,079 --> 00:10:31,329
tile into our internal network and then

245
00:10:28,420 --> 00:10:32,529
over another SSH trial to my laptop so

246
00:10:31,329 --> 00:10:34,388
you can see it's not it's not one that's

247
00:10:32,529 --> 00:10:35,529
all I'm just gonna I sell and I'll show

248
00:10:34,389 --> 00:10:37,149
you again because I think it runs again

249
00:10:35,529 --> 00:10:39,490
the first example we're just wearing the

250
00:10:37,149 --> 00:10:41,019
XE the second one is giving some more

251
00:10:39,490 --> 00:10:44,679
complex arguments does he like an S for

252
00:10:41,019 --> 00:10:46,870
you attack so you can see the get

253
00:10:44,679 --> 00:10:48,370
requests basically hit the pipeline to

254
00:10:46,870 --> 00:10:51,579
all that's running on my laptop and it's

255
00:10:48,370 --> 00:10:54,480
compiling it up and I'll scroll it on

256
00:10:51,579 --> 00:10:58,508
this this example again in a second and

257
00:10:54,480 --> 00:11:00,670
as I said the pipeline will encrypt and

258
00:10:58,509 --> 00:11:02,829
obfuscate the the tool that's word in

259
00:11:00,670 --> 00:11:04,779
memory I'm going to scroll up here and

260
00:11:02,829 --> 00:11:05,979
show you and it's encrypted with keys

261
00:11:04,779 --> 00:11:07,780
that I derive from the environment

262
00:11:05,980 --> 00:11:10,060
so you can only ever be one even though

263
00:11:07,780 --> 00:11:11,980
he already memory it forces its own

264
00:11:10,060 --> 00:11:26,170
decryption key and ones on the endpoint

265
00:11:11,980 --> 00:11:28,800
in memory that's the first screen yeah

266
00:11:26,170 --> 00:11:28,800
there we go

267
00:11:31,290 --> 00:11:38,290
so so what else does it do

268
00:11:35,650 --> 00:11:41,530
I mentioned that we might want to

269
00:11:38,290 --> 00:11:43,870
actually evade analysis so whenever a

270
00:11:41,530 --> 00:11:44,920
tool is Bill fundamentally what we're

271
00:11:43,870 --> 00:11:47,440
going to do is just lob the scope of

272
00:11:44,920 --> 00:11:49,870
that tool this the reason for this is it

273
00:11:47,440 --> 00:11:51,190
makes it harder for anyone who's doing

274
00:11:49,870 --> 00:11:53,080
threat hunting based on memory to

275
00:11:51,190 --> 00:11:54,040
actually triage what is getting one on

276
00:11:53,080 --> 00:11:55,780
the endpoint because it's different

277
00:11:54,040 --> 00:11:58,630
every time so you're not going to have

278
00:11:55,780 --> 00:12:00,339
two tools that are running the same tool

279
00:11:58,630 --> 00:12:01,689
running on two different endpoints with

280
00:12:00,340 --> 00:12:03,280
the same memory signature because the

281
00:12:01,690 --> 00:12:06,730
tools are for skaters so this means if

282
00:12:03,280 --> 00:12:07,870
you're doing memory inspection it's

283
00:12:06,730 --> 00:12:09,730
going to be harder to Eisley find these

284
00:12:07,870 --> 00:12:12,310
tools running and the way I approach

285
00:12:09,730 --> 00:12:15,730
this is using a library called confuse

286
00:12:12,310 --> 00:12:18,459
wrecks and basically confuse our exes

287
00:12:15,730 --> 00:12:20,260
and open-source protector for.net allows

288
00:12:18,460 --> 00:12:22,480
you to do things like confront control

289
00:12:20,260 --> 00:12:24,189
valve this geisha it'll rename all the

290
00:12:22,480 --> 00:12:25,510
resources it will encrypt strings all

291
00:12:24,190 --> 00:12:30,160
this kind of cool stuff that our

292
00:12:25,510 --> 00:12:32,710
protectors do computer X is is quite

293
00:12:30,160 --> 00:12:34,270
simple to configure basically there's a

294
00:12:32,710 --> 00:12:37,720
configuration file that sits within the

295
00:12:34,270 --> 00:12:38,949
the red pipe source code it looks a

296
00:12:37,720 --> 00:12:40,510
little bit something like this and

297
00:12:38,950 --> 00:12:41,590
basically you can just pick the options

298
00:12:40,510 --> 00:12:43,030
that you want to apply it's or

299
00:12:41,590 --> 00:12:44,530
protection so in this case I'm just

300
00:12:43,030 --> 00:12:47,319
saying you know rename rename multiple

301
00:12:44,530 --> 00:12:51,100
sources and their puzzle item will

302
00:12:47,320 --> 00:12:53,770
basically compile the tools to the

303
00:12:51,100 --> 00:12:55,330
intermediate language it will then use

304
00:12:53,770 --> 00:12:57,579
confuse erects to obfuscate the

305
00:12:55,330 --> 00:13:01,600
intermediate language and create the

306
00:12:57,580 --> 00:13:04,270
compiler on that code x let's look at an

307
00:13:01,600 --> 00:13:05,590
example of what this might look like so

308
00:13:04,270 --> 00:13:07,090
what I'm gonna do is now just encrypt

309
00:13:05,590 --> 00:13:11,970
natural artifacts that we're going to

310
00:13:07,090 --> 00:13:11,970
drop to disk to answer station

311
00:13:13,640 --> 00:13:31,020
the video first one okay so this time

312
00:13:29,490 --> 00:13:32,790
what we're gonna do is you can see down

313
00:13:31,020 --> 00:13:34,260
here I'm basically just saying upload an

314
00:13:32,790 --> 00:13:37,500
artifact that I'm going to drop onto

315
00:13:34,260 --> 00:13:39,600
this remote at this this host you can

316
00:13:37,500 --> 00:13:41,850
see it's now retrieve the artifact from

317
00:13:39,600 --> 00:13:45,600
the pipeline just dropped it to disk you

318
00:13:41,850 --> 00:13:47,130
can see the artifacts actually here and

319
00:13:45,600 --> 00:13:48,780
I'm just going to run the artifacts just

320
00:13:47,130 --> 00:13:52,290
to show what it does it basically just

321
00:13:48,780 --> 00:13:53,790
stages and you and you see too so you

322
00:13:52,290 --> 00:13:54,930
can see that new implant wedding and the

323
00:13:53,790 --> 00:13:56,579
Mars just popped over here we've got a

324
00:13:54,930 --> 00:14:01,020
second one on the desktop so on the

325
00:13:56,580 --> 00:14:03,390
desktop workstation and that is

326
00:14:01,020 --> 00:14:05,130
basically just a shell code injection

327
00:14:03,390 --> 00:14:06,390
into Internet Explorer with people

328
00:14:05,130 --> 00:14:09,120
spoofing so you can see the payment

329
00:14:06,390 --> 00:14:11,910
processes Explorer if we take the

330
00:14:09,120 --> 00:14:17,070
artifact and we drop it into da peak to

331
00:14:11,910 --> 00:14:20,280
have a lot what it's doing second what

332
00:14:17,070 --> 00:14:24,360
you'll see is that the actual artifact

333
00:14:20,280 --> 00:14:28,199
is completely obligated so if we took a

334
00:14:24,360 --> 00:14:30,180
look at the various function names all

335
00:14:28,200 --> 00:14:31,860
those also as you can see is it's not

336
00:14:30,180 --> 00:14:34,109
trivial to read out or such to go in

337
00:14:31,860 --> 00:14:35,520
mind there and actually the shell code

338
00:14:34,110 --> 00:14:38,040
that is contained within the artifact is

339
00:14:35,520 --> 00:14:39,270
keyed to the host based on the

340
00:14:38,040 --> 00:14:41,160
environmental keys that are derived from

341
00:14:39,270 --> 00:14:42,449
the endpoint so you can't actually

342
00:14:41,160 --> 00:14:44,430
decrypt it without the keys and the keys

343
00:14:42,450 --> 00:14:46,110
are group forced every time it's run so

344
00:14:44,430 --> 00:14:48,180
we've got you can and you can create

345
00:14:46,110 --> 00:14:52,080
dll's and axes with this with this

346
00:14:48,180 --> 00:14:53,339
process and dot map and because this

347
00:14:52,080 --> 00:14:55,140
does injection you can actually also

348
00:14:53,340 --> 00:14:56,640
just remove the exit e after you've run

349
00:14:55,140 --> 00:14:59,780
it because it just stages that need a

350
00:14:56,640 --> 00:14:59,780
second staging

351
00:15:04,790 --> 00:15:16,620
okay so I mentioned that we want to

352
00:15:14,250 --> 00:15:20,160
actually protect our tools the reason

353
00:15:16,620 --> 00:15:23,490
for this is because if we're if we're

354
00:15:20,160 --> 00:15:26,670
developing new techniques were writing

355
00:15:23,490 --> 00:15:29,280
code on engagements we might have our

356
00:15:26,670 --> 00:15:31,140
own hauling that we want to protect the

357
00:15:29,280 --> 00:15:32,850
IP of we don't you know we don't want

358
00:15:31,140 --> 00:15:35,670
the boy team to kind of find these

359
00:15:32,850 --> 00:15:37,860
artifacts find these tools and drop them

360
00:15:35,670 --> 00:15:38,910
on to you know virustotal that kind of

361
00:15:37,860 --> 00:15:42,930
thing because they come into the public

362
00:15:38,910 --> 00:15:44,640
domain they're going to get signature so

363
00:15:42,930 --> 00:15:46,709
because we're using this approach of

364
00:15:44,640 --> 00:15:49,710
compiling and programmatically building

365
00:15:46,710 --> 00:15:53,150
our tools every time we can actually key

366
00:15:49,710 --> 00:15:56,490
them so King is basically the concept of

367
00:15:53,150 --> 00:16:00,780
taking a payload and then we use either

368
00:15:56,490 --> 00:16:04,320
a local or remote resource to basically

369
00:16:00,780 --> 00:16:06,510
in this case AES encrypts the tool based

370
00:16:04,320 --> 00:16:09,300
on our whatever decryption key now the

371
00:16:06,510 --> 00:16:10,740
decryption key may be known it can be it

372
00:16:09,300 --> 00:16:13,319
could be embedded if you wanted to embed

373
00:16:10,740 --> 00:16:17,250
it in my case I just brute force it

374
00:16:13,320 --> 00:16:21,030
based on environmental factors that I

375
00:16:17,250 --> 00:16:22,620
read from the environment or you could

376
00:16:21,030 --> 00:16:25,949
kind of take this further you could have

377
00:16:22,620 --> 00:16:29,940
it so that the key is read from like an

378
00:16:25,950 --> 00:16:31,470
SPF record or a DNS text record you

379
00:16:29,940 --> 00:16:33,480
could have and then once you've done

380
00:16:31,470 --> 00:16:35,040
your your stage of kind of running your

381
00:16:33,480 --> 00:16:36,780
tool your artifact you just remove the

382
00:16:35,040 --> 00:16:37,980
key and then it's never actually been in

383
00:16:36,780 --> 00:16:40,980
the environment and nobody can actually

384
00:16:37,980 --> 00:16:44,640
decrypt what's going on that's

385
00:16:40,980 --> 00:16:46,770
fundamentally what King does so what

386
00:16:44,640 --> 00:16:50,460
happens is when the loader runs on the

387
00:16:46,770 --> 00:16:52,500
end point it does extract some extracts

388
00:16:50,460 --> 00:16:54,450
multiple environmental keys if we're

389
00:16:52,500 --> 00:16:57,060
using cobalt strike and then the loader

390
00:16:54,450 --> 00:16:58,380
gets one with execute assembly and then

391
00:16:57,060 --> 00:17:02,069
the keys are submitted to the red pipe

392
00:16:58,380 --> 00:17:03,960
API I've also kind of modified this in

393
00:17:02,070 --> 00:17:05,579
that that you can have it such that the

394
00:17:03,960 --> 00:17:08,089
keys are read from the comb on strike

395
00:17:05,579 --> 00:17:10,770
dates model so they're not actually

396
00:17:08,089 --> 00:17:12,270
ingested on through the loader as well

397
00:17:10,770 --> 00:17:15,150
so they're never actually in memory

398
00:17:12,270 --> 00:17:17,959
either and then basically the

399
00:17:15,150 --> 00:17:21,300
the API responds with the encrypted

400
00:17:17,959 --> 00:17:23,010
artifacts or tool mas encrypted based on

401
00:17:21,300 --> 00:17:25,559
whether those keys are and then the

402
00:17:23,010 --> 00:17:27,030
loader brute forces then finds the entry

403
00:17:25,559 --> 00:17:31,080
point and then uses like assembly

404
00:17:27,030 --> 00:17:33,180
download to it soon we're now the kind

405
00:17:31,080 --> 00:17:35,070
of benefit of this approach this kind of

406
00:17:33,180 --> 00:17:36,990
offensive development approach is really

407
00:17:35,070 --> 00:17:38,399
that we don't actually have to heavily

408
00:17:36,990 --> 00:17:42,090
interact with the operating system at

409
00:17:38,400 --> 00:17:44,640
all we can kind of we can do everything

410
00:17:42,090 --> 00:17:46,620
that we want to do in code so if we look

411
00:17:44,640 --> 00:17:48,410
at an example let's say we're on an

412
00:17:46,620 --> 00:17:50,760
employment wanting to do some discovery

413
00:17:48,410 --> 00:17:52,230
you know traditionally maybe you use

414
00:17:50,760 --> 00:17:54,870
something like fine stirrer or

415
00:17:52,230 --> 00:17:57,150
PowerShell to search for files that

416
00:17:54,870 --> 00:17:59,159
might be on that end point now that

417
00:17:57,150 --> 00:18:03,630
would look very pretty in the kind of

418
00:17:59,160 --> 00:18:06,150
telemetry within EDR so how do we kind

419
00:18:03,630 --> 00:18:07,770
of solve that well as I mentioned like

420
00:18:06,150 --> 00:18:09,840
offensive Feltman cache you solve that

421
00:18:07,770 --> 00:18:11,940
for is because you can do a whole word

422
00:18:09,840 --> 00:18:13,830
team engagement almost just by sitting

423
00:18:11,940 --> 00:18:17,280
in your IDE writing things as you go

424
00:18:13,830 --> 00:18:26,820
along so if we look at an example here

425
00:18:17,280 --> 00:18:33,720
what I'll show you is demo will show you

426
00:18:26,820 --> 00:18:37,530
how kind of powerful this is so I've got

427
00:18:33,720 --> 00:18:40,230
man vs code open and I basically got

428
00:18:37,530 --> 00:18:42,510
some c-sharp code that just searches any

429
00:18:40,230 --> 00:18:44,790
users folder for text files and so I'm

430
00:18:42,510 --> 00:18:46,500
just going to tell the loader to run to

431
00:18:44,790 --> 00:18:50,370
run that code now with the offensive

432
00:18:46,500 --> 00:18:51,780
development project and it will you'll

433
00:18:50,370 --> 00:18:55,159
see it'll just give you a list of text

434
00:18:51,780 --> 00:19:03,389
files that exist in the IT admins folder

435
00:18:55,160 --> 00:19:04,950
it takes a minute or so so I guess

436
00:19:03,390 --> 00:19:06,750
brute-force the decryption key comes

437
00:19:04,950 --> 00:19:09,900
back and we've got a list of text files

438
00:19:06,750 --> 00:19:12,420
so what we can do now is just on the fly

439
00:19:09,900 --> 00:19:14,660
we can just say okay search these text

440
00:19:12,420 --> 00:19:17,460
files and look for the string paths were

441
00:19:14,660 --> 00:19:19,620
and let's just add you know an extra

442
00:19:17,460 --> 00:19:22,380
line and saying you know we'll just add

443
00:19:19,620 --> 00:19:24,479
some things our a print statement saying

444
00:19:22,380 --> 00:19:26,760
you know hello b-sides and all we need

445
00:19:24,480 --> 00:19:27,240
to do is just save this and then run the

446
00:19:26,760 --> 00:19:30,300
same coin

447
00:19:27,240 --> 00:19:31,440
again on the point that we will all but

448
00:19:30,300 --> 00:19:32,790
rarely run this because it's being

449
00:19:31,440 --> 00:19:34,710
retrieved from all that top every time

450
00:19:32,790 --> 00:19:37,080
so we can actually do everything that we

451
00:19:34,710 --> 00:19:38,460
want to do from the IDE we don't

452
00:19:37,080 --> 00:19:42,689
actually have to run any commands on the

453
00:19:38,460 --> 00:19:44,309
operating system anymore so again you

454
00:19:42,690 --> 00:19:47,250
can see here and it should hopefully

455
00:19:44,309 --> 00:20:00,510
what it's a video so does it give you a

456
00:19:47,250 --> 00:20:02,070
different result this time yeah so you

457
00:20:00,510 --> 00:20:03,929
come back and you can see now with it

458
00:20:02,070 --> 00:20:05,399
the codes on something different than

459
00:20:03,929 --> 00:20:07,950
we've researched with a fire we find

460
00:20:05,400 --> 00:20:22,770
passwords and we've got our kind of

461
00:20:07,950 --> 00:20:24,420
statement so what's next well this is

462
00:20:22,770 --> 00:20:26,070
still something out working on it hasn't

463
00:20:24,420 --> 00:20:28,950
been widely tested outside proof of

464
00:20:26,070 --> 00:20:32,610
concept I am looking at like how we can

465
00:20:28,950 --> 00:20:34,290
avoid injection so my kind of idea at

466
00:20:32,610 --> 00:20:35,428
the moment I've been playing around with

467
00:20:34,290 --> 00:20:38,399
a tool called door knob which will

468
00:20:35,429 --> 00:20:40,350
convert dotnet axes into position

469
00:20:38,400 --> 00:20:42,990
independent shellcode so my kind of idea

470
00:20:40,350 --> 00:20:45,600
is we don't actually have to inject into

471
00:20:42,990 --> 00:20:47,730
a new process and inject asilah why

472
00:20:45,600 --> 00:20:49,980
can't we just run shellcode in RM

473
00:20:47,730 --> 00:20:51,870
process and what it avoids process

474
00:20:49,980 --> 00:20:55,260
creation completely so something I'm

475
00:20:51,870 --> 00:20:57,629
working on at the moment then I'm also

476
00:20:55,260 --> 00:21:00,030
also just need to add more tools more

477
00:20:57,630 --> 00:21:02,670
configs get it working properly in

478
00:21:00,030 --> 00:21:04,530
docker and then just release it was blog

479
00:21:02,670 --> 00:21:08,700
posts and things the stuff us on the

480
00:21:04,530 --> 00:21:11,250
horizon try work I think it's only fair

481
00:21:08,700 --> 00:21:14,220
to mention Adam who's sitting up at the

482
00:21:11,250 --> 00:21:16,860
back who did some work on creating

483
00:21:14,220 --> 00:21:20,010
DevOps tool chains for red teaming using

484
00:21:16,860 --> 00:21:21,419
Azure DevOps and then also David Owen if

485
00:21:20,010 --> 00:21:24,179
he's here sort of this morning but

486
00:21:21,420 --> 00:21:25,200
they've did a really good project called

487
00:21:24,179 --> 00:21:28,320
shot compiled

488
00:21:25,200 --> 00:21:30,720
which is kind of similar in that allows

489
00:21:28,320 --> 00:21:34,649
you to run arbitrary c-sharp on the

490
00:21:30,720 --> 00:21:38,220
command line through through couples

491
00:21:34,650 --> 00:21:40,030
right and then finally we are hiring so

492
00:21:38,220 --> 00:21:42,550
if anybody is interested you know

493
00:21:40,030 --> 00:21:46,330
in search of us I would play it's

494
00:21:42,550 --> 00:21:48,430
supposed to be a gif is awesome great

495
00:21:46,330 --> 00:21:52,210
film was well the way and I think I was

496
00:21:48,430 --> 00:22:02,350
got any questions I've got literally two

497
00:21:52,210 --> 00:22:04,420
minutes left of moose yeah it does

498
00:22:02,350 --> 00:22:07,540
that's how it would use the loader so

499
00:22:04,420 --> 00:22:11,890
the aggressor scripts basically which

500
00:22:07,540 --> 00:22:14,260
means the loader to locally so to the to

501
00:22:11,890 --> 00:22:16,660
your construct clan and then that's how

502
00:22:14,260 --> 00:22:18,550
because execute assembly works that the

503
00:22:16,660 --> 00:22:19,810
farm needs to be on your machine so

504
00:22:18,550 --> 00:22:25,990
that's how they execute something runs

505
00:22:19,810 --> 00:22:28,230
the loader you can say what my another

506
00:22:25,990 --> 00:22:31,960
idea that I was working on was um

507
00:22:28,230 --> 00:22:33,430
basically we can create the loader with

508
00:22:31,960 --> 00:22:35,260
the tool embedded inside and the

509
00:22:33,430 --> 00:22:36,460
arguments embedded inside and then you

510
00:22:35,260 --> 00:22:37,600
run it through execute assembly you

511
00:22:36,460 --> 00:22:39,340
don't need to reverse ball forward

512
00:22:37,600 --> 00:22:42,310
that's another option I was looking at

513
00:22:39,340 --> 00:22:44,050
but in that scenario you can't get them

514
00:22:42,310 --> 00:22:45,250
but the only keys that you'll ever be

515
00:22:44,050 --> 00:22:46,720
able to have are from the curveball

516
00:22:45,250 --> 00:22:47,860
strike dates model you're not going to

517
00:22:46,720 --> 00:22:49,660
be able to get additional keys outside

518
00:22:47,860 --> 00:22:51,370
of the environment unless you extracts

519
00:22:49,660 --> 00:22:52,990
them in another way so you would have to

520
00:22:51,370 --> 00:22:55,570
have like an initial process like a

521
00:22:52,990 --> 00:22:56,680
c-sharp process that runs first gathers

522
00:22:55,570 --> 00:22:58,510
lots of different keys from the

523
00:22:56,680 --> 00:23:00,310
environment feeds them back to the

524
00:22:58,510 --> 00:23:02,350
server so internet is continent keys and

525
00:23:00,310 --> 00:23:04,060
then you could do it that way the reason

526
00:23:02,350 --> 00:23:05,740
I do this this way of the reversible

527
00:23:04,060 --> 00:23:11,770
thought was just give more flexibility

528
00:23:05,740 --> 00:23:19,120
for getting different keys and the other

529
00:23:11,770 --> 00:23:21,639
questions basically because it's noisy

530
00:23:19,120 --> 00:23:23,979
as hell threateners know about all the

531
00:23:21,640 --> 00:23:26,140
different commands that people run it's

532
00:23:23,980 --> 00:23:27,940
very easy to build a storyline in DDR

533
00:23:26,140 --> 00:23:31,710
based on telemetry people were the

534
00:23:27,940 --> 00:23:31,710
commands on operating systems so

535
00:23:35,370 --> 00:23:40,300
yeah so I mean like I got my egg whites

536
00:23:38,740 --> 00:23:41,530
to say I wanted to an IP config I've

537
00:23:40,300 --> 00:23:43,090
just got a version of I've become for

538
00:23:41,530 --> 00:23:45,190
that one and don't that if I wanted to

539
00:23:43,090 --> 00:23:47,679
learn you know search on the file system

540
00:23:45,190 --> 00:23:49,540
you can just build on that code over for

541
00:23:47,680 --> 00:23:51,580
common things that you might want to do

542
00:23:49,540 --> 00:23:53,350
and then you've got all the existing

543
00:23:51,580 --> 00:23:56,320
tooling things like you know the ghost

544
00:23:53,350 --> 00:23:57,730
pad tools and that you can run on the

545
00:23:56,320 --> 00:23:59,770
partial scripts that you can run and

546
00:23:57,730 --> 00:24:14,620
bootstrap them through this this

547
00:23:59,770 --> 00:24:18,730
technique is anymore what's right I mean

548
00:24:14,620 --> 00:24:20,350
you are going to deliver a Adamo XE to

549
00:24:18,730 --> 00:24:28,810
the end point every time but they're

550
00:24:20,350 --> 00:24:30,699
pretty small to be honest see how you

551
00:24:28,810 --> 00:24:33,820
mean sorry you mean in terms of spice of

552
00:24:30,700 --> 00:24:35,740
truffle the detection that will though

553
00:24:33,820 --> 00:24:37,389
that the is all happening over your

554
00:24:35,740 --> 00:24:40,540
normal CT frame where this all encrypted

555
00:24:37,390 --> 00:24:43,330
up anyhow on rats through SSL so it's

556
00:24:40,540 --> 00:24:45,360
still going to be it's just like winning

557
00:24:43,330 --> 00:24:50,770
execute assembly on on AB office anyway

558
00:24:45,360 --> 00:24:51,870
yeah yeah then we're going to wrap up

559
00:24:50,770 --> 00:24:55,080
and thank you very much

560
00:24:51,870 --> 00:24:55,080
[Applause]

