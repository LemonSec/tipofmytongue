1
00:00:03,480 --> 00:00:07,600
so yeah this is upon me Freda we're

2
00:00:05,950 --> 00:00:10,599
going to look at using Freda to

3
00:00:07,600 --> 00:00:13,419
instrument Windows applications so I'm

4
00:00:10,599 --> 00:00:15,789
James I'm a security consultant MD sack

5
00:00:13,419 --> 00:00:17,500
if like me you know people buy let's

6
00:00:15,789 --> 00:00:22,119
quit handles I am this guy on the

7
00:00:17,500 --> 00:00:23,740
Twitter's so this talk is it's mostly

8
00:00:22,119 --> 00:00:26,230
looking at tooling so I'm going to give

9
00:00:23,740 --> 00:00:27,729
you a brief intro to Freder sort of for

10
00:00:26,230 --> 00:00:29,259
those of you that don't know it sort of

11
00:00:27,730 --> 00:00:30,789
run you through what we can do with it

12
00:00:29,259 --> 00:00:33,730
in the windows world over than the

13
00:00:30,789 --> 00:00:34,989
mobile world we'll take a look at some

14
00:00:33,730 --> 00:00:36,879
of the existing tooling that's out there

15
00:00:34,989 --> 00:00:38,800
some of it'll go through some of the

16
00:00:36,879 --> 00:00:40,210
issues with with that tooling and sort

17
00:00:38,800 --> 00:00:42,849
of things it stops us from being able to

18
00:00:40,210 --> 00:00:44,350
do I've got some new tooling for you so

19
00:00:42,850 --> 00:00:47,140
a couple of tools to release towards the

20
00:00:44,350 --> 00:00:48,699
end of the talk and then we'll have a

21
00:00:47,140 --> 00:00:50,800
look at a way of sort of using some of

22
00:00:48,699 --> 00:00:52,899
this stuff without any extra tooling at

23
00:00:50,800 --> 00:00:54,370
all if you have like C two channels

24
00:00:52,899 --> 00:00:55,690
going and stuff like that and there's

25
00:00:54,370 --> 00:00:59,260
some videos and stuff in there as well

26
00:00:55,690 --> 00:01:02,559
so what is freedom why do we care about

27
00:00:59,260 --> 00:01:06,310
it so Freda is a dynamic instrumentation

28
00:01:02,559 --> 00:01:08,289
toolkit so this lets us inject into

29
00:01:06,310 --> 00:01:10,810
processes and then start hooking API

30
00:01:08,290 --> 00:01:12,430
calls function calls stuff like that so

31
00:01:10,810 --> 00:01:13,900
the cool thing is we don't need the

32
00:01:12,430 --> 00:01:15,939
source code for the application to do

33
00:01:13,900 --> 00:01:17,770
that we don't need so like decompile

34
00:01:15,939 --> 00:01:18,970
stuff we compile it with extra details

35
00:01:17,770 --> 00:01:21,820
or any of that stuff in there it just

36
00:01:18,970 --> 00:01:23,170
sort of does it for us so if we have a

37
00:01:21,820 --> 00:01:25,240
thick client that's like a complete

38
00:01:23,170 --> 00:01:26,770
black box we can still get stuff in

39
00:01:25,240 --> 00:01:29,919
there and start sort of interacting with

40
00:01:26,770 --> 00:01:34,270
it using treater is cross-platform so

41
00:01:29,920 --> 00:01:35,619
Windows Mac or Linux iOS Android Q and X

42
00:01:34,270 --> 00:01:35,860
whatever that is I have no idea what

43
00:01:35,619 --> 00:01:38,470
that is

44
00:01:35,860 --> 00:01:42,189
it has bindings of other languages as

45
00:01:38,470 --> 00:01:44,890
well so like - net C bindings and a

46
00:01:42,189 --> 00:01:48,699
bunch of other stuff it uses JavaScript

47
00:01:44,890 --> 00:01:51,869
so free to itself is a native DLL some

48
00:01:48,700 --> 00:01:54,579
of the tooling is like platform specific

49
00:01:51,869 --> 00:01:56,320
but the way it works it uses the v8

50
00:01:54,579 --> 00:01:59,139
engine from Google so sort of do

51
00:01:56,320 --> 00:02:01,089
JavaScript stuff so it loads that into

52
00:01:59,140 --> 00:02:03,159
memory and then your instrumentation is

53
00:02:01,090 --> 00:02:05,649
built in JavaScript and it's stuff C

54
00:02:03,159 --> 00:02:07,149
into the app for you and the cool thing

55
00:02:05,649 --> 00:02:08,830
is it's free and open source right so we

56
00:02:07,149 --> 00:02:10,360
can modify this we can use it for

57
00:02:08,830 --> 00:02:11,950
whatever we want with no license fees

58
00:02:10,360 --> 00:02:14,450
which is awesome

59
00:02:11,950 --> 00:02:15,890
so if you've heard of freedom before

60
00:02:14,450 --> 00:02:17,839
like if any of you have lightweight

61
00:02:15,890 --> 00:02:19,489
hands I guess you've probably heard of

62
00:02:17,840 --> 00:02:21,350
it for mobile testing right has anyone

63
00:02:19,490 --> 00:02:21,860
used it for anything other than mobile

64
00:02:21,350 --> 00:02:24,560
testing

65
00:02:21,860 --> 00:02:26,120
please don't see Windows testing so I

66
00:02:24,560 --> 00:02:27,320
was really worried that the whole room

67
00:02:26,120 --> 00:02:28,610
is going to go I use this a thick line

68
00:02:27,320 --> 00:02:31,459
testing all the time and then you don't

69
00:02:28,610 --> 00:02:33,440
be bored for the next 40 minutes yeah so

70
00:02:31,460 --> 00:02:35,810
there were loads of tutorials for frida

71
00:02:33,440 --> 00:02:37,790
like mobile testing right and it's

72
00:02:35,810 --> 00:02:39,530
normally stuff like sir pinning bypasses

73
00:02:37,790 --> 00:02:42,019
or jailbreak detection by passive

74
00:02:39,530 --> 00:02:43,790
detection bypasses like you can find

75
00:02:42,020 --> 00:02:45,890
loads of walkthroughs on using frida

76
00:02:43,790 --> 00:02:47,900
with mobile and absolutely nothing for

77
00:02:45,890 --> 00:02:50,269
fit clients like very very limited

78
00:02:47,900 --> 00:02:51,680
uptake you fit quite interesting if

79
00:02:50,270 --> 00:02:53,030
you're not sure if you've used it and

80
00:02:51,680 --> 00:02:54,470
you've used the objection frame where

81
00:02:53,030 --> 00:02:56,720
sense post you've used it because it's a

82
00:02:54,470 --> 00:02:58,220
part of that framework but yeah we're

83
00:02:56,720 --> 00:03:01,550
not going to look at mobile testing for

84
00:02:58,220 --> 00:03:03,920
this talk so I said a couple slides ago

85
00:03:01,550 --> 00:03:05,660
it allows us to make API hooking it's

86
00:03:03,920 --> 00:03:08,600
kind of important that we know what that

87
00:03:05,660 --> 00:03:10,609
is and why that's useful to us so API

88
00:03:08,600 --> 00:03:13,730
hooking lets us view and modify data

89
00:03:10,610 --> 00:03:16,070
past into and out of functions so if you

90
00:03:13,730 --> 00:03:17,989
have a block of code you have like your

91
00:03:16,070 --> 00:03:20,060
arguments defined and then some curly

92
00:03:17,990 --> 00:03:21,860
braces and then a return statement we

93
00:03:20,060 --> 00:03:23,540
can look at everything going into that

94
00:03:21,860 --> 00:03:25,190
as well as arguments and we can look at

95
00:03:23,540 --> 00:03:27,079
everything coming out with it we can't

96
00:03:25,190 --> 00:03:29,390
change what happens in the middle so if

97
00:03:27,080 --> 00:03:33,050
you have a block of code that looks for

98
00:03:29,390 --> 00:03:35,029
detection you can't change what our code

99
00:03:33,050 --> 00:03:36,440
does but you can change what goes into

100
00:03:35,030 --> 00:03:38,480
it and what comes out with it which

101
00:03:36,440 --> 00:03:40,310
essentially means you can change the

102
00:03:38,480 --> 00:03:42,470
function right you can like switch the

103
00:03:40,310 --> 00:03:44,510
true to a false or a jailbreak check or

104
00:03:42,470 --> 00:03:45,830
something on that which is how most of

105
00:03:44,510 --> 00:03:48,500
those things were just modifying the

106
00:03:45,830 --> 00:03:50,330
turn values but if we can control what

107
00:03:48,500 --> 00:03:52,190
goes into a function and what comes out

108
00:03:50,330 --> 00:03:53,540
with a function we don't really have to

109
00:03:52,190 --> 00:03:55,160
care about what happens in the function

110
00:03:53,540 --> 00:03:56,959
because well we can modify everything is

111
00:03:55,160 --> 00:03:58,190
doing anyway and if you hook enough for

112
00:03:56,959 --> 00:04:00,350
these functions you can completely

113
00:03:58,190 --> 00:04:02,810
change the program flow depending what

114
00:04:00,350 --> 00:04:04,040
you try to achieve so for something that

115
00:04:02,810 --> 00:04:05,180
means we don't have to do any reverse

116
00:04:04,040 --> 00:04:06,950
engineering and you sort of

117
00:04:05,180 --> 00:04:08,510
recompilation about like we can do some

118
00:04:06,950 --> 00:04:11,359
really powerful stuff with this just by

119
00:04:08,510 --> 00:04:13,280
API hooking well there is all this sort

120
00:04:11,360 --> 00:04:15,800
of hinted at limited uptake for Windows

121
00:04:13,280 --> 00:04:17,720
testing and I don't know why so I'm

122
00:04:15,800 --> 00:04:19,100
hoping this talk will sort of give you

123
00:04:17,720 --> 00:04:21,320
the inclination to go and start using

124
00:04:19,100 --> 00:04:24,140
this case in point if you look at this

125
00:04:21,320 --> 00:04:24,830
github repo down over there

126
00:04:24,140 --> 00:04:26,840
this

127
00:04:24,830 --> 00:04:28,609
a load of samples for like different

128
00:04:26,840 --> 00:04:30,500
platforms for snippets for free to

129
00:04:28,610 --> 00:04:33,409
expand the windows one and you get a

130
00:04:30,500 --> 00:04:35,719
wall cap right I don't know why

131
00:04:33,409 --> 00:04:37,938
personally I think there's sort of far

132
00:04:35,719 --> 00:04:39,319
more potential uses the Freda for

133
00:04:37,939 --> 00:04:40,069
Windows testing than there is for

134
00:04:39,319 --> 00:04:43,159
testing

135
00:04:40,069 --> 00:04:44,659
there were millions of fit client apps

136
00:04:43,159 --> 00:04:49,250
like that we can do cool stuff with the

137
00:04:44,659 --> 00:04:52,610
Freda so I'm gonna show you a demo we're

138
00:04:49,250 --> 00:04:54,500
gonna grab some passwords and keep us so

139
00:04:52,610 --> 00:04:56,120
there's a reason I've chosen key pass

140
00:04:54,500 --> 00:04:57,710
for this this sort of set a demo so

141
00:04:56,120 --> 00:04:59,750
throughout this talk we're going to see

142
00:04:57,710 --> 00:05:01,909
a few different examples of tooling that

143
00:04:59,750 --> 00:05:04,069
we can use a Frida I'm going to use the

144
00:05:01,909 --> 00:05:06,020
same payload for each just because it's

145
00:05:04,069 --> 00:05:07,280
easy right but what I didn't want to do

146
00:05:06,020 --> 00:05:08,900
with this talk is stand here and say oh

147
00:05:07,280 --> 00:05:10,369
look at all this cool stuff I can do

148
00:05:08,900 --> 00:05:11,900
with Frida so I can do this with this up

149
00:05:10,370 --> 00:05:13,520
and this with this out cuz that's

150
00:05:11,900 --> 00:05:15,500
useless to you guys right like you might

151
00:05:13,520 --> 00:05:17,270
never see those apps again what I want

152
00:05:15,500 --> 00:05:18,529
to do is sort of give you the tooling

153
00:05:17,270 --> 00:05:20,180
and the delimited black beam at a

154
00:05:18,529 --> 00:05:22,190
background and give you an hour slot to

155
00:05:20,180 --> 00:05:23,629
go and build your own stuff so if you

156
00:05:22,190 --> 00:05:25,250
find like fit clients on any of your

157
00:05:23,629 --> 00:05:28,849
tests you can do like cool stuff the

158
00:05:25,250 --> 00:05:30,919
Frida and also as I found out last year

159
00:05:28,849 --> 00:05:32,659
like vendors tend to get a bit tetchy

160
00:05:30,919 --> 00:05:34,219
when you point out flaws in their

161
00:05:32,659 --> 00:05:36,740
product on the stage at a security

162
00:05:34,219 --> 00:05:39,740
conference and it gets like a bit nasty

163
00:05:36,740 --> 00:05:41,419
and a bit weird keep us is open source

164
00:05:39,740 --> 00:05:44,599
so they're not likely to try to sue me

165
00:05:41,419 --> 00:05:45,859
right always helps and keep us is

166
00:05:44,599 --> 00:05:47,930
already broken from a sort of pen

167
00:05:45,860 --> 00:05:49,699
testing point of view so if you've come

168
00:05:47,930 --> 00:05:51,469
across key personal and engagement and

169
00:05:49,699 --> 00:05:52,940
it's running you can inject the DLL into

170
00:05:51,469 --> 00:05:55,520
it and grab the master password out of

171
00:05:52,940 --> 00:05:57,620
memory this was released years ago you

172
00:05:55,520 --> 00:05:59,568
can also add a trigger if you're running

173
00:05:57,620 --> 00:06:01,759
is a user and every time the user logs

174
00:05:59,569 --> 00:06:03,680
in to keep us it will dump like entire

175
00:06:01,759 --> 00:06:06,500
database of plaintext creds into a CSV

176
00:06:03,680 --> 00:06:08,029
file on disk for you or if you're if you

177
00:06:06,500 --> 00:06:09,650
have admin access you can drop a DLL

178
00:06:08,029 --> 00:06:11,169
into a folder and keep us all loaded and

179
00:06:09,650 --> 00:06:14,719
execute it and give you access to the

180
00:06:11,169 --> 00:06:16,279
key person bolt so I'm not giving you

181
00:06:14,719 --> 00:06:17,810
anything that you're going to go away in

182
00:06:16,279 --> 00:06:19,639
turn it's a malware here right like if

183
00:06:17,810 --> 00:06:21,259
you're gonna build malware for KeePass

184
00:06:19,639 --> 00:06:24,680
please don't use this demo because there

185
00:06:21,259 --> 00:06:26,270
are far better ways of doing it so then

186
00:06:24,680 --> 00:06:27,979
the video I'm going to pause it as we go

187
00:06:26,270 --> 00:06:30,680
through and sort of just talk about

188
00:06:27,979 --> 00:06:32,270
what's going on so first of all you

189
00:06:30,680 --> 00:06:34,699
don't need special permissions to use

190
00:06:32,270 --> 00:06:36,469
freedom you need the permission sir

191
00:06:34,699 --> 00:06:37,580
relevant to inject into the process

192
00:06:36,469 --> 00:06:38,420
you're targeting so if you're targeting

193
00:06:37,580 --> 00:06:40,640
lsaps

194
00:06:38,420 --> 00:06:42,260
xqe system if you're targeting something

195
00:06:40,640 --> 00:06:45,080
like keep us you just need to be a

196
00:06:42,260 --> 00:06:47,480
standard level user so yeah there's no

197
00:06:45,080 --> 00:06:50,570
magic here I'm just a non privileged

198
00:06:47,480 --> 00:06:52,340
user on this box we're injecting into a

199
00:06:50,570 --> 00:06:54,560
process obviously the process needs to

200
00:06:52,340 --> 00:06:56,780
be running I could spawn it in my script

201
00:06:54,560 --> 00:06:58,850
really there's there's very little point

202
00:06:56,780 --> 00:07:01,460
enough for a demo and then I'm running

203
00:06:58,850 --> 00:07:02,780
this Python script I will show you what

204
00:07:01,460 --> 00:07:04,640
this does on the payload we're using

205
00:07:02,780 --> 00:07:06,590
shortly essentially what this is doing

206
00:07:04,640 --> 00:07:08,690
is doing the free to injection in to

207
00:07:06,590 --> 00:07:11,960
keep us and then the user comes along

208
00:07:08,690 --> 00:07:13,190
answers their master password before any

209
00:07:11,960 --> 00:07:14,659
of you think I'm giving you credits to

210
00:07:13,190 --> 00:07:16,520
any of my accounts these are fake creds

211
00:07:14,660 --> 00:07:18,080
that ship with keep us so don't try and

212
00:07:16,520 --> 00:07:20,390
spray my accounts of ease it's not going

213
00:07:18,080 --> 00:07:23,690
to work and then you can copy stuff and

214
00:07:20,390 --> 00:07:25,630
if you see you are we up here we like

215
00:07:23,690 --> 00:07:28,370
stole the password associated with this

216
00:07:25,630 --> 00:07:31,070
just by sort of being on the same boxers

217
00:07:28,370 --> 00:07:33,680
keep us the little green bar in the

218
00:07:31,070 --> 00:07:35,240
bottom is so keep us has a security

219
00:07:33,680 --> 00:07:38,270
feature after twelve seconds it clears

220
00:07:35,240 --> 00:07:39,890
the clipboard we can detect passwords

221
00:07:38,270 --> 00:07:41,840
being grabbed we can also detect the

222
00:07:39,890 --> 00:07:44,120
clip all cleared event which you can see

223
00:07:41,840 --> 00:07:47,780
here and then we can we can copy

224
00:07:44,120 --> 00:07:49,460
username type it as well so we've not

225
00:07:47,780 --> 00:07:51,049
doing any memory scraping here we're not

226
00:07:49,460 --> 00:07:52,969
going through memory of keepers and

227
00:07:51,050 --> 00:07:54,800
trying to find like creds in memory

228
00:07:52,970 --> 00:07:56,840
we're just doing some hooking of

229
00:07:54,800 --> 00:07:58,880
function calls then we're able to sort

230
00:07:56,840 --> 00:08:02,119
of say sex creds over the password

231
00:07:58,880 --> 00:08:05,330
manager this will work for any other

232
00:08:02,120 --> 00:08:08,210
sort of app that uses Windows support so

233
00:08:05,330 --> 00:08:11,210
it yeah so if you want to start building

234
00:08:08,210 --> 00:08:12,770
something like this yourself keep us as

235
00:08:11,210 --> 00:08:14,390
open source so you can just go and be

236
00:08:12,770 --> 00:08:16,940
the source code and have a look at where

237
00:08:14,390 --> 00:08:19,400
it's doing this kind of stuff so that's

238
00:08:16,940 --> 00:08:20,870
what I did for this demo key paths you

239
00:08:19,400 --> 00:08:22,370
can just go and bead where it's doing

240
00:08:20,870 --> 00:08:24,490
its clipboard interaction and it turns

241
00:08:22,370 --> 00:08:27,410
out it's using the windows clipboard API

242
00:08:24,490 --> 00:08:30,050
if it was a black box test you could use

243
00:08:27,410 --> 00:08:32,450
API monitor so you move the output API

244
00:08:30,050 --> 00:08:34,520
monitor and it off the screenshot so

245
00:08:32,450 --> 00:08:36,050
it'll be here somewhere it has a list of

246
00:08:34,520 --> 00:08:37,850
filters that you can apply the sort of

247
00:08:36,049 --> 00:08:40,189
limit the number of API calls it returns

248
00:08:37,850 --> 00:08:41,510
and you can start interacting with the

249
00:08:40,190 --> 00:08:43,070
app you trigger the functionality that

250
00:08:41,510 --> 00:08:46,340
you have to instrument with reader and

251
00:08:43,070 --> 00:08:48,230
then you go through the calls and you

252
00:08:46,340 --> 00:08:51,230
try to find out what API calls is making

253
00:08:48,230 --> 00:08:52,190
I knew you VP MSDN documents and it gets

254
00:08:51,230 --> 00:08:53,780
quite complicated

255
00:08:52,190 --> 00:08:56,930
quickly then you end up making educated

256
00:08:53,780 --> 00:08:58,819
guesses and this gives you all load

257
00:08:56,930 --> 00:09:00,770
amount as well so this is by far the

258
00:08:58,820 --> 00:09:02,420
hardest part of building instrumentation

259
00:09:00,770 --> 00:09:04,069
for you it's figuring out exactly what

260
00:09:02,420 --> 00:09:06,349
you want to look at after that it's

261
00:09:04,070 --> 00:09:09,320
really quite straightforward a parameter

262
00:09:06,350 --> 00:09:12,950
does support searching so ctrl F you can

263
00:09:09,320 --> 00:09:15,440
search of strings in like this out for

264
00:09:12,950 --> 00:09:17,360
this example that won't work the second

265
00:09:15,440 --> 00:09:19,010
board data takes a pointer to an address

266
00:09:17,360 --> 00:09:20,810
in memory that contains the text you

267
00:09:19,010 --> 00:09:22,580
want to add to the clipboard so by

268
00:09:20,810 --> 00:09:24,189
searching for like password for example

269
00:09:22,580 --> 00:09:26,210
you won't find it if I'm a peer monitor

270
00:09:24,190 --> 00:09:28,400
if you want to start building this

271
00:09:26,210 --> 00:09:30,170
yourself start here and then look at

272
00:09:28,400 --> 00:09:33,110
some of the tools I'll show you in the

273
00:09:30,170 --> 00:09:35,420
next couple of slides once you've

274
00:09:33,110 --> 00:09:37,400
figured out what you want to hook this

275
00:09:35,420 --> 00:09:40,729
is the JavaScript payload or snippet of

276
00:09:37,400 --> 00:09:42,439
it for that demo so first of all you get

277
00:09:40,730 --> 00:09:44,510
a reference to the circuit board date of

278
00:09:42,440 --> 00:09:47,000
API from the MSDN Doc's we know that

279
00:09:44,510 --> 00:09:50,030
lives in user 32 and then we plus that

280
00:09:47,000 --> 00:09:51,740
in service intercepted or attached is

281
00:09:50,030 --> 00:09:53,030
here so we just passed the reference

282
00:09:51,740 --> 00:09:55,460
into the API call that we want to hook

283
00:09:53,030 --> 00:09:58,790
and then we have this on answer method

284
00:09:55,460 --> 00:10:00,620
and on leave so on leave is called right

285
00:09:58,790 --> 00:10:02,480
before the function returns so it lets

286
00:10:00,620 --> 00:10:04,910
you sort of modify the return values or

287
00:10:02,480 --> 00:10:07,100
one enzyme is called just as you go into

288
00:10:04,910 --> 00:10:08,930
that function so we want to see the data

289
00:10:07,100 --> 00:10:10,850
that's passed into SEC report data so

290
00:10:08,930 --> 00:10:12,380
we're doing more work in terms rather

291
00:10:10,850 --> 00:10:15,860
than oddly from person to thing else

292
00:10:12,380 --> 00:10:17,300
down here so the next thing we do I said

293
00:10:15,860 --> 00:10:19,070
it takes a pointer to an address in

294
00:10:17,300 --> 00:10:21,439
memory containing the text that we want

295
00:10:19,070 --> 00:10:23,930
to sort of access in this case so this

296
00:10:21,440 --> 00:10:25,340
is part of the feed of API be pointer so

297
00:10:23,930 --> 00:10:28,790
that resolves the pointer into something

298
00:10:25,340 --> 00:10:30,400
a frida can actually read and then this

299
00:10:28,790 --> 00:10:32,930
is where my code gets a bit hacking so

300
00:10:30,400 --> 00:10:34,939
we want to read data from memory the way

301
00:10:32,930 --> 00:10:37,699
you do that in frida is by using mead

302
00:10:34,940 --> 00:10:39,980
byte array we don't know how much data

303
00:10:37,700 --> 00:10:42,020
was written to the clipboard so there's

304
00:10:39,980 --> 00:10:44,000
nothing in the circuit board data call

305
00:10:42,020 --> 00:10:45,620
that says this memory location is X

306
00:10:44,000 --> 00:10:48,650
bytes long but that's not part of the

307
00:10:45,620 --> 00:10:50,600
call so we could go and try and sort of

308
00:10:48,650 --> 00:10:53,569
like look at malloc calls and try and

309
00:10:50,600 --> 00:10:54,860
correlate it like don't call malloc here

310
00:10:53,570 --> 00:10:56,600
and then you immediately call set the

311
00:10:54,860 --> 00:10:58,970
board data and think about how many

312
00:10:56,600 --> 00:11:00,650
bytes to read or you can just assume

313
00:10:58,970 --> 00:11:02,839
that it's always never going to be more

314
00:11:00,650 --> 00:11:04,699
than 32 bytes so I just grabbed 32 bytes

315
00:11:02,839 --> 00:11:05,450
in memory which for proof of concept

316
00:11:04,700 --> 00:11:07,400
code works

317
00:11:05,450 --> 00:11:09,530
definitely well you'll see in a couple

318
00:11:07,400 --> 00:11:11,480
of demos later on it does occasion the

319
00:11:09,530 --> 00:11:12,350
overflow and just sort of spit up

320
00:11:11,480 --> 00:11:15,140
garbage data

321
00:11:12,350 --> 00:11:16,310
you still get a password if you were

322
00:11:15,140 --> 00:11:18,410
going to use this to make some cool

323
00:11:16,310 --> 00:11:19,099
malware fix that bug because at the

324
00:11:18,410 --> 00:11:21,740
minute you're going to truncate

325
00:11:19,100 --> 00:11:25,100
passwords and then this stuff down here

326
00:11:21,740 --> 00:11:27,140
so we have a set of bytes we call this

327
00:11:25,100 --> 00:11:28,730
function all this does is turn those

328
00:11:27,140 --> 00:11:30,860
bytes into into ASCII I think it's just

329
00:11:28,730 --> 00:11:32,060
doing like in utf-8 conversion I'm not

330
00:11:30,860 --> 00:11:33,410
showing that code because it's it's

331
00:11:32,060 --> 00:11:36,560
questioned it forwards you can find it

332
00:11:33,410 --> 00:11:38,930
on github like I did and then the way

333
00:11:36,560 --> 00:11:40,670
keep us clears its memory is this two

334
00:11:38,930 --> 00:11:42,859
dashes so it sets two dashes and then

335
00:11:40,670 --> 00:11:44,959
nothing that's like the way it

336
00:11:42,860 --> 00:11:46,730
overwrites the clipboard data so we can

337
00:11:44,960 --> 00:11:48,440
detect that by looking which does the

338
00:11:46,730 --> 00:11:50,060
password start with two dashes if it

339
00:11:48,440 --> 00:11:51,710
does then it just keep us clear in the

340
00:11:50,060 --> 00:11:54,560
clipboard otherwise it's the data we

341
00:11:51,710 --> 00:11:56,600
want we just console.log that so if you

342
00:11:54,560 --> 00:11:58,339
want to defend your organization against

343
00:11:56,600 --> 00:11:59,570
this particular POC so all your

344
00:11:58,340 --> 00:12:02,240
passwords have two dashes because this

345
00:11:59,570 --> 00:12:04,040
will then never lock them please don't

346
00:12:02,240 --> 00:12:05,720
do that

347
00:12:04,040 --> 00:12:07,790
but yeah if you wanted to sort of use

348
00:12:05,720 --> 00:12:09,710
this for something like practical fix

349
00:12:07,790 --> 00:12:11,060
that book as well just just don't walk

350
00:12:09,710 --> 00:12:15,470
it there's no need for that to be in

351
00:12:11,060 --> 00:12:18,439
there cool so that is a really brief

352
00:12:15,470 --> 00:12:20,660
intro to Freder I could like to spend a

353
00:12:18,440 --> 00:12:22,430
day telling you about how to build stuff

354
00:12:20,660 --> 00:12:23,630
in Frida that's there's plenty of

355
00:12:22,430 --> 00:12:24,979
documentation out there already that

356
00:12:23,630 --> 00:12:26,900
will get you started what I want to do

357
00:12:24,980 --> 00:12:28,910
is sort of show you the tool and we have

358
00:12:26,900 --> 00:12:31,520
some new tooling and how you can sort of

359
00:12:28,910 --> 00:12:34,069
start using it yourself so the first

360
00:12:31,520 --> 00:12:36,530
thing we have if you install free to a

361
00:12:34,070 --> 00:12:38,840
new workstation you go away and do

362
00:12:36,530 --> 00:12:40,910
Pistor free do you get free to trace via

363
00:12:38,840 --> 00:12:44,030
console and be playful oops if you did

364
00:12:40,910 --> 00:12:45,680
by pip so via trace is the starting

365
00:12:44,030 --> 00:12:47,810
point I suggest if you want to start

366
00:12:45,680 --> 00:12:49,760
sort of building stuff so you've used

367
00:12:47,810 --> 00:12:51,800
something like API monitor or Steve

368
00:12:49,760 --> 00:12:53,540
access to the source code or some of its

369
00:12:51,800 --> 00:12:55,939
engineering if you have that skill set

370
00:12:53,540 --> 00:12:57,980
I don't but some of you will you figure

371
00:12:55,940 --> 00:12:59,510
out what API call you want to start with

372
00:12:57,980 --> 00:13:00,890
start monitoring you can do all this

373
00:12:59,510 --> 00:13:03,260
from command line so you just let you

374
00:13:00,890 --> 00:13:05,870
pass it in as arguments so you plus in

375
00:13:03,260 --> 00:13:07,069
the user user foot to do ow you passing

376
00:13:05,870 --> 00:13:08,960
the process name you pass it the name of

377
00:13:07,070 --> 00:13:11,090
the I call the API call you want to hook

378
00:13:08,960 --> 00:13:13,130
and then free the trace will manage all

379
00:13:11,090 --> 00:13:14,600
the injection to process for you and it

380
00:13:13,130 --> 00:13:16,850
just sits and starts listening for these

381
00:13:14,600 --> 00:13:18,030
calls so the top call is me copying data

382
00:13:16,850 --> 00:13:19,950
at the bottom call

383
00:13:18,030 --> 00:13:22,800
keep us clearing the clip Walter seconds

384
00:13:19,950 --> 00:13:24,300
later and it also will build you some

385
00:13:22,800 --> 00:13:25,620
basic JavaScript scaffold in the

386
00:13:24,300 --> 00:13:27,810
underscore underscore handlers directory

387
00:13:25,620 --> 00:13:29,430
so you can then go and start interacting

388
00:13:27,810 --> 00:13:32,010
with that JavaScript with adding

389
00:13:29,430 --> 00:13:34,140
console.log lines to it and doing other

390
00:13:32,010 --> 00:13:35,819
stuff in JavaScript and use just be run

391
00:13:34,140 --> 00:13:37,500
free to trace and it will then load your

392
00:13:35,820 --> 00:13:39,690
new tooling from those JavaScript

393
00:13:37,500 --> 00:13:41,070
libraries so it gives you the bit like

394
00:13:39,690 --> 00:13:42,090
the basic Scalf all to sort of start

395
00:13:41,070 --> 00:13:44,370
building more complicated

396
00:13:42,090 --> 00:13:46,020
instrumentation you can add multiple API

397
00:13:44,370 --> 00:13:48,150
calls up here you don't just need to do

398
00:13:46,020 --> 00:13:49,380
what and you can then start sort of

399
00:13:48,150 --> 00:13:50,910
intuitively interacting with the flow

400
00:13:49,380 --> 00:13:52,530
steps so if you've got maybe six API

401
00:13:50,910 --> 00:13:54,209
calls you think it could be any though

402
00:13:52,530 --> 00:13:56,699
is it I want to target use create a

403
00:13:54,210 --> 00:13:57,840
trace of a poke around me near a

404
00:13:56,700 --> 00:13:59,700
particular functionality you're

405
00:13:57,840 --> 00:14:01,050
interested in looking at and then this

406
00:13:59,700 --> 00:14:04,290
will spits out stuff that you can then

407
00:14:01,050 --> 00:14:05,760
start using other tooling as you sort of

408
00:14:04,290 --> 00:14:07,469
move on developing your proof of

409
00:14:05,760 --> 00:14:09,990
concepts so yeah this is a brilliant

410
00:14:07,470 --> 00:14:11,400
point to start but this is all it does

411
00:14:09,990 --> 00:14:13,580
you have to tell it everything via

412
00:14:11,400 --> 00:14:16,319
command line it doesn't do anything else

413
00:14:13,580 --> 00:14:17,520
and then if you've done mobile testing

414
00:14:16,320 --> 00:14:20,040
you've probably seen for you to console

415
00:14:17,520 --> 00:14:21,900
this gives you interactive access to the

416
00:14:20,040 --> 00:14:24,480
process via Frieda so there's some menus

417
00:14:21,900 --> 00:14:26,040
in there that will do stuff I have no

418
00:14:24,480 --> 00:14:28,440
idea what they do because I've never

419
00:14:26,040 --> 00:14:30,209
really used it for that the way I sort

420
00:14:28,440 --> 00:14:31,920
of approach this is API wanna serve or

421
00:14:30,210 --> 00:14:33,570
whatever find out what I want to start

422
00:14:31,920 --> 00:14:34,920
looking at build the tooling if

423
00:14:33,570 --> 00:14:37,020
something like free to trace or some of

424
00:14:34,920 --> 00:14:40,439
the tools we'll see later on and then

425
00:14:37,020 --> 00:14:42,329
this I don't use as it is now

426
00:14:40,440 --> 00:14:44,340
so this do you give it the closest name

427
00:14:42,330 --> 00:14:45,960
and you can press it a script

428
00:14:44,340 --> 00:14:47,460
via the AL flag if you don't you just

429
00:14:45,960 --> 00:14:49,860
get the interactive console access to it

430
00:14:47,460 --> 00:14:52,470
right if you do it will inject and load

431
00:14:49,860 --> 00:14:54,470
your payload file and then it does the

432
00:14:52,470 --> 00:14:56,580
same stuff that's in the JavaScript file

433
00:14:54,470 --> 00:14:58,230
we're going to see this later on with

434
00:14:56,580 --> 00:14:59,850
some of the sort of more complicated to

435
00:14:58,230 --> 00:15:03,300
land over like see two channels but I

436
00:14:59,850 --> 00:15:05,010
don't personally use this as it is it

437
00:15:03,300 --> 00:15:08,040
doesn't serve any purpose over like free

438
00:15:05,010 --> 00:15:09,870
to trace or like the Empire hooks so

439
00:15:08,040 --> 00:15:12,000
then we get playful right so if you

440
00:15:09,870 --> 00:15:14,280
install Frieda with pip you get access

441
00:15:12,000 --> 00:15:18,540
to this Frieda namespace up here so you

442
00:15:14,280 --> 00:15:19,620
just import it this is the beef the code

443
00:15:18,540 --> 00:15:22,020
that's doing the injection in the

444
00:15:19,620 --> 00:15:24,570
patellar you just saw so first of all we

445
00:15:22,020 --> 00:15:27,150
grab the process we one inject in c by

446
00:15:24,570 --> 00:15:28,920
name it does the injection we read our

447
00:15:27,150 --> 00:15:31,180
payload file and then we just load it in

448
00:15:28,920 --> 00:15:33,040
and it starts doing all stuff for us

449
00:15:31,180 --> 00:15:34,779
so this is also right we get everything

450
00:15:33,040 --> 00:15:36,849
that Python can do which is basically

451
00:15:34,779 --> 00:15:38,230
everything and then we get access to

452
00:15:36,850 --> 00:15:40,240
free dough which does like this API

453
00:15:38,230 --> 00:15:42,130
hooking stuff really nicely so we can

454
00:15:40,240 --> 00:15:44,860
now build some really cool complex tool

455
00:15:42,130 --> 00:15:46,720
if you've got I don't know let's say 50

456
00:15:44,860 --> 00:15:48,610
apps that you want to analyze for a type

457
00:15:46,720 --> 00:15:50,529
of issue you can script that in Python

458
00:15:48,610 --> 00:15:51,970
using Freder and just sort of fire your

459
00:15:50,529 --> 00:15:52,330
payloads out then war get off somewhere

460
00:15:51,970 --> 00:15:54,520
else

461
00:15:52,330 --> 00:15:58,540
my ultimate testing build really cool

462
00:15:54,520 --> 00:16:00,279
stuff you can like create some certs

463
00:15:58,540 --> 00:16:01,569
that you want to inject into processes

464
00:16:00,279 --> 00:16:03,370
and sort of see what happens when you

465
00:16:01,570 --> 00:16:05,560
change values so this gives you

466
00:16:03,370 --> 00:16:07,600
everything that you possibly want like

467
00:16:05,560 --> 00:16:09,430
as long as you have them Sri demand

468
00:16:07,600 --> 00:16:12,970
platform stall on the same host that

469
00:16:09,430 --> 00:16:14,290
your optical targeting so there is a

470
00:16:12,970 --> 00:16:16,810
balton minute and we have dependencies

471
00:16:14,290 --> 00:16:17,920
everywhere right so you need Freder you

472
00:16:16,810 --> 00:16:20,650
need playfun if you want to use the

473
00:16:17,920 --> 00:16:22,180
Python hooks and those need to be on the

474
00:16:20,650 --> 00:16:26,560
host with the app that you're

475
00:16:22,180 --> 00:16:27,849
interacting with so if you're like yeah

476
00:16:26,560 --> 00:16:32,260
so we're going to look at how we remove

477
00:16:27,850 --> 00:16:34,300
those so the reason this came about is I

478
00:16:32,260 --> 00:16:36,550
ended up sort of doing a test where a

479
00:16:34,300 --> 00:16:39,760
client sent me a laptop with a thick

480
00:16:36,550 --> 00:16:41,469
client pre-configured on it but I had

481
00:16:39,760 --> 00:16:43,209
local admin access to install stuff if I

482
00:16:41,470 --> 00:16:46,570
needed to but for sort of proof of

483
00:16:43,209 --> 00:16:48,189
concept code using using Freder you you

484
00:16:46,570 --> 00:16:49,839
do it and it we report saying like an

485
00:16:48,190 --> 00:16:51,730
attacker with local admin access could

486
00:16:49,839 --> 00:16:53,830
install frida and python and do some

487
00:16:51,730 --> 00:16:55,480
research as the user and then build this

488
00:16:53,830 --> 00:16:57,910
cool payload which steal some stuff and

489
00:16:55,480 --> 00:16:59,410
it rapidly becomes a non-issue whereas

490
00:16:57,910 --> 00:17:00,640
if we can remove these dependencies we

491
00:16:59,410 --> 00:17:01,900
can say oh well they can drop this

492
00:17:00,640 --> 00:17:03,850
binary that they just pull into and get

493
00:17:01,900 --> 00:17:05,740
up and do some cool stuff like it makes

494
00:17:03,850 --> 00:17:09,400
it far more impactful for the report

495
00:17:05,740 --> 00:17:10,809
right so the first thing if you want to

496
00:17:09,400 --> 00:17:13,660
sort of build stuff like in that

497
00:17:10,809 --> 00:17:15,970
situation fermion by fuzzy sack this

498
00:17:13,660 --> 00:17:17,589
this guy on the bottom here you can pull

499
00:17:15,970 --> 00:17:19,630
this off github it comes as a zip file

500
00:17:17,589 --> 00:17:21,550
you unzip it on your like workstation

501
00:17:19,630 --> 00:17:23,829
that you're your target process is on

502
00:17:21,550 --> 00:17:26,230
and it gives you an IDE for like

503
00:17:23,829 --> 00:17:29,200
building tool English reader so you give

504
00:17:26,230 --> 00:17:30,790
it process IDs and process names over

505
00:17:29,200 --> 00:17:32,890
here and then this is like the IDE

506
00:17:30,790 --> 00:17:34,720
window right so you can tell you

507
00:17:32,890 --> 00:17:36,130
sentence you get key bindings you don't

508
00:17:34,720 --> 00:17:40,360
need dependencies it shipped to the

509
00:17:36,130 --> 00:17:42,790
sweida dll this is I think one of the

510
00:17:40,360 --> 00:17:43,840
JavaScript framework for n-type apps you

511
00:17:42,790 --> 00:17:45,158
don't need to install anything he just

512
00:17:43,840 --> 00:17:46,959
looks

513
00:17:45,159 --> 00:17:48,520
so this is also right like this is now

514
00:17:46,960 --> 00:17:50,320
what I'm using to sort of build my

515
00:17:48,520 --> 00:17:51,730
instrumentation with readers so you

516
00:17:50,320 --> 00:17:53,320
identify the API is you want to hook

517
00:17:51,730 --> 00:17:54,760
might use for you to trace to get the

518
00:17:53,320 --> 00:17:56,399
scaffold JavaScript out of it and then

519
00:17:54,760 --> 00:17:58,299
it's straight into here to use the

520
00:17:56,400 --> 00:18:00,340
intellisense and all that kind of stuff

521
00:17:58,299 --> 00:18:03,250
and you you can just see if they develop

522
00:18:00,340 --> 00:18:04,418
payloads to user freedom but it doesn't

523
00:18:03,250 --> 00:18:06,429
do anything else right so we've lost

524
00:18:04,419 --> 00:18:08,440
that like sort of cool stuff if - we

525
00:18:06,429 --> 00:18:10,390
can't do that with with fermion we don't

526
00:18:08,440 --> 00:18:11,980
need to install Python but we now can't

527
00:18:10,390 --> 00:18:14,440
do any of the sort of automation stuff

528
00:18:11,980 --> 00:18:16,330
that Python supports so it's also quite

529
00:18:14,440 --> 00:18:18,460
large it's like over and that you make

530
00:18:16,330 --> 00:18:19,720
binary so it's not like you're not gonna

531
00:18:18,460 --> 00:18:21,159
be dropping they saw like a red team

532
00:18:19,720 --> 00:18:23,289
engagement for example like you're not

533
00:18:21,159 --> 00:18:24,970
gonna like open RDP job fermium on there

534
00:18:23,289 --> 00:18:28,150
start into activity building payloads

535
00:18:24,970 --> 00:18:30,520
like that's not gonna happen rather than

536
00:18:28,150 --> 00:18:32,140
come to a log it also uses send so it

537
00:18:30,520 --> 00:18:34,090
means the the payloads you build out

538
00:18:32,140 --> 00:18:36,309
portable so you would have to go through

539
00:18:34,090 --> 00:18:38,620
and like find in a place like send with

540
00:18:36,309 --> 00:18:39,940
console it's not a huge issue but it

541
00:18:38,620 --> 00:18:41,408
doesn't mean you can't just I couldn't

542
00:18:39,940 --> 00:18:42,549
give you a payload and say bug nets in

543
00:18:41,409 --> 00:18:45,309
this tool because you'd have to make

544
00:18:42,549 --> 00:18:46,450
these changes so this leads us on to

545
00:18:45,309 --> 00:18:48,639
some like the first tool I'm gonna

546
00:18:46,450 --> 00:18:52,150
release for you so this is using c-sharp

547
00:18:48,640 --> 00:18:53,590
to wrap reader as a DLL I know like the

548
00:18:52,150 --> 00:18:55,570
normal sort of way of naming these like

549
00:18:53,590 --> 00:18:57,100
C sharp tools it's like like sharp

550
00:18:55,570 --> 00:18:59,110
something but sharp Freder sounds

551
00:18:57,100 --> 00:19:01,090
terrible when you say out loud so free

552
00:18:59,110 --> 00:19:03,070
the sharp it is I will stick this on

553
00:19:01,090 --> 00:19:04,658
github for you like the repos there I'll

554
00:19:03,070 --> 00:19:08,408
give you this the link at the end of the

555
00:19:04,659 --> 00:19:08,799
talk so then I will run the video there

556
00:19:08,409 --> 00:19:10,900
we go

557
00:19:08,799 --> 00:19:12,610
so the first thing we're going to just

558
00:19:10,900 --> 00:19:14,950
yeah I'm still just a standard user on

559
00:19:12,610 --> 00:19:17,350
this box this is a new VM it doesn't

560
00:19:14,950 --> 00:19:17,919
have freedom installed which I will show

561
00:19:17,350 --> 00:19:22,049
you in a minute

562
00:19:17,919 --> 00:19:22,049
so yeah I'm still just a standard user I

563
00:19:22,590 --> 00:19:28,059
type first do one I'm not recording it

564
00:19:24,789 --> 00:19:29,950
and there we go so yeah if this box have

565
00:19:28,059 --> 00:19:32,530
freedom install you'd now have free to

566
00:19:29,950 --> 00:19:34,539
console open on the screen so this is it

567
00:19:32,530 --> 00:19:36,520
doesn't have freedom install yeah it

568
00:19:34,539 --> 00:19:38,950
might have - I don't know that we're not

569
00:19:36,520 --> 00:19:42,158
using - so it doesn't really matter and

570
00:19:38,950 --> 00:19:45,130
then we run the the CTFxC and we get

571
00:19:42,159 --> 00:19:47,200
this sort of UI window so there's a

572
00:19:45,130 --> 00:19:49,240
reason why we have a console window and

573
00:19:47,200 --> 00:19:50,740
the UI element which also explained at

574
00:19:49,240 --> 00:19:52,720
the end of the end of the video but we

575
00:19:50,740 --> 00:19:54,789
press it the process name we give it our

576
00:19:52,720 --> 00:19:56,830
payload script obviously keep us needs

577
00:19:54,789 --> 00:19:57,700
to be open and then it will do the

578
00:19:56,830 --> 00:19:59,399
injection for

579
00:19:57,700 --> 00:20:03,220
and then we start sort of seeing console

580
00:19:59,400 --> 00:20:05,080
button so it's identified the pit belong

581
00:20:03,220 --> 00:20:07,360
to keep us it's loaded our script into

582
00:20:05,080 --> 00:20:08,770
it and then user comes along starts

583
00:20:07,360 --> 00:20:12,129
interacting with the password manager

584
00:20:08,770 --> 00:20:14,770
copying stuff and we should see output

585
00:20:12,130 --> 00:20:16,240
so it's it's in a different format it's

586
00:20:14,770 --> 00:20:18,040
in Jason my god that's people on the

587
00:20:16,240 --> 00:20:20,110
screen but we've still got the password

588
00:20:18,040 --> 00:20:21,490
coming out here and this is the garbage

589
00:20:20,110 --> 00:20:22,840
data that we've read because we're

590
00:20:21,490 --> 00:20:26,380
reading those hard coded foods we've

591
00:20:22,840 --> 00:20:28,209
rights yeah it does all the same stuff

592
00:20:26,380 --> 00:20:32,650
right it's just it's now internet rather

593
00:20:28,210 --> 00:20:35,290
than play from skip the rest of that

594
00:20:32,650 --> 00:20:37,870
video so there's a reason why we have

595
00:20:35,290 --> 00:20:42,879
the UI element sir yes I can use this

596
00:20:37,870 --> 00:20:45,520
this bit is a WinForms app set to output

597
00:20:42,880 --> 00:20:46,930
as a console app so if you build the

598
00:20:45,520 --> 00:20:48,580
contour type in dotnet you get the main

599
00:20:46,930 --> 00:20:51,250
method and as soon as that method

600
00:20:48,580 --> 00:20:52,600
returns your app exits so what we're

601
00:20:51,250 --> 00:20:54,160
doing here is asynchronous right we're

602
00:20:52,600 --> 00:20:56,350
loading a process we're waiting for user

603
00:20:54,160 --> 00:20:57,460
to do something and then we're sort of

604
00:20:56,350 --> 00:20:59,260
handling that sort of two way

605
00:20:57,460 --> 00:21:02,710
communication between like this stuff

606
00:20:59,260 --> 00:21:04,629
and keep us over here this stuff so we

607
00:21:02,710 --> 00:21:05,710
could try and do this roof reading and

608
00:21:04,630 --> 00:21:07,510
they're like ac weights and all this

609
00:21:05,710 --> 00:21:09,100
kind of stuff or we could just use like

610
00:21:07,510 --> 00:21:11,890
it WinForms up which handles all this

611
00:21:09,100 --> 00:21:13,240
for you you don't need to show this UI

612
00:21:11,890 --> 00:21:15,310
component this is here because when I

613
00:21:13,240 --> 00:21:17,440
built this I was sort of it like running

614
00:21:15,310 --> 00:21:19,810
multiple scripts and stuff like that you

615
00:21:17,440 --> 00:21:22,750
can hide that you can hide the taskbar

616
00:21:19,810 --> 00:21:23,889
being over here you can hide all that

617
00:21:22,750 --> 00:21:25,450
from the user and make it completely

618
00:21:23,890 --> 00:21:27,580
invisible and still benefit from the

619
00:21:25,450 --> 00:21:29,320
sort of built-in threading that you get

620
00:21:27,580 --> 00:21:30,520
with wind forms up just hard code

621
00:21:29,320 --> 00:21:31,840
everything into the after you can bake

622
00:21:30,520 --> 00:21:33,610
the script into the app as well if you

623
00:21:31,840 --> 00:21:35,980
want to it's not net you can do whatever

624
00:21:33,610 --> 00:21:38,050
you wanted it but yeah you do need that

625
00:21:35,980 --> 00:21:39,850
sort of automated threading support

626
00:21:38,050 --> 00:21:40,450
stuff that you get with with building a

627
00:21:39,850 --> 00:21:42,040
console

628
00:21:40,450 --> 00:21:44,140
if you thought throughout there was a

629
00:21:42,040 --> 00:21:47,379
console up you get the access to console

630
00:21:44,140 --> 00:21:49,150
so you can just do console so yeah it's

631
00:21:47,380 --> 00:21:51,910
a seashell proper around free to DLL and

632
00:21:49,150 --> 00:21:52,870
there are no dependencies in the sense

633
00:21:51,910 --> 00:21:54,310
that you don't need to store anything

634
00:21:52,870 --> 00:21:56,229
you still need the free to deal out

635
00:21:54,310 --> 00:21:58,030
white that still needs to be on disk we

636
00:21:56,230 --> 00:22:00,460
can't get around that so free there is a

637
00:21:58,030 --> 00:22:02,530
native DLL which means you can't load it

638
00:22:00,460 --> 00:22:04,930
by reflection so the first thing I've

639
00:22:02,530 --> 00:22:06,910
tried of this is zip the DLL embedded as

640
00:22:04,930 --> 00:22:08,530
a resource unzip it in memory load it

641
00:22:06,910 --> 00:22:10,610
reflection doesn't work because it's a

642
00:22:08,530 --> 00:22:12,500
native feel when you can't do that

643
00:22:10,610 --> 00:22:14,840
we've got sort of all the sort of

644
00:22:12,500 --> 00:22:16,100
customizable stuff back so we don't have

645
00:22:14,840 --> 00:22:17,720
play firm but we have got Annette and

646
00:22:16,100 --> 00:22:19,789
you can do everything but that you can

647
00:22:17,720 --> 00:22:21,260
do it Python dotnet is on pretty much

648
00:22:19,789 --> 00:22:23,120
every Windows endpoint that you will

649
00:22:21,260 --> 00:22:24,740
ever encounter now it's sort of in by

650
00:22:23,120 --> 00:22:26,840
default so you don't need to worry about

651
00:22:24,740 --> 00:22:28,400
installing anything you can build this

652
00:22:26,840 --> 00:22:30,439
on the box if you want to if I chemists

653
00:22:28,400 --> 00:22:32,450
build it still work and we've got the

654
00:22:30,440 --> 00:22:34,700
size down from like 90 Meg's of 45 Meg

655
00:22:32,450 --> 00:22:38,030
so if you build this 3d DLL in release

656
00:22:34,700 --> 00:22:39,740
mode on 64-bit is about 45 back if you

657
00:22:38,030 --> 00:22:41,299
build it in debug mode or 32-bit it's a

658
00:22:39,740 --> 00:22:43,490
bit higher and combinations thereof that

659
00:22:41,299 --> 00:22:45,260
we've sort of half the size of fermion

660
00:22:43,490 --> 00:22:47,000
it's better but it's not great right

661
00:22:45,260 --> 00:22:48,860
you're still not going to drop 45 make

662
00:22:47,000 --> 00:22:50,500
dll's all the Caretti engagement that's

663
00:22:48,860 --> 00:22:53,629
a bad idea

664
00:22:50,500 --> 00:22:55,010
so yeah I'm already using this I've used

665
00:22:53,630 --> 00:22:56,539
it with a thick client sort of

666
00:22:55,010 --> 00:22:58,789
assessment on the clients upload laps

667
00:22:56,539 --> 00:23:01,190
what I was talking about solves a bunch

668
00:22:58,789 --> 00:23:03,200
of problems not all of them we're

669
00:23:01,190 --> 00:23:04,640
getting better right you can if you want

670
00:23:03,200 --> 00:23:06,289
to use this for a traditional fit client

671
00:23:04,640 --> 00:23:08,659
test tomorrow you can pull this off

672
00:23:06,289 --> 00:23:11,090
github drop it on a like a customer

673
00:23:08,659 --> 00:23:13,159
laptop because the workstation built in

674
00:23:11,090 --> 00:23:16,539
tooling and start using it like it works

675
00:23:13,159 --> 00:23:18,710
it solves a lot of problems for you so

676
00:23:16,539 --> 00:23:20,960
I've talked a lot about sort of manage

677
00:23:18,710 --> 00:23:22,490
languages like playfun c-sharp there are

678
00:23:20,960 --> 00:23:24,020
other options I'm not gonna dwell on

679
00:23:22,490 --> 00:23:25,669
them too much because well I don't

680
00:23:24,020 --> 00:23:27,710
understand C to any sort of depth but

681
00:23:25,669 --> 00:23:30,289
you can use three two if C so you have

682
00:23:27,710 --> 00:23:31,789
Frida gum which is user C API does not

683
00:23:30,289 --> 00:23:34,840
have JavaScript support so you have to

684
00:23:31,789 --> 00:23:38,090
do everything via like C API calls I

685
00:23:34,840 --> 00:23:39,559
don't understand C at all if you do and

686
00:23:38,090 --> 00:23:41,510
you want to go down the sort of -

687
00:23:39,559 --> 00:23:43,940
language group there are options for you

688
00:23:41,510 --> 00:23:46,789
feeling um Jeff's house the v8 engine

689
00:23:43,940 --> 00:23:48,110
baked in but it sort of inflates the

690
00:23:46,789 --> 00:23:50,720
size of the XE to get out of it

691
00:23:48,110 --> 00:23:52,879
so this blog post down here from sense

692
00:23:50,720 --> 00:23:54,770
post if they used Freda - persistently

693
00:23:52,880 --> 00:23:57,620
bugged or else house until an action

694
00:23:54,770 --> 00:23:59,809
people anyway so this payload blob here

695
00:23:57,620 --> 00:24:01,789
essentially modifies the return value

696
00:23:59,809 --> 00:24:04,340
from Alsace to say a password is always

697
00:24:01,789 --> 00:24:06,289
correct for the user and they they built

698
00:24:04,340 --> 00:24:07,760
it with free - gum and it comes out as

699
00:24:06,289 --> 00:24:09,980
40 mega by the time they compiled it

700
00:24:07,760 --> 00:24:11,450
which for me who doesn't know see I

701
00:24:09,980 --> 00:24:13,929
don't see the point in going down that

702
00:24:11,450 --> 00:24:16,640
sort of pain and misery to save five mag

703
00:24:13,929 --> 00:24:18,370
if you mean to see like go through the

704
00:24:16,640 --> 00:24:21,100
options are there

705
00:24:18,370 --> 00:24:23,469
so we still have to be local to the apps

706
00:24:21,100 --> 00:24:25,360
that we're trying to assess right you

707
00:24:23,470 --> 00:24:27,820
you still have to have some way of

708
00:24:25,360 --> 00:24:29,260
putting tooling with like RDP session or

709
00:24:27,820 --> 00:24:31,870
SAP physically in front of the machine

710
00:24:29,260 --> 00:24:33,340
on the host the target process is

711
00:24:31,870 --> 00:24:36,178
running on like we don't have a way of

712
00:24:33,340 --> 00:24:38,770
running these tools over C to shuttle so

713
00:24:36,179 --> 00:24:40,000
we can use this with it glide tests but

714
00:24:38,770 --> 00:24:41,440
there's no way we can use this for

715
00:24:40,000 --> 00:24:42,429
committee engagement or a traditional

716
00:24:41,440 --> 00:24:43,870
pen test where you might have

717
00:24:42,429 --> 00:24:45,520
compromised an endpoint and just have

718
00:24:43,870 --> 00:24:48,250
some access to it but not like for

719
00:24:45,520 --> 00:24:49,299
anything so I want to be able make we

720
00:24:48,250 --> 00:24:50,679
want to change that we want to be able

721
00:24:49,299 --> 00:24:52,299
to use this all over the place there's

722
00:24:50,679 --> 00:24:54,429
no point you building some awesome

723
00:24:52,299 --> 00:24:56,020
tooling so I don't steal passwords I'm a

724
00:24:54,429 --> 00:24:58,450
VPN client or whatever the backdooring

725
00:24:56,020 --> 00:24:59,740
else asks if you have to like be at the

726
00:24:58,450 --> 00:25:02,919
terminal to use it that's kind of

727
00:24:59,740 --> 00:25:05,020
pointless right so this is where we sort

728
00:25:02,919 --> 00:25:09,580
of introduce the next bit of tooling so

729
00:25:05,020 --> 00:25:12,220
this is free to gadget so free leakage

730
00:25:09,580 --> 00:25:14,260
it comes with freedom it's a shared

731
00:25:12,220 --> 00:25:16,059
library that's designed to be injected

732
00:25:14,260 --> 00:25:18,370
into processes and it just listens for

733
00:25:16,059 --> 00:25:20,080
sweetie consoles talks of it so that's

734
00:25:18,370 --> 00:25:22,059
what Frieda console was mainly used for

735
00:25:20,080 --> 00:25:24,220
right if you are using three different

736
00:25:22,059 --> 00:25:26,500
mobile testing you normally sort of have

737
00:25:24,220 --> 00:25:28,299
a gadget running on the I also enjoyed

738
00:25:26,500 --> 00:25:31,029
out and you talk to it via a 3-2 console

739
00:25:28,299 --> 00:25:34,600
over USB yeah same concept but now it's

740
00:25:31,029 --> 00:25:36,520
over TCP not USB and it bios blunders

741
00:25:34,600 --> 00:25:38,469
currently it's all with 17 mary thoughts

742
00:25:36,520 --> 00:25:40,270
like that way better than 45 Meg right

743
00:25:38,470 --> 00:25:41,770
this is this is portable this is

744
00:25:40,270 --> 00:25:44,020
something that you can potentially start

745
00:25:41,770 --> 00:25:45,730
choppin to disk in places and like using

746
00:25:44,020 --> 00:25:48,850
in sort of more traditional pen testing

747
00:25:45,730 --> 00:25:50,860
red teaming type stuff so when you

748
00:25:48,850 --> 00:25:52,539
inject this DLL it starts listening on

749
00:25:50,860 --> 00:25:53,620
TCP it doesn't do anything else you're

750
00:25:52,539 --> 00:25:55,330
not going to get with those shells out

751
00:25:53,620 --> 00:25:57,699
of it it doesn't talk back to you it

752
00:25:55,330 --> 00:26:00,250
just listens on local host on to 7:04 to

753
00:25:57,700 --> 00:26:02,500
by default you can give it a config file

754
00:26:00,250 --> 00:26:04,330
so you can change that port number if by

755
00:26:02,500 --> 00:26:05,289
some weird coincidence it clashes or

756
00:26:04,330 --> 00:26:08,350
something that's all that workstation

757
00:26:05,289 --> 00:26:10,029
you can change the port number and it

758
00:26:08,350 --> 00:26:12,969
also gives you the ability to run

759
00:26:10,029 --> 00:26:13,659
scripts on startup so sense posts else

760
00:26:12,970 --> 00:26:15,820
has backdoor

761
00:26:13,659 --> 00:26:17,289
you don't need to interact with that

762
00:26:15,820 --> 00:26:18,639
once it's running right it just does the

763
00:26:17,289 --> 00:26:20,649
thing it's meant to do and gives you

764
00:26:18,640 --> 00:26:22,779
sort of access via alsace by putting in

765
00:26:20,649 --> 00:26:24,189
like incorrect passwords so the demo as

766
00:26:22,779 --> 00:26:26,320
we've seen from my stuff you do need

767
00:26:24,190 --> 00:26:28,059
that access but if you just want a

768
00:26:26,320 --> 00:26:29,980
backdoor elseís for example you can use

769
00:26:28,059 --> 00:26:31,389
this config file give it your payload

770
00:26:29,980 --> 00:26:33,429
J's file

771
00:26:31,389 --> 00:26:36,428
drop it all on disk inject Freda gadget

772
00:26:33,429 --> 00:26:37,959
into the the Alsace process and it will

773
00:26:36,429 --> 00:26:39,159
just one your script for you so you

774
00:26:37,959 --> 00:26:41,289
don't need to do anything else at that

775
00:26:39,159 --> 00:26:42,909
point I'm not going to go into this in

776
00:26:41,289 --> 00:26:44,649
too much detail like there's actually

777
00:26:42,909 --> 00:26:46,719
documentation for this on readers get a

778
00:26:44,649 --> 00:26:49,268
page if you few three to the

779
00:26:46,719 --> 00:26:51,219
documentation is pretty sparse in places

780
00:26:49,269 --> 00:26:52,989
this is actually well documented so you

781
00:26:51,219 --> 00:26:56,019
can go and read about this if you think

782
00:26:52,989 --> 00:26:58,479
it would be useful to you so this gives

783
00:26:56,019 --> 00:27:00,849
us the possibility to inject free to get

784
00:26:58,479 --> 00:27:02,259
you into a process and then it's on

785
00:27:00,849 --> 00:27:04,208
localhost so we have to be able to

786
00:27:02,259 --> 00:27:06,459
appear on localhost right that we can do

787
00:27:04,209 --> 00:27:07,989
that five socks so if you use cobol

788
00:27:06,459 --> 00:27:11,169
strike and beacon you have socks baked

789
00:27:07,989 --> 00:27:13,149
in like c2fo mugs do this as well so you

790
00:27:11,169 --> 00:27:16,209
can now run Frieda on your attacker

791
00:27:13,149 --> 00:27:17,589
machine over a c2 channel on to an

792
00:27:16,209 --> 00:27:19,269
endpoint where the process you want to

793
00:27:17,589 --> 00:27:21,129
target is and use Frieda to interact

794
00:27:19,269 --> 00:27:24,309
with it so that's fairly awesome right

795
00:27:21,129 --> 00:27:25,269
so I'm going to show you something else

796
00:27:24,309 --> 00:27:27,609
that I'm going to give you the end of

797
00:27:25,269 --> 00:27:29,529
the talk or freedom inject this is

798
00:27:27,609 --> 00:27:32,109
nothing special at all is literally

799
00:27:29,529 --> 00:27:34,089
doing DLL injection I've sort of called

800
00:27:32,109 --> 00:27:35,949
it freedom inject it will inject any DLL

801
00:27:34,089 --> 00:27:38,918
you give it it's just using Windows 32

802
00:27:35,950 --> 00:27:40,389
API is to inject dll's I'm going to like

803
00:27:38,919 --> 00:27:41,799
give you the code for I'm getting up

804
00:27:40,389 --> 00:27:43,539
just so you can use it if you want

805
00:27:41,799 --> 00:27:46,359
build your own like it's not that

806
00:27:43,539 --> 00:27:49,059
complicated really so this demo is

807
00:27:46,359 --> 00:27:51,309
slightly more complicated so over here

808
00:27:49,059 --> 00:27:53,408
we have a new Windows 10 VM this is are

809
00:27:51,309 --> 00:27:55,539
compromised endpoint in the sort of red

810
00:27:53,409 --> 00:27:58,299
teaming situation up here we have COBOL

811
00:27:55,539 --> 00:27:59,919
strike this machine is already beaconing

812
00:27:58,299 --> 00:28:02,739
back to COBOL strike so we have C to

813
00:27:59,919 --> 00:28:05,289
established already this terminal down

814
00:28:02,739 --> 00:28:07,239
here is on our attacker machine so the

815
00:28:05,289 --> 00:28:09,309
scenario here is this is in your clients

816
00:28:07,239 --> 00:28:09,879
environment your 50 user you've got

817
00:28:09,309 --> 00:28:11,229
beacon

818
00:28:09,879 --> 00:28:14,468
they're using keeper you wanna steal

819
00:28:11,229 --> 00:28:16,269
credit from it over c2 so they're gonna

820
00:28:14,469 --> 00:28:19,450
I will pause the video in places that

821
00:28:16,269 --> 00:28:20,829
actually matter for this so the first

822
00:28:19,450 --> 00:28:22,809
thing we're going to do is use execute

823
00:28:20,829 --> 00:28:24,399
assembly to launch free to inject in

824
00:28:22,809 --> 00:28:26,469
memory so for those of you that don't

825
00:28:24,399 --> 00:28:29,649
know you can launch dotnet apps in

826
00:28:26,469 --> 00:28:31,509
memory using execute assembly in COBOL

827
00:28:29,649 --> 00:28:34,478
strike over c2 frameworks do this as

828
00:28:31,509 --> 00:28:36,070
well so our actual botnet actually that

829
00:28:34,479 --> 00:28:39,219
does the DLL injection does not have to

830
00:28:36,070 --> 00:28:42,069
touch disk for this the free the DLL

831
00:28:39,219 --> 00:28:43,839
does so that is this DLL here I just

832
00:28:42,069 --> 00:28:44,500
renamed it freed up on a sweetie gadget

833
00:28:43,839 --> 00:28:48,040
because like

834
00:28:44,500 --> 00:28:50,860
typing is hard so this come on that I'm

835
00:28:48,040 --> 00:28:52,389
typing here you give it the path to the

836
00:28:50,860 --> 00:28:54,250
XE you want to inject which is on a

837
00:28:52,390 --> 00:28:56,230
Tucker machine the name of the process

838
00:28:54,250 --> 00:28:58,930
keep us and then this is the path to

839
00:28:56,230 --> 00:29:00,730
this dll on the compromised endpoint so

840
00:28:58,930 --> 00:29:02,410
you just use the upload command to drop

841
00:29:00,730 --> 00:29:04,240
that to disk right it's on desktop

842
00:29:02,410 --> 00:29:07,570
because that's easy but like Windows 10

843
00:29:04,240 --> 00:29:08,590
bits you're fine so ya pecan will call

844
00:29:07,570 --> 00:29:11,620
back and say that it's done the

845
00:29:08,590 --> 00:29:13,659
injection for you and then if I remember

846
00:29:11,620 --> 00:29:16,600
you I start doing like stupid things and

847
00:29:13,660 --> 00:29:18,520
I recorded this demo so what we're doing

848
00:29:16,600 --> 00:29:21,550
here is I'm trying to use proxy chains

849
00:29:18,520 --> 00:29:23,230
to make free DPS like poxy aware but I

850
00:29:21,550 --> 00:29:25,470
didn't actually start the socks foxy via

851
00:29:23,230 --> 00:29:27,760
beacon so obviously it failed to connect

852
00:29:25,470 --> 00:29:29,380
so then we go back into COBOL strike and

853
00:29:27,760 --> 00:29:32,950
just tell it to spin up a sock server so

854
00:29:29,380 --> 00:29:34,510
what this does is it opens a pore on the

855
00:29:32,950 --> 00:29:36,220
team server for COBOL strike and then

856
00:29:34,510 --> 00:29:37,960
cobol strike manages sort of sending

857
00:29:36,220 --> 00:29:40,450
sock stands a beacon on the compromised

858
00:29:37,960 --> 00:29:42,910
endpoint and then once you spin that up

859
00:29:40,450 --> 00:29:45,100
in proxy chains conflict i've just told

860
00:29:42,910 --> 00:29:48,220
it that there's a socks for a server on

861
00:29:45,100 --> 00:29:49,540
port 33 33 or the team server IP that's

862
00:29:48,220 --> 00:29:52,390
not not particularly complicated to do

863
00:29:49,540 --> 00:29:54,790
so three two PS this is something we're

864
00:29:52,390 --> 00:29:57,340
not seen yet but this looks for reader

865
00:29:54,790 --> 00:29:59,350
enabled processes on a host that you

866
00:29:57,340 --> 00:30:01,090
give it right so if you use this in the

867
00:29:59,350 --> 00:30:02,560
mobile world you give it the USB

868
00:30:01,090 --> 00:30:05,199
argument and it would find gadget or the

869
00:30:02,560 --> 00:30:07,510
USB in this instance we're pointing it

870
00:30:05,200 --> 00:30:09,580
at localhost it's found our injector

871
00:30:07,510 --> 00:30:11,680
gadget if we run this about book to

872
00:30:09,580 --> 00:30:14,139
James it would look on this workstation

873
00:30:11,680 --> 00:30:16,240
of this workstation because it's a box

874
00:30:14,140 --> 00:30:20,110
of chains it's now proxy where so it's

875
00:30:16,240 --> 00:30:22,630
appearing here essentially so we can see

876
00:30:20,110 --> 00:30:24,879
we've got this this gadget process like

877
00:30:22,630 --> 00:30:26,260
they're ready to be communicated with so

878
00:30:24,880 --> 00:30:28,390
in the previous demos we were

879
00:30:26,260 --> 00:30:30,010
interacting the key paths right what

880
00:30:28,390 --> 00:30:31,960
we've done here is injected gadget into

881
00:30:30,010 --> 00:30:33,370
keep house and then we're now

882
00:30:31,960 --> 00:30:34,870
interacting with gadget so it's slightly

883
00:30:33,370 --> 00:30:39,760
different but we're still within the

884
00:30:34,870 --> 00:30:40,959
keys bus KeePass space in in memory so

885
00:30:39,760 --> 00:30:41,710
yeah then we do the same thing of books

886
00:30:40,960 --> 00:30:44,380
your chains in Frida

887
00:30:41,710 --> 00:30:46,480
so this connects Frida console to gadget

888
00:30:44,380 --> 00:30:51,040
on the compromised endpoint over or Sox

889
00:30:46,480 --> 00:30:52,420
channel for Osito yeah again I put on I

890
00:30:51,040 --> 00:30:54,580
recorded this video it didn't give it

891
00:30:52,420 --> 00:30:56,140
the posis name to inject into so it's

892
00:30:54,580 --> 00:30:57,760
not magic you have to tell it what what

893
00:30:56,140 --> 00:30:58,170
process to inject into so use after

894
00:30:57,760 --> 00:31:00,900
touch

895
00:30:58,170 --> 00:31:02,190
a gadget and we gave the the script file

896
00:31:00,900 --> 00:31:04,020
argument as well right so we're using

897
00:31:02,190 --> 00:31:07,200
the same payload script for this demo

898
00:31:04,020 --> 00:31:08,760
and then the user on our workstation at

899
00:31:07,200 --> 00:31:10,980
some point comes along interacts with

900
00:31:08,760 --> 00:31:11,850
key paths and we start like capturing

901
00:31:10,980 --> 00:31:14,670
credentials here

902
00:31:11,850 --> 00:31:17,189
so apart from a DLL somewhere on disk on

903
00:31:14,670 --> 00:31:18,600
this workstation like cito we don't need

904
00:31:17,190 --> 00:31:20,400
anything else now like we could start

905
00:31:18,600 --> 00:31:23,129
interacting with these processes oversee

906
00:31:20,400 --> 00:31:25,410
to grabbing data from some possible

907
00:31:23,130 --> 00:31:30,240
merges or interacting with other apps

908
00:31:25,410 --> 00:31:31,800
whatever you need to do so yeah I'll

909
00:31:30,240 --> 00:31:33,720
give you the github link for this at the

910
00:31:31,800 --> 00:31:34,889
end of talk it's pretty soap-like

911
00:31:33,720 --> 00:31:36,120
straightforward to build your own

912
00:31:34,890 --> 00:31:38,580
version you don't need to use mine

913
00:31:36,120 --> 00:31:40,800
before I'd give you the examples c-sharp

914
00:31:38,580 --> 00:31:42,990
up so we can like want it in memory

915
00:31:40,800 --> 00:31:45,419
using XQ assembly and it just uses

916
00:31:42,990 --> 00:31:47,010
Windows 42 API so do DLL injection it's

917
00:31:45,420 --> 00:31:48,540
it's not complicated

918
00:31:47,010 --> 00:31:51,240
you could inject any deal all you do

919
00:31:48,540 --> 00:31:53,700
this so yeah we know how freedom via

920
00:31:51,240 --> 00:31:56,430
beacon so we can do it in memory except

921
00:31:53,700 --> 00:31:58,440
for the DLL free Lee County DLL at the

922
00:31:56,430 --> 00:31:59,250
minute is a be safe if you run the hash

923
00:31:58,440 --> 00:32:01,890
for virustotal

924
00:31:59,250 --> 00:32:03,630
it's not detected by any engines I'm

925
00:32:01,890 --> 00:32:05,430
sure if you all start using this to

926
00:32:03,630 --> 00:32:07,290
build cool malware then it will be

927
00:32:05,430 --> 00:32:08,400
pretty quickly but we can solve that

928
00:32:07,290 --> 00:32:09,690
problem at some point in the future

929
00:32:08,400 --> 00:32:10,890
right like you could modify the

930
00:32:09,690 --> 00:32:12,870
signatures of it or whatever else you

931
00:32:10,890 --> 00:32:14,130
need to do so this gives us the

932
00:32:12,870 --> 00:32:16,229
potential to use freedom and way more

933
00:32:14,130 --> 00:32:18,330
engagements now you can build your

934
00:32:16,230 --> 00:32:20,970
tooling using might you exploit scripts

935
00:32:18,330 --> 00:32:22,320
using like tooling on a host so in this

936
00:32:20,970 --> 00:32:24,030
situation you would install keep us

937
00:32:22,320 --> 00:32:25,470
locally you'd build this tooling and

938
00:32:24,030 --> 00:32:28,980
then you'd use it on an engagement by

939
00:32:25,470 --> 00:32:30,810
situ it turns out we don't actually need

940
00:32:28,980 --> 00:32:33,210
any tooling at all we still need Frida

941
00:32:30,810 --> 00:32:34,919
but COBOL strike has the ability to do

942
00:32:33,210 --> 00:32:37,200
DLL injection natively how's do like

943
00:32:34,920 --> 00:32:39,030
many of the c2 frameworks so you don't

944
00:32:37,200 --> 00:32:40,950
need to run my like hacky stolen from

945
00:32:39,030 --> 00:32:44,340
github c-sharp you can just do a

946
00:32:40,950 --> 00:32:48,060
fireball strike so this is the same demo

947
00:32:44,340 --> 00:32:50,370
setup compromise the endpoint our socket

948
00:32:48,060 --> 00:32:52,770
is burning over here and 53 all I've

949
00:32:50,370 --> 00:32:54,449
done between like stopping the pit must

950
00:32:52,770 --> 00:32:55,920
video recording this one is killing keep

951
00:32:54,450 --> 00:32:58,230
us and me launching it just to hit me to

952
00:32:55,920 --> 00:33:00,050
catch it from memory so yeah I have to

953
00:32:58,230 --> 00:33:02,340
inject it again

954
00:33:00,050 --> 00:33:04,530
so we'll do the same thing only this

955
00:33:02,340 --> 00:33:05,970
time we're going to use DLL load in

956
00:33:04,530 --> 00:33:08,280
COBOL strike so

957
00:33:05,970 --> 00:33:09,789
DLL load will take the path to a DLL and

958
00:33:08,280 --> 00:33:12,220
it says must exist

959
00:33:09,789 --> 00:33:14,109
target and just inject it into a process

960
00:33:12,220 --> 00:33:16,869
for you and it needs the peered not the

961
00:33:14,109 --> 00:33:18,369
process name so if we want to invoice or

962
00:33:16,869 --> 00:33:19,959
tunning commands on the endpoint we can

963
00:33:18,369 --> 00:33:22,738
use P a sinker ball strike which uses

964
00:33:19,960 --> 00:33:26,019
like API calls do a process listing so

965
00:33:22,739 --> 00:33:27,970
it is down here to keep us so we then

966
00:33:26,019 --> 00:33:29,440
the scores called the ll load give it

967
00:33:27,970 --> 00:33:32,080
the peer to give it the path form disk

968
00:33:29,440 --> 00:33:34,210
to the feeder gadget dll beacon will go

969
00:33:32,080 --> 00:33:36,759
and inject that dll for us into the

970
00:33:34,210 --> 00:33:38,499
keepers process and then we can do the

971
00:33:36,759 --> 00:33:41,639
same thing by epoxy chains we can sort

972
00:33:38,499 --> 00:33:45,090
of check gadget is loaded using 50 DPS I

973
00:33:41,639 --> 00:33:47,469
talk quicker than I type now that's cool

974
00:33:45,090 --> 00:33:49,359
wait for the past me to catch up we've

975
00:33:47,470 --> 00:33:52,679
currently there you can see we've got

976
00:33:49,359 --> 00:33:55,059
gadget loaded into in to keep us again

977
00:33:52,679 --> 00:33:57,489
and then we can do the same thing just

978
00:33:55,059 --> 00:33:59,529
pop the chains feeder console load our

979
00:33:57,489 --> 00:34:01,659
payload script into it and we've not

980
00:33:59,529 --> 00:34:04,299
used any code at all rather than like

981
00:34:01,659 --> 00:34:06,549
the DLL that has to be on disk

982
00:34:04,299 --> 00:34:09,549
yeah well let the video finish because

983
00:34:06,549 --> 00:34:11,469
why not we have time it's going to do

984
00:34:09,549 --> 00:34:13,030
the same thing as it did so the user

985
00:34:11,469 --> 00:34:15,520
will then come along interactive key

986
00:34:13,030 --> 00:34:18,099
pass start from pin data copying the

987
00:34:15,520 --> 00:34:22,839
user name this time we get the days

988
00:34:18,099 --> 00:34:24,960
index will treat down there cool so we

989
00:34:22,839 --> 00:34:27,759
near the end from it's almost beer time

990
00:34:24,960 --> 00:34:30,490
so we will take a quick summary and I've

991
00:34:27,760 --> 00:34:32,109
got the tools to release for you so I've

992
00:34:30,489 --> 00:34:34,388
shown you an example of what Frieda can

993
00:34:32,109 --> 00:34:35,710
do right so what I didn't want to do is

994
00:34:34,389 --> 00:34:37,480
stand here and just show you like

995
00:34:35,710 --> 00:34:38,559
payload enough to payload because it's

996
00:34:37,480 --> 00:34:40,990
not gonna be much use to you you're

997
00:34:38,559 --> 00:34:42,490
never gonna see these up to get what I

998
00:34:40,989 --> 00:34:44,500
want you to take away from this is like

999
00:34:42,489 --> 00:34:46,689
the ability to start using Frieda in

1000
00:34:44,500 --> 00:34:48,250
your own engagements you can do really

1001
00:34:46,690 --> 00:34:52,510
cool stuff with Frieda in fit climb

1002
00:34:48,250 --> 00:34:54,460
world like if you look at fuzzy sex repo

1003
00:34:52,510 --> 00:34:55,750
for fermion he's got some examples in

1004
00:34:54,460 --> 00:34:57,940
there which is far more complicated than

1005
00:34:55,750 --> 00:34:59,230
this so I have a look at those there's a

1006
00:34:57,940 --> 00:35:01,450
really good starting point for stuff you

1007
00:34:59,230 --> 00:35:02,680
might want start building off there's

1008
00:35:01,450 --> 00:35:04,230
got a couple more tools and techniques

1009
00:35:02,680 --> 00:35:07,210
to use three doing more engagements so

1010
00:35:04,230 --> 00:35:09,130
until like now I think most people were

1011
00:35:07,210 --> 00:35:10,750
sort of using this like on the seams of

1012
00:35:09,130 --> 00:35:12,880
an endpoint as the fit client and then

1013
00:35:10,750 --> 00:35:14,140
maybe sort of building a custom exit

1014
00:35:12,880 --> 00:35:16,000
I've got it on a sort of another

1015
00:35:14,140 --> 00:35:16,420
endpoint we don't need to do that

1016
00:35:16,000 --> 00:35:18,640
anymore

1017
00:35:16,420 --> 00:35:19,910
we can do it 5c to we can do about

1018
00:35:18,640 --> 00:35:22,848
dependencies

1019
00:35:19,910 --> 00:35:24,529
so yeah most up to you really there's

1020
00:35:22,849 --> 00:35:28,430
definitely scope for further work here

1021
00:35:24,530 --> 00:35:30,049
so you can inject a dll into memory

1022
00:35:28,430 --> 00:35:32,359
completely using this sort of concept of

1023
00:35:30,049 --> 00:35:34,579
reflective DLL so if you have a look at

1024
00:35:32,359 --> 00:35:37,308
this this guy's github link he explains

1025
00:35:34,579 --> 00:35:38,990
this quite nicely so I've tried to get

1026
00:35:37,309 --> 00:35:41,510
this working in time for the talk and

1027
00:35:38,990 --> 00:35:44,598
just fail for some reason so there's a

1028
00:35:41,510 --> 00:35:47,089
tool called SR di which will take a DLL

1029
00:35:44,599 --> 00:35:48,589
like a native DLL convert it to a

1030
00:35:47,089 --> 00:35:50,869
reflective DLL and then give you the

1031
00:35:48,589 --> 00:35:52,609
shell code for it and COBOL strike and

1032
00:35:50,869 --> 00:35:54,380
other frameworks support shell code

1033
00:35:52,609 --> 00:35:56,750
injection right so for I can just

1034
00:35:54,380 --> 00:35:59,480
generate this DLL shellcode inject it

1035
00:35:56,750 --> 00:36:02,180
into the process it will just work and

1036
00:35:59,480 --> 00:36:03,319
then we don't need to at all it turns

1037
00:36:02,180 --> 00:36:06,169
out it's not as straightforward as that

1038
00:36:03,319 --> 00:36:07,940
so that sort of saw like a 17 make more

1039
00:36:06,170 --> 00:36:09,079
bash shell code that beacon just appears

1040
00:36:07,940 --> 00:36:11,930
to not be able to handle it just

1041
00:36:09,079 --> 00:36:14,150
endeavor Twitter's so I built a small

1042
00:36:11,930 --> 00:36:17,058
c-sharp app which pulls up all the shell

1043
00:36:14,150 --> 00:36:19,309
code like over the wire into memory and

1044
00:36:17,059 --> 00:36:20,960
then injects it from some white from C

1045
00:36:19,309 --> 00:36:22,549
sharp so we can load that app we've

1046
00:36:20,960 --> 00:36:25,700
executed sembly and doing all the memory

1047
00:36:22,549 --> 00:36:27,529
right if you pull the DLL that just

1048
00:36:25,700 --> 00:36:29,839
launches calc and then run it through si

1049
00:36:27,529 --> 00:36:33,010
di and inject it into key pass it works

1050
00:36:29,839 --> 00:36:35,299
perfectly use or calc if you take the

1051
00:36:33,010 --> 00:36:36,710
free account at DLL and do the same

1052
00:36:35,299 --> 00:36:38,930
thing it just kills the process

1053
00:36:36,710 --> 00:36:41,180
instantly I guess it doesn't like having

1054
00:36:38,930 --> 00:36:44,180
17 make of shell code like stuffed into

1055
00:36:41,180 --> 00:36:46,160
it if we can get this working that means

1056
00:36:44,180 --> 00:36:48,109
we don't need to such disk at all for

1057
00:36:46,160 --> 00:36:51,078
this so don't need to top the URLs on

1058
00:36:48,109 --> 00:36:52,430
disk anymore we can yeah just do it all

1059
00:36:51,079 --> 00:36:54,319
from sort of an attacker machine of a

1060
00:36:52,430 --> 00:36:55,520
socks which is awesome because then

1061
00:36:54,319 --> 00:36:57,770
there's nothing there fight the blue

1062
00:36:55,520 --> 00:37:01,339
team to sort of see chopping details or

1063
00:36:57,770 --> 00:37:02,509
so far huh so yeah this is rapidly

1064
00:37:01,339 --> 00:37:04,130
approaching the end of the talk if you

1065
00:37:02,510 --> 00:37:06,410
like this kind of stuff and you want to

1066
00:37:04,130 --> 00:37:10,010
work with awesome people and me we are

1067
00:37:06,410 --> 00:37:12,259
hiring so speak to me or Tom or Adam or

1068
00:37:10,010 --> 00:37:15,049
D over there and yeah I'm gonna chat

1069
00:37:12,260 --> 00:37:15,440
about it I will put this slide back up

1070
00:37:15,049 --> 00:37:17,960
in a minute

1071
00:37:15,440 --> 00:37:20,359
take pictures these repos are made

1072
00:37:17,960 --> 00:37:21,710
public this morning so you're free to go

1073
00:37:20,359 --> 00:37:23,420
and like clone them do it if you wanted

1074
00:37:21,710 --> 00:37:25,700
them if you find books like feel free to

1075
00:37:23,420 --> 00:37:26,990
fix them if you like this sort of

1076
00:37:25,700 --> 00:37:28,919
research and want to see more it

1077
00:37:26,990 --> 00:37:30,660
normally ends up on my Twitter that's

1078
00:37:28,920 --> 00:37:34,290
quite either links to blog posts or just

1079
00:37:30,660 --> 00:37:35,850
random stuff but if anyone has any

1080
00:37:34,290 --> 00:37:37,740
questions shout them out like thank you

1081
00:37:35,850 --> 00:37:39,450
for coming to see me you have a choice

1082
00:37:37,740 --> 00:37:41,759
and talk sometime why I'm chuffed that

1083
00:37:39,450 --> 00:37:45,319
you came to see me so yeah take photos

1084
00:37:41,760 --> 00:37:45,320
of the slides questions shout out boys

1085
00:37:53,010 --> 00:37:57,700
also there are any questions or you're

1086
00:37:55,480 --> 00:37:59,099
happy any questions

1087
00:37:57,700 --> 00:38:13,629
hope it good you've had a few questions

1088
00:37:59,099 --> 00:38:15,160
got a bit of time to finish off yeah so

1089
00:38:13,630 --> 00:38:18,210
um yeah that's a good point I didn't

1090
00:38:15,160 --> 00:38:24,520
touch on so USC shelf as I was e in it

1091
00:38:18,210 --> 00:38:26,230
yeah so don will be able to come out of

1092
00:38:24,520 --> 00:38:27,730
file Meza but there's I think the

1093
00:38:26,230 --> 00:38:29,920
standard version is four five that comes

1094
00:38:27,730 --> 00:38:34,720
with Windows knows it when not to go

1095
00:38:29,920 --> 00:38:36,460
change we don't know that for now so

1096
00:38:34,720 --> 00:38:38,740
what more people are using this like

1097
00:38:36,460 --> 00:38:40,450
ghost Parker stuff um they're just

1098
00:38:38,740 --> 00:38:41,859
logging there were framework versions of

1099
00:38:40,450 --> 00:38:43,660
the minute which sort of forces it down

1100
00:38:41,859 --> 00:38:44,558
a difference or at one time okay yeah

1101
00:38:43,660 --> 00:38:47,859
that's a really good point

1102
00:38:44,559 --> 00:38:50,170
yeah use all the versions of c-sharp the

1103
00:38:47,859 --> 00:38:59,290
older you go the less likely you are to

1104
00:38:50,170 --> 00:39:00,819
run into issues anyone else know so I've

1105
00:38:59,290 --> 00:39:03,009
heard from a couple of guys on Twitter

1106
00:39:00,819 --> 00:39:04,808
who sort of I've done a couple of war

1107
00:39:03,010 --> 00:39:06,940
posts on this sort of stuff already and

1108
00:39:04,809 --> 00:39:09,369
somebody said they used Freder on an

1109
00:39:06,940 --> 00:39:11,859
engagement like on a red team over c2

1110
00:39:09,369 --> 00:39:13,359
well I got no more details on how they

1111
00:39:11,859 --> 00:39:15,640
did it I assume they've probably done

1112
00:39:13,359 --> 00:39:17,799
something like this there's not many

1113
00:39:15,640 --> 00:39:19,598
ways you can interact like go and have a

1114
00:39:17,799 --> 00:39:21,490
look at what's actually built before

1115
00:39:19,599 --> 00:39:24,490
either there's limited sort of things

1116
00:39:21,490 --> 00:39:27,220
you can use I assume they were using

1117
00:39:24,490 --> 00:39:29,828
sort of this media catch it over c2 I've

1118
00:39:27,220 --> 00:39:31,540
not seen anything if anyone has seen it

1119
00:39:29,829 --> 00:39:33,700
like I'm wait yeah it'd be awesome to

1120
00:39:31,540 --> 00:39:35,029
sort of the chat with those guys but as

1121
00:39:33,700 --> 00:39:43,560
far as I know

1122
00:39:35,030 --> 00:39:43,560
[Music]

1123
00:39:51,320 --> 00:39:57,040
thank you I appreciate it so much

1124
00:39:53,910 --> 00:39:57,040
[Music]

