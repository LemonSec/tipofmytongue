1
00:00:03,530 --> 00:00:10,590
okay hi thank you for coming to see my

2
00:00:07,859 --> 00:00:15,270
talk metadata piggybacking a look into

3
00:00:10,590 --> 00:00:19,080
Open Graph abuse so Who am I this is my

4
00:00:15,270 --> 00:00:21,240
first talk a conference I'm soon to be a

5
00:00:19,080 --> 00:00:24,150
genius security consultant at MCC group

6
00:00:21,240 --> 00:00:26,220
I start on Monday so it's an exciting

7
00:00:24,150 --> 00:00:28,679
time and the parts have done a lot with

8
00:00:26,220 --> 00:00:31,439
the cyber security challenge part of the

9
00:00:28,679 --> 00:00:37,830
team UK and we're completing in

10
00:00:31,439 --> 00:00:41,400
Bucharest in October so what is Open

11
00:00:37,830 --> 00:00:43,769
Graph so the definition the Open Graph

12
00:00:41,400 --> 00:00:45,690
protocol is simply a method of including

13
00:00:43,770 --> 00:00:47,580
meta information in a webpage to allow

14
00:00:45,690 --> 00:00:49,530
Facebook to accurately represent the

15
00:00:47,580 --> 00:00:51,720
pages content when it is linked to in

16
00:00:49,530 --> 00:00:54,510
Facebook essentially if you've ever sent

17
00:00:51,720 --> 00:00:56,489
a link on a social media platform and it

18
00:00:54,510 --> 00:00:59,160
kind of turns that link into more of a

19
00:00:56,490 --> 00:01:01,530
sort of pretty kind of object that you

20
00:00:59,160 --> 00:01:05,789
can look at this is the Open Graph

21
00:01:01,530 --> 00:01:09,030
protocol so it's history it was first

22
00:01:05,789 --> 00:01:13,979
introduced in 2010 it was created by

23
00:01:09,030 --> 00:01:15,869
Facebook for Facebook to do this but now

24
00:01:13,979 --> 00:01:19,920
it's widely used by most social media

25
00:01:15,869 --> 00:01:22,319
outlets so Twitter discs are like any

26
00:01:19,920 --> 00:01:24,450
sort of application where you can send a

27
00:01:22,319 --> 00:01:26,100
link will most likely used Open Graph

28
00:01:24,450 --> 00:01:27,929
some applications have developed their

29
00:01:26,100 --> 00:01:30,298
own versions for example you can use

30
00:01:27,929 --> 00:01:33,090
Twitter cards and this will create these

31
00:01:30,299 --> 00:01:37,740
kind of objects from us specifically for

32
00:01:33,090 --> 00:01:39,600
certain applications so its purpose it

33
00:01:37,740 --> 00:01:42,479
allows a social media platform to create

34
00:01:39,600 --> 00:01:44,189
an aesthetically pleasing kind of object

35
00:01:42,479 --> 00:01:47,280
so instead of sending a raw hyperlink

36
00:01:44,189 --> 00:01:48,689
you can send something that kind you can

37
00:01:47,280 --> 00:01:50,399
look at it looks a bit better on the

38
00:01:48,689 --> 00:01:52,408
application but it also gives you an

39
00:01:50,399 --> 00:01:54,359
insight into the information that the

40
00:01:52,409 --> 00:01:57,240
page you'll visit sort of the

41
00:01:54,359 --> 00:02:01,288
information that's on it and sort of

42
00:01:57,240 --> 00:02:05,009
what content might be displayed so how

43
00:02:01,289 --> 00:02:07,619
it works so in your HTML you will have

44
00:02:05,009 --> 00:02:10,439
your head tags within these head tags

45
00:02:07,619 --> 00:02:12,910
you can put these metadata tags and if

46
00:02:10,439 --> 00:02:15,760
you set the property to one of the

47
00:02:12,910 --> 00:02:18,070
Graff property tax which is OG title G

48
00:02:15,760 --> 00:02:20,440
URL OG description there are a few more

49
00:02:18,070 --> 00:02:22,299
which you can use to begin to customize

50
00:02:20,440 --> 00:02:25,240
these and then what happens is you have

51
00:02:22,300 --> 00:02:27,310
a parser when you post a link on the

52
00:02:25,240 --> 00:02:29,590
social media platform the pass will

53
00:02:27,310 --> 00:02:31,480
crawl your page look for these meta

54
00:02:29,590 --> 00:02:33,550
property tags and then it will create

55
00:02:31,480 --> 00:02:37,329
the object based off of these tags that

56
00:02:33,550 --> 00:02:39,640
are there so here you can see so this is

57
00:02:37,330 --> 00:02:42,310
your HTML and then within that you have

58
00:02:39,640 --> 00:02:44,950
the meta property tags so you've got all

59
00:02:42,310 --> 00:02:47,830
of these which are all tax which can be

60
00:02:44,950 --> 00:02:50,350
used in a metadata object in an open

61
00:02:47,830 --> 00:02:52,990
graph object an interesting on this

62
00:02:50,350 --> 00:02:55,859
particular example you can also see the

63
00:02:52,990 --> 00:02:59,520
Twitter cards which I mentioned as well

64
00:02:55,860 --> 00:03:02,770
and that's how it looks within the HTML

65
00:02:59,520 --> 00:03:05,380
so how it looks so on Facebook front for

66
00:03:02,770 --> 00:03:07,690
instance once you post all of these Open

67
00:03:05,380 --> 00:03:09,130
Graph objects or once you post a link it

68
00:03:07,690 --> 00:03:12,100
will come up like this so this is B size

69
00:03:09,130 --> 00:03:14,380
Manchester so you have from the metadata

70
00:03:12,100 --> 00:03:16,239
attacked you have G image which is the

71
00:03:14,380 --> 00:03:18,549
big image that you can see you then have

72
00:03:16,240 --> 00:03:20,650
a title a description and you can also

73
00:03:18,550 --> 00:03:22,990
customize it in a few other ways as well

74
00:03:20,650 --> 00:03:25,770
but this is the sort of basic kind of

75
00:03:22,990 --> 00:03:28,840
Open Graph object and how it worked so

76
00:03:25,770 --> 00:03:31,120
the passes so different applications

77
00:03:28,840 --> 00:03:34,000
will have different passes so when you

78
00:03:31,120 --> 00:03:37,120
post a link will crawl your website and

79
00:03:34,000 --> 00:03:38,410
it will like it will find the tags which

80
00:03:37,120 --> 00:03:41,260
is going to use for the Open Graph

81
00:03:38,410 --> 00:03:43,750
object so here Facebook you can

82
00:03:41,260 --> 00:03:46,350
determine these using the user agent so

83
00:03:43,750 --> 00:03:48,640
Facebook will have Facebook external hit

84
00:03:46,350 --> 00:03:51,010
Twitter is Twitter bot and then this

85
00:03:48,640 --> 00:03:52,660
guard is this fell off and the different

86
00:03:51,010 --> 00:03:54,970
applications will use different bots

87
00:03:52,660 --> 00:03:56,890
so what you can begin to do as well is

88
00:03:54,970 --> 00:04:00,250
if you have a website and you want to

89
00:03:56,890 --> 00:04:02,859
see who's speaking about your website so

90
00:04:00,250 --> 00:04:06,190
you can begin to sort of footprint who

91
00:04:02,860 --> 00:04:08,650
which sites your website has been posted

92
00:04:06,190 --> 00:04:12,459
on based on the user agent of the bots

93
00:04:08,650 --> 00:04:13,989
that will then crawl your website so

94
00:04:12,459 --> 00:04:16,329
abusing the passes so we want to look

95
00:04:13,989 --> 00:04:21,160
into abusing this and how we can sort of

96
00:04:16,329 --> 00:04:24,099
control these objects so we've got these

97
00:04:21,160 --> 00:04:26,140
traditional spoof and methods so since

98
00:04:24,100 --> 00:04:26,540
these objects are basically created from

99
00:04:26,140 --> 00:04:28,039
the

100
00:04:26,540 --> 00:04:29,870
jemelle code on a website there's

101
00:04:28,040 --> 00:04:31,940
nothing stopping you basically ripping

102
00:04:29,870 --> 00:04:34,040
the tags from one website and putting

103
00:04:31,940 --> 00:04:37,430
them on your own and then creating your

104
00:04:34,040 --> 00:04:40,700
own object of that particular website so

105
00:04:37,430 --> 00:04:42,710
first for example here we have B size

106
00:04:40,700 --> 00:04:45,920
Manchester and then the metadata

107
00:04:42,710 --> 00:04:47,780
property tags that are there and then I

108
00:04:45,920 --> 00:04:50,540
put them on my own website reverse

109
00:04:47,780 --> 00:04:52,280
textile info / spoofed PHP and you can

110
00:04:50,540 --> 00:04:55,550
see that the object that's been created

111
00:04:52,280 --> 00:04:59,690
is pretty much the same however you

112
00:04:55,550 --> 00:05:03,950
apart from this sort of URL the objects

113
00:04:59,690 --> 00:05:08,360
the same so this introduced the URL

114
00:05:03,950 --> 00:05:10,580
visibility so what is stopping you from

115
00:05:08,360 --> 00:05:13,670
just basically making an object look

116
00:05:10,580 --> 00:05:14,810
exactly like sort of one website and

117
00:05:13,670 --> 00:05:19,730
then when you click it you go to the

118
00:05:14,810 --> 00:05:22,100
other website is this URL visibility so

119
00:05:19,730 --> 00:05:24,110
when you merely just rip the metadata

120
00:05:22,100 --> 00:05:26,000
from one site and put it on your own you

121
00:05:24,110 --> 00:05:30,200
have this which is stopping this kind of

122
00:05:26,000 --> 00:05:35,360
spoofing and it's this string of text

123
00:05:30,200 --> 00:05:37,460
that kind of stops that so introducing

124
00:05:35,360 --> 00:05:40,640
metadata piggybacking so what if we can

125
00:05:37,460 --> 00:05:43,880
actually control that URL visibility in

126
00:05:40,640 --> 00:05:45,710
order to so that we can create a Open

127
00:05:43,880 --> 00:05:47,690
Graph object which looks like exactly

128
00:05:45,710 --> 00:05:51,500
like one website but when you flick it

129
00:05:47,690 --> 00:05:54,440
or redirect elsewhere the idea of

130
00:05:51,500 --> 00:05:56,420
piggybacking is that I go from when you

131
00:05:54,440 --> 00:05:59,360
do Wi-Fi piggyback in this is kinda

132
00:05:56,420 --> 00:06:00,860
using someone else's Wi-Fi you're not

133
00:05:59,360 --> 00:06:03,980
necessarily stealing anything from

134
00:06:00,860 --> 00:06:05,630
anyone else you're just using it and

135
00:06:03,980 --> 00:06:07,550
that's why I've sort of used the term

136
00:06:05,630 --> 00:06:08,719
piggybacking because with this we're

137
00:06:07,550 --> 00:06:10,340
going to be using someone else's

138
00:06:08,720 --> 00:06:12,320
metadata tags but we're not actually

139
00:06:10,340 --> 00:06:14,690
going to be taking them and putting them

140
00:06:12,320 --> 00:06:20,120
anywhere else it's just a case of

141
00:06:14,690 --> 00:06:22,130
redirecting to them so just a quick look

142
00:06:20,120 --> 00:06:26,090
at a few past past issues our

143
00:06:22,130 --> 00:06:27,170
functionality often these passes will

144
00:06:26,090 --> 00:06:30,799
follow redirects

145
00:06:27,170 --> 00:06:33,440
so this is probably for the reason that

146
00:06:30,800 --> 00:06:36,890
if you post a link to a site over HTTP

147
00:06:33,440 --> 00:06:38,630
it most likely redirects to HTTPS so the

148
00:06:36,890 --> 00:06:39,889
path will follow that redirect because

149
00:06:38,630 --> 00:06:42,259
it wants to pass the

150
00:06:39,889 --> 00:06:46,129
our code and not just a page which has

151
00:06:42,259 --> 00:06:47,800
the 301 redirect on but then what it

152
00:06:46,129 --> 00:06:51,770
will do is it will set the URL

153
00:06:47,800 --> 00:06:53,479
visibility in the object to the place

154
00:06:51,770 --> 00:06:55,419
that it's finally reached so if it

155
00:06:53,479 --> 00:06:59,029
follows a redirect chain it will then

156
00:06:55,419 --> 00:07:02,090
put the URL that it reaches at the end

157
00:06:59,029 --> 00:07:04,639
of the redirect in the object which is

158
00:07:02,090 --> 00:07:06,679
fine however if we combine this with the

159
00:07:04,639 --> 00:07:08,060
fact that Open Graph objects are often

160
00:07:06,680 --> 00:07:10,370
cached in applications

161
00:07:08,060 --> 00:07:14,449
so to avoid overworking sort of these

162
00:07:10,370 --> 00:07:16,639
processes the web application will cache

163
00:07:14,449 --> 00:07:19,400
the object so that if one person sends a

164
00:07:16,639 --> 00:07:21,289
link to Twitter for example or a Twitter

165
00:07:19,400 --> 00:07:23,239
post and then another person sends a

166
00:07:21,289 --> 00:07:24,680
link to the same Twitter post and this

167
00:07:23,240 --> 00:07:27,229
you know and lots of people are talking

168
00:07:24,680 --> 00:07:29,300
about this particular Twitter post then

169
00:07:27,229 --> 00:07:32,839
you're not going to have a bot which

170
00:07:29,300 --> 00:07:34,310
keeps in Twitter you've done it once and

171
00:07:32,839 --> 00:07:37,219
then it will reach into the cache for

172
00:07:34,310 --> 00:07:38,810
this object however when you combine

173
00:07:37,219 --> 00:07:43,248
these two things together it creates a

174
00:07:38,810 --> 00:07:44,689
kind of issue so what it allows us to do

175
00:07:43,249 --> 00:07:48,349
is it allows us to create these

176
00:07:44,689 --> 00:07:49,819
malicious objects so here you've got an

177
00:07:48,349 --> 00:07:51,830
Open Graph objects of be sized

178
00:07:49,819 --> 00:07:54,259
Manchester however essentially once you

179
00:07:51,830 --> 00:07:55,580
click it you're capable of changing

180
00:07:54,259 --> 00:08:00,830
where it goes to so that it will

181
00:07:55,580 --> 00:08:03,469
redirect to a malicious site so the

182
00:08:00,830 --> 00:08:06,919
process of doing this is fairly easy and

183
00:08:03,469 --> 00:08:09,770
straightforward first we create a web

184
00:08:06,919 --> 00:08:12,109
page which redirects to the site that

185
00:08:09,770 --> 00:08:15,349
target site so if we're trying to mimic

186
00:08:12,110 --> 00:08:18,020
for example Facebook I just redirect

187
00:08:15,349 --> 00:08:19,759
Facebook on my website so then when the

188
00:08:18,020 --> 00:08:22,878
bot crawls my website it follows the

189
00:08:19,759 --> 00:08:26,330
redirect then passes the HTML the tags

190
00:08:22,879 --> 00:08:28,339
for Facebook with them so we then post a

191
00:08:26,330 --> 00:08:30,229
link onto the social media platform and

192
00:08:28,339 --> 00:08:32,719
the bot will call this and it will

193
00:08:30,229 --> 00:08:34,338
create the Open Graph object and then

194
00:08:32,719 --> 00:08:36,289
all we need to do is simply change the

195
00:08:34,339 --> 00:08:39,740
redirect so now instead of redirect into

196
00:08:36,289 --> 00:08:42,679
Facebook it redirects elsewhere so that

197
00:08:39,740 --> 00:08:45,290
the because the Open Graph object is

198
00:08:42,679 --> 00:08:47,930
cached when a user then sees that Open

199
00:08:45,290 --> 00:08:50,930
Graph object they're gonna see that it

200
00:08:47,930 --> 00:08:54,370
looks like it redirects to Facebook but

201
00:08:50,930 --> 00:08:54,370
actually it'll redirect elsewhere

202
00:08:54,540 --> 00:08:59,920
so this is what the final result looks

203
00:08:57,190 --> 00:09:02,829
like so here for example example I've

204
00:08:59,920 --> 00:09:04,810
got a link to a YouTube video and when

205
00:09:02,829 --> 00:09:06,880
you click the information it comes up so

206
00:09:04,810 --> 00:09:09,729
everything about this particular open

207
00:09:06,880 --> 00:09:12,250
graph object appears to be redirect into

208
00:09:09,730 --> 00:09:15,060
YouTube and you can see that the URL

209
00:09:12,250 --> 00:09:18,339
visibility as well as in youtube.com

210
00:09:15,060 --> 00:09:20,979
except once you actually visit the link

211
00:09:18,339 --> 00:09:25,240
it goes elsewhere and you've been

212
00:09:20,980 --> 00:09:28,300
heartened so this works cross-platform

213
00:09:25,240 --> 00:09:29,950
as well the open graph object is the

214
00:09:28,300 --> 00:09:31,899
open graph protocol has been designed to

215
00:09:29,950 --> 00:09:34,120
work cross-platform and that means this

216
00:09:31,899 --> 00:09:36,070
attack also works however on certain

217
00:09:34,120 --> 00:09:37,690
mobile applications sometimes if you

218
00:09:36,070 --> 00:09:41,290
have a YouTube video it will open it in

219
00:09:37,690 --> 00:09:43,709
the YouTube app other times it will work

220
00:09:41,290 --> 00:09:48,279
as as I've just demonstrated

221
00:09:43,709 --> 00:09:50,849
so gaining trust so the problem with

222
00:09:48,279 --> 00:09:56,290
this is that these open graph objects

223
00:09:50,850 --> 00:09:58,060
generated server-side so as a user you

224
00:09:56,290 --> 00:09:59,709
know that that objects been generated by

225
00:09:58,060 --> 00:10:01,989
the application and therefore you're

226
00:09:59,709 --> 00:10:04,180
more likely to trust that link and Trust

227
00:10:01,990 --> 00:10:07,360
where it's saying the link is gonna go

228
00:10:04,180 --> 00:10:09,729
to and because of the URL visibility

229
00:10:07,360 --> 00:10:11,740
which comes up and you're like okay

230
00:10:09,730 --> 00:10:13,269
that's the final destination it kind of

231
00:10:11,740 --> 00:10:16,390
legitimizes the link that you're

232
00:10:13,269 --> 00:10:18,670
visiting and if we can control that URL

233
00:10:16,390 --> 00:10:20,500
visibility like I've demonstrated then

234
00:10:18,670 --> 00:10:22,750
it's kind of difficult because the user

235
00:10:20,500 --> 00:10:24,250
now has the trust of the application and

236
00:10:22,750 --> 00:10:26,110
where it's going and then if you take

237
00:10:24,250 --> 00:10:28,120
them elsewhere they're less likely to

238
00:10:26,110 --> 00:10:30,190
check that they're actually being taken

239
00:10:28,120 --> 00:10:34,300
to a website which is the web site in

240
00:10:30,190 --> 00:10:36,760
the open graph object so yeah so why is

241
00:10:34,300 --> 00:10:39,699
this an issue so if your user implicitly

242
00:10:36,760 --> 00:10:41,649
trust to link they're visiting then you

243
00:10:39,699 --> 00:10:44,859
can deliver malicious content and

244
00:10:41,649 --> 00:10:46,089
phishing you can also use the objects as

245
00:10:44,860 --> 00:10:49,630
an aid to the engineering process

246
00:10:46,089 --> 00:10:52,839
because it looks exactly how your so if

247
00:10:49,630 --> 00:10:55,269
you are tagged in Facebook front for

248
00:10:52,839 --> 00:10:58,269
instance in a phishing campaign it looks

249
00:10:55,269 --> 00:11:01,089
like that link that is a Facebook link

250
00:10:58,269 --> 00:11:02,890
is a link to Facebook so then you can

251
00:11:01,089 --> 00:11:05,050
use that in your social engineering and

252
00:11:02,890 --> 00:11:06,730
you can also use this to bypass certain

253
00:11:05,050 --> 00:11:10,089
controls so you've got link feel

254
00:11:06,730 --> 00:11:11,260
for fishing and then using this Open

255
00:11:10,090 --> 00:11:13,060
Graph redirect because you'll not

256
00:11:11,260 --> 00:11:16,390
initially sending the link to the

257
00:11:13,060 --> 00:11:18,670
fishing site straightaway but instead it

258
00:11:16,390 --> 00:11:20,560
caches it and then you change the

259
00:11:18,670 --> 00:11:24,490
redirects then redirect to the fishing

260
00:11:20,560 --> 00:11:28,449
site you can bypass link filters of this

261
00:11:24,490 --> 00:11:30,040
sort okay so who is affected so if we

262
00:11:28,450 --> 00:11:33,400
just have a look at which applications

263
00:11:30,040 --> 00:11:34,839
are affected by this issue and this sort

264
00:11:33,400 --> 00:11:36,880
of brings up a few different ways that

265
00:11:34,840 --> 00:11:39,340
the applications are dealing with it

266
00:11:36,880 --> 00:11:41,290
however it appears that with this sort

267
00:11:39,340 --> 00:11:44,590
of quite minor thing a lot of

268
00:11:41,290 --> 00:11:48,040
applications seem to be to be vulnerable

269
00:11:44,590 --> 00:11:51,280
so for discard so discard yet it creates

270
00:11:48,040 --> 00:11:53,500
an open graph object however with this

271
00:11:51,280 --> 00:11:56,110
card there isn't a URL visible in the

272
00:11:53,500 --> 00:11:58,090
open graph object so when you send the

273
00:11:56,110 --> 00:11:59,620
link it creates you create an open graph

274
00:11:58,090 --> 00:12:02,920
objects but within the object you have

275
00:11:59,620 --> 00:12:05,830
no URL visibility however with this card

276
00:12:02,920 --> 00:12:09,189
you can't send only the open graph

277
00:12:05,830 --> 00:12:11,080
object you have to send the hyperlink as

278
00:12:09,190 --> 00:12:12,880
well as the open graph object which

279
00:12:11,080 --> 00:12:14,320
means that the user can always see the

280
00:12:12,880 --> 00:12:18,580
exact link that they are actually

281
00:12:14,320 --> 00:12:22,150
visiting Facebook Facebook you can send

282
00:12:18,580 --> 00:12:24,490
an open graph object the URL visibility

283
00:12:22,150 --> 00:12:27,040
is of the final destination after a

284
00:12:24,490 --> 00:12:29,380
redirect which means you can do the sort

285
00:12:27,040 --> 00:12:31,660
of you can change where it looks like

286
00:12:29,380 --> 00:12:35,920
it's going to and then it also sends

287
00:12:31,660 --> 00:12:38,920
only the open graph object slack that's

288
00:12:35,920 --> 00:12:39,670
interesting because you can send an open

289
00:12:38,920 --> 00:12:42,579
graph object

290
00:12:39,670 --> 00:12:43,680
it shows the URL visibility after the

291
00:12:42,580 --> 00:12:47,560
redirect

292
00:12:43,680 --> 00:12:49,719
however with slack you have to send the

293
00:12:47,560 --> 00:12:51,670
hyperlink the message the link that it's

294
00:12:49,720 --> 00:12:53,830
going to initially however if you just

295
00:12:51,670 --> 00:12:55,569
go back and edit the message then you no

296
00:12:53,830 --> 00:12:58,030
longer need to send the message and the

297
00:12:55,570 --> 00:13:01,180
open graph object will remain on the

298
00:12:58,030 --> 00:13:02,770
platform and Twitter and LinkedIn a

299
00:13:01,180 --> 00:13:04,959
similar to Facebook in the sense that

300
00:13:02,770 --> 00:13:08,829
you can boast you can send an open graph

301
00:13:04,960 --> 00:13:11,500
object you have the URL visibility and

302
00:13:08,830 --> 00:13:15,160
you can also send only an open graph

303
00:13:11,500 --> 00:13:16,930
object so just a few examples

304
00:13:15,160 --> 00:13:18,550
you've got discards so here you can see

305
00:13:16,930 --> 00:13:19,279
that the top one is the legitimate link

306
00:13:18,550 --> 00:13:21,769
to these lunch

307
00:13:19,279 --> 00:13:24,170
and the bottom one is my evil dot php'

308
00:13:21,769 --> 00:13:26,329
and you can see that the Open Graph

309
00:13:24,170 --> 00:13:28,519
object that's created is exactly the

310
00:13:26,329 --> 00:13:31,008
same however you have to send the

311
00:13:28,519 --> 00:13:35,240
hyperlink alongside the Open Graph

312
00:13:31,009 --> 00:13:36,949
object Facebook again here there's no

313
00:13:35,240 --> 00:13:38,930
difference between the two Open Graph

314
00:13:36,949 --> 00:13:42,248
objects however one of them redirects to

315
00:13:38,930 --> 00:13:45,378
a malicious page and the other doesn't

316
00:13:42,249 --> 00:13:47,689
slack here's the example of snac so on

317
00:13:45,379 --> 00:13:49,490
the left you have the original link to

318
00:13:47,689 --> 00:13:51,829
be size Manchester and then on the right

319
00:13:49,490 --> 00:13:54,559
on the top you have the original message

320
00:13:51,829 --> 00:13:58,099
that you send and you have to send the

321
00:13:54,559 --> 00:14:00,439
hyperlink alongside it however then if

322
00:13:58,100 --> 00:14:03,949
you just edit the message you no longer

323
00:14:00,439 --> 00:14:05,469
have the hyperlink and the you are at

324
00:14:03,949 --> 00:14:08,269
the Open Graph object has the URL

325
00:14:05,470 --> 00:14:12,319
visibility of B size Manchester yet it

326
00:14:08,269 --> 00:14:13,879
redirects elsewhere again Twitter

327
00:14:12,319 --> 00:14:17,120
similar to Facebook the Open Graph

328
00:14:13,879 --> 00:14:19,490
objects are exactly the same and finally

329
00:14:17,120 --> 00:14:20,569
linked in the Open Graph objects again

330
00:14:19,490 --> 00:14:22,579
are the same here

331
00:14:20,569 --> 00:14:24,139
I thought I put this in because it threw

332
00:14:22,579 --> 00:14:26,029
me off when I was doing this and

333
00:14:24,139 --> 00:14:29,089
creating these Open Graph objects when I

334
00:14:26,029 --> 00:14:31,069
first posted the be size Manchester link

335
00:14:29,089 --> 00:14:34,759
it came up with the Open Graph object

336
00:14:31,069 --> 00:14:36,319
for B size Manchester 2017 which was

337
00:14:34,759 --> 00:14:39,050
interesting I just thought I'd use it as

338
00:14:36,319 --> 00:14:41,599
a demonstration of the caching so up

339
00:14:39,050 --> 00:14:43,550
until that point if you posted a link to

340
00:14:41,600 --> 00:14:46,040
the B size Manchester page it would

341
00:14:43,550 --> 00:14:49,279
always have come up with that particular

342
00:14:46,040 --> 00:14:51,319
object even though the actual content

343
00:14:49,279 --> 00:14:55,939
and the Open Graph object that should

344
00:14:51,319 --> 00:14:57,860
have been created was this one so the

345
00:14:55,939 --> 00:14:59,689
impact it's often the impact of this

346
00:14:57,860 --> 00:15:02,209
doesn't necessarily affect the vendor

347
00:14:59,689 --> 00:15:05,569
themselves but it's the sort of their

348
00:15:02,209 --> 00:15:10,069
users data that's at risk so if they're

349
00:15:05,569 --> 00:15:12,679
sort of if it's that their users and are

350
00:15:10,069 --> 00:15:15,110
being attacked and it's their like email

351
00:15:12,679 --> 00:15:17,029
that an attacker is trying to get then

352
00:15:15,110 --> 00:15:19,279
it's actually the vendors application

353
00:15:17,029 --> 00:15:20,990
sort of delivery delivery method and

354
00:15:19,279 --> 00:15:22,759
because it creates these Open Graph

355
00:15:20,990 --> 00:15:25,790
objects and you control the URL

356
00:15:22,759 --> 00:15:29,209
visibility they can gain trust quite

357
00:15:25,790 --> 00:15:32,939
easily however if it's being used to

358
00:15:29,209 --> 00:15:36,489
bypass link filters this is when it

359
00:15:32,940 --> 00:15:37,960
so I'll go through a quick use case so

360
00:15:36,490 --> 00:15:39,640
the technique would most likely be used

361
00:15:37,960 --> 00:15:41,740
to deliver a phishing campaign however

362
00:15:39,640 --> 00:15:45,370
it can also be used to sort of bypass

363
00:15:41,740 --> 00:15:48,640
link filters other as I've said so me

364
00:15:45,370 --> 00:15:51,370
wrong-o 98 this is a twitter account who

365
00:15:48,640 --> 00:15:54,839
absolutely loves the Guardian all down

366
00:15:51,370 --> 00:15:58,630
their Twitter feed links to the Guardian

367
00:15:54,839 --> 00:16:00,610
and if we take one so this is are you

368
00:15:58,630 --> 00:16:01,120
enjoying your city break the Guardian

369
00:16:00,610 --> 00:16:02,980
com

370
00:16:01,120 --> 00:16:04,720
if we look at the redirect chain for

371
00:16:02,980 --> 00:16:07,150
this you can see that it goes through

372
00:16:04,720 --> 00:16:10,720
and sort of Twitter's URL shortening to

373
00:16:07,150 --> 00:16:12,339
rebrand ly to another so it's a

374
00:16:10,720 --> 00:16:14,110
shortened link and then finally to

375
00:16:12,339 --> 00:16:16,270
Bissell Fenian blah blah blah blah which

376
00:16:14,110 --> 00:16:17,860
certainly isn't the Guardian and what

377
00:16:16,270 --> 00:16:20,829
they've done here is they've used the

378
00:16:17,860 --> 00:16:25,270
service rebrand ly to set a redirect

379
00:16:20,830 --> 00:16:27,190
first to the Guardian site and then post

380
00:16:25,270 --> 00:16:30,220
the link on Twitter and then afterwards

381
00:16:27,190 --> 00:16:32,440
they've then changed the redirect so

382
00:16:30,220 --> 00:16:35,680
that it now redirects to this link

383
00:16:32,440 --> 00:16:36,910
instead and rebrand now why is a service

384
00:16:35,680 --> 00:16:38,920
that basically allows you to shorten

385
00:16:36,910 --> 00:16:43,480
URLs but then you can go in and change

386
00:16:38,920 --> 00:16:45,670
where the shortened URL redirects to who

387
00:16:43,480 --> 00:16:50,920
wants to see what blissful Fenian

388
00:16:45,670 --> 00:16:55,240
actually is so this is blissful Fenian

389
00:16:50,920 --> 00:17:00,339
actually is so certainly not are you

390
00:16:55,240 --> 00:17:01,780
enjoying your city break my wife says so

391
00:17:00,339 --> 00:17:03,310
I'll just quickly touch on the industry

392
00:17:01,780 --> 00:17:06,339
response I reported this to both

393
00:17:03,310 --> 00:17:07,480
Facebook and Twitter and both of them

394
00:17:06,339 --> 00:17:10,869
have sort of said it's not really

395
00:17:07,480 --> 00:17:13,959
critical enough to fix but my argument

396
00:17:10,869 --> 00:17:15,819
is that it's not necessarily affecting

397
00:17:13,959 --> 00:17:17,620
you but your users data is at risk

398
00:17:15,819 --> 00:17:19,438
because the majority of people would see

399
00:17:17,619 --> 00:17:22,329
one of these Open Graph objects and

400
00:17:19,439 --> 00:17:24,160
sincerely trust that it's going to

401
00:17:22,329 --> 00:17:29,260
redirect them and take them to where the

402
00:17:24,160 --> 00:17:31,360
URL visibility says so yes so some key

403
00:17:29,260 --> 00:17:33,100
takeaways so when it's so easy to create

404
00:17:31,360 --> 00:17:35,709
these malicious objects we need to be

405
00:17:33,100 --> 00:17:38,889
sort of have an understanding that just

406
00:17:35,710 --> 00:17:40,390
because it's created server-side it's

407
00:17:38,890 --> 00:17:42,520
not necessarily going to take this

408
00:17:40,390 --> 00:17:43,710
exactly where we think it's gonna take

409
00:17:42,520 --> 00:17:45,600
us

410
00:17:43,710 --> 00:17:48,540
and then the impact the impact of this

411
00:17:45,600 --> 00:17:51,659
isn't necessarily the platform which has

412
00:17:48,540 --> 00:17:54,210
the issue because if they're using that

413
00:17:51,660 --> 00:17:56,700
platform as a method of delivery then

414
00:17:54,210 --> 00:17:58,860
it's kind of everyone's issue and the

415
00:17:56,700 --> 00:17:59,940
trust we have on these objects is quite

416
00:17:58,860 --> 00:18:02,280
there's quite a lot

417
00:17:59,940 --> 00:18:05,760
and finally this technique is being used

418
00:18:02,280 --> 00:18:07,740
in the world and given that the trust of

419
00:18:05,760 --> 00:18:09,780
the user has on the Open Graph objects

420
00:18:07,740 --> 00:18:12,180
if it was to be used in a phishing

421
00:18:09,780 --> 00:18:14,910
campaign I'd expect it to be kind of

422
00:18:12,180 --> 00:18:18,240
extremely would be very good very

423
00:18:14,910 --> 00:18:20,940
effective so I just want to say a few

424
00:18:18,240 --> 00:18:23,450
credits thank you to you and who let me

425
00:18:20,940 --> 00:18:26,880
basically spam him with tons of messages

426
00:18:23,450 --> 00:18:29,730
trying this technique out and also a guy

427
00:18:26,880 --> 00:18:31,590
dude I'm a wizard there's a zero fox

428
00:18:29,730 --> 00:18:33,960
blog post about the Open Graph protocol

429
00:18:31,590 --> 00:18:36,959
and abusing it and I did this research

430
00:18:33,960 --> 00:18:38,820
sort of quite a while ago and then came

431
00:18:36,960 --> 00:18:40,680
across this blog post read it and was

432
00:18:38,820 --> 00:18:42,000
like oh actually maybe I should look

433
00:18:40,680 --> 00:18:44,340
into it a little bit man that's why I'm

434
00:18:42,000 --> 00:18:45,870
giving this presentation so definitely

435
00:18:44,340 --> 00:18:49,740
go and check out that blog post if

436
00:18:45,870 --> 00:18:52,590
you're interested and thank you this my

437
00:18:49,740 --> 00:18:55,440
twitter tag cupcake ninja if you want to

438
00:18:52,590 --> 00:18:57,179
add me on Twitter but otherwise yeah

439
00:18:55,440 --> 00:19:00,990
thank you and if there's any questions

440
00:18:57,180 --> 00:19:08,300
I'll answer them the best I can

441
00:19:00,990 --> 00:19:11,050
[Applause]

442
00:19:08,300 --> 00:19:15,530
yes done for the redirect stuff well it

443
00:19:11,050 --> 00:19:17,750
only like well the partially follow

444
00:19:15,530 --> 00:19:20,780
resurrect evidence I've got 301 moved

445
00:19:17,750 --> 00:19:23,300
permanently on what idea to like create

446
00:19:20,780 --> 00:19:25,550
by something scrapped on the initial

447
00:19:23,300 --> 00:19:27,669
redirect to only redirect like I said

448
00:19:25,550 --> 00:19:29,659
use your agent then instead of like gum

449
00:19:27,670 --> 00:19:33,380
setting it up with lieutenant age

450
00:19:29,660 --> 00:19:35,180
waiting for the parse it and then James

451
00:19:33,380 --> 00:19:36,890
you could just set it up from the start

452
00:19:35,180 --> 00:19:39,140
you die right here just redirect it's

453
00:19:36,890 --> 00:19:41,600
like these user uses something new would

454
00:19:39,140 --> 00:19:43,580
be launchers and send the other moments

455
00:19:41,600 --> 00:19:45,620
to the action that's just one like

456
00:19:43,580 --> 00:19:48,439
without marker without just policy

457
00:19:45,620 --> 00:19:50,600
initially I mean so the question is can

458
00:19:48,440 --> 00:19:53,720
you solve filter out based on the user

459
00:19:50,600 --> 00:19:56,959
agent and redirect given a certain user

460
00:19:53,720 --> 00:19:58,910
agent instead of just doing it for all

461
00:19:56,960 --> 00:20:00,920
users yeah absolutely so if those

462
00:19:58,910 --> 00:20:04,190
different BOTS have the user agents and

463
00:20:00,920 --> 00:20:05,960
on your server side you can then filter

464
00:20:04,190 --> 00:20:08,720
out based on which user agent and you

465
00:20:05,960 --> 00:20:11,810
can serve legitimate content to a user

466
00:20:08,720 --> 00:20:14,300
and if you want to serve the malicious

467
00:20:11,810 --> 00:20:16,070
redirect to create the object to the

468
00:20:14,300 --> 00:20:19,940
Facebook but for example yeah absolutely

469
00:20:16,070 --> 00:20:24,500
you can do that yes mark

470
00:20:19,940 --> 00:20:26,930
yes showed us that it was affected by

471
00:20:24,500 --> 00:20:28,730
big companies like Facebook and so when

472
00:20:26,930 --> 00:20:36,080
of course it's a big problem but I found

473
00:20:28,730 --> 00:20:38,840
many ways to protect this supposed to

474
00:20:36,080 --> 00:20:45,139
Krishna like how can you detect yeah

475
00:20:38,840 --> 00:20:47,600
yeah so yeah I guess I found it really

476
00:20:45,140 --> 00:20:49,580
difficult to detect it given the amount

477
00:20:47,600 --> 00:20:51,949
of links that are being you know like

478
00:20:49,580 --> 00:20:53,929
from my perspective and seeing the

479
00:20:51,950 --> 00:20:55,340
actual whether it's being used in the

480
00:20:53,930 --> 00:20:56,890
world that was quite a difficult thing

481
00:20:55,340 --> 00:21:00,649
to find because how would you go about

482
00:20:56,890 --> 00:21:03,530
finding links which actually by nature

483
00:21:00,650 --> 00:21:06,080
designed to look like over link see so

484
00:21:03,530 --> 00:21:09,830
it's kind of difficult but in terms of

485
00:21:06,080 --> 00:21:12,740
actually fixing the issue it would be

486
00:21:09,830 --> 00:21:15,590
simple enough to just make sure that the

487
00:21:12,740 --> 00:21:17,360
URL that is posted by the user is is

488
00:21:15,590 --> 00:21:18,860
visible either within the Open Graph

489
00:21:17,360 --> 00:21:21,559
object or like discard

490
00:21:18,860 --> 00:21:23,600
where they send the URL alongside the

491
00:21:21,559 --> 00:21:26,090
Open Graph objects and then this sort of

492
00:21:23,600 --> 00:21:37,158
technique doesn't is you wouldn't be

493
00:21:26,090 --> 00:21:39,168
able to do it anymore so it could you

494
00:21:37,159 --> 00:21:47,470
control the sort of cache ability so

495
00:21:39,169 --> 00:21:50,059
mates so yeah I bags that you can

496
00:21:47,470 --> 00:21:51,919
Facebook you can actually there's a part

497
00:21:50,059 --> 00:21:54,139
of the Facebook API which allows you to

498
00:21:51,919 --> 00:21:56,450
refresh the cache of these objects so if

499
00:21:54,139 --> 00:21:58,070
you want if you've updated your website

500
00:21:56,450 --> 00:22:00,440
and you want the cache on Facebook to be

501
00:21:58,070 --> 00:22:03,019
refreshed you can manually go in and

502
00:22:00,440 --> 00:22:05,570
request for it to be refreshed but yeah

503
00:22:03,019 --> 00:22:07,610
absolutely you could set the the time of

504
00:22:05,570 --> 00:22:10,340
these Open Graph objects to cache sort

505
00:22:07,610 --> 00:22:12,320
of fresh after about the time yeah you'd

506
00:22:10,340 --> 00:22:20,559
be able to do that with us down to the

507
00:22:12,320 --> 00:22:20,559
vendor okay well thank you very much

508
00:22:20,880 --> 00:22:24,999
[Applause]

