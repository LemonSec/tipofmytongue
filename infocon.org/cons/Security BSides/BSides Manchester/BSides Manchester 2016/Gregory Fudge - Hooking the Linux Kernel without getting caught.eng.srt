1
00:00:03,320 --> 00:00:09,150
hopefully cool um so<font color="#E5E5E5"> I'm great I saw the</font>

2
00:00:06,960 --> 00:00:12,990
<font color="#CCCCCC">mic</font><font color="#E5E5E5"> sweet</font>

3
00:00:09,150 --> 00:00:14,880
so I'm<font color="#E5E5E5"> Greg doing the next stuff</font><font color="#CCCCCC"> how</font>

4
00:00:12,990 --> 00:00:16,920
many just quick quick quick query<font color="#E5E5E5"> how</font>

5
00:00:14,880 --> 00:00:19,169
many devs<font color="#E5E5E5"> have we got of like any devs</font>

6
00:00:16,920 --> 00:00:22,829
<font color="#E5E5E5">how many pen testers and how many people</font>

7
00:00:19,169 --> 00:00:25,919
<font color="#CCCCCC">who think both cool anybody C++ familiar</font>

8
00:00:22,829 --> 00:00:28,320
<font color="#CCCCCC">see familiar</font><font color="#E5E5E5"> excellent</font><font color="#CCCCCC"> this isn't going</font>

9
00:00:25,919 --> 00:00:31,470
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> as bad as I</font><font color="#CCCCCC"> thought would be</font><font color="#E5E5E5"> cool</font>

10
00:00:28,320 --> 00:00:36,570
so<font color="#CCCCCC"> kernel probably</font><font color="#E5E5E5"> self-explanatory</font><font color="#CCCCCC"> so</font>

11
00:00:31,470 --> 00:00:38,250
<font color="#CCCCCC">why why do it because it's</font><font color="#E5E5E5"> fun</font><font color="#CCCCCC"> and also</font>

12
00:00:36,570 --> 00:00:39,660
you can do a lot of stuff once you're in

13
00:00:38,250 --> 00:00:43,019
the kernel<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you've got basically</font>

14
00:00:39,660 --> 00:00:45,000
<font color="#E5E5E5">you're in the system you've got really</font>

15
00:00:43,019 --> 00:00:47,190
really<font color="#E5E5E5"> complex system code that's cannot</font>

16
00:00:45,000 --> 00:00:48,269
fail and you've got a lot<font color="#CCCCCC"> of potential</font>

17
00:00:47,190 --> 00:00:52,858
opportunity to do lots of interesting

18
00:00:48,269 --> 00:00:55,289
<font color="#CCCCCC">things and this</font><font color="#E5E5E5"> is done quite these days</font>

19
00:00:52,859 --> 00:00:58,039
rootkits<font color="#CCCCCC"> a pretty</font><font color="#E5E5E5"> so they</font><font color="#CCCCCC"> tend to</font>

20
00:00:55,289 --> 00:01:01,050
do this<font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> I swear a lot by</font><font color="#E5E5E5"> the way</font>

21
00:00:58,039 --> 00:01:03,120
<font color="#E5E5E5">they're not</font><font color="#CCCCCC"> very good and they tend to</font>

22
00:01:01,050 --> 00:01:05,429
do lots of things<font color="#E5E5E5"> that's just good</font>

23
00:01:03,120 --> 00:01:07,048
enough<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do like the bare minimum and</font>

24
00:01:05,430 --> 00:01:11,070
people tend<font color="#CCCCCC"> to like just bring in</font>

25
00:01:07,049 --> 00:01:12,810
<font color="#CCCCCC">routine stuff so was</font><font color="#E5E5E5"> Ricky</font><font color="#CCCCCC"> generally</font><font color="#E5E5E5"> use</font>

26
00:01:11,070 --> 00:01:14,880
obviously to maintain provision system

27
00:01:12,810 --> 00:01:15,810
so if you post them and<font color="#E5E5E5"> you find you</font>

28
00:01:14,880 --> 00:01:16,890
<font color="#E5E5E5">want to put it back doors you can get</font>

29
00:01:15,810 --> 00:01:18,689
that in the<font color="#E5E5E5"> future</font>

30
00:01:16,890 --> 00:01:21,180
part of<font color="#CCCCCC"> that is you don't</font><font color="#E5E5E5"> get caught so</font>

31
00:01:18,689 --> 00:01:22,798
you<font color="#E5E5E5"> need something super stealthy</font><font color="#CCCCCC"> my own</font>

32
00:01:21,180 --> 00:01:25,920
<font color="#E5E5E5">view calms you</font><font color="#CCCCCC"> Montauk someone else mana</font>

33
00:01:22,799 --> 00:01:27,509
<font color="#CCCCCC">be able</font><font color="#E5E5E5"> to talk to</font><font color="#CCCCCC"> it and you</font><font color="#E5E5E5"> monitor</font>

34
00:01:25,920 --> 00:01:29,310
<font color="#E5E5E5">the system see someone's running some</font>

35
00:01:27,509 --> 00:01:34,979
cool stuff<font color="#CCCCCC"> baby anything like that</font><font color="#E5E5E5"> and</font>

36
00:01:29,310 --> 00:01:36,899
it pretty<font color="#E5E5E5"> much anything else yeah so</font>

37
00:01:34,979 --> 00:01:39,479
it's literally just<font color="#E5E5E5"> a program it's just</font>

38
00:01:36,899 --> 00:01:43,380
<font color="#CCCCCC">a piece of kernel code that does stuff</font>

39
00:01:39,479 --> 00:01:46,740
high<font color="#CCCCCC"> privilege which has pros and cons</font>

40
00:01:43,380 --> 00:01:48,810
so why<font color="#CCCCCC"> are we</font><font color="#E5E5E5"> picking Linux because we</font>

41
00:01:46,740 --> 00:01:51,929
use<font color="#E5E5E5"> our own back-end servers we use a</font>

42
00:01:48,810 --> 00:01:54,689
mobile Android<font color="#E5E5E5"> other stuff embedded</font>

43
00:01:51,930 --> 00:01:56,430
devices internet things<font color="#E5E5E5"> I don't explain</font>

44
00:01:54,689 --> 00:01:58,350
<font color="#E5E5E5">that and because I really</font><font color="#CCCCCC"> hate</font><font color="#E5E5E5"> Windows</font>

45
00:01:56,430 --> 00:02:00,390
<font color="#CCCCCC">DDK</font><font color="#E5E5E5"> because it's super super super hard</font>

46
00:01:58,350 --> 00:02:05,038
<font color="#CCCCCC">it takes like a day</font><font color="#E5E5E5"> to get that set up</font>

47
00:02:00,390 --> 00:02:06,090
<font color="#E5E5E5">so yeah so in terms of the general</font>

48
00:02:05,039 --> 00:02:08,070
threat

49
00:02:06,090 --> 00:02:10,680
persistence<font color="#CCCCCC"> it's like home to plan of it</font>

50
00:02:08,070 --> 00:02:11,790
because persistence is a big threat<font color="#CCCCCC"> if</font>

51
00:02:10,680 --> 00:02:13,320
you don't know it's on your system<font color="#E5E5E5"> and</font>

52
00:02:11,790 --> 00:02:14,670
it's<font color="#E5E5E5"> not doing anything dodgy</font>

53
00:02:13,320 --> 00:02:16,090
<font color="#E5E5E5">how do you notice that how are you ever</font>

54
00:02:14,670 --> 00:02:21,458
going to find<font color="#E5E5E5"> it it's there so</font>

55
00:02:16,090 --> 00:02:23,140
we need to get<font color="#E5E5E5"> be aware of that</font><font color="#CCCCCC"> yeah Jim</font>

56
00:02:21,459 --> 00:02:23,410
<font color="#E5E5E5">like 99% the time it's not doing</font>

57
00:02:23,140 --> 00:02:25,779
anything

58
00:02:23,410 --> 00:02:29,560
it's<font color="#E5E5E5"> just like dead code it's just</font>

59
00:02:25,780 --> 00:02:31,480
<font color="#E5E5E5">sitting there waiting to be</font><font color="#CCCCCC"> triggered so</font>

60
00:02:29,560 --> 00:02:32,560
and I'm rootkit detection is super hard

61
00:02:31,480 --> 00:02:33,640
<font color="#E5E5E5">because you're in the kernel so you can</font>

62
00:02:32,560 --> 00:02:35,290
<font color="#E5E5E5">change anything</font><font color="#CCCCCC"> so somebody wants to</font>

63
00:02:33,640 --> 00:02:39,429
<font color="#E5E5E5">find</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> what you're</font><font color="#CCCCCC"> running you can</font>

64
00:02:35,290 --> 00:02:41,579
pretty much<font color="#CCCCCC"> tumblr</font><font color="#E5E5E5"> sort of cool so how</font>

65
00:02:39,430 --> 00:02:44,290
so the two main methods are doing this

66
00:02:41,580 --> 00:02:46,060
using<font color="#E5E5E5"> kernel modules</font><font color="#CCCCCC"> so loadable kernel</font>

67
00:02:44,290 --> 00:02:48,910
modules and all that basically<font color="#E5E5E5"> the same</font>

68
00:02:46,060 --> 00:02:50,590
as Windows drivers<font color="#CCCCCC"> you just inputting a</font>

69
00:02:48,910 --> 00:02:54,910
piece of code into the kernel does some

70
00:02:50,590 --> 00:02:56,590
fun stuff and we go<font color="#CCCCCC"> there's some cool</font>

71
00:02:54,910 --> 00:02:58,150
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> as well on module infection so</font>

72
00:02:56,590 --> 00:02:59,350
rather<font color="#E5E5E5"> than actually writing a dedicated</font>

73
00:02:58,150 --> 00:03:01,569
module you can<font color="#E5E5E5"> actually infect an</font>

74
00:02:59,350 --> 00:03:04,930
existing<font color="#CCCCCC"> module by</font><font color="#E5E5E5"> basically the way the</font>

75
00:03:01,569 --> 00:03:07,329
the loader<font color="#E5E5E5"> works in the kernel so</font><font color="#CCCCCC"> that</font>

76
00:03:04,930 --> 00:03:09,959
you can pretty much cook<font color="#E5E5E5"> that other</font>

77
00:03:07,330 --> 00:03:12,760
<font color="#E5E5E5">thing so when some generic</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> unsigned</font>

78
00:03:09,959 --> 00:03:16,209
<font color="#CCCCCC">user driver for ThinkPads or whatever</font>

79
00:03:12,760 --> 00:03:17,679
gets you can inject<font color="#E5E5E5"> into that when that</font>

80
00:03:16,209 --> 00:03:19,390
gets<font color="#E5E5E5"> loaded your code in there as well</font>

81
00:03:17,680 --> 00:03:23,980
<font color="#CCCCCC">so you've not even</font><font color="#E5E5E5"> got any trace of it</font>

82
00:03:19,390 --> 00:03:25,570
and it's super<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> start direct</font>

83
00:03:23,980 --> 00:03:28,268
kernel object manipulation is the other

84
00:03:25,570 --> 00:03:30,280
way<font color="#E5E5E5"> the old-school way of doing it which</font>

85
00:03:28,269 --> 00:03:31,900
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> works on some systems is you</font>

86
00:03:30,280 --> 00:03:33,670
have these two<font color="#E5E5E5"> devices called death came</font>

87
00:03:31,900 --> 00:03:35,230
em which is<font color="#E5E5E5"> the kind of memory and deaf</font>

88
00:03:33,670 --> 00:03:36,608
<font color="#E5E5E5">man which is the normal area so you can</font>

89
00:03:35,230 --> 00:03:38,679
read<font color="#E5E5E5"> them right to those and do normal</font>

90
00:03:36,609 --> 00:03:40,299
<font color="#E5E5E5">I would control that stuff</font><font color="#CCCCCC"> which means</font>

91
00:03:38,680 --> 00:03:41,920
<font color="#E5E5E5">that you can basically read the kernel</font>

92
00:03:40,299 --> 00:03:44,319
memory<font color="#E5E5E5"> search it for instruction you</font>

93
00:03:41,920 --> 00:03:47,980
want<font color="#E5E5E5"> in a structure you want</font><font color="#CCCCCC"> and you can</font>

94
00:03:44,319 --> 00:03:48,910
<font color="#CCCCCC">manipulate</font><font color="#E5E5E5"> it as long as you can find</font>

95
00:03:47,980 --> 00:03:51,700
the structure<font color="#CCCCCC"> that you want to</font>

96
00:03:48,910 --> 00:03:54,400
manipulate<font color="#E5E5E5"> DMA you here are all sorts of</font>

97
00:03:51,700 --> 00:03:56,920
cool DMA attacks like<font color="#CCCCCC"> Thunderstrike -</font>

98
00:03:54,400 --> 00:03:58,030
something like<font color="#CCCCCC"> that where if</font><font color="#E5E5E5"> you have</font>

99
00:03:56,920 --> 00:03:59,548
access<font color="#CCCCCC"> to memory</font><font color="#E5E5E5"> you can just start</font>

100
00:03:58,030 --> 00:04:02,650
writing over stuff pretty same principle

101
00:03:59,549 --> 00:04:04,269
and yeah you can some<font color="#E5E5E5"> of those you can</font>

102
00:04:02,650 --> 00:04:08,290
do from<font color="#E5E5E5"> user land or</font><font color="#CCCCCC"> used to go to do</font>

103
00:04:04,269 --> 00:04:09,850
from<font color="#E5E5E5"> user plant so bunch</font><font color="#CCCCCC"> of stuff this</font>

104
00:04:08,290 --> 00:04:16,690
<font color="#E5E5E5">is all things that you can do ignore</font>

105
00:04:09,850 --> 00:04:18,639
<font color="#CCCCCC">that</font><font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> so yeah</font><font color="#E5E5E5"> the whole point of</font>

106
00:04:16,690 --> 00:04:20,320
<font color="#E5E5E5">kernel modules is so the links panel is</font>

107
00:04:18,639 --> 00:04:22,389
quite<font color="#E5E5E5"> modular so the smallest version</font>

108
00:04:20,320 --> 00:04:23,770
<font color="#CCCCCC">Linux</font><font color="#E5E5E5"> kernel is pretty small and you can</font>

109
00:04:22,389 --> 00:04:26,050
add<font color="#E5E5E5"> things in as you need them as</font><font color="#CCCCCC"> and</font>

110
00:04:23,770 --> 00:04:27,719
when<font color="#E5E5E5"> you see fit and it's loaded into</font>

111
00:04:26,050 --> 00:04:29,950
actual kernel memory so you've got

112
00:04:27,720 --> 00:04:33,880
specific addressable space<font color="#CCCCCC"> to</font>

113
00:04:29,950 --> 00:04:35,650
right into<font color="#E5E5E5"> that so usually you build a</font>

114
00:04:33,880 --> 00:04:37,750
kernel module<font color="#CCCCCC"> against a specific version</font>

115
00:04:35,650 --> 00:04:40,060
of<font color="#E5E5E5"> the Linux</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> that has some</font>

116
00:04:37,750 --> 00:04:41,860
<font color="#E5E5E5">interesting implications</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> that</font>

117
00:04:40,060 --> 00:04:42,840
makes it considerably less<font color="#CCCCCC"> portable so</font>

118
00:04:41,860 --> 00:04:45,640
that's something<font color="#E5E5E5"> you'll have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> consider</font>

119
00:04:42,840 --> 00:04:46,929
<font color="#CCCCCC">and</font><font color="#E5E5E5"> you can load that whenever the</font>

120
00:04:45,640 --> 00:04:48,430
kernels run you can load<font color="#CCCCCC"> that</font><font color="#E5E5E5"> as start</font>

121
00:04:46,930 --> 00:04:50,140
that you can load at<font color="#E5E5E5"> runtime like main</font>

122
00:04:48,430 --> 00:04:56,530
runtime<font color="#E5E5E5"> stuff like that</font>

123
00:04:50,140 --> 00:04:58,840
<font color="#E5E5E5">I can this apart it sucks</font><font color="#CCCCCC"> so loading you</font>

124
00:04:56,530 --> 00:05:01,030
can<font color="#E5E5E5"> use in</font><font color="#CCCCCC"> Innes mod and RM mod which</font>

125
00:04:58,840 --> 00:05:02,979
will load<font color="#E5E5E5"> and unload your driver that</font>

126
00:05:01,030 --> 00:05:04,900
<font color="#E5E5E5">just calls a kernel loading function</font>

127
00:05:02,980 --> 00:05:06,820
which basically<font color="#E5E5E5"> takes your loading</font>

128
00:05:04,900 --> 00:05:10,200
routine and your exit routine<font color="#CCCCCC"> and just</font>

129
00:05:06,820 --> 00:05:12,969
<font color="#CCCCCC">calls</font><font color="#E5E5E5"> them and it just</font><font color="#CCCCCC"> Maps it in</font>

130
00:05:10,200 --> 00:05:15,130
<font color="#E5E5E5">interesting thing is you can see what's</font>

131
00:05:12,970 --> 00:05:18,880
loaded from proc modules so if you have

132
00:05:15,130 --> 00:05:21,760
the proc virtual file system<font color="#E5E5E5"> it maps</font>

133
00:05:18,880 --> 00:05:24,070
your module as like a<font color="#E5E5E5"> little object with</font>

134
00:05:21,760 --> 00:05:25,390
a bunch of<font color="#CCCCCC"> information</font><font color="#E5E5E5"> it's the first</font>

135
00:05:24,070 --> 00:05:28,330
<font color="#E5E5E5">thing we have to hide it from that</font>

136
00:05:25,390 --> 00:05:30,159
because if obviously<font color="#CCCCCC"> if it appears then</font>

137
00:05:28,330 --> 00:05:33,669
that's kind<font color="#CCCCCC"> of obvious that we're</font>

138
00:05:30,160 --> 00:05:36,870
running<font color="#E5E5E5"> a tunnel</font><font color="#CCCCCC"> a recap so yeah it has</font>

139
00:05:33,670 --> 00:05:40,150
<font color="#CCCCCC">named module size in bytes of the</font><font color="#E5E5E5"> module</font>

140
00:05:36,870 --> 00:05:41,800
<font color="#CCCCCC">how many</font><font color="#E5E5E5"> are set instances that's that's</font>

141
00:05:40,150 --> 00:05:43,479
wrong<font color="#CCCCCC"> it's how many people are using</font>

142
00:05:41,800 --> 00:05:45,160
<font color="#E5E5E5">that module so how many people have gone</font>

143
00:05:43,480 --> 00:05:47,500
said I want to use this module<font color="#E5E5E5"> because</font>

144
00:05:45,160 --> 00:05:51,070
it can't unload it if that<font color="#CCCCCC"> number is</font>

145
00:05:47,500 --> 00:05:54,670
<font color="#E5E5E5">greater than</font><font color="#CCCCCC"> 0 the number</font><font color="#E5E5E5"> of module</font>

146
00:05:51,070 --> 00:05:56,920
dependencies<font color="#E5E5E5"> so</font><font color="#CCCCCC"> what we'll talk</font><font color="#E5E5E5"> about</font>

147
00:05:54,670 --> 00:05:59,560
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> simple layer what symbols does</font>

148
00:05:56,920 --> 00:06:01,720
the module require the state the module

149
00:05:59,560 --> 00:06:03,880
so is it loading is it a lot currently

150
00:06:01,720 --> 00:06:05,200
live or is<font color="#E5E5E5"> it unloading usually is</font>

151
00:06:03,880 --> 00:06:09,190
<font color="#E5E5E5">either live or it's not there</font><font color="#CCCCCC"> at all and</font>

152
00:06:05,200 --> 00:06:11,620
the officer in kernel memory<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's a</font>

153
00:06:09,190 --> 00:06:14,640
virtual address that the kernels loaded

154
00:06:11,620 --> 00:06:17,140
into<font color="#E5E5E5"> so you know where it is</font><font color="#CCCCCC"> so that's</font>

155
00:06:14,640 --> 00:06:19,380
<font color="#E5E5E5">yeah so that's our little shitty</font>

156
00:06:17,140 --> 00:06:22,630
<font color="#CCCCCC">backdoor thing that is there you can see</font>

157
00:06:19,380 --> 00:06:24,190
the module name<font color="#E5E5E5"> you can see the size of</font>

158
00:06:22,630 --> 00:06:25,510
it<font color="#E5E5E5"> you can see that's live and you</font><font color="#CCCCCC"> can</font>

159
00:06:24,190 --> 00:06:26,860
see what it's loading to address very

160
00:06:25,510 --> 00:06:28,030
mind you have to<font color="#CCCCCC"> use</font><font color="#E5E5E5"> sudo to this you</font>

161
00:06:26,860 --> 00:06:29,320
can do<font color="#E5E5E5"> the map</font><font color="#CCCCCC"> sudo but it won't give</font>

162
00:06:28,030 --> 00:06:31,179
you the address<font color="#CCCCCC"> it will just</font><font color="#E5E5E5"> take your</font>

163
00:06:29,320 --> 00:06:33,190
sassy from<font color="#CCCCCC"> you and you</font><font color="#E5E5E5"> can see that</font>

164
00:06:31,180 --> 00:06:35,560
something's<font color="#E5E5E5"> at but if you run it as</font>

165
00:06:33,190 --> 00:06:39,700
pseudo as a root user<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see</font>

166
00:06:35,560 --> 00:06:41,560
exactly where<font color="#CCCCCC"> it is still so to hide it</font>

167
00:06:39,700 --> 00:06:43,210
we use the compiler macros because

168
00:06:41,560 --> 00:06:43,870
compiler macros are good because<font color="#CCCCCC"> writing</font>

169
00:06:43,210 --> 00:06:47,200
your own code is<font color="#E5E5E5"> like</font>

170
00:06:43,870 --> 00:06:48,880
I thought<font color="#CCCCCC"> and basically there's a linked</font>

171
00:06:47,200 --> 00:06:50,110
list of modules that<font color="#CCCCCC"> goes around</font><font color="#E5E5E5"> in the</font>

172
00:06:48,880 --> 00:06:52,330
kernel<font color="#CCCCCC"> and that's held the kernel</font>

173
00:06:50,110 --> 00:06:54,370
numerous<font color="#E5E5E5"> things and you go in</font><font color="#CCCCCC"> say I</font><font color="#E5E5E5"> need</font>

174
00:06:52,330 --> 00:06:55,719
to<font color="#E5E5E5"> delete that item from the list and I</font>

175
00:06:54,370 --> 00:06:57,580
want<font color="#E5E5E5"> you to reinitialize and that</font>

176
00:06:55,720 --> 00:06:59,350
doesn't unload the module the module

177
00:06:57,580 --> 00:07:01,539
still in there<font color="#E5E5E5"> any hooks you put in are</font>

178
00:06:59,350 --> 00:07:03,700
still there<font color="#E5E5E5"> everything is</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> it</font>

179
00:07:01,540 --> 00:07:05,470
<font color="#E5E5E5">just means the kernel has no way</font><font color="#CCCCCC"> of</font>

180
00:07:03,700 --> 00:07:10,930
pointing to<font color="#CCCCCC"> your module which is</font><font color="#E5E5E5"> great</font>

181
00:07:05,470 --> 00:07:12,550
<font color="#CCCCCC">for us</font><font color="#E5E5E5"> so that will get</font><font color="#CCCCCC"> rid of proc</font>

182
00:07:10,930 --> 00:07:15,910
modules and<font color="#E5E5E5"> that get rid of Alice model</font>

183
00:07:12,550 --> 00:07:19,300
and then<font color="#E5E5E5"> the other</font><font color="#CCCCCC"> purge filesystem</font>

184
00:07:15,910 --> 00:07:22,930
Sisyphus is<font color="#E5E5E5"> sis / module which is</font>

185
00:07:19,300 --> 00:07:26,140
<font color="#E5E5E5">another special in-memory filesystem</font>

186
00:07:22,930 --> 00:07:27,910
weird stuff<font color="#CCCCCC"> and it has a ton</font><font color="#E5E5E5"> of</font>

187
00:07:26,140 --> 00:07:29,590
<font color="#CCCCCC">information I can also it just kind of</font>

188
00:07:27,910 --> 00:07:34,150
enumerates<font color="#E5E5E5"> all those similar things but</font>

189
00:07:29,590 --> 00:07:36,580
with like a folder structure<font color="#CCCCCC"> so yeah if</font>

190
00:07:34,150 --> 00:07:39,070
you're<font color="#CCCCCC"> in</font><font color="#E5E5E5"> I mean that's just</font><font color="#CCCCCC"> roamed</font><font color="#E5E5E5"> like</font>

191
00:07:36,580 --> 00:07:41,500
 user<font color="#E5E5E5"> you can see our back door</font>

192
00:07:39,070 --> 00:07:42,909
there you<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> that routes running it</font>

193
00:07:41,500 --> 00:07:44,560
<font color="#CCCCCC">you can block well that's basically just</font>

194
00:07:42,910 --> 00:07:50,140
a directory we can<font color="#CCCCCC"> go in</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> and</font>

195
00:07:44,560 --> 00:07:52,540
<font color="#E5E5E5"> with it so we can also go to</font>

196
00:07:50,140 --> 00:07:56,560
<font color="#E5E5E5">this there's</font><font color="#CCCCCC"> a thing called K</font><font color="#E5E5E5"> objects</font>

197
00:07:52,540 --> 00:07:58,960
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> a kernel object we can delete the</font>

198
00:07:56,560 --> 00:08:00,190
kernel object<font color="#CCCCCC"> basically so you</font><font color="#E5E5E5"> go up to</font>

199
00:07:58,960 --> 00:08:01,870
the parent<font color="#E5E5E5"> at the kind of object</font><font color="#CCCCCC"> the</font>

200
00:08:00,190 --> 00:08:03,400
thing<font color="#E5E5E5"> has a reference to it and you say</font>

201
00:08:01,870 --> 00:08:05,260
I want<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to delete that reference to</font>

202
00:08:03,400 --> 00:08:08,169
me<font color="#E5E5E5"> so you're actually deleting the link</font>

203
00:08:05,260 --> 00:08:10,270
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that means</font><font color="#E5E5E5"> that when it goes</font><font color="#CCCCCC"> through</font>

204
00:08:08,170 --> 00:08:12,100
<font color="#E5E5E5">the parent and looks says what if I got</font>

205
00:08:10,270 --> 00:08:12,789
loaded<font color="#E5E5E5"> it goes down as well doesn't</font>

206
00:08:12,100 --> 00:08:16,530
there's nothing here

207
00:08:12,790 --> 00:08:16,530
because there's no address<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> cool</font>

208
00:08:17,280 --> 00:08:22,929
<font color="#CCCCCC">Colonel symbols</font><font color="#E5E5E5"> so you hunt ton of</font>

209
00:08:20,500 --> 00:08:24,370
addresses<font color="#CCCCCC"> to like random stubs</font><font color="#E5E5E5"> in kernel</font>

210
00:08:22,930 --> 00:08:25,690
memory<font color="#E5E5E5"> and you need to be able to</font>

211
00:08:24,370 --> 00:08:28,090
reference<font color="#E5E5E5"> them so the way the kernel</font>

212
00:08:25,690 --> 00:08:30,940
does<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> it has a in boot system</font>

213
00:08:28,090 --> 00:08:32,980
<font color="#CCCCCC">drop map you have this map of kernel</font>

214
00:08:30,940 --> 00:08:35,980
symbols to the address<font color="#CCCCCC"> that is expected</font>

215
00:08:32,980 --> 00:08:38,230
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> R so your kernel can't rather than</font>

216
00:08:35,980 --> 00:08:40,210
say<font color="#CCCCCC"> like if you're modifying</font><font color="#E5E5E5"> structure</font>

217
00:08:38,230 --> 00:08:42,400
<font color="#E5E5E5">in your kernel you add something you</font>

218
00:08:40,210 --> 00:08:44,290
delete something where that ends up in

219
00:08:42,400 --> 00:08:46,810
main memory<font color="#E5E5E5"> is going to change so this</font>

220
00:08:44,290 --> 00:08:48,430
is a<font color="#E5E5E5"> direct map to kernel memory the</font>

221
00:08:46,810 --> 00:08:49,780
<font color="#CCCCCC">weaken them</font><font color="#E5E5E5"> reference so we're using</font><font color="#CCCCCC"> a</font>

222
00:08:48,430 --> 00:08:51,640
system where<font color="#E5E5E5"> the system knows</font><font color="#CCCCCC"> that it is</font>

223
00:08:49,780 --> 00:08:56,670
rather than<font color="#E5E5E5"> just like randomly blindly</font>

224
00:08:51,640 --> 00:08:56,670
guessing<font color="#E5E5E5"> which we'll do later</font><font color="#CCCCCC"> so</font>

225
00:08:56,720 --> 00:09:04,759
the so<font color="#E5E5E5"> basically when you compile</font><font color="#CCCCCC"> your</font>

226
00:09:02,779 --> 00:09:06,920
<font color="#CCCCCC">kernel if anybody knows anything about</font>

227
00:09:04,759 --> 00:09:09,170
<font color="#E5E5E5">compilers linkers when you compile</font><font color="#CCCCCC"> your</font>

228
00:09:06,920 --> 00:09:11,240
kernel<font color="#E5E5E5"> and you link it which you don't</font>

229
00:09:09,170 --> 00:09:12,979
do it has a bunch<font color="#E5E5E5"> of undefined symbols</font>

230
00:09:11,240 --> 00:09:15,019
and those are things that are patched up

231
00:09:12,980 --> 00:09:16,490
by the loader<font color="#CCCCCC"> when you install your</font>

232
00:09:15,019 --> 00:09:19,040
module<font color="#E5E5E5"> so it goes in it says okay you</font>

233
00:09:16,490 --> 00:09:20,870
want this symbol<font color="#E5E5E5"> let me find the address</font>

234
00:09:19,040 --> 00:09:24,319
<font color="#E5E5E5">for that patches it up and it patches</font>

235
00:09:20,870 --> 00:09:25,879
all your code like that<font color="#CCCCCC"> which is great</font>

236
00:09:24,319 --> 00:09:27,769
but it<font color="#E5E5E5"> means if we didn't dodgy</font><font color="#CCCCCC"> stuff</font>

237
00:09:25,879 --> 00:09:30,470
with weird symbols and some<font color="#CCCCCC"> Mariner</font>

238
00:09:27,769 --> 00:09:32,089
<font color="#E5E5E5">analyst picks up this object kernel</font>

239
00:09:30,470 --> 00:09:33,889
object then he can look at<font color="#E5E5E5"> it and say</font>

240
00:09:32,089 --> 00:09:36,259
<font color="#CCCCCC">okay you're using these weird really</font>

241
00:09:33,889 --> 00:09:37,759
<font color="#CCCCCC">weird things</font><font color="#E5E5E5"> that we totally know</font><font color="#CCCCCC"> why</font>

242
00:09:36,259 --> 00:09:43,750
<font color="#CCCCCC">what you're</font><font color="#E5E5E5"> doing for they don't</font><font color="#CCCCCC"> even</font>

243
00:09:37,759 --> 00:09:46,310
<font color="#E5E5E5">have to like do any disassembly yeah so</font>

244
00:09:43,750 --> 00:09:48,680
these are the undefined references so

245
00:09:46,310 --> 00:09:50,000
you<font color="#CCCCCC"> Andy</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I reference</font><font color="#E5E5E5"> the defined</font>

246
00:09:48,680 --> 00:09:52,519
ones or the other ones and<font color="#E5E5E5"> those are</font>

247
00:09:50,000 --> 00:09:54,170
<font color="#E5E5E5">like non-static parameters in the file</font>

248
00:09:52,519 --> 00:09:56,420
<font color="#E5E5E5">because this is really quick</font><font color="#CCCCCC"> and dirty</font>

249
00:09:54,170 --> 00:09:59,360
so this is this is<font color="#CCCCCC"> just reading the</font>

250
00:09:56,420 --> 00:10:02,360
<font color="#CCCCCC">symbol table of the elf binary because</font>

251
00:09:59,360 --> 00:10:07,189
<font color="#CCCCCC">kernel objects</font><font color="#E5E5E5"> are binaries so</font><font color="#CCCCCC"> it's</font>

252
00:10:02,360 --> 00:10:08,480
super easy to<font color="#CCCCCC"> re but it's also super</font>

253
00:10:07,189 --> 00:10:10,279
portable<font color="#CCCCCC"> because you have got that</font>

254
00:10:08,480 --> 00:10:12,220
dependency<font color="#CCCCCC"> on specific addresses</font><font color="#E5E5E5"> you</font>

255
00:10:10,279 --> 00:10:14,720
don't you have to know what's up is that

256
00:10:12,220 --> 00:10:15,829
<font color="#CCCCCC">was a thing</font><font color="#E5E5E5"> if you all</font><font color="#CCCCCC"> run internal</font>

257
00:10:14,720 --> 00:10:18,410
functions you<font color="#E5E5E5"> want to keep it as static</font>

258
00:10:15,829 --> 00:10:20,209
as possible<font color="#CCCCCC"> the static keyboard keyword</font>

259
00:10:18,410 --> 00:10:21,740
<font color="#E5E5E5">will make sure that that symbol</font><font color="#CCCCCC"> that</font>

260
00:10:20,209 --> 00:10:25,008
address<font color="#E5E5E5"> doesn't go anywhere outside</font><font color="#CCCCCC"> of</font>

261
00:10:21,740 --> 00:10:27,079
<font color="#CCCCCC">your actual file or your module so that</font>

262
00:10:25,009 --> 00:10:29,990
<font color="#E5E5E5">there's no external references to that</font>

263
00:10:27,079 --> 00:10:31,040
keep it<font color="#E5E5E5"> nice and clean</font><font color="#CCCCCC"> I don't even know</font>

264
00:10:29,990 --> 00:10:35,089
I<font color="#E5E5E5"> wrote those at like 4:00 in the</font>

265
00:10:31,040 --> 00:10:37,009
morning so<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know so hooking</font><font color="#CCCCCC"> I was</font>

266
00:10:35,089 --> 00:10:38,899
going to put<font color="#E5E5E5"> on but I</font><font color="#CCCCCC"> have done that</font>

267
00:10:37,009 --> 00:10:42,230
much armor than<font color="#E5E5E5"> most of the x86</font><font color="#CCCCCC"> and x86</font>

268
00:10:38,899 --> 00:10:44,089
<font color="#E5E5E5">64 so we can talk about that so</font><font color="#CCCCCC"> we've</font>

269
00:10:42,230 --> 00:10:45,589
got<font color="#CCCCCC"> inline hooks which are</font><font color="#E5E5E5"> little just</font>

270
00:10:44,089 --> 00:10:47,600
hooks where you<font color="#E5E5E5"> patch a little bit code</font>

271
00:10:45,589 --> 00:10:48,980
to jump to your thing and go and do

272
00:10:47,600 --> 00:10:51,500
something<font color="#CCCCCC"> else or call some function</font>

273
00:10:48,980 --> 00:10:52,430
<font color="#E5E5E5">which is cool so you all you have to do</font>

274
00:10:51,500 --> 00:10:53,990
is you<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> know where you want to</font>

275
00:10:52,430 --> 00:10:55,758
jump to<font color="#CCCCCC"> you've got some memory allocate</font>

276
00:10:53,990 --> 00:10:57,230
somewhere with some code stub and you

277
00:10:55,759 --> 00:10:59,990
know exactly where<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is and then you</font>

278
00:10:57,230 --> 00:11:04,189
just say<font color="#E5E5E5"> call that piece of code</font><font color="#CCCCCC"> so you</font>

279
00:10:59,990 --> 00:11:05,509
<font color="#E5E5E5">can like</font><font color="#CCCCCC"> knockout stuff usually so we</font>

280
00:11:04,189 --> 00:11:06,860
can patch the<font color="#E5E5E5"> siskel table which is</font>

281
00:11:05,509 --> 00:11:07,870
super<font color="#E5E5E5"> cool because everything goes</font>

282
00:11:06,860 --> 00:11:10,160
<font color="#E5E5E5">through this is</font><font color="#CCCCCC"> cool table</font>

283
00:11:07,870 --> 00:11:10,370
so everything<font color="#E5E5E5"> views</font><font color="#CCCCCC"> land interacts</font><font color="#E5E5E5"> with</font>

284
00:11:10,160 --> 00:11:13,339
the

285
00:11:10,370 --> 00:11:18,200
that way we can I can't even read this

286
00:11:13,339 --> 00:11:22,040
in<font color="#E5E5E5"> my glasses we can also hook</font><font color="#CCCCCC"> kernel</font>

287
00:11:18,200 --> 00:11:24,680
methods and kernel symbols<font color="#E5E5E5"> so we will</font>

288
00:11:22,040 --> 00:11:29,990
this looks a bit weird<font color="#CCCCCC"> will covers on</font>

289
00:11:24,680 --> 00:11:31,370
these<font color="#E5E5E5"> so x86 64 has a cheating mechanism</font>

290
00:11:29,990 --> 00:11:33,050
where it<font color="#E5E5E5"> actually has some hardware</font>

291
00:11:31,370 --> 00:11:34,160
registers which you can use to shortcut

292
00:11:33,050 --> 00:11:36,620
the interrupt mechanism which we'll talk

293
00:11:34,160 --> 00:11:38,390
about in<font color="#E5E5E5"> a second</font><font color="#CCCCCC"> but in general you</font>

294
00:11:36,620 --> 00:11:39,740
have<font color="#E5E5E5"> an interrupt table in memory and</font>

295
00:11:38,390 --> 00:11:41,990
every time an interrupt on the<font color="#E5E5E5"> hardware</font>

296
00:11:39,740 --> 00:11:44,870
is invoked so like you all heard of int

297
00:11:41,990 --> 00:11:46,339
<font color="#CCCCCC">80</font><font color="#E5E5E5"> or like int 3 however it will go to</font>

298
00:11:44,870 --> 00:11:48,320
the interrupt table and say what's my

299
00:11:46,339 --> 00:11:50,510
<font color="#E5E5E5">handler for this</font><font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> call that</font>

300
00:11:48,320 --> 00:11:52,910
load<font color="#E5E5E5"> that run it and then that will go</font>

301
00:11:50,510 --> 00:11:54,230
<font color="#E5E5E5">and do something in kind of memory</font><font color="#CCCCCC"> arm</font>

302
00:11:52,910 --> 00:11:55,400
has the same thing except I think<font color="#CCCCCC"> they</font>

303
00:11:54,230 --> 00:11:57,620
call<font color="#E5E5E5"> no exception in</font><font color="#CCCCCC"> fact stable on</font>

304
00:11:55,400 --> 00:11:59,990
<font color="#CCCCCC">throughout</font><font color="#E5E5E5"> v8 bus this case in</font><font color="#CCCCCC"> v7 I</font>

305
00:11:57,620 --> 00:12:03,560
think we can also use debug hooks so you

306
00:11:59,990 --> 00:12:05,089
<font color="#E5E5E5">can install a</font><font color="#CCCCCC"> breakpoint</font><font color="#E5E5E5"> within the</font>

307
00:12:03,560 --> 00:12:06,979
kernel<font color="#E5E5E5"> there's nothing stopping us of</font>

308
00:12:05,089 --> 00:12:08,870
<font color="#E5E5E5">doing that so</font><font color="#CCCCCC"> we can say</font><font color="#E5E5E5"> the kernel</font>

309
00:12:06,980 --> 00:12:10,640
executes this page or<font color="#CCCCCC"> this address at</font>

310
00:12:08,870 --> 00:12:13,089
this page tell me<font color="#CCCCCC"> about it and run this</font>

311
00:12:10,640 --> 00:12:15,890
<font color="#E5E5E5">handle function that's quite</font><font color="#CCCCCC"> interesting</font>

312
00:12:13,089 --> 00:12:17,240
<font color="#E5E5E5">and there's a point those are high but</font>

313
00:12:15,890 --> 00:12:18,290
registers so you literally just ran<font color="#E5E5E5"> to</font>

314
00:12:17,240 --> 00:12:24,110
<font color="#E5E5E5">the harder registers where you want to</font>

315
00:12:18,290 --> 00:12:25,969
go so in line hooking you basically<font color="#CCCCCC"> just</font>

316
00:12:24,110 --> 00:12:28,160
patch out where it says this is the

317
00:12:25,970 --> 00:12:30,410
existing<font color="#CCCCCC"> Cisco stub for why we</font><font color="#E5E5E5"> want to</font>

318
00:12:28,160 --> 00:12:31,939
go we've made<font color="#E5E5E5"> our</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> mock one which</font>

319
00:12:30,410 --> 00:12:34,279
looks almost<font color="#CCCCCC"> identical but with some</font>

320
00:12:31,940 --> 00:12:35,959
funky stuff<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> change</font><font color="#CCCCCC"> your</font>

321
00:12:34,279 --> 00:12:37,550
dresses so you just keep<font color="#E5E5E5"> the copy this</font>

322
00:12:35,959 --> 00:12:39,439
old one<font color="#E5E5E5"> because you need</font><font color="#CCCCCC"> it and then you</font>

323
00:12:37,550 --> 00:12:43,069
take the new one<font color="#E5E5E5"> and you patch</font><font color="#CCCCCC"> it on</font><font color="#E5E5E5"> to</font>

324
00:12:39,440 --> 00:12:44,390
that table<font color="#CCCCCC"> you can also the same concept</font>

325
00:12:43,070 --> 00:12:46,490
with<font color="#CCCCCC"> interrupt labels which is super</font>

326
00:12:44,390 --> 00:12:48,080
annoying<font color="#CCCCCC"> it's where you</font><font color="#E5E5E5"> basically just</font>

327
00:12:46,490 --> 00:12:49,490
<font color="#CCCCCC">where you write the entry to</font><font color="#E5E5E5"> the table</font>

328
00:12:48,080 --> 00:12:51,380
so there's an interrupt<font color="#CCCCCC"> handler and when</font>

329
00:12:49,490 --> 00:12:53,600
the interrupt<font color="#CCCCCC"> is triggered</font><font color="#E5E5E5"> you go to</font>

330
00:12:51,380 --> 00:12:56,930
your new interrupt handler<font color="#E5E5E5"> which is cool</font>

331
00:12:53,600 --> 00:12:59,029
<font color="#E5E5E5">and then eventually I want</font><font color="#CCCCCC"> MSR hooking</font>

332
00:12:56,930 --> 00:13:01,279
so these are<font color="#CCCCCC"> model specific registers</font>

333
00:12:59,029 --> 00:13:02,750
these are they didn't used to<font color="#CCCCCC"> exist</font>

334
00:13:01,279 --> 00:13:04,310
<font color="#E5E5E5">these allowed to shortcut the system</font>

335
00:13:02,750 --> 00:13:05,839
we'll talk about<font color="#CCCCCC"> and</font><font color="#E5E5E5"> more that means</font>

336
00:13:04,310 --> 00:13:07,939
<font color="#CCCCCC">basically instead</font><font color="#E5E5E5"> of doing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in 880</font>

337
00:13:05,839 --> 00:13:09,709
stuff you can call sis call and it can

338
00:13:07,940 --> 00:13:10,850
do a very fast transition<font color="#E5E5E5"> into kernel</font>

339
00:13:09,709 --> 00:13:13,430
mode which<font color="#CCCCCC"> basically speeds everything</font>

340
00:13:10,850 --> 00:13:16,750
up<font color="#E5E5E5"> crazy amounts because you don't have</font>

341
00:13:13,430 --> 00:13:19,819
to go through<font color="#E5E5E5"> the interrupt handler so</font>

342
00:13:16,750 --> 00:13:21,709
we need to get the<font color="#E5E5E5"> siskel table address</font>

343
00:13:19,820 --> 00:13:24,130
<font color="#E5E5E5">because</font><font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> to patch it we know</font>

344
00:13:21,709 --> 00:13:27,280
already so<font color="#E5E5E5"> there's</font>

345
00:13:24,130 --> 00:13:30,310
a<font color="#E5E5E5"> interrupter</font><font color="#CCCCCC"> script a table it's an igt</font>

346
00:13:27,280 --> 00:13:31,870
<font color="#CCCCCC">and there's an instruction</font><font color="#E5E5E5"> on x86 to get</font>

347
00:13:30,310 --> 00:13:32,979
that<font color="#CCCCCC"> interrupt descriptor table</font><font color="#E5E5E5"> and you</font>

348
00:13:31,870 --> 00:13:36,040
can<font color="#E5E5E5"> do</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> non-privileged</font><font color="#E5E5E5"> user</font>

349
00:13:32,980 --> 00:13:39,370
that's totally great<font color="#CCCCCC"> so we can get the</font>

350
00:13:36,040 --> 00:13:42,069
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> dress what that is there's a we</font>

351
00:13:39,370 --> 00:13:46,000
want<font color="#E5E5E5"> to read that in a</font><font color="#CCCCCC"> tee</font><font color="#E5E5E5"> so hex</font><font color="#CCCCCC"> a</font>

352
00:13:42,070 --> 00:13:49,030
offset handler for<font color="#E5E5E5"> that so then we</font><font color="#CCCCCC"> just</font>

353
00:13:46,000 --> 00:13:51,880
find what that's pointing to and then we

354
00:13:49,030 --> 00:13:55,720
reconstruct the syscall handler with on

355
00:13:51,880 --> 00:13:57,400
<font color="#E5E5E5">users</font><font color="#CCCCCC"> core handler x86 x-force implies</font>

356
00:13:55,720 --> 00:14:00,220
this in<font color="#E5E5E5"> that you don't have to do that</font>

357
00:13:57,400 --> 00:14:01,449
you can literally just read the L star

358
00:14:00,220 --> 00:14:02,740
register which is<font color="#E5E5E5"> basically the</font>

359
00:14:01,450 --> 00:14:04,600
<font color="#CCCCCC">equivalents that L star register de</font>

360
00:14:02,740 --> 00:14:06,130
<font color="#CCCCCC">stores</font><font color="#E5E5E5"> whether</font><font color="#CCCCCC"> Siskel paper is loaded</font>

361
00:14:04,600 --> 00:14:09,400
<font color="#CCCCCC">and that's like the cheap version which</font>

362
00:14:06,130 --> 00:14:11,710
everyone uses and the way that we

363
00:14:09,400 --> 00:14:13,240
actually get the address is we we know

364
00:14:11,710 --> 00:14:15,130
that it's somewhere<font color="#E5E5E5"> within this area but</font>

365
00:14:13,240 --> 00:14:17,500
<font color="#E5E5E5">we don't exactly where but</font><font color="#CCCCCC"> we know these</font>

366
00:14:15,130 --> 00:14:20,470
magic bytes<font color="#E5E5E5"> are some level</font>

367
00:14:17,500 --> 00:14:22,840
came up with<font color="#E5E5E5"> always perceived this is</font>

368
00:14:20,470 --> 00:14:24,280
cool table address so you scan for

369
00:14:22,840 --> 00:14:26,140
memory<font color="#E5E5E5"> you find these</font><font color="#CCCCCC"> three bikes</font><font color="#E5E5E5"> and</font>

370
00:14:24,280 --> 00:14:27,240
then you copy<font color="#CCCCCC"> the four bytes or</font><font color="#E5E5E5"> eight</font>

371
00:14:26,140 --> 00:14:29,380
bytes if you're using a lot of<font color="#E5E5E5"> mode</font>

372
00:14:27,240 --> 00:14:31,000
afterwards<font color="#E5E5E5"> and that will be your address</font>

373
00:14:29,380 --> 00:14:35,160
and<font color="#E5E5E5"> then you've got your dress perfect</font>

374
00:14:31,000 --> 00:14:38,800
<font color="#E5E5E5">and it seems to work cool</font>

375
00:14:35,160 --> 00:14:40,750
<font color="#CCCCCC">armed those things very similarly</font><font color="#E5E5E5"> except</font>

376
00:14:38,800 --> 00:14:42,640
that you've got<font color="#E5E5E5"> this software interrupt</font>

377
00:14:40,750 --> 00:14:46,720
handler which is<font color="#E5E5E5"> basically like a Cisco</font>

378
00:14:42,640 --> 00:14:47,770
handler<font color="#CCCCCC"> it's pretty much</font><font color="#E5E5E5"> 99% the same</font>

379
00:14:46,720 --> 00:14:49,060
thing except you have obviously

380
00:14:47,770 --> 00:14:51,460
different set of bytes as the code

381
00:14:49,060 --> 00:14:54,810
<font color="#CCCCCC">preceding those bytes same thing for AK</font>

382
00:14:51,460 --> 00:14:58,510
68 it's<font color="#E5E5E5"> got a great article</font><font color="#CCCCCC"> on it</font>

383
00:14:54,810 --> 00:15:01,660
okay so x86 interrupts<font color="#E5E5E5"> are</font><font color="#CCCCCC"> absolutely</font>

384
00:14:58,510 --> 00:15:04,150
<font color="#E5E5E5">pain anybody familiar interrupts yeah</font>

385
00:15:01,660 --> 00:15:05,920
<font color="#CCCCCC">cool</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so interrupts you used to for</font>

386
00:15:04,150 --> 00:15:07,959
harder to trigger things<font color="#E5E5E5"> for software to</font>

387
00:15:05,920 --> 00:15:10,120
trigger<font color="#E5E5E5"> things for exceptions in code so</font>

388
00:15:07,960 --> 00:15:13,570
classic one will<font color="#E5E5E5"> add some classes later</font>

389
00:15:10,120 --> 00:15:16,600
on<font color="#E5E5E5"> and</font><font color="#CCCCCC"> syscalls and then there's a bunch</font>

390
00:15:13,570 --> 00:15:18,190
<font color="#E5E5E5">of information about those there so</font>

391
00:15:16,600 --> 00:15:19,360
we've got external hardware interrupts

392
00:15:18,190 --> 00:15:21,190
which is there's a programmable

393
00:15:19,360 --> 00:15:23,080
<font color="#E5E5E5">interrupt</font><font color="#CCCCCC"> controller on x86</font><font color="#E5E5E5"> which is</font>

394
00:15:21,190 --> 00:15:25,720
like a almost<font color="#E5E5E5"> like another chip it's</font>

395
00:15:23,080 --> 00:15:27,430
actually in<font color="#E5E5E5"> the same chip</font><font color="#CCCCCC"> where it has</font>

396
00:15:25,720 --> 00:15:29,770
certain events<font color="#E5E5E5"> that if that event is</font>

397
00:15:27,430 --> 00:15:31,870
triggered from<font color="#E5E5E5"> hardware so say the</font><font color="#CCCCCC"> disk</font>

398
00:15:29,770 --> 00:15:34,870
<font color="#E5E5E5">has decided that it's finished in</font>

399
00:15:31,870 --> 00:15:36,310
whatever<font color="#E5E5E5"> it will trigger and then that</font>

400
00:15:34,870 --> 00:15:37,450
interrupt controller will then pass the

401
00:15:36,310 --> 00:15:37,930
trigger on<font color="#E5E5E5"> to the CP and say hey I've</font>

402
00:15:37,450 --> 00:15:39,970
got<font color="#E5E5E5"> something</font>

403
00:15:37,930 --> 00:15:41,739
you you want<font color="#E5E5E5"> to look at it and that's</font>

404
00:15:39,970 --> 00:15:44,020
<font color="#E5E5E5">how it works</font><font color="#CCCCCC"> I think</font>

405
00:15:41,740 --> 00:15:44,890
and then you've got software trigger

406
00:15:44,020 --> 00:15:46,000
interrupts which didn't go through<font color="#E5E5E5"> that</font>

407
00:15:44,890 --> 00:15:51,089
<font color="#E5E5E5">interrupt controller so there's a</font>

408
00:15:46,000 --> 00:15:51,089
directly<font color="#CCCCCC"> CPU generated interrupts and</font>

409
00:15:51,570 --> 00:15:57,820
<font color="#E5E5E5">yeah so then you've got these interrupts</font>

410
00:15:53,980 --> 00:15:59,560
over here and<font color="#CCCCCC"> don't you care too much</font><font color="#E5E5E5"> on</font>

411
00:15:57,820 --> 00:16:00,790
<font color="#E5E5E5">Linux is 256 different interrupt</font>

412
00:15:59,560 --> 00:16:02,770
handlers you can have<font color="#E5E5E5"> not all of them</font>

413
00:16:00,790 --> 00:16:06,490
<font color="#E5E5E5">used you use most of them by the first</font>

414
00:16:02,770 --> 00:16:09,699
<font color="#E5E5E5">hundred and something and there is a</font>

415
00:16:06,490 --> 00:16:11,860
register called<font color="#CCCCCC"> the IDT our IDT register</font>

416
00:16:09,700 --> 00:16:13,570
which defines where that table is

417
00:16:11,860 --> 00:16:16,600
located<font color="#CCCCCC"> in memory</font><font color="#E5E5E5"> similar thing to the</font>

418
00:16:13,570 --> 00:16:18,070
ball<font color="#E5E5E5"> you've got this horrible mechanism</font>

419
00:16:16,600 --> 00:16:20,529
where for some reason their addresses

420
00:16:18,070 --> 00:16:22,240
<font color="#E5E5E5">are like in two parts</font><font color="#CCCCCC"> because somebody</font>

421
00:16:20,529 --> 00:16:26,279
an insult<font color="#E5E5E5"> thought that was</font><font color="#CCCCCC"> great</font><font color="#E5E5E5"> when</font>

422
00:16:22,240 --> 00:16:30,160
<font color="#CCCCCC">they smoking something weird and 70s so</font>

423
00:16:26,279 --> 00:16:31,510
you've got these IBT base which is the

424
00:16:30,160 --> 00:16:33,939
<font color="#E5E5E5">base</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the ID and you've got the</font>

425
00:16:31,510 --> 00:16:36,220
<font color="#E5E5E5">address which is</font><font color="#CCCCCC"> the limit so that's</font>

426
00:16:33,940 --> 00:16:39,310
your maximum obviously for those<font color="#E5E5E5"> you can</font>

427
00:16:36,220 --> 00:16:43,660
do it was maths we don't have<font color="#CCCCCC"> 65,536</font>

428
00:16:39,310 --> 00:16:45,130
handlers<font color="#E5E5E5"> that we could we then have all</font>

429
00:16:43,660 --> 00:16:46,569
these different gates which are little

430
00:16:45,130 --> 00:16:49,150
block<font color="#CCCCCC"> of memory which all impact the</font>

431
00:16:46,570 --> 00:16:52,120
same<font color="#CCCCCC"> well now</font><font color="#E5E5E5"> so these are some of our</font>

432
00:16:49,150 --> 00:16:54,069
notable interrupts like in<font color="#CCCCCC"> zero which is</font>

433
00:16:52,120 --> 00:16:55,750
a<font color="#E5E5E5"> divider of you divide by zero error in</font>

434
00:16:54,070 --> 00:16:57,760
<font color="#E5E5E5">user line code that</font><font color="#CCCCCC"> we'll call an</font>

435
00:16:55,750 --> 00:17:00,430
interrupt saying you did<font color="#E5E5E5"> a division</font>

436
00:16:57,760 --> 00:17:03,040
wrong what you're doing<font color="#E5E5E5"> and it handles</font>

437
00:17:00,430 --> 00:17:06,520
<font color="#CCCCCC">that single step so when you ever use a</font>

438
00:17:03,040 --> 00:17:07,899
debugger<font color="#E5E5E5"> he's just saying</font><font color="#CCCCCC"> saying</font><font color="#E5E5E5"> I want</font>

439
00:17:06,520 --> 00:17:09,939
<font color="#E5E5E5">to set to the next instruction so I want</font>

440
00:17:07,900 --> 00:17:11,170
<font color="#E5E5E5">to advance the PC by like one rather</font>

441
00:17:09,939 --> 00:17:14,350
than<font color="#E5E5E5"> anything else</font>

442
00:17:11,170 --> 00:17:16,270
external non masculine<font color="#E5E5E5"> into interrupts</font>

443
00:17:14,349 --> 00:17:18,819
which like the hardware ones so things

444
00:17:16,270 --> 00:17:20,410
we can't mask off<font color="#CCCCCC"> and ignore breakpoints</font>

445
00:17:18,819 --> 00:17:21,909
which is similar<font color="#CCCCCC"> to single stepping</font>

446
00:17:20,410 --> 00:17:23,490
except we set when<font color="#CCCCCC"> it goes to this</font>

447
00:17:21,910 --> 00:17:26,410
address<font color="#CCCCCC"> I</font><font color="#E5E5E5"> want you to tell me</font>

448
00:17:23,490 --> 00:17:27,670
overflow things<font color="#E5E5E5"> explain that general</font>

449
00:17:26,410 --> 00:17:30,400
protection fault<font color="#E5E5E5"> you wrote something you</font>

450
00:17:27,670 --> 00:17:31,960
did something wrong page<font color="#CCCCCC"> fault</font><font color="#E5E5E5"> pages and</font>

451
00:17:30,400 --> 00:17:34,210
current in memory<font color="#E5E5E5"> because</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> if</font>

452
00:17:31,960 --> 00:17:36,880
<font color="#E5E5E5">imagine with the</font><font color="#CCCCCC"> paging mechanism</font><font color="#E5E5E5"> you</font>

453
00:17:34,210 --> 00:17:40,000
want to get a page and that<font color="#CCCCCC"> hasn't been</font>

454
00:17:36,880 --> 00:17:41,650
loaded yet<font color="#E5E5E5"> it has to</font><font color="#CCCCCC"> generate an</font>

455
00:17:40,000 --> 00:17:44,770
interrupt to<font color="#E5E5E5"> tell memory that that</font>

456
00:17:41,650 --> 00:17:48,010
paging is loading<font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> Cisco the</font>

457
00:17:44,770 --> 00:17:49,540
one we're interested in mostly so this

458
00:17:48,010 --> 00:17:51,820
that's what the interrupter<font color="#CCCCCC"> scripta gate</font>

459
00:17:49,540 --> 00:17:54,490
looks like it's an 8 byte descriptor

460
00:17:51,820 --> 00:17:56,800
for some reason they decided<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> had</font>

461
00:17:54,490 --> 00:17:59,710
an offset there and there and those<font color="#CCCCCC"> two</font>

462
00:17:56,800 --> 00:18:02,379
combined<font color="#CCCCCC"> make our address</font><font color="#E5E5E5"> we also have</font>

463
00:17:59,710 --> 00:18:03,820
our segment segment selector which

464
00:18:02,380 --> 00:18:06,420
allows us to obviously select our

465
00:18:03,820 --> 00:18:08,409
segment<font color="#E5E5E5"> so we're writing in the right</font>

466
00:18:06,420 --> 00:18:12,370
<font color="#E5E5E5">I'm not</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> segmentation</font>

467
00:18:08,410 --> 00:18:14,500
<font color="#E5E5E5">because it's horrible and we have the</font>

468
00:18:12,370 --> 00:18:16,750
<font color="#CCCCCC">DPL</font><font color="#E5E5E5"> which is our descriptive privilege</font>

469
00:18:14,500 --> 00:18:21,250
level which is<font color="#E5E5E5"> the privilege</font><font color="#CCCCCC"> that we're</font>

470
00:18:16,750 --> 00:18:25,810
going into<font color="#E5E5E5"> so what's going on</font><font color="#CCCCCC"> oh you can</font>

471
00:18:21,250 --> 00:18:29,680
go up privilege so deep l0 is ring<font color="#CCCCCC"> 0 DB</font>

472
00:18:25,810 --> 00:18:32,350
<font color="#CCCCCC">l3 is ring 3 we can</font><font color="#E5E5E5"> go down a privilege</font>

473
00:18:29,680 --> 00:18:35,140
<font color="#E5E5E5">but we cannot go up a privilege in a</font>

474
00:18:32,350 --> 00:18:38,740
descriptor<font color="#E5E5E5"> we have to always go down so</font>

475
00:18:35,140 --> 00:18:40,570
you can't execute something from ring<font color="#CCCCCC"> 0</font>

476
00:18:38,740 --> 00:18:41,710
to execute some user mode code<font color="#E5E5E5"> because</font>

477
00:18:40,570 --> 00:18:44,470
then you're basically<font color="#CCCCCC"> handing Colonel</font>

478
00:18:41,710 --> 00:18:48,550
privilege to a user mode application

479
00:18:44,470 --> 00:18:52,330
which we<font color="#E5E5E5"> see can't do yeah whatever</font>

480
00:18:48,550 --> 00:18:54,010
so that's any of you<font color="#E5E5E5"> can see that's a</font>

481
00:18:52,330 --> 00:18:56,800
<font color="#E5E5E5">really crappy struct that</font><font color="#CCCCCC"> basically</font>

482
00:18:54,010 --> 00:18:59,080
<font color="#E5E5E5">defines the descriptor so if we copy the</font>

483
00:18:56,800 --> 00:19:00,460
<font color="#CCCCCC">memory into that we</font><font color="#E5E5E5"> can read it and the</font>

484
00:18:59,080 --> 00:19:03,810
next<font color="#CCCCCC"> thing that looks horrible because</font>

485
00:19:00,460 --> 00:19:05,890
it is<font color="#E5E5E5"> will get the descriptor number</font>

486
00:19:03,810 --> 00:19:07,929
<font color="#CCCCCC">that you've set it</font><font color="#E5E5E5"> so if you want to cut</font>

487
00:19:05,890 --> 00:19:10,120
the one you put in<font color="#CCCCCC"> one okay that one and</font>

488
00:19:07,930 --> 00:19:12,160
then obviously we at the bottom<font color="#E5E5E5"> we're</font>

489
00:19:10,120 --> 00:19:17,350
reconstructing<font color="#CCCCCC"> our address because</font><font color="#E5E5E5"> they</font>

490
00:19:12,160 --> 00:19:20,020
were weird so then we want<font color="#E5E5E5"> to replace it</font>

491
00:19:17,350 --> 00:19:21,340
<font color="#E5E5E5">so we take two</font><font color="#CCCCCC"> functions</font><font color="#E5E5E5"> we've got the</font>

492
00:19:20,020 --> 00:19:22,750
<font color="#E5E5E5">old function which</font><font color="#CCCCCC"> we've seen we have</font>

493
00:19:21,340 --> 00:19:24,310
<font color="#E5E5E5">the dress</font><font color="#CCCCCC"> do because you've got to have</font>

494
00:19:22,750 --> 00:19:25,690
<font color="#CCCCCC">the address and we've got a new function</font>

495
00:19:24,310 --> 00:19:27,159
<font color="#CCCCCC">which is I'll see they</font><font color="#E5E5E5"> dressed the new</font>

496
00:19:25,690 --> 00:19:28,750
function has<font color="#E5E5E5"> the same calling convention</font>

497
00:19:27,160 --> 00:19:30,100
<font color="#E5E5E5">s at the same linkage and then we got</font>

498
00:19:28,750 --> 00:19:34,890
the<font color="#CCCCCC"> interrupt that</font><font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to replace</font>

499
00:19:30,100 --> 00:19:37,360
<font color="#CCCCCC">with</font><font color="#E5E5E5"> so we take our new</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> and</font>

500
00:19:34,890 --> 00:19:41,260
we've got our pointer to the descriptor

501
00:19:37,360 --> 00:19:42,729
table<font color="#E5E5E5"> and we get a copy of so old FN</font>

502
00:19:41,260 --> 00:19:45,400
doesn't have anything in<font color="#E5E5E5"> it that's used</font>

503
00:19:42,730 --> 00:19:47,230
to store it so we pass it something to

504
00:19:45,400 --> 00:19:49,240
go and stall the existing descriptor in

505
00:19:47,230 --> 00:19:51,670
<font color="#E5E5E5">T so that</font><font color="#CCCCCC"> we can refer to</font><font color="#E5E5E5"> it later when</font>

506
00:19:49,240 --> 00:19:55,300
we<font color="#E5E5E5"> clean up and then we go back</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font>

507
00:19:51,670 --> 00:19:56,860
replace the ID t to our new address

508
00:19:55,300 --> 00:20:00,070
<font color="#CCCCCC">which is what</font><font color="#E5E5E5"> that line is doing and</font>

509
00:19:56,860 --> 00:20:02,439
then the<font color="#CCCCCC"> gpf is to say general</font>

510
00:20:00,070 --> 00:20:04,480
<font color="#E5E5E5">collection fault because if we try to do</font>

511
00:20:02,440 --> 00:20:05,530
that it's a read-only page<font color="#E5E5E5"> and it will</font>

512
00:20:04,480 --> 00:20:07,180
tell us<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's a read-only</font>

513
00:20:05,530 --> 00:20:08,440
we're doing a really<font color="#CCCCCC"> really nasty wait</font>

514
00:20:07,180 --> 00:20:10,930
when you just<font color="#E5E5E5"> get dumped and</font><font color="#CCCCCC"> you entire</font>

515
00:20:08,440 --> 00:20:15,430
machine<font color="#E5E5E5"> just crashes found out the hard</font>

516
00:20:10,930 --> 00:20:17,620
<font color="#CCCCCC">way quite a few times</font><font color="#E5E5E5"> so after the</font>

517
00:20:15,430 --> 00:20:19,480
descriptor table gets his address of

518
00:20:17,620 --> 00:20:22,209
what I want to load it then calls<font color="#CCCCCC"> a</font>

519
00:20:19,480 --> 00:20:24,190
piece of<font color="#E5E5E5"> stub</font><font color="#CCCCCC"> put error code and error</font>

520
00:20:22,210 --> 00:20:27,880
code is a handler which takes any

521
00:20:24,190 --> 00:20:28,990
descriptor<font color="#E5E5E5"> and deals with it</font><font color="#CCCCCC"> so we need</font>

522
00:20:27,880 --> 00:20:30,160
to<font color="#E5E5E5"> know error code is because that's</font>

523
00:20:28,990 --> 00:20:33,610
what we want<font color="#E5E5E5"> to jump</font><font color="#CCCCCC"> to you after we've</font>

524
00:20:30,160 --> 00:20:35,620
done our little rewrite so we want to

525
00:20:33,610 --> 00:20:37,330
write<font color="#CCCCCC"> our</font><font color="#E5E5E5"> little filtering</font><font color="#CCCCCC"> Handler stub</font>

526
00:20:35,620 --> 00:20:38,979
<font color="#E5E5E5">it has to be there's a lightweight is</font>

527
00:20:37,330 --> 00:20:40,120
you can<font color="#E5E5E5"> make it because obviously every</font>

528
00:20:38,980 --> 00:20:41,110
single time<font color="#CCCCCC"> in interrupts being called</font>

529
00:20:40,120 --> 00:20:42,879
<font color="#E5E5E5">this codes</font><font color="#CCCCCC"> being called so if you do</font>

530
00:20:41,110 --> 00:20:45,669
something<font color="#CCCCCC"> really nasty and big it will</font>

531
00:20:42,880 --> 00:20:50,020
take forever to run and it will cause

532
00:20:45,670 --> 00:20:54,610
problems we then rewrite the default<font color="#CCCCCC"> at</font>

533
00:20:50,020 --> 00:20:57,550
<font color="#E5E5E5">the existing handler to redirect to our</font>

534
00:20:54,610 --> 00:20:58,959
new handler<font color="#E5E5E5"> and then finally we jump to</font>

535
00:20:57,550 --> 00:21:00,730
the<font color="#E5E5E5"> error code so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to set it up</font>

536
00:20:58,960 --> 00:21:02,260
we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to pass our address in on the</font>

537
00:21:00,730 --> 00:21:04,660
stack and<font color="#E5E5E5"> then we have to jump to that</font>

538
00:21:02,260 --> 00:21:06,430
<font color="#E5E5E5">error code so to locate there a code</font>

539
00:21:04,660 --> 00:21:07,780
<font color="#E5E5E5">it's a bit more interesting we can</font><font color="#CCCCCC"> use</font>

540
00:21:06,430 --> 00:21:08,950
the system<font color="#CCCCCC"> got</font><font color="#E5E5E5"> map table because that</font>

541
00:21:07,780 --> 00:21:11,139
<font color="#E5E5E5">has all the kind of symbols and is a</font>

542
00:21:08,950 --> 00:21:15,790
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> symbol and that's great the only</font>

543
00:21:11,140 --> 00:21:16,810
problem<font color="#E5E5E5"> with that is that we have the</font>

544
00:21:15,790 --> 00:21:18,340
same issues we had before where you've

545
00:21:16,810 --> 00:21:20,590
<font color="#E5E5E5">been you've got why why do you want to</font>

546
00:21:18,340 --> 00:21:22,990
<font color="#E5E5E5">know Erica this that's really weird</font><font color="#CCCCCC"> and</font>

547
00:21:20,590 --> 00:21:25,240
it's not anywhere<font color="#CCCCCC"> near</font><font color="#E5E5E5"> as portable as</font>

548
00:21:22,990 --> 00:21:28,980
<font color="#E5E5E5">you want it to be so we can dynamically</font>

549
00:21:25,240 --> 00:21:31,390
locate it<font color="#E5E5E5"> by finding out what code</font>

550
00:21:28,980 --> 00:21:35,260
follows<font color="#E5E5E5"> error code so what error code is</font>

551
00:21:31,390 --> 00:21:38,200
<font color="#E5E5E5">so we grab 32 bytes of error code and</font>

552
00:21:35,260 --> 00:21:39,820
then we basically<font color="#E5E5E5"> signature that so then</font>

553
00:21:38,200 --> 00:21:44,050
we search a<font color="#E5E5E5"> relatively small like</font>

554
00:21:39,820 --> 00:21:45,429
thousand<font color="#E5E5E5"> 24 bytes of the table for that</font>

555
00:21:44,050 --> 00:21:46,720
piece of<font color="#CCCCCC"> code and</font><font color="#E5E5E5"> then we know the thing</font>

556
00:21:45,430 --> 00:21:48,910
at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> beginning of</font><font color="#E5E5E5"> that piece of code</font>

557
00:21:46,720 --> 00:21:50,620
that's<font color="#E5E5E5"> going to be our address for error</font>

558
00:21:48,910 --> 00:21:52,000
code and it's<font color="#E5E5E5"> extremely unlikely to get</font>

559
00:21:50,620 --> 00:21:53,860
<font color="#E5E5E5">the wrong thing and nobody ever changes</font>

560
00:21:52,000 --> 00:21:57,340
<font color="#CCCCCC">error code because it's so ingrained in</font>

561
00:21:53,860 --> 00:21:58,689
<font color="#E5E5E5">the kernel</font><font color="#CCCCCC"> and we know</font><font color="#E5E5E5"> because if you</font>

562
00:21:57,340 --> 00:22:01,389
look at<font color="#E5E5E5"> entry to s which is</font><font color="#CCCCCC"> part of</font><font color="#E5E5E5"> the</font>

563
00:21:58,690 --> 00:22:02,860
kernel<font color="#CCCCCC"> it will have divided</font><font color="#E5E5E5"> error which</font>

564
00:22:01,390 --> 00:22:05,200
is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first interrupt handler little</font>

565
00:22:02,860 --> 00:22:07,000
<font color="#E5E5E5">stop and then somewhere after that we</font>

566
00:22:05,200 --> 00:22:08,440
have error code so we know that<font color="#CCCCCC"> after</font>

567
00:22:07,000 --> 00:22:10,960
<font color="#CCCCCC">that it's</font><font color="#E5E5E5"> probably going to compile</font>

568
00:22:08,440 --> 00:22:14,350
after<font color="#E5E5E5"> that somewhere not too far</font><font color="#CCCCCC"> and</font>

569
00:22:10,960 --> 00:22:16,810
because<font color="#CCCCCC"> color</font><font color="#E5E5E5"> dress is like super big so</font>

570
00:22:14,350 --> 00:22:18,189
I actually I changed<font color="#CCCCCC"> out the lots</font>

571
00:22:16,810 --> 00:22:18,860
because<font color="#E5E5E5"> I looked and I got my number</font>

572
00:22:18,190 --> 00:22:21,200
wrong so I'm

573
00:22:18,860 --> 00:22:22,939
I'm not going to<font color="#CCCCCC"> claim anything but it's</font>

574
00:22:21,200 --> 00:22:25,789
it's pretty big is at least a gig or

575
00:22:22,940 --> 00:22:28,789
<font color="#E5E5E5">next</font><font color="#CCCCCC"> on 32 bit it's bigger than that</font>

576
00:22:25,789 --> 00:22:29,929
<font color="#CCCCCC">honor</font><font color="#E5E5E5"> the architectures so we don't want</font>

577
00:22:28,789 --> 00:22:31,309
<font color="#E5E5E5">to like search a gig because that'll</font>

578
00:22:29,929 --> 00:22:33,860
take forever<font color="#CCCCCC"> and that's really really</font>

579
00:22:31,309 --> 00:22:35,240
memory intensive and terrible<font color="#E5E5E5"> and we</font>

580
00:22:33,860 --> 00:22:38,510
don't with<font color="#E5E5E5"> the kernel because</font><font color="#CCCCCC"> they</font>

581
00:22:35,240 --> 00:22:43,340
kind<font color="#E5E5E5"> of with you and</font><font color="#CCCCCC"> Torvalds will</font>

582
00:22:38,510 --> 00:22:46,220
find you and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> will kill</font><font color="#CCCCCC"> at you cool</font>

583
00:22:43,340 --> 00:22:48,980
<font color="#E5E5E5">so this is as an extract from era dot s</font>

584
00:22:46,220 --> 00:22:51,409
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the error handler stuff top</font>

585
00:22:48,980 --> 00:22:53,779
thing is<font color="#E5E5E5"> a divided error handler if you</font>

586
00:22:51,409 --> 00:22:55,340
notice<font color="#CCCCCC"> it's super easy you just stick 0</font>

587
00:22:53,779 --> 00:22:57,889
on the stack<font color="#E5E5E5"> stick C address on the</font>

588
00:22:55,340 --> 00:23:00,260
stack<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then jumps to error code</font>

589
00:22:57,889 --> 00:23:02,120
<font color="#E5E5E5">obviously that's implied here and then</font>

590
00:23:00,260 --> 00:23:06,760
error code doesn't magic so we know that

591
00:23:02,120 --> 00:23:08,658
<font color="#E5E5E5">after devera</font><font color="#CCCCCC"> 0 sorry</font><font color="#E5E5E5"> div divided error</font>

592
00:23:06,760 --> 00:23:11,210
<font color="#E5E5E5">somewhere after that we're</font><font color="#CCCCCC"> probably</font>

593
00:23:08,659 --> 00:23:13,940
going to<font color="#E5E5E5"> have error code so we do is we</font>

594
00:23:11,210 --> 00:23:16,159
create<font color="#E5E5E5"> a glitter this is literally</font><font color="#CCCCCC"> just</font>

595
00:23:13,940 --> 00:23:17,570
gone<font color="#CCCCCC"> I wrote a little kind</font><font color="#E5E5E5"> of module</font>

596
00:23:16,159 --> 00:23:20,000
that<font color="#E5E5E5"> will basically just find the symbol</font>

597
00:23:17,570 --> 00:23:22,370
<font color="#CCCCCC">fire code take the PHA</font><font color="#E5E5E5"> two bytes out</font>

598
00:23:20,000 --> 00:23:24,169
copy them and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you use those</font><font color="#E5E5E5"> so this</font>

599
00:23:22,370 --> 00:23:29,809
<font color="#E5E5E5">is just the code that we're looking</font><font color="#CCCCCC"> for</font>

600
00:23:24,169 --> 00:23:31,340
that's it so we then look in<font color="#CCCCCC"> 1024</font><font color="#E5E5E5"> bytes</font>

601
00:23:29,809 --> 00:23:33,559
is pretty arbitrary<font color="#E5E5E5"> but it works so</font>

602
00:23:31,340 --> 00:23:36,559
search<font color="#CCCCCC"> for it</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> just search for</font>

603
00:23:33,559 --> 00:23:41,299
<font color="#CCCCCC">that 32 byte chunk in the thousand 24</font>

604
00:23:36,559 --> 00:23:45,500
bytes which is great<font color="#CCCCCC"> it's it works</font>

605
00:23:41,299 --> 00:23:47,539
<font color="#E5E5E5">that's all I can say</font><font color="#CCCCCC"> so the handler stub</font>

606
00:23:45,500 --> 00:23:49,279
<font color="#E5E5E5">needs to do some magic</font><font color="#CCCCCC"> because we need</font>

607
00:23:47,539 --> 00:23:50,450
to make<font color="#CCCCCC"> sure that we are filtering</font><font color="#E5E5E5"> out</font>

608
00:23:49,279 --> 00:23:53,929
stuff and<font color="#E5E5E5"> we have to write an assembly</font>

609
00:23:50,450 --> 00:23:55,639
which is<font color="#CCCCCC"> horrible so horrible we have to</font>

610
00:23:53,929 --> 00:23:58,730
make sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> everything all the state</font>

611
00:23:55,639 --> 00:24:03,129
is considered and like maintained which

612
00:23:58,730 --> 00:24:05,899
is great<font color="#E5E5E5"> so push flags</font><font color="#CCCCCC"> push registers</font>

613
00:24:03,130 --> 00:24:07,909
call the filtering code to check<font color="#E5E5E5"> do we</font>

614
00:24:05,899 --> 00:24:12,199
want to hook this thing<font color="#E5E5E5"> if it returns</font><font color="#CCCCCC"> 0</font>

615
00:24:07,909 --> 00:24:15,200
<font color="#E5E5E5">then we're good</font><font color="#CCCCCC"> jump to the default as a</font>

616
00:24:12,200 --> 00:24:16,760
normal if it jumps to<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> we want to</font>

617
00:24:15,200 --> 00:24:19,519
<font color="#E5E5E5">handle this particular case whatever</font>

618
00:24:16,760 --> 00:24:21,408
<font color="#CCCCCC">that case is and then we will pop</font><font color="#E5E5E5"> the</font>

619
00:24:19,519 --> 00:24:24,380
flags again and we will push the error

620
00:24:21,409 --> 00:24:26,120
code so you<font color="#E5E5E5"> push 0 and then we push the</font>

621
00:24:24,380 --> 00:24:27,919
address that<font color="#CCCCCC"> we want and then we</font><font color="#E5E5E5"> jumped</font>

622
00:24:26,120 --> 00:24:29,779
<font color="#E5E5E5">error code and that will do some magic</font>

623
00:24:27,919 --> 00:24:32,270
so<font color="#E5E5E5"> that kind of looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this is</font>

624
00:24:29,779 --> 00:24:32,960
<font color="#E5E5E5">horrible it's way worse like I've seen</font>

625
00:24:32,270 --> 00:24:35,389
<font color="#E5E5E5">this too</font><font color="#CCCCCC"> many times</font>

626
00:24:32,960 --> 00:24:36,830
it's disgusting<font color="#CCCCCC"> also the red actually</font>

627
00:24:35,390 --> 00:24:38,690
<font color="#E5E5E5">shows up really badly on there so just</font>

628
00:24:36,830 --> 00:24:42,260
ignore<font color="#E5E5E5"> it but basically what we're doing</font>

629
00:24:38,690 --> 00:24:43,940
<font color="#E5E5E5">is we're checking we're just checking</font>

630
00:24:42,260 --> 00:24:47,240
that the result<font color="#E5E5E5"> of that function which</font>

631
00:24:43,940 --> 00:24:49,100
is in EAX<font color="#E5E5E5"> is zero so if it's zero we</font>

632
00:24:47,240 --> 00:24:54,049
just jump to<font color="#CCCCCC"> our existing code</font><font color="#E5E5E5"> if it's</font>

633
00:24:49,100 --> 00:24:55,428
not zero<font color="#CCCCCC"> we jump to our handler the</font>

634
00:24:54,049 --> 00:24:56,990
other thing I<font color="#E5E5E5"> have to do is we have to</font>

635
00:24:55,429 --> 00:24:58,580
<font color="#E5E5E5">remove the</font><font color="#CCCCCC"> handle up because if we we</font>

636
00:24:56,990 --> 00:25:01,159
can't just like walk<font color="#E5E5E5"> away once we're</font>

637
00:24:58,580 --> 00:25:02,360
<font color="#E5E5E5">done if we if we if we're ever done</font><font color="#CCCCCC"> we</font>

638
00:25:01,159 --> 00:25:03,860
have to have a neat way of getting out

639
00:25:02,360 --> 00:25:05,629
and<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is most for debugging</font><font color="#CCCCCC"> purposes</font>

640
00:25:03,860 --> 00:25:08,539
<font color="#E5E5E5">so this is exactly the same as before</font>

641
00:25:05,630 --> 00:25:09,980
<font color="#CCCCCC">but</font><font color="#E5E5E5"> instead of stopping out any</font>

642
00:25:08,539 --> 00:25:11,960
addresses<font color="#CCCCCC"> just hopping the old address</font>

643
00:25:09,980 --> 00:25:17,029
for the address<font color="#CCCCCC"> that we've replaced</font><font color="#E5E5E5"> it</font>

644
00:25:11,960 --> 00:25:18,649
for before so this<font color="#E5E5E5"> is this</font><font color="#CCCCCC"> is a linkage</font>

645
00:25:17,029 --> 00:25:21,529
of<font color="#E5E5E5"> an existing</font><font color="#CCCCCC"> handler citizen in three</font>

646
00:25:18,649 --> 00:25:23,209
handler<font color="#CCCCCC"> that has the same</font><font color="#E5E5E5"> calling</font>

647
00:25:21,529 --> 00:25:25,399
convention as the previous<font color="#E5E5E5"> in three</font>

648
00:25:23,210 --> 00:25:27,890
handler except this<font color="#E5E5E5"> time it</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> prints</font>

649
00:25:25,399 --> 00:25:29,629
some stuff and jumps to the existing

650
00:25:27,890 --> 00:25:29,990
handler this is a different way of doing

651
00:25:29,630 --> 00:25:35,990
it

652
00:25:29,990 --> 00:25:38,149
<font color="#CCCCCC">SiC and all that</font><font color="#E5E5E5"> so we can also</font>

653
00:25:35,990 --> 00:25:40,190
yeah so that that was all kind of like

654
00:25:38,149 --> 00:25:46,580
generic interrupt e stuff<font color="#E5E5E5"> we can do that</font>

655
00:25:40,190 --> 00:25:48,350
for the in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> interrupt as well so we</font>

656
00:25:46,580 --> 00:25:50,389
<font color="#E5E5E5">want to basically filter out sis calls</font>

657
00:25:48,350 --> 00:25:52,189
because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Cisco convention stalls the</font>

658
00:25:50,390 --> 00:25:54,500
number of the<font color="#CCCCCC"> siskel in the EAX register</font>

659
00:25:52,190 --> 00:25:56,929
<font color="#E5E5E5">so if we want to read a particular</font>

660
00:25:54,500 --> 00:25:58,549
register<font color="#CCCCCC"> sorry a particular syscall</font><font color="#E5E5E5"> we</font>

661
00:25:56,929 --> 00:26:00,260
just check the e^x register for the one

662
00:25:58,549 --> 00:26:01,520
that we're<font color="#CCCCCC"> looking for and</font><font color="#E5E5E5"> that's super</font>

663
00:26:00,260 --> 00:26:04,610
low overhead that's like two

664
00:26:01,520 --> 00:26:05,960
instructions<font color="#E5E5E5"> and then we do the same</font>

665
00:26:04,610 --> 00:26:07,279
things before<font color="#CCCCCC"> we handle the interesting</font>

666
00:26:05,960 --> 00:26:10,750
cases and we<font color="#CCCCCC"> ignore all</font><font color="#E5E5E5"> other cases</font>

667
00:26:07,279 --> 00:26:13,820
which has nice lightweight thing but

668
00:26:10,750 --> 00:26:19,100
yeah it sucks because it's<font color="#CCCCCC"> super hard</font>

669
00:26:13,820 --> 00:26:20,809
<font color="#E5E5E5">and it fails so</font><font color="#CCCCCC"> much so</font><font color="#E5E5E5"> so much but</font>

670
00:26:19,100 --> 00:26:23,090
there's a better<font color="#E5E5E5"> way and it's portable</font>

671
00:26:20,809 --> 00:26:24,590
and<font color="#E5E5E5"> it's easier and all you can ignore</font>

672
00:26:23,090 --> 00:26:27,770
all<font color="#CCCCCC"> of that stuff I just said like</font>

673
00:26:24,590 --> 00:26:29,480
that's all crap<font color="#CCCCCC"> either of</font><font color="#E5E5E5"> it so we've</font>

674
00:26:27,770 --> 00:26:31,220
now got<font color="#E5E5E5"> a faster siskel mechanism this</font>

675
00:26:29,480 --> 00:26:32,809
is<font color="#CCCCCC"> walking by earlier this is the cisco</font>

676
00:26:31,220 --> 00:26:36,649
instruction and this is exit instruction

677
00:26:32,809 --> 00:26:38,690
so<font color="#CCCCCC"> Isis enter Estes X's instruction</font><font color="#E5E5E5"> so</font>

678
00:26:36,649 --> 00:26:40,070
<font color="#E5E5E5">we just call this very very similar</font>

679
00:26:38,690 --> 00:26:41,870
calling convention and then we just go

680
00:26:40,070 --> 00:26:44,299
<font color="#CCCCCC">syscall</font><font color="#E5E5E5"> and for example</font><font color="#CCCCCC"> if you're</font>

681
00:26:41,870 --> 00:26:46,370
importing a read function<font color="#E5E5E5"> g-dub see</font>

682
00:26:44,299 --> 00:26:46,879
<font color="#E5E5E5">already has the code for this G Lib C</font>

683
00:26:46,370 --> 00:26:48,050
<font color="#E5E5E5">will do this</font>

684
00:26:46,880 --> 00:26:49,310
automatically<font color="#E5E5E5"> it won't bother going for</font>

685
00:26:48,050 --> 00:26:51,530
the old interrupt<font color="#E5E5E5"> handler</font><font color="#CCCCCC"> give a new one</font>

686
00:26:49,310 --> 00:26:53,929
<font color="#E5E5E5">because it's not terrible</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we have</font>

687
00:26:51,530 --> 00:26:57,500
dedicated<font color="#E5E5E5"> machine registers</font><font color="#CCCCCC"> that we can</font>

688
00:26:53,930 --> 00:27:00,110
store the code or<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cs segment</font>

689
00:26:57,500 --> 00:27:01,850
register<font color="#E5E5E5"> the stack</font><font color="#CCCCCC"> pointer and</font><font color="#E5E5E5"> the base</font>

690
00:27:00,110 --> 00:27:03,199
pointer<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> we jump back we</font>

691
00:27:01,850 --> 00:27:04,399
know exactly where<font color="#E5E5E5"> we are and there's no</font>

692
00:27:03,200 --> 00:27:06,260
<font color="#E5E5E5">risk of</font><font color="#CCCCCC"> corruptions who haven't popped</font>

693
00:27:04,400 --> 00:27:10,700
anything onto<font color="#CCCCCC"> the stack this is all</font><font color="#E5E5E5"> just</font>

694
00:27:06,260 --> 00:27:13,610
stored in registers<font color="#E5E5E5"> which is great so we</font>

695
00:27:10,700 --> 00:27:14,720
can<font color="#E5E5E5"> hook x86 64 Siskel's because</font>

696
00:27:13,610 --> 00:27:16,490
obviously that previous technique is

697
00:27:14,720 --> 00:27:20,240
redundant<font color="#CCCCCC"> because nobody calls like that</font>

698
00:27:16,490 --> 00:27:21,590
<font color="#CCCCCC">so because g-dub C won't do that if you</font>

699
00:27:20,240 --> 00:27:22,790
hook<font color="#E5E5E5"> the interrupt handler it will just</font>

700
00:27:21,590 --> 00:27:26,570
<font color="#E5E5E5">get ignored because no one's actually</font>

701
00:27:22,790 --> 00:27:28,639
<font color="#E5E5E5">using it Nate anymore and there's we all</font>

702
00:27:26,570 --> 00:27:30,020
we need<font color="#E5E5E5"> to do is find that</font><font color="#CCCCCC"> siskel table</font>

703
00:27:28,640 --> 00:27:31,550
which<font color="#CCCCCC"> is like the one before</font><font color="#E5E5E5"> but</font>

704
00:27:30,020 --> 00:27:35,150
<font color="#E5E5E5">slightly</font><font color="#CCCCCC"> different in a different place</font>

705
00:27:31,550 --> 00:27:36,950
<font color="#CCCCCC">so we search for</font><font color="#E5E5E5"> the magic bytes and</font>

706
00:27:35,150 --> 00:27:38,930
then we take the<font color="#CCCCCC"> address after</font><font color="#E5E5E5"> this</font>

707
00:27:36,950 --> 00:27:40,610
magic bytes<font color="#E5E5E5"> so we know that the address</font>

708
00:27:38,930 --> 00:27:43,130
will exist in this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> called dispatch</font>

709
00:27:40,610 --> 00:27:46,879
code after those<font color="#E5E5E5"> so we search</font><font color="#CCCCCC"> for them</font>

710
00:27:43,130 --> 00:27:49,910
<font color="#E5E5E5">let me take the address and then we do</font>

711
00:27:46,880 --> 00:27:54,470
<font color="#E5E5E5">something that's</font><font color="#CCCCCC"> much better</font>

712
00:27:49,910 --> 00:27:56,420
so there's the ELSA register which is

713
00:27:54,470 --> 00:27:58,460
<font color="#CCCCCC">the long something something something</font>

714
00:27:56,420 --> 00:28:00,830
something<font color="#E5E5E5"> something which is the</font><font color="#CCCCCC"> fiscal</font>

715
00:27:58,460 --> 00:28:03,770
<font color="#E5E5E5">target so that</font><font color="#CCCCCC"> this is like our previous</font>

716
00:28:00,830 --> 00:28:06,409
IDT instruction so<font color="#E5E5E5"> we can call</font><font color="#CCCCCC"> to find</font>

717
00:28:03,770 --> 00:28:10,070
<font color="#CCCCCC">out where that is</font><font color="#E5E5E5"> and then we</font><font color="#CCCCCC"> copy the</font>

718
00:28:06,410 --> 00:28:11,720
code<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that chunk after that chunk</font><font color="#CCCCCC"> 500</font>

719
00:28:10,070 --> 00:28:12,860
bytes pretty arbitrary<font color="#CCCCCC"> and then we</font>

720
00:28:11,720 --> 00:28:15,410
search for the magic numbers we want

721
00:28:12,860 --> 00:28:17,120
<font color="#CCCCCC">like we</font><font color="#E5E5E5"> did with</font><font color="#CCCCCC"> error code and then we</font>

722
00:28:15,410 --> 00:28:18,980
<font color="#E5E5E5">return the</font><font color="#CCCCCC"> address that</font><font color="#E5E5E5"> exists after</font>

723
00:28:17,120 --> 00:28:21,169
<font color="#E5E5E5">this so</font><font color="#CCCCCC"> eight bytes after</font><font color="#E5E5E5"> these three</font>

724
00:28:18,980 --> 00:28:23,300
bytes<font color="#E5E5E5"> we know with a pretty good</font>

725
00:28:21,170 --> 00:28:27,380
certainty<font color="#E5E5E5"> that that's what we want as</font>

726
00:28:23,300 --> 00:28:28,970
our<font color="#CCCCCC"> sis call table address it kind of</font>

727
00:28:27,380 --> 00:28:34,340
looks like this<font color="#CCCCCC"> actually does</font><font color="#E5E5E5"> look</font>

728
00:28:28,970 --> 00:28:36,380
terrible<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> readouts are we the mem</font>

729
00:28:34,340 --> 00:28:38,209
mem function<font color="#E5E5E5"> basically just searches for</font>

730
00:28:36,380 --> 00:28:40,250
<font color="#E5E5E5">those bytes in memory and then returns</font>

731
00:28:38,210 --> 00:28:42,860
that it's not<font color="#E5E5E5"> know which means you found</font>

732
00:28:40,250 --> 00:28:45,230
<font color="#E5E5E5">it we do some weird pointer casting and</font>

733
00:28:42,860 --> 00:28:46,909
then<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> back so all we're doing is</font>

734
00:28:45,230 --> 00:28:48,770
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> basically saying here's a</font><font color="#E5E5E5"> chunk of</font>

735
00:28:46,910 --> 00:28:51,020
<font color="#E5E5E5">memory find these three bytes get eight</font>

736
00:28:48,770 --> 00:28:56,930
bytes<font color="#CCCCCC"> after that</font><font color="#E5E5E5"> and then return that as</font>

737
00:28:51,020 --> 00:28:58,910
an<font color="#E5E5E5"> address</font><font color="#CCCCCC"> so that's pretty easy the</font>

738
00:28:56,930 --> 00:29:00,220
hooking is even<font color="#CCCCCC"> easier because</font><font color="#E5E5E5"> all we</font>

739
00:28:58,910 --> 00:29:02,230
have to do<font color="#E5E5E5"> here</font>

740
00:29:00,220 --> 00:29:03,850
we just have to take that<font color="#CCCCCC"> siskel table</font>

741
00:29:02,230 --> 00:29:05,320
<font color="#E5E5E5">address so</font><font color="#CCCCCC"> Cisco table address you</font><font color="#E5E5E5"> see</font>

742
00:29:03,850 --> 00:29:07,928
here is the one that<font color="#CCCCCC"> we just got</font><font color="#E5E5E5"> and</font>

743
00:29:05,320 --> 00:29:11,500
then<font color="#E5E5E5"> we find the offset for in this case</font>

744
00:29:07,929 --> 00:29:13,900
<font color="#E5E5E5">the open Cisco and then we hook our new</font>

745
00:29:11,500 --> 00:29:15,940
open function<font color="#E5E5E5"> to where the existing</font><font color="#CCCCCC"> open</font>

746
00:29:13,900 --> 00:29:19,419
function<font color="#E5E5E5"> is this is all function point</font>

747
00:29:15,940 --> 00:29:21,059
of magic likewise we have<font color="#E5E5E5"> to unhook it</font>

748
00:29:19,419 --> 00:29:25,179
same thing you take the existing call

749
00:29:21,059 --> 00:29:29,320
function<font color="#E5E5E5"> and overwrite it</font><font color="#CCCCCC"> and then we're</font>

750
00:29:25,179 --> 00:29:32,500
all<font color="#E5E5E5"> golden so I think now's a good time</font>

751
00:29:29,320 --> 00:29:34,960
you're<font color="#E5E5E5"> falling asleep for that</font><font color="#CCCCCC"> MV you</font>

752
00:29:32,500 --> 00:29:38,110
haven't slept<font color="#E5E5E5"> in days</font><font color="#CCCCCC"> so we're gonna</font>

753
00:29:34,960 --> 00:29:39,190
we're gonna have a demo<font color="#CCCCCC"> but I do have</font>

754
00:29:38,110 --> 00:29:48,010
terrible luck<font color="#E5E5E5"> so we're going to do</font><font color="#CCCCCC"> it</font>

755
00:29:39,190 --> 00:29:54,280
live is it<font color="#CCCCCC"> me root I wasn't married all</font>

756
00:29:48,010 --> 00:29:55,600
<font color="#CCCCCC">right so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> really hard I just</font>

757
00:29:54,280 --> 00:30:00,129
<font color="#E5E5E5">realized because I can't see what I'm</font>

758
00:29:55,600 --> 00:30:13,750
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> all right if that's it doesn't say</font>

759
00:30:00,130 --> 00:30:15,760
make install then so again this one we

760
00:30:13,750 --> 00:30:18,340
could<font color="#E5E5E5"> no messages and if</font><font color="#CCCCCC"> we go</font><font color="#E5E5E5"> D message</font>

761
00:30:15,760 --> 00:30:20,470
we should have a little<font color="#CCCCCC"> Britt thing</font>

762
00:30:18,340 --> 00:30:25,320
that's saying<font color="#E5E5E5"> that it worked so</font><font color="#CCCCCC"> we've</font>

763
00:30:20,470 --> 00:30:29,140
got a picture<font color="#E5E5E5"> where's the mouse</font><font color="#CCCCCC"> okay</font>

764
00:30:25,320 --> 00:30:33,970
<font color="#E5E5E5">this is this is way easier</font><font color="#CCCCCC"> so this is a</font>

765
00:30:29,140 --> 00:30:40,210
<font color="#E5E5E5">little picture</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> field and are you</font>

766
00:30:33,970 --> 00:30:48,010
serious<font color="#CCCCCC"> No are you suck that's the worst</font>

767
00:30:40,210 --> 00:30:50,559
demo ever<font color="#CCCCCC"> zero out of ten</font><font color="#E5E5E5"> hang on one of</font>

768
00:30:48,010 --> 00:30:52,750
<font color="#CCCCCC">several</font><font color="#E5E5E5"> things has</font><font color="#CCCCCC"> happened</font><font color="#E5E5E5"> I probably</font>

769
00:30:50,559 --> 00:30:54,190
put it somewhere I shouldn't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> this</font>

770
00:30:52,750 --> 00:30:57,010
might be a super quick fix

771
00:30:54,190 --> 00:30:58,840
oh it's so super quick fix<font color="#CCCCCC"> I totally</font>

772
00:30:57,010 --> 00:31:00,400
don't<font color="#CCCCCC"> buy you son</font>

773
00:30:58,840 --> 00:31:01,870
I personally in the temp directory<font color="#CCCCCC"> and</font>

774
00:31:00,400 --> 00:31:03,130
it got deleted<font color="#E5E5E5"> so when I tried to</font>

775
00:31:01,870 --> 00:31:05,559
<font color="#E5E5E5">replace the thing that was in the temp</font>

776
00:31:03,130 --> 00:31:10,690
directory<font color="#CCCCCC"> it's not there anymore</font><font color="#E5E5E5"> that's</font>

777
00:31:05,559 --> 00:31:13,660
I shouldn't reboot in my machine<font color="#E5E5E5"> I'm not</font>

778
00:31:10,690 --> 00:31:16,930
<font color="#E5E5E5">gonna fix that I'm lazy</font>

779
00:31:13,660 --> 00:31:17,790
that's super sucks right<font color="#E5E5E5"> so that's not</font>

780
00:31:16,930 --> 00:31:36,100
<font color="#E5E5E5">what</font><font color="#CCCCCC"> I want</font>

781
00:31:17,790 --> 00:31:37,899
how do I undo right<font color="#E5E5E5"> yeah good so if</font>

782
00:31:36,100 --> 00:31:40,120
you've got<font color="#E5E5E5"> mirror</font><font color="#CCCCCC"> oh I'll take</font><font color="#E5E5E5"> a mirror</font>

783
00:31:37,900 --> 00:31:43,690
<font color="#E5E5E5">like right</font><font color="#CCCCCC"> out in the</font><font color="#E5E5E5"> middle</font><font color="#CCCCCC"> that'd be</font>

784
00:31:40,120 --> 00:31:46,360
perfect<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> would've</font><font color="#E5E5E5"> been at</font>

785
00:31:43,690 --> 00:31:50,080
all what if it<font color="#E5E5E5"> works</font><font color="#CCCCCC"> well but</font><font color="#E5E5E5"> it didn't</font>

786
00:31:46,360 --> 00:31:52,570
<font color="#CCCCCC">so that</font><font color="#E5E5E5"> kind of works anyway right okay</font>

787
00:31:50,080 --> 00:31:55,929
what should have happened is<font color="#CCCCCC"> that boy</font>

788
00:31:52,570 --> 00:31:58,000
you should have<font color="#E5E5E5"> come up so basically</font>

789
00:31:55,930 --> 00:32:00,910
<font color="#E5E5E5">what we</font><font color="#CCCCCC"> did there was we hoped that open</font>

790
00:31:58,000 --> 00:32:03,010
<font color="#CCCCCC">function I didn't</font><font color="#E5E5E5"> cover</font><font color="#CCCCCC"> that we hook the</font>

791
00:32:00,910 --> 00:32:04,720
open function<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that if we</font><font color="#E5E5E5"> found</font>

792
00:32:03,010 --> 00:32:07,660
anything with the word field on it and

793
00:32:04,720 --> 00:32:10,210
the extension jpg<font color="#E5E5E5"> we replaced it with</font>

794
00:32:07,660 --> 00:32:13,000
our<font color="#E5E5E5"> double picture intent which wasn't</font>

795
00:32:10,210 --> 00:32:16,030
<font color="#CCCCCC">in temp which</font><font color="#E5E5E5"> is why it disappeared as</font>

796
00:32:13,000 --> 00:32:17,770
<font color="#CCCCCC">the worst demo</font><font color="#E5E5E5"> ever seen so disappointed</font>

797
00:32:16,030 --> 00:32:20,889
with<font color="#E5E5E5"> myself and then we just call the</font>

798
00:32:17,770 --> 00:32:24,280
number<font color="#CCCCCC"> one so basically we just take the</font>

799
00:32:20,890 --> 00:32:26,050
string<font color="#E5E5E5"> that says this open this file we</font>

800
00:32:24,280 --> 00:32:28,810
just<font color="#CCCCCC"> replace that</font><font color="#E5E5E5"> with our file if it</font>

801
00:32:26,050 --> 00:32:33,100
has<font color="#E5E5E5"> that condition I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> see if I</font>

802
00:32:28,810 --> 00:32:36,550
can get this<font color="#E5E5E5"> working layer</font><font color="#CCCCCC"> so after that</font>

803
00:32:33,100 --> 00:32:42,129
ridiculously disappointing demo which I

804
00:32:36,550 --> 00:32:44,770
probably actually time to fix okay<font color="#CCCCCC"> I'm</font>

805
00:32:42,130 --> 00:32:49,930
gonna<font color="#E5E5E5"> fix it</font><font color="#CCCCCC"> I'm gonna fix it</font><font color="#E5E5E5"> fix</font><font color="#CCCCCC"> it fix</font>

806
00:32:44,770 --> 00:32:51,930
<font color="#E5E5E5">it fix it fix it it's going</font><font color="#CCCCCC"> to be a</font>

807
00:32:49,930 --> 00:32:54,220
really terrible one as well<font color="#E5E5E5"> because I a</font>

808
00:32:51,930 --> 00:33:04,870
you a JPEG<font color="#CCCCCC"> you</font><font color="#E5E5E5"> better be a</font><font color="#CCCCCC"> date the</font>

809
00:32:54,220 --> 00:33:06,550
higher your JPEG<font color="#E5E5E5"> amazing no because they</font>

810
00:33:04,870 --> 00:33:08,560
were just<font color="#E5E5E5"> calling open all we're saying</font>

811
00:33:06,550 --> 00:33:10,240
is you've asked for<font color="#E5E5E5"> this file and I'm</font>

812
00:33:08,560 --> 00:33:14,250
like well no we're having<font color="#E5E5E5"> this file</font>

813
00:33:10,240 --> 00:33:14,250
instead it works

814
00:33:18,830 --> 00:33:26,609
we can totally<font color="#E5E5E5"> do this how are</font><font color="#CCCCCC"> you it's</font>

815
00:33:25,289 --> 00:33:37,590
so much more<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> when people</font>

816
00:33:26,609 --> 00:33:39,718
watching you<font color="#E5E5E5"> everybody look away note to</font>

817
00:33:37,590 --> 00:33:40,978
<font color="#E5E5E5">self don't put things in the temp</font>

818
00:33:39,719 --> 00:33:48,379
directory<font color="#E5E5E5"> they will get</font><font color="#CCCCCC"> delay</font><font color="#E5E5E5"> it</font>

819
00:33:40,979 --> 00:33:48,379
probably all right okay so<font color="#CCCCCC"> now that</font>

820
00:33:48,649 --> 00:34:06,658
let's try that again<font color="#E5E5E5"> okay anybody</font><font color="#CCCCCC"> oh</font>

821
00:33:54,509 --> 00:34:08,190
it's on the<font color="#E5E5E5"> spring yes yes right you do</font>

822
00:34:06,659 --> 00:34:11,309
really secret hard and then the

823
00:34:08,190 --> 00:34:12,599
really easy breaks right so so<font color="#E5E5E5"> just</font>

824
00:34:11,309 --> 00:34:16,220
to show<font color="#CCCCCC"> that that wasn't</font><font color="#E5E5E5"> actually just</font>

825
00:34:12,599 --> 00:34:23,450
some weird<font color="#CCCCCC"> if I do make</font><font color="#E5E5E5"> the</font>

826
00:34:16,219 --> 00:34:30,449
<font color="#E5E5E5">module</font><font color="#CCCCCC"> so if you go back</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> that same</font>

827
00:34:23,449 --> 00:34:32,098
directory and<font color="#E5E5E5"> open that picture the</font>

828
00:34:30,449 --> 00:34:35,098
window<font color="#CCCCCC"> shitty</font><font color="#E5E5E5"> field think it's just a</font>

829
00:34:32,099 --> 00:34:45,659
normal<font color="#E5E5E5"> file okay I hope I hope that got</font>

830
00:34:35,099 --> 00:34:48,569
them the concept across sick absolutely

831
00:34:45,659 --> 00:34:51,809
<font color="#E5E5E5">I mean from</font><font color="#CCCCCC"> that I could have said give</font>

832
00:34:48,569 --> 00:34:54,329
<font color="#E5E5E5">the calling protest root privileges</font><font color="#CCCCCC"> I</font>

833
00:34:51,809 --> 00:34:56,190
could just change the<font color="#CCCCCC"> cred structure in</font>

834
00:34:54,329 --> 00:34:57,539
memory<font color="#CCCCCC"> i</font><font color="#E5E5E5"> the reason</font><font color="#CCCCCC"> i'm not doing</font><font color="#E5E5E5"> that</font>

835
00:34:56,190 --> 00:34:59,099
because<font color="#CCCCCC"> i tried</font><font color="#E5E5E5"> doing that and i kept</font>

836
00:34:57,539 --> 00:35:02,069
dropping the stack and<font color="#CCCCCC"> i didn't get</font><font color="#E5E5E5"> time</font>

837
00:34:59,099 --> 00:35:08,099
to fix it<font color="#E5E5E5"> so that's why because kernel</font>

838
00:35:02,069 --> 00:35:11,009
stuff is really<font color="#CCCCCC"> really hard knowing</font>

839
00:35:08,099 --> 00:35:27,440
<font color="#E5E5E5">you're like autonomous</font><font color="#CCCCCC"> I do know how to</font>

840
00:35:11,010 --> 00:35:33,350
computer honest sort<font color="#E5E5E5"> of well we made it</font>

841
00:35:27,440 --> 00:35:35,900
so do<font color="#E5E5E5"> this we did this yeah we did no we</font>

842
00:35:33,350 --> 00:35:38,330
didn't ever did so the one thing<font color="#E5E5E5"> I</font>

843
00:35:35,900 --> 00:35:41,060
thought<font color="#E5E5E5"> to mention this slide</font><font color="#CCCCCC"> Reid MSR</font>

844
00:35:38,330 --> 00:35:42,830
is a<font color="#E5E5E5"> dedicated instruction and we do</font>

845
00:35:41,060 --> 00:35:44,630
read MSR and<font color="#E5E5E5"> then we give it the machine</font>

846
00:35:42,830 --> 00:35:46,040
<font color="#E5E5E5">register which</font><font color="#CCCCCC"> is just a hex code we</font>

847
00:35:44,630 --> 00:35:47,270
basically say read<font color="#E5E5E5"> this machine register</font>

848
00:35:46,040 --> 00:35:52,700
that's the thing<font color="#CCCCCC"> that we're doing</font>

849
00:35:47,270 --> 00:35:57,890
instead<font color="#E5E5E5"> of the IDT stuff</font><font color="#CCCCCC"> okay so did</font>

850
00:35:52,700 --> 00:36:00,410
<font color="#CCCCCC">alive</font><font color="#E5E5E5"> it failed and then what cool so we</font>

851
00:35:57,890 --> 00:36:02,270
replaced it<font color="#E5E5E5"> and we put in our own image</font>

852
00:36:00,410 --> 00:36:03,710
<font color="#E5E5E5">and it's great patrolling I try to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> a</font>

853
00:36:02,270 --> 00:36:05,210
<font color="#E5E5E5">rickroll last night</font><font color="#CCCCCC"> and was like that's</font>

854
00:36:03,710 --> 00:36:07,460
<font color="#E5E5E5">great</font><font color="#CCCCCC"> but I realized</font><font color="#E5E5E5"> that the sound</font>

855
00:36:05,210 --> 00:36:08,420
probably wouldn't go through<font color="#E5E5E5"> so it would</font>

856
00:36:07,460 --> 00:36:09,910
be really<font color="#E5E5E5"> terrible</font><font color="#CCCCCC"> in shooting my</font>

857
00:36:08,420 --> 00:36:12,800
speakers<font color="#E5E5E5"> whatever</font>

858
00:36:09,910 --> 00:36:14,029
so because it's a security<font color="#E5E5E5"> conference</font>

859
00:36:12,800 --> 00:36:17,090
<font color="#E5E5E5">we're putting into them what detection</font>

860
00:36:14,030 --> 00:36:18,410
<font color="#CCCCCC">how do you text up like</font><font color="#E5E5E5"> this one the</font>

861
00:36:17,090 --> 00:36:20,210
assumption is if it's<font color="#E5E5E5"> in the kernel and</font>

862
00:36:18,410 --> 00:36:21,529
somebody's smarter because I mean the

863
00:36:20,210 --> 00:36:23,030
guys are<font color="#E5E5E5"> doing this for a living</font><font color="#CCCCCC"> way</font>

864
00:36:21,530 --> 00:36:25,850
<font color="#E5E5E5">smarter than me and they're</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> what</font>

865
00:36:23,030 --> 00:36:27,230
they know this year and they<font color="#E5E5E5"> will know</font>

866
00:36:25,850 --> 00:36:29,330
exactly<font color="#E5E5E5"> how to prevent you from doing</font>

867
00:36:27,230 --> 00:36:30,980
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just compete keep keep</font>

868
00:36:29,330 --> 00:36:34,130
hooking things until there's nothing

869
00:36:30,980 --> 00:36:36,260
left of the original kernel<font color="#E5E5E5"> till they</font>

870
00:36:34,130 --> 00:36:39,220
are<font color="#E5E5E5"> in the kernel</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> right</font>

871
00:36:36,260 --> 00:36:39,220
over everything<font color="#CCCCCC"> it's great</font>

872
00:36:39,640 --> 00:36:44,629
Cygnet just scanning<font color="#E5E5E5"> symbol scanning</font>

873
00:36:42,830 --> 00:36:46,460
that's always<font color="#CCCCCC"> works you can compare the</font>

874
00:36:44,630 --> 00:36:47,510
kernel symbols<font color="#E5E5E5"> one of the biggest things</font>

875
00:36:46,460 --> 00:36:48,920
and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> something Windows does</font>

876
00:36:47,510 --> 00:36:51,110
really well<font color="#CCCCCC"> windows you should be crap</font>

877
00:36:48,920 --> 00:36:53,440
like<font color="#E5E5E5"> 10 years ago</font><font color="#CCCCCC"> now it's actually I'd</font>

878
00:36:51,110 --> 00:36:56,240
say<font color="#E5E5E5"> for security it's one of the best</font>

879
00:36:53,440 --> 00:36:57,620
sign drivers sign drivers all the time

880
00:36:56,240 --> 00:36:58,520
<font color="#E5E5E5">because you can't do an injection you</font>

881
00:36:57,620 --> 00:36:59,839
<font color="#CCCCCC">have to make sure that somebody</font>

882
00:36:58,520 --> 00:37:02,390
authenticated that driver you're not

883
00:36:59,840 --> 00:37:05,030
just loading it<font color="#E5E5E5"> from Bob in some dodgy</font>

884
00:37:02,390 --> 00:37:08,240
country and<font color="#CCCCCC"> lease in Europe from</font><font color="#E5E5E5"> local</font>

885
00:37:05,030 --> 00:37:09,440
<font color="#CCCCCC">Bob but it basically</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> just that layer</font>

886
00:37:08,240 --> 00:37:11,450
to<font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> that anything that goes</font><font color="#CCCCCC"> in</font>

887
00:37:09,440 --> 00:37:13,550
<font color="#CCCCCC">the kernel is is good and we know</font>

888
00:37:11,450 --> 00:37:14,089
cryptographically<font color="#E5E5E5"> that it's good that's</font>

889
00:37:13,550 --> 00:37:18,320
<font color="#E5E5E5">great</font>

890
00:37:14,090 --> 00:37:19,820
you can do<font color="#CCCCCC"> anything</font><font color="#E5E5E5"> else the the biggest</font>

891
00:37:18,320 --> 00:37:22,340
things they<font color="#E5E5E5"> don't get</font><font color="#CCCCCC"> a rootkit</font><font color="#E5E5E5"> on your</font>

892
00:37:19,820 --> 00:37:25,040
<font color="#E5E5E5">machine or if you're running systems but</font>

893
00:37:22,340 --> 00:37:26,930
in all seriousness if you're running a

894
00:37:25,040 --> 00:37:29,029
<font color="#E5E5E5">system and somebody can get root you</font>

895
00:37:26,930 --> 00:37:31,100
already pound<font color="#E5E5E5"> like you're super pound so</font>

896
00:37:29,030 --> 00:37:31,850
you<font color="#CCCCCC"> kind of want to</font><font color="#E5E5E5"> make sure that that</font>

897
00:37:31,100 --> 00:37:33,350
doesn't happen

898
00:37:31,850 --> 00:37:36,130
obviously it might and you need to go to

899
00:37:33,350 --> 00:37:39,920
deal with<font color="#CCCCCC"> those cases but the best</font>

900
00:37:36,130 --> 00:37:41,150
mitigation is<font color="#E5E5E5"> prevention I guess don't</font>

901
00:37:39,920 --> 00:37:43,880
<font color="#CCCCCC">Lane you'll go ruining machine</font>

902
00:37:41,150 --> 00:37:46,819
run things in containers<font color="#CCCCCC"> containers</font>

903
00:37:43,880 --> 00:37:47,990
<font color="#E5E5E5">great</font><font color="#CCCCCC"> it is the</font><font color="#E5E5E5"> best thing ever</font><font color="#CCCCCC"> so that</font>

904
00:37:46,819 --> 00:37:49,960
you they think<font color="#CCCCCC"> they've got root but I</font>

905
00:37:47,990 --> 00:37:55,069
haven't<font color="#E5E5E5"> got root that's pretty cool</font>

906
00:37:49,960 --> 00:37:58,130
other things<font color="#CCCCCC"> I hadn't done here you can</font>

907
00:37:55,069 --> 00:37:59,749
use<font color="#CCCCCC"> net filter too so the communication</font>

908
00:37:58,130 --> 00:38:01,039
mechanism<font color="#E5E5E5"> had there was we call a system</font>

909
00:37:59,749 --> 00:38:02,689
<font color="#CCCCCC">call but we have still</font><font color="#E5E5E5"> have to be an</font>

910
00:38:01,039 --> 00:38:04,490
unprivileged user on the system to do

911
00:38:02,690 --> 00:38:06,440
stuff we can do over the<font color="#E5E5E5"> network as well</font>

912
00:38:04,490 --> 00:38:08,089
<font color="#E5E5E5">so we can</font><font color="#CCCCCC"> use net filter to say if</font>

913
00:38:06,440 --> 00:38:11,630
somebody<font color="#CCCCCC"> sends us a ping packet like</font><font color="#E5E5E5"> an</font>

914
00:38:08,089 --> 00:38:13,069
<font color="#CCCCCC">Icee Icee PM ICMP packet that</font><font color="#E5E5E5"> has a</font>

915
00:38:11,630 --> 00:38:16,910
<font color="#E5E5E5">payload because they can have payloads</font>

916
00:38:13,069 --> 00:38:18,650
<font color="#E5E5E5">we</font><font color="#CCCCCC"> boom</font><font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> we put in</font><font color="#E5E5E5"> some magic bytes</font>

917
00:38:16,910 --> 00:38:22,220
<font color="#CCCCCC">I drank so much relentless</font><font color="#E5E5E5"> hurl it was</font>

918
00:38:18,650 --> 00:38:24,289
awful<font color="#CCCCCC"> we've put some magic bytes</font><font color="#E5E5E5"> and if</font>

919
00:38:22,220 --> 00:38:25,609
the packet has<font color="#E5E5E5"> those magic bytes we</font>

920
00:38:24,289 --> 00:38:27,950
filter out for it<font color="#E5E5E5"> and then we call some</font>

921
00:38:25,609 --> 00:38:29,509
special source<font color="#E5E5E5"> that basically means that</font>

922
00:38:27,950 --> 00:38:31,279
<font color="#E5E5E5">over the network anywhere as long as you</font>

923
00:38:29,509 --> 00:38:32,930
can send a pink the<font color="#CCCCCC"> machine and it's got</font>

924
00:38:31,279 --> 00:38:35,269
the rootkit installed you<font color="#CCCCCC"> can do</font>

925
00:38:32,930 --> 00:38:36,710
whatever you want<font color="#CCCCCC"> that's pretty cool</font>

926
00:38:35,269 --> 00:38:40,939
you<font color="#E5E5E5"> can also do some stuff at the file</font>

927
00:38:36,710 --> 00:38:44,240
system so you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> in fact typically proc</font>

928
00:38:40,940 --> 00:38:46,730
files<font color="#E5E5E5"> proc / version is quite common so</font>

929
00:38:44,240 --> 00:38:48,828
<font color="#E5E5E5">that if you write certain bytes to that</font>

930
00:38:46,730 --> 00:38:50,269
file where you try<font color="#E5E5E5"> to read and the</font>

931
00:38:48,829 --> 00:38:52,339
classic one is if you try to read a file

932
00:38:50,269 --> 00:38:54,999
but you<font color="#E5E5E5"> try to read zero</font><font color="#CCCCCC"> bytes out</font><font color="#E5E5E5"> of it</font>

933
00:38:52,339 --> 00:38:58,009
obviously<font color="#CCCCCC"> no sane person would do that</font>

934
00:38:54,999 --> 00:38:59,899
probably<font color="#E5E5E5"> but if you try to do that it</font>

935
00:38:58,009 --> 00:39:01,430
<font color="#E5E5E5">will say oh cool that's that's us that's</font>

936
00:38:59,900 --> 00:39:03,970
<font color="#E5E5E5">that's do something cool this give this</font>

937
00:39:01,430 --> 00:39:07,339
process root privileges<font color="#E5E5E5"> or whatever</font>

938
00:39:03,970 --> 00:39:08,868
<font color="#E5E5E5">better hooking mechanisms actually</font>

939
00:39:07,339 --> 00:39:10,220
having a featured set of rootkit stuff

940
00:39:08,869 --> 00:39:12,559
<font color="#E5E5E5">reason I didn't do it</font><font color="#CCCCCC"> is because I don't</font>

941
00:39:10,220 --> 00:39:13,730
<font color="#E5E5E5">want to get arrested and have no reason</font>

942
00:39:12,559 --> 00:39:18,730
to<font color="#E5E5E5"> put this on people's</font><font color="#CCCCCC"> machines come</font>

943
00:39:13,730 --> 00:39:18,730
not dick well I am but<font color="#CCCCCC"> not</font><font color="#E5E5E5"> in that sense</font>

944
00:39:19,059 --> 00:39:22,940
the<font color="#E5E5E5"> other really cool thing this is</font>

945
00:39:21,289 --> 00:39:25,099
<font color="#E5E5E5">actually a little bit older is we can do</font>

946
00:39:22,940 --> 00:39:27,170
<font color="#E5E5E5">page flipping which is super cool where</font>

947
00:39:25,099 --> 00:39:29,509
you've got one page with<font color="#CCCCCC"> no hook on it</font>

948
00:39:27,170 --> 00:39:32,029
<font color="#E5E5E5">for read/write permissions and we have</font>

949
00:39:29,509 --> 00:39:34,819
one page there's a clone<font color="#CCCCCC"> of that</font><font color="#E5E5E5"> page</font>

950
00:39:32,029 --> 00:39:39,410
but with<font color="#CCCCCC"> X curing permissions</font><font color="#E5E5E5"> and if a</font>

951
00:39:34,819 --> 00:39:42,049
malware<font color="#E5E5E5"> scanner wants to detect a hook</font>

952
00:39:39,410 --> 00:39:44,299
in our code it will it will<font color="#E5E5E5"> obviously it</font>

953
00:39:42,049 --> 00:39:45,680
<font color="#E5E5E5">will read right so a read that page</font>

954
00:39:44,299 --> 00:39:47,960
<font color="#E5E5E5">you'll read the one</font><font color="#CCCCCC"> without hooking</font><font color="#E5E5E5"> and</font>

955
00:39:45,680 --> 00:39:49,489
as soon as we want to<font color="#E5E5E5"> execute that I'll</font>

956
00:39:47,960 --> 00:39:51,470
jump to<font color="#E5E5E5"> that it'll say it will throw a</font>

957
00:39:49,489 --> 00:39:53,630
page<font color="#CCCCCC"> hoxsey but there's no permissions</font>

958
00:39:51,470 --> 00:39:55,040
to execute<font color="#E5E5E5"> this so then it will load up</font>

959
00:39:53,630 --> 00:39:56,210
<font color="#E5E5E5">the execute page</font>

960
00:39:55,040 --> 00:39:59,330
<font color="#E5E5E5">I know Alexa</font><font color="#CCCCCC"> Q the one with</font><font color="#E5E5E5"> the hook in</font>

961
00:39:56,210 --> 00:40:00,770
it awesome<font color="#E5E5E5"> because that's really really</font>

962
00:39:59,330 --> 00:40:02,960
really really really<font color="#CCCCCC"> hard</font><font color="#E5E5E5"> to go around</font>

963
00:40:00,770 --> 00:40:03,950
like to defend<font color="#E5E5E5"> against because you don't</font>

964
00:40:02,960 --> 00:40:07,100
know that's<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> because that's</font>

965
00:40:03,950 --> 00:40:10,580
like super<font color="#E5E5E5"> low in the system I'm</font><font color="#CCCCCC"> gonna</font>

966
00:40:07,100 --> 00:40:17,290
<font color="#E5E5E5">say that's it</font><font color="#CCCCCC"> so questions comments I</font>

967
00:40:10,580 --> 00:40:20,330
don't know whatever<font color="#CCCCCC"> have you</font><font color="#E5E5E5"> got sick</font>

968
00:40:17,290 --> 00:40:30,529
<font color="#E5E5E5">come when you</font><font color="#CCCCCC"> go I</font><font color="#E5E5E5"> have questions that</font>

969
00:40:20,330 --> 00:40:36,200
<font color="#E5E5E5">was horrible yes a little bit yeah</font><font color="#CCCCCC"> it's</font>

970
00:40:30,530 --> 00:40:38,030
been done<font color="#CCCCCC"> it's it's known to people</font><font color="#E5E5E5"> who</font>

971
00:40:36,200 --> 00:40:39,799
are into those circles<font color="#E5E5E5"> but it's</font><font color="#CCCCCC"> not</font>

972
00:40:38,030 --> 00:40:41,150
known by the<font color="#E5E5E5"> wide industry and that's</font>

973
00:40:39,800 --> 00:40:42,770
one<font color="#E5E5E5"> of the biggest problems of rootkit</font>

974
00:40:41,150 --> 00:40:44,330
is<font color="#E5E5E5"> that people</font><font color="#CCCCCC"> are defending</font><font color="#E5E5E5"> against</font>

975
00:40:42,770 --> 00:40:47,390
that<font color="#CCCCCC"> it was done</font><font color="#E5E5E5"> in the 90s and</font><font color="#CCCCCC"> tithi</font>

976
00:40:44,330 --> 00:40:49,970
early 2000s and nowadays<font color="#CCCCCC"> they're like</font>

977
00:40:47,390 --> 00:40:53,870
guys at<font color="#CCCCCC"> black hand f1 last week</font><font color="#E5E5E5"> they're</font>

978
00:40:49,970 --> 00:40:56,379
way ahead of<font color="#E5E5E5"> this stuff it's really</font><font color="#CCCCCC"> hard</font>

979
00:40:53,870 --> 00:40:59,720
to stay on it because<font color="#CCCCCC"> stuff like</font><font color="#E5E5E5"> that is</font>

980
00:40:56,380 --> 00:41:01,550
you have to go to<font color="#E5E5E5"> Intel and say Intel</font>

981
00:40:59,720 --> 00:41:03,379
your design sucks<font color="#E5E5E5"> fix it</font>

982
00:41:01,550 --> 00:41:05,030
<font color="#E5E5E5">or I mean the same thing happens at arm</font>

983
00:41:03,380 --> 00:41:06,110
like this<font color="#E5E5E5"> is this</font><font color="#CCCCCC"> is conceptual this</font>

984
00:41:05,030 --> 00:41:08,360
isn't this is how the<font color="#CCCCCC"> machine works</font>

985
00:41:06,110 --> 00:41:10,160
we're exploiting the functions of the

986
00:41:08,360 --> 00:41:12,440
system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> all systems</font><font color="#CCCCCC"> pretty much</font>

987
00:41:10,160 --> 00:41:15,140
worked<font color="#E5E5E5"> like this so it's really really</font>

988
00:41:12,440 --> 00:41:16,850
<font color="#CCCCCC">hard to</font><font color="#E5E5E5"> defend against because yeah</font>

989
00:41:15,140 --> 00:41:18,080
somebody might do that<font color="#E5E5E5"> but</font><font color="#CCCCCC"> then if you</font>

990
00:41:16,850 --> 00:41:23,620
don't<font color="#E5E5E5"> have that system how do we do</font>

991
00:41:18,080 --> 00:41:23,620
<font color="#E5E5E5">paging we can't so we have to do that</font>

992
00:41:24,280 --> 00:41:51,310
got<font color="#E5E5E5"> B questions so you can</font><font color="#CCCCCC"> do that you</font>

993
00:41:49,160 --> 00:41:54,799
can<font color="#E5E5E5"> totally do that</font>

994
00:41:51,310 --> 00:41:57,970
yeah the<font color="#CCCCCC"> the problem of doing that is</font>

995
00:41:54,800 --> 00:42:02,080
that<font color="#CCCCCC"> you still have a big hole where</font>

996
00:41:57,970 --> 00:42:05,720
like what if<font color="#CCCCCC"> I patch kernel memory</font><font color="#E5E5E5"> to</font>

997
00:42:02,080 --> 00:42:08,210
disallow that<font color="#E5E5E5"> or what if the classic one</font>

998
00:42:05,720 --> 00:42:08,990
is with the s3 boot<font color="#E5E5E5"> scripts you</font><font color="#CCCCCC"> can</font>

999
00:42:08,210 --> 00:42:10,970
change<font color="#E5E5E5"> yes three</font>

1000
00:42:08,990 --> 00:42:12,830
s3<font color="#CCCCCC"> boot</font><font color="#E5E5E5"> script to modify the way it</font>

1001
00:42:10,970 --> 00:42:14,270
loads things so you<font color="#CCCCCC"> can the thing that</font>

1002
00:42:12,830 --> 00:42:16,970
gets loaded to stop other thing loads

1003
00:42:14,270 --> 00:42:19,220
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> just get rid of</font><font color="#E5E5E5"> that is there's</font>

1004
00:42:16,970 --> 00:42:22,220
always like<font color="#CCCCCC"> a some</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> wargames</font><font color="#E5E5E5"> like</font>

1005
00:42:19,220 --> 00:42:24,020
everybody's just<font color="#E5E5E5"> escalating yes</font><font color="#CCCCCC"> but at</font>

1006
00:42:22,220 --> 00:42:25,339
the same time<font color="#E5E5E5"> absolutely</font><font color="#CCCCCC"> those kind of</font>

1007
00:42:24,020 --> 00:42:26,740
protections are the things<font color="#CCCCCC"> that will hit</font>

1008
00:42:25,340 --> 00:42:29,360
the low hanging fruit and<font color="#CCCCCC"> get</font><font color="#E5E5E5"> like the</font>

1009
00:42:26,740 --> 00:42:46,250
<font color="#CCCCCC">98% of actually things there's another</font>

1010
00:42:29,360 --> 00:42:47,690
question<font color="#CCCCCC"> up there yep easiest way to</font>

1011
00:42:46,250 --> 00:42:49,610
detect<font color="#E5E5E5"> if somebody's hooking something</font>

1012
00:42:47,690 --> 00:42:50,900
is to check<font color="#E5E5E5"> with knowing good values and</font>

1013
00:42:49,610 --> 00:42:52,820
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> do that</font><font color="#E5E5E5"> because you've got a</font>

1014
00:42:50,900 --> 00:42:55,010
file called system dot map which tells

1015
00:42:52,820 --> 00:42:56,869
you what the codes<font color="#CCCCCC"> what the symbol</font>

1016
00:42:55,010 --> 00:42:59,420
should be and then<font color="#E5E5E5"> you go to the symbol</font>

1017
00:42:56,869 --> 00:43:02,119
and say well where is it<font color="#CCCCCC"> like why</font><font color="#E5E5E5"> is it</font>

1018
00:42:59,420 --> 00:43:03,560
<font color="#E5E5E5">different because somebody's changed it</font>

1019
00:43:02,119 --> 00:43:05,480
<font color="#E5E5E5">so what you're looking for is you're</font>

1020
00:43:03,560 --> 00:43:07,430
trying<font color="#E5E5E5"> to detect those changes</font><font color="#CCCCCC"> the</font>

1021
00:43:05,480 --> 00:43:08,990
problem is<font color="#E5E5E5"> if there are thousands of</font>

1022
00:43:07,430 --> 00:43:10,819
symbols<font color="#E5E5E5"> and if you want to check every</font>

1023
00:43:08,990 --> 00:43:11,180
<font color="#E5E5E5">single one that's going to take a long</font>

1024
00:43:10,820 --> 00:43:12,650
time

1025
00:43:11,180 --> 00:43:13,609
that's quite a high overhead<font color="#E5E5E5"> and you're</font>

1026
00:43:12,650 --> 00:43:18,290
<font color="#E5E5E5">doing in the car as well so everything</font>

1027
00:43:13,609 --> 00:43:28,190
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of has</font><font color="#E5E5E5"> that imperative is that kind</font>

1028
00:43:18,290 --> 00:43:29,869
of question exactly<font color="#CCCCCC"> that's exactly what</font>

1029
00:43:28,190 --> 00:43:34,190
I<font color="#E5E5E5"> mean that was a that was a very</font>

1030
00:43:29,869 --> 00:43:36,500
innocent<font color="#E5E5E5"> example which is great but that</font>

1031
00:43:34,190 --> 00:43:38,840
very innocent example could<font color="#E5E5E5"> stop some</font>

1032
00:43:36,500 --> 00:43:40,900
malware<font color="#E5E5E5"> scanner from running you know</font>

1033
00:43:38,840 --> 00:43:43,160
like we want<font color="#E5E5E5"> to execute this file</font><font color="#CCCCCC"> at</font>

1034
00:43:40,900 --> 00:43:44,840
exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> e what if somebody calls</font>

1035
00:43:43,160 --> 00:43:49,490
<font color="#CCCCCC">eggs-actly e with this</font><font color="#E5E5E5"> malware scanner</font>

1036
00:43:44,840 --> 00:43:50,720
<font color="#E5E5E5">no denied you know basically what's</font>

1037
00:43:49,490 --> 00:43:53,959
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get across is the possibilities</font>

1038
00:43:50,720 --> 00:43:56,299
<font color="#E5E5E5">are basically endless which is why the</font>

1039
00:43:53,960 --> 00:43:58,760
protection<font color="#E5E5E5"> of the kernel is so important</font>

1040
00:43:56,300 --> 00:44:01,270
and why<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> understand why we don't</font>

1041
00:43:58,760 --> 00:44:05,240
have more<font color="#E5E5E5"> signing in Linux especially</font>

1042
00:44:01,270 --> 00:44:07,130
some systems do but<font color="#E5E5E5"> because a lot</font><font color="#CCCCCC"> of</font>

1043
00:44:05,240 --> 00:44:09,169
<font color="#CCCCCC">people</font><font color="#E5E5E5"> use custom Linux builds it's</font>

1044
00:44:07,130 --> 00:44:12,740
inconvenient<font color="#CCCCCC"> and you want to load your</font>

1045
00:44:09,170 --> 00:44:14,600
own like certs<font color="#E5E5E5"> so you want to load your</font>

1046
00:44:12,740 --> 00:44:15,310
own<font color="#E5E5E5"> modules with your own</font><font color="#CCCCCC"> signed cert or</font>

1047
00:44:14,600 --> 00:44:17,450
whatever

1048
00:44:15,310 --> 00:44:18,770
Linux doesn't really play<font color="#CCCCCC"> that well with</font>

1049
00:44:17,450 --> 00:44:20,689
it so you have<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> sure that</font>

1050
00:44:18,770 --> 00:44:22,850
whatever is going<font color="#CCCCCC"> to load</font><font color="#E5E5E5"> kernel has</font>

1051
00:44:20,690 --> 00:44:24,290
some<font color="#CCCCCC"> roots</font><font color="#E5E5E5"> AAA somewhere</font>

1052
00:44:22,850 --> 00:44:28,990
signing it and making<font color="#E5E5E5"> sure it's to be</font>

1053
00:44:24,290 --> 00:44:31,779
legit basically anything<font color="#E5E5E5"> else</font>

1054
00:44:28,990 --> 00:44:48,879
<font color="#CCCCCC">gobby more</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this</font>

1055
00:44:31,780 --> 00:44:48,880
generally brexit if you want mm-hmm

1056
00:44:50,650 --> 00:45:00,920
smart smoke<font color="#E5E5E5"> a so does you seen sorry</font><font color="#CCCCCC"> oh</font>

1057
00:44:58,550 --> 00:45:04,430
basically<font color="#CCCCCC"> Windows is now integrating a</font>

1058
00:45:00,920 --> 00:45:05,720
<font color="#E5E5E5">Linux subsystem into Windows and the way</font>

1059
00:45:04,430 --> 00:45:07,850
that actually<font color="#E5E5E5"> works is a really great</font>

1060
00:45:05,720 --> 00:45:09,049
<font color="#CCCCCC">talk that</font><font color="#E5E5E5"> will be out on from Def Con or</font>

1061
00:45:07,850 --> 00:45:11,509
<font color="#E5E5E5">black out one of the two on how this</font>

1062
00:45:09,050 --> 00:45:14,870
<font color="#E5E5E5">works is it</font><font color="#CCCCCC"> has an 800 K overhead which</font>

1063
00:45:11,510 --> 00:45:16,790
is insane<font color="#E5E5E5"> to load a subsystem which is</font>

1064
00:45:14,870 --> 00:45:18,020
the entire land<font color="#E5E5E5"> its kernel obviously the</font>

1065
00:45:16,790 --> 00:45:19,700
<font color="#CCCCCC">limits colors in the enter key</font><font color="#E5E5E5"> but the</font>

1066
00:45:18,020 --> 00:45:21,680
loader for that is<font color="#CCCCCC"> a-ok so</font><font color="#E5E5E5"> this is</font>

1067
00:45:19,700 --> 00:45:23,509
really small<font color="#CCCCCC"> one it's running a version</font>

1068
00:45:21,680 --> 00:45:24,560
other than its kernel in the system so

1069
00:45:23,510 --> 00:45:26,780
when you get<font color="#CCCCCC"> your little bash prompt</font>

1070
00:45:24,560 --> 00:45:29,660
you're not fiddling with some<font color="#E5E5E5"> ridiculous</font>

1071
00:45:26,780 --> 00:45:31,610
thing<font color="#E5E5E5"> you're fiddling with a version of</font>

1072
00:45:29,660 --> 00:45:34,310
<font color="#E5E5E5">Linux</font><font color="#CCCCCC"> that has a translation</font><font color="#E5E5E5"> mechanism</font>

1073
00:45:31,610 --> 00:45:35,810
<font color="#E5E5E5">for most of the Siskel's so it knows if</font>

1074
00:45:34,310 --> 00:45:36,799
you call a<font color="#CCCCCC"> write in the Linux you</font>

1075
00:45:35,810 --> 00:45:38,150
probably want to call the<font color="#CCCCCC"> write and</font>

1076
00:45:36,800 --> 00:45:40,310
<font color="#CCCCCC">windows and it knows how</font><font color="#E5E5E5"> to translate</font>

1077
00:45:38,150 --> 00:45:42,590
that<font color="#E5E5E5"> and then it has some emulation</font>

1078
00:45:40,310 --> 00:45:44,690
stuff with a slightly<font color="#CCCCCC"> auto</font><font color="#E5E5E5"> cases but</font>

1079
00:45:42,590 --> 00:45:46,610
it's a full emulation within the windows

1080
00:45:44,690 --> 00:45:48,350
subsystem<font color="#E5E5E5"> if you can get into that</font>

1081
00:45:46,610 --> 00:45:49,430
<font color="#E5E5E5">because</font><font color="#CCCCCC"> somebody put a massive</font>

1082
00:45:48,350 --> 00:45:50,630
vulnerability in it you can<font color="#E5E5E5"> get a</font>

1083
00:45:49,430 --> 00:45:53,000
rootkit and now why can't you get<font color="#E5E5E5"> a</font>

1084
00:45:50,630 --> 00:45:55,820
<font color="#E5E5E5">routine Windows perfectly good thought</font>

1085
00:45:53,000 --> 00:45:56,930
<font color="#E5E5E5">really because you know</font><font color="#CCCCCC"> you're secure is</font>

1086
00:45:55,820 --> 00:45:58,490
only as good as your low hanging fruit

1087
00:45:56,930 --> 00:46:18,549
<font color="#E5E5E5">right so if you've got something like</font>

1088
00:45:58,490 --> 00:46:18,549
<font color="#E5E5E5">that yeah yeah</font>

1089
00:46:27,950 --> 00:46:33,359
yes sir<font color="#E5E5E5"> Linux has a pretty good</font><font color="#CCCCCC"> system</font>

1090
00:46:30,480 --> 00:46:36,990
where it<font color="#E5E5E5"> basically deals with errors</font><font color="#CCCCCC"> in</font>

1091
00:46:33,360 --> 00:46:39,800
<font color="#E5E5E5">the scope that</font><font color="#CCCCCC"> it can so if your sis if</font>

1092
00:46:36,990 --> 00:46:42,779
your user mode code<font color="#E5E5E5"> caused a fatal error</font>

1093
00:46:39,800 --> 00:46:44,340
<font color="#E5E5E5">it will kill the user mode code because</font>

1094
00:46:42,780 --> 00:46:46,530
it has some code handling stuff that

1095
00:46:44,340 --> 00:46:48,240
<font color="#E5E5E5">won't kill the colonel</font><font color="#CCCCCC"> but if you run</font>

1096
00:46:46,530 --> 00:46:50,790
some kernel mode code and that kills the

1097
00:46:48,240 --> 00:46:52,410
kernel then you're into<font color="#CCCCCC"> sort blue-screen</font>

1098
00:46:50,790 --> 00:46:54,180
territory<font color="#E5E5E5"> or equivalent</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> that's when</font>

1099
00:46:52,410 --> 00:46:59,670
you'll run you've got like a kernel

1100
00:46:54,180 --> 00:47:00,899
panic<font color="#CCCCCC"> so basic basically</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> it's just</font>

1101
00:46:59,670 --> 00:47:03,150
increasing<font color="#E5E5E5"> the attack surface it's a</font>

1102
00:47:00,900 --> 00:47:05,520
great feature<font color="#E5E5E5"> like I actually quite like</font>

1103
00:47:03,150 --> 00:47:06,870
Windows I think it's not<font color="#E5E5E5"> bad</font><font color="#CCCCCC"> I like the</font>

1104
00:47:05,520 --> 00:47:08,700
Knicks as well and I<font color="#E5E5E5"> think having</font>

1105
00:47:06,870 --> 00:47:10,500
something<font color="#E5E5E5"> that can do both like you</font>

1106
00:47:08,700 --> 00:47:11,669
<font color="#CCCCCC">can't really</font><font color="#E5E5E5"> run Windows and Linux so</font>

1107
00:47:10,500 --> 00:47:13,620
it's pretty cool<font color="#CCCCCC"> hanging it</font><font color="#E5E5E5"> there around</font>

1108
00:47:11,670 --> 00:47:14,790
I think<font color="#CCCCCC"> it enables developers</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font>

1109
00:47:13,620 --> 00:47:16,529
of<font color="#E5E5E5"> really cool stuff without having to</font>

1110
00:47:14,790 --> 00:47:20,430
swap<font color="#CCCCCC"> around with</font><font color="#E5E5E5"> VMs and stuff there's</font>

1111
00:47:16,530 --> 00:47:24,330
with weird emulation<font color="#CCCCCC"> but every feature</font>

1112
00:47:20,430 --> 00:47:25,940
comes at the price really cool<font color="#E5E5E5"> anything</font>

1113
00:47:24,330 --> 00:47:29,490
<font color="#CCCCCC">else</font>

1114
00:47:25,940 --> 00:47:46,200
got you<font color="#E5E5E5"> something else you got like five</font>

1115
00:47:29,490 --> 00:47:47,399
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are some really really</font>

1116
00:47:46,200 --> 00:47:49,710
really<font color="#CCCCCC"> good</font>

1117
00:47:47,400 --> 00:47:52,860
crash dumping tools for Linux<font color="#CCCCCC"> so what</font>

1118
00:47:49,710 --> 00:47:54,420
we're talking<font color="#CCCCCC"> about isn't the user mode</font>

1119
00:47:52,860 --> 00:47:55,920
process died<font color="#E5E5E5"> because we can deal with</font>

1120
00:47:54,420 --> 00:47:57,720
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> can the colonel still running</font>

1121
00:47:55,920 --> 00:48:00,480
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> has a log</font><font color="#CCCCCC"> d met while</font>

1122
00:47:57,720 --> 00:48:03,419
key message has traces of that<font color="#E5E5E5"> it's</font>

1123
00:48:00,480 --> 00:48:06,300
<font color="#E5E5E5">pretty useful</font><font color="#CCCCCC"> if we kill the Machine the</font>

1124
00:48:03,420 --> 00:48:08,250
serial interface<font color="#CCCCCC"> or</font><font color="#E5E5E5"> whatever you're</font>

1125
00:48:06,300 --> 00:48:10,170
looking at<font color="#CCCCCC"> we'll just dump</font><font color="#E5E5E5"> why haven't</font>

1126
00:48:08,250 --> 00:48:12,690
the<font color="#CCCCCC"> kernel or panic and you're dead in</font>

1127
00:48:10,170 --> 00:48:16,230
<font color="#CCCCCC">the water so there are some</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> good</font>

1128
00:48:12,690 --> 00:48:17,610
tools<font color="#E5E5E5"> remote</font><font color="#CCCCCC"> serial having a physical</font>

1129
00:48:16,230 --> 00:48:18,840
<font color="#E5E5E5">machine and having a serial connection</font>

1130
00:48:17,610 --> 00:48:21,420
<font color="#E5E5E5">attached</font><font color="#CCCCCC"> to that</font><font color="#E5E5E5"> it's a pretty good way</font>

1131
00:48:18,840 --> 00:48:23,640
of doing<font color="#E5E5E5"> it because the you can kill a</font>

1132
00:48:21,420 --> 00:48:26,190
lot<font color="#CCCCCC"> of things</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> the serial</font>

1133
00:48:23,640 --> 00:48:28,259
connection<font color="#E5E5E5"> or diet so you can get quite</font>

1134
00:48:26,190 --> 00:48:30,000
a lot there are<font color="#E5E5E5"> some really</font><font color="#CCCCCC"> really good</font>

1135
00:48:28,260 --> 00:48:31,170
<font color="#CCCCCC">projects of the top my head but</font><font color="#E5E5E5"> you</font>

1136
00:48:30,000 --> 00:48:33,000
could do some quick googling<font color="#E5E5E5"> but</font>

1137
00:48:31,170 --> 00:48:34,740
basically<font color="#CCCCCC"> we'll take a crash dump</font><font color="#E5E5E5"> and</font>

1138
00:48:33,000 --> 00:48:36,180
analyze it<font color="#CCCCCC"> and tell you this is what</font>

1139
00:48:34,740 --> 00:48:37,439
went wrong<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> what the stack looked</font>

1140
00:48:36,180 --> 00:48:39,149
like this is what the registers look

1141
00:48:37,440 --> 00:48:40,920
like<font color="#E5E5E5"> everything like</font><font color="#CCCCCC"> that and</font><font color="#E5E5E5"> then you</font>

1142
00:48:39,150 --> 00:48:41,430
can analyze<font color="#E5E5E5"> that</font><font color="#CCCCCC"> offline so this is I</font>

1143
00:48:40,920 --> 00:48:44,220
<font color="#E5E5E5">mean</font>

1144
00:48:41,430 --> 00:48:47,160
that one<font color="#E5E5E5"> live on my</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> because that</font>

1145
00:48:44,220 --> 00:48:49,169
was I don't<font color="#E5E5E5"> know but you should really</font>

1146
00:48:47,160 --> 00:48:50,730
<font color="#E5E5E5">have</font><font color="#CCCCCC"> a separate machine or VM</font><font color="#E5E5E5"> or</font>

1147
00:48:49,170 --> 00:48:55,140
whatever<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> something that when</font><font color="#CCCCCC"> it got</font>

1148
00:48:50,730 --> 00:48:56,940
you you're expecting it<font color="#E5E5E5"> to die</font><font color="#CCCCCC"> you got</font>

1149
00:48:55,140 --> 00:48:58,140
to know<font color="#E5E5E5"> your assembly</font><font color="#CCCCCC"> I think you can</font>

1150
00:48:56,940 --> 00:49:00,119
understand how stack creaming works

1151
00:48:58,140 --> 00:49:02,069
<font color="#CCCCCC">you've got to have a big</font><font color="#E5E5E5"> looking</font><font color="#CCCCCC"> into</font>

1152
00:49:00,119 --> 00:49:04,650
the kernel but the method that we talked

1153
00:49:02,069 --> 00:49:06,839
about afterwards<font color="#CCCCCC"> that's super</font><font color="#E5E5E5"> easy to do</font>

1154
00:49:04,650 --> 00:49:08,780
and that's quite low overhead and<font color="#CCCCCC"> you</font>

1155
00:49:06,839 --> 00:49:11,578
don't have to type a<font color="#CCCCCC"> single assembly</font>

1156
00:49:08,780 --> 00:49:13,770
<font color="#E5E5E5">that's all which is really really</font><font color="#CCCCCC"> nice</font>

1157
00:49:11,579 --> 00:49:15,660
<font color="#CCCCCC">and that which basically means there's</font>

1158
00:49:13,770 --> 00:49:17,009
less room<font color="#E5E5E5"> to go wrong because you're</font>

1159
00:49:15,660 --> 00:49:18,629
allowing the compiler<font color="#E5E5E5"> to generate code</font>

1160
00:49:17,010 --> 00:49:19,800
rather<font color="#CCCCCC"> than you and you can guarantee</font>

1161
00:49:18,630 --> 00:49:22,700
the compiler can do a<font color="#E5E5E5"> better job</font><font color="#CCCCCC"> because</font>

1162
00:49:19,800 --> 00:49:22,700
it's really smart

1163
00:49:31,730 --> 00:49:33,790
you

