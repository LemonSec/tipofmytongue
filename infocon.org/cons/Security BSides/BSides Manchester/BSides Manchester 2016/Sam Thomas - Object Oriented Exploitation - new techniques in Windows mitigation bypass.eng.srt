1
00:00:02,870 --> 00:00:09,740
<font color="#CCCCCC">researcher</font><font color="#E5E5E5"> pen test and basically I'm a</font>

2
00:00:06,930 --> 00:00:12,809
big<font color="#CCCCCC"> kids who likes playing</font><font color="#E5E5E5"> with stuff I</font>

3
00:00:09,740 --> 00:00:14,339
should say that<font color="#E5E5E5"> this thing feeds when</font>

4
00:00:12,809 --> 00:00:16,110
you jumped on sort<font color="#E5E5E5"> of played a musical</font>

5
00:00:14,339 --> 00:00:17,789
<font color="#CCCCCC">note</font><font color="#E5E5E5"> and anyone who walks past that</font>

6
00:00:16,110 --> 00:00:21,180
without jumping<font color="#E5E5E5"> on</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> got something</font>

7
00:00:17,789 --> 00:00:24,630
wrong<font color="#E5E5E5"> with</font><font color="#CCCCCC"> them okay so</font><font color="#E5E5E5"> what I'm going</font>

8
00:00:21,180 --> 00:00:26,189
to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> I briefly explained</font>

9
00:00:24,630 --> 00:00:28,410
<font color="#CCCCCC">what I mean</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> object-orientated</font>

10
00:00:26,189 --> 00:00:30,448
<font color="#E5E5E5">exploitation and then I'm going to look</font>

11
00:00:28,410 --> 00:00:32,400
at<font color="#E5E5E5"> kind of a specific</font><font color="#CCCCCC"> area of</font><font color="#E5E5E5"> that which</font>

12
00:00:30,449 --> 00:00:34,590
is<font color="#CCCCCC"> object corruption and how that</font>

13
00:00:32,400 --> 00:00:36,600
relates to some<font color="#E5E5E5"> of the various</font>

14
00:00:34,590 --> 00:00:38,820
mitigations that<font color="#E5E5E5"> Microsoft would have</font>

15
00:00:36,600 --> 00:00:41,430
introduced in Windows to try and prevent

16
00:00:38,820 --> 00:00:45,300
exploits<font color="#E5E5E5"> from succeeding I'm going to</font>

17
00:00:41,430 --> 00:00:48,300
talk<font color="#CCCCCC"> through to new techniques which</font>

18
00:00:45,300 --> 00:00:49,620
bypass two of these mitigations<font color="#E5E5E5"> and</font><font color="#CCCCCC"> but</font>

19
00:00:48,300 --> 00:00:52,080
first I'm going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about the</font><font color="#E5E5E5"> theory</font>

20
00:00:49,620 --> 00:00:53,129
behind those techniques and<font color="#E5E5E5"> then sort of</font>

21
00:00:52,080 --> 00:00:57,110
putting<font color="#E5E5E5"> them all together into a</font>

22
00:00:53,130 --> 00:01:00,690
<font color="#CCCCCC">proof-of-concept exploit</font><font color="#E5E5E5"> okay so</font>

23
00:00:57,110 --> 00:01:03,120
<font color="#CCCCCC">object-orientated exploitation what do</font><font color="#E5E5E5"> I</font>

24
00:01:00,690 --> 00:01:05,670
<font color="#E5E5E5">mean by that I'm sure hopefully lots of</font>

25
00:01:03,120 --> 00:01:06,600
you have<font color="#E5E5E5"> heard of object injection you</font>

26
00:01:05,670 --> 00:01:10,289
know there's been quite a<font color="#E5E5E5"> lot of</font>

27
00:01:06,600 --> 00:01:13,199
activity<font color="#CCCCCC"> in both PHP and</font><font color="#E5E5E5"> Java recently</font>

28
00:01:10,289 --> 00:01:15,960
with<font color="#CCCCCC"> with you know these vulnerabilities</font>

29
00:01:13,200 --> 00:01:18,240
<font color="#E5E5E5">and also there's another</font><font color="#CCCCCC"> area which is</font>

30
00:01:15,960 --> 00:01:21,600
<font color="#E5E5E5">quite closely associated which</font><font color="#CCCCCC"> I've</font>

31
00:01:18,240 --> 00:01:25,189
<font color="#E5E5E5">called object corruption which happens</font>

32
00:01:21,600 --> 00:01:27,780
<font color="#E5E5E5">within sort of native C++ applications</font>

33
00:01:25,189 --> 00:01:30,229
and until<font color="#CCCCCC"> recently it was incredibly</font>

34
00:01:27,780 --> 00:01:35,520
<font color="#E5E5E5">easy to exploit so we wouldn't really</font>

35
00:01:30,229 --> 00:01:37,469
talk much<font color="#E5E5E5"> about it but an object comes</font>

36
00:01:35,520 --> 00:01:39,089
becomes corrupted in sort of one of

37
00:01:37,469 --> 00:01:40,669
<font color="#E5E5E5">several scenarios so you get type</font>

38
00:01:39,090 --> 00:01:42,569
confusion vulnerabilities where

39
00:01:40,670 --> 00:01:44,640
basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> application becomes</font>

40
00:01:42,569 --> 00:01:47,609
confused about what type<font color="#E5E5E5"> and object is</font>

41
00:01:44,640 --> 00:01:49,369
or use after<font color="#CCCCCC"> free which is when you free</font>

42
00:01:47,609 --> 00:01:52,619
an object and replace it<font color="#CCCCCC"> with some other</font>

43
00:01:49,369 --> 00:01:55,020
object or data and<font color="#E5E5E5"> also the vast</font>

44
00:01:52,619 --> 00:01:57,630
majority<font color="#CCCCCC"> of exploits at least until</font>

45
00:01:55,020 --> 00:01:59,490
<font color="#CCCCCC">recently would essentially target object</font>

46
00:01:57,630 --> 00:02:03,329
corruption as a way to gain<font color="#E5E5E5"> code</font>

47
00:01:59,490 --> 00:02:05,579
execution so I guess the main difference

48
00:02:03,329 --> 00:02:07,499
<font color="#E5E5E5">between objects injection and object</font>

49
00:02:05,579 --> 00:02:09,419
corruption is that in objects injection

50
00:02:07,499 --> 00:02:11,910
<font color="#E5E5E5">you're injecting a new object into</font><font color="#CCCCCC"> the</font>

51
00:02:09,419 --> 00:02:14,190
process or application<font color="#E5E5E5"> whereas in object</font>

52
00:02:11,910 --> 00:02:16,380
corruption you're corrupting an existing

53
00:02:14,190 --> 00:02:18,810
<font color="#CCCCCC">object there's a number of sand</font>

54
00:02:16,380 --> 00:02:21,480
<font color="#CCCCCC">Rio's basically where we don't you know</font>

55
00:02:18,810 --> 00:02:25,140
<font color="#E5E5E5">corrupt the object</font><font color="#CCCCCC"> completely we might</font>

56
00:02:21,480 --> 00:02:26,910
only you know partially corrupt it so in

57
00:02:25,140 --> 00:02:29,339
order<font color="#E5E5E5"> to understand this issue we need</font>

58
00:02:26,910 --> 00:02:32,760
<font color="#E5E5E5">to understand what an object looks like</font>

59
00:02:29,340 --> 00:02:36,060
in memory<font color="#E5E5E5"> so an</font><font color="#CCCCCC"> object is basically a</font>

60
00:02:32,760 --> 00:02:38,220
set of<font color="#E5E5E5"> properties</font><font color="#CCCCCC"> but the first property</font>

61
00:02:36,060 --> 00:02:41,730
<font color="#E5E5E5">which is essentially a hidden property</font>

62
00:02:38,220 --> 00:02:44,010
is a pointer to<font color="#E5E5E5"> a table of methods</font><font color="#CCCCCC"> and</font>

63
00:02:41,730 --> 00:02:45,480
each<font color="#E5E5E5"> of those methods</font><font color="#CCCCCC"> has a pointer</font>

64
00:02:44,010 --> 00:02:46,920
associated<font color="#E5E5E5"> there with it which</font><font color="#CCCCCC"> is</font>

65
00:02:45,480 --> 00:02:51,570
<font color="#CCCCCC">basically where the instruction pointer</font>

66
00:02:46,920 --> 00:02:54,390
is<font color="#E5E5E5"> going to be sent and before</font>

67
00:02:51,570 --> 00:02:56,340
<font color="#CCCCCC">control-flow guard this is what the</font>

68
00:02:54,390 --> 00:02:58,380
invocation of<font color="#E5E5E5"> our virtual method would</font>

69
00:02:56,340 --> 00:03:00,690
look like sort<font color="#E5E5E5"> of both in assembly</font><font color="#CCCCCC"> and</font>

70
00:02:58,380 --> 00:03:03,150
<font color="#CCCCCC">I've put some shorthand there because</font>

71
00:03:00,690 --> 00:03:05,850
you know you can't really put read

72
00:03:03,150 --> 00:03:07,440
assembly that well<font color="#E5E5E5"> and so basically what</font>

73
00:03:05,850 --> 00:03:09,630
it's doing<font color="#CCCCCC"> is it's getting a pointer to</font>

74
00:03:07,440 --> 00:03:11,970
the object<font color="#CCCCCC"> it's grabbing</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> vtable</font>

75
00:03:09,630 --> 00:03:14,640
<font color="#CCCCCC">pointer and looking up what method is</font>

76
00:03:11,970 --> 00:03:17,490
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> calling within</font><font color="#E5E5E5"> that so in</font>

77
00:03:14,640 --> 00:03:20,579
order<font color="#E5E5E5"> to gain a code execution before</font>

78
00:03:17,490 --> 00:03:22,080
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of these mitigations basically what</font>

79
00:03:20,580 --> 00:03:23,940
we're after<font color="#E5E5E5"> is the method</font><font color="#CCCCCC"> that's going</font>

80
00:03:22,080 --> 00:03:27,240
to be invoked<font color="#E5E5E5"> you know we point that to</font>

81
00:03:23,940 --> 00:03:29,579
what we want to run<font color="#E5E5E5"> in reality this</font>

82
00:03:27,240 --> 00:03:32,010
function table<font color="#E5E5E5"> would normally exist</font>

83
00:03:29,580 --> 00:03:33,890
within a<font color="#CCCCCC"> dll or some area</font><font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> that</font>

84
00:03:32,010 --> 00:03:36,630
might be hard<font color="#E5E5E5"> to overwrite but it's the</font>

85
00:03:33,890 --> 00:03:40,799
<font color="#CCCCCC">vtable pointer that's easy to overwrite</font>

86
00:03:36,630 --> 00:03:43,530
and you know we simply basically point

87
00:03:40,800 --> 00:03:46,260
that so in that<font color="#CCCCCC"> method invoked our</font><font color="#E5E5E5"> shell</font>

88
00:03:43,530 --> 00:03:47,730
code and would run<font color="#E5E5E5"> our shell code back a</font>

89
00:03:46,260 --> 00:03:51,120
long<font color="#CCCCCC"> time</font><font color="#E5E5E5"> ago there's a really nice</font>

90
00:03:47,730 --> 00:03:53,369
paper<font color="#E5E5E5"> called heap feng-shui and kind of</font>

91
00:03:51,120 --> 00:03:55,920
<font color="#E5E5E5">a precursor</font><font color="#CCCCCC"> to a lot of the stuff we'll</font>

92
00:03:53,370 --> 00:03:58,620
be looking at you know<font color="#CCCCCC"> he mentioned you</font>

93
00:03:55,920 --> 00:04:03,059
<font color="#E5E5E5">could sort of if we jump back and the</font>

94
00:03:58,620 --> 00:04:05,010
<font color="#CCCCCC">ACX gets set to the V table pointer</font><font color="#E5E5E5"> we</font>

95
00:04:03,060 --> 00:04:07,380
could<font color="#E5E5E5"> just jump to</font><font color="#CCCCCC"> ECX that's you know</font>

96
00:04:05,010 --> 00:04:10,500
from<font color="#E5E5E5"> some fixed address and we'd be</font>

97
00:04:07,380 --> 00:04:12,630
running<font color="#E5E5E5"> our shell code so in 2009</font>

98
00:04:10,500 --> 00:04:16,230
Microsoft introduced a mitigation called

99
00:04:12,630 --> 00:04:18,630
data execution prevention<font color="#E5E5E5"> you know they</font>

100
00:04:16,230 --> 00:04:21,090
kind<font color="#E5E5E5"> of I guess like I have in this talk</font>

101
00:04:18,630 --> 00:04:23,250
they take a you know<font color="#CCCCCC"> ronnie'll does what</font>

102
00:04:21,089 --> 00:04:27,840
it says<font color="#CCCCCC"> on the tin approach it prevents</font>

103
00:04:23,250 --> 00:04:30,260
you from executing data and the solution

104
00:04:27,840 --> 00:04:34,260
to<font color="#CCCCCC"> this was return orientated program</font>

105
00:04:30,260 --> 00:04:36,750
so the first step of a return orientated

106
00:04:34,260 --> 00:04:38,760
exploit would essentially be<font color="#E5E5E5"> to pivot</font>

107
00:04:36,750 --> 00:04:41,699
<font color="#CCCCCC">the static so if we've got these virtual</font>

108
00:04:38,760 --> 00:04:43,530
calls<font color="#E5E5E5"> because we can't just put some</font>

109
00:04:41,699 --> 00:04:45,600
code that<font color="#E5E5E5"> we're going to run what we</font>

110
00:04:43,530 --> 00:04:48,299
need to do is hijack<font color="#E5E5E5"> the stack and we do</font>

111
00:04:45,600 --> 00:04:49,800
that essentially by<font color="#CCCCCC"> taking control</font><font color="#E5E5E5"> of</font>

112
00:04:48,300 --> 00:04:52,800
<font color="#E5E5E5">the stack pointer rather than the</font>

113
00:04:49,800 --> 00:04:56,010
instruction pointer<font color="#CCCCCC"> and you'd find a</font>

114
00:04:52,800 --> 00:04:58,440
stack pivot gadget<font color="#CCCCCC"> essentially you know</font>

115
00:04:56,010 --> 00:05:00,750
a tiny set of bytes<font color="#E5E5E5"> so if we've got</font><font color="#CCCCCC"> a</font>

116
00:04:58,440 --> 00:05:02,520
big set<font color="#CCCCCC"> of code it's quite easy to</font><font color="#E5E5E5"> find</font>

117
00:05:00,750 --> 00:05:05,220
<font color="#E5E5E5">that sequence of bytes even though that</font>

118
00:05:02,520 --> 00:05:07,260
might<font color="#E5E5E5"> not</font><font color="#CCCCCC"> be the</font><font color="#E5E5E5"> intended instruction to</font>

119
00:05:05,220 --> 00:05:09,720
hijack the stack pointer<font color="#CCCCCC"> and pointee our</font>

120
00:05:07,260 --> 00:05:11,880
code and then our exploit would look

121
00:05:09,720 --> 00:05:14,370
something<font color="#CCCCCC"> like this so we'd pivot the</font>

122
00:05:11,880 --> 00:05:16,830
stack<font color="#E5E5E5"> run a series</font><font color="#CCCCCC"> of rock and that rock</font>

123
00:05:14,370 --> 00:05:20,669
would probably<font color="#E5E5E5"> point</font><font color="#CCCCCC"> into our shellcode</font>

124
00:05:16,830 --> 00:05:23,280
and<font color="#E5E5E5"> start executing that in 2012 they</font>

125
00:05:20,669 --> 00:05:26,159
introduced another mitigation called<font color="#CCCCCC"> BT</font>

126
00:05:23,280 --> 00:05:29,070
guard or virtual table guard<font color="#E5E5E5"> which is</font>

127
00:05:26,160 --> 00:05:30,690
basically a bit like a cookie or canary

128
00:05:29,070 --> 00:05:34,919
within the<font color="#CCCCCC"> virtual table that</font><font color="#E5E5E5"> was a</font>

129
00:05:30,690 --> 00:05:36,719
value that's checked this kind<font color="#E5E5E5"> of</font>

130
00:05:34,919 --> 00:05:39,060
<font color="#E5E5E5">mitigation is looking fairly dated and</font>

131
00:05:36,720 --> 00:05:41,370
I've only mentioned<font color="#E5E5E5"> it because</font><font color="#CCCCCC"> we'll see</font>

132
00:05:39,060 --> 00:05:43,470
it and I didn't<font color="#E5E5E5"> want to sort of used to</font>

133
00:05:41,370 --> 00:05:48,389
say what on earth is he talking about<font color="#CCCCCC"> VC</font>

134
00:05:43,470 --> 00:05:51,810
guard for also in 2012<font color="#E5E5E5"> a SLR was</font>

135
00:05:48,389 --> 00:05:53,460
introduced<font color="#E5E5E5"> I think in about 2006 but</font>

136
00:05:51,810 --> 00:05:56,460
there was a whole<font color="#E5E5E5"> bunch of dll's that</font>

137
00:05:53,460 --> 00:05:58,739
didn't opt<font color="#E5E5E5"> into it and so the way to get</font>

138
00:05:56,460 --> 00:06:00,450
<font color="#E5E5E5">around it was to you know cause the</font>

139
00:05:58,740 --> 00:06:01,530
application<font color="#CCCCCC"> to load one of</font><font color="#E5E5E5"> these dll's</font>

140
00:06:00,450 --> 00:06:05,479
and then we could build a rope chain

141
00:06:01,530 --> 00:06:07,530
based on code at a known location

142
00:06:05,479 --> 00:06:09,330
there's a really really<font color="#CCCCCC"> good paper</font>

143
00:06:07,530 --> 00:06:12,179
called the info leak<font color="#E5E5E5"> error on software</font>

144
00:06:09,330 --> 00:06:15,330
exploitation and this is kind of once<font color="#CCCCCC"> a</font>

145
00:06:12,180 --> 00:06:17,039
<font color="#CCCCCC">SLR became effective</font><font color="#E5E5E5"> the general opinion</font>

146
00:06:15,330 --> 00:06:19,320
was<font color="#E5E5E5"> that you had to</font><font color="#CCCCCC"> find an information</font>

147
00:06:17,039 --> 00:06:23,340
<font color="#E5E5E5">leak to leak out the</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> of a dll in</font>

148
00:06:19,320 --> 00:06:25,200
order to execute<font color="#E5E5E5"> code and in 2014 they</font>

149
00:06:23,340 --> 00:06:27,539
introduced further mitigation called

150
00:06:25,200 --> 00:06:29,760
control flow guard<font color="#E5E5E5"> which essentially</font>

151
00:06:27,539 --> 00:06:32,219
means<font color="#E5E5E5"> that all these pointers within the</font>

152
00:06:29,760 --> 00:06:33,659
function<font color="#CCCCCC"> table can no longer</font><font color="#E5E5E5"> sort of</font>

153
00:06:32,220 --> 00:06:35,520
point<font color="#E5E5E5"> to some arbitrary</font><font color="#CCCCCC"> piece of</font>

154
00:06:33,660 --> 00:06:38,820
executable<font color="#E5E5E5"> code they must point to a</font>

155
00:06:35,520 --> 00:06:41,789
valid<font color="#CCCCCC"> function and there's not been a</font>

156
00:06:38,820 --> 00:06:43,539
great<font color="#E5E5E5"> deal</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> work on how</font><font color="#CCCCCC"> we might get</font>

157
00:06:41,789 --> 00:06:46,060
past this by corrupting

158
00:06:43,539 --> 00:06:48,818
so what I<font color="#E5E5E5"> wanted to do was take a quick</font>

159
00:06:46,060 --> 00:06:50,590
look<font color="#E5E5E5"> at what virtual method</font><font color="#CCCCCC"> in vacations</font>

160
00:06:48,819 --> 00:06:52,210
look like now this<font color="#E5E5E5"> mitigations been</font>

161
00:06:50,590 --> 00:06:54,789
introduced<font color="#E5E5E5"> and they're slightly</font>

162
00:06:52,210 --> 00:06:57,580
<font color="#E5E5E5">different</font><font color="#CCCCCC"> on 32-bit</font><font color="#E5E5E5"> and 64-bit and</font>

163
00:06:54,789 --> 00:06:58,870
actually it was<font color="#E5E5E5"> the way one of the</font>

164
00:06:57,580 --> 00:07:01,240
issues they'd have to address they've

165
00:06:58,870 --> 00:07:02,770
had to<font color="#E5E5E5"> address on 32-bit that started</font>

166
00:07:01,240 --> 00:07:06,550
giving me some<font color="#E5E5E5"> of the ideas that we're</font>

167
00:07:02,770 --> 00:07:09,520
going to be<font color="#E5E5E5"> talking about further so on</font>

168
00:07:06,550 --> 00:07:12,069
32-bit<font color="#E5E5E5"> it calls out to</font><font color="#CCCCCC"> a routine</font><font color="#E5E5E5"> that's</font>

169
00:07:09,520 --> 00:07:14,799
going to check<font color="#E5E5E5"> if it's a valid</font><font color="#CCCCCC"> function</font>

170
00:07:12,069 --> 00:07:15,759
that we're trying to call so I'm not

171
00:07:14,800 --> 00:07:17,590
going<font color="#E5E5E5"> to go into loads of the</font>

172
00:07:15,759 --> 00:07:20,710
<font color="#CCCCCC">implementation details but basically</font>

173
00:07:17,590 --> 00:07:22,690
<font color="#CCCCCC">Windows keeps a big bitmap</font><font color="#E5E5E5"> you know of</font>

174
00:07:20,710 --> 00:07:25,030
ones<font color="#E5E5E5"> and zeros for every kind of entry</font>

175
00:07:22,690 --> 00:07:26,919
point in an application<font color="#CCCCCC"> is this a method</font>

176
00:07:25,030 --> 00:07:29,650
<font color="#E5E5E5">you know the start of a method a valid</font>

177
00:07:26,919 --> 00:07:31,719
<font color="#E5E5E5">entry point</font><font color="#CCCCCC"> to a method but as well as</font>

178
00:07:29,650 --> 00:07:33,789
<font color="#E5E5E5">that on 32-bit there's a little check</font>

179
00:07:31,719 --> 00:07:35,800
<font color="#E5E5E5">after the function has</font><font color="#CCCCCC"> been invoked to</font>

180
00:07:33,789 --> 00:07:37,419
<font color="#CCCCCC">check that the stack point</font><font color="#E5E5E5"> is still</font>

181
00:07:35,800 --> 00:07:40,090
<font color="#E5E5E5">where it was before the function</font><font color="#CCCCCC"> is</font>

182
00:07:37,419 --> 00:07:41,770
invoked<font color="#E5E5E5"> and the reason for</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is that</font>

183
00:07:40,090 --> 00:07:44,500
<font color="#E5E5E5">what you could do for</font><font color="#CCCCCC"> instance if you</font>

184
00:07:41,770 --> 00:07:46,299
call<font color="#E5E5E5"> cause the application</font><font color="#CCCCCC"> to call a</font>

185
00:07:44,500 --> 00:07:49,060
<font color="#E5E5E5">function that was expecting one argument</font>

186
00:07:46,300 --> 00:07:50,699
<font color="#E5E5E5">but sent it like four arguments</font><font color="#CCCCCC"> it's</font>

187
00:07:49,060 --> 00:07:53,409
going to only<font color="#E5E5E5"> pop one off</font><font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> and</font>

188
00:07:50,699 --> 00:07:54,880
<font color="#E5E5E5">leave the stack in an undesirable state</font>

189
00:07:53,409 --> 00:07:57,099
<font color="#CCCCCC">afterwards so for instance if we could</font>

190
00:07:54,880 --> 00:07:58,539
manipulate<font color="#E5E5E5"> one of these</font><font color="#CCCCCC"> arguments to</font>

191
00:07:57,099 --> 00:08:01,240
point to some code it might<font color="#E5E5E5"> get</font>

192
00:07:58,539 --> 00:08:04,479
interpreted as a return address<font color="#E5E5E5"> and then</font>

193
00:08:01,240 --> 00:08:06,789
we'd<font color="#CCCCCC"> have</font><font color="#E5E5E5"> defeated</font><font color="#CCCCCC"> control flow guard on</font>

194
00:08:04,479 --> 00:08:09,400
64-bit<font color="#E5E5E5"> it doesn't have any check like</font>

195
00:08:06,789 --> 00:08:10,900
that<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> because the caller pops</font>

196
00:08:09,400 --> 00:08:12,489
the arguments off the stack for rather

197
00:08:10,900 --> 00:08:13,960
than<font color="#CCCCCC"> the</font><font color="#E5E5E5"> function that's called so it's</font>

198
00:08:12,490 --> 00:08:18,759
<font color="#E5E5E5">impossible</font><font color="#CCCCCC"> for it to</font><font color="#E5E5E5"> become</font><font color="#CCCCCC"> D</font>

199
00:08:13,960 --> 00:08:20,859
<font color="#CCCCCC">synchronized okay so let's start taking</font>

200
00:08:18,759 --> 00:08:21,629
<font color="#E5E5E5">a look at these techniques I was talking</font>

201
00:08:20,860 --> 00:08:24,330
about

202
00:08:21,629 --> 00:08:27,190
<font color="#E5E5E5">okay so firstly there'd been a number of</font>

203
00:08:24,330 --> 00:08:27,580
<font color="#E5E5E5">attacks or bypasses on control flow</font>

204
00:08:27,190 --> 00:08:29,979
guard

205
00:08:27,580 --> 00:08:31,659
<font color="#E5E5E5">I've got whole load of references at the</font>

206
00:08:29,979 --> 00:08:33,250
end<font color="#E5E5E5"> of the paper I don't</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> time to</font>

207
00:08:31,659 --> 00:08:35,770
sort<font color="#E5E5E5"> of go into all the details of these</font>

208
00:08:33,250 --> 00:08:38,380
previous attacks<font color="#E5E5E5"> but by and large they'd</font>

209
00:08:35,770 --> 00:08:40,269
make heavy use of a sort of gaining full

210
00:08:38,380 --> 00:08:42,880
<font color="#CCCCCC">read/write access to the process base</font>

211
00:08:40,269 --> 00:08:44,890
and starting to manipulate things most

212
00:08:42,880 --> 00:08:46,540
of them have<font color="#CCCCCC"> been mitigated</font><font color="#E5E5E5"> but one that</font>

213
00:08:44,890 --> 00:08:49,000
aligns quite well with what we're doing

214
00:08:46,540 --> 00:08:52,019
hasn't<font color="#E5E5E5"> been which is</font><font color="#CCCCCC"> overwriting return</font>

215
00:08:49,000 --> 00:08:52,019
addresses<font color="#E5E5E5"> on the stack</font>

216
00:08:52,110 --> 00:08:57,940
<font color="#E5E5E5">okay so control flow gadgets</font><font color="#CCCCCC"> basically</font>

217
00:08:55,450 --> 00:08:59,670
what we're going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> looking at is you</font>

218
00:08:57,940 --> 00:09:02,470
know<font color="#E5E5E5"> they've</font><font color="#CCCCCC"> been a number of sort of</font>

219
00:08:59,670 --> 00:09:06,670
code reuse attacks<font color="#CCCCCC"> they Rock and</font><font color="#E5E5E5"> rep to</font>

220
00:09:02,470 --> 00:09:08,500
<font color="#CCCCCC">Lipsy being the most</font><font color="#E5E5E5"> well known one what</font>

221
00:09:06,670 --> 00:09:10,689
we're going to<font color="#E5E5E5"> do is use these valid</font>

222
00:09:08,500 --> 00:09:12,370
functions as gadgets and see if we can

223
00:09:10,690 --> 00:09:15,100
chain them together to cause interesting

224
00:09:12,370 --> 00:09:18,040
things to happen<font color="#CCCCCC"> where with return</font>

225
00:09:15,100 --> 00:09:20,110
orientated programming<font color="#E5E5E5"> the focus is</font><font color="#CCCCCC"> the</font>

226
00:09:18,040 --> 00:09:23,949
stack<font color="#CCCCCC"> so we talked about</font><font color="#E5E5E5"> pivoting the</font>

227
00:09:20,110 --> 00:09:26,190
<font color="#CCCCCC">stack</font><font color="#E5E5E5"> to an area under</font><font color="#CCCCCC"> our control in</font>

228
00:09:23,950 --> 00:09:28,900
control flow gadgets the focus will be

229
00:09:26,190 --> 00:09:32,350
like the current this<font color="#CCCCCC"> object or the</font>

230
00:09:28,900 --> 00:09:35,170
object of focus okay so an early

231
00:09:32,350 --> 00:09:38,290
approach<font color="#CCCCCC"> I sort</font><font color="#E5E5E5"> of looking at this is</font>

232
00:09:35,170 --> 00:09:40,780
well just like<font color="#CCCCCC"> we do an object injection</font>

233
00:09:38,290 --> 00:09:42,730
<font color="#E5E5E5">can we essentially chain</font><font color="#CCCCCC"> together to get</font>

234
00:09:40,780 --> 00:09:44,530
to a<font color="#E5E5E5"> useful function so we do things</font>

235
00:09:42,730 --> 00:09:48,100
like<font color="#E5E5E5"> try and get it to load a library</font>

236
00:09:44,530 --> 00:09:50,470
from a<font color="#E5E5E5"> UNC path</font><font color="#CCCCCC"> now obviously you'll see</font>

237
00:09:48,100 --> 00:09:52,030
here<font color="#E5E5E5"> you'd have</font><font color="#CCCCCC"> to control</font><font color="#E5E5E5"> for instance</font>

238
00:09:50,470 --> 00:09:54,670
<font color="#E5E5E5">a number</font><font color="#CCCCCC"> of the properties of the object</font>

239
00:09:52,030 --> 00:09:57,069
<font color="#CCCCCC">and find a useful</font><font color="#E5E5E5"> gadget that started</font>

240
00:09:54,670 --> 00:09:58,870
<font color="#CCCCCC">using those those properties and</font><font color="#E5E5E5"> called</font>

241
00:09:57,070 --> 00:10:01,380
a<font color="#E5E5E5"> method on one of those</font><font color="#CCCCCC"> properties and</font>

242
00:09:58,870 --> 00:10:03,220
so<font color="#E5E5E5"> on and so forth</font>

243
00:10:01,380 --> 00:10:05,110
Microsoft have obviously<font color="#E5E5E5"> kind of</font>

244
00:10:03,220 --> 00:10:06,970
cottoned<font color="#E5E5E5"> on</font><font color="#CCCCCC"> to this type of approach and</font>

245
00:10:05,110 --> 00:10:10,660
<font color="#E5E5E5">I've started closing off all the</font>

246
00:10:06,970 --> 00:10:12,670
functions<font color="#E5E5E5"> that might be useful but in</font>

247
00:10:10,660 --> 00:10:14,500
they recently spoke about these

248
00:10:12,670 --> 00:10:16,689
mitigations a couple of weeks ago<font color="#CCCCCC"> and</font>

249
00:10:14,500 --> 00:10:20,680
there's one thing<font color="#E5E5E5"> that they</font><font color="#CCCCCC"> mention</font><font color="#E5E5E5"> as a</font>

250
00:10:16,690 --> 00:10:23,050
known limitation and<font color="#E5E5E5"> well-known</font>

251
00:10:20,680 --> 00:10:24,819
<font color="#E5E5E5">limitations and limitations just as much</font>

252
00:10:23,050 --> 00:10:26,709
as unknown limitations are so we're

253
00:10:24,820 --> 00:10:28,390
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> using this and that's</font>

254
00:10:26,710 --> 00:10:31,660
basically<font color="#E5E5E5"> that yes you can overwrite</font>

255
00:10:28,390 --> 00:10:33,400
return the<font color="#E5E5E5"> dresses on the stack in the</font>

256
00:10:31,660 --> 00:10:35,469
not-too-distant future they've worked

257
00:10:33,400 --> 00:10:36,880
with<font color="#CCCCCC"> Intel</font><font color="#E5E5E5"> on our hardware mitigation</font>

258
00:10:35,470 --> 00:10:39,490
for this<font color="#E5E5E5"> and that they're basically</font>

259
00:10:36,880 --> 00:10:42,570
moving<font color="#E5E5E5"> the return addresses to a shadow</font>

260
00:10:39,490 --> 00:10:45,820
stack that hopefully you can't corrupt

261
00:10:42,570 --> 00:10:47,380
<font color="#E5E5E5">okay so how can we look at overwriting a</font>

262
00:10:45,820 --> 00:10:51,160
return address<font color="#CCCCCC"> on the stack kind of from</font>

263
00:10:47,380 --> 00:10:52,810
<font color="#E5E5E5">an</font><font color="#CCCCCC"> from an object perspective well what</font>

264
00:10:51,160 --> 00:10:54,579
we could<font color="#CCCCCC"> think about is basically</font>

265
00:10:52,810 --> 00:10:56,560
<font color="#E5E5E5">mismatching the arguments between</font><font color="#CCCCCC"> a</font>

266
00:10:54,580 --> 00:11:00,520
function<font color="#CCCCCC"> that invokes another</font><font color="#E5E5E5"> and what</font>

267
00:10:56,560 --> 00:11:02,170
that<font color="#CCCCCC"> function is expecting so you know</font>

268
00:11:00,520 --> 00:11:04,140
if you've<font color="#CCCCCC"> looked at any</font><font color="#E5E5E5"> reasonable</font>

269
00:11:02,170 --> 00:11:05,969
amount<font color="#E5E5E5"> of code obviously local vary</font>

270
00:11:04,140 --> 00:11:08,910
<font color="#E5E5E5">are often used and they're stored on the</font>

271
00:11:05,970 --> 00:11:11,130
stack<font color="#CCCCCC"> so if we could get a function to</font>

272
00:11:08,910 --> 00:11:13,170
pass a local variable<font color="#E5E5E5"> off to another</font>

273
00:11:11,130 --> 00:11:15,390
<font color="#E5E5E5">function</font><font color="#CCCCCC"> and then that functions</font>

274
00:11:13,170 --> 00:11:19,800
<font color="#E5E5E5">treating it in an unexpected way for</font>

275
00:11:15,390 --> 00:11:22,050
instance as an object<font color="#CCCCCC"> basically we may</font>

276
00:11:19,800 --> 00:11:24,569
be able to overwrite<font color="#CCCCCC"> the return</font><font color="#E5E5E5"> address</font>

277
00:11:22,050 --> 00:11:27,900
by<font color="#E5E5E5"> setting the</font><font color="#CCCCCC"> appropriate property on</font>

278
00:11:24,570 --> 00:11:29,880
our<font color="#CCCCCC"> object</font><font color="#E5E5E5"> now I guess sort of that</font>

279
00:11:27,900 --> 00:11:31,800
sounds nice<font color="#E5E5E5"> in theory</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you know can</font>

280
00:11:29,880 --> 00:11:34,439
<font color="#CCCCCC">we find these these kind</font><font color="#E5E5E5"> of functions</font>

281
00:11:31,800 --> 00:11:36,750
because the proof of concept<font color="#CCCCCC"> that I'm</font>

282
00:11:34,440 --> 00:11:38,010
going<font color="#CCCCCC"> to go through later is all 32-bit</font>

283
00:11:36,750 --> 00:11:40,980
<font color="#CCCCCC">because the second technique I'm going</font>

284
00:11:38,010 --> 00:11:44,400
<font color="#CCCCCC">to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about is only 32-bit</font><font color="#E5E5E5"> I thought</font>

285
00:11:40,980 --> 00:11:48,600
I'd show you some<font color="#E5E5E5"> examples of the 64-bit</font>

286
00:11:44,400 --> 00:11:53,430
versions of<font color="#E5E5E5"> the gadget so here's a tiny</font>

287
00:11:48,600 --> 00:11:55,080
valid function<font color="#E5E5E5"> from Ms HTML 64-bit when</font>

288
00:11:53,430 --> 00:11:56,280
<font color="#E5E5E5">actually it turns out</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> was a bit</font><font color="#CCCCCC"> online</font>

289
00:11:55,080 --> 00:11:58,440
<font color="#CCCCCC">Bish's tonight and you're trying to</font>

290
00:11:56,280 --> 00:11:59,970
<font color="#E5E5E5">overwrite one property there's a whole</font>

291
00:11:58,440 --> 00:12:02,400
load<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these functions that basically</font>

292
00:11:59,970 --> 00:12:06,600
grab a load of properties and overwrite

293
00:12:02,400 --> 00:12:08,610
them you know<font color="#E5E5E5"> onto another object and so</font>

294
00:12:06,600 --> 00:12:11,430
the the gadget we have to<font color="#CCCCCC"> Mack</font><font color="#E5E5E5"> match</font>

295
00:12:08,610 --> 00:12:14,910
with<font color="#CCCCCC"> that is one which</font><font color="#E5E5E5"> uses local</font>

296
00:12:11,430 --> 00:12:20,910
variables<font color="#CCCCCC"> and here's just such a gadget</font>

297
00:12:14,910 --> 00:12:22,560
<font color="#CCCCCC">again</font><font color="#E5E5E5"> within MS HTML a slight difference</font>

298
00:12:20,910 --> 00:12:25,709
from this from the gadget we were kind

299
00:12:22,560 --> 00:12:28,229
of theorizing might exist is if we look

300
00:12:25,710 --> 00:12:31,200
closely this<font color="#E5E5E5"> is basically before it</font>

301
00:12:28,230 --> 00:12:33,780
invokes a method<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> pivoting to a</font>

302
00:12:31,200 --> 00:12:35,430
property of<font color="#CCCCCC"> that object</font><font color="#E5E5E5"> so a property of</font>

303
00:12:33,780 --> 00:12:40,260
<font color="#CCCCCC">that object which will also be an object</font>

304
00:12:35,430 --> 00:12:42,510
<font color="#CCCCCC">is becoming the focus</font><font color="#E5E5E5"> okay so that this</font>

305
00:12:40,260 --> 00:12:45,330
is basically<font color="#E5E5E5"> where we are now and this</font>

306
00:12:42,510 --> 00:12:47,640
will get<font color="#CCCCCC"> us past</font><font color="#E5E5E5"> control flow guards so</font>

307
00:12:45,330 --> 00:12:50,250
we've got one object<font color="#E5E5E5"> we set one of its</font>

308
00:12:47,640 --> 00:12:52,380
<font color="#E5E5E5">properties to</font><font color="#CCCCCC"> what what we want to</font><font color="#E5E5E5"> use</font>

309
00:12:50,250 --> 00:12:54,570
<font color="#CCCCCC">is a stack pivot and then we use this</font>

310
00:12:52,380 --> 00:12:56,700
pair<font color="#CCCCCC"> of gadgets</font><font color="#E5E5E5"> to overwrite that stack</font>

311
00:12:54,570 --> 00:12:58,290
pivot as the return address<font color="#CCCCCC"> and then</font>

312
00:12:56,700 --> 00:13:00,990
we'll hopefully be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to execute our</font>

313
00:12:58,290 --> 00:13:04,709
return orientated code and jump to<font color="#CCCCCC"> the</font>

314
00:13:00,990 --> 00:13:06,660
shell code<font color="#E5E5E5"> or whatever because we want</font>

315
00:13:04,710 --> 00:13:08,010
<font color="#E5E5E5">to make this technique as generic as</font>

316
00:13:06,660 --> 00:13:10,350
<font color="#E5E5E5">possible sort of one of the first</font>

317
00:13:08,010 --> 00:13:12,930
questions we<font color="#CCCCCC"> should</font><font color="#E5E5E5"> ask yourself is what</font>

318
00:13:10,350 --> 00:13:14,880
if we can't control<font color="#E5E5E5"> that property</font><font color="#CCCCCC"> that</font>

319
00:13:12,930 --> 00:13:16,469
we<font color="#E5E5E5"> want to use to overwrite a value on</font>

320
00:13:14,880 --> 00:13:19,240
the stack

321
00:13:16,470 --> 00:13:22,270
well one<font color="#E5E5E5"> of the most obvious</font><font color="#CCCCCC"> things to</font>

322
00:13:19,240 --> 00:13:24,850
do would<font color="#CCCCCC"> be to</font><font color="#E5E5E5"> simply pivot to a</font>

323
00:13:22,270 --> 00:13:28,750
property of the object<font color="#CCCCCC"> that we partially</font>

324
00:13:24,850 --> 00:13:30,810
control and you know these what I've

325
00:13:28,750 --> 00:13:33,550
written there is a<font color="#E5E5E5"> pivots</font><font color="#CCCCCC"> a property</font>

326
00:13:30,810 --> 00:13:35,020
<font color="#CCCCCC">gadget</font><font color="#E5E5E5"> if you can imagine there's a</font>

327
00:13:33,550 --> 00:13:37,120
whole ton<font color="#CCCCCC"> of functions that</font><font color="#E5E5E5"> the first</font>

328
00:13:35,020 --> 00:13:40,000
thing they do is<font color="#CCCCCC"> call a method</font><font color="#E5E5E5"> on on a</font>

329
00:13:37,120 --> 00:13:42,040
property<font color="#E5E5E5"> of the object</font><font color="#CCCCCC"> so these are</font>

330
00:13:40,000 --> 00:13:44,410
really<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> find and that</font><font color="#CCCCCC"> would mean</font>

331
00:13:42,040 --> 00:13:46,930
<font color="#E5E5E5">if we controlled any property</font><font color="#CCCCCC"> that we</font>

332
00:13:44,410 --> 00:13:50,230
<font color="#E5E5E5">could find a corresponding gadget for we</font>

333
00:13:46,930 --> 00:13:51,670
could<font color="#E5E5E5"> also control the stack pointer</font><font color="#CCCCCC"> but</font>

334
00:13:50,230 --> 00:13:54,070
again trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be as generic as</font>

335
00:13:51,670 --> 00:13:56,050
<font color="#CCCCCC">possible the question we should</font><font color="#E5E5E5"> ask</font>

336
00:13:54,070 --> 00:13:58,089
<font color="#E5E5E5">yourself is what if we don't control any</font>

337
00:13:56,050 --> 00:14:00,310
properties of the objects<font color="#E5E5E5"> because</font>

338
00:13:58,089 --> 00:14:01,900
looking at the the<font color="#E5E5E5"> way this previously</font>

339
00:14:00,310 --> 00:14:05,010
<font color="#E5E5E5">worked it was sufficient</font><font color="#CCCCCC"> to just</font>

340
00:14:01,900 --> 00:14:08,920
overwrite the<font color="#E5E5E5"> vtable pointer</font>

341
00:14:05,010 --> 00:14:11,890
well if we could<font color="#E5E5E5"> somehow basically</font><font color="#CCCCCC"> make</font>

342
00:14:08,920 --> 00:14:13,870
the you know make the code treat the

343
00:14:11,890 --> 00:14:15,220
function table<font color="#E5E5E5"> as if it was an object</font><font color="#CCCCCC"> it</font>

344
00:14:13,870 --> 00:14:18,610
certainly isn't and there's no

345
00:14:15,220 --> 00:14:19,960
<font color="#E5E5E5">legitimate code that would do that but</font>

346
00:14:18,610 --> 00:14:23,200
then we would<font color="#E5E5E5"> have solved our problem</font>

347
00:14:19,960 --> 00:14:25,089
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> would be able to continue so</font>

348
00:14:23,200 --> 00:14:27,279
before<font color="#CCCCCC"> I talked about mismatched</font>

349
00:14:25,089 --> 00:14:29,770
arguments<font color="#E5E5E5"> the next thing I want to think</font>

350
00:14:27,279 --> 00:14:30,839
about is unintended arguments so when I

351
00:14:29,770 --> 00:14:33,100
talked about<font color="#E5E5E5"> that stack</font>

352
00:14:30,839 --> 00:14:35,920
<font color="#CCCCCC">desynchronisation attack there was</font><font color="#E5E5E5"> the</font>

353
00:14:33,100 --> 00:14:37,750
fact<font color="#E5E5E5"> that the you know we're allowed to</font>

354
00:14:35,920 --> 00:14:39,490
<font color="#E5E5E5">call any valid</font><font color="#CCCCCC"> function and it doesn't</font>

355
00:14:37,750 --> 00:14:41,800
have<font color="#E5E5E5"> to have the expected</font><font color="#CCCCCC"> number of</font>

356
00:14:39,490 --> 00:14:43,720
arguments so if we call<font color="#CCCCCC"> a function</font>

357
00:14:41,800 --> 00:14:45,969
<font color="#E5E5E5">that's expecting four arguments but</font><font color="#CCCCCC"> we</font>

358
00:14:43,720 --> 00:14:48,570
only supply<font color="#CCCCCC"> at one where are the other</font>

359
00:14:45,970 --> 00:14:51,279
arguments going to come from<font color="#E5E5E5"> and</font>

360
00:14:48,570 --> 00:14:53,830
basically<font color="#CCCCCC"> the idea is</font><font color="#E5E5E5"> well maybe we</font>

361
00:14:51,279 --> 00:14:56,680
could<font color="#E5E5E5"> get that</font><font color="#CCCCCC"> vtable pointer to happen</font>

362
00:14:53,830 --> 00:14:58,529
to be one<font color="#E5E5E5"> of the arguments here our</font>

363
00:14:56,680 --> 00:15:01,989
approach<font color="#E5E5E5"> has to split slightly between</font>

364
00:14:58,529 --> 00:15:03,670
32-bit and 64-bit<font color="#E5E5E5"> essentially because</font>

365
00:15:01,990 --> 00:15:05,170
they have different<font color="#E5E5E5"> calling conventions</font>

366
00:15:03,670 --> 00:15:07,079
so the way arguments are passed<font color="#E5E5E5"> to a</font>

367
00:15:05,170 --> 00:15:09,550
function differs between the two on

368
00:15:07,080 --> 00:15:12,339
32-bit most of the<font color="#E5E5E5"> arguments are placed</font>

369
00:15:09,550 --> 00:15:14,290
on<font color="#E5E5E5"> the stack so we'll need to place a</font><font color="#CCCCCC"> be</font>

370
00:15:12,339 --> 00:15:17,290
table pointer<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> stack and interpret</font>

371
00:15:14,290 --> 00:15:18,790
it as an<font color="#CCCCCC"> argument</font><font color="#E5E5E5"> and on 64-bit the</font>

372
00:15:17,290 --> 00:15:21,069
first four<font color="#CCCCCC"> arguments</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> passed by a</font>

373
00:15:18,790 --> 00:15:23,020
register<font color="#CCCCCC"> so what we want</font><font color="#E5E5E5"> to do is try</font>

374
00:15:21,070 --> 00:15:26,050
and<font color="#E5E5E5"> set one of those registers to point</font>

375
00:15:23,020 --> 00:15:28,300
to<font color="#E5E5E5"> our V table pointer so again that</font>

376
00:15:26,050 --> 00:15:30,020
sounds<font color="#E5E5E5"> nice in theory</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> we go to see</font>

377
00:15:28,300 --> 00:15:34,189
if we can find a gadget<font color="#CCCCCC"> that does there</font>

378
00:15:30,020 --> 00:15:36,770
and lo<font color="#E5E5E5"> and behold there there is one now</font>

379
00:15:34,190 --> 00:15:39,140
this it<font color="#E5E5E5"> calls one virtual method which</font>

380
00:15:36,770 --> 00:15:41,390
we can easily sort of stub out<font color="#E5E5E5"> you know</font>

381
00:15:39,140 --> 00:15:43,360
set to<font color="#E5E5E5"> the simplest gadget we can find</font>

382
00:15:41,390 --> 00:15:45,860
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> will return cleanly</font><font color="#E5E5E5"> and</font>

383
00:15:43,360 --> 00:15:47,870
then it will set r9 which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

384
00:15:45,860 --> 00:15:50,810
register used for the fourth argument<font color="#E5E5E5"> of</font>

385
00:15:47,870 --> 00:15:54,860
an invocation<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> V</font><font color="#E5E5E5"> table pointer and</font>

386
00:15:50,810 --> 00:15:56,420
call<font color="#E5E5E5"> into another gadget and obviously</font>

387
00:15:54,860 --> 00:15:58,450
we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find a corresponding gadget</font>

388
00:15:56,420 --> 00:16:01,849
which is<font color="#E5E5E5"> going to use that register and</font>

389
00:15:58,450 --> 00:16:04,400
set that<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the object</font><font color="#E5E5E5"> to focus and call</font>

390
00:16:01,850 --> 00:16:06,860
a call a method on<font color="#CCCCCC"> it and there's a</font>

391
00:16:04,400 --> 00:16:09,350
gadget that<font color="#E5E5E5"> does just that so it turns</font>

392
00:16:06,860 --> 00:16:11,320
out<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> pivot the V</font><font color="#E5E5E5"> table pointer</font><font color="#CCCCCC"> and</font>

393
00:16:09,350 --> 00:16:13,700
if we<font color="#E5E5E5"> sort of squash things together</font>

394
00:16:11,320 --> 00:16:15,740
<font color="#E5E5E5">we're pretty much back where</font><font color="#CCCCCC"> we were</font>

395
00:16:13,700 --> 00:16:17,780
before<font color="#CCCCCC"> controlled flow</font><font color="#E5E5E5"> guards so we have</font>

396
00:16:15,740 --> 00:16:21,080
<font color="#E5E5E5">to</font><font color="#CCCCCC"> chuck a bunch of stuff into the</font>

397
00:16:17,780 --> 00:16:23,900
function table<font color="#E5E5E5"> set up a few pointers to</font>

398
00:16:21,080 --> 00:16:27,310
sort<font color="#CCCCCC"> of point</font><font color="#E5E5E5"> to each other but that is</font>

399
00:16:23,900 --> 00:16:29,449
<font color="#E5E5E5">essentially control flow guard bypassed</font>

400
00:16:27,310 --> 00:16:32,300
<font color="#E5E5E5">okay so the second technique we're going</font>

401
00:16:29,450 --> 00:16:36,170
<font color="#CCCCCC">to look at is an attack on</font><font color="#E5E5E5"> a SLR but</font>

402
00:16:32,300 --> 00:16:38,300
<font color="#E5E5E5">it's specific to</font><font color="#CCCCCC"> 32 bits though</font><font color="#E5E5E5"> because</font>

403
00:16:36,170 --> 00:16:41,209
the<font color="#CCCCCC"> address space on</font><font color="#E5E5E5"> 64 bit is much</font>

404
00:16:38,300 --> 00:16:44,209
larger than<font color="#E5E5E5"> 32 bit</font><font color="#CCCCCC"> the approach we take</font>

405
00:16:41,210 --> 00:16:48,140
care is invalid have a very brief look

406
00:16:44,210 --> 00:16:50,980
<font color="#E5E5E5">at how a SLR alert works for the address</font>

407
00:16:48,140 --> 00:16:54,620
<font color="#CCCCCC">that code is loaded into the</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> so</font>

408
00:16:50,980 --> 00:16:56,810
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> you know it's a randomized</font>

409
00:16:54,620 --> 00:16:58,640
address<font color="#E5E5E5"> Microsoft</font><font color="#CCCCCC"> will generally state</font>

410
00:16:56,810 --> 00:17:01,250
that there's<font color="#CCCCCC"> 8 bits of entropy and the</font>

411
00:16:58,640 --> 00:17:02,840
address<font color="#CCCCCC"> that this is loaded</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> if</font>

412
00:17:01,250 --> 00:17:04,190
we're trying<font color="#E5E5E5"> to make a practical exploit</font>

413
00:17:02,840 --> 00:17:07,700
it turns out there's a<font color="#CCCCCC"> little bit more</font>

414
00:17:04,190 --> 00:17:10,190
<font color="#E5E5E5">entropy</font><font color="#CCCCCC"> it's important</font><font color="#E5E5E5"> to note that the</font>

415
00:17:07,700 --> 00:17:11,870
dll's<font color="#E5E5E5"> based address is well aligned so</font>

416
00:17:10,190 --> 00:17:14,060
<font color="#E5E5E5">essentially it's only</font><font color="#CCCCCC"> these two highest</font>

417
00:17:11,869 --> 00:17:15,500
bytes<font color="#CCCCCC"> that will ever be randomized and</font>

418
00:17:14,060 --> 00:17:17,869
it's the one<font color="#CCCCCC"> I've colored slightly</font>

419
00:17:15,500 --> 00:17:20,270
darker<font color="#CCCCCC"> Green</font><font color="#E5E5E5"> that will take you know</font>

420
00:17:17,869 --> 00:17:22,458
will be<font color="#E5E5E5"> completely random</font><font color="#CCCCCC"> and the other</font>

421
00:17:20,270 --> 00:17:26,780
other value will be in a<font color="#E5E5E5"> fairly fixed</font>

422
00:17:22,459 --> 00:17:28,130
<font color="#E5E5E5">range and the main attack technique that</font>

423
00:17:26,780 --> 00:17:30,350
we're going<font color="#E5E5E5"> to use is something</font><font color="#CCCCCC"> called</font>

424
00:17:28,130 --> 00:17:33,350
heap<font color="#E5E5E5"> spraying</font><font color="#CCCCCC"> which has been</font><font color="#E5E5E5"> around for</font>

425
00:17:30,350 --> 00:17:35,689
a long<font color="#CCCCCC"> long time and we're</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> just</font>

426
00:17:33,350 --> 00:17:37,760
going<font color="#E5E5E5"> to spray data which is</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> people</font>

427
00:17:35,690 --> 00:17:39,470
generally<font color="#E5E5E5"> do but certainly there's other</font>

428
00:17:37,760 --> 00:17:43,220
people who sprayed pointers which is

429
00:17:39,470 --> 00:17:43,820
what we're<font color="#E5E5E5"> going to do and</font><font color="#CCCCCC"> within heap</font>

430
00:17:43,220 --> 00:17:45,530
spraying

431
00:17:43,820 --> 00:17:48,649
again well known that basically<font color="#E5E5E5"> if you</font>

432
00:17:45,530 --> 00:17:50,450
make<font color="#CCCCCC"> large enough allocations</font><font color="#E5E5E5"> your your</font>

433
00:17:48,650 --> 00:17:54,020
data or pointers that you've sprayed

434
00:17:50,450 --> 00:17:56,960
<font color="#E5E5E5">will be placed in a 64 kilobyte</font>

435
00:17:54,020 --> 00:18:00,770
alignment okay<font color="#CCCCCC"> so what is a shifted</font>

436
00:17:56,960 --> 00:18:03,260
<font color="#E5E5E5">pointer basically we</font><font color="#CCCCCC"> just find a normal</font>

437
00:18:00,770 --> 00:18:06,410
<font color="#E5E5E5">pointer and we're addressing it from a</font>

438
00:18:03,260 --> 00:18:08,000
slight offset<font color="#CCCCCC"> now the important thing is</font>

439
00:18:06,410 --> 00:18:10,910
looking<font color="#E5E5E5"> at this what I've called a</font>

440
00:18:08,000 --> 00:18:14,450
shifted pointer it still contains all

441
00:18:10,910 --> 00:18:16,730
the entropy<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> deity you know the</font>

442
00:18:14,450 --> 00:18:19,220
<font color="#CCCCCC">randomness of the dll's loaded address</font>

443
00:18:16,730 --> 00:18:22,940
<font color="#E5E5E5">but we can point it</font><font color="#CCCCCC"> in to data that</font><font color="#E5E5E5"> we</font>

444
00:18:19,220 --> 00:18:24,590
control so<font color="#E5E5E5"> what we do is we spray with a</font>

445
00:18:22,940 --> 00:18:27,050
bunch of<font color="#E5E5E5"> these shifted pointers so that</font>

446
00:18:24,590 --> 00:18:29,300
we get<font color="#E5E5E5"> one at a fixed</font><font color="#CCCCCC"> address and then</font>

447
00:18:27,050 --> 00:18:33,290
we<font color="#CCCCCC"> have that</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> our payload and</font>

448
00:18:29,300 --> 00:18:36,260
our payload will have 256<font color="#E5E5E5"> exploits</font><font color="#CCCCCC"> say</font>

449
00:18:33,290 --> 00:18:37,700
in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> and essentially the action</font>

450
00:18:36,260 --> 00:18:40,520
of<font color="#E5E5E5"> triggering the vulnerability will</font>

451
00:18:37,700 --> 00:18:45,590
select the appropriate<font color="#E5E5E5"> payload based on</font>

452
00:18:40,520 --> 00:18:47,410
the base address<font color="#CCCCCC"> of the dll as I</font>

453
00:18:45,590 --> 00:18:49,760
mentioned before<font color="#CCCCCC"> to actually do this</font>

454
00:18:47,410 --> 00:18:51,770
<font color="#E5E5E5">practically we need to try and go beyond</font>

455
00:18:49,760 --> 00:18:54,170
those<font color="#CCCCCC"> eight bits of entropy which it's</font>

456
00:18:51,770 --> 00:18:56,840
fairly obvious how we can exploit but

457
00:18:54,170 --> 00:19:00,380
what we can do is<font color="#CCCCCC"> basically set up a</font>

458
00:18:56,840 --> 00:19:03,050
series<font color="#CCCCCC"> of shifted pointers</font><font color="#E5E5E5"> now we're not</font>

459
00:19:00,380 --> 00:19:05,690
going<font color="#CCCCCC"> to know which one is at some fixed</font>

460
00:19:03,050 --> 00:19:08,020
address but because we place the payload

461
00:19:05,690 --> 00:19:11,540
<font color="#E5E5E5">directly after these allocations</font>

462
00:19:08,020 --> 00:19:13,670
if you imagine<font color="#CCCCCC"> sorry you know we've got</font>

463
00:19:11,540 --> 00:19:16,100
these shifted pointers and<font color="#E5E5E5"> we've got our</font>

464
00:19:13,670 --> 00:19:18,650
payload<font color="#E5E5E5"> whichever one is active at a</font>

465
00:19:16,100 --> 00:19:20,780
fixed address<font color="#CCCCCC"> also would determine kind</font>

466
00:19:18,650 --> 00:19:23,360
<font color="#E5E5E5">of the alignment of our payload in those</font>

467
00:19:20,780 --> 00:19:24,920
terms<font color="#E5E5E5"> if we were very careful</font><font color="#CCCCCC"> with the</font>

468
00:19:23,360 --> 00:19:27,649
way<font color="#CCCCCC"> we select values we can basically</font>

469
00:19:24,920 --> 00:19:30,890
overlay a bunch of different payloads on

470
00:19:27,650 --> 00:19:35,450
top of each other and<font color="#E5E5E5"> you know</font>

471
00:19:30,890 --> 00:19:37,720
effectively<font color="#E5E5E5"> bypass a SLR so let's move</font>

472
00:19:35,450 --> 00:19:42,490
<font color="#E5E5E5">on to the proof of</font><font color="#CCCCCC"> concept</font>

473
00:19:37,720 --> 00:19:45,260
okay so I've picked<font color="#E5E5E5"> out a</font><font color="#CCCCCC"> CVE which</font>

474
00:19:42,490 --> 00:19:47,060
basically<font color="#E5E5E5"> someone else has</font><font color="#CCCCCC"> taken a</font><font color="#E5E5E5"> good</font>

475
00:19:45,260 --> 00:19:49,250
<font color="#CCCCCC">look at if you</font><font color="#E5E5E5"> want kind of the details</font>

476
00:19:47,060 --> 00:19:52,760
of you know what the vulnerability is

477
00:19:49,250 --> 00:19:54,320
<font color="#CCCCCC">and why it works etc go and go</font><font color="#E5E5E5"> and read</font>

478
00:19:52,760 --> 00:19:57,710
his article it'll explain<font color="#E5E5E5"> it a lot</font>

479
00:19:54,320 --> 00:19:58,070
<font color="#E5E5E5">better than I could for our purposes is</font>

480
00:19:57,710 --> 00:19:59,900
base

481
00:19:58,070 --> 00:20:01,520
<font color="#E5E5E5">a simple type confusion vulnerability</font>

482
00:19:59,900 --> 00:20:04,610
<font color="#E5E5E5">that gives us control of</font><font color="#CCCCCC"> an object</font>

483
00:20:01,520 --> 00:20:07,660
pointer so this is what the code<font color="#E5E5E5"> that</font>

484
00:20:04,610 --> 00:20:10,250
triggers<font color="#E5E5E5"> that vulnerability looks like</font><font color="#CCCCCC"> I</font>

485
00:20:07,660 --> 00:20:11,900
guess<font color="#E5E5E5"> in in simple terms there's a</font>

486
00:20:10,250 --> 00:20:15,580
there's a function<font color="#E5E5E5"> within</font><font color="#CCCCCC"> VB script</font>

487
00:20:11,900 --> 00:20:18,440
<font color="#E5E5E5">that's expecting to be passed</font><font color="#CCCCCC"> an array</font>

488
00:20:15,580 --> 00:20:20,620
<font color="#E5E5E5">what it's not expecting to be passed is</font>

489
00:20:18,440 --> 00:20:23,270
<font color="#E5E5E5">a byte</font><font color="#CCCCCC"> array that we control completely</font>

490
00:20:20,620 --> 00:20:24,860
<font color="#CCCCCC">but all the tests it does to check that</font>

491
00:20:23,270 --> 00:20:27,860
it's the right type<font color="#CCCCCC"> of object a byte</font>

492
00:20:24,860 --> 00:20:30,469
array passes and as long as<font color="#CCCCCC"> we set the</font>

493
00:20:27,860 --> 00:20:33,979
type correctly<font color="#CCCCCC"> basically we</font><font color="#E5E5E5"> can</font>

494
00:20:30,470 --> 00:20:36,200
overwrite an object pointer<font color="#E5E5E5"> and I've</font>

495
00:20:33,980 --> 00:20:39,140
just highlighted sort of the two places

496
00:20:36,200 --> 00:20:41,420
<font color="#CCCCCC">that</font><font color="#E5E5E5"> will end up so it's both the the</font>

497
00:20:39,140 --> 00:20:43,940
<font color="#E5E5E5">pointer that's dereference to look up</font>

498
00:20:41,420 --> 00:20:46,100
the entry<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> V table and it's also</font>

499
00:20:43,940 --> 00:20:50,090
the<font color="#E5E5E5"> first argument that's passed to the</font>

500
00:20:46,100 --> 00:20:51,590
function that's invoked<font color="#E5E5E5"> okay so how are</font>

501
00:20:50,090 --> 00:20:53,179
<font color="#E5E5E5">we going to exploit this well first we</font>

502
00:20:51,590 --> 00:20:55,070
have<font color="#E5E5E5"> to create the shifted pointers</font><font color="#CCCCCC"> that</font>

503
00:20:53,180 --> 00:20:57,230
I talked about<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is a fairly</font>

504
00:20:55,070 --> 00:20:59,870
<font color="#E5E5E5">simple way to create those shifted</font>

505
00:20:57,230 --> 00:21:03,830
pointers<font color="#E5E5E5"> within ie</font><font color="#CCCCCC"> and I think it still</font>

506
00:20:59,870 --> 00:21:08,060
<font color="#CCCCCC">works in edge as</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> basically we we</font>

507
00:21:03,830 --> 00:21:10,399
<font color="#CCCCCC">create Dom elements and we can give them</font>

508
00:21:08,060 --> 00:21:12,500
an arbitrary number<font color="#CCCCCC"> of attributes</font><font color="#E5E5E5"> so we</font>

509
00:21:10,400 --> 00:21:14,300
keep adding<font color="#E5E5E5"> attributes until we've got</font>

510
00:21:12,500 --> 00:21:18,130
something<font color="#E5E5E5"> that's representation in</font>

511
00:21:14,300 --> 00:21:20,600
memory takes a whole 64k chunk<font color="#E5E5E5"> and</font>

512
00:21:18,130 --> 00:21:23,150
<font color="#E5E5E5">essentially we you know spank the memory</font>

513
00:21:20,600 --> 00:21:25,580
with these<font color="#E5E5E5"> and we'll end up</font><font color="#CCCCCC"> with this</font>

514
00:21:23,150 --> 00:21:28,840
<font color="#CCCCCC">pattern in memory</font><font color="#E5E5E5"> now as I mentioned we</font>

515
00:21:25,580 --> 00:21:31,850
can't you<font color="#E5E5E5"> know this</font><font color="#CCCCCC"> isn't a known</font>

516
00:21:28,840 --> 00:21:34,159
alignment it could be at one<font color="#CCCCCC"> of four</font>

517
00:21:31,850 --> 00:21:37,219
<font color="#CCCCCC">alignment</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> only one</font><font color="#E5E5E5"> of these</font><font color="#CCCCCC"> gifted</font>

518
00:21:34,160 --> 00:21:38,480
pointers will be active at a fixed

519
00:21:37,220 --> 00:21:41,450
address that the address we're going to

520
00:21:38,480 --> 00:21:46,430
use is<font color="#E5E5E5"> two eight zero zero zero zero one</font>

521
00:21:41,450 --> 00:21:47,960
five<font color="#CCCCCC"> okay so now we've got</font><font color="#E5E5E5"> we know we</font>

522
00:21:46,430 --> 00:21:50,180
can place a shifted pointer at a fixed

523
00:21:47,960 --> 00:21:54,830
location<font color="#E5E5E5"> in memory and that's going to</font>

524
00:21:50,180 --> 00:21:58,160
in turn<font color="#E5E5E5"> point to a V table</font><font color="#CCCCCC"> oh I forgot</font>

525
00:21:54,830 --> 00:21:59,750
<font color="#E5E5E5">something right I put a note there</font><font color="#CCCCCC"> that</font>

526
00:21:58,160 --> 00:22:02,840
kind<font color="#CCCCCC"> of an interesting detail where I've</font>

527
00:21:59,750 --> 00:22:05,480
put<font color="#CCCCCC"> the star that ruins our initial plan</font>

528
00:22:02,840 --> 00:22:09,139
was<font color="#CCCCCC"> that is going to invoke the first</font>

529
00:22:05,480 --> 00:22:11,760
entry in the<font color="#E5E5E5"> V table so if we want this</font>

530
00:22:09,140 --> 00:22:14,640
V table to be an object<font color="#CCCCCC"> and a</font><font color="#E5E5E5"> V table</font>

531
00:22:11,760 --> 00:22:16,320
it's vtable pointer is already taken so

532
00:22:14,640 --> 00:22:18,570
if we can't really<font color="#CCCCCC"> use it</font><font color="#E5E5E5"> as a fake</font>

533
00:22:16,320 --> 00:22:20,030
object is the way we<font color="#E5E5E5"> get past it it's</font>

534
00:22:18,570 --> 00:22:23,550
fairly<font color="#CCCCCC"> easy we pivot to a project</font>

535
00:22:20,030 --> 00:22:27,180
<font color="#E5E5E5">property of that object</font><font color="#CCCCCC"> before it's</font>

536
00:22:23,550 --> 00:22:31,830
<font color="#E5E5E5">vtable is ever used so this is what we</font>

537
00:22:27,180 --> 00:22:33,300
use<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> vtable pivot</font><font color="#CCCCCC"> I haven't given</font>

538
00:22:31,830 --> 00:22:35,760
the sort of full source<font color="#CCCCCC"> code of the</font>

539
00:22:33,300 --> 00:22:40,379
gadgets<font color="#CCCCCC"> you can go off and look at them</font>

540
00:22:35,760 --> 00:22:43,830
<font color="#E5E5E5">or you can trust me I guess basically so</font>

541
00:22:40,380 --> 00:22:46,530
the first gadget<font color="#CCCCCC"> whose purpose is</font><font color="#E5E5E5"> to</font>

542
00:22:43,830 --> 00:22:50,220
just incidentally set the EDI register

543
00:22:46,530 --> 00:22:52,950
so it happens to set<font color="#CCCCCC"> EDI to the vtable</font>

544
00:22:50,220 --> 00:22:54,390
<font color="#E5E5E5">pointer and then doesn't use it for</font>

545
00:22:52,950 --> 00:22:58,140
anything else<font color="#E5E5E5"> afterwards but also</font>

546
00:22:54,390 --> 00:23:01,050
<font color="#E5E5E5">doesn't reset it then the second gadget</font>

547
00:22:58,140 --> 00:23:04,020
that<font color="#CCCCCC"> we use pushes this EDI pushes the</font>

548
00:23:01,050 --> 00:23:06,510
pointer<font color="#E5E5E5"> onto the stack</font><font color="#CCCCCC"> as the first</font>

549
00:23:04,020 --> 00:23:08,970
argument<font color="#E5E5E5"> now the reason we can sort of</font>

550
00:23:06,510 --> 00:23:10,860
do<font color="#E5E5E5"> this so simply is because there's two</font>

551
00:23:08,970 --> 00:23:13,290
<font color="#CCCCCC">different calling conventions in 32-bit</font>

552
00:23:10,860 --> 00:23:15,000
there's one where you would have<font color="#E5E5E5"> ECX set</font>

553
00:23:13,290 --> 00:23:17,460
<font color="#E5E5E5">as that this pointer and one where it's</font>

554
00:23:15,000 --> 00:23:20,070
the first argument<font color="#E5E5E5"> on the stack</font><font color="#CCCCCC"> so what</font>

555
00:23:17,460 --> 00:23:21,450
we're doing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> we've found somewhere</font>

556
00:23:20,070 --> 00:23:23,850
where it's expecting to invoke a

557
00:23:21,450 --> 00:23:25,980
function<font color="#CCCCCC"> with ECX</font><font color="#E5E5E5"> pointing to the object</font>

558
00:23:23,850 --> 00:23:27,449
to focus<font color="#E5E5E5"> but we're going to invoke a</font>

559
00:23:25,980 --> 00:23:29,880
function<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> going to pull the first</font>

560
00:23:27,450 --> 00:23:32,400
argument off the stack<font color="#E5E5E5"> and</font><font color="#CCCCCC"> use that as</font>

561
00:23:29,880 --> 00:23:34,710
<font color="#E5E5E5">the list pointer</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> incidentally</font>

562
00:23:32,400 --> 00:23:36,630
pushes EDI on it's just<font color="#E5E5E5"> it's actually</font>

563
00:23:34,710 --> 00:23:38,700
just intending to<font color="#E5E5E5"> preserve EDI so it's</font>

564
00:23:36,630 --> 00:23:41,820
going<font color="#E5E5E5"> to push it on and pop it off when</font>

565
00:23:38,700 --> 00:23:44,130
it's finished<font color="#CCCCCC"> the</font><font color="#E5E5E5"> function and finally</font>

566
00:23:41,820 --> 00:23:46,530
as I mentioned<font color="#CCCCCC"> because the vtable</font>

567
00:23:44,130 --> 00:23:48,780
<font color="#CCCCCC">pointer for this object</font><font color="#E5E5E5"> that doesn't</font>

568
00:23:46,530 --> 00:23:51,750
<font color="#CCCCCC">actually exist</font><font color="#E5E5E5"> would be taken by that</font>

569
00:23:48,780 --> 00:23:53,970
first gadget<font color="#E5E5E5"> we have to pivot away from</font>

570
00:23:51,750 --> 00:23:56,520
<font color="#E5E5E5">it nice and</font><font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> before the</font><font color="#CCCCCC"> v table</font>

571
00:23:53,970 --> 00:23:58,560
pointer ever gets used<font color="#E5E5E5"> right so we've</font>

572
00:23:56,520 --> 00:24:00,120
got<font color="#CCCCCC"> this set up and we've got the four</font>

573
00:23:58,560 --> 00:24:04,710
shifted pointers<font color="#E5E5E5"> and we don't know which</font>

574
00:24:00,120 --> 00:24:07,500
<font color="#CCCCCC">one's active sort of both the addresses</font>

575
00:24:04,710 --> 00:24:09,540
of<font color="#E5E5E5"> these or the layout the required</font>

576
00:24:07,500 --> 00:24:11,040
layout shown here and the shifted

577
00:24:09,540 --> 00:24:14,490
pointers used have<font color="#CCCCCC"> been carefully</font>

578
00:24:11,040 --> 00:24:16,050
<font color="#CCCCCC">selected so</font><font color="#E5E5E5"> that we can overlay</font><font color="#CCCCCC"> for</font>

579
00:24:14,490 --> 00:24:18,180
different<font color="#E5E5E5"> exploits on top of each other</font>

580
00:24:16,050 --> 00:24:22,620
without interfering with<font color="#CCCCCC"> each other so</font>

581
00:24:18,180 --> 00:24:23,730
one for each<font color="#E5E5E5"> possible align so now we've</font>

582
00:24:22,620 --> 00:24:25,739
got that

583
00:24:23,730 --> 00:24:28,230
we can attempt to<font color="#E5E5E5"> overwrite return</font>

584
00:24:25,740 --> 00:24:29,820
address<font color="#E5E5E5"> on the stack</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we need the</font>

585
00:24:28,230 --> 00:24:30,750
stack overwrite gadgets that<font color="#E5E5E5"> I was</font>

586
00:24:29,820 --> 00:24:34,379
<font color="#E5E5E5">talking about</font>

587
00:24:30,750 --> 00:24:38,669
so this first gadget here<font color="#E5E5E5"> sets a local</font>

588
00:24:34,380 --> 00:24:41,100
variable<font color="#CCCCCC"> and invokes another function</font>

589
00:24:38,669 --> 00:24:43,470
<font color="#E5E5E5">and the second function just overwrites</font>

590
00:24:41,100 --> 00:24:47,879
the load of stuff around<font color="#CCCCCC"> that local</font>

591
00:24:43,470 --> 00:24:49,950
variable<font color="#CCCCCC"> so it starts to</font><font color="#E5E5E5"> get a little</font>

592
00:24:47,880 --> 00:24:52,860
<font color="#E5E5E5">bit like a jigsaw basically we have to</font>

593
00:24:49,950 --> 00:24:56,429
fit those you know we can these are

594
00:24:52,860 --> 00:24:58,110
pointed to by this p2p so that's sort<font color="#E5E5E5"> of</font>

595
00:24:56,429 --> 00:25:00,710
phase<font color="#E5E5E5"> to</font><font color="#CCCCCC"> point so if we</font><font color="#E5E5E5"> think of this</font>

596
00:24:58,110 --> 00:25:02,908
the<font color="#CCCCCC"> vtable</font><font color="#E5E5E5"> pivot</font><font color="#CCCCCC"> has phase</font><font color="#E5E5E5"> one and</font>

597
00:25:00,710 --> 00:25:06,779
<font color="#E5E5E5">overwriting the stack addresses phase</font>

598
00:25:02,909 --> 00:25:08,190
<font color="#E5E5E5">two we're now basically we can point</font>

599
00:25:06,779 --> 00:25:12,480
<font color="#E5E5E5">those anywhere so we have to set up</font>

600
00:25:08,190 --> 00:25:14,789
<font color="#E5E5E5">these further gadgets and rather the</font>

601
00:25:12,480 --> 00:25:17,460
<font color="#E5E5E5">first one shown here there needs to be</font>

602
00:25:14,789 --> 00:25:18,990
one copy<font color="#E5E5E5"> for each alignment but the</font>

603
00:25:17,460 --> 00:25:20,490
second one shown here<font color="#CCCCCC"> is kind</font><font color="#E5E5E5"> of</font>

604
00:25:18,990 --> 00:25:22,500
independent<font color="#E5E5E5"> of the alignment</font><font color="#CCCCCC"> it only</font>

605
00:25:20,490 --> 00:25:25,620
points<font color="#CCCCCC"> to things within the</font><font color="#E5E5E5"> DLL so we</font>

606
00:25:22,500 --> 00:25:27,779
only<font color="#E5E5E5"> need one copy of that as it turns</font>

607
00:25:25,620 --> 00:25:30,918
out we actually<font color="#E5E5E5"> need to because it kind</font>

608
00:25:27,779 --> 00:25:36,840
of well I need to<font color="#E5E5E5"> show you</font><font color="#CCCCCC"> two in a in a</font>

609
00:25:30,919 --> 00:25:39,059
256<font color="#CCCCCC"> byte section because it it uses</font><font color="#E5E5E5"> you</font>

610
00:25:36,840 --> 00:25:42,750
<font color="#E5E5E5">know it goes on to the next 256 byte</font>

611
00:25:39,059 --> 00:25:44,519
section right so we've done that<font color="#E5E5E5"> we've</font>

612
00:25:42,750 --> 00:25:47,159
got a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of space left</font><font color="#CCCCCC"> we've got</font>

613
00:25:44,519 --> 00:25:48,960
<font color="#E5E5E5">to fit some stuff in so we want to do</font>

614
00:25:47,159 --> 00:25:50,970
the<font color="#E5E5E5"> wrap as quickly as you</font><font color="#CCCCCC"> know as short</font>

615
00:25:48,960 --> 00:25:52,590
as we can so we've got basically<font color="#E5E5E5"> a nice</font>

616
00:25:50,970 --> 00:25:54,659
small piece<font color="#CCCCCC"> of rock that's going to call</font>

617
00:25:52,590 --> 00:25:56,779
virtual protect which basically is going

618
00:25:54,659 --> 00:25:58,679
to mark our shellcode as executable<font color="#E5E5E5"> and</font>

619
00:25:56,779 --> 00:26:00,600
because we're running out<font color="#CCCCCC"> of space we</font>

620
00:25:58,679 --> 00:26:02,940
<font color="#CCCCCC">need sort of a</font><font color="#E5E5E5"> small piece of shell code</font>

621
00:26:00,600 --> 00:26:04,320
that's<font color="#E5E5E5"> going to assemble the big shell</font>

622
00:26:02,940 --> 00:26:10,350
<font color="#E5E5E5">code that we're going to run at the end</font>

623
00:26:04,320 --> 00:26:12,330
and this is what the section<font color="#E5E5E5"> of the full</font>

624
00:26:10,350 --> 00:26:14,010
payload basically looks like<font color="#E5E5E5"> so we've</font>

625
00:26:12,330 --> 00:26:17,820
you know we fit the rock and the shell

626
00:26:14,010 --> 00:26:19,379
code into<font color="#CCCCCC"> the gaps that are</font><font color="#E5E5E5"> available so</font>

627
00:26:17,820 --> 00:26:21,299
now I'm going<font color="#E5E5E5"> to demonstrate this</font>

628
00:26:19,380 --> 00:26:22,740
exploit I'm afraid<font color="#E5E5E5"> it's not particularly</font>

629
00:26:21,299 --> 00:26:25,500
exciting<font color="#E5E5E5"> because I haven't sort of</font>

630
00:26:22,740 --> 00:26:28,169
weaponized<font color="#CCCCCC"> the exploit but I thought it</font>

631
00:26:25,500 --> 00:26:31,309
would be<font color="#E5E5E5"> more interesting</font><font color="#CCCCCC"> to look at if</font>

632
00:26:28,169 --> 00:26:31,309
I've got a mouse pointer

633
00:26:31,730 --> 00:26:39,540
I'm gonna<font color="#E5E5E5"> try and pray to the demo gods</font>

634
00:26:35,240 --> 00:26:43,310
<font color="#E5E5E5">and basically debug the exploit as it</font>

635
00:26:39,540 --> 00:26:51,180
runs<font color="#E5E5E5"> if I can get out Oh</font>

636
00:26:43,310 --> 00:26:54,360
<font color="#E5E5E5">PowerPoint so everything went</font><font color="#CCCCCC"> a bit</font>

637
00:26:51,180 --> 00:26:56,190
pear-shaped before the presentation<font color="#E5E5E5"> so</font>

638
00:26:54,360 --> 00:26:57,570
I've rebooted the computer and I<font color="#CCCCCC"> don't</font>

639
00:26:56,190 --> 00:27:00,050
know if it's going to be one<font color="#E5E5E5"> of the rare</font>

640
00:26:57,570 --> 00:27:03,149
<font color="#CCCCCC">cases</font><font color="#E5E5E5"> where it won't work</font>

641
00:27:00,050 --> 00:27:06,360
given how things<font color="#CCCCCC"> go</font>

642
00:27:03,150 --> 00:27:09,860
I'm sure it will<font color="#E5E5E5"> be but let's try oh and</font>

643
00:27:06,360 --> 00:27:09,860
I need<font color="#E5E5E5"> to start a web server to</font><font color="#CCCCCC"> me</font>

644
00:27:41,580 --> 00:27:46,619
so I've set the exploit<font color="#E5E5E5"> to run when I</font>

645
00:27:43,830 --> 00:27:48,269
click a button<font color="#CCCCCC"> obviously in real life</font>

646
00:27:46,619 --> 00:27:51,658
you know you've<font color="#CCCCCC"> set</font><font color="#E5E5E5"> it to load as soon</font>

647
00:27:48,269 --> 00:27:55,889
as as the<font color="#CCCCCC"> webpage is</font><font color="#E5E5E5"> loaded but this</font>

648
00:27:51,659 --> 00:28:00,480
makes it a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> easier to debug</font><font color="#E5E5E5"> so we're</font>

649
00:27:55,889 --> 00:28:02,820
going<font color="#E5E5E5"> to attach a debugger</font><font color="#CCCCCC"> and I'm gonna</font>

650
00:28:00,480 --> 00:28:11,869
remember<font color="#E5E5E5"> to set this symbol file path</font>

651
00:28:02,820 --> 00:28:11,869
because otherwise everything will be<font color="#CCCCCC"> ok</font>

652
00:28:14,539 --> 00:28:23,460
<font color="#E5E5E5">so I was</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> some testing before</font><font color="#CCCCCC"> the</font>

653
00:28:21,629 --> 00:28:24,869
<font color="#E5E5E5">presentation and got really confused why</font>

654
00:28:23,460 --> 00:28:30,090
it wasn't<font color="#CCCCCC"> working it's because I hadn't</font>

655
00:28:24,869 --> 00:28:43,769
said that<font color="#E5E5E5"> that's not right and then</font>

656
00:28:30,090 --> 00:28:46,590
extra character someone sorry so this

657
00:28:43,769 --> 00:28:49,409
<font color="#E5E5E5">breakpoint is basically you know almost</font>

658
00:28:46,590 --> 00:28:52,199
the entry to<font color="#E5E5E5"> the vulnerability</font><font color="#CCCCCC"> this is</font>

659
00:28:49,409 --> 00:28:54,840
where we should<font color="#CCCCCC"> hopefully see let's</font><font color="#E5E5E5"> take</font>

660
00:28:52,200 --> 00:28:56,129
a few seconds<font color="#E5E5E5"> doing the the</font><font color="#CCCCCC"> pointer</font>

661
00:28:54,840 --> 00:28:59,639
spray<font color="#E5E5E5"> and then the heap</font><font color="#CCCCCC"> tray that</font><font color="#E5E5E5"> we</font>

662
00:28:56,129 --> 00:29:07,408
talked about<font color="#CCCCCC"> right we've hit our</font>

663
00:28:59,639 --> 00:29:10,279
breakpoint<font color="#E5E5E5"> and sorry one second remember</font>

664
00:29:07,409 --> 00:29:10,279
the font size<font color="#E5E5E5"> up</font>

665
00:29:21,200 --> 00:29:27,690
<font color="#E5E5E5">okay so two eight zero zero five which</font>

666
00:29:24,480 --> 00:29:29,820
is<font color="#CCCCCC"> where it's loading</font><font color="#E5E5E5"> the object pointer</font>

667
00:29:27,690 --> 00:29:34,740
from that's<font color="#E5E5E5"> the pointer to our shifted</font>

668
00:29:29,820 --> 00:29:36,899
pointer and three eight<font color="#E5E5E5"> five</font><font color="#CCCCCC"> F blah blah</font>

669
00:29:34,740 --> 00:29:40,649
blah<font color="#E5E5E5"> is the shifted pointer so that</font>

670
00:29:36,899 --> 00:29:43,408
<font color="#E5E5E5">should mean you know this these bytes</font>

671
00:29:40,649 --> 00:29:48,029
basically indicate where the<font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> that's</font>

672
00:29:43,409 --> 00:29:50,240
been<font color="#E5E5E5"> loaded</font><font color="#CCCCCC"> to and let's see how</font><font color="#E5E5E5"> it</font>

673
00:29:48,029 --> 00:29:50,240
<font color="#E5E5E5">works</font>

674
00:29:51,559 --> 00:29:56,549
I<font color="#E5E5E5"> think hope interesting to me and</font>

675
00:29:55,200 --> 00:29:58,830
<font color="#E5E5E5">hopefully interesting to you</font>

676
00:29:56,549 --> 00:30:01,200
<font color="#CCCCCC">thing to look at will be the call stack</font>

677
00:29:58,830 --> 00:30:06,629
as this as the vulnerability proceeds as

678
00:30:01,200 --> 00:30:08,789
long as it works so and I<font color="#E5E5E5"> think what we</font>

679
00:30:06,629 --> 00:30:12,990
might do if we've got time probably

680
00:30:08,789 --> 00:30:16,879
<font color="#E5E5E5">don't have</font><font color="#CCCCCC"> timers so we'll watch this as</font>

681
00:30:12,990 --> 00:30:20,580
it goes through basically<font color="#E5E5E5"> well better</font>

682
00:30:16,879 --> 00:30:23,039
okay<font color="#E5E5E5"> so it's loaded the pointer to the</font>

683
00:30:20,580 --> 00:30:24,949
shifted pointer it's getting the address

684
00:30:23,039 --> 00:30:28,830
<font color="#E5E5E5">of the function</font><font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> going to call</font>

685
00:30:24,950 --> 00:30:32,519
from<font color="#E5E5E5"> our fake</font><font color="#CCCCCC"> vtable pointer</font><font color="#E5E5E5"> it's going</font>

686
00:30:28,830 --> 00:30:36,389
to load that<font color="#CCCCCC"> in this is</font><font color="#E5E5E5"> basically mostly</font>

687
00:30:32,519 --> 00:30:38,190
you know<font color="#E5E5E5"> irrelevant to us okay this is</font>

688
00:30:36,389 --> 00:30:39,779
where it's<font color="#CCCCCC"> checking if that's a valid</font>

689
00:30:38,190 --> 00:30:41,070
function obviously<font color="#E5E5E5"> we've set it to a</font>

690
00:30:39,779 --> 00:30:42,029
<font color="#E5E5E5">valid function so we're going to get</font>

691
00:30:41,070 --> 00:30:43,799
through that<font color="#E5E5E5"> fine</font>

692
00:30:42,029 --> 00:30:46,919
and now we're going<font color="#CCCCCC"> to call</font><font color="#E5E5E5"> our first</font>

693
00:30:43,799 --> 00:30:48,539
gadget so this is the first gadget and

694
00:30:46,919 --> 00:30:54,000
<font color="#E5E5E5">if you remember</font><font color="#CCCCCC"> the purpose</font><font color="#E5E5E5"> of this one</font>

695
00:30:48,539 --> 00:30:56,100
was to set<font color="#CCCCCC"> a DI to the pointer</font><font color="#E5E5E5"> the</font>

696
00:30:54,000 --> 00:31:02,190
pointer to the<font color="#CCCCCC"> vtable pointer so we can</font>

697
00:30:56,100 --> 00:31:07,769
pivot<font color="#E5E5E5"> to it so eventually after it's</font>

698
00:31:02,190 --> 00:31:11,480
done some stuff<font color="#CCCCCC"> EDI has been set</font>

699
00:31:07,769 --> 00:31:11,480
somewhere<font color="#E5E5E5"> I missed it was set just there</font>

700
00:31:13,920 --> 00:31:27,490
<font color="#E5E5E5">purchases so</font><font color="#CCCCCC"> EBX</font><font color="#E5E5E5"> is the pointer to</font><font color="#CCCCCC"> the</font>

701
00:31:24,040 --> 00:31:28,180
shifted pointer<font color="#E5E5E5"> EDI is been loaded from</font>

702
00:31:27,490 --> 00:31:32,020
<font color="#CCCCCC">EBX</font>

703
00:31:28,180 --> 00:31:33,970
<font color="#CCCCCC">to to set the set</font><font color="#E5E5E5"> the shifted pointer</font>

704
00:31:32,020 --> 00:31:37,060
and that's all we wanted this<font color="#E5E5E5"> gadget to</font>

705
00:31:33,970 --> 00:31:40,180
do with set EDI and then invoke the next

706
00:31:37,060 --> 00:31:46,000
gadget<font color="#E5E5E5"> so again we can agree get through</font>

707
00:31:40,180 --> 00:31:48,220
all this stuff skip over that it is a

708
00:31:46,000 --> 00:31:54,220
valid<font color="#E5E5E5"> function and off it</font><font color="#CCCCCC"> goes to our</font>

709
00:31:48,220 --> 00:31:59,050
<font color="#E5E5E5">next gadget now</font><font color="#CCCCCC"> write what was the</font>

710
00:31:54,220 --> 00:32:01,270
purpose<font color="#E5E5E5"> of this one yeah so this the</font>

711
00:31:59,050 --> 00:32:03,040
purpose of this is to<font color="#E5E5E5"> push EDI onto the</font>

712
00:32:01,270 --> 00:32:04,960
stack as the first argument<font color="#E5E5E5"> and then</font>

713
00:32:03,040 --> 00:32:07,330
invoke<font color="#E5E5E5"> another function so we step</font>

714
00:32:04,960 --> 00:32:08,230
through<font color="#CCCCCC"> it that there's EDI getting</font>

715
00:32:07,330 --> 00:32:11,610
pushed<font color="#E5E5E5"> onto the stack</font>

716
00:32:08,230 --> 00:32:16,810
nothing else<font color="#E5E5E5"> gets pushed on after it</font>

717
00:32:11,610 --> 00:32:19,449
<font color="#E5E5E5">it's going</font><font color="#CCCCCC"> to eventually load our next</font>

718
00:32:16,810 --> 00:32:23,350
gadget<font color="#E5E5E5"> it's a valid function so we</font>

719
00:32:19,450 --> 00:32:25,210
passed that check<font color="#E5E5E5"> and the purpose of</font>

720
00:32:23,350 --> 00:32:27,639
this<font color="#CCCCCC"> gadget was</font><font color="#E5E5E5"> to quickly pivot away</font>

721
00:32:25,210 --> 00:32:29,890
because the current object<font color="#CCCCCC"> of focus</font>

722
00:32:27,640 --> 00:32:31,210
<font color="#E5E5E5">doesn't have a valid</font><font color="#CCCCCC"> V</font><font color="#E5E5E5"> table pointer</font>

723
00:32:29,890 --> 00:32:33,450
<font color="#E5E5E5">because we had to use</font><font color="#CCCCCC"> it for something</font>

724
00:32:31,210 --> 00:32:33,450
else

725
00:32:39,900 --> 00:32:43,920
and there we<font color="#CCCCCC"> are to the next gadget I</font>

726
00:32:41,910 --> 00:32:45,600
<font color="#E5E5E5">said the purpose of this gadget is to</font>

727
00:32:43,920 --> 00:32:46,740
use a<font color="#CCCCCC"> local variable this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> where we're</font>

728
00:32:45,600 --> 00:32:54,209
going<font color="#E5E5E5"> to try and overwrite the return</font>

729
00:32:46,740 --> 00:32:56,370
address<font color="#CCCCCC"> so sorry I actually haven't</font>

730
00:32:54,210 --> 00:32:58,470
<font color="#E5E5E5">hardly mentioned</font><font color="#CCCCCC"> VT God but this is you</font>

731
00:32:56,370 --> 00:33:00,510
know the<font color="#E5E5E5"> VT guard check</font><font color="#CCCCCC"> its turn because</font>

732
00:32:58,470 --> 00:33:02,820
the value of VT guard is only based on

733
00:33:00,510 --> 00:33:04,890
the base address if we're defeating a

734
00:33:02,820 --> 00:33:07,919
SLR we're<font color="#CCCCCC"> going to know the value of VT</font>

735
00:33:04,890 --> 00:33:12,059
guard in a way so that's fine we won't

736
00:33:07,920 --> 00:33:14,360
<font color="#E5E5E5">get</font><font color="#CCCCCC"> caught there</font><font color="#E5E5E5"> sorry just the the</font>

737
00:33:12,059 --> 00:33:17,010
function<font color="#CCCCCC"> I just passed was loading ECX</font>

738
00:33:14,360 --> 00:33:21,510
with a local variable<font color="#CCCCCC"> so something near</font>

739
00:33:17,010 --> 00:33:26,910
<font color="#CCCCCC">the stack you see X now points into</font><font color="#E5E5E5"> the</font>

740
00:33:21,510 --> 00:33:30,090
stack checking if it's a<font color="#E5E5E5"> valid function</font>

741
00:33:26,910 --> 00:33:32,550
is on to the<font color="#E5E5E5"> next function now the</font>

742
00:33:30,090 --> 00:33:34,439
purpose of<font color="#E5E5E5"> this one is to start</font>

743
00:33:32,550 --> 00:33:37,740
<font color="#E5E5E5">overwriting the return address so if we</font>

744
00:33:34,440 --> 00:33:41,010
watch the<font color="#E5E5E5"> current call stack as we pass</font>

745
00:33:37,740 --> 00:33:45,530
through<font color="#CCCCCC"> this start overwriting values</font>

746
00:33:41,010 --> 00:33:45,530
and somewhere suddenly it should<font color="#CCCCCC"> Oh</font>

747
00:33:46,309 --> 00:33:52,889
the call stacks been corrupted so we

748
00:33:50,730 --> 00:33:54,750
have to return out<font color="#CCCCCC"> of this function as I</font>

749
00:33:52,890 --> 00:33:57,450
mentioned in 32-bit it's going to do a

750
00:33:54,750 --> 00:33:59,250
check that<font color="#E5E5E5"> we haven't desynchronized the</font>

751
00:33:57,450 --> 00:34:01,470
stack pointer we called an argument with

752
00:33:59,250 --> 00:34:05,100
expected<font color="#E5E5E5"> one argument with one argument</font>

753
00:34:01,470 --> 00:34:12,210
<font color="#E5E5E5">we're fine just going to skip over the</font>

754
00:34:05,100 --> 00:34:13,529
<font color="#CCCCCC">nasty error it</font><font color="#E5E5E5"> was a</font><font color="#CCCCCC"> thrown basically</font>

755
00:34:12,210 --> 00:34:17,159
<font color="#CCCCCC">eventually we're going</font><font color="#E5E5E5"> to return from</font>

756
00:34:13,530 --> 00:34:22,290
this function and now we're into<font color="#CCCCCC"> our</font>

757
00:34:17,159 --> 00:34:24,929
<font color="#E5E5E5">first prop gadget and we've set a EBP so</font>

758
00:34:22,290 --> 00:34:29,190
the frame pointer to point out<font color="#E5E5E5"> our rock</font>

759
00:34:24,929 --> 00:34:31,560
code now the stack is<font color="#E5E5E5"> basically</font>

760
00:34:29,190 --> 00:34:33,418
completely under our control<font color="#E5E5E5"> we're</font>

761
00:34:31,560 --> 00:34:36,210
running our<font color="#E5E5E5"> rock code we're gonna pop</font>

762
00:34:33,418 --> 00:34:37,408
<font color="#CCCCCC">EPA X</font><font color="#E5E5E5"> and we're going</font><font color="#CCCCCC"> to jump to</font><font color="#E5E5E5"> X and</font>

763
00:34:36,210 --> 00:34:42,330
that's basically been set up<font color="#E5E5E5"> as a</font>

764
00:34:37,409 --> 00:34:46,679
<font color="#E5E5E5">pointer intervertebral</font><font color="#CCCCCC"> takes it stub so</font>

765
00:34:42,330 --> 00:34:48,299
there's a bit of<font color="#E5E5E5"> junk to go through if I</font>

766
00:34:46,679 --> 00:34:49,668
press the<font color="#CCCCCC"> right</font><font color="#E5E5E5"> key here you</font><font color="#CCCCCC"> won't have</font>

767
00:34:48,300 --> 00:34:52,839
<font color="#E5E5E5">to watch me go through the whole</font><font color="#CCCCCC"> event</font>

768
00:34:49,668 --> 00:34:54,399
<font color="#E5E5E5">and now it's returned in</font>

769
00:34:52,839 --> 00:34:56,139
our code which<font color="#CCCCCC"> has been marked as</font>

770
00:34:54,399 --> 00:35:01,150
executable so now essentially we're

771
00:34:56,139 --> 00:35:02,529
running our<font color="#E5E5E5"> shell code and it was that</font>

772
00:35:01,150 --> 00:35:05,319
<font color="#CCCCCC">short section</font><font color="#E5E5E5"> of code that</font><font color="#CCCCCC"> I talked</font>

773
00:35:02,529 --> 00:35:07,630
about so we should see<font color="#CCCCCC"> just underneath</font>

774
00:35:05,319 --> 00:35:10,119
that<font color="#CCCCCC"> jne jump if not equal we should</font>

775
00:35:07,630 --> 00:35:12,190
start changing the<font color="#E5E5E5"> code because we're</font>

776
00:35:10,119 --> 00:35:13,869
copying<font color="#E5E5E5"> over and there you go I'm afraid</font>

777
00:35:12,190 --> 00:35:16,839
<font color="#E5E5E5">that the shell code at the moment is</font>

778
00:35:13,869 --> 00:35:18,819
basically<font color="#E5E5E5"> just set as a breakpoint</font><font color="#CCCCCC"> and a</font>

779
00:35:16,839 --> 00:35:22,089
bunch of arbitrary you know a bunch<font color="#E5E5E5"> of</font>

780
00:35:18,819 --> 00:35:25,420
junk<font color="#CCCCCC"> that will go on</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> ages so if I</font>

781
00:35:22,089 --> 00:35:29,019
just hit<font color="#E5E5E5"> go but you should see that</font>

782
00:35:25,420 --> 00:35:31,119
<font color="#CCCCCC">we've got plenty plenty of</font><font color="#E5E5E5"> room for you</font>

783
00:35:29,019 --> 00:35:33,609
know I've just<font color="#E5E5E5"> filled it with a AAA BBB</font>

784
00:35:31,119 --> 00:35:36,819
<font color="#CCCCCC">CCC or whatever but we can put whatever</font>

785
00:35:33,609 --> 00:35:38,380
shell code we<font color="#E5E5E5"> want it there and yet I'm</font>

786
00:35:36,819 --> 00:35:50,440
<font color="#CCCCCC">afraid that's</font><font color="#E5E5E5"> the end of the demo I know</font>

787
00:35:38,380 --> 00:35:56,170
there<font color="#E5E5E5"> wasn't a big shell just a couple</font>

788
00:35:50,440 --> 00:36:17,229
<font color="#E5E5E5">more things</font><font color="#CCCCCC"> to say take a minute to read</font>

789
00:35:56,170 --> 00:36:19,119
them well load up eventually<font color="#E5E5E5"> okay so in</font>

790
00:36:17,229 --> 00:36:21,218
summary<font color="#E5E5E5"> essentially we looked at an</font>

791
00:36:19,119 --> 00:36:23,259
object orientated by parts of control

792
00:36:21,219 --> 00:36:24,969
flow guard<font color="#E5E5E5"> as far as I can tell that</font>

793
00:36:23,259 --> 00:36:26,410
<font color="#E5E5E5">should be usable in just about any</font>

794
00:36:24,969 --> 00:36:29,499
<font color="#E5E5E5">situation that you would encounter</font>

795
00:36:26,410 --> 00:36:31,598
control flow guard<font color="#E5E5E5"> obviously we need</font><font color="#CCCCCC"> to</font>

796
00:36:29,499 --> 00:36:34,359
<font color="#E5E5E5">have the gadgets that we use you</font><font color="#CCCCCC"> know</font>

797
00:36:31,599 --> 00:36:36,339
existing in the memory<font color="#CCCCCC"> space</font><font color="#E5E5E5"> and then</font>

798
00:36:34,359 --> 00:36:40,538
shifted pointers was an<font color="#E5E5E5"> object</font>

799
00:36:36,339 --> 00:36:42,969
orientated bypass of<font color="#CCCCCC"> 32-bit a</font><font color="#E5E5E5"> SLR it's</font>

800
00:36:40,539 --> 00:36:45,279
only<font color="#E5E5E5"> usable basically when we're over</font>

801
00:36:42,969 --> 00:36:47,019
writing<font color="#E5E5E5"> an object pointer obviously in</font>

802
00:36:45,279 --> 00:36:49,869
the same way that we talked about object

803
00:36:47,019 --> 00:36:50,950
corruption being targeted by any other

804
00:36:49,869 --> 00:36:52,839
kind of<font color="#E5E5E5"> memory manipulation</font>

805
00:36:50,950 --> 00:36:55,749
vulnerability that<font color="#E5E5E5"> it this would be</font><font color="#CCCCCC"> a</font>

806
00:36:52,839 --> 00:36:58,900
perfectly valid target<font color="#E5E5E5"> to bypass both a</font>

807
00:36:55,749 --> 00:37:00,669
SLR<font color="#E5E5E5"> and control flow guard on 32-bit by</font>

808
00:36:58,900 --> 00:37:04,479
deliberately over writing<font color="#E5E5E5"> or corrupting</font>

809
00:37:00,670 --> 00:37:06,670
an object pointer and and I<font color="#E5E5E5"> think very</font>

810
00:37:04,479 --> 00:37:09,450
important fact is that<font color="#CCCCCC"> if you</font>

811
00:37:06,670 --> 00:37:12,010
generally at you know the way these

812
00:37:09,450 --> 00:37:15,490
experts are<font color="#CCCCCC"> going that bypass</font><font color="#E5E5E5"> these</font>

813
00:37:12,010 --> 00:37:18,240
these mitigations generally now everyone

814
00:37:15,490 --> 00:37:21,250
takes a<font color="#CCCCCC"> read/write</font><font color="#E5E5E5"> approach so they</font>

815
00:37:18,240 --> 00:37:23,589
manipulate memory I was talking to Adam

816
00:37:21,250 --> 00:37:26,980
earlier so a common technique<font color="#E5E5E5"> is for</font>

817
00:37:23,589 --> 00:37:29,140
<font color="#E5E5E5">instance to cause an array to exist at</font>

818
00:37:26,980 --> 00:37:31,329
some fixed address in<font color="#CCCCCC"> memory and corrupt</font>

819
00:37:29,140 --> 00:37:33,098
<font color="#E5E5E5">the length of that array</font><font color="#CCCCCC"> you know if</font>

820
00:37:31,329 --> 00:37:35,170
you've<font color="#CCCCCC"> got the type of expert</font><font color="#E5E5E5"> that</font>

821
00:37:33,099 --> 00:37:37,269
allows you to<font color="#E5E5E5"> write to</font><font color="#CCCCCC"> an arbitrary</font>

822
00:37:35,170 --> 00:37:38,650
address or or corrupt<font color="#E5E5E5"> that length value</font>

823
00:37:37,269 --> 00:37:41,379
<font color="#E5E5E5">essentially then you can</font><font color="#CCCCCC"> convert that</font>

824
00:37:38,650 --> 00:37:43,059
<font color="#E5E5E5">into</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> read/write primitive and read and</font>

825
00:37:41,380 --> 00:37:45,430
write<font color="#E5E5E5"> beyond the bounds</font><font color="#CCCCCC"> that you're</font>

826
00:37:43,059 --> 00:37:47,470
supposed to<font color="#E5E5E5"> be but obviously that relies</font>

827
00:37:45,430 --> 00:37:49,000
on having<font color="#E5E5E5"> a scripting language or</font>

828
00:37:47,470 --> 00:37:51,279
<font color="#E5E5E5">something in the application that you're</font>

829
00:37:49,000 --> 00:37:53,109
targeting<font color="#CCCCCC"> whereas this approach</font><font color="#E5E5E5"> all we</font>

830
00:37:51,279 --> 00:37:55,000
needed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do was cause the</font><font color="#CCCCCC"> application</font>

831
00:37:53,109 --> 00:37:58,058
to<font color="#CCCCCC"> make a series of memory allocations</font>

832
00:37:55,000 --> 00:38:00,010
<font color="#E5E5E5">and if you think</font><font color="#CCCCCC"> about I don't</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> you</font>

833
00:37:58,059 --> 00:38:02,230
know<font color="#CCCCCC"> network protocols or anything</font>

834
00:38:00,010 --> 00:38:05,019
that's processing a file stream<font color="#E5E5E5"> or you</font>

835
00:38:02,230 --> 00:38:07,000
<font color="#CCCCCC">know decrypting some kind of file format</font>

836
00:38:05,019 --> 00:38:09,700
<font color="#E5E5E5">it might well be possible to do that</font><font color="#CCCCCC"> in</font>

837
00:38:07,000 --> 00:38:11,650
situations<font color="#CCCCCC"> where we've got no chance</font><font color="#E5E5E5"> of</font>

838
00:38:09,700 --> 00:38:13,569
gaining<font color="#E5E5E5"> kind of arbitrary read</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> or</font>

839
00:38:11,650 --> 00:38:15,670
<font color="#CCCCCC">get you</font><font color="#E5E5E5"> know getting any feedback from</font>

840
00:38:13,569 --> 00:38:19,990
the application as to the address of<font color="#E5E5E5"> the</font>

841
00:38:15,670 --> 00:38:21,579
<font color="#E5E5E5">DLL so the conclusions are basically</font>

842
00:38:19,990 --> 00:38:24,970
that control flow guard in its current

843
00:38:21,579 --> 00:38:27,579
<font color="#E5E5E5">state</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> ineffective against object</font>

844
00:38:24,970 --> 00:38:31,180
corruption you know provided we can<font color="#E5E5E5"> find</font>

845
00:38:27,579 --> 00:38:32,740
these<font color="#E5E5E5"> gadgets</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two very</font>

846
00:38:31,180 --> 00:38:35,589
simple gadgets<font color="#E5E5E5"> that allow us to</font>

847
00:38:32,740 --> 00:38:37,328
overwrite the<font color="#E5E5E5"> stack and I would kind of</font>

848
00:38:35,589 --> 00:38:38,670
hypothesize<font color="#CCCCCC"> that they probably</font><font color="#E5E5E5"> existed</font>

849
00:38:37,329 --> 00:38:42,640
in just about everything

850
00:38:38,670 --> 00:38:44,589
<font color="#CCCCCC">the vtable pivot gadgets may be less</font>

851
00:38:42,640 --> 00:38:48,629
<font color="#E5E5E5">common that kind of</font><font color="#CCCCCC"> waits waits to be</font>

852
00:38:44,589 --> 00:38:51,430
<font color="#E5E5E5">seen and 32-bit SLR is</font><font color="#CCCCCC"> ineffective</font>

853
00:38:48,630 --> 00:38:53,049
against object pointer corruption in its

854
00:38:51,430 --> 00:38:55,419
current form<font color="#E5E5E5"> in the presence</font><font color="#CCCCCC"> of</font>

855
00:38:53,049 --> 00:38:57,759
sufficient<font color="#E5E5E5"> memory allocation if we can</font>

856
00:38:55,420 --> 00:39:01,690
point to spray or heap spray we can get

857
00:38:57,759 --> 00:39:04,390
<font color="#E5E5E5">past it</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is really boring but</font><font color="#CCCCCC"> this</font>

858
00:39:01,690 --> 00:39:07,329
is how I would<font color="#E5E5E5"> fix it or at</font><font color="#CCCCCC"> least begin</font>

859
00:39:04,390 --> 00:39:10,089
<font color="#E5E5E5">to</font><font color="#CCCCCC"> address it</font><font color="#E5E5E5"> so the three table pivot</font>

860
00:39:07,329 --> 00:39:12,460
worked by using unintended arguments<font color="#E5E5E5"> I</font>

861
00:39:10,089 --> 00:39:13,960
think<font color="#CCCCCC"> Microsoft should segregate the</font>

862
00:39:12,460 --> 00:39:16,059
functions by the number of<font color="#E5E5E5"> arguments</font>

863
00:39:13,960 --> 00:39:17,799
<font color="#CCCCCC">that they're called with so if you're</font>

864
00:39:16,059 --> 00:39:19,930
calling<font color="#E5E5E5"> a</font><font color="#CCCCCC"> function that's expecting two</font>

865
00:39:17,799 --> 00:39:20,200
arguments you should only be<font color="#CCCCCC"> allowed you</font>

866
00:39:19,930 --> 00:39:21,669
<font color="#E5E5E5">know</font>

867
00:39:20,200 --> 00:39:22,808
if<font color="#E5E5E5"> you're supplying two arguments you</font>

868
00:39:21,670 --> 00:39:24,839
should only<font color="#E5E5E5"> be</font><font color="#CCCCCC"> allowed to</font><font color="#E5E5E5"> call a</font>

869
00:39:22,809 --> 00:39:27,160
function<font color="#CCCCCC"> that expects two arguments</font><font color="#E5E5E5"> and</font>

870
00:39:24,839 --> 00:39:29,920
there's basically<font color="#CCCCCC"> you could put a lot of</font>

871
00:39:27,160 --> 00:39:31,660
the work on the compiler<font color="#CCCCCC"> to do that</font>

872
00:39:29,920 --> 00:39:33,640
rather than at<font color="#CCCCCC"> runtime this would</font><font color="#E5E5E5"> be a</font>

873
00:39:31,660 --> 00:39:35,049
nice efficient way<font color="#CCCCCC"> to do it static</font>

874
00:39:33,640 --> 00:39:36,490
protection obviously Microsoft's

875
00:39:35,049 --> 00:39:38,230
position is that<font color="#CCCCCC"> there's this nice</font>

876
00:39:36,490 --> 00:39:41,189
<font color="#CCCCCC">Hardware mitigation coming that</font><font color="#E5E5E5"> will</font>

877
00:39:38,230 --> 00:39:44,349
hopefully stop that<font color="#E5E5E5"> we could think about</font>

878
00:39:41,190 --> 00:39:48,160
in the way that sort<font color="#E5E5E5"> of stack Canaries</font>

879
00:39:44,349 --> 00:39:50,470
<font color="#E5E5E5">are used on a function that has local</font>

880
00:39:48,160 --> 00:39:52,720
<font color="#E5E5E5">variables that might be overflowed we</font>

881
00:39:50,470 --> 00:39:54,490
could say well this only happens when

882
00:39:52,720 --> 00:39:56,950
we're invoking a function with a local

883
00:39:54,490 --> 00:39:59,319
variable<font color="#CCCCCC"> so let's target</font><font color="#E5E5E5"> those and</font><font color="#CCCCCC"> check</font>

884
00:39:56,950 --> 00:40:01,839
the frame pointer<font color="#E5E5E5"> and stack points</font><font color="#CCCCCC"> or</font>

885
00:39:59,319 --> 00:40:03,279
after we've called a function the

886
00:40:01,839 --> 00:40:05,230
problem with this would be that you'd

887
00:40:03,280 --> 00:40:06,970
then<font color="#E5E5E5"> probably just aim further down the</font>

888
00:40:05,230 --> 00:40:09,130
stack<font color="#CCCCCC"> you know you'd find a gadget</font><font color="#E5E5E5"> to</font>

889
00:40:06,970 --> 00:40:13,868
<font color="#E5E5E5">overwrite</font><font color="#CCCCCC"> the return</font><font color="#E5E5E5"> address of it of a</font>

890
00:40:09,130 --> 00:40:16,180
different gadget<font color="#E5E5E5"> further down</font><font color="#CCCCCC"> and bt</font>

891
00:40:13,869 --> 00:40:18,099
guard basically kind<font color="#E5E5E5"> of isn't fit</font><font color="#CCCCCC"> for</font>

892
00:40:16,180 --> 00:40:21,069
purpose as it stands it's really<font color="#E5E5E5"> silly</font>

893
00:40:18,099 --> 00:40:23,710
to<font color="#CCCCCC"> have it depend entirely on the DLL</font>

894
00:40:21,069 --> 00:40:24,849
<font color="#E5E5E5">base address</font><font color="#CCCCCC"> wherever we encountered it</font>

895
00:40:23,710 --> 00:40:26,440
it could<font color="#E5E5E5"> have caused us a lot</font><font color="#CCCCCC"> of</font>

896
00:40:24,849 --> 00:40:28,900
<font color="#E5E5E5">problems if it was a pseudo-random</font>

897
00:40:26,440 --> 00:40:32,829
number for instance<font color="#E5E5E5"> that we didn't have</font>

898
00:40:28,900 --> 00:40:35,650
<font color="#E5E5E5">access to for shifted pointers as far as</font>

899
00:40:32,829 --> 00:40:37,859
I know any pointer kind of any object

900
00:40:35,650 --> 00:40:42,010
pointer created through normal means

901
00:40:37,859 --> 00:40:45,460
<font color="#E5E5E5">should be well aligned so you know only</font>

902
00:40:42,010 --> 00:40:47,349
<font color="#E5E5E5">every four four bytes</font><font color="#CCCCCC"> what we could do</font>

903
00:40:45,460 --> 00:40:49,059
is enforce that alignment<font color="#E5E5E5"> by simply</font>

904
00:40:47,349 --> 00:40:52,619
handing the pointer with the value there

905
00:40:49,059 --> 00:40:54,910
and like<font color="#CCCCCC"> VT guard is used to target</font>

906
00:40:52,619 --> 00:40:57,609
<font color="#E5E5E5">virtual tables that they would thought</font>

907
00:40:54,910 --> 00:40:59,920
<font color="#E5E5E5">were highly likely to be attempt for us</font>

908
00:40:57,609 --> 00:41:01,808
to attempt to<font color="#E5E5E5"> corrupt they could use a</font>

909
00:40:59,920 --> 00:41:03,549
similar mitigation for objects<font color="#CCCCCC"> that they</font>

910
00:41:01,809 --> 00:41:07,750
thought we might<font color="#E5E5E5"> target to corrupt the</font>

911
00:41:03,549 --> 00:41:20,069
object pointer<font color="#CCCCCC"> URI</font><font color="#E5E5E5"> unfinished</font><font color="#CCCCCC"> any</font>

912
00:41:07,750 --> 00:41:22,690
questions<font color="#CCCCCC"> I</font><font color="#E5E5E5"> basically just sort of</font>

913
00:41:20,069 --> 00:41:24,400
predict what byte sequences might be in

914
00:41:22,690 --> 00:41:27,700
them<font color="#E5E5E5"> and look for</font><font color="#CCCCCC"> them if that makes</font>

915
00:41:24,400 --> 00:41:30,550
sense<font color="#CCCCCC"> obviously so I mentioned and it's</font>

916
00:41:27,700 --> 00:41:33,040
in the references I think it's

917
00:41:30,550 --> 00:41:37,070
it's in there somewhere<font color="#CCCCCC"> it should be</font>

918
00:41:33,040 --> 00:41:40,520
yeah<font color="#E5E5E5"> so number eight is a very detailed</font>

919
00:41:37,070 --> 00:41:42,440
academic paper and they were really<font color="#E5E5E5"> so</font>

920
00:41:40,520 --> 00:41:43,730
what was<font color="#E5E5E5"> different</font><font color="#CCCCCC"> that they were</font>

921
00:41:42,440 --> 00:41:46,369
<font color="#CCCCCC">looking at</font><font color="#E5E5E5"> from what I was looking at</font>

922
00:41:43,730 --> 00:41:48,800
was they're only looking<font color="#CCCCCC"> at if you</font>

923
00:41:46,369 --> 00:41:51,970
control the<font color="#E5E5E5"> object completely and they</font>

924
00:41:48,800 --> 00:41:54,320
were never leaving<font color="#CCCCCC"> kind of that realm of</font>

925
00:41:51,970 --> 00:41:55,848
executing valid methods and they kind of

926
00:41:54,320 --> 00:41:57,260
proved that<font color="#E5E5E5"> in a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> applications</font>

927
00:41:55,849 --> 00:42:00,859
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> cheering complete and stuff like</font>

928
00:41:57,260 --> 00:42:02,450
that but there's<font color="#E5E5E5"> loads of details in</font>

929
00:42:00,859 --> 00:42:04,160
there<font color="#E5E5E5"> about them using a much more</font>

930
00:42:02,450 --> 00:42:06,460
advanced method to search<font color="#E5E5E5"> for gadgets</font>

931
00:42:04,160 --> 00:42:06,460
and stuff

932
00:42:06,579 --> 00:42:10,089
any other questions

