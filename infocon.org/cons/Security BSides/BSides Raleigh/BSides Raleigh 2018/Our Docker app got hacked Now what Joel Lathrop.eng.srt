1
00:00:00,000 --> 00:00:04,010
<font color="#CCCCCC">I had</font><font color="#E5E5E5"> a really question you give out the</font>

2
00:00:06,589 --> 00:00:16,980
ID all right<font color="#E5E5E5"> it's about to be all right</font>

3
00:00:12,179 --> 00:00:19,140
one more<font color="#CCCCCC"> question from</font><font color="#E5E5E5"> wargames David</font>

4
00:00:16,980 --> 00:00:21,539
discovers the password gaining access to

5
00:00:19,140 --> 00:00:23,820
the<font color="#E5E5E5"> Whopper account the computer asks</font>

6
00:00:21,539 --> 00:00:28,849
<font color="#CCCCCC">David if he would like</font><font color="#E5E5E5"> to play a game</font>

7
00:00:23,820 --> 00:00:28,849
<font color="#E5E5E5">what game</font><font color="#CCCCCC"> does David prefer to play I</font>

8
00:00:28,950 --> 00:00:34,410
[Music]

9
00:00:31,130 --> 00:00:36,000
heard it<font color="#E5E5E5"> first</font><font color="#CCCCCC"> year I know it's the easy</font>

10
00:00:34,410 --> 00:00:53,940
one I'll<font color="#E5E5E5"> make I'll get some some</font><font color="#CCCCCC"> more</font>

11
00:00:36,000 --> 00:00:56,360
difficult<font color="#CCCCCC"> ones alright so I'm gonna</font>

12
00:00:53,940 --> 00:01:00,660
introduce our next speaker<font color="#E5E5E5"> this is our</font>

13
00:00:56,360 --> 00:01:03,660
<font color="#CCCCCC">sir our last talk before lunch</font>

14
00:01:00,660 --> 00:01:06,840
speakers topic is as you<font color="#E5E5E5"> can see our</font>

15
00:01:03,660 --> 00:01:08,700
docker app got<font color="#E5E5E5"> hacked now what cannot</font>

16
00:01:06,840 --> 00:01:11,490
understand<font color="#CCCCCC"> because dr. super secure I</font>

17
00:01:08,700 --> 00:01:15,390
mean there's no<font color="#CCCCCC"> miss it's completely</font>

18
00:01:11,490 --> 00:01:17,699
secure<font color="#CCCCCC"> joel has his master's in crypto</font>

19
00:01:15,390 --> 00:01:20,009
analysis<font color="#E5E5E5"> he also dabbles in reverse</font>

20
00:01:17,700 --> 00:01:22,680
<font color="#E5E5E5">engineering</font><font color="#CCCCCC"> and forensics analysis</font>

21
00:01:20,009 --> 00:01:26,159
<font color="#E5E5E5">malware counter exploitation malware</font>

22
00:01:22,680 --> 00:01:35,189
obfuscation<font color="#E5E5E5"> evolution and botnet</font>

23
00:01:26,159 --> 00:01:36,960
neutralization welcome Joel so as you

24
00:01:35,189 --> 00:01:38,758
can see<font color="#E5E5E5"> from the slide this is going to</font>

25
00:01:36,960 --> 00:01:41,399
<font color="#E5E5E5">basically be talking about what you do</font>

26
00:01:38,759 --> 00:01:43,590
after someone's<font color="#E5E5E5"> stalker</font><font color="#CCCCCC"> app</font><font color="#E5E5E5"> has been</font>

27
00:01:41,400 --> 00:01:45,000
hacked<font color="#CCCCCC"> cuz as we all know they're not</font>

28
00:01:43,590 --> 00:01:46,970
<font color="#CCCCCC">always the most secure they're better</font>

29
00:01:45,000 --> 00:01:50,340
than some<font color="#E5E5E5"> things but none was the most</font>

30
00:01:46,970 --> 00:01:51,960
so right off<font color="#CCCCCC"> the bat that is a link to</font>

31
00:01:50,340 --> 00:01:53,970
all the<font color="#CCCCCC"> slides I'm about to go through</font>

32
00:01:51,960 --> 00:01:56,089
<font color="#E5E5E5">the reason I'm putting up there first is</font>

33
00:01:53,970 --> 00:01:58,560
<font color="#E5E5E5">because there's going to be a lot of</font>

34
00:01:56,090 --> 00:02:00,420
terminal session<font color="#E5E5E5"> screenshot type things</font>

35
00:01:58,560 --> 00:02:01,890
a lot of text I've tried to<font color="#E5E5E5"> make it as</font>

36
00:02:00,420 --> 00:02:03,930
large<font color="#E5E5E5"> and legible as possible but I</font>

37
00:02:01,890 --> 00:02:05,310
realize now<font color="#CCCCCC"> they wouldn't necessarily be</font>

38
00:02:03,930 --> 00:02:06,600
<font color="#E5E5E5">able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see it well so if you want to</font>

39
00:02:05,310 --> 00:02:09,479
<font color="#E5E5E5">even just download it right now</font><font color="#CCCCCC"> on your</font>

40
00:02:06,600 --> 00:02:11,340
phone<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can't so I'll leave that up</font>

41
00:02:09,479 --> 00:02:13,530
<font color="#CCCCCC">there for a second</font><font color="#E5E5E5"> while it's up there</font>

42
00:02:11,340 --> 00:02:16,250
I'll give you a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of a story</font>

43
00:02:13,530 --> 00:02:18,180
as to why I'm giving<font color="#E5E5E5"> this talk basically</font>

44
00:02:16,250 --> 00:02:21,209
<font color="#CCCCCC">something along</font><font color="#E5E5E5"> lines of what the title</font>

45
00:02:18,180 --> 00:02:22,650
happened<font color="#CCCCCC"> I run a small cybersecurity</font>

46
00:02:21,209 --> 00:02:24,900
company that among other things does

47
00:02:22,650 --> 00:02:26,040
forensics and one particular<font color="#CCCCCC"> day one of</font>

48
00:02:24,900 --> 00:02:28,260
<font color="#E5E5E5">our partners reached out to us and said</font>

49
00:02:26,040 --> 00:02:30,630
<font color="#CCCCCC">hey we've got someone who was running</font><font color="#E5E5E5"> a</font>

50
00:02:28,260 --> 00:02:32,519
<font color="#E5E5E5">bunch of apps on a server and it got</font>

51
00:02:30,630 --> 00:02:34,410
compromised<font color="#CCCCCC"> and now now they need to</font>

52
00:02:32,520 --> 00:02:36,150
<font color="#E5E5E5">know what happened you know</font><font color="#CCCCCC"> this docker</font>

53
00:02:34,410 --> 00:02:38,790
stuff can you guys take<font color="#E5E5E5"> care</font><font color="#CCCCCC"> of it okay</font>

54
00:02:36,150 --> 00:02:41,010
<font color="#E5E5E5">so one fine summer day I found myself</font>

55
00:02:38,790 --> 00:02:42,690
staring at<font color="#E5E5E5"> host image they had a whole</font>

56
00:02:41,010 --> 00:02:44,069
<font color="#E5E5E5">bunch of docker containers on</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> had to</font>

57
00:02:42,690 --> 00:02:47,430
<font color="#E5E5E5">figure out well how</font><font color="#CCCCCC"> am</font><font color="#E5E5E5"> I going to go</font>

58
00:02:44,069 --> 00:02:49,260
forensic ly pull out the<font color="#CCCCCC"> information</font>

59
00:02:47,430 --> 00:02:51,750
<font color="#E5E5E5">what went on and figure out you know</font>

60
00:02:49,260 --> 00:02:53,850
basically<font color="#E5E5E5"> what was the story here and of</font>

61
00:02:51,750 --> 00:02:55,200
course<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> you do is you sit</font>

62
00:02:53,850 --> 00:02:56,579
<font color="#E5E5E5">down and say okay before</font><font color="#CCCCCC"> I reinvent a</font>

63
00:02:55,200 --> 00:02:57,958
bunch of<font color="#E5E5E5"> wheels let's go see if someone</font>

64
00:02:56,580 --> 00:03:01,500
<font color="#CCCCCC">else</font><font color="#E5E5E5"> has made some tools so</font><font color="#CCCCCC"> you google</font>

65
00:02:57,959 --> 00:03:03,420
it and<font color="#E5E5E5"> Google came back with nothing by</font>

66
00:03:01,500 --> 00:03:04,560
the time I was done<font color="#CCCCCC"> I</font><font color="#E5E5E5"> defend spent a</font>

67
00:03:03,420 --> 00:03:06,208
reasonable<font color="#CCCCCC"> amount of time</font><font color="#E5E5E5"> the docker</font>

68
00:03:04,560 --> 00:03:09,440
<font color="#E5E5E5">source code sorting through how all</font><font color="#CCCCCC"> this</font>

69
00:03:06,209 --> 00:03:11,310
stuff worked and when the b-sides

70
00:03:09,440 --> 00:03:12,630
<font color="#E5E5E5">puzzles came around I thought you know</font>

71
00:03:11,310 --> 00:03:13,709
<font color="#E5E5E5">maybe I can save someone else the</font>

72
00:03:12,630 --> 00:03:17,220
trouble of having<font color="#E5E5E5"> to do this the hard</font>

73
00:03:13,709 --> 00:03:20,010
<font color="#CCCCCC">way like</font><font color="#E5E5E5"> I do so the</font><font color="#CCCCCC"> goals for this talk</font>

74
00:03:17,220 --> 00:03:22,079
basically<font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to be if you find</font>

75
00:03:20,010 --> 00:03:23,578
yourself<font color="#CCCCCC"> in a position where someone's</font>

76
00:03:22,079 --> 00:03:25,370
<font color="#E5E5E5">docker i've got hacked and everyone's</font>

77
00:03:23,579 --> 00:03:29,040
looking<font color="#CCCCCC"> at you and saying what happened</font>

78
00:03:25,370 --> 00:03:31,140
<font color="#E5E5E5">how can you go pull out the forensic</font>

79
00:03:29,040 --> 00:03:32,880
information<font color="#CCCCCC"> necessary</font><font color="#E5E5E5"> to work out and</font>

80
00:03:31,140 --> 00:03:34,589
answer<font color="#CCCCCC"> that question we'll cover what</font>

81
00:03:32,880 --> 00:03:36,750
<font color="#CCCCCC">it's like for</font><font color="#E5E5E5"> a live system which is the</font>

82
00:03:34,590 --> 00:03:37,890
easy case that's one slide<font color="#CCCCCC"> and then</font>

83
00:03:36,750 --> 00:03:39,239
we're<font color="#E5E5E5"> gonna spend a lot of time on what</font>

84
00:03:37,890 --> 00:03:41,100
<font color="#CCCCCC">to do when you</font><font color="#E5E5E5"> basically been handed a</font>

85
00:03:39,239 --> 00:03:43,019
cold hard disk yeah there were some<font color="#CCCCCC"> doc</font>

86
00:03:41,100 --> 00:03:46,410
<font color="#CCCCCC">wraps on this tell us</font><font color="#E5E5E5"> what happened not</font>

87
00:03:43,019 --> 00:03:47,910
<font color="#E5E5E5">quite as simple specifically docker has</font>

88
00:03:46,410 --> 00:03:51,120
<font color="#E5E5E5">a lot of different storage backends</font>

89
00:03:47,910 --> 00:03:53,400
which is how they still store the<font color="#E5E5E5"> disks</font>

90
00:03:51,120 --> 00:03:55,049
<font color="#CCCCCC">State for a container and</font><font color="#E5E5E5"> images and</font>

91
00:03:53,400 --> 00:03:56,850
<font color="#CCCCCC">whatnot</font><font color="#E5E5E5"> we're only going to cover two</font><font color="#CCCCCC"> of</font>

92
00:03:55,049 --> 00:03:58,109
them but they're<font color="#E5E5E5"> going to be the two</font>

93
00:03:56,850 --> 00:04:00,600
<font color="#E5E5E5">that you're most likely going</font><font color="#CCCCCC"> to run</font>

94
00:03:58,109 --> 00:04:02,130
into the overlay<font color="#E5E5E5"> two back-end which is</font>

95
00:04:00,600 --> 00:04:04,170
the<font color="#CCCCCC"> default</font><font color="#E5E5E5"> one that they're pushing</font>

96
00:04:02,130 --> 00:04:05,340
everyone towards and the device mapper

97
00:04:04,170 --> 00:04:07,589
<font color="#E5E5E5">back-end which is the one you're going</font>

98
00:04:05,340 --> 00:04:10,500
<font color="#E5E5E5">to run</font><font color="#CCCCCC"> into on certain versions of Red</font>

99
00:04:07,590 --> 00:04:12,810
<font color="#E5E5E5">Hat Enterprise Linux or CentOS there are</font>

100
00:04:10,500 --> 00:04:13,890
others<font color="#E5E5E5"> but if</font><font color="#CCCCCC"> you're wound up</font><font color="#E5E5E5"> in this</font>

101
00:04:12,810 --> 00:04:18,060
<font color="#CCCCCC">position you're probably going to be</font>

102
00:04:13,890 --> 00:04:22,200
<font color="#CCCCCC">dealing with</font><font color="#E5E5E5"> one of those two so to</font>

103
00:04:18,060 --> 00:04:26,070
start off just<font color="#CCCCCC"> to review what's a</font><font color="#E5E5E5"> docker</font>

104
00:04:22,200 --> 00:04:26,840
<font color="#CCCCCC">app</font><font color="#E5E5E5"> a docker app basically</font><font color="#CCCCCC"> or a running</font>

105
00:04:26,070 --> 00:04:30,380
docker container

106
00:04:26,840 --> 00:04:32,150
is really<font color="#E5E5E5"> nothing</font><font color="#CCCCCC"> more than a lease</font><font color="#E5E5E5"> on a</font>

107
00:04:30,380 --> 00:04:33,650
Linux system<font color="#E5E5E5"> which is what we will be</font>

108
00:04:32,150 --> 00:04:37,520
<font color="#E5E5E5">looking at nothing</font><font color="#CCCCCC"> more than an</font><font color="#E5E5E5"> ordinary</font>

109
00:04:33,650 --> 00:04:39,919
Linux<font color="#E5E5E5"> application is running</font><font color="#CCCCCC"> with two</font>

110
00:04:37,520 --> 00:04:42,440
caveats<font color="#CCCCCC"> one is there's</font><font color="#E5E5E5"> that nice little</font>

111
00:04:39,919 --> 00:04:44,180
<font color="#E5E5E5">box around it which is basically</font><font color="#CCCCCC"> the</font>

112
00:04:42,440 --> 00:04:45,469
docker Damon using a bunch of Linux

113
00:04:44,180 --> 00:04:46,940
kernel primitives<font color="#CCCCCC"> to say okay we're</font>

114
00:04:45,470 --> 00:04:50,270
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> try</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> you think</font><font color="#CCCCCC"> you're in</font>

115
00:04:46,940 --> 00:04:52,460
<font color="#E5E5E5">your own</font><font color="#CCCCCC"> world</font><font color="#E5E5E5"> as Dan Walsh famously</font>

116
00:04:50,270 --> 00:04:54,440
said containers<font color="#E5E5E5"> don't contain so that is</font>

117
00:04:52,460 --> 00:04:57,409
a little bit leaky but it's pretty<font color="#E5E5E5"> good</font>

118
00:04:54,440 --> 00:04:59,000
<font color="#E5E5E5">and then the second part that makes a</font>

119
00:04:57,410 --> 00:05:01,100
docker container our docker container is

120
00:04:59,000 --> 00:05:05,300
that this<font color="#CCCCCC"> application that's running</font>

121
00:05:01,100 --> 00:05:08,780
<font color="#CCCCCC">gets its own</font><font color="#E5E5E5"> dedicated view of what it</font>

122
00:05:05,300 --> 00:05:10,910
thinks<font color="#E5E5E5"> the file system is and what's a</font>

123
00:05:08,780 --> 00:05:13,549
special interest to us in this case is

124
00:05:10,910 --> 00:05:15,530
that the<font color="#E5E5E5"> weight doctor does</font><font color="#CCCCCC"> that is by</font>

125
00:05:13,550 --> 00:05:18,530
kind of<font color="#E5E5E5"> stacking layers on top of each</font>

126
00:05:15,530 --> 00:05:21,138
<font color="#E5E5E5">other</font><font color="#CCCCCC"> so instead of</font><font color="#E5E5E5"> just saying here is</font>

127
00:05:18,530 --> 00:05:22,340
a you<font color="#E5E5E5"> know a flat directory with your</font>

128
00:05:21,139 --> 00:05:25,070
<font color="#CCCCCC">filesystem we're just kind of like</font>

129
00:05:22,340 --> 00:05:26,859
chroot into it and off<font color="#CCCCCC"> you go they</font>

130
00:05:25,070 --> 00:05:30,740
maintain things<font color="#E5E5E5"> in a bunch of layers</font>

131
00:05:26,860 --> 00:05:32,630
<font color="#E5E5E5">partially so that they can have a base</font>

132
00:05:30,740 --> 00:05:34,070
image they<font color="#CCCCCC"> can reuse many times and then</font>

133
00:05:32,630 --> 00:05:36,380
<font color="#E5E5E5">all the rights that individual</font>

134
00:05:34,070 --> 00:05:40,250
containers<font color="#E5E5E5"> do are specific to those</font>

135
00:05:36,380 --> 00:05:42,020
containers<font color="#E5E5E5"> and partially due to some of</font>

136
00:05:40,250 --> 00:05:43,250
the development oriented priorities they

137
00:05:42,020 --> 00:05:45,859
had when<font color="#E5E5E5"> they originally designed stuff</font>

138
00:05:43,250 --> 00:05:47,120
from<font color="#E5E5E5"> our perspective basically for a</font>

139
00:05:45,860 --> 00:05:48,680
live system<font color="#E5E5E5"> we're either going to be</font>

140
00:05:47,120 --> 00:05:51,620
dealing<font color="#CCCCCC"> with alright</font><font color="#E5E5E5"> we've</font><font color="#CCCCCC"> got that</font>

141
00:05:48,680 --> 00:05:53,180
entire picture<font color="#E5E5E5"> so what can we grab for a</font>

142
00:05:51,620 --> 00:05:54,830
cold system we're just<font color="#E5E5E5"> going to have</font>

143
00:05:53,180 --> 00:05:57,260
those<font color="#E5E5E5"> little</font><font color="#CCCCCC"> boxes underneath the</font>

144
00:05:54,830 --> 00:05:59,840
<font color="#E5E5E5">fou-fou process which is the different</font>

145
00:05:57,260 --> 00:06:04,280
disk layers that<font color="#E5E5E5"> make</font><font color="#CCCCCC"> up the food</font>

146
00:05:59,840 --> 00:06:06,369
processes of view of a<font color="#CCCCCC"> filesystem</font><font color="#E5E5E5"> so</font>

147
00:06:04,280 --> 00:06:09,619
live capture<font color="#E5E5E5"> how are we gonna do that</font>

148
00:06:06,370 --> 00:06:11,990
<font color="#E5E5E5">well thankfully docker makes this fairly</font>

149
00:06:09,620 --> 00:06:14,389
<font color="#CCCCCC">simple</font><font color="#E5E5E5"> we can actually do live capture</font>

150
00:06:11,990 --> 00:06:17,960
almost<font color="#E5E5E5"> entirely with just plain docker</font>

151
00:06:14,389 --> 00:06:20,510
commands<font color="#CCCCCC"> it turns out when you</font><font color="#E5E5E5"> run a</font>

152
00:06:17,960 --> 00:06:24,380
container almost all<font color="#CCCCCC"> of the relevant</font>

153
00:06:20,510 --> 00:06:25,729
metadata for what's there<font color="#CCCCCC"> can</font><font color="#E5E5E5"> be dumped</font>

154
00:06:24,380 --> 00:06:29,000
out with the docker inspect command

155
00:06:25,729 --> 00:06:31,159
<font color="#CCCCCC">that's going to</font><font color="#E5E5E5"> include what what image</font>

156
00:06:29,000 --> 00:06:34,010
what<font color="#E5E5E5"> filesystem layers that you start</font>

157
00:06:31,160 --> 00:06:35,719
with<font color="#E5E5E5"> was the container started on what</font>

158
00:06:34,010 --> 00:06:37,789
did they run what

159
00:06:35,719 --> 00:06:39,110
<font color="#CCCCCC">directories from</font><font color="#E5E5E5"> the host file system or</font>

160
00:06:37,789 --> 00:06:39,739
<font color="#E5E5E5">somewhere else</font><font color="#CCCCCC"> that they mount into</font><font color="#E5E5E5"> the</font>

161
00:06:39,110 --> 00:06:41,299
container

162
00:06:39,739 --> 00:06:42,919
what kind of privileges did they give<font color="#E5E5E5"> it</font>

163
00:06:41,299 --> 00:06:45,318
what were the environment variables the

164
00:06:42,919 --> 00:06:46,459
whole nine yards<font color="#E5E5E5"> so that's one thing</font>

165
00:06:45,319 --> 00:06:47,719
<font color="#E5E5E5">you'll definitely want to grab</font><font color="#CCCCCC"> if you're</font>

166
00:06:46,459 --> 00:06:50,569
dealing<font color="#CCCCCC"> with a live system</font><font color="#E5E5E5"> that you can</font>

167
00:06:47,719 --> 00:06:54,139
control<font color="#E5E5E5"> the other nice thing is</font><font color="#CCCCCC"> that</font>

168
00:06:50,569 --> 00:06:56,329
docker also logs<font color="#CCCCCC"> all of the output</font>

169
00:06:54,139 --> 00:06:58,639
<font color="#E5E5E5">standard output in standard air from any</font>

170
00:06:56,329 --> 00:07:01,179
container<font color="#CCCCCC"> and if it's got a terminal</font>

171
00:06:58,639 --> 00:07:04,219
<font color="#E5E5E5">attached to it you'll get the</font><font color="#CCCCCC"> input too</font>

172
00:07:01,179 --> 00:07:06,888
so<font color="#E5E5E5"> the docker logs command will give</font><font color="#CCCCCC"> you</font>

173
00:07:04,219 --> 00:07:08,748
a nice dump of that<font color="#E5E5E5"> that can be</font>

174
00:07:06,889 --> 00:07:12,139
<font color="#CCCCCC">especially useful</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> situations where</font>

175
00:07:08,749 --> 00:07:13,729
<font color="#E5E5E5">someone has compromised a host and then</font>

176
00:07:12,139 --> 00:07:15,199
<font color="#CCCCCC">promptly turned around and run more</font>

177
00:07:13,729 --> 00:07:17,269
docker containers of their own or<font color="#CCCCCC"> maybe</font>

178
00:07:15,199 --> 00:07:18,499
that's<font color="#E5E5E5"> how they</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> into the</font><font color="#CCCCCC"> host often</font>

179
00:07:17,269 --> 00:07:20,539
<font color="#CCCCCC">times they'll run a perfectly benign</font>

180
00:07:18,499 --> 00:07:23,050
container like just a base they make a

181
00:07:20,539 --> 00:07:25,068
container<font color="#CCCCCC"> likely a bunch of one</font><font color="#E5E5E5"> image</font>

182
00:07:23,050 --> 00:07:26,389
<font color="#E5E5E5">but they'll have a terminal attached to</font>

183
00:07:25,069 --> 00:07:27,559
it then they'll pump in you know a

184
00:07:26,389 --> 00:07:29,599
couple<font color="#CCCCCC"> commands saying like you know go</font>

185
00:07:27,559 --> 00:07:30,649
download<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> here's this teeny little</font>

186
00:07:29,599 --> 00:07:32,569
<font color="#E5E5E5">Python script</font><font color="#CCCCCC"> that's gonna basically</font>

187
00:07:30,649 --> 00:07:35,659
<font color="#E5E5E5">just set up a port forwarding child you</font>

188
00:07:32,569 --> 00:07:39,049
know off we<font color="#E5E5E5"> go</font><font color="#CCCCCC"> in that</font><font color="#E5E5E5"> case if you were</font>

189
00:07:35,659 --> 00:07:41,479
to go<font color="#E5E5E5"> look at what was on disk you might</font>

190
00:07:39,049 --> 00:07:43,669
not find<font color="#E5E5E5"> a whole lot but being able to</font>

191
00:07:41,479 --> 00:07:46,519
look<font color="#E5E5E5"> at the terminal i/o can be</font>

192
00:07:43,669 --> 00:07:49,329
incredibly illuminating<font color="#E5E5E5"> then in terms of</font>

193
00:07:46,519 --> 00:07:51,439
how do<font color="#CCCCCC"> we actually get what's on disk</font>

194
00:07:49,329 --> 00:07:54,050
<font color="#E5E5E5">for a given container while it's running</font>

195
00:07:51,439 --> 00:07:55,909
this is where the design of docker<font color="#E5E5E5"> and</font>

196
00:07:54,050 --> 00:07:57,349
<font color="#E5E5E5">their their mindset for making it kind</font>

197
00:07:55,909 --> 00:07:59,149
<font color="#CCCCCC">of like a development packaging system</font>

198
00:07:57,349 --> 00:08:01,789
more<font color="#CCCCCC"> than a secure containing system</font>

199
00:07:59,149 --> 00:08:04,999
comes into handy<font color="#E5E5E5"> the way images are</font>

200
00:08:01,789 --> 00:08:06,649
built is by running containers<font color="#E5E5E5"> that do</font>

201
00:08:04,999 --> 00:08:08,059
individual commands and then each time<font color="#E5E5E5"> a</font>

202
00:08:06,649 --> 00:08:10,279
container is done you take<font color="#E5E5E5"> that little</font>

203
00:08:08,059 --> 00:08:11,989
ephemeral<font color="#E5E5E5"> readwrite layer and you commit</font>

204
00:08:10,279 --> 00:08:14,029
it<font color="#CCCCCC"> and it's just a new layer built into</font>

205
00:08:11,989 --> 00:08:16,068
the image<font color="#E5E5E5"> and so when you're done</font><font color="#CCCCCC"> you've</font>

206
00:08:14,029 --> 00:08:17,529
got this<font color="#E5E5E5"> image composed of a whole bunch</font>

207
00:08:16,069 --> 00:08:19,789
of little little layers each

208
00:08:17,529 --> 00:08:22,189
representing the changes<font color="#E5E5E5"> from running a</font>

209
00:08:19,789 --> 00:08:24,259
specific command<font color="#E5E5E5"> because that's how</font>

210
00:08:22,189 --> 00:08:26,659
images<font color="#CCCCCC"> are created it makes it very easy</font>

211
00:08:24,259 --> 00:08:29,809
<font color="#CCCCCC">for us then to</font><font color="#E5E5E5"> capture the disk state of</font>

212
00:08:26,659 --> 00:08:31,459
a run a container<font color="#E5E5E5"> we just committed now</font>

213
00:08:29,809 --> 00:08:34,129
what we'll get is<font color="#CCCCCC"> we'll get a new image</font>

214
00:08:31,459 --> 00:08:36,679
<font color="#CCCCCC">that is just like the base image</font><font color="#E5E5E5"> that it</font>

215
00:08:34,129 --> 00:08:38,688
had but with one new layer on<font color="#E5E5E5"> top which</font>

216
00:08:36,679 --> 00:08:41,448
is exclusively<font color="#E5E5E5"> the changes the container</font>

217
00:08:38,688 --> 00:08:42,919
made then we<font color="#CCCCCC"> can use docker save and</font>

218
00:08:41,448 --> 00:08:43,639
what that's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> give us</font><font color="#E5E5E5"> back will</font>

219
00:08:42,919 --> 00:08:46,399
be a<font color="#E5E5E5"> tarball</font>

220
00:08:43,639 --> 00:08:48,110
of all of those layers this<font color="#E5E5E5"> is</font>

221
00:08:46,399 --> 00:08:49,570
<font color="#E5E5E5">especially useful because what you're</font>

222
00:08:48,110 --> 00:08:52,390
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get back is</font>

223
00:08:49,570 --> 00:08:55,270
<font color="#CCCCCC">the each layer as the</font><font color="#E5E5E5"> differences it had</font>

224
00:08:52,390 --> 00:08:56,590
on the<font color="#E5E5E5"> one</font><font color="#CCCCCC"> below before</font><font color="#E5E5E5"> so you can look</font>

225
00:08:55,270 --> 00:08:58,510
<font color="#E5E5E5">at the top layer you</font><font color="#CCCCCC"> have in</font><font color="#E5E5E5"> that hard</font>

226
00:08:56,590 --> 00:09:02,410
<font color="#E5E5E5">ball and it's going</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> everything the</font>

227
00:08:58,510 --> 00:09:04,510
<font color="#E5E5E5">container changed or added as opposed to</font>

228
00:09:02,410 --> 00:09:05,980
<font color="#E5E5E5">what it started</font><font color="#CCCCCC"> running with</font><font color="#E5E5E5"> this is</font>

229
00:09:04,510 --> 00:09:07,420
<font color="#CCCCCC">oftentimes what we're searching for when</font>

230
00:09:05,980 --> 00:09:09,280
we're trying<font color="#E5E5E5"> to do forensic analysis of</font>

231
00:09:07,420 --> 00:09:10,780
<font color="#CCCCCC">a</font><font color="#E5E5E5"> disk drive anyway in this case it just</font>

232
00:09:09,280 --> 00:09:13,839
<font color="#E5E5E5">got nicely wrapped up in a bell and</font>

233
00:09:10,780 --> 00:09:15,819
handed to<font color="#CCCCCC"> us then finally if the</font>

234
00:09:13,840 --> 00:09:16,900
container is running the<font color="#E5E5E5"> other thing</font>

235
00:09:15,820 --> 00:09:19,350
that we<font color="#CCCCCC"> can do is we have the</font>

236
00:09:16,900 --> 00:09:21,850
opportunity<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> grab process memory</font>

237
00:09:19,350 --> 00:09:23,380
because of running docker containers

238
00:09:21,850 --> 00:09:24,820
really just an ordinary<font color="#E5E5E5"> Linux</font>

239
00:09:23,380 --> 00:09:26,650
application it's just got these

240
00:09:24,820 --> 00:09:27,960
constraints by the kernels I've done it

241
00:09:26,650 --> 00:09:32,319
<font color="#E5E5E5">and it's a little view</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a file system</font>

242
00:09:27,960 --> 00:09:33,760
<font color="#E5E5E5">from the</font><font color="#CCCCCC"> host</font><font color="#E5E5E5"> viewpoint a process inside</font>

243
00:09:32,320 --> 00:09:38,890
the docker container is also<font color="#CCCCCC"> a</font><font color="#E5E5E5"> process</font>

244
00:09:33,760 --> 00:09:41,230
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the host well I mean</font><font color="#E5E5E5"> that's handy for</font>

245
00:09:38,890 --> 00:09:42,910
<font color="#CCCCCC">us as long as you're one of those</font>

246
00:09:41,230 --> 00:09:45,520
<font color="#CCCCCC">processes inside the container</font><font color="#E5E5E5"> you're</font>

247
00:09:42,910 --> 00:09:47,860
still it's constrained by the the kernel

248
00:09:45,520 --> 00:09:49,120
restrictions<font color="#CCCCCC"> that the that are</font><font color="#E5E5E5"> in place</font>

249
00:09:47,860 --> 00:09:51,340
on there but if<font color="#E5E5E5"> you're outside in the</font>

250
00:09:49,120 --> 00:09:52,690
<font color="#E5E5E5">host yeah you know if I want to kill a</font>

251
00:09:51,340 --> 00:09:54,520
process in this inside<font color="#E5E5E5"> a container and</font>

252
00:09:52,690 --> 00:09:56,770
<font color="#E5E5E5">I'm the super user I can just kill it's</font>

253
00:09:54,520 --> 00:09:57,970
just another process just kill it so in

254
00:09:56,770 --> 00:09:59,439
this case the docker top command

255
00:09:57,970 --> 00:10:01,180
basically<font color="#E5E5E5"> just lists off here all the</font>

256
00:09:59,440 --> 00:10:03,520
processes that are<font color="#CCCCCC"> running inside</font><font color="#E5E5E5"> this</font>

257
00:10:01,180 --> 00:10:04,719
container<font color="#E5E5E5"> or put another way here all</font>

258
00:10:03,520 --> 00:10:06,819
the processes that are<font color="#CCCCCC"> running</font><font color="#E5E5E5"> that</font>

259
00:10:04,720 --> 00:10:09,970
we've slapped these kernel<font color="#CCCCCC"> namespacing</font>

260
00:10:06,820 --> 00:10:11,800
and<font color="#CCCCCC"> c</font><font color="#E5E5E5"> group c group constraints on once</font>

261
00:10:09,970 --> 00:10:14,020
you've got the<font color="#E5E5E5"> process IDs and you're</font>

262
00:10:11,800 --> 00:10:15,939
running at a host level<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just say</font>

263
00:10:14,020 --> 00:10:18,189
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> well these are processes</font><font color="#E5E5E5"> go get me</font>

264
00:10:15,940 --> 00:10:20,080
the memory you can use it to like<font color="#CCCCCC"> g core</font>

265
00:10:18,190 --> 00:10:23,680
or whatever your preference is<font color="#E5E5E5"> and now</font>

266
00:10:20,080 --> 00:10:25,240
you have memory images so if you have a

267
00:10:23,680 --> 00:10:28,989
system<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> already been compromised</font>

268
00:10:25,240 --> 00:10:31,120
and<font color="#E5E5E5"> you suspect</font><font color="#CCCCCC"> you're going to want</font>

269
00:10:28,990 --> 00:10:33,550
some forensic artifacts<font color="#E5E5E5"> out of it it's</font>

270
00:10:31,120 --> 00:10:35,650
<font color="#E5E5E5">going to be an awful</font><font color="#CCCCCC"> lot easier</font><font color="#E5E5E5"> to go</font>

271
00:10:33,550 --> 00:10:38,170
grab them this way then<font color="#E5E5E5"> pulling the plug</font>

272
00:10:35,650 --> 00:10:40,180
<font color="#E5E5E5">and doing it</font><font color="#CCCCCC"> disk wise we're gonna go</font>

273
00:10:38,170 --> 00:10:41,199
into<font color="#E5E5E5"> what to happen when someone pulled</font>

274
00:10:40,180 --> 00:10:42,969
the plug and<font color="#E5E5E5"> giving you the disk and</font>

275
00:10:41,200 --> 00:10:44,080
sometimes in emergency situations<font color="#E5E5E5"> you</font>

276
00:10:42,970 --> 00:10:46,420
don't want to spend<font color="#E5E5E5"> the</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> just pull</font>

277
00:10:44,080 --> 00:10:48,100
the plug<font color="#CCCCCC"> but</font><font color="#E5E5E5"> if you have the luxury</font><font color="#CCCCCC"> of</font>

278
00:10:46,420 --> 00:10:50,650
dealing<font color="#CCCCCC"> with a system you control that</font>

279
00:10:48,100 --> 00:10:52,720
is running with potentially compromised

280
00:10:50,650 --> 00:10:57,850
<font color="#E5E5E5">containers running</font><font color="#CCCCCC"> just grab them this</font>

281
00:10:52,720 --> 00:10:59,410
way<font color="#CCCCCC"> so cold capture this</font><font color="#E5E5E5"> is the</font>

282
00:10:57,850 --> 00:11:00,760
situation where someone has<font color="#CCCCCC"> walked up</font>

283
00:10:59,410 --> 00:11:01,959
<font color="#E5E5E5">into your office and they've handed you</font>

284
00:11:00,760 --> 00:11:04,120
a hard disk<font color="#CCCCCC"> and they said</font>

285
00:11:01,960 --> 00:11:05,350
<font color="#CCCCCC">hey</font><font color="#E5E5E5"> this thing was a host that had a</font>

286
00:11:04,120 --> 00:11:06,520
bunch of docker containers on it and

287
00:11:05,350 --> 00:11:08,980
<font color="#CCCCCC">something</font><font color="#E5E5E5"> went wrong tell us what</font>

288
00:11:06,520 --> 00:11:12,340
happened<font color="#CCCCCC"> at this point everything on the</font>

289
00:11:08,980 --> 00:11:14,500
previous slide is useless<font color="#CCCCCC"> we know that</font>

290
00:11:12,340 --> 00:11:16,030
most<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> information that we could</font>

291
00:11:14,500 --> 00:11:18,880
easily get<font color="#E5E5E5"> at with docker commands is</font>

292
00:11:16,030 --> 00:11:21,189
there<font color="#E5E5E5"> but we're gonna have to go at it</font>

293
00:11:18,880 --> 00:11:24,610
<font color="#E5E5E5">probably the hard way</font><font color="#CCCCCC"> depending</font><font color="#E5E5E5"> upon</font>

294
00:11:21,190 --> 00:11:26,140
what your tolerance is for potential

295
00:11:24,610 --> 00:11:27,820
alterations to an image<font color="#E5E5E5"> that you're</font>

296
00:11:26,140 --> 00:11:30,189
<font color="#E5E5E5">doing analysis on you might be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

297
00:11:27,820 --> 00:11:32,320
<font color="#E5E5E5">just load this thing up</font><font color="#CCCCCC"> stick</font><font color="#E5E5E5"> your own</font>

298
00:11:30,190 --> 00:11:34,090
little<font color="#CCCCCC"> copy-on-write</font><font color="#E5E5E5"> layer on it</font><font color="#CCCCCC"> boot it</font>

299
00:11:32,320 --> 00:11:35,650
run docker and grab some of<font color="#E5E5E5"> the things</font>

300
00:11:34,090 --> 00:11:37,630
that<font color="#E5E5E5"> way</font>

301
00:11:35,650 --> 00:11:39,490
in a lot of cases especially<font color="#E5E5E5"> when you</font>

302
00:11:37,630 --> 00:11:41,140
have stricter evidence requirements you

303
00:11:39,490 --> 00:11:43,330
probably can't do that<font color="#E5E5E5"> you're going</font><font color="#CCCCCC"> to</font>

304
00:11:41,140 --> 00:11:44,949
<font color="#E5E5E5">have to deal</font><font color="#CCCCCC"> with a</font><font color="#E5E5E5"> purely read-only</font>

305
00:11:43,330 --> 00:11:47,380
<font color="#E5E5E5">disk and pull out what</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> from it</font>

306
00:11:44,950 --> 00:11:48,340
<font color="#E5E5E5">so in that case if we're staring at a</font>

307
00:11:47,380 --> 00:11:50,200
hard drive when we got to pull out

308
00:11:48,340 --> 00:11:54,340
information<font color="#E5E5E5"> about the containers we're</font>

309
00:11:50,200 --> 00:11:56,380
the goodies at<font color="#CCCCCC"> varla docker</font><font color="#E5E5E5"> that is by</font>

310
00:11:54,340 --> 00:11:58,470
default the directory on<font color="#CCCCCC"> analytic system</font>

311
00:11:56,380 --> 00:12:01,650
where docker<font color="#E5E5E5"> is going to store</font>

312
00:11:58,470 --> 00:12:04,270
<font color="#E5E5E5">everything that we're</font><font color="#CCCCCC"> interested</font><font color="#E5E5E5"> and</font>

313
00:12:01,650 --> 00:12:06,040
coincidentally<font color="#E5E5E5"> all of the relative paths</font>

314
00:12:04,270 --> 00:12:08,079
that<font color="#E5E5E5"> are in this slide from this point</font>

315
00:12:06,040 --> 00:12:10,180
<font color="#E5E5E5">out are going to be relative to this</font>

316
00:12:08,080 --> 00:12:11,650
<font color="#E5E5E5">location so the next slide when it has a</font>

317
00:12:10,180 --> 00:12:16,000
path<font color="#E5E5E5"> right at the top that's going</font><font color="#CCCCCC"> to be</font>

318
00:12:11,650 --> 00:12:17,620
relative to<font color="#CCCCCC"> Varla docker</font><font color="#E5E5E5"> so first thing</font>

319
00:12:16,000 --> 00:12:21,130
there's<font color="#E5E5E5"> one tomato day that we can go</font>

320
00:12:17,620 --> 00:12:24,310
grab<font color="#E5E5E5"> that's fairly easy to get it</font><font color="#CCCCCC"> one</font>

321
00:12:21,130 --> 00:12:27,730
<font color="#CCCCCC">example is what</font><font color="#E5E5E5"> image is what docker</font>

322
00:12:24,310 --> 00:12:31,270
images were installed on<font color="#E5E5E5"> this thing well</font>

323
00:12:27,730 --> 00:12:32,410
in pharr<font color="#E5E5E5"> lib docker image</font><font color="#CCCCCC"> the name</font><font color="#E5E5E5"> of</font>

324
00:12:31,270 --> 00:12:34,449
whatever storage background they're

325
00:12:32,410 --> 00:12:37,240
using<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> a file called</font>

326
00:12:34,450 --> 00:12:39,760
repositories<font color="#CCCCCC"> that</font><font color="#E5E5E5"> JSON</font><font color="#CCCCCC"> and it basically</font>

327
00:12:37,240 --> 00:12:43,270
just lists<font color="#E5E5E5"> here are all the images</font><font color="#CCCCCC"> that</font>

328
00:12:39,760 --> 00:12:44,560
were pulled down<font color="#CCCCCC"> onto this host so right</font>

329
00:12:43,270 --> 00:12:46,510
off<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bat you can basically presume</font>

330
00:12:44,560 --> 00:12:49,869
any container that<font color="#CCCCCC"> was running probably</font>

331
00:12:46,510 --> 00:12:51,310
<font color="#CCCCCC">use one of these as the base if it was a</font>

332
00:12:49,870 --> 00:12:52,660
compromised host<font color="#E5E5E5"> it might even be</font>

333
00:12:51,310 --> 00:12:54,670
interesting to know<font color="#CCCCCC"> what images were</font>

334
00:12:52,660 --> 00:12:56,709
there<font color="#E5E5E5"> even if none of the containers</font>

335
00:12:54,670 --> 00:12:59,829
that<font color="#CCCCCC"> were running</font><font color="#E5E5E5"> that you could find</font>

336
00:12:56,710 --> 00:13:01,060
when the plug<font color="#E5E5E5"> was pulled appeared to be</font>

337
00:12:59,830 --> 00:13:02,710
using them it may have been<font color="#CCCCCC"> a very</font>

338
00:13:01,060 --> 00:13:05,140
<font color="#E5E5E5">short-lived container someone used to</font>

339
00:13:02,710 --> 00:13:07,720
<font color="#E5E5E5">gain lateral movement or some kind of</font>

340
00:13:05,140 --> 00:13:10,120
privilege<font color="#CCCCCC"> and</font><font color="#E5E5E5"> looking to see</font><font color="#CCCCCC"> what images</font>

341
00:13:07,720 --> 00:13:12,340
<font color="#CCCCCC">are there could be</font><font color="#E5E5E5"> very useful another</font>

342
00:13:10,120 --> 00:13:14,260
note for<font color="#E5E5E5"> the sake of clarity</font><font color="#CCCCCC"> you can see</font>

343
00:13:12,340 --> 00:13:15,170
there's a<font color="#CCCCCC"> bunch of sha-256 hashes but</font>

344
00:13:14,260 --> 00:13:16,579
<font color="#E5E5E5">I've</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> trimmed</font><font color="#CCCCCC"> a</font>

345
00:13:15,170 --> 00:13:18,229
them all<font color="#E5E5E5"> made them very short cycle</font>

346
00:13:16,579 --> 00:13:20,269
ipsus after them<font color="#E5E5E5"> I'm gonna keep doing</font>

347
00:13:18,230 --> 00:13:21,410
<font color="#CCCCCC">that all</font><font color="#E5E5E5"> through the presentation</font><font color="#CCCCCC"> so</font>

348
00:13:20,269 --> 00:13:23,360
you're gonna see lots<font color="#E5E5E5"> of teeny little</font>

349
00:13:21,410 --> 00:13:25,010
like<font color="#CCCCCC"> six character shots</font><font color="#E5E5E5"> with these six</font>

350
00:13:23,360 --> 00:13:26,029
hashes<font color="#E5E5E5"> that's just me truncating them so</font>

351
00:13:25,010 --> 00:13:28,089
they fit<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> slide and this</font><font color="#CCCCCC"> is</font>

352
00:13:26,029 --> 00:13:33,170
actually readable in the back hopefully

353
00:13:28,089 --> 00:13:36,860
<font color="#E5E5E5">so there's one place another thing</font>

354
00:13:33,170 --> 00:13:38,719
<font color="#CCCCCC">alright we've looked at all of the the</font>

355
00:13:36,860 --> 00:13:40,940
<font color="#E5E5E5">images</font><font color="#CCCCCC"> that were pulled</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> onto this</font>

356
00:13:38,720 --> 00:13:41,449
host<font color="#E5E5E5"> what about information for a given</font>

357
00:13:40,940 --> 00:13:45,050
image

358
00:13:41,449 --> 00:13:46,370
well once again<font color="#CCCCCC"> relative to varlet</font>

359
00:13:45,050 --> 00:13:48,769
docker<font color="#E5E5E5"> there's gonna be a directory</font>

360
00:13:46,370 --> 00:13:49,850
image back end and<font color="#E5E5E5"> back end it's going</font>

361
00:13:48,769 --> 00:13:51,260
to be the name of<font color="#CCCCCC"> the storage back-end</font>

362
00:13:49,850 --> 00:13:53,389
<font color="#CCCCCC">so in this case we're gonna</font><font color="#E5E5E5"> be looking</font>

363
00:13:51,260 --> 00:13:55,610
at overlay<font color="#CCCCCC"> two or device mapper</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's</font>

364
00:13:53,389 --> 00:13:57,139
the docker daemon that<font color="#E5E5E5"> was running on</font>

365
00:13:55,610 --> 00:14:00,110
<font color="#E5E5E5">this host</font><font color="#CCCCCC"> used overlay - it's gonna be</font>

366
00:13:57,139 --> 00:14:02,540
image<font color="#E5E5E5"> / overlay -</font><font color="#CCCCCC"> / image</font><font color="#E5E5E5"> DB content</font>

367
00:14:00,110 --> 00:14:05,000
shot -<font color="#CCCCCC"> 30 SEC's and the image ID the</font>

368
00:14:02,540 --> 00:14:07,279
image ID is just that long shot<font color="#E5E5E5"> 256 hash</font>

369
00:14:05,000 --> 00:14:10,100
in fact an ID for pretty much anything

370
00:14:07,279 --> 00:14:13,699
in<font color="#E5E5E5"> dr. as a shot to the</font><font color="#CCCCCC"> VESA cache so</font>

371
00:14:10,100 --> 00:14:15,589
that<font color="#E5E5E5"> file is a really big JSON file and</font>

372
00:14:13,699 --> 00:14:17,000
it contains pretty much all the

373
00:14:15,589 --> 00:14:18,769
pertinent metadata you might be

374
00:14:17,000 --> 00:14:22,010
interested<font color="#E5E5E5"> in on this image like for</font>

375
00:14:18,769 --> 00:14:23,449
example<font color="#CCCCCC"> the images name the default</font>

376
00:14:22,010 --> 00:14:27,140
entry<font color="#CCCCCC"> point</font><font color="#E5E5E5"> script so if you just say</font>

377
00:14:23,449 --> 00:14:28,550
docker run image name<font color="#E5E5E5"> what runs it's</font>

378
00:14:27,140 --> 00:14:30,709
going<font color="#CCCCCC"> to be the entry</font><font color="#E5E5E5"> point script the</font>

379
00:14:28,550 --> 00:14:33,380
default arguments for<font color="#E5E5E5"> it the build</font>

380
00:14:30,709 --> 00:14:36,260
history<font color="#E5E5E5"> this one's interesting</font><font color="#CCCCCC"> basically</font>

381
00:14:33,380 --> 00:14:37,820
it's not<font color="#E5E5E5"> quite as legible as the</font>

382
00:14:36,260 --> 00:14:40,100
original docker file the image was

383
00:14:37,820 --> 00:14:41,660
<font color="#CCCCCC">created with because Dockers</font><font color="#E5E5E5"> renamed a</font>

384
00:14:40,100 --> 00:14:43,370
bunch of<font color="#E5E5E5"> stuff internally</font><font color="#CCCCCC"> but you can</font>

385
00:14:41,660 --> 00:14:46,969
still see all the basic<font color="#E5E5E5"> commands that</font>

386
00:14:43,370 --> 00:14:49,160
were run to<font color="#E5E5E5"> create this image</font><font color="#CCCCCC"> when the</font>

387
00:14:46,970 --> 00:14:53,360
thing<font color="#E5E5E5"> was made and a</font><font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> other</font>

388
00:14:49,160 --> 00:14:54,890
metadata as well then what we're<font color="#E5E5E5"> really</font>

389
00:14:53,360 --> 00:14:59,079
<font color="#CCCCCC">interested in</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> time is we want</font>

390
00:14:54,890 --> 00:15:01,550
<font color="#E5E5E5">to know what containers were warning and</font>

391
00:14:59,079 --> 00:15:02,930
what's<font color="#E5E5E5"> going on with them so once again</font>

392
00:15:01,550 --> 00:15:04,310
relative to<font color="#CCCCCC"> var love dart there's a</font>

393
00:15:02,930 --> 00:15:06,949
directory called containers and it's

394
00:15:04,310 --> 00:15:08,359
gonna have a whole<font color="#E5E5E5"> bunch of child</font>

395
00:15:06,949 --> 00:15:10,699
directories in it each<font color="#CCCCCC"> of those is going</font>

396
00:15:08,360 --> 00:15:12,740
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be a sha-256 hash which is the</font>

397
00:15:10,699 --> 00:15:14,060
container ID and then inside those

398
00:15:12,740 --> 00:15:15,319
directories<font color="#CCCCCC"> is</font><font color="#E5E5E5"> gonna be a bunch of file</font>

399
00:15:14,060 --> 00:15:17,979
<font color="#E5E5E5">but the</font><font color="#CCCCCC"> one with the really useful</font>

400
00:15:15,319 --> 00:15:20,420
<font color="#E5E5E5">information is this config v2 JSON file</font>

401
00:15:17,980 --> 00:15:22,190
<font color="#E5E5E5">that's going to be more or less</font>

402
00:15:20,420 --> 00:15:23,990
equivalent to what you<font color="#E5E5E5"> would get if</font>

403
00:15:22,190 --> 00:15:26,240
you'd run docker inspect while it was

404
00:15:23,990 --> 00:15:28,529
running<font color="#E5E5E5"> the other important thing to</font>

405
00:15:26,240 --> 00:15:31,330
<font color="#CCCCCC">note is that</font>

406
00:15:28,529 --> 00:15:34,149
<font color="#CCCCCC">containers</font><font color="#E5E5E5"> when docker runs them aren't</font>

407
00:15:31,330 --> 00:15:37,029
<font color="#E5E5E5">always deleted when they stop</font><font color="#CCCCCC"> by default</font>

408
00:15:34,149 --> 00:15:38,320
<font color="#CCCCCC">they're left there</font><font color="#E5E5E5"> so this would be in</font>

409
00:15:37,029 --> 00:15:39,339
what you're<font color="#E5E5E5"> going to expect to</font><font color="#CCCCCC"> find in</font>

410
00:15:38,320 --> 00:15:41,050
<font color="#CCCCCC">that directory will be all the</font>

411
00:15:39,339 --> 00:15:43,720
containers<font color="#E5E5E5"> someone ran at some point and</font>

412
00:15:41,050 --> 00:15:45,219
didn't get rid of and all the<font color="#CCCCCC"> containers</font>

413
00:15:43,720 --> 00:15:48,580
that<font color="#CCCCCC"> were</font><font color="#E5E5E5"> running at the time when</font>

414
00:15:45,220 --> 00:15:49,930
someone<font color="#E5E5E5"> pulled the plug on this host and</font>

415
00:15:48,580 --> 00:15:51,190
there's a lot of useful<font color="#CCCCCC"> information</font><font color="#E5E5E5"> to</font>

416
00:15:49,930 --> 00:15:52,750
<font color="#E5E5E5">find there obviously things like the</font>

417
00:15:51,190 --> 00:15:55,089
name of<font color="#CCCCCC"> the container what was the</font><font color="#E5E5E5"> ID of</font>

418
00:15:52,750 --> 00:15:58,470
<font color="#E5E5E5">the image it was based off of driver</font>

419
00:15:55,089 --> 00:16:00,339
which is<font color="#E5E5E5"> what storage</font><font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> was used</font>

420
00:15:58,470 --> 00:16:01,540
<font color="#E5E5E5">especially interesting when</font><font color="#CCCCCC"> you're</font>

421
00:16:00,339 --> 00:16:04,390
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> build a timeline for what</font>

422
00:16:01,540 --> 00:16:06,390
happened the time the container started

423
00:16:04,390 --> 00:16:09,040
running<font color="#CCCCCC"> and the time to finished running</font>

424
00:16:06,390 --> 00:16:11,529
<font color="#CCCCCC">paths and</font><font color="#E5E5E5"> arcs just because an</font><font color="#CCCCCC"> image has</font>

425
00:16:09,040 --> 00:16:14,170
a given<font color="#E5E5E5"> entry point in arguments for it</font>

426
00:16:11,529 --> 00:16:17,800
<font color="#E5E5E5">that run by default does not mean that</font>

427
00:16:14,170 --> 00:16:19,449
<font color="#E5E5E5">when</font><font color="#CCCCCC"> you run a container using</font><font color="#E5E5E5"> that</font>

428
00:16:17,800 --> 00:16:21,459
image<font color="#E5E5E5"> that's what you have to</font><font color="#CCCCCC"> use you</font>

429
00:16:19,450 --> 00:16:23,500
<font color="#CCCCCC">can specify for</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> but</font>

430
00:16:21,459 --> 00:16:25,719
whatever<font color="#E5E5E5"> it's going to</font><font color="#CCCCCC"> be is</font><font color="#E5E5E5"> going to be</font>

431
00:16:23,500 --> 00:16:28,360
<font color="#E5E5E5">recorded in this container configuration</font>

432
00:16:25,720 --> 00:16:31,089
JSON file<font color="#E5E5E5"> also all of the environment</font>

433
00:16:28,360 --> 00:16:33,730
variables that were passed<font color="#E5E5E5"> into this</font>

434
00:16:31,089 --> 00:16:36,730
container mount points<font color="#E5E5E5"> this can be</font>

435
00:16:33,730 --> 00:16:38,110
<font color="#E5E5E5">especially interesting</font><font color="#CCCCCC"> if you've looking</font>

436
00:16:36,730 --> 00:16:40,930
and you're seeing<font color="#E5E5E5"> a container that has</font>

437
00:16:38,110 --> 00:16:43,690
mounted the root filesystem<font color="#E5E5E5"> just slash</font>

438
00:16:40,930 --> 00:16:45,239
<font color="#E5E5E5">into the end of the container itself</font>

439
00:16:43,690 --> 00:16:47,350
<font color="#E5E5E5">that's highly suspicious</font>

440
00:16:45,240 --> 00:16:48,850
<font color="#E5E5E5">that's probably</font><font color="#CCCCCC"> the kind of thing you're</font>

441
00:16:47,350 --> 00:16:51,700
gonna<font color="#CCCCCC"> find in a container that</font><font color="#E5E5E5"> does</font>

442
00:16:48,850 --> 00:16:53,529
something<font color="#CCCCCC"> like you know dumps the</font><font color="#E5E5E5"> Etsy</font>

443
00:16:51,700 --> 00:16:55,240
<font color="#E5E5E5">pad for a password file or add something</font>

444
00:16:53,529 --> 00:17:00,360
to a<font color="#E5E5E5"> cron tab or some other way to</font>

445
00:16:55,240 --> 00:17:00,360
basically<font color="#E5E5E5"> gain persistence on the</font><font color="#CCCCCC"> host</font>

446
00:17:00,390 --> 00:17:05,020
<font color="#CCCCCC">obviously there's other things</font><font color="#E5E5E5"> like</font>

447
00:17:02,650 --> 00:17:06,099
permissions settings that<font color="#E5E5E5"> could be added</font>

448
00:17:05,020 --> 00:17:08,559
that<font color="#E5E5E5"> would give them excessive</font>

449
00:17:06,099 --> 00:17:12,369
permissions tax as<font color="#CCCCCC"> the host there's a</font>

450
00:17:08,559 --> 00:17:13,599
<font color="#CCCCCC">slug you can use in docker run</font><font color="#E5E5E5"> which of</font>

451
00:17:12,369 --> 00:17:16,958
<font color="#CCCCCC">course now that I need to say it I</font>

452
00:17:13,599 --> 00:17:21,339
<font color="#CCCCCC">immediately forget what it is it starts</font>

453
00:17:16,959 --> 00:17:22,480
<font color="#CCCCCC">with a pea blanking</font><font color="#E5E5E5"> anyway there's a</font>

454
00:17:21,339 --> 00:17:24,159
<font color="#E5E5E5">flight can pass the docker run that</font>

455
00:17:22,480 --> 00:17:25,990
basically says yeah all that nice<font color="#E5E5E5"> little</font>

456
00:17:24,160 --> 00:17:27,429
box we put around<font color="#E5E5E5"> your container</font><font color="#CCCCCC"> throw</font>

457
00:17:25,990 --> 00:17:29,110
that out<font color="#E5E5E5"> let this thing pretty much have</font>

458
00:17:27,429 --> 00:17:31,510
access to the<font color="#E5E5E5"> entire system if it wants</font>

459
00:17:29,110 --> 00:17:33,159
it<font color="#E5E5E5"> and at that point can</font><font color="#CCCCCC"> tanners Asians</font>

460
00:17:31,510 --> 00:17:36,040
not really containing anything it's more

461
00:17:33,160 --> 00:17:37,750
being used as a way to just deploy a

462
00:17:36,040 --> 00:17:39,190
software package so that<font color="#E5E5E5"> it kind of has</font>

463
00:17:37,750 --> 00:17:39,530
<font color="#CCCCCC">its own file system and isn't messing</font>

464
00:17:39,190 --> 00:17:42,200
<font color="#CCCCCC">with</font>

465
00:17:39,530 --> 00:17:46,850
stuff<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> another thing to be</font><font color="#CCCCCC"> looking</font>

466
00:17:42,200 --> 00:17:48,380
for<font color="#E5E5E5"> the other interesting thing back</font>

467
00:17:46,850 --> 00:17:49,969
when we were looking<font color="#CCCCCC"> the live forensics</font>

468
00:17:48,380 --> 00:17:51,860
capture there was that docker logs

469
00:17:49,970 --> 00:17:53,990
command<font color="#CCCCCC"> we know</font><font color="#E5E5E5"> that could</font><font color="#CCCCCC"> be very</font>

470
00:17:51,860 --> 00:17:56,149
useful<font color="#CCCCCC"> especially if someone's running</font>

471
00:17:53,990 --> 00:17:57,980
<font color="#CCCCCC">what seems like a benign container but</font>

472
00:17:56,150 --> 00:18:02,270
then issuing<font color="#E5E5E5"> a bunch of commands</font><font color="#CCCCCC"> to it</font>

473
00:17:57,980 --> 00:18:04,610
<font color="#CCCCCC">over a shell session</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> TTY is connected</font>

474
00:18:02,270 --> 00:18:05,420
with a container<font color="#E5E5E5"> how do you grab</font><font color="#CCCCCC"> that</font>

475
00:18:04,610 --> 00:18:07,219
<font color="#E5E5E5">well</font>

476
00:18:05,420 --> 00:18:09,080
docker logs is just pulling that out<font color="#E5E5E5"> of</font>

477
00:18:07,220 --> 00:18:12,380
whatever log storage system docker was

478
00:18:09,080 --> 00:18:14,750
using<font color="#CCCCCC"> oftentimes they're a fault for log</font>

479
00:18:12,380 --> 00:18:16,370
storage is the<font color="#CCCCCC"> JSON backend which</font>

480
00:18:14,750 --> 00:18:19,250
basically<font color="#E5E5E5"> just dumps another file most</font>

481
00:18:16,370 --> 00:18:21,199
directory the container ID -<font color="#E5E5E5"> Jason dot</font>

482
00:18:19,250 --> 00:18:24,560
log which<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to have all</font><font color="#CCCCCC"> of those</font>

483
00:18:21,200 --> 00:18:27,380
logs<font color="#CCCCCC"> B</font><font color="#E5E5E5"> with something else but still</font>

484
00:18:24,560 --> 00:18:28,820
stored as a file<font color="#E5E5E5"> that log path value in</font>

485
00:18:27,380 --> 00:18:30,740
the config is going to tell you where

486
00:18:28,820 --> 00:18:33,230
you can<font color="#CCCCCC"> go</font><font color="#E5E5E5"> find those logs which once</font>

487
00:18:30,740 --> 00:18:34,970
again can be<font color="#E5E5E5"> very limiting</font><font color="#CCCCCC"> I believe for</font>

488
00:18:33,230 --> 00:18:38,780
the<font color="#E5E5E5"> Jason back and you also get</font>

489
00:18:34,970 --> 00:18:40,520
<font color="#CCCCCC">timestamps for when individual input and</font>

490
00:18:38,780 --> 00:18:41,960
output was done which also<font color="#E5E5E5"> can be</font><font color="#CCCCCC"> very</font>

491
00:18:40,520 --> 00:18:43,100
<font color="#CCCCCC">useful you're trying to build a timeline</font>

492
00:18:41,960 --> 00:18:44,930
and someone's done something<font color="#CCCCCC"> like Rana</font>

493
00:18:43,100 --> 00:18:45,889
<font color="#CCCCCC">based Linux container and you shoot a</font>

494
00:18:44,930 --> 00:18:49,220
<font color="#E5E5E5">bunch of commands</font><font color="#CCCCCC"> to try to gain</font>

495
00:18:45,890 --> 00:18:53,450
<font color="#E5E5E5">persistence somehow so that's all fine</font>

496
00:18:49,220 --> 00:18:56,540
<font color="#CCCCCC">and good</font><font color="#E5E5E5"> for metadata but what do we do</font>

497
00:18:53,450 --> 00:19:00,170
about<font color="#E5E5E5"> disk content and this is where</font>

498
00:18:56,540 --> 00:19:02,149
<font color="#E5E5E5">things get a lot</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> interesting so</font>

499
00:19:00,170 --> 00:19:04,220
you're staring at<font color="#CCCCCC"> that</font><font color="#E5E5E5"> disk someone's</font>

500
00:19:02,150 --> 00:19:05,810
hand of you in your<font color="#CCCCCC"> office and you want</font>

501
00:19:04,220 --> 00:19:07,880
<font color="#CCCCCC">to go find</font><font color="#E5E5E5"> out okay well what did the</font>

502
00:19:05,810 --> 00:19:10,850
file systems of these running containers

503
00:19:07,880 --> 00:19:13,190
look like what were<font color="#E5E5E5"> the</font><font color="#CCCCCC"> changes that</font>

504
00:19:10,850 --> 00:19:17,270
these containers made based off<font color="#CCCCCC"> of the</font>

505
00:19:13,190 --> 00:19:18,770
base image so this is another<font color="#CCCCCC"> picture</font>

506
00:19:17,270 --> 00:19:24,200
taken<font color="#E5E5E5"> from Dockers documentation of</font>

507
00:19:18,770 --> 00:19:27,410
roughly<font color="#E5E5E5"> what a docker container file</font>

508
00:19:24,200 --> 00:19:29,930
system storage<font color="#E5E5E5"> is going to look like</font>

509
00:19:27,410 --> 00:19:33,040
<font color="#E5E5E5">docker basically has all the</font><font color="#CCCCCC"> different</font>

510
00:19:29,930 --> 00:19:35,390
layers for an image those are read-only

511
00:19:33,040 --> 00:19:38,620
and then on top of<font color="#CCCCCC"> that they stick</font>

512
00:19:35,390 --> 00:19:41,210
<font color="#E5E5E5">another layer which is</font><font color="#CCCCCC"> read/write</font><font color="#E5E5E5"> and</font>

513
00:19:38,620 --> 00:19:42,739
any time the container wants to write

514
00:19:41,210 --> 00:19:44,630
something<font color="#CCCCCC"> it's going</font><font color="#E5E5E5"> to get written into</font>

515
00:19:42,740 --> 00:19:46,550
that<font color="#CCCCCC"> thin read/write layer any time it</font>

516
00:19:44,630 --> 00:19:50,120
reads something<font color="#E5E5E5"> it starts the top looks</font>

517
00:19:46,550 --> 00:19:52,980
<font color="#E5E5E5">is that file or block there yes great</font>

518
00:19:50,120 --> 00:19:54,870
pull it out if not keep<font color="#CCCCCC"> going</font><font color="#E5E5E5"> down</font>

519
00:19:52,980 --> 00:19:59,960
so you basically<font color="#CCCCCC"> have this stack of</font>

520
00:19:54,870 --> 00:20:02,610
layers of<font color="#E5E5E5"> file system or</font><font color="#CCCCCC"> disk data that</font>

521
00:19:59,960 --> 00:20:04,049
<font color="#E5E5E5">where each layer above kind of trumps</font>

522
00:20:02,610 --> 00:20:06,479
<font color="#CCCCCC">the layers below and each layers</font>

523
00:20:04,049 --> 00:20:08,460
basically<font color="#E5E5E5"> including changes on the</font>

524
00:20:06,480 --> 00:20:12,299
layers below<font color="#E5E5E5"> the tricky is</font><font color="#CCCCCC"> how's all</font>

525
00:20:08,460 --> 00:20:14,580
this going<font color="#E5E5E5"> to get stored so to consider</font>

526
00:20:12,299 --> 00:20:17,850
that let's<font color="#E5E5E5"> have a small motivating</font>

527
00:20:14,580 --> 00:20:21,749
example here is a<font color="#E5E5E5"> really small simple</font>

528
00:20:17,850 --> 00:20:23,158
<font color="#E5E5E5">docker container so the docker file</font>

529
00:20:21,749 --> 00:20:24,570
which is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> basically create the</font>

530
00:20:23,159 --> 00:20:27,090
image of what our container is gonna

531
00:20:24,570 --> 00:20:28,529
look<font color="#E5E5E5"> like does hold me a few things one</font>

532
00:20:27,090 --> 00:20:31,320
<font color="#E5E5E5">it says we're gonna base off of</font><font color="#CCCCCC"> the</font>

533
00:20:28,529 --> 00:20:32,909
<font color="#CCCCCC">alpine linux based image so we're</font>

534
00:20:31,320 --> 00:20:35,220
probably gonna go pull<font color="#CCCCCC"> that image down</font>

535
00:20:32,909 --> 00:20:36,659
from one of their repositories and then

536
00:20:35,220 --> 00:20:39,240
start<font color="#E5E5E5"> running these commands to build</font>

537
00:20:36,659 --> 00:20:40,889
the<font color="#CCCCCC"> image for our container</font><font color="#E5E5E5"> then since</font>

538
00:20:39,240 --> 00:20:43,169
we're this example we're basically

539
00:20:40,889 --> 00:20:45,869
simulating<font color="#E5E5E5"> a fruit basket</font><font color="#CCCCCC"> we're going to</font>

540
00:20:43,169 --> 00:20:48,299
add a lemons file and a<font color="#E5E5E5"> pears file to</font>

541
00:20:45,869 --> 00:20:50,850
the fruit directory then we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> add</font>

542
00:20:48,299 --> 00:20:52,769
an entry<font color="#E5E5E5"> point script to run when this</font>

543
00:20:50,850 --> 00:20:54,719
<font color="#E5E5E5">image is actually invoked as a container</font>

544
00:20:52,769 --> 00:20:58,249
and say hey look this is<font color="#E5E5E5"> the entry point</font>

545
00:20:54,720 --> 00:21:00,330
<font color="#E5E5E5">script go run it and the entry point</font>

546
00:20:58,249 --> 00:21:03,389
<font color="#E5E5E5">this will run when the container is</font>

547
00:21:00,330 --> 00:21:06,240
executed it's basically going to<font color="#E5E5E5"> add</font>

548
00:21:03,389 --> 00:21:09,449
apples to the<font color="#E5E5E5"> fruit basket</font><font color="#CCCCCC"> it's going to</font>

549
00:21:06,240 --> 00:21:11,639
<font color="#E5E5E5">change our note on lemons it's going to</font>

550
00:21:09,450 --> 00:21:13,860
add a dirty into the fruit<font color="#E5E5E5"> basket</font><font color="#CCCCCC"> and</font>

551
00:21:11,639 --> 00:21:16,379
then we're going<font color="#CCCCCC"> to for the sake of this</font>

552
00:21:13,860 --> 00:21:17,758
example<font color="#E5E5E5"> make sure all of those changes</font>

553
00:21:16,379 --> 00:21:19,590
are synchronized to disks and nothing

554
00:21:17,759 --> 00:21:20,759
just stays in memory then<font color="#E5E5E5"> we're probably</font>

555
00:21:19,590 --> 00:21:22,049
<font color="#E5E5E5">going to throw the durian out of the</font>

556
00:21:20,759 --> 00:21:23,249
fruit basket because<font color="#CCCCCC"> they looked</font>

557
00:21:22,049 --> 00:21:25,590
interesting we couldn't<font color="#E5E5E5"> handle the smell</font>

558
00:21:23,249 --> 00:21:27,090
<font color="#E5E5E5">and because we turned our back and</font><font color="#CCCCCC"> the</font>

559
00:21:25,590 --> 00:21:31,619
<font color="#E5E5E5">pears instantly</font><font color="#CCCCCC"> over ripened on</font><font color="#E5E5E5"> us we</font>

560
00:21:27,090 --> 00:21:34,070
get<font color="#E5E5E5"> rid</font><font color="#CCCCCC"> of those too so the with</font><font color="#E5E5E5"> this</font>

561
00:21:31,619 --> 00:21:37,918
motivating example<font color="#CCCCCC"> we'll then look at</font>

562
00:21:34,070 --> 00:21:39,389
what are<font color="#E5E5E5"> the results we get for overlay</font>

563
00:21:37,919 --> 00:21:42,659
<font color="#CCCCCC">two storage backends</font><font color="#E5E5E5"> and twice pepra</font>

564
00:21:39,389 --> 00:21:43,979
<font color="#CCCCCC">beckoned</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> how do we extract them</font><font color="#E5E5E5"> but</font>

565
00:21:42,659 --> 00:21:47,369
<font color="#E5E5E5">before we get to</font><font color="#CCCCCC"> that what is</font><font color="#E5E5E5"> it we're</font>

566
00:21:43,980 --> 00:21:48,720
expecting to<font color="#E5E5E5"> find well at minimum we're</font>

567
00:21:47,369 --> 00:21:50,908
gonna expect<font color="#E5E5E5"> to find these three</font>

568
00:21:48,720 --> 00:21:53,369
different<font color="#E5E5E5"> layers stored somewhere</font>

569
00:21:50,909 --> 00:21:56,190
somehow<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> bottom we're gonna expect</font>

570
00:21:53,369 --> 00:21:58,879
<font color="#E5E5E5">that Alpine image Alpine Linux base</font>

571
00:21:56,190 --> 00:22:01,799
image that we're building everything<font color="#E5E5E5"> on</font>

572
00:21:58,879 --> 00:22:04,439
somewhere<font color="#E5E5E5"> in the middle or of the stack</font>

573
00:22:01,799 --> 00:22:05,789
<font color="#CCCCCC">or at the top of</font><font color="#E5E5E5"> our image because</font>

574
00:22:04,440 --> 00:22:07,019
remember it's<font color="#E5E5E5"> gonna it's going</font>

575
00:22:05,789 --> 00:22:08,429
make multiple layers trying to build

576
00:22:07,019 --> 00:22:10,440
that thing<font color="#E5E5E5"> but when it's done building</font>

577
00:22:08,429 --> 00:22:11,940
the image we are going to expect<font color="#CCCCCC"> to find</font>

578
00:22:10,440 --> 00:22:15,419
a fruit directory that contains<font color="#E5E5E5"> only</font>

579
00:22:11,940 --> 00:22:17,909
lemons and pears<font color="#E5E5E5"> then when we run the</font>

580
00:22:15,419 --> 00:22:19,229
container<font color="#CCCCCC"> that thin read/write layer is</font>

581
00:22:17,909 --> 00:22:20,999
<font color="#CCCCCC">going to be redundant disk</font><font color="#E5E5E5"> and there</font>

582
00:22:19,229 --> 00:22:24,600
we're<font color="#E5E5E5"> gonna expect to find apples and</font>

583
00:22:20,999 --> 00:22:26,190
lemons but no pears<font color="#E5E5E5"> and at least no</font>

584
00:22:24,600 --> 00:22:27,418
remaining file for a journey<font color="#CCCCCC"> and but</font>

585
00:22:26,190 --> 00:22:29,159
<font color="#E5E5E5">maybe people were lucky</font><font color="#CCCCCC"> we'll be able</font><font color="#E5E5E5"> to</font>

586
00:22:27,419 --> 00:22:31,440
find evidence<font color="#CCCCCC"> that during existed</font><font color="#E5E5E5"> at</font>

587
00:22:29,159 --> 00:22:35,629
<font color="#CCCCCC">some point so this</font><font color="#E5E5E5"> is what we're</font>

588
00:22:31,440 --> 00:22:41,039
expecting<font color="#CCCCCC"> a fine as we go into this so</font>

589
00:22:35,629 --> 00:22:45,090
first storage back-end overlay<font color="#E5E5E5"> - this is</font>

590
00:22:41,039 --> 00:22:47,700
the default<font color="#CCCCCC"> insofar as</font><font color="#E5E5E5"> dr. can push it</font>

591
00:22:45,090 --> 00:22:50,580
this is what you're<font color="#E5E5E5"> going to run into</font>

592
00:22:47,700 --> 00:22:54,470
most of<font color="#E5E5E5"> the time in fact I</font><font color="#CCCCCC"> think right</font>

593
00:22:50,580 --> 00:22:56,580
now<font color="#E5E5E5"> for most all Linux distributions</font>

594
00:22:54,470 --> 00:22:58,859
<font color="#E5E5E5">except for some versions</font><font color="#CCCCCC"> of Red Hat</font>

595
00:22:56,580 --> 00:23:00,570
<font color="#E5E5E5">Linux and CentOS this is what we'll run</font>

596
00:22:58,859 --> 00:23:02,849
by default<font color="#E5E5E5"> unless you haven't have a</font>

597
00:23:00,570 --> 00:23:05,269
<font color="#CCCCCC">hosts file system</font><font color="#E5E5E5"> of like btrfs or ZFS</font>

598
00:23:02,849 --> 00:23:07,799
in which case it's gonna go use<font color="#CCCCCC"> that</font>

599
00:23:05,269 --> 00:23:11,639
it's based off of a<font color="#CCCCCC"> linux kernel module</font>

600
00:23:07,799 --> 00:23:15,989
called<font color="#E5E5E5"> overlay FS the way it works is</font>

601
00:23:11,639 --> 00:23:18,330
basically<font color="#E5E5E5"> by each layer is stored as a</font>

602
00:23:15,989 --> 00:23:21,599
directory and what that directory

603
00:23:18,330 --> 00:23:23,999
contains<font color="#E5E5E5"> is just other files and</font>

604
00:23:21,599 --> 00:23:26,939
directories<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are different from</font><font color="#E5E5E5"> the</font>

605
00:23:23,999 --> 00:23:29,220
previous<font color="#E5E5E5"> layer so if you've added a new</font>

606
00:23:26,940 --> 00:23:31,229
file<font color="#E5E5E5"> it's going to add a new file to</font>

607
00:23:29,220 --> 00:23:33,659
<font color="#CCCCCC">that different directory if you change a</font>

608
00:23:31,229 --> 00:23:34,979
new file<font color="#CCCCCC"> a</font><font color="#E5E5E5"> change an</font><font color="#CCCCCC"> existing file it's</font>

609
00:23:33,659 --> 00:23:36,330
<font color="#CCCCCC">going to add your change version of</font><font color="#E5E5E5"> that</font>

610
00:23:34,979 --> 00:23:38,159
file to the<font color="#E5E5E5"> different structure for that</font>

611
00:23:36,330 --> 00:23:39,478
<font color="#E5E5E5">layer</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> remove a file it's or</font>

612
00:23:38,159 --> 00:23:41,519
directory it's gonna find<font color="#E5E5E5"> some way</font><font color="#CCCCCC"> to</font>

613
00:23:39,479 --> 00:23:42,899
kind<font color="#CCCCCC"> of add</font><font color="#E5E5E5"> something kind of like a</font>

614
00:23:41,519 --> 00:23:45,629
<font color="#CCCCCC">tombstone</font><font color="#E5E5E5"> and they've got</font><font color="#CCCCCC"> different ways</font>

615
00:23:42,899 --> 00:23:46,978
<font color="#E5E5E5">of doing that</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> show that that</font>

616
00:23:45,629 --> 00:23:48,330
particular file of directory has<font color="#CCCCCC"> been</font>

617
00:23:46,979 --> 00:23:52,679
removed<font color="#CCCCCC"> as compared to the previous</font>

618
00:23:48,330 --> 00:23:54,299
<font color="#CCCCCC">layer what the overlay FS kernel module</font>

619
00:23:52,679 --> 00:23:55,859
does then is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you give it a bunch of</font>

620
00:23:54,299 --> 00:23:59,190
these different different<font color="#E5E5E5"> directories in</font>

621
00:23:55,859 --> 00:24:00,749
a mount<font color="#E5E5E5"> command it can basically layer</font>

622
00:23:59,190 --> 00:24:03,389
them all together<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like in that</font>

623
00:24:00,749 --> 00:24:05,190
<font color="#CCCCCC">picture</font><font color="#E5E5E5"> where at the top what you've</font>

624
00:24:03,389 --> 00:24:08,070
mounted looks like a nice flat file

625
00:24:05,190 --> 00:24:10,889
system<font color="#E5E5E5"> and anything you write gets</font>

626
00:24:08,070 --> 00:24:12,720
written<font color="#CCCCCC"> into the top layer</font><font color="#E5E5E5"> and only the</font>

627
00:24:10,889 --> 00:24:14,729
<font color="#E5E5E5">top layer</font><font color="#CCCCCC"> but all the reads are going to</font>

628
00:24:12,720 --> 00:24:16,019
check each layer from<font color="#E5E5E5"> the top down until</font>

629
00:24:14,730 --> 00:24:19,049
they find something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> matches</font><font color="#E5E5E5"> and</font>

630
00:24:16,019 --> 00:24:20,259
then hand it<font color="#E5E5E5"> back so in this particular</font>

631
00:24:19,049 --> 00:24:22,149
case

632
00:24:20,259 --> 00:24:24,009
when Dockers using that that means<font color="#E5E5E5"> that</font>

633
00:24:22,149 --> 00:24:25,629
all of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> overly FS layers are going</font>

634
00:24:24,009 --> 00:24:26,919
<font color="#CCCCCC">to be stored on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> hosts file system</font>

635
00:24:25,629 --> 00:24:29,590
<font color="#E5E5E5">and that's going to wind up being</font>

636
00:24:26,919 --> 00:24:30,729
interesting later on but of<font color="#E5E5E5"> course the</font>

637
00:24:29,590 --> 00:24:34,590
first<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> we have to</font><font color="#E5E5E5"> do is we have to</font>

638
00:24:30,729 --> 00:24:37,929
<font color="#E5E5E5">figure</font><font color="#CCCCCC"> out well how are</font><font color="#E5E5E5"> we gonna go find</font>

639
00:24:34,590 --> 00:24:39,549
these layers<font color="#E5E5E5"> and of course that's not</font>

640
00:24:37,929 --> 00:24:41,559
maybe quite<font color="#E5E5E5"> as easy as we like but it's</font>

641
00:24:39,549 --> 00:24:44,168
not<font color="#E5E5E5"> all that horribly painful</font><font color="#CCCCCC"> so here's</font>

642
00:24:41,559 --> 00:24:46,869
<font color="#CCCCCC">a directory tree basically we started</font>

643
00:24:44,169 --> 00:24:48,340
<font color="#CCCCCC">with</font><font color="#E5E5E5"> our live docker and there are two</font>

644
00:24:46,869 --> 00:24:50,978
<font color="#E5E5E5">children directories we'll be looking at</font>

645
00:24:48,340 --> 00:24:52,859
<font color="#E5E5E5">from their image and overlay to image on</font>

646
00:24:50,979 --> 00:24:55,210
the Left overlay<font color="#CCCCCC"> to is on the right</font>

647
00:24:52,859 --> 00:24:57,999
<font color="#CCCCCC">we've already seen other paths that</font>

648
00:24:55,210 --> 00:24:59,619
started with image<font color="#CCCCCC"> some kind of</font><font color="#E5E5E5"> back-end</font>

649
00:24:57,999 --> 00:25:00,909
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then something else well here the</font>

650
00:24:59,619 --> 00:25:04,389
back ends overlay<font color="#CCCCCC"> to so we're looking at</font>

651
00:25:00,909 --> 00:25:06,429
<font color="#CCCCCC">image overlay</font><font color="#E5E5E5"> to layer DB that layer the</font>

652
00:25:04,389 --> 00:25:08,439
DB directory is<font color="#E5E5E5"> basically the way docker</font>

653
00:25:06,429 --> 00:25:10,029
tries to keep track<font color="#CCCCCC"> of what are all the</font>

654
00:25:08,440 --> 00:25:13,539
layers<font color="#CCCCCC"> in all of the images and</font>

655
00:25:10,029 --> 00:25:15,940
containers<font color="#E5E5E5"> I have four containers this</font>

656
00:25:13,539 --> 00:25:18,009
<font color="#E5E5E5">directory called mount</font><font color="#CCCCCC"> and what will be</font>

657
00:25:15,940 --> 00:25:19,809
inside<font color="#CCCCCC"> that will be once again a whole</font>

658
00:25:18,009 --> 00:25:22,059
bunch of shot 256 hashes<font color="#CCCCCC"> that are the</font>

659
00:25:19,809 --> 00:25:24,009
container IDs for<font color="#E5E5E5"> the containers that or</font>

660
00:25:22,059 --> 00:25:25,479
had run<font color="#E5E5E5"> at some time there'll be a bunch</font>

661
00:25:24,009 --> 00:25:27,460
<font color="#E5E5E5">of files in there but the two in</font>

662
00:25:25,479 --> 00:25:29,710
particular<font color="#CCCCCC"> we're interested in is one</font>

663
00:25:27,460 --> 00:25:32,229
called<font color="#E5E5E5"> mount ID that's going to have a</font>

664
00:25:29,710 --> 00:25:34,179
shot 256 hash<font color="#E5E5E5"> and if we go look in</font><font color="#CCCCCC"> that</font>

665
00:25:32,229 --> 00:25:37,139
overlay<font color="#CCCCCC"> two directory under Lavar Walker</font>

666
00:25:34,179 --> 00:25:41,109
<font color="#E5E5E5">will find a directory with</font><font color="#CCCCCC"> the same</font>

667
00:25:37,139 --> 00:25:42,908
directory name is that hash then there's

668
00:25:41,109 --> 00:25:45,789
going<font color="#E5E5E5"> to be once again</font><font color="#CCCCCC"> and that layer DB</font>

669
00:25:42,909 --> 00:25:47,619
mounts<font color="#E5E5E5"> container ID directory a parent</font>

670
00:25:45,789 --> 00:25:50,710
file that parent file will contain

671
00:25:47,619 --> 00:25:53,379
another shot 256 hash<font color="#E5E5E5"> inside of it and</font>

672
00:25:50,710 --> 00:25:55,299
that<font color="#CCCCCC"> points to basically</font><font color="#E5E5E5"> the next layer</font>

673
00:25:53,379 --> 00:25:56,559
<font color="#E5E5E5">but since you're running container the</font>

674
00:25:55,299 --> 00:25:58,359
next layer is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be an image layer</font>

675
00:25:56,559 --> 00:25:59,769
the image layers aren't<font color="#E5E5E5"> in a mounts</font>

676
00:25:58,359 --> 00:26:04,720
directory they're in a shot<font color="#E5E5E5"> to 56</font>

677
00:25:59,769 --> 00:26:05,739
directory<font color="#E5E5E5"> why I don't know there would</font>

678
00:26:04,720 --> 00:26:07,599
<font color="#E5E5E5">have been no collisions if they were</font>

679
00:26:05,739 --> 00:26:09,359
<font color="#E5E5E5">using chalk 256 hashes for all of it but</font>

680
00:26:07,599 --> 00:26:11,320
<font color="#E5E5E5">this is the way</font><font color="#CCCCCC"> they wanted</font><font color="#E5E5E5"> to do it so</font>

681
00:26:09,359 --> 00:26:13,299
similar kind of structure<font color="#E5E5E5"> instead of a</font>

682
00:26:11,320 --> 00:26:15,178
mount<font color="#CCCCCC"> ID</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> cache ID file that points</font>

683
00:26:13,299 --> 00:26:18,489
over<font color="#E5E5E5"> okay this particular overlay</font><font color="#CCCCCC"> to</font>

684
00:26:15,179 --> 00:26:20,649
directory<font color="#E5E5E5"> and then a parent file will</font>

685
00:26:18,489 --> 00:26:22,840
point you watch the<font color="#E5E5E5"> next layer</font><font color="#CCCCCC"> to</font>

686
00:26:20,649 --> 00:26:24,728
basically find all the layers<font color="#E5E5E5"> in a given</font>

687
00:26:22,840 --> 00:26:26,080
container in its image<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just start</font>

688
00:26:24,729 --> 00:26:29,559
<font color="#E5E5E5">with a container</font><font color="#CCCCCC"> look for the parent</font>

689
00:26:26,080 --> 00:26:30,489
file<font color="#E5E5E5"> move on move on move on down until</font>

690
00:26:29,559 --> 00:26:31,779
you finally<font color="#CCCCCC"> create a directory that</font>

691
00:26:30,489 --> 00:26:32,990
doesn't have a parent file and that

692
00:26:31,779 --> 00:26:36,090
<font color="#E5E5E5">one's the</font>

693
00:26:32,990 --> 00:26:37,830
so here<font color="#CCCCCC"> basically I've kind of cut out</font>

694
00:26:36,090 --> 00:26:38,879
the<font color="#CCCCCC"> other layers that were not</font>

695
00:26:37,830 --> 00:26:40,500
interested<font color="#CCCCCC"> in and we just have the</font>

696
00:26:38,880 --> 00:26:42,360
container layer<font color="#CCCCCC"> at</font><font color="#E5E5E5"> that image layer and</font>

697
00:26:40,500 --> 00:26:44,790
then probably the<font color="#CCCCCC"> LP analytic space</font>

698
00:26:42,360 --> 00:26:47,669
layer over in the overlay<font color="#CCCCCC"> - directory</font>

699
00:26:44,790 --> 00:26:48,870
you'll have all of<font color="#CCCCCC"> those shot</font><font color="#E5E5E5"> 256</font>

700
00:26:47,670 --> 00:26:52,050
directories and<font color="#E5E5E5"> inside of them a</font>

701
00:26:48,870 --> 00:26:55,110
directory called<font color="#CCCCCC"> diff and that diff</font>

702
00:26:52,050 --> 00:26:58,580
directory is the<font color="#E5E5E5"> overlay</font><font color="#CCCCCC"> - or the</font>

703
00:26:55,110 --> 00:27:01,439
overlay a<font color="#E5E5E5"> vast difference directory so</font>

704
00:26:58,580 --> 00:27:03,659
given a container that<font color="#E5E5E5"> looks like this</font>

705
00:27:01,440 --> 00:27:07,860
<font color="#E5E5E5">we'll make note of the overlay</font><font color="#CCCCCC"> to</font>

706
00:27:03,660 --> 00:27:11,220
<font color="#E5E5E5">storage storage hash for the container</font>

707
00:27:07,860 --> 00:27:14,639
<font color="#CCCCCC">read route layer is a 2 3 5</font><font color="#E5E5E5"> - OH</font>

708
00:27:11,220 --> 00:27:15,930
if we want<font color="#E5E5E5"> to go say</font><font color="#CCCCCC"> alright that's fine</font>

709
00:27:14,640 --> 00:27:17,100
and dandy<font color="#E5E5E5"> I found all the different</font>

710
00:27:15,930 --> 00:27:18,570
<font color="#E5E5E5">structures but I want to see what the</font>

711
00:27:17,100 --> 00:27:22,459
container was looking at when<font color="#CCCCCC"> it was</font>

712
00:27:18,570 --> 00:27:24,330
running<font color="#E5E5E5"> we have to mount the thing so</font>

713
00:27:22,460 --> 00:27:26,100
thankfully that's<font color="#E5E5E5"> not too terribly</font>

714
00:27:24,330 --> 00:27:27,870
painful they make a directory you want

715
00:27:26,100 --> 00:27:29,429
<font color="#CCCCCC">to mount</font><font color="#E5E5E5"> it in let me say mounts the</font>

716
00:27:27,870 --> 00:27:31,439
type will be overlay the source<font color="#E5E5E5"> is</font>

717
00:27:29,430 --> 00:27:32,790
overlay and then because we don't care

718
00:27:31,440 --> 00:27:35,550
about<font color="#E5E5E5"> writings</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not gonna try</font><font color="#CCCCCC"> to</font>

719
00:27:32,790 --> 00:27:37,710
modify<font color="#E5E5E5"> it we can just</font><font color="#CCCCCC"> say for</font><font color="#E5E5E5"> options</font>

720
00:27:35,550 --> 00:27:39,090
it's<font color="#CCCCCC"> going to be read-only and instead</font>

721
00:27:37,710 --> 00:27:40,920
of trying<font color="#CCCCCC"> to give it</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> merge director in</font>

722
00:27:39,090 --> 00:27:42,179
an<font color="#E5E5E5"> upper directory</font><font color="#CCCCCC"> - let say here's just</font>

723
00:27:40,920 --> 00:27:43,470
a whole<font color="#E5E5E5"> bunch of lower directories we're</font>

724
00:27:42,180 --> 00:27:44,790
only going to<font color="#E5E5E5"> be reading so all you have</font>

725
00:27:43,470 --> 00:27:46,130
<font color="#E5E5E5">to do is just</font><font color="#CCCCCC"> staff</font><font color="#E5E5E5"> these together we're</font>

726
00:27:44,790 --> 00:27:50,520
<font color="#E5E5E5">not gonna worry about rights right now</font>

727
00:27:46,130 --> 00:27:52,110
<font color="#E5E5E5">and if we look back one</font><font color="#CCCCCC"> you'll see if</font>

728
00:27:50,520 --> 00:27:54,210
you<font color="#CCCCCC"> look at the three</font><font color="#E5E5E5"> different trim</font><font color="#CCCCCC"> kyo</font>

729
00:27:52,110 --> 00:27:57,120
<font color="#CCCCCC">-</font><font color="#E5E5E5"> hashes on the right side you'll see</font>

730
00:27:54,210 --> 00:27:59,070
<font color="#E5E5E5">here they are</font><font color="#CCCCCC"> again in that lower der</font>

731
00:27:57,120 --> 00:28:00,929
options section<font color="#E5E5E5"> listed in the same order</font>

732
00:27:59,070 --> 00:28:02,610
<font color="#CCCCCC">the first one is the container</font>

733
00:28:00,930 --> 00:28:05,040
<font color="#E5E5E5">read/write layer and then you go from</font>

734
00:28:02,610 --> 00:28:07,860
<font color="#E5E5E5">the image layers from top</font><font color="#CCCCCC"> down and you</font>

735
00:28:05,040 --> 00:28:10,260
mount it<font color="#E5E5E5"> and if we go look inside</font><font color="#CCCCCC"> that</font>

736
00:28:07,860 --> 00:28:12,300
mounted directory<font color="#CCCCCC"> lo and behold there</font>

737
00:28:10,260 --> 00:28:13,800
are<font color="#E5E5E5"> apples and</font><font color="#CCCCCC"> lemons</font><font color="#E5E5E5"> which is what we</font>

738
00:28:12,300 --> 00:28:17,580
expected<font color="#E5E5E5"> when the containers running</font>

739
00:28:13,800 --> 00:28:19,590
<font color="#E5E5E5">apples are there pears are missing so</font>

740
00:28:17,580 --> 00:28:23,340
that's nice<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> actually now take a</font>

741
00:28:19,590 --> 00:28:25,260
look at what the container itself was

742
00:28:23,340 --> 00:28:28,439
looking at<font color="#E5E5E5"> before someone pulled</font><font color="#CCCCCC"> the</font>

743
00:28:25,260 --> 00:28:31,680
plug but<font color="#E5E5E5"> let's say we want to look at</font>

744
00:28:28,440 --> 00:28:33,060
what the container would have had at the

745
00:28:31,680 --> 00:28:36,540
moment<font color="#CCCCCC"> it</font><font color="#E5E5E5"> was started the top image</font>

746
00:28:33,060 --> 00:28:37,620
<font color="#CCCCCC">layer well that's actually pretty</font><font color="#E5E5E5"> simple</font>

747
00:28:36,540 --> 00:28:39,149
in fact<font color="#E5E5E5"> the next slide is going to be</font>

748
00:28:37,620 --> 00:28:43,049
almost<font color="#CCCCCC"> exactly the same as this one</font><font color="#E5E5E5"> with</font>

749
00:28:39,150 --> 00:28:45,059
about<font color="#CCCCCC"> one change in the</font><font color="#E5E5E5"> mount</font><font color="#CCCCCC"> here we go</font>

750
00:28:43,049 --> 00:28:50,869
instead of three now there are two<font color="#E5E5E5"> we</font>

751
00:28:45,059 --> 00:28:53,428
just<font color="#CCCCCC"> took that that</font><font color="#E5E5E5"> very top a - 35 -</font><font color="#CCCCCC"> Oh</font>

752
00:28:50,869 --> 00:28:55,499
<font color="#CCCCCC">dip directory</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> was the container</font>

753
00:28:53,429 --> 00:28:57,029
<font color="#CCCCCC">read/write</font><font color="#E5E5E5"> layer and left it off now</font>

754
00:28:55,499 --> 00:28:59,369
it's<font color="#CCCCCC"> just the top image 1 all the way</font>

755
00:28:57,029 --> 00:29:00,659
<font color="#E5E5E5">down</font><font color="#CCCCCC"> and if we look inside that</font><font color="#E5E5E5"> amount</font>

756
00:28:59,369 --> 00:29:02,340
of directory<font color="#E5E5E5"> whatever fine well we find</font>

757
00:29:00,659 --> 00:29:03,480
lemons in<font color="#CCCCCC"> pairs</font><font color="#E5E5E5"> which is good that's</font>

758
00:29:02,340 --> 00:29:07,649
<font color="#E5E5E5">what we should find that's what the</font>

759
00:29:03,480 --> 00:29:09,629
image was set<font color="#E5E5E5"> at so that</font><font color="#CCCCCC"> means we can</font>

760
00:29:07,649 --> 00:29:11,879
now mount both the container what the

761
00:29:09,629 --> 00:29:13,379
container viewed and what the container

762
00:29:11,879 --> 00:29:15,539
started with and would<font color="#E5E5E5"> look at them side</font>

763
00:29:13,379 --> 00:29:16,709
by side<font color="#CCCCCC"> but a lot</font><font color="#E5E5E5"> of times when you're</font>

764
00:29:15,539 --> 00:29:17,639
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> that what you</font><font color="#CCCCCC"> really want to say</font>

765
00:29:16,710 --> 00:29:18,419
is well what's the<font color="#E5E5E5"> difference between</font>

766
00:29:17,639 --> 00:29:22,469
these<font color="#E5E5E5"> two</font>

767
00:29:18,419 --> 00:29:25,889
in that case<font color="#E5E5E5"> overlay FS actually made it</font>

768
00:29:22,470 --> 00:29:27,749
kind<font color="#E5E5E5"> of easy</font><font color="#CCCCCC"> for us because all these</font>

769
00:29:25,889 --> 00:29:29,939
dip trees are literally just<font color="#E5E5E5"> differences</font>

770
00:29:27,749 --> 00:29:33,330
in<font color="#CCCCCC"> between</font><font color="#E5E5E5"> layers we can</font><font color="#CCCCCC"> just go</font><font color="#E5E5E5"> look at</font>

771
00:29:29,940 --> 00:29:37,049
the different amount anything<font color="#E5E5E5"> so here is</font>

772
00:29:33,330 --> 00:29:38,519
the diff<font color="#E5E5E5"> directly for the fruit fruit</font>

773
00:29:37,049 --> 00:29:41,940
<font color="#E5E5E5">subdirectory in the container</font><font color="#CCCCCC"> read light</font>

774
00:29:38,519 --> 00:29:46,619
right<font color="#CCCCCC"> layer apples is there lemons is</font>

775
00:29:41,940 --> 00:29:48,769
there and pears is a character device

776
00:29:46,619 --> 00:29:51,539
with a major and minor<font color="#E5E5E5"> number of</font><font color="#CCCCCC"> 0</font>

777
00:29:48,769 --> 00:29:54,869
that's basically the way<font color="#E5E5E5"> the kernel</font>

778
00:29:51,539 --> 00:29:55,408
overlay FS<font color="#CCCCCC"> MA module denotes a file</font><font color="#E5E5E5"> has</font>

779
00:29:54,869 --> 00:29:57,149
been removed

780
00:29:55,409 --> 00:29:59,309
they just make these 0 0<font color="#E5E5E5"> character</font>

781
00:29:57,149 --> 00:30:01,439
devices<font color="#E5E5E5"> and then for directories the way</font>

782
00:29:59,309 --> 00:30:02,730
they make<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that removed is</font><font color="#E5E5E5"> they'll</font>

783
00:30:01,440 --> 00:30:05,460
just<font color="#CCCCCC"> to get an extended attribute on</font>

784
00:30:02,730 --> 00:30:07,289
them<font color="#CCCCCC"> so</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> we've figured</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> how</font>

785
00:30:05,460 --> 00:30:08,279
<font color="#CCCCCC">to mount</font><font color="#E5E5E5"> the container</font><font color="#CCCCCC"> read/write</font><font color="#E5E5E5"> layer</font>

786
00:30:07,289 --> 00:30:11,129
we figured out how<font color="#CCCCCC"> to mount</font><font color="#E5E5E5"> the image</font>

787
00:30:08,279 --> 00:30:12,570
<font color="#E5E5E5">layer we can realize</font><font color="#CCCCCC"> but a lot of</font><font color="#E5E5E5"> times</font>

788
00:30:11,129 --> 00:30:13,709
<font color="#E5E5E5">we'll exactly what we wants just by</font>

789
00:30:12,570 --> 00:30:15,689
looking<font color="#E5E5E5"> at this diff directory</font><font color="#CCCCCC"> without</font>

790
00:30:13,710 --> 00:30:18,210
doing<font color="#E5E5E5"> anything at all what</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that</font>

791
00:30:15,690 --> 00:30:19,649
<font color="#CCCCCC">during remember the container entry</font>

792
00:30:18,210 --> 00:30:21,659
point script creates a file called

793
00:30:19,649 --> 00:30:22,918
during in and then after<font color="#CCCCCC"> it's sink</font>

794
00:30:21,659 --> 00:30:26,580
changes to disk promptly turns around

795
00:30:22,919 --> 00:30:27,600
and deletes it<font color="#CCCCCC"> sometimes especially if</font>

796
00:30:26,580 --> 00:30:29,369
you're<font color="#E5E5E5"> dealing with a container that was</font>

797
00:30:27,600 --> 00:30:30,600
created<font color="#CCCCCC"> by a malicious actor they're</font>

798
00:30:29,369 --> 00:30:32,100
probably going to<font color="#E5E5E5"> pull some</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> down</font>

799
00:30:30,600 --> 00:30:33,269
the<font color="#CCCCCC"> disk make use of them in memory and</font>

800
00:30:32,100 --> 00:30:35,309
<font color="#E5E5E5">then promptly delete them</font><font color="#CCCCCC"> from disk</font>

801
00:30:33,269 --> 00:30:37,049
<font color="#E5E5E5">we're not going to</font><font color="#CCCCCC"> find out at a lower</font>

802
00:30:35,309 --> 00:30:39,629
image<font color="#E5E5E5"> layer and we're not going to find</font>

803
00:30:37,049 --> 00:30:41,129
<font color="#CCCCCC">out</font><font color="#E5E5E5"> on the file system for the container</font>

804
00:30:39,629 --> 00:30:44,998
layer is there some way we<font color="#CCCCCC"> can still get</font>

805
00:30:41,129 --> 00:30:46,678
<font color="#CCCCCC">that</font><font color="#E5E5E5"> well if this were a</font><font color="#CCCCCC"> normal host you</font>

806
00:30:44,999 --> 00:30:48,989
could go<font color="#E5E5E5"> about using normal forensic</font>

807
00:30:46,679 --> 00:30:50,669
tools to try to see<font color="#CCCCCC"> okay well the file</font>

808
00:30:48,989 --> 00:30:52,480
<font color="#E5E5E5">may have been deleted but</font><font color="#CCCCCC"> as the inode</font>

809
00:30:50,669 --> 00:30:55,520
<font color="#CCCCCC">4 it's still lying around somewhere</font>

810
00:30:52,480 --> 00:30:59,029
remember back<font color="#E5E5E5"> when we introduced overlay</font>

811
00:30:55,520 --> 00:31:00,620
<font color="#E5E5E5">to</font><font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> we noted</font><font color="#CCCCCC"> that since</font><font color="#E5E5E5"> these</font>

812
00:30:59,029 --> 00:31:03,860
are just directories of differences

813
00:31:00,620 --> 00:31:05,360
everything's on the<font color="#CCCCCC"> host file system in</font>

814
00:31:03,860 --> 00:31:09,260
the event<font color="#CCCCCC"> that something like this</font>

815
00:31:05,360 --> 00:31:10,428
happens<font color="#E5E5E5"> and a containers been</font>

816
00:31:09,260 --> 00:31:11,900
compromised or<font color="#E5E5E5"> a host with containers</font>

817
00:31:10,429 --> 00:31:14,480
<font color="#CCCCCC">has</font><font color="#E5E5E5"> been compromised there's still</font><font color="#CCCCCC"> very</font>

818
00:31:11,900 --> 00:31:17,029
good<font color="#CCCCCC"> merit and grabbing the entire disk</font>

819
00:31:14,480 --> 00:31:19,220
image for the<font color="#CCCCCC"> host because in</font><font color="#E5E5E5"> this</font>

820
00:31:17,029 --> 00:31:22,429
<font color="#E5E5E5">particular case if you've done that you</font>

821
00:31:19,220 --> 00:31:24,260
<font color="#E5E5E5">can</font><font color="#CCCCCC"> go actually</font><font color="#E5E5E5"> find the durian in this</font>

822
00:31:22,429 --> 00:31:26,450
case I'm<font color="#CCCCCC"> just using two commands from</font>

823
00:31:24,260 --> 00:31:29,000
sleuth kit<font color="#E5E5E5"> one where I'm saying okay</font>

824
00:31:26,450 --> 00:31:32,270
here's here's my<font color="#E5E5E5"> host file system device</font>

825
00:31:29,000 --> 00:31:36,110
<font color="#CCCCCC">device da1 and here's the full directory</font>

826
00:31:32,270 --> 00:31:38,450
to where<font color="#E5E5E5"> the fruit directory in the</font>

827
00:31:36,110 --> 00:31:40,250
overlay<font color="#CCCCCC"> to</font><font color="#E5E5E5"> diff for the container</font>

828
00:31:38,450 --> 00:31:42,559
<font color="#CCCCCC">readwrite layer is what</font><font color="#E5E5E5"> was the eye note</font>

829
00:31:40,250 --> 00:31:44,450
for<font color="#CCCCCC"> that great</font><font color="#E5E5E5"> now it gives me the eye</font>

830
00:31:42,559 --> 00:31:46,039
note<font color="#E5E5E5"> then I use another command I say</font><font color="#CCCCCC"> ok</font>

831
00:31:44,450 --> 00:31:48,140
here's<font color="#E5E5E5"> the device here's this inode list</font>

832
00:31:46,039 --> 00:31:49,760
the files<font color="#CCCCCC"> internet and by the way let me</font>

833
00:31:48,140 --> 00:31:51,740
know there happens to be<font color="#E5E5E5"> anything still</font>

834
00:31:49,760 --> 00:31:53,750
dangling<font color="#CCCCCC"> around they got deleted and lo</font>

835
00:31:51,740 --> 00:31:58,850
<font color="#E5E5E5">and behold there's the durian still</font>

836
00:31:53,750 --> 00:32:01,970
there so since overlay<font color="#CCCCCC"> 2 operates on a</font>

837
00:31:58,850 --> 00:32:05,240
<font color="#CCCCCC">filesystem</font><font color="#E5E5E5"> level in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> well on a</font>

838
00:32:01,970 --> 00:32:07,210
file level<font color="#E5E5E5"> in order to grab</font><font color="#CCCCCC"> information</font>

839
00:32:05,240 --> 00:32:09,770
like this we're still<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> need a</font>

840
00:32:07,210 --> 00:32:15,320
full<font color="#CCCCCC"> forensic image of the underlying</font>

841
00:32:09,770 --> 00:32:18,980
host disk now the nice<font color="#CCCCCC"> thing about all</font>

842
00:32:15,320 --> 00:32:21,230
<font color="#E5E5E5">this is a couple of months ago the</font>

843
00:32:18,980 --> 00:32:23,210
Google search for<font color="#E5E5E5"> what do you do with</font>

844
00:32:21,230 --> 00:32:25,700
docker storage forensics got slightly

845
00:32:23,210 --> 00:32:27,500
<font color="#CCCCCC">more useful a guy named Romain</font><font color="#E5E5E5"> Galen</font>

846
00:32:25,700 --> 00:32:28,549
over at Google<font color="#E5E5E5"> created a nice little</font>

847
00:32:27,500 --> 00:32:32,510
<font color="#E5E5E5">Python program that will basically</font>

848
00:32:28,549 --> 00:32:34,879
<font color="#E5E5E5">automate mounting overlay to and the</font>

849
00:32:32,510 --> 00:32:37,190
older overlay and a<font color="#E5E5E5"> ufs storage backends</font>

850
00:32:34,880 --> 00:32:40,460
it's called docker explored you can find

851
00:32:37,190 --> 00:32:42,799
it in Google's github github repo there

852
00:32:40,460 --> 00:32:43,760
so if you ever<font color="#E5E5E5"> find yourself in position</font>

853
00:32:42,799 --> 00:32:46,639
with all you really want to do is<font color="#E5E5E5"> just</font>

854
00:32:43,760 --> 00:32:52,190
mount the things<font color="#CCCCCC"> this might be</font><font color="#E5E5E5"> an</font>

855
00:32:46,640 --> 00:32:54,409
<font color="#CCCCCC">excellent place to start so this brings</font>

856
00:32:52,190 --> 00:32:55,730
us<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the second and slightly</font><font color="#E5E5E5"> more</font>

857
00:32:54,409 --> 00:32:57,260
interesting back end which is device

858
00:32:55,730 --> 00:32:58,789
mapper<font color="#CCCCCC"> this is the one that</font><font color="#E5E5E5"> you're</font>

859
00:32:57,260 --> 00:33:01,610
probably<font color="#CCCCCC"> not going</font><font color="#E5E5E5"> to run into</font>

860
00:32:58,789 --> 00:33:04,070
unless<font color="#E5E5E5"> you're handed a host image that</font>

861
00:33:01,610 --> 00:33:07,699
was either<font color="#E5E5E5"> Red Hat Enterprise Linux</font>

862
00:33:04,070 --> 00:33:08,899
toss up<font color="#CCCCCC"> to I</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> the very most</font>

863
00:33:07,700 --> 00:33:14,390
recent version of Red Hat<font color="#E5E5E5"> Enterprise</font>

864
00:33:08,900 --> 00:33:16,790
Linux<font color="#E5E5E5"> the way this one works is by using</font>

865
00:33:14,390 --> 00:33:19,400
the<font color="#E5E5E5"> Linux kernel device mapper system</font>

866
00:33:16,790 --> 00:33:21,970
and the Linux volume management<font color="#E5E5E5"> system</font>

867
00:33:19,400 --> 00:33:24,640
or logical volume<font color="#E5E5E5"> management system</font>

868
00:33:21,970 --> 00:33:26,450
<font color="#CCCCCC">basically what docker does is it says</font><font color="#E5E5E5"> ok</font>

869
00:33:24,640 --> 00:33:27,950
<font color="#CCCCCC">we're not going to store things</font><font color="#E5E5E5"> in the</font>

870
00:33:26,450 --> 00:33:30,860
<font color="#CCCCCC">hosts file system</font><font color="#E5E5E5"> you're gonna give me</font>

871
00:33:27,950 --> 00:33:33,440
an actual<font color="#CCCCCC"> disk for this thing we're</font>

872
00:33:30,860 --> 00:33:36,919
gonna trust that<font color="#E5E5E5"> disk or disks</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> LVM</font>

873
00:33:33,440 --> 00:33:40,070
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to go make a volume</font><font color="#E5E5E5"> on</font>

874
00:33:36,920 --> 00:33:42,590
that<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is going to be the base</font>

875
00:33:40,070 --> 00:33:44,780
device what they're gonna do on that

876
00:33:42,590 --> 00:33:46,189
base device is they're<font color="#CCCCCC"> going to go set</font>

877
00:33:44,780 --> 00:33:48,050
up a<font color="#E5E5E5"> filesystem</font>

878
00:33:46,190 --> 00:33:50,120
<font color="#E5E5E5">in a lot of cases I've</font><font color="#CCCCCC"> seen that file</font>

879
00:33:48,050 --> 00:33:53,060
systems<font color="#CCCCCC"> XFS</font><font color="#E5E5E5"> and they're gonna leave a</font>

880
00:33:50,120 --> 00:33:56,270
completely blank<font color="#E5E5E5"> then every time they</font>

881
00:33:53,060 --> 00:34:00,770
need<font color="#CCCCCC"> to make a new layer they're going</font>

882
00:33:56,270 --> 00:34:02,060
<font color="#CCCCCC">to snapshot</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> base device and if they</font>

883
00:34:00,770 --> 00:34:04,670
wanna<font color="#CCCCCC"> make a layer on that layer they're</font>

884
00:34:02,060 --> 00:34:05,840
gonna snapshot the first layer<font color="#CCCCCC"> to get</font>

885
00:34:04,670 --> 00:34:07,700
<font color="#E5E5E5">the second layer and have the new</font>

886
00:34:05,840 --> 00:34:08,870
changes<font color="#E5E5E5"> there all the way up till</font>

887
00:34:07,700 --> 00:34:11,659
they've built all the layers for<font color="#CCCCCC"> an</font>

888
00:34:08,870 --> 00:34:13,520
image when they run a container they're

889
00:34:11,659 --> 00:34:15,949
gonna snapshot the top device of the

890
00:34:13,520 --> 00:34:18,409
image and<font color="#E5E5E5"> get a new device that</font><font color="#CCCCCC"> will be</font>

891
00:34:15,949 --> 00:34:21,500
used<font color="#CCCCCC"> for storing</font><font color="#E5E5E5"> all the rights from the</font>

892
00:34:18,409 --> 00:34:23,719
<font color="#E5E5E5">container so in this case instead of</font>

893
00:34:21,500 --> 00:34:25,070
<font color="#CCCCCC">dealing with files</font><font color="#E5E5E5"> and directories</font><font color="#CCCCCC"> we're</font>

894
00:34:23,719 --> 00:34:27,020
going to be dealing<font color="#CCCCCC"> with block devices</font>

895
00:34:25,070 --> 00:34:28,880
and instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> finding the data in</font>

896
00:34:27,020 --> 00:34:30,860
convenient places under<font color="#E5E5E5"> part of docker</font>

897
00:34:28,880 --> 00:34:33,290
we're gonna have to go<font color="#E5E5E5"> mess around with</font>

898
00:34:30,860 --> 00:34:35,960
twice mapper<font color="#CCCCCC"> and thin pool snapshots to</font>

899
00:34:33,290 --> 00:34:37,699
be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to get our hands on</font><font color="#CCCCCC"> it but</font>

900
00:34:35,960 --> 00:34:39,260
<font color="#E5E5E5">before we can do any of</font><font color="#CCCCCC"> that we still</font>

901
00:34:37,699 --> 00:34:42,949
have the same problem how do we find the

902
00:34:39,260 --> 00:34:46,730
layers in this case thankfully it's more

903
00:34:42,949 --> 00:34:51,199
or<font color="#CCCCCC"> less exactly the way it worked</font><font color="#E5E5E5"> with</font>

904
00:34:46,730 --> 00:34:52,639
overlay<font color="#CCCCCC"> OS except we note here</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> our</font>

905
00:34:51,199 --> 00:34:54,889
<font color="#CCCCCC">live docker image</font><font color="#E5E5E5"> instead of saying</font>

906
00:34:52,639 --> 00:34:57,020
overlay<font color="#CCCCCC"> to now it says device mapper</font><font color="#E5E5E5"> but</font>

907
00:34:54,889 --> 00:34:58,970
everything under that<font color="#CCCCCC"> on the image left</font>

908
00:34:57,020 --> 00:35:01,490
side is remains the same it's<font color="#E5E5E5"> still the</font>

909
00:34:58,970 --> 00:35:03,859
same layer DB directory structure<font color="#E5E5E5"> still</font>

910
00:35:01,490 --> 00:35:05,390
the same parent pointers to each layer

911
00:35:03,860 --> 00:35:07,370
<font color="#E5E5E5">beneath still the same mount ID and</font>

912
00:35:05,390 --> 00:35:09,830
cache IDs what's<font color="#E5E5E5"> different on the right</font>

913
00:35:07,370 --> 00:35:11,480
<font color="#E5E5E5">is instead</font><font color="#CCCCCC"> of having an overlay -</font>

914
00:35:09,830 --> 00:35:13,730
directory<font color="#E5E5E5"> and a bunch of diff</font>

915
00:35:11,480 --> 00:35:15,410
directories underneath<font color="#E5E5E5"> we have a device</font>

916
00:35:13,730 --> 00:35:18,020
mapper directory with a metadata

917
00:35:15,410 --> 00:35:22,549
subdirectory<font color="#CCCCCC"> and a bunch of</font><font color="#E5E5E5"> files</font>

918
00:35:18,020 --> 00:35:23,930
that each contain metadata we're going

919
00:35:22,550 --> 00:35:26,450
to need to be able<font color="#E5E5E5"> to try to get our</font>

920
00:35:23,930 --> 00:35:30,319
<font color="#E5E5E5">hands on the virtual block device for a</font>

921
00:35:26,450 --> 00:35:31,549
given layer<font color="#E5E5E5"> before we get our hands on</font>

922
00:35:30,320 --> 00:35:35,120
<font color="#CCCCCC">it first</font><font color="#E5E5E5"> we're gonna have to look</font><font color="#CCCCCC"> at how</font>

923
00:35:31,550 --> 00:35:36,260
we go about<font color="#E5E5E5"> doing that</font><font color="#CCCCCC"> so this the</font>

924
00:35:35,120 --> 00:35:38,810
nomenclature<font color="#E5E5E5"> here can be a little</font><font color="#CCCCCC"> bit</font>

925
00:35:36,260 --> 00:35:40,310
<font color="#E5E5E5">confusing</font><font color="#CCCCCC"> a DM set</font><font color="#E5E5E5"> of create</font><font color="#CCCCCC"> makes you</font>

926
00:35:38,810 --> 00:35:43,490
think<font color="#E5E5E5"> okay well I'm about to create a</font>

927
00:35:40,310 --> 00:35:46,880
<font color="#CCCCCC">new thing pool</font><font color="#E5E5E5"> layer</font><font color="#CCCCCC"> know we're creating</font>

928
00:35:43,490 --> 00:35:50,209
the device for an existing<font color="#CCCCCC"> thing pool</font>

929
00:35:46,880 --> 00:35:51,530
volume<font color="#CCCCCC"> DM setups the command you</font>

930
00:35:50,210 --> 00:35:53,570
generally use to interact the device

931
00:35:51,530 --> 00:35:56,060
mapper back-end<font color="#E5E5E5"> in this case we're going</font>

932
00:35:53,570 --> 00:35:57,890
to<font color="#E5E5E5"> create a new device table as the</font>

933
00:35:56,060 --> 00:35:59,570
option you hand<font color="#E5E5E5"> to basically say okay</font>

934
00:35:57,890 --> 00:36:00,529
here's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> information to go with and</font>

935
00:35:59,570 --> 00:36:03,530
then we're<font color="#CCCCCC"> gonna have</font><font color="#E5E5E5"> to give it a</font>

936
00:36:00,530 --> 00:36:07,750
couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> a starting sector off</font>

937
00:36:03,530 --> 00:36:13,540
of that base volume the size and sectors

938
00:36:07,750 --> 00:36:16,940
that this virtual<font color="#E5E5E5"> snapshot device</font>

939
00:36:13,540 --> 00:36:18,830
extends<font color="#E5E5E5"> it's gonna be a thin snapshot so</font>

940
00:36:16,940 --> 00:36:20,810
we say thin<font color="#E5E5E5"> then for thin we have to</font>

941
00:36:18,830 --> 00:36:23,000
give it what's the base pool device

942
00:36:20,810 --> 00:36:27,560
we're doing all of<font color="#E5E5E5"> this off of and</font>

943
00:36:23,000 --> 00:36:30,470
what's the volume ID so all<font color="#E5E5E5"> of these</font>

944
00:36:27,560 --> 00:36:35,270
little<font color="#CCCCCC"> layer snapshots are gonna have</font>

945
00:36:30,470 --> 00:36:36,549
different<font color="#E5E5E5"> volume IDs so</font><font color="#CCCCCC"> how are we gonna</font>

946
00:36:35,270 --> 00:36:41,540
go about<font color="#E5E5E5"> doing this</font>

947
00:36:36,550 --> 00:36:43,580
well to access one<font color="#CCCCCC"> of these layers first</font>

948
00:36:41,540 --> 00:36:48,380
<font color="#CCCCCC">of all note the asterisk you actually</font>

949
00:36:43,580 --> 00:36:51,049
have to<font color="#E5E5E5"> have the docker volume</font><font color="#CCCCCC"> LVM mount</font>

950
00:36:48,380 --> 00:36:53,540
activated<font color="#CCCCCC"> that's a little outside the</font>

951
00:36:51,050 --> 00:36:54,860
scope of<font color="#E5E5E5"> this talk but</font><font color="#CCCCCC"> if you run</font><font color="#E5E5E5"> into</font>

952
00:36:53,540 --> 00:36:57,200
<font color="#E5E5E5">that and</font><font color="#CCCCCC"> you have some</font><font color="#E5E5E5"> difficulty just</font>

953
00:36:54,860 --> 00:36:58,720
<font color="#E5E5E5">google forensics wiki LVM</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> there's a</font>

954
00:36:57,200 --> 00:37:01,939
<font color="#E5E5E5">very nice explanation on how to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> it</font>

955
00:36:58,720 --> 00:37:04,819
well that will<font color="#CCCCCC"> give</font><font color="#E5E5E5"> us will be a device</font>

956
00:37:01,940 --> 00:37:09,050
called slash dev docker thin pool so

957
00:37:04,820 --> 00:37:11,240
that's the that's<font color="#CCCCCC"> the base device</font><font color="#E5E5E5"> that</font>

958
00:37:09,050 --> 00:37:13,760
<font color="#E5E5E5">metadata</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the branch on the</font>

959
00:37:11,240 --> 00:37:16,490
<font color="#E5E5E5">right we saw</font><font color="#CCCCCC"> slice back that's</font><font color="#E5E5E5"> a JSON</font>

960
00:37:13,760 --> 00:37:17,660
file<font color="#E5E5E5"> it's got a couple of fields</font><font color="#CCCCCC"> in it</font>

961
00:37:16,490 --> 00:37:19,669
the two were interested in<font color="#E5E5E5"> are the</font>

962
00:37:17,660 --> 00:37:21,049
device ID<font color="#E5E5E5"> and the size because that</font>

963
00:37:19,670 --> 00:37:23,510
gives us the remaining<font color="#CCCCCC"> information we</font>

964
00:37:21,050 --> 00:37:25,370
need<font color="#E5E5E5"> to hand</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> EM setup so whilst</font>

965
00:37:23,510 --> 00:37:28,100
hand<font color="#CCCCCC"> iam set up create give it whatever</font>

966
00:37:25,370 --> 00:37:29,630
name we<font color="#E5E5E5"> want for this new device table</font>

967
00:37:28,100 --> 00:37:31,400
it's always<font color="#E5E5E5"> going to start at the zero</font>

968
00:37:29,630 --> 00:37:33,200
and then the<font color="#E5E5E5"> size</font>

969
00:37:31,400 --> 00:37:35,599
<font color="#E5E5E5">is the size from the metadata file</font>

970
00:37:33,200 --> 00:37:38,118
<font color="#E5E5E5">divided by 512</font><font color="#CCCCCC"> and that's because device</font>

971
00:37:35,599 --> 00:37:40,910
mapper always uses sectors of<font color="#E5E5E5"> 512</font><font color="#CCCCCC"> bytes</font>

972
00:37:38,119 --> 00:37:43,039
because Dockers record in size and bytes

973
00:37:40,910 --> 00:37:46,098
<font color="#CCCCCC">and device member wants it in sectors we</font>

974
00:37:43,039 --> 00:37:49,220
have to divide by 512 thin<font color="#CCCCCC"> dev docker</font>

975
00:37:46,099 --> 00:37:51,289
thin pool<font color="#CCCCCC"> and then the</font><font color="#E5E5E5"> most important</font>

976
00:37:49,220 --> 00:37:53,959
<font color="#E5E5E5">part to figure out which which layer are</font>

977
00:37:51,289 --> 00:37:57,170
we getting is<font color="#E5E5E5"> that device ID once you've</font>

978
00:37:53,960 --> 00:37:59,809
done that<font color="#E5E5E5"> what you'll have is a regular</font>

979
00:37:57,170 --> 00:38:01,339
ordinary<font color="#E5E5E5"> Linux block device</font><font color="#CCCCCC"> just like</font>

980
00:37:59,809 --> 00:38:04,910
<font color="#CCCCCC">you would</font><font color="#E5E5E5"> have for physical hard drive</font>

981
00:38:01,339 --> 00:38:06,349
<font color="#E5E5E5">sitting at dev Macker dev mapper DK my</font>

982
00:38:04,910 --> 00:38:08,000
container and if you look at it with

983
00:38:06,349 --> 00:38:12,829
file say hey<font color="#E5E5E5"> look this</font><font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> except</font><font color="#CCCCCC"> as</font>

984
00:38:08,000 --> 00:38:15,579
file system so at this point<font color="#CCCCCC"> gaining</font>

985
00:38:12,829 --> 00:38:17,900
access to<font color="#E5E5E5"> the data is fairly mundane</font>

986
00:38:15,579 --> 00:38:20,599
<font color="#CCCCCC">make it ready</font><font color="#E5E5E5"> make a directory to</font><font color="#CCCCCC"> mount</font>

987
00:38:17,900 --> 00:38:22,039
<font color="#CCCCCC">it on mount the device</font><font color="#E5E5E5"> on to the</font>

988
00:38:20,599 --> 00:38:24,710
directory<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want with one little</font>

989
00:38:22,039 --> 00:38:26,299
<font color="#CCCCCC">caveat if you try to do this twice</font><font color="#E5E5E5"> at</font>

990
00:38:24,710 --> 00:38:29,000
<font color="#E5E5E5">the same time the second time is</font>

991
00:38:26,299 --> 00:38:31,190
<font color="#E5E5E5">probably gonna fail unless you put this</font>

992
00:38:29,000 --> 00:38:32,930
<font color="#E5E5E5">no</font><font color="#CCCCCC"> UUID option in and the reason for</font>

993
00:38:31,190 --> 00:38:35,240
that is remember they had that base

994
00:38:32,930 --> 00:38:37,430
device at the<font color="#CCCCCC"> bottom and they put a</font>

995
00:38:35,240 --> 00:38:38,598
<font color="#E5E5E5">filesystem there that's empty and from</font>

996
00:38:37,430 --> 00:38:40,819
that point<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> just snapshotting</font>

997
00:38:38,599 --> 00:38:43,190
<font color="#CCCCCC">up</font><font color="#E5E5E5"> well the filesystem is gonna have a</font>

998
00:38:40,819 --> 00:38:44,270
UUID<font color="#CCCCCC"> built into it and all the snap</font>

999
00:38:43,190 --> 00:38:46,849
shadow file systems are<font color="#E5E5E5"> going to have</font>

1000
00:38:44,270 --> 00:38:49,730
the same<font color="#CCCCCC"> UUID built into it so when you</font>

1001
00:38:46,849 --> 00:38:51,260
go try to mount the<font color="#CCCCCC"> XFS filesystem once</font>

1002
00:38:49,730 --> 00:38:52,910
it's like great yeah this<font color="#E5E5E5"> you IDs not</font>

1003
00:38:51,260 --> 00:38:54,740
<font color="#E5E5E5">use we're good then you try</font><font color="#CCCCCC"> to mount a</font>

1004
00:38:52,910 --> 00:38:56,690
different one<font color="#E5E5E5"> it's like no no</font><font color="#CCCCCC"> you</font>

1005
00:38:54,740 --> 00:38:59,839
already melted that and you have to say

1006
00:38:56,690 --> 00:39:01,430
well actually we're kind<font color="#E5E5E5"> of breaking</font>

1007
00:38:59,839 --> 00:39:03,288
your expectations for how universal this

1008
00:39:01,430 --> 00:39:05,779
universally unique identifier<font color="#E5E5E5"> is it's</font>

1009
00:39:03,289 --> 00:39:09,079
<font color="#CCCCCC">actually different trust me just ignore</font>

1010
00:39:05,779 --> 00:39:10,609
that it's<font color="#CCCCCC"> ok so if you leave</font><font color="#E5E5E5"> that off</font>

1011
00:39:09,079 --> 00:39:11,660
and<font color="#E5E5E5"> you run them out the second time to</font>

1012
00:39:10,609 --> 00:39:12,710
try to<font color="#E5E5E5"> get at a different layer and you</font>

1013
00:39:11,660 --> 00:39:14,750
get<font color="#E5E5E5"> this error that makes it sound like</font>

1014
00:39:12,710 --> 00:39:18,230
it's corrupt<font color="#E5E5E5"> it's probably not</font><font color="#CCCCCC"> just at</font>

1015
00:39:14,750 --> 00:39:20,809
<font color="#CCCCCC">that on alright so</font><font color="#E5E5E5"> that's how we got got</font>

1016
00:39:18,230 --> 00:39:22,369
at the the container<font color="#E5E5E5"> read/write layer</font>

1017
00:39:20,809 --> 00:39:27,740
sure enough we've got<font color="#E5E5E5"> apples and lemons</font>

1018
00:39:22,369 --> 00:39:30,440
<font color="#CCCCCC">so what can</font><font color="#E5E5E5"> we do from here well what we</font>

1019
00:39:27,740 --> 00:39:32,000
have<font color="#CCCCCC"> at this point are these thin pool</font>

1020
00:39:30,440 --> 00:39:34,700
devices we<font color="#CCCCCC"> can get one for each layer</font>

1021
00:39:32,000 --> 00:39:36,289
<font color="#CCCCCC">the process is exactly the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> whether</font>

1022
00:39:34,700 --> 00:39:38,629
it's the container<font color="#CCCCCC"> read/write layer or</font>

1023
00:39:36,289 --> 00:39:40,670
one of the image layers<font color="#CCCCCC"> just go use the</font>

1024
00:39:38,630 --> 00:39:42,619
layer DB chain figure out which metadata

1025
00:39:40,670 --> 00:39:44,790
file it is pull<font color="#CCCCCC"> out</font><font color="#E5E5E5"> the device ID in</font>

1026
00:39:42,619 --> 00:39:48,490
size and off you go

1027
00:39:44,790 --> 00:39:50,320
<font color="#E5E5E5">but the really</font><font color="#CCCCCC"> cool</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> is this more</font>

1028
00:39:48,490 --> 00:39:52,660
<font color="#E5E5E5">or less acts like what we have are these</font>

1029
00:39:50,320 --> 00:39:54,310
<font color="#CCCCCC">little virtual</font><font color="#E5E5E5"> hard disks so instead of</font>

1030
00:39:52,660 --> 00:39:56,649
having to<font color="#CCCCCC"> monkeying around with</font><font color="#E5E5E5"> doing</font>

1031
00:39:54,310 --> 00:39:58,570
<font color="#E5E5E5">things differently if you really wanted</font>

1032
00:39:56,650 --> 00:39:59,829
<font color="#E5E5E5">to you could</font><font color="#CCCCCC"> just use your imaging tool</font>

1033
00:39:58,570 --> 00:40:02,530
of choice and<font color="#E5E5E5"> just image one of these</font>

1034
00:39:59,829 --> 00:40:04,900
things and go to town later the nice

1035
00:40:02,530 --> 00:40:07,359
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have the lower</font>

1036
00:40:04,900 --> 00:40:10,390
layers you could say image the container

1037
00:40:07,359 --> 00:40:12,790
read/write layer and image the image

1038
00:40:10,390 --> 00:40:14,440
<font color="#CCCCCC">layer directly</font><font color="#E5E5E5"> beneath it now</font><font color="#CCCCCC"> you'd have</font>

1039
00:40:12,790 --> 00:40:16,829
<font color="#CCCCCC">two disc images</font><font color="#E5E5E5"> and you can just compare</font>

1040
00:40:14,440 --> 00:40:20,230
them<font color="#E5E5E5"> and</font><font color="#CCCCCC"> see what the differences are</font>

1041
00:40:16,829 --> 00:40:23,290
<font color="#CCCCCC">the other thing and this one's for those</font>

1042
00:40:20,230 --> 00:40:25,750
who are reckless<font color="#E5E5E5"> or both apart</font><font color="#CCCCCC"> there is</font>

1043
00:40:23,290 --> 00:40:27,099
a tool called thin dump<font color="#E5E5E5"> it's not</font>

1044
00:40:25,750 --> 00:40:28,869
terribly<font color="#CCCCCC"> user-friendly you're gonna have</font>

1045
00:40:27,099 --> 00:40:31,210
to muck around<font color="#E5E5E5"> with a kernel to get a</font>

1046
00:40:28,869 --> 00:40:33,400
meditative snapshot but what it<font color="#E5E5E5"> will do</font>

1047
00:40:31,210 --> 00:40:35,980
is<font color="#E5E5E5"> basically dump all</font><font color="#CCCCCC"> of the metadata</font>

1048
00:40:33,400 --> 00:40:38,560
<font color="#E5E5E5">that</font><font color="#CCCCCC"> the device mapper</font><font color="#E5E5E5"> kernel module is</font>

1049
00:40:35,980 --> 00:40:40,630
maintaining for these thin pools<font color="#E5E5E5"> the</font>

1050
00:40:38,560 --> 00:40:43,540
reason that's useful<font color="#E5E5E5"> or could be useful</font>

1051
00:40:40,630 --> 00:40:45,790
<font color="#E5E5E5">if you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go that route</font><font color="#CCCCCC"> is that if</font>

1052
00:40:43,540 --> 00:40:47,050
you<font color="#E5E5E5"> think back to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> let's see if I</font>

1053
00:40:45,790 --> 00:40:51,759
can actually<font color="#E5E5E5"> find that diagram again</font>

1054
00:40:47,050 --> 00:40:54,369
<font color="#E5E5E5">real quickly here</font><font color="#CCCCCC"> if you look</font><font color="#E5E5E5"> back at</font>

1055
00:40:51,760 --> 00:40:55,780
<font color="#E5E5E5">this diagram again you have a base</font>

1056
00:40:54,369 --> 00:40:57,910
device<font color="#E5E5E5"> and a whole</font><font color="#CCCCCC"> bunch of snapshots</font><font color="#E5E5E5"> on</font>

1057
00:40:55,780 --> 00:40:59,680
top of it and we know<font color="#CCCCCC"> anytime you have</font>

1058
00:40:57,910 --> 00:41:00,970
to do a read<font color="#E5E5E5"> it's gonna start at the top</font>

1059
00:40:59,680 --> 00:41:02,410
<font color="#E5E5E5">of one</font><font color="#CCCCCC"> of those little towers and go</font>

1060
00:41:00,970 --> 00:41:05,319
down<font color="#CCCCCC"> until it finds something that</font>

1061
00:41:02,410 --> 00:41:07,000
matches well all the device mapper is

1062
00:41:05,319 --> 00:41:11,050
actually doing<font color="#E5E5E5"> underneath the hood</font><font color="#CCCCCC"> is</font>

1063
00:41:07,000 --> 00:41:13,060
it's got that that big base base device

1064
00:41:11,050 --> 00:41:14,260
in the volume underneath<font color="#E5E5E5"> it in the LEM</font>

1065
00:41:13,060 --> 00:41:16,180
storage pool and it's got a whole<font color="#CCCCCC"> bunch</font>

1066
00:41:14,260 --> 00:41:17,349
of blocks there<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> like okay</font>

1067
00:41:16,180 --> 00:41:19,750
I'm gonna start handing<font color="#E5E5E5"> out blocks to</font>

1068
00:41:17,349 --> 00:41:20,859
people so for<font color="#E5E5E5"> the first base device it</font>

1069
00:41:19,750 --> 00:41:23,770
gets a whole bunch<font color="#E5E5E5"> of blocks then when</font>

1070
00:41:20,859 --> 00:41:26,140
you do a snapshot<font color="#CCCCCC"> anytime you</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> a</font>

1071
00:41:23,770 --> 00:41:30,130
<font color="#E5E5E5">change</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> gonna hand out a new block</font>

1072
00:41:26,140 --> 00:41:31,598
to that<font color="#E5E5E5"> snapshot</font><font color="#CCCCCC"> and so now the data</font><font color="#E5E5E5"> for</font>

1073
00:41:30,130 --> 00:41:33,240
<font color="#E5E5E5">that snapshot from that change is gonna</font>

1074
00:41:31,599 --> 00:41:35,680
be stored<font color="#E5E5E5"> somewhere else in</font><font color="#CCCCCC"> the volume</font>

1075
00:41:33,240 --> 00:41:37,060
what device mapper is doing<font color="#E5E5E5"> in size it's</font>

1076
00:41:35,680 --> 00:41:41,919
<font color="#CCCCCC">just basically maintaining</font><font color="#E5E5E5"> a nice little</font>

1077
00:41:37,060 --> 00:41:44,589
<font color="#E5E5E5">list of okay given snapshot which blocks</font>

1078
00:41:41,920 --> 00:41:47,470
<font color="#E5E5E5">in the snapshot point</font><font color="#CCCCCC"> to which blocks in</font>

1079
00:41:44,589 --> 00:41:50,710
the volume and<font color="#E5E5E5"> that's it that's all it</font>

1080
00:41:47,470 --> 00:41:52,270
really<font color="#CCCCCC"> is</font><font color="#E5E5E5"> all it does is it's a new</font>

1081
00:41:50,710 --> 00:41:54,329
<font color="#E5E5E5">writes done is just</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> change that</font>

1082
00:41:52,270 --> 00:41:56,920
<font color="#E5E5E5">and say okay well you used to point to</font>

1083
00:41:54,329 --> 00:41:57,860
the block that<font color="#E5E5E5"> the layer before lower</font>

1084
00:41:56,920 --> 00:41:59,150
<font color="#CCCCCC">blow is</font><font color="#E5E5E5"> new</font>

1085
00:41:57,860 --> 00:42:04,430
<font color="#E5E5E5">but now you're pointing to this new one</font>

1086
00:41:59,150 --> 00:42:06,200
<font color="#E5E5E5">so</font><font color="#CCCCCC"> if you're able</font><font color="#E5E5E5"> to there we go</font>

1087
00:42:04,430 --> 00:42:08,240
if you're able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> dump out</font><font color="#CCCCCC"> all that</font>

1088
00:42:06,200 --> 00:42:11,660
metadata within dump<font color="#E5E5E5"> you can basically</font>

1089
00:42:08,240 --> 00:42:13,580
say<font color="#E5E5E5"> look at okay which blocks were</font>

1090
00:42:11,660 --> 00:42:15,290
pointing to<font color="#E5E5E5"> what other blocks at the</font>

1091
00:42:13,580 --> 00:42:17,090
container<font color="#CCCCCC"> read/write layer and which</font>

1092
00:42:15,290 --> 00:42:18,890
ones were pointing to<font color="#CCCCCC"> what other blocks</font>

1093
00:42:17,090 --> 00:42:21,950
at<font color="#CCCCCC"> the image layer directly beneath it</font>

1094
00:42:18,890 --> 00:42:25,819
<font color="#E5E5E5">and now you know exactly which places on</font>

1095
00:42:21,950 --> 00:42:28,069
<font color="#CCCCCC">disks something changed at this can be</font>

1096
00:42:25,820 --> 00:42:29,360
more<font color="#CCCCCC"> useful and depending upon</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> size</font>

1097
00:42:28,070 --> 00:42:30,920
<font color="#CCCCCC">of what you're dealing with more</font>

1098
00:42:29,360 --> 00:42:32,660
<font color="#E5E5E5">practical than trying</font><font color="#CCCCCC"> to do a block by</font>

1099
00:42:30,920 --> 00:42:34,940
block comparison of both<font color="#CCCCCC"> devices all</font><font color="#E5E5E5"> the</font>

1100
00:42:32,660 --> 00:42:36,980
way to the end<font color="#CCCCCC"> you could be dealing</font><font color="#E5E5E5"> with</font>

1101
00:42:34,940 --> 00:42:39,080
you know gigabytes and gigabytes of data

1102
00:42:36,980 --> 00:42:40,070
<font color="#CCCCCC">and waiting for a</font><font color="#E5E5E5"> while whereas there</font>

1103
00:42:39,080 --> 00:42:42,620
might be<font color="#CCCCCC"> only</font><font color="#E5E5E5"> like two or</font><font color="#CCCCCC"> three blocks</font>

1104
00:42:40,070 --> 00:42:44,380
<font color="#E5E5E5">that changed this would also potentially</font>

1105
00:42:42,620 --> 00:42:47,029
<font color="#E5E5E5">be</font><font color="#CCCCCC"> a nice way to find the durian</font>

1106
00:42:44,380 --> 00:42:49,970
remember we<font color="#CCCCCC"> created and deleted</font><font color="#E5E5E5"> it</font>

1107
00:42:47,030 --> 00:42:52,580
you could go<font color="#E5E5E5"> rip open the file system</font>

1108
00:42:49,970 --> 00:42:54,169
with<font color="#CCCCCC"> XFS DB and hunt</font><font color="#E5E5E5"> down through all</font>

1109
00:42:52,580 --> 00:42:55,610
the file system a today then find the

1110
00:42:54,170 --> 00:42:56,630
directory thing<font color="#E5E5E5"> I was in like oh yeah</font>

1111
00:42:55,610 --> 00:42:58,130
well that was one<font color="#E5E5E5"> of those smaller</font>

1112
00:42:56,630 --> 00:42:59,240
directories where basically we lost all

1113
00:42:58,130 --> 00:43:02,330
information once the file is<font color="#E5E5E5"> deleted</font>

1114
00:42:59,240 --> 00:43:05,990
<font color="#E5E5E5">great but the block that was changed on</font>

1115
00:43:02,330 --> 00:43:08,900
disk is still there<font color="#CCCCCC"> so using thin dump</font>

1116
00:43:05,990 --> 00:43:10,819
might be one way<font color="#E5E5E5"> for for the more more</font>

1117
00:43:08,900 --> 00:43:12,680
<font color="#E5E5E5">bold than comfortable messing around</font>

1118
00:43:10,820 --> 00:43:15,440
with directly interfacing with device

1119
00:43:12,680 --> 00:43:17,060
paper<font color="#CCCCCC"> kernel stuff to pull out just</font><font color="#E5E5E5"> the</font>

1120
00:43:15,440 --> 00:43:23,390
blocks<font color="#E5E5E5"> that change then compare them</font>

1121
00:43:17,060 --> 00:43:25,910
<font color="#E5E5E5">there in summary if you're dealing</font><font color="#CCCCCC"> with</font>

1122
00:43:23,390 --> 00:43:28,460
a cold<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> you've got a</font><font color="#E5E5E5"> bunch of</font>

1123
00:43:25,910 --> 00:43:30,740
metadata<font color="#E5E5E5"> JSON files that will give you</font>

1124
00:43:28,460 --> 00:43:32,990
more<font color="#CCCCCC"> or</font><font color="#E5E5E5"> less the equivalence of docker</font>

1125
00:43:30,740 --> 00:43:35,810
inspect<font color="#E5E5E5"> will give you for a container an</font>

1126
00:43:32,990 --> 00:43:37,879
image you have this layer DB directory

1127
00:43:35,810 --> 00:43:39,950
<font color="#CCCCCC">that basically</font><font color="#E5E5E5"> gives you a chain to</font>

1128
00:43:37,880 --> 00:43:42,470
start from any<font color="#E5E5E5"> given image or container</font>

1129
00:43:39,950 --> 00:43:44,299
<font color="#CCCCCC">or an</font><font color="#E5E5E5"> even layer and figure</font><font color="#CCCCCC"> out what</font><font color="#E5E5E5"> is</font>

1130
00:43:42,470 --> 00:43:45,799
<font color="#E5E5E5">the layers beneath all</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> and then</font>

1131
00:43:44,300 --> 00:43:47,480
<font color="#E5E5E5">depending upon what your</font><font color="#CCCCCC"> back-end is</font>

1132
00:43:45,800 --> 00:43:48,710
<font color="#E5E5E5">your are they gonna have the overlay two</font>

1133
00:43:47,480 --> 00:43:50,900
<font color="#E5E5E5">directories</font><font color="#CCCCCC"> that'll have</font><font color="#E5E5E5"> all these</font>

1134
00:43:48,710 --> 00:43:52,220
directories of differences<font color="#E5E5E5"> or device</font>

1135
00:43:50,900 --> 00:43:56,360
member directory<font color="#E5E5E5"> that's gonna have all</font>

1136
00:43:52,220 --> 00:43:59,299
these virtual disk snapshots<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font>

1137
00:43:56,360 --> 00:44:01,610
realized this was kind of a lots of

1138
00:43:59,300 --> 00:44:03,140
texts and<font color="#E5E5E5"> text eternally technical talk</font>

1139
00:44:01,610 --> 00:44:05,360
so I made<font color="#CCCCCC"> sure to bake him plenty</font><font color="#E5E5E5"> of</font>

1140
00:44:03,140 --> 00:44:07,700
<font color="#CCCCCC">time for</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> at the end so we have</font>

1141
00:44:05,360 --> 00:44:10,010
time for that<font color="#CCCCCC"> and</font><font color="#E5E5E5"> as a bonus</font><font color="#CCCCCC"> I also put</font>

1142
00:44:07,700 --> 00:44:11,770
together a cheat sheet<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you all</font><font color="#CCCCCC"> it's</font>

1143
00:44:10,010 --> 00:44:14,299
just<font color="#CCCCCC"> that one page</font>

1144
00:44:11,770 --> 00:44:16,579
landscape<font color="#E5E5E5"> letter cheat sheet that</font>

1145
00:44:14,299 --> 00:44:17,809
<font color="#E5E5E5">contains the the high points of this</font>

1146
00:44:16,579 --> 00:44:20,690
that<font color="#E5E5E5"> would basically get you access to</font>

1147
00:44:17,809 --> 00:44:22,790
the<font color="#E5E5E5"> noise mapper overlay back ends and</font>

1148
00:44:20,690 --> 00:44:25,040
<font color="#CCCCCC">show you</font><font color="#E5E5E5"> the layer DB tree show you</font>

1149
00:44:22,790 --> 00:44:35,558
where some<font color="#CCCCCC"> of the metadata Jason is so</font>

1150
00:44:25,040 --> 00:44:37,640
questions<font color="#E5E5E5"> yes what initiates a new layer</font>

1151
00:44:35,559 --> 00:44:40,190
<font color="#CCCCCC">well you're going</font><font color="#E5E5E5"> to get a new layer in</font>

1152
00:44:37,640 --> 00:44:43,578
one of two ways<font color="#CCCCCC"> new layers are built</font>

1153
00:44:40,190 --> 00:44:45,829
when you're creating<font color="#E5E5E5"> an image which</font><font color="#CCCCCC"> is</font>

1154
00:44:43,579 --> 00:44:50,119
basically a series of docker commit

1155
00:44:45,829 --> 00:44:51,829
commands<font color="#CCCCCC"> and actually all that's that's</font>

1156
00:44:50,119 --> 00:44:54,890
not that's not<font color="#E5E5E5"> really true new layers</font>

1157
00:44:51,829 --> 00:44:57,559
are created<font color="#E5E5E5"> when you run a container so</font>

1158
00:44:54,890 --> 00:45:00,470
<font color="#CCCCCC">you have an image you</font><font color="#E5E5E5"> hand it to da</font>

1159
00:44:57,559 --> 00:45:02,240
<font color="#CCCCCC">current say run</font><font color="#E5E5E5"> this thing</font><font color="#CCCCCC"> a running</font>

1160
00:45:00,470 --> 00:45:06,490
image is now basically a container<font color="#E5E5E5"> and</font>

1161
00:45:02,240 --> 00:45:10,759
when a container runs docker<font color="#E5E5E5"> will take a</font>

1162
00:45:06,490 --> 00:45:12,828
it will create a new empty<font color="#CCCCCC"> read/write</font>

1163
00:45:10,760 --> 00:45:15,290
layer on<font color="#E5E5E5"> top of whatever whatever</font><font color="#CCCCCC"> else</font>

1164
00:45:12,829 --> 00:45:16,940
is there so you<font color="#CCCCCC"> get a new layer when you</font>

1165
00:45:15,290 --> 00:45:19,970
run a container the way you build<font color="#E5E5E5"> up an</font>

1166
00:45:16,940 --> 00:45:22,130
image full of layers is that<font color="#CCCCCC"> let's see</font>

1167
00:45:19,970 --> 00:45:25,368
if<font color="#CCCCCC"> I can find</font><font color="#E5E5E5"> that docker file I showed</font>

1168
00:45:22,130 --> 00:45:29,420
<font color="#E5E5E5">you yeah the example here so that docker</font>

1169
00:45:25,369 --> 00:45:33,140
file<font color="#E5E5E5"> every line in that file is gonna</font>

1170
00:45:29,420 --> 00:45:36,260
create<font color="#E5E5E5"> a new layer in the image</font><font color="#CCCCCC"> the</font>

1171
00:45:33,140 --> 00:45:39,078
first lines going<font color="#CCCCCC"> to go grab the alpine</font>

1172
00:45:36,260 --> 00:45:41,059
<font color="#CCCCCC">linux image</font><font color="#E5E5E5"> that's my base set and it's</font>

1173
00:45:39,079 --> 00:45:42,650
actually<font color="#E5E5E5"> only got one layer to it then</font>

1174
00:45:41,059 --> 00:45:44,799
when<font color="#CCCCCC"> i say add lemons and</font><font color="#E5E5E5"> pears</font>

1175
00:45:42,650 --> 00:45:49,720
what docker actually does is basically

1176
00:45:44,799 --> 00:45:53,420
<font color="#E5E5E5">it does a docker run on the alpine image</font>

1177
00:45:49,720 --> 00:45:57,379
<font color="#CCCCCC">and it basically copies two files in and</font>

1178
00:45:53,420 --> 00:45:59,660
then it's done and now it says docker

1179
00:45:57,380 --> 00:46:01,490
<font color="#CCCCCC">commit which takes the container</font>

1180
00:45:59,660 --> 00:46:03,230
<font color="#E5E5E5">read/write layer and makes it part of</font>

1181
00:46:01,490 --> 00:46:11,629
the image<font color="#CCCCCC"> i'm building</font><font color="#E5E5E5"> up and it does</font>

1182
00:46:03,230 --> 00:46:15,109
that for<font color="#E5E5E5"> each step no well no with the</font>

1183
00:46:11,630 --> 00:46:16,760
caveat<font color="#E5E5E5"> there's an experimental option</font>

1184
00:46:15,109 --> 00:46:20,119
you can<font color="#E5E5E5"> turn on a docker called squash</font>

1185
00:46:16,760 --> 00:46:23,089
so that when you do a build like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> it</font>

1186
00:46:20,119 --> 00:46:26,770
will as the final step<font color="#E5E5E5"> take all those</font>

1187
00:46:23,089 --> 00:46:26,770
layers squish them<font color="#E5E5E5"> together and you</font><font color="#CCCCCC"> just</font>

1188
00:46:27,040 --> 00:46:31,279
<font color="#CCCCCC">but yeah</font><font color="#E5E5E5"> generally</font><font color="#CCCCCC"> the way you're gonna</font>

1189
00:46:29,330 --> 00:46:32,840
<font color="#CCCCCC">get</font><font color="#E5E5E5"> layers is by default it's</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be</font>

1190
00:46:31,280 --> 00:46:35,000
one layer per line in that docker file

1191
00:46:32,840 --> 00:46:39,530
and then any time<font color="#CCCCCC"> you run the image that</font>

1192
00:46:35,000 --> 00:46:43,780
extra container layer slapped on top yes

1193
00:46:39,530 --> 00:46:49,369
[Music]

1194
00:46:43,780 --> 00:46:52,340
yes there is yes there is<font color="#CCCCCC"> it's not a</font>

1195
00:46:49,369 --> 00:46:53,810
huge hit but it's enough<font color="#CCCCCC"> that if you</font>

1196
00:46:52,340 --> 00:46:56,440
<font color="#CCCCCC">read the</font><font color="#E5E5E5"> docker</font><font color="#CCCCCC"> Doc's you're</font><font color="#E5E5E5"> gonna find</font>

1197
00:46:53,810 --> 00:46:59,840
repeated in any of the storage back-end

1198
00:46:56,440 --> 00:47:01,070
stuff<font color="#CCCCCC"> basically saying yeah and since</font>

1199
00:46:59,840 --> 00:47:03,320
we're<font color="#E5E5E5"> chaining layers and layers and</font>

1200
00:47:01,070 --> 00:47:05,450
<font color="#E5E5E5">layers</font><font color="#CCCCCC"> and layers and</font><font color="#E5E5E5"> layers if you meet</font>

1201
00:47:03,320 --> 00:47:07,430
<font color="#E5E5E5">high</font><font color="#CCCCCC"> write performance</font>

1202
00:47:05,450 --> 00:47:08,689
maybe you should go use a volume for

1203
00:47:07,430 --> 00:47:10,100
that

1204
00:47:08,690 --> 00:47:12,890
the other interesting thing<font color="#E5E5E5"> is which</font>

1205
00:47:10,100 --> 00:47:15,650
<font color="#E5E5E5">back-end you use is going</font><font color="#CCCCCC"> to give you</font>

1206
00:47:12,890 --> 00:47:17,299
different<font color="#E5E5E5"> performance trade-offs</font><font color="#CCCCCC"> so the</font>

1207
00:47:15,650 --> 00:47:18,740
device member<font color="#E5E5E5"> one's kind of nice because</font>

1208
00:47:17,300 --> 00:47:20,960
you're just using<font color="#CCCCCC"> this Linux kernel</font>

1209
00:47:18,740 --> 00:47:24,529
thing that really<font color="#E5E5E5"> does</font><font color="#CCCCCC"> exactly what</font><font color="#E5E5E5"> you</font>

1210
00:47:20,960 --> 00:47:27,020
want the downside is that<font color="#E5E5E5"> for the thin</font>

1211
00:47:24,530 --> 00:47:30,230
pool<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to say how large a thin</font>

1212
00:47:27,020 --> 00:47:33,560
pool block is and I think by default

1213
00:47:30,230 --> 00:47:36,740
docker says<font color="#CCCCCC"> 1,024 now that blocks in</font>

1214
00:47:33,560 --> 00:47:38,420
sectors of 512<font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> so basically you're</font>

1215
00:47:36,740 --> 00:47:41,089
guaranteed<font color="#E5E5E5"> if I change one</font><font color="#CCCCCC"> byte in a</font>

1216
00:47:38,420 --> 00:47:43,640
file at minimum<font color="#E5E5E5"> I've now got half a</font>

1217
00:47:41,090 --> 00:47:46,820
megabyte of data that<font color="#E5E5E5"> just got added</font><font color="#CCCCCC"> to</font>

1218
00:47:43,640 --> 00:47:51,290
my new layer<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that can add</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> overlay</font>

1219
00:47:46,820 --> 00:47:52,970
<font color="#E5E5E5">FF the directory difference is one is a</font>

1220
00:47:51,290 --> 00:47:55,520
little<font color="#CCCCCC"> better in some ways also the way</font>

1221
00:47:52,970 --> 00:47:57,259
the kernel module works<font color="#CCCCCC"> the page cache</font>

1222
00:47:55,520 --> 00:47:59,600
for<font color="#E5E5E5"> the file system is</font><font color="#CCCCCC"> useful so if you</font>

1223
00:47:57,260 --> 00:48:01,580
have a whole<font color="#E5E5E5"> bunch of containers all</font>

1224
00:47:59,600 --> 00:48:03,259
with a common layer somewhere in the

1225
00:48:01,580 --> 00:48:05,270
middle<font color="#E5E5E5"> and they're all trying to read</font>

1226
00:48:03,260 --> 00:48:07,550
<font color="#E5E5E5">that same file it actually is that same</font>

1227
00:48:05,270 --> 00:48:10,790
file<font color="#E5E5E5"> whereas with the</font><font color="#CCCCCC"> Weisse mapper it's</font>

1228
00:48:07,550 --> 00:48:12,020
gonna be technically<font color="#E5E5E5"> the same filesystem</font>

1229
00:48:10,790 --> 00:48:13,040
but different block devices<font color="#E5E5E5"> so things</font>

1230
00:48:12,020 --> 00:48:14,570
<font color="#CCCCCC">that</font><font color="#E5E5E5"> confused and it's not always</font>

1231
00:48:13,040 --> 00:48:16,640
necessarily gonna benefit<font color="#E5E5E5"> from the page</font>

1232
00:48:14,570 --> 00:48:18,080
cache<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> containers are reading the</font><font color="#CCCCCC"> same</font>

1233
00:48:16,640 --> 00:48:21,080
<font color="#CCCCCC">thing you're gonna go actually go to</font>

1234
00:48:18,080 --> 00:48:25,220
<font color="#CCCCCC">disk 5 times</font><font color="#E5E5E5"> the reason</font><font color="#CCCCCC"> that Red Hat</font>

1235
00:48:21,080 --> 00:48:26,750
<font color="#CCCCCC">Linux</font><font color="#E5E5E5"> ism is has had to use device</font>

1236
00:48:25,220 --> 00:48:28,069
<font color="#E5E5E5">member for a while mostly just because</font>

1237
00:48:26,750 --> 00:48:29,630
they were<font color="#E5E5E5"> doing a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> really cool</font>

1238
00:48:28,070 --> 00:48:31,160
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> with SELinux they try to contain</font>

1239
00:48:29,630 --> 00:48:33,230
containers a little better than<font color="#CCCCCC"> they</font>

1240
00:48:31,160 --> 00:48:34,790
<font color="#E5E5E5">currently contain but it didn't play</font>

1241
00:48:33,230 --> 00:48:36,239
<font color="#CCCCCC">very well</font><font color="#E5E5E5"> with overlay FS and I think</font>

1242
00:48:34,790 --> 00:48:38,249
they<font color="#E5E5E5"> just</font>

1243
00:48:36,239 --> 00:48:39,869
to get that kind<font color="#E5E5E5"> of worked out and the</font>

1244
00:48:38,249 --> 00:48:44,629
most recent version of her head and her

1245
00:48:39,869 --> 00:48:58,769
<font color="#CCCCCC">poised Linux seven</font><font color="#E5E5E5"> can do overlay FS</font><font color="#CCCCCC"> no</font>

1246
00:48:44,629 --> 00:49:02,219
<font color="#E5E5E5">other questions yes yes I was actually</font>

1247
00:48:58,769 --> 00:49:03,658
able to<font color="#E5E5E5"> I mean it it was kind of</font><font color="#CCCCCC"> anytime</font>

1248
00:49:02,219 --> 00:49:05,069
you run into a case where you're like

1249
00:49:03,659 --> 00:49:06,449
okay well before<font color="#CCCCCC"> I reinvent the wheel</font>

1250
00:49:05,069 --> 00:49:07,049
let's go Google and Google says yeah

1251
00:49:06,449 --> 00:49:09,599
nope

1252
00:49:07,049 --> 00:49:11,819
you know you got a fun problem<font color="#CCCCCC"> so it was</font>

1253
00:49:09,599 --> 00:49:12,959
a fun one but I mean it didn't wind up

1254
00:49:11,819 --> 00:49:15,058
being<font color="#E5E5E5"> an obstacle the nice thing about</font>

1255
00:49:12,959 --> 00:49:18,808
things<font color="#E5E5E5"> like well I mean any kind</font><font color="#CCCCCC"> of</font>

1256
00:49:15,059 --> 00:49:19,769
computer system yes<font color="#CCCCCC"> yeah I can't</font><font color="#E5E5E5"> really</font>

1257
00:49:18,809 --> 00:49:22,249
tell<font color="#E5E5E5"> you what it was because</font><font color="#CCCCCC"> obviously</font>

1258
00:49:19,769 --> 00:49:24,209
it's one of<font color="#E5E5E5"> our clients well I mean it's</font>

1259
00:49:22,249 --> 00:49:25,198
when you're doing incident response from

1260
00:49:24,209 --> 00:49:27,479
<font color="#CCCCCC">people they don't like</font><font color="#E5E5E5"> it when</font><font color="#CCCCCC"> you tell</font>

1261
00:49:25,199 --> 00:49:30,089
tell the stories<font color="#E5E5E5"> but yeah the gist of it</font>

1262
00:49:27,479 --> 00:49:31,799
basically<font color="#E5E5E5"> was is that it was</font><font color="#CCCCCC"> a host</font><font color="#E5E5E5"> that</font>

1263
00:49:30,089 --> 00:49:34,699
was compromised once they<font color="#E5E5E5"> did get in</font>

1264
00:49:31,799 --> 00:49:37,739
<font color="#E5E5E5">they actually proceeded to advance</font>

1265
00:49:34,699 --> 00:49:40,219
advance their hold on<font color="#CCCCCC"> the host by means</font>

1266
00:49:37,739 --> 00:49:42,929
of running more docker containers<font color="#CCCCCC"> and so</font>

1267
00:49:40,219 --> 00:49:43,799
if you<font color="#E5E5E5"> kind of play back the talk</font>

1268
00:49:42,929 --> 00:49:44,999
through<font color="#E5E5E5"> your head you'll hear some</font>

1269
00:49:43,799 --> 00:49:46,288
points where I'm<font color="#CCCCCC"> talking about yeah they</font>

1270
00:49:44,999 --> 00:49:48,718
might<font color="#E5E5E5"> do this or a grabbing terminal</font><font color="#CCCCCC"> app</font>

1271
00:49:46,289 --> 00:49:53,879
<font color="#E5E5E5">it might be nice and it's all from</font>

1272
00:49:48,719 --> 00:49:55,589
experiencing any<font color="#CCCCCC"> other questions</font><font color="#E5E5E5"> I'm</font>

1273
00:49:53,879 --> 00:50:01,788
kind of blinded so is anyone<font color="#CCCCCC"> in the back</font>

1274
00:49:55,589 --> 00:50:01,788
there going<font color="#E5E5E5"> once</font>

1275
00:50:01,999 --> 00:50:15,899
yes when the container is removed maybe

1276
00:50:13,129 --> 00:50:21,179
it depends<font color="#CCCCCC"> upon what the logging</font>

1277
00:50:15,899 --> 00:50:24,328
back-end is so<font color="#E5E5E5"> for and all right I have</font>

1278
00:50:21,179 --> 00:50:25,379
to caveat<font color="#E5E5E5"> I haven't tested this</font><font color="#CCCCCC"> so if</font>

1279
00:50:24,329 --> 00:50:26,999
you really<font color="#E5E5E5"> want to know grab me</font>

1280
00:50:25,379 --> 00:50:29,879
afterwards we can flow<font color="#E5E5E5"> up at the</font><font color="#CCCCCC"> m and</font>

1281
00:50:26,999 --> 00:50:32,698
<font color="#E5E5E5">we'll find out</font><font color="#CCCCCC"> but I would</font><font color="#E5E5E5"> presume that</font>

1282
00:50:29,879 --> 00:50:35,999
for the the<font color="#CCCCCC"> JSON file it would</font><font color="#E5E5E5"> because</font>

1283
00:50:32,699 --> 00:50:38,579
that container the container<font color="#E5E5E5"> directory</font>

1284
00:50:35,999 --> 00:50:40,589
<font color="#CCCCCC">that has that containers like the config</font>

1285
00:50:38,579 --> 00:50:41,609
<font color="#CCCCCC">v2</font><font color="#E5E5E5"> JSON file that's where the Jason log</font>

1286
00:50:40,589 --> 00:50:45,259
file usually gets dumped in that

1287
00:50:41,609 --> 00:50:47,969
container directories gone but the<font color="#E5E5E5"> Jason</font>

1288
00:50:45,259 --> 00:50:50,040
the Jason log outputs not the only

1289
00:50:47,969 --> 00:50:51,560
docker logging<font color="#CCCCCC"> output</font>

1290
00:50:50,040 --> 00:50:53,730
they've got like<font color="#E5E5E5"> half a dozen or more</font>

1291
00:50:51,560 --> 00:50:54,810
like one<font color="#E5E5E5"> of them for example</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> Journal</font>

1292
00:50:53,730 --> 00:50:56,610
<font color="#CCCCCC">D which</font><font color="#E5E5E5"> is just going to write a</font>

1293
00:50:54,810 --> 00:51:00,240
straight to the system<font color="#CCCCCC"> Journal obviously</font>

1294
00:50:56,610 --> 00:51:01,530
<font color="#CCCCCC">docker doesn't really have</font><font color="#E5E5E5"> control to</font><font color="#CCCCCC"> be</font>

1295
00:51:00,240 --> 00:51:02,729
removing things<font color="#CCCCCC"> from that and if they</font>

1296
00:51:01,530 --> 00:51:04,530
did I think<font color="#CCCCCC"> people probably</font><font color="#E5E5E5"> get very</font>

1297
00:51:02,730 --> 00:51:06,090
very<font color="#CCCCCC"> angry with them</font><font color="#E5E5E5"> other ones are</font>

1298
00:51:04,530 --> 00:51:09,930
routing straight off to<font color="#E5E5E5"> things like</font>

1299
00:51:06,090 --> 00:51:11,610
fluent<font color="#E5E5E5"> to</font><font color="#CCCCCC"> hear I</font><font color="#E5E5E5"> think rate log</font><font color="#CCCCCC"> so for a</font>

1300
00:51:09,930 --> 00:51:13,620
lot of the logging backends actually

1301
00:51:11,610 --> 00:51:14,910
even if the containers removed<font color="#E5E5E5"> the</font>

1302
00:51:13,620 --> 00:51:16,529
logging data<font color="#E5E5E5"> is probably still there</font>

1303
00:51:14,910 --> 00:51:18,540
somewhere it just depends<font color="#E5E5E5"> upon which</font>

1304
00:51:16,530 --> 00:51:21,810
<font color="#CCCCCC">backend of</font><font color="#E5E5E5"> the use as to where you're</font>

1305
00:51:18,540 --> 00:51:24,960
gonna find<font color="#E5E5E5"> it I'll apply</font><font color="#CCCCCC"> myself</font><font color="#E5E5E5"> second</font>

1306
00:51:21,810 --> 00:51:30,200
yes<font color="#E5E5E5"> way way way in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> back what's that</font>

1307
00:51:24,960 --> 00:51:52,200
a question no just someone stretching

1308
00:51:30,200 --> 00:51:56,660
yes right that's gonna come down<font color="#CCCCCC"> to</font><font color="#E5E5E5"> your</font>

1309
00:51:52,200 --> 00:51:59,549
<font color="#E5E5E5">own</font><font color="#CCCCCC"> judgment</font><font color="#E5E5E5"> and your own policies if oh</font>

1310
00:51:56,660 --> 00:52:02,490
sorry<font color="#CCCCCC"> the question was</font><font color="#E5E5E5"> basically you</font>

1311
00:51:59,550 --> 00:52:06,290
have a<font color="#E5E5E5"> trade-off between the easiness of</font>

1312
00:52:02,490 --> 00:52:09,810
grabbing<font color="#E5E5E5"> data if the system still live</font>

1313
00:52:06,290 --> 00:52:12,180
versus<font color="#E5E5E5"> if something's just got infected</font>

1314
00:52:09,810 --> 00:52:15,779
or hacked<font color="#E5E5E5"> I might work</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> to pull</font>

1315
00:52:12,180 --> 00:52:17,490
the<font color="#CCCCCC"> plug right</font><font color="#E5E5E5"> away what's the trade-off</font>

1316
00:52:15,780 --> 00:52:19,710
<font color="#CCCCCC">like how do you</font><font color="#E5E5E5"> how do</font><font color="#CCCCCC"> you decide what</font>

1317
00:52:17,490 --> 00:52:22,379
<font color="#CCCCCC">to do and my answer is basically</font><font color="#E5E5E5"> it's</font>

1318
00:52:19,710 --> 00:52:25,860
<font color="#CCCCCC">gonna depend upon your own</font><font color="#E5E5E5"> judgment</font><font color="#CCCCCC"> in</font>

1319
00:52:22,380 --> 00:52:28,260
the circumstances<font color="#E5E5E5"> so if I'm in a lot of</font>

1320
00:52:25,860 --> 00:52:32,240
cases<font color="#E5E5E5"> probably yeah pull the plug it's</font>

1321
00:52:28,260 --> 00:52:34,620
gonna be harder but I made you chichi

1322
00:52:32,240 --> 00:52:37,979
<font color="#CCCCCC">that may be the</font><font color="#E5E5E5"> one case I think of</font>

1323
00:52:34,620 --> 00:52:40,259
where it<font color="#E5E5E5"> might be worth considering not</font>

1324
00:52:37,980 --> 00:52:41,760
pulling the plug<font color="#E5E5E5"> is if you're dealing</font>

1325
00:52:40,260 --> 00:52:44,370
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a situation where you</font><font color="#E5E5E5"> have a high</font>

1326
00:52:41,760 --> 00:52:45,630
suspicion<font color="#E5E5E5"> that the adversary are dealing</font>

1327
00:52:44,370 --> 00:52:48,690
with is<font color="#CCCCCC"> gonna be clever enough not to</font>

1328
00:52:45,630 --> 00:52:54,420
write anything<font color="#E5E5E5"> to disk in</font><font color="#CCCCCC"> that case the</font>

1329
00:52:48,690 --> 00:52:56,670
only<font color="#CCCCCC"> thing you've got is memory so what</font>

1330
00:52:54,420 --> 00:52:58,050
you might<font color="#CCCCCC"> consider doing</font><font color="#E5E5E5"> I mean if you</font>

1331
00:52:56,670 --> 00:52:59,550
<font color="#CCCCCC">think</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> well at what point</font><font color="#CCCCCC"> do I</font>

1332
00:52:58,050 --> 00:53:01,980
realize the system's been compromised

1333
00:52:59,550 --> 00:53:03,150
<font color="#CCCCCC">well</font><font color="#E5E5E5"> probably</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> while after</font><font color="#CCCCCC"> it's</font>

1334
00:53:01,980 --> 00:53:04,859
<font color="#CCCCCC">already been compromised</font>

1335
00:53:03,150 --> 00:53:07,140
so there's already a time wonder the

1336
00:53:04,859 --> 00:53:09,089
time window<font color="#E5E5E5"> the</font><font color="#CCCCCC"> attackers been operating</font>

1337
00:53:07,140 --> 00:53:10,950
in so the question<font color="#CCCCCC"> now is</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> more</font>

1338
00:53:09,089 --> 00:53:13,319
time am I willing to<font color="#E5E5E5"> give them and is</font>

1339
00:53:10,950 --> 00:53:15,868
the added risk from giving that time

1340
00:53:13,319 --> 00:53:17,009
worth the payoff<font color="#E5E5E5"> if for example you sat</font>

1341
00:53:15,869 --> 00:53:18,720
<font color="#CCCCCC">down and you wrote yourself a script</font>

1342
00:53:17,009 --> 00:53:21,809
that<font color="#CCCCCC"> kitten that could in the matter</font><font color="#E5E5E5"> of</font>

1343
00:53:18,720 --> 00:53:24,419
milliseconds<font color="#CCCCCC"> go and numerate every</font>

1344
00:53:21,809 --> 00:53:26,640
docker container on a host<font color="#E5E5E5"> pull down all</font>

1345
00:53:24,420 --> 00:53:28,349
the memory right at the<font color="#CCCCCC"> disk make sure</font>

1346
00:53:26,640 --> 00:53:31,890
that<font color="#CCCCCC"> sync the filesystem and then cut</font>

1347
00:53:28,349 --> 00:53:33,269
power<font color="#CCCCCC"> alright if you've got a additional</font>

1348
00:53:31,890 --> 00:53:34,710
time window<font color="#E5E5E5"> of a couple of milliseconds</font>

1349
00:53:33,269 --> 00:53:35,848
<font color="#E5E5E5">but when you gain from that is the</font>

1350
00:53:34,710 --> 00:53:37,559
ability<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually look at</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> the</font>

1351
00:53:35,849 --> 00:53:39,630
contents of<font color="#E5E5E5"> memory was maybe that's a</font>

1352
00:53:37,559 --> 00:53:40,499
<font color="#E5E5E5">worthwhile trade-off</font><font color="#CCCCCC"> or maybe if it's in</font>

1353
00:53:39,630 --> 00:53:42,299
something<font color="#CCCCCC"> that's a really really</font>

1354
00:53:40,499 --> 00:53:44,098
<font color="#CCCCCC">critical system and you're</font><font color="#E5E5E5"> willing to</font>

1355
00:53:42,299 --> 00:53:46,019
say<font color="#CCCCCC"> all right I might not be able to</font>

1356
00:53:44,099 --> 00:53:47,339
<font color="#E5E5E5">solve the puzzle what happened here but</font>

1357
00:53:46,019 --> 00:53:49,229
at least I didn't give them<font color="#CCCCCC"> the</font><font color="#E5E5E5"> extra</font>

1358
00:53:47,339 --> 00:53:50,490
<font color="#CCCCCC">hundred milliseconds just straight pull</font>

1359
00:53:49,230 --> 00:53:51,960
<font color="#CCCCCC">of pull</font><font color="#E5E5E5"> the plug</font>

1360
00:53:50,490 --> 00:53:54,598
ultimately it's<font color="#CCCCCC"> really gonna come down</font>

1361
00:53:51,960 --> 00:53:56,309
to<font color="#CCCCCC"> like your gut knowing</font><font color="#E5E5E5"> your</font>

1362
00:53:54,599 --> 00:53:59,009
organization and knowing what your

1363
00:53:56,309 --> 00:54:02,130
trade-offs are but yeah the memory case

1364
00:53:59,009 --> 00:54:05,999
is the one<font color="#E5E5E5"> case</font><font color="#CCCCCC"> where I would I would</font>

1365
00:54:02,130 --> 00:54:08,809
consider possibly<font color="#E5E5E5"> giving them that</font>

1366
00:54:05,999 --> 00:54:10,859
additional<font color="#CCCCCC"> couple hundred milliseconds</font>

1367
00:54:08,809 --> 00:54:13,109
<font color="#CCCCCC">or maybe even</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of seconds of</font>

1368
00:54:10,859 --> 00:54:14,910
<font color="#CCCCCC">it's a slow system with the time but</font>

1369
00:54:13,109 --> 00:54:17,369
that<font color="#CCCCCC"> would probably</font><font color="#E5E5E5"> be only if you had a</font>

1370
00:54:14,910 --> 00:54:22,348
ready-made automated tool to do it<font color="#E5E5E5"> and</font>

1371
00:54:17,369 --> 00:54:33,480
just<font color="#E5E5E5"> hit the</font><font color="#CCCCCC"> Fort Mingo other questions</font>

1372
00:54:22,349 --> 00:54:35,640
<font color="#E5E5E5">I have not sat down and</font><font color="#CCCCCC"> done</font><font color="#E5E5E5"> that mostly</font>

1373
00:54:33,480 --> 00:54:37,769
because my wife<font color="#E5E5E5"> and I just had a</font>

1374
00:54:35,640 --> 00:54:40,920
delightful<font color="#CCCCCC"> little boy who</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> seven</font>

1375
00:54:37,769 --> 00:54:43,200
<font color="#CCCCCC">months</font><font color="#E5E5E5"> and it's got me quite busy</font><font color="#CCCCCC"> but oh</font>

1376
00:54:40,920 --> 00:54:47,340
thank you

1377
00:54:43,200 --> 00:54:48,870
but I mean I I will say I<font color="#E5E5E5"> mean one of</font>

1378
00:54:47,340 --> 00:54:50,760
the things<font color="#CCCCCC"> that my company</font><font color="#E5E5E5"> does offer is</font>

1379
00:54:48,870 --> 00:54:51,960
tailored software solutions if you have

1380
00:54:50,760 --> 00:54:53,640
someone<font color="#E5E5E5"> who wants</font><font color="#CCCCCC"> to pay for that done</font>

1381
00:54:51,960 --> 00:54:59,240
<font color="#E5E5E5">talk to me afterwards</font><font color="#CCCCCC"> we will</font><font color="#E5E5E5"> make it</font>

1382
00:54:53,640 --> 00:54:59,240
<font color="#E5E5E5">happen</font><font color="#CCCCCC"> anyway else</font>

1383
00:55:01,140 --> 00:55:04,179
[Applause]

