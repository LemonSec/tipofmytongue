1
00:00:05,279 --> 00:00:10,960
hi and welcome to the next session I'm

2
00:00:07,660 --> 00:00:14,920
Philip let me share my screen and we'll

3
00:00:10,960 --> 00:00:17,080
jump right into it so let's go no sequel

4
00:00:14,920 --> 00:00:19,570
means no security is the topic of this

5
00:00:17,080 --> 00:00:21,549
session and by the way the question mark

6
00:00:19,570 --> 00:00:23,590
at the end is very important

7
00:00:21,550 --> 00:00:25,570
don't tell me afterwards that I said

8
00:00:23,590 --> 00:00:28,509
like there is no security in no secret

9
00:00:25,570 --> 00:00:31,000
because that would make my company very

10
00:00:28,510 --> 00:00:33,100
unhappy so just be clear this is a

11
00:00:31,000 --> 00:00:35,519
question mark and we want to dive into

12
00:00:33,100 --> 00:00:39,400
the question around that over the next

13
00:00:35,519 --> 00:00:40,870
15 to 20 minutes or whatever we have so

14
00:00:39,400 --> 00:00:43,930
I work for elastic the company behind

15
00:00:40,870 --> 00:00:46,750
elastic search and various other pieces

16
00:00:43,930 --> 00:00:48,549
of software software and I want to give

17
00:00:46,750 --> 00:00:51,820
you a bit of a broader picture about the

18
00:00:48,549 --> 00:00:54,309
no sequel ecosystem today so maybe you

19
00:00:51,820 --> 00:00:55,269
don't know TB engines comm it's a bit

20
00:00:54,309 --> 00:00:57,430
like the Tioga

21
00:00:55,269 --> 00:01:00,250
index for programming languages this one

22
00:00:57,430 --> 00:01:03,250
just the same thing for data stores and

23
00:01:00,250 --> 00:01:05,260
when you look at that you can see that

24
00:01:03,250 --> 00:01:08,200
the relational databases are still very

25
00:01:05,260 --> 00:01:10,719
much on top but you have one will be

26
00:01:08,200 --> 00:01:12,430
here is the top no sequel datastore in

27
00:01:10,719 --> 00:01:15,669
at least then you have plastic search

28
00:01:12,430 --> 00:01:17,770
readies and the recently Cassandra

29
00:01:15,670 --> 00:01:19,240
overtook Microsoft Access which

30
00:01:17,770 --> 00:01:19,810
shouldn't be in at least in the first

31
00:01:19,240 --> 00:01:22,839
place

32
00:01:19,810 --> 00:01:25,840
but for some reason it is and I will

33
00:01:22,840 --> 00:01:27,969
pick Mom will be ready and elastic

34
00:01:25,840 --> 00:01:31,810
search to dive into some security

35
00:01:27,969 --> 00:01:34,270
concepts as we go a lot so let's jump

36
00:01:31,810 --> 00:01:37,649
into it everybody knows little poppy

37
00:01:34,270 --> 00:01:40,600
cables I guess for sequel injections and

38
00:01:37,649 --> 00:01:43,810
maybe don't call your children like drop

39
00:01:40,600 --> 00:01:45,520
table students or maybe do to figure out

40
00:01:43,810 --> 00:01:47,950
if people configured their system

41
00:01:45,520 --> 00:01:51,280
correctly and set it up correctly the

42
00:01:47,950 --> 00:01:53,770
nice thing about here or about this in

43
00:01:51,280 --> 00:01:55,869
no secret is if you don't have secret

44
00:01:53,770 --> 00:01:59,199
that means you don't have sequel

45
00:01:55,869 --> 00:02:01,869
injections right maybe it's not as

46
00:01:59,200 --> 00:02:05,139
simple we'll revisit the topic a couple

47
00:02:01,869 --> 00:02:08,380
of times and so let's jump into MongoDB

48
00:02:05,139 --> 00:02:10,210
and see what we can do there I'm just

49
00:02:08,380 --> 00:02:13,209
making fun of mummy because everybody

50
00:02:10,210 --> 00:02:15,580
does um now that they are public you can

51
00:02:13,209 --> 00:02:16,800
lose your data and your money with them

52
00:02:15,580 --> 00:02:18,660
though admit

53
00:02:16,800 --> 00:02:20,760
they have been doing pretty well on the

54
00:02:18,660 --> 00:02:22,530
stock market and also like their

55
00:02:20,760 --> 00:02:25,019
consistency models and everything have

56
00:02:22,530 --> 00:02:26,730
improved a lot over time so let's not

57
00:02:25,020 --> 00:02:30,260
make fun of that but let's look at the

58
00:02:26,730 --> 00:02:33,810
security aspects so first off injections

59
00:02:30,260 --> 00:02:35,730
maybe you remember the ass brother wanna

60
00:02:33,810 --> 00:02:38,160
be Facebook killer or whatever from ten

61
00:02:35,730 --> 00:02:39,209
years ago so that was initially written

62
00:02:38,160 --> 00:02:41,760
in MongoDB

63
00:02:39,210 --> 00:02:44,370
and this is one of the code samples of

64
00:02:41,760 --> 00:02:46,890
what they had in there and this is a

65
00:02:44,370 --> 00:02:49,590
classic injection problem and since they

66
00:02:46,890 --> 00:02:51,480
don't have sequel they do support

67
00:02:49,590 --> 00:02:53,910
JavaScript instead so now you have a

68
00:02:51,480 --> 00:02:56,880
JavaScript injection so here when you

69
00:02:53,910 --> 00:02:59,520
just pass in a query and don't sanitize

70
00:02:56,880 --> 00:03:01,230
it and just run a random query which you

71
00:02:59,520 --> 00:03:03,660
shouldn't really do and it's not really

72
00:03:01,230 --> 00:03:06,359
a best practice in MongoDB but you can

73
00:03:03,660 --> 00:03:08,730
then you kind of revisit the same issues

74
00:03:06,360 --> 00:03:10,710
that you had in the past and to have a

75
00:03:08,730 --> 00:03:13,890
couple of these functions which are

76
00:03:10,710 --> 00:03:16,350
prone to JavaScript injections like when

77
00:03:13,890 --> 00:03:18,929
you run an evil or you run the command

78
00:03:16,350 --> 00:03:20,989
in the MapReduce or you just run the

79
00:03:18,930 --> 00:03:24,360
where where you can provide JavaScript

80
00:03:20,989 --> 00:03:27,739
those are all vulnerable to injections

81
00:03:24,360 --> 00:03:31,620
so don't do that if you can avoid it

82
00:03:27,739 --> 00:03:33,180
and you can just disable JavaScript so

83
00:03:31,620 --> 00:03:35,940
if you know that you will never run

84
00:03:33,180 --> 00:03:38,070
JavaScript in your data store just

85
00:03:35,940 --> 00:03:41,880
disable the feature and you're done with

86
00:03:38,070 --> 00:03:42,870
it next up authentication which is kind

87
00:03:41,880 --> 00:03:47,070
of an interesting topic

88
00:03:42,870 --> 00:03:49,410
so it's has been known for quite a long

89
00:03:47,070 --> 00:03:51,000
time and this is German and I'm sorry

90
00:03:49,410 --> 00:03:53,880
for the German but it basically says

91
00:03:51,000 --> 00:03:56,550
that some German University found 40,000

92
00:03:53,880 --> 00:04:00,180
unsecured MongoDB data source on the

93
00:03:56,550 --> 00:04:03,120
internet more than five years ago and it

94
00:04:00,180 --> 00:04:05,220
took a while until people came from

95
00:04:03,120 --> 00:04:07,350
academia to the real world and figured

96
00:04:05,220 --> 00:04:11,070
out a way to make money out of that but

97
00:04:07,350 --> 00:04:13,109
then kind of like the ride was on so

98
00:04:11,070 --> 00:04:15,480
people then found out that you could

99
00:04:13,110 --> 00:04:18,810
rent some people for their data so

100
00:04:15,480 --> 00:04:21,180
electrically you download the data store

101
00:04:18,810 --> 00:04:22,950
it somewhere secure delete it on the

102
00:04:21,180 --> 00:04:24,300
server of whoever owns the data and just

103
00:04:22,950 --> 00:04:26,550
leave a note and say like hey if you

104
00:04:24,300 --> 00:04:28,620
want to have your data back please pay

105
00:04:26,550 --> 00:04:30,010
here and we will give you back your data

106
00:04:28,620 --> 00:04:32,260
if they really have a

107
00:04:30,010 --> 00:04:35,620
the data and can return it is a

108
00:04:32,260 --> 00:04:38,800
different question but maybe they do and

109
00:04:35,620 --> 00:04:40,870
so this became quite a big sport which

110
00:04:38,800 --> 00:04:43,120
leads us to the questions or leads us to

111
00:04:40,870 --> 00:04:45,880
another example first here where

112
00:04:43,120 --> 00:04:47,710
somebody says like okay I found some

113
00:04:45,880 --> 00:04:49,900
data that is unsecured please give me a

114
00:04:47,710 --> 00:04:52,150
contact book where how we can secure

115
00:04:49,900 --> 00:04:54,370
that and then they'll stay okay but how

116
00:04:52,150 --> 00:04:56,159
did you get our contact details in the

117
00:04:54,370 --> 00:04:59,200
cell like well there was part of the

118
00:04:56,160 --> 00:05:01,900
open datastore that we found here so

119
00:04:59,200 --> 00:05:03,700
that leads us to the question is long

120
00:05:01,900 --> 00:05:06,310
will it be binding to all interfaces

121
00:05:03,700 --> 00:05:09,580
like not just local host but all

122
00:05:06,310 --> 00:05:11,530
interfaces by default and no it is not

123
00:05:09,580 --> 00:05:16,450
anymore though it used to for quite a

124
00:05:11,530 --> 00:05:18,940
while so since three point six in 2017

125
00:05:16,450 --> 00:05:21,700
so it took some time from people finding

126
00:05:18,940 --> 00:05:24,400
that and then mentioning it that was

127
00:05:21,700 --> 00:05:26,710
abled by for all the binaries that they

128
00:05:24,400 --> 00:05:28,780
put out so admittedly for the debian and

129
00:05:26,710 --> 00:05:31,330
RPM packages if i'm not mistaken that

130
00:05:28,780 --> 00:05:34,030
has been disabled for a much longer time

131
00:05:31,330 --> 00:05:36,159
so now every software that they release

132
00:05:34,030 --> 00:05:38,469
and every way that they package it it

133
00:05:36,160 --> 00:05:40,480
does only bind to local host anymore

134
00:05:38,470 --> 00:05:42,130
which is a good first step which leads

135
00:05:40,480 --> 00:05:45,220
us to the second question is

136
00:05:42,130 --> 00:05:48,310
authentication enabled by default and it

137
00:05:45,220 --> 00:05:50,500
is not which is kind of unfortunate so

138
00:05:48,310 --> 00:05:53,260
you need to enable authentication true

139
00:05:50,500 --> 00:05:55,390
or captive or flag when you start the

140
00:05:53,260 --> 00:05:57,370
binary and they also have a slightly

141
00:05:55,390 --> 00:05:59,050
weird configuration dance when you set

142
00:05:57,370 --> 00:06:01,510
it up the first time you so you start

143
00:05:59,050 --> 00:06:03,910
the process first without authentication

144
00:06:01,510 --> 00:06:06,490
you add your user and only then can you

145
00:06:03,910 --> 00:06:09,310
login with that user that you had to

146
00:06:06,490 --> 00:06:11,830
create without authentication first but

147
00:06:09,310 --> 00:06:13,720
it is possible I guess they still don't

148
00:06:11,830 --> 00:06:16,479
have that enabled by default just to

149
00:06:13,720 --> 00:06:17,950
keep the bootstrapping problem or to set

150
00:06:16,480 --> 00:06:20,170
up as simple as possible which is

151
00:06:17,950 --> 00:06:25,000
especially important in the distributed

152
00:06:20,170 --> 00:06:27,100
system also TLS is now included or has

153
00:06:25,000 --> 00:06:30,040
been included for quite a long time in

154
00:06:27,100 --> 00:06:33,490
pretty much any binary so this is the

155
00:06:30,040 --> 00:06:35,740
good stuff just remember don't run

156
00:06:33,490 --> 00:06:37,990
random scripts from users and enable

157
00:06:35,740 --> 00:06:40,510
authentication to make your life more

158
00:06:37,990 --> 00:06:41,950
secure which leads us to ready Stan and

159
00:06:40,510 --> 00:06:43,630
Redis has a couple

160
00:06:41,950 --> 00:06:47,020
interesting points so first of

161
00:06:43,630 --> 00:06:50,620
injections are totally thing as well and

162
00:06:47,020 --> 00:06:52,150
they even claim insecurity that well

163
00:06:50,620 --> 00:06:54,790
while they don't have JavaScript they

164
00:06:52,150 --> 00:06:56,620
have Louis critics that using Lua

165
00:06:54,790 --> 00:06:58,740
scripts from an untrustworthy storm

166
00:06:56,620 --> 00:07:01,300
source is a strange use case and

167
00:06:58,740 --> 00:07:02,920
probably many people agree but it's

168
00:07:01,300 --> 00:07:04,260
still something that will happen again

169
00:07:02,920 --> 00:07:09,760
and again

170
00:07:04,260 --> 00:07:12,969
also Salvatore the author who's an

171
00:07:09,760 --> 00:07:15,670
economist and theorist he had put out

172
00:07:12,970 --> 00:07:18,040
this blog post that a valid abbreviation

173
00:07:15,670 --> 00:07:21,010
of Lua scripts is a feature that should

174
00:07:18,040 --> 00:07:25,090
be on by default he released that in

175
00:07:21,010 --> 00:07:27,099
June of 2018 and I think very soon after

176
00:07:25,090 --> 00:07:29,830
that people found several security

177
00:07:27,100 --> 00:07:33,130
issues in that that were then fixed

178
00:07:29,830 --> 00:07:34,900
which is slightly ironic but that's

179
00:07:33,130 --> 00:07:38,680
probably what you get when you have

180
00:07:34,900 --> 00:07:41,049
scripting in your datastore um coming to

181
00:07:38,680 --> 00:07:44,320
authentication Redis has a bit more of

182
00:07:41,050 --> 00:07:47,340
an interesting approach so a lot of the

183
00:07:44,320 --> 00:07:50,320
open various instances are infected by

184
00:07:47,340 --> 00:07:52,570
whatever kind of malware also partly

185
00:07:50,320 --> 00:07:55,180
brought deep because so matura

186
00:07:52,570 --> 00:07:57,070
has the very nice blog post showing how

187
00:07:55,180 --> 00:07:59,110
to actually crack and open Redis

188
00:07:57,070 --> 00:08:01,270
instance and in his opinion he wants to

189
00:07:59,110 --> 00:08:03,280
share that because the bad people will

190
00:08:01,270 --> 00:08:05,830
figure that out anyway and he just wants

191
00:08:03,280 --> 00:08:07,750
to educate anybody how easy it is to

192
00:08:05,830 --> 00:08:09,729
actually break into the server if you

193
00:08:07,750 --> 00:08:11,680
have an open various instance running

194
00:08:09,730 --> 00:08:15,640
and it goes into quite a lot of detail

195
00:08:11,680 --> 00:08:19,330
in his plot as well those rate is fine

196
00:08:15,640 --> 00:08:22,419
to all interfaces it does but with a

197
00:08:19,330 --> 00:08:25,659
twist so what is the twist and they have

198
00:08:22,420 --> 00:08:28,360
something called protected mode so if

199
00:08:25,660 --> 00:08:30,070
you run the query locally it will just

200
00:08:28,360 --> 00:08:33,490
run the query and answer that in the

201
00:08:30,070 --> 00:08:35,830
default settings but if you query it

202
00:08:33,490 --> 00:08:38,740
remotely we will just respond with an

203
00:08:35,830 --> 00:08:40,720
error and say like well remote queries

204
00:08:38,740 --> 00:08:42,460
you need to enable that explicitly

205
00:08:40,720 --> 00:08:44,350
either in the configuration or you need

206
00:08:42,460 --> 00:08:47,620
to set up security which probably would

207
00:08:44,350 --> 00:08:50,020
make more sense but by default it will

208
00:08:47,620 --> 00:08:52,420
only answer queries on localhost and

209
00:08:50,020 --> 00:08:55,079
give you a proper error message from

210
00:08:52,420 --> 00:08:57,030
remote so they picked this

211
00:08:55,080 --> 00:08:59,340
just approach of not just finding two

212
00:08:57,030 --> 00:09:01,260
locals but rather opening up to external

213
00:08:59,340 --> 00:09:03,780
interfaces to give you a better error

214
00:09:01,260 --> 00:09:07,819
message and this has been around for

215
00:09:03,780 --> 00:09:11,939
quite a while security was otherwise on

216
00:09:07,820 --> 00:09:14,190
6.0 came out quite recently and 6.0

217
00:09:11,940 --> 00:09:17,400
changed a lot in terms of security so

218
00:09:14,190 --> 00:09:19,830
before that version their documentation

219
00:09:17,400 --> 00:09:21,990
claimed a tiny layer of indicate

220
00:09:19,830 --> 00:09:25,440
authentication that is optionally turned

221
00:09:21,990 --> 00:09:27,570
on is what they provide and there was no

222
00:09:25,440 --> 00:09:31,310
authorization building so what you

223
00:09:27,570 --> 00:09:34,230
basically got was you had one password

224
00:09:31,310 --> 00:09:35,819
that you could use with AWS password and

225
00:09:34,230 --> 00:09:38,370
then run whatever command you wanted

226
00:09:35,820 --> 00:09:40,320
that password was stored in plain text

227
00:09:38,370 --> 00:09:43,080
in the Redis configuration file and

228
00:09:40,320 --> 00:09:45,840
there was no built-in TLS or

229
00:09:43,080 --> 00:09:48,120
rate-limiting so you would have to run

230
00:09:45,840 --> 00:09:50,940
your own proxy in front to for example

231
00:09:48,120 --> 00:09:52,590
terminate TLS and the good or bad thing

232
00:09:50,940 --> 00:09:55,230
about Redis is that it's very fast and

233
00:09:52,590 --> 00:09:57,930
since there is no rate limiting if you

234
00:09:55,230 --> 00:09:59,700
can run lots of requests against it you

235
00:09:57,930 --> 00:10:02,099
can also try to brute-force passwords

236
00:09:59,700 --> 00:10:04,890
very quickly so pretty very good

237
00:10:02,100 --> 00:10:07,820
password here otherwise that will

238
00:10:04,890 --> 00:10:12,449
probably be not helping you out too much

239
00:10:07,820 --> 00:10:14,250
but since 6-0 which came out bit earlier

240
00:10:12,450 --> 00:10:15,960
this year things have tightened down

241
00:10:14,250 --> 00:10:18,210
quite a bit so now you have access

242
00:10:15,960 --> 00:10:20,400
control lists where you can whitelist

243
00:10:18,210 --> 00:10:22,590
commands or you can wipe this specific

244
00:10:20,400 --> 00:10:25,140
key spaces and now you have multiple

245
00:10:22,590 --> 00:10:27,810
users and you can run authentication for

246
00:10:25,140 --> 00:10:29,910
the user with password also you can

247
00:10:27,810 --> 00:10:32,640
while you can still store credentials in

248
00:10:29,910 --> 00:10:34,860
plaintext in the red configuration file

249
00:10:32,640 --> 00:10:40,100
you can alternatively and it's either

250
00:10:34,860 --> 00:10:44,190
this word the other use or store the

251
00:10:40,100 --> 00:10:48,240
sha-256 hash in NaCl conf to actually

252
00:10:44,190 --> 00:10:51,360
store that and you can enable and TLS in

253
00:10:48,240 --> 00:10:53,610
the build now so Redis also has TLS

254
00:10:51,360 --> 00:10:54,090
support built-in so a lot of stuff has

255
00:10:53,610 --> 00:10:56,910
improved

256
00:10:54,090 --> 00:10:59,160
one final interesting feature of Redis

257
00:10:56,910 --> 00:11:01,469
is that you can hide commands and that

258
00:10:59,160 --> 00:11:04,650
was especially useful before the ACL

259
00:11:01,470 --> 00:11:06,300
world where so before six when you could

260
00:11:04,650 --> 00:11:07,319
disable specific features what you would

261
00:11:06,300 --> 00:11:08,969
do before then

262
00:11:07,320 --> 00:11:11,430
is dangerous command

263
00:11:08,970 --> 00:11:13,709
you could just rename so what that looks

264
00:11:11,430 --> 00:11:16,769
like is in the Redis configuration file

265
00:11:13,709 --> 00:11:18,268
you would store this and to reset or

266
00:11:16,769 --> 00:11:20,250
change that you would need to restart

267
00:11:18,269 --> 00:11:24,060
the server but would you what you could

268
00:11:20,250 --> 00:11:26,850
do is let's say you want to rename the

269
00:11:24,060 --> 00:11:29,459
command config and you run this rename

270
00:11:26,850 --> 00:11:31,949
command command with config and then my

271
00:11:29,459 --> 00:11:34,560
secret config name so basically to run

272
00:11:31,949 --> 00:11:36,899
confid you could only access it if you

273
00:11:34,560 --> 00:11:39,779
know that it has to be called my secret

274
00:11:36,899 --> 00:11:42,509
country game so basically you would need

275
00:11:39,779 --> 00:11:44,759
to know what did you rename a command to

276
00:11:42,509 --> 00:11:47,819
actually be able to use it and some

277
00:11:44,759 --> 00:11:51,449
people used hashing with the salt to

278
00:11:47,819 --> 00:11:53,519
actually just then use that hash to

279
00:11:51,449 --> 00:11:56,370
access commands that they had been

280
00:11:53,519 --> 00:11:58,529
hiding before and not explicitly rename

281
00:11:56,370 --> 00:12:00,689
it to some other command what you could

282
00:11:58,529 --> 00:12:02,459
also do is you could disable a command

283
00:12:00,689 --> 00:12:05,219
entirely by saying rename command

284
00:12:02,459 --> 00:12:07,680
conflict and then give it an empty name

285
00:12:05,220 --> 00:12:10,680
so there is nothing in between the

286
00:12:07,680 --> 00:12:13,019
quotations here so that command would

287
00:12:10,680 --> 00:12:15,089
just be disabled and you couldn't access

288
00:12:13,019 --> 00:12:16,649
it at all this was a global

289
00:12:15,089 --> 00:12:20,699
configuration and one of the more

290
00:12:16,649 --> 00:12:24,000
intriguing security aspect or approaches

291
00:12:20,699 --> 00:12:26,819
I would say finally elasticsearch so

292
00:12:24,000 --> 00:12:28,769
does it bind to all interfaces not

293
00:12:26,819 --> 00:12:32,309
anymore for a long time so we stopped

294
00:12:28,769 --> 00:12:34,949
that into zero which came out like I

295
00:12:32,309 --> 00:12:37,469
want to say six years ago or five years

296
00:12:34,949 --> 00:12:39,209
ago or something like that and so it has

297
00:12:37,470 --> 00:12:40,069
only been binding to localhost for a

298
00:12:39,209 --> 00:12:44,219
long time

299
00:12:40,069 --> 00:12:46,290
security has become free a year ago or

300
00:12:44,220 --> 00:12:48,689
so before that was one of the key

301
00:12:46,290 --> 00:12:51,269
features though since ask such speeds

302
00:12:48,689 --> 00:12:54,959
HTTP you could very easily protect that

303
00:12:51,269 --> 00:12:57,509
with an HTTP reverse proxy like nginx

304
00:12:54,959 --> 00:13:00,329
for example and also terminate TLS but a

305
00:12:57,509 --> 00:13:03,540
year ago those features also because of

306
00:13:00,329 --> 00:13:05,399
kubernetes became free because there is

307
00:13:03,540 --> 00:13:08,699
no easy security model in communities

308
00:13:05,399 --> 00:13:13,079
for example is authentication enabled by

309
00:13:08,699 --> 00:13:14,729
default not yet maybe we can get to that

310
00:13:13,079 --> 00:13:17,160
in the next major version but you can

311
00:13:14,730 --> 00:13:20,279
see since we only added that in 7.1 and

312
00:13:17,160 --> 00:13:22,610
not 7.0 it would have been a breaking

313
00:13:20,279 --> 00:13:25,790
change so we didn't enable

314
00:13:22,610 --> 00:13:28,130
by default yet so 8.0 will be the next

315
00:13:25,790 --> 00:13:30,680
chance where we might be able to do that

316
00:13:28,130 --> 00:13:34,189
though that's still a bit off so we

317
00:13:30,680 --> 00:13:35,510
don't really know yet and scripting is

318
00:13:34,190 --> 00:13:37,730
one of the interesting approaches here

319
00:13:35,510 --> 00:13:40,220
if you look at the bad security issues

320
00:13:37,730 --> 00:13:42,440
that elasticsearch had in the past a lot

321
00:13:40,220 --> 00:13:44,660
were related to scripting like we relied

322
00:13:42,440 --> 00:13:46,310
heavily on groovy then every now and

323
00:13:44,660 --> 00:13:48,699
then somebody would find some way to

324
00:13:46,310 --> 00:13:51,050
break out of the groovy sandbox and

325
00:13:48,700 --> 00:13:53,240
could then potentially take over

326
00:13:51,050 --> 00:13:54,829
elasticsearch nodes and we had a lot of

327
00:13:53,240 --> 00:13:58,610
the really bad security issues where

328
00:13:54,829 --> 00:14:00,529
because of that so we create their own

329
00:13:58,610 --> 00:14:02,120
scripting language which is called

330
00:14:00,529 --> 00:14:04,130
painless which might not be the perfect

331
00:14:02,120 --> 00:14:06,410
name because people find it pretty

332
00:14:04,130 --> 00:14:08,060
painful every now and then we hire the

333
00:14:06,410 --> 00:14:10,579
developer to actually write and create

334
00:14:08,060 --> 00:14:13,550
that it took quite some time to write

335
00:14:10,579 --> 00:14:15,140
and then people often ask like why do

336
00:14:13,550 --> 00:14:16,339
you even create your own scripting

337
00:14:15,140 --> 00:14:18,410
language when there are so many out

338
00:14:16,339 --> 00:14:21,350
there basically because we wanted to

339
00:14:18,410 --> 00:14:24,529
have two attributes and those are

340
00:14:21,350 --> 00:14:26,300
security and performance and painless

341
00:14:24,529 --> 00:14:28,550
has been out for a couple of years now

342
00:14:26,300 --> 00:14:30,529
and I'm not really aware of any security

343
00:14:28,550 --> 00:14:33,069
issues we had with that so at least from

344
00:14:30,529 --> 00:14:36,230
the security perspective it worked and

345
00:14:33,070 --> 00:14:38,449
also performance is much better than

346
00:14:36,230 --> 00:14:39,019
Ruby because of the way we can store the

347
00:14:38,449 --> 00:14:41,120
bytecode

348
00:14:39,019 --> 00:14:43,610
so it was just custom-built for this

349
00:14:41,120 --> 00:14:46,970
specific use case and while you don't

350
00:14:43,610 --> 00:14:51,769
have to allow lists in the first place

351
00:14:46,970 --> 00:14:54,440
what you want to have okay and in a

352
00:14:51,769 --> 00:14:57,170
later version then this came out in 5-0

353
00:14:54,440 --> 00:14:59,060
if I remember correctly in the red next

354
00:14:57,170 --> 00:15:01,370
major version the other scripting

355
00:14:59,060 --> 00:15:03,079
languages were removed and since then we

356
00:15:01,370 --> 00:15:03,949
don't have any security issues around

357
00:15:03,079 --> 00:15:06,829
those anymore

358
00:15:03,949 --> 00:15:08,990
luckily ransoming is still an

359
00:15:06,829 --> 00:15:12,410
interesting problems so every now and

360
00:15:08,990 --> 00:15:14,600
then you can just look on Sudan for open

361
00:15:12,410 --> 00:15:16,880
elasticsearch data source so here I look

362
00:15:14,600 --> 00:15:19,040
for a default port which is 9200

363
00:15:16,880 --> 00:15:22,430
anything that responds with the 200 okay

364
00:15:19,040 --> 00:15:25,880
is potentially an elasticsearch instance

365
00:15:22,430 --> 00:15:28,550
like this one here and if you query one

366
00:15:25,880 --> 00:15:31,880
of these instances then you can just

367
00:15:28,550 --> 00:15:33,680
check by which in the sense of more less

368
00:15:31,880 --> 00:15:35,390
tables are there and then you might have

369
00:15:33,680 --> 00:15:37,550
one that says for example

370
00:15:35,390 --> 00:15:40,040
is read and then when you look at that

371
00:15:37,550 --> 00:15:41,959
and you will potentially find something

372
00:15:40,040 --> 00:15:43,969
like this and you have this nice message

373
00:15:41,960 --> 00:15:47,210
here which says well if you want to have

374
00:15:43,970 --> 00:15:49,190
your data back send 0.5 Bitcoin or that

375
00:15:47,210 --> 00:15:53,840
fluctuated because of their fluctuating

376
00:15:49,190 --> 00:15:56,240
price of Bitcoin so send some whatever

377
00:15:53,840 --> 00:15:59,180
bitcoin here and we might be able to

378
00:15:56,240 --> 00:16:00,890
give you back your data and if all of

379
00:15:59,180 --> 00:16:03,199
those instances that you will find today

380
00:16:00,890 --> 00:16:06,680
are honey pots or how many contain real

381
00:16:03,200 --> 00:16:08,030
either is it up for debate but open

382
00:16:06,680 --> 00:16:10,099
elasticsearch instances are

383
00:16:08,030 --> 00:16:14,089
unfortunately more common that we would

384
00:16:10,100 --> 00:16:16,790
then we would want it to be and yeah

385
00:16:14,090 --> 00:16:18,680
depending on the Bitcoin price 0.5 might

386
00:16:16,790 --> 00:16:20,839
be pretty expensive one not so expensive

387
00:16:18,680 --> 00:16:23,060
and I think at some point when there was

388
00:16:20,840 --> 00:16:24,800
this extreme hype around Bitcoin they

389
00:16:23,060 --> 00:16:27,619
would just say like whatever is a

390
00:16:24,800 --> 00:16:29,569
thousand dollars today just sin send us

391
00:16:27,620 --> 00:16:31,460
the equivalent in Bitcoin because if

392
00:16:29,570 --> 00:16:34,880
they left the message and five days like

393
00:16:31,460 --> 00:16:37,130
the price might have tripled already so

394
00:16:34,880 --> 00:16:38,960
to avoid that they at some point switch

395
00:16:37,130 --> 00:16:41,870
to dollar equivalent but I think now

396
00:16:38,960 --> 00:16:43,600
Bitcoin is a bit more stable again and

397
00:16:41,870 --> 00:16:47,390
maybe they can stick to record prices

398
00:16:43,600 --> 00:16:49,250
and finally sometimes you might run into

399
00:16:47,390 --> 00:16:50,689
the so-called matroyshka problem or I

400
00:16:49,250 --> 00:16:52,520
call it the math rush the problem that

401
00:16:50,690 --> 00:16:54,560
somebody takes your data and leaves a

402
00:16:52,520 --> 00:16:56,600
message the data store is still open

403
00:16:54,560 --> 00:16:58,219
so somebody else comes takes that

404
00:16:56,600 --> 00:17:00,260
message and leaves their own message and

405
00:16:58,220 --> 00:17:02,960
to get back to the person that has your

406
00:17:00,260 --> 00:17:05,390
data initially you would need to go from

407
00:17:02,960 --> 00:17:08,420
like one hot rush cut to the next to get

408
00:17:05,390 --> 00:17:12,220
back to the original person who has your

409
00:17:08,420 --> 00:17:16,190
data which you probably don't want to do

410
00:17:12,220 --> 00:17:17,900
but yeah and we ourselves ran some open

411
00:17:16,190 --> 00:17:19,550
data stores every now and then and for

412
00:17:17,900 --> 00:17:22,280
example in Germany the German search

413
00:17:19,550 --> 00:17:24,560
would just scan German IP addresses and

414
00:17:22,280 --> 00:17:26,780
then send you met warning messages

415
00:17:24,560 --> 00:17:29,780
through your provider to please fix that

416
00:17:26,780 --> 00:17:32,510
because this is a very unsecure set up

417
00:17:29,780 --> 00:17:34,550
and you definitely don't want to have

418
00:17:32,510 --> 00:17:36,860
that and you don't want to rely on the

419
00:17:34,550 --> 00:17:39,560
search to be faster to find your open

420
00:17:36,860 --> 00:17:43,280
elasticsearch instances then the bad guy

421
00:17:39,560 --> 00:17:47,270
is finding them so just don't run open

422
00:17:43,280 --> 00:17:48,410
data stores and so to wrap up injections

423
00:17:47,270 --> 00:17:49,790
are still a thing and

424
00:17:48,410 --> 00:17:52,610
while it doesn't have to be sequel it

425
00:17:49,790 --> 00:17:54,889
could be javascript or lure or groovy or

426
00:17:52,610 --> 00:17:58,179
whatever you have that you don't tighten

427
00:17:54,890 --> 00:18:00,920
down and it was security

428
00:17:58,180 --> 00:18:03,050
hopefully the data stores will do that

429
00:18:00,920 --> 00:18:05,240
by default like the relational databases

430
00:18:03,050 --> 00:18:07,550
had a bit more time to learn the lesson

431
00:18:05,240 --> 00:18:09,500
and they do that by default now I hope

432
00:18:07,550 --> 00:18:12,770
the no sequel data stores will get there

433
00:18:09,500 --> 00:18:15,140
soon as well d creative lag red is

434
00:18:12,770 --> 00:18:18,560
slight with the protected mode and

435
00:18:15,140 --> 00:18:21,920
disabling or renaming commands or maybe

436
00:18:18,560 --> 00:18:24,230
not I'm still unsure if that is very

437
00:18:21,920 --> 00:18:26,780
creative and interesting or just like

438
00:18:24,230 --> 00:18:28,730
kind of like not the proper solution so

439
00:18:26,780 --> 00:18:31,460
you should find a proper solution but

440
00:18:28,730 --> 00:18:33,620
it's definitely interesting custom

441
00:18:31,460 --> 00:18:36,020
scripting can make sense in terms of

442
00:18:33,620 --> 00:18:39,439
security especially when you don't want

443
00:18:36,020 --> 00:18:43,430
to put various functions like reflection

444
00:18:39,440 --> 00:18:47,270
or so on and disallow this or denialist

445
00:18:43,430 --> 00:18:49,160
and security unfortunately takes time

446
00:18:47,270 --> 00:18:52,639
so since relational database has had

447
00:18:49,160 --> 00:18:54,260
more time to mature they generally do a

448
00:18:52,640 --> 00:18:55,700
bit better than a no sequel later sort

449
00:18:54,260 --> 00:18:58,100
but the no sequel data stores are

450
00:18:55,700 --> 00:19:01,270
catching up and I hope we will have like

451
00:18:58,100 --> 00:19:03,050
everything like here less this available

452
00:19:01,270 --> 00:19:04,879
authentication authorization are

453
00:19:03,050 --> 00:19:07,760
available and will be enabled by default

454
00:19:04,880 --> 00:19:10,430
I hope that we reach that stage soon

455
00:19:07,760 --> 00:19:13,940
enough and the ransomware attacks will

456
00:19:10,430 --> 00:19:16,010
become more an uncommon sighting of the

457
00:19:13,940 --> 00:19:20,540
past more than a common occurrence which

458
00:19:16,010 --> 00:19:22,700
it is unfortunately still and that let's

459
00:19:20,540 --> 00:19:24,879
head to the questions thanks so much for

460
00:19:22,700 --> 00:19:24,880
listening

