1
00:00:04,160 --> 00:00:06,798
hello

2
00:00:04,799 --> 00:00:09,120
and welcome to my presentation on

3
00:00:06,799 --> 00:00:09,920
orchestrating return operations safely

4
00:00:09,120 --> 00:00:11,758
for both

5
00:00:09,920 --> 00:00:13,040
the offending and also the defending

6
00:00:11,759 --> 00:00:15,120
teams

7
00:00:13,040 --> 00:00:17,198
my name is yanish anilis and i am the

8
00:00:15,120 --> 00:00:18,400
cyber risk services director at deloitte

9
00:00:17,199 --> 00:00:20,640
cyprus

10
00:00:18,400 --> 00:00:22,400
and during the last 11 years i have been

11
00:00:20,640 --> 00:00:25,680
with deloitte i have been involved with

12
00:00:22,400 --> 00:00:28,240
many projects across multiple domains

13
00:00:25,680 --> 00:00:30,000
you can find me often on twitter which

14
00:00:28,240 --> 00:00:32,159
is my primary source of learning

15
00:00:30,000 --> 00:00:34,000
the latest tips and tricks around

16
00:00:32,159 --> 00:00:37,919
information security

17
00:00:34,000 --> 00:00:41,120
i try to maintain a blog and i really

18
00:00:37,920 --> 00:00:42,160
enjoy presenting and attending as many

19
00:00:41,120 --> 00:00:45,280
conferences

20
00:00:42,160 --> 00:00:47,038
as i can and giving but giving back to

21
00:00:45,280 --> 00:00:48,559
the community as much as i can so i

22
00:00:47,039 --> 00:00:50,719
would like to thank

23
00:00:48,559 --> 00:00:53,039
besides athens for this opportunity to

24
00:00:50,719 --> 00:00:55,840
present

25
00:00:53,039 --> 00:00:56,480
before we begin let me start by saying

26
00:00:55,840 --> 00:00:58,480
that

27
00:00:56,480 --> 00:00:59,519
this presentation is not about best

28
00:00:58,480 --> 00:01:02,160
practices

29
00:00:59,520 --> 00:01:03,280
and not the bible and how you should

30
00:01:02,160 --> 00:01:05,920
operate

31
00:01:03,280 --> 00:01:07,040
this presentation is aimed at giving you

32
00:01:05,920 --> 00:01:09,280
some ideas

33
00:01:07,040 --> 00:01:10,320
on how you should operate during return

34
00:01:09,280 --> 00:01:13,280
operations

35
00:01:10,320 --> 00:01:14,320
to be safe and to also protect the

36
00:01:13,280 --> 00:01:17,119
client's data

37
00:01:14,320 --> 00:01:18,320
while we're doing this assessment

38
00:01:17,119 --> 00:01:20,960
because of the time

39
00:01:18,320 --> 00:01:21,758
is not feasible to cover every single

40
00:01:20,960 --> 00:01:23,520
technique or

41
00:01:21,759 --> 00:01:25,600
every single aspect of aerating

42
00:01:23,520 --> 00:01:27,840
operation

43
00:01:25,600 --> 00:01:29,520
some things are skipped but i'm giving

44
00:01:27,840 --> 00:01:32,720
out links at the end of

45
00:01:29,520 --> 00:01:35,199
the presentation and

46
00:01:32,720 --> 00:01:37,039
it's also very important to note that

47
00:01:35,200 --> 00:01:37,600
the techniques that i'm going to present

48
00:01:37,040 --> 00:01:40,479
have been

49
00:01:37,600 --> 00:01:42,479
first documented by other people so

50
00:01:40,479 --> 00:01:46,560
please be so kind and give the

51
00:01:42,479 --> 00:01:46,560
appropriate credit where credit is due

52
00:01:47,200 --> 00:01:53,360
and let's dive into the presentation

53
00:01:50,720 --> 00:01:54,560
when we're designing the infrastructure

54
00:01:53,360 --> 00:01:57,759
prior to

55
00:01:54,560 --> 00:01:59,600
starting the operation we have to choose

56
00:01:57,759 --> 00:02:00,960
on the model that we want to operate

57
00:01:59,600 --> 00:02:02,880
under

58
00:02:00,960 --> 00:02:04,479
so in essence there are three different

59
00:02:02,880 --> 00:02:08,239
models to choose from

60
00:02:04,479 --> 00:02:10,080
one being the fully cloud model where

61
00:02:08,239 --> 00:02:12,560
everything related to the infrastructure

62
00:02:10,080 --> 00:02:16,720
of our of our operation

63
00:02:12,560 --> 00:02:19,280
is online on on cloud servers

64
00:02:16,720 --> 00:02:20,000
then we have the self-hosted model where

65
00:02:19,280 --> 00:02:22,560
everything

66
00:02:20,000 --> 00:02:24,480
is the opposite of the cloud model

67
00:02:22,560 --> 00:02:27,599
everything is hosted

68
00:02:24,480 --> 00:02:28,399
on site and lastly we have the hybrid

69
00:02:27,599 --> 00:02:30,640
model

70
00:02:28,400 --> 00:02:31,599
where we have some critical servers

71
00:02:30,640 --> 00:02:34,160
in-house

72
00:02:31,599 --> 00:02:36,000
and then we have some cloud redirectors

73
00:02:34,160 --> 00:02:38,720
for handling the traffic

74
00:02:36,000 --> 00:02:39,599
we usually operate with the hybrid model

75
00:02:38,720 --> 00:02:43,200
which is

76
00:02:39,599 --> 00:02:43,200
the one i'm going to present today

77
00:02:43,920 --> 00:02:48,238
because i mentioned redirectors and it

78
00:02:46,480 --> 00:02:51,760
might not be familiar

79
00:02:48,239 --> 00:02:54,720
a familiar term to everybody when we say

80
00:02:51,760 --> 00:02:56,560
redirectors we basically mean servers

81
00:02:54,720 --> 00:02:58,879
located in the cloud

82
00:02:56,560 --> 00:02:59,840
where their only task is to receive

83
00:02:58,879 --> 00:03:02,679
traffic

84
00:02:59,840 --> 00:03:04,159
from our client and send it over to our

85
00:03:02,680 --> 00:03:06,239
infrastructure so

86
00:03:04,159 --> 00:03:07,359
they they take the traffic send it back

87
00:03:06,239 --> 00:03:11,200
and forth so

88
00:03:07,360 --> 00:03:14,400
in reality they hide the actual ip space

89
00:03:11,200 --> 00:03:17,518
of our operation

90
00:03:14,400 --> 00:03:21,040
so our client will not be able

91
00:03:17,519 --> 00:03:24,000
to block our command control server

92
00:03:21,040 --> 00:03:25,840
but instead they will be able to block

93
00:03:24,000 --> 00:03:28,720
the redirectors

94
00:03:25,840 --> 00:03:30,480
but then again we can spin off new

95
00:03:28,720 --> 00:03:31,680
redirectors and then continue the

96
00:03:30,480 --> 00:03:34,399
operations

97
00:03:31,680 --> 00:03:36,319
thus allowing the operation to continue

98
00:03:34,400 --> 00:03:40,080
without stopping

99
00:03:36,319 --> 00:03:40,640
immediately at least redirectors can be

100
00:03:40,080 --> 00:03:42,720
changed

101
00:03:40,640 --> 00:03:44,559
chained so we can use multiple

102
00:03:42,720 --> 00:03:47,359
redirectors in a row

103
00:03:44,560 --> 00:03:49,120
and we can make it as complex as we want

104
00:03:47,360 --> 00:03:51,440
but in this example

105
00:03:49,120 --> 00:03:53,519
i assume that you're using one

106
00:03:51,440 --> 00:03:56,000
redirector for

107
00:03:53,519 --> 00:03:56,959
every aspect of the operation so one for

108
00:03:56,000 --> 00:04:01,840
fishing

109
00:03:56,959 --> 00:04:01,840
one for payload delivery and so on

110
00:04:01,920 --> 00:04:05,040
so this is how the infrastructure is

111
00:04:03,920 --> 00:04:07,679
going to look like

112
00:04:05,040 --> 00:04:09,040
where in the blue space let's say this

113
00:04:07,680 --> 00:04:12,640
is the lotion

114
00:04:09,040 --> 00:04:14,879
we have six different servers

115
00:04:12,640 --> 00:04:16,639
and we have three different domain names

116
00:04:14,879 --> 00:04:20,000
pointing to the servers

117
00:04:16,639 --> 00:04:22,479
depending on the on the actual

118
00:04:20,000 --> 00:04:24,479
stage of the operation so for the

119
00:04:22,479 --> 00:04:27,520
fishing

120
00:04:24,479 --> 00:04:28,240
side of things we used one domain one

121
00:04:27,520 --> 00:04:30,639
being

122
00:04:28,240 --> 00:04:32,479
one server being for the mail server who

123
00:04:30,639 --> 00:04:34,479
is going to be responsible for sending

124
00:04:32,479 --> 00:04:35,758
the phishing emails and then we have

125
00:04:34,479 --> 00:04:38,800
another domain

126
00:04:35,759 --> 00:04:42,720
who is hosting the phishing payload

127
00:04:38,800 --> 00:04:45,919
then we have dns and http redirectors

128
00:04:42,720 --> 00:04:46,880
with two different domain names so if

129
00:04:45,919 --> 00:04:48,880
the client blocks

130
00:04:46,880 --> 00:04:50,400
one of the domain names then we have

131
00:04:48,880 --> 00:04:53,840
another domain name

132
00:04:50,400 --> 00:04:55,198
to utilize and remain active in our

133
00:04:53,840 --> 00:04:58,080
operations

134
00:04:55,199 --> 00:04:58,720
and all the traffic ends up on our

135
00:04:58,080 --> 00:05:01,919
in-house

136
00:04:58,720 --> 00:05:01,919
command control server

137
00:05:02,160 --> 00:05:07,759
but we're not limited into using just

138
00:05:05,199 --> 00:05:08,960
one cloud provider we can use two or

139
00:05:07,759 --> 00:05:12,639
three or more

140
00:05:08,960 --> 00:05:15,520
depending on our needs in this example

141
00:05:12,639 --> 00:05:17,600
i have four servers being digital lotion

142
00:05:15,520 --> 00:05:19,840
and then another two servers being on a

143
00:05:17,600 --> 00:05:21,360
different cloud provider

144
00:05:19,840 --> 00:05:23,359
the reason for splitting up the

145
00:05:21,360 --> 00:05:26,160
infrastructure like this

146
00:05:23,360 --> 00:05:27,280
is for example the client sees that

147
00:05:26,160 --> 00:05:30,240
there is

148
00:05:27,280 --> 00:05:31,359
traffic which is unexplained going to

149
00:05:30,240 --> 00:05:34,000
digital ocean

150
00:05:31,360 --> 00:05:35,120
so they see a spike in traffic going to

151
00:05:34,000 --> 00:05:38,880
digital ocean

152
00:05:35,120 --> 00:05:41,039
they might decide to block the entire ep

153
00:05:38,880 --> 00:05:44,880
space of digitalocean

154
00:05:41,039 --> 00:05:47,199
while they investigate but from our side

155
00:05:44,880 --> 00:05:48,800
we still have a secondary channel to

156
00:05:47,199 --> 00:05:51,840
continue the operation

157
00:05:48,800 --> 00:05:52,560
via different cloud provider as you can

158
00:05:51,840 --> 00:05:54,799
understand

159
00:05:52,560 --> 00:05:56,160
it will be very hard for clients to to

160
00:05:54,800 --> 00:05:59,680
block everything

161
00:05:56,160 --> 00:06:00,400
therefore we remain active until we find

162
00:05:59,680 --> 00:06:03,440
another

163
00:06:00,400 --> 00:06:04,318
way to operate spin off spin up new

164
00:06:03,440 --> 00:06:07,120
redirectors

165
00:06:04,319 --> 00:06:08,880
and continue the operation we can harden

166
00:06:07,120 --> 00:06:12,080
our infrastructure even more

167
00:06:08,880 --> 00:06:15,120
using ip tables for example

168
00:06:12,080 --> 00:06:17,280
where we know that only

169
00:06:15,120 --> 00:06:19,520
our command control server is supposed

170
00:06:17,280 --> 00:06:22,960
to be connecting to the redirector

171
00:06:19,520 --> 00:06:25,919
via ssh so since we know these

172
00:06:22,960 --> 00:06:26,638
parameters we can have a rule specifying

173
00:06:25,919 --> 00:06:30,318
that

174
00:06:26,639 --> 00:06:33,120
for port 2 we won't accept traffic

175
00:06:30,319 --> 00:06:36,479
only from a specific ip which can be

176
00:06:33,120 --> 00:06:36,479
mentioned in the rule

177
00:06:36,720 --> 00:06:43,520
now we also know that our payloads

178
00:06:40,479 --> 00:06:47,159
work over specific ports

179
00:06:43,520 --> 00:06:50,159
those ports are either 53 80 for

180
00:06:47,160 --> 00:06:54,160
38080 or whatever else

181
00:06:50,160 --> 00:06:56,400
you configure your ports to use

182
00:06:54,160 --> 00:06:59,199
if we also know the ip space of our

183
00:06:56,400 --> 00:07:01,758
client we can also specify that

184
00:06:59,199 --> 00:07:02,400
so in this example we see that we accept

185
00:07:01,759 --> 00:07:06,400
tcp

186
00:07:02,400 --> 00:07:07,599
traffic on these ports only from this ip

187
00:07:06,400 --> 00:07:10,400
range

188
00:07:07,599 --> 00:07:11,599
if any other ip which is not part of

189
00:07:10,400 --> 00:07:14,318
this ip range

190
00:07:11,599 --> 00:07:16,800
requests any of these ports their

191
00:07:14,319 --> 00:07:18,560
traffic will be dropped

192
00:07:16,800 --> 00:07:22,000
and we also have another rule to accept

193
00:07:18,560 --> 00:07:24,319
udp traffic for 53 for dns traffic

194
00:07:22,000 --> 00:07:25,680
again specifying the ip range of our

195
00:07:24,319 --> 00:07:28,720
clients

196
00:07:25,680 --> 00:07:31,840
now i know that in this example we

197
00:07:28,720 --> 00:07:33,440
might miss many targets just because we

198
00:07:31,840 --> 00:07:37,280
have people traveling

199
00:07:33,440 --> 00:07:40,000
or people over data connection

200
00:07:37,280 --> 00:07:42,000
or on their mobile devices for example

201
00:07:40,000 --> 00:07:43,280
but this is a risk that we're willing to

202
00:07:42,000 --> 00:07:45,840
take

203
00:07:43,280 --> 00:07:46,960
rather than exposing things that we

204
00:07:45,840 --> 00:07:49,520
don't want to expose

205
00:07:46,960 --> 00:07:50,560
because sometimes our infrastructure is

206
00:07:49,520 --> 00:07:53,120
is client

207
00:07:50,560 --> 00:07:54,560
specific so we might use locals for

208
00:07:53,120 --> 00:07:56,479
example of our client

209
00:07:54,560 --> 00:07:59,120
so we don't want everybody to know that

210
00:07:56,479 --> 00:08:00,800
there is a red team

211
00:07:59,120 --> 00:08:02,800
assessment or a phishing assessment

212
00:08:00,800 --> 00:08:05,759
happening for this client at least

213
00:08:02,800 --> 00:08:05,759
at this stage

214
00:08:07,199 --> 00:08:11,520
and i believe it's our responsibility to

215
00:08:10,080 --> 00:08:13,919
also monitor

216
00:08:11,520 --> 00:08:14,560
our infrastructure the way that we

217
00:08:13,919 --> 00:08:16,240
expect

218
00:08:14,560 --> 00:08:17,680
our clients to monitor their

219
00:08:16,240 --> 00:08:20,479
infrastructure

220
00:08:17,680 --> 00:08:22,720
so what we do is that we gather a lot of

221
00:08:20,479 --> 00:08:25,680
logs from all of our endpoints

222
00:08:22,720 --> 00:08:26,000
and all of our cloud redirectors in

223
00:08:25,680 --> 00:08:27,680
order

224
00:08:26,000 --> 00:08:29,440
to make sure that the traffic that is

225
00:08:27,680 --> 00:08:32,000
hitting the

226
00:08:29,440 --> 00:08:32,958
redirectors and our infrastructure in

227
00:08:32,000 --> 00:08:36,559
general

228
00:08:32,958 --> 00:08:38,880
is the traffic that we want to accept

229
00:08:36,559 --> 00:08:40,000
and if it's traffic that was accepted

230
00:08:38,880 --> 00:08:42,240
and we don't want

231
00:08:40,000 --> 00:08:44,480
we don't need it or we don't want it

232
00:08:42,240 --> 00:08:47,040
then we can take corrective measures

233
00:08:44,480 --> 00:08:48,160
and change our configuration to ensure

234
00:08:47,040 --> 00:08:50,560
that

235
00:08:48,160 --> 00:08:51,360
the the only the authorized people get

236
00:08:50,560 --> 00:08:54,719
to see

237
00:08:51,360 --> 00:08:56,800
the resources that we want to to share

238
00:08:54,720 --> 00:08:57,920
which are valid for our red team

239
00:08:56,800 --> 00:09:01,680
infrastructure

240
00:08:57,920 --> 00:09:05,760
and what we do next instead of

241
00:09:01,680 --> 00:09:09,920
you know actually being the blue team

242
00:09:05,760 --> 00:09:12,560
we use some other tools to help us

243
00:09:09,920 --> 00:09:13,120
so instead of just looking at the logs

244
00:09:12,560 --> 00:09:15,199
and doing

245
00:09:13,120 --> 00:09:16,240
thread hunting while we do a writing

246
00:09:15,200 --> 00:09:18,320
operation

247
00:09:16,240 --> 00:09:21,200
we want to be alerted if something

248
00:09:18,320 --> 00:09:24,800
happens out of the ordinary that is

249
00:09:21,200 --> 00:09:27,600
so we use bash scripts to check the logs

250
00:09:24,800 --> 00:09:29,519
and if they see anything strange they

251
00:09:27,600 --> 00:09:32,080
send it over to slack

252
00:09:29,519 --> 00:09:32,800
so we know that if we receive a slack

253
00:09:32,080 --> 00:09:34,880
alert

254
00:09:32,800 --> 00:09:36,719
there's most probably something wrong

255
00:09:34,880 --> 00:09:39,920
happening

256
00:09:36,720 --> 00:09:42,480
or as you can see from this example

257
00:09:39,920 --> 00:09:44,160
we have the root user that logged in on

258
00:09:42,480 --> 00:09:47,200
the command control server

259
00:09:44,160 --> 00:09:48,160
so if we know that we are we are the

260
00:09:47,200 --> 00:09:51,120
roots

261
00:09:48,160 --> 00:09:51,920
root user and we're not supposed to be

262
00:09:51,120 --> 00:09:54,320
connecting

263
00:09:51,920 --> 00:09:55,760
and it's not us then we take corrective

264
00:09:54,320 --> 00:09:56,800
measures we know that we have been

265
00:09:55,760 --> 00:09:59,200
compromised

266
00:09:56,800 --> 00:09:59,199
like this

267
00:10:00,240 --> 00:10:03,600
as i said before what i showed you is a

268
00:10:02,560 --> 00:10:06,560
very simplified

269
00:10:03,600 --> 00:10:08,560
example of monitoring if you really want

270
00:10:06,560 --> 00:10:12,079
to have a full-blown cm

271
00:10:08,560 --> 00:10:15,920
i would ask you to check out red elk by

272
00:10:12,079 --> 00:10:19,359
outflank they have done a fantastic job

273
00:10:15,920 --> 00:10:23,279
in developing an actual

274
00:10:19,360 --> 00:10:26,399
cm to be used during rating operations

275
00:10:23,279 --> 00:10:27,439
sometimes this is too much depending on

276
00:10:26,399 --> 00:10:29,519
the operation

277
00:10:27,440 --> 00:10:31,519
type but it's something you should

278
00:10:29,519 --> 00:10:34,240
definitely check out

279
00:10:31,519 --> 00:10:36,399
so moving to the traffic that will be

280
00:10:34,240 --> 00:10:39,920
reaching our redirectors

281
00:10:36,399 --> 00:10:40,800
and more specifically http and https

282
00:10:39,920 --> 00:10:43,360
traffic

283
00:10:40,800 --> 00:10:44,800
we can make use of something like apache

284
00:10:43,360 --> 00:10:48,720
mode rewrite

285
00:10:44,800 --> 00:10:50,560
which does url manipulations on the fly

286
00:10:48,720 --> 00:10:53,120
and what we can do is something like the

287
00:10:50,560 --> 00:10:55,920
example that i have here where

288
00:10:53,120 --> 00:10:56,959
we have a condition saying that if the

289
00:10:55,920 --> 00:10:59,760
user agent

290
00:10:56,959 --> 00:11:00,719
is one of the user agents in the list

291
00:10:59,760 --> 00:11:03,839
then

292
00:11:00,720 --> 00:11:06,880
redirect the user to gold.com

293
00:11:03,839 --> 00:11:10,160
or if the user agent is not one of the

294
00:11:06,880 --> 00:11:12,240
user agents in the list then send them

295
00:11:10,160 --> 00:11:15,519
back to our backend ip

296
00:11:12,240 --> 00:11:18,959
and the request uri that they ask for

297
00:11:15,519 --> 00:11:19,519
so why why do we do this so if we're

298
00:11:18,959 --> 00:11:22,160
having

299
00:11:19,519 --> 00:11:23,680
an assessment and we know from our

300
00:11:22,160 --> 00:11:27,360
intelligence that

301
00:11:23,680 --> 00:11:30,319
our client is a windows based client

302
00:11:27,360 --> 00:11:32,399
so they use windows microsoft windows we

303
00:11:30,320 --> 00:11:35,440
know that their user agent

304
00:11:32,399 --> 00:11:38,640
shouldn't be one of these

305
00:11:35,440 --> 00:11:41,360
we also know that some clients

306
00:11:38,640 --> 00:11:42,000
if we send them a phishing email may try

307
00:11:41,360 --> 00:11:44,399
to open

308
00:11:42,000 --> 00:11:45,360
it from their mobile phones and then

309
00:11:44,399 --> 00:11:49,040
again

310
00:11:45,360 --> 00:11:51,600
you have search engines which index

311
00:11:49,040 --> 00:11:52,079
the domains and we definitely don't want

312
00:11:51,600 --> 00:11:56,320
to

313
00:11:52,079 --> 00:11:58,959
our phishing pages to be indexed so if

314
00:11:56,320 --> 00:12:00,240
the user agent is one of these user goes

315
00:11:58,959 --> 00:12:03,839
to google.com

316
00:12:00,240 --> 00:12:07,760
the url on the bar changes to google.com

317
00:12:03,839 --> 00:12:11,279
if not the information is going to be

318
00:12:07,760 --> 00:12:14,480
fetched from our backend ip but the url

319
00:12:11,279 --> 00:12:18,000
on the url bar will not change

320
00:12:14,480 --> 00:12:21,680
so our bucket ip again will not be

321
00:12:18,000 --> 00:12:24,000
exposed this is a final example of

322
00:12:21,680 --> 00:12:27,439
apache module write and it's really cool

323
00:12:24,000 --> 00:12:30,399
because again if we know that

324
00:12:27,440 --> 00:12:32,240
if we know the ip space of our clients

325
00:12:30,399 --> 00:12:36,399
we can specify it

326
00:12:32,240 --> 00:12:39,120
in the condition so if there is traffic

327
00:12:36,399 --> 00:12:40,240
coming from ips other than the ones that

328
00:12:39,120 --> 00:12:43,440
we mentioned here

329
00:12:40,240 --> 00:12:46,160
so one range or the other range

330
00:12:43,440 --> 00:12:47,120
users go to google so let's say search

331
00:12:46,160 --> 00:12:50,480
engines

332
00:12:47,120 --> 00:12:53,040
or anyone else scanning our domain

333
00:12:50,480 --> 00:12:54,160
but users coming from the iep space of

334
00:12:53,040 --> 00:12:57,760
the client

335
00:12:54,160 --> 00:13:00,959
will be sent to our backend ip

336
00:12:57,760 --> 00:13:02,720
again acting as a proxy therefore just

337
00:13:00,959 --> 00:13:03,359
the information is coming from backend

338
00:13:02,720 --> 00:13:07,360
ip

339
00:13:03,360 --> 00:13:10,800
but the url is not exposed

340
00:13:07,360 --> 00:13:14,320
so let's move to

341
00:13:10,800 --> 00:13:16,719
other types of redirecting type traffic

342
00:13:14,320 --> 00:13:17,519
and we're going to talk about sockat

343
00:13:16,720 --> 00:13:20,320
which is a

344
00:13:17,519 --> 00:13:21,200
very nice tool and it's very versatile

345
00:13:20,320 --> 00:13:23,680
tool

346
00:13:21,200 --> 00:13:26,160
where we can send traffic back and forth

347
00:13:23,680 --> 00:13:30,160
on our servers

348
00:13:26,160 --> 00:13:32,800
the first example it's a very

349
00:13:30,160 --> 00:13:35,279
easy example where we just accept for

350
00:13:32,800 --> 00:13:38,560
connections on port 80

351
00:13:35,279 --> 00:13:40,880
on our cloud redirector so we just say

352
00:13:38,560 --> 00:13:42,160
listen for any type of traffic coming on

353
00:13:40,880 --> 00:13:44,880
port 80

354
00:13:42,160 --> 00:13:46,480
and when you see that type of traffic

355
00:13:44,880 --> 00:13:49,519
send it over to our bug and

356
00:13:46,480 --> 00:13:52,000
ip on whatever port we specify

357
00:13:49,519 --> 00:13:53,120
so the first example we listen on port

358
00:13:52,000 --> 00:13:56,120
80

359
00:13:53,120 --> 00:13:58,320
and we send it to our backend ip on port

360
00:13:56,120 --> 00:14:01,519
1890

361
00:13:58,320 --> 00:14:04,160
and the communication works like that

362
00:14:01,519 --> 00:14:05,519
again we can use a reverse tunnel for

363
00:14:04,160 --> 00:14:08,160
the communication

364
00:14:05,519 --> 00:14:08,800
where our command control server

365
00:14:08,160 --> 00:14:11,839
connects

366
00:14:08,800 --> 00:14:13,760
back to the redirector

367
00:14:11,839 --> 00:14:15,199
and on the redirector instead of sending

368
00:14:13,760 --> 00:14:17,680
the traffic

369
00:14:15,199 --> 00:14:18,719
to our ip it will send the traffic to

370
00:14:17,680 --> 00:14:21,279
itself

371
00:14:18,720 --> 00:14:24,800
where it's going to be picked up by the

372
00:14:21,279 --> 00:14:24,800
reverse ssh connection

373
00:14:25,440 --> 00:14:30,480
we can harden socket even more by

374
00:14:28,079 --> 00:14:33,120
specifying an ip range as with

375
00:14:30,480 --> 00:14:34,000
all the other examples that i mentioned

376
00:14:33,120 --> 00:14:37,279
before

377
00:14:34,000 --> 00:14:40,320
we can use the ip space of our clients

378
00:14:37,279 --> 00:14:42,480
so in this example we say that we want

379
00:14:40,320 --> 00:14:46,079
to accept traffic on port 80

380
00:14:42,480 --> 00:14:47,120
only from a specific range and send it

381
00:14:46,079 --> 00:14:51,199
over to port

382
00:14:47,120 --> 00:14:54,480
8090 of our command control server

383
00:14:51,199 --> 00:14:57,599
all other traffic coming from different

384
00:14:54,480 --> 00:15:01,040
ip spaces is going to be

385
00:14:57,600 --> 00:15:04,800
dropped because um soccer is

386
00:15:01,040 --> 00:15:07,120
it's very versatile and has a lot of

387
00:15:04,800 --> 00:15:10,240
flags i would urge you to visit the link

388
00:15:07,120 --> 00:15:12,480
on the page it's a very detailed blog

389
00:15:10,240 --> 00:15:13,120
post about shortcut and we'll show you a

390
00:15:12,480 --> 00:15:16,800
couple of

391
00:15:13,120 --> 00:15:16,800
more tips and tricks

392
00:15:17,199 --> 00:15:21,599
so let's go through the communications

393
00:15:19,040 --> 00:15:24,160
and see it in a little bit more detail

394
00:15:21,600 --> 00:15:25,519
using this example where we have the

395
00:15:24,160 --> 00:15:28,319
internal network

396
00:15:25,519 --> 00:15:29,920
this is the red team network consisting

397
00:15:28,320 --> 00:15:33,360
of the command control server

398
00:15:29,920 --> 00:15:36,800
and another server hosted in-house

399
00:15:33,360 --> 00:15:40,079
of course these servers are not directly

400
00:15:36,800 --> 00:15:43,839
internet accessible and they're behind a

401
00:15:40,079 --> 00:15:46,399
gateway and each of these servers

402
00:15:43,839 --> 00:15:48,240
is responsible for initiating a reverse

403
00:15:46,399 --> 00:15:51,279
ssh connection

404
00:15:48,240 --> 00:15:53,680
on the same cloud redirector

405
00:15:51,279 --> 00:15:55,199
the reason is that one of these

406
00:15:53,680 --> 00:15:57,040
connections is going to be accepting

407
00:15:55,199 --> 00:15:59,920
traffic on port 80

408
00:15:57,040 --> 00:16:00,319
and the other one for payloads running

409
00:15:59,920 --> 00:16:03,599
over

410
00:16:00,320 --> 00:16:04,320
port 443 so as you can see the

411
00:16:03,600 --> 00:16:06,839
connection

412
00:16:04,320 --> 00:16:08,480
the first connection is made on port

413
00:16:06,839 --> 00:16:11,759
2222 and

414
00:16:08,480 --> 00:16:13,600
the other one on port 2223 on the cloud

415
00:16:11,759 --> 00:16:18,240
redirector

416
00:16:13,600 --> 00:16:22,160
so what happens is that our victim

417
00:16:18,240 --> 00:16:24,320
will request either an http or an https

418
00:16:22,160 --> 00:16:27,199
payload

419
00:16:24,320 --> 00:16:29,120
socad is running on the cloud redirector

420
00:16:27,199 --> 00:16:30,160
sending the traffic to itself as we

421
00:16:29,120 --> 00:16:32,880
discussed before

422
00:16:30,160 --> 00:16:33,680
so traffic coming to port 80 is being

423
00:16:32,880 --> 00:16:36,959
sent

424
00:16:33,680 --> 00:16:37,359
on port 2222 and any traffic coming on

425
00:16:36,959 --> 00:16:40,638
port

426
00:16:37,360 --> 00:16:41,560
443 is being sent on the local host on

427
00:16:40,639 --> 00:16:44,399
port

428
00:16:41,560 --> 00:16:46,560
2323.

429
00:16:44,399 --> 00:16:49,120
so the redirector will accept that

430
00:16:46,560 --> 00:16:52,160
traffic send it over to our gateway

431
00:16:49,120 --> 00:16:52,959
and the gateway we send it over to the

432
00:16:52,160 --> 00:16:56,880
responsible

433
00:16:52,959 --> 00:16:56,880
server for serving the payload

434
00:16:58,560 --> 00:17:03,920
dns traffic is a bit trickier just

435
00:17:01,600 --> 00:17:05,039
because the reverse stage connection is

436
00:17:03,920 --> 00:17:08,079
tcp based

437
00:17:05,039 --> 00:17:10,000
and dns is udp based

438
00:17:08,079 --> 00:17:12,000
and therefore we have to do some

439
00:17:10,000 --> 00:17:13,919
additional steps here

440
00:17:12,000 --> 00:17:15,919
and for this reason the traffic we

441
00:17:13,919 --> 00:17:19,760
receive on the redirector will

442
00:17:15,919 --> 00:17:20,480
will be translated to tcp so udp coming

443
00:17:19,760 --> 00:17:23,679
in

444
00:17:20,480 --> 00:17:26,799
will be translated to tcp and sent

445
00:17:23,679 --> 00:17:29,120
over the reverse ssh tunnel

446
00:17:26,799 --> 00:17:31,360
on the in-house server we have another

447
00:17:29,120 --> 00:17:34,799
instance of socket running

448
00:17:31,360 --> 00:17:38,799
taking that tcp traffic

449
00:17:34,799 --> 00:17:42,879
and converting it back to udp in order

450
00:17:38,799 --> 00:17:44,960
to be used as dns as it is

451
00:17:42,880 --> 00:17:46,000
we can do something similar with ip

452
00:17:44,960 --> 00:17:50,240
tables

453
00:17:46,000 --> 00:17:53,600
although ip tables it's sometimes

454
00:17:50,240 --> 00:17:56,000
more complex to use and

455
00:17:53,600 --> 00:17:57,039
easier to get locked out from your

456
00:17:56,000 --> 00:17:58,799
server

457
00:17:57,039 --> 00:18:00,559
if you make a mistake and i have done

458
00:17:58,799 --> 00:18:03,520
many of those

459
00:18:00,559 --> 00:18:04,399
and i try to use and i prefer to use

460
00:18:03,520 --> 00:18:07,600
actually

461
00:18:04,400 --> 00:18:09,039
fire hole which is a tool that has a

462
00:18:07,600 --> 00:18:12,480
really really nice

463
00:18:09,039 --> 00:18:15,200
feature which explains the rule before

464
00:18:12,480 --> 00:18:18,400
applying the rule but again here

465
00:18:15,200 --> 00:18:21,440
we're accepting udp traffic on port

466
00:18:18,400 --> 00:18:24,480
53 and send it over

467
00:18:21,440 --> 00:18:27,280
to our command control server on port

468
00:18:24,480 --> 00:18:28,880
53. something i don't see being

469
00:18:27,280 --> 00:18:32,240
discussed a lot is about

470
00:18:28,880 --> 00:18:33,039
data at rest so data that has been

471
00:18:32,240 --> 00:18:35,760
collected

472
00:18:33,039 --> 00:18:37,280
during the operation and has to stay on

473
00:18:35,760 --> 00:18:40,080
one of our servers

474
00:18:37,280 --> 00:18:41,200
for some period of time for whatever

475
00:18:40,080 --> 00:18:44,320
reason

476
00:18:41,200 --> 00:18:45,280
and linux has a lot of tools but i have

477
00:18:44,320 --> 00:18:48,960
found that tomb

478
00:18:45,280 --> 00:18:52,320
is working very nice it's a very easy

479
00:18:48,960 --> 00:18:55,600
tool to use and you can

480
00:18:52,320 --> 00:18:56,720
basically create a new tomb to keep your

481
00:18:55,600 --> 00:18:58,719
data

482
00:18:56,720 --> 00:19:01,120
throw the data in there and keep it

483
00:18:58,720 --> 00:19:03,919
safely for as long as the operation

484
00:19:01,120 --> 00:19:04,719
dictates that you should keep it for so

485
00:19:03,919 --> 00:19:07,520
again

486
00:19:04,720 --> 00:19:08,960
something to keep in mind as well while

487
00:19:07,520 --> 00:19:12,160
running an operation

488
00:19:08,960 --> 00:19:15,120
i have included the links from my blog

489
00:19:12,160 --> 00:19:15,840
which i detail some of these techniques

490
00:19:15,120 --> 00:19:18,239
more

491
00:19:15,840 --> 00:19:20,159
and then the blogs that of the people

492
00:19:18,240 --> 00:19:22,840
that i used their

493
00:19:20,160 --> 00:19:24,320
research for to compose this

494
00:19:22,840 --> 00:19:27,039
presentation

495
00:19:24,320 --> 00:19:29,360
make sure you visit their blogs and they

496
00:19:27,039 --> 00:19:32,480
put out amazing information

497
00:19:29,360 --> 00:19:34,559
often and

498
00:19:32,480 --> 00:19:35,679
closing i would like to say a big thank

499
00:19:34,559 --> 00:19:39,039
you to

500
00:19:35,679 --> 00:19:41,600
besides athens and anybody who

501
00:19:39,039 --> 00:19:43,600
sat and went through this presentation

502
00:19:41,600 --> 00:19:48,399
and i really hope to see you

503
00:19:43,600 --> 00:19:48,399
in person in 2021 thank you

