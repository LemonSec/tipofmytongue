1
00:00:06,000 --> 00:00:06,960
hello everyone

2
00:00:06,960 --> 00:00:09,360
and thank you for being here so to speak

3
00:00:09,360 --> 00:00:10,320
my name is andy

4
00:00:10,320 --> 00:00:12,000
and it's a great honor to be speaking

5
00:00:12,000 --> 00:00:14,160
besides this year i would like to thank

6
00:00:14,160 --> 00:00:16,239
the organizers for their amazing work

7
00:00:16,239 --> 00:00:18,560
and i hope everyone is staying safe and

8
00:00:18,560 --> 00:00:19,119
sound

9
00:00:19,119 --> 00:00:22,400
during this hard times we are facing now

10
00:00:22,400 --> 00:00:24,800
a little bit upon myself my name is andy

11
00:00:24,800 --> 00:00:26,080
anastasi

12
00:00:26,080 --> 00:00:29,279
i am a threat labs engineer at encode

13
00:00:29,279 --> 00:00:31,679
as we like to say we like to pen test

14
00:00:31,679 --> 00:00:32,960
all things

15
00:00:32,960 --> 00:00:35,440
the code but what i especially love is

16
00:00:35,440 --> 00:00:37,120
web and ios

17
00:00:37,120 --> 00:00:40,079
penetration testing

18
00:00:40,320 --> 00:00:42,000
the things i'm about to present today of

19
00:00:42,000 --> 00:00:44,000
course are not my

20
00:00:44,000 --> 00:00:47,360
work solely we have a great team

21
00:00:47,360 --> 00:00:50,399
at encode and

22
00:00:50,399 --> 00:00:52,559
the colleagues that work with me and

23
00:00:52,559 --> 00:00:53,440
this is

24
00:00:53,440 --> 00:00:56,559
manus and alex

25
00:00:57,440 --> 00:01:01,120
so what i'm about to present today is uh

26
00:01:01,120 --> 00:01:04,720
as we said a tale from our crit

27
00:01:04,720 --> 00:01:08,080
we are about to present something

28
00:01:08,080 --> 00:01:09,600
similar to what we saw

29
00:01:09,600 --> 00:01:11,680
so it's not the same application but we

30
00:01:11,680 --> 00:01:12,799
have mimicked

31
00:01:12,799 --> 00:01:16,080
a behavior into a demo ios application

32
00:01:16,080 --> 00:01:18,479
we have changed a lot of things of

33
00:01:18,479 --> 00:01:19,119
course

34
00:01:19,119 --> 00:01:24,799
in order to for confidentiality reasons

35
00:01:24,799 --> 00:01:26,799
but the meaning of the story and the

36
00:01:26,799 --> 00:01:28,240
process we are about to follow

37
00:01:28,240 --> 00:01:31,200
is the same and should work if you face

38
00:01:31,200 --> 00:01:34,000
something similar

39
00:01:34,240 --> 00:01:37,840
so you start on a mobile application

40
00:01:37,840 --> 00:01:39,040
penetration test

41
00:01:39,040 --> 00:01:42,079
you have set up your device you have

42
00:01:42,079 --> 00:01:44,000
configured your proxy settings you have

43
00:01:44,000 --> 00:01:45,600
trusted the certificates

44
00:01:45,600 --> 00:01:47,840
and now you're ready to see the traffic

45
00:01:47,840 --> 00:01:48,960
in

46
00:01:48,960 --> 00:01:53,280
your proxy sometimes

47
00:01:53,280 --> 00:01:56,560
your liking this is something that might

48
00:01:56,560 --> 00:01:57,360
seem

49
00:01:57,360 --> 00:01:59,840
scary or funny to you but it's something

50
00:01:59,840 --> 00:02:01,439
that you have actually seen in the past

51
00:02:01,439 --> 00:02:02,320
during

52
00:02:02,320 --> 00:02:06,079
one of our projects this is not the case

53
00:02:06,079 --> 00:02:08,639
however otherwise it should this would

54
00:02:08,639 --> 00:02:10,959
be a short presentation

55
00:02:10,959 --> 00:02:14,239
uh sometimes you're simply okay you see

56
00:02:14,239 --> 00:02:15,280
what you

57
00:02:15,280 --> 00:02:17,440
expect to see and you move on with the

58
00:02:17,440 --> 00:02:18,480
testing

59
00:02:18,480 --> 00:02:21,599
and sometimes maybe it's not

60
00:02:21,599 --> 00:02:25,280
your day so

61
00:02:25,280 --> 00:02:28,000
when you say this you get scary and we

62
00:02:28,000 --> 00:02:29,760
start the questions

63
00:02:29,760 --> 00:02:32,879
starting with what what are these

64
00:02:32,879 --> 00:02:36,480
parameters we saw

65
00:02:36,480 --> 00:02:39,280
and fortunately we have friends that

66
00:02:39,280 --> 00:02:41,680
consist us

67
00:02:41,680 --> 00:02:44,879
we'll be showing how you can see what

68
00:02:44,879 --> 00:02:47,840
the application is doing and how you can

69
00:02:47,840 --> 00:02:49,200
interfere with it

70
00:02:49,200 --> 00:02:52,319
by using hopper's assembler and

71
00:02:52,319 --> 00:02:55,280
frida of course you can use any other

72
00:02:55,280 --> 00:02:56,879
disassembler you like

73
00:02:56,879 --> 00:03:00,480
but i prefer this one and

74
00:03:00,480 --> 00:03:03,280
this is how the example is gonna go from

75
00:03:03,280 --> 00:03:04,319
now

76
00:03:04,319 --> 00:03:09,599
so time for a short demo

77
00:03:11,440 --> 00:03:14,720
so we have our device ready and

78
00:03:14,720 --> 00:03:17,440
we just need to install the application

79
00:03:17,440 --> 00:03:18,080
and

80
00:03:18,080 --> 00:03:20,720
fire it up

81
00:03:22,159 --> 00:03:25,040
once we start the application we

82
00:03:25,040 --> 00:03:26,000
normally see

83
00:03:26,000 --> 00:03:29,760
the traffic that's generated by the app

84
00:03:30,239 --> 00:03:31,920
in this case we see that the first

85
00:03:31,920 --> 00:03:34,399
request

86
00:03:34,480 --> 00:03:38,879
it's this interesting string and

87
00:03:38,879 --> 00:03:43,760
after login and clicking on one order

88
00:03:45,120 --> 00:03:48,959
we see the traffic that we saw earlier

89
00:03:49,040 --> 00:03:52,640
this is quite interesting since

90
00:03:52,640 --> 00:03:56,400
it appears that we cannot modify

91
00:03:56,400 --> 00:03:59,599
a request without getting an error in

92
00:03:59,599 --> 00:04:00,080
turn

93
00:04:00,080 --> 00:04:03,040
in body signature so starting the

94
00:04:03,040 --> 00:04:04,720
questions

95
00:04:04,720 --> 00:04:08,720
what what are its parameters here

96
00:04:08,720 --> 00:04:11,040
we have a session signature an encrypted

97
00:04:11,040 --> 00:04:12,720
id and a daytime

98
00:04:12,720 --> 00:04:15,079
most of the time parameters might be

99
00:04:15,079 --> 00:04:16,720
self-explanatory

100
00:04:16,720 --> 00:04:19,519
other times not but from here we can

101
00:04:19,519 --> 00:04:21,040
understand that the session is of course

102
00:04:21,040 --> 00:04:22,400
the session id

103
00:04:22,400 --> 00:04:26,240
the signature is what appears to be

104
00:04:26,240 --> 00:04:28,800
missing from us and we cannot send a

105
00:04:28,800 --> 00:04:30,000
value request

106
00:04:30,000 --> 00:04:33,440
the encrypted id must be the order id

107
00:04:33,440 --> 00:04:36,000
in encrypted form and in daytime it's

108
00:04:36,000 --> 00:04:37,440
just the timestamp

109
00:04:37,440 --> 00:04:41,360
of the of when the request was generated

110
00:04:41,360 --> 00:04:44,240
now in order to find what the signature

111
00:04:44,240 --> 00:04:44,800
is

112
00:04:44,800 --> 00:04:49,280
we're gonna use hopper

113
00:04:49,280 --> 00:04:52,719
so we start up with hopper

114
00:04:52,960 --> 00:04:56,560
and of course we're gonna load

115
00:04:56,560 --> 00:05:00,240
the binary of the application into it

116
00:05:00,240 --> 00:05:02,639
and this is the part which is the most

117
00:05:02,639 --> 00:05:03,759
time consuming

118
00:05:03,759 --> 00:05:07,199
this is where most efforts focus

119
00:05:07,199 --> 00:05:10,400
in order to find where to look at

120
00:05:10,400 --> 00:05:13,600
exactly so

121
00:05:13,600 --> 00:05:15,600
let's start by finding what the

122
00:05:15,600 --> 00:05:18,320
signature is

123
00:05:18,639 --> 00:05:21,039
and we see here an interesting function

124
00:05:21,039 --> 00:05:24,400
named generic signature

125
00:05:24,400 --> 00:05:26,320
and what this does is it takes two

126
00:05:26,320 --> 00:05:28,240
parameters as input

127
00:05:28,240 --> 00:05:31,520
and generates a sha-256

128
00:05:31,520 --> 00:05:35,280
hash and our parameter

129
00:05:35,280 --> 00:05:38,479
indeed does look like a 56 has but

130
00:05:38,479 --> 00:05:41,680
of what exactly unfortunately

131
00:05:41,680 --> 00:05:44,560
using hopper might not be that easy to

132
00:05:44,560 --> 00:05:46,639
identify what exactly this is

133
00:05:46,639 --> 00:05:49,520
so we will use frida in order to

134
00:05:49,520 --> 00:05:50,240
identify

135
00:05:50,240 --> 00:05:53,680
exactly the input of this function

136
00:05:53,680 --> 00:05:57,840
and we can use for the trace

137
00:05:58,800 --> 00:06:00,639
by giving it the application name and

138
00:06:00,639 --> 00:06:02,160
then with the minus i

139
00:06:02,160 --> 00:06:05,680
we instruct it to find any function

140
00:06:05,680 --> 00:06:08,000
that contains the generated underscore

141
00:06:08,000 --> 00:06:09,759
signature string

142
00:06:09,759 --> 00:06:12,720
i want to see if frida finds the scan

143
00:06:12,720 --> 00:06:13,600
function

144
00:06:13,600 --> 00:06:16,560
and indeed it does and as we see when we

145
00:06:16,560 --> 00:06:17,840
click on an order

146
00:06:17,840 --> 00:06:20,160
the function is generated so we want to

147
00:06:20,160 --> 00:06:22,639
see exactly what goes in

148
00:06:22,639 --> 00:06:26,560
before it gets hashed

149
00:06:26,560 --> 00:06:30,960
so we can actually edit the file

150
00:06:31,440 --> 00:06:33,919
and since we want to see the input

151
00:06:33,919 --> 00:06:35,440
parameters

152
00:06:35,440 --> 00:06:39,120
we will try and log the first parameter

153
00:06:39,120 --> 00:06:39,759
entered

154
00:06:39,759 --> 00:06:43,840
into the function using this we will log

155
00:06:43,840 --> 00:06:47,199
the arcs1 by converting it in

156
00:06:47,199 --> 00:06:51,360
c object and then into a string

157
00:06:53,360 --> 00:06:56,400
if i use trace again

158
00:06:57,680 --> 00:07:00,880
and click on an order

159
00:07:01,520 --> 00:07:04,720
we will see that this is what actually

160
00:07:04,720 --> 00:07:07,440
goes into the function before it is

161
00:07:07,440 --> 00:07:09,039
generated into a hash

162
00:07:09,039 --> 00:07:12,560
and these parameters might look

163
00:07:12,560 --> 00:07:17,840
familiar if you go to the latest request

164
00:07:19,599 --> 00:07:24,159
and see that this here

165
00:07:24,240 --> 00:07:31,199
is our session

166
00:07:31,199 --> 00:07:33,440
and

167
00:07:36,479 --> 00:07:45,840
this value here is encrypted id

168
00:07:45,919 --> 00:07:49,840
this value here as you guessed

169
00:07:50,160 --> 00:07:54,240
is a daytime and then

170
00:07:54,240 --> 00:07:57,599
we can see that we have another

171
00:07:57,599 --> 00:08:00,240
interesting value here

172
00:08:00,240 --> 00:08:03,520
and if we look for it

173
00:08:07,599 --> 00:08:09,039
you see that we have seen this value

174
00:08:09,039 --> 00:08:11,039
before

175
00:08:11,039 --> 00:08:12,560
and it's the value that is returned

176
00:08:12,560 --> 00:08:14,720
after the login

177
00:08:14,720 --> 00:08:19,039
name salt so

178
00:08:19,039 --> 00:08:22,080
we have no idea of what

179
00:08:22,080 --> 00:08:25,280
this is the hash is the concocted value

180
00:08:25,280 --> 00:08:25,599
of

181
00:08:25,599 --> 00:08:28,400
the session the encrypted id the date

182
00:08:28,400 --> 00:08:29,039
time

183
00:08:29,039 --> 00:08:32,159
plus the hash and

184
00:08:32,159 --> 00:08:36,880
we need to verify it we can simply copy

185
00:08:38,839 --> 00:08:41,839
this

186
00:08:47,120 --> 00:08:50,959
when you say 286 and this will generate

187
00:08:50,959 --> 00:08:55,600
a shuttle h6 and guess what

188
00:08:55,600 --> 00:08:57,839
it's the same so we now know what the

189
00:08:57,839 --> 00:08:59,120
signature is

190
00:08:59,120 --> 00:09:01,760
but we'll start missing another piece of

191
00:09:01,760 --> 00:09:03,120
the puzzle

192
00:09:03,120 --> 00:09:06,399
out of the encrypted id

193
00:09:06,839 --> 00:09:11,440
so then you keep the day value

194
00:09:11,440 --> 00:09:14,560
we'll use hopper again

195
00:09:15,920 --> 00:09:23,839
and see if we can find another function

196
00:09:24,720 --> 00:09:26,959
and we can see here that a function

197
00:09:26,959 --> 00:09:30,880
called encrypt order id is used

198
00:09:32,240 --> 00:09:35,360
so again in the same way we try and find

199
00:09:35,360 --> 00:09:35,680
out

200
00:09:35,680 --> 00:09:37,920
what exactly this function does as you

201
00:09:37,920 --> 00:09:40,160
can see here this is shift rsa so it's

202
00:09:40,160 --> 00:09:42,399
pretty safe to assume that

203
00:09:42,399 --> 00:09:45,839
it does encrypt the string

204
00:09:45,839 --> 00:09:49,360
and we if you remember previously

205
00:09:49,360 --> 00:09:51,600
we do have something here that looks

206
00:09:51,600 --> 00:09:55,200
pretty much like a public key

207
00:09:55,680 --> 00:10:00,880
so let's try to find encrypt id again

208
00:10:01,760 --> 00:10:04,959
we can use freedom and

209
00:10:04,959 --> 00:10:08,160
this time we will look for another

210
00:10:08,160 --> 00:10:09,680
function

211
00:10:09,680 --> 00:10:19,839
encrypt order

212
00:10:19,920 --> 00:10:23,120
and let's see if this triggers up

213
00:10:23,120 --> 00:10:26,399
of course it's time to click on an order

214
00:10:26,399 --> 00:10:29,920
this function is called again

215
00:10:29,920 --> 00:10:32,399
we want to see exactly the input of this

216
00:10:32,399 --> 00:10:34,720
function in order to better identify

217
00:10:34,720 --> 00:10:37,920
what it does and how it works and we can

218
00:10:37,920 --> 00:10:42,880
edit this file and

219
00:10:43,200 --> 00:10:46,079
if we monitor the function hopper will

220
00:10:46,079 --> 00:10:48,480
see that it takes

221
00:10:48,480 --> 00:10:51,519
three arguments so we will log the

222
00:10:51,519 --> 00:10:52,000
second

223
00:10:52,000 --> 00:10:55,040
and the third one let's

224
00:10:55,040 --> 00:11:00,079
go back

225
00:11:00,079 --> 00:11:03,360
let's say click on five we see that we

226
00:11:03,360 --> 00:11:03,760
have an

227
00:11:03,760 --> 00:11:08,560
integer here and the public key

228
00:11:08,560 --> 00:11:11,040
if we click on order three you can see

229
00:11:11,040 --> 00:11:12,800
that there is three and the public key

230
00:11:12,800 --> 00:11:13,600
is the same

231
00:11:13,600 --> 00:11:17,279
so it's pretty safe to assume that

232
00:11:17,279 --> 00:11:19,680
this function takes as an input the

233
00:11:19,680 --> 00:11:20,880
order id

234
00:11:20,880 --> 00:11:24,079
and encrypted with this public key which

235
00:11:24,079 --> 00:11:25,519
was provided by the server

236
00:11:25,519 --> 00:11:28,079
so the server must have the private key

237
00:11:28,079 --> 00:11:31,200
in order to decrypt this

238
00:11:31,200 --> 00:11:36,560
so back to the presentation

239
00:11:39,040 --> 00:11:42,240
so after the demo we now know

240
00:11:42,240 --> 00:11:44,320
the what so we know that the signature

241
00:11:44,320 --> 00:11:46,880
parameter is a status 56 house

242
00:11:46,880 --> 00:11:49,360
of the session the encrypted id the time

243
00:11:49,360 --> 00:11:50,720
and the sort value

244
00:11:50,720 --> 00:11:53,839
and the encrypted id is an rsa

245
00:11:53,839 --> 00:11:56,800
is an encrypted integer with the public

246
00:11:56,800 --> 00:11:59,439
rsa key

247
00:12:00,160 --> 00:12:03,360
so we continue the questions and now in

248
00:12:03,360 --> 00:12:03,920
order

249
00:12:03,920 --> 00:12:07,199
in with the how

250
00:12:07,440 --> 00:12:10,560
so how can we recreate these values

251
00:12:10,560 --> 00:12:12,959
the application does and in order to

252
00:12:12,959 --> 00:12:14,480
fully test the back end

253
00:12:14,480 --> 00:12:18,079
we need to create them as well

254
00:12:18,079 --> 00:12:21,040
we can use custom scripts for example

255
00:12:21,040 --> 00:12:22,079
python or

256
00:12:22,079 --> 00:12:25,200
whichever language we like but uh the

257
00:12:25,200 --> 00:12:26,000
thing is that

258
00:12:26,000 --> 00:12:28,959
this might get a little bit tiring we

259
00:12:28,959 --> 00:12:29,760
can

260
00:12:29,760 --> 00:12:31,279
generate the strings copy them from the

261
00:12:31,279 --> 00:12:33,440
terminal paste them in verb

262
00:12:33,440 --> 00:12:36,839
and go like this it will work

263
00:12:36,839 --> 00:12:40,240
but there's definitely faster ways

264
00:12:40,240 --> 00:12:43,760
another way we can use frida trace and

265
00:12:43,760 --> 00:12:45,680
in a similar way that we traced these

266
00:12:45,680 --> 00:12:48,399
values we can also replace them

267
00:12:48,399 --> 00:12:50,880
since frida allows us to use javascript

268
00:12:50,880 --> 00:12:53,279
so we can easily write

269
00:12:53,279 --> 00:12:56,160
some javascript code and replace for

270
00:12:56,160 --> 00:12:58,320
example the ledger value of 1

271
00:12:58,320 --> 00:13:01,440
with something other that we

272
00:13:01,440 --> 00:13:04,880
prefer but again this is not the best

273
00:13:04,880 --> 00:13:07,120
time efficient solution

274
00:13:07,120 --> 00:13:11,600
and we can use some more help

275
00:13:11,600 --> 00:13:14,720
this time we can use the burp

276
00:13:14,720 --> 00:13:18,000
plugin named python scripter you can

277
00:13:18,000 --> 00:13:18,320
find

278
00:13:18,320 --> 00:13:21,360
the source code in the link below and a

279
00:13:21,360 --> 00:13:23,040
short description of what

280
00:13:23,040 --> 00:13:25,920
a python scriptor does is it allows us

281
00:13:25,920 --> 00:13:26,639
to execute

282
00:13:26,639 --> 00:13:30,079
custom python scripts on http packets

283
00:13:30,079 --> 00:13:33,440
goes both in requests and responses so

284
00:13:33,440 --> 00:13:37,200
when we send an http request

285
00:13:37,200 --> 00:13:40,320
via burp then this goes into the python

286
00:13:40,320 --> 00:13:41,440
scripter

287
00:13:41,440 --> 00:13:45,040
it our script makes any modification

288
00:13:45,040 --> 00:13:48,399
in the http packet that we like

289
00:13:48,399 --> 00:13:51,199
and then after done it can send it to

290
00:13:51,199 --> 00:13:52,240
the server

291
00:13:52,240 --> 00:13:54,880
of course this goes both ways so we can

292
00:13:54,880 --> 00:13:57,440
take an http response from a server

293
00:13:57,440 --> 00:14:00,240
use a python script in order to modify

294
00:14:00,240 --> 00:14:02,399
any value we like and then this shows up

295
00:14:02,399 --> 00:14:03,199
to burp

296
00:14:03,199 --> 00:14:05,760
modified

297
00:14:07,920 --> 00:14:10,720
we will see exactly how python scripter

298
00:14:10,720 --> 00:14:11,839
will help us

299
00:14:11,839 --> 00:14:16,880
in the following demo

300
00:14:16,880 --> 00:14:20,000
so we first go of course to

301
00:14:20,000 --> 00:14:23,839
install the python scriptor

302
00:14:23,839 --> 00:14:31,279
you can find it in the verb app store

303
00:14:31,279 --> 00:14:34,399
and once installed

304
00:14:34,720 --> 00:14:39,040
we will see another tab in the script

305
00:14:39,040 --> 00:14:45,680
is where our custom python code will go

306
00:14:45,680 --> 00:14:48,560
a simple way to see how python script

307
00:14:48,560 --> 00:14:49,680
works

308
00:14:49,680 --> 00:14:53,839
is to use a simple python script

309
00:14:53,839 --> 00:14:57,040
this is a bear a minimum python script

310
00:14:57,040 --> 00:14:58,000
which all it does is

311
00:14:58,000 --> 00:14:59,920
takes the body of the request and prints

312
00:14:59,920 --> 00:15:01,760
it so

313
00:15:01,760 --> 00:15:05,199
by sending this request again going

314
00:15:05,199 --> 00:15:08,320
into our extensions

315
00:15:08,320 --> 00:15:10,800
and our output we see that python script

316
00:15:10,800 --> 00:15:12,320
scripture

317
00:15:12,320 --> 00:15:15,760
has locked our entire body

318
00:15:16,000 --> 00:15:18,880
now of course what we want to do is a

319
00:15:18,880 --> 00:15:20,880
little bit more complex

320
00:15:20,880 --> 00:15:23,920
what we want it's time to do is

321
00:15:23,920 --> 00:15:28,639
have the session the encrypted id

322
00:15:28,639 --> 00:15:31,680
and the date time concur it with

323
00:15:31,680 --> 00:15:35,600
the salt and generate a new signature

324
00:15:35,600 --> 00:15:37,519
and replace that new signature with the

325
00:15:37,519 --> 00:15:41,839
current one

326
00:15:42,720 --> 00:15:46,480
and here's an example script

327
00:15:46,480 --> 00:15:50,079
that will do that once we load the

328
00:15:50,079 --> 00:15:51,759
bootie

329
00:15:51,759 --> 00:15:53,920
check that if the signature string is

330
00:15:53,920 --> 00:15:55,279
inside

331
00:15:55,279 --> 00:15:58,160
we check the json parameter we set it to

332
00:15:58,160 --> 00:15:59,120
empty

333
00:15:59,120 --> 00:16:01,600
we use the result which will have to get

334
00:16:01,600 --> 00:16:02,800
each time

335
00:16:02,800 --> 00:16:06,320
we log in and the message sign would be

336
00:16:06,320 --> 00:16:09,199
the session then you keep the id the day

337
00:16:09,199 --> 00:16:09,759
time

338
00:16:09,759 --> 00:16:13,440
plus the salt so all we need to do

339
00:16:13,440 --> 00:16:17,279
is use the consult that our session has

340
00:16:17,279 --> 00:16:19,199
and we can find this

341
00:16:19,199 --> 00:16:23,839
by going of course at the login

342
00:16:28,399 --> 00:16:32,800
by pasting this descriptor

343
00:16:33,279 --> 00:16:37,600
and see we remove

344
00:16:37,600 --> 00:16:40,480
the signature

345
00:16:41,519 --> 00:16:43,279
and we see that indeed we have a

346
00:16:43,279 --> 00:16:45,120
response back

347
00:16:45,120 --> 00:16:47,440
and to make sure what we tried before

348
00:16:47,440 --> 00:16:50,880
for example changing one simple value

349
00:16:50,880 --> 00:16:54,480
which return the signature error

350
00:16:54,639 --> 00:16:58,079
now does indeed come back so this allows

351
00:16:58,079 --> 00:16:59,120
us now

352
00:16:59,120 --> 00:17:02,480
to tamper with all the parameters

353
00:17:02,480 --> 00:17:05,760
and have a valid signature generated

354
00:17:05,760 --> 00:17:08,319
each time

355
00:17:08,480 --> 00:17:11,679
and now we have to see what we can do

356
00:17:11,679 --> 00:17:13,039
with the encrypted

357
00:17:13,039 --> 00:17:16,079
id so the process

358
00:17:16,079 --> 00:17:19,199
will be again of course similar we know

359
00:17:19,199 --> 00:17:23,039
what we have to encrypt we know uh

360
00:17:23,039 --> 00:17:25,760
how to encrypt it we just need to place

361
00:17:25,760 --> 00:17:27,119
it in a more

362
00:17:27,119 --> 00:17:29,600
uh readable way here which we can which

363
00:17:29,600 --> 00:17:32,320
can help us

364
00:17:33,440 --> 00:17:36,640
in our testing

365
00:17:38,320 --> 00:17:41,600
so in order to encrypt the id we will

366
00:17:41,600 --> 00:17:42,000
use

367
00:17:42,000 --> 00:17:46,160
a similar script

368
00:17:46,160 --> 00:17:49,280
what our script will do

369
00:17:53,600 --> 00:17:58,080
is actually call an external script

370
00:17:58,080 --> 00:18:01,200
and this is because the jython in burp

371
00:18:01,200 --> 00:18:04,960
doesn't allow us to call specific

372
00:18:04,960 --> 00:18:08,160
functions our encrypter script let's go

373
00:18:08,160 --> 00:18:10,559
like this

374
00:18:10,559 --> 00:18:13,679
and since our jython does not

375
00:18:13,679 --> 00:18:17,039
have the crypto library we'll have to

376
00:18:17,039 --> 00:18:17,679
use

377
00:18:17,679 --> 00:18:19,600
an external script like this using the

378
00:18:19,600 --> 00:18:21,840
public key and encrypted its first

379
00:18:21,840 --> 00:18:23,120
argument

380
00:18:23,120 --> 00:18:27,360
and printing that our python script

381
00:18:27,360 --> 00:18:31,039
will run this external script

382
00:18:31,039 --> 00:18:34,320
the path file

383
00:18:34,320 --> 00:18:38,080
and provide it with encrypt id

384
00:18:38,080 --> 00:18:40,640
and then you will get the uncubed id and

385
00:18:40,640 --> 00:18:41,280
replace it

386
00:18:41,280 --> 00:18:43,840
in the request

387
00:18:44,960 --> 00:18:47,360
we can see if this works by using the

388
00:18:47,360 --> 00:18:49,760
script

389
00:18:50,720 --> 00:18:54,480
and we have already blank signature

390
00:18:54,480 --> 00:18:57,280
and we'll try to replace the encrypted

391
00:18:57,280 --> 00:18:57,919
id

392
00:18:57,919 --> 00:19:01,039
with the actual integer we had

393
00:19:01,039 --> 00:19:05,039
order id3 so let's try three here

394
00:19:06,400 --> 00:19:08,400
and as you can see we have back the

395
00:19:08,400 --> 00:19:11,039
order if we try five

396
00:19:11,039 --> 00:19:14,880
we'll check other five so

397
00:19:14,880 --> 00:19:19,039
what happens here is with our script

398
00:19:19,039 --> 00:19:21,360
we have a blank signature and an integer

399
00:19:21,360 --> 00:19:22,480
here

400
00:19:22,480 --> 00:19:25,520
and what happens is

401
00:19:25,520 --> 00:19:28,960
we call by a python scripter an external

402
00:19:28,960 --> 00:19:30,160
script

403
00:19:30,160 --> 00:19:33,919
get the encrypted id replace it here

404
00:19:33,919 --> 00:19:36,880
even though we cannot see it and then go

405
00:19:36,880 --> 00:19:38,960
and generate a new signature

406
00:19:38,960 --> 00:19:41,600
for its encrypted for its new encrypted

407
00:19:41,600 --> 00:19:43,918
id

408
00:19:44,160 --> 00:19:47,679
and since burp is doing

409
00:19:47,679 --> 00:19:51,360
all the hard work here we can try one

410
00:19:51,360 --> 00:19:52,080
more thing

411
00:19:52,080 --> 00:19:56,480
and see if our life will be easier

412
00:20:05,280 --> 00:20:08,799
and use this request instead of

413
00:20:08,799 --> 00:20:11,200
five

414
00:20:12,880 --> 00:20:21,200
why not use sql map here

415
00:20:21,200 --> 00:20:25,919
and see if it does identify any scale

416
00:20:32,840 --> 00:20:35,840
injection

417
00:20:38,400 --> 00:20:42,400
and as you can see now result

418
00:20:42,400 --> 00:20:44,080
sql mapped it indeed file in spl

419
00:20:44,080 --> 00:20:46,080
injection of course you can

420
00:20:46,080 --> 00:20:49,039
play with other parameters of sql map

421
00:20:49,039 --> 00:20:49,520
but

422
00:20:49,520 --> 00:20:52,400
since burp is doing all the hard work we

423
00:20:52,400 --> 00:20:54,400
can easily

424
00:20:54,400 --> 00:20:57,520
use other tools and make our life even

425
00:20:57,520 --> 00:21:03,840
more easier

426
00:21:09,919 --> 00:21:14,000
so this is the presentation

427
00:21:14,000 --> 00:21:16,640
thank you so much for your attention and

428
00:21:16,640 --> 00:21:18,159
for viewing this

429
00:21:18,159 --> 00:21:21,200
uh i'm sure that it might have

430
00:21:21,200 --> 00:21:24,320
seemed a little bit fast but

431
00:21:24,320 --> 00:21:26,640
thankfully this is a video so you can

432
00:21:26,640 --> 00:21:27,760
probably

433
00:21:27,760 --> 00:21:30,159
go back and forth and look at the points

434
00:21:30,159 --> 00:21:31,360
you want to

435
00:21:31,360 --> 00:21:34,799
revisit of course if you have any

436
00:21:34,799 --> 00:21:35,679
questions

437
00:21:35,679 --> 00:21:38,000
please address them and i'll be happy to

438
00:21:38,000 --> 00:21:39,760
answer them

439
00:21:39,760 --> 00:21:42,400
once again thank you for your time and

440
00:21:42,400 --> 00:21:45,840
everyone take care

