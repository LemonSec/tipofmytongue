1
00:00:04,720 --> 00:00:05,359
hello

2
00:00:05,359 --> 00:00:09,120
my name is vasilis and i am evangelist

3
00:00:09,120 --> 00:00:11,200
and together we have built overlord a

4
00:00:11,200 --> 00:00:13,120
tool which optimize infrastructure setup

5
00:00:13,120 --> 00:00:14,480
on the cloud

6
00:00:14,480 --> 00:00:16,000
the tool is mainly used for retrieving

7
00:00:16,000 --> 00:00:18,080
engagements but it can also be used for

8
00:00:18,080 --> 00:00:19,760
simple social engineering

9
00:00:19,760 --> 00:00:23,119
or other smaller scale attacks so let's

10
00:00:23,119 --> 00:00:25,199
start with a very simple example of what

11
00:00:25,199 --> 00:00:27,519
it is a command control server and the

12
00:00:27,519 --> 00:00:28,320
redirector

13
00:00:28,320 --> 00:00:30,720
because they are the main components of

14
00:00:30,720 --> 00:00:32,558
the retiming infrastructure

15
00:00:32,558 --> 00:00:35,680
quantum control server or c2 is a server

16
00:00:35,680 --> 00:00:37,600
which is controlled by the attacker

17
00:00:37,600 --> 00:00:39,600
and is used to send commands to

18
00:00:39,600 --> 00:00:41,120
compromise systems

19
00:00:41,120 --> 00:00:43,600
the redirector is another server which

20
00:00:43,600 --> 00:00:46,800
is directly connected to the c2

21
00:00:46,800 --> 00:00:49,600
for example via socket and basically it

22
00:00:49,600 --> 00:00:50,800
hides the presence

23
00:00:50,800 --> 00:00:53,920
of the z2 so here we can see

24
00:00:53,920 --> 00:00:56,480
a full retiming infrastructure example

25
00:00:56,480 --> 00:00:56,960
which

26
00:00:56,960 --> 00:00:58,960
can include multiple command control

27
00:00:58,960 --> 00:01:01,280
servers with their directors

28
00:01:01,280 --> 00:01:06,080
we have a mail server a phishing server

29
00:01:06,080 --> 00:01:08,400
which can host the phishing website for

30
00:01:08,400 --> 00:01:09,520
example

31
00:01:09,520 --> 00:01:13,280
and payload server which can cause our

32
00:01:13,280 --> 00:01:15,920
payloads to be downloaded etc all the

33
00:01:15,920 --> 00:01:16,799
servers

34
00:01:16,799 --> 00:01:18,960
shown here are under the control of the

35
00:01:18,960 --> 00:01:20,640
attacker of course

36
00:01:20,640 --> 00:01:22,880
so to make sure that only the needed

37
00:01:22,880 --> 00:01:24,400
services are accessible over the

38
00:01:24,400 --> 00:01:25,280
internet

39
00:01:25,280 --> 00:01:27,600
we use firewall rules in each of the

40
00:01:27,600 --> 00:01:28,720
cloud providers

41
00:01:28,720 --> 00:01:30,960
so nws and digital ocean which are used

42
00:01:30,960 --> 00:01:33,200
by others

43
00:01:33,200 --> 00:01:35,280
for example as we can see here we have a

44
00:01:35,280 --> 00:01:37,600
dns c2

45
00:01:37,600 --> 00:01:41,920
with only port 53

46
00:01:41,920 --> 00:01:45,040
open uh from the inbound

47
00:01:45,040 --> 00:01:47,520
and the port 22 which is only accessible

48
00:01:47,520 --> 00:01:48,320
to

49
00:01:48,320 --> 00:01:52,880
the public ip of the pentas team

50
00:01:52,880 --> 00:01:54,240
and of course it's for management

51
00:01:54,240 --> 00:01:56,560
purposes of the server

52
00:01:56,560 --> 00:01:59,680
the outbound rules um

53
00:01:59,680 --> 00:02:03,360
allow the http ports for downloading

54
00:02:03,360 --> 00:02:06,560
tools and scripts as well as the 453 to

55
00:02:06,560 --> 00:02:07,759
perform domain

56
00:02:07,759 --> 00:02:10,878
results if the

57
00:02:10,878 --> 00:02:14,160
c2 was an http one we would need

58
00:02:14,160 --> 00:02:18,400
also in the inbound port 80 and 443

59
00:02:18,400 --> 00:02:21,520
for the compromise systems to connect to

60
00:02:21,520 --> 00:02:22,800
these ports

61
00:02:22,800 --> 00:02:24,400
so now that we have finished with the

62
00:02:24,400 --> 00:02:27,440
redmi basics let's talk about overload

63
00:02:27,440 --> 00:02:29,840
overload was inspired by a red button

64
00:02:29,840 --> 00:02:31,840
which is a terraform implementation for

65
00:02:31,840 --> 00:02:35,040
returning infrastructure automation

66
00:02:35,040 --> 00:02:37,040
the difference between the two is that

67
00:02:37,040 --> 00:02:39,360
overlord abstracts the user from the

68
00:02:39,360 --> 00:02:41,040
terraform implementation

69
00:02:41,040 --> 00:02:43,360
and provides a user-friendly cli to

70
00:02:43,360 --> 00:02:44,720
achieve

71
00:02:44,720 --> 00:02:47,599
but at the end of the day it's a

72
00:02:47,599 --> 00:02:48,640
terraform

73
00:02:48,640 --> 00:02:52,000
code generator which creates the

74
00:02:52,000 --> 00:02:54,560
terraform files in the bulk

75
00:02:54,560 --> 00:02:56,319
which are then executed and the

76
00:02:56,319 --> 00:02:58,800
infrastructure is created

77
00:02:58,800 --> 00:03:02,159
automatically so why why would summer

78
00:03:02,159 --> 00:03:04,800
use overload why do we use it

79
00:03:04,800 --> 00:03:08,480
so first of all it's because we are lazy

80
00:03:08,480 --> 00:03:10,480
we like repeated processes to be

81
00:03:10,480 --> 00:03:12,879
automated

82
00:03:12,879 --> 00:03:16,000
also it's easy to use and

83
00:03:16,000 --> 00:03:18,400
sets the infrastructure up in minutes

84
00:03:18,400 --> 00:03:20,080
including all the servers and

85
00:03:20,080 --> 00:03:22,720
dns records and everything that the user

86
00:03:22,720 --> 00:03:25,680
wants to set up

87
00:03:26,100 --> 00:03:27,200
[Music]

88
00:03:27,200 --> 00:03:29,599
another very important component is the

89
00:03:29,599 --> 00:03:31,760
project management

90
00:03:31,760 --> 00:03:33,519
the tool has a functionality of saving

91
00:03:33,519 --> 00:03:35,360
the state of the current project

92
00:03:35,360 --> 00:03:38,480
for any future use

93
00:03:38,560 --> 00:03:41,040
for example you can set up exactly the

94
00:03:41,040 --> 00:03:42,879
same infrastructure for a client

95
00:03:42,879 --> 00:03:44,959
in the future by using the project

96
00:03:44,959 --> 00:03:48,400
folder of the specific client

97
00:03:48,400 --> 00:03:51,760
the tool is customizable we have built

98
00:03:51,760 --> 00:03:54,000
the tool in such a way to be easily

99
00:03:54,000 --> 00:03:54,720
scalable

100
00:03:54,720 --> 00:03:58,000
and extensible so a developer can extend

101
00:03:58,000 --> 00:04:00,000
the project with new cloud providers for

102
00:04:00,000 --> 00:04:03,519
example or new modules if they see

103
00:04:03,519 --> 00:04:07,120
a need and finally overload is reducing

104
00:04:07,120 --> 00:04:08,959
the cost for a company

105
00:04:08,959 --> 00:04:10,319
because you can destroy the

106
00:04:10,319 --> 00:04:12,319
infrastructure where which you have

107
00:04:12,319 --> 00:04:13,120
deployed

108
00:04:13,120 --> 00:04:17,440
in again in very short time and with

109
00:04:17,440 --> 00:04:21,120
one command this will avoid any

110
00:04:21,120 --> 00:04:21,918
unintended

111
00:04:21,918 --> 00:04:24,160
costs of servers deployed on the cloud

112
00:04:24,160 --> 00:04:27,040
and left there

113
00:04:27,280 --> 00:04:29,919
by mistake after the engagement has been

114
00:04:29,919 --> 00:04:32,479
completed

115
00:04:32,880 --> 00:04:36,240
okay so let's now dig into the modules

116
00:04:36,240 --> 00:04:38,639
offered by overlord

117
00:04:38,639 --> 00:04:41,280
it's each module has a specific purpose

118
00:04:41,280 --> 00:04:42,240
and we have

119
00:04:42,240 --> 00:04:45,759
the servers side

120
00:04:45,759 --> 00:04:48,800
and the rest of the modules let's start

121
00:04:48,800 --> 00:04:51,759
with the servers

122
00:04:51,759 --> 00:04:54,960
so first of all we have the c2 servers

123
00:04:54,960 --> 00:04:56,479
which are the command and control we

124
00:04:56,479 --> 00:04:58,080
have already explained

125
00:04:58,080 --> 00:05:01,440
then we have mail servers which

126
00:05:01,440 --> 00:05:04,960
we use i read mail and postfix

127
00:05:04,960 --> 00:05:08,000
to configure seqr solution

128
00:05:08,000 --> 00:05:11,120
of ml server so we make a lot of

129
00:05:11,120 --> 00:05:13,680
configuration changes

130
00:05:13,680 --> 00:05:17,280
in the deployment

131
00:05:17,280 --> 00:05:19,600
the web server which is essentially a

132
00:05:19,600 --> 00:05:23,680
server with 80 and 443 open

133
00:05:23,680 --> 00:05:27,360
the directors which might

134
00:05:27,360 --> 00:05:32,160
must be connected to c2 servers

135
00:05:32,160 --> 00:05:35,759
and finally we have goldfish

136
00:05:35,759 --> 00:05:39,039
which is a module which fully installs

137
00:05:39,039 --> 00:05:42,080
and starts the garbage service on a

138
00:05:42,080 --> 00:05:42,880
specified

139
00:05:42,880 --> 00:05:45,360
server on the cloud the user can then

140
00:05:45,360 --> 00:05:46,479
use the ip

141
00:05:46,479 --> 00:05:50,000
provided to login to the

142
00:05:50,000 --> 00:05:53,280
web interface via port 3333

143
00:05:53,280 --> 00:05:55,680
which will only be accessible from the

144
00:05:55,680 --> 00:05:56,880
ip

145
00:05:56,880 --> 00:05:58,720
where the infrastructure was deployed

146
00:05:58,720 --> 00:06:01,440
from the public ip of the pentas team

147
00:06:01,440 --> 00:06:04,880
essentially the rest of the modules

148
00:06:04,880 --> 00:06:08,000
are used to complete the infrastructure

149
00:06:08,000 --> 00:06:11,600
so we have the dns record module

150
00:06:11,600 --> 00:06:14,319
which it deploys dns records on the

151
00:06:14,319 --> 00:06:16,639
provider where the specified servers

152
00:06:16,639 --> 00:06:20,160
reside the let's say crypt module

153
00:06:20,160 --> 00:06:21,919
has three different implementations

154
00:06:21,919 --> 00:06:24,479
which one is for govis server

155
00:06:24,479 --> 00:06:26,720
web server one is for a generic web

156
00:06:26,720 --> 00:06:28,960
server and one is for creating

157
00:06:28,960 --> 00:06:32,560
the dot pm file to be used on

158
00:06:32,560 --> 00:06:36,639
se2 for example then we have the ansible

159
00:06:36,639 --> 00:06:38,160
module which is

160
00:06:38,160 --> 00:06:41,600
one of our new features ansible is used

161
00:06:41,600 --> 00:06:41,919
with

162
00:06:41,919 --> 00:06:44,319
custom playbooks which are created by

163
00:06:44,319 --> 00:06:45,520
the user

164
00:06:45,520 --> 00:06:48,160
the yam playbooks can be used to perform

165
00:06:48,160 --> 00:06:49,919
actions on any of the deployed

166
00:06:49,919 --> 00:06:53,599
servers and installations of course

167
00:06:53,599 --> 00:06:56,319
and finally coded is used to redirect

168
00:06:56,319 --> 00:06:59,199
their name servers

169
00:06:59,199 --> 00:07:01,280
to the provider where the dns records

170
00:07:01,280 --> 00:07:03,440
will reside so for example if you have a

171
00:07:03,440 --> 00:07:04,240
domain

172
00:07:04,240 --> 00:07:07,599
registered on godaddy

173
00:07:07,680 --> 00:07:10,800
and you create a c2 server on nws

174
00:07:10,800 --> 00:07:13,759
with an a record on that domain you have

175
00:07:13,759 --> 00:07:14,319
to use

176
00:07:14,319 --> 00:07:16,479
the godaddy module to redirect the name

177
00:07:16,479 --> 00:07:18,479
servers to aws

178
00:07:18,479 --> 00:07:22,080
okay so

179
00:07:22,240 --> 00:07:25,599
this is especially helpful for route 53

180
00:07:25,599 --> 00:07:27,759
because the name servers are different

181
00:07:27,759 --> 00:07:31,840
every time you deploy an infrastructure

182
00:07:31,840 --> 00:07:34,080
so overlord will wait until they are

183
00:07:34,080 --> 00:07:34,880
determined

184
00:07:34,880 --> 00:07:36,560
and then it will change the goldaddy

185
00:07:36,560 --> 00:07:40,000
entries to the nws generated nameservers

186
00:07:40,000 --> 00:07:42,639
for digitalocean the change is also done

187
00:07:42,639 --> 00:07:43,759
automatically

188
00:07:43,759 --> 00:07:46,960
by overlord but

189
00:07:46,960 --> 00:07:48,960
the manual change is also easy because

190
00:07:48,960 --> 00:07:51,360
the name servers are the standard ns1

191
00:07:51,360 --> 00:07:54,400
and s2 and s3.digitalocean.com

192
00:07:54,400 --> 00:07:56,960
which can be done easily manually as

193
00:07:56,960 --> 00:07:58,319
well

194
00:07:58,319 --> 00:08:00,160
it should be noted here that if you use

195
00:08:00,160 --> 00:08:01,360
a dns c2

196
00:08:01,360 --> 00:08:03,680
and you have to manually change the host

197
00:08:03,680 --> 00:08:05,680
names of the name servers to point to

198
00:08:05,680 --> 00:08:06,800
your own domain

199
00:08:06,800 --> 00:08:12,720
this is not done by overload okay

200
00:08:12,720 --> 00:08:14,560
okay so now that we know how the tool

201
00:08:14,560 --> 00:08:15,759
works and what

202
00:08:15,759 --> 00:08:17,919
it can do let's see the structure of the

203
00:08:17,919 --> 00:08:19,520
folders and files

204
00:08:19,520 --> 00:08:23,120
first of all the config.json file

205
00:08:23,120 --> 00:08:25,360
includes all the necessary information

206
00:08:25,360 --> 00:08:26,639
such as default values

207
00:08:26,639 --> 00:08:29,919
for example we have the digital ocean as

208
00:08:29,919 --> 00:08:31,599
our default provider which means that

209
00:08:31,599 --> 00:08:33,519
whenever we have the provider variable

210
00:08:33,519 --> 00:08:34,559
in overlord

211
00:08:34,559 --> 00:08:36,958
it will be populated with the digital

212
00:08:36,958 --> 00:08:38,640
version value

213
00:08:38,640 --> 00:08:41,200
you can of course change that and amend

214
00:08:41,200 --> 00:08:43,679
it to your needs

215
00:08:43,679 --> 00:08:46,720
the variables.json file includes all the

216
00:08:46,720 --> 00:08:48,720
api tokens and keys to connect to the

217
00:08:48,720 --> 00:08:51,279
providers

218
00:08:51,600 --> 00:08:54,320
the scripts folder contains some scripts

219
00:08:54,320 --> 00:08:56,480
and tools which we have created to run

220
00:08:56,480 --> 00:08:58,080
on specified servers

221
00:08:58,080 --> 00:09:00,240
for example the govis implementation is

222
00:09:00,240 --> 00:09:01,440
located here

223
00:09:01,440 --> 00:09:02,720
as well as the installation of

224
00:09:02,720 --> 00:09:06,080
metasploit and dns cut

225
00:09:07,120 --> 00:09:09,600
the playbooks are the yummy files

226
00:09:09,600 --> 00:09:11,519
created by the user to be

227
00:09:11,519 --> 00:09:14,240
used on specified servers overlord will

228
00:09:14,240 --> 00:09:16,080
load all the files from this directory

229
00:09:16,080 --> 00:09:17,760
to the playbook variable

230
00:09:17,760 --> 00:09:19,760
in the ansible module which you will see

231
00:09:19,760 --> 00:09:21,040
later

232
00:09:21,040 --> 00:09:24,079
when we demo the tool

233
00:09:24,320 --> 00:09:27,600
then we have the project directory

234
00:09:27,600 --> 00:09:31,360
where we have the ssh keys in the folder

235
00:09:31,360 --> 00:09:34,480
where all the ssh keys of

236
00:09:34,480 --> 00:09:38,560
the deployed servers will be stored

237
00:09:38,560 --> 00:09:41,760
from there you can log in

238
00:09:41,760 --> 00:09:45,519
to all the deployed servers

239
00:09:45,760 --> 00:09:46,959
and then finally we have the

240
00:09:46,959 --> 00:09:48,480
certificates folder which is used to

241
00:09:48,480 --> 00:09:50,480
store the dot pm certificates

242
00:09:50,480 --> 00:09:53,600
in case that the balance secret module

243
00:09:53,600 --> 00:09:56,800
is used okay so

244
00:09:56,800 --> 00:09:58,560
i haven't mentioned it previously but

245
00:09:58,560 --> 00:10:00,480
overload was presented for the first

246
00:10:00,480 --> 00:10:00,959
time

247
00:10:00,959 --> 00:10:04,240
last october in besides cyprus

248
00:10:04,240 --> 00:10:06,320
when we submitted to blackhead we

249
00:10:06,320 --> 00:10:07,839
promised the major upgrade with new

250
00:10:07,839 --> 00:10:08,800
features

251
00:10:08,800 --> 00:10:12,160
so the new version now includes the

252
00:10:12,160 --> 00:10:15,680
ansible module which is used to load the

253
00:10:15,680 --> 00:10:17,600
yam playbooks and install anything

254
00:10:17,600 --> 00:10:21,200
the user wants on servers

255
00:10:21,200 --> 00:10:24,160
based on that we have created a playbook

256
00:10:24,160 --> 00:10:25,920
for user management

257
00:10:25,920 --> 00:10:27,920
this playbook creates different users

258
00:10:27,920 --> 00:10:29,519
with different ssh keys

259
00:10:29,519 --> 00:10:32,800
on servers and also enables logging

260
00:10:32,800 --> 00:10:34,640
in case a client has a question for

261
00:10:34,640 --> 00:10:36,800
specific actions that we have performed

262
00:10:36,800 --> 00:10:39,120
we can go back and find out what

263
00:10:39,120 --> 00:10:40,560
happened

264
00:10:40,560 --> 00:10:44,480
another request that we had from users

265
00:10:44,480 --> 00:10:46,560
was the implementation of an internal

266
00:10:46,560 --> 00:10:48,320
situation

267
00:10:48,320 --> 00:10:50,800
so this redirector is basically pointing

268
00:10:50,800 --> 00:10:53,120
to an internal c2 server

269
00:10:53,120 --> 00:10:56,399
instead of one on the cloud so this is

270
00:10:56,399 --> 00:10:57,839
done by auto ssh

271
00:10:57,839 --> 00:11:01,760
and it supports http and dns

272
00:11:01,760 --> 00:11:03,600
we also upgraded all the modules from

273
00:11:03,600 --> 00:11:07,200
terraform 0.11 to 0.12

274
00:11:07,200 --> 00:11:09,760
and finally we now support new linux

275
00:11:09,760 --> 00:11:11,519
distributions

276
00:11:11,519 --> 00:11:13,519
we have previously really supported

277
00:11:13,519 --> 00:11:16,399
debian on both nws and digital ocean

278
00:11:16,399 --> 00:11:19,680
now we support kali and ubuntu

279
00:11:19,680 --> 00:11:22,880
and debian on nws and

280
00:11:22,880 --> 00:11:26,480
ubuntu and debian on digital ocean

281
00:11:26,480 --> 00:11:29,920
ok so finally it's demo time

282
00:11:29,920 --> 00:11:32,240
uh vaselines will show you the tool but

283
00:11:32,240 --> 00:11:32,959
before that

284
00:11:32,959 --> 00:11:35,120
i will show you what is the

285
00:11:35,120 --> 00:11:36,800
infrastructure that we are going to

286
00:11:36,800 --> 00:11:40,720
set up so we are going to set up the

287
00:11:40,720 --> 00:11:43,279
following infrastructure

288
00:11:43,279 --> 00:11:47,040
we have one httpc2 with

289
00:11:47,040 --> 00:11:51,120
its redirector on aws and a certificate

290
00:11:51,120 --> 00:11:53,760
on this domain

291
00:11:53,760 --> 00:11:56,160
then we have one internal redirector on

292
00:11:56,160 --> 00:11:57,040
nws

293
00:11:57,040 --> 00:12:00,480
which points to an internal c2

294
00:12:00,480 --> 00:12:03,120
where the attacker in the attacker's

295
00:12:03,120 --> 00:12:05,440
internal network

296
00:12:05,440 --> 00:12:09,200
we have a govis server

297
00:12:09,200 --> 00:12:12,880
with its redirector and again with a

298
00:12:12,880 --> 00:12:14,720
certificate of this domain

299
00:12:14,720 --> 00:12:18,480
and on the cofish web server

300
00:12:18,480 --> 00:12:21,839
we have one mail server and only the

301
00:12:21,839 --> 00:12:22,560
client of

302
00:12:22,560 --> 00:12:27,120
cofish is allowed to send mails

303
00:12:27,120 --> 00:12:30,399
via the mail server

304
00:12:30,800 --> 00:12:34,320
we have another https touring director

305
00:12:34,320 --> 00:12:37,120
for the same c2 but it's on digitalocean

306
00:12:37,120 --> 00:12:38,000
so we have

307
00:12:38,000 --> 00:12:41,120
one on digital ocean and one on aws

308
00:12:41,120 --> 00:12:44,160
redirecting both to the same c2

309
00:12:44,160 --> 00:12:46,959
and on our command and control server we

310
00:12:46,959 --> 00:12:48,800
use the user management and simple

311
00:12:48,800 --> 00:12:49,519
module

312
00:12:49,519 --> 00:12:52,639
to create two different users

313
00:12:52,639 --> 00:12:56,160
on the same machine

314
00:12:56,160 --> 00:13:00,319
okay so let's start with the demo

315
00:13:01,040 --> 00:13:04,320
and bacillus will show you how the tool

316
00:13:04,320 --> 00:13:04,720
works

317
00:13:04,720 --> 00:13:08,079
thank you very much typing help you can

318
00:13:08,079 --> 00:13:10,240
quickly find out more information

319
00:13:10,240 --> 00:13:12,880
about each command with a4 command you

320
00:13:12,880 --> 00:13:13,920
can see your keys

321
00:13:13,920 --> 00:13:17,519
domains and created modules so let's add

322
00:13:17,519 --> 00:13:20,480
r our kali machine on nws with

323
00:13:20,480 --> 00:13:21,279
metasploit

324
00:13:21,279 --> 00:13:24,480
and one new director overload has auto

325
00:13:24,480 --> 00:13:26,079
complete functionality

326
00:13:26,079 --> 00:13:27,760
so you can double tap to see the

327
00:13:27,760 --> 00:13:29,120
available options

328
00:13:29,120 --> 00:13:31,040
to add an additional redirector on the

329
00:13:31,040 --> 00:13:32,399
same c2

330
00:13:32,399 --> 00:13:34,880
we can use the director module this

331
00:13:34,880 --> 00:13:35,920
comes handy

332
00:13:35,920 --> 00:13:38,079
when you want to spawn up a redirector

333
00:13:38,079 --> 00:13:39,600
on a different provider

334
00:13:39,600 --> 00:13:42,800
than the c2 server

335
00:13:45,199 --> 00:13:47,440
one of our new features is the ability

336
00:13:47,440 --> 00:13:49,600
to create a director that points to

337
00:13:49,600 --> 00:13:51,120
internal ip

338
00:13:51,120 --> 00:13:52,959
this can be done by using the localhost

339
00:13:52,959 --> 00:13:57,199
value on the redirector id parameter

340
00:14:00,880 --> 00:14:03,839
next we set up a goldfish instance and

341
00:14:03,839 --> 00:14:07,360
see director on digiology

342
00:14:08,959 --> 00:14:11,760
after the govish modulus is added we can

343
00:14:11,760 --> 00:14:13,360
set up our main server

344
00:14:13,360 --> 00:14:15,519
due to the customized configuration that

345
00:14:15,519 --> 00:14:17,279
we created for the main server

346
00:14:17,279 --> 00:14:19,680
at least one allowed ip has to be added

347
00:14:19,680 --> 00:14:22,000
with the set allowed ips command

348
00:14:22,000 --> 00:14:24,560
this will change my network's value in

349
00:14:24,560 --> 00:14:25,519
postfix

350
00:14:25,519 --> 00:14:27,279
and the access control is inadequate

351
00:14:27,279 --> 00:14:29,760
configuration automatically

352
00:14:29,760 --> 00:14:32,079
we have added short descriptions next to

353
00:14:32,079 --> 00:14:34,240
each of the modules ids

354
00:14:34,240 --> 00:14:35,920
to make it easier to identify the

355
00:14:35,920 --> 00:14:39,199
current instance

356
00:14:39,680 --> 00:14:41,839
the info command can also be used to

357
00:14:41,839 --> 00:14:43,839
check the configuration for each module

358
00:14:43,839 --> 00:14:45,760
as we can see in our screens

359
00:14:45,760 --> 00:14:48,000
now

360
00:14:49,360 --> 00:14:51,040
as mentioned before to make the tool

361
00:14:51,040 --> 00:14:53,279
more scalable we have implemented the

362
00:14:53,279 --> 00:14:54,720
accessible module

363
00:14:54,720 --> 00:14:56,639
using the set playable command we are

364
00:14:56,639 --> 00:14:59,519
going to use the user management script

365
00:14:59,519 --> 00:15:02,000
which generates and adds our own public

366
00:15:02,000 --> 00:15:03,920
keys to the c2 server

367
00:15:03,920 --> 00:15:06,880
the script also enables page and tmx

368
00:15:06,880 --> 00:15:09,279
login

369
00:15:11,279 --> 00:15:13,839
now it's time for the hard part we need

370
00:15:13,839 --> 00:15:15,839
to create all the dns records for our

371
00:15:15,839 --> 00:15:16,639
project

372
00:15:16,639 --> 00:15:19,040
we are going to add an a record of our

373
00:15:19,040 --> 00:15:21,040
own c2 server

374
00:15:21,040 --> 00:15:24,079
on nws to set up the record we have to

375
00:15:24,079 --> 00:15:26,560
use the set record command specifying

376
00:15:26,560 --> 00:15:29,360
the module and domain name

377
00:15:29,360 --> 00:15:31,920
we will be fast forward the remaining

378
00:15:31,920 --> 00:15:34,000
dns record because it's the same process

379
00:15:34,000 --> 00:15:36,880
for the rest of them

380
00:15:39,199 --> 00:15:42,399
we support three types of records a txt

381
00:15:42,399 --> 00:15:44,800
and mx we encourage you to check our

382
00:15:44,800 --> 00:15:46,639
wiki for more details

383
00:15:46,639 --> 00:15:49,279
another tip is to take some time to

384
00:15:49,279 --> 00:15:50,320
visualize

385
00:15:50,320 --> 00:15:52,079
your setup before adding your dns

386
00:15:52,079 --> 00:15:55,839
records with overlord

387
00:16:02,560 --> 00:16:06,320
as we can see a dmarc and spf records

388
00:16:06,320 --> 00:16:08,639
are pre-defined as templates making the

389
00:16:08,639 --> 00:16:12,000
process a bit easier

390
00:16:21,600 --> 00:16:24,240
if your dns provider is godaddy you can

391
00:16:24,240 --> 00:16:26,000
redirect your domain names

392
00:16:26,000 --> 00:16:29,360
to digitalocean and route53 respectively

393
00:16:29,360 --> 00:16:32,560
overload will automatically add add them

394
00:16:32,560 --> 00:16:34,320
to the correct provider based around

395
00:16:34,320 --> 00:16:37,519
their records

396
00:16:37,519 --> 00:16:40,160
now with everything set up let's deploy

397
00:16:40,160 --> 00:16:51,839
our infrastructure

398
00:16:56,160 --> 00:16:58,079
as we can see when the deployment is

399
00:16:58,079 --> 00:17:00,480
finished we are greeted with all the ips

400
00:17:00,480 --> 00:17:01,839
and commands we need to know

401
00:17:01,839 --> 00:17:04,079
about our infrastructure using the

402
00:17:04,079 --> 00:17:05,280
remaining command

403
00:17:05,280 --> 00:17:07,839
we can change the name of the project we

404
00:17:07,839 --> 00:17:10,000
suggest deploying the certificates after

405
00:17:10,000 --> 00:17:11,520
creating your infrastructure

406
00:17:11,520 --> 00:17:14,400
otherwise you might get the serve fail

407
00:17:14,400 --> 00:17:19,839
error from your name server

408
00:17:24,160 --> 00:17:26,240
created and deploying the project again

409
00:17:26,240 --> 00:17:30,079
we'll add the additional modules to our

410
00:17:30,840 --> 00:17:33,840
campaign

411
00:17:43,679 --> 00:17:44,880
and now we are finished with

412
00:17:44,880 --> 00:17:47,760
installation our project folder

413
00:17:47,760 --> 00:17:49,760
contains all the ssh keys and

414
00:17:49,760 --> 00:17:52,559
certificates overload generated

415
00:17:52,559 --> 00:17:55,120
authenticating to gov server as root we

416
00:17:55,120 --> 00:17:56,240
can download

417
00:17:56,240 --> 00:17:58,400
the password which was automatically

418
00:17:58,400 --> 00:18:01,840
generated for the web interface

419
00:18:05,600 --> 00:18:08,720
as we can see in our screen overload has

420
00:18:08,720 --> 00:18:09,520
generated

421
00:18:09,520 --> 00:18:15,840
all the necessary commands for us

422
00:18:23,600 --> 00:18:26,320
now let's test a variety of playbook run

423
00:18:26,320 --> 00:18:27,039
correctly

424
00:18:27,039 --> 00:18:29,520
on rc2 we should be able to use my

425
00:18:29,520 --> 00:18:31,280
personal private key to log in

426
00:18:31,280 --> 00:18:43,840
with my username on the kali machine

427
00:18:44,799 --> 00:18:46,720
one note to have in mind is that the

428
00:18:46,720 --> 00:18:48,640
mail server needs a reboot to work

429
00:18:48,640 --> 00:18:51,120
properly

430
00:18:55,200 --> 00:18:59,280
let's login and reboot the machine

431
00:19:06,160 --> 00:19:09,120
and finally let's use our internal

432
00:19:09,120 --> 00:19:10,240
director

433
00:19:10,240 --> 00:19:12,799
i'm going to add a streak on my

434
00:19:12,799 --> 00:19:14,160
index.html file

435
00:19:14,160 --> 00:19:25,840
and spin up an http server for our demo

436
00:19:34,080 --> 00:19:36,720
as we can see all the dns records have

437
00:19:36,720 --> 00:19:38,240
been set up correctly

438
00:19:38,240 --> 00:19:42,000
for the overlord red domain

439
00:19:42,080 --> 00:19:44,799
our teller director worked as intended

440
00:19:44,799 --> 00:19:45,200
as

441
00:19:45,200 --> 00:19:47,440
and the goldfish generated instances

442
00:19:47,440 --> 00:19:53,840
were successfully installed

443
00:19:56,880 --> 00:19:58,880
finally a certificate for the

444
00:19:58,880 --> 00:20:01,360
web.overlord domain was successfully

445
00:20:01,360 --> 00:20:04,559
uploaded to the web server

446
00:20:05,760 --> 00:20:07,840
thank you for joining us and we hope you

447
00:20:07,840 --> 00:20:09,280
enjoyed the presentation and the

448
00:20:09,280 --> 00:20:12,960
demonstration of our tour

