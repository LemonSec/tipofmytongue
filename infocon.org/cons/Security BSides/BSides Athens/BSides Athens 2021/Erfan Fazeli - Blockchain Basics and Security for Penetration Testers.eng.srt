1
00:00:04,240 --> 00:00:05,759
hello everyone

2
00:00:05,759 --> 00:00:09,040
the purpose of this talk is to provide

3
00:00:09,040 --> 00:00:11,679
people especially penetration testers an

4
00:00:11,679 --> 00:00:12,639
overview of

5
00:00:12,639 --> 00:00:15,839
what a blockchain is how we can look at

6
00:00:15,839 --> 00:00:17,840
it from a security perspective

7
00:00:17,840 --> 00:00:19,439
what kind of tools are available to

8
00:00:19,439 --> 00:00:20,960
conduct engagements

9
00:00:20,960 --> 00:00:23,199
and overall get a general understanding

10
00:00:23,199 --> 00:00:25,439
of this new technology that no doubt

11
00:00:25,439 --> 00:00:29,519
will be a major uh

12
00:00:29,519 --> 00:00:31,599
player in our field over the coming

13
00:00:31,599 --> 00:00:33,280
years

14
00:00:33,280 --> 00:00:35,840
first off let's begin by discussing what

15
00:00:35,840 --> 00:00:37,680
a blockchain is

16
00:00:37,680 --> 00:00:40,320
in terms of definition a blockchain is

17
00:00:40,320 --> 00:00:42,399
quite simply a database

18
00:00:42,399 --> 00:00:45,360
and you can think of it much like how

19
00:00:45,360 --> 00:00:46,320
you thought of it

20
00:00:46,320 --> 00:00:48,160
in your previous engagement in your web

21
00:00:48,160 --> 00:00:49,520
engagement especially when you were

22
00:00:49,520 --> 00:00:51,600
faced with a web application that had a

23
00:00:51,600 --> 00:00:52,320
back end

24
00:00:52,320 --> 00:00:56,800
of mysql or ms sql or oracle

25
00:00:56,800 --> 00:00:58,960
a lot of applications that are built on

26
00:00:58,960 --> 00:01:00,239
top of the blockchains

27
00:01:00,239 --> 00:01:02,640
are much like that they're usually a web

28
00:01:02,640 --> 00:01:03,520
interface

29
00:01:03,520 --> 00:01:06,400
with a backend database that's built on

30
00:01:06,400 --> 00:01:08,080
top of the blockchain so the blockchain

31
00:01:08,080 --> 00:01:09,600
itself is simply

32
00:01:09,600 --> 00:01:12,479
a database but it's format the way it

33
00:01:12,479 --> 00:01:15,280
operates it's slightly different

34
00:01:15,280 --> 00:01:18,880
in terms of features databases have

35
00:01:18,880 --> 00:01:22,640
features that are different from what

36
00:01:22,640 --> 00:01:25,759
traditional databases offer which i will

37
00:01:25,759 --> 00:01:26,400
describe

38
00:01:26,400 --> 00:01:29,360
in detail so with traditional databases

39
00:01:29,360 --> 00:01:31,600
like the mssql mysql

40
00:01:31,600 --> 00:01:34,079
oracle everything was it was and still

41
00:01:34,079 --> 00:01:35,360
is centralized

42
00:01:35,360 --> 00:01:37,439
meaning that there is a server somewhere

43
00:01:37,439 --> 00:01:38,479
and that server

44
00:01:38,479 --> 00:01:41,439
is hosted by the company that needs the

45
00:01:41,439 --> 00:01:42,720
database to

46
00:01:42,720 --> 00:01:45,680
operate for them or that server is

47
00:01:45,680 --> 00:01:46,560
somewhere on

48
00:01:46,560 --> 00:01:50,479
a remote data center somewhere but

49
00:01:50,479 --> 00:01:52,560
it's still owned and operated by the

50
00:01:52,560 --> 00:01:54,720
company that owns it

51
00:01:54,720 --> 00:01:57,200
with a blockchain based database uh the

52
00:01:57,200 --> 00:01:59,439
the game is shifted what we see

53
00:01:59,439 --> 00:02:02,560
is a a database that is hosted by

54
00:02:02,560 --> 00:02:06,159
multiple parties which are usually

55
00:02:06,159 --> 00:02:08,399
untrusted so they don't really know each

56
00:02:08,399 --> 00:02:09,919
other they have no

57
00:02:09,919 --> 00:02:11,599
particular relationship with each other

58
00:02:11,599 --> 00:02:13,599
they they just want to operate the

59
00:02:13,599 --> 00:02:15,280
blockchain they just want to operate the

60
00:02:15,280 --> 00:02:16,080
database

61
00:02:16,080 --> 00:02:18,000
so what happens is each one of those

62
00:02:18,000 --> 00:02:19,120
parties will grab

63
00:02:19,120 --> 00:02:22,400
a copy of the database and help each

64
00:02:22,400 --> 00:02:24,000
other maintain the latest

65
00:02:24,000 --> 00:02:26,560
state of that database and in the

66
00:02:26,560 --> 00:02:29,280
process they get rewarded

67
00:02:29,280 --> 00:02:32,480
now with traditional databases we have

68
00:02:32,480 --> 00:02:36,080
a permissioned way of approaching

69
00:02:36,080 --> 00:02:39,519
objects meaning that uh if you were to

70
00:02:39,519 --> 00:02:41,599
read or want to read something from the

71
00:02:41,599 --> 00:02:43,120
database you need to have some sort of

72
00:02:43,120 --> 00:02:44,800
permission you have to have maybe read

73
00:02:44,800 --> 00:02:47,120
permission write permission

74
00:02:47,120 --> 00:02:49,440
in order to do anything on the on the

75
00:02:49,440 --> 00:02:50,400
databases

76
00:02:50,400 --> 00:02:52,879
that are traditional however with

77
00:02:52,879 --> 00:02:54,800
blockchain-based databases everything is

78
00:02:54,800 --> 00:02:55,680
permissionless

79
00:02:55,680 --> 00:02:58,080
what does that mean means that anyone at

80
00:02:58,080 --> 00:02:59,280
any moment in time

81
00:02:59,280 --> 00:03:01,599
with public blockchains can go and read

82
00:03:01,599 --> 00:03:03,760
everything on the database

83
00:03:03,760 --> 00:03:05,680
every single piece of information on the

84
00:03:05,680 --> 00:03:07,920
blockchain especially public blockchains

85
00:03:07,920 --> 00:03:09,840
are public i say public blockchains

86
00:03:09,840 --> 00:03:12,080
because some blockchains are private

87
00:03:12,080 --> 00:03:13,760
you know you can you can have a group of

88
00:03:13,760 --> 00:03:15,760
people that would operate

89
00:03:15,760 --> 00:03:18,959
a private blockchain and

90
00:03:18,959 --> 00:03:20,879
they can try to keep this information

91
00:03:20,879 --> 00:03:22,400
private but but

92
00:03:22,400 --> 00:03:25,120
most of the industry right now is is

93
00:03:25,120 --> 00:03:26,720
full of public

94
00:03:26,720 --> 00:03:29,440
blockchains so just keep in mind that

95
00:03:29,440 --> 00:03:30,080
with

96
00:03:30,080 --> 00:03:31,840
blockchains people can read all the

97
00:03:31,840 --> 00:03:33,360
information there's no need for you to

98
00:03:33,360 --> 00:03:34,799
have any permission at all

99
00:03:34,799 --> 00:03:38,400
you can just go to to blockchain

100
00:03:38,400 --> 00:03:40,640
reader services and just read any

101
00:03:40,640 --> 00:03:42,799
particular transaction or information

102
00:03:42,799 --> 00:03:44,560
and finally with traditional databases

103
00:03:44,560 --> 00:03:46,000
administrators can modify

104
00:03:46,000 --> 00:03:49,200
records let's say you accidentally

105
00:03:49,200 --> 00:03:50,720
put some incorrect record on the

106
00:03:50,720 --> 00:03:52,239
database you can contact the

107
00:03:52,239 --> 00:03:54,000
administrator of your organization and

108
00:03:54,000 --> 00:03:55,200
ask them to remove their

109
00:03:55,200 --> 00:03:57,200
code or change it or modify it with a

110
00:03:57,200 --> 00:03:58,799
blockchain database that is simply

111
00:03:58,799 --> 00:04:02,159
cannot be done you you really

112
00:04:02,159 --> 00:04:04,159
cannot change anything whatsoever once

113
00:04:04,159 --> 00:04:05,920
you do it once you write something to

114
00:04:05,920 --> 00:04:08,480
the blockchain it's there forever

115
00:04:08,480 --> 00:04:10,080
and that's basically the difference

116
00:04:10,080 --> 00:04:11,840
between traditional databases

117
00:04:11,840 --> 00:04:14,319
and blockchain-based databases

118
00:04:14,319 --> 00:04:16,798
traditional databases have their use

119
00:04:16,798 --> 00:04:20,000
and they will not go away but blockchain

120
00:04:20,000 --> 00:04:21,120
databases

121
00:04:21,120 --> 00:04:24,880
uh add a new use case allow for a new

122
00:04:24,880 --> 00:04:28,479
form of application slash uh

123
00:04:28,479 --> 00:04:30,720
protocol to be built on the internet

124
00:04:30,720 --> 00:04:34,080
that previously wasn't possible

125
00:04:34,080 --> 00:04:36,160
so that brings us quite nicely to

126
00:04:36,160 --> 00:04:38,560
bitcoin and and what is bitcoin and

127
00:04:38,560 --> 00:04:41,280
and how can we use it for our own uh

128
00:04:41,280 --> 00:04:42,240
benefits and

129
00:04:42,240 --> 00:04:44,960
an understanding of what blockchain is

130
00:04:44,960 --> 00:04:45,759
so

131
00:04:45,759 --> 00:04:48,880
bitcoin is basically a peer-to-peer cash

132
00:04:48,880 --> 00:04:51,919
uh a currency that is uh

133
00:04:51,919 --> 00:04:53,440
that has been built on top of the

134
00:04:53,440 --> 00:04:56,240
blockchain uh it's basically uh

135
00:04:56,240 --> 00:04:57,759
an app think of it like an app that's

136
00:04:57,759 --> 00:04:59,680
been built on top of the blockchain

137
00:04:59,680 --> 00:05:03,680
and you are able to as an individual

138
00:05:03,680 --> 00:05:06,240
to transact this currency between

139
00:05:06,240 --> 00:05:08,080
yourself and a bunch of other people

140
00:05:08,080 --> 00:05:10,160
there's no bank that's operating yet a

141
00:05:10,160 --> 00:05:12,560
group of untrusted individual and people

142
00:05:12,560 --> 00:05:13,840
that don't know each other

143
00:05:13,840 --> 00:05:17,039
are operating the bitcoin network and uh

144
00:05:17,039 --> 00:05:18,639
using the

145
00:05:18,639 --> 00:05:21,280
blockchain technology they keep it up to

146
00:05:21,280 --> 00:05:21,759
date

147
00:05:21,759 --> 00:05:24,000
and and they do the transactions but in

148
00:05:24,000 --> 00:05:25,520
the process every time

149
00:05:25,520 --> 00:05:27,440
the people who are operating the network

150
00:05:27,440 --> 00:05:29,120
make a transaction happen

151
00:05:29,120 --> 00:05:31,120
and they earn a small amount of fee and

152
00:05:31,120 --> 00:05:32,800
that's how the network keeps running

153
00:05:32,800 --> 00:05:34,560
that's how we can continue using bitcoin

154
00:05:34,560 --> 00:05:35,680
without the need of any

155
00:05:35,680 --> 00:05:38,720
central government slash company

156
00:05:38,720 --> 00:05:41,280
in terms of features as i mentioned it's

157
00:05:41,280 --> 00:05:43,440
decentralized there is no organization

158
00:05:43,440 --> 00:05:45,680
that that operates bitcoin it's a group

159
00:05:45,680 --> 00:05:46,080
of

160
00:05:46,080 --> 00:05:48,240
people that don't know each other but

161
00:05:48,240 --> 00:05:49,280
they have found

162
00:05:49,280 --> 00:05:52,000
a cryptographic way to confirm

163
00:05:52,000 --> 00:05:53,919
transactions are happening without being

164
00:05:53,919 --> 00:05:56,560
forged so so so they can trust each

165
00:05:56,560 --> 00:05:57,440
other and

166
00:05:57,440 --> 00:06:00,000
and transact in that way everything on

167
00:06:00,000 --> 00:06:00,720
the bitcoin

168
00:06:00,720 --> 00:06:03,120
uh blockchain is public meaning that

169
00:06:03,120 --> 00:06:04,479
everyone can read every single

170
00:06:04,479 --> 00:06:05,440
transaction

171
00:06:05,440 --> 00:06:08,000
and everything is immutable meaning that

172
00:06:08,000 --> 00:06:09,919
if i had one bitcoin i cannot send it to

173
00:06:09,919 --> 00:06:10,560
two people

174
00:06:10,560 --> 00:06:12,960
and this is only possible because of the

175
00:06:12,960 --> 00:06:14,160
blockchain technology

176
00:06:14,160 --> 00:06:16,960
with blockchain technology um you cannot

177
00:06:16,960 --> 00:06:18,720
duplicate your bitcoin and send it to

178
00:06:18,720 --> 00:06:19,919
people at the same time it's

179
00:06:19,919 --> 00:06:22,319
cryptographically impossible

180
00:06:22,319 --> 00:06:25,280
so so so that's basically uh bitcoin is

181
00:06:25,280 --> 00:06:27,280
a product of the blockchain

182
00:06:27,280 --> 00:06:28,960
you just keep that in mind it wasn't

183
00:06:28,960 --> 00:06:30,479
possible in the old traditional

184
00:06:30,479 --> 00:06:32,160
databases but it is possible

185
00:06:32,160 --> 00:06:33,840
and this is one of the many things that

186
00:06:33,840 --> 00:06:36,479
could be built on top of the blockchain

187
00:06:36,479 --> 00:06:39,280
now bitcoin has limitations think speed

188
00:06:39,280 --> 00:06:40,880
think scripting capability what does

189
00:06:40,880 --> 00:06:41,680
that mean

190
00:06:41,680 --> 00:06:44,800
so um once you uh uh

191
00:06:44,800 --> 00:06:46,639
use bitcoin you'll notice that it is

192
00:06:46,639 --> 00:06:48,479
slow meaning that if i was to send you a

193
00:06:48,479 --> 00:06:49,759
bitcoin right now

194
00:06:49,759 --> 00:06:52,800
it will take you probably 30 minutes

195
00:06:52,800 --> 00:06:54,160
sometimes it's early sometimes it's

196
00:06:54,160 --> 00:06:56,560
slightly later but on average 30 minutes

197
00:06:56,560 --> 00:06:57,120
before

198
00:06:57,120 --> 00:06:59,520
you you you get a confirmation that yes

199
00:06:59,520 --> 00:07:01,520
it has been received in your wallet and

200
00:07:01,520 --> 00:07:02,880
you have received the bitcoin

201
00:07:02,880 --> 00:07:04,479
that's a problem because if you want to

202
00:07:04,479 --> 00:07:06,960
build something on top of the bitcoin

203
00:07:06,960 --> 00:07:10,000
blockchain um it will it will take quite

204
00:07:10,000 --> 00:07:12,000
a while for it to actually propagate and

205
00:07:12,000 --> 00:07:13,759
finish

206
00:07:13,759 --> 00:07:16,000
so uh so that's quite limiting and

207
00:07:16,000 --> 00:07:17,599
there's also a problem with scripting

208
00:07:17,599 --> 00:07:18,639
capability

209
00:07:18,639 --> 00:07:21,039
meaning that if you wanted to utilize

210
00:07:21,039 --> 00:07:23,520
the existing network of bitcoin

211
00:07:23,520 --> 00:07:25,759
operators the existing bitcoin

212
00:07:25,759 --> 00:07:27,520
blockchain and build on top of that

213
00:07:27,520 --> 00:07:28,080
instead of

214
00:07:28,080 --> 00:07:29,680
rolling your own blockchain and then

215
00:07:29,680 --> 00:07:31,759
finding people to operate it and slowly

216
00:07:31,759 --> 00:07:33,199
grow just build on top of

217
00:07:33,199 --> 00:07:35,120
bitcoin instead if you want to do that

218
00:07:35,120 --> 00:07:37,199
the scripting capabilities of bitcoin

219
00:07:37,199 --> 00:07:38,319
are very limited

220
00:07:38,319 --> 00:07:40,160
so your your hands are quite tight over

221
00:07:40,160 --> 00:07:41,599
there so

222
00:07:41,599 --> 00:07:43,759
um what was the solution to this problem

223
00:07:43,759 --> 00:07:45,520
the solution was something called

224
00:07:45,520 --> 00:07:46,479
ethereum

225
00:07:46,479 --> 00:07:49,360
ethereum um was proposed by a gentleman

226
00:07:49,360 --> 00:07:50,879
by the name of uh by sally butter and

227
00:07:50,879 --> 00:07:52,479
back in 2014

228
00:07:52,479 --> 00:07:55,440
his his proposal was uh this uh

229
00:07:55,440 --> 00:07:57,360
cryptocurrency is incredible

230
00:07:57,360 --> 00:08:00,160
the the uh bitcoin cryptocurrency and

231
00:08:00,160 --> 00:08:00,479
and

232
00:08:00,479 --> 00:08:02,639
you know what we can do we can use it

233
00:08:02,639 --> 00:08:03,759
expand it

234
00:08:03,759 --> 00:08:06,720
and and and make it even better uh so

235
00:08:06,720 --> 00:08:07,440
how about

236
00:08:07,440 --> 00:08:10,720
we we increase its speed how about we

237
00:08:10,720 --> 00:08:13,120
make a lot of modifications to it

238
00:08:13,120 --> 00:08:15,840
and and he he wrote an extensive

239
00:08:15,840 --> 00:08:17,840
proposition and presented it to bitcoin

240
00:08:17,840 --> 00:08:18,720
developers and

241
00:08:18,720 --> 00:08:20,560
at the time bitcoin developers passed

242
00:08:20,560 --> 00:08:22,560
saying that these are

243
00:08:22,560 --> 00:08:25,199
what vitalik was proposing were major

244
00:08:25,199 --> 00:08:27,199
changes to what the bitcoin

245
00:08:27,199 --> 00:08:30,080
ideals were so they passed on those uh

246
00:08:30,080 --> 00:08:31,280
proposals

247
00:08:31,280 --> 00:08:34,320
and that's how ethereum was born

248
00:08:34,320 --> 00:08:35,760
as i mentioned ethereum is an open

249
00:08:35,760 --> 00:08:38,240
source blockchain everyone and anyone

250
00:08:38,240 --> 00:08:40,080
can build on top of the ethereum

251
00:08:40,080 --> 00:08:43,839
blockchain and um in order for you to

252
00:08:43,839 --> 00:08:46,320
build on top of the ethereum blockchain

253
00:08:46,320 --> 00:08:48,800
uh what you need is is something called

254
00:08:48,800 --> 00:08:49,360
ether

255
00:08:49,360 --> 00:08:52,640
if there is the cryptocurrency use to

256
00:08:52,640 --> 00:08:54,320
perform any actions on top of the

257
00:08:54,320 --> 00:08:56,240
ethereum blockchain

258
00:08:56,240 --> 00:08:59,519
much like the bitcoin uh sort of system

259
00:08:59,519 --> 00:09:00,480
and blockchain

260
00:09:00,480 --> 00:09:02,320
it's decentralized it's public and it's

261
00:09:02,320 --> 00:09:03,680
immutable so

262
00:09:03,680 --> 00:09:06,240
um a large number of people across the

263
00:09:06,240 --> 00:09:06,720
globe

264
00:09:06,720 --> 00:09:09,200
are operating this blockchain network

265
00:09:09,200 --> 00:09:11,279
everybody can read every transaction

266
00:09:11,279 --> 00:09:13,760
and nothing can be changed or forged on

267
00:09:13,760 --> 00:09:15,040
the ethereum

268
00:09:15,040 --> 00:09:17,120
blockchain now in terms of limitations

269
00:09:17,120 --> 00:09:18,640
there are two problems with the ethereum

270
00:09:18,640 --> 00:09:20,080
blockchain one is

271
00:09:20,080 --> 00:09:22,240
gas fees and the other is speed now you

272
00:09:22,240 --> 00:09:24,080
might be asking what is a gas fee

273
00:09:24,080 --> 00:09:27,600
if i wanted to perform a transaction on

274
00:09:27,600 --> 00:09:29,040
the ethereum blockchain

275
00:09:29,040 --> 00:09:31,360
uh let's say i wanted to send some

276
00:09:31,360 --> 00:09:33,360
ethereum from point a to point b

277
00:09:33,360 --> 00:09:35,360
there there are some fees and those fees

278
00:09:35,360 --> 00:09:37,279
are called gas fees

279
00:09:37,279 --> 00:09:40,480
and and those fees will will incur

280
00:09:40,480 --> 00:09:43,040
uh regardless of what the price of

281
00:09:43,040 --> 00:09:45,120
ethereum is if they are mandatory for

282
00:09:45,120 --> 00:09:47,040
every transaction

283
00:09:47,040 --> 00:09:48,640
and if you were to think of them they

284
00:09:48,640 --> 00:09:50,160
are denominated in

285
00:09:50,160 --> 00:09:52,640
in ethereum so if the price of ethereum

286
00:09:52,640 --> 00:09:55,040
goes to 10k or 20k

287
00:09:55,040 --> 00:09:58,959
that fee is fixed so you will still be

288
00:09:58,959 --> 00:10:01,920
uh in terms of ether you will be paying

289
00:10:01,920 --> 00:10:02,720
the same amount

290
00:10:02,720 --> 00:10:05,120
but in dollar value your the fee could

291
00:10:05,120 --> 00:10:06,959
be much higher or much lower depending

292
00:10:06,959 --> 00:10:09,839
on the price of ethereum that day

293
00:10:09,839 --> 00:10:11,440
and that presents some problems because

294
00:10:11,440 --> 00:10:12,800
if you were to build on top of the

295
00:10:12,800 --> 00:10:14,480
ethereum blockchain

296
00:10:14,480 --> 00:10:16,959
then and and your application would need

297
00:10:16,959 --> 00:10:19,040
to perform some transactions maybe move

298
00:10:19,040 --> 00:10:20,720
ethereum from point a to point b for

299
00:10:20,720 --> 00:10:21,920
whatever reason

300
00:10:21,920 --> 00:10:24,959
uh the fee that you or your users should

301
00:10:24,959 --> 00:10:26,160
pay

302
00:10:26,160 --> 00:10:28,320
increases drastically depending or the

303
00:10:28,320 --> 00:10:30,320
accuracy decreases drastically depending

304
00:10:30,320 --> 00:10:31,440
on

305
00:10:31,440 --> 00:10:33,200
what the what the price of e3 is that

306
00:10:33,200 --> 00:10:34,800
day

307
00:10:34,800 --> 00:10:37,839
now um another famous uh

308
00:10:37,839 --> 00:10:39,680
keyword you hear in this industry is

309
00:10:39,680 --> 00:10:41,360
dapps what are gaps

310
00:10:41,360 --> 00:10:43,440
and and i think this diagram really

311
00:10:43,440 --> 00:10:45,120
explains it quite simply

312
00:10:45,120 --> 00:10:47,760
dapps are decentralized applications any

313
00:10:47,760 --> 00:10:48,640
application

314
00:10:48,640 --> 00:10:50,320
that has been built on top of a

315
00:10:50,320 --> 00:10:51,839
blockchain based database

316
00:10:51,839 --> 00:10:54,880
is called adap and and that's all that

317
00:10:54,880 --> 00:10:56,399
it is you hear it being thrown around

318
00:10:56,399 --> 00:10:57,360
all the time

319
00:10:57,360 --> 00:10:59,040
and uh really the easiest way to think

320
00:10:59,040 --> 00:11:00,800
about it is this an application on top

321
00:11:00,800 --> 00:11:03,120
of the blockchain

322
00:11:03,120 --> 00:11:06,240
now as penetration testers uh what we

323
00:11:06,240 --> 00:11:07,760
will be faced with when

324
00:11:07,760 --> 00:11:10,640
we are hopefully in the future or in the

325
00:11:10,640 --> 00:11:11,360
near future

326
00:11:11,360 --> 00:11:13,440
will be doing uh blockchain based

327
00:11:13,440 --> 00:11:15,200
security orders is that

328
00:11:15,200 --> 00:11:18,079
people will provide us a web interface a

329
00:11:18,079 --> 00:11:19,200
web page

330
00:11:19,200 --> 00:11:20,560
and with that on that web page there

331
00:11:20,560 --> 00:11:22,399
will be a login mechanism you would go

332
00:11:22,399 --> 00:11:23,279
and test a

333
00:11:23,279 --> 00:11:25,040
blog in mechanism and you would log in

334
00:11:25,040 --> 00:11:27,040
and then what you presented was quite

335
00:11:27,040 --> 00:11:28,320
simply a

336
00:11:28,320 --> 00:11:31,200
web application initially that that

337
00:11:31,200 --> 00:11:32,160
could suffer from

338
00:11:32,160 --> 00:11:35,279
all the typical issues that a normal

339
00:11:35,279 --> 00:11:36,720
application suffers from

340
00:11:36,720 --> 00:11:39,440
so um if you are going to conduct that

341
00:11:39,440 --> 00:11:40,240
engagement

342
00:11:40,240 --> 00:11:41,760
for the first part of it you would have

343
00:11:41,760 --> 00:11:44,640
to just use the normal os methodology on

344
00:11:44,640 --> 00:11:46,399
the web interface to see what you could

345
00:11:46,399 --> 00:11:47,040
find

346
00:11:47,040 --> 00:11:49,200
and then report on those however with

347
00:11:49,200 --> 00:11:51,040
blockchain security audits there is a

348
00:11:51,040 --> 00:11:52,880
second part to this puzzle

349
00:11:52,880 --> 00:11:54,839
and that's actually doing the code

350
00:11:54,839 --> 00:11:56,000
review

351
00:11:56,000 --> 00:11:59,040
every single

352
00:11:59,040 --> 00:12:02,639
logic that has been written is written

353
00:12:02,639 --> 00:12:05,040
or in in a language called solidity on

354
00:12:05,040 --> 00:12:06,079
ethereum

355
00:12:06,079 --> 00:12:08,720
now with solidity the language is much

356
00:12:08,720 --> 00:12:10,000
similar to javascript

357
00:12:10,000 --> 00:12:12,079
if you have done javascript before in

358
00:12:12,079 --> 00:12:13,360
the past

359
00:12:13,360 --> 00:12:14,800
it would be easier for you to pick up

360
00:12:14,800 --> 00:12:16,639
solidity

361
00:12:16,639 --> 00:12:19,600
and you can use solidity to create the

362
00:12:19,600 --> 00:12:21,200
logic necessary

363
00:12:21,200 --> 00:12:23,760
to do all the operations needed on a

364
00:12:23,760 --> 00:12:26,079
blockchain database

365
00:12:26,079 --> 00:12:27,920
which in this case with solidity it's

366
00:12:27,920 --> 00:12:30,160
ethereum so

367
00:12:30,160 --> 00:12:31,839
with every engagements you get two parts

368
00:12:31,839 --> 00:12:33,440
one is doing the web interface with the

369
00:12:33,440 --> 00:12:35,120
west methodology and the other is

370
00:12:35,120 --> 00:12:36,320
learning solidity

371
00:12:36,320 --> 00:12:38,959
and then trying to pick up common code

372
00:12:38,959 --> 00:12:39,920
patterns that

373
00:12:39,920 --> 00:12:42,480
are bad and and point them to the

374
00:12:42,480 --> 00:12:43,440
developers

375
00:12:43,440 --> 00:12:45,519
uh with the white box engagements and

376
00:12:45,519 --> 00:12:47,680
and to learn what are common bad

377
00:12:47,680 --> 00:12:50,399
practices uh people in the ethereum

378
00:12:50,399 --> 00:12:52,240
community have put in a fantastic

379
00:12:52,240 --> 00:12:55,200
registry of classifications in place on

380
00:12:55,200 --> 00:12:56,079
a website

381
00:12:56,079 --> 00:12:58,399
that you see on the screen swc registry

382
00:12:58,399 --> 00:12:59,920
dot io

383
00:12:59,920 --> 00:13:02,560
on this swc registry dot io you will see

384
00:13:02,560 --> 00:13:03,279
a page

385
00:13:03,279 --> 00:13:05,320
that presents 36 different

386
00:13:05,320 --> 00:13:06,720
classifications

387
00:13:06,720 --> 00:13:09,680
of different types of bugs and and how

388
00:13:09,680 --> 00:13:10,880
you can look for them

389
00:13:10,880 --> 00:13:13,120
how you can fix them what is the

390
00:13:13,120 --> 00:13:14,959
implications of each one

391
00:13:14,959 --> 00:13:17,200
so hopefully once you learn solidity

392
00:13:17,200 --> 00:13:18,959
your next step should be to

393
00:13:18,959 --> 00:13:21,519
browse this page and pick up what are

394
00:13:21,519 --> 00:13:22,240
the

395
00:13:22,240 --> 00:13:25,200
important skills necessary in order to

396
00:13:25,200 --> 00:13:25,920
understand

397
00:13:25,920 --> 00:13:27,920
what code could be vulnerable and then

398
00:13:27,920 --> 00:13:30,639
report it accordingly

399
00:13:30,639 --> 00:13:32,800
now i wanted to walk you through how the

400
00:13:32,800 --> 00:13:34,240
code looks like and then give you a

401
00:13:34,240 --> 00:13:35,920
couple of examples

402
00:13:35,920 --> 00:13:39,040
and show you how simple it is really to

403
00:13:39,040 --> 00:13:40,160
understand the language

404
00:13:40,160 --> 00:13:42,079
and then what kind of bugs could be

405
00:13:42,079 --> 00:13:43,839
found and how bad or good

406
00:13:43,839 --> 00:13:46,880
uh well how bad they can be really so

407
00:13:46,880 --> 00:13:50,240
um what you see in this page is uh

408
00:13:50,240 --> 00:13:52,480
the most basic solidity code you would

409
00:13:52,480 --> 00:13:53,519
see out there

410
00:13:53,519 --> 00:13:55,360
and the first line is just a compiler

411
00:13:55,360 --> 00:13:57,519
version uh you're basically telling the

412
00:13:57,519 --> 00:13:59,360
compiler which version to use to compile

413
00:13:59,360 --> 00:14:00,320
your code

414
00:14:00,320 --> 00:14:03,360
and then every single uh

415
00:14:03,360 --> 00:14:06,639
application that's been built on uh

416
00:14:06,639 --> 00:14:09,360
ethereum at least it starts with the

417
00:14:09,360 --> 00:14:10,800
line contract

418
00:14:10,800 --> 00:14:12,399
what you see here is the name of the

419
00:14:12,399 --> 00:14:14,240
contract afterwards so it's contract

420
00:14:14,240 --> 00:14:15,279
hello world

421
00:14:15,279 --> 00:14:16,880
that's on line three that's just the

422
00:14:16,880 --> 00:14:19,360
contract name and then on line four we

423
00:14:19,360 --> 00:14:20,079
just define

424
00:14:20,079 --> 00:14:23,920
a string variable and we give it a value

425
00:14:23,920 --> 00:14:25,120
of hello world

426
00:14:25,120 --> 00:14:26,720
that's that's all that it is and once

427
00:14:26,720 --> 00:14:28,800
you compile it and then call the

428
00:14:28,800 --> 00:14:31,440
greets variable you will see the hello

429
00:14:31,440 --> 00:14:32,639
world being printed

430
00:14:32,639 --> 00:14:35,600
that's all that it is really now i want

431
00:14:35,600 --> 00:14:36,560
to give you

432
00:14:36,560 --> 00:14:39,760
a sample vulnerable code

433
00:14:39,760 --> 00:14:42,800
if you have done any sort of

434
00:14:42,800 --> 00:14:45,440
white box testing of code before i'm

435
00:14:45,440 --> 00:14:47,040
sure you're very familiar

436
00:14:47,040 --> 00:14:50,720
with overflows and underflows

437
00:14:50,720 --> 00:14:55,279
meaning that if a value

438
00:14:55,279 --> 00:14:58,880
goes over a certain threshold it it goes

439
00:14:58,880 --> 00:14:59,360
back

440
00:14:59,360 --> 00:15:02,720
to its original

441
00:15:02,880 --> 00:15:06,240
value instead so in order to give you an

442
00:15:06,240 --> 00:15:07,839
example what you see on this

443
00:15:07,839 --> 00:15:11,040
on this page is this is a contract

444
00:15:11,040 --> 00:15:14,079
called withdrawal if you look at line

445
00:15:14,079 --> 00:15:14,800
number two

446
00:15:14,800 --> 00:15:16,160
contract withdrawal that's just a

447
00:15:16,160 --> 00:15:18,639
contract name on line number three

448
00:15:18,639 --> 00:15:23,040
we have an unsigned integer that is

449
00:15:23,040 --> 00:15:25,440
for the balance variable so the balance

450
00:15:25,440 --> 00:15:26,480
variable

451
00:15:26,480 --> 00:15:30,480
uh has been or has a type of unsigned

452
00:15:30,480 --> 00:15:31,680
integer eight

453
00:15:31,680 --> 00:15:34,720
meaning that the maximum value it could

454
00:15:34,720 --> 00:15:35,360
have

455
00:15:35,360 --> 00:15:39,279
is 255 so

456
00:15:39,279 --> 00:15:42,399
um the problem here is that

457
00:15:42,399 --> 00:15:45,440
if someone was able to increase their

458
00:15:45,440 --> 00:15:46,399
their balance

459
00:15:46,399 --> 00:15:49,839
to more than 255 suddenly their

460
00:15:49,839 --> 00:15:52,959
their balance changes to one because it

461
00:15:52,959 --> 00:15:55,040
rolls over the variable unsigned integer

462
00:15:55,040 --> 00:15:56,399
it rolls over

463
00:15:56,399 --> 00:15:58,399
once it hits its maximum value back to

464
00:15:58,399 --> 00:16:01,040
one and another way to exploit this

465
00:16:01,040 --> 00:16:03,360
issue is if someone was able to

466
00:16:03,360 --> 00:16:06,480
withdraw a sum more than their balance

467
00:16:06,480 --> 00:16:09,759
make sure the variable goes back to its

468
00:16:09,759 --> 00:16:10,959
max value

469
00:16:10,959 --> 00:16:12,639
then they can abuse it that way as well

470
00:16:12,639 --> 00:16:14,160
and this is the issue that you see on

471
00:16:14,160 --> 00:16:16,079
the screen so on line 4

472
00:16:16,079 --> 00:16:19,519
function withdraw unsigned integer 8 sum

473
00:16:19,519 --> 00:16:21,360
so what you see here is there's a

474
00:16:21,360 --> 00:16:22,639
function that is uh

475
00:16:22,639 --> 00:16:26,399
for withdrawing and the the sum variable

476
00:16:26,399 --> 00:16:28,800
is of the type inside integer eight the

477
00:16:28,800 --> 00:16:30,560
sum is controlled by

478
00:16:30,560 --> 00:16:34,480
uh any user so uh what they can do

479
00:16:34,480 --> 00:16:37,440
is they can provide a number for example

480
00:16:37,440 --> 00:16:38,079
uh

481
00:16:38,079 --> 00:16:40,959
two here or three and uh in the next

482
00:16:40,959 --> 00:16:42,240
line on line five

483
00:16:42,240 --> 00:16:44,959
the balance the sum is subtracted from

484
00:16:44,959 --> 00:16:45,759
the balance

485
00:16:45,759 --> 00:16:48,959
so number three is subtracted from one

486
00:16:48,959 --> 00:16:50,320
which is the balance

487
00:16:50,320 --> 00:16:52,959
and uh because the variable has a

488
00:16:52,959 --> 00:16:55,199
maximum value of 255 so it's

489
00:16:55,199 --> 00:16:57,680
one to 255 and when you do the

490
00:16:57,680 --> 00:16:58,560
subtraction

491
00:16:58,560 --> 00:17:00,320
it goes back all the way up to the

492
00:17:00,320 --> 00:17:02,320
maximum value

493
00:17:02,320 --> 00:17:05,119
and you artificially increase the value

494
00:17:05,119 --> 00:17:06,240
of your balance

495
00:17:06,240 --> 00:17:09,919
because of this underflow issue

496
00:17:10,880 --> 00:17:13,679
another issue and other vulnerability

497
00:17:13,679 --> 00:17:14,160
within

498
00:17:14,160 --> 00:17:16,720
solidity is what you see on the screen

499
00:17:16,720 --> 00:17:17,760
um

500
00:17:17,760 --> 00:17:19,599
the answer is really inside the note

501
00:17:19,599 --> 00:17:21,439
that i provided at the top

502
00:17:21,439 --> 00:17:24,799
so in solidity you can create functions

503
00:17:24,799 --> 00:17:26,640
and you can set functions to be public

504
00:17:26,640 --> 00:17:27,760
or private

505
00:17:27,760 --> 00:17:29,840
and if you forget to properly secure

506
00:17:29,840 --> 00:17:32,320
them anyone can call them later

507
00:17:32,320 --> 00:17:35,039
what you see now is the code itself so

508
00:17:35,039 --> 00:17:35,600
you see

509
00:17:35,600 --> 00:17:38,799
uh progmo solidity 0.4.24 that's the

510
00:17:38,799 --> 00:17:40,400
compiler version

511
00:17:40,400 --> 00:17:42,080
the next line is contract identity

512
00:17:42,080 --> 00:17:44,480
crisis that's a contract name

513
00:17:44,480 --> 00:17:46,160
the next line afterwards is address

514
00:17:46,160 --> 00:17:48,559
public owner it's just a variable of the

515
00:17:48,559 --> 00:17:49,440
type address

516
00:17:49,440 --> 00:17:51,679
that holds the address of the owner and

517
00:17:51,679 --> 00:17:53,120
then we have a function

518
00:17:53,120 --> 00:17:56,559
called set wallet owner and it takes any

519
00:17:56,559 --> 00:17:58,559
address that the user provides and is

520
00:17:58,559 --> 00:17:59,200
set to

521
00:17:59,200 --> 00:18:02,480
public uh and and this is exactly where

522
00:18:02,480 --> 00:18:03,360
the problem is

523
00:18:03,360 --> 00:18:05,280
if you create a function and you set it

524
00:18:05,280 --> 00:18:07,120
to public and you forget to secure it

525
00:18:07,120 --> 00:18:09,200
with other means that solidity provides

526
00:18:09,200 --> 00:18:11,360
people can later call it again make

527
00:18:11,360 --> 00:18:12,240
themselves

528
00:18:12,240 --> 00:18:14,480
the owner and then take over the

529
00:18:14,480 --> 00:18:15,360
contract

530
00:18:15,360 --> 00:18:18,000
and and become the owner and then

531
00:18:18,000 --> 00:18:18,960
probably withdraw

532
00:18:18,960 --> 00:18:22,080
its balance if it has any balance this

533
00:18:22,080 --> 00:18:24,160
exact issue was the source of multiple

534
00:18:24,160 --> 00:18:26,240
exploits as a recent where people

535
00:18:26,240 --> 00:18:28,400
created some sort of function that would

536
00:18:28,400 --> 00:18:29,600
do something

537
00:18:29,600 --> 00:18:31,840
incredibly sensitive but they forget to

538
00:18:31,840 --> 00:18:33,760
set it or protect it properly

539
00:18:33,760 --> 00:18:38,080
and that caused all sorts of issues

540
00:18:38,080 --> 00:18:40,559
and that's really how to how to look at

541
00:18:40,559 --> 00:18:43,039
solidity as as you can see it's a very

542
00:18:43,039 --> 00:18:44,559
in my opinion if you know javascript

543
00:18:44,559 --> 00:18:46,559
it's a very simple language to read

544
00:18:46,559 --> 00:18:48,720
you just have to have the patience to go

545
00:18:48,720 --> 00:18:49,679
over it

546
00:18:49,679 --> 00:18:51,440
once you do the web interface checks you

547
00:18:51,440 --> 00:18:53,840
just get access to the code

548
00:18:53,840 --> 00:18:56,160
go over the code but you have to also

549
00:18:56,160 --> 00:18:58,480
understand what to look for so the swc

550
00:18:58,480 --> 00:18:59,360
registry

551
00:18:59,360 --> 00:19:01,919
is the best way to approach this now in

552
00:19:01,919 --> 00:19:02,480
terms of

553
00:19:02,480 --> 00:19:04,400
tools there are two excellent tools out

554
00:19:04,400 --> 00:19:05,760
there one is slither

555
00:19:05,760 --> 00:19:07,919
is the one i use all the time and

556
00:19:07,919 --> 00:19:09,360
slither is a free tool

557
00:19:09,360 --> 00:19:12,080
and what you do is you just point it to

558
00:19:12,080 --> 00:19:12,640
some

559
00:19:12,640 --> 00:19:14,480
some piece of code that that you have

560
00:19:14,480 --> 00:19:15,919
received from the client

561
00:19:15,919 --> 00:19:18,000
and you let it run it gives you an

562
00:19:18,000 --> 00:19:18,960
incredible number of

563
00:19:18,960 --> 00:19:22,400
uh results however a lot of them can be

564
00:19:22,400 --> 00:19:24,559
false positive so it's up to you as the

565
00:19:24,559 --> 00:19:25,520
reviewer

566
00:19:25,520 --> 00:19:28,480
to go through the results use slither as

567
00:19:28,480 --> 00:19:30,400
as a starting point

568
00:19:30,400 --> 00:19:32,880
to to understand okay there might be an

569
00:19:32,880 --> 00:19:34,400
issue on point a or point b

570
00:19:34,400 --> 00:19:35,760
maybe i should start looking there and

571
00:19:35,760 --> 00:19:37,760
then and then sort of start filtering

572
00:19:37,760 --> 00:19:38,080
down

573
00:19:38,080 --> 00:19:39,679
what is valid and what is invalid and

574
00:19:39,679 --> 00:19:41,919
then take it from there mythics is also

575
00:19:41,919 --> 00:19:42,640
another

576
00:19:42,640 --> 00:19:45,120
good service it's it's paid however but

577
00:19:45,120 --> 00:19:47,520
it's also another good service that does

578
00:19:47,520 --> 00:19:52,480
reviewing of uh solidity code as well

579
00:19:52,480 --> 00:19:57,840
and with that thank you very much

