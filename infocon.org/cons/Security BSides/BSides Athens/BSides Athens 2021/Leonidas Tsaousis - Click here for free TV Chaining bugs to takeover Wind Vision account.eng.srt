1
00:00:04,960 --> 00:00:06,879
hi everyone my name is leo and today

2
00:00:06,879 --> 00:00:08,480
we're going to talk about wind vision

3
00:00:08,480 --> 00:00:10,400
or how an attacker could change a series

4
00:00:10,400 --> 00:00:13,360
of bugs to take over your account

5
00:00:13,360 --> 00:00:15,120
this talk is split in four rough

6
00:00:15,120 --> 00:00:16,880
sections we'll start with a few

7
00:00:16,880 --> 00:00:17,920
introductions

8
00:00:17,920 --> 00:00:19,680
then we'll take a deep dive into the

9
00:00:19,680 --> 00:00:21,920
vulnerabilities then we'll go with its

10
00:00:21,920 --> 00:00:22,880
closer process

11
00:00:22,880 --> 00:00:25,039
and finally we'll close with a few tips

12
00:00:25,039 --> 00:00:27,039
for both developers and security

13
00:00:27,039 --> 00:00:28,800
researchers

14
00:00:28,800 --> 00:00:30,400
if you watch about myself my name is

15
00:00:30,400 --> 00:00:32,399
leonardo sauces and i work at ssu

16
00:00:32,399 --> 00:00:33,200
consulting

17
00:00:33,200 --> 00:00:35,120
which you might remember as mwr

18
00:00:35,120 --> 00:00:36,320
infosecurity

19
00:00:36,320 --> 00:00:37,920
i have a bit over five years of

20
00:00:37,920 --> 00:00:39,600
experience in the industry earning a

21
00:00:39,600 --> 00:00:42,079
couple of certifications along the way

22
00:00:42,079 --> 00:00:44,079
most of this time i've been a mobile

23
00:00:44,079 --> 00:00:45,520
security enthusiast but

24
00:00:45,520 --> 00:00:49,280
lately turned it to netsec directory

25
00:00:49,280 --> 00:00:52,239
and reptony stuff this is actually my

26
00:00:52,239 --> 00:00:53,120
first ever talk

27
00:00:53,120 --> 00:00:55,760
as a presenter i would normally include

28
00:00:55,760 --> 00:00:57,680
my hobbies here as well but the pandemic

29
00:00:57,680 --> 00:00:58,640
changeover

30
00:00:58,640 --> 00:00:59,920
for those who aren't familiar with the

31
00:00:59,920 --> 00:01:02,239
name wind is the second

32
00:01:02,239 --> 00:01:04,080
largest telecommunication provider in

33
00:01:04,080 --> 00:01:06,320
greece and with vision

34
00:01:06,320 --> 00:01:09,119
is a digital television service allowing

35
00:01:09,119 --> 00:01:09,439
for

36
00:01:09,439 --> 00:01:11,360
live and on-demand streaming of sports

37
00:01:11,360 --> 00:01:12,479
greek tv channels

38
00:01:12,479 --> 00:01:15,439
movies series and so on it comes with a

39
00:01:15,439 --> 00:01:16,880
dedicated set-top box

40
00:01:16,880 --> 00:01:19,600
running android tv or you can just

41
00:01:19,600 --> 00:01:21,040
download the mobile application

42
00:01:21,040 --> 00:01:23,439
available for android and ios devices

43
00:01:23,439 --> 00:01:24,080
log in

44
00:01:24,080 --> 00:01:26,320
and watch tv on the go from your

45
00:01:26,320 --> 00:01:27,759
smartphone

46
00:01:27,759 --> 00:01:30,079
it's also worth introducing software

47
00:01:30,079 --> 00:01:32,079
software is an iptv infrastructure

48
00:01:32,079 --> 00:01:32,640
vendor

49
00:01:32,640 --> 00:01:34,240
and their solutions are used by

50
00:01:34,240 --> 00:01:36,000
telecommunication providers

51
00:01:36,000 --> 00:01:38,479
of multiple countries around the world

52
00:01:38,479 --> 00:01:40,000
the findings we'll talk about

53
00:01:40,000 --> 00:01:42,240
actually affect software's solution

54
00:01:42,240 --> 00:01:43,280
called nex4

55
00:01:43,280 --> 00:01:45,280
as this is what wind vision is using

56
00:01:45,280 --> 00:01:46,880
behind the scenes something

57
00:01:46,880 --> 00:01:50,240
that was observed during this research

58
00:01:50,240 --> 00:01:52,399
right so let's jump into the technical

59
00:01:52,399 --> 00:01:54,320
analysis i'll try not to focus a lot on

60
00:01:54,320 --> 00:01:55,040
the details

61
00:01:55,040 --> 00:01:56,960
as it's all out there to read through at

62
00:01:56,960 --> 00:01:58,960
your own pace

63
00:01:58,960 --> 00:02:01,119
okay so before going forward it was

64
00:02:01,119 --> 00:02:02,960
taking a glimpse of the future to see

65
00:02:02,960 --> 00:02:04,159
how it all looks like

66
00:02:04,159 --> 00:02:06,320
from a higher level before we get deep

67
00:02:06,320 --> 00:02:08,239
into the tech talk

68
00:02:08,239 --> 00:02:10,000
so here's what the final attack chain

69
00:02:10,000 --> 00:02:11,840
looks like don't worry it's too

70
00:02:11,840 --> 00:02:12,720
complicated for now

71
00:02:12,720 --> 00:02:14,959
the gist of it is that a malicious

72
00:02:14,959 --> 00:02:16,000
application

73
00:02:16,000 --> 00:02:18,080
could exploit certain vulnerabilities in

74
00:02:18,080 --> 00:02:19,840
the wind vision application

75
00:02:19,840 --> 00:02:21,840
and chain them to steal the user's

76
00:02:21,840 --> 00:02:22,879
session

77
00:02:22,879 --> 00:02:24,720
and what is known as an account takeover

78
00:02:24,720 --> 00:02:26,400
attack but let's get back to the

79
00:02:26,400 --> 00:02:28,160
beginning let's see where they all start

80
00:02:28,160 --> 00:02:30,800
from and how we got to them

81
00:02:30,800 --> 00:02:32,480
so this is literally the first screen

82
00:02:32,480 --> 00:02:34,879
you see when you launch the android

83
00:02:34,879 --> 00:02:36,000
application

84
00:02:36,000 --> 00:02:38,879
it all starts from this transition so in

85
00:02:38,879 --> 00:02:40,480
order to log in you navigate

86
00:02:40,480 --> 00:02:42,959
from the app to webview powered by

87
00:02:42,959 --> 00:02:43,760
chrome

88
00:02:43,760 --> 00:02:47,120
as can be seen by the url bar then back

89
00:02:47,120 --> 00:02:48,879
into the native app

90
00:02:48,879 --> 00:02:52,000
this last step is tricky though as

91
00:02:52,000 --> 00:02:54,800
you need to declare a url scheme to pass

92
00:02:54,800 --> 00:02:56,959
any tokens retrieved in the browser

93
00:02:56,959 --> 00:02:59,440
back to the app this is called linking

94
00:02:59,440 --> 00:03:01,360
and it's a typical form of android

95
00:03:01,360 --> 00:03:04,400
inter-process communication or ipc

96
00:03:04,400 --> 00:03:06,319
and it's implemented using an intent

97
00:03:06,319 --> 00:03:08,080
filter specifying

98
00:03:08,080 --> 00:03:11,360
a data element an example url

99
00:03:11,360 --> 00:03:13,040
which the app can then handle is the

100
00:03:13,040 --> 00:03:14,560
following which

101
00:03:14,560 --> 00:03:17,200
carries the code parameter value as we

102
00:03:17,200 --> 00:03:19,040
can see

103
00:03:19,040 --> 00:03:21,200
however this is not the most secure way

104
00:03:21,200 --> 00:03:22,159
to do this

105
00:03:22,159 --> 00:03:24,480
as this deep linking method evident from

106
00:03:24,480 --> 00:03:26,080
the bare intent filter

107
00:03:26,080 --> 00:03:27,599
which does not perform any further

108
00:03:27,599 --> 00:03:30,000
verification presents a problem

109
00:03:30,000 --> 00:03:32,319
and has thus been replaced with slightly

110
00:03:32,319 --> 00:03:33,280
different scheme

111
00:03:33,280 --> 00:03:36,799
turned uplinks where uplinks better than

112
00:03:36,799 --> 00:03:38,319
tip links you might ask

113
00:03:38,319 --> 00:03:40,480
so when multiple apps declare the same

114
00:03:40,480 --> 00:03:41,519
url scheme

115
00:03:41,519 --> 00:03:44,840
such as https chronos last

116
00:03:44,840 --> 00:03:46,640
aw.youtube.com

117
00:03:46,640 --> 00:03:48,959
through deep links the user will be

118
00:03:48,959 --> 00:03:50,480
prompted with a dialog box

119
00:03:50,480 --> 00:03:53,200
to select the handler application a

120
00:03:53,200 --> 00:03:54,640
right click there could lead to the

121
00:03:54,640 --> 00:03:56,560
wrong app receiving sensitive data that

122
00:03:56,560 --> 00:03:57,840
was intended for the legitimate

123
00:03:57,840 --> 00:03:58,480
application

124
00:03:58,480 --> 00:04:01,120
this is known as url hijacking and the

125
00:04:01,120 --> 00:04:02,879
malicious application could not only

126
00:04:02,879 --> 00:04:04,720
declare arbitrary schemes

127
00:04:04,720 --> 00:04:07,439
to hide access to urls but also trick

128
00:04:07,439 --> 00:04:09,599
users into setting it as their preferred

129
00:04:09,599 --> 00:04:10,159
handler

130
00:04:10,159 --> 00:04:12,159
disabling all future prompts the

131
00:04:12,159 --> 00:04:13,200
solution

132
00:04:13,200 --> 00:04:15,200
the developer could instead use an

133
00:04:15,200 --> 00:04:16,320
uplink

134
00:04:16,320 --> 00:04:18,798
by specifying an additional element in

135
00:04:18,798 --> 00:04:20,560
the intent filter but we'll tell the

136
00:04:20,560 --> 00:04:21,358
system hey

137
00:04:21,358 --> 00:04:23,840
these are my urls and i can prove it by

138
00:04:23,840 --> 00:04:24,479
hosting an

139
00:04:24,479 --> 00:04:27,520
asset link adjacent file essentially on

140
00:04:27,520 --> 00:04:29,120
that domain

141
00:04:29,120 --> 00:04:30,800
which then skips the handler all

142
00:04:30,800 --> 00:04:32,560
together and opens the intended app

143
00:04:32,560 --> 00:04:36,000
no questions asked and this is what the

144
00:04:36,000 --> 00:04:37,840
json file would look like essentially

145
00:04:37,840 --> 00:04:39,680
it's just a list of applications that

146
00:04:39,680 --> 00:04:40,080
can

147
00:04:40,080 --> 00:04:42,960
register this url this file is checked

148
00:04:42,960 --> 00:04:43,759
by the system

149
00:04:43,759 --> 00:04:46,800
our install time okay so that's indeed

150
00:04:46,800 --> 00:04:48,560
an issue but only in this configuration

151
00:04:48,560 --> 00:04:49,360
so far

152
00:04:49,360 --> 00:04:51,199
as we'll see this is a pivotal one

153
00:04:51,199 --> 00:04:53,440
though for the overall attack as it will

154
00:04:53,440 --> 00:04:54,560
allow us to

155
00:04:54,560 --> 00:04:57,440
cross the application boundary for now

156
00:04:57,440 --> 00:04:59,360
though we can only just make a note

157
00:04:59,360 --> 00:05:01,840
and revolve the checklist the next

158
00:05:01,840 --> 00:05:02,800
question to ask

159
00:05:02,800 --> 00:05:05,520
is where did that code come from to

160
00:05:05,520 --> 00:05:07,039
answer that we need to dig deeper into

161
00:05:07,039 --> 00:05:08,479
the authentication flow

162
00:05:08,479 --> 00:05:11,120
and to that we just follow standard

163
00:05:11,120 --> 00:05:12,800
mobsec methodology

164
00:05:12,800 --> 00:05:14,639
that means we root the device choosing

165
00:05:14,639 --> 00:05:17,520
the disk we proxy traffic using burp

166
00:05:17,520 --> 00:05:21,759
and pin the tls certificate using freeda

167
00:05:21,759 --> 00:05:23,840
and then we looked at the last http

168
00:05:23,840 --> 00:05:26,960
request capture after the authentication

169
00:05:26,960 --> 00:05:29,039
so one trick i typically use to figure

170
00:05:29,039 --> 00:05:30,000
out what credential

171
00:05:30,000 --> 00:05:32,800
an application needs is to start from

172
00:05:32,800 --> 00:05:33,600
the end

173
00:05:33,600 --> 00:05:36,080
look at an actual authenticated api

174
00:05:36,080 --> 00:05:37,360
request

175
00:05:37,360 --> 00:05:39,360
progressively stream parameters and

176
00:05:39,360 --> 00:05:41,440
headers repeating it to the server until

177
00:05:41,440 --> 00:05:42,800
it starts complaining

178
00:05:42,800 --> 00:05:44,960
to figure out what the absolute minimum

179
00:05:44,960 --> 00:05:46,479
requirements are

180
00:05:46,479 --> 00:05:48,560
and then look back in the http history

181
00:05:48,560 --> 00:05:50,720
trying to see where each of these

182
00:05:50,720 --> 00:05:54,240
required values were obtained and how

183
00:05:54,240 --> 00:05:56,800
in our case all that was needed is these

184
00:05:56,800 --> 00:05:57,520
two headers

185
00:05:57,520 --> 00:06:00,639
the credential or key passed in the

186
00:06:00,639 --> 00:06:01,919
authorization header

187
00:06:01,919 --> 00:06:05,360
and the device id let's start with this

188
00:06:05,360 --> 00:06:06,000
authorization

189
00:06:06,000 --> 00:06:07,680
key and let's look at the overall

190
00:06:07,680 --> 00:06:09,680
authentication flow as we said before

191
00:06:09,680 --> 00:06:12,960
when the app starts it spawns a webview

192
00:06:12,960 --> 00:06:15,199
which immediately reaches the slash

193
00:06:15,199 --> 00:06:16,319
authorized endpoint

194
00:06:16,319 --> 00:06:18,400
of an identity provider server and gets

195
00:06:18,400 --> 00:06:21,759
redirects to the login page

196
00:06:21,759 --> 00:06:23,360
the user is then prompted for the

197
00:06:23,360 --> 00:06:25,440
windvision credentials and username and

198
00:06:25,440 --> 00:06:26,720
password

199
00:06:26,720 --> 00:06:29,600
once the webview posts to the login form

200
00:06:29,600 --> 00:06:31,360
and gets another redirect back

201
00:06:31,360 --> 00:06:33,919
to a url which the app has registered

202
00:06:33,919 --> 00:06:34,960
for

203
00:06:34,960 --> 00:06:37,440
allowing for this code parameter to be

204
00:06:37,440 --> 00:06:40,080
passed back to the native code

205
00:06:40,080 --> 00:06:42,000
now back in the app the code is

206
00:06:42,000 --> 00:06:43,680
exchanged for a token

207
00:06:43,680 --> 00:06:46,160
which the idp sends back in this third

208
00:06:46,160 --> 00:06:47,280
step

209
00:06:47,280 --> 00:06:48,800
to make one final step in the

210
00:06:48,800 --> 00:06:50,720
authentication process

211
00:06:50,720 --> 00:06:53,759
this time exchanging the token to an aws

212
00:06:53,759 --> 00:06:54,560
server

213
00:06:54,560 --> 00:06:57,039
for a key which is then attached to all

214
00:06:57,039 --> 00:06:58,080
api requests

215
00:06:58,080 --> 00:06:59,919
through the authorization header

216
00:06:59,919 --> 00:07:02,960
indicating an authenticated session

217
00:07:02,960 --> 00:07:06,000
so here that's an example api request

218
00:07:06,000 --> 00:07:08,560
the key along with the device id header

219
00:07:08,560 --> 00:07:10,960
which is probably a hardware identifier

220
00:07:10,960 --> 00:07:15,440
is sent to wins graphql api server

221
00:07:15,440 --> 00:07:17,840
and that fetches user data such as the

222
00:07:17,840 --> 00:07:19,199
user's favorite channel

223
00:07:19,199 --> 00:07:22,160
etc so this is it this is what a normal

224
00:07:22,160 --> 00:07:23,840
authentication flow would look like

225
00:07:23,840 --> 00:07:26,400
end to end but if you remember in the

226
00:07:26,400 --> 00:07:27,120
third step

227
00:07:27,120 --> 00:07:29,599
where the code is passed between the app

228
00:07:29,599 --> 00:07:30,880
and the webview

229
00:07:30,880 --> 00:07:34,319
we found that the url hijack is possible

230
00:07:34,319 --> 00:07:36,240
in which a malicious application could

231
00:07:36,240 --> 00:07:39,680
steal these codes from the webvision app

232
00:07:39,680 --> 00:07:42,080
and exchange it for a road token and

233
00:07:42,080 --> 00:07:44,240
then a rogue session key which can be

234
00:07:44,240 --> 00:07:46,319
used to reach the graphql apis and get

235
00:07:46,319 --> 00:07:47,919
all user data

236
00:07:47,919 --> 00:07:49,919
why is that even possible is it a

237
00:07:49,919 --> 00:07:51,039
vulnerability

238
00:07:51,039 --> 00:07:53,440
in the authentication protocol and what

239
00:07:53,440 --> 00:07:56,240
is this protocol we've just seen anyway

240
00:07:56,240 --> 00:07:58,560
after doing some research they stand out

241
00:07:58,560 --> 00:08:00,720
to be an openid connect flow

242
00:08:00,720 --> 00:08:04,479
in short oidc with an authorization code

243
00:08:04,479 --> 00:08:06,400
grant

244
00:08:06,400 --> 00:08:09,759
so oidc is related to war ii and it has

245
00:08:09,759 --> 00:08:11,360
had its fair share of troubles in the

246
00:08:11,360 --> 00:08:13,120
past as mozilla explains

247
00:08:13,120 --> 00:08:15,680
oidc abuses auth2 to perform

248
00:08:15,680 --> 00:08:16,960
authentication

249
00:08:16,960 --> 00:08:19,280
as oauth2 in itself is an authorization

250
00:08:19,280 --> 00:08:20,960
protocol

251
00:08:20,960 --> 00:08:22,479
and while this is not necessarily a

252
00:08:22,479 --> 00:08:24,479
problem if used in the wrong

253
00:08:24,479 --> 00:08:26,720
circumstances it can lead to

254
00:08:26,720 --> 00:08:29,199
vulnerabilities and this is a very

255
00:08:29,199 --> 00:08:30,639
common mistake

256
00:08:30,639 --> 00:08:32,399
with such vulnerabilities reported all

257
00:08:32,399 --> 00:08:34,958
the way back to 2012

258
00:08:34,958 --> 00:08:36,958
this is why a security extension to the

259
00:08:36,958 --> 00:08:39,279
protocol was eventually standardized

260
00:08:39,279 --> 00:08:42,640
called pixi or pkce to mitigate the

261
00:08:42,640 --> 00:08:44,000
threat of authorization called

262
00:08:44,000 --> 00:08:45,200
interception

263
00:08:45,200 --> 00:08:46,959
and this is a threat prevalent to mobile

264
00:08:46,959 --> 00:08:48,880
labs such as wind vision

265
00:08:48,880 --> 00:08:50,800
where the authenticity of the initiating

266
00:08:50,800 --> 00:08:54,000
clients cannot be guaranteed

267
00:08:54,000 --> 00:08:56,560
to do so pixi describes the creation of

268
00:08:56,560 --> 00:08:58,080
two additional parameters

269
00:08:58,080 --> 00:09:01,279
state and the verification token which

270
00:09:01,279 --> 00:09:03,920
work as a csrf token of sorts it's

271
00:09:03,920 --> 00:09:05,760
initially sent to the idp server

272
00:09:05,760 --> 00:09:07,920
as part of the authorization request

273
00:09:07,920 --> 00:09:09,279
then we sent

274
00:09:09,279 --> 00:09:11,519
at the later stage when requesting a

275
00:09:11,519 --> 00:09:12,959
token

276
00:09:12,959 --> 00:09:15,279
and this essentially allows the idp to

277
00:09:15,279 --> 00:09:16,959
check if both requests

278
00:09:16,959 --> 00:09:19,120
came from the same client and that no

279
00:09:19,120 --> 00:09:22,320
codes have been intercepted

280
00:09:22,320 --> 00:09:24,480
so back to our case since there's no pix

281
00:09:24,480 --> 00:09:25,600
implemented

282
00:09:25,600 --> 00:09:28,080
a bad app can hijack a code exchange it

283
00:09:28,080 --> 00:09:29,200
for a roll token

284
00:09:29,200 --> 00:09:32,160
and even get a row key can we use that

285
00:09:32,160 --> 00:09:34,000
key to appear authenticated to the api

286
00:09:34,000 --> 00:09:34,560
server

287
00:09:34,560 --> 00:09:37,360
thus achieving a full takeover the

288
00:09:37,360 --> 00:09:38,160
answer is no

289
00:09:38,160 --> 00:09:40,320
as we still have this device id header

290
00:09:40,320 --> 00:09:42,480
which the server needs so

291
00:09:42,480 --> 00:09:44,240
we're stuck there's still a missing

292
00:09:44,240 --> 00:09:45,839
piece

293
00:09:45,839 --> 00:09:48,080
to find out what this is we once again

294
00:09:48,080 --> 00:09:50,560
went back into traffic analysis

295
00:09:50,560 --> 00:09:52,480
and eventually figured out that the

296
00:09:52,480 --> 00:09:54,959
graphql server only accepted requests

297
00:09:54,959 --> 00:09:55,839
with a valid

298
00:09:55,839 --> 00:09:58,240
device id header that is one that has

299
00:09:58,240 --> 00:09:59,200
been previously

300
00:09:59,200 --> 00:10:02,839
uploaded after a registration

301
00:10:02,839 --> 00:10:06,160
process so we as a malicious application

302
00:10:06,160 --> 00:10:08,880
can therefore either create and register

303
00:10:08,880 --> 00:10:09,760
our own

304
00:10:09,760 --> 00:10:12,480
new device id using our rogue session

305
00:10:12,480 --> 00:10:13,279
key

306
00:10:13,279 --> 00:10:14,880
simulating the registration of a new

307
00:10:14,880 --> 00:10:16,399
device

308
00:10:16,399 --> 00:10:18,800
which could unfortunately replace an

309
00:10:18,800 --> 00:10:19,839
existing device

310
00:10:19,839 --> 00:10:21,920
as wind only allows up to four

311
00:10:21,920 --> 00:10:23,200
smartphones

312
00:10:23,200 --> 00:10:26,399
to be registered for streaming something

313
00:10:26,399 --> 00:10:29,680
the user would probably notice or

314
00:10:29,680 --> 00:10:31,839
we could just guess an existing a

315
00:10:31,839 --> 00:10:34,000
previously registered device id

316
00:10:34,000 --> 00:10:37,680
and use that in our rogue requests

317
00:10:37,680 --> 00:10:39,680
so after decompiling the application and

318
00:10:39,680 --> 00:10:41,279
examining the relevant code

319
00:10:41,279 --> 00:10:43,519
this is how the responsible function

320
00:10:43,519 --> 00:10:45,600
looked like

321
00:10:45,600 --> 00:10:47,200
and this is how it actually looks like

322
00:10:47,200 --> 00:10:49,440
in a form that makes a bit more sense

323
00:10:49,440 --> 00:10:52,240
we can see that it all boils down to a

324
00:10:52,240 --> 00:10:53,360
media drm

325
00:10:53,360 --> 00:10:56,880
object instantiation which only accepts

326
00:10:56,880 --> 00:10:59,600
a constant uuid value

327
00:10:59,600 --> 00:11:02,800
and then the get property array method

328
00:11:02,800 --> 00:11:05,680
of this object is called which is again

329
00:11:05,680 --> 00:11:06,640
also past

330
00:11:06,640 --> 00:11:10,320
constant value so as we can see there's

331
00:11:10,320 --> 00:11:12,480
no real uniqueness there's no randomness

332
00:11:12,480 --> 00:11:13,440
involved

333
00:11:13,440 --> 00:11:16,000
this is a function we can just copy into

334
00:11:16,000 --> 00:11:17,360
a bad application

335
00:11:17,360 --> 00:11:19,120
execute on the same device as the

336
00:11:19,120 --> 00:11:21,440
windvision app and always

337
00:11:21,440 --> 00:11:24,320
get the same value which means we can

338
00:11:24,320 --> 00:11:25,279
essentially

339
00:11:25,279 --> 00:11:27,680
regenerate the device id for the

340
00:11:27,680 --> 00:11:28,720
victim's device

341
00:11:28,720 --> 00:11:31,519
on demand okay so it looks like we've

342
00:11:31,519 --> 00:11:31,920
got

343
00:11:31,920 --> 00:11:34,000
all the bugs we need so let's take a

344
00:11:34,000 --> 00:11:36,160
step back and see how we can put it all

345
00:11:36,160 --> 00:11:37,360
together

346
00:11:37,360 --> 00:11:39,760
first we'll hijack the url and steal the

347
00:11:39,760 --> 00:11:41,440
authorization codes

348
00:11:41,440 --> 00:11:43,440
then we'll abuse the insecure oauth2

349
00:11:43,440 --> 00:11:46,880
flow chosen to get a road api token

350
00:11:46,880 --> 00:11:49,279
we'll reproduce the device id for our

351
00:11:49,279 --> 00:11:50,399
victim device

352
00:11:50,399 --> 00:11:53,600
to attach in all subsequent api requests

353
00:11:53,600 --> 00:11:55,839
and finally just demonstrate our account

354
00:11:55,839 --> 00:11:57,360
take over chain with a scary toast

355
00:11:57,360 --> 00:11:58,160
notification

356
00:11:58,160 --> 00:12:00,880
showing some personal data or whatever

357
00:12:00,880 --> 00:12:03,279
so we need such an example api request

358
00:12:03,279 --> 00:12:04,880
for demonstration purposes

359
00:12:04,880 --> 00:12:07,279
one that fetches something small not too

360
00:12:07,279 --> 00:12:08,000
sensitive

361
00:12:08,000 --> 00:12:10,720
but still personal to make a good poc a

362
00:12:10,720 --> 00:12:12,079
good proof concept

363
00:12:12,079 --> 00:12:15,120
this means we're back into birth so

364
00:12:15,120 --> 00:12:18,000
while looking in the web log for a juicy

365
00:12:18,000 --> 00:12:19,440
api request to

366
00:12:19,440 --> 00:12:22,639
perform for demonstration purposes

367
00:12:22,639 --> 00:12:25,040
uh we see this one this was literally

368
00:12:25,040 --> 00:12:25,920
the first one

369
00:12:25,920 --> 00:12:29,040
after authenticating can you see

370
00:12:29,040 --> 00:12:31,599
anything funny

371
00:12:31,839 --> 00:12:34,959
so at this point i was wondering what

372
00:12:34,959 --> 00:12:36,560
this master pin code was

373
00:12:36,560 --> 00:12:39,040
but if you remember from previous slides

374
00:12:39,040 --> 00:12:40,320
wind vision has this

375
00:12:40,320 --> 00:12:42,639
maximum number of devices restriction

376
00:12:42,639 --> 00:12:43,440
and the user

377
00:12:43,440 --> 00:12:45,440
should be able to change these four

378
00:12:45,440 --> 00:12:47,360
active ones from somewhere within the

379
00:12:47,360 --> 00:12:48,800
upright

380
00:12:48,800 --> 00:12:50,880
that was indeed the case the user can

381
00:12:50,880 --> 00:12:52,240
manage the devices

382
00:12:52,240 --> 00:12:55,360
from the application settings choosing

383
00:12:55,360 --> 00:12:57,440
devices class accounts

384
00:12:57,440 --> 00:13:00,240
type there these master pin codes and

385
00:13:00,240 --> 00:13:02,880
then go to device management

386
00:13:02,880 --> 00:13:05,279
where they could just remove rename etc

387
00:13:05,279 --> 00:13:06,000
via

388
00:13:06,000 --> 00:13:10,240
active devices so while not necessary

389
00:13:10,240 --> 00:13:12,720
for the account recovery chain as i

390
00:13:12,720 --> 00:13:13,839
ended up using the names of the

391
00:13:13,839 --> 00:13:16,240
registered devices for the demonstration

392
00:13:16,240 --> 00:13:18,720
this handling of the master pin codes is

393
00:13:18,720 --> 00:13:20,800
bad practice and doesn't really offer

394
00:13:20,800 --> 00:13:21,760
any sort of

395
00:13:21,760 --> 00:13:24,639
security to the solution in any case

396
00:13:24,639 --> 00:13:26,240
time to write this bad boy

397
00:13:26,240 --> 00:13:28,240
so this is what the project looked like

398
00:13:28,240 --> 00:13:30,560
of the magnificent application we coded

399
00:13:30,560 --> 00:13:33,120
on the left we can see the url hijacking

400
00:13:33,120 --> 00:13:34,240
functionality

401
00:13:34,240 --> 00:13:36,639
using the intent filter to declare the

402
00:13:36,639 --> 00:13:38,240
same url scheme as windvision

403
00:13:38,240 --> 00:13:40,560
and steal the code in the bottom right

404
00:13:40,560 --> 00:13:42,720
segment we can see the functions that

405
00:13:42,720 --> 00:13:43,839
executed the

406
00:13:43,839 --> 00:13:46,720
api requests needed to go from a code to

407
00:13:46,720 --> 00:13:49,199
a token and the actual

408
00:13:49,199 --> 00:13:52,480
function that reproduces the device id

409
00:13:52,480 --> 00:13:54,399
and in the top right we can see some

410
00:13:54,399 --> 00:13:55,839
covertness

411
00:13:55,839 --> 00:13:58,240
to essentially call the real application

412
00:13:58,240 --> 00:13:58,959
windvision

413
00:13:58,959 --> 00:14:01,440
in case anything goes wrong which is how

414
00:14:01,440 --> 00:14:02,399
real malware

415
00:14:02,399 --> 00:14:04,480
will behave the calls for this proof of

416
00:14:04,480 --> 00:14:06,160
concept malicious application can be

417
00:14:06,160 --> 00:14:08,160
found online on fcq's github

418
00:14:08,160 --> 00:14:09,279
repositories

419
00:14:09,279 --> 00:14:12,720
to play around with the app is now

420
00:14:12,720 --> 00:14:13,360
patched

421
00:14:13,360 --> 00:14:15,600
and the update enforcement mechanism in

422
00:14:15,600 --> 00:14:16,800
place might stop

423
00:14:16,800 --> 00:14:18,959
you from using an older version but you

424
00:14:18,959 --> 00:14:20,000
might be able to

425
00:14:20,000 --> 00:14:23,199
bypass that so we found the

426
00:14:23,199 --> 00:14:24,079
vulnerabilities

427
00:14:24,079 --> 00:14:26,160
demonstrated how they can be exploded

428
00:14:26,160 --> 00:14:28,240
coded an example malware application and

429
00:14:28,240 --> 00:14:29,120
all but

430
00:14:29,120 --> 00:14:31,920
how possible actually is all that one

431
00:14:31,920 --> 00:14:34,160
could argue that this isn't realistic

432
00:14:34,160 --> 00:14:37,360
as they would have to have a targeted

433
00:14:37,360 --> 00:14:40,560
malicious application installed on their

434
00:14:40,560 --> 00:14:41,839
device

435
00:14:41,839 --> 00:14:43,440
which should have survived play stores

436
00:14:43,440 --> 00:14:45,199
defenses in first place

437
00:14:45,199 --> 00:14:46,639
and that they would never fall for that

438
00:14:46,639 --> 00:14:50,000
wrong choice in the handler if prompted

439
00:14:50,000 --> 00:14:51,440
to answer the first question we should

440
00:14:51,440 --> 00:14:53,600
keep in mind that we as users

441
00:14:53,600 --> 00:14:56,000
are very unlikely to scrutinize all the

442
00:14:56,000 --> 00:14:58,399
features of each application we install

443
00:14:58,399 --> 00:15:00,160
and even if we would we've seen

444
00:15:00,160 --> 00:15:02,320
reputable apps turn to bad ones

445
00:15:02,320 --> 00:15:03,680
whether intentionally or through a

446
00:15:03,680 --> 00:15:06,079
security bits so there's realistically

447
00:15:06,079 --> 00:15:09,279
no way to be 100 sure as for the second

448
00:15:09,279 --> 00:15:09,920
condition

449
00:15:09,920 --> 00:15:11,680
there are hundreds of cases in the news

450
00:15:11,680 --> 00:15:13,839
every year of malicious hops spotted and

451
00:15:13,839 --> 00:15:15,440
removed from play store

452
00:15:15,440 --> 00:15:17,279
despite the security team's efforts and

453
00:15:17,279 --> 00:15:19,120
all the robust defenses in place

454
00:15:19,120 --> 00:15:20,959
purely due to the volume of apps

455
00:15:20,959 --> 00:15:22,880
playstore was actually recently found to

456
00:15:22,880 --> 00:15:24,560
be the main distribution vector for

457
00:15:24,560 --> 00:15:25,600
malware

458
00:15:25,600 --> 00:15:28,639
so all in all relying solely on play

459
00:15:28,639 --> 00:15:29,360
store

460
00:15:29,360 --> 00:15:31,360
wouldn't prevent this attack but what

461
00:15:31,360 --> 00:15:33,120
about our own defenses

462
00:15:33,120 --> 00:15:34,800
this is what the poc application looked

463
00:15:34,800 --> 00:15:36,880
like on the handler and as we can see

464
00:15:36,880 --> 00:15:38,639
the attacker has control over the icon

465
00:15:38,639 --> 00:15:40,720
the title the subtitle making it

466
00:15:40,720 --> 00:15:43,519
very easy to match the victim up if

467
00:15:43,519 --> 00:15:44,399
you're wondering

468
00:15:44,399 --> 00:15:46,720
which is the correct option i could give

469
00:15:46,720 --> 00:15:48,480
you a spoiler and tell you it's the loud

470
00:15:48,480 --> 00:15:49,360
one

471
00:15:49,360 --> 00:15:52,079
it should now be more obvious why

472
00:15:52,079 --> 00:15:53,600
uplinks were invented

473
00:15:53,600 --> 00:15:55,680
and that is to keep users safe free of

474
00:15:55,680 --> 00:15:56,800
such dilemmas

475
00:15:56,800 --> 00:15:58,399
actually just to give an example of how

476
00:15:58,399 --> 00:16:00,000
this performs in real life

477
00:16:00,000 --> 00:16:02,079
every time i found an issue like this in

478
00:16:02,079 --> 00:16:03,279
a client engagements

479
00:16:03,279 --> 00:16:05,680
i make a similar poc malware app for

480
00:16:05,680 --> 00:16:06,639
demonstration

481
00:16:06,639 --> 00:16:08,160
and i go around the office and try it

482
00:16:08,160 --> 00:16:09,680
with colleagues to see which one they

483
00:16:09,680 --> 00:16:10,639
would pick

484
00:16:10,639 --> 00:16:12,880
and it turns out 90 of the times they

485
00:16:12,880 --> 00:16:14,000
pick the wrong option

486
00:16:14,000 --> 00:16:15,360
and these are experienced security

487
00:16:15,360 --> 00:16:17,040
consultants okay so

488
00:16:17,040 --> 00:16:20,000
let's now describe the disclosure

489
00:16:20,000 --> 00:16:20,800
process

490
00:16:20,800 --> 00:16:24,000
and what came with it so i put my wad

491
00:16:24,000 --> 00:16:25,680
hat on made a formal report

492
00:16:25,680 --> 00:16:27,680
describing all the issues that i found a

493
00:16:27,680 --> 00:16:29,040
full poc video

494
00:16:29,040 --> 00:16:31,120
provided detailed limited actions and

495
00:16:31,120 --> 00:16:34,079
sent all that to both software and went

496
00:16:34,079 --> 00:16:37,920
and then i waited and waited some more

497
00:16:37,920 --> 00:16:40,240
as is the case with the situations it

498
00:16:40,240 --> 00:16:42,320
eventually took almost five months to go

499
00:16:42,320 --> 00:16:43,519
from initial contact

500
00:16:43,519 --> 00:16:46,959
to a patched application being released

501
00:16:46,959 --> 00:16:49,360
i was mostly interfacing with software

502
00:16:49,360 --> 00:16:50,959
and throughout these correspondence i

503
00:16:50,959 --> 00:16:52,000
eventually found out that the

504
00:16:52,000 --> 00:16:53,519
vulnerabilities only affected wind

505
00:16:53,519 --> 00:16:54,320
vision

506
00:16:54,320 --> 00:16:56,800
and not all next four implementations as

507
00:16:56,800 --> 00:16:58,320
i initially thought

508
00:16:58,320 --> 00:17:01,120
although i had gone through screenshots

509
00:17:01,120 --> 00:17:03,040
of their respective iptv solutions for

510
00:17:03,040 --> 00:17:04,000
all the other telcos

511
00:17:04,000 --> 00:17:05,839
to confirm some sort of webview based

512
00:17:05,839 --> 00:17:07,439
login was used

513
00:17:07,439 --> 00:17:09,520
but that was not the case i was also

514
00:17:09,520 --> 00:17:11,039
curious to see how many of the issues

515
00:17:11,039 --> 00:17:11,760
disclosed

516
00:17:11,760 --> 00:17:14,880
were actually fixed after all this time

517
00:17:14,880 --> 00:17:17,280
i'm gonna leave this as an exercise for

518
00:17:17,280 --> 00:17:18,079
the reader to find

519
00:17:18,079 --> 00:17:21,439
out spoiler not many and the release

520
00:17:21,439 --> 00:17:24,799
notes were also rather low profile

521
00:17:24,799 --> 00:17:27,520
that's a question i was asked a lot the

522
00:17:27,520 --> 00:17:28,240
answer is no

523
00:17:28,240 --> 00:17:30,799
i was not shoot by either winged norse

524
00:17:30,799 --> 00:17:31,440
upward

525
00:17:31,440 --> 00:17:33,200
they were actually very respectful and

526
00:17:33,200 --> 00:17:35,600
professional so no drama

527
00:17:35,600 --> 00:17:37,520
it's worth mentioning though that i was

528
00:17:37,520 --> 00:17:39,520
prepared as everyone should be when

529
00:17:39,520 --> 00:17:41,039
digging into commercial products

530
00:17:41,039 --> 00:17:42,640
i kept a copy of the terms and

531
00:17:42,640 --> 00:17:44,480
conditions of the app before submitting

532
00:17:44,480 --> 00:17:45,760
live reports

533
00:17:45,760 --> 00:17:47,280
it didn't mention anything about reverse

534
00:17:47,280 --> 00:17:48,720
engineering and i didn't actually

535
00:17:48,720 --> 00:17:49,280
exploit

536
00:17:49,280 --> 00:17:52,480
any accounts so no foul play but better

537
00:17:52,480 --> 00:17:53,280
safe than sorry

538
00:17:53,280 --> 00:17:56,080
also apparently i got my 50 seconds of

539
00:17:56,080 --> 00:17:56,640
fame

540
00:17:56,640 --> 00:17:59,120
as there was at least one news page that

541
00:17:59,120 --> 00:18:00,320
caught wind of it

542
00:18:00,320 --> 00:18:02,720
fun fact i only found this when making

543
00:18:02,720 --> 00:18:04,720
the presentation

544
00:18:04,720 --> 00:18:06,640
which leads us to the final section of

545
00:18:06,640 --> 00:18:07,919
this talk

546
00:18:07,919 --> 00:18:09,760
so before closing off i'd like to

547
00:18:09,760 --> 00:18:11,440
summarize with a few quick tips for

548
00:18:11,440 --> 00:18:13,440
mobile developers among the audience

549
00:18:13,440 --> 00:18:16,480
first auth is hard and so are

550
00:18:16,480 --> 00:18:19,120
all of its variations which means that

551
00:18:19,120 --> 00:18:21,520
implementation bugs will always exist

552
00:18:21,520 --> 00:18:23,840
just make sure to pick the best methods

553
00:18:23,840 --> 00:18:24,880
for the occasion and

554
00:18:24,880 --> 00:18:26,480
implement the protocol according to the

555
00:18:26,480 --> 00:18:28,480
standard do pay attention to your ipc

556
00:18:28,480 --> 00:18:29,280
endpoints

557
00:18:29,280 --> 00:18:30,960
this is where the code crosses the app

558
00:18:30,960 --> 00:18:33,360
boundary do make a use

559
00:18:33,360 --> 00:18:37,280
of https if using a custom url scheme

560
00:18:37,280 --> 00:18:39,360
like wind vision did so that you could

561
00:18:39,360 --> 00:18:41,600
leverage secure uplinks

562
00:18:41,600 --> 00:18:44,160
that keep the users safe and free of

563
00:18:44,160 --> 00:18:45,679
confusing prompts

564
00:18:45,679 --> 00:18:48,160
when generating ids employ some

565
00:18:48,160 --> 00:18:48,960
randomness

566
00:18:48,960 --> 00:18:52,080
so that no one can recalculate them

567
00:18:52,080 --> 00:18:54,640
and finally keep application level

568
00:18:54,640 --> 00:18:56,000
authentication credentials

569
00:18:56,000 --> 00:18:59,200
local if possible such as pin codes

570
00:18:59,200 --> 00:19:01,039
don't send them to the server don't get

571
00:19:01,039 --> 00:19:02,240
them from the server

572
00:19:02,240 --> 00:19:04,400
and use secure apis like the android

573
00:19:04,400 --> 00:19:06,400
keystore to store and check them locally

574
00:19:06,400 --> 00:19:08,240
for researchers watching this i'd like

575
00:19:08,240 --> 00:19:10,240
to encourage you to give it a shot

576
00:19:10,240 --> 00:19:12,320
do think with the apps you use every day

577
00:19:12,320 --> 00:19:14,400
you might find interesting stuff

578
00:19:14,400 --> 00:19:16,240
if you do find something don't stop

579
00:19:16,240 --> 00:19:17,600
there cover as much

580
00:19:17,600 --> 00:19:19,679
of the attack surface as you can looking

581
00:19:19,679 --> 00:19:21,360
at the whole picture

582
00:19:21,360 --> 00:19:22,880
which could allow you to combine

583
00:19:22,880 --> 00:19:24,480
findings of

584
00:19:24,480 --> 00:19:26,240
low significance to come up with

585
00:19:26,240 --> 00:19:28,240
something of greater effect

586
00:19:28,240 --> 00:19:30,480
and finally i'd like to thank a few

587
00:19:30,480 --> 00:19:32,880
secure fellows for their contributions

588
00:19:32,880 --> 00:19:34,720
first of all oli who took the

589
00:19:34,720 --> 00:19:36,320
unattractive role of reviewing my

590
00:19:36,320 --> 00:19:37,600
initial blog post

591
00:19:37,600 --> 00:19:40,799
which initially was very bad it is

592
00:19:40,799 --> 00:19:43,280
i think a bit more okay now and that's

593
00:19:43,280 --> 00:19:44,400
thanks to him

594
00:19:44,400 --> 00:19:46,559
rihanna for really helping me go public

595
00:19:46,559 --> 00:19:47,600
with the research

596
00:19:47,600 --> 00:19:49,760
and just constantly telling people about

597
00:19:49,760 --> 00:19:52,160
this afterwards so that i didn't have to

598
00:19:52,160 --> 00:19:54,160
jameson robert for a few valuable tips

599
00:19:54,160 --> 00:19:56,000
on the cfp submission

600
00:19:56,000 --> 00:19:58,960
ken from the us office he knows why and

601
00:19:58,960 --> 00:19:59,600
finally

602
00:19:59,600 --> 00:20:01,520
my father who provided the actual

603
00:20:01,520 --> 00:20:02,640
windvision accounts

604
00:20:02,640 --> 00:20:04,720
that i use for testing the ids and

605
00:20:04,720 --> 00:20:07,200
tokens of weights you saw on all slides

606
00:20:07,200 --> 00:20:09,440
and by the way these all still work

607
00:20:09,440 --> 00:20:11,039
months after the requests were initially

608
00:20:11,039 --> 00:20:12,000
captured so

609
00:20:12,000 --> 00:20:15,200
i had to reduce them all and this is it

610
00:20:15,200 --> 00:20:17,200
just in time thanks for watching and

611
00:20:17,200 --> 00:20:21,120
enjoy the rest of the event

