1
00:00:04,960 --> 00:00:08,080
hello everyone i'm really excited to be

2
00:00:08,080 --> 00:00:10,480
here with you guys reporting here from

3
00:00:10,480 --> 00:00:13,360
12 sec at this year's besides event my

4
00:00:13,360 --> 00:00:16,239
name is ignatius and today we want to

5
00:00:16,239 --> 00:00:18,960
talk to you about challenges we had in

6
00:00:18,960 --> 00:00:21,359
one of our still seeing engagements with

7
00:00:21,359 --> 00:00:23,199
one of our partners

8
00:00:23,199 --> 00:00:27,039
uh for having to shift the penetration

9
00:00:27,039 --> 00:00:30,000
testing which in our case was actually

10
00:00:30,000 --> 00:00:32,800
the in an api driven application

11
00:00:32,800 --> 00:00:36,079
the api security testing uh

12
00:00:36,079 --> 00:00:39,360
earlier in the life cycle of a process

13
00:00:39,360 --> 00:00:41,680
of the sdlc process so we want to share

14
00:00:41,680 --> 00:00:44,320
with you our experience what ideas we

15
00:00:44,320 --> 00:00:47,360
had how we came up with a solution and

16
00:00:47,360 --> 00:00:50,160
of course since this is also ongoing for

17
00:00:50,160 --> 00:00:52,000
us and we're going to see how it's going

18
00:00:52,000 --> 00:00:54,719
to progress over the next couple months

19
00:00:54,719 --> 00:00:57,280
also we want to hear your feedback and

20
00:00:57,280 --> 00:00:59,600
get the conversation going on what will

21
00:00:59,600 --> 00:01:02,079
you do in your engagements in terms of

22
00:01:02,079 --> 00:01:05,519
processes tools and the life

23
00:01:05,519 --> 00:01:07,520
so for anyone who doesn't know us

24
00:01:07,520 --> 00:01:10,159
12 sec we are cyber security

25
00:01:10,159 --> 00:01:12,960
consultancy film we offer all kinds of

26
00:01:12,960 --> 00:01:15,360
consultancy services

27
00:01:15,360 --> 00:01:17,360
you name it we do it from

28
00:01:17,360 --> 00:01:20,320
red team engagements penetration tests

29
00:01:20,320 --> 00:01:24,000
stlc engagements and the like

30
00:01:24,000 --> 00:01:25,680
so moving on to the next slide let me

31
00:01:25,680 --> 00:01:26,960
give you just a little bit of

32
00:01:26,960 --> 00:01:29,680
information so that you know

33
00:01:29,680 --> 00:01:31,360
who is talking to you

34
00:01:31,360 --> 00:01:32,240
i'm

35
00:01:32,240 --> 00:01:35,759
a a software engineer for uh four years

36
00:01:35,759 --> 00:01:37,840
uh and i have been application security

37
00:01:37,840 --> 00:01:40,320
engineer for seven months since i made

38
00:01:40,320 --> 00:01:43,040
this transition and that's when 12 sec

39
00:01:43,040 --> 00:01:45,680
uh since then i have been involved in

40
00:01:45,680 --> 00:01:48,159
mainly esthetics engagement as well as

41
00:01:48,159 --> 00:01:49,920
some infrastructure configuration

42
00:01:49,920 --> 00:01:52,399
knowledge

43
00:01:52,479 --> 00:01:56,000
and i am also a css peak dental holder

44
00:01:56,000 --> 00:01:58,880
and a cloud practitioner from amazon now

45
00:01:58,880 --> 00:02:01,840
starting my journey to the cloud to the

46
00:02:01,840 --> 00:02:03,439
cloud security

47
00:02:03,439 --> 00:02:05,600
uh certification path

48
00:02:05,600 --> 00:02:09,199
uh so uh let me give you like um a

49
00:02:09,199 --> 00:02:11,280
little information about what we're

50
00:02:11,280 --> 00:02:13,120
going to see in the next slide so that

51
00:02:13,120 --> 00:02:14,879
you can have a clear map of what we're

52
00:02:14,879 --> 00:02:16,480
going to present to you

53
00:02:16,480 --> 00:02:17,440
uh

54
00:02:17,440 --> 00:02:20,000
so i will talk a little bit about the

55
00:02:20,000 --> 00:02:23,040
engagement and the activities that we're

56
00:02:23,040 --> 00:02:24,879
running the requirements that we're

57
00:02:24,879 --> 00:02:27,120
having some architectural

58
00:02:27,120 --> 00:02:29,040
characteristics of the application at

59
00:02:29,040 --> 00:02:33,280
hand which will be a source of input for

60
00:02:33,280 --> 00:02:34,000
us

61
00:02:34,000 --> 00:02:35,920
for the solution that we have to make

62
00:02:35,920 --> 00:02:38,000
and the factors that we have to consider

63
00:02:38,000 --> 00:02:40,000
in order to choose the right processes

64
00:02:40,000 --> 00:02:43,680
and tools to do the job effectively

65
00:02:43,680 --> 00:02:48,000
uh so this is an stc engagement we are

66
00:02:48,000 --> 00:02:49,040
all

67
00:02:49,040 --> 00:02:51,599
quite bunch of activities here

68
00:02:51,599 --> 00:02:53,440
we're on risk assessment

69
00:02:53,440 --> 00:02:55,599
well risk assessment not exactly in the

70
00:02:55,599 --> 00:02:58,080
face of an agile sprint like in weak

71
00:02:58,080 --> 00:03:00,720
sprint where we run it every time but

72
00:03:00,720 --> 00:03:03,599
more like an inception like a

73
00:03:03,599 --> 00:03:06,000
report but it always comes handy because

74
00:03:06,000 --> 00:03:08,800
you need to go back to this report to

75
00:03:08,800 --> 00:03:11,440
refer the general risk overview or

76
00:03:11,440 --> 00:03:14,080
policies or classifications in terms of

77
00:03:14,080 --> 00:03:16,800
confidentiality degree and availability

78
00:03:16,800 --> 00:03:19,040
of the data that your system processes

79
00:03:19,040 --> 00:03:20,400
and it also relates to the

80
00:03:20,400 --> 00:03:22,319
prioritization of the cases that you

81
00:03:22,319 --> 00:03:24,720
want to implement in a test suit so that

82
00:03:24,720 --> 00:03:27,040
you can have the most measurable outcome

83
00:03:27,040 --> 00:03:28,959
the most uh

84
00:03:28,959 --> 00:03:32,159
the return of investment on the test

85
00:03:32,159 --> 00:03:34,159
cases you do in your security automation

86
00:03:34,159 --> 00:03:37,280
as well as other activities of course

87
00:03:37,280 --> 00:03:39,560
we do requirements analysis this is a

88
00:03:39,560 --> 00:03:43,200
sprint-based activity when we solicit we

89
00:03:43,200 --> 00:03:46,319
define security requirements of course

90
00:03:46,319 --> 00:03:48,560
in addition to the requirements we have

91
00:03:48,560 --> 00:03:51,360
and if they are not needed a

92
00:03:51,360 --> 00:03:53,840
specific business specific security

93
00:03:53,840 --> 00:03:54,879
requirements

94
00:03:54,879 --> 00:03:57,920
related to the business cases at hand

95
00:03:57,920 --> 00:03:59,040
and

96
00:03:59,040 --> 00:04:00,640
of course these requirements will also

97
00:04:00,640 --> 00:04:03,760
relate to how we will define our test

98
00:04:03,760 --> 00:04:05,920
cases of course with other requirements

99
00:04:05,920 --> 00:04:08,159
we're going to show in the next slide

100
00:04:08,159 --> 00:04:10,000
which will be our general application

101
00:04:10,000 --> 00:04:13,040
security requirements framework

102
00:04:13,040 --> 00:04:15,519
uh then we have here the architects

103
00:04:15,519 --> 00:04:18,320
review uh we mostly do actually we

104
00:04:18,320 --> 00:04:21,358
exclusively do a svs on this uh we're on

105
00:04:21,358 --> 00:04:23,840
ltria for critical applications

106
00:04:23,840 --> 00:04:26,840
and we do also thread modeling using an

107
00:04:26,840 --> 00:04:30,240
automated tool called tedious risk uh

108
00:04:30,240 --> 00:04:31,919
not automated in the sense that you

109
00:04:31,919 --> 00:04:34,000
don't have to do anything but automate

110
00:04:34,000 --> 00:04:36,479
it uh in a way that

111
00:04:36,479 --> 00:04:38,800
it's not like in a word document where

112
00:04:38,800 --> 00:04:40,960
you have like hundreds of pages where

113
00:04:40,960 --> 00:04:43,680
you have to what to do your threat model

114
00:04:43,680 --> 00:04:46,479
and it can get really

115
00:04:46,479 --> 00:04:48,960
it can get really messy and huge quite

116
00:04:48,960 --> 00:04:50,000
fast

117
00:04:50,000 --> 00:04:52,800
but it can offer like a good view of

118
00:04:52,800 --> 00:04:55,040
your risk status and

119
00:04:55,040 --> 00:04:57,120
generate controls based on

120
00:04:57,120 --> 00:04:59,199
specifications that you provide

121
00:04:59,199 --> 00:05:02,080
and this of course is the main

122
00:05:02,080 --> 00:05:04,320
the main source for us in regards to the

123
00:05:04,320 --> 00:05:07,039
business logic as an attack surface

124
00:05:07,039 --> 00:05:09,680
which we want to cover in our security

125
00:05:09,680 --> 00:05:12,080
automation soon then we have source code

126
00:05:12,080 --> 00:05:14,800
review uh we do this uh

127
00:05:14,800 --> 00:05:16,080
manually

128
00:05:16,080 --> 00:05:19,520
uh sometimes not so often we have

129
00:05:19,520 --> 00:05:22,720
guidelines um specific to the platform

130
00:05:22,720 --> 00:05:26,240
where we are testing we're also using a

131
00:05:26,240 --> 00:05:29,520
static analysis plus specific set of

132
00:05:29,520 --> 00:05:31,360
rules which are signature based of

133
00:05:31,360 --> 00:05:33,440
course

134
00:05:33,440 --> 00:05:35,759
to identify vulnerabilities in the code

135
00:05:35,759 --> 00:05:39,520
as soon as the developer writes the code

136
00:05:39,520 --> 00:05:42,000
and we also have composition analysis

137
00:05:42,000 --> 00:05:44,479
for the our third-party libraries then

138
00:05:44,479 --> 00:05:46,240
moving on after

139
00:05:46,240 --> 00:05:47,120
this

140
00:05:47,120 --> 00:05:49,600
after after the normal tests are on we

141
00:05:49,600 --> 00:05:52,320
also run and dynamic application

142
00:05:52,320 --> 00:05:54,479
security testing tool

143
00:05:54,479 --> 00:05:56,400
we runs up to

144
00:05:56,400 --> 00:05:59,600
identify common vulnerabilities or

145
00:05:59,600 --> 00:06:02,440
web application

146
00:06:02,440 --> 00:06:04,000
misconfigurations

147
00:06:04,000 --> 00:06:06,720
we do this it has come out handy from

148
00:06:06,720 --> 00:06:09,520
time to time though now it's uh where

149
00:06:09,520 --> 00:06:12,000
the things are more mature and a lot of

150
00:06:12,000 --> 00:06:14,479
security controls have been implemented

151
00:06:14,479 --> 00:06:16,720
uh there are not so much there is not so

152
00:06:16,720 --> 00:06:17,840
much to

153
00:06:17,840 --> 00:06:21,600
to go on from this but this also is the

154
00:06:21,600 --> 00:06:25,280
main reason where we want uh to have is

155
00:06:25,280 --> 00:06:28,479
that this is does not cover the actual

156
00:06:28,479 --> 00:06:31,120
business logic we want to test on this

157
00:06:31,120 --> 00:06:33,680
application which has a bunch of

158
00:06:33,680 --> 00:06:36,160
functionality areas with many different

159
00:06:36,160 --> 00:06:38,319
business flows consisting of multiple

160
00:06:38,319 --> 00:06:39,280
steps

161
00:06:39,280 --> 00:06:40,240
uh

162
00:06:40,240 --> 00:06:43,520
integration with external system and

163
00:06:43,520 --> 00:06:44,479
this

164
00:06:44,479 --> 00:06:46,160
this release the

165
00:06:46,160 --> 00:06:48,800
attack surface we want to

166
00:06:48,800 --> 00:06:49,520
uh

167
00:06:49,520 --> 00:06:51,280
to cover

168
00:06:51,280 --> 00:06:52,720
moving on we have the penetration

169
00:06:52,720 --> 00:06:54,560
testing then if attractor audits

170
00:06:54,560 --> 00:06:56,639
infrastructure audits

171
00:06:56,639 --> 00:06:59,680
are done are conducted against the

172
00:06:59,680 --> 00:07:01,520
cloud-based environments now the

173
00:07:01,520 --> 00:07:04,240
penetration testing

174
00:07:04,240 --> 00:07:06,880
is the only actual uh in the highest

175
00:07:06,880 --> 00:07:09,520
level of security assurance as a

176
00:07:09,520 --> 00:07:12,560
verification activity in terms of this

177
00:07:12,560 --> 00:07:14,960
attack surface where trying to

178
00:07:14,960 --> 00:07:17,199
to have covered earlier in the life

179
00:07:17,199 --> 00:07:18,319
cycle

180
00:07:18,319 --> 00:07:19,120
uh

181
00:07:19,120 --> 00:07:21,919
it offers the best we can i it offers

182
00:07:21,919 --> 00:07:24,800
the best assurance as possible but it's

183
00:07:24,800 --> 00:07:26,800
not conducted on a spring basis and

184
00:07:26,800 --> 00:07:29,039
that's what that's what we're going to

185
00:07:29,039 --> 00:07:31,599
tackle in in our initiative to move this

186
00:07:31,599 --> 00:07:34,400
a little bit uh earlier in the life

187
00:07:34,400 --> 00:07:36,880
cycle so that we can leverage from this

188
00:07:36,880 --> 00:07:38,800
assurance the penetration testing only

189
00:07:38,800 --> 00:07:41,440
can provide

190
00:07:41,759 --> 00:07:43,599
we also have the requirements we have

191
00:07:43,599 --> 00:07:46,080
asvs i mean like we have specific

192
00:07:46,080 --> 00:07:48,160
chapters that are applicable to the

193
00:07:48,160 --> 00:07:50,639
problem we have at hand and will

194
00:07:50,639 --> 00:07:52,240
actually be

195
00:07:52,240 --> 00:07:54,960
a mapping from the for the solution we

196
00:07:54,960 --> 00:07:58,560
chose and this special like specific

197
00:07:58,560 --> 00:08:01,599
chapters in asps like uh

198
00:08:01,599 --> 00:08:04,639
secure file uploads api architecture

199
00:08:04,639 --> 00:08:07,120
access control and other and others as

200
00:08:07,120 --> 00:08:08,160
well

201
00:08:08,160 --> 00:08:11,199
uh we also have some regarding some i

202
00:08:11,199 --> 00:08:14,479
will have the goal of this

203
00:08:14,479 --> 00:08:16,879
of this initiative we took with security

204
00:08:16,879 --> 00:08:19,680
automation to reach maturity level 3

205
00:08:19,680 --> 00:08:21,280
which is actually

206
00:08:21,280 --> 00:08:23,919
which actually mandates to have

207
00:08:23,919 --> 00:08:26,720
integrated security testing

208
00:08:26,720 --> 00:08:29,840
as part of your pipeline

209
00:08:29,840 --> 00:08:30,879
so

210
00:08:30,879 --> 00:08:32,719
moving on to the architecture we are

211
00:08:32,719 --> 00:08:35,200
basically learning a single page this is

212
00:08:35,200 --> 00:08:37,279
about a single page application running

213
00:08:37,279 --> 00:08:39,599
at nuclear front-end we have a couple

214
00:08:39,599 --> 00:08:42,640
rest apis implemented in uh in java in

215
00:08:42,640 --> 00:08:43,839
the back-end

216
00:08:43,839 --> 00:08:46,160
uh for our authentication architecture

217
00:08:46,160 --> 00:08:48,320
we use open ids the

218
00:08:48,320 --> 00:08:51,040
standard flows of the open id of the

219
00:08:51,040 --> 00:08:52,880
oauth specification

220
00:08:52,880 --> 00:08:54,480
um

221
00:08:54,480 --> 00:08:56,720
for our authorization architecture we

222
00:08:56,720 --> 00:08:58,880
mainly like in the high level we have a

223
00:08:58,880 --> 00:09:01,040
role based access control consisting of

224
00:09:01,040 --> 00:09:03,360
multiple roles and

225
00:09:03,360 --> 00:09:05,360
hundreds of permissions for different

226
00:09:05,360 --> 00:09:07,839
functionality areas and we also have

227
00:09:07,839 --> 00:09:10,320
facts on level x control

228
00:09:10,320 --> 00:09:12,880
implementing authorization checks at the

229
00:09:12,880 --> 00:09:14,640
function level

230
00:09:14,640 --> 00:09:17,519
trying to mitigate the violations that

231
00:09:17,519 --> 00:09:20,080
could occur if we were only taking the

232
00:09:20,080 --> 00:09:23,680
role into an account in such cases

233
00:09:23,680 --> 00:09:26,240
and our accountability architecture

234
00:09:26,240 --> 00:09:28,240
which is often overlooked we want to

235
00:09:28,240 --> 00:09:29,760
highlight it

236
00:09:29,760 --> 00:09:30,800
and

237
00:09:30,800 --> 00:09:33,040
because it's important

238
00:09:33,040 --> 00:09:35,200
from a compliance point of view having

239
00:09:35,200 --> 00:09:37,200
to log the right stuff

240
00:09:37,200 --> 00:09:38,800
with the right way

241
00:09:38,800 --> 00:09:41,120
taking care of the privacy of what you

242
00:09:41,120 --> 00:09:43,360
log and of course the sensitivity of the

243
00:09:43,360 --> 00:09:46,080
data you log and keeping an audit rail

244
00:09:46,080 --> 00:09:48,640
and keeping people accountable for what

245
00:09:48,640 --> 00:09:50,560
they do in case of a for ethnic

246
00:09:50,560 --> 00:09:51,920
investigation

247
00:09:51,920 --> 00:09:55,279
or what not and be able to cover this

248
00:09:55,279 --> 00:09:56,320
and

249
00:09:56,320 --> 00:09:58,560
provide the information that will be

250
00:09:58,560 --> 00:10:01,600
needed in those circumstances

251
00:10:01,600 --> 00:10:04,399
so going to the problem at hand uh the

252
00:10:04,399 --> 00:10:07,920
first problem we had is regarding our uh

253
00:10:07,920 --> 00:10:09,440
sourcing

254
00:10:09,440 --> 00:10:11,600
and when i'm saying sort when i say

255
00:10:11,600 --> 00:10:13,920
sourcing i basically mean how we're

256
00:10:13,920 --> 00:10:17,200
going to source our test cases i mean

257
00:10:17,200 --> 00:10:19,920
how what will be associated for defining

258
00:10:19,920 --> 00:10:22,240
those cases so we had a couple options

259
00:10:22,240 --> 00:10:24,160
here the first one was to crawl into the

260
00:10:24,160 --> 00:10:27,920
application i mean i have this have like

261
00:10:27,920 --> 00:10:29,680
a tool like burp

262
00:10:29,680 --> 00:10:32,160
intercept the traffic and give all this

263
00:10:32,160 --> 00:10:34,320
valuable information such tools can

264
00:10:34,320 --> 00:10:36,720
provide and from there based on the

265
00:10:36,720 --> 00:10:38,720
information that we get in the endpoint

266
00:10:38,720 --> 00:10:43,200
identification begin writing cases

267
00:10:43,200 --> 00:10:44,480
this

268
00:10:44,480 --> 00:10:46,560
this would be really fast although we

269
00:10:46,560 --> 00:10:48,399
didn't like the fact that we have to

270
00:10:48,399 --> 00:10:51,200
consider the application behavior and

271
00:10:51,200 --> 00:10:53,680
the responses we got as the single

272
00:10:53,680 --> 00:10:56,880
source of truth for defining the what

273
00:10:56,880 --> 00:10:59,600
was meant to be the correct thing to do

274
00:10:59,600 --> 00:11:02,079
which we didn't like because something

275
00:11:02,079 --> 00:11:04,480
might have been implemented wrong

276
00:11:04,480 --> 00:11:06,399
now the other the other option was to do

277
00:11:06,399 --> 00:11:08,880
a source code review uh we could do like

278
00:11:08,880 --> 00:11:11,120
a regular expression on the source code

279
00:11:11,120 --> 00:11:12,800
because because we have access to the

280
00:11:12,800 --> 00:11:15,920
source code identify all endpoints and

281
00:11:15,920 --> 00:11:18,560
from there reading with the code which

282
00:11:18,560 --> 00:11:20,480
would take significant resources of

283
00:11:20,480 --> 00:11:24,240
course but uh it would be a more white

284
00:11:24,240 --> 00:11:27,040
based approach to do this and have like

285
00:11:27,040 --> 00:11:30,399
a really good coverage but it would also

286
00:11:30,399 --> 00:11:33,760
miss the documentation and the

287
00:11:33,760 --> 00:11:37,200
and misses the opportunity to leverage

288
00:11:37,200 --> 00:11:39,360
all previous activities done in the life

289
00:11:39,360 --> 00:11:42,959
cycle so that we can have them all uh so

290
00:11:42,959 --> 00:11:45,680
that we can have like cases

291
00:11:45,680 --> 00:11:48,519
directly derived and collaborate

292
00:11:48,519 --> 00:11:52,240
collaboratively up decided uh between

293
00:11:52,240 --> 00:11:54,880
security architecture as well as a

294
00:11:54,880 --> 00:11:58,000
business analyst from the client side

295
00:11:58,000 --> 00:11:59,120
and of course

296
00:11:59,120 --> 00:12:02,079
the other option which seemed also more

297
00:12:02,079 --> 00:12:04,880
natural to do is the documentation

298
00:12:04,880 --> 00:12:07,600
which we already had in a way i mean not

299
00:12:07,600 --> 00:12:09,920
like always updated not in a perfect

300
00:12:09,920 --> 00:12:12,880
state all the time but the best possible

301
00:12:12,880 --> 00:12:15,120
place to really identify the peace and

302
00:12:15,120 --> 00:12:17,120
slaughter flows which

303
00:12:17,120 --> 00:12:19,760
we are most interested in because this

304
00:12:19,760 --> 00:12:22,160
is the attack surface that is most hit

305
00:12:22,160 --> 00:12:24,560
by the bad guys we want to keep out is

306
00:12:24,560 --> 00:12:27,279
the business logic of the of our

307
00:12:27,279 --> 00:12:30,639
applications and we wanted to really uh

308
00:12:30,639 --> 00:12:32,880
have this attack surface covered and

309
00:12:32,880 --> 00:12:34,880
documentation seemed like the best

310
00:12:34,880 --> 00:12:36,240
option

311
00:12:36,240 --> 00:12:38,560
so the solution to that was to create an

312
00:12:38,560 --> 00:12:40,959
access control matrix now likes control

313
00:12:40,959 --> 00:12:43,839
matrix we didn't have at the time but uh

314
00:12:43,839 --> 00:12:45,519
we liked the

315
00:12:45,519 --> 00:12:47,040
value it offered us

316
00:12:47,040 --> 00:12:50,160
in terms of visibility because we

317
00:12:50,160 --> 00:12:52,560
already have such some of this

318
00:12:52,560 --> 00:12:54,959
information scattered all around the

319
00:12:54,959 --> 00:12:57,040
user stories use cases

320
00:12:57,040 --> 00:12:59,360
uh we had like some authorization

321
00:12:59,360 --> 00:13:01,920
permissions in uh where where they were

322
00:13:01,920 --> 00:13:04,560
applicable in some user stories but now

323
00:13:04,560 --> 00:13:07,440
what we have is a single

324
00:13:07,440 --> 00:13:10,000
confluent conference page well it could

325
00:13:10,000 --> 00:13:12,000
be in other formats as well but most

326
00:13:12,000 --> 00:13:14,399
important thing is that we have a single

327
00:13:14,399 --> 00:13:15,279
source

328
00:13:15,279 --> 00:13:17,360
of truth regarding the authorization

329
00:13:17,360 --> 00:13:20,639
schema of the application as a whole

330
00:13:20,639 --> 00:13:22,399
that could be

331
00:13:22,399 --> 00:13:23,760
also

332
00:13:23,760 --> 00:13:27,440
be used as a basis to also engage um

333
00:13:27,440 --> 00:13:31,120
developers and architecture team ideally

334
00:13:31,120 --> 00:13:34,000
to a review to keep this on track to

335
00:13:34,000 --> 00:13:37,200
have this on the expense on the or the

336
00:13:37,200 --> 00:13:40,079
the definition of done or their workflow

337
00:13:40,079 --> 00:13:42,639
and have these actions implemented there

338
00:13:42,639 --> 00:13:45,680
even from the analysis or from uh or

339
00:13:45,680 --> 00:13:47,760
leverage those actions in the test cases

340
00:13:47,760 --> 00:13:50,240
as i will show you in a minute on how we

341
00:13:50,240 --> 00:13:53,440
do those cross reference

342
00:13:53,440 --> 00:13:55,839
so this cross reference is actually

343
00:13:55,839 --> 00:13:57,760
having to

344
00:13:57,760 --> 00:14:01,519
being able to track what the test cases

345
00:14:01,519 --> 00:14:04,160
are and where they come from so that

346
00:14:04,160 --> 00:14:06,720
when you go maintain this test suit of

347
00:14:06,720 --> 00:14:09,199
security apis

348
00:14:09,199 --> 00:14:11,680
you know that this test relates to this

349
00:14:11,680 --> 00:14:14,160
functionality and you can check what

350
00:14:14,160 --> 00:14:16,720
exactly lies beneath right

351
00:14:16,720 --> 00:14:17,920
and this of course has to do with

352
00:14:17,920 --> 00:14:20,000
business loads which is our primary

353
00:14:20,000 --> 00:14:22,480
which is our primary focus here and we

354
00:14:22,480 --> 00:14:24,800
want to identify those flows and this

355
00:14:24,800 --> 00:14:28,320
will help us do it more effectively

356
00:14:28,320 --> 00:14:30,399
now the second problem we had is how we

357
00:14:30,399 --> 00:14:32,480
want to structure our test

358
00:14:32,480 --> 00:14:34,880
of course one very like a

359
00:14:34,880 --> 00:14:37,120
natural way to go is to go using the

360
00:14:37,120 --> 00:14:38,480
endpoint paths

361
00:14:38,480 --> 00:14:40,800
now the endpoint paths i mean it is

362
00:14:40,800 --> 00:14:42,560
quite what it sounds like like having

363
00:14:42,560 --> 00:14:47,360
the url uh in a subresource way for urls

364
00:14:47,360 --> 00:14:49,360
included in an endpoint and then

365
00:14:49,360 --> 00:14:51,600
structuring your tests based on that

366
00:14:51,600 --> 00:14:53,920
which would achieve a greatest

367
00:14:53,920 --> 00:14:57,040
a good amount of coverage i guess but it

368
00:14:57,040 --> 00:14:59,120
lacked the security side focused of

369
00:14:59,120 --> 00:15:01,600
things because we wanted our structure

370
00:15:01,600 --> 00:15:03,440
to be specified

371
00:15:03,440 --> 00:15:05,839
so that it can help the tester or the

372
00:15:05,839 --> 00:15:08,000
developer who is writing a test to think

373
00:15:08,000 --> 00:15:10,959
about those key areas that we want to

374
00:15:10,959 --> 00:15:12,399
have security

375
00:15:12,399 --> 00:15:14,480
security wise covered

376
00:15:14,480 --> 00:15:16,320
so the other option was to go with

377
00:15:16,320 --> 00:15:19,920
specification and of course

378
00:15:19,920 --> 00:15:22,079
the solution was to use the os project

379
00:15:22,079 --> 00:15:24,360
api security which has insufficient

380
00:15:24,360 --> 00:15:27,120
categorization it's community based and

381
00:15:27,120 --> 00:15:28,480
it's open source

382
00:15:28,480 --> 00:15:30,160
and

383
00:15:30,160 --> 00:15:32,560
i mean it pretty much does what we like

384
00:15:32,560 --> 00:15:34,160
and of course

385
00:15:34,160 --> 00:15:36,000
the thing is that there is no other a

386
00:15:36,000 --> 00:15:38,399
non-structured alternative as well

387
00:15:38,399 --> 00:15:41,600
but regardless this is what it is and it

388
00:15:41,600 --> 00:15:43,920
does what we want and really gives you

389
00:15:43,920 --> 00:15:47,600
like the basic uh backbone of mindset to

390
00:15:47,600 --> 00:15:50,880
write test cases upon for modern uh api

391
00:15:50,880 --> 00:15:53,600
driven applications right

392
00:15:53,600 --> 00:15:55,680
uh

393
00:15:55,680 --> 00:15:58,639
so the next problem uh what tool are we

394
00:15:58,639 --> 00:15:59,759
going to use

395
00:15:59,759 --> 00:16:01,759
here we really care about ci integration

396
00:16:01,759 --> 00:16:04,399
capabilities we care about what apis we

397
00:16:04,399 --> 00:16:07,120
support and of course we care about the

398
00:16:07,120 --> 00:16:09,279
learning curve the developers would have

399
00:16:09,279 --> 00:16:12,320
to familiarize in an ideal scenario

400
00:16:12,320 --> 00:16:14,880
where they also engage in this actively

401
00:16:14,880 --> 00:16:18,480
and make this part of the experience and

402
00:16:18,480 --> 00:16:20,720
we also want to make this more easy to

403
00:16:20,720 --> 00:16:22,560
them to choose a tool that will be

404
00:16:22,560 --> 00:16:24,800
familiar as well then

405
00:16:24,800 --> 00:16:27,279
solution is postman postman accomplished

406
00:16:27,279 --> 00:16:29,519
exactly that because developers already

407
00:16:29,519 --> 00:16:32,079
used network purpose not like security

408
00:16:32,079 --> 00:16:34,079
focused testing but they took you to

409
00:16:34,079 --> 00:16:37,199
test their apis in some way or another

410
00:16:37,199 --> 00:16:38,880
we'll have dedicated documentation

411
00:16:38,880 --> 00:16:40,480
sections which we really like and we

412
00:16:40,480 --> 00:16:42,880
highly leverage uh to

413
00:16:42,880 --> 00:16:45,839
both refer to our access control metrics

414
00:16:45,839 --> 00:16:47,920
so that we can have

415
00:16:47,920 --> 00:16:48,720
this

416
00:16:48,720 --> 00:16:51,040
tracking that i talked about before but

417
00:16:51,040 --> 00:16:54,160
also to include our test data

418
00:16:54,160 --> 00:16:57,759
which the specific test case refers to

419
00:16:57,759 --> 00:17:00,079
we also have flow support and this is

420
00:17:00,079 --> 00:17:02,480
about what we were talking

421
00:17:02,480 --> 00:17:04,640
before actually on the

422
00:17:04,640 --> 00:17:07,199
uh on the business logic identifications

423
00:17:07,199 --> 00:17:09,919
and transaction-based flaws

424
00:17:09,919 --> 00:17:13,119
which we highly want to

425
00:17:13,119 --> 00:17:14,959
cover and we cover only on the manual

426
00:17:14,959 --> 00:17:17,760
penetration tests on big milestones but

427
00:17:17,760 --> 00:17:19,760
now we want them covered as soon as

428
00:17:19,760 --> 00:17:22,240
possible

429
00:17:22,880 --> 00:17:25,359
now postman has a seamless integration

430
00:17:25,359 --> 00:17:27,919
with changes not like in form of plugin

431
00:17:27,919 --> 00:17:29,840
that can see is the condition continuous

432
00:17:29,840 --> 00:17:32,799
integration server we use and we can use

433
00:17:32,799 --> 00:17:36,240
it as a build step have ready to use a

434
00:17:36,240 --> 00:17:38,640
docker monster

435
00:17:38,640 --> 00:17:41,120
now the other problem we had is

436
00:17:41,120 --> 00:17:44,000
how we're going to track our data

437
00:17:44,000 --> 00:17:46,080
so for a test suit to run you need a

438
00:17:46,080 --> 00:17:48,559
couple data you have test data scripts

439
00:17:48,559 --> 00:17:49,919
uh being

440
00:17:49,919 --> 00:17:52,240
responsible to create all this data you

441
00:17:52,240 --> 00:17:54,720
need for a specific environment we don't

442
00:17:54,720 --> 00:17:57,520
have the scripts at this point uh we're

443
00:17:57,520 --> 00:18:00,400
in the process of creating them but

444
00:18:00,400 --> 00:18:02,960
we had couple options to do a confluence

445
00:18:02,960 --> 00:18:04,720
page which would be a nice choice

446
00:18:04,720 --> 00:18:06,640
because confluence has been linked in

447
00:18:06,640 --> 00:18:09,840
history we also would call like a more

448
00:18:09,840 --> 00:18:12,720
sophisticated to tackle issues that

449
00:18:12,720 --> 00:18:15,760
would come up in the future if this got

450
00:18:15,760 --> 00:18:18,640
big and wouldn't be so easy to scale in

451
00:18:18,640 --> 00:18:22,240
the confluence page but uh the

452
00:18:22,240 --> 00:18:24,960
data management solution is not what we

453
00:18:24,960 --> 00:18:28,000
could suffice with right now so uh we

454
00:18:28,000 --> 00:18:29,280
could go

455
00:18:29,280 --> 00:18:31,360
also with an old time classic excel

456
00:18:31,360 --> 00:18:33,600
sheet which would be really fast to do

457
00:18:33,600 --> 00:18:35,840
and this is what we chose in terms of

458
00:18:35,840 --> 00:18:37,840
being straightforward in terms of being

459
00:18:37,840 --> 00:18:40,240
fast and of course we know that it won't

460
00:18:40,240 --> 00:18:42,320
scale but

461
00:18:42,320 --> 00:18:44,000
we have this

462
00:18:44,000 --> 00:18:46,000
we have this truck and

463
00:18:46,000 --> 00:18:49,679
we can we can start our way low and see

464
00:18:49,679 --> 00:18:52,320
how this whole thing progresses and what

465
00:18:52,320 --> 00:18:54,960
i want to really note about here is that

466
00:18:54,960 --> 00:18:56,960
even though you're using an excel sheet

467
00:18:56,960 --> 00:18:58,640
it's always important to keep the

468
00:18:58,640 --> 00:19:01,120
documentation documentation guys like

469
00:19:01,120 --> 00:19:03,520
really important makes things so much

470
00:19:03,520 --> 00:19:06,080
more maintainable like even a simple

471
00:19:06,080 --> 00:19:07,760
sick that i'm going to show you like in

472
00:19:07,760 --> 00:19:11,039
a little bit we can you can have like a

473
00:19:11,039 --> 00:19:13,200
documentation tab where you document

474
00:19:13,200 --> 00:19:15,120
your columns specify some common

475
00:19:15,120 --> 00:19:17,760
convention to use and there you got it

476
00:19:17,760 --> 00:19:21,520
you have something that can

477
00:19:21,520 --> 00:19:24,160
be more easy to write and maintain and

478
00:19:24,160 --> 00:19:26,240
assure some common format on this so you

479
00:19:26,240 --> 00:19:27,840
don't have discrepancies and

480
00:19:27,840 --> 00:19:29,840
inconsistencies

481
00:19:29,840 --> 00:19:33,039
so uh thank you all uh for uh for

482
00:19:33,039 --> 00:19:35,760
watching this here from 12 sec

483
00:19:35,760 --> 00:19:39,039
we wish you all the best and moving on

484
00:19:39,039 --> 00:19:41,280
we hope to you found something useful a

485
00:19:41,280 --> 00:19:43,440
lot of these to do in your engagements

486
00:19:43,440 --> 00:19:45,760
or give you give us some feedback uh

487
00:19:45,760 --> 00:19:48,559
regarding what you would like uh what

488
00:19:48,559 --> 00:19:50,960
what you think should be best in terms

489
00:19:50,960 --> 00:19:54,480
of approach in terms of processes or

490
00:19:54,480 --> 00:19:59,120
tools so moving on to the video peace

491
00:19:59,760 --> 00:20:01,919
so hello again everyone moving on to the

492
00:20:01,919 --> 00:20:04,240
video unfortunately we had some problems

493
00:20:04,240 --> 00:20:06,159
setting up the environment that we have

494
00:20:06,159 --> 00:20:08,559
configured jenkins to run our test set

495
00:20:08,559 --> 00:20:09,919
test shoot on

496
00:20:09,919 --> 00:20:10,720
uh

497
00:20:10,720 --> 00:20:12,480
alternatively we're going to run the

498
00:20:12,480 --> 00:20:14,880
test suit only one of our dedicated

499
00:20:14,880 --> 00:20:17,039
environments for verification purposes

500
00:20:17,039 --> 00:20:19,520
that we hold in our premises but still

501
00:20:19,520 --> 00:20:21,039
i'm going to be able to show you a lot

502
00:20:21,039 --> 00:20:22,880
of the stuff that we discussed on during

503
00:20:22,880 --> 00:20:25,600
the conversation uh regarding uh

504
00:20:25,600 --> 00:20:27,919
regarding postman and its features and

505
00:20:27,919 --> 00:20:30,080
how we leverage all the cross

506
00:20:30,080 --> 00:20:32,559
referencing and the like so as you can

507
00:20:32,559 --> 00:20:34,960
see here in the collection we have the

508
00:20:34,960 --> 00:20:36,960
collection structured as per the

509
00:20:36,960 --> 00:20:40,480
specification of ospressed api security

510
00:20:40,480 --> 00:20:43,280
which mainly is security focus and

511
00:20:43,280 --> 00:20:45,120
highlights the key areas that we would

512
00:20:45,120 --> 00:20:48,240
like to test as part of for security api

513
00:20:48,240 --> 00:20:49,360
testing

514
00:20:49,360 --> 00:20:51,280
next we have the documentation section

515
00:20:51,280 --> 00:20:54,320
where we outline basic stuff regarding

516
00:20:54,320 --> 00:20:55,360
how we

517
00:20:55,360 --> 00:20:57,919
write and maintain our test cases as

518
00:20:57,919 --> 00:20:59,520
well as some information on the

519
00:20:59,520 --> 00:21:01,440
references we have on test cases

520
00:21:01,440 --> 00:21:02,400
themselves

521
00:21:02,400 --> 00:21:05,440
as you can see specifically here we have

522
00:21:05,440 --> 00:21:08,080
the source the associated action from

523
00:21:08,080 --> 00:21:09,919
which is actually the identifier of the

524
00:21:09,919 --> 00:21:11,760
action in the action control matrix as

525
00:21:11,760 --> 00:21:14,159
i'm about to show you in a few seconds

526
00:21:14,159 --> 00:21:16,000
and the identifier from the test data

527
00:21:16,000 --> 00:21:18,080
that are needed to run this specific

528
00:21:18,080 --> 00:21:20,000
test case so as you can see the

529
00:21:20,000 --> 00:21:23,120
identifier here it is c68 we can see the

530
00:21:23,120 --> 00:21:26,480
respective action here and the url that

531
00:21:26,480 --> 00:21:30,960
is going to link to the analysis uh

532
00:21:30,960 --> 00:21:33,200
for this specific action outlining the

533
00:21:33,200 --> 00:21:35,919
requirements and the all the business

534
00:21:35,919 --> 00:21:38,480
logic scenarios that we highly want to

535
00:21:38,480 --> 00:21:41,919
test and that way give the tester or

536
00:21:41,919 --> 00:21:43,679
developer that's writing the case or

537
00:21:43,679 --> 00:21:46,720
maintaining it a very good idea on what

538
00:21:46,720 --> 00:21:47,679
this

539
00:21:47,679 --> 00:21:50,000
case is about

540
00:21:50,000 --> 00:21:51,919
so moving on you can see here the test

541
00:21:51,919 --> 00:21:54,080
data this data was simply as we said

542
00:21:54,080 --> 00:21:58,480
tracking in the uh in the test here uh

543
00:21:58,480 --> 00:22:02,480
just uh having this test data and uh

544
00:22:02,480 --> 00:22:04,400
track tracking them and having some

545
00:22:04,400 --> 00:22:08,080
documentation on how this uh

546
00:22:08,080 --> 00:22:10,720
how these columns are

547
00:22:10,720 --> 00:22:12,480
are used and

548
00:22:12,480 --> 00:22:16,240
some common conventions on using in this

549
00:22:16,240 --> 00:22:17,360
seat

550
00:22:17,360 --> 00:22:19,200
uh moving on to

551
00:22:19,200 --> 00:22:20,799
the uh

552
00:22:20,799 --> 00:22:22,960
to the postman i want to show you some

553
00:22:22,960 --> 00:22:24,960
features that we might come handy for

554
00:22:24,960 --> 00:22:26,640
various use cases

555
00:22:26,640 --> 00:22:29,120
for example flaws which is a very good

556
00:22:29,120 --> 00:22:31,280
feature of postman that can send

557
00:22:31,280 --> 00:22:34,400
multiple http requests but also you can

558
00:22:34,400 --> 00:22:36,320
do whatever else you can imagine pretty

559
00:22:36,320 --> 00:22:39,520
much because it can go like from

560
00:22:39,520 --> 00:22:41,679
logical testing to

561
00:22:41,679 --> 00:22:46,000
expat evaluations encodings decodings

562
00:22:46,000 --> 00:22:47,760
uh parsing of

563
00:22:47,760 --> 00:22:51,200
various output that can occur and also

564
00:22:51,200 --> 00:22:53,039
another very interesting that we'll find

565
00:22:53,039 --> 00:22:56,240
about these delays delays can be used

566
00:22:56,240 --> 00:22:58,559
like for example in our case where we

567
00:22:58,559 --> 00:23:00,960
have external system integration and we

568
00:23:00,960 --> 00:23:03,760
must wait for some for some time

569
00:23:03,760 --> 00:23:06,480
interval before we invoke an endpoint

570
00:23:06,480 --> 00:23:08,320
we're going to use delays for this

571
00:23:08,320 --> 00:23:11,039
transaction based complex flows

572
00:23:11,039 --> 00:23:14,320
uh of and then again we have the

573
00:23:14,320 --> 00:23:16,320
environment variables environment

574
00:23:16,320 --> 00:23:17,440
variables

575
00:23:17,440 --> 00:23:21,200
we can use to share and not use the same

576
00:23:21,200 --> 00:23:23,360
the same data all the time in the test

577
00:23:23,360 --> 00:23:26,960
cases as we do in our base url

578
00:23:26,960 --> 00:23:29,440
environment variable here but also among

579
00:23:29,440 --> 00:23:32,080
us i'm about to show you in

580
00:23:32,080 --> 00:23:34,159
the integers configuration we're going

581
00:23:34,159 --> 00:23:36,559
to use environment variable argument the

582
00:23:36,559 --> 00:23:39,520
container of human we're going to set up

583
00:23:39,520 --> 00:23:40,240
to

584
00:23:40,240 --> 00:23:43,840
pass this variable at the runtime

585
00:23:43,840 --> 00:23:46,640
container where this suit is going to

586
00:23:46,640 --> 00:23:47,440
run

587
00:23:47,440 --> 00:23:51,039
these variables are also

588
00:23:51,039 --> 00:23:53,200
can also be defined as secret as you can

589
00:23:53,200 --> 00:23:55,360
see here you can select the type this

590
00:23:55,360 --> 00:23:57,440
way we can mask it to prevent any

591
00:23:57,440 --> 00:23:59,600
information disclosure

592
00:23:59,600 --> 00:24:01,440
one other interesting feature of postman

593
00:24:01,440 --> 00:24:04,240
is the attachments uh because you're

594
00:24:04,240 --> 00:24:06,080
gonna have like

595
00:24:06,080 --> 00:24:08,799
some multi-part requests of course which

596
00:24:08,799 --> 00:24:11,679
is going to include uh upload then

597
00:24:11,679 --> 00:24:13,840
attachments to test the uh

598
00:24:13,840 --> 00:24:16,080
upload endpoints post months through the

599
00:24:16,080 --> 00:24:17,760
settings gives us the capability to

600
00:24:17,760 --> 00:24:20,640
define a directory now don't mind my own

601
00:24:20,640 --> 00:24:22,080
this is an absolute director with my

602
00:24:22,080 --> 00:24:24,799
machine but postman gives you the

603
00:24:24,799 --> 00:24:27,600
possibility to define a directory where

604
00:24:27,600 --> 00:24:29,120
it can be referenced by multiple

605
00:24:29,120 --> 00:24:32,400
machines so that you don't have file uh

606
00:24:32,400 --> 00:24:34,240
file solutioners

607
00:24:34,240 --> 00:24:36,960
uh i will also show you how this the

608
00:24:36,960 --> 00:24:40,159
outcome from the actual uh test should

609
00:24:40,159 --> 00:24:42,720
running postman is going to look like

610
00:24:42,720 --> 00:24:44,640
and i also want to highlight like

611
00:24:44,640 --> 00:24:46,720
specific methods that you can use so

612
00:24:46,720 --> 00:24:49,279
that you can have like more clarity in

613
00:24:49,279 --> 00:24:50,559
what your

614
00:24:50,559 --> 00:24:51,679
test

615
00:24:51,679 --> 00:24:54,400
test actually uh tries to verify of

616
00:24:54,400 --> 00:24:56,720
course going also to be covered in more

617
00:24:56,720 --> 00:24:59,440
depth in the reference to the ax control

618
00:24:59,440 --> 00:25:01,840
matrix itself

619
00:25:01,840 --> 00:25:05,360
now moving on to the to uh to jenkins as

620
00:25:05,360 --> 00:25:07,600
you can see here we have some basic

621
00:25:07,600 --> 00:25:10,159
configuration ready or with the newman

622
00:25:10,159 --> 00:25:12,720
container ready to use documents we

623
00:25:12,720 --> 00:25:14,480
specify the directory we want to have

624
00:25:14,480 --> 00:25:17,919
inside uh inside inside the container

625
00:25:17,919 --> 00:25:20,240
specify the collection to fetch from a

626
00:25:20,240 --> 00:25:22,400
github repo we have

627
00:25:22,400 --> 00:25:23,919
in the previous step

628
00:25:23,919 --> 00:25:26,240
also this is environment variable

629
00:25:26,240 --> 00:25:29,120
passing as i told to you before

630
00:25:29,120 --> 00:25:32,640
so that we can affect the run-time

631
00:25:32,640 --> 00:25:34,880
runtime behavior of the collection and

632
00:25:34,880 --> 00:25:36,159
also some

633
00:25:36,159 --> 00:25:38,720
report outputs that may come handy in

634
00:25:38,720 --> 00:25:41,520
various use cases and how you want to

635
00:25:41,520 --> 00:25:44,320
process the output from the test cases

636
00:25:44,320 --> 00:25:45,760
so uh

637
00:25:45,760 --> 00:25:47,039
this is only

638
00:25:47,039 --> 00:25:49,200
thank you very much for watching this

639
00:25:49,200 --> 00:25:50,080
and

640
00:25:50,080 --> 00:25:52,080
please share any feedback you might have

641
00:25:52,080 --> 00:25:54,400
or any questions

642
00:25:54,400 --> 00:25:57,279
thank you again

