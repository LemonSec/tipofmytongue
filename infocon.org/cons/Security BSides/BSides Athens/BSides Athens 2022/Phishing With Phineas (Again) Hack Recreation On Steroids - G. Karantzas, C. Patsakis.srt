1
00:00:07,520 --> 00:00:08,800
hello everyone

2
00:00:08,800 --> 00:00:12,880
my name is and i'm here together with my

3
00:00:12,880 --> 00:00:13,920
good

4
00:00:13,920 --> 00:00:17,039
student and friend just can adjust in

5
00:00:17,039 --> 00:00:19,119
order to present you

6
00:00:19,119 --> 00:00:21,439
our work on fishing

7
00:00:21,439 --> 00:00:25,759
with our work entitled fishing with

8
00:00:26,160 --> 00:00:29,519
is a hacker creation

9
00:00:29,519 --> 00:00:32,159
an old attack

10
00:00:32,159 --> 00:00:34,160
on more or less

11
00:00:34,160 --> 00:00:37,760
new mediums and with

12
00:00:37,760 --> 00:00:41,040
more attack vectors george

13
00:00:41,040 --> 00:00:44,960
hello my name is i am a student of the

14
00:00:44,960 --> 00:00:48,079
professional battalions i also work

15
00:00:48,079 --> 00:00:50,320
right now in the security industry and

16
00:00:50,320 --> 00:00:52,719
this is a

17
00:00:52,719 --> 00:00:54,320
previous

18
00:00:54,320 --> 00:00:58,079
work of ours during my

19
00:00:58,079 --> 00:01:02,160
stay at the athena research center

20
00:01:08,400 --> 00:01:10,560
so

21
00:01:10,560 --> 00:01:12,960
as george stated before this is a

22
00:01:12,960 --> 00:01:15,600
previous work that uh finished a few

23
00:01:15,600 --> 00:01:18,880
months ago practically on april 2022

24
00:01:18,880 --> 00:01:21,920
uh it's mainly funded by two eu project

25
00:01:21,920 --> 00:01:24,840
cybersec europe and lockhart

26
00:01:24,840 --> 00:01:26,479
um

27
00:01:26,479 --> 00:01:30,400
this is uh what we point out here

28
00:01:30,400 --> 00:01:31,600
it's just

29
00:01:31,600 --> 00:01:33,920
our personal views on these matters i

30
00:01:33,920 --> 00:01:35,040
have nothing to do with either the

31
00:01:35,040 --> 00:01:36,720
commission or any

32
00:01:36,720 --> 00:01:39,759
current employers of the people who were

33
00:01:39,759 --> 00:01:41,520
in the research

34
00:01:41,520 --> 00:01:43,920
excellent

35
00:01:44,000 --> 00:01:46,240
so

36
00:01:46,640 --> 00:01:48,360
let's describe the main

37
00:01:48,360 --> 00:01:51,600
motivation and more or less the idea of

38
00:01:51,600 --> 00:01:53,600
what we are doing here

39
00:01:53,600 --> 00:01:56,479
so practically as many of you might know

40
00:01:56,479 --> 00:01:57,920
there was a

41
00:01:57,920 --> 00:01:59,520
famous

42
00:01:59,520 --> 00:02:01,600
security incident

43
00:02:01,600 --> 00:02:04,560
that was made from someone who

44
00:02:04,560 --> 00:02:06,640
coined the

45
00:02:06,640 --> 00:02:07,600
name

46
00:02:07,600 --> 00:02:09,520
phineas fisher

47
00:02:09,520 --> 00:02:12,640
practically what he did he what he did

48
00:02:12,640 --> 00:02:14,400
is that

49
00:02:14,400 --> 00:02:17,760
he created a zero day exploits or some

50
00:02:17,760 --> 00:02:20,959
services from some service scanned the

51
00:02:20,959 --> 00:02:22,640
internet in order to find

52
00:02:22,640 --> 00:02:26,480
which are let's say the available

53
00:02:26,480 --> 00:02:27,840
and

54
00:02:27,840 --> 00:02:30,560
vulnerable endpoints that use

55
00:02:30,560 --> 00:02:31,840
this service

56
00:02:31,840 --> 00:02:34,800
and try to penetrate them

57
00:02:34,800 --> 00:02:37,360
during this course he managed to

58
00:02:37,360 --> 00:02:39,200
penetrate

59
00:02:39,200 --> 00:02:42,080
a web bank uh from cayman from gaiman

60
00:02:42,080 --> 00:02:43,280
islands

61
00:02:43,280 --> 00:02:44,879
and

62
00:02:44,879 --> 00:02:46,800
hiking his way in

63
00:02:46,800 --> 00:02:49,680
and he provided

64
00:02:49,680 --> 00:02:51,760
all the details of what he did how he

65
00:02:51,760 --> 00:02:53,760
did it

66
00:02:53,760 --> 00:02:56,560
the very concept is that practically we

67
00:02:56,560 --> 00:02:59,360
have the details from the attacker side

68
00:02:59,360 --> 00:03:01,840
not from the analysis

69
00:03:01,840 --> 00:03:02,959
of

70
00:03:02,959 --> 00:03:07,519
how a financial institution is actually

71
00:03:08,239 --> 00:03:09,360
viewed

72
00:03:09,360 --> 00:03:11,280
in the eyes of the attacker and

73
00:03:11,280 --> 00:03:14,959
nevertheless this is rather old

74
00:03:14,959 --> 00:03:18,720
what we wanted to do is that given the

75
00:03:18,720 --> 00:03:20,879
current threat landscape

76
00:03:20,879 --> 00:03:23,280
is to try to find ways to create this

77
00:03:23,280 --> 00:03:24,640
experiment

78
00:03:24,640 --> 00:03:26,560
in terms of new

79
00:03:26,560 --> 00:03:30,640
c2 servers in terms of new attacking

80
00:03:30,640 --> 00:03:33,680
methods however also to try to stress

81
00:03:33,680 --> 00:03:36,159
test the defensive mechanism that

82
00:03:36,159 --> 00:03:37,200
current

83
00:03:37,200 --> 00:03:39,519
critical infrastructure current

84
00:03:39,519 --> 00:03:41,680
let's say financial institution would

85
00:03:41,680 --> 00:03:43,920
use

86
00:03:44,840 --> 00:03:48,239
next prior to continuing it's worth

87
00:03:48,239 --> 00:03:50,159
noting that uh

88
00:03:50,159 --> 00:03:52,640
in this case we will try

89
00:03:52,640 --> 00:03:53,519
to

90
00:03:53,519 --> 00:03:56,000
instead of using an external facing

91
00:03:56,000 --> 00:03:58,480
asset like the sonic world vpn that uh

92
00:03:58,480 --> 00:04:02,720
finance are used and exploit for we will

93
00:04:02,720 --> 00:04:05,280
move to more realistic things as we will

94
00:04:05,280 --> 00:04:07,200
see later and also

95
00:04:07,200 --> 00:04:10,000
uh that in a malware testing lab uh it's

96
00:04:10,000 --> 00:04:13,920
not always uh effective simulating

97
00:04:13,920 --> 00:04:15,519
user

98
00:04:15,519 --> 00:04:17,440
activity which will give an attacker

99
00:04:17,440 --> 00:04:21,519
places to hide things to hijack and also

100
00:04:21,519 --> 00:04:23,360
a false positive rate

101
00:04:23,360 --> 00:04:24,800
so

102
00:04:24,800 --> 00:04:27,040
which he can blend with so this is

103
00:04:27,040 --> 00:04:29,120
something we can keep in mind that in a

104
00:04:29,120 --> 00:04:31,280
malware testing lab malware will always

105
00:04:31,280 --> 00:04:32,479
stand out

106
00:04:32,479 --> 00:04:34,560
and give the defenses

107
00:04:34,560 --> 00:04:36,800
some kind of advantage

108
00:04:36,800 --> 00:04:39,040
so

109
00:04:40,639 --> 00:04:44,400
so practically uh as we said we were

110
00:04:44,400 --> 00:04:46,960
trying to recreate the environment

111
00:04:46,960 --> 00:04:47,759
uh

112
00:04:47,759 --> 00:04:51,360
a so-called serwood that

113
00:04:51,360 --> 00:04:53,520
finesse officer

114
00:04:53,520 --> 00:04:54,840
actually

115
00:04:54,840 --> 00:04:57,759
detailed in a more let's say recent

116
00:04:57,759 --> 00:05:00,800
environment here in the diagram you can

117
00:05:00,800 --> 00:05:02,880
see more or less the network setup that

118
00:05:02,880 --> 00:05:04,400
we used it's

119
00:05:04,400 --> 00:05:08,560
all recreated using vms

120
00:05:08,800 --> 00:05:11,680
practically you can see that we have

121
00:05:11,680 --> 00:05:14,880
a pf sense uh in order to

122
00:05:14,880 --> 00:05:16,960
more or less provide some segmentation

123
00:05:16,960 --> 00:05:20,000
to the network you can see that in the

124
00:05:20,000 --> 00:05:24,240
end points we have used 71 and 40 adr

125
00:05:24,240 --> 00:05:27,440
and the idea here is that we try to

126
00:05:27,440 --> 00:05:30,080
create a heterogeneous environment where

127
00:05:30,080 --> 00:05:32,639
different machines are protected with

128
00:05:32,639 --> 00:05:35,919
different security mechanisms so that

129
00:05:35,919 --> 00:05:37,759
it's more difficult

130
00:05:37,759 --> 00:05:38,720
for one

131
00:05:38,720 --> 00:05:39,919
[Music]

132
00:05:39,919 --> 00:05:42,960
for an attacker to

133
00:05:42,960 --> 00:05:46,479
hope from one machine to the other

134
00:05:46,479 --> 00:05:48,140
so

135
00:05:48,140 --> 00:05:50,160
[Music]

136
00:05:50,160 --> 00:05:52,639
the idea is that

137
00:05:52,639 --> 00:05:55,759
we have positioned a citrix server in a

138
00:05:55,759 --> 00:05:57,919
restricted zone

139
00:05:57,919 --> 00:06:02,880
to allow access only to the job server

140
00:06:02,880 --> 00:06:05,280
more or less to

141
00:06:05,280 --> 00:06:06,960
recreate

142
00:06:06,960 --> 00:06:09,039
how things would be

143
00:06:09,039 --> 00:06:12,240
in a bank's secure zone

144
00:06:12,240 --> 00:06:14,560
george

145
00:06:15,199 --> 00:06:16,880
so yes

146
00:06:16,880 --> 00:06:19,360
we use the hyper-v server to

147
00:06:19,360 --> 00:06:21,759
host everything here you can see more or

148
00:06:21,759 --> 00:06:24,400
less the zones the work zone the

149
00:06:24,400 --> 00:06:26,880
secure zone which contain the citrix

150
00:06:26,880 --> 00:06:29,759
xenapp and the jump server we tried to

151
00:06:29,759 --> 00:06:31,440
make

152
00:06:31,440 --> 00:06:33,759
things look

153
00:06:33,759 --> 00:06:36,000
as realistic as possible network wise we

154
00:06:36,000 --> 00:06:38,080
would have to go from here to the jump

155
00:06:38,080 --> 00:06:40,080
zone to the citrix server

156
00:06:40,080 --> 00:06:42,720
and also we use some things like clam av

157
00:06:42,720 --> 00:06:43,840
on

158
00:06:43,840 --> 00:06:46,800
squid to filter basic network traffic

159
00:06:46,800 --> 00:06:49,520
blah blah so it's just

160
00:06:49,520 --> 00:06:51,840
we focus more on the endpoints to this

161
00:06:51,840 --> 00:06:53,680
extent

162
00:06:53,680 --> 00:06:54,800
so

163
00:06:54,800 --> 00:06:56,560
let me present to you the offensive

164
00:06:56,560 --> 00:06:58,400
capabilities we had

165
00:06:58,400 --> 00:07:00,160
as

166
00:07:00,160 --> 00:07:02,800
we if you read the articles of finance

167
00:07:02,800 --> 00:07:05,039
fisher you'll see that he was mainly

168
00:07:05,039 --> 00:07:06,960
using things like partial empire

169
00:07:06,960 --> 00:07:09,840
interpreter things that are out there so

170
00:07:09,840 --> 00:07:10,639
uh

171
00:07:10,639 --> 00:07:15,039
modern uh apts and offenders in general

172
00:07:15,039 --> 00:07:16,560
will use some kind of command and

173
00:07:16,560 --> 00:07:19,759
control means uh things will not always

174
00:07:19,759 --> 00:07:22,880
uh there are scenarios where you can use

175
00:07:22,880 --> 00:07:25,280
like already existing assets but you

176
00:07:25,280 --> 00:07:27,440
will always need some kind of malware to

177
00:07:27,440 --> 00:07:31,599
ease your way in and do things and so we

178
00:07:31,599 --> 00:07:35,440
chose five diverse yet uh highly

179
00:07:35,440 --> 00:07:38,479
promising malware uh that are used but

180
00:07:38,479 --> 00:07:40,400
are not uh that are private and

181
00:07:40,400 --> 00:07:43,840
proprietary not out there for everyone

182
00:07:43,840 --> 00:07:47,680
uh so we will start uh by presenting

183
00:07:47,680 --> 00:07:50,400
nighthawk it's the work of mdsec one of

184
00:07:50,400 --> 00:07:53,680
the top security firms at this moment

185
00:07:53,680 --> 00:07:56,000
uh it's a hardcore

186
00:07:56,000 --> 00:07:59,039
red team toolkit for from harvard

187
00:07:59,039 --> 00:08:00,639
correct immersed

188
00:08:00,639 --> 00:08:03,360
for having red dimmers

189
00:08:03,360 --> 00:08:05,440
stealth configurability

190
00:08:05,440 --> 00:08:08,080
and feature richness is in mind but the

191
00:08:08,080 --> 00:08:10,560
main point that makes always nighthawks

192
00:08:10,560 --> 00:08:11,680
stand out

193
00:08:11,680 --> 00:08:13,520
is basically there are two points

194
00:08:13,520 --> 00:08:16,879
private research that is applied uh by

195
00:08:16,879 --> 00:08:20,000
the people at mdsec and as features and

196
00:08:20,000 --> 00:08:22,319
also the malleability

197
00:08:22,319 --> 00:08:23,680
this means that

198
00:08:23,680 --> 00:08:27,360
this is a highly uh

199
00:08:27,360 --> 00:08:29,199
a malware that can use

200
00:08:29,199 --> 00:08:30,879
highly diverse techniques to evade

201
00:08:30,879 --> 00:08:32,640
detection you can always attribute the

202
00:08:32,640 --> 00:08:34,799
specific pattern to it because there are

203
00:08:34,799 --> 00:08:39,599
many ways in it to do uh things

204
00:08:39,599 --> 00:08:42,240
there are some techniques that are some

205
00:08:42,240 --> 00:08:45,200
of them are being slowly published by uh

206
00:08:45,200 --> 00:08:48,000
the team some are kept in private you

207
00:08:48,000 --> 00:08:52,480
can spoof things like atw ti uh

208
00:08:52,480 --> 00:08:54,959
instrumentation which takes place in

209
00:08:54,959 --> 00:08:58,240
takes place in ntos journal which

210
00:08:58,240 --> 00:09:00,160
it's very hard to avoid

211
00:09:00,160 --> 00:09:03,120
and spoofing strategies for mini filter

212
00:09:03,120 --> 00:09:04,480
callbacks

213
00:09:04,480 --> 00:09:06,800
which is also driver related technology

214
00:09:06,800 --> 00:09:10,000
avs use the the basic driver technology

215
00:09:10,000 --> 00:09:11,920
avs will use they will have a mini

216
00:09:11,920 --> 00:09:14,720
filter with kernel callbacks to monitor

217
00:09:14,720 --> 00:09:16,800
uh operating system events

218
00:09:16,800 --> 00:09:19,200
so uh some of the features that we

219
00:09:19,200 --> 00:09:22,800
actually used and uh had the chance to

220
00:09:22,800 --> 00:09:24,640
test and

221
00:09:24,640 --> 00:09:27,440
do our work with was the rope based

222
00:09:27,440 --> 00:09:30,720
system called unhooking

223
00:09:30,720 --> 00:09:34,160
and later full dll unhooking

224
00:09:34,160 --> 00:09:36,000
stealth feature and other stealth

225
00:09:36,000 --> 00:09:37,920
features it will make the operator's

226
00:09:37,920 --> 00:09:42,000
life easier by cleansing the process and

227
00:09:42,000 --> 00:09:43,360
reducing

228
00:09:43,360 --> 00:09:46,270
uh api based

229
00:09:46,270 --> 00:09:48,000
[Music]

230
00:09:48,000 --> 00:09:50,560
iocs that will occur from tools uran

231
00:09:50,560 --> 00:09:52,959
because we need to separate iocs that

232
00:09:52,959 --> 00:09:56,000
are related to the c2 and those that are

233
00:09:56,000 --> 00:09:59,040
related to the tools if i run

234
00:09:59,040 --> 00:10:02,240
let's say safety cards this will have

235
00:10:02,240 --> 00:10:05,360
all the is of loading mimic ads and also

236
00:10:05,360 --> 00:10:06,880
accessing elsa's

237
00:10:06,880 --> 00:10:09,680
regardless of my c2 and this will get

238
00:10:09,680 --> 00:10:10,480
caught

239
00:10:10,480 --> 00:10:11,279
so

240
00:10:11,279 --> 00:10:13,600
there are things that you will try to do

241
00:10:13,600 --> 00:10:16,320
this applies to user mode

242
00:10:16,320 --> 00:10:18,880
protections mostly there is also thread

243
00:10:18,880 --> 00:10:21,680
stuck spoofing trying to evade uh

244
00:10:21,680 --> 00:10:24,480
thread analysis and what the threat did

245
00:10:24,480 --> 00:10:26,399
and in memory hiding

246
00:10:26,399 --> 00:10:28,959
while sleeping trying to disguise in

247
00:10:28,959 --> 00:10:31,760
memory nighthawk so that it will evade

248
00:10:31,760 --> 00:10:33,200
scanners

249
00:10:33,200 --> 00:10:34,800
there are some customized process

250
00:10:34,800 --> 00:10:36,880
injection methods and some

251
00:10:36,880 --> 00:10:38,880
process injection methods that you can

252
00:10:38,880 --> 00:10:42,240
use but are like uh

253
00:10:42,240 --> 00:10:44,000
opsec

254
00:10:44,000 --> 00:10:46,800
boosted let's say in some cases

255
00:10:46,800 --> 00:10:49,600
so that as we will see later we want

256
00:10:49,600 --> 00:10:51,600
blending

257
00:10:51,600 --> 00:10:57,120
and also network and callback related uh

258
00:10:58,079 --> 00:10:59,920
features for undercover beaconing you

259
00:10:59,920 --> 00:11:02,079
can use teams you can use like custom

260
00:11:02,079 --> 00:11:04,640
templates

261
00:11:04,720 --> 00:11:06,720
you can use many means of transfer so we

262
00:11:06,720 --> 00:11:09,440
will now talk about bluetooth lc4 it was

263
00:11:09,440 --> 00:11:11,760
created by dark vortex and more

264
00:11:11,760 --> 00:11:15,200
specifically an experienced operator

265
00:11:15,200 --> 00:11:17,040
it's a low-cost alternative to kabul

266
00:11:17,040 --> 00:11:19,200
strike and it's supposed to be lesser

267
00:11:19,200 --> 00:11:21,279
known more effective

268
00:11:21,279 --> 00:11:23,680
and more stealthy

269
00:11:23,680 --> 00:11:26,160
some of the features include customized

270
00:11:26,160 --> 00:11:28,800
reflective loaders some both files

271
00:11:28,800 --> 00:11:30,800
bigger object files that will execute

272
00:11:30,800 --> 00:11:32,959
after some memory allocation that will

273
00:11:32,959 --> 00:11:35,200
execute in memory

274
00:11:35,200 --> 00:11:37,600
held up sentinel for enumeration easily

275
00:11:37,600 --> 00:11:40,160
configurable ttps through the malleable

276
00:11:40,160 --> 00:11:42,800
profiles of it and the settings

277
00:11:42,800 --> 00:11:43,839
uh

278
00:11:43,839 --> 00:11:45,360
thing is uh

279
00:11:45,360 --> 00:11:48,079
this product was not the most stable we

280
00:11:48,079 --> 00:11:50,720
have seen we had several issues with it

281
00:11:50,720 --> 00:11:51,440
there

282
00:11:51,440 --> 00:11:54,880
uh the delivery methods were limited

283
00:11:54,880 --> 00:11:57,920
so when you load something dynamically

284
00:11:57,920 --> 00:11:59,519
there are more chances of it to get

285
00:11:59,519 --> 00:12:01,760
caught especially in the case of those

286
00:12:01,760 --> 00:12:04,240
specific two edgers we had

287
00:12:04,240 --> 00:12:05,920
that have some

288
00:12:05,920 --> 00:12:07,760
very

289
00:12:07,760 --> 00:12:10,240
intriguing let's say methods to target

290
00:12:10,240 --> 00:12:11,760
cell code itself

291
00:12:11,760 --> 00:12:12,880
and

292
00:12:12,880 --> 00:12:14,800
we tried to spoof that

293
00:12:14,800 --> 00:12:17,519
in some cases it worked in some cases it

294
00:12:17,519 --> 00:12:18,639
didn't

295
00:12:18,639 --> 00:12:23,519
but uh and we will see that this c2

296
00:12:23,519 --> 00:12:26,399
the city's function will be highly

297
00:12:26,399 --> 00:12:27,839
dependent

298
00:12:27,839 --> 00:12:31,839
on the environment and the endpoint

299
00:12:31,839 --> 00:12:34,160
for example if there is an in process

300
00:12:34,160 --> 00:12:36,079
client because we had things like

301
00:12:36,079 --> 00:12:38,800
sometimes an infinite loop or we had

302
00:12:38,800 --> 00:12:39,920
like

303
00:12:39,920 --> 00:12:42,240
we tried to turn the solution into

304
00:12:42,240 --> 00:12:43,920
passive mode and see what gets caught

305
00:12:43,920 --> 00:12:45,760
and when and where

306
00:12:45,760 --> 00:12:46,880
uh

307
00:12:46,880 --> 00:12:48,880
in general we had some functionality

308
00:12:48,880 --> 00:12:52,079
issues but the main idea is that basic

309
00:12:52,079 --> 00:12:55,120
tasks can't be

310
00:12:55,839 --> 00:12:58,720
performed however even though we got a

311
00:12:58,720 --> 00:13:00,880
foothold the way

312
00:13:00,880 --> 00:13:03,279
in some cases things were performed it

313
00:13:03,279 --> 00:13:06,320
would trigger the adrs

314
00:13:06,320 --> 00:13:07,920
on post exploitation and this is

315
00:13:07,920 --> 00:13:10,399
something we need to keep in mind that

316
00:13:10,399 --> 00:13:12,399
okay we've got a foothold what do we do

317
00:13:12,399 --> 00:13:14,639
next how do we do it what is our context

318
00:13:14,639 --> 00:13:16,959
and how are we secure did we raise the

319
00:13:16,959 --> 00:13:19,200
score for some reason

320
00:13:19,200 --> 00:13:23,920
etc so uh we need unfortunately uh we

321
00:13:23,920 --> 00:13:25,600
didn't manage to complete the scenario

322
00:13:25,600 --> 00:13:26,800
with this one

323
00:13:26,800 --> 00:13:28,079
and uh

324
00:13:28,079 --> 00:13:29,120
we saw

325
00:13:29,120 --> 00:13:31,600
we learned things uh because we had

326
00:13:31,600 --> 00:13:35,040
diverse ways we had like uh

327
00:13:35,040 --> 00:13:38,160
many ways the adrs would detect uh

328
00:13:38,160 --> 00:13:41,360
for different things of this tool and

329
00:13:41,360 --> 00:13:44,480
on access in some cases or as i told you

330
00:13:44,480 --> 00:13:46,720
after some post exploitation tasks but

331
00:13:46,720 --> 00:13:48,959
we need to keep in mind that we need

332
00:13:48,959 --> 00:13:51,680
adaptability a holistic approach towards

333
00:13:51,680 --> 00:13:53,920
opsec and kill chains

334
00:13:53,920 --> 00:13:57,440
and uh stability this is something an

335
00:13:57,440 --> 00:13:59,360
operator good enough wouldn't be able to

336
00:13:59,360 --> 00:14:02,000
afford to lose in a real bank or raising

337
00:14:02,000 --> 00:14:04,320
the alarm as we will see later which

338
00:14:04,320 --> 00:14:06,800
could mess the operation

339
00:14:06,800 --> 00:14:08,079
so

340
00:14:08,079 --> 00:14:10,000
kabal strike

341
00:14:10,000 --> 00:14:11,920
the most well-known

342
00:14:11,920 --> 00:14:13,199
many

343
00:14:13,199 --> 00:14:15,279
much work done from the community many

344
00:14:15,279 --> 00:14:16,480
features

345
00:14:16,480 --> 00:14:17,440
now we

346
00:14:17,440 --> 00:14:20,880
the latest version at the experiments

347
00:14:20,880 --> 00:14:23,040
time was 4.4

348
00:14:23,040 --> 00:14:25,040
now cobblestrike would have to say that

349
00:14:25,040 --> 00:14:26,959
they do some great work on pushing

350
00:14:26,959 --> 00:14:30,000
updates and also some things were

351
00:14:30,000 --> 00:14:33,519
changed in general in help systems so uh

352
00:14:33,519 --> 00:14:36,000
we see a lot of potential to be coming

353
00:14:36,000 --> 00:14:37,360
again

354
00:14:37,360 --> 00:14:40,240
the top but it's still the norm for uh

355
00:14:40,240 --> 00:14:42,399
threat actors and the red teamers out

356
00:14:42,399 --> 00:14:43,680
there

357
00:14:43,680 --> 00:14:46,480
however we wanted to break the norm by

358
00:14:46,480 --> 00:14:48,320
exploring alternatives

359
00:14:48,320 --> 00:14:51,120
in this case we have now user-defined

360
00:14:51,120 --> 00:14:53,519
reflective loaders both

361
00:14:53,519 --> 00:14:55,519
reflective dlls

362
00:14:55,519 --> 00:14:58,320
we have various kits which we didn't use

363
00:14:58,320 --> 00:15:00,800
to a great extent because as you will

364
00:15:00,800 --> 00:15:03,279
see later the

365
00:15:03,279 --> 00:15:05,199
basically uh

366
00:15:05,199 --> 00:15:07,680
on touch on access kabul strike was

367
00:15:07,680 --> 00:15:10,800
killed by many traps of the adrs

368
00:15:10,800 --> 00:15:13,120
either format wise because of the shell

369
00:15:13,120 --> 00:15:15,360
code either behavior wise

370
00:15:15,360 --> 00:15:17,600
uh it was not something

371
00:15:17,600 --> 00:15:19,120
it's something that the companies

372
00:15:19,120 --> 00:15:21,120
invested a lot into

373
00:15:21,120 --> 00:15:22,800
and there are many ways to do this

374
00:15:22,800 --> 00:15:24,480
behaviorally

375
00:15:24,480 --> 00:15:26,800
from emulation many things

376
00:15:26,800 --> 00:15:28,639
uh memory inspection

377
00:15:28,639 --> 00:15:29,680
uh

378
00:15:29,680 --> 00:15:31,920
and we tried other vdrs apart from the

379
00:15:31,920 --> 00:15:33,680
two we

380
00:15:33,680 --> 00:15:36,160
tested above and we saw that if we

381
00:15:36,160 --> 00:15:37,519
didn't do

382
00:15:37,519 --> 00:15:39,920
much work on our own or would then use

383
00:15:39,920 --> 00:15:42,720
some kind of state zero or we didn't use

384
00:15:42,720 --> 00:15:43,759
some

385
00:15:43,759 --> 00:15:45,279
very

386
00:15:45,279 --> 00:15:47,440
specific configuration or loader

387
00:15:47,440 --> 00:15:50,560
specific uh

388
00:15:50,560 --> 00:15:51,680
methods

389
00:15:51,680 --> 00:15:54,480
and have a good op sec

390
00:15:54,480 --> 00:15:56,240
wise logic

391
00:15:56,240 --> 00:15:59,839
we would get caught by things by uh

392
00:15:59,839 --> 00:16:01,759
other edrs as well

393
00:16:01,759 --> 00:16:02,959
that

394
00:16:02,959 --> 00:16:06,160
are not so known some of them

395
00:16:06,160 --> 00:16:09,519
based on network stuff like uh network

396
00:16:09,519 --> 00:16:12,320
inspection and becoming patterns

397
00:16:12,320 --> 00:16:14,639
like

398
00:16:14,639 --> 00:16:16,240
many things

399
00:16:16,240 --> 00:16:17,279
like

400
00:16:17,279 --> 00:16:19,759
memory scanning

401
00:16:19,759 --> 00:16:24,160
behavior such as loading dlls etc so uh

402
00:16:24,160 --> 00:16:26,160
as you can see uh

403
00:16:26,160 --> 00:16:28,880
we can try to avoid some iocs but it's

404
00:16:28,880 --> 00:16:30,880
mostly up to the operator

405
00:16:30,880 --> 00:16:33,680
and in this case we will see a research

406
00:16:33,680 --> 00:16:37,040
from sophos in 2021 and kabul strike out

407
00:16:37,040 --> 00:16:38,279
of

408
00:16:38,279 --> 00:16:42,399
405 tools observed it was it represented

409
00:16:42,399 --> 00:16:43,360
the

410
00:16:43,360 --> 00:16:45,440
uh

411
00:16:45,440 --> 00:16:47,519
seven percent of it

412
00:16:47,519 --> 00:16:50,399
so it's rather

413
00:16:50,399 --> 00:16:51,680
a rather

414
00:16:51,680 --> 00:16:54,000
interesting

415
00:16:54,000 --> 00:16:55,759
statistic to this one

416
00:16:55,759 --> 00:16:57,920
so uh

417
00:16:57,920 --> 00:17:00,720
no this is not a blue screen

418
00:17:00,720 --> 00:17:02,930
in our case

419
00:17:02,930 --> 00:17:05,039
[Music]

420
00:17:05,039 --> 00:17:07,280
those features of cobblestrike like the

421
00:17:07,280 --> 00:17:10,480
kits etc were not very helpful

422
00:17:10,480 --> 00:17:14,319
but uh i already described uh what we

423
00:17:14,319 --> 00:17:16,480
wanted but uh what they have to say is

424
00:17:16,480 --> 00:17:18,480
that google strike is also

425
00:17:18,480 --> 00:17:20,720
much

426
00:17:21,839 --> 00:17:24,480
let's say

427
00:17:26,160 --> 00:17:27,679
configurable

428
00:17:27,679 --> 00:17:29,600
and if you decide there was an

429
00:17:29,600 --> 00:17:31,360
interesting article out there

430
00:17:31,360 --> 00:17:34,000
showing that if you sideload kabul

431
00:17:34,000 --> 00:17:36,240
strike into teams and also make the

432
00:17:36,240 --> 00:17:39,440
network behavior look similar to teams

433
00:17:39,440 --> 00:17:42,080
you would be able to evade some kind of

434
00:17:42,080 --> 00:17:43,360
inspection

435
00:17:43,360 --> 00:17:44,160
so

436
00:17:44,160 --> 00:17:45,919
kabul shark is a high quality product

437
00:17:45,919 --> 00:17:49,280
but unfortunately at this time uh

438
00:17:49,280 --> 00:17:52,320
it wasn't what we wanted and what we

439
00:17:52,320 --> 00:17:53,600
needed

440
00:17:53,600 --> 00:17:55,120
and uh

441
00:17:55,120 --> 00:17:57,280
and sometimes about the tools that are

442
00:17:57,280 --> 00:17:59,120
there there are very skill coders very

443
00:17:59,120 --> 00:18:03,039
still redeemers but in our case

444
00:18:03,039 --> 00:18:04,480
sometimes

445
00:18:04,480 --> 00:18:06,720
tools out there are not developed

446
00:18:06,720 --> 00:18:08,160
full-time by a company so this is

447
00:18:08,160 --> 00:18:11,280
something to keep in mind

448
00:18:11,919 --> 00:18:12,720
so

449
00:18:12,720 --> 00:18:14,559
havoc was created by a personal friend

450
00:18:14,559 --> 00:18:16,480
of mine it represents the other or

451
00:18:16,480 --> 00:18:17,520
unknown

452
00:18:17,520 --> 00:18:18,720
threats

453
00:18:18,720 --> 00:18:20,400
and

454
00:18:20,400 --> 00:18:22,480
in my opinion

455
00:18:22,480 --> 00:18:25,200
uh it's a very ambitious and very well

456
00:18:25,200 --> 00:18:28,559
designed code wise attempt we had some

457
00:18:28,559 --> 00:18:32,240
generic issues because this solution was

458
00:18:32,240 --> 00:18:34,000
created for the most

459
00:18:34,000 --> 00:18:37,760
of the adrs and not our niche

460
00:18:37,760 --> 00:18:40,799
thread landscape

461
00:18:41,200 --> 00:18:44,320
we managed we helped paul as a team uh

462
00:18:44,320 --> 00:18:45,280
we

463
00:18:45,280 --> 00:18:47,280
assisted in the development process and

464
00:18:47,280 --> 00:18:49,360
we created some generic

465
00:18:49,360 --> 00:18:51,520
uh edr

466
00:18:51,520 --> 00:18:54,799
and ops safety related features and we

467
00:18:54,799 --> 00:18:57,120
were able although the communications

468
00:18:57,120 --> 00:18:59,600
were limited now they're not because uh

469
00:18:59,600 --> 00:19:02,000
new uh listen new

470
00:19:02,000 --> 00:19:04,080
beginning options were added but at the

471
00:19:04,080 --> 00:19:06,720
time it was still at beta

472
00:19:06,720 --> 00:19:08,559
same went for nighthawk

473
00:19:08,559 --> 00:19:09,760
and

474
00:19:09,760 --> 00:19:13,360
we tried as much as we could to

475
00:19:13,360 --> 00:19:15,120
uh

476
00:19:15,120 --> 00:19:18,559
make this uh solution adaptable

477
00:19:18,559 --> 00:19:20,799
and we managed actually

478
00:19:20,799 --> 00:19:23,120
to use a solution that's like you've

479
00:19:23,120 --> 00:19:25,760
seen the movies a young person with a

480
00:19:25,760 --> 00:19:30,320
hoodie coding in the dark etc uh

481
00:19:30,320 --> 00:19:33,120
this is this managed to work really well

482
00:19:33,120 --> 00:19:35,760
and we managed to complete although with

483
00:19:35,760 --> 00:19:38,400
some more effort and some more trial and

484
00:19:38,400 --> 00:19:39,440
error

485
00:19:39,440 --> 00:19:42,799
and digging into the internals of stuff

486
00:19:42,799 --> 00:19:45,600
we managed to operate and this is some

487
00:19:45,600 --> 00:19:47,760
of the very interesting points of this

488
00:19:47,760 --> 00:19:49,039
research

489
00:19:49,039 --> 00:19:51,200
so oyabanda was a stage zero what this

490
00:19:51,200 --> 00:19:54,080
means is that it will make uh just some

491
00:19:54,080 --> 00:19:56,960
basic recon and execution tasks there

492
00:19:56,960 --> 00:20:00,160
was like uh ngoc integration go native

493
00:20:00,160 --> 00:20:01,360
reversal

494
00:20:01,360 --> 00:20:05,600
it used tcp dialer and uh goes way to

495
00:20:05,600 --> 00:20:07,440
execute system commands

496
00:20:07,440 --> 00:20:09,600
which was very helpful keylogging and

497
00:20:09,600 --> 00:20:13,120
discovery features it's not 100 percent

498
00:20:13,120 --> 00:20:14,720
stable always

499
00:20:14,720 --> 00:20:15,840
but that

500
00:20:15,840 --> 00:20:17,440
because it's a new product as well but

501
00:20:17,440 --> 00:20:19,039
the team uh

502
00:20:19,039 --> 00:20:21,919
tries as much as possible and they we

503
00:20:21,919 --> 00:20:24,080
have had like uh

504
00:20:24,080 --> 00:20:27,120
a significant amount of effort and

505
00:20:27,120 --> 00:20:30,480
growth in terms of product and

506
00:20:30,480 --> 00:20:32,799
product i mean as

507
00:20:32,799 --> 00:20:36,400
technology and improvement and learning

508
00:20:36,400 --> 00:20:37,440
uh

509
00:20:37,440 --> 00:20:39,039
with the team so

510
00:20:39,039 --> 00:20:42,000
it's a very interesting product uh they

511
00:20:42,000 --> 00:20:44,320
try to make it more and more stable they

512
00:20:44,320 --> 00:20:46,960
will change the code base soon from what

513
00:20:46,960 --> 00:20:50,400
i know uh thing is it's just a static

514
00:20:50,400 --> 00:20:52,880
and staged binary it may be limiting at

515
00:20:52,880 --> 00:20:55,120
some points you can turn it into shell

516
00:20:55,120 --> 00:20:57,520
code if you like with some kind of

517
00:20:57,520 --> 00:20:58,799
recreation

518
00:20:58,799 --> 00:21:02,400
of bootstrap reflective loader but uh

519
00:21:02,400 --> 00:21:04,880
this will be unrelated at this moment

520
00:21:04,880 --> 00:21:07,520
uh we managed due to this nature to do

521
00:21:07,520 --> 00:21:10,000
things and uh

522
00:21:10,000 --> 00:21:12,960
we will proceed to the next slide

523
00:21:12,960 --> 00:21:15,960
professor

524
00:21:22,720 --> 00:21:24,720
professor we can't hear you

525
00:21:24,720 --> 00:21:26,880
sorry

526
00:21:26,880 --> 00:21:28,720
the nice

527
00:21:28,720 --> 00:21:31,360
casualties that we have from streaming

528
00:21:31,360 --> 00:21:35,039
and from online meetings so

529
00:21:35,679 --> 00:21:38,960
there are several differences

530
00:21:38,960 --> 00:21:42,799
compared to let's say casual engagements

531
00:21:42,799 --> 00:21:46,639
first we have to note that

532
00:21:47,840 --> 00:21:49,840
we have two different solutions that are

533
00:21:49,840 --> 00:21:52,320
working

534
00:21:52,400 --> 00:21:54,159
rather differently

535
00:21:54,159 --> 00:21:55,600
um

536
00:21:55,600 --> 00:21:57,200
so

537
00:21:57,200 --> 00:21:59,200
the case of unhooking is not always an

538
00:21:59,200 --> 00:22:00,400
option

539
00:22:00,400 --> 00:22:02,640
in order to evade

540
00:22:02,640 --> 00:22:05,679
the defense mechanisms so for example

541
00:22:05,679 --> 00:22:08,320
fortinet is based on memory patterns

542
00:22:08,320 --> 00:22:10,840
and kernel based

543
00:22:10,840 --> 00:22:14,240
filtering so practically uncooking is

544
00:22:14,240 --> 00:22:16,240
not that easy

545
00:22:16,240 --> 00:22:18,240
and

546
00:22:18,240 --> 00:22:21,520
in the case of sentinel one like

547
00:22:21,520 --> 00:22:24,480
it also has some

548
00:22:24,480 --> 00:22:25,490
generic

549
00:22:25,490 --> 00:22:28,609
[Music]

550
00:22:29,200 --> 00:22:31,919
sorry cooking mechanism for uh in the

551
00:22:31,919 --> 00:22:34,799
kernel nevertheless it uh

552
00:22:34,799 --> 00:22:37,039
also tries to find

553
00:22:37,039 --> 00:22:39,520
uh low hanging fruits in the case of

554
00:22:39,520 --> 00:22:41,440
typical bypasses that

555
00:22:41,440 --> 00:22:44,080
an adversary would

556
00:22:44,080 --> 00:22:45,360
try to make

557
00:22:45,360 --> 00:22:46,559
but

558
00:22:46,559 --> 00:22:48,799
also let's say

559
00:22:48,799 --> 00:22:51,760
through the star rules that it has

560
00:22:51,760 --> 00:22:53,200
tries to

561
00:22:53,200 --> 00:22:56,320
find many bypasses

562
00:22:56,320 --> 00:22:58,240
here in the environment that we have

563
00:22:58,240 --> 00:22:59,840
recreated

564
00:22:59,840 --> 00:23:02,320
it is worth it to note that one mistake

565
00:23:02,320 --> 00:23:03,520
is enough

566
00:23:03,520 --> 00:23:05,039
in order to

567
00:23:05,039 --> 00:23:06,840
showcase

568
00:23:06,840 --> 00:23:11,120
that an attack is being

569
00:23:11,440 --> 00:23:14,480
has been launched the idea is that

570
00:23:14,480 --> 00:23:15,679
currently

571
00:23:15,679 --> 00:23:16,880
with

572
00:23:16,880 --> 00:23:18,960
all these mechanisms which are

573
00:23:18,960 --> 00:23:21,200
monitoring

574
00:23:21,200 --> 00:23:23,039
all these uh

575
00:23:23,039 --> 00:23:26,000
system requests uh all these system

576
00:23:26,000 --> 00:23:28,880
calls uh the network traffic etc

577
00:23:28,880 --> 00:23:30,000
uh

578
00:23:30,000 --> 00:23:32,159
operating in an opisec

579
00:23:32,159 --> 00:23:34,159
way is not that easy

580
00:23:34,159 --> 00:23:37,039
nevertheless it's mandatory because it

581
00:23:37,039 --> 00:23:39,120
will immediately show that

582
00:23:39,120 --> 00:23:41,039
the attacker is doing

583
00:23:41,039 --> 00:23:43,520
something

584
00:23:43,679 --> 00:23:46,320
malicious

585
00:23:48,080 --> 00:23:51,039
as a as i noted earlier

586
00:23:51,039 --> 00:23:53,520
the environment that we have created is

587
00:23:53,520 --> 00:23:54,880
very diverse

588
00:23:54,880 --> 00:23:58,880
meaning that its host has a different

589
00:23:58,880 --> 00:24:01,200
endpoint security mechanism so

590
00:24:01,200 --> 00:24:03,120
practically this means that whatever

591
00:24:03,120 --> 00:24:06,159
works in host a it doesn't necessarily

592
00:24:06,159 --> 00:24:07,679
mean that

593
00:24:07,679 --> 00:24:09,360
will work on host b

594
00:24:09,360 --> 00:24:10,159
so

595
00:24:10,159 --> 00:24:13,600
practically this means that

596
00:24:13,600 --> 00:24:16,240
in every hope that you make inside

597
00:24:16,240 --> 00:24:20,240
the network you need more

598
00:24:20,240 --> 00:24:21,840
you need to be more

599
00:24:21,840 --> 00:24:23,440
cautious because

600
00:24:23,440 --> 00:24:25,520
you need different tools and different

601
00:24:25,520 --> 00:24:28,000
methods

602
00:24:28,159 --> 00:24:30,159
something that

603
00:24:30,159 --> 00:24:33,120
was not pointed out is that as we said

604
00:24:33,120 --> 00:24:34,720
the

605
00:24:34,720 --> 00:24:36,480
experiments finished on april

606
00:24:36,480 --> 00:24:39,039
nevertheless they took

607
00:24:39,039 --> 00:24:42,240
several months in order to

608
00:24:42,240 --> 00:24:44,080
to be made and

609
00:24:44,080 --> 00:24:47,600
the main reason is that

610
00:24:47,600 --> 00:24:49,200
we had

611
00:24:49,200 --> 00:24:51,760
engagement with

612
00:24:51,760 --> 00:24:54,640
several of these vendors

613
00:24:54,640 --> 00:24:55,840
in order to

614
00:24:55,840 --> 00:24:57,120
report

615
00:24:57,120 --> 00:25:00,559
issues in order to report bags

616
00:25:00,559 --> 00:25:01,600
so that

617
00:25:01,600 --> 00:25:04,240
they will be passed

618
00:25:04,240 --> 00:25:07,279
and not make uh more or less

619
00:25:07,279 --> 00:25:08,240
a red

620
00:25:08,240 --> 00:25:12,320
or not a red team but uh

621
00:25:12,480 --> 00:25:14,400
yeah exactly

622
00:25:14,400 --> 00:25:16,400
uh more or less a guideline of what to

623
00:25:16,400 --> 00:25:19,120
do when you are

624
00:25:19,120 --> 00:25:21,600
facing a financial institution and how

625
00:25:21,600 --> 00:25:24,880
to penetrate no that was not the case so

626
00:25:24,880 --> 00:25:27,200
we responsibly disclose issues that we

627
00:25:27,200 --> 00:25:29,039
found

628
00:25:29,039 --> 00:25:31,360
so that

629
00:25:31,360 --> 00:25:33,360
the whole ecosystem is

630
00:25:33,360 --> 00:25:35,760
secure

631
00:25:35,840 --> 00:25:36,720
it's

632
00:25:36,720 --> 00:25:39,200
worth noting that the traps of both

633
00:25:39,200 --> 00:25:41,279
solutions are quite innovative because

634
00:25:41,279 --> 00:25:43,039
in the case of sentinel one there is a

635
00:25:43,039 --> 00:25:45,200
drop to cover it up to cover a trap and

636
00:25:45,200 --> 00:25:47,440
we had the chance to beta test many of

637
00:25:47,440 --> 00:25:50,799
those traps in during the scenario uh

638
00:25:50,799 --> 00:25:52,720
before they were ready for production

639
00:25:52,720 --> 00:25:57,360
and also in the case of 40 dr uh

640
00:25:57,360 --> 00:25:59,679
we were uh

641
00:25:59,679 --> 00:26:01,840
we had the chance to

642
00:26:01,840 --> 00:26:04,720
also check stuff and see how the

643
00:26:04,720 --> 00:26:06,559
real-time memory

644
00:26:06,559 --> 00:26:08,799
structure inspection works and it's not

645
00:26:08,799 --> 00:26:11,440
like casual scanning it's how

646
00:26:11,440 --> 00:26:13,279
uh shellcode for example would be

647
00:26:13,279 --> 00:26:16,960
different than a valid pe and if there

648
00:26:16,960 --> 00:26:18,159
would be

649
00:26:18,159 --> 00:26:20,080
like uh

650
00:26:20,080 --> 00:26:22,240
no normal

651
00:26:22,240 --> 00:26:25,240
uh

652
00:26:25,440 --> 00:26:27,679
normal behaviors

653
00:26:27,679 --> 00:26:28,880
so

654
00:26:28,880 --> 00:26:31,120
um

655
00:26:33,360 --> 00:26:36,799
from how they look in memory from those

656
00:26:36,799 --> 00:26:38,640
there's a difference of how things will

657
00:26:38,640 --> 00:26:40,960
look in memory and this is hard to avoid

658
00:26:40,960 --> 00:26:45,039
so some of the basic ttps are uh some

659
00:26:45,039 --> 00:26:46,880
excel files

660
00:26:46,880 --> 00:26:50,080
uh dll files with a specific uh

661
00:26:50,080 --> 00:26:52,799
icon which is very tempting to click and

662
00:26:52,799 --> 00:26:54,240
a specific expert that will launch

663
00:26:54,240 --> 00:26:56,880
specific code customize injections like

664
00:26:56,880 --> 00:26:57,919
uh

665
00:26:57,919 --> 00:27:00,480
dll hollowing which will patch the

666
00:27:00,480 --> 00:27:02,159
address of entry point with some kind of

667
00:27:02,159 --> 00:27:03,600
shell code or

668
00:27:03,600 --> 00:27:04,840
we will try

669
00:27:04,840 --> 00:27:08,559
to like

670
00:27:11,360 --> 00:27:12,720
blend

671
00:27:12,720 --> 00:27:15,360
several injection techniques or objects

672
00:27:15,360 --> 00:27:16,240
say

673
00:27:16,240 --> 00:27:19,279
the techniques like uh where we inject

674
00:27:19,279 --> 00:27:21,760
and what we inject and how do we do this

675
00:27:21,760 --> 00:27:24,480
msi files are well known installer files

676
00:27:24,480 --> 00:27:27,520
we can add actions that will include

677
00:27:27,520 --> 00:27:30,720
persistence like adding registry keys

678
00:27:30,720 --> 00:27:33,120
services blah blah whatever this could

679
00:27:33,120 --> 00:27:36,159
mean execute commands run our binaries

680
00:27:36,159 --> 00:27:38,240
use it for dll side loading which we

681
00:27:38,240 --> 00:27:40,559
will mention later whether it's a loader

682
00:27:40,559 --> 00:27:43,120
or a

683
00:27:43,840 --> 00:27:46,000
static binder it's a good way to blend

684
00:27:46,000 --> 00:27:49,279
in with an application so privileged

685
00:27:49,279 --> 00:27:51,039
driver based loading and vulnerable

686
00:27:51,039 --> 00:27:53,440
drive abuse we try to abuse other

687
00:27:53,440 --> 00:27:55,200
exploitable drivers that may expose for

688
00:27:55,200 --> 00:27:57,440
example in ioctl that we can take

689
00:27:57,440 --> 00:27:59,200
advantage of and

690
00:27:59,200 --> 00:28:00,640
do or

691
00:28:00,640 --> 00:28:04,399
execute our code through this driver or

692
00:28:04,399 --> 00:28:06,320
impair the defenses

693
00:28:06,320 --> 00:28:08,559
an example are anti-root key tools which

694
00:28:08,559 --> 00:28:10,720
you can use for example to load the

695
00:28:10,720 --> 00:28:13,200
driver

696
00:28:14,080 --> 00:28:17,440
do whatever you want to some extent uh

697
00:28:17,440 --> 00:28:19,440
in the system from the journal level

698
00:28:19,440 --> 00:28:20,960
disable the av

699
00:28:20,960 --> 00:28:24,640
uh maybe some shadowing uh as there are

700
00:28:24,640 --> 00:28:27,279
in internet cafes you can use such tools

701
00:28:27,279 --> 00:28:29,440
to evade shadowing

702
00:28:29,440 --> 00:28:32,320
and see the coin miners the employees

703
00:28:32,320 --> 00:28:34,720
have planted on the pcs

704
00:28:34,720 --> 00:28:36,799
this is how i get my free coffee when i

705
00:28:36,799 --> 00:28:39,520
go to the internet

706
00:28:40,080 --> 00:28:41,679
so

707
00:28:41,679 --> 00:28:44,480
i i never uh

708
00:28:44,480 --> 00:28:46,559
told anything about this snitches get

709
00:28:46,559 --> 00:28:48,240
stitches

710
00:28:48,240 --> 00:28:50,799
but in any case uh we tried to use

711
00:28:50,799 --> 00:28:53,279
customized vendor specific spoofing and

712
00:28:53,279 --> 00:28:55,760
bug abuse techniques that we would

713
00:28:55,760 --> 00:28:57,600
things we would do

714
00:28:57,600 --> 00:29:00,000
from the architecture of the solution

715
00:29:00,000 --> 00:29:01,360
itself

716
00:29:01,360 --> 00:29:04,320
to turn it around and make the edr hit

717
00:29:04,320 --> 00:29:05,520
itself

718
00:29:05,520 --> 00:29:07,919
so credential theft we could use drivers

719
00:29:07,919 --> 00:29:09,840
again like wintmem to dump the physical

720
00:29:09,840 --> 00:29:11,679
memory and parse it and get credentials

721
00:29:11,679 --> 00:29:14,720
reflective loading and loading of tools

722
00:29:14,720 --> 00:29:16,799
including clr and ps

723
00:29:16,799 --> 00:29:18,880
power cell tools and reflection are

724
00:29:18,880 --> 00:29:21,120
things that we tried to see how they

725
00:29:21,120 --> 00:29:22,960
would behave

726
00:29:22,960 --> 00:29:25,440
in such a scenario where we load the clr

727
00:29:25,440 --> 00:29:27,520
what's the process if it's excel through

728
00:29:27,520 --> 00:29:30,080
an xll for example it's easier because

729
00:29:30,080 --> 00:29:32,880
uh excel will be will make network

730
00:29:32,880 --> 00:29:34,320
connection which is

731
00:29:34,320 --> 00:29:37,360
which is better for coverage and also

732
00:29:37,360 --> 00:29:40,559
uh it has the clr loaded by default

733
00:29:40,559 --> 00:29:42,960
so this is a quick meter mapping

734
00:29:42,960 --> 00:29:44,880
professor

735
00:29:44,880 --> 00:29:46,799
yes so

736
00:29:46,799 --> 00:29:49,360
practically we try to map here

737
00:29:49,360 --> 00:29:52,080
what we consider

738
00:29:52,080 --> 00:29:54,399
that has already been made by the

739
00:29:54,399 --> 00:29:56,559
attacker in green

740
00:29:56,559 --> 00:30:00,159
and more or less in red we highlight

741
00:30:00,159 --> 00:30:02,480
what are the capabilities that

742
00:30:02,480 --> 00:30:04,880
we have developed

743
00:30:04,880 --> 00:30:06,480
in terms of research development in

744
00:30:06,480 --> 00:30:10,480
asian laksa execution et cetera

745
00:30:10,480 --> 00:30:12,559
i hope that this is readable because

746
00:30:12,559 --> 00:30:13,520
it's

747
00:30:13,520 --> 00:30:17,679
far too many things that are listed here

748
00:30:17,679 --> 00:30:19,520
okay

749
00:30:19,520 --> 00:30:22,640
okay yes i will proceed so this is the

750
00:30:22,640 --> 00:30:24,320
offensive scenario review you can see

751
00:30:24,320 --> 00:30:25,919
some of the screenshots and proof of

752
00:30:25,919 --> 00:30:27,919
concepts this is sentinel one's

753
00:30:27,919 --> 00:30:30,880
timelines uh which are pretty cool i

754
00:30:30,880 --> 00:30:31,840
guess

755
00:30:31,840 --> 00:30:33,919
same goes for fortinet

756
00:30:33,919 --> 00:30:36,480
forensics they give you queries and you

757
00:30:36,480 --> 00:30:39,120
can attribute things to an actor but in

758
00:30:39,120 --> 00:30:41,760
depth like what did you find what kind

759
00:30:41,760 --> 00:30:44,240
of attack did you find how if you find

760
00:30:44,240 --> 00:30:47,360
this kind of ioc notify me about this so

761
00:30:47,360 --> 00:30:48,880
here we can see

762
00:30:48,880 --> 00:30:50,640
a casual process injection with a new

763
00:30:50,640 --> 00:30:52,640
thread creation

764
00:30:52,640 --> 00:30:54,320
we can see execution of tools through

765
00:30:54,320 --> 00:30:56,720
night hockey we can see how the panel

766
00:30:56,720 --> 00:30:58,080
worked and

767
00:30:58,080 --> 00:30:59,679
how we managed to

768
00:30:59,679 --> 00:31:01,360
do some credential theft through

769
00:31:01,360 --> 00:31:03,600
keylogging and credential theft

770
00:31:03,600 --> 00:31:05,679
techniques in general

771
00:31:05,679 --> 00:31:08,640
how we execute tools and how we disabled

772
00:31:08,640 --> 00:31:12,720
the adr so here uh clr becomes for

773
00:31:12,720 --> 00:31:14,399
example well loaded in processes that

774
00:31:14,399 --> 00:31:16,480
indeed use such technology this is a

775
00:31:16,480 --> 00:31:17,519
good

776
00:31:17,519 --> 00:31:20,480
we need to take into account topsec so

777
00:31:20,480 --> 00:31:24,320
if i want to beacon through win http

778
00:31:24,320 --> 00:31:27,200
uh i will use a browser for example to

779
00:31:27,200 --> 00:31:29,679
eject into because it would be abnormal

780
00:31:29,679 --> 00:31:33,200
loading this uh

781
00:31:33,200 --> 00:31:36,880
this tool for example this dll inside

782
00:31:36,880 --> 00:31:38,720
another uh

783
00:31:38,720 --> 00:31:40,240
whatever process

784
00:31:40,240 --> 00:31:42,640
so we need to be careful how we look

785
00:31:42,640 --> 00:31:45,200
both on the endpoint and on the network

786
00:31:45,200 --> 00:31:47,840
uh there's diverse tooling we use

787
00:31:47,840 --> 00:31:50,720
diverse tools to achieve the same things

788
00:31:50,720 --> 00:31:52,000
we try to

789
00:31:52,000 --> 00:31:54,399
use the kernel as much as possible and

790
00:31:54,399 --> 00:31:56,559
do things like impairing the defenses so

791
00:31:56,559 --> 00:31:58,320
we could then launch launch cobble

792
00:31:58,320 --> 00:31:59,600
strike

793
00:31:59,600 --> 00:32:01,120
a driver

794
00:32:01,120 --> 00:32:03,279
to

795
00:32:03,360 --> 00:32:07,120
and exploit also a navy solution to

796
00:32:07,120 --> 00:32:09,120
through a privileged

797
00:32:09,120 --> 00:32:12,480
scenario to inject into processes

798
00:32:12,480 --> 00:32:14,880
uh into the installing like a three av

799
00:32:14,880 --> 00:32:17,200
from the internet whatever you will find

800
00:32:17,200 --> 00:32:19,440
many and injecting into that protected

801
00:32:19,440 --> 00:32:21,840
process and try to avoid

802
00:32:21,840 --> 00:32:25,200
some of the traps this way of uh

803
00:32:25,200 --> 00:32:27,120
and some of the monitoring by other

804
00:32:27,120 --> 00:32:29,519
tools and the aunties the response is

805
00:32:29,519 --> 00:32:32,799
like uh things like uh in-memory masking

806
00:32:32,799 --> 00:32:34,960
of

807
00:32:37,200 --> 00:32:39,840
the nighthawk presence and things you

808
00:32:39,840 --> 00:32:41,840
will see that you will not always be

809
00:32:41,840 --> 00:32:43,360
able to find it through tools like

810
00:32:43,360 --> 00:32:45,120
moneta p shave

811
00:32:45,120 --> 00:32:46,000
or

812
00:32:46,000 --> 00:32:50,159
even some commercial tools

813
00:32:50,480 --> 00:32:52,799
so this is the attack timeline we got

814
00:32:52,799 --> 00:32:56,960
initial access very quickly uh from

815
00:32:56,960 --> 00:32:59,679
via email from a categorized domain we

816
00:32:59,679 --> 00:33:00,640
had

817
00:33:00,640 --> 00:33:02,720
uh we tried

818
00:33:02,720 --> 00:33:05,039
to use msi exec combined with around the

819
00:33:05,039 --> 00:33:07,600
lll32 we used excel we used side loading

820
00:33:07,600 --> 00:33:09,440
into whatsapp and injecting into that

821
00:33:09,440 --> 00:33:11,200
free av

822
00:33:11,200 --> 00:33:14,640
we also then dropped a

823
00:33:14,640 --> 00:33:16,640
shortcut which would trigger an

824
00:33:16,640 --> 00:33:19,200
authentication to our farmer webdav

825
00:33:19,200 --> 00:33:21,760
server to steal credentials and we would

826
00:33:21,760 --> 00:33:25,120
impersonate the user do gpo abuse

827
00:33:25,120 --> 00:33:27,760
use tools like standing then make our

828
00:33:27,760 --> 00:33:29,840
user and not mean try

829
00:33:29,840 --> 00:33:31,760
do all these sorts of active directory

830
00:33:31,760 --> 00:33:34,320
casual things casual exploitation things

831
00:33:34,320 --> 00:33:37,519
so then we try to laterally move

832
00:33:37,519 --> 00:33:40,480
sox proxies

833
00:33:41,200 --> 00:33:45,120
and we tried to execute the payload

834
00:33:45,120 --> 00:33:47,760
from a share or like launching the

835
00:33:47,760 --> 00:33:50,960
payload in some way

836
00:33:51,120 --> 00:33:53,840
we extract credentials with the wimpy

837
00:33:53,840 --> 00:33:56,799
mmm as i told you before we used casual

838
00:33:56,799 --> 00:34:00,320
things like sharp exec wmi or winrm to

839
00:34:00,320 --> 00:34:02,159
move through boxes

840
00:34:02,159 --> 00:34:04,320
uh we tried the internal monologue

841
00:34:04,320 --> 00:34:06,320
without the register modifications for

842
00:34:06,320 --> 00:34:07,120
anti

843
00:34:07,120 --> 00:34:10,399
downgrade this comes to the things we

844
00:34:10,399 --> 00:34:12,560
need to do when we want to avoid

845
00:34:12,560 --> 00:34:14,639
some certain footprint and we want to

846
00:34:14,639 --> 00:34:15,918
control

847
00:34:15,918 --> 00:34:17,040
the

848
00:34:17,040 --> 00:34:18,239
actual

849
00:34:18,239 --> 00:34:19,359
footprint

850
00:34:19,359 --> 00:34:21,440
of our attacks and tools

851
00:34:21,440 --> 00:34:24,159
so again we tried to jump uh on the

852
00:34:24,159 --> 00:34:26,480
final uh

853
00:34:26,480 --> 00:34:28,960
server we used the now fixed vendor

854
00:34:28,960 --> 00:34:30,960
specific bug which would blind the

855
00:34:30,960 --> 00:34:34,800
specific context of processes for

856
00:34:34,800 --> 00:34:37,599
uh the solution we didn't have to face

857
00:34:37,599 --> 00:34:40,960
fa however there are recent articles and

858
00:34:40,960 --> 00:34:42,960
older articles even in finance feature

859
00:34:42,960 --> 00:34:44,320
you can see that you can steal the

860
00:34:44,320 --> 00:34:46,239
authentication tokens

861
00:34:46,239 --> 00:34:48,639
and bypass this and there are also tools

862
00:34:48,639 --> 00:34:50,399
you could use for something like fishing

863
00:34:50,399 --> 00:34:52,480
for that like modliska it's not

864
00:34:52,480 --> 00:34:56,719
something that's undoable but 2fa uh

865
00:34:56,719 --> 00:34:59,599
is always a good option to have

866
00:34:59,599 --> 00:35:03,119
this control is out of scope

867
00:35:03,119 --> 00:35:07,040
so what's next professor

868
00:35:07,040 --> 00:35:09,680
so practically we have

869
00:35:09,680 --> 00:35:12,960
contacted both senate one and fortinet

870
00:35:12,960 --> 00:35:15,680
teams in order to

871
00:35:15,680 --> 00:35:17,280
notify them of

872
00:35:17,280 --> 00:35:19,760
let's say the important issues that we

873
00:35:19,760 --> 00:35:22,640
have found in the resolution

874
00:35:22,640 --> 00:35:24,079
whether this has to do with

875
00:35:24,079 --> 00:35:27,119
architectural misses whether this has to

876
00:35:27,119 --> 00:35:31,680
do with bugs or issues that we found

877
00:35:31,680 --> 00:35:34,880
misses in their detection

878
00:35:34,880 --> 00:35:36,320
or let's say

879
00:35:36,320 --> 00:35:40,400
gaps in the storyline that they created

880
00:35:40,960 --> 00:35:42,560
practically

881
00:35:42,560 --> 00:35:45,599
both teams have been quite responsive in

882
00:35:45,599 --> 00:35:47,200
patching their systems

883
00:35:47,200 --> 00:35:50,079
and providing

884
00:35:50,079 --> 00:35:52,240
patches to their customers so that they

885
00:35:52,240 --> 00:35:54,480
are more secure

886
00:35:54,480 --> 00:35:55,390
so

887
00:35:55,390 --> 00:35:56,720
[Music]

888
00:35:56,720 --> 00:36:00,560
in few days i believe that

889
00:36:00,560 --> 00:36:02,400
if not already

890
00:36:02,400 --> 00:36:05,040
because we are currently discussing with

891
00:36:05,040 --> 00:36:06,800
sentiment one

892
00:36:06,800 --> 00:36:07,839
in

893
00:36:07,839 --> 00:36:10,320
terms of providing

894
00:36:10,320 --> 00:36:12,480
a documentation of

895
00:36:12,480 --> 00:36:14,880
these experiments online

896
00:36:14,880 --> 00:36:16,079
uh

897
00:36:16,079 --> 00:36:18,880
there will be an

898
00:36:19,040 --> 00:36:20,160
article

899
00:36:20,160 --> 00:36:23,040
yeah exactly a quote or an article

900
00:36:23,040 --> 00:36:24,560
from me and george

901
00:36:24,560 --> 00:36:27,040
regarding this experiment and will be

902
00:36:27,040 --> 00:36:30,000
hosted on their blog

903
00:36:30,000 --> 00:36:31,760
there is also the possibility of finding

904
00:36:31,760 --> 00:36:32,960
a

905
00:36:32,960 --> 00:36:36,240
similar article from fortinet

906
00:36:36,240 --> 00:36:38,400
however we are waiting for the response

907
00:36:38,400 --> 00:36:40,640
from the marketing team

908
00:36:40,640 --> 00:36:41,760
so

909
00:36:41,760 --> 00:36:43,839
a big thanks to

910
00:36:43,839 --> 00:36:46,400
all the team from mdsec

911
00:36:46,400 --> 00:36:50,480
and to dominic peter

912
00:36:50,480 --> 00:36:52,400
modexby and

913
00:36:52,400 --> 00:36:54,640
matthew

914
00:36:54,640 --> 00:36:57,680
george and of course my friends paul

915
00:36:57,680 --> 00:37:00,640
lungur he has a great future ahead and

916
00:37:00,640 --> 00:37:03,119
the redcoat labs team

917
00:37:03,119 --> 00:37:04,960
thank you for your

918
00:37:04,960 --> 00:37:07,440
patience these are our contact details

919
00:37:07,440 --> 00:37:11,040
and we hope to hear from you soon

920
00:37:11,040 --> 00:37:14,320
have a nice day

