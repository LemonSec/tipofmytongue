1
00:00:05,800 --> 00:00:10,420
[Music]

2
00:00:12,240 --> 00:00:15,519
hi everyone my name is sam stepanyan

3
00:00:15,519 --> 00:00:17,680
i'm a norwasp chapter leader and owas

4
00:00:17,680 --> 00:00:20,640
nadaka project co-leader i work in

5
00:00:20,640 --> 00:00:22,240
london in the

6
00:00:22,240 --> 00:00:23,760
financial services

7
00:00:23,760 --> 00:00:25,680
sector as an application security

8
00:00:25,680 --> 00:00:27,199
consultant

9
00:00:27,199 --> 00:00:30,080
today i'm going to talk to you about the

10
00:00:30,080 --> 00:00:32,640
owasp attacker project

11
00:00:32,640 --> 00:00:33,920
so um

12
00:00:33,920 --> 00:00:36,320
a few more words about me uh

13
00:00:36,320 --> 00:00:38,079
apart from being a noaa's london chapter

14
00:00:38,079 --> 00:00:40,960
leader i also lead the owas chat chapter

15
00:00:40,960 --> 00:00:43,040
committee where we help

16
00:00:43,040 --> 00:00:45,200
all of us chapters to succeed to be

17
00:00:45,200 --> 00:00:47,920
healthy to be active

18
00:00:47,920 --> 00:00:49,840
i originally come from the software

19
00:00:49,840 --> 00:00:51,440
development background i'm an

20
00:00:51,440 --> 00:00:53,039
application developer

21
00:00:53,039 --> 00:00:54,160
and

22
00:00:54,160 --> 00:00:56,480
i'm an application security guy and i am

23
00:00:56,480 --> 00:00:59,920
a defender so why am i presenting a talk

24
00:00:59,920 --> 00:01:02,800
about a tool which consists of two words

25
00:01:02,800 --> 00:01:04,959
network and attacker well i am a

26
00:01:04,959 --> 00:01:07,439
defender and an application security guy

27
00:01:07,439 --> 00:01:10,640
i had a bit of a history with um

28
00:01:10,640 --> 00:01:13,119
obasan attacker because i didn't know

29
00:01:13,119 --> 00:01:15,360
about this tool until i was pinged by

30
00:01:15,360 --> 00:01:18,080
the original uh netaka project leaders

31
00:01:18,080 --> 00:01:22,000
in 2018 where they asked me and um

32
00:01:22,000 --> 00:01:24,240
oh as london chapter co-leader dr greg

33
00:01:24,240 --> 00:01:28,159
fracos to go to black cat europe 2018

34
00:01:28,159 --> 00:01:30,560
conference and present this project

35
00:01:30,560 --> 00:01:32,640
because the

36
00:01:32,640 --> 00:01:34,880
nethacka project leaders were unable to

37
00:01:34,880 --> 00:01:37,200
travel to london at that time

38
00:01:37,200 --> 00:01:38,159
so

39
00:01:38,159 --> 00:01:40,320
myself and dr greg frackos we had to

40
00:01:40,320 --> 00:01:43,280
learn this tool overnight uh on the zoom

41
00:01:43,280 --> 00:01:44,720
session and we

42
00:01:44,720 --> 00:01:46,880
absolutely absolutely loved it

43
00:01:46,880 --> 00:01:48,720
we knew very very little about this tool

44
00:01:48,720 --> 00:01:50,240
because it was a brand new tool back

45
00:01:50,240 --> 00:01:50,960
then

46
00:01:50,960 --> 00:01:52,960
we saw it appearing on the list of os

47
00:01:52,960 --> 00:01:55,280
projects but we didn't really know what

48
00:01:55,280 --> 00:01:57,680
it is and once we learned what it is we

49
00:01:57,680 --> 00:01:59,680
were really really happy to go and

50
00:01:59,680 --> 00:02:03,439
present it at uh black cat europe um

51
00:02:03,439 --> 00:02:06,240
2018 in london and then suddenly this

52
00:02:06,240 --> 00:02:09,840
happened we had huge crowds of season

53
00:02:09,840 --> 00:02:12,319
penetration testers um software

54
00:02:12,319 --> 00:02:15,280
developers security engineers um even

55
00:02:15,280 --> 00:02:17,599
some information security managers

56
00:02:17,599 --> 00:02:20,000
gathering around our stand at the black

57
00:02:20,000 --> 00:02:22,560
cat europe arsenal booth watching the

58
00:02:22,560 --> 00:02:24,959
presentation of the tool so i said okay

59
00:02:24,959 --> 00:02:27,520
this is good people like the tool so um

60
00:02:27,520 --> 00:02:29,920
i became a co-leader of uh was the

61
00:02:29,920 --> 00:02:32,160
tucker project and proposed that it

62
00:02:32,160 --> 00:02:34,400
would be also presented

63
00:02:34,400 --> 00:02:36,879
the following year in 2019

64
00:02:36,879 --> 00:02:38,959
and then suddenly this happened even

65
00:02:38,959 --> 00:02:41,200
bigger crowds uh gathered around

66
00:02:41,200 --> 00:02:43,040
watching this tool and absolutely

67
00:02:43,040 --> 00:02:45,840
everybody loved this tool but why what

68
00:02:45,840 --> 00:02:48,400
is it about obasa attacker that um

69
00:02:48,400 --> 00:02:50,400
everybody um

70
00:02:50,400 --> 00:02:53,760
is so uh intrigued about so ova's

71
00:02:53,760 --> 00:02:56,480
attacker first of all is an open source

72
00:02:56,480 --> 00:02:58,879
software tool just like all of us

73
00:02:58,879 --> 00:03:01,760
projects uh and os the attacker's um

74
00:03:01,760 --> 00:03:03,760
goal is to assist with penetration

75
00:03:03,760 --> 00:03:06,239
testing by automating

76
00:03:06,239 --> 00:03:08,640
tasks such as information gathering and

77
00:03:08,640 --> 00:03:10,560
vulnerability scanning

78
00:03:10,560 --> 00:03:12,800
because this tool is written in 100

79
00:03:12,800 --> 00:03:15,040
python it doesn't require any external

80
00:03:15,040 --> 00:03:16,959
tools to be present in the operating

81
00:03:16,959 --> 00:03:19,760
system and it can be run on windows

82
00:03:19,760 --> 00:03:22,239
linux or mac os

83
00:03:22,239 --> 00:03:23,040
um

84
00:03:23,040 --> 00:03:24,560
very important thing to mention about

85
00:03:24,560 --> 00:03:26,720
austin attacker that it is actually

86
00:03:26,720 --> 00:03:29,040
written and enhanced by students

87
00:03:29,040 --> 00:03:31,280
who participated in initiative called

88
00:03:31,280 --> 00:03:33,280
google summer of code and if you don't

89
00:03:33,280 --> 00:03:35,200
know what google summer of code is it is

90
00:03:35,200 --> 00:03:38,319
a great initiative uh by google which is

91
00:03:38,319 --> 00:03:40,640
running every year and that is

92
00:03:40,640 --> 00:03:42,799
essentially a paid internship for

93
00:03:42,799 --> 00:03:45,040
students to select an open source

94
00:03:45,040 --> 00:03:47,920
project of their liking and apply to

95
00:03:47,920 --> 00:03:50,400
work on that project during the summer

96
00:03:50,400 --> 00:03:53,519
break and this is how

97
00:03:53,519 --> 00:03:56,400
we at always benefited

98
00:03:56,400 --> 00:03:59,040
by having students to

99
00:03:59,040 --> 00:04:01,360
uh help us to enhance the tool and

100
00:04:01,360 --> 00:04:02,720
actually it's not just the august

101
00:04:02,720 --> 00:04:05,519
attacker there are many other owasp um

102
00:04:05,519 --> 00:04:06,879
projects

103
00:04:06,879 --> 00:04:10,799
like owasp for example or orwas jew shop

104
00:04:10,799 --> 00:04:13,120
which benefited from

105
00:04:13,120 --> 00:04:15,360
google summer of code and it's not just

106
00:04:15,360 --> 00:04:17,839
oas which participates many other

107
00:04:17,839 --> 00:04:19,680
open source organizations do as well so

108
00:04:19,680 --> 00:04:21,759
if you're a student watching this or you

109
00:04:21,759 --> 00:04:24,160
know any students who you think might be

110
00:04:24,160 --> 00:04:26,000
interested in spending their summer

111
00:04:26,000 --> 00:04:28,560
break working on open source

112
00:04:28,560 --> 00:04:31,440
and gathering some real experience um

113
00:04:31,440 --> 00:04:33,199
please do check out google summer of

114
00:04:33,199 --> 00:04:36,160
code it usually runs from march every

115
00:04:36,160 --> 00:04:39,040
year until the end of august

116
00:04:39,040 --> 00:04:41,600
so what is ova's attacker you can think

117
00:04:41,600 --> 00:04:44,240
of ova's attacker as a swiss army knife

118
00:04:44,240 --> 00:04:45,520
kind of tool

119
00:04:45,520 --> 00:04:48,000
because just like a swiss army knife it

120
00:04:48,000 --> 00:04:49,759
is a collection of tools

121
00:04:49,759 --> 00:04:52,880
it has a modular structure

122
00:04:52,880 --> 00:04:54,880
it's relatively easy to create your own

123
00:04:54,880 --> 00:04:57,120
modules we recently changed how you

124
00:04:57,120 --> 00:04:59,440
write your modules from python to yaml i

125
00:04:59,440 --> 00:05:01,759
will talk about this a little bit later

126
00:05:01,759 --> 00:05:03,440
it is a fast performing tool because

127
00:05:03,440 --> 00:05:05,120
it's using multi-threading which you can

128
00:05:05,120 --> 00:05:06,400
control it's using python's

129
00:05:06,400 --> 00:05:08,320
multi-threading model

130
00:05:08,320 --> 00:05:09,520
important thing is that it has

131
00:05:09,520 --> 00:05:11,759
customizable profiles which are bundles

132
00:05:11,759 --> 00:05:14,400
of modules focused on a specific task so

133
00:05:14,400 --> 00:05:16,080
if you can imagine you can pull out

134
00:05:16,080 --> 00:05:18,000
several blades out of your swiss army

135
00:05:18,000 --> 00:05:20,479
knife uh to perform a specific task to

136
00:05:20,479 --> 00:05:23,360
make it uh quicker or more efficient and

137
00:05:23,360 --> 00:05:25,039
of course the most important thing is

138
00:05:25,039 --> 00:05:27,360
automation because you can automate and

139
00:05:27,360 --> 00:05:30,320
run this tool from the command line

140
00:05:30,320 --> 00:05:31,520
so um

141
00:05:31,520 --> 00:05:34,080
a few other bits about osne attacker

142
00:05:34,080 --> 00:05:36,560
that it is not an officially released

143
00:05:36,560 --> 00:05:38,560
tool yet it's not even in beta it's

144
00:05:38,560 --> 00:05:40,639
still in research and development phase

145
00:05:40,639 --> 00:05:42,720
so the current versions are zero zero

146
00:05:42,720 --> 00:05:45,360
two and zero zero three uh and we're

147
00:05:45,360 --> 00:05:47,520
always looking for more contributors i

148
00:05:47,520 --> 00:05:49,759
will um tell you how to contribute to

149
00:05:49,759 --> 00:05:51,120
the project at the end of my

150
00:05:51,120 --> 00:05:53,680
presentation however what is great about

151
00:05:53,680 --> 00:05:54,400
uh

152
00:05:54,400 --> 00:05:56,720
taka that it is usable right now and it

153
00:05:56,720 --> 00:05:58,319
is a great tool which already has a

154
00:05:58,319 --> 00:06:00,479
command line interface web user

155
00:06:00,479 --> 00:06:03,520
interface an api report generator it

156
00:06:03,520 --> 00:06:05,680
also has multigo transform so people who

157
00:06:05,680 --> 00:06:08,800
use multigo which is a great

158
00:06:08,800 --> 00:06:10,720
investigation tool available for example

159
00:06:10,720 --> 00:06:13,680
in kali linux and netaca currently has

160
00:06:13,680 --> 00:06:16,319
over 70 modules

161
00:06:16,319 --> 00:06:17,440
so

162
00:06:17,440 --> 00:06:20,400
you can find oasm attacker on the main

163
00:06:20,400 --> 00:06:23,039
owasp.org website under projects this is

164
00:06:23,039 --> 00:06:24,319
the url

165
00:06:24,319 --> 00:06:25,840
where you can

166
00:06:25,840 --> 00:06:27,600
learn about the project and see some

167
00:06:27,600 --> 00:06:28,400
quick

168
00:06:28,400 --> 00:06:30,800
demonstration there

169
00:06:30,800 --> 00:06:32,880
important bit about documentation that

170
00:06:32,880 --> 00:06:36,319
we use the wiki part on the github so if

171
00:06:36,319 --> 00:06:37,840
you would like to read the documentation

172
00:06:37,840 --> 00:06:41,039
please click on the wiki button once you

173
00:06:41,039 --> 00:06:42,720
visit the uh

174
00:06:42,720 --> 00:06:45,280
osn attacker on github and there is an

175
00:06:45,280 --> 00:06:46,560
installation

176
00:06:46,560 --> 00:06:48,639
section there where you can learn how to

177
00:06:48,639 --> 00:06:51,039
install it you can install an attacker

178
00:06:51,039 --> 00:06:53,440
uh relatively simply and it will run on

179
00:06:53,440 --> 00:06:57,199
anything so uh i prefer uh using it for

180
00:06:57,199 --> 00:06:59,599
uh perfect using it in kali linux but

181
00:06:59,599 --> 00:07:01,199
you can use it on

182
00:07:01,199 --> 00:07:02,479
any platform

183
00:07:02,479 --> 00:07:03,840
there are several requirements for

184
00:07:03,840 --> 00:07:06,000
installation so please do follow the

185
00:07:06,000 --> 00:07:07,360
installation instructions because

186
00:07:07,360 --> 00:07:08,720
there's some dependencies that you need

187
00:07:08,720 --> 00:07:11,840
to install however if you are using

188
00:07:11,840 --> 00:07:15,520
black arch linux distribution which is a

189
00:07:15,520 --> 00:07:17,520
linux distribution

190
00:07:17,520 --> 00:07:20,479
specifically targeting uh penetration

191
00:07:20,479 --> 00:07:22,400
testing

192
00:07:22,400 --> 00:07:23,919
engagements

193
00:07:23,919 --> 00:07:26,319
you will find out that recently netaka

194
00:07:26,319 --> 00:07:28,720
was included in black arch and you can

195
00:07:28,720 --> 00:07:31,599
see it's uh currently being listed under

196
00:07:31,599 --> 00:07:33,840
the black arch automation tools and the

197
00:07:33,840 --> 00:07:36,479
version zero zero two is actually built

198
00:07:36,479 --> 00:07:38,240
into black arch which is absolutely

199
00:07:38,240 --> 00:07:40,720
great and we're very thankful to the

200
00:07:40,720 --> 00:07:43,599
black arch linux team which included our

201
00:07:43,599 --> 00:07:46,160
tool in the linux distribution

202
00:07:46,160 --> 00:07:47,680
so um

203
00:07:47,680 --> 00:07:49,039
in order for you to understand what

204
00:07:49,039 --> 00:07:51,120
orwas attacker is and how it compares

205
00:07:51,120 --> 00:07:52,879
with other scanners that you might know

206
00:07:52,879 --> 00:07:54,560
for example with scanners such as burp

207
00:07:54,560 --> 00:07:56,800
suite of or wasp zap

208
00:07:56,800 --> 00:07:59,919
so scanners like burp or wasp zap

209
00:07:59,919 --> 00:08:02,960
they usually would scan one website for

210
00:08:02,960 --> 00:08:05,199
many web application vulnerabilities and

211
00:08:05,199 --> 00:08:07,520
that's whatever the scanner is able to

212
00:08:07,520 --> 00:08:08,400
find

213
00:08:08,400 --> 00:08:10,560
so these tools will go and crawl one

214
00:08:10,560 --> 00:08:12,960
website to discover all urls all

215
00:08:12,960 --> 00:08:14,319
parameters

216
00:08:14,319 --> 00:08:16,479
all all forms you know all the buttons

217
00:08:16,479 --> 00:08:18,400
will try to click on all the links and

218
00:08:18,400 --> 00:08:20,960
then it will try to see uh if there are

219
00:08:20,960 --> 00:08:22,560
any vulnerabilities

220
00:08:22,560 --> 00:08:24,080
or what's net hacker doesn't work like

221
00:08:24,080 --> 00:08:26,479
that it doesn't scan just one website it

222
00:08:26,479 --> 00:08:27,840
scans one

223
00:08:27,840 --> 00:08:30,479
or many and that can be hundreds or

224
00:08:30,479 --> 00:08:33,519
thousands of ip addresses networks or

225
00:08:33,519 --> 00:08:35,599
subdomains and what is it scanning them

226
00:08:35,599 --> 00:08:38,320
for for open ports or one or more

227
00:08:38,320 --> 00:08:40,399
specific vulnerabilities

228
00:08:40,399 --> 00:08:42,559
listed by the user and these are

229
00:08:42,559 --> 00:08:44,880
basically what our modules are and you

230
00:08:44,880 --> 00:08:46,959
can bundle the modules in a profile to

231
00:08:46,959 --> 00:08:48,959
search for specific things

232
00:08:48,959 --> 00:08:51,760
so nettacker consists of three types of

233
00:08:51,760 --> 00:08:53,360
modules

234
00:08:53,360 --> 00:08:55,760
modules of type scan for example port

235
00:08:55,760 --> 00:08:56,880
scan

236
00:08:56,880 --> 00:08:58,959
modules of type bone

237
00:08:58,959 --> 00:09:01,120
these are the modules which are looking

238
00:09:01,120 --> 00:09:03,680
for a specific vulnerability for example

239
00:09:03,680 --> 00:09:06,320
apache struts valve module will look for

240
00:09:06,320 --> 00:09:09,120
apache strats vulnerability and it has

241
00:09:09,120 --> 00:09:12,240
modules of type brood for brute forcing

242
00:09:12,240 --> 00:09:14,560
so for example an ssh brute module we

243
00:09:14,560 --> 00:09:16,399
will perform brute forcing

244
00:09:16,399 --> 00:09:18,720
on over the ssh protocol

245
00:09:18,720 --> 00:09:21,200
so that's essentially what the module

246
00:09:21,200 --> 00:09:23,440
types are and that what makes this tool

247
00:09:23,440 --> 00:09:25,279
great because it combines three

248
00:09:25,279 --> 00:09:27,120
different types of

249
00:09:27,120 --> 00:09:30,160
activities scanning

250
00:09:30,160 --> 00:09:31,760
for

251
00:09:31,760 --> 00:09:33,680
in information gathering

252
00:09:33,680 --> 00:09:35,920
scanning for specific vulnerability and

253
00:09:35,920 --> 00:09:37,279
brute forcing

254
00:09:37,279 --> 00:09:39,440
so how do you run the attacker in order

255
00:09:39,440 --> 00:09:41,040
to run the attacker from the command

256
00:09:41,040 --> 00:09:43,600
line you need to define two parameters

257
00:09:43,600 --> 00:09:46,080
you need to define the target what do

258
00:09:46,080 --> 00:09:48,480
you want to scan and the module which

259
00:09:48,480 --> 00:09:50,480
module do you want to use to scan it

260
00:09:50,480 --> 00:09:51,360
with

261
00:09:51,360 --> 00:09:52,399
and

262
00:09:52,399 --> 00:09:55,279
you do it with the dash i command line

263
00:09:55,279 --> 00:09:57,200
switch where you define your target and

264
00:09:57,200 --> 00:09:59,519
dash m for your module so for example if

265
00:09:59,519 --> 00:10:02,079
i want to perform a port scan on ip

266
00:10:02,079 --> 00:10:05,279
address 192 168.

267
00:10:05,279 --> 00:10:07,519
i will call an attacker with dash i and

268
00:10:07,519 --> 00:10:09,600
the ip address and m with the module

269
00:10:09,600 --> 00:10:12,160
with the port scan you can also scan not

270
00:10:12,160 --> 00:10:13,519
just one ip address but the whole

271
00:10:13,519 --> 00:10:15,760
network for example if you provide

272
00:10:15,760 --> 00:10:18,399
192.168.1.0

273
00:10:18,399 --> 00:10:20,959
24 you will scan the entire class c

274
00:10:20,959 --> 00:10:24,880
network or 255 ip addresses and actually

275
00:10:24,880 --> 00:10:27,440
an attacker has more targets available

276
00:10:27,440 --> 00:10:30,640
you can scan a single ip address as i've

277
00:10:30,640 --> 00:10:33,120
just shown you before you can also scan

278
00:10:33,120 --> 00:10:35,760
an ip address range by providing a

279
00:10:35,760 --> 00:10:38,000
starting ip address and an ending ip

280
00:10:38,000 --> 00:10:38,959
address

281
00:10:38,959 --> 00:10:42,399
you can also scan a network by providing

282
00:10:42,399 --> 00:10:45,120
the cidr bits notation

283
00:10:45,120 --> 00:10:46,880
but what is also very interesting that

284
00:10:46,880 --> 00:10:49,440
you can scan a domain for example

285
00:10:49,440 --> 00:10:50,959
owasp.org

286
00:10:50,959 --> 00:10:54,640
and you can also scan urls uh using http

287
00:10:54,640 --> 00:10:57,600
or https protocol so these are the

288
00:10:57,600 --> 00:11:01,760
various types of attacker targets

289
00:11:01,760 --> 00:11:04,160
but that is not all because if you are

290
00:11:04,160 --> 00:11:05,839
if you work for a larger organization

291
00:11:05,839 --> 00:11:08,880
that means you will have a multitude of

292
00:11:08,880 --> 00:11:10,720
networks you will have several domain

293
00:11:10,720 --> 00:11:11,760
names

294
00:11:11,760 --> 00:11:12,480
and

295
00:11:12,480 --> 00:11:14,720
lots of ip addresses so what you can do

296
00:11:14,720 --> 00:11:17,120
you can actually create a text file

297
00:11:17,120 --> 00:11:19,920
which lists all the uh targets that you

298
00:11:19,920 --> 00:11:23,680
want to scan uh one target per line in

299
00:11:23,680 --> 00:11:25,760
the text file and then just load the

300
00:11:25,760 --> 00:11:28,160
list of targets using the l parameters

301
00:11:28,160 --> 00:11:31,040
so that is another way of running the

302
00:11:31,040 --> 00:11:32,720
attacker and again for example if you

303
00:11:32,720 --> 00:11:34,079
want to run a specific module for

304
00:11:34,079 --> 00:11:36,560
example a port scan on all your networks

305
00:11:36,560 --> 00:11:39,120
all your domains and subdomains

306
00:11:39,120 --> 00:11:41,440
that is what you can do and this is what

307
00:11:41,440 --> 00:11:45,360
is making net tucker so great so let me

308
00:11:45,360 --> 00:11:47,920
now do a quick live demo let me just

309
00:11:47,920 --> 00:11:51,519
switch to my kali linux

310
00:11:51,519 --> 00:11:54,399
installation here

311
00:11:55,200 --> 00:11:57,200
where i already have net tucker

312
00:11:57,200 --> 00:11:58,720
installed and again a reminder if you

313
00:11:58,720 --> 00:11:59,920
want to uh

314
00:11:59,920 --> 00:12:01,360
learn how to install an attacker just

315
00:12:01,360 --> 00:12:03,920
check out documentation on github under

316
00:12:03,920 --> 00:12:06,800
the github wiki uh so because attacker

317
00:12:06,800 --> 00:12:08,880
is a tool written in python i'm going to

318
00:12:08,880 --> 00:12:09,680
use

319
00:12:09,680 --> 00:12:12,880
python to run it so if i run nettacker

320
00:12:12,880 --> 00:12:14,399
with um

321
00:12:14,399 --> 00:12:16,240
no parameters

322
00:12:16,240 --> 00:12:18,000
what is going to happen it's just going

323
00:12:18,000 --> 00:12:20,720
to return a usage instructions you can

324
00:12:20,720 --> 00:12:22,480
see there's a lots of information being

325
00:12:22,480 --> 00:12:24,560
displayed on the screen

326
00:12:24,560 --> 00:12:26,639
which can be quite confusing this is why

327
00:12:26,639 --> 00:12:28,240
please do check out the documentation

328
00:12:28,240 --> 00:12:30,320
where you will be able to find out

329
00:12:30,320 --> 00:12:32,240
about all the modules available what

330
00:12:32,240 --> 00:12:35,279
they do and uh any additional parameters

331
00:12:35,279 --> 00:12:38,560
that you might need to use but um here

332
00:12:38,560 --> 00:12:41,040
and in my first example let me actually

333
00:12:41,040 --> 00:12:43,519
try to run net tucker

334
00:12:43,519 --> 00:12:46,880
on an ip address and perform a port scan

335
00:12:46,880 --> 00:12:49,120
actually i want to scan this particular

336
00:12:49,120 --> 00:12:51,519
ip address now so this is what i need to

337
00:12:51,519 --> 00:12:53,120
specify i just need to

338
00:12:53,120 --> 00:12:55,600
provide the ip address and then port

339
00:12:55,600 --> 00:12:58,000
scan as the module of course many of you

340
00:12:58,000 --> 00:13:00,320
probably using tools such as nmap for

341
00:13:00,320 --> 00:13:01,600
port scanning

342
00:13:01,600 --> 00:13:03,120
and um

343
00:13:03,120 --> 00:13:04,639
usually people will have like a love and

344
00:13:04,639 --> 00:13:06,880
hate relationship with nmap

345
00:13:06,880 --> 00:13:08,720
and in attacker what is great about port

346
00:13:08,720 --> 00:13:10,079
scanning that it is actually quite

347
00:13:10,079 --> 00:13:12,800
simple very powerful and it is written

348
00:13:12,800 --> 00:13:14,639
in python so you don't even need to

349
00:13:14,639 --> 00:13:17,040
install nmap on your system all you need

350
00:13:17,040 --> 00:13:21,040
to do is just to have

351
00:13:21,519 --> 00:13:23,200
python installed so there you go you can

352
00:13:23,200 --> 00:13:25,120
see how quickly an attacker scanned it

353
00:13:25,120 --> 00:13:25,920
and

354
00:13:25,920 --> 00:13:28,320
returned us the results where you can

355
00:13:28,320 --> 00:13:29,680
see

356
00:13:29,680 --> 00:13:31,920
all the port numbers which were open and

357
00:13:31,920 --> 00:13:33,360
also you can see in the description

358
00:13:33,360 --> 00:13:35,360
column here it tries to identify what

359
00:13:35,360 --> 00:13:36,560
they are and you can see that it was

360
00:13:36,560 --> 00:13:39,839
telnet ssh sunrpc but for example you

361
00:13:39,839 --> 00:13:43,440
can see on ports 1884 and 1890 on this

362
00:13:43,440 --> 00:13:46,320
particular target it thinks that it is

363
00:13:46,320 --> 00:13:48,160
actually running http which is very

364
00:13:48,160 --> 00:13:49,839
important because as you can see people

365
00:13:49,839 --> 00:13:51,040
can run

366
00:13:51,040 --> 00:13:53,920
things like web service or ssh servers

367
00:13:53,920 --> 00:13:56,480
on some obscure ports and attacker can

368
00:13:56,480 --> 00:14:00,240
actually identify what is running there

369
00:14:00,240 --> 00:14:02,480
you can see that the attacker after it

370
00:14:02,480 --> 00:14:05,440
completed the scan it displays the

371
00:14:05,440 --> 00:14:08,000
information in its tabular format and it

372
00:14:08,000 --> 00:14:11,040
also stores the data in html file as you

373
00:14:11,040 --> 00:14:13,199
can see here and the database so the

374
00:14:13,199 --> 00:14:15,040
database bit is actually quite important

375
00:14:15,040 --> 00:14:17,279
because it's not like other tools which

376
00:14:17,279 --> 00:14:18,959
complete the scan and then that's it and

377
00:14:18,959 --> 00:14:20,480
they have to do something with it no

378
00:14:20,480 --> 00:14:22,079
attacker actually stores everything in

379
00:14:22,079 --> 00:14:25,920
database and again that is a very uh

380
00:14:25,920 --> 00:14:27,839
good feature because you can actually

381
00:14:27,839 --> 00:14:29,680
search the database and i'll talk about

382
00:14:29,680 --> 00:14:32,160
this a little bit later now we have seen

383
00:14:32,160 --> 00:14:34,800
how to use that tucker for port scanning

384
00:14:34,800 --> 00:14:36,959
but let me show you some other ways how

385
00:14:36,959 --> 00:14:38,720
you can use an attacker by using

386
00:14:38,720 --> 00:14:41,839
multiple modules and how you can use it

387
00:14:41,839 --> 00:14:43,279
on a

388
00:14:43,279 --> 00:14:46,320
domain name so for example if i want to

389
00:14:46,320 --> 00:14:48,320
scan owasp.org

390
00:14:48,320 --> 00:14:51,199
domain and i want to perform a subdomain

391
00:14:51,199 --> 00:14:53,920
scan right i can

392
00:14:53,920 --> 00:14:56,880
run this command and obasantaka now is

393
00:14:56,880 --> 00:14:58,240
going to go and discover all the

394
00:14:58,240 --> 00:15:00,639
subdomains of oas.org and give us the

395
00:15:00,639 --> 00:15:02,399
list you can see how quickly this was

396
00:15:02,399 --> 00:15:05,360
done however what netaka

397
00:15:05,360 --> 00:15:07,360
has it has a unique feature which allows

398
00:15:07,360 --> 00:15:10,399
you to combine sub-domain scan with any

399
00:15:10,399 --> 00:15:12,399
other module available

400
00:15:12,399 --> 00:15:15,120
so for example there is a module which

401
00:15:15,120 --> 00:15:16,320
is called

402
00:15:16,320 --> 00:15:19,440
server version phone and server version

403
00:15:19,440 --> 00:15:22,959
vuln is a module which is trying to

404
00:15:22,959 --> 00:15:26,160
detect if the web server in question is

405
00:15:26,160 --> 00:15:28,079
returning or leaking

406
00:15:28,079 --> 00:15:30,639
the type of the web server in the

407
00:15:30,639 --> 00:15:33,120
response headers in the server header

408
00:15:33,120 --> 00:15:36,240
and we can see if we run it on ovals.org

409
00:15:36,240 --> 00:15:39,120
that oauth.org is actually linking

410
00:15:39,120 --> 00:15:40,639
it's server header and it says that it's

411
00:15:40,639 --> 00:15:42,399
running cloudflare so okay great now we

412
00:15:42,399 --> 00:15:45,120
know what the obas.org is running on but

413
00:15:45,120 --> 00:15:47,120
this is not all because what we can also

414
00:15:47,120 --> 00:15:48,639
do we can add

415
00:15:48,639 --> 00:15:50,000
another

416
00:15:50,000 --> 00:15:52,160
module so i can change for example x

417
00:15:52,160 --> 00:15:54,399
powered by vulnerability

418
00:15:54,399 --> 00:15:56,160
and that will return another header

419
00:15:56,160 --> 00:15:59,120
which is the x powered by header

420
00:15:59,120 --> 00:16:01,440
and we you can also see any extra

421
00:16:01,440 --> 00:16:04,399
information provided by the x powered by

422
00:16:04,399 --> 00:16:06,240
header

423
00:16:06,240 --> 00:16:08,800
of that web server and uh

424
00:16:08,800 --> 00:16:10,560
that is not all you can see this is all

425
00:16:10,560 --> 00:16:14,160
on os.org website um and we can see that

426
00:16:14,160 --> 00:16:17,600
the attacker actually discovered um

427
00:16:17,600 --> 00:16:20,320
open ports port 80.443

428
00:16:20,320 --> 00:16:22,480
and told us in this information

429
00:16:22,480 --> 00:16:25,519
gathering session um what type of the

430
00:16:25,519 --> 00:16:27,519
server and technologies are being run on

431
00:16:27,519 --> 00:16:29,600
ours.org but what is great as i

432
00:16:29,600 --> 00:16:32,399
mentioned you can actually add subdomain

433
00:16:32,399 --> 00:16:35,360
scan to this and by adding s parameter

434
00:16:35,360 --> 00:16:37,440
and what's going to happen now is an

435
00:16:37,440 --> 00:16:39,120
attacker is actually going to go and

436
00:16:39,120 --> 00:16:42,079
discover all the subdomains of obas.org

437
00:16:42,079 --> 00:16:44,079
and it's going to run

438
00:16:44,079 --> 00:16:47,040
the uh these two modules that i listed

439
00:16:47,040 --> 00:16:49,600
on every single sub domain and as a

440
00:16:49,600 --> 00:16:51,279
result as you can see it is very quick

441
00:16:51,279 --> 00:16:52,480
and

442
00:16:52,480 --> 00:16:54,720
literally within a few seconds now we

443
00:16:54,720 --> 00:16:57,040
have information about all the

444
00:16:57,040 --> 00:17:00,079
sub-domains of oas.org and everything

445
00:17:00,079 --> 00:17:01,839
that they are running so this is

446
00:17:01,839 --> 00:17:05,280
absolutely great feature and what you

447
00:17:05,280 --> 00:17:08,480
can do after this because obviously

448
00:17:08,480 --> 00:17:11,039
how do you consume the results you can

449
00:17:11,039 --> 00:17:12,559
check out the report so you can see for

450
00:17:12,559 --> 00:17:14,880
example here the report is stored in the

451
00:17:14,880 --> 00:17:17,199
html file so

452
00:17:17,199 --> 00:17:20,640
let's see if we can open this uh html

453
00:17:20,640 --> 00:17:23,439
file with a web browser so i have a

454
00:17:23,439 --> 00:17:25,199
firefox here

455
00:17:25,199 --> 00:17:26,319
let's see

456
00:17:26,319 --> 00:17:27,760
if we can

457
00:17:27,760 --> 00:17:30,880
open this file and see what is shown in

458
00:17:30,880 --> 00:17:33,679
this html file you can see

459
00:17:33,679 --> 00:17:35,440
a great feature in attacker here called

460
00:17:35,440 --> 00:17:37,360
penetration testing graph

461
00:17:37,360 --> 00:17:38,720
and you can see that the attacker

462
00:17:38,720 --> 00:17:40,720
started it attack and started connecting

463
00:17:40,720 --> 00:17:44,000
to various sub-domains of owasp.org and

464
00:17:44,000 --> 00:17:46,240
we can see that on every single target

465
00:17:46,240 --> 00:17:48,559
here uh the server version vulnerability

466
00:17:48,559 --> 00:17:50,400
index powered by vulnerability modules

467
00:17:50,400 --> 00:17:53,760
they return a result and you can see uh

468
00:17:53,760 --> 00:17:56,880
what was actually running on them and

469
00:17:56,880 --> 00:17:59,120
why the graph is important because by

470
00:17:59,120 --> 00:18:00,720
looking at the shape of the graph you

471
00:18:00,720 --> 00:18:02,960
can see that and spot some patterns for

472
00:18:02,960 --> 00:18:04,559
example you can see that

473
00:18:04,559 --> 00:18:07,760
one of the subdomains of oauth.org did

474
00:18:07,760 --> 00:18:10,400
not have x power by vulnerability

475
00:18:10,400 --> 00:18:12,320
returning anything because that header

476
00:18:12,320 --> 00:18:14,720
was not present you can see it was just

477
00:18:14,720 --> 00:18:16,640
server version one and we can see in

478
00:18:16,640 --> 00:18:19,200
this case this was nginx and if you

479
00:18:19,200 --> 00:18:21,200
scroll down of this report you will find

480
00:18:21,200 --> 00:18:23,280
the results in the same familiar tabular

481
00:18:23,280 --> 00:18:25,840
format you will see all the hosts which

482
00:18:25,840 --> 00:18:28,080
will be either the subdomain or a

483
00:18:28,080 --> 00:18:29,760
specific ip address if you scan your

484
00:18:29,760 --> 00:18:31,679
network the username and password

485
00:18:31,679 --> 00:18:33,919
columns which are currently blank they

486
00:18:33,919 --> 00:18:37,039
are used for brute forcing so if you try

487
00:18:37,039 --> 00:18:37,840
to

488
00:18:37,840 --> 00:18:40,240
run a brute forcing attack uh for

489
00:18:40,240 --> 00:18:43,280
example to discover if there are any uh

490
00:18:43,280 --> 00:18:45,280
servers on your network which are using

491
00:18:45,280 --> 00:18:47,600
default credentials such as admin admin

492
00:18:47,600 --> 00:18:49,760
or uh whatever default credentials you

493
00:18:49,760 --> 00:18:51,200
are looking for

494
00:18:51,200 --> 00:18:52,720
they will be displayed here in this

495
00:18:52,720 --> 00:18:54,960
username and password columns uh if

496
00:18:54,960 --> 00:18:56,960
there is a match you can see the port

497
00:18:56,960 --> 00:18:58,559
number you can see the type of the

498
00:18:58,559 --> 00:19:00,559
module which was in use and you can see

499
00:19:00,559 --> 00:19:02,400
the description column there's a bit of

500
00:19:02,400 --> 00:19:03,280
a

501
00:19:03,280 --> 00:19:06,480
visual effect so if i want to focus your

502
00:19:06,480 --> 00:19:09,120
attention on a particular line

503
00:19:09,120 --> 00:19:11,440
in this table i can just hover over the

504
00:19:11,440 --> 00:19:13,760
row of data and you can see that

505
00:19:13,760 --> 00:19:15,360
this particular host for example was

506
00:19:15,360 --> 00:19:19,280
running nginx so that is the

507
00:19:19,280 --> 00:19:22,000
results in html format however an

508
00:19:22,000 --> 00:19:26,640
attacker has um ability to run

509
00:19:26,640 --> 00:19:29,600
some other reports as well and uh again

510
00:19:29,600 --> 00:19:32,400
what makes it great is that apart from

511
00:19:32,400 --> 00:19:34,880
the um

512
00:19:34,880 --> 00:19:36,240
the graphs

513
00:19:36,240 --> 00:19:41,520
it can also output results in uh csv and

514
00:19:41,520 --> 00:19:43,440
json formats

515
00:19:43,440 --> 00:19:46,559
and why is it important because we

516
00:19:46,559 --> 00:19:48,960
with using json people can actually

517
00:19:48,960 --> 00:19:51,280
consume these results for integration

518
00:19:51,280 --> 00:19:53,039
with other tools because json is

519
00:19:53,039 --> 00:19:55,679
structured data and after you run

520
00:19:55,679 --> 00:19:58,160
attacker on your networks you can take

521
00:19:58,160 --> 00:20:00,320
that json file and feed it into any

522
00:20:00,320 --> 00:20:03,039
other tool which can consume it and for

523
00:20:03,039 --> 00:20:04,320
example provide you a different

524
00:20:04,320 --> 00:20:06,880
reporting analytics or perhaps say

525
00:20:06,880 --> 00:20:07,760
further

526
00:20:07,760 --> 00:20:09,919
vulnerability scanning and why is it

527
00:20:09,919 --> 00:20:13,440
important to have csv it's because

528
00:20:13,440 --> 00:20:16,000
you get results in a spreadsheet format

529
00:20:16,000 --> 00:20:17,679
and this is probably what is so great

530
00:20:17,679 --> 00:20:20,080
about the waste attacker it's probably

531
00:20:20,080 --> 00:20:21,840
the only tool i know which is free and

532
00:20:21,840 --> 00:20:23,600
open source and it allows you to scan

533
00:20:23,600 --> 00:20:25,280
your network

534
00:20:25,280 --> 00:20:27,440
discover all the open ports all the

535
00:20:27,440 --> 00:20:30,000
service all the vulnerabilities and they

536
00:20:30,000 --> 00:20:31,679
give you results in excel spreadsheet

537
00:20:31,679 --> 00:20:33,760
format which is fantastic and everybody

538
00:20:33,760 --> 00:20:35,520
gets the spreadsheet everybody loves the

539
00:20:35,520 --> 00:20:38,080
spreadsheet you can easily of course

540
00:20:38,080 --> 00:20:40,640
filter that spreadsheet filter the data

541
00:20:40,640 --> 00:20:43,440
search for whatever is needed and

542
00:20:43,440 --> 00:20:47,039
it is absolutely uh fantastic for uh

543
00:20:47,039 --> 00:20:48,720
companies to

544
00:20:48,720 --> 00:20:50,400
basically run this free and open source

545
00:20:50,400 --> 00:20:53,360
tool and get a list of all the um assets

546
00:20:53,360 --> 00:20:56,720
open ports and vulnerabilities in one

547
00:20:56,720 --> 00:20:59,520
very convenient spreadsheet format so

548
00:20:59,520 --> 00:21:02,720
this is a unique feature of an attacker

549
00:21:02,720 --> 00:21:04,880
which uh i think probably one of the

550
00:21:04,880 --> 00:21:08,640
best features of this little tool

551
00:21:08,640 --> 00:21:09,360
so

552
00:21:09,360 --> 00:21:13,840
um what nethacker is solving by

553
00:21:14,400 --> 00:21:16,080
storing the results in the database

554
00:21:16,080 --> 00:21:18,080
format and giving you the spreadsheet

555
00:21:18,080 --> 00:21:20,080
it's it's uh solving something called

556
00:21:20,080 --> 00:21:23,039
owasp a0 if you don't know what oasp a0

557
00:21:23,039 --> 00:21:24,640
is it's

558
00:21:24,640 --> 00:21:27,280
something that jeremiah grossman the

559
00:21:27,280 --> 00:21:29,280
veteran of our application security

560
00:21:29,280 --> 00:21:31,919
industry suggested a few years ago when

561
00:21:31,919 --> 00:21:35,120
we were due to release obas top 10 2017

562
00:21:35,120 --> 00:21:38,559
and the top suggestion from jeremiah was

563
00:21:38,559 --> 00:21:41,600
to include a0 or asset inventory because

564
00:21:41,600 --> 00:21:43,200
these days the biggest application

565
00:21:43,200 --> 00:21:44,559
security risk

566
00:21:44,559 --> 00:21:47,200
websites that you don't know you own why

567
00:21:47,200 --> 00:21:49,360
because if you don't know what you own

568
00:21:49,360 --> 00:21:51,520
you cannot possibly secure it and

569
00:21:51,520 --> 00:21:53,840
attacker solves this challenge for you

570
00:21:53,840 --> 00:21:58,600
because it allows you to um

571
00:21:58,640 --> 00:22:00,559
to create your asset inventory by

572
00:22:00,559 --> 00:22:03,200
scanning your network and scanning your

573
00:22:03,200 --> 00:22:05,600
assets and of course uh

574
00:22:05,600 --> 00:22:07,200
the recommended way of using the

575
00:22:07,200 --> 00:22:08,720
attacker is to use it on your own

576
00:22:08,720 --> 00:22:11,120
network but um you can also use it for

577
00:22:11,120 --> 00:22:12,960
penetration testing engagements or for

578
00:22:12,960 --> 00:22:15,280
bug bounty work where you can attack

579
00:22:15,280 --> 00:22:16,880
somebody else's network but of course

580
00:22:16,880 --> 00:22:18,720
always make sure that you have

581
00:22:18,720 --> 00:22:21,360
permission to do that so some of the

582
00:22:21,360 --> 00:22:23,360
attacker use cases you can use it for

583
00:22:23,360 --> 00:22:25,360
asset discovery so you can scan your

584
00:22:25,360 --> 00:22:27,280
network for open ports you can you can

585
00:22:27,280 --> 00:22:29,760
scan networks for new hosts you can scan

586
00:22:29,760 --> 00:22:31,280
network for default credentials for

587
00:22:31,280 --> 00:22:33,280
example admin admin if you use brute

588
00:22:33,280 --> 00:22:34,720
forcing you can

589
00:22:34,720 --> 00:22:36,960
quickly scan the network and find out uh

590
00:22:36,960 --> 00:22:38,480
if there any service with default

591
00:22:38,480 --> 00:22:40,799
credentials configured on it you can

592
00:22:40,799 --> 00:22:42,400
scan your network for a specific

593
00:22:42,400 --> 00:22:44,240
vulnerability for example a big

594
00:22:44,240 --> 00:22:46,080
vulnerability

595
00:22:46,080 --> 00:22:48,480
this year has been microsoft exchange

596
00:22:48,480 --> 00:22:51,120
ssrf cve

597
00:22:51,120 --> 00:22:52,880
which affected thousands and thousands

598
00:22:52,880 --> 00:22:55,520
of organizations worldwide and we have a

599
00:22:55,520 --> 00:22:57,280
free and open source tool called oas

600
00:22:57,280 --> 00:22:58,799
netaka with a module which actually

601
00:22:58,799 --> 00:23:01,039
allows you to scan all your networks and

602
00:23:01,039 --> 00:23:03,280
discover vulnerable service you can also

603
00:23:03,280 --> 00:23:05,280
discover sub-domains and open ports on

604
00:23:05,280 --> 00:23:07,200
them you can discover things like

605
00:23:07,200 --> 00:23:09,360
expired ssl certificates and your ip

606
00:23:09,360 --> 00:23:11,280
ranges why is it important because if

607
00:23:11,280 --> 00:23:13,919
you have service with expired ssl sets

608
00:23:13,919 --> 00:23:15,600
that means that the server is probably

609
00:23:15,600 --> 00:23:18,000
abandoned and probably not patched

610
00:23:18,000 --> 00:23:19,679
you can also find sub domains hosting

611
00:23:19,679 --> 00:23:21,120
vulnerable versions of content

612
00:23:21,120 --> 00:23:22,799
management systems such as wordpress

613
00:23:22,799 --> 00:23:24,480
drupal and joomla

614
00:23:24,480 --> 00:23:26,159
and of course what is important that you

615
00:23:26,159 --> 00:23:29,120
can run any netaca modules on all sub

616
00:23:29,120 --> 00:23:32,000
domains of a specific domain

617
00:23:32,000 --> 00:23:33,760
you can automate an attacker using the

618
00:23:33,760 --> 00:23:35,919
command line and you get results using

619
00:23:35,919 --> 00:23:39,280
csv json and html format you can use it

620
00:23:39,280 --> 00:23:41,600
in docker in your organization when you

621
00:23:41,600 --> 00:23:43,840
spin it up in docker it will actually

622
00:23:43,840 --> 00:23:46,799
use the web ui

623
00:23:47,120 --> 00:23:49,840
or the api mode and you can search for

624
00:23:49,840 --> 00:23:51,840
previous scan results and discovered

625
00:23:51,840 --> 00:23:53,840
assets in the database that's what makes

626
00:23:53,840 --> 00:23:56,240
it great i have a slide here which shows

627
00:23:56,240 --> 00:23:59,679
quickly what the os web ui looks like

628
00:23:59,679 --> 00:24:00,559
it's

629
00:24:00,559 --> 00:24:01,919
quite simple and you can see different

630
00:24:01,919 --> 00:24:03,440
colors because different modules are

631
00:24:03,440 --> 00:24:05,760
color coded and you can see that the

632
00:24:05,760 --> 00:24:08,000
brute forcing modules are orange the

633
00:24:08,000 --> 00:24:10,880
vulnerability scanning modules are red

634
00:24:10,880 --> 00:24:12,640
and the scanning modules are green so

635
00:24:12,640 --> 00:24:14,400
when you select a particular profile for

636
00:24:14,400 --> 00:24:15,919
example all vulnerability scanning

637
00:24:15,919 --> 00:24:18,240
modules selected here they will all will

638
00:24:18,240 --> 00:24:21,760
be ticked and they will all be used um

639
00:24:21,760 --> 00:24:24,000
important thing about the modules is

640
00:24:24,000 --> 00:24:26,080
that in the latest version of an

641
00:24:26,080 --> 00:24:28,400
attacker zero zero three uh the modules

642
00:24:28,400 --> 00:24:30,400
are written in yaml which means that it

643
00:24:30,400 --> 00:24:32,000
is very

644
00:24:32,000 --> 00:24:33,200
simple to

645
00:24:33,200 --> 00:24:34,799
write new modules and contribute new

646
00:24:34,799 --> 00:24:36,960
modules please definitely do check out

647
00:24:36,960 --> 00:24:38,240
this new feature

648
00:24:38,240 --> 00:24:40,320
the latest version is a bit unstable yet

649
00:24:40,320 --> 00:24:42,720
so we're still working on it but the

650
00:24:42,720 --> 00:24:44,960
fact that it's using yaml actually will

651
00:24:44,960 --> 00:24:46,400
allows us

652
00:24:46,400 --> 00:24:48,480
will allow the project to respond

653
00:24:48,480 --> 00:24:50,640
quickly to the new vulnerabilities and

654
00:24:50,640 --> 00:24:52,960
release new modules allowing you to scan

655
00:24:52,960 --> 00:24:55,039
for these vulnerabilities in your

656
00:24:55,039 --> 00:24:56,559
network

657
00:24:56,559 --> 00:24:58,720
just like all of us projects it is open

658
00:24:58,720 --> 00:25:01,440
source so we welcome contributions if

659
00:25:01,440 --> 00:25:03,200
you want to contribute please do check

660
00:25:03,200 --> 00:25:05,279
out the developer wiki

661
00:25:05,279 --> 00:25:07,840
which is available on the documentation

662
00:25:07,840 --> 00:25:08,960
page

663
00:25:08,960 --> 00:25:10,400
do read and follow the contributor

664
00:25:10,400 --> 00:25:12,799
guidelines and if you

665
00:25:12,799 --> 00:25:14,720
know python you can of course help us

666
00:25:14,720 --> 00:25:16,720
with coding if you know yaml you can

667
00:25:16,720 --> 00:25:18,720
help us with the vulnerability modules

668
00:25:18,720 --> 00:25:21,039
we can also help us with translations

669
00:25:21,039 --> 00:25:23,440
and documentation if you want to

670
00:25:23,440 --> 00:25:27,200
contribute a non in a non-technical way

671
00:25:27,200 --> 00:25:28,559
so um

672
00:25:28,559 --> 00:25:30,720
that's it about the tucker please uh use

673
00:25:30,720 --> 00:25:32,799
it to attack your own network before the

674
00:25:32,799 --> 00:25:34,640
real attackers do

675
00:25:34,640 --> 00:25:38,000
i'm now ready to take any questions uh

676
00:25:38,000 --> 00:25:39,120
and

677
00:25:39,120 --> 00:25:41,840
as you have heard from the moderators uh

678
00:25:41,840 --> 00:25:44,240
we're taking questions today in oahu's

679
00:25:44,240 --> 00:25:46,640
slab channel and the current was slack

680
00:25:46,640 --> 00:25:48,559
channel for this track is 20th

681
00:25:48,559 --> 00:25:50,480
anniversary temporal you can also

682
00:25:50,480 --> 00:25:53,760
contact me via email or via twitter at

683
00:25:53,760 --> 00:25:57,760
secure step 9. thank you

