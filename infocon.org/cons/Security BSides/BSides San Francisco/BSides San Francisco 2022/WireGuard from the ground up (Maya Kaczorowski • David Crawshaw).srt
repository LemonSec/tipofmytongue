1
00:00:00,399 --> 00:00:02,720
hi everybody my name is david croshow

2
00:00:02,720 --> 00:00:05,200
i'm cto and co-founder of tail scale and

3
00:00:05,200 --> 00:00:08,800
i'm here to do half of a talk today with

4
00:00:08,800 --> 00:00:10,320
i'm maya kaczorowski i'm a product

5
00:00:10,320 --> 00:00:12,559
manager at tailskill uh tailskill's a

6
00:00:12,559 --> 00:00:14,799
wire guard based mesh vpn and we're here

7
00:00:14,799 --> 00:00:16,160
to talk about wireguard

8
00:00:16,160 --> 00:00:18,240
important point to note wireguard is the

9
00:00:18,240 --> 00:00:20,400
registered trademark of jason adonafeldt

10
00:00:20,400 --> 00:00:22,160
and we aren't the creators of wireguard

11
00:00:22,160 --> 00:00:23,840
he is

12
00:00:23,840 --> 00:00:25,760
so first off we'll be talking about

13
00:00:25,760 --> 00:00:27,760
wireguard from the ground up we'll cover

14
00:00:27,760 --> 00:00:29,840
what wireguard is and why it's different

15
00:00:29,840 --> 00:00:31,599
from other options for client server

16
00:00:31,599 --> 00:00:32,719
communication

17
00:00:32,719 --> 00:00:34,480
how wireguard works including an

18
00:00:34,480 --> 00:00:35,600
overview of the protocol what

19
00:00:35,600 --> 00:00:37,600
cryptography is used and how key

20
00:00:37,600 --> 00:00:39,520
rotation and timers work we'll step

21
00:00:39,520 --> 00:00:41,040
through the handshake and explain what

22
00:00:41,040 --> 00:00:42,719
happens at each step

23
00:00:42,719 --> 00:00:44,320
and we'll end with a demo of wireguard

24
00:00:44,320 --> 00:00:45,760
in action so you can see how simple it

25
00:00:45,760 --> 00:00:47,280
is to use yourself

26
00:00:47,280 --> 00:00:48,559
this talk is meant for software

27
00:00:48,559 --> 00:00:50,079
engineers or security engineers who have

28
00:00:50,079 --> 00:00:52,399
some understanding of network protocols

29
00:00:52,399 --> 00:00:54,079
and some cryptographic primitives but

30
00:00:54,079 --> 00:00:56,480
not a deep cryptographic background

31
00:00:56,480 --> 00:00:57,600
and there's nothing that we're going to

32
00:00:57,600 --> 00:00:59,440
cover today that you can't read in the

33
00:00:59,440 --> 00:01:01,520
wire guard white paper but we get it not

34
00:01:01,520 --> 00:01:03,120
everyone wants to read a crypto

35
00:01:03,120 --> 00:01:04,479
heavyweight paper so we'll leave you

36
00:01:04,479 --> 00:01:06,000
with with a few links at the end where

37
00:01:06,000 --> 00:01:07,280
you can learn more

38
00:01:07,280 --> 00:01:08,799
let's jump in

39
00:01:08,799 --> 00:01:11,760
so first off what is wireguard

40
00:01:11,760 --> 00:01:14,320
basically it's a layer 3 tunneling

41
00:01:14,320 --> 00:01:17,200
protocol that lets two peers establish

42
00:01:17,200 --> 00:01:19,439
an end-to-end encrypted connection

43
00:01:19,439 --> 00:01:20,479
there's a couple of things worth

44
00:01:20,479 --> 00:01:21,520
highlighting specifically about

45
00:01:21,520 --> 00:01:23,880
wireguard wire guard encapsulates both

46
00:01:23,880 --> 00:01:27,520
ipv4 and ipv6 traffic at layer 3 and

47
00:01:27,520 --> 00:01:30,079
only at layer 3 it's opinionated

48
00:01:30,079 --> 00:01:32,320
wireguard is end and encrypted using

49
00:01:32,320 --> 00:01:34,640
modern cryptography again opinionated

50
00:01:34,640 --> 00:01:35,680
there's nothing for the user to

51
00:01:35,680 --> 00:01:37,280
configure and there's no way for the

52
00:01:37,280 --> 00:01:39,280
user to downgrade the cryptography

53
00:01:39,280 --> 00:01:41,040
and although the cryptography is modern

54
00:01:41,040 --> 00:01:43,280
it's conservative and well-reviewed

55
00:01:43,280 --> 00:01:44,560
using conservative well-reviewed

56
00:01:44,560 --> 00:01:46,720
protocols and ciphers

57
00:01:46,720 --> 00:01:48,399
and wireguard appears stateless to the

58
00:01:48,399 --> 00:01:50,640
user they not only don't have any

59
00:01:50,640 --> 00:01:52,399
cryptography or cryptographic choices to

60
00:01:52,399 --> 00:01:53,920
make and configure they have very few

61
00:01:53,920 --> 00:01:56,320
other configurations to make as well

62
00:01:56,320 --> 00:01:57,520
once connections are established

63
00:01:57,520 --> 00:01:59,600
wireguard handles key rotation and uses

64
00:01:59,600 --> 00:02:02,479
timers to ensure connections keep alive

65
00:02:02,479 --> 00:02:05,040
key exchanges connections reconnections

66
00:02:05,040 --> 00:02:07,439
disconnections and discovery all happen

67
00:02:07,439 --> 00:02:08,878
behind the scenes without the user

68
00:02:08,878 --> 00:02:11,680
needing to take explicit action

69
00:02:11,680 --> 00:02:14,959
wireguard uses public keys rather than

70
00:02:14,959 --> 00:02:17,599
public ip addresses to identify peers so

71
00:02:17,599 --> 00:02:19,440
as peers move connections can still

72
00:02:19,440 --> 00:02:21,200
persist the only thing that you need to

73
00:02:21,200 --> 00:02:22,640
configure is what peers you want to

74
00:02:22,640 --> 00:02:24,480
communicate with

75
00:02:24,480 --> 00:02:26,560
and so overall like wireguard is

76
00:02:26,560 --> 00:02:28,239
explicitly designed to optimize for a

77
00:02:28,239 --> 00:02:30,800
couple of things security performance

78
00:02:30,800 --> 00:02:32,800
and ease of use we're not going to get

79
00:02:32,800 --> 00:02:34,080
much into this but that's where

80
00:02:34,080 --> 00:02:35,680
wireguard really shines compared to say

81
00:02:35,680 --> 00:02:38,879
openvpn or ipsec

82
00:02:41,200 --> 00:02:42,640
okay so i think it's useful to compare

83
00:02:42,640 --> 00:02:44,800
why i got to tls and i think this is

84
00:02:44,800 --> 00:02:46,879
useful because we all think about tls

85
00:02:46,879 --> 00:02:48,319
all day every day

86
00:02:48,319 --> 00:02:49,280
we

87
00:02:49,280 --> 00:02:51,280
use web browsers basically every

88
00:02:51,280 --> 00:02:52,800
connection we use over our web browsers

89
00:02:52,800 --> 00:02:54,160
today's tls and so there are lots of

90
00:02:54,160 --> 00:02:56,959
like implicit ideas that we that we get

91
00:02:56,959 --> 00:02:58,560
from it that we then immediately try and

92
00:02:58,560 --> 00:03:00,640
associate with other protocols and why i

93
00:03:00,640 --> 00:03:03,200
got is different in several ways

94
00:03:03,200 --> 00:03:04,879
the biggest one of these

95
00:03:04,879 --> 00:03:07,360
is it's a it's not a client server

96
00:03:07,360 --> 00:03:08,879
protocol there's not

97
00:03:08,879 --> 00:03:09,760
one

98
00:03:09,760 --> 00:03:11,920
uh one endpoint expecting to receive

99
00:03:11,920 --> 00:03:13,360
connections and another one that always

100
00:03:13,360 --> 00:03:15,120
sends connections instead these are two

101
00:03:15,120 --> 00:03:17,200
peers either side can initiate a

102
00:03:17,200 --> 00:03:19,360
connection and to do that both sides

103
00:03:19,360 --> 00:03:20,879
need to be configured to know about the

104
00:03:20,879 --> 00:03:22,640
other side before a connection can even

105
00:03:22,640 --> 00:03:23,519
start

106
00:03:23,519 --> 00:03:24,799
and that really leads into the second

107
00:03:24,799 --> 00:03:26,239
point which is there's no concept of a

108
00:03:26,239 --> 00:03:28,560
certificate authority route with wire

109
00:03:28,560 --> 00:03:31,120
guards so with tls our operating system

110
00:03:31,120 --> 00:03:33,040
has a long list of people it implicitly

111
00:03:33,040 --> 00:03:35,120
trusts to say who people are

112
00:03:35,120 --> 00:03:36,720
and everything is signed with one

113
00:03:36,720 --> 00:03:39,840
effectively by one of those routes

114
00:03:39,840 --> 00:03:41,440
telling us who people are instead with

115
00:03:41,440 --> 00:03:42,480
wireguard

116
00:03:42,480 --> 00:03:44,080
after you generate a public private key

117
00:03:44,080 --> 00:03:46,560
pair you have to move the public keys

118
00:03:46,560 --> 00:03:48,799
of up here to the other side of the

119
00:03:48,799 --> 00:03:50,480
connection beforehand

120
00:03:50,480 --> 00:03:51,680
the best way to think about this is it's

121
00:03:51,680 --> 00:03:54,319
like ssh without passwords when you want

122
00:03:54,319 --> 00:03:55,920
to ssh into a machine you already have

123
00:03:55,920 --> 00:03:57,920
to have moved your ssh public key into

124
00:03:57,920 --> 00:03:59,360
the authorized keys file on the other

125
00:03:59,360 --> 00:04:00,799
end of the machine on the other machine

126
00:04:00,799 --> 00:04:02,720
you're connecting to it's just the same

127
00:04:02,720 --> 00:04:04,319
with wireguard

128
00:04:04,319 --> 00:04:06,159
so another big difference is it's a

129
00:04:06,159 --> 00:04:09,439
udp-based protocol not tcp now with http

130
00:04:09,439 --> 00:04:12,840
3 there is a udp of sort of tls these

131
00:04:12,840 --> 00:04:16,478
days and there's the reason for using

132
00:04:16,478 --> 00:04:18,720
udp has there's a lot of similar reasons

133
00:04:18,720 --> 00:04:21,680
for the uh why http 3 uses udp but in

134
00:04:21,680 --> 00:04:22,639
addition

135
00:04:22,639 --> 00:04:25,040
uh udp is a much better transport for a

136
00:04:25,040 --> 00:04:27,040
layer 3 tunneling protocol because it

137
00:04:27,040 --> 00:04:30,080
helps avoid the sort of tcp in tcp

138
00:04:30,080 --> 00:04:31,120
issues

139
00:04:31,120 --> 00:04:32,800
when it comes to tunneling it's very

140
00:04:32,800 --> 00:04:35,040
difficult to get your window sizes right

141
00:04:35,040 --> 00:04:36,880
and deal with fragmentation of your

142
00:04:36,880 --> 00:04:39,600
internal tcp connection over another tcp

143
00:04:39,600 --> 00:04:41,520
connection

144
00:04:41,520 --> 00:04:43,280
there's also no standardized port which

145
00:04:43,280 --> 00:04:45,199
is very different from how we typically

146
00:04:45,199 --> 00:04:47,600
use tls we're usually connecting to 443

147
00:04:47,600 --> 00:04:49,600
or some equivalent

148
00:04:49,600 --> 00:04:50,560
and

149
00:04:50,560 --> 00:04:51,680
as a

150
00:04:51,680 --> 00:04:53,600
side benefit of this sort of noise based

151
00:04:53,600 --> 00:04:55,120
protocol where everyone knows about each

152
00:04:55,120 --> 00:04:57,199
other before making a connection

153
00:04:57,199 --> 00:04:58,240
is

154
00:04:58,240 --> 00:05:00,479
there's no sort of advertising of what's

155
00:05:00,479 --> 00:05:03,120
going on so if you if you connect to

156
00:05:03,120 --> 00:05:05,520
an ssh server of a netcat

157
00:05:05,520 --> 00:05:07,199
the first thing ssh does is it

158
00:05:07,199 --> 00:05:08,800
successfully creates a tcp connection

159
00:05:08,800 --> 00:05:10,479
and then the the server tells you what

160
00:05:10,479 --> 00:05:12,400
version precisely it's running and a lot

161
00:05:12,400 --> 00:05:14,000
of details about itself

162
00:05:14,000 --> 00:05:15,680
with wire guard that very first packet

163
00:05:15,680 --> 00:05:18,080
you send only gets responded to if that

164
00:05:18,080 --> 00:05:19,520
packet is proven that it's one of the

165
00:05:19,520 --> 00:05:20,639
peers

166
00:05:20,639 --> 00:05:22,479
of the machine you're talking to so you

167
00:05:22,479 --> 00:05:24,160
only get a response if you're meant to

168
00:05:24,160 --> 00:05:25,840
see one

169
00:05:25,840 --> 00:05:27,039
uh finally there's no protocol

170
00:05:27,039 --> 00:05:29,039
versioning which maya went into which

171
00:05:29,039 --> 00:05:31,120
means that uh if something was going to

172
00:05:31,120 --> 00:05:32,479
change inside the wire guide protocol

173
00:05:32,479 --> 00:05:33,840
would have to get a whole new name and

174
00:05:33,840 --> 00:05:36,639
would look radically different

175
00:05:36,639 --> 00:05:37,680
and then most importantly for me

176
00:05:37,680 --> 00:05:39,360
compared to what supplied the tls why

177
00:05:39,360 --> 00:05:41,520
god's small so the entire implementation

178
00:05:41,520 --> 00:05:43,120
of wire gun linux kernel including its

179
00:05:43,120 --> 00:05:44,639
cryptographic primitives fits in around

180
00:05:44,639 --> 00:05:46,320
4000 lines of c

181
00:05:46,320 --> 00:05:47,919
if you look at the ipsec implementation

182
00:05:47,919 --> 00:05:50,240
linux it's 100 times the size this is

183
00:05:50,240 --> 00:05:51,919
really neat it means you can put wire in

184
00:05:51,919 --> 00:05:54,080
all sorts of strange places you can put

185
00:05:54,080 --> 00:05:56,319
an entire network stack in user space

186
00:05:56,319 --> 00:05:58,000
inside a process which we do

187
00:05:58,000 --> 00:05:59,919
occasionally it's a lot of fun and you

188
00:05:59,919 --> 00:06:01,120
still end up with a network stack and

189
00:06:01,120 --> 00:06:03,280
wireguard being much smaller than ipsec

190
00:06:03,280 --> 00:06:06,520
or some equivalent

191
00:06:07,039 --> 00:06:08,880
so at a very high level what does the

192
00:06:08,880 --> 00:06:11,039
wire guard protocol do um it actually

193
00:06:11,039 --> 00:06:12,880
looks like a lot of other key exchange

194
00:06:12,880 --> 00:06:14,639
protocols but has some nice security

195
00:06:14,639 --> 00:06:16,400
properties and performance applications

196
00:06:16,400 --> 00:06:17,360
again because that's what it was

197
00:06:17,360 --> 00:06:18,560
optimized for

198
00:06:18,560 --> 00:06:21,120
um so let's take two peers alice and bob

199
00:06:21,120 --> 00:06:23,600
and they have pre-existing private

200
00:06:23,600 --> 00:06:25,520
public key pairs for their hosts in one

201
00:06:25,520 --> 00:06:27,120
regard as crosstalk just explained each

202
00:06:27,120 --> 00:06:29,520
peer is identified by its public key and

203
00:06:29,520 --> 00:06:31,120
you have to have those public keys

204
00:06:31,120 --> 00:06:32,479
shared with each other ahead of the

205
00:06:32,479 --> 00:06:34,319
protocol as part of their wire guard

206
00:06:34,319 --> 00:06:35,520
configurations

207
00:06:35,520 --> 00:06:36,720
so then when you get into the wire guard

208
00:06:36,720 --> 00:06:38,479
protocol itself this starts with the key

209
00:06:38,479 --> 00:06:40,560
exchange to initiate a new connection

210
00:06:40,560 --> 00:06:42,240
wireguard um

211
00:06:42,240 --> 00:06:43,759
tunisian new wire guard connection alice

212
00:06:43,759 --> 00:06:45,039
who's the initiator generates an

213
00:06:45,039 --> 00:06:46,960
ephemeral session key

214
00:06:46,960 --> 00:06:48,800
to communicate with bob now when i say

215
00:06:48,800 --> 00:06:50,080
generate i don't mean that alice

216
00:06:50,080 --> 00:06:51,520
generates right wireguard generates for

217
00:06:51,520 --> 00:06:53,199
alice the only thing that alice had to

218
00:06:53,199 --> 00:06:55,199
generate was her host private and public

219
00:06:55,199 --> 00:06:57,280
key so she sends bob information about

220
00:06:57,280 --> 00:06:59,280
her ephemeral session public key upon

221
00:06:59,280 --> 00:07:01,199
receiving alice's message bob verifies

222
00:07:01,199 --> 00:07:03,360
that alice is a known host then he also

223
00:07:03,360 --> 00:07:05,680
generates aka wireguard generates an

224
00:07:05,680 --> 00:07:07,440
ephemeral session key pair and replies

225
00:07:07,440 --> 00:07:09,199
to alice with some information about his

226
00:07:09,199 --> 00:07:10,960
ephemeral session public key

227
00:07:10,960 --> 00:07:12,000
and then each side has enough

228
00:07:12,000 --> 00:07:14,080
information to complete multiple

229
00:07:14,080 --> 00:07:16,400
diffie-hellman key exchanges using as

230
00:07:16,400 --> 00:07:17,840
inputs the combinations of their public

231
00:07:17,840 --> 00:07:20,560
and private static and ephemeral keys

232
00:07:20,560 --> 00:07:22,080
in order to generate session keys and

233
00:07:22,080 --> 00:07:24,000
since it only takes one request and one

234
00:07:24,000 --> 00:07:26,080
response to actually generate those keys

235
00:07:26,080 --> 00:07:28,080
it's a one round trip time

236
00:07:28,080 --> 00:07:29,520
key exchange

237
00:07:29,520 --> 00:07:31,199
and then alice and bob can use those

238
00:07:31,199 --> 00:07:32,720
session keys to send encrypted

239
00:07:32,720 --> 00:07:34,319
information uh to each other and that's

240
00:07:34,319 --> 00:07:35,199
it

241
00:07:35,199 --> 00:07:38,479
so what's notably missing here um

242
00:07:38,479 --> 00:07:40,560
there's no kind of protocol negotiation

243
00:07:40,560 --> 00:07:42,240
wireguard is opinionated and it doesn't

244
00:07:42,240 --> 00:07:44,400
have to have alice and bob agree on what

245
00:07:44,400 --> 00:07:46,160
cryptographic algorithms are going to be

246
00:07:46,160 --> 00:07:48,560
used as it's all decided ahead of time

247
00:07:48,560 --> 00:07:50,160
and in order to ensure that alice and

248
00:07:50,160 --> 00:07:51,840
bob can stay connected even if they have

249
00:07:51,840 --> 00:07:53,440
nothing to say to each other wireguard

250
00:07:53,440 --> 00:07:55,680
has a keep alive protocol it also

251
00:07:55,680 --> 00:07:57,599
automatically rotates keys for forward

252
00:07:57,599 --> 00:08:00,080
secrecy

253
00:08:00,400 --> 00:08:02,400
so let's step into the actual you know

254
00:08:02,400 --> 00:08:04,878
key exchange

255
00:08:05,360 --> 00:08:07,520
so let's start a session and this is the

256
00:08:07,520 --> 00:08:09,280
very first packet that gets sent when

257
00:08:09,280 --> 00:08:12,000
someone has queued up a uh something to

258
00:08:12,000 --> 00:08:14,240
send over the wire guard tunnel and so

259
00:08:14,240 --> 00:08:16,319
there's a handshake initiation

260
00:08:16,319 --> 00:08:18,720
and so to create this handshake

261
00:08:18,720 --> 00:08:21,759
initiation packet alice generates

262
00:08:21,759 --> 00:08:23,919
alice's software for her generates this

263
00:08:23,919 --> 00:08:25,520
uh this ephemeral

264
00:08:25,520 --> 00:08:26,960
public private key pair that maya

265
00:08:26,960 --> 00:08:28,879
mentioned and the first part of the

266
00:08:28,879 --> 00:08:30,879
packet is the ephemeral public key at

267
00:08:30,879 --> 00:08:33,279
the top and then the rest of the packet

268
00:08:33,279 --> 00:08:35,279
is encrypted both with the ephemeral

269
00:08:35,279 --> 00:08:37,919
private key and with bob's static public

270
00:08:37,919 --> 00:08:41,279
key that's the key that bob generated

271
00:08:41,279 --> 00:08:44,480
himself and shared with alice earlier

272
00:08:44,480 --> 00:08:46,080
this uh

273
00:08:46,080 --> 00:08:49,680
this contains enough information for

274
00:08:49,680 --> 00:08:51,600
bob to determine it was alice who sent

275
00:08:51,600 --> 00:08:53,120
the packet

276
00:08:53,120 --> 00:08:56,160
and to initiate a conversation it also

277
00:08:56,160 --> 00:08:58,720
starts some timers uh on both ends uh

278
00:08:58,720 --> 00:09:00,240
when the packet is both sent and

279
00:09:00,240 --> 00:09:02,640
received uh which wire guard will use to

280
00:09:02,640 --> 00:09:05,120
decide when the handshake has you know

281
00:09:05,120 --> 00:09:06,959
taken too long to succeed and when it

282
00:09:06,959 --> 00:09:09,839
should be updated

283
00:09:11,360 --> 00:09:13,440
and then bob can respond to alice's

284
00:09:13,440 --> 00:09:14,399
handshake

285
00:09:14,399 --> 00:09:16,640
so to do so bob first generates his

286
00:09:16,640 --> 00:09:18,560
ephemeral public private key pair for

287
00:09:18,560 --> 00:09:20,000
this session

288
00:09:20,000 --> 00:09:21,839
his handshake response to alice includes

289
00:09:21,839 --> 00:09:23,440
identifiers for both alice and bob so he

290
00:09:23,440 --> 00:09:25,519
can in in his registry so he knows that

291
00:09:25,519 --> 00:09:26,880
he's talking alice and this is a session

292
00:09:26,880 --> 00:09:29,120
with alice uh it includes his ephemeral

293
00:09:29,120 --> 00:09:30,240
public key

294
00:09:30,240 --> 00:09:32,320
um a key derived from his ephemeral

295
00:09:32,320 --> 00:09:34,720
private key analysis public static key

296
00:09:34,720 --> 00:09:37,120
some hashes to verify all of it

297
00:09:37,120 --> 00:09:39,040
and then also some some cookies to let

298
00:09:39,040 --> 00:09:40,959
alice try to communicate with bob again

299
00:09:40,959 --> 00:09:42,240
if he's under loads this only happens if

300
00:09:42,240 --> 00:09:44,240
bob is under load he basically has a way

301
00:09:44,240 --> 00:09:46,240
to say hey i'm too busy to respond right

302
00:09:46,240 --> 00:09:49,120
now um and wireguard gives you a

303
00:09:49,120 --> 00:09:51,040
mechanism that adds another round trip

304
00:09:51,040 --> 00:09:53,040
and tells tells bob that he should

305
00:09:53,040 --> 00:09:54,560
really respond to alice next time she

306
00:09:54,560 --> 00:09:56,000
communicates with him again so there's a

307
00:09:56,000 --> 00:09:58,000
way of kind of dealing with um servers

308
00:09:58,000 --> 00:09:59,440
that are under load as well and

309
00:09:59,440 --> 00:10:02,399
everything is chained and hashed a bunch

310
00:10:02,399 --> 00:10:03,920
so that reply that message does a couple

311
00:10:03,920 --> 00:10:05,040
of things

312
00:10:05,040 --> 00:10:06,880
bob shares his public thermal key which

313
00:10:06,880 --> 00:10:08,560
alice will then be able to use in the

314
00:10:08,560 --> 00:10:10,560
next step to generate a session key uh

315
00:10:10,560 --> 00:10:11,839
it confirms that the session is with

316
00:10:11,839 --> 00:10:14,480
alice um the identifiers let bob know

317
00:10:14,480 --> 00:10:16,480
that that's the session he's replying to

318
00:10:16,480 --> 00:10:18,399
and the hashing and cheney make sure

319
00:10:18,399 --> 00:10:20,160
that he those those messages are not

320
00:10:20,160 --> 00:10:22,240
repliable in the future

321
00:10:22,240 --> 00:10:23,839
um and it assures that only alice can

322
00:10:23,839 --> 00:10:25,200
get this message again because it uses

323
00:10:25,200 --> 00:10:27,440
her public static key

324
00:10:27,440 --> 00:10:29,120
what you don't see here is there's

325
00:10:29,120 --> 00:10:30,160
nothing here that explicitly

326
00:10:30,160 --> 00:10:32,800
authenticates bob to alice

327
00:10:32,800 --> 00:10:34,720
since alice sent the first message to

328
00:10:34,720 --> 00:10:37,040
bob uh to you know to

329
00:10:37,040 --> 00:10:38,640
bob's static public key as part of her

330
00:10:38,640 --> 00:10:40,160
first message the fact that bob is

331
00:10:40,160 --> 00:10:41,360
replying at all the fact that he was

332
00:10:41,360 --> 00:10:42,959
able to decrypt and reply to the message

333
00:10:42,959 --> 00:10:45,120
identifies him as being bob there's no

334
00:10:45,120 --> 00:10:47,200
explicit other authentication

335
00:10:47,200 --> 00:10:48,720
and so now

336
00:10:48,720 --> 00:10:50,959
we have what we need to be able to

337
00:10:50,959 --> 00:10:52,800
to generate some some session keys so

338
00:10:52,800 --> 00:10:54,000
both parties have their static and

339
00:10:54,000 --> 00:10:55,680
ephemeral key pairs

340
00:10:55,680 --> 00:10:57,519
and the other parties static and

341
00:10:57,519 --> 00:10:59,440
ephemeral public keys

342
00:10:59,440 --> 00:11:01,839
so this is actually the easiest step to

343
00:11:01,839 --> 00:11:02,959
understand if you remember

344
00:11:02,959 --> 00:11:04,720
diffie-hellman key exchange

345
00:11:04,720 --> 00:11:06,320
diffie-hellman key exchange gives you a

346
00:11:06,320 --> 00:11:08,800
way to combine alice's private key with

347
00:11:08,800 --> 00:11:11,600
bob's public key or

348
00:11:11,600 --> 00:11:13,680
bob's private key with alice's public

349
00:11:13,680 --> 00:11:15,360
key so that you get the same shared key

350
00:11:15,360 --> 00:11:16,560
out of it

351
00:11:16,560 --> 00:11:18,240
in this case we're actually doing this a

352
00:11:18,240 --> 00:11:20,560
bunch with all the the chaining keys

353
00:11:20,560 --> 00:11:22,079
that they previously generated in the in

354
00:11:22,079 --> 00:11:24,240
the handshake and plugging that into an

355
00:11:24,240 --> 00:11:26,560
hmac derived key function to get a share

356
00:11:26,560 --> 00:11:28,480
transport key for this session

357
00:11:28,480 --> 00:11:30,079
so looking more specifically at the keys

358
00:11:30,079 --> 00:11:32,399
that alice had previously generated

359
00:11:32,399 --> 00:11:34,880
she has derived a key from her

360
00:11:34,880 --> 00:11:36,640
private static key and bob's public

361
00:11:36,640 --> 00:11:38,640
ephemeral key from her private ephemeral

362
00:11:38,640 --> 00:11:41,360
key and bob's public static key and from

363
00:11:41,360 --> 00:11:43,600
her private ephemeral key and bob's

364
00:11:43,600 --> 00:11:45,279
public ephemeral key

365
00:11:45,279 --> 00:11:47,200
and that's enough for them to establish

366
00:11:47,200 --> 00:11:49,200
a common session key

367
00:11:49,200 --> 00:11:51,120
she also derived a key from her private

368
00:11:51,120 --> 00:11:53,839
static key and bub's public static key

369
00:11:53,839 --> 00:11:55,200
but that's what let her authenticate the

370
00:11:55,200 --> 00:11:56,480
first message rather than needing

371
00:11:56,480 --> 00:12:00,160
another round trip just to do that

372
00:12:00,240 --> 00:12:01,600
okay so now we've sent a handshake

373
00:12:01,600 --> 00:12:03,120
initiation and a handshake response and

374
00:12:03,120 --> 00:12:04,480
it's time for the first actual piece of

375
00:12:04,480 --> 00:12:07,279
data to be transferred by alice to bob

376
00:12:07,279 --> 00:12:09,519
uh and this is the data exchange

377
00:12:09,519 --> 00:12:10,800
this is actually a component of the

378
00:12:10,800 --> 00:12:13,440
handshake because at this point bob has

379
00:12:13,440 --> 00:12:14,880
responded to alice's handshake

380
00:12:14,880 --> 00:12:17,360
initiation but doesn't realize that

381
00:12:17,360 --> 00:12:19,440
alice has received the response this

382
00:12:19,440 --> 00:12:21,040
data exchange is the proof because it's

383
00:12:21,040 --> 00:12:22,800
udp and packets can easily be lost

384
00:12:22,800 --> 00:12:23,680
there's nothing underneath

385
00:12:23,680 --> 00:12:27,040
reconstructing the session so the uh

386
00:12:27,040 --> 00:12:28,560
the data exchange first data exchange

387
00:12:28,560 --> 00:12:30,000
packet is very important for

388
00:12:30,000 --> 00:12:32,160
establishing the session uh and this is

389
00:12:32,160 --> 00:12:34,480
just encrypted and sent with charge r20

390
00:12:34,480 --> 00:12:36,000
uh and this is how most of the packets

391
00:12:36,000 --> 00:12:38,240
move there's some per packet overhead 60

392
00:12:38,240 --> 00:12:39,600
or 80 bytes depending on whether it's

393
00:12:39,600 --> 00:12:42,160
ipv4 or ipv6

394
00:12:42,160 --> 00:12:43,920
and this means you end up reducing your

395
00:12:43,920 --> 00:12:45,600
mtu slightly to make up for that

396
00:12:45,600 --> 00:12:46,880
difference

397
00:12:46,880 --> 00:12:48,959
there's also a series of timers that are

398
00:12:48,959 --> 00:12:51,200
running as part of this

399
00:12:51,200 --> 00:12:54,480
so uh wireguard follows the

400
00:12:54,480 --> 00:12:56,320
standard model of after a certain amount

401
00:12:56,320 --> 00:13:00,160
of data has been transferred the uh

402
00:13:00,160 --> 00:13:01,839
the session keys need to be rotated but

403
00:13:01,839 --> 00:13:03,360
it also starts wall timers for doing

404
00:13:03,360 --> 00:13:05,600
some of this rotation

405
00:13:05,600 --> 00:13:08,399
this is to ensure that

406
00:13:08,399 --> 00:13:10,240
keys just don't linger for too long so

407
00:13:10,240 --> 00:13:12,240
every two minutes or so that handshake

408
00:13:12,240 --> 00:13:14,000
that we just saw happens again over a

409
00:13:14,000 --> 00:13:16,800
running connection to reestablish

410
00:13:16,800 --> 00:13:18,639
a new set of session keys it's rather

411
00:13:18,639 --> 00:13:20,720
nice that it can use the same handshake

412
00:13:20,720 --> 00:13:22,399
that's used to establish connections as

413
00:13:22,399 --> 00:13:24,560
its re-establishment system

414
00:13:24,560 --> 00:13:26,160
uh and if handshakes are lost they can

415
00:13:26,160 --> 00:13:27,839
be resent after a certain amount of time

416
00:13:27,839 --> 00:13:29,279
they're sent with some amount of jitter

417
00:13:29,279 --> 00:13:30,720
in case both sides are attempting to

418
00:13:30,720 --> 00:13:32,480
handshake simultaneously

419
00:13:32,480 --> 00:13:34,160
which can cause them to race and then

420
00:13:34,160 --> 00:13:35,600
they don't successfully move information

421
00:13:35,600 --> 00:13:36,399
around

422
00:13:36,399 --> 00:13:38,720
uh this sort of constant uh refreshing

423
00:13:38,720 --> 00:13:42,560
uh ensures perfect forward secrecy

424
00:13:44,240 --> 00:13:45,360
all right so now that we've gone over

425
00:13:45,360 --> 00:13:47,440
the protocol and how timers work let's

426
00:13:47,440 --> 00:13:49,040
cover the cryptography that's used in

427
00:13:49,040 --> 00:13:50,959
wireguard it's a long list of protocols

428
00:13:50,959 --> 00:13:52,560
and ciphers and honestly it overwhelmed

429
00:13:52,560 --> 00:13:54,720
me a little bit when i first saw it

430
00:13:54,720 --> 00:13:56,639
so the key exchange that we talked

431
00:13:56,639 --> 00:13:58,560
through in alice and bob's handshake

432
00:13:58,560 --> 00:14:00,240
follows the noise framework and

433
00:14:00,240 --> 00:14:03,600
specifically uses the noise ik protocol

434
00:14:03,600 --> 00:14:05,279
optionally you can use a pre-shared

435
00:14:05,279 --> 00:14:06,880
symmetric key as part of the key

436
00:14:06,880 --> 00:14:09,839
derivation this is just a base64 encoded

437
00:14:09,839 --> 00:14:12,720
random 256 bits used to protect against

438
00:14:12,720 --> 00:14:15,040
potential advances in quantum computing

439
00:14:15,040 --> 00:14:16,560
given that the ciphers that you use the

440
00:14:16,560 --> 00:14:17,920
asymmetric crypto that you use in

441
00:14:17,920 --> 00:14:19,600
wireguard would be susceptible to

442
00:14:19,600 --> 00:14:22,720
quantum computers so we have 256 bits

443
00:14:22,720 --> 00:14:24,639
following grover's algorithm to break

444
00:14:24,639 --> 00:14:26,480
that you need 2 to the 128 complexity

445
00:14:26,480 --> 00:14:29,120
which is sufficient for most users

446
00:14:29,120 --> 00:14:30,560
note that this pre-shared key if you're

447
00:14:30,560 --> 00:14:33,199
going to use it is only used in the

448
00:14:33,199 --> 00:14:34,880
uh key exchange process where the

449
00:14:34,880 --> 00:14:36,240
asymmetric crypto is that's the part

450
00:14:36,240 --> 00:14:37,920
that's susceptible to quantum computing

451
00:14:37,920 --> 00:14:40,639
here and it's not used as part of your

452
00:14:40,639 --> 00:14:42,000
your the encryption of your data your

453
00:14:42,000 --> 00:14:43,839
packets that are sent between users so

454
00:14:43,839 --> 00:14:44,959
what that means is that there's no

455
00:14:44,959 --> 00:14:46,240
there's no performance impact there's no

456
00:14:46,240 --> 00:14:47,440
overhead of actually adding in this

457
00:14:47,440 --> 00:14:50,079
pre-shared key

458
00:14:50,240 --> 00:14:51,680
next up the static and ephemeral keys

459
00:14:51,680 --> 00:14:53,399
that alice and bob use are both

460
00:14:53,399 --> 00:14:56,399
curve25519 it's an elliptic curve which

461
00:14:56,399 --> 00:14:57,680
allows us to use diffie-hellman

462
00:14:57,680 --> 00:14:59,920
afterwards as part of our key exchange

463
00:14:59,920 --> 00:15:02,000
the key derivation function is an hmac

464
00:15:02,000 --> 00:15:03,839
key derivation function it's used to

465
00:15:03,839 --> 00:15:05,279
convert the shared secrets that we get

466
00:15:05,279 --> 00:15:06,800
out of diffie-hellman

467
00:15:06,800 --> 00:15:08,079
to key material that we can use for

468
00:15:08,079 --> 00:15:09,680
symmetric encryption

469
00:15:09,680 --> 00:15:11,120
the symmetric encryption is done with an

470
00:15:11,120 --> 00:15:14,160
aead using the stream cipher tasha 20

471
00:15:14,160 --> 00:15:15,760
for encryption and poly1305 for

472
00:15:15,760 --> 00:15:16,959
authentication as crash i was just

473
00:15:16,959 --> 00:15:18,079
saying

474
00:15:18,079 --> 00:15:19,760
and finally the hashing that we need as

475
00:15:19,760 --> 00:15:21,760
part of generating the hmax and hashing

476
00:15:21,760 --> 00:15:24,959
a bunch of things throughout is blake2s

477
00:15:24,959 --> 00:15:26,399
so that's a lot of detail

478
00:15:26,399 --> 00:15:28,320
there's two things i really want you to

479
00:15:28,320 --> 00:15:30,399
get out of this slide the first one is

480
00:15:30,399 --> 00:15:32,240
that all the cryptography that's used in

481
00:15:32,240 --> 00:15:34,880
wireguard is reviewed and modern but

482
00:15:34,880 --> 00:15:35,959
conservative

483
00:15:35,959 --> 00:15:38,480
curve25519 is considered a best-in-class

484
00:15:38,480 --> 00:15:40,639
elliptic curve and it's also very

485
00:15:40,639 --> 00:15:43,279
performant very fast um these ciphers

486
00:15:43,279 --> 00:15:45,199
are all more than a decade old they're

487
00:15:45,199 --> 00:15:46,959
well reviewed in the industry published

488
00:15:46,959 --> 00:15:48,959
ietf standards like there's nothing

489
00:15:48,959 --> 00:15:51,040
fishy going on with the crypto here

490
00:15:51,040 --> 00:15:53,440
however wireguard won't meet your fips

491
00:15:53,440 --> 00:15:55,199
you know requirements because not all of

492
00:15:55,199 --> 00:15:56,480
these have been pursued for fips

493
00:15:56,480 --> 00:15:58,160
compliance

494
00:15:58,160 --> 00:15:59,519
the second thing i want to want you to

495
00:15:59,519 --> 00:16:00,800
get out of this slide is that all of the

496
00:16:00,800 --> 00:16:02,240
cryptography used in wire guard and

497
00:16:02,240 --> 00:16:03,839
we've said this a few times now is

498
00:16:03,839 --> 00:16:05,839
decided ahead of time there's no cipher

499
00:16:05,839 --> 00:16:08,639
agility no negotiation and no way to

500
00:16:08,639 --> 00:16:10,959
downgrade the cryptography that you use

501
00:16:10,959 --> 00:16:12,639
and um as crash will also mention

502
00:16:12,639 --> 00:16:14,480
briefly if if something breaks if one of

503
00:16:14,480 --> 00:16:16,639
these protocols breaks um the cyprus

504
00:16:16,639 --> 00:16:19,519
breaks there's there's a way for us to

505
00:16:19,519 --> 00:16:20,800
potentially swap this out or update this

506
00:16:20,800 --> 00:16:21,920
in the future if there's an issue

507
00:16:21,920 --> 00:16:23,440
discovered so what you see at the bottom

508
00:16:23,440 --> 00:16:25,600
of the slide this like long string is

509
00:16:25,600 --> 00:16:27,040
part of the construction string that's

510
00:16:27,040 --> 00:16:28,240
actually passed in as part of the

511
00:16:28,240 --> 00:16:30,079
handshake used for computing keys not

512
00:16:30,079 --> 00:16:31,120
before the handshake right there's no

513
00:16:31,120 --> 00:16:33,120
negotiation as part of the handshake and

514
00:16:33,120 --> 00:16:34,639
so if something you know if a new

515
00:16:34,639 --> 00:16:36,000
version of wire guard would come out and

516
00:16:36,000 --> 00:16:37,839
knew a new type of wire guard would have

517
00:16:37,839 --> 00:16:40,000
to be to come out um you would know that

518
00:16:40,000 --> 00:16:41,759
you're communicating with uh something

519
00:16:41,759 --> 00:16:42,720
that's broken because you would know

520
00:16:42,720 --> 00:16:44,320
that the key the keys that you had were

521
00:16:44,320 --> 00:16:47,600
generated using these ciphers

522
00:16:49,040 --> 00:16:50,399
okay let's try something

523
00:16:50,399 --> 00:16:52,320
that probably won't work uh which is

524
00:16:52,320 --> 00:16:54,320
always fun let's try a demo let's see if

525
00:16:54,320 --> 00:16:56,639
we can make wire guard work

526
00:16:56,639 --> 00:16:58,480
now let me just

527
00:16:58,480 --> 00:17:01,759
prep this off screen

528
00:17:03,199 --> 00:17:06,000
can you hold this for me

529
00:17:06,959 --> 00:17:09,359
oh thank you

530
00:17:09,359 --> 00:17:11,280
you're not currently presenting

531
00:17:11,280 --> 00:17:13,119
i'm not i just didn't want to embarrass

532
00:17:13,119 --> 00:17:15,280
myself too much i thought i'd do the

533
00:17:15,280 --> 00:17:17,199
pre-work of establishing the ssh session

534
00:17:17,199 --> 00:17:20,720
beforehand so let's try

535
00:17:20,720 --> 00:17:22,400
no it won't let me drag that across

536
00:17:22,400 --> 00:17:23,679
let's figure out how to stop the

537
00:17:23,679 --> 00:17:26,319
presentation

538
00:17:26,319 --> 00:17:29,559
that worked

539
00:17:34,000 --> 00:17:35,840
amazing

540
00:17:35,840 --> 00:17:38,000
i found it all right

541
00:17:38,000 --> 00:17:39,600
this is always fun it always breaks in

542
00:17:39,600 --> 00:17:40,880
new and interesting ways when you try

543
00:17:40,880 --> 00:17:43,120
and do any kind of live demo so what

544
00:17:43,120 --> 00:17:45,440
i've got here are two uh

545
00:17:45,440 --> 00:17:47,360
two virtual machines both linux machines

546
00:17:47,360 --> 00:17:48,799
running on my mac because i attempted to

547
00:17:48,799 --> 00:17:49,840
do this

548
00:17:49,840 --> 00:17:52,080
uh

549
00:17:52,880 --> 00:17:55,120
uh on my mac and couldn't make it work

550
00:17:55,120 --> 00:17:57,760
uh let's see if i can type in a password

551
00:17:57,760 --> 00:18:00,880
don't worry it's not a real password

552
00:18:00,880 --> 00:18:04,000
i'll pass this back to you

553
00:18:08,080 --> 00:18:11,120
okay so

554
00:18:12,960 --> 00:18:14,400
this is what a wire guide configuration

555
00:18:14,400 --> 00:18:15,600
file looks like

556
00:18:15,600 --> 00:18:18,400
it contains uh a definition of the

557
00:18:18,400 --> 00:18:20,080
machine that the wire guard is running

558
00:18:20,080 --> 00:18:22,320
on so it specifies the ip address in the

559
00:18:22,320 --> 00:18:23,919
tunnel that wants to use the port to

560
00:18:23,919 --> 00:18:26,559
listen to on the physical ip address

561
00:18:26,559 --> 00:18:29,440
and the private key of the uh the device

562
00:18:29,440 --> 00:18:31,840
uh then it specifies a set of peers that

563
00:18:31,840 --> 00:18:33,679
you want to connect to uh in particular

564
00:18:33,679 --> 00:18:35,600
it specifies one peer here and it lists

565
00:18:35,600 --> 00:18:37,360
the public key of that peer

566
00:18:37,360 --> 00:18:39,600
and it lists uh

567
00:18:39,600 --> 00:18:41,200
let me just see if i can show you the

568
00:18:41,200 --> 00:18:42,400
other side as well

569
00:18:42,400 --> 00:18:44,720
and then it lists the physical ip

570
00:18:44,720 --> 00:18:46,720
endpoint that you can reach it at

571
00:18:46,720 --> 00:18:48,320
and the tunnel ip address you would

572
00:18:48,320 --> 00:18:50,080
expect of that machine so in this case

573
00:18:50,080 --> 00:18:51,679
we have two virtual machines running on

574
00:18:51,679 --> 00:18:53,520
ten two on one fifty five three and

575
00:18:53,520 --> 00:18:55,440
fifty five four uh and we're going to

576
00:18:55,440 --> 00:18:57,280
create these uh

577
00:18:57,280 --> 00:18:59,679
internal tunnel ips of 10 993 and

578
00:18:59,679 --> 00:19:01,600
109.994

579
00:19:01,600 --> 00:19:04,480
and what we've got here uh so

580
00:19:04,480 --> 00:19:05,679
this machine

581
00:19:05,679 --> 00:19:07,200
which is machine number three has the

582
00:19:07,200 --> 00:19:09,039
public key that matches the private key

583
00:19:09,039 --> 00:19:10,480
of the other machine and this machine

584
00:19:10,480 --> 00:19:12,400
has the public key that matches the

585
00:19:12,400 --> 00:19:14,799
private key of the other machine

586
00:19:14,799 --> 00:19:17,200
and so

587
00:19:17,200 --> 00:19:18,480
let's see what else do you need to know

588
00:19:18,480 --> 00:19:19,520
about this

589
00:19:19,520 --> 00:19:20,880
that's enough to know let's see if we

590
00:19:20,880 --> 00:19:24,440
can actually make them talk

591
00:19:32,240 --> 00:19:33,360
i'm really impressed that you're typing

592
00:19:33,360 --> 00:19:36,240
like over your shoulder

593
00:19:36,240 --> 00:19:38,320
it's the only way to do it it's uh it's

594
00:19:38,320 --> 00:19:39,600
really important you have as many things

595
00:19:39,600 --> 00:19:41,280
in a demo that can go wrong as possible

596
00:19:41,280 --> 00:19:42,799
because that's really the fun of

597
00:19:42,799 --> 00:19:44,160
watching a demo

598
00:19:44,160 --> 00:19:45,600
so what i've done now is i've turned on

599
00:19:45,600 --> 00:19:47,520
debugging mode on this virtual machine

600
00:19:47,520 --> 00:19:49,919
uh and we're we're trailing the output

601
00:19:49,919 --> 00:19:52,400
of wireguard's kernel responses

602
00:19:52,400 --> 00:19:55,520
and now we will try

603
00:20:00,559 --> 00:20:02,159
so what we have here is the virtual

604
00:20:02,159 --> 00:20:03,679
machine on the right

605
00:20:03,679 --> 00:20:04,960
is pinging the virtual machine on the

606
00:20:04,960 --> 00:20:06,720
left and the virtual machine on the left

607
00:20:06,720 --> 00:20:08,640
received a handshake initiation from the

608
00:20:08,640 --> 00:20:10,159
from the pier and it sent the handshake

609
00:20:10,159 --> 00:20:11,200
response

610
00:20:11,200 --> 00:20:13,440
and then the ping inside the uh the

611
00:20:13,440 --> 00:20:15,840
wireguard tunnel is being relayed to the

612
00:20:15,840 --> 00:20:18,080
uh

613
00:20:18,559 --> 00:20:19,840
to the kernel of the machine and that's

614
00:20:19,840 --> 00:20:21,039
where you're getting the ping response

615
00:20:21,039 --> 00:20:22,000
from

616
00:20:22,000 --> 00:20:23,840
okay that's how wireguard works it's

617
00:20:23,840 --> 00:20:25,679
actually pretty simple once it all works

618
00:20:25,679 --> 00:20:28,320
and fits together

619
00:20:31,600 --> 00:20:34,159
amazing so let's recap what we covered

620
00:20:34,159 --> 00:20:35,039
today

621
00:20:35,039 --> 00:20:37,280
um so to recap um first we went over

622
00:20:37,280 --> 00:20:39,919
what wireguard is wireguard is a layer

623
00:20:39,919 --> 00:20:42,080
three um tunneling protocol that lets

624
00:20:42,080 --> 00:20:43,600
two peers connect to each other in an

625
00:20:43,600 --> 00:20:45,600
end-to-end encrypted way

626
00:20:45,600 --> 00:20:48,240
we talked about how wireguard is

627
00:20:48,240 --> 00:20:49,520
different from other network protocols

628
00:20:49,520 --> 00:20:51,360
using udp and using public ip addresses

629
00:20:51,360 --> 00:20:52,720
as your identity

630
00:20:52,720 --> 00:20:54,559
then we went step by step from the

631
00:20:54,559 --> 00:20:56,559
ground up through how our good works

632
00:20:56,559 --> 00:20:58,799
wireguard is a one round trip time key

633
00:20:58,799 --> 00:21:01,679
exchange and the peers can use a shared

634
00:21:01,679 --> 00:21:03,600
session key that they derive to

635
00:21:03,600 --> 00:21:05,039
um for symmetric encryption to

636
00:21:05,039 --> 00:21:06,480
communicate directly with each other

637
00:21:06,480 --> 00:21:08,240
wireguard handles key rotation and uses

638
00:21:08,240 --> 00:21:10,799
various timers to keep connections alive

639
00:21:10,799 --> 00:21:12,159
and wireguard uses modern but

640
00:21:12,159 --> 00:21:13,440
conservative cryptography that is

641
00:21:13,440 --> 00:21:15,600
performant and well reviewed and lastly

642
00:21:15,600 --> 00:21:17,200
we demoed waragar so you could see how

643
00:21:17,200 --> 00:21:18,799
to set it up yourself

644
00:21:18,799 --> 00:21:20,320
there's lots more that we didn't cover

645
00:21:20,320 --> 00:21:22,400
about wireguard like performance and the

646
00:21:22,400 --> 00:21:23,840
threat model and how it compares to

647
00:21:23,840 --> 00:21:25,840
ipsec and openvpn

648
00:21:25,840 --> 00:21:27,760
formal verification so there's lots more

649
00:21:27,760 --> 00:21:29,520
that you can learn online

650
00:21:29,520 --> 00:21:30,240
so you should have a better

651
00:21:30,240 --> 00:21:32,159
understanding of how wireguard works

652
00:21:32,159 --> 00:21:34,720
and feel comfortable setting up yourself

653
00:21:34,720 --> 00:21:35,919
um here's a couple links where to learn

654
00:21:35,919 --> 00:21:37,919
more to get more information

655
00:21:37,919 --> 00:21:39,280
uh if you're interested in some tail

656
00:21:39,280 --> 00:21:41,280
scale stickers we have some and check

657
00:21:41,280 --> 00:21:42,799
out the link at the very bottom there to

658
00:21:42,799 --> 00:21:44,480
get some tail skill goodies

659
00:21:44,480 --> 00:21:46,400
thanks

660
00:21:46,400 --> 00:21:49,039
thank you everyone

661
00:21:50,799 --> 00:21:52,640
thank you for performing or presenting

662
00:21:52,640 --> 00:21:54,480
at besides performing for presenting yes

663
00:21:54,480 --> 00:21:55,760
performance

664
00:21:55,760 --> 00:21:59,280
yes we have this undisclosed brown

665
00:21:59,280 --> 00:22:01,679
bag from multigo yeah you get one too as

666
00:22:01,679 --> 00:22:02,799
well

667
00:22:02,799 --> 00:22:05,200
and thank you again i appreciate that we

668
00:22:05,200 --> 00:22:06,880
all do thank you

669
00:22:06,880 --> 00:22:10,180
thank you for joining us youtube

670
00:22:10,180 --> 00:22:13,309
[Applause]

