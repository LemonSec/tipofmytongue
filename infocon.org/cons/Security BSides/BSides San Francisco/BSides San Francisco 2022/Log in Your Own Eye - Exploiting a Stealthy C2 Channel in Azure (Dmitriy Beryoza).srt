1
00:00:00,080 --> 00:00:03,120
our next speaker will be

2
00:00:03,120 --> 00:00:06,480
dimitri berioza dmitry is a senior

3
00:00:06,480 --> 00:00:08,960
security researcher with vector ai

4
00:00:08,960 --> 00:00:11,120
working on threat detection in the cloud

5
00:00:11,120 --> 00:00:13,519
and on-prem's network

6
00:00:13,519 --> 00:00:15,599
and today he is going to be talking to

7
00:00:15,599 --> 00:00:18,240
us about

8
00:00:18,640 --> 00:00:19,600
log in

9
00:00:19,600 --> 00:00:21,760
your own eye exploiting a stealthy

10
00:00:21,760 --> 00:00:23,680
serial network in azure login

11
00:00:23,680 --> 00:00:26,960
infrastructure take it away dimitri

12
00:00:26,960 --> 00:00:27,840
all right

13
00:00:27,840 --> 00:00:29,679
all right thanks a lot hello everyone

14
00:00:29,679 --> 00:00:31,199
thanks for coming

15
00:00:31,199 --> 00:00:33,439
uh

16
00:00:33,440 --> 00:00:34,399
thanks

17
00:00:34,399 --> 00:00:35,280
um

18
00:00:35,280 --> 00:00:37,520
so i'd like to second what the previous

19
00:00:37,520 --> 00:00:40,320
presenters uh said the the presentation

20
00:00:40,320 --> 00:00:42,320
right before this one it's awesome to be

21
00:00:42,320 --> 00:00:44,719
back at conferences and let's hope that

22
00:00:44,719 --> 00:00:48,320
uh covet soon soon becomes uh distant

23
00:00:48,320 --> 00:00:51,200
unpleasant memory

24
00:00:51,360 --> 00:00:53,520
so um

25
00:00:53,520 --> 00:00:54,640
um

26
00:00:54,640 --> 00:00:56,399
here are my handles on discord and

27
00:00:56,399 --> 00:00:58,000
twitter and

28
00:00:58,000 --> 00:00:59,840
my linkedin information in case you want

29
00:00:59,840 --> 00:01:00,800
to

30
00:01:00,800 --> 00:01:02,879
sync up later

31
00:01:02,879 --> 00:01:04,640
i do security research

32
00:01:04,640 --> 00:01:06,320
at vectra ai

33
00:01:06,320 --> 00:01:07,119
and

34
00:01:07,119 --> 00:01:08,960
as a company we do

35
00:01:08,960 --> 00:01:10,960
thread detection in the cloud and in

36
00:01:10,960 --> 00:01:12,960
on-prem networks using ai and machine

37
00:01:12,960 --> 00:01:14,240
learning

38
00:01:14,240 --> 00:01:17,840
before that i was a pen tester and

39
00:01:17,840 --> 00:01:18,880
a

40
00:01:18,880 --> 00:01:20,400
secure software development advocate

41
00:01:20,400 --> 00:01:22,000
with ibm security

42
00:01:22,000 --> 00:01:24,000
and before i made a switch

43
00:01:24,000 --> 00:01:26,479
to security i was a developer for many

44
00:01:26,479 --> 00:01:28,400
many years

45
00:01:28,400 --> 00:01:29,280
i'm

46
00:01:29,280 --> 00:01:31,920
passionate about all things security um

47
00:01:31,920 --> 00:01:33,759
but in particular about reverse

48
00:01:33,759 --> 00:01:35,439
engineering secure software development

49
00:01:35,439 --> 00:01:38,560
and i just love ctf competitions

50
00:01:38,560 --> 00:01:41,759
i live in ottawa canada so uh hello from

51
00:01:41,759 --> 00:01:45,280
your friendly neighbor to the north

52
00:01:45,520 --> 00:01:46,240
so

53
00:01:46,240 --> 00:01:47,759
what are we going to talk about so i'll

54
00:01:47,759 --> 00:01:50,159
start with um going to brief some brief

55
00:01:50,159 --> 00:01:53,119
notes on azure and azure log analytics

56
00:01:53,119 --> 00:01:54,880
we'll talk about custom which is a query

57
00:01:54,880 --> 00:01:57,520
language in log analytics

58
00:01:57,520 --> 00:01:59,840
and about how it allows you to query

59
00:01:59,840 --> 00:02:03,200
external data and then we'll jump into

60
00:02:03,200 --> 00:02:04,799
how we can actually build a covered

61
00:02:04,799 --> 00:02:06,799
channel writing on that

62
00:02:06,799 --> 00:02:09,280
and i'll do a quick demo of a proof of

63
00:02:09,280 --> 00:02:11,760
concept code that i built

64
00:02:11,760 --> 00:02:13,599
then i'll touch on some mitigation

65
00:02:13,599 --> 00:02:17,359
strategies and we'll wrap up

66
00:02:17,760 --> 00:02:20,080
so i'm sure you you guys know about

67
00:02:20,080 --> 00:02:21,920
azure it's one of the big three cloud

68
00:02:21,920 --> 00:02:24,480
providers it's massive been available

69
00:02:24,480 --> 00:02:26,800
since since 2010

70
00:02:26,800 --> 00:02:27,840
and

71
00:02:27,840 --> 00:02:30,319
as of now it has over 200 services so

72
00:02:30,319 --> 00:02:32,720
it's just gigantic and it keeps growing

73
00:02:32,720 --> 00:02:35,280
just like the other cloud providers

74
00:02:35,280 --> 00:02:36,959
and of course these days security is one

75
00:02:36,959 --> 00:02:38,080
of their

76
00:02:38,080 --> 00:02:39,920
focal points they pay a lot of attention

77
00:02:39,920 --> 00:02:41,840
to it they have a lot of security

78
00:02:41,840 --> 00:02:43,840
specific services

79
00:02:43,840 --> 00:02:45,360
and i would say

80
00:02:45,360 --> 00:02:46,720
as far as

81
00:02:46,720 --> 00:02:49,040
cloud providers in general my in my

82
00:02:49,040 --> 00:02:50,879
estimation promise of better security in

83
00:02:50,879 --> 00:02:53,040
the cloud does hold

84
00:02:53,040 --> 00:02:55,120
uh but you have to be careful because

85
00:02:55,120 --> 00:02:56,560
when we talk about security in the cloud

86
00:02:56,560 --> 00:02:58,159
there is something called uh shared

87
00:02:58,159 --> 00:03:00,640
responsibility mode model

88
00:03:00,640 --> 00:03:02,480
and that means that depending on the

89
00:03:02,480 --> 00:03:04,480
type of service that you purchase from

90
00:03:04,480 --> 00:03:06,959
the cloud provider responsibility for

91
00:03:06,959 --> 00:03:08,480
securing it

92
00:03:08,480 --> 00:03:10,720
either either split between you

93
00:03:10,720 --> 00:03:13,200
and the provider or it's it rests fully

94
00:03:13,200 --> 00:03:14,959
on the provider or it rests on your

95
00:03:14,959 --> 00:03:17,920
shoulders as a customer and that's where

96
00:03:17,920 --> 00:03:20,239
i feel most of the breaches actually are

97
00:03:20,239 --> 00:03:22,319
happening it's where our responsibility

98
00:03:22,319 --> 00:03:23,920
for securing things

99
00:03:23,920 --> 00:03:25,920
is on the customer as far as

100
00:03:25,920 --> 00:03:27,360
infrastructure infrastructure is

101
00:03:27,360 --> 00:03:29,680
concerned like from what we see in the

102
00:03:29,680 --> 00:03:30,720
news

103
00:03:30,720 --> 00:03:32,720
there are not that many breaches that

104
00:03:32,720 --> 00:03:34,640
are happening in the core cloud

105
00:03:34,640 --> 00:03:36,560
infrastructure or they're happening and

106
00:03:36,560 --> 00:03:38,879
we don't hear about them they're fixed

107
00:03:38,879 --> 00:03:40,799
quietly uh

108
00:03:40,799 --> 00:03:42,720
there's a stark contrast with how many

109
00:03:42,720 --> 00:03:44,799
vulnerabilities are reported for

110
00:03:44,799 --> 00:03:48,239
uh software that's on-prem

111
00:03:48,560 --> 00:03:49,280
but

112
00:03:49,280 --> 00:03:50,239
the

113
00:03:50,239 --> 00:03:52,080
most of the problems occur when

114
00:03:52,080 --> 00:03:55,360
customers don't quite secure

115
00:03:55,360 --> 00:03:57,920
the functionality that's in their area

116
00:03:57,920 --> 00:04:01,280
of responsibility properly

117
00:04:01,280 --> 00:04:03,360
azure log analytics is a log management

118
00:04:03,360 --> 00:04:06,000
system in azure used by many other

119
00:04:06,000 --> 00:04:08,879
services such as monitor and sentinel

120
00:04:08,879 --> 00:04:10,720
and it's used to ingest

121
00:04:10,720 --> 00:04:13,920
and process logs from azure itself from

122
00:04:13,920 --> 00:04:16,238
on-prem environments and third-party

123
00:04:16,238 --> 00:04:18,000
logs so it's really universal in that

124
00:04:18,000 --> 00:04:19,440
way it has a variety of connectors you

125
00:04:19,440 --> 00:04:22,079
can connect can

126
00:04:22,079 --> 00:04:23,199
consume

127
00:04:23,199 --> 00:04:27,639
log data from a variety of sources

128
00:04:28,800 --> 00:04:30,240
it's used

129
00:04:30,240 --> 00:04:31,440
for

130
00:04:31,440 --> 00:04:33,520
by nature it's used for log analysis but

131
00:04:33,520 --> 00:04:34,720
in particular

132
00:04:34,720 --> 00:04:36,639
for security log analysis as security

133
00:04:36,639 --> 00:04:37,759
analysts

134
00:04:37,759 --> 00:04:40,479
the logs are really our only window into

135
00:04:40,479 --> 00:04:42,639
what's going on in our cloud

136
00:04:42,639 --> 00:04:43,759
environments

137
00:04:43,759 --> 00:04:46,560
so using logs is just invaluable for

138
00:04:46,560 --> 00:04:51,040
threat monitoring and incident response

139
00:04:52,960 --> 00:04:54,560
so log analytics has something called

140
00:04:54,560 --> 00:04:56,800
custom it's a query language it's a

141
00:04:56,800 --> 00:04:59,120
sql-like query language i'm not sure why

142
00:04:59,120 --> 00:04:59,919
they

143
00:04:59,919 --> 00:05:01,919
didn't choose to implement a sql a

144
00:05:01,919 --> 00:05:04,000
language with the sql syntax but it

145
00:05:04,000 --> 00:05:06,639
resembles sql if you look at this

146
00:05:06,639 --> 00:05:07,840
example here

147
00:05:07,840 --> 00:05:10,320
you will see that it's sort of reminds

148
00:05:10,320 --> 00:05:11,919
you of sql there's a there's a where

149
00:05:11,919 --> 00:05:13,120
clause

150
00:05:13,120 --> 00:05:14,880
you can summarize things you can group

151
00:05:14,880 --> 00:05:17,280
things there are all kinds of operators

152
00:05:17,280 --> 00:05:19,520
and functions you could include so if

153
00:05:19,520 --> 00:05:20,960
you know sql

154
00:05:20,960 --> 00:05:25,360
learning to use custo is very easy

155
00:05:25,360 --> 00:05:28,080
i've used it a lot in the past few years

156
00:05:28,080 --> 00:05:30,080
and it's it's great the syntax is

157
00:05:30,080 --> 00:05:31,840
powerful you can do a lot of different

158
00:05:31,840 --> 00:05:33,440
things you can

159
00:05:33,440 --> 00:05:35,360
you know do things with multiple tables

160
00:05:35,360 --> 00:05:37,360
and logs are presented as tables in this

161
00:05:37,360 --> 00:05:38,639
environment so

162
00:05:38,639 --> 00:05:40,479
essentially you're building

163
00:05:40,479 --> 00:05:43,360
data queries over these different log

164
00:05:43,360 --> 00:05:44,560
sources

165
00:05:44,560 --> 00:05:46,880
uh you could join you could intersect

166
00:05:46,880 --> 00:05:49,199
you could do all kinds of stuff and

167
00:05:49,199 --> 00:05:50,800
another

168
00:05:50,800 --> 00:05:52,320
important feature of it is that it's

169
00:05:52,320 --> 00:05:53,759
really fast

170
00:05:53,759 --> 00:05:55,199
i'm not sure how they do it exactly i

171
00:05:55,199 --> 00:05:56,960
think it's just massively indexed on the

172
00:05:56,960 --> 00:06:00,000
back end but your queries are

173
00:06:00,000 --> 00:06:02,560
very quick and that's very important in

174
00:06:02,560 --> 00:06:04,479
incident response because you can

175
00:06:04,479 --> 00:06:05,680
almost

176
00:06:05,680 --> 00:06:07,520
kind of write queries and execute them

177
00:06:07,520 --> 00:06:08,720
at the speed of thought you don't have

178
00:06:08,720 --> 00:06:10,400
to kind of write a query and then wait

179
00:06:10,400 --> 00:06:12,400
for it to complete so that's really

180
00:06:12,400 --> 00:06:13,840
important when you're trying to track

181
00:06:13,840 --> 00:06:15,680
down a specific incident

182
00:06:15,680 --> 00:06:18,080
uh breach of some kind

183
00:06:18,080 --> 00:06:20,880
and these queries are used uh in

184
00:06:20,880 --> 00:06:22,720
different areas

185
00:06:22,720 --> 00:06:24,880
of azure so azure sentinel for example

186
00:06:24,880 --> 00:06:28,080
uses makes you use of some built-in

187
00:06:28,080 --> 00:06:29,440
cousteau crease

188
00:06:29,440 --> 00:06:32,080
some queries that community

189
00:06:32,080 --> 00:06:35,039
provides uh they're crowdsourced and

190
00:06:35,039 --> 00:06:36,720
customers can also

191
00:06:36,720 --> 00:06:38,639
write their own hunting threat hunting

192
00:06:38,639 --> 00:06:41,039
queries plug them into azure sentinel

193
00:06:41,039 --> 00:06:43,680
run them on a periodic basis so it's a

194
00:06:43,680 --> 00:06:45,840
very good tool for

195
00:06:45,840 --> 00:06:48,160
trying to find malicious behavior in

196
00:06:48,160 --> 00:06:50,800
your environment

197
00:06:51,520 --> 00:06:54,319
the interesting feature of custom is

198
00:06:54,319 --> 00:06:55,599
ability

199
00:06:55,599 --> 00:06:58,000
to reach out to external

200
00:06:58,000 --> 00:06:59,840
data sources so

201
00:06:59,840 --> 00:07:01,440
in this example here

202
00:07:01,440 --> 00:07:02,639
there's an operator that's called

203
00:07:02,639 --> 00:07:04,080
external data

204
00:07:04,080 --> 00:07:06,800
and it allows consumption of web data

205
00:07:06,800 --> 00:07:09,599
sources as tables in your environment so

206
00:07:09,599 --> 00:07:11,039
in this example here

207
00:07:11,039 --> 00:07:12,000
we are

208
00:07:12,000 --> 00:07:14,000
basically loading a csv file that's

209
00:07:14,000 --> 00:07:15,759
hosted on github

210
00:07:15,759 --> 00:07:18,000
and it's presented

211
00:07:18,000 --> 00:07:19,280
as a table

212
00:07:19,280 --> 00:07:22,160
in custo and you could then join it with

213
00:07:22,160 --> 00:07:24,240
other tables to produce interesting

214
00:07:24,240 --> 00:07:26,639
behavior so for example you could

215
00:07:26,639 --> 00:07:28,400
do a

216
00:07:28,400 --> 00:07:32,400
you can consume a list of tor exit nodes

217
00:07:32,400 --> 00:07:34,880
and join that with your table that

218
00:07:34,880 --> 00:07:37,360
tracks sign ins in your environment and

219
00:07:37,360 --> 00:07:39,840
you could have a query that would alert

220
00:07:39,840 --> 00:07:42,240
you if there is a sign in to your cloud

221
00:07:42,240 --> 00:07:44,800
environment from a tor exit node so you

222
00:07:44,800 --> 00:07:47,759
could do some pretty cool stuff with it

223
00:07:47,759 --> 00:07:49,680
this operator supports

224
00:07:49,680 --> 00:07:52,240
http get requests only

225
00:07:52,240 --> 00:07:54,319
and it can ingest data in many many

226
00:07:54,319 --> 00:07:56,560
different data sources

227
00:07:56,560 --> 00:07:58,560
we primarily use it with csvs but it

228
00:07:58,560 --> 00:08:02,479
could be text it could be an html page

229
00:08:02,479 --> 00:08:04,240
data sources could be compressed so it's

230
00:08:04,240 --> 00:08:07,039
it's really powerful

231
00:08:07,120 --> 00:08:09,440
so as you as you noticed you just need

232
00:08:09,440 --> 00:08:11,120
to provide the

233
00:08:11,120 --> 00:08:13,199
url for it to work

234
00:08:13,199 --> 00:08:14,639
and

235
00:08:14,639 --> 00:08:17,280
this was a concern to me um so why is

236
00:08:17,280 --> 00:08:19,440
that this is not a bug but i think it

237
00:08:19,440 --> 00:08:21,280
could be exploited for malicious

238
00:08:21,280 --> 00:08:22,479
purposes and i'll

239
00:08:22,479 --> 00:08:24,639
explain as we go along

240
00:08:24,639 --> 00:08:27,039
so malicious user could build a command

241
00:08:27,039 --> 00:08:28,240
and control

242
00:08:28,240 --> 00:08:31,280
channel writing on this functionality so

243
00:08:31,280 --> 00:08:32,880
you could have

244
00:08:32,880 --> 00:08:35,360
commands transmitted over it malware

245
00:08:35,360 --> 00:08:38,640
downloaded you could exfiltrate data

246
00:08:38,640 --> 00:08:41,200
just using get requests

247
00:08:41,200 --> 00:08:42,799
and

248
00:08:42,799 --> 00:08:44,880
you know in some cases it's it's not a

249
00:08:44,880 --> 00:08:47,519
big deal because with uh

250
00:08:47,519 --> 00:08:49,440
you know with zero trust

251
00:08:49,440 --> 00:08:51,519
uh infrastructure you have lots of

252
00:08:51,519 --> 00:08:53,200
remote users that are not only

253
00:08:53,200 --> 00:08:54,640
connecting to your cloud environment

254
00:08:54,640 --> 00:08:56,800
they have access to to all kinds of

255
00:08:56,800 --> 00:08:59,200
other websites so for those cases that

256
00:08:59,200 --> 00:09:00,480
is not really a big deal because we've

257
00:09:00,480 --> 00:09:03,200
seen malware that's writing on all kinds

258
00:09:03,200 --> 00:09:06,320
of interesting third-party

259
00:09:06,320 --> 00:09:08,959
http channels like the malware

260
00:09:08,959 --> 00:09:10,320
command and control centers could be

261
00:09:10,320 --> 00:09:12,640
hosted over facebook over twitter they

262
00:09:12,640 --> 00:09:14,480
could be on google drive there's you

263
00:09:14,480 --> 00:09:16,160
know sky's the limit so it's not as

264
00:09:16,160 --> 00:09:17,680
interesting in those environments but i

265
00:09:17,680 --> 00:09:19,040
think it becomes interesting when you're

266
00:09:19,040 --> 00:09:21,760
trying to protect an on-prem network and

267
00:09:21,760 --> 00:09:23,680
you're trying to regiment

268
00:09:23,680 --> 00:09:25,519
what

269
00:09:25,519 --> 00:09:27,519
what data sources what what what

270
00:09:27,519 --> 00:09:29,839
external websites you allow your users

271
00:09:29,839 --> 00:09:31,519
to reach out to us i think that's that's

272
00:09:31,519 --> 00:09:34,480
when it becomes important

273
00:09:35,360 --> 00:09:38,080
so what's what's the big problem here so

274
00:09:38,080 --> 00:09:39,360
first of all

275
00:09:39,360 --> 00:09:40,720
if someone were to use this

276
00:09:40,720 --> 00:09:42,640
functionality maliciously they would be

277
00:09:42,640 --> 00:09:44,959
using legitimate azure infrastructure so

278
00:09:44,959 --> 00:09:46,800
if you have

279
00:09:46,800 --> 00:09:48,800
firewalls in place you have endpoint

280
00:09:48,800 --> 00:09:50,959
monitoring tools to all of them

281
00:09:50,959 --> 00:09:52,720
it would look like

282
00:09:52,720 --> 00:09:55,680
benign use of azure functionality and

283
00:09:55,680 --> 00:10:00,240
probably would not be raising any alarms

284
00:10:00,240 --> 00:10:01,760
even more than that

285
00:10:01,760 --> 00:10:04,959
even if you decided to somehow try and

286
00:10:04,959 --> 00:10:06,800
monitor that what do you do you would

287
00:10:06,800 --> 00:10:08,800
have to open up encrypted channels and

288
00:10:08,800 --> 00:10:11,279
try to filter by specific

289
00:10:11,279 --> 00:10:13,279
api requests which is which is not a

290
00:10:13,279 --> 00:10:15,839
trivial task so it's it's not easy to

291
00:10:15,839 --> 00:10:18,160
find something like that on the back end

292
00:10:18,160 --> 00:10:20,320
so let's say you used it to tunnel

293
00:10:20,320 --> 00:10:22,320
through azure infrastructure and on the

294
00:10:22,320 --> 00:10:24,560
exit end you were let's say reaching out

295
00:10:24,560 --> 00:10:26,320
to a particular

296
00:10:26,320 --> 00:10:28,560
command control server

297
00:10:28,560 --> 00:10:30,160
in that infrastructure it would look

298
00:10:30,160 --> 00:10:32,560
like request is coming from

299
00:10:32,560 --> 00:10:34,640
inside azure proper from their core

300
00:10:34,640 --> 00:10:36,399
infrastructure so also not very

301
00:10:36,399 --> 00:10:38,399
suspicious

302
00:10:38,399 --> 00:10:39,200
and

303
00:10:39,200 --> 00:10:41,279
last but definitely not least

304
00:10:41,279 --> 00:10:43,839
this functionality log analytics is

305
00:10:43,839 --> 00:10:46,320
usually used for for threat hunting for

306
00:10:46,320 --> 00:10:48,000
incident response so it's a security

307
00:10:48,000 --> 00:10:49,200
tool so

308
00:10:49,200 --> 00:10:50,959
to me it feels like

309
00:10:50,959 --> 00:10:53,120
you know there were these recent

310
00:10:53,120 --> 00:10:56,560
incidents where malware was using

311
00:10:56,560 --> 00:10:58,640
antivirus update

312
00:10:58,640 --> 00:11:01,600
channels to download second stage of

313
00:11:01,600 --> 00:11:02,959
malware so they're essentially we're

314
00:11:02,959 --> 00:11:05,519
using antivirus infrastructure for

315
00:11:05,519 --> 00:11:08,079
malicious purposes to so to me that had

316
00:11:08,079 --> 00:11:11,120
kind of uh feel like that that you this

317
00:11:11,120 --> 00:11:13,360
is a security infrastructure security

318
00:11:13,360 --> 00:11:15,519
service and yet there's a possibility

319
00:11:15,519 --> 00:11:17,760
that it could be abused

320
00:11:17,760 --> 00:11:19,360
so what's what's the scenario here so

321
00:11:19,360 --> 00:11:21,040
let's say user

322
00:11:21,040 --> 00:11:22,560
is compromised

323
00:11:22,560 --> 00:11:24,480
let's say clicks on some attachment

324
00:11:24,480 --> 00:11:26,320
malicious email

325
00:11:26,320 --> 00:11:29,360
and malware executes on an endpoint

326
00:11:29,360 --> 00:11:32,079
and that user has access to log

327
00:11:32,079 --> 00:11:34,800
analytics malware could then

328
00:11:34,800 --> 00:11:36,480
execute greece through this

329
00:11:36,480 --> 00:11:38,160
functionality continuously to reach out

330
00:11:38,160 --> 00:11:40,720
to that command and control server

331
00:11:40,720 --> 00:11:43,120
and once the connection is established

332
00:11:43,120 --> 00:11:47,440
data could be exfiltrated via http urls

333
00:11:47,440 --> 00:11:49,920
and commands and second stage exploits

334
00:11:49,920 --> 00:11:51,760
could write down

335
00:11:51,760 --> 00:11:54,639
on that channel back to the uh to this

336
00:11:54,639 --> 00:11:58,079
exploited endpoint

337
00:11:59,440 --> 00:12:00,160
so

338
00:12:00,160 --> 00:12:01,920
there's some considerations in play here

339
00:12:01,920 --> 00:12:03,200
so first of all

340
00:12:03,200 --> 00:12:06,160
victim needs to have a log analytics

341
00:12:06,160 --> 00:12:09,040
reader role in azure but that role is

342
00:12:09,040 --> 00:12:11,200
not really a high level role it many

343
00:12:11,200 --> 00:12:13,120
people have it because you're not really

344
00:12:13,120 --> 00:12:15,120
changing anything you're you're reading

345
00:12:15,120 --> 00:12:16,320
logs

346
00:12:16,320 --> 00:12:18,880
and you don't really need access to any

347
00:12:18,880 --> 00:12:20,639
log

348
00:12:20,639 --> 00:12:22,320
data source in particular because you're

349
00:12:22,320 --> 00:12:23,600
not using any

350
00:12:23,600 --> 00:12:25,760
any log data source

351
00:12:25,760 --> 00:12:27,760
requests will not work with ip addresses

352
00:12:27,760 --> 00:12:29,839
so hosting your command control server

353
00:12:29,839 --> 00:12:31,920
on the just anonymous ip would not work

354
00:12:31,920 --> 00:12:34,160
you need a registered domain but

355
00:12:34,160 --> 00:12:36,160
you know there were many cases where

356
00:12:36,160 --> 00:12:38,480
legitimate domains were

357
00:12:38,480 --> 00:12:40,320
taken over and used for malicious

358
00:12:40,320 --> 00:12:43,680
purposes so that's not not a big deal

359
00:12:43,680 --> 00:12:45,680
responses from those get requests they

360
00:12:45,680 --> 00:12:47,920
could be pretty big like in my tests i i

361
00:12:47,920 --> 00:12:50,560
could download megabytes of data and

362
00:12:50,560 --> 00:12:52,399
from those data sources and that wasn't

363
00:12:52,399 --> 00:12:53,760
a problem but

364
00:12:53,760 --> 00:12:55,440
data coming out

365
00:12:55,440 --> 00:12:58,160
by nature of get requests very limited

366
00:12:58,160 --> 00:13:01,120
the url is about 200 bytes in size so

367
00:13:01,120 --> 00:13:02,399
you really

368
00:13:02,399 --> 00:13:04,880
uh it's hard to

369
00:13:04,880 --> 00:13:07,200
exfiltrate something significant over

370
00:13:07,200 --> 00:13:08,880
the channel you have to have a lot of

371
00:13:08,880 --> 00:13:10,880
different queries in order to push

372
00:13:10,880 --> 00:13:12,480
through i don't know the word document

373
00:13:12,480 --> 00:13:14,639
for example but you could use it just

374
00:13:14,639 --> 00:13:16,000
for critical data so let's say you're

375
00:13:16,000 --> 00:13:17,600
trying to exfiltrate

376
00:13:17,600 --> 00:13:20,240
passwords encryption keys certificates

377
00:13:20,240 --> 00:13:22,399
so for for little pieces of data like

378
00:13:22,399 --> 00:13:24,560
that that would be a

379
00:13:24,560 --> 00:13:27,120
valuable uh valuable tool

380
00:13:27,120 --> 00:13:29,360
microsoft applies rate limiting

381
00:13:29,360 --> 00:13:31,519
to these kinds of queries so

382
00:13:31,519 --> 00:13:33,120
one would have to be careful when

383
00:13:33,120 --> 00:13:35,040
executing many of them or executing them

384
00:13:35,040 --> 00:13:36,720
at a high rate so

385
00:13:36,720 --> 00:13:38,800
that's something to keep

386
00:13:38,800 --> 00:13:40,240
to be aware of

387
00:13:40,240 --> 00:13:41,279
and

388
00:13:41,279 --> 00:13:43,440
so with with communication being limited

389
00:13:43,440 --> 00:13:44,399
in volume

390
00:13:44,399 --> 00:13:45,360
and

391
00:13:45,360 --> 00:13:47,440
being victim initiated you have to reach

392
00:13:47,440 --> 00:13:49,199
out the command control server you have

393
00:13:49,199 --> 00:13:52,079
to have some kind of heartbeat

394
00:13:52,079 --> 00:13:54,480
setup so that you periodically ping the

395
00:13:54,480 --> 00:13:56,639
server in order to establish a session

396
00:13:56,639 --> 00:13:58,880
and you uh because of size limitations

397
00:13:58,880 --> 00:14:00,880
you have to split your payload across

398
00:14:00,880 --> 00:14:02,800
multiple requests

399
00:14:02,800 --> 00:14:05,680
so i built a small proof of concept for

400
00:14:05,680 --> 00:14:07,839
this so there's a server in python it's

401
00:14:07,839 --> 00:14:09,680
hosted on aws

402
00:14:09,680 --> 00:14:12,480
and a powershell client that reaches out

403
00:14:12,480 --> 00:14:14,720
to it through this method client just

404
00:14:14,720 --> 00:14:17,199
runs in the loop it pings the server

405
00:14:17,199 --> 00:14:19,440
periodically and

406
00:14:19,440 --> 00:14:21,120
just to kind of play around i introduced

407
00:14:21,120 --> 00:14:22,880
some delays and jitters so that things

408
00:14:22,880 --> 00:14:26,160
would not be easily as easily detected

409
00:14:26,160 --> 00:14:26,880
as

410
00:14:26,880 --> 00:14:29,600
automated requests

411
00:14:29,600 --> 00:14:31,440
and requests are

412
00:14:31,440 --> 00:14:34,480
encoded as part of a url path just as a

413
00:14:34,480 --> 00:14:36,720
parameter in the url path

414
00:14:36,720 --> 00:14:39,600
so client pings the server asking for

415
00:14:39,600 --> 00:14:40,959
instructions

416
00:14:40,959 --> 00:14:43,040
and ships the data that was

417
00:14:43,040 --> 00:14:44,880
let's say some private data that's found

418
00:14:44,880 --> 00:14:46,399
back to the server

419
00:14:46,399 --> 00:14:48,560
and responses

420
00:14:48,560 --> 00:14:51,600
come in the body of get get requests

421
00:14:51,600 --> 00:14:53,199
that come back and uh it could be a

422
00:14:53,199 --> 00:14:55,920
command to execute a file to download

423
00:14:55,920 --> 00:14:57,680
or recommend to exfiltrate something

424
00:14:57,680 --> 00:14:59,839
from the client

425
00:14:59,839 --> 00:15:00,639
i

426
00:15:00,639 --> 00:15:02,959
uh compress and encrypt communications

427
00:15:02,959 --> 00:15:04,880
with pre-shared key so that you could

428
00:15:04,880 --> 00:15:07,760
not easily look inside and uh

429
00:15:07,760 --> 00:15:10,839
maybe try to trigger detections based on

430
00:15:10,839 --> 00:15:15,040
that and i just uh to make it look as

431
00:15:15,040 --> 00:15:16,880
unsuspicious as possible i masquerade

432
00:15:16,880 --> 00:15:18,880
this as queries to some thread database

433
00:15:18,880 --> 00:15:20,639
so let's say imagine you have there's a

434
00:15:20,639 --> 00:15:23,040
database that you query with hashes of

435
00:15:23,040 --> 00:15:24,959
files that you find and it responds with

436
00:15:24,959 --> 00:15:26,240
information on those files whether

437
00:15:26,240 --> 00:15:28,480
they're malicious or not

438
00:15:28,480 --> 00:15:30,639
so here's some simple uh

439
00:15:30,639 --> 00:15:33,199
communication kind of unpacked

440
00:15:33,199 --> 00:15:34,959
so let's say

441
00:15:34,959 --> 00:15:37,199
server is awaiting request

442
00:15:37,199 --> 00:15:39,279
it receives a ping request from the

443
00:15:39,279 --> 00:15:42,399
client client reaches out um asking for

444
00:15:42,399 --> 00:15:44,160
for instructions and the server responds

445
00:15:44,160 --> 00:15:46,399
with the following command so they the

446
00:15:46,399 --> 00:15:48,320
server the supposedly there's let's say

447
00:15:48,320 --> 00:15:49,360
there's a

448
00:15:49,360 --> 00:15:51,360
malware operator sitting on that server

449
00:15:51,360 --> 00:15:53,279
and they say they want to execute who am

450
00:15:53,279 --> 00:15:55,040
i command

451
00:15:55,040 --> 00:15:56,720
i mentioned before that you know because

452
00:15:56,720 --> 00:15:58,480
of size limitations you have because of

453
00:15:58,480 --> 00:16:00,959
the need to maintain a session

454
00:16:00,959 --> 00:16:03,279
you need all kinds of housekeeping data

455
00:16:03,279 --> 00:16:06,000
in the request as well so there will be

456
00:16:06,000 --> 00:16:07,360
you'll need some counters for chunk

457
00:16:07,360 --> 00:16:09,920
sizes chunk numbers so on so forth so

458
00:16:09,920 --> 00:16:12,000
there's some housekeeping data added to

459
00:16:12,000 --> 00:16:13,920
that command and then you can

460
00:16:13,920 --> 00:16:16,240
uh encrypt it

461
00:16:16,240 --> 00:16:19,120
and and compress it and it'll be shipped

462
00:16:19,120 --> 00:16:21,440
uh in the body of the get response to

463
00:16:21,440 --> 00:16:24,320
the malware on the client side

464
00:16:24,320 --> 00:16:26,639
and once the command is executed and you

465
00:16:26,639 --> 00:16:29,519
get request sent to the server

466
00:16:29,519 --> 00:16:31,199
with there is with the result so in that

467
00:16:31,199 --> 00:16:33,680
case it's my username

468
00:16:33,680 --> 00:16:35,759
as a result of who am i command and then

469
00:16:35,759 --> 00:16:38,240
we compress and chunk uh

470
00:16:38,240 --> 00:16:38,959
the

471
00:16:38,959 --> 00:16:41,519
the data as necessary and base64 encoded

472
00:16:41,519 --> 00:16:43,519
because it has to you know encode it

473
00:16:43,519 --> 00:16:45,279
like that in order to be a part of the

474
00:16:45,279 --> 00:16:47,519
url so at the bottom you would see

475
00:16:47,519 --> 00:16:50,320
uh how it looks like when it goes back

476
00:16:50,320 --> 00:16:52,959
to the server

477
00:16:53,040 --> 00:16:55,680
so let's see

478
00:16:57,680 --> 00:16:59,759
okay all right that's encouraging so

479
00:16:59,759 --> 00:17:01,519
let's start the demo so let's this is a

480
00:17:01,519 --> 00:17:03,600
demo how this actually looks in real

481
00:17:03,600 --> 00:17:05,760
life so on the left

482
00:17:05,760 --> 00:17:08,640
you have a server um

483
00:17:08,640 --> 00:17:11,039
you know in the cloud in aws

484
00:17:11,039 --> 00:17:12,799
and the victim machine running the

485
00:17:12,799 --> 00:17:15,359
powershell

486
00:17:15,919 --> 00:17:17,359
come on

487
00:17:17,359 --> 00:17:19,839
you can do it

488
00:17:20,000 --> 00:17:20,959
all right

489
00:17:20,959 --> 00:17:25,120
right so the server is starting

490
00:17:26,559 --> 00:17:30,280
down the client

491
00:17:32,320 --> 00:17:35,918
you can tell again type verbal

492
00:17:37,039 --> 00:17:39,679
so you'll see a little heart symbol

493
00:17:39,679 --> 00:17:40,880
blinking there it means that the

494
00:17:40,880 --> 00:17:42,799
communication is established and

495
00:17:42,799 --> 00:17:44,640
the communication goes through azure

496
00:17:44,640 --> 00:17:47,120
through log analytics through that

497
00:17:47,120 --> 00:17:50,000
channel that's established there

498
00:17:50,000 --> 00:17:51,120
so it's

499
00:17:51,120 --> 00:17:53,760
sending heartbeat requests requesting

500
00:17:53,760 --> 00:17:57,039
commands and operator on the server asks

501
00:17:57,039 --> 00:17:59,919
for to execute a who am i command and

502
00:17:59,919 --> 00:18:01,600
that's what the client does and that's

503
00:18:01,600 --> 00:18:03,840
the response so it's for small requests

504
00:18:03,840 --> 00:18:04,720
it's

505
00:18:04,720 --> 00:18:07,360
it's pretty fast

506
00:18:07,360 --> 00:18:09,440
then uh we'll try to exfiltrate a file

507
00:18:09,440 --> 00:18:11,919
so on windows there's a small text file

508
00:18:11,919 --> 00:18:12,720
that's

509
00:18:12,720 --> 00:18:14,960
out there on every windows machine it's

510
00:18:14,960 --> 00:18:16,720
very easy to find and it's very small so

511
00:18:16,720 --> 00:18:18,720
it's good for for testing so you could

512
00:18:18,720 --> 00:18:22,080
either type uh use type command to dump

513
00:18:22,080 --> 00:18:25,919
its contents or this i implemented a um

514
00:18:25,919 --> 00:18:28,559
an upload command to

515
00:18:28,559 --> 00:18:29,840
actually

516
00:18:29,840 --> 00:18:32,400
uh steal binary files

517
00:18:32,400 --> 00:18:34,640
from the client if necessary

518
00:18:34,640 --> 00:18:36,400
there's just uh you have to be mindful

519
00:18:36,400 --> 00:18:37,600
of how long

520
00:18:37,600 --> 00:18:40,480
that takes because of the 200 by 2000

521
00:18:40,480 --> 00:18:42,559
byte limitation in the ui you need many

522
00:18:42,559 --> 00:18:43,840
many requests

523
00:18:43,840 --> 00:18:47,520
to transfer a large file

524
00:18:47,520 --> 00:18:51,280
and uh and finally uh we'll

525
00:18:51,280 --> 00:18:52,559
download

526
00:18:52,559 --> 00:18:54,000
malware

527
00:18:54,000 --> 00:18:54,880
from

528
00:18:54,880 --> 00:18:57,120
the server to the client let's just give

529
00:18:57,120 --> 00:18:59,678
it a second

530
00:19:00,720 --> 00:19:03,440
so we say we need another dll that

531
00:19:03,440 --> 00:19:04,799
contains

532
00:19:04,799 --> 00:19:07,760
some other malicious stuff

533
00:19:07,760 --> 00:19:09,360
and because

534
00:19:09,360 --> 00:19:12,320
get responses these sizes pretty much

535
00:19:12,320 --> 00:19:14,400
well it's not unlimited but it's

536
00:19:14,400 --> 00:19:16,960
it's uh you can transfer significant

537
00:19:16,960 --> 00:19:19,200
chunks of information the download to

538
00:19:19,200 --> 00:19:22,000
the client goes very very quickly

539
00:19:22,000 --> 00:19:24,720
so this is how it looks in action

540
00:19:24,720 --> 00:19:25,919
all right

541
00:19:25,919 --> 00:19:29,120
so let me see

542
00:19:32,080 --> 00:19:34,160
let's go to the next slide

543
00:19:34,160 --> 00:19:35,280
come on

544
00:19:35,280 --> 00:19:39,280
all right so uh you may be uh

545
00:19:39,280 --> 00:19:42,000
asking why implement uh c2 channel from

546
00:19:42,000 --> 00:19:44,320
scratch uh it would be a valid question

547
00:19:44,320 --> 00:19:45,360
to ask

548
00:19:45,360 --> 00:19:48,640
uh there are a lot of c2

549
00:19:48,640 --> 00:19:50,000
frameworks out there and i actually

550
00:19:50,000 --> 00:19:51,360
tried to implement this with cobble

551
00:19:51,360 --> 00:19:53,679
strike with a malleable profile

552
00:19:53,679 --> 00:19:56,240
uh most functionality is available in

553
00:19:56,240 --> 00:19:58,640
cobblestrike but there are some and are

554
00:19:58,640 --> 00:20:00,320
there are some limitations that could be

555
00:20:00,320 --> 00:20:02,320
bypassed creatively

556
00:20:02,320 --> 00:20:03,919
but unfortunately

557
00:20:03,919 --> 00:20:05,440
some other limitations they ended up

558
00:20:05,440 --> 00:20:07,280
being roadblocks

559
00:20:07,280 --> 00:20:09,520
it imposes restrictions on your right

560
00:20:09,520 --> 00:20:12,400
size on header size it needs multiple

561
00:20:12,400 --> 00:20:15,360
your eyes to actually implement

562
00:20:15,360 --> 00:20:17,440
a proper beacon so

563
00:20:17,440 --> 00:20:20,080
with cobblestrike out of the box it

564
00:20:20,080 --> 00:20:22,480
didn't quite work however

565
00:20:22,480 --> 00:20:24,320
with some code modifications i don't see

566
00:20:24,320 --> 00:20:26,640
why you couldn't have a cobble strike

567
00:20:26,640 --> 00:20:29,039
beacon or some other c2 framework beacon

568
00:20:29,039 --> 00:20:31,919
implemented based on this or

569
00:20:31,919 --> 00:20:33,600
intraday integrate this with metasploit

570
00:20:33,600 --> 00:20:36,080
on any or any other frameworks

571
00:20:36,080 --> 00:20:36,880
so

572
00:20:36,880 --> 00:20:40,080
uh as a defender how would you

573
00:20:40,080 --> 00:20:41,600
address something like this so first of

574
00:20:41,600 --> 00:20:43,760
all

575
00:20:44,000 --> 00:20:46,080
for this to work you need your victim

576
00:20:46,080 --> 00:20:48,480
needs to have access to log analytics

577
00:20:48,480 --> 00:20:50,559
they have to have either log analytics

578
00:20:50,559 --> 00:20:54,400
contributor or log analytics reader role

579
00:20:54,400 --> 00:20:55,760
and

580
00:20:55,760 --> 00:20:57,919
not everybody should have those roles as

581
00:20:57,919 --> 00:20:59,679
a matter of fact

582
00:20:59,679 --> 00:21:02,640
even ignoring this scenario your logs

583
00:21:02,640 --> 00:21:05,360
are just treasure troves of all kinds of

584
00:21:05,360 --> 00:21:07,840
interesting information they're just

585
00:21:07,840 --> 00:21:10,159
very valuable for recon if somebody

586
00:21:10,159 --> 00:21:11,840
wanted to learn about your environment

587
00:21:11,840 --> 00:21:14,640
sometimes their keys or

588
00:21:14,640 --> 00:21:17,120
passwords dumped into those logs so in

589
00:21:17,120 --> 00:21:19,919
general you shouldn't give this role to

590
00:21:19,919 --> 00:21:21,520
just anybody it should be a restricted

591
00:21:21,520 --> 00:21:24,080
set of people to get this role

592
00:21:24,080 --> 00:21:26,960
and azure fairly recently introduced a

593
00:21:26,960 --> 00:21:29,039
way to monitor your log analytics

594
00:21:29,039 --> 00:21:31,520
queries there's actually a separate log

595
00:21:31,520 --> 00:21:32,240
to

596
00:21:32,240 --> 00:21:33,760
to log those queries that's kind of kind

597
00:21:33,760 --> 00:21:35,919
of recursive so the query you run on the

598
00:21:35,919 --> 00:21:38,080
logs gets added to the log

599
00:21:38,080 --> 00:21:40,240
but there's this log where you could see

600
00:21:40,240 --> 00:21:42,960
what somebody is is doing in your

601
00:21:42,960 --> 00:21:44,559
log analytics environment what queries

602
00:21:44,559 --> 00:21:45,760
are being run

603
00:21:45,760 --> 00:21:47,360
so maybe you could look for some

604
00:21:47,360 --> 00:21:48,559
patterns

605
00:21:48,559 --> 00:21:50,320
in that table

606
00:21:50,320 --> 00:21:52,480
i thought that you know

607
00:21:52,480 --> 00:21:54,480
there's no reason why this function

608
00:21:54,480 --> 00:21:56,480
should be wide open so i actually

609
00:21:56,480 --> 00:21:58,480
propose to azure that maybe we should

610
00:21:58,480 --> 00:22:00,480
restrict

611
00:22:00,480 --> 00:22:02,400
this a little bit and just give sort of

612
00:22:02,400 --> 00:22:05,679
a white list of functionality to

613
00:22:05,679 --> 00:22:07,600
administrators where

614
00:22:07,600 --> 00:22:10,320
you only define the websites that you

615
00:22:10,320 --> 00:22:12,400
really need to reach out to using this

616
00:22:12,400 --> 00:22:13,919
external data operator and everything

617
00:22:13,919 --> 00:22:15,760
else would be prohibited

618
00:22:15,760 --> 00:22:17,280
so

619
00:22:17,280 --> 00:22:19,600
microsoft looked at it and said uh no we

620
00:22:19,600 --> 00:22:21,760
don't want to do that so okay that's

621
00:22:21,760 --> 00:22:23,200
fine

622
00:22:23,200 --> 00:22:25,600
they weren't as impressed

623
00:22:25,600 --> 00:22:26,799
um

624
00:22:26,799 --> 00:22:29,200
but i think the uh the issue here it

625
00:22:29,200 --> 00:22:31,760
goes beyond this particular issue cloud

626
00:22:31,760 --> 00:22:33,679
offerings are

627
00:22:33,679 --> 00:22:36,400
just growing at amazing pace so azure is

628
00:22:36,400 --> 00:22:39,919
over 200 services aws over 200 services

629
00:22:39,919 --> 00:22:42,720
gcp over 100 services so like almost

630
00:22:42,720 --> 00:22:44,799
like weekly or monthly something new is

631
00:22:44,799 --> 00:22:47,760
being added and you can you can bet that

632
00:22:47,760 --> 00:22:51,280
in other services in azure and elsewhere

633
00:22:51,280 --> 00:22:52,480
you could have

634
00:22:52,480 --> 00:22:54,960
similar functionality unrestricted

635
00:22:54,960 --> 00:22:58,000
http requests going to

636
00:22:58,000 --> 00:23:00,720
wherever wherever you want basically and

637
00:23:00,720 --> 00:23:02,240
you could have

638
00:23:02,240 --> 00:23:04,320
uh malicious functionality writing on

639
00:23:04,320 --> 00:23:06,320
that so i think it's just something for

640
00:23:06,320 --> 00:23:09,760
cloud providers to keep in mind maybe uh

641
00:23:09,760 --> 00:23:11,440
maybe do something about it there are

642
00:23:11,440 --> 00:23:13,360
all kinds of you know database services

643
00:23:13,360 --> 00:23:15,840
big data analytics automation you name

644
00:23:15,840 --> 00:23:17,039
it

645
00:23:17,039 --> 00:23:17,919
that

646
00:23:17,919 --> 00:23:19,600
could have similar functionality that

647
00:23:19,600 --> 00:23:21,039
could be abused

648
00:23:21,039 --> 00:23:23,200
for

649
00:23:23,200 --> 00:23:26,559
hidden c2 channels

650
00:23:28,480 --> 00:23:30,400
so it's something i i think should be

651
00:23:30,400 --> 00:23:31,760
included in

652
00:23:31,760 --> 00:23:34,640
cloud providers threat modeling and same

653
00:23:34,640 --> 00:23:37,760
thing for their customers

654
00:23:37,760 --> 00:23:40,320
so to wrap up um

655
00:23:40,320 --> 00:23:42,400
so we wish we saw how

656
00:23:42,400 --> 00:23:44,640
some cloud functionality

657
00:23:44,640 --> 00:23:46,400
even though it's behavior by design it's

658
00:23:46,400 --> 00:23:47,600
not a bug

659
00:23:47,600 --> 00:23:49,679
could be abused for for stealthy

660
00:23:49,679 --> 00:23:52,480
communications

661
00:23:52,480 --> 00:23:54,960
i think it's uh as i said in one of the

662
00:23:54,960 --> 00:23:57,279
slides it's a threat not only because of

663
00:23:57,279 --> 00:24:00,000
the stealth it's hard to monitor

664
00:24:00,000 --> 00:24:02,880
and also its

665
00:24:02,880 --> 00:24:04,960
azure apis they have an error of

666
00:24:04,960 --> 00:24:07,200
legitimacy to them so somebody using the

667
00:24:07,200 --> 00:24:10,000
api for malicious purposes is not a red

668
00:24:10,000 --> 00:24:11,039
flag

669
00:24:11,039 --> 00:24:12,799
so it's something that that easy to

670
00:24:12,799 --> 00:24:14,720
overlook and also

671
00:24:14,720 --> 00:24:16,799
this functionality is specifically used

672
00:24:16,799 --> 00:24:18,400
for security for threat hunting for

673
00:24:18,400 --> 00:24:22,159
incident response so for it to be abused

674
00:24:22,159 --> 00:24:24,400
in this way is sort of unexpected this

675
00:24:24,400 --> 00:24:26,400
is not where you would look for your for

676
00:24:26,400 --> 00:24:29,279
your threat so that that adds

677
00:24:29,279 --> 00:24:32,720
some additional gravity to this

678
00:24:32,720 --> 00:24:35,919
um there are ways to restrict this

679
00:24:35,919 --> 00:24:38,400
particularly by not giving

680
00:24:38,400 --> 00:24:40,720
away a log analytics

681
00:24:40,720 --> 00:24:43,120
reader roles to just anybody

682
00:24:43,120 --> 00:24:44,480
i think it should be restricted group

683
00:24:44,480 --> 00:24:45,200
and

684
00:24:45,200 --> 00:24:47,440
our queries and i think there there are

685
00:24:47,440 --> 00:24:49,360
similar opportunities for abuse

686
00:24:49,360 --> 00:24:51,840
elsewhere i think it's uh it's something

687
00:24:51,840 --> 00:24:54,640
to to think about do we do cloud

688
00:24:54,640 --> 00:24:56,320
providers basically

689
00:24:56,320 --> 00:24:57,840
have these opportunities for covered

690
00:24:57,840 --> 00:25:00,559
channels tunneling through them that are

691
00:25:00,559 --> 00:25:03,120
hard to monitor

692
00:25:03,120 --> 00:25:04,640
and that's the end of my talk and if

693
00:25:04,640 --> 00:25:06,240
there are any questions i'll be happy to

694
00:25:06,240 --> 00:25:07,919
answer them and thank you guys for

695
00:25:07,919 --> 00:25:09,400
listening

696
00:25:09,400 --> 00:25:16,079
[Applause]

697
00:25:23,520 --> 00:25:24,720
uh

698
00:25:24,720 --> 00:25:26,400
i wasn't sure it would be interesting

699
00:25:26,400 --> 00:25:28,159
enough but since you you're asking yeah

700
00:25:28,159 --> 00:25:29,120
i'll

701
00:25:29,120 --> 00:25:31,679
the slides will be here and i'll add a

702
00:25:31,679 --> 00:25:32,559
link

703
00:25:32,559 --> 00:25:34,559
to the code there as well in a few days

704
00:25:34,559 --> 00:25:37,279
give me a few days

705
00:25:39,840 --> 00:25:41,600
well i'll hang around in case somebody

706
00:25:41,600 --> 00:25:42,880
wants to talk

707
00:25:42,880 --> 00:25:46,200
thank you guys

708
00:25:46,520 --> 00:25:49,240
[Applause]

