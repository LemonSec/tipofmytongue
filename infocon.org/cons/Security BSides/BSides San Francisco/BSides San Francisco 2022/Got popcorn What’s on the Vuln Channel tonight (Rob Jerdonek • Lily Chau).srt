1
00:00:00,160 --> 00:00:03,280
um this is rob mr rob

2
00:00:03,280 --> 00:00:06,240
gerdonic is that correct okay great um

3
00:00:06,240 --> 00:00:08,639
you're from the bay area and you've had

4
00:00:08,639 --> 00:00:11,280
uh several years of experience in

5
00:00:11,280 --> 00:00:13,440
software development of tools

6
00:00:13,440 --> 00:00:16,400
and security for companies all right so

7
00:00:16,400 --> 00:00:17,600
with that please

8
00:00:17,600 --> 00:00:20,480
give rob a warm welcome

9
00:00:20,480 --> 00:00:22,720
and here we go

10
00:00:22,720 --> 00:00:24,160
[Applause]

11
00:00:24,160 --> 00:00:25,450
thank you

12
00:00:25,450 --> 00:00:26,880
[Applause]

13
00:00:26,880 --> 00:00:29,439
yeah i'm rob tridonic i work at the

14
00:00:29,439 --> 00:00:32,159
trust engineering team at roku

15
00:00:32,159 --> 00:00:34,320
at roku we call the security team the

16
00:00:34,320 --> 00:00:35,680
trust team

17
00:00:35,680 --> 00:00:37,760
it's pretty much the same thing but i

18
00:00:37,760 --> 00:00:39,200
kind of like that we call it the trust

19
00:00:39,200 --> 00:00:41,280
team because it keeps in mind what our

20
00:00:41,280 --> 00:00:43,040
end objective is

21
00:00:43,040 --> 00:00:45,840
and is that achieving customer trust and

22
00:00:45,840 --> 00:00:46,879
obviously

23
00:00:46,879 --> 00:00:49,039
security is essential to

24
00:00:49,039 --> 00:00:51,840
achieving customer trust

25
00:00:51,840 --> 00:00:53,199
and today i'm going to talk about our

26
00:00:53,199 --> 00:00:55,520
approach to vulnerability management i'd

27
00:00:55,520 --> 00:00:57,360
also like to acknowledge lilly chao who

28
00:00:57,360 --> 00:01:01,840
helped prepare these presentation slides

29
00:01:03,199 --> 00:01:05,920
here we have the ceo of roku anthony

30
00:01:05,920 --> 00:01:07,439
wood and

31
00:01:07,439 --> 00:01:09,119
he was asked a question of what he

32
00:01:09,119 --> 00:01:11,439
thought about highly interactive

33
00:01:11,439 --> 00:01:12,799
television

34
00:01:12,799 --> 00:01:16,320
and he responded in the media that

35
00:01:16,320 --> 00:01:17,840
many companies just don't really

36
00:01:17,840 --> 00:01:20,159
understand the attitude people have when

37
00:01:20,159 --> 00:01:22,240
watching tv they they really just want

38
00:01:22,240 --> 00:01:24,840
to sit there drink their beer and watch

39
00:01:24,840 --> 00:01:27,520
tv and for beer you could substitute

40
00:01:27,520 --> 00:01:29,439
anything else you might enjoy like

41
00:01:29,439 --> 00:01:32,000
popcorn or herbal tea or whatever you

42
00:01:32,000 --> 00:01:33,600
enjoy

43
00:01:33,600 --> 00:01:35,600
but our question was is the same true

44
00:01:35,600 --> 00:01:38,079
for developers and vulnerability

45
00:01:38,079 --> 00:01:40,400
management

46
00:01:40,400 --> 00:01:42,880
but being at the lobby yesterday i think

47
00:01:42,880 --> 00:01:44,479
there are quite a few developers here

48
00:01:44,479 --> 00:01:47,759
who really enjoy their beer

49
00:01:48,640 --> 00:01:52,520
so i think we're on to something

50
00:01:54,079 --> 00:01:55,920
vision is that receiving this

51
00:01:55,920 --> 00:01:58,320
vulnerability data should be as simple

52
00:01:58,320 --> 00:02:00,719
as streaming the latest episode of your

53
00:02:00,719 --> 00:02:03,680
favorite tv series

54
00:02:03,680 --> 00:02:05,680
we set out to build a platform to make

55
00:02:05,680 --> 00:02:08,318
this vision possible at roku and this

56
00:02:08,318 --> 00:02:10,800
presentation focuses on our static code

57
00:02:10,800 --> 00:02:12,879
scanning but these same principles can

58
00:02:12,879 --> 00:02:15,120
also be used for dynamic security

59
00:02:15,120 --> 00:02:17,520
testing

60
00:02:19,440 --> 00:02:21,120
as we sat down to

61
00:02:21,120 --> 00:02:23,280
think about this platform and create our

62
00:02:23,280 --> 00:02:24,640
requirements

63
00:02:24,640 --> 00:02:26,400
we decided we wanted to have a plugable

64
00:02:26,400 --> 00:02:28,800
framework we have different scanning

65
00:02:28,800 --> 00:02:31,200
modules technologies

66
00:02:31,200 --> 00:02:32,640
uh for

67
00:02:32,640 --> 00:02:35,920
a python application we need a special

68
00:02:35,920 --> 00:02:38,000
component to scan python

69
00:02:38,000 --> 00:02:40,879
apps likewise for java apps terraform

70
00:02:40,879 --> 00:02:43,680
files etc we want to be able to plug in

71
00:02:43,680 --> 00:02:45,200
different technologies as they become

72
00:02:45,200 --> 00:02:47,280
available

73
00:02:47,280 --> 00:02:49,040
our system also needs to be very

74
00:02:49,040 --> 00:02:51,040
scalable we need to be able to scan

75
00:02:51,040 --> 00:02:53,040
continuously scan hundreds of

76
00:02:53,040 --> 00:02:56,959
applications or even thousands

77
00:02:56,959 --> 00:03:00,080
next we need a very flexible integration

78
00:03:00,080 --> 00:03:02,879
we have a variety of roku has grown by

79
00:03:02,879 --> 00:03:05,040
acquisition like many companies we have

80
00:03:05,040 --> 00:03:07,200
a variety of systems

81
00:03:07,200 --> 00:03:09,040
for ci cd

82
00:03:09,040 --> 00:03:10,800
integrations

83
00:03:10,800 --> 00:03:12,480
git lab github

84
00:03:12,480 --> 00:03:13,360
other

85
00:03:13,360 --> 00:03:15,280
system a variety of systems that

86
00:03:15,280 --> 00:03:17,680
developers use and they'll probably be

87
00:03:17,680 --> 00:03:20,720
many more in the future

88
00:03:20,720 --> 00:03:22,800
and underpinning all of this is

89
00:03:22,800 --> 00:03:25,519
developer happiness we aim to

90
00:03:25,519 --> 00:03:27,920
delight our customers and our customers

91
00:03:27,920 --> 00:03:30,239
in this case are the developers using

92
00:03:30,239 --> 00:03:33,400
the system

93
00:03:34,959 --> 00:03:37,599
about our the design of our platform

94
00:03:37,599 --> 00:03:39,440
the heart of the platform

95
00:03:39,440 --> 00:03:42,159
is a jenkins cluster that we run in

96
00:03:42,159 --> 00:03:43,519
kubernetes

97
00:03:43,519 --> 00:03:45,280
and this gives us the ability to auto

98
00:03:45,280 --> 00:03:47,599
scale up and down and

99
00:03:47,599 --> 00:03:49,760
this way this cluster can perform

100
00:03:49,760 --> 00:03:52,959
automated scanning of hundreds of apps

101
00:03:52,959 --> 00:03:56,239
and it could go up and down as demand

102
00:03:56,239 --> 00:03:58,319
rises and falls

103
00:03:58,319 --> 00:03:59,680
and

104
00:03:59,680 --> 00:04:02,159
and then from there we have our scanning

105
00:04:02,159 --> 00:04:03,040
bots

106
00:04:03,040 --> 00:04:04,239
these are

107
00:04:04,239 --> 00:04:06,720
uh scanning a scanning bot to us is a

108
00:04:06,720 --> 00:04:09,120
scanning tool that we containerize

109
00:04:09,120 --> 00:04:11,760
according to a specific format

110
00:04:11,760 --> 00:04:16,079
standard format and each scanning tool

111
00:04:16,079 --> 00:04:18,560
is containerized as a bot

112
00:04:18,560 --> 00:04:20,798
and jenkins has the ability to run these

113
00:04:20,798 --> 00:04:24,400
bots in a certain order as needed to

114
00:04:24,400 --> 00:04:26,479
scan different artifacts and

115
00:04:26,479 --> 00:04:29,360
applications

116
00:04:29,360 --> 00:04:32,400
next we needed a database and dashboards

117
00:04:32,400 --> 00:04:33,280
to

118
00:04:33,280 --> 00:04:36,800
store the vulnerabilities and

119
00:04:36,800 --> 00:04:40,240
we just decided to use elk elasticsearch

120
00:04:40,240 --> 00:04:42,880
log stash and kibana and that enables us

121
00:04:42,880 --> 00:04:45,280
to store our vulnerability data search

122
00:04:45,280 --> 00:04:47,520
the data analyze it create dashboards

123
00:04:47,520 --> 00:04:50,080
and so forth

124
00:04:50,080 --> 00:04:51,600
next we

125
00:04:51,600 --> 00:04:55,360
have an integration layer where we

126
00:04:55,360 --> 00:04:57,120
actually integrate with the ci cd

127
00:04:57,120 --> 00:05:00,639
pipelines and there a main goal is to

128
00:05:00,639 --> 00:05:01,680
detect

129
00:05:01,680 --> 00:05:03,360
vulnerabilities in

130
00:05:03,360 --> 00:05:05,600
merge requests pull requests

131
00:05:05,600 --> 00:05:08,080
and notify developers before the code

132
00:05:08,080 --> 00:05:10,479
gets merged into the main branch and

133
00:05:10,479 --> 00:05:13,680
definitely before the release

134
00:05:13,680 --> 00:05:15,840
we also have integrations with slack

135
00:05:15,840 --> 00:05:18,560
because most of our developers use slack

136
00:05:18,560 --> 00:05:21,039
and this is the way they can see receive

137
00:05:21,039 --> 00:05:23,199
these alerts as well

138
00:05:23,199 --> 00:05:24,960
so we want to meet the developers where

139
00:05:24,960 --> 00:05:27,440
they are and give them

140
00:05:27,440 --> 00:05:29,759
timely and actionable vulnerability

141
00:05:29,759 --> 00:05:32,240
information

142
00:05:32,240 --> 00:05:34,479
we also developed our own viewer tools

143
00:05:34,479 --> 00:05:37,360
web-based user interfaces for users to

144
00:05:37,360 --> 00:05:41,280
to view this data in great detail

145
00:05:42,720 --> 00:05:45,199
here's a diagram of our platform

146
00:05:45,199 --> 00:05:46,479
again at the heart

147
00:05:46,479 --> 00:05:49,600
of this is our jenkins cluster

148
00:05:49,600 --> 00:05:51,520
and we have different scanner bots for

149
00:05:51,520 --> 00:05:53,440
different technologies like go language

150
00:05:53,440 --> 00:05:57,600
code python code we have a scanner

151
00:05:57,600 --> 00:05:58,400
for

152
00:05:58,400 --> 00:06:01,840
java javascript secret scanner

153
00:06:01,840 --> 00:06:04,160
and we interface with the ci cd

154
00:06:04,160 --> 00:06:06,960
pipelines which could be

155
00:06:06,960 --> 00:06:08,960
gitlab github

156
00:06:08,960 --> 00:06:11,840
and we also interface we use jfrog

157
00:06:11,840 --> 00:06:14,240
artifactory for our container images so

158
00:06:14,240 --> 00:06:17,280
we pull from there to scan any images

159
00:06:17,280 --> 00:06:18,960
that are created by developers and we

160
00:06:18,960 --> 00:06:21,520
have a scanner bot for

161
00:06:21,520 --> 00:06:24,479
scanning containers

162
00:06:24,479 --> 00:06:27,680
these scanner bots write their output to

163
00:06:27,680 --> 00:06:29,919
s3 storage and that's really just

164
00:06:29,919 --> 00:06:31,759
short-term storage

165
00:06:31,759 --> 00:06:34,160
and then periodically we have our elk

166
00:06:34,160 --> 00:06:35,919
stack we'll

167
00:06:35,919 --> 00:06:39,199
import this s3 data using log stash

168
00:06:39,199 --> 00:06:42,720
import it into an elasticsearch database

169
00:06:42,720 --> 00:06:45,840
and that's where we can query the data

170
00:06:45,840 --> 00:06:49,599
we can create dashboards and

171
00:06:49,599 --> 00:06:51,120
have long term storage of the

172
00:06:51,120 --> 00:06:54,000
vulnerability information

173
00:06:54,000 --> 00:06:56,000
there we can also we

174
00:06:56,000 --> 00:06:58,080
automate the process of creating jiras

175
00:06:58,080 --> 00:07:00,080
to the click of a button

176
00:07:00,080 --> 00:07:01,280
and

177
00:07:01,280 --> 00:07:04,000
we do require someone in the trust team

178
00:07:04,000 --> 00:07:06,639
to approve the jira before it's created

179
00:07:06,639 --> 00:07:09,599
when that's necessary

180
00:07:12,240 --> 00:07:13,919
so these are some of the different

181
00:07:13,919 --> 00:07:16,280
scanning bots we have created

182
00:07:16,280 --> 00:07:17,919
[Music]

183
00:07:17,919 --> 00:07:21,120
each one is a containerized tool we have

184
00:07:21,120 --> 00:07:22,319
a sem grip

185
00:07:22,319 --> 00:07:25,440
we containerize some grip which

186
00:07:25,440 --> 00:07:28,240
runs static analysis for java python

187
00:07:28,240 --> 00:07:30,639
javascript go and ruby and other

188
00:07:30,639 --> 00:07:32,160
languages

189
00:07:32,160 --> 00:07:34,880
for java composition analysis

190
00:07:34,880 --> 00:07:37,680
we have both oss index and dependency

191
00:07:37,680 --> 00:07:39,120
check tools

192
00:07:39,120 --> 00:07:42,800
oss index also supports go and python

193
00:07:42,800 --> 00:07:45,680
we have containerized npm audit so we

194
00:07:45,680 --> 00:07:48,560
can do composition analysis on node.js

195
00:07:48,560 --> 00:07:49,919
apps

196
00:07:49,919 --> 00:07:52,879
we have banned it for python code we

197
00:07:52,879 --> 00:07:55,759
have tfsec for scanning terraform

198
00:07:55,759 --> 00:07:56,840
terraform

199
00:07:56,840 --> 00:08:00,400
files a trivi for container scanning and

200
00:08:00,400 --> 00:08:02,479
get leaks for secret scanning

201
00:08:02,479 --> 00:08:05,520
we also use retire.js which mainly for

202
00:08:05,520 --> 00:08:07,520
client-side javascript because we found

203
00:08:07,520 --> 00:08:10,240
it works well with that

204
00:08:10,240 --> 00:08:12,000
all of these are open source tools that

205
00:08:12,000 --> 00:08:13,680
anyone could use

206
00:08:13,680 --> 00:08:15,280
we just found it convenient to package

207
00:08:15,280 --> 00:08:16,000
them

208
00:08:16,000 --> 00:08:17,759
in containers

209
00:08:17,759 --> 00:08:20,080
and but we we could also support

210
00:08:20,080 --> 00:08:21,919
commercial tools if we if there's a

211
00:08:21,919 --> 00:08:24,160
commercial tool we want to use we can

212
00:08:24,160 --> 00:08:25,680
just package that

213
00:08:25,680 --> 00:08:27,759
in a container as well and run it as

214
00:08:27,759 --> 00:08:31,360
part of our overall framework

215
00:08:34,320 --> 00:08:36,559
here's a screenshot of a jenkins

216
00:08:36,559 --> 00:08:40,080
pipeline if any of you have used jenkins

217
00:08:40,080 --> 00:08:41,360
each

218
00:08:41,360 --> 00:08:44,000
software repository a pipeline will

219
00:08:44,000 --> 00:08:46,880
automatically be created to scan that

220
00:08:46,880 --> 00:08:49,200
that software repository

221
00:08:49,200 --> 00:08:51,360
and there's a sequence of steps called

222
00:08:51,360 --> 00:08:52,959
stages

223
00:08:52,959 --> 00:08:55,519
and we start with a discovery stage

224
00:08:55,519 --> 00:08:56,399
where

225
00:08:56,399 --> 00:08:57,680
we have a

226
00:08:57,680 --> 00:08:59,680
a container that we created which its

227
00:08:59,680 --> 00:09:02,080
job is to scan the code and look for

228
00:09:02,080 --> 00:09:04,800
what kind of files are in the project so

229
00:09:04,800 --> 00:09:08,160
if it has python code will trigger our

230
00:09:08,160 --> 00:09:10,800
python scanner if it has java code we'll

231
00:09:10,800 --> 00:09:13,200
trigger our java scanner and so forth

232
00:09:13,200 --> 00:09:15,200
so that's that process of automate is

233
00:09:15,200 --> 00:09:17,519
automated

234
00:09:17,519 --> 00:09:19,920
and a nice thing about using jenkins is

235
00:09:19,920 --> 00:09:23,519
it has the ability to parallelize the

236
00:09:23,519 --> 00:09:26,000
the stages so we can run all these

237
00:09:26,000 --> 00:09:28,480
different scanners at the same time

238
00:09:28,480 --> 00:09:31,120
and that really improves performance

239
00:09:31,120 --> 00:09:33,519
because if you're giving real-time

240
00:09:33,519 --> 00:09:35,519
information to

241
00:09:35,519 --> 00:09:37,839
developers you want to have really

242
00:09:37,839 --> 00:09:40,959
quick response time

243
00:09:46,160 --> 00:09:48,720
here's an example of some of the issues

244
00:09:48,720 --> 00:09:52,240
we can find with our framework

245
00:09:52,240 --> 00:09:53,839
if there's a vulnerable third-party

246
00:09:53,839 --> 00:09:56,640
library in one of the applications we

247
00:09:56,640 --> 00:09:59,519
have the oss in like in this case java

248
00:09:59,519 --> 00:10:02,399
we have oss index dependency check

249
00:10:02,399 --> 00:10:03,600
we could find if they're using for

250
00:10:03,600 --> 00:10:07,040
example a insecure version of log for j

251
00:10:07,040 --> 00:10:08,640
we could recommend that they update the

252
00:10:08,640 --> 00:10:11,760
latest version of log4j

253
00:10:11,760 --> 00:10:14,399
uh for secret scanning we run git leaks

254
00:10:14,399 --> 00:10:16,959
and we could identify if a developer put

255
00:10:16,959 --> 00:10:19,519
a hard-coded key

256
00:10:19,519 --> 00:10:21,839
a secret aws key for example and we can

257
00:10:21,839 --> 00:10:24,079
detect that immediately and alert the

258
00:10:24,079 --> 00:10:26,480
developer ask them to invalidate that

259
00:10:26,480 --> 00:10:28,560
key create a new key

260
00:10:28,560 --> 00:10:33,000
and store that key more securely

261
00:10:33,920 --> 00:10:36,880
the next two examples are with semgrip

262
00:10:36,880 --> 00:10:39,040
static code analysis

263
00:10:39,040 --> 00:10:41,680
when we scan python files it could turns

264
00:10:41,680 --> 00:10:44,640
out the default xml parser in python is

265
00:10:44,640 --> 00:10:47,200
not very secure if we see that we

266
00:10:47,200 --> 00:10:49,200
recommend that the developers use

267
00:10:49,200 --> 00:10:52,399
diffused xml it's a more secure

268
00:10:52,399 --> 00:10:55,040
python parsing library

269
00:10:55,040 --> 00:10:57,920
if we see any use of for javascript if

270
00:10:57,920 --> 00:11:00,560
we see like dangerously set inner html

271
00:11:00,560 --> 00:11:03,200
that's unsafe function will flag that

272
00:11:03,200 --> 00:11:03,920
and

273
00:11:03,920 --> 00:11:08,000
recommend a secure alternative

274
00:11:12,320 --> 00:11:14,160
now i'll talk more about our ci cd

275
00:11:14,160 --> 00:11:16,160
integration

276
00:11:16,160 --> 00:11:19,600
so we have a variety of ci cd systems at

277
00:11:19,600 --> 00:11:21,200
roku we're not unfortunately not

278
00:11:21,200 --> 00:11:22,480
standardized

279
00:11:22,480 --> 00:11:24,959
but you may have other big companies may

280
00:11:24,959 --> 00:11:26,959
also encounter this

281
00:11:26,959 --> 00:11:29,120
but the git lab is probably the most

282
00:11:29,120 --> 00:11:31,360
popular at roku

283
00:11:31,360 --> 00:11:33,760
and for this we have a web hook

284
00:11:33,760 --> 00:11:35,360
integration it's a pretty simple

285
00:11:35,360 --> 00:11:37,200
one-time setup it can actually be done

286
00:11:37,200 --> 00:11:39,200
by the administrator so the developer

287
00:11:39,200 --> 00:11:41,600
really doesn't have to do anything

288
00:11:41,600 --> 00:11:43,839
so we set up this web hook and for their

289
00:11:43,839 --> 00:11:45,920
repo and

290
00:11:45,920 --> 00:11:48,000
this anytime the developer creates a

291
00:11:48,000 --> 00:11:51,040
merge request pull request

292
00:11:51,040 --> 00:11:54,160
or and or updates that merge request

293
00:11:54,160 --> 00:11:56,320
it will scan their code automatically

294
00:11:56,320 --> 00:11:58,079
and they'll receive an alert something

295
00:11:58,079 --> 00:11:59,279
like this

296
00:11:59,279 --> 00:12:01,519
it will say

297
00:12:01,519 --> 00:12:04,000
the trustee security scans found some

298
00:12:04,000 --> 00:12:06,160
vulnerabilities in your code

299
00:12:06,160 --> 00:12:08,399
please click here for details

300
00:12:08,399 --> 00:12:10,880
we don't bombard this view with lots of

301
00:12:10,880 --> 00:12:13,120
detailed information because the screen

302
00:12:13,120 --> 00:12:15,120
real estate for a developer is very

303
00:12:15,120 --> 00:12:18,000
small and we just give alert basic

304
00:12:18,000 --> 00:12:19,360
information

305
00:12:19,360 --> 00:12:21,040
and then we have a link where they can

306
00:12:21,040 --> 00:12:25,680
click for to dive into all the details

307
00:12:25,680 --> 00:12:26,880
and

308
00:12:26,880 --> 00:12:28,399
and then from there they can go ahead

309
00:12:28,399 --> 00:12:30,639
and fix the issues and

310
00:12:30,639 --> 00:12:32,959
once they commit the code changes to fix

311
00:12:32,959 --> 00:12:34,079
those issues

312
00:12:34,079 --> 00:12:35,760
the scan will just automatically run

313
00:12:35,760 --> 00:12:37,920
again because it'll be triggered by the

314
00:12:37,920 --> 00:12:39,040
commit

315
00:12:39,040 --> 00:12:40,480
and hopefully

316
00:12:40,480 --> 00:12:42,079
the issues are fixed and they'll get

317
00:12:42,079 --> 00:12:44,560
another alert that just says security

318
00:12:44,560 --> 00:12:48,839
scans did not detect any vulnerabilities

319
00:12:52,560 --> 00:12:54,720
as i said before we created our own

320
00:12:54,720 --> 00:12:56,399
viewer

321
00:12:56,399 --> 00:13:00,000
application just for when the users

322
00:13:00,000 --> 00:13:01,279
click the developers click on those

323
00:13:01,279 --> 00:13:03,839
links we pull up a detailed view of the

324
00:13:03,839 --> 00:13:05,519
vulnerability in this case it was a

325
00:13:05,519 --> 00:13:08,399
purposely vulnerable application

326
00:13:08,399 --> 00:13:11,440
it had a hard-coded rsa private key in

327
00:13:11,440 --> 00:13:12,480
the code

328
00:13:12,480 --> 00:13:15,040
and we just point that out on line 15 of

329
00:13:15,040 --> 00:13:17,200
this file and we have a link to that

330
00:13:17,200 --> 00:13:18,320
file

331
00:13:18,320 --> 00:13:21,839
in the gitlab or github repository

332
00:13:21,839 --> 00:13:25,519
and instructions to to fix that

333
00:13:30,320 --> 00:13:32,959
so as i said before we are using elk for

334
00:13:32,959 --> 00:13:35,839
our database and dashboards

335
00:13:35,839 --> 00:13:39,040
just took some screen captures

336
00:13:39,040 --> 00:13:41,360
we have dozens of different dashboards

337
00:13:41,360 --> 00:13:43,360
that we create with kibana

338
00:13:43,360 --> 00:13:46,560
it's a open source free tool

339
00:13:46,560 --> 00:13:49,440
and we one of them we can

340
00:13:49,440 --> 00:13:50,399
capture

341
00:13:50,399 --> 00:13:52,399
all of our vulnerabilities by category

342
00:13:52,399 --> 00:13:53,920
across all of our

343
00:13:53,920 --> 00:13:55,760
repos that we've been scanning and we

344
00:13:55,760 --> 00:13:58,560
can this helps the trust team see

345
00:13:58,560 --> 00:14:00,639
where any problem areas might be popping

346
00:14:00,639 --> 00:14:03,040
up vulnerabilities that

347
00:14:03,040 --> 00:14:03,920
are

348
00:14:03,920 --> 00:14:06,880
frequent and then we could focus on

349
00:14:06,880 --> 00:14:09,680
our remediation efforts on those

350
00:14:09,680 --> 00:14:12,800
highest occurrence vulnerabilities

351
00:14:12,800 --> 00:14:15,040
likewise we can we have a number of line

352
00:14:15,040 --> 00:14:16,959
graphs to track remediation of

353
00:14:16,959 --> 00:14:20,000
vulnerabilities this was from a cve

354
00:14:20,000 --> 00:14:23,760
that over time we could saw the cve

355
00:14:23,760 --> 00:14:25,440
had many occurrences and as we

356
00:14:25,440 --> 00:14:28,160
remediated the issue we saw the

357
00:14:28,160 --> 00:14:29,440
graphs

358
00:14:29,440 --> 00:14:32,000
going down and we wanted to see all the

359
00:14:32,000 --> 00:14:34,800
these lines going sloping downward and

360
00:14:34,800 --> 00:14:36,399
of course if there's a new

361
00:14:36,399 --> 00:14:38,399
cve that comes out the

362
00:14:38,399 --> 00:14:41,440
the grass will go up and we can monitor

363
00:14:41,440 --> 00:14:43,839
over time and see them going down so

364
00:14:43,839 --> 00:14:45,600
picture is definitely worth a thousand

365
00:14:45,600 --> 00:14:47,920
words

366
00:14:50,320 --> 00:14:51,839
so we're not done we're not done yet

367
00:14:51,839 --> 00:14:54,639
we're still enhancing our system and

368
00:14:54,639 --> 00:14:56,800
we're next step is we're modifying our

369
00:14:56,800 --> 00:14:59,360
pipelines to generate a software built

370
00:14:59,360 --> 00:15:01,920
with materials s-bomb

371
00:15:01,920 --> 00:15:05,360
currently we only flag if a

372
00:15:05,360 --> 00:15:09,279
file exists in the artifact or repo if

373
00:15:09,279 --> 00:15:11,519
it has a known vulnerability

374
00:15:11,519 --> 00:15:13,600
but while we're in there we might as

375
00:15:13,600 --> 00:15:15,680
well create a full software build

376
00:15:15,680 --> 00:15:19,279
materials and we can store that spam in

377
00:15:19,279 --> 00:15:21,120
elasticsearch and then we have the

378
00:15:21,120 --> 00:15:22,959
ability to query that

379
00:15:22,959 --> 00:15:25,279
with our

380
00:15:25,279 --> 00:15:27,680
kibana tools and

381
00:15:27,680 --> 00:15:29,279
the big advantage of that will be if

382
00:15:29,279 --> 00:15:32,480
tomorrow there's a a new vulnerability

383
00:15:32,480 --> 00:15:34,560
that comes out in a supply chain

384
00:15:34,560 --> 00:15:36,399
vulnerability

385
00:15:36,399 --> 00:15:39,199
they always ask the security teams do we

386
00:15:39,199 --> 00:15:40,639
have that

387
00:15:40,639 --> 00:15:43,279
are we using that uh component that's

388
00:15:43,279 --> 00:15:45,440
everyone's worried about they they want

389
00:15:45,440 --> 00:15:46,720
to know from the security team right

390
00:15:46,720 --> 00:15:47,839
away

391
00:15:47,839 --> 00:15:49,839
and now if we have this s bond we could

392
00:15:49,839 --> 00:15:51,360
quickly query

393
00:15:51,360 --> 00:15:52,720
all the s bombs for all of our

394
00:15:52,720 --> 00:15:54,959
applications and and we will know if

395
00:15:54,959 --> 00:15:57,279
we're impacted by these supply chain

396
00:15:57,279 --> 00:15:59,360
issues because there's been several

397
00:15:59,360 --> 00:16:01,440
in the past year and they'll i'm sure

398
00:16:01,440 --> 00:16:04,720
there'll be more in the future

399
00:16:05,040 --> 00:16:07,040
and um

400
00:16:07,040 --> 00:16:09,759
and then because the alternative is

401
00:16:09,759 --> 00:16:12,320
would be to just wait until a cve is

402
00:16:12,320 --> 00:16:14,320
created for that file

403
00:16:14,320 --> 00:16:16,560
and wait until we run another scan of

404
00:16:16,560 --> 00:16:19,199
all of our repos and that could take

405
00:16:19,199 --> 00:16:21,440
uh many days but with the s bond we

406
00:16:21,440 --> 00:16:23,199
could quickly

407
00:16:23,199 --> 00:16:25,279
determine if we're affected by any kind

408
00:16:25,279 --> 00:16:27,360
of issues like that

409
00:16:27,360 --> 00:16:29,600
another area of future work is

410
00:16:29,600 --> 00:16:31,440
blocking merge requests when

411
00:16:31,440 --> 00:16:33,759
vulnerabilities are detected currently

412
00:16:33,759 --> 00:16:37,279
we just simply notify developers if they

413
00:16:37,279 --> 00:16:39,360
have any potential vulnerabilities in

414
00:16:39,360 --> 00:16:41,600
their code and it's their responsibility

415
00:16:41,600 --> 00:16:43,120
to fix them

416
00:16:43,120 --> 00:16:44,800
but we are looking into the ability to

417
00:16:44,800 --> 00:16:46,800
block them especially for any highly

418
00:16:46,800 --> 00:16:50,480
critical vulnerabilities

419
00:16:50,480 --> 00:16:52,399
and yeah we're looking at improving our

420
00:16:52,399 --> 00:16:53,920
coverage for different languages and

421
00:16:53,920 --> 00:16:55,600
technologies because developers are

422
00:16:55,600 --> 00:16:56,720
always

423
00:16:56,720 --> 00:16:58,720
innovating and using more technologies

424
00:16:58,720 --> 00:17:00,959
and we have to adapt our tool to

425
00:17:00,959 --> 00:17:02,880
keep up with that

426
00:17:02,880 --> 00:17:05,119
and we want to definitely reduce false

427
00:17:05,119 --> 00:17:08,240
positives wherever possible

428
00:17:08,240 --> 00:17:09,039
and

429
00:17:09,039 --> 00:17:10,799
we'd we'd also like to publish our

430
00:17:10,799 --> 00:17:12,559
implementation details to the community

431
00:17:12,559 --> 00:17:14,160
because as we've been talking about this

432
00:17:14,160 --> 00:17:16,319
with other colleagues at other companies

433
00:17:16,319 --> 00:17:18,880
we see there is a big need for platforms

434
00:17:18,880 --> 00:17:22,079
like this in the open source world

435
00:17:22,079 --> 00:17:24,319
and so and we'd like to consider open

436
00:17:24,319 --> 00:17:26,400
sourcing our framework code especially

437
00:17:26,400 --> 00:17:28,640
if we find others who are interested in

438
00:17:28,640 --> 00:17:31,200
working with us and

439
00:17:31,200 --> 00:17:33,360
roku is hiring our security team there's

440
00:17:33,360 --> 00:17:35,760
a link to cyber security jobs if you're

441
00:17:35,760 --> 00:17:38,160
interested

442
00:17:42,400 --> 00:17:44,080
in conclusion

443
00:17:44,080 --> 00:17:45,919
yeah all of us are using a wide variety

444
00:17:45,919 --> 00:17:48,640
of scanning tools both open source and

445
00:17:48,640 --> 00:17:50,240
commercial we're scanning our code

446
00:17:50,240 --> 00:17:52,400
constantly for vulnerabilities

447
00:17:52,400 --> 00:17:54,559
and what's needed is a platform to bring

448
00:17:54,559 --> 00:17:57,440
this all together in a consistent way

449
00:17:57,440 --> 00:18:00,320
and not only that but a mindset of quote

450
00:18:00,320 --> 00:18:02,640
streaming this vulnerability data to the

451
00:18:02,640 --> 00:18:03,840
developers

452
00:18:03,840 --> 00:18:05,760
that's focused on really extreme

453
00:18:05,760 --> 00:18:08,400
simplicity and ease of use developers

454
00:18:08,400 --> 00:18:09,919
are super busy

455
00:18:09,919 --> 00:18:12,000
and we need to really value their time

456
00:18:12,000 --> 00:18:14,720
and give them actionable

457
00:18:14,720 --> 00:18:18,320
important information when they need it

458
00:18:18,320 --> 00:18:20,480
and you know there are other platforms

459
00:18:20,480 --> 00:18:21,840
like this out there there's commercial

460
00:18:21,840 --> 00:18:23,600
products that are trying to do something

461
00:18:23,600 --> 00:18:25,520
like this i'm sure you go out if you go

462
00:18:25,520 --> 00:18:26,960
out there in the vendor booth one of

463
00:18:26,960 --> 00:18:28,480
those companies would be happy to sell

464
00:18:28,480 --> 00:18:29,760
you something

465
00:18:29,760 --> 00:18:31,440
that does all this

466
00:18:31,440 --> 00:18:33,360
but we want you to know that you could

467
00:18:33,360 --> 00:18:35,360
build something like this with just open

468
00:18:35,360 --> 00:18:38,320
source components like we have done

469
00:18:38,320 --> 00:18:41,039
using you could use jenkins for

470
00:18:41,039 --> 00:18:43,679
automation of the scans

471
00:18:43,679 --> 00:18:45,760
containerized the bots of open source

472
00:18:45,760 --> 00:18:48,480
scanning tools and run those

473
00:18:48,480 --> 00:18:52,080
you could use elk for your database and

474
00:18:52,080 --> 00:18:53,679
your dashboards

475
00:18:53,679 --> 00:18:54,840
and you

476
00:18:54,840 --> 00:18:57,039
could build something like this purely

477
00:18:57,039 --> 00:18:58,960
from open source

478
00:18:58,960 --> 00:19:00,720
and you may not exactly end up with

479
00:19:00,720 --> 00:19:02,480
exactly what we have but hopefully you

480
00:19:02,480 --> 00:19:05,440
can use the same type of principles and

481
00:19:05,440 --> 00:19:07,039
think about bringing all your

482
00:19:07,039 --> 00:19:09,200
vulnerability data together into

483
00:19:09,200 --> 00:19:11,760
consistent architecture

484
00:19:11,760 --> 00:19:14,799
all right thank you very much

485
00:19:15,039 --> 00:19:17,200
and

486
00:19:17,360 --> 00:19:21,440
excellent i really love that talk

487
00:19:21,440 --> 00:19:24,080
i do i mean i i look at source code all

488
00:19:24,080 --> 00:19:26,880
the time for customers and um

489
00:19:26,880 --> 00:19:27,679
uh

490
00:19:27,679 --> 00:19:30,160
what about uh sonar cube

491
00:19:30,160 --> 00:19:32,480
twist lock is twist lock free i think

492
00:19:32,480 --> 00:19:34,880
sonar cube has a community edition

493
00:19:34,880 --> 00:19:36,880
but yeah yeah there's a lot of really

494
00:19:36,880 --> 00:19:38,799
good commercial tools out there as well

495
00:19:38,799 --> 00:19:41,440
uh we just decided to do using open

496
00:19:41,440 --> 00:19:43,679
source technology uh just because we

497
00:19:43,679 --> 00:19:45,039
could really tailor fit it to what we

498
00:19:45,039 --> 00:19:47,120
needed but the same principles could be

499
00:19:47,120 --> 00:19:49,360
applied to a number of commercial tools

500
00:19:49,360 --> 00:19:51,039
as well well you all got it together

501
00:19:51,039 --> 00:19:54,320
i'll tell you that much all right so um

502
00:19:54,320 --> 00:19:57,439
folks out there questions

503
00:19:57,520 --> 00:19:59,200
comments

504
00:19:59,200 --> 00:20:01,919
ah there we go okay um let me

505
00:20:01,919 --> 00:20:05,799
talk to this person real quick

506
00:20:07,520 --> 00:20:09,280
who raise your hand over here

507
00:20:09,280 --> 00:20:11,600
okay

508
00:20:12,159 --> 00:20:12,960
thanks

509
00:20:12,960 --> 00:20:14,880
um i'm wondering what's the latency

510
00:20:14,880 --> 00:20:17,120
introduced in build times due to all of

511
00:20:17,120 --> 00:20:18,960
these containerized bots and what

512
00:20:18,960 --> 00:20:21,760
developer feedback has been

513
00:20:21,760 --> 00:20:22,960
sure um

514
00:20:22,960 --> 00:20:26,080
so what our approach is to to run these

515
00:20:26,080 --> 00:20:28,240
scans during the

516
00:20:28,240 --> 00:20:31,200
merge requests or pull requests and

517
00:20:31,200 --> 00:20:34,080
automatically run when they create or

518
00:20:34,080 --> 00:20:35,679
update a merge request

519
00:20:35,679 --> 00:20:37,440
and there is

520
00:20:37,440 --> 00:20:38,960
the scans depending on the size of the

521
00:20:38,960 --> 00:20:41,039
repo it could just take a minute or two

522
00:20:41,039 --> 00:20:42,880
or it can take

523
00:20:42,880 --> 00:20:44,960
5 or 10 minutes for the larger

524
00:20:44,960 --> 00:20:48,000
applications but we our decision is we

525
00:20:48,000 --> 00:20:50,080
won't block them from deploying their

526
00:20:50,080 --> 00:20:52,400
code so even if they want to go forward

527
00:20:52,400 --> 00:20:55,360
with the merge request before the

528
00:20:55,360 --> 00:20:56,480
results

529
00:20:56,480 --> 00:20:58,799
are ready they can still go ahead and do

530
00:20:58,799 --> 00:21:00,840
a build specif especially if it's an

531
00:21:00,840 --> 00:21:04,400
emergency urgent situation but typically

532
00:21:04,400 --> 00:21:06,559
merge requests do have a

533
00:21:06,559 --> 00:21:08,880
significant time because that's when

534
00:21:08,880 --> 00:21:11,840
developers do the code reviews

535
00:21:11,840 --> 00:21:13,760
when they're reviewing the code before

536
00:21:13,760 --> 00:21:15,840
it's merged and released so there

537
00:21:15,840 --> 00:21:19,360
usually is a period of hours or more

538
00:21:19,360 --> 00:21:20,240
where

539
00:21:20,240 --> 00:21:21,679
we have the opportunity to do this

540
00:21:21,679 --> 00:21:22,720
scanning

541
00:21:22,720 --> 00:21:24,240
so we have not had any complaints about

542
00:21:24,240 --> 00:21:27,280
this taking too long

543
00:21:27,280 --> 00:21:28,559
and we're

544
00:21:28,559 --> 00:21:30,159
not

545
00:21:30,159 --> 00:21:31,840
blocking them from proceeding with their

546
00:21:31,840 --> 00:21:34,080
build

547
00:21:35,440 --> 00:21:38,240
fantastic okay someone else you had a

548
00:21:38,240 --> 00:21:39,919
question

549
00:21:39,919 --> 00:21:41,760
yeah so you mentioned uh you want to

550
00:21:41,760 --> 00:21:43,919
reduce false positives i mean the entire

551
00:21:43,919 --> 00:21:46,240
industry actually wants to do that so

552
00:21:46,240 --> 00:21:48,640
what are you actively doing uh

553
00:21:48,640 --> 00:21:49,919
specifically

554
00:21:49,919 --> 00:21:53,440
to do to reduce false positives

555
00:21:53,440 --> 00:21:55,120
right yeah so we

556
00:21:55,120 --> 00:21:55,919
um

557
00:21:55,919 --> 00:21:59,360
we have scanning rules since we as we're

558
00:21:59,360 --> 00:22:00,720
building our own tools we're able to

559
00:22:00,720 --> 00:22:03,039
customize the scanning rules and we're

560
00:22:03,039 --> 00:22:04,640
able to if

561
00:22:04,640 --> 00:22:07,120
their issues are flagged in our viewer

562
00:22:07,120 --> 00:22:09,840
as false positives we can review them

563
00:22:09,840 --> 00:22:11,679
and if one app reviews it we can

564
00:22:11,679 --> 00:22:12,720
consider

565
00:22:12,720 --> 00:22:15,600
if it's applies to others so it's a

566
00:22:15,600 --> 00:22:18,159
learning learning based feedback system

567
00:22:18,159 --> 00:22:21,760
so if as we see false positives

568
00:22:21,760 --> 00:22:24,320
popping up we can just adapt our rules

569
00:22:24,320 --> 00:22:25,440
to that

570
00:22:25,440 --> 00:22:27,039
for future

571
00:22:27,039 --> 00:22:29,760
but yeah it's an ongoing battle

572
00:22:29,760 --> 00:22:30,640
and

573
00:22:30,640 --> 00:22:31,919
but

574
00:22:31,919 --> 00:22:33,840
there's no way to avoid it but it's

575
00:22:33,840 --> 00:22:36,400
something we are constantly improving

576
00:22:36,400 --> 00:22:39,120
and learning learning from

577
00:22:39,120 --> 00:22:43,719
excellent other questions out there

578
00:22:54,640 --> 00:22:56,159
oh sorry make you come all the way up

579
00:22:56,159 --> 00:22:56,880
here

580
00:22:56,880 --> 00:22:58,480
yeah um

581
00:22:58,480 --> 00:23:01,679
uh do do you get any refend uh repeating

582
00:23:01,679 --> 00:23:04,000
offenders for developing developing

583
00:23:04,000 --> 00:23:06,320
teams that continuously release

584
00:23:06,320 --> 00:23:10,640
vulnerable code how do you manage that

585
00:23:10,640 --> 00:23:11,440
um

586
00:23:11,440 --> 00:23:13,280
yeah there are teams some teams are much

587
00:23:13,280 --> 00:23:15,120
better than others

588
00:23:15,120 --> 00:23:16,799
resolving issues

589
00:23:16,799 --> 00:23:18,320
and

590
00:23:18,320 --> 00:23:20,720
we we have these dashboards so we can

591
00:23:20,720 --> 00:23:23,679
actually track across different teams so

592
00:23:23,679 --> 00:23:26,400
we we know from our dashboards which

593
00:23:26,400 --> 00:23:27,840
teams have

594
00:23:27,840 --> 00:23:29,919
uh are better at responding to these

595
00:23:29,919 --> 00:23:32,240
vulnerability alerts than others

596
00:23:32,240 --> 00:23:35,039
and then we could that we requires a

597
00:23:35,039 --> 00:23:37,280
more personalized approach to to work

598
00:23:37,280 --> 00:23:39,120
with those teams and understand if

599
00:23:39,120 --> 00:23:41,039
there's any underlying issues why

600
00:23:41,039 --> 00:23:43,840
they're not fixing the issues promptly

601
00:23:43,840 --> 00:23:46,720
but and we have really precious

602
00:23:46,720 --> 00:23:49,520
few resources in our team so we want to

603
00:23:49,520 --> 00:23:51,279
use our resources to meet with those

604
00:23:51,279 --> 00:23:53,440
teams that have these kinds of problems

605
00:23:53,440 --> 00:23:54,480
the most

606
00:23:54,480 --> 00:23:56,720
and that's where the cabana dashboards

607
00:23:56,720 --> 00:23:59,360
really help us really zero in on any

608
00:23:59,360 --> 00:24:02,400
uh product teams or

609
00:24:02,400 --> 00:24:04,320
application teams that need that extra

610
00:24:04,320 --> 00:24:08,480
support from the trust engineering team

611
00:24:08,480 --> 00:24:11,200
oh very good um yeah i often thought

612
00:24:11,200 --> 00:24:12,799
about the future of like

613
00:24:12,799 --> 00:24:15,520
using machine learning to pick out

614
00:24:15,520 --> 00:24:17,679
bad developers in code

615
00:24:17,679 --> 00:24:18,400
or

616
00:24:18,400 --> 00:24:21,919
you know bad code always copied off of

617
00:24:21,919 --> 00:24:23,039
uh

618
00:24:23,039 --> 00:24:24,480
um

619
00:24:24,480 --> 00:24:26,640
off the web right so any other questions

620
00:24:26,640 --> 00:24:29,520
before we wrap up here

621
00:24:29,520 --> 00:24:30,640
all right well y'all have been a

622
00:24:30,640 --> 00:24:32,640
tremendous audience

623
00:24:32,640 --> 00:24:35,679
rob you've been a fantastic speaker

624
00:24:35,679 --> 00:24:40,279
all right thank you very much sir

