1
00:00:00,080 --> 00:00:01,839
um welcome to this session in which we

2
00:00:01,839 --> 00:00:04,240
are going to learn about the power of

3
00:00:04,240 --> 00:00:06,399
guard rails how to slash your risk of

4
00:00:06,399 --> 00:00:09,040
cross-site scripting in half

5
00:00:09,040 --> 00:00:09,920
from

6
00:00:09,920 --> 00:00:12,240
colleen dye who is a security software

7
00:00:12,240 --> 00:00:14,320
engineer at r2c

8
00:00:14,320 --> 00:00:16,640
and from grayson hardaway who is a

9
00:00:16,640 --> 00:00:19,119
security researcher at r2c so take it

10
00:00:19,119 --> 00:00:21,590
away guys

11
00:00:21,590 --> 00:00:24,240
[Applause]

12
00:00:24,240 --> 00:00:25,680
awesome sorry for the technical

13
00:00:25,680 --> 00:00:27,359
difficulties

14
00:00:27,359 --> 00:00:29,679
um cool i'm colleen and together with

15
00:00:29,679 --> 00:00:31,679
grayson we'll be talking about how to

16
00:00:31,679 --> 00:00:33,280
use secure guardrails that encourage

17
00:00:33,280 --> 00:00:35,200
developers to write secure code that can

18
00:00:35,200 --> 00:00:36,800
actually decrease your risk of

19
00:00:36,800 --> 00:00:39,600
cross-site scripting significantly

20
00:00:39,600 --> 00:00:42,320
so a lot of companies have around 100 or

21
00:00:42,320 --> 00:00:44,079
more developers to every security

22
00:00:44,079 --> 00:00:46,559
engineer and it can feel pretty easy to

23
00:00:46,559 --> 00:00:48,719
be buried in vulnerabilities and feel

24
00:00:48,719 --> 00:00:50,559
like you can't really keep up

25
00:00:50,559 --> 00:00:52,160
but some companies have actually been

26
00:00:52,160 --> 00:00:53,760
changing how they run their security

27
00:00:53,760 --> 00:00:55,680
programs and it seems to be working

28
00:00:55,680 --> 00:00:57,760
pretty well they're higher leverage

29
00:00:57,760 --> 00:00:59,359
they're more effective and they're

30
00:00:59,359 --> 00:01:01,440
keeping their company secure even while

31
00:01:01,440 --> 00:01:03,440
keeping the same ratio of developers to

32
00:01:03,440 --> 00:01:05,519
security engineers

33
00:01:05,519 --> 00:01:07,280
so today we're going to be talking about

34
00:01:07,280 --> 00:01:09,360
how these companies are doing that and

35
00:01:09,360 --> 00:01:10,799
we're going to be talking about secure

36
00:01:10,799 --> 00:01:12,799
guardrails in particular

37
00:01:12,799 --> 00:01:14,320
secure guardrails are essentially

38
00:01:14,320 --> 00:01:16,000
safeguards that are put into place to

39
00:01:16,000 --> 00:01:18,159
make it easy for developers to write

40
00:01:18,159 --> 00:01:20,400
secure code and hard to write insecure

41
00:01:20,400 --> 00:01:21,280
code

42
00:01:21,280 --> 00:01:23,040
so we'll talk about how guard florals

43
00:01:23,040 --> 00:01:24,799
can actually pretty drastically reduce

44
00:01:24,799 --> 00:01:26,080
the number of vulnerabilities you have

45
00:01:26,080 --> 00:01:28,080
to track down and fix based on some

46
00:01:28,080 --> 00:01:29,600
original research we've been doing

47
00:01:29,600 --> 00:01:31,119
examining real crosstalk scripting

48
00:01:31,119 --> 00:01:34,960
vulnerabilities in open source software

49
00:01:35,439 --> 00:01:37,439
so here's a brief summary of how we're

50
00:01:37,439 --> 00:01:39,439
trying to approach security

51
00:01:39,439 --> 00:01:41,119
so we used to really think about

52
00:01:41,119 --> 00:01:43,119
eliminating individual books through pen

53
00:01:43,119 --> 00:01:46,159
testing bug bounties etc but now

54
00:01:46,159 --> 00:01:47,759
industry is trying to shift towards

55
00:01:47,759 --> 00:01:49,600
killing bug classes and secure

56
00:01:49,600 --> 00:01:51,680
guardrails in general and this achieves

57
00:01:51,680 --> 00:01:54,079
pretty scalable systematic and long-term

58
00:01:54,079 --> 00:01:55,439
wins

59
00:01:55,439 --> 00:01:56,799
but how do we actually know this is

60
00:01:56,799 --> 00:01:58,159
effective

61
00:01:58,159 --> 00:01:59,759
well we performed some research to

62
00:01:59,759 --> 00:02:01,920
determine whether secured guardrails is

63
00:02:01,920 --> 00:02:04,159
effective in practice and it has shown

64
00:02:04,159 --> 00:02:05,520
us that secure guardrails could have

65
00:02:05,520 --> 00:02:07,600
caught greater than 50 of the cross-site

66
00:02:07,600 --> 00:02:09,598
scripting vulnerabilities in our open

67
00:02:09,598 --> 00:02:12,480
source repositories

68
00:02:12,480 --> 00:02:14,959
so who are we um i'm currently i'm

69
00:02:14,959 --> 00:02:16,239
colleen i'm currently a security

70
00:02:16,239 --> 00:02:18,319
researcher at r2c and i graduated

71
00:02:18,319 --> 00:02:20,640
stanford in 2020 with my bachelor's of

72
00:02:20,640 --> 00:02:24,239
cs and my master's of statistics

73
00:02:24,239 --> 00:02:26,319
and i'm grayson i'm also a security

74
00:02:26,319 --> 00:02:27,520
researcher at rtc i've been there for

75
00:02:27,520 --> 00:02:29,360
three years in the past life i worked

76
00:02:29,360 --> 00:02:30,800
for the us department of defense doing

77
00:02:30,800 --> 00:02:32,640
all manner of different things from low

78
00:02:32,640 --> 00:02:36,080
level stuff to big data analysis

79
00:02:36,080 --> 00:02:38,640
cool thanks grayson and what's r2c well

80
00:02:38,640 --> 00:02:40,800
we're a static-based stag analysis

81
00:02:40,800 --> 00:02:42,879
startup and our mission is to improve

82
00:02:42,879 --> 00:02:46,720
software security and reliability

83
00:02:46,720 --> 00:02:48,319
so here's a brief outline of what we're

84
00:02:48,319 --> 00:02:50,160
going to be really talking about today

85
00:02:50,160 --> 00:02:52,319
so we'll first discuss why secure

86
00:02:52,319 --> 00:02:54,239
guardrails are important and then we'll

87
00:02:54,239 --> 00:02:56,239
talk about how we tested whether secure

88
00:02:56,239 --> 00:02:58,560
guardrails is effective in practice

89
00:02:58,560 --> 00:03:00,560
what we found and what we've learned

90
00:03:00,560 --> 00:03:04,480
since we've conducted this research

91
00:03:04,480 --> 00:03:06,400
so i'm first going to talk about the os

92
00:03:06,400 --> 00:03:09,200
top 10 which we really can't escape from

93
00:03:09,200 --> 00:03:10,800
these days

94
00:03:10,800 --> 00:03:12,640
so more specifically i want to really

95
00:03:12,640 --> 00:03:16,159
compare the os top 10 in 2017 to the os

96
00:03:16,159 --> 00:03:18,800
top 10 in 2021

97
00:03:18,800 --> 00:03:21,519
you might see some similarities

98
00:03:21,519 --> 00:03:23,760
so if we look if we take a closer look

99
00:03:23,760 --> 00:03:25,440
we can see that seven out of ten of

100
00:03:25,440 --> 00:03:27,360
these vulnerabilities have remained in

101
00:03:27,360 --> 00:03:30,239
the old's top ten in 2021 that were the

102
00:03:30,239 --> 00:03:33,680
same in the oil top 10 in 2017.

103
00:03:33,680 --> 00:03:35,519
some of these might have been renamed

104
00:03:35,519 --> 00:03:37,599
some of some are in their original form

105
00:03:37,599 --> 00:03:39,519
some might have been categorized with

106
00:03:39,519 --> 00:03:42,720
other things but they're all there still

107
00:03:42,720 --> 00:03:44,879
so given that all of these vulnerability

108
00:03:44,879 --> 00:03:47,040
classes have stayed pretty much the same

109
00:03:47,040 --> 00:03:48,959
over four plus years we really need to

110
00:03:48,959 --> 00:03:50,480
take a good look at what we've been

111
00:03:50,480 --> 00:03:52,239
doing in the past and what we should be

112
00:03:52,239 --> 00:03:54,560
doing in the future

113
00:03:54,560 --> 00:03:56,480
so what we've been doing in the past has

114
00:03:56,480 --> 00:03:57,840
been what we call playing bug

115
00:03:57,840 --> 00:04:00,239
whack-a-mole which are pen testing bug

116
00:04:00,239 --> 00:04:03,120
bounties and finding individual bugs

117
00:04:03,120 --> 00:04:04,799
and what the industry is now trying to

118
00:04:04,799 --> 00:04:06,159
move towards and what we're really

119
00:04:06,159 --> 00:04:08,480
advocating for is secure guard rails

120
00:04:08,480 --> 00:04:10,480
which involves continuous scanning

121
00:04:10,480 --> 00:04:12,239
enforcing safe patterns and making it

122
00:04:12,239 --> 00:04:13,840
harder for developers to write and

123
00:04:13,840 --> 00:04:15,519
secure code

124
00:04:15,519 --> 00:04:16,959
but you might ask

125
00:04:16,959 --> 00:04:19,358
actually the evidence that this is what

126
00:04:19,358 --> 00:04:22,720
we should actually be moving towards

127
00:04:22,720 --> 00:04:24,720
so you're probably thinking we've been

128
00:04:24,720 --> 00:04:26,320
finding bugs for ages why should we

129
00:04:26,320 --> 00:04:28,800
change what we've been doing um well

130
00:04:28,800 --> 00:04:30,720
we'll first give a few examples of what

131
00:04:30,720 --> 00:04:32,400
some forward-thinking mature security

132
00:04:32,400 --> 00:04:34,160
programs are doing and then we'll go

133
00:04:34,160 --> 00:04:36,000
into some research we did in preventing

134
00:04:36,000 --> 00:04:38,160
cross-site scripting in the wild

135
00:04:38,160 --> 00:04:40,080
so let's first take a look at what a few

136
00:04:40,080 --> 00:04:42,720
companies are actually doing

137
00:04:42,720 --> 00:04:44,960
so let's take a look at microsoft

138
00:04:44,960 --> 00:04:45,919
and

139
00:04:45,919 --> 00:04:47,440
explicitly let's take a look at what

140
00:04:47,440 --> 00:04:48,560
microsoft did when they were

141
00:04:48,560 --> 00:04:51,520
transitioning from xp to vista so they

142
00:04:51,520 --> 00:04:53,199
were able to get 41 percent of

143
00:04:53,199 --> 00:04:54,800
vulnerabilities reduced just from

144
00:04:54,800 --> 00:04:57,040
banning third copy and functions likes

145
00:04:57,040 --> 00:04:58,240
their copy

146
00:04:58,240 --> 00:04:59,680
and it's not just microsoft that's been

147
00:04:59,680 --> 00:05:02,560
doing this netflix google and some other

148
00:05:02,560 --> 00:05:04,160
big companies who are forward thinking

149
00:05:04,160 --> 00:05:06,000
security have also been doing similar

150
00:05:06,000 --> 00:05:07,120
things

151
00:05:07,120 --> 00:05:09,120
so netflix gave a talk during appsec

152
00:05:09,120 --> 00:05:11,440
cali about how they're moving towards a

153
00:05:11,440 --> 00:05:15,600
paved road and killing bug classes

154
00:05:15,600 --> 00:05:18,000
and also google has stated in one of its

155
00:05:18,000 --> 00:05:19,440
books which is building securing

156
00:05:19,440 --> 00:05:21,280
reliable systems that it's pretty

157
00:05:21,280 --> 00:05:23,440
unreasonable to expect any developer to

158
00:05:23,440 --> 00:05:26,160
be an expert in security reliability and

159
00:05:26,160 --> 00:05:28,479
writing good code so a better approach

160
00:05:28,479 --> 00:05:30,080
is to actually handle security and

161
00:05:30,080 --> 00:05:32,080
reliability in common frameworks

162
00:05:32,080 --> 00:05:34,479
languages and libraries and ideally

163
00:05:34,479 --> 00:05:36,479
these libraries only expose an interface

164
00:05:36,479 --> 00:05:38,160
that makes writing code with common

165
00:05:38,160 --> 00:05:40,000
classes of security vulnerabilities

166
00:05:40,000 --> 00:05:42,639
impossible

167
00:05:42,720 --> 00:05:44,320
and addition to what these companies are

168
00:05:44,320 --> 00:05:45,759
doing we're going to reference our

169
00:05:45,759 --> 00:05:47,759
research which finds that using secure

170
00:05:47,759 --> 00:05:50,160
guardrails could have prevented 59 of

171
00:05:50,160 --> 00:05:52,000
the 100 for the instances of cross-site

172
00:05:52,000 --> 00:05:56,160
scripting in our open source dataset

173
00:05:56,400 --> 00:05:57,919
cool so now that we've talked a little

174
00:05:57,919 --> 00:05:59,520
bit about why secured guardrails is

175
00:05:59,520 --> 00:06:01,199
actually important we'll talk a little

176
00:06:01,199 --> 00:06:03,360
bit about how we tested whether secure

177
00:06:03,360 --> 00:06:06,240
guardrails actually works

178
00:06:06,240 --> 00:06:08,400
so our research question that we wanted

179
00:06:08,400 --> 00:06:10,720
answered was are secured guardrails

180
00:06:10,720 --> 00:06:13,120
actually effective in practice and we

181
00:06:13,120 --> 00:06:14,639
needed to translate this into something

182
00:06:14,639 --> 00:06:16,960
that could actually be tested so we

183
00:06:16,960 --> 00:06:18,880
translated this into a methodology which

184
00:06:18,880 --> 00:06:20,720
is how many instances of crosstalk

185
00:06:20,720 --> 00:06:22,880
scripting in open source software

186
00:06:22,880 --> 00:06:24,560
could have been prevented with the use

187
00:06:24,560 --> 00:06:27,680
of secure guard rails

188
00:06:27,680 --> 00:06:28,880
so in order to make sure that our

189
00:06:28,880 --> 00:06:30,800
research didn't actually last like 2-3

190
00:06:30,800 --> 00:06:33,360
years we needed to determine our scope

191
00:06:33,360 --> 00:06:34,800
so we chose cross-site scripting in

192
00:06:34,800 --> 00:06:37,520
particular because it has high impact

193
00:06:37,520 --> 00:06:39,280
you can see that's been in the oauth top

194
00:06:39,280 --> 00:06:42,000
10 for for a large number of years

195
00:06:42,000 --> 00:06:43,360
and also if you look at the bottom of

196
00:06:43,360 --> 00:06:46,000
the slide we can see that the hacker one

197
00:06:46,000 --> 00:06:47,840
top 10 most impactful and rewarded

198
00:06:47,840 --> 00:06:49,919
vulnerability types includes cross-site

199
00:06:49,919 --> 00:06:52,319
scripting in 2020

200
00:06:52,319 --> 00:06:54,720
it's also relatively common and a lot of

201
00:06:54,720 --> 00:06:56,319
web frameworks have pretty standard

202
00:06:56,319 --> 00:06:58,560
cross-site scripting mitigations and

203
00:06:58,560 --> 00:07:00,400
this is important to us because this

204
00:07:00,400 --> 00:07:01,840
means that there's concrete code

205
00:07:01,840 --> 00:07:03,840
patterns to look for and therefore we

206
00:07:03,840 --> 00:07:07,199
can pretty easily write rules for this

207
00:07:07,199 --> 00:07:08,880
and finally and last but not least we

208
00:07:08,880 --> 00:07:10,400
wanted to prevent cross-site scripting

209
00:07:10,400 --> 00:07:13,280
in our own code

210
00:07:13,520 --> 00:07:15,280
so after we determined that we wanted to

211
00:07:15,280 --> 00:07:17,840
look for cross-site scripting we then

212
00:07:17,840 --> 00:07:19,440
determined which languages and

213
00:07:19,440 --> 00:07:21,280
frameworks that we really wanted to look

214
00:07:21,280 --> 00:07:23,360
at so we chose these frameworks mainly

215
00:07:23,360 --> 00:07:25,199
because they're popular

216
00:07:25,199 --> 00:07:29,120
and it includes java.js

217
00:07:31,120 --> 00:07:33,520
so after we determined our scope we then

218
00:07:33,520 --> 00:07:34,880
went into

219
00:07:34,880 --> 00:07:36,639
um getting a bigger idea of what

220
00:07:36,639 --> 00:07:38,319
architecture we needed

221
00:07:38,319 --> 00:07:40,560
so here's a brief overview of what we

222
00:07:40,560 --> 00:07:42,160
did in order to

223
00:07:42,160 --> 00:07:44,960
run our research so we first wrote some

224
00:07:44,960 --> 00:07:46,720
cross-site scripting checks with some

225
00:07:46,720 --> 00:07:48,479
grub because we were most familiar with

226
00:07:48,479 --> 00:07:49,360
it

227
00:07:49,360 --> 00:07:50,960
and then we collected some open source

228
00:07:50,960 --> 00:07:53,680
added with bigquery and github

229
00:07:53,680 --> 00:07:56,240
we later filtered on relevancy and made

230
00:07:56,240 --> 00:07:57,919
sure that we only retained the languages

231
00:07:57,919 --> 00:07:59,280
and frameworks that we really wanted to

232
00:07:59,280 --> 00:08:01,360
review and then we ran our cross-site

233
00:08:01,360 --> 00:08:04,080
scripting checks on stem grip with on on

234
00:08:04,080 --> 00:08:05,919
these commits

235
00:08:05,919 --> 00:08:07,680
and then last but not least we tried the

236
00:08:07,680 --> 00:08:10,160
results

237
00:08:10,639 --> 00:08:12,479
cool so our first step was to write some

238
00:08:12,479 --> 00:08:14,000
checks to detect some violations of

239
00:08:14,000 --> 00:08:16,160
cross-site scripting guardrails so we

240
00:08:16,160 --> 00:08:18,000
used some popular security guides some

241
00:08:18,000 --> 00:08:20,319
documentation for frameworks purposely

242
00:08:20,319 --> 00:08:22,160
vulnerable apps and our own security

243
00:08:22,160 --> 00:08:24,479
expertise to really define patterns for

244
00:08:24,479 --> 00:08:26,080
all the way that cross-flight scripting

245
00:08:26,080 --> 00:08:28,319
can occur

246
00:08:28,319 --> 00:08:29,919
so here's an example of a cross-site

247
00:08:29,919 --> 00:08:32,559
scripting policy we developed for flask

248
00:08:32,559 --> 00:08:34,799
and we actually run this on our own code

249
00:08:34,799 --> 00:08:36,719
and a goal of a policy like this is

250
00:08:36,719 --> 00:08:38,640
essentially to say if you follow these

251
00:08:38,640 --> 00:08:40,399
recommendations you're pretty unlikely

252
00:08:40,399 --> 00:08:42,559
to have cross-site scripting so you can

253
00:08:42,559 --> 00:08:43,919
check out our crossfit scripting rule

254
00:08:43,919 --> 00:08:45,600
set and all the rules that come along

255
00:08:45,600 --> 00:08:47,760
with it if you want to use it to analyze

256
00:08:47,760 --> 00:08:50,399
your own code

257
00:08:51,440 --> 00:08:53,040
and after we wrote these cross-site

258
00:08:53,040 --> 00:08:54,959
scripting checks with some grubs we then

259
00:08:54,959 --> 00:08:56,320
moved on to the next step which is

260
00:08:56,320 --> 00:08:59,600
collecting some open source data

261
00:08:59,600 --> 00:09:01,920
we actually looked into two sources so

262
00:09:01,920 --> 00:09:03,839
we first look into bigquery because it's

263
00:09:03,839 --> 00:09:05,680
a pretty massive data set it's easy to

264
00:09:05,680 --> 00:09:08,320
mine and it's also easy to obtain obtain

265
00:09:08,320 --> 00:09:09,920
the parent commits and we'll talk a

266
00:09:09,920 --> 00:09:13,120
little bit about this is important later

267
00:09:13,120 --> 00:09:15,440
however it was last updated on march

268
00:09:15,440 --> 00:09:18,160
20th 2019 so we really wanted to

269
00:09:18,160 --> 00:09:19,680
retrieve some up-to-date cross-site

270
00:09:19,680 --> 00:09:21,600
scripting information

271
00:09:21,600 --> 00:09:23,440
we did manage to obtain around 5000

272
00:09:23,440 --> 00:09:26,080
commits with bigquery but we wanted to

273
00:09:26,080 --> 00:09:27,760
make sure that we obtained some

274
00:09:27,760 --> 00:09:29,440
up-to-date cross-site scripting and this

275
00:09:29,440 --> 00:09:31,920
really led to us really led us to the

276
00:09:31,920 --> 00:09:34,640
github search api

277
00:09:34,640 --> 00:09:37,200
so some pros of the github search api

278
00:09:37,200 --> 00:09:39,279
are that it's up to date data and

279
00:09:39,279 --> 00:09:40,959
there's a lot of commits with a lot of

280
00:09:40,959 --> 00:09:42,560
information to grab

281
00:09:42,560 --> 00:09:44,080
um but it was really difficult to

282
00:09:44,080 --> 00:09:46,080
actually obtain the parent commits and

283
00:09:46,080 --> 00:09:47,920
this was because we had to script in

284
00:09:47,920 --> 00:09:50,640
order to obtain these and also of course

285
00:09:50,640 --> 00:09:52,959
the api provides only up to a thousand

286
00:09:52,959 --> 00:09:54,640
results for each search

287
00:09:54,640 --> 00:09:56,320
so we had to get really creative in

288
00:09:56,320 --> 00:09:59,519
order to bypass this

289
00:10:02,000 --> 00:10:04,480
awesome so after we obtained some open

290
00:10:04,480 --> 00:10:05,920
source data we then filtered on

291
00:10:05,920 --> 00:10:08,399
relevancy by eliminating the languages

292
00:10:08,399 --> 00:10:09,760
and frameworks that we didn't really

293
00:10:09,760 --> 00:10:11,200
want to look at

294
00:10:11,200 --> 00:10:14,079
um and then we proceeded to run rules we

295
00:10:14,079 --> 00:10:16,160
ran our xss checks that we wrote with

296
00:10:16,160 --> 00:10:18,959
some grip on this open source data

297
00:10:18,959 --> 00:10:20,800
so here's a diagram of the commits we

298
00:10:20,800 --> 00:10:22,240
retrieved and some other information

299
00:10:22,240 --> 00:10:24,399
that we decided we needed

300
00:10:24,399 --> 00:10:26,399
so the bottom commit is to commit with

301
00:10:26,399 --> 00:10:28,320
the fix something something crosstalk

302
00:10:28,320 --> 00:10:29,600
scripting something something in its

303
00:10:29,600 --> 00:10:30,560
message

304
00:10:30,560 --> 00:10:32,000
the commit where the actual crosstalk

305
00:10:32,000 --> 00:10:34,240
scripting vulnerability was fixed

306
00:10:34,240 --> 00:10:35,839
and the parent commit is the commit

307
00:10:35,839 --> 00:10:36,880
where the crosstalk scripting

308
00:10:36,880 --> 00:10:39,440
vulnerability has not yet been fixed and

309
00:10:39,440 --> 00:10:40,720
we run our some group crosstalk

310
00:10:40,720 --> 00:10:42,079
scripting rules that we wrote on the

311
00:10:42,079 --> 00:10:44,000
parent commit because the vulnerability

312
00:10:44,000 --> 00:10:45,360
still exists there

313
00:10:45,360 --> 00:10:47,279
and we retrieve the git difference

314
00:10:47,279 --> 00:10:48,880
between the parent commit and the commit

315
00:10:48,880 --> 00:10:50,240
with the fix something something

316
00:10:50,240 --> 00:10:51,519
crosstalk scripting something something

317
00:10:51,519 --> 00:10:52,560
message

318
00:10:52,560 --> 00:10:55,040
so we can see whether we actually caught

319
00:10:55,040 --> 00:10:57,519
the fix

320
00:10:57,839 --> 00:11:00,000
and here's a brief overview of our

321
00:11:00,000 --> 00:11:02,160
scripts that we ran in order to obtain

322
00:11:02,160 --> 00:11:05,040
these results so we first went up a ec2

323
00:11:05,040 --> 00:11:07,760
instance and we wrote some scripts that

324
00:11:07,760 --> 00:11:09,920
first took the json output from bigquery

325
00:11:09,920 --> 00:11:11,040
or github

326
00:11:11,040 --> 00:11:12,640
downloaded the repositories that we

327
00:11:12,640 --> 00:11:14,160
needed and then retrieved the

328
00:11:14,160 --> 00:11:15,680
differences between the parent commit

329
00:11:15,680 --> 00:11:17,200
and the commit with the fixed something

330
00:11:17,200 --> 00:11:19,839
something exact message

331
00:11:19,839 --> 00:11:21,600
we then proceeded to run the cross-site

332
00:11:21,600 --> 00:11:23,600
scripting rules on the parent commit and

333
00:11:23,600 --> 00:11:25,680
then save the get differences and some

334
00:11:25,680 --> 00:11:26,880
group results in the lightweight

335
00:11:26,880 --> 00:11:28,240
database so that we could retrieve it

336
00:11:28,240 --> 00:11:31,279
later in our triager

337
00:11:31,279 --> 00:11:33,360
so finally our fourth step and final

338
00:11:33,360 --> 00:11:35,360
step in this architectural diagram is

339
00:11:35,360 --> 00:11:37,200
triaging so

340
00:11:37,200 --> 00:11:39,600
we actually classified the samko results

341
00:11:39,600 --> 00:11:41,760
for each commit as a true positive or a

342
00:11:41,760 --> 00:11:43,120
false negative

343
00:11:43,120 --> 00:11:45,200
and a true positive means that some

344
00:11:45,200 --> 00:11:46,959
group detected the cross

345
00:11:46,959 --> 00:11:49,360
scripting vulnerability or some group

346
00:11:49,360 --> 00:11:51,120
detected a cause that led to cross-site

347
00:11:51,120 --> 00:11:53,120
scripting and a false negative was

348
00:11:53,120 --> 00:11:54,880
everything else and grayson will

349
00:11:54,880 --> 00:11:58,480
actually give a few examples of these

350
00:11:59,040 --> 00:12:01,040
thanks colleen can everyone hear me

351
00:12:01,040 --> 00:12:02,800
i see thumbs up great

352
00:12:02,800 --> 00:12:04,800
so what did we find let's dive into the

353
00:12:04,800 --> 00:12:07,120
results so as colleen was talking about

354
00:12:07,120 --> 00:12:08,800
just a second ago we had two cases that

355
00:12:08,800 --> 00:12:10,000
we consider to be true positives the

356
00:12:10,000 --> 00:12:11,440
first one is detecting the direct fix

357
00:12:11,440 --> 00:12:13,120
and so this what you see on the screen

358
00:12:13,120 --> 00:12:16,079
is a rails example where the cross-site

359
00:12:16,079 --> 00:12:17,839
scripting vulnerability was

360
00:12:17,839 --> 00:12:20,560
um in the application in an erb template

361
00:12:20,560 --> 00:12:22,320
that was using html safe if you're not

362
00:12:22,320 --> 00:12:24,079
familiar with it html safe does not mean

363
00:12:24,079 --> 00:12:25,279
that it's safe it means that you think

364
00:12:25,279 --> 00:12:26,720
that it's safe for rendering and it'll

365
00:12:26,720 --> 00:12:28,959
just spit whatever html is in there onto

366
00:12:28,959 --> 00:12:30,399
the page which makes it vulnerable not

367
00:12:30,399 --> 00:12:31,200
safe

368
00:12:31,200 --> 00:12:33,360
so you can see that the fix here was to

369
00:12:33,360 --> 00:12:35,760
remove html safe from this

370
00:12:35,760 --> 00:12:37,440
expression and then as an additional

371
00:12:37,440 --> 00:12:39,040
measure to sanitize it in order to make

372
00:12:39,040 --> 00:12:40,639
sure that doubly make sure that it

373
00:12:40,639 --> 00:12:42,880
doesn't render something unsafe

374
00:12:42,880 --> 00:12:43,760
and so

375
00:12:43,760 --> 00:12:45,440
the same grip rule that we had written

376
00:12:45,440 --> 00:12:47,440
for it was able to detect this is a the

377
00:12:47,440 --> 00:12:50,000
semgrep output on the command line

378
00:12:50,000 --> 00:12:52,079
was able to detect the html safe and so

379
00:12:52,079 --> 00:12:53,360
this is an example of a true positive

380
00:12:53,360 --> 00:12:56,560
where we detected the fix directly so if

381
00:12:56,560 --> 00:12:58,240
you're interested in the rule there's a

382
00:12:58,240 --> 00:13:00,880
short link on the slide so you when we

383
00:13:00,880 --> 00:13:02,079
make the size available you can go check

384
00:13:02,079 --> 00:13:03,440
that out

385
00:13:03,440 --> 00:13:04,800
the second case that we consider to be a

386
00:13:04,800 --> 00:13:07,440
true positive is detecting a cause and

387
00:13:07,440 --> 00:13:09,600
so this is a django example where the

388
00:13:09,600 --> 00:13:12,720
body of an html email was not properly

389
00:13:12,720 --> 00:13:14,560
escaped it was just put directly into an

390
00:13:14,560 --> 00:13:16,399
email the fix for this one was to add

391
00:13:16,399 --> 00:13:18,959
some escaping to it as you can see

392
00:13:18,959 --> 00:13:21,279
but the real problem was that auto

393
00:13:21,279 --> 00:13:23,360
escaping had actually been disabled

394
00:13:23,360 --> 00:13:25,920
globally for all email templates and so

395
00:13:25,920 --> 00:13:28,639
normally in django you can uh they are

396
00:13:28,639 --> 00:13:30,079
escaped by default

397
00:13:30,079 --> 00:13:31,680
the setting for this one had disabled it

398
00:13:31,680 --> 00:13:34,480
globally and that was the actual cause

399
00:13:34,480 --> 00:13:36,399
which a sem grip role was able to detect

400
00:13:36,399 --> 00:13:37,680
and so we also considered this to be a

401
00:13:37,680 --> 00:13:39,120
true positive

402
00:13:39,120 --> 00:13:40,639
we also had many false negative examples

403
00:13:40,639 --> 00:13:42,000
which are things that we did not detect

404
00:13:42,000 --> 00:13:43,199
so i wanted to give you an example of

405
00:13:43,199 --> 00:13:46,000
that so this is an express application

406
00:13:46,000 --> 00:13:48,639
where some html is being rendered using

407
00:13:48,639 --> 00:13:50,720
a javascript template string and some

408
00:13:50,720 --> 00:13:52,399
user data inside that javascript

409
00:13:52,399 --> 00:13:54,160
template string so we were not able to

410
00:13:54,160 --> 00:13:56,800
detect this fix which just encoded some

411
00:13:56,800 --> 00:13:58,160
of the data

412
00:13:58,160 --> 00:13:59,680
because at the time syngrep was not able

413
00:13:59,680 --> 00:14:01,199
to introspect into template strings to

414
00:14:01,199 --> 00:14:02,560
understand that it was html and that it

415
00:14:02,560 --> 00:14:05,680
was being rendered as html

416
00:14:05,680 --> 00:14:10,000
so the overall results here are that we

417
00:14:10,000 --> 00:14:11,920
could have prevented 59 we were able to

418
00:14:11,920 --> 00:14:14,160
detect 59 of the vulnerabilities the

419
00:14:14,160 --> 00:14:15,600
total number of repositories that we

420
00:14:15,600 --> 00:14:17,680
ended up with after all of the gathering

421
00:14:17,680 --> 00:14:20,079
that colleen mentioned was 125 we had

422
00:14:20,079 --> 00:14:21,920
140 distinct commits so several

423
00:14:21,920 --> 00:14:23,519
repositories with multiple cross-site

424
00:14:23,519 --> 00:14:25,199
scripting fixes in it

425
00:14:25,199 --> 00:14:27,680
the number of detected true positives

426
00:14:27,680 --> 00:14:30,800
was 82 for a total of 58.5

427
00:14:30,800 --> 00:14:34,480
7 rounded up 50 59.

428
00:14:34,480 --> 00:14:37,839
this is a chart that sort of summarizes

429
00:14:37,839 --> 00:14:40,639
all of the data the magnitude of the bar

430
00:14:40,639 --> 00:14:42,079
or the number of commits that we had for

431
00:14:42,079 --> 00:14:43,839
that framework the red or the false

432
00:14:43,839 --> 00:14:45,199
negatives and the blue or the true

433
00:14:45,199 --> 00:14:46,959
positives you'll see this chart a little

434
00:14:46,959 --> 00:14:48,160
bit more later so i'm not going to dwell

435
00:14:48,160 --> 00:14:50,000
on it this is the same thing in tabular

436
00:14:50,000 --> 00:14:52,160
format organized by detection rate if

437
00:14:52,160 --> 00:14:55,040
you're interested in that as well

438
00:14:55,040 --> 00:14:55,760
so

439
00:14:55,760 --> 00:14:57,040
some takeaways from this are that we

440
00:14:57,040 --> 00:14:58,880
believe that secured guardrails can work

441
00:14:58,880 --> 00:15:01,279
from a prevention perspective so there's

442
00:15:01,279 --> 00:15:04,240
a 59 detection rate and an anecdotally

443
00:15:04,240 --> 00:15:06,160
just looking at react for instance we

444
00:15:06,160 --> 00:15:07,519
only had one reactor rule that was

445
00:15:07,519 --> 00:15:09,680
checking for dangerously set in our html

446
00:15:09,680 --> 00:15:11,839
there was a 41 detection rate in react

447
00:15:11,839 --> 00:15:13,519
just looking for that this is very

448
00:15:13,519 --> 00:15:15,279
similar results to what microsoft got

449
00:15:15,279 --> 00:15:17,680
banning stir copy so i think an

450
00:15:17,680 --> 00:15:20,240
identical percentage actually

451
00:15:20,240 --> 00:15:21,600
um

452
00:15:21,600 --> 00:15:23,519
having no guard rails in your framework

453
00:15:23,519 --> 00:15:24,639
whatsoever

454
00:15:24,639 --> 00:15:26,480
significantly leads to significantly

455
00:15:26,480 --> 00:15:28,000
more continuous vulnerabilities that are

456
00:15:28,000 --> 00:15:28,800
getting

457
00:15:28,800 --> 00:15:31,360
introduced and so the primary culprit

458
00:15:31,360 --> 00:15:32,480
that i want to point fingers out a

459
00:15:32,480 --> 00:15:34,639
little bit is java and

460
00:15:34,639 --> 00:15:37,680
jsp templates where the

461
00:15:37,680 --> 00:15:39,120
template engine

462
00:15:39,120 --> 00:15:42,160
is not safe by default

463
00:15:42,160 --> 00:15:44,560
nor is the safe path very obvious in

464
00:15:44,560 --> 00:15:46,639
order to make it safe you either have to

465
00:15:46,639 --> 00:15:49,199
explicitly escape everything or you have

466
00:15:49,199 --> 00:15:51,519
to load in a third-party plug-in

467
00:15:51,519 --> 00:15:53,759
basically to make it safe by default so

468
00:15:53,759 --> 00:15:54,959
the amount of effort to make this safe

469
00:15:54,959 --> 00:15:56,720
by default is very high which means it's

470
00:15:56,720 --> 00:15:58,480
very easy to do it incorrectly which

471
00:15:58,480 --> 00:16:00,399
means there's a very high detection rate

472
00:16:00,399 --> 00:16:01,680
in here

473
00:16:01,680 --> 00:16:04,079
anecdotally as colleen mentioned earlier

474
00:16:04,079 --> 00:16:05,839
we run the flask rules that we developed

475
00:16:05,839 --> 00:16:07,199
for this on our own code and it's

476
00:16:07,199 --> 00:16:08,800
prevented two known cross-site scripting

477
00:16:08,800 --> 00:16:10,240
vulnerabilities from going out into

478
00:16:10,240 --> 00:16:13,120
production which is super cool

479
00:16:13,120 --> 00:16:16,639
um moving away from the uh sort of like

480
00:16:16,639 --> 00:16:18,560
vulnerability results

481
00:16:18,560 --> 00:16:19,360
some

482
00:16:19,360 --> 00:16:20,880
language specific insights which we

483
00:16:20,880 --> 00:16:22,399
found very interesting

484
00:16:22,399 --> 00:16:24,160
uh are on the slide so one of them was

485
00:16:24,160 --> 00:16:26,639
that xss was really hard to find in go

486
00:16:26,639 --> 00:16:28,240
uh out of all of our searching we were

487
00:16:28,240 --> 00:16:30,639
only able to find three commits out of

488
00:16:30,639 --> 00:16:31,920
everything that we searched that had

489
00:16:31,920 --> 00:16:34,639
fixing uh cross-site scripting in it

490
00:16:34,639 --> 00:16:36,000
we have a couple of hypotheses for this

491
00:16:36,000 --> 00:16:37,360
one is that maybe it's really hard to do

492
00:16:37,360 --> 00:16:39,759
and go go tends to be pretty secure uh

493
00:16:39,759 --> 00:16:40,959
generally from when we've looked at it

494
00:16:40,959 --> 00:16:42,160
in the past

495
00:16:42,160 --> 00:16:44,560
um or maybe just not very many web apps

496
00:16:44,560 --> 00:16:45,759
were written in the frameworks that we

497
00:16:45,759 --> 00:16:47,680
looked at um

498
00:16:47,680 --> 00:16:49,440
we're not super sure on which one it is

499
00:16:49,440 --> 00:16:51,600
but it was pretty interesting to find

500
00:16:51,600 --> 00:16:53,120
um the other one is on the other side of

501
00:16:53,120 --> 00:16:54,880
the chart uh which is that outside

502
00:16:54,880 --> 00:16:56,320
scripting occurs most often in

503
00:16:56,320 --> 00:16:58,240
client-side javascript by a huge margin

504
00:16:58,240 --> 00:17:00,160
as you can see by the bar

505
00:17:00,160 --> 00:17:03,360
um 44 of the commits that we had

506
00:17:03,360 --> 00:17:05,919
were in client-side javascript that's 31

507
00:17:05,919 --> 00:17:07,839
percent of our entire corpus

508
00:17:07,839 --> 00:17:10,480
and then of this of the 44 commits 17 of

509
00:17:10,480 --> 00:17:13,119
them were improper assignment to inner

510
00:17:13,119 --> 00:17:15,599
html so if cross-site scripting is an

511
00:17:15,599 --> 00:17:17,599
issue in your organization this is the

512
00:17:17,599 --> 00:17:19,199
place to start looking for it look in

513
00:17:19,199 --> 00:17:20,480
your client-side javascript look

514
00:17:20,480 --> 00:17:22,480
specifically for unsaved usage of

515
00:17:22,480 --> 00:17:25,199
interhtml

516
00:17:25,520 --> 00:17:27,119
we did this research

517
00:17:27,119 --> 00:17:29,120
probably a year and a half ago

518
00:17:29,120 --> 00:17:31,760
during the covid times

519
00:17:31,760 --> 00:17:34,160
and so we have learned a lot since then

520
00:17:34,160 --> 00:17:35,840
that we would be remiss not to tell you

521
00:17:35,840 --> 00:17:38,240
all about at this time so i want to talk

522
00:17:38,240 --> 00:17:39,919
through a little bit of this as well

523
00:17:39,919 --> 00:17:40,960
so

524
00:17:40,960 --> 00:17:43,200
we are strong advocates for guardrails

525
00:17:43,200 --> 00:17:44,960
we think that it's a really good way for

526
00:17:44,960 --> 00:17:48,000
apsec engineers to scale their

527
00:17:48,000 --> 00:17:49,840
influence and sort of mitigate risk

528
00:17:49,840 --> 00:17:51,039
holistically

529
00:17:51,039 --> 00:17:52,640
in a

530
00:17:52,640 --> 00:17:54,640
lower effort way than continuing to

531
00:17:54,640 --> 00:17:57,120
search and search and search for bugs

532
00:17:57,120 --> 00:17:58,720
however

533
00:17:58,720 --> 00:18:01,039
this uh principle is great in theory

534
00:18:01,039 --> 00:18:03,120
it's really hard in practice so we have

535
00:18:03,120 --> 00:18:05,760
tried to bring this um discipline out

536
00:18:05,760 --> 00:18:06,640
into

537
00:18:06,640 --> 00:18:09,120
our own company and and other companies

538
00:18:09,120 --> 00:18:11,280
um and what we found is that even

539
00:18:11,280 --> 00:18:12,559
companies that are bought into this

540
00:18:12,559 --> 00:18:13,840
principle that are bought into secure

541
00:18:13,840 --> 00:18:15,280
guardrails really struggle with the

542
00:18:15,280 --> 00:18:16,720
implementation

543
00:18:16,720 --> 00:18:18,960
the reason a couple of reasons for that

544
00:18:18,960 --> 00:18:21,120
are that guardrails intrinsically

545
00:18:21,120 --> 00:18:22,640
produce more findings which means that

546
00:18:22,640 --> 00:18:23,919
they're

547
00:18:23,919 --> 00:18:26,000
a few more things to triage and so if

548
00:18:26,000 --> 00:18:27,919
you are only worried about the things

549
00:18:27,919 --> 00:18:29,600
that are really hair on fire

550
00:18:29,600 --> 00:18:33,200
um guard rails is more like taking your

551
00:18:33,200 --> 00:18:34,960
vitamins and doing exercise rather than

552
00:18:34,960 --> 00:18:38,400
taking a painkiller and we found that um

553
00:18:38,400 --> 00:18:39,520
many times people just want the

554
00:18:39,520 --> 00:18:41,280
painkiller and so

555
00:18:41,280 --> 00:18:43,120
um the

556
00:18:43,120 --> 00:18:43,919
uh

557
00:18:43,919 --> 00:18:45,440
guardrails tend to be lower urgency

558
00:18:45,440 --> 00:18:46,720
because they're not like explicitly

559
00:18:46,720 --> 00:18:48,000
vulnerable

560
00:18:48,000 --> 00:18:49,600
right away

561
00:18:49,600 --> 00:18:51,039
company politics is actually another big

562
00:18:51,039 --> 00:18:51,919
one

563
00:18:51,919 --> 00:18:53,679
financial and security benefits can be

564
00:18:53,679 --> 00:18:55,679
hard to quantify why

565
00:18:55,679 --> 00:18:57,039
implement guardrails when i'm already

566
00:18:57,039 --> 00:18:58,720
measuring my vulnerability reduction for

567
00:18:58,720 --> 00:19:00,880
instance and then the third one is that

568
00:19:00,880 --> 00:19:02,720
if we're asking devs to use something

569
00:19:02,720 --> 00:19:04,160
different this is especially true at

570
00:19:04,160 --> 00:19:06,240
code review time

571
00:19:06,240 --> 00:19:08,480
it incurs a cost and so we actually have

572
00:19:08,480 --> 00:19:10,160
a hypothesis right now that guardrails

573
00:19:10,160 --> 00:19:11,360
might be better implemented in the

574
00:19:11,360 --> 00:19:14,400
editor sort of akin to spellcheck where

575
00:19:14,400 --> 00:19:15,679
um you can

576
00:19:15,679 --> 00:19:17,520
apply it as a suggestion rather than as

577
00:19:17,520 --> 00:19:18,799
something that you need to address as

578
00:19:18,799 --> 00:19:20,799
part of your code review

579
00:19:20,799 --> 00:19:21,679
and so we're actually going to be

580
00:19:21,679 --> 00:19:23,039
experimenting with this over the next

581
00:19:23,039 --> 00:19:25,679
few months

582
00:19:25,679 --> 00:19:27,679
um some of the solutions that we're

583
00:19:27,679 --> 00:19:28,720
trying to do to make this a little bit

584
00:19:28,720 --> 00:19:31,440
easier or the pill easier to swallow

585
00:19:31,440 --> 00:19:32,799
it's adding additional context to our

586
00:19:32,799 --> 00:19:35,039
sum grip rules so

587
00:19:35,039 --> 00:19:37,120
instead of just sort of flat saying

588
00:19:37,120 --> 00:19:38,960
definitely do this definitely don't do

589
00:19:38,960 --> 00:19:40,480
this we're trying to add some additional

590
00:19:40,480 --> 00:19:42,000
context

591
00:19:42,000 --> 00:19:43,600
a lot of features have been introduced

592
00:19:43,600 --> 00:19:45,679
in simgrep recently such as taint

593
00:19:45,679 --> 00:19:47,679
analysis so we're using that to sort of

594
00:19:47,679 --> 00:19:49,280
weed out things that are definitely not

595
00:19:49,280 --> 00:19:50,640
urgent

596
00:19:50,640 --> 00:19:52,160
we're also experimenting with interfile

597
00:19:52,160 --> 00:19:54,720
taint analysis um use with something

598
00:19:54,720 --> 00:19:56,080
called deepsome graph that we're calling

599
00:19:56,080 --> 00:19:58,400
it which is currently proprietary we're

600
00:19:58,400 --> 00:20:01,280
also collecting um feedback

601
00:20:01,280 --> 00:20:03,280
so we have mechanisms in

602
00:20:03,280 --> 00:20:05,440
semgrep to report to us false positives

603
00:20:05,440 --> 00:20:07,520
and false negatives which is really neat

604
00:20:07,520 --> 00:20:08,799
and we

605
00:20:08,799 --> 00:20:10,640
have a feed of all those things we check

606
00:20:10,640 --> 00:20:13,120
them constantly and we address them very

607
00:20:13,120 --> 00:20:15,760
quickly usually when they come out

608
00:20:15,760 --> 00:20:17,840
if you are interested in using these in

609
00:20:17,840 --> 00:20:19,760
your organization they are all all of

610
00:20:19,760 --> 00:20:21,039
the

611
00:20:21,039 --> 00:20:24,480
rules are available on our public docs

612
00:20:24,480 --> 00:20:27,039
so the website is up there some grip.dev

613
00:20:27,039 --> 00:20:30,799
slash docs slash cheat dash sheets

614
00:20:30,799 --> 00:20:32,720
all of the frameworks there have have

615
00:20:32,720 --> 00:20:35,120
policies there

616
00:20:35,120 --> 00:20:36,480
if you're interested in learning more

617
00:20:36,480 --> 00:20:37,919
about

618
00:20:37,919 --> 00:20:40,159
how to roll out secure guardrails in

619
00:20:40,159 --> 00:20:43,200
your organization check out this talk by

620
00:20:43,200 --> 00:20:44,720
our colleagues clint gibler and isaac

621
00:20:44,720 --> 00:20:47,600
evans which was done at global appsec

622
00:20:47,600 --> 00:20:50,480
sf2020

623
00:20:50,640 --> 00:20:52,080
in conclusion

624
00:20:52,080 --> 00:20:52,799
we

625
00:20:52,799 --> 00:20:54,559
think that guardrails has a really

626
00:20:54,559 --> 00:20:55,919
positive like

627
00:20:55,919 --> 00:20:58,559
detection rate where we really believe

628
00:20:58,559 --> 00:20:59,600
that

629
00:20:59,600 --> 00:21:02,159
it can help appsec engineers scale out

630
00:21:02,159 --> 00:21:03,679
there are definitely some challenges

631
00:21:03,679 --> 00:21:05,280
with rolling it out in a real

632
00:21:05,280 --> 00:21:06,640
organization

633
00:21:06,640 --> 00:21:08,320
that we're still trying to solve that

634
00:21:08,320 --> 00:21:10,400
many of you may be trying to solve as

635
00:21:10,400 --> 00:21:12,320
well

636
00:21:12,320 --> 00:21:15,120
but yeah we believe in its future and we

637
00:21:15,120 --> 00:21:16,880
really hope that we're able to make

638
00:21:16,880 --> 00:21:19,039
software more secure for everyone so

639
00:21:19,039 --> 00:21:21,120
that is the end i believe we have a few

640
00:21:21,120 --> 00:21:22,799
minutes for questions so we can take

641
00:21:22,799 --> 00:21:24,159
those now we've got four minutes for

642
00:21:24,159 --> 00:21:28,600
questions all right in the back

643
00:21:32,400 --> 00:21:34,720
yes the question was could we give you a

644
00:21:34,720 --> 00:21:36,320
sense for how many some grip rules we

645
00:21:36,320 --> 00:21:39,120
had to write for each policy um sort of

646
00:21:39,120 --> 00:21:40,720
spitballing but on average i would say

647
00:21:40,720 --> 00:21:42,840
about 10. there's about 10 rules per

648
00:21:42,840 --> 00:21:45,440
framework um give or take depending on

649
00:21:45,440 --> 00:21:46,640
the actual

650
00:21:46,640 --> 00:21:50,320
language and framework mitigations

651
00:21:50,320 --> 00:21:53,320
yes

652
00:22:06,320 --> 00:22:07,360
the question is what about false

653
00:22:07,360 --> 00:22:09,520
positives basically so for this research

654
00:22:09,520 --> 00:22:11,120
we were specifically focusing on the

655
00:22:11,120 --> 00:22:12,400
detection rate so we're really only

656
00:22:12,400 --> 00:22:14,880
looking at true positive and false

657
00:22:14,880 --> 00:22:16,720
negative rate so false positives are

658
00:22:16,720 --> 00:22:17,840
definitely a consideration which we

659
00:22:17,840 --> 00:22:20,000
alluded to in the more findings section

660
00:22:20,000 --> 00:22:21,679
as we've tried to roll it out at

661
00:22:21,679 --> 00:22:23,840
organizations so it is an issue and it

662
00:22:23,840 --> 00:22:25,919
is an issue that we're actively trying

663
00:22:25,919 --> 00:22:27,200
to look into

664
00:22:27,200 --> 00:22:29,919
um the rules themselves there's sort of

665
00:22:29,919 --> 00:22:31,600
two ways to measure false positives one

666
00:22:31,600 --> 00:22:33,120
is with the intent of what the author is

667
00:22:33,120 --> 00:22:35,440
trying to find so if the rule finds what

668
00:22:35,440 --> 00:22:36,799
you're looking for then like that's a

669
00:22:36,799 --> 00:22:38,240
true positive which is

670
00:22:38,240 --> 00:22:39,600
you know basically is it wrong is the

671
00:22:39,600 --> 00:22:41,039
rule wrong that would be a false

672
00:22:41,039 --> 00:22:42,400
positive but the one that's more

673
00:22:42,400 --> 00:22:44,400
relevant i think is does a developer

674
00:22:44,400 --> 00:22:46,559
take action on the finding

675
00:22:46,559 --> 00:22:47,840
and if they don't take action on the

676
00:22:47,840 --> 00:22:49,200
finding then it's effectively a false

677
00:22:49,200 --> 00:22:50,799
positive because

678
00:22:50,799 --> 00:22:52,559
it didn't fix anything

679
00:22:52,559 --> 00:22:53,600
this is the more interesting one and

680
00:22:53,600 --> 00:22:54,960
this is a really difficult problem that

681
00:22:54,960 --> 00:22:58,240
we're still trying to address so

682
00:23:01,520 --> 00:23:04,799
um in the middle

683
00:23:07,520 --> 00:23:09,760
do i have a sense for why we have many

684
00:23:09,760 --> 00:23:12,400
false negative negatives for express um

685
00:23:12,400 --> 00:23:14,080
one of the

686
00:23:14,080 --> 00:23:16,480
one of the reasons well for some grip

687
00:23:16,480 --> 00:23:18,000
javascript has traditionally been a hard

688
00:23:18,000 --> 00:23:20,000
problem for us because

689
00:23:20,000 --> 00:23:21,039
the

690
00:23:21,039 --> 00:23:22,640
only way to really detect like whether

691
00:23:22,640 --> 00:23:24,880
you're in express is to look at the

692
00:23:24,880 --> 00:23:27,039
typical route pattern construction which

693
00:23:27,039 --> 00:23:28,480
there are other ways in which that can

694
00:23:28,480 --> 00:23:31,600
be constructed so that's one issue is

695
00:23:31,600 --> 00:23:33,600
that the sort of information that we

696
00:23:33,600 --> 00:23:37,120
have to anchor on for express typically

697
00:23:37,120 --> 00:23:38,400
is a little bit difficult to find

698
00:23:38,400 --> 00:23:41,679
precisely the other reason is that is

699
00:23:41,679 --> 00:23:43,520
like the false negative example that you

700
00:23:43,520 --> 00:23:44,720
saw on the screen

701
00:23:44,720 --> 00:23:46,880
there were a lot of cases where html was

702
00:23:46,880 --> 00:23:49,440
just being rendered sort of directly

703
00:23:49,440 --> 00:23:51,120
but some grip at the time didn't wasn't

704
00:23:51,120 --> 00:23:53,360
able to understand this is html embedded

705
00:23:53,360 --> 00:23:54,880
in javascript

706
00:23:54,880 --> 00:23:55,919
and so

707
00:23:55,919 --> 00:23:58,000
that uh case came up pretty frequently

708
00:23:58,000 --> 00:24:00,480
and ended up causing some problems the

709
00:24:00,480 --> 00:24:01,840
other one is that

710
00:24:01,840 --> 00:24:03,360
there were a handful of commits that

711
00:24:03,360 --> 00:24:06,240
were actually json apis that were being

712
00:24:06,240 --> 00:24:08,799
fixed for cross-site scripting issues

713
00:24:08,799 --> 00:24:10,000
and so those are a little bit harder to

714
00:24:10,000 --> 00:24:11,520
detect because there's no html

715
00:24:11,520 --> 00:24:13,520
necessarily associated with it so there

716
00:24:13,520 --> 00:24:15,679
are a lot of safe ways to do json apis

717
00:24:15,679 --> 00:24:17,840
there's a couple of unsafe ways and

718
00:24:17,840 --> 00:24:19,279
depending on the perspective of the

719
00:24:19,279 --> 00:24:20,720
developer the security engineer they may

720
00:24:20,720 --> 00:24:22,400
consider it unsafe and produce a fix for

721
00:24:22,400 --> 00:24:25,679
it that we weren't able to detect either

722
00:24:26,640 --> 00:24:28,159
time

723
00:24:28,159 --> 00:24:31,120
one minute any other questions

724
00:24:31,120 --> 00:24:33,840
yes

725
00:24:40,640 --> 00:24:41,840
the question is did we try a similar

726
00:24:41,840 --> 00:24:43,520
approach for other vulnerabilities we

727
00:24:43,520 --> 00:24:44,799
have a couple of policies that are

728
00:24:44,799 --> 00:24:46,320
similar to this but we haven't done we

729
00:24:46,320 --> 00:24:48,000
didn't do the full fledged research

730
00:24:48,000 --> 00:24:49,840
because it takes some time

731
00:24:49,840 --> 00:24:52,320
so we have it for command ejection and

732
00:24:52,320 --> 00:24:55,200
insecure transport like http over https

733
00:24:55,200 --> 00:24:57,520
instead

734
00:24:59,440 --> 00:25:02,480
any final questions

735
00:25:03,679 --> 00:25:05,600
great we'll be around uh please come

736
00:25:05,600 --> 00:25:08,080
talk to us um

737
00:25:08,080 --> 00:25:12,840
yeah thank you everybody for uh coming

