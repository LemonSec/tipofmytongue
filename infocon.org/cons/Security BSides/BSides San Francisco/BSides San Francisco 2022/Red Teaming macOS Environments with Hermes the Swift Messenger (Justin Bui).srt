1
00:00:00,080 --> 00:00:02,560
alrighty we're ready to get started

2
00:00:02,560 --> 00:00:04,560
our next talk is red teaming mac os

3
00:00:04,560 --> 00:00:06,160
environments with hermes the swift

4
00:00:06,160 --> 00:00:07,279
messenger

5
00:00:07,279 --> 00:00:09,679
our speaker is justin

6
00:00:09,679 --> 00:00:11,679
oh sorry

7
00:00:11,679 --> 00:00:14,240
our speaker is justin bowie uh justin

8
00:00:14,240 --> 00:00:16,160
bowie is a red teamer at zoom and was

9
00:00:16,160 --> 00:00:17,920
previously a red teamer red team

10
00:00:17,920 --> 00:00:20,000
consultant at spectreops he's passionate

11
00:00:20,000 --> 00:00:21,199
about all things security and helping

12
00:00:21,199 --> 00:00:22,640
organizations improve their security

13
00:00:22,640 --> 00:00:25,599
posture all right take it away cool

14
00:00:25,599 --> 00:00:29,039
all right uh cool that's working

15
00:00:29,359 --> 00:00:32,000
all right just reset my timer

16
00:00:32,000 --> 00:00:33,840
all right hello everybody my name is

17
00:00:33,840 --> 00:00:35,360
justin bowie and today i'll be talking

18
00:00:35,360 --> 00:00:37,040
about red teaming mac os environments

19
00:00:37,040 --> 00:00:40,480
with hermes the swift messenger

20
00:00:40,960 --> 00:00:43,120
so small introduction on who i am like i

21
00:00:43,120 --> 00:00:45,039
said my name is justin bowie i go by the

22
00:00:45,039 --> 00:00:46,879
handle of at slydog you can find me

23
00:00:46,879 --> 00:00:48,480
using that handle on things like twitter

24
00:00:48,480 --> 00:00:50,320
github or medium

25
00:00:50,320 --> 00:00:51,840
i'm currently a red tumor at zoom where

26
00:00:51,840 --> 00:00:53,680
i lead red team operations purple team

27
00:00:53,680 --> 00:00:55,199
assessments and perform research and

28
00:00:55,199 --> 00:00:56,719
development

29
00:00:56,719 --> 00:00:58,239
prior to zoom i was a red team

30
00:00:58,239 --> 00:01:00,079
consultant at spectre ops basically

31
00:01:00,079 --> 00:01:01,760
doing red team work there and then also

32
00:01:01,760 --> 00:01:03,199
teaching the red team operations

33
00:01:03,199 --> 00:01:04,799
training

34
00:01:04,799 --> 00:01:06,320
it should go without saying but views

35
00:01:06,320 --> 00:01:09,119
and research represented are all my own

36
00:01:09,119 --> 00:01:10,640
when i'm not messing with computers i'm

37
00:01:10,640 --> 00:01:11,920
usually out skateboarding with friends

38
00:01:11,920 --> 00:01:14,880
and trying to learn a new trick

39
00:01:16,640 --> 00:01:17,920
so here's a quick summary of what we'll

40
00:01:17,920 --> 00:01:19,920
be talking about today first we'll talk

41
00:01:19,920 --> 00:01:21,840
about the swift programming language how

42
00:01:21,840 --> 00:01:23,280
it works and examples of

43
00:01:23,280 --> 00:01:25,600
post-exploitation tooling

44
00:01:25,600 --> 00:01:27,040
next we'll introduce the mythic

45
00:01:27,040 --> 00:01:28,960
framework we'll talk about how it can be

46
00:01:28,960 --> 00:01:31,759
used in red team operations

47
00:01:31,759 --> 00:01:33,680
after we'll discuss the hermes payload

48
00:01:33,680 --> 00:01:35,600
and how how it hooks into the mythic

49
00:01:35,600 --> 00:01:36,640
framework

50
00:01:36,640 --> 00:01:38,320
we'll dive into development of the agent

51
00:01:38,320 --> 00:01:40,880
as well as functionality

52
00:01:40,880 --> 00:01:42,479
and lastly to round things out we'll

53
00:01:42,479 --> 00:01:44,000
look into apple's endpoint security

54
00:01:44,000 --> 00:01:46,240
framework or esf and how it can be used

55
00:01:46,240 --> 00:01:48,320
to detect different ttps implemented

56
00:01:48,320 --> 00:01:51,039
within hermes

57
00:01:52,159 --> 00:01:53,520
so in this first section we'll be

58
00:01:53,520 --> 00:01:55,520
talking about everything swift what is

59
00:01:55,520 --> 00:01:56,960
swift pros and cons is a post

60
00:01:56,960 --> 00:01:58,799
exploitation language and some examples

61
00:01:58,799 --> 00:02:01,759
of current swift tooling

62
00:02:03,600 --> 00:02:05,119
swift is a high-level programming

63
00:02:05,119 --> 00:02:07,200
language that was developed by apple

64
00:02:07,200 --> 00:02:09,679
swift 1.0 was released in 2014 and

65
00:02:09,679 --> 00:02:12,480
initially only supported mac os

66
00:02:12,480 --> 00:02:14,959
as of swift 5.3 cross-platform support

67
00:02:14,959 --> 00:02:17,280
was enabled for mac os windows as well

68
00:02:17,280 --> 00:02:19,440
as linux

69
00:02:19,440 --> 00:02:22,000
swift was designed to be safer faster

70
00:02:22,000 --> 00:02:24,080
and more optimized than its predecessor

71
00:02:24,080 --> 00:02:26,400
objective-c

72
00:02:26,400 --> 00:02:28,319
swift leverages the objective-c runtime

73
00:02:28,319 --> 00:02:30,160
library under the hood and this is

74
00:02:30,160 --> 00:02:31,760
particularly great for attackers because

75
00:02:31,760 --> 00:02:33,599
within a single swift program we can

76
00:02:33,599 --> 00:02:37,040
call c c plus and objective c code

77
00:02:37,040 --> 00:02:38,959
so if we need lower level functionality

78
00:02:38,959 --> 00:02:40,560
we can access it

79
00:02:40,560 --> 00:02:43,440
through these bridging headers

80
00:02:43,440 --> 00:02:44,959
i'll mostly be talking about swift for

81
00:02:44,959 --> 00:02:47,519
mac os but you can also write ios and tv

82
00:02:47,519 --> 00:02:50,560
os applications for swift or ios and

83
00:02:50,560 --> 00:02:53,840
tbos malware for swift

84
00:02:54,239 --> 00:02:55,440
so let's go through an example of

85
00:02:55,440 --> 00:02:57,920
compiling executing swift

86
00:02:57,920 --> 00:02:59,280
if you take a look at the image you'll

87
00:02:59,280 --> 00:03:02,239
see that we have b-sides sf.swift and

88
00:03:02,239 --> 00:03:03,680
the contents of that file are just a

89
00:03:03,680 --> 00:03:05,120
simple print statement saying hello

90
00:03:05,120 --> 00:03:07,440
b-sides sf

91
00:03:07,440 --> 00:03:08,959
now what happens if we pass this source

92
00:03:08,959 --> 00:03:11,280
code file to the swift binary so here we

93
00:03:11,280 --> 00:03:14,239
run swift b-sides sf.swift

94
00:03:14,239 --> 00:03:16,640
the swift binary is going to compile and

95
00:03:16,640 --> 00:03:18,560
execute this code in memory

96
00:03:18,560 --> 00:03:19,760
and so you'll see that we're presented

97
00:03:19,760 --> 00:03:23,440
with hello b-sides sf to the terminal

98
00:03:23,440 --> 00:03:25,519
alternatively if we want to compile this

99
00:03:25,519 --> 00:03:27,519
code into an executable format we can

100
00:03:27,519 --> 00:03:29,680
use the swift compiler or the swift c

101
00:03:29,680 --> 00:03:31,200
binary

102
00:03:31,200 --> 00:03:33,280
using the swift c binary we can compile

103
00:03:33,280 --> 00:03:35,519
it and then if we pass in the tac o flag

104
00:03:35,519 --> 00:03:37,440
we can specify the output file name and

105
00:03:37,440 --> 00:03:38,720
so in this case it's going to be a b

106
00:03:38,720 --> 00:03:40,080
size sf and it's going to be a micro

107
00:03:40,080 --> 00:03:41,519
binary

108
00:03:41,519 --> 00:03:42,959
we're going to flip the executable bit

109
00:03:42,959 --> 00:03:45,360
on that using chmod and then kick it off

110
00:03:45,360 --> 00:03:47,120
on the terminal using dot slash b-sides

111
00:03:47,120 --> 00:03:49,519
sf and you see again we're presented

112
00:03:49,519 --> 00:03:53,200
with hello b-sides sf to the terminal

113
00:03:53,200 --> 00:03:55,360
alternatively swift can be compiled

114
00:03:55,360 --> 00:03:56,959
using xcode which will basically call

115
00:03:56,959 --> 00:04:00,400
swift the swift compiler under the hood

116
00:04:00,400 --> 00:04:01,680
it should be noted that the swift

117
00:04:01,680 --> 00:04:03,920
compiler is not installed by default so

118
00:04:03,920 --> 00:04:05,280
if you attempt to call swift or the

119
00:04:05,280 --> 00:04:06,959
swift compiler

120
00:04:06,959 --> 00:04:08,560
when it's not installed the user is

121
00:04:08,560 --> 00:04:09,920
going to be prompted to install command

122
00:04:09,920 --> 00:04:11,519
line tools and this could blow your red

123
00:04:11,519 --> 00:04:14,080
team operation

124
00:04:14,080 --> 00:04:15,920
the compiler is not installed the swift

125
00:04:15,920 --> 00:04:18,000
libraries are installed as of mac os

126
00:04:18,000 --> 00:04:21,358
mojave 10.14.4

127
00:04:21,358 --> 00:04:23,280
these are runtime support libraries that

128
00:04:23,280 --> 00:04:26,400
exist on modern versions of mac os

129
00:04:26,400 --> 00:04:28,080
since they exist on disk swift

130
00:04:28,080 --> 00:04:29,840
applications no longer need to package

131
00:04:29,840 --> 00:04:31,440
them

132
00:04:31,440 --> 00:04:33,759
within them so the binary the size of

133
00:04:33,759 --> 00:04:35,360
the binary is smaller as a result of

134
00:04:35,360 --> 00:04:37,199
this and so this is another plus for

135
00:04:37,199 --> 00:04:39,759
attackers

136
00:04:40,720 --> 00:04:42,240
here are some different languages for

137
00:04:42,240 --> 00:04:45,040
mac os post exploitation

138
00:04:45,040 --> 00:04:47,440
notably i'm missing languages such as c

139
00:04:47,440 --> 00:04:51,120
c plus objective c and rust

140
00:04:51,120 --> 00:04:52,800
i list out some pros and cons but these

141
00:04:52,800 --> 00:04:54,400
are all fairly high level so definitely

142
00:04:54,400 --> 00:04:56,160
take them with a grain of salt i kind of

143
00:04:56,160 --> 00:04:57,360
pick and chose the ones that made the

144
00:04:57,360 --> 00:04:59,440
most sense to me

145
00:04:59,440 --> 00:05:00,800
the first language i want to talk about

146
00:05:00,800 --> 00:05:04,479
is jxa or javascript for automation

147
00:05:04,479 --> 00:05:05,840
jake say

148
00:05:05,840 --> 00:05:08,000
with jxa you can leverage it using a

149
00:05:08,000 --> 00:05:10,479
lull bin for execution a lullabin is a

150
00:05:10,479 --> 00:05:12,240
living off the land binary so a native

151
00:05:12,240 --> 00:05:14,880
binary on disk that you can use to

152
00:05:14,880 --> 00:05:17,360
execute code perform malicious actions

153
00:05:17,360 --> 00:05:19,600
post-exploitation things like that

154
00:05:19,600 --> 00:05:22,639
in this case that binary is osa script

155
00:05:22,639 --> 00:05:24,560
additionally with the jxa language if

156
00:05:24,560 --> 00:05:26,720
you couldn't do something in pure jxa

157
00:05:26,720 --> 00:05:29,520
you could likely do it using objective-c

158
00:05:29,520 --> 00:05:31,919
jxa exposes an objective-c bridge which

159
00:05:31,919 --> 00:05:34,320
allows you to call objective-c api calls

160
00:05:34,320 --> 00:05:35,919
and so anything you can do in jxa you

161
00:05:35,919 --> 00:05:38,400
could probably do an objective-c

162
00:05:38,400 --> 00:05:40,960
some notable cons for jxa are that it's

163
00:05:40,960 --> 00:05:42,479
single threaded so if you're trying to

164
00:05:42,479 --> 00:05:44,720
run something like multi-threaded or run

165
00:05:44,720 --> 00:05:46,400
multiple jobs concurrently with jxa that

166
00:05:46,400 --> 00:05:48,479
wouldn't really be possible

167
00:05:48,479 --> 00:05:50,880
perhaps the biggest con of all is that

168
00:05:50,880 --> 00:05:52,639
development of the jxa language has been

169
00:05:52,639 --> 00:05:54,639
completely abandoned by the apple team

170
00:05:54,639 --> 00:05:56,400
it's pretty much like this no man's land

171
00:05:56,400 --> 00:05:57,440
language

172
00:05:57,440 --> 00:05:58,800
currently exists we don't know how long

173
00:05:58,800 --> 00:06:00,560
it'll exist for but

174
00:06:00,560 --> 00:06:02,479
abuse it while you can

175
00:06:02,479 --> 00:06:04,479
some examples of jxa tooling include

176
00:06:04,479 --> 00:06:06,400
apfel a jxa agent for the mythic

177
00:06:06,400 --> 00:06:08,720
framework swift belt jxa some

178
00:06:08,720 --> 00:06:10,960
situational awareness for mac os written

179
00:06:10,960 --> 00:06:13,919
in jxa and persistent jxa a collection

180
00:06:13,919 --> 00:06:15,680
of mac os persistence techniques written

181
00:06:15,680 --> 00:06:17,919
in jxa

182
00:06:17,919 --> 00:06:19,039
the next language i want to talk about

183
00:06:19,039 --> 00:06:21,600
is python python also leverages a lull

184
00:06:21,600 --> 00:06:23,759
bin for execution in the form of python

185
00:06:23,759 --> 00:06:25,759
and python 3.

186
00:06:25,759 --> 00:06:28,000
some notable cons for python are that

187
00:06:28,000 --> 00:06:29,600
apple has publicly stated that scripting

188
00:06:29,600 --> 00:06:31,360
languages are going to be deprecated and

189
00:06:31,360 --> 00:06:33,360
removed in future versions of mac os and

190
00:06:33,360 --> 00:06:34,800
they specifically called out python in

191
00:06:34,800 --> 00:06:36,479
this case

192
00:06:36,479 --> 00:06:38,240
another con for python is that it's a

193
00:06:38,240 --> 00:06:40,080
bit more heavily signatured by mac os

194
00:06:40,080 --> 00:06:42,240
defensive products such as xprotect and

195
00:06:42,240 --> 00:06:43,919
malware removal tool

196
00:06:43,919 --> 00:06:45,680
and this is because

197
00:06:45,680 --> 00:06:47,120
python has traditionally been used in

198
00:06:47,120 --> 00:06:49,280
mac os malware and macos intrusions and

199
00:06:49,280 --> 00:06:50,800
so some of those rats have been

200
00:06:50,800 --> 00:06:52,560
signatured

201
00:06:52,560 --> 00:06:54,560
some examples of python tooling include

202
00:06:54,560 --> 00:06:56,560
medusa a python agent for the mythic

203
00:06:56,560 --> 00:06:58,720
framework empire a command control

204
00:06:58,720 --> 00:06:59,840
server

205
00:06:59,840 --> 00:07:01,919
this command control server had a mac os

206
00:07:01,919 --> 00:07:03,919
agent also written in python and then

207
00:07:03,919 --> 00:07:05,440
chain breaker a script that you can

208
00:07:05,440 --> 00:07:07,599
interact with the mac os keychain from

209
00:07:07,599 --> 00:07:09,440
python

210
00:07:09,440 --> 00:07:10,880
the last language i will talk about is

211
00:07:10,880 --> 00:07:12,960
golang now golang is a fantastic

212
00:07:12,960 --> 00:07:15,120
language you can write something once

213
00:07:15,120 --> 00:07:16,319
and then cross compile it to many

214
00:07:16,319 --> 00:07:17,680
different operating systems so like

215
00:07:17,680 --> 00:07:20,319
windows linux mac os

216
00:07:20,319 --> 00:07:21,840
you can also very easily integrate

217
00:07:21,840 --> 00:07:24,160
objective c c and c plus plus code so

218
00:07:24,160 --> 00:07:25,919
you can very easily integrate

219
00:07:25,919 --> 00:07:27,360
and interact with all the different mac

220
00:07:27,360 --> 00:07:29,599
os apis

221
00:07:29,599 --> 00:07:31,280
one of the notable cons for golang is

222
00:07:31,280 --> 00:07:33,759
generally the binaries that you compile

223
00:07:33,759 --> 00:07:35,919
are a bit larger in size

224
00:07:35,919 --> 00:07:37,840
and some examples of goling post

225
00:07:37,840 --> 00:07:39,919
exploitation tooling include poseidon

226
00:07:39,919 --> 00:07:41,280
the golden agent for the mythic

227
00:07:41,280 --> 00:07:42,319
framework

228
00:07:42,319 --> 00:07:44,080
and sliver a command and control server

229
00:07:44,080 --> 00:07:48,000
and agent uh written in golang

230
00:07:48,639 --> 00:07:50,160
so you might ask the question why would

231
00:07:50,160 --> 00:07:52,560
you use swift for post exploitation

232
00:07:52,560 --> 00:07:54,479
well one swift like most modern day

233
00:07:54,479 --> 00:07:56,479
languages has the ability to perform

234
00:07:56,479 --> 00:07:57,919
multi-threading so you can run multiple

235
00:07:57,919 --> 00:07:59,599
jobs concurrently

236
00:07:59,599 --> 00:08:00,960
additionally with swift you have very

237
00:08:00,960 --> 00:08:02,800
easy access to all the different mac os

238
00:08:02,800 --> 00:08:06,160
apis so coco foundation app kit osha kit

239
00:08:06,160 --> 00:08:09,120
all very easy to use and integrate with

240
00:08:09,120 --> 00:08:11,199
in my opinion swift is easier to develop

241
00:08:11,199 --> 00:08:13,520
than objective c and jxa and i think

242
00:08:13,520 --> 00:08:15,039
this has to do with the fact that it's

243
00:08:15,039 --> 00:08:16,479
the kind of the modern day language

244
00:08:16,479 --> 00:08:18,000
being pushed by apple so there's lots of

245
00:08:18,000 --> 00:08:19,280
documentation

246
00:08:19,280 --> 00:08:21,440
examples on google stack overflow apple

247
00:08:21,440 --> 00:08:23,840
forums things like that

248
00:08:23,840 --> 00:08:25,120
now while swift is a higher level

249
00:08:25,120 --> 00:08:26,400
language that allows for rapid

250
00:08:26,400 --> 00:08:28,319
development we also have the ability to

251
00:08:28,319 --> 00:08:31,199
call lower level languages and apis so

252
00:08:31,199 --> 00:08:33,360
you can call c c plus plus and objective

253
00:08:33,360 --> 00:08:35,519
c using uh these bridging headers that i

254
00:08:35,519 --> 00:08:37,279
talked about so when we need that lower

255
00:08:37,279 --> 00:08:39,120
level functionality we can

256
00:08:39,120 --> 00:08:41,519
we can utilize it

257
00:08:41,519 --> 00:08:43,440
lastly an app whitelisting bypass or a

258
00:08:43,440 --> 00:08:45,519
living off the lan binary

259
00:08:45,519 --> 00:08:47,680
situation exists when the swift compiler

260
00:08:47,680 --> 00:08:49,120
is installed you can use the swift

261
00:08:49,120 --> 00:08:51,279
binary to execute code

262
00:08:51,279 --> 00:08:53,279
unfortunately the swift compiler is not

263
00:08:53,279 --> 00:08:54,560
installed by default

264
00:08:54,560 --> 00:08:55,920
and so we often have to resort to

265
00:08:55,920 --> 00:08:57,680
dropping unsound binaries to disk which

266
00:08:57,680 --> 00:08:59,760
may be maybe a bit harder than landing a

267
00:08:59,760 --> 00:09:02,160
python script or a jxa script and then

268
00:09:02,160 --> 00:09:03,680
kicking that off with osuscript or

269
00:09:03,680 --> 00:09:06,160
python

270
00:09:06,880 --> 00:09:08,240
here are a couple different examples of

271
00:09:08,240 --> 00:09:10,080
swift tooling for mac os uh we have

272
00:09:10,080 --> 00:09:11,760
swift belt this is a variety of safety

273
00:09:11,760 --> 00:09:13,680
checks for situational awareness we have

274
00:09:13,680 --> 00:09:14,959
max shell swift this is like a swift

275
00:09:14,959 --> 00:09:16,399
command control server

276
00:09:16,399 --> 00:09:17,839
swift attack think of this kind of like

277
00:09:17,839 --> 00:09:20,000
atomic red teaming for mac os

278
00:09:20,000 --> 00:09:21,680
swift spy a key keylogger clipboard

279
00:09:21,680 --> 00:09:23,760
monitor and screenshotter swift parse

280
00:09:23,760 --> 00:09:26,399
tcc a tcc database parser and then some

281
00:09:26,399 --> 00:09:28,399
defensive products venator swift this is

282
00:09:28,399 --> 00:09:30,640
a data gathering agent to aid hunting on

283
00:09:30,640 --> 00:09:31,760
mac os

284
00:09:31,760 --> 00:09:33,600
and lastly there's crescendo a real-time

285
00:09:33,600 --> 00:09:35,200
event viewer that hooks into apple's

286
00:09:35,200 --> 00:09:36,880
endpoint security framework

287
00:09:36,880 --> 00:09:38,320
notably in the final section this

288
00:09:38,320 --> 00:09:40,080
presentation will be using crescendo to

289
00:09:40,080 --> 00:09:44,080
detect different ttps within hermes

290
00:09:44,720 --> 00:09:45,920
so in this section we're going to be

291
00:09:45,920 --> 00:09:47,519
talking about the mythic framework we're

292
00:09:47,519 --> 00:09:49,279
going to dive into what mythic is how it

293
00:09:49,279 --> 00:09:50,720
can be used in red teams its

294
00:09:50,720 --> 00:09:52,560
architecture and then current mythic

295
00:09:52,560 --> 00:09:55,920
implants targeting mac os

296
00:09:56,800 --> 00:09:58,320
from the github this is a pretty good

297
00:09:58,320 --> 00:09:59,600
summary of mythic

298
00:09:59,600 --> 00:10:01,600
mythic is a cross-platform post-exploit

299
00:10:01,600 --> 00:10:03,360
red teaming framework built with python

300
00:10:03,360 --> 00:10:06,079
3 docker docker compose and web browser

301
00:10:06,079 --> 00:10:07,120
ui

302
00:10:07,120 --> 00:10:08,880
it's designed to provide a collaborative

303
00:10:08,880 --> 00:10:10,320
and user-friendly interface for

304
00:10:10,320 --> 00:10:12,240
operators managers and reporting

305
00:10:12,240 --> 00:10:15,040
throughout red teaming

306
00:10:16,240 --> 00:10:17,839
in a nutshell mythic is a command

307
00:10:17,839 --> 00:10:19,440
control server that has lots of neat

308
00:10:19,440 --> 00:10:21,519
features like a web ui user access

309
00:10:21,519 --> 00:10:23,600
control and reporting

310
00:10:23,600 --> 00:10:24,959
it does a really good job of

311
00:10:24,959 --> 00:10:26,720
centralizing all actions performed

312
00:10:26,720 --> 00:10:28,640
during a red team operation

313
00:10:28,640 --> 00:10:30,959
it's open source at github.com it's a

314
00:10:30,959 --> 00:10:32,399
feature mythic

315
00:10:32,399 --> 00:10:34,079
and there's documentation for developers

316
00:10:34,079 --> 00:10:37,680
and users at docs.mythicc2.net

317
00:10:37,680 --> 00:10:39,120
mythic is an extremely modular and

318
00:10:39,120 --> 00:10:41,120
customizable framework it allows the

319
00:10:41,120 --> 00:10:42,959
implant developer full control over how

320
00:10:42,959 --> 00:10:44,839
their implant interacts with the mythic

321
00:10:44,839 --> 00:10:47,360
framework it does this by using docker

322
00:10:47,360 --> 00:10:48,720
to separate out all of its different

323
00:10:48,720 --> 00:10:51,120
components the primary mythic server the

324
00:10:51,120 --> 00:10:53,200
database the payloads the c2 containers

325
00:10:53,200 --> 00:10:54,800
the documentation containers are all

326
00:10:54,800 --> 00:10:56,320
separated out into different docker

327
00:10:56,320 --> 00:10:57,839
containers

328
00:10:57,839 --> 00:10:59,680
perhaps my favorite feature of all is

329
00:10:59,680 --> 00:11:00,959
that operators can simply connect to

330
00:11:00,959 --> 00:11:02,640
mythic using a web browser there's no

331
00:11:02,640 --> 00:11:04,640
need to install some sort of heavyweight

332
00:11:04,640 --> 00:11:06,320
client application just to connect to

333
00:11:06,320 --> 00:11:08,480
your c2 server so technically you could

334
00:11:08,480 --> 00:11:09,760
own things from your phone and just

335
00:11:09,760 --> 00:11:13,959
manage it all from your mobile device

336
00:11:14,320 --> 00:11:16,320
let's take a look at how traffic flows

337
00:11:16,320 --> 00:11:18,480
uh in mythic uh in this example we're

338
00:11:18,480 --> 00:11:21,040
gonna go through uh what happens when me

339
00:11:21,040 --> 00:11:23,120
as an operator execute an ls command on

340
00:11:23,120 --> 00:11:24,720
the home directory and how that gets

341
00:11:24,720 --> 00:11:26,640
executed on the implant and then how

342
00:11:26,640 --> 00:11:29,839
that information travels back to us

343
00:11:29,839 --> 00:11:31,440
so in the left corner you'll see the

344
00:11:31,440 --> 00:11:33,040
operator's browser here's where the

345
00:11:33,040 --> 00:11:34,720
operator interacts with mythic so here

346
00:11:34,720 --> 00:11:35,920
we're going to use we're going to

347
00:11:35,920 --> 00:11:37,279
execute the ls command on the user's

348
00:11:37,279 --> 00:11:38,800
home directory

349
00:11:38,800 --> 00:11:40,240
the mythic server is going to receive

350
00:11:40,240 --> 00:11:41,920
that command and then pass that command

351
00:11:41,920 --> 00:11:43,839
and arguments to the payload container

352
00:11:43,839 --> 00:11:45,519
in the top right

353
00:11:45,519 --> 00:11:47,279
that payload container is responsible

354
00:11:47,279 --> 00:11:49,040
for pre-processing of the command and

355
00:11:49,040 --> 00:11:50,240
arguments so it's going to clean up

356
00:11:50,240 --> 00:11:51,839
things like spaces

357
00:11:51,839 --> 00:11:53,200
it's going to make sure that that

358
00:11:53,200 --> 00:11:54,720
command arguments by the time it reaches

359
00:11:54,720 --> 00:11:56,000
the implant the implant doesn't have to

360
00:11:56,000 --> 00:11:57,760
do any additional work and so this saves

361
00:11:57,760 --> 00:11:59,120
the amount of kind of code that you have

362
00:11:59,120 --> 00:11:59,839
to

363
00:11:59,839 --> 00:12:02,240
write in your implant

364
00:12:02,240 --> 00:12:04,000
once that commanded arguments have been

365
00:12:04,000 --> 00:12:05,120
cleaned up those are stored on the

366
00:12:05,120 --> 00:12:06,480
mythic server

367
00:12:06,480 --> 00:12:07,760
now if you look at the bottom right we

368
00:12:07,760 --> 00:12:09,279
have the agent calling back this is the

369
00:12:09,279 --> 00:12:11,120
computer that we've compromised

370
00:12:11,120 --> 00:12:12,800
this agent calling back is going to send

371
00:12:12,800 --> 00:12:16,880
an http request to the http c2 container

372
00:12:16,880 --> 00:12:18,880
the http c2 container is going to parse

373
00:12:18,880 --> 00:12:21,200
the agent message from the http request

374
00:12:21,200 --> 00:12:22,720
and then pass that agent message to the

375
00:12:22,720 --> 00:12:24,720
mythic server

376
00:12:24,720 --> 00:12:26,399
the mythic server is going to respond

377
00:12:26,399 --> 00:12:27,839
with the command in arguments so it's

378
00:12:27,839 --> 00:12:29,839
going to respond with that ls command on

379
00:12:29,839 --> 00:12:31,760
the user's home directory

380
00:12:31,760 --> 00:12:33,360
once the agent receives that command

381
00:12:33,360 --> 00:12:34,800
it's going to execute that ls on the

382
00:12:34,800 --> 00:12:37,120
user's home directory and then pass that

383
00:12:37,120 --> 00:12:38,399
um

384
00:12:38,399 --> 00:12:40,560
the data that it gets back to the mythic

385
00:12:40,560 --> 00:12:42,480
server so all of the files and folders

386
00:12:42,480 --> 00:12:44,720
on the home directory the names

387
00:12:44,720 --> 00:12:46,320
size etc are being passed to the mythic

388
00:12:46,320 --> 00:12:47,920
server

389
00:12:47,920 --> 00:12:49,200
once the mythic server receives that

390
00:12:49,200 --> 00:12:50,720
information it renders that in the

391
00:12:50,720 --> 00:12:52,320
operator's browser and that's kind of

392
00:12:52,320 --> 00:12:54,000
how end to end an operator issues a

393
00:12:54,000 --> 00:12:55,440
command

394
00:12:55,440 --> 00:12:56,880
it gets cleaned up gets sent down to the

395
00:12:56,880 --> 00:12:59,360
myth to get sent down to the agent

396
00:12:59,360 --> 00:13:01,040
and then the output is rendered in the

397
00:13:01,040 --> 00:13:03,839
operator's browser

398
00:13:05,360 --> 00:13:06,800
now let's talk about existing mythic

399
00:13:06,800 --> 00:13:08,480
payloads that can be used to target mac

400
00:13:08,480 --> 00:13:10,800
os

401
00:13:11,040 --> 00:13:13,040
it should be noted uh that the following

402
00:13:13,040 --> 00:13:15,200
payloads all use the objective-c api

403
00:13:15,200 --> 00:13:17,680
calls to interact with macos

404
00:13:17,680 --> 00:13:19,120
the first one i want to talk about is

405
00:13:19,120 --> 00:13:20,399
the app file agent

406
00:13:20,399 --> 00:13:22,560
appfel is the jxa agent for the mythic

407
00:13:22,560 --> 00:13:24,560
framework apple is great for initial

408
00:13:24,560 --> 00:13:26,240
access because it supports a download

409
00:13:26,240 --> 00:13:27,760
cradle where you can download and

410
00:13:27,760 --> 00:13:29,600
execute jxa in memory using that

411
00:13:29,600 --> 00:13:31,279
osuscript binary

412
00:13:31,279 --> 00:13:32,800
if you come from a windows background

413
00:13:32,800 --> 00:13:33,920
think of this like a powershell

414
00:13:33,920 --> 00:13:35,839
one-liner you can pull down a malicious

415
00:13:35,839 --> 00:13:37,279
powershell script and execute it in

416
00:13:37,279 --> 00:13:40,480
memory this is the same thing on mac os

417
00:13:40,480 --> 00:13:42,639
the next one i'll talk about is poseidon

418
00:13:42,639 --> 00:13:44,079
poseidon's the goaling agent for the

419
00:13:44,079 --> 00:13:46,000
mythic framework poseidon is a bit

420
00:13:46,000 --> 00:13:48,560
larger in size but more fully featured

421
00:13:48,560 --> 00:13:50,399
it includes things like socks procsing

422
00:13:50,399 --> 00:13:51,839
as well as multi-threading so you can

423
00:13:51,839 --> 00:13:54,320
proxy in your own tools if you need to

424
00:13:54,320 --> 00:13:55,920
this makes it great for a second stage

425
00:13:55,920 --> 00:13:57,360
payload after you've gotten initial

426
00:13:57,360 --> 00:14:00,160
access with something like apple

427
00:14:00,160 --> 00:14:01,440
the last one i want to talk about is

428
00:14:01,440 --> 00:14:04,320
medusa the python agent medusa also

429
00:14:04,320 --> 00:14:06,079
leverages a lull bin for execution in

430
00:14:06,079 --> 00:14:08,560
the form of python and python 3.

431
00:14:08,560 --> 00:14:10,399
one particular cool thing about medusa

432
00:14:10,399 --> 00:14:11,839
is you can send down a small medusa

433
00:14:11,839 --> 00:14:13,839
agent with only the load command

434
00:14:13,839 --> 00:14:15,199
and then you can load all of your agent

435
00:14:15,199 --> 00:14:16,880
modules on the fly so you can send down

436
00:14:16,880 --> 00:14:18,480
this very small payload and then load in

437
00:14:18,480 --> 00:14:20,959
all of your agent modules later on

438
00:14:20,959 --> 00:14:22,079
and this makes it a bit harder to

439
00:14:22,079 --> 00:14:23,600
fingerprint

440
00:14:23,600 --> 00:14:24,959
another neat feature is you can run

441
00:14:24,959 --> 00:14:26,639
third-party python scripts as well as

442
00:14:26,639 --> 00:14:28,839
execute python code dynamically all in

443
00:14:28,839 --> 00:14:30,880
memory this is really just a brief

444
00:14:30,880 --> 00:14:32,240
summary of all these payloads and i'm

445
00:14:32,240 --> 00:14:33,760
really not doing them any justice so i

446
00:14:33,760 --> 00:14:35,199
highly recommend you go out and try them

447
00:14:35,199 --> 00:14:37,760
for yourselves

448
00:14:38,240 --> 00:14:40,160
as you may have guessed hermes is a

449
00:14:40,160 --> 00:14:42,399
swift payload for the mythic framework

450
00:14:42,399 --> 00:14:43,760
in this section i'll be going over the

451
00:14:43,760 --> 00:14:45,440
development of hermes and in a follow-up

452
00:14:45,440 --> 00:14:48,880
section we'll dive into functionality

453
00:14:49,360 --> 00:14:51,360
so what is hermes hermes is a mythic

454
00:14:51,360 --> 00:14:53,120
payload targeting mac os written in

455
00:14:53,120 --> 00:14:55,920
swift 5. it's been tested on big sur as

456
00:14:55,920 --> 00:14:57,680
well as monterey

457
00:14:57,680 --> 00:14:59,360
and hermes implements an encrypted key

458
00:14:59,360 --> 00:15:01,360
exchange for secure communications and

459
00:15:01,360 --> 00:15:03,120
what this means is that each implant

460
00:15:03,120 --> 00:15:04,399
goes through this key exchange to

461
00:15:04,399 --> 00:15:06,399
securely generate a unique session key

462
00:15:06,399 --> 00:15:09,600
to encrypt all future agent traffic

463
00:15:09,600 --> 00:15:11,040
hermes includes various post

464
00:15:11,040 --> 00:15:12,560
exploitation modules that include

465
00:15:12,560 --> 00:15:14,959
situational awareness upload download

466
00:15:14,959 --> 00:15:18,638
execution as well as job control

467
00:15:20,000 --> 00:15:21,680
before i dive into hermes development i

468
00:15:21,680 --> 00:15:22,959
want to talk about my motivation for

469
00:15:22,959 --> 00:15:24,959
writing hermes i find that writing

470
00:15:24,959 --> 00:15:26,560
implants is a straightforward and fun

471
00:15:26,560 --> 00:15:28,320
way to learn operating system internals

472
00:15:28,320 --> 00:15:29,600
as well as pick up a new programming

473
00:15:29,600 --> 00:15:30,959
language

474
00:15:30,959 --> 00:15:32,480
you can start small and write things

475
00:15:32,480 --> 00:15:35,199
like ls print working directory who am i

476
00:15:35,199 --> 00:15:36,720
and then eventually move on to implement

477
00:15:36,720 --> 00:15:38,800
more complex things such as encryption

478
00:15:38,800 --> 00:15:40,800
command and control over http requests

479
00:15:40,800 --> 00:15:43,279
and a job control manager

480
00:15:43,279 --> 00:15:44,639
previously i'd written the command

481
00:15:44,639 --> 00:15:46,320
control server and agent called skate

482
00:15:46,320 --> 00:15:48,399
rat and skatepark

483
00:15:48,399 --> 00:15:49,920
skate route was the implant portion and

484
00:15:49,920 --> 00:15:51,759
skatepark was the server side and i

485
00:15:51,759 --> 00:15:53,279
quickly realized that i hated writing

486
00:15:53,279 --> 00:15:54,800
the server component and i hated writing

487
00:15:54,800 --> 00:15:56,399
the front end component

488
00:15:56,399 --> 00:15:58,000
with mythic i only had to write the part

489
00:15:58,000 --> 00:16:00,959
that interested me the implant side

490
00:16:00,959 --> 00:16:02,240
and so like i highly encourage if you

491
00:16:02,240 --> 00:16:04,079
want to dive into mythic like definitely

492
00:16:04,079 --> 00:16:07,199
doing retro and implant

493
00:16:07,440 --> 00:16:08,800
i want to start off by saying that cross

494
00:16:08,800 --> 00:16:11,360
compiling for mac os is a pain

495
00:16:11,360 --> 00:16:13,199
my goal was to compile swift code to a

496
00:16:13,199 --> 00:16:16,160
maco executable from a linux container

497
00:16:16,160 --> 00:16:18,320
and the reason for this is that since

498
00:16:18,320 --> 00:16:20,000
mythic uses containers under the hood i

499
00:16:20,000 --> 00:16:21,519
wanted to make it as easy as possible

500
00:16:21,519 --> 00:16:23,519
for an end user to download mythic

501
00:16:23,519 --> 00:16:25,279
download hermes and then compile a

502
00:16:25,279 --> 00:16:27,199
payload from directly from mythic

503
00:16:27,199 --> 00:16:28,720
without any form of external build

504
00:16:28,720 --> 00:16:30,639
systems

505
00:16:30,639 --> 00:16:32,560
the first project i took a look at was

506
00:16:32,560 --> 00:16:35,759
osx cross poseidon uses osx cross to

507
00:16:35,759 --> 00:16:38,160
cross-compile goling to mac os

508
00:16:38,160 --> 00:16:39,440
but unfortunately a quick look at the

509
00:16:39,440 --> 00:16:41,600
readme i found that it doesn't support

510
00:16:41,600 --> 00:16:42,959
swift so this wouldn't be the answer for

511
00:16:42,959 --> 00:16:44,000
me

512
00:16:44,000 --> 00:16:45,759
the next project i looked at was docker

513
00:16:45,759 --> 00:16:48,079
osx this seemingly was the answer to my

514
00:16:48,079 --> 00:16:51,040
problems unfortunately docker os x needs

515
00:16:51,040 --> 00:16:53,199
to be run on a macos host whereas most

516
00:16:53,199 --> 00:16:55,120
c2 servers traditionally run on linux

517
00:16:55,120 --> 00:16:57,120
servers

518
00:16:57,120 --> 00:16:58,880
the last solution i looked at was aws

519
00:16:58,880 --> 00:17:01,680
pipeline and github actions

520
00:17:01,680 --> 00:17:03,040
i looked at the free tier and didn't

521
00:17:03,040 --> 00:17:04,079
really like that there was an upper

522
00:17:04,079 --> 00:17:06,240
limit on how much you could compile

523
00:17:06,240 --> 00:17:07,919
i really wanted a free solution that

524
00:17:07,919 --> 00:17:09,679
kept the payload config under end user

525
00:17:09,679 --> 00:17:10,720
control

526
00:17:10,720 --> 00:17:12,559
and what i mean by that is within hermes

527
00:17:12,559 --> 00:17:14,799
there's a file that determines that

528
00:17:14,799 --> 00:17:16,480
defines various secrets such as

529
00:17:16,480 --> 00:17:18,720
encryption keys c2 callback domains

530
00:17:18,720 --> 00:17:21,280
ports and other agent-specific secrets i

531
00:17:21,280 --> 00:17:22,720
wanted to keep that information out of

532
00:17:22,720 --> 00:17:26,240
third-party control if possible

533
00:17:26,880 --> 00:17:28,400
after a bit of searching i discovered

534
00:17:28,400 --> 00:17:31,200
the answer to all of my problems darling

535
00:17:31,200 --> 00:17:33,360
darling is a mac os emulation layer for

536
00:17:33,360 --> 00:17:36,080
linux it's free and open source

537
00:17:36,080 --> 00:17:37,919
and if you're not familiar with wine

538
00:17:37,919 --> 00:17:39,760
wine lets you run windows software on a

539
00:17:39,760 --> 00:17:42,000
linux host darling does the exact same

540
00:17:42,000 --> 00:17:44,240
thing but for mac os software you could

541
00:17:44,240 --> 00:17:47,039
install software such as xcode command

542
00:17:47,039 --> 00:17:49,360
line tools etc and you could also

543
00:17:49,360 --> 00:17:51,520
compile and run programs

544
00:17:51,520 --> 00:17:53,039
compiling programs is really all i

545
00:17:53,039 --> 00:17:54,400
needed it for so let's walk through an

546
00:17:54,400 --> 00:17:57,039
example of that

547
00:17:57,600 --> 00:17:59,120
here's an example of cross compilation

548
00:17:59,120 --> 00:18:01,280
with darling first we run the u name

549
00:18:01,280 --> 00:18:03,360
command to show that we're on a linux

550
00:18:03,360 --> 00:18:04,320
host

551
00:18:04,320 --> 00:18:06,559
then we drop into a darling shell using

552
00:18:06,559 --> 00:18:07,840
darling shell

553
00:18:07,840 --> 00:18:09,520
and then we run the u name command again

554
00:18:09,520 --> 00:18:11,120
and it returns the darwin so we're on

555
00:18:11,120 --> 00:18:12,960
this kind of mac os emulated layer at

556
00:18:12,960 --> 00:18:15,039
this point so now let's go through that

557
00:18:15,039 --> 00:18:17,440
process of compiling swift code so again

558
00:18:17,440 --> 00:18:20,000
we have b-sides sf.swift it just says

559
00:18:20,000 --> 00:18:22,559
print hello b-sides sf-2022

560
00:18:22,559 --> 00:18:23,679
we're going to compile that using the

561
00:18:23,679 --> 00:18:26,160
swift compiler so swift c and then we'll

562
00:18:26,160 --> 00:18:29,039
be output the b sides sf executable

563
00:18:29,039 --> 00:18:30,240
we're going to flip the executable bit

564
00:18:30,240 --> 00:18:32,080
on that using chmod and then we're going

565
00:18:32,080 --> 00:18:34,080
to kick that off with dot slash b sides

566
00:18:34,080 --> 00:18:35,760
sf and you'll see that we're presented

567
00:18:35,760 --> 00:18:38,880
with hello besides sf 2022

568
00:18:38,880 --> 00:18:40,640
so at this point we're able to compile

569
00:18:40,640 --> 00:18:42,880
swift code to a mocko executable from a

570
00:18:42,880 --> 00:18:45,840
linux server

571
00:18:46,799 --> 00:18:48,559
in the previous example i was testing

572
00:18:48,559 --> 00:18:50,320
darling on a linux server

573
00:18:50,320 --> 00:18:52,160
my next goal was to get darling working

574
00:18:52,160 --> 00:18:54,400
with docker since mythic uses docker for

575
00:18:54,400 --> 00:18:56,000
everything under the hood and there are

576
00:18:56,000 --> 00:18:57,360
a couple tricks i had to do to get

577
00:18:57,360 --> 00:19:00,640
darling and docker to cooperate nicely

578
00:19:00,640 --> 00:19:02,400
first the darling linux kernel module

579
00:19:02,400 --> 00:19:04,320
must be installed on the host and loaded

580
00:19:04,320 --> 00:19:06,480
prior to the container start

581
00:19:06,480 --> 00:19:07,760
and the reason for this is that the

582
00:19:07,760 --> 00:19:09,440
darling kernel module is the core to

583
00:19:09,440 --> 00:19:11,280
darling it allows for features that

584
00:19:11,280 --> 00:19:12,640
would be otherwise

585
00:19:12,640 --> 00:19:14,320
difficult or impossible to do purely

586
00:19:14,320 --> 00:19:16,240
from user land

587
00:19:16,240 --> 00:19:17,919
next the container must be run in

588
00:19:17,919 --> 00:19:19,440
privileged mode

589
00:19:19,440 --> 00:19:20,559
and this will basically allow the

590
00:19:20,559 --> 00:19:22,160
container to access the underlying

591
00:19:22,160 --> 00:19:25,039
driver on the host

592
00:19:25,039 --> 00:19:26,960
with these tricks swift code could be

593
00:19:26,960 --> 00:19:29,039
compiled within with a docker container

594
00:19:29,039 --> 00:19:31,280
on a linux host

595
00:19:31,280 --> 00:19:33,520
previously your first hermes build took

596
00:19:33,520 --> 00:19:35,039
about 10 minutes because i had to

597
00:19:35,039 --> 00:19:36,640
install command line tools manually

598
00:19:36,640 --> 00:19:38,480
every time the container started

599
00:19:38,480 --> 00:19:40,160
i did a little bit of extra work and was

600
00:19:40,160 --> 00:19:41,360
able to pre-install it within the

601
00:19:41,360 --> 00:19:43,039
container so now you can build payloads

602
00:19:43,039 --> 00:19:44,720
within a minute you can download mythic

603
00:19:44,720 --> 00:19:46,640
install hermes and then you'll have a

604
00:19:46,640 --> 00:19:49,840
payload running within a minute

605
00:19:50,480 --> 00:19:52,000
cross compilation was honestly one of

606
00:19:52,000 --> 00:19:53,679
the hardest parts of this project once

607
00:19:53,679 --> 00:19:55,039
that was out of the way it was just

608
00:19:55,039 --> 00:19:56,480
writing swift code

609
00:19:56,480 --> 00:19:58,000
in this section i'll dive into hermes

610
00:19:58,000 --> 00:19:59,280
functionality and some of the code

611
00:19:59,280 --> 00:20:01,760
behind it

612
00:20:02,320 --> 00:20:04,240
as i mentioned earlier hermes implements

613
00:20:04,240 --> 00:20:05,840
an encrypted key exchange for secure

614
00:20:05,840 --> 00:20:07,120
communications

615
00:20:07,120 --> 00:20:08,880
each implant goes through a process that

616
00:20:08,880 --> 00:20:11,520
securely generates a unique session key

617
00:20:11,520 --> 00:20:14,640
to encrypt all future agent messages

618
00:20:14,640 --> 00:20:16,559
if that session key is compromised for

619
00:20:16,559 --> 00:20:18,840
whatever reason other implants are not

620
00:20:18,840 --> 00:20:21,520
affected the encrypted key exchange

621
00:20:21,520 --> 00:20:23,760
grants us what's called forward secrecy

622
00:20:23,760 --> 00:20:25,280
and this means that even if long-term

623
00:20:25,280 --> 00:20:26,880
secrets are compromised such as a

624
00:20:26,880 --> 00:20:28,880
pre-shared key the negotiated session

625
00:20:28,880 --> 00:20:32,159
keys will not be compromised

626
00:20:32,880 --> 00:20:34,000
let's kind of walk through what this

627
00:20:34,000 --> 00:20:35,840
process looks like

628
00:20:35,840 --> 00:20:37,360
so starting from the top mythic and

629
00:20:37,360 --> 00:20:40,320
hermes start with a pre-shared key

630
00:20:40,320 --> 00:20:42,240
when you first execute hermes it's going

631
00:20:42,240 --> 00:20:44,240
to generate an rsa key pair in memory so

632
00:20:44,240 --> 00:20:47,440
an rsa public key and an rsa private key

633
00:20:47,440 --> 00:20:49,120
it's going to use that pre-shared key

634
00:20:49,120 --> 00:20:51,280
encrypt the rsa public key and send that

635
00:20:51,280 --> 00:20:53,360
up to the mythic server

636
00:20:53,360 --> 00:20:54,799
the mythic server of course has the

637
00:20:54,799 --> 00:20:56,640
pre-shared key so is able to decrypt

638
00:20:56,640 --> 00:20:59,360
that rsa public key

639
00:20:59,360 --> 00:21:01,520
mythic will then generate an aes session

640
00:21:01,520 --> 00:21:02,559
key

641
00:21:02,559 --> 00:21:04,400
it encrypts this aes session key with

642
00:21:04,400 --> 00:21:06,240
that rsa public key that was received

643
00:21:06,240 --> 00:21:08,080
from hermes

644
00:21:08,080 --> 00:21:09,919
hermes of course has the corresponding

645
00:21:09,919 --> 00:21:12,240
rsa private key and is able to decrypt

646
00:21:12,240 --> 00:21:14,400
that aes session key and so now hermes

647
00:21:14,400 --> 00:21:16,080
has the ais session key generated by

648
00:21:16,080 --> 00:21:17,679
mythic

649
00:21:17,679 --> 00:21:19,679
hermes will then gather various basic

650
00:21:19,679 --> 00:21:21,600
system information such as networking

651
00:21:21,600 --> 00:21:24,000
information process lists username

652
00:21:24,000 --> 00:21:26,480
process id things like that encrypt all

653
00:21:26,480 --> 00:21:28,080
that system information with the aes

654
00:21:28,080 --> 00:21:29,600
session key and send that up to the

655
00:21:29,600 --> 00:21:31,440
mythic server

656
00:21:31,440 --> 00:21:33,039
mythic will confirm this check-in as a

657
00:21:33,039 --> 00:21:35,280
new callback and then send back down an

658
00:21:35,280 --> 00:21:37,679
encrypted acknowledged message

659
00:21:37,679 --> 00:21:39,200
once hermes receives this encrypted

660
00:21:39,200 --> 00:21:41,120
acknowledged message hermes will begin

661
00:21:41,120 --> 00:21:44,120
beginning

662
00:21:44,559 --> 00:21:46,400
so once hermes is beaconing let's talk

663
00:21:46,400 --> 00:21:48,000
about what happens when an operator

664
00:21:48,000 --> 00:21:50,559
issues a command to hermes

665
00:21:50,559 --> 00:21:52,320
every command and parameter issued on

666
00:21:52,320 --> 00:21:55,520
the mythic side turn into a hermes job

667
00:21:55,520 --> 00:21:57,760
each job is executed in a separate

668
00:21:57,760 --> 00:21:58,640
thread

669
00:21:58,640 --> 00:22:00,159
and then when we create this thread we

670
00:22:00,159 --> 00:22:01,919
track the thread id so that we can kill

671
00:22:01,919 --> 00:22:03,840
the job at any time so any rogue jobs or

672
00:22:03,840 --> 00:22:05,039
long-running jobs that we don't want to

673
00:22:05,039 --> 00:22:07,919
run anymore we can easily kill those

674
00:22:07,919 --> 00:22:09,760
since since each job runs in a separate

675
00:22:09,760 --> 00:22:12,240
thread hermes supports long-running jobs

676
00:22:12,240 --> 00:22:13,600
and jobs that don't return output

677
00:22:13,600 --> 00:22:15,360
immediately

678
00:22:15,360 --> 00:22:16,640
if you look at the image on the right

679
00:22:16,640 --> 00:22:18,640
side you'll see the jobs command will

680
00:22:18,640 --> 00:22:20,480
return all the current jobs with their

681
00:22:20,480 --> 00:22:22,480
command and the parameters

682
00:22:22,480 --> 00:22:24,640
you have job control using the job kill

683
00:22:24,640 --> 00:22:26,320
command so you can kill any jobs that

684
00:22:26,320 --> 00:22:27,840
you don't want running anymore using job

685
00:22:27,840 --> 00:22:31,760
kill and just specify the job id

686
00:22:32,400 --> 00:22:34,240
hermes has the ability to download files

687
00:22:34,240 --> 00:22:36,480
from the target and upload files to the

688
00:22:36,480 --> 00:22:37,600
target

689
00:22:37,600 --> 00:22:40,159
this is performed in 512 kilobyte chunks

690
00:22:40,159 --> 00:22:41,840
and occur within normal command control

691
00:22:41,840 --> 00:22:43,039
traffic

692
00:22:43,039 --> 00:22:45,200
the url request structure defines the

693
00:22:45,200 --> 00:22:48,240
http method the headers the url and the

694
00:22:48,240 --> 00:22:49,520
path

695
00:22:49,520 --> 00:22:51,360
the url session class is what is

696
00:22:51,360 --> 00:22:52,960
responsible for making the actual web

697
00:22:52,960 --> 00:22:54,799
request

698
00:22:54,799 --> 00:22:56,000
for upload

699
00:22:56,000 --> 00:22:57,679
the operator wants to upload a file to

700
00:22:57,679 --> 00:22:58,799
the target

701
00:22:58,799 --> 00:23:00,480
in this case mythic is going to take the

702
00:23:00,480 --> 00:23:01,600
file size

703
00:23:01,600 --> 00:23:03,360
of the file you want to upload

704
00:23:03,360 --> 00:23:04,720
determine how many chunks it will take

705
00:23:04,720 --> 00:23:06,320
to send down to the target

706
00:23:06,320 --> 00:23:08,240
and then start sending portions of that

707
00:23:08,240 --> 00:23:10,640
file down to target

708
00:23:10,640 --> 00:23:12,480
hermes will incrementally create this

709
00:23:12,480 --> 00:23:14,720
file on target so when it receives chunk

710
00:23:14,720 --> 00:23:16,320
one it's gonna

711
00:23:16,320 --> 00:23:17,760
first create the file when it receives

712
00:23:17,760 --> 00:23:19,280
chunk two it'll just keep adding data to

713
00:23:19,280 --> 00:23:20,480
this file

714
00:23:20,480 --> 00:23:22,320
and so the benefit of this is that the

715
00:23:22,320 --> 00:23:24,080
entire file is never stored in implant

716
00:23:24,080 --> 00:23:26,480
memory all at once so theoretically you

717
00:23:26,480 --> 00:23:28,320
could upload arbitrarily large files to

718
00:23:28,320 --> 00:23:30,080
the target

719
00:23:30,080 --> 00:23:32,559
download works the inverse to upload

720
00:23:32,559 --> 00:23:34,320
for download we want to download a file

721
00:23:34,320 --> 00:23:36,080
from the target and transfer it to our

722
00:23:36,080 --> 00:23:37,679
command control server

723
00:23:37,679 --> 00:23:39,440
in that case hermes is going to take the

724
00:23:39,440 --> 00:23:41,039
file size and determining how many

725
00:23:41,039 --> 00:23:42,320
chunks it'll take to send it up to the

726
00:23:42,320 --> 00:23:43,679
mythic server

727
00:23:43,679 --> 00:23:45,200
hermes will then start reading chunks of

728
00:23:45,200 --> 00:23:46,640
that file and sending them up to the

729
00:23:46,640 --> 00:23:47,840
mythic server

730
00:23:47,840 --> 00:23:49,679
once mythic receives all the chunks the

731
00:23:49,679 --> 00:23:51,679
file is recreated on the server and made

732
00:23:51,679 --> 00:23:53,120
readily available for the operator to

733
00:23:53,120 --> 00:23:54,960
download

734
00:23:54,960 --> 00:23:56,159
upload and download can also be

735
00:23:56,159 --> 00:23:57,760
performed from mythic's file browser

736
00:23:57,760 --> 00:23:59,120
which i'll also be showing in a later

737
00:23:59,120 --> 00:24:01,439
slide

738
00:24:02,880 --> 00:24:04,960
of course as uh with any implant you

739
00:24:04,960 --> 00:24:05,919
have to be able to interact with the

740
00:24:05,919 --> 00:24:08,000
file system hermes implements all of

741
00:24:08,000 --> 00:24:10,240
this using the file manager class so you

742
00:24:10,240 --> 00:24:12,000
have all of your classic file commands

743
00:24:12,000 --> 00:24:14,000
such as change directory list contents

744
00:24:14,000 --> 00:24:16,000
of a directory print working directory

745
00:24:16,000 --> 00:24:18,400
making new directories moving or copying

746
00:24:18,400 --> 00:24:19,919
files or directories and then also

747
00:24:19,919 --> 00:24:22,240
removing files or directories

748
00:24:22,240 --> 00:24:24,000
you can also perform file listings and

749
00:24:24,000 --> 00:24:26,240
file removals from the file browser

750
00:24:26,240 --> 00:24:28,880
which i'll show

751
00:24:29,679 --> 00:24:31,360
so here's an example of running the ls

752
00:24:31,360 --> 00:24:33,360
command on the user's home directory

753
00:24:33,360 --> 00:24:35,039
you see the various data that's returned

754
00:24:35,039 --> 00:24:37,200
includes the size of the filer folder

755
00:24:37,200 --> 00:24:39,360
the name of the file folder the owner

756
00:24:39,360 --> 00:24:41,679
the group the posix permissions

757
00:24:41,679 --> 00:24:42,960
and then on the left side you'll see an

758
00:24:42,960 --> 00:24:44,159
actions button

759
00:24:44,159 --> 00:24:45,679
if you click the actions button you can

760
00:24:45,679 --> 00:24:46,880
issue further

761
00:24:46,880 --> 00:24:48,799
hermes commands such as downloading that

762
00:24:48,799 --> 00:24:51,120
file or removing that file

763
00:24:51,120 --> 00:24:52,480
additionally you can view extended

764
00:24:52,480 --> 00:24:55,039
attributes such as com.apple.quarantine

765
00:24:55,039 --> 00:24:57,679
from that view

766
00:24:58,880 --> 00:25:00,240
so here's what the file browser looks

767
00:25:00,240 --> 00:25:02,240
like on the left side

768
00:25:02,240 --> 00:25:04,240
you see the various host names of hosts

769
00:25:04,240 --> 00:25:05,840
that have been compromised

770
00:25:05,840 --> 00:25:07,520
if you expand the host names you'll see

771
00:25:07,520 --> 00:25:09,039
all the files and folders that have

772
00:25:09,039 --> 00:25:11,039
already been enumerated as denoted by

773
00:25:11,039 --> 00:25:12,880
the green check mark

774
00:25:12,880 --> 00:25:15,039
the file browser is a nice way to to

775
00:25:15,039 --> 00:25:16,640
kind of move around the operating system

776
00:25:16,640 --> 00:25:17,919
as you click through folders you can

777
00:25:17,919 --> 00:25:20,000
issue further ls commands and kind of

778
00:25:20,000 --> 00:25:21,679
enumerate those contents

779
00:25:21,679 --> 00:25:23,679
you can even upload files directly to

780
00:25:23,679 --> 00:25:25,919
the folder from this view

781
00:25:25,919 --> 00:25:27,120
on the right side you have a bit more

782
00:25:27,120 --> 00:25:28,480
information about the file you have the

783
00:25:28,480 --> 00:25:30,960
file the size when it was last modified

784
00:25:30,960 --> 00:25:32,559
things like that

785
00:25:32,559 --> 00:25:34,320
if you click the actions button

786
00:25:34,320 --> 00:25:36,080
in that view you can do things such as

787
00:25:36,080 --> 00:25:38,480
issue further ls commands download the

788
00:25:38,480 --> 00:25:40,960
file or even delete the file

789
00:25:40,960 --> 00:25:42,640
one of my favorite features of mythic's

790
00:25:42,640 --> 00:25:44,080
file browser is you can actually add a

791
00:25:44,080 --> 00:25:45,039
comment

792
00:25:45,039 --> 00:25:46,559
and so if you discover a file with

793
00:25:46,559 --> 00:25:48,400
important credentials or you know this

794
00:25:48,400 --> 00:25:49,919
file is important for whatever reason

795
00:25:49,919 --> 00:25:51,279
you can make a comment and so that when

796
00:25:51,279 --> 00:25:53,039
your team is browsing

797
00:25:53,039 --> 00:25:54,640
to this particular directory they'll see

798
00:25:54,640 --> 00:25:56,559
your comment

799
00:25:56,559 --> 00:25:57,760
and kind of just like all that

800
00:25:57,760 --> 00:25:59,279
information is kind of all readily

801
00:25:59,279 --> 00:26:02,159
available and shared

802
00:26:02,640 --> 00:26:04,159
so what would an agent be if you

803
00:26:04,159 --> 00:26:06,080
couldn't execute things on the target

804
00:26:06,080 --> 00:26:07,600
hermes implements this in two different

805
00:26:07,600 --> 00:26:10,320
ways one using the run command the run

806
00:26:10,320 --> 00:26:12,400
command will execute a binary on disk

807
00:26:12,400 --> 00:26:14,480
with arguments and it does this by using

808
00:26:14,480 --> 00:26:16,640
the process class to execute the binary

809
00:26:16,640 --> 00:26:18,480
and then the pipe class to capture any

810
00:26:18,480 --> 00:26:19,919
output

811
00:26:19,919 --> 00:26:21,279
if you look at the image on the right

812
00:26:21,279 --> 00:26:23,919
we're running the ifconfig binary so

813
00:26:23,919 --> 00:26:25,919
just printing out network information

814
00:26:25,919 --> 00:26:28,400
and then passing in the en9 network

815
00:26:28,400 --> 00:26:30,320
interface and you can see that

816
00:26:30,320 --> 00:26:33,120
that output is returned properly

817
00:26:33,120 --> 00:26:34,960
next hermes has the shell command to

818
00:26:34,960 --> 00:26:36,559
basically execute a bash command with

819
00:26:36,559 --> 00:26:38,400
bin bash tax c

820
00:26:38,400 --> 00:26:39,919
this works extremely similar to the run

821
00:26:39,919 --> 00:26:42,640
command but instead of

822
00:26:42,640 --> 00:26:44,000
passing in a particular binary the

823
00:26:44,000 --> 00:26:46,000
binary we're passing in is bin bash and

824
00:26:46,000 --> 00:26:47,919
then the arguments are tax c and then

825
00:26:47,919 --> 00:26:49,360
whatever the operator wants to execute

826
00:26:49,360 --> 00:26:50,880
with the shell command

827
00:26:50,880 --> 00:26:52,640
this is particularly useful if you need

828
00:26:52,640 --> 00:26:54,559
input and output redirection

829
00:26:54,559 --> 00:26:55,600
so if you look at the example on the

830
00:26:55,600 --> 00:26:57,679
right we have shell ls applications and

831
00:26:57,679 --> 00:26:59,360
then we're able to pipe that output to

832
00:26:59,360 --> 00:27:01,200
grep slack and then we return it with

833
00:27:01,200 --> 00:27:03,919
slack.app

834
00:27:04,400 --> 00:27:05,840
so here's kind of how the shell command

835
00:27:05,840 --> 00:27:07,200
works under the hood

836
00:27:07,200 --> 00:27:09,039
uh first we have that process object and

837
00:27:09,039 --> 00:27:11,919
that pipe object and then you

838
00:27:11,919 --> 00:27:13,760
set that you set up that process object

839
00:27:13,760 --> 00:27:15,440
by setting the executable url in this

840
00:27:15,440 --> 00:27:17,440
case we're kicking off bin bash and then

841
00:27:17,440 --> 00:27:19,520
for the arguments we're passing in taxi

842
00:27:19,520 --> 00:27:21,279
and then all of the arguments that the

843
00:27:21,279 --> 00:27:23,200
user or the operator wants to execute

844
00:27:23,200 --> 00:27:24,799
using the shell command

845
00:27:24,799 --> 00:27:26,960
we redirect standard output to our

846
00:27:26,960 --> 00:27:30,480
output pipe and then we run that process

847
00:27:30,480 --> 00:27:32,080
once that process is run the last

848
00:27:32,080 --> 00:27:33,600
command is what actually reads the data

849
00:27:33,600 --> 00:27:35,200
from the pipe and then we take that data

850
00:27:35,200 --> 00:27:36,320
and send it back up to the command and

851
00:27:36,320 --> 00:27:39,039
control server

852
00:27:39,440 --> 00:27:41,760
so binary and process execution is cool

853
00:27:41,760 --> 00:27:43,120
and all but what's even cooler is

854
00:27:43,120 --> 00:27:44,960
executing jxa or javascript for

855
00:27:44,960 --> 00:27:47,039
automation in memory

856
00:27:47,039 --> 00:27:48,799
this is achieved using the osa script

857
00:27:48,799 --> 00:27:50,480
class

858
00:27:50,480 --> 00:27:52,880
osa or osa and ososcript stands for open

859
00:27:52,880 --> 00:27:54,640
scripting architecture

860
00:27:54,640 --> 00:27:56,880
this includes languages such as jxa and

861
00:27:56,880 --> 00:27:58,320
applescript you can execute both of

862
00:27:58,320 --> 00:28:00,640
these languages in memory

863
00:28:00,640 --> 00:28:02,080
hermes implements this three different

864
00:28:02,080 --> 00:28:05,120
ways one is with the jxa command the jxa

865
00:28:05,120 --> 00:28:06,480
command will basically execute any

866
00:28:06,480 --> 00:28:08,080
arbitrary jxa

867
00:28:08,080 --> 00:28:09,760
and so if you look at the image

868
00:28:09,760 --> 00:28:11,600
i pass in math.pi and it returns a

869
00:28:11,600 --> 00:28:14,399
couple digits of pi

870
00:28:14,399 --> 00:28:16,640
more interestingly is the jx8 import

871
00:28:16,640 --> 00:28:18,720
command you can use the jxa import

872
00:28:18,720 --> 00:28:22,000
command to load jxa scripts into memory

873
00:28:22,000 --> 00:28:23,360
and this works very similar to the

874
00:28:23,360 --> 00:28:25,039
upload command that we went over earlier

875
00:28:25,039 --> 00:28:26,559
except instead of writing out the script

876
00:28:26,559 --> 00:28:28,159
to the target we store it with an

877
00:28:28,159 --> 00:28:31,200
implant memory for for later use

878
00:28:31,200 --> 00:28:32,480
once that script is stored within

879
00:28:32,480 --> 00:28:34,320
implant memory we can call various

880
00:28:34,320 --> 00:28:38,480
functionality within it using jxa call

881
00:28:38,480 --> 00:28:39,679
this way

882
00:28:39,679 --> 00:28:41,919
using jxa import in jxa call you can

883
00:28:41,919 --> 00:28:43,840
load up lots of third-party tooling and

884
00:28:43,840 --> 00:28:45,279
so if you look at the image on the right

885
00:28:45,279 --> 00:28:47,039
i'm loading up health inspector which is

886
00:28:47,039 --> 00:28:48,000
a kind of

887
00:28:48,000 --> 00:28:50,159
jxa tool into memory and then we're

888
00:28:50,159 --> 00:28:52,640
calling the all checks function

889
00:28:52,640 --> 00:28:54,480
and lots of mac os post exploitation

890
00:28:54,480 --> 00:28:56,159
tooling is written in jxa so this is

891
00:28:56,159 --> 00:28:58,000
very handy

892
00:28:58,000 --> 00:29:00,399
to have

893
00:29:00,480 --> 00:29:01,840
hermes has a few different ways to

894
00:29:01,840 --> 00:29:03,440
enumerate and interact with running

895
00:29:03,440 --> 00:29:04,799
processes

896
00:29:04,799 --> 00:29:06,640
using the ps command you can gather a

897
00:29:06,640 --> 00:29:08,640
list of running processes by parsing the

898
00:29:08,640 --> 00:29:10,399
k info proc struct

899
00:29:10,399 --> 00:29:12,399
from the assist control routine this

900
00:29:12,399 --> 00:29:14,720
will return all bsd processes including

901
00:29:14,720 --> 00:29:16,720
linux daemons

902
00:29:16,720 --> 00:29:19,840
next we have the list apps command

903
00:29:19,840 --> 00:29:21,360
oh this image totally got messed up

904
00:29:21,360 --> 00:29:23,279
sorry i don't know when that happened uh

905
00:29:23,279 --> 00:29:25,440
next we have the list apps command

906
00:29:25,440 --> 00:29:27,440
and that will return all applications

907
00:29:27,440 --> 00:29:29,120
running within carbon cocoa or classic

908
00:29:29,120 --> 00:29:30,960
environments and so this is basically

909
00:29:30,960 --> 00:29:32,320
all applications that you see in your

910
00:29:32,320 --> 00:29:34,880
dock things like slack zoom things like

911
00:29:34,880 --> 00:29:35,840
that

912
00:29:35,840 --> 00:29:37,520
what got covered up here was the last

913
00:29:37,520 --> 00:29:39,360
command which is kill

914
00:29:39,360 --> 00:29:41,279
for kill if you pass in a process id

915
00:29:41,279 --> 00:29:42,960
it'll basically kill that process using

916
00:29:42,960 --> 00:29:45,200
the kill system call

917
00:29:45,200 --> 00:29:46,399
in the image below you can see an

918
00:29:46,399 --> 00:29:49,120
example of the list apps output

919
00:29:49,120 --> 00:29:50,799
you can see that we have the name the

920
00:29:50,799 --> 00:29:52,880
bundle the size things like that

921
00:29:52,880 --> 00:29:54,640
if you click actions you can see

922
00:29:54,640 --> 00:29:56,159
additional information such as the full

923
00:29:56,159 --> 00:29:57,919
path to the binary

924
00:29:57,919 --> 00:29:59,360
additionally there's a browser script

925
00:29:59,360 --> 00:30:00,720
that exists that will highlight the

926
00:30:00,720 --> 00:30:02,559
front-most application so if the user is

927
00:30:02,559 --> 00:30:04,799
currently using zoom or slack that will

928
00:30:04,799 --> 00:30:06,799
be highlighted and presented to you and

929
00:30:06,799 --> 00:30:07,840
that kind of gives you additional

930
00:30:07,840 --> 00:30:09,520
context on what the end user is doing on

931
00:30:09,520 --> 00:30:12,480
their day-to-day basis

932
00:30:12,799 --> 00:30:14,320
so here's how the process browser looks

933
00:30:14,320 --> 00:30:16,480
like in mythic on the left side you have

934
00:30:16,480 --> 00:30:18,240
the process tree with most things as a

935
00:30:18,240 --> 00:30:20,480
child of launch d

936
00:30:20,480 --> 00:30:21,760
on the right side you have a bit more

937
00:30:21,760 --> 00:30:22,960
detail on the different running

938
00:30:22,960 --> 00:30:25,120
processes you have things like process

939
00:30:25,120 --> 00:30:27,919
id parent process id architecture

940
00:30:27,919 --> 00:30:30,640
process name and process owner

941
00:30:30,640 --> 00:30:32,559
if you click actions on that right view

942
00:30:32,559 --> 00:30:34,480
you can do things such as kill the

943
00:30:34,480 --> 00:30:36,559
process as well

944
00:30:36,559 --> 00:30:37,919
an interesting feature that i haven't

945
00:30:37,919 --> 00:30:39,440
shown here is that you can actually

946
00:30:39,440 --> 00:30:41,039
issue a new process listing from this

947
00:30:41,039 --> 00:30:42,799
view and you can actually diff between

948
00:30:42,799 --> 00:30:44,880
the old and new process listing to see

949
00:30:44,880 --> 00:30:46,960
old processes that have died and new

950
00:30:46,960 --> 00:30:48,799
processes that have started over time

951
00:30:48,799 --> 00:30:50,000
and this just gives you additional

952
00:30:50,000 --> 00:30:52,799
context on um yeah like what the

953
00:30:52,799 --> 00:30:56,158
operating system is doing over time

954
00:30:56,960 --> 00:30:58,480
so hermes also has the ability to take

955
00:30:58,480 --> 00:30:59,919
screenshots of what the end user is

956
00:30:59,919 --> 00:31:00,880
doing

957
00:31:00,880 --> 00:31:02,320
it should be noted that this requires

958
00:31:02,320 --> 00:31:03,919
the screen recording permission within

959
00:31:03,919 --> 00:31:06,000
tcc

960
00:31:06,000 --> 00:31:07,600
if you do not have this permission the

961
00:31:07,600 --> 00:31:09,200
user may be prompted to allow your

962
00:31:09,200 --> 00:31:10,640
application permission and this can

963
00:31:10,640 --> 00:31:12,559
potentially blow your operation

964
00:31:12,559 --> 00:31:14,320
or if they have denied it in the past

965
00:31:14,320 --> 00:31:15,760
you will get you will get a screenshot

966
00:31:15,760 --> 00:31:16,960
back but it's going to be an empty

967
00:31:16,960 --> 00:31:18,640
desktop with no applications and no

968
00:31:18,640 --> 00:31:21,440
windows not very useful

969
00:31:21,440 --> 00:31:23,360
screenshot works using the core graphics

970
00:31:23,360 --> 00:31:25,760
api it does this by performing a screen

971
00:31:25,760 --> 00:31:28,399
capture of all the different displays

972
00:31:28,399 --> 00:31:30,480
first you call cg get active display

973
00:31:30,480 --> 00:31:32,720
list this will return the number of

974
00:31:32,720 --> 00:31:34,480
active displays so if you have a laptop

975
00:31:34,480 --> 00:31:35,919
that'll be one if you have a laptop and

976
00:31:35,919 --> 00:31:37,679
monitor there'll be two so on and so

977
00:31:37,679 --> 00:31:38,799
forth

978
00:31:38,799 --> 00:31:40,559
you pass in this number to cg get active

979
00:31:40,559 --> 00:31:42,640
display list again this will return a

980
00:31:42,640 --> 00:31:44,480
list of active displays that you can

981
00:31:44,480 --> 00:31:46,399
actually iterate through

982
00:31:46,399 --> 00:31:47,600
once you have that list of active

983
00:31:47,600 --> 00:31:49,279
displays you can loop through those

984
00:31:49,279 --> 00:31:51,279
displays and grab an image with cg

985
00:31:51,279 --> 00:31:53,840
display create image

986
00:31:53,840 --> 00:31:55,440
these images are sent up to the mythic

987
00:31:55,440 --> 00:31:57,279
command control server in normal c2

988
00:31:57,279 --> 00:31:58,880
traffic and then they're displayed to

989
00:31:58,880 --> 00:32:00,399
the operator

990
00:32:00,399 --> 00:32:01,600
screenshot is great because you can

991
00:32:01,600 --> 00:32:03,200
gather additional context on what the

992
00:32:03,200 --> 00:32:04,640
user might be doing on a day-to-day

993
00:32:04,640 --> 00:32:07,039
basis

994
00:32:08,080 --> 00:32:10,080
hermes also has a clipboard monitor to

995
00:32:10,080 --> 00:32:11,679
perform clipboard

996
00:32:11,679 --> 00:32:13,600
also has a clipboard command to perform

997
00:32:13,600 --> 00:32:15,120
clipboard monitoring

998
00:32:15,120 --> 00:32:16,799
and this works by monitoring the change

999
00:32:16,799 --> 00:32:18,799
count property within the nspaceboard

1000
00:32:18,799 --> 00:32:19,760
class

1001
00:32:19,760 --> 00:32:21,440
if that number increases we know that

1002
00:32:21,440 --> 00:32:23,440
clipboard ownership has changed and that

1003
00:32:23,440 --> 00:32:24,640
something new has been copied to the

1004
00:32:24,640 --> 00:32:27,039
clipboard and to retrieve it

1005
00:32:27,039 --> 00:32:28,880
unfortunately there's no clipboard event

1006
00:32:28,880 --> 00:32:30,320
that we can kind of listen for so we

1007
00:32:30,320 --> 00:32:31,840
have to resort to this very primitive

1008
00:32:31,840 --> 00:32:33,679
polling

1009
00:32:33,679 --> 00:32:35,200
it should be noted that root does not

1010
00:32:35,200 --> 00:32:37,039
have access to the general pasteboard

1011
00:32:37,039 --> 00:32:38,720
and so if you've landed in a privileged

1012
00:32:38,720 --> 00:32:40,320
context you actually don't have the

1013
00:32:40,320 --> 00:32:43,360
ability to access the system clipboard

1014
00:32:43,360 --> 00:32:44,720
clipboard monitoring is particularly

1015
00:32:44,720 --> 00:32:46,320
great for things like password managers

1016
00:32:46,320 --> 00:32:47,600
because if people are copying pasting

1017
00:32:47,600 --> 00:32:49,039
passwords from the password managers you

1018
00:32:49,039 --> 00:32:51,440
can easily nab them using this

1019
00:32:51,440 --> 00:32:52,960
it can net your credentials or just give

1020
00:32:52,960 --> 00:32:54,799
you more context on what the end user is

1021
00:32:54,799 --> 00:32:56,240
copying so like maybe they're copying

1022
00:32:56,240 --> 00:32:59,679
internal links things like that

1023
00:33:00,640 --> 00:33:02,399
hermes has lots of built-in situational

1024
00:33:02,399 --> 00:33:04,080
awareness commands and safety checks for

1025
00:33:04,080 --> 00:33:05,600
macos

1026
00:33:05,600 --> 00:33:07,200
most of these safety checks are inspired

1027
00:33:07,200 --> 00:33:09,120
by cedric owens awesome research so

1028
00:33:09,120 --> 00:33:10,320
definitely check him out if you get the

1029
00:33:10,320 --> 00:33:11,840
chance i've linked a lot of his work in

1030
00:33:11,840 --> 00:33:13,519
the references

1031
00:33:13,519 --> 00:33:14,880
the first one i want to talk about is

1032
00:33:14,880 --> 00:33:17,279
get execution context this will read

1033
00:33:17,279 --> 00:33:18,640
various environment variables to

1034
00:33:18,640 --> 00:33:21,120
determine your execution context and so

1035
00:33:21,120 --> 00:33:22,480
reading environment variables we're able

1036
00:33:22,480 --> 00:33:23,840
to determine if we're running in a

1037
00:33:23,840 --> 00:33:25,840
terminal context if we were kicked off

1038
00:33:25,840 --> 00:33:27,440
from an application bundle or an

1039
00:33:27,440 --> 00:33:29,600
installer package

1040
00:33:29,600 --> 00:33:31,120
the next situational awareness check i

1041
00:33:31,120 --> 00:33:33,039
want to talk about is fda check or full

1042
00:33:33,039 --> 00:33:34,640
disk access check

1043
00:33:34,640 --> 00:33:36,240
this will check if our current process

1044
00:33:36,240 --> 00:33:38,000
has full disk access permissions and

1045
00:33:38,000 --> 00:33:40,080
there are two methods of doing this

1046
00:33:40,080 --> 00:33:42,799
the first is using the md query api

1047
00:33:42,799 --> 00:33:44,960
the md query api can be used to

1048
00:33:44,960 --> 00:33:47,440
determine if the tcc database exists

1049
00:33:47,440 --> 00:33:50,159
within the spotlight database

1050
00:33:50,159 --> 00:33:52,480
basically if spotlight has if spotlight

1051
00:33:52,480 --> 00:33:54,880
has indexed the tccdb then we know we

1052
00:33:54,880 --> 00:33:57,279
have full disk access permissions

1053
00:33:57,279 --> 00:33:59,120
the second method

1054
00:33:59,120 --> 00:34:01,360
is the file handle method in this case

1055
00:34:01,360 --> 00:34:02,880
hermes will attempt to open up a file

1056
00:34:02,880 --> 00:34:05,760
handle to the user's tcc database

1057
00:34:05,760 --> 00:34:08,480
if that file handle is returned properly

1058
00:34:08,480 --> 00:34:09,839
that means we have full disk access

1059
00:34:09,839 --> 00:34:12,079
permissions if it does not then we do

1060
00:34:12,079 --> 00:34:13,599
not

1061
00:34:13,599 --> 00:34:14,879
the next thing i want to talk about is

1062
00:34:14,879 --> 00:34:16,719
tcc folder checker

1063
00:34:16,719 --> 00:34:19,520
this uses the md query apis to check for

1064
00:34:19,520 --> 00:34:21,760
access to tcc protected folders such as

1065
00:34:21,760 --> 00:34:24,560
desktop documents and downloads

1066
00:34:24,560 --> 00:34:26,800
very similarly to the fda check if we

1067
00:34:26,800 --> 00:34:28,320
identify the desktop documents and

1068
00:34:28,320 --> 00:34:29,679
downloads folder

1069
00:34:29,679 --> 00:34:31,359
within the

1070
00:34:31,359 --> 00:34:33,359
within that mdquery api

1071
00:34:33,359 --> 00:34:34,800
then that means we have access to those

1072
00:34:34,800 --> 00:34:37,599
tcc protected folders

1073
00:34:37,599 --> 00:34:38,960
the last kind of check we have is the

1074
00:34:38,960 --> 00:34:40,399
accessibility check

1075
00:34:40,399 --> 00:34:43,199
this uses the ax is process trusted to

1076
00:34:43,199 --> 00:34:45,199
check for accessibility permissions big

1077
00:34:45,199 --> 00:34:46,719
shout out to dazzle spy malware which

1078
00:34:46,719 --> 00:34:48,719
kind of introduced me to this technique

1079
00:34:48,719 --> 00:34:50,560
and my co-worker chris ross who

1080
00:34:50,560 --> 00:34:51,599
basically reverse engineered that

1081
00:34:51,599 --> 00:34:53,440
malware and identified the safety check

1082
00:34:53,440 --> 00:34:55,760
and so i was able to add it to hermes

1083
00:34:55,760 --> 00:34:57,680
and the last thing is being able to

1084
00:34:57,680 --> 00:35:00,000
enumerate the tcc database you can do

1085
00:35:00,000 --> 00:35:03,119
this using list tcc a list tcc will list

1086
00:35:03,119 --> 00:35:05,200
out all the entries in a specified tcc

1087
00:35:05,200 --> 00:35:06,320
database

1088
00:35:06,320 --> 00:35:07,839
this requires full disk access

1089
00:35:07,839 --> 00:35:09,920
permissions to read from that sqlite

1090
00:35:09,920 --> 00:35:11,440
database

1091
00:35:11,440 --> 00:35:13,680
the tcc database schema changes over

1092
00:35:13,680 --> 00:35:15,119
time and so this command currently

1093
00:35:15,119 --> 00:35:17,119
supports big sur and above so big sur

1094
00:35:17,119 --> 00:35:19,760
and monterey

1095
00:35:21,040 --> 00:35:22,800
here i want to talk about how hermes can

1096
00:35:22,800 --> 00:35:25,040
enumerate p-list files if you come from

1097
00:35:25,040 --> 00:35:27,119
a windows background p-list files on mac

1098
00:35:27,119 --> 00:35:28,640
os are very similar to the windows

1099
00:35:28,640 --> 00:35:29,680
registry

1100
00:35:29,680 --> 00:35:31,599
they serve as configuration files for

1101
00:35:31,599 --> 00:35:33,200
applications as well as parts of the

1102
00:35:33,200 --> 00:35:34,720
operating system

1103
00:35:34,720 --> 00:35:37,280
they can be of the format xml json or

1104
00:35:37,280 --> 00:35:38,800
binary

1105
00:35:38,800 --> 00:35:40,640
using the property list serialization

1106
00:35:40,640 --> 00:35:42,640
class we're able to parse any type of

1107
00:35:42,640 --> 00:35:44,320
plist

1108
00:35:44,320 --> 00:35:46,320
in the image below i show the universal

1109
00:35:46,320 --> 00:35:48,960
access auth warning plist and this is a

1110
00:35:48,960 --> 00:35:50,800
particularly interesting p-list because

1111
00:35:50,800 --> 00:35:52,480
it shows us any application that has

1112
00:35:52,480 --> 00:35:54,400
caused a prompt before

1113
00:35:54,400 --> 00:35:56,000
and so this may give us insight into

1114
00:35:56,000 --> 00:35:57,920
what applications are used by the user

1115
00:35:57,920 --> 00:36:00,160
that may have triggered a tcc prompt and

1116
00:36:00,160 --> 00:36:01,599
potentially have interesting tcc

1117
00:36:01,599 --> 00:36:04,480
permissions and this this is a method of

1118
00:36:04,480 --> 00:36:06,800
potentially enumerating tcc permissions

1119
00:36:06,800 --> 00:36:10,160
without triggering any prompts

1120
00:36:10,880 --> 00:36:12,560
hermes has the ability to enumerate and

1121
00:36:12,560 --> 00:36:14,240
interact with with all the environment

1122
00:36:14,240 --> 00:36:16,160
variables you can list out environment

1123
00:36:16,160 --> 00:36:18,640
variables using the env command

1124
00:36:18,640 --> 00:36:20,160
and this how this works is by reading

1125
00:36:20,160 --> 00:36:22,079
the environment field within the process

1126
00:36:22,079 --> 00:36:23,440
info class

1127
00:36:23,440 --> 00:36:25,440
you can also set and unset environment

1128
00:36:25,440 --> 00:36:28,480
variables using set end and unset end

1129
00:36:28,480 --> 00:36:29,920
these just use the darwin standard

1130
00:36:29,920 --> 00:36:31,280
library

1131
00:36:31,280 --> 00:36:32,640
it should be noted that if you try to

1132
00:36:32,640 --> 00:36:33,920
set an environment variable that

1133
00:36:33,920 --> 00:36:35,839
currently exists you will overwrite it

1134
00:36:35,839 --> 00:36:40,279
so just something to be careful of

1135
00:36:40,560 --> 00:36:41,920
in this last section i want to talk

1136
00:36:41,920 --> 00:36:43,359
about how we can detect some of the

1137
00:36:43,359 --> 00:36:45,040
different ttps we went over within

1138
00:36:45,040 --> 00:36:47,040
hermes using apple's endpoint security

1139
00:36:47,040 --> 00:36:49,520
framework

1140
00:36:50,560 --> 00:36:51,599
here we're going to talk about apple's

1141
00:36:51,599 --> 00:36:53,359
endpoint security framework if you're

1142
00:36:53,359 --> 00:36:55,200
familiar with windows think of

1143
00:36:55,200 --> 00:36:57,359
event tracing for windows

1144
00:36:57,359 --> 00:36:59,200
as of big sur apple pushed all

1145
00:36:59,200 --> 00:37:01,040
third-party developers out of the kernel

1146
00:37:01,040 --> 00:37:03,200
and so this included security products

1147
00:37:03,200 --> 00:37:04,960
and so this puts security products and

1148
00:37:04,960 --> 00:37:06,560
security researchers on the same playing

1149
00:37:06,560 --> 00:37:09,599
field we had access to the same data

1150
00:37:09,599 --> 00:37:11,359
using esf you can hook into various

1151
00:37:11,359 --> 00:37:13,599
events such as process events file

1152
00:37:13,599 --> 00:37:16,240
events as well as memory events

1153
00:37:16,240 --> 00:37:17,680
there are several free and open source

1154
00:37:17,680 --> 00:37:19,280
tools that leverage

1155
00:37:19,280 --> 00:37:21,920
apple's esf some of them include atmon

1156
00:37:21,920 --> 00:37:24,079
by exoria crescendo by super hacker

1157
00:37:24,079 --> 00:37:26,000
steve and file and process monitor by

1158
00:37:26,000 --> 00:37:27,520
patrick wardle

1159
00:37:27,520 --> 00:37:29,280
we'll be using crescendo as well as file

1160
00:37:29,280 --> 00:37:31,359
monitor to kind of identify malicious

1161
00:37:31,359 --> 00:37:33,839
activity

1162
00:37:34,560 --> 00:37:36,000
so here's an example of how we can

1163
00:37:36,000 --> 00:37:38,560
detect shell commands with hermes

1164
00:37:38,560 --> 00:37:40,400
so on the left side we're running shell

1165
00:37:40,400 --> 00:37:44,400
ls tac lih from the mythic server

1166
00:37:44,400 --> 00:37:45,599
on the

1167
00:37:45,599 --> 00:37:47,520
on the endpoint side we see that a

1168
00:37:47,520 --> 00:37:50,240
process process exec event fires within

1169
00:37:50,240 --> 00:37:51,520
crescendo

1170
00:37:51,520 --> 00:37:53,440
you have various information such as the

1171
00:37:53,440 --> 00:37:55,359
timestamp that occurred the arguments

1172
00:37:55,359 --> 00:37:56,400
that occurred

1173
00:37:56,400 --> 00:37:58,720
the process that performed the process

1174
00:37:58,720 --> 00:37:59,920
exec

1175
00:37:59,920 --> 00:38:01,839
the username process id parent process

1176
00:38:01,839 --> 00:38:04,560
id things like that that can age your

1177
00:38:04,560 --> 00:38:05,839
investigation

1178
00:38:05,839 --> 00:38:07,040
and so this is one way of kind of

1179
00:38:07,040 --> 00:38:09,040
detecting shell commands run through an

1180
00:38:09,040 --> 00:38:11,440
implant

1181
00:38:11,920 --> 00:38:13,520
so before i talk about how we can detect

1182
00:38:13,520 --> 00:38:14,720
launch agents i just want to give a

1183
00:38:14,720 --> 00:38:16,320
quick primer on what launch agents are

1184
00:38:16,320 --> 00:38:19,280
on macos launch agents are a background

1185
00:38:19,280 --> 00:38:20,800
process that launches whenever a user

1186
00:38:20,800 --> 00:38:21,839
logs in

1187
00:38:21,839 --> 00:38:23,440
think of this like the startup folder on

1188
00:38:23,440 --> 00:38:25,280
windows

1189
00:38:25,280 --> 00:38:26,880
launch agents are defined with a

1190
00:38:26,880 --> 00:38:28,640
property list file or a plist file in

1191
00:38:28,640 --> 00:38:30,240
the following locations

1192
00:38:30,240 --> 00:38:32,560
library launch agents uh users username

1193
00:38:32,560 --> 00:38:34,320
library launch agents and system library

1194
00:38:34,320 --> 00:38:35,680
launch agents

1195
00:38:35,680 --> 00:38:38,320
the third one is protected by sip or

1196
00:38:38,320 --> 00:38:39,920
system integrity protection so it's less

1197
00:38:39,920 --> 00:38:41,200
of a concern most of the time an

1198
00:38:41,200 --> 00:38:42,480
attacker won't be able to write to that

1199
00:38:42,480 --> 00:38:45,119
file or that directory sorry

1200
00:38:45,119 --> 00:38:46,320
launch agents are great because the

1201
00:38:46,320 --> 00:38:47,520
attackers can utilize this for

1202
00:38:47,520 --> 00:38:50,160
persistence

1203
00:38:50,720 --> 00:38:52,160
so this is an example of what a

1204
00:38:52,160 --> 00:38:54,079
malicious launch agent might look like

1205
00:38:54,079 --> 00:38:56,320
this is in the form of xml

1206
00:38:56,320 --> 00:38:57,599
you'll see that there's this program

1207
00:38:57,599 --> 00:38:59,839
arguments key and then the program

1208
00:38:59,839 --> 00:39:02,640
arguments key has the value slash temp

1209
00:39:02,640 --> 00:39:05,200
hermes so if we place this plist file

1210
00:39:05,200 --> 00:39:07,119
into one of those directories from the

1211
00:39:07,119 --> 00:39:09,280
previous slide every time the user logs

1212
00:39:09,280 --> 00:39:11,839
in the program slash temp hermes will be

1213
00:39:11,839 --> 00:39:14,839
executed

1214
00:39:15,119 --> 00:39:17,359
so how can we potentially detect this

1215
00:39:17,359 --> 00:39:18,880
so on the left side we're uploading a

1216
00:39:18,880 --> 00:39:21,280
malicious launch agent to target

1217
00:39:21,280 --> 00:39:24,800
we're uploading that com.hermes.plist

1218
00:39:24,800 --> 00:39:26,079
to one of the

1219
00:39:26,079 --> 00:39:28,720
launch agent directories on the right

1220
00:39:28,720 --> 00:39:31,839
side this file um file create event

1221
00:39:31,839 --> 00:39:33,920
occurs within crescendo

1222
00:39:33,920 --> 00:39:35,920
the file create event um tracks

1223
00:39:35,920 --> 00:39:37,520
information such as the process that

1224
00:39:37,520 --> 00:39:39,760
performed the file create the time stamp

1225
00:39:39,760 --> 00:39:42,640
process id parent process id and that

1226
00:39:42,640 --> 00:39:44,079
various information

1227
00:39:44,079 --> 00:39:45,520
and so if we kind of did

1228
00:39:45,520 --> 00:39:47,359
if we kind of look for

1229
00:39:47,359 --> 00:39:48,560
file creation events within these

1230
00:39:48,560 --> 00:39:50,160
directories we can potentially detect

1231
00:39:50,160 --> 00:39:53,520
any launch agents that are created

1232
00:39:54,839 --> 00:39:56,880
now here i want to go over how we can

1233
00:39:56,880 --> 00:39:58,960
detect the fda check command or the full

1234
00:39:58,960 --> 00:40:01,040
disk access check command

1235
00:40:01,040 --> 00:40:02,960
um on the left side we're running the

1236
00:40:02,960 --> 00:40:06,880
fda check command with the file handle

1237
00:40:06,880 --> 00:40:08,400
with the file handle technique and

1238
00:40:08,400 --> 00:40:10,079
remember the file handle technique opens

1239
00:40:10,079 --> 00:40:13,119
up a file handle to the user's tcc

1240
00:40:13,119 --> 00:40:15,680
database

1241
00:40:15,680 --> 00:40:17,760
on the right side we use file monitor to

1242
00:40:17,760 --> 00:40:20,160
detect this activity

1243
00:40:20,160 --> 00:40:23,359
basically this es event type notify open

1244
00:40:23,359 --> 00:40:25,200
event occurs every time file handles are

1245
00:40:25,200 --> 00:40:27,599
opened so if we look for these file

1246
00:40:27,599 --> 00:40:29,200
handles being opened we can potentially

1247
00:40:29,200 --> 00:40:32,240
detect this type of post exploitation

1248
00:40:32,240 --> 00:40:33,920
it records various information such as

1249
00:40:33,920 --> 00:40:34,800
the

1250
00:40:34,800 --> 00:40:37,520
proc the process that performed that

1251
00:40:37,520 --> 00:40:39,920
file handle open the time stamp and

1252
00:40:39,920 --> 00:40:43,119
various information like that

1253
00:40:44,240 --> 00:40:45,520
that pretty much wraps up the defensive

1254
00:40:45,520 --> 00:40:47,359
portion i just want to go last slide is

1255
00:40:47,359 --> 00:40:49,359
kind of just how to install hermes if

1256
00:40:49,359 --> 00:40:50,960
you want to go out and sell hermes first

1257
00:40:50,960 --> 00:40:52,560
you'll have to install mythic mythic is

1258
00:40:52,560 --> 00:40:54,560
the command control server from github

1259
00:40:54,560 --> 00:40:56,720
on ubuntu 20.10 you're going to install

1260
00:40:56,720 --> 00:40:58,720
the darling kernel module which is how

1261
00:40:58,720 --> 00:41:00,800
we perform that cross compilation

1262
00:41:00,800 --> 00:41:02,560
from github as well and then you're

1263
00:41:02,560 --> 00:41:04,160
going to load up that kernel module

1264
00:41:04,160 --> 00:41:07,040
using modprobe darling-mock

1265
00:41:07,040 --> 00:41:08,560
once that kernel module is loaded you

1266
00:41:08,560 --> 00:41:09,680
can install

1267
00:41:09,680 --> 00:41:11,680
hermes from github using the mythic cli

1268
00:41:11,680 --> 00:41:13,680
and this is included in the mythic repo

1269
00:41:13,680 --> 00:41:15,040
and then from the mythic cli you can

1270
00:41:15,040 --> 00:41:17,760
also start up the payload container and

1271
00:41:17,760 --> 00:41:19,839
if all goes well in your mythic instance

1272
00:41:19,839 --> 00:41:20,960
you'll be able to go to the payload

1273
00:41:20,960 --> 00:41:22,480
section and see hermes with a little

1274
00:41:22,480 --> 00:41:25,359
green kind of box or circle showing that

1275
00:41:25,359 --> 00:41:27,040
the docker container is up and running

1276
00:41:27,040 --> 00:41:29,599
successfully

1277
00:41:29,920 --> 00:41:32,560
here are kind of some various references

1278
00:41:32,560 --> 00:41:34,560
that i refer to in my presentation um

1279
00:41:34,560 --> 00:41:35,920
give it a time for people to screenshot

1280
00:41:35,920 --> 00:41:38,319
or whatever

1281
00:41:39,760 --> 00:41:41,680
and that's pretty much it uh i just want

1282
00:41:41,680 --> 00:41:43,680
to give a big shout out to uh cody

1283
00:41:43,680 --> 00:41:45,280
thomas or the developer of mythic it's a

1284
00:41:45,280 --> 00:41:46,640
feature who helped me endlessly when i

1285
00:41:46,640 --> 00:41:48,319
ran into bugs during development on the

1286
00:41:48,319 --> 00:41:50,319
agent side as well as the

1287
00:41:50,319 --> 00:41:52,079
server side big thanks to my old

1288
00:41:52,079 --> 00:41:53,359
co-worker brian for the awesome tony

1289
00:41:53,359 --> 00:41:54,720
hawk pro skater 2 photoshop that i

1290
00:41:54,720 --> 00:41:56,480
basically use everywhere

1291
00:41:56,480 --> 00:41:58,000
thank you besides sf for allowing me to

1292
00:41:58,000 --> 00:41:59,200
share my work and then thank you for

1293
00:41:59,200 --> 00:42:00,400
coming and listening really appreciate

1294
00:42:00,400 --> 00:42:01,800
your time

1295
00:42:01,800 --> 00:42:04,480
[Applause]

1296
00:42:04,480 --> 00:42:07,639
[Music]

1297
00:42:07,839 --> 00:42:10,160
all right we have a bunch of time for

1298
00:42:10,160 --> 00:42:12,560
questions so if you have any questions

1299
00:42:12,560 --> 00:42:13,920
raise your hand or you can submit on

1300
00:42:13,920 --> 00:42:15,280
slido.com

1301
00:42:15,280 --> 00:42:18,839
besides sf2022

1302
00:42:18,960 --> 00:42:21,839
any questions out there

1303
00:42:22,400 --> 00:42:25,880
question in the back

1304
00:42:41,119 --> 00:42:42,640
yeah so

1305
00:42:42,640 --> 00:42:45,119
um the current kind of c2 traffic that

1306
00:42:45,119 --> 00:42:47,040
hermes implements is all using http or

1307
00:42:47,040 --> 00:42:50,240
issued ps traffic and so depending on

1308
00:42:50,240 --> 00:42:52,160
how the attacker masks that traffic

1309
00:42:52,160 --> 00:42:53,520
potentially using domain fronting or

1310
00:42:53,520 --> 00:42:56,000
like cooking legitimate domains um it

1311
00:42:56,000 --> 00:42:57,839
would look like that i guess potentially

1312
00:42:57,839 --> 00:42:59,760
you could detect anomalies if you have

1313
00:42:59,760 --> 00:43:02,400
um really good network data on like this

1314
00:43:02,400 --> 00:43:03,680
domain has never been reached out to

1315
00:43:03,680 --> 00:43:05,280
before uh et cetera et cetera and

1316
00:43:05,280 --> 00:43:09,560
potentially like catch those anomalies

1317
00:43:15,920 --> 00:43:17,920
yeah that's a great question oftentimes

1318
00:43:17,920 --> 00:43:19,520
these detections can be more difficult

1319
00:43:19,520 --> 00:43:20,800
to scale up because these events are

1320
00:43:20,800 --> 00:43:22,880
happening uh very frequently you'll have

1321
00:43:22,880 --> 00:43:25,359
to combine the file create events with

1322
00:43:25,359 --> 00:43:27,200
other kind of detection logic to really

1323
00:43:27,200 --> 00:43:28,480
nail in on this

1324
00:43:28,480 --> 00:43:30,960
activity

1325
00:43:31,440 --> 00:43:33,599
thank you

1326
00:43:33,599 --> 00:43:36,400
any other questions

1327
00:43:36,400 --> 00:43:39,400
sure

1328
00:43:42,240 --> 00:43:43,920
that's a great question i call it a tre

1329
00:43:43,920 --> 00:43:44,800
flip

1330
00:43:44,800 --> 00:43:47,280
i love it

1331
00:43:48,240 --> 00:43:49,280
nice

1332
00:43:49,280 --> 00:43:51,680
thank you

1333
00:43:52,160 --> 00:43:55,640
thanks again everyone

