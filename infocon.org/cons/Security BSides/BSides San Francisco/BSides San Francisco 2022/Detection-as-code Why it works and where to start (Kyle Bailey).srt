1
00:00:01,199 --> 00:00:03,040
all right hello everybody

2
00:00:03,040 --> 00:00:05,200
can't hear me okay

3
00:00:05,200 --> 00:00:06,160
sweet

4
00:00:06,160 --> 00:00:08,560
um

5
00:00:09,040 --> 00:00:10,639
really cool to be doing this in person

6
00:00:10,639 --> 00:00:12,160
again it's been a long time so i

7
00:00:12,160 --> 00:00:14,080
appreciate everybody coming out uh this

8
00:00:14,080 --> 00:00:15,839
is pretty this is pretty cool to do this

9
00:00:15,839 --> 00:00:18,880
in a theater as well

10
00:00:18,880 --> 00:00:20,880
so my name's kyle i've been doing threat

11
00:00:20,880 --> 00:00:22,640
detection and incident response for

12
00:00:22,640 --> 00:00:24,320
about the last 10 years

13
00:00:24,320 --> 00:00:26,000
i've been doing it in all sorts of

14
00:00:26,000 --> 00:00:27,519
venues from

15
00:00:27,519 --> 00:00:30,480
cyber command in the us air force to

16
00:00:30,480 --> 00:00:33,200
the tech industry most recently at box

17
00:00:33,200 --> 00:00:34,640
building and managing the detection

18
00:00:34,640 --> 00:00:36,000
engineering team

19
00:00:36,000 --> 00:00:37,280
there

20
00:00:37,280 --> 00:00:40,000
i currently work at panther labs as a

21
00:00:40,000 --> 00:00:41,840
security engineer

22
00:00:41,840 --> 00:00:43,280
i've been there been there about a year

23
00:00:43,280 --> 00:00:45,680
or so so we are a sim vendor so i want

24
00:00:45,680 --> 00:00:47,840
to just like start with this disclaimer

25
00:00:47,840 --> 00:00:50,000
this is not a like vendor pitch by any

26
00:00:50,000 --> 00:00:52,399
means uh detectionist code is one of

27
00:00:52,399 --> 00:00:55,120
those uh sort of core concepts in threat

28
00:00:55,120 --> 00:00:56,480
detection and threat detection

29
00:00:56,480 --> 00:00:58,879
management where you know you can apply

30
00:00:58,879 --> 00:01:00,719
it to sort of any tech tech stack that

31
00:01:00,719 --> 00:01:01,760
you have

32
00:01:01,760 --> 00:01:03,840
uh in your environment there's maybe

33
00:01:03,840 --> 00:01:05,438
like five to ten percent of this that

34
00:01:05,438 --> 00:01:09,520
will get a little uh tool specific but

35
00:01:09,520 --> 00:01:11,360
i don't want uh i don't want this to

36
00:01:11,360 --> 00:01:12,799
become a vendor pitch and it's not going

37
00:01:12,799 --> 00:01:14,799
to be

38
00:01:14,799 --> 00:01:16,880
so why are we talking about this so if

39
00:01:16,880 --> 00:01:19,040
you've been in the threat detection or

40
00:01:19,040 --> 00:01:20,479
incident response landscape you've

41
00:01:20,479 --> 00:01:22,080
probably seen this term before it's

42
00:01:22,080 --> 00:01:23,040
probably not the first time you're

43
00:01:23,040 --> 00:01:24,479
seeing it

44
00:01:24,479 --> 00:01:26,640
in the last three or four years or so

45
00:01:26,640 --> 00:01:27,920
we've had

46
00:01:27,920 --> 00:01:30,640
uh you know industry practitioners uh

47
00:01:30,640 --> 00:01:34,159
thought leaders and vendors starting to

48
00:01:34,159 --> 00:01:36,079
talk about detectionist code should we

49
00:01:36,079 --> 00:01:38,320
do it does it matter yes we need to do

50
00:01:38,320 --> 00:01:39,840
it

51
00:01:39,840 --> 00:01:41,600
like use my product to do it that kind

52
00:01:41,600 --> 00:01:42,720
of thing

53
00:01:42,720 --> 00:01:44,079
and then more recently we've seen

54
00:01:44,079 --> 00:01:45,680
practitioners security engineers and

55
00:01:45,680 --> 00:01:48,079
analysts start to say like hey here's

56
00:01:48,079 --> 00:01:49,520
how this works in my environment and

57
00:01:49,520 --> 00:01:51,600
here's how it helped me

58
00:01:51,600 --> 00:01:53,600
and i have the same experience at box

59
00:01:53,600 --> 00:01:55,439
and i want to share that with you

60
00:01:55,439 --> 00:01:56,479
and so

61
00:01:56,479 --> 00:01:58,079
um

62
00:01:58,079 --> 00:01:59,600
really what's i mean like what's been

63
00:01:59,600 --> 00:02:00,880
changing over the last four to five

64
00:02:00,880 --> 00:02:02,159
years right so

65
00:02:02,159 --> 00:02:04,479
uh threat detection or detection

66
00:02:04,479 --> 00:02:06,719
engineering five years ago

67
00:02:06,719 --> 00:02:08,720
uh was was a pretty specialized field

68
00:02:08,720 --> 00:02:10,318
you had to be at a pretty big security

69
00:02:10,318 --> 00:02:12,319
company or a company with a pretty big

70
00:02:12,319 --> 00:02:14,319
security team uh and maybe a pretty

71
00:02:14,319 --> 00:02:15,520
advanced security team to have a

72
00:02:15,520 --> 00:02:18,319
dedicated uh threat detection function

73
00:02:18,319 --> 00:02:19,760
and then over the last four or five

74
00:02:19,760 --> 00:02:21,599
years we've started to see

75
00:02:21,599 --> 00:02:23,120
you know a lot more detection

76
00:02:23,120 --> 00:02:24,720
engineering posts on linkedin people

77
00:02:24,720 --> 00:02:27,440
looking for detection engineers

78
00:02:27,440 --> 00:02:29,760
smaller companies or companies security

79
00:02:29,760 --> 00:02:31,840
teams of any size building out threat

80
00:02:31,840 --> 00:02:33,599
detection functions

81
00:02:33,599 --> 00:02:35,120
because of the importance of riding

82
00:02:35,120 --> 00:02:36,959
threat detection specific to your

83
00:02:36,959 --> 00:02:38,720
environment right and having the ability

84
00:02:38,720 --> 00:02:39,920
to

85
00:02:39,920 --> 00:02:42,000
build and maintain that detection logic

86
00:02:42,000 --> 00:02:44,400
that's very specific to how your company

87
00:02:44,400 --> 00:02:48,080
works or how your product's built

88
00:02:48,239 --> 00:02:49,360
so

89
00:02:49,360 --> 00:02:51,840
why are we like okay great all that's

90
00:02:51,840 --> 00:02:53,519
happening but like why

91
00:02:53,519 --> 00:02:55,680
and this is like the most profound slide

92
00:02:55,680 --> 00:02:57,920
of my entire presentation is because

93
00:02:57,920 --> 00:03:00,000
it's hard right anybody who's done it

94
00:03:00,000 --> 00:03:02,400
knows that and and when i specifically

95
00:03:02,400 --> 00:03:04,959
wrote this term i was thinking writing

96
00:03:04,959 --> 00:03:06,560
the content is hard it's hard to

97
00:03:06,560 --> 00:03:08,400
research the threat it's hard to

98
00:03:08,400 --> 00:03:10,959
understand how i see that in a log it's

99
00:03:10,959 --> 00:03:12,560
hard to understand

100
00:03:12,560 --> 00:03:14,560
you know how to write the logic so that

101
00:03:14,560 --> 00:03:16,480
i only pick that piece up

102
00:03:16,480 --> 00:03:17,680
and

103
00:03:17,680 --> 00:03:19,120
you know all of that

104
00:03:19,120 --> 00:03:20,720
process of building the content is

105
00:03:20,720 --> 00:03:22,000
extremely hard

106
00:03:22,000 --> 00:03:23,200
but that's not what we're talking about

107
00:03:23,200 --> 00:03:25,440
today so today we're going to be talking

108
00:03:25,440 --> 00:03:26,720
about a totally different set of

109
00:03:26,720 --> 00:03:29,040
problems for threat detection content to

110
00:03:29,040 --> 00:03:30,799
side and threat research aside those are

111
00:03:30,799 --> 00:03:34,239
all very hard problems as well

112
00:03:34,239 --> 00:03:35,120
so

113
00:03:35,120 --> 00:03:36,560
what are some other what are some of the

114
00:03:36,560 --> 00:03:37,840
other problems around threat detection

115
00:03:37,840 --> 00:03:40,640
or what what makes it hard to do in a

116
00:03:40,640 --> 00:03:42,959
sort of modern you know scaling security

117
00:03:42,959 --> 00:03:43,920
team

118
00:03:43,920 --> 00:03:45,120
and i'm sure many of you have asked

119
00:03:45,120 --> 00:03:46,879
these questions before had them asked to

120
00:03:46,879 --> 00:03:48,400
you so

121
00:03:48,400 --> 00:03:50,239
uh who changed

122
00:03:50,239 --> 00:03:51,920
you know detection x and and what

123
00:03:51,920 --> 00:03:53,519
changed sounds like an easy question to

124
00:03:53,519 --> 00:03:55,280
answer but depending on where your

125
00:03:55,280 --> 00:03:57,200
detection lives and how you maintain it

126
00:03:57,200 --> 00:04:00,080
it may not be that easy

127
00:04:00,080 --> 00:04:02,080
am i going to do errors am i going to

128
00:04:02,080 --> 00:04:04,159
like introduce problems or false

129
00:04:04,159 --> 00:04:06,879
positives ticket cannons

130
00:04:06,879 --> 00:04:07,680
by

131
00:04:07,680 --> 00:04:09,599
making a change or releasing this

132
00:04:09,599 --> 00:04:11,680
detection i don't know it can be hard to

133
00:04:11,680 --> 00:04:13,920
understand that or answer that question

134
00:04:13,920 --> 00:04:15,439
repeatedly

135
00:04:15,439 --> 00:04:17,279
when will we have a use case completed

136
00:04:17,279 --> 00:04:18,639
new threat comes down the line like

137
00:04:18,639 --> 00:04:20,478
where does that fall in all the work

138
00:04:20,478 --> 00:04:21,918
that we're doing from a threat detection

139
00:04:21,918 --> 00:04:24,400
standpoint

140
00:04:24,560 --> 00:04:26,560
is it still working as expected and

141
00:04:26,560 --> 00:04:28,639
we'll go in deeper into that as well

142
00:04:28,639 --> 00:04:30,720
uh is the current version of my logic

143
00:04:30,720 --> 00:04:32,639
running did it like get saved in my sim

144
00:04:32,639 --> 00:04:34,240
appropriately

145
00:04:34,240 --> 00:04:36,400
um like i said ticket cannons am i going

146
00:04:36,400 --> 00:04:38,240
to deploy a detection that just

147
00:04:38,240 --> 00:04:39,680
generates

148
00:04:39,680 --> 00:04:42,000
you know hundreds of alerts that are

149
00:04:42,000 --> 00:04:43,680
useless just right off the bat

150
00:04:43,680 --> 00:04:45,840
definitely done that several times and

151
00:04:45,840 --> 00:04:46,800
then

152
00:04:46,800 --> 00:04:48,479
this is the most important to me and and

153
00:04:48,479 --> 00:04:50,080
why detectionist code really hit home

154
00:04:50,080 --> 00:04:51,840
for me when i first started kind of

155
00:04:51,840 --> 00:04:54,080
learning about it is like thinking about

156
00:04:54,080 --> 00:04:55,680
as a detection engineering team thinking

157
00:04:55,680 --> 00:04:57,440
about what you're producing as a product

158
00:04:57,440 --> 00:04:59,280
to whoever's responding to that alert it

159
00:04:59,280 --> 00:05:02,320
may be you or maybe a dedicated team and

160
00:05:02,320 --> 00:05:04,400
thinking about how can we improve the

161
00:05:04,400 --> 00:05:06,720
product for the incident response team

162
00:05:06,720 --> 00:05:08,479
and what are the processes and technical

163
00:05:08,479 --> 00:05:10,479
guidelines or technical guard rails that

164
00:05:10,479 --> 00:05:12,800
we can wrap around the process of threat

165
00:05:12,800 --> 00:05:15,600
detection sort of creation to produce

166
00:05:15,600 --> 00:05:17,440
the best product that we can for the

167
00:05:17,440 --> 00:05:19,440
incident response team lowest amount of

168
00:05:19,440 --> 00:05:22,960
false positive highest amount of signal

169
00:05:22,960 --> 00:05:24,560
so i've mentioned the term a lot let's

170
00:05:24,560 --> 00:05:26,720
like define it um

171
00:05:26,720 --> 00:05:31,039
so detectionist code to me and and um

172
00:05:31,039 --> 00:05:33,199
to a lot of others is

173
00:05:33,199 --> 00:05:34,880
applying software engineering principles

174
00:05:34,880 --> 00:05:36,720
and best practices to

175
00:05:36,720 --> 00:05:38,160
writing threat detection so right

176
00:05:38,160 --> 00:05:40,160
software engineering has been around for

177
00:05:40,160 --> 00:05:42,080
a long time they figured out how to

178
00:05:42,080 --> 00:05:44,160
write good consistent code they figured

179
00:05:44,160 --> 00:05:45,840
out how to test it and how to do things

180
00:05:45,840 --> 00:05:47,919
repeatedly and reliably

181
00:05:47,919 --> 00:05:49,680
threat detection we're kind of like just

182
00:05:49,680 --> 00:05:51,759
stepping into this space you know a lot

183
00:05:51,759 --> 00:05:54,000
of a lot of days of copying and pasting

184
00:05:54,000 --> 00:05:55,919
detection into the production version of

185
00:05:55,919 --> 00:05:58,319
your detection logic

186
00:05:58,319 --> 00:06:00,639
like those types of things that software

187
00:06:00,639 --> 00:06:02,400
engineering figured out like 40 years

188
00:06:02,400 --> 00:06:04,560
ago we're just starting to think about

189
00:06:04,560 --> 00:06:06,400
in threat detection as we consider this

190
00:06:06,400 --> 00:06:08,319
more of an engineering discipline

191
00:06:08,319 --> 00:06:09,840
i need to apply more rigor to it in

192
00:06:09,840 --> 00:06:12,160
order to create that product experience

193
00:06:12,160 --> 00:06:14,960
that i was talking about

194
00:06:14,960 --> 00:06:17,120
so that's really how i how i define it

195
00:06:17,120 --> 00:06:18,479
broadly and kind of how we'll think

196
00:06:18,479 --> 00:06:19,680
about it going forward in this

197
00:06:19,680 --> 00:06:22,000
presentation

198
00:06:22,000 --> 00:06:25,440
so i i categorize it into five domains

199
00:06:25,440 --> 00:06:27,039
uh sort of like the five domains of

200
00:06:27,039 --> 00:06:28,720
detection as code

201
00:06:28,720 --> 00:06:30,240
and i have these ranked up here in sort

202
00:06:30,240 --> 00:06:32,479
of the order of ease of implementation

203
00:06:32,479 --> 00:06:36,479
so starting with things like process and

204
00:06:36,479 --> 00:06:37,759
you know ways that you can think about

205
00:06:37,759 --> 00:06:39,759
writing detection in your sim a little

206
00:06:39,759 --> 00:06:42,160
bit differently than maybe you are now

207
00:06:42,160 --> 00:06:44,639
all the way down to you know integrating

208
00:06:44,639 --> 00:06:46,240
your sim with other tools integrating

209
00:06:46,240 --> 00:06:48,080
with version control integrating with ci

210
00:06:48,080 --> 00:06:49,280
cd

211
00:06:49,280 --> 00:06:50,880
and really thinking about you know a

212
00:06:50,880 --> 00:06:52,400
test-driven development approach to

213
00:06:52,400 --> 00:06:55,039
threat detection

214
00:06:55,039 --> 00:06:56,960
so let's start with agile

215
00:06:56,960 --> 00:06:58,720
this is like nothing groundbreaking here

216
00:06:58,720 --> 00:07:00,319
right everyone's used to agile but

217
00:07:00,319 --> 00:07:01,360
thinking about it from a threat

218
00:07:01,360 --> 00:07:02,880
detection standpoint

219
00:07:02,880 --> 00:07:04,800
um we can answer a lot we can answer

220
00:07:04,800 --> 00:07:05,919
some of those questions that we talked

221
00:07:05,919 --> 00:07:07,840
about before having a prioritized

222
00:07:07,840 --> 00:07:09,680
backlog the team constantly knows what

223
00:07:09,680 --> 00:07:11,039
they should be working on it's always

224
00:07:11,039 --> 00:07:12,880
kind of that up next mentality of here's

225
00:07:12,880 --> 00:07:15,039
what we've decided is the most important

226
00:07:15,039 --> 00:07:17,120
next we're going to work on that and

227
00:07:17,120 --> 00:07:19,759
that obviously changes over time

228
00:07:19,759 --> 00:07:22,080
but dedicating time for documentation

229
00:07:22,080 --> 00:07:23,680
testing and review

230
00:07:23,680 --> 00:07:26,560
in your workflow process for the team so

231
00:07:26,560 --> 00:07:29,759
having uh or yourself i say team like

232
00:07:29,759 --> 00:07:31,680
all this is interchangeable just for to

233
00:07:31,680 --> 00:07:33,599
make that clear like this doesn't need

234
00:07:33,599 --> 00:07:35,280
to be a team of detection engineers you

235
00:07:35,280 --> 00:07:36,400
know it could be one person writing

236
00:07:36,400 --> 00:07:37,759
detection but thinking about these

237
00:07:37,759 --> 00:07:40,080
things um as

238
00:07:40,080 --> 00:07:43,199
as sort of like important components to

239
00:07:43,199 --> 00:07:45,759
building any type of threat detection

240
00:07:45,759 --> 00:07:47,919
so dedicated time to documentation

241
00:07:47,919 --> 00:07:49,599
testing and review

242
00:07:49,599 --> 00:07:51,280
um and then be able being able to

243
00:07:51,280 --> 00:07:53,599
monitor you know work in progress uh are

244
00:07:53,599 --> 00:07:55,520
we trying to do too many things

245
00:07:55,520 --> 00:07:58,160
uh is the work that we know we need to

246
00:07:58,160 --> 00:08:00,080
do does it keep getting de-prioritized

247
00:08:00,080 --> 00:08:02,080
by you know the latest greatest threat

248
00:08:02,080 --> 00:08:04,160
that may may or may not be that relevant

249
00:08:04,160 --> 00:08:05,599
in our environment

250
00:08:05,599 --> 00:08:07,840
um some great resources here one from

251
00:08:07,840 --> 00:08:09,759
from alex to shara

252
00:08:09,759 --> 00:08:12,240
and palantir around documentation and

253
00:08:12,240 --> 00:08:15,120
jira workflows

254
00:08:15,440 --> 00:08:16,960
okay so this is the like five or ten

255
00:08:16,960 --> 00:08:18,400
percent that i talked about that may be

256
00:08:18,400 --> 00:08:20,160
pretty specific and it's specifically

257
00:08:20,160 --> 00:08:23,360
around using expressive languages

258
00:08:23,360 --> 00:08:25,919
so most like query languages right you

259
00:08:25,919 --> 00:08:27,680
can you can look for an ioc you can look

260
00:08:27,680 --> 00:08:28,720
for something

261
00:08:28,720 --> 00:08:31,199
um pretty generic pretty

262
00:08:31,199 --> 00:08:33,039
pretty easy to do that's right like your

263
00:08:33,039 --> 00:08:34,799
any security tool or sim will do that

264
00:08:34,799 --> 00:08:36,479
for you um

265
00:08:36,479 --> 00:08:38,399
but when we start thinking about trying

266
00:08:38,399 --> 00:08:40,958
to do more complex functions import

267
00:08:40,958 --> 00:08:43,440
third-party libraries uh really like

268
00:08:43,440 --> 00:08:44,640
tailor that detection to your

269
00:08:44,640 --> 00:08:46,399
environment to reduce that false

270
00:08:46,399 --> 00:08:48,480
positive ratio

271
00:08:48,480 --> 00:08:50,320
we need the flexibility an engineer

272
00:08:50,320 --> 00:08:51,760
needs the flexibility right to be able

273
00:08:51,760 --> 00:08:52,959
to express

274
00:08:52,959 --> 00:08:55,519
what they their like desire for the

275
00:08:55,519 --> 00:08:57,120
threat detection logic

276
00:08:57,120 --> 00:08:58,399
into

277
00:08:58,399 --> 00:09:00,800
what they're what they're producing

278
00:09:00,800 --> 00:09:02,560
and i'll go a little bit into into this

279
00:09:02,560 --> 00:09:04,320
in just a second but

280
00:09:04,320 --> 00:09:05,760
having the ability to do that in the

281
00:09:05,760 --> 00:09:07,519
language that you're writing

282
00:09:07,519 --> 00:09:11,279
is is a very powerful uh feature

283
00:09:11,279 --> 00:09:13,680
um some of these others these are like

284
00:09:13,680 --> 00:09:16,640
very sim agnostic right so uh turning

285
00:09:16,640 --> 00:09:19,519
common components or uh you know pieces

286
00:09:19,519 --> 00:09:21,760
of the detection logic that is the same

287
00:09:21,760 --> 00:09:23,120
across

288
00:09:23,120 --> 00:09:25,200
many use cases turning that into a

289
00:09:25,200 --> 00:09:27,120
function or function like

290
00:09:27,120 --> 00:09:30,399
there's many you know sort of

291
00:09:30,399 --> 00:09:32,000
pieces within a sim that will let you do

292
00:09:32,000 --> 00:09:32,880
that

293
00:09:32,880 --> 00:09:34,720
look up tables and data models those are

294
00:09:34,720 --> 00:09:36,080
other great ways to sort of like

295
00:09:36,080 --> 00:09:38,240
centralize data or centralize

296
00:09:38,240 --> 00:09:39,920
functionality into a single place and

297
00:09:39,920 --> 00:09:42,240
then be able to just call that from you

298
00:09:42,240 --> 00:09:44,240
know any detection

299
00:09:44,240 --> 00:09:46,080
use case that you're writing a data

300
00:09:46,080 --> 00:09:47,440
model is obviously being able to write

301
00:09:47,440 --> 00:09:48,720
you know single detection across

302
00:09:48,720 --> 00:09:50,560
multiple log sources that is

303
00:09:50,560 --> 00:09:52,240
sort of like code reuse at its finest

304
00:09:52,240 --> 00:09:54,880
right there so

305
00:09:55,040 --> 00:09:58,560
so this is what uh this is yara url

306
00:09:58,560 --> 00:10:00,800
so this is an example of this is pretty

307
00:10:00,800 --> 00:10:03,360
simple right i just need to check if

308
00:10:03,360 --> 00:10:05,360
you know ipe is in a cider range that's

309
00:10:05,360 --> 00:10:07,120
pretty simple but some languages don't

310
00:10:07,120 --> 00:10:09,120
let you be expressive like this and and

311
00:10:09,120 --> 00:10:11,120
being able to just say like write this

312
00:10:11,120 --> 00:10:12,240
in one line

313
00:10:12,240 --> 00:10:14,320
as a

314
00:10:14,320 --> 00:10:16,160
detection engineer or someone

315
00:10:16,160 --> 00:10:19,040
maintaining detection is is really great

316
00:10:19,040 --> 00:10:20,399
to be able to do and makes it very

317
00:10:20,399 --> 00:10:22,240
readable and

318
00:10:22,240 --> 00:10:24,640
you know on and on uh this is a python

319
00:10:24,640 --> 00:10:26,800
example so just another example of sort

320
00:10:26,800 --> 00:10:27,920
of the functions that i was talking

321
00:10:27,920 --> 00:10:29,519
about but being able to

322
00:10:29,519 --> 00:10:31,440
you know define a function and then call

323
00:10:31,440 --> 00:10:32,800
it repeatedly

324
00:10:32,800 --> 00:10:33,920
i've blurred some of this other stuff

325
00:10:33,920 --> 00:10:36,000
out because it's not important

326
00:10:36,000 --> 00:10:37,279
but the important part right is being

327
00:10:37,279 --> 00:10:39,360
able to define that piece of code that

328
00:10:39,360 --> 00:10:40,800
you're going to reuse in a single place

329
00:10:40,800 --> 00:10:42,800
maintain it in one place

330
00:10:42,800 --> 00:10:44,839
updated in a single

331
00:10:44,839 --> 00:10:47,120
place all right so this is where it

332
00:10:47,120 --> 00:10:48,240
starts to get more fun and more

333
00:10:48,240 --> 00:10:49,920
interesting um

334
00:10:49,920 --> 00:10:52,160
so the next three pieces if we start

335
00:10:52,160 --> 00:10:53,839
like thinking of them as a house i would

336
00:10:53,839 --> 00:10:55,040
say like version control is the

337
00:10:55,040 --> 00:10:57,279
foundation to this house

338
00:10:57,279 --> 00:10:59,360
and it is kind of the core component of

339
00:10:59,360 --> 00:11:01,200
being able to

340
00:11:01,200 --> 00:11:04,240
uh like run ci cd workflows and and

341
00:11:04,240 --> 00:11:07,920
really implement test driven development

342
00:11:07,920 --> 00:11:08,720
so

343
00:11:08,720 --> 00:11:11,279
probably fairly familiar with the

344
00:11:11,279 --> 00:11:14,240
benefits of version control

345
00:11:14,240 --> 00:11:15,279
right so

346
00:11:15,279 --> 00:11:16,800
one of the one of the benefits that i

347
00:11:16,800 --> 00:11:18,959
really saw and that i really appreciate

348
00:11:18,959 --> 00:11:20,320
is being able to

349
00:11:20,320 --> 00:11:22,399
easily pick out what's changed in a peer

350
00:11:22,399 --> 00:11:24,079
review and easily being able to enforce

351
00:11:24,079 --> 00:11:25,519
that peer review

352
00:11:25,519 --> 00:11:26,880
so when we go back to thinking about

353
00:11:26,880 --> 00:11:29,360
detection as a product

354
00:11:29,360 --> 00:11:31,519
having you know that peer review having

355
00:11:31,519 --> 00:11:34,320
it validated having the change validated

356
00:11:34,320 --> 00:11:36,560
and you know like as a as a leader that

357
00:11:36,560 --> 00:11:38,959
that's technically enforced uh that's

358
00:11:38,959 --> 00:11:40,720
that is a great feature to have to make

359
00:11:40,720 --> 00:11:42,240
sure that you're having you know eyes on

360
00:11:42,240 --> 00:11:44,640
detection and eyes on changes as they're

361
00:11:44,640 --> 00:11:46,560
as they're being made

362
00:11:46,560 --> 00:11:48,079
um

363
00:11:48,079 --> 00:11:49,760
one thing i want to explicitly call out

364
00:11:49,760 --> 00:11:52,000
here is is sort of the the flow and

365
00:11:52,000 --> 00:11:53,600
where like version control needs to fit

366
00:11:53,600 --> 00:11:56,560
into the to the workflow

367
00:11:56,560 --> 00:11:58,800
so

368
00:11:58,800 --> 00:12:00,800
basically it needs to be

369
00:12:00,800 --> 00:12:03,120
pushing your detection to your sim right

370
00:12:03,120 --> 00:12:04,959
it needs to be the source of truth

371
00:12:04,959 --> 00:12:06,560
because that starts to let us enable

372
00:12:06,560 --> 00:12:07,600
these things we're going to talk about

373
00:12:07,600 --> 00:12:11,120
next about ci cd workflows and testing

374
00:12:11,120 --> 00:12:12,079
um

375
00:12:12,079 --> 00:12:14,240
if you're pushing things the other way

376
00:12:14,240 --> 00:12:15,440
right you're basically just doing a

377
00:12:15,440 --> 00:12:17,360
glorified backup from the detection

378
00:12:17,360 --> 00:12:18,800
logic in your sim into your version

379
00:12:18,800 --> 00:12:21,360
control and you don't have that enforced

380
00:12:21,360 --> 00:12:23,360
peer review you don't have the changes

381
00:12:23,360 --> 00:12:24,639
being flowing

382
00:12:24,639 --> 00:12:26,480
being flowed through version control and

383
00:12:26,480 --> 00:12:29,360
you kind of lose the benefit

384
00:12:29,360 --> 00:12:31,760
so not to be dramatic but i i think like

385
00:12:31,760 --> 00:12:32,880
doing it that way is a bit of a

386
00:12:32,880 --> 00:12:34,560
glorified backup and it needs to go the

387
00:12:34,560 --> 00:12:36,800
other way

388
00:12:36,800 --> 00:12:37,920
and that's really important for what

389
00:12:37,920 --> 00:12:39,839
we'll talk about next

390
00:12:39,839 --> 00:12:40,800
so

391
00:12:40,800 --> 00:12:43,760
cicd uh if we think about like you know

392
00:12:43,760 --> 00:12:45,440
software development infrastructure is

393
00:12:45,440 --> 00:12:47,360
code you're writing tests you're doing

394
00:12:47,360 --> 00:12:48,800
lenting

395
00:12:48,800 --> 00:12:49,920
and you're making sure that your current

396
00:12:49,920 --> 00:12:52,240
version is always in production and we

397
00:12:52,240 --> 00:12:54,480
can think about those same concepts for

398
00:12:54,480 --> 00:12:56,959
detection logic

399
00:12:56,959 --> 00:12:59,920
so cd ensuring that as i as i merge a

400
00:12:59,920 --> 00:13:02,240
change into the main branch it's always

401
00:13:02,240 --> 00:13:03,839
being pushed into my sim and i always

402
00:13:03,839 --> 00:13:05,360
have the most up-to-date version of my

403
00:13:05,360 --> 00:13:07,200
logic in my sim and there's no question

404
00:13:07,200 --> 00:13:08,240
about it

405
00:13:08,240 --> 00:13:09,839
um

406
00:13:09,839 --> 00:13:11,680
we can talk we can enforce you know

407
00:13:11,680 --> 00:13:14,560
testing uh which we'll talk

408
00:13:14,560 --> 00:13:16,160
more about here in a second

409
00:13:16,160 --> 00:13:17,600
and then also do some cool stuff with

410
00:13:17,600 --> 00:13:18,959
linting so like

411
00:13:18,959 --> 00:13:22,240
linting is kind of a easy step to

412
00:13:22,240 --> 00:13:23,200
um

413
00:13:23,200 --> 00:13:24,560
kind of improve

414
00:13:24,560 --> 00:13:26,240
uh pieces of your detection workflow

415
00:13:26,240 --> 00:13:27,760
without doing full-on testing because

416
00:13:27,760 --> 00:13:29,360
full-on testing can be difficult to

417
00:13:29,360 --> 00:13:30,560
automate

418
00:13:30,560 --> 00:13:34,639
or do in like a ci workflow

419
00:13:34,639 --> 00:13:36,959
by doing linting so like just an example

420
00:13:36,959 --> 00:13:38,720
one of the first use cases that we use

421
00:13:38,720 --> 00:13:39,600
for

422
00:13:39,600 --> 00:13:41,040
linting

423
00:13:41,040 --> 00:13:43,360
detection logic was looking at metadata

424
00:13:43,360 --> 00:13:45,199
we used to have like metadata fields in

425
00:13:45,199 --> 00:13:48,240
detection logic that populated in

426
00:13:48,240 --> 00:13:50,720
tickets and helped track metrics and so

427
00:13:50,720 --> 00:13:52,000
we wanted to make sure that those were

428
00:13:52,000 --> 00:13:54,079
always there

429
00:13:54,079 --> 00:13:55,760
when maybe someone new came onto the

430
00:13:55,760 --> 00:13:57,839
team they didn't quite have all the

431
00:13:57,839 --> 00:13:59,440
pieces in place and didn't understand

432
00:13:59,440 --> 00:14:01,199
exactly what needed to go

433
00:14:01,199 --> 00:14:03,120
in there from a metadata standpoint we

434
00:14:03,120 --> 00:14:05,360
had no way to technically enforce that

435
00:14:05,360 --> 00:14:07,519
but we could write a linter to say hey

436
00:14:07,519 --> 00:14:09,360
as this is going through ci

437
00:14:09,360 --> 00:14:10,639
check to make sure that these fields

438
00:14:10,639 --> 00:14:12,079
exist or this string exists this

439
00:14:12,079 --> 00:14:14,240
metadata is filled out

440
00:14:14,240 --> 00:14:16,720
and so you can take that kind of a you

441
00:14:16,720 --> 00:14:18,160
can you can run with that pretty far

442
00:14:18,160 --> 00:14:19,360
looking for

443
00:14:19,360 --> 00:14:21,680
um you know maybe functions that you are

444
00:14:21,680 --> 00:14:23,360
expensive in your sim that you don't

445
00:14:23,360 --> 00:14:25,680
want your detection logic to be using

446
00:14:25,680 --> 00:14:28,399
um even making sure like simple things

447
00:14:28,399 --> 00:14:30,480
around metadata like making sure the

448
00:14:30,480 --> 00:14:32,160
scheduled search is scheduled on an

449
00:14:32,160 --> 00:14:34,399
interval that you expect

450
00:14:34,399 --> 00:14:35,920
you can really enforce a lot of

451
00:14:35,920 --> 00:14:38,800
technical controls just with linting

452
00:14:38,800 --> 00:14:41,440
to make sure that the detection

453
00:14:41,440 --> 00:14:43,120
is sort of like structured from a

454
00:14:43,120 --> 00:14:44,959
metadata standpoint or even from a logic

455
00:14:44,959 --> 00:14:48,160
standpoint in the way that you want

456
00:14:50,560 --> 00:14:52,720
all right so leading into the last piece

457
00:14:52,720 --> 00:14:55,040
so i think everyone's been here too

458
00:14:55,040 --> 00:14:57,600
you had a pen test or red team exercise

459
00:14:57,600 --> 00:15:00,560
they did x you know x action

460
00:15:00,560 --> 00:15:02,240
you're like wait a second i wrote a

461
00:15:02,240 --> 00:15:04,079
detection on that you know a couple

462
00:15:04,079 --> 00:15:06,480
months ago this is this is impossible

463
00:15:06,480 --> 00:15:08,320
surely we detected it

464
00:15:08,320 --> 00:15:10,399
you didn't and you look and you find out

465
00:15:10,399 --> 00:15:11,680
why it's because something was broken

466
00:15:11,680 --> 00:15:14,000
right something changed maybe the schema

467
00:15:14,000 --> 00:15:16,240
changed maybe there's a change in the

468
00:15:16,240 --> 00:15:18,480
environment that you didn't account for

469
00:15:18,480 --> 00:15:20,240
um

470
00:15:20,240 --> 00:15:21,519
you know there's a number of things that

471
00:15:21,519 --> 00:15:24,160
could go wrong there and

472
00:15:24,160 --> 00:15:27,760
the goal of test driven development

473
00:15:27,760 --> 00:15:29,199
is to

474
00:15:29,199 --> 00:15:31,279
try to reduce the number of occurrences

475
00:15:31,279 --> 00:15:32,800
where that happens because that's super

476
00:15:32,800 --> 00:15:36,320
demoralizing uh for like responders and

477
00:15:36,320 --> 00:15:40,160
defend uh you know detection engineers

478
00:15:40,160 --> 00:15:41,519
so the concept of test driven

479
00:15:41,519 --> 00:15:43,440
development is

480
00:15:43,440 --> 00:15:45,440
uh it's a software engineering concept

481
00:15:45,440 --> 00:15:46,959
basically you write your test cases

482
00:15:46,959 --> 00:15:49,759
before you write the actual code

483
00:15:49,759 --> 00:15:52,000
um and so when i first came across this

484
00:15:52,000 --> 00:15:53,440
i was like that's kind of weird how does

485
00:15:53,440 --> 00:15:55,199
that apply to threat detection

486
00:15:55,199 --> 00:15:56,079
um

487
00:15:56,079 --> 00:15:57,759
and if you think about it when you're

488
00:15:57,759 --> 00:15:59,279
right when you're building detection

489
00:15:59,279 --> 00:16:00,240
logic

490
00:16:00,240 --> 00:16:01,920
you're going to look at log events those

491
00:16:01,920 --> 00:16:04,240
log events are our test cases

492
00:16:04,240 --> 00:16:06,320
so whether that's a log event that you

493
00:16:06,320 --> 00:16:08,480
expect to generate an alert or a log

494
00:16:08,480 --> 00:16:10,240
event that you don't expect to generate

495
00:16:10,240 --> 00:16:11,759
an alert those are two test cases that

496
00:16:11,759 --> 00:16:13,440
you can use going forward

497
00:16:13,440 --> 00:16:14,800
i would say the difference at least in

498
00:16:14,800 --> 00:16:16,639
my experience in threat detection we

499
00:16:16,639 --> 00:16:18,880
take those test cases we build our code

500
00:16:18,880 --> 00:16:20,800
or we write our detection and then we

501
00:16:20,800 --> 00:16:22,399
kind of like throw them away they're

502
00:16:22,399 --> 00:16:24,800
like gone and we just expect it to work

503
00:16:24,800 --> 00:16:26,800
forever when that's not necessarily the

504
00:16:26,800 --> 00:16:28,480
reality

505
00:16:28,480 --> 00:16:30,800
so the goal here of of some of these

506
00:16:30,800 --> 00:16:32,399
workflows is to

507
00:16:32,399 --> 00:16:34,399
keep those test cases around and keep

508
00:16:34,399 --> 00:16:36,800
validating the changes to logic

509
00:16:36,800 --> 00:16:39,120
that um

510
00:16:39,120 --> 00:16:42,000
you know uh changes in the environment

511
00:16:42,000 --> 00:16:44,560
aren't affecting your detection coverage

512
00:16:44,560 --> 00:16:45,600
and you're getting the detection

513
00:16:45,600 --> 00:16:47,040
coverage that you expect because you

514
00:16:47,040 --> 00:16:48,560
worked hard to build it

515
00:16:48,560 --> 00:16:50,399
and you want to maintain that

516
00:16:50,399 --> 00:16:51,839
so this is this is really where

517
00:16:51,839 --> 00:16:53,120
everything starts to kind of come

518
00:16:53,120 --> 00:16:56,320
together and um i will say this this can

519
00:16:56,320 --> 00:16:57,839
be difficult there's a couple different

520
00:16:57,839 --> 00:17:00,240
ways to go about testing detection and

521
00:17:00,240 --> 00:17:01,360
especially trying to do it in an

522
00:17:01,360 --> 00:17:03,600
automated way

523
00:17:03,600 --> 00:17:05,359
so the first one is statically so this

524
00:17:05,359 --> 00:17:07,679
is basically the idea of just taking

525
00:17:07,679 --> 00:17:09,760
those log events and passing them

526
00:17:09,760 --> 00:17:11,679
through the detection logic and

527
00:17:11,679 --> 00:17:13,280
confirming whether or not you know the

528
00:17:13,280 --> 00:17:14,880
detection still works so this is good

529
00:17:14,880 --> 00:17:15,679
for

530
00:17:15,679 --> 00:17:17,199
you know validating the changes you've

531
00:17:17,199 --> 00:17:18,559
made

532
00:17:18,559 --> 00:17:20,880
are going to break the logic

533
00:17:20,880 --> 00:17:22,400
um

534
00:17:22,400 --> 00:17:23,280
you know

535
00:17:23,280 --> 00:17:25,599
ensuring that you know everything's

536
00:17:25,599 --> 00:17:27,199
everything across the board is still

537
00:17:27,199 --> 00:17:29,840
working as expected there's a downside

538
00:17:29,840 --> 00:17:31,200
here right because it doesn't account

539
00:17:31,200 --> 00:17:32,480
for the environment you're having these

540
00:17:32,480 --> 00:17:34,799
sort of like statically defined cases if

541
00:17:34,799 --> 00:17:37,039
the environment changes i don't know

542
00:17:37,039 --> 00:17:38,960
that in my static test case because it

543
00:17:38,960 --> 00:17:40,480
didn't get updated and it might not

544
00:17:40,480 --> 00:17:43,440
reflect what's happening in reality

545
00:17:43,440 --> 00:17:45,120
so that's where these other two come in

546
00:17:45,120 --> 00:17:47,520
so we have sort of like dynamic and then

547
00:17:47,520 --> 00:17:49,280
what i'll kind of call continuous but

548
00:17:49,280 --> 00:17:50,559
you can kind of almost think of these as

549
00:17:50,559 --> 00:17:51,840
the same way just sort of implement it

550
00:17:51,840 --> 00:17:54,559
in two different ways

551
00:17:54,559 --> 00:17:56,240
so the idea behind and they actually

552
00:17:56,240 --> 00:17:58,559
kind of go together to be honest

553
00:17:58,559 --> 00:18:00,400
the idea behind dynamic testing is

554
00:18:00,400 --> 00:18:02,240
running the search and looking for

555
00:18:02,240 --> 00:18:04,240
events looking for true positives and

556
00:18:04,240 --> 00:18:05,520
making sure that we're not getting false

557
00:18:05,520 --> 00:18:08,799
positives um and so

558
00:18:08,799 --> 00:18:10,160
this would be

559
00:18:10,160 --> 00:18:11,360
um

560
00:18:11,360 --> 00:18:13,039
basically you're testing this against

561
00:18:13,039 --> 00:18:14,960
against real data the environment and

562
00:18:14,960 --> 00:18:16,640
then the challenge becomes how do i get

563
00:18:16,640 --> 00:18:18,640
those true events right how do i get

564
00:18:18,640 --> 00:18:20,160
those events that i know should be

565
00:18:20,160 --> 00:18:21,600
triggering the detection how do i

566
00:18:21,600 --> 00:18:23,520
produce those there's a variety of

567
00:18:23,520 --> 00:18:24,880
frameworks out there so you have like

568
00:18:24,880 --> 00:18:26,640
the atomic red team framework you have

569
00:18:26,640 --> 00:18:27,440
the

570
00:18:27,440 --> 00:18:29,120
miter caldera which does some of this

571
00:18:29,120 --> 00:18:31,840
like adversary emulation

572
00:18:31,840 --> 00:18:34,320
and trying to tie these pieces together

573
00:18:34,320 --> 00:18:35,919
in order to be able to

574
00:18:35,919 --> 00:18:37,440
generate live test cases in the

575
00:18:37,440 --> 00:18:38,880
environment and then validate that the

576
00:18:38,880 --> 00:18:40,400
detection caught it

577
00:18:40,400 --> 00:18:42,640
and um

578
00:18:42,640 --> 00:18:44,320
like to be to be completely honest this

579
00:18:44,320 --> 00:18:45,679
is something that i wanted to build out

580
00:18:45,679 --> 00:18:47,600
and i haven't been able to yet so if

581
00:18:47,600 --> 00:18:48,640
you're doing something like this i would

582
00:18:48,640 --> 00:18:49,760
love to hear about it but i think that

583
00:18:49,760 --> 00:18:51,679
this is the standard that we need to get

584
00:18:51,679 --> 00:18:53,360
to when we start testing detection and

585
00:18:53,360 --> 00:18:55,120
thinking about how we validate the

586
00:18:55,120 --> 00:18:58,240
detection is is functioning um going

587
00:18:58,240 --> 00:18:59,200
forward

588
00:18:59,200 --> 00:18:59,919
so

589
00:18:59,919 --> 00:19:02,080
it's a it's a high in the sky goal but i

590
00:19:02,080 --> 00:19:04,480
would love to to do it for real

591
00:19:04,480 --> 00:19:05,760
um

592
00:19:05,760 --> 00:19:08,320
so yeah some links here around sort of

593
00:19:08,320 --> 00:19:10,400
red canary the caldera framework and a

594
00:19:10,400 --> 00:19:13,039
couple other things as well

595
00:19:13,039 --> 00:19:16,160
as it relates to testing

596
00:19:16,559 --> 00:19:17,600
cool

597
00:19:17,600 --> 00:19:20,240
did we solve these let's find out

598
00:19:20,240 --> 00:19:21,679
we got pretty close

599
00:19:21,679 --> 00:19:24,880
um so like right like version control

600
00:19:24,880 --> 00:19:27,200
ci and testing helps a lot with

601
00:19:27,200 --> 00:19:30,000
answering these questions uh and as sort

602
00:19:30,000 --> 00:19:31,520
of as do agile workflows around

603
00:19:31,520 --> 00:19:34,720
processes and product improvement so

604
00:19:34,720 --> 00:19:36,080
um

605
00:19:36,080 --> 00:19:38,000
cool i mean one thing or a couple things

606
00:19:38,000 --> 00:19:39,360
i want to want you to take away from

607
00:19:39,360 --> 00:19:40,559
this too is

608
00:19:40,559 --> 00:19:42,320
um this is very

609
00:19:42,320 --> 00:19:45,120
sort of like environment agnostic uh

610
00:19:45,120 --> 00:19:46,880
team agnostic no matter the size of your

611
00:19:46,880 --> 00:19:47,919
team you can start to think about

612
00:19:47,919 --> 00:19:49,440
implementing some of these workflows if

613
00:19:49,440 --> 00:19:50,400
you're not

614
00:19:50,400 --> 00:19:52,960
um and kind of like molding them to your

615
00:19:52,960 --> 00:19:54,960
environment they don't need to be

616
00:19:54,960 --> 00:19:56,400
you know structured in the exact way

617
00:19:56,400 --> 00:19:58,000
that i described here but it's all about

618
00:19:58,000 --> 00:19:59,600
sort of like the high level concepts and

619
00:19:59,600 --> 00:20:00,960
how do you apply that to how you're

620
00:20:00,960 --> 00:20:02,559
building threat detection

621
00:20:02,559 --> 00:20:05,520
uh in your environment so

622
00:20:05,520 --> 00:20:06,720
cool

623
00:20:06,720 --> 00:20:09,039
i'll be around the rest of the day and

624
00:20:09,039 --> 00:20:11,360
at the panther table as well so please

625
00:20:11,360 --> 00:20:14,400
uh drop by for any any questions you

626
00:20:14,400 --> 00:20:15,760
want to talk about detection or anything

627
00:20:15,760 --> 00:20:18,120
else i appreciate everyone coming

628
00:20:18,120 --> 00:20:24,629
[Applause]

629
00:20:26,000 --> 00:20:28,080
thank you again for uh presenting at

630
00:20:28,080 --> 00:20:31,760
besides sf uh again kyle bailey and this

631
00:20:31,760 --> 00:20:34,400
is from malt ego

632
00:20:34,400 --> 00:20:35,919
thank you

633
00:20:35,919 --> 00:20:38,159
thank you all for joining us as well

634
00:20:38,159 --> 00:20:41,320
thank you

