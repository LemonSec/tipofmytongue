1
00:00:00,240 --> 00:00:02,399
uh i'd like to introduce ashish patel

2
00:00:02,399 --> 00:00:06,240
for meta badger automation imds uh

3
00:00:06,240 --> 00:00:07,359
welcome

4
00:00:07,359 --> 00:00:09,040
i'll let you get started

5
00:00:09,040 --> 00:00:10,240
okay awesome

6
00:00:10,240 --> 00:00:12,719
thanks everybody for attending my talk

7
00:00:12,719 --> 00:00:14,320
so today we'll be talking about

8
00:00:14,320 --> 00:00:16,560
automating imds protection scale as you

9
00:00:16,560 --> 00:00:18,480
mentioned as well and then a tool that

10
00:00:18,480 --> 00:00:20,400
we wrote called metabadger

11
00:00:20,400 --> 00:00:22,960
really interesting name um definitely

12
00:00:22,960 --> 00:00:24,240
something that had a lot of thought put

13
00:00:24,240 --> 00:00:26,639
into it

14
00:00:26,720 --> 00:00:28,560
so who am i i'm a security engineer at

15
00:00:28,560 --> 00:00:30,480
brex right now i really like working on

16
00:00:30,480 --> 00:00:32,000
a lot of different things involving the

17
00:00:32,000 --> 00:00:34,160
cloud security space and infrastructure

18
00:00:34,160 --> 00:00:35,680
i think there's a lot of different

19
00:00:35,680 --> 00:00:38,079
various areas in this space that could

20
00:00:38,079 --> 00:00:39,920
use some automation as well as just

21
00:00:39,920 --> 00:00:42,160
overall insight of how you build tooling

22
00:00:42,160 --> 00:00:44,480
and letting robots do things for you to

23
00:00:44,480 --> 00:00:46,239
help the overall posture of you know

24
00:00:46,239 --> 00:00:47,520
that environment

25
00:00:47,520 --> 00:00:48,800
and i really think that like shifting

26
00:00:48,800 --> 00:00:50,640
left and moving a lot of configurations

27
00:00:50,640 --> 00:00:52,719
into infrastructures code as well as

28
00:00:52,719 --> 00:00:54,640
kind of pushing some of these default

29
00:00:54,640 --> 00:00:56,640
configurations into a secure state is

30
00:00:56,640 --> 00:00:58,640
super important and this is something

31
00:00:58,640 --> 00:00:59,920
that i've kind of been passionate about

32
00:00:59,920 --> 00:01:02,239
i've investigated things in the past

33
00:01:02,239 --> 00:01:03,840
different roles and so forth over the

34
00:01:03,840 --> 00:01:05,040
years

35
00:01:05,040 --> 00:01:06,960
and then the tooling behind all this

36
00:01:06,960 --> 00:01:08,560
right should really be able to enable

37
00:01:08,560 --> 00:01:09,600
the software engineers that you're

38
00:01:09,600 --> 00:01:11,680
working with and also provide guardrails

39
00:01:11,680 --> 00:01:13,520
so how do we actually mitigate these

40
00:01:13,520 --> 00:01:14,960
things in a way where they're you know

41
00:01:14,960 --> 00:01:15,840
not as

42
00:01:15,840 --> 00:01:17,439
empowering with this like friction you

43
00:01:17,439 --> 00:01:18,960
know against the different engineering

44
00:01:18,960 --> 00:01:21,119
teams and so forth so doing it in a way

45
00:01:21,119 --> 00:01:24,320
that's a little bit more seamless right

46
00:01:24,320 --> 00:01:26,400
and so you know why meta badger why

47
00:01:26,400 --> 00:01:28,960
metadata in general a lot of folks will

48
00:01:28,960 --> 00:01:30,960
ask this question um and really the

49
00:01:30,960 --> 00:01:33,040
metadata service is what instances use

50
00:01:33,040 --> 00:01:34,799
to actually get all the contacts they

51
00:01:34,799 --> 00:01:36,960
need about what they're doing so the

52
00:01:36,960 --> 00:01:38,400
role itself that gets pulled onto the

53
00:01:38,400 --> 00:01:40,079
instance and then the credentials that

54
00:01:40,079 --> 00:01:41,840
the instance is using are all

55
00:01:41,840 --> 00:01:43,840
essentially you know used by the

56
00:01:43,840 --> 00:01:45,920
instance to then get context for the

57
00:01:45,920 --> 00:01:47,280
different things it'll access inside of

58
00:01:47,280 --> 00:01:49,200
an aws environment right so you might

59
00:01:49,200 --> 00:01:50,960
have an instance that has access to s3

60
00:01:50,960 --> 00:01:53,840
buckets or to rds or other things that

61
00:01:53,840 --> 00:01:55,600
needs to talk to and so

62
00:01:55,600 --> 00:01:57,520
it'll actually talk to the imds service

63
00:01:57,520 --> 00:01:58,880
that'll get pulled down and then the

64
00:01:58,880 --> 00:02:00,399
instance has the context to go ahead and

65
00:02:00,399 --> 00:02:02,399
do that there's been a numerous amount

66
00:02:02,399 --> 00:02:04,640
of known kind of ssrf vulnerabilities

67
00:02:04,640 --> 00:02:06,240
and exploits that have existed in the

68
00:02:06,240 --> 00:02:07,680
past around this there's been some

69
00:02:07,680 --> 00:02:09,919
pretty popular attacks that have existed

70
00:02:09,919 --> 00:02:13,360
before 2019 so those have been prevalent

71
00:02:13,360 --> 00:02:15,280
since then and then v2 was actually

72
00:02:15,280 --> 00:02:17,440
released in 2019 so that was the updated

73
00:02:17,440 --> 00:02:20,239
version of the metadata service that aws

74
00:02:20,239 --> 00:02:22,480
released and credential leaking you know

75
00:02:22,480 --> 00:02:24,480
from this attack and exploit vector is

76
00:02:24,480 --> 00:02:25,680
actually pretty bad because whatever

77
00:02:25,680 --> 00:02:27,599
this instance has access to

78
00:02:27,599 --> 00:02:29,440
that's essentially what the attacker

79
00:02:29,440 --> 00:02:32,640
would be able to then exploit

80
00:02:33,519 --> 00:02:35,519
this is kind of a breakdown of the two

81
00:02:35,519 --> 00:02:36,400
different

82
00:02:36,400 --> 00:02:38,080
versions of the instance metadata

83
00:02:38,080 --> 00:02:40,560
service the first one in origin right is

84
00:02:40,560 --> 00:02:42,400
a very simple type of request right so

85
00:02:42,400 --> 00:02:44,080
you're just talking making a request up

86
00:02:44,080 --> 00:02:46,000
to the metadata service that'll give you

87
00:02:46,000 --> 00:02:48,400
back a response and that'll essentially

88
00:02:48,400 --> 00:02:50,160
pipe your credentials or whatever else

89
00:02:50,160 --> 00:02:51,760
that you're asking for from the service

90
00:02:51,760 --> 00:02:53,040
back to it right and there's only one

91
00:02:53,040 --> 00:02:54,879
method that's used there just to put

92
00:02:54,879 --> 00:02:56,720
methods that's on the instance this will

93
00:02:56,720 --> 00:02:59,280
just get asked up to the actual service

94
00:02:59,280 --> 00:03:00,640
it'll just give you that back right so

95
00:03:00,640 --> 00:03:02,560
it's not doing any off there there's no

96
00:03:02,560 --> 00:03:04,560
token there's nothing involved there

97
00:03:04,560 --> 00:03:06,000
and this is where you know a lot of

98
00:03:06,000 --> 00:03:07,680
those attacks were able to leverage that

99
00:03:07,680 --> 00:03:09,599
particular simple kind of response right

100
00:03:09,599 --> 00:03:11,120
to say hey let me just curl the metadata

101
00:03:11,120 --> 00:03:13,360
service that'll come back to you v2

102
00:03:13,360 --> 00:03:15,200
right and added a few things in place to

103
00:03:15,200 --> 00:03:17,360
make this a lot more difficult right you

104
00:03:17,360 --> 00:03:18,800
have a session oriented we're moving

105
00:03:18,800 --> 00:03:21,280
from just a simple response request to a

106
00:03:21,280 --> 00:03:23,200
session oriented request right so now

107
00:03:23,200 --> 00:03:24,720
we're going to say there's a token in

108
00:03:24,720 --> 00:03:26,239
place we're going to ask for that token

109
00:03:26,239 --> 00:03:28,080
when it comes in and then we're also

110
00:03:28,080 --> 00:03:29,360
going to enforce a couple other things

111
00:03:29,360 --> 00:03:31,040
wrong that right so a lot of the times

112
00:03:31,040 --> 00:03:34,000
these ssrf attacks will involve a proxy

113
00:03:34,000 --> 00:03:36,239
that's used and they'll have an x4

114
00:03:36,239 --> 00:03:38,000
header so this is saying hey we're going

115
00:03:38,000 --> 00:03:39,760
to go through another platform

116
00:03:39,760 --> 00:03:41,920
essentially to now ask the instance to

117
00:03:41,920 --> 00:03:44,239
give us back those credentials so this

118
00:03:44,239 --> 00:03:45,519
actually will

119
00:03:45,519 --> 00:03:47,280
you know include other methods as well

120
00:03:47,280 --> 00:03:49,200
right so you need to pass a token to the

121
00:03:49,200 --> 00:03:51,599
metadata service this will actually pass

122
00:03:51,599 --> 00:03:53,439
that back and then you're able to make

123
00:03:53,439 --> 00:03:55,280
that call with the token request so

124
00:03:55,280 --> 00:03:57,040
we're adding another layer of complexity

125
00:03:57,040 --> 00:03:58,159
a little bit more friction for the

126
00:03:58,159 --> 00:04:00,400
attacker as well

127
00:04:00,400 --> 00:04:02,319
this is kind of a quick diagram here

128
00:04:02,319 --> 00:04:05,040
around how the attack would work just

129
00:04:05,040 --> 00:04:07,760
with v1 so we have a bad actor right an

130
00:04:07,760 --> 00:04:10,239
ssrf vulnerability is present on

131
00:04:10,239 --> 00:04:12,400
instance itself right on the front end

132
00:04:12,400 --> 00:04:14,319
and then there's a curl command that

133
00:04:14,319 --> 00:04:15,840
somebody may run right once they get

134
00:04:15,840 --> 00:04:17,839
access to the actual instance itself so

135
00:04:17,839 --> 00:04:19,519
essentially the attacker is tricking the

136
00:04:19,519 --> 00:04:21,040
instance into thinking hey this is a

137
00:04:21,040 --> 00:04:22,960
normal request that i can make off the

138
00:04:22,960 --> 00:04:23,759
bat

139
00:04:23,759 --> 00:04:25,919
and talk to the metadata service and

140
00:04:25,919 --> 00:04:27,600
essentially you know get creds for

141
00:04:27,600 --> 00:04:29,280
whatever the instance is meant to do or

142
00:04:29,280 --> 00:04:30,720
what it's supposed to do so these

143
00:04:30,720 --> 00:04:32,720
credentials are returned the bad actor

144
00:04:32,720 --> 00:04:34,880
now has access to these credentials and

145
00:04:34,880 --> 00:04:36,560
essentially whatever context this

146
00:04:36,560 --> 00:04:38,800
instance has is what will you know

147
00:04:38,800 --> 00:04:40,400
essentially take place inside of that

148
00:04:40,400 --> 00:04:42,560
aws environment so they could access

149
00:04:42,560 --> 00:04:44,479
maybe you have you know something that

150
00:04:44,479 --> 00:04:46,320
the census is doing that's talking to s3

151
00:04:46,320 --> 00:04:48,400
or somewhere else but the entire you

152
00:04:48,400 --> 00:04:50,400
know instance profile attached to the

153
00:04:50,400 --> 00:04:51,520
role that it

154
00:04:51,520 --> 00:04:53,199
has access to we'll go ahead and talk to

155
00:04:53,199 --> 00:04:56,160
different things there

156
00:04:56,160 --> 00:04:57,919
and so too bad right once we update to

157
00:04:57,919 --> 00:04:59,840
v2 this changes a lot right we're

158
00:04:59,840 --> 00:05:01,199
creating a lot more friction for the

159
00:05:01,199 --> 00:05:03,759
attacker themselves um you can actually

160
00:05:03,759 --> 00:05:05,680
see here right that the same attack flow

161
00:05:05,680 --> 00:05:07,600
would happen but the attacker may not

162
00:05:07,600 --> 00:05:09,039
know that hey i actually need to pass a

163
00:05:09,039 --> 00:05:11,440
token now so that's another one one step

164
00:05:11,440 --> 00:05:13,280
that you're adding into their attack for

165
00:05:13,280 --> 00:05:15,759
that complexity level right um and then

166
00:05:15,759 --> 00:05:17,199
if they're able to actually go through

167
00:05:17,199 --> 00:05:19,039
and hit the metadata service there's

168
00:05:19,039 --> 00:05:20,320
even more complexity because this will

169
00:05:20,320 --> 00:05:22,639
get run returned to the instance um

170
00:05:22,639 --> 00:05:24,080
that'll get back to the bad actor but

171
00:05:24,080 --> 00:05:25,919
now we have all these other various

172
00:05:25,919 --> 00:05:27,680
things that are in place which prevents

173
00:05:27,680 --> 00:05:28,880
the attack from

174
00:05:28,880 --> 00:05:30,320
some actually being you know taking

175
00:05:30,320 --> 00:05:31,919
place in the first place right so the

176
00:05:31,919 --> 00:05:34,080
request could get denied without a token

177
00:05:34,080 --> 00:05:36,080
that's properly there there's a ttl

178
00:05:36,080 --> 00:05:37,680
attached to the actual session right

179
00:05:37,680 --> 00:05:39,360
once you pull that token down and then

180
00:05:39,360 --> 00:05:41,280
also there's a correct header that's

181
00:05:41,280 --> 00:05:43,520
enforcement with the proxy right so

182
00:05:43,520 --> 00:05:45,680
if you have if you don't have all those

183
00:05:45,680 --> 00:05:47,360
things that are that are part of

184
00:05:47,360 --> 00:05:49,039
essentially v2 which now it's like a

185
00:05:49,039 --> 00:05:50,800
super complex attack to actually take

186
00:05:50,800 --> 00:05:52,720
place you're preventing the attacker

187
00:05:52,720 --> 00:05:54,639
from using that um essentially from

188
00:05:54,639 --> 00:05:58,240
outside of the aws environment

189
00:05:58,240 --> 00:05:59,680
and this is kind of you know leading us

190
00:05:59,680 --> 00:06:01,440
back to why it's important and like how

191
00:06:01,440 --> 00:06:02,880
we should go about like solving this

192
00:06:02,880 --> 00:06:05,600
problem and you know the configurations

193
00:06:05,600 --> 00:06:07,600
for the instances themselves could live

194
00:06:07,600 --> 00:06:08,960
in infrastructures code so if you're

195
00:06:08,960 --> 00:06:10,240
using terraform if you're using cloud

196
00:06:10,240 --> 00:06:11,680
formation and something like that you

197
00:06:11,680 --> 00:06:13,280
can actually put that in as just like a

198
00:06:13,280 --> 00:06:15,360
configuration to say when this instance

199
00:06:15,360 --> 00:06:16,880
comes alive let's actually make sure

200
00:06:16,880 --> 00:06:18,800
it's using v2 and just have that

201
00:06:18,800 --> 00:06:20,560
enforced there's also like the

202
00:06:20,560 --> 00:06:22,160
enforcement of the session tokens right

203
00:06:22,160 --> 00:06:23,280
so we're going to ensure that every

204
00:06:23,280 --> 00:06:24,800
request to the metadata service is

205
00:06:24,800 --> 00:06:27,280
coming in with the token and not just a

206
00:06:27,280 --> 00:06:30,000
simple request that v1 would have before

207
00:06:30,000 --> 00:06:31,919
and then also the proxy attack vector

208
00:06:31,919 --> 00:06:33,919
right so making sure that that header

209
00:06:33,919 --> 00:06:35,919
itself is not allowed so we don't allow

210
00:06:35,919 --> 00:06:37,360
something from the outside to actually

211
00:06:37,360 --> 00:06:38,880
make that request on behalf of the

212
00:06:38,880 --> 00:06:40,400
instance a lot of the times those

213
00:06:40,400 --> 00:06:41,840
attacks work that way and then this will

214
00:06:41,840 --> 00:06:43,919
keep track of how that request is being

215
00:06:43,919 --> 00:06:46,560
made in the first place

216
00:06:46,560 --> 00:06:48,560
and you know now we're coming down into

217
00:06:48,560 --> 00:06:50,240
the aspect of like hey do we need a tool

218
00:06:50,240 --> 00:06:52,160
for this and like every good security

219
00:06:52,160 --> 00:06:54,160
person who's doing anything right you'll

220
00:06:54,160 --> 00:06:55,280
probably try to google and see if

221
00:06:55,280 --> 00:06:57,199
there's a tool that exists for something

222
00:06:57,199 --> 00:06:59,919
right um and what we did initially was

223
00:06:59,919 --> 00:07:01,440
try to figure out hey you know how do we

224
00:07:01,440 --> 00:07:02,800
get metrics around this how do we

225
00:07:02,800 --> 00:07:04,960
understand where the problem exists and

226
00:07:04,960 --> 00:07:06,240
you can actually do a couple things

227
00:07:06,240 --> 00:07:07,680
today where you can look at cloud watch

228
00:07:07,680 --> 00:07:11,199
metrics and the ec2 api to understand

229
00:07:11,199 --> 00:07:13,039
where your metadata is being used and

230
00:07:13,039 --> 00:07:14,800
which version you're on

231
00:07:14,800 --> 00:07:17,199
that exists out of the box inside of aws

232
00:07:17,199 --> 00:07:18,400
today so if you wanted to go into

233
00:07:18,400 --> 00:07:20,160
cloudwatch actually pull those down you

234
00:07:20,160 --> 00:07:21,759
could and then we really wanted to

235
00:07:21,759 --> 00:07:23,599
understand hey can we also make sure

236
00:07:23,599 --> 00:07:25,360
that every new instance that comes alive

237
00:07:25,360 --> 00:07:27,599
is using v2 off the bat and this can get

238
00:07:27,599 --> 00:07:29,280
really tricky once you're looking at you

239
00:07:29,280 --> 00:07:30,800
know accounts that have hundreds of

240
00:07:30,800 --> 00:07:32,400
thousands of instances across like

241
00:07:32,400 --> 00:07:34,880
multiple regions and all these instances

242
00:07:34,880 --> 00:07:36,319
are doing different things across the

243
00:07:36,319 --> 00:07:37,680
board right so

244
00:07:37,680 --> 00:07:38,960
that's these are all kind of like

245
00:07:38,960 --> 00:07:41,440
problem sets in within the tool itself

246
00:07:41,440 --> 00:07:43,520
of what we needed to think through

247
00:07:43,520 --> 00:07:45,039
and you know just like from the

248
00:07:45,039 --> 00:07:46,960
preventative perspective of things right

249
00:07:46,960 --> 00:07:48,560
you could actually put in the control

250
00:07:48,560 --> 00:07:50,879
policy right so aws has a concept of

251
00:07:50,879 --> 00:07:52,240
service control policies where you can

252
00:07:52,240 --> 00:07:53,840
actually just enforce certain things off

253
00:07:53,840 --> 00:07:55,599
the bat so this thing will actually

254
00:07:55,599 --> 00:07:57,440
update the iem policy and say hey you

255
00:07:57,440 --> 00:07:59,120
know make sure every request is coming

256
00:07:59,120 --> 00:08:01,199
through that's assigned to v2 and if not

257
00:08:01,199 --> 00:08:02,560
don't let it pass this could really

258
00:08:02,560 --> 00:08:04,319
break things pretty easily because some

259
00:08:04,319 --> 00:08:06,000
things just don't support v2 out of the

260
00:08:06,000 --> 00:08:07,840
box so you have to be very careful when

261
00:08:07,840 --> 00:08:09,680
you're doing that

262
00:08:09,680 --> 00:08:12,000
and then i think the last note there is

263
00:08:12,000 --> 00:08:13,599
just kind of like around enforcing this

264
00:08:13,599 --> 00:08:14,960
across every single instance so you

265
00:08:14,960 --> 00:08:16,240
might have a lot of legacy

266
00:08:16,240 --> 00:08:18,319
infrastructure in your environment that

267
00:08:18,319 --> 00:08:20,319
only supports a v1 that may not have

268
00:08:20,319 --> 00:08:22,080
been updated in the past so forth so you

269
00:08:22,080 --> 00:08:23,360
have to be kind of careful about this

270
00:08:23,360 --> 00:08:25,199
right so we needed a tool to solve all

271
00:08:25,199 --> 00:08:27,120
these problems and it's kind of what we

272
00:08:27,120 --> 00:08:29,440
started baking into the the kind of the

273
00:08:29,440 --> 00:08:31,280
meta badger itself

274
00:08:31,280 --> 00:08:33,279
this is a simple like discovery process

275
00:08:33,279 --> 00:08:35,120
around how you'd go about solving this

276
00:08:35,120 --> 00:08:38,080
um just in scale and in general right so

277
00:08:38,080 --> 00:08:39,679
you look at some of these existing

278
00:08:39,679 --> 00:08:41,360
metrics that you have and then even

279
00:08:41,360 --> 00:08:43,279
logging for like cloudtrail to see hey

280
00:08:43,279 --> 00:08:44,800
which version of the metadata service am

281
00:08:44,800 --> 00:08:46,000
i using

282
00:08:46,000 --> 00:08:47,839
and then how am i doing that right is

283
00:08:47,839 --> 00:08:49,440
user data being passed in is there a

284
00:08:49,440 --> 00:08:50,959
role being used

285
00:08:50,959 --> 00:08:53,040
are you running any software that could

286
00:08:53,040 --> 00:08:54,880
you know be for one version or the other

287
00:08:54,880 --> 00:08:56,320
and sometimes there are there's a

288
00:08:56,320 --> 00:08:57,680
there's a known list of vendors out

289
00:08:57,680 --> 00:08:59,200
there right that like only support one

290
00:08:59,200 --> 00:09:01,120
version or maybe they haven't updated to

291
00:09:01,120 --> 00:09:02,800
v2 yet because it's actually a change in

292
00:09:02,800 --> 00:09:04,560
the code of how they're talking to the

293
00:09:04,560 --> 00:09:06,080
metadata service

294
00:09:06,080 --> 00:09:07,839
and the real test right after that is

295
00:09:07,839 --> 00:09:09,360
like once you do make the changes you

296
00:09:09,360 --> 00:09:10,880
should really update some of those

297
00:09:10,880 --> 00:09:13,440
things and actually you know test them

298
00:09:13,440 --> 00:09:14,640
out in lower environments right so if

299
00:09:14,640 --> 00:09:16,000
you have devin stage make sure that

300
00:09:16,000 --> 00:09:17,600
everything's working as expected because

301
00:09:17,600 --> 00:09:19,120
sometimes you might have calls that fail

302
00:09:19,120 --> 00:09:20,399
you might have applications that start

303
00:09:20,399 --> 00:09:22,640
breaking and then validating the logging

304
00:09:22,640 --> 00:09:24,640
right so once you get all that done you

305
00:09:24,640 --> 00:09:26,480
can look at logs to say hey is the

306
00:09:26,480 --> 00:09:28,080
metadata service still function as

307
00:09:28,080 --> 00:09:29,920
expected are these instances still doing

308
00:09:29,920 --> 00:09:32,800
what they're supposed to do

309
00:09:32,800 --> 00:09:34,560
this is the tool itself right the tool

310
00:09:34,560 --> 00:09:37,040
solves a number of different things um

311
00:09:37,040 --> 00:09:38,640
we really wanted to understand hey like

312
00:09:38,640 --> 00:09:40,640
which version of imds are we on right to

313
00:09:40,640 --> 00:09:42,800
be able to pull those metrics down check

314
00:09:42,800 --> 00:09:44,640
the the role attachments to see like hey

315
00:09:44,640 --> 00:09:46,480
you know if you're using an im instance

316
00:09:46,480 --> 00:09:48,240
profile right with the role you're

317
00:09:48,240 --> 00:09:50,000
probably using the metadata service to a

318
00:09:50,000 --> 00:09:51,760
degree and then have like a lot of

319
00:09:51,760 --> 00:09:54,080
different various uh abilities about the

320
00:09:54,080 --> 00:09:56,000
metadata service itself so let's enable

321
00:09:56,000 --> 00:09:58,000
it to be able to disable it check it and

322
00:09:58,000 --> 00:10:00,000
then even roll back if in case we break

323
00:10:00,000 --> 00:10:01,920
something and we want to fix this

324
00:10:01,920 --> 00:10:03,519
so building all this into the tool i

325
00:10:03,519 --> 00:10:05,120
think was really helpful and then even

326
00:10:05,120 --> 00:10:06,560
being granular about certain things

327
00:10:06,560 --> 00:10:08,000
right so like let's say you're in your

328
00:10:08,000 --> 00:10:09,680
environment and you know instances for

329
00:10:09,680 --> 00:10:12,480
facts can't actually you know be updated

330
00:10:12,480 --> 00:10:14,240
you can actually specify a tag where you

331
00:10:14,240 --> 00:10:15,680
want to apply this across the board you

332
00:10:15,680 --> 00:10:17,920
can even specify like the csv of

333
00:10:17,920 --> 00:10:19,519
instance ids where you want to apply

334
00:10:19,519 --> 00:10:21,200
this so giving folks you know the

335
00:10:21,200 --> 00:10:22,800
ability to do that in a very granular

336
00:10:22,800 --> 00:10:24,160
manner so you're not going to break

337
00:10:24,160 --> 00:10:26,480
things off that you know just have that

338
00:10:26,480 --> 00:10:28,320
sort of confidence that

339
00:10:28,320 --> 00:10:30,560
you can go into it and sort of fix the

340
00:10:30,560 --> 00:10:32,000
problem without running into larger

341
00:10:32,000 --> 00:10:33,519
issues because that can get really

342
00:10:33,519 --> 00:10:35,040
tricky

343
00:10:35,040 --> 00:10:36,720
this is the flow path of kind of how

344
00:10:36,720 --> 00:10:38,880
you'd use mounted battery like all the

345
00:10:38,880 --> 00:10:40,079
you know all the way through and

346
00:10:40,079 --> 00:10:42,160
globbing all the steps and so forth

347
00:10:42,160 --> 00:10:43,120
you would essentially do the whole

348
00:10:43,120 --> 00:10:44,640
discovery process right understanding

349
00:10:44,640 --> 00:10:46,240
your usage and then seeing like what

350
00:10:46,240 --> 00:10:48,160
roles you use to get some context on

351
00:10:48,160 --> 00:10:49,839
that as well as kind of figuring out

352
00:10:49,839 --> 00:10:51,519
where you're not using the imds service

353
00:10:51,519 --> 00:10:52,800
because if you're not using it it's

354
00:10:52,800 --> 00:10:54,480
probably best to just disable the attack

355
00:10:54,480 --> 00:10:55,920
surface altogether

356
00:10:55,920 --> 00:10:57,839
this is just a vector that somebody

357
00:10:57,839 --> 00:10:59,360
could use right so if you're not using

358
00:10:59,360 --> 00:11:01,519
it just turn it off and then if you

359
00:11:01,519 --> 00:11:03,120
wanted to update you can also do like a

360
00:11:03,120 --> 00:11:05,200
dry run of this update to v2 and then

361
00:11:05,200 --> 00:11:06,720
validate that all those workloads are

362
00:11:06,720 --> 00:11:08,240
working correctly

363
00:11:08,240 --> 00:11:09,440
and then on top of that the tool will

364
00:11:09,440 --> 00:11:10,959
actually go through get all the coverage

365
00:11:10,959 --> 00:11:13,040
metrics you can do an analysis of like

366
00:11:13,040 --> 00:11:14,959
hey what impact do we change here how

367
00:11:14,959 --> 00:11:16,800
many more instances are down using v2

368
00:11:16,800 --> 00:11:19,040
versus v1 and then continuously audit

369
00:11:19,040 --> 00:11:20,399
this

370
00:11:20,399 --> 00:11:22,160
so this is kind of a quick demo around

371
00:11:22,160 --> 00:11:24,160
like how the tool would work right so we

372
00:11:24,160 --> 00:11:26,560
just run a meta badger discover metadata

373
00:11:26,560 --> 00:11:28,880
this will go through and give you like a

374
00:11:28,880 --> 00:11:30,320
breakdown of how many instances are on

375
00:11:30,320 --> 00:11:32,720
v1 versus v2 so we have zero percent

376
00:11:32,720 --> 00:11:34,800
there we're doing some discovery of

377
00:11:34,800 --> 00:11:36,399
roles right to see oh yeah maybe some of

378
00:11:36,399 --> 00:11:38,320
these instances are using roles and then

379
00:11:38,320 --> 00:11:39,920
actually going through and updating all

380
00:11:39,920 --> 00:11:41,920
these and the tool will just go through

381
00:11:41,920 --> 00:11:44,640
and scroll and kind of hit the ec2 api

382
00:11:44,640 --> 00:11:46,880
and update those to say only use v2 on

383
00:11:46,880 --> 00:11:49,120
those instances

384
00:11:49,120 --> 00:11:50,480
and then yeah that's kind of it and then

385
00:11:50,480 --> 00:11:52,240
after that you can run the discover

386
00:11:52,240 --> 00:11:53,519
metadata

387
00:11:53,519 --> 00:11:54,880
command again and then it'll give you

388
00:11:54,880 --> 00:11:56,399
the metric on that

389
00:11:56,399 --> 00:11:57,680
and just a quick you know kind of

390
00:11:57,680 --> 00:11:59,360
reference on here this this is kind of

391
00:11:59,360 --> 00:12:01,360
where the code lives itself um that's my

392
00:12:01,360 --> 00:12:03,440
twitter handle and then i wanted to just

393
00:12:03,440 --> 00:12:04,880
give a quick shout out to canard so

394
00:12:04,880 --> 00:12:06,800
canard wrote cloudsplaining and a couple

395
00:12:06,800 --> 00:12:09,200
other cloud security tools as well

396
00:12:09,200 --> 00:12:11,200
super neat and helped with a lot of like

397
00:12:11,200 --> 00:12:12,240
these problems that's what i was

398
00:12:12,240 --> 00:12:14,639
thinking through along the way uh so

399
00:12:14,639 --> 00:12:16,079
definitely encourage folks to use a tool

400
00:12:16,079 --> 00:12:17,360
and if you have any questions please

401
00:12:17,360 --> 00:12:19,680
reach out to me and i'm definitely you

402
00:12:19,680 --> 00:12:21,279
know excited to see this come to life

403
00:12:21,279 --> 00:12:23,600
and i've seen so many folks downloaded

404
00:12:23,600 --> 00:12:25,760
over the last year or so and also i

405
00:12:25,760 --> 00:12:27,279
think it's kind of a problem that exists

406
00:12:27,279 --> 00:12:29,440
across the board there but yeah thanks

407
00:12:29,440 --> 00:12:30,399
for your time

408
00:12:30,399 --> 00:12:31,740
there's any questions

409
00:12:31,740 --> 00:12:39,220
[Applause]

410
00:12:46,160 --> 00:12:47,519
yeah so like kind of going back to the

411
00:12:47,519 --> 00:12:48,959
scp thing you could probably set that at

412
00:12:48,959 --> 00:12:50,639
the top level and then enforce it off

413
00:12:50,639 --> 00:12:51,839
the bat

414
00:12:51,839 --> 00:12:53,040
but if you have like stuff that's

415
00:12:53,040 --> 00:12:54,560
running on v1 you'd have to go in there

416
00:12:54,560 --> 00:12:57,680
and manually just make the change

417
00:13:00,079 --> 00:13:03,800
cool anybody else

418
00:13:06,320 --> 00:13:07,920
all right awesome

419
00:13:07,920 --> 00:13:10,320
thanks thanks again

420
00:13:10,320 --> 00:13:15,219
[Applause]

