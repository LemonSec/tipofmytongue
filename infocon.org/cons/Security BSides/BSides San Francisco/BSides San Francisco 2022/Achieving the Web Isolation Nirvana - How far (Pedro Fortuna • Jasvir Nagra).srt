1
00:00:00,240 --> 00:00:03,040
the next talk is titled as achieving the

2
00:00:03,040 --> 00:00:05,839
web isolation nirvana how far along are

3
00:00:05,839 --> 00:00:06,640
we

4
00:00:06,640 --> 00:00:09,679
the presenters are pedro fortuna

5
00:00:09,679 --> 00:00:13,120
and justfeed nagra he also goes by jazz

6
00:00:13,120 --> 00:00:15,120
both are representing j scrambler thank

7
00:00:15,120 --> 00:00:18,080
you over to you

8
00:00:19,199 --> 00:00:21,119
hello everyone

9
00:00:21,119 --> 00:00:23,760
it's great to be back to a real live

10
00:00:23,760 --> 00:00:26,400
stage and it's of great joy to be

11
00:00:26,400 --> 00:00:29,599
sharing it with my dear friend jasvir

12
00:00:29,599 --> 00:00:32,000
so our talk today will be about web

13
00:00:32,000 --> 00:00:33,280
isolation

14
00:00:33,280 --> 00:00:36,559
um it resulted from a retrospective

15
00:00:36,559 --> 00:00:39,520
thought exercise on the last 20 plus

16
00:00:39,520 --> 00:00:42,559
years of web isolation so what are we

17
00:00:42,559 --> 00:00:44,399
looking for we're looking for

18
00:00:44,399 --> 00:00:46,719
a series of

19
00:00:46,719 --> 00:00:50,239
principles or reasons that underlie what

20
00:00:50,239 --> 00:00:52,559
we have done as a community

21
00:00:52,559 --> 00:00:53,440
right

22
00:00:53,440 --> 00:00:56,000
what we've done wrong and

23
00:00:56,000 --> 00:00:57,920
what kinds of lessons we can learn from

24
00:00:57,920 --> 00:01:00,000
them and that's what's going to drive

25
00:01:00,000 --> 00:01:03,120
the structure of our talk today

26
00:01:03,120 --> 00:01:04,959
but before we get too far let's

27
00:01:04,959 --> 00:01:07,200
introduce ourselves so my name is pedro

28
00:01:07,200 --> 00:01:10,159
fortuna i'm a co-founder and cto of j

29
00:01:10,159 --> 00:01:12,240
scrambler and i've basically been

30
00:01:12,240 --> 00:01:15,200
working with security for as long as i

31
00:01:15,200 --> 00:01:17,840
can remember

32
00:01:18,080 --> 00:01:20,560
i guess that brings that to me

33
00:01:20,560 --> 00:01:22,560
my name is justfairnagra most people

34
00:01:22,560 --> 00:01:24,560
call me jazz that's what you should call

35
00:01:24,560 --> 00:01:27,040
me too uh and i guess i've been working

36
00:01:27,040 --> 00:01:29,840
in security for as long as uh pedro can

37
00:01:29,840 --> 00:01:32,240
remember

38
00:01:33,280 --> 00:01:36,320
so we want to start with a little story

39
00:01:36,320 --> 00:01:37,360
a pedro

40
00:01:37,360 --> 00:01:39,759
there's like 30 minutes remaining before

41
00:01:39,759 --> 00:01:40,960
happy hour

42
00:01:40,960 --> 00:01:43,040
and you want to do like we're the only

43
00:01:43,040 --> 00:01:44,960
people that stand between all of these

44
00:01:44,960 --> 00:01:46,240
people and

45
00:01:46,240 --> 00:01:47,119
uh

46
00:01:47,119 --> 00:01:49,280
a well-end drink

47
00:01:49,280 --> 00:01:52,399
you want to do story time yeah i mean

48
00:01:52,399 --> 00:01:54,320
we are on a movie theater so i thought

49
00:01:54,320 --> 00:01:56,799
that storytelling is the is actually the

50
00:01:56,799 --> 00:02:00,719
perfect spot to be doing it let's do it

51
00:02:00,719 --> 00:02:02,399
so we want to tell you a little story

52
00:02:02,399 --> 00:02:03,680
about the ship

53
00:02:03,680 --> 00:02:06,320
um which most of you have heard about

54
00:02:06,320 --> 00:02:10,160
you want to guess what ship this is

55
00:02:10,160 --> 00:02:11,200
yup

56
00:02:11,200 --> 00:02:14,319
the titanic yep

57
00:02:14,319 --> 00:02:16,480
so basically um

58
00:02:16,480 --> 00:02:18,800
it was built in belfast in northern

59
00:02:18,800 --> 00:02:20,000
ireland

60
00:02:20,000 --> 00:02:20,959
in their

61
00:02:20,959 --> 00:02:23,520
famous shipyard which i was actually

62
00:02:23,520 --> 00:02:26,239
lucky enough to visit some years ago and

63
00:02:26,239 --> 00:02:29,440
we want to talk about how it was built

64
00:02:29,440 --> 00:02:32,239
so many people don't know this but

65
00:02:32,239 --> 00:02:35,120
the titanic back then it was bleeding

66
00:02:35,120 --> 00:02:38,000
edge in many ways all right

67
00:02:38,000 --> 00:02:39,020
so um

68
00:02:39,020 --> 00:02:40,480
[Music]

69
00:02:40,480 --> 00:02:43,519
for instance the bottom of the ship was

70
00:02:43,519 --> 00:02:46,959
split into 16 water type compartments

71
00:02:46,959 --> 00:02:50,000
and it could withstand up to two

72
00:02:50,000 --> 00:02:53,120
adjacent compartments completely flooded

73
00:02:53,120 --> 00:02:54,480
without

74
00:02:54,480 --> 00:02:57,599
compromising the ship

75
00:02:58,000 --> 00:03:00,640
but depending on the specific location

76
00:03:00,640 --> 00:03:04,000
of the hit it could go as high as four

77
00:03:04,000 --> 00:03:07,280
adjacent compartments completely flooded

78
00:03:07,280 --> 00:03:09,519
okay so this technique is to ensure the

79
00:03:09,519 --> 00:03:11,680
stability of the screw of the of the

80
00:03:11,680 --> 00:03:12,480
ship

81
00:03:12,480 --> 00:03:15,440
uh despite the presence of damage

82
00:03:15,440 --> 00:03:18,319
so that's like the worst case scenario

83
00:03:18,319 --> 00:03:20,959
they could think of back then

84
00:03:20,959 --> 00:03:23,680
and that's why the titanic was deemed to

85
00:03:23,680 --> 00:03:26,879
be unsinkable

86
00:03:27,040 --> 00:03:30,319
but we all know how this story ended

87
00:03:30,319 --> 00:03:33,360
when the titanic hit the iceberg

88
00:03:33,360 --> 00:03:36,000
the six forward compartments

89
00:03:36,000 --> 00:03:38,319
were compromised

90
00:03:38,319 --> 00:03:40,799
and even though it didn't end well

91
00:03:40,799 --> 00:03:43,360
the compartmentation was actually a

92
00:03:43,360 --> 00:03:45,200
great idea

93
00:03:45,200 --> 00:03:47,840
so and it's still used in chip design to

94
00:03:47,840 --> 00:03:49,840
this day

95
00:03:49,840 --> 00:03:51,360
basically the

96
00:03:51,360 --> 00:03:54,239
basic idea is that damage to a single

97
00:03:54,239 --> 00:03:56,879
section of the ship won't compromise the

98
00:03:56,879 --> 00:03:58,480
other sections

99
00:03:58,480 --> 00:03:59,280
okay

100
00:03:59,280 --> 00:04:01,599
uh but the problem with the titanic was

101
00:04:01,599 --> 00:04:04,959
that its implementation was flawed

102
00:04:04,959 --> 00:04:08,879
but we'll tell you more about that later

103
00:04:10,239 --> 00:04:11,760
wait seriously you're going to leave

104
00:04:11,760 --> 00:04:13,599
this cliffhanger there

105
00:04:13,599 --> 00:04:15,200
fine why don't you tell us a little bit

106
00:04:15,200 --> 00:04:17,199
about web isolation a completely

107
00:04:17,199 --> 00:04:19,040
different topic seemingly

108
00:04:19,040 --> 00:04:21,040
right sure

109
00:04:21,040 --> 00:04:21,918
so

110
00:04:21,918 --> 00:04:22,720
the

111
00:04:22,720 --> 00:04:24,479
the first attempt

112
00:04:24,479 --> 00:04:25,440
to do

113
00:04:25,440 --> 00:04:27,919
web isolation inside the browser was

114
00:04:27,919 --> 00:04:30,800
introduced by the same origin policy to

115
00:04:30,800 --> 00:04:33,919
restrict how two cross-origin documents

116
00:04:33,919 --> 00:04:37,520
can interact with each other

117
00:04:37,680 --> 00:04:40,720
but restrict how if we can embed a

118
00:04:40,720 --> 00:04:42,400
third-party scripts being loaded

119
00:04:42,400 --> 00:04:45,040
directly from a third party server and

120
00:04:45,040 --> 00:04:46,800
it will actually have the same amount of

121
00:04:46,800 --> 00:04:48,960
privilege than any other script any

122
00:04:48,960 --> 00:04:52,080
first party script running on that page

123
00:04:52,080 --> 00:04:53,919
so it turns out that

124
00:04:53,919 --> 00:04:56,960
embedding is permitted as per the the

125
00:04:56,960 --> 00:05:00,720
same origin policy what is restricted is

126
00:05:00,720 --> 00:05:03,759
writing to or reading raw data from

127
00:05:03,759 --> 00:05:05,919
cross-origin documents

128
00:05:05,919 --> 00:05:08,240
so the reality is that the same origin

129
00:05:08,240 --> 00:05:11,759
policy is complex has lots of exceptions

130
00:05:11,759 --> 00:05:14,320
and to this day most developers don't

131
00:05:14,320 --> 00:05:16,880
fully understand it which is frequently

132
00:05:16,880 --> 00:05:20,400
the source of security issues

133
00:05:21,840 --> 00:05:25,120
a couple of years later we got iframes

134
00:05:25,120 --> 00:05:27,280
okay with which we can isolate two

135
00:05:27,280 --> 00:05:29,919
documents in different uh

136
00:05:29,919 --> 00:05:31,919
two scripts into different uh

137
00:05:31,919 --> 00:05:34,000
cross-origin documents

138
00:05:34,000 --> 00:05:36,400
but soon enough people would like

139
00:05:36,400 --> 00:05:38,479
started like poking holes through it

140
00:05:38,479 --> 00:05:40,960
trying and finding ways to have those

141
00:05:40,960 --> 00:05:42,720
cross-origin documents communicating

142
00:05:42,720 --> 00:05:44,639
between each other

143
00:05:44,639 --> 00:05:46,160
um and

144
00:05:46,160 --> 00:05:47,199
basically

145
00:05:47,199 --> 00:05:50,639
only 13 years later we we threw the

146
00:05:50,639 --> 00:05:53,840
towel and finally

147
00:05:53,840 --> 00:05:56,160
introduced or made it official by

148
00:05:56,160 --> 00:05:58,560
introducing the web messaging api with

149
00:05:58,560 --> 00:06:01,280
which two cross-origin documents can

150
00:06:01,280 --> 00:06:04,638
communicate voluntarily

151
00:06:05,039 --> 00:06:07,680
but that didn't fix all the problems uh

152
00:06:07,680 --> 00:06:10,880
iframes had too much power for instance

153
00:06:10,880 --> 00:06:13,360
an iframe document can navigate away the

154
00:06:13,360 --> 00:06:14,639
top window

155
00:06:14,639 --> 00:06:16,880
uh among other things

156
00:06:16,880 --> 00:06:18,000
and uh

157
00:06:18,000 --> 00:06:19,199
and basically

158
00:06:19,199 --> 00:06:21,440
it took a while but 13 years later we

159
00:06:21,440 --> 00:06:25,039
got iframe sandboxing with sandboxing we

160
00:06:25,039 --> 00:06:27,120
can greatly reduce

161
00:06:27,120 --> 00:06:29,440
uh the amount of privilege that iframe

162
00:06:29,440 --> 00:06:31,199
document has

163
00:06:31,199 --> 00:06:33,440
but at the same time we got a bunch of

164
00:06:33,440 --> 00:06:36,319
different attributes that with which we

165
00:06:36,319 --> 00:06:39,280
can relax some of these restrictions

166
00:06:39,280 --> 00:06:42,080
uh back

167
00:06:42,560 --> 00:06:44,560
roughly at the same time we got content

168
00:06:44,560 --> 00:06:46,800
security policy version one

169
00:06:46,800 --> 00:06:49,599
uh with which you can set a domain based

170
00:06:49,599 --> 00:06:51,039
allow listing

171
00:06:51,039 --> 00:06:53,360
which was later found to be completely

172
00:06:53,360 --> 00:06:57,440
broken plus it's hard to to manage

173
00:06:57,440 --> 00:07:00,080
later versions fixed it but they are not

174
00:07:00,080 --> 00:07:02,720
straightforward to set up

175
00:07:02,720 --> 00:07:06,240
but the main critique on csp is its lack

176
00:07:06,240 --> 00:07:09,599
of granularity i mean with csp you can

177
00:07:09,599 --> 00:07:12,319
either fully allow a script into the

178
00:07:12,319 --> 00:07:14,479
page and allow it to do whatever it

179
00:07:14,479 --> 00:07:15,680
wants

180
00:07:15,680 --> 00:07:16,720
or

181
00:07:16,720 --> 00:07:19,759
completely block that script

182
00:07:19,759 --> 00:07:22,400
similarly you can fully allow a domain

183
00:07:22,400 --> 00:07:24,000
to be contacted

184
00:07:24,000 --> 00:07:26,880
or fully block that domain so it has no

185
00:07:26,880 --> 00:07:29,360
granularity at all and ends up not

186
00:07:29,360 --> 00:07:32,560
working because of that

187
00:07:32,880 --> 00:07:35,280
so the main problem with this isolation

188
00:07:35,280 --> 00:07:37,599
and defense mechanisms is that people

189
00:07:37,599 --> 00:07:40,240
keep fighting them keep trying to open

190
00:07:40,240 --> 00:07:43,840
holes to relax them into getting them to

191
00:07:43,840 --> 00:07:46,800
work with for their applications

192
00:07:46,800 --> 00:07:50,160
jason p and porce are good examples of

193
00:07:50,160 --> 00:07:51,199
that

194
00:07:51,199 --> 00:07:55,039
um maybe if they were more flexible and

195
00:07:55,039 --> 00:07:55,919
and

196
00:07:55,919 --> 00:07:57,199
and granular

197
00:07:57,199 --> 00:07:58,960
uh people wouldn't

198
00:07:58,960 --> 00:08:01,919
find the need to to try to hope uh open

199
00:08:01,919 --> 00:08:04,400
holes on them

200
00:08:04,400 --> 00:08:07,360
uh can you go back a slide

201
00:08:07,360 --> 00:08:08,960
yep i've been talking to some people

202
00:08:08,960 --> 00:08:11,280
over lunch you really think that that

203
00:08:11,280 --> 00:08:14,639
small jason p hole represents the real

204
00:08:14,639 --> 00:08:16,479
size of jason p

205
00:08:16,479 --> 00:08:17,280
well

206
00:08:17,280 --> 00:08:19,919
uh i accept your critique

207
00:08:19,919 --> 00:08:21,440
but i

208
00:08:21,440 --> 00:08:23,360
i think jason p

209
00:08:23,360 --> 00:08:24,080
is

210
00:08:24,080 --> 00:08:26,800
is long gone so i prefer to reserve the

211
00:08:26,800 --> 00:08:29,280
bigger hole for the csp string we're

212
00:08:29,280 --> 00:08:31,520
gonna edit these slides after this talk

213
00:08:31,520 --> 00:08:34,640
okay that's fair

214
00:08:34,640 --> 00:08:36,880
so here you can see a timeline of the

215
00:08:36,880 --> 00:08:38,479
these features

216
00:08:38,479 --> 00:08:42,080
you will notice a huge gap between 97

217
00:08:42,080 --> 00:08:43,839
and 2009.

218
00:08:43,839 --> 00:08:45,680
so we really have to wonder what the

219
00:08:45,680 --> 00:08:47,839
browser people were doing

220
00:08:47,839 --> 00:08:50,480
what were doing during this period

221
00:08:50,480 --> 00:08:52,399
it was a comment on that as a browser

222
00:08:52,399 --> 00:08:53,760
person i'm

223
00:08:53,760 --> 00:08:57,040
embarrassed by that 10 years

224
00:08:58,240 --> 00:09:00,560
all right

225
00:09:03,600 --> 00:09:06,320
so pedro's described a whole bunch of

226
00:09:06,320 --> 00:09:08,959
browser primitives that have existed

227
00:09:08,959 --> 00:09:11,920
that we have used for isolation some of

228
00:09:11,920 --> 00:09:14,640
these properties

229
00:09:14,640 --> 00:09:16,480
work really well

230
00:09:16,480 --> 00:09:18,560
some of them less well

231
00:09:18,560 --> 00:09:20,880
but what is interesting the question

232
00:09:20,880 --> 00:09:22,800
that is interesting to me

233
00:09:22,800 --> 00:09:25,120
is

234
00:09:25,440 --> 00:09:28,720
can we use the browser primitives that

235
00:09:28,720 --> 00:09:32,000
browsers provide to build an isolation

236
00:09:32,000 --> 00:09:34,959
mechanism that is solid

237
00:09:34,959 --> 00:09:37,600
i believe that the answer is yes

238
00:09:37,600 --> 00:09:39,760
and you don't need to believe me

239
00:09:39,760 --> 00:09:40,640
uh

240
00:09:40,640 --> 00:09:44,560
we the community has built all kinds of

241
00:09:44,560 --> 00:09:47,600
interesting isolation mechanisms based

242
00:09:47,600 --> 00:09:50,640
on the primitives that browsers provide

243
00:09:50,640 --> 00:09:52,959
to build

244
00:09:52,959 --> 00:09:55,920
a wide variety of interesting isolation

245
00:09:55,920 --> 00:09:57,519
mechanisms

246
00:09:57,519 --> 00:10:00,560
that i'm going to go over

247
00:10:02,240 --> 00:10:03,440
all of these

248
00:10:03,440 --> 00:10:06,560
essentially boil down to one of two

249
00:10:06,560 --> 00:10:09,360
different mechanisms on the one hand you

250
00:10:09,360 --> 00:10:10,480
have

251
00:10:10,480 --> 00:10:12,959
transformation where you are changing

252
00:10:12,959 --> 00:10:16,000
the source code of the

253
00:10:16,000 --> 00:10:18,800
of of third parties or first parties on

254
00:10:18,800 --> 00:10:21,600
the other hand you have virtualization

255
00:10:21,600 --> 00:10:24,480
where you are changing the environment

256
00:10:24,480 --> 00:10:26,079
that the

257
00:10:26,079 --> 00:10:29,600
code that you're executing runs in and

258
00:10:29,600 --> 00:10:32,079
and essentially those are the only two

259
00:10:32,079 --> 00:10:34,240
real mechanisms that we have available

260
00:10:34,240 --> 00:10:35,680
to us

261
00:10:35,680 --> 00:10:39,519
i have plotted three different projects

262
00:10:39,519 --> 00:10:41,600
that i am familiar with

263
00:10:41,600 --> 00:10:44,560
that that do these there's a while

264
00:10:44,560 --> 00:10:47,120
there's a vast variety of other projects

265
00:10:47,120 --> 00:10:49,200
that also do this kind of thing there's

266
00:10:49,200 --> 00:10:52,000
uh google kaha way off on the on the

267
00:10:52,000 --> 00:10:54,320
corner there which does

268
00:10:54,320 --> 00:10:56,560
uh virtualization

269
00:10:56,560 --> 00:10:59,360
uh to remove the

270
00:10:59,360 --> 00:11:01,839
dangerous part to

271
00:11:01,839 --> 00:11:05,440
make the apis that are called uh less

272
00:11:05,440 --> 00:11:09,279
dangerous it also uses transformation to

273
00:11:09,279 --> 00:11:11,920
simply extract and throw away the

274
00:11:11,920 --> 00:11:14,320
dangerous parts of our pro of a

275
00:11:14,320 --> 00:11:16,640
third-party piece of code uh there's a

276
00:11:16,640 --> 00:11:18,800
project called js reg which some of you

277
00:11:18,800 --> 00:11:21,360
may be familiar with which uses a

278
00:11:21,360 --> 00:11:24,160
lighter weight transformation

279
00:11:24,160 --> 00:11:28,240
uses regular expressions to remove the

280
00:11:28,240 --> 00:11:31,360
known bad parts and throw those away and

281
00:11:31,360 --> 00:11:34,720
then we have j scrambler's web page

282
00:11:34,720 --> 00:11:36,959
integrity which pedro i'm sure can speak

283
00:11:36,959 --> 00:11:39,120
a lot more authoritatively about which

284
00:11:39,120 --> 00:11:40,240
uses

285
00:11:40,240 --> 00:11:42,959
mostly virtualization but also browser

286
00:11:42,959 --> 00:11:46,239
primitives to

287
00:11:46,480 --> 00:11:48,959
not just mitigate how bad some

288
00:11:48,959 --> 00:11:52,720
third-party code can be but also

289
00:11:52,720 --> 00:11:55,839
uses browser primitives to monitor what

290
00:11:55,839 --> 00:11:58,959
kinds of dom things dom mutations are

291
00:11:58,959 --> 00:12:00,399
occurring

292
00:12:00,399 --> 00:12:01,600
and essentially

293
00:12:01,600 --> 00:12:02,639
all

294
00:12:02,639 --> 00:12:04,880
uh virtualizat all

295
00:12:04,880 --> 00:12:07,760
sandboxing projects use some combination

296
00:12:07,760 --> 00:12:10,320
of virtualization and transformation in

297
00:12:10,320 --> 00:12:11,440
order to

298
00:12:11,440 --> 00:12:12,560
achieve

299
00:12:12,560 --> 00:12:13,760
the

300
00:12:13,760 --> 00:12:15,360
security properties that they are

301
00:12:15,360 --> 00:12:18,000
shooting for

302
00:12:18,160 --> 00:12:19,360
um

303
00:12:19,360 --> 00:12:22,839
but by a long shot this is my most

304
00:12:22,839 --> 00:12:26,399
favorite transformation a program

305
00:12:26,399 --> 00:12:29,440
transformation for security uh it might

306
00:12:29,440 --> 00:12:31,440
not look like much but it is actually

307
00:12:31,440 --> 00:12:34,000
the basis for almost every

308
00:12:34,000 --> 00:12:35,200
uh

309
00:12:35,200 --> 00:12:38,680
language based

310
00:12:39,200 --> 00:12:41,360
sandboxing mechanism ever

311
00:12:41,360 --> 00:12:44,079
ever executed what does this mean

312
00:12:44,079 --> 00:12:46,160
sorry pedro uh

313
00:12:46,160 --> 00:12:48,800
what do you have you have a series of

314
00:12:48,800 --> 00:12:51,040
functions

315
00:12:51,040 --> 00:12:52,880
uh alert

316
00:12:52,880 --> 00:12:55,360
functions that you are calling

317
00:12:55,360 --> 00:12:57,440
what are these you can think of them as

318
00:12:57,440 --> 00:13:00,480
system calls in the browser so these are

319
00:13:00,480 --> 00:13:02,320
functions that are provided by the

320
00:13:02,320 --> 00:13:04,560
browser that you are calling you also

321
00:13:04,560 --> 00:13:06,639
have these other properties you have

322
00:13:06,639 --> 00:13:09,120
strings and you have arrays which are

323
00:13:09,120 --> 00:13:12,079
native types provided by the browser and

324
00:13:12,079 --> 00:13:13,600
you also have functions that you

325
00:13:13,600 --> 00:13:16,639
yourself have written

326
00:13:17,279 --> 00:13:19,839
here's the deep piece of insight

327
00:13:19,839 --> 00:13:22,399
if instead of allowing

328
00:13:22,399 --> 00:13:25,040
the third-party code

329
00:13:25,040 --> 00:13:26,560
to use

330
00:13:26,560 --> 00:13:29,200
whatever the browser provides you

331
00:13:29,200 --> 00:13:32,160
instead allow the caller of this

332
00:13:32,160 --> 00:13:35,200
third-party function to provide

333
00:13:35,200 --> 00:13:37,680
what functions are called what system

334
00:13:37,680 --> 00:13:40,160
calls are called what native types are

335
00:13:40,160 --> 00:13:42,480
called

336
00:13:43,360 --> 00:13:47,519
what you get is the ability to control

337
00:13:47,519 --> 00:13:50,480
how much power a third-party piece of

338
00:13:50,480 --> 00:13:53,440
function gets to have if you take every

339
00:13:53,440 --> 00:13:56,079
arbitrary piece of code and you turn it

340
00:13:56,079 --> 00:13:59,600
into a closed function where every piece

341
00:13:59,600 --> 00:14:01,440
of code is

342
00:14:01,440 --> 00:14:05,120
controlled by the caller you get a kind

343
00:14:05,120 --> 00:14:07,839
of sandboxing which is extremely

344
00:14:07,839 --> 00:14:10,399
powerful

345
00:14:10,800 --> 00:14:12,880
not only that of course you can do this

346
00:14:12,880 --> 00:14:14,560
with javascript can you do this with

347
00:14:14,560 --> 00:14:17,519
html and css as well and the answer is

348
00:14:17,519 --> 00:14:20,000
yes in fact it's even easier to do it

349
00:14:20,000 --> 00:14:22,320
with html it's even easier to do it with

350
00:14:22,320 --> 00:14:25,120
css why because

351
00:14:25,120 --> 00:14:28,240
css and html are less expressive

352
00:14:28,240 --> 00:14:29,760
than

353
00:14:29,760 --> 00:14:32,800
then javascript so take for example

354
00:14:32,800 --> 00:14:34,110
the code on the

355
00:14:34,110 --> 00:14:37,190
[Music]

356
00:14:37,680 --> 00:14:39,360
on your right

357
00:14:39,360 --> 00:14:40,720
where

358
00:14:40,720 --> 00:14:44,639
a piece of code a piece of styles sheet

359
00:14:44,639 --> 00:14:49,120
was able to change arbitrary b tags

360
00:14:49,120 --> 00:14:51,440
to have them have the color blue by

361
00:14:51,440 --> 00:14:52,800
prepending

362
00:14:52,800 --> 00:14:54,959
dot gadget one two three

363
00:14:54,959 --> 00:14:57,199
what what have you achieved you have

364
00:14:57,199 --> 00:15:00,639
made it such that the number of html

365
00:15:00,639 --> 00:15:02,880
elements that are affected by this

366
00:15:02,880 --> 00:15:06,160
particular css rule has been limited to

367
00:15:06,160 --> 00:15:08,880
those that are the children of classes

368
00:15:08,880 --> 00:15:10,320
that have

369
00:15:10,320 --> 00:15:12,800
gadget one two three as a class

370
00:15:12,800 --> 00:15:16,560
you have limited the sections of code on

371
00:15:16,560 --> 00:15:18,880
your page that some particular

372
00:15:18,880 --> 00:15:21,440
third-party css can affect

373
00:15:21,440 --> 00:15:24,160
similarly with html you are able to

374
00:15:24,160 --> 00:15:27,440
subset the html so that only some small

375
00:15:27,440 --> 00:15:31,759
part of your html can be affected by

376
00:15:31,759 --> 00:15:33,920
third-party code

377
00:15:33,920 --> 00:15:35,920
so that's um

378
00:15:35,920 --> 00:15:37,360
tool number one

379
00:15:37,360 --> 00:15:39,440
in your security toolbox what is the

380
00:15:39,440 --> 00:15:40,560
second one

381
00:15:40,560 --> 00:15:43,360
the second one is virtualization now i

382
00:15:43,360 --> 00:15:45,839
call it virtualization

383
00:15:45,839 --> 00:15:48,240
it's really just polyfills and you all

384
00:15:48,240 --> 00:15:50,160
know what polyfills are right what are

385
00:15:50,160 --> 00:15:52,800
polyfills polyfills are where

386
00:15:52,800 --> 00:15:54,399
you have some browser

387
00:15:54,399 --> 00:15:56,480
that's not able to provide all of the

388
00:15:56,480 --> 00:15:58,720
functionality that you need

389
00:15:58,720 --> 00:16:01,040
what do you do you end up writing

390
00:16:01,040 --> 00:16:04,480
something which plugs that gap it

391
00:16:04,480 --> 00:16:06,560
emulates the missing piece of

392
00:16:06,560 --> 00:16:08,480
functionality all that virtualization

393
00:16:08,480 --> 00:16:10,959
does is essentially the same thing but

394
00:16:10,959 --> 00:16:13,680
it also allows you to plug in the same

395
00:16:13,680 --> 00:16:16,880
kinds of functions in the cases where

396
00:16:16,880 --> 00:16:18,480
the functionality was provided

397
00:16:18,480 --> 00:16:20,639
originally here's what i mean

398
00:16:20,639 --> 00:16:23,600
so let's say let's say that you have the

399
00:16:23,600 --> 00:16:26,880
need to provide date to some third-party

400
00:16:26,880 --> 00:16:28,000
function

401
00:16:28,000 --> 00:16:30,880
in this particular case you don't care

402
00:16:30,880 --> 00:16:32,160
maybe you don't care that this

403
00:16:32,160 --> 00:16:34,480
third-party function can do some kind of

404
00:16:34,480 --> 00:16:37,759
uh cash timing attacks you you you know

405
00:16:37,759 --> 00:16:39,519
you trust that this third party code

406
00:16:39,519 --> 00:16:42,000
cannot do this and what will you do you

407
00:16:42,000 --> 00:16:43,120
will provide

408
00:16:43,120 --> 00:16:46,240
an identity version of date you provide

409
00:16:46,240 --> 00:16:49,120
the original date function to to this

410
00:16:49,120 --> 00:16:51,279
third-party code

411
00:16:51,279 --> 00:16:55,519
in another case you want to be like oh

412
00:17:01,759 --> 00:17:04,400
i think the browser just crashed

413
00:17:04,400 --> 00:17:06,640
oh

414
00:17:16,839 --> 00:17:19,039
 this would be an excellent time to

415
00:17:19,039 --> 00:17:22,319
make fun of some browser right

416
00:17:23,439 --> 00:17:25,839
don't do this at home

417
00:17:25,839 --> 00:17:28,480
all right um i was genuinely about to

418
00:17:28,480 --> 00:17:30,320
make fun of a browser i'm not going to

419
00:17:30,320 --> 00:17:32,320
do that now wait i'm still going to do

420
00:17:32,320 --> 00:17:33,039
that

421
00:17:33,039 --> 00:17:36,480
okay so activex for those of you young

422
00:17:36,480 --> 00:17:38,960
enough to remember used to be a part of

423
00:17:38,960 --> 00:17:40,960
a browser that we are very happily

424
00:17:40,960 --> 00:17:43,600
gotten rid of mostly

425
00:17:43,600 --> 00:17:45,919
that that provided too much power and if

426
00:17:45,919 --> 00:17:49,679
you if you provided activex access to

427
00:17:49,679 --> 00:17:51,360
some third-party code it would be able

428
00:17:51,360 --> 00:17:53,520
to do much more than you were wanting to

429
00:17:53,520 --> 00:17:55,679
do

430
00:17:56,160 --> 00:17:58,000
but what you might want to be able to do

431
00:17:58,000 --> 00:18:00,880
is allow people allow some third party

432
00:18:00,880 --> 00:18:03,600
to have xhr access but you don't want to

433
00:18:03,600 --> 00:18:05,919
be able to allow it to xhr to some

434
00:18:05,919 --> 00:18:08,000
arbitrary place so what do you do you

435
00:18:08,000 --> 00:18:10,559
use virtualization to provide an

436
00:18:10,559 --> 00:18:13,679
attenuated version of xhr an xhr that's

437
00:18:13,679 --> 00:18:15,440
able to do all of the things that xhr

438
00:18:15,440 --> 00:18:16,640
can do

439
00:18:16,640 --> 00:18:19,600
but only to the origins you control or

440
00:18:19,600 --> 00:18:21,120
very maybe

441
00:18:21,120 --> 00:18:23,840
xhr via some particular proxy and now

442
00:18:23,840 --> 00:18:25,760
all of a sudden you've

443
00:18:25,760 --> 00:18:28,400
largely limited the amount of access

444
00:18:28,400 --> 00:18:30,799
that this xhr has how did you do that

445
00:18:30,799 --> 00:18:33,760
you provided an attenuated version a new

446
00:18:33,760 --> 00:18:36,880
version of xhr polyfill version of xhr

447
00:18:36,880 --> 00:18:38,960
that is only able to do a subset of

448
00:18:38,960 --> 00:18:41,360
things that xhr can do and this is a

449
00:18:41,360 --> 00:18:43,200
very powerful thing because let's say

450
00:18:43,200 --> 00:18:44,799
you happen to have a browser that i was

451
00:18:44,799 --> 00:18:46,799
about to make fun of that did not

452
00:18:46,799 --> 00:18:49,120
provide you xhr but it provided you with

453
00:18:49,120 --> 00:18:51,200
a much bigger ability it provided you

454
00:18:51,200 --> 00:18:52,480
with activex

455
00:18:52,480 --> 00:18:54,880
much bigger but what you were able to do

456
00:18:54,880 --> 00:18:57,360
is provided an attenuated version a

457
00:18:57,360 --> 00:19:00,799
smaller version that used activex but

458
00:19:00,799 --> 00:19:03,919
emulated what xhr did

459
00:19:03,919 --> 00:19:06,320
right like so you can provide attenuated

460
00:19:06,320 --> 00:19:08,320
versions of document you can provide

461
00:19:08,320 --> 00:19:10,240
attenuated versions of location what

462
00:19:10,240 --> 00:19:12,080
does attenuated mean in this case it

463
00:19:12,080 --> 00:19:13,520
means that you've

464
00:19:13,520 --> 00:19:16,640
largely limited what access this third

465
00:19:16,640 --> 00:19:18,799
party code has access to which means

466
00:19:18,799 --> 00:19:20,559
that the attack surface that you are

467
00:19:20,559 --> 00:19:23,200
providing to any particular given

468
00:19:23,200 --> 00:19:27,120
third-party service is much smaller

469
00:19:27,120 --> 00:19:29,439
um

470
00:19:30,799 --> 00:19:31,840
oh

471
00:19:31,840 --> 00:19:34,799
am i going in the wrong direction

472
00:19:34,799 --> 00:19:36,400
the third thing

473
00:19:36,400 --> 00:19:38,559
that's the second control the third

474
00:19:38,559 --> 00:19:41,039
control that i am providing

475
00:19:41,039 --> 00:19:41,840
uh

476
00:19:41,840 --> 00:19:44,480
what do you want to have look

477
00:19:44,480 --> 00:19:47,679
every isolation mechanism that one has

478
00:19:47,679 --> 00:19:49,919
has holes in it

479
00:19:49,919 --> 00:19:51,760
we all know this to be true in fact this

480
00:19:51,760 --> 00:19:54,880
conference is an example is evidence

481
00:19:54,880 --> 00:19:57,520
that every isolation mechanism every

482
00:19:57,520 --> 00:19:59,760
sandboxing mechanism that we have has

483
00:19:59,760 --> 00:20:01,760
holes in it sooner or later the

484
00:20:01,760 --> 00:20:05,600
cleverness of attackers like the people

485
00:20:05,600 --> 00:20:09,120
in this room the stupidity of uh the

486
00:20:09,120 --> 00:20:11,039
sandboxing people like the people on the

487
00:20:11,039 --> 00:20:13,440
stage is such that

488
00:20:13,440 --> 00:20:15,840
uh sooner or later it's going to break

489
00:20:15,840 --> 00:20:18,400
it is going to break

490
00:20:18,400 --> 00:20:21,200
that's not what the important part is

491
00:20:21,200 --> 00:20:24,159
what is important is that when it breaks

492
00:20:24,159 --> 00:20:26,480
we know that it has broken and we know

493
00:20:26,480 --> 00:20:28,799
the ways in which it has broken and we

494
00:20:28,799 --> 00:20:30,400
can do something about it what do we

495
00:20:30,400 --> 00:20:33,679
need for that what we need is two things

496
00:20:33,679 --> 00:20:36,880
we need to be able to know

497
00:20:36,880 --> 00:20:39,039
what is happening out in the wild on our

498
00:20:39,039 --> 00:20:41,919
web pages and then we need a closed

499
00:20:41,919 --> 00:20:45,360
feedback loop such that when it happens

500
00:20:45,360 --> 00:20:47,760
we are able to do something about it

501
00:20:47,760 --> 00:20:49,440
now

502
00:20:49,440 --> 00:20:50,960
one of the things that you can use is

503
00:20:50,960 --> 00:20:53,520
virtualization virtualization means that

504
00:20:53,520 --> 00:20:55,840
every time you're using an api not only

505
00:20:55,840 --> 00:20:58,720
does it do what it is says on the tin

506
00:20:58,720 --> 00:21:01,200
what it says it's going to do it can

507
00:21:01,200 --> 00:21:04,320
also do some additional action like send

508
00:21:04,320 --> 00:21:06,960
a message back to us to say hey

509
00:21:06,960 --> 00:21:09,200
in addition to sending an xhr which we

510
00:21:09,200 --> 00:21:12,320
weren't expecting this piece of code did

511
00:21:12,320 --> 00:21:13,919
this extra thing

512
00:21:13,919 --> 00:21:16,080
if you want a simpler example of this

513
00:21:16,080 --> 00:21:18,640
csp uri reports are an example it

514
00:21:18,640 --> 00:21:21,280
doesn't use virtualization but it gives

515
00:21:21,280 --> 00:21:24,960
you visibility into what is happening

516
00:21:24,960 --> 00:21:25,919
or

517
00:21:25,919 --> 00:21:27,039
that

518
00:21:27,039 --> 00:21:28,799
what is happening

519
00:21:28,799 --> 00:21:31,360
that is resulting in vulnerabilities on

520
00:21:31,360 --> 00:21:34,720
your web page being taken advantage of

521
00:21:34,720 --> 00:21:38,159
by attackers right you get reports on

522
00:21:38,159 --> 00:21:39,679
how these vulnerabilities are being

523
00:21:39,679 --> 00:21:42,000
taken advantage of

524
00:21:42,000 --> 00:21:44,720
oh in order to do this what do you need

525
00:21:44,720 --> 00:21:47,520
you need collectors which collect

526
00:21:47,520 --> 00:21:49,840
messages events from what is happening

527
00:21:49,840 --> 00:21:52,400
in the wild you need analyzers that

528
00:21:52,400 --> 00:21:54,720
collate all of this information into

529
00:21:54,720 --> 00:21:56,480
coherent

530
00:21:56,480 --> 00:21:59,200
reports and then what you need further

531
00:21:59,200 --> 00:22:01,600
is visualizers and decoders that

532
00:22:01,600 --> 00:22:04,480
summarize and visualize and give you

533
00:22:04,480 --> 00:22:06,400
some action that you can take as a

534
00:22:06,400 --> 00:22:08,640
result of seeing what is happening in

535
00:22:08,640 --> 00:22:11,039
the wild

536
00:22:11,440 --> 00:22:11,890
um

537
00:22:11,890 --> 00:22:15,039
[Music]

538
00:22:15,039 --> 00:22:16,640
the thing that i want you to take away

539
00:22:16,640 --> 00:22:19,440
from this talk is

540
00:22:19,440 --> 00:22:21,679
the principles that underlie all of

541
00:22:21,679 --> 00:22:24,159
these different things if you

542
00:22:24,159 --> 00:22:26,799
think about what is the

543
00:22:26,799 --> 00:22:30,799
message of the theme of this particular

544
00:22:30,799 --> 00:22:33,679
uh b-sides it is

545
00:22:33,679 --> 00:22:35,919
what is it that it takes for us to get

546
00:22:35,919 --> 00:22:38,080
off the ground and for us to get off the

547
00:22:38,080 --> 00:22:40,720
ground instead of having a large number

548
00:22:40,720 --> 00:22:43,679
of ad hoc responses to individual

549
00:22:43,679 --> 00:22:45,760
attacks what we need is general

550
00:22:45,760 --> 00:22:47,840
principles and i'm going to describe

551
00:22:47,840 --> 00:22:50,559
three general principles that i feel

552
00:22:50,559 --> 00:22:52,000
underlie

553
00:22:52,000 --> 00:22:55,280
the idea that we want which gives us web

554
00:22:55,280 --> 00:22:56,480
isolation

555
00:22:56,480 --> 00:22:58,240
principle number one

556
00:22:58,240 --> 00:23:00,559
compartment size

557
00:23:00,559 --> 00:23:02,960
the size of the units of isolation is

558
00:23:02,960 --> 00:23:06,080
very important you can imagine having

559
00:23:06,080 --> 00:23:08,880
the entire origin or you can have a

560
00:23:08,880 --> 00:23:12,240
domain you can have a web page you can

561
00:23:12,240 --> 00:23:15,039
have an individual script

562
00:23:15,039 --> 00:23:17,919
you can have an individual api you can

563
00:23:17,919 --> 00:23:20,559
have a tiny little action

564
00:23:20,559 --> 00:23:22,640
and each one of these

565
00:23:22,640 --> 00:23:23,679
gives you

566
00:23:23,679 --> 00:23:27,200
finer and finer granular control over

567
00:23:27,200 --> 00:23:28,000
what

568
00:23:28,000 --> 00:23:30,080
third parties are able to do on your

569
00:23:30,080 --> 00:23:31,520
websites

570
00:23:31,520 --> 00:23:32,559
now

571
00:23:32,559 --> 00:23:35,600
the advantage is the finer grained

572
00:23:35,600 --> 00:23:37,760
control you have

573
00:23:37,760 --> 00:23:39,919
the more control you have over what

574
00:23:39,919 --> 00:23:41,840
amount of damage

575
00:23:41,840 --> 00:23:45,520
your third party can do on you there's a

576
00:23:45,520 --> 00:23:47,840
very favorite phrase that i use every

577
00:23:47,840 --> 00:23:50,799
time somebody says do you trust me or do

578
00:23:50,799 --> 00:23:53,760
you trust the script instead i reframe

579
00:23:53,760 --> 00:23:55,360
that question as

580
00:23:55,360 --> 00:23:57,600
what is the extent to which you are

581
00:23:57,600 --> 00:23:59,440
vulnerable and the smaller the

582
00:23:59,440 --> 00:24:02,320
granularity the smaller the extent to

583
00:24:02,320 --> 00:24:04,960
which you are vulnerable to a particular

584
00:24:04,960 --> 00:24:06,960
script or to a particular function or to

585
00:24:06,960 --> 00:24:08,880
a particular action

586
00:24:08,880 --> 00:24:10,559
on the other hand

587
00:24:10,559 --> 00:24:12,000
what you have

588
00:24:12,000 --> 00:24:15,520
is the finer grained your

589
00:24:15,520 --> 00:24:17,919
level of granularity is the harder it is

590
00:24:17,919 --> 00:24:21,120
to set up like the more configuration it

591
00:24:21,120 --> 00:24:23,919
takes the more you have to think about

592
00:24:23,919 --> 00:24:26,320
how much do i want to make myself

593
00:24:26,320 --> 00:24:28,320
vulnerable to this script or to this

594
00:24:28,320 --> 00:24:30,720
script or to this script and unless you

595
00:24:30,720 --> 00:24:32,640
have some mechanism

596
00:24:32,640 --> 00:24:36,640
some tooling that gives you

597
00:24:36,640 --> 00:24:39,200
automated control over the decisions

598
00:24:39,200 --> 00:24:40,640
that you have to take you are

599
00:24:40,640 --> 00:24:42,559
overwhelmed by the decisions that you

600
00:24:42,559 --> 00:24:44,320
are needing to make

601
00:24:44,320 --> 00:24:47,200
size matters and the smaller

602
00:24:47,200 --> 00:24:49,760
is better

603
00:24:50,000 --> 00:24:52,640
the second thing is isolation material

604
00:24:52,640 --> 00:24:53,600
now

605
00:24:53,600 --> 00:24:57,440
the stronger our isolation mechanism is

606
00:24:57,440 --> 00:24:59,760
the better off we are

607
00:24:59,760 --> 00:25:02,080
the problem is that the mechanisms that

608
00:25:02,080 --> 00:25:05,279
we use for isolation today were built

609
00:25:05,279 --> 00:25:06,559
using

610
00:25:06,559 --> 00:25:09,520
well built for a web

611
00:25:09,520 --> 00:25:12,159
that we have long stopped using to

612
00:25:12,159 --> 00:25:14,480
develop developers develop in a very

613
00:25:14,480 --> 00:25:17,840
different way pedro talked about csp and

614
00:25:17,840 --> 00:25:19,200
he talked about

615
00:25:19,200 --> 00:25:22,320
iframes but in each one of these cases

616
00:25:22,320 --> 00:25:24,880
because the way in which we develop web

617
00:25:24,880 --> 00:25:26,320
applications we don't develop web

618
00:25:26,320 --> 00:25:28,720
applications where it's individual pages

619
00:25:28,720 --> 00:25:30,799
right we develop web applications that

620
00:25:30,799 --> 00:25:33,039
are single page apps we develop web

621
00:25:33,039 --> 00:25:35,360
applications very differently from when

622
00:25:35,360 --> 00:25:37,919
these security mechanisms were developed

623
00:25:37,919 --> 00:25:42,320
what do developers do when they face

624
00:25:42,400 --> 00:25:44,400
impedance on getting

625
00:25:44,400 --> 00:25:45,679
things done

626
00:25:45,679 --> 00:25:47,760
what they do is come around come with

627
00:25:47,760 --> 00:25:51,039
workarounds they drill holes into the

628
00:25:51,039 --> 00:25:53,200
isolation mechanisms that browsers

629
00:25:53,200 --> 00:25:55,120
provide and that's fantastic they're

630
00:25:55,120 --> 00:25:56,960
getting their work done

631
00:25:56,960 --> 00:25:59,039
the problem is from a security point of

632
00:25:59,039 --> 00:26:01,520
view every hole that they drill

633
00:26:01,520 --> 00:26:05,039
makes it harder for the materials to

634
00:26:05,039 --> 00:26:08,080
provide the isolation if you have a ship

635
00:26:08,080 --> 00:26:10,799
what you need is something that is firm

636
00:26:10,799 --> 00:26:13,520
each of the compartments need solid

637
00:26:13,520 --> 00:26:16,240
foundations and essentially by

638
00:26:16,240 --> 00:26:18,320
working against the developers

639
00:26:18,320 --> 00:26:20,720
mechanisms for development we make it

640
00:26:20,720 --> 00:26:22,640
harder for developers to get their

641
00:26:22,640 --> 00:26:25,919
things done and they drill holes and

642
00:26:25,919 --> 00:26:27,919
weaken the material materials that we

643
00:26:27,919 --> 00:26:29,760
use for isolation

644
00:26:29,760 --> 00:26:31,600
which brings me to the third point which

645
00:26:31,600 --> 00:26:35,520
is visibility and user-friendliness

646
00:26:36,240 --> 00:26:38,799
do i say this i say this right did you

647
00:26:38,799 --> 00:26:42,400
know that developers are people too

648
00:26:43,520 --> 00:26:46,240
developers are people too and they

649
00:26:46,240 --> 00:26:49,279
need user friendliness on the developer

650
00:26:49,279 --> 00:26:52,799
side right any time that we have apis

651
00:26:52,799 --> 00:26:55,679
for security that make developers jobs

652
00:26:55,679 --> 00:26:58,400
harder what they do is come up with

653
00:26:58,400 --> 00:27:01,600
mechanisms to work around what it is

654
00:27:01,600 --> 00:27:03,840
that we are doing to save them to

655
00:27:03,840 --> 00:27:07,240
protect them

656
00:27:07,360 --> 00:27:10,400
the other thing is visibility sooner or

657
00:27:10,400 --> 00:27:13,279
later each one of these mechanisms fail

658
00:27:13,279 --> 00:27:16,320
and what we need is visibility

659
00:27:16,320 --> 00:27:18,640
when these mechanisms are failing if you

660
00:27:18,640 --> 00:27:20,880
had a ship let's say

661
00:27:20,880 --> 00:27:23,440
you would need an outer hull and an

662
00:27:23,440 --> 00:27:25,360
inner hull and every time the outer hole

663
00:27:25,360 --> 00:27:27,360
is breached you want to know about it

664
00:27:27,360 --> 00:27:29,279
whenever the inner hull is breached you

665
00:27:29,279 --> 00:27:31,760
want to know about it why not because

666
00:27:31,760 --> 00:27:32,720
you know

667
00:27:32,720 --> 00:27:35,039
it gives you somebody to blame but it

668
00:27:35,039 --> 00:27:37,600
gives you the opportunity to work out

669
00:27:37,600 --> 00:27:40,480
how to respond in a way that lets you

670
00:27:40,480 --> 00:27:41,520
fix it

671
00:27:41,520 --> 00:27:43,600
complexity is the other part of this

672
00:27:43,600 --> 00:27:45,440
there are a number of things that

673
00:27:45,440 --> 00:27:48,640
developers need to keep in mind keeps

674
00:27:48,640 --> 00:27:51,360
growing it's very very hard i i walked

675
00:27:51,360 --> 00:27:54,720
around the the vendor floor today

676
00:27:54,720 --> 00:27:55,919
and

677
00:27:55,919 --> 00:27:58,240
i feel like i have a large amount of

678
00:27:58,240 --> 00:28:00,799
expertise in the security field i've

679
00:28:00,799 --> 00:28:03,200
been a member of the security community

680
00:28:03,200 --> 00:28:05,039
for a long while and there's large

681
00:28:05,039 --> 00:28:06,480
numbers of things that i don't even

682
00:28:06,480 --> 00:28:09,760
understand and i worry about developers

683
00:28:09,760 --> 00:28:12,000
having to face a similar kind of

684
00:28:12,000 --> 00:28:13,919
complexity what we need is something

685
00:28:13,919 --> 00:28:16,399
that aligns sufficiently well that

686
00:28:16,399 --> 00:28:18,799
developers understand

687
00:28:18,799 --> 00:28:20,480
what security mechanisms they're

688
00:28:20,480 --> 00:28:22,880
employing and where the failure modes of

689
00:28:22,880 --> 00:28:25,360
those are

690
00:28:25,679 --> 00:28:27,279
i think that this brings us back to our

691
00:28:27,279 --> 00:28:28,399
cliffhanger

692
00:28:28,399 --> 00:28:30,559
what do you think yeah

693
00:28:30,559 --> 00:28:33,919
so we promised to tell you exactly

694
00:28:33,919 --> 00:28:35,840
why the implementation of the titanic

695
00:28:35,840 --> 00:28:37,120
was flawed

696
00:28:37,120 --> 00:28:38,960
basically because the compartments were

697
00:28:38,960 --> 00:28:40,640
still too big

698
00:28:40,640 --> 00:28:43,200
and definitely the materials were not

699
00:28:43,200 --> 00:28:45,919
iceberg ready so it would need stronger

700
00:28:45,919 --> 00:28:48,240
materials

701
00:28:48,240 --> 00:28:50,960
the damage model obviously

702
00:28:50,960 --> 00:28:53,600
was incomplete or incorrect

703
00:28:53,600 --> 00:28:56,559
which translating to our context means

704
00:28:56,559 --> 00:28:59,760
that the threat model was wrong

705
00:28:59,760 --> 00:29:02,000
and last but not least lack of

706
00:29:02,000 --> 00:29:03,919
visibility i mean

707
00:29:03,919 --> 00:29:06,000
if someone had spotted

708
00:29:06,000 --> 00:29:08,480
the iceberg in time they wouldn't even

709
00:29:08,480 --> 00:29:11,039
have to test the the remaining like

710
00:29:11,039 --> 00:29:13,279
safety features

711
00:29:13,279 --> 00:29:14,799
so definitely

712
00:29:14,799 --> 00:29:17,600
visibility and analytics which is an

713
00:29:17,600 --> 00:29:19,679
interpretation of what we see

714
00:29:19,679 --> 00:29:24,159
are essential for a good defense

715
00:29:24,159 --> 00:29:26,640
and now we are presenting some demos

716
00:29:26,640 --> 00:29:29,520
so uh we'll be using the same scenario

717
00:29:29,520 --> 00:29:31,360
across four demos

718
00:29:31,360 --> 00:29:34,640
which is a mock-up online banking login

719
00:29:34,640 --> 00:29:36,080
page

720
00:29:36,080 --> 00:29:39,360
that has one third party a chat bot

721
00:29:39,360 --> 00:29:42,000
and in some of the runs this chatbot

722
00:29:42,000 --> 00:29:45,039
will be replaced by a malicious version

723
00:29:45,039 --> 00:29:47,760
which will try to capture the login

724
00:29:47,760 --> 00:29:50,320
credentials and exfiltrate them

725
00:29:50,320 --> 00:29:52,080
at the bottom of the page you'll see

726
00:29:52,080 --> 00:29:54,640
some controls they are used to

727
00:29:54,640 --> 00:29:56,559
to basically to configure

728
00:29:56,559 --> 00:29:58,880
to reload the page with different demo

729
00:29:58,880 --> 00:30:00,880
settings

730
00:30:00,880 --> 00:30:04,559
so let's start with the baseline

731
00:30:04,640 --> 00:30:09,240
so here is the the page

732
00:30:09,520 --> 00:30:12,159
and right now we don't have any defense

733
00:30:12,159 --> 00:30:14,880
any isolation mechanism so this is on

734
00:30:14,880 --> 00:30:17,200
purpose to see what happens when

735
00:30:17,200 --> 00:30:19,840
isolation is lagging so this is a very

736
00:30:19,840 --> 00:30:22,880
simple website it mostly has first party

737
00:30:22,880 --> 00:30:26,159
codes loaded from virtualbank.com

738
00:30:26,159 --> 00:30:28,960
and it has one third party loaded from

739
00:30:28,960 --> 00:30:30,640
chatbot.com

740
00:30:30,640 --> 00:30:34,320
so you're already seeing the third party

741
00:30:34,320 --> 00:30:37,600
this is the non-malicious version it's

742
00:30:37,600 --> 00:30:40,320
it's very simple script uh it doesn't do

743
00:30:40,320 --> 00:30:41,200
a lot

744
00:30:41,200 --> 00:30:43,279
uh because it's a mock-up script all

745
00:30:43,279 --> 00:30:44,320
right

746
00:30:44,320 --> 00:30:46,399
um so the important

747
00:30:46,399 --> 00:30:48,080
thing is to understand that it's being

748
00:30:48,080 --> 00:30:50,080
loaded from the third party now that for

749
00:30:50,080 --> 00:30:52,640
a third party can very easily be

750
00:30:52,640 --> 00:30:53,919
compromised

751
00:30:53,919 --> 00:30:56,080
and it has

752
00:30:56,080 --> 00:30:57,679
a direct way

753
00:30:57,679 --> 00:31:01,039
to load arbitrary codes into every user

754
00:31:01,039 --> 00:31:04,559
session of this website all right so

755
00:31:04,559 --> 00:31:06,000
next

756
00:31:06,000 --> 00:31:09,760
we'll show you precisely that

757
00:31:10,799 --> 00:31:12,880
so i'll skip the waiting parts just to

758
00:31:12,880 --> 00:31:14,480
keep this moving

759
00:31:14,480 --> 00:31:16,399
and we'll check the box of the

760
00:31:16,399 --> 00:31:18,880
compromise third party and reload the

761
00:31:18,880 --> 00:31:21,200
page

762
00:31:22,080 --> 00:31:24,399
and now you're seeing the malicious

763
00:31:24,399 --> 00:31:26,640
version let me stop here

764
00:31:26,640 --> 00:31:29,519
so as per the same origin policy this

765
00:31:29,519 --> 00:31:31,279
script is embedded which means that it

766
00:31:31,279 --> 00:31:33,840
has full access to the page including

767
00:31:33,840 --> 00:31:35,600
that login form

768
00:31:35,600 --> 00:31:38,159
all right so at any given moment it can

769
00:31:38,159 --> 00:31:40,799
access the form collect the data there

770
00:31:40,799 --> 00:31:43,200
and exit it in fact the code that we're

771
00:31:43,200 --> 00:31:44,720
seeing

772
00:31:44,720 --> 00:31:47,279
that code is setting an on submit event

773
00:31:47,279 --> 00:31:48,320
handler

774
00:31:48,320 --> 00:31:50,399
so it's overriding the event handler

775
00:31:50,399 --> 00:31:52,320
that was there before

776
00:31:52,320 --> 00:31:55,200
and when the form is submitted it will

777
00:31:55,200 --> 00:31:56,399
collect

778
00:31:56,399 --> 00:31:58,480
it will do what we sometimes call form

779
00:31:58,480 --> 00:31:59,519
jacking

780
00:31:59,519 --> 00:32:01,440
it will collect all the values of every

781
00:32:01,440 --> 00:32:04,640
field and we'll xhr that to

782
00:32:04,640 --> 00:32:06,559
a domain controlled by the attacker

783
00:32:06,559 --> 00:32:08,880
which usually we call drop server in

784
00:32:08,880 --> 00:32:11,760
this case malicious dash api.js grammar

785
00:32:11,760 --> 00:32:14,640
dot com this compromise script is our

786
00:32:14,640 --> 00:32:16,080
iceberg then

787
00:32:16,080 --> 00:32:18,159
it is

788
00:32:18,159 --> 00:32:19,519
so let me

789
00:32:19,519 --> 00:32:23,440
get back to where we were

790
00:32:23,440 --> 00:32:25,360
all right

791
00:32:25,360 --> 00:32:28,240
so next what we will do we'll show you

792
00:32:28,240 --> 00:32:31,200
what happens when we type

793
00:32:31,200 --> 00:32:34,080
the credentials

794
00:32:34,720 --> 00:32:36,960
which will trigger that malicious code

795
00:32:36,960 --> 00:32:39,200
okay so i'm typing my username and

796
00:32:39,200 --> 00:32:40,799
password

797
00:32:40,799 --> 00:32:43,840
submitting the form

798
00:32:46,960 --> 00:32:49,360
all right

799
00:32:51,039 --> 00:32:52,000
and

800
00:32:52,000 --> 00:32:54,480
basically that malicious code is after

801
00:32:54,480 --> 00:32:56,559
doing what it does we'll call the

802
00:32:56,559 --> 00:32:59,120
original event handler so from a user

803
00:32:59,120 --> 00:33:00,399
perspective

804
00:33:00,399 --> 00:33:03,519
nothing will like seem strange this is

805
00:33:03,519 --> 00:33:07,760
the drop server ui let me refresh it

806
00:33:07,760 --> 00:33:10,240
to see

807
00:33:10,240 --> 00:33:11,679
from the server

808
00:33:11,679 --> 00:33:14,480
from the attacking server what was

809
00:33:14,480 --> 00:33:17,600
successfully accelerated there you go

810
00:33:17,600 --> 00:33:18,559
all right

811
00:33:18,559 --> 00:33:19,919
so now

812
00:33:19,919 --> 00:33:21,679
in this case the problem is obvious is

813
00:33:21,679 --> 00:33:24,159
lack of isolation so the next thing that

814
00:33:24,159 --> 00:33:26,960
we can do is just move the third party

815
00:33:26,960 --> 00:33:30,000
to an iframe to a cross-origin iframe

816
00:33:30,000 --> 00:33:32,399
and leverage the same origin policy

817
00:33:32,399 --> 00:33:34,799
obviously that

818
00:33:34,799 --> 00:33:37,679
basically forces that script to be uh

819
00:33:37,679 --> 00:33:40,480
adapted like in order to work but uh

820
00:33:40,480 --> 00:33:42,480
we'll we'll just show you the malicious

821
00:33:42,480 --> 00:33:44,559
version of that

822
00:33:44,559 --> 00:33:46,799
run right

823
00:33:46,799 --> 00:33:51,639
so this is the iframe third party

824
00:33:52,960 --> 00:33:55,600
so we'll just enable the iframe third

825
00:33:55,600 --> 00:33:58,320
party compromise third party and reload

826
00:33:58,320 --> 00:34:00,799
the page

827
00:34:03,600 --> 00:34:05,919
so immediately what you see in there

828
00:34:05,919 --> 00:34:07,840
maybe you cannot read it but it's a

829
00:34:07,840 --> 00:34:10,639
console error basically resulted from

830
00:34:10,639 --> 00:34:12,879
the fact that the same malicious script

831
00:34:12,879 --> 00:34:16,000
is now not being able to access the form

832
00:34:16,000 --> 00:34:17,359
hence the error

833
00:34:17,359 --> 00:34:19,440
okay so it was

834
00:34:19,440 --> 00:34:22,800
we were able to mitigate the problem

835
00:34:22,800 --> 00:34:23,800
but um

836
00:34:23,800 --> 00:34:24,960
[Music]

837
00:34:24,960 --> 00:34:27,520
obviously being across origin i framed

838
00:34:27,520 --> 00:34:29,760
uh the problem is gone like that there's

839
00:34:29,760 --> 00:34:32,320
no way that iframe uh can access that

840
00:34:32,320 --> 00:34:35,280
form but in order for the original code

841
00:34:35,280 --> 00:34:37,679
the non-malicious version to work

842
00:34:37,679 --> 00:34:40,399
we now have to ask the vendor to work

843
00:34:40,399 --> 00:34:43,440
from a cross-origin iframe which will

844
00:34:43,440 --> 00:34:45,679
basically require that vendor to change

845
00:34:45,679 --> 00:34:48,159
how it works also we need to change our

846
00:34:48,159 --> 00:34:50,399
page because we need now to move this to

847
00:34:50,399 --> 00:34:52,879
iframe and let's not forget because this

848
00:34:52,879 --> 00:34:54,639
example is very simple we only have one

849
00:34:54,639 --> 00:34:57,359
third party but the average page has

850
00:34:57,359 --> 00:35:00,160
tens of different third parties so the

851
00:35:00,160 --> 00:35:02,720
overall accumulated work that it

852
00:35:02,720 --> 00:35:04,160
requires in order to follow this

853
00:35:04,160 --> 00:35:07,280
approach can be quite significant i mean

854
00:35:07,280 --> 00:35:08,480
not only that

855
00:35:08,480 --> 00:35:10,240
each one of these iframes have to be

856
00:35:10,240 --> 00:35:12,400
communicated asynchronously right right

857
00:35:12,400 --> 00:35:15,119
so you have to refactor all of the code

858
00:35:15,119 --> 00:35:17,359
and then now communicate asynchronously

859
00:35:17,359 --> 00:35:19,280
with these iframes which can create

860
00:35:19,280 --> 00:35:22,240
problems because uh before they work

861
00:35:22,240 --> 00:35:24,320
communicating synchronously right and

862
00:35:24,320 --> 00:35:26,640
then you know async code is much harder

863
00:35:26,640 --> 00:35:29,920
to create but also harder to debug right

864
00:35:29,920 --> 00:35:31,920
and now you have to set this protocol

865
00:35:31,920 --> 00:35:33,920
with a third party because you you can

866
00:35:33,920 --> 00:35:37,839
only use the web messaging api

867
00:35:37,839 --> 00:35:40,400
so the next one

868
00:35:40,400 --> 00:35:42,079
uses

869
00:35:42,079 --> 00:35:44,960
google kaha

870
00:35:46,320 --> 00:35:48,560
yeah so so

871
00:35:48,560 --> 00:35:50,800
uh what do you see here it's a very

872
00:35:50,800 --> 00:35:52,560
similar case to the previous one where

873
00:35:52,560 --> 00:35:55,680
you're trying to protect yourself by

874
00:35:55,680 --> 00:35:57,520
isolating your

875
00:35:57,520 --> 00:35:58,480
code

876
00:35:58,480 --> 00:36:01,040
with uh

877
00:36:01,040 --> 00:36:03,680
with with some code that is isolated uh

878
00:36:03,680 --> 00:36:05,520
here what am i looking at

879
00:36:05,520 --> 00:36:08,640
uh here we've injected uh caja actually

880
00:36:08,640 --> 00:36:12,400
it's a secure ecmascript or cess

881
00:36:12,400 --> 00:36:13,920
a

882
00:36:13,920 --> 00:36:16,480
grandchild of kaha let's say

883
00:36:16,480 --> 00:36:19,119
what does it do it injects itself into

884
00:36:19,119 --> 00:36:20,480
the page

885
00:36:20,480 --> 00:36:22,400
and then it sets up

886
00:36:22,400 --> 00:36:24,839
a situation where it

887
00:36:24,839 --> 00:36:28,480
controls what apis are callable if you

888
00:36:28,480 --> 00:36:31,119
remember what i described earlier we can

889
00:36:31,119 --> 00:36:34,480
decide and whitelist exactly which apis

890
00:36:34,480 --> 00:36:36,320
are necessary for this function to

891
00:36:36,320 --> 00:36:38,160
execute in this particular case append

892
00:36:38,160 --> 00:36:40,560
child and create element are the only

893
00:36:40,560 --> 00:36:42,480
things that are necessary and so those

894
00:36:42,480 --> 00:36:44,640
are the ones we whitelist and we say

895
00:36:44,640 --> 00:36:46,880
yeah go ahead do whatever you want

896
00:36:46,880 --> 00:36:49,680
compromised script all that we're going

897
00:36:49,680 --> 00:36:52,079
to allow you to do is call create

898
00:36:52,079 --> 00:36:55,359
element and append child and then uh

899
00:36:55,359 --> 00:36:57,520
pedro goes ahead and logs in

900
00:36:57,520 --> 00:36:59,440
uh pedro can log in

901
00:36:59,440 --> 00:37:02,640
yes from a distance uh he types in his

902
00:37:02,640 --> 00:37:05,839
password and now the compromise script

903
00:37:05,839 --> 00:37:09,119
is trying to reach in and grab the the

904
00:37:09,119 --> 00:37:11,520
password but it cannot because in order

905
00:37:11,520 --> 00:37:13,839
to grab the password it needs to do what

906
00:37:13,839 --> 00:37:15,760
it needs to grab dot value from the

907
00:37:15,760 --> 00:37:17,920
password field an api that is not

908
00:37:17,920 --> 00:37:23,359
whitelisted and so when pedro logs in um

909
00:37:23,359 --> 00:37:25,119
uh if he

910
00:37:25,119 --> 00:37:26,880
he logs in correctly

911
00:37:26,880 --> 00:37:28,960
i get nervous every time i see this drop

912
00:37:28,960 --> 00:37:31,200
server because it looks like it still

913
00:37:31,200 --> 00:37:33,440
has a compromise script but this is the

914
00:37:33,440 --> 00:37:35,920
earlier password this is no new password

915
00:37:35,920 --> 00:37:37,119
was leaked

916
00:37:37,119 --> 00:37:40,320
pedro's password remains safe what is

917
00:37:40,320 --> 00:37:41,920
the difference between the iframe

918
00:37:41,920 --> 00:37:43,839
version and the caja version

919
00:37:43,839 --> 00:37:46,480
it is that

920
00:37:46,480 --> 00:37:48,880
refactoring was still required the code

921
00:37:48,880 --> 00:37:51,040
still needed to be changed but at least

922
00:37:51,040 --> 00:37:53,520
it did not need to be asynchronous

923
00:37:53,520 --> 00:37:54,480
anymore

924
00:37:54,480 --> 00:37:56,800
kaha allows you the sandboxing mechanism

925
00:37:56,800 --> 00:37:59,839
allows you to access to rewrite your

926
00:37:59,839 --> 00:38:01,680
scripts so that they are synchronously

927
00:38:01,680 --> 00:38:06,240
accessible as they were before and uh

928
00:38:06,240 --> 00:38:08,320
yeah that that that's an improvement

929
00:38:08,320 --> 00:38:09,359
right like

930
00:38:09,359 --> 00:38:10,960
if any of you have written async code

931
00:38:10,960 --> 00:38:12,960
and i suspect everybody in this room has

932
00:38:12,960 --> 00:38:14,480
written async code if you've written

933
00:38:14,480 --> 00:38:16,240
async code correctly i would like to

934
00:38:16,240 --> 00:38:17,440
hire you

935
00:38:17,440 --> 00:38:20,160
but but most of us are lying when we say

936
00:38:20,160 --> 00:38:22,480
we can write async code correctly

937
00:38:22,480 --> 00:38:23,280
so

938
00:38:23,280 --> 00:38:25,920
what this sandboxing mechanism gives us

939
00:38:25,920 --> 00:38:28,960
is yes we still have to do refactoring

940
00:38:28,960 --> 00:38:31,359
but at least we don't need to suddenly

941
00:38:31,359 --> 00:38:33,599
deal with asynchronous code because

942
00:38:33,599 --> 00:38:35,599
chaining all of asynchronous code is

943
00:38:35,599 --> 00:38:38,160
very hard if only there were a different

944
00:38:38,160 --> 00:38:39,839
mechanism that would prevent us from

945
00:38:39,839 --> 00:38:42,560
having to do that

946
00:38:42,560 --> 00:38:45,040
yeah how about it did i set you up right

947
00:38:45,040 --> 00:38:46,960
completely

948
00:38:46,960 --> 00:38:48,400
totally

949
00:38:48,400 --> 00:38:50,320
so to address

950
00:38:50,320 --> 00:38:52,720
these caveats we have been working on a

951
00:38:52,720 --> 00:38:55,119
solution called web page integrity which

952
00:38:55,119 --> 00:38:58,400
is basically a sandboxing solution

953
00:38:58,400 --> 00:39:00,720
that can be seamlessly integrated into

954
00:39:00,720 --> 00:39:04,240
any website by adding a javascript agent

955
00:39:04,240 --> 00:39:08,000
and that agent carries a rules engine

956
00:39:08,000 --> 00:39:09,760
which is very granular

957
00:39:09,760 --> 00:39:13,280
and and with it you can specifically say

958
00:39:13,280 --> 00:39:15,119
what you should enable

959
00:39:15,119 --> 00:39:18,640
at any level of granularity and or what

960
00:39:18,640 --> 00:39:21,359
you want to block all right

961
00:39:21,359 --> 00:39:23,280
so here you are seeing

962
00:39:23,280 --> 00:39:26,000
the dashboard of the latest threats

963
00:39:26,000 --> 00:39:28,240
detected which right now is completely

964
00:39:28,240 --> 00:39:29,760
wiped clean

965
00:39:29,760 --> 00:39:31,280
and uh

966
00:39:31,280 --> 00:39:34,320
and now what we're going to do is reload

967
00:39:34,320 --> 00:39:37,680
the page with that agent uh together

968
00:39:37,680 --> 00:39:40,200
with the compromised third

969
00:39:40,200 --> 00:39:43,040
party um

970
00:39:43,040 --> 00:39:45,920
and the the first thing that uh i will

971
00:39:45,920 --> 00:39:48,160
notice

972
00:39:48,160 --> 00:39:50,720
let me just wait and you will actually

973
00:39:50,720 --> 00:39:54,759
see it on the dashboard

974
00:39:58,800 --> 00:40:01,119
so the first thing that we have here

975
00:40:01,119 --> 00:40:04,319
is indication that something is

976
00:40:04,319 --> 00:40:06,319
interfering with the on submit event

977
00:40:06,319 --> 00:40:11,680
handler of a form so we can see um in

978
00:40:11,680 --> 00:40:15,839
a lot of detail what form was affected

979
00:40:15,839 --> 00:40:18,880
and specifically what is the new event

980
00:40:18,880 --> 00:40:20,960
handler that was set

981
00:40:20,960 --> 00:40:23,359
in that

982
00:40:23,359 --> 00:40:25,680
to that form so we can see this code we

983
00:40:25,680 --> 00:40:27,520
we can recognize this code it was the

984
00:40:27,520 --> 00:40:30,160
same code that i've shown you before

985
00:40:30,160 --> 00:40:32,800
and right now we are only uh in

986
00:40:32,800 --> 00:40:34,480
visibility mode so we're not blocking

987
00:40:34,480 --> 00:40:35,599
anything

988
00:40:35,599 --> 00:40:38,640
um because this is a demo and it's more

989
00:40:38,640 --> 00:40:40,960
like it's easier to to talk about things

990
00:40:40,960 --> 00:40:42,800
when we're just showing we're not

991
00:40:42,800 --> 00:40:44,800
blocking and here you can see the script

992
00:40:44,800 --> 00:40:47,760
that's initiated the ev the the action

993
00:40:47,760 --> 00:40:50,839
and the specific function that triggered

994
00:40:50,839 --> 00:40:52,720
it

995
00:40:52,720 --> 00:40:56,160
so next let's see what else we can see

996
00:40:56,160 --> 00:40:58,079
um let's uh

997
00:40:58,079 --> 00:40:59,440
log in again

998
00:40:59,440 --> 00:41:01,599
and and and see the malicious code

999
00:41:01,599 --> 00:41:02,960
running and

1000
00:41:02,960 --> 00:41:05,200
what uh you'll be able to see in the in

1001
00:41:05,200 --> 00:41:07,599
the dashboard

1002
00:41:07,599 --> 00:41:10,240
so obviously the the password will be

1003
00:41:10,240 --> 00:41:11,920
captured because we're not blocking

1004
00:41:11,920 --> 00:41:12,960
anything

1005
00:41:12,960 --> 00:41:16,880
that's that's fine for a demo um

1006
00:41:16,880 --> 00:41:18,640
you can see that the acceleration was

1007
00:41:18,640 --> 00:41:21,359
detected

1008
00:41:21,359 --> 00:41:23,200
and

1009
00:41:23,200 --> 00:41:25,200
the types of details that

1010
00:41:25,200 --> 00:41:27,599
we're able to show are like the specific

1011
00:41:27,599 --> 00:41:29,440
method xhr

1012
00:41:29,440 --> 00:41:33,200
the endpoint malicious dash api.json.com

1013
00:41:33,200 --> 00:41:36,960
and the specific fields that were

1014
00:41:36,960 --> 00:41:39,359
basically accelerated and again

1015
00:41:39,359 --> 00:41:40,960
you can see the script that initiated

1016
00:41:40,960 --> 00:41:43,359
the action and the specific function

1017
00:41:43,359 --> 00:41:44,480
all right

1018
00:41:44,480 --> 00:41:46,640
so

1019
00:41:46,960 --> 00:41:50,079
obviously uh on the on that attacker

1020
00:41:50,079 --> 00:41:52,480
controlled interface we'll be able to

1021
00:41:52,480 --> 00:41:53,359
see

1022
00:41:53,359 --> 00:41:55,760
to see that password

1023
00:41:55,760 --> 00:41:59,119
all right so uh now that we understand

1024
00:41:59,119 --> 00:42:01,440
uh what's going on we can start

1025
00:42:01,440 --> 00:42:04,319
mitigating it so like i said we have a

1026
00:42:04,319 --> 00:42:07,280
rules engine so we have to write rules

1027
00:42:07,280 --> 00:42:09,440
we're not writing rules from scratch

1028
00:42:09,440 --> 00:42:11,200
here because we have a couple of

1029
00:42:11,200 --> 00:42:12,240
templates

1030
00:42:12,240 --> 00:42:15,599
so and that's basically faster

1031
00:42:15,599 --> 00:42:18,400
okay so

1032
00:42:24,160 --> 00:42:26,000
okay let me stop here

1033
00:42:26,000 --> 00:42:28,319
so this first rule so before explaining

1034
00:42:28,319 --> 00:42:30,400
the rule basically that let me explain

1035
00:42:30,400 --> 00:42:32,880
the anatomy of a rule so we have four

1036
00:42:32,880 --> 00:42:35,520
sections the which pages in which you

1037
00:42:35,520 --> 00:42:37,760
basically set the scope of the rule is

1038
00:42:37,760 --> 00:42:39,599
it running for the whole website or just

1039
00:42:39,599 --> 00:42:42,000
like a section or a specific page

1040
00:42:42,000 --> 00:42:44,160
then you have the which resources and

1041
00:42:44,160 --> 00:42:46,960
with which you can match the initiated

1042
00:42:46,960 --> 00:42:49,920
scripts if any or or you don't care any

1043
00:42:49,920 --> 00:42:52,960
script will do and then you have what

1044
00:42:52,960 --> 00:42:55,119
specific action you want to match in

1045
00:42:55,119 --> 00:42:57,119
this case we're matching any network

1046
00:42:57,119 --> 00:42:58,560
requests sent

1047
00:42:58,560 --> 00:43:02,079
to malicious dash api.json.com

1048
00:43:02,079 --> 00:43:04,400
and finally you have the actions which

1049
00:43:04,400 --> 00:43:06,720
for this rule you have the alert and

1050
00:43:06,720 --> 00:43:09,280
block you can you could just alert or

1051
00:43:09,280 --> 00:43:12,960
block in this case we're doing both so

1052
00:43:12,960 --> 00:43:16,319
what we need to do now is just enable

1053
00:43:16,319 --> 00:43:18,720
this rule and commit the configuration

1054
00:43:18,720 --> 00:43:21,440
and wait a few sections as uh

1055
00:43:21,440 --> 00:43:22,960
seconds

1056
00:43:22,960 --> 00:43:25,440
after which every user session will

1057
00:43:25,440 --> 00:43:27,760
actually start being like enforcing this

1058
00:43:27,760 --> 00:43:28,800
new rule

1059
00:43:28,800 --> 00:43:29,839
all right

1060
00:43:29,839 --> 00:43:34,000
so let me fast forward this

1061
00:43:36,160 --> 00:43:37,680
okay

1062
00:43:37,680 --> 00:43:39,119
we're still waiting for that

1063
00:43:39,119 --> 00:43:41,599
configuration to be deployed

1064
00:43:41,599 --> 00:43:44,160
then reload the page

1065
00:43:44,160 --> 00:43:46,400
and see what happens

1066
00:43:46,400 --> 00:43:48,000
so remember what we are doing is we are

1067
00:43:48,000 --> 00:43:50,079
blocking communications with that domain

1068
00:43:50,079 --> 00:43:52,000
so we are not doing anything regarding

1069
00:43:52,000 --> 00:43:55,280
like the beyond submits event hand or

1070
00:43:55,280 --> 00:43:57,119
rewrite

1071
00:43:57,119 --> 00:44:00,560
so that will still happen

1072
00:44:01,359 --> 00:44:04,560
but what we will see

1073
00:44:04,560 --> 00:44:06,720
is whether or not we manage to block

1074
00:44:06,720 --> 00:44:08,960
that acceleration so again this is the

1075
00:44:08,960 --> 00:44:12,000
same as the first one we saw

1076
00:44:12,000 --> 00:44:16,079
okay naturally we're not blocking it

1077
00:44:17,839 --> 00:44:20,079
and now we'll sign in

1078
00:44:20,079 --> 00:44:24,079
to see if we manage to block it

1079
00:44:29,359 --> 00:44:30,319
okay

1080
00:44:30,319 --> 00:44:32,640
let me just make it faster all right so

1081
00:44:32,640 --> 00:44:34,839
you can see blocked

1082
00:44:34,839 --> 00:44:37,680
prefix on the same alert so it has so we

1083
00:44:37,680 --> 00:44:39,680
can still see the attempts but we have

1084
00:44:39,680 --> 00:44:41,520
confirmation that it was successfully

1085
00:44:41,520 --> 00:44:42,480
blocked

1086
00:44:42,480 --> 00:44:43,359
right

1087
00:44:43,359 --> 00:44:44,640
so

1088
00:44:44,640 --> 00:44:47,359
we can actually do better uh what we can

1089
00:44:47,359 --> 00:44:49,680
do is also prevent that on submit event

1090
00:44:49,680 --> 00:44:52,000
handler rewrite from happening

1091
00:44:52,000 --> 00:44:53,200
so that's

1092
00:44:53,200 --> 00:44:55,200
so in order to do that we'll use the

1093
00:44:55,200 --> 00:44:56,560
second rule

1094
00:44:56,560 --> 00:44:59,920
which will basically block any behavior

1095
00:44:59,920 --> 00:45:03,680
change that targets a form in that page

1096
00:45:03,680 --> 00:45:05,119
all right so

1097
00:45:05,119 --> 00:45:07,119
it's actually broader than what we

1098
00:45:07,119 --> 00:45:09,280
needed but it's all right because it

1099
00:45:09,280 --> 00:45:11,760
will be easier to maintain actually

1100
00:45:11,760 --> 00:45:13,359
so we'll just

1101
00:45:13,359 --> 00:45:15,839
enable this rule and

1102
00:45:15,839 --> 00:45:17,280
commit it

1103
00:45:17,280 --> 00:45:20,640
and then reload the page

1104
00:45:24,480 --> 00:45:25,839
okay

1105
00:45:25,839 --> 00:45:29,560
and see what happens

1106
00:45:32,560 --> 00:45:34,720
so we don't even have to fill in that

1107
00:45:34,720 --> 00:45:36,240
form so because

1108
00:45:36,240 --> 00:45:40,640
that action takes place like immediately

1109
00:45:40,640 --> 00:45:42,240
so here you go

1110
00:45:42,240 --> 00:45:43,599
all right so

1111
00:45:43,599 --> 00:45:44,960
blocks

1112
00:45:44,960 --> 00:45:47,520
so again we can see the the

1113
00:45:47,520 --> 00:45:50,560
that attempt but it was blocked

1114
00:45:50,560 --> 00:45:51,680
now

1115
00:45:51,680 --> 00:45:54,720
with this type of approach you have

1116
00:45:54,720 --> 00:45:56,400
oh wait

1117
00:45:56,400 --> 00:45:58,400
let me just summarize my mad scientist

1118
00:45:58,400 --> 00:46:01,200
friend here okay all right so what you

1119
00:46:01,200 --> 00:46:04,560
did was you had a vulnerable script that

1120
00:46:04,560 --> 00:46:06,720
was stealing passwords

1121
00:46:06,720 --> 00:46:08,960
you dropped a script that you were now

1122
00:46:08,960 --> 00:46:11,839
able to configure using a ui

1123
00:46:11,839 --> 00:46:15,520
and what you got from it was visibility

1124
00:46:15,520 --> 00:46:17,839
that passwords were leaking

1125
00:46:17,839 --> 00:46:20,400
you got visibility on what script was

1126
00:46:20,400 --> 00:46:22,319
what compromise script was leaking this

1127
00:46:22,319 --> 00:46:23,680
password

1128
00:46:23,680 --> 00:46:25,839
so you could see what was happening

1129
00:46:25,839 --> 00:46:28,880
and then you were able to block

1130
00:46:28,880 --> 00:46:29,760
the

1131
00:46:29,760 --> 00:46:32,079
compromised password from leaking

1132
00:46:32,079 --> 00:46:34,000
without making any changes to the

1133
00:46:34,000 --> 00:46:35,839
original

1134
00:46:35,839 --> 00:46:36,800
code

1135
00:46:36,800 --> 00:46:39,680
and then you were able to even block

1136
00:46:39,680 --> 00:46:42,880
the mutation of the event handler by the

1137
00:46:42,880 --> 00:46:44,480
compromise script am i getting that

1138
00:46:44,480 --> 00:46:45,440
right

1139
00:46:45,440 --> 00:46:46,400
yes

1140
00:46:46,400 --> 00:46:48,560
okay but i want to stress that even

1141
00:46:48,560 --> 00:46:49,520
though

1142
00:46:49,520 --> 00:46:52,079
it sounded like to be very reactive so

1143
00:46:52,079 --> 00:46:53,920
first need to learn what's happening in

1144
00:46:53,920 --> 00:46:57,040
order to like to fix it

1145
00:46:57,040 --> 00:46:59,760
the the approach actually allows you to

1146
00:46:59,760 --> 00:47:02,560
be very preventive for instance

1147
00:47:02,560 --> 00:47:04,240
think about the form

1148
00:47:04,240 --> 00:47:05,599
you can set

1149
00:47:05,599 --> 00:47:08,000
an allow list of scripts that should

1150
00:47:08,000 --> 00:47:09,839
have access to that form and

1151
00:47:09,839 --> 00:47:11,839
automatically every other script is

1152
00:47:11,839 --> 00:47:14,240
blocked so you don't have to learn

1153
00:47:14,240 --> 00:47:16,240
uh what domains you need to block what

1154
00:47:16,240 --> 00:47:18,640
scripts you need to to block

1155
00:47:18,640 --> 00:47:20,880
it's it's it's done right

1156
00:47:20,880 --> 00:47:22,559
and the other thing i want to stress is

1157
00:47:22,559 --> 00:47:23,920
that

1158
00:47:23,920 --> 00:47:26,720
here you control the size of the boxes

1159
00:47:26,720 --> 00:47:29,839
so you can have boxes of any size

1160
00:47:29,839 --> 00:47:32,319
without having to re-engineer the

1161
00:47:32,319 --> 00:47:34,720
application

1162
00:47:34,720 --> 00:47:37,040
so we're getting to the end of the talk

1163
00:47:37,040 --> 00:47:39,760
it's now time to address the challenges

1164
00:47:39,760 --> 00:47:40,800
ahead

1165
00:47:40,800 --> 00:47:42,480
but before we do that

1166
00:47:42,480 --> 00:47:44,960
we must first talk about what we have

1167
00:47:44,960 --> 00:47:46,640
been doing wrong

1168
00:47:46,640 --> 00:47:47,680
so

1169
00:47:47,680 --> 00:47:49,200
in regards to

1170
00:47:49,200 --> 00:47:52,079
isolation inside the browser things have

1171
00:47:52,079 --> 00:47:55,920
been slow and erratic

1172
00:47:55,920 --> 00:47:58,800
and i think the main reason is that

1173
00:47:58,800 --> 00:48:01,599
there was never one feature

1174
00:48:01,599 --> 00:48:03,599
whose purpose was to provide full

1175
00:48:03,599 --> 00:48:05,760
isolation inside the browser

1176
00:48:05,760 --> 00:48:07,040
so things

1177
00:48:07,040 --> 00:48:09,520
have been more about stitching together

1178
00:48:09,520 --> 00:48:12,559
different isolation mechanisms and try

1179
00:48:12,559 --> 00:48:16,000
to cover as much ground as possible

1180
00:48:16,000 --> 00:48:19,359
this is both error prone and complex

1181
00:48:19,359 --> 00:48:22,079
so naturally it leaves holes it leaves

1182
00:48:22,079 --> 00:48:24,319
blind spots

1183
00:48:24,319 --> 00:48:26,640
beyond the browser there have been some

1184
00:48:26,640 --> 00:48:29,200
attempts to provide like holistic web

1185
00:48:29,200 --> 00:48:30,720
isolation

1186
00:48:30,720 --> 00:48:34,960
one example was google kaha but suddenly

1187
00:48:34,960 --> 00:48:37,440
sadly it was discontinued

1188
00:48:37,440 --> 00:48:40,400
the other more recent attempt was web

1189
00:48:40,400 --> 00:48:45,359
page integrity that we just showed you

1190
00:48:45,920 --> 00:48:48,920
so

1191
00:48:49,119 --> 00:48:51,200
what i was shooting for what we were

1192
00:48:51,200 --> 00:48:53,440
shooting for in this talk is to give you

1193
00:48:53,440 --> 00:48:55,760
a set of principles that should be

1194
00:48:55,760 --> 00:48:58,240
guiding this critical

1195
00:48:58,240 --> 00:49:00,640
feature which is isolation

1196
00:49:00,640 --> 00:49:02,640
in order to build

1197
00:49:02,640 --> 00:49:04,000
web browsers

1198
00:49:04,000 --> 00:49:05,119
that

1199
00:49:05,119 --> 00:49:08,800
provide developers with the

1200
00:49:08,800 --> 00:49:10,720
primitive tools that they need in order

1201
00:49:10,720 --> 00:49:13,680
to build uh secure web applications i

1202
00:49:13,680 --> 00:49:15,440
think that the three principles that we

1203
00:49:15,440 --> 00:49:17,280
went over and i hope i managed to

1204
00:49:17,280 --> 00:49:20,000
convince you at least part of this

1205
00:49:20,000 --> 00:49:20,880
is

1206
00:49:20,880 --> 00:49:24,319
the granularity of the size of the

1207
00:49:24,319 --> 00:49:26,800
components that you are using is very

1208
00:49:26,800 --> 00:49:28,000
critical

1209
00:49:28,000 --> 00:49:31,040
at the function or api levels

1210
00:49:31,040 --> 00:49:33,760
as long as you have a service or a

1211
00:49:33,760 --> 00:49:35,200
mechanism that allows you to

1212
00:49:35,200 --> 00:49:37,280
automatically configure

1213
00:49:37,280 --> 00:49:40,319
web applications you have the ability to

1214
00:49:40,319 --> 00:49:42,800
control the size of scripts

1215
00:49:42,800 --> 00:49:45,839
stronger isolation foundations uh using

1216
00:49:45,839 --> 00:49:46,800
weber

1217
00:49:46,800 --> 00:49:49,839
using the browser in order to enforce

1218
00:49:49,839 --> 00:49:51,599
the isolation mechanism is very

1219
00:49:51,599 --> 00:49:54,319
important providing visibility and user

1220
00:49:54,319 --> 00:49:56,240
friendliness is super important because

1221
00:49:56,240 --> 00:49:58,800
developers are people too and

1222
00:49:58,800 --> 00:50:00,880
visibility is super important so that

1223
00:50:00,880 --> 00:50:03,440
when failures occur we are able to

1224
00:50:03,440 --> 00:50:06,160
respond to them

1225
00:50:06,160 --> 00:50:08,800
one quick example of something that is

1226
00:50:08,800 --> 00:50:11,119
being baked into browsers today is

1227
00:50:11,119 --> 00:50:12,559
shadow realms

1228
00:50:12,559 --> 00:50:14,000
this is a

1229
00:50:14,000 --> 00:50:17,119
proposal where the api

1230
00:50:17,119 --> 00:50:19,920
of a isolation mechanism is controlled

1231
00:50:19,920 --> 00:50:23,359
by the developer the api looks very much

1232
00:50:23,359 --> 00:50:26,000
like an eval it's really a safe eval

1233
00:50:26,000 --> 00:50:28,559
where the function is called

1234
00:50:28,559 --> 00:50:32,000
based in inside of a context that the

1235
00:50:32,000 --> 00:50:34,559
caller controls it has a stronger

1236
00:50:34,559 --> 00:50:37,200
isolation foundation why because the

1237
00:50:37,200 --> 00:50:39,839
browser enforces it rather than a series

1238
00:50:39,839 --> 00:50:42,720
of ad hoc mechanisms that are necessary

1239
00:50:42,720 --> 00:50:45,359
why is it user friendly well developers

1240
00:50:45,359 --> 00:50:47,599
are already familiar with eval we all

1241
00:50:47,599 --> 00:50:49,680
know what eval means all that we're

1242
00:50:49,680 --> 00:50:52,960
doing is controlling what context that

1243
00:50:52,960 --> 00:50:56,000
eval is executing in it's understandable

1244
00:50:56,000 --> 00:50:58,640
to developers it's simple to understand

1245
00:50:58,640 --> 00:51:02,000
it is not a series of corner cases it is

1246
00:51:02,000 --> 00:51:05,680
just eval in a context now in the case

1247
00:51:05,680 --> 00:51:08,640
of shadow realms it's missing visibility

1248
00:51:08,640 --> 00:51:10,000
unlike let's say

1249
00:51:10,000 --> 00:51:12,160
web page integrity but the way to think

1250
00:51:12,160 --> 00:51:14,160
about things like shadow realms is not

1251
00:51:14,160 --> 00:51:16,800
as a full-blown product but as a

1252
00:51:16,800 --> 00:51:18,960
mechanism that browsers are providing

1253
00:51:18,960 --> 00:51:21,520
that allows products to be built on on

1254
00:51:21,520 --> 00:51:23,839
top of it that have this set of

1255
00:51:23,839 --> 00:51:26,240
properties

1256
00:51:26,240 --> 00:51:28,319
to come back to the beginning of this

1257
00:51:28,319 --> 00:51:31,130
talk how far along are we well

1258
00:51:31,130 --> 00:51:32,480
[Music]

1259
00:51:32,480 --> 00:51:35,119
we've made a huge amount of progress

1260
00:51:35,119 --> 00:51:38,640
over the last 10 15 20 years

1261
00:51:38,640 --> 00:51:39,920
there's a

1262
00:51:39,920 --> 00:51:42,240
projects this size take a large amount

1263
00:51:42,240 --> 00:51:45,440
of effort particularly when the way in

1264
00:51:45,440 --> 00:51:49,040
which we develop is changing

1265
00:51:49,040 --> 00:51:51,119
but great projects

1266
00:51:51,119 --> 00:51:54,400
big projects require effort and time

1267
00:51:54,400 --> 00:51:57,119
and uh mechanisms

1268
00:51:57,119 --> 00:51:59,119
like web page integrity like shadow

1269
00:51:59,119 --> 00:52:01,440
realms and all of the other things that

1270
00:52:01,440 --> 00:52:02,800
we are building

1271
00:52:02,800 --> 00:52:05,520
with the community with you and i and

1272
00:52:05,520 --> 00:52:08,000
all of the security community together

1273
00:52:08,000 --> 00:52:11,200
can allow isolation as a mechanism to

1274
00:52:11,200 --> 00:52:13,200
build

1275
00:52:13,200 --> 00:52:15,599
the future of web security tools one of

1276
00:52:15,599 --> 00:52:16,960
the jokes that

1277
00:52:16,960 --> 00:52:19,280
pedro and i had as we were going through

1278
00:52:19,280 --> 00:52:22,240
this set of slides is in order to make a

1279
00:52:22,240 --> 00:52:25,119
ship unsinkable the only way is to give

1280
00:52:25,119 --> 00:52:27,760
it wings

1281
00:52:30,240 --> 00:52:32,319
i did not realize how appropriate that

1282
00:52:32,319 --> 00:52:35,119
was until i heard this morning's uh

1283
00:52:35,119 --> 00:52:37,359
keynote and prior to the keynote i did

1284
00:52:37,359 --> 00:52:39,520
not even realize that the theme of

1285
00:52:39,520 --> 00:52:40,800
today's

1286
00:52:40,800 --> 00:52:43,839
of this conference is what it is to get

1287
00:52:43,839 --> 00:52:46,000
us off the ground in order to get us off

1288
00:52:46,000 --> 00:52:49,920
the ground what we need is to give

1289
00:52:49,920 --> 00:52:54,000
our web applications our ship wings

1290
00:52:54,000 --> 00:52:55,599
and i think that that's something that

1291
00:52:55,599 --> 00:52:57,839
isolation gives us

1292
00:52:57,839 --> 00:52:59,359
take care

1293
00:52:59,359 --> 00:53:00,120
thank you

1294
00:53:00,120 --> 00:53:01,590
[Applause]

1295
00:53:01,590 --> 00:53:04,780
[Music]

