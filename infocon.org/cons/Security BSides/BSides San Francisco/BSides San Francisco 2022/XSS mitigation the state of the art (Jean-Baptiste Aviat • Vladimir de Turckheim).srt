1
00:00:00,000 --> 00:00:02,960
welcome uh for the last talk of of the

2
00:00:02,960 --> 00:00:05,279
day probably for most of you uh crossout

3
00:00:05,279 --> 00:00:07,520
scripting mitigation state of the art i

4
00:00:07,520 --> 00:00:09,440
would like to apologize for two things

5
00:00:09,440 --> 00:00:11,519
first we're french so if the accent does

6
00:00:11,519 --> 00:00:12,320
not

7
00:00:12,320 --> 00:00:14,799
go well with you sorry feel free to ask

8
00:00:14,799 --> 00:00:16,480
us we will repeat

9
00:00:16,480 --> 00:00:19,359
uh and and the next thing is that so we

10
00:00:19,359 --> 00:00:21,039
have tickets for top gun tonight but

11
00:00:21,039 --> 00:00:22,800
that's not the the schedule of the

12
00:00:22,800 --> 00:00:26,320
sessions sorry about that so i'm jb i'm

13
00:00:26,320 --> 00:00:28,160
a staff engineer at datadog i came here

14
00:00:28,160 --> 00:00:30,240
with the screen acquisition i was a cto

15
00:00:30,240 --> 00:00:31,439
and co-founder there so i've been

16
00:00:31,439 --> 00:00:33,680
working in application security for a

17
00:00:33,680 --> 00:00:35,440
long time

18
00:00:35,440 --> 00:00:37,360
and i'm vlad i'm also a staff engineer

19
00:00:37,360 --> 00:00:40,399
at datalog and i joined screen a long

20
00:00:40,399 --> 00:00:42,320
time ago to enjoy datadog through the

21
00:00:42,320 --> 00:00:44,559
acquisition feel free to follow us on

22
00:00:44,559 --> 00:00:46,399
twitter we'll share the slide

23
00:00:46,399 --> 00:00:50,079
there uh later tonight or tomorrow

24
00:00:50,079 --> 00:00:52,320
speaking of the slide here is the topic

25
00:00:52,320 --> 00:00:54,640
of tonight we'll start with some xss

26
00:00:54,640 --> 00:00:56,160
refreshers just to make sure that

27
00:00:56,160 --> 00:00:59,680
everyone is up to date on the attack

28
00:00:59,680 --> 00:01:02,239
then jb will describe the attacker point

29
00:01:02,239 --> 00:01:04,239
of view because he's a seasoned hacker

30
00:01:04,239 --> 00:01:06,159
and he will do a live demo of xss

31
00:01:06,159 --> 00:01:07,439
exploitation

32
00:01:07,439 --> 00:01:09,360
then i will be talking about browser and

33
00:01:09,360 --> 00:01:11,439
server side mitigation and there will be

34
00:01:11,439 --> 00:01:13,119
another live demo meaning that we have

35
00:01:13,119 --> 00:01:15,600
twice the chance of having things going

36
00:01:15,600 --> 00:01:18,479
wrong during the talk um and at the end

37
00:01:18,479 --> 00:01:21,040
of the day jb will summarize its inner

38
00:01:21,040 --> 00:01:23,360
parts named xss threat models

39
00:01:23,360 --> 00:01:25,360
all the links in the presentation are

40
00:01:25,360 --> 00:01:27,840
available at that qrear code but don't

41
00:01:27,840 --> 00:01:29,759
worry this qr code will be also on our

42
00:01:29,759 --> 00:01:32,400
last slide

43
00:01:32,479 --> 00:01:36,000
so what is xss that stands for

44
00:01:36,000 --> 00:01:38,560
cross-site scripting right i'm sure you

45
00:01:38,560 --> 00:01:40,799
all know what this is

46
00:01:40,799 --> 00:01:42,960
basically when you have user input

47
00:01:42,960 --> 00:01:46,000
somewhere and you can enter javascript

48
00:01:46,000 --> 00:01:48,799
or html in there and it results in

49
00:01:48,799 --> 00:01:50,479
something like that

50
00:01:50,479 --> 00:01:52,720
have you all seen that

51
00:01:52,720 --> 00:01:54,720
i'm sure you did who already exploited

52
00:01:54,720 --> 00:01:57,520
the cross-site scripting here

53
00:01:57,520 --> 00:02:00,320
all right okay okay okay so

54
00:02:00,320 --> 00:02:02,880
no no not not beginners that's a hacker

55
00:02:02,880 --> 00:02:04,079
audience

56
00:02:04,079 --> 00:02:05,360
so uh

57
00:02:05,360 --> 00:02:07,040
let's recap what are the main

58
00:02:07,040 --> 00:02:09,440
cross-scripting variants right so first

59
00:02:09,440 --> 00:02:11,360
you have the vector it can be either

60
00:02:11,360 --> 00:02:13,360
stored or reflective those are the most

61
00:02:13,360 --> 00:02:14,800
common vectors

62
00:02:14,800 --> 00:02:16,959
studies in a database

63
00:02:16,959 --> 00:02:18,959
in the local storage

64
00:02:18,959 --> 00:02:20,800
maybe in the cookie sometimes and

65
00:02:20,800 --> 00:02:23,280
reflected it requires the user to do

66
00:02:23,280 --> 00:02:25,520
something so that the payload gets gets

67
00:02:25,520 --> 00:02:26,720
triggered right

68
00:02:26,720 --> 00:02:28,480
and then you have the injection the

69
00:02:28,480 --> 00:02:30,319
injection is where the actual

70
00:02:30,319 --> 00:02:32,239
vulnerability lies so it might be in

71
00:02:32,239 --> 00:02:33,840
your react application it might be on

72
00:02:33,840 --> 00:02:37,440
your server side uh code rendering

73
00:02:37,440 --> 00:02:39,360
and last but not least you've got the

74
00:02:39,360 --> 00:02:42,480
universal xss here it's usually uh

75
00:02:42,480 --> 00:02:44,400
sitting in the browser it might be in

76
00:02:44,400 --> 00:02:46,239
parts of the operating system but

77
00:02:46,239 --> 00:02:47,840
something that is independent from the

78
00:02:47,840 --> 00:02:49,840
from the website so those are the main

79
00:02:49,840 --> 00:02:52,879
uh categories so back in the in the old

80
00:02:52,879 --> 00:02:55,599
days of the web like 1995

81
00:02:55,599 --> 00:02:56,560
um

82
00:02:56,560 --> 00:02:59,599
jarvis the the the web was mostly like

83
00:02:59,599 --> 00:03:01,680
php or a

84
00:03:01,680 --> 00:03:04,319
vast majority of the web was php and you

85
00:03:04,319 --> 00:03:06,879
had like very little templating engines

86
00:03:06,879 --> 00:03:09,280
and the ways you could uh exploit

87
00:03:09,280 --> 00:03:10,959
yourself scripting was pretty

88
00:03:10,959 --> 00:03:12,319
straightforward

89
00:03:12,319 --> 00:03:15,120
in 1999 the term cross-site scripting

90
00:03:15,120 --> 00:03:17,680
was coined by microsoft

91
00:03:17,680 --> 00:03:20,319
and and the film didn't get a lot of uh

92
00:03:20,319 --> 00:03:22,640
hype at the beginning it was a bit like

93
00:03:22,640 --> 00:03:24,720
neglected by security researchers or

94
00:03:24,720 --> 00:03:27,760
something not too important and to be

95
00:03:27,760 --> 00:03:29,200
fair um

96
00:03:29,200 --> 00:03:30,720
the web was not

97
00:03:30,720 --> 00:03:33,360
as full as sensitive

98
00:03:33,360 --> 00:03:36,080
functions or information as it is today

99
00:03:36,080 --> 00:03:37,840
but still it took a long time and and

100
00:03:37,840 --> 00:03:39,920
you can still feel it from some old

101
00:03:39,920 --> 00:03:41,680
school security researchers that are

102
00:03:41,680 --> 00:03:43,920
crosstalk shooting can be neglected

103
00:03:43,920 --> 00:03:44,720
thou

104
00:03:44,720 --> 00:03:46,879
despite being like uh

105
00:03:46,879 --> 00:03:49,040
20 years old or so

106
00:03:49,040 --> 00:03:50,799
in 2022 you still find cross-site

107
00:03:50,799 --> 00:03:53,599
scriptings in react applications uh it's

108
00:03:53,599 --> 00:03:55,680
still part of the wasp top 10 it's part

109
00:03:55,680 --> 00:03:56,799
of the

110
00:03:56,799 --> 00:03:59,280
top 10 most discovered vulnerabilities

111
00:03:59,280 --> 00:04:02,239
and bug bounties according to hacker one

112
00:04:02,239 --> 00:04:05,040
and i think if you work in a company of

113
00:04:05,040 --> 00:04:06,879
any decent size that's something you you

114
00:04:06,879 --> 00:04:09,359
know about

115
00:04:10,560 --> 00:04:12,799
yes

116
00:04:12,879 --> 00:04:14,879
the web security model is something that

117
00:04:14,879 --> 00:04:15,680
is

118
00:04:15,680 --> 00:04:17,440
as old as the cross-site scripting

119
00:04:17,440 --> 00:04:19,880
because it was introduced by netscape in

120
00:04:19,880 --> 00:04:22,720
1995 along with the first versions of

121
00:04:22,720 --> 00:04:23,919
javascript

122
00:04:23,919 --> 00:04:26,560
so basically that's

123
00:04:26,560 --> 00:04:29,199
helping describe how browsers should

124
00:04:29,199 --> 00:04:32,639
behave uh when uh it comes to handling

125
00:04:32,639 --> 00:04:35,040
several origins so you have

126
00:04:35,040 --> 00:04:37,759
iframes you have network communications

127
00:04:37,759 --> 00:04:39,120
you have

128
00:04:39,120 --> 00:04:41,600
several resources that get through

129
00:04:41,600 --> 00:04:44,880
gathered by a web browser and the way

130
00:04:44,880 --> 00:04:46,320
the browser should behave from a

131
00:04:46,320 --> 00:04:48,240
security standpoint where should it send

132
00:04:48,240 --> 00:04:50,479
the cookie what should it allow

133
00:04:50,479 --> 00:04:51,840
to read where should it follow the

134
00:04:51,840 --> 00:04:54,160
requests all of those kind of things are

135
00:04:54,160 --> 00:04:57,520
rejected by the same origin policy sop

136
00:04:57,520 --> 00:04:59,600
in short

137
00:04:59,600 --> 00:05:01,759
obviously all brothers have dispregnancy

138
00:05:01,759 --> 00:05:03,520
etc this

139
00:05:03,520 --> 00:05:07,280
thing from 1995 is still key to the way

140
00:05:07,280 --> 00:05:10,000
the the security model of the web works

141
00:05:10,000 --> 00:05:13,360
today and that great resource the um

142
00:05:13,360 --> 00:05:15,680
tangled web is is amazing if you want to

143
00:05:15,680 --> 00:05:17,919
refresh and start with the basic of of

144
00:05:17,919 --> 00:05:20,080
the web and all the fundamentals of the

145
00:05:20,080 --> 00:05:22,400
of the web security

146
00:05:22,400 --> 00:05:24,400
so cross-site scripting is

147
00:05:24,400 --> 00:05:27,520
a vulnerability right that allows an

148
00:05:27,520 --> 00:05:32,160
attacker to run javascript within a user

149
00:05:32,160 --> 00:05:33,759
web page or something

150
00:05:33,759 --> 00:05:35,840
that's good but so what do we do with it

151
00:05:35,840 --> 00:05:38,479
a lot of outcomes are possible with

152
00:05:38,479 --> 00:05:40,880
crowd size scripting and those are only

153
00:05:40,880 --> 00:05:43,680
a few i'm sure i'm missing a lot and

154
00:05:43,680 --> 00:05:45,520
depending on the context

155
00:05:45,520 --> 00:05:47,600
you can find a lot of other things so

156
00:05:47,600 --> 00:05:48,960
for instance

157
00:05:48,960 --> 00:05:51,520
you could steal the session in some

158
00:05:51,520 --> 00:05:53,840
cases still the cookies still the

159
00:05:53,840 --> 00:05:56,160
authentication headers

160
00:05:56,160 --> 00:05:59,120
you can achieve persistency with like

161
00:05:59,120 --> 00:06:02,479
modern workers in a in the brothers

162
00:06:02,479 --> 00:06:04,720
you could do network private which is

163
00:06:04,720 --> 00:06:06,800
very fun thing to do

164
00:06:06,800 --> 00:06:09,919
if if you put that with a botnet

165
00:06:09,919 --> 00:06:11,360
meaning that you compromised a lot of

166
00:06:11,360 --> 00:06:13,520
users then you can achieve a distributed

167
00:06:13,520 --> 00:06:15,919
denial of service and one of the most

168
00:06:15,919 --> 00:06:17,280
important thing that you can do is the

169
00:06:17,280 --> 00:06:19,520
action hijacking so basically if you

170
00:06:19,520 --> 00:06:23,120
have a crosstalk scripting within a

171
00:06:23,120 --> 00:06:24,319
website

172
00:06:24,319 --> 00:06:26,639
well your code as an attacker is running

173
00:06:26,639 --> 00:06:28,800
with the same contact as all the other

174
00:06:28,800 --> 00:06:30,880
code of that website and you can do any

175
00:06:30,880 --> 00:06:32,800
action so if it's on facebook you could

176
00:06:32,800 --> 00:06:33,600
add

177
00:06:33,600 --> 00:06:35,520
people you could have friends you could

178
00:06:35,520 --> 00:06:38,160
post messages uh probably you could wait

179
00:06:38,160 --> 00:06:41,280
that an admin is uh is seeing that page

180
00:06:41,280 --> 00:06:42,479
in in

181
00:06:42,479 --> 00:06:44,400
running action as an enemy so a lot of

182
00:06:44,400 --> 00:06:47,840
things can be achieved and we can think

183
00:06:47,840 --> 00:06:49,919
of course as scripting as remote code

184
00:06:49,919 --> 00:06:52,080
execution for the web it's like the

185
00:06:52,080 --> 00:06:54,080
somehow almost the ultimate

186
00:06:54,080 --> 00:06:55,599
vulnerability if you if you have a

187
00:06:55,599 --> 00:06:58,080
website the ultimate vulnerability that

188
00:06:58,080 --> 00:07:00,840
can target your users

189
00:07:00,840 --> 00:07:05,199
so so let's see the attacker's point of

190
00:07:05,199 --> 00:07:06,160
view

191
00:07:06,160 --> 00:07:07,199
um

192
00:07:07,199 --> 00:07:09,120
that's uh

193
00:07:09,120 --> 00:07:12,000
a ratter that was uh used a few years

194
00:07:12,000 --> 00:07:13,120
ago in

195
00:07:13,120 --> 00:07:16,479
mostly eastern europe and

196
00:07:16,479 --> 00:07:17,840
some malware

197
00:07:17,840 --> 00:07:21,520
manage using javascript to reconfigure

198
00:07:21,520 --> 00:07:23,440
this router

199
00:07:23,440 --> 00:07:26,160
and what did it do it injected custom

200
00:07:26,160 --> 00:07:30,080
dns name servers so every user of that

201
00:07:30,080 --> 00:07:31,759
router

202
00:07:31,759 --> 00:07:34,400
that triggered that malicious javascript

203
00:07:34,400 --> 00:07:35,440
payload

204
00:07:35,440 --> 00:07:38,160
got to use custom dns configuration and

205
00:07:38,160 --> 00:07:40,960
those custom dns were redirecting some

206
00:07:40,960 --> 00:07:42,319
specific

207
00:07:42,319 --> 00:07:46,720
banking uh domains and the the attackers

208
00:07:46,720 --> 00:07:49,919
behind it stole the credential of a lot

209
00:07:49,919 --> 00:07:51,199
of uh

210
00:07:51,199 --> 00:07:54,720
of those users so that's one example of

211
00:07:54,720 --> 00:07:56,720
something that you can do with uh with a

212
00:07:56,720 --> 00:07:58,720
cross-site scripting you can private

213
00:07:58,720 --> 00:08:01,759
change the network access other things

214
00:08:01,759 --> 00:08:03,680
that would be on localised here

215
00:08:03,680 --> 00:08:06,560
obviously attackers were using

216
00:08:06,560 --> 00:08:07,599
known

217
00:08:07,599 --> 00:08:10,720
credentials that the isp were using for

218
00:08:10,720 --> 00:08:13,039
that routers and default ip addresses

219
00:08:13,039 --> 00:08:15,199
that were working in most cases

220
00:08:15,199 --> 00:08:18,160
that's a list of exploits that

221
00:08:18,160 --> 00:08:21,360
have made cross-site scripting famous so

222
00:08:21,360 --> 00:08:24,680
you still have a lot today you can see

223
00:08:24,680 --> 00:08:28,400
a lot of them are being added

224
00:08:28,400 --> 00:08:32,080
every day on some major websites but if

225
00:08:32,080 --> 00:08:33,519
you look at

226
00:08:33,519 --> 00:08:35,519
bounty programs for instance crosstalk

227
00:08:35,519 --> 00:08:37,120
shifting is still something that

228
00:08:37,120 --> 00:08:39,200
companies put very high in that is

229
00:08:39,200 --> 00:08:41,919
despite that being a 20 years old

230
00:08:41,919 --> 00:08:44,800
vulnerability um

231
00:08:44,800 --> 00:08:46,640
and the most famous one probably from

232
00:08:46,640 --> 00:08:49,200
2005 i'm not sure we had any with a with

233
00:08:49,200 --> 00:08:52,880
a similar or as spectacular

234
00:08:52,880 --> 00:08:55,880
outcome that was the same one who added

235
00:08:55,880 --> 00:08:59,360
a lot alter like one million myspace

236
00:08:59,360 --> 00:09:01,680
profiles

237
00:09:01,680 --> 00:09:04,240
so that's basic web security right so

238
00:09:04,240 --> 00:09:06,640
didn't change much in the way you you

239
00:09:06,640 --> 00:09:10,080
exploit your subscripting

240
00:09:10,240 --> 00:09:11,120
but

241
00:09:11,120 --> 00:09:13,279
you can think of other targets right

242
00:09:13,279 --> 00:09:15,279
browser extensions

243
00:09:15,279 --> 00:09:17,600
and and one big thing is electron apps

244
00:09:17,600 --> 00:09:21,440
that are also using web contacts and

245
00:09:21,440 --> 00:09:23,760
here of course i scripting might be an

246
00:09:23,760 --> 00:09:26,399
actual remote code execution where a

247
00:09:26,399 --> 00:09:28,080
cross-site scripting can really lead the

248
00:09:28,080 --> 00:09:30,399
attacker into running actual code

249
00:09:30,399 --> 00:09:32,399
on uh the

250
00:09:32,399 --> 00:09:34,399
the victim's machine all right so no

251
00:09:34,399 --> 00:09:36,000
need for

252
00:09:36,000 --> 00:09:38,800
in some configuration no need for fancy

253
00:09:38,800 --> 00:09:41,760
browser exploit or sandbox escape

254
00:09:41,760 --> 00:09:42,959
sometimes

255
00:09:42,959 --> 00:09:44,800
you you have direct code execution

256
00:09:44,800 --> 00:09:47,440
obviously electrons become much more

257
00:09:47,440 --> 00:09:49,360
safer in

258
00:09:49,360 --> 00:09:51,440
the past years to to prevent those kind

259
00:09:51,440 --> 00:09:52,320
of things

260
00:09:52,320 --> 00:09:55,279
but that's still something that you find

261
00:09:55,279 --> 00:09:56,320
and

262
00:09:56,320 --> 00:09:59,360
obviously you have some common bypasses

263
00:09:59,360 --> 00:10:02,000
one of the most recent and interesting

264
00:10:02,000 --> 00:10:05,600
ones are the script gadgets so uh

265
00:10:05,600 --> 00:10:07,680
they are assuming that you found the

266
00:10:07,680 --> 00:10:09,600
cross-site scripting exploiter exploit

267
00:10:09,600 --> 00:10:11,360
somewhere but that some

268
00:10:11,360 --> 00:10:13,920
protections are preventing the hackers

269
00:10:13,920 --> 00:10:15,680
to to exploit it

270
00:10:15,680 --> 00:10:17,920
script gadgets will leverage code from

271
00:10:17,920 --> 00:10:19,200
the frameworks

272
00:10:19,200 --> 00:10:20,959
to actually inject something that will

273
00:10:20,959 --> 00:10:22,720
get executed by the framework which

274
00:10:22,720 --> 00:10:24,560
obviously is authorized and will

275
00:10:24,560 --> 00:10:27,760
actually reach a javascript execution

276
00:10:27,760 --> 00:10:29,600
and content security policy that vlad

277
00:10:29,600 --> 00:10:30,480
will

278
00:10:30,480 --> 00:10:32,560
describe a bit later

279
00:10:32,560 --> 00:10:34,240
is also something that

280
00:10:34,240 --> 00:10:36,720
can be bypassed it's

281
00:10:36,720 --> 00:10:38,640
complex it's

282
00:10:38,640 --> 00:10:40,160
hard to get

283
00:10:40,160 --> 00:10:43,120
perfectly right and pretty often you can

284
00:10:43,120 --> 00:10:45,839
find bypasses within content security

285
00:10:45,839 --> 00:10:47,839
policy so you have tools that will test

286
00:10:47,839 --> 00:10:51,600
them for for weaknesses and

287
00:10:51,600 --> 00:10:54,959
the the content security policy

288
00:10:54,959 --> 00:10:56,079
evolved

289
00:10:56,079 --> 00:10:58,640
lately into something

290
00:10:58,640 --> 00:11:00,880
much more flexible using strict dynamic

291
00:11:00,880 --> 00:11:02,640
et cetera it was very very hard to

292
00:11:02,640 --> 00:11:04,560
implement a few years ago and it's

293
00:11:04,560 --> 00:11:06,880
becoming more and more realistic to uh

294
00:11:06,880 --> 00:11:08,880
to implement

295
00:11:08,880 --> 00:11:12,920
so demo time

296
00:11:14,399 --> 00:11:16,800
so let's assume that uh

297
00:11:16,800 --> 00:11:19,120
i'm a hero hacker right so that that

298
00:11:19,120 --> 00:11:23,040
black window uh is my uh my my hacker

299
00:11:23,040 --> 00:11:24,959
window right

300
00:11:24,959 --> 00:11:28,640
so this is beef beef is an exploitation

301
00:11:28,640 --> 00:11:31,279
framework so as an attacker i might be

302
00:11:31,279 --> 00:11:32,880
using beef

303
00:11:32,880 --> 00:11:34,560
in order to uh

304
00:11:34,560 --> 00:11:35,920
collect

305
00:11:35,920 --> 00:11:37,279
some

306
00:11:37,279 --> 00:11:40,560
crosses scripting payloads that i've put

307
00:11:40,560 --> 00:11:44,640
on many websites right so what i will

308
00:11:44,640 --> 00:11:47,200
run as a javascript payload is not a

309
00:11:47,200 --> 00:11:49,040
script alert to demonstrate that it

310
00:11:49,040 --> 00:11:52,800
works it's a url pointing to beef my

311
00:11:52,800 --> 00:11:55,120
beef instance for instance and that

312
00:11:55,120 --> 00:11:56,800
thing will allow me to do a lot of

313
00:11:56,800 --> 00:11:58,079
things on

314
00:11:58,079 --> 00:12:00,399
on that cross-site scripting so let's

315
00:12:00,399 --> 00:12:02,800
assume

316
00:12:02,880 --> 00:12:04,320
that

317
00:12:04,320 --> 00:12:06,240
i'm the administrator

318
00:12:06,240 --> 00:12:09,680
of a blog that blog is running ghost and

319
00:12:09,680 --> 00:12:11,839
i'm visiting the the website just to to

320
00:12:11,839 --> 00:12:14,240
check if everything is fine and here we

321
00:12:14,240 --> 00:12:15,440
have a page

322
00:12:15,440 --> 00:12:17,279
that is vulnerable to cross-site

323
00:12:17,279 --> 00:12:20,000
scripting and that has been injected

324
00:12:20,000 --> 00:12:22,000
by the attacker previously alright so as

325
00:12:22,000 --> 00:12:24,800
an admin obviously i don't know

326
00:12:24,800 --> 00:12:26,720
the attacker would not label the page as

327
00:12:26,720 --> 00:12:30,079
xs as vulnerable hopefully

328
00:12:30,079 --> 00:12:32,560
and so when the attacker

329
00:12:32,560 --> 00:12:34,720
looks at their console

330
00:12:34,720 --> 00:12:36,800
they can see that

331
00:12:36,800 --> 00:12:39,120
we have that browser who showed up all

332
00:12:39,120 --> 00:12:41,519
right so what can we do with that

333
00:12:41,519 --> 00:12:43,040
you have a lot of information about the

334
00:12:43,040 --> 00:12:45,519
browser that's pretty interesting

335
00:12:45,519 --> 00:12:46,399
and

336
00:12:46,399 --> 00:12:49,600
you have comments so comments are actual

337
00:12:49,600 --> 00:12:52,399
javascript payloads that beef

338
00:12:52,399 --> 00:12:54,800
can instruct the victim's browser to

339
00:12:54,800 --> 00:12:57,440
execute and so you can think of anything

340
00:12:57,440 --> 00:12:59,519
you have like a metasploit

341
00:12:59,519 --> 00:13:01,920
integration to exploit like zero days

342
00:13:01,920 --> 00:13:05,279
and some browsers or whatever

343
00:13:05,279 --> 00:13:07,120
and

344
00:13:07,120 --> 00:13:10,480
here in that case i wrote a very simple

345
00:13:10,480 --> 00:13:14,639
payload that allows to add a user in the

346
00:13:14,639 --> 00:13:17,040
in the website so i will just put like

347
00:13:17,040 --> 00:13:20,560
uh some some email

348
00:13:21,760 --> 00:13:24,079
so that's my actual email

349
00:13:24,079 --> 00:13:26,959
and i will execute the payload okay

350
00:13:26,959 --> 00:13:29,360
after just a while we can see that the

351
00:13:29,360 --> 00:13:30,720
the payload was

352
00:13:30,720 --> 00:13:32,240
fulfilled

353
00:13:32,240 --> 00:13:35,120
and if as

354
00:13:35,120 --> 00:13:36,959
as a staff i come back in the in the

355
00:13:36,959 --> 00:13:39,839
console i can see that yes the uh the

356
00:13:39,839 --> 00:13:42,959
user was was added so

357
00:13:42,959 --> 00:13:46,720
all i did was actually run javascript

358
00:13:46,720 --> 00:13:47,519
in

359
00:13:47,519 --> 00:13:50,079
describes that scripting session

360
00:13:50,079 --> 00:13:54,079
with the permission of the user who is

361
00:13:54,079 --> 00:13:56,800
a blog administrator and so that allowed

362
00:13:56,800 --> 00:13:59,440
me to do that all right

363
00:13:59,440 --> 00:14:01,360
that's a typical cross-site scripting

364
00:14:01,360 --> 00:14:04,079
exploitation use case where you are

365
00:14:04,079 --> 00:14:05,760
leveraging the actions that are

366
00:14:05,760 --> 00:14:07,440
available

367
00:14:07,440 --> 00:14:11,680
to regular users of the website but

368
00:14:11,680 --> 00:14:14,680
silently

369
00:14:17,519 --> 00:14:20,560
vlad my demo didn't break so

370
00:14:20,560 --> 00:14:22,320
okay no pressure on me

371
00:14:22,320 --> 00:14:23,199
um

372
00:14:23,199 --> 00:14:24,720
thanks jb

373
00:14:24,720 --> 00:14:27,120
so now normally the next question is how

374
00:14:27,120 --> 00:14:29,600
can we protect against excesses and the

375
00:14:29,600 --> 00:14:32,000
question is multiple way exists to

376
00:14:32,000 --> 00:14:34,560
protect against excesses so let's start

377
00:14:34,560 --> 00:14:36,880
with what happens browser site small

378
00:14:36,880 --> 00:14:39,199
disclaimer sometimes

379
00:14:39,199 --> 00:14:42,320
mechanism in the browser necessity

380
00:14:42,320 --> 00:14:44,959
mechanism server side so maybe the

381
00:14:44,959 --> 00:14:47,360
separation which may we made is a bit

382
00:14:47,360 --> 00:14:50,560
arbitrary let's just go with it

383
00:14:50,560 --> 00:14:53,120
so first solution no javascript no

384
00:14:53,120 --> 00:14:54,399
problem right

385
00:14:54,399 --> 00:14:57,519
so um disabled javascript might be

386
00:14:57,519 --> 00:14:58,880
please don't do that

387
00:14:58,880 --> 00:15:00,880
might be a solution to disable xss one

388
00:15:00,880 --> 00:15:04,000
of the pros basically no xss cons well

389
00:15:04,000 --> 00:15:06,000
you need to ask your own user to remove

390
00:15:06,000 --> 00:15:07,760
javascript from their own browser which

391
00:15:07,760 --> 00:15:09,920
is challenging on modern browsers and

392
00:15:09,920 --> 00:15:12,000
also that will remove access to the

393
00:15:12,000 --> 00:15:14,320
world modern web so sorry for french i

394
00:15:14,320 --> 00:15:16,399
did not manage to get this error message

395
00:15:16,399 --> 00:15:18,480
in english but there's basically a

396
00:15:18,480 --> 00:15:20,639
twitter yelling at me for not having

397
00:15:20,639 --> 00:15:22,399
javascript enabled

398
00:15:22,399 --> 00:15:24,959
funnily enough in 1999 when javascript

399
00:15:24,959 --> 00:15:27,279
and the threat model of the web was not

400
00:15:27,279 --> 00:15:30,880
that mature there was a cv published

401
00:15:30,880 --> 00:15:32,480
impacting

402
00:15:32,480 --> 00:15:35,279
netscape navigator and internet explorer

403
00:15:35,279 --> 00:15:37,600
why they would say that javascript could

404
00:15:37,600 --> 00:15:41,040
be used to track users over the internet

405
00:15:41,040 --> 00:15:43,360
as the time have changed so anyway

406
00:15:43,360 --> 00:15:45,920
please don't disable javascript and

407
00:15:45,920 --> 00:15:47,440
don't encourage anyone to disable

408
00:15:47,440 --> 00:15:50,320
javascript this was totally a jukey

409
00:15:50,320 --> 00:15:52,560
slide

410
00:15:52,560 --> 00:15:54,639
content security policy so content

411
00:15:54,639 --> 00:15:56,880
security policy jb already a bit touch

412
00:15:56,880 --> 00:15:58,639
based on that

413
00:15:58,639 --> 00:16:01,279
basically that's a header that you add

414
00:16:01,279 --> 00:16:03,279
to the website where you serve it and

415
00:16:03,279 --> 00:16:06,160
you define where the assets

416
00:16:06,160 --> 00:16:09,360
used by the html documents can be loaded

417
00:16:09,360 --> 00:16:10,160
from

418
00:16:10,160 --> 00:16:11,839
for instance you can say that the

419
00:16:11,839 --> 00:16:13,920
scripts can only be loaded from a

420
00:16:13,920 --> 00:16:16,160
certain set of domains or that the

421
00:16:16,160 --> 00:16:18,800
images can only be loaded from the

422
00:16:18,800 --> 00:16:21,360
current domain and you can even put hash

423
00:16:21,360 --> 00:16:23,519
integrity hash to make sure that script

424
00:16:23,519 --> 00:16:25,600
images style sheets are not tampered

425
00:16:25,600 --> 00:16:30,079
with that's actually pretty powerful

426
00:16:30,160 --> 00:16:33,120
there is something extremely cool with

427
00:16:33,120 --> 00:16:36,320
csp and not csp policy because it would

428
00:16:36,320 --> 00:16:39,040
mean content security policy pc and that

429
00:16:39,040 --> 00:16:40,880
would be slightly redundant

430
00:16:40,880 --> 00:16:43,360
so this thing with csp policy

431
00:16:43,360 --> 00:16:45,920
this thing with csp is that

432
00:16:45,920 --> 00:16:47,759
you can monitor them so when there are

433
00:16:47,759 --> 00:16:50,560
violation the browser will send actually

434
00:16:50,560 --> 00:16:52,639
a post request to a server that you

435
00:16:52,639 --> 00:16:55,519
defined in your csp and you can monitor

436
00:16:55,519 --> 00:16:57,839
that you can also configure your csp to

437
00:16:57,839 --> 00:16:59,920
be non-blocking or blocking i will come

438
00:16:59,920 --> 00:17:02,880
back to that in a minute so csp is easy

439
00:17:02,880 --> 00:17:04,880
to monitor but that requires a lot of

440
00:17:04,880 --> 00:17:07,280
traffic going your way so there are a

441
00:17:07,280 --> 00:17:10,240
few sas that can be used to monitor csp

442
00:17:10,240 --> 00:17:12,319
in the wild and let you know in real

443
00:17:12,319 --> 00:17:15,919
time uh when your csp is your when your

444
00:17:15,919 --> 00:17:18,559
policy is actually being breached

445
00:17:18,559 --> 00:17:20,400
which could mean two things you're under

446
00:17:20,400 --> 00:17:23,119
attack and someone found an xss or your

447
00:17:23,119 --> 00:17:25,199
website your website is broken because

448
00:17:25,199 --> 00:17:28,000
your csp is not up to date

449
00:17:28,000 --> 00:17:30,559
shameless plugin datadog can help you

450
00:17:30,559 --> 00:17:33,200
monitor your csp that's the only piece

451
00:17:33,200 --> 00:17:35,280
of advertising in this talk sorry about

452
00:17:35,280 --> 00:17:36,320
that

453
00:17:36,320 --> 00:17:37,760
um

454
00:17:37,760 --> 00:17:40,000
csp might be hard to maintain because

455
00:17:40,000 --> 00:17:41,840
you have to update it each time you

456
00:17:41,840 --> 00:17:44,640
update your assets in your website let's

457
00:17:44,640 --> 00:17:46,320
say you want to have a new dependency

458
00:17:46,320 --> 00:17:48,400
from a cdn well you need to make sure

459
00:17:48,400 --> 00:17:50,720
you update your c you update your csp

460
00:17:50,720 --> 00:17:53,280
otherwise this assets image script

461
00:17:53,280 --> 00:17:54,960
anything will be blocked and your

462
00:17:54,960 --> 00:17:57,440
website will be broken thankfully thanks

463
00:17:57,440 --> 00:17:59,440
to monitoring you will know that

464
00:17:59,440 --> 00:18:03,120
faster than your customer will complain

465
00:18:03,120 --> 00:18:03,919
but

466
00:18:03,919 --> 00:18:06,000
it is not supported by very older

467
00:18:06,000 --> 00:18:08,320
browser as most of what we will discuss

468
00:18:08,320 --> 00:18:09,440
today anyway

469
00:18:09,440 --> 00:18:11,280
so feel free to check that out that's a

470
00:18:11,280 --> 00:18:13,360
really cool piece of technology but can

471
00:18:13,360 --> 00:18:15,840
we go even further than csp

472
00:18:15,840 --> 00:18:18,559
yes we can introducing trusted types

473
00:18:18,559 --> 00:18:22,399
trusted types is probably my favorite

474
00:18:22,720 --> 00:18:24,880
xss make a defense mechanism mostly

475
00:18:24,880 --> 00:18:27,120
because i'm a javascript node

476
00:18:27,120 --> 00:18:29,520
but basically you have a csp and you

477
00:18:29,520 --> 00:18:31,039
define what's called a trusted type

478
00:18:31,039 --> 00:18:34,080
policy in it so you say hey i will

479
00:18:34,080 --> 00:18:36,799
create a javascript piece of code that i

480
00:18:36,799 --> 00:18:38,000
will name

481
00:18:38,000 --> 00:18:40,000
sanitizing policy

482
00:18:40,000 --> 00:18:42,400
and each time you

483
00:18:42,400 --> 00:18:44,720
call in javascript what are called the

484
00:18:44,720 --> 00:18:46,080
things

485
00:18:46,080 --> 00:18:48,400
well it must go through a sanitization

486
00:18:48,400 --> 00:18:51,679
method before that so let me start again

487
00:18:51,679 --> 00:18:53,120
trustee type consider that there are

488
00:18:53,120 --> 00:18:56,880
like three things for xss

489
00:18:56,880 --> 00:18:59,679
create html when you call inner or auto

490
00:18:59,679 --> 00:19:03,039
html on a dom element create script when

491
00:19:03,039 --> 00:19:05,280
you call eval for instance or create

492
00:19:05,280 --> 00:19:07,600
script url when you load dynamically a

493
00:19:07,600 --> 00:19:10,559
script from another piece of script

494
00:19:10,559 --> 00:19:12,720
when you enable trusted types

495
00:19:12,720 --> 00:19:14,640
you create what's called a policy which

496
00:19:14,640 --> 00:19:17,120
is just a set of javascript function and

497
00:19:17,120 --> 00:19:20,080
when you call inner html for instance

498
00:19:20,080 --> 00:19:22,799
if you call in html with a string that

499
00:19:22,799 --> 00:19:24,880
is not the outcome of a sanitizing

500
00:19:24,880 --> 00:19:27,840
function this will refuse to execute

501
00:19:27,840 --> 00:19:30,559
we will demo that in a couple slides but

502
00:19:30,559 --> 00:19:33,039
the idea is that you cannot use these

503
00:19:33,039 --> 00:19:36,320
things without going through the policy

504
00:19:36,320 --> 00:19:38,480
before i go to the live demo and have a

505
00:19:38,480 --> 00:19:41,440
chance to do something wrong live

506
00:19:41,440 --> 00:19:43,600
uh let's talk quickly about dom purified

507
00:19:43,600 --> 00:19:46,559
and purify is actually a library it's

508
00:19:46,559 --> 00:19:48,320
pretty mature it's an open source

509
00:19:48,320 --> 00:19:51,280
project and basically what it does it

510
00:19:51,280 --> 00:19:52,640
sanitize

511
00:19:52,640 --> 00:19:55,760
inputs so they can be used safely

512
00:19:55,760 --> 00:19:58,480
rendered in the browser in the dom so

513
00:19:58,480 --> 00:20:00,160
it's really lightweight and it plays

514
00:20:00,160 --> 00:20:01,919
really well with trusted type

515
00:20:01,919 --> 00:20:04,799
but as any of these kinds of libraries

516
00:20:04,799 --> 00:20:06,720
it can have false negatives or false

517
00:20:06,720 --> 00:20:08,880
positives so one must be really aware of

518
00:20:08,880 --> 00:20:11,039
the behavior of don't purify when they

519
00:20:11,039 --> 00:20:13,360
use it also since it's an open source

520
00:20:13,360 --> 00:20:15,360
library everything is public and you can

521
00:20:15,360 --> 00:20:17,600
find order bypass bypasses in the

522
00:20:17,600 --> 00:20:19,520
previous version of it just by looking

523
00:20:19,520 --> 00:20:21,679
at the changelog

524
00:20:21,679 --> 00:20:23,919
the really cool thing is that dom purify

525
00:20:23,919 --> 00:20:25,520
is actually under the process of

526
00:20:25,520 --> 00:20:27,760
becoming a web standard under the name

527
00:20:27,760 --> 00:20:30,880
of html sanitizer api which is currently

528
00:20:30,880 --> 00:20:32,240
supported by

529
00:20:32,240 --> 00:20:35,120
xero browser last time we checked uh but

530
00:20:35,120 --> 00:20:37,360
that's an exciting part because uh the

531
00:20:37,360 --> 00:20:39,520
web is currently building more and more

532
00:20:39,520 --> 00:20:41,919
tools to fight xss from your code base

533
00:20:41,919 --> 00:20:43,440
dynamically

534
00:20:43,440 --> 00:20:45,280
okay that's the part of the top where

535
00:20:45,280 --> 00:20:46,960
i'm terrified so let's go for the more

536
00:20:46,960 --> 00:20:49,600
time

537
00:20:49,600 --> 00:20:52,480
in this demo we will just play with the

538
00:20:52,480 --> 00:20:54,480
same website

539
00:20:54,480 --> 00:20:58,880
let me zoom in a bit because on keyboard

540
00:20:58,880 --> 00:21:01,760
yeah so that's a website it says hello i

541
00:21:01,760 --> 00:21:03,919
was too lazy to write world

542
00:21:03,919 --> 00:21:06,080
so let's make it a hello world website

543
00:21:06,080 --> 00:21:07,600
now

544
00:21:07,600 --> 00:21:09,039
username

545
00:21:09,039 --> 00:21:10,080
equal

546
00:21:10,080 --> 00:21:11,039
world

547
00:21:11,039 --> 00:21:14,240
and now it says hello world oh basically

548
00:21:14,240 --> 00:21:16,880
thanks baby that's basically a website

549
00:21:16,880 --> 00:21:19,919
that you can use to greet anyone and you

550
00:21:19,919 --> 00:21:22,240
give them the url and say click on that

551
00:21:22,240 --> 00:21:24,400
and they are greeted by that

552
00:21:24,400 --> 00:21:27,440
the hackers the hackers here recognized

553
00:21:27,440 --> 00:21:30,480
reflected down based excesses and that

554
00:21:30,480 --> 00:21:32,799
you can throw forward to people through

555
00:21:32,799 --> 00:21:34,000
um

556
00:21:34,000 --> 00:21:37,039
through social engineering so let's

557
00:21:37,039 --> 00:21:38,559
explore that should we

558
00:21:38,559 --> 00:21:40,880
as you can see it has been programmed by

559
00:21:40,880 --> 00:21:42,559
someone who doesn't know much about the

560
00:21:42,559 --> 00:21:46,480
web so if i do emg dot src equals x

561
00:21:46,480 --> 00:21:49,840
which is an invalid url i even put a z

562
00:21:49,840 --> 00:21:53,120
here and we can put an error

563
00:21:53,120 --> 00:21:54,640
call back

564
00:21:54,640 --> 00:21:56,840
on air roar

565
00:21:56,840 --> 00:21:59,120
equals alerts

566
00:21:59,120 --> 00:22:01,919
and let's try that and here we have we

567
00:22:01,919 --> 00:22:03,600
are running arbitrary code and we can

568
00:22:03,600 --> 00:22:05,280
send that to people steal their

569
00:22:05,280 --> 00:22:08,000
credential and their bank account money

570
00:22:08,000 --> 00:22:10,480
and pretty much impersonate them because

571
00:22:10,480 --> 00:22:12,320
we steal their identity which is

572
00:22:12,320 --> 00:22:16,879
terrible so let's fight against it

573
00:22:16,960 --> 00:22:20,960
to fight against it we will first try to

574
00:22:20,960 --> 00:22:23,120
enable a csp

575
00:22:23,120 --> 00:22:25,919
so if we check the code of my web page

576
00:22:25,919 --> 00:22:27,600
you can see that i'm a very good web

577
00:22:27,600 --> 00:22:30,240
developer i'm still using align center

578
00:22:30,240 --> 00:22:33,120
because i didn't want to put css in that

579
00:22:33,120 --> 00:22:36,080
we can inject a csp directly into the

580
00:22:36,080 --> 00:22:38,320
html page we don't really need

581
00:22:38,320 --> 00:22:41,039
headers the the web is related so let's

582
00:22:41,039 --> 00:22:44,240
say we want images to be only loaded

583
00:22:44,240 --> 00:22:46,799
from the same domain in theory that

584
00:22:46,799 --> 00:22:48,799
should prevent loading this arbitrary

585
00:22:48,799 --> 00:22:50,000
image right

586
00:22:50,000 --> 00:22:51,600
let's try that

587
00:22:51,600 --> 00:22:53,440
okay so

588
00:22:53,440 --> 00:22:55,760
good thing it's already there

589
00:22:55,760 --> 00:22:57,760
we still have an xss

590
00:22:57,760 --> 00:22:59,039
why

591
00:22:59,039 --> 00:23:00,880
because actually the xss is not

592
00:23:00,880 --> 00:23:03,200
unloading the image it's unloading the

593
00:23:03,200 --> 00:23:06,320
arbitrary scripts that happens when we

594
00:23:06,320 --> 00:23:08,480
can't load the image so if i check the

595
00:23:08,480 --> 00:23:10,480
console

596
00:23:10,480 --> 00:23:13,120
inspect that's not my laptop and jb as a

597
00:23:13,120 --> 00:23:14,640
french keyboard that's why it might be

598
00:23:14,640 --> 00:23:15,840
lost

599
00:23:15,840 --> 00:23:18,159
if we check the console it tells us

600
00:23:18,159 --> 00:23:20,960
refuse to load image because it violates

601
00:23:20,960 --> 00:23:23,200
the content security policy so it

602
00:23:23,200 --> 00:23:24,720
doesn't want to load the image but the

603
00:23:24,720 --> 00:23:27,039
script is not part of the image so it's

604
00:23:27,039 --> 00:23:30,640
a valid thing so what we need to do

605
00:23:30,640 --> 00:23:32,640
is actually

606
00:23:32,640 --> 00:23:36,000
prevent loading scripts from arbitrary

607
00:23:36,000 --> 00:23:39,120
places so i've updated the csp

608
00:23:39,120 --> 00:23:41,760
and now i've got content script ssc and

609
00:23:41,760 --> 00:23:43,600
then i put unknowns

610
00:23:43,600 --> 00:23:46,799
yes you can either use hashes domains or

611
00:23:46,799 --> 00:23:48,880
nonsees to define what a set can be

612
00:23:48,880 --> 00:23:51,760
loaded so in that case i just

613
00:23:51,760 --> 00:23:53,039
generated

614
00:23:53,039 --> 00:23:56,480
a random uid and in the script that runs

615
00:23:56,480 --> 00:23:58,880
the code i've got this as a note so

616
00:23:58,880 --> 00:24:01,039
basically this csp means the only

617
00:24:01,039 --> 00:24:02,720
javascript that's allowed to run on this

618
00:24:02,720 --> 00:24:05,919
page is that one and none of those okay

619
00:24:05,919 --> 00:24:09,279
so let's check that in real time

620
00:24:09,279 --> 00:24:12,720
i still have my exploit in the url

621
00:24:12,720 --> 00:24:14,880
refreshing and we don't have the easy

622
00:24:14,880 --> 00:24:16,240
access

623
00:24:16,240 --> 00:24:18,799
we save the web

624
00:24:18,799 --> 00:24:21,200
okay it would be too easy if we didn't

625
00:24:21,200 --> 00:24:23,600
use trusted types and because i met at a

626
00:24:23,600 --> 00:24:25,440
security conference i want to show some

627
00:24:25,440 --> 00:24:27,279
real javascript code because i'm a

628
00:24:27,279 --> 00:24:29,360
javascript nerd i think i mentioned that

629
00:24:29,360 --> 00:24:30,840
already we

630
00:24:30,840 --> 00:24:33,360
know come on i made all my carrier with

631
00:24:33,360 --> 00:24:35,520
no.js don't be mean

632
00:24:35,520 --> 00:24:38,559
so you know what let's add a trusted

633
00:24:38,559 --> 00:24:40,640
type let's say that we want to be better

634
00:24:40,640 --> 00:24:43,520
than that and to have dynamic so i still

635
00:24:43,520 --> 00:24:44,960
have a csp

636
00:24:44,960 --> 00:24:46,880
no policy

637
00:24:46,880 --> 00:24:49,919
and i say trusted type mypolicy and i

638
00:24:49,919 --> 00:24:52,240
also say require trustee type for script

639
00:24:52,240 --> 00:24:54,720
to make sure it knows it's not allowed

640
00:24:54,720 --> 00:24:57,679
to run scripts without trustee type okay

641
00:24:57,679 --> 00:24:59,679
so i told you that the policy needs to

642
00:24:59,679 --> 00:25:02,480
be defined and thankfully there's

643
00:25:02,480 --> 00:25:04,720
actually an api available directly in

644
00:25:04,720 --> 00:25:06,600
the browser so we do

645
00:25:06,600 --> 00:25:08,159
trustedtype.createpolicy

646
00:25:08,159 --> 00:25:11,279
we give it a name so i named it mypolicy

647
00:25:11,279 --> 00:25:12,720
like my first dog

648
00:25:12,720 --> 00:25:14,799
and uh in this

649
00:25:14,799 --> 00:25:17,440
policy creation you create something for

650
00:25:17,440 --> 00:25:19,120
the things so i told you there are three

651
00:25:19,120 --> 00:25:22,159
things things one for html one for js

652
00:25:22,159 --> 00:25:24,480
one for js for url this one is for

653
00:25:24,480 --> 00:25:26,840
create html so that's a function that

654
00:25:26,840 --> 00:25:28,480
takes a scree

655
00:25:28,480 --> 00:25:30,559
a string as argument and returns a

656
00:25:30,559 --> 00:25:32,080
string okay

657
00:25:32,080 --> 00:25:33,760
that's an easy function it does not

658
00:25:33,760 --> 00:25:37,279
sanitize much but let's see if it works

659
00:25:37,279 --> 00:25:38,640
let's try that

660
00:25:38,640 --> 00:25:41,120
so it's step three

661
00:25:41,120 --> 00:25:44,320
oh my god spoiler alert i refresh and

662
00:25:44,320 --> 00:25:46,880
here i write username equal world and

663
00:25:46,880 --> 00:25:48,400
nothing happens

664
00:25:48,400 --> 00:25:49,279
why

665
00:25:49,279 --> 00:25:53,120
because i forgot to sanitize my content

666
00:25:53,120 --> 00:25:56,640
before passing it to inner html let me

667
00:25:56,640 --> 00:25:59,760
show you the error in the console encode

668
00:25:59,760 --> 00:26:03,360
type error filed to set the inner html

669
00:26:03,360 --> 00:26:06,000
property and element these documents

670
00:26:06,000 --> 00:26:09,520
require trusted html assignment

671
00:26:09,520 --> 00:26:13,039
why because here i'm assigning to inner

672
00:26:13,039 --> 00:26:15,520
html without going through the

673
00:26:15,520 --> 00:26:18,720
sanitizing function that i have defined

674
00:26:18,720 --> 00:26:20,799
in my policy

675
00:26:20,799 --> 00:26:23,039
so let's do that properly we have

676
00:26:23,039 --> 00:26:25,679
exactly the same code but here

677
00:26:25,679 --> 00:26:29,640
we call window.mypolicy.create.html

678
00:26:30,400 --> 00:26:31,440
and now

679
00:26:31,440 --> 00:26:34,000
this outcome of this function is

680
00:26:34,000 --> 00:26:38,080
actually load to be used for inner html

681
00:26:38,080 --> 00:26:39,279
assignment

682
00:26:39,279 --> 00:26:42,880
okay so let's go to the next part

683
00:26:42,880 --> 00:26:46,640
let's refresh and we still have an xss

684
00:26:46,640 --> 00:26:48,799
why of course because my son is my

685
00:26:48,799 --> 00:26:51,200
sanitization method was not sanitizing

686
00:26:51,200 --> 00:26:52,480
anything right

687
00:26:52,480 --> 00:26:54,960
if if we check the sanitization method

688
00:26:54,960 --> 00:26:56,480
here

689
00:26:56,480 --> 00:26:58,640
it actually returns the argument so it's

690
00:26:58,640 --> 00:27:00,640
not sanitizing anything we are missing

691
00:27:00,640 --> 00:27:03,200
the last bit of the part so let's go to

692
00:27:03,200 --> 00:27:05,360
step five oh my god it's been written so

693
00:27:05,360 --> 00:27:08,159
well and here we are calling dom purify

694
00:27:08,159 --> 00:27:11,279
which actually sanitize the input so

695
00:27:11,279 --> 00:27:14,559
let's go to the step 5 refresh the page

696
00:27:14,559 --> 00:27:15,600
with

697
00:27:15,600 --> 00:27:19,480
world as an argument

698
00:27:20,000 --> 00:27:22,640
sold yeah that was my first

699
00:27:22,640 --> 00:27:24,240
nickname on the internet

700
00:27:24,240 --> 00:27:25,039
uh

701
00:27:25,039 --> 00:27:27,919
and voila it works because this thing is

702
00:27:27,919 --> 00:27:30,480
not actually a malicious payload and if

703
00:27:30,480 --> 00:27:31,919
i go back because i'm too afraid of

704
00:27:31,919 --> 00:27:35,200
typing a typo i refresh here you have my

705
00:27:35,200 --> 00:27:38,480
exploit and it doesn't do anything

706
00:27:38,480 --> 00:27:40,559
because it has been sanitized by dom

707
00:27:40,559 --> 00:27:44,480
purify configured in very strict mode

708
00:27:44,480 --> 00:27:45,440
so

709
00:27:45,440 --> 00:27:48,000
so far so good we did 2d move over to jb

710
00:27:48,000 --> 00:27:49,760
can i get a high five please

711
00:27:49,760 --> 00:27:52,000
so i'm gonna give it to you but uh you

712
00:27:52,000 --> 00:27:54,159
know in security conference yeah yeah

713
00:27:54,159 --> 00:27:55,760
and you just give the entire audience

714
00:27:55,760 --> 00:27:59,440
the name of your first dog oh yes

715
00:27:59,679 --> 00:28:00,480
so

716
00:28:00,480 --> 00:28:02,640
let's talk a bit about the cookie thing

717
00:28:02,640 --> 00:28:04,320
because jb and i have an obsession with

718
00:28:04,320 --> 00:28:05,279
cookies

719
00:28:05,279 --> 00:28:06,159
uh

720
00:28:06,159 --> 00:28:08,000
i mean the treat not the

721
00:28:08,000 --> 00:28:10,880
um but okay so

722
00:28:10,880 --> 00:28:12,159
it's actually really important to

723
00:28:12,159 --> 00:28:14,320
consider cookie when you are considering

724
00:28:14,320 --> 00:28:16,880
the web freight model all together

725
00:28:16,880 --> 00:28:20,080
you should use ht you must use http only

726
00:28:20,080 --> 00:28:21,679
so your cookies are not available

727
00:28:21,679 --> 00:28:23,840
through javascript disclaimers that

728
00:28:23,840 --> 00:28:26,000
won't prevent people from impersonating

729
00:28:26,000 --> 00:28:28,640
your users through xss but that will

730
00:28:28,640 --> 00:28:31,360
prevent people from taking these cookies

731
00:28:31,360 --> 00:28:33,360
and taking them somewhere else like

732
00:28:33,360 --> 00:28:35,520
escaping stealing those cookies so they

733
00:28:35,520 --> 00:28:38,000
can still use them in the scope of the

734
00:28:38,000 --> 00:28:40,399
venerable website but they cannot take

735
00:28:40,399 --> 00:28:41,919
the cookies outside

736
00:28:41,919 --> 00:28:44,159
for the other parts

737
00:28:44,159 --> 00:28:46,640
they are not that much linked to xss but

738
00:28:46,640 --> 00:28:48,960
any slide about cookies should talk

739
00:28:48,960 --> 00:28:50,960
about all these attributes so let's go

740
00:28:50,960 --> 00:28:53,200
really quickly over them secure the

741
00:28:53,200 --> 00:28:55,600
cookies can only be exchanged over https

742
00:28:55,600 --> 00:28:58,159
no unencrypted traffic domain path and

743
00:28:58,159 --> 00:29:01,440
same seat we know exactly on which hosts

744
00:29:01,440 --> 00:29:04,080
those cookies are sent to

745
00:29:04,080 --> 00:29:06,640
so this prevent cookie theft this does

746
00:29:06,640 --> 00:29:09,279
not prevent escalation please do that

747
00:29:09,279 --> 00:29:10,080
that's

748
00:29:10,080 --> 00:29:13,200
really like web security 101

749
00:29:13,200 --> 00:29:16,559
and in that just follow my quest who who

750
00:29:16,559 --> 00:29:19,840
is a guru of the and on the google team

751
00:29:19,840 --> 00:29:22,320
all together uh exceptional in terms of

752
00:29:22,320 --> 00:29:24,559
evangelism around excesses and cookies

753
00:29:24,559 --> 00:29:27,200
and and also in terms of writing the

754
00:29:27,200 --> 00:29:29,200
next generation of web protections

755
00:29:29,200 --> 00:29:32,240
google but also like mozilla the the

756
00:29:32,240 --> 00:29:34,080
those browser teams are really pushing

757
00:29:34,080 --> 00:29:36,559
forward and and that's very often thanks

758
00:29:36,559 --> 00:29:38,960
to them that uh safari for instance is

759
00:29:38,960 --> 00:29:40,559
catching up after he's catching up on

760
00:29:40,559 --> 00:29:42,640
the under the security

761
00:29:42,640 --> 00:29:43,760
measures

762
00:29:43,760 --> 00:29:44,880
um

763
00:29:44,880 --> 00:29:47,200
so just a word on the on the future of

764
00:29:47,200 --> 00:29:49,039
browser defenses we we talked about

765
00:29:49,039 --> 00:29:51,200
what's available today or mostly

766
00:29:51,200 --> 00:29:53,840
available today um content security

767
00:29:53,840 --> 00:29:56,880
policy continues to to evolve uh the

768
00:29:56,880 --> 00:30:00,320
most common uh kind of evolutions on it

769
00:30:00,320 --> 00:30:02,080
is uh it's following the brothers

770
00:30:02,080 --> 00:30:03,919
revolution you know with uh walker

771
00:30:03,919 --> 00:30:06,799
scripts with uh wasm and all of the

772
00:30:06,799 --> 00:30:08,880
things are

773
00:30:08,880 --> 00:30:11,440
are able to be expressed in a in a

774
00:30:11,440 --> 00:30:13,679
policy so so you can restrict them

775
00:30:13,679 --> 00:30:14,799
accordingly

776
00:30:14,799 --> 00:30:17,760
so the html sanitizer api that vlad

777
00:30:17,760 --> 00:30:19,760
described you know it's very hard to

778
00:30:19,760 --> 00:30:20,799
write

779
00:30:20,799 --> 00:30:22,720
parsers and so it's very

780
00:30:22,720 --> 00:30:25,279
very hard to write

781
00:30:25,279 --> 00:30:26,799
two parsers that will behave in the

782
00:30:26,799 --> 00:30:29,120
exact same way so each browser is

783
00:30:29,120 --> 00:30:30,799
different so when you are using them

784
00:30:30,799 --> 00:30:33,600
purified it's sometimes difficult

785
00:30:33,600 --> 00:30:36,000
to ensure that you have

786
00:30:36,000 --> 00:30:37,760
the same level of protection across all

787
00:30:37,760 --> 00:30:39,760
brothers you can often exploit like

788
00:30:39,760 --> 00:30:42,399
mismatches between

789
00:30:42,399 --> 00:30:45,279
the the dumps and the dome purify

790
00:30:45,279 --> 00:30:47,840
parsing mechanism and a specific browser

791
00:30:47,840 --> 00:30:50,720
passing mechanism and the the html

792
00:30:50,720 --> 00:30:52,960
sanitizer api will make it

793
00:30:52,960 --> 00:30:54,960
built into each browser so the the

794
00:30:54,960 --> 00:30:56,720
parsing engine of each browser will be

795
00:30:56,720 --> 00:30:59,279
used which should supposedly make it

796
00:30:59,279 --> 00:31:01,919
much stronger and if like a common way

797
00:31:01,919 --> 00:31:04,320
to to bypass don't purify is just to

798
00:31:04,320 --> 00:31:06,000
look at the

799
00:31:06,000 --> 00:31:09,039
fixes on github and you will see often

800
00:31:09,039 --> 00:31:10,880
fixes for um

801
00:31:10,880 --> 00:31:13,679
for incoherences and and

802
00:31:13,679 --> 00:31:15,600
supposedly if the

803
00:31:15,600 --> 00:31:17,440
parsing mechanism is the same as the web

804
00:31:17,440 --> 00:31:20,640
browser that should not happen anymore

805
00:31:20,640 --> 00:31:24,000
another hard thing is a spectre and side

806
00:31:24,000 --> 00:31:25,600
channel attacks

807
00:31:25,600 --> 00:31:27,840
protections so you you know the the

808
00:31:27,840 --> 00:31:29,039
principle

809
00:31:29,039 --> 00:31:33,279
spectre allows leaking any

810
00:31:33,279 --> 00:31:36,159
piece of data from a given process

811
00:31:36,159 --> 00:31:37,679
so that's

812
00:31:37,679 --> 00:31:39,919
that's a very powerful attack

813
00:31:39,919 --> 00:31:40,720
but

814
00:31:40,720 --> 00:31:42,320
if we consider that

815
00:31:42,320 --> 00:31:44,720
from the web point of view

816
00:31:44,720 --> 00:31:46,960
that makes it very hard because as a

817
00:31:46,960 --> 00:31:49,360
developer you need to understand the

818
00:31:49,360 --> 00:31:51,760
security model of the browser and you

819
00:31:51,760 --> 00:31:53,360
need to know whether

820
00:31:53,360 --> 00:31:56,399
an iframe is loaded in the same process

821
00:31:56,399 --> 00:31:57,279
whether

822
00:31:57,279 --> 00:31:59,679
a subdomain is loaded in the in the same

823
00:31:59,679 --> 00:32:02,880
process or not and all of that makes it

824
00:32:02,880 --> 00:32:06,240
very very hard and for web developers to

825
00:32:06,240 --> 00:32:08,399
cope with the implementation of each

826
00:32:08,399 --> 00:32:11,519
browser obviously um so

827
00:32:11,519 --> 00:32:14,960
the the the web browser vendors are

828
00:32:14,960 --> 00:32:16,240
currently

829
00:32:16,240 --> 00:32:18,000
improving the way they protect against

830
00:32:18,000 --> 00:32:18,960
that

831
00:32:18,960 --> 00:32:21,679
google is very active on that front they

832
00:32:21,679 --> 00:32:22,880
shared

833
00:32:22,880 --> 00:32:26,080
some exploits that can run

834
00:32:26,080 --> 00:32:28,320
and and they have exploits for most

835
00:32:28,320 --> 00:32:30,799
browsers and on most platforms it's not

836
00:32:30,799 --> 00:32:33,840
only internal it works on m1 etc

837
00:32:33,840 --> 00:32:34,880
um

838
00:32:34,880 --> 00:32:37,600
so uh that's that's the real thing and

839
00:32:37,600 --> 00:32:40,159
uh the way you can defend against it is

840
00:32:40,159 --> 00:32:42,960
pretty complex you have a

841
00:32:42,960 --> 00:32:45,760
fair part of new security headers that

842
00:32:45,760 --> 00:32:47,200
are restricting

843
00:32:47,200 --> 00:32:49,600
what browser can do from one another and

844
00:32:49,600 --> 00:32:51,600
if you are using stuff such as a shared

845
00:32:51,600 --> 00:32:53,760
array or buffer then it's

846
00:32:53,760 --> 00:32:55,039
you you need

847
00:32:55,039 --> 00:32:56,799
you will get error consoles if you

848
00:32:56,799 --> 00:32:59,760
didn't set the proper headers in the

849
00:32:59,760 --> 00:33:03,120
in the most recent chrome conversions

850
00:33:03,120 --> 00:33:05,679
private network access is also a

851
00:33:05,679 --> 00:33:07,679
security measure that will prevent the

852
00:33:07,679 --> 00:33:09,519
kind of attacks where we've seen

853
00:33:09,519 --> 00:33:11,440
attackers pirating on your internal

854
00:33:11,440 --> 00:33:13,760
network to talk to your

855
00:33:13,760 --> 00:33:16,559
internet box for instance a document

856
00:33:16,559 --> 00:33:19,200
domain is being deprecated and last but

857
00:33:19,200 --> 00:33:21,120
not least the credential management is

858
00:33:21,120 --> 00:33:22,720
also

859
00:33:22,720 --> 00:33:25,200
being proposed currently um the good

860
00:33:25,200 --> 00:33:27,159
thing is that that will make a

861
00:33:27,159 --> 00:33:30,080
browser-specific mechanism to handle uh

862
00:33:30,080 --> 00:33:32,000
login and drag out and that hopefully

863
00:33:32,000 --> 00:33:33,039
will

864
00:33:33,039 --> 00:33:34,000
remove

865
00:33:34,000 --> 00:33:36,880
the ability for malicious payloads to

866
00:33:36,880 --> 00:33:40,399
spy on the keystrokes

867
00:33:41,440 --> 00:33:44,480
vlad thanks and now we got you with a

868
00:33:44,480 --> 00:33:45,600
fancy

869
00:33:45,600 --> 00:33:48,240
modern way of protecting against xss in

870
00:33:48,240 --> 00:33:49,760
the browser because the browser is the

871
00:33:49,760 --> 00:33:52,640
future let's go to the boring old server

872
00:33:52,640 --> 00:33:55,200
side stuff

873
00:33:55,679 --> 00:33:58,720
okay so xss server side they happen when

874
00:33:58,720 --> 00:34:01,760
you render html right when you have

875
00:34:01,760 --> 00:34:04,880
unsafe stuff rendered into the html

876
00:34:04,880 --> 00:34:06,799
which is just a string document you

877
00:34:06,799 --> 00:34:08,639
share over the internet to the real

878
00:34:08,639 --> 00:34:09,599
world

879
00:34:09,599 --> 00:34:10,800
well

880
00:34:10,800 --> 00:34:13,199
the question of how

881
00:34:13,199 --> 00:34:15,760
this document is rendered how this

882
00:34:15,760 --> 00:34:18,000
string is constructed actually has an

883
00:34:18,000 --> 00:34:21,520
impact on your attacks your face so

884
00:34:21,520 --> 00:34:24,399
let's talk about things from when jb was

885
00:34:24,399 --> 00:34:26,480
was was younger

886
00:34:26,480 --> 00:34:27,839
php

887
00:34:27,839 --> 00:34:30,079
i was still in i was still in primary

888
00:34:30,079 --> 00:34:32,159
school about programming with sea

889
00:34:32,159 --> 00:34:35,359
battalion web programming with php

890
00:34:35,359 --> 00:34:36,159
and

891
00:34:36,159 --> 00:34:37,839
back then you

892
00:34:37,839 --> 00:34:41,119
still now but probably less than now

893
00:34:41,119 --> 00:34:44,719
you just do php eco with a variable and

894
00:34:44,719 --> 00:34:46,480
that's just like a string replacement

895
00:34:46,480 --> 00:34:48,399
you know it doesn't care about what it

896
00:34:48,399 --> 00:34:51,599
is rendering where why it's replace

897
00:34:51,599 --> 00:34:54,320
strings and that's pretty much it so

898
00:34:54,320 --> 00:34:56,480
here the templating engine does not have

899
00:34:56,480 --> 00:34:59,440
any context about what is actually doing

900
00:34:59,440 --> 00:35:02,240
it's just building strings

901
00:35:02,240 --> 00:35:04,880
that's why you have high risk because

902
00:35:04,880 --> 00:35:07,119
the tooling can't help you it doesn't

903
00:35:07,119 --> 00:35:09,040
know enough to help you

904
00:35:09,040 --> 00:35:11,839
or whether if you get too modern or

905
00:35:11,839 --> 00:35:16,400
stuff like erb egs well

906
00:35:16,400 --> 00:35:19,359
it's context agnostic but it still knows

907
00:35:19,359 --> 00:35:20,880
that it is rendering something that

908
00:35:20,880 --> 00:35:24,240
should be escaped so

909
00:35:24,480 --> 00:35:25,680
full

910
00:35:25,680 --> 00:35:27,359
full disclosure

911
00:35:27,359 --> 00:35:30,320
i'm not really a big fan of this syntax

912
00:35:30,320 --> 00:35:32,960
because escaping is just made by using

913
00:35:32,960 --> 00:35:35,520
an equal after the percent and not

914
00:35:35,520 --> 00:35:37,760
escaping is using your dash and i find

915
00:35:37,760 --> 00:35:40,480
that like really really really

916
00:35:40,480 --> 00:35:42,560
error prone that's not explicit enough

917
00:35:42,560 --> 00:35:44,560
in my opinion but anyway what happens

918
00:35:44,560 --> 00:35:46,880
here is that it will escape the content

919
00:35:46,880 --> 00:35:48,880
of the username variable

920
00:35:48,880 --> 00:35:51,440
html escape to make sure that it is not

921
00:35:51,440 --> 00:35:53,920
rendering html tags

922
00:35:53,920 --> 00:35:56,480
and on the last one that's such a great

923
00:35:56,480 --> 00:35:59,280
animation jb and on the last one here we

924
00:35:59,280 --> 00:36:01,200
are using directly another language that

925
00:36:01,200 --> 00:36:04,240
has nothing to do with html so it has a

926
00:36:04,240 --> 00:36:06,320
lot of context on what it is rendering

927
00:36:06,320 --> 00:36:08,800
and it can know what it is doing and

928
00:36:08,800 --> 00:36:10,960
reduce the risk surface we will see in a

929
00:36:10,960 --> 00:36:13,280
couple slides what is the future because

930
00:36:13,280 --> 00:36:15,040
it's definitely doing something with

931
00:36:15,040 --> 00:36:16,800
javascript directly

932
00:36:16,800 --> 00:36:18,400
um

933
00:36:18,400 --> 00:36:19,680
okay i'm not sure why we had this

934
00:36:19,680 --> 00:36:22,960
animation here okay so also i told you

935
00:36:22,960 --> 00:36:25,440
that csp where it was hard to maintain

936
00:36:25,440 --> 00:36:27,040
because you have to update them

937
00:36:27,040 --> 00:36:28,880
continuously well

938
00:36:28,880 --> 00:36:31,200
just tune your server side stuff to help

939
00:36:31,200 --> 00:36:34,160
you there for instance here we can ask

940
00:36:34,160 --> 00:36:35,040
the

941
00:36:35,040 --> 00:36:36,800
the templating engine to generate

942
00:36:36,800 --> 00:36:39,599
announces for the script

943
00:36:39,599 --> 00:36:41,680
meaning that nobody will be able to

944
00:36:41,680 --> 00:36:44,720
inject a new script because you told the

945
00:36:44,720 --> 00:36:47,200
engine i'm generating a script tag so it

946
00:36:47,200 --> 00:36:50,480
will uh generate a nonsense for this one

947
00:36:50,480 --> 00:36:53,440
but if you generate rogue script ones

948
00:36:53,440 --> 00:36:56,880
they won't be added to the csp

949
00:36:56,880 --> 00:36:58,320
however

950
00:36:58,320 --> 00:37:01,680
that won't help you if the script tag

951
00:37:01,680 --> 00:37:03,839
itself contains part of code that can be

952
00:37:03,839 --> 00:37:06,160
injected like if you let people

953
00:37:06,160 --> 00:37:09,200
dynamically write javascript triables in

954
00:37:09,200 --> 00:37:11,200
the scripture render you're probably

955
00:37:11,200 --> 00:37:15,040
doomed for eternity in my opinion but

956
00:37:15,040 --> 00:37:16,400
that won't protect you against that

957
00:37:16,400 --> 00:37:19,200
that's not a silver bullet

958
00:37:19,200 --> 00:37:20,480
and

959
00:37:20,480 --> 00:37:22,480
templating engine as i said are getting

960
00:37:22,480 --> 00:37:25,119
smarter and smarter so i will talk about

961
00:37:25,119 --> 00:37:28,240
react for for a slide react is actually

962
00:37:28,240 --> 00:37:30,400
fascinating because it's isomorphic

963
00:37:30,400 --> 00:37:32,240
javascript meaning it works in the

964
00:37:32,240 --> 00:37:35,200
browser and server side and it has

965
00:37:35,200 --> 00:37:37,839
different ways of mitigating xss

966
00:37:37,839 --> 00:37:39,599
depending on when it's training in the

967
00:37:39,599 --> 00:37:41,760
browser or server side in the browser it

968
00:37:41,760 --> 00:37:45,440
will be using safe apis uh it will be

969
00:37:45,440 --> 00:37:48,160
using document element.text content

970
00:37:48,160 --> 00:37:50,800
instead of html there's actually a

971
00:37:50,800 --> 00:37:53,359
method in react that's called set

972
00:37:53,359 --> 00:37:55,839
dangerously set in your html and

973
00:37:55,839 --> 00:37:57,680
probably there's a comment around it do

974
00:37:57,680 --> 00:37:59,520
not choose it but it has dangerously in

975
00:37:59,520 --> 00:38:01,200
the name so the only way you can shoot

976
00:38:01,200 --> 00:38:04,000
yourself into a gun while using react is

977
00:38:04,000 --> 00:38:06,079
by calling a method that is that has a

978
00:38:06,079 --> 00:38:08,720
name that dooms you for eternity but on

979
00:38:08,720 --> 00:38:11,280
the server side how does react do well

980
00:38:11,280 --> 00:38:14,480
react actually is aware of what it's

981
00:38:14,480 --> 00:38:17,520
doing because components are defined in

982
00:38:17,520 --> 00:38:20,720
jsx so on line five here we've got a gsx

983
00:38:20,720 --> 00:38:23,680
component and react is aware of what it

984
00:38:23,680 --> 00:38:25,440
should be rendered and what should not

985
00:38:25,440 --> 00:38:27,680
be it's like the next generation of that

986
00:38:27,680 --> 00:38:30,240
so here i'm rendering it server side and

987
00:38:30,240 --> 00:38:33,920
react has actually comprehensive uh xss

988
00:38:33,920 --> 00:38:36,560
filtration mechanism the only bypass we

989
00:38:36,560 --> 00:38:39,760
found is using javascript colon in links

990
00:38:39,760 --> 00:38:41,680
and stuff and actually when you do that

991
00:38:41,680 --> 00:38:43,599
server side there is a warning message

992
00:38:43,599 --> 00:38:45,200
saying oh that's working right now but

993
00:38:45,200 --> 00:38:46,240
in the next version this will be

994
00:38:46,240 --> 00:38:47,839
duplicated because that's actually

995
00:38:47,839 --> 00:38:50,000
unsafe so the only bypass i found they

996
00:38:50,000 --> 00:38:51,680
were already aware of that and they are

997
00:38:51,680 --> 00:38:53,839
fixing its exertion that's a brilliant

998
00:38:53,839 --> 00:38:56,320
library and that's amazing and that's

999
00:38:56,320 --> 00:38:58,320
javascript so it's amazing

1000
00:38:58,320 --> 00:39:01,680
okay let's go deeper in the

1001
00:39:01,680 --> 00:39:04,160
traditional mechanisms i would say to be

1002
00:39:04,160 --> 00:39:06,320
polite

1003
00:39:06,320 --> 00:39:09,119
static application security testing

1004
00:39:09,119 --> 00:39:10,880
that means that you have a program that

1005
00:39:10,880 --> 00:39:13,440
will just read your code and find

1006
00:39:13,440 --> 00:39:15,520
vulnerable points they have been amazing

1007
00:39:15,520 --> 00:39:18,480
talk earlier today on that exact topic

1008
00:39:18,480 --> 00:39:21,359
and that's a very strong uh that's a

1009
00:39:21,359 --> 00:39:23,200
very strong technology they have been

1010
00:39:23,200 --> 00:39:25,440
made they have made a lot of progress on

1011
00:39:25,440 --> 00:39:27,200
that front and that worked really well

1012
00:39:27,200 --> 00:39:29,920
when you have a pro properly typed

1013
00:39:29,920 --> 00:39:32,160
programming language so in java static

1014
00:39:32,160 --> 00:39:34,800
analysis is extremely powerful

1015
00:39:34,800 --> 00:39:37,920
in javascript well javascript is a real

1016
00:39:37,920 --> 00:39:40,079
language so it is so polymorphic that

1017
00:39:40,079 --> 00:39:41,839
static analysis can be extremely

1018
00:39:41,839 --> 00:39:44,640
complicated but this is an important

1019
00:39:44,640 --> 00:39:47,520
tool that you can use and there are like

1020
00:39:47,520 --> 00:39:50,560
a lot of vendors or free or free tools

1021
00:39:50,560 --> 00:39:54,079
to do fast nowadays

1022
00:39:54,079 --> 00:39:56,320
and that's probably my favorite slide

1023
00:39:56,320 --> 00:40:00,160
not only because it's three hours old uh

1024
00:40:00,160 --> 00:40:01,119
but that's

1025
00:40:01,119 --> 00:40:02,720
if you want to take a picture take this

1026
00:40:02,720 --> 00:40:05,359
one yeah because it's it's incomplete

1027
00:40:05,359 --> 00:40:08,560
but it gives you an idea of what you are

1028
00:40:08,560 --> 00:40:09,520
doing

1029
00:40:09,520 --> 00:40:12,240
depending on the protection you are

1030
00:40:12,240 --> 00:40:15,440
using you are actually mitigating a

1031
00:40:15,440 --> 00:40:18,079
given risk and there is no

1032
00:40:18,079 --> 00:40:20,800
silver bullet to fight xss

1033
00:40:20,800 --> 00:40:23,200
this is like a teamwork between all the

1034
00:40:23,200 --> 00:40:25,599
mechanisms that are available in the web

1035
00:40:25,599 --> 00:40:27,920
but i don't want to spoil the next part

1036
00:40:27,920 --> 00:40:30,800
and yeah just on the on the previous one

1037
00:40:30,800 --> 00:40:31,920
you could

1038
00:40:31,920 --> 00:40:35,359
visualize it in 3d and imagine the

1039
00:40:35,359 --> 00:40:38,000
browser supports right yes thank you

1040
00:40:38,000 --> 00:40:39,680
plan

1041
00:40:39,680 --> 00:40:42,240
you could visualize it in 3d and

1042
00:40:42,240 --> 00:40:43,520
including the browser supports would

1043
00:40:43,520 --> 00:40:45,839
make it extremely complex

1044
00:40:45,839 --> 00:40:49,119
that's really not simple but yes and you

1045
00:40:49,119 --> 00:40:51,119
can notice the star on the first line

1046
00:40:51,119 --> 00:40:53,520
which is all the new cross-origin things

1047
00:40:53,520 --> 00:40:56,079
that have been added recently uh and and

1048
00:40:56,079 --> 00:40:57,839
that make it a very

1049
00:40:57,839 --> 00:41:00,880
unstraightforward just to say the list

1050
00:41:00,880 --> 00:41:02,720
so on server-side mitigation what is

1051
00:41:02,720 --> 00:41:05,760
what is coming next there still are a

1052
00:41:05,760 --> 00:41:07,520
fair part of the of the web and they

1053
00:41:07,520 --> 00:41:09,920
will still be right you can use react

1054
00:41:09,920 --> 00:41:13,040
server side or brother side uh ruby on

1055
00:41:13,040 --> 00:41:14,319
rides is not

1056
00:41:14,319 --> 00:41:16,800
ready to go away java and gsp and

1057
00:41:16,800 --> 00:41:19,040
everything so um

1058
00:41:19,040 --> 00:41:21,599
we have some solutions uh at development

1059
00:41:21,599 --> 00:41:24,240
time obviously you you could pick a

1060
00:41:24,240 --> 00:41:26,240
templating engine that will automate csp

1061
00:41:26,240 --> 00:41:28,800
generation uh you already have similar

1062
00:41:28,800 --> 00:41:31,760
things in in webpack in regs and django

1063
00:41:31,760 --> 00:41:33,520
for instance in rails using secure

1064
00:41:33,520 --> 00:41:35,119
headers uh

1065
00:41:35,119 --> 00:41:36,560
with

1066
00:41:36,560 --> 00:41:39,359
a well defined templating engine that

1067
00:41:39,359 --> 00:41:42,560
would automate most of the work for you

1068
00:41:42,560 --> 00:41:44,640
and then you have some security products

1069
00:41:44,640 --> 00:41:46,960
um so something that i'm not really

1070
00:41:46,960 --> 00:41:49,040
aware of the but that should come and

1071
00:41:49,040 --> 00:41:51,040
all the new browser apis are making it

1072
00:41:51,040 --> 00:41:52,720
much easier to implement

1073
00:41:52,720 --> 00:41:53,680
uh

1074
00:41:53,680 --> 00:41:55,680
you could have dumb exercise protection

1075
00:41:55,680 --> 00:41:58,079
uh in the runtime in the browser

1076
00:41:58,079 --> 00:42:00,319
so that that will really help also could

1077
00:42:00,319 --> 00:42:02,960
work in in detecting vulnerabilities and

1078
00:42:02,960 --> 00:42:06,319
the second part is will be led by apm

1079
00:42:06,319 --> 00:42:07,599
vendors

1080
00:42:07,599 --> 00:42:10,480
so since apm vendors have access to all

1081
00:42:10,480 --> 00:42:12,640
the context of the application something

1082
00:42:12,640 --> 00:42:14,800
they can do is actually instrument

1083
00:42:14,800 --> 00:42:17,280
themselves the templating engine and

1084
00:42:17,280 --> 00:42:20,560
dynamically inject

1085
00:42:20,560 --> 00:42:22,800
nuns and build the content security

1086
00:42:22,800 --> 00:42:25,359
policy accordingly and so those things

1087
00:42:25,359 --> 00:42:27,680
will will probably arose in the next in

1088
00:42:27,680 --> 00:42:28,839
the next few

1089
00:42:28,839 --> 00:42:30,800
years so

1090
00:42:30,800 --> 00:42:32,800
we talked about

1091
00:42:32,800 --> 00:42:35,280
everything that was like right so now

1092
00:42:35,280 --> 00:42:37,440
let's shift left and think about the the

1093
00:42:37,440 --> 00:42:39,359
design and the threat model

1094
00:42:39,359 --> 00:42:42,880
so shifting left means you want to be

1095
00:42:42,880 --> 00:42:45,520
in full cooperation with with developers

1096
00:42:45,520 --> 00:42:48,079
and just ask them the last questions

1097
00:42:48,079 --> 00:42:51,760
right so in in a very nice way not

1098
00:42:51,760 --> 00:42:54,560
at all in a in a scary way so don't

1099
00:42:54,560 --> 00:42:58,160
don't do exactly that let's rather um

1100
00:42:58,160 --> 00:43:01,520
use those kind of uh topics uh that

1101
00:43:01,520 --> 00:43:03,440
should help you get a

1102
00:43:03,440 --> 00:43:05,119
fair understanding of how the

1103
00:43:05,119 --> 00:43:07,920
application is working and what part

1104
00:43:07,920 --> 00:43:11,040
as a security team you should focus on

1105
00:43:11,040 --> 00:43:13,839
so for instance html generation

1106
00:43:13,839 --> 00:43:15,040
um

1107
00:43:15,040 --> 00:43:17,599
okay how is it done is it static is it

1108
00:43:17,599 --> 00:43:19,280
dynamic

1109
00:43:19,280 --> 00:43:21,040
are using cross-site communications with

1110
00:43:21,040 --> 00:43:24,319
other iframes or other domains maybe

1111
00:43:24,319 --> 00:43:27,520
what about the clients um is the app or

1112
00:43:27,520 --> 00:43:29,760
the service talking to the browser

1113
00:43:29,760 --> 00:43:31,520
to another service is it only a

1114
00:43:31,520 --> 00:43:33,280
generating

1115
00:43:33,280 --> 00:43:36,000
json is it an api

1116
00:43:36,000 --> 00:43:38,000
of course the inputs where are they

1117
00:43:38,000 --> 00:43:40,560
coming from is that the network the data

1118
00:43:40,560 --> 00:43:44,000
stores the user

1119
00:43:44,160 --> 00:43:46,400
and of course there is the business

1120
00:43:46,400 --> 00:43:47,680
level so

1121
00:43:47,680 --> 00:43:50,160
is the application doing authorization

1122
00:43:50,160 --> 00:43:52,640
authentication of the users are the

1123
00:43:52,640 --> 00:43:54,480
users admin

1124
00:43:54,480 --> 00:43:57,839
support or regular users all of that has

1125
00:43:57,839 --> 00:44:01,280
very depending privileges

1126
00:44:01,280 --> 00:44:03,599
and of course is the app using sensitive

1127
00:44:03,599 --> 00:44:05,920
business functions like

1128
00:44:05,920 --> 00:44:09,040
deletion permission management adding

1129
00:44:09,040 --> 00:44:11,200
administrators as we've seen in the in

1130
00:44:11,200 --> 00:44:12,240
the demo

1131
00:44:12,240 --> 00:44:13,440
and uh

1132
00:44:13,440 --> 00:44:15,599
in each like um

1133
00:44:15,599 --> 00:44:16,560
threat

1134
00:44:16,560 --> 00:44:17,920
model that you can do with the

1135
00:44:17,920 --> 00:44:19,680
developers you you

1136
00:44:19,680 --> 00:44:21,520
it's sometimes not

1137
00:44:21,520 --> 00:44:24,000
easy to ask the right question it might

1138
00:44:24,000 --> 00:44:26,880
and like that so don't do this either

1139
00:44:26,880 --> 00:44:28,160
please

1140
00:44:28,160 --> 00:44:29,359
so

1141
00:44:29,359 --> 00:44:31,520
depending on the frameworks that you are

1142
00:44:31,520 --> 00:44:32,560
using

1143
00:44:32,560 --> 00:44:34,400
the risk will be very different so

1144
00:44:34,400 --> 00:44:36,079
that's also something you need to pay

1145
00:44:36,079 --> 00:44:38,800
attention to as a as a security team so

1146
00:44:38,800 --> 00:44:41,680
in the case of uh server side rendering

1147
00:44:41,680 --> 00:44:43,839
well the vulnerabilities might be server

1148
00:44:43,839 --> 00:44:46,400
side and also sell and also client side

1149
00:44:46,400 --> 00:44:47,200
because

1150
00:44:47,200 --> 00:44:48,000
uh

1151
00:44:48,000 --> 00:44:50,319
you will be using i don't know like

1152
00:44:50,319 --> 00:44:53,599
jquery or vue.js or

1153
00:44:53,599 --> 00:44:58,240
rails fancy uh stuff that will make it

1154
00:44:58,240 --> 00:45:01,040
potentially complex to to edit in the

1155
00:45:01,040 --> 00:45:03,119
case of a single page application well

1156
00:45:03,119 --> 00:45:06,560
it might be much easier to audit because

1157
00:45:06,560 --> 00:45:07,920
all the inputs

1158
00:45:07,920 --> 00:45:10,240
are coming from the network and so you

1159
00:45:10,240 --> 00:45:12,160
can really rely on the on the

1160
00:45:12,160 --> 00:45:14,160
application if you are using trusted

1161
00:45:14,160 --> 00:45:16,560
tiles on top of that that will makes the

1162
00:45:16,560 --> 00:45:18,640
auditing much easier so it's the

1163
00:45:18,640 --> 00:45:20,720
simplest to edit i would not say it's

1164
00:45:20,720 --> 00:45:22,319
simple down

1165
00:45:22,319 --> 00:45:23,440
and

1166
00:45:23,440 --> 00:45:25,520
of course we have the hybrid

1167
00:45:25,520 --> 00:45:27,920
version of it where here you can have

1168
00:45:27,920 --> 00:45:29,280
vulnerabilities

1169
00:45:29,280 --> 00:45:30,960
everywhere

1170
00:45:30,960 --> 00:45:33,119
and that really makes it the much uh

1171
00:45:33,119 --> 00:45:36,160
harder to uh to uh to audit uh to reason

1172
00:45:36,160 --> 00:45:37,280
about

1173
00:45:37,280 --> 00:45:41,760
as a developer or as a security engineer

1174
00:45:41,760 --> 00:45:44,319
obviously supply chain security is also

1175
00:45:44,319 --> 00:45:47,760
a big part of the of the game and so all

1176
00:45:47,760 --> 00:45:49,760
the remote dependencies that are

1177
00:45:49,760 --> 00:45:52,000
included by a web application can be

1178
00:45:52,000 --> 00:45:53,440
tempered with

1179
00:45:53,440 --> 00:45:56,079
you could have cash presenting attacks

1180
00:45:56,079 --> 00:45:59,200
the hosting can get compromised and non

1181
00:45:59,200 --> 00:46:01,599
http fetching because like attackers

1182
00:46:01,599 --> 00:46:04,640
could man in the middle the dependencies

1183
00:46:04,640 --> 00:46:07,119
and so you have some partial solutions

1184
00:46:07,119 --> 00:46:09,280
using for instance subresource integrity

1185
00:46:09,280 --> 00:46:12,960
sri that will allow you to add the

1186
00:46:12,960 --> 00:46:16,079
hash of a dependency within the the

1187
00:46:16,079 --> 00:46:18,800
script tags that are requiring it that

1188
00:46:18,800 --> 00:46:20,880
can be automated using for instance

1189
00:46:20,880 --> 00:46:22,480
webpack

1190
00:46:22,480 --> 00:46:24,560
another option would be to bundle

1191
00:46:24,560 --> 00:46:26,880
locally in that case obviously it's not

1192
00:46:26,880 --> 00:46:28,640
magic because if the hosting has been

1193
00:46:28,640 --> 00:46:30,640
compromised before you you fetch it

1194
00:46:30,640 --> 00:46:32,400
yourself then

1195
00:46:32,400 --> 00:46:36,240
you will still be screwed

1196
00:46:36,240 --> 00:46:37,280
so now

1197
00:46:37,280 --> 00:46:39,760
let's let's take a step back and resume

1198
00:46:39,760 --> 00:46:41,119
what we what we have seen during this

1199
00:46:41,119 --> 00:46:43,599
this presentation so we have defense in

1200
00:46:43,599 --> 00:46:45,760
depth

1201
00:46:45,760 --> 00:46:48,480
when even is introduced obviously you

1202
00:46:48,480 --> 00:46:50,800
can use modern frameworks flight models

1203
00:46:50,800 --> 00:46:53,839
static application security

1204
00:46:53,839 --> 00:46:55,760
during the runtime to prevent

1205
00:46:55,760 --> 00:46:58,079
vulnerability exploitation then content

1206
00:46:58,079 --> 00:47:00,319
security policy mechanisms

1207
00:47:00,319 --> 00:47:02,960
rasp and apm

1208
00:47:02,960 --> 00:47:06,000
like mitigations and last but not least

1209
00:47:06,000 --> 00:47:08,560
to prevent the attacker's outcome you

1210
00:47:08,560 --> 00:47:10,319
have a lot of other things like all the

1211
00:47:10,319 --> 00:47:11,680
headers that we've seen cookies

1212
00:47:11,680 --> 00:47:12,800
attributes

1213
00:47:12,800 --> 00:47:14,640
browser hardening and down to bug

1214
00:47:14,640 --> 00:47:17,839
bounces and pen tests

1215
00:47:17,839 --> 00:47:19,839
that's it folks

1216
00:47:19,839 --> 00:47:21,359
thanks for your

1217
00:47:21,359 --> 00:47:24,680
time today

1218
00:47:26,500 --> 00:47:28,720
[Applause]

1219
00:47:28,720 --> 00:47:31,040
if you have any questions happy to

1220
00:47:31,040 --> 00:47:34,319
return and take it

1221
00:47:34,319 --> 00:47:36,839
we don't see much with the withdrawal

1222
00:47:36,839 --> 00:47:40,240
yeah no question no question i'm good

1223
00:47:40,240 --> 00:47:42,160
i want to see the drawing one question

1224
00:47:42,160 --> 00:47:45,720
oh one question

1225
00:47:54,160 --> 00:47:55,520
so the question was are there

1226
00:47:55,520 --> 00:47:57,599
differences between an inline security

1227
00:47:57,599 --> 00:48:00,480
content security policy and one that has

1228
00:48:00,480 --> 00:48:01,520
been set

1229
00:48:01,520 --> 00:48:04,079
through headers from the server i think

1230
00:48:04,079 --> 00:48:07,200
from the browser's perspective

1231
00:48:07,200 --> 00:48:09,520
not yeah so you can

1232
00:48:09,520 --> 00:48:11,359
content security policy you can use

1233
00:48:11,359 --> 00:48:14,640
rebuttally mechanism to not

1234
00:48:14,640 --> 00:48:17,520
apply the the policy but just learn from

1235
00:48:17,520 --> 00:48:19,839
it so you get the violation reports when

1236
00:48:19,839 --> 00:48:21,760
something goes wrong and that you cannot

1237
00:48:21,760 --> 00:48:24,640
use in the browser so that's one thing

1238
00:48:24,640 --> 00:48:26,880
and then it's it's useful for testing

1239
00:48:26,880 --> 00:48:28,880
but from an enforcement perspective you

1240
00:48:28,880 --> 00:48:31,040
could imagine that

1241
00:48:31,040 --> 00:48:33,920
the the the page has access somewhere

1242
00:48:33,920 --> 00:48:36,640
where the the the policy is prevented

1243
00:48:36,640 --> 00:48:38,640
from being injected so

1244
00:48:38,640 --> 00:48:40,960
you the the the specifications say don't

1245
00:48:40,960 --> 00:48:42,079
do that

1246
00:48:42,079 --> 00:48:43,520
you can use it for testing that's mostly

1247
00:48:43,520 --> 00:48:47,559
for testing and demo purposes

1248
00:48:48,160 --> 00:48:50,960
amazing thanks so much enjoy the

1249
00:48:50,960 --> 00:48:52,880
rest of the weekend and

1250
00:48:52,880 --> 00:48:56,980
thanks for coming to our talk thanks

1251
00:48:56,980 --> 00:49:01,030
[Applause]

