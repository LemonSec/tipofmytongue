1
00:00:00,160 --> 00:00:02,399
our first uh presenter in this track for

2
00:00:02,399 --> 00:00:04,160
the afternoon will be abbe speaking

3
00:00:04,160 --> 00:00:06,560
about uh pillaging api web hooks hook

4
00:00:06,560 --> 00:00:08,160
line and sinker

5
00:00:08,160 --> 00:00:10,800
so abe with no further delay i will turn

6
00:00:10,800 --> 00:00:12,320
it over to you and we are looking

7
00:00:12,320 --> 00:00:16,040
forward to hearing about them

8
00:00:18,400 --> 00:00:20,799
thank you

9
00:00:20,960 --> 00:00:23,680
and good afternoon um

10
00:00:23,680 --> 00:00:26,800
let me just start my slides

11
00:00:26,800 --> 00:00:29,119
all right so the first session after

12
00:00:29,119 --> 00:00:30,800
lunch so i guess i'll have your

13
00:00:30,800 --> 00:00:34,160
attention for about seven minutes

14
00:00:34,160 --> 00:00:36,640
uh anyway i'm going to keep this snappy

15
00:00:36,640 --> 00:00:38,559
and hopefully have a little bit of time

16
00:00:38,559 --> 00:00:40,879
for questions as well so

17
00:00:40,879 --> 00:00:43,280
this talk is a

18
00:00:43,280 --> 00:00:45,280
result of a lot of research that we did

19
00:00:45,280 --> 00:00:48,160
last year and we have tried this out on

20
00:00:48,160 --> 00:00:50,800
several bug bounty targets as well as

21
00:00:50,800 --> 00:00:52,559
you know paid consulting engagements

22
00:00:52,559 --> 00:00:55,280
that we do so that's what i'm here to

23
00:00:55,280 --> 00:00:56,559
talk about i'm not going to be able to

24
00:00:56,559 --> 00:00:58,559
talk about all of the stories but i'll

25
00:00:58,559 --> 00:01:00,559
do i will talk about a couple of them

26
00:01:00,559 --> 00:01:03,199
and basically the talk is to highlight

27
00:01:03,199 --> 00:01:06,000
a broader set of issues that

28
00:01:06,000 --> 00:01:08,000
this stock

29
00:01:08,000 --> 00:01:10,159
is meant to focus on which is basically

30
00:01:10,159 --> 00:01:12,000
web hooks and how you can attack web

31
00:01:12,000 --> 00:01:13,439
hooks right so i'm going to be focusing

32
00:01:13,439 --> 00:01:15,680
on a very specific set of attacks

33
00:01:15,680 --> 00:01:18,159
against web hooks so first of all my

34
00:01:18,159 --> 00:01:20,640
name is abhay and i run two companies

35
00:01:20,640 --> 00:01:22,320
one is an application security company

36
00:01:22,320 --> 00:01:24,240
which does pen testing and

37
00:01:24,240 --> 00:01:26,400
devsec ops and cloud security services

38
00:01:26,400 --> 00:01:28,960
the other appsec engineer we do a we

39
00:01:28,960 --> 00:01:31,360
have a training platform that uh

40
00:01:31,360 --> 00:01:33,280
we use all the research from what we do

41
00:01:33,280 --> 00:01:34,880
at the consulting company and put that

42
00:01:34,880 --> 00:01:36,880
to the training company for hands-on

43
00:01:36,880 --> 00:01:38,000
labs and

44
00:01:38,000 --> 00:01:39,439
a lot of lessons and so on so it's a lot

45
00:01:39,439 --> 00:01:40,479
of fun

46
00:01:40,479 --> 00:01:42,880
uh i started off my career as a

47
00:01:42,880 --> 00:01:44,640
pentester mostly in offensive security

48
00:01:44,640 --> 00:01:47,200
but more recently my work has largely

49
00:01:47,200 --> 00:01:48,079
been

50
00:01:48,079 --> 00:01:50,159
in the defensive security side a lot

51
00:01:50,159 --> 00:01:51,920
more focus on cloud security and

52
00:01:51,920 --> 00:01:53,759
devsecops and so on i do a lot of

53
00:01:53,759 --> 00:01:55,360
training i'm training in fact at black

54
00:01:55,360 --> 00:01:58,560
hat um and i've trained at several oasp

55
00:01:58,560 --> 00:02:01,200
events uh and at previous black hat

56
00:02:01,200 --> 00:02:03,600
events as well so this is me i do share

57
00:02:03,600 --> 00:02:05,840
a lot of content on youtube so do check

58
00:02:05,840 --> 00:02:08,318
us out if you're interested as well as

59
00:02:08,318 --> 00:02:11,120
my blog and on my twitter as well we do

60
00:02:11,120 --> 00:02:13,200
i share a lot of

61
00:02:13,200 --> 00:02:15,360
useful information and sometimes

62
00:02:15,360 --> 00:02:18,000
opinionated takes on the appsec industry

63
00:02:18,000 --> 00:02:20,720
anyway so my talk today is

64
00:02:20,720 --> 00:02:22,239
basically if you are thinking that you

65
00:02:22,239 --> 00:02:23,840
are coming here to witness a very

66
00:02:23,840 --> 00:02:26,160
serious talk my talk is nauseatingly

67
00:02:26,160 --> 00:02:28,879
full of memes so be warned right we're

68
00:02:28,879 --> 00:02:31,680
gonna have a lot of memes uh and

69
00:02:31,680 --> 00:02:34,239
smart speakers record

70
00:02:34,239 --> 00:02:35,280
demos

71
00:02:35,280 --> 00:02:37,120
right smart speakers that's what they do

72
00:02:37,120 --> 00:02:39,040
unfortunately i'm not one of them i'm

73
00:02:39,040 --> 00:02:42,160
going to be doing a live demo and when

74
00:02:42,160 --> 00:02:44,560
you're doing a live demo 300 000 things

75
00:02:44,560 --> 00:02:45,840
can go wrong

76
00:02:45,840 --> 00:02:48,160
i both my demos just failed before i

77
00:02:48,160 --> 00:02:50,959
came on stage so

78
00:02:50,959 --> 00:02:53,360
let's see what happens right so i'm

79
00:02:53,360 --> 00:02:54,800
going to be praying to the demo gods

80
00:02:54,800 --> 00:02:57,519
that my demos work today anyway so the

81
00:02:57,519 --> 00:02:59,360
agenda today what are web hooks how do

82
00:02:59,360 --> 00:03:00,319
they work

83
00:03:00,319 --> 00:03:02,000
i'm sure most of you sitting in this

84
00:03:02,000 --> 00:03:02,800
room

85
00:03:02,800 --> 00:03:03,680
have

86
00:03:03,680 --> 00:03:05,040
probably dealt with web hooks you

87
00:03:05,040 --> 00:03:06,480
probably build web books you test web

88
00:03:06,480 --> 00:03:08,319
hooks sometimes perhaps

89
00:03:08,319 --> 00:03:09,760
if you are in bug bounty you perhaps

90
00:03:09,760 --> 00:03:11,519
found a whole bunch of flaws around web

91
00:03:11,519 --> 00:03:13,040
books as well

92
00:03:13,040 --> 00:03:15,120
this talk is about web hooks but in a

93
00:03:15,120 --> 00:03:16,800
very specific sense about a very

94
00:03:16,800 --> 00:03:19,680
specific attack against these web hooks

95
00:03:19,680 --> 00:03:21,200
and what you can do

96
00:03:21,200 --> 00:03:22,959
with that particular attack so we're

97
00:03:22,959 --> 00:03:24,239
going to look at some common web hook

98
00:03:24,239 --> 00:03:26,560
attack patterns this is a very red team

99
00:03:26,560 --> 00:03:28,400
talk although i will spend probably the

100
00:03:28,400 --> 00:03:30,000
last two three minutes on the defense

101
00:03:30,000 --> 00:03:34,319
side as well um we will be talking about

102
00:03:34,319 --> 00:03:36,720
ssrf which is a

103
00:03:36,720 --> 00:03:38,720
favorite flaw for a lot of us right we

104
00:03:38,720 --> 00:03:41,440
all love ssrf ssrf is great because it

105
00:03:41,440 --> 00:03:43,040
gives us access to a lot of interesting

106
00:03:43,040 --> 00:03:45,680
things this talk is in essence about

107
00:03:45,680 --> 00:03:48,400
ssrf but applied slightly differently

108
00:03:48,400 --> 00:03:51,120
right slightly differently it's not

109
00:03:51,120 --> 00:03:53,040
the typical ssrf attacks that you would

110
00:03:53,040 --> 00:03:54,720
see against

111
00:03:54,720 --> 00:03:56,720
a normal web application this has kind

112
00:03:56,720 --> 00:03:58,239
of a boomerang effect that i'm going to

113
00:03:58,239 --> 00:04:01,599
be talking about in a little bit so this

114
00:04:01,599 --> 00:04:04,000
class of flaws we dub webhook boomerang

115
00:04:04,000 --> 00:04:05,840
flaws basically because

116
00:04:05,840 --> 00:04:07,519
they have a way of working like a

117
00:04:07,519 --> 00:04:08,720
boomerang

118
00:04:08,720 --> 00:04:10,799
and you'll see why that is uh pretty

119
00:04:10,799 --> 00:04:12,400
soon and i'm going to talk about this

120
00:04:12,400 --> 00:04:13,680
and we're going to be talking about some

121
00:04:13,680 --> 00:04:16,160
sub variants and some gotchas here and

122
00:04:16,160 --> 00:04:18,238
of course finally i'm going to spend a

123
00:04:18,238 --> 00:04:20,000
couple of minutes on defense but defense

124
00:04:20,000 --> 00:04:21,680
is not the core focus of this talk it's

125
00:04:21,680 --> 00:04:24,320
largely about the flaw how it works why

126
00:04:24,320 --> 00:04:26,560
it works the way it works all right um

127
00:04:26,560 --> 00:04:28,880
so so when you're building an api

128
00:04:28,880 --> 00:04:31,600
there's a good chance that you are

129
00:04:31,600 --> 00:04:33,759
building web hooks as part of your

130
00:04:33,759 --> 00:04:35,440
application right whether it's an api or

131
00:04:35,440 --> 00:04:37,199
a more old-school application there's a

132
00:04:37,199 --> 00:04:39,199
good chance that you are building in web

133
00:04:39,199 --> 00:04:41,280
hooks as part of that now web hooks are

134
00:04:41,280 --> 00:04:45,280
a very important part of our modern

135
00:04:45,280 --> 00:04:47,680
application stack because they allow you

136
00:04:47,680 --> 00:04:49,680
to integrate with

137
00:04:49,680 --> 00:04:51,680
thousands of other applications right so

138
00:04:51,680 --> 00:04:53,840
web hooks are a very critical piece of

139
00:04:53,840 --> 00:04:55,199
your integration puzzle because it

140
00:04:55,199 --> 00:04:57,040
allows you to integrate with thousands

141
00:04:57,040 --> 00:04:59,360
of other applications so basically web

142
00:04:59,360 --> 00:05:01,360
hooks are what you would call user

143
00:05:01,360 --> 00:05:03,199
generated callbacks

144
00:05:03,199 --> 00:05:06,320
right so let's say uh you're setting up

145
00:05:06,320 --> 00:05:08,960
a stripe uh payment interface or you you

146
00:05:08,960 --> 00:05:10,880
have you're using stripe for your

147
00:05:10,880 --> 00:05:12,639
payments to process your payments and

148
00:05:12,639 --> 00:05:14,400
you want to know whenever you have a new

149
00:05:14,400 --> 00:05:16,080
customer right so what do you do you go

150
00:05:16,080 --> 00:05:17,919
to stripe set up a web hook and say that

151
00:05:17,919 --> 00:05:19,440
as soon as there's a new customer that

152
00:05:19,440 --> 00:05:21,280
signs up uh

153
00:05:21,280 --> 00:05:23,600
make a request to my web hook that i

154
00:05:23,600 --> 00:05:25,360
have set up on blah blah blah blah dot

155
00:05:25,360 --> 00:05:28,320
com slash web book receiver

156
00:05:28,320 --> 00:05:29,680
and

157
00:05:29,680 --> 00:05:31,360
you can process that event however you

158
00:05:31,360 --> 00:05:32,880
want you can push it to slack or you can

159
00:05:32,880 --> 00:05:34,320
do something with it send them a welcome

160
00:05:34,320 --> 00:05:36,479
email whatever it is right you can do a

161
00:05:36,479 --> 00:05:38,400
whole bunch of things with it the idea

162
00:05:38,400 --> 00:05:40,160
here is that you as the user are

163
00:05:40,160 --> 00:05:41,759
generating callbacks from your

164
00:05:41,759 --> 00:05:44,560
application based on certain events that

165
00:05:44,560 --> 00:05:46,160
are happening right so these are

166
00:05:46,160 --> 00:05:47,840
typically triggered on certain events

167
00:05:47,840 --> 00:05:49,600
that happen a new subscription comes in

168
00:05:49,600 --> 00:05:52,160
a new payment comes in a user is deleted

169
00:05:52,160 --> 00:05:55,039
user is created any event that you would

170
00:05:55,039 --> 00:05:58,000
like to you typically trigger web hooks

171
00:05:58,000 --> 00:06:00,160
for and if your application provides

172
00:06:00,160 --> 00:06:01,520
your application would allow you to

173
00:06:01,520 --> 00:06:03,759
trigger those web hooks for those events

174
00:06:03,759 --> 00:06:05,280
for a variety of those events now

175
00:06:05,280 --> 00:06:07,199
webhook transactions typically have two

176
00:06:07,199 --> 00:06:09,919
parties one is the provider

177
00:06:09,919 --> 00:06:12,160
or the producer and one is the consumer

178
00:06:12,160 --> 00:06:14,800
now the provider in this case is stripe

179
00:06:14,800 --> 00:06:17,199
right in our example the provider or the

180
00:06:17,199 --> 00:06:19,520
producer is stripe and the consumer in

181
00:06:19,520 --> 00:06:21,840
this case is your application

182
00:06:21,840 --> 00:06:23,440
right whatever application you have set

183
00:06:23,440 --> 00:06:25,280
up to receive those web hooks that's the

184
00:06:25,280 --> 00:06:28,639
consumer stripe is the provider uh so

185
00:06:28,639 --> 00:06:30,080
that's typically how it works and it's

186
00:06:30,080 --> 00:06:31,520
typically a post request right so if you

187
00:06:31,520 --> 00:06:33,199
look at where books are all over the

188
00:06:33,199 --> 00:06:35,840
place it's not it's not a uh it's not

189
00:06:35,840 --> 00:06:37,600
one of those very very rare things

190
00:06:37,600 --> 00:06:38,880
you'll see them all over the place

191
00:06:38,880 --> 00:06:40,000
they're companies that have built their

192
00:06:40,000 --> 00:06:42,319
entire business models on web books uh

193
00:06:42,319 --> 00:06:44,000
web books are in kubernetes web hooks

194
00:06:44,000 --> 00:06:45,600
are in ci systems web hook on in

195
00:06:45,600 --> 00:06:47,759
marketing automation systems web hooks

196
00:06:47,759 --> 00:06:50,560
are pretty ubiquitous they're all over

197
00:06:50,560 --> 00:06:53,680
the place you will see them in um pretty

198
00:06:53,680 --> 00:06:55,759
much any app that you're dealing with

199
00:06:55,759 --> 00:06:58,080
uh in a lot of these especially cicd

200
00:06:58,080 --> 00:06:59,520
systems if you're if you're working with

201
00:06:59,520 --> 00:07:01,120
ci cd and marketing automation where

202
00:07:01,120 --> 00:07:03,120
books are literally an extremely

203
00:07:03,120 --> 00:07:04,400
critical part

204
00:07:04,400 --> 00:07:05,599
of these

205
00:07:05,599 --> 00:07:08,400
these applications right so this is it's

206
00:07:08,400 --> 00:07:10,400
not something that is a very small

207
00:07:10,400 --> 00:07:11,680
um

208
00:07:11,680 --> 00:07:12,560
you know

209
00:07:12,560 --> 00:07:14,400
technology integration that we have now

210
00:07:14,400 --> 00:07:15,680
web books typically work like this

211
00:07:15,680 --> 00:07:17,039
they're event driven we've already

212
00:07:17,039 --> 00:07:19,759
covered the event driven part once they

213
00:07:19,759 --> 00:07:21,919
are that event gets generated they make

214
00:07:21,919 --> 00:07:23,520
a post request right they make a post

215
00:07:23,520 --> 00:07:25,360
request to the bunch of json that says

216
00:07:25,360 --> 00:07:27,199
hey a new user was created this is the

217
00:07:27,199 --> 00:07:28,479
user id

218
00:07:28,479 --> 00:07:31,039
um email blah blah blah blah blah all of

219
00:07:31,039 --> 00:07:33,280
that jazz right it generates a post

220
00:07:33,280 --> 00:07:35,120
request for

221
00:07:35,120 --> 00:07:37,120
uh you generally it's a poster it's not

222
00:07:37,120 --> 00:07:39,120
always a post request but in most cases

223
00:07:39,120 --> 00:07:40,880
it's a post request that hits the

224
00:07:40,880 --> 00:07:42,960
consumer now the consumer once it

225
00:07:42,960 --> 00:07:44,720
receives that json the consumer can do

226
00:07:44,720 --> 00:07:46,560
something now it's not always json it

227
00:07:46,560 --> 00:07:48,560
can be xml it can be aml

228
00:07:48,560 --> 00:07:51,280
but most of the time it's json right so

229
00:07:51,280 --> 00:07:53,039
the consumer receives json and from

230
00:07:53,039 --> 00:07:55,759
there the consumer can do something with

231
00:07:55,759 --> 00:07:57,199
that data

232
00:07:57,199 --> 00:08:00,000
now additionally uh good web hook

233
00:08:00,000 --> 00:08:01,919
providers also give you the ability to

234
00:08:01,919 --> 00:08:03,199
configure

235
00:08:03,199 --> 00:08:05,680
additional security for your web hook

236
00:08:05,680 --> 00:08:07,919
right they give you hmac and api keys

237
00:08:07,919 --> 00:08:09,280
that allow

238
00:08:09,280 --> 00:08:11,360
you to verify whether it's coming in and

239
00:08:11,360 --> 00:08:13,199
they also make sure that you have the

240
00:08:13,199 --> 00:08:15,759
ability to verify them when a request is

241
00:08:15,759 --> 00:08:17,759
coming from their end so

242
00:08:17,759 --> 00:08:19,759
again when i say sometimes most of the

243
00:08:19,759 --> 00:08:21,199
time you would see that this is the case

244
00:08:21,199 --> 00:08:22,960
especially with

245
00:08:22,960 --> 00:08:25,199
applications that are especially sas

246
00:08:25,199 --> 00:08:26,720
applications most of them give you the

247
00:08:26,720 --> 00:08:28,639
ability to do this

248
00:08:28,639 --> 00:08:31,039
and the other thing

249
00:08:31,039 --> 00:08:33,200
is also that in some cases

250
00:08:33,200 --> 00:08:35,679
these providers also allow you to set

251
00:08:35,679 --> 00:08:37,120
custom headers how many of you have seen

252
00:08:37,120 --> 00:08:39,599
this you can set up custom headers on a

253
00:08:39,599 --> 00:08:41,519
web hook right you can say that

254
00:08:41,519 --> 00:08:43,279
to access my application you will need

255
00:08:43,279 --> 00:08:45,519
to provide this particular header and

256
00:08:45,519 --> 00:08:48,080
that also is part of that particular

257
00:08:48,080 --> 00:08:50,720
request that comes in from the provider

258
00:08:50,720 --> 00:08:52,800
and in i've not mentioned it here

259
00:08:52,800 --> 00:08:54,240
specifically but there is another

260
00:08:54,240 --> 00:08:55,839
feature that a lot of web hook providers

261
00:08:55,839 --> 00:08:57,920
provide which is they have the traces of

262
00:08:57,920 --> 00:09:00,000
the http request and the response as

263
00:09:00,000 --> 00:09:02,560
well right it's not just that it's a

264
00:09:02,560 --> 00:09:04,720
fire and forget system they have the

265
00:09:04,720 --> 00:09:07,040
traces of the http request and response

266
00:09:07,040 --> 00:09:08,720
that they send and if they fail they

267
00:09:08,720 --> 00:09:11,120
retry they have the traces of the

268
00:09:11,120 --> 00:09:13,440
failure they have a lot of telemetry

269
00:09:13,440 --> 00:09:15,360
related to every single time they

270
00:09:15,360 --> 00:09:17,600
trigger a web hook so this is also a

271
00:09:17,600 --> 00:09:19,760
common trait of a lot of web hook

272
00:09:19,760 --> 00:09:21,760
systems right so you'll see this with a

273
00:09:21,760 --> 00:09:23,760
lot of web book systems so if you look

274
00:09:23,760 --> 00:09:27,200
at the natural focus uh the attack focus

275
00:09:27,200 --> 00:09:30,160
at least um is

276
00:09:30,160 --> 00:09:32,000
that a lot of us would think when you're

277
00:09:32,000 --> 00:09:33,839
looking at attacking web hooks a lot of

278
00:09:33,839 --> 00:09:34,480
us

279
00:09:34,480 --> 00:09:35,839
the thing that immediately comes to mind

280
00:09:35,839 --> 00:09:38,560
is how do i compromise a consumer right

281
00:09:38,560 --> 00:09:41,360
that's the is that the large scope of

282
00:09:41,360 --> 00:09:43,120
thinking most of the time we think that

283
00:09:43,120 --> 00:09:44,240
how do we

284
00:09:44,240 --> 00:09:45,920
compromise the consumer because we think

285
00:09:45,920 --> 00:09:47,920
of it as one-way communication we think

286
00:09:47,920 --> 00:09:50,080
of it as this request comes to the

287
00:09:50,080 --> 00:09:51,920
consumer and that's really it we don't

288
00:09:51,920 --> 00:09:53,600
really think about it too much from a

289
00:09:53,600 --> 00:09:55,839
provider's perspective right because we

290
00:09:55,839 --> 00:09:57,279
think that okay this is hitting the

291
00:09:57,279 --> 00:09:58,800
consumer and that's it we're done we

292
00:09:58,800 --> 00:10:00,480
don't really care about it from that

293
00:10:00,480 --> 00:10:02,160
point in time so most of the attack

294
00:10:02,160 --> 00:10:04,800
focus that most of us think about is

295
00:10:04,800 --> 00:10:06,480
from the point of view of the consumer

296
00:10:06,480 --> 00:10:07,920
so can i do some kind of a

297
00:10:07,920 --> 00:10:09,360
deserialization attack against the

298
00:10:09,360 --> 00:10:10,800
consumer can i tamper with the payload

299
00:10:10,800 --> 00:10:14,320
can i do replay all of that is targeting

300
00:10:14,320 --> 00:10:15,680
the consumer

301
00:10:15,680 --> 00:10:19,120
right most of these attacks target the

302
00:10:19,120 --> 00:10:21,600
consumer that's really one of the common

303
00:10:21,600 --> 00:10:23,600
set of assumptions that we see when

304
00:10:23,600 --> 00:10:25,920
we're trying to attack web hooks however

305
00:10:25,920 --> 00:10:27,760
in our attack we're going to be

306
00:10:27,760 --> 00:10:29,200
attacking the

307
00:10:29,200 --> 00:10:30,800
provider

308
00:10:30,800 --> 00:10:32,720
we're going to shift our lens a little

309
00:10:32,720 --> 00:10:34,880
bit and we're going to be attacking the

310
00:10:34,880 --> 00:10:36,160
provider we're not going to be attacking

311
00:10:36,160 --> 00:10:38,240
the consumer in this case we are going

312
00:10:38,240 --> 00:10:40,880
to behave as a malicious consumer

313
00:10:40,880 --> 00:10:43,120
and through our malicious consumer we're

314
00:10:43,120 --> 00:10:45,200
going to be attacking the provider so

315
00:10:45,200 --> 00:10:46,959
that's basically what we're trying to do

316
00:10:46,959 --> 00:10:49,760
here so our focus is can i compromise

317
00:10:49,760 --> 00:10:52,000
the provider so that's really what we're

318
00:10:52,000 --> 00:10:53,680
going to be trying to do here

319
00:10:53,680 --> 00:10:56,320
now can i do something like this so this

320
00:10:56,320 --> 00:10:58,959
is the provider this is my consumer the

321
00:10:58,959 --> 00:11:01,279
provider makes a

322
00:11:01,279 --> 00:11:03,760
http post request with json to my

323
00:11:03,760 --> 00:11:07,760
consumer and the consumer finds a way of

324
00:11:07,760 --> 00:11:10,399
sending that request or using some

325
00:11:10,399 --> 00:11:13,120
technique to attack the consumer or the

326
00:11:13,120 --> 00:11:14,560
provider

327
00:11:14,560 --> 00:11:17,360
as part of that same transaction right

328
00:11:17,360 --> 00:11:19,600
as part of that same transaction the

329
00:11:19,600 --> 00:11:21,920
idea here is that the consumer tries to

330
00:11:21,920 --> 00:11:24,640
attack the provider and is of course the

331
00:11:24,640 --> 00:11:26,800
idea here is that they are successful at

332
00:11:26,800 --> 00:11:28,959
attacking that provider so that's

333
00:11:28,959 --> 00:11:31,600
basically what we are planning to do

334
00:11:31,600 --> 00:11:34,480
here that's the goal of our attack today

335
00:11:34,480 --> 00:11:36,079
right so this can only mean of course

336
00:11:36,079 --> 00:11:37,920
when you look at the world of requests

337
00:11:37,920 --> 00:11:39,920
and responses the attack that most

338
00:11:39,920 --> 00:11:40,959
favors

339
00:11:40,959 --> 00:11:42,880
this kind of

340
00:11:42,880 --> 00:11:44,320
construct

341
00:11:44,320 --> 00:11:47,600
is ssrf right because ssrf is all about

342
00:11:47,600 --> 00:11:49,920
redirecting requests or

343
00:11:49,920 --> 00:11:51,600
misdirecting requests so whatever you

344
00:11:51,600 --> 00:11:53,760
want to call it ssrf is the naturally

345
00:11:53,760 --> 00:11:56,079
suited attack vector for this sort of

346
00:11:56,079 --> 00:11:58,399
thing so how do we make ssrf happen here

347
00:11:58,399 --> 00:11:59,920
right so let's talk about ssr of a

348
00:11:59,920 --> 00:12:01,040
little bit i'm not going to spend too

349
00:12:01,040 --> 00:12:03,120
much time on ssrf because i'm assuming

350
00:12:03,120 --> 00:12:06,079
most of you know about ssrf but i am um

351
00:12:06,079 --> 00:12:07,680
i'm just going to focus a little bit on

352
00:12:07,680 --> 00:12:10,160
what ssrf is before i'm getting into uh

353
00:12:10,160 --> 00:12:12,399
the actual attack itself so ssrf is

354
00:12:12,399 --> 00:12:13,839
basically where

355
00:12:13,839 --> 00:12:16,959
you are through uh through the

356
00:12:16,959 --> 00:12:18,959
victim application you are getting the

357
00:12:18,959 --> 00:12:20,880
victim application to make requests to

358
00:12:20,880 --> 00:12:23,200
an internal application and get your

359
00:12:23,200 --> 00:12:24,880
response from that internal application

360
00:12:24,880 --> 00:12:26,959
that could be a metadata url right very

361
00:12:26,959 --> 00:12:30,000
classic aws metadata url where somebody

362
00:12:30,000 --> 00:12:33,279
can access 169.254.169.254

363
00:12:33,279 --> 00:12:36,560
metadata credentials dump all the aws

364
00:12:36,560 --> 00:12:38,880
credentials as part of that response

365
00:12:38,880 --> 00:12:41,440
that is ssrf right or ssrf could mean

366
00:12:41,440 --> 00:12:43,680
i'm running this nosql database on

367
00:12:43,680 --> 00:12:45,519
10.10.10.10

368
00:12:45,519 --> 00:12:47,360
internal network and i use my

369
00:12:47,360 --> 00:12:49,440
application to this victim application

370
00:12:49,440 --> 00:12:51,839
to make a request to

371
00:12:51,839 --> 00:12:53,519
come back with a

372
00:12:53,519 --> 00:12:54,560
you know

373
00:12:54,560 --> 00:12:56,560
chock-a-block full of

374
00:12:56,560 --> 00:12:59,040
database responses so the idea here is

375
00:12:59,040 --> 00:13:02,480
that ssrf is used by the attacker to get

376
00:13:02,480 --> 00:13:04,880
the victim application to get responses

377
00:13:04,880 --> 00:13:08,560
from an internal uh in most cases http

378
00:13:08,560 --> 00:13:10,880
uh request but it need not always be it

379
00:13:10,880 --> 00:13:12,560
can be ssh it can be go for it can be a

380
00:13:12,560 --> 00:13:15,120
whole bunch of things any url uh pro

381
00:13:15,120 --> 00:13:17,440
scheme that is supported by the client

382
00:13:17,440 --> 00:13:19,839
on the victim's end can be used in that

383
00:13:19,839 --> 00:13:21,760
case even a file so for instance let's

384
00:13:21,760 --> 00:13:24,959
say in a kubernetes cluster you have uh

385
00:13:24,959 --> 00:13:27,040
the service account token mounted at var

386
00:13:27,040 --> 00:13:29,279
run service account there's a seek i

387
00:13:29,279 --> 00:13:30,880
don't remember the exact directory but

388
00:13:30,880 --> 00:13:32,639
that's there so you can use a file call

389
00:13:32,639 --> 00:13:33,839
and slash

390
00:13:33,839 --> 00:13:36,160
and then get access to the kubernetes

391
00:13:36,160 --> 00:13:38,079
service account token on that pod using

392
00:13:38,079 --> 00:13:39,760
ssrf as well depending on the client of

393
00:13:39,760 --> 00:13:41,519
course all of this depending on the

394
00:13:41,519 --> 00:13:42,560
client

395
00:13:42,560 --> 00:13:45,120
so ssrf is not new we've seen this it's

396
00:13:45,120 --> 00:13:46,720
been used in

397
00:13:46,720 --> 00:13:49,120
several attacks we've seen this and it

398
00:13:49,120 --> 00:13:51,440
continues to happen ci systems have been

399
00:13:51,440 --> 00:13:54,079
vulnerable to it uh payment systems have

400
00:13:54,079 --> 00:13:56,720
been vulnerable to it pretty much any uh

401
00:13:56,720 --> 00:13:58,800
major provider you've seen some kind of

402
00:13:58,800 --> 00:14:01,120
vulnerability in terms of ssrf it's been

403
00:14:01,120 --> 00:14:03,440
used in massive attack chains as well so

404
00:14:03,440 --> 00:14:06,320
ssrf is not really new right now the

405
00:14:06,320 --> 00:14:09,120
problem though however uh of course ssrf

406
00:14:09,120 --> 00:14:10,320
like i said can be used for a lot of

407
00:14:10,320 --> 00:14:12,720
these things you can uh cloud has become

408
00:14:12,720 --> 00:14:15,440
the natural target of course because

409
00:14:15,440 --> 00:14:17,120
with the cloud you have the ability to

410
00:14:17,120 --> 00:14:19,120
access metadata and through that you can

411
00:14:19,120 --> 00:14:21,519
steal credentials so that's become a big

412
00:14:21,519 --> 00:14:24,160
part of ssrf exploitation but you can do

413
00:14:24,160 --> 00:14:26,160
remote file rate local file read you can

414
00:14:26,160 --> 00:14:28,320
do a denial of service you can

415
00:14:28,320 --> 00:14:31,199
do remote code execution and so on

416
00:14:31,199 --> 00:14:34,240
now what we want however is that in our

417
00:14:34,240 --> 00:14:35,440
case we have the provider we have the

418
00:14:35,440 --> 00:14:39,920
consumer we want to redirect our

419
00:14:39,920 --> 00:14:42,480
consumer driven request

420
00:14:42,480 --> 00:14:44,320
back to the provider so what we want to

421
00:14:44,320 --> 00:14:46,800
do is instead of doing an ssrf

422
00:14:46,800 --> 00:14:48,320
to uh

423
00:14:48,320 --> 00:14:50,560
to our network or we are obviously the

424
00:14:50,560 --> 00:14:52,320
consumer we are outside we want to

425
00:14:52,320 --> 00:14:55,040
redirect a request back to

426
00:14:55,040 --> 00:14:56,720
the provider so that we can attack

427
00:14:56,720 --> 00:14:58,880
something internal to the provider we

428
00:14:58,880 --> 00:15:01,360
want to attack an internal url or an

429
00:15:01,360 --> 00:15:03,199
internal web server that the provider is

430
00:15:03,199 --> 00:15:06,000
hosting that we can compromise through

431
00:15:06,000 --> 00:15:07,920
this particular webhook attack

432
00:15:07,920 --> 00:15:09,680
transaction that's what we want to do

433
00:15:09,680 --> 00:15:12,320
here right so that is why we're using

434
00:15:12,320 --> 00:15:14,560
ssr so in this case we have a web web

435
00:15:14,560 --> 00:15:16,399
book request that comes in and then the

436
00:15:16,399 --> 00:15:18,480
consumer redirects it back to the

437
00:15:18,480 --> 00:15:20,560
provider and says hey you know what make

438
00:15:20,560 --> 00:15:24,199
a request to 169.254.169.254

439
00:15:24,560 --> 00:15:26,880
and your provider just makes that

440
00:15:26,880 --> 00:15:28,560
request and comes back with a response

441
00:15:28,560 --> 00:15:30,880
which has credentials

442
00:15:30,880 --> 00:15:32,560
right but there is a problem here

443
00:15:32,560 --> 00:15:33,920
obviously you will be thinking you

444
00:15:33,920 --> 00:15:35,600
probably have guessed some of those

445
00:15:35,600 --> 00:15:37,279
problems which is

446
00:15:37,279 --> 00:15:38,959
this is you're talking about a post

447
00:15:38,959 --> 00:15:41,839
request right you are dealing when a

448
00:15:41,839 --> 00:15:43,600
provider sends you

449
00:15:43,600 --> 00:15:46,399
a webhook response or

450
00:15:46,399 --> 00:15:48,959
a json payload they are sending a post

451
00:15:48,959 --> 00:15:53,599
request but ssrf largely relies on

452
00:15:53,680 --> 00:15:56,560
get requests right ssrf relies on get

453
00:15:56,560 --> 00:15:58,240
requests how how do you

454
00:15:58,240 --> 00:16:00,560
do that how does that work when a post

455
00:16:00,560 --> 00:16:02,480
request comes in how do we

456
00:16:02,480 --> 00:16:05,680
transform it into a get request so that

457
00:16:05,680 --> 00:16:08,480
we can actually successfully execute

458
00:16:08,480 --> 00:16:12,800
that ssrf right so the idea here is that

459
00:16:12,800 --> 00:16:14,720
you have all of these things there is a

460
00:16:14,720 --> 00:16:16,720
get when there's a get request involved

461
00:16:16,720 --> 00:16:18,320
it's pretty straightforward but in most

462
00:16:18,320 --> 00:16:19,920
cases web book makes post requests and

463
00:16:19,920 --> 00:16:21,759
put requests or what have you and how do

464
00:16:21,759 --> 00:16:24,800
we do the ssrf how do we manage the ssrf

465
00:16:24,800 --> 00:16:25,920
in that case

466
00:16:25,920 --> 00:16:30,160
basically we have the http 303 redirect

467
00:16:30,160 --> 00:16:33,360
now the 303 redirect has a

468
00:16:33,360 --> 00:16:34,480
quirky

469
00:16:34,480 --> 00:16:37,199
capability the way it works is that you

470
00:16:37,199 --> 00:16:39,279
may you you get a request which is a

471
00:16:39,279 --> 00:16:42,000
post or a put but if you do a 303

472
00:16:42,000 --> 00:16:44,079
redirect it makes that a get and

473
00:16:44,079 --> 00:16:46,880
redirects it to that new location right

474
00:16:46,880 --> 00:16:49,839
so your web server if you uh set up a

475
00:16:49,839 --> 00:16:53,279
303 redirect on a post request

476
00:16:53,279 --> 00:16:55,839
you you get a post or a put but that's

477
00:16:55,839 --> 00:16:58,160
automatically converted to a get request

478
00:16:58,160 --> 00:16:59,759
and of course it sets a new location

479
00:16:59,759 --> 00:17:02,079
header and that's where it redirects to

480
00:17:02,079 --> 00:17:03,920
so that's what we're going to be using

481
00:17:03,920 --> 00:17:07,199
to convert that typical post request

482
00:17:07,199 --> 00:17:09,359
back into a get request and then attack

483
00:17:09,359 --> 00:17:11,839
our consumer that's basically what we're

484
00:17:11,839 --> 00:17:14,400
trying to do here so the idea of a 303

485
00:17:14,400 --> 00:17:16,160
is it's it's called the see other where

486
00:17:16,160 --> 00:17:18,000
we say that hey you're sending me a post

487
00:17:18,000 --> 00:17:19,839
request but i'm going to redirect you

488
00:17:19,839 --> 00:17:23,520
here which is a get request so the end

489
00:17:23,520 --> 00:17:25,919
uh request that goes to the consumer or

490
00:17:25,919 --> 00:17:28,160
sorry to that goes back to the provider

491
00:17:28,160 --> 00:17:29,760
is a get request so in that case the get

492
00:17:29,760 --> 00:17:31,559
request could redirect to

493
00:17:31,559 --> 00:17:34,400
169.254 or an internal ip address or

494
00:17:34,400 --> 00:17:35,600
what have you right so all of those

495
00:17:35,600 --> 00:17:39,039
things are possible because of the http

496
00:17:39,039 --> 00:17:41,440
303. so what we want here we want the

497
00:17:41,440 --> 00:17:43,520
provider again the same thing we have

498
00:17:43,520 --> 00:17:45,919
the provider makes a

499
00:17:45,919 --> 00:17:48,799
web hook request to the consumer the

500
00:17:48,799 --> 00:17:52,320
consumer http 303 is that stuff back to

501
00:17:52,320 --> 00:17:54,000
the provider

502
00:17:54,000 --> 00:17:56,000
and points to the internal metadata

503
00:17:56,000 --> 00:17:56,960
service

504
00:17:56,960 --> 00:17:59,360
which in this case is 169.254 whatever

505
00:17:59,360 --> 00:18:02,000
it is and then we get access to that

506
00:18:02,000 --> 00:18:05,520
internal metadata url and credentials

507
00:18:05,520 --> 00:18:06,720
and all of that stuff so that's

508
00:18:06,720 --> 00:18:09,520
basically what we're doing here so

509
00:18:09,520 --> 00:18:12,880
this is the crux of the attack now we

510
00:18:12,880 --> 00:18:14,799
use this on docker

511
00:18:14,799 --> 00:18:17,919
right now docker uh i'm sure all of you

512
00:18:17,919 --> 00:18:19,520
have heard of this small company we know

513
00:18:19,520 --> 00:18:22,640
as docker now docker uh obviously hosts

514
00:18:22,640 --> 00:18:25,039
a pretty large docker hub

515
00:18:25,039 --> 00:18:28,320
right so docker hub is in most cases our

516
00:18:28,320 --> 00:18:29,440
source of

517
00:18:29,440 --> 00:18:31,679
uh you know getting container images and

518
00:18:31,679 --> 00:18:33,600
we use container images from docker hub

519
00:18:33,600 --> 00:18:35,760
all the time so when we do docker pull

520
00:18:35,760 --> 00:18:38,480
uh couchdb or mongodb or nginx or

521
00:18:38,480 --> 00:18:39,760
whatever it is

522
00:18:39,760 --> 00:18:42,160
the it the request goes to docker hub

523
00:18:42,160 --> 00:18:44,480
and docker hub pulls uh pulls down this

524
00:18:44,480 --> 00:18:46,240
container image and of course your you

525
00:18:46,240 --> 00:18:48,000
can start using it at that point in time

526
00:18:48,000 --> 00:18:50,559
so docker hub had this func i mean still

527
00:18:50,559 --> 00:18:52,240
has of course i mean but

528
00:18:52,240 --> 00:18:54,000
this functionality where you can create

529
00:18:54,000 --> 00:18:55,760
a web hook

530
00:18:55,760 --> 00:18:58,000
you can set up a webhook that says

531
00:18:58,000 --> 00:19:00,160
as soon as an image is pushed into my

532
00:19:00,160 --> 00:19:01,360
docker hub

533
00:19:01,360 --> 00:19:03,760
trigger a web hook to my

534
00:19:03,760 --> 00:19:06,320
consumer url so in this case we set up a

535
00:19:06,320 --> 00:19:10,880
nok i o ur url and we set up a redirect

536
00:19:10,880 --> 00:19:13,919
a request a web hook to this particular

537
00:19:13,919 --> 00:19:15,440
consumer

538
00:19:15,440 --> 00:19:19,280
uh url now we start we pushed and we set

539
00:19:19,280 --> 00:19:21,360
up a small application that does this

540
00:19:21,360 --> 00:19:22,480
right so this is basically the

541
00:19:22,480 --> 00:19:24,559
application that we used it says

542
00:19:24,559 --> 00:19:25,679
whenever

543
00:19:25,679 --> 00:19:27,440
of course you can the redirect url was

544
00:19:27,440 --> 00:19:28,960
set to be different i've just set it to

545
00:19:28,960 --> 00:19:31,280
localhost but it's not localhost

546
00:19:31,280 --> 00:19:34,160
so the redirect code is 303. as soon as

547
00:19:34,160 --> 00:19:37,360
a request is received on the slash route

548
00:19:37,360 --> 00:19:40,080
in this case it's going to 303 redirect

549
00:19:40,080 --> 00:19:41,200
that

550
00:19:41,200 --> 00:19:42,640
request to

551
00:19:42,640 --> 00:19:46,240
this particular location which is

552
00:19:46,840 --> 00:19:48,880
169.254.169.254 slash

553
00:19:48,880 --> 00:19:51,280
latest metadata and of course you can

554
00:19:51,280 --> 00:19:52,960
add additional things as you start to

555
00:19:52,960 --> 00:19:55,919
enumerate uh the credentials and the

556
00:19:55,919 --> 00:19:57,840
different paths in that particular

557
00:19:57,840 --> 00:20:00,320
internal url right so you can

558
00:20:00,320 --> 00:20:02,320
with this what we were able to do is we

559
00:20:02,320 --> 00:20:05,360
pushed a container image to our

560
00:20:05,360 --> 00:20:06,799
docker hub

561
00:20:06,799 --> 00:20:09,760
and once we did we started looking for

562
00:20:09,760 --> 00:20:11,760
web hook traces now we knew docker

563
00:20:11,760 --> 00:20:13,679
captured the web book traces but the web

564
00:20:13,679 --> 00:20:15,600
book traces were not available on screen

565
00:20:15,600 --> 00:20:17,520
we were not seeing that come up on

566
00:20:17,520 --> 00:20:19,280
screen in some cases it's available on

567
00:20:19,280 --> 00:20:21,120
screen some cases it's not in some cases

568
00:20:21,120 --> 00:20:22,559
it's not so in that case you're

569
00:20:22,559 --> 00:20:24,080
typically flying blind you might have to

570
00:20:24,080 --> 00:20:26,480
try a blind ssrf type of thing but in

571
00:20:26,480 --> 00:20:28,799
this case it was we thought it was blind

572
00:20:28,799 --> 00:20:30,720
but it was actually not so when we

573
00:20:30,720 --> 00:20:32,960
actually looked at the network request

574
00:20:32,960 --> 00:20:34,400
we saw where book trace is being

575
00:20:34,400 --> 00:20:36,480
downloaded and we were able to enumerate

576
00:20:36,480 --> 00:20:41,120
the role that was being used by docker's

577
00:20:41,120 --> 00:20:43,280
dockers this was docker's eks cluster

578
00:20:43,280 --> 00:20:45,600
that we learned later on and we

579
00:20:45,600 --> 00:20:47,120
enumerated that particular role from

580
00:20:47,120 --> 00:20:49,679
docker zks cluster and from there we

581
00:20:49,679 --> 00:20:53,039
were able to dump the aws credentials as

582
00:20:53,039 --> 00:20:55,200
part of this attack right so as part of

583
00:20:55,200 --> 00:20:56,799
this attack we were able to dump the aws

584
00:20:56,799 --> 00:20:58,159
credentials and turns out those

585
00:20:58,159 --> 00:21:00,799
credentials were for their eks cluster

586
00:21:00,799 --> 00:21:02,480
that they were using for

587
00:21:02,480 --> 00:21:04,960
their entire docker hub operations for

588
00:21:04,960 --> 00:21:08,159
docker hub right so this was uh the

589
00:21:08,159 --> 00:21:11,280
credentials for that um eks cluster and

590
00:21:11,280 --> 00:21:13,200
of course we immediately wrote to them

591
00:21:13,200 --> 00:21:15,200
we verified that this was a finding we

592
00:21:15,200 --> 00:21:17,280
didn't do anything beyond this uh we

593
00:21:17,280 --> 00:21:19,280
verified this was a finding we wrote to

594
00:21:19,280 --> 00:21:21,120
them and they fixed it in a couple of

595
00:21:21,120 --> 00:21:22,880
hours thankfully they were pretty quick

596
00:21:22,880 --> 00:21:24,559
about it they fixed it in a couple of

597
00:21:24,559 --> 00:21:26,480
hours and we verified it and of course

598
00:21:26,480 --> 00:21:29,200
uh that was basically it so we were able

599
00:21:29,200 --> 00:21:30,799
to identify

600
00:21:30,799 --> 00:21:32,159
this particular flaw so i'm going to

601
00:21:32,159 --> 00:21:33,919
demo this right now i'm going to do a

602
00:21:33,919 --> 00:21:36,320
live demo like i promised and i'll show

603
00:21:36,320 --> 00:21:38,559
you how this works

604
00:21:38,559 --> 00:21:40,960
so i've just i've already set up most of

605
00:21:40,960 --> 00:21:43,200
the demo i'm just going to quickly run

606
00:21:43,200 --> 00:21:44,480
through this now

607
00:21:44,480 --> 00:21:47,520
um i am a user so this is me as a

608
00:21:47,520 --> 00:21:50,799
attacker slash user on an application

609
00:21:50,799 --> 00:21:53,120
i'm gonna set up a web hook and that web

610
00:21:53,120 --> 00:21:55,440
hook is gonna be a malicious consumer

611
00:21:55,440 --> 00:21:57,520
web hook right so this is basically me

612
00:21:57,520 --> 00:22:00,000
doing the setup

613
00:22:00,000 --> 00:22:01,760
i'm just going to quickly

614
00:22:01,760 --> 00:22:03,919
run through the instructions so i'm

615
00:22:03,919 --> 00:22:06,400
going to log in as the user so i'm going

616
00:22:06,400 --> 00:22:08,480
to log into the user

617
00:22:08,480 --> 00:22:09,760
like so

618
00:22:09,760 --> 00:22:13,840
let's hope i have a jwt yes i have a jot

619
00:22:13,840 --> 00:22:16,559
so i have a jot and i'm going to list

620
00:22:16,559 --> 00:22:18,720
all my web hooks so in this case as the

621
00:22:18,720 --> 00:22:20,799
user i am going to

622
00:22:20,799 --> 00:22:23,360
list all my

623
00:22:23,360 --> 00:22:25,440
web hooks and you will see that i don't

624
00:22:25,440 --> 00:22:27,840
have any web hooks as of them

625
00:22:27,840 --> 00:22:29,520
as of right now i'm going to set up a

626
00:22:29,520 --> 00:22:31,679
web hook for a post request

627
00:22:31,679 --> 00:22:33,200
so i'm going to quickly set up a web

628
00:22:33,200 --> 00:22:34,640
book for a post request that says hey

629
00:22:34,640 --> 00:22:35,760
whenever

630
00:22:35,760 --> 00:22:38,080
a user is created or whenever a book

631
00:22:38,080 --> 00:22:41,200
event is triggered you need to send your

632
00:22:41,200 --> 00:22:43,120
so i'm setting up a consumer url right

633
00:22:43,120 --> 00:22:44,880
now you need to send your webhook

634
00:22:44,880 --> 00:22:47,280
request to

635
00:22:47,280 --> 00:22:48,799
some

636
00:22:48,799 --> 00:22:52,080
url port 8088 in this case method is a

637
00:22:52,080 --> 00:22:53,760
post method so in this case you'll see

638
00:22:53,760 --> 00:22:56,159
that i've set up my web hook and if i

639
00:22:56,159 --> 00:22:57,679
pull down the number of workbooks i have

640
00:22:57,679 --> 00:23:00,240
i have one webhook consumer that i've

641
00:23:00,240 --> 00:23:02,480
set up right so now i'm going to trigger

642
00:23:02,480 --> 00:23:04,799
now the way this demo works i forgot to

643
00:23:04,799 --> 00:23:07,200
mention that so we have our victim

644
00:23:07,200 --> 00:23:09,440
application and we have a couchdb

645
00:23:09,440 --> 00:23:12,240
database running as an internal database

646
00:23:12,240 --> 00:23:13,280
service

647
00:23:13,280 --> 00:23:15,120
on our internal network so imagine that

648
00:23:15,120 --> 00:23:16,960
there's a coachdb running on an internal

649
00:23:16,960 --> 00:23:19,039
network the the nature of couchdb is

650
00:23:19,039 --> 00:23:20,880
that you can directly access coachdb

651
00:23:20,880 --> 00:23:23,280
over http request you don't need to

652
00:23:23,280 --> 00:23:24,960
use a special protocol or something like

653
00:23:24,960 --> 00:23:26,640
that you can directly access it using

654
00:23:26,640 --> 00:23:28,960
http request like post get and that kind

655
00:23:28,960 --> 00:23:30,799
of stuff it's a nosql database that's

656
00:23:30,799 --> 00:23:32,559
very easy to work with in terms of http

657
00:23:32,559 --> 00:23:34,960
requests and responses so

658
00:23:34,960 --> 00:23:37,200
this is this is the example here so the

659
00:23:37,200 --> 00:23:39,360
idea here is that we want to

660
00:23:39,360 --> 00:23:41,760
steal data from our couchdb

661
00:23:41,760 --> 00:23:44,000
database in the back end right so the

662
00:23:44,000 --> 00:23:45,440
idea here is that when we set up a

663
00:23:45,440 --> 00:23:48,000
webhook and we're using that webhook

664
00:23:48,000 --> 00:23:49,520
we're subjecting it to the whole

665
00:23:49,520 --> 00:23:51,919
boomerang thing that we've seen so far

666
00:23:51,919 --> 00:23:53,440
and it's going to come back with traces

667
00:23:53,440 --> 00:23:55,760
it's going to store the traces and we're

668
00:23:55,760 --> 00:23:59,120
going to see the traces in real time so

669
00:23:59,120 --> 00:24:03,879
we're going to initiate a webhook event

670
00:24:04,960 --> 00:24:07,600
like so

671
00:24:09,840 --> 00:24:12,000
so it says it comes back with a trace

672
00:24:12,000 --> 00:24:14,240
now let's look at what this trace is

673
00:24:14,240 --> 00:24:16,720
so if i do echo

674
00:24:16,720 --> 00:24:18,720
this it looks kind of weird let's see

675
00:24:18,720 --> 00:24:20,559
what the trace is

676
00:24:20,559 --> 00:24:22,080
it says

677
00:24:22,080 --> 00:24:23,200
users

678
00:24:23,200 --> 00:24:26,000
so we were able to enumerate a couchdb

679
00:24:26,000 --> 00:24:29,039
database called users because my hook

680
00:24:29,039 --> 00:24:31,039
essentially was configured

681
00:24:31,039 --> 00:24:34,880
to get this right it was configured to

682
00:24:34,880 --> 00:24:37,760
redirect to uh this particular url

683
00:24:37,760 --> 00:24:38,960
underscore

684
00:24:38,960 --> 00:24:41,360
all underscore dbs right so it's going

685
00:24:41,360 --> 00:24:43,039
to list all the databases in that

686
00:24:43,039 --> 00:24:45,200
particular couchdb so now that we know

687
00:24:45,200 --> 00:24:47,120
that there's a database called users

688
00:24:47,120 --> 00:24:49,279
we're going to use users and say get me

689
00:24:49,279 --> 00:24:52,159
all the docs

690
00:24:52,159 --> 00:24:54,640
of that particular

691
00:24:54,640 --> 00:24:58,480
user db and i'm going to rerun this

692
00:24:58,480 --> 00:24:59,760
let me just check

693
00:24:59,760 --> 00:25:01,679
i need probably need to restart oh it's

694
00:25:01,679 --> 00:25:04,480
restarted automatically great perfect so

695
00:25:04,480 --> 00:25:06,000
it should work

696
00:25:06,000 --> 00:25:09,039
let's rerun this request

697
00:25:09,039 --> 00:25:10,640
and this time

698
00:25:10,640 --> 00:25:12,000
it should dump

699
00:25:12,000 --> 00:25:14,799
all my users from that couchdb

700
00:25:14,799 --> 00:25:16,720
user table right it should dump all the

701
00:25:16,720 --> 00:25:18,320
users of course in this case it dumps

702
00:25:18,320 --> 00:25:19,679
the keys and the values i can start

703
00:25:19,679 --> 00:25:21,520
enumerating based on each key and things

704
00:25:21,520 --> 00:25:24,640
things like that so if i take this and

705
00:25:24,640 --> 00:25:26,000
if i jq

706
00:25:26,000 --> 00:25:27,039
this

707
00:25:27,039 --> 00:25:29,840
dot

708
00:25:30,880 --> 00:25:32,720
content

709
00:25:32,720 --> 00:25:37,039
base 64 dash dash d

710
00:25:37,039 --> 00:25:39,600
so you'll see that it dumped my

711
00:25:39,600 --> 00:25:42,400
user's keys and

712
00:25:42,400 --> 00:25:43,760
yeah the values and stuff like that but

713
00:25:43,760 --> 00:25:45,039
of course not the full value it just

714
00:25:45,039 --> 00:25:47,600
dumped the key keys i can enumerate and

715
00:25:47,600 --> 00:25:50,080
get into it with uh by accessing

716
00:25:50,080 --> 00:25:52,000
individual keys and ids and values and

717
00:25:52,000 --> 00:25:52,960
so on

718
00:25:52,960 --> 00:25:55,760
right so this is a very simple

719
00:25:55,760 --> 00:25:57,360
demonstration of this again you can use

720
00:25:57,360 --> 00:25:58,799
this on aws

721
00:25:58,799 --> 00:26:01,760
on an imds v1 configured aws service

722
00:26:01,760 --> 00:26:03,600
which is a lot of services still

723
00:26:03,600 --> 00:26:06,000
unfortunately and you can do this right

724
00:26:06,000 --> 00:26:08,000
you can actually pull off this attack if

725
00:26:08,000 --> 00:26:09,679
you have a web hook that is vulnerable

726
00:26:09,679 --> 00:26:10,480
to this

727
00:26:10,480 --> 00:26:12,799
right so let's get to defense really

728
00:26:12,799 --> 00:26:15,120
quick and uh some other sub variants of

729
00:26:15,120 --> 00:26:17,840
this so one of the things is that a lot

730
00:26:17,840 --> 00:26:20,159
of people as soon as i come up with this

731
00:26:20,159 --> 00:26:22,400
they say yeah aws is fine

732
00:26:22,400 --> 00:26:24,720
but what about if it's gcp what about if

733
00:26:24,720 --> 00:26:27,200
it's azure how does that work how does

734
00:26:27,200 --> 00:26:29,760
metadata access on those clouds work now

735
00:26:29,760 --> 00:26:31,760
remember this was something i we

736
00:26:31,760 --> 00:26:33,840
mentioned in the beginning a lot of web

737
00:26:33,840 --> 00:26:36,640
hooks allow you to configure custom

738
00:26:36,640 --> 00:26:38,240
headers

739
00:26:38,240 --> 00:26:39,039
right

740
00:26:39,039 --> 00:26:40,559
they allow you to configure custom

741
00:26:40,559 --> 00:26:42,720
headers and what do you need to access

742
00:26:42,720 --> 00:26:45,039
the metadata urls in azure and gcp

743
00:26:45,039 --> 00:26:47,360
anyone

744
00:26:48,159 --> 00:26:50,559
you need a metadata header

745
00:26:50,559 --> 00:26:52,400
right so if you have a web book that

746
00:26:52,400 --> 00:26:55,200
allows custom headers to be configured

747
00:26:55,200 --> 00:26:56,960
you can attack you can use the same

748
00:26:56,960 --> 00:26:59,520
attack against gcp and azure because all

749
00:26:59,520 --> 00:27:02,000
gcp and azure need to access that

750
00:27:02,000 --> 00:27:04,799
metadata url or the metadata endpoint is

751
00:27:04,799 --> 00:27:07,520
literally just a metadata header right

752
00:27:07,520 --> 00:27:09,440
so in this case we compromised the ci

753
00:27:09,440 --> 00:27:12,400
system by adding the google

754
00:27:12,400 --> 00:27:14,960
metadata header and they were running

755
00:27:14,960 --> 00:27:17,039
their services on gcp and we were able

756
00:27:17,039 --> 00:27:20,640
to get access to their entire internal

757
00:27:20,640 --> 00:27:22,559
infrastructure

758
00:27:22,559 --> 00:27:24,480
because we were able to access their

759
00:27:24,480 --> 00:27:26,480
runners metadata

760
00:27:26,480 --> 00:27:28,799
gcp metadata service and through that we

761
00:27:28,799 --> 00:27:30,880
were able to potentially escalate

762
00:27:30,880 --> 00:27:32,880
privileges across the board to their

763
00:27:32,880 --> 00:27:34,559
entire infrastructure that was running a

764
00:27:34,559 --> 00:27:37,279
whole bunch of runners on gcp right so

765
00:27:37,279 --> 00:27:39,840
this is also possible so when you have

766
00:27:39,840 --> 00:27:42,399
custom headers that's another thing that

767
00:27:42,399 --> 00:27:44,000
you have to be watchful off because

768
00:27:44,000 --> 00:27:46,399
those custom headers can be used to host

769
00:27:46,399 --> 00:27:48,559
your own service if you are not very

770
00:27:48,559 --> 00:27:50,159
careful right so that is one of the

771
00:27:50,159 --> 00:27:52,559
things that you have to keep in mind

772
00:27:52,559 --> 00:27:54,000
the other thing of course is a lot of

773
00:27:54,000 --> 00:27:55,279
people uh

774
00:27:55,279 --> 00:27:59,200
you set up a lot deny lists for 169 254

775
00:27:59,200 --> 00:28:01,679
or 127.0.0.1

776
00:28:01,679 --> 00:28:04,080
they said our localhost they set up deny

777
00:28:04,080 --> 00:28:06,559
list so that if you use that in a

778
00:28:06,559 --> 00:28:08,240
web hook when you're setting up a web

779
00:28:08,240 --> 00:28:09,840
hook it would just not allow that to

780
00:28:09,840 --> 00:28:12,240
happen however remember our old friend

781
00:28:12,240 --> 00:28:14,840
dns rebind i can set up

782
00:28:14,840 --> 00:28:16,799
something.something.com and i can set

783
00:28:16,799 --> 00:28:17,960
that to

784
00:28:17,960 --> 00:28:22,000
127.0.0.1 or 169.254 or 169.254. and

785
00:28:22,000 --> 00:28:24,720
it'll still work so unless you have

786
00:28:24,720 --> 00:28:27,200
resolution level security where

787
00:28:27,200 --> 00:28:29,919
it doesn't it blocks the resolution when

788
00:28:29,919 --> 00:28:32,880
uh it encounters a local host or a

789
00:28:32,880 --> 00:28:36,159
deny listed uh uh then i listed ip

790
00:28:36,159 --> 00:28:37,840
address or host

791
00:28:37,840 --> 00:28:39,440
it would won't work but in

792
00:28:39,440 --> 00:28:41,200
in the cases where you're just doing a

793
00:28:41,200 --> 00:28:44,399
basic deny list it will not work

794
00:28:44,399 --> 00:28:46,000
it will still work because the attacker

795
00:28:46,000 --> 00:28:47,279
can

796
00:28:47,279 --> 00:28:49,039
find ways around this pretty easily as

797
00:28:49,039 --> 00:28:51,440
well so this is uh

798
00:28:51,440 --> 00:28:53,360
this is the whole scope of what you can

799
00:28:53,360 --> 00:28:56,159
do now defense the number one defense

800
00:28:56,159 --> 00:28:57,919
and literally the easiest defense for

801
00:28:57,919 --> 00:29:01,440
this is do not follow the redirect

802
00:29:01,440 --> 00:29:04,000
now a lot of http clients that you're

803
00:29:04,000 --> 00:29:05,039
using

804
00:29:05,039 --> 00:29:07,520
by default are configured to follow

805
00:29:07,520 --> 00:29:10,320
redirects i know for a fact that python

806
00:29:10,320 --> 00:29:12,640
and i think some java very popular java

807
00:29:12,640 --> 00:29:14,799
clients do that by default they follow

808
00:29:14,799 --> 00:29:17,600
redirects you need to turn off that

809
00:29:17,600 --> 00:29:19,840
functionality right so you need to

810
00:29:19,840 --> 00:29:21,679
ensure that the client you're using does

811
00:29:21,679 --> 00:29:23,760
not follow redirects or you have to turn

812
00:29:23,760 --> 00:29:26,720
off the redirect when you are processing

813
00:29:26,720 --> 00:29:28,559
any urls especially as part of the web

814
00:29:28,559 --> 00:29:31,120
hooks right so whenever you're using a

815
00:29:31,120 --> 00:29:33,679
client to process web hooks always turn

816
00:29:33,679 --> 00:29:35,039
off

817
00:29:35,039 --> 00:29:38,159
allow redirects because this this attack

818
00:29:38,159 --> 00:29:40,559
works entirely because redirects are

819
00:29:40,559 --> 00:29:43,360
allowed right because redirects work

820
00:29:43,360 --> 00:29:45,679
this attack works if the redirects don't

821
00:29:45,679 --> 00:29:47,840
the attack just doesn't work so you have

822
00:29:47,840 --> 00:29:50,480
to ensure that that happens the second

823
00:29:50,480 --> 00:29:52,640
thing you want to do is i mean this is

824
00:29:52,640 --> 00:29:54,640
slightly complicated stuff i would not

825
00:29:54,640 --> 00:29:56,320
recommend this but if you are not able

826
00:29:56,320 --> 00:29:58,480
to do the allow redirect deny redirect

827
00:29:58,480 --> 00:30:00,399
part of it some some some of our

828
00:30:00,399 --> 00:30:01,919
customers said you know what we can't do

829
00:30:01,919 --> 00:30:04,000
that we have to allow it because many

830
00:30:04,000 --> 00:30:06,159
times our customers need that to work so

831
00:30:06,159 --> 00:30:07,840
i in general i found that to be a little

832
00:30:07,840 --> 00:30:10,000
flimsy as an excuse but nevertheless

833
00:30:10,000 --> 00:30:12,000
if you can't for some reason not able to

834
00:30:12,000 --> 00:30:13,919
do that then you can set up the other

835
00:30:13,919 --> 00:30:15,600
stuff but believe me the other stuff is

836
00:30:15,600 --> 00:30:17,200
a lot more complicated than the first

837
00:30:17,200 --> 00:30:20,080
one if you can do the first one i highly

838
00:30:20,080 --> 00:30:21,919
recommend you do that because network

839
00:30:21,919 --> 00:30:24,080
security policy would mean you'd cut off

840
00:30:24,080 --> 00:30:26,240
access to the metadata endpoint cut off

841
00:30:26,240 --> 00:30:28,480
access to any localhost services cut off

842
00:30:28,480 --> 00:30:30,240
access to internal network endpoints

843
00:30:30,240 --> 00:30:32,320
which is hard to do right because that

844
00:30:32,320 --> 00:30:34,320
service is probably meant to access

845
00:30:34,320 --> 00:30:36,399
those endpoints so you may not be able

846
00:30:36,399 --> 00:30:38,480
to do this as well but if you can great

847
00:30:38,480 --> 00:30:40,000
if you if you can't you might have to

848
00:30:40,000 --> 00:30:42,720
think of other options dns proxy or dns

849
00:30:42,720 --> 00:30:44,880
allow list when you're resolving dns to

850
00:30:44,880 --> 00:30:47,120
prevent against dns rebind that's

851
00:30:47,120 --> 00:30:48,640
something that you can potentially do as

852
00:30:48,640 --> 00:30:49,440
well

853
00:30:49,440 --> 00:30:51,200
you can add of course input validation

854
00:30:51,200 --> 00:30:53,600
to your webhook url and you can do an ip

855
00:30:53,600 --> 00:30:55,360
deny list based on

856
00:30:55,360 --> 00:30:57,279
these controls but remember the number

857
00:30:57,279 --> 00:30:58,960
one and the most effective way of

858
00:30:58,960 --> 00:31:00,559
preventing this

859
00:31:00,559 --> 00:31:02,640
attack is the first one

860
00:31:02,640 --> 00:31:04,159
if you can do the first one i highly

861
00:31:04,159 --> 00:31:06,159
recommend you do it but if you can't

862
00:31:06,159 --> 00:31:08,640
then all the others are options but they

863
00:31:08,640 --> 00:31:09,679
are not

864
00:31:09,679 --> 00:31:11,600
very good options but they're imperfect

865
00:31:11,600 --> 00:31:13,919
options but they're options nevertheless

866
00:31:13,919 --> 00:31:14,880
right

867
00:31:14,880 --> 00:31:17,360
so that is basically what i have so

868
00:31:17,360 --> 00:31:18,799
conclusions web hooks are a really

869
00:31:18,799 --> 00:31:20,640
powerful way to integrate also a very

870
00:31:20,640 --> 00:31:22,080
powerful way to get attacked because of

871
00:31:22,080 --> 00:31:23,679
these chain of attacks

872
00:31:23,679 --> 00:31:25,200
look at it in your threat model because

873
00:31:25,200 --> 00:31:27,519
web hooks are seldom threat modeled have

874
00:31:27,519 --> 00:31:29,679
you i've not seen too many threat models

875
00:31:29,679 --> 00:31:31,279
that encounter or

876
00:31:31,279 --> 00:31:33,200
take into account web hook functionality

877
00:31:33,200 --> 00:31:34,559
everybody assumes that web hooks are

878
00:31:34,559 --> 00:31:36,799
just fire and forget mechanisms that

879
00:31:36,799 --> 00:31:38,480
they'll never they'll never have to

880
00:31:38,480 --> 00:31:40,240
bother about later on but that's not

881
00:31:40,240 --> 00:31:42,640
true because you are still part of an

882
00:31:42,640 --> 00:31:44,880
http request chain and when that request

883
00:31:44,880 --> 00:31:46,399
chain can perform all these kind of

884
00:31:46,399 --> 00:31:48,080
shenanigans that's when you want to be a

885
00:31:48,080 --> 00:31:50,080
little careful right so

886
00:31:50,080 --> 00:31:51,600
uh think about it as part of your threat

887
00:31:51,600 --> 00:31:53,760
model and then incorporate it ssrf of

888
00:31:53,760 --> 00:31:56,159
course we've seen what ssrf can do so

889
00:31:56,159 --> 00:31:57,840
you definitely have to think about how

890
00:31:57,840 --> 00:32:00,559
ssrf can impact this and look at defense

891
00:32:00,559 --> 00:32:02,640
holistically and from multiple layers

892
00:32:02,640 --> 00:32:04,559
like i said the number one defense for

893
00:32:04,559 --> 00:32:07,600
this flaw is the redirecting i highly

894
00:32:07,600 --> 00:32:08,799
encourage you to do the other things as

895
00:32:08,799 --> 00:32:11,679
well if you can but remember ssrf is

896
00:32:11,679 --> 00:32:13,600
harder to prevent because it depends on

897
00:32:13,600 --> 00:32:14,960
your use case depends on where you're

898
00:32:14,960 --> 00:32:16,640
redirecting depends on the scope of the

899
00:32:16,640 --> 00:32:18,799
redirect there are lots of depend

900
00:32:18,799 --> 00:32:20,640
situations that you'll encounter with

901
00:32:20,640 --> 00:32:23,039
ssrf so definitely the first one if you

902
00:32:23,039 --> 00:32:25,600
can do it that would be uh really uh the

903
00:32:25,600 --> 00:32:27,600
best way to defend against

904
00:32:27,600 --> 00:32:28,960
this sort of

905
00:32:28,960 --> 00:32:31,760
attack with that i come to the end of my

906
00:32:31,760 --> 00:32:34,080
talk the slides for this talk are in the

907
00:32:34,080 --> 00:32:35,679
bitly link

908
00:32:35,679 --> 00:32:36,880
and uh

909
00:32:36,880 --> 00:32:38,480
yeah

910
00:32:38,480 --> 00:32:40,480
this is uh you know my talk let me know

911
00:32:40,480 --> 00:32:43,120
if you do have any questions

912
00:32:43,120 --> 00:32:45,518
for me

913
00:32:45,919 --> 00:32:48,240
thank you

914
00:32:48,799 --> 00:32:51,120
sorry

915
00:32:51,600 --> 00:32:53,840
oh really okay i finished it quicker

916
00:32:53,840 --> 00:32:56,720
than i thought then okay

917
00:32:56,720 --> 00:32:58,159
all right

918
00:32:58,159 --> 00:33:00,720
all right thank you so much and thanks

919
00:33:00,720 --> 00:33:03,880
for attending

