1
00:00:00,080 --> 00:00:02,080
now for a very exciting show coming up

2
00:00:02,080 --> 00:00:03,040
here

3
00:00:03,040 --> 00:00:05,759
we have mr mike ruth

4
00:00:05,759 --> 00:00:07,440
talking about attacking and defending

5
00:00:07,440 --> 00:00:09,840
infrastructure with terraform

6
00:00:09,840 --> 00:00:12,880
how we got admin across cloud

7
00:00:12,880 --> 00:00:14,160
environments

8
00:00:14,160 --> 00:00:16,000
so you have a background i guess you're

9
00:00:16,000 --> 00:00:18,720
working at brex right infosec all right

10
00:00:18,720 --> 00:00:20,320
well uh take it away let's get them

11
00:00:20,320 --> 00:00:22,130
around the hand up there

12
00:00:22,130 --> 00:00:24,720
[Applause]

13
00:00:24,720 --> 00:00:26,160
thanks everyone

14
00:00:26,160 --> 00:00:27,840
i want to say like it's great to see

15
00:00:27,840 --> 00:00:30,320
everyone but i can't i can't see anyone

16
00:00:30,320 --> 00:00:31,840
actually right now so

17
00:00:31,840 --> 00:00:34,559
but thanks for coming

18
00:00:34,559 --> 00:00:36,079
my name is mike

19
00:00:36,079 --> 00:00:39,760
i'm a staff security engineer at brex

20
00:00:39,760 --> 00:00:42,239
my co-researcher oka was unfortunately

21
00:00:42,239 --> 00:00:43,600
unable to make it but just know that

22
00:00:43,600 --> 00:00:44,960
sort of all the slides and all the

23
00:00:44,960 --> 00:00:46,800
presentation and research that we talked

24
00:00:46,800 --> 00:00:48,000
about today

25
00:00:48,000 --> 00:00:50,160
that was uh done through both of us so

26
00:00:50,160 --> 00:00:52,160
big thanks to him

27
00:00:52,160 --> 00:00:53,520
so yeah i want to talk a little bit

28
00:00:53,520 --> 00:00:54,559
about

29
00:00:54,559 --> 00:00:58,160
our supply chain security

30
00:00:58,239 --> 00:01:00,480
hacking terraform um in particular we're

31
00:01:00,480 --> 00:01:03,280
going to talk about how we got sensitive

32
00:01:03,280 --> 00:01:05,600
credentials as well as ultimately access

33
00:01:05,600 --> 00:01:09,439
into admin into cloud environments

34
00:01:11,280 --> 00:01:12,720
okay

35
00:01:12,720 --> 00:01:13,439
so

36
00:01:13,439 --> 00:01:14,880
i'm sure that a lot of you probably

37
00:01:14,880 --> 00:01:16,560
already know what terraform is but for

38
00:01:16,560 --> 00:01:18,000
those of you who don't or perhaps a bit

39
00:01:18,000 --> 00:01:19,360
of a refresher

40
00:01:19,360 --> 00:01:21,200
um i wanted to talk about some of the

41
00:01:21,200 --> 00:01:22,640
basics

42
00:01:22,640 --> 00:01:24,479
starting with what is terraform so

43
00:01:24,479 --> 00:01:26,400
terraform an infrastructure as code tool

44
00:01:26,400 --> 00:01:28,720
right um and it's used to manage and

45
00:01:28,720 --> 00:01:30,159
deploy uh

46
00:01:30,159 --> 00:01:32,960
cloud resources as well as a handful of

47
00:01:32,960 --> 00:01:34,640
other resources now whether it's on-prem

48
00:01:34,640 --> 00:01:36,880
with vms

49
00:01:36,880 --> 00:01:38,640
kubernetes clusters now has support

50
00:01:38,640 --> 00:01:40,880
right vault handful of other things they

51
00:01:40,880 --> 00:01:42,159
come in a different

52
00:01:42,159 --> 00:01:44,240
flavors

53
00:01:44,240 --> 00:01:46,399
it started as an open source tool

54
00:01:46,399 --> 00:01:47,439
and

55
00:01:47,439 --> 00:01:49,040
for individuals who probably use the

56
00:01:49,040 --> 00:01:50,960
open source tool still

57
00:01:50,960 --> 00:01:53,200
they're probably

58
00:01:53,200 --> 00:01:54,799
using it directly from endpoints

59
00:01:54,799 --> 00:01:56,719
strictly from laptops right so that

60
00:01:56,719 --> 00:01:59,360
means that all of your source code is

61
00:01:59,360 --> 00:02:00,960
local to the endpoint

62
00:02:00,960 --> 00:02:02,320
all of your credentials to be able to

63
00:02:02,320 --> 00:02:04,000
get access to cloud environments and

64
00:02:04,000 --> 00:02:05,680
things like that that's also local to

65
00:02:05,680 --> 00:02:06,880
your endpoint

66
00:02:06,880 --> 00:02:09,919
um over time though you know the idea to

67
00:02:09,919 --> 00:02:11,440
productionize that so that you can

68
00:02:11,440 --> 00:02:12,879
remove those types of credentials from

69
00:02:12,879 --> 00:02:15,120
those environments um you know it became

70
00:02:15,120 --> 00:02:16,720
more and more of an idea

71
00:02:16,720 --> 00:02:18,640
and so hashicorp came

72
00:02:18,640 --> 00:02:20,640
came around and pre created this sort of

73
00:02:20,640 --> 00:02:22,000
productionized versions right these are

74
00:02:22,000 --> 00:02:23,599
things like terraform enterprise and

75
00:02:23,599 --> 00:02:25,120
terraform cloud

76
00:02:25,120 --> 00:02:26,959
the scope of this presentation is going

77
00:02:26,959 --> 00:02:28,720
to focus on those latter two things

78
00:02:28,720 --> 00:02:31,519
terraform enterprise and terraform cloud

79
00:02:31,519 --> 00:02:33,120
and not so much on the open source

80
00:02:33,120 --> 00:02:34,800
version predominantly because all the

81
00:02:34,800 --> 00:02:36,400
credentials and things are already local

82
00:02:36,400 --> 00:02:40,000
right um for individuals or or companies

83
00:02:40,000 --> 00:02:42,959
who may have productionized terraform

84
00:02:42,959 --> 00:02:44,400
their open source version of terraform

85
00:02:44,400 --> 00:02:46,319
themselves some of our findings might

86
00:02:46,319 --> 00:02:47,519
still be applicable but just know that

87
00:02:47,519 --> 00:02:48,560
the majority of things that we're

88
00:02:48,560 --> 00:02:50,080
talking about today are through term

89
00:02:50,080 --> 00:02:53,760
enterprise and internal from cloud

90
00:02:54,319 --> 00:02:56,160
all right so let's talk a little bit

91
00:02:56,160 --> 00:02:58,239
about the internals of these services or

92
00:02:58,239 --> 00:02:59,280
these tools

93
00:02:59,280 --> 00:03:00,480
i think it's best to start with

94
00:03:00,480 --> 00:03:03,120
organizations and workspaces so these

95
00:03:03,120 --> 00:03:05,680
act as logical boundaries

96
00:03:05,680 --> 00:03:07,120
starting with an org you tend to have

97
00:03:07,120 --> 00:03:10,319
many workspaces inside of a network

98
00:03:10,319 --> 00:03:12,080
inside the workspace

99
00:03:12,080 --> 00:03:13,760
that's where you sort of manage all of

100
00:03:13,760 --> 00:03:15,360
your resources and these workspaces they

101
00:03:15,360 --> 00:03:17,840
tend to be associated sort of one-to-one

102
00:03:17,840 --> 00:03:19,120
with your different environments right

103
00:03:19,120 --> 00:03:21,120
so you might have a workspace for your

104
00:03:21,120 --> 00:03:23,200
dev environment a workspace for your

105
00:03:23,200 --> 00:03:24,480
staging environment for your prod

106
00:03:24,480 --> 00:03:25,920
environment right

107
00:03:25,920 --> 00:03:27,519
you might also have workspaces

108
00:03:27,519 --> 00:03:29,840
specifically for a dedicated application

109
00:03:29,840 --> 00:03:32,000
an application in devs staging prod etc

110
00:03:32,000 --> 00:03:34,480
but typically you have them per per

111
00:03:34,480 --> 00:03:36,879
environment

112
00:03:36,879 --> 00:03:38,480
inside a workspace you tend to have

113
00:03:38,480 --> 00:03:40,000
what's known as a state file and as the

114
00:03:40,000 --> 00:03:42,400
name implies it handles and persists all

115
00:03:42,400 --> 00:03:43,920
of the changes that have occurred what

116
00:03:43,920 --> 00:03:46,239
it believes to be the state of your

117
00:03:46,239 --> 00:03:48,400
given environment so this is useful so

118
00:03:48,400 --> 00:03:49,840
that when you go and make

119
00:03:49,840 --> 00:03:51,519
changes in the future there's a

120
00:03:51,519 --> 00:03:53,840
cross-reference between what it thinks

121
00:03:53,840 --> 00:03:55,680
is currently out there in states as well

122
00:03:55,680 --> 00:03:57,680
as the incoming changes so that they can

123
00:03:57,680 --> 00:04:01,799
perform a diff between the two

124
00:04:02,000 --> 00:04:03,519
the sort of

125
00:04:03,519 --> 00:04:05,200
meat of what happens inside of the

126
00:04:05,200 --> 00:04:06,799
workspace are all done by providers so

127
00:04:06,799 --> 00:04:08,480
the providers are responsible for making

128
00:04:08,480 --> 00:04:10,080
all of the changes in your environment

129
00:04:10,080 --> 00:04:12,080
so we might have providers for a bunch

130
00:04:12,080 --> 00:04:14,959
of different clouds aws provider gcp

131
00:04:14,959 --> 00:04:16,000
provider

132
00:04:16,000 --> 00:04:18,079
kubernetes provider etc right

133
00:04:18,079 --> 00:04:20,639
these are binaries that run

134
00:04:20,639 --> 00:04:22,720
that are responsible for knowing about

135
00:04:22,720 --> 00:04:24,320
all of the resources that need to be

136
00:04:24,320 --> 00:04:25,919
managed right so

137
00:04:25,919 --> 00:04:27,520
it knows about all the configuration

138
00:04:27,520 --> 00:04:28,720
details and it knows how to hit the

139
00:04:28,720 --> 00:04:31,440
responsible or the related apis for that

140
00:04:31,440 --> 00:04:33,199
given provider to go and actually

141
00:04:33,199 --> 00:04:34,240
configure

142
00:04:34,240 --> 00:04:37,520
and apply those resources

143
00:04:38,160 --> 00:04:41,040
okay a little bit about access so

144
00:04:41,040 --> 00:04:43,040
for an organization who may just start

145
00:04:43,040 --> 00:04:44,639
out using terraform enterprise or

146
00:04:44,639 --> 00:04:47,040
terraform cloud it may be such that

147
00:04:47,040 --> 00:04:49,040
you've removed for example

148
00:04:49,040 --> 00:04:51,280
all of the cloud credentials from your

149
00:04:51,280 --> 00:04:53,040
endpoints and instead have replaced them

150
00:04:53,040 --> 00:04:54,880
with terraform credentials so that they

151
00:04:54,880 --> 00:04:57,520
can go and actually make requests to

152
00:04:57,520 --> 00:04:59,199
terraform enterprise

153
00:04:59,199 --> 00:05:01,440
terraform cloud etc and this works

154
00:05:01,440 --> 00:05:03,759
very much like a crud model and it's on

155
00:05:03,759 --> 00:05:05,759
a per workspace basis they don't

156
00:05:05,759 --> 00:05:07,280
necessarily call it crud instead they

157
00:05:07,280 --> 00:05:09,600
use different terms plan apply read you

158
00:05:09,600 --> 00:05:12,880
can see their definitions here

159
00:05:13,280 --> 00:05:14,320
up until

160
00:05:14,320 --> 00:05:15,840
a couple years ago

161
00:05:15,840 --> 00:05:17,440
these were basically the only

162
00:05:17,440 --> 00:05:19,039
permissions that you could modify on a

163
00:05:19,039 --> 00:05:21,360
given workspace but now you can actually

164
00:05:21,360 --> 00:05:22,880
use custom workspace permissions and

165
00:05:22,880 --> 00:05:24,639
this is actually pretty relevant in

166
00:05:24,639 --> 00:05:26,400
particular for the read based permission

167
00:05:26,400 --> 00:05:28,720
because read for a while meant being

168
00:05:28,720 --> 00:05:30,639
able to read the output of a given plan

169
00:05:30,639 --> 00:05:32,800
or apply but it also meant being able to

170
00:05:32,800 --> 00:05:34,560
read the state and the state file the

171
00:05:34,560 --> 00:05:36,639
contents of the state as well so these

172
00:05:36,639 --> 00:05:38,400
custom workspaces permissions were

173
00:05:38,400 --> 00:05:40,720
actually now granular enough to only say

174
00:05:40,720 --> 00:05:41,759
allow

175
00:05:41,759 --> 00:05:43,120
read access to the output and not

176
00:05:43,120 --> 00:05:44,880
necessarily read access to say the state

177
00:05:44,880 --> 00:05:47,280
file which you'll see might be relevant

178
00:05:47,280 --> 00:05:49,840
coming up here

179
00:05:51,039 --> 00:05:53,440
okay so

180
00:05:53,440 --> 00:05:55,120
there are there's some challenges or

181
00:05:55,120 --> 00:05:57,199
perhaps some problems with having

182
00:05:57,199 --> 00:05:58,960
everyone at your company or anyone who

183
00:05:58,960 --> 00:05:59,919
needs to

184
00:05:59,919 --> 00:06:02,160
manage infrastructure at your company to

185
00:06:02,160 --> 00:06:04,160
be able to go and communicate directly

186
00:06:04,160 --> 00:06:06,479
to terraform itself

187
00:06:06,479 --> 00:06:09,039
so a more sort of mature approach might

188
00:06:09,039 --> 00:06:11,919
be removing access all of those sort of

189
00:06:11,919 --> 00:06:13,600
individual credentials for being able to

190
00:06:13,600 --> 00:06:16,240
get access to your terraform cloud or

191
00:06:16,240 --> 00:06:17,680
enterprise

192
00:06:17,680 --> 00:06:20,240
systems and instead use version control

193
00:06:20,240 --> 00:06:22,000
this is actually pretty beneficial for a

194
00:06:22,000 --> 00:06:23,600
developer experience perspective too

195
00:06:23,600 --> 00:06:24,479
right because

196
00:06:24,479 --> 00:06:25,680
you don't necessarily want everyone to

197
00:06:25,680 --> 00:06:28,160
go and learn a new tool but most people

198
00:06:28,160 --> 00:06:29,919
are probably at least most engineers or

199
00:06:29,919 --> 00:06:31,600
developers are probably pretty familiar

200
00:06:31,600 --> 00:06:33,120
with version control right github

201
00:06:33,120 --> 00:06:34,639
probably in particular

202
00:06:34,639 --> 00:06:36,560
and so the way that this works

203
00:06:36,560 --> 00:06:38,960
is you have a repository map to a

204
00:06:38,960 --> 00:06:40,720
specific workspace inside of say

205
00:06:40,720 --> 00:06:43,440
terraform enterprise or terra from cloud

206
00:06:43,440 --> 00:06:44,639
so there's sort of a one to one

207
00:06:44,639 --> 00:06:46,000
relationship between work state

208
00:06:46,000 --> 00:06:48,080
workspaces and repositories you might

209
00:06:48,080 --> 00:06:49,840
have a monorepo instead where you have

210
00:06:49,840 --> 00:06:51,520
sub directories that map to workspaces

211
00:06:51,520 --> 00:06:52,800
but this is

212
00:06:52,800 --> 00:06:54,960
essentially how this works and so

213
00:06:54,960 --> 00:06:57,360
when you have a repository and you go

214
00:06:57,360 --> 00:07:00,639
and submit either a pr or commit to it

215
00:07:00,639 --> 00:07:02,240
it goes and kicks off what is known as a

216
00:07:02,240 --> 00:07:04,880
speculative plan against the workspace

217
00:07:04,880 --> 00:07:06,160
and that speculative plan is then

218
00:07:06,160 --> 00:07:08,240
responsible for doing uh like that dry

219
00:07:08,240 --> 00:07:09,440
round that we kind of talked about or

220
00:07:09,440 --> 00:07:11,199
that you saw on on the access side of

221
00:07:11,199 --> 00:07:12,400
things

222
00:07:12,400 --> 00:07:14,000
one thing that's worth noting is that

223
00:07:14,000 --> 00:07:16,319
speculative plans do not show up in a

224
00:07:16,319 --> 00:07:19,360
work spaces job queue so a job queue is

225
00:07:19,360 --> 00:07:21,520
basically all the list of plans or runs

226
00:07:21,520 --> 00:07:23,759
that exists for that given workspace

227
00:07:23,759 --> 00:07:24,800
that'll be relevant for a little bit

228
00:07:24,800 --> 00:07:26,880
later so just keep that in mind

229
00:07:26,880 --> 00:07:28,960
when these jobs are created though we

230
00:07:28,960 --> 00:07:30,639
have sort of a

231
00:07:30,639 --> 00:07:32,319
set of nodes this terraform

232
00:07:32,319 --> 00:07:33,599
infrastructure just a bunch of compute

233
00:07:33,599 --> 00:07:35,680
that's responsible for like doing all of

234
00:07:35,680 --> 00:07:37,680
the work that's associated with

235
00:07:37,680 --> 00:07:39,440
whether it's a plan or apply right all

236
00:07:39,440 --> 00:07:41,440
the job and and those are terraform

237
00:07:41,440 --> 00:07:43,039
workers right those are the responsible

238
00:07:43,039 --> 00:07:45,599
for doing the actual work itself

239
00:07:45,599 --> 00:07:47,039
and so the idea for this reference

240
00:07:47,039 --> 00:07:48,319
architecture is

241
00:07:48,319 --> 00:07:50,080
you know you you have these terraform

242
00:07:50,080 --> 00:07:51,840
plans that exist they provide provide

243
00:07:51,840 --> 00:07:54,319
dry run results and then you go and look

244
00:07:54,319 --> 00:07:56,479
at the results perform some sort of code

245
00:07:56,479 --> 00:07:58,319
review if everything looks sane you

246
00:07:58,319 --> 00:08:00,000
merge the pr right and then you actually

247
00:08:00,000 --> 00:08:01,360
perform and apply and that's how your

248
00:08:01,360 --> 00:08:03,280
infrastructure gets gets modified

249
00:08:03,280 --> 00:08:05,440
updated and managed

250
00:08:05,440 --> 00:08:06,560
so this is sort of a reference

251
00:08:06,560 --> 00:08:08,639
architecture diagram at a high level

252
00:08:08,639 --> 00:08:09,840
we're going to be talking and showing

253
00:08:09,840 --> 00:08:12,800
this type of diagram a lot in it so it

254
00:08:12,800 --> 00:08:14,560
you know it probably makes sense to just

255
00:08:14,560 --> 00:08:17,199
sort of take a second here and

256
00:08:17,199 --> 00:08:19,840
look through it

257
00:08:20,639 --> 00:08:23,639
so

258
00:08:26,319 --> 00:08:28,160
it's a pull request the question was

259
00:08:28,160 --> 00:08:30,400
what's a pr

260
00:08:30,400 --> 00:08:31,599
um

261
00:08:31,599 --> 00:08:33,599
so it's it's a request to go and make

262
00:08:33,599 --> 00:08:35,760
change to a to your version control to

263
00:08:35,760 --> 00:08:38,559
your repository

264
00:08:38,640 --> 00:08:40,640
so a user goes and creates a pull

265
00:08:40,640 --> 00:08:41,760
request

266
00:08:41,760 --> 00:08:44,080
to the given terraform repository that

267
00:08:44,080 --> 00:08:45,839
goes and kicks off the speculative plan

268
00:08:45,839 --> 00:08:47,120
that we talked about which just happens

269
00:08:47,120 --> 00:08:48,880
to be a web hook that gets configured on

270
00:08:48,880 --> 00:08:51,120
your repository for the specific

271
00:08:51,120 --> 00:08:53,120
uh workspace you can figure that

272
00:08:53,120 --> 00:08:56,640
beforehand and so that pr gets triggered

273
00:08:56,640 --> 00:08:58,320
the terraform workspace has a job that

274
00:08:58,320 --> 00:09:00,800
gets scheduled on the terraform workers

275
00:09:00,800 --> 00:09:02,160
then your resources are eventually

276
00:09:02,160 --> 00:09:04,399
managed after the terraform plan gets

277
00:09:04,399 --> 00:09:06,560
reviewed the code gets reviewed merged

278
00:09:06,560 --> 00:09:09,360
and eventually applied

279
00:09:09,360 --> 00:09:12,880
okay so problem statement

280
00:09:12,880 --> 00:09:16,000
we contend that

281
00:09:16,000 --> 00:09:19,279
in most organizations most engineers

282
00:09:19,279 --> 00:09:22,160
have access to create prs against your

283
00:09:22,160 --> 00:09:23,839
terraform repository so maybe a quick

284
00:09:23,839 --> 00:09:25,920
show of hands for individuals

285
00:09:25,920 --> 00:09:28,160
who use or have used

286
00:09:28,160 --> 00:09:29,839
terraform enterprise or terraform cloud

287
00:09:29,839 --> 00:09:31,519
at maybe their current organization or

288
00:09:31,519 --> 00:09:33,120
previous organizations

289
00:09:33,120 --> 00:09:35,040
show of hands how many

290
00:09:35,040 --> 00:09:36,480
of these organizations sort of allow

291
00:09:36,480 --> 00:09:38,959
blanket pr requests to terraform

292
00:09:38,959 --> 00:09:40,959
repositories

293
00:09:40,959 --> 00:09:41,839
i

294
00:09:41,839 --> 00:09:44,160
i see a handful i mean hold on

295
00:09:44,160 --> 00:09:45,440
yeah all right i see a handful and it

296
00:09:45,440 --> 00:09:46,800
makes sense right it's

297
00:09:46,800 --> 00:09:48,480
it's good developer experience to be

298
00:09:48,480 --> 00:09:50,959
able to sort of allow many individuals

299
00:09:50,959 --> 00:09:52,959
to create prs and the assumption is that

300
00:09:52,959 --> 00:09:55,120
that's a safe action

301
00:09:55,120 --> 00:09:58,160
so why is this a problem

302
00:09:59,200 --> 00:10:00,480
all right let's talk a little bit about

303
00:10:00,480 --> 00:10:02,640
our

304
00:10:02,839 --> 00:10:05,440
findings so finding number one is all

305
00:10:05,440 --> 00:10:07,600
about secret sex filtration

306
00:10:07,600 --> 00:10:09,200
so we were able

307
00:10:09,200 --> 00:10:11,680
to access the secrets of a workspace

308
00:10:11,680 --> 00:10:13,120
through a terraform plan and in

309
00:10:13,120 --> 00:10:15,760
particular a speculative plan from a pr

310
00:10:15,760 --> 00:10:17,680
this allowed us to exfiltrate all of the

311
00:10:17,680 --> 00:10:19,920
terraform variables all the workspace

312
00:10:19,920 --> 00:10:21,760
environment variables and all the

313
00:10:21,760 --> 00:10:23,600
secrets that existed within that state

314
00:10:23,600 --> 00:10:25,760
file for that workspace so some of the

315
00:10:25,760 --> 00:10:27,519
secrets that might exist in state

316
00:10:27,519 --> 00:10:29,680
depending on your organization might be

317
00:10:29,680 --> 00:10:32,640
secrets that exist in hashicorp vault so

318
00:10:32,640 --> 00:10:33,839
if you have some sort of connection

319
00:10:33,839 --> 00:10:35,600
there if you've got a vault provider

320
00:10:35,600 --> 00:10:36,800
it would make sense to manage your

321
00:10:36,800 --> 00:10:39,279
secrets in such a location but in doing

322
00:10:39,279 --> 00:10:41,440
so referencing them in your terraform

323
00:10:41,440 --> 00:10:43,200
workspace means that they end up also

324
00:10:43,200 --> 00:10:45,040
getting stored in state

325
00:10:45,040 --> 00:10:46,640
another type of secret might be say

326
00:10:46,640 --> 00:10:48,959
certificates or certificate keys

327
00:10:48,959 --> 00:10:51,920
so if you're responsible for handling

328
00:10:51,920 --> 00:10:54,240
ingress or load balancers or any sort of

329
00:10:54,240 --> 00:10:56,240
you know front-end communication and you

330
00:10:56,240 --> 00:10:57,839
want to do that in a programmatic manner

331
00:10:57,839 --> 00:10:59,680
you might use terraform for that well

332
00:10:59,680 --> 00:11:01,120
certificates and keys they might end up

333
00:11:01,120 --> 00:11:03,040
in there another use case is kms

334
00:11:03,040 --> 00:11:04,320
encrypted secrets if you're doing any

335
00:11:04,320 --> 00:11:06,480
sort of encryption in transit

336
00:11:06,480 --> 00:11:08,240
and you want to define say the cipher

337
00:11:08,240 --> 00:11:10,640
text inside of your terraform source so

338
00:11:10,640 --> 00:11:12,160
they can be decrypted in sort of this

339
00:11:12,160 --> 00:11:14,959
programmatic fashion well uh

340
00:11:14,959 --> 00:11:17,040
all of the uh both the ciphertext and

341
00:11:17,040 --> 00:11:18,480
the plaintext might end up in state file

342
00:11:18,480 --> 00:11:19,839
as well so

343
00:11:19,839 --> 00:11:21,120
we were able to get access to all of

344
00:11:21,120 --> 00:11:22,079
this and

345
00:11:22,079 --> 00:11:24,240
this is sort of a workflow for how how

346
00:11:24,240 --> 00:11:26,480
it worked

347
00:11:26,480 --> 00:11:28,240
so step one very similar to what we

348
00:11:28,240 --> 00:11:29,680
looked at for our vcs reference

349
00:11:29,680 --> 00:11:31,920
architecture instead of um any

350
00:11:31,920 --> 00:11:33,680
individual creating a pr well now a

351
00:11:33,680 --> 00:11:35,839
malicious pr gets crafted and that gets

352
00:11:35,839 --> 00:11:37,839
sent up to the terraform repository

353
00:11:37,839 --> 00:11:40,320
which in the same way kicks off a web

354
00:11:40,320 --> 00:11:42,560
hook that triggers a plan

355
00:11:42,560 --> 00:11:45,440
that goes to the terraform console

356
00:11:45,440 --> 00:11:47,200
which eventually ends up being run on

357
00:11:47,200 --> 00:11:48,480
the terraform worker and then our

358
00:11:48,480 --> 00:11:50,160
malicious code kicks off and goes and

359
00:11:50,160 --> 00:11:51,519
extracts all of the environment

360
00:11:51,519 --> 00:11:54,000
variables that exist for that job and

361
00:11:54,000 --> 00:11:56,880
either sends it back to the output of

362
00:11:56,880 --> 00:11:58,720
the plan if you have access to that but

363
00:11:58,720 --> 00:12:00,240
it's just as easy to go and send that

364
00:12:00,240 --> 00:12:02,079
information say out to a remote listener

365
00:12:02,079 --> 00:12:03,279
that you've already configured ahead of

366
00:12:03,279 --> 00:12:05,519
time

367
00:12:06,720 --> 00:12:08,800
okay finding number two this is about

368
00:12:08,800 --> 00:12:11,040
state exfiltration

369
00:12:11,040 --> 00:12:11,839
so

370
00:12:11,839 --> 00:12:14,000
we talked a little bit about workspaces

371
00:12:14,000 --> 00:12:15,519
being logical boundaries and we talked

372
00:12:15,519 --> 00:12:17,360
about how each workspace has a state

373
00:12:17,360 --> 00:12:20,399
file we were able to access the state

374
00:12:20,399 --> 00:12:22,959
files through a terraform plan of all

375
00:12:22,959 --> 00:12:25,279
the other workspaces inside of an org

376
00:12:25,279 --> 00:12:27,200
and we're able to do that from one

377
00:12:27,200 --> 00:12:29,040
individual workspace or any individual

378
00:12:29,040 --> 00:12:30,959
workspace and so the way that this works

379
00:12:30,959 --> 00:12:31,920
is that

380
00:12:31,920 --> 00:12:32,720
um

381
00:12:32,720 --> 00:12:35,120
whenever you create a job for a given

382
00:12:35,120 --> 00:12:37,360
workspace that runs on those workers

383
00:12:37,360 --> 00:12:39,519
a token a terraform run token is what

384
00:12:39,519 --> 00:12:41,040
hashicorp calls it

385
00:12:41,040 --> 00:12:42,720
is created it's also known as an atlas

386
00:12:42,720 --> 00:12:44,240
token if you kind of look at the

387
00:12:44,240 --> 00:12:45,760
variable name

388
00:12:45,760 --> 00:12:47,360
and that gets available with every plan

389
00:12:47,360 --> 00:12:48,880
and every apply

390
00:12:48,880 --> 00:12:51,200
and it turns out that that token is sort

391
00:12:51,200 --> 00:12:53,360
of over authorized it has the ability to

392
00:12:53,360 --> 00:12:55,360
go and fetch the state from any other

393
00:12:55,360 --> 00:12:56,639
workspace that's within that

394
00:12:56,639 --> 00:12:59,279
organization

395
00:13:00,399 --> 00:13:02,240
similar workflow

396
00:13:02,240 --> 00:13:04,560
malicious pr gets crafted

397
00:13:04,560 --> 00:13:06,480
web hook triggers a plan

398
00:13:06,480 --> 00:13:08,079
plan goes to the console

399
00:13:08,079 --> 00:13:10,240
that body of work gets um

400
00:13:10,240 --> 00:13:12,959
kicked off on the terraform worker

401
00:13:12,959 --> 00:13:15,120
uh then a malicious code runs we go and

402
00:13:15,120 --> 00:13:17,120
fetch that token probably using finding

403
00:13:17,120 --> 00:13:19,839
one right and then we can go and fetch

404
00:13:19,839 --> 00:13:21,760
the state from a given workspace by

405
00:13:21,760 --> 00:13:23,600
communicating to the terraform console

406
00:13:23,600 --> 00:13:26,000
and similarly we either push that the

407
00:13:26,000 --> 00:13:27,760
results that are in the state file back

408
00:13:27,760 --> 00:13:29,760
to the terraform console or you kick it

409
00:13:29,760 --> 00:13:31,120
off to you know send it to a remote

410
00:13:31,120 --> 00:13:34,120
listener

411
00:13:34,880 --> 00:13:36,480
okay finding three this is probably the

412
00:13:36,480 --> 00:13:38,399
most important finding

413
00:13:38,399 --> 00:13:41,040
apply on plan bypass so

414
00:13:41,040 --> 00:13:43,120
it turns out that when you perform a

415
00:13:43,120 --> 00:13:46,240
terraform apply you can actually perform

416
00:13:46,240 --> 00:13:49,360
a terraform plan within inside of it

417
00:13:49,360 --> 00:13:51,920
so our expectation if we consider our

418
00:13:51,920 --> 00:13:54,000
reference architecture previously there

419
00:13:54,000 --> 00:13:56,320
was a an assumption that existed where

420
00:13:56,320 --> 00:13:58,240
when a plan was created

421
00:13:58,240 --> 00:14:00,480
some sort of review had to happen prior

422
00:14:00,480 --> 00:14:02,480
to the apply step right that you needed

423
00:14:02,480 --> 00:14:04,320
to do the code review you need to merge

424
00:14:04,320 --> 00:14:05,680
the code so that you can eventually

425
00:14:05,680 --> 00:14:07,600
perform the apply turns out that's not

426
00:14:07,600 --> 00:14:09,760
actually true we were able to perform

427
00:14:09,760 --> 00:14:11,600
terraform applies through unmerged

428
00:14:11,600 --> 00:14:13,600
non-code reviewed prs

429
00:14:13,600 --> 00:14:15,440
and they're super difficult to audit too

430
00:14:15,440 --> 00:14:17,279
because they're those speculative plans

431
00:14:17,279 --> 00:14:19,120
that we talked about earlier

432
00:14:19,120 --> 00:14:20,560
because the speculative plans don't show

433
00:14:20,560 --> 00:14:23,040
up in the job queue it's not easy to see

434
00:14:23,040 --> 00:14:24,959
you have to go through audit logs that

435
00:14:24,959 --> 00:14:27,440
provide you with sort of a run id and so

436
00:14:27,440 --> 00:14:28,720
now you need to know exactly what you're

437
00:14:28,720 --> 00:14:30,079
looking for or you need to come in sort

438
00:14:30,079 --> 00:14:31,440
of from the other end and know exactly

439
00:14:31,440 --> 00:14:34,480
how to look at a specific pr to find it

440
00:14:34,480 --> 00:14:36,240
perhaps more importantly depending on

441
00:14:36,240 --> 00:14:38,079
the use case it also grants access to

442
00:14:38,079 --> 00:14:39,600
the underlying file system of that

443
00:14:39,600 --> 00:14:41,760
terraform worker

444
00:14:41,760 --> 00:14:44,160
so depending on your environment this

445
00:14:44,160 --> 00:14:46,000
may or may not be

446
00:14:46,000 --> 00:14:47,279
critical

447
00:14:47,279 --> 00:14:49,519
if you're using terraform cloud then all

448
00:14:49,519 --> 00:14:51,199
the workers are managed by hashicorp

449
00:14:51,199 --> 00:14:52,639
themselves and they're pretty well

450
00:14:52,639 --> 00:14:54,320
locked down they have your own dedicated

451
00:14:54,320 --> 00:14:56,639
aws account for you they don't have any

452
00:14:56,639 --> 00:14:58,880
instance profiles or any extra im

453
00:14:58,880 --> 00:15:00,959
permissions so while you do get access

454
00:15:00,959 --> 00:15:02,959
to the underlying file system

455
00:15:02,959 --> 00:15:04,399
and you might be able to get remote code

456
00:15:04,399 --> 00:15:06,079
execution you're not necessarily getting

457
00:15:06,079 --> 00:15:07,760
lateral movement here

458
00:15:07,760 --> 00:15:08,800
however

459
00:15:08,800 --> 00:15:10,480
if you are using terraform enterprise

460
00:15:10,480 --> 00:15:12,000
you're responsible for managing those

461
00:15:12,000 --> 00:15:13,440
terraform workers yourself and that

462
00:15:13,440 --> 00:15:15,199
probably means that they exist inside

463
00:15:15,199 --> 00:15:16,399
your network

464
00:15:16,399 --> 00:15:18,480
and that could mean that the terraform

465
00:15:18,480 --> 00:15:21,040
worker has access through vpc peering or

466
00:15:21,040 --> 00:15:23,279
through transit gateways or some sort of

467
00:15:23,279 --> 00:15:25,360
access to all of your other environments

468
00:15:25,360 --> 00:15:27,839
that exist as well

469
00:15:27,839 --> 00:15:29,360
and of course privilege escalation is

470
00:15:29,360 --> 00:15:31,199
kind of the big thing here

471
00:15:31,199 --> 00:15:32,639
if you have access to the underlying

472
00:15:32,639 --> 00:15:35,759
file system of your workers chances are

473
00:15:35,759 --> 00:15:37,120
those are configured with some sort of

474
00:15:37,120 --> 00:15:38,639
best practice in mind right so that

475
00:15:38,639 --> 00:15:41,600
means if you're in aws

476
00:15:41,600 --> 00:15:43,519
uh the workers are using probably assume

477
00:15:43,519 --> 00:15:45,519
role with terraform profiles if you're

478
00:15:45,519 --> 00:15:47,519
in gcp or azure you're probably using a

479
00:15:47,519 --> 00:15:49,040
service account of some kind and in all

480
00:15:49,040 --> 00:15:51,120
those use cases you can hit the metadata

481
00:15:51,120 --> 00:15:54,000
api to go and fetch those credentials

482
00:15:54,000 --> 00:15:55,680
and because terraform is responsible for

483
00:15:55,680 --> 00:15:57,120
managing all of your infrastructure and

484
00:15:57,120 --> 00:15:59,279
all of your accounts it's probably admin

485
00:15:59,279 --> 00:16:00,880
level credentials that you then can get

486
00:16:00,880 --> 00:16:02,399
through that so privilege escalation is

487
00:16:02,399 --> 00:16:04,480
very real

488
00:16:04,480 --> 00:16:05,839
and the last point that i want to make

489
00:16:05,839 --> 00:16:08,480
on this slide is with

490
00:16:08,480 --> 00:16:09,920
we don't talk too much about policy

491
00:16:09,920 --> 00:16:12,240
enforcement but hashicorp does provide

492
00:16:12,240 --> 00:16:14,079
sentinel which is sort of a policy

493
00:16:14,079 --> 00:16:15,920
enforcement framework and more recently

494
00:16:15,920 --> 00:16:17,440
they've provided run tasks with

495
00:16:17,440 --> 00:16:18,639
terraform

496
00:16:18,639 --> 00:16:20,480
and so the idea with these is that they

497
00:16:20,480 --> 00:16:22,079
you can have sort of an advanced

498
00:16:22,079 --> 00:16:24,560
language to be able to enforce any sort

499
00:16:24,560 --> 00:16:26,560
of you know your unique or niche use

500
00:16:26,560 --> 00:16:28,320
cases that you want to sort of prevent

501
00:16:28,320 --> 00:16:30,079
these types of things from happening

502
00:16:30,079 --> 00:16:32,320
uh but unfortunately these things run

503
00:16:32,320 --> 00:16:34,880
within the context of a pre-apply and

504
00:16:34,880 --> 00:16:36,959
post plan so any sort of policy

505
00:16:36,959 --> 00:16:38,160
enforcement that you might be able to

506
00:16:38,160 --> 00:16:39,600
get out of these tools

507
00:16:39,600 --> 00:16:41,279
only applies after a plan and since all

508
00:16:41,279 --> 00:16:42,560
these attacks are occurring during the

509
00:16:42,560 --> 00:16:44,800
plan step we were able to bypass them as

510
00:16:44,800 --> 00:16:46,959
well

511
00:16:49,680 --> 00:16:51,519
similar to our last two findings finding

512
00:16:51,519 --> 00:16:54,000
three is the apply on plan bypass again

513
00:16:54,000 --> 00:16:55,920
malicious pr gets crafted

514
00:16:55,920 --> 00:16:58,000
pr kicks off a plan

515
00:16:58,000 --> 00:17:00,000
the plan goes and runs we perform an

516
00:17:00,000 --> 00:17:01,040
escape

517
00:17:01,040 --> 00:17:03,120
from that the context of the plan onto

518
00:17:03,120 --> 00:17:04,959
the underlying file system and instead

519
00:17:04,959 --> 00:17:06,640
of sending the exfiltration results to

520
00:17:06,640 --> 00:17:08,079
say the console or to a listener we

521
00:17:08,079 --> 00:17:10,799
actually just go and we actually write

522
00:17:10,799 --> 00:17:12,880
malicious resources into the environment

523
00:17:12,880 --> 00:17:15,039
itself

524
00:17:15,039 --> 00:17:16,000
okay

525
00:17:16,000 --> 00:17:18,959
so let's revisit the problem statement

526
00:17:18,959 --> 00:17:21,760
if anyone in your organization can draft

527
00:17:21,760 --> 00:17:24,079
prs against your terraform repository

528
00:17:24,079 --> 00:17:26,400
that means that they can exfil

529
00:17:26,400 --> 00:17:28,480
exfiltrate secrets from any workspace

530
00:17:28,480 --> 00:17:30,080
they can access the state file from any

531
00:17:30,080 --> 00:17:31,360
workspace

532
00:17:31,360 --> 00:17:33,600
they can bypass all this access control

533
00:17:33,600 --> 00:17:34,960
that we have in place right through

534
00:17:34,960 --> 00:17:37,440
unmerged non-code reviewed prs

535
00:17:37,440 --> 00:17:39,120
and perhaps

536
00:17:39,120 --> 00:17:41,200
more important to some you get access to

537
00:17:41,200 --> 00:17:42,799
the underlying file system of your

538
00:17:42,799 --> 00:17:46,160
compute for your tf workers

539
00:17:46,160 --> 00:17:47,280
okay

540
00:17:47,280 --> 00:17:48,880
so we have some demos

541
00:17:48,880 --> 00:17:50,559
i want to show you that kind of

542
00:17:50,559 --> 00:17:51,840
illustrate the workflow that we just

543
00:17:51,840 --> 00:17:54,240
went through

544
00:17:59,120 --> 00:18:00,799
so this is sort of the demo architecture

545
00:18:00,799 --> 00:18:02,000
pretty similar to the reference

546
00:18:02,000 --> 00:18:03,200
architecture that we have looked at

547
00:18:03,200 --> 00:18:05,120
already so we have this sort of fake

548
00:18:05,120 --> 00:18:07,600
hypothetical company crypto exchange co

549
00:18:07,600 --> 00:18:10,000
uh and they have a repository that goes

550
00:18:10,000 --> 00:18:12,799
and creates speculative plans uh through

551
00:18:12,799 --> 00:18:14,480
this vcs integration

552
00:18:14,480 --> 00:18:16,400
and they've got two workspaces website

553
00:18:16,400 --> 00:18:18,480
dev and website prod so basically

554
00:18:18,480 --> 00:18:20,320
they've got one website that works and

555
00:18:20,320 --> 00:18:21,840
they've got a dev version of it they've

556
00:18:21,840 --> 00:18:23,200
got a prod version of it because they

557
00:18:23,200 --> 00:18:25,600
use terraform cloud their terraform

558
00:18:25,600 --> 00:18:27,200
workers are all kind of within the same

559
00:18:27,200 --> 00:18:29,360
environment and then the terraform

560
00:18:29,360 --> 00:18:30,720
workers are then responsible for

561
00:18:30,720 --> 00:18:32,880
managing the resources in a dev cloud as

562
00:18:32,880 --> 00:18:36,080
well as in a prod cloud

563
00:18:36,559 --> 00:18:39,600
okay so let's look at

564
00:18:39,600 --> 00:18:41,440
finding one which i think needs a second

565
00:18:41,440 --> 00:18:44,640
to load this video here

566
00:18:45,039 --> 00:18:46,720
there we go

567
00:18:46,720 --> 00:18:48,480
okay

568
00:18:48,480 --> 00:18:49,840
so we're going to run this get

569
00:18:49,840 --> 00:18:52,240
environment on the dev uh the dev

570
00:18:52,240 --> 00:18:54,840
workspace so we go and create a

571
00:18:54,840 --> 00:18:58,080
pr the pr gets kicked off with a sort of

572
00:18:58,080 --> 00:19:00,400
innocuous or simplified name creating a

573
00:19:00,400 --> 00:19:01,919
template instance so it's very

574
00:19:01,919 --> 00:19:03,200
unassuming

575
00:19:03,200 --> 00:19:05,679
we can see when the pr is created that

576
00:19:05,679 --> 00:19:07,360
the web hook is generated against the

577
00:19:07,360 --> 00:19:09,039
website dev we go and take a look at the

578
00:19:09,039 --> 00:19:12,720
details inside of the terraform console

579
00:19:12,720 --> 00:19:14,000
and in there our malicious code is

580
00:19:14,000 --> 00:19:15,280
running where we generate a null

581
00:19:15,280 --> 00:19:17,600
resource to null resources in fact one

582
00:19:17,600 --> 00:19:18,880
to go and exfiltrate all of the

583
00:19:18,880 --> 00:19:21,200
environment variables which you can see

584
00:19:21,200 --> 00:19:22,320
all the environment variables of the

585
00:19:22,320 --> 00:19:24,559
worker are just sort of listed here

586
00:19:24,559 --> 00:19:26,559
and also the environment variable tf

587
00:19:26,559 --> 00:19:28,720
vars which as we can see has say

588
00:19:28,720 --> 00:19:33,160
presumably provider credentials for aws

589
00:19:39,840 --> 00:19:43,120
here's finding number two

590
00:19:45,280 --> 00:19:47,039
similarly we want to get the state file

591
00:19:47,039 --> 00:19:47,840
from

592
00:19:47,840 --> 00:19:50,160
our prod environment by running in the

593
00:19:50,160 --> 00:19:53,039
context of our dev environment

594
00:19:53,039 --> 00:19:56,559
so again we go and create a pr

595
00:19:58,720 --> 00:20:01,280
the pr is run against website dev as we

596
00:20:01,280 --> 00:20:03,440
talked about

597
00:20:03,440 --> 00:20:06,720
you can see that there

598
00:20:06,720 --> 00:20:08,799
the plan kicks off and we can see again

599
00:20:08,799 --> 00:20:10,559
that our malicious no resource was

600
00:20:10,559 --> 00:20:11,840
created

601
00:20:11,840 --> 00:20:13,840
and inside this we'll be able to see the

602
00:20:13,840 --> 00:20:15,919
link to the state file right there

603
00:20:15,919 --> 00:20:18,480
and then we sort of unfurl what's in

604
00:20:18,480 --> 00:20:20,159
there and we see that we have database

605
00:20:20,159 --> 00:20:22,480
credentials from vaults configured

606
00:20:22,480 --> 00:20:23,919
and those database credentials are

607
00:20:23,919 --> 00:20:26,400
associated with with what appears to be

608
00:20:26,400 --> 00:20:28,240
the prod environment

609
00:20:28,240 --> 00:20:29,919
so we've been able to get

610
00:20:29,919 --> 00:20:32,480
say an act username and password for a

611
00:20:32,480 --> 00:20:36,799
prod environment through a pr from dev

612
00:20:39,679 --> 00:20:42,960
okay finding three

613
00:20:44,880 --> 00:20:46,960
so we want to perform an apply on plan

614
00:20:46,960 --> 00:20:48,559
for our example we're going to go and

615
00:20:48,559 --> 00:20:50,400
create an s3 bucket

616
00:20:50,400 --> 00:20:53,039
so this s3 bucket is going to be named

617
00:20:53,039 --> 00:20:55,360
remove this bucket

618
00:20:55,360 --> 00:20:56,799
so when we go and take a look at our

619
00:20:56,799 --> 00:20:58,559
current environment we can see that

620
00:20:58,559 --> 00:21:01,039
crypto exchange code does not have that

621
00:21:01,039 --> 00:21:03,280
s3 bucket

622
00:21:03,280 --> 00:21:05,039
so we go through our same process again

623
00:21:05,039 --> 00:21:07,120
we go and create a pr pr goes and kicks

624
00:21:07,120 --> 00:21:08,960
off the terraform plan the speculative

625
00:21:08,960 --> 00:21:09,840
plan

626
00:21:09,840 --> 00:21:13,039
we're in website dev

627
00:21:13,039 --> 00:21:15,200
malicious code triggers a null resource

628
00:21:15,200 --> 00:21:16,320
and then here we can see that the

629
00:21:16,320 --> 00:21:18,880
terraform apply is actually running and

630
00:21:18,880 --> 00:21:20,480
we can see the output of the apply right

631
00:21:20,480 --> 00:21:22,480
here

632
00:21:22,480 --> 00:21:24,080
apply was complete and resources were

633
00:21:24,080 --> 00:21:25,840
created so we go back and take a look at

634
00:21:25,840 --> 00:21:27,120
the environment

635
00:21:27,120 --> 00:21:29,760
remove this test bucket exists

636
00:21:29,760 --> 00:21:31,280
so we were able to go

637
00:21:31,280 --> 00:21:33,679
and push resources

638
00:21:33,679 --> 00:21:36,400
through a plan

639
00:21:36,559 --> 00:21:38,000
even though you know it was actually

640
00:21:38,000 --> 00:21:41,039
performing and apply

641
00:21:42,080 --> 00:21:45,919
okay um so next let's talk a little bit

642
00:21:45,919 --> 00:21:47,760
about remediations

643
00:21:47,760 --> 00:21:50,480
mitigations and some limitations

644
00:21:50,480 --> 00:21:52,240
to those so the first thing that we

645
00:21:52,240 --> 00:21:54,240
thought was like okay i think we've got

646
00:21:54,240 --> 00:21:56,480
something here what should we do

647
00:21:56,480 --> 00:21:58,320
uh so the first thing was we should

648
00:21:58,320 --> 00:21:59,919
probably talk to hashicorp about this

649
00:21:59,919 --> 00:22:01,280
and so that's what we did we ended up

650
00:22:01,280 --> 00:22:02,559
getting in touch with a couple of

651
00:22:02,559 --> 00:22:04,880
individuals from hashgraph security team

652
00:22:04,880 --> 00:22:06,720
uh we brought this to their attention we

653
00:22:06,720 --> 00:22:08,640
had some of these conversations uh and

654
00:22:08,640 --> 00:22:10,080
they sort of agreed uh you know that

655
00:22:10,080 --> 00:22:12,400
these were sort of legitimate findings

656
00:22:12,400 --> 00:22:14,000
so the outcomes of these discussions

657
00:22:14,000 --> 00:22:16,320
were sort of twofold number one was that

658
00:22:16,320 --> 00:22:18,400
a security model which consists of sort

659
00:22:18,400 --> 00:22:20,960
of a threat model uh was created and

660
00:22:20,960 --> 00:22:22,240
available to everyone and then the

661
00:22:22,240 --> 00:22:23,600
second thing was well there were some

662
00:22:23,600 --> 00:22:24,640
actual

663
00:22:24,640 --> 00:22:28,320
mitigations for some of these findings

664
00:22:33,200 --> 00:22:35,600
i wonder if

665
00:22:35,600 --> 00:22:39,039
does that help hold on

666
00:22:39,120 --> 00:22:41,039
slideshow

667
00:22:41,039 --> 00:22:42,880
that's better okay so this is the

668
00:22:42,880 --> 00:22:44,400
security model i you don't need to

669
00:22:44,400 --> 00:22:45,679
squint and it's actually blurry

670
00:22:45,679 --> 00:22:47,280
apparently so don't worry about it the

671
00:22:47,280 --> 00:22:49,840
link is there and we're gonna dive into

672
00:22:49,840 --> 00:22:51,520
uh each relevant section for each

673
00:22:51,520 --> 00:22:53,440
finding a little bit more so don't worry

674
00:22:53,440 --> 00:22:56,159
too much about this

675
00:22:56,159 --> 00:22:59,280
okay remediations for finding one

676
00:22:59,280 --> 00:23:01,840
so the first thing is

677
00:23:01,840 --> 00:23:03,919
you know while we showed that this was

678
00:23:03,919 --> 00:23:05,760
applicable with speculative plans it's

679
00:23:05,760 --> 00:23:08,080
still just as true for regular plans as

680
00:23:08,080 --> 00:23:09,360
well right if you have the credentials

681
00:23:09,360 --> 00:23:11,440
to go and interact with terraform uh you

682
00:23:11,440 --> 00:23:13,600
can make the same types of you can you

683
00:23:13,600 --> 00:23:16,159
know use those findings as well so if

684
00:23:16,159 --> 00:23:18,880
you're not using version control um

685
00:23:18,880 --> 00:23:20,559
and i guess regardless actually you

686
00:23:20,559 --> 00:23:22,159
should probably implement the proper

687
00:23:22,159 --> 00:23:24,159
access control on terraform enterprise

688
00:23:24,159 --> 00:23:25,760
terraform cloud and all the workspaces

689
00:23:25,760 --> 00:23:27,919
right so this means that we should limit

690
00:23:27,919 --> 00:23:31,200
who has plan apply and view access on

691
00:23:31,200 --> 00:23:33,280
all the workspaces if you are using

692
00:23:33,280 --> 00:23:34,880
version control with that web hook

693
00:23:34,880 --> 00:23:36,640
configured chances are the majority of

694
00:23:36,640 --> 00:23:39,120
people do not need plan apply or view

695
00:23:39,120 --> 00:23:40,559
state they might not even need to view

696
00:23:40,559 --> 00:23:42,799
the the output the only individuals that

697
00:23:42,799 --> 00:23:44,640
are probably need to do that are the

698
00:23:44,640 --> 00:23:45,919
owners or the individuals that are

699
00:23:45,919 --> 00:23:48,960
reviewing code

700
00:23:49,520 --> 00:23:51,120
secondly is probably implementing access

701
00:23:51,120 --> 00:23:52,159
control

702
00:23:52,159 --> 00:23:54,240
on on github on your version control

703
00:23:54,240 --> 00:23:55,679
right so chances are you want an

704
00:23:55,679 --> 00:23:57,360
approval flow you probably do not want

705
00:23:57,360 --> 00:24:00,080
by default everyone at the company being

706
00:24:00,080 --> 00:24:01,039
able to

707
00:24:01,039 --> 00:24:03,520
uh submit these prs this is sort of you

708
00:24:03,520 --> 00:24:05,279
know lease privilege if you will

709
00:24:05,279 --> 00:24:06,640
the third one which is probably the most

710
00:24:06,640 --> 00:24:08,559
technical control here is you you can

711
00:24:08,559 --> 00:24:10,000
disable speculative plans and that's

712
00:24:10,000 --> 00:24:11,600
currently disabled by default you have

713
00:24:11,600 --> 00:24:13,600
to turn it back on but if speculative

714
00:24:13,600 --> 00:24:15,679
plans are disabled uh well then plans

715
00:24:15,679 --> 00:24:18,400
aren't being being pushed and you know

716
00:24:18,400 --> 00:24:21,039
the the avenue for these findings uh is

717
00:24:21,039 --> 00:24:23,840
basically gone

718
00:24:25,440 --> 00:24:27,840
so here's a bit of a all right yeah that

719
00:24:27,840 --> 00:24:30,880
looks pretty good so if we this is the

720
00:24:30,880 --> 00:24:32,960
same workflow that we've shown on the

721
00:24:32,960 --> 00:24:34,640
previous slide but now we're seeing it

722
00:24:34,640 --> 00:24:36,159
in the context of hashicorp's security

723
00:24:36,159 --> 00:24:37,200
model

724
00:24:37,200 --> 00:24:39,039
starting in the top right vcs

725
00:24:39,039 --> 00:24:40,640
contribution is the individual right the

726
00:24:40,640 --> 00:24:42,480
user they may have access to go and

727
00:24:42,480 --> 00:24:44,640
submit a speculative plan which ends up

728
00:24:44,640 --> 00:24:46,960
being able to read sensitive workspace

729
00:24:46,960 --> 00:24:49,039
variables which is kind of in the bottom

730
00:24:49,039 --> 00:24:51,200
left here

731
00:24:51,200 --> 00:24:52,880
okay so what are some of the limitations

732
00:24:52,880 --> 00:24:54,880
to these these remediations these

733
00:24:54,880 --> 00:24:58,000
mitigations that we've just talked about

734
00:24:58,000 --> 00:24:59,360
well

735
00:24:59,360 --> 00:25:01,039
the first one is if you even though you

736
00:25:01,039 --> 00:25:03,279
have all of these access controls on the

737
00:25:03,279 --> 00:25:04,960
given workspace well if you have a

738
00:25:04,960 --> 00:25:06,240
speculative plan that's running it's

739
00:25:06,240 --> 00:25:07,440
going to bypass all of them right

740
00:25:07,440 --> 00:25:08,960
because it has plan access that's what

741
00:25:08,960 --> 00:25:10,720
it's responsible for doing

742
00:25:10,720 --> 00:25:12,320
if you have access control on version on

743
00:25:12,320 --> 00:25:14,559
your version control systems it's very

744
00:25:14,559 --> 00:25:16,480
possible that you've just implemented

745
00:25:16,480 --> 00:25:17,600
some sort of regression to your

746
00:25:17,600 --> 00:25:19,440
developer experience right it's really i

747
00:25:19,440 --> 00:25:21,360
mean when i asked with a show of hands

748
00:25:21,360 --> 00:25:23,520
how many individuals work at companies

749
00:25:23,520 --> 00:25:25,520
that anyone can push pr's the reason for

750
00:25:25,520 --> 00:25:28,000
that is that it's very convenient to do

751
00:25:28,000 --> 00:25:30,640
that so if you remove that convenience

752
00:25:30,640 --> 00:25:32,480
you know you're sort of shifting the way

753
00:25:32,480 --> 00:25:34,320
that many individuals work at the

754
00:25:34,320 --> 00:25:35,840
company and that might lead to some you

755
00:25:35,840 --> 00:25:37,840
know experience problems

756
00:25:37,840 --> 00:25:39,919
uh the most important one though is you

757
00:25:39,919 --> 00:25:41,919
know disabling expected plans because it

758
00:25:41,919 --> 00:25:44,640
removes that web hook it makes it super

759
00:25:44,640 --> 00:25:46,480
difficult to review code you know i'm

760
00:25:46,480 --> 00:25:48,400
not sure about anyone here but for me

761
00:25:48,400 --> 00:25:50,320
when i go and review to terraform pr the

762
00:25:50,320 --> 00:25:52,080
first thing i do is look at the plan

763
00:25:52,080 --> 00:25:54,240
results from that speculative plan to

764
00:25:54,240 --> 00:25:55,679
see like what is changing and what's

765
00:25:55,679 --> 00:25:57,279
happening and when i take a look at that

766
00:25:57,279 --> 00:25:59,039
then i can cross-reference it with the

767
00:25:59,039 --> 00:26:00,720
source code to make sure that those two

768
00:26:00,720 --> 00:26:02,799
things align and then i can go and you

769
00:26:02,799 --> 00:26:03,919
know sort of give the plus one on the

770
00:26:03,919 --> 00:26:05,760
code review so without the terraform the

771
00:26:05,760 --> 00:26:07,520
plan without the speculative plan that

772
00:26:07,520 --> 00:26:09,600
gets super difficult and often times

773
00:26:09,600 --> 00:26:12,799
that might be a non-starter

774
00:26:14,720 --> 00:26:17,200
this is part of the

775
00:26:17,200 --> 00:26:18,799
the security model documentation from

776
00:26:18,799 --> 00:26:20,400
ashley corp one of the things was

777
00:26:20,400 --> 00:26:22,159
basically what is out of scope for their

778
00:26:22,159 --> 00:26:23,600
security model

779
00:26:23,600 --> 00:26:25,120
and we can see the first thing here is

780
00:26:25,120 --> 00:26:26,799
malicious contributions to terraform

781
00:26:26,799 --> 00:26:28,799
configurations and version control right

782
00:26:28,799 --> 00:26:30,960
and that's kind of that's the demo those

783
00:26:30,960 --> 00:26:32,799
are all of our findings so

784
00:26:32,799 --> 00:26:34,159
we can see why

785
00:26:34,159 --> 00:26:36,000
sort of the planning one still exists

786
00:26:36,000 --> 00:26:37,760
even though we have some sort of

787
00:26:37,760 --> 00:26:39,360
mitigations in place there isn't a

788
00:26:39,360 --> 00:26:42,559
surefire remediation

789
00:26:44,960 --> 00:26:47,039
okay finding number two much better

790
00:26:47,039 --> 00:26:49,120
story with finding number two so we

791
00:26:49,120 --> 00:26:50,640
talked a little bit about this atlas

792
00:26:50,640 --> 00:26:53,200
token or the tf run token

793
00:26:53,200 --> 00:26:55,919
and how it was over provisioned well

794
00:26:55,919 --> 00:26:58,640
the most sane thing to do was actually

795
00:26:58,640 --> 00:27:01,039
reduce those permissions by default and

796
00:27:01,039 --> 00:27:02,799
that's exactly what hashicorp did so

797
00:27:02,799 --> 00:27:04,159
they created you know you can see the

798
00:27:04,159 --> 00:27:06,559
announcement link here on the slide but

799
00:27:06,559 --> 00:27:09,120
basically the idea is by default

800
00:27:09,120 --> 00:27:11,520
that token does not have access to all

801
00:27:11,520 --> 00:27:13,520
of the other workspaces within the org

802
00:27:13,520 --> 00:27:15,120
however if you would like to provide

803
00:27:15,120 --> 00:27:17,360
access to specific workspaces back you

804
00:27:17,360 --> 00:27:21,440
can do that inside of the console itself

805
00:27:21,440 --> 00:27:23,200
you can see the workflow here that we've

806
00:27:23,200 --> 00:27:24,799
talked about but with the context of the

807
00:27:24,799 --> 00:27:26,799
security model again starting in the top

808
00:27:26,799 --> 00:27:28,240
right

809
00:27:28,240 --> 00:27:29,200
someone

810
00:27:29,200 --> 00:27:31,039
pushes a pr kicks off the speculative

811
00:27:31,039 --> 00:27:32,720
plan typically that means that the

812
00:27:32,720 --> 00:27:35,200
terraform run token can go and read and

813
00:27:35,200 --> 00:27:37,279
get access to the state file for other

814
00:27:37,279 --> 00:27:39,440
workspaces but with this change that's

815
00:27:39,440 --> 00:27:42,240
no longer possible

816
00:27:42,240 --> 00:27:43,440
and here's a little gif that kind of

817
00:27:43,440 --> 00:27:46,720
shows that functionality in action

818
00:27:46,720 --> 00:27:49,200
so we can see that you can share state

819
00:27:49,200 --> 00:27:50,960
globally which is sort of the known bad

820
00:27:50,960 --> 00:27:53,600
default prior however the default today

821
00:27:53,600 --> 00:27:55,200
is with that off and you can then on a

822
00:27:55,200 --> 00:27:56,559
sort of workspace by workspace

823
00:27:56,559 --> 00:28:00,600
environment add them back in

824
00:28:02,399 --> 00:28:06,000
limitations on finding two um

825
00:28:06,000 --> 00:28:07,760
you know the finding still exists we've

826
00:28:07,760 --> 00:28:10,320
sort of reduced the blast radius here

827
00:28:10,320 --> 00:28:12,000
unless all of your workspaces have this

828
00:28:12,000 --> 00:28:14,080
off by default um you know you're going

829
00:28:14,080 --> 00:28:17,360
to slowly add you know

830
00:28:17,360 --> 00:28:19,039
a threat landing in the threat landscape

831
00:28:19,039 --> 00:28:20,159
a little bit more right one workspace

832
00:28:20,159 --> 00:28:21,679
might be of access to just one instead

833
00:28:21,679 --> 00:28:23,520
of all the other workspaces i think it's

834
00:28:23,520 --> 00:28:25,039
a pretty good mitigation in those types

835
00:28:25,039 --> 00:28:27,440
of scenarios though

836
00:28:27,440 --> 00:28:29,200
we didn't talk too much about cloud

837
00:28:29,200 --> 00:28:31,279
agents um

838
00:28:31,279 --> 00:28:33,440
the cloud agent is basically the agent

839
00:28:33,440 --> 00:28:35,360
that you can put on terraform workers or

840
00:28:35,360 --> 00:28:37,120
on compute to turn them into terraform

841
00:28:37,120 --> 00:28:38,720
workers so this is something that you

842
00:28:38,720 --> 00:28:40,240
might want to do if you wanted to manage

843
00:28:40,240 --> 00:28:41,840
your own terraform workers with

844
00:28:41,840 --> 00:28:44,720
terraform cloud for example

845
00:28:44,720 --> 00:28:46,399
basically the cloud agents have their

846
00:28:46,399 --> 00:28:48,960
own token that can go and fetch

847
00:28:48,960 --> 00:28:51,360
jobs from the queue and when you fetch a

848
00:28:51,360 --> 00:28:52,880
job well you get all the environment

849
00:28:52,880 --> 00:28:54,880
variables that exist in that job and so

850
00:28:54,880 --> 00:28:56,240
that means that you can potentially go

851
00:28:56,240 --> 00:28:58,480
and get access either to the state file

852
00:28:58,480 --> 00:29:00,720
or to any individual workspaces in the

853
00:29:00,720 --> 00:29:02,559
state files of those workspaces

854
00:29:02,559 --> 00:29:05,120
that it has access to

855
00:29:05,120 --> 00:29:06,799
and we can see from hashicorp's threat

856
00:29:06,799 --> 00:29:08,399
model that that's the case right

857
00:29:08,399 --> 00:29:09,919
crossworks based data access via cloud

858
00:29:09,919 --> 00:29:13,480
agents is still possible

859
00:29:15,039 --> 00:29:16,799
okay finding three

860
00:29:16,799 --> 00:29:19,200
i wish that there was a better story for

861
00:29:19,200 --> 00:29:20,880
this um

862
00:29:20,880 --> 00:29:22,799
there aren't very good remediations at

863
00:29:22,799 --> 00:29:25,039
the moment

864
00:29:25,039 --> 00:29:26,960
um that's finding three is pretty

865
00:29:26,960 --> 00:29:28,799
similar to finding one at least in terms

866
00:29:28,799 --> 00:29:29,840
of

867
00:29:29,840 --> 00:29:31,279
um the

868
00:29:31,279 --> 00:29:33,039
access pattern right the the exploit

869
00:29:33,039 --> 00:29:34,320
pattern as well as some other

870
00:29:34,320 --> 00:29:37,039
remediations so we can limit perhaps who

871
00:29:37,039 --> 00:29:39,360
can commit and create prs on the

872
00:29:39,360 --> 00:29:40,960
repository we might be able to prevent

873
00:29:40,960 --> 00:29:42,799
speculative plans but they come with the

874
00:29:42,799 --> 00:29:44,320
same sort of regression and developer

875
00:29:44,320 --> 00:29:45,520
experience that we talked about with

876
00:29:45,520 --> 00:29:47,279
finding one

877
00:29:47,279 --> 00:29:49,279
there is a possibility of system level

878
00:29:49,279 --> 00:29:50,480
enforcement it's not something that

879
00:29:50,480 --> 00:29:52,799
we've looked too much at but if for

880
00:29:52,799 --> 00:29:54,000
example your terraform workers are

881
00:29:54,000 --> 00:29:55,520
running linux you might be able to use

882
00:29:55,520 --> 00:29:57,360
things like app armor se linux things

883
00:29:57,360 --> 00:29:59,520
like this and create profiles to ensure

884
00:29:59,520 --> 00:30:01,039
that all of those

885
00:30:01,039 --> 00:30:03,120
providers the binaries that are running

886
00:30:03,120 --> 00:30:04,720
all of this code they might not be able

887
00:30:04,720 --> 00:30:06,559
to do things or you might have them

888
00:30:06,559 --> 00:30:08,000
configured so that they can't do things

889
00:30:08,000 --> 00:30:10,880
like run arbitrary bash or run python

890
00:30:10,880 --> 00:30:13,919
scripts or things like this

891
00:30:14,880 --> 00:30:16,240
that's worth noting that this is only

892
00:30:16,240 --> 00:30:18,000
going to be possible if you control the

893
00:30:18,000 --> 00:30:19,120
terraform workers if you're using

894
00:30:19,120 --> 00:30:20,559
terraform cloud and they manage the

895
00:30:20,559 --> 00:30:22,240
terraform markers this type of

896
00:30:22,240 --> 00:30:26,399
mitigation is not going to be available

897
00:30:27,039 --> 00:30:28,080
okay

898
00:30:28,080 --> 00:30:29,440
so when we take a look at the security

899
00:30:29,440 --> 00:30:30,720
model

900
00:30:30,720 --> 00:30:33,919
in the pathway there actually isn't

901
00:30:33,919 --> 00:30:36,159
an established route for this when you

902
00:30:36,159 --> 00:30:37,679
take a look at the contribution and it

903
00:30:37,679 --> 00:30:39,200
goes and kicks off a terraform plan

904
00:30:39,200 --> 00:30:40,559
there is no

905
00:30:40,559 --> 00:30:42,799
line if you will to the terraform apply

906
00:30:42,799 --> 00:30:45,760
operation so it's not actually well

907
00:30:45,760 --> 00:30:47,679
established which is probably why there

908
00:30:47,679 --> 00:30:51,840
aren't very good remediations that exist

909
00:30:54,080 --> 00:30:56,080
so like we said there's some limitations

910
00:30:56,080 --> 00:31:00,159
and they apply mostly from finding one

911
00:31:00,159 --> 00:31:01,600
and again you're limiting the blast

912
00:31:01,600 --> 00:31:03,919
radius which is great by limiting access

913
00:31:03,919 --> 00:31:06,080
control and who can submit prs but it

914
00:31:06,080 --> 00:31:08,320
does not actually remove

915
00:31:08,320 --> 00:31:10,559
the finding itself

916
00:31:10,559 --> 00:31:12,159
and we can see malicious contributions

917
00:31:12,159 --> 00:31:13,600
again

918
00:31:13,600 --> 00:31:15,679
but if we think a little bit about it if

919
00:31:15,679 --> 00:31:17,039
we could sort of

920
00:31:17,039 --> 00:31:18,480
be in

921
00:31:18,480 --> 00:31:20,880
the hashicorp engine engineer's shoes or

922
00:31:20,880 --> 00:31:22,399
if we could you know snap our fingers

923
00:31:22,399 --> 00:31:24,240
and provide any functionality what what

924
00:31:24,240 --> 00:31:26,720
could we think of for proper remediation

925
00:31:26,720 --> 00:31:28,399
for this finding

926
00:31:28,399 --> 00:31:29,840
and so this was sort of something that

927
00:31:29,840 --> 00:31:30,840
we came up

928
00:31:30,840 --> 00:31:33,120
with and i think that we see this

929
00:31:33,120 --> 00:31:34,240
pattern

930
00:31:34,240 --> 00:31:36,080
in the open source productionized

931
00:31:36,080 --> 00:31:37,600
versions where people have sort of full

932
00:31:37,600 --> 00:31:39,200
control if they're not responsible for

933
00:31:39,200 --> 00:31:40,399
or if they're not using terraform

934
00:31:40,399 --> 00:31:41,840
enterprise or terraform cloud but

935
00:31:41,840 --> 00:31:43,679
organizations are instead using open

936
00:31:43,679 --> 00:31:45,200
source version of terraform and they've

937
00:31:45,200 --> 00:31:46,399
got the flexibility

938
00:31:46,399 --> 00:31:47,679
i think we start seeing some of these

939
00:31:47,679 --> 00:31:49,919
things so when we go and take a look at

940
00:31:49,919 --> 00:31:51,840
how the web hook triggers a plan and

941
00:31:51,840 --> 00:31:54,000
step number two the terraform plan

942
00:31:54,000 --> 00:31:55,519
should have its own dedicated

943
00:31:55,519 --> 00:31:57,039
permissions right only read-only

944
00:31:57,039 --> 00:31:59,039
permissions for terraform plans

945
00:31:59,039 --> 00:32:00,559
furthermore it has dedicated

946
00:32:00,559 --> 00:32:03,679
infrastructure only plans run on this

947
00:32:03,679 --> 00:32:05,840
set of terraform workers today you have

948
00:32:05,840 --> 00:32:07,279
sort of a set of nodes a bunch of

949
00:32:07,279 --> 00:32:09,519
terraform workers that exist both plans

950
00:32:09,519 --> 00:32:11,440
and applies will run on those sets of

951
00:32:11,440 --> 00:32:13,360
terraform workers so in our sort of

952
00:32:13,360 --> 00:32:15,919
proposed model we have dedicated

953
00:32:15,919 --> 00:32:18,080
permissions as well as dedicated

954
00:32:18,080 --> 00:32:20,240
infrastructure right back to the basics

955
00:32:20,240 --> 00:32:23,519
separation of duties and least privilege

956
00:32:23,519 --> 00:32:25,919
that way if we try to attempt to perform

957
00:32:25,919 --> 00:32:28,240
any of our findings

958
00:32:28,240 --> 00:32:29,919
well yes you can still perhaps you do

959
00:32:29,919 --> 00:32:31,679
read based actions

960
00:32:31,679 --> 00:32:33,360
but any sort of right-based actions that

961
00:32:33,360 --> 00:32:34,640
might happen to be

962
00:32:34,640 --> 00:32:36,559
attempted to be performed to the plans

963
00:32:36,559 --> 00:32:38,080
well they're no longer possible because

964
00:32:38,080 --> 00:32:40,799
the permissions just don't exist there

965
00:32:40,799 --> 00:32:43,039
and that way um finally when you get to

966
00:32:43,039 --> 00:32:44,480
the terraform apply step well then you

967
00:32:44,480 --> 00:32:45,679
have a completely different role or

968
00:32:45,679 --> 00:32:47,039
different set of permissions that has

969
00:32:47,039 --> 00:32:48,559
read write and it's capable of

970
00:32:48,559 --> 00:32:50,399
performing you know read and write based

971
00:32:50,399 --> 00:32:52,000
actions

972
00:32:52,000 --> 00:32:53,840
the one thing that i will say here that

973
00:32:53,840 --> 00:32:56,720
isn't kind of listed is if you have the

974
00:32:56,720 --> 00:32:58,080
ability

975
00:32:58,080 --> 00:32:59,600
um

976
00:32:59,600 --> 00:33:01,360
again maybe through this sort of open

977
00:33:01,360 --> 00:33:04,080
source version that we see i

978
00:33:04,080 --> 00:33:06,240
you might be able to

979
00:33:06,240 --> 00:33:08,960
put access control or policy enforcement

980
00:33:08,960 --> 00:33:10,480
kind of before the plan step and that

981
00:33:10,480 --> 00:33:12,080
would be my sort of my suggestion as

982
00:33:12,080 --> 00:33:13,919
well uh you know

983
00:33:13,919 --> 00:33:15,919
to say hashicorp or anyone who has the

984
00:33:15,919 --> 00:33:18,240
capability of doing so is let's consider

985
00:33:18,240 --> 00:33:19,919
these

986
00:33:19,919 --> 00:33:21,039
secrets

987
00:33:21,039 --> 00:33:22,240
how great would it be if we could just

988
00:33:22,240 --> 00:33:23,120
move

989
00:33:23,120 --> 00:33:25,039
those

990
00:33:25,039 --> 00:33:27,039
they actually run pre-run or plea pla

991
00:33:27,039 --> 00:33:29,679
pre-plan and not after plan right and

992
00:33:29,679 --> 00:33:31,679
now we might actually have uh an

993
00:33:31,679 --> 00:33:34,159
opportunity to catch sort of these types

994
00:33:34,159 --> 00:33:35,840
of malicious code and things that we're

995
00:33:35,840 --> 00:33:38,159
running during these speculative plans

996
00:33:38,159 --> 00:33:40,720
and in our prs

997
00:33:40,720 --> 00:33:43,840
okay some conclusions

998
00:33:44,399 --> 00:33:45,200
um

999
00:33:45,200 --> 00:33:46,559
if there's anything that you take away

1000
00:33:46,559 --> 00:33:47,679
from this hopefully it's these three

1001
00:33:47,679 --> 00:33:49,600
things one all of these findings are

1002
00:33:49,600 --> 00:33:51,760
still exploitable today

1003
00:33:51,760 --> 00:33:53,360
so be sure to go through the

1004
00:33:53,360 --> 00:33:55,440
remediations that we've talked about if

1005
00:33:55,440 --> 00:33:57,200
you're practitioners or users of

1006
00:33:57,200 --> 00:33:59,919
terraform enterprise or terraform cloud

1007
00:33:59,919 --> 00:34:01,519
bullet number two

1008
00:34:01,519 --> 00:34:02,799
we should really have separation of

1009
00:34:02,799 --> 00:34:03,679
duties

1010
00:34:03,679 --> 00:34:04,880
and applies with these enterprise

1011
00:34:04,880 --> 00:34:07,200
products and i hope that they come soon

1012
00:34:07,200 --> 00:34:08,079
um

1013
00:34:08,079 --> 00:34:09,119
you know we should make sure that we

1014
00:34:09,119 --> 00:34:10,800
have those separation of duties and

1015
00:34:10,800 --> 00:34:12,000
least privilege

1016
00:34:12,000 --> 00:34:14,320
and number three

1017
00:34:14,320 --> 00:34:15,839
secure architecture and the threat model

1018
00:34:15,839 --> 00:34:17,440
documentation that hashicorp put out

1019
00:34:17,440 --> 00:34:18,960
right i think it's super important for

1020
00:34:18,960 --> 00:34:20,639
practitioners to understand what the

1021
00:34:20,639 --> 00:34:23,520
strengths and weaknesses are inside you

1022
00:34:23,520 --> 00:34:24,719
know of the products that you're using

1023
00:34:24,719 --> 00:34:26,159
and i think that'll be super helpful to

1024
00:34:26,159 --> 00:34:28,159
take a look at

1025
00:34:28,159 --> 00:34:30,239
okay last but not least we didn't talk

1026
00:34:30,239 --> 00:34:32,079
too much about the how here we saw some

1027
00:34:32,079 --> 00:34:34,480
demos and we saw some workflows

1028
00:34:34,480 --> 00:34:36,639
we just didn't really have time so

1029
00:34:36,639 --> 00:34:38,399
if you're interested we've automated all

1030
00:34:38,399 --> 00:34:40,159
three of our findings

1031
00:34:40,159 --> 00:34:41,520
it supports

1032
00:34:41,520 --> 00:34:43,199
two entry models whether you've got a

1033
00:34:43,199 --> 00:34:45,918
repository that's associated with

1034
00:34:45,918 --> 00:34:47,520
your terraform workspaces or if you have

1035
00:34:47,520 --> 00:34:49,199
access to make requests and plans

1036
00:34:49,199 --> 00:34:50,480
directly against terraform with a

1037
00:34:50,480 --> 00:34:52,800
terraform client

1038
00:34:52,800 --> 00:34:54,079
you can go and take a look at the link

1039
00:34:54,079 --> 00:34:55,280
here

1040
00:34:55,280 --> 00:34:56,800
examples and usages are all on the

1041
00:34:56,800 --> 00:34:58,720
readme but you can go and download that

1042
00:34:58,720 --> 00:35:02,640
and use the automation for yourself

1043
00:35:02,640 --> 00:35:04,000
and that's it

1044
00:35:04,000 --> 00:35:07,280
thank you very much for attending

1045
00:35:13,119 --> 00:35:14,720
any questions

1046
00:35:14,720 --> 00:35:16,320
excellent

1047
00:35:16,320 --> 00:35:18,560
good stuff here man i really appreciate

1048
00:35:18,560 --> 00:35:21,040
your work

1049
00:35:21,200 --> 00:35:22,960
hi um should we take this as a

1050
00:35:22,960 --> 00:35:25,839
cautionary tale uh against having

1051
00:35:25,839 --> 00:35:27,200
um

1052
00:35:27,200 --> 00:35:29,280
you know companies like terraform with

1053
00:35:29,280 --> 00:35:31,839
their commercial products

1054
00:35:31,839 --> 00:35:34,000
do this for us i mean i i thought that

1055
00:35:34,000 --> 00:35:35,200
was a very interesting point you're

1056
00:35:35,200 --> 00:35:37,599
seeing people who were working in open

1057
00:35:37,599 --> 00:35:39,119
source they may have some limited

1058
00:35:39,119 --> 00:35:41,200
features compared to that commercial

1059
00:35:41,200 --> 00:35:43,119
offering or more work to do

1060
00:35:43,119 --> 00:35:45,680
but as a does this should this cast into

1061
00:35:45,680 --> 00:35:48,079
doubt just the whole idea of

1062
00:35:48,079 --> 00:35:50,400
infrastructure as code being uh

1063
00:35:50,400 --> 00:35:52,800
outsourced to a for-profit enterprise

1064
00:35:52,800 --> 00:35:54,800
like this oh i don't know

1065
00:35:54,800 --> 00:35:56,320
well i mean when do you think they might

1066
00:35:56,320 --> 00:35:59,680
fix this well um i don't know the answer

1067
00:35:59,680 --> 00:36:01,599
to the last question but i will say that

1068
00:36:01,599 --> 00:36:03,680
there's a constant

1069
00:36:03,680 --> 00:36:06,160
build verse buy

1070
00:36:06,160 --> 00:36:07,920
challenge that all of our organizations

1071
00:36:07,920 --> 00:36:09,680
face if you have an infinite number of

1072
00:36:09,680 --> 00:36:11,599
resources in an infinite amount of time

1073
00:36:11,599 --> 00:36:13,200
maybe you can go and build this open

1074
00:36:13,200 --> 00:36:14,480
source version and maybe you can go and

1075
00:36:14,480 --> 00:36:16,079
solve all these problems

1076
00:36:16,079 --> 00:36:18,480
but lots of organizations don't

1077
00:36:18,480 --> 00:36:20,560
necessarily have that opportunity and i

1078
00:36:20,560 --> 00:36:23,680
think this provides a lot um you know if

1079
00:36:23,680 --> 00:36:25,520
if the alternative is that all of your

1080
00:36:25,520 --> 00:36:27,599
endpoints for all of your developers or

1081
00:36:27,599 --> 00:36:30,000
engineers have aws creds in the prod i

1082
00:36:30,000 --> 00:36:31,440
think that this is probably the better

1083
00:36:31,440 --> 00:36:32,640
approach

1084
00:36:32,640 --> 00:36:35,680
that would be my thought there

1085
00:36:38,000 --> 00:36:39,760
any other questions

1086
00:36:39,760 --> 00:36:41,680
went over here all right

1087
00:36:41,680 --> 00:36:43,520
hey mike uh quick question i know it's

1088
00:36:43,520 --> 00:36:45,680
your first two examples used null

1089
00:36:45,680 --> 00:36:47,760
resources in terraform i couldn't tell

1090
00:36:47,760 --> 00:36:49,920
if the third third example did it did it

1091
00:36:49,920 --> 00:36:51,680
did okay great so i was assuming we

1092
00:36:51,680 --> 00:36:53,359
could also mitigate this by limiting the

1093
00:36:53,359 --> 00:36:55,119
use of null resources in terraform did

1094
00:36:55,119 --> 00:36:57,200
you like exporting ways of doing that

1095
00:36:57,200 --> 00:37:00,560
well on terraform enterprise or cloud i

1096
00:37:00,560 --> 00:37:02,000
i don't think that it will solve the

1097
00:37:02,000 --> 00:37:04,400
problem because the no resource was just

1098
00:37:04,400 --> 00:37:05,520
the one that we ended up using because

1099
00:37:05,520 --> 00:37:07,200
it was the most convenient but there are

1100
00:37:07,200 --> 00:37:08,960
a lot of different providers that can do

1101
00:37:08,960 --> 00:37:10,880
the exact same thing you've got remote

1102
00:37:10,880 --> 00:37:13,200
provisioners you which actually

1103
00:37:13,200 --> 00:37:16,000
work on apply but you also have

1104
00:37:16,000 --> 00:37:18,000
http providers there are remote

1105
00:37:18,000 --> 00:37:20,560
providers from remote marketplaces

1106
00:37:20,560 --> 00:37:22,720
so while i do think that trying to take

1107
00:37:22,720 --> 00:37:24,400
a look at

1108
00:37:24,400 --> 00:37:26,640
specific providers and not allowing them

1109
00:37:26,640 --> 00:37:29,839
to to run that might be helpful um

1110
00:37:29,839 --> 00:37:31,040
again though a lot of the policy

1111
00:37:31,040 --> 00:37:33,119
enforcement that well anyway yes i think

1112
00:37:33,119 --> 00:37:35,440
that that's a uh avenue of invest you

1113
00:37:35,440 --> 00:37:37,760
know research and investment but a lot

1114
00:37:37,760 --> 00:37:39,200
of times that might not be feasible if

1115
00:37:39,200 --> 00:37:41,359
you can get rid of everything that might

1116
00:37:41,359 --> 00:37:43,200
be able to work i will say one last

1117
00:37:43,200 --> 00:37:45,200
comment is we were able to exfiltrate

1118
00:37:45,200 --> 00:37:47,040
all the environment variables um just

1119
00:37:47,040 --> 00:37:48,800
using the aws provider right we could

1120
00:37:48,800 --> 00:37:51,440
actually set the name of a resource to

1121
00:37:51,440 --> 00:37:53,680
the value of a secret and it would just

1122
00:37:53,680 --> 00:37:56,320
show up in the terraform plan results so

1123
00:37:56,320 --> 00:37:58,320
um i think it would be a slippery slope

1124
00:37:58,320 --> 00:37:59,520
i don't think it'll solve the problem i

1125
00:37:59,520 --> 00:38:01,040
guess is what i'm trying to say i think

1126
00:38:01,040 --> 00:38:02,720
they'll find other avenues to do the

1127
00:38:02,720 --> 00:38:05,839
same thing

1128
00:38:06,240 --> 00:38:08,720
okay we got another question

1129
00:38:08,720 --> 00:38:11,920
um hi uh thank you great talk um i was

1130
00:38:11,920 --> 00:38:14,320
wondering if there is a way to use other

1131
00:38:14,320 --> 00:38:16,640
tools like static code analysis tools

1132
00:38:16,640 --> 00:38:18,960
kind of like checkup or some grab to

1133
00:38:18,960 --> 00:38:20,880
develop uh

1134
00:38:20,880 --> 00:38:24,320
detections prior to running the webhook

1135
00:38:24,320 --> 00:38:26,320
as early as the steps to the pipeline

1136
00:38:26,320 --> 00:38:28,160
use some other tooling yeah possibly

1137
00:38:28,160 --> 00:38:29,920
right so chekov is pretty cool because

1138
00:38:29,920 --> 00:38:31,760
it does provide sort of this sanitary

1139
00:38:31,760 --> 00:38:34,079
you know in like even even on a

1140
00:38:34,079 --> 00:38:35,520
developer endpoint right it could

1141
00:38:35,520 --> 00:38:38,400
provide some sort of uh feedback um it's

1142
00:38:38,400 --> 00:38:40,079
not something that i've investigated too

1143
00:38:40,079 --> 00:38:41,040
much

1144
00:38:41,040 --> 00:38:43,280
and i don't know what the extensibility

1145
00:38:43,280 --> 00:38:46,720
of those types of tools are um if i mean

1146
00:38:46,720 --> 00:38:48,400
i'm sure clint might be here if you know

1147
00:38:48,400 --> 00:38:50,320
if he's a some grep expert so that might

1148
00:38:50,320 --> 00:38:52,560
be something uh worth talking to to

1149
00:38:52,560 --> 00:38:53,920
anyone who knows a little bit more about

1150
00:38:53,920 --> 00:38:56,079
that

1151
00:38:56,880 --> 00:38:58,560
excellent question all right we got

1152
00:38:58,560 --> 00:39:00,560
another one

1153
00:39:00,560 --> 00:39:01,839
uh thank you for your talk it's

1154
00:39:01,839 --> 00:39:03,520
extremely illuminating i'm sort of

1155
00:39:03,520 --> 00:39:04,880
already in a thought process about how

1156
00:39:04,880 --> 00:39:06,240
to control some of this stuff and we're

1157
00:39:06,240 --> 00:39:08,400
considering taking on uh resource

1158
00:39:08,400 --> 00:39:10,800
whitelisting or allow listing to attempt

1159
00:39:10,800 --> 00:39:12,000
to mitigate some of this and i'm

1160
00:39:12,000 --> 00:39:14,560
wondering i heard your about the

1161
00:39:14,560 --> 00:39:16,000
information leaking but at the very

1162
00:39:16,000 --> 00:39:17,359
least do you think that would be an

1163
00:39:17,359 --> 00:39:18,880
effective control against the arbitrary

1164
00:39:18,880 --> 00:39:21,599
script uh execution stuff

1165
00:39:21,599 --> 00:39:22,960
maybe i guess it depends on how you're

1166
00:39:22,960 --> 00:39:25,200
doing white listing i've read um article

1167
00:39:25,200 --> 00:39:26,560
like uh

1168
00:39:26,560 --> 00:39:28,160
vendor

1169
00:39:28,160 --> 00:39:29,680
sort of uh

1170
00:39:29,680 --> 00:39:30,880
customer

1171
00:39:30,880 --> 00:39:33,040
like articles that are in unison with

1172
00:39:33,040 --> 00:39:34,320
hashicorp that try to use sentinel

1173
00:39:34,320 --> 00:39:35,680
policies to try to do these types of

1174
00:39:35,680 --> 00:39:37,359
things um

1175
00:39:37,359 --> 00:39:39,040
the problem i guess that i was i

1176
00:39:39,040 --> 00:39:40,560
mentioned right is it happens a little

1177
00:39:40,560 --> 00:39:43,040
too late so potentially you could do

1178
00:39:43,040 --> 00:39:44,560
white listing it just depends on where

1179
00:39:44,560 --> 00:39:46,079
in your sort of supply chain you've put

1180
00:39:46,079 --> 00:39:46,800
that

1181
00:39:46,800 --> 00:39:48,560
if it's prior to your speculative plans

1182
00:39:48,560 --> 00:39:50,960
then that might work you know if it's a

1183
00:39:50,960 --> 00:39:52,480
if it's a web hook

1184
00:39:52,480 --> 00:39:55,040
that kicks off that prior to you know

1185
00:39:55,040 --> 00:39:56,720
your terraform plan web hook or you know

1186
00:39:56,720 --> 00:39:58,720
it's required to run before your tow

1187
00:39:58,720 --> 00:40:00,160
from plan web hook maybe that's

1188
00:40:00,160 --> 00:40:03,279
something that that could work yeah

1189
00:40:03,839 --> 00:40:07,040
okay other questions here

1190
00:40:07,040 --> 00:40:09,520
all right um oh good

1191
00:40:09,520 --> 00:40:12,160
fantastic

1192
00:40:14,480 --> 00:40:16,560
you might great presentation um just

1193
00:40:16,560 --> 00:40:17,760
quick question like what would you say

1194
00:40:17,760 --> 00:40:19,599
is some or i guess kind of like low

1195
00:40:19,599 --> 00:40:21,440
effort quick wins that you'd put into

1196
00:40:21,440 --> 00:40:22,960
place just based off of everything right

1197
00:40:22,960 --> 00:40:24,319
there was a kind of like a lot of

1198
00:40:24,319 --> 00:40:26,240
mitigations that could be used but would

1199
00:40:26,240 --> 00:40:27,520
be some quick things that you could do

1200
00:40:27,520 --> 00:40:30,000
easily to prevent some of these i would

1201
00:40:30,000 --> 00:40:32,400
i would say that um they're probably all

1202
00:40:32,400 --> 00:40:34,640
of the suggested remediation points that

1203
00:40:34,640 --> 00:40:37,599
i was suggesting right so it depends

1204
00:40:37,599 --> 00:40:40,160
on each organization's environment um

1205
00:40:40,160 --> 00:40:42,480
you know if you're using open source and

1206
00:40:42,480 --> 00:40:44,079
you've got all your credentials locally

1207
00:40:44,079 --> 00:40:46,000
move to maybe an enterprise version or

1208
00:40:46,000 --> 00:40:47,599
productionize it

1209
00:40:47,599 --> 00:40:50,079
if all of your engineers are have access

1210
00:40:50,079 --> 00:40:51,440
to the credentials in terraform let's

1211
00:40:51,440 --> 00:40:53,839
remove those and perhaps use version

1212
00:40:53,839 --> 00:40:55,599
control if you have the capability of

1213
00:40:55,599 --> 00:40:57,280
putting like pre-configuration checks

1214
00:40:57,280 --> 00:40:58,800
prior to your plans that's probably a

1215
00:40:58,800 --> 00:41:00,480
little bit more effort but all the

1216
00:41:00,480 --> 00:41:03,680
access control for vcs and for um

1217
00:41:03,680 --> 00:41:05,280
for these providers i think is super

1218
00:41:05,280 --> 00:41:08,400
important starting point

1219
00:41:09,920 --> 00:41:12,960
okay cool other questions

1220
00:41:12,960 --> 00:41:14,480
all right um

1221
00:41:14,480 --> 00:41:15,920
i guess one last point for anyone sure

1222
00:41:15,920 --> 00:41:18,560
who wants the slides um i think i can

1223
00:41:18,560 --> 00:41:20,720
upload them to the b-side site or um

1224
00:41:20,720 --> 00:41:24,640
i'll i'll put them on my twitter as well

1225
00:41:24,640 --> 00:41:26,400
and uh is this

1226
00:41:26,400 --> 00:41:28,720
part of the show here

1227
00:41:28,720 --> 00:41:31,359
up on the board

1228
00:41:32,079 --> 00:41:33,440
what is that

1229
00:41:33,440 --> 00:41:34,880
oh i mean i've been doing this whole

1230
00:41:34,880 --> 00:41:37,359
conference just to summarize it

1231
00:41:37,359 --> 00:41:38,160
oh

1232
00:41:38,160 --> 00:41:39,839
it's pretty cool

1233
00:41:39,839 --> 00:41:41,760
i'm super pumped by it i love that we

1234
00:41:41,760 --> 00:41:43,119
have one here

1235
00:41:43,119 --> 00:41:44,720
excellent work

1236
00:41:44,720 --> 00:41:46,560
i'd like to think that i probably don't

1237
00:41:46,560 --> 00:41:49,440
should get a screenshot

1238
00:41:55,200 --> 00:41:57,040
okay well i can tell you i've learned a

1239
00:41:57,040 --> 00:41:59,119
lot from this i mean i've

1240
00:41:59,119 --> 00:42:01,760
packed it before but a different way

1241
00:42:01,760 --> 00:42:03,680
and but now you just like really took a

1242
00:42:03,680 --> 00:42:05,599
deep dive on me are there any other

1243
00:42:05,599 --> 00:42:09,119
websites uh of hacking

1244
00:42:09,119 --> 00:42:11,280
uh terraform

1245
00:42:11,280 --> 00:42:12,960
that you know of oh yeah i've seen

1246
00:42:12,960 --> 00:42:15,119
plenty so we started in this research in

1247
00:42:15,119 --> 00:42:17,119
2020 so it's been a couple years with

1248
00:42:17,119 --> 00:42:18,319
covid and all that stuff we haven't had

1249
00:42:18,319 --> 00:42:20,319
a chance to present it but in that time

1250
00:42:20,319 --> 00:42:22,960
you know similar i've seen similar uh

1251
00:42:22,960 --> 00:42:24,560
blogs and things like this have come out

1252
00:42:24,560 --> 00:42:26,640
so yeah i um i don't know the links off

1253
00:42:26,640 --> 00:42:27,839
the top my head but they they're out

1254
00:42:27,839 --> 00:42:30,160
there so it's uh great for red team

1255
00:42:30,160 --> 00:42:33,359
exercise pipeline poisoning right sure

1256
00:42:33,359 --> 00:42:34,400
okay

1257
00:42:34,400 --> 00:42:35,520
um

1258
00:42:35,520 --> 00:42:38,319
last chance for questions

1259
00:42:38,319 --> 00:42:41,040
okay well please give it up for mike

1260
00:42:41,040 --> 00:42:42,000
ruth

1261
00:42:42,000 --> 00:42:44,240
in conclusion of this sorry francisco

1262
00:42:44,240 --> 00:42:46,720
akka couldn't make it but

1263
00:42:46,720 --> 00:42:48,000
thank you and y'all have been a

1264
00:42:48,000 --> 00:42:52,440
wonderful audience as well so

