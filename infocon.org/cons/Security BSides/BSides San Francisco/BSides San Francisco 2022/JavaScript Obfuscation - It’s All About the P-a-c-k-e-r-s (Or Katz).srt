1
00:00:00,160 --> 00:00:01,680
okay bingo hey

2
00:00:01,680 --> 00:00:04,560
uh this is the last talk i believe of

3
00:00:04,560 --> 00:00:06,319
the day yeah

4
00:00:06,319 --> 00:00:08,400
mr or katz

5
00:00:08,400 --> 00:00:10,719
uh has a tremendous uh security

6
00:00:10,719 --> 00:00:12,320
background to him

7
00:00:12,320 --> 00:00:14,240
and uh well i'll let you

8
00:00:14,240 --> 00:00:16,000
talk about yourself there and i want to

9
00:00:16,000 --> 00:00:17,520
know what you got going on with

10
00:00:17,520 --> 00:00:20,720
javascript up fusion sure thing thank

11
00:00:20,720 --> 00:00:23,600
you very much hi everybody um

12
00:00:23,600 --> 00:00:26,880
so i'm very excited being here today uh

13
00:00:26,880 --> 00:00:30,320
it's been over two years since i last

14
00:00:30,320 --> 00:00:32,880
was doing uh in-person

15
00:00:32,880 --> 00:00:35,200
presentation and the last one that i was

16
00:00:35,200 --> 00:00:38,320
doing was besides san francisco 2020 so

17
00:00:38,320 --> 00:00:39,920
it's uh

18
00:00:39,920 --> 00:00:41,920
closing a circle in that sense

19
00:00:41,920 --> 00:00:43,680
and i'm here today to talk to you about

20
00:00:43,680 --> 00:00:45,600
uh javascript foscation it's all about

21
00:00:45,600 --> 00:00:47,440
the packers right and i wrote packers

22
00:00:47,440 --> 00:00:49,120
with dashes and we will go into that

23
00:00:49,120 --> 00:00:51,600
later but remember that

24
00:00:51,600 --> 00:00:53,280
so let's start the beginning we'll show

25
00:00:53,280 --> 00:00:56,559
do a short introduction for myself um

26
00:00:56,559 --> 00:00:59,280
former former osp israel chapter lead

27
00:00:59,280 --> 00:01:01,520
really enjoyed doing that i'm data

28
00:01:01,520 --> 00:01:03,760
driven security researcher which means i

29
00:01:03,760 --> 00:01:06,479
work with a lot of data and data

30
00:01:06,479 --> 00:01:08,320
is something that i'm using using on a

31
00:01:08,320 --> 00:01:09,920
daily basis to create a lot of my

32
00:01:09,920 --> 00:01:11,520
research

33
00:01:11,520 --> 00:01:13,280
and we will see some examples for that

34
00:01:13,280 --> 00:01:15,119
here today

35
00:01:15,119 --> 00:01:16,960
when i try to define my role i'm saying

36
00:01:16,960 --> 00:01:18,240
that i'm trying to move security

37
00:01:18,240 --> 00:01:19,920
challenges into the science and solution

38
00:01:19,920 --> 00:01:22,240
space and hopefully we'll see that here

39
00:01:22,240 --> 00:01:24,720
today as well and i have a very boring

40
00:01:24,720 --> 00:01:26,479
social network persona therefore i

41
00:01:26,479 --> 00:01:28,799
encourage you not to follow me in any

42
00:01:28,799 --> 00:01:31,280
given way in twitter or in any other

43
00:01:31,280 --> 00:01:34,560
platform don't do that right boring

44
00:01:34,560 --> 00:01:37,520
okay let's continue uh how did i end up

45
00:01:37,520 --> 00:01:41,040
up here today so over 18 months ago i

46
00:01:41,040 --> 00:01:43,200
was doing some research about javascript

47
00:01:43,200 --> 00:01:45,439
foundation and in that research i

48
00:01:45,439 --> 00:01:47,040
released three different blogs the first

49
00:01:47,040 --> 00:01:49,759
one was um in the first one i was trying

50
00:01:49,759 --> 00:01:51,040
to

51
00:01:51,040 --> 00:01:54,320
actually do a dictionary-based kind of

52
00:01:54,320 --> 00:01:56,399
techniques being used to do obfuscation

53
00:01:56,399 --> 00:01:58,159
that was the first blog the second blog

54
00:01:58,159 --> 00:01:59,759
took some of

55
00:01:59,759 --> 00:02:02,079
um phishing data that i had a really

56
00:02:02,079 --> 00:02:04,079
good one and i was looking into that and

57
00:02:04,079 --> 00:02:06,399
i had the ability to say in the context

58
00:02:06,399 --> 00:02:08,318
of trends how many of those phishing

59
00:02:08,318 --> 00:02:11,120
websites are being uh well

60
00:02:11,120 --> 00:02:12,640
javascript foundation is being used on

61
00:02:12,640 --> 00:02:14,560
those phishing website and the third one

62
00:02:14,560 --> 00:02:17,520
i took one sample of javascript being

63
00:02:17,520 --> 00:02:20,319
obfuscated the very s well relatively

64
00:02:20,319 --> 00:02:22,720
small example because they could be huge

65
00:02:22,720 --> 00:02:24,400
i needed to do some snapshots for that

66
00:02:24,400 --> 00:02:27,120
and this is the snapshot of that given

67
00:02:27,120 --> 00:02:28,959
sample that i did reversing for that

68
00:02:28,959 --> 00:02:32,400
sample going step by step uh breaking up

69
00:02:32,400 --> 00:02:34,480
that to smaller pieces to try to better

70
00:02:34,480 --> 00:02:36,879
understand better explain what happened

71
00:02:36,879 --> 00:02:39,040
when something is being obfuscated and

72
00:02:39,040 --> 00:02:41,280
while i was doing that i started to ask

73
00:02:41,280 --> 00:02:43,200
myself the question well that's a nice

74
00:02:43,200 --> 00:02:45,360
thing it took me a couple of hours at

75
00:02:45,360 --> 00:02:47,680
the time but i don't have the capacity

76
00:02:47,680 --> 00:02:50,560
to doing that and the amount and volume

77
00:02:50,560 --> 00:02:52,080
of

78
00:02:52,080 --> 00:02:54,080
samples of javascript being obfuscated

79
00:02:54,080 --> 00:02:55,680
in the while that i'm seeing is way too

80
00:02:55,680 --> 00:02:57,440
much for me to analyze

81
00:02:57,440 --> 00:02:59,360
so i asked myself maybe i can do some

82
00:02:59,360 --> 00:03:01,760
sort of a research project around that

83
00:03:01,760 --> 00:03:03,440
and i had few objectives for that

84
00:03:03,440 --> 00:03:05,519
research research project the first

85
00:03:05,519 --> 00:03:07,680
objective was to try to figure out if i

86
00:03:07,680 --> 00:03:10,480
can find a technique that can enable me

87
00:03:10,480 --> 00:03:11,599
to detect

88
00:03:11,599 --> 00:03:14,560
javascript once being obfuscated

89
00:03:14,560 --> 00:03:16,480
but more to that it would be nice if i

90
00:03:16,480 --> 00:03:18,400
could say that the obfuscated javascript

91
00:03:18,400 --> 00:03:19,760
is actually malicious so that's the

92
00:03:19,760 --> 00:03:22,080
first objective the second objective was

93
00:03:22,080 --> 00:03:24,159
well i need to do that at scale it's not

94
00:03:24,159 --> 00:03:27,040
a matter of one or two or ten or twenty

95
00:03:27,040 --> 00:03:29,920
i need to do hundred or even thousand in

96
00:03:29,920 --> 00:03:33,040
a given time frame the third objective

97
00:03:33,040 --> 00:03:34,480
which is actually related to the second

98
00:03:34,480 --> 00:03:37,040
one is me saying okay so

99
00:03:37,040 --> 00:03:39,680
i wanna analyze those files

100
00:03:39,680 --> 00:03:41,920
but i have some limitations right when

101
00:03:41,920 --> 00:03:43,599
it comes to javascript you can take the

102
00:03:43,599 --> 00:03:45,200
file the javascript itself you can

103
00:03:45,200 --> 00:03:46,959
render it and see what actually being

104
00:03:46,959 --> 00:03:49,040
executed but that's something that i

105
00:03:49,040 --> 00:03:50,400
didn't want to do

106
00:03:50,400 --> 00:03:52,000
from my point of view i need to look

107
00:03:52,000 --> 00:03:53,599
into a file as the file being

108
00:03:53,599 --> 00:03:55,280
transferred from the server to the

109
00:03:55,280 --> 00:03:57,439
client being executed there look at the

110
00:03:57,439 --> 00:03:59,120
file before being executed and make

111
00:03:59,120 --> 00:04:00,799
decision based on that and that's

112
00:04:00,799 --> 00:04:02,640
actually a statical analysis kind of

113
00:04:02,640 --> 00:04:04,480
approach which has better performance

114
00:04:04,480 --> 00:04:07,200
when it comes to analyzing those files

115
00:04:07,200 --> 00:04:08,640
because obviously when you need to

116
00:04:08,640 --> 00:04:11,280
render a page and look on the execution

117
00:04:11,280 --> 00:04:13,200
of the page that obviously had

118
00:04:13,200 --> 00:04:15,040
performance impact and that could take

119
00:04:15,040 --> 00:04:16,639
some time

120
00:04:16,639 --> 00:04:18,560
now the first objective that i have is

121
00:04:18,560 --> 00:04:20,880
assuming the pareto principle which says

122
00:04:20,880 --> 00:04:22,320
the following thing

123
00:04:22,320 --> 00:04:25,280
well if i will take 20 of the most used

124
00:04:25,280 --> 00:04:27,040
javascript packer javascript packer is

125
00:04:27,040 --> 00:04:29,040
actually software that doing

126
00:04:29,040 --> 00:04:29,840
a

127
00:04:29,840 --> 00:04:32,479
obfuscation of a given javascript file

128
00:04:32,479 --> 00:04:34,720
and i will look into them i will be able

129
00:04:34,720 --> 00:04:37,280
to see that 80 of the samples out there

130
00:04:37,280 --> 00:04:39,520
are being used by those 20

131
00:04:39,520 --> 00:04:41,040
so in other words i'm not trying to

132
00:04:41,040 --> 00:04:43,919
solve the entire spectrum of problem of

133
00:04:43,919 --> 00:04:46,479
javascript escalation i'm trying to do a

134
00:04:46,479 --> 00:04:48,800
well minimal effort and solve as much as

135
00:04:48,800 --> 00:04:50,720
possible in the space of the problem

136
00:04:50,720 --> 00:04:53,120
that i'm trying to solve

137
00:04:53,120 --> 00:04:54,800
so and here are some of the links of

138
00:04:54,800 --> 00:04:56,800
those blogs

139
00:04:56,800 --> 00:04:59,440
from over 18 months ago

140
00:04:59,440 --> 00:05:00,639
and i started the project and i started

141
00:05:00,639 --> 00:05:02,320
with a couple of questions that i had in

142
00:05:02,320 --> 00:05:04,320
mind so the first question is why and

143
00:05:04,320 --> 00:05:05,840
how javascript being obfuscated and

144
00:05:05,840 --> 00:05:07,520
we'll go through that and we'll answer

145
00:05:07,520 --> 00:05:09,199
that question

146
00:05:09,199 --> 00:05:11,360
uh the second question was what are the

147
00:05:11,360 --> 00:05:13,000
numbers behind the usage of

148
00:05:13,000 --> 00:05:15,600
javascription in the wild uh and there's

149
00:05:15,600 --> 00:05:17,280
an interesting one well i didn't know

150
00:05:17,280 --> 00:05:19,360
what's this you know the

151
00:05:19,360 --> 00:05:21,840
the volume or the scale of that problem

152
00:05:21,840 --> 00:05:23,759
and i had to to well as part of the

153
00:05:23,759 --> 00:05:26,479
research wanted to know that answer and

154
00:05:26,479 --> 00:05:29,120
being able to to report on that

155
00:05:29,120 --> 00:05:31,600
um the third question that i had in mind

156
00:05:31,600 --> 00:05:34,240
well will i be able to well to find a

157
00:05:34,240 --> 00:05:35,919
solution for the problem to be able to

158
00:05:35,919 --> 00:05:38,560
detect and obfuscate javascript to find

159
00:05:38,560 --> 00:05:40,400
a technique to be able to do that and

160
00:05:40,400 --> 00:05:42,160
the third question

161
00:05:42,160 --> 00:05:43,680
well and that's a question that i would

162
00:05:43,680 --> 00:05:45,039
give you the answer but we'll get into

163
00:05:45,039 --> 00:05:47,120
data detail later on does javascript

164
00:05:47,120 --> 00:05:49,039
fuscation mean malicious and the answer

165
00:05:49,039 --> 00:05:50,240
is no

166
00:05:50,240 --> 00:05:52,400
we'll go into that in details but

167
00:05:52,400 --> 00:05:54,479
obviously javascript foscation can use

168
00:05:54,479 --> 00:05:55,280
for

169
00:05:55,280 --> 00:05:57,120
malicious purposes but it can also be

170
00:05:57,120 --> 00:06:00,000
used for benign purposes as well

171
00:06:00,000 --> 00:06:02,560
so let's do touch base let's try to

172
00:06:02,560 --> 00:06:04,160
figure out what does it mean javascript

173
00:06:04,160 --> 00:06:06,720
fusion and what's the challenges of that

174
00:06:06,720 --> 00:06:09,199
so here you can see three line code of

175
00:06:09,199 --> 00:06:11,360
javascript uh hello world kind of

176
00:06:11,360 --> 00:06:12,960
example and if you take those three

177
00:06:12,960 --> 00:06:14,880
lines of code and run it into an offer

178
00:06:14,880 --> 00:06:17,600
skater a packer a software that knows to

179
00:06:17,600 --> 00:06:19,680
take a given javascript code and do

180
00:06:19,680 --> 00:06:22,319
obfuscation for that code it will create

181
00:06:22,319 --> 00:06:24,880
and you cannot see the well you cannot

182
00:06:24,880 --> 00:06:26,720
see the example itself but believe me

183
00:06:26,720 --> 00:06:28,800
it's not readable it's very hard to

184
00:06:28,800 --> 00:06:31,039
understand it became much

185
00:06:31,039 --> 00:06:33,280
bigger in that sense and if you take

186
00:06:33,280 --> 00:06:35,440
those three lines of code and do the

187
00:06:35,440 --> 00:06:37,919
same obfuscation with the same tool one

188
00:06:37,919 --> 00:06:40,319
second after you do you did the first

189
00:06:40,319 --> 00:06:41,919
kind of obfuscation you will get a

190
00:06:41,919 --> 00:06:43,520
different file and when you compare

191
00:06:43,520 --> 00:06:45,600
those files they are not the same

192
00:06:45,600 --> 00:06:47,280
so when we talk about some of the

193
00:06:47,280 --> 00:06:49,120
problems that i experienced with in the

194
00:06:49,120 --> 00:06:51,440
context of javascript affiliation

195
00:06:51,440 --> 00:06:53,599
for example the ability to take a file

196
00:06:53,599 --> 00:06:55,840
that was identified as malicious because

197
00:06:55,840 --> 00:06:57,919
it was obfuscated and we know it's

198
00:06:57,919 --> 00:06:59,120
malicious

199
00:06:59,120 --> 00:07:01,039
and try to create a signature for that

200
00:07:01,039 --> 00:07:03,759
file meaning a text based signature or

201
00:07:03,759 --> 00:07:05,680
hash based signature and trying to

202
00:07:05,680 --> 00:07:07,680
detect that file will not work because

203
00:07:07,680 --> 00:07:09,759
if we will take the same file and do an

204
00:07:09,759 --> 00:07:11,840
obfuscation one second after we did the

205
00:07:11,840 --> 00:07:13,840
previous obfuscation we'll get different

206
00:07:13,840 --> 00:07:15,520
file different signature and that's the

207
00:07:15,520 --> 00:07:17,440
problem right that's part of the problem

208
00:07:17,440 --> 00:07:18,479
i want to

209
00:07:18,479 --> 00:07:19,520
address

210
00:07:19,520 --> 00:07:21,919
so that's a bit introduction how

211
00:07:21,919 --> 00:07:23,440
javascript is being obscured and here

212
00:07:23,440 --> 00:07:25,840
are the most well the common the most

213
00:07:25,840 --> 00:07:28,160
used techniques being used out there for

214
00:07:28,160 --> 00:07:29,360
obfuscation

215
00:07:29,360 --> 00:07:32,160
uh using repetitive or meaningless

216
00:07:32,160 --> 00:07:33,759
whether those are function name or

217
00:07:33,759 --> 00:07:36,319
variable name making that a bit unread

218
00:07:36,319 --> 00:07:38,319
well unreadable in that sense the file

219
00:07:38,319 --> 00:07:39,440
itself

220
00:07:39,440 --> 00:07:41,919
using anti-debugging code meaning

221
00:07:41,919 --> 00:07:44,560
putting into the code some

222
00:07:44,560 --> 00:07:46,400
code that will

223
00:07:46,400 --> 00:07:48,400
make the debugging much harder it's not

224
00:07:48,400 --> 00:07:51,039
impossible but it makes it much harder

225
00:07:51,039 --> 00:07:53,440
and third element here is

226
00:07:53,440 --> 00:07:55,440
we'll consume computing resources and

227
00:07:55,440 --> 00:07:57,120
time and in other words if you put into

228
00:07:57,120 --> 00:07:59,840
the code dead code meaning code that be

229
00:07:59,840 --> 00:08:01,199
executed but

230
00:08:01,199 --> 00:08:03,759
doesn't do anything or you put timers in

231
00:08:03,759 --> 00:08:06,240
that sense you make a given code being

232
00:08:06,240 --> 00:08:08,879
very slowly and in the context again in

233
00:08:08,879 --> 00:08:11,520
the context of resources that takes a

234
00:08:11,520 --> 00:08:12,479
lot of time

235
00:08:12,479 --> 00:08:16,560
and we don't always have those resources

236
00:08:16,720 --> 00:08:18,400
so we talked about the how let's talk

237
00:08:18,400 --> 00:08:20,160
about the why why javascript being

238
00:08:20,160 --> 00:08:21,360
obfuscated

239
00:08:21,360 --> 00:08:23,759
so the trivial thing is that client well

240
00:08:23,759 --> 00:08:24,400
javascript is the client side

241
00:08:24,400 --> 00:08:25,759
client-side

242
00:08:25,759 --> 00:08:27,520
code it's run on our browser in most

243
00:08:27,520 --> 00:08:29,120
cases

244
00:08:29,120 --> 00:08:31,360
and as such it's a code that is exposed

245
00:08:31,360 --> 00:08:33,519
to us meaning we can see the code

246
00:08:33,519 --> 00:08:35,679
we can see it on our browser and that's

247
00:08:35,679 --> 00:08:38,559
versus a server-side code that once been

248
00:08:38,559 --> 00:08:40,799
executed we don't really see the code

249
00:08:40,799 --> 00:08:43,039
and we don't know really what's the

250
00:08:43,039 --> 00:08:45,279
functionality being executed javascript

251
00:08:45,279 --> 00:08:46,880
we have the code we can't analyze that

252
00:08:46,880 --> 00:08:48,880
code and that's a challenge right this

253
00:08:48,880 --> 00:08:51,120
challenge from a defense well

254
00:08:51,120 --> 00:08:53,120
offensive or defensive point depends how

255
00:08:53,120 --> 00:08:54,560
you look into that

256
00:08:54,560 --> 00:08:56,720
is if you want to make sure that that

257
00:08:56,720 --> 00:08:58,160
code is

258
00:08:58,160 --> 00:09:00,240
unreadable or it's very hard to

259
00:09:00,240 --> 00:09:02,080
understand it called well in the context

260
00:09:02,080 --> 00:09:04,399
of security by obscurity

261
00:09:04,399 --> 00:09:07,040
making the code harder to read

262
00:09:07,040 --> 00:09:10,000
or harder to debug makes sense right

263
00:09:10,000 --> 00:09:12,160
it's not again impossible to understand

264
00:09:12,160 --> 00:09:15,279
the code and what does it execute but

265
00:09:15,279 --> 00:09:17,120
creating confiscation makes it much

266
00:09:17,120 --> 00:09:18,800
harder

267
00:09:18,800 --> 00:09:20,320
and the second reason as i mentioned

268
00:09:20,320 --> 00:09:22,000
before if you do an obfuscation you

269
00:09:22,000 --> 00:09:23,680
create much more challenges from a

270
00:09:23,680 --> 00:09:25,279
defensive point of view because if you

271
00:09:25,279 --> 00:09:27,040
had some sort of a signature whether

272
00:09:27,040 --> 00:09:29,920
that or text base or hash base

273
00:09:29,920 --> 00:09:33,360
on that code it will not be successful

274
00:09:33,360 --> 00:09:36,240
now i have my own interpretation of the

275
00:09:36,240 --> 00:09:38,080
reason why javascript is being used in

276
00:09:38,080 --> 00:09:40,560
the wild from a

277
00:09:40,560 --> 00:09:42,560
malicious point of view right and that's

278
00:09:42,560 --> 00:09:44,800
my perspective and hopefully you will

279
00:09:44,800 --> 00:09:45,920
agree with me

280
00:09:45,920 --> 00:09:47,680
is that from my point of view it's all

281
00:09:47,680 --> 00:09:50,240
about some sort of an equation that says

282
00:09:50,240 --> 00:09:52,880
when you have more resources and more

283
00:09:52,880 --> 00:09:55,200
time from defensive point of view

284
00:09:55,200 --> 00:09:57,680
that will result in lower detection rate

285
00:09:57,680 --> 00:09:59,600
meaning if

286
00:09:59,600 --> 00:10:01,760
me being attacked by someone that

287
00:10:01,760 --> 00:10:02,800
creates

288
00:10:02,800 --> 00:10:05,120
an overwhelming amount of work for me

289
00:10:05,120 --> 00:10:07,200
and that will create more the need for

290
00:10:07,200 --> 00:10:08,959
more resources whether those are human

291
00:10:08,959 --> 00:10:10,880
resources or whether the computational

292
00:10:10,880 --> 00:10:12,240
resources

293
00:10:12,240 --> 00:10:13,920
uh it will take more time and as a

294
00:10:13,920 --> 00:10:16,000
result of that detection light will be

295
00:10:16,000 --> 00:10:18,399
lower it will not evade detection but it

296
00:10:18,399 --> 00:10:19,600
will be lower

297
00:10:19,600 --> 00:10:22,240
and in that sense from an adversary

298
00:10:22,240 --> 00:10:24,720
point of view they will have a higher

299
00:10:24,720 --> 00:10:26,959
success rate and that equation is what

300
00:10:26,959 --> 00:10:28,959
drive the usage of javascript and

301
00:10:28,959 --> 00:10:33,279
obfuscation of javascript in the while

302
00:10:33,279 --> 00:10:35,279
now so

303
00:10:35,279 --> 00:10:37,519
at that point of time i i had some

304
00:10:37,519 --> 00:10:39,360
question i had some assumption i started

305
00:10:39,360 --> 00:10:42,000
to look into a lot of javascript samples

306
00:10:42,000 --> 00:10:44,320
and when i look into those samples four

307
00:10:44,320 --> 00:10:47,120
different sample will cross my

308
00:10:47,120 --> 00:10:49,600
cross well across my attention in that

309
00:10:49,600 --> 00:10:52,079
sense and i took a snapshot of four

310
00:10:52,079 --> 00:10:53,760
different samples

311
00:10:53,760 --> 00:10:56,480
and well a snapshot of four different

312
00:10:56,480 --> 00:10:57,600
samples

313
00:10:57,600 --> 00:10:59,680
and when i look first on those four

314
00:10:59,680 --> 00:11:00,399
different

315
00:11:00,399 --> 00:11:03,440
uh snapshots i told myself well they are

316
00:11:03,440 --> 00:11:05,360
not the same right if you look into them

317
00:11:05,360 --> 00:11:08,320
if you go you know letter by letter or

318
00:11:08,320 --> 00:11:09,920
character by character they are not the

319
00:11:09,920 --> 00:11:12,160
same but they look very similar but they

320
00:11:12,160 --> 00:11:13,680
are not the same and why they are not

321
00:11:13,680 --> 00:11:15,760
the same because they represent

322
00:11:15,760 --> 00:11:17,519
different threats the two upper one

323
00:11:17,519 --> 00:11:19,760
represent phishing pages one is

324
00:11:19,760 --> 00:11:22,240
financial services the other one is uh

325
00:11:22,240 --> 00:11:25,200
storage services services the two lower

326
00:11:25,200 --> 00:11:27,360
one the right one is a dropper malware

327
00:11:27,360 --> 00:11:29,200
dropper and the left one is mage card

328
00:11:29,200 --> 00:11:30,800
javascript trying to steal some

329
00:11:30,800 --> 00:11:33,279
credential or sorry some some credit

330
00:11:33,279 --> 00:11:35,120
card information stuff like that

331
00:11:35,120 --> 00:11:36,720
so they are definitely not the same

332
00:11:36,720 --> 00:11:38,640
these are not same files it's not the

333
00:11:38,640 --> 00:11:40,399
same thread but they are very very

334
00:11:40,399 --> 00:11:42,079
similar and the similarity is when you

335
00:11:42,079 --> 00:11:44,480
do some sort of a zoom out to them you

336
00:11:44,480 --> 00:11:46,000
can start to see that there is some sort

337
00:11:46,000 --> 00:11:48,560
of a pattern here being executed

338
00:11:48,560 --> 00:11:50,240
you can see an anonymous function with

339
00:11:50,240 --> 00:11:52,880
two variables and in that will function

340
00:11:52,880 --> 00:11:54,800
you can see a variable that contains the

341
00:11:54,800 --> 00:11:57,040
function that has a wall with a

342
00:11:57,040 --> 00:11:58,959
decreasing kind of

343
00:11:58,959 --> 00:12:00,720
element into that and there's some

344
00:12:00,720 --> 00:12:02,639
pushing and shifting which is doing some

345
00:12:02,639 --> 00:12:05,120
sort of a rotation on a given payload on

346
00:12:05,120 --> 00:12:07,680
a given array even that is being given

347
00:12:07,680 --> 00:12:09,040
to that function

348
00:12:09,040 --> 00:12:10,720
and that's a structure and that

349
00:12:10,720 --> 00:12:13,360
structure repeats itself the values of

350
00:12:13,360 --> 00:12:16,160
parameters of functions

351
00:12:16,160 --> 00:12:18,160
and a bit

352
00:12:18,160 --> 00:12:21,200
let's say some code can be added to that

353
00:12:21,200 --> 00:12:23,680
given function but the structure is the

354
00:12:23,680 --> 00:12:25,839
same so i asked myself maybe i can work

355
00:12:25,839 --> 00:12:27,680
with that structure maybe that structure

356
00:12:27,680 --> 00:12:30,320
can help me do some sort of a detection

357
00:12:30,320 --> 00:12:32,240
so you're saying hey how can i do that

358
00:12:32,240 --> 00:12:34,240
let's take a given javascript file do

359
00:12:34,240 --> 00:12:36,160
some sort of a representation of that

360
00:12:36,160 --> 00:12:38,399
file in an ast format which is the

361
00:12:38,399 --> 00:12:41,079
abstract syntax tree and abstract

362
00:12:41,079 --> 00:12:44,160
synthesis take a given code and do some

363
00:12:44,160 --> 00:12:46,639
sort of a json kind of representation

364
00:12:46,639 --> 00:12:49,040
for that so now i have a json which has

365
00:12:49,040 --> 00:12:51,120
some sort of structure and i can go over

366
00:12:51,120 --> 00:12:53,360
that json file and make decision or try

367
00:12:53,360 --> 00:12:55,279
to look for the given

368
00:12:55,279 --> 00:12:57,360
pattern that i was looking at at the

369
00:12:57,360 --> 00:12:58,639
beginning

370
00:12:58,639 --> 00:13:00,240
so in our case the functionality that

371
00:13:00,240 --> 00:13:02,160
you see if we will take this structure

372
00:13:02,160 --> 00:13:05,279
and look only for a given specific

373
00:13:05,279 --> 00:13:08,079
sorry specific part of that structure

374
00:13:08,079 --> 00:13:10,160
enabled me to detect

375
00:13:10,160 --> 00:13:12,800
well a structure of the code or or some

376
00:13:12,800 --> 00:13:15,040
sort of a pattern of the code that is

377
00:13:15,040 --> 00:13:18,160
not dependent on the values or some of

378
00:13:18,160 --> 00:13:18,959
the

379
00:13:18,959 --> 00:13:21,279
parameters of functioning being used in

380
00:13:21,279 --> 00:13:22,399
that code

381
00:13:22,399 --> 00:13:24,720
so i created a proof of concept for that

382
00:13:24,720 --> 00:13:26,880
uh and before creating proof of

383
00:13:26,880 --> 00:13:30,399
concept for that i used five different

384
00:13:30,399 --> 00:13:32,720
packers and i look into those packers as

385
00:13:32,720 --> 00:13:35,360
i said before the most used package that

386
00:13:35,360 --> 00:13:37,360
i was able to see and i created

387
00:13:37,360 --> 00:13:38,959
signature for each one of those so we

388
00:13:38,959 --> 00:13:40,320
will go through that really really

389
00:13:40,320 --> 00:13:42,399
quickly but you can see

390
00:13:42,399 --> 00:13:44,240
these are some of the examples of those

391
00:13:44,240 --> 00:13:45,279
packers

392
00:13:45,279 --> 00:13:47,760
a very straightforward one

393
00:13:47,760 --> 00:13:49,279
basically doing

394
00:13:49,279 --> 00:13:50,800
in most cases some sort of a

395
00:13:50,800 --> 00:13:53,360
manipulation of payload a payload that

396
00:13:53,360 --> 00:13:55,440
was well we had an original kind of

397
00:13:55,440 --> 00:13:58,399
javascript code that code was obfuscated

398
00:13:58,399 --> 00:14:00,800
and created a much larger with a payload

399
00:14:00,800 --> 00:14:03,199
kind of

400
00:14:03,199 --> 00:14:05,360
outcome for that and that payload once

401
00:14:05,360 --> 00:14:07,839
going to that this code is being

402
00:14:07,839 --> 00:14:09,839
reversed in that sense and being

403
00:14:09,839 --> 00:14:12,160
decrypted and in order to get to the

404
00:14:12,160 --> 00:14:15,120
original code that was um obfuscated at

405
00:14:15,120 --> 00:14:16,959
the beginning so we have three of those

406
00:14:16,959 --> 00:14:19,279
and we have these two that are

407
00:14:19,279 --> 00:14:21,440
more more common one you can see that

408
00:14:21,440 --> 00:14:23,760
example number four contains well i

409
00:14:23,760 --> 00:14:26,000
named it packer with dashes and the

410
00:14:26,000 --> 00:14:27,600
reason for that you can see that the

411
00:14:27,600 --> 00:14:31,360
name of the function get six parameters

412
00:14:31,360 --> 00:14:34,560
and those parameters values are p a c k

413
00:14:34,560 --> 00:14:36,079
e r and that's the reason why i call it

414
00:14:36,079 --> 00:14:39,839
that and we'll address that later on

415
00:14:40,320 --> 00:14:42,320
so we now know that we have a proof of

416
00:14:42,320 --> 00:14:44,560
concept we know that we have five

417
00:14:44,560 --> 00:14:45,680
different

418
00:14:45,680 --> 00:14:47,519
javascript packers that i created

419
00:14:47,519 --> 00:14:49,600
signature a structure based signature

420
00:14:49,600 --> 00:14:50,720
for them

421
00:14:50,720 --> 00:14:53,120
now the question is

422
00:14:53,120 --> 00:14:55,120
what are the results what we are seeing

423
00:14:55,120 --> 00:14:56,880
out there when i'm using that proof of

424
00:14:56,880 --> 00:14:58,560
concept that i just created in order to

425
00:14:58,560 --> 00:15:01,120
see if i have detection what is the

426
00:15:01,120 --> 00:15:04,240
amount of well numbers that i see behind

427
00:15:04,240 --> 00:15:06,720
that detection so here we go

428
00:15:06,720 --> 00:15:08,639
the first data set that i was using was

429
00:15:08,639 --> 00:15:11,839
a phishing data set with over 100 000

430
00:15:11,839 --> 00:15:14,560
different phishing pages now i want to

431
00:15:14,560 --> 00:15:17,199
say that given data set was not as clear

432
00:15:17,199 --> 00:15:19,360
as i wanted that to be it wasn't clean

433
00:15:19,360 --> 00:15:21,199
sorry not clear

434
00:15:21,199 --> 00:15:23,199
it has a bit

435
00:15:23,199 --> 00:15:25,600
disruption in that fact some of those

436
00:15:25,600 --> 00:15:27,519
phishing websites were not phishing

437
00:15:27,519 --> 00:15:30,079
website or used to be facing website and

438
00:15:30,079 --> 00:15:32,480
now they were mitigated so it was not

439
00:15:32,480 --> 00:15:34,320
clean data set but still i was able to

440
00:15:34,320 --> 00:15:36,480
see that i have 2.5

441
00:15:36,480 --> 00:15:39,920
sorry 2.1 uh detection rate on that data

442
00:15:39,920 --> 00:15:42,480
set which mean in other words that the

443
00:15:42,480 --> 00:15:44,320
concept that i had

444
00:15:44,320 --> 00:15:46,240
meaning i have some sort of a proof of

445
00:15:46,240 --> 00:15:48,880
concept to try to detect a structure of

446
00:15:48,880 --> 00:15:50,800
javascript is working i'm seeing

447
00:15:50,800 --> 00:15:51,920
detection

448
00:15:51,920 --> 00:15:53,519
and more to that i validated those

449
00:15:53,519 --> 00:15:54,639
detections

450
00:15:54,639 --> 00:15:56,720
those were actually the detection that i

451
00:15:56,720 --> 00:15:58,880
was expecting to see it wasn't in some

452
00:15:58,880 --> 00:16:01,040
of that sense

453
00:16:01,040 --> 00:16:02,880
the second data set that i was using was

454
00:16:02,880 --> 00:16:05,279
a much

455
00:16:07,120 --> 00:16:10,320
both malware and cryptominers and mage

456
00:16:10,320 --> 00:16:12,639
card and some phishing website but it

457
00:16:12,639 --> 00:16:14,959
was very very quality in that sense and

458
00:16:14,959 --> 00:16:17,279
on that given data set i was able to see

459
00:16:17,279 --> 00:16:19,600
the 26

460
00:16:19,600 --> 00:16:22,079
of the javascript pages that were

461
00:16:22,079 --> 00:16:24,720
examined were actually obfuscated and

462
00:16:24,720 --> 00:16:26,639
that's a really big message and the

463
00:16:26,639 --> 00:16:29,279
message is that

464
00:16:29,279 --> 00:16:32,000
we are seeing some sort of a shift in

465
00:16:32,000 --> 00:16:34,639
that sense

466
00:16:35,040 --> 00:16:37,600
on threat landscape where

467
00:16:37,600 --> 00:16:40,240
threat actors understand that they can

468
00:16:40,240 --> 00:16:41,920
challenge us from a defensive point of

469
00:16:41,920 --> 00:16:44,160
view and they need to do that by doing

470
00:16:44,160 --> 00:16:46,639
obfuscation and obfuscation make their

471
00:16:46,639 --> 00:16:48,959
attacks much more successful again as we

472
00:16:48,959 --> 00:16:50,560
mentioned before

473
00:16:50,560 --> 00:16:51,759
and

474
00:16:51,759 --> 00:16:53,839
important to say in that context that

475
00:16:53,839 --> 00:16:56,880
this number the 26 percent is very

476
00:16:56,880 --> 00:16:59,279
uh how should i say it it's very a

477
00:16:59,279 --> 00:17:02,160
realistic number it's not i it's not an

478
00:17:02,160 --> 00:17:04,640
exaggeration it's not a overall

479
00:17:04,640 --> 00:17:06,559
optimistic number it's really realistic

480
00:17:06,559 --> 00:17:08,480
meaning the numbers i would expect are

481
00:17:08,480 --> 00:17:10,079
much higher

482
00:17:10,079 --> 00:17:12,079
now we did testing

483
00:17:12,079 --> 00:17:14,160
for data that was classified as

484
00:17:14,160 --> 00:17:16,559
malicious now comes the question what

485
00:17:16,559 --> 00:17:19,039
about data that is not malicious

486
00:17:19,039 --> 00:17:21,199
would we be able to see some detection

487
00:17:21,199 --> 00:17:22,799
and the answer for that is yes we're

488
00:17:22,799 --> 00:17:26,480
able to see detection we took the 18 000

489
00:17:26,480 --> 00:17:30,160
most popular um website on alexa and we

490
00:17:30,160 --> 00:17:32,320
checked them out and we were able to see

491
00:17:32,320 --> 00:17:35,840
the point that 0.5 of those pages

492
00:17:35,840 --> 00:17:38,720
were actually also using and javascript

493
00:17:38,720 --> 00:17:40,720
for skating

494
00:17:40,720 --> 00:17:42,880
more to that we took a random kind of

495
00:17:42,880 --> 00:17:45,440
set of urls and we checked them as well

496
00:17:45,440 --> 00:17:47,120
and the numbers were very similar to

497
00:17:47,120 --> 00:17:48,240
that

498
00:17:48,240 --> 00:17:50,000
and the meaning for that

499
00:17:50,000 --> 00:17:51,440
is that we are now understanding

500
00:17:51,440 --> 00:17:53,520
thinking in some cases javascript fusion

501
00:17:53,520 --> 00:17:56,160
is being used on software b9 purposes

502
00:17:56,160 --> 00:17:57,840
and why we know that because i was going

503
00:17:57,840 --> 00:18:00,480
over some of those samples and i was

504
00:18:00,480 --> 00:18:02,400
well i wanted to make sure

505
00:18:02,400 --> 00:18:05,039
that those are actually true detections

506
00:18:05,039 --> 00:18:07,360
it's not false positive in any way

507
00:18:07,360 --> 00:18:09,440
now i would assume you have some

508
00:18:09,440 --> 00:18:11,280
questions on so why they are being

509
00:18:11,280 --> 00:18:13,039
obfuscated so why

510
00:18:13,039 --> 00:18:15,919
does a benign website do in obfuscation

511
00:18:15,919 --> 00:18:17,679
that's a really great question we'll

512
00:18:17,679 --> 00:18:21,200
address that in a few seconds

513
00:18:21,200 --> 00:18:24,400
so summary of what we have seen so far

514
00:18:24,400 --> 00:18:26,160
so we are seeing that javascript fusion

515
00:18:26,160 --> 00:18:28,559
detection is accurate right

516
00:18:28,559 --> 00:18:30,480
so i created technique and it works and

517
00:18:30,480 --> 00:18:31,919
i have really good results which is a

518
00:18:31,919 --> 00:18:33,440
good start

519
00:18:33,440 --> 00:18:35,760
we were able to see that using that

520
00:18:35,760 --> 00:18:38,400
technique i'm actually having

521
00:18:38,400 --> 00:18:41,679
over 4k new detection of malware and

522
00:18:41,679 --> 00:18:45,280
phishing pages and again

523
00:18:45,280 --> 00:18:47,520
as a result of my objectives that were

524
00:18:47,520 --> 00:18:50,320
to increase detection in that sense to

525
00:18:50,320 --> 00:18:52,559
be able to detect all kind of obfuscated

526
00:18:52,559 --> 00:18:53,679
attacks that

527
00:18:53,679 --> 00:18:56,320
most cases will evade traditional kind

528
00:18:56,320 --> 00:18:58,080
of detection mechanism

529
00:18:58,080 --> 00:19:01,120
i have a nice outcome

530
00:19:01,120 --> 00:19:02,880
we were able to see that some of those

531
00:19:02,880 --> 00:19:05,200
packers are more mostly associated with

532
00:19:05,200 --> 00:19:07,440
malicious activity for example the aes

533
00:19:07,440 --> 00:19:09,360
ctr the crypt

534
00:19:09,360 --> 00:19:11,520
packer that in most cases is being used

535
00:19:11,520 --> 00:19:13,520
for phishing website and we didn't saw

536
00:19:13,520 --> 00:19:14,559
any

537
00:19:14,559 --> 00:19:16,640
true detection of that given packer

538
00:19:16,640 --> 00:19:18,960
being used on b9 website and therefore

539
00:19:18,960 --> 00:19:21,360
that can lead us to a decision making

540
00:19:21,360 --> 00:19:23,760
kind of approach meaning if we can see

541
00:19:23,760 --> 00:19:24,640
some

542
00:19:24,640 --> 00:19:26,960
pages being obfuscated with that given

543
00:19:26,960 --> 00:19:29,679
packer most likely that that given pages

544
00:19:29,679 --> 00:19:31,200
are malicious

545
00:19:31,200 --> 00:19:33,200
and finally we were able to see that

546
00:19:33,200 --> 00:19:35,280
obfuscation doesn't is not equal to

547
00:19:35,280 --> 00:19:36,640
malicious right

548
00:19:36,640 --> 00:19:38,640
and that's a problem and that problem

549
00:19:38,640 --> 00:19:39,520
will

550
00:19:39,520 --> 00:19:41,600
result with two questions the first one

551
00:19:41,600 --> 00:19:44,240
is the one that i just asked so

552
00:19:44,240 --> 00:19:46,160
what's the reason for that why what we

553
00:19:46,160 --> 00:19:48,320
are seeing out there and why

554
00:19:48,320 --> 00:19:51,039
benign websites are being obfuscated or

555
00:19:51,039 --> 00:19:52,559
you know javascript file being

556
00:19:52,559 --> 00:19:54,640
obfuscated

557
00:19:54,640 --> 00:19:57,039
and the second question is okay so now

558
00:19:57,039 --> 00:19:59,600
we have a problem we know that some are

559
00:19:59,600 --> 00:20:01,600
malicious and some are not

560
00:20:01,600 --> 00:20:03,600
can we introduce an approach that will

561
00:20:03,600 --> 00:20:05,280
solve that problem that will enable us

562
00:20:05,280 --> 00:20:07,280
to do better detection i will try to

563
00:20:07,280 --> 00:20:10,720
address those two questions

564
00:20:11,520 --> 00:20:12,880
so the first one

565
00:20:12,880 --> 00:20:16,080
so why benign websites are being

566
00:20:16,080 --> 00:20:17,440
obfuscated

567
00:20:17,440 --> 00:20:19,200
here are a few of the answers for that

568
00:20:19,200 --> 00:20:21,039
according to the files that i was able

569
00:20:21,039 --> 00:20:22,720
to see i would assume that there are

570
00:20:22,720 --> 00:20:24,960
other better reasons as well

571
00:20:24,960 --> 00:20:27,440
but for example email address masking

572
00:20:27,440 --> 00:20:29,840
for some reason websites

573
00:20:29,840 --> 00:20:31,679
some websites

574
00:20:31,679 --> 00:20:33,360
in order to make

575
00:20:33,360 --> 00:20:35,440
want to include email address in the

576
00:20:35,440 --> 00:20:37,840
website but doesn't want to make

577
00:20:37,840 --> 00:20:40,640
that email address available to any kind

578
00:20:40,640 --> 00:20:43,120
of scanner or search engines that look

579
00:20:43,120 --> 00:20:45,039
into their website and therefore they

580
00:20:45,039 --> 00:20:46,840
are doing obfuscation for

581
00:20:46,840 --> 00:20:50,000
that um cookie client side functionality

582
00:20:50,000 --> 00:20:52,080
don't try try to ask me the reason for

583
00:20:52,080 --> 00:20:53,840
that it's not

584
00:20:53,840 --> 00:20:55,600
good practice but yet we were able to

585
00:20:55,600 --> 00:20:58,000
see some of those examples

586
00:20:58,000 --> 00:20:59,840
a lot of examples for third-party

587
00:20:59,840 --> 00:21:00,960
scripts

588
00:21:00,960 --> 00:21:03,120
such as advertisements and translation

589
00:21:03,120 --> 00:21:04,240
services

590
00:21:04,240 --> 00:21:07,120
but using um obfuscation and what's the

591
00:21:07,120 --> 00:21:08,799
reason for that true so try to imagine

592
00:21:08,799 --> 00:21:10,640
that you have a website and that website

593
00:21:10,640 --> 00:21:13,120
consume a third-party script that do

594
00:21:13,120 --> 00:21:14,880
some sort of a

595
00:21:14,880 --> 00:21:17,679
translation service kind of uh

596
00:21:17,679 --> 00:21:20,159
functionality on your website

597
00:21:20,159 --> 00:21:22,159
that third party

598
00:21:22,159 --> 00:21:24,559
vendor is doing obfuscation of that code

599
00:21:24,559 --> 00:21:26,559
and push that code to your website and

600
00:21:26,559 --> 00:21:28,240
that's the way it's being used

601
00:21:28,240 --> 00:21:30,880
um again there they have their own

602
00:21:30,880 --> 00:21:33,120
reasons i would assume that security by

603
00:21:33,120 --> 00:21:34,640
obscurity that's the reason that why

604
00:21:34,640 --> 00:21:36,000
they are doing that

605
00:21:36,000 --> 00:21:39,840
and and the last um example that i will

606
00:21:39,840 --> 00:21:42,320
try to avoid addressing is that a lot of

607
00:21:42,320 --> 00:21:45,039
adult content are also doing obfuscation

608
00:21:45,039 --> 00:21:46,400
and

609
00:21:46,400 --> 00:21:50,240
i will avoid addressing that issue um

610
00:21:50,240 --> 00:21:52,320
so we try to answer the first question

611
00:21:52,320 --> 00:21:55,039
right and the second question is so can

612
00:21:55,039 --> 00:21:57,600
we build a mechanism that will enable us

613
00:21:57,600 --> 00:21:58,720
to

614
00:21:58,720 --> 00:22:01,520
after we detected this that a given file

615
00:22:01,520 --> 00:22:03,760
was obfuscated can we take it to the

616
00:22:03,760 --> 00:22:05,600
next level and try to differentiate

617
00:22:05,600 --> 00:22:07,919
between malicious and non-malicious

618
00:22:07,919 --> 00:22:10,400
obfuscated file in order to do that i

619
00:22:10,400 --> 00:22:12,960
use two kind of approaches that are

620
00:22:12,960 --> 00:22:15,120
complementary in the set in a sense

621
00:22:15,120 --> 00:22:15,919
right

622
00:22:15,919 --> 00:22:17,679
uh the first approach is a false

623
00:22:17,679 --> 00:22:19,520
positive kind of approach to try to say

624
00:22:19,520 --> 00:22:22,240
hey let's try to take those benign

625
00:22:22,240 --> 00:22:24,480
websites that are in most cases highly

626
00:22:24,480 --> 00:22:26,000
popular because that's the problem that

627
00:22:26,000 --> 00:22:27,520
we're trying to address

628
00:22:27,520 --> 00:22:28,880
and let's try to figure out if we can

629
00:22:28,880 --> 00:22:30,320
find the techniques that will enable us

630
00:22:30,320 --> 00:22:32,559
to say that at least few of them

631
00:22:32,559 --> 00:22:33,520
are

632
00:22:33,520 --> 00:22:35,600
obfuscated but we know how to say that

633
00:22:35,600 --> 00:22:37,520
they are benign and not malicious so

634
00:22:37,520 --> 00:22:39,039
that's the first approach and the second

635
00:22:39,039 --> 00:22:40,960
approach is a true positive kind of

636
00:22:40,960 --> 00:22:41,919
approach

637
00:22:41,919 --> 00:22:44,080
and in that approach i'm well trying to

638
00:22:44,080 --> 00:22:44,960
show

639
00:22:44,960 --> 00:22:48,320
and again in a high level kind of sense

640
00:22:48,320 --> 00:22:50,080
machine learning approach for

641
00:22:50,080 --> 00:22:52,240
classifying malicious files and and

642
00:22:52,240 --> 00:22:53,760
we'll go through that

643
00:22:53,760 --> 00:22:55,679
and and and again it's a high level an

644
00:22:55,679 --> 00:22:57,840
example and hopefully it will make sense

645
00:22:57,840 --> 00:22:59,760
so the first approach false positive

646
00:22:59,760 --> 00:23:02,880
right so we have highly popular website

647
00:23:02,880 --> 00:23:05,919
that's the gray uh circles the alexa and

648
00:23:05,919 --> 00:23:08,640
the random data set that we have and for

649
00:23:08,640 --> 00:23:10,880
each one of those

650
00:23:10,880 --> 00:23:13,840
files on those domains that are

651
00:23:13,840 --> 00:23:16,960
under those kind of data sets we have

652
00:23:16,960 --> 00:23:19,360
files we have well javascript code that

653
00:23:19,360 --> 00:23:21,840
we hash that javascript code and we

654
00:23:21,840 --> 00:23:24,080
associated the hash javascript code to

655
00:23:24,080 --> 00:23:25,840
the actual domain names which are the

656
00:23:25,840 --> 00:23:28,559
blue circle so orange means the hash

657
00:23:28,559 --> 00:23:30,880
value of a javascript code blue means

658
00:23:30,880 --> 00:23:33,760
domain names and the gray one is

659
00:23:33,760 --> 00:23:36,960
the big circles of alexa and random data

660
00:23:36,960 --> 00:23:37,840
sets

661
00:23:37,840 --> 00:23:40,240
and what we were able to see is that

662
00:23:40,240 --> 00:23:42,400
actually in a lot of cases we can see

663
00:23:42,400 --> 00:23:46,320
that the same files are being obfuscated

664
00:23:46,320 --> 00:23:48,640
but the hash value is the same and that

665
00:23:48,640 --> 00:23:50,320
can be addressed by the example that we

666
00:23:50,320 --> 00:23:52,799
saw before on the translation services

667
00:23:52,799 --> 00:23:54,799
because they are taking a given code

668
00:23:54,799 --> 00:23:56,799
doing a foscation of that and push that

669
00:23:56,799 --> 00:23:59,120
code to many different websites and

670
00:23:59,120 --> 00:24:01,039
therefore you can see the same hash

671
00:24:01,039 --> 00:24:04,000
value for that code so in other words

672
00:24:04,000 --> 00:24:04,880
the

673
00:24:04,880 --> 00:24:06,880
false positive and a white list kind of

674
00:24:06,880 --> 00:24:09,039
approach would say hey let let's take

675
00:24:09,039 --> 00:24:11,360
those files that are being pushed to a

676
00:24:11,360 --> 00:24:14,000
lot of well to many different

677
00:24:14,000 --> 00:24:16,320
highly popular websites

678
00:24:16,320 --> 00:24:18,080
and do a white list approach for that

679
00:24:18,080 --> 00:24:20,640
let's make sure that if we see an f a

680
00:24:20,640 --> 00:24:24,159
file with a hash value of that given

681
00:24:24,159 --> 00:24:26,159
uh the value that we see here we can

682
00:24:26,159 --> 00:24:28,320
classify that as non-malicious and by

683
00:24:28,320 --> 00:24:30,480
that reduce the problem that we are

684
00:24:30,480 --> 00:24:34,080
facing and again in my case which was a

685
00:24:34,080 --> 00:24:36,799
very small set and a very limited kind

686
00:24:36,799 --> 00:24:38,400
of

687
00:24:38,400 --> 00:24:41,279
data set that i was using i was able to

688
00:24:41,279 --> 00:24:43,919
reduce the problem by 20

689
00:24:43,919 --> 00:24:45,679
and obviously if we will use a much

690
00:24:45,679 --> 00:24:48,640
larger data set of b9 files we will get

691
00:24:48,640 --> 00:24:51,120
to better numbers

692
00:24:51,120 --> 00:24:53,039
so that was the first approach right the

693
00:24:53,039 --> 00:24:54,480
white the

694
00:24:54,480 --> 00:24:54,730
the

695
00:24:54,730 --> 00:24:56,400
[Music]

696
00:24:56,400 --> 00:24:58,400
the the white list approach and and

697
00:24:58,400 --> 00:25:00,320
positive security kind of approach the

698
00:25:00,320 --> 00:25:02,720
second approach was true positive right

699
00:25:02,720 --> 00:25:04,720
and then machine learning so we saw at

700
00:25:04,720 --> 00:25:06,640
the beginning a file a javascript file

701
00:25:06,640 --> 00:25:07,520
right

702
00:25:07,520 --> 00:25:10,400
and we saw um how we break it into small

703
00:25:10,400 --> 00:25:12,799
pieces and try to de-obfuscate that

704
00:25:12,799 --> 00:25:14,960
now you can look at that file from a

705
00:25:14,960 --> 00:25:17,120
machine learning port which is a

706
00:25:17,120 --> 00:25:19,360
a set of features that can be extracted

707
00:25:19,360 --> 00:25:21,200
from that file so for example if you

708
00:25:21,200 --> 00:25:23,440
have an array in that file which array

709
00:25:23,440 --> 00:25:25,520
which that array contains

710
00:25:25,520 --> 00:25:28,159
the actual payload that being used or

711
00:25:28,159 --> 00:25:30,559
been de-obfuscated as part of that file

712
00:25:30,559 --> 00:25:32,880
we can look at that array and say hey

713
00:25:32,880 --> 00:25:35,520
the amount of elements in that array

714
00:25:35,520 --> 00:25:37,200
could be considered as a feature a

715
00:25:37,200 --> 00:25:39,360
feature that we can use later on

716
00:25:39,360 --> 00:25:41,600
the length of the values of the elements

717
00:25:41,600 --> 00:25:44,159
of that array can be used the entropy of

718
00:25:44,159 --> 00:25:47,039
the values can also be used um we were

719
00:25:47,039 --> 00:25:49,360
able to see that a lot of those of those

720
00:25:49,360 --> 00:25:51,679
office schedule files contain a lot of

721
00:25:51,679 --> 00:25:54,000
um

722
00:25:54,480 --> 00:25:57,039
well parameters and function names now

723
00:25:57,039 --> 00:25:59,200
counting those and we and i'm calling

724
00:25:59,200 --> 00:26:01,600
them identifiers in that sense counting

725
00:26:01,600 --> 00:26:03,760
them is also a feature that can be used

726
00:26:03,760 --> 00:26:05,279
in the context of doing some sort of a

727
00:26:05,279 --> 00:26:06,720
machine learning approach to try to

728
00:26:06,720 --> 00:26:08,000
identify

729
00:26:08,000 --> 00:26:09,840
or classify who's malicious and who's

730
00:26:09,840 --> 00:26:11,360
not

731
00:26:11,360 --> 00:26:13,520
so here is an example i took the data

732
00:26:13,520 --> 00:26:16,400
set of those um

733
00:26:16,400 --> 00:26:18,799
samples that match on the push shift

734
00:26:18,799 --> 00:26:20,720
packer that one of the five signatures

735
00:26:20,720 --> 00:26:21,919
that i have the

736
00:26:21,919 --> 00:26:24,240
structure based signature so i took one

737
00:26:24,240 --> 00:26:25,200
of those

738
00:26:25,200 --> 00:26:27,520
and i put them on

739
00:26:27,520 --> 00:26:29,679
this graph which you

740
00:26:29,679 --> 00:26:31,520
in the context of using two different

741
00:26:31,520 --> 00:26:33,840
features here the first feature on the

742
00:26:33,840 --> 00:26:36,799
left is the number of unique identifiers

743
00:26:36,799 --> 00:26:38,480
which means the number of

744
00:26:38,480 --> 00:26:41,279
parameter values and function names

745
00:26:41,279 --> 00:26:43,279
on the bottom side you can see a

746
00:26:43,279 --> 00:26:45,520
different feature which means the number

747
00:26:45,520 --> 00:26:47,679
of elements that we can see in a given

748
00:26:47,679 --> 00:26:49,440
array in that file

749
00:26:49,440 --> 00:26:51,679
and only by using those two features

750
00:26:51,679 --> 00:26:54,000
right a very naive approach we start to

751
00:26:54,000 --> 00:26:55,039
see that there are different

752
00:26:55,039 --> 00:26:57,919
classification right we have green red

753
00:26:57,919 --> 00:26:59,840
and blue green

754
00:26:59,840 --> 00:27:02,799
malware blue mean alexa and

755
00:27:02,799 --> 00:27:05,600
sorry blue mean random and red mean

756
00:27:05,600 --> 00:27:08,559
alexa so in that sense we started to

757
00:27:08,559 --> 00:27:11,360
divide the space to two different groups

758
00:27:11,360 --> 00:27:13,840
on the right side and on in our on the

759
00:27:13,840 --> 00:27:15,600
upper left side and those group by

760
00:27:15,600 --> 00:27:17,919
himself represent malware with the

761
00:27:17,919 --> 00:27:20,080
features that we chose only those two

762
00:27:20,080 --> 00:27:22,000
different features that we chose here

763
00:27:22,000 --> 00:27:23,440
and that gives us the ability to make

764
00:27:23,440 --> 00:27:26,080
decisions we will see those decision

765
00:27:26,080 --> 00:27:28,159
in the following slide but wait we have

766
00:27:28,159 --> 00:27:30,880
at the center of this graph a mixture of

767
00:27:30,880 --> 00:27:33,600
colors right so we can also do some sort

768
00:27:33,600 --> 00:27:36,159
of uh focus on that group as well

769
00:27:36,159 --> 00:27:38,159
and when we will do that we can see that

770
00:27:38,159 --> 00:27:40,640
even in that group we have

771
00:27:40,640 --> 00:27:44,399
a even smaller set of features being

772
00:27:44,399 --> 00:27:46,880
classified and we can also use and apply

773
00:27:46,880 --> 00:27:48,480
a machine learning approach to also make

774
00:27:48,480 --> 00:27:50,320
decisions based on that

775
00:27:50,320 --> 00:27:52,320
so how does it looks like in the context

776
00:27:52,320 --> 00:27:54,240
of machine learning so i took those i

777
00:27:54,240 --> 00:27:55,840
well i took three different features the

778
00:27:55,840 --> 00:27:57,600
two one that i just mentioned and a

779
00:27:57,600 --> 00:27:59,440
third feature that i will

780
00:27:59,440 --> 00:28:01,600
name in a minute and i created a

781
00:28:01,600 --> 00:28:03,600
decision tree a malware decision tree

782
00:28:03,600 --> 00:28:05,840
kind of um

783
00:28:05,840 --> 00:28:07,919
module that enabled me to make decision

784
00:28:07,919 --> 00:28:09,919
and again it's a very high level and i

785
00:28:09,919 --> 00:28:11,919
didn't spend a lot of time on tuning

786
00:28:11,919 --> 00:28:14,080
that it's more about proof of concept

787
00:28:14,080 --> 00:28:16,640
and showing that it can be done so when

788
00:28:16,640 --> 00:28:19,279
we take only the left the oh sorry the

789
00:28:19,279 --> 00:28:22,399
most right side of that tree

790
00:28:22,399 --> 00:28:25,120
meaning uh we are using three features

791
00:28:25,120 --> 00:28:29,760
the first one on the top is number of

792
00:28:29,760 --> 00:28:32,080
identifier which are function name and

793
00:28:32,080 --> 00:28:34,799
variable name that start with underscore

794
00:28:34,799 --> 00:28:36,880
zero x that's a feature

795
00:28:36,880 --> 00:28:39,039
we the second feature that we use is the

796
00:28:39,039 --> 00:28:41,760
number of values in a given array the

797
00:28:41,760 --> 00:28:43,679
elements the number of elements and the

798
00:28:43,679 --> 00:28:45,840
third feature was the number of unique

799
00:28:45,840 --> 00:28:48,960
identifiers which again identifiers are

800
00:28:48,960 --> 00:28:51,200
parameter names and functioning

801
00:28:51,200 --> 00:28:53,520
only taking those three features with

802
00:28:53,520 --> 00:28:55,679
the following values meaning if you can

803
00:28:55,679 --> 00:28:56,840
see

804
00:28:56,840 --> 00:29:00,640
um number of identifiers starting with

805
00:29:00,640 --> 00:29:02,480
underscore 0x

806
00:29:02,480 --> 00:29:05,279
above 20 and we can see number of

807
00:29:05,279 --> 00:29:08,080
elements in array that is about 17 and

808
00:29:08,080 --> 00:29:10,320
we can see that the unique identifier is

809
00:29:10,320 --> 00:29:12,799
greater than 92 only those three

810
00:29:12,799 --> 00:29:15,120
features in those values will eliminate

811
00:29:15,120 --> 00:29:19,679
50 of the problem meaning 7 well 757

812
00:29:19,679 --> 00:29:22,240
of this out of the

813
00:29:22,240 --> 00:29:25,919
1500 40 41 samples that we checked so

814
00:29:25,919 --> 00:29:28,159
that's again an example how we take a

815
00:29:28,159 --> 00:29:30,480
file create the right feature out of

816
00:29:30,480 --> 00:29:31,600
that file

817
00:29:31,600 --> 00:29:33,520
create a decision tree based on that

818
00:29:33,520 --> 00:29:34,880
doing some

819
00:29:34,880 --> 00:29:36,799
fine tuning for those different features

820
00:29:36,799 --> 00:29:39,039
making the right decision and by that we

821
00:29:39,039 --> 00:29:41,600
can classify a given file that we know

822
00:29:41,600 --> 00:29:43,520
it's been obfuscated but we don't know

823
00:29:43,520 --> 00:29:45,279
if it's malicious or not to be in

824
00:29:45,279 --> 00:29:47,200
malicious or being medium right that's

825
00:29:47,200 --> 00:29:50,720
the project i'm suggesting here

826
00:29:50,720 --> 00:29:52,399
now we had four question at the

827
00:29:52,399 --> 00:29:54,799
beginning right

828
00:29:54,799 --> 00:29:56,159
why and how javascript is being

829
00:29:56,159 --> 00:29:58,960
obfuscated and i think we addressed that

830
00:29:58,960 --> 00:30:01,120
uh we had what are the number behind the

831
00:30:01,120 --> 00:30:03,120
use of javascript being obfuscated in

832
00:30:03,120 --> 00:30:04,720
the wild and we were able to see that

833
00:30:04,720 --> 00:30:07,360
for example 60 26

834
00:30:07,360 --> 00:30:10,559
of the malware data set were classified

835
00:30:10,559 --> 00:30:11,840
as

836
00:30:11,840 --> 00:30:14,159
files that are being obfuscated

837
00:30:14,159 --> 00:30:15,919
uh we addressed the question that

838
00:30:15,919 --> 00:30:18,240
obfuscation doesn't equal to malicious

839
00:30:18,240 --> 00:30:19,679
right

840
00:30:19,679 --> 00:30:21,760
and more to that we address the question

841
00:30:21,760 --> 00:30:23,520
on technique that enable us to

842
00:30:23,520 --> 00:30:24,880
differentiate between something that is

843
00:30:24,880 --> 00:30:26,960
malicious versus something that is

844
00:30:26,960 --> 00:30:29,200
benign

845
00:30:29,200 --> 00:30:30,000
so

846
00:30:30,000 --> 00:30:30,880
that

847
00:30:30,880 --> 00:30:32,320
part of the research was done there is

848
00:30:32,320 --> 00:30:33,840
some step in the research that i would

849
00:30:33,840 --> 00:30:37,360
like to do um in the in the coming month

850
00:30:37,360 --> 00:30:40,000
um here are some of the things that are

851
00:30:40,000 --> 00:30:42,720
on my to do list uh i want to release

852
00:30:42,720 --> 00:30:45,760
that code right i need star some work

853
00:30:45,760 --> 00:30:48,240
doing that i need to allocate some of my

854
00:30:48,240 --> 00:30:51,440
time to do the work doing that

855
00:30:51,440 --> 00:30:53,679
i want to add additional signature for

856
00:30:53,679 --> 00:30:55,600
additional packers

857
00:30:55,600 --> 00:30:57,600
i want to refine some of the data sets

858
00:30:57,600 --> 00:30:59,600
that i was using trying to

859
00:30:59,600 --> 00:31:01,519
use better data set as a result have

860
00:31:01,519 --> 00:31:03,120
better results and better functionality

861
00:31:03,120 --> 00:31:04,960
being done

862
00:31:04,960 --> 00:31:06,880
and i want to use maybe more features in

863
00:31:06,880 --> 00:31:08,960
the module of the machine learning

864
00:31:08,960 --> 00:31:10,799
module to make better decision being

865
00:31:10,799 --> 00:31:13,200
able to classify things much better

866
00:31:13,200 --> 00:31:15,840
and so explore the ability to do some

867
00:31:15,840 --> 00:31:17,840
sort of an algorithmic extract

868
00:31:17,840 --> 00:31:20,640
extraction for patterns in signatures

869
00:31:20,640 --> 00:31:23,279
um so i named the presentation it's all

870
00:31:23,279 --> 00:31:25,039
about the package right with the dashes

871
00:31:25,039 --> 00:31:26,880
and i told you hey what about those

872
00:31:26,880 --> 00:31:29,200
dashes and i also showed you that's the

873
00:31:29,200 --> 00:31:30,880
reason for that right i'm not sure that

874
00:31:30,880 --> 00:31:33,039
you can see that you can see that so the

875
00:31:33,039 --> 00:31:35,200
name of the the variables in that

876
00:31:35,200 --> 00:31:38,799
function are p a c a k e r right

877
00:31:38,799 --> 00:31:40,640
and part of the approach that i was

878
00:31:40,640 --> 00:31:42,799
using was saying hey the name of the

879
00:31:42,799 --> 00:31:44,399
variables are not interesting for me

880
00:31:44,399 --> 00:31:46,240
because they are they can easily be

881
00:31:46,240 --> 00:31:47,760
changed and i was doing the right

882
00:31:47,760 --> 00:31:49,360
decision because

883
00:31:49,360 --> 00:31:50,880
after a while i was able to see a

884
00:31:50,880 --> 00:31:52,960
different example using pact instead of

885
00:31:52,960 --> 00:31:54,159
packers

886
00:31:54,159 --> 00:31:56,000
which was a good decision at the time

887
00:31:56,000 --> 00:31:58,159
but as i continue to look into more

888
00:31:58,159 --> 00:32:00,799
examples and more sample i suddenly saw

889
00:32:00,799 --> 00:32:02,720
the following example which is again the

890
00:32:02,720 --> 00:32:04,480
same structure but this time you can see

891
00:32:04,480 --> 00:32:06,399
the name of the variable are

892
00:32:06,399 --> 00:32:07,559
underscore

893
00:32:07,559 --> 00:32:10,880
0x176 and so forth right making it very

894
00:32:10,880 --> 00:32:13,440
readable and therefore i will say myself

895
00:32:13,440 --> 00:32:15,120
maybe i should change the name of the

896
00:32:15,120 --> 00:32:17,519
presentation to it's all about the

897
00:32:17,519 --> 00:32:19,600
underscore 0x

898
00:32:19,600 --> 00:32:21,440
i don't know we will

899
00:32:21,440 --> 00:32:24,799
consider that we'll see

900
00:32:24,799 --> 00:32:27,919
so i think that was me for today guys uh

901
00:32:27,919 --> 00:32:29,679
i hope that you enjoyed the presentation

902
00:32:29,679 --> 00:32:32,080
and if you have any questions

903
00:32:32,080 --> 00:32:34,640
feel free

904
00:32:34,640 --> 00:32:36,080
here we go

905
00:32:36,080 --> 00:32:38,000
i think he wants you to

906
00:32:38,000 --> 00:32:39,760
speak to the mic very good

907
00:32:39,760 --> 00:32:41,519
well i have lots of questions but i'll

908
00:32:41,519 --> 00:32:43,679
start with one okay um

909
00:32:43,679 --> 00:32:47,840
so you detect 26 of them uh malicious of

910
00:32:47,840 --> 00:32:50,320
obfuscated samples with your five

911
00:32:50,320 --> 00:32:52,960
packers right how many

912
00:32:52,960 --> 00:32:55,919
uh obfuscated samples were not detected

913
00:32:55,919 --> 00:32:57,600
because you didn't have code to

914
00:32:57,600 --> 00:33:00,240
recognize the obfuscation in that data

915
00:33:00,240 --> 00:33:01,919
set

916
00:33:01,919 --> 00:33:03,840
so that's a great question i don't have

917
00:33:03,840 --> 00:33:05,440
a clear answer for that i have my

918
00:33:05,440 --> 00:33:06,960
intuition

919
00:33:06,960 --> 00:33:09,679
because again if i knew what i'm missing

920
00:33:09,679 --> 00:33:10,720
i would

921
00:33:10,720 --> 00:33:12,640
easily add a signature or structure

922
00:33:12,640 --> 00:33:14,640
based signature for that

923
00:33:14,640 --> 00:33:16,960
so i know the numbers are much higher

924
00:33:16,960 --> 00:33:19,440
toward the 50

925
00:33:19,440 --> 00:33:22,399
but it's becoming more of a niche or

926
00:33:22,399 --> 00:33:24,880
more small kind of packers being used

927
00:33:24,880 --> 00:33:26,720
and i didn't have the resources and time

928
00:33:26,720 --> 00:33:29,039
to take each one of those packer and

929
00:33:29,039 --> 00:33:31,360
figure what's that structural that

930
00:33:31,360 --> 00:33:32,640
signature that i want to pull out of

931
00:33:32,640 --> 00:33:34,720
them so numbers are high but i don't

932
00:33:34,720 --> 00:33:37,039
have a realistic number to share but in

933
00:33:37,039 --> 00:33:39,440
the machine learning a model

934
00:33:39,440 --> 00:33:41,519
the arbitrary features that you

935
00:33:41,519 --> 00:33:44,480
recognize would probably apply to the

936
00:33:44,480 --> 00:33:47,760
rest of the packers as well

937
00:33:48,080 --> 00:33:51,120
it's correct and not 100 correct because

938
00:33:51,120 --> 00:33:53,919
the machine learning approach was to

939
00:33:53,919 --> 00:33:56,000
take a data set that was already

940
00:33:56,000 --> 00:33:58,960
classified as being obfuscated by one of

941
00:33:58,960 --> 00:34:00,720
the packers that we have

942
00:34:00,720 --> 00:34:02,640
and make decision based on that whether

943
00:34:02,640 --> 00:34:04,799
that's benign or malicious

944
00:34:04,799 --> 00:34:06,960
so in that it will to create some sort

945
00:34:06,960 --> 00:34:09,199
of a machine learning approach that

946
00:34:09,199 --> 00:34:11,760
generically can detect and obfuscated

947
00:34:11,760 --> 00:34:14,159
code is a bit more a bit too over

948
00:34:14,159 --> 00:34:16,079
fitting in that sense right because the

949
00:34:16,079 --> 00:34:17,280
feature might be different from

950
00:34:17,280 --> 00:34:19,280
different packers right and where did

951
00:34:19,280 --> 00:34:22,480
you where did your data come from

952
00:34:22,480 --> 00:34:25,599
that's a good one uh

953
00:34:25,679 --> 00:34:29,040
a lot of the data that like part of

954
00:34:29,040 --> 00:34:31,440
the data that we have in my work

955
00:34:31,440 --> 00:34:34,440
environment

956
00:34:35,190 --> 00:34:38,360
[Music]

957
00:34:40,079 --> 00:34:41,280
thank you

958
00:34:41,280 --> 00:34:42,719
i really enjoyed the talk thank you for

959
00:34:42,719 --> 00:34:44,719
that thank you um you showed us a few

960
00:34:44,719 --> 00:34:46,560
packers but you identified them via

961
00:34:46,560 --> 00:34:48,079
their signatures via the patterns in the

962
00:34:48,079 --> 00:34:50,320
code um but clearly everyone is using

963
00:34:50,320 --> 00:34:52,239
similar things do you have to know what

964
00:34:52,239 --> 00:34:54,639
vendors or um i don't know if there's

965
00:34:54,639 --> 00:34:56,000
free software out there that everyone is

966
00:34:56,000 --> 00:34:57,359
using for this

967
00:34:57,359 --> 00:34:59,119
so it's a great question first of all i

968
00:34:59,119 --> 00:35:01,520
didn't go into the vendor space of a

969
00:35:01,520 --> 00:35:03,520
fuscation that's

970
00:35:03,520 --> 00:35:05,280
different as i mentioned at beginning

971
00:35:05,280 --> 00:35:08,640
the pareto principle 80 20. i'm not into

972
00:35:08,640 --> 00:35:10,800
looking into those that are creating apt

973
00:35:10,800 --> 00:35:13,280
kind of you know especially crafted

974
00:35:13,280 --> 00:35:15,359
obfuscation or someone that is using a

975
00:35:15,359 --> 00:35:17,520
vendor-wise kind of authentication it

976
00:35:17,520 --> 00:35:19,040
was more of the

977
00:35:19,040 --> 00:35:21,839
open source or online kind of package

978
00:35:21,839 --> 00:35:24,320
that i was able to track and those were

979
00:35:24,320 --> 00:35:26,640
the one that were massively used in that

980
00:35:26,640 --> 00:35:28,560
sense in the context of numbers

981
00:35:28,560 --> 00:35:31,839
uh so i was more focused on those

982
00:35:31,839 --> 00:35:34,000
um did i address the question

983
00:35:34,000 --> 00:35:35,599
yeah thank you i was i was just mostly

984
00:35:35,599 --> 00:35:36,800
curious if there are i don't know

985
00:35:36,800 --> 00:35:38,640
popular projects that represent what

986
00:35:38,640 --> 00:35:40,960
these packers uh generate

987
00:35:40,960 --> 00:35:42,400
um

988
00:35:42,400 --> 00:35:44,640
different use cases different you know

989
00:35:44,640 --> 00:35:46,960
thank you most of them online like i

990
00:35:46,960 --> 00:35:48,800
would assume that you will do a google

991
00:35:48,800 --> 00:35:50,960
search for

992
00:35:50,960 --> 00:35:52,560
doing an online

993
00:35:52,560 --> 00:35:54,640
obfuscation and you will get into some

994
00:35:54,640 --> 00:35:56,400
of them really easily

995
00:35:56,400 --> 00:35:58,000
one other question that i had uh if

996
00:35:58,000 --> 00:35:59,040
that's okay

997
00:35:59,040 --> 00:36:00,480
is um you mentioned at the beginning of

998
00:36:00,480 --> 00:36:02,800
the talk about um

999
00:36:02,800 --> 00:36:04,320
taking these

1000
00:36:04,320 --> 00:36:06,160
uh this obfuscated code that was you

1001
00:36:06,160 --> 00:36:07,599
know packed and it has a similar

1002
00:36:07,599 --> 00:36:10,839
structure but dissimilar identifiers

1003
00:36:10,839 --> 00:36:14,400
um and turning those into an ast to look

1004
00:36:14,400 --> 00:36:15,920
for the patterns that way

1005
00:36:15,920 --> 00:36:17,680
and then i didn't understand

1006
00:36:17,680 --> 00:36:19,200
if you did go with that approach or if

1007
00:36:19,200 --> 00:36:20,720
you used a machine learning model that

1008
00:36:20,720 --> 00:36:22,160
was something different and why didn't

1009
00:36:22,160 --> 00:36:24,240
you go with that i did that approach

1010
00:36:24,240 --> 00:36:26,240
that was the first phase of creating a

1011
00:36:26,240 --> 00:36:28,480
proof of concept tool that for each

1012
00:36:28,480 --> 00:36:30,320
packer i created this

1013
00:36:30,320 --> 00:36:33,200
structure based signature right using

1014
00:36:33,200 --> 00:36:35,760
the concept of ast and and looking into

1015
00:36:35,760 --> 00:36:37,599
the patterns that are really relevant

1016
00:36:37,599 --> 00:36:39,200
and repetitive in the context of a

1017
00:36:39,200 --> 00:36:42,320
structure i was taking that given

1018
00:36:42,320 --> 00:36:44,960
a proof of concept

1019
00:36:44,960 --> 00:36:47,119
tool that i wrote run it on a lot of

1020
00:36:47,119 --> 00:36:48,880
data sets and that's the result that i

1021
00:36:48,880 --> 00:36:51,040
was showing and on those results we were

1022
00:36:51,040 --> 00:36:53,440
able to see that some of my detection

1023
00:36:53,440 --> 00:36:55,599
shows that obfuscation doesn't mean

1024
00:36:55,599 --> 00:36:57,760
malicious and that led me to move into

1025
00:36:57,760 --> 00:36:59,119
the machine learning approach to like to

1026
00:36:59,119 --> 00:37:00,880
differentiate between malicious versus

1027
00:37:00,880 --> 00:37:04,640
benign i see thanks very much sure

1028
00:37:04,640 --> 00:37:06,880
okay

1029
00:37:06,880 --> 00:37:09,040
hi um you mentioned some of the false

1030
00:37:09,040 --> 00:37:11,359
positives that you saw

1031
00:37:11,359 --> 00:37:13,200
by any chance did you see anybody

1032
00:37:13,200 --> 00:37:16,160
actually using it not for malicious

1033
00:37:16,160 --> 00:37:17,520
that would show up in the false puzzles

1034
00:37:17,520 --> 00:37:20,839
it was actually for more well security

1035
00:37:20,839 --> 00:37:23,520
reasons so

1036
00:37:23,520 --> 00:37:25,599
false positive is is a

1037
00:37:25,599 --> 00:37:28,480
i need to frame the the concept of false

1038
00:37:28,480 --> 00:37:30,240
positive on this research

1039
00:37:30,240 --> 00:37:32,320
because in the context of me creating

1040
00:37:32,320 --> 00:37:34,079
proof of concept tool that know how to

1041
00:37:34,079 --> 00:37:36,320
detect those packers i didn't have any

1042
00:37:36,320 --> 00:37:39,200
false positive meaning i didn't detected

1043
00:37:39,200 --> 00:37:40,480
structures

1044
00:37:40,480 --> 00:37:41,599
that were

1045
00:37:41,599 --> 00:37:43,520
the same structure that being used for

1046
00:37:43,520 --> 00:37:45,920
fuscation but actually are not being off

1047
00:37:45,920 --> 00:37:47,520
it's not of obfuscation it's something

1048
00:37:47,520 --> 00:37:49,599
entirely different i didn't have that

1049
00:37:49,599 --> 00:37:52,000
kind of false positive i think what

1050
00:37:52,000 --> 00:37:54,000
created the sense of false positive is

1051
00:37:54,000 --> 00:37:56,079
that we were able to see that some of

1052
00:37:56,079 --> 00:37:58,880
the packers

1053
00:37:59,119 --> 00:38:01,520
being used in a context of malicious

1054
00:38:01,520 --> 00:38:03,359
intents and some of those pacquiao being

1055
00:38:03,359 --> 00:38:05,520
used in the context of b9

1056
00:38:05,520 --> 00:38:08,000
and that created some sort of a sense of

1057
00:38:08,000 --> 00:38:10,480
false policy but i didn't have any false

1058
00:38:10,480 --> 00:38:12,480
positive in that sense oh it gotcha so

1059
00:38:12,480 --> 00:38:14,720
no i i totally get that the i was just

1060
00:38:14,720 --> 00:38:17,119
curious if you saw other use cases

1061
00:38:17,119 --> 00:38:18,800
around the benign

1062
00:38:18,800 --> 00:38:20,400
for obfuscation

1063
00:38:20,400 --> 00:38:21,359
um

1064
00:38:21,359 --> 00:38:23,760
the the examples that i give gave in the

1065
00:38:23,760 --> 00:38:25,920
email and the cookies those were the

1066
00:38:25,920 --> 00:38:27,359
most used one

1067
00:38:27,359 --> 00:38:29,599
but again it's it's it's very like it's

1068
00:38:29,599 --> 00:38:31,760
these are open source kind of services

1069
00:38:31,760 --> 00:38:33,920
you can go into that take your code

1070
00:38:33,920 --> 00:38:35,680
obfuscate it and put it in whatever you

1071
00:38:35,680 --> 00:38:38,400
want to do with that and in that sense

1072
00:38:38,400 --> 00:38:40,000
the scars are the limit

1073
00:38:40,000 --> 00:38:42,160
so i question your

1074
00:38:42,160 --> 00:38:44,720
belief that it's expensive to expand

1075
00:38:44,720 --> 00:38:45,599
these

1076
00:38:45,599 --> 00:38:47,680
to the point of the eval

1077
00:38:47,680 --> 00:38:50,000
and actually look at the content and

1078
00:38:50,000 --> 00:38:52,240
decide if it's malicious or not although

1079
00:38:52,240 --> 00:38:54,320
it's great that you try to recognize

1080
00:38:54,320 --> 00:38:56,480
obfuscation you know i think you

1081
00:38:56,480 --> 00:38:57,760
actually have to take it to the point

1082
00:38:57,760 --> 00:38:59,280
where you look at the content to figure

1083
00:38:59,280 --> 00:39:02,880
out if it's malicious or not so

1084
00:39:02,880 --> 00:39:05,680
but in theory you know one one other

1085
00:39:05,680 --> 00:39:08,480
point you know the ml proponents would

1086
00:39:08,480 --> 00:39:11,359
say ml is adaptive when the adversary

1087
00:39:11,359 --> 00:39:12,960
changes their pattern

1088
00:39:12,960 --> 00:39:14,880
so i think it's great that you went from

1089
00:39:14,880 --> 00:39:17,520
the ast model into something with ml

1090
00:39:17,520 --> 00:39:19,599
because that might scale much better

1091
00:39:19,599 --> 00:39:22,880
with adaptation of the packers anyway

1092
00:39:22,880 --> 00:39:24,960
yeah this is also my area of research so

1093
00:39:24,960 --> 00:39:29,200
i totally agree in that sense and and

1094
00:39:29,200 --> 00:39:30,560
and and

1095
00:39:30,560 --> 00:39:32,800
obviously when i was trying to do things

1096
00:39:32,800 --> 00:39:34,880
that are more generic in the context of

1097
00:39:34,880 --> 00:39:36,480
machine learning i started to see

1098
00:39:36,480 --> 00:39:38,800
results that are not really

1099
00:39:38,800 --> 00:39:42,800
uh make sense but when i focus my

1100
00:39:42,800 --> 00:39:44,720
machine learning per packer and the

1101
00:39:44,720 --> 00:39:47,440
result that put more of the feature are

1102
00:39:47,440 --> 00:39:49,280
more associated with the packer and the

1103
00:39:49,280 --> 00:39:51,520
action that that packer makes and that

1104
00:39:51,520 --> 00:39:52,960
makes more sense to make a decision

1105
00:39:52,960 --> 00:39:54,400
based on that and obviously these are

1106
00:39:54,400 --> 00:39:56,000
statistical decisions right it's it's

1107
00:39:56,000 --> 00:39:57,280
machine learning it's it's a matter of

1108
00:39:57,280 --> 00:39:58,560
statistics so

1109
00:39:58,560 --> 00:40:00,560
statistically i had good result that

1110
00:40:00,560 --> 00:40:02,400
doesn't mean that you can also make

1111
00:40:02,400 --> 00:40:03,839
mistakes right

1112
00:40:03,839 --> 00:40:07,280
depends on how the model works

1113
00:40:07,280 --> 00:40:09,839
uh thank you for the talk i have three

1114
00:40:09,839 --> 00:40:11,599
quick questions uh

1115
00:40:11,599 --> 00:40:13,520
so uh you kind of answered the first

1116
00:40:13,520 --> 00:40:15,119
question uh

1117
00:40:15,119 --> 00:40:17,440
you want to extend the the experimental

1118
00:40:17,440 --> 00:40:19,680
part of your approach uh i was curious

1119
00:40:19,680 --> 00:40:21,920
to have more details about the data set

1120
00:40:21,920 --> 00:40:24,160
so i'm gonna skip this and uh the

1121
00:40:24,160 --> 00:40:25,680
relationship you showed between

1122
00:40:25,680 --> 00:40:27,920
different hashes where did you get those

1123
00:40:27,920 --> 00:40:29,839
relationships from

1124
00:40:29,839 --> 00:40:30,800
so

1125
00:40:30,800 --> 00:40:32,800
think about it like that so we know we

1126
00:40:32,800 --> 00:40:35,599
have benign data set that we know that

1127
00:40:35,599 --> 00:40:37,599
there are matches of

1128
00:40:37,599 --> 00:40:39,440
javascript being obfuscated on those

1129
00:40:39,440 --> 00:40:41,040
files that are benign

1130
00:40:41,040 --> 00:40:43,839
and on each of those files i took that

1131
00:40:43,839 --> 00:40:44,640
well

1132
00:40:44,640 --> 00:40:46,720
the javascript component out of those

1133
00:40:46,720 --> 00:40:48,160
files the the

1134
00:40:48,160 --> 00:40:49,839
section of javascript components on

1135
00:40:49,839 --> 00:40:52,640
those files and created hashes for those

1136
00:40:52,640 --> 00:40:53,920
javascript

1137
00:40:53,920 --> 00:40:55,760
parts of that

1138
00:40:55,760 --> 00:40:58,000
files on those pages and create hash

1139
00:40:58,000 --> 00:41:00,240
values for them and just save that and

1140
00:41:00,240 --> 00:41:02,000
then i was just doing some sort of a

1141
00:41:02,000 --> 00:41:03,200
plotting of that and showing the

1142
00:41:03,200 --> 00:41:05,040
relationship between them and that

1143
00:41:05,040 --> 00:41:07,760
showed me the fact that well

1144
00:41:07,760 --> 00:41:09,760
i can see two different websites that

1145
00:41:09,760 --> 00:41:11,599
both of them are highly popular right

1146
00:41:11,599 --> 00:41:14,079
according to alexa um

1147
00:41:14,079 --> 00:41:16,560
they have well we have i'm working in

1148
00:41:16,560 --> 00:41:18,319
akamai so we have a lot of data to back

1149
00:41:18,319 --> 00:41:20,240
that up and try to figure out what does

1150
00:41:20,240 --> 00:41:21,920
it mean a popular website in the world

1151
00:41:21,920 --> 00:41:23,280
in that sense

1152
00:41:23,280 --> 00:41:25,040
and i was able to see it's actually the

1153
00:41:25,040 --> 00:41:27,359
same kind of code being hash so

1154
00:41:27,359 --> 00:41:29,520
it's it's a different use case from the

1155
00:41:29,520 --> 00:41:31,119
scenario of

1156
00:41:31,119 --> 00:41:32,880
adversary kind of point of view of

1157
00:41:32,880 --> 00:41:35,440
taking file and doing each time

1158
00:41:35,440 --> 00:41:37,680
obfuscation creating a version of that

1159
00:41:37,680 --> 00:41:39,760
file and deploying that in different

1160
00:41:39,760 --> 00:41:41,680
contexts it was use case of someone

1161
00:41:41,680 --> 00:41:43,839
creating security by obscurity taking

1162
00:41:43,839 --> 00:41:46,720
the same code doing the same one time

1163
00:41:46,720 --> 00:41:48,720
obfuscation and push that to different

1164
00:41:48,720 --> 00:41:51,520
you know website and that created the

1165
00:41:51,520 --> 00:41:54,000
the relationship that i was seeing there

1166
00:41:54,000 --> 00:41:56,400
thank you and the last question uh is uh

1167
00:41:56,400 --> 00:41:58,960
you said well some packers are more

1168
00:41:58,960 --> 00:42:01,680
associated with malicious activities why

1169
00:42:01,680 --> 00:42:04,960
do you think it's that way

1170
00:42:05,440 --> 00:42:07,599
that's a good question i i didn't

1171
00:42:07,599 --> 00:42:09,920
thought about it but i can try to think

1172
00:42:09,920 --> 00:42:12,160
of the fact that maybe they were created

1173
00:42:12,160 --> 00:42:14,800
by adversaries therefore being used by

1174
00:42:14,800 --> 00:42:17,119
them

1175
00:42:17,119 --> 00:42:20,319
some of them probably been introduced in

1176
00:42:20,319 --> 00:42:22,720
the context of for example fishing kits

1177
00:42:22,720 --> 00:42:25,040
that are including

1178
00:42:25,040 --> 00:42:27,440
those kind of packers as part of the

1179
00:42:27,440 --> 00:42:29,440
fishing kit and being used in that

1180
00:42:29,440 --> 00:42:30,400
context

1181
00:42:30,400 --> 00:42:32,880
and are not as other

1182
00:42:32,880 --> 00:42:35,440
packers that are actually online

1183
00:42:35,440 --> 00:42:38,240
websites that really good and very nice

1184
00:42:38,240 --> 00:42:40,240
website that you can create different

1185
00:42:40,240 --> 00:42:42,400
configuration of the you know

1186
00:42:42,400 --> 00:42:44,400
obfuscation that you want to do and

1187
00:42:44,400 --> 00:42:45,839
everybody are using that and that's a

1188
00:42:45,839 --> 00:42:48,480
service right so maybe that

1189
00:42:48,480 --> 00:42:50,400
was the reason why we were seeing

1190
00:42:50,400 --> 00:42:53,839
different you know results

1191
00:42:54,079 --> 00:42:55,520
um

1192
00:42:55,520 --> 00:42:56,480
so

1193
00:42:56,480 --> 00:42:59,200
i have a question it's uh of course

1194
00:42:59,200 --> 00:43:02,240
when you say the malicious uh javascript

1195
00:43:02,240 --> 00:43:03,760
as you were saying pointing out like

1196
00:43:03,760 --> 00:43:05,920
maybe phishing campaigns or something

1197
00:43:05,920 --> 00:43:08,720
are you also like maybe looking at uh

1198
00:43:08,720 --> 00:43:10,880
you know use after free

1199
00:43:10,880 --> 00:43:14,160
attacks on javascript engines within

1200
00:43:14,160 --> 00:43:17,118
browsers is that

1201
00:43:17,599 --> 00:43:20,079
that's well that's an issue that i

1202
00:43:20,079 --> 00:43:22,400
didn't go to that direction and my you

1203
00:43:22,400 --> 00:43:25,280
know assumption was that i'm focused on

1204
00:43:25,280 --> 00:43:27,359
file javascript files being obfuscated

1205
00:43:27,359 --> 00:43:29,359
and how can i detect them while they're

1206
00:43:29,359 --> 00:43:31,599
in transit that that was my approach

1207
00:43:31,599 --> 00:43:33,280
okay in that sense

1208
00:43:33,280 --> 00:43:36,640
other questions great

1209
00:43:39,280 --> 00:43:41,520
um yeah so i arrived like towards the

1210
00:43:41,520 --> 00:43:42,720
end of the talk so we may have covered

1211
00:43:42,720 --> 00:43:44,640
this towards the beginning but

1212
00:43:44,640 --> 00:43:46,160
uh so from what i understand it seems

1213
00:43:46,160 --> 00:43:47,599
like most of the

1214
00:43:47,599 --> 00:43:49,119
uh

1215
00:43:49,119 --> 00:43:50,800
analysis that you did was like static

1216
00:43:50,800 --> 00:43:52,720
right yes so at the beginning of the

1217
00:43:52,720 --> 00:43:54,720
presentation used four different

1218
00:43:54,720 --> 00:43:56,800
objectives that i had at the beginning

1219
00:43:56,800 --> 00:43:58,480
of the project and one of those

1220
00:43:58,480 --> 00:44:00,319
objectives was that

1221
00:44:00,319 --> 00:44:02,560
in the context of my research which is

1222
00:44:02,560 --> 00:44:04,240
related to my work and some of the

1223
00:44:04,240 --> 00:44:05,839
things that i was doing

1224
00:44:05,839 --> 00:44:08,400
i was looking for a solution that can do

1225
00:44:08,400 --> 00:44:10,400
static code analysis meaning i don't

1226
00:44:10,400 --> 00:44:12,079
have the privilege to do rendering of

1227
00:44:12,079 --> 00:44:13,599
the page and looking into javascript

1228
00:44:13,599 --> 00:44:15,200
once it's been rendered

1229
00:44:15,200 --> 00:44:17,280
it needs to be decision making on the

1230
00:44:17,280 --> 00:44:19,520
file as it's in transit okay and

1231
00:44:19,520 --> 00:44:21,839
therefore i use the static code analysis

1232
00:44:21,839 --> 00:44:23,839
approach which is much more

1233
00:44:23,839 --> 00:44:25,359
performance effective because that's

1234
00:44:25,359 --> 00:44:27,680
also one of the objectives that i had

1235
00:44:27,680 --> 00:44:31,440
okay okay that makes sense um

1236
00:44:32,160 --> 00:44:35,799
okay other questions

1237
00:44:40,400 --> 00:44:43,200
that's a good one uh linkedin that would

1238
00:44:43,200 --> 00:44:45,680
be a great approach

1239
00:44:45,680 --> 00:44:49,599
we will find a way to to get in touch

1240
00:44:49,599 --> 00:44:51,839
okay others

1241
00:44:51,839 --> 00:44:54,800
any uh comments questions stimulating

1242
00:44:54,800 --> 00:44:56,400
ideas

1243
00:44:56,400 --> 00:44:58,000
it's the end of the day you know people

1244
00:44:58,000 --> 00:45:00,000
yeah hey it's uh

1245
00:45:00,000 --> 00:45:01,520
i wake up

1246
00:45:01,520 --> 00:45:05,520
early massachusetts time so i'm like

1247
00:45:05,520 --> 00:45:09,200
on my last few the drops of fuel well

1248
00:45:09,200 --> 00:45:11,599
thank you very much for coming thank you

1249
00:45:11,599 --> 00:45:14,319
a lot here today so that's for sure and

1250
00:45:14,319 --> 00:45:16,400
you've been a fantastic audience i hope

1251
00:45:16,400 --> 00:45:18,960
you enjoyed b-sides lots of things here

1252
00:45:18,960 --> 00:45:22,079
to do in san francisco go to the hate

1253
00:45:22,079 --> 00:45:24,960
thank you for for you know

1254
00:45:24,960 --> 00:45:27,359
accomplish that you know working with us

1255
00:45:27,359 --> 00:45:29,280
the entire day and doing all those

1256
00:45:29,280 --> 00:45:30,960
presentations and all that great

1257
00:45:30,960 --> 00:45:33,359
introduction and thank you it's been fun

1258
00:45:33,359 --> 00:45:34,160
so

1259
00:45:34,160 --> 00:45:37,799
come back next year

