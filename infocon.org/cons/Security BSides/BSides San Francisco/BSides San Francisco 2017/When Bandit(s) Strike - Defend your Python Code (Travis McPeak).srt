1
00:00:06,270 --> 00:00:10,750
<font color="#E5E5E5">welcome back</font>

2
00:00:07,570 --> 00:00:12,350
lunch<font color="#E5E5E5"> to track two in the afternoon for</font>

3
00:00:10,750 --> 00:00:14,940
security<font color="#CCCCCC"> besides difference</font>

4
00:00:12,350 --> 00:00:16,529
go I brought

5
00:00:14,940 --> 00:00:22,140
<font color="#CCCCCC">and and Fitbit big thanks to our</font>

6
00:00:16,529 --> 00:00:23,130
sponsors<font color="#E5E5E5"> you have to clap for</font><font color="#CCCCCC"> the</font>

7
00:00:22,140 --> 00:00:25,380
<font color="#CCCCCC">punches</font>

8
00:00:23,130 --> 00:00:27,750
<font color="#CCCCCC">I'm Andrew this is</font><font color="#E5E5E5"> travis</font><font color="#CCCCCC"> mcpeak</font>

9
00:00:25,380 --> 00:00:32,278
<font color="#E5E5E5">presenting when</font><font color="#CCCCCC"> bandit strikes defend</font>

10
00:00:27,750 --> 00:00:35,190
<font color="#E5E5E5">your</font><font color="#CCCCCC"> Python code</font><font color="#E5E5E5"> and without further ado</font>

11
00:00:32,279 --> 00:00:37,260
<font color="#CCCCCC">Travis thank you</font>

12
00:00:35,190 --> 00:00:39,420
thanks everybody<font color="#E5E5E5"> for coming after lunch</font>

13
00:00:37,260 --> 00:00:41,219
<font color="#CCCCCC">i hope everybody</font><font color="#E5E5E5"> enjoyed the pizza</font><font color="#CCCCCC"> the</font>

14
00:00:39,420 --> 00:00:43,829
beer and if you haven't had<font color="#CCCCCC"> the</font><font color="#E5E5E5"> awesome</font>

15
00:00:41,219 --> 00:00:45,840
beer downstairs yet<font color="#E5E5E5"> do it very good</font>

16
00:00:43,829 --> 00:00:48,390
stuff<font color="#CCCCCC"> and thank</font><font color="#E5E5E5"> you for coming to my</font>

17
00:00:45,840 --> 00:00:50,010
talk next door<font color="#CCCCCC"> Jim</font><font color="#E5E5E5"> o'leary is giving an</font>

18
00:00:48,390 --> 00:00:52,920
awesome<font color="#CCCCCC"> talking metrics which I was</font>

19
00:00:50,010 --> 00:00:54,120
fortunate enough to see<font color="#CCCCCC"> that cali a</font>

20
00:00:52,920 --> 00:00:55,769
couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> weeks ago</font>

21
00:00:54,120 --> 00:00:57,780
so for those of you that are missing his

22
00:00:55,769 --> 00:01:01,440
talk to be here<font color="#E5E5E5"> definitely check</font><font color="#CCCCCC"> it out</font>

23
00:00:57,780 --> 00:01:03,269
online<font color="#CCCCCC"> i</font><font color="#E5E5E5"> had a lot of fun watching it so</font>

24
00:01:01,440 --> 00:01:04,800
can<font color="#CCCCCC"> i I'm not gonna do a lot of</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> and</font>

25
00:01:03,269 --> 00:01:06,720
<font color="#E5E5E5">stuff but can you raise your hand please</font>

26
00:01:04,800 --> 00:01:10,110
if you are responsible for the security

27
00:01:06,720 --> 00:01:15,180
of<font color="#CCCCCC"> Python code in some way cool</font>

28
00:01:10,110 --> 00:01:16,740
my people<font color="#CCCCCC"> i</font><font color="#E5E5E5"> always</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> like to start off</font>

29
00:01:15,180 --> 00:01:17,970
with these with<font color="#CCCCCC"> just giving an</font><font color="#E5E5E5"> intro</font>

30
00:01:16,740 --> 00:01:20,190
just so you know how the flow of the

31
00:01:17,970 --> 00:01:21,929
talks going to work<font color="#CCCCCC"> so we'll do intro</font>

32
00:01:20,190 --> 00:01:23,820
and then we're going to talk about how

33
00:01:21,930 --> 00:01:26,160
we can use<font color="#CCCCCC"> bandit to find some issues</font>

34
00:01:23,820 --> 00:01:28,139
<font color="#E5E5E5">and then finally building</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> program</font>

35
00:01:26,160 --> 00:01:29,970
around bend it and what<font color="#CCCCCC"> I'd like to see</font>

36
00:01:28,140 --> 00:01:35,700
happen in the future<font color="#CCCCCC"> and then we'll do</font>

37
00:01:29,970 --> 00:01:39,360
<font color="#CCCCCC">QA some good</font><font color="#E5E5E5"> sweet who this</font>

38
00:01:35,700 --> 00:01:41,880
<font color="#E5E5E5">I'm Travis</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> love that sex</font><font color="#CCCCCC"> I've worked</font>

39
00:01:39,360 --> 00:01:44,130
for IBM cloud<font color="#CCCCCC"> I'm heavily involved in</font>

40
00:01:41,880 --> 00:01:46,619
<font color="#CCCCCC">OpenStack and</font><font color="#E5E5E5"> class boundary security</font>

41
00:01:44,130 --> 00:01:48,330
teams<font color="#E5E5E5"> in fact the</font><font color="#CCCCCC"> OpenStack security</font>

42
00:01:46,620 --> 00:01:49,650
team which<font color="#CCCCCC"> will get you a little bit is</font>

43
00:01:48,330 --> 00:01:52,170
<font color="#E5E5E5">wide and it was created in the first</font>

44
00:01:49,650 --> 00:01:54,360
place we had some problems with<font color="#CCCCCC"> python</font>

45
00:01:52,170 --> 00:01:56,430
code and we wanted<font color="#E5E5E5"> a tool to help find</font>

46
00:01:54,360 --> 00:01:58,230
some of those problems and<font color="#CCCCCC"> i'm also</font>

47
00:01:56,430 --> 00:02:00,690
heavily involved in<font color="#CCCCCC"> a las piernas</font>

48
00:01:58,230 --> 00:02:02,070
<font color="#E5E5E5">chapter any</font><font color="#CCCCCC"> loss</font><font color="#E5E5E5"> members last last show</font>

49
00:02:00,690 --> 00:02:04,440
of hands<font color="#E5E5E5"> promise</font><font color="#CCCCCC"> okay</font>

50
00:02:02,070 --> 00:02:06,660
<font color="#CCCCCC">our office is a very cool organization</font>

51
00:02:04,440 --> 00:02:07,259
if you<font color="#CCCCCC"> live love security</font><font color="#E5E5E5"> please check</font>

52
00:02:06,660 --> 00:02:08,848
them out

53
00:02:07,260 --> 00:02:12,000
we're actually having a happy hour

54
00:02:08,848 --> 00:02:13,500
tonight at dirty water<font color="#E5E5E5"> at</font><font color="#CCCCCC"> 5 30 to 7 30</font>

55
00:02:12,000 --> 00:02:14,940
<font color="#E5E5E5">so if you want to have some beer and</font>

56
00:02:13,500 --> 00:02:20,220
hang out with cool people

57
00:02:14,940 --> 00:02:22,109
please come by<font color="#E5E5E5"> put it this is bandit</font><font color="#CCCCCC"> i'd</font>

58
00:02:20,220 --> 00:02:23,670
totally<font color="#E5E5E5"> stole the</font><font color="#CCCCCC"> slow</font><font color="#E5E5E5"> does not</font><font color="#CCCCCC"> been its</font>

59
00:02:22,110 --> 00:02:25,020
logo<font color="#CCCCCC"> i don't know</font><font color="#E5E5E5"> it all and the</font>

60
00:02:23,670 --> 00:02:27,600
disclaimer at the bottom

61
00:02:25,020 --> 00:02:28,200
<font color="#CCCCCC">Ben is open-source</font><font color="#E5E5E5"> completely free to</font>

62
00:02:27,600 --> 00:02:30,329
use

63
00:02:28,200 --> 00:02:33,119
<font color="#E5E5E5">in fact we encourage people to use it</font>

64
00:02:30,330 --> 00:02:34,739
<font color="#E5E5E5">and its purpose built so</font><font color="#CCCCCC"> I mentioned</font>

65
00:02:33,120 --> 00:02:38,430
that we started doing this work with

66
00:02:34,739 --> 00:02:40,500
<font color="#CCCCCC">OpenStack a while</font><font color="#E5E5E5"> ago and in 2014 the</font>

67
00:02:38,430 --> 00:02:42,660
type of issues that we were seeing<font color="#CCCCCC"> we</font>

68
00:02:40,500 --> 00:02:45,750
suspected that you could just run grip

69
00:02:42,660 --> 00:02:48,510
<font color="#E5E5E5">across code and find things like command</font>

70
00:02:45,750 --> 00:02:50,760
injection<font color="#E5E5E5"> use of</font><font color="#CCCCCC"> weak script</font><font color="#E5E5E5"> algorithms</font>

71
00:02:48,510 --> 00:02:52,470
and stuff like that<font color="#CCCCCC"> and so we actually</font>

72
00:02:50,760 --> 00:02:53,819
started off with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> graph based approach</font>

73
00:02:52,470 --> 00:02:55,500
we<font color="#E5E5E5"> were just like</font><font color="#CCCCCC"> okay let's write some</font>

74
00:02:53,819 --> 00:02:58,708
ground rules<font color="#E5E5E5"> find problems in</font><font color="#CCCCCC"> Python</font>

75
00:02:55,500 --> 00:03:00,450
code and then and then we're at a weird

76
00:02:58,709 --> 00:03:02,489
like a hackathon<font color="#CCCCCC"> or something like</font><font color="#E5E5E5"> that</font>

77
00:03:00,450 --> 00:03:05,160
<font color="#CCCCCC">and</font><font color="#E5E5E5"> my boss at the time</font>

78
00:03:02,489 --> 00:03:06,599
smart guy named<font color="#E5E5E5"> Jamie went away</font><font color="#CCCCCC"> thought</font>

79
00:03:05,160 --> 00:03:08,790
about the problem and came back with the

80
00:03:06,599 --> 00:03:10,349
initial version<font color="#E5E5E5"> of bandit</font><font color="#CCCCCC"> and since</font><font color="#E5E5E5"> then</font>

81
00:03:08,790 --> 00:03:13,620
it has grown into the tool that<font color="#CCCCCC"> i'll be</font>

82
00:03:10,349 --> 00:03:15,899
<font color="#CCCCCC">talking about today we have a few design</font>

83
00:03:13,620 --> 00:03:18,209
goals<font color="#CCCCCC"> prevented we wanted to be easily</font>

84
00:03:15,900 --> 00:03:20,489
customizable<font color="#E5E5E5"> so there are different</font>

85
00:03:18,209 --> 00:03:22,110
workflows that you might use<font color="#E5E5E5"> for example</font>

86
00:03:20,489 --> 00:03:24,569
you might use it as a penetration tester

87
00:03:22,110 --> 00:03:27,540
and just say show me all of the things

88
00:03:24,569 --> 00:03:30,179
that might possibly be issues<font color="#E5E5E5"> now when</font>

89
00:03:27,540 --> 00:03:32,280
you do that<font color="#E5E5E5"> it's very noisy and so it</font>

90
00:03:30,180 --> 00:03:33,959
might not be appropriate to run<font color="#CCCCCC"> bandit</font>

91
00:03:32,280 --> 00:03:37,799
in the same way<font color="#E5E5E5"> if you're going to do</font>

92
00:03:33,959 --> 00:03:40,680
like a gate check job for example so we

93
00:03:37,799 --> 00:03:43,319
wanted to be very customizable<font color="#E5E5E5"> and we</font>

94
00:03:40,680 --> 00:03:44,760
also wanted to be extendable<font color="#E5E5E5"> so we came</font>

95
00:03:43,319 --> 00:03:47,160
up with a certain amount of<font color="#E5E5E5"> tests that</font>

96
00:03:44,760 --> 00:03:49,470
we thought would be useful to us but we

97
00:03:47,160 --> 00:03:51,209
also wanted to make it easy to extend it

98
00:03:49,470 --> 00:03:53,760
for people that want to use the<font color="#CCCCCC"> ASP and</font>

99
00:03:51,209 --> 00:03:55,200
<font color="#CCCCCC">Python to find their own security issues</font>

100
00:03:53,760 --> 00:03:57,810
that<font color="#E5E5E5"> maybe don't apply to our</font>

101
00:03:55,200 --> 00:04:01,290
environment and finally<font color="#CCCCCC"> we wanted to</font><font color="#E5E5E5"> be</font>

102
00:03:57,810 --> 00:04:03,000
<font color="#CCCCCC">lean i personally and I assume a lot of</font>

103
00:04:01,290 --> 00:04:05,850
you have had that experiences with some

104
00:04:03,000 --> 00:04:08,280
static analysis tools in the past<font color="#CCCCCC"> some</font>

105
00:04:05,850 --> 00:04:09,030
of<font color="#E5E5E5"> them are very</font><font color="#CCCCCC"> bloated they take a lot</font>

106
00:04:08,280 --> 00:04:10,560
of space

107
00:04:09,030 --> 00:04:13,079
you can't run it locally on a laptop

108
00:04:10,560 --> 00:04:15,660
very easy and so we wanted<font color="#CCCCCC"> band it to be</font>

109
00:04:13,079 --> 00:04:17,220
something<font color="#E5E5E5"> that quick runs across your</font>

110
00:04:15,660 --> 00:04:18,779
entire code base without waiting half an

111
00:04:17,220 --> 00:04:22,229
hour and<font color="#E5E5E5"> gives you results that you can</font>

112
00:04:18,779 --> 00:04:23,700
do something with<font color="#E5E5E5"> so what kind of issues</font>

113
00:04:22,229 --> 00:04:26,659
are we talking about in<font color="#CCCCCC"> Python code</font>

114
00:04:23,700 --> 00:04:26,659
<font color="#CCCCCC">let's go</font><font color="#E5E5E5"> through a few</font>

115
00:04:28,860 --> 00:04:34,169
<font color="#E5E5E5">first one is command injection in</font><font color="#CCCCCC"> Python</font>

116
00:04:31,830 --> 00:04:36,870
<font color="#CCCCCC">you'll see a lot of times people will</font>

117
00:04:34,169 --> 00:04:38,669
just say<font color="#E5E5E5"> you</font><font color="#CCCCCC"> subprocess</font><font color="#E5E5E5"> to open</font>

118
00:04:36,870 --> 00:04:41,520
something and then you give it a command

119
00:04:38,669 --> 00:04:44,159
along with some<font color="#E5E5E5"> inputs to the command</font>

120
00:04:41,520 --> 00:04:46,650
and finally user input<font color="#E5E5E5"> and then you get</font>

121
00:04:44,159 --> 00:04:49,259
the magical<font color="#CCCCCC"> shell</font><font color="#E5E5E5"> equals true which does</font>

122
00:04:46,650 --> 00:04:51,330
what drops everything you just put it

123
00:04:49,259 --> 00:04:56,610
<font color="#CCCCCC">onto</font><font color="#E5E5E5"> a shell and so you typically see</font>

124
00:04:51,330 --> 00:04:59,520
things like this<font color="#E5E5E5"> if the user</font><font color="#CCCCCC"> put</font>

125
00:04:56,610 --> 00:05:02,340
<font color="#E5E5E5">semicolon cat</font><font color="#CCCCCC"> SED password</font>

126
00:04:59,520 --> 00:05:03,628
it's horrible<font color="#CCCCCC"> to get wasted like this</font>

127
00:05:02,340 --> 00:05:12,419
dog right here

128
00:05:03,629 --> 00:05:15,840
bad news<font color="#CCCCCC"> for got</font><font color="#E5E5E5"> here's</font><font color="#CCCCCC"> another example</font>

129
00:05:12,419 --> 00:05:18,479
people for whatever reason<font color="#E5E5E5"> seemed to</font>

130
00:05:15,840 --> 00:05:20,729
like<font color="#CCCCCC"> the hard code / temp pass</font><font color="#E5E5E5"> and the</font>

131
00:05:18,479 --> 00:05:22,169
<font color="#E5E5E5">problem of course is that if an attacker</font>

132
00:05:20,729 --> 00:05:23,279
can guess which temp file you're going

133
00:05:22,169 --> 00:05:25,650
to use they can do all kinds of stuff

134
00:05:23,279 --> 00:05:27,539
<font color="#CCCCCC">they</font><font color="#E5E5E5"> can make it not usable to you in</font>

135
00:05:25,650 --> 00:05:29,758
which case your<font color="#E5E5E5"> code my terror out or</font>

136
00:05:27,539 --> 00:05:31,529
maybe<font color="#E5E5E5"> they'll convince you to write</font>

137
00:05:29,759 --> 00:05:33,810
something into it that you think<font color="#E5E5E5"> it's</font>

138
00:05:31,529 --> 00:05:35,819
perfectly legit and they have<font color="#E5E5E5"> symlink it</font>

139
00:05:33,810 --> 00:05:38,370
somewhere else<font color="#E5E5E5"> and now all of a sudden</font>

140
00:05:35,819 --> 00:05:40,800
you're causing<font color="#E5E5E5"> up data that you never</font>

141
00:05:38,370 --> 00:05:42,089
intended to be<font color="#CCCCCC"> read in your</font><font color="#E5E5E5"> file so</font>

142
00:05:40,800 --> 00:05:43,860
<font color="#CCCCCC">they're always secure ways of doing this</font>

143
00:05:42,089 --> 00:05:49,020
<font color="#E5E5E5">this is not one of them</font><font color="#CCCCCC"> and so when we</font>

144
00:05:43,860 --> 00:05:51,599
see<font color="#E5E5E5"> this we want to flag it disabled TLS</font>

145
00:05:49,020 --> 00:05:53,818
certificate validation<font color="#E5E5E5"> pls</font><font color="#CCCCCC"> exist for a</font>

146
00:05:51,599 --> 00:05:56,639
reason<font color="#CCCCCC"> there are a lot of things that</font>

147
00:05:53,819 --> 00:05:58,860
you can prevent<font color="#E5E5E5"> attacks vectors by using</font>

148
00:05:56,639 --> 00:06:00,509
<font color="#CCCCCC">TLS and whatever you say verify equals</font>

149
00:05:58,860 --> 00:06:02,969
false like this<font color="#CCCCCC"> you're saying forget</font>

150
00:06:00,509 --> 00:06:05,580
about all that<font color="#CCCCCC"> those</font><font color="#E5E5E5"> jaws protections we</font>

151
00:06:02,969 --> 00:06:07,289
don't want those<font color="#CCCCCC"> people oftentimes see</font>

152
00:06:05,580 --> 00:06:08,580
developers<font color="#E5E5E5"> just doing it because they</font>

153
00:06:07,289 --> 00:06:10,800
don't have certificates in their

154
00:06:08,580 --> 00:06:12,628
development environment<font color="#E5E5E5"> but they forget</font>

155
00:06:10,800 --> 00:06:14,580
to change it back<font color="#E5E5E5"> and then guess what</font>

156
00:06:12,629 --> 00:06:18,960
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> tls protections that you thought</font>

157
00:06:14,580 --> 00:06:21,719
you have you don't have<font color="#CCCCCC"> use of we</font>

158
00:06:18,960 --> 00:06:23,729
cryptography<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not the nineties</font>

159
00:06:21,719 --> 00:06:26,039
anymore md5<font color="#CCCCCC"> is totally broken</font><font color="#E5E5E5"> if you're</font>

160
00:06:23,729 --> 00:06:27,150
doing anything<font color="#E5E5E5"> security</font><font color="#CCCCCC"> do not use</font><font color="#E5E5E5"> md5</font>

161
00:06:26,039 --> 00:06:30,210
for it please

162
00:06:27,150 --> 00:06:32,279
so a lot of times<font color="#CCCCCC"> you will see people</font>

163
00:06:30,210 --> 00:06:33,810
doing<font color="#E5E5E5"> stuff with</font><font color="#CCCCCC"> password storage md5</font>

164
00:06:32,279 --> 00:06:36,180
they're like<font color="#E5E5E5"> okay cool</font>

165
00:06:33,810 --> 00:06:38,630
hashing it good job<font color="#E5E5E5"> but unfortunately we</font>

166
00:06:36,180 --> 00:06:40,640
have<font color="#E5E5E5"> very fast computers nowadays in</font>

167
00:06:38,630 --> 00:06:45,230
is trivial with cloud computing system

168
00:06:40,640 --> 00:06:46,430
computer<font color="#E5E5E5"> ash collision last example</font>

169
00:06:45,230 --> 00:06:49,190
issue<font color="#CCCCCC"> will talk about</font><font color="#E5E5E5"> are promiscuous</font>

170
00:06:46,430 --> 00:06:51,560
<font color="#E5E5E5">file permission</font><font color="#CCCCCC"> I've seen a lot of</font>

171
00:06:49,190 --> 00:06:54,140
developers just say you know<font color="#E5E5E5"> what 777</font>

172
00:06:51,560 --> 00:06:55,880
should work<font color="#CCCCCC"> for all the permissions for</font>

173
00:06:54,140 --> 00:06:57,229
all the things<font color="#E5E5E5"> that's fine and then you</font>

174
00:06:55,880 --> 00:06:59,240
<font color="#E5E5E5">know the idea is that they'll come back</font>

175
00:06:57,230 --> 00:07:01,820
and set something more secure later but

176
00:06:59,240 --> 00:07:04,100
<font color="#E5E5E5">then again people being people sometimes</font>

177
00:07:01,820 --> 00:07:05,719
you forget<font color="#CCCCCC"> and so we look specifically</font>

178
00:07:04,100 --> 00:07:07,850
for that last bit

179
00:07:05,720 --> 00:07:10,100
<font color="#CCCCCC">oftentimes you want your app to</font><font color="#E5E5E5"> be able</font>

180
00:07:07,850 --> 00:07:11,840
to access files that<font color="#CCCCCC"> is dealing with</font><font color="#E5E5E5"> but</font>

181
00:07:10,100 --> 00:07:13,340
<font color="#E5E5E5">there's very little reason that you</font>

182
00:07:11,840 --> 00:07:14,750
would want the world to be able to write

183
00:07:13,340 --> 00:07:17,000
to a file that you're dealing with and

184
00:07:14,750 --> 00:07:18,380
so<font color="#E5E5E5"> anytime we see world writable or like</font>

185
00:07:17,000 --> 00:07:19,100
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I play</font><font color="#E5E5E5"> doesn't look right let's</font>

186
00:07:18,380 --> 00:07:23,360
flag it

187
00:07:19,100 --> 00:07:25,820
ok so that's different very long-winded

188
00:07:23,360 --> 00:07:29,660
intro<font color="#CCCCCC"> let's actually get into using bana</font>

189
00:07:25,820 --> 00:07:32,630
<font color="#CCCCCC">to find some issues so i mentioned in</font>

190
00:07:29,660 --> 00:07:33,620
2014 that<font color="#E5E5E5"> OpenStack was not as secure as</font>

191
00:07:32,630 --> 00:07:35,600
it is today

192
00:07:33,620 --> 00:07:37,130
part of the reason is that is because we

193
00:07:35,600 --> 00:07:40,310
use<font color="#E5E5E5"> bandits to find some of the issues</font>

194
00:07:37,130 --> 00:07:42,890
for example in this case we have

195
00:07:40,310 --> 00:07:46,100
basically<font color="#CCCCCC"> a hard-coded admin admin</font>

196
00:07:42,890 --> 00:07:48,260
credentials to this web UI and what that

197
00:07:46,100 --> 00:07:48,740
means of course is that you can't change

198
00:07:48,260 --> 00:07:50,480
it

199
00:07:48,740 --> 00:07:52,760
it's just admin admin so anybody that

200
00:07:50,480 --> 00:07:54,440
looks at this code<font color="#CCCCCC"> knows exactly what</font>

201
00:07:52,760 --> 00:07:57,620
your username and password is for the UI

202
00:07:54,440 --> 00:07:59,540
<font color="#E5E5E5">and that's one of the things that</font><font color="#CCCCCC"> bandit</font>

203
00:07:57,620 --> 00:08:02,330
<font color="#CCCCCC">can</font><font color="#E5E5E5"> system detects</font><font color="#CCCCCC"> is hard-coded</font>

204
00:07:59,540 --> 00:08:04,370
credentials in fact actually there's

205
00:08:02,330 --> 00:08:07,729
been some very cool work of some of the

206
00:08:04,370 --> 00:08:10,130
people from<font color="#E5E5E5"> lift use string entropy to</font>

207
00:08:07,730 --> 00:08:11,450
<font color="#E5E5E5">textual credentials more accurately than</font>

208
00:08:10,130 --> 00:08:13,040
<font color="#CCCCCC">bandit does itself</font><font color="#E5E5E5"> it's not very</font>

209
00:08:11,450 --> 00:08:15,260
sophisticated it just looks for things

210
00:08:13,040 --> 00:08:19,880
that look like they might be passwords

211
00:08:15,260 --> 00:08:22,310
here's another example in this case

212
00:08:19,880 --> 00:08:24,320
<font color="#CCCCCC">they're using the temp file things I</font>

213
00:08:22,310 --> 00:08:26,900
<font color="#CCCCCC">talk about</font><font color="#E5E5E5"> their writing a sequel file</font>

214
00:08:24,320 --> 00:08:29,690
over there to fix<font color="#CCCCCC"> past so it's always</font>

215
00:08:26,900 --> 00:08:32,090
going to be<font color="#CCCCCC"> tempt create new CD sequel</font>

216
00:08:29,690 --> 00:08:34,130
<font color="#E5E5E5">and then later on in the code</font><font color="#CCCCCC"> they're</font>

217
00:08:32,090 --> 00:08:39,590
just executing that against the sequel

218
00:08:34,130 --> 00:08:41,380
database with the root user so again

219
00:08:39,590 --> 00:08:45,700
when you do stuff like this

220
00:08:41,380 --> 00:08:47,410
<font color="#E5E5E5">wasted not good</font><font color="#CCCCCC"> we were able to fix both</font>

221
00:08:45,700 --> 00:08:49,210
of these issues and a lot more issues

222
00:08:47,410 --> 00:08:52,750
that we won't get into today by using

223
00:08:49,210 --> 00:08:55,000
<font color="#CCCCCC">business</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> I'd</font><font color="#E5E5E5"> like to do at this</font>

224
00:08:52,750 --> 00:08:56,080
point rather than listening to me talk

225
00:08:55,000 --> 00:08:59,010
the whole time

226
00:08:56,080 --> 00:08:59,010
let's find one together

227
00:09:00,910 --> 00:09:09,839
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so the first thing</font><font color="#CCCCCC"> I'm going to do</font><font color="#E5E5E5"> is</font>

228
00:09:05,170 --> 00:09:09,839
I'm going to use my virtual environment

229
00:09:19,860 --> 00:09:23,250
<font color="#E5E5E5">whenever you're working with</font><font color="#CCCCCC"> python code</font>

230
00:09:22,170 --> 00:09:26,160
you want to do<font color="#CCCCCC"> in</font><font color="#E5E5E5"> a virtual environment</font>

231
00:09:23,250 --> 00:09:27,540
<font color="#CCCCCC">otherwise</font><font color="#E5E5E5"> all the dependencies and stuff</font>

232
00:09:26,160 --> 00:09:29,100
that you're dealing with<font color="#E5E5E5"> get installed</font>

233
00:09:27,540 --> 00:09:31,740
on your user account and it gets very

234
00:09:29,100 --> 00:09:34,079
messy<font color="#CCCCCC"> a virtual environment and it's</font><font color="#E5E5E5"> got</font>

235
00:09:31,740 --> 00:09:35,760
been installed now what I'd like to do

236
00:09:34,079 --> 00:09:37,979
is I'd like to run it against ansible

237
00:09:35,760 --> 00:09:39,300
<font color="#E5E5E5">sorry</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> said no more</font><font color="#CCCCCC"> reviews your</font>

238
00:09:37,980 --> 00:09:41,760
questions but you guys have<font color="#E5E5E5"> heard</font><font color="#CCCCCC"> Ansel</font>

239
00:09:39,300 --> 00:09:42,479
<font color="#E5E5E5">right</font><font color="#CCCCCC"> it's pretty popular</font><font color="#E5E5E5"> orchestration</font>

240
00:09:41,760 --> 00:09:45,200
framework

241
00:09:42,480 --> 00:09:45,200
<font color="#CCCCCC">ok cool</font>

242
00:09:52,579 --> 00:09:58,238
<font color="#E5E5E5">and now let's just let's run</font><font color="#CCCCCC"> bandit</font>

243
00:09:54,860 --> 00:09:58,239
<font color="#E5E5E5">against it and see what we come up with</font>

244
00:10:03,130 --> 00:10:08,770
<font color="#E5E5E5">just explain what</font><font color="#CCCCCC"> I've done here so</font>

245
00:10:06,310 --> 00:10:11,890
<font color="#CCCCCC">bandit</font><font color="#E5E5E5"> I'm saying recursively scan the</font>

246
00:10:08,770 --> 00:10:13,870
doc directory because<font color="#CCCCCC"> I'm an ansible</font><font color="#E5E5E5"> and</font>

247
00:10:11,890 --> 00:10:15,880
<font color="#CCCCCC">i'm saying i want to exclude unit tests</font>

248
00:10:13,870 --> 00:10:17,410
<font color="#E5E5E5">we do that because</font><font color="#CCCCCC"> any time that we're</font>

249
00:10:15,880 --> 00:10:19,240
looking at bugs you want to be very

250
00:10:17,410 --> 00:10:21,850
careful that you're not creating noise

251
00:10:19,240 --> 00:10:23,050
where you don't need to be and you don't

252
00:10:21,850 --> 00:10:24,070
want to tell the developers about you

253
00:10:23,050 --> 00:10:25,569
know things that they're doing<font color="#E5E5E5"> in</font>

254
00:10:24,070 --> 00:10:27,370
securely<font color="#CCCCCC"> in</font><font color="#E5E5E5"> code that doesn't make</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> in</font>

255
00:10:25,570 --> 00:10:29,440
production<font color="#CCCCCC"> so</font><font color="#E5E5E5"> let's just exclude the</font>

256
00:10:27,370 --> 00:10:30,940
unit<font color="#CCCCCC"> tests</font><font color="#E5E5E5"> and finally to make sure</font>

257
00:10:29,440 --> 00:10:34,420
we're getting good results<font color="#CCCCCC"> I'm do it</font>

258
00:10:30,940 --> 00:10:37,150
using the<font color="#CCCCCC"> ll</font><font color="#E5E5E5"> and I filters which</font><font color="#CCCCCC"> Ellis</font>

259
00:10:34,420 --> 00:10:38,800
severity filtering and<font color="#CCCCCC"> I</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a confidence</font>

260
00:10:37,150 --> 00:10:41,050
filtering<font color="#E5E5E5"> so what we're going to do when</font>

261
00:10:38,800 --> 00:10:43,270
we get this is we're going to get all of

262
00:10:41,050 --> 00:10:46,270
the issues in ansible<font color="#E5E5E5"> that aren't unit</font>

263
00:10:43,270 --> 00:10:48,490
tests that have a medium<font color="#E5E5E5"> severity and</font>

264
00:10:46,270 --> 00:10:51,040
<font color="#CCCCCC">competence or</font><font color="#E5E5E5"> higher and you'll see</font>

265
00:10:48,490 --> 00:10:52,210
<font color="#E5E5E5">it'll run fairly quickly is not</font><font color="#CCCCCC"> have to</font>

266
00:10:51,040 --> 00:10:54,160
wait long for this

267
00:10:52,210 --> 00:10:56,650
this is one of the things we like about

268
00:10:54,160 --> 00:10:58,449
<font color="#E5E5E5">bandit developers can run this you know</font>

269
00:10:56,650 --> 00:11:00,760
before they<font color="#E5E5E5"> check in code</font><font color="#CCCCCC"> that can run</font>

270
00:10:58,450 --> 00:11:04,840
it<font color="#E5E5E5"> as part of</font><font color="#CCCCCC"> c is no problem</font>

271
00:11:00,760 --> 00:11:07,990
<font color="#CCCCCC">ok so here's here's one issue it's</font>

272
00:11:04,840 --> 00:11:11,020
saying the input method in<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> reads</font>

273
00:11:07,990 --> 00:11:12,910
from standard input<font color="#CCCCCC"> evaluates and runs</font>

274
00:11:11,020 --> 00:11:16,030
the resulting string is<font color="#CCCCCC"> Python source</font>

275
00:11:12,910 --> 00:11:17,800
code that sounds kind of crazy like does

276
00:11:16,030 --> 00:11:19,209
that seem like a reasonable<font color="#CCCCCC"> thing that</font>

277
00:11:17,800 --> 00:11:21,699
<font color="#E5E5E5">anybody else</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> want to do when</font>

278
00:11:19,210 --> 00:11:24,180
they're calling input<font color="#E5E5E5"> let's dig into</font>

279
00:11:21,700 --> 00:11:24,180
that a little bit

280
00:11:31,040 --> 00:11:35,180
<font color="#CCCCCC">ok so this is actually the code in</font>

281
00:11:33,350 --> 00:11:37,160
ansible<font color="#E5E5E5"> I</font><font color="#CCCCCC"> dog it</font><font color="#E5E5E5"> up and put it on</font><font color="#CCCCCC"> slide</font>

282
00:11:35,180 --> 00:11:38,719
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that you guys can see it easier and</font>

283
00:11:37,160 --> 00:11:41,540
what they're doing is they have a prompt

284
00:11:38,720 --> 00:11:44,149
function and what they do is they<font color="#E5E5E5"> they</font>

285
00:11:41,540 --> 00:11:47,899
show the<font color="#E5E5E5"> they get user input and showing</font>

286
00:11:44,149 --> 00:11:50,690
them the prompt that you have passed but

287
00:11:47,899 --> 00:11:52,009
again they might not think that the

288
00:11:50,690 --> 00:11:53,600
input here is actually going to be

289
00:11:52,009 --> 00:11:54,649
executed<font color="#E5E5E5"> as Python code</font>

290
00:11:53,600 --> 00:11:56,750
<font color="#CCCCCC">I don't know</font><font color="#E5E5E5"> about you guys</font><font color="#CCCCCC"> but that</font>

291
00:11:54,649 --> 00:11:59,269
seems pretty sketchy<font color="#E5E5E5"> and when I when I</font>

292
00:11:56,750 --> 00:12:00,949
thought it was like oh that's<font color="#E5E5E5"> not what I</font>

293
00:11:59,269 --> 00:12:03,709
would expect when<font color="#CCCCCC"> i do input so i looked</font>

294
00:12:00,949 --> 00:12:05,750
it up in the documentation and in fact

295
00:12:03,709 --> 00:12:08,779
that's exactly who it's exactly what it

296
00:12:05,750 --> 00:12:13,279
does<font color="#CCCCCC"> it's equivalent to eval raw input</font>

297
00:12:08,779 --> 00:12:16,040
prompt<font color="#E5E5E5"> whoa that sounds pretty bad to me</font>

298
00:12:13,279 --> 00:12:17,930
<font color="#CCCCCC">what i did is i came up</font><font color="#E5E5E5"> with a little</font>

299
00:12:16,040 --> 00:12:21,219
example that we can run through<font color="#E5E5E5"> here to</font>

300
00:12:17,930 --> 00:12:21,219
see what that looks like

301
00:12:38,810 --> 00:12:45,050
<font color="#E5E5E5">so first of all this is just a super</font>

302
00:12:41,720 --> 00:12:47,660
basic script that uses a<font color="#CCCCCC"> the input</font>

303
00:12:45,050 --> 00:12:49,760
function<font color="#CCCCCC"> it just says</font><font color="#E5E5E5"> input would you</font>

304
00:12:47,660 --> 00:12:51,050
like a prize and then that's it<font color="#E5E5E5"> that's</font>

305
00:12:49,760 --> 00:12:54,189
the entire script

306
00:12:51,050 --> 00:12:54,189
let's see what happens when<font color="#E5E5E5"> we</font><font color="#CCCCCC"> run</font>

307
00:12:57,290 --> 00:13:04,730
would you like<font color="#E5E5E5"> a prize</font>

308
00:13:01,310 --> 00:13:07,430
yes<font color="#E5E5E5"> okay so it looks</font><font color="#CCCCCC"> like it is actually</font>

309
00:13:04,730 --> 00:13:09,620
trying to execute my my input<font color="#CCCCCC"> that looks</font>

310
00:13:07,430 --> 00:13:11,900
pretty sketchy to me<font color="#CCCCCC"> I wonder if we can</font>

311
00:13:09,620 --> 00:13:15,580
exploit that<font color="#CCCCCC"> what if instead of saying</font>

312
00:13:11,900 --> 00:13:15,579
yes if<font color="#CCCCCC"> I were to do something like this</font>

313
00:13:24,700 --> 00:13:30,010
<font color="#CCCCCC">I</font><font color="#E5E5E5"> think it's gonna work</font><font color="#CCCCCC"> here who</font><font color="#E5E5E5"> could</font>

314
00:13:28,450 --> 00:13:30,790
<font color="#E5E5E5">be kind of a bad</font><font color="#CCCCCC"> time of it and</font><font color="#E5E5E5"> work</font>

315
00:13:30,010 --> 00:13:33,189
with<font color="#E5E5E5"> it</font>

316
00:13:30,790 --> 00:13:34,990
holy shit it's just<font color="#CCCCCC"> better</font><font color="#E5E5E5"> and just</font><font color="#CCCCCC"> ran</font>

317
00:13:33,190 --> 00:13:36,370
my password list<font color="#CCCCCC"> then dumped it out so</font>

318
00:13:34,990 --> 00:13:39,310
you can actually get command injection

319
00:13:36,370 --> 00:13:41,470
with this<font color="#CCCCCC"> is why am i showing you guys</font>

320
00:13:39,310 --> 00:13:43,359
this<font color="#E5E5E5"> is this is this</font><font color="#CCCCCC"> really being super</font>

321
00:13:41,470 --> 00:13:49,720
irresponsible and dropping dropping<font color="#CCCCCC"> all</font>

322
00:13:43,360 --> 00:13:51,760
day on the ansible project<font color="#E5E5E5"> it turns out</font>

323
00:13:49,720 --> 00:13:55,120
it's not<font color="#CCCCCC"> i dug into it I was like wow</font>

324
00:13:51,760 --> 00:13:57,340
this is kind of<font color="#E5E5E5"> crazy bug and they have</font>

325
00:13:55,120 --> 00:14:00,730
code up earlier in the project that does

326
00:13:57,340 --> 00:14:03,010
<font color="#E5E5E5">this</font><font color="#CCCCCC"> it says are we running in Python to</font>

327
00:14:00,730 --> 00:14:05,260
you<font color="#E5E5E5"> if we are then we need to use raw</font>

328
00:14:03,010 --> 00:14:07,420
input which is safer<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> we're</font>

329
00:14:05,260 --> 00:14:08,170
<font color="#E5E5E5">running in</font><font color="#CCCCCC"> Python 3 then go ahead</font><font color="#E5E5E5"> inputs</font>

330
00:14:07,420 --> 00:14:10,689
fine

331
00:14:08,170 --> 00:14:12,339
so what<font color="#E5E5E5"> I would like to see if</font><font color="#CCCCCC"> I'm</font>

332
00:14:10,690 --> 00:14:15,040
running<font color="#CCCCCC"> behind</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> i spent you know half</font>

333
00:14:12,340 --> 00:14:16,510
hour 45 minutes looking into this bug<font color="#CCCCCC"> it</font>

334
00:14:15,040 --> 00:14:19,089
seems like it would make sense to put a

335
00:14:16,510 --> 00:14:21,220
comment here and say hey guys<font color="#E5E5E5"> don't</font>

336
00:14:19,090 --> 00:14:22,510
worry we're not exposing this<font color="#CCCCCC"> on</font><font color="#E5E5E5"> trusted</font>

337
00:14:21,220 --> 00:14:24,940
user input that<font color="#E5E5E5"> we're going to execute</font>

338
00:14:22,510 --> 00:14:27,490
<font color="#E5E5E5">and so what I would do if I was running</font>

339
00:14:24,940 --> 00:14:29,860
<font color="#CCCCCC">bandaid on</font><font color="#E5E5E5"> my project here invincible</font><font color="#CCCCCC"> is</font>

340
00:14:27,490 --> 00:14:31,900
<font color="#CCCCCC">was my baby i would put</font><font color="#E5E5E5"> a comment here</font>

341
00:14:29,860 --> 00:14:33,430
<font color="#CCCCCC">when</font><font color="#E5E5E5"> I would say don't worry</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> thought</font>

342
00:14:31,900 --> 00:14:36,970
<font color="#E5E5E5">about this and so the next person that</font>

343
00:14:33,430 --> 00:14:38,109
comes along<font color="#E5E5E5"> doesn't spend time wasting</font>

344
00:14:36,970 --> 00:14:42,670
their time on this

345
00:14:38,110 --> 00:14:44,560
<font color="#CCCCCC">ok let's switch gears a little bit and</font>

346
00:14:42,670 --> 00:14:46,240
talk about how you might build<font color="#E5E5E5"> then it</font>

347
00:14:44,560 --> 00:14:52,030
into your program if you're responsible

348
00:14:46,240 --> 00:14:56,260
for a<font color="#CCCCCC"> code base this</font><font color="#E5E5E5"> is the essential</font>

349
00:14:52,030 --> 00:14:59,110
<font color="#E5E5E5">workflow</font><font color="#CCCCCC"> your run</font><font color="#E5E5E5"> bandit</font><font color="#CCCCCC"> find bugs to</font>

350
00:14:56,260 --> 00:15:04,660
fix the bus<font color="#CCCCCC"> in a</font><font color="#E5E5E5"> state where</font><font color="#CCCCCC"> there's no</font>

351
00:14:59,110 --> 00:15:06,190
more bugs and then<font color="#E5E5E5"> you profit now of</font>

352
00:15:04,660 --> 00:15:09,400
<font color="#E5E5E5">course the hard part in this whole thing</font>

353
00:15:06,190 --> 00:15:10,810
was the<font color="#CCCCCC"> remove bugs part so let's let's</font>

354
00:15:09,400 --> 00:15:11,560
<font color="#CCCCCC">talk a little bit more about how that</font>

355
00:15:10,810 --> 00:15:15,609
works

356
00:15:11,560 --> 00:15:17,260
<font color="#CCCCCC">ok so basically when we talk about</font>

357
00:15:15,610 --> 00:15:19,360
removing above we're<font color="#E5E5E5"> going to do one of</font>

358
00:15:17,260 --> 00:15:22,450
the following things here<font color="#E5E5E5"> we're going to</font>

359
00:15:19,360 --> 00:15:25,420
use<font color="#CCCCCC"> no sec which tells</font><font color="#E5E5E5"> bandit</font><font color="#CCCCCC"> ok humans</font>

360
00:15:22,450 --> 00:15:27,730
look at this<font color="#E5E5E5"> it's not a security but</font>

361
00:15:25,420 --> 00:15:29,860
like for example<font color="#E5E5E5"> were using md5 here</font>

362
00:15:27,730 --> 00:15:31,570
just as a<font color="#CCCCCC"> efficient hash algorithm</font><font color="#E5E5E5"> we're</font>

363
00:15:29,860 --> 00:15:33,460
not using it for any security function

364
00:15:31,570 --> 00:15:36,040
<font color="#E5E5E5">if you're talking about just</font>

365
00:15:33,460 --> 00:15:37,990
<font color="#CCCCCC">non-security function md5 great you know</font>

366
00:15:36,040 --> 00:15:39,430
<font color="#CCCCCC">it's quick efficient in</font>

367
00:15:37,990 --> 00:15:41,500
all<font color="#CCCCCC"> that's that there's no reason not to</font>

368
00:15:39,430 --> 00:15:44,050
use it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so if you're a security</font>

369
00:15:41,500 --> 00:15:45,279
person you dig into it and you say<font color="#E5E5E5"> it's</font>

370
00:15:44,050 --> 00:15:46,810
fine<font color="#CCCCCC"> we're not</font><font color="#E5E5E5"> doing anything</font>

371
00:15:45,279 --> 00:15:49,300
security with it you can put<font color="#E5E5E5"> a</font><font color="#CCCCCC"> nanosec</font>

372
00:15:46,810 --> 00:15:50,560
<font color="#E5E5E5">tag and hopefully helpful comment like I</font>

373
00:15:49,300 --> 00:15:53,680
wish you would have<font color="#E5E5E5"> at the ansible thing</font>

374
00:15:50,560 --> 00:15:55,599
<font color="#E5E5E5">and then from then on and</font><font color="#CCCCCC"> we'll ignore</font>

375
00:15:53,680 --> 00:15:57,640
it and people that come after you will

376
00:15:55,600 --> 00:15:59,649
say<font color="#CCCCCC"> it's cool i</font><font color="#E5E5E5"> looked at it</font>

377
00:15:57,640 --> 00:16:01,689
another option<font color="#E5E5E5"> is you can actually fix</font>

378
00:15:59,649 --> 00:16:03,730
the<font color="#E5E5E5"> bug which in the case of the two</font>

379
00:16:01,690 --> 00:16:05,080
that i should for<font color="#CCCCCC"> openstack</font><font color="#E5E5E5"> it's the</font>

380
00:16:03,730 --> 00:16:08,260
right thing to do you want to fix those

381
00:16:05,080 --> 00:16:09,820
<font color="#CCCCCC">but</font><font color="#E5E5E5"> unfortunately it takes some time</font><font color="#CCCCCC"> you</font>

382
00:16:08,260 --> 00:16:11,080
can decide that the whole class<font color="#E5E5E5"> of bug</font>

383
00:16:09,820 --> 00:16:13,240
is not important to you

384
00:16:11,080 --> 00:16:15,580
for example there's a ginger to<font color="#CCCCCC"> plug-in</font>

385
00:16:13,240 --> 00:16:17,680
<font color="#E5E5E5">in</font><font color="#CCCCCC"> Jinja to has an auto escaping feature</font>

386
00:16:15,580 --> 00:16:20,649
a lot of times<font color="#E5E5E5"> ginger to you is used for</font>

387
00:16:17,680 --> 00:16:22,779
templating<font color="#CCCCCC"> in HTML so you will take some</font>

388
00:16:20,649 --> 00:16:25,240
<font color="#E5E5E5">template and</font><font color="#CCCCCC"> you'll use</font><font color="#E5E5E5"> that so to put</font>

389
00:16:22,779 --> 00:16:26,410
HTML<font color="#CCCCCC"> three user</font><font color="#E5E5E5"> of course you're worried</font>

390
00:16:25,240 --> 00:16:28,690
about<font color="#E5E5E5"> cross-site scripting when that</font>

391
00:16:26,410 --> 00:16:30,610
<font color="#E5E5E5">happens in</font><font color="#CCCCCC"> Jinja to does have an auto</font>

392
00:16:28,690 --> 00:16:33,550
escaping<font color="#E5E5E5"> thing that will work but a lot</font>

393
00:16:30,610 --> 00:16:34,959
of times people<font color="#E5E5E5"> disabled it sometimes</font>

394
00:16:33,550 --> 00:16:37,149
<font color="#E5E5E5">maybe you're not using it to render HTML</font>

395
00:16:34,959 --> 00:16:38,680
and you<font color="#CCCCCC"> can just say it's cool i don't</font>

396
00:16:37,149 --> 00:16:42,100
care about<font color="#E5E5E5"> cross-site scripting and so</font>

397
00:16:38,680 --> 00:16:43,870
you would say for my project don't worry

398
00:16:42,100 --> 00:16:45,850
about<font color="#CCCCCC"> gingers</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's that's what</font>

399
00:16:43,870 --> 00:16:47,740
i mean by here by saying decided the

400
00:16:45,850 --> 00:16:48,880
whole<font color="#E5E5E5"> class of bug is an important</font><font color="#CCCCCC"> day</font>

401
00:16:47,740 --> 00:16:50,680
<font color="#CCCCCC">of school</font>

402
00:16:48,880 --> 00:16:53,140
the final option here is something we

403
00:16:50,680 --> 00:16:55,810
<font color="#CCCCCC">call band at baseline and baseline is</font>

404
00:16:53,140 --> 00:16:57,850
basically my project is full of you know

405
00:16:55,810 --> 00:17:00,670
500 bucks right now but<font color="#CCCCCC"> I want to make</font>

406
00:16:57,850 --> 00:17:02,500
sure that I don't get<font color="#CCCCCC"> to 501</font><font color="#E5E5E5"> and what it</font>

407
00:17:00,670 --> 00:17:05,170
will do is it will actually run<font color="#CCCCCC"> bandit</font>

408
00:17:02,500 --> 00:17:06,459
against your parent commit and then it

409
00:17:05,170 --> 00:17:08,140
will run<font color="#CCCCCC"> bandit against your current</font>

410
00:17:06,459 --> 00:17:09,910
commit<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> compare the difference</font>

411
00:17:08,140 --> 00:17:11,319
and if there's new bugs and it says<font color="#CCCCCC"> okay</font>

412
00:17:09,910 --> 00:17:13,420
you're doing something right now that's

413
00:17:11,319 --> 00:17:14,980
going to create a problem for me<font color="#E5E5E5"> and</font>

414
00:17:13,420 --> 00:17:16,780
otherwise<font color="#E5E5E5"> it will just say you know what</font>

415
00:17:14,980 --> 00:17:19,990
these are new<font color="#CCCCCC"> bugs so fix them when you</font>

416
00:17:16,780 --> 00:17:22,059
can but for now<font color="#CCCCCC"> it's ok so that's kind</font>

417
00:17:19,990 --> 00:17:23,829
of the<font color="#E5E5E5"> options that you have when you</font>

418
00:17:22,059 --> 00:17:28,209
talk about fixing bugs in your<font color="#CCCCCC"> band</font><font color="#E5E5E5"> code</font>

419
00:17:23,829 --> 00:17:30,340
and then<font color="#E5E5E5"> really what you'd like to do is</font>

420
00:17:28,209 --> 00:17:32,920
<font color="#CCCCCC">you</font><font color="#E5E5E5"> like to build a gate</font><font color="#CCCCCC"> you have any</font>

421
00:17:30,340 --> 00:17:35,320
number of<font color="#E5E5E5"> BI tools</font><font color="#CCCCCC"> i'm not necessarily</font>

422
00:17:32,920 --> 00:17:37,750
<font color="#E5E5E5">shilling for</font><font color="#CCCCCC"> Travis CI</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> i just found</font>

423
00:17:35,320 --> 00:17:40,419
it was an easy thing to set up<font color="#E5E5E5"> so you</font>

424
00:17:37,750 --> 00:17:42,220
tell<font color="#CCCCCC"> travis</font><font color="#E5E5E5"> CI look at my repo and then</font>

425
00:17:40,420 --> 00:17:46,030
these three lines will do it<font color="#E5E5E5"> Yusei</font>

426
00:17:42,220 --> 00:17:47,980
<font color="#E5E5E5">install bandit</font><font color="#CCCCCC"> run</font><font color="#E5E5E5"> bandit and then if</font>

427
00:17:46,030 --> 00:17:49,960
you have a pull request on your repo

428
00:17:47,980 --> 00:17:51,250
<font color="#CCCCCC">Travis</font><font color="#E5E5E5"> CI will run bandit and</font>

429
00:17:49,960 --> 00:17:53,350
<font color="#CCCCCC">and put comments on the pull request</font>

430
00:17:51,250 --> 00:17:57,460
<font color="#CCCCCC">that you know there's no issues</font>

431
00:17:53,350 --> 00:17:59,799
super simple<font color="#CCCCCC"> ok we</font><font color="#E5E5E5"> are getting to the</font>

432
00:17:57,460 --> 00:18:01,929
end here<font color="#CCCCCC"> i guess i just want</font><font color="#E5E5E5"> to take a</font>

433
00:17:59,799 --> 00:18:05,230
little time and go into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> steps</font>

434
00:18:01,929 --> 00:18:06,940
I feel like bandit has pushed the marker

435
00:18:05,230 --> 00:18:09,549
forward for<font color="#CCCCCC"> python code and what</font><font color="#E5E5E5"> I'd</font>

436
00:18:06,940 --> 00:18:11,289
really like to see<font color="#CCCCCC"> um</font><font color="#E5E5E5"> at IBM you know</font>

437
00:18:09,549 --> 00:18:13,779
<font color="#CCCCCC">I'm responsible</font><font color="#E5E5E5"> for a lot of code that's</font>

438
00:18:11,289 --> 00:18:16,960
not<font color="#CCCCCC"> python i would</font><font color="#E5E5E5"> love</font><font color="#CCCCCC"> to see resources</font>

439
00:18:13,779 --> 00:18:18,100
<font color="#E5E5E5">like</font><font color="#CCCCCC"> bandit and the secure development</font>

440
00:18:16,960 --> 00:18:20,380
guidelines that<font color="#CCCCCC"> will show you in a</font>

441
00:18:18,100 --> 00:18:23,830
minute<font color="#CCCCCC"> for other languages for example</font>

442
00:18:20,380 --> 00:18:25,120
<font color="#E5E5E5">note tons of</font><font color="#CCCCCC"> JavaScript on the service</font>

443
00:18:23,830 --> 00:18:26,559
side happening there aren't a lot of

444
00:18:25,120 --> 00:18:28,840
tools like<font color="#CCCCCC"> damn</font><font color="#E5E5E5"> that I've seen that are</font>

445
00:18:26,559 --> 00:18:30,580
any good<font color="#CCCCCC"> at analyzing note and</font><font color="#E5E5E5"> there are</font>

446
00:18:28,840 --> 00:18:32,889
not a lot of development guidelines<font color="#CCCCCC"> that</font>

447
00:18:30,580 --> 00:18:35,379
show you what you should be doing and

448
00:18:32,890 --> 00:18:38,169
then<font color="#E5E5E5"> metrics</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> there's a lot of</font>

449
00:18:35,380 --> 00:18:40,120
room here to extend<font color="#E5E5E5"> bandit and say for</font>

450
00:18:38,169 --> 00:18:42,159
example let's say that the same

451
00:18:40,120 --> 00:18:43,570
development team keeps introducing bugs

452
00:18:42,159 --> 00:18:45,010
in<font color="#CCCCCC"> Python code</font>

453
00:18:43,570 --> 00:18:46,330
well we<font color="#CCCCCC"> could</font><font color="#E5E5E5"> probably help them out</font>

454
00:18:45,010 --> 00:18:48,220
with some training and we don't want to

455
00:18:46,330 --> 00:18:50,439
necessarily give training two teams that

456
00:18:48,220 --> 00:18:52,299
are more sophisticated<font color="#CCCCCC"> so we can use</font>

457
00:18:50,440 --> 00:18:54,429
<font color="#CCCCCC">bandits</font><font color="#E5E5E5"> to determine where we might need</font>

458
00:18:52,299 --> 00:18:58,210
to spend a little bit more effort<font color="#E5E5E5"> doing</font>

459
00:18:54,429 --> 00:18:59,710
<font color="#E5E5E5">of focused training</font><font color="#CCCCCC"> i mentioned the</font>

460
00:18:58,210 --> 00:19:01,299
<font color="#E5E5E5">secure</font><font color="#CCCCCC"> development guidance</font>

461
00:18:59,710 --> 00:19:02,860
this is something that we wrote for the

462
00:19:01,299 --> 00:19:04,690
<font color="#CCCCCC">OpenStack project but i think it's</font><font color="#E5E5E5"> going</font>

463
00:19:02,860 --> 00:19:07,270
to be useful to anybody that does<font color="#CCCCCC"> python</font>

464
00:19:04,690 --> 00:19:09,309
<font color="#E5E5E5">basically it is a</font><font color="#CCCCCC"> five-minute</font>

465
00:19:07,270 --> 00:19:11,649
explanation of a certain type of<font color="#CCCCCC"> issue</font>

466
00:19:09,309 --> 00:19:13,899
<font color="#CCCCCC">that you might see it shows the</font>

467
00:19:11,649 --> 00:19:16,209
incorrect and correct way of doing it

468
00:19:13,899 --> 00:19:18,489
I<font color="#E5E5E5"> think all of us have probably seen</font>

469
00:19:16,210 --> 00:19:20,440
examples where somebody just<font color="#CCCCCC"> copied some</font>

470
00:19:18,490 --> 00:19:22,570
code from some guy on<font color="#CCCCCC"> stack overflow or</font>

471
00:19:20,440 --> 00:19:24,309
<font color="#E5E5E5">you know some girl</font><font color="#CCCCCC"> in stock overflow</font><font color="#E5E5E5"> and</font>

472
00:19:22,570 --> 00:19:26,710
it's just not good code and then it ends

473
00:19:24,309 --> 00:19:29,289
up everywhere in your<font color="#CCCCCC"> code base the idea</font>

474
00:19:26,710 --> 00:19:31,270
<font color="#E5E5E5">here was to create and a place where you</font>

475
00:19:29,289 --> 00:19:32,950
could copy the example code and it would

476
00:19:31,270 --> 00:19:35,350
be done securely so that's exactly what

477
00:19:32,950 --> 00:19:39,340
we did here for about<font color="#E5E5E5"> ten classes</font><font color="#CCCCCC"> of</font>

478
00:19:35,350 --> 00:19:41,709
<font color="#CCCCCC">Python issues the Bandit plug-in</font>

479
00:19:39,340 --> 00:19:42,939
documentation itself is<font color="#CCCCCC"> i mean i'm not</font>

480
00:19:41,710 --> 00:19:44,320
going to<font color="#E5E5E5"> say it's great but</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> it's</font>

481
00:19:42,940 --> 00:19:46,990
pretty good to explain the type of

482
00:19:44,320 --> 00:19:48,428
issues that<font color="#CCCCCC"> bandages detecting</font><font color="#E5E5E5"> so you</font>

483
00:19:46,990 --> 00:19:51,010
can go online and you can see for

484
00:19:48,429 --> 00:19:53,020
example<font color="#CCCCCC"> are you if you're requesting</font>

485
00:19:51,010 --> 00:19:55,480
with no sir validation that issue that<font color="#CCCCCC"> i</font>

486
00:19:53,020 --> 00:19:57,370
talked about at the beginning<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> is</font>

487
00:19:55,480 --> 00:19:59,380
one example of it looks like here's the

488
00:19:57,370 --> 00:20:00,530
problem and then some resources if you

489
00:19:59,380 --> 00:20:04,760
want to go read further on

490
00:20:00,530 --> 00:20:06,350
<font color="#E5E5E5">and that is the end of my material so</font>

491
00:20:04,760 --> 00:20:16,490
<font color="#CCCCCC">I'd like to</font><font color="#E5E5E5"> open it up for questions if</font>

492
00:20:06,350 --> 00:20:20,120
<font color="#E5E5E5">I if anybody has any yeah</font><font color="#CCCCCC"> I'm your feet</font>

493
00:20:16,490 --> 00:20:21,200
no<font color="#CCCCCC"> it's not driven by retro i should</font>

494
00:20:20,120 --> 00:20:23,060
<font color="#E5E5E5">mention that</font>

495
00:20:21,200 --> 00:20:25,070
so the question is is<font color="#CCCCCC"> bandit driven by a</font>

496
00:20:23,060 --> 00:20:27,409
bunch of<font color="#E5E5E5"> red regular expressions</font><font color="#CCCCCC"> it's</font>

497
00:20:25,070 --> 00:20:29,419
<font color="#E5E5E5">not it takes an</font><font color="#CCCCCC"> ASP approach</font><font color="#E5E5E5"> and so</font>

498
00:20:27,410 --> 00:20:31,880
basically what will happen is we load

499
00:20:29,420 --> 00:20:33,920
<font color="#CCCCCC">the file and then we break the file it's</font>

500
00:20:31,880 --> 00:20:37,190
<font color="#E5E5E5">a</font><font color="#CCCCCC"> Python source file we break the Python</font>

501
00:20:33,920 --> 00:20:39,350
source into abstract syntax tree which

502
00:20:37,190 --> 00:20:40,940
is actually the trees that<font color="#CCCCCC"> Python uses</font>

503
00:20:39,350 --> 00:20:43,370
internally to understand the flow of

504
00:20:40,940 --> 00:20:45,380
your program<font color="#E5E5E5"> you'll see certain</font><font color="#CCCCCC"> nodes</font>

505
00:20:43,370 --> 00:20:48,469
<font color="#E5E5E5">like a function no door a string node</font>

506
00:20:45,380 --> 00:20:51,140
<font color="#E5E5E5">every element in python has</font><font color="#CCCCCC"> an o-type</font>

507
00:20:48,470 --> 00:20:53,480
<font color="#E5E5E5">associated with it and so if we want to</font>

508
00:20:51,140 --> 00:20:55,640
look for example for<font color="#E5E5E5"> bad function calls</font>

509
00:20:53,480 --> 00:20:58,970
<font color="#CCCCCC">then we look</font><font color="#E5E5E5"> at the function</font><font color="#CCCCCC"> node</font><font color="#E5E5E5"> we say</font>

510
00:20:55,640 --> 00:21:00,380
<font color="#E5E5E5">okay this is a</font><font color="#CCCCCC"> subprocess p open</font><font color="#E5E5E5"> and</font>

511
00:20:58,970 --> 00:21:02,960
then we can look at the argument we can

512
00:21:00,380 --> 00:21:04,130
say<font color="#CCCCCC"> okay that she'll</font><font color="#E5E5E5"> equals true and</font>

513
00:21:02,960 --> 00:21:05,450
when we have the two of those together

514
00:21:04,130 --> 00:21:07,190
we know that we have a possible

515
00:21:05,450 --> 00:21:09,350
<font color="#CCCCCC">subprocess</font><font color="#E5E5E5"> you know command injection</font>

516
00:21:07,190 --> 00:21:11,810
issue<font color="#CCCCCC"> so</font><font color="#E5E5E5"> yeah it's better than regular</font>

517
00:21:09,350 --> 00:21:13,219
expression because with a regular

518
00:21:11,810 --> 00:21:14,659
expression you might have a new line in

519
00:21:13,220 --> 00:21:16,130
there and now you know unless you wrote

520
00:21:14,660 --> 00:21:17,750
the regular expression craftily you

521
00:21:16,130 --> 00:21:20,150
don't recognize it anymore

522
00:21:17,750 --> 00:21:22,490
it forces<font color="#CCCCCC"> everybody this writing plug-in</font>

523
00:21:20,150 --> 00:21:24,140
to be<font color="#CCCCCC"> I guess</font><font color="#E5E5E5"> you know guessing all the</font>

524
00:21:22,490 --> 00:21:26,300
ways that regular expressions my<font color="#E5E5E5"> break</font>

525
00:21:24,140 --> 00:21:28,610
<font color="#E5E5E5">and there's a few other benefits to the</font>

526
00:21:26,300 --> 00:21:33,610
<font color="#CCCCCC">AFC approach that we we implemented</font>

527
00:21:28,610 --> 00:21:33,610
<font color="#E5E5E5">other</font><font color="#CCCCCC"> questions</font>

528
00:21:38,700 --> 00:21:44,940
<font color="#CCCCCC">thank you yeah the question is I</font><font color="#E5E5E5"> can we</font>

529
00:21:42,720 --> 00:21:47,430
<font color="#CCCCCC">are reporting options exist for</font><font color="#E5E5E5"> bandit</font>

530
00:21:44,940 --> 00:21:49,740
<font color="#CCCCCC">Amanda in addition to the command line</font>

531
00:21:47,430 --> 00:21:54,030
<font color="#E5E5E5">up with that</font><font color="#CCCCCC"> I demonstrated well put</font>

532
00:21:49,740 --> 00:21:55,410
<font color="#CCCCCC">json HTML CSP I think there's a</font><font color="#E5E5E5"> few more</font>

533
00:21:54,030 --> 00:21:57,149
than<font color="#CCCCCC"> i'm forgetting</font><font color="#E5E5E5"> about to you but</font>

534
00:21:55,410 --> 00:21:58,950
yeah there's a lot of options in

535
00:21:57,150 --> 00:22:00,900
particular for automation we use<font color="#CCCCCC"> JSON</font>

536
00:21:58,950 --> 00:22:12,240
electricity I mean everything in<font color="#E5E5E5"> parts</font>

537
00:22:00,900 --> 00:22:13,740
<font color="#CCCCCC">json</font><font color="#E5E5E5"> yep remediation was</font><font color="#CCCCCC"> the question is</font>

538
00:22:12,240 --> 00:22:15,510
<font color="#CCCCCC">uh do</font><font color="#E5E5E5"> we have any plans to add</font>

539
00:22:13,740 --> 00:22:17,550
remediation suggestions

540
00:22:15,510 --> 00:22:18,900
um<font color="#CCCCCC"> I think that a great place to do that</font>

541
00:22:17,550 --> 00:22:20,820
would be the Bandit<font color="#CCCCCC"> plug-in</font>

542
00:22:18,900 --> 00:22:23,010
documentation i think the format that we

543
00:22:20,820 --> 00:22:24,570
have<font color="#E5E5E5"> lends itself</font><font color="#CCCCCC"> to doing that well</font><font color="#E5E5E5"> and</font>

544
00:22:23,010 --> 00:22:26,820
so<font color="#CCCCCC"> i don't i'm not</font><font color="#E5E5E5"> sure that we've done</font>

545
00:22:24,570 --> 00:22:28,290
<font color="#E5E5E5">it comprehensively for every</font><font color="#CCCCCC"> plug-in but</font>

546
00:22:26,820 --> 00:22:30,960
some plugins definitely do it for

547
00:22:28,290 --> 00:22:32,760
example we have an<font color="#CCCCCC"> XML class of</font><font color="#E5E5E5"> plugins</font>

548
00:22:30,960 --> 00:22:35,580
off the top of my head and the

549
00:22:32,760 --> 00:22:37,950
suggestion there is used<font color="#CCCCCC"> extra model may</font>

550
00:22:35,580 --> 00:22:40,230
be susceptible to you know<font color="#CCCCCC"> for</font><font color="#E5E5E5"> bombs and</font>

551
00:22:37,950 --> 00:22:42,150
like all kinds of other<font color="#CCCCCC"> xml tax use</font>

552
00:22:40,230 --> 00:22:44,040
<font color="#E5E5E5">diffused</font><font color="#CCCCCC"> xml</font><font color="#E5E5E5"> is our suggestion</font>

553
00:22:42,150 --> 00:22:45,630
<font color="#CCCCCC">um so</font><font color="#E5E5E5"> yeah I mean</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> that we have</font>

554
00:22:44,040 --> 00:22:48,889
in some places but<font color="#CCCCCC"> i'd</font><font color="#E5E5E5"> love to see it</font>

555
00:22:45,630 --> 00:22:48,890
more prevalent<font color="#CCCCCC"> in all plugins</font>

556
00:22:51,590 --> 00:23:03,408
<font color="#CCCCCC">that's a great question how do you how</font>

557
00:23:01,460 --> 00:23:05,570
do you how do we track the<font color="#CCCCCC"> of</font>

558
00:23:03,409 --> 00:23:09,470
remediation of these<font color="#E5E5E5"> positions over time</font>

559
00:23:05,570 --> 00:23:11,149
<font color="#CCCCCC">I'm generally</font><font color="#E5E5E5"> a part of it is the no sex</font>

560
00:23:09,470 --> 00:23:14,150
stuff so any issues that we actually

561
00:23:11,150 --> 00:23:16,549
determine<font color="#CCCCCC"> when</font><font color="#E5E5E5"> issues will put</font><font color="#CCCCCC"> no sec</font><font color="#E5E5E5"> um</font>

562
00:23:14,150 --> 00:23:18,080
and then generally we have<font color="#E5E5E5"> like offline</font>

563
00:23:16,549 --> 00:23:19,908
ticketing and<font color="#E5E5E5"> since some automation</font>

564
00:23:18,080 --> 00:23:21,678
<font color="#CCCCCC">we've built internally around it</font><font color="#E5E5E5"> but</font>

565
00:23:19,909 --> 00:23:23,330
there's not anything for band itself and

566
00:23:21,679 --> 00:23:24,230
<font color="#CCCCCC">i would love to see more work in that</font>

567
00:23:23,330 --> 00:23:28,210
space

568
00:23:24,230 --> 00:23:28,210
yep

569
00:23:33,090 --> 00:23:37,230
<font color="#E5E5E5">that's a great question</font><font color="#CCCCCC"> of it will just</font>

570
00:23:35,550 --> 00:23:39,030
<font color="#E5E5E5">give it will go against whatever</font><font color="#CCCCCC"> python</font>

571
00:23:37,230 --> 00:23:42,120
<font color="#E5E5E5">upstart</font><font color="#CCCCCC"> let</font><font color="#E5E5E5"> me repeat it</font>

572
00:23:39,030 --> 00:23:43,740
<font color="#CCCCCC">um</font><font color="#E5E5E5"> does it do just</font><font color="#CCCCCC"> a module or</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> can</font>

573
00:23:42,120 --> 00:23:46,379
you<font color="#E5E5E5"> do other modules to like your</font>

574
00:23:43,740 --> 00:23:48,330
dependencies<font color="#CCCCCC"> by itself and</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> will just</font>

575
00:23:46,380 --> 00:23:50,580
<font color="#E5E5E5">will stand any pilot code you give it</font>

576
00:23:48,330 --> 00:23:53,129
doesn't really understand that a certain

577
00:23:50,580 --> 00:23:54,870
set of source files<font color="#E5E5E5"> make up a module</font><font color="#CCCCCC"> so</font>

578
00:23:53,130 --> 00:23:57,360
you can point it<font color="#CCCCCC"> at a directory</font><font color="#E5E5E5"> will</font>

579
00:23:54,870 --> 00:23:58,770
scan everything in the directory<font color="#CCCCCC"> what i</font>

580
00:23:57,360 --> 00:24:00,360
would recommend in that case is<font color="#CCCCCC"> i would</font>

581
00:23:58,770 --> 00:24:02,850
actually recommend doing the

582
00:24:00,360 --> 00:24:04,889
<font color="#CCCCCC">dependencies separately so that you kind</font>

583
00:24:02,850 --> 00:24:06,449
of have in rather than having everything

584
00:24:04,890 --> 00:24:09,570
<font color="#CCCCCC">stuffed</font><font color="#E5E5E5"> into one you</font><font color="#CCCCCC"> kind of have a</font>

585
00:24:06,450 --> 00:24:11,520
different<font color="#CCCCCC"> report structure</font><font color="#E5E5E5"> and then the</font>

586
00:24:09,570 --> 00:24:13,110
other reason to do that<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> one of</font>

587
00:24:11,520 --> 00:24:15,750
the limitations in<font color="#CCCCCC"> banner right</font><font color="#E5E5E5"> now is</font>

588
00:24:13,110 --> 00:24:18,540
that you can only exclude one unit<font color="#CCCCCC"> test</font>

589
00:24:15,750 --> 00:24:20,040
<font color="#E5E5E5">path and unit</font><font color="#CCCCCC"> test for your dependency</font>

590
00:24:18,540 --> 00:24:22,260
might be called something different than

591
00:24:20,040 --> 00:24:23,970
unit<font color="#CCCCCC"> test for your project itself so</font>

592
00:24:22,260 --> 00:24:25,860
<font color="#E5E5E5">what you ideally like to do is</font><font color="#CCCCCC"> you'd</font>

593
00:24:23,970 --> 00:24:28,380
like to run each project separately

594
00:24:25,860 --> 00:24:30,449
<font color="#CCCCCC">exclude</font><font color="#E5E5E5"> unit</font><font color="#CCCCCC"> test make sure you're</font>

595
00:24:28,380 --> 00:24:32,760
getting good results and then pile all

596
00:24:30,450 --> 00:24:34,290
the results into one central store which

597
00:24:32,760 --> 00:24:37,280
you<font color="#E5E5E5"> could easily do</font><font color="#CCCCCC"> if you export</font><font color="#E5E5E5"> like</font>

598
00:24:34,290 --> 00:24:37,280
JSON or something like that

599
00:24:37,890 --> 00:24:41,900
<font color="#CCCCCC">oh of course</font>

600
00:24:41,950 --> 00:24:48,340
<font color="#E5E5E5">now the question is are there hooks for</font>

601
00:24:45,880 --> 00:24:50,289
integration into<font color="#E5E5E5"> ID such a spider</font><font color="#CCCCCC"> from</font>

602
00:24:48,340 --> 00:24:51,699
there aren't<font color="#CCCCCC"> I wish there were it's</font>

603
00:24:50,289 --> 00:24:54,250
something people thought of<font color="#E5E5E5"> very</font>

604
00:24:51,700 --> 00:24:56,230
frequently<font color="#E5E5E5"> for example on</font><font color="#CCCCCC"> pycharm is one</font>

605
00:24:54,250 --> 00:24:57,610
of the ones that we get a request for a

606
00:24:56,230 --> 00:24:59,980
lot<font color="#CCCCCC"> i</font><font color="#E5E5E5"> don't think it would be very</font>

607
00:24:57,610 --> 00:25:05,379
difficult to do but nobody's done it yet

608
00:24:59,980 --> 00:25:06,340
I'd love to see it<font color="#CCCCCC"> alright to get any</font>

609
00:25:05,380 --> 00:25:18,519
<font color="#E5E5E5">other questions</font>

610
00:25:06,340 --> 00:25:21,370
let's wrap it<font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> thank you very</font>

611
00:25:18,519 --> 00:25:26,260
<font color="#E5E5E5">much</font><font color="#CCCCCC"> Travis</font><font color="#E5E5E5"> special thanks from our</font>

612
00:25:21,370 --> 00:25:29,760
sponsor fit and<font color="#CCCCCC"> here is your</font><font color="#E5E5E5"> fifth</font><font color="#CCCCCC"> you</font>

613
00:25:26,260 --> 00:25:29,760
<font color="#E5E5E5">got to fit</font><font color="#CCCCCC"> that front</font><font color="#E5E5E5"> from our sponsor</font>

