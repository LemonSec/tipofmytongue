1
00:00:05,440 --> 00:00:11,440
<font color="#CCCCCC">half</font><font color="#E5E5E5"> now this is a this is usually used</font>

2
00:00:09,010 --> 00:00:13,990
by<font color="#CCCCCC"> by attackers to bypass security</font>

3
00:00:11,440 --> 00:00:15,459
solutions by injecting code into

4
00:00:13,990 --> 00:00:18,670
legitimate apps or<font color="#E5E5E5"> wait-listed</font>

5
00:00:15,459 --> 00:00:20,948
applications and to access<font color="#E5E5E5"> contact</font>

6
00:00:18,670 --> 00:00:22,840
<font color="#E5E5E5">specific data such as taking screenshots</font>

7
00:00:20,949 --> 00:00:25,450
or accessing encrypted<font color="#E5E5E5"> passwords such as</font>

8
00:00:22,840 --> 00:00:28,870
<font color="#E5E5E5">password encrypted encrypted by a google</font>

9
00:00:25,450 --> 00:00:32,348
chrome<font color="#E5E5E5"> now so what is</font><font color="#CCCCCC"> Adam bombing Adam</font>

10
00:00:28,870 --> 00:00:35,379
<font color="#CCCCCC">bombing is</font><font color="#E5E5E5"> it's a new type of injection</font>

11
00:00:32,348 --> 00:00:37,779
techniques that leverages<font color="#E5E5E5"> the global</font>

12
00:00:35,379 --> 00:00:40,899
<font color="#CCCCCC">Adam table and a pcs which are a sink</font>

13
00:00:37,780 --> 00:00:43,390
procedure calls and basically this

14
00:00:40,899 --> 00:00:44,890
technique is undetected by common

15
00:00:43,390 --> 00:00:48,550
security solutions or at least it was

16
00:00:44,890 --> 00:00:50,829
until we<font color="#E5E5E5"> released in</font><font color="#CCCCCC"> october</font><font color="#E5E5E5"> and then</font>

17
00:00:48,550 --> 00:00:54,010
after that i'm sure most<font color="#E5E5E5"> antivirus</font>

18
00:00:50,829 --> 00:00:57,699
vendors<font color="#E5E5E5"> kind of rolled out</font><font color="#CCCCCC"> Patch's</font><font color="#E5E5E5"> to</font>

19
00:00:54,010 --> 00:00:59,138
make sure they get<font color="#E5E5E5"> this stuff and also</font>

20
00:00:57,699 --> 00:01:02,920
what's interesting about<font color="#CCCCCC"> an</font><font color="#E5E5E5"> embalming is</font>

21
00:00:59,139 --> 00:01:05,170
<font color="#E5E5E5">that it doesn't rely on a flaw and</font>

22
00:01:02,920 --> 00:01:07,600
windows<font color="#CCCCCC"> are or above or some kind of</font>

23
00:01:05,170 --> 00:01:10,420
security hole<font color="#E5E5E5"> but really it just uses</font>

24
00:01:07,600 --> 00:01:12,100
the<font color="#E5E5E5"> just normal features of the OS in</font>

25
00:01:10,420 --> 00:01:13,870
order to get the code injection so

26
00:01:12,100 --> 00:01:15,850
<font color="#E5E5E5">there's no patch that's</font><font color="#CCCCCC"> going to happen</font>

27
00:01:13,870 --> 00:01:17,620
<font color="#CCCCCC">or going to be rolled out by Microsoft</font>

28
00:01:15,850 --> 00:01:20,169
<font color="#E5E5E5">anytime soon so it's</font><font color="#CCCCCC"> going to keep</font>

29
00:01:17,620 --> 00:01:20,890
working<font color="#E5E5E5"> basically for the foreseeable</font>

30
00:01:20,170 --> 00:01:23,770
future

31
00:01:20,890 --> 00:01:24,850
now in order to understand how<font color="#CCCCCC"> Adam</font>

32
00:01:23,770 --> 00:01:30,190
<font color="#E5E5E5">bombing works we first have to</font>

33
00:01:24,850 --> 00:01:33,520
understand what an<font color="#E5E5E5"> atom table is and</font>

34
00:01:30,190 --> 00:01:37,300
<font color="#CCCCCC">Adam table</font><font color="#E5E5E5"> is simply a mapping of 16-bit</font>

35
00:01:33,520 --> 00:01:39,580
integers<font color="#E5E5E5"> called atoms into</font><font color="#CCCCCC"> strength and</font>

36
00:01:37,300 --> 00:01:42,580
so basically<font color="#CCCCCC"> is an app</font><font color="#E5E5E5"> developer</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> i</font>

37
00:01:39,580 --> 00:01:44,890
can do is<font color="#E5E5E5"> i can call the OS past ring to</font>

38
00:01:42,580 --> 00:01:47,740
it and get it<font color="#E5E5E5"> get a</font><font color="#CCCCCC"> an atom</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> in</font>

39
00:01:44,890 --> 00:01:50,470
<font color="#E5E5E5">16-bit integer and then whenever</font><font color="#CCCCCC"> I want</font>

40
00:01:47,740 --> 00:01:52,990
<font color="#CCCCCC">I can ask the OS to give me the string</font>

41
00:01:50,470 --> 00:01:55,150
back by giving it the atom that I got<font color="#E5E5E5"> so</font>

42
00:01:52,990 --> 00:01:57,070
we have<font color="#CCCCCC"> two</font><font color="#E5E5E5"> two kinds of different</font><font color="#CCCCCC"> Adam</font>

43
00:01:55,150 --> 00:01:59,410
<font color="#E5E5E5">tables you have the local</font><font color="#CCCCCC"> Adam tables in</font>

44
00:01:57,070 --> 00:02:00,970
the global<font color="#CCCCCC"> Adam tables now local Adam</font>

45
00:01:59,410 --> 00:02:02,920
tables are less interesting to us

46
00:02:00,970 --> 00:02:04,960
because they're accessible to a single

47
00:02:02,920 --> 00:02:07,750
process and are completely<font color="#CCCCCC"> managed in</font>

48
00:02:04,960 --> 00:02:10,060
user mode<font color="#E5E5E5"> and the global</font><font color="#CCCCCC"> Adam table is</font>

49
00:02:07,750 --> 00:02:12,489
actually very interesting to us to<font color="#E5E5E5"> this</font>

50
00:02:10,060 --> 00:02:15,670
accessible across processes and is

51
00:02:12,489 --> 00:02:17,000
managed by the<font color="#E5E5E5"> colonel now the functions</font>

52
00:02:15,670 --> 00:02:21,049
that we can use<font color="#E5E5E5"> to</font>

53
00:02:17,000 --> 00:02:23,900
<font color="#E5E5E5">to manipulate the global</font><font color="#CCCCCC"> Adam table our</font>

54
00:02:21,050 --> 00:02:26,720
global<font color="#CCCCCC"> Adam and global get Adam</font><font color="#E5E5E5"> name</font><font color="#CCCCCC"> the</font>

55
00:02:23,900 --> 00:02:29,750
<font color="#E5E5E5">first one receives a pointer to a string</font>

56
00:02:26,720 --> 00:02:32,570
and returns<font color="#CCCCCC"> and Adam</font><font color="#E5E5E5"> the 16-bit little</font>

57
00:02:29,750 --> 00:02:35,690
token that we can use to identify the

58
00:02:32,570 --> 00:02:37,370
strengths and the second function is the

59
00:02:35,690 --> 00:02:40,190
function that<font color="#CCCCCC"> retrieves the string and</font>

60
00:02:37,370 --> 00:02:42,350
basically<font color="#CCCCCC"> receive</font><font color="#E5E5E5"> an atom and the</font>

61
00:02:40,190 --> 00:02:43,520
<font color="#E5E5E5">pointer to a buffer and decide</font><font color="#CCCCCC"> and</font>

62
00:02:42,350 --> 00:02:46,609
<font color="#CCCCCC">decides they're</font><font color="#E5E5E5"> just so we don't have</font>

63
00:02:43,520 --> 00:02:47,930
any buffer overruns and then<font color="#E5E5E5"> this is</font>

64
00:02:46,610 --> 00:02:50,780
pretty neat because<font color="#E5E5E5"> what we can do it</font>

65
00:02:47,930 --> 00:02:54,920
once<font color="#CCCCCC"> were able to control the pointer to</font>

66
00:02:50,780 --> 00:02:57,350
<font color="#CCCCCC">LP buffer</font><font color="#E5E5E5"> that we can see over here</font><font color="#CCCCCC"> were</font>

67
00:02:54,920 --> 00:02:59,420
<font color="#E5E5E5">able to choose where whatever string</font>

68
00:02:57,350 --> 00:03:03,680
<font color="#E5E5E5">restored is going to be written to</font><font color="#CCCCCC"> so in</font>

69
00:02:59,420 --> 00:03:06,200
theory if I could somehow call global

70
00:03:03,680 --> 00:03:09,500
<font color="#CCCCCC">Adam</font><font color="#E5E5E5"> and store some code in the global</font>

71
00:03:06,200 --> 00:03:13,010
<font color="#CCCCCC">Adam table and then somehow forth the</font>

72
00:03:09,500 --> 00:03:15,709
<font color="#E5E5E5">the target process to call global get</font>

73
00:03:13,010 --> 00:03:18,769
<font color="#CCCCCC">Adam name and I could somehow control</font>

74
00:03:15,709 --> 00:03:21,860
the parameters being passed to this<font color="#CCCCCC"> API</font>

75
00:03:18,770 --> 00:03:24,320
call<font color="#E5E5E5"> this would be</font><font color="#CCCCCC"> enabled me to achieve</font>

76
00:03:21,860 --> 00:03:25,820
my right<font color="#CCCCCC"> where because I could</font><font color="#E5E5E5"> choose</font>

77
00:03:24,320 --> 00:03:28,010
<font color="#E5E5E5">what's right because</font><font color="#CCCCCC"> I can do whatever I</font>

78
00:03:25,820 --> 00:03:31,130
want<font color="#CCCCCC"> in the atom table and I choose</font>

79
00:03:28,010 --> 00:03:35,269
where the<font color="#E5E5E5"> string is going to be written</font>

80
00:03:31,130 --> 00:03:39,049
<font color="#E5E5E5">to so what we'd like to do is to</font>

81
00:03:35,269 --> 00:03:41,209
leverage a mechanism called a<font color="#CCCCCC"> pc which</font>

82
00:03:39,049 --> 00:03:42,920
is a<font color="#E5E5E5"> thing for future call now this has</font>

83
00:03:41,209 --> 00:03:44,330
been used by malware in the past just

84
00:03:42,920 --> 00:03:49,309
not<font color="#CCCCCC"> me</font><font color="#E5E5E5"> this way that we're about to use</font>

85
00:03:44,330 --> 00:03:52,579
it and basically how<font color="#CCCCCC"> apc's work is that</font>

86
00:03:49,310 --> 00:03:55,340
<font color="#CCCCCC">it</font><font color="#E5E5E5"> enabled me</font><font color="#CCCCCC"> to pass</font><font color="#E5E5E5"> to handle to</font>

87
00:03:52,579 --> 00:03:57,769
thread a pointer to a function and the

88
00:03:55,340 --> 00:04:00,320
parameter to<font color="#E5E5E5"> the function and then that</font>

89
00:03:57,769 --> 00:04:03,200
thread will execute that function and

90
00:04:00,320 --> 00:04:08,120
receive that parameter that in<font color="#CCCCCC"> theory I</font>

91
00:04:03,200 --> 00:04:10,670
control<font color="#E5E5E5"> now the only problem is that the</font>

92
00:04:08,120 --> 00:04:13,040
function is of type<font color="#CCCCCC"> a pc process</font><font color="#E5E5E5"> its</font>

93
00:04:10,670 --> 00:04:15,890
prototype<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> on a pc proc expect to</font>

94
00:04:13,040 --> 00:04:17,630
receive just one single parameter and

95
00:04:15,890 --> 00:04:19,430
we'd like to call global get<font color="#CCCCCC"> Adam name</font>

96
00:04:17,630 --> 00:04:22,159
which receives three different

97
00:04:19,430 --> 00:04:24,050
parameters<font color="#CCCCCC"> so we have a parameter</font>

98
00:04:22,160 --> 00:04:26,210
mismatch and so we can't really control

99
00:04:24,050 --> 00:04:28,849
the values of these two parameters over

100
00:04:26,210 --> 00:04:29,599
here which really doesn't help us very

101
00:04:28,849 --> 00:04:32,599
much

102
00:04:29,600 --> 00:04:36,500
<font color="#CCCCCC">but if we take a look at the underlying</font>

103
00:04:32,600 --> 00:04:37,700
implementation of<font color="#CCCCCC"> cues or a pc</font><font color="#E5E5E5"> we can</font>

104
00:04:36,500 --> 00:04:40,580
see that it actually uses the

105
00:04:37,700 --> 00:04:43,820
undocumented system<font color="#E5E5E5"> call</font><font color="#CCCCCC"> ntq APC thread</font>

106
00:04:40,580 --> 00:04:47,000
and what it does is instead of passing

107
00:04:43,820 --> 00:04:49,070
<font color="#CCCCCC">our pfn APC the APC product it passes</font>

108
00:04:47,000 --> 00:04:52,040
the pointer to<font color="#CCCCCC"> our keel dispatch a pc</font>

109
00:04:49,070 --> 00:04:54,469
and this function is actually a function

110
00:04:52,040 --> 00:04:57,230
<font color="#E5E5E5">that's found in all in all the windows</font>

111
00:04:54,470 --> 00:04:59,900
processes and this function will

112
00:04:57,230 --> 00:05:02,840
actually dispatch our APC call

113
00:04:59,900 --> 00:05:06,320
so what's interesting about<font color="#CCCCCC"> rtl</font><font color="#E5E5E5"> dispatch</font>

114
00:05:02,840 --> 00:05:08,030
<font color="#CCCCCC">APC is that</font><font color="#E5E5E5"> its prototype</font><font color="#CCCCCC"> is exactly the</font>

115
00:05:06,320 --> 00:05:11,210
same as the prototype of global get a

116
00:05:08,030 --> 00:05:13,280
domain and this prototype is just<font color="#E5E5E5"> three</font>

117
00:05:11,210 --> 00:05:15,080
parameters being<font color="#E5E5E5"> passed normally on the</font>

118
00:05:13,280 --> 00:05:17,659
stack so<font color="#E5E5E5"> what we could do is we could</font>

119
00:05:15,080 --> 00:05:20,510
just cut the middleman and not call<font color="#CCCCCC"> user</font>

120
00:05:17,660 --> 00:05:24,110
<font color="#CCCCCC">bc and not work with rtl dispatch ebc</font>

121
00:05:20,510 --> 00:05:25,550
but simply<font color="#E5E5E5"> to to call the system call</font>

122
00:05:24,110 --> 00:05:28,070
directly<font color="#E5E5E5"> and then pass a pointer to</font>

123
00:05:25,550 --> 00:05:31,940
global get<font color="#CCCCCC"> Adam name which will allow me</font>

124
00:05:28,070 --> 00:05:33,290
to allow me to pass the three parameters

125
00:05:31,940 --> 00:05:35,180
that<font color="#CCCCCC"> i would like you can see the free</font>

126
00:05:33,290 --> 00:05:36,620
<font color="#E5E5E5">pushes over here</font><font color="#CCCCCC"> are the three</font>

127
00:05:35,180 --> 00:05:38,180
parameters and then basically<font color="#CCCCCC"> i</font><font color="#E5E5E5"> can</font>

128
00:05:36,620 --> 00:05:40,370
control<font color="#E5E5E5"> the parameters that are going to</font>

129
00:05:38,180 --> 00:05:47,180
be passed to global get<font color="#CCCCCC"> Adam name within</font>

130
00:05:40,370 --> 00:05:51,320
the context of the targets<font color="#E5E5E5"> process now</font>

131
00:05:47,180 --> 00:05:54,410
<font color="#E5E5E5">this basically just</font><font color="#CCCCCC"> gives us are right</font>

132
00:05:51,320 --> 00:05:55,969
<font color="#E5E5E5">where completes our step</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> because now</font>

133
00:05:54,410 --> 00:05:58,760
<font color="#CCCCCC">I can</font><font color="#E5E5E5"> store whatever I want in the</font>

134
00:05:55,970 --> 00:06:02,510
global<font color="#CCCCCC"> Adam table by calling</font><font color="#E5E5E5"> global</font><font color="#CCCCCC"> it</font>

135
00:05:58,760 --> 00:06:05,000
<font color="#CCCCCC">at Adam</font><font color="#E5E5E5"> and then get the target process</font>

136
00:06:02,510 --> 00:06:07,730
to call global get<font color="#CCCCCC"> Adam name</font><font color="#E5E5E5"> by using</font>

137
00:06:05,000 --> 00:06:10,190
the underlying system call<font color="#CCCCCC"> ntq epc</font>

138
00:06:07,730 --> 00:06:13,970
thread<font color="#E5E5E5"> so once we have our right where</font>

139
00:06:10,190 --> 00:06:16,160
we'd like to be able to write some code

140
00:06:13,970 --> 00:06:20,540
into the address space of the target

141
00:06:16,160 --> 00:06:24,020
process and then<font color="#CCCCCC"> execute it now</font><font color="#E5E5E5"> for code</font>

142
00:06:20,540 --> 00:06:26,570
to execute it needs to be executable and

143
00:06:24,020 --> 00:06:28,940
<font color="#E5E5E5">we can assume to find read write execute</font>

144
00:06:26,570 --> 00:06:31,190
memory within the target process<font color="#CCCCCC"> it's</font>

145
00:06:28,940 --> 00:06:33,140
just<font color="#E5E5E5"> not going to happen but we</font><font color="#CCCCCC"> can</font>

146
00:06:31,190 --> 00:06:36,350
<font color="#CCCCCC">assume we can find read/write memory</font>

147
00:06:33,140 --> 00:06:38,180
that we can write our<font color="#CCCCCC"> shellcode to and</font>

148
00:06:36,350 --> 00:06:40,820
then use some return oriented

149
00:06:38,180 --> 00:06:41,740
programming to allocate some excuse<font color="#CCCCCC"> or</font>

150
00:06:40,820 --> 00:06:44,740
memory

151
00:06:41,740 --> 00:06:46,660
copy the<font color="#CCCCCC"> computer</font><font color="#E5E5E5"> memory from the</font>

152
00:06:44,740 --> 00:06:49,870
<font color="#CCCCCC">read/write memory to the newly allocated</font>

153
00:06:46,660 --> 00:06:52,120
<font color="#CCCCCC">executed memory</font><font color="#E5E5E5"> and then finally</font><font color="#CCCCCC"> jump</font><font color="#E5E5E5"> to</font>

154
00:06:49,870 --> 00:06:56,530
our shell code and then<font color="#E5E5E5"> this is actually</font>

155
00:06:52,120 --> 00:06:57,970
the the ROP<font color="#E5E5E5"> chain in detail and you guys</font>

156
00:06:56,530 --> 00:06:59,770
will have the<font color="#E5E5E5"> flight deck so you can</font>

157
00:06:57,970 --> 00:07:01,569
check it out later but we're about to

158
00:06:59,770 --> 00:07:04,448
feel like a little demo that'll really

159
00:07:01,569 --> 00:07:07,270
demonstrate how<font color="#E5E5E5"> this</font><font color="#CCCCCC"> how this works</font>

160
00:07:04,449 --> 00:07:10,509
so now we know what we want to do with

161
00:07:07,270 --> 00:07:11,889
the return oriented programming but we

162
00:07:10,509 --> 00:07:13,990
also need to get the return oriented

163
00:07:11,889 --> 00:07:16,300
programming to work<font color="#CCCCCC"> so what we'd like to</font>

164
00:07:13,990 --> 00:07:18,970
do is we'd like to leverage a another

165
00:07:16,300 --> 00:07:21,490
system<font color="#E5E5E5"> called</font><font color="#CCCCCC"> NP</font><font color="#E5E5E5"> set context thread</font>

166
00:07:18,970 --> 00:07:24,099
which receives a handle to<font color="#CCCCCC"> a thread and</font>

167
00:07:21,490 --> 00:07:26,680
a pointer to a contact structure and the

168
00:07:24,099 --> 00:07:28,389
<font color="#CCCCCC">contact structure is just a</font><font color="#E5E5E5"> hold of the</font>

169
00:07:26,680 --> 00:07:30,699
<font color="#E5E5E5">values of all the different registers</font><font color="#CCCCCC"> so</font>

170
00:07:28,389 --> 00:07:32,380
what I would like to do is just set the

171
00:07:30,699 --> 00:07:34,569
value of the instruction pointer and the

172
00:07:32,380 --> 00:07:38,860
stack pointer to point to my ROP chain

173
00:07:34,569 --> 00:07:39,940
and then divert the execution to execute

174
00:07:38,860 --> 00:07:42,009
it

175
00:07:39,940 --> 00:07:43,750
however we don't want to call<font color="#CCCCCC"> empty</font><font color="#E5E5E5"> set</font>

176
00:07:42,009 --> 00:07:46,419
<font color="#CCCCCC">context</font><font color="#E5E5E5"> threat directly because this</font>

177
00:07:43,750 --> 00:07:49,960
this system call is quite suspicious and

178
00:07:46,419 --> 00:07:51,580
<font color="#CCCCCC">well if we have a process that are under</font>

179
00:07:49,960 --> 00:07:53,349
our control that's trying to change the

180
00:07:51,580 --> 00:07:56,169
context of the<font color="#E5E5E5"> thread that's within the</font>

181
00:07:53,349 --> 00:07:58,960
<font color="#E5E5E5">the address space of another process</font>

182
00:07:56,169 --> 00:08:01,599
then<font color="#E5E5E5"> that's very suspicious in many</font><font color="#CCCCCC"> and</font>

183
00:07:58,960 --> 00:08:03,008
<font color="#E5E5E5">team our solutions will flag that</font><font color="#CCCCCC"> so</font>

184
00:08:01,599 --> 00:08:05,110
what we'd like to do is<font color="#E5E5E5"> we kinda like</font>

185
00:08:03,009 --> 00:08:08,139
the thread to change its own context and

186
00:08:05,110 --> 00:08:12,280
we can try to leverage<font color="#CCCCCC"> a pc thread at</font>

187
00:08:08,139 --> 00:08:14,770
<font color="#CCCCCC">user-pc thread again to execute and ESET</font>

188
00:08:12,280 --> 00:08:16,719
<font color="#CCCCCC">context threader have the thread</font><font color="#E5E5E5"> call</font>

189
00:08:14,770 --> 00:08:20,590
<font color="#CCCCCC">andy sixx antics</font><font color="#E5E5E5"> thread on itself</font>

190
00:08:16,719 --> 00:08:22,659
<font color="#CCCCCC">bypassing the</font><font color="#E5E5E5"> handle the current thread</font>

191
00:08:20,590 --> 00:08:24,638
and then the<font color="#E5E5E5"> contact structure that we</font>

192
00:08:22,659 --> 00:08:27,250
wrote<font color="#E5E5E5"> using</font><font color="#CCCCCC"> our right we're from</font><font color="#E5E5E5"> step</font>

193
00:08:24,639 --> 00:08:29,620
<font color="#E5E5E5">one now the only problem here is that</font>

194
00:08:27,250 --> 00:08:34,990
generally speaking a parameter mismatch

195
00:08:29,620 --> 00:08:37,390
<font color="#E5E5E5">causes a crash on return and</font><font color="#CCCCCC"> NP set</font>

196
00:08:34,990 --> 00:08:40,000
<font color="#E5E5E5">context thread expect two parameters</font><font color="#CCCCCC"> not</font>

197
00:08:37,390 --> 00:08:42,069
<font color="#CCCCCC">three</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so in theory additionally</font><font color="#E5E5E5"> to a</font>

198
00:08:40,000 --> 00:08:46,000
crash however in this specific scenario

199
00:08:42,070 --> 00:08:48,940
the things that once the execution gets

200
00:08:46,000 --> 00:08:50,980
passed on to the<font color="#E5E5E5"> colonel the return will</font>

201
00:08:48,940 --> 00:08:53,740
never take place because the execution

202
00:08:50,980 --> 00:08:54,700
is diverted from the normal execution

203
00:08:53,740 --> 00:08:57,610
flow<font color="#CCCCCC"> too</font>

204
00:08:54,700 --> 00:09:00,190
our new context that we passed in this

205
00:08:57,610 --> 00:09:01,720
point right here<font color="#CCCCCC"> so there will never be</font>

206
00:09:00,190 --> 00:09:03,160
a return and so there will never be a

207
00:09:01,720 --> 00:09:06,580
crash and so we don't really have a

208
00:09:03,160 --> 00:09:10,079
problem here<font color="#CCCCCC"> so let's let's take a look</font>

209
00:09:06,580 --> 00:09:10,080
at the ROP<font color="#E5E5E5"> chain in action</font>

210
00:09:10,450 --> 00:09:17,350
<font color="#CCCCCC">I've</font><font color="#E5E5E5"> set up my debugger to</font><font color="#CCCCCC"> to break just</font>

211
00:09:14,710 --> 00:09:20,560
after the execution flow has been has

212
00:09:17,350 --> 00:09:24,190
been diverted<font color="#E5E5E5"> and so we can we can take</font>

213
00:09:20,560 --> 00:09:30,250
a look at the instruction pointer<font color="#CCCCCC"> that's</font>

214
00:09:24,190 --> 00:09:32,110
currently<font color="#E5E5E5"> points</font><font color="#CCCCCC"> 2 NT allocated virtual</font>

215
00:09:30,250 --> 00:09:33,550
<font color="#E5E5E5">memory and now this</font><font color="#CCCCCC"> this function is the</font>

216
00:09:32,110 --> 00:09:36,280
<font color="#CCCCCC">function can allocate some virtual</font>

217
00:09:33,550 --> 00:09:38,079
executable memory for us<font color="#E5E5E5"> now the return</font>

218
00:09:36,280 --> 00:09:39,280
address is<font color="#E5E5E5"> men copy which is the</font>

219
00:09:38,080 --> 00:09:42,970
function<font color="#CCCCCC"> that's going to copy the code</font>

220
00:09:39,280 --> 00:09:48,010
from the<font color="#CCCCCC"> read/write memory to the</font>

221
00:09:42,970 --> 00:09:50,800
executable memory and this is a<font color="#CCCCCC"> the 40</font>

222
00:09:48,010 --> 00:09:53,380
right here represents executable<font color="#CCCCCC"> read</font>

223
00:09:50,800 --> 00:09:55,870
<font color="#CCCCCC">write and</font><font color="#E5E5E5"> the memory is going to be</font>

224
00:09:53,380 --> 00:09:57,189
stored here<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> zeroes right</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> so</font>

225
00:09:55,870 --> 00:10:00,970
let's let that<font color="#E5E5E5"> executes until the return</font>

226
00:09:57,190 --> 00:10:03,190
and<font color="#CCCCCC"> see it happen so now if we take a</font>

227
00:10:00,970 --> 00:10:05,020
look at the stack again we can see that

228
00:10:03,190 --> 00:10:08,020
where we once had<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> as we now have</font>

229
00:10:05,020 --> 00:10:12,370
newly allocated memory<font color="#E5E5E5"> and if we take a</font>

230
00:10:08,020 --> 00:10:17,800
look at the protection of this memory<font color="#E5E5E5"> we</font>

231
00:10:12,370 --> 00:10:21,730
can see that this is this is a page

232
00:10:17,800 --> 00:10:26,469
<font color="#E5E5E5">execute</font><font color="#CCCCCC"> read/write which is 40 as we</font>

233
00:10:21,730 --> 00:10:31,180
specified<font color="#E5E5E5"> now we can take one more step</font>

234
00:10:26,470 --> 00:10:32,830
and see that we land in mem copy<font color="#CCCCCC"> no</font><font color="#E5E5E5"> mem</font>

235
00:10:31,180 --> 00:10:34,209
copy<font color="#E5E5E5"> is the function is going to copy</font>

236
00:10:32,830 --> 00:10:36,370
the memory from the<font color="#CCCCCC"> read/write to the</font>

237
00:10:34,210 --> 00:10:39,400
read write execute memory<font color="#E5E5E5"> and so if we</font>

238
00:10:36,370 --> 00:10:42,460
take a look at the stack again we can

239
00:10:39,400 --> 00:10:45,160
see that we have this is the executable

240
00:10:42,460 --> 00:10:49,960
memory that was just<font color="#E5E5E5"> allocated and</font>

241
00:10:45,160 --> 00:10:54,250
currently contains<font color="#CCCCCC"> zeros and this is</font>

242
00:10:49,960 --> 00:10:56,020
where we stored our<font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> before you</font>

243
00:10:54,250 --> 00:10:59,170
<font color="#E5E5E5">can see this is the actual code that's</font>

244
00:10:56,020 --> 00:11:02,460
going to be run<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the only problem is</font>

245
00:10:59,170 --> 00:11:02,459
that this memory is

246
00:11:03,410 --> 00:11:08,540
<font color="#E5E5E5">is a page read right so it can't execute</font>

247
00:11:06,529 --> 00:11:10,310
and that's<font color="#CCCCCC"> why we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> mem copy and</font>

248
00:11:08,540 --> 00:11:14,060
so we let<font color="#E5E5E5"> the</font><font color="#CCCCCC"> man copy execute</font><font color="#E5E5E5"> until the</font>

249
00:11:10,310 --> 00:11:19,339
return and then take a look at where we

250
00:11:14,060 --> 00:11:21,439
once had<font color="#CCCCCC"> zeros now we have some code</font><font color="#E5E5E5"> and</font>

251
00:11:19,339 --> 00:11:24,379
what's left to do is just let the code

252
00:11:21,439 --> 00:11:26,449
executes a bit more until we land into

253
00:11:24,379 --> 00:11:27,769
<font color="#E5E5E5">our</font><font color="#CCCCCC"> shellcode now we can see that</font><font color="#E5E5E5"> our</font>

254
00:11:26,449 --> 00:11:29,779
shell code is executing if we take a

255
00:11:27,769 --> 00:11:33,860
look at the value of the<font color="#E5E5E5"> IP we can see</font>

256
00:11:29,779 --> 00:11:35,000
that that's<font color="#E5E5E5"> our</font><font color="#CCCCCC"> shell code</font><font color="#E5E5E5"> and so what</font>

257
00:11:33,860 --> 00:11:39,740
we're<font color="#CCCCCC"> gonna do</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> let the</font>

258
00:11:35,000 --> 00:11:43,069
chocolate<font color="#CCCCCC"> executed for a bit until it</font>

259
00:11:39,740 --> 00:11:45,769
does something interesting<font color="#E5E5E5"> and that's to</font>

260
00:11:43,069 --> 00:11:48,560
call the windows<font color="#E5E5E5"> api when</font><font color="#CCCCCC"> exit</font><font color="#E5E5E5"> which</font>

261
00:11:45,769 --> 00:11:50,990
will spawn a new process and so let's

262
00:11:48,560 --> 00:11:53,508
let this happen and see how it looks

263
00:11:50,990 --> 00:11:55,610
<font color="#CCCCCC">like so</font><font color="#E5E5E5"> one more step and we can see the</font>

264
00:11:53,509 --> 00:11:57,290
calculator<font color="#CCCCCC"> pop-up and</font><font color="#E5E5E5"> this basically</font>

265
00:11:55,610 --> 00:11:59,959
proves that we were able to inject<font color="#E5E5E5"> code</font>

266
00:11:57,290 --> 00:12:01,399
into the target process and the

267
00:11:59,959 --> 00:12:05,000
calculator pops up

268
00:12:01,399 --> 00:12:08,060
<font color="#E5E5E5">so back to the slides</font>

269
00:12:05,000 --> 00:12:10,970
<font color="#E5E5E5">what we did is we hijack the thread to</font>

270
00:12:08,060 --> 00:12:15,050
execute code on our behalf and this

271
00:12:10,970 --> 00:12:19,759
thread had a purpose before we had

272
00:12:15,050 --> 00:12:22,099
hijacked it so if we don't restore its

273
00:12:19,759 --> 00:12:24,410
execution safely to<font color="#CCCCCC"> wear it once</font><font color="#E5E5E5"> was</font>

274
00:12:22,100 --> 00:12:26,360
<font color="#E5E5E5">there's no telling what kind of effect</font>

275
00:12:24,410 --> 00:12:27,649
<font color="#CCCCCC">it could</font><font color="#E5E5E5"> have on the target</font><font color="#CCCCCC"> at but what</font>

276
00:12:26,360 --> 00:12:30,800
I can assure you what will happen is

277
00:12:27,649 --> 00:12:32,029
that it's not gonna be<font color="#E5E5E5"> stuff so</font><font color="#CCCCCC"> I'd like</font>

278
00:12:30,800 --> 00:12:36,050
<font color="#E5E5E5">to remind you that</font><font color="#CCCCCC"> were within the</font>

279
00:12:32,029 --> 00:12:40,220
context of a<font color="#E5E5E5"> seven</font><font color="#CCCCCC"> ABC</font><font color="#E5E5E5"> ABC dispatching</font>

280
00:12:36,050 --> 00:12:42,050
<font color="#CCCCCC">and so somehow the operating system has</font>

281
00:12:40,220 --> 00:12:45,170
to return the execution safely<font color="#E5E5E5"> because</font>

282
00:12:42,050 --> 00:12:47,660
that's just how<font color="#CCCCCC"> apc's work</font><font color="#E5E5E5"> and so if we</font>

283
00:12:45,170 --> 00:12:48,889
take a look at<font color="#CCCCCC"> KI user APC dispatcher</font>

284
00:12:47,660 --> 00:12:51,050
which is the function that<font color="#CCCCCC"> dispatches</font>

285
00:12:48,889 --> 00:12:53,540
the<font color="#CCCCCC"> apc's we can see</font><font color="#E5E5E5"> that it actually</font>

286
00:12:51,050 --> 00:12:56,660
stores the original context in<font color="#E5E5E5"> the</font>

287
00:12:53,540 --> 00:12:59,449
register<font color="#CCCCCC"> name</font><font color="#E5E5E5"> TDI and then dispatches</font>

288
00:12:56,660 --> 00:13:03,829
the APC<font color="#E5E5E5"> and when they</font><font color="#CCCCCC"> bc returns</font><font color="#E5E5E5"> it will</font>

289
00:12:59,449 --> 00:13:05,839
call the<font color="#CCCCCC"> w continue to with EDI past</font>

290
00:13:03,829 --> 00:13:09,469
this parameter to restore the execution

291
00:13:05,839 --> 00:13:11,660
safely in our case calling the APC

292
00:13:09,470 --> 00:13:14,000
<font color="#CCCCCC">causes the diversion of execution</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> our</font>

293
00:13:11,660 --> 00:13:15,259
<font color="#CCCCCC">shell code</font><font color="#E5E5E5"> and so this code will never</font>

294
00:13:14,000 --> 00:13:16,810
actually execute because there will

295
00:13:15,259 --> 00:13:19,570
never be returned to this code

296
00:13:16,810 --> 00:13:21,670
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> what we would</font><font color="#E5E5E5"> like to do is we</font>

297
00:13:19,570 --> 00:13:23,350
would like to just<font color="#E5E5E5"> back up</font>

298
00:13:21,670 --> 00:13:25,510
<font color="#CCCCCC">EDI at the</font><font color="#E5E5E5"> beginning of our shellcode</font>

299
00:13:23,350 --> 00:13:27,940
<font color="#E5E5E5">store it in a temporary variable and</font>

300
00:13:25,510 --> 00:13:31,000
then<font color="#E5E5E5"> you are malicious code or whatever</font>

301
00:13:27,940 --> 00:13:33,070
we want to do<font color="#E5E5E5"> and then finally call</font><font color="#CCCCCC"> VW</font>

302
00:13:31,000 --> 00:13:36,010
<font color="#CCCCCC">continue</font><font color="#E5E5E5"> ourselves and pass a pointer to</font>

303
00:13:33,070 --> 00:13:38,890
the to the<font color="#CCCCCC"> concept</font><font color="#E5E5E5"> structure that we</font>

304
00:13:36,010 --> 00:13:40,900
backed up from<font color="#E5E5E5"> EDI and then this</font>

305
00:13:38,890 --> 00:13:42,580
actually is all<font color="#E5E5E5"> that we need to do and</font>

306
00:13:40,900 --> 00:13:46,120
we can go back to our demo and we can

307
00:13:42,580 --> 00:13:48,430
see live<font color="#E5E5E5"> you can see this happen</font><font color="#CCCCCC"> so</font>

308
00:13:46,120 --> 00:13:49,750
we'll take<font color="#E5E5E5"> one few more steps and we can</font>

309
00:13:48,430 --> 00:13:51,849
see that the next thing that's going to

310
00:13:49,750 --> 00:13:54,610
be done is we're going to place the

311
00:13:51,850 --> 00:13:56,830
<font color="#E5E5E5">backstop value of</font><font color="#CCCCCC"> e di into DX which is</font>

312
00:13:54,610 --> 00:13:59,860
another register<font color="#E5E5E5"> push the size of the</font>

313
00:13:56,830 --> 00:14:02,200
stack<font color="#E5E5E5"> and then finally call and</font><font color="#CCCCCC"> she</font>

314
00:13:59,860 --> 00:14:06,250
continued<font color="#E5E5E5"> which should restore execution</font>

315
00:14:02,200 --> 00:14:08,650
safely and so let's let this this

316
00:14:06,250 --> 00:14:10,900
<font color="#E5E5E5">execute and you can see it says the</font>

317
00:14:08,650 --> 00:14:12,220
buggy is running<font color="#CCCCCC"> if we take a look at</font>

318
00:14:10,900 --> 00:14:13,720
<font color="#CCCCCC">google chrome which is the injected</font>

319
00:14:12,220 --> 00:14:14,650
process we can see that it works just

320
00:14:13,720 --> 00:14:16,360
fine

321
00:14:14,650 --> 00:14:18,730
<font color="#CCCCCC">I don't</font><font color="#E5E5E5"> have internet here so</font><font color="#CCCCCC"> i can show</font>

322
00:14:16,360 --> 00:14:24,370
you<font color="#E5E5E5"> that I can use the web but trust me</font>

323
00:14:18,730 --> 00:14:27,190
it works<font color="#CCCCCC"> so this works for all</font>

324
00:14:24,370 --> 00:14:29,350
normal<font color="#E5E5E5"> processes basically</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> as for</font>

325
00:14:27,190 --> 00:14:32,440
processes that are protected by

326
00:14:29,350 --> 00:14:35,740
<font color="#CCCCCC">control-flow</font><font color="#E5E5E5"> guard which</font><font color="#CCCCCC"> ms paint is an</font>

327
00:14:32,440 --> 00:14:39,160
example of those<font color="#E5E5E5"> if we try to inject</font><font color="#CCCCCC"> it</font>

328
00:14:35,740 --> 00:14:41,200
into ms paint we can see that<font color="#CCCCCC"> ms feint</font>

329
00:14:39,160 --> 00:14:42,640
<font color="#E5E5E5">crashes and if we take a look at the</font>

330
00:14:41,200 --> 00:14:44,589
call stack we can see that actually

331
00:14:42,640 --> 00:14:46,750
<font color="#E5E5E5">would cause</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> crash is a call to</font>

332
00:14:44,589 --> 00:14:48,940
<font color="#CCCCCC">our TLP handle invalid user call target</font>

333
00:14:46,750 --> 00:14:51,100
<font color="#E5E5E5">which is a function that belongs to</font>

334
00:14:48,940 --> 00:14:52,450
control<font color="#CCCCCC"> flow</font><font color="#E5E5E5"> guard and basically</font><font color="#CCCCCC"> how</font>

335
00:14:51,100 --> 00:14:54,190
<font color="#CCCCCC">control full guard works</font><font color="#E5E5E5"> it's a new</font>

336
00:14:52,450 --> 00:14:57,820
mitigation technique<font color="#E5E5E5"> introduced in</font>

337
00:14:54,190 --> 00:15:01,120
<font color="#E5E5E5">Windows 8.1 and Windows 10 and it</font><font color="#CCCCCC"> checks</font>

338
00:14:57,820 --> 00:15:04,360
and<font color="#CCCCCC"> validates every</font><font color="#E5E5E5"> indirect all and</font>

339
00:15:01,120 --> 00:15:07,390
make sure that the indirect call is made

340
00:15:04,360 --> 00:15:09,430
to a<font color="#CCCCCC"> man</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> there into a valid indirect</font>

341
00:15:07,390 --> 00:15:12,730
call target and basically so<font color="#E5E5E5"> there's</font>

342
00:15:09,430 --> 00:15:14,500
list or<font color="#CCCCCC"> a bitmap of valid in direct</font>

343
00:15:12,730 --> 00:15:17,320
targets and what we'd like to do is have

344
00:15:14,500 --> 00:15:19,750
<font color="#CCCCCC">our</font><font color="#E5E5E5"> indirect targets</font><font color="#CCCCCC"> added to that list</font>

345
00:15:17,320 --> 00:15:22,029
and we can do this using<font color="#CCCCCC"> empty set</font>

346
00:15:19,750 --> 00:15:23,830
information virtual memory and we have a

347
00:15:22,029 --> 00:15:24,939
whole blog about this on<font color="#E5E5E5"> our website you</font>

348
00:15:23,830 --> 00:15:27,370
guys are more than welcome to check it

349
00:15:24,940 --> 00:15:27,920
out<font color="#CCCCCC"> which explains how to do this and</font>

350
00:15:27,370 --> 00:15:30,829
<font color="#CCCCCC">have</font>

351
00:15:27,920 --> 00:15:33,469
<font color="#CCCCCC">for example but for our purposes you can</font>

352
00:15:30,829 --> 00:15:38,239
imagine that this system<font color="#CCCCCC"> called expect a</font>

353
00:15:33,470 --> 00:15:40,730
handle to a<font color="#CCCCCC"> to the process</font><font color="#E5E5E5"> a call target</font>

354
00:15:38,240 --> 00:15:42,920
and<font color="#E5E5E5"> fly that says</font><font color="#CCCCCC"> mark this</font><font color="#E5E5E5"> call target</font>

355
00:15:40,730 --> 00:15:45,500
is valid and then<font color="#CCCCCC"> once we do this</font><font color="#E5E5E5"> you'd</font>

356
00:15:42,920 --> 00:15:46,849
expect<font color="#E5E5E5"> it just magically work but</font>

357
00:15:45,500 --> 00:15:50,420
there's actually one more hurdle we need

358
00:15:46,850 --> 00:15:52,399
to get over and<font color="#E5E5E5"> that's that not many</font>

359
00:15:50,420 --> 00:15:54,769
people know that actually<font color="#CCCCCC"> CFG does</font><font color="#E5E5E5"> more</font>

360
00:15:52,399 --> 00:15:57,500
than advertised<font color="#E5E5E5"> and when you enable</font><font color="#CCCCCC"> see</font>

361
00:15:54,769 --> 00:15:59,750
<font color="#CCCCCC">for a process that actually enables</font><font color="#E5E5E5"> some</font>

362
00:15:57,500 --> 00:16:01,880
stacked<font color="#E5E5E5"> its protection</font><font color="#CCCCCC"> in calls</font><font color="#E5E5E5"> to</font>

363
00:15:59,750 --> 00:16:04,610
system<font color="#CCCCCC"> call</font><font color="#E5E5E5"> such as empty</font><font color="#CCCCCC"> set contacts</font>

364
00:16:01,880 --> 00:16:06,680
thread and<font color="#CCCCCC"> and continue</font><font color="#E5E5E5"> now this</font>

365
00:16:04,610 --> 00:16:09,199
functionality is implemented by calling

366
00:16:06,680 --> 00:16:11,750
<font color="#E5E5E5">verify context record which in turn</font>

367
00:16:09,199 --> 00:16:13,399
called<font color="#CCCCCC"> rtl</font><font color="#E5E5E5"> guard is valid stack pointer</font>

368
00:16:11,750 --> 00:16:15,079
<font color="#E5E5E5">so it would like to do is</font><font color="#CCCCCC"> we'd like to</font>

369
00:16:13,399 --> 00:16:16,639
take a look at these functions and see

370
00:16:15,079 --> 00:16:20,029
how this is implemented and see how we

371
00:16:16,639 --> 00:16:22,850
can bypass this and so<font color="#E5E5E5"> verify context</font>

372
00:16:20,029 --> 00:16:24,860
record simply calls<font color="#CCCCCC"> rtl garden valley</font>

373
00:16:22,850 --> 00:16:26,570
<font color="#E5E5E5">stack pointer and</font><font color="#CCCCCC"> passes the point to</font>

374
00:16:24,860 --> 00:16:28,550
the new value of<font color="#CCCCCC"> ESP were trying to set</font>

375
00:16:26,570 --> 00:16:30,769
<font color="#E5E5E5">and then whatever this function returns</font>

376
00:16:28,550 --> 00:16:32,899
will either<font color="#CCCCCC"> determine</font><font color="#E5E5E5"> will determine</font>

377
00:16:30,769 --> 00:16:36,829
whether<font color="#CCCCCC"> will return status invalid</font>

378
00:16:32,899 --> 00:16:39,740
parameter or status success<font color="#E5E5E5"> so we take a</font>

379
00:16:36,829 --> 00:16:41,719
look at<font color="#E5E5E5"> at</font><font color="#CCCCCC"> rtl guarded</font><font color="#E5E5E5"> about stack</font>

380
00:16:39,740 --> 00:16:45,170
pointer we can see that<font color="#E5E5E5"> what it does is</font>

381
00:16:41,720 --> 00:16:47,420
it<font color="#CCCCCC"> it</font><font color="#E5E5E5"> loads it loads the TV from the</font><font color="#CCCCCC"> e</font>

382
00:16:45,170 --> 00:16:51,199
<font color="#E5E5E5">thread then from the thread from the TV</font>

383
00:16:47,420 --> 00:16:54,800
it loads the<font color="#CCCCCC"> tid</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> MTB references the</font>

384
00:16:51,199 --> 00:16:58,849
<font color="#CCCCCC">sack</font><font color="#E5E5E5"> limit</font><font color="#CCCCCC"> instead</font><font color="#E5E5E5"> base of the of the</font>

385
00:16:54,800 --> 00:17:01,939
process of the<font color="#CCCCCC"> thread</font><font color="#E5E5E5"> sorry and and then</font>

386
00:16:58,850 --> 00:17:03,949
<font color="#E5E5E5">dependent checks whether the</font><font color="#CCCCCC"> the new</font>

387
00:17:01,940 --> 00:17:06,589
value for<font color="#CCCCCC"> ESP is between the</font><font color="#E5E5E5"> stack</font>

388
00:17:03,949 --> 00:17:09,049
<font color="#CCCCCC">limited</font><font color="#E5E5E5"> stack base and if it's below the</font>

389
00:17:06,589 --> 00:17:10,730
<font color="#E5E5E5">stack limit or</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> about the stack</font>

390
00:17:09,049 --> 00:17:13,069
<font color="#CCCCCC">basal return false otherwise it will</font>

391
00:17:10,730 --> 00:17:14,689
return truth and so what we'd like to do

392
00:17:13,069 --> 00:17:16,188
here is we just like to make it seem

393
00:17:14,689 --> 00:17:18,500
like there is no<font color="#E5E5E5"> stack</font><font color="#CCCCCC"> tivat</font><font color="#E5E5E5"> and we can</font>

394
00:17:16,189 --> 00:17:20,419
do that by querying the<font color="#CCCCCC"> stack</font><font color="#E5E5E5"> base</font><font color="#CCCCCC"> in</font>

395
00:17:18,500 --> 00:17:22,520
<font color="#E5E5E5">the stack limit of the target thread and</font>

396
00:17:20,419 --> 00:17:25,309
we can do that because<font color="#E5E5E5"> they're stored in</font>

397
00:17:22,520 --> 00:17:28,220
user mode<font color="#E5E5E5"> and so once we do that we can</font>

398
00:17:25,309 --> 00:17:30,620
just copy ROP<font color="#CCCCCC"> chained to</font><font color="#E5E5E5"> the actual</font>

399
00:17:28,220 --> 00:17:32,299
stack of the target thread and this will

400
00:17:30,620 --> 00:17:35,510
make it<font color="#E5E5E5"> seem to see if she</font><font color="#CCCCCC"> like there is</font>

401
00:17:32,299 --> 00:17:37,040
no<font color="#E5E5E5"> stack pivoting going on now some</font>

402
00:17:35,510 --> 00:17:38,870
<font color="#CCCCCC">vendors actually demonstrated the</font>

403
00:17:37,040 --> 00:17:40,580
<font color="#E5E5E5">prevention of</font><font color="#CCCCCC"> Adam bombing by flagging</font>

404
00:17:38,870 --> 00:17:43,729
this activity

405
00:17:40,580 --> 00:17:45,769
<font color="#E5E5E5">and this is just an implementation</font>

406
00:17:43,730 --> 00:17:47,390
<font color="#E5E5E5">detail something</font><font color="#CCCCCC"> I'd like to note it's</font>

407
00:17:45,769 --> 00:17:50,240
just an implementation detail and it can

408
00:17:47,390 --> 00:17:53,720
be easily overcome and we show here<font color="#E5E5E5"> some</font>

409
00:17:50,240 --> 00:17:56,299
code that actually overcomes this<font color="#CCCCCC"> tactic</font>

410
00:17:53,720 --> 00:17:57,919
problem and we're<font color="#CCCCCC"> going to post</font><font color="#E5E5E5"> this on</font>

411
00:17:56,299 --> 00:18:01,490
<font color="#E5E5E5">github</font><font color="#CCCCCC"> within the next few hours</font>

412
00:17:57,919 --> 00:18:05,330
actually<font color="#E5E5E5"> you can go on and browser on</font>

413
00:18:01,490 --> 00:18:07,940
our repository and so this actually<font color="#E5E5E5"> this</font>

414
00:18:05,330 --> 00:18:10,279
<font color="#CCCCCC">is</font><font color="#E5E5E5"> all we need to inject</font><font color="#CCCCCC"> children to see</font>

415
00:18:07,940 --> 00:18:15,860
<font color="#CCCCCC">if you protected processes and so let's</font>

416
00:18:10,279 --> 00:18:19,039
let's see this again live so you can see

417
00:18:15,860 --> 00:18:20,178
we have paint open here and we have the

418
00:18:19,039 --> 00:18:21,799
<font color="#CCCCCC">command line ready</font>

419
00:18:20,179 --> 00:18:23,929
<font color="#CCCCCC">you also</font><font color="#E5E5E5"> have the process monitor open</font>

420
00:18:21,799 --> 00:18:25,730
in the background<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so what we're</font>

421
00:18:23,929 --> 00:18:29,269
going to do is just<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> inject the</font>

422
00:18:25,730 --> 00:18:31,639
code will see the calculator<font color="#CCCCCC"> pop-up just</font>

423
00:18:29,269 --> 00:18:35,720
as before<font color="#E5E5E5"> and if we take a look at the</font>

424
00:18:31,639 --> 00:18:42,289
process monitor we can see that that<font color="#CCCCCC"> ms</font>

425
00:18:35,720 --> 00:18:46,309
<font color="#CCCCCC">paint created a new process and this</font>

426
00:18:42,289 --> 00:18:47,029
process is calculator which is pretty

427
00:18:46,309 --> 00:18:51,168
cool

428
00:18:47,029 --> 00:18:52,700
now if we take a look at ms paint again

429
00:18:51,169 --> 00:18:55,010
we can see that it's completely

430
00:18:52,700 --> 00:18:57,320
functioning<font color="#E5E5E5"> all of its threads are</font>

431
00:18:55,010 --> 00:19:00,200
intact nothing is nothing wrong with it

432
00:18:57,320 --> 00:19:01,850
<font color="#E5E5E5">and if the user was using ms paint while</font>

433
00:19:00,200 --> 00:19:03,590
we're doing this<font color="#CCCCCC"> the user couldn't</font>

434
00:19:01,850 --> 00:19:09,620
couldn't<font color="#E5E5E5"> tell the difference</font>

435
00:19:03,590 --> 00:19:15,110
so to sum up what we did is we took we

436
00:19:09,620 --> 00:19:17,360
took<font color="#E5E5E5"> Adam bombing and we split into into</font>

437
00:19:15,110 --> 00:19:19,789
<font color="#E5E5E5">three different steps the first step was</font>

438
00:19:17,360 --> 00:19:21,649
to write whatever<font color="#CCCCCC"> you want into</font><font color="#E5E5E5"> the</font>

439
00:19:19,789 --> 00:19:24,110
address space of the target process and

440
00:19:21,649 --> 00:19:27,110
we achieve this by calling global<font color="#CCCCCC"> Adam</font>

441
00:19:24,110 --> 00:19:30,830
to store<font color="#E5E5E5"> code in the global</font><font color="#CCCCCC"> Adam table</font>

442
00:19:27,110 --> 00:19:33,799
and then we called<font color="#CCCCCC"> ntq APC threat to Q&A</font>

443
00:19:30,830 --> 00:19:36,260
<font color="#CCCCCC">pc to the target thread and that</font><font color="#E5E5E5"> APC</font>

444
00:19:33,799 --> 00:19:37,519
actually executed<font color="#E5E5E5"> global get</font><font color="#CCCCCC"> Adam name</font>

445
00:19:36,260 --> 00:19:40,908
and that<font color="#CCCCCC"> retrieves the code that we</font>

446
00:19:37,519 --> 00:19:44,029
stored within the global<font color="#CCCCCC"> Adam table then</font>

447
00:19:40,909 --> 00:19:46,549
step number<font color="#E5E5E5"> two is execution</font><font color="#CCCCCC"> we were</font>

448
00:19:44,029 --> 00:19:48,649
used a little<font color="#CCCCCC"> of</font><font color="#E5E5E5"> return oriented</font>

449
00:19:46,549 --> 00:19:51,918
programming to allocate some executable

450
00:19:48,649 --> 00:19:53,570
memory then copy the shell code that we

451
00:19:51,919 --> 00:19:56,180
wrote to<font color="#E5E5E5"> read</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> memory</font>

452
00:19:53,570 --> 00:19:58,639
<font color="#E5E5E5">to the newly executable memory and</font>

453
00:19:56,180 --> 00:20:01,340
finally we executed<font color="#E5E5E5"> our</font><font color="#CCCCCC"> shell towed in</font>

454
00:19:58,640 --> 00:20:04,280
order to execute the<font color="#CCCCCC"> Rob</font><font color="#E5E5E5"> changer to</font>

455
00:20:01,340 --> 00:20:06,379
invoke<font color="#E5E5E5"> its we used</font><font color="#CCCCCC"> qap threat</font><font color="#E5E5E5"> again this</font>

456
00:20:04,280 --> 00:20:08,240
time passing<font color="#E5E5E5"> a pointer to empty</font><font color="#CCCCCC"> set</font>

457
00:20:06,380 --> 00:20:10,100
<font color="#E5E5E5">context thread which diverts the</font>

458
00:20:08,240 --> 00:20:11,990
execution to execute the little return

459
00:20:10,100 --> 00:20:14,149
<font color="#CCCCCC">on</font><font color="#E5E5E5"> its programming and then which</font>

460
00:20:11,990 --> 00:20:17,210
eventually leads to the execution of the

461
00:20:14,150 --> 00:20:18,890
<font color="#CCCCCC">shell toad and</font><font color="#E5E5E5"> then finally to restore</font>

462
00:20:17,210 --> 00:20:23,870
institution and to leave no footprints

463
00:20:18,890 --> 00:20:25,580
behind<font color="#CCCCCC"> we copy the value stored in EDI</font>

464
00:20:23,870 --> 00:20:28,280
which is the original context we store

465
00:20:25,580 --> 00:20:30,560
that in a temporary variable<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the end</font>

466
00:20:28,280 --> 00:20:32,540
of our<font color="#CCCCCC"> shellcode we</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> VW continue</font>

467
00:20:30,560 --> 00:20:34,940
<font color="#E5E5E5">passes the back</font><font color="#CCCCCC"> of value in this</font>

468
00:20:32,540 --> 00:20:38,389
restores the executioner<font color="#CCCCCC"> just let the OS</font>

469
00:20:34,940 --> 00:20:40,940
do<font color="#CCCCCC"> with it</font><font color="#E5E5E5"> was meant to do in order to</font>

470
00:20:38,390 --> 00:20:43,970
add<font color="#E5E5E5"> CFG exceptions we did we use the</font>

471
00:20:40,940 --> 00:20:45,500
empty set information virtual memory and

472
00:20:43,970 --> 00:20:48,170
the last step we<font color="#E5E5E5"> had to take</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> to</font>

473
00:20:45,500 --> 00:20:49,910
bypass<font color="#E5E5E5"> see if</font><font color="#CCCCCC"> Jesus</font><font color="#E5E5E5"> stack</font><font color="#CCCCCC"> favorite</font>

474
00:20:48,170 --> 00:20:52,400
<font color="#E5E5E5">protection and to do that we have to do</font>

475
00:20:49,910 --> 00:20:56,030
is just<font color="#E5E5E5"> copy the ROP</font><font color="#CCCCCC"> change of the stack</font>

476
00:20:52,400 --> 00:20:59,510
and then<font color="#E5E5E5"> this basically just solve the</font>

477
00:20:56,030 --> 00:21:03,020
problem and there is no issue<font color="#E5E5E5"> so as for</font>

478
00:20:59,510 --> 00:21:04,879
<font color="#CCCCCC">Microsoft response to this</font><font color="#E5E5E5"> basically</font>

479
00:21:03,020 --> 00:21:06,350
<font color="#CCCCCC">they're the response is that they're not</font>

480
00:21:04,880 --> 00:21:09,830
really interested in post exploitation

481
00:21:06,350 --> 00:21:13,040
techniques and<font color="#CCCCCC"> what we all know that</font>

482
00:21:09,830 --> 00:21:15,919
compromise is inevitable and we do have

483
00:21:13,040 --> 00:21:18,620
to deal with with a post exploitation

484
00:21:15,920 --> 00:21:21,260
techniques<font color="#E5E5E5"> and so the best course of</font>

485
00:21:18,620 --> 00:21:24,409
action would be<font color="#E5E5E5"> 44 third-party</font><font color="#CCCCCC"> security</font>

486
00:21:21,260 --> 00:21:26,750
vendors would be to hook<font color="#CCCCCC"> ki user APC</font>

487
00:21:24,410 --> 00:21:29,600
dispatcher<font color="#CCCCCC"> in just block</font><font color="#E5E5E5"> calls to</font><font color="#CCCCCC"> global</font>

488
00:21:26,750 --> 00:21:31,910
get<font color="#CCCCCC"> Adam name and two NT set contacts</font>

489
00:21:29,600 --> 00:21:33,800
thread which nobody should be calling in

490
00:21:31,910 --> 00:21:36,170
the first place so this will never

491
00:21:33,800 --> 00:21:38,690
generate any false positive and this

492
00:21:36,170 --> 00:21:40,130
should<font color="#E5E5E5"> should block any any</font>

493
00:21:38,690 --> 00:21:41,780
implementation of a demonic<font color="#CCCCCC"> possession</font>

494
00:21:40,130 --> 00:21:46,250
<font color="#CCCCCC">of the core of it and there's really no</font>

495
00:21:41,780 --> 00:21:49,370
way around this<font color="#E5E5E5"> and that's basically it</font>

496
00:21:46,250 --> 00:21:51,820
guys<font color="#CCCCCC"> have</font><font color="#E5E5E5"> any questions</font><font color="#CCCCCC"> I'd love to</font>

497
00:21:49,370 --> 00:21:51,820
address them

498
00:21:53,020 --> 00:22:02,490
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> any questions</font>

499
00:22:03,130 --> 00:22:06,090
<font color="#CCCCCC">alright</font>

500
00:22:09,970 --> 00:22:14,800
<font color="#CCCCCC">no one</font><font color="#E5E5E5"> has questions at all</font>

501
00:22:13,780 --> 00:22:19,629
that means<font color="#CCCCCC"> this</font><font color="#E5E5E5"> talk with either</font>

502
00:22:14,800 --> 00:22:22,770
flawless<font color="#E5E5E5"> or you didn't</font>

503
00:22:19,630 --> 00:22:22,770
yes thank you yes sir

504
00:22:28,490 --> 00:22:35,000
<font color="#CCCCCC">yeah that's</font><font color="#E5E5E5"> that's their take on it and</font>

505
00:22:32,000 --> 00:22:38,240
<font color="#CCCCCC">I</font><font color="#E5E5E5"> think that</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so the question was</font>

506
00:22:35,000 --> 00:22:40,160
the question was what's my take on

507
00:22:38,240 --> 00:22:42,140
<font color="#CCCCCC">Microsoft's response i mean they</font>

508
00:22:40,160 --> 00:22:44,570
basically said that post exploitation

509
00:22:42,140 --> 00:22:48,320
techniques are not interesting<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

510
00:22:44,570 --> 00:22:51,169
think that<font color="#CCCCCC"> Microsoft</font><font color="#E5E5E5"> do kind of</font>

511
00:22:48,320 --> 00:22:53,750
<font color="#CCCCCC">contradict themselves</font><font color="#E5E5E5"> because for</font>

512
00:22:51,170 --> 00:22:57,320
example they<font color="#E5E5E5"> they say that</font><font color="#CCCCCC"> you AC is</font>

513
00:22:53,750 --> 00:22:59,510
actually not a security mechanism<font color="#E5E5E5"> but in</font>

514
00:22:57,320 --> 00:23:02,600
fact they do patch<font color="#E5E5E5"> windows to block</font><font color="#CCCCCC"> any</font>

515
00:22:59,510 --> 00:23:04,160
<font color="#CCCCCC">we see bypasses</font><font color="#E5E5E5"> just like one of our</font><font color="#CCCCCC"> UC</font>

516
00:23:02,600 --> 00:23:07,909
<font color="#CCCCCC">bypasses you guys can see on our blog</font>

517
00:23:04,160 --> 00:23:10,580
<font color="#E5E5E5">and so I think they're just not</font>

518
00:23:07,910 --> 00:23:12,080
interested in handing out<font color="#CCCCCC"> TVs and commit</font>

519
00:23:10,580 --> 00:23:14,659
make a problem where there shouldn't be

520
00:23:12,080 --> 00:23:15,710
one but<font color="#CCCCCC"> i think we all know that we do</font>

521
00:23:14,660 --> 00:23:17,270
need to deal with<font color="#E5E5E5"> post-acquisition</font>

522
00:23:15,710 --> 00:23:20,000
<font color="#E5E5E5">techniques because it's interesting and</font>

523
00:23:17,270 --> 00:23:21,410
because this does happen out there in

524
00:23:20,000 --> 00:23:26,620
the wild all the time

525
00:23:21,410 --> 00:23:26,620
<font color="#E5E5E5">any more questions</font><font color="#CCCCCC"> yeah</font>

526
00:23:32,039 --> 00:23:36,090
<font color="#CCCCCC">no so they can be used legitimately they</font>

527
00:23:35,399 --> 00:23:39,600
shouldn't be

528
00:23:36,090 --> 00:23:41,728
yeah sorry yeah you're right so the

529
00:23:39,600 --> 00:23:43,289
<font color="#E5E5E5">three</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> three functions that</font><font color="#CCCCCC"> I said</font>

530
00:23:41,729 --> 00:23:46,109
that we should just block

531
00:23:43,289 --> 00:23:47,908
what why not why not just block them

532
00:23:46,109 --> 00:23:50,309
entirely and why<font color="#CCCCCC"> do</font><font color="#E5E5E5"> they even exist if</font>

533
00:23:47,909 --> 00:23:52,529
nobody can use<font color="#E5E5E5"> and legitimately so what</font>

534
00:23:50,309 --> 00:23:54,539
<font color="#CCCCCC">I meant to say was</font><font color="#E5E5E5"> these functions can</font>

535
00:23:52,529 --> 00:23:57,539
be<font color="#CCCCCC"> as legitimately</font><font color="#E5E5E5"> just not within the</font>

536
00:23:54,539 --> 00:23:59,429
context of an APC<font color="#CCCCCC"> the</font><font color="#E5E5E5"> during normal</font>

537
00:23:57,539 --> 00:24:02,158
programming you could use these<font color="#E5E5E5"> these</font>

538
00:23:59,429 --> 00:24:03,869
functions and the first<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> to</font>

539
00:24:02,159 --> 00:24:06,269
which are the global get<font color="#CCCCCC"> Adam name</font>

540
00:24:03,869 --> 00:24:08,849
function<font color="#CCCCCC"> so these functions they they're</font>

541
00:24:06,269 --> 00:24:12,809
used within the<font color="#E5E5E5"> windows user interface</font><font color="#CCCCCC"> a</font>

542
00:24:08,849 --> 00:24:14,849
lot actually and the the other system

543
00:24:12,809 --> 00:24:18,330
call is<font color="#E5E5E5"> it's known to be malicious but</font>

544
00:24:14,849 --> 00:24:21,539
it does have some some some quite

545
00:24:18,330 --> 00:24:22,859
legitimate uses<font color="#E5E5E5"> but there's no way that</font>

546
00:24:21,539 --> 00:24:24,479
<font color="#E5E5E5">an APC should call any of these</font>

547
00:24:22,859 --> 00:24:26,249
functions that's just a coincidence that

548
00:24:24,479 --> 00:24:27,720
it's possible and something that

549
00:24:26,249 --> 00:24:29,070
<font color="#CCCCCC">Microsoft didn't think was possible when</font>

550
00:24:27,720 --> 00:24:36,599
they were designing this mechanism

551
00:24:29,070 --> 00:24:39,119
<font color="#E5E5E5">anything else</font><font color="#CCCCCC"> it's hard to see if</font>

552
00:24:36,599 --> 00:24:41,129
<font color="#E5E5E5">there's anyone</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> there raising</font><font color="#CCCCCC"> their</font>

553
00:24:39,119 --> 00:24:44,478
<font color="#CCCCCC">hand but i think not</font>

554
00:24:41,129 --> 00:24:44,478
<font color="#CCCCCC">yes</font>

555
00:24:44,650 --> 00:24:50,620
<font color="#CCCCCC">couldn't microsoft block those from the</font>

556
00:24:48,250 --> 00:24:52,030
context of an APC<font color="#CCCCCC"> yeah they could in</font>

557
00:24:50,620 --> 00:24:54,580
theory<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> they're just not</font>

558
00:24:52,030 --> 00:24:57,160
interested in doing it<font color="#E5E5E5"> but yeah</font><font color="#CCCCCC"> that's</font>

559
00:24:54,580 --> 00:25:00,280
<font color="#CCCCCC">they leave that kind of stuff to be to</font>

560
00:24:57,160 --> 00:25:03,040
the antivirus or<font color="#CCCCCC"> next-gen antivirus</font>

561
00:25:00,280 --> 00:25:04,360
solutions<font color="#E5E5E5"> we might see</font><font color="#CCCCCC"> Microsoft making</font>

562
00:25:03,040 --> 00:25:06,190
changes to this kind of stuff you know

563
00:25:04,360 --> 00:25:09,010
in the future<font color="#CCCCCC"> that they are trying</font><font color="#E5E5E5"> to</font>

564
00:25:06,190 --> 00:25:11,050
come up with new<font color="#E5E5E5"> a lot of mitigation</font>

565
00:25:09,010 --> 00:25:12,580
techniques and for example<font color="#E5E5E5"> they're</font>

566
00:25:11,050 --> 00:25:14,500
actually they<font color="#CCCCCC"> they're coming up with</font>

567
00:25:12,580 --> 00:25:16,419
this new<font color="#E5E5E5"> mitigation technique now that's</font>

568
00:25:14,500 --> 00:25:19,270
going to be going to block the ability

569
00:25:16,420 --> 00:25:21,250
of one process from changing the context

570
00:25:19,270 --> 00:25:22,900
of another process<font color="#E5E5E5"> the</font><font color="#CCCCCC"> privilege itself</font>

571
00:25:21,250 --> 00:25:25,090
will not exist for it and that's

572
00:25:22,900 --> 00:25:27,970
something you can set<font color="#E5E5E5"> you will be able</font>

573
00:25:25,090 --> 00:25:31,240
to set once this new feature gets rolled

574
00:25:27,970 --> 00:25:32,470
out<font color="#E5E5E5"> and so this kind of shows that maybe</font>

575
00:25:31,240 --> 00:25:34,270
they are interested in doing something

576
00:25:32,470 --> 00:25:36,070
like this<font color="#E5E5E5"> someday in the future but</font><font color="#CCCCCC"> i</font>

577
00:25:34,270 --> 00:25:43,030
don't think they're just there yet

578
00:25:36,070 --> 00:25:45,419
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> speak louder I can't</font>

579
00:25:43,030 --> 00:25:45,420
<font color="#E5E5E5">hear you</font>

580
00:25:48,150 --> 00:25:52,320
<font color="#E5E5E5">so</font><font color="#CCCCCC"> a hacker we just</font><font color="#E5E5E5"> need to be able to</font>

581
00:25:50,220 --> 00:25:55,860
run code on your on your machine

582
00:25:52,320 --> 00:25:59,280
there's no need<font color="#E5E5E5"> for any</font><font color="#CCCCCC"> high privileges</font>

583
00:25:55,860 --> 00:26:02,040
<font color="#CCCCCC">the limit</font><font color="#E5E5E5"> is that you will only be able</font>

584
00:25:59,280 --> 00:26:06,480
to inject<font color="#E5E5E5"> code into processes that are</font>

585
00:26:02,040 --> 00:26:08,730
within your privilege of accessing<font color="#E5E5E5"> so</font>

586
00:26:06,480 --> 00:26:11,070
this basically does not give you an

587
00:26:08,730 --> 00:26:12,510
elevation<font color="#CCCCCC"> privileges lets you jump from</font>

588
00:26:11,070 --> 00:26:18,360
one process to another

589
00:26:12,510 --> 00:26:29,310
<font color="#E5E5E5">okay anyone else</font>

590
00:26:18,360 --> 00:26:32,129
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> thank you thank you very much</font>

591
00:26:29,310 --> 00:26:34,260
<font color="#CCCCCC">taller on</font><font color="#E5E5E5"> behalf of</font><font color="#CCCCCC"> fit and besides SF</font>

592
00:26:32,130 --> 00:26:36,780
<font color="#CCCCCC">we would like to present you with a</font><font color="#E5E5E5"> fit</font>

593
00:26:34,260 --> 00:26:40,410
<font color="#CCCCCC">alta</font><font color="#E5E5E5"> and to remind you that motivation</font>

594
00:26:36,780 --> 00:26:42,060
is your best accessory<font color="#CCCCCC"> i guess</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

595
00:26:40,410 --> 00:26:44,250
<font color="#E5E5E5">thank you yeah it took three times we</font>

596
00:26:42,060 --> 00:26:46,590
got last time thank you<font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> there is</font>

597
00:26:44,250 --> 00:26:48,780
also a happy hour after all of this

598
00:26:46,590 --> 00:26:50,520
after<font color="#CCCCCC"> all</font><font color="#E5E5E5"> the talk right here</font><font color="#CCCCCC"> I'm hosted</font>

599
00:26:48,780 --> 00:26:52,680
by<font color="#CCCCCC"> Salesforce there are still a lot of</font>

600
00:26:50,520 --> 00:26:54,900
cookies over there and<font color="#E5E5E5"> there is a</font>

601
00:26:52,680 --> 00:26:56,910
spymaster challenge going on all day in

602
00:26:54,900 --> 00:26:57,870
the lockpick village which is right up

603
00:26:56,910 --> 00:27:00,390
that<font color="#E5E5E5"> away</font>

604
00:26:57,870 --> 00:27:03,149
thank you<font color="#E5E5E5"> so thank you all for coming</font>

605
00:27:00,390 --> 00:27:05,390
and<font color="#E5E5E5"> I'm here to answer any questions you</font>

606
00:27:03,150 --> 00:27:05,390
may have

607
00:27:07,789 --> 00:27:14,440
<font color="#E5E5E5">and once again you can connect with</font><font color="#CCCCCC"> tall</font>

608
00:27:09,799 --> 00:27:14,440
<font color="#CCCCCC">on tier list</font><font color="#E5E5E5"> and if you have</font>

