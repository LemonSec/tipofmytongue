1
00:00:03,170 --> 00:00:24,560
<font color="#CCCCCC">okay welcome back for our</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> session</font>

2
00:00:21,080 --> 00:00:29,448
we have<font color="#CCCCCC"> Amanda Russo that hijacking to</font>

3
00:00:24,560 --> 00:00:31,130
defend<font color="#CCCCCC"> powershell</font><font color="#E5E5E5"> so here's Amanda</font><font color="#CCCCCC"> can</font>

4
00:00:29,449 --> 00:00:35,059
you<font color="#E5E5E5"> guys hear me</font>

5
00:00:31,130 --> 00:00:37,850
sorry it's not really low<font color="#E5E5E5"> so my name is</font>

6
00:00:35,059 --> 00:00:40,190
<font color="#CCCCCC">a memory so and i'm actually a shower</font>

7
00:00:37,850 --> 00:00:42,290
unicorn on<font color="#CCCCCC"> twitter but i'm a senior in</font>

8
00:00:40,190 --> 00:00:44,449
<font color="#CCCCCC">our researcher a 10 game</font><font color="#E5E5E5"> and I focus on</font>

9
00:00:42,290 --> 00:00:47,540
both windows and<font color="#E5E5E5"> OSX and sometimes</font><font color="#CCCCCC"> the</font>

10
00:00:44,449 --> 00:00:49,400
<font color="#E5E5E5">next hour</font><font color="#CCCCCC"> i really</font><font color="#E5E5E5"> love malware and I</font>

11
00:00:47,540 --> 00:00:51,860
have this little<font color="#CCCCCC"> thicker</font><font color="#E5E5E5"> up front if you</font>

12
00:00:49,400 --> 00:00:53,690
want it<font color="#CCCCCC"> does give me</font><font color="#E5E5E5"> an hour</font>

13
00:00:51,860 --> 00:00:58,100
<font color="#E5E5E5">I'm always asking people to give them</font>

14
00:00:53,690 --> 00:00:59,839
<font color="#E5E5E5">our</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> so the goal of the day is we all</font>

15
00:00:58,100 --> 00:01:03,229
know<font color="#E5E5E5"> power</font><font color="#CCCCCC"> shells and a lot of attacks</font>

16
00:00:59,839 --> 00:01:05,119
<font color="#CCCCCC">so we want to run</font><font color="#E5E5E5"> partial normal</font>

17
00:01:03,229 --> 00:01:08,060
environment because<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think guys use the</font>

18
00:01:05,119 --> 00:01:10,700
same thing to do<font color="#E5E5E5"> their</font><font color="#CCCCCC"> setup right we</font>

19
00:01:08,060 --> 00:01:13,130
want to analyze the Aquacade commands

20
00:01:10,700 --> 00:01:15,259
<font color="#CCCCCC">I'll</font><font color="#E5E5E5"> explain</font><font color="#CCCCCC"> that later</font><font color="#E5E5E5"> we want to</font>

21
00:01:13,130 --> 00:01:19,009
remain healthy environment and avoid any

22
00:01:15,259 --> 00:01:21,890
bypasses<font color="#CCCCCC"> i'll talk about that and allow</font>

23
00:01:19,009 --> 00:01:24,710
<font color="#CCCCCC">unread time analysis for either blocking</font>

24
00:01:21,890 --> 00:01:26,420
or just regular detection and we want to

25
00:01:24,710 --> 00:01:31,548
make sure we can support our shoulders

26
00:01:26,420 --> 00:01:33,770
<font color="#CCCCCC">into through slide</font><font color="#E5E5E5"> so there's a joke i</font>

27
00:01:31,549 --> 00:01:36,649
have with like the<font color="#CCCCCC"> powershell guys that</font>

28
00:01:33,770 --> 00:01:39,798
you know its power shell kind of a

29
00:01:36,649 --> 00:01:42,950
stupid<font color="#E5E5E5"> joke but</font><font color="#CCCCCC"> i think</font><font color="#E5E5E5"> i can do</font><font color="#CCCCCC"> with</font>

30
00:01:39,799 --> 00:01:45,890
<font color="#CCCCCC">photoshop alright so i'm going to go</font>

31
00:01:42,950 --> 00:01:48,499
over a<font color="#E5E5E5"> attack history first</font><font color="#CCCCCC"> just a</font>

32
00:01:45,890 --> 00:01:50,569
<font color="#E5E5E5">little like simple overview try to go</font>

33
00:01:48,499 --> 00:01:52,939
<font color="#E5E5E5">over dotnet bear with me I know you</font>

34
00:01:50,569 --> 00:01:54,469
already know<font color="#E5E5E5"> dotnet of</font><font color="#CCCCCC"> i'm just</font><font color="#E5E5E5"> going to</font>

35
00:01:52,939 --> 00:01:55,969
run through it really quickly and

36
00:01:54,469 --> 00:01:57,408
highlight some of the points that<font color="#E5E5E5"> are</font>

37
00:01:55,969 --> 00:01:59,940
important<font color="#E5E5E5"> and i'm going to go over</font>

38
00:01:57,409 --> 00:02:01,890
<font color="#CCCCCC">powershell specifically</font><font color="#E5E5E5"> bypasses</font>

39
00:01:59,940 --> 00:02:05,460
and all that stuff and then<font color="#CCCCCC"> i'm going to</font>

40
00:02:01,890 --> 00:02:07,260
talk about how<font color="#CCCCCC"> i do see</font><font color="#E5E5E5"> sharp DLL</font>

41
00:02:05,460 --> 00:02:09,720
injection and some of the solutions<font color="#CCCCCC"> but</font>

42
00:02:07,260 --> 00:02:11,730
<font color="#CCCCCC">i'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to talk</font><font color="#E5E5E5"> about today</font><font color="#CCCCCC"> so for my</font>

43
00:02:09,720 --> 00:02:15,210
solutions<font color="#E5E5E5"> i have four different types</font><font color="#CCCCCC"> i</font>

44
00:02:11,730 --> 00:02:17,609
went over<font color="#CCCCCC"> io binary modification clr</font>

45
00:02:15,210 --> 00:02:20,250
profiling<font color="#E5E5E5"> the JIT compiler hooking and</font>

46
00:02:17,610 --> 00:02:23,010
<font color="#E5E5E5">sea-based method</font><font color="#CCCCCC"> would be</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'll talk</font>

47
00:02:20,250 --> 00:02:26,580
about<font color="#E5E5E5"> those as much as</font><font color="#CCCCCC"> i can in</font><font color="#E5E5E5"> 30</font>

48
00:02:23,010 --> 00:02:30,359
minutes<font color="#CCCCCC"> so there's</font><font color="#E5E5E5"> a timeline that</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> put</font>

49
00:02:26,580 --> 00:02:33,210
together a you know<font color="#CCCCCC"> powershell</font><font color="#E5E5E5"> framework</font>

50
00:02:30,360 --> 00:02:36,240
and<font color="#CCCCCC"> partial Mauer</font><font color="#E5E5E5"> that has been used in</font>

51
00:02:33,210 --> 00:02:39,390
the last couple years since 2012

52
00:02:36,240 --> 00:02:41,820
so you see<font color="#CCCCCC"> Power Floyd of everybody</font>

53
00:02:39,390 --> 00:02:44,489
<font color="#CCCCCC">knows</font><font color="#E5E5E5"> me sharing that the offensive</font>

54
00:02:41,820 --> 00:02:48,780
framework<font color="#E5E5E5"> power</font><font color="#CCCCCC"> league which was one of</font>

55
00:02:44,490 --> 00:02:50,940
the first using a using<font color="#CCCCCC"> the pivot for</font>

56
00:02:48,780 --> 00:02:53,880
the payload being<font color="#CCCCCC"> filing and all that</font>

57
00:02:50,940 --> 00:02:55,530
and<font color="#CCCCCC"> I</font><font color="#E5E5E5"> keep going down remember power do</font>

58
00:02:53,880 --> 00:03:01,440
<font color="#E5E5E5">I think</font><font color="#CCCCCC"> it's the same guys who did the</font>

59
00:02:55,530 --> 00:03:04,380
BMC hacks<font color="#E5E5E5"> so so normally</font><font color="#CCCCCC"> a powershell in</font>

60
00:03:01,440 --> 00:03:07,050
actual<font color="#E5E5E5"> campaigns used to transition from</font>

61
00:03:04,380 --> 00:03:09,750
the exploitation part of this stage of

62
00:03:07,050 --> 00:03:11,580
the attack<font color="#E5E5E5"> to the second</font><font color="#CCCCCC"> stage is actual</font>

63
00:03:09,750 --> 00:03:14,760
payload<font color="#CCCCCC"> that either becomes a</font><font color="#E5E5E5"> bailout or</font>

64
00:03:11,580 --> 00:03:17,250
it actually<font color="#E5E5E5"> execute the payload</font><font color="#CCCCCC"> so</font>

65
00:03:14,760 --> 00:03:19,709
somebody's examples are<font color="#E5E5E5"> powerfully of</font>

66
00:03:17,250 --> 00:03:21,870
<font color="#E5E5E5">powerlessness</font><font color="#CCCCCC"> power do and some</font><font color="#E5E5E5"> hunter</font>

67
00:03:19,709 --> 00:03:26,310
exploit kits<font color="#E5E5E5"> variation</font>

68
00:03:21,870 --> 00:03:28,800
oh and also another thing<font color="#CCCCCC"> I've known</font><font color="#E5E5E5"> for</font>

69
00:03:26,310 --> 00:03:32,010
making these terrible<font color="#E5E5E5"> bad</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> our pickup</font>

70
00:03:28,800 --> 00:03:33,540
lines<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's kind of</font><font color="#E5E5E5"> have you have you</font>

71
00:03:32,010 --> 00:03:34,590
<font color="#CCCCCC">learned a little bit about what</font><font color="#E5E5E5"> I'm</font>

72
00:03:33,540 --> 00:03:37,380
hugging him up

73
00:03:34,590 --> 00:03:39,570
hey girl do you like<font color="#CCCCCC"> powershell and</font>

74
00:03:37,380 --> 00:03:42,299
<font color="#E5E5E5">imagine</font><font color="#CCCCCC"> because mr. robot themed four</font>

75
00:03:39,570 --> 00:03:44,790
<font color="#CCCCCC">sides right</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> i had like this</font>

76
00:03:42,300 --> 00:03:46,709
<font color="#CCCCCC">paper</font><font color="#E5E5E5"> suspending your memory</font><font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> you</font>

77
00:03:44,790 --> 00:03:49,049
remember<font color="#CCCCCC"> i said earlier a lot of there's</font>

78
00:03:46,709 --> 00:03:53,190
a lot of file with malware or<font color="#CCCCCC"> files</font>

79
00:03:49,050 --> 00:03:54,790
attack based on<font color="#CCCCCC"> powershell</font><font color="#E5E5E5"> so just let</font>

80
00:03:53,190 --> 00:03:58,750
<font color="#E5E5E5">you</font><font color="#CCCCCC"> get some</font><font color="#E5E5E5"> wake up a little bit</font>

81
00:03:54,790 --> 00:04:00,189
<font color="#CCCCCC">so I thought well known for observation</font>

82
00:03:58,750 --> 00:04:02,500
for some of these<font color="#E5E5E5"> attacks that</font><font color="#CCCCCC"> you can</font>

83
00:04:00,189 --> 00:04:05,290
see like<font color="#E5E5E5"> the invoke</font><font color="#CCCCCC"> observation was made</font>

84
00:04:02,500 --> 00:04:07,359
<font color="#CCCCCC">by</font><font color="#E5E5E5"> a offensive security researcher gets</font>

85
00:04:05,290 --> 00:04:09,400
me the invoked man is actually<font color="#CCCCCC"> in</font><font color="#E5E5E5"> a</font>

86
00:04:07,359 --> 00:04:12,790
whole<font color="#E5E5E5"> bunch of different section</font><font color="#CCCCCC"> at</font>

87
00:04:09,400 --> 00:04:16,239
<font color="#CCCCCC">strings even the coin vault you when you</font>

88
00:04:12,790 --> 00:04:19,149
do off<font color="#E5E5E5"> decompile with the</font><font color="#CCCCCC"> the binary</font>

89
00:04:16,238 --> 00:04:20,440
<font color="#CCCCCC">going to get the pc</font><font color="#E5E5E5"> sharp</font><font color="#CCCCCC"> code you can</font>

90
00:04:19,149 --> 00:04:23,979
<font color="#E5E5E5">see that they're using different types</font>

91
00:04:20,440 --> 00:04:27,310
of characters to change the actual names

92
00:04:23,979 --> 00:04:29,680
of the functions and on<font color="#E5E5E5"> top of that</font>

93
00:04:27,310 --> 00:04:31,210
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> no protection applications or</font><font color="#E5E5E5"> if</font>

94
00:04:29,680 --> 00:04:32,590
<font color="#E5E5E5">you're familiar with computer expert</font>

95
00:04:31,210 --> 00:04:34,570
<font color="#CCCCCC">confused there which is actually</font><font color="#E5E5E5"> using</font>

96
00:04:32,590 --> 00:04:38,198
<font color="#CCCCCC">coin vault</font><font color="#E5E5E5"> and then there's dotnet</font>

97
00:04:34,570 --> 00:04:40,030
reactor which is actually the commercial

98
00:04:38,199 --> 00:04:41,800
version where it comes with string

99
00:04:40,030 --> 00:04:45,190
encryption and they become<font color="#CCCCCC"> a</font><font color="#E5E5E5"> violation</font>

100
00:04:41,800 --> 00:04:47,620
<font color="#CCCCCC">control full control</font><font color="#E5E5E5"> up LOL obligation</font>

101
00:04:45,190 --> 00:04:52,479
and<font color="#E5E5E5"> anti-tampering and you pay for that</font>

102
00:04:47,620 --> 00:04:54,009
<font color="#CCCCCC">I think it's</font><font color="#E5E5E5"> three now but you know kind</font>

103
00:04:52,479 --> 00:04:56,560
of discerning when you're trying to look

104
00:04:54,009 --> 00:04:58,509
at them<font color="#E5E5E5"> our</font><font color="#CCCCCC"> alright and</font><font color="#E5E5E5"> then we have</font>

105
00:04:56,560 --> 00:05:00,310
<font color="#CCCCCC">well-known offensive frameworks i'm sure</font>

106
00:04:58,509 --> 00:05:03,550
you're familiar with<font color="#E5E5E5"> tourists boy</font><font color="#CCCCCC"> shang</font>

107
00:05:00,310 --> 00:05:06,880
<font color="#CCCCCC">PS attack and partial Empire I think</font>

108
00:05:03,550 --> 00:05:10,330
<font color="#CCCCCC">party</font><font color="#E5E5E5"> boy was absorbed by partial</font><font color="#CCCCCC"> Empire</font>

109
00:05:06,880 --> 00:05:12,340
<font color="#CCCCCC">a little bit the same tax on there</font><font color="#E5E5E5"> so</font>

110
00:05:10,330 --> 00:05:13,810
what these are used for because<font color="#E5E5E5"> our</font>

111
00:05:12,340 --> 00:05:17,590
<font color="#CCCCCC">shells</font><font color="#E5E5E5"> really good at automating tasks</font>

112
00:05:13,810 --> 00:05:19,240
of<font color="#CCCCCC"> its use</font><font color="#E5E5E5"> for post exploitation</font><font color="#CCCCCC"> so i</font>

113
00:05:17,590 --> 00:05:21,669
can do all<font color="#E5E5E5"> these fun little thing like</font>

114
00:05:19,240 --> 00:05:24,550
<font color="#E5E5E5">analysis</font><font color="#CCCCCC"> equation for</font><font color="#E5E5E5"> the investigation</font>

115
00:05:21,669 --> 00:05:27,099
by administering<font color="#E5E5E5"> meaning hat lateral</font>

116
00:05:24,550 --> 00:05:29,560
movement exfiltration<font color="#E5E5E5"> and they can</font>

117
00:05:27,099 --> 00:05:32,860
<font color="#CCCCCC">reflect it will go to</font><font color="#E5E5E5"> PE</font><font color="#CCCCCC"> and memory so</font>

118
00:05:29,560 --> 00:05:35,409
you can have<font color="#CCCCCC"> a PE advice and like within</font>

119
00:05:32,860 --> 00:05:36,940
the exploit and you can load that

120
00:05:35,409 --> 00:05:41,229
payload and<font color="#CCCCCC"> summer without even touching</font>

121
00:05:36,940 --> 00:05:44,710
the<font color="#CCCCCC"> filesystem and of course they</font><font color="#E5E5E5"> try to</font>

122
00:05:41,229 --> 00:05:48,969
improve themselves over time so<font color="#CCCCCC"> i have</font>

123
00:05:44,710 --> 00:05:51,520
this<font color="#E5E5E5"> lovely like you of what of.net</font>

124
00:05:48,970 --> 00:05:55,150
looks like<font color="#CCCCCC"> i'm going to</font><font color="#E5E5E5"> go over the feel</font>

125
00:05:51,520 --> 00:05:58,419
<font color="#E5E5E5">are the GS strong named assemblies and</font>

126
00:05:55,150 --> 00:06:02,310
<font color="#CCCCCC">jen assemblies</font><font color="#E5E5E5"> be compiling data</font><font color="#CCCCCC"> miner</font>

127
00:05:58,419 --> 00:06:02,310
<font color="#E5E5E5">and finally the intermediate language</font>

128
00:06:03,300 --> 00:06:06,379
<font color="#E5E5E5">I don't know if you want to see that</font>

129
00:06:04,229 --> 00:06:06,378
again

130
00:06:09,969 --> 00:06:15,219
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that common</font><font color="#E5E5E5"> language runtime</font>

131
00:06:13,089 --> 00:06:18,129
handlers this is basically what makes

132
00:06:15,219 --> 00:06:21,369
that cool is that it remains agnostic

133
00:06:18,129 --> 00:06:24,819
across<font color="#CCCCCC"> a</font><font color="#E5E5E5"> different architectures because</font>

134
00:06:21,369 --> 00:06:28,629
it uses<font color="#CCCCCC"> this IL code</font><font color="#E5E5E5"> that it manages to</font>

135
00:06:24,819 --> 00:06:30,759
do this<font color="#CCCCCC"> the</font><font color="#E5E5E5"> groundwork and as</font><font color="#CCCCCC"> I</font>

136
00:06:28,629 --> 00:06:34,749
explained before<font color="#E5E5E5"> in the diagram here</font>

137
00:06:30,759 --> 00:06:37,689
when<font color="#E5E5E5"> the code gets compiled it turns</font>

138
00:06:34,749 --> 00:06:40,389
into<font color="#E5E5E5"> I elbows which</font><font color="#CCCCCC"> we'll talk about</font><font color="#E5E5E5"> and</font>

139
00:06:37,689 --> 00:06:42,759
this all gets handled<font color="#E5E5E5"> where the gym</font>

140
00:06:40,389 --> 00:06:46,089
turns that into<font color="#CCCCCC"> native machine code</font>

141
00:06:42,759 --> 00:06:48,039
which is<font color="#E5E5E5"> CPU instructions</font><font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> see</font>

142
00:06:46,089 --> 00:06:49,929
this is actually from<font color="#CCCCCC"> powershell self-</font>

143
00:06:48,039 --> 00:06:52,058
<font color="#CCCCCC">decompile it</font><font color="#E5E5E5"> you can look at the script</font>

144
00:06:49,929 --> 00:06:53,948
block<font color="#CCCCCC"> treat this is what the</font><font color="#E5E5E5"> c-sharp</font>

145
00:06:52,059 --> 00:06:56,259
<font color="#E5E5E5">code looks like and this is what that</font>

146
00:06:53,949 --> 00:07:02,860
<font color="#E5E5E5">coupon</font><font color="#CCCCCC"> io coach</font><font color="#E5E5E5"> al Cowen's looks like</font>

147
00:06:56,259 --> 00:07:05,289
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so what does</font><font color="#CCCCCC"> Justin</font><font color="#E5E5E5"> pet</font>

148
00:07:02,860 --> 00:07:07,119
<font color="#E5E5E5">just-in-time compiler do so when it</font>

149
00:07:05,289 --> 00:07:10,299
actually<font color="#CCCCCC"> get some</font><font color="#E5E5E5"> function which we call</font>

150
00:07:07,119 --> 00:07:13,749
method and in future<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will go through</font>

151
00:07:10,299 --> 00:07:18,429
<font color="#E5E5E5">to look up the method</font><font color="#CCCCCC"> and the data table</font>

152
00:07:13,749 --> 00:07:20,860
<font color="#CCCCCC">great</font><font color="#E5E5E5"> memory block</font><font color="#CCCCCC"> convert</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> IL code</font>

153
00:07:18,429 --> 00:07:23,109
into normal CPU instructions<font color="#CCCCCC"> saving and</font>

154
00:07:20,860 --> 00:07:26,139
that memory blocks<font color="#E5E5E5"> update where that</font>

155
00:07:23,110 --> 00:07:29,349
memory block is in the method table and

156
00:07:26,139 --> 00:07:35,379
execute that code and return back to the

157
00:07:29,349 --> 00:07:37,869
compiler so when I say<font color="#E5E5E5"> looking up that</font>

158
00:07:35,379 --> 00:07:40,179
information<font color="#CCCCCC"> I mean these different table</font>

159
00:07:37,869 --> 00:07:44,199
<font color="#E5E5E5">so in the beginning of assembly file LOL</font>

160
00:07:40,179 --> 00:07:45,698
<font color="#CCCCCC">or a THC it'll</font><font color="#E5E5E5"> have this information so</font>

161
00:07:44,199 --> 00:07:48,819
the only ones we care about is module

162
00:07:45,699 --> 00:07:50,349
<font color="#CCCCCC">deaf</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> remember reps and</font><font color="#E5E5E5"> so keep in</font>

163
00:07:48,819 --> 00:07:52,569
mind that these have<font color="#E5E5E5"> liked the name</font>

164
00:07:50,349 --> 00:07:54,938
<font color="#E5E5E5">location</font><font color="#CCCCCC"> off that locations of the</font>

165
00:07:52,569 --> 00:08:00,489
<font color="#CCCCCC">Tobin's as I say on the side here</font><font color="#E5E5E5"> of</font>

166
00:07:54,939 --> 00:08:02,110
where everything is so<font color="#E5E5E5"> I</font><font color="#CCCCCC"> never just just</font>

167
00:08:00,489 --> 00:08:03,549
give you a<font color="#E5E5E5"> handsome</font><font color="#CCCCCC"> i'm getting together</font>

168
00:08:02,110 --> 00:08:05,199
<font color="#CCCCCC">to get a</font><font color="#E5E5E5"> slide later</font>

169
00:08:03,549 --> 00:08:08,198
so what you have to do<font color="#E5E5E5"> to</font><font color="#CCCCCC"> reverse these</font>

170
00:08:05,199 --> 00:08:12,759
<font color="#E5E5E5">tables baby like a linked list</font><font color="#CCCCCC"> so if you</font>

171
00:08:08,199 --> 00:08:16,239
can download the compiler of a<font color="#E5E5E5"> sort of</font>

172
00:08:12,759 --> 00:08:18,070
the<font color="#E5E5E5"> calls of</font><font color="#CCCCCC"> BB pdb files you can get</font>

173
00:08:16,239 --> 00:08:20,650
<font color="#E5E5E5">the</font><font color="#CCCCCC"> offset</font><font color="#E5E5E5"> to where the function</font><font color="#CCCCCC"> be</font>

174
00:08:18,070 --> 00:08:25,409
<font color="#E5E5E5">maybe</font><font color="#CCCCCC"> use and</font><font color="#E5E5E5"> start traversing the link</font>

175
00:08:20,650 --> 00:08:25,409
with<font color="#CCCCCC"> so just an example</font>

176
00:08:26,350 --> 00:08:29,680
<font color="#E5E5E5">alright so</font><font color="#CCCCCC"> Microsoft intermediate</font>

177
00:08:28,240 --> 00:08:31,780
language because the lab<font color="#E5E5E5"> explained</font>

178
00:08:29,680 --> 00:08:34,750
<font color="#E5E5E5">before the code that you saw the script</font>

179
00:08:31,780 --> 00:08:36,610
block<font color="#E5E5E5"> you can see that each is actually</font>

180
00:08:34,750 --> 00:08:39,640
a couple bites long for a knob or

181
00:08:36,610 --> 00:08:42,039
whatever and say you wanted to do a jump

182
00:08:39,640 --> 00:08:46,270
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> have the token which is a little</font>

183
00:08:42,039 --> 00:08:49,569
<font color="#CCCCCC">indian by order</font><font color="#E5E5E5"> address or identifiers</font>

184
00:08:46,270 --> 00:08:51,280
and then the jump<font color="#E5E5E5"> call</font><font color="#CCCCCC"> their so</font><font color="#E5E5E5"> this is</font>

185
00:08:49,570 --> 00:08:53,500
kind of important when you're creating

186
00:08:51,280 --> 00:08:55,689
your own<font color="#CCCCCC"> I elko</font><font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> hooking</font>

187
00:08:53,500 --> 00:08:58,060
<font color="#E5E5E5">itself like</font><font color="#CCCCCC"> friends and play</font><font color="#E5E5E5"> use that</font>

188
00:08:55,690 --> 00:09:01,690
jumps to do the trampoline<font color="#CCCCCC"> where the</font>

189
00:08:58,060 --> 00:09:02,829
hook<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and there's a lot of one of</font>

190
00:09:01,690 --> 00:09:05,650
the other things<font color="#E5E5E5"> is if you're trying to</font>

191
00:09:02,830 --> 00:09:08,050
do<font color="#CCCCCC"> some key code</font><font color="#E5E5E5"> in il the</font><font color="#CCCCCC"> Jets</font>

192
00:09:05,650 --> 00:09:10,240
<font color="#CCCCCC">optimizing the aisle instructions so say</font>

193
00:09:08,050 --> 00:09:13,089
if you want to do<font color="#E5E5E5"> an</font><font color="#CCCCCC"> OP</font><font color="#E5E5E5"> sweat and and</font>

194
00:09:10,240 --> 00:09:14,410
<font color="#CCCCCC">freaking IL code they're going to remove</font>

195
00:09:13,090 --> 00:09:18,310
all the knots because<font color="#CCCCCC"> of trying</font><font color="#E5E5E5"> to</font>

196
00:09:14,410 --> 00:09:22,600
optimize the<font color="#CCCCCC"> process</font><font color="#E5E5E5"> so for all you</font>

197
00:09:18,310 --> 00:09:25,239
offensive folks out there<font color="#E5E5E5"> all right and</font>

198
00:09:22,600 --> 00:09:27,010
<font color="#E5E5E5">another thing is when the arguments are</font>

199
00:09:25,240 --> 00:09:30,130
actually pushed on the stack

200
00:09:27,010 --> 00:09:31,630
<font color="#E5E5E5">it's a</font><font color="#CCCCCC"> tax lot</font><font color="#E5E5E5"> so you can see here in</font>

201
00:09:30,130 --> 00:09:33,220
the beginning of<font color="#E5E5E5"> the function we</font><font color="#CCCCCC"> use</font>

202
00:09:31,630 --> 00:09:35,890
<font color="#CCCCCC">disassemble it you can see that the</font>

203
00:09:33,220 --> 00:09:39,280
<font color="#E5E5E5">backpack</font><font color="#CCCCCC"> with eight little arguments and</font>

204
00:09:35,890 --> 00:09:41,050
and and local variables<font color="#E5E5E5"> will go</font><font color="#CCCCCC"> so this</font>

205
00:09:39,280 --> 00:09:43,510
<font color="#E5E5E5">is kind of important when you're trying</font>

206
00:09:41,050 --> 00:09:47,650
to make the prototype function for the

207
00:09:43,510 --> 00:09:52,480
<font color="#E5E5E5">hooks and also if you want to get the</font>

208
00:09:47,650 --> 00:09:54,430
actual location of where the<font color="#E5E5E5"> the code is</font>

209
00:09:52,480 --> 00:09:55,600
after giving you can call<font color="#CCCCCC"> the get</font>

210
00:09:54,430 --> 00:09:56,530
function<font color="#E5E5E5"> pointer and</font><font color="#CCCCCC"> I'll talk about</font>

211
00:09:55,600 --> 00:10:00,640
that later

212
00:09:56,530 --> 00:10:03,220
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> be compiling got</font><font color="#CCCCCC"> empires it's</font>

213
00:10:00,640 --> 00:10:05,020
<font color="#E5E5E5">not as crazy as it is like it is it</font>

214
00:10:03,220 --> 00:10:07,210
seems<font color="#E5E5E5"> a lot of tools out there already</font>

215
00:10:05,020 --> 00:10:07,660
that allow you to be<font color="#E5E5E5"> compiled mean to</font><font color="#CCCCCC"> do</font>

216
00:10:07,210 --> 00:10:10,030
<font color="#CCCCCC">that</font>

217
00:10:07,660 --> 00:10:13,120
<font color="#E5E5E5">spk already comes with the disassembly</font>

218
00:10:10,030 --> 00:10:17,589
<font color="#CCCCCC">THC and</font><font color="#E5E5E5"> you can just look at the code</font>

219
00:10:13,120 --> 00:10:20,110
<font color="#CCCCCC">they're not peak dns by il-5 some of</font>

220
00:10:17,590 --> 00:10:24,010
these are all open<font color="#E5E5E5"> for</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> dotnet</font>

221
00:10:20,110 --> 00:10:25,130
<font color="#CCCCCC">peak it's</font><font color="#E5E5E5"> it's more commercialized</font>

222
00:10:24,010 --> 00:10:27,230
version of it

223
00:10:25,130 --> 00:10:28,820
it's not a<font color="#E5E5E5"> handy of the other and this</font>

224
00:10:27,230 --> 00:10:30,890
is an example of what that<font color="#CCCCCC"> piece looks</font>

225
00:10:28,820 --> 00:10:33,140
like<font color="#CCCCCC"> i</font><font color="#E5E5E5"> actually use this one to go look</font>

226
00:10:30,890 --> 00:10:36,230
at<font color="#E5E5E5"> this system automation</font><font color="#CCCCCC"> via well which</font>

227
00:10:33,140 --> 00:10:37,760
is actually<font color="#E5E5E5"> better show up so</font><font color="#CCCCCC"> you can</font>

228
00:10:36,230 --> 00:10:42,770
just<font color="#E5E5E5"> rummage through there and find the</font>

229
00:10:37,760 --> 00:10:44,660
functions that you actually<font color="#E5E5E5"> look for</font><font color="#CCCCCC"> all</font>

230
00:10:42,770 --> 00:10:46,760
<font color="#CCCCCC">right</font><font color="#E5E5E5"> so another thing to keep in mind</font>

231
00:10:44,660 --> 00:10:48,620
is a strong name assembly so what does

232
00:10:46,760 --> 00:10:52,850
this mean it means that they<font color="#CCCCCC"> try to</font>

233
00:10:48,620 --> 00:10:57,290
<font color="#CCCCCC">pamper</font><font color="#E5E5E5"> proof of these</font><font color="#CCCCCC"> ppl are you know</font>

234
00:10:52,850 --> 00:10:59,720
<font color="#E5E5E5">globally access but they</font><font color="#CCCCCC"> i'll tell you</font>

235
00:10:57,290 --> 00:11:00,949
how to buy presents<font color="#CCCCCC"> a second so they</font>

236
00:10:59,720 --> 00:11:02,750
what they did is they<font color="#E5E5E5"> with the</font>

237
00:11:00,950 --> 00:11:04,490
<font color="#CCCCCC">publishers public and private</font><font color="#E5E5E5"> key pair</font>

238
00:11:02,750 --> 00:11:06,050
<font color="#E5E5E5">created this little hash called the</font>

239
00:11:04,490 --> 00:11:08,360
public<font color="#E5E5E5"> key token</font><font color="#CCCCCC"> within the top of</font>

240
00:11:06,050 --> 00:11:09,770
assembly right and then usually these

241
00:11:08,360 --> 00:11:11,300
<font color="#CCCCCC">get</font><font color="#E5E5E5"> placed into the global assembly</font>

242
00:11:09,770 --> 00:11:15,079
<font color="#CCCCCC">casually you can see the different</font>

243
00:11:11,300 --> 00:11:17,180
locations here<font color="#E5E5E5"> so with</font><font color="#CCCCCC"> week</font><font color="#E5E5E5"> assemblies</font>

244
00:11:15,080 --> 00:11:19,490
<font color="#CCCCCC">it'll</font><font color="#E5E5E5"> just look for the file name while</font>

245
00:11:17,180 --> 00:11:21,890
<font color="#CCCCCC">verbally caches sideways look for the</font>

246
00:11:19,490 --> 00:11:27,320
actual signature

247
00:11:21,890 --> 00:11:29,510
alright so back in<font color="#CCCCCC"> 2009 it was</font>

248
00:11:27,320 --> 00:11:32,180
discovered that you know the dotnet

249
00:11:29,510 --> 00:11:35,600
framework 3.5<font color="#CCCCCC"> attacked</font><font color="#E5E5E5"> one you can</font>

250
00:11:32,180 --> 00:11:38,660
actually<font color="#E5E5E5"> bypass</font><font color="#CCCCCC"> the strong name of the</font>

251
00:11:35,600 --> 00:11:40,640
strong name<font color="#CCCCCC"> painful i</font><font color="#E5E5E5"> can't i</font><font color="#CCCCCC"> can't</font>

252
00:11:38,660 --> 00:11:44,510
<font color="#CCCCCC">bring by just placing that into the</font>

253
00:11:40,640 --> 00:11:46,220
folder location<font color="#CCCCCC"> ICAC</font><font color="#E5E5E5"> right and it would</font>

254
00:11:44,510 --> 00:11:48,319
just<font color="#E5E5E5"> look for</font><font color="#CCCCCC"> the signature rather than</font>

255
00:11:46,220 --> 00:11:50,810
actually validating that it's<font color="#E5E5E5"> it's it's</font>

256
00:11:48,320 --> 00:11:53,360
the same<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the right one on top of that</font>

257
00:11:50,810 --> 00:11:56,630
you can<font color="#E5E5E5"> disable with the registry key</font>

258
00:11:53,360 --> 00:11:58,910
here if you want to check for strong

259
00:11:56,630 --> 00:12:00,439
names across all of them<font color="#CCCCCC"> or if you want</font>

260
00:11:58,910 --> 00:12:01,969
to do specifically for one application

261
00:12:00,440 --> 00:12:03,860
while<font color="#E5E5E5"> you're building in like visual</font>

262
00:12:01,970 --> 00:12:08,330
studio<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just put that into the</font>

263
00:12:03,860 --> 00:12:11,180
configuration<font color="#CCCCCC"> files which</font><font color="#E5E5E5"> is right</font><font color="#CCCCCC"> if</font>

264
00:12:08,330 --> 00:12:13,520
<font color="#CCCCCC">you're doing that stuff but alright</font>

265
00:12:11,180 --> 00:12:15,439
<font color="#CCCCCC">engine assembly so and Jenn assemblies</font>

266
00:12:13,520 --> 00:12:20,420
it<font color="#E5E5E5"> it means</font><font color="#CCCCCC"> that it uses this is really</font>

267
00:12:15,440 --> 00:12:22,910
<font color="#E5E5E5">to convert to pre gifts</font><font color="#CCCCCC"> IL code into</font>

268
00:12:20,420 --> 00:12:25,729
native CPU instructions<font color="#CCCCCC"> so why do they</font>

269
00:12:22,910 --> 00:12:28,339
do that they thought that just compiler

270
00:12:25,730 --> 00:12:29,990
was too slow<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we have to compile</font>

271
00:12:28,340 --> 00:12:31,700
the first time it runs<font color="#E5E5E5"> so it</font>

272
00:12:29,990 --> 00:12:32,819
automatically<font color="#CCCCCC"> create these naked image</font>

273
00:12:31,700 --> 00:12:36,359
<font color="#E5E5E5">images in the</font>

274
00:12:32,819 --> 00:12:39,929
<font color="#E5E5E5">like location and it will first look for</font>

275
00:12:36,359 --> 00:12:42,869
this<font color="#CCCCCC"> BL before it looks for this feel oh</font>

276
00:12:39,929 --> 00:12:47,069
<font color="#E5E5E5">so you can identify the native image by</font>

277
00:12:42,869 --> 00:12:49,769
the<font color="#CCCCCC"> NI at</font><font color="#E5E5E5"> the end of the yellow all</font>

278
00:12:47,069 --> 00:12:52,289
right now<font color="#CCCCCC"> it's powershell okay so we</font>

279
00:12:49,769 --> 00:12:53,999
<font color="#CCCCCC">know that we talked about got messed up</font>

280
00:12:52,289 --> 00:12:55,859
so that's important because we're going

281
00:12:53,999 --> 00:13:00,869
to look at everything underneath<font color="#CCCCCC"> the</font>

282
00:12:55,859 --> 00:13:03,029
<font color="#E5E5E5">management</font><font color="#CCCCCC"> of DOL</font><font color="#E5E5E5"> and monitor that</font><font color="#CCCCCC"> ok so</font>

283
00:13:00,869 --> 00:13:07,259
we know<font color="#CCCCCC"> that the flowers in the global</font>

284
00:13:03,029 --> 00:13:09,329
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> as i said before we know that</font>

285
00:13:07,259 --> 00:13:11,160
power<font color="#CCCCCC"> shokan</font><font color="#E5E5E5"> reflectively load assembly</font>

286
00:13:09,329 --> 00:13:14,549
so of course we want to monitor this

287
00:13:11,160 --> 00:13:16,919
<font color="#E5E5E5">percolo can run on</font><font color="#CCCCCC"> pines grip school</font>

288
00:13:14,549 --> 00:13:18,749
<font color="#CCCCCC">that means they can run locally so we</font>

289
00:13:16,919 --> 00:13:22,228
can have something locally monitoring

290
00:13:18,749 --> 00:13:24,569
<font color="#E5E5E5">something and then</font><font color="#CCCCCC"> i was reading scripts</font>

291
00:13:22,229 --> 00:13:27,419
<font color="#E5E5E5">are interpreted by basically</font><font color="#CCCCCC"> for string</font>

292
00:13:24,569 --> 00:13:30,089
<font color="#E5E5E5">so</font><font color="#CCCCCC"> by that account we need to monitor</font>

293
00:13:27,419 --> 00:13:34,049
when the string gets<font color="#E5E5E5"> part</font>

294
00:13:30,089 --> 00:13:36,269
<font color="#E5E5E5">alright so as</font><font color="#CCCCCC"> I explained before i kind</font>

295
00:13:34,049 --> 00:13:38,249
of<font color="#E5E5E5"> consider</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> functions that holds</font>

296
00:13:36,269 --> 00:13:40,619
<font color="#E5E5E5">the strings that are part into the</font>

297
00:13:38,249 --> 00:13:44,279
actual code<font color="#CCCCCC"> the script block is actually</font>

298
00:13:40,619 --> 00:13:46,559
where the string<font color="#E5E5E5"> get</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> but it's</font>

299
00:13:44,279 --> 00:13:48,989
important to note that this clock

300
00:13:46,559 --> 00:13:50,909
changes from version to version<font color="#CCCCCC"> so i</font>

301
00:13:48,989 --> 00:13:54,119
have this<font color="#E5E5E5"> nice little reference for</font>

302
00:13:50,909 --> 00:13:56,399
reference table<font color="#CCCCCC"> we don't know you know</font>

303
00:13:54,119 --> 00:13:58,289
<font color="#E5E5E5">what version of</font><font color="#CCCCCC"> power</font><font color="#E5E5E5"> shows what version</font>

304
00:13:56,399 --> 00:14:03,749
of that<font color="#CCCCCC"> met you know how to create your</font>

305
00:13:58,289 --> 00:14:04,409
payload<font color="#CCCCCC"> alright here's another</font><font color="#E5E5E5"> pickup</font>

306
00:14:03,749 --> 00:14:07,289
<font color="#CCCCCC">line</font>

307
00:14:04,409 --> 00:14:09,269
<font color="#CCCCCC">ok girls</font><font color="#E5E5E5"> do you like</font><font color="#CCCCCC"> powershell i can</font>

308
00:14:07,289 --> 00:14:11,779
tell you do by the invoke expression<font color="#CCCCCC"> i</font>

309
00:14:09,269 --> 00:14:11,779
gave you

310
00:14:13,200 --> 00:14:16,500
<font color="#CCCCCC">Cyril invoke</font><font color="#E5E5E5"> expression so there's</font>

311
00:14:15,090 --> 00:14:20,010
actually very popular and a lot of

312
00:14:16,500 --> 00:14:23,550
<font color="#CCCCCC">offense</font><font color="#E5E5E5"> of framework</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> is basically</font>

313
00:14:20,010 --> 00:14:27,120
doing is you can invoke<font color="#CCCCCC"> man</font><font color="#E5E5E5"> through the</font>

314
00:14:23,550 --> 00:14:32,400
<font color="#CCCCCC">run spaces</font><font color="#E5E5E5"> library in a regular</font><font color="#CCCCCC"> csharp</font>

315
00:14:27,120 --> 00:14:35,580
<font color="#E5E5E5">executable by actually using the global</font>

316
00:14:32,400 --> 00:14:37,230
<font color="#E5E5E5">recast assembly and just play using the</font>

317
00:14:35,580 --> 00:14:40,620
<font color="#CCCCCC">powershell BL for some management</font>

318
00:14:37,230 --> 00:14:42,720
automation and then you can run that HP

319
00:14:40,620 --> 00:14:46,950
just to run<font color="#CCCCCC"> scripts like from the normal</font>

320
00:14:42,720 --> 00:14:49,800
input<font color="#E5E5E5"> so how are we gonna monitor</font>

321
00:14:46,950 --> 00:14:52,650
<font color="#CCCCCC">powershell</font><font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> powershell buddy</font>

322
00:14:49,800 --> 00:14:55,589
<font color="#CCCCCC">exceed of the need we need to run some</font>

323
00:14:52,650 --> 00:14:57,630
<font color="#E5E5E5">malicious</font><font color="#CCCCCC"> powershell scripts</font><font color="#E5E5E5"> so that's</font>

324
00:14:55,590 --> 00:15:01,320
what i mean by in both expression and

325
00:14:57,630 --> 00:15:07,500
invoked man<font color="#E5E5E5"> you can do this without a</font>

326
00:15:01,320 --> 00:15:11,550
<font color="#CCCCCC">powershell bhc so another crazy things</font>

327
00:15:07,500 --> 00:15:13,710
it can do is invoke<font color="#E5E5E5"> what they can get</font>

328
00:15:11,550 --> 00:15:17,250
<font color="#E5E5E5">windows</font><font color="#CCCCCC"> api</font><font color="#E5E5E5"> so you can see here it's</font>

329
00:15:13,710 --> 00:15:20,190
calling the system<font color="#CCCCCC"> dll</font><font color="#E5E5E5"> and it's getting</font>

330
00:15:17,250 --> 00:15:22,230
to get module handle and get module<font color="#CCCCCC"> or</font>

331
00:15:20,190 --> 00:15:24,540
<font color="#CCCCCC">get rock</font><font color="#E5E5E5"> address so we can get the</font>

332
00:15:22,230 --> 00:15:26,490
function right to virtual address memory

333
00:15:24,540 --> 00:15:29,579
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is actually taken from the</font>

334
00:15:26,490 --> 00:15:31,680
<font color="#CCCCCC">powerpoint framework invoke</font><font color="#E5E5E5"> shellcode</font><font color="#CCCCCC"> so</font>

335
00:15:29,580 --> 00:15:34,230
<font color="#CCCCCC">what</font><font color="#E5E5E5"> is basically doing is it getting</font>

336
00:15:31,680 --> 00:15:36,900
that right to virtual memory address so

337
00:15:34,230 --> 00:15:41,670
you can write<font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> to the processes</font>

338
00:15:36,900 --> 00:15:43,740
<font color="#E5E5E5">memory after</font><font color="#CCCCCC"> gets a handle</font><font color="#E5E5E5"> of course so</font>

339
00:15:41,670 --> 00:15:45,329
that<font color="#E5E5E5"> brings me to the</font><font color="#CCCCCC"> end time our</font>

340
00:15:43,740 --> 00:15:47,220
interface by<font color="#CCCCCC"> Microsoft</font>

341
00:15:45,330 --> 00:15:51,960
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> you can see it already did</font><font color="#CCCCCC"> it's thing</font>

342
00:15:47,220 --> 00:15:55,530
<font color="#CCCCCC">there it was</font><font color="#E5E5E5"> running through</font><font color="#CCCCCC"> partial 512</font>

343
00:15:51,960 --> 00:15:57,360
<font color="#E5E5E5">spend in 2015 and so the whole point was</font>

344
00:15:55,530 --> 00:16:00,030
to allow one<font color="#CCCCCC"> of the fender and</font>

345
00:15:57,360 --> 00:16:05,550
<font color="#E5E5E5">third-party applications like</font><font color="#CCCCCC"> a BG</font><font color="#E5E5E5"> to</font>

346
00:16:00,030 --> 00:16:08,250
scan the script block<font color="#E5E5E5"> when the codes get</font>

347
00:16:05,550 --> 00:16:11,490
invoke that what it does is it performs

348
00:16:08,250 --> 00:16:14,070
<font color="#CCCCCC">a</font><font color="#E5E5E5"> security check</font><font color="#CCCCCC"> those AMS idea LOL can</font>

349
00:16:11,490 --> 00:16:14,970
interface through<font color="#CCCCCC"> com</font><font color="#E5E5E5"> interface and RPC</font>

350
00:16:14,070 --> 00:16:18,180
<font color="#CCCCCC">its end</font>

351
00:16:14,970 --> 00:16:22,439
<font color="#CCCCCC">one of the</font><font color="#E5E5E5"> defender to get scans</font>

352
00:16:18,180 --> 00:16:25,050
so<font color="#CCCCCC"> what does</font><font color="#E5E5E5"> provides is memorystream</font>

353
00:16:22,439 --> 00:16:27,540
<font color="#CCCCCC">scant memory</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> stream scanning it</font>

354
00:16:25,050 --> 00:16:29,250
looks at the code before<font color="#CCCCCC"> i get compiled</font>

355
00:16:27,540 --> 00:16:32,250
right so<font color="#E5E5E5"> this is already be obligated</font>

356
00:16:29,250 --> 00:16:34,290
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> when you want to detect a</font>

357
00:16:32,250 --> 00:16:36,600
t-shirt like this<font color="#CCCCCC"> sharp</font><font color="#E5E5E5"> easier to</font>

358
00:16:34,290 --> 00:16:38,639
<font color="#CCCCCC">powershell</font><font color="#E5E5E5"> you can because</font><font color="#CCCCCC"> if it's</font>

359
00:16:36,600 --> 00:16:43,560
already built into the system management

360
00:16:38,639 --> 00:16:45,779
<font color="#E5E5E5">automation</font><font color="#CCCCCC"> yellow alright another</font><font color="#E5E5E5"> cool</font>

361
00:16:43,560 --> 00:16:48,029
feature so if you use that decompiler<font color="#CCCCCC"> I</font>

362
00:16:45,779 --> 00:16:50,339
told you<font color="#E5E5E5"> about you can go decompile</font>

363
00:16:48,029 --> 00:16:53,009
<font color="#CCCCCC">manage the</font><font color="#E5E5E5"> system management yellow and</font>

364
00:16:50,339 --> 00:16:56,879
<font color="#CCCCCC">Microsoft already has these suspicious</font>

365
00:16:53,009 --> 00:16:59,519
methods in the code itself<font color="#E5E5E5"> so</font><font color="#CCCCCC"> okay so</font>

366
00:16:56,879 --> 00:17:02,279
<font color="#E5E5E5">they're using these as suspicious</font>

367
00:16:59,519 --> 00:17:05,939
<font color="#E5E5E5">methods right so how do I look at those</font>

368
00:17:02,279 --> 00:17:09,299
<font color="#E5E5E5">two without using a mammoth I why</font>

369
00:17:05,939 --> 00:17:11,549
because<font color="#CCCCCC"> the msi can be bypassed it was</font>

370
00:17:09,299 --> 00:17:14,730
already<font color="#E5E5E5"> shown like</font><font color="#CCCCCC"> any shang</font><font color="#E5E5E5"> there's an</font>

371
00:17:11,549 --> 00:17:17,069
<font color="#CCCCCC">ammonite bypass</font><font color="#E5E5E5"> but if you use if you</font>

372
00:17:14,730 --> 00:17:19,140
<font color="#CCCCCC">change you know use a string obligation</font>

373
00:17:17,069 --> 00:17:23,970
for specific variable<font color="#E5E5E5"> name</font><font color="#CCCCCC"> you can</font>

374
00:17:19,140 --> 00:17:26,309
bypass windows defender<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and you</font>

375
00:17:23,970 --> 00:17:29,039
can also disable<font color="#CCCCCC"> am aside two different</font>

376
00:17:26,309 --> 00:17:30,270
ways you can use the PowerShell command

377
00:17:29,039 --> 00:17:33,270
<font color="#CCCCCC">MP preference</font>

378
00:17:30,270 --> 00:17:35,309
<font color="#CCCCCC">he's here for reference and then you can</font>

379
00:17:33,270 --> 00:17:37,440
do you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> world hijacking with</font>

380
00:17:35,309 --> 00:17:40,379
<font color="#CCCCCC">soundbite</font><font color="#E5E5E5"> other security researcher</font><font color="#CCCCCC"> all</font>

381
00:17:37,440 --> 00:17:43,110
you do<font color="#E5E5E5"> is you create</font><font color="#CCCCCC"> it can if</font><font color="#E5E5E5"> you know</font>

382
00:17:40,380 --> 00:17:44,909
the concept of<font color="#E5E5E5"> yellow</font><font color="#CCCCCC"> magic</font><font color="#E5E5E5"> hijacking it</font>

383
00:17:43,110 --> 00:17:47,850
will look for the<font color="#E5E5E5"> assembly in the same</font>

384
00:17:44,909 --> 00:17:50,640
folder that is being executed<font color="#CCCCCC"> so in the</font>

385
00:17:47,850 --> 00:17:52,350
<font color="#E5E5E5">page</font><font color="#CCCCCC"> is loading</font><font color="#E5E5E5"> and say yeah well but</font>

386
00:17:50,640 --> 00:17:54,870
it's a dummy<font color="#E5E5E5"> one you</font><font color="#CCCCCC"> can see down</font><font color="#E5E5E5"> here</font>

387
00:17:52,350 --> 00:17:56,760
<font color="#E5E5E5">and you can see in the back there</font>

388
00:17:54,870 --> 00:17:59,699
<font color="#E5E5E5">it's just</font><font color="#CCCCCC"> got a fake message box thing</font>

389
00:17:56,760 --> 00:18:01,559
that it was loaded<font color="#CCCCCC"> so when it</font><font color="#E5E5E5"> fails over</font>

390
00:17:59,700 --> 00:18:02,490
it is our most famous<font color="#CCCCCC"> ideal</font><font color="#E5E5E5"> else</font>

391
00:18:01,559 --> 00:18:07,168
altogether

392
00:18:02,490 --> 00:18:10,830
<font color="#CCCCCC">alright I'm</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> one tricky</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> proposal</font>

393
00:18:07,169 --> 00:18:13,470
<font color="#CCCCCC">format paper so what</font><font color="#E5E5E5"> it is is you can</font>

394
00:18:10,830 --> 00:18:16,379
rip<font color="#CCCCCC"> go</font><font color="#E5E5E5"> using reflection you can go and</font>

395
00:18:13,470 --> 00:18:18,600
change the values of things that have

396
00:18:16,380 --> 00:18:20,730
already been triggered

397
00:18:18,600 --> 00:18:21,909
so in<font color="#CCCCCC"> this case when a Maasai loads and</font>

398
00:18:20,730 --> 00:18:24,280
<font color="#CCCCCC">the actual code for me</font>

399
00:18:21,910 --> 00:18:27,010
<font color="#CCCCCC">yes I pulled it</font><font color="#E5E5E5"> out for you guys</font><font color="#CCCCCC"> so when</font>

400
00:18:24,280 --> 00:18:28,300
it initializes<font color="#CCCCCC"> it</font><font color="#E5E5E5"> checks to see if</font><font color="#CCCCCC"> it</font>

401
00:18:27,010 --> 00:18:31,720
fails right here

402
00:18:28,300 --> 00:18:35,020
so what he's doing is he's changing that

403
00:18:31,720 --> 00:18:38,170
value to true<font color="#E5E5E5"> so that it won't even load</font>

404
00:18:35,020 --> 00:18:42,790
<font color="#E5E5E5">so you can do that</font><font color="#CCCCCC"> and real-time</font><font color="#E5E5E5"> and</font>

405
00:18:38,170 --> 00:18:46,510
unload<font color="#CCCCCC"> amazon</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> apparently</font><font color="#E5E5E5"> to all the</font>

406
00:18:42,790 --> 00:18:48,580
different methods<font color="#E5E5E5"> make sure I'm on time</font>

407
00:18:46,510 --> 00:18:50,770
<font color="#E5E5E5">so</font><font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to talk about how</font><font color="#CCCCCC"> I didn't</font>

408
00:18:48,580 --> 00:18:53,860
see sharp injections to the<font color="#CCCCCC"> high-low</font>

409
00:18:50,770 --> 00:18:55,720
<font color="#CCCCCC">review i'm planning to release of paper</font>

410
00:18:53,860 --> 00:18:57,520
<font color="#CCCCCC">a research paper with this so it'll have</font>

411
00:18:55,720 --> 00:19:00,670
more details<font color="#E5E5E5"> but</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> just want to go over</font>

412
00:18:57,520 --> 00:19:03,550
it<font color="#CCCCCC"> again no and then got it repeats with</font>

413
00:19:00,670 --> 00:19:05,620
a binary modification<font color="#CCCCCC"> feel</font><font color="#E5E5E5"> are profiling</font>

414
00:19:03,550 --> 00:19:08,169
<font color="#CCCCCC">the JIT compiler hooking and sea-based</font>

415
00:19:05,620 --> 00:19:09,669
<font color="#CCCCCC">method</font><font color="#E5E5E5"> so now you know a little bit</font>

416
00:19:08,170 --> 00:19:13,450
about that<font color="#E5E5E5"> met</font>

417
00:19:09,670 --> 00:19:16,570
<font color="#E5E5E5">I'm sorry but</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> you do now</font>

418
00:19:13,450 --> 00:19:19,720
sorry<font color="#CCCCCC"> I'm only I've only</font><font color="#E5E5E5"> been working</font>

419
00:19:16,570 --> 00:19:25,270
with.net<font color="#E5E5E5"> since</font><font color="#CCCCCC"> november</font><font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> off</font>

420
00:19:19,720 --> 00:19:29,800
like a whirlwind of crazy shit for me so

421
00:19:25,270 --> 00:19:31,810
<font color="#CCCCCC">I think I went</font><font color="#E5E5E5"> too far</font><font color="#CCCCCC"> has their</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what</font>

422
00:19:29,800 --> 00:19:33,550
<font color="#CCCCCC">have</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> got the</font><font color="#E5E5E5"> Sharpie all different</font>

423
00:19:31,810 --> 00:19:36,100
keep in<font color="#E5E5E5"> mind that</font><font color="#CCCCCC"> csharp</font><font color="#E5E5E5"> does not have a</font>

424
00:19:33,550 --> 00:19:37,840
<font color="#CCCCCC">dl main when you try to do it</font>

425
00:19:36,100 --> 00:19:40,959
inject your dl<font color="#CCCCCC"> you're going to have to</font>

426
00:19:37,840 --> 00:19:43,840
make that<font color="#CCCCCC"> yellow</font><font color="#E5E5E5"> name so by using a seer</font>

427
00:19:40,960 --> 00:19:45,910
a<font color="#CCCCCC"> purdy low remember it's a managed</font><font color="#E5E5E5"> code</font>

428
00:19:43,840 --> 00:19:48,820
<font color="#CCCCCC">so you'll have to manage the versions</font>

429
00:19:45,910 --> 00:19:51,040
which I you know<font color="#E5E5E5"> hinted before and</font><font color="#CCCCCC"> from</font>

430
00:19:48,820 --> 00:19:54,189
<font color="#E5E5E5">there you</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> stick that sucker</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> a</font>

431
00:19:51,040 --> 00:19:56,800
byte array and in your resources and you

432
00:19:54,190 --> 00:19:59,620
can know that when you<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> so by</font>

433
00:19:56,800 --> 00:20:02,290
using<font color="#CCCCCC"> a</font><font color="#E5E5E5"> do injector or you know</font><font color="#CCCCCC"> a filter</font>

434
00:19:59,620 --> 00:20:05,889
driver which is coming for maybe you can

435
00:20:02,290 --> 00:20:08,290
inject that that<font color="#E5E5E5"> rap</font><font color="#CCCCCC"> video into</font><font color="#E5E5E5"> the</font>

436
00:20:05,890 --> 00:20:10,150
target<font color="#E5E5E5"> host and then figure out what</font>

437
00:20:08,290 --> 00:20:13,810
version of<font color="#CCCCCC"> feel are that they're using</font>

438
00:20:10,150 --> 00:20:15,820
and so<font color="#CCCCCC"> that your kind of</font><font color="#E5E5E5"> like the code</font>

439
00:20:13,810 --> 00:20:18,730
that I used to actually attach<font color="#E5E5E5"> to the</font>

440
00:20:15,820 --> 00:20:21,490
processes<font color="#CCCCCC"> clr want to figure</font><font color="#E5E5E5"> out the</font>

441
00:20:18,730 --> 00:20:24,910
version<font color="#CCCCCC"> i can use my co-create instance</font>

442
00:20:21,490 --> 00:20:27,070
and access the<font color="#CCCCCC"> host processes Pilar and</font>

443
00:20:24,910 --> 00:20:29,980
<font color="#E5E5E5">then</font><font color="#CCCCCC"> i can grab the app domain because</font>

444
00:20:27,070 --> 00:20:31,409
in order for my<font color="#CCCCCC"> be sharp biner</font><font color="#E5E5E5"> mighty</font>

445
00:20:29,980 --> 00:20:35,220
sharp<font color="#CCCCCC"> vl2.exe</font>

446
00:20:31,410 --> 00:20:37,470
run<font color="#E5E5E5"> it has to be an after</font><font color="#CCCCCC"> main</font><font color="#E5E5E5"> of this</font>

447
00:20:35,220 --> 00:20:40,800
post process<font color="#CCCCCC"> so that's basically</font><font color="#E5E5E5"> what</font>

448
00:20:37,470 --> 00:20:42,300
this section of code is<font color="#CCCCCC"> its</font><font color="#E5E5E5"> grabbing the</font>

449
00:20:40,800 --> 00:20:47,700
<font color="#CCCCCC">apps domain</font><font color="#E5E5E5"> and once</font><font color="#CCCCCC"> i get the abdomen i</font>

450
00:20:42,300 --> 00:20:51,000
can add myself to that upcoming<font color="#CCCCCC"> alright</font>

451
00:20:47,700 --> 00:20:53,280
so<font color="#E5E5E5"> that been clean two different topics</font>

452
00:20:51,000 --> 00:20:55,110
that rootkit binary<font color="#CCCCCC"> modification</font><font color="#E5E5E5"> so this</font>

453
00:20:53,280 --> 00:20:57,180
was actually a<font color="#CCCCCC"> few thousand nine black</font>

454
00:20:55,110 --> 00:21:00,540
<font color="#CCCCCC">hat talk okay</font>

455
00:20:57,180 --> 00:21:03,930
like a<font color="#E5E5E5"> top-four from</font><font color="#CCCCCC"> Mathura so what he</font>

456
00:21:00,540 --> 00:21:07,560
did was he disassembled by the<font color="#CCCCCC"> aisle</font>

457
00:21:03,930 --> 00:21:09,270
<font color="#E5E5E5">insert their own function into the IL</font>

458
00:21:07,560 --> 00:21:12,300
<font color="#CCCCCC">you</font><font color="#E5E5E5"> know writing the code</font><font color="#CCCCCC"> felt</font>

459
00:21:09,270 --> 00:21:14,850
<font color="#E5E5E5">reassemble it and place it</font><font color="#CCCCCC"> overriding</font>

460
00:21:12,300 --> 00:21:16,350
<font color="#E5E5E5">the original yellow</font><font color="#CCCCCC"> so if we were to</font><font color="#E5E5E5"> do</font>

461
00:21:14,850 --> 00:21:18,990
the same thing<font color="#CCCCCC"> i would override</font><font color="#E5E5E5"> the</font>

462
00:21:16,350 --> 00:21:21,149
system<font color="#E5E5E5"> management</font><font color="#CCCCCC"> vlo with my hooks code</font>

463
00:21:18,990 --> 00:21:26,190
that would<font color="#CCCCCC"> road my</font><font color="#E5E5E5"> own special like</font>

464
00:21:21,150 --> 00:21:28,140
monitoring<font color="#CCCCCC"> dll</font><font color="#E5E5E5"> so as I explained before</font>

465
00:21:26,190 --> 00:21:30,480
<font color="#E5E5E5">so there's a couple things</font><font color="#CCCCCC"> but problems</font>

466
00:21:28,140 --> 00:21:35,460
if you need to make sure that it doesn't

467
00:21:30,480 --> 00:21:37,920
validate the signature<font color="#E5E5E5"> because and also</font>

468
00:21:35,460 --> 00:21:39,540
the the hash changes<font color="#CCCCCC"> so if you have any</font>

469
00:21:37,920 --> 00:21:42,180
type of<font color="#CCCCCC"> white listing or</font><font color="#E5E5E5"> certain</font>

470
00:21:39,540 --> 00:21:44,520
<font color="#CCCCCC">American</font><font color="#E5E5E5"> verifications</font><font color="#CCCCCC"> and you have your</font>

471
00:21:42,180 --> 00:21:45,450
good<font color="#E5E5E5"> like monitoring the</font><font color="#CCCCCC"> LOL there it's</font>

472
00:21:44,520 --> 00:21:47,070
not<font color="#CCCCCC"> gonna pass</font>

473
00:21:45,450 --> 00:21:50,490
we're<font color="#CCCCCC"> gonna have</font><font color="#E5E5E5"> to make some type of</font>

474
00:21:47,070 --> 00:21:54,780
like<font color="#E5E5E5"> nice environment for it do that</font>

475
00:21:50,490 --> 00:21:56,610
without having the attacker<font color="#CCCCCC"> no but</font>

476
00:21:54,780 --> 00:21:58,860
you're also putting something<font color="#CCCCCC"> use</font><font color="#E5E5E5"> the</font>

477
00:21:56,610 --> 00:22:00,629
environment so that's another thing<font color="#CCCCCC"> you</font>

478
00:21:58,860 --> 00:22:03,689
change that<font color="#CCCCCC"> LOL</font><font color="#E5E5E5"> that means the attacker</font>

479
00:22:00,630 --> 00:22:07,920
can get that do<font color="#E5E5E5"> and and and reverse it</font>

480
00:22:03,690 --> 00:22:10,920
if they have it<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so how does</font>

481
00:22:07,920 --> 00:22:13,650
how does<font color="#CCCCCC"> this</font><font color="#E5E5E5"> how to mod</font><font color="#CCCCCC"> Guarnere</font>

482
00:22:10,920 --> 00:22:16,710
modification work so there's also a lot

483
00:22:13,650 --> 00:22:18,330
of<font color="#E5E5E5"> open source tools out there to avoid</font>

484
00:22:16,710 --> 00:22:21,090
<font color="#E5E5E5">this human error because you want to</font>

485
00:22:18,330 --> 00:22:23,460
mess up how your stuff<font color="#E5E5E5"> gets on the stack</font>

486
00:22:21,090 --> 00:22:25,649
how you're hooked work and what you

487
00:22:23,460 --> 00:22:29,220
start loading into into memory and all

488
00:22:25,650 --> 00:22:31,110
that<font color="#E5E5E5"> so the that met roi yot netbook</font>

489
00:22:29,220 --> 00:22:32,169
<font color="#E5E5E5">library model</font><font color="#CCCCCC"> C so</font><font color="#E5E5E5"> which is more the</font>

490
00:22:31,110 --> 00:22:34,840
common one that<font color="#E5E5E5"> is</font>

491
00:22:32,169 --> 00:22:36,369
<font color="#CCCCCC">seen</font><font color="#E5E5E5"> and I've actually used it myself</font>

492
00:22:34,840 --> 00:22:38,590
you can statically or dynamically

493
00:22:36,369 --> 00:22:40,629
<font color="#E5E5E5">modified</font><font color="#CCCCCC"> iíll</font><font color="#E5E5E5"> culinary</font><font color="#CCCCCC"> compile</font>

494
00:22:38,590 --> 00:22:43,928
everything and push it to the target

495
00:22:40,629 --> 00:22:45,399
process<font color="#E5E5E5"> so this is all with crap</font><font color="#CCCCCC"> that</font>

496
00:22:43,929 --> 00:22:47,799
<font color="#E5E5E5">you'll have to go through in order to</font>

497
00:22:45,399 --> 00:22:51,100
figure out how to get your assembly into

498
00:22:47,799 --> 00:22:53,519
the same working memory of the political

499
00:22:51,100 --> 00:22:53,519
process

500
00:22:53,529 --> 00:23:02,049
alright so let's<font color="#E5E5E5"> really there's this</font>

501
00:22:58,600 --> 00:23:05,289
cool<font color="#CCCCCC"> API</font><font color="#E5E5E5"> that Microsoft gave dotnet</font><font color="#CCCCCC"> it's</font>

502
00:23:02,049 --> 00:23:08,830
called the<font color="#CCCCCC"> clr performance monitoring</font>

503
00:23:05,289 --> 00:23:11,470
<font color="#CCCCCC">API it's basically a way where you can</font>

504
00:23:08,830 --> 00:23:15,189
create<font color="#CCCCCC"> register young ER feel our</font>

505
00:23:11,470 --> 00:23:17,590
<font color="#E5E5E5">profiler to access when a module is</font>

506
00:23:15,190 --> 00:23:20,950
loaded and unloaded<font color="#E5E5E5"> so</font><font color="#CCCCCC"> give you</font><font color="#E5E5E5"> like</font>

507
00:23:17,590 --> 00:23:23,649
this<font color="#E5E5E5"> functions</font><font color="#CCCCCC"> that you can add code in</font>

508
00:23:20,950 --> 00:23:26,080
there to access<font color="#E5E5E5"> like saying system</font>

509
00:23:23,649 --> 00:23:28,840
automation<font color="#CCCCCC"> below</font><font color="#E5E5E5"> got loaded you can say</font>

510
00:23:26,080 --> 00:23:32,408
<font color="#CCCCCC">okay give me the handle to that</font><font color="#E5E5E5"> yellow</font>

511
00:23:28,840 --> 00:23:34,480
<font color="#CCCCCC">so i can inject my appt</font><font color="#E5E5E5"> domain</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> get</font>

512
00:23:32,409 --> 00:23:36,999
injections<font color="#CCCCCC"> appdomain of that target</font>

513
00:23:34,480 --> 00:23:39,820
process when it loaded<font color="#CCCCCC"> so it's kind of a</font>

514
00:23:36,999 --> 00:23:45,639
weird way because you have to register

515
00:23:39,820 --> 00:23:48,399
your<font color="#CCCCCC"> dilo normally like in the assembly</font>

516
00:23:45,639 --> 00:23:51,039
<font color="#E5E5E5">so up</font><font color="#CCCCCC"> you already have one artifact and</font>

517
00:23:48,399 --> 00:23:52,779
assembly<font color="#E5E5E5"> and you have to turn on the</font>

518
00:23:51,039 --> 00:23:56,408
environment with environment variable

519
00:23:52,779 --> 00:23:58,869
<font color="#CCCCCC">those people are profiler</font><font color="#E5E5E5"> equals</font><font color="#CCCCCC"> one so</font>

520
00:23:56,409 --> 00:24:00,129
<font color="#E5E5E5">its attacker knew that it was one</font><font color="#CCCCCC"> and</font>

521
00:23:58,869 --> 00:24:02,109
<font color="#E5E5E5">that means</font><font color="#CCCCCC"> i'm being monitored from</font>

522
00:24:00,129 --> 00:24:04,418
<font color="#E5E5E5">house</font>

523
00:24:02,109 --> 00:24:08,408
<font color="#CCCCCC">alright and</font><font color="#E5E5E5"> then you do the same thing</font>

524
00:24:04,419 --> 00:24:10,989
where you<font color="#E5E5E5"> you use your</font><font color="#CCCCCC"> Sharpie</font><font color="#E5E5E5"> LOL when</font>

525
00:24:08,409 --> 00:24:14,590
you're a<font color="#CCCCCC"> rap could be a well-to-do the</font>

526
00:24:10,989 --> 00:24:17,080
hooking and what<font color="#E5E5E5"> I mean hooking</font><font color="#CCCCCC"> away</font>

527
00:24:14,590 --> 00:24:20,738
<font color="#CCCCCC">means setting the hook so when you</font>

528
00:24:17,080 --> 00:24:23,649
control how the function gets created

529
00:24:20,739 --> 00:24:26,350
you can dynamically create the

530
00:24:23,649 --> 00:24:28,570
trampoline<font color="#CCCCCC"> so the original entry point</font>

531
00:24:26,350 --> 00:24:30,459
is a function<font color="#E5E5E5"> you have your trampoline</font>

532
00:24:28,570 --> 00:24:33,399
<font color="#CCCCCC">method</font><font color="#E5E5E5"> so this is exactly what</font><font color="#CCCCCC"> i'm</font>

533
00:24:30,460 --> 00:24:34,320
talking about<font color="#E5E5E5"> you rewrite that</font><font color="#CCCCCC"> functions</font>

534
00:24:33,399 --> 00:24:36,449
code

535
00:24:34,320 --> 00:24:38,759
you have your hook<font color="#CCCCCC"> code here we</font><font color="#E5E5E5"> could do</font>

536
00:24:36,450 --> 00:24:40,409
<font color="#CCCCCC">their monitoring</font><font color="#E5E5E5"> and then from there at</font>

537
00:24:38,759 --> 00:24:42,840
points back to the original target

538
00:24:40,409 --> 00:24:44,460
<font color="#E5E5E5">returns with the right information or</font>

539
00:24:42,840 --> 00:24:47,189
you can I kill it<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not you know</font>

540
00:24:44,460 --> 00:24:51,090
depending on what type of logic you do

541
00:24:47,190 --> 00:24:52,139
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> the next solution and jit</font>

542
00:24:51,090 --> 00:24:54,600
compiler<font color="#CCCCCC"> hooky</font>

543
00:24:52,139 --> 00:24:57,959
so what this actually is<font color="#E5E5E5"> i am replacing</font>

544
00:24:54,600 --> 00:25:01,350
<font color="#E5E5E5">functions</font><font color="#CCCCCC"> of for my own functions</font><font color="#E5E5E5"> in the</font>

545
00:24:57,960 --> 00:25:03,630
<font color="#CCCCCC">judge compiler itself so like</font><font color="#E5E5E5"> I said</font><font color="#CCCCCC"> it</font>

546
00:25:01,350 --> 00:25:06,059
before you<font color="#E5E5E5"> have to use your</font><font color="#CCCCCC"> be sharp</font>

547
00:25:03,630 --> 00:25:07,559
<font color="#CCCCCC">yellow injection again</font><font color="#E5E5E5"> and then once</font>

548
00:25:06,059 --> 00:25:11,580
you're in you figure out what version it

549
00:25:07,559 --> 00:25:14,340
is<font color="#E5E5E5"> your place</font><font color="#CCCCCC"> a jit compiler to compile</font>

550
00:25:11,580 --> 00:25:18,090
method and then you start doing<font color="#CCCCCC"> you're</font>

551
00:25:14,340 --> 00:25:19,379
hooking code while it's<font color="#E5E5E5"> being cheated so</font>

552
00:25:18,090 --> 00:25:22,949
what<font color="#E5E5E5"> does that look like</font>

553
00:25:19,379 --> 00:25:26,428
<font color="#CCCCCC">ok so this is actually when</font><font color="#E5E5E5"> how you</font>

554
00:25:22,950 --> 00:25:29,220
would use like<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> hook to hook</font><font color="#CCCCCC"> actual</font>

555
00:25:26,429 --> 00:25:32,490
compiler to compile methods and from

556
00:25:29,220 --> 00:25:36,000
there you can recompile<font color="#CCCCCC"> IL code on the</font>

557
00:25:32,490 --> 00:25:38,519
fly and push it in memory as it's

558
00:25:36,000 --> 00:25:41,879
happening<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can do all that as soon</font>

559
00:25:38,519 --> 00:25:45,120
as it starts getting<font color="#E5E5E5"> getting that</font>

560
00:25:41,879 --> 00:25:48,299
shooting<font color="#E5E5E5"> so there was kind of like what</font>

561
00:25:45,120 --> 00:25:50,428
the output looks like<font color="#CCCCCC"> this is one up</font>

562
00:25:48,299 --> 00:25:53,279
when<font color="#CCCCCC"> i'm actually testing cars toys</font>

563
00:25:50,429 --> 00:25:55,590
<font color="#E5E5E5">sharp pick you can be using the run</font>

564
00:25:53,279 --> 00:25:58,559
spaces here<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> its first when</font><font color="#E5E5E5"> it</font>

565
00:25:55,590 --> 00:25:59,879
<font color="#CCCCCC">ships so you can</font><font color="#E5E5E5"> monitor like when it's</font>

566
00:25:58,559 --> 00:26:02,610
going through all these different

567
00:25:59,879 --> 00:26:04,830
methods as it's happening<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

568
00:26:02,610 --> 00:26:07,799
<font color="#CCCCCC">when</font><font color="#E5E5E5"> you would actually</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> months</font>

569
00:26:04,830 --> 00:26:09,480
<font color="#E5E5E5">pregnant</font><font color="#CCCCCC"> when you can actually start</font>

570
00:26:07,799 --> 00:26:13,679
following some of these methods and

571
00:26:09,480 --> 00:26:17,220
insert your hook<font color="#CCCCCC"> right be</font><font color="#E5E5E5"> based</font><font color="#CCCCCC"> methods</font>

572
00:26:13,679 --> 00:26:20,190
<font color="#CCCCCC">in the finals</font><font color="#E5E5E5"> so instead of hooking on</font>

573
00:26:17,220 --> 00:26:22,200
the jet level we want to hook<font color="#E5E5E5"> when it</font>

574
00:26:20,190 --> 00:26:25,799
gets down to the<font color="#E5E5E5"> native CPU instructions</font>

575
00:26:22,200 --> 00:26:27,809
<font color="#CCCCCC">you're actually creating</font><font color="#E5E5E5"> your normal you</font>

576
00:26:25,799 --> 00:26:30,899
know<font color="#E5E5E5"> assembly instructions to do the</font>

577
00:26:27,809 --> 00:26:33,779
<font color="#E5E5E5">tram</font><font color="#CCCCCC"> points so this</font><font color="#E5E5E5"> is actually from</font>

578
00:26:30,899 --> 00:26:34,918
<font color="#CCCCCC">torrents</font><font color="#E5E5E5"> of contact</font><font color="#CCCCCC"> i think</font><font color="#E5E5E5"> he</font><font color="#CCCCCC"> did a</font>

579
00:26:33,779 --> 00:26:36,779
black<font color="#CCCCCC"> cat Park you</font>

580
00:26:34,919 --> 00:26:39,179
he actually created a<font color="#E5E5E5"> defensive tool</font>

581
00:26:36,779 --> 00:26:41,129
that<font color="#E5E5E5"> would just overwrite codeblocks</font>

582
00:26:39,179 --> 00:26:43,740
<font color="#E5E5E5">memory because you have the ability to</font>

583
00:26:41,129 --> 00:26:45,480
because memory locations where r WX

584
00:26:43,740 --> 00:26:48,179
<font color="#E5E5E5">so in this case we're doing something</font>

585
00:26:45,480 --> 00:26:51,870
good and<font color="#E5E5E5"> not bad</font><font color="#CCCCCC"> what you</font><font color="#E5E5E5"> want to do</font><font color="#CCCCCC"> fat</font>

586
00:26:48,179 --> 00:26:53,280
<font color="#CCCCCC">you want to only right that with good</font>

587
00:26:51,870 --> 00:26:56,340
assembly<font color="#E5E5E5"> instructions to do the hook</font>

588
00:26:53,280 --> 00:26:59,460
<font color="#CCCCCC">rather than</font><font color="#E5E5E5"> a you know overriding it</font>

589
00:26:56,340 --> 00:27:00,809
with shell code which you could but<font color="#CCCCCC"> I</font>

590
00:26:59,460 --> 00:27:04,800
don't<font color="#CCCCCC"> recommend</font><font color="#E5E5E5"> it because</font><font color="#CCCCCC"> you'll</font>

591
00:27:00,809 --> 00:27:06,210
probably<font color="#E5E5E5"> crash the program ever hey so</font>

592
00:27:04,800 --> 00:27:07,950
how did you<font color="#E5E5E5"> do that</font>

593
00:27:06,210 --> 00:27:10,770
so<font color="#E5E5E5"> use a</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> reflection</font><font color="#CCCCCC"> how they</font>

594
00:27:07,950 --> 00:27:13,080
<font color="#E5E5E5">explained before once you precompile the</font>

595
00:27:10,770 --> 00:27:15,150
method using the<font color="#CCCCCC"> preparer method you can</font>

596
00:27:13,080 --> 00:27:16,830
get you call this function get function

597
00:27:15,150 --> 00:27:21,090
pointer and you can get actual<font color="#E5E5E5"> pointer</font>

598
00:27:16,830 --> 00:27:22,800
it<font color="#CCCCCC"> as it exists and virtual memory so</font>

599
00:27:21,090 --> 00:27:24,178
<font color="#CCCCCC">what</font><font color="#E5E5E5"> the problem is</font><font color="#CCCCCC"> like I exciting</font><font color="#E5E5E5"> for</font>

600
00:27:22,800 --> 00:27:26,190
<font color="#E5E5E5">you on a crash it</font>

601
00:27:24,179 --> 00:27:28,980
<font color="#E5E5E5">so you want to make sure you get this</font>

602
00:27:26,190 --> 00:27:33,270
<font color="#CCCCCC">how</font><font color="#E5E5E5"> you need to understand how to</font>

603
00:27:28,980 --> 00:27:36,059
convert<font color="#CCCCCC"> IL code into</font><font color="#E5E5E5"> a assembly code and</font>

604
00:27:33,270 --> 00:27:37,980
then figure out the arguments and then

605
00:27:36,059 --> 00:27:40,620
figure out how to do the prototype<font color="#CCCCCC"> so</font>

606
00:27:37,980 --> 00:27:43,500
you have to do<font color="#CCCCCC"> with four layers eat like</font>

607
00:27:40,620 --> 00:27:45,928
that<font color="#E5E5E5"> net</font><font color="#CCCCCC"> inception</font><font color="#E5E5E5"> who will make sure</font>

608
00:27:43,500 --> 00:27:50,220
you get everything correct

609
00:27:45,929 --> 00:27:52,500
<font color="#E5E5E5">alright so the results so</font><font color="#CCCCCC"> wow you</font><font color="#E5E5E5"> really</font>

610
00:27:50,220 --> 00:27:54,690
<font color="#E5E5E5">can't see the colors here</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> so what</font><font color="#CCCCCC"> I</font>

611
00:27:52,500 --> 00:27:56,070
did was<font color="#CCCCCC"> I wait out like whatever</font><font color="#E5E5E5"> things</font>

612
00:27:54,690 --> 00:27:58,950
the point that I wanted to get<font color="#E5E5E5"> to cross</font>

613
00:27:56,070 --> 00:28:03,240
<font color="#CCCCCC">I can do one time analysis i can run on</font>

614
00:27:58,950 --> 00:28:05,550
<font color="#CCCCCC">partial to</font><font color="#E5E5E5"> and above</font><font color="#CCCCCC"> i could do a self</font>

615
00:28:03,240 --> 00:28:09,059
<font color="#E5E5E5">versus a</font><font color="#CCCCCC"> month i know i'm</font><font color="#E5E5E5"> doing</font>

616
00:28:05,550 --> 00:28:12,000
something similar but<font color="#CCCCCC"> i'm making</font><font color="#E5E5E5"> sure</font><font color="#CCCCCC"> by</font>

617
00:28:09,059 --> 00:28:14,129
using<font color="#E5E5E5"> you know my injector properly or</font>

618
00:28:12,000 --> 00:28:16,500
<font color="#CCCCCC">myself</font><font color="#E5E5E5"> driver properly</font><font color="#CCCCCC"> i can inject</font>

619
00:28:14,130 --> 00:28:19,740
without being known<font color="#E5E5E5"> him there</font><font color="#CCCCCC"> to the</font>

620
00:28:16,500 --> 00:28:23,070
morning<font color="#CCCCCC"> on</font><font color="#E5E5E5"> a lower level</font><font color="#CCCCCC"> any system</font>

621
00:28:19,740 --> 00:28:26,610
artifacts<font color="#CCCCCC"> i found that the jit</font><font color="#E5E5E5"> love</font><font color="#CCCCCC"> feel</font>

622
00:28:23,070 --> 00:28:29,700
<font color="#CCCCCC">are profiling and the aisle binary</font><font color="#E5E5E5"> had</font>

623
00:28:26,610 --> 00:28:32,129
some artifacts<font color="#E5E5E5"> so like</font><font color="#CCCCCC"> a normal phone</font>

624
00:28:29,700 --> 00:28:34,770
use it or not it doesn't have to have

625
00:28:32,130 --> 00:28:37,559
engine installed<font color="#CCCCCC"> so another thing</font><font color="#E5E5E5"> is if</font>

626
00:28:34,770 --> 00:28:40,020
you have an engine<font color="#E5E5E5"> native image of a</font>

627
00:28:37,559 --> 00:28:41,910
bypass the<font color="#CCCCCC"> chip compliation states so</font>

628
00:28:40,020 --> 00:28:44,309
all your efforts<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> doing in the gym</font>

629
00:28:41,910 --> 00:28:45,809
<font color="#E5E5E5">location</font><font color="#CCCCCC"> and then it's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> gonna work</font>

630
00:28:44,309 --> 00:28:47,340
you're<font color="#E5E5E5"> gonna have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> install it</font><font color="#CCCCCC"> so that</font>

631
00:28:45,809 --> 00:28:49,379
makes a big difference<font color="#CCCCCC"> when you're</font>

632
00:28:47,340 --> 00:28:51,809
deploying<font color="#E5E5E5"> into</font><font color="#CCCCCC"> your customer</font><font color="#E5E5E5"> environment</font>

633
00:28:49,380 --> 00:28:54,269
<font color="#CCCCCC">alright and</font><font color="#E5E5E5"> then at the same time</font>

634
00:28:51,809 --> 00:28:55,499
<font color="#CCCCCC">requires signature</font><font color="#E5E5E5"> validation like</font>

635
00:28:54,269 --> 00:28:58,349
<font color="#CCCCCC">when the fourth you're trying to bypass</font>

636
00:28:55,499 --> 00:29:01,859
signature<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to make sure that you can</font>

637
00:28:58,349 --> 00:29:06,208
<font color="#CCCCCC">the</font><font color="#E5E5E5"> environment</font><font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> visible</font><font color="#E5E5E5"> pl8</font>

638
00:29:01,859 --> 00:29:08,070
over everything in<font color="#E5E5E5"> CC on this chart</font><font color="#CCCCCC"> so</font>

639
00:29:06,209 --> 00:29:10,679
<font color="#CCCCCC">when I came</font><font color="#E5E5E5"> up with</font><font color="#CCCCCC"> is like</font><font color="#E5E5E5"> this would</font>

640
00:29:08,070 --> 00:29:12,869
be my first choice and<font color="#E5E5E5"> doing the</font>

641
00:29:10,679 --> 00:29:14,909
solution of the machine code

642
00:29:12,869 --> 00:29:17,218
manipulation<font color="#CCCCCC"> the gym</font><font color="#E5E5E5"> hooking which was</font>

643
00:29:14,909 --> 00:29:20,219
really fun<font color="#CCCCCC"> i</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> one of</font><font color="#E5E5E5"> my favorite</font>

644
00:29:17,219 --> 00:29:22,289
but it would be a less sneaky if I

645
00:29:20,219 --> 00:29:24,690
didn't if I couldn't do engine and then

646
00:29:22,289 --> 00:29:26,729
<font color="#CCCCCC">I'll binary modification the</font><font color="#E5E5E5"> live ones</font>

647
00:29:24,690 --> 00:29:29,159
<font color="#E5E5E5">that the best and</font><font color="#CCCCCC"> save this</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> you can</font>

648
00:29:26,729 --> 00:29:31,769
<font color="#CCCCCC">do but it's also difficult</font><font color="#E5E5E5"> if you don't</font>

649
00:29:29,159 --> 00:29:35,579
do it<font color="#CCCCCC"> cheaply</font><font color="#E5E5E5"> depending</font><font color="#CCCCCC"> on what like</font>

650
00:29:31,769 --> 00:29:37,889
<font color="#CCCCCC">open source tool use</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> I would</font>

651
00:29:35,579 --> 00:29:41,129
<font color="#E5E5E5">not probably not use models</font><font color="#CCCCCC"> people i'll</font>

652
00:29:37,889 --> 00:29:43,918
<font color="#E5E5E5">probably just do it myself but pretty</font>

653
00:29:41,129 --> 00:29:46,320
much it<font color="#CCCCCC"> so</font><font color="#E5E5E5"> pick</font><font color="#CCCCCC"> away</font><font color="#E5E5E5"> like a</font><font color="#CCCCCC"> fine before</font>

654
00:29:43,919 --> 00:29:48,839
<font color="#E5E5E5">you</font><font color="#CCCCCC"> rush should intercept actual partial</font>

655
00:29:46,320 --> 00:29:51,599
<font color="#CCCCCC">method rather than the script and then</font>

656
00:29:48,839 --> 00:29:53,549
you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> a selfie do it right</font>

657
00:29:51,599 --> 00:29:56,609
don't crash<font color="#CCCCCC"> powershell</font><font color="#E5E5E5"> please don't</font><font color="#CCCCCC"> cash</font>

658
00:29:53,549 --> 00:29:57,809
<font color="#E5E5E5">car show and then welcome to my diet</font>

659
00:29:56,609 --> 00:30:02,269
<font color="#E5E5E5">health</font>

660
00:29:57,809 --> 00:30:02,269
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> any question</font>

661
00:30:04,029 --> 00:30:08,739
<font color="#E5E5E5">should I don't know</font><font color="#CCCCCC"> you know I don't</font>

662
00:30:06,580 --> 00:30:13,570
<font color="#CCCCCC">think about my son</font>

663
00:30:08,739 --> 00:30:20,409
<font color="#CCCCCC">anyway no check</font>

664
00:30:13,570 --> 00:30:22,479
oh<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> I'm you know</font><font color="#E5E5E5"> I explored regular</font>

665
00:30:20,409 --> 00:30:27,669
<font color="#CCCCCC">AIP hooking as well i kinda wanna go</font>

666
00:30:22,479 --> 00:30:30,369
back to that but<font color="#E5E5E5"> it</font><font color="#CCCCCC"> i think i probably</font>

667
00:30:27,669 --> 00:30:32,200
focus more on a lower level<font color="#E5E5E5"> even</font><font color="#CCCCCC"> lower</font>

668
00:30:30,369 --> 00:30:35,529
<font color="#E5E5E5">than</font><font color="#CCCCCC"> that like that and the native</font>

669
00:30:32,200 --> 00:30:37,779
<font color="#E5E5E5">images but</font><font color="#CCCCCC"> i only had a couple months so</font>

670
00:30:35,529 --> 00:30:41,769
<font color="#E5E5E5">yeah my</font><font color="#CCCCCC"> boss is like go research</font>

671
00:30:37,779 --> 00:30:47,700
<font color="#CCCCCC">powershell ok</font><font color="#E5E5E5"> ok</font><font color="#CCCCCC"> I'll start</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> dotnet</font>

672
00:30:41,769 --> 00:30:47,700
<font color="#CCCCCC">yeah</font>

673
00:30:53,940 --> 00:30:56,480
something that

674
00:30:59,870 --> 00:31:06,679
<font color="#E5E5E5">yeah so and</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> was mainly used for</font>

675
00:31:03,320 --> 00:31:09,889
improving performance<font color="#CCCCCC"> so if you were to</font>

676
00:31:06,680 --> 00:31:11,570
<font color="#CCCCCC">pre-compiled appreciate the set as</font>

677
00:31:09,890 --> 00:31:12,770
<font color="#E5E5E5">assembly so that means it doesn't have</font>

678
00:31:11,570 --> 00:31:15,590
to go through the<font color="#CCCCCC"> chick</font><font color="#E5E5E5"> compiler which</font>

679
00:31:12,770 --> 00:31:17,150
means<font color="#E5E5E5"> it'll run faster</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> but the only</font>

680
00:31:15,590 --> 00:31:20,780
downside<font color="#E5E5E5"> to that is you don't have the</font>

681
00:31:17,150 --> 00:31:26,660
<font color="#E5E5E5">optimization</font><font color="#CCCCCC"> her like her operating</font>

682
00:31:20,780 --> 00:31:29,570
system<font color="#E5E5E5"> now</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> just look for the next</font>

683
00:31:26,660 --> 00:31:32,300
<font color="#E5E5E5">best thing like</font><font color="#CCCCCC"> has the load of</font><font color="#E5E5E5"> yellowed</font>

684
00:31:29,570 --> 00:31:39,678
order right<font color="#CCCCCC"> yeah</font>

685
00:31:32,300 --> 00:31:43,159
anything else<font color="#CCCCCC"> ok awesome a</font><font color="#E5E5E5"> manner so</font>

686
00:31:39,679 --> 00:31:44,720
thank you very much<font color="#CCCCCC"> and from our sponsor</font>

687
00:31:43,160 --> 00:31:48,260
fit those of you who've been around

688
00:31:44,720 --> 00:31:54,559
recognize this<font color="#CCCCCC"> a fit for you</font>

689
00:31:48,260 --> 00:31:58,790
awesome<font color="#CCCCCC"> so</font><font color="#E5E5E5"> yes</font>

690
00:31:54,559 --> 00:32:00,379
<font color="#CCCCCC">Wow how about that ok don't forget happy</font>

691
00:31:58,790 --> 00:32:12,280
hour at<font color="#CCCCCC"> five-twenty</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> salesforce</font>

692
00:32:00,380 --> 00:32:12,280
<font color="#CCCCCC">vicar</font>

