1
00:00:00,060 --> 00:00:02,159
we're delighted to have Rajan to talk

2
00:00:02,159 --> 00:00:05,759
about placeholder for days

3
00:00:05,759 --> 00:00:07,140
awesome

4
00:00:07,140 --> 00:00:09,660
um hello everyone so welcome to the talk

5
00:00:09,660 --> 00:00:12,480
placeholder for days uh at this besides

6
00:00:12,480 --> 00:00:15,120
conference my name is Rojan uh for this

7
00:00:15,120 --> 00:00:17,039
specific talk we're going to look at

8
00:00:17,039 --> 00:00:20,460
abuse cases or exploit cases where uh if

9
00:00:20,460 --> 00:00:22,500
a company is designing custom support

10
00:00:22,500 --> 00:00:25,380
portal on top of on like off the self

11
00:00:25,380 --> 00:00:27,359
kind of solutions how you can abuse

12
00:00:27,359 --> 00:00:29,640
certain integration types and then steal

13
00:00:29,640 --> 00:00:31,679
or extract customer information through

14
00:00:31,679 --> 00:00:34,739
that a quick introduction if you want to

15
00:00:34,739 --> 00:00:36,420
reach out to me after this presentation

16
00:00:36,420 --> 00:00:38,280
you can reach out to me via my Twitter

17
00:00:38,280 --> 00:00:41,280
account uh it is uranium hacker a quick

18
00:00:41,280 --> 00:00:43,980
info about me I currently do security at

19
00:00:43,980 --> 00:00:46,260
opium security where we basically do

20
00:00:46,260 --> 00:00:48,000
security assessments burn management and

21
00:00:48,000 --> 00:00:50,640
Bug Bounty program management but also

22
00:00:50,640 --> 00:00:52,440
on the side I do occasional bug bounties

23
00:00:52,440 --> 00:00:55,079
which you'll see examples of today most

24
00:00:55,079 --> 00:00:56,579
of the bug boundaries that I focus on

25
00:00:56,579 --> 00:00:58,680
are kind of related to the research to

26
00:00:58,680 --> 00:01:00,180
understand how many companies are

27
00:01:00,180 --> 00:01:01,920
impacted mainly because of the

28
00:01:01,920 --> 00:01:04,019
responsible disclosure policy that most

29
00:01:04,019 --> 00:01:06,180
of these companies have

30
00:01:06,180 --> 00:01:09,119
that said let's get started with this um

31
00:01:09,119 --> 00:01:10,920
basically the focus of this presentation

32
00:01:10,920 --> 00:01:13,320
kind of started as an accident when I

33
00:01:13,320 --> 00:01:15,119
was looking at GitHub we will see

34
00:01:15,119 --> 00:01:17,280
example of that later on when I showcase

35
00:01:17,280 --> 00:01:19,140
the vulnerabilities impacting GitHub

36
00:01:19,140 --> 00:01:22,140
itself but the idea behind it was to

37
00:01:22,140 --> 00:01:25,080
look for any kind of customer support

38
00:01:25,080 --> 00:01:27,540
portals that are running on top of

39
00:01:27,540 --> 00:01:29,900
existing on of the self Solutions

40
00:01:29,900 --> 00:01:32,340
basically companies can sometimes create

41
00:01:32,340 --> 00:01:34,439
their own UI and their own application

42
00:01:34,439 --> 00:01:37,799
to work with customers to help respond

43
00:01:37,799 --> 00:01:39,600
to customers via their support agents

44
00:01:39,600 --> 00:01:41,939
but instead of using existing solutions

45
00:01:41,939 --> 00:01:44,280
they will write their own one with the

46
00:01:44,280 --> 00:01:46,320
back end with the existing one this kind

47
00:01:46,320 --> 00:01:49,320
of helps them to use their current user

48
00:01:49,320 --> 00:01:51,180
account informations to help pre-fill

49
00:01:51,180 --> 00:01:53,520
ticket information and whatnot but at

50
00:01:53,520 --> 00:01:55,979
the same time when you integrate and

51
00:01:55,979 --> 00:01:57,899
create your own application it already

52
00:01:57,899 --> 00:02:00,119
has the regular web vulnerabilities

53
00:02:00,119 --> 00:02:02,520
associated with it but what I wanted to

54
00:02:02,520 --> 00:02:04,320
take a look at was is there any

55
00:02:04,320 --> 00:02:06,659
integration specific vulnerability that

56
00:02:06,659 --> 00:02:08,940
I can focus on now with Integrations

57
00:02:08,940 --> 00:02:11,099
there are risks with how the apis can be

58
00:02:11,099 --> 00:02:12,840
used and that's where most of the

59
00:02:12,840 --> 00:02:14,220
exploits throughout this presentation

60
00:02:14,220 --> 00:02:17,040
will come when I specifically talk about

61
00:02:17,040 --> 00:02:19,980
off the self chosens I'm directly

62
00:02:19,980 --> 00:02:21,420
talking about

63
00:02:21,420 --> 00:02:23,700
products like zendex Salesforce

64
00:02:23,700 --> 00:02:26,280
servicenow and zero service desk

65
00:02:26,280 --> 00:02:28,260
however it is important to highlight

66
00:02:28,260 --> 00:02:30,000
that whatever you see in this

67
00:02:30,000 --> 00:02:32,040
presentation is not a vulnerability

68
00:02:32,040 --> 00:02:34,980
directly in zendesk or Salesforce or any

69
00:02:34,980 --> 00:02:36,840
of this service it's more on the

70
00:02:36,840 --> 00:02:39,000
integration side of how companies are

71
00:02:39,000 --> 00:02:41,819
using these features and in this

72
00:02:41,819 --> 00:02:43,680
specific presentation I'm mainly going

73
00:02:43,680 --> 00:02:46,019
to focus on genders and Salesforce the

74
00:02:46,019 --> 00:02:48,180
reasoning behind that is when we think

75
00:02:48,180 --> 00:02:50,280
of zendesk or Salesforce they are more

76
00:02:50,280 --> 00:02:53,040
publicly accessible for customer uses

77
00:02:53,040 --> 00:02:55,560
but then comparing it to servicenow or

78
00:02:55,560 --> 00:02:57,599
zero service desk it's more focused on

79
00:02:57,599 --> 00:02:59,400
internal and corporate environments

80
00:02:59,400 --> 00:03:02,220
there are off the chance cases where

81
00:03:02,220 --> 00:03:04,620
servicenow or service their service desk

82
00:03:04,620 --> 00:03:06,780
could be used for customer facing

83
00:03:06,780 --> 00:03:08,700
environments but it is pretty minimal

84
00:03:08,700 --> 00:03:11,340
versus genesk where most of us in the

85
00:03:11,340 --> 00:03:13,019
room probably have interacted with a

86
00:03:13,019 --> 00:03:14,879
company that is using zendesk or

87
00:03:14,879 --> 00:03:16,440
probably work for a company that uses

88
00:03:16,440 --> 00:03:18,840
centesk so that's where the

89
00:03:18,840 --> 00:03:20,700
vulnerabilities there arise

90
00:03:20,700 --> 00:03:22,800
and in this case all of these support

91
00:03:22,800 --> 00:03:25,260
system have one common feature that I

92
00:03:25,260 --> 00:03:27,720
looked at which is placeholders now when

93
00:03:27,720 --> 00:03:29,879
we think of placeholders including the

94
00:03:29,879 --> 00:03:31,980
talk title it seems like it's just a

95
00:03:31,980 --> 00:03:34,019
text or string that we're putting which

96
00:03:34,019 --> 00:03:36,540
we'll replace later on uh if we are

97
00:03:36,540 --> 00:03:37,920
doing software engineering we can think

98
00:03:37,920 --> 00:03:40,319
of things like localhost example.com and

99
00:03:40,319 --> 00:03:43,440
whatnot as placeholders but when we look

100
00:03:43,440 --> 00:03:45,420
into support systems it's kind of a bit

101
00:03:45,420 --> 00:03:47,280
different these are more of like

102
00:03:47,280 --> 00:03:50,099
automated rendering designs where you

103
00:03:50,099 --> 00:03:52,019
can put a key there and it will

104
00:03:52,019 --> 00:03:53,819
automatically feel the value on it later

105
00:03:53,819 --> 00:03:56,519
on when you're responding to that ticket

106
00:03:56,519 --> 00:03:58,200
and it will pre-fill with specific

107
00:03:58,200 --> 00:04:00,900
information that it has access to so

108
00:04:00,900 --> 00:04:03,180
placeholder for a support system may

109
00:04:03,180 --> 00:04:04,860
have access to things like the ticket

110
00:04:04,860 --> 00:04:07,319
title ticket information the user who

111
00:04:07,319 --> 00:04:08,819
created the ticket and the agent

112
00:04:08,819 --> 00:04:11,640
responding to it but also the goals

113
00:04:11,640 --> 00:04:13,620
behind it is to make it easier for

114
00:04:13,620 --> 00:04:15,659
support agents to respond to these kind

115
00:04:15,659 --> 00:04:17,880
of tickets now if you're a support agent

116
00:04:17,880 --> 00:04:20,220
handling about 10 000 tickets a month

117
00:04:20,220 --> 00:04:22,199
you don't really want to type the first

118
00:04:22,199 --> 00:04:24,060
stem last name email of every ticket

119
00:04:24,060 --> 00:04:25,139
that you're getting when you're

120
00:04:25,139 --> 00:04:27,600
responding and that's where the use case

121
00:04:27,600 --> 00:04:29,820
of placeholder really comes in and we'll

122
00:04:29,820 --> 00:04:31,740
see examples and how those can be abused

123
00:04:31,740 --> 00:04:33,840
throughout the slides

124
00:04:33,840 --> 00:04:36,780
we'll start that first with zendesk as I

125
00:04:36,780 --> 00:04:38,580
mentioned before Genesis is heavily used

126
00:04:38,580 --> 00:04:41,580
a lot of companies tend to use it my

127
00:04:41,580 --> 00:04:44,040
specific Focus was finding companies

128
00:04:44,040 --> 00:04:45,900
where they will have their own support

129
00:04:45,900 --> 00:04:48,240
system or like support portal but in the

130
00:04:48,240 --> 00:04:50,580
back end or storing uh you information

131
00:04:50,580 --> 00:04:53,460
stories wise they'll be using SanDisk

132
00:04:53,460 --> 00:04:56,040
now zendes does support placeholders so

133
00:04:56,040 --> 00:04:58,560
for example it provides placeholder for

134
00:04:58,560 --> 00:05:01,020
agents to directly respond whether it's

135
00:05:01,020 --> 00:05:03,479
via tickets whether it's via email so

136
00:05:03,479 --> 00:05:05,639
kind of making the life easy there but

137
00:05:05,639 --> 00:05:08,100
at the same time since we are thinking

138
00:05:08,100 --> 00:05:11,040
also of unsafe user inputs it also will

139
00:05:11,040 --> 00:05:13,759
suppress placeholder in certain cases

140
00:05:13,759 --> 00:05:16,680
specifically focusing on end user and

141
00:05:16,680 --> 00:05:19,139
then if we were to kind of get an idea

142
00:05:19,139 --> 00:05:21,600
of how zendesk's system design works

143
00:05:21,600 --> 00:05:23,759
when we look at placeholder it's more

144
00:05:23,759 --> 00:05:25,680
through liquid templates and liquid

145
00:05:25,680 --> 00:05:27,720
template is something that Shopify built

146
00:05:27,720 --> 00:05:30,539
which is kind of programmable you can do

147
00:05:30,539 --> 00:05:31,979
some kind of programming with it which

148
00:05:31,979 --> 00:05:34,139
helps later on when we're trying to

149
00:05:34,139 --> 00:05:36,300
extract information of other users

150
00:05:36,300 --> 00:05:38,699
through placeholders in affected

151
00:05:38,699 --> 00:05:40,320
companies

152
00:05:40,320 --> 00:05:42,539
now I mentioned suppression so it only

153
00:05:42,539 --> 00:05:44,940
works in certain cases but when we look

154
00:05:44,940 --> 00:05:47,400
at activations there's three scenarios

155
00:05:47,400 --> 00:05:49,440
where a placeholder would actually be

156
00:05:49,440 --> 00:05:51,600
used the first one being the agent

157
00:05:51,600 --> 00:05:53,580
response this kind of makes sense if an

158
00:05:53,580 --> 00:05:55,500
agent is responding to a ticket they're

159
00:05:55,500 --> 00:05:57,300
more likely going to use the placeholder

160
00:05:57,300 --> 00:05:59,160
so it'll make sense to give them access

161
00:05:59,160 --> 00:06:01,320
to that it can work both in the email

162
00:06:01,320 --> 00:06:03,900
and portal features but then you also

163
00:06:03,900 --> 00:06:05,759
have automations and this is something

164
00:06:05,759 --> 00:06:09,960
we as end user oftentimes see so if you

165
00:06:09,960 --> 00:06:11,699
create a gender stick it or if you

166
00:06:11,699 --> 00:06:13,320
create a support ticket on a system

167
00:06:13,320 --> 00:06:15,479
that's using zendisk you're more likely

168
00:06:15,479 --> 00:06:17,220
going to see an automated email which

169
00:06:17,220 --> 00:06:19,139
will say hey we got your ticket here's

170
00:06:19,139 --> 00:06:21,780
your case ID or ticket ID and we'll get

171
00:06:21,780 --> 00:06:23,699
back to you soon and usually those are

172
00:06:23,699 --> 00:06:25,800
results of automation triggers that are

173
00:06:25,800 --> 00:06:28,440
already available in zendesk

174
00:06:28,440 --> 00:06:31,740
last but not least the admin endpoints

175
00:06:31,740 --> 00:06:33,600
have access to it which when we think

176
00:06:33,600 --> 00:06:35,940
about it kind of makes sense admin

177
00:06:35,940 --> 00:06:37,740
endpoints or API endpoints in this case

178
00:06:37,740 --> 00:06:40,020
are pretty much authenticated either as

179
00:06:40,020 --> 00:06:42,840
an agent or an admin in which cases if a

180
00:06:42,840 --> 00:06:44,639
agent is responding whether it's through

181
00:06:44,639 --> 00:06:47,580
an internal portal or external one they

182
00:06:47,580 --> 00:06:49,139
probably are going to authenticate as

183
00:06:49,139 --> 00:06:50,940
them so it'll make sense for them to

184
00:06:50,940 --> 00:06:52,979
have access to placeholders there

185
00:06:52,979 --> 00:06:55,020
but when we look at the end user

186
00:06:55,020 --> 00:06:57,060
perspective there is a certain

187
00:06:57,060 --> 00:06:59,520
suppression rules that gets kicked in so

188
00:06:59,520 --> 00:07:00,840
for example

189
00:07:00,840 --> 00:07:02,759
in ticket creation when you create a

190
00:07:02,759 --> 00:07:04,620
ticket or when you update a ticket the

191
00:07:04,620 --> 00:07:06,900
placeholders are suppressed just as a

192
00:07:06,900 --> 00:07:09,000
way to prevent end users from abusing

193
00:07:09,000 --> 00:07:12,479
the access to placeholders there

194
00:07:12,479 --> 00:07:14,880
now I mentioned about admin API

195
00:07:14,880 --> 00:07:17,759
endpoints there's uh two different API

196
00:07:17,759 --> 00:07:19,979
endpoints when we look at zendisk and

197
00:07:19,979 --> 00:07:21,000
this is where a lot of the

198
00:07:21,000 --> 00:07:22,500
vulnerabilities that I looked at came

199
00:07:22,500 --> 00:07:24,960
into fruition is because of the kind of

200
00:07:24,960 --> 00:07:27,300
a confusion of what a tickets API is and

201
00:07:27,300 --> 00:07:30,780
what a request API is so tickets API in

202
00:07:30,780 --> 00:07:33,180
a sense is pretty much for admins to use

203
00:07:33,180 --> 00:07:35,280
or for an agent to use so it does

204
00:07:35,280 --> 00:07:37,740
require authentication there you have to

205
00:07:37,740 --> 00:07:40,199
pass in a admin system token or an admin

206
00:07:40,199 --> 00:07:42,660
API key or an agent API key but then

207
00:07:42,660 --> 00:07:44,639
compared to request API which is more

208
00:07:44,639 --> 00:07:46,860
accessible it is accessible both by

209
00:07:46,860 --> 00:07:49,259
guest which is logged in users in your

210
00:07:49,259 --> 00:07:51,599
support instance Anonymous users who are

211
00:07:51,599 --> 00:07:53,160
just trying to create without logging in

212
00:07:53,160 --> 00:07:55,080
and then you have agent and admin access

213
00:07:55,080 --> 00:07:57,419
so from a developer point of view if

214
00:07:57,419 --> 00:07:58,860
you're trying to build your own

215
00:07:58,860 --> 00:08:00,780
integration around zendesk and you want

216
00:08:00,780 --> 00:08:03,120
people to create a ticket you most

217
00:08:03,120 --> 00:08:04,860
likely want to use the request API

218
00:08:04,860 --> 00:08:07,560
endpoint other than or more compared to

219
00:08:07,560 --> 00:08:09,960
like tickets API endpoint tickets API

220
00:08:09,960 --> 00:08:11,460
should more likely be used for

221
00:08:11,460 --> 00:08:13,680
management or operation stuff like

222
00:08:13,680 --> 00:08:15,300
updating a ticket as an agent and

223
00:08:15,300 --> 00:08:17,819
whatnot however that was not always

224
00:08:17,819 --> 00:08:19,800
usually the case so we'll see those

225
00:08:19,800 --> 00:08:22,440
exploits there later on as well

226
00:08:22,440 --> 00:08:24,539
now if we were to focus directly on

227
00:08:24,539 --> 00:08:27,539
placeholders for zendes the syntax one

228
00:08:27,539 --> 00:08:29,520
is mainly focused on the liquid design

229
00:08:29,520 --> 00:08:32,399
so you'll see curly curly brackets being

230
00:08:32,399 --> 00:08:34,740
used with an object in it object are

231
00:08:34,740 --> 00:08:37,260
kind of like class materials if we think

232
00:08:37,260 --> 00:08:39,479
from a programming point of view it can

233
00:08:39,479 --> 00:08:41,580
be referenced by different variables and

234
00:08:41,580 --> 00:08:43,559
those variables can then access Fields

235
00:08:43,559 --> 00:08:45,480
Associated to that class

236
00:08:45,480 --> 00:08:48,180
it is auto rendered so what that kind of

237
00:08:48,180 --> 00:08:50,160
means here is when you input a

238
00:08:50,160 --> 00:08:51,899
placeholder it doesn't fill it there but

239
00:08:51,899 --> 00:08:53,459
when you save the input it will replace

240
00:08:53,459 --> 00:08:56,339
it with the value if it exists if a

241
00:08:56,339 --> 00:08:58,440
value doesn't exist or if you misspell

242
00:08:58,440 --> 00:09:00,660
the placeholder key value there then

243
00:09:00,660 --> 00:09:02,279
you're just going to see the simple

244
00:09:02,279 --> 00:09:04,200
string or you're going to see a null

245
00:09:04,200 --> 00:09:07,320
string depending on situations

246
00:09:07,320 --> 00:09:09,899
and then finally the accessible objects

247
00:09:09,899 --> 00:09:12,540
for Genesis specifically there are three

248
00:09:12,540 --> 00:09:14,820
specific objects which is users tickets

249
00:09:14,820 --> 00:09:17,820
and organizations each of them kind of

250
00:09:17,820 --> 00:09:20,339
link to each other so as a ticket you

251
00:09:20,339 --> 00:09:21,959
can't necessarily access ticket number

252
00:09:21,959 --> 00:09:24,300
two if you're in ticket number one but

253
00:09:24,300 --> 00:09:26,160
you can access the user related to

254
00:09:26,160 --> 00:09:29,160
ticket number one from ticket one and if

255
00:09:29,160 --> 00:09:31,260
we look at specific user object there

256
00:09:31,260 --> 00:09:34,320
are certain fields some of them are kind

257
00:09:34,320 --> 00:09:36,839
of like a common sense field so for

258
00:09:36,839 --> 00:09:39,120
example first name last name and email

259
00:09:39,120 --> 00:09:42,300
these are kind of known easy to guess of

260
00:09:42,300 --> 00:09:43,980
what it that is going to be when we're

261
00:09:43,980 --> 00:09:46,260
targeting a user but there's also things

262
00:09:46,260 --> 00:09:50,519
like phone notes and custom Fields Now

263
00:09:50,519 --> 00:09:53,220
notes are in a sense an array of strings

264
00:09:53,220 --> 00:09:55,680
in gen disk what this will contain will

265
00:09:55,680 --> 00:09:58,200
be anything from agent notes so for

266
00:09:58,200 --> 00:09:59,940
example if you are a Enterprise customer

267
00:09:59,940 --> 00:10:01,980
we are frequently reached out for

268
00:10:01,980 --> 00:10:04,920
support to company a and agent may take

269
00:10:04,920 --> 00:10:06,480
note on your account of like these are

270
00:10:06,480 --> 00:10:08,640
the accents that we have taken these are

271
00:10:08,640 --> 00:10:11,279
fast cases these are the solutions that

272
00:10:11,279 --> 00:10:13,260
we came up with so that future raisins

273
00:10:13,260 --> 00:10:15,600
can easily respond and help you when

274
00:10:15,600 --> 00:10:18,240
needed custom Fields will vary a lot

275
00:10:18,240 --> 00:10:20,459
depending on an organization so these

276
00:10:20,459 --> 00:10:22,860
are customizable by an orc if we think

277
00:10:22,860 --> 00:10:24,839
of an e-commerce company it is more

278
00:10:24,839 --> 00:10:26,880
likely going to have your most recent

279
00:10:26,880 --> 00:10:29,459
order your billing address your phone

280
00:10:29,459 --> 00:10:31,320
number and then any other important

281
00:10:31,320 --> 00:10:33,240
information they need in order to help

282
00:10:33,240 --> 00:10:35,459
your account versus if you compare it to

283
00:10:35,459 --> 00:10:37,019
a bank they might have it completely

284
00:10:37,019 --> 00:10:38,459
different such as your credit card

285
00:10:38,459 --> 00:10:40,500
balance or what is your credit card

286
00:10:40,500 --> 00:10:43,380
limit and more information there

287
00:10:43,380 --> 00:10:45,660
now if we compare that to ticket object

288
00:10:45,660 --> 00:10:48,420
it has similar kind of access the first

289
00:10:48,420 --> 00:10:50,760
one you can access is account field

290
00:10:50,760 --> 00:10:53,459
which is similar just like the current

291
00:10:53,459 --> 00:10:55,980
organization that's hosting zendes so

292
00:10:55,980 --> 00:10:57,060
you will not be getting a lot of

293
00:10:57,060 --> 00:10:59,100
sensitive info there but it is still

294
00:10:59,100 --> 00:11:01,860
some information and then you have CC

295
00:11:01,860 --> 00:11:04,440
names which is an array of strings of

296
00:11:04,440 --> 00:11:06,839
all users that are secondary to that

297
00:11:06,839 --> 00:11:09,779
ticket so think of it as like carbon

298
00:11:09,779 --> 00:11:12,420
copy and emails or if you CC a user and

299
00:11:12,420 --> 00:11:15,300
if that user already exists in zendisk

300
00:11:15,300 --> 00:11:17,399
for that specific org it will include

301
00:11:17,399 --> 00:11:19,019
the first and the last name for that

302
00:11:19,019 --> 00:11:21,300
versus if it is and just an email

303
00:11:21,300 --> 00:11:23,160
address and an account doesn't exist it

304
00:11:23,160 --> 00:11:25,740
will just fill it with that email

305
00:11:25,740 --> 00:11:27,899
now if we look at ID it's the regular

306
00:11:27,899 --> 00:11:30,480
ticket ID not much going on there but

307
00:11:30,480 --> 00:11:33,899
there's also CC's now cc's are more of

308
00:11:33,899 --> 00:11:36,779
an array of user objects so if we go

309
00:11:36,779 --> 00:11:38,700
back to what we looked at if we're able

310
00:11:38,700 --> 00:11:41,940
to access a list of all users the best

311
00:11:41,940 --> 00:11:43,980
way to do that would be by ceasing or

312
00:11:43,980 --> 00:11:46,380
adding a secondary email of a user that

313
00:11:46,380 --> 00:11:48,420
already exists in the system and then

314
00:11:48,420 --> 00:11:51,120
using CC's field to actually pull their

315
00:11:51,120 --> 00:11:53,279
information versus if you just use CC

316
00:11:53,279 --> 00:11:54,899
names you're just going to get their

317
00:11:54,899 --> 00:11:57,480
first and last name

318
00:11:57,480 --> 00:11:59,760
next is comments which is going to be

319
00:11:59,760 --> 00:12:02,279
both internal and external comments so

320
00:12:02,279 --> 00:12:04,500
if a company is using automated systems

321
00:12:04,500 --> 00:12:06,720
where they will have like monitoring

322
00:12:06,720 --> 00:12:08,700
Pages help Pages or whatnot and they

323
00:12:08,700 --> 00:12:11,040
Auto responded to the uh to the ticket

324
00:12:11,040 --> 00:12:12,899
it is going to be listed they're under

325
00:12:12,899 --> 00:12:15,240
the comments and then finally the

326
00:12:15,240 --> 00:12:17,940
requester object or requester field uh

327
00:12:17,940 --> 00:12:20,820
ticket requester is a user object as

328
00:12:20,820 --> 00:12:23,279
well and it is going to be a user that

329
00:12:23,279 --> 00:12:25,260
already exists so if you're creating a

330
00:12:25,260 --> 00:12:27,360
ticket you are going to be marked as a

331
00:12:27,360 --> 00:12:29,579
requester not necessarily the Creator it

332
00:12:29,579 --> 00:12:32,880
will depend on cases in some cases you

333
00:12:32,880 --> 00:12:34,980
may be the Creator may not but in most

334
00:12:34,980 --> 00:12:36,720
cases you will definitely be a requester

335
00:12:36,720 --> 00:12:39,079
account

336
00:12:39,420 --> 00:12:41,700
granted now that we have done a little

337
00:12:41,700 --> 00:12:43,680
bit of high level of how zendis

338
00:12:43,680 --> 00:12:46,139
placeholders work if we actually put it

339
00:12:46,139 --> 00:12:48,120
in place this is how you will ideally

340
00:12:48,120 --> 00:12:50,639
use a placeholder in zendes with the

341
00:12:50,639 --> 00:12:53,100
curly brackets being taken.id to get the

342
00:12:53,100 --> 00:12:55,040
current ticket then you can use

343
00:12:55,040 --> 00:12:57,720
ticket.ccs to get an array of all user

344
00:12:57,720 --> 00:13:00,000
objects that are linked to that ticket

345
00:13:00,000 --> 00:13:02,399
all secondary users there and then you

346
00:13:02,399 --> 00:13:04,139
can use ticket Commons to pull all

347
00:13:04,139 --> 00:13:06,720
internal and external comments and then

348
00:13:06,720 --> 00:13:08,820
current user uh to pull the current

349
00:13:08,820 --> 00:13:11,700
existing user now current user is pretty

350
00:13:11,700 --> 00:13:14,519
interesting it can be dynamic in a sense

351
00:13:14,519 --> 00:13:16,680
where if a company is burnable you can

352
00:13:16,680 --> 00:13:18,660
constantly pull information about the

353
00:13:18,660 --> 00:13:20,160
agent that's responding to your ticket

354
00:13:20,160 --> 00:13:22,620
so let's say if a company doesn't really

355
00:13:22,620 --> 00:13:24,600
disclose you information like email

356
00:13:24,600 --> 00:13:27,300
address or custom fields of an agent you

357
00:13:27,300 --> 00:13:28,800
can use the current user with the

358
00:13:28,800 --> 00:13:30,660
placeholder injection to actually pull

359
00:13:30,660 --> 00:13:33,240
their information it is dynamic as I

360
00:13:33,240 --> 00:13:35,220
mentioned and it is also linked back to

361
00:13:35,220 --> 00:13:38,459
a user object so so far ticket requester

362
00:13:38,459 --> 00:13:40,680
current user and and then tickets CC's

363
00:13:40,680 --> 00:13:43,019
our user objects which allows us to pull

364
00:13:43,019 --> 00:13:45,000
user information

365
00:13:45,000 --> 00:13:47,519
now if we go back a little bit where I

366
00:13:47,519 --> 00:13:50,459
was talking about zendesk using sofifi's

367
00:13:50,459 --> 00:13:52,620
liquid template this actually helps us

368
00:13:52,620 --> 00:13:54,959
to program it a little bit so if we're

369
00:13:54,959 --> 00:13:56,820
accessing something like custom fields

370
00:13:56,820 --> 00:13:58,920
we can actually write a quick for Loop

371
00:13:58,920 --> 00:14:01,019
within zendes to kind of go through the

372
00:14:01,019 --> 00:14:03,600
key value pair and pull both the fields

373
00:14:03,600 --> 00:14:05,279
and its answers there

374
00:14:05,279 --> 00:14:07,260
same thing also goes if we're pulling

375
00:14:07,260 --> 00:14:09,300
for Ticket CC's so as I mentioned before

376
00:14:09,300 --> 00:14:11,639
cc's is basically an array so if you

377
00:14:11,639 --> 00:14:14,459
want to pull all key values for a user

378
00:14:14,459 --> 00:14:16,380
at index 0 if you have added secondary

379
00:14:16,380 --> 00:14:18,660
users you can then actually use a for

380
00:14:18,660 --> 00:14:21,620
Loop for that as well

381
00:14:21,899 --> 00:14:24,000
if we were to take a look at an example

382
00:14:24,000 --> 00:14:27,000
of what a zendes placeholder example

383
00:14:27,000 --> 00:14:28,800
would be from an admin point of view

384
00:14:28,800 --> 00:14:31,680
this is what a automation trigger would

385
00:14:31,680 --> 00:14:33,899
look like so this is by default

386
00:14:33,899 --> 00:14:36,380
available on gendesk and it is the

387
00:14:36,380 --> 00:14:38,700
placeholder or the email trigger that

388
00:14:38,700 --> 00:14:40,500
gets kicked in whenever you create a

389
00:14:40,500 --> 00:14:42,600
ticket in sendisk once you do it it will

390
00:14:42,600 --> 00:14:45,300
fill the ticket ID with the ID of that

391
00:14:45,300 --> 00:14:47,040
specific ticket send you an email and

392
00:14:47,040 --> 00:14:48,899
you'll see that information there

393
00:14:48,899 --> 00:14:51,600
if we were to see more in detail of how

394
00:14:51,600 --> 00:14:53,399
a agent response

395
00:14:53,399 --> 00:14:55,440
this is what it will look like from an

396
00:14:55,440 --> 00:14:57,180
agent's point of view so on the left

397
00:14:57,180 --> 00:14:59,160
hand side we have some of the custom

398
00:14:59,160 --> 00:15:02,160
fields that you can specify as a zendesk

399
00:15:02,160 --> 00:15:04,620
admin so for this the customer customer

400
00:15:04,620 --> 00:15:07,500
we have things like a phone number their

401
00:15:07,500 --> 00:15:09,360
address and then also their account

402
00:15:09,360 --> 00:15:11,160
number and you can also see the flag

403
00:15:11,160 --> 00:15:13,199
custom field I usually add that when I'm

404
00:15:13,199 --> 00:15:15,540
testing so that's where it is being used

405
00:15:15,540 --> 00:15:17,519
and this is how you'll have the custom

406
00:15:17,519 --> 00:15:20,760
field so if we look at how a agent will

407
00:15:20,760 --> 00:15:22,620
respond if they're responding to a

408
00:15:22,620 --> 00:15:23,940
ticket they can then use the

409
00:15:23,940 --> 00:15:26,579
placeholders for it from the UI side

410
00:15:26,579 --> 00:15:28,980
zendes makes it really easy where you

411
00:15:28,980 --> 00:15:30,779
can just fill the information and it

412
00:15:30,779 --> 00:15:32,519
will tell you which one you want to

413
00:15:32,519 --> 00:15:34,139
select so you can actually select

414
00:15:34,139 --> 00:15:36,120
specific placeholders and it will

415
00:15:36,120 --> 00:15:38,519
autofill that as needed but if you have

416
00:15:38,519 --> 00:15:40,980
custom Fields it doesn't usually do it

417
00:15:40,980 --> 00:15:43,079
mainly because custom fields are

418
00:15:43,079 --> 00:15:44,880
something you are creating on the go

419
00:15:44,880 --> 00:15:47,040
kind of thing so it won't autofill it

420
00:15:47,040 --> 00:15:49,860
but you can change it and have it be

421
00:15:49,860 --> 00:15:51,660
different things so in this case this

422
00:15:51,660 --> 00:15:53,399
specific agent is using ticket Dot

423
00:15:53,399 --> 00:15:55,560
request her to get the user object for

424
00:15:55,560 --> 00:15:57,120
the current ticket which is the customer

425
00:15:57,120 --> 00:15:59,100
filling it with their name and their

426
00:15:59,100 --> 00:16:01,019
account number asking them to verify

427
00:16:01,019 --> 00:16:03,420
their account number once you submit the

428
00:16:03,420 --> 00:16:05,519
ticket info or submit a response it'll

429
00:16:05,519 --> 00:16:07,440
auto fill that so that's what it will

430
00:16:07,440 --> 00:16:10,320
look like at the end of it but this is

431
00:16:10,320 --> 00:16:12,240
just an example of how a placeholder

432
00:16:12,240 --> 00:16:14,279
uses will look like

433
00:16:14,279 --> 00:16:17,540
hopefully fix that

434
00:16:22,560 --> 00:16:25,380
all right so now moving more once we

435
00:16:25,380 --> 00:16:27,000
have looked at the regular design of how

436
00:16:27,000 --> 00:16:29,040
placeholder works we can actually jump

437
00:16:29,040 --> 00:16:31,260
into an exploit with the first one being

438
00:16:31,260 --> 00:16:33,540
patient zero AKA GitHub so as I

439
00:16:33,540 --> 00:16:35,339
mentioned before GitHub was kind of an

440
00:16:35,339 --> 00:16:37,139
accident of how I ended up into this

441
00:16:37,139 --> 00:16:39,180
whole uh looking at customer support

442
00:16:39,180 --> 00:16:41,160
vulnerabilities and all the placeholder

443
00:16:41,160 --> 00:16:44,579
injections with it basically GitHub has

444
00:16:44,579 --> 00:16:46,639
this really nice support portal at

445
00:16:46,639 --> 00:16:49,199
support.github.com and this is now kind

446
00:16:49,199 --> 00:16:50,880
of brand design it has been about two

447
00:16:50,880 --> 00:16:52,680
years since the new one has come in

448
00:16:52,680 --> 00:16:55,560
previously it used to be ran purely via

449
00:16:55,560 --> 00:16:58,259
vanilla zendesk uh vanilla zendes being

450
00:16:58,259 --> 00:16:59,699
something you whenever you sign up to

451
00:16:59,699 --> 00:17:01,440
send us the regular portal that's and

452
00:17:01,440 --> 00:17:03,480
this provides you but now GitHub has

453
00:17:03,480 --> 00:17:05,760
transitioned more into integrating it

454
00:17:05,760 --> 00:17:08,040
directly with their user accounts uh you

455
00:17:08,040 --> 00:17:10,140
can create a ticket on behalf of an

456
00:17:10,140 --> 00:17:12,299
organization you can get a ticket on

457
00:17:12,299 --> 00:17:15,059
behalf of yourself when I was looking at

458
00:17:15,059 --> 00:17:16,439
that I wanted to see how it would

459
00:17:16,439 --> 00:17:18,900
actually work so what I did was I pulled

460
00:17:18,900 --> 00:17:20,760
GitHub Enterprise server code and I

461
00:17:20,760 --> 00:17:23,040
wanted to see where the code and the

462
00:17:23,040 --> 00:17:25,380
support light if you look at GitHub

463
00:17:25,380 --> 00:17:27,299
Enterprise server code it kind of

464
00:17:27,299 --> 00:17:30,000
mirrors the real github.com code as well

465
00:17:30,000 --> 00:17:32,160
except for some of the beta features or

466
00:17:32,160 --> 00:17:33,780
like new features that GitHub is working

467
00:17:33,780 --> 00:17:36,299
on so with support one since it had been

468
00:17:36,299 --> 00:17:38,400
two years it was more likely to be there

469
00:17:38,400 --> 00:17:40,799
and looking at the request specifically

470
00:17:40,799 --> 00:17:43,799
I noticed it was using the tickets API

471
00:17:43,799 --> 00:17:46,380
which if we go back to early on tickets

472
00:17:46,380 --> 00:17:48,539
API is more of an admin endpoint so

473
00:17:48,539 --> 00:17:50,400
there are chances that we could abuse

474
00:17:50,400 --> 00:17:53,940
this to do some kind of a damage there

475
00:17:53,940 --> 00:17:56,039
so what I did was started looking at how

476
00:17:56,039 --> 00:17:59,039
tickets API Works versus requis API so

477
00:17:59,039 --> 00:18:00,780
if we were to actually try to visualize

478
00:18:00,780 --> 00:18:03,720
on this request we are sending a request

479
00:18:03,720 --> 00:18:06,059
on behalf of an agent to the tickets API

480
00:18:06,059 --> 00:18:08,640
endpoint if I try to send it on off it

481
00:18:08,640 --> 00:18:10,260
will give me authorization error because

482
00:18:10,260 --> 00:18:13,080
this does require agent and admin now if

483
00:18:13,080 --> 00:18:15,059
we look at the specific request the

484
00:18:15,059 --> 00:18:17,640
subject has a placeholder attached to it

485
00:18:17,640 --> 00:18:20,400
versus when we look at the response the

486
00:18:20,400 --> 00:18:22,500
raw subject Still Remains with whatever

487
00:18:22,500 --> 00:18:25,260
input I provided but the subject input

488
00:18:25,260 --> 00:18:27,840
has now changed to the current user's

489
00:18:27,840 --> 00:18:28,980
email address

490
00:18:28,980 --> 00:18:31,559
comparing that to the request API

491
00:18:31,559 --> 00:18:34,980
endpoint it is more just Anonymous

492
00:18:34,980 --> 00:18:36,660
access so it limits what kind of

493
00:18:36,660 --> 00:18:38,760
requests you can send for example the

494
00:18:38,760 --> 00:18:40,559
placeholder gets sanitized or curly

495
00:18:40,559 --> 00:18:42,780
brackets get removed and it won't

496
00:18:42,780 --> 00:18:44,760
actually render the placeholder attempts

497
00:18:44,760 --> 00:18:45,539
there

498
00:18:45,539 --> 00:18:48,419
with this the goal was to see if GitHub

499
00:18:48,419 --> 00:18:51,539
was vulnerable so the first attempt

500
00:18:51,539 --> 00:18:54,000
I did was sending error filling out the

501
00:18:54,000 --> 00:18:56,760
support request with ticket.requister

502
00:18:56,760 --> 00:18:59,280
DOT email what this does is it's

503
00:18:59,280 --> 00:19:01,080
basically pulling my current user's

504
00:19:01,080 --> 00:19:03,900
email address so ideally if GitHub is

505
00:19:03,900 --> 00:19:05,700
vulnerable it should create a ticket

506
00:19:05,700 --> 00:19:08,120
with the subject being my email address

507
00:19:08,120 --> 00:19:10,200
which actually ended up working

508
00:19:10,200 --> 00:19:12,480
indicating that the spurnability exists

509
00:19:12,480 --> 00:19:15,120
forward on GitHub so next thing was to

510
00:19:15,120 --> 00:19:17,100
just figure out what am I doing like

511
00:19:17,100 --> 00:19:18,960
what kind of situation is this what are

512
00:19:18,960 --> 00:19:21,960
they using in as user account so I tried

513
00:19:21,960 --> 00:19:24,480
pulling internal user info which is

514
00:19:24,480 --> 00:19:26,580
current user in this case current user

515
00:19:26,580 --> 00:19:28,500
being the user that's actually creating

516
00:19:28,500 --> 00:19:31,320
the ticket and we can pretty much

517
00:19:31,320 --> 00:19:32,400
guarantee at that point that it's

518
00:19:32,400 --> 00:19:34,980
running as an admin account uh through a

519
00:19:34,980 --> 00:19:36,480
bot account so it kind of confirmed that

520
00:19:36,480 --> 00:19:38,640
okay GitHub is using tickets API would

521
00:19:38,640 --> 00:19:40,620
send us in the back because the zendes

522
00:19:40,620 --> 00:19:42,360
placeholders are working and I'm able to

523
00:19:42,360 --> 00:19:44,100
pull the information there

524
00:19:44,100 --> 00:19:46,440
next was to see if there's any kind of

525
00:19:46,440 --> 00:19:49,380
interesting info on internal comments so

526
00:19:49,380 --> 00:19:51,360
when you actually dump ticket comments

527
00:19:51,360 --> 00:19:53,820
for GitHub it had both external and

528
00:19:53,820 --> 00:19:56,100
internal comments internal comments in

529
00:19:56,100 --> 00:19:57,840
this case was mainly just internal links

530
00:19:57,840 --> 00:19:59,220
that GitHub will provide to their

531
00:19:59,220 --> 00:20:01,080
support agents to say hey like if you

532
00:20:01,080 --> 00:20:03,600
want to check is this user spamming go

533
00:20:03,600 --> 00:20:05,400
to this link and check for that if you

534
00:20:05,400 --> 00:20:06,900
want to check their most recent activity

535
00:20:06,900 --> 00:20:08,520
you can go to our Enterprise Center

536
00:20:08,520 --> 00:20:10,860
instance pull this username and it will

537
00:20:10,860 --> 00:20:12,960
give you details of that as well

538
00:20:12,960 --> 00:20:15,720
but this didn't really feel the void of

539
00:20:15,720 --> 00:20:18,360
what impact can I actually sow to GitHub

540
00:20:18,360 --> 00:20:21,120
uh so far I can pull internal URLs

541
00:20:21,120 --> 00:20:24,179
internal user email address of the bot

542
00:20:24,179 --> 00:20:26,100
user and then also agent information

543
00:20:26,100 --> 00:20:28,559
whenever agents are responding but I was

544
00:20:28,559 --> 00:20:30,480
looking more towards pulling the user

545
00:20:30,480 --> 00:20:33,000
information such as any user in GitHub

546
00:20:33,000 --> 00:20:35,400
and that's where adding CC's come to use

547
00:20:35,400 --> 00:20:37,320
so when I was looking throughout the

548
00:20:37,320 --> 00:20:39,000
portal features that are there one of

549
00:20:39,000 --> 00:20:41,280
them was you can add secondary emails

550
00:20:41,280 --> 00:20:43,140
that will then be able to access your

551
00:20:43,140 --> 00:20:44,820
tickets so ideally if you're an

552
00:20:44,820 --> 00:20:46,440
organization it will make sense to add

553
00:20:46,440 --> 00:20:48,419
secondary emails to your ticket so they

554
00:20:48,419 --> 00:20:50,880
can respond to your tickets or organizes

555
00:20:50,880 --> 00:20:52,980
and tickets there

556
00:20:52,980 --> 00:20:55,260
but going back knowing that their

557
00:20:55,260 --> 00:20:57,059
species available and looking

558
00:20:57,059 --> 00:20:59,640
specifically at the tickets object we

559
00:20:59,640 --> 00:21:01,980
know that CC's Fields exist which

560
00:21:01,980 --> 00:21:03,840
contains an array of future objects so

561
00:21:03,840 --> 00:21:06,419
I'm not just limited to Gathering first

562
00:21:06,419 --> 00:21:08,340
name last name I can gather more than

563
00:21:08,340 --> 00:21:11,640
that with that I basically created a

564
00:21:11,640 --> 00:21:13,500
ticket with the secondary user being my

565
00:21:13,500 --> 00:21:16,559
test account and then use CC's as a way

566
00:21:16,559 --> 00:21:18,539
to pull information regarding that

567
00:21:18,539 --> 00:21:20,700
specific account granted with GitHub

568
00:21:20,700 --> 00:21:22,140
there wasn't a lot of exciting stuff

569
00:21:22,140 --> 00:21:24,120
there it was still able to pull the

570
00:21:24,120 --> 00:21:26,160
basics that GitHub had on zendest

571
00:21:26,160 --> 00:21:28,799
regarding my Victim account you can then

572
00:21:28,799 --> 00:21:30,780
use like a for Loop to go through every

573
00:21:30,780 --> 00:21:33,419
single CC's user so in github's case

574
00:21:33,419 --> 00:21:35,159
since the UI already has it you can add

575
00:21:35,159 --> 00:21:37,200
multiple email address full user

576
00:21:37,200 --> 00:21:39,240
information all at once making it kind

577
00:21:39,240 --> 00:21:41,520
of easier to extract or mass extract

578
00:21:41,520 --> 00:21:44,460
user data you can also specifically call

579
00:21:44,460 --> 00:21:46,980
Custom Fields just with the direct call

580
00:21:46,980 --> 00:21:49,679
to it or by using a for Loop now that

581
00:21:49,679 --> 00:21:51,480
was GitHub there but there were other

582
00:21:51,480 --> 00:21:54,360
more companies this one is redacted I

583
00:21:54,360 --> 00:21:55,799
cannot directly mention the company that

584
00:21:55,799 --> 00:21:58,320
was vulnerable but they also had moved

585
00:21:58,320 --> 00:22:01,140
away from zendesk to a support system or

586
00:22:01,140 --> 00:22:03,059
their own support system that requires

587
00:22:03,059 --> 00:22:04,980
their authentication and then create a

588
00:22:04,980 --> 00:22:07,440
ticket which ends up going to zendesk

589
00:22:07,440 --> 00:22:09,900
when I noticed they had recently changed

590
00:22:09,900 --> 00:22:11,760
I gave it a shot and see if they were

591
00:22:11,760 --> 00:22:13,740
vulnerable so the first test was to

592
00:22:13,740 --> 00:22:16,440
create a subject with the messes and

593
00:22:16,440 --> 00:22:19,679
then put together ID so ideally if it is

594
00:22:19,679 --> 00:22:21,900
vulnerable this one should be pulling

595
00:22:21,900 --> 00:22:23,940
the current ID and sending me an email

596
00:22:23,940 --> 00:22:26,520
and that's exactly what happened so kind

597
00:22:26,520 --> 00:22:28,260
of breaking it down in the back of what

598
00:22:28,260 --> 00:22:31,140
had happened is this specific form would

599
00:22:31,140 --> 00:22:33,600
send a request in the back end to zendes

600
00:22:33,600 --> 00:22:36,419
tickets API which would then as we

601
00:22:36,419 --> 00:22:38,280
noticed before there will be two fields

602
00:22:38,280 --> 00:22:40,260
to it which will be subject and raw

603
00:22:40,260 --> 00:22:42,480
subject the subject value will change

604
00:22:42,480 --> 00:22:45,240
from ticket.id to actually three one

605
00:22:45,240 --> 00:22:47,580
nine two eight nine eight one which then

606
00:22:47,580 --> 00:22:49,320
gets added to an email trigger in

607
00:22:49,320 --> 00:22:51,320
zendesk which will say

608
00:22:51,320 --> 00:22:53,820
re-placeholder ticket.subject we got our

609
00:22:53,820 --> 00:22:55,080
ticket thank you for letting us know

610
00:22:55,080 --> 00:22:57,000
we'll get back to you soon and that's

611
00:22:57,000 --> 00:22:59,400
where the automated filling came into

612
00:22:59,400 --> 00:23:01,440
place there as well

613
00:23:01,440 --> 00:23:03,299
next thing was when I was going through

614
00:23:03,299 --> 00:23:04,980
the request I wanted to pull user

615
00:23:04,980 --> 00:23:07,020
information to it and I basically

616
00:23:07,020 --> 00:23:09,240
noticed that it was sending a graphql

617
00:23:09,240 --> 00:23:11,120
request and if we look at the mutation

618
00:23:11,120 --> 00:23:14,640
calls the variables had a cc variable

619
00:23:14,640 --> 00:23:16,320
that it could pass in with an array of

620
00:23:16,320 --> 00:23:18,059
email addresses and these are

621
00:23:18,059 --> 00:23:19,740
necessarily all secondary users we're

622
00:23:19,740 --> 00:23:22,440
adding in further down

623
00:23:22,440 --> 00:23:24,780
where basically if I added a victim

624
00:23:24,780 --> 00:23:27,299
email address it would pull the

625
00:23:27,299 --> 00:23:29,159
information of that user and then send

626
00:23:29,159 --> 00:23:31,620
me that so in this case I specifically

627
00:23:31,620 --> 00:23:34,260
called custom fields and it only gave me

628
00:23:34,260 --> 00:23:35,940
the fields Associated to that user

629
00:23:35,940 --> 00:23:37,740
account which is a little bit more than

630
00:23:37,740 --> 00:23:39,659
what the subject header could fill in so

631
00:23:39,659 --> 00:23:41,640
you could also use a for Loop there to

632
00:23:41,640 --> 00:23:43,980
only pull a specific key value or only

633
00:23:43,980 --> 00:23:46,080
list all the keys and then based on that

634
00:23:46,080 --> 00:23:48,480
access that specific key and see what

635
00:23:48,480 --> 00:23:50,820
information it had one thing I noticed

636
00:23:50,820 --> 00:23:53,159
here is not just for regular users but

637
00:23:53,159 --> 00:23:54,840
for agents you could pull more

638
00:23:54,840 --> 00:23:56,400
information than just their first name

639
00:23:56,400 --> 00:23:58,440
last name and email for example with

640
00:23:58,440 --> 00:24:00,120
custom Fields they already had employee

641
00:24:00,120 --> 00:24:02,159
ID their start date end date all of that

642
00:24:02,159 --> 00:24:04,440
their last login and more informations

643
00:24:04,440 --> 00:24:06,179
there

644
00:24:06,179 --> 00:24:09,900
finally for send us the last example

645
00:24:09,900 --> 00:24:11,520
this one actually ended up having more

646
00:24:11,520 --> 00:24:13,500
impact than

647
00:24:13,500 --> 00:24:16,620
was uh like kind of what I thought it

648
00:24:16,620 --> 00:24:19,200
would be so basically I was looking at

649
00:24:19,200 --> 00:24:21,299
this company and they had created a

650
00:24:21,299 --> 00:24:24,059
business partner portal kind of pace it

651
00:24:24,059 --> 00:24:25,919
was being hosted in Salesforce so I was

652
00:24:25,919 --> 00:24:27,240
looking mainly for Salesforce

653
00:24:27,240 --> 00:24:29,580
vulnerabilities there but during that

654
00:24:29,580 --> 00:24:31,740
time I noticed it was also using zendesk

655
00:24:31,740 --> 00:24:33,059
because every time I will make a ticket

656
00:24:33,059 --> 00:24:35,520
on Salesforce it will end up emailing me

657
00:24:35,520 --> 00:24:37,200
via send this so there was something

658
00:24:37,200 --> 00:24:39,600
weird going on which later on I

659
00:24:39,600 --> 00:24:41,220
identified that it was using a

660
00:24:41,220 --> 00:24:43,080
third-party integration so they hadn't

661
00:24:43,080 --> 00:24:44,940
actually written their own API calls

662
00:24:44,940 --> 00:24:47,280
they were directly using a third-party

663
00:24:47,280 --> 00:24:49,260
product to link Salesforce to their

664
00:24:49,260 --> 00:24:51,840
zendas as well as their chat models uh

665
00:24:51,840 --> 00:24:53,340
they also had like Facebook and Twitter

666
00:24:53,340 --> 00:24:54,720
messages and all of that and everything

667
00:24:54,720 --> 00:24:56,580
was being linked to one place through

668
00:24:56,580 --> 00:24:58,880
this integration

669
00:24:58,880 --> 00:25:01,320
you could do at that point is create a

670
00:25:01,320 --> 00:25:03,480
ticket and basically pull the current

671
00:25:03,480 --> 00:25:04,919
user information and the Agency

672
00:25:04,919 --> 00:25:07,080
information so for this one I couldn't

673
00:25:07,080 --> 00:25:09,480
really pull other user information but I

674
00:25:09,480 --> 00:25:12,059
could put like agents activity uh agent

675
00:25:12,059 --> 00:25:13,320
notes and all of that for different

676
00:25:13,320 --> 00:25:15,960
agents but then also dumping the email

677
00:25:15,960 --> 00:25:17,640
address of the current user gave away

678
00:25:17,640 --> 00:25:19,980
that it was using an integration which

679
00:25:19,980 --> 00:25:22,919
uh when looking at the impact it ended

680
00:25:22,919 --> 00:25:24,360
up roughly impacting more than 100

681
00:25:24,360 --> 00:25:26,460
companies so this third party

682
00:25:26,460 --> 00:25:29,460
integration specifically uh it has about

683
00:25:29,460 --> 00:25:32,520
6 000 customers however when directly

684
00:25:32,520 --> 00:25:34,740
looking at how minis were linking to

685
00:25:34,740 --> 00:25:36,480
things like Salesforce to zendus and

686
00:25:36,480 --> 00:25:38,940
whatnot there were only 100 250

687
00:25:38,940 --> 00:25:40,860
companies that were vulnerable to this

688
00:25:40,860 --> 00:25:42,659
specific case

689
00:25:42,659 --> 00:25:44,340
um and then kind of looking at the root

690
00:25:44,340 --> 00:25:46,200
cause it basically turned out to be the

691
00:25:46,200 --> 00:25:48,419
same case where it was calling zenda's

692
00:25:48,419 --> 00:25:51,000
tickets API you'll pass in an API key to

693
00:25:51,000 --> 00:25:52,620
it so it will create a ticket based on

694
00:25:52,620 --> 00:25:55,140
that uh put the user information and

695
00:25:55,140 --> 00:25:57,000
then any company that had their own

696
00:25:57,000 --> 00:25:58,559
customer support pay so you could see

697
00:25:58,559 --> 00:26:02,039
that information Auto filled in

698
00:26:02,039 --> 00:26:04,559
now that said that kind of wraps the

699
00:26:04,559 --> 00:26:06,600
zendes case we'll move to Salesforce but

700
00:26:06,600 --> 00:26:09,720
before that a quick flag again is this

701
00:26:09,720 --> 00:26:11,580
is not a vulnerability in zendus it's

702
00:26:11,580 --> 00:26:13,620
more of how these Integrations worked

703
00:26:13,620 --> 00:26:15,659
and same thing happens with Salesforce

704
00:26:15,659 --> 00:26:18,000
does the caveat with Salesforce being

705
00:26:18,000 --> 00:26:20,640
that it's kind of harder to exploit uh

706
00:26:20,640 --> 00:26:23,520
versus when we compare it to zendesk so

707
00:26:23,520 --> 00:26:26,700
Salesforce does have a case where you

708
00:26:26,700 --> 00:26:28,799
can do placeholder kind of attacks or

709
00:26:28,799 --> 00:26:30,600
placeholder injections it has

710
00:26:30,600 --> 00:26:33,539
placeholders support but it also has

711
00:26:33,539 --> 00:26:35,460
some limitations on how it can actually

712
00:26:35,460 --> 00:26:38,220
be used so for example it has

713
00:26:38,220 --> 00:26:39,840
suppressants in place that are more

714
00:26:39,840 --> 00:26:42,480
restrictive than set desk so in zenda's

715
00:26:42,480 --> 00:26:44,400
cases we had separations on this end

716
00:26:44,400 --> 00:26:46,740
user ticket creation uh or ticket

717
00:26:46,740 --> 00:26:49,020
updates but in this case it was also

718
00:26:49,020 --> 00:26:51,360
impacting or it was limiting uh uses of

719
00:26:51,360 --> 00:26:53,400
placeholders unless they're being

720
00:26:53,400 --> 00:26:55,860
directly used through the Salesforce UI

721
00:26:55,860 --> 00:26:58,980
or to a specific API calls

722
00:26:58,980 --> 00:27:00,900
the one good thing about Salesforce

723
00:27:00,900 --> 00:27:02,880
though is it has access to way more

724
00:27:02,880 --> 00:27:05,220
information than sendisk when we think

725
00:27:05,220 --> 00:27:07,860
of zendesk it's purely support system

726
00:27:07,860 --> 00:27:09,659
there isn't much going on else there

727
00:27:09,659 --> 00:27:12,000
versus if we compare it to Salesforce it

728
00:27:12,000 --> 00:27:14,580
has access to marketing leads user

729
00:27:14,580 --> 00:27:16,260
information support bases health

730
00:27:16,260 --> 00:27:18,120
information what not depending on what

731
00:27:18,120 --> 00:27:20,340
the company is using it for so the level

732
00:27:20,340 --> 00:27:22,320
of information that can be accessed with

733
00:27:22,320 --> 00:27:25,919
this was pretty exponential there

734
00:27:25,919 --> 00:27:28,980
it is as I mentioned before kind of hard

735
00:27:28,980 --> 00:27:31,919
to exploit so it kind of works via forms

736
00:27:31,919 --> 00:27:34,679
like we saw examples with GitHub or

737
00:27:34,679 --> 00:27:36,659
other cases in zendesk but for

738
00:27:36,659 --> 00:27:38,400
Salesforce it's kind of hard to exploit

739
00:27:38,400 --> 00:27:40,440
there and it requires a specific use

740
00:27:40,440 --> 00:27:43,020
case via email addresses or directly via

741
00:27:43,020 --> 00:27:45,360
sending email and then also most of the

742
00:27:45,360 --> 00:27:47,340
automations are sanitized so with

743
00:27:47,340 --> 00:27:49,740
zendesk exploit was pretty instantaneous

744
00:27:49,740 --> 00:27:52,440
you don't even need a user agent or

745
00:27:52,440 --> 00:27:54,480
customer agent to get back to you you

746
00:27:54,480 --> 00:27:56,520
can just see that email with the exploit

747
00:27:56,520 --> 00:27:58,740
run it right in place and you don't have

748
00:27:58,740 --> 00:28:01,559
to necessarily do anything there

749
00:28:01,559 --> 00:28:03,360
but in Salesforce cases it was more

750
00:28:03,360 --> 00:28:05,400
sanitized and it requires a level of

751
00:28:05,400 --> 00:28:07,260
social engineering now the social

752
00:28:07,260 --> 00:28:09,179
engineering part here is not necessarily

753
00:28:09,179 --> 00:28:11,940
things where I had to tell a support

754
00:28:11,940 --> 00:28:13,740
person like hey put this placeholder and

755
00:28:13,740 --> 00:28:15,539
send me an email but more of kind of

756
00:28:15,539 --> 00:28:17,039
sneaking in the placeholder in your

757
00:28:17,039 --> 00:28:19,080
email body and then waiting for the

758
00:28:19,080 --> 00:28:20,940
customer reason to respond to you which

759
00:28:20,940 --> 00:28:22,500
will then autofill the placeholder

760
00:28:22,500 --> 00:28:25,140
information there

761
00:28:25,140 --> 00:28:27,179
um similar to zendesk Salesforce also

762
00:28:27,179 --> 00:28:29,279
has quite a bit of objects in this

763
00:28:29,279 --> 00:28:30,419
presentation I'm going to cover

764
00:28:30,419 --> 00:28:32,460
specifically two objects user and

765
00:28:32,460 --> 00:28:34,919
tickets or user and cases but there is

766
00:28:34,919 --> 00:28:36,840
about 25 different objects that you can

767
00:28:36,840 --> 00:28:38,880
access via placeholders and they are

768
00:28:38,880 --> 00:28:41,220
kind of linked between each other so if

769
00:28:41,220 --> 00:28:43,500
you're interested on that Salesforce has

770
00:28:43,500 --> 00:28:45,720
a visual Force Base where you can learn

771
00:28:45,720 --> 00:28:47,640
about their templating design their

772
00:28:47,640 --> 00:28:49,919
placeholders and how they can be used

773
00:28:49,919 --> 00:28:52,679
if we directly look at user objects in

774
00:28:52,679 --> 00:28:54,480
Salesforce even just the limited access

775
00:28:54,480 --> 00:28:57,299
there's name email address Mobile

776
00:28:57,299 --> 00:29:00,480
account ID and contact ID while I have

777
00:29:00,480 --> 00:29:03,779
seven here there's about 15 other fields

778
00:29:03,779 --> 00:29:05,760
that you can access as a user so there's

779
00:29:05,760 --> 00:29:07,380
more sensitive information those could

780
00:29:07,380 --> 00:29:09,659
be accessed but name and email address

781
00:29:09,659 --> 00:29:12,779
are pretty giveaway address in itself

782
00:29:12,779 --> 00:29:14,820
it's kind of new right now so previously

783
00:29:14,820 --> 00:29:17,059
you could access street address city

784
00:29:17,059 --> 00:29:19,380
state and then the country of the

785
00:29:19,380 --> 00:29:21,539
associated user but now it has moved

786
00:29:21,539 --> 00:29:24,059
more into the Beta access to Beta access

787
00:29:24,059 --> 00:29:25,860
where you can just use address to

788
00:29:25,860 --> 00:29:29,340
autofill all of that information at once

789
00:29:29,340 --> 00:29:33,000
now if we look at case object it is kind

790
00:29:33,000 --> 00:29:34,980
of similar to zendesk you have a case ID

791
00:29:34,980 --> 00:29:38,460
you have owner contact ID priority and

792
00:29:38,460 --> 00:29:41,220
thread token as well as description the

793
00:29:41,220 --> 00:29:42,779
thing to highlight about the owner is

794
00:29:42,779 --> 00:29:44,580
specific the reason I put underscore

795
00:29:44,580 --> 00:29:46,200
there is because there's other

796
00:29:46,200 --> 00:29:48,419
information you could access with owner

797
00:29:48,419 --> 00:29:51,240
so for example you could do case.owner

798
00:29:51,240 --> 00:29:53,940
email case.owner address so it's kind of

799
00:29:53,940 --> 00:29:56,279
like accessing user object but it's

800
00:29:56,279 --> 00:29:57,899
already linked so you don't necessarily

801
00:29:57,899 --> 00:30:00,620
have to do that

802
00:30:00,720 --> 00:30:02,820
now if we were to see examples of

803
00:30:02,820 --> 00:30:04,620
placeholder wise there is things like

804
00:30:04,620 --> 00:30:07,140
case ID it kind of changes if you notice

805
00:30:07,140 --> 00:30:08,880
on the design for zendes versus

806
00:30:08,880 --> 00:30:11,580
Salesforce so it required a little bit

807
00:30:11,580 --> 00:30:13,080
of resource there as well and then

808
00:30:13,080 --> 00:30:15,779
there's user email case owner emails and

809
00:30:15,779 --> 00:30:17,640
account billing address so if you'll

810
00:30:17,640 --> 00:30:19,559
notice as I mentioned before user and

811
00:30:19,559 --> 00:30:22,140
case are couple objects example but

812
00:30:22,140 --> 00:30:24,120
there's like 25 other objects account

813
00:30:24,120 --> 00:30:27,360
being a one so what happens similar to

814
00:30:27,360 --> 00:30:29,880
zendesk is if you create a case your

815
00:30:29,880 --> 00:30:31,740
user account if it already exists can

816
00:30:31,740 --> 00:30:33,779
have other information associated with

817
00:30:33,779 --> 00:30:36,120
it and that are the objects that you can

818
00:30:36,120 --> 00:30:38,279
access separately and those could have

819
00:30:38,279 --> 00:30:40,440
more sensitive informations to it

820
00:30:40,440 --> 00:30:43,020
uh if we look at it from a agent point

821
00:30:43,020 --> 00:30:44,940
of view if you create a ticket so in

822
00:30:44,940 --> 00:30:46,559
this case let's say O'Reilly has created

823
00:30:46,559 --> 00:30:48,720
a ticket their account can have more

824
00:30:48,720 --> 00:30:50,700
information than just their regular info

825
00:30:50,700 --> 00:30:52,860
like phone number email and whatnot they

826
00:30:52,860 --> 00:30:54,840
can also have an account associated with

827
00:30:54,840 --> 00:30:56,940
them which is what account dot billing

828
00:30:56,940 --> 00:30:58,860
address later is used so in this case

829
00:30:58,860 --> 00:31:01,140
Riley has an account called trial render

830
00:31:01,140 --> 00:31:04,020
which if we look at has its own billing

831
00:31:04,020 --> 00:31:05,820
address and phone number associated to

832
00:31:05,820 --> 00:31:08,520
it in addition to that an account can

833
00:31:08,520 --> 00:31:11,700
also then have access to other contacts

834
00:31:11,700 --> 00:31:13,740
so from ryler's account you can move

835
00:31:13,740 --> 00:31:15,720
into the specific account they're linked

836
00:31:15,720 --> 00:31:17,100
to or the business account they're

837
00:31:17,100 --> 00:31:19,140
linked to and that business account has

838
00:31:19,140 --> 00:31:21,000
its own contacts information which can

839
00:31:21,000 --> 00:31:23,880
then be autofilled as well

840
00:31:23,880 --> 00:31:26,760
so if we look at from a example similar

841
00:31:26,760 --> 00:31:28,980
to how we looked at with zendesk you can

842
00:31:28,980 --> 00:31:32,460
basically uh respond to a user via sales

843
00:31:32,460 --> 00:31:34,980
versus own UI feature where there you

844
00:31:34,980 --> 00:31:37,080
can have a placeholder be used which

845
00:31:37,080 --> 00:31:39,179
then gets auto field so you can see for

846
00:31:39,179 --> 00:31:40,799
O'Reilly's we can then pull their

847
00:31:40,799 --> 00:31:42,659
account information autofill that on the

848
00:31:42,659 --> 00:31:44,820
email response

849
00:31:44,820 --> 00:31:47,039
um this kind of is a design of how

850
00:31:47,039 --> 00:31:48,840
Salesforce Works looking for

851
00:31:48,840 --> 00:31:50,760
vulnerabilities specifically I tried

852
00:31:50,760 --> 00:31:53,340
about five different cases both ranging

853
00:31:53,340 --> 00:31:55,159
from automation to workflow automations

854
00:31:55,159 --> 00:31:57,539
automated response users and response

855
00:31:57,539 --> 00:32:00,059
and whatnot and one that is quite common

856
00:32:00,059 --> 00:32:03,299
and is always going to be vulnerable is

857
00:32:03,299 --> 00:32:05,700
whenever there's a email header being

858
00:32:05,700 --> 00:32:07,980
used called quick action email this kind

859
00:32:07,980 --> 00:32:10,020
of identifies where the email originated

860
00:32:10,020 --> 00:32:12,419
from in Salesforce which is pretty much

861
00:32:12,419 --> 00:32:14,159
the same place that we are seeing here

862
00:32:14,159 --> 00:32:15,960
which is the email body response that

863
00:32:15,960 --> 00:32:18,059
Salesforce has pre-built into the

864
00:32:18,059 --> 00:32:20,220
service Cloud if you are testing against

865
00:32:20,220 --> 00:32:22,140
things that could be using things like

866
00:32:22,140 --> 00:32:24,600
workflow automations or any kind of

867
00:32:24,600 --> 00:32:26,399
other alerts they're most likely not

868
00:32:26,399 --> 00:32:28,320
going to be vulnerable and that is where

869
00:32:28,320 --> 00:32:30,899
like it's kind of gets hard to impact a

870
00:32:30,899 --> 00:32:32,820
Salesforce instance versus a zendesk

871
00:32:32,820 --> 00:32:35,100
where for zendeska test most likely will

872
00:32:35,100 --> 00:32:37,919
work if they're using a custom portal

873
00:32:37,919 --> 00:32:40,500
now the first exploit for Salesforce

874
00:32:40,500 --> 00:32:43,260
itself uh kind of comes from the social

875
00:32:43,260 --> 00:32:45,419
engineering point of view so this is

876
00:32:45,419 --> 00:32:47,039
where I mentioned before is it kind of

877
00:32:47,039 --> 00:32:49,500
requires uh you to wait for the agent to

878
00:32:49,500 --> 00:32:52,140
respond and sneak in a placeholder and

879
00:32:52,140 --> 00:32:54,000
the kind of a clever way to do that is

880
00:32:54,000 --> 00:32:56,760
by using white space fonts so if we look

881
00:32:56,760 --> 00:32:58,260
at in an email address you can change

882
00:32:58,260 --> 00:33:00,120
the font spellings font colors whatnot

883
00:33:00,120 --> 00:33:02,760
uh doing that it's also reflected

884
00:33:02,760 --> 00:33:05,039
directly in Salesforce so from a

885
00:33:05,039 --> 00:33:06,899
attacker point of view you can sneak in

886
00:33:06,899 --> 00:33:09,120
placeholders wait for the easing to

887
00:33:09,120 --> 00:33:11,039
respond and then pull agents information

888
00:33:11,039 --> 00:33:13,559
so this one specifically only works if

889
00:33:13,559 --> 00:33:14,820
we're trying to pull the Asian

890
00:33:14,820 --> 00:33:17,179
information not other users information

891
00:33:17,179 --> 00:33:19,799
for Asians itself it kind of gets

892
00:33:19,799 --> 00:33:21,240
impactful because you can then pull

893
00:33:21,240 --> 00:33:22,700
their addresses their information

894
00:33:22,700 --> 00:33:24,720
accounts that are linked to them and

895
00:33:24,720 --> 00:33:26,399
then also contacts info so kind of

896
00:33:26,399 --> 00:33:28,500
spread from there

897
00:33:28,500 --> 00:33:31,080
what it will look like from a agent

898
00:33:31,080 --> 00:33:33,600
point of view is when you respond to a

899
00:33:33,600 --> 00:33:35,460
ticket you will have this responded

900
00:33:35,460 --> 00:33:37,320
directly from email it's pretty

901
00:33:37,320 --> 00:33:40,500
identical to just doing a reply all in a

902
00:33:40,500 --> 00:33:42,960
Gmail instance or Yahoo it will append

903
00:33:42,960 --> 00:33:45,000
the previous email of the user and then

904
00:33:45,000 --> 00:33:46,679
that information gets sent to the user

905
00:33:46,679 --> 00:33:48,720
which if you retrieve your email and

906
00:33:48,720 --> 00:33:50,340
look at the highlighted person it

907
00:33:50,340 --> 00:33:52,380
automatically Fields it so in my case I

908
00:33:52,380 --> 00:33:54,360
just ran a test with case ID to see if I

909
00:33:54,360 --> 00:33:55,740
can actually pull certain informations

910
00:33:55,740 --> 00:33:57,899
and what not there

911
00:33:57,899 --> 00:34:00,000
um the other one is a more redacted case

912
00:34:00,000 --> 00:34:02,820
again of a company that was furnival and

913
00:34:02,820 --> 00:34:04,500
similar to zendesk or similar to other

914
00:34:04,500 --> 00:34:06,659
Orcs that were vulnerable they had also

915
00:34:06,659 --> 00:34:08,580
created a custom support base where you

916
00:34:08,580 --> 00:34:11,040
could email experts uh and ask for a

917
00:34:11,040 --> 00:34:12,659
question regarding your account and

918
00:34:12,659 --> 00:34:15,179
account help and what not there but it

919
00:34:15,179 --> 00:34:16,859
basically if you look at the email

920
00:34:16,859 --> 00:34:19,500
response it was indicating it was using

921
00:34:19,500 --> 00:34:21,899
something like an email reply that

922
00:34:21,899 --> 00:34:25,139
Salesforce had looking at the header

923
00:34:25,139 --> 00:34:27,599
it had the same thing which was the

924
00:34:27,599 --> 00:34:30,000
quick action email knowing that I wanted

925
00:34:30,000 --> 00:34:31,679
to see if I could test it so this is

926
00:34:31,679 --> 00:34:33,300
where again the social engineering kind

927
00:34:33,300 --> 00:34:35,820
of comes in is I send a ticket in with

928
00:34:35,820 --> 00:34:37,080
just saying how do I resend my account

929
00:34:37,080 --> 00:34:40,560
info uh provided user.email which then

930
00:34:40,560 --> 00:34:42,418
when they responded included their email

931
00:34:42,418 --> 00:34:44,099
address of the agent even though that's

932
00:34:44,099 --> 00:34:46,260
not by default available on Salesforce

933
00:34:46,260 --> 00:34:48,719
or I can't see the agent email this

934
00:34:48,719 --> 00:34:50,879
actually ended up working there as well

935
00:34:50,879 --> 00:34:52,560
this could then be leveraged to pull

936
00:34:52,560 --> 00:34:54,060
their address

937
00:34:54,060 --> 00:34:57,599
the final exploit case for Salesforce

938
00:34:57,599 --> 00:34:59,580
would be the CC with the twist in a

939
00:34:59,580 --> 00:35:03,359
sense uh so in genesk we exploited cc to

940
00:35:03,359 --> 00:35:05,940
pull the secondary user information here

941
00:35:05,940 --> 00:35:07,980
instead we want to be the user that's

942
00:35:07,980 --> 00:35:11,160
getting cc'd and then link a victim user

943
00:35:11,160 --> 00:35:12,780
as the main account when we are creating

944
00:35:12,780 --> 00:35:15,180
a ticket so in this case this specific

945
00:35:15,180 --> 00:35:18,000
company you could create a ticket with

946
00:35:18,000 --> 00:35:20,040
an email address and then also add a

947
00:35:20,040 --> 00:35:22,200
list of cc'd users who should be getting

948
00:35:22,200 --> 00:35:24,960
updates so in our case we ideally want

949
00:35:24,960 --> 00:35:28,320
to link our account as cc'd and then the

950
00:35:28,320 --> 00:35:29,820
main user account or the victim account

951
00:35:29,820 --> 00:35:32,220
in the email address what happens here

952
00:35:32,220 --> 00:35:34,380
is every time they're emailed we get a

953
00:35:34,380 --> 00:35:36,960
copy of it and if we are using a certain

954
00:35:36,960 --> 00:35:38,820
placeholder in description or other

955
00:35:38,820 --> 00:35:41,220
cases it will autofill their information

956
00:35:41,220 --> 00:35:43,440
rather than ours so we're extracting

957
00:35:43,440 --> 00:35:45,660
those info without them directly having

958
00:35:45,660 --> 00:35:48,540
an interaction there this again requires

959
00:35:48,540 --> 00:35:50,760
the agent to respond so in general for

960
00:35:50,760 --> 00:35:53,280
Salesforce you need a agent response for

961
00:35:53,280 --> 00:35:56,540
the exploit to fully work

962
00:35:56,700 --> 00:35:59,040
this is what the regular exploit will

963
00:35:59,040 --> 00:36:01,859
look like in that case

964
00:36:01,859 --> 00:36:04,079
that said that was pretty much the two

965
00:36:04,079 --> 00:36:06,180
specific cases however there are more

966
00:36:06,180 --> 00:36:08,880
support systems worth taking a look at

967
00:36:08,880 --> 00:36:10,920
um I did spend some time looking at zero

968
00:36:10,920 --> 00:36:13,079
service desk it does have placeholders

969
00:36:13,079 --> 00:36:15,119
in place but it is way more sanitized

970
00:36:15,119 --> 00:36:18,060
and harder to exploit uh for example if

971
00:36:18,060 --> 00:36:19,680
you just send an email with placeholders

972
00:36:19,680 --> 00:36:21,720
even though you are already a user in

973
00:36:21,720 --> 00:36:23,700
that jira instance and it is a internal

974
00:36:23,700 --> 00:36:25,859
system it doesn't automatically fill

975
00:36:25,859 --> 00:36:28,020
that details there

976
00:36:28,020 --> 00:36:30,660
same thing kind of a servicenow you can

977
00:36:30,660 --> 00:36:33,060
do the agent exploit technique similar

978
00:36:33,060 --> 00:36:35,040
to how Salesforce would work but it

979
00:36:35,040 --> 00:36:36,359
won't automatically fill the information

980
00:36:36,359 --> 00:36:39,359
there either so not uh not much of these

981
00:36:39,359 --> 00:36:41,820
systems were as easy as the cases for

982
00:36:41,820 --> 00:36:43,800
Gen disks where we could directly pull

983
00:36:43,800 --> 00:36:46,980
user data there even for Salesforce it

984
00:36:46,980 --> 00:36:49,500
has a lot of API calls there are places

985
00:36:49,500 --> 00:36:52,079
where you can directly design a form to

986
00:36:52,079 --> 00:36:54,540
access the API and then pull user

987
00:36:54,540 --> 00:36:56,579
information based on that so those could

988
00:36:56,579 --> 00:36:58,200
still be vulnerable I didn't have the

989
00:36:58,200 --> 00:36:59,940
time to directly look at it so it is

990
00:36:59,940 --> 00:37:02,520
potential future places towards spending

991
00:37:02,520 --> 00:37:03,660
efforts there

992
00:37:03,660 --> 00:37:06,540
that also there are other support

993
00:37:06,540 --> 00:37:08,579
systems so there's like help Scout rest

994
00:37:08,579 --> 00:37:10,680
desk and others that are maybe still

995
00:37:10,680 --> 00:37:12,119
vulnerable it depends on how they are

996
00:37:12,119 --> 00:37:14,220
used what kind of apis they have for

997
00:37:14,220 --> 00:37:16,079
example I know freshdesk is kind of

998
00:37:16,079 --> 00:37:18,420
identical to how zendesk works so maybe

999
00:37:18,420 --> 00:37:20,339
that also supports placeholder that

1000
00:37:20,339 --> 00:37:22,320
could be exploited there's also

1001
00:37:22,320 --> 00:37:24,240
marketing things that are available that

1002
00:37:24,240 --> 00:37:26,400
use similar technique and in the end

1003
00:37:26,400 --> 00:37:28,560
also chat Services where you can

1004
00:37:28,560 --> 00:37:30,839
automatically chat with an agent tend to

1005
00:37:30,839 --> 00:37:32,700
usually have placeholders there so if

1006
00:37:32,700 --> 00:37:34,380
you are extracting your ticket history

1007
00:37:34,380 --> 00:37:36,540
or chat history you most likely can't

1008
00:37:36,540 --> 00:37:39,920
pull those informations there too

1009
00:37:40,140 --> 00:37:42,240
um that said this wraps up the

1010
00:37:42,240 --> 00:37:44,940
presentation if anyone has any questions

1011
00:37:44,940 --> 00:37:46,859
I'm happy to answer them you can also

1012
00:37:46,859 --> 00:37:49,500
send me a message on Twitter asking for

1013
00:37:49,500 --> 00:37:51,119
any questions you may have or feedbacks

1014
00:37:51,119 --> 00:37:54,500
that if you have any as well

1015
00:38:00,119 --> 00:38:02,820
do we have questions from the audience

1016
00:38:02,820 --> 00:38:05,300
nope

1017
00:38:17,280 --> 00:38:18,960
thank you

1018
00:38:18,960 --> 00:38:21,960
hey thanks for the talk uh I was curious

1019
00:38:21,960 --> 00:38:25,260
for the customers that use

1020
00:38:25,260 --> 00:38:28,140
zendesk as a backend how are you finding

1021
00:38:28,140 --> 00:38:31,079
kind of their custom Integrations like

1022
00:38:31,079 --> 00:38:34,560
fingerprinting them some way or yeah so

1023
00:38:34,560 --> 00:38:36,540
for most of the ones that I looked at it

1024
00:38:36,540 --> 00:38:38,339
was with prior experience so for example

1025
00:38:38,339 --> 00:38:40,800
GitHub was I already knew they used

1026
00:38:40,800 --> 00:38:42,839
zendes before since I had to utilize the

1027
00:38:42,839 --> 00:38:44,520
feature uh for a couple of them

1028
00:38:44,520 --> 00:38:46,200
fingerprinting did work for example

1029
00:38:46,200 --> 00:38:49,200
looking for a zendex subdomain so I'll

1030
00:38:49,200 --> 00:38:50,940
as an example like let's say if you go

1031
00:38:50,940 --> 00:38:53,339
to help.company.com if it already

1032
00:38:53,339 --> 00:38:56,880
redirects to in the path slash HC slash

1033
00:38:56,880 --> 00:39:00,359
en US which is the vanilla zendes design

1034
00:39:00,359 --> 00:39:02,339
those are usually just plain Genesis

1035
00:39:02,339 --> 00:39:04,260
there's in any customization done to it

1036
00:39:04,260 --> 00:39:06,240
so I'll just like leave them alone but

1037
00:39:06,240 --> 00:39:07,859
let's say if I go to a help page there's

1038
00:39:07,859 --> 00:39:10,140
login create tickets all of that but it

1039
00:39:10,140 --> 00:39:12,720
doesn't indicate it's using zendes or

1040
00:39:12,720 --> 00:39:14,820
Salesforce directly there it is more

1041
00:39:14,820 --> 00:39:16,560
fingerprinting like let's see if I can

1042
00:39:16,560 --> 00:39:18,359
find a Zenda subdomen with that company

1043
00:39:18,359 --> 00:39:20,520
name if it exists there's a chance they

1044
00:39:20,520 --> 00:39:22,980
may be vulnerable and then finally uh

1045
00:39:22,980 --> 00:39:24,900
creating a test ticket or something to

1046
00:39:24,900 --> 00:39:27,720
see what email response I get so for

1047
00:39:27,720 --> 00:39:30,060
example for zendesk if you look at the

1048
00:39:30,060 --> 00:39:32,280
email address it use easily has a footer

1049
00:39:32,280 --> 00:39:34,619
that says this was sent by this company

1050
00:39:34,619 --> 00:39:37,500
via zendesk same thing with Salesforce

1051
00:39:37,500 --> 00:39:39,839
if you saw the picture previously it has

1052
00:39:39,839 --> 00:39:42,599
a thread token slash like ref colon on

1053
00:39:42,599 --> 00:39:44,220
it it kind of identifies that it's

1054
00:39:44,220 --> 00:39:46,140
coming from Salesforce it also has like

1055
00:39:46,140 --> 00:39:48,240
email headers so that kind of also helps

1056
00:39:48,240 --> 00:39:50,760
to fingerprint that information there

1057
00:39:50,760 --> 00:39:52,980
great thank you no worries

1058
00:39:52,980 --> 00:39:55,520
thank you

1059
00:39:57,480 --> 00:39:59,700
any more questions

1060
00:39:59,700 --> 00:40:01,560
once

1061
00:40:01,560 --> 00:40:03,900
twice sold

1062
00:40:03,900 --> 00:40:06,240
sweet a quick note we'll also have a

1063
00:40:06,240 --> 00:40:07,859
Blog on this out but that was probably

1064
00:40:07,859 --> 00:40:09,780
going to be end of this week so there

1065
00:40:09,780 --> 00:40:13,260
will be a couple of days delay on that

1066
00:40:13,260 --> 00:40:14,780
on that thank you awesome

1067
00:40:14,780 --> 00:40:18,300
set 2023 when I thank you with this

1068
00:40:18,300 --> 00:40:20,220
token of appreciation

1069
00:40:20,220 --> 00:40:23,579
and uh thank you to our sponsorian SEC

1070
00:40:23,579 --> 00:40:24,660
thank you

1071
00:40:24,660 --> 00:40:27,259
thank you thank you everyone

