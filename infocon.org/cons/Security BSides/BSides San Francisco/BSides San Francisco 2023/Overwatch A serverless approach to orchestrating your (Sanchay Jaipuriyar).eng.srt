1
00:00:00,120 --> 00:00:02,100
hey everyone theater15 let's give it up

2
00:00:02,100 --> 00:00:05,780
for Sanchez our next speaker

3
00:00:09,059 --> 00:00:11,940
hey everyone thanks for coming to this

4
00:00:11,940 --> 00:00:14,580
talk about OverWatch my name is Sanchez

5
00:00:14,580 --> 00:00:17,400
I'm super excited to be here uh b-sides

6
00:00:17,400 --> 00:00:19,020
is where I've learned I think most of my

7
00:00:19,020 --> 00:00:20,400
security Knowledge from so it's very

8
00:00:20,400 --> 00:00:22,500
humbling and you know I'm extremely

9
00:00:22,500 --> 00:00:25,019
honored to be able to speak here today

10
00:00:25,019 --> 00:00:26,400
um before I actually talk about

11
00:00:26,400 --> 00:00:27,900
OverWatch or any of these other

12
00:00:27,900 --> 00:00:30,119
buzzwords that you see on the slide just

13
00:00:30,119 --> 00:00:31,679
with a show of hands how many of you

14
00:00:31,679 --> 00:00:33,960
have heard of the phrase shift left

15
00:00:33,960 --> 00:00:35,640
before

16
00:00:35,640 --> 00:00:37,739
okay yeah I the lights kind of bright

17
00:00:37,739 --> 00:00:39,660
but I think I saw pretty much everyone's

18
00:00:39,660 --> 00:00:42,239
hands go up and obviously shift left is

19
00:00:42,239 --> 00:00:44,340
this very powerful concept that's been

20
00:00:44,340 --> 00:00:46,800
used in our industry quite a bit and

21
00:00:46,800 --> 00:00:48,600
it's generally just to refresh

22
00:00:48,600 --> 00:00:50,460
everyone's knowledge it's this idea that

23
00:00:50,460 --> 00:00:52,860
the earlier or left that we go into the

24
00:00:52,860 --> 00:00:55,079
software development life cycle

25
00:00:55,079 --> 00:00:57,660
um the cheaper uh security bugs are to

26
00:00:57,660 --> 00:00:59,520
fix and you know just the more traction

27
00:00:59,520 --> 00:01:01,020
we get and that's fundamentally why

28
00:01:01,020 --> 00:01:02,219
we're here right we're trying to stop

29
00:01:02,219 --> 00:01:04,199
security problems before they become a

30
00:01:04,199 --> 00:01:07,320
real problem post-production and last I

31
00:01:07,320 --> 00:01:09,360
checked which was this morning AI has

32
00:01:09,360 --> 00:01:11,159
not completely eliminated our need for

33
00:01:11,159 --> 00:01:13,020
shift left just yet so I think this talk

34
00:01:13,020 --> 00:01:15,119
is still relevant today

35
00:01:15,119 --> 00:01:16,799
um and it was about you know some of the

36
00:01:16,799 --> 00:01:18,360
buzzwords on that slide reference

37
00:01:18,360 --> 00:01:20,280
security automation right and when we're

38
00:01:20,280 --> 00:01:22,799
talking about security Automation in you

39
00:01:22,799 --> 00:01:24,060
know while referring to shift left

40
00:01:24,060 --> 00:01:26,400
typically we're talking about the pull

41
00:01:26,400 --> 00:01:28,500
request stage uh it's sort of a phase

42
00:01:28,500 --> 00:01:30,479
where developers are pushing some code

43
00:01:30,479 --> 00:01:32,640
up they're looking for some feedback and

44
00:01:32,640 --> 00:01:33,900
we can kind of inject our security

45
00:01:33,900 --> 00:01:36,119
feedback somewhere over there and so

46
00:01:36,119 --> 00:01:37,799
today we'll talk a little bit about that

47
00:01:37,799 --> 00:01:39,180
pull request phase

48
00:01:39,180 --> 00:01:40,979
and so what's a practical implementation

49
00:01:40,979 --> 00:01:43,200
of shift left add a pull request phase

50
00:01:43,200 --> 00:01:45,240
well it could look something like this a

51
00:01:45,240 --> 00:01:47,579
simple GitHub actions file that runs

52
00:01:47,579 --> 00:01:49,320
some you know my Custom Security

53
00:01:49,320 --> 00:01:52,560
Automation and in 15 lines of yaml we

54
00:01:52,560 --> 00:01:54,659
have shifted left right we have a way to

55
00:01:54,659 --> 00:01:56,579
funnel feedback to our awesome

56
00:01:56,579 --> 00:01:58,140
developers that are just waiting to hear

57
00:01:58,140 --> 00:02:00,240
about all these security issues that you

58
00:02:00,240 --> 00:02:01,560
know we're detecting in their pipelines

59
00:02:01,560 --> 00:02:03,540
but what's what's one of the challenges

60
00:02:03,540 --> 00:02:05,460
with this well this is installed in

61
00:02:05,460 --> 00:02:07,799
every repository and security is an

62
00:02:07,799 --> 00:02:10,380
ever-evolving landscape so as things

63
00:02:10,380 --> 00:02:13,379
inevitably change we have to go modify

64
00:02:13,379 --> 00:02:15,540
this in every single repository that

65
00:02:15,540 --> 00:02:17,760
we've gone and install this in and

66
00:02:17,760 --> 00:02:19,680
that's not the only problem sometimes we

67
00:02:19,680 --> 00:02:21,360
have one version of our automation that

68
00:02:21,360 --> 00:02:23,520
needs to run on a set of repositories

69
00:02:23,520 --> 00:02:25,739
and a different version on another and

70
00:02:25,739 --> 00:02:27,540
again we're managing managing all of

71
00:02:27,540 --> 00:02:29,940
this on a repository by repository basis

72
00:02:29,940 --> 00:02:31,800
right which can obviously get a little

73
00:02:31,800 --> 00:02:33,840
bit dicey you might say hey that's fine

74
00:02:33,840 --> 00:02:35,640
I only have 10 repositories and I'd say

75
00:02:35,640 --> 00:02:37,620
God I wish I was in your shoes um

76
00:02:37,620 --> 00:02:39,180
because standard positives I think this

77
00:02:39,180 --> 00:02:41,700
approach makes complete sense but as our

78
00:02:41,700 --> 00:02:43,560
organizations grow what happens when we

79
00:02:43,560 --> 00:02:45,900
hit 100 what happens when we hit a

80
00:02:45,900 --> 00:02:48,060
thousand and at chime we're closer to

81
00:02:48,060 --> 00:02:50,040
that number and also we understand that

82
00:02:50,040 --> 00:02:51,660
there's organizations that vastly

83
00:02:51,660 --> 00:02:53,640
outsize us too right it just can get

84
00:02:53,640 --> 00:02:55,620
pretty dicey I think again we're all

85
00:02:55,620 --> 00:02:58,140
bought into this idea of shift left but

86
00:02:58,140 --> 00:02:59,519
I don't think we all signed the dotted

87
00:02:59,519 --> 00:03:00,840
line that said hey I want to be a

88
00:03:00,840 --> 00:03:02,519
glorified pipeline manager for the rest

89
00:03:02,519 --> 00:03:04,379
of my security career

90
00:03:04,379 --> 00:03:05,040
um

91
00:03:05,040 --> 00:03:07,080
in addition to this you know as we're

92
00:03:07,080 --> 00:03:08,879
you know adding different forms of

93
00:03:08,879 --> 00:03:10,500
security automation as we identify all

94
00:03:10,500 --> 00:03:13,080
these Cool Tools that we want to just

95
00:03:13,080 --> 00:03:15,120
inform developers at their pull request

96
00:03:15,120 --> 00:03:17,159
about this is unfortunately what a

97
00:03:17,159 --> 00:03:18,959
triaging experience can look like for

98
00:03:18,959 --> 00:03:20,760
some people it's you know navigating

99
00:03:20,760 --> 00:03:22,680
through a CI Pipeline and parsing the

100
00:03:22,680 --> 00:03:24,120
output figuring out if something went

101
00:03:24,120 --> 00:03:26,700
wrong or if the tool just broke and for

102
00:03:26,700 --> 00:03:27,780
other people it's like logging into

103
00:03:27,780 --> 00:03:29,400
single sign-on for the first time of

104
00:03:29,400 --> 00:03:31,019
that tool finding their dashboard and

105
00:03:31,019 --> 00:03:32,580
the necessary security vulnerabilities

106
00:03:32,580 --> 00:03:33,959
and this is obviously just the

107
00:03:33,959 --> 00:03:35,580
frustrating experience right so we're

108
00:03:35,580 --> 00:03:37,620
trying to combine these two ideas this

109
00:03:37,620 --> 00:03:40,140
like non-unified vulnerability

110
00:03:40,140 --> 00:03:42,840
management you know way of surfacing

111
00:03:42,840 --> 00:03:44,400
issues at the pull request level and

112
00:03:44,400 --> 00:03:47,580
just this growing SRE devops type busy

113
00:03:47,580 --> 00:03:49,080
work that we didn't really sign up for

114
00:03:49,080 --> 00:03:50,580
we're like can we do something better

115
00:03:50,580 --> 00:03:52,860
because we feel like we can so let's

116
00:03:52,860 --> 00:03:54,299
quickly throw on our product manager

117
00:03:54,299 --> 00:03:57,360
hats and go like what can we build to

118
00:03:57,360 --> 00:03:59,220
kind of solve some of these problems and

119
00:03:59,220 --> 00:04:01,860
so uh one approach which obviously the

120
00:04:01,860 --> 00:04:04,319
paypath concept very well popularized by

121
00:04:04,319 --> 00:04:07,620
Netflix we're saying can we use that

122
00:04:07,620 --> 00:04:09,900
concept of the pave path but apply it to

123
00:04:09,900 --> 00:04:11,580
enabling and managing our security

124
00:04:11,580 --> 00:04:14,099
automation right create One path where

125
00:04:14,099 --> 00:04:15,900
we're not reprimanding people for not

126
00:04:15,900 --> 00:04:17,699
using this what we want to do is create

127
00:04:17,699 --> 00:04:19,440
an attractive enough solution that

128
00:04:19,440 --> 00:04:21,238
people will voluntarily come and choose

129
00:04:21,238 --> 00:04:23,220
our paid path to spin up their own forms

130
00:04:23,220 --> 00:04:25,800
of Automation and if we truly are able

131
00:04:25,800 --> 00:04:27,900
to get a paid up and running then we

132
00:04:27,900 --> 00:04:30,240
might have a chance of unifying and kind

133
00:04:30,240 --> 00:04:32,160
of having an intuitive triaging

134
00:04:32,160 --> 00:04:33,660
experience that can come of it you know

135
00:04:33,660 --> 00:04:35,160
of like one single path so we're going

136
00:04:35,160 --> 00:04:36,720
to try to solve that

137
00:04:36,720 --> 00:04:38,340
um we're also trying to going to use

138
00:04:38,340 --> 00:04:40,259
some other aspects right like automation

139
00:04:40,259 --> 00:04:42,720
should be isolated from each other we

140
00:04:42,720 --> 00:04:44,639
don't want it to impact each other we

141
00:04:44,639 --> 00:04:46,500
also want to ensure that we're lowering

142
00:04:46,500 --> 00:04:48,300
the operational burden we don't want

143
00:04:48,300 --> 00:04:50,820
more responsibilities to come so really

144
00:04:50,820 --> 00:04:53,040
any failures that come from this should

145
00:04:53,040 --> 00:04:54,720
be async we don't want anyone to be on

146
00:04:54,720 --> 00:04:55,440
call

147
00:04:55,440 --> 00:04:58,020
and lastly you know by default we don't

148
00:04:58,020 --> 00:04:59,340
want to play whack-a-mole with our

149
00:04:59,340 --> 00:05:00,540
GitHub inventory it's constantly

150
00:05:00,540 --> 00:05:02,400
changing so by default everything should

151
00:05:02,400 --> 00:05:04,919
just be covered new and existing

152
00:05:04,919 --> 00:05:06,960
and so that last point is actually the

153
00:05:06,960 --> 00:05:08,340
simplest one to address first if you're

154
00:05:08,340 --> 00:05:10,380
on GitHub and familiar with GitHub apps

155
00:05:10,380 --> 00:05:12,120
you can just kind of install this org

156
00:05:12,120 --> 00:05:13,560
wide and you can get events from

157
00:05:13,560 --> 00:05:15,240
everywhere so this part's fine if you're

158
00:05:15,240 --> 00:05:17,639
not familiar with GitHub apps uh

159
00:05:17,639 --> 00:05:19,139
basically think of them as glorified

160
00:05:19,139 --> 00:05:21,360
service accounts with some amount of

161
00:05:21,360 --> 00:05:22,440
permissions you know fine grade

162
00:05:22,440 --> 00:05:24,660
permissions you can have it just do very

163
00:05:24,660 --> 00:05:26,460
specific things like on pull requests

164
00:05:26,460 --> 00:05:28,800
and receive events um just related to

165
00:05:28,800 --> 00:05:31,020
pull requests so as we're receiving all

166
00:05:31,020 --> 00:05:32,639
these events like for example maybe we

167
00:05:32,639 --> 00:05:34,620
receive an event that a certain

168
00:05:34,620 --> 00:05:36,900
developer has pushed to commit to a pull

169
00:05:36,900 --> 00:05:38,220
request and now we want to do something

170
00:05:38,220 --> 00:05:39,780
about it well we have to send these

171
00:05:39,780 --> 00:05:41,400
events somewhere so what we're going to

172
00:05:41,400 --> 00:05:43,979
do is spin up a very simple go web

173
00:05:43,979 --> 00:05:46,800
server and we're going to send events to

174
00:05:46,800 --> 00:05:48,720
like this GitHub events endpoint right

175
00:05:48,720 --> 00:05:50,039
so we have some place that all these

176
00:05:50,039 --> 00:05:51,900
events are landing and and as a name

177
00:05:51,900 --> 00:05:53,759
suggests it says that blue box says

178
00:05:53,759 --> 00:05:55,199
orchestrator right so it's going to do

179
00:05:55,199 --> 00:05:57,419
some orchestration like things it's

180
00:05:57,419 --> 00:05:59,940
going to decide for a given event should

181
00:05:59,940 --> 00:06:02,880
I run any forms of automation or not and

182
00:06:02,880 --> 00:06:04,440
these forms of automation as you saw

183
00:06:04,440 --> 00:06:06,840
from our requirements very easily kind

184
00:06:06,840 --> 00:06:08,580
of lead us to this Lambda route they're

185
00:06:08,580 --> 00:06:10,500
isolated there's less Ops with them

186
00:06:10,500 --> 00:06:12,360
they're ephemeral they kind of fit that

187
00:06:12,360 --> 00:06:15,120
requirements very well and as we're

188
00:06:15,120 --> 00:06:16,320
going through this remember we're trying

189
00:06:16,320 --> 00:06:18,180
to reduce the burden on anybody spinning

190
00:06:18,180 --> 00:06:20,039
up or using our pave path what we're

191
00:06:20,039 --> 00:06:21,900
going to do is take any common

192
00:06:21,900 --> 00:06:24,240
functionality so think of parsing a git

193
00:06:24,240 --> 00:06:27,000
diff or cloning some code or you know

194
00:06:27,000 --> 00:06:28,800
manipulating in any way that is shared

195
00:06:28,800 --> 00:06:30,539
across multiple forms of automation

196
00:06:30,539 --> 00:06:32,160
we're going to have our orchestrator

197
00:06:32,160 --> 00:06:34,380
just handle that don't put it on the

198
00:06:34,380 --> 00:06:35,940
lambdas let's take the burden on the

199
00:06:35,940 --> 00:06:37,919
platform and just create that pave path

200
00:06:37,919 --> 00:06:40,259
for everyone to walk through there's two

201
00:06:40,259 --> 00:06:41,699
names of lambdas up there somewhere up

202
00:06:41,699 --> 00:06:42,900
and break man but they're not the only

203
00:06:42,900 --> 00:06:45,120
ones we've integrated we have six today

204
00:06:45,120 --> 00:06:46,919
one around the corner and more coming

205
00:06:46,919 --> 00:06:48,780
and I promise this isn't some type of

206
00:06:48,780 --> 00:06:50,400
flex of like we have more automation

207
00:06:50,400 --> 00:06:52,259
than you like that's not the purpose of

208
00:06:52,259 --> 00:06:54,600
this at all this list will grow and

209
00:06:54,600 --> 00:06:56,639
reduce in size as required we're just

210
00:06:56,639 --> 00:06:58,440
chasing high confidence stuff that fits

211
00:06:58,440 --> 00:06:59,940
into our program but it needs to be very

212
00:06:59,940 --> 00:07:02,819
flexible this is just transparency

213
00:07:02,819 --> 00:07:04,979
um a little bit more insight into this

214
00:07:04,979 --> 00:07:07,500
orchestrator itself uh I mentioned you

215
00:07:07,500 --> 00:07:09,419
know four given requests

216
00:07:09,419 --> 00:07:10,979
should I trigger some automation or

217
00:07:10,979 --> 00:07:12,180
should I not

218
00:07:12,180 --> 00:07:13,680
um so some examples are like there's

219
00:07:13,680 --> 00:07:15,060
depend about pull requests and we get

220
00:07:15,060 --> 00:07:16,800
tons of them we don't really need to

221
00:07:16,800 --> 00:07:18,840
trigger any automation for that um any

222
00:07:18,840 --> 00:07:20,099
security automation for that because

223
00:07:20,099 --> 00:07:21,599
really they're they're actually opening

224
00:07:21,599 --> 00:07:23,099
pull requests to solve security problems

225
00:07:23,099 --> 00:07:24,960
usually in the first place

226
00:07:24,960 --> 00:07:26,639
um and so this orchestrator is going to

227
00:07:26,639 --> 00:07:28,560
filter out these events and decide for

228
00:07:28,560 --> 00:07:30,660
any given event do I actually need to

229
00:07:30,660 --> 00:07:33,120
invoke a given Lambda or not that's one

230
00:07:33,120 --> 00:07:35,460
of its core responsibilities and

231
00:07:35,460 --> 00:07:37,380
everyone's definition of scale is you

232
00:07:37,380 --> 00:07:39,300
know something slightly different so

233
00:07:39,300 --> 00:07:40,919
again for transparency we receive you

234
00:07:40,919 --> 00:07:43,080
know like roughly 22 000 events per day

235
00:07:43,080 --> 00:07:45,599
uh which is plenty for the go web server

236
00:07:45,599 --> 00:07:46,680
to handle I mean you can handle that

237
00:07:46,680 --> 00:07:48,660
just fine spikes can look like you know

238
00:07:48,660 --> 00:07:51,360
3x 4x's volume mostly depending on the

239
00:07:51,360 --> 00:07:53,400
GitHub activity that's coming in and

240
00:07:53,400 --> 00:07:55,560
roughly 15 of these events are worth

241
00:07:55,560 --> 00:07:57,419
acting on like at least one Lambda will

242
00:07:57,419 --> 00:07:59,759
get triggered for any of these given you

243
00:07:59,759 --> 00:08:01,500
know for this volume of events basically

244
00:08:01,500 --> 00:08:02,880
and as you can see from the slide

245
00:08:02,880 --> 00:08:04,319
they're just very cheap to run in case

246
00:08:04,319 --> 00:08:07,380
you were wondering about cost

247
00:08:07,380 --> 00:08:08,940
um so this is all great okay for a given

248
00:08:08,940 --> 00:08:11,160
event it's deciding what to do but the

249
00:08:11,160 --> 00:08:13,080
orchestrator still needs to know what

250
00:08:13,080 --> 00:08:14,819
lambdas are available which ones to

251
00:08:14,819 --> 00:08:17,099
trigger and so kind of emulating that CI

252
00:08:17,099 --> 00:08:19,319
experience we have one yaml file

253
00:08:19,319 --> 00:08:21,060
essentially inside the OverWatch

254
00:08:21,060 --> 00:08:23,400
repository where you can Define and

255
00:08:23,400 --> 00:08:24,840
place your lambdas that you want to spin

256
00:08:24,840 --> 00:08:27,840
up these have additional certain options

257
00:08:27,840 --> 00:08:30,240
you know for example for Brakeman or

258
00:08:30,240 --> 00:08:32,760
sembrap you can add extensions you know

259
00:08:32,760 --> 00:08:34,500
certain file names that you want to

260
00:08:34,500 --> 00:08:36,360
trigger or Lambda on these are in

261
00:08:36,360 --> 00:08:38,700
addition to some of the core you know

262
00:08:38,700 --> 00:08:41,039
event parsing that our orchestrator is

263
00:08:41,039 --> 00:08:42,779
already doing but remember we're only

264
00:08:42,779 --> 00:08:45,180
defining this in one place one yaml file

265
00:08:45,180 --> 00:08:46,920
and you can deploy your Lambda out to

266
00:08:46,920 --> 00:08:51,439
our entire fleet through this flow

267
00:08:51,600 --> 00:08:53,820
and so going back to our diagram a

268
00:08:53,820 --> 00:08:55,620
request came in orchestrator decided

269
00:08:55,620 --> 00:08:57,060
okay maybe this one's worth acting on

270
00:08:57,060 --> 00:08:59,220
you know based on the configurations we

271
00:08:59,220 --> 00:09:00,899
triggered some forms of automation some

272
00:09:00,899 --> 00:09:03,240
of these lambdas and using some shared

273
00:09:03,240 --> 00:09:07,200
flow like the S3 flow and then

274
00:09:07,200 --> 00:09:09,420
these lambdas perform their operations

275
00:09:09,420 --> 00:09:12,060
they they go ahead and you know drop a

276
00:09:12,060 --> 00:09:14,580
in this case a report to another S3

277
00:09:14,580 --> 00:09:16,019
bucket so as they're finishing they're

278
00:09:16,019 --> 00:09:18,300
they're dropping their reports and as

279
00:09:18,300 --> 00:09:20,220
those reports are being generated we're

280
00:09:20,220 --> 00:09:22,620
going to go respond in a sort of unified

281
00:09:22,620 --> 00:09:24,480
way back to the apis we've integrated

282
00:09:24,480 --> 00:09:27,540
with in this case GitHub and slack these

283
00:09:27,540 --> 00:09:28,620
are the two that we've integrated with

284
00:09:28,620 --> 00:09:29,820
yours might look different but just

285
00:09:29,820 --> 00:09:31,740
think of these as replaceable apis in

286
00:09:31,740 --> 00:09:33,839
case anything ever changed

287
00:09:33,839 --> 00:09:35,459
and uh

288
00:09:35,459 --> 00:09:37,380
fortunately unfortunately this is not a

289
00:09:37,380 --> 00:09:38,700
system designed one-on-one class so I'm

290
00:09:38,700 --> 00:09:39,839
not going to talk about every single

291
00:09:39,839 --> 00:09:41,700
failure point that could go wrong but

292
00:09:41,700 --> 00:09:43,200
just think about this diagram as

293
00:09:43,200 --> 00:09:45,300
anything should be allowed to feel here

294
00:09:45,300 --> 00:09:47,399
we're not trying to add burden or Ops

295
00:09:47,399 --> 00:09:49,920
work on any you know individual or

296
00:09:49,920 --> 00:09:52,019
engineer that is maintaining any part of

297
00:09:52,019 --> 00:09:54,240
this diagram so just add you know your

298
00:09:54,240 --> 00:09:56,700
SNS topics or retries as you see fit

299
00:09:56,700 --> 00:09:58,019
over here and that's something we can

300
00:09:58,019 --> 00:10:00,360
talk about later too

301
00:10:00,360 --> 00:10:02,279
okay so we talked about unification of

302
00:10:02,279 --> 00:10:03,779
alerts a lot so what does that actually

303
00:10:03,779 --> 00:10:06,120
look like so here's an example of an

304
00:10:06,120 --> 00:10:07,920
alert coming from the semcraft Lambda

305
00:10:07,920 --> 00:10:10,440
it's reported inside GitHub and has a

306
00:10:10,440 --> 00:10:11,880
pretty intuitive experience there are

307
00:10:11,880 --> 00:10:13,920
some triage buttons here if you want to

308
00:10:13,920 --> 00:10:15,180
know how to fix the alert you can click

309
00:10:15,180 --> 00:10:17,519
on show more details now a lot of this

310
00:10:17,519 --> 00:10:19,080
is actually powered by our usage of

311
00:10:19,080 --> 00:10:20,519
GitHub Advanced security we are

312
00:10:20,519 --> 00:10:21,660
partnered with them and we're using

313
00:10:21,660 --> 00:10:24,480
these API calls so it's really not super

314
00:10:24,480 --> 00:10:26,220
magical that this is this alert is

315
00:10:26,220 --> 00:10:28,500
showing up but what I think is cool is

316
00:10:28,500 --> 00:10:30,480
that for every Lambda that you integrate

317
00:10:30,480 --> 00:10:32,399
with our platform there is a unified

318
00:10:32,399 --> 00:10:35,040
playing field so now our Breakman alerts

319
00:10:35,040 --> 00:10:37,140
our mob SF alerts and every other Lambda

320
00:10:37,140 --> 00:10:39,120
you saw integrated they can all report

321
00:10:39,120 --> 00:10:41,519
alerts in the exact same way you're not

322
00:10:41,519 --> 00:10:43,200
logging into a multiple dashboards and

323
00:10:43,200 --> 00:10:44,820
you're all trying to find how to fix

324
00:10:44,820 --> 00:10:46,620
vulnerabilities if you've seen even one

325
00:10:46,620 --> 00:10:48,420
of these alerts you probably know how to

326
00:10:48,420 --> 00:10:49,860
triage them with you know some

327
00:10:49,860 --> 00:10:52,740
uniqueness to to each of the lambdas

328
00:10:52,740 --> 00:10:54,779
in addition we want to take the Ops down

329
00:10:54,779 --> 00:10:56,519
on our security team we mentioned that

330
00:10:56,519 --> 00:10:58,740
and so our security team generally

331
00:10:58,740 --> 00:11:01,320
consumes alerts in slack and these are

332
00:11:01,320 --> 00:11:03,120
also looking strikingly familiar at this

333
00:11:03,120 --> 00:11:06,360
point and so here's alerts from two of

334
00:11:06,360 --> 00:11:08,459
our lambdas and Piers alerts from two

335
00:11:08,459 --> 00:11:10,560
other lambdas and they're all using a

336
00:11:10,560 --> 00:11:11,940
very default template that has been

337
00:11:11,940 --> 00:11:13,800
defined by our orchestrator and like

338
00:11:13,800 --> 00:11:15,420
anything in this flow you can override

339
00:11:15,420 --> 00:11:17,040
it if you need to so need something

340
00:11:17,040 --> 00:11:19,560
custom feel free to go at it but here's

341
00:11:19,560 --> 00:11:21,779
the pave path or default mode of

342
00:11:21,779 --> 00:11:23,820
operation

343
00:11:23,820 --> 00:11:26,100
um one note about those buttons our

344
00:11:26,100 --> 00:11:28,740
source of Truth we're using as GitHub so

345
00:11:28,740 --> 00:11:30,779
any triage you do whether it's a

346
00:11:30,779 --> 00:11:32,700
security engineer on the slack side or

347
00:11:32,700 --> 00:11:34,140
if it's somebody triaging on the GitHub

348
00:11:34,140 --> 00:11:35,940
side fundamentally they're mapping to

349
00:11:35,940 --> 00:11:37,500
the exact same alert we're not syncing

350
00:11:37,500 --> 00:11:39,600
alerts across multiple sources and so

351
00:11:39,600 --> 00:11:42,540
this lets us do that and any on fixed

352
00:11:42,540 --> 00:11:43,800
alerts or anything again they're living

353
00:11:43,800 --> 00:11:45,720
in GitHub it's our source of Truth for

354
00:11:45,720 --> 00:11:47,220
code related you know security

355
00:11:47,220 --> 00:11:49,200
vulnerabilities and that's how we use

356
00:11:49,200 --> 00:11:50,100
that

357
00:11:50,100 --> 00:11:51,899
and so you might say okay this is all

358
00:11:51,899 --> 00:11:53,640
fine cool that you found a way to

359
00:11:53,640 --> 00:11:55,620
slightly unify your alerts

360
00:11:55,620 --> 00:11:57,600
um but I haven't dealt with Lambda

361
00:11:57,600 --> 00:11:59,160
before and like what does that take I

362
00:11:59,160 --> 00:12:01,920
kind of miss my 15 lines of of yaml at

363
00:12:01,920 --> 00:12:02,820
this point

364
00:12:02,820 --> 00:12:04,019
um so let's let's kind of break this

365
00:12:04,019 --> 00:12:05,579
down like what's in this Lambda how do

366
00:12:05,579 --> 00:12:07,079
you set it up so we've gotten to the

367
00:12:07,079 --> 00:12:08,579
point where all you have to do is add

368
00:12:08,579 --> 00:12:10,620
basically one line which is your Lambda

369
00:12:10,620 --> 00:12:12,240
function name with some optional

370
00:12:12,240 --> 00:12:14,820
parameters like timeout or memory it's

371
00:12:14,820 --> 00:12:16,680
going to automatically configure all the

372
00:12:16,680 --> 00:12:19,200
necessary resources and permissions that

373
00:12:19,200 --> 00:12:21,480
Lambda needs to do its job and just as a

374
00:12:21,480 --> 00:12:24,000
reminder its job is essentially pulling

375
00:12:24,000 --> 00:12:26,459
some code from S3 running its automation

376
00:12:26,459 --> 00:12:28,740
whatever that means and then uploading a

377
00:12:28,740 --> 00:12:30,360
report to S3 if it kind of fits that

378
00:12:30,360 --> 00:12:31,440
mold

379
00:12:31,440 --> 00:12:33,720
and so again if you're not familiar with

380
00:12:33,720 --> 00:12:35,700
the code here this is totally fine

381
00:12:35,700 --> 00:12:37,380
there's basically just three functions

382
00:12:37,380 --> 00:12:39,360
mapping to those exact operations I just

383
00:12:39,360 --> 00:12:41,720
destroyed get code do some automation

384
00:12:41,720 --> 00:12:43,860
dump the code I mean sorry dump the

385
00:12:43,860 --> 00:12:46,200
report and so the only bit that's

386
00:12:46,200 --> 00:12:48,060
actually unique is that section in the

387
00:12:48,060 --> 00:12:49,800
middle that's the one that all Lambda

388
00:12:49,800 --> 00:12:51,300
authors really control and they can do

389
00:12:51,300 --> 00:12:53,160
whatever they want in sem group's

390
00:12:53,160 --> 00:12:55,019
example it could be as simple as this

391
00:12:55,019 --> 00:12:57,000
one line let's look at the difference in

392
00:12:57,000 --> 00:12:59,459
Breakman it's just a different line but

393
00:12:59,459 --> 00:13:00,839
that run scanner interface is

394
00:13:00,839 --> 00:13:02,700
essentially identical and depending on

395
00:13:02,700 --> 00:13:04,200
your automation needs it's in scale

396
00:13:04,200 --> 00:13:06,360
upper up or down but the point is it's

397
00:13:06,360 --> 00:13:08,339
fairly simple you have the terraform

398
00:13:08,339 --> 00:13:10,019
module and then you have this one line

399
00:13:10,019 --> 00:13:11,339
that you're fundamentally controlling

400
00:13:11,339 --> 00:13:15,120
everything else is shared and imported

401
00:13:15,120 --> 00:13:18,000
and you kind of probably need a way to

402
00:13:18,000 --> 00:13:19,800
test this right like hey I have a Lambda

403
00:13:19,800 --> 00:13:21,000
I want to see if it's working with the

404
00:13:21,000 --> 00:13:22,860
orchestrator I want to see how the

405
00:13:22,860 --> 00:13:24,420
alerts are showing up or what it looks

406
00:13:24,420 --> 00:13:26,579
like in GitHub and so if you're familiar

407
00:13:26,579 --> 00:13:29,339
with versions and aliases and Lambda

408
00:13:29,339 --> 00:13:30,899
this will be a little bit obvious too

409
00:13:30,899 --> 00:13:33,000
but if not just know that there's a way

410
00:13:33,000 --> 00:13:35,459
that every time you push a commit on

411
00:13:35,459 --> 00:13:37,260
your test Branch or your custom Branch

412
00:13:37,260 --> 00:13:39,660
within your Lambda repository we are

413
00:13:39,660 --> 00:13:41,339
creating versions and aliases of your

414
00:13:41,339 --> 00:13:42,959
Lambda that you can pin to and you can

415
00:13:42,959 --> 00:13:43,800
use

416
00:13:43,800 --> 00:13:47,579
so as you merge to main or you know your

417
00:13:47,579 --> 00:13:48,959
main production Branch there's a prod

418
00:13:48,959 --> 00:13:51,480
version now available and you can you

419
00:13:51,480 --> 00:13:53,459
know in the orchestrator remember that

420
00:13:53,459 --> 00:13:55,920
one yaml setting file not just the

421
00:13:55,920 --> 00:13:57,660
Lambda function name you can also add

422
00:13:57,660 --> 00:14:00,300
this custom version or Alias to pin to

423
00:14:00,300 --> 00:14:02,399
that exact version that you want to run

424
00:14:02,399 --> 00:14:05,519
with additional options and so why is

425
00:14:05,519 --> 00:14:06,660
this powerful why am I telling you about

426
00:14:06,660 --> 00:14:09,480
all these versions and aliases well just

427
00:14:09,480 --> 00:14:11,579
because we found a way to spam GitHub in

428
00:14:11,579 --> 00:14:13,500
the pull request comments it's not what

429
00:14:13,500 --> 00:14:16,019
we want to do with all our lambdas so a

430
00:14:16,019 --> 00:14:17,639
typical rollout strategy would probably

431
00:14:17,639 --> 00:14:20,040
look like hey I want to take the test

432
00:14:20,040 --> 00:14:22,200
version of my Lambda I want to run it in

433
00:14:22,200 --> 00:14:24,180
slack for a while feel confident about

434
00:14:24,180 --> 00:14:25,740
the rules you know maybe a test version

435
00:14:25,740 --> 00:14:28,860
on my test Branch once I'm confident I

436
00:14:28,860 --> 00:14:30,779
can merge that in I have a prod version

437
00:14:30,779 --> 00:14:32,820
now available and maybe if I'm happy I

438
00:14:32,820 --> 00:14:34,380
can turn on GitHub commenting for that

439
00:14:34,380 --> 00:14:36,120
and that's a little bit more thoughtful

440
00:14:36,120 --> 00:14:38,279
that is not going to ruin trust with

441
00:14:38,279 --> 00:14:40,440
your engineering counterparts and gives

442
00:14:40,440 --> 00:14:42,540
you a lot to play with one thing to note

443
00:14:42,540 --> 00:14:44,519
is you can actually run multiple

444
00:14:44,519 --> 00:14:46,260
versions of the same Lambda right like

445
00:14:46,260 --> 00:14:48,300
your prod Lambda and a test Lambda all

446
00:14:48,300 --> 00:14:50,519
in one place in parallel it's it's all

447
00:14:50,519 --> 00:14:51,779
up to you we're just giving all the

448
00:14:51,779 --> 00:14:53,519
options to everyone that wants to roll

449
00:14:53,519 --> 00:14:55,139
out this Automation and once again

450
00:14:55,139 --> 00:14:56,579
remember that anytime you define

451
00:14:56,579 --> 00:14:58,500
anything here it's getting deployed

452
00:14:58,500 --> 00:15:00,180
Fleet wide across all your GitHub

453
00:15:00,180 --> 00:15:01,860
repositories

454
00:15:01,860 --> 00:15:04,920
and so all this also might sound great

455
00:15:04,920 --> 00:15:07,380
but really let's highlight what is

456
00:15:07,380 --> 00:15:09,180
happening by separating out all these

457
00:15:09,180 --> 00:15:10,860
automations like by not rolling it up

458
00:15:10,860 --> 00:15:12,959
into like one golden image or keeping

459
00:15:12,959 --> 00:15:14,760
them all playing together

460
00:15:14,760 --> 00:15:17,339
um really the brakeman Lambda can just

461
00:15:17,339 --> 00:15:19,019
fail and it should not impact anything

462
00:15:19,019 --> 00:15:21,540
else right and so typically if you were

463
00:15:21,540 --> 00:15:23,660
rolling a Breakman check let's say in CI

464
00:15:23,660 --> 00:15:27,060
uh this is a flag or like you know a

465
00:15:27,060 --> 00:15:28,800
pipeline failure that a developer might

466
00:15:28,800 --> 00:15:30,000
see

467
00:15:30,000 --> 00:15:32,160
um if you know even if github's down or

468
00:15:32,160 --> 00:15:33,899
breakman's not operating well anymore

469
00:15:33,899 --> 00:15:36,300
and we really don't want to add this

470
00:15:36,300 --> 00:15:38,579
cognitive load to developers in GitHub

471
00:15:38,579 --> 00:15:40,500
at all if it's something that they can't

472
00:15:40,500 --> 00:15:42,600
fix if it's something that only the

473
00:15:42,600 --> 00:15:44,699
owners of Breakman or that Lambda can

474
00:15:44,699 --> 00:15:47,160
fix like why even bother people in in

475
00:15:47,160 --> 00:15:49,260
the pull requests so because we control

476
00:15:49,260 --> 00:15:52,560
every API call in this entire flow we

477
00:15:52,560 --> 00:15:54,540
can actually just suppress it we can

478
00:15:54,540 --> 00:15:56,220
suppress from all the pipeline checks

479
00:15:56,220 --> 00:15:58,019
that hey Breakman actually never even

480
00:15:58,019 --> 00:15:59,639
ran just check out the other stuff that

481
00:15:59,639 --> 00:16:01,199
did if there's any action to take on

482
00:16:01,199 --> 00:16:03,060
that and and this doesn't mean we're

483
00:16:03,060 --> 00:16:05,220
suppressing the alert from Brakeman at

484
00:16:05,220 --> 00:16:07,079
all what we're doing is reducing the

485
00:16:07,079 --> 00:16:09,240
burden on the team managing brake man

486
00:16:09,240 --> 00:16:10,740
because we're filling up their dashboard

487
00:16:10,740 --> 00:16:12,839
so here's a default data dog dashboard

488
00:16:12,839 --> 00:16:15,240
for the Breakman Lambda they can come

489
00:16:15,240 --> 00:16:17,220
and debug this as they see fit in their

490
00:16:17,220 --> 00:16:19,380
own time they're not on call they don't

491
00:16:19,380 --> 00:16:20,760
have to respond immediately and they're

492
00:16:20,760 --> 00:16:24,720
not blocking any CI pipelines in GitHub

493
00:16:24,720 --> 00:16:26,399
um and so one of the cool things of

494
00:16:26,399 --> 00:16:28,620
setting up a flow like this is we

495
00:16:28,620 --> 00:16:30,180
actually have an extremely talented team

496
00:16:30,180 --> 00:16:31,920
at chime working at service to service

497
00:16:31,920 --> 00:16:33,839
authorization authentication if you

498
00:16:33,839 --> 00:16:34,920
don't know what that means that's

499
00:16:34,920 --> 00:16:37,680
totally fine just know that they had a

500
00:16:37,680 --> 00:16:39,060
custom enough way that they couldn't

501
00:16:39,060 --> 00:16:41,220
just roll up rules in semcraft it

502
00:16:41,220 --> 00:16:42,480
required spinning up their own

503
00:16:42,480 --> 00:16:44,880
automation very custom configuration

504
00:16:44,880 --> 00:16:46,860
checks that had a lot of dynamic

505
00:16:46,860 --> 00:16:49,139
elements to it and really what they

506
00:16:49,139 --> 00:16:51,060
wanted to do is nudge developers to use

507
00:16:51,060 --> 00:16:52,980
the right authorization schemes over

508
00:16:52,980 --> 00:16:55,079
time they wanted slack alerts for every

509
00:16:55,079 --> 00:16:58,019
invalid configuration and you know

510
00:16:58,019 --> 00:17:00,240
spoiler alert do we have a tool or a

511
00:17:00,240 --> 00:17:01,680
pave path that can kind of solve their

512
00:17:01,680 --> 00:17:03,240
problem for them and that's exactly what

513
00:17:03,240 --> 00:17:05,459
they chose so we rolled their form of

514
00:17:05,459 --> 00:17:08,939
automation fleetwide via OverWatch and

515
00:17:08,939 --> 00:17:10,859
it's not exactly an appsec example right

516
00:17:10,859 --> 00:17:12,240
it's not like running semcraft or

517
00:17:12,240 --> 00:17:14,579
Brakeman this is slightly modified but

518
00:17:14,579 --> 00:17:18,059
still fits the pave path model

519
00:17:18,059 --> 00:17:19,980
going even further and this one excited

520
00:17:19,980 --> 00:17:22,140
me a lot is we had engineering teams

521
00:17:22,140 --> 00:17:23,819
outside of our security team reaching

522
00:17:23,819 --> 00:17:25,799
out to us they were like hey we heard

523
00:17:25,799 --> 00:17:27,839
about a tool that can nudge people to do

524
00:17:27,839 --> 00:17:29,280
the right thing in a different direction

525
00:17:29,280 --> 00:17:31,500
it can give us slack alerts you can

526
00:17:31,500 --> 00:17:33,660
deploy it Fleet wide on you know just

527
00:17:33,660 --> 00:17:36,660
one yaml configuration we're deprecating

528
00:17:36,660 --> 00:17:39,000
a database and we don't want people to

529
00:17:39,000 --> 00:17:41,160
be using this database pattern anymore

530
00:17:41,160 --> 00:17:44,340
can we add a rule to OverWatch

531
00:17:44,340 --> 00:17:46,860
of course we said yes and so here's a

532
00:17:46,860 --> 00:17:49,020
Sam rep rule that basically they added

533
00:17:49,020 --> 00:17:50,760
to dynamically you know prevent people

534
00:17:50,760 --> 00:17:53,220
from changing a deprecated path and they

535
00:17:53,220 --> 00:17:55,260
had a rollout strategy for them and that

536
00:17:55,260 --> 00:17:57,059
team completely owns that rule but

537
00:17:57,059 --> 00:17:58,679
they're not taking any SRE burden

538
00:17:58,679 --> 00:18:00,240
they're not they don't have to flag all

539
00:18:00,240 --> 00:18:01,980
these anti-patterns or spin up their own

540
00:18:01,980 --> 00:18:04,080
automation NCI pipelines they're just

541
00:18:04,080 --> 00:18:05,880
getting this through our pave path

542
00:18:05,880 --> 00:18:10,160
approach for their non-security use case

543
00:18:10,559 --> 00:18:12,840
and so going back to the diagram right

544
00:18:12,840 --> 00:18:14,940
like this flow like a good way to think

545
00:18:14,940 --> 00:18:16,440
about it is sort of like Lego blocks

546
00:18:16,440 --> 00:18:18,900
each component is sort of independent

547
00:18:18,900 --> 00:18:20,520
you don't have to use this entire

548
00:18:20,520 --> 00:18:22,620
diagram from left to right we're not

549
00:18:22,620 --> 00:18:24,780
creating one right way to use it you saw

550
00:18:24,780 --> 00:18:26,039
different scenarios where people are

551
00:18:26,039 --> 00:18:27,900
just taking advantages of what we've

552
00:18:27,900 --> 00:18:29,940
built and the flexibility we've done it

553
00:18:29,940 --> 00:18:32,520
with and just building on top of it and

554
00:18:32,520 --> 00:18:34,200
so maybe you have you know some

555
00:18:34,200 --> 00:18:36,179
automation you're happy with in an AWS

556
00:18:36,179 --> 00:18:37,860
account or a confined kubernetes

557
00:18:37,860 --> 00:18:39,840
namespace and you just want to drop a

558
00:18:39,840 --> 00:18:41,640
report in an S3 bucket and get it take

559
00:18:41,640 --> 00:18:43,620
advantage of the apis that we have with

560
00:18:43,620 --> 00:18:45,419
GitHub and slack that's possible too you

561
00:18:45,419 --> 00:18:46,679
can skip everything in the middle

562
00:18:46,679 --> 00:18:48,539
totally up to you

563
00:18:48,539 --> 00:18:49,320
um

564
00:18:49,320 --> 00:18:52,080
and you know surprise surprise like most

565
00:18:52,080 --> 00:18:53,640
engineering projects things are not

566
00:18:53,640 --> 00:18:56,100
linear I wish they were but they're

567
00:18:56,100 --> 00:18:58,260
they're really not so there's bumps

568
00:18:58,260 --> 00:18:59,700
along the way and especially if you're

569
00:18:59,700 --> 00:19:00,960
building something like this from

570
00:19:00,960 --> 00:19:02,880
scratch like a platform from scratch

571
00:19:02,880 --> 00:19:05,580
most likely you will regress first

572
00:19:05,580 --> 00:19:08,640
before things get better

573
00:19:08,640 --> 00:19:11,039
um and so there are some examples of you

574
00:19:11,039 --> 00:19:12,600
know we didn't have our terraform module

575
00:19:12,600 --> 00:19:15,240
uh and so until we had that it was

576
00:19:15,240 --> 00:19:17,400
slightly harder to spin up a Lambda so

577
00:19:17,400 --> 00:19:19,080
all these things can kind of cause

578
00:19:19,080 --> 00:19:21,419
different sort of bumps and local local

579
00:19:21,419 --> 00:19:24,000
maximums as you're going forward and

580
00:19:24,000 --> 00:19:25,320
it's not a linear path I think this is

581
00:19:25,320 --> 00:19:26,580
pretty obvious for most engineering

582
00:19:26,580 --> 00:19:29,700
projects but it's worth reiterating

583
00:19:29,700 --> 00:19:31,740
um and so with that just like some you

584
00:19:31,740 --> 00:19:34,200
know key takeaways uh we totally

585
00:19:34,200 --> 00:19:35,700
understand OverWatch doesn't fit

586
00:19:35,700 --> 00:19:37,740
everyone's you know organization it

587
00:19:37,740 --> 00:19:40,440
won't or this approach won't but you

588
00:19:40,440 --> 00:19:41,880
know can your organization sort of

589
00:19:41,880 --> 00:19:44,220
benefit and by your organization I mean

590
00:19:44,220 --> 00:19:46,440
your security Engineers your developers

591
00:19:46,440 --> 00:19:48,960
sort of benefit from a pave path like

592
00:19:48,960 --> 00:19:51,240
approach to managing your automation you

593
00:19:51,240 --> 00:19:53,039
know burnout's pretty prevalent in our

594
00:19:53,039 --> 00:19:54,660
industry I don't think we need to make

595
00:19:54,660 --> 00:19:56,700
this problem worse

596
00:19:56,700 --> 00:19:59,280
um and if if not through OverWatch I

597
00:19:59,280 --> 00:20:00,660
think there's a lot of other projects or

598
00:20:00,660 --> 00:20:02,340
vendors depending on your requirements

599
00:20:02,340 --> 00:20:03,660
because they'll look different than our

600
00:20:03,660 --> 00:20:05,039
requirements

601
00:20:05,039 --> 00:20:06,840
um that could fit your needs so coinbase

602
00:20:06,840 --> 00:20:08,580
has had a project for a very long time I

603
00:20:08,580 --> 00:20:10,740
think it's it's fantastic again you'll

604
00:20:10,740 --> 00:20:12,660
see where it deviates uh from our

605
00:20:12,660 --> 00:20:14,160
approach where we've split up our

606
00:20:14,160 --> 00:20:15,660
Automation and we're heavily leveraging

607
00:20:15,660 --> 00:20:18,120
the serverless aspect of it but if you

608
00:20:18,120 --> 00:20:19,919
know one image works for you and all the

609
00:20:19,919 --> 00:20:21,480
automations rolled up would highly

610
00:20:21,480 --> 00:20:23,460
recommend you check out that project in

611
00:20:23,460 --> 00:20:25,620
addition we use the sem rep app pretty

612
00:20:25,620 --> 00:20:27,840
successfully for a very long time while

613
00:20:27,840 --> 00:20:29,460
we were building up the capabilities of

614
00:20:29,460 --> 00:20:31,559
this platform it has fantastic

615
00:20:31,559 --> 00:20:33,480
commenting you know you can deploy it

616
00:20:33,480 --> 00:20:36,299
org-wide really well in fact one of the

617
00:20:36,299 --> 00:20:38,400
downsides was it made our other tooling

618
00:20:38,400 --> 00:20:40,140
look bad because like all its triaging

619
00:20:40,140 --> 00:20:41,580
is good it's like how do we get Brakeman

620
00:20:41,580 --> 00:20:43,500
to look that good too hence coming back

621
00:20:43,500 --> 00:20:45,539
to our pave path approach

622
00:20:45,539 --> 00:20:48,539
and so lastly just wrapping up whether

623
00:20:48,539 --> 00:20:50,039
you love or hate this approach we'd love

624
00:20:50,039 --> 00:20:52,080
to hear from you um here's some ways to

625
00:20:52,080 --> 00:20:55,020
contact me directly or our team

626
00:20:55,020 --> 00:20:57,120
um we do intend to write more about this

627
00:20:57,120 --> 00:20:59,160
project but uh if you want us to you

628
00:20:59,160 --> 00:21:00,780
know prioritize open sourcing it or you

629
00:21:00,780 --> 00:21:02,280
think this would fit your organization

630
00:21:02,280 --> 00:21:04,440
definitely let us know it'll help us you

631
00:21:04,440 --> 00:21:07,260
know prioritize that roadmap we are not

632
00:21:07,260 --> 00:21:08,760
hiring as much as we'd like to at the

633
00:21:08,760 --> 00:21:10,020
moment but we are hiring for a security

634
00:21:10,020 --> 00:21:12,360
engineer in the data security space that

635
00:21:12,360 --> 00:21:13,440
should be coming up on our careers

636
00:21:13,440 --> 00:21:15,660
website soon there's lots of other cool

637
00:21:15,660 --> 00:21:17,460
projects happening at chime

638
00:21:17,460 --> 00:21:20,039
um you know like this one and lastly

639
00:21:20,039 --> 00:21:21,780
thank you so much I know it's a choice

640
00:21:21,780 --> 00:21:25,580
being here deeply appreciate our time

641
00:21:27,539 --> 00:21:29,720
thank you

642
00:21:34,559 --> 00:21:36,179
folks in the audience we have a little

643
00:21:36,179 --> 00:21:38,100
bit of time left for our next speaker uh

644
00:21:38,100 --> 00:21:39,900
folks who want to ask a question please

645
00:21:39,900 --> 00:21:42,299
raise your hand and speak loudly we're

646
00:21:42,299 --> 00:21:43,740
asked to have the mic so everyone can

647
00:21:43,740 --> 00:21:45,000
hear what you're saying and understand

648
00:21:45,000 --> 00:21:48,140
what beautiful thoughts you

649
00:22:02,039 --> 00:22:04,620
hey Sanjay really interesting work uh I

650
00:22:04,620 --> 00:22:06,840
was curious about how you think about uh

651
00:22:06,840 --> 00:22:08,460
kind of the filtering or the aggregation

652
00:22:08,460 --> 00:22:10,200
layer on top of these alerts so like I

653
00:22:10,200 --> 00:22:11,700
assume that you know one of the images

654
00:22:11,700 --> 00:22:13,980
is you got a lot of you know um you're

655
00:22:13,980 --> 00:22:15,539
able to give you alerts in context but

656
00:22:15,539 --> 00:22:16,980
like do you see a lot of false positives

657
00:22:16,980 --> 00:22:18,900
and how do you address that yeah

658
00:22:18,900 --> 00:22:21,900
fantastic question so um really we try

659
00:22:21,900 --> 00:22:24,539
as much as self-service to uh whoever's

660
00:22:24,539 --> 00:22:26,220
spinning up the automation uh one thing

661
00:22:26,220 --> 00:22:28,440
we've seen in practice is security can

662
00:22:28,440 --> 00:22:30,299
be very specialized right so it's hard

663
00:22:30,299 --> 00:22:33,000
for one engineer to know kind of all the

664
00:22:33,000 --> 00:22:35,159
details about all these different types

665
00:22:35,159 --> 00:22:37,380
of security tooling so really what we

666
00:22:37,380 --> 00:22:39,480
try to do is uh just give the

667
00:22:39,480 --> 00:22:41,400
flexibility to whoever's spinning up the

668
00:22:41,400 --> 00:22:42,900
automation to go tune the alerts

669
00:22:42,900 --> 00:22:44,580
correctly like all the versioning of

670
00:22:44,580 --> 00:22:46,860
lambdas and all that um to let them test

671
00:22:46,860 --> 00:22:48,480
out enough so that they're kind of happy

672
00:22:48,480 --> 00:22:50,700
with their results but we have

673
00:22:50,700 --> 00:22:52,320
um basically built out in the platform

674
00:22:52,320 --> 00:22:54,480
some certain types of Primitives to

675
00:22:54,480 --> 00:22:55,620
ensure that people aren't getting

676
00:22:55,620 --> 00:22:57,419
blocked or spammed so for example for

677
00:22:57,419 --> 00:22:59,159
any new form of automation rolling

678
00:22:59,159 --> 00:23:01,140
through a platform will automatically

679
00:23:01,140 --> 00:23:02,940
ensure that you can't block pipelines

680
00:23:02,940 --> 00:23:05,280
it's just like the default until we get

681
00:23:05,280 --> 00:23:07,799
some data again we control all the data

682
00:23:07,799 --> 00:23:09,900
throughout the entire flow so until we

683
00:23:09,900 --> 00:23:11,520
get data that kind of indicates that hey

684
00:23:11,520 --> 00:23:13,080
people are actually fixing this or

685
00:23:13,080 --> 00:23:15,360
there's a good sort of hit rate then we

686
00:23:15,360 --> 00:23:16,679
can kind of open up those possibilities

687
00:23:16,679 --> 00:23:18,960
automatically but that's one way we try

688
00:23:18,960 --> 00:23:21,440
to look at it

689
00:23:25,620 --> 00:23:29,100
oh I see one one hand

690
00:23:29,100 --> 00:23:32,059
I'm looking there

691
00:23:35,640 --> 00:23:38,520
yeah great question uh so I think the

692
00:23:38,520 --> 00:23:40,260
question was uh I'm sorry I didn't

693
00:23:40,260 --> 00:23:41,520
repeat the previous question but I think

694
00:23:41,520 --> 00:23:43,860
the question was what what do you do

695
00:23:43,860 --> 00:23:45,960
when you need a copy of the full code

696
00:23:45,960 --> 00:23:48,840
and not just uh you know the diff code

697
00:23:48,840 --> 00:23:50,460
um so certain you know forms of

698
00:23:50,460 --> 00:23:52,440
automation oops certain forms of

699
00:23:52,440 --> 00:23:53,640
automation operate a little bit

700
00:23:53,640 --> 00:23:55,440
differently so things you know scanners

701
00:23:55,440 --> 00:23:57,539
like break man need a full copy of

702
00:23:57,539 --> 00:23:59,700
perhaps a code to uh performance

703
00:23:59,700 --> 00:24:01,799
execution things like code ql sound rep

704
00:24:01,799 --> 00:24:04,020
can just op copy on it you know sorry

705
00:24:04,020 --> 00:24:05,820
operate on a diff

706
00:24:05,820 --> 00:24:08,280
um and so the platform is just giving

707
00:24:08,280 --> 00:24:10,380
you all those options basically and so

708
00:24:10,380 --> 00:24:13,500
that S3 code caching step it will upload

709
00:24:13,500 --> 00:24:15,299
both a diff and a full code copy and

710
00:24:15,299 --> 00:24:17,220
depending on what your automation needs

711
00:24:17,220 --> 00:24:19,140
to pull down and operate on it can just

712
00:24:19,140 --> 00:24:21,240
like pull pull the right copy but the

713
00:24:21,240 --> 00:24:23,580
actual parsing of it is happening by the

714
00:24:23,580 --> 00:24:24,720
platform

715
00:24:24,720 --> 00:24:26,820
um so yeah hopefully that answered that

716
00:24:26,820 --> 00:24:29,000
question

717
00:24:30,059 --> 00:24:33,299
see one hand over there

718
00:24:33,299 --> 00:24:35,299
um

719
00:24:36,960 --> 00:24:39,960
oops

720
00:24:50,280 --> 00:24:54,299
hello yep okay so uh what do you think

721
00:24:54,299 --> 00:24:56,820
about uh individual pull request

722
00:24:56,820 --> 00:24:59,520
scanning versus an entire repo scanning

723
00:24:59,520 --> 00:25:03,299
uh the use case that I have here is uh

724
00:25:03,299 --> 00:25:05,940
maybe 15 to 20 lines of code pull

725
00:25:05,940 --> 00:25:08,880
request might not be containing the

726
00:25:08,880 --> 00:25:11,360
security input validation or any kind of

727
00:25:11,360 --> 00:25:13,740
mechanism that we want to actually check

728
00:25:13,740 --> 00:25:16,260
so which basically triggers some kind of

729
00:25:16,260 --> 00:25:18,240
false positives for the developers right

730
00:25:18,240 --> 00:25:20,760
so in those particular situations how

731
00:25:20,760 --> 00:25:23,280
how do you guys actually handle it and

732
00:25:23,280 --> 00:25:25,740
find unit right great question just to

733
00:25:25,740 --> 00:25:26,820
make sure I'm understanding the question

734
00:25:26,820 --> 00:25:28,080
correctly essentially what you're saying

735
00:25:28,080 --> 00:25:30,659
is hey like the diff only modified like

736
00:25:30,659 --> 00:25:32,700
let's say 15 lines but you know without

737
00:25:32,700 --> 00:25:34,559
the full context of everything happening

738
00:25:34,559 --> 00:25:36,480
around it I mean Miss vulnerability so

739
00:25:36,480 --> 00:25:37,860
how do we handle those type of

740
00:25:37,860 --> 00:25:39,659
situations is that the question even

741
00:25:39,659 --> 00:25:41,340
with the false positives I mean let's

742
00:25:41,340 --> 00:25:43,799
say for example some kind of vulnerable

743
00:25:43,799 --> 00:25:45,720
function has been used and you are

744
00:25:45,720 --> 00:25:47,700
basically flagging it out but at the

745
00:25:47,700 --> 00:25:49,500
same time the developer might be

746
00:25:49,500 --> 00:25:52,140
implementing some kind of controls at a

747
00:25:52,140 --> 00:25:54,120
different uh stage of that particular

748
00:25:54,120 --> 00:25:56,460
code right right so so basically great

749
00:25:56,460 --> 00:25:57,900
question it's just so like how do we get

750
00:25:57,900 --> 00:25:59,159
the context from all the other things

751
00:25:59,159 --> 00:26:01,260
that was not modified to get the the

752
00:26:01,260 --> 00:26:02,760
best answer to whether this is a

753
00:26:02,760 --> 00:26:04,799
vulnerability or not and actually very

754
00:26:04,799 --> 00:26:06,720
related to uh mukin's previous question

755
00:26:06,720 --> 00:26:09,240
uh what we do is if an automation

756
00:26:09,240 --> 00:26:12,059
requires a full story you know compiled

757
00:26:12,059 --> 00:26:14,279
code or full code to give you the more

758
00:26:14,279 --> 00:26:16,500
concrete answers we will let it do that

759
00:26:16,500 --> 00:26:18,659
even at the pull request level all it

760
00:26:18,659 --> 00:26:20,820
will do on top of that is once it's

761
00:26:20,820 --> 00:26:22,320
fully computed you know the full code

762
00:26:22,320 --> 00:26:24,299
and it's gone through everything what we

763
00:26:24,299 --> 00:26:26,159
will pull out is if the vulnerability

764
00:26:26,159 --> 00:26:28,559
truly was created by modifying those

765
00:26:28,559 --> 00:26:30,900
files like did the net new files really

766
00:26:30,900 --> 00:26:33,240
cause this new vulnerability and if so

767
00:26:33,240 --> 00:26:34,620
we will report it back in the pull

768
00:26:34,620 --> 00:26:36,720
request if not if that wasn't the case

769
00:26:36,720 --> 00:26:38,159
and that vulnerability is just lurking

770
00:26:38,159 --> 00:26:39,960
around from you know some other means or

771
00:26:39,960 --> 00:26:42,360
Legacy code we're just uploading it you

772
00:26:42,360 --> 00:26:44,220
know regularly into the GitHub Advanced

773
00:26:44,220 --> 00:26:45,779
security dashboard but not on a pull

774
00:26:45,779 --> 00:26:47,340
request level That's Just Happening as

775
00:26:47,340 --> 00:26:49,860
sort of a nightly roll up okay and

776
00:26:49,860 --> 00:26:52,760
doesn't that slow down the scan process

777
00:26:52,760 --> 00:26:55,140
the full code technically it doesn't

778
00:26:55,140 --> 00:26:57,240
because the the lambdas really like

779
00:26:57,240 --> 00:26:59,039
because we're caching one copy of full

780
00:26:59,039 --> 00:27:00,539
code and each Lambda doesn't need to

781
00:27:00,539 --> 00:27:02,220
pull its own copy and oper you know

782
00:27:02,220 --> 00:27:04,200
operate on it for the most part all the

783
00:27:04,200 --> 00:27:06,000
git stuff is already taken care of and

784
00:27:06,000 --> 00:27:07,799
so if a Lambda fails it can just retry

785
00:27:07,799 --> 00:27:10,080
from the point of pulling that you know

786
00:27:10,080 --> 00:27:12,539
zipped copy of the coded needs and then

787
00:27:12,539 --> 00:27:14,700
to operate typically we just put a five

788
00:27:14,700 --> 00:27:16,440
minute timeout in every scanner you saw

789
00:27:16,440 --> 00:27:18,360
is able to operate

790
00:27:18,360 --> 00:27:19,799
um you know within that timeout but we

791
00:27:19,799 --> 00:27:22,260
can increase it slightly if we need to

792
00:27:22,260 --> 00:27:23,340
thanks

793
00:27:23,340 --> 00:27:26,418
great questions thank you

794
00:27:27,860 --> 00:27:31,100
for question

795
00:27:32,960 --> 00:27:34,530
thank you so much

796
00:27:34,530 --> 00:27:37,869
[Applause]

