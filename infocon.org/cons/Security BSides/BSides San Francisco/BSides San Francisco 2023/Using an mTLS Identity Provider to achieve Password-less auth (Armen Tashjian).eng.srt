1
00:00:00,000 --> 00:00:03,740
hello everyone welcome to b-sides SF

2
00:00:03,740 --> 00:00:07,460
2023 my next presenter is Armin

3
00:00:07,460 --> 00:00:10,559
today slido is not working we will be

4
00:00:10,559 --> 00:00:13,259
doing cute live q a at the end if we

5
00:00:13,259 --> 00:00:15,420
have time if not we will be doing it in

6
00:00:15,420 --> 00:00:18,779
the lobby go ahead and take it away

7
00:00:18,779 --> 00:00:21,600
so this is a 10 000 foot view of what

8
00:00:21,600 --> 00:00:23,220
was happening in the in those previous

9
00:00:23,220 --> 00:00:26,100
slides so first a user attempted to

10
00:00:26,100 --> 00:00:28,619
access something behind OCTA

11
00:00:28,619 --> 00:00:31,380
then OCTA recognized that the user

12
00:00:31,380 --> 00:00:33,120
needed to authenticate against our

13
00:00:33,120 --> 00:00:35,180
custom identity provider

14
00:00:35,180 --> 00:00:38,460
and OCTA routes to our custom identity

15
00:00:38,460 --> 00:00:40,860
provider using IDP routing or IDP

16
00:00:40,860 --> 00:00:42,059
discovery

17
00:00:42,059 --> 00:00:44,520
our identity provider valid validates

18
00:00:44,520 --> 00:00:45,899
the device

19
00:00:45,899 --> 00:00:47,760
and then indicates to OCTA that

20
00:00:47,760 --> 00:00:50,460
authentication was successful and from

21
00:00:50,460 --> 00:00:52,440
there OCTA proceeds with the

22
00:00:52,440 --> 00:00:54,539
authentication flow prompting the user

23
00:00:54,539 --> 00:00:57,300
for for their 502 key and an OCTA

24
00:00:57,300 --> 00:01:00,620
session gets established

25
00:01:01,800 --> 00:01:04,260
apologies in advance as this slide is

26
00:01:04,260 --> 00:01:07,040
going to be pretty octa-specific

27
00:01:07,040 --> 00:01:09,119
for those that are trying to implement

28
00:01:09,119 --> 00:01:11,100
something device trust related within

29
00:01:11,100 --> 00:01:14,100
OCTA there are three options you can

30
00:01:14,100 --> 00:01:15,060
consider

31
00:01:15,060 --> 00:01:17,820
first you can use the native OCTA device

32
00:01:17,820 --> 00:01:19,280
trust Solutions

33
00:01:19,280 --> 00:01:22,740
there's a variety of options in classic

34
00:01:22,740 --> 00:01:24,740
and in oie

35
00:01:24,740 --> 00:01:27,360
you can purchase a third-party vendor

36
00:01:27,360 --> 00:01:30,060
for a device trust solution

37
00:01:30,060 --> 00:01:33,960
and you can build your own and so when

38
00:01:33,960 --> 00:01:35,759
exploring the different vendor-centric

39
00:01:35,759 --> 00:01:38,220
options one thing that became really

40
00:01:38,220 --> 00:01:40,200
apparent was most vendors try to

41
00:01:40,200 --> 00:01:42,720
integrate with OCTA using an external

42
00:01:42,720 --> 00:01:44,460
identity provider and this was a little

43
00:01:44,460 --> 00:01:46,979
confusing at first but after doing a

44
00:01:46,979 --> 00:01:48,540
little bit of research it became really

45
00:01:48,540 --> 00:01:51,420
apparent as to why this was it's because

46
00:01:51,420 --> 00:01:54,420
there's no real other way of integrating

47
00:01:54,420 --> 00:01:56,040
with OCTA to be able to do something

48
00:01:56,040 --> 00:01:59,159
like this and so if you're trying to do

49
00:01:59,159 --> 00:02:00,540
something interesting if you're trying

50
00:02:00,540 --> 00:02:02,460
to modify the authentication flow in

51
00:02:02,460 --> 00:02:05,460
some capacity you're really left with no

52
00:02:05,460 --> 00:02:07,560
other choice but to build your own

53
00:02:07,560 --> 00:02:09,899
identity provider literally take the

54
00:02:09,899 --> 00:02:12,599
user out of the ecosystem do your

55
00:02:12,599 --> 00:02:15,180
interesting thing like device trust and

56
00:02:15,180 --> 00:02:18,540
send the user back to OCTA

57
00:02:18,540 --> 00:02:20,640
and so once you have that identity

58
00:02:20,640 --> 00:02:22,260
provider there's two different ways of

59
00:02:22,260 --> 00:02:25,980
integrating with OCTA you have idps MFA

60
00:02:25,980 --> 00:02:28,260
which allows for a customer to replace

61
00:02:28,260 --> 00:02:31,319
their existing form of MFA with the

62
00:02:31,319 --> 00:02:34,020
device trust identity provider and you

63
00:02:34,020 --> 00:02:37,020
have idps SSO which allows customers to

64
00:02:37,020 --> 00:02:40,080
replace your OCTA password with the

65
00:02:40,080 --> 00:02:42,260
device trust identity provider

66
00:02:42,260 --> 00:02:45,000
however at the expense of introducing

67
00:02:45,000 --> 00:02:47,400
multiple methods of bypassing the

68
00:02:47,400 --> 00:02:50,640
external IDP so for Pinterest because we

69
00:02:50,640 --> 00:02:54,120
have this more complicated MFA policy if

70
00:02:54,120 --> 00:02:55,920
you will because of our 502 deployment

71
00:02:55,920 --> 00:02:58,620
using the IDP as MFA approach was never

72
00:02:58,620 --> 00:03:01,200
an option for us and so what we've done

73
00:03:01,200 --> 00:03:04,580
is basically use the IDP as SSO approach

74
00:03:04,580 --> 00:03:07,080
and if you're interested in how we

75
00:03:07,080 --> 00:03:09,120
mitigate all of these bypasses that I'm

76
00:03:09,120 --> 00:03:10,159
referencing

77
00:03:10,159 --> 00:03:14,099
I I'll be linking to a blog post at the

78
00:03:14,099 --> 00:03:16,080
end of the presentation so feel free to

79
00:03:16,080 --> 00:03:18,500
check it out

80
00:03:19,080 --> 00:03:22,800
all right so we have basically concluded

81
00:03:22,800 --> 00:03:24,780
that in order to do that interesting

82
00:03:24,780 --> 00:03:26,940
thing we need to build our own identity

83
00:03:26,940 --> 00:03:29,580
provider and so now the question becomes

84
00:03:29,580 --> 00:03:31,379
what do we do with that identity

85
00:03:31,379 --> 00:03:34,080
provider how do we determine whether or

86
00:03:34,080 --> 00:03:37,319
not a managed device is being used to

87
00:03:37,319 --> 00:03:38,459
authenticate

88
00:03:38,459 --> 00:03:40,400
and so

89
00:03:40,400 --> 00:03:43,379
there were three things that were top of

90
00:03:43,379 --> 00:03:45,420
mind when we were figuring out how to do

91
00:03:45,420 --> 00:03:46,980
this first

92
00:03:46,980 --> 00:03:50,040
we wanted to have an intuitive user

93
00:03:50,040 --> 00:03:52,799
experience for for our end users we

94
00:03:52,799 --> 00:03:54,900
didn't want to dramatically change how

95
00:03:54,900 --> 00:03:57,239
authentication looked or felt we didn't

96
00:03:57,239 --> 00:04:00,239
want applications to or users to have to

97
00:04:00,239 --> 00:04:02,159
switch between apps or something like

98
00:04:02,159 --> 00:04:05,760
that to to determine if a managed device

99
00:04:05,760 --> 00:04:07,440
was being used

100
00:04:07,440 --> 00:04:10,200
we wanted something that was platform

101
00:04:10,200 --> 00:04:13,200
agnostic we wanted to support all of the

102
00:04:13,200 --> 00:04:15,599
the existing platforms that we support

103
00:04:15,599 --> 00:04:18,298
at Pinterest today which includes Mac OS

104
00:04:18,298 --> 00:04:21,060
Windows Android and iOS

105
00:04:21,060 --> 00:04:23,759
and we wanted to do this in a way that

106
00:04:23,759 --> 00:04:27,060
didn't require the use of any new agents

107
00:04:27,060 --> 00:04:29,400
we didn't want to write our own iOS or

108
00:04:29,400 --> 00:04:33,479
Android apps to support this and so what

109
00:04:33,479 --> 00:04:35,220
we what we landed on

110
00:04:35,220 --> 00:04:38,639
was a certificate Centric approach to do

111
00:04:38,639 --> 00:04:40,320
device attestation

112
00:04:40,320 --> 00:04:42,419
so we use certificates that are only

113
00:04:42,419 --> 00:04:44,880
provisioned to managed Pinterest devices

114
00:04:44,880 --> 00:04:47,400
as a means of authenticating devices

115
00:04:47,400 --> 00:04:49,199
that are being used to authenticate to

116
00:04:49,199 --> 00:04:52,220
our identity provider

117
00:04:53,220 --> 00:04:55,380
so let's go a little bit deeper into the

118
00:04:55,380 --> 00:04:57,720
actual authentication flows that we

119
00:04:57,720 --> 00:05:00,780
support within our identity provider so

120
00:05:00,780 --> 00:05:03,660
we have a passwordless flow which most

121
00:05:03,660 --> 00:05:05,639
of our employees use to authenticate to

122
00:05:05,639 --> 00:05:09,780
OCTA and we have a 3fa flow which is

123
00:05:09,780 --> 00:05:12,000
used when authentication is necessary

124
00:05:12,000 --> 00:05:14,340
from a shared device

125
00:05:14,340 --> 00:05:16,620
so for the passwordless flow you'll

126
00:05:16,620 --> 00:05:18,660
notice that once the user is in our

127
00:05:18,660 --> 00:05:21,660
identity provider the user presents a

128
00:05:21,660 --> 00:05:23,880
certificate that includes both the user

129
00:05:23,880 --> 00:05:25,680
and device context

130
00:05:25,680 --> 00:05:27,840
we validate whether the certificate

131
00:05:27,840 --> 00:05:29,960
itself was valid

132
00:05:29,960 --> 00:05:33,600
and then we extract the device metadata

133
00:05:33,600 --> 00:05:36,000
from that certificate and ensure that

134
00:05:36,000 --> 00:05:37,680
the device associated with the

135
00:05:37,680 --> 00:05:40,440
certificate is in a compliance State and

136
00:05:40,440 --> 00:05:43,320
if all of that is true we give OCTA the

137
00:05:43,320 --> 00:05:45,900
thumbs up and basically say proceed with

138
00:05:45,900 --> 00:05:47,759
the authentication I have authenticated

139
00:05:47,759 --> 00:05:49,860
the user and that's where OCTA takes

140
00:05:49,860 --> 00:05:52,080
over the authentication flow prompts the

141
00:05:52,080 --> 00:05:54,300
user for their 502 key and an AUX

142
00:05:54,300 --> 00:05:56,699
session gets established

143
00:05:56,699 --> 00:05:59,639
for the 3fa flow it's a little bit more

144
00:05:59,639 --> 00:06:01,680
complicated

145
00:06:01,680 --> 00:06:05,400
um we for this particular flow we you

146
00:06:05,400 --> 00:06:06,539
might notice that there's an

147
00:06:06,539 --> 00:06:08,100
authentication flow within an

148
00:06:08,100 --> 00:06:10,139
authentication and that's why we call it

149
00:06:10,139 --> 00:06:12,419
the exhibit flow

150
00:06:12,419 --> 00:06:14,280
um so the reason why this is necessary

151
00:06:14,280 --> 00:06:17,759
is because we want to be able to support

152
00:06:17,759 --> 00:06:19,979
um shared devices and we also want a

153
00:06:19,979 --> 00:06:24,060
pathway for uh having a higher bar for

154
00:06:24,060 --> 00:06:26,220
authentication think of admin accounts

155
00:06:26,220 --> 00:06:28,740
or something like that and so there was

156
00:06:28,740 --> 00:06:31,740
a desire to introduce three factors and

157
00:06:31,740 --> 00:06:33,840
the way that we go about doing that is

158
00:06:33,840 --> 00:06:35,520
essentially triggering another

159
00:06:35,520 --> 00:06:38,400
authentication flow when the user is in

160
00:06:38,400 --> 00:06:42,000
our identity provider and so if you

161
00:06:42,000 --> 00:06:43,800
think of it in the context of an outer

162
00:06:43,800 --> 00:06:45,539
authentication flow and an inner

163
00:06:45,539 --> 00:06:47,060
authentication flow

164
00:06:47,060 --> 00:06:49,860
for the outer authentication flow it

165
00:06:49,860 --> 00:06:52,319
resembles what you see above really

166
00:06:52,319 --> 00:06:54,300
closely and the inner authentication

167
00:06:54,300 --> 00:06:56,539
flow happens and needs to be successful

168
00:06:56,539 --> 00:06:59,280
in order to complete that outer

169
00:06:59,280 --> 00:07:00,780
authentication flow

170
00:07:00,780 --> 00:07:04,680
and so this is how we can get around one

171
00:07:04,680 --> 00:07:06,600
of the limitations within OCTA which is

172
00:07:06,600 --> 00:07:09,120
that you can only enforce two forms of

173
00:07:09,120 --> 00:07:11,720
Authentication

174
00:07:14,580 --> 00:07:16,979
I may have lied a little bit when I

175
00:07:16,979 --> 00:07:19,500
alluded to the fact that Mutual TLS or

176
00:07:19,500 --> 00:07:22,199
certificate off results in a positive

177
00:07:22,199 --> 00:07:23,940
user experience

178
00:07:23,940 --> 00:07:26,819
uh in fact browser-based Mutual TLS

179
00:07:26,819 --> 00:07:29,039
often leads to a horrendous experience

180
00:07:29,039 --> 00:07:31,560
for end users as demonstrated in this

181
00:07:31,560 --> 00:07:33,960
slide so notice that within a native

182
00:07:33,960 --> 00:07:36,419
application on Android

183
00:07:36,419 --> 00:07:38,639
after canceling the certificate prompt

184
00:07:38,639 --> 00:07:41,160
there's no intuitive way for the user to

185
00:07:41,160 --> 00:07:44,160
recover from that mistake even going as

186
00:07:44,160 --> 00:07:45,960
far as restarting the application or

187
00:07:45,960 --> 00:07:48,960
refreshing the page you're not able to

188
00:07:48,960 --> 00:07:51,120
be re-prompted for that certificate

189
00:07:51,120 --> 00:07:52,020
prompt

190
00:07:52,020 --> 00:07:54,479
and so in order for us to move forward

191
00:07:54,479 --> 00:07:57,419
with a custom identity provider that

192
00:07:57,419 --> 00:07:59,880
uses certificate-based authentication as

193
00:07:59,880 --> 00:08:02,880
its primary form of auth we had to solve

194
00:08:02,880 --> 00:08:04,860
this problem and I'll explain how we

195
00:08:04,860 --> 00:08:06,660
mitigated this issue in the next few

196
00:08:06,660 --> 00:08:09,139
slides

197
00:08:09,660 --> 00:08:11,220
so the thing responsible for this

198
00:08:11,220 --> 00:08:14,400
behavior is a chromium cache called the

199
00:08:14,400 --> 00:08:17,039
SSL client auth cache this is

200
00:08:17,039 --> 00:08:19,560
responsible for caching the decision

201
00:08:19,560 --> 00:08:22,139
that a user makes when they're greeted

202
00:08:22,139 --> 00:08:24,180
with that certificate prompt

203
00:08:24,180 --> 00:08:27,479
and so the the most notable thing to

204
00:08:27,479 --> 00:08:30,539
take away from this is the entries in

205
00:08:30,539 --> 00:08:33,299
this cache are based on the host Port

206
00:08:33,299 --> 00:08:36,120
pair associated with the server or

207
00:08:36,120 --> 00:08:37,559
hostname that you're trying to interact

208
00:08:37,559 --> 00:08:38,458
with

209
00:08:38,458 --> 00:08:40,020
and so

210
00:08:40,020 --> 00:08:43,940
if we keep that in mind

211
00:08:43,940 --> 00:08:47,820
and we you know make some server-side

212
00:08:47,820 --> 00:08:50,100
changes to maybe abuse that

213
00:08:50,100 --> 00:08:53,820
functionality or or how that cache Works

214
00:08:53,820 --> 00:08:56,580
um we're able to trick the browser into

215
00:08:56,580 --> 00:08:58,320
thinking that they're continuously

216
00:08:58,320 --> 00:09:02,399
seeing a new hostname and so the way

217
00:09:02,399 --> 00:09:04,200
that we go about doing this is really

218
00:09:04,200 --> 00:09:06,300
simple we just continuously redirect

219
00:09:06,300 --> 00:09:09,180
users to random subdomains

220
00:09:09,180 --> 00:09:12,000
and so this this is what this looks like

221
00:09:12,000 --> 00:09:13,920
in production again in a native

222
00:09:13,920 --> 00:09:15,839
application on Android

223
00:09:15,839 --> 00:09:18,420
and notice this time around

224
00:09:18,420 --> 00:09:20,220
when a user is prompted for that

225
00:09:20,220 --> 00:09:23,399
certificate certificate prompt

226
00:09:23,399 --> 00:09:26,519
um canceling does not result in that

227
00:09:26,519 --> 00:09:28,560
super painful experience and in fact I

228
00:09:28,560 --> 00:09:31,019
think this is a pretty intuitive way for

229
00:09:31,019 --> 00:09:35,120
the user to recover from that mistake

230
00:09:45,660 --> 00:09:49,380
and this is the actual representation of

231
00:09:49,380 --> 00:09:51,300
the routing logic in our Edge

232
00:09:51,300 --> 00:09:53,160
infrastructure

233
00:09:53,160 --> 00:09:55,860
and so notice up top that if a valid

234
00:09:55,860 --> 00:09:57,839
client certificate isn't presented we

235
00:09:57,839 --> 00:10:00,600
perform a 302 sending the user to a

236
00:10:00,600 --> 00:10:01,980
random subdomain

237
00:10:01,980 --> 00:10:05,399
and if at that point a valid certificate

238
00:10:05,399 --> 00:10:07,620
isn't presented then we'll present the

239
00:10:07,620 --> 00:10:10,580
user with that error message

240
00:10:10,580 --> 00:10:13,380
with a button to to try to

241
00:10:13,380 --> 00:10:16,100
re-authenticate

242
00:10:16,980 --> 00:10:19,620
all right so we have reached the point

243
00:10:19,620 --> 00:10:21,240
where we've built our own identity

244
00:10:21,240 --> 00:10:22,440
provider

245
00:10:22,440 --> 00:10:25,620
we have now also determined which device

246
00:10:25,620 --> 00:10:27,600
is trying to authenticate based off of

247
00:10:27,600 --> 00:10:30,360
the certificate that was presented

248
00:10:30,360 --> 00:10:32,940
now we get to talk about how we do

249
00:10:32,940 --> 00:10:34,800
device attestation or device health

250
00:10:34,800 --> 00:10:38,580
attestation and so uh

251
00:10:38,580 --> 00:10:41,040
the first thing that we do

252
00:10:41,040 --> 00:10:43,560
is ADD authentication time we collect

253
00:10:43,560 --> 00:10:47,360
all of the data all of the device data

254
00:10:47,360 --> 00:10:50,160
associated with the device trying to

255
00:10:50,160 --> 00:10:52,380
authenticate and so we collect data from

256
00:10:52,380 --> 00:10:54,600
our log aggregation tool our EDR

257
00:10:54,600 --> 00:10:57,899
solution our MDM solution OS query and

258
00:10:57,899 --> 00:10:59,399
really anything else in our environment

259
00:10:59,399 --> 00:11:01,519
that might contain relevant information

260
00:11:01,519 --> 00:11:04,019
regarding the compliance state of a

261
00:11:04,019 --> 00:11:06,720
particular device from there we take

262
00:11:06,720 --> 00:11:09,420
that raw data and we run the devices

263
00:11:09,420 --> 00:11:11,640
through all of the compliance policies

264
00:11:11,640 --> 00:11:13,740
that exist and so each one of these

265
00:11:13,740 --> 00:11:16,440
compliance policies can result in a pass

266
00:11:16,440 --> 00:11:17,880
or fail

267
00:11:17,880 --> 00:11:21,240
and if there are no policy failures the

268
00:11:21,240 --> 00:11:23,180
authentication flow proceeds

269
00:11:23,180 --> 00:11:25,079
transparently the user doesn't know

270
00:11:25,079 --> 00:11:26,640
anything

271
00:11:26,640 --> 00:11:28,019
um about what happened in the background

272
00:11:28,019 --> 00:11:30,240
but if there are some compliance

273
00:11:30,240 --> 00:11:33,360
failures depending on the severity of

274
00:11:33,360 --> 00:11:35,339
the issue depending on the the policy

275
00:11:35,339 --> 00:11:37,860
itself will either block authentication

276
00:11:37,860 --> 00:11:39,000
outright

277
00:11:39,000 --> 00:11:42,300
or will present a user with a series of

278
00:11:42,300 --> 00:11:44,220
warnings and give the user the ability

279
00:11:44,220 --> 00:11:48,140
to proceed with the authentication flow

280
00:11:49,940 --> 00:11:53,160
and so this is an example of what an

281
00:11:53,160 --> 00:11:56,760
actual uh compliance policy looks like

282
00:11:56,760 --> 00:11:59,040
and so what I'll draw your attention to

283
00:11:59,040 --> 00:12:01,200
is on the third or fourth line you'll

284
00:12:01,200 --> 00:12:03,360
notice that the action configured for

285
00:12:03,360 --> 00:12:06,660
this policy is block so if there's a

286
00:12:06,660 --> 00:12:09,959
failure we'll block the Authentication

287
00:12:09,959 --> 00:12:13,980
and if you notice towards the bottom

288
00:12:13,980 --> 00:12:17,820
we're taking some OS query data that

289
00:12:17,820 --> 00:12:20,459
indicates whether sip is enabled or

290
00:12:20,459 --> 00:12:22,440
disabled on a device

291
00:12:22,440 --> 00:12:25,440
and so depending on the data that we get

292
00:12:25,440 --> 00:12:28,320
back from OS query will evaluate this

293
00:12:28,320 --> 00:12:32,700
policy as failing or passing

294
00:12:32,700 --> 00:12:35,339
a couple of other things that might be

295
00:12:35,339 --> 00:12:37,440
relevant here is

296
00:12:37,440 --> 00:12:40,200
um there are several different sources

297
00:12:40,200 --> 00:12:42,540
that can be incorporated into a comp

298
00:12:42,540 --> 00:12:46,019
compliance policy so if you know if we

299
00:12:46,019 --> 00:12:48,000
want to create a compliance policy that

300
00:12:48,000 --> 00:12:51,360
incorporates data from OS query or MDM

301
00:12:51,360 --> 00:12:54,180
solution or EDR solution all within one

302
00:12:54,180 --> 00:12:55,920
policy that's that's something that we

303
00:12:55,920 --> 00:12:58,219
can do

304
00:13:00,680 --> 00:13:04,019
all right my favorite slide

305
00:13:04,019 --> 00:13:06,540
um so one of the the issues that we've

306
00:13:06,540 --> 00:13:10,200
run into both with our 502 initiative as

307
00:13:10,200 --> 00:13:12,380
well as Mutual TLS

308
00:13:12,380 --> 00:13:15,720
has been related to compatibility issues

309
00:13:15,720 --> 00:13:17,399
with

310
00:13:17,399 --> 00:13:20,820
um with Native applications

311
00:13:20,820 --> 00:13:24,360
and so what we found is 99 of the time

312
00:13:24,360 --> 00:13:27,720
if we're unable to get uh Mutual TLS to

313
00:13:27,720 --> 00:13:30,360
work or we're unable to get 502 to work

314
00:13:30,360 --> 00:13:33,060
the root cause has been the use of web

315
00:13:33,060 --> 00:13:37,019
views in Native applications and so a

316
00:13:37,019 --> 00:13:39,899
webview is incapable of accessing the

317
00:13:39,899 --> 00:13:42,240
keychain that contains a certificate on

318
00:13:42,240 --> 00:13:44,519
your device and a webview also doesn't

319
00:13:44,519 --> 00:13:47,220
have access to the apis necessary to

320
00:13:47,220 --> 00:13:50,279
authenticate someone with 502 and so

321
00:13:50,279 --> 00:13:53,600
this is uh if you're an app developer

322
00:13:53,600 --> 00:13:57,540
the only embedded browsers or libraries

323
00:13:57,540 --> 00:13:59,940
that you should be using within a native

324
00:13:59,940 --> 00:14:02,519
application are up on the screen here

325
00:14:02,519 --> 00:14:04,680
and so on Android you should be using a

326
00:14:04,680 --> 00:14:07,980
chrome custom Tab and on iOS you should

327
00:14:07,980 --> 00:14:09,540
be using one of the three that are

328
00:14:09,540 --> 00:14:10,740
listed up there

329
00:14:10,740 --> 00:14:12,660
and so if there are any app developers

330
00:14:12,660 --> 00:14:14,940
in the room I would please ask that you

331
00:14:14,940 --> 00:14:17,399
stopped using webviews particularly for

332
00:14:17,399 --> 00:14:19,139
Federated auth where you're trying to

333
00:14:19,139 --> 00:14:22,260
authenticate a user against an external

334
00:14:22,260 --> 00:14:24,540
identity provider like OCTA or One login

335
00:14:24,540 --> 00:14:27,779
or Google or something like that and if

336
00:14:27,779 --> 00:14:30,360
you're interested in looking at a list

337
00:14:30,360 --> 00:14:33,019
of compiled applications

338
00:14:33,019 --> 00:14:36,480
that we know are not compatible with 502

339
00:14:36,480 --> 00:14:39,360
in mutual TLS or if you're interested in

340
00:14:39,360 --> 00:14:41,459
adding to that list please visit

341
00:14:41,459 --> 00:14:44,459
fido.fail

342
00:14:46,399 --> 00:14:49,199
and with that I will open it up for

343
00:14:49,199 --> 00:14:52,560
questions thank you for your time

344
00:14:52,560 --> 00:14:55,099
all right

345
00:14:58,260 --> 00:15:00,839
go ahead okay we have about five minutes

346
00:15:00,839 --> 00:15:03,680
for questions

347
00:15:05,880 --> 00:15:08,579
coming around

348
00:15:08,579 --> 00:15:12,480
uh it's getting recorded So if you could

349
00:15:12,480 --> 00:15:15,899
use the microphone thank you

350
00:15:15,899 --> 00:15:19,680
hello so uh I guess two questions I also

351
00:15:19,680 --> 00:15:22,279
implementing October my company

352
00:15:22,279 --> 00:15:24,240
and

353
00:15:24,240 --> 00:15:26,820
what is your oidc provider based off of

354
00:15:26,820 --> 00:15:28,260
is it like an open framework or did you

355
00:15:28,260 --> 00:15:30,180
guys build it from scratch your custom

356
00:15:30,180 --> 00:15:31,440
IDP

357
00:15:31,440 --> 00:15:34,199
uh so we built it from scratch oh fun so

358
00:15:34,199 --> 00:15:37,019
what what is the underlying flow for

359
00:15:37,019 --> 00:15:39,320
mtls support

360
00:15:39,320 --> 00:15:42,480
uh so there isn't actually any sort of

361
00:15:42,480 --> 00:15:44,699
mtls support in the identity provider

362
00:15:44,699 --> 00:15:47,699
itself the the way that this works is we

363
00:15:47,699 --> 00:15:50,579
handle the TLs termination on our Edge

364
00:15:50,579 --> 00:15:53,220
infrastructure within Envoy and the

365
00:15:53,220 --> 00:15:55,980
service itself is basically an oidc

366
00:15:55,980 --> 00:15:58,680
provider with no authentication and so

367
00:15:58,680 --> 00:16:00,300
this is more of a Pinterest

368
00:16:00,300 --> 00:16:02,519
infrastructure specific thing but the

369
00:16:02,519 --> 00:16:04,500
the way that this works is the oidc

370
00:16:04,500 --> 00:16:09,060
provider is is basically relying on our

371
00:16:09,060 --> 00:16:11,699
Edge infrastructure Envoy to validate

372
00:16:11,699 --> 00:16:13,860
the Integrity of the certificate before

373
00:16:13,860 --> 00:16:17,100
routing to our uh to our service

374
00:16:17,100 --> 00:16:19,500
okay so I mean I guess that goes down to

375
00:16:19,500 --> 00:16:20,880
my second question how do you distribute

376
00:16:20,880 --> 00:16:22,680
a search and make sure that the cert is

377
00:16:22,680 --> 00:16:24,959
only tied to a specific device

378
00:16:24,959 --> 00:16:28,560
yeah so for certificate provisioning

379
00:16:28,560 --> 00:16:30,360
in our environment we only provision

380
00:16:30,360 --> 00:16:32,699
certificates to devices that are

381
00:16:32,699 --> 00:16:36,120
enrolled in our MDM and so for us MDM

382
00:16:36,120 --> 00:16:39,980
enrollment equals manage device

383
00:16:41,279 --> 00:16:42,360
have you looked at the proof of

384
00:16:42,360 --> 00:16:43,800
possession tokens

385
00:16:43,800 --> 00:16:47,420
no okay yeah

386
00:16:48,000 --> 00:16:52,279
do I have any more questions hands

387
00:16:54,839 --> 00:16:57,720
sorry I can't see the front side

388
00:16:57,720 --> 00:17:00,500
come in

389
00:17:04,199 --> 00:17:06,119
uh are you doing anything that's in

390
00:17:06,119 --> 00:17:09,419
particularly targeted at um

391
00:17:09,419 --> 00:17:10,679
shoot

392
00:17:10,679 --> 00:17:13,020
uh session hijacking or is that covered

393
00:17:13,020 --> 00:17:14,459
by like other

394
00:17:14,459 --> 00:17:16,140
um security things that you went over

395
00:17:16,140 --> 00:17:17,220
earlier

396
00:17:17,220 --> 00:17:20,459
so for session hijacking the way that we

397
00:17:20,459 --> 00:17:22,260
address that specifically is is not

398
00:17:22,260 --> 00:17:25,260
directly related to device trust and how

399
00:17:25,260 --> 00:17:27,059
we're doing this the way that we address

400
00:17:27,059 --> 00:17:30,120
that is by requiring a 502 prompt for

401
00:17:30,120 --> 00:17:32,400
every application access attempt

402
00:17:32,400 --> 00:17:35,660
and so yeah

403
00:17:36,780 --> 00:17:39,419
for for 502 yeah yeah

404
00:17:39,419 --> 00:17:41,100
okay we have three more minutes for

405
00:17:41,100 --> 00:17:43,080
questions

406
00:17:43,080 --> 00:17:46,559
have you recorded any metrics of the

407
00:17:46,559 --> 00:17:48,720
success of like improving your device

408
00:17:48,720 --> 00:17:51,000
compliance since instituting the system

409
00:17:51,000 --> 00:17:54,360
and can you share uh so in terms of the

410
00:17:54,360 --> 00:17:56,880
the compliance uh the compliance

411
00:17:56,880 --> 00:18:00,720
checking piece uh admittedly that has

412
00:18:00,720 --> 00:18:04,260
been deployed not too long ago so I want

413
00:18:04,260 --> 00:18:07,080
to say less than six weeks ago and we've

414
00:18:07,080 --> 00:18:08,700
started out with only a handful of

415
00:18:08,700 --> 00:18:11,880
policies and so there isn't enough data

416
00:18:11,880 --> 00:18:14,880
right now to really demonstrate how

417
00:18:14,880 --> 00:18:17,340
presenting users with warnings is

418
00:18:17,340 --> 00:18:18,260
actually

419
00:18:18,260 --> 00:18:21,120
affecting the compliance State there was

420
00:18:21,120 --> 00:18:22,980
a moment on the second week where it

421
00:18:22,980 --> 00:18:25,380
looked like we had like 40 percent less

422
00:18:25,380 --> 00:18:27,600
compliance failures and then it spiked

423
00:18:27,600 --> 00:18:29,220
up the next week so I would say at this

424
00:18:29,220 --> 00:18:31,679
point it's it's a bit too early for us

425
00:18:31,679 --> 00:18:34,500
to say as it relates to like presenting

426
00:18:34,500 --> 00:18:36,179
warnings to users for compliance

427
00:18:36,179 --> 00:18:37,320
failures

428
00:18:37,320 --> 00:18:39,120
um yeah

429
00:18:39,120 --> 00:18:43,039
any further questions coming

430
00:18:51,539 --> 00:18:54,419
just a follow-up why OCTA you got your

431
00:18:54,419 --> 00:18:56,820
own IDC provider it's just for saml and

432
00:18:56,820 --> 00:18:58,500
apps

433
00:18:58,500 --> 00:19:00,840
this is a uh this is a spicy question

434
00:19:00,840 --> 00:19:04,440
yeah uh I don't know if I should answer

435
00:19:04,440 --> 00:19:06,900
that question but I I think at the end

436
00:19:06,900 --> 00:19:09,179
of the day it's it's

437
00:19:09,179 --> 00:19:09,960
um

438
00:19:09,960 --> 00:19:13,620
not entirely in my control and so we

439
00:19:13,620 --> 00:19:15,120
don't actually own from the security

440
00:19:15,120 --> 00:19:17,160
perspectives the security team doesn't

441
00:19:17,160 --> 00:19:20,580
actually own OCTA and um it would be

442
00:19:20,580 --> 00:19:22,919
very difficult to move off of OCTA I

443
00:19:22,919 --> 00:19:23,880
think

444
00:19:23,880 --> 00:19:25,200
um you know

445
00:19:25,200 --> 00:19:27,620
okay

446
00:19:28,080 --> 00:19:31,320
okay that'll be our last question any

447
00:19:31,320 --> 00:19:33,480
further questions can be asked in the

448
00:19:33,480 --> 00:19:36,960
lobby but I would like to say on behalf

449
00:19:36,960 --> 00:19:41,400
of a b-sides SF and our sponsor gift

450
00:19:41,400 --> 00:19:44,460
sponsor Dorian SEC that we thank you for

451
00:19:44,460 --> 00:19:46,440
being here today thank you so much and

452
00:19:46,440 --> 00:19:49,030
thank you all yeah thanks everyone

453
00:19:49,030 --> 00:19:53,089
[Applause]

