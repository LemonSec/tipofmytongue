1
00:00:00,000 --> 00:00:02,399
uh hi everyone my name is Dean I've been

2
00:00:02,399 --> 00:00:03,540
working

3
00:00:03,540 --> 00:00:05,580
um part of the security team I live for

4
00:00:05,580 --> 00:00:07,200
five years software engineer there

5
00:00:07,200 --> 00:00:08,760
that's focusing on infrastructure

6
00:00:08,760 --> 00:00:11,400
security I'm really excited to be

7
00:00:11,400 --> 00:00:12,660
talking about this project that we

8
00:00:12,660 --> 00:00:14,160
worked on at Lyft

9
00:00:14,160 --> 00:00:15,540
um there were many people who've

10
00:00:15,540 --> 00:00:18,300
contributed to this project too I'm just

11
00:00:18,300 --> 00:00:21,660
fortunate to be presenting on a lot of

12
00:00:21,660 --> 00:00:23,460
people's uh behalf here so I just wanted

13
00:00:23,460 --> 00:00:25,740
to acknowledge them and also thank them

14
00:00:25,740 --> 00:00:27,599
so well Ingress filtering from the

15
00:00:27,599 --> 00:00:29,519
internet to your services is very common

16
00:00:29,519 --> 00:00:32,040
using firewalls it is far less common

17
00:00:32,040 --> 00:00:34,739
that people are observing traffic that's

18
00:00:34,739 --> 00:00:37,980
leaving their services Network it's it's

19
00:00:37,980 --> 00:00:39,719
one of the most impactful things that

20
00:00:39,719 --> 00:00:41,820
you could do for your company

21
00:00:41,820 --> 00:00:43,440
um if you don't observe and control this

22
00:00:43,440 --> 00:00:45,239
traffic it's it's a significant risk

23
00:00:45,239 --> 00:00:48,020
where uh if a service becomes

24
00:00:48,020 --> 00:00:50,700
compromised then oftentimes the threat

25
00:00:50,700 --> 00:00:52,860
actor is going to potentially exfil data

26
00:00:52,860 --> 00:00:54,660
download arbitrary payloads during run

27
00:00:54,660 --> 00:00:56,460
time or a call back to command and

28
00:00:56,460 --> 00:00:57,480
control

29
00:00:57,480 --> 00:00:59,579
so there's a couple recent prominent

30
00:00:59,579 --> 00:01:01,620
hacks that answer certain people have

31
00:01:01,620 --> 00:01:03,059
heard about or at this point really sick

32
00:01:03,059 --> 00:01:04,739
of hearing

33
00:01:04,739 --> 00:01:06,600
um solarwinds supply chain attack use

34
00:01:06,600 --> 00:01:07,799
the back door that regularly

35
00:01:07,799 --> 00:01:09,420
communicated with command and control

36
00:01:09,420 --> 00:01:11,880
through DNS and http

37
00:01:11,880 --> 00:01:15,060
uh the log4 shell log 4J vulnerability

38
00:01:15,060 --> 00:01:17,700
another zero day all hands on deck type

39
00:01:17,700 --> 00:01:19,979
event where um everyone wished they had

40
00:01:19,979 --> 00:01:21,659
some sort of egress filtering during

41
00:01:21,659 --> 00:01:22,740
this time

42
00:01:22,740 --> 00:01:24,659
so when when exploring these types of

43
00:01:24,659 --> 00:01:27,000
vulnerabilities like log4j attackers

44
00:01:27,000 --> 00:01:29,939
often still need to uh make an egress

45
00:01:29,939 --> 00:01:31,200
call

46
00:01:31,200 --> 00:01:33,840
um to download additional payloads or to

47
00:01:33,840 --> 00:01:37,500
exfil data so being able to control this

48
00:01:37,500 --> 00:01:40,740
egos traffic can directly help mitigate

49
00:01:40,740 --> 00:01:43,799
zero days like this

50
00:01:43,799 --> 00:01:46,079
uh so why is this difficult why aren't

51
00:01:46,079 --> 00:01:48,479
more people doing this today uh the

52
00:01:48,479 --> 00:01:50,280
first call out it's it's people it's

53
00:01:50,280 --> 00:01:53,159
organizational you need to convince the

54
00:01:53,159 --> 00:01:55,320
decision makers that you are going to

55
00:01:55,320 --> 00:01:57,899
now funnel all your traffic through a

56
00:01:57,899 --> 00:02:01,259
proxy a single point of failure and that

57
00:02:01,259 --> 00:02:03,420
the security benefits of doing so will

58
00:02:03,420 --> 00:02:05,640
outweigh the risk of this single point

59
00:02:05,640 --> 00:02:08,038
of failure so now you need also this

60
00:02:08,038 --> 00:02:10,139
team to operate this Mission critical

61
00:02:10,139 --> 00:02:13,920
proxy it's it's high stakes right at

62
00:02:13,920 --> 00:02:15,420
Lyft this was a bit of a culture shift

63
00:02:15,420 --> 00:02:17,580
for our security team because we weren't

64
00:02:17,580 --> 00:02:19,739
known historically for operating these

65
00:02:19,739 --> 00:02:22,140
Mission critical services and we were

66
00:02:22,140 --> 00:02:23,640
the ones building and driving this

67
00:02:23,640 --> 00:02:26,099
initiative we have a culture where if

68
00:02:26,099 --> 00:02:28,200
you build it then you have to operate it

69
00:02:28,200 --> 00:02:30,360
so you're you're really incentivized to

70
00:02:30,360 --> 00:02:32,700
make sure it's running well

71
00:02:32,700 --> 00:02:34,020
um our Engineers were actually really

72
00:02:34,020 --> 00:02:35,879
excited to be taking and and we lean

73
00:02:35,879 --> 00:02:38,940
into this opportunity to do this

74
00:02:38,940 --> 00:02:40,560
so now let's talk about why this is

75
00:02:40,560 --> 00:02:42,060
technically difficult

76
00:02:42,060 --> 00:02:43,680
um and it really boils down to two

77
00:02:43,680 --> 00:02:47,099
things uh TLS encrypted traffic and DNS

78
00:02:47,099 --> 00:02:48,480
right how do you control DNS

79
00:02:48,480 --> 00:02:50,580
exfiltration attempts

80
00:02:50,580 --> 00:02:52,319
um the vast majority of your egress

81
00:02:52,319 --> 00:02:54,180
traffic is going to be tilis encrypted

82
00:02:54,180 --> 00:02:56,519
web traffic https let's talk about that

83
00:02:56,519 --> 00:02:57,959
first

84
00:02:57,959 --> 00:02:59,700
um a reminder of these are the steps

85
00:02:59,700 --> 00:03:02,099
that occur when you establish a TLS

86
00:03:02,099 --> 00:03:05,580
connection and HTTP request so like

87
00:03:05,580 --> 00:03:07,800
let's say we were to funnel this traffic

88
00:03:07,800 --> 00:03:10,319
through a proxy uh just transparently

89
00:03:10,319 --> 00:03:12,420
and we're not going to be manually

90
00:03:12,420 --> 00:03:15,180
Milling anything there's really only a

91
00:03:15,180 --> 00:03:16,800
few attributes that we could control

92
00:03:16,800 --> 00:03:19,560
this traffic right we have IP address

93
00:03:19,560 --> 00:03:22,440
available to us we have the ports maybe

94
00:03:22,440 --> 00:03:24,420
we have Sni and I have this highlighted

95
00:03:24,420 --> 00:03:25,920
in a question mark because not all

96
00:03:25,920 --> 00:03:28,980
clients relay this information and

97
00:03:28,980 --> 00:03:30,659
there's the potential down the line that

98
00:03:30,659 --> 00:03:33,560
sn9 might be even encrypted

99
00:03:33,560 --> 00:03:36,060
so let's talk about also the options

100
00:03:36,060 --> 00:03:37,319
explored

101
00:03:37,319 --> 00:03:39,120
um that we we did at Lyft so these are

102
00:03:39,120 --> 00:03:40,799
things that we explore but ultimate

103
00:03:40,799 --> 00:03:42,080
didn't go down

104
00:03:42,080 --> 00:03:44,640
and uh one of the first things is man in

105
00:03:44,640 --> 00:03:45,900
the middle this man in the middle all

106
00:03:45,900 --> 00:03:47,879
TLS traffic so this directly addresses

107
00:03:47,879 --> 00:03:49,680
the Tran uh the challenges faced with

108
00:03:49,680 --> 00:03:50,700
TLS

109
00:03:50,700 --> 00:03:52,920
so this is where we decrypt everything

110
00:03:52,920 --> 00:03:55,140
and now we can control traffic based on

111
00:03:55,140 --> 00:03:57,239
the host name the URLs and the payloads

112
00:03:57,239 --> 00:03:59,519
if we wanted to but we felt this this

113
00:03:59,519 --> 00:04:01,860
really introduced too much risk for us

114
00:04:01,860 --> 00:04:03,959
to adopt this option right you're you're

115
00:04:03,959 --> 00:04:05,819
essentially breaking into an encryption

116
00:04:05,819 --> 00:04:07,620
and uh there's going to be a single

117
00:04:07,620 --> 00:04:09,120
point where all traffic is being

118
00:04:09,120 --> 00:04:11,700
decrypted now you also have to worry

119
00:04:11,700 --> 00:04:12,900
about managing your own certificate

120
00:04:12,900 --> 00:04:15,120
Authority and then um how would you you

121
00:04:15,120 --> 00:04:16,560
need all services to trust a roof

122
00:04:16,560 --> 00:04:18,298
certificate and then you know worry

123
00:04:18,298 --> 00:04:20,399
about um how to rotate and manage the

124
00:04:20,399 --> 00:04:22,500
life cycles of these certificates

125
00:04:22,500 --> 00:04:24,000
so we thought all right let's try to

126
00:04:24,000 --> 00:04:25,020
keep things a little bit more simpler

127
00:04:25,020 --> 00:04:27,180
let's just cruelt control DNS all

128
00:04:27,180 --> 00:04:29,340
requests make DNS requests right

129
00:04:29,340 --> 00:04:31,380
we'll maintain an allow list of domains

130
00:04:31,380 --> 00:04:32,699
that services are only allowed to

131
00:04:32,699 --> 00:04:33,780
resolve

132
00:04:33,780 --> 00:04:35,940
but this doesn't quite work out

133
00:04:35,940 --> 00:04:38,100
completely because of a threat actor or

134
00:04:38,100 --> 00:04:39,660
compromises a service they could just

135
00:04:39,660 --> 00:04:41,699
circumvent DNS altogether and if they

136
00:04:41,699 --> 00:04:44,280
just use the IP address directly

137
00:04:44,280 --> 00:04:46,259
so then we thought well okay

138
00:04:46,259 --> 00:04:48,419
um let's pre-resolve all the hosts so

139
00:04:48,419 --> 00:04:50,100
we'll maintain two allow this we'll have

140
00:04:50,100 --> 00:04:51,720
an allowed list of hostname and then

141
00:04:51,720 --> 00:04:53,580
we'll have an allow list of IP addresses

142
00:04:53,580 --> 00:04:55,620
so we'll constantly pre-resolve all

143
00:04:55,620 --> 00:04:58,080
these hosts in the background sync these

144
00:04:58,080 --> 00:05:00,720
to a layer 3 proxy and if a service

145
00:05:00,720 --> 00:05:03,000
egress is out to an IP address that

146
00:05:03,000 --> 00:05:05,280
hasn't been pre-resolved then we're just

147
00:05:05,280 --> 00:05:07,800
going to block it

148
00:05:07,800 --> 00:05:09,900
um I I think this actually might work

149
00:05:09,900 --> 00:05:12,300
out in theory I'm just not sure if it's

150
00:05:12,300 --> 00:05:14,520
really practical at scale

151
00:05:14,520 --> 00:05:16,860
um so we were actually really close to

152
00:05:16,860 --> 00:05:18,780
go down this route but ultimately

153
00:05:18,780 --> 00:05:21,540
decided not to it just felt pretty yucky

154
00:05:21,540 --> 00:05:24,180
like really messy

155
00:05:24,180 --> 00:05:26,039
so now let's talk about

156
00:05:26,039 --> 00:05:28,699
um what we did ultimately decide to do

157
00:05:28,699 --> 00:05:31,500
so this was our ultimate design goal at

158
00:05:31,500 --> 00:05:33,479
Lyft we really wanted to delineate

159
00:05:33,479 --> 00:05:35,520
Services into public and private subnets

160
00:05:35,520 --> 00:05:37,740
we wanted to force all outbound traffic

161
00:05:37,740 --> 00:05:40,620
through a proxy and at Lyft we use Envoy

162
00:05:40,620 --> 00:05:43,080
uh because well we built Envoy at lift

163
00:05:43,080 --> 00:05:45,479
particularly Matt Klein did and I don't

164
00:05:45,479 --> 00:05:46,860
want to go too many of the details of

165
00:05:46,860 --> 00:05:49,080
what Envoy is there are entire

166
00:05:49,080 --> 00:05:51,600
conferences just dedicated to Envoy and

167
00:05:51,600 --> 00:05:53,820
the will is really deep there but for

168
00:05:53,820 --> 00:05:55,740
our proper purposes

169
00:05:55,740 --> 00:05:57,600
um for the purpose of this talk just

170
00:05:57,600 --> 00:05:59,699
know it's a proxy and it's a very highly

171
00:05:59,699 --> 00:06:01,979
extendable proxy at that

172
00:06:01,979 --> 00:06:04,500
so private subnets they're defined by

173
00:06:04,500 --> 00:06:06,720
two nice characteristics

174
00:06:06,720 --> 00:06:08,460
um first characteristic is internet

175
00:06:08,460 --> 00:06:11,039
egress traffic cannot go directly out to

176
00:06:11,039 --> 00:06:13,860
the internet it must first uh Traverse a

177
00:06:13,860 --> 00:06:16,199
Gateway or proxy that lives on the

178
00:06:16,199 --> 00:06:18,120
public subnet and the second nice

179
00:06:18,120 --> 00:06:20,460
characteristic is there's no public IP

180
00:06:20,460 --> 00:06:22,080
addresses assigned to the service

181
00:06:22,080 --> 00:06:23,819
there's no public interfaces so you're

182
00:06:23,819 --> 00:06:25,860
not a a single Security Group

183
00:06:25,860 --> 00:06:27,720
misconfiguration in a way or accidental

184
00:06:27,720 --> 00:06:29,100
firewall configuration away from

185
00:06:29,100 --> 00:06:30,840
directly exposing your services to the

186
00:06:30,840 --> 00:06:32,280
internet

187
00:06:32,280 --> 00:06:34,500
so whatever you do decide to do to

188
00:06:34,500 --> 00:06:36,360
improve your uh the network security

189
00:06:36,360 --> 00:06:38,160
posture of your services I would argue

190
00:06:38,160 --> 00:06:39,840
it should get you one step closer to

191
00:06:39,840 --> 00:06:40,919
this model

192
00:06:40,919 --> 00:06:43,259
at Lyft we use AWS and it's very

193
00:06:43,259 --> 00:06:44,880
difficult just to start with this model

194
00:06:44,880 --> 00:06:47,520
because a lot of aws's services their

195
00:06:47,520 --> 00:06:49,560
offerings by default will Traverse the

196
00:06:49,560 --> 00:06:52,080
public internet right like S3 dynamodb

197
00:06:52,080 --> 00:06:54,120
STS these all Traverse the public

198
00:06:54,120 --> 00:06:56,940
internet by default

199
00:06:56,940 --> 00:06:59,460
so lit is also a microservices

200
00:06:59,460 --> 00:07:01,380
architecture and we have over a thousand

201
00:07:01,380 --> 00:07:03,360
services that live and we ultimately

202
00:07:03,360 --> 00:07:04,680
wanted to know the individual services

203
00:07:04,680 --> 00:07:06,060
that are egressing out to the internet

204
00:07:06,060 --> 00:07:07,800
and because we're not manually mailing

205
00:07:07,800 --> 00:07:10,500
traffic we felt that the majority of the

206
00:07:10,500 --> 00:07:12,180
value we get is just from controlling

207
00:07:12,180 --> 00:07:14,340
the domains that we're allowed to egress

208
00:07:14,340 --> 00:07:16,500
to so we wanted to be really granular

209
00:07:16,500 --> 00:07:18,360
every individual's Downstream service is

210
00:07:18,360 --> 00:07:20,039
going to have this unique allow list of

211
00:07:20,039 --> 00:07:21,720
Upstream domains so we could represent

212
00:07:21,720 --> 00:07:23,520
this as a dictionary mapping that we see

213
00:07:23,520 --> 00:07:26,099
here right so a thousand services and a

214
00:07:26,099 --> 00:07:28,860
thousand unique allow lists

215
00:07:28,860 --> 00:07:30,960
if a Services continue to reach a host

216
00:07:30,960 --> 00:07:32,759
that's not an allow list it would just

217
00:07:32,759 --> 00:07:34,680
block it

218
00:07:34,680 --> 00:07:37,380
so a quick primer on proxy types there's

219
00:07:37,380 --> 00:07:39,539
ultimately two types of proxies that

220
00:07:39,539 --> 00:07:42,840
Lyft uses as the foundation to uh for

221
00:07:42,840 --> 00:07:45,599
its egress restriction and the first is

222
00:07:45,599 --> 00:07:48,720
the client aware connect proxy where we

223
00:07:48,720 --> 00:07:50,880
wanted services to permanently use we've

224
00:07:50,880 --> 00:07:52,860
been calling this this happy path at

225
00:07:52,860 --> 00:07:56,699
Lyft so denoted by this sun emoji here

226
00:07:56,699 --> 00:07:59,099
um we want all service to use this and

227
00:07:59,099 --> 00:08:01,080
as a secondary path we call it

228
00:08:01,080 --> 00:08:02,819
transparent proxies this is going to be

229
00:08:02,819 --> 00:08:05,400
a catch-all it's going to catch all this

230
00:08:05,400 --> 00:08:07,680
leaky traffic that's not a bane to

231
00:08:07,680 --> 00:08:09,000
connect proxy

232
00:08:09,000 --> 00:08:11,280
we'll also dive a little bit later we

233
00:08:11,280 --> 00:08:13,139
also have additional levers to control

234
00:08:13,139 --> 00:08:14,699
traffic that we do see in the

235
00:08:14,699 --> 00:08:16,919
transparent proxy

236
00:08:16,919 --> 00:08:18,479
so client aware connect proxy is

237
00:08:18,479 --> 00:08:20,099
self-descriptive you may also have the

238
00:08:20,099 --> 00:08:22,020
term explicit proxy and it's where the

239
00:08:22,020 --> 00:08:23,580
service or the client knows that there's

240
00:08:23,580 --> 00:08:25,139
a proxy Stadium between it and the

241
00:08:25,139 --> 00:08:26,400
Upstream server

242
00:08:26,400 --> 00:08:28,740
so connect is an HTTP method majority of

243
00:08:28,740 --> 00:08:30,539
you all probably heard of getting post

244
00:08:30,539 --> 00:08:32,458
requests well HTTP connect is just

245
00:08:32,458 --> 00:08:35,520
another HTTP verb and what it is is it's

246
00:08:35,520 --> 00:08:38,700
an instruction for a proxy to open a TCB

247
00:08:38,700 --> 00:08:41,039
connection to an upstream host as soon

248
00:08:41,039 --> 00:08:43,260
as that TCP connection is open the proxy

249
00:08:43,260 --> 00:08:46,380
just 40 bytes back and forth

250
00:08:46,380 --> 00:08:49,019
and what this diagram depicts um is is

251
00:08:49,019 --> 00:08:52,140
the steps that a connect proxy uh calls

252
00:08:52,140 --> 00:08:54,600
make and there's really two important

253
00:08:54,600 --> 00:08:56,220
highlights within this diagram that

254
00:08:56,220 --> 00:08:57,600
makes it really attractive to control

255
00:08:57,600 --> 00:09:00,180
egress traffic the first important

256
00:09:00,180 --> 00:09:02,519
highlight is DNS you've offloaded the

257
00:09:02,519 --> 00:09:05,100
responsibility of DNS resolutions now to

258
00:09:05,100 --> 00:09:07,860
the proxy so this makes it a lot easier

259
00:09:07,860 --> 00:09:11,040
to control DNS for your services because

260
00:09:11,040 --> 00:09:13,140
now there's no reason for external

261
00:09:13,140 --> 00:09:15,300
resolutions to happen from the service

262
00:09:15,300 --> 00:09:18,060
uh the second attractive aspect is you

263
00:09:18,060 --> 00:09:19,260
get this really

264
00:09:19,260 --> 00:09:21,120
um you get this nice Tuple you get to

265
00:09:21,120 --> 00:09:22,920
see the Upstream hosts that the service

266
00:09:22,920 --> 00:09:25,380
is attempting to connect to and you also

267
00:09:25,380 --> 00:09:27,899
get the downstream host uh that's that's

268
00:09:27,899 --> 00:09:31,080
making this call so we can inject these

269
00:09:31,080 --> 00:09:32,940
um the downstream hosts as an HTTP

270
00:09:32,940 --> 00:09:35,360
header

271
00:09:35,700 --> 00:09:37,620
um there's ways multiple ways you could

272
00:09:37,620 --> 00:09:40,019
configure connect proxy uh the first way

273
00:09:40,019 --> 00:09:42,120
that I uh that we use that Lyft is we

274
00:09:42,120 --> 00:09:43,920
can check these HTTP environmental

275
00:09:43,920 --> 00:09:46,740
variables to all our services at Lyft

276
00:09:46,740 --> 00:09:48,899
um so if an HTTP client sees these

277
00:09:48,899 --> 00:09:50,279
environmental variables and knows it

278
00:09:50,279 --> 00:09:53,820
must first make a HTTP connect tunnel

279
00:09:53,820 --> 00:09:55,200
and then there's also other ways like

280
00:09:55,200 --> 00:09:57,420
you could also divide it in code so this

281
00:09:57,420 --> 00:10:00,120
is a short python snippet that shows how

282
00:10:00,120 --> 00:10:02,399
to use a connect proxy but the the first

283
00:10:02,399 --> 00:10:04,080
option definitely is a lot more

284
00:10:04,080 --> 00:10:06,600
attractive because

285
00:10:06,600 --> 00:10:10,380
um uh it's it's language agnostic

286
00:10:10,380 --> 00:10:12,420
so just to drive the point home a TCP

287
00:10:12,420 --> 00:10:14,339
dump of a connect call so this really

288
00:10:14,339 --> 00:10:16,019
nice Tuple that you're interested in you

289
00:10:16,019 --> 00:10:17,940
have the Upstream hosts uh that's

290
00:10:17,940 --> 00:10:20,399
highlighting red apairlift.com and then

291
00:10:20,399 --> 00:10:22,980
you have the downstream hostname uh this

292
00:10:22,980 --> 00:10:26,160
basic64 encoded value as the host so

293
00:10:26,160 --> 00:10:28,080
some of y'all might be thinking or just

294
00:10:28,080 --> 00:10:29,640
kind of tricking your head like how do

295
00:10:29,640 --> 00:10:31,620
you authenticate to their proxy and it's

296
00:10:31,620 --> 00:10:33,540
an orthogonal talk that I honestly can

297
00:10:33,540 --> 00:10:36,120
spin to a separate talk but just for the

298
00:10:36,120 --> 00:10:38,279
basis of these talks this particular

299
00:10:38,279 --> 00:10:40,260
talk is just out of scope but find me

300
00:10:40,260 --> 00:10:41,940
afterwards if you have more questions on

301
00:10:41,940 --> 00:10:43,560
that

302
00:10:43,560 --> 00:10:45,899
so let's talk about the other path uh

303
00:10:45,899 --> 00:10:47,339
transparent proxies they work by

304
00:10:47,339 --> 00:10:49,200
rerouting traffic without the client

305
00:10:49,200 --> 00:10:51,000
knowing and this can be done through

306
00:10:51,000 --> 00:10:55,019
iptables so ibtables will redirect all

307
00:10:55,019 --> 00:10:57,899
inner bound traffic to a proxy and it's

308
00:10:57,899 --> 00:10:59,940
vastly more complicated compared to the

309
00:10:59,940 --> 00:11:02,040
client aware proxy and again primarily

310
00:11:02,040 --> 00:11:04,440
due to TLS encrypted traffic and then

311
00:11:04,440 --> 00:11:07,920
DNS exfiltration so once the proxy

312
00:11:07,920 --> 00:11:09,779
receives the redirected traffic it has

313
00:11:09,779 --> 00:11:12,839
many ways to Route this traffic so

314
00:11:12,839 --> 00:11:15,320
ibtables operates on layer four three

315
00:11:15,320 --> 00:11:18,300
and once the proxy sees this redirected

316
00:11:18,300 --> 00:11:19,320
traffic

317
00:11:19,320 --> 00:11:19,920
um

318
00:11:19,920 --> 00:11:22,079
if it's if the traffic is TLS you have

319
00:11:22,079 --> 00:11:24,060
the option to allow a block on Sni but

320
00:11:24,060 --> 00:11:26,160
there's no guarantee we have Sni if it's

321
00:11:26,160 --> 00:11:28,740
plain text HTTP we can block route based

322
00:11:28,740 --> 00:11:30,360
on HTTP host headers and then for

323
00:11:30,360 --> 00:11:32,160
everything else you could block allow

324
00:11:32,160 --> 00:11:34,640
based on IP and then finally again

325
00:11:34,640 --> 00:11:36,779
because the client doesn't know there's

326
00:11:36,779 --> 00:11:38,519
a proxy sitting between it and the

327
00:11:38,519 --> 00:11:40,320
Upstream host is attempting to reach out

328
00:11:40,320 --> 00:11:43,019
to you now have to worry about DNS

329
00:11:43,019 --> 00:11:45,899
so cool now we've covered

330
00:11:45,899 --> 00:11:48,120
um the foundations of what we use the

331
00:11:48,120 --> 00:11:50,279
connect proxy and the transparent proxy

332
00:11:50,279 --> 00:11:52,200
how do we actually use this now in our

333
00:11:52,200 --> 00:11:53,820
in our restriction

334
00:11:53,820 --> 00:11:55,800
so here was the strategy high level

335
00:11:55,800 --> 00:11:58,740
strategy this is a 1000 feet View using

336
00:11:58,740 --> 00:12:00,899
Envoy we used we created an edge

337
00:12:00,899 --> 00:12:04,019
internet gateway that contains both a

338
00:12:04,019 --> 00:12:07,140
connect and a transparent proxy so again

339
00:12:07,140 --> 00:12:09,600
the client aware connect proxy is the

340
00:12:09,600 --> 00:12:11,279
primary path that we want in all

341
00:12:11,279 --> 00:12:14,339
services to use the design is is far

342
00:12:14,339 --> 00:12:15,540
simpler

343
00:12:15,540 --> 00:12:18,899
the big plus is that we can control DNS

344
00:12:18,899 --> 00:12:21,000
for services and then the transparent

345
00:12:21,000 --> 00:12:23,640
proxy is going to catch all this leaky

346
00:12:23,640 --> 00:12:25,440
traffic so it's going to give us the

347
00:12:25,440 --> 00:12:27,959
confidence that all traffic is being the

348
00:12:27,959 --> 00:12:30,420
connect proxy and if it isn't we know

349
00:12:30,420 --> 00:12:31,920
about it and then we could spend some

350
00:12:31,920 --> 00:12:33,240
time to figure out how do we get this

351
00:12:33,240 --> 00:12:35,640
migrated this traffic shifted over to

352
00:12:35,640 --> 00:12:38,100
the connect proxy but again there's

353
00:12:38,100 --> 00:12:39,600
there's additional levers we actually do

354
00:12:39,600 --> 00:12:41,880
have which we'll cover in more detail on

355
00:12:41,880 --> 00:12:43,320
the transparent proxy side to control

356
00:12:43,320 --> 00:12:44,339
traffic

357
00:12:44,339 --> 00:12:47,940
so 1000 feet view now let's really dive

358
00:12:47,940 --> 00:12:50,519
into the nitty-gritty details

359
00:12:50,519 --> 00:12:52,079
um oh sorry uh one quick thing too is

360
00:12:52,079 --> 00:12:53,880
like um if we don't see any traffic at

361
00:12:53,880 --> 00:12:56,339
the transparent proxy we could just uh

362
00:12:56,339 --> 00:12:57,600
just block everything in that

363
00:12:57,600 --> 00:12:59,459
transparent proxy at that point and then

364
00:12:59,459 --> 00:13:00,839
everything we're confident is going

365
00:13:00,839 --> 00:13:02,160
through the connect proxy so we just

366
00:13:02,160 --> 00:13:05,899
eliminate that path completely

367
00:13:06,360 --> 00:13:09,360
um so this is this diagram is lifted

368
00:13:09,360 --> 00:13:11,279
directly from our internal tech specs

369
00:13:11,279 --> 00:13:13,620
it's effectively a blueprint on how the

370
00:13:13,620 --> 00:13:16,920
internet uh Gateway works and uh we

371
00:13:16,920 --> 00:13:18,899
wanted all services to use this as their

372
00:13:18,899 --> 00:13:21,779
main way of egress so again we use Envoy

373
00:13:21,779 --> 00:13:24,060
at lift and I don't want everyone to get

374
00:13:24,060 --> 00:13:26,339
too hung up on elvoy because the steps

375
00:13:26,339 --> 00:13:28,920
here are still ultimately what a network

376
00:13:28,920 --> 00:13:31,500
proxy needs to do regardless if you're

377
00:13:31,500 --> 00:13:33,420
using Envoy or not

378
00:13:33,420 --> 00:13:35,519
so let's walk through the steps what

379
00:13:35,519 --> 00:13:37,560
happens when a web request occurs so

380
00:13:37,560 --> 00:13:38,940
starting from the the left side over

381
00:13:38,940 --> 00:13:39,839
here

382
00:13:39,839 --> 00:13:43,079
a service wants to make a request out to

383
00:13:43,079 --> 00:13:44,459
the Internet it's going to see these

384
00:13:44,459 --> 00:13:46,440
environmental variables injected so it

385
00:13:46,440 --> 00:13:48,720
knows it must make a connect tunnel out

386
00:13:48,720 --> 00:13:50,459
to the internet gateway

387
00:13:50,459 --> 00:13:52,440
the connect Gateway is going to receive

388
00:13:52,440 --> 00:13:54,300
this call and it's going to see it's

389
00:13:54,300 --> 00:13:55,560
going to terminate there and I'm going

390
00:13:55,560 --> 00:13:58,079
to see this Tuple of the downstream host

391
00:13:58,079 --> 00:13:59,700
that's making the call in this case

392
00:13:59,700 --> 00:14:02,399
python example two and then it has the

393
00:14:02,399 --> 00:14:04,380
Upstream hosts that it wants to connect

394
00:14:04,380 --> 00:14:05,399
to

395
00:14:05,399 --> 00:14:07,800
we pass this information into a layer 7

396
00:14:07,800 --> 00:14:11,700
HTTP R back filter uh this this filter

397
00:14:11,700 --> 00:14:14,100
has a dictionary mapping of all our

398
00:14:14,100 --> 00:14:16,740
allow lists it's going to look it up as

399
00:14:16,740 --> 00:14:18,899
the python and Sample two uh grab the

400
00:14:18,899 --> 00:14:21,000
list of allow lists and then if it's in

401
00:14:21,000 --> 00:14:22,920
there allow that traffic if it's not

402
00:14:22,920 --> 00:14:24,660
we're going to return a 403 and just

403
00:14:24,660 --> 00:14:26,399
deny that traffic

404
00:14:26,399 --> 00:14:28,980
in this case it is allowed so then we

405
00:14:28,980 --> 00:14:31,320
forward it to a four cluster which is in

406
00:14:31,320 --> 00:14:32,700
Envoy terms you could just think of this

407
00:14:32,700 --> 00:14:36,120
as a forward proxy HTTP 4 proxy make the

408
00:14:36,120 --> 00:14:38,160
DNS requests and then forward it onwards

409
00:14:38,160 --> 00:14:39,420
to the internet

410
00:14:39,420 --> 00:14:42,360
so next I'm going to talk about uh the

411
00:14:42,360 --> 00:14:45,420
transparent proxy and this path is how

412
00:14:45,420 --> 00:14:48,060
we capture leaky traffic and also we

413
00:14:48,060 --> 00:14:49,320
have a bunch of Leverage to control

414
00:14:49,320 --> 00:14:52,440
traffic so comparatively

415
00:14:52,440 --> 00:14:55,320
um it is far far more complicated and

416
00:14:55,320 --> 00:14:57,060
this is the heaviest slide of the

417
00:14:57,060 --> 00:14:58,860
presentation so please bear with me

418
00:14:58,860 --> 00:15:01,199
hanging me hang with me in there we'll

419
00:15:01,199 --> 00:15:03,839
go step by step of how web requests goes

420
00:15:03,839 --> 00:15:04,680
through

421
00:15:04,680 --> 00:15:07,260
so this is lifted again directly from

422
00:15:07,260 --> 00:15:09,660
our internal technical documents and the

423
00:15:09,660 --> 00:15:11,220
reason why it's far more complicated

424
00:15:11,220 --> 00:15:14,519
because we need something to extract and

425
00:15:14,519 --> 00:15:16,440
preserve the data we need from the

426
00:15:16,440 --> 00:15:18,300
calling service and make it available as

427
00:15:18,300 --> 00:15:19,620
transport properties to the internet

428
00:15:19,620 --> 00:15:21,959
gateway to allow or deny on

429
00:15:21,959 --> 00:15:25,079
so let's walk to the request we make a

430
00:15:25,079 --> 00:15:26,579
web request and for some reason this

431
00:15:26,579 --> 00:15:28,260
traffic isn't obeying our connect proxy

432
00:15:28,260 --> 00:15:30,120
and we're going to capture it right so

433
00:15:30,120 --> 00:15:32,339
we iptables redirect this traffic and

434
00:15:32,339 --> 00:15:34,079
you'll see one two three four gets

435
00:15:34,079 --> 00:15:37,139
changed into a local host and this is a

436
00:15:37,139 --> 00:15:40,740
local running proxy uh living on on the

437
00:15:40,740 --> 00:15:43,500
same network space as the service so we

438
00:15:43,500 --> 00:15:46,079
have this additional proxy that needs to

439
00:15:46,079 --> 00:15:49,260
live local to the service because

440
00:15:49,260 --> 00:15:51,959
um this proxy needs to be able to

441
00:15:51,959 --> 00:15:54,360
preserve this transport property it

442
00:15:54,360 --> 00:15:56,040
needs to be able to restore this

443
00:15:56,040 --> 00:15:58,740
destination IP address and when you IP

444
00:15:58,740 --> 00:16:01,320
tables redirect something uh this

445
00:16:01,320 --> 00:16:04,019
destination IP uh gets preserved in a

446
00:16:04,019 --> 00:16:06,060
local socket called Original destination

447
00:16:06,060 --> 00:16:09,420
socket so Envoy is going to read it from

448
00:16:09,420 --> 00:16:11,459
the local socket which is in the same

449
00:16:11,459 --> 00:16:13,920
network namespace as a service and it's

450
00:16:13,920 --> 00:16:16,920
going to use a proxy protocol to

451
00:16:16,920 --> 00:16:19,440
preserve that IP so it gets added as a

452
00:16:19,440 --> 00:16:22,079
header in the TCP packet we're going to

453
00:16:22,079 --> 00:16:23,940
forward this information we're going to

454
00:16:23,940 --> 00:16:25,019
we're going to upgrade this connection

455
00:16:25,019 --> 00:16:27,660
into a connect call and then we inject

456
00:16:27,660 --> 00:16:30,180
these additional properties at layer

457
00:16:30,180 --> 00:16:33,300
seven so the Upstream hostname which is

458
00:16:33,300 --> 00:16:35,160
sourced from Sni in this case where TLS

459
00:16:35,160 --> 00:16:37,019
encrypted traffic and then also the

460
00:16:37,019 --> 00:16:41,040
downstream Pi example 2 service we now

461
00:16:41,040 --> 00:16:42,540
we layer four where these IP address

462
00:16:42,540 --> 00:16:44,759
layer 7 we have Sni and service and then

463
00:16:44,759 --> 00:16:46,560
we forward this to the internet gateway

464
00:16:46,560 --> 00:16:48,240
and at this point it's very similar to

465
00:16:48,240 --> 00:16:50,459
the previous side and how things work

466
00:16:50,459 --> 00:16:53,220
so then we terminate connect we have the

467
00:16:53,220 --> 00:16:55,259
the downstream service name and then the

468
00:16:55,259 --> 00:16:58,500
Upstream host pass into nor layer 7 HDR

469
00:16:58,500 --> 00:17:00,959
back filters uh so yeah check it against

470
00:17:00,959 --> 00:17:03,060
allow this again and if it's allowed we

471
00:17:03,060 --> 00:17:05,280
forward it to we unwrap the proxy

472
00:17:05,280 --> 00:17:07,199
protocol so terminate that to restore

473
00:17:07,199 --> 00:17:09,839
the destination IP addresses and then we

474
00:17:09,839 --> 00:17:13,559
forward it to a TCP forward cluster so

475
00:17:13,559 --> 00:17:15,359
I'm out of breath uh just talking about

476
00:17:15,359 --> 00:17:19,439
this so yeah it's uh I I think the I

477
00:17:19,439 --> 00:17:21,660
wouldn't it's okay if you fogged out

478
00:17:21,660 --> 00:17:23,520
there uh paper we take a bit to digest

479
00:17:23,520 --> 00:17:25,500
but the key takeaway is transparent

480
00:17:25,500 --> 00:17:27,720
proxy is much more complicated because

481
00:17:27,720 --> 00:17:29,760
you need something to preserve the

482
00:17:29,760 --> 00:17:32,340
transport properties of the calling

483
00:17:32,340 --> 00:17:34,320
service and we do this with a local

484
00:17:34,320 --> 00:17:36,900
running uh proxy local to the service

485
00:17:36,900 --> 00:17:39,000
before before we forward it to an

486
00:17:39,000 --> 00:17:41,340
internet gateway

487
00:17:41,340 --> 00:17:42,960
so let's walk through things now if a

488
00:17:42,960 --> 00:17:44,880
service gets compromised now and it

489
00:17:44,880 --> 00:17:47,400
attempts to reach out back to

490
00:17:47,400 --> 00:17:50,100
um a malicious domain if it's using if

491
00:17:50,100 --> 00:17:51,960
it's using things that obey the connect

492
00:17:51,960 --> 00:17:55,140
proxy uh we're gonna see it we're going

493
00:17:55,140 --> 00:17:56,760
to check it against the Lawless and if

494
00:17:56,760 --> 00:17:58,320
it's not part of the domains we block it

495
00:17:58,320 --> 00:17:59,820
if it tries to circumvent the connect

496
00:17:59,820 --> 00:18:03,720
proxy well we um we trap it via to the

497
00:18:03,720 --> 00:18:05,580
transparent proxy via iptables so we

498
00:18:05,580 --> 00:18:08,340
block it there and then finally uh if it

499
00:18:08,340 --> 00:18:10,440
tries to use DNS exfiltration attempts

500
00:18:10,440 --> 00:18:11,580
um they can't use that there because

501
00:18:11,580 --> 00:18:15,780
we've we've blocked uh external resolves

502
00:18:15,780 --> 00:18:17,520
so roll out

503
00:18:17,520 --> 00:18:18,960
um the core team of the project was

504
00:18:18,960 --> 00:18:21,419
actually really done by two Engineers uh

505
00:18:21,419 --> 00:18:22,980
one of them being me

506
00:18:22,980 --> 00:18:25,200
and configuring the Gateway was actually

507
00:18:25,200 --> 00:18:27,900
the the fastest part there was no custom

508
00:18:27,900 --> 00:18:29,700
development in our solution uh

509
00:18:29,700 --> 00:18:31,380
everything was out of the box from Envoy

510
00:18:31,380 --> 00:18:33,720
which is open source uh uh I'm not a c

511
00:18:33,720 --> 00:18:37,260
plus Envoy developer I'm still filing

512
00:18:37,260 --> 00:18:39,000
public GitHub issues reading the open

513
00:18:39,000 --> 00:18:40,799
source docs and searching uh public

514
00:18:40,799 --> 00:18:43,799
slack channels for help so what uh

515
00:18:43,799 --> 00:18:44,880
studying the infrastructure was the

516
00:18:44,880 --> 00:18:47,100
quickest part and what really took the

517
00:18:47,100 --> 00:18:49,020
most amount of effort is how do you now

518
00:18:49,020 --> 00:18:50,400
shift traffic through the internet

519
00:18:50,400 --> 00:18:53,400
gateway without disrupting production

520
00:18:53,400 --> 00:18:54,960
so fortunately

521
00:18:54,960 --> 00:18:57,480
um at Lyft there's many levers we have

522
00:18:57,480 --> 00:18:59,220
we can onboard by staging versus

523
00:18:59,220 --> 00:19:01,559
production versus canaries versus

524
00:19:01,559 --> 00:19:04,440
language types and then finally by Tears

525
00:19:04,440 --> 00:19:06,960
where tier three means it's not that

526
00:19:06,960 --> 00:19:09,360
critical if it's disrupted like no one

527
00:19:09,360 --> 00:19:12,179
really kind of cares but all the way up

528
00:19:12,179 --> 00:19:14,160
to tier zero where if you disrupt that

529
00:19:14,160 --> 00:19:16,740
traffic then you might be affecting or

530
00:19:16,740 --> 00:19:18,419
you will be affecting our Riders and

531
00:19:18,419 --> 00:19:20,880
drivers from going online

532
00:19:20,880 --> 00:19:23,880
so as we've onboarded Services we just

533
00:19:23,880 --> 00:19:25,860
passively observe this traffic and we

534
00:19:25,860 --> 00:19:27,600
use this that's the opportunity to

535
00:19:27,600 --> 00:19:29,460
hydrate that loud list like what domains

536
00:19:29,460 --> 00:19:31,799
or Services reaching out to and we're

537
00:19:31,799 --> 00:19:35,280
just Shadow denying uh uh traffic uh

538
00:19:35,280 --> 00:19:36,960
that allow this

539
00:19:36,960 --> 00:19:40,200
so once we see the the shadow denies

540
00:19:40,200 --> 00:19:42,059
um essentially flat line to zero that's

541
00:19:42,059 --> 00:19:44,340
when we switch the shadow to enforcement

542
00:19:44,340 --> 00:19:45,660
mode so this is when we're actually

543
00:19:45,660 --> 00:19:48,000
enforcing those HTTP R back filters that

544
00:19:48,000 --> 00:19:49,740
we saw earlier

545
00:19:49,740 --> 00:19:51,660
and then finally

546
00:19:51,660 --> 00:19:56,100
um once we flip that switch we we really

547
00:19:56,100 --> 00:19:58,440
made sure uh we communicated broadly

548
00:19:58,440 --> 00:20:00,620
with engineering we made sure our

549
00:20:00,620 --> 00:20:02,520
infrastructure documentation our

550
00:20:02,520 --> 00:20:05,340
runbooks were really crisp because when

551
00:20:05,340 --> 00:20:09,000
we now see traffic that is denied uh

552
00:20:09,000 --> 00:20:11,340
service owners will receive a pager Duty

553
00:20:11,340 --> 00:20:12,900
alert and then within that pagerdoodle

554
00:20:12,900 --> 00:20:14,880
alert will show like this is the traffic

555
00:20:14,880 --> 00:20:16,679
that your service is attempting to reach

556
00:20:16,679 --> 00:20:18,840
out to it was blocked for this reason

557
00:20:18,840 --> 00:20:21,059
and if this is normal this is how you

558
00:20:21,059 --> 00:20:23,520
correct it and then if it's not this is

559
00:20:23,520 --> 00:20:26,539
how you reach out to security

560
00:20:27,539 --> 00:20:29,880
um some of the concerns were potential

561
00:20:29,880 --> 00:20:32,880
latency incurred by the proxy uh we saw

562
00:20:32,880 --> 00:20:35,700
an increase of P99 of roughly 10

563
00:20:35,700 --> 00:20:38,640
milliseconds and this is attributed to

564
00:20:38,640 --> 00:20:41,340
the connect TCP tunnel being established

565
00:20:41,340 --> 00:20:42,840
but after that TCP connection was

566
00:20:42,840 --> 00:20:43,880
established

567
00:20:43,880 --> 00:20:46,320
subsequent requests or really just

568
00:20:46,320 --> 00:20:49,260
negligible in comparison

569
00:20:49,260 --> 00:20:51,179
uh we collect and monitor a lot of

570
00:20:51,179 --> 00:20:53,340
metrics not covered here but really the

571
00:20:53,340 --> 00:20:55,380
performance of the envoy Edge Gateway is

572
00:20:55,380 --> 00:20:57,419
dependent on CPU and the bandwidth

573
00:20:57,419 --> 00:21:00,059
available to it so within our squeeze

574
00:21:00,059 --> 00:21:02,039
testing or load testing uh we observed

575
00:21:02,039 --> 00:21:04,380
that really a high TCB connection count

576
00:21:04,380 --> 00:21:06,360
paired with the high bandwidth has a

577
00:21:06,360 --> 00:21:08,700
direct correlation of increasing the CPU

578
00:21:08,700 --> 00:21:11,940
usage so we just scale Envoy on CPU and

579
00:21:11,940 --> 00:21:14,360
this diagram is somewhat simplified but

580
00:21:14,360 --> 00:21:17,100
the bottom line is we we have dedicated

581
00:21:17,100 --> 00:21:22,320
ec2 instances per Envoy node we wrap

582
00:21:22,320 --> 00:21:24,299
this in ASG so we have these cluster of

583
00:21:24,299 --> 00:21:26,280
envoy nodes that can horizontally scale

584
00:21:26,280 --> 00:21:28,200
and then now we could dedicate these

585
00:21:28,200 --> 00:21:30,600
clusters to like staging environment

586
00:21:30,600 --> 00:21:32,820
like production environment to our build

587
00:21:32,820 --> 00:21:34,380
systems

588
00:21:34,380 --> 00:21:36,720
etc etc so that helps minimize some of

589
00:21:36,720 --> 00:21:39,480
this like uh a single point of failure

590
00:21:39,480 --> 00:21:42,840
issues that we described earlier

591
00:21:42,840 --> 00:21:47,159
finally some bonus side effects that uh

592
00:21:47,159 --> 00:21:50,460
uh were that we realized as part of this

593
00:21:50,460 --> 00:21:52,679
project it was a forcing function to

594
00:21:52,679 --> 00:21:54,840
upgrade upgrade a lot of deprecated

595
00:21:54,840 --> 00:21:56,460
libraries or old libraries so for

596
00:21:56,460 --> 00:21:57,960
example a Bodo doesn't really behave

597
00:21:57,960 --> 00:21:59,520
nicely with

598
00:21:59,520 --> 00:22:01,500
um egress procracies so we upgraded

599
00:22:01,500 --> 00:22:03,840
border three other teams are now using

600
00:22:03,840 --> 00:22:05,820
the same information so our

601
00:22:05,820 --> 00:22:07,260
infrastructure teams can answer like

602
00:22:07,260 --> 00:22:09,960
who's using dynamodb who's using S3

603
00:22:09,960 --> 00:22:12,240
uh it's enforced best practices we've

604
00:22:12,240 --> 00:22:14,220
seen people attempt to mutate production

605
00:22:14,220 --> 00:22:17,460
workloads uh and by you know Dowling

606
00:22:17,460 --> 00:22:19,500
arbitrary things so we prevented that

607
00:22:19,500 --> 00:22:21,960
and there's also finally this flywheel

608
00:22:21,960 --> 00:22:23,880
effect there's additional Rich Telemetry

609
00:22:23,880 --> 00:22:26,100
for incident response for our detection

610
00:22:26,100 --> 00:22:28,860
team to write alerts and uh and rules

611
00:22:28,860 --> 00:22:31,879
based on this data

612
00:22:31,980 --> 00:22:33,480
cool

613
00:22:33,480 --> 00:22:34,620
um this is my contact information

614
00:22:34,620 --> 00:22:36,659
LinkedIn is the only social media that I

615
00:22:36,659 --> 00:22:38,340
have feel free to message me there I'm

616
00:22:38,340 --> 00:22:40,559
more than happy to answer questions I've

617
00:22:40,559 --> 00:22:42,419
written about this topic before too so

618
00:22:42,419 --> 00:22:45,240
if you like a written format essentially

619
00:22:45,240 --> 00:22:47,100
of this talk it's there you can search

620
00:22:47,100 --> 00:22:48,780
for it it's also linked in my LinkedIn

621
00:22:48,780 --> 00:22:50,520
bio there

622
00:22:50,520 --> 00:22:53,539
cool thank you

623
00:22:56,640 --> 00:22:58,980
thank you so much Dean all right we have

624
00:22:58,980 --> 00:23:00,659
time for a couple questions before we

625
00:23:00,659 --> 00:23:02,159
wrap if you have questions I'm going to

626
00:23:02,159 --> 00:23:03,360
come to you

627
00:23:03,360 --> 00:23:07,580
I see one in the back here on your left

628
00:23:17,580 --> 00:23:19,919
thank you for the talk so how do you

629
00:23:19,919 --> 00:23:21,960
deal with the service owners putting

630
00:23:21,960 --> 00:23:25,140
stars in the access lists oh yeah we

631
00:23:25,140 --> 00:23:27,600
yeah so Envoy does support wild cards

632
00:23:27,600 --> 00:23:29,220
right

633
00:23:29,220 --> 00:23:32,640
um yes so security does do a review of

634
00:23:32,640 --> 00:23:34,740
it and sometimes yes if it's really

635
00:23:34,740 --> 00:23:36,780
overly permissive then we hate like hey

636
00:23:36,780 --> 00:23:39,780
can you please explicitly specify the

637
00:23:39,780 --> 00:23:41,940
domain that is allowed

638
00:23:41,940 --> 00:23:45,000
um but we are so right now it um people

639
00:23:45,000 --> 00:23:47,100
create PRS for it in GitHub to update

640
00:23:47,100 --> 00:23:48,539
allow this but we're actually building

641
00:23:48,539 --> 00:23:50,280
an additional control plane that would

642
00:23:50,280 --> 00:23:53,580
help enforce uh and help prevent that

643
00:23:53,580 --> 00:23:56,780
type of uh overly permissive definition

644
00:23:56,780 --> 00:23:59,220
yeah next question's gonna be up here on

645
00:23:59,220 --> 00:24:00,780
your left

646
00:24:00,780 --> 00:24:03,720
uh do you also filter traffic going to

647
00:24:03,720 --> 00:24:07,620
let's say chat GPT llms uh directly from

648
00:24:07,620 --> 00:24:09,840
Services we would be able to like this

649
00:24:09,840 --> 00:24:11,700
would be fully

650
00:24:11,700 --> 00:24:13,620
oh not at the payload level no this

651
00:24:13,620 --> 00:24:15,059
wouldn't have the observability at

652
00:24:15,059 --> 00:24:18,980
payloads thank you yeah

653
00:24:21,120 --> 00:24:22,620
next questions from the middle of the

654
00:24:22,620 --> 00:24:24,539
audience

655
00:24:24,539 --> 00:24:26,640
so you talked about how the uh the

656
00:24:26,640 --> 00:24:29,039
catch-all proxy is using an Envoy

657
00:24:29,039 --> 00:24:32,640
sidecar so do you have any capability to

658
00:24:32,640 --> 00:24:34,860
prevent malicious traffic that wouldn't

659
00:24:34,860 --> 00:24:36,179
be coming from something running in

660
00:24:36,179 --> 00:24:38,460
kubernetes

661
00:24:38,460 --> 00:24:39,840
um so you mean like if someone was

662
00:24:39,840 --> 00:24:41,880
attempting to reach to sidecar directly

663
00:24:41,880 --> 00:24:44,100
if something is trying to egress but

664
00:24:44,100 --> 00:24:46,200
it's not running on a kubernetes node

665
00:24:46,200 --> 00:24:48,000
right because the envoy proxy is

666
00:24:48,000 --> 00:24:50,640
attached to the node correct right oh so

667
00:24:50,640 --> 00:24:52,380
he's like if someone tries to go through

668
00:24:52,380 --> 00:24:55,260
the egress proxy uh without first

669
00:24:55,260 --> 00:24:57,600
traversing through

670
00:24:57,600 --> 00:25:00,360
or let me you have you have a malicious

671
00:25:00,360 --> 00:25:01,799
code that's running in your environment

672
00:25:01,799 --> 00:25:05,039
somewhere but it's not on a service is

673
00:25:05,039 --> 00:25:06,840
there do you have capability to catch

674
00:25:06,840 --> 00:25:08,820
that okay yes so yeah I mentioned that a

675
00:25:08,820 --> 00:25:10,799
little bit earlier but this this uh

676
00:25:10,799 --> 00:25:12,419
drives into like the topic of like

677
00:25:12,419 --> 00:25:14,220
Services service authentication right

678
00:25:14,220 --> 00:25:16,440
you need the workloads to be able to

679
00:25:16,440 --> 00:25:18,179
test their identity through the internet

680
00:25:18,179 --> 00:25:19,880
gateway itself

681
00:25:19,880 --> 00:25:22,679
we we do have methods to do this I I

682
00:25:22,679 --> 00:25:24,600
didn't have enough time to talk about it

683
00:25:24,600 --> 00:25:26,940
but uh find me afterwards I could talk

684
00:25:26,940 --> 00:25:28,980
about a little bit more but yes uh we do

685
00:25:28,980 --> 00:25:30,779
have like strong identity attestation

686
00:25:30,779 --> 00:25:33,120
and workloads yeah one more round of

687
00:25:33,120 --> 00:25:35,170
applause for Dean thank you

688
00:25:35,170 --> 00:25:39,890
[Applause]

