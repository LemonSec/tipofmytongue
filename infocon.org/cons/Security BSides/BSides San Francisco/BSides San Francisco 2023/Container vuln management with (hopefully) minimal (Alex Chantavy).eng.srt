1
00:00:00,120 --> 00:00:02,879
greetings everyone in theater 15.

2
00:00:02,879 --> 00:00:07,379
the best audience in besides SF

3
00:00:07,379 --> 00:00:09,120
give it up for Alex he'll be presenting

4
00:00:09,120 --> 00:00:11,040
he'll be our presenter

5
00:00:11,040 --> 00:00:12,840
and he'll be our Master of Ceremonies

6
00:00:12,840 --> 00:00:15,660
for the next 30 minutes

7
00:00:15,660 --> 00:00:17,460
awesome thank you very much hello

8
00:00:17,460 --> 00:00:20,160
everybody I am all kinds of excited to

9
00:00:20,160 --> 00:00:21,720
be here this is my first talk that I've

10
00:00:21,720 --> 00:00:24,119
ever given in person ever since like the

11
00:00:24,119 --> 00:00:27,359
before times thank you very much

12
00:00:27,359 --> 00:00:28,439
um today I'm going to tell you guys a

13
00:00:28,439 --> 00:00:30,300
story about our journey at Lyft for

14
00:00:30,300 --> 00:00:31,740
through the ups and downs about

15
00:00:31,740 --> 00:00:35,160
container vulnerability management it

16
00:00:35,160 --> 00:00:38,160
was a disaster well when we're trying to

17
00:00:38,160 --> 00:00:39,480
make it a little bit less of a disaster

18
00:00:39,480 --> 00:00:41,640
and I'll tell you all about it so back

19
00:00:41,640 --> 00:00:46,680
in 2020 we stood up a container well we

20
00:00:46,680 --> 00:00:48,120
still have a vulnerability Management

21
00:00:48,120 --> 00:00:52,760
program and at that time this was

22
00:00:52,760 --> 00:00:54,539
frankly you know a little bit

23
00:00:54,539 --> 00:00:56,160
embarrassing for us because we felt that

24
00:00:56,160 --> 00:00:59,039
a company of our technical maturity well

25
00:00:59,039 --> 00:01:01,199
this was table Stakes like we needed to

26
00:01:01,199 --> 00:01:04,920
have this done already and we'd the

27
00:01:04,920 --> 00:01:08,400
prior to having a formal program what we

28
00:01:08,400 --> 00:01:10,320
had done was vulner management was done

29
00:01:10,320 --> 00:01:15,060
in an ad hoc basis and this was a mess

30
00:01:15,060 --> 00:01:19,320
so what we did we also had another big

31
00:01:19,320 --> 00:01:22,320
reason a big motivator for standing up a

32
00:01:22,320 --> 00:01:25,920
centralized program we wanted to win a

33
00:01:25,920 --> 00:01:27,900
contract to provide Rideshare services

34
00:01:27,900 --> 00:01:30,240
for the federal government

35
00:01:30,240 --> 00:01:33,420
and the federal government needs to

36
00:01:33,420 --> 00:01:36,840
ensure that we protect their data and so

37
00:01:36,840 --> 00:01:39,060
we needed they they we needed assurances

38
00:01:39,060 --> 00:01:42,060
that we had operated a program that

39
00:01:42,060 --> 00:01:44,220
would find and fix security

40
00:01:44,220 --> 00:01:47,100
vulnerabilities on all of our platforms

41
00:01:47,100 --> 00:01:50,520
that were involved in this flow so for

42
00:01:50,520 --> 00:01:52,560
those of us on the security team oh I

43
00:01:52,560 --> 00:01:53,820
just realized I totally didn't introduce

44
00:01:53,820 --> 00:01:55,799
myself yeah so I'm a sui on the security

45
00:01:55,799 --> 00:01:59,040
team by the way and so this was exciting

46
00:01:59,040 --> 00:02:01,140
this like when when the hell does this

47
00:02:01,140 --> 00:02:02,579
ever happen where you work in security

48
00:02:02,579 --> 00:02:04,979
and you can say that you know I am no

49
00:02:04,979 --> 00:02:06,719
longer a cost center I'm not that thing

50
00:02:06,719 --> 00:02:09,959
that is costing the company money for

51
00:02:09,959 --> 00:02:12,780
some dubious benefit this is literally

52
00:02:12,780 --> 00:02:16,379
tied to a business item so we I

53
00:02:16,379 --> 00:02:19,020
personally was extremely thrilled to be

54
00:02:19,020 --> 00:02:20,640
part uh to be able to say that you can

55
00:02:20,640 --> 00:02:22,980
be part of some business generating

56
00:02:22,980 --> 00:02:23,940
story

57
00:02:23,940 --> 00:02:29,780
so uh we said we sat on this and uh

58
00:02:29,780 --> 00:02:32,700
one thing that uh

59
00:02:32,700 --> 00:02:35,459
this talk is going to be focused on the

60
00:02:35,459 --> 00:02:37,800
container part because there is just so

61
00:02:37,800 --> 00:02:39,420
much to cover here there's a lot of

62
00:02:39,420 --> 00:02:41,879
technical depth and then so the hope

63
00:02:41,879 --> 00:02:44,280
that I have by sharing this with you

64
00:02:44,280 --> 00:02:46,440
avoid our mistakes I'm going to go into

65
00:02:46,440 --> 00:02:49,560
the good the bad the ugly uh

66
00:02:49,560 --> 00:02:51,900
and containers are hard so let's share

67
00:02:51,900 --> 00:02:54,239
notes I'll go over the things that

68
00:02:54,239 --> 00:02:56,760
worked for us how we used a graph

69
00:02:56,760 --> 00:02:59,340
approach to get to the bottom of

70
00:02:59,340 --> 00:03:01,260
actionability one thing that I'm loving

71
00:03:01,260 --> 00:03:03,060
seeing at b-sides this year is that

72
00:03:03,060 --> 00:03:05,459
there is this theme with a taking a

73
00:03:05,459 --> 00:03:07,019
pragmatic approach to vulnerability

74
00:03:07,019 --> 00:03:10,260
management looking and deciding and

75
00:03:10,260 --> 00:03:13,379
prioritizing what specific things your

76
00:03:13,379 --> 00:03:16,680
program can do and as a security team

77
00:03:16,680 --> 00:03:19,319
just not like uh doing everything but

78
00:03:19,319 --> 00:03:21,239
being a little bit more smart about it

79
00:03:21,239 --> 00:03:24,060
and then so uh I think that standing up

80
00:03:24,060 --> 00:03:25,379
a vulner management program from scratch

81
00:03:25,379 --> 00:03:27,720
especially because we had a specific

82
00:03:27,720 --> 00:03:33,060
customer in mind this let us be very we

83
00:03:33,060 --> 00:03:34,739
needed to be very deliberate about what

84
00:03:34,739 --> 00:03:37,620
things we covered first and I'll take

85
00:03:37,620 --> 00:03:39,060
you tour I'll take you through our

86
00:03:39,060 --> 00:03:40,319
thought process

87
00:03:40,319 --> 00:03:43,379
so thinking about things well our

88
00:03:43,379 --> 00:03:45,120
customer or the customer that we had in

89
00:03:45,120 --> 00:03:46,980
mind for the specific program they're

90
00:03:46,980 --> 00:03:50,099
interested in ride share services so

91
00:03:50,099 --> 00:03:52,500
when the Lyft customer goes and calls up

92
00:03:52,500 --> 00:03:54,120
the Rideshare app on their phone and

93
00:03:54,120 --> 00:03:57,299
request a ride it talks to it talks to a

94
00:03:57,299 --> 00:03:59,879
number of back-end services that are

95
00:03:59,879 --> 00:04:01,379
hosted in the cloud

96
00:04:01,379 --> 00:04:05,400
and we run about a thousand of these

97
00:04:05,400 --> 00:04:07,920
services at Lyft it's quite a few of

98
00:04:07,920 --> 00:04:09,120
them

99
00:04:09,120 --> 00:04:11,640
all of those services are deployed on

100
00:04:11,640 --> 00:04:15,000
kubernetes and I imagine that uh all

101
00:04:15,000 --> 00:04:16,380
these talks I've been attending here

102
00:04:16,380 --> 00:04:19,019
everyone is very familiar with uh Cloud

103
00:04:19,019 --> 00:04:21,298
native Technologies so this is pretty

104
00:04:21,298 --> 00:04:23,520
exciting so they're running kubernetes

105
00:04:23,520 --> 00:04:25,500
and then so some of those there are

106
00:04:25,500 --> 00:04:27,419
other assets that are involved in this

107
00:04:27,419 --> 00:04:29,220
flow some of them are exposed to the

108
00:04:29,220 --> 00:04:30,720
internet or not and so this is the way

109
00:04:30,720 --> 00:04:33,000
that we're kind of building up those uh

110
00:04:33,000 --> 00:04:36,120
components that were involved for our

111
00:04:36,120 --> 00:04:39,060
program and thinking about okay well we

112
00:04:39,060 --> 00:04:41,699
got containers we got Kate's nodes we

113
00:04:41,699 --> 00:04:43,020
got other assets that are hooked up to

114
00:04:43,020 --> 00:04:45,060
the internet again I'm doing the focus

115
00:04:45,060 --> 00:04:48,240
solely on containers because there is a

116
00:04:48,240 --> 00:04:51,960
lot of technical depth in this section

117
00:04:51,960 --> 00:04:53,280
what are we going to do with containers

118
00:04:53,280 --> 00:04:54,660
though so generally speaking of loan

119
00:04:54,660 --> 00:04:56,520
Management program has like Steps like

120
00:04:56,520 --> 00:04:59,520
this where you inventory your assets you

121
00:04:59,520 --> 00:05:01,979
perform a scan on them and then after

122
00:05:01,979 --> 00:05:04,500
you get all you do your scans you have a

123
00:05:04,500 --> 00:05:06,180
set of results you want to do some

124
00:05:06,180 --> 00:05:08,280
triaging you need to decide given this

125
00:05:08,280 --> 00:05:10,440
issue is it critical enough am I gonna

126
00:05:10,440 --> 00:05:13,320
does this need a all hands on deck type

127
00:05:13,320 --> 00:05:16,500
situation or is this something that is

128
00:05:16,500 --> 00:05:18,300
significantly less critical where it can

129
00:05:18,300 --> 00:05:20,460
wait a little bit longer or is it is it

130
00:05:20,460 --> 00:05:23,520
not valid at all and so can I just avoid

131
00:05:23,520 --> 00:05:26,039
randomizing my security team

132
00:05:26,039 --> 00:05:27,780
and then finally you need to actually

133
00:05:27,780 --> 00:05:31,380
get something done so once you get all

134
00:05:31,380 --> 00:05:34,020
your issues make sure that you're

135
00:05:34,020 --> 00:05:36,539
assigning it to the correct team and

136
00:05:36,539 --> 00:05:38,100
then actioning on them and that's the

137
00:05:38,100 --> 00:05:40,500
key part making sure the as the security

138
00:05:40,500 --> 00:05:42,720
team like if we're just spamming out

139
00:05:42,720 --> 00:05:44,940
tickets to teams and no one knows what

140
00:05:44,940 --> 00:05:48,600
to do with it we're not doing our job

141
00:05:48,600 --> 00:05:51,479
we set out to do this program and we had

142
00:05:51,479 --> 00:05:54,780
we did it pretty bursty the goal was to

143
00:05:54,780 --> 00:05:58,139
get from zero to good enough as fast as

144
00:05:58,139 --> 00:06:00,539
possible so we set aside about six weeks

145
00:06:00,539 --> 00:06:02,400
to just build out a minimum viable

146
00:06:02,400 --> 00:06:06,600
product and we we found out that there

147
00:06:06,600 --> 00:06:08,520
were a couple of things that we didn't

148
00:06:08,520 --> 00:06:11,280
quite anticipate uh that we we did our

149
00:06:11,280 --> 00:06:14,039
best here one of these difficulties was

150
00:06:14,039 --> 00:06:17,340
scale and I'll talk through a little bit

151
00:06:17,340 --> 00:06:20,340
of some of the uniqueness of Lyft infra

152
00:06:20,340 --> 00:06:22,979
I think that many of you may be

153
00:06:22,979 --> 00:06:26,100
empathetic hopefully so

154
00:06:26,100 --> 00:06:28,680
um adlift when a developer pushes a

155
00:06:28,680 --> 00:06:31,080
commit to GitHub a container image is

156
00:06:31,080 --> 00:06:34,620
built and then it gets pushed to an ECR

157
00:06:34,620 --> 00:06:38,639
repo elastic container registry and this

158
00:06:38,639 --> 00:06:40,440
happens regardless of whether or not

159
00:06:40,440 --> 00:06:43,080
that container actually is deployed to

160
00:06:43,080 --> 00:06:46,139
production that's an important detail

161
00:06:46,139 --> 00:06:48,600
so if we were to take the naive approach

162
00:06:48,600 --> 00:06:50,400
we're doing the scan process right we're

163
00:06:50,400 --> 00:06:51,960
trying to find out where all the volumes

164
00:06:51,960 --> 00:06:54,419
across our entire company and if we did

165
00:06:54,419 --> 00:06:57,360
this one by one by one variety image and

166
00:06:57,360 --> 00:07:00,120
let's ballpark maybe about 15 seconds to

167
00:07:00,120 --> 00:07:03,300
30 seconds for an image scan then it

168
00:07:03,300 --> 00:07:06,000
will take months to scan all of this and

169
00:07:06,000 --> 00:07:08,580
even more so even if we could massively

170
00:07:08,580 --> 00:07:10,800
parallelize all of this that's just a

171
00:07:10,800 --> 00:07:12,600
lot of money wasted on compute and who

172
00:07:12,600 --> 00:07:15,840
wants to do that and I guess like by the

173
00:07:15,840 --> 00:07:17,340
time that you're done with all of this

174
00:07:17,340 --> 00:07:19,259
then you know your the developers are

175
00:07:19,259 --> 00:07:20,940
going to go and push out more code again

176
00:07:20,940 --> 00:07:23,759
and then your results are well worthless

177
00:07:23,759 --> 00:07:25,620
so we had to take a little bit more of a

178
00:07:25,620 --> 00:07:28,020
pragmatic approach and think okay which

179
00:07:28,020 --> 00:07:30,599
of these images actually presents a risk

180
00:07:30,599 --> 00:07:34,380
to us which of these images is uh

181
00:07:34,380 --> 00:07:36,539
exposed to production running in

182
00:07:36,539 --> 00:07:38,160
production which of these commit hashes

183
00:07:38,160 --> 00:07:41,699
revisions is going to be set out in the

184
00:07:41,699 --> 00:07:43,740
wild and then serving Rider traffic

185
00:07:43,740 --> 00:07:45,599
driver track it that kind of that kind

186
00:07:45,599 --> 00:07:47,520
of thinking

187
00:07:47,520 --> 00:07:51,360
and the next part was actionability so

188
00:07:51,360 --> 00:07:53,220
this is uh something really interesting

189
00:07:53,220 --> 00:07:55,259
with container images so

190
00:07:55,259 --> 00:07:59,340
we initially started this project by

191
00:07:59,340 --> 00:08:01,860
using things that were available to us

192
00:08:01,860 --> 00:08:05,400
uh easily available so every container

193
00:08:05,400 --> 00:08:08,699
image we scan them with aws's built-in

194
00:08:08,699 --> 00:08:11,639
ECR scanner and if you look at the API

195
00:08:11,639 --> 00:08:12,900
documentation right there it's got

196
00:08:12,900 --> 00:08:15,360
attributes description name severity it

197
00:08:15,360 --> 00:08:17,280
doesn't tell you what to do with it like

198
00:08:17,280 --> 00:08:19,440
you know going through this I don't know

199
00:08:19,440 --> 00:08:21,900
what to do at least uh

200
00:08:21,900 --> 00:08:24,180
you know I know that if it's critical or

201
00:08:24,180 --> 00:08:26,759
whatever sure but I it doesn't tell me

202
00:08:26,759 --> 00:08:30,419
what version to actually fix a given

203
00:08:30,419 --> 00:08:32,760
package too and then so if I uh just

204
00:08:32,760 --> 00:08:34,320
what am I supposed to do I take all

205
00:08:34,320 --> 00:08:35,640
these findings I give it all my service

206
00:08:35,640 --> 00:08:37,200
teams they'll tell me to go pound sand

207
00:08:37,200 --> 00:08:38,399
they'll tell me to go away yes

208
00:08:38,399 --> 00:08:42,539
ridiculous and another um thing with uh

209
00:08:42,539 --> 00:08:47,100
actionability is with images we have uh

210
00:08:47,100 --> 00:08:49,560
every uh our infra team maintains the

211
00:08:49,560 --> 00:08:51,540
parent base images I think the number of

212
00:08:51,540 --> 00:08:53,640
companies do it this way where your

213
00:08:53,640 --> 00:08:56,339
application teams they cannot and

214
00:08:56,339 --> 00:08:58,680
probably should not maintain the full

215
00:08:58,680 --> 00:09:01,680
stack of that image from the OS to all

216
00:09:01,680 --> 00:09:03,300
the stuff that they build on top of it

217
00:09:03,300 --> 00:09:05,640
so typically an infra team or somebody

218
00:09:05,640 --> 00:09:07,800
who is really well versed in this

219
00:09:07,800 --> 00:09:10,140
they're going to be building up the

220
00:09:10,140 --> 00:09:12,779
parent-based image and then the

221
00:09:12,779 --> 00:09:16,019
application team will add more material

222
00:09:16,019 --> 00:09:18,360
or they're at their own code and that

223
00:09:18,360 --> 00:09:21,060
gets built as their image so it forms a

224
00:09:21,060 --> 00:09:23,220
sort of family tree

225
00:09:23,220 --> 00:09:26,160
so there are two classes of volumes in

226
00:09:26,160 --> 00:09:29,279
image lineage so there are Vols that the

227
00:09:29,279 --> 00:09:31,740
service introduces themselves so if

228
00:09:31,740 --> 00:09:34,140
service Imports or introduces some

229
00:09:34,140 --> 00:09:37,920
package that uh that they need there are

230
00:09:37,920 --> 00:09:41,160
volts introduced by the parent image

231
00:09:41,160 --> 00:09:43,200
and then so as you see like if there's a

232
00:09:43,200 --> 00:09:45,300
vone introduced by the parent image it's

233
00:09:45,300 --> 00:09:48,300
going to Cascade down to all of the

234
00:09:48,300 --> 00:09:50,279
children

235
00:09:50,279 --> 00:09:52,860
how do you fix this stuff so the first

236
00:09:52,860 --> 00:09:54,540
case is really straightforward if you

237
00:09:54,540 --> 00:09:55,920
want to fix a phone introduced by

238
00:09:55,920 --> 00:09:58,019
service you just tell the service this

239
00:09:58,019 --> 00:10:00,660
is the package you need to fix all right

240
00:10:00,660 --> 00:10:01,560
done

241
00:10:01,560 --> 00:10:04,440
how do you fix the other case how do you

242
00:10:04,440 --> 00:10:07,260
fix the case where the vulnerability is

243
00:10:07,260 --> 00:10:09,480
introduced from a base image and it has

244
00:10:09,480 --> 00:10:11,040
been cascaded down through everybody

245
00:10:11,040 --> 00:10:13,500
else this is a little bit more

246
00:10:13,500 --> 00:10:17,040
um challenging because if I was to scan

247
00:10:17,040 --> 00:10:19,320
one of these service images down at the

248
00:10:19,320 --> 00:10:21,120
bottom cut tickets and then tell that

249
00:10:21,120 --> 00:10:22,860
team you need to go and solve this issue

250
00:10:22,860 --> 00:10:25,500
with openssl or whatever they will say

251
00:10:25,500 --> 00:10:27,720
cool story bro I have no idea what to do

252
00:10:27,720 --> 00:10:29,640
there is absolutely nothing that they

253
00:10:29,640 --> 00:10:32,100
can do to fix that you what needs to

254
00:10:32,100 --> 00:10:34,560
happen is that the infra team will need

255
00:10:34,560 --> 00:10:37,560
to pull in their own changes update the

256
00:10:37,560 --> 00:10:40,500
image and then Cascade those fixes down

257
00:10:40,500 --> 00:10:42,420
to the rest of the fleet so that's what

258
00:10:42,420 --> 00:10:45,380
needs to happen so the infra team will

259
00:10:45,380 --> 00:10:48,959
update that image and then Cascade it

260
00:10:48,959 --> 00:10:50,820
down and we're lucky at Lyft we have a

261
00:10:50,820 --> 00:10:52,320
really awesome infra team where they

262
00:10:52,320 --> 00:10:54,779
have a Pros where we have a process that

263
00:10:54,779 --> 00:10:57,480
automatically Cuts pull requests to

264
00:10:57,480 --> 00:10:59,640
every single child service down at the

265
00:10:59,640 --> 00:11:01,380
bottom layer there

266
00:11:01,380 --> 00:11:04,200
and so services will effectively consume

267
00:11:04,200 --> 00:11:08,100
the fix from those auto-generated PRS

268
00:11:08,100 --> 00:11:11,279
so image lineage is a graph problem and

269
00:11:11,279 --> 00:11:13,620
how do how do we keep track of all of

270
00:11:13,620 --> 00:11:15,959
this we luckily have one

271
00:11:15,959 --> 00:11:18,660
um we uh I maintain the open source tool

272
00:11:18,660 --> 00:11:20,760
called cartography you can check it out

273
00:11:20,760 --> 00:11:23,519
lift uh has been uh maintained this for

274
00:11:23,519 --> 00:11:25,740
a while is really awesome for full

275
00:11:25,740 --> 00:11:28,440
details on how this Cascade process

276
00:11:28,440 --> 00:11:31,260
works check out this uh blog that I

277
00:11:31,260 --> 00:11:34,019
wrote and because this is really

278
00:11:34,019 --> 00:11:36,180
interesting because this can be several

279
00:11:36,180 --> 00:11:37,800
layers deep a dependency of a dependency

280
00:11:37,800 --> 00:11:39,360
of a dependency

281
00:11:39,360 --> 00:11:40,920
oh yeah you can check that out right

282
00:11:40,920 --> 00:11:43,200
over there so essentially the power of

283
00:11:43,200 --> 00:11:44,760
having something represented in a graph

284
00:11:44,760 --> 00:11:48,000
like this is you can correlate this

285
00:11:48,000 --> 00:11:49,980
context with anything else like such as

286
00:11:49,980 --> 00:11:52,680
who owns a service or correlate to the

287
00:11:52,680 --> 00:11:55,620
on-call in charge of fixing this uh

288
00:11:55,620 --> 00:11:58,560
attribute ownership uh do things like

289
00:11:58,560 --> 00:12:01,079
connect it to internet connectivity and

290
00:12:01,079 --> 00:12:02,880
then we saw the value there and then so

291
00:12:02,880 --> 00:12:06,180
we took all of our various scan data and

292
00:12:06,180 --> 00:12:07,980
then we chose that we would have this

293
00:12:07,980 --> 00:12:09,779
sort of naive architecture where

294
00:12:09,779 --> 00:12:11,220
essentially everything is going to get

295
00:12:11,220 --> 00:12:13,260
sent to cartography and then we are

296
00:12:13,260 --> 00:12:15,779
going to Output those as gear tickets

297
00:12:15,779 --> 00:12:18,899
and then reports call it a day and we

298
00:12:18,899 --> 00:12:20,220
built some data models I'm not going to

299
00:12:20,220 --> 00:12:21,540
go over what these data models are just

300
00:12:21,540 --> 00:12:23,519
to show you that you can model it as

301
00:12:23,519 --> 00:12:24,779
sort of a graph

302
00:12:24,779 --> 00:12:27,860
and yay we want a contract yay

303
00:12:27,860 --> 00:12:30,899
810 million dollars split between Uber

304
00:12:30,899 --> 00:12:33,660
and Lyft that is awesome

305
00:12:33,660 --> 00:12:35,519
well we're we're not we're not done yet

306
00:12:35,519 --> 00:12:38,160
though so like um we we had a data model

307
00:12:38,160 --> 00:12:41,399
you know and we had the contract and but

308
00:12:41,399 --> 00:12:44,399
this was really bad we we did not have

309
00:12:44,399 --> 00:12:46,440
any automation to do this so remember

310
00:12:46,440 --> 00:12:48,899
that I had this we had this plan right

311
00:12:48,899 --> 00:12:51,240
where you were gonna scan for phones

312
00:12:51,240 --> 00:12:53,100
we're going to triage them we are going

313
00:12:53,100 --> 00:12:54,899
to remediate them and we're going to

314
00:12:54,899 --> 00:12:56,459
live in this beautiful world where

315
00:12:56,459 --> 00:12:58,920
robots were doing this for us because as

316
00:12:58,920 --> 00:13:00,660
a security team we're all understaffed

317
00:13:00,660 --> 00:13:02,399
and then we're very tiny compared to the

318
00:13:02,399 --> 00:13:05,100
rest of the company and then so

319
00:13:05,100 --> 00:13:07,380
in actuality it looked like this at the

320
00:13:07,380 --> 00:13:09,240
end of the six first six weeks we had

321
00:13:09,240 --> 00:13:11,399
focused only on the Discover piece we

322
00:13:11,399 --> 00:13:14,940
only had a scanner we had some uh data

323
00:13:14,940 --> 00:13:17,100
model that I frankly was very proud of

324
00:13:17,100 --> 00:13:18,540
they're like oh look how look how smart

325
00:13:18,540 --> 00:13:20,160
this is well but it didn't actually do

326
00:13:20,160 --> 00:13:22,620
anything you know so the parts that

327
00:13:22,620 --> 00:13:24,660
involved triage and Remediation this was

328
00:13:24,660 --> 00:13:27,480
all still very much manual

329
00:13:27,480 --> 00:13:30,060
and there were resourcing problems here

330
00:13:30,060 --> 00:13:32,579
so at the end of the six weeks uh most

331
00:13:32,579 --> 00:13:34,860
of our most of the team that was uh

332
00:13:34,860 --> 00:13:38,639
focused on this we all went back to our

333
00:13:38,639 --> 00:13:41,100
main projects you know we all went back

334
00:13:41,100 --> 00:13:42,839
and then this was left in the hands of

335
00:13:42,839 --> 00:13:46,500
one TPM and one very capable engineer

336
00:13:46,500 --> 00:13:49,079
but they both ended up extremely burnt

337
00:13:49,079 --> 00:13:52,560
out this was this was dark times this is

338
00:13:52,560 --> 00:13:54,300
really bad and then especially couple

339
00:13:54,300 --> 00:13:56,279
that together this was 2020 and then the

340
00:13:56,279 --> 00:13:58,380
pandemic no one was having a good time

341
00:13:58,380 --> 00:13:59,940
at this time

342
00:13:59,940 --> 00:14:02,399
and something had to be done you know we

343
00:14:02,399 --> 00:14:05,519
had to uh the next step we tried to

344
00:14:05,519 --> 00:14:07,260
think okay what are some things that we

345
00:14:07,260 --> 00:14:10,500
can do to build buy adopt our way out of

346
00:14:10,500 --> 00:14:13,079
this problem and are there things that

347
00:14:13,079 --> 00:14:15,959
we can augment with our existing uh

348
00:14:15,959 --> 00:14:17,100
structure that we've built up for

349
00:14:17,100 --> 00:14:19,260
ourselves and one of these was a tool

350
00:14:19,260 --> 00:14:22,560
called trivi and so trivia is really

351
00:14:22,560 --> 00:14:24,660
neat and what I like about trivia is

352
00:14:24,660 --> 00:14:27,120
that it gives us fixed versions you scan

353
00:14:27,120 --> 00:14:29,040
the image and then it tells you exactly

354
00:14:29,040 --> 00:14:31,500
maintains a data feed tells you exactly

355
00:14:31,500 --> 00:14:34,680
what package to update your uh

356
00:14:34,680 --> 00:14:36,540
vulnerable package to

357
00:14:36,540 --> 00:14:39,120
next one it tells you you can say things

358
00:14:39,120 --> 00:14:41,040
like if this vulnerability is not

359
00:14:41,040 --> 00:14:43,560
fixable don't even tell me about it if

360
00:14:43,560 --> 00:14:45,600
there is nothing I can do about this

361
00:14:45,600 --> 00:14:47,639
vulnerability then why am I going to

362
00:14:47,639 --> 00:14:51,480
spam all of my service teams uh unless

363
00:14:51,480 --> 00:14:53,760
of course it's a log4j type situation in

364
00:14:53,760 --> 00:14:56,699
which case it requires a all hands on

365
00:14:56,699 --> 00:14:59,399
deck situation but majority of the time

366
00:14:59,399 --> 00:15:01,920
that's not going to be the case and the

367
00:15:01,920 --> 00:15:03,959
cool thing with trivi was that it also

368
00:15:03,959 --> 00:15:06,420
lets you define things like open policy

369
00:15:06,420 --> 00:15:09,360
agent definition so you can say things

370
00:15:09,360 --> 00:15:12,680
like if this vulnerability requires

371
00:15:12,680 --> 00:15:15,480
in-person access or physical access to a

372
00:15:15,480 --> 00:15:17,639
server I don't care about it and you can

373
00:15:17,639 --> 00:15:20,160
describe it like that and it will filter

374
00:15:20,160 --> 00:15:22,500
it out all for you

375
00:15:22,500 --> 00:15:24,839
we loved that um and then I guess the

376
00:15:24,839 --> 00:15:26,160
one final point I'll have on the build

377
00:15:26,160 --> 00:15:28,560
by adopt point is that we found that our

378
00:15:28,560 --> 00:15:30,540
info was just so custom to the point

379
00:15:30,540 --> 00:15:33,000
where a lot of the things that we

380
00:15:33,000 --> 00:15:34,740
evaluated they kind of took a very

381
00:15:34,740 --> 00:15:37,560
opinionated way about how the info would

382
00:15:37,560 --> 00:15:39,300
be set up and so it didn't really

383
00:15:39,300 --> 00:15:41,279
generalize well and then the work to

384
00:15:41,279 --> 00:15:44,459
sort of orchestrate all of this or the

385
00:15:44,459 --> 00:15:46,800
work to adopt their product would have

386
00:15:46,800 --> 00:15:50,040
been just the same or more than just

387
00:15:50,040 --> 00:15:53,160
doing it ourselves and so that's what

388
00:15:53,160 --> 00:15:54,420
ended up needing to happen we

389
00:15:54,420 --> 00:15:57,899
orchestrated the automation ourselves

390
00:15:57,899 --> 00:15:59,459
it ended up looking something like this

391
00:15:59,459 --> 00:16:01,680
where again you got the scan process

392
00:16:01,680 --> 00:16:03,959
you're identifying what is in production

393
00:16:03,959 --> 00:16:06,660
you're building this image lineage tree

394
00:16:06,660 --> 00:16:09,480
you're splitting up those volts into

395
00:16:09,480 --> 00:16:11,760
things that are inherited from the base

396
00:16:11,760 --> 00:16:14,100
image to things that are introduced by

397
00:16:14,100 --> 00:16:17,399
the service itself and then you are

398
00:16:17,399 --> 00:16:21,600
tying that up to what the team can

399
00:16:21,600 --> 00:16:24,300
specifically do to fix it themselves and

400
00:16:24,300 --> 00:16:25,800
then so that's that remediate piece

401
00:16:25,800 --> 00:16:29,100
right there where we say that your

402
00:16:29,100 --> 00:16:31,860
project is affected by this many

403
00:16:31,860 --> 00:16:34,740
security issues and you here is the

404
00:16:34,740 --> 00:16:38,339
specific PR that you need to do to

405
00:16:38,339 --> 00:16:40,380
merge it merge everything in and once

406
00:16:40,380 --> 00:16:42,180
you merge that in all of these security

407
00:16:42,180 --> 00:16:45,060
vulnerabilities they will go away

408
00:16:45,060 --> 00:16:47,880
and I guess I skipped over real quickly

409
00:16:47,880 --> 00:16:50,220
the triage phase that's you know do you

410
00:16:50,220 --> 00:16:52,860
have to do some there's some Sometimes

411
00:16:52,860 --> 00:16:55,800
some hand tuning about like uh deciding

412
00:16:55,800 --> 00:16:58,259
what are the types of bones that you

413
00:16:58,259 --> 00:17:00,360
care about or not care about

414
00:17:00,360 --> 00:17:02,940
and we had this state management system

415
00:17:02,940 --> 00:17:04,740
that was really sophisticated I'm not

416
00:17:04,740 --> 00:17:06,959
going to go into this uh this is to say

417
00:17:06,959 --> 00:17:09,380
that this was a very ambitious project

418
00:17:09,380 --> 00:17:12,660
and it failed spectacularly we did our

419
00:17:12,660 --> 00:17:14,760
best here and I'm going to tell you

420
00:17:14,760 --> 00:17:19,919
exactly how this failed spectacularly we

421
00:17:19,919 --> 00:17:21,780
I wanted to share like the original code

422
00:17:21,780 --> 00:17:23,699
segment for this but then I thought okay

423
00:17:23,699 --> 00:17:25,799
well it's not I'll just show you the the

424
00:17:25,799 --> 00:17:27,780
screenshot right here where if you are

425
00:17:27,780 --> 00:17:29,580
on call the security team's bone scanner

426
00:17:29,580 --> 00:17:31,080
may have assigned a jio epic to you with

427
00:17:31,080 --> 00:17:32,880
no task items attached to it when the

428
00:17:32,880 --> 00:17:34,919
scanner fish is a scrub all tasks and

429
00:17:34,919 --> 00:17:36,419
subtasks will be a taxi epic we expect

430
00:17:36,419 --> 00:17:38,220
the scanner to be done by the end of the

431
00:17:38,220 --> 00:17:39,480
day

432
00:17:39,480 --> 00:17:43,500
okay so like what happened here was you

433
00:17:43,500 --> 00:17:45,539
know we sent all these teams all these

434
00:17:45,539 --> 00:17:46,860
tickets we're unveiling our brand new

435
00:17:46,860 --> 00:17:49,200
launch over program and then we told we

436
00:17:49,200 --> 00:17:50,160
told them they had all these things to

437
00:17:50,160 --> 00:17:51,960
do but then there was no detail about

438
00:17:51,960 --> 00:17:54,780
what they had to do the weird details

439
00:17:54,780 --> 00:17:56,760
like this weird State Management details

440
00:17:56,760 --> 00:17:59,700
about like at the end of all of this uh

441
00:17:59,700 --> 00:18:01,919
we should have waited

442
00:18:01,919 --> 00:18:05,100
um for all of the scans to finish uh

443
00:18:05,100 --> 00:18:08,760
before assigning it to the service owner

444
00:18:08,760 --> 00:18:10,620
so that they would not get spanned with

445
00:18:10,620 --> 00:18:11,700
an email that they could do nothing

446
00:18:11,700 --> 00:18:13,559
about okay

447
00:18:13,559 --> 00:18:17,100
this one was worse uh security loan

448
00:18:17,100 --> 00:18:19,380
tickets were closed erroneously between

449
00:18:19,380 --> 00:18:23,520
six and seven forty one a.m this was

450
00:18:23,520 --> 00:18:25,919
really bad so service owners sent

451
00:18:25,919 --> 00:18:27,600
erroneous information that volumes were

452
00:18:27,600 --> 00:18:29,100
closed that when they should not have

453
00:18:29,100 --> 00:18:31,500
been this is a bad situation to be in

454
00:18:31,500 --> 00:18:34,200
when your state machine logic goes and

455
00:18:34,200 --> 00:18:36,419
then what happens is

456
00:18:36,419 --> 00:18:39,600
it believes due to a data quality error

457
00:18:39,600 --> 00:18:43,500
that all vulnerabilities that you have

458
00:18:43,500 --> 00:18:45,539
sent out to all the teams have been

459
00:18:45,539 --> 00:18:47,280
resolved and therefore all the tickets

460
00:18:47,280 --> 00:18:49,320
that you have sent out to them

461
00:18:49,320 --> 00:18:51,299
should be closed and so like you have

462
00:18:51,299 --> 00:18:52,980
zero Open tickets and then so at first

463
00:18:52,980 --> 00:18:54,960
it's like oh you know we can pack it up

464
00:18:54,960 --> 00:18:57,480
it's a great day for security we win in

465
00:18:57,480 --> 00:19:01,380
box zero no this is not definitely not

466
00:19:01,380 --> 00:19:05,760
the case and so uh we've sent out an

467
00:19:05,760 --> 00:19:07,500
apology and in certain cases we actually

468
00:19:07,500 --> 00:19:09,240
had to send an apology about our apology

469
00:19:09,240 --> 00:19:11,760
because oh wait actually we're gonna

470
00:19:11,760 --> 00:19:13,620
Backtrack on that this is a bad place to

471
00:19:13,620 --> 00:19:16,860
be you do not want to be here and well

472
00:19:16,860 --> 00:19:19,140
eventually it works what did we do to

473
00:19:19,140 --> 00:19:21,660
make it all work and oh before I get

474
00:19:21,660 --> 00:19:23,940
into that that's a key detail here this

475
00:19:23,940 --> 00:19:26,460
was really ambitious the the part that I

476
00:19:26,460 --> 00:19:29,360
really want to emphasize was we

477
00:19:29,360 --> 00:19:31,919
decided that sending out tickets to

478
00:19:31,919 --> 00:19:34,080
teams no this was not an acceptable

479
00:19:34,080 --> 00:19:36,000
experience if that ticket especially the

480
00:19:36,000 --> 00:19:39,480
given volume of data was not going to be

481
00:19:39,480 --> 00:19:42,179
automatically closed so we had State

482
00:19:42,179 --> 00:19:44,460
machine logic that would detect that the

483
00:19:44,460 --> 00:19:46,440
vulnerability was gone so if that

484
00:19:46,440 --> 00:19:47,940
vulnerability was gone from the

485
00:19:47,940 --> 00:19:50,640
environment we would close it and then

486
00:19:50,640 --> 00:19:52,320
we'll do our own Bookkeeping on the back

487
00:19:52,320 --> 00:19:55,080
end and keep everything nice and tidy so

488
00:19:55,080 --> 00:19:58,260
uh in in my opinion I think that if you

489
00:19:58,260 --> 00:20:00,900
don't have that then you know if we

490
00:20:00,900 --> 00:20:02,039
didn't have that then we weren't really

491
00:20:02,039 --> 00:20:03,360
doing our job

492
00:20:03,360 --> 00:20:07,140
So eventually ambitious plan didn't work

493
00:20:07,140 --> 00:20:09,900
out at first eventually it did why did

494
00:20:09,900 --> 00:20:12,360
it work out well it's a work of like

495
00:20:12,360 --> 00:20:14,100
many other members on my team we put

496
00:20:14,100 --> 00:20:15,960
together we built engineering safeguards

497
00:20:15,960 --> 00:20:19,740
we did things like kill switches and so

498
00:20:19,740 --> 00:20:21,720
this one is like all right well

499
00:20:21,720 --> 00:20:24,600
if we get ourselves into a really bad

500
00:20:24,600 --> 00:20:26,580
situation and we need everything just

501
00:20:26,580 --> 00:20:29,100
done then we can just flip that switch

502
00:20:29,100 --> 00:20:30,840
and then just like skip over closing the

503
00:20:30,840 --> 00:20:32,340
rest of the state machine how do we get

504
00:20:32,340 --> 00:20:33,840
our robot to stop running away from

505
00:20:33,840 --> 00:20:36,360
ourselves we have a circuit breaker

506
00:20:36,360 --> 00:20:39,720
where if the number of tasks that we're

507
00:20:39,720 --> 00:20:42,120
going to close is greater than some

508
00:20:42,120 --> 00:20:45,179
threshold some sanity check then we will

509
00:20:45,179 --> 00:20:46,740
stop it right there and then we'll page

510
00:20:46,740 --> 00:20:49,580
the our own on call

511
00:20:49,580 --> 00:20:53,039
we have a set of dashboards and alarms

512
00:20:53,039 --> 00:20:56,880
we built a set of systems that count the

513
00:20:56,880 --> 00:20:58,799
number of assets that we have in our

514
00:20:58,799 --> 00:21:01,500
cartography powered graph and then we

515
00:21:01,500 --> 00:21:04,080
kind of measure exactly okay well if you

516
00:21:04,080 --> 00:21:05,640
kind of if you can chart these things

517
00:21:05,640 --> 00:21:07,260
you can set alarms and thresholds for if

518
00:21:07,260 --> 00:21:09,840
this number goes below or above a given

519
00:21:09,840 --> 00:21:13,320
threshold you can page the on call

520
00:21:13,320 --> 00:21:16,200
and this last point this last thing that

521
00:21:16,200 --> 00:21:18,960
we did right here was to staff the

522
00:21:18,960 --> 00:21:22,919
program properly and I think that this

523
00:21:22,919 --> 00:21:26,520
was the probably the biggest I don't

524
00:21:26,520 --> 00:21:27,660
want to say mistake but I think the

525
00:21:27,660 --> 00:21:29,039
biggest area of improvement that we

526
00:21:29,039 --> 00:21:30,380
could have made from the very beginning

527
00:21:30,380 --> 00:21:34,260
where uh like I said we started off in a

528
00:21:34,260 --> 00:21:37,260
surge effort and then the we and then

529
00:21:37,260 --> 00:21:39,120
afterwards the ownership story was

530
00:21:39,120 --> 00:21:41,700
unclear where we turned it over there

531
00:21:41,700 --> 00:21:43,740
was only maybe two people working on it

532
00:21:43,740 --> 00:21:45,539
and then other people came back in as

533
00:21:45,539 --> 00:21:47,460
volunteers to help get things in a good

534
00:21:47,460 --> 00:21:50,580
State again the final thing was we stood

535
00:21:50,580 --> 00:21:53,360
up a dedicated program a dedicated team

536
00:21:53,360 --> 00:21:56,400
for vulnerability management itself that

537
00:21:56,400 --> 00:21:58,200
handled things like building out the

538
00:21:58,200 --> 00:21:59,880
platform the care and feeding of these

539
00:21:59,880 --> 00:22:02,940
software systems handling answering

540
00:22:02,940 --> 00:22:05,580
questions when people got confused as

541
00:22:05,580 --> 00:22:07,860
part of the on-call and maintaining all

542
00:22:07,860 --> 00:22:09,059
of this

543
00:22:09,059 --> 00:22:12,659
so this was this was absolutely critical

544
00:22:12,659 --> 00:22:15,659
for us and so I want to talk about the

545
00:22:15,659 --> 00:22:17,100
things that we learned there were things

546
00:22:17,100 --> 00:22:21,120
that uh you know going back to I think

547
00:22:21,120 --> 00:22:22,260
that

548
00:22:22,260 --> 00:22:24,120
if we were to think about it from the

549
00:22:24,120 --> 00:22:26,220
original times you know

550
00:22:26,220 --> 00:22:28,260
we did things really well in certain

551
00:22:28,260 --> 00:22:30,659
areas and then there were definite some

552
00:22:30,659 --> 00:22:32,220
places that we missed such as those

553
00:22:32,220 --> 00:22:34,320
engineering scaffolds and then Staffing

554
00:22:34,320 --> 00:22:36,860
things properly so

555
00:22:36,860 --> 00:22:39,900
actionability is everything I think that

556
00:22:39,900 --> 00:22:42,000
uh I'm pretty happy that we took this

557
00:22:42,000 --> 00:22:45,120
approach where if there is nothing that

558
00:22:45,120 --> 00:22:47,400
a team can actually do for vulnerability

559
00:22:47,400 --> 00:22:49,740
then why bother them unless it's an all

560
00:22:49,740 --> 00:22:51,780
hands on deck situation where it needs

561
00:22:51,780 --> 00:22:53,900
Special Care

562
00:22:53,900 --> 00:22:57,419
yeah this is we we don't we have to

563
00:22:57,419 --> 00:22:58,799
balance all of these things there are

564
00:22:58,799 --> 00:23:00,720
competing priorities

565
00:23:00,720 --> 00:23:04,140
prefer fixing over telling we needed to

566
00:23:04,140 --> 00:23:06,960
be part of the solution so in order to

567
00:23:06,960 --> 00:23:09,179
get our teams to work together with us

568
00:23:09,179 --> 00:23:11,039
we took a partnership approach and then

569
00:23:11,039 --> 00:23:14,700
used we leveraged the existing work that

570
00:23:14,700 --> 00:23:17,460
our infra teams had provided for us this

571
00:23:17,460 --> 00:23:19,760
system that

572
00:23:19,760 --> 00:23:22,559
gave automatically generated pull

573
00:23:22,559 --> 00:23:25,320
requests to update the rest of the fleet

574
00:23:25,320 --> 00:23:28,200
and then pull down those fixes for uh

575
00:23:28,200 --> 00:23:31,620
for all of the downstream services

576
00:23:31,620 --> 00:23:34,260
automate for user experience and for

577
00:23:34,260 --> 00:23:37,500
team health so this is a very important

578
00:23:37,500 --> 00:23:41,220
point so having it again for us

579
00:23:41,220 --> 00:23:43,260
I think that it's a very unacceptable

580
00:23:43,260 --> 00:23:46,260
user experience to take all the findings

581
00:23:46,260 --> 00:23:49,020
scan findings shoot them up to all of

582
00:23:49,020 --> 00:23:51,840
the on calls and say good luck and you

583
00:23:51,840 --> 00:23:53,280
know we don't have if especially with

584
00:23:53,280 --> 00:23:55,220
the given volume that all of these uh

585
00:23:55,220 --> 00:23:58,740
that we had of tickets this is not

586
00:23:58,740 --> 00:24:00,960
acceptable so we built some State

587
00:24:00,960 --> 00:24:03,059
Management that handled all of that on

588
00:24:03,059 --> 00:24:04,440
the back end and automatically closed

589
00:24:04,440 --> 00:24:07,400
those tickets sure we had some problems

590
00:24:07,400 --> 00:24:10,200
with the rolling that our own and owning

591
00:24:10,200 --> 00:24:11,360
it ourselves

592
00:24:11,360 --> 00:24:13,679
but I guess the next part is you know

593
00:24:13,679 --> 00:24:15,659
when it comes to the aspects of teams so

594
00:24:15,659 --> 00:24:17,520
having automation for your team if

595
00:24:17,520 --> 00:24:19,260
there's any manual step in your vulner

596
00:24:19,260 --> 00:24:20,580
management program

597
00:24:20,580 --> 00:24:22,860
I would question how sustainable that is

598
00:24:22,860 --> 00:24:25,260
because I know that when we went through

599
00:24:25,260 --> 00:24:27,900
it this was really rough and we

600
00:24:27,900 --> 00:24:30,480
definitely burned out a lot of people

601
00:24:30,480 --> 00:24:33,780
and yes with the state management use

602
00:24:33,780 --> 00:24:35,640
engineering safeguards think about these

603
00:24:35,640 --> 00:24:37,620
things ahead of time do a phased rollout

604
00:24:37,620 --> 00:24:39,480
I think that we could have did things

605
00:24:39,480 --> 00:24:42,299
like let's first onboard only the

606
00:24:42,299 --> 00:24:44,460
security team to this process let's only

607
00:24:44,460 --> 00:24:46,380
on let's do some dog fooding of

608
00:24:46,380 --> 00:24:48,360
ourselves and let's do like a 20 roll

609
00:24:48,360 --> 00:24:51,900
out 60 roll out uh then see how the

610
00:24:51,900 --> 00:24:53,640
teams respond to it and then iterate and

611
00:24:53,640 --> 00:24:56,700
go from there in our case we had a lot

612
00:24:56,700 --> 00:24:58,500
of deadlines staring Us in the face and

613
00:24:58,500 --> 00:25:00,780
then we had a very motivated customer

614
00:25:00,780 --> 00:25:02,400
telling us oh you need these reports

615
00:25:02,400 --> 00:25:05,159
right now and so we had to sort of

616
00:25:05,159 --> 00:25:08,520
change we had the we had to improve the

617
00:25:08,520 --> 00:25:10,559
engine while driving it at the same time

618
00:25:10,559 --> 00:25:15,000
and that was very difficult but uh yeah

619
00:25:15,000 --> 00:25:18,360
if a lot of this was thought ahead of in

620
00:25:18,360 --> 00:25:19,799
advance I think we could have avoided

621
00:25:19,799 --> 00:25:21,900
some of those problems

622
00:25:21,900 --> 00:25:23,820
and then finally you know this last part

623
00:25:23,820 --> 00:25:26,460
is take care of each other and then this

624
00:25:26,460 --> 00:25:29,100
is especially true for the time when we

625
00:25:29,100 --> 00:25:30,539
put this all together this was during

626
00:25:30,539 --> 00:25:32,580
the pandemic during probably some of the

627
00:25:32,580 --> 00:25:34,860
worst times in a lot of our lives where

628
00:25:34,860 --> 00:25:36,419
we're all confined at home and then

629
00:25:36,419 --> 00:25:38,400
where a lot of us have been meeting each

630
00:25:38,400 --> 00:25:41,159
other only over video called not really

631
00:25:41,159 --> 00:25:43,440
building that team Rapport seeing each

632
00:25:43,440 --> 00:25:46,080
other in person and there's many aspects

633
00:25:46,080 --> 00:25:47,460
so what does this actually mean right

634
00:25:47,460 --> 00:25:48,779
what do you do to take care of each

635
00:25:48,779 --> 00:25:51,659
other as a team and what I would say to

636
00:25:51,659 --> 00:25:54,240
that is uh it comes in many different

637
00:25:54,240 --> 00:25:57,000
places and the first part is pushing

638
00:25:57,000 --> 00:26:00,539
back against unreasonable deadlines so

639
00:26:00,539 --> 00:26:02,039
if they're if you're getting a

640
00:26:02,039 --> 00:26:04,440
requirement I and then if there is a

641
00:26:04,440 --> 00:26:07,980
very high time uh susp if there's if

642
00:26:07,980 --> 00:26:09,720
there's a very urgent request I would be

643
00:26:09,720 --> 00:26:12,299
very critical of what that request would

644
00:26:12,299 --> 00:26:14,940
be is this really all that urgent is

645
00:26:14,940 --> 00:26:16,679
this really all that important and then

646
00:26:16,679 --> 00:26:18,299
kind of like make your own Matrix about

647
00:26:18,299 --> 00:26:21,240
what that looks like because above all

648
00:26:21,240 --> 00:26:23,220
else if you you have a team that's burnt

649
00:26:23,220 --> 00:26:25,380
down and not willing to work uh you know

650
00:26:25,380 --> 00:26:27,059
that's not gonna that's gonna be very

651
00:26:27,059 --> 00:26:28,380
unhappy for everybody and on the other

652
00:26:28,380 --> 00:26:30,179
hand if you have a sustainable set of

653
00:26:30,179 --> 00:26:31,500
Team practices then this will pay

654
00:26:31,500 --> 00:26:35,340
dividends in the long run and

655
00:26:35,340 --> 00:26:38,220
you know thank you very much for having

656
00:26:38,220 --> 00:26:40,740
me over here uh check out you can check

657
00:26:40,740 --> 00:26:42,299
out cartography you can reach me at the

658
00:26:42,299 --> 00:26:44,220
various socials we built out this

659
00:26:44,220 --> 00:26:47,159
approach you know I um

660
00:26:47,159 --> 00:26:49,620
I'm very interested to find out to see

661
00:26:49,620 --> 00:26:51,299
how others have solved this problem

662
00:26:51,299 --> 00:26:54,720
taking things where you are scanning

663
00:26:54,720 --> 00:26:56,340
these container images you're finding

664
00:26:56,340 --> 00:26:59,460
out where the actual uh where the

665
00:26:59,460 --> 00:27:01,740
finding was if it was actionable or not

666
00:27:01,740 --> 00:27:03,720
focusing on this making sure that your

667
00:27:03,720 --> 00:27:05,700
team does not have toil owning the State

668
00:27:05,700 --> 00:27:08,039
Management doing this in a life cycle

669
00:27:08,039 --> 00:27:10,440
process the care and feeding of your

670
00:27:10,440 --> 00:27:13,159
program uh you know

671
00:27:13,159 --> 00:27:16,140
definitely extremely excited and uh

672
00:27:16,140 --> 00:27:19,760
happy to be here thank you very much

673
00:27:21,790 --> 00:27:23,880
[Applause]

674
00:27:23,880 --> 00:27:26,100
fantastic thank you Alex

675
00:27:26,100 --> 00:27:28,799
folks we have time for one quick

676
00:27:28,799 --> 00:27:30,600
question and then most QA we would

677
00:27:30,600 --> 00:27:33,120
encourage you guys to uh do that in the

678
00:27:33,120 --> 00:27:34,620
hallway to make room for the next

679
00:27:34,620 --> 00:27:35,820
speaker

680
00:27:35,820 --> 00:27:37,740
I see a hand up I'm bringing the mic and

681
00:27:37,740 --> 00:27:40,820
I'm not going to fall this time

682
00:27:43,020 --> 00:27:44,760
hey thanks for the talk very interesting

683
00:27:44,760 --> 00:27:47,460
so a quick question on your MVP you said

684
00:27:47,460 --> 00:27:49,200
you did it in six months how many people

685
00:27:49,200 --> 00:27:51,120
do you use six weeks six weeks sorry six

686
00:27:51,120 --> 00:27:53,279
weeks how many people did you have and

687
00:27:53,279 --> 00:27:56,700
eventually how many uh team members for

688
00:27:56,700 --> 00:27:58,980
the actual you know I think you made

689
00:27:58,980 --> 00:28:00,840
improvements over time and to get it

690
00:28:00,840 --> 00:28:02,220
operationalized

691
00:28:02,220 --> 00:28:06,120
yeah so with the original MVP I think

692
00:28:06,120 --> 00:28:08,340
that there were

693
00:28:08,340 --> 00:28:10,799
10 to 15 originally across the entire

694
00:28:10,799 --> 00:28:13,260
company from infra and then this was not

695
00:28:13,260 --> 00:28:14,880
on just containers though this was again

696
00:28:14,880 --> 00:28:16,740
on the other work streams that I

697
00:28:16,740 --> 00:28:18,900
mentioned including the case nodes

698
00:28:18,900 --> 00:28:20,700
internet exposed assets and then all of

699
00:28:20,700 --> 00:28:22,919
those other things uh and then

700
00:28:22,919 --> 00:28:25,440
eventually when the we

701
00:28:25,440 --> 00:28:27,960
built out the full team this ended up

702
00:28:27,960 --> 00:28:31,260
being closer to three to five people and

703
00:28:31,260 --> 00:28:33,720
so three to five still sounds like it's

704
00:28:33,720 --> 00:28:36,419
a it is a very very small team but what

705
00:28:36,419 --> 00:28:38,640
I will say is that it is amazing what

706
00:28:38,640 --> 00:28:40,320
things can do and how much more fast you

707
00:28:40,320 --> 00:28:41,820
can move when the lines of

708
00:28:41,820 --> 00:28:43,919
responsibility are crystal clear when

709
00:28:43,919 --> 00:28:45,840
everybody knows I'm working on this bone

710
00:28:45,840 --> 00:28:48,179
management platform and this is what I

711
00:28:48,179 --> 00:28:50,580
am going to be uh evaluated on or this

712
00:28:50,580 --> 00:28:52,500
is like the thing that I own you know

713
00:28:52,500 --> 00:28:53,940
that's that's real powerful thing like

714
00:28:53,940 --> 00:28:55,620
when people are able to take ownership

715
00:28:55,620 --> 00:28:57,720
over a project and then you know make

716
00:28:57,720 --> 00:29:01,559
their own contributions you know that's

717
00:29:01,559 --> 00:29:03,200
uh

718
00:29:03,200 --> 00:29:06,679
it multiplies

