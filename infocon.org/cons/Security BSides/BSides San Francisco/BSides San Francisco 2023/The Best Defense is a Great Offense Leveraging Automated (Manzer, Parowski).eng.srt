1
00:00:00,000 --> 00:00:02,100
I'm Mike perowski from the network

2
00:00:02,100 --> 00:00:04,200
threat detection team at meta and my

3
00:00:04,200 --> 00:00:06,240
co-presenter here is Sam manzer on the

4
00:00:06,240 --> 00:00:08,460
purple team and over the last few months

5
00:00:08,460 --> 00:00:10,860
we've been fusing our defensive and

6
00:00:10,860 --> 00:00:13,200
offensive skill sets to build an

7
00:00:13,200 --> 00:00:16,500
end-to-end automated uh offensive attack

8
00:00:16,500 --> 00:00:18,359
framework that enables us to validate

9
00:00:18,359 --> 00:00:21,180
and tune our detections and so we're

10
00:00:21,180 --> 00:00:22,260
here today to talk to you about that

11
00:00:22,260 --> 00:00:23,760
process some of the challenges along the

12
00:00:23,760 --> 00:00:26,279
way and the successes we're seeing as a

13
00:00:26,279 --> 00:00:27,900
result

14
00:00:27,900 --> 00:00:29,939
so just to do a little bit of

15
00:00:29,939 --> 00:00:32,220
bookkeeping first I'm going to first

16
00:00:32,220 --> 00:00:34,079
introduce you to my team's hypothesis

17
00:00:34,079 --> 00:00:36,719
and kind of reason for existing and what

18
00:00:36,719 --> 00:00:37,920
we're working on and then I'm going to

19
00:00:37,920 --> 00:00:40,379
hand it off to Sam to defend that thesis

20
00:00:40,379 --> 00:00:42,780
and then if we're going to dive into the

21
00:00:42,780 --> 00:00:44,760
process of detection engineering on our

22
00:00:44,760 --> 00:00:48,239
team uh how Sam's attacker on attacker

23
00:00:48,239 --> 00:00:50,039
on demand infrastructure helps us

24
00:00:50,039 --> 00:00:52,020
achieve those ends and then sort of walk

25
00:00:52,020 --> 00:00:53,219
you through what it actually looks like

26
00:00:53,219 --> 00:00:55,199
to use the system and how it enables us

27
00:00:55,199 --> 00:00:58,079
to build highly effective High Fidelity

28
00:00:58,079 --> 00:01:00,059
proactive detections

29
00:01:00,059 --> 00:01:02,699
so first the thesis and I do anticipate

30
00:01:02,699 --> 00:01:04,019
some eye rolls here

31
00:01:04,019 --> 00:01:07,140
so these days it seems most industry

32
00:01:07,140 --> 00:01:08,700
standard detection and response

33
00:01:08,700 --> 00:01:11,340
strategies rely very heavily on

34
00:01:11,340 --> 00:01:13,260
application logging and host level

35
00:01:13,260 --> 00:01:15,780
logging as a first line of defense only

36
00:01:15,780 --> 00:01:18,299
then pivoting to network Telemetry to

37
00:01:18,299 --> 00:01:21,720
gather additional context and evidence

38
00:01:21,720 --> 00:01:24,180
my team's uh my team's hypothesis is

39
00:01:24,180 --> 00:01:26,040
that this Paradigm is backwards that we

40
00:01:26,040 --> 00:01:27,659
can actually rely on network Telemetry

41
00:01:27,659 --> 00:01:30,600
first as it is inherently reliable

42
00:01:30,600 --> 00:01:33,600
comprehensive and generalizable and

43
00:01:33,600 --> 00:01:34,860
we're going to dive into more about what

44
00:01:34,860 --> 00:01:35,939
that means but I just want you to keep

45
00:01:35,939 --> 00:01:37,560
that in mind as we talk through it and

46
00:01:37,560 --> 00:01:39,960
uh be the judge of it yourselves cool

47
00:01:39,960 --> 00:01:42,659
Sam

48
00:01:42,659 --> 00:01:45,600
hi there y'all so let's talk a little

49
00:01:45,600 --> 00:01:47,700
bit about these Network level detections

50
00:01:47,700 --> 00:01:50,579
and how they relate to EDR that sort of

51
00:01:50,579 --> 00:01:52,920
table Stakes endpoint host based

52
00:01:52,920 --> 00:01:55,079
protection uh that you got in your

53
00:01:55,079 --> 00:01:56,579
organization whether it's from Microsoft

54
00:01:56,579 --> 00:01:58,860
defender or crowdstrike or whatever

55
00:01:58,860 --> 00:02:01,920
y'all like to use so you yours pretty

56
00:02:01,920 --> 00:02:04,920
good these days uh EDR will generally

57
00:02:04,920 --> 00:02:06,780
make your life a lot more difficult if

58
00:02:06,780 --> 00:02:07,920
you're a red team or offensive

59
00:02:07,920 --> 00:02:10,619
practitioner of some sort you can get

60
00:02:10,619 --> 00:02:12,959
around it but it gets harder and harder

61
00:02:12,959 --> 00:02:14,580
every year and it's pretty smart at

62
00:02:14,580 --> 00:02:16,620
catching the obvious stuff these days

63
00:02:16,620 --> 00:02:19,080
so

64
00:02:19,080 --> 00:02:21,300
nonetheless I want to talk a little bit

65
00:02:21,300 --> 00:02:24,120
about how Network level detections can

66
00:02:24,120 --> 00:02:26,040
provide a lot of additional value and

67
00:02:26,040 --> 00:02:27,360
really complement the organization

68
00:02:27,360 --> 00:02:29,280
security strategy

69
00:02:29,280 --> 00:02:31,319
so

70
00:02:31,319 --> 00:02:34,800
the challenge with EDR is that there are

71
00:02:34,800 --> 00:02:35,940
a whole bunch of ways to trick users

72
00:02:35,940 --> 00:02:37,500
into disabling it

73
00:02:37,500 --> 00:02:41,519
um this is my favorite one so if you uh

74
00:02:41,519 --> 00:02:43,019
go on GitHub and you go use whatever

75
00:02:43,019 --> 00:02:44,519
cool new JavaScript framework or new

76
00:02:44,519 --> 00:02:46,080
tool a lot of them will tell you to do

77
00:02:46,080 --> 00:02:48,420
this and in fact uh to install the

78
00:02:48,420 --> 00:02:50,940
product and in fact some of the security

79
00:02:50,940 --> 00:02:52,319
products out there will also tell you to

80
00:02:52,319 --> 00:02:55,319
do it this way and this will basically

81
00:02:55,319 --> 00:02:57,180
bypass a lot of edrs because it never

82
00:02:57,180 --> 00:02:58,620
hits the disk because you already

83
00:02:58,620 --> 00:03:03,060
elevated to sudo so if you um want to

84
00:03:03,060 --> 00:03:05,700
try something fun you can just put a

85
00:03:05,700 --> 00:03:08,640
little shell script in there and uh the

86
00:03:08,640 --> 00:03:10,200
uh they wouldn't let us put in the exact

87
00:03:10,200 --> 00:03:12,000
one liner for this but you can ask me

88
00:03:12,000 --> 00:03:14,340
after the talk uh get disabled a lot of

89
00:03:14,340 --> 00:03:15,959
interesting edrs just with this couple

90
00:03:15,959 --> 00:03:18,120
lines drop a commodity payload that any

91
00:03:18,120 --> 00:03:20,519
EDR should catch won't get caught and so

92
00:03:20,519 --> 00:03:21,900
I think this uh this sort of little

93
00:03:21,900 --> 00:03:24,000
tidbit is sort of an example of the

94
00:03:24,000 --> 00:03:26,940
general class of issues that relying

95
00:03:26,940 --> 00:03:29,340
solely on EDR can give you which is that

96
00:03:29,340 --> 00:03:31,739
it's fragile it's on the end point the

97
00:03:31,739 --> 00:03:34,379
employee has access to the endpoint and

98
00:03:34,379 --> 00:03:36,239
if they have sudo and they're really

99
00:03:36,239 --> 00:03:37,680
busy there's a whole bunch of stuff they

100
00:03:37,680 --> 00:03:39,060
can do that's going to remove that layer

101
00:03:39,060 --> 00:03:41,220
of protection for you

102
00:03:41,220 --> 00:03:43,739
the other challenge is that if you're in

103
00:03:43,739 --> 00:03:45,540
a big organization

104
00:03:45,540 --> 00:03:47,159
um you only have you probably have a

105
00:03:47,159 --> 00:03:48,060
whole lot of different kinds of

106
00:03:48,060 --> 00:03:51,959
endpoints and they may not all have EDR

107
00:03:51,959 --> 00:03:54,900
um and even if they do EDR may not work

108
00:03:54,900 --> 00:03:56,459
the same into the same level of quality

109
00:03:56,459 --> 00:03:59,760
and protection on one type of endpoint

110
00:03:59,760 --> 00:04:02,780
as it does on the others

111
00:04:02,879 --> 00:04:03,900
so

112
00:04:03,900 --> 00:04:05,760
because of the fact that EDR exists in

113
00:04:05,760 --> 00:04:06,959
this hostile environment where you've

114
00:04:06,959 --> 00:04:08,280
got users who are always just like one

115
00:04:08,280 --> 00:04:09,720
right click away from doing like run as

116
00:04:09,720 --> 00:04:11,400
an administrator or what have you or

117
00:04:11,400 --> 00:04:12,599
otherwise somehow bypassing your

118
00:04:12,599 --> 00:04:15,079
protections

119
00:04:15,239 --> 00:04:17,579
it can perform well in certain scenarios

120
00:04:17,579 --> 00:04:19,199
but in other scenarios it will struggle

121
00:04:19,199 --> 00:04:21,478
so let's talk about how how well EDR can

122
00:04:21,478 --> 00:04:22,680
work in different scenarios within the

123
00:04:22,680 --> 00:04:25,320
organization so I like to think of Bob

124
00:04:25,320 --> 00:04:27,720
as sort of like the role that EDR is

125
00:04:27,720 --> 00:04:29,820
really best designed to protect

126
00:04:29,820 --> 00:04:32,100
um so you know about a lot of y'all if

127
00:04:32,100 --> 00:04:33,419
you if you all worked any kind of I.T

128
00:04:33,419 --> 00:04:34,620
support role in the past you think like

129
00:04:34,620 --> 00:04:35,940
oh well Bob's

130
00:04:35,940 --> 00:04:37,620
you know Bob's are the source of a lot

131
00:04:37,620 --> 00:04:38,880
of my problems Bob's always trying to

132
00:04:38,880 --> 00:04:40,680
upgrade Adobe Flash Player and it causes

133
00:04:40,680 --> 00:04:42,180
me all kinds of problems

134
00:04:42,180 --> 00:04:43,979
um and that's true no one can completely

135
00:04:43,979 --> 00:04:46,340
protect the Bobs out there but

136
00:04:46,340 --> 00:04:49,560
EDR does a good job of catching a lot of

137
00:04:49,560 --> 00:04:50,699
the type of stuff

138
00:04:50,699 --> 00:04:52,740
um that Bob is going to click uh to get

139
00:04:52,740 --> 00:04:55,080
your endpoint owned

140
00:04:55,080 --> 00:04:58,560
um but the challenge is there's a whole

141
00:04:58,560 --> 00:04:59,699
lot of other kinds of endpoints and a

142
00:04:59,699 --> 00:05:00,840
whole lot of other kind of workflows out

143
00:05:00,840 --> 00:05:04,259
there so your devs for example probably

144
00:05:04,259 --> 00:05:06,900
using Max in a lot of shops

145
00:05:06,900 --> 00:05:08,460
that's okay your EDR says they support

146
00:05:08,460 --> 00:05:11,340
Mac uh but the actual performance of a

147
00:05:11,340 --> 00:05:13,080
lot of the detections uh may be

148
00:05:13,080 --> 00:05:14,580
drastically different uh than what

149
00:05:14,580 --> 00:05:15,840
you'll see on your windows Fleet for

150
00:05:15,840 --> 00:05:18,120
example in addition

151
00:05:18,120 --> 00:05:19,560
the devs are probably more likely to be

152
00:05:19,560 --> 00:05:21,120
the folks who are going to curl to bash

153
00:05:21,120 --> 00:05:24,419
with sudo and so they have a sort of

154
00:05:24,419 --> 00:05:26,880
unique set of threats that come from

155
00:05:26,880 --> 00:05:28,380
those types of workloads

156
00:05:28,380 --> 00:05:31,979
now we've also got folks doing really

157
00:05:31,979 --> 00:05:35,160
high-end r d work and the machines that

158
00:05:35,160 --> 00:05:36,419
they're running which will probably look

159
00:05:36,419 --> 00:05:37,860
a whole lot different maybe they don't

160
00:05:37,860 --> 00:05:40,620
even have EDR at all on them because

161
00:05:40,620 --> 00:05:42,539
someone forgot to set that up

162
00:05:42,539 --> 00:05:44,280
um or maybe again the EDR doesn't work

163
00:05:44,280 --> 00:05:46,139
well because they're weird BSD machines

164
00:05:46,139 --> 00:05:49,759
or something like that so

165
00:05:49,800 --> 00:05:52,500
it doesn't stop there right your Docker

166
00:05:52,500 --> 00:05:54,300
container is also an endpoint

167
00:05:54,300 --> 00:05:56,220
um if you had supply chain attacked and

168
00:05:56,220 --> 00:05:58,620
you get you know some evil npm package

169
00:05:58,620 --> 00:06:00,120
that drops an implant inside that Docker

170
00:06:00,120 --> 00:06:01,919
container well it's contained in a

171
00:06:01,919 --> 00:06:03,240
certain sense can probably scan your

172
00:06:03,240 --> 00:06:04,919
whole internal Network though and

173
00:06:04,919 --> 00:06:05,940
there's probably like a whole bunch of

174
00:06:05,940 --> 00:06:08,460
other nasty stuff it can do too

175
00:06:08,460 --> 00:06:09,840
um if you're running some EDR on a

176
00:06:09,840 --> 00:06:10,860
MacBook and you're running Docker for

177
00:06:10,860 --> 00:06:12,840
Mac which is a Linux VM inside I almost

178
00:06:12,840 --> 00:06:14,160
guarantee you it's not getting scanned

179
00:06:14,160 --> 00:06:18,000
at all so there's some challenges there

180
00:06:18,000 --> 00:06:19,320
um and then of course there's every

181
00:06:19,320 --> 00:06:20,400
single other kind of device that's

182
00:06:20,400 --> 00:06:21,600
running behind your perimeter it could

183
00:06:21,600 --> 00:06:23,280
be a switch could be the CEO's Apple

184
00:06:23,280 --> 00:06:25,800
watch all kinds of stuff

185
00:06:25,800 --> 00:06:28,620
um these

186
00:06:28,620 --> 00:06:31,380
this wide variety of different endpoint

187
00:06:31,380 --> 00:06:33,600
types and the challenges in getting

188
00:06:33,600 --> 00:06:36,660
uniform EDR coverage across that leads

189
00:06:36,660 --> 00:06:39,240
to a situation where Network threat

190
00:06:39,240 --> 00:06:41,400
detection can especially shine as a

191
00:06:41,400 --> 00:06:42,900
compliment that gives you that breadth

192
00:06:42,900 --> 00:06:45,419
of coverage and so Mike is going to tell

193
00:06:45,419 --> 00:06:46,919
you a lot about how we get a lot of

194
00:06:46,919 --> 00:06:49,580
value out of that

195
00:06:50,220 --> 00:06:52,020
thanks Sam for the good info and

196
00:06:52,020 --> 00:06:53,580
justifying my employment I appreciate

197
00:06:53,580 --> 00:06:55,319
both of those always

198
00:06:55,319 --> 00:06:58,560
so uh as you mentioned yeah and as you

199
00:06:58,560 --> 00:07:00,720
can see in the diagram here what we are

200
00:07:00,720 --> 00:07:02,460
really proud of is the fact that as long

201
00:07:02,460 --> 00:07:04,500
as you intelligently select where you

202
00:07:04,500 --> 00:07:06,300
are tapping the traffic and you ensure

203
00:07:06,300 --> 00:07:08,460
that you're utilizing very natural choke

204
00:07:08,460 --> 00:07:10,199
points that we expect everything to flow

205
00:07:10,199 --> 00:07:12,180
through we will see it all in the

206
00:07:12,180 --> 00:07:13,979
network independent of device or

207
00:07:13,979 --> 00:07:16,199
operating system or newness to the

208
00:07:16,199 --> 00:07:18,539
network or what have you

209
00:07:18,539 --> 00:07:21,539
and so we leverage this advantage and

210
00:07:21,539 --> 00:07:24,120
attempt to detect these three ttps

211
00:07:24,120 --> 00:07:26,340
mainly we are exclusive or not exclusive

212
00:07:26,340 --> 00:07:28,800
we are mostly targeting command and

213
00:07:28,800 --> 00:07:30,900
control traffic anomalous data

214
00:07:30,900 --> 00:07:32,819
exfiltration patterns and network

215
00:07:32,819 --> 00:07:34,800
service Discovery or mass scanning

216
00:07:34,800 --> 00:07:37,139
inside and around our Network and we do

217
00:07:37,139 --> 00:07:40,800
this using mostly z-clogs so for those

218
00:07:40,800 --> 00:07:42,720
of you who aren't familiar Zeke which is

219
00:07:42,720 --> 00:07:45,840
formerly known as bro is an open source

220
00:07:45,840 --> 00:07:48,539
and passive Network analyzer I like to

221
00:07:48,539 --> 00:07:50,699
think of it as a connection-oriented

222
00:07:50,699 --> 00:07:53,580
Wireshark so rather than inspecting

223
00:07:53,580 --> 00:07:55,500
individual packets you're seeing the

224
00:07:55,500 --> 00:07:58,259
full session between any given set of

225
00:07:58,259 --> 00:08:00,960
endpoints what we really like about this

226
00:08:00,960 --> 00:08:03,539
is it formats our logs in a highly

227
00:08:03,539 --> 00:08:05,759
digestible way so just right out of the

228
00:08:05,759 --> 00:08:07,500
box we can ingest them into our internal

229
00:08:07,500 --> 00:08:09,539
Data Systems and query them

230
00:08:09,539 --> 00:08:11,099
intelligently and build our detections

231
00:08:11,099 --> 00:08:13,199
around that additionally it's very

232
00:08:13,199 --> 00:08:15,599
extensible so while it comes with a

233
00:08:15,599 --> 00:08:17,220
series of Base packages that we rely on

234
00:08:17,220 --> 00:08:19,259
pretty heavily we can add things onto it

235
00:08:19,259 --> 00:08:21,479
over time as we have new protocols being

236
00:08:21,479 --> 00:08:23,759
introduced or new detection methods that

237
00:08:23,759 --> 00:08:25,440
we would like to try out and look out

238
00:08:25,440 --> 00:08:28,259
for in our Network

239
00:08:28,259 --> 00:08:31,620
so to use the software we position we we

240
00:08:31,620 --> 00:08:34,320
own and operate a fleet of sensors and

241
00:08:34,320 --> 00:08:36,958
we position them all along the perimeter

242
00:08:36,958 --> 00:08:38,820
of our Enterprise Network and what this

243
00:08:38,820 --> 00:08:40,440
achieves for us is this natural choke

244
00:08:40,440 --> 00:08:42,360
point that I mentioned before where all

245
00:08:42,360 --> 00:08:44,520
traffic egressing and ingressing our

246
00:08:44,520 --> 00:08:46,380
corporate environment into and out of

247
00:08:46,380 --> 00:08:48,540
prod we see and into and out of the

248
00:08:48,540 --> 00:08:50,880
public internet we see in addition enter

249
00:08:50,880 --> 00:08:52,860
DC hops within the Enterprise Network we

250
00:08:52,860 --> 00:08:55,140
also catch so what we have here again is

251
00:08:55,140 --> 00:08:57,720
are these natural choke points these

252
00:08:57,720 --> 00:08:59,220
locations around our Network where we

253
00:08:59,220 --> 00:09:01,260
are virtually guaranteed to see all

254
00:09:01,260 --> 00:09:03,360
traffic go in and out of independent of

255
00:09:03,360 --> 00:09:04,980
where it's coming from and the platforms

256
00:09:04,980 --> 00:09:07,200
it originates from and so we can use

257
00:09:07,200 --> 00:09:09,660
sort of this this advantage to build

258
00:09:09,660 --> 00:09:11,339
really high fidelity detections on top

259
00:09:11,339 --> 00:09:13,740
of assuming we can overcome some of the

260
00:09:13,740 --> 00:09:16,200
challenges that we're going to discuss

261
00:09:16,200 --> 00:09:17,760
um before I get there I did just want to

262
00:09:17,760 --> 00:09:19,560
give you a little bit of an example uh

263
00:09:19,560 --> 00:09:20,940
before we get too deep into the weeds

264
00:09:20,940 --> 00:09:23,760
this is what uh your typical z-clog will

265
00:09:23,760 --> 00:09:26,100
look like so this is the dns.log which

266
00:09:26,100 --> 00:09:27,959
we use pretty heavily for DNS C2

267
00:09:27,959 --> 00:09:29,880
detections and as you can see here you

268
00:09:29,880 --> 00:09:31,500
get the basic fields that you would in

269
00:09:31,500 --> 00:09:34,440
any sort of netflow with the source IP

270
00:09:34,440 --> 00:09:36,600
desk IP and the ports but you also get

271
00:09:36,600 --> 00:09:39,540
all of the very specific DNS Fields

272
00:09:39,540 --> 00:09:41,880
parsed out completely in a very

273
00:09:41,880 --> 00:09:44,220
queryable way so you have the the actual

274
00:09:44,220 --> 00:09:45,899
query name and the class and the queue

275
00:09:45,899 --> 00:09:48,120
type and so on and so forth and so these

276
00:09:48,120 --> 00:09:49,320
are the fields that we can sort of

277
00:09:49,320 --> 00:09:51,120
intelligently pick which ones are

278
00:09:51,120 --> 00:09:54,240
relevant to map after attacker behavior

279
00:09:54,240 --> 00:09:56,220
and sort of model the behavioral

280
00:09:56,220 --> 00:09:57,959
detection around

281
00:09:57,959 --> 00:10:00,480
and so the reason I showed DNS first is

282
00:10:00,480 --> 00:10:02,459
because this was actually the first

283
00:10:02,459 --> 00:10:04,380
success that my team had inside of our

284
00:10:04,380 --> 00:10:06,540
Network so we were monitoring for

285
00:10:06,540 --> 00:10:09,120
anomalous spikes in DNS text queries

286
00:10:09,120 --> 00:10:11,220
which is sort of the canonical Network

287
00:10:11,220 --> 00:10:13,580
Telemetry as a detection Source example

288
00:10:13,580 --> 00:10:16,440
in case you're not familiar DNS text

289
00:10:16,440 --> 00:10:18,779
queries enable arbitrary blob data to be

290
00:10:18,779 --> 00:10:20,580
communicated back and forth and it's

291
00:10:20,580 --> 00:10:22,260
difficult to block because you would

292
00:10:22,260 --> 00:10:24,540
essentially have to disable DNS across

293
00:10:24,540 --> 00:10:26,640
the network which breaks a lot of things

294
00:10:26,640 --> 00:10:29,700
or everything so we took this concept

295
00:10:29,700 --> 00:10:32,160
began modeling what the DNS text queries

296
00:10:32,160 --> 00:10:33,959
look like in our environment and set

297
00:10:33,959 --> 00:10:35,880
some thresholds we wanted to see when

298
00:10:35,880 --> 00:10:37,380
there were really large spikes in that

299
00:10:37,380 --> 00:10:40,980
behavior and uh alert when we see them

300
00:10:40,980 --> 00:10:43,740
and so this was the first big win that

301
00:10:43,740 --> 00:10:45,120
we had that came out of that as you can

302
00:10:45,120 --> 00:10:47,459
see here we had a task generated with

303
00:10:47,459 --> 00:10:49,640
all of these really fun looking domains

304
00:10:49,640 --> 00:10:52,920
that at first glance look scary like

305
00:10:52,920 --> 00:10:54,959
there's a ton of important encoded data

306
00:10:54,959 --> 00:10:57,240
being transmitted across but also with

307
00:10:57,240 --> 00:10:59,700
these very fun dictionary mashed up

308
00:10:59,700 --> 00:11:02,220
words like beneficial skull cap and life

309
00:11:02,220 --> 00:11:04,920
in the DMZ which seems a bit conspicuous

310
00:11:04,920 --> 00:11:07,740
for your standard attacker so I went

311
00:11:07,740 --> 00:11:09,000
ahead and tapped the shoulders of our

312
00:11:09,000 --> 00:11:10,920
offensive Security Group at meta and

313
00:11:10,920 --> 00:11:12,779
sure enough this was a covert red team

314
00:11:12,779 --> 00:11:15,060
up and they were X filling some data and

315
00:11:15,060 --> 00:11:16,920
using DNS text records as a way to

316
00:11:16,920 --> 00:11:18,959
command and control so after this

317
00:11:18,959 --> 00:11:20,160
Victory we started to feel quite

318
00:11:20,160 --> 00:11:22,260
confident that okay we can use these

319
00:11:22,260 --> 00:11:24,540
network uh this network Telemetry and

320
00:11:24,540 --> 00:11:26,040
develop you know pretty high fidelity

321
00:11:26,040 --> 00:11:28,939
detections after it

322
00:11:29,040 --> 00:11:30,839
and now I do just want to nip this one

323
00:11:30,839 --> 00:11:32,700
in the bud because we get this all the

324
00:11:32,700 --> 00:11:33,899
time and I feel like I'm constantly

325
00:11:33,899 --> 00:11:35,579
addressing this so right out of the gate

326
00:11:35,579 --> 00:11:38,339
YES Network detection is hard because a

327
00:11:38,339 --> 00:11:41,459
lot of things are encrypted however this

328
00:11:41,459 --> 00:11:43,740
is not a reason this should not be a

329
00:11:43,740 --> 00:11:46,260
reason to not use Network Telemetry and

330
00:11:46,260 --> 00:11:48,000
build a detection system on top of that

331
00:11:48,000 --> 00:11:50,519
data it often gets cited as well if

332
00:11:50,519 --> 00:11:51,720
everything's encrypted how much value

333
00:11:51,720 --> 00:11:54,420
can we really get out of it I'm here to

334
00:11:54,420 --> 00:11:56,100
tell you a lot there's a lot you can do

335
00:11:56,100 --> 00:11:58,560
with this data because there are a bunch

336
00:11:58,560 --> 00:12:00,420
of remaining unencrypted protocols some

337
00:12:00,420 --> 00:12:02,640
that will uh will surprise you you know

338
00:12:02,640 --> 00:12:04,920
which is signal on its own and then you

339
00:12:04,920 --> 00:12:06,660
can also use the metadata even in

340
00:12:06,660 --> 00:12:08,040
encrypted traffic to get some pretty

341
00:12:08,040 --> 00:12:10,320
interesting results for example time

342
00:12:10,320 --> 00:12:11,880
series heuristics which we are going to

343
00:12:11,880 --> 00:12:14,760
dive into next is what we're using for

344
00:12:14,760 --> 00:12:17,399
some pretty cool C2 type beaconing

345
00:12:17,399 --> 00:12:18,480
detectors

346
00:12:18,480 --> 00:12:20,700
so before I explain that I just want to

347
00:12:20,700 --> 00:12:23,040
show you this is the SSL log it's just a

348
00:12:23,040 --> 00:12:25,380
legacy name but it encapsulates modern

349
00:12:25,380 --> 00:12:28,680
TLS traffic as well this is the default

350
00:12:28,680 --> 00:12:31,860
z-clog for SSL traffic same thing you

351
00:12:31,860 --> 00:12:33,360
get the standard netflow traffic plus

352
00:12:33,360 --> 00:12:35,519
some of the algorithms used the server

353
00:12:35,519 --> 00:12:37,800
name search chains and so on and so

354
00:12:37,800 --> 00:12:38,820
forth

355
00:12:38,820 --> 00:12:42,060
and so my job in this detection this

356
00:12:42,060 --> 00:12:43,139
specific detector we're going to talk

357
00:12:43,139 --> 00:12:45,120
about was to identify which Fields here

358
00:12:45,120 --> 00:12:47,760
we could use even in the case of an

359
00:12:47,760 --> 00:12:50,760
encrypted C2 traffic and so really what

360
00:12:50,760 --> 00:12:51,779
we really

361
00:12:51,779 --> 00:12:54,660
all we needed was the the flow traffic

362
00:12:54,660 --> 00:12:57,360
the time stamps and then some of the

363
00:12:57,360 --> 00:12:59,940
server name and endpoint uh information

364
00:12:59,940 --> 00:13:01,860
which we can all get pretty easily here

365
00:13:01,860 --> 00:13:05,100
regardless of the encryption used

366
00:13:05,100 --> 00:13:07,320
so to go forward I'm going to lay out

367
00:13:07,320 --> 00:13:08,760
sort of the scenario that we're working

368
00:13:08,760 --> 00:13:11,399
with here so Sam manzer a very honest

369
00:13:11,399 --> 00:13:13,500
and hard-working employee at meta saw

370
00:13:13,500 --> 00:13:15,480
this email and felt the absolute need to

371
00:13:15,480 --> 00:13:18,240
click it and as a result now has a

372
00:13:18,240 --> 00:13:19,620
little implant installed in his machine

373
00:13:19,620 --> 00:13:22,560
that is going to be communicating out to

374
00:13:22,560 --> 00:13:25,079
with the attacker infrastructure using

375
00:13:25,079 --> 00:13:29,579
SSL as it's as its C2 Transportation

376
00:13:29,579 --> 00:13:30,480
Lane

377
00:13:30,480 --> 00:13:33,300
uh a common tactic with these C2

378
00:13:33,300 --> 00:13:37,200
Frameworks is to include a repetitive a

379
00:13:37,200 --> 00:13:39,000
periodic beaconing function essentially

380
00:13:39,000 --> 00:13:41,459
a still alive to communicate out to say

381
00:13:41,459 --> 00:13:43,500
we still have this foothold

382
00:13:43,500 --> 00:13:45,660
um and give the attackers the peace of

383
00:13:45,660 --> 00:13:46,560
mind that they continue with their

384
00:13:46,560 --> 00:13:49,079
operation at their Leisure there's some

385
00:13:49,079 --> 00:13:51,000
nuances to it you can introduce Jitter

386
00:13:51,000 --> 00:13:53,279
in either direction but essentially what

387
00:13:53,279 --> 00:13:54,839
you're going to be looking at is traffic

388
00:13:54,839 --> 00:13:57,180
that looks something like this just very

389
00:13:57,180 --> 00:13:59,760
periodic spikes in traffic to some

390
00:13:59,760 --> 00:14:01,500
location it's not going to be a lot of

391
00:14:01,500 --> 00:14:02,639
data being sent but it's going to be

392
00:14:02,639 --> 00:14:05,160
very patterned this deviates in theory

393
00:14:05,160 --> 00:14:07,079
pretty significantly from standard

394
00:14:07,079 --> 00:14:08,639
traffic going on inside of the corporate

395
00:14:08,639 --> 00:14:10,860
environment so our logic is okay let's

396
00:14:10,860 --> 00:14:13,260
try to encapsulate this behavior in a

397
00:14:13,260 --> 00:14:16,440
little SQL query Target our SSL logs and

398
00:14:16,440 --> 00:14:19,320
see uh See if we what we can find

399
00:14:19,320 --> 00:14:22,380
and so that is exactly what we did and

400
00:14:22,380 --> 00:14:24,240
we uncovered a few different you know

401
00:14:24,240 --> 00:14:26,220
pretty significant challenges the first

402
00:14:26,220 --> 00:14:27,839
one here is that large corporate

403
00:14:27,839 --> 00:14:29,220
networks particularly the one that I've

404
00:14:29,220 --> 00:14:31,800
been working on uh are very loud there

405
00:14:31,800 --> 00:14:33,720
is a ton of noise in every direction and

406
00:14:33,720 --> 00:14:35,519
for every detection idea however Rock

407
00:14:35,519 --> 00:14:37,200
Solid it might be you're going to have

408
00:14:37,200 --> 00:14:39,420
dozens of corner cases and edge cases

409
00:14:39,420 --> 00:14:41,940
for every engineer you could possibly

410
00:14:41,940 --> 00:14:44,100
think of saying that they need this

411
00:14:44,100 --> 00:14:46,380
tunnel exiting the network and egressing

412
00:14:46,380 --> 00:14:47,820
all of this data which drives me crazy

413
00:14:47,820 --> 00:14:50,880
but we have to acquiesce sometimes so

414
00:14:50,880 --> 00:14:53,579
that's the first challenge we run into

415
00:14:53,579 --> 00:14:56,579
um second one is you can put all your

416
00:14:56,579 --> 00:14:58,079
effort into developing these really

417
00:14:58,079 --> 00:15:01,199
intense you know logically sound queries

418
00:15:01,199 --> 00:15:02,699
and you end up with something that looks

419
00:15:02,699 --> 00:15:06,300
like this uh albeit obfuscated uh SQL

420
00:15:06,300 --> 00:15:07,260
code

421
00:15:07,260 --> 00:15:09,060
the problem really comes around when

422
00:15:09,060 --> 00:15:10,860
it's you can dedicate all these

423
00:15:10,860 --> 00:15:12,240
resources but you have no idea that it's

424
00:15:12,240 --> 00:15:14,220
actually correctly targeting what you

425
00:15:14,220 --> 00:15:15,899
want you could be getting 100 results

426
00:15:15,899 --> 00:15:17,519
per day but how do you know that the

427
00:15:17,519 --> 00:15:18,720
actual beaconing traffic that you're

428
00:15:18,720 --> 00:15:20,339
looking for is in those results every

429
00:15:20,339 --> 00:15:22,260
day so that's a problem we're trying to

430
00:15:22,260 --> 00:15:23,820
address

431
00:15:23,820 --> 00:15:26,279
and then this last challenge that I want

432
00:15:26,279 --> 00:15:27,420
to discuss is something that should be

433
00:15:27,420 --> 00:15:28,860
familiar to pretty much everyone in the

434
00:15:28,860 --> 00:15:30,300
room here as Security Professionals

435
00:15:30,300 --> 00:15:32,519
although I do feel that in detection

436
00:15:32,519 --> 00:15:34,079
engineering it is particularly

437
00:15:34,079 --> 00:15:37,440
particularly front of mind and it's that

438
00:15:37,440 --> 00:15:39,360
we are all constantly trying to prove

439
00:15:39,360 --> 00:15:42,779
negative if our detections don't fire it

440
00:15:42,779 --> 00:15:45,300
means there was no attack or was there

441
00:15:45,300 --> 00:15:48,420
we're sort of always waiting to justify

442
00:15:48,420 --> 00:15:50,399
our existence by saying hey look what we

443
00:15:50,399 --> 00:15:53,160
probably most likely stopped here's the

444
00:15:53,160 --> 00:15:54,959
proof that this thing happened out in

445
00:15:54,959 --> 00:15:56,699
the wild and we have defense there but

446
00:15:56,699 --> 00:15:58,680
if we don't get that sort of signal then

447
00:15:58,680 --> 00:16:00,660
we don't really know if things are

448
00:16:00,660 --> 00:16:02,040
working if we're actually building the

449
00:16:02,040 --> 00:16:04,680
moat that we assume that we are and so

450
00:16:04,680 --> 00:16:06,000
you know these are all the challenges

451
00:16:06,000 --> 00:16:07,260
that we are really hoping to address

452
00:16:07,260 --> 00:16:08,760
with the system that we're working on

453
00:16:08,760 --> 00:16:10,500
I'm going to hand it back over to Sam to

454
00:16:10,500 --> 00:16:12,980
discuss that

455
00:16:13,620 --> 00:16:16,440
thanks Mike so yeah let's talk about

456
00:16:16,440 --> 00:16:18,839
testing detections um and so before I

457
00:16:18,839 --> 00:16:20,639
was uh getting into security again to

458
00:16:20,639 --> 00:16:22,380
have all this fun hacking things uh I

459
00:16:22,380 --> 00:16:23,880
put in a lot of years just as a straight

460
00:16:23,880 --> 00:16:27,600
up software developer uh and um as the

461
00:16:27,600 --> 00:16:28,740
devs in the audience are all too

462
00:16:28,740 --> 00:16:29,880
familiar with

463
00:16:29,880 --> 00:16:31,260
um testing

464
00:16:31,260 --> 00:16:35,220
whether it's unit end to end manual QA

465
00:16:35,220 --> 00:16:38,339
in many cases is a very well

466
00:16:38,339 --> 00:16:40,980
standardized part of the life cycle of

467
00:16:40,980 --> 00:16:42,420
software to have

468
00:16:42,420 --> 00:16:43,680
um we want to bring that same level of

469
00:16:43,680 --> 00:16:47,699
rigor to testing detections we want to

470
00:16:47,699 --> 00:16:49,620
know that those detections are actually

471
00:16:49,620 --> 00:16:51,600
going to perform when we need them to

472
00:16:51,600 --> 00:16:53,940
and that at any given time we always

473
00:16:53,940 --> 00:16:55,860
have that level of protection that they

474
00:16:55,860 --> 00:16:57,779
should be providing and the way that we

475
00:16:57,779 --> 00:17:00,959
want to do that the highest Fidelity way

476
00:17:00,959 --> 00:17:02,459
that can really give us that confidence

477
00:17:02,459 --> 00:17:04,619
is to simulate real attacker activity

478
00:17:04,619 --> 00:17:08,819
and see how the detections do

479
00:17:08,819 --> 00:17:11,520
okay so the real issue and why this is

480
00:17:11,520 --> 00:17:12,780
so important to do is because the

481
00:17:12,780 --> 00:17:15,179
detections are at scale are themselves

482
00:17:15,179 --> 00:17:17,520
these very large software products and

483
00:17:17,520 --> 00:17:20,099
data pipelines with a whole bunch of

484
00:17:20,099 --> 00:17:21,959
infrastructure dependencies and a whole

485
00:17:21,959 --> 00:17:24,119
bunch of things that can go wrong and so

486
00:17:24,119 --> 00:17:25,380
when you try Landing really complex

487
00:17:25,380 --> 00:17:26,640
detections depending on complex

488
00:17:26,640 --> 00:17:29,040
infrastructure there are so many

489
00:17:29,040 --> 00:17:31,020
different mistakes that can be made and

490
00:17:31,020 --> 00:17:34,380
the pro thing that makes it uniquely

491
00:17:34,380 --> 00:17:36,780
challenging is that unlike when you make

492
00:17:36,780 --> 00:17:39,299
a mistake writing some endpoint as a web

493
00:17:39,299 --> 00:17:40,799
dev

494
00:17:40,799 --> 00:17:42,360
almost always the failures are just

495
00:17:42,360 --> 00:17:43,740
going to be silent and you might not

496
00:17:43,740 --> 00:17:45,720
know anything is wrong there's not going

497
00:17:45,720 --> 00:17:47,340
to be something throwing 500 errors out

498
00:17:47,340 --> 00:17:48,780
there to the world that is going to make

499
00:17:48,780 --> 00:17:50,220
some user angry and somebody's going to

500
00:17:50,220 --> 00:17:52,440
tell you so

501
00:17:52,440 --> 00:17:54,780
we really have to take an extra degree

502
00:17:54,780 --> 00:17:57,780
of care to make sure that all this stuff

503
00:17:57,780 --> 00:18:00,780
is always working well

504
00:18:00,780 --> 00:18:02,700
so let's talk a little a little bit

505
00:18:02,700 --> 00:18:04,440
about how we do that purple teaming type

506
00:18:04,440 --> 00:18:07,799
exercise for C2 detections so the

507
00:18:07,799 --> 00:18:10,080
easiest way is just throw up the real C2

508
00:18:10,080 --> 00:18:13,080
server of some kind and generate an

509
00:18:13,080 --> 00:18:15,000
implant the way that into hacker would

510
00:18:15,000 --> 00:18:17,340
pull that implant down and detonate it

511
00:18:17,340 --> 00:18:19,559
on some device within your corporate

512
00:18:19,559 --> 00:18:21,419
perimeter such that that traffic will

513
00:18:21,419 --> 00:18:23,820
Traverse the sensors that a real

514
00:18:23,820 --> 00:18:25,980
attacker's traffic would Traverse

515
00:18:25,980 --> 00:18:28,740
and then generates a more signal Drive

516
00:18:28,740 --> 00:18:31,919
some post-exploitation ttps through that

517
00:18:31,919 --> 00:18:34,140
C2 channel the way that an attacker

518
00:18:34,140 --> 00:18:35,160
would

519
00:18:35,160 --> 00:18:37,140
and see what comes up see what logs you

520
00:18:37,140 --> 00:18:39,000
get see what detections fire or don't

521
00:18:39,000 --> 00:18:41,400
fire and then act on that basis to

522
00:18:41,400 --> 00:18:43,320
continue to refine the model

523
00:18:43,320 --> 00:18:45,900
and Harden those detections

524
00:18:45,900 --> 00:18:48,380
so

525
00:18:48,960 --> 00:18:51,120
I want to shout out the good Folks at

526
00:18:51,120 --> 00:18:53,280
Bishop Fox for making sliver we're also

527
00:18:53,280 --> 00:18:54,240
sponsoring this conference I believe

528
00:18:54,240 --> 00:18:56,580
shout out to them uh we love sliver uh

529
00:18:56,580 --> 00:18:58,020
it's really good for this type of use

530
00:18:58,020 --> 00:19:00,720
case because uh it's golang it can

531
00:19:00,720 --> 00:19:02,760
compile implants very easily to any

532
00:19:02,760 --> 00:19:04,980
platform so we can drop them all

533
00:19:04,980 --> 00:19:06,720
different places within our environment

534
00:19:06,720 --> 00:19:08,520
test the sensors within all those

535
00:19:08,520 --> 00:19:12,299
different paths and it just has a nice

536
00:19:12,299 --> 00:19:15,000
API with golang client that you one can

537
00:19:15,000 --> 00:19:17,039
just use so you can just write go in

538
00:19:17,039 --> 00:19:19,919
order to automate very complex attack

539
00:19:19,919 --> 00:19:22,559
scenarios so we're big fans of that

540
00:19:22,559 --> 00:19:24,960
fully open source so you can spin up as

541
00:19:24,960 --> 00:19:26,640
many of these as you want no licensing

542
00:19:26,640 --> 00:19:28,200
headaches and it's just real smooth to

543
00:19:28,200 --> 00:19:30,179
get set up and use so shout out to them

544
00:19:30,179 --> 00:19:32,520
we really like this and um yeah we use

545
00:19:32,520 --> 00:19:35,700
this for a whole bunch of stuff

546
00:19:35,700 --> 00:19:37,020
so

547
00:19:37,020 --> 00:19:40,140
what this looks like in practice usually

548
00:19:40,140 --> 00:19:42,240
is just a couple of cloud resources

549
00:19:42,240 --> 00:19:44,940
basically you're spinning up whatever

550
00:19:44,940 --> 00:19:46,860
you need to do that particular type of

551
00:19:46,860 --> 00:19:48,720
C2 transport so maybe I just need some

552
00:19:48,720 --> 00:19:51,480
domain some TLS certs

553
00:19:51,480 --> 00:19:53,340
um and then the C2 itself and all of

554
00:19:53,340 --> 00:19:54,780
this stuff can be automated really

555
00:19:54,780 --> 00:19:56,580
efficiently so you can use all the cloud

556
00:19:56,580 --> 00:19:58,679
native infrastructure as code automation

557
00:19:58,679 --> 00:20:00,780
terraform we like Tara grunt which is a

558
00:20:00,780 --> 00:20:01,919
little bit extra on top of terraform

559
00:20:01,919 --> 00:20:03,179
it's really cool you all should check it

560
00:20:03,179 --> 00:20:05,760
out and then we've been

561
00:20:05,760 --> 00:20:07,620
building up a whole bunch of code around

562
00:20:07,620 --> 00:20:11,940
this to basically turn this into uh

563
00:20:11,940 --> 00:20:13,740
like a command you just run one command

564
00:20:13,740 --> 00:20:15,059
and all this stuff comes up and you do

565
00:20:15,059 --> 00:20:16,080
the test

566
00:20:16,080 --> 00:20:17,940
so I want to call out specifically why

567
00:20:17,940 --> 00:20:19,679
we're using the world uh the word

568
00:20:19,679 --> 00:20:22,200
ephemeral here so the nice thing about

569
00:20:22,200 --> 00:20:23,400
using this type of cloud native

570
00:20:23,400 --> 00:20:25,440
automation to drive the test for these

571
00:20:25,440 --> 00:20:28,200
detections is that you can spin up a

572
00:20:28,200 --> 00:20:30,720
machine that machine comes up from an uh

573
00:20:30,720 --> 00:20:33,720
comes from a Ami if you will a virtual

574
00:20:33,720 --> 00:20:36,000
machine image in the cloud that is

575
00:20:36,000 --> 00:20:38,160
always constantly rebuilt and fully

576
00:20:38,160 --> 00:20:39,120
patched

577
00:20:39,120 --> 00:20:41,160
does what it's supposed to do gets spun

578
00:20:41,160 --> 00:20:43,740
down there's no footprint out there of a

579
00:20:43,740 --> 00:20:45,419
C2 server that's connected somehow to

580
00:20:45,419 --> 00:20:48,240
your internal Network that then you know

581
00:20:48,240 --> 00:20:50,220
one has certain

582
00:20:50,220 --> 00:20:51,120
um

583
00:20:51,120 --> 00:20:52,919
sometimes strenuous responsibilities to

584
00:20:52,919 --> 00:20:54,120
keep that thing patched make sure

585
00:20:54,120 --> 00:20:56,580
everything is legit there it's

586
00:20:56,580 --> 00:20:59,039
comes up does what it's supposed to do

587
00:20:59,039 --> 00:21:01,020
comes down low operational overhead for

588
00:21:01,020 --> 00:21:02,880
the team so you can focus on the goal of

589
00:21:02,880 --> 00:21:04,980
securing the company

590
00:21:04,980 --> 00:21:07,520
so

591
00:21:07,860 --> 00:21:09,480
we've been building this out for quite

592
00:21:09,480 --> 00:21:13,260
some time and the vision here is really

593
00:21:13,260 --> 00:21:15,900
to get everything automated end to end

594
00:21:15,900 --> 00:21:17,880
so you do these C2 tests that get spun

595
00:21:17,880 --> 00:21:19,919
up in the cloud

596
00:21:19,919 --> 00:21:22,740
you drive the ttps as the attacker would

597
00:21:22,740 --> 00:21:25,200
you get that signal and then you check

598
00:21:25,200 --> 00:21:27,240
that that alert actually came up

599
00:21:27,240 --> 00:21:29,039
that's what gives you the confidence

600
00:21:29,039 --> 00:21:30,900
that

601
00:21:30,900 --> 00:21:34,380
my detections are reliable nobody broke

602
00:21:34,380 --> 00:21:36,179
them by pushing some bad code that just

603
00:21:36,179 --> 00:21:38,280
dropped some field and destroyed the

604
00:21:38,280 --> 00:21:39,780
whole pipeline

605
00:21:39,780 --> 00:21:42,179
there we are consistently protected from

606
00:21:42,179 --> 00:21:43,980
a wide variety of threats and we can

607
00:21:43,980 --> 00:21:45,419
speak to how that was rigorously

608
00:21:45,419 --> 00:21:46,740
validated

609
00:21:46,740 --> 00:21:49,620
so we're basically involved in building

610
00:21:49,620 --> 00:21:51,120
out all these different arrows right now

611
00:21:51,120 --> 00:21:53,700
and this is

612
00:21:53,700 --> 00:21:55,140
um going to give us

613
00:21:55,140 --> 00:21:59,100
give us that confidence so

614
00:21:59,100 --> 00:22:03,179
we are in the process of

615
00:22:03,179 --> 00:22:06,000
getting uh this stuff open sourced

616
00:22:06,000 --> 00:22:07,620
hopefully

617
00:22:07,620 --> 00:22:10,080
um and so uh please stay tuned uh we we

618
00:22:10,080 --> 00:22:11,640
do we do want to talk more about this in

619
00:22:11,640 --> 00:22:14,059
the near future

620
00:22:14,700 --> 00:22:16,080
so I'm gonna hand this back over to Mike

621
00:22:16,080 --> 00:22:18,059
Mike's going to tell you about on the

622
00:22:18,059 --> 00:22:20,039
detection side all the cool things we've

623
00:22:20,039 --> 00:22:21,840
learned by repeatedly going through this

624
00:22:21,840 --> 00:22:25,100
process of rigorous testing

625
00:22:27,360 --> 00:22:29,880
cool yeah let's look at some data see

626
00:22:29,880 --> 00:22:31,500
what this actually looks like

627
00:22:31,500 --> 00:22:34,140
uh so I want to remind you of what our

628
00:22:34,140 --> 00:22:36,720
very obfuscated and not real query looks

629
00:22:36,720 --> 00:22:39,120
like but the idea is that uh when we're

630
00:22:39,120 --> 00:22:40,740
targeting this SSL beaconing this is

631
00:22:40,740 --> 00:22:43,140
probably a somewhere between 100 to 200

632
00:22:43,140 --> 00:22:45,059
lines SQL query to get all the numbers

633
00:22:45,059 --> 00:22:47,820
right where we need them and I want to

634
00:22:47,820 --> 00:22:49,140
show you the first bug that we

635
00:22:49,140 --> 00:22:50,580
encountered when we were running the

636
00:22:50,580 --> 00:22:53,760
system so keep this in the front of your

637
00:22:53,760 --> 00:22:54,600
mind

638
00:22:54,600 --> 00:22:56,640
and then let me show you the block of

639
00:22:56,640 --> 00:22:59,880
code that was broken and so these four

640
00:22:59,880 --> 00:23:02,580
lines which are just specifying which

641
00:23:02,580 --> 00:23:04,559
perimeter we're looking at and what the

642
00:23:04,559 --> 00:23:06,679
the host name is

643
00:23:06,679 --> 00:23:08,340
is

644
00:23:08,340 --> 00:23:11,100
what broke on our very first test I

645
00:23:11,100 --> 00:23:12,179
spent about an hour digging through the

646
00:23:12,179 --> 00:23:13,260
logs trying to figure out why the hell

647
00:23:13,260 --> 00:23:15,299
didn't this thing fire it turns out that

648
00:23:15,299 --> 00:23:16,919
turns out that our attribution pipeline

649
00:23:16,919 --> 00:23:18,960
which Maps our IP addresses to host

650
00:23:18,960 --> 00:23:20,520
names failed in this very specific

651
00:23:20,520 --> 00:23:22,380
instance for whatever reason very

652
00:23:22,380 --> 00:23:25,140
silently as Sam said it would and so in

653
00:23:25,140 --> 00:23:27,059
this case I completely missed the

654
00:23:27,059 --> 00:23:28,679
traffic and all I needed to do was

655
00:23:28,679 --> 00:23:31,020
remove this hostname is not an alt line

656
00:23:31,020 --> 00:23:33,000
to see that traffic so this is an

657
00:23:33,000 --> 00:23:34,919
example of an extremely small thing that

658
00:23:34,919 --> 00:23:37,320
you might not ever think to test and yet

659
00:23:37,320 --> 00:23:38,760
can have a massive impact on your

660
00:23:38,760 --> 00:23:41,940
ability to detect these sorts of things

661
00:23:41,940 --> 00:23:44,460
uh the second one going back to the loud

662
00:23:44,460 --> 00:23:46,559
corporate networks lots of noise for

663
00:23:46,559 --> 00:23:49,020
every detector so once I did remove that

664
00:23:49,020 --> 00:23:52,140
parameter we saw 68 results and it was

665
00:23:52,140 --> 00:23:54,720
cool to see Sam manzer's laptop on there

666
00:23:54,720 --> 00:23:56,460
proof that the logic itself actually

667
00:23:56,460 --> 00:23:58,799
works but in addition to writing the

668
00:23:58,799 --> 00:24:01,380
detections I also hand alerts off to the

669
00:24:01,380 --> 00:24:03,240
on-call on my team before we escalate it

670
00:24:03,240 --> 00:24:06,179
out further and if I hand that person 68

671
00:24:06,179 --> 00:24:08,159
alerts every day he's gonna think I'm a

672
00:24:08,159 --> 00:24:09,480
huge pain in the ass and it's not going

673
00:24:09,480 --> 00:24:11,700
to be a good time for us so it's really

674
00:24:11,700 --> 00:24:13,740
our goal to wean this number down as

675
00:24:13,740 --> 00:24:16,200
small as we possibly can and to do that

676
00:24:16,200 --> 00:24:17,700
we need to come up with sort of clever

677
00:24:17,700 --> 00:24:19,320
patterns to look for to rule out the

678
00:24:19,320 --> 00:24:20,280
obvious

679
00:24:20,280 --> 00:24:22,080
and so the first one of those that I

680
00:24:22,080 --> 00:24:23,340
identified after digging through this

681
00:24:23,340 --> 00:24:26,159
data was holy cow this is how many

682
00:24:26,159 --> 00:24:28,380
events that we saw coming going to work

683
00:24:28,380 --> 00:24:30,659
with increased intensity.com from Sam's

684
00:24:30,659 --> 00:24:33,360
laptop over that week zero zero zero all

685
00:24:33,360 --> 00:24:34,980
of a sudden a lot and then zero again

686
00:24:34,980 --> 00:24:37,380
and so I'm thinking okay that's probably

687
00:24:37,380 --> 00:24:39,900
a reproducible pattern if somebody's

688
00:24:39,900 --> 00:24:41,340
laptop gets popped inside of our

689
00:24:41,340 --> 00:24:43,260
corporate environment it will quite

690
00:24:43,260 --> 00:24:45,240
suddenly begin making relatively High

691
00:24:45,240 --> 00:24:47,700
volumes of queries to some domain that

692
00:24:47,700 --> 00:24:49,500
we are unfamiliar with so we can

693
00:24:49,500 --> 00:24:51,179
probably incorporate that logic and

694
00:24:51,179 --> 00:24:52,679
combine it with the beginning logic to

695
00:24:52,679 --> 00:24:54,960
see if it gets us anywhere

696
00:24:54,960 --> 00:24:58,080
um looking at the spikes alone just the

697
00:24:58,080 --> 00:25:00,780
number of events going out to SSL

698
00:25:00,780 --> 00:25:03,000
domains was also quite loud just want to

699
00:25:03,000 --> 00:25:04,620
give you a little example this list gets

700
00:25:04,620 --> 00:25:06,780
much longer but as you can see work with

701
00:25:06,780 --> 00:25:08,640
increased intensity was near the top

702
00:25:08,640 --> 00:25:12,600
quad not quite at the top but still

703
00:25:12,600 --> 00:25:14,700
we're thinking that combining this with

704
00:25:14,700 --> 00:25:16,620
the beaconing logic itself should be

705
00:25:16,620 --> 00:25:17,600
able to

706
00:25:17,600 --> 00:25:19,980
whittle down as few Whittle down our

707
00:25:19,980 --> 00:25:23,039
results to as few as possible you know

708
00:25:23,039 --> 00:25:24,559
it's very unlikely that

709
00:25:24,559 --> 00:25:26,820
drivesafemadison.com while it was very

710
00:25:26,820 --> 00:25:28,620
new and random and that day is also

711
00:25:28,620 --> 00:25:30,539
exhibiting the repetitive periodic

712
00:25:30,539 --> 00:25:33,179
beginning traffic that we're looking for

713
00:25:33,179 --> 00:25:35,640
so that's exactly what I did I took that

714
00:25:35,640 --> 00:25:37,880
big long query and I added this little

715
00:25:37,880 --> 00:25:40,740
clause in there to say okay we want

716
00:25:40,740 --> 00:25:42,539
everything that's actually beaconing out

717
00:25:42,539 --> 00:25:44,580
and we want things that are not high

718
00:25:44,580 --> 00:25:46,380
prevalence essentially

719
00:25:46,380 --> 00:25:47,460
um

720
00:25:47,460 --> 00:25:49,980
things things that no more than I think

721
00:25:49,980 --> 00:25:51,600
in this case yeah 10 clients we're

722
00:25:51,600 --> 00:25:53,039
connecting to it's likely going to be

723
00:25:53,039 --> 00:25:54,840
much less but just to give us some

724
00:25:54,840 --> 00:25:57,240
breathing room so this is actually a

725
00:25:57,240 --> 00:25:58,919
third parameter that we can add into

726
00:25:58,919 --> 00:26:01,080
this so now we have the beaconing logic

727
00:26:01,080 --> 00:26:03,480
itself the sudden spike in traffic

728
00:26:03,480 --> 00:26:06,000
outgoing to this external endpoint and

729
00:26:06,000 --> 00:26:07,980
low prevalence so very few people

730
00:26:07,980 --> 00:26:09,539
connecting to it

731
00:26:09,539 --> 00:26:10,260
um

732
00:26:10,260 --> 00:26:12,240
putting together all three of those

733
00:26:12,240 --> 00:26:14,820
pieces into the same query

734
00:26:14,820 --> 00:26:17,520
got us down to eight results which is

735
00:26:17,520 --> 00:26:19,320
awesome all of a sudden we you know

736
00:26:19,320 --> 00:26:22,080
dropped from 68 I think or 67 uh to

737
00:26:22,080 --> 00:26:24,240
eight which is still not quite perfect

738
00:26:24,240 --> 00:26:27,419
ideally I only want samanzer's result to

739
00:26:27,419 --> 00:26:29,220
be in this and so I can hand off a

740
00:26:29,220 --> 00:26:31,620
single true positive but that's not the

741
00:26:31,620 --> 00:26:33,240
ideal world we live in but we continue

742
00:26:33,240 --> 00:26:35,760
to iterate on the point that I really

743
00:26:35,760 --> 00:26:38,039
want to get across here is that the more

744
00:26:38,039 --> 00:26:39,840
effort we put into this sort of repeat

745
00:26:39,840 --> 00:26:42,419
repetitive tuning and validation process

746
00:26:42,419 --> 00:26:46,860
using live uh emulated attacker data the

747
00:26:46,860 --> 00:26:48,480
closer and closer we can get to these

748
00:26:48,480 --> 00:26:50,400
super high fidelity detectors relying

749
00:26:50,400 --> 00:26:53,220
only on the network data something

750
00:26:53,220 --> 00:26:55,620
that's particularly cool about using

751
00:26:55,620 --> 00:26:58,020
this approach to catch attacker behavior

752
00:26:58,020 --> 00:26:59,880
is that it is completely generalizable

753
00:26:59,880 --> 00:27:02,940
and what I mean by that is periodic

754
00:27:02,940 --> 00:27:04,860
beaconing looks the same whether it's

755
00:27:04,860 --> 00:27:08,340
sliver or Mythic or I don't know say I'm

756
00:27:08,340 --> 00:27:09,539
gonna have to give me the long list of

757
00:27:09,539 --> 00:27:11,100
commodity malware's they have at their

758
00:27:11,100 --> 00:27:14,220
disposal but uh it all looks the same to

759
00:27:14,220 --> 00:27:16,500
me it's just periodic beginning over the

760
00:27:16,500 --> 00:27:18,900
same protocol analyzer to the same

761
00:27:18,900 --> 00:27:21,419
random and new endpoints and so by

762
00:27:21,419 --> 00:27:23,279
putting all of this logic together we

763
00:27:23,279 --> 00:27:24,720
can end up with these High Fidelity

764
00:27:24,720 --> 00:27:26,460
detectors that work across the whole

765
00:27:26,460 --> 00:27:29,039
Fleet independent of the device that is

766
00:27:29,039 --> 00:27:30,659
popped and independent of the malware

767
00:27:30,659 --> 00:27:33,380
that's being used

768
00:27:33,840 --> 00:27:36,360
and so this is what really excites me

769
00:27:36,360 --> 00:27:37,799
about this system and it's sort of what

770
00:27:37,799 --> 00:27:39,840
I just explained but uh you know as we

771
00:27:39,840 --> 00:27:41,159
were working through this process and

772
00:27:41,159 --> 00:27:42,059
iterating through the detection

773
00:27:42,059 --> 00:27:44,400
development uh I essentially had a big

774
00:27:44,400 --> 00:27:46,380
table with all of these parameters that

775
00:27:46,380 --> 00:27:48,480
we're using to tune the detector and a

776
00:27:48,480 --> 00:27:50,580
list of Trials one two three four five

777
00:27:50,580 --> 00:27:52,740
so on and these are the parameter values

778
00:27:52,740 --> 00:27:54,299
we're using and I can you can actually

779
00:27:54,299 --> 00:27:56,400
calculate okay given these parameters

780
00:27:56,400 --> 00:27:58,260
how many true positives were generated

781
00:27:58,260 --> 00:28:00,900
AKA did we catch Sam's traffic how many

782
00:28:00,900 --> 00:28:02,159
false positives were generated what's

783
00:28:02,159 --> 00:28:04,440
all the rest of it all the noise and

784
00:28:04,440 --> 00:28:06,360
what you're left with there is a fairly

785
00:28:06,360 --> 00:28:08,460
simple optimization problem how can we

786
00:28:08,460 --> 00:28:11,900
minimize the number of output results

787
00:28:11,900 --> 00:28:14,159
given the parameters that we have here

788
00:28:14,159 --> 00:28:17,159
and so with this fully automated system

789
00:28:17,159 --> 00:28:19,380
this end-to-end emulated attacker

790
00:28:19,380 --> 00:28:21,840
traffic into my defensive detections

791
00:28:21,840 --> 00:28:24,240
framework we can

792
00:28:24,240 --> 00:28:26,360
essentially have our detectors become

793
00:28:26,360 --> 00:28:30,779
self-tuning in a way with base logic and

794
00:28:30,779 --> 00:28:33,380
a well-defined set of tunable parameters

795
00:28:33,380 --> 00:28:36,720
the entire process you know can fade

796
00:28:36,720 --> 00:28:38,640
into the background letting us detection

797
00:28:38,640 --> 00:28:40,220
Engineers focus on the cool stuff

798
00:28:40,220 --> 00:28:42,360
developing new detection ideas and

799
00:28:42,360 --> 00:28:43,740
working on new queries and adding them

800
00:28:43,740 --> 00:28:45,840
to this test queue and so we're really

801
00:28:45,840 --> 00:28:47,220
excited to continue iterating on this

802
00:28:47,220 --> 00:28:49,620
and getting there

803
00:28:49,620 --> 00:28:51,480
um that's most of the meat of the talk I

804
00:28:51,480 --> 00:28:52,440
just want to leave you guys with a

805
00:28:52,440 --> 00:28:55,799
couple of uh bits of food for thought uh

806
00:28:55,799 --> 00:28:56,820
the first one that I really want to

807
00:28:56,820 --> 00:28:58,380
drive home is as the network threat

808
00:28:58,380 --> 00:29:00,240
detection guy Network Telemetry is

809
00:29:00,240 --> 00:29:01,980
awesome it adds a lot of value to

810
00:29:01,980 --> 00:29:03,900
proactive detections and don't write it

811
00:29:03,900 --> 00:29:06,000
off just because things are encrypted or

812
00:29:06,000 --> 00:29:07,260
it's a little hard to get the passive

813
00:29:07,260 --> 00:29:09,720
tap set up we really have seen a lot of

814
00:29:09,720 --> 00:29:11,880
success and oftentimes beat the

815
00:29:11,880 --> 00:29:13,620
application and host level logging guys

816
00:29:13,620 --> 00:29:14,940
to the punch

817
00:29:14,940 --> 00:29:18,120
uh second one and I think this is fairly

818
00:29:18,120 --> 00:29:19,559
obvious at this point but these

819
00:29:19,559 --> 00:29:21,840
detectors must be continuously valid

820
00:29:21,840 --> 00:29:24,059
validated over and over again you know

821
00:29:24,059 --> 00:29:25,919
Network behaviors shift the entire

822
00:29:25,919 --> 00:29:28,320
environment is incredibly Dynamic so

823
00:29:28,320 --> 00:29:30,380
continuously detecting these uh continue

824
00:29:30,380 --> 00:29:33,600
continuously testing these detectors is

825
00:29:33,600 --> 00:29:35,100
absolutely essential so you can continue

826
00:29:35,100 --> 00:29:38,580
to tune parameters and have the tightest

827
00:29:38,580 --> 00:29:39,899
possible detection

828
00:29:39,899 --> 00:29:43,080
uh third one is because all of this can

829
00:29:43,080 --> 00:29:45,659
be automated it should again to allow

830
00:29:45,659 --> 00:29:47,340
all of us security Engineers to do the

831
00:29:47,340 --> 00:29:49,500
cool and exciting and important work of

832
00:29:49,500 --> 00:29:51,299
advancing the state of what we can

833
00:29:51,299 --> 00:29:52,860
actually detect working on new query

834
00:29:52,860 --> 00:29:55,440
logic working on new pipeline systems so

835
00:29:55,440 --> 00:29:57,240
on and so forth

836
00:29:57,240 --> 00:29:59,820
that's about it for our talk I really

837
00:29:59,820 --> 00:30:01,440
appreciate you guys all coming out and I

838
00:30:01,440 --> 00:30:02,399
guess we can open up the room for

839
00:30:02,399 --> 00:30:04,580
questions

840
00:30:13,740 --> 00:30:15,659
So when you say you should be automated

841
00:30:15,659 --> 00:30:17,760
so it's not required there's some kind

842
00:30:17,760 --> 00:30:20,419
of machine learning approach to

843
00:30:20,419 --> 00:30:22,520
figuring how the parameters should be

844
00:30:22,520 --> 00:30:26,640
the constantly changing parameters

845
00:30:26,640 --> 00:30:28,980
yeah I think uh what I realized going

846
00:30:28,980 --> 00:30:30,600
through this process that last slide

847
00:30:30,600 --> 00:30:31,620
that I was talking about where I was

848
00:30:31,620 --> 00:30:33,120
defining the table and working through

849
00:30:33,120 --> 00:30:34,740
the optimization problem I had this

850
00:30:34,740 --> 00:30:36,059
moment of like I think I'm kind of just

851
00:30:36,059 --> 00:30:37,620
doing machine learning by hand right now

852
00:30:37,620 --> 00:30:40,559
I think the the word itself gets a lot

853
00:30:40,559 --> 00:30:42,720
of you know hype to introduce AI into

854
00:30:42,720 --> 00:30:44,580
these systems but it really is just

855
00:30:44,580 --> 00:30:46,559
statistical minimization and

856
00:30:46,559 --> 00:30:49,200
optimization problems uh so yes when

857
00:30:49,200 --> 00:30:51,240
this thing is fully automated we could

858
00:30:51,240 --> 00:30:53,580
probably call it to some degree machine

859
00:30:53,580 --> 00:30:55,320
learning but it really is just sort of

860
00:30:55,320 --> 00:30:57,360
solving that same minimize the number of

861
00:30:57,360 --> 00:30:58,919
alerts given the parameters that we're

862
00:30:58,919 --> 00:31:01,340
providing

863
00:31:11,399 --> 00:31:13,980
did you uh I did not I inherited the

864
00:31:13,980 --> 00:31:15,840
stuff the tech stack that we have but

865
00:31:15,840 --> 00:31:19,100
we'll check that out sounds interesting

866
00:31:23,100 --> 00:31:24,899
wanted to shout out one thing real quick

867
00:31:24,899 --> 00:31:26,580
before we hit the next questions

868
00:31:26,580 --> 00:31:28,200
um you know we emphasize automation here

869
00:31:28,200 --> 00:31:29,700
a lot there's all kinds of cool stuff

870
00:31:29,700 --> 00:31:32,399
that one can do with that and uh love to

871
00:31:32,399 --> 00:31:33,659
talk about that with anybody who's

872
00:31:33,659 --> 00:31:35,039
interested

873
00:31:35,039 --> 00:31:36,960
um but I did want to add one thing which

874
00:31:36,960 --> 00:31:39,840
is uh if you um if y'all don't have a

875
00:31:39,840 --> 00:31:40,919
lot of folks in your org who selling

876
00:31:40,919 --> 00:31:42,720
terraform or do these other things

877
00:31:42,720 --> 00:31:43,320
um

878
00:31:43,320 --> 00:31:44,520
it's been up a cloud instance and give

879
00:31:44,520 --> 00:31:46,919
this a try manually you get like a lot

880
00:31:46,919 --> 00:31:50,760
of value and um it's you know that first

881
00:31:50,760 --> 00:31:54,020
test will tell you a lot

882
00:32:00,480 --> 00:32:01,980
yeah so we have

883
00:32:01,980 --> 00:32:04,799
um I don't know the exact number but uh

884
00:32:04,799 --> 00:32:08,220
a few quite a few dozen uh bare metal

885
00:32:08,220 --> 00:32:10,620
hosts that run both Zeke and cerakata

886
00:32:10,620 --> 00:32:12,480
the proactive detections that I'm

887
00:32:12,480 --> 00:32:14,880
talking about exclusively query the Zeke

888
00:32:14,880 --> 00:32:17,100
data but we also compile the cerakata

889
00:32:17,100 --> 00:32:18,720
data in for more kind of signature based

890
00:32:18,720 --> 00:32:21,120
stuff ideally you know we put all of the

891
00:32:21,120 --> 00:32:23,399
pieces of the puzzle together and query

892
00:32:23,399 --> 00:32:25,020
it all together but we've had pretty

893
00:32:25,020 --> 00:32:27,000
good success just ingesting the Zeke

894
00:32:27,000 --> 00:32:29,720
data alone

895
00:32:31,080 --> 00:32:33,480
being

896
00:32:33,480 --> 00:32:35,960
Mr

897
00:32:37,380 --> 00:32:39,679
uh

898
00:32:42,120 --> 00:32:45,120
it's actually just an optical tap so the

899
00:32:45,120 --> 00:32:46,980
light going through the the wire just

900
00:32:46,980 --> 00:32:49,440
gets split and we see everything as it

901
00:32:49,440 --> 00:32:50,700
should be

902
00:32:50,700 --> 00:32:53,120
yep

903
00:33:01,500 --> 00:33:04,200
uh we were hoping well everyone else was

904
00:33:04,200 --> 00:33:06,000
hoping only Sims were genuine I'm always

905
00:33:06,000 --> 00:33:07,320
hoping for a little bit more fun with

906
00:33:07,320 --> 00:33:09,179
all the queries in that specific case

907
00:33:09,179 --> 00:33:12,620
everything else seemed benign though

908
00:33:37,679 --> 00:33:39,659
uh yeah they they will if we have

909
00:33:39,659 --> 00:33:41,220
anything to say about it

910
00:33:41,220 --> 00:33:43,860
um so uh we uh I think you're absolutely

911
00:33:43,860 --> 00:33:44,880
right

912
00:33:44,880 --> 00:33:46,440
um a lot of the attack simulation stuff

913
00:33:46,440 --> 00:33:49,860
out there is very Windows endpoint

914
00:33:49,860 --> 00:33:51,059
focused

915
00:33:51,059 --> 00:33:52,679
um and is really good at that

916
00:33:52,679 --> 00:33:53,880
um and that's really great work that

917
00:33:53,880 --> 00:33:55,200
those folks have done

918
00:33:55,200 --> 00:33:57,720
um and I think uh it'll be neat in the

919
00:33:57,720 --> 00:33:58,980
future like right now it's kind of an

920
00:33:58,980 --> 00:34:00,960
exciting time for that um for this area

921
00:34:00,960 --> 00:34:02,340
because

922
00:34:02,340 --> 00:34:03,419
um with these purple team attack

923
00:34:03,419 --> 00:34:05,039
simulation efforts um that we're doing

924
00:34:05,039 --> 00:34:06,299
and a lot of good Folks at other

925
00:34:06,299 --> 00:34:07,559
companies are doing too

926
00:34:07,559 --> 00:34:09,659
um we're starting to push into these

927
00:34:09,659 --> 00:34:12,000
other Realms and network is definitely a

928
00:34:12,000 --> 00:34:13,199
big Focus for us that we want to

929
00:34:13,199 --> 00:34:15,319
continue

930
00:34:24,839 --> 00:34:26,399
cool all right that looks like all of

931
00:34:26,399 --> 00:34:29,239
them thank you folks

