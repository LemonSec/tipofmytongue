1
00:00:00,240 --> 00:00:03,959
hi everybody and welcome to how to CTF

2
00:00:03,959 --> 00:00:07,859
infra beyond the challenges and flags

3
00:00:07,859 --> 00:00:09,660
oh

4
00:00:09,660 --> 00:00:12,000
sorry I appreciate the feedback uh for a

5
00:00:12,000 --> 00:00:13,380
little bit of first time Jitters thank

6
00:00:13,380 --> 00:00:15,679
you friend

7
00:00:16,859 --> 00:00:20,359
learning things every day thank you

8
00:00:20,640 --> 00:00:23,580
so uh hi I'm Max my pronouns are they

9
00:00:23,580 --> 00:00:26,100
them and I've had the fortune of working

10
00:00:26,100 --> 00:00:27,720
with Cloud village and doing

11
00:00:27,720 --> 00:00:30,240
infrastructure work for them since 2020.

12
00:00:30,240 --> 00:00:32,520
a little bit about me I'm from New York

13
00:00:32,520 --> 00:00:34,380
I used to run a comic bookstore and

14
00:00:34,380 --> 00:00:37,620
whiskey fruit veggies love peace and

15
00:00:37,620 --> 00:00:41,120
coffee are a few of my favorite things

16
00:00:41,760 --> 00:00:44,879
so we're here mostly because we've been

17
00:00:44,879 --> 00:00:49,800
running ctfs for Defcon since 2019 and

18
00:00:49,800 --> 00:00:51,120
we wanted to share with the community

19
00:00:51,120 --> 00:00:53,219
we've learned a lot a lot about what we

20
00:00:53,219 --> 00:00:55,500
do that's successful and a lot of things

21
00:00:55,500 --> 00:00:57,120
to watch out for we want to share them

22
00:00:57,120 --> 00:00:59,399
and hopefully everybody else who wants

23
00:00:59,399 --> 00:01:01,320
to run a CTF can come in forewarned and

24
00:01:01,320 --> 00:01:02,640
forearmed

25
00:01:02,640 --> 00:01:03,420
um

26
00:01:03,420 --> 00:01:06,299
level setting what is a CTF

27
00:01:06,299 --> 00:01:08,760
you have a contest where a group of one

28
00:01:08,760 --> 00:01:10,860
or more people get together break some

29
00:01:10,860 --> 00:01:13,320
things solve some puzzles learn a little

30
00:01:13,320 --> 00:01:15,720
bit and grow as a security practitioner

31
00:01:15,720 --> 00:01:17,520
and if you're doing it right you get to

32
00:01:17,520 --> 00:01:19,439
grow as a human being as well

33
00:01:19,439 --> 00:01:21,119
and

34
00:01:21,119 --> 00:01:23,340
the more ctfs there are the better it is

35
00:01:23,340 --> 00:01:25,320
not just for your small group but for

36
00:01:25,320 --> 00:01:27,540
your community you get to share and

37
00:01:27,540 --> 00:01:29,580
build a little bit of empathy and keep

38
00:01:29,580 --> 00:01:31,500
working on removing that stereotype of

39
00:01:31,500 --> 00:01:33,299
security as the department of no you

40
00:01:33,299 --> 00:01:35,220
have an opportunity for education and

41
00:01:35,220 --> 00:01:37,619
endorsement and including more folks

42
00:01:37,619 --> 00:01:39,240
with a little more empathy to do what

43
00:01:39,240 --> 00:01:41,960
you do every day

44
00:01:42,180 --> 00:01:43,500
so

45
00:01:43,500 --> 00:01:44,820
when you're thinking about running a

46
00:01:44,820 --> 00:01:46,500
capture the flag contest you're

47
00:01:46,500 --> 00:01:48,960
interested in excuse me you're

48
00:01:48,960 --> 00:01:51,479
interested in a platform that allows

49
00:01:51,479 --> 00:01:55,200
users to register to submit Flags to

50
00:01:55,200 --> 00:01:57,180
actually see the challenges that you're

51
00:01:57,180 --> 00:01:59,759
presenting to them and a little bit of

52
00:01:59,759 --> 00:02:01,920
back end on your own make sure any

53
00:02:01,920 --> 00:02:04,079
errors are cleaned up any

54
00:02:04,079 --> 00:02:05,939
malicious users can be banned you need

55
00:02:05,939 --> 00:02:07,619
General administrative behind the scenes

56
00:02:07,619 --> 00:02:10,979
for admin work and so far the tool of

57
00:02:10,979 --> 00:02:14,340
the day is ctfd it is a really really

58
00:02:14,340 --> 00:02:16,560
easy tool to deploy the documentation is

59
00:02:16,560 --> 00:02:18,420
really solid the dependencies are really

60
00:02:18,420 --> 00:02:21,180
well mapped out and

61
00:02:21,180 --> 00:02:22,920
there was a competitor back in 2018

62
00:02:22,920 --> 00:02:26,700
called fb's fbctf but again I say back

63
00:02:26,700 --> 00:02:28,200
in 2018 because the project has since

64
00:02:28,200 --> 00:02:30,900
been archived ctfd is for now at least

65
00:02:30,900 --> 00:02:34,099
pretty much the only game in town

66
00:02:34,379 --> 00:02:38,340
so ctfd is this framework for providing

67
00:02:38,340 --> 00:02:41,160
you the capability to post a challenge

68
00:02:41,160 --> 00:02:43,680
to have users register to have flag

69
00:02:43,680 --> 00:02:46,739
submission and if we quote a little bit

70
00:02:46,739 --> 00:02:49,080
from GitHub a capture the flag framework

71
00:02:49,080 --> 00:02:50,940
focusing on ease of use and

72
00:02:50,940 --> 00:02:54,660
customizability it is open source ctfd

73
00:02:54,660 --> 00:02:57,360
ctfd on GitHub and it's created by Kevin

74
00:02:57,360 --> 00:03:01,260
Chung whose cold heat on GitHub if

75
00:03:01,260 --> 00:03:03,120
you're interested in running it on your

76
00:03:03,120 --> 00:03:05,519
own infrastructure similar to what we do

77
00:03:05,519 --> 00:03:07,800
that is absolutely a thing you can do if

78
00:03:07,800 --> 00:03:09,540
alternatively you're interested in

79
00:03:09,540 --> 00:03:11,519
running a CTF but maybe infrastructure

80
00:03:11,519 --> 00:03:13,920
engineering is not your passion or

81
00:03:13,920 --> 00:03:15,239
something you want to explore right now

82
00:03:15,239 --> 00:03:18,180
they have Commercial Services at ctfd.io

83
00:03:18,180 --> 00:03:22,159
if again if manages more your jam

84
00:03:22,319 --> 00:03:23,940
so the first time that we deployed

85
00:03:23,940 --> 00:03:25,680
excuse me the first time that I deployed

86
00:03:25,680 --> 00:03:27,599
this in 2020 here's a little bit about

87
00:03:27,599 --> 00:03:30,239
what it looks like we've got our elastic

88
00:03:30,239 --> 00:03:32,940
load balancer as our Network boundary

89
00:03:32,940 --> 00:03:35,879
everything else inside the VPC in AWS

90
00:03:35,879 --> 00:03:38,459
we've got virtual machines running ctfd

91
00:03:38,459 --> 00:03:41,280
we've got a remote email server remote

92
00:03:41,280 --> 00:03:43,980
asset storage and S3 remote mySQL

93
00:03:43,980 --> 00:03:45,480
database running an RDS and a remote

94
00:03:45,480 --> 00:03:48,060
session cache and so excuse me uh

95
00:03:48,060 --> 00:03:51,780
running redis and elasticash

96
00:03:51,780 --> 00:03:54,959
everything we do is run into our form

97
00:03:54,959 --> 00:03:57,659
one module per component it's our form

98
00:03:57,659 --> 00:03:59,760
particular infrastructure is called tool

99
00:03:59,760 --> 00:04:02,640
built by hashicor since this particular

100
00:04:02,640 --> 00:04:04,980
deployment use Virtual machines to host

101
00:04:04,980 --> 00:04:07,140
the application we also use another tool

102
00:04:07,140 --> 00:04:08,940
called Packer and that gave us the

103
00:04:08,940 --> 00:04:11,700
ability to Stamp Out repeatable known

104
00:04:11,700 --> 00:04:14,640
States from when we could then run an

105
00:04:14,640 --> 00:04:18,298
auto scaling group ctfd can vary for a

106
00:04:18,298 --> 00:04:20,279
very good reason attract a lot of

107
00:04:20,279 --> 00:04:21,720
traffic and you want to make sure that

108
00:04:21,720 --> 00:04:23,340
you have the capability to absorb that

109
00:04:23,340 --> 00:04:25,560
as you're going Auto scaling groups in

110
00:04:25,560 --> 00:04:27,300
particular CPUs driven ones which is

111
00:04:27,300 --> 00:04:28,979
what we've tuned this for give you the

112
00:04:28,979 --> 00:04:30,720
capability to have your Fleet

113
00:04:30,720 --> 00:04:33,139
dynamically scale out absorb the traffic

114
00:04:33,139 --> 00:04:36,900
and slowly slowly scale back in as your

115
00:04:36,900 --> 00:04:39,540
traffic spikes decrease that way you're

116
00:04:39,540 --> 00:04:41,040
not shooting machines in the head that

117
00:04:41,040 --> 00:04:42,600
are actively serving traffic and you're

118
00:04:42,600 --> 00:04:44,460
also not paying for machines that are

119
00:04:44,460 --> 00:04:45,720
hanging out now really doing a whole lot

120
00:04:45,720 --> 00:04:46,620
of work

121
00:04:46,620 --> 00:04:50,100
excuse me what not pictured on the

122
00:04:50,100 --> 00:04:52,020
architecture diagram one behind the

123
00:04:52,020 --> 00:04:53,160
scenes component that I do want to call

124
00:04:53,160 --> 00:04:55,740
out AWS Secrets manager kind of

125
00:04:55,740 --> 00:04:57,900
surprising nobody had story Secrets want

126
00:04:57,900 --> 00:04:59,520
to call it out because you need storage

127
00:04:59,520 --> 00:05:02,460
to provide database credentials you need

128
00:05:02,460 --> 00:05:05,100
store secret storage to provide your

129
00:05:05,100 --> 00:05:07,620
object storage access keys

130
00:05:07,620 --> 00:05:09,419
as a or at least as of when I put this

131
00:05:09,419 --> 00:05:10,860
together they didn't support using IAM

132
00:05:10,860 --> 00:05:12,020
roles

133
00:05:12,020 --> 00:05:13,580
feelings

134
00:05:13,580 --> 00:05:16,800
and also this one got me the first

135
00:05:16,800 --> 00:05:18,540
couple times I was deploying it

136
00:05:18,540 --> 00:05:21,180
you need a secret key that every single

137
00:05:21,180 --> 00:05:23,759
instance needs to share that way all the

138
00:05:23,759 --> 00:05:25,139
cookies are signed correctly and the

139
00:05:25,139 --> 00:05:26,280
sessions can be accurately and

140
00:05:26,280 --> 00:05:27,960
consistently retrieved from the cache

141
00:05:27,960 --> 00:05:30,360
otherwise things start getting weird and

142
00:05:30,360 --> 00:05:31,979
all your user requests will drop on the

143
00:05:31,979 --> 00:05:33,120
floor people have to start sessions

144
00:05:33,120 --> 00:05:35,660
again and again

145
00:05:36,479 --> 00:05:39,479
very very very brief aside about

146
00:05:39,479 --> 00:05:41,880
infrastructure as code I have feelings I

147
00:05:41,880 --> 00:05:43,880
will contain them as best I can

148
00:05:43,880 --> 00:05:45,780
infrastructures code gives you the

149
00:05:45,780 --> 00:05:48,419
capability to document

150
00:05:48,419 --> 00:05:51,060
and make it consistent and known how

151
00:05:51,060 --> 00:05:52,979
you're deploying your infrastructure you

152
00:05:52,979 --> 00:05:54,900
do it in code instead of words because

153
00:05:54,900 --> 00:05:57,000
it is generally the way that you talk to

154
00:05:57,000 --> 00:05:58,800
your infrastructure providers and

155
00:05:58,800 --> 00:06:01,380
because it's code you can read it you

156
00:06:01,380 --> 00:06:03,479
can share it you can have it code

157
00:06:03,479 --> 00:06:05,039
reviewed instead of just hoping somebody

158
00:06:05,039 --> 00:06:06,720
reads your bass script and mine is

159
00:06:06,720 --> 00:06:08,160
pretty janky so

160
00:06:08,160 --> 00:06:09,960
anything that makes it easier to read is

161
00:06:09,960 --> 00:06:13,199
always excuse me is always an asset and

162
00:06:13,199 --> 00:06:15,300
excuse me

163
00:06:15,300 --> 00:06:17,580
terraform in particular I enjoy because

164
00:06:17,580 --> 00:06:19,500
it is a declarative tool that means you

165
00:06:19,500 --> 00:06:21,120
tell terraform what you want to build

166
00:06:21,120 --> 00:06:23,940
not how to build it there are other

167
00:06:23,940 --> 00:06:25,440
tools that take the that take that

168
00:06:25,440 --> 00:06:28,680
approach but not so much my jam

169
00:06:28,680 --> 00:06:30,360
um something that I do want to call out

170
00:06:30,360 --> 00:06:32,460
about terraform in particular it has the

171
00:06:32,460 --> 00:06:34,259
capability to pre-validate some of the

172
00:06:34,259 --> 00:06:35,400
configuration changes that you're

173
00:06:35,400 --> 00:06:38,100
deploying really really really useful

174
00:06:38,100 --> 00:06:40,199
when you're in development and you want

175
00:06:40,199 --> 00:06:42,660
to test to see will AWS for example

176
00:06:42,660 --> 00:06:44,759
accept this configuration it is quick

177
00:06:44,759 --> 00:06:47,759
feedback and it is again a really really

178
00:06:47,759 --> 00:06:49,139
powerful capability that terraform

179
00:06:49,139 --> 00:06:51,960
provides you mostly why I use it as much

180
00:06:51,960 --> 00:06:53,819
as I do

181
00:06:53,819 --> 00:06:58,039
so the next year in 2021

182
00:06:58,440 --> 00:07:01,319
again we have architecture with a

183
00:07:01,319 --> 00:07:03,180
public-facing load balancer this time

184
00:07:03,180 --> 00:07:05,160
ctfd is running in a different service

185
00:07:05,160 --> 00:07:07,380
Alaska container service it's a managed

186
00:07:07,380 --> 00:07:10,560
container offering from AWS and remote

187
00:07:10,560 --> 00:07:13,259
email server remote asset storage and S3

188
00:07:13,259 --> 00:07:15,960
remote database in MySQL and remote

189
00:07:15,960 --> 00:07:19,440
cache in Alaska cache with redis

190
00:07:19,440 --> 00:07:20,759
and if you're wondering if that looks

191
00:07:20,759 --> 00:07:22,560
almost identical that's because it

192
00:07:22,560 --> 00:07:24,960
almost is the one component that we

193
00:07:24,960 --> 00:07:27,599
swapped out was virtual machines in the

194
00:07:27,599 --> 00:07:30,080
previous year for containers this year

195
00:07:30,080 --> 00:07:32,759
it was a big deal for me because I

196
00:07:32,759 --> 00:07:34,199
wanted to make a stronger move towards

197
00:07:34,199 --> 00:07:36,419
accountability if I provision VMS on the

198
00:07:36,419 --> 00:07:37,199
Fly

199
00:07:37,199 --> 00:07:39,720
I can SSH them and change them and then

200
00:07:39,720 --> 00:07:41,099
forget exactly what I did to solve a

201
00:07:41,099 --> 00:07:42,000
problem

202
00:07:42,000 --> 00:07:43,560
I've known that a lot and I'd like to do

203
00:07:43,560 --> 00:07:46,979
less of that using containers forces me

204
00:07:46,979 --> 00:07:48,300
or any other engineer that you're

205
00:07:48,300 --> 00:07:50,160
working with to encode all of their

206
00:07:50,160 --> 00:07:52,440
configuration changes in the repo that

207
00:07:52,440 --> 00:07:54,240
you're using and in order to deploy them

208
00:07:54,240 --> 00:07:56,099
it cannot be done by hand

209
00:07:56,099 --> 00:07:57,360
um let me say that differently you could

210
00:07:57,360 --> 00:07:59,160
but I would ask you now too

211
00:07:59,160 --> 00:08:01,680
um glycops is still real but this

212
00:08:01,680 --> 00:08:03,479
forcing function helps for better

213
00:08:03,479 --> 00:08:04,800
traceability and better knowledge

214
00:08:04,800 --> 00:08:06,660
sharing across your team

215
00:08:06,660 --> 00:08:08,639
excuse me

216
00:08:08,639 --> 00:08:11,880
um yeah again everything else is still

217
00:08:11,880 --> 00:08:13,560
stateless so that portion of the

218
00:08:13,560 --> 00:08:15,360
configuration doesn't change instead of

219
00:08:15,360 --> 00:08:17,099
using Auto scaling groups for virtual

220
00:08:17,099 --> 00:08:18,240
machines

221
00:08:18,240 --> 00:08:20,940
the Alaska container service has the

222
00:08:20,940 --> 00:08:22,740
same mechanics and has the same apis so

223
00:08:22,740 --> 00:08:24,840
we can reuse that logic in particular

224
00:08:24,840 --> 00:08:26,699
this time around I didn't want to write

225
00:08:26,699 --> 00:08:29,039
it all from scratch again so anybody

226
00:08:29,039 --> 00:08:30,599
doing infrastructure as code work can

227
00:08:30,599 --> 00:08:32,700
reach out to the terraform registry you

228
00:08:32,700 --> 00:08:35,219
have a library of currently existing

229
00:08:35,219 --> 00:08:37,080
modules and reusable knowledge so that

230
00:08:37,080 --> 00:08:39,539
way you can either learn from a code

231
00:08:39,539 --> 00:08:41,219
that's already been written or you can

232
00:08:41,219 --> 00:08:42,719
pop it off the shelf the same way we do

233
00:08:42,719 --> 00:08:46,200
pip install requests and keep it moving

234
00:08:46,200 --> 00:08:47,100
um

235
00:08:47,100 --> 00:08:49,680
also I think worth noting at least for

236
00:08:49,680 --> 00:08:51,720
me in terms of cost savings

237
00:08:51,720 --> 00:08:54,060
this year excuse me for this employment

238
00:08:54,060 --> 00:08:56,279
we switched from using Secrets manager

239
00:08:56,279 --> 00:08:57,779
to parameter store

240
00:08:57,779 --> 00:09:00,660
it's cheaper I like the ux it's a lot

241
00:09:00,660 --> 00:09:01,920
easier to reason about it's a lot easier

242
00:09:01,920 --> 00:09:05,040
to work with and I know

243
00:09:05,040 --> 00:09:06,959
even though ECS has good support for

244
00:09:06,959 --> 00:09:09,240
both my personal preference mostly from

245
00:09:09,240 --> 00:09:10,800
usability and mostly from cost

246
00:09:10,800 --> 00:09:12,540
perspective

247
00:09:12,540 --> 00:09:13,800
excuse me

248
00:09:13,800 --> 00:09:16,380
um so how did it go

249
00:09:16,380 --> 00:09:17,580
the first year we deployed this with

250
00:09:17,580 --> 00:09:19,560
virtual machines in 2020

251
00:09:19,560 --> 00:09:21,060
we choked pretty hard on during

252
00:09:21,060 --> 00:09:23,160
registration actually it was it was a it

253
00:09:23,160 --> 00:09:25,620
was a pretty stressful time the web page

254
00:09:25,620 --> 00:09:28,580
was crawling users couldn't register

255
00:09:28,580 --> 00:09:30,660
sometimes the page itself would just

256
00:09:30,660 --> 00:09:32,300
fail to load pretty hard

257
00:09:32,300 --> 00:09:35,820
and I'm thinking oh cool this is Defcon

258
00:09:35,820 --> 00:09:37,019
this is a really good problem to have

259
00:09:37,019 --> 00:09:38,220
we're scaling we're absorbing the

260
00:09:38,220 --> 00:09:39,540
traffic the auto scaling group will do

261
00:09:39,540 --> 00:09:42,000
its the and then the auto scaling group

262
00:09:42,000 --> 00:09:43,920
didn't do its thing which leads to a

263
00:09:43,920 --> 00:09:45,540
little bit more Panic um start looking

264
00:09:45,540 --> 00:09:47,339
at how the auto scaling group is

265
00:09:47,339 --> 00:09:49,800
configured CPU usage which is again our

266
00:09:49,800 --> 00:09:51,779
scaling Factor really low

267
00:09:51,779 --> 00:09:54,660
okay uh take a look at the database not

268
00:09:54,660 --> 00:09:56,160
database is not doing a lot maybe the

269
00:09:56,160 --> 00:09:57,720
cache is choking maybe it's working

270
00:09:57,720 --> 00:10:01,200
really hard also doing basically nothing

271
00:10:01,200 --> 00:10:03,240
after a lot of panic and a lot of very

272
00:10:03,240 --> 00:10:05,399
very high speed documentation reading it

273
00:10:05,399 --> 00:10:07,740
turns out the culprit is G unicorn G

274
00:10:07,740 --> 00:10:10,560
unicorn is a uh

275
00:10:10,560 --> 00:10:12,420
I hesitate to call it an app server

276
00:10:12,420 --> 00:10:13,560
because that makes people think of java

277
00:10:13,560 --> 00:10:16,860
but it is a web server that fronts flask

278
00:10:16,860 --> 00:10:18,600
applications and in particular is what

279
00:10:18,600 --> 00:10:21,240
we were using to deploy ctfd

280
00:10:21,240 --> 00:10:23,040
um want to call it out because the

281
00:10:23,040 --> 00:10:25,320
default configuration is one thread and

282
00:10:25,320 --> 00:10:28,320
one worker really good really clean for

283
00:10:28,320 --> 00:10:30,660
local development good and clean for

284
00:10:30,660 --> 00:10:32,820
testing actually really terrible for

285
00:10:32,820 --> 00:10:35,040
production deployment once you've

286
00:10:35,040 --> 00:10:36,420
identified this you can tweak the

287
00:10:36,420 --> 00:10:38,040
parameters as necessary and actually

288
00:10:38,040 --> 00:10:39,180
make use of the hardware you're

289
00:10:39,180 --> 00:10:40,560
provisioning

290
00:10:40,560 --> 00:10:42,360
and once we figure this out and we're

291
00:10:42,360 --> 00:10:44,160
able to relaunch our Fleet everything

292
00:10:44,160 --> 00:10:47,820
was safe rare users are able to register

293
00:10:47,820 --> 00:10:49,560
people can start reading challenges

294
00:10:49,560 --> 00:10:52,380
files can start to be submitted and we

295
00:10:52,380 --> 00:10:56,100
are out of the woods for 2020.

296
00:10:56,100 --> 00:10:58,980
2021 our first year running the Alaska

297
00:10:58,980 --> 00:11:01,019
container service deployment

298
00:11:01,019 --> 00:11:03,540
it actually went really well no issues

299
00:11:03,540 --> 00:11:04,980
to speak of

300
00:11:04,980 --> 00:11:07,399
but we were not so lucky during 2022

301
00:11:07,399 --> 00:11:11,100
2022 brought us a

302
00:11:11,100 --> 00:11:12,600
brought us an issue where database

303
00:11:12,600 --> 00:11:14,760
connections aren't successfully closed

304
00:11:14,760 --> 00:11:16,860
from the application uh inadvertently

305
00:11:16,860 --> 00:11:19,320
leading you to run the risk of denialing

306
00:11:19,320 --> 00:11:20,880
of service your own database from your

307
00:11:20,880 --> 00:11:22,440
application and knocking yourself on the

308
00:11:22,440 --> 00:11:25,260
floor super fun something to be aware of

309
00:11:25,260 --> 00:11:27,300
uh watch your database connections if as

310
00:11:27,300 --> 00:11:30,060
you're running ctfd

311
00:11:30,060 --> 00:11:31,620
it needs love in terms of being

312
00:11:31,620 --> 00:11:33,000
container it needs love in terms of

313
00:11:33,000 --> 00:11:34,860
handling signals appropriately

314
00:11:34,860 --> 00:11:37,500
um something else that we notice and uh

315
00:11:37,500 --> 00:11:39,060
fun fact also happened again this year

316
00:11:39,060 --> 00:11:41,579
so it wasn't just a fluke

317
00:11:41,579 --> 00:11:44,700
ctfd has what looks like a memory leak

318
00:11:44,700 --> 00:11:46,620
it will run and run and run and

319
00:11:46,620 --> 00:11:47,880
progressively use up all available

320
00:11:47,880 --> 00:11:49,500
memory and then choke

321
00:11:49,500 --> 00:11:51,959
even when it's doing nothing run it for

322
00:11:51,959 --> 00:11:53,519
a week in development just kind of

323
00:11:53,519 --> 00:11:55,040
hanging out

324
00:11:55,040 --> 00:11:58,079
and it started to try and die so

325
00:11:58,079 --> 00:11:59,880
something to be aware of you can fix

326
00:11:59,880 --> 00:12:01,220
this by rolling your Fleet

327
00:12:01,220 --> 00:12:03,959
semi-regularly it is a workaround it is

328
00:12:03,959 --> 00:12:05,640
not a pass that we've submitted upstream

329
00:12:05,640 --> 00:12:07,500
and to that end

330
00:12:07,500 --> 00:12:09,120
everything that we're doing while

331
00:12:09,120 --> 00:12:11,519
running these is live

332
00:12:11,519 --> 00:12:13,560
um everything that all the issues that

333
00:12:13,560 --> 00:12:15,360
we had to fix this year when we hit

334
00:12:15,360 --> 00:12:17,640
similarities is live everything that we

335
00:12:17,640 --> 00:12:20,820
hit for Defcon in 2020 and 2021 also

336
00:12:20,820 --> 00:12:23,339
live we don't have the luxury during a

337
00:12:23,339 --> 00:12:26,940
live event to take down throw in pdb and

338
00:12:26,940 --> 00:12:28,740
get really really nitty-gritty with the

339
00:12:28,740 --> 00:12:29,880
specific errors that we're dealing with

340
00:12:29,880 --> 00:12:31,500
which is unfortunate because as

341
00:12:31,500 --> 00:12:34,079
interested as we are

342
00:12:34,079 --> 00:12:36,000
uh we are significantly more interested

343
00:12:36,000 --> 00:12:38,220
in making sure that our contestants have

344
00:12:38,220 --> 00:12:40,320
a platform and can have access to the

345
00:12:40,320 --> 00:12:41,579
challenges that we've worked so hard to

346
00:12:41,579 --> 00:12:43,939
bring them

347
00:12:44,040 --> 00:12:45,000
foreign

348
00:12:45,000 --> 00:12:47,040
so I've got things that I want for the

349
00:12:47,040 --> 00:12:47,880
future

350
00:12:47,880 --> 00:12:49,200
um given the incidents that I just

351
00:12:49,200 --> 00:12:50,399
talked about I'm really really

352
00:12:50,399 --> 00:12:52,920
interested in better logging

353
00:12:52,920 --> 00:12:54,420
um

354
00:12:54,420 --> 00:12:57,240
AWS cloudwatch is what we're using by

355
00:12:57,240 --> 00:12:59,459
default with ECS and previous to that

356
00:12:59,459 --> 00:13:01,920
we're wrapping a bunch of log files this

357
00:13:01,920 --> 00:13:03,920
isn't scalable kind of surprising nobody

358
00:13:03,920 --> 00:13:06,959
having a better log searching and having

359
00:13:06,959 --> 00:13:08,399
a better interface really for just how

360
00:13:08,399 --> 00:13:09,959
we ingest that information in parse it

361
00:13:09,959 --> 00:13:12,120
is something I'm really interested in a

362
00:13:12,120 --> 00:13:13,800
separate thing about logging with like

363
00:13:13,800 --> 00:13:15,540
structured data but you know we'll get

364
00:13:15,540 --> 00:13:17,700
there eventually so that's one area of

365
00:13:17,700 --> 00:13:19,620
interest I'm pretty interested in

366
00:13:19,620 --> 00:13:22,560
looking at uh grafana Loki it's a

367
00:13:22,560 --> 00:13:24,300
different way to ingest logs

368
00:13:24,300 --> 00:13:25,920
particularly from containerize apps

369
00:13:25,920 --> 00:13:27,839
hopefully that could be a good use a

370
00:13:27,839 --> 00:13:30,540
good use case time will tell the other

371
00:13:30,540 --> 00:13:32,279
big area of improvement that I'm looking

372
00:13:32,279 --> 00:13:34,079
at is refactoring the infrastructure as

373
00:13:34,079 --> 00:13:36,720
code code base itself one option that

374
00:13:36,720 --> 00:13:38,160
I've been thinking about is using a tool

375
00:13:38,160 --> 00:13:40,579
called Terra grunt it gives a capability

376
00:13:40,579 --> 00:13:44,160
to give to provide a really really

377
00:13:44,160 --> 00:13:47,760
strict dependency management so instead

378
00:13:47,760 --> 00:13:49,920
of guessing which areas of code one will

379
00:13:49,920 --> 00:13:52,079
impact others you have very very clearly

380
00:13:52,079 --> 00:13:54,000
drawn out scoping for each module in

381
00:13:54,000 --> 00:13:55,320
each component

382
00:13:55,320 --> 00:13:57,300
um good for reasoning about it good for

383
00:13:57,300 --> 00:13:59,399
code review and also potentially this

384
00:13:59,399 --> 00:14:01,019
gives us the capability to provide

385
00:14:01,019 --> 00:14:03,360
better Access Control if I have an

386
00:14:03,360 --> 00:14:04,740
engineer working on caching

387
00:14:04,740 --> 00:14:06,120
infrastructure I don't necessarily need

388
00:14:06,120 --> 00:14:09,540
to give them access to the load browser

389
00:14:09,540 --> 00:14:10,800
or the rest of the compute

390
00:14:10,800 --> 00:14:12,540
infrastructure

391
00:14:12,540 --> 00:14:16,019
this is very much wishlist to be fair an

392
00:14:16,019 --> 00:14:17,579
alternative approach to the code base

393
00:14:17,579 --> 00:14:20,220
that I've been looking at is using the

394
00:14:20,220 --> 00:14:22,860
cloud development kit from policycorp

395
00:14:22,860 --> 00:14:25,620
effectively switching and using a

396
00:14:25,620 --> 00:14:28,100
general purpose programming language to

397
00:14:28,100 --> 00:14:32,639
uh to uh to create the infrastructure

398
00:14:32,639 --> 00:14:35,100
instead of using terraforms uh

399
00:14:35,100 --> 00:14:37,740
declarative way of interacting with

400
00:14:37,740 --> 00:14:38,880
infrastructure instead of telling it

401
00:14:38,880 --> 00:14:40,500
what you want you would be describing

402
00:14:40,500 --> 00:14:41,940
each component and how it fits together

403
00:14:41,940 --> 00:14:43,620
using your general purpose program

404
00:14:43,620 --> 00:14:46,560
programming language for me I work a lot

405
00:14:46,560 --> 00:14:48,180
in Python so

406
00:14:48,180 --> 00:14:49,680
spend a little bit more time in an IDE

407
00:14:49,680 --> 00:14:51,779
never a bad thing I don't spend too much

408
00:14:51,779 --> 00:14:54,420
of my life in them as it is but that's

409
00:14:54,420 --> 00:14:56,220
pretty much that we'll see how it goes I

410
00:14:56,220 --> 00:14:59,160
haven't made a decision yet and

411
00:14:59,160 --> 00:15:00,420
for anybody who's interested in

412
00:15:00,420 --> 00:15:01,980
following along with what we've built

413
00:15:01,980 --> 00:15:05,160
it's all online at GitHub we are at

414
00:15:05,160 --> 00:15:07,440
Cloud Village and the project is cloud

415
00:15:07,440 --> 00:15:11,519
Village ctfd infrastructure again it is

416
00:15:11,519 --> 00:15:15,120
purpose built to run in AWS a lot of The

417
00:15:15,120 --> 00:15:16,620
Primitives I think are reusable as far

418
00:15:16,620 --> 00:15:18,720
as the components that are available and

419
00:15:18,720 --> 00:15:20,880
again this is the shape it's gotten now

420
00:15:20,880 --> 00:15:22,680
we'll see what shape it takes in the

421
00:15:22,680 --> 00:15:24,660
future

422
00:15:24,660 --> 00:15:27,420
and now to talk about what we've got

423
00:15:27,420 --> 00:15:28,740
going on for this year

424
00:15:28,740 --> 00:15:31,139
I want to bring out Jazz oh cool I

425
00:15:31,139 --> 00:15:32,339
apologize

426
00:15:32,339 --> 00:15:34,800
um do you have a little bit for a q a if

427
00:15:34,800 --> 00:15:37,800
anybody is curious about things

428
00:15:37,800 --> 00:15:40,399
right here

429
00:15:40,620 --> 00:15:43,680
how's it going so far this year uh

430
00:15:43,680 --> 00:15:45,660
uh so the question is how's it going so

431
00:15:45,660 --> 00:15:49,019
far uh for 2020 oh God what is time I

432
00:15:49,019 --> 00:15:52,199
was about to say 2022 again yeah uh 2023

433
00:15:52,199 --> 00:15:53,220
is okay

434
00:15:53,220 --> 00:15:54,560
um

435
00:15:54,560 --> 00:15:58,019
the memory leak that I talked about and

436
00:15:58,019 --> 00:15:59,399
the database issue that I talked about

437
00:15:59,399 --> 00:16:02,760
both struck us uh this year that is uh I

438
00:16:02,760 --> 00:16:04,920
was up at four o'clock this morning uh

439
00:16:04,920 --> 00:16:07,800
fixing things so on one hand while our

440
00:16:07,800 --> 00:16:10,800
code base is solid there is still I

441
00:16:10,800 --> 00:16:12,480
think the application and potentially

442
00:16:12,480 --> 00:16:14,579
our handling of it might need some love

443
00:16:14,579 --> 00:16:16,560
in order to address those things

444
00:16:16,560 --> 00:16:17,399
um

445
00:16:17,399 --> 00:16:19,980
I like to avoid I like to avoid just

446
00:16:19,980 --> 00:16:21,480
shooting applications in the head if I

447
00:16:21,480 --> 00:16:22,380
can

448
00:16:22,380 --> 00:16:25,320
um so my hope is that sometime between

449
00:16:25,320 --> 00:16:28,500
now and post Defcon I'll be able to

450
00:16:28,500 --> 00:16:30,240
spend some time doing local development

451
00:16:30,240 --> 00:16:31,680
and banging on it to figure out why

452
00:16:31,680 --> 00:16:34,019
we've got this memory leak and the

453
00:16:34,019 --> 00:16:35,459
database thing is particular Thorn to my

454
00:16:35,459 --> 00:16:37,259
side but I'm very much hoping for that

455
00:16:37,259 --> 00:16:39,240
but other like that knotwithstanding

456
00:16:39,240 --> 00:16:41,279
this year is pretty good so no new

457
00:16:41,279 --> 00:16:42,779
terrible things just existing

458
00:16:42,779 --> 00:16:44,220
frustrations that thankfully we were

459
00:16:44,220 --> 00:16:45,779
already equipped to handle

460
00:16:45,779 --> 00:16:49,139
are you implementing Terror tests at all

461
00:16:49,139 --> 00:16:50,519
um for testing

462
00:16:50,519 --> 00:16:52,579
um

463
00:16:53,639 --> 00:16:55,620
sorry uh so the question is have we

464
00:16:55,620 --> 00:16:57,360
implemented tarotest Terror tests for

465
00:16:57,360 --> 00:17:00,000
folks unfamiliar is a an infrastructure

466
00:17:00,000 --> 00:17:01,740
is code testing framework

467
00:17:01,740 --> 00:17:05,040
um primarily based in go and uh from the

468
00:17:05,040 --> 00:17:07,140
sand cats who built a terror run if

469
00:17:07,140 --> 00:17:08,579
anybody's curious

470
00:17:08,579 --> 00:17:10,980
um one of the reasons actually why

471
00:17:10,980 --> 00:17:13,020
um why I want to explore the refactor

472
00:17:13,020 --> 00:17:15,780
for Terror grunt is to make it that much

473
00:17:15,780 --> 00:17:19,079
easier to eventually move to tarotest

474
00:17:19,079 --> 00:17:21,720
uh Terror test requires your

475
00:17:21,720 --> 00:17:23,819
infrastructure as code components to be

476
00:17:23,819 --> 00:17:25,679
built in a particular way so that

477
00:17:25,679 --> 00:17:27,179
creating them and destroying them on the

478
00:17:27,179 --> 00:17:30,419
Fly is relatively easy this is very

479
00:17:30,419 --> 00:17:33,299
reasonable and also not frequently how

480
00:17:33,299 --> 00:17:35,039
you will find infrastructure as code

481
00:17:35,039 --> 00:17:36,660
deployed in anyone's actual production

482
00:17:36,660 --> 00:17:38,760
environment

483
00:17:38,760 --> 00:17:42,539
if you can do it more power to you

484
00:17:42,539 --> 00:17:43,919
I know it's always a work in progress

485
00:17:43,919 --> 00:17:46,640
for a lot of folks

486
00:17:47,220 --> 00:17:49,620
um what database are you using and where

487
00:17:49,620 --> 00:17:51,299
is the database is it

488
00:17:51,299 --> 00:17:54,120
yeah fair question uh so question is

489
00:17:54,120 --> 00:17:56,400
what's the database and where is it

490
00:17:56,400 --> 00:17:59,220
um ctfd supports MySQL theoretically it

491
00:17:59,220 --> 00:18:00,840
supports postgres I say theoretically

492
00:18:00,840 --> 00:18:02,520
because it exists in the documentation

493
00:18:02,520 --> 00:18:05,280
but it also says it's artificial so once

494
00:18:05,280 --> 00:18:06,720
mileage may vary if you want to swap

495
00:18:06,720 --> 00:18:07,740
that out

496
00:18:07,740 --> 00:18:11,760
we run our database in particular in RDS

497
00:18:11,760 --> 00:18:13,919
to manage a lot of availability to

498
00:18:13,919 --> 00:18:16,440
manage configuration and to manage if

499
00:18:16,440 --> 00:18:19,220
necessary failover

500
00:18:19,860 --> 00:18:21,810
um have you considered rewriting and go

501
00:18:21,810 --> 00:18:23,620
[Laughter]

502
00:18:23,620 --> 00:18:24,179
[Music]

503
00:18:24,179 --> 00:18:25,380
um

504
00:18:25,380 --> 00:18:28,919
I would not be so bold as to presume and

505
00:18:28,919 --> 00:18:31,020
rewrite a maintainer's existing project

506
00:18:31,020 --> 00:18:32,340
in a programming language I am

507
00:18:32,340 --> 00:18:34,939
unfamiliar with

508
00:18:35,520 --> 00:18:37,799
okay uh two questions first of all you

509
00:18:37,799 --> 00:18:40,140
know some types of uh web exploitation

510
00:18:40,140 --> 00:18:42,840
attacks will sort of destroy this state

511
00:18:42,840 --> 00:18:44,820
for all other users like specifically

512
00:18:44,820 --> 00:18:47,400
Cash Cash poisoning for example have you

513
00:18:47,400 --> 00:18:49,320
ever thought of like a one container per

514
00:18:49,320 --> 00:18:50,820
team model

515
00:18:50,820 --> 00:18:52,559
um or or anything similar and how would

516
00:18:52,559 --> 00:18:54,720
that work with auto scaling

517
00:18:54,720 --> 00:18:57,780
so uh the question is given that cash

518
00:18:57,780 --> 00:18:59,700
poisoning is a thing

519
00:18:59,700 --> 00:19:01,919
how do you work around that and what can

520
00:19:01,919 --> 00:19:04,740
you provide to still enforce Team level

521
00:19:04,740 --> 00:19:07,799
isolation for challenges in particular

522
00:19:07,799 --> 00:19:10,440
that's not something we deal with and

523
00:19:10,440 --> 00:19:13,080
that has to do less with architecture

524
00:19:13,080 --> 00:19:15,720
and more with the specifics of how we

525
00:19:15,720 --> 00:19:18,360
host challenges which is to say we don't

526
00:19:18,360 --> 00:19:20,160
um ctfd

527
00:19:20,160 --> 00:19:21,900
it's an application you can put stuff on

528
00:19:21,900 --> 00:19:24,000
the same infrastructure um one way that

529
00:19:24,000 --> 00:19:25,500
a lot of challenges are deployed with

530
00:19:25,500 --> 00:19:27,780
ctfd is if I have a VM running it I can

531
00:19:27,780 --> 00:19:29,340
put all my individual challenges on the

532
00:19:29,340 --> 00:19:32,220
same box for ease of use very

533
00:19:32,220 --> 00:19:34,559
intentionally we don't do that every

534
00:19:34,559 --> 00:19:37,200
single challenge that we have is hosted

535
00:19:37,200 --> 00:19:38,940
on and in on a different piece of

536
00:19:38,940 --> 00:19:41,460
infrastructure entirely isolated from

537
00:19:41,460 --> 00:19:42,960
not just from the infrastructure as code

538
00:19:42,960 --> 00:19:44,340
perspective but also from a networking

539
00:19:44,340 --> 00:19:46,140
perspective specifically so that way if

540
00:19:46,140 --> 00:19:47,820
somebody does take out a component it's

541
00:19:47,820 --> 00:19:49,679
not going to Cascade and get the rest of

542
00:19:49,679 --> 00:19:51,480
them I apologize so that was one

543
00:19:51,480 --> 00:19:52,740
question uh you asked the second one

544
00:19:52,740 --> 00:19:54,120
yeah second question I was wondering if

545
00:19:54,120 --> 00:19:55,860
you've investigated you know ctfd

546
00:19:55,860 --> 00:19:58,320
Alternatives like rcds or rctf before

547
00:19:58,320 --> 00:20:00,900
and what your opinions were uh not yet

548
00:20:00,900 --> 00:20:04,020
honestly um it is in particular um I

549
00:20:04,020 --> 00:20:05,760
happen to be a little salty today so I'm

550
00:20:05,760 --> 00:20:07,440
very interested in looking at an

551
00:20:07,440 --> 00:20:10,860
alternative but right now we have

552
00:20:10,860 --> 00:20:12,900
experience with ctfd we have experience

553
00:20:12,900 --> 00:20:14,520
with its failure domains which is

554
00:20:14,520 --> 00:20:16,679
something I'm an infrastructure

555
00:20:16,679 --> 00:20:18,419
engineering gal like I care a lot about

556
00:20:18,419 --> 00:20:20,280
my failure domains so now that we're

557
00:20:20,280 --> 00:20:21,539
familiar with that

558
00:20:21,539 --> 00:20:24,000
I'm not hesitant to change it but I have

559
00:20:24,000 --> 00:20:25,919
to do a really really strict evaluation

560
00:20:25,919 --> 00:20:28,020
of what I'm gaining if I decide I want

561
00:20:28,020 --> 00:20:28,980
to shift

562
00:20:28,980 --> 00:20:33,260
um yeah I think that's about that cool

