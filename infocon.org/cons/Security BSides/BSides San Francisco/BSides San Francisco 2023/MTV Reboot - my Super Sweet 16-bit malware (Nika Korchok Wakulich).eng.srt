1
00:00:00,179 --> 00:00:04,100
we are delighted to have with us

2
00:00:06,660 --> 00:00:09,660
to talk to us about high MTB destroy the

3
00:00:09,660 --> 00:00:12,559
music industry sorry

4
00:00:12,660 --> 00:00:15,360
to talk about MTV reboot my super sweet

5
00:00:15,360 --> 00:00:19,939
16 hour byte MS-DOS Edition

6
00:00:21,720 --> 00:00:24,140
hey

7
00:00:25,800 --> 00:00:28,140
what's up okay

8
00:00:28,140 --> 00:00:30,660
um hi everyone thank you for joining me

9
00:00:30,660 --> 00:00:33,899
today this is my super sweet 16-bit

10
00:00:33,899 --> 00:00:35,420
malware

11
00:00:35,420 --> 00:00:39,780
MS-DOS Edition TSR remix

12
00:00:39,780 --> 00:00:43,800
uh so quick who am I my name is Nika I'm

13
00:00:43,800 --> 00:00:46,200
a security consultant at Leviathan

14
00:00:46,200 --> 00:00:48,960
Security Group and I'm also a reverse

15
00:00:48,960 --> 00:00:52,200
engineer and artist and I like malware

16
00:00:52,200 --> 00:00:54,719
and Hardware hacking and languages and

17
00:00:54,719 --> 00:00:57,120
all the other things on there

18
00:00:57,120 --> 00:01:00,180
um and greets and big thank yous to

19
00:01:00,180 --> 00:01:02,160
everyone who's on that list it's a lot

20
00:01:02,160 --> 00:01:03,420
of people

21
00:01:03,420 --> 00:01:04,799
um wouldn't be here without all of them

22
00:01:04,799 --> 00:01:08,159
so shout out to all of them uh thank you

23
00:01:08,159 --> 00:01:10,500
to the team Leviathan especially and to

24
00:01:10,500 --> 00:01:13,799
b-sides for having me so

25
00:01:13,799 --> 00:01:16,799
all right uh so quick disclaimer

26
00:01:16,799 --> 00:01:18,659
the views expressed in this presentation

27
00:01:18,659 --> 00:01:20,159
are my own and do not reflect the

28
00:01:20,159 --> 00:01:21,780
opinions of my past present or future

29
00:01:21,780 --> 00:01:25,560
employers fewer discretion is advised

30
00:01:25,560 --> 00:01:28,680
so uh what this talk is about

31
00:01:28,680 --> 00:01:30,780
um in case the very long title did not

32
00:01:30,780 --> 00:01:33,299
tip you off uh this talk is an

33
00:01:33,299 --> 00:01:35,759
introduction to MS-DOS era malware

34
00:01:35,759 --> 00:01:38,880
including an overview of the MS-DOS

35
00:01:38,880 --> 00:01:40,979
architecture and the unique threat

36
00:01:40,979 --> 00:01:42,420
landscape of the time

37
00:01:42,420 --> 00:01:44,759
it's a starting point for learning about

38
00:01:44,759 --> 00:01:47,040
viruses and the techniques that were

39
00:01:47,040 --> 00:01:47,900
used

40
00:01:47,900 --> 00:01:50,759
in sophisticated malware of the 80s and

41
00:01:50,759 --> 00:01:52,740
90s but

42
00:01:52,740 --> 00:01:54,960
it is not a complete and thorough

43
00:01:54,960 --> 00:01:57,420
examination of every piece of Daw Sarah

44
00:01:57,420 --> 00:02:00,119
malware and it's not an in-depth

45
00:02:00,119 --> 00:02:02,460
analysis of malware that targeted other

46
00:02:02,460 --> 00:02:05,820
os's of the era so elk cloner isn't

47
00:02:05,820 --> 00:02:07,680
relevant here though it's Ram infection

48
00:02:07,680 --> 00:02:10,979
techniques are to my heart very dear

49
00:02:10,979 --> 00:02:11,520
um

50
00:02:11,520 --> 00:02:13,680
if anyone here gets that reference you

51
00:02:13,680 --> 00:02:17,220
win all the points and if you don't I

52
00:02:17,220 --> 00:02:20,220
can explain it at the end

53
00:02:20,220 --> 00:02:24,180
and on this slide to the right we have

54
00:02:24,180 --> 00:02:26,280
Mars Land by spanska so shout out to

55
00:02:26,280 --> 00:02:29,700
spanska who is uh one of my favorite

56
00:02:29,700 --> 00:02:32,160
virus writers of this era probably of

57
00:02:32,160 --> 00:02:34,260
all time and whose viruses were actually

58
00:02:34,260 --> 00:02:36,420
the reason I was inspired to start this

59
00:02:36,420 --> 00:02:37,860
project

60
00:02:37,860 --> 00:02:40,080
um I I have a background in both

61
00:02:40,080 --> 00:02:42,660
computer science and Fine Arts and these

62
00:02:42,660 --> 00:02:45,060
viruses frankly appeal to both sides of

63
00:02:45,060 --> 00:02:47,040
that and I think they're poetry I love

64
00:02:47,040 --> 00:02:47,819
them

65
00:02:47,819 --> 00:02:52,040
um everyone should know about spanska so

66
00:02:54,480 --> 00:02:56,640
we go to the next one

67
00:02:56,640 --> 00:02:58,140
there we go okay

68
00:02:58,140 --> 00:03:01,200
uh so a quick overview of how the

69
00:03:01,200 --> 00:03:02,959
presentation is going to be structured

70
00:03:02,959 --> 00:03:06,060
uh we have our introduction which we

71
00:03:06,060 --> 00:03:09,480
already covered so we're doing great and

72
00:03:09,480 --> 00:03:11,220
uh we're going to go over motivations

73
00:03:11,220 --> 00:03:14,400
which was uh essentially my reasons for

74
00:03:14,400 --> 00:03:16,319
starting this project and why you would

75
00:03:16,319 --> 00:03:19,519
want to study ms-dosera malware

76
00:03:19,519 --> 00:03:21,480
definitions we're going to go over

77
00:03:21,480 --> 00:03:24,599
architecture notable interrupts uh of

78
00:03:24,599 --> 00:03:27,300
course we're going to talk about tsr's

79
00:03:27,300 --> 00:03:29,099
um we're going to talk about Stealth and

80
00:03:29,099 --> 00:03:31,860
persistence techniques and looking at

81
00:03:31,860 --> 00:03:33,780
some notable malware samples and

82
00:03:33,780 --> 00:03:37,099
connections to Modern malware

83
00:03:37,560 --> 00:03:41,400
so motivations uh I describe this as

84
00:03:41,400 --> 00:03:44,459
Choose Your Own Adventure because I had

85
00:03:44,459 --> 00:03:46,260
a lot of motivations throughout the

86
00:03:46,260 --> 00:03:48,720
course of this project but the one that

87
00:03:48,720 --> 00:03:51,959
I started with was actually C which was

88
00:03:51,959 --> 00:03:54,659
looking at some of these samples my

89
00:03:54,659 --> 00:03:57,780
reaction was it looks pretty why does it

90
00:03:57,780 --> 00:04:00,420
look pretty why is it also infecting the

91
00:04:00,420 --> 00:04:03,959
MBR is this malware or is this art is it

92
00:04:03,959 --> 00:04:05,760
both

93
00:04:05,760 --> 00:04:07,620
um I don't have any answers to those

94
00:04:07,620 --> 00:04:10,860
questions but along the way uh are

95
00:04:10,860 --> 00:04:12,900
definitive answers to those questions I

96
00:04:12,900 --> 00:04:13,980
should say

97
00:04:13,980 --> 00:04:16,738
um but along the way I've uh leveled up

98
00:04:16,738 --> 00:04:20,339
my skills in all of the side quest uh

99
00:04:20,339 --> 00:04:22,019
disciplines that I've listed here so

100
00:04:22,019 --> 00:04:25,320
reversing 16-bit malware has uh Advanced

101
00:04:25,320 --> 00:04:26,400
my skills in things like Hardware

102
00:04:26,400 --> 00:04:29,400
hacking uh bios reverse engineering

103
00:04:29,400 --> 00:04:32,220
Graphics programming uh different

104
00:04:32,220 --> 00:04:34,560
aspects of VX development so

105
00:04:34,560 --> 00:04:37,139
polymorphism OS development and then

106
00:04:37,139 --> 00:04:40,500
binary Gulf for anyone who's a big fan

107
00:04:40,500 --> 00:04:43,560
of writing assembly programs like I am

108
00:04:43,560 --> 00:04:45,919
so

109
00:04:46,620 --> 00:04:48,060
all right uh

110
00:04:48,060 --> 00:04:50,520
so in order to contextualize this I want

111
00:04:50,520 --> 00:04:52,139
to just provide some definitions up

112
00:04:52,139 --> 00:04:56,100
front so a virus Fred Cohen is actually

113
00:04:56,100 --> 00:04:57,960
credited as being the creator of the

114
00:04:57,960 --> 00:05:02,639
term virus in his 1984 paper the full

115
00:05:02,639 --> 00:05:04,380
quote is presented there but we're going

116
00:05:04,380 --> 00:05:06,600
to extrapolate on that and to find a

117
00:05:06,600 --> 00:05:09,900
virus as a self-replicating program that

118
00:05:09,900 --> 00:05:12,060
uses a host program to produce new

119
00:05:12,060 --> 00:05:15,259
coffees of itself

120
00:05:15,780 --> 00:05:18,540
and then a few more definitions a

121
00:05:18,540 --> 00:05:21,540
polymorphic polymorphic virus is a virus

122
00:05:21,540 --> 00:05:24,180
that uses a variable encryption and

123
00:05:24,180 --> 00:05:27,479
decryption routine and variable key to

124
00:05:27,479 --> 00:05:29,400
create an encrypted copy of itself in

125
00:05:29,400 --> 00:05:31,680
memory that is then appended to or

126
00:05:31,680 --> 00:05:34,199
inserted into a host file

127
00:05:34,199 --> 00:05:38,120
uh the encrypted image of the virus is

128
00:05:38,120 --> 00:05:42,120
uh it changes upon each iteration so it

129
00:05:42,120 --> 00:05:44,520
minimizes the presence of known bite

130
00:05:44,520 --> 00:05:47,639
patterns for AV signatures and increases

131
00:05:47,639 --> 00:05:49,740
the stealth of the virus

132
00:05:49,740 --> 00:05:52,979
and then boot kits so a boot kit

133
00:05:52,979 --> 00:05:55,979
contrasted with a root kit a boot kit is

134
00:05:55,979 --> 00:05:57,900
a type of malware that infects a

135
00:05:57,900 --> 00:05:59,699
critical component of the OS boot

136
00:05:59,699 --> 00:06:02,340
process to install itself and maintain

137
00:06:02,340 --> 00:06:05,940
persistence a boot kit presents a more

138
00:06:05,940 --> 00:06:08,460
OS agnostic factor for attacking some of

139
00:06:08,460 --> 00:06:10,620
the lowest level abstractions available

140
00:06:10,620 --> 00:06:13,620
to and used by a computer so again

141
00:06:13,620 --> 00:06:15,720
contrasted with a root kit which is

142
00:06:15,720 --> 00:06:18,360
typically more targeted towards a

143
00:06:18,360 --> 00:06:20,699
specific OS and oftentimes a very

144
00:06:20,699 --> 00:06:24,000
specific version of that OS a boot kit

145
00:06:24,000 --> 00:06:26,580
has a lot more flexibility in the lower

146
00:06:26,580 --> 00:06:28,500
level abstraction layers that it can

147
00:06:28,500 --> 00:06:33,680
attack and it has this great ability to

148
00:06:33,680 --> 00:06:36,479
maintain further persistence because of

149
00:06:36,479 --> 00:06:37,500
that

150
00:06:37,500 --> 00:06:42,360
and then uh boot sector infector or BSI

151
00:06:42,360 --> 00:06:44,280
um a boot sector infector is the

152
00:06:44,280 --> 00:06:47,340
earliest form of a boot kit so a BSI is

153
00:06:47,340 --> 00:06:49,680
a boot kit that targets storage media

154
00:06:49,680 --> 00:06:52,620
that didn't have an MBR and an MBR is a

155
00:06:52,620 --> 00:06:55,560
master boot record which has a partition

156
00:06:55,560 --> 00:06:58,680
table allows you to boot multiple uh

157
00:06:58,680 --> 00:07:02,940
os's but a boot sector or a boot sector

158
00:07:02,940 --> 00:07:04,280
infector

159
00:07:04,280 --> 00:07:07,680
targets storage media that only had a

160
00:07:07,680 --> 00:07:08,880
boot sector

161
00:07:08,880 --> 00:07:11,060
so hence the name

162
00:07:11,060 --> 00:07:14,520
and BSIS especially of this era targeted

163
00:07:14,520 --> 00:07:16,919
various forms of floppy diskettes again

164
00:07:16,919 --> 00:07:20,060
which didn't use an MBR

165
00:07:21,900 --> 00:07:23,699
all right uh so we're going to have a

166
00:07:23,699 --> 00:07:27,500
whirlwind tour of MS-DOS

167
00:07:28,020 --> 00:07:31,979
so the Dos kernel MS-DOS version one

168
00:07:31,979 --> 00:07:36,599
debuted in 1981 version 6.22 debuted in

169
00:07:36,599 --> 00:07:37,979
1984.

170
00:07:37,979 --> 00:07:40,620
and some notable features of MS-DOS

171
00:07:40,620 --> 00:07:43,520
include it operates in 16-bit real mode

172
00:07:43,520 --> 00:07:46,259
it provides device independent device

173
00:07:46,259 --> 00:07:48,539
access to Computer Resources using the

174
00:07:48,539 --> 00:07:50,880
key programming interface of MS-DOS

175
00:07:50,880 --> 00:07:52,500
which were system functions I know

176
00:07:52,500 --> 00:07:53,940
that's a bit wordy we'll break some of

177
00:07:53,940 --> 00:07:56,060
that down in a few slides

178
00:07:56,060 --> 00:07:59,520
and very importantly MS-DOS was a single

179
00:07:59,520 --> 00:08:01,500
task operating system which meant that

180
00:08:01,500 --> 00:08:04,580
only one program could run at a time

181
00:08:04,580 --> 00:08:08,160
a TSR is a partial workaround to the

182
00:08:08,160 --> 00:08:11,400
limitations of a single task OS but even

183
00:08:11,400 --> 00:08:13,319
with a TSR it's still important to

184
00:08:13,319 --> 00:08:14,639
remember that it's a single task

185
00:08:14,639 --> 00:08:16,740
operating system

186
00:08:16,740 --> 00:08:20,780
and we'll I'll Define tsrs in a minute

187
00:08:20,780 --> 00:08:23,699
and just a few more notes on the Jaws

188
00:08:23,699 --> 00:08:27,539
kernel uh MS-DOS ms-dos's operating

189
00:08:27,539 --> 00:08:29,340
system is divided into roughly three

190
00:08:29,340 --> 00:08:31,740
layers we have the BIOS basic input up

191
00:08:31,740 --> 00:08:34,919
system around that the Dos kernel and

192
00:08:34,919 --> 00:08:37,679
then further encapsulating the command

193
00:08:37,679 --> 00:08:39,240
processor or the shell which is

194
00:08:39,240 --> 00:08:41,899
command.com

195
00:08:42,599 --> 00:08:45,480
so the Dos kernel provides system

196
00:08:45,480 --> 00:08:48,000
functions that allow a user to perform

197
00:08:48,000 --> 00:08:50,279
actions with a provided collection of

198
00:08:50,279 --> 00:08:52,680
Hardware independent services so these

199
00:08:52,680 --> 00:08:55,200
functions let you do things like memory

200
00:08:55,200 --> 00:08:58,019
management spawning programs a character

201
00:08:58,019 --> 00:09:00,480
device i o all the fun things

202
00:09:00,480 --> 00:09:02,880
uh programs and it must also interact

203
00:09:02,880 --> 00:09:05,040
with these system functions by loading

204
00:09:05,040 --> 00:09:07,320
registers with function specific values

205
00:09:07,320 --> 00:09:09,600
and then transferring control using

206
00:09:09,600 --> 00:09:11,160
software interrupts

207
00:09:11,160 --> 00:09:13,560
so software interrupts using software

208
00:09:13,560 --> 00:09:15,240
interrupts with these system functions

209
00:09:15,240 --> 00:09:17,519
uh was the main method that you could do

210
00:09:17,519 --> 00:09:19,800
cool things on MS-DOS

211
00:09:19,800 --> 00:09:22,019
so that's what we're going to talk about

212
00:09:22,019 --> 00:09:24,320
now

213
00:09:25,440 --> 00:09:29,940
uh so on here this isn't even all of the

214
00:09:29,940 --> 00:09:31,800
interrupts that would have been used by

215
00:09:31,800 --> 00:09:34,800
anastas malware but I've highlighted a

216
00:09:34,800 --> 00:09:38,100
few of the very key ones especially that

217
00:09:38,100 --> 00:09:40,260
are relevant to the samples we're going

218
00:09:40,260 --> 00:09:41,880
to be talking about later

219
00:09:41,880 --> 00:09:44,580
uh there are two groups of interrupts so

220
00:09:44,580 --> 00:09:46,200
we have the system interrupts which are

221
00:09:46,200 --> 00:09:48,420
the ROM bios interrupts and then the

222
00:09:48,420 --> 00:09:51,480
MS-DOS interrupts again it's not

223
00:09:51,480 --> 00:09:54,120
exhaustive this list but I've

224
00:09:54,120 --> 00:09:55,800
highlighted a notable interrupt in each

225
00:09:55,800 --> 00:09:58,800
of those categories so the wrong bios

226
00:09:58,800 --> 00:10:01,860
interrupts interrupt 13 uh handle disk

227
00:10:01,860 --> 00:10:03,600
services so that was a really common

228
00:10:03,600 --> 00:10:05,700
Target for boot kits

229
00:10:05,700 --> 00:10:08,880
and then in 21 uh that was the bread and

230
00:10:08,880 --> 00:10:12,660
butter of MS-DOS so if you're analyzing

231
00:10:12,660 --> 00:10:14,640
MS-DOS malware you're going to be seeing

232
00:10:14,640 --> 00:10:18,140
in 21 everywhere

233
00:10:19,500 --> 00:10:22,260
uh and then just in terms of further

234
00:10:22,260 --> 00:10:24,300
resources for learning about interrupts

235
00:10:24,300 --> 00:10:26,640
on MS-DOS and in relation to MS-DOS

236
00:10:26,640 --> 00:10:30,300
malware you can do a few things like you

237
00:10:30,300 --> 00:10:34,019
can get a book or several like I did and

238
00:10:34,019 --> 00:10:36,019
just page through all of the resources

239
00:10:36,019 --> 00:10:38,820
but an alternate and really excellent

240
00:10:38,820 --> 00:10:41,700
resource I refer to it here by the

241
00:10:41,700 --> 00:10:45,480
really terribly long acronym rtfms dos s

242
00:10:45,480 --> 00:10:49,220
which is read The f-a-m-s-dos Source

243
00:10:49,220 --> 00:10:52,920
because it's really beautifully often

244
00:10:52,920 --> 00:10:55,320
it's often very beautifully and

245
00:10:55,320 --> 00:10:57,480
succinctly documented by the virus

246
00:10:57,480 --> 00:11:00,120
authors themselves so this picture here

247
00:11:00,120 --> 00:11:03,899
or the screenshot rather is from verdem

248
00:11:03,899 --> 00:11:07,140
by Ralph Berger so thanks a million

249
00:11:07,140 --> 00:11:11,000
Ralph it's a beautiful ASM file

250
00:11:11,100 --> 00:11:12,779
uh okay

251
00:11:12,779 --> 00:11:15,720
so in terms of understanding how we

252
00:11:15,720 --> 00:11:18,000
would in invoke system calls and MS-DOS

253
00:11:18,000 --> 00:11:19,019
we're going to be talking about the

254
00:11:19,019 --> 00:11:21,120
interrupt Vector table so the interrupt

255
00:11:21,120 --> 00:11:23,519
Vector table was the precursor to the

256
00:11:23,519 --> 00:11:25,860
interrupt descriptor table and it

257
00:11:25,860 --> 00:11:29,339
defined the addresses of all of the 256

258
00:11:29,339 --> 00:11:33,000
interrupts in 8086 real node uh so how

259
00:11:33,000 --> 00:11:36,079
does one invoke a system call on MS-DOS

260
00:11:36,079 --> 00:11:38,760
under normal conditions a software

261
00:11:38,760 --> 00:11:40,620
interrupt is triggered with a system

262
00:11:40,620 --> 00:11:43,620
call user makes a system call for

263
00:11:43,620 --> 00:11:46,740
example in 21. and the system call

264
00:11:46,740 --> 00:11:48,600
retrieves the address of the interrupt

265
00:11:48,600 --> 00:11:50,760
service routine from the corresponding

266
00:11:50,760 --> 00:11:53,760
entry in the interrupt Vector table the

267
00:11:53,760 --> 00:11:56,160
address there is stored in one of those

268
00:11:56,160 --> 00:11:58,440
again 256 entries

269
00:11:58,440 --> 00:12:00,260
and the address

270
00:12:00,260 --> 00:12:02,940
contains the or is made up of the

271
00:12:02,940 --> 00:12:06,360
segment offset pair and so once that's

272
00:12:06,360 --> 00:12:08,519
retrieved there's a jump to that

273
00:12:08,519 --> 00:12:10,140
retrieved address of the interrupt

274
00:12:10,140 --> 00:12:12,420
service routine system executes CNR

275
00:12:12,420 --> 00:12:14,940
service routine control is returned to

276
00:12:14,940 --> 00:12:16,260
the calling program

277
00:12:16,260 --> 00:12:17,339
so

278
00:12:17,339 --> 00:12:19,940
there's another diagram that maybe

279
00:12:19,940 --> 00:12:22,860
illustrates it in terms of the the

280
00:12:22,860 --> 00:12:25,579
control flow

281
00:12:28,200 --> 00:12:30,779
oh just

282
00:12:30,779 --> 00:12:32,880
all right uh so now we're gonna be

283
00:12:32,880 --> 00:12:35,640
talking about tsrs or terminate and

284
00:12:35,640 --> 00:12:38,779
state resident programs

285
00:12:46,920 --> 00:12:48,000
okay

286
00:12:48,000 --> 00:12:52,440
uh so a TSR is a feature of MS-DOS that

287
00:12:52,440 --> 00:12:54,720
allows a user to bypass the limitations

288
00:12:54,720 --> 00:12:57,720
of a single task OS by installing a

289
00:12:57,720 --> 00:13:00,120
persistent program in Ram which is then

290
00:13:00,120 --> 00:13:02,519
invoked by subsequent interrupts there's

291
00:13:02,519 --> 00:13:04,620
a lot of text there so I will spare you

292
00:13:04,620 --> 00:13:06,660
all of that and we have a nice diagram

293
00:13:06,660 --> 00:13:08,100
right here

294
00:13:08,100 --> 00:13:11,160
uh so I'm gonna I'm gonna just go

295
00:13:11,160 --> 00:13:13,980
through the process of installing a TSR

296
00:13:13,980 --> 00:13:17,279
um in the most straightforward process

297
00:13:17,279 --> 00:13:19,440
um so it starts by retrieving the

298
00:13:19,440 --> 00:13:21,300
address of a desired interrupt that you

299
00:13:21,300 --> 00:13:22,500
want to hook

300
00:13:22,500 --> 00:13:24,839
um so you find the address of that

301
00:13:24,839 --> 00:13:26,339
interrupt from the interrupt Vector

302
00:13:26,339 --> 00:13:28,560
table you retrieve both of the address

303
00:13:28,560 --> 00:13:31,620
components of the target interrupt and

304
00:13:31,620 --> 00:13:34,680
those address components are the segment

305
00:13:34,680 --> 00:13:38,399
and the offset again because dos used a

306
00:13:38,399 --> 00:13:41,339
segmented addressing scheme and then the

307
00:13:41,339 --> 00:13:43,760
interrupts address components are saved

308
00:13:43,760 --> 00:13:46,500
to a specific address or a specific

309
00:13:46,500 --> 00:13:49,200
region of memory so it can be two

310
00:13:49,200 --> 00:13:51,420
variables in the data segment or some

311
00:13:51,420 --> 00:13:53,160
other location of memory that's defined

312
00:13:53,160 --> 00:13:55,440
by the virus writer

313
00:13:55,440 --> 00:13:56,040
um

314
00:13:56,040 --> 00:13:58,800
a new interrupt Handler is installed in

315
00:13:58,800 --> 00:14:01,800
the ivt in our Vector table

316
00:14:01,800 --> 00:14:04,620
and then the new interrupt Handler has

317
00:14:04,620 --> 00:14:07,139
added a new interrupt service routine

318
00:14:07,139 --> 00:14:09,899
which concludes by jumping back to the

319
00:14:09,899 --> 00:14:11,700
original address and passing control

320
00:14:11,700 --> 00:14:14,339
back so essentially this whole thing is

321
00:14:14,339 --> 00:14:16,019
creating the illusion that the original

322
00:14:16,019 --> 00:14:18,720
interrupt has proceeded as per usual and

323
00:14:18,720 --> 00:14:20,220
nothing's wrong and nothing's happening

324
00:14:20,220 --> 00:14:21,860
on the system

325
00:14:21,860 --> 00:14:25,380
but in reality there's a system called

326
00:14:25,380 --> 00:14:27,480
that's been hooked and something is

327
00:14:27,480 --> 00:14:29,880
happening so

328
00:14:29,880 --> 00:14:34,680
okay so on this uh let's see if this

329
00:14:34,680 --> 00:14:36,720
one there we go okay so this is a demo

330
00:14:36,720 --> 00:14:40,740
TSR I wrote it hooks interrupt 21 and it

331
00:14:40,740 --> 00:14:42,779
only triggers when a call is made to the

332
00:14:42,779 --> 00:14:45,959
exec program uh like when a user is

333
00:14:45,959 --> 00:14:48,959
launching a program from command.com uh

334
00:14:48,959 --> 00:14:51,300
the sub function for in 21 there is 4B

335
00:14:51,300 --> 00:14:53,940
so it's checking if 4B is the sub

336
00:14:53,940 --> 00:14:55,980
function that's being called

337
00:14:55,980 --> 00:14:58,019
um if a call to in 21 is made with any

338
00:14:58,019 --> 00:15:00,660
other sub function the th the TSR just

339
00:15:00,660 --> 00:15:03,839
redirects back to the saved interrupt 21

340
00:15:03,839 --> 00:15:08,040
ISR but otherwise a user is greeted with

341
00:15:08,040 --> 00:15:12,000
a screen in 256 VGA Graphics mode a

342
00:15:12,000 --> 00:15:14,399
modified color palette and it results in

343
00:15:14,399 --> 00:15:16,199
a terminal aesthetic that

344
00:15:16,199 --> 00:15:18,240
vaguely is reminiscent of a commodore

345
00:15:18,240 --> 00:15:22,579
64. so this demo TSR doesn't do anything

346
00:15:22,579 --> 00:15:25,440
nefarious it doesn't have file infection

347
00:15:25,440 --> 00:15:26,540
routines

348
00:15:26,540 --> 00:15:29,279
not really anything too fun other than

349
00:15:29,279 --> 00:15:32,459
the fun color scheme but it's a nice

350
00:15:32,459 --> 00:15:34,500
template for understanding how to modify

351
00:15:34,500 --> 00:15:36,839
control flow of critical system calls

352
00:15:36,839 --> 00:15:39,959
and how to use the TSR as a means of

353
00:15:39,959 --> 00:15:43,880
more persistent storage of a payload

354
00:15:45,360 --> 00:15:46,440
okay

355
00:15:46,440 --> 00:15:49,320
so uh we're gonna be talking now about

356
00:15:49,320 --> 00:15:52,079
uh the Whirlwind tour of ms-doscom

357
00:15:52,079 --> 00:15:54,180
programs so

358
00:15:54,180 --> 00:15:55,680
uh there were different types of

359
00:15:55,680 --> 00:15:59,399
executable files in MS-DOS uh com exe

360
00:15:59,399 --> 00:16:00,360
bat

361
00:16:00,360 --> 00:16:03,540
Etc uh but com program com programs

362
00:16:03,540 --> 00:16:06,660
specifically are very interesting uh for

363
00:16:06,660 --> 00:16:08,639
MS-DOS malware because they had a very

364
00:16:08,639 --> 00:16:10,560
unique file structure and unique

365
00:16:10,560 --> 00:16:14,279
features that presented a nice Vector

366
00:16:14,279 --> 00:16:18,120
for virus writers so uh com programs fit

367
00:16:18,120 --> 00:16:21,000
the tiny memory model of the Intel 8086

368
00:16:21,000 --> 00:16:23,579
Isa they always have an origin of 100

369
00:16:23,579 --> 00:16:26,880
which is the 100 and hex so it's 256

370
00:16:26,880 --> 00:16:30,000
bytes it's which is the length of the

371
00:16:30,000 --> 00:16:33,420
program segment prefix or PSP which is a

372
00:16:33,420 --> 00:16:35,579
data structure that is at the beginning

373
00:16:35,579 --> 00:16:37,980
of every com program uh I'm not going to

374
00:16:37,980 --> 00:16:40,259
get into that data structure here but

375
00:16:40,259 --> 00:16:42,380
just know that it exists

376
00:16:42,380 --> 00:16:45,720
and then all the segment registers in a

377
00:16:45,720 --> 00:16:48,079
column program contained the same

378
00:16:48,079 --> 00:16:50,759
contain the same value so code and data

379
00:16:50,759 --> 00:16:52,800
are mixed together there's no header

380
00:16:52,800 --> 00:16:54,779
there's no relook information and

381
00:16:54,779 --> 00:16:56,519
there's no identifying information

382
00:16:56,519 --> 00:17:00,120
really it's essentially no parents no

383
00:17:00,120 --> 00:17:01,199
rules

384
00:17:01,199 --> 00:17:04,020
well okay not quite

385
00:17:04,020 --> 00:17:07,140
so uh a few important roles for com

386
00:17:07,140 --> 00:17:08,939
programs is that there was a maximum

387
00:17:08,939 --> 00:17:13,199
size which is roughly 63 kilobytes

388
00:17:13,199 --> 00:17:15,839
including like the length of the PSR or

389
00:17:15,839 --> 00:17:17,900
the PSP sorry

390
00:17:17,900 --> 00:17:21,359
and com programs resided in memory as an

391
00:17:21,359 --> 00:17:24,419
absolute memory image and by resides

392
00:17:24,419 --> 00:17:27,419
here we mean is loaded into and a single

393
00:17:27,419 --> 00:17:30,780
assignment of memory is 64 kilobytes

394
00:17:30,780 --> 00:17:33,240
and again importantly um because it's

395
00:17:33,240 --> 00:17:36,299
MS-DOS they're using com programs or

396
00:17:36,299 --> 00:17:38,760
using a segmented addressing scheme of

397
00:17:38,760 --> 00:17:41,600
16-bit of the 16-bit architecture

398
00:17:41,600 --> 00:17:45,480
so we have uh 16-bit real mode but we're

399
00:17:45,480 --> 00:17:47,280
accessing addresses in a range of a

400
00:17:47,280 --> 00:17:50,220
20-bit address space which is done using

401
00:17:50,220 --> 00:17:53,360
this segment offset pair

402
00:17:54,660 --> 00:17:56,220
okay

403
00:17:56,220 --> 00:17:58,760
so

404
00:18:08,820 --> 00:18:11,280
all right so uh now we have all of our

405
00:18:11,280 --> 00:18:12,960
our groundwork covered to understand

406
00:18:12,960 --> 00:18:16,200
some of the some of the details of uh

407
00:18:16,200 --> 00:18:19,020
very cool malware of this era so I've

408
00:18:19,020 --> 00:18:21,780
called this uh greatest hits of MS-DOS

409
00:18:21,780 --> 00:18:25,380
malware or not just a pretty payload

410
00:18:25,380 --> 00:18:27,419
um and the reason for that is one of The

411
00:18:27,419 --> 00:18:30,240
Inspirations for at least this part of

412
00:18:30,240 --> 00:18:31,799
the talk

413
00:18:31,799 --> 00:18:33,660
came from something that someone said to

414
00:18:33,660 --> 00:18:36,240
me uh rather offhandedly when I was

415
00:18:36,240 --> 00:18:38,820
describing this project

416
00:18:38,820 --> 00:18:40,440
um

417
00:18:40,440 --> 00:18:43,140
I explained that I was reversing MS-DOS

418
00:18:43,140 --> 00:18:44,160
malware

419
00:18:44,160 --> 00:18:48,660
and they said oh the 80s you mean when

420
00:18:48,660 --> 00:18:50,760
malware was just about drawing pretty

421
00:18:50,760 --> 00:18:52,500
pictures

422
00:18:52,500 --> 00:18:58,020
so here's um a demo of one of those

423
00:18:58,020 --> 00:19:03,720
uh so this idea isn't wrong uh entirely

424
00:19:03,720 --> 00:19:05,940
it's not entirely wrong there's a

425
00:19:05,940 --> 00:19:09,000
kernel of truth to it uh there were a

426
00:19:09,000 --> 00:19:11,039
lot of viruses of this era that focused

427
00:19:11,039 --> 00:19:14,640
heavily on uh graphical tricks and also

428
00:19:14,640 --> 00:19:16,320
that took great pride in their graphical

429
00:19:16,320 --> 00:19:17,640
mastery

430
00:19:17,640 --> 00:19:19,620
and using a virus to draw a pretty

431
00:19:19,620 --> 00:19:20,539
picture

432
00:19:20,539 --> 00:19:25,320
was not uncommon but I think the sample

433
00:19:25,320 --> 00:19:27,600
Walker it encapsulates that pretty

434
00:19:27,600 --> 00:19:28,760
nicely

435
00:19:28,760 --> 00:19:32,400
because it's it's absurd it's funny uh

436
00:19:32,400 --> 00:19:34,919
it's maybe annoying to a user but it's

437
00:19:34,919 --> 00:19:37,260
relatively benign and not terribly

438
00:19:37,260 --> 00:19:38,580
destructive

439
00:19:38,580 --> 00:19:41,820
so because of this uh this conception a

440
00:19:41,820 --> 00:19:44,460
lot of people consider these viruses not

441
00:19:44,460 --> 00:19:46,460
very sophisticated not very Advanced

442
00:19:46,460 --> 00:19:50,600
which is frankly a mistake

443
00:19:51,179 --> 00:19:53,340
there we go

444
00:19:53,340 --> 00:19:55,500
um so in terms of MS-DOS malware

445
00:19:55,500 --> 00:19:58,039
techniques in the miter attack framework

446
00:19:58,039 --> 00:20:01,140
we have all of these this is again a

447
00:20:01,140 --> 00:20:03,480
non-expensive list but wow it's so

448
00:20:03,480 --> 00:20:06,179
boring you wouldn't even know it

449
00:20:06,179 --> 00:20:07,380
um I will just point out that

450
00:20:07,380 --> 00:20:10,080
masquerading was one that I focused on

451
00:20:10,080 --> 00:20:11,880
in particular and I thought was very

452
00:20:11,880 --> 00:20:13,799
interesting especially in the way that

453
00:20:13,799 --> 00:20:16,380
graphical components were used and

454
00:20:16,380 --> 00:20:17,340
leveraged

455
00:20:17,340 --> 00:20:20,400
um as a sort of stealth technique

456
00:20:20,400 --> 00:20:22,200
but

457
00:20:22,200 --> 00:20:24,120
I've created a different Matrix for

458
00:20:24,120 --> 00:20:25,679
describing several of the most common

459
00:20:25,679 --> 00:20:27,780
and most interesting MS-DOS malware

460
00:20:27,780 --> 00:20:28,799
techniques

461
00:20:28,799 --> 00:20:31,679
so we have first classic malware stealth

462
00:20:31,679 --> 00:20:32,820
in persistence

463
00:20:32,820 --> 00:20:35,220
and then also Exquisite graphical

464
00:20:35,220 --> 00:20:37,620
rendering and data manipulation using

465
00:20:37,620 --> 00:20:39,059
system functions

466
00:20:39,059 --> 00:20:41,820
and finally level 10 Savage destruction

467
00:20:41,820 --> 00:20:46,399
of the MBR and or the boot sector

468
00:20:48,080 --> 00:20:51,299
and in terms of the sources that I used

469
00:20:51,299 --> 00:20:53,340
for the virus samples I'm going to be

470
00:20:53,340 --> 00:20:56,039
talking about these are these are a few

471
00:20:56,039 --> 00:20:58,140
of them so primarily I use the VX

472
00:20:58,140 --> 00:21:00,419
underground GitHub they're MS-DOS

473
00:21:00,419 --> 00:21:02,460
malware collection

474
00:21:02,460 --> 00:21:05,280
um I think almost all of the samples in

475
00:21:05,280 --> 00:21:07,440
that collection are just the source

476
00:21:07,440 --> 00:21:09,720
files so the assembly files

477
00:21:09,720 --> 00:21:11,580
um and I'll get to that in a minute what

478
00:21:11,580 --> 00:21:13,440
the process was for for working with

479
00:21:13,440 --> 00:21:14,880
those

480
00:21:14,880 --> 00:21:16,679
um another source was the internet

481
00:21:16,679 --> 00:21:19,380
archives malware Museum

482
00:21:19,380 --> 00:21:21,860
um which was created by Miko hipponen

483
00:21:21,860 --> 00:21:24,419
and an important thing to note here is

484
00:21:24,419 --> 00:21:26,820
that all of the samples there are defang

485
00:21:26,820 --> 00:21:30,600
binaries which is helpful for looking at

486
00:21:30,600 --> 00:21:32,340
some of the graphical components

487
00:21:32,340 --> 00:21:34,559
especially but they're not as uh they're

488
00:21:34,559 --> 00:21:35,820
not as useful for looking at the

489
00:21:35,820 --> 00:21:38,280
malicious functionality especially from

490
00:21:38,280 --> 00:21:40,320
an re or a malware analysis perspective

491
00:21:40,320 --> 00:21:43,200
so if you're interested in that and you

492
00:21:43,200 --> 00:21:45,299
want to look into those it's good to

493
00:21:45,299 --> 00:21:48,480
augment those with the uh with the full

494
00:21:48,480 --> 00:21:49,460
virus

495
00:21:49,460 --> 00:21:52,140
and then in addition I also used the

496
00:21:52,140 --> 00:21:54,900
zine archives on VX underground mostly

497
00:21:54,900 --> 00:21:59,159
the 40 hex and the 29a zine archives and

498
00:21:59,159 --> 00:22:01,080
then also a myriad of knowledgeable

499
00:22:01,080 --> 00:22:04,080
experts who wish to remain anonymous so

500
00:22:04,080 --> 00:22:08,178
so thank you to all of those sources

501
00:22:08,520 --> 00:22:10,500
um

502
00:22:10,500 --> 00:22:13,200
uh

503
00:22:13,200 --> 00:22:16,320
so this is my 16-bit malware re

504
00:22:16,320 --> 00:22:19,500
methodology it's presented as a list but

505
00:22:19,500 --> 00:22:22,980
it of course did not go in terms of the

506
00:22:22,980 --> 00:22:25,620
linear process but I'm gonna I'm just

507
00:22:25,620 --> 00:22:27,480
gonna break down some of these steps a

508
00:22:27,480 --> 00:22:29,580
little bit I started with preliminary

509
00:22:29,580 --> 00:22:32,100
research which meant a lot of reading a

510
00:22:32,100 --> 00:22:33,960
lot of books a lot of combing through

511
00:22:33,960 --> 00:22:35,159
zines

512
00:22:35,159 --> 00:22:38,039
and then uh when looking at the actual

513
00:22:38,039 --> 00:22:40,500
samples uh there's of course static and

514
00:22:40,500 --> 00:22:42,840
dynamic analysis so for static analysis

515
00:22:42,840 --> 00:22:45,500
I was mostly using ra2

516
00:22:45,500 --> 00:22:49,740
I wrote in an R2 plugin for this for

517
00:22:49,740 --> 00:22:52,620
automatically identifying the interrupts

518
00:22:52,620 --> 00:22:54,840
in a sample and then adding annotations

519
00:22:54,840 --> 00:22:56,960
to the disassembly

520
00:22:56,960 --> 00:22:59,520
in addition I used cutter which was

521
00:22:59,520 --> 00:23:03,120
great for when I was too tired to use R2

522
00:23:03,120 --> 00:23:07,200
um and then Ida free version 5.0 which I

523
00:23:07,200 --> 00:23:08,659
found through it

524
00:23:08,659 --> 00:23:12,299
Retro Gaming Forum uh has really good

525
00:23:12,299 --> 00:23:15,840
16-bit support So rip to that version

526
00:23:15,840 --> 00:23:18,539
but it's out there

527
00:23:18,539 --> 00:23:20,940
um and then in terms of static analysis

528
00:23:20,940 --> 00:23:24,480
uh as I mentioned previously uh I was

529
00:23:24,480 --> 00:23:26,400
reading a lot of the source files which

530
00:23:26,400 --> 00:23:27,659
were

531
00:23:27,659 --> 00:23:31,320
um all just 8086 assembly the syntax was

532
00:23:31,320 --> 00:23:33,240
specific to a very wide range of

533
00:23:33,240 --> 00:23:35,640
assemblers so we have a few of them here

534
00:23:35,640 --> 00:23:41,299
uh masum tasm fasm 86 the list goes on

535
00:23:41,299 --> 00:23:45,059
and assembling the source for any of

536
00:23:45,059 --> 00:23:46,620
these viruses meant that I had to find

537
00:23:46,620 --> 00:23:50,220
the uh sometimes Arcane and not used any

538
00:23:50,220 --> 00:23:52,559
more assemblers for them which was a fun

539
00:23:52,559 --> 00:23:53,780
process

540
00:23:53,780 --> 00:23:57,480
or making modifications directly and

541
00:23:57,480 --> 00:24:00,000
patching the assembly which is a bit

542
00:24:00,000 --> 00:24:03,179
more involved a bit more tedious

543
00:24:03,179 --> 00:24:05,640
and then in terms of dynamic analysis I

544
00:24:05,640 --> 00:24:08,700
used chemo and free free docs a lot as

545
00:24:08,700 --> 00:24:12,000
well as box and then dosbox but it was

546
00:24:12,000 --> 00:24:15,360
less useful for uh some of the more

547
00:24:15,360 --> 00:24:17,940
involved debugging that I wanted to do

548
00:24:17,940 --> 00:24:21,480
so it's not as flexible but it's also a

549
00:24:21,480 --> 00:24:23,700
helpful tool

550
00:24:23,700 --> 00:24:25,679
um and then there's also

551
00:24:25,679 --> 00:24:28,500
in addition in terms of resources for

552
00:24:28,500 --> 00:24:30,600
analyzing these programs there's a

553
00:24:30,600 --> 00:24:34,260
really good YouTube channel of uh

554
00:24:34,260 --> 00:24:38,100
someone their name is Dan octl1 so I

555
00:24:38,100 --> 00:24:39,419
think it's Dan out of control but

556
00:24:39,419 --> 00:24:42,120
unclear uh but they have a really great

557
00:24:42,120 --> 00:24:45,000
MS-DOS malware playlist so they play a

558
00:24:45,000 --> 00:24:46,620
lot of these samples so that's kind of

559
00:24:46,620 --> 00:24:50,479
cool just to just to watch them

560
00:24:52,080 --> 00:24:55,500
all right so uh so we finally have all

561
00:24:55,500 --> 00:24:57,480
of our background covered and we can

562
00:24:57,480 --> 00:24:59,340
look at these samples now

563
00:24:59,340 --> 00:25:01,260
so uh the first one I'm going to be

564
00:25:01,260 --> 00:25:04,460
talking about is crash

565
00:25:04,580 --> 00:25:07,200
so crash is

566
00:25:07,200 --> 00:25:09,179
um I think it's a nice one to start out

567
00:25:09,179 --> 00:25:11,340
with it has this infinite Loop of a

568
00:25:11,340 --> 00:25:13,679
pretty animation uh writes to the VGA

569
00:25:13,679 --> 00:25:17,340
buffer with Peak and poke and it renders

570
00:25:17,340 --> 00:25:18,840
the computer unusable so you have to

571
00:25:18,840 --> 00:25:20,179
reboot it

572
00:25:20,179 --> 00:25:23,159
it's less destructive compared to other

573
00:25:23,159 --> 00:25:26,940
viruses that used similar VGA buffer

574
00:25:26,940 --> 00:25:29,039
manipulation techniques

575
00:25:29,039 --> 00:25:31,320
but it's very pretty

576
00:25:31,320 --> 00:25:33,720
so I'm going to play that now but I do

577
00:25:33,720 --> 00:25:36,419
have a mild flashing lights warning so

578
00:25:36,419 --> 00:25:38,100
um I'll give a countdown before I play

579
00:25:38,100 --> 00:25:39,419
the video and then I'll just tell

580
00:25:39,419 --> 00:25:42,360
everyone when it's over so I'm going to

581
00:25:42,360 --> 00:25:48,260
play the video in three two one

582
00:25:48,779 --> 00:25:51,260
so

583
00:25:53,460 --> 00:25:56,600
so it's fun

584
00:25:58,380 --> 00:26:02,520
okay so up next we have cuckoo

585
00:26:02,520 --> 00:26:05,100
uh cuckoo is

586
00:26:05,100 --> 00:26:07,980
in a similar vein of being uh very

587
00:26:07,980 --> 00:26:10,919
graphical but also a bit devious so it

588
00:26:10,919 --> 00:26:13,380
searches the file system for exe files

589
00:26:13,380 --> 00:26:15,600
and com files and then it overwrites

590
00:26:15,600 --> 00:26:17,760
them with the payload and the payload

591
00:26:17,760 --> 00:26:19,919
essentially when it executes it just

592
00:26:19,919 --> 00:26:21,659
displays this obscene collection of

593
00:26:21,659 --> 00:26:24,679
boxes that say cuckoo over and over

594
00:26:24,679 --> 00:26:27,779
renders the command prompt unusable you

595
00:26:27,779 --> 00:26:29,460
have to reboot the machine

596
00:26:29,460 --> 00:26:32,100
and then I have a fun depending on how

597
00:26:32,100 --> 00:26:35,820
you define fun fact here cuckoo one

598
00:26:35,820 --> 00:26:38,159
definition in Russian means peekaboo so

599
00:26:38,159 --> 00:26:39,900
when it's going through it's searching

600
00:26:39,900 --> 00:26:41,760
the file system and every time it finds

601
00:26:41,760 --> 00:26:44,039
a Target file that it can infect it

602
00:26:44,039 --> 00:26:46,080
displays a message of peekaboo I found

603
00:26:46,080 --> 00:26:51,000
you uh which is Savage

604
00:26:51,000 --> 00:26:54,900
so uh here's a quick video of it

605
00:26:54,900 --> 00:26:57,179
just

606
00:26:57,179 --> 00:26:59,520
you know

607
00:26:59,520 --> 00:27:02,600
I admire it

608
00:27:03,659 --> 00:27:06,480
okay um our next one is verdem

609
00:27:06,480 --> 00:27:10,080
uh verdem is pretty pretty basic uh

610
00:27:10,080 --> 00:27:11,580
there's a lot of text here but the

611
00:27:11,580 --> 00:27:13,919
important things to note are that it's a

612
00:27:13,919 --> 00:27:15,720
demo virus that was written by Ralph

613
00:27:15,720 --> 00:27:19,919
Berger so uh the author same uh same

614
00:27:19,919 --> 00:27:21,600
virus that I had a screenshot of earlier

615
00:27:21,600 --> 00:27:24,720
and he wrote a book that I did buy off

616
00:27:24,720 --> 00:27:27,240
Amazon called computer viruses and data

617
00:27:27,240 --> 00:27:29,640
protection unclassified where he goes

618
00:27:29,640 --> 00:27:34,380
through the techniques um and the uh

619
00:27:34,380 --> 00:27:36,179
the

620
00:27:36,179 --> 00:27:39,000
details of his virus implementation so

621
00:27:39,000 --> 00:27:40,980
the important ones to note of this long

622
00:27:40,980 --> 00:27:44,340
list are it's a file infector it infects

623
00:27:44,340 --> 00:27:46,980
com files it doesn't try to Target

624
00:27:46,980 --> 00:27:50,159
command.com based on how the directory

625
00:27:50,159 --> 00:27:53,520
is structured and when it infects a

626
00:27:53,520 --> 00:27:54,960
program it adds an additional

627
00:27:54,960 --> 00:27:58,260
functionality which is a bizarre

628
00:27:58,260 --> 00:28:00,480
guessing game and the difficulty level

629
00:28:00,480 --> 00:28:02,940
of the guessing game for numbers is

630
00:28:02,940 --> 00:28:06,360
dependent on the virus generation so it

631
00:28:06,360 --> 00:28:08,400
goes up to nine generations and

632
00:28:08,400 --> 00:28:10,679
presumably gets more difficult after

633
00:28:10,679 --> 00:28:13,500
each duration so

634
00:28:13,500 --> 00:28:15,360
uh this is what it looks like when it's

635
00:28:15,360 --> 00:28:18,720
executed uh so you have this nice little

636
00:28:18,720 --> 00:28:20,880
display of your programs are struck by

637
00:28:20,880 --> 00:28:23,460
verdem generation one

638
00:28:23,460 --> 00:28:25,460
um

639
00:28:25,740 --> 00:28:30,120
it's not as cool but it's a nice demo

640
00:28:30,120 --> 00:28:32,279
all right so now we're getting into the

641
00:28:32,279 --> 00:28:34,200
more fun ones um

642
00:28:34,200 --> 00:28:36,240
so this is stoned

643
00:28:36,240 --> 00:28:39,480
uh stoned is a pretty famous boot kit it

644
00:28:39,480 --> 00:28:42,240
inspired a range of related boot kits in

645
00:28:42,240 --> 00:28:44,340
the same virus family

646
00:28:44,340 --> 00:28:45,600
um

647
00:28:45,600 --> 00:28:48,240
those other boot kits had varying levels

648
00:28:48,240 --> 00:28:51,059
of sophistication so I say here

649
00:28:51,059 --> 00:28:53,580
Michelangelo what an absolute flop and I

650
00:28:53,580 --> 00:28:55,260
stand by that

651
00:28:55,260 --> 00:28:57,120
um because Michelangelo essentially just

652
00:28:57,120 --> 00:29:01,320
uh copy pasted stoned and added a tiny

653
00:29:01,320 --> 00:29:03,240
logic bomb that triggered on

654
00:29:03,240 --> 00:29:05,220
Michelangelo's birthday and then didn't

655
00:29:05,220 --> 00:29:07,320
do anything cool graphically so like

656
00:29:07,320 --> 00:29:10,020
what a wasted opportunity

657
00:29:10,020 --> 00:29:14,240
um but stoned the origin of Michelangelo

658
00:29:14,240 --> 00:29:17,460
was able to infect boot sectors of

659
00:29:17,460 --> 00:29:19,500
multiple different storage format

660
00:29:19,500 --> 00:29:21,240
multiple different formats of storage

661
00:29:21,240 --> 00:29:23,520
media so it had routines both for

662
00:29:23,520 --> 00:29:25,919
infecting floppies and for hard drives

663
00:29:25,919 --> 00:29:27,960
and then it also had some nice stealth

664
00:29:27,960 --> 00:29:29,059
routines

665
00:29:29,059 --> 00:29:31,919
and techniques so it saved the original

666
00:29:31,919 --> 00:29:34,320
MBR in a

667
00:29:34,320 --> 00:29:36,419
I say here hidden area of the disk it

668
00:29:36,419 --> 00:29:39,899
wasn't hidden but it was a known section

669
00:29:39,899 --> 00:29:41,240
um or it was a known group of sectors

670
00:29:41,240 --> 00:29:44,159
that would be free because of where the

671
00:29:44,159 --> 00:29:48,360
MBR was stored based on how fdisk worked

672
00:29:48,360 --> 00:29:50,460
um so it saved the MBR in one of those

673
00:29:50,460 --> 00:29:54,659
sectors and then it also had a a TSR

674
00:29:54,659 --> 00:29:56,880
functionality where it would spoof valid

675
00:29:56,880 --> 00:29:59,880
interrupt 13 reads and writes to the

676
00:29:59,880 --> 00:30:02,100
disk that was infected

677
00:30:02,100 --> 00:30:05,039
and of course it had uh the lovely logic

678
00:30:05,039 --> 00:30:08,580
bomb which displayed you can see on the

679
00:30:08,580 --> 00:30:11,580
right there the famous your PC is now

680
00:30:11,580 --> 00:30:13,919
stoned message

681
00:30:13,919 --> 00:30:14,700
um

682
00:30:14,700 --> 00:30:17,159
and the logic bomb part of that was that

683
00:30:17,159 --> 00:30:19,320
it only uh it was only displayed one out

684
00:30:19,320 --> 00:30:22,260
of every eight times which was uh

685
00:30:22,260 --> 00:30:24,659
determined based on the PC timer so

686
00:30:24,659 --> 00:30:27,919
interrupt 1C

687
00:30:28,200 --> 00:30:30,620
okay

688
00:30:36,059 --> 00:30:38,480
okay

689
00:30:43,860 --> 00:30:45,720
all right um

690
00:30:45,720 --> 00:30:51,620
so the next one is uh tequila

691
00:30:51,659 --> 00:30:55,200
so tequila combines a lot of the

692
00:30:55,200 --> 00:30:56,640
different techniques that I've talked

693
00:30:56,640 --> 00:30:59,159
about so it has a graphical component it

694
00:30:59,159 --> 00:31:01,980
has a boot kit component it has some TSR

695
00:31:01,980 --> 00:31:04,799
functionality and it has some fun

696
00:31:04,799 --> 00:31:08,399
stealth and then also a multi-part

697
00:31:08,399 --> 00:31:10,620
payload so has this nice fractal

698
00:31:10,620 --> 00:31:12,919
animation which is a mandelbrot

699
00:31:12,919 --> 00:31:16,200
but it's also Savage because it infects

700
00:31:16,200 --> 00:31:19,020
the MBR partition table it installs some

701
00:31:19,020 --> 00:31:23,159
handlers to run as a TSR and then the

702
00:31:23,159 --> 00:31:24,360
most interesting thing I think about

703
00:31:24,360 --> 00:31:28,159
this one is that at the top you can see

704
00:31:28,159 --> 00:31:31,440
there's uh there's this line execute

705
00:31:31,440 --> 00:31:35,580
move ax fe03 and 21 key to go on so what

706
00:31:35,580 --> 00:31:36,840
is that

707
00:31:36,840 --> 00:31:40,440
well it's a multi-part payload that

708
00:31:40,440 --> 00:31:43,559
requires user interaction so if you run

709
00:31:43,559 --> 00:31:46,260
this in debug mode and you enter uh

710
00:31:46,260 --> 00:31:48,179
enter those instructions and you run it

711
00:31:48,179 --> 00:31:51,200
it'll reveal

712
00:31:51,659 --> 00:31:53,340
welcome to tea Tequila's latest

713
00:31:53,340 --> 00:31:57,179
production contact T tequila Loving

714
00:31:57,179 --> 00:31:59,159
Thoughts to Linda beer and Tequila

715
00:31:59,159 --> 00:32:01,080
forever

716
00:32:01,080 --> 00:32:05,720
way to go Linda like Legend

717
00:32:05,820 --> 00:32:07,440
okay

718
00:32:07,440 --> 00:32:10,559
and uh now we're coming up on our

719
00:32:10,559 --> 00:32:13,980
greatest hits uh Marine which is uh

720
00:32:13,980 --> 00:32:16,740
probably one of my favorites so

721
00:32:16,740 --> 00:32:21,779
Marine is uh in in my classification of

722
00:32:21,779 --> 00:32:24,659
ernestos malware uh I describe things as

723
00:32:24,659 --> 00:32:26,460
level 10 Savage and this is level 10

724
00:32:26,460 --> 00:32:28,200
Savage

725
00:32:28,200 --> 00:32:30,360
um so it has a few different payloads

726
00:32:30,360 --> 00:32:32,640
each trigger based on the conditions of

727
00:32:32,640 --> 00:32:34,919
different logic bombs but the most

728
00:32:34,919 --> 00:32:37,919
brutal one uh triggers in June and it

729
00:32:37,919 --> 00:32:40,260
shreds the MBR which is not a very

730
00:32:40,260 --> 00:32:41,700
technical term

731
00:32:41,700 --> 00:32:44,159
um meaning it encrypts the drive

732
00:32:44,159 --> 00:32:46,919
uh and then there's a at the bottom here

733
00:32:46,919 --> 00:32:49,500
when it's doing that specific payload

734
00:32:49,500 --> 00:32:51,059
when it's when that payload is triggered

735
00:32:51,059 --> 00:32:54,720
and it's executing uh it has this fun

736
00:32:54,720 --> 00:32:57,299
boat animation and at the bottom of

737
00:32:57,299 --> 00:33:01,020
Siena Mori is uh in Russian it means

738
00:33:01,020 --> 00:33:02,820
essentially everyone to the ocean or

739
00:33:02,820 --> 00:33:06,120
everyone on the sea but the vibe is

740
00:33:06,120 --> 00:33:07,440
basically like

741
00:33:07,440 --> 00:33:09,840
let's go to the beach beach

742
00:33:09,840 --> 00:33:14,779
so we have Nicki Minaj TSR icon

743
00:33:15,360 --> 00:33:16,320
foreign

744
00:33:16,320 --> 00:33:19,620
and this is what it's doing when it's

745
00:33:19,620 --> 00:33:22,500
when it's executing so

746
00:33:22,500 --> 00:33:25,320
um in terms of graphical components that

747
00:33:25,320 --> 00:33:27,840
employs stealth if a user is presented

748
00:33:27,840 --> 00:33:30,000
with this and it's running on their

749
00:33:30,000 --> 00:33:31,260
machine they're probably not going to

750
00:33:31,260 --> 00:33:32,220
think it's

751
00:33:32,220 --> 00:33:35,279
that bad right like it's just a boat

752
00:33:35,279 --> 00:33:36,899
animation maybe they don't understand

753
00:33:36,899 --> 00:33:41,479
the words at the bottom but it's fine

754
00:33:42,140 --> 00:33:45,179
everything's fine

755
00:33:45,179 --> 00:33:47,100
nothing bad is happening to the drive

756
00:33:47,100 --> 00:33:48,779
right now

757
00:33:48,779 --> 00:33:52,159
we just have our boat on the ocean

758
00:33:53,039 --> 00:33:56,340
but in reality uh here's the call graph

759
00:33:56,340 --> 00:33:58,559
of the function that's encrypting the

760
00:33:58,559 --> 00:34:02,480
drive this is a screenshot from cutter

761
00:34:02,480 --> 00:34:05,100
and this also important to note this

762
00:34:05,100 --> 00:34:06,600
isn't the global call graph so this is

763
00:34:06,600 --> 00:34:09,080
just the call graph for this function

764
00:34:09,080 --> 00:34:11,520
and again the virus has several

765
00:34:11,520 --> 00:34:15,060
different payloads so depending on if

766
00:34:15,060 --> 00:34:16,859
you're in June or you're executing it

767
00:34:16,859 --> 00:34:18,599
when it's in June

768
00:34:18,599 --> 00:34:19,320
um

769
00:34:19,320 --> 00:34:21,239
you might have a different payload that

770
00:34:21,239 --> 00:34:24,060
has a similarly very complex function

771
00:34:24,060 --> 00:34:27,359
call graph and so each of these show the

772
00:34:27,359 --> 00:34:29,520
complexity and the sophistication of

773
00:34:29,520 --> 00:34:31,619
these viruses

774
00:34:31,619 --> 00:34:32,159
um

775
00:34:32,159 --> 00:34:35,040
in addition to that Marine is

776
00:34:35,040 --> 00:34:36,780
again like I said one of my favorites

777
00:34:36,780 --> 00:34:38,099
because

778
00:34:38,099 --> 00:34:41,399
every part of it is kind of just showing

779
00:34:41,399 --> 00:34:44,639
off the skills of the VX writers

780
00:34:44,639 --> 00:34:46,679
um so rather than doing things the most

781
00:34:46,679 --> 00:34:48,179
straightforward way or the most common

782
00:34:48,179 --> 00:34:49,260
way

783
00:34:49,260 --> 00:34:51,899
um even in terms of techniques used by

784
00:34:51,899 --> 00:34:55,560
VX writers of this time it's not using

785
00:34:55,560 --> 00:34:58,440
common interrupts like in 21 that

786
00:34:58,440 --> 00:35:01,260
frequently it's doing direct

787
00:35:01,260 --> 00:35:04,800
manipulation of relevant functions via

788
00:35:04,800 --> 00:35:08,099
the i o ports and that includes both for

789
00:35:08,099 --> 00:35:10,260
the graphics routines and for the more

790
00:35:10,260 --> 00:35:12,300
nefarious routines

791
00:35:12,300 --> 00:35:15,480
so there's stealth there's I guess what

792
00:35:15,480 --> 00:35:17,640
you could consider a form of code

793
00:35:17,640 --> 00:35:20,099
obfuscation because they're just using

794
00:35:20,099 --> 00:35:23,160
very complex tricks in their assembly

795
00:35:23,160 --> 00:35:24,540
and

796
00:35:24,540 --> 00:35:27,300
respect it it's cool

797
00:35:27,300 --> 00:35:29,900
it's the boat

798
00:35:29,940 --> 00:35:32,720
Okay so

799
00:35:38,280 --> 00:35:40,320
okay

800
00:35:40,320 --> 00:35:43,079
uh so now we're coming back to our

801
00:35:43,079 --> 00:35:45,900
original question of why study an end of

802
00:35:45,900 --> 00:35:48,680
life OS

803
00:35:49,140 --> 00:35:52,260
well I think uh it's pretty well summed

804
00:35:52,260 --> 00:35:54,720
up here by uh David Byrne and the

805
00:35:54,720 --> 00:35:56,520
Talking Heads in their music video once

806
00:35:56,520 --> 00:35:58,980
in a lifetime which is malware same as

807
00:35:58,980 --> 00:36:01,079
it ever was

808
00:36:01,079 --> 00:36:04,920
uh so just a few uh connections that I

809
00:36:04,920 --> 00:36:06,780
want to highlight there are a lot of

810
00:36:06,780 --> 00:36:09,660
foundational techniques of uh the

811
00:36:09,660 --> 00:36:11,820
malware masters of the 80s and 90s that

812
00:36:11,820 --> 00:36:16,020
inform malware of the present day so we

813
00:36:16,020 --> 00:36:17,760
have Legacy BIOS interrupts that were

814
00:36:17,760 --> 00:36:19,260
featured prominently in malware

815
00:36:19,260 --> 00:36:22,200
especially malware like boot kits up

816
00:36:22,200 --> 00:36:23,640
through later versions of Windows

817
00:36:23,640 --> 00:36:25,980
especially through Windows 7 before the

818
00:36:25,980 --> 00:36:28,380
switch to uafi

819
00:36:28,380 --> 00:36:30,560
um one relevant case study is not petia

820
00:36:30,560 --> 00:36:33,900
so again there's the occurrence of the

821
00:36:33,900 --> 00:36:37,920
n13 bios interop for disk Services

822
00:36:37,920 --> 00:36:39,920
um

823
00:36:42,320 --> 00:36:44,660
uh okay

824
00:36:44,660 --> 00:36:48,720
and while the switch to UEFI firmware or

825
00:36:48,720 --> 00:36:50,579
the UEFI firmware boot process from the

826
00:36:50,579 --> 00:36:52,339
Legacy boot process

827
00:36:52,339 --> 00:36:54,660
which included the Legacy BIOS

828
00:36:54,660 --> 00:36:57,060
interrupts really changed the landscape

829
00:36:57,060 --> 00:37:00,000
for boot kits particularly Windows boot

830
00:37:00,000 --> 00:37:02,160
kits modern boot kits still use

831
00:37:02,160 --> 00:37:04,859
techniques that were developed by the

832
00:37:04,859 --> 00:37:07,560
earliest boot kit writers in the BSI

833
00:37:07,560 --> 00:37:10,500
Heyday one interesting example actually

834
00:37:10,500 --> 00:37:11,640
is that

835
00:37:11,640 --> 00:37:14,640
the first PC virus

836
00:37:14,640 --> 00:37:17,460
um it's called PC virus

837
00:37:17,460 --> 00:37:20,220
because there were viruses that infected

838
00:37:20,220 --> 00:37:22,920
machines prior to this but it was brain

839
00:37:22,920 --> 00:37:25,800
in 1986 which was also a boot kit and

840
00:37:25,800 --> 00:37:27,420
then when it was activated it had a

841
00:37:27,420 --> 00:37:31,320
message about the virus authors but the

842
00:37:31,320 --> 00:37:34,500
techniques used by brain back in 1986

843
00:37:34,500 --> 00:37:38,480
did things like saving the original MBR

844
00:37:38,480 --> 00:37:43,800
doing spoofing of uh in 13 for reads and

845
00:37:43,800 --> 00:37:44,960
writes

846
00:37:44,960 --> 00:37:48,359
and some of those techniques of saving

847
00:37:48,359 --> 00:37:51,180
an original MBR or saving an original

848
00:37:51,180 --> 00:37:52,980
piece of

849
00:37:52,980 --> 00:37:56,520
memory that you want to alter are still

850
00:37:56,520 --> 00:37:59,220
obviously used by boot kits of today

851
00:37:59,220 --> 00:38:02,419
and malware of today

852
00:38:03,380 --> 00:38:07,140
and then a few other techniques

853
00:38:07,140 --> 00:38:11,040
so in the same way that the ivt was a

854
00:38:11,040 --> 00:38:13,140
data structure that was leveraged for

855
00:38:13,140 --> 00:38:15,900
persistent storage of malicious code and

856
00:38:15,900 --> 00:38:19,619
also our viruses the IDT was also

857
00:38:19,619 --> 00:38:22,140
leveraged in the later Windows length

858
00:38:22,140 --> 00:38:24,140
Windows threat landscape

859
00:38:24,140 --> 00:38:27,060
so I say here different names for the

860
00:38:27,060 --> 00:38:30,420
same thing which isn't a robust

861
00:38:30,420 --> 00:38:32,820
anti-virus strategy it's a Death Cab for

862
00:38:32,820 --> 00:38:36,780
QD track but reusing the ivt in its new

863
00:38:36,780 --> 00:38:39,780
iteration for similar malicious activity

864
00:38:39,780 --> 00:38:42,119
is a really interesting way to see the

865
00:38:42,119 --> 00:38:43,920
lineage of these viruses and their

866
00:38:43,920 --> 00:38:45,960
techniques

867
00:38:45,960 --> 00:38:48,660
um and one prominent example very

868
00:38:48,660 --> 00:38:51,500
specifically in terms of using the IDT

869
00:38:51,500 --> 00:38:54,240
was brovnix which is a boot kit from

870
00:38:54,240 --> 00:38:58,920
2011 that stored its payload in the IDT

871
00:38:58,920 --> 00:39:02,339
above interrupt 80 in a range of entries

872
00:39:02,339 --> 00:39:04,920
above interrupt 80 which was known to be

873
00:39:04,920 --> 00:39:06,800
typically free

874
00:39:06,800 --> 00:39:10,940
and similarly the ivt above those ranges

875
00:39:10,940 --> 00:39:15,839
was free and was used to store payloads

876
00:39:15,839 --> 00:39:19,380
in earlier 80s and 90s boot kits or 80s

877
00:39:19,380 --> 00:39:22,920
and 90s viruses so

878
00:39:22,920 --> 00:39:25,440
still in 2011 it's manipulating the same

879
00:39:25,440 --> 00:39:27,839
data structures and leveraging them to

880
00:39:27,839 --> 00:39:30,740
pretty powerful effect

881
00:39:30,740 --> 00:39:34,339
and then also studying Ms sauce malware

882
00:39:34,339 --> 00:39:37,380
can make you inspired to rewrite an old

883
00:39:37,380 --> 00:39:40,500
classic and show that a modern OS can

884
00:39:40,500 --> 00:39:42,119
still be vulnerable to boot process

885
00:39:42,119 --> 00:39:44,099
exploits because of its backwards

886
00:39:44,099 --> 00:39:46,140
compatibility with the Legacy biospute

887
00:39:46,140 --> 00:39:47,420
process

888
00:39:47,420 --> 00:39:51,180
and going back to stoned the stoned boot

889
00:39:51,180 --> 00:39:53,640
kit was Rewritten and presented at black

890
00:39:53,640 --> 00:39:58,379
hat 2012 to show how

891
00:39:58,680 --> 00:40:00,119
um

892
00:40:00,119 --> 00:40:03,180
to show how that that Legacy BIOS

893
00:40:03,180 --> 00:40:05,820
process was still Legacy BIOS boot

894
00:40:05,820 --> 00:40:08,520
process was still a really important and

895
00:40:08,520 --> 00:40:11,660
vulnerable Target

896
00:40:12,500 --> 00:40:16,640
so while the IBT got upgraded to the IDT

897
00:40:16,640 --> 00:40:20,040
it remained a useful data structure and

898
00:40:20,040 --> 00:40:21,900
you could hook system calls on later

899
00:40:21,900 --> 00:40:24,720
versions of Windows via the IDT in

900
00:40:24,720 --> 00:40:26,339
similar ways that you could do it with

901
00:40:26,339 --> 00:40:28,260
the IBT

902
00:40:28,260 --> 00:40:31,859
um and the IDT and the ssdt so system

903
00:40:31,859 --> 00:40:34,260
service descriptor table were both used

904
00:40:34,260 --> 00:40:37,079
to this effect so you could hook the

905
00:40:37,079 --> 00:40:39,260
ssdt and the IDT

906
00:40:39,260 --> 00:40:41,820
in similar ways that you could hook the

907
00:40:41,820 --> 00:40:44,040
ivt in earlier

908
00:40:44,040 --> 00:40:47,779
um in earlier viruses

909
00:40:48,480 --> 00:40:51,359
um and then finally I just said looking

910
00:40:51,359 --> 00:40:53,640
into the past can give you ideas for

911
00:40:53,640 --> 00:40:55,619
where to search for inspiration next

912
00:40:55,619 --> 00:40:57,839
um so I think a lot of the techniques

913
00:40:57,839 --> 00:41:00,300
that were developed in this era were

914
00:41:00,300 --> 00:41:03,240
very sophisticated very interesting

915
00:41:03,240 --> 00:41:07,140
um and can be a nice place to look at if

916
00:41:07,140 --> 00:41:09,780
you're feeling bored or stuck with

917
00:41:09,780 --> 00:41:11,820
something that you're working on in

918
00:41:11,820 --> 00:41:15,839
exploit Dev or malware analysis or any

919
00:41:15,839 --> 00:41:18,859
area of security really

920
00:41:21,180 --> 00:41:23,598
okay

921
00:41:32,339 --> 00:41:34,940
so loud

922
00:41:36,300 --> 00:41:40,020
uh okay so where to now I have a repo

923
00:41:40,020 --> 00:41:41,099
and GitHub

924
00:41:41,099 --> 00:41:43,560
with sample com programs learning

925
00:41:43,560 --> 00:41:46,400
resources a guide for setting up a

926
00:41:46,400 --> 00:41:48,740
16-bit reversing lab

927
00:41:48,740 --> 00:41:51,380
so you can check that out

928
00:41:51,380 --> 00:41:54,599
I also have some deep dive blog posts on

929
00:41:54,599 --> 00:41:57,839
my website so exploring similar or

930
00:41:57,839 --> 00:42:01,920
exploring specific subtopics so tsrs in

931
00:42:01,920 --> 00:42:04,140
a lot more depth as well as early boot

932
00:42:04,140 --> 00:42:05,180
kits

933
00:42:05,180 --> 00:42:07,740
I've also written an R2 plugin like I

934
00:42:07,740 --> 00:42:11,119
mentioned for reversing 16-bit binaries

935
00:42:11,119 --> 00:42:14,359
so if you are interested in using that

936
00:42:14,359 --> 00:42:16,920
feel free to contact me on the socials

937
00:42:16,920 --> 00:42:19,859
or talk to me after

938
00:42:19,859 --> 00:42:21,420
um and then finally I have a playlist

939
00:42:21,420 --> 00:42:24,480
for when you're reversing 16-bit malware

940
00:42:24,480 --> 00:42:25,920
so

941
00:42:25,920 --> 00:42:30,180
and I believe if that's it

942
00:42:30,180 --> 00:42:32,160
cool

943
00:42:32,160 --> 00:42:35,180
for Nika please

944
00:42:37,220 --> 00:42:39,900
we have roughly eight minutes for

945
00:42:39,900 --> 00:42:42,240
questions

946
00:42:42,240 --> 00:42:45,439
from the audience

947
00:43:10,319 --> 00:43:12,240
you mentioned one of your reasons for

948
00:43:12,240 --> 00:43:13,859
studying this is that it is still

949
00:43:13,859 --> 00:43:16,440
relevant today how completely relevant

950
00:43:16,440 --> 00:43:20,060
is it to modern day viruses

951
00:43:20,400 --> 00:43:22,859
um yeah I think let's see

952
00:43:22,859 --> 00:43:25,380
I mean other than the connections that I

953
00:43:25,380 --> 00:43:27,720
highlighted in some of the earlier

954
00:43:27,720 --> 00:43:29,339
versions of Windows

955
00:43:29,339 --> 00:43:32,040
um I think some of the especially the

956
00:43:32,040 --> 00:43:34,079
bootcut techniques are seeing a

957
00:43:34,079 --> 00:43:36,420
Resurgence I mean especially there's the

958
00:43:36,420 --> 00:43:39,240
Black Lotus UEFI boot kit this year

959
00:43:39,240 --> 00:43:40,920
um and I think for like a number of

960
00:43:40,920 --> 00:43:44,160
years a lot of people in that space were

961
00:43:44,160 --> 00:43:46,079
considering the bootcut era effectively

962
00:43:46,079 --> 00:43:47,579
over

963
00:43:47,579 --> 00:43:50,460
um a lot of virus writers were switching

964
00:43:50,460 --> 00:43:53,040
to Firmware implants and not going after

965
00:43:53,040 --> 00:43:55,800
a boot kit functionality specifically

966
00:43:55,800 --> 00:44:00,780
um but there we are so I think that's

967
00:44:00,780 --> 00:44:03,780
a very strong one in terms of just

968
00:44:03,780 --> 00:44:06,420
seeing the lineage of boot kits from

969
00:44:06,420 --> 00:44:09,319
then until now

970
00:44:09,420 --> 00:44:11,400
I think a lot of the

971
00:44:11,400 --> 00:44:14,160
stealth and persistence techniques uh

972
00:44:14,160 --> 00:44:16,319
it's not a one-to-one but I think

973
00:44:16,319 --> 00:44:21,180
there's sort of a simpler or uh more

974
00:44:21,180 --> 00:44:24,420
condensed version that exists in earlier

975
00:44:24,420 --> 00:44:28,560
virus samples of the 80s and 90s that

976
00:44:28,560 --> 00:44:32,400
grew and developed and can be seen in

977
00:44:32,400 --> 00:44:34,740
malware today

978
00:44:34,740 --> 00:44:37,339
thank you

979
00:44:47,700 --> 00:44:49,500
earlier you had a slide that said

980
00:44:49,500 --> 00:44:51,359
something like reading the source code

981
00:44:51,359 --> 00:44:52,800
for some things

982
00:44:52,800 --> 00:44:55,440
did you ever you mentioned one that I

983
00:44:55,440 --> 00:44:56,940
sound like a professor made it or

984
00:44:56,940 --> 00:44:58,980
someone at University did you ever like

985
00:44:58,980 --> 00:45:00,839
find Historical samples of the source

986
00:45:00,839 --> 00:45:02,400
code for these things or do the old

987
00:45:02,400 --> 00:45:04,140
authors just put them on GitHub in

988
00:45:04,140 --> 00:45:06,980
modern times or something

989
00:45:10,260 --> 00:45:14,099
good question I mean in uh some okay for

990
00:45:14,099 --> 00:45:17,160
some of them uh they published their

991
00:45:17,160 --> 00:45:20,760
samples or they submitted the assembly

992
00:45:20,760 --> 00:45:23,040
files or what have you to zines and a

993
00:45:23,040 --> 00:45:26,160
lot of those scenes are archived so in

994
00:45:26,160 --> 00:45:27,900
terms of looking through

995
00:45:27,900 --> 00:45:30,240
um I mentioned like the 29a and the 40

996
00:45:30,240 --> 00:45:31,940
hexene archives

997
00:45:31,940 --> 00:45:34,980
samples that weren't in the VX

998
00:45:34,980 --> 00:45:37,200
underground GitHub repo

999
00:45:37,200 --> 00:45:39,660
um there's a few that just haven't been

1000
00:45:39,660 --> 00:45:41,040
migrated over that are still in those

1001
00:45:41,040 --> 00:45:42,560
Zine archives

1002
00:45:42,560 --> 00:45:44,880
but some of the viruses that were

1003
00:45:44,880 --> 00:45:46,819
written during that time were written by

1004
00:45:46,819 --> 00:45:48,720
Professionals in the field as

1005
00:45:48,720 --> 00:45:52,020
essentially pocs and then were adopted

1006
00:45:52,020 --> 00:45:53,280
and modified

1007
00:45:53,280 --> 00:45:56,160
um similar to how techniques can be

1008
00:45:56,160 --> 00:45:57,800
leveraged today

1009
00:45:57,800 --> 00:46:02,400
so but the source code for verdem was

1010
00:46:02,400 --> 00:46:05,760
not in uh Ralph Berger's book but he

1011
00:46:05,760 --> 00:46:07,619
talks about it extensively and then that

1012
00:46:07,619 --> 00:46:10,619
was on the GitHub repo for VX

1013
00:46:10,619 --> 00:46:12,180
underground so

1014
00:46:12,180 --> 00:46:16,578
there's like plenty of ways to find them

1015
00:46:19,020 --> 00:46:21,480
um over the course of the throughout

1016
00:46:21,480 --> 00:46:23,760
like the 80s and 90s were there changes

1017
00:46:23,760 --> 00:46:27,240
to like how viruses would propagate or

1018
00:46:27,240 --> 00:46:28,920
replicate in addition to like the

1019
00:46:28,920 --> 00:46:31,619
techniques that people used and you know

1020
00:46:31,619 --> 00:46:33,720
if so was it mostly like over storage

1021
00:46:33,720 --> 00:46:38,118
media or did it go over networks as well

1022
00:46:38,400 --> 00:46:40,380
so okay let's see

1023
00:46:40,380 --> 00:46:42,119
in terms of different ways for

1024
00:46:42,119 --> 00:46:44,700
replicating and propagating I do mention

1025
00:46:44,700 --> 00:46:46,319
I did mention at the beginning but I

1026
00:46:46,319 --> 00:46:48,359
didn't get into it very much

1027
00:46:48,359 --> 00:46:51,300
um a lot of them use polymorphism in

1028
00:46:51,300 --> 00:46:55,079
some capacity so those like polymorphic

1029
00:46:55,079 --> 00:46:58,440
techniques were pretty uh

1030
00:46:58,440 --> 00:47:00,859
instrumental in a lot of these samples

1031
00:47:00,859 --> 00:47:03,540
especially of that era and then it was

1032
00:47:03,540 --> 00:47:06,180
the second part like Network

1033
00:47:06,180 --> 00:47:08,160
spreading over networks yeah like how

1034
00:47:08,160 --> 00:47:09,599
would they spread

1035
00:47:09,599 --> 00:47:11,460
um I mean a lot of them okay for

1036
00:47:11,460 --> 00:47:14,780
spreading techniques a lot of them were

1037
00:47:14,780 --> 00:47:17,040
basically transferred using physical

1038
00:47:17,040 --> 00:47:18,839
storage media so a lot of the ways that

1039
00:47:18,839 --> 00:47:22,079
they were transferred was sometimes uh

1040
00:47:22,079 --> 00:47:25,619
like sharing floppy disks but also they

1041
00:47:25,619 --> 00:47:29,760
propagated over bbs's uh they propagated

1042
00:47:29,760 --> 00:47:33,119
um I mean there was the I don't think no

1043
00:47:33,119 --> 00:47:36,240
I didn't mention it um the first virus

1044
00:47:36,240 --> 00:47:38,420
was creeper which was actually a worm

1045
00:47:38,420 --> 00:47:42,240
and it infected PDP tens

1046
00:47:42,240 --> 00:47:44,640
um and so that was in

1047
00:47:44,640 --> 00:47:48,119
late 70s I believe maybe 1981

1048
00:47:48,119 --> 00:47:49,619
um but that was technically the first

1049
00:47:49,619 --> 00:47:52,619
virus and that was but it was not a

1050
00:47:52,619 --> 00:47:54,599
virus it was a worm so it infected

1051
00:47:54,599 --> 00:47:55,980
networks

1052
00:47:55,980 --> 00:47:57,000
um

1053
00:47:57,000 --> 00:48:01,140
and the oh the fun fact about creeper is

1054
00:48:01,140 --> 00:48:04,140
that it caused the first antivirus

1055
00:48:04,140 --> 00:48:06,359
solution to be created so creeper had

1056
00:48:06,359 --> 00:48:09,060
its CounterPoint in Reaper and Reaper's

1057
00:48:09,060 --> 00:48:11,280
job was just to go in and disinfect all

1058
00:48:11,280 --> 00:48:12,540
the machines in the network that were

1059
00:48:12,540 --> 00:48:15,180
infected with creeper so cute little

1060
00:48:15,180 --> 00:48:17,598
pairing

1061
00:48:21,480 --> 00:48:24,440
any more questions

1062
00:48:25,319 --> 00:48:28,859
going once we have one

1063
00:48:28,859 --> 00:48:30,720
there was a comment at the beginning it

1064
00:48:30,720 --> 00:48:32,700
was like a some sort of elk hunter or

1065
00:48:32,700 --> 00:48:33,960
something you did you said you would

1066
00:48:33,960 --> 00:48:36,660
tell us more oh yeah okay

1067
00:48:36,660 --> 00:48:39,540
um out cloners so Out cleaner was a

1068
00:48:39,540 --> 00:48:41,400
virus uh it was written by I believe

1069
00:48:41,400 --> 00:48:45,180
their name was Richard scranta in I want

1070
00:48:45,180 --> 00:48:47,400
to say 1984. it was written two years

1071
00:48:47,400 --> 00:48:48,900
before the release of the first

1072
00:48:48,900 --> 00:48:52,500
Macintosh so it targeted Apple twos

1073
00:48:52,500 --> 00:48:55,319
um but it had

1074
00:48:55,319 --> 00:48:58,740
uh the way that it ensured uh

1075
00:48:58,740 --> 00:49:01,319
persistence like memory residence was

1076
00:49:01,319 --> 00:49:04,079
infected Ram but when it triggered when

1077
00:49:04,079 --> 00:49:05,760
the payload was triggered it had this

1078
00:49:05,760 --> 00:49:09,180
silly poem that was displayed um

1079
00:49:09,180 --> 00:49:10,560
I'm gonna try and remember it it was

1080
00:49:10,560 --> 00:49:11,700
like

1081
00:49:11,700 --> 00:49:14,040
elk cloner it'll like get on all your

1082
00:49:14,040 --> 00:49:17,099
discs it'll infect Ram to send in the

1083
00:49:17,099 --> 00:49:19,859
cloner blah blah blah so it showed this

1084
00:49:19,859 --> 00:49:23,779
funny little poem but

1085
00:49:24,780 --> 00:49:28,760
your machine was toast so

1086
00:49:31,980 --> 00:49:35,359
anyone questions

1087
00:49:37,440 --> 00:49:39,599
then let's give it off running okay once

1088
00:49:39,599 --> 00:49:41,960
again please

1089
00:49:42,119 --> 00:49:44,040
thank you for being a presenter besides

1090
00:49:44,040 --> 00:49:46,680
2023 here's a token of our appreciation

1091
00:49:46,680 --> 00:49:49,560
thank you to a sponsor Dorian SEC and

1092
00:49:49,560 --> 00:49:51,119
thank you everyone for joining us this

1093
00:49:51,119 --> 00:49:53,339
year we really appreciate it we'll catch

1094
00:49:53,339 --> 00:49:56,000
you in the next year

