1
00:00:00,000 --> 00:00:02,340
hi everyone and thank you for joining

2
00:00:02,340 --> 00:00:03,259
today

3
00:00:03,259 --> 00:00:06,000
I'm really excited and I have a big

4
00:00:06,000 --> 00:00:08,220
light in my eyes so I can't really see

5
00:00:08,220 --> 00:00:10,440
your faces which is good

6
00:00:10,440 --> 00:00:12,840
um our topic for today will be Advanced

7
00:00:12,840 --> 00:00:15,560
attack vectors in Azure environments

8
00:00:15,560 --> 00:00:17,940
unfortunately I was supposed to present

9
00:00:17,940 --> 00:00:19,980
it with my colleague bill but he had

10
00:00:19,980 --> 00:00:21,480
some passport issues and Kent really

11
00:00:21,480 --> 00:00:23,820
came to the US so each part of the

12
00:00:23,820 --> 00:00:25,500
session is recorded and we will see it

13
00:00:25,500 --> 00:00:27,599
later on so stay tight and I hope you

14
00:00:27,599 --> 00:00:30,439
will enjoy the session

15
00:00:30,539 --> 00:00:33,780
so before I begin who are we so both me

16
00:00:33,780 --> 00:00:36,120
and B live in Israel my name is

17
00:00:36,120 --> 00:00:38,280
jerulianitsky I'm the VP research at XM

18
00:00:38,280 --> 00:00:41,160
cyber my colleague is Bill Ben Haim he's

19
00:00:41,160 --> 00:00:42,960
a security researcher security

20
00:00:42,960 --> 00:00:45,540
researcher in the team we have the best

21
00:00:45,540 --> 00:00:47,579
experience in penetration testing red

22
00:00:47,579 --> 00:00:49,620
teaming in and actually a lot of

23
00:00:49,620 --> 00:00:53,280
research areas actually Bill and myself

24
00:00:53,280 --> 00:00:55,680
met each other when we were young and

25
00:00:55,680 --> 00:00:57,780
practice Judo we both were in the

26
00:00:57,780 --> 00:01:00,000
Israeli National Team and Bill used to

27
00:01:00,000 --> 00:01:02,100
beat me all the time but now I'm his

28
00:01:02,100 --> 00:01:05,660
boss so we're in a good shape

29
00:01:05,939 --> 00:01:08,580
so our our agenda for today will start

30
00:01:08,580 --> 00:01:10,500
with some Azure fundamentals in order to

31
00:01:10,500 --> 00:01:12,420
better understand the different topics

32
00:01:12,420 --> 00:01:13,920
we will touch today

33
00:01:13,920 --> 00:01:16,200
we will continue and talk about initial

34
00:01:16,200 --> 00:01:19,200
foothold possible ways to gain into

35
00:01:19,200 --> 00:01:20,700
Azure and tenants

36
00:01:20,700 --> 00:01:22,619
we'll continue and talk about two main

37
00:01:22,619 --> 00:01:24,540
use cases each one composed from

38
00:01:24,540 --> 00:01:27,180
multiple and different abuses within

39
00:01:27,180 --> 00:01:28,860
Azure environment

40
00:01:28,860 --> 00:01:30,960
we will continue with best practices and

41
00:01:30,960 --> 00:01:32,280
some cool bypasses to different

42
00:01:32,280 --> 00:01:34,560
Microsoft security measurements that are

43
00:01:34,560 --> 00:01:38,280
set in place within the Azure tenant and

44
00:01:38,280 --> 00:01:42,439
we will finish by introducing XM good

45
00:01:42,900 --> 00:01:45,360
perfect so I will start by talking about

46
00:01:45,360 --> 00:01:47,700
some Azure fundamentals I won't

47
00:01:47,700 --> 00:01:50,100
elaborate a lot about it because the

48
00:01:50,100 --> 00:01:51,720
couches look really good and I don't

49
00:01:51,720 --> 00:01:53,820
want it to fall asleep but I will only

50
00:01:53,820 --> 00:01:55,320
touch on the ones that are really

51
00:01:55,320 --> 00:01:57,060
important in order to understand the

52
00:01:57,060 --> 00:01:59,540
topic today

53
00:01:59,579 --> 00:02:02,040
so whenever we're talking about Azure in

54
00:02:02,040 --> 00:02:04,920
general there are two main services that

55
00:02:04,920 --> 00:02:06,899
are important to understand the first

56
00:02:06,899 --> 00:02:09,000
one is called Azure active directory I

57
00:02:09,000 --> 00:02:10,318
guess most of you are familiar with it

58
00:02:10,318 --> 00:02:12,840
and the second one called Azure resource

59
00:02:12,840 --> 00:02:15,720
manager in general Azure active

60
00:02:15,720 --> 00:02:17,760
directory is where you manage all the

61
00:02:17,760 --> 00:02:19,379
different identities and principles

62
00:02:19,379 --> 00:02:22,020
within the Azure tenant those can be

63
00:02:22,020 --> 00:02:24,420
users groups or applications service

64
00:02:24,420 --> 00:02:27,660
principles managed identities and so on

65
00:02:27,660 --> 00:02:29,819
and within Azure resource manager we

66
00:02:29,819 --> 00:02:31,800
usually manage different infrastructure

67
00:02:31,800 --> 00:02:34,260
Services provided by Microsoft such as

68
00:02:34,260 --> 00:02:35,840
virtual machine storage account

69
00:02:35,840 --> 00:02:39,319
databases and so on

70
00:02:40,440 --> 00:02:42,300
it is important to understand that there

71
00:02:42,300 --> 00:02:44,340
is a high coupling between Azure active

72
00:02:44,340 --> 00:02:46,080
directory and Azure resource manager

73
00:02:46,080 --> 00:02:48,300
this can be seen good in this diagram

74
00:02:48,300 --> 00:02:50,879
where in the top we can see the Azure

75
00:02:50,879 --> 00:02:53,760
active directory server a service who

76
00:02:53,760 --> 00:02:56,760
actually everything is associated to it

77
00:02:56,760 --> 00:02:58,739
within Azure resource manager so

78
00:02:58,739 --> 00:03:00,360
whenever you are applying any type of

79
00:03:00,360 --> 00:03:02,459
permissions you are doing any type of

80
00:03:02,459 --> 00:03:04,920
assignment within Azure resource manager

81
00:03:04,920 --> 00:03:07,500
those are replied to Azure active

82
00:03:07,500 --> 00:03:09,540
directory principles who managed their

83
00:03:09,540 --> 00:03:12,060
within the tenant

84
00:03:12,060 --> 00:03:15,120
there is a really a common attack Vector

85
00:03:15,120 --> 00:03:18,000
where you can abuse a user that has the

86
00:03:18,000 --> 00:03:20,280
global administrator a role definition

87
00:03:20,280 --> 00:03:23,700
within Azure active directory and you

88
00:03:23,700 --> 00:03:25,260
can actually elevate your permissions

89
00:03:25,260 --> 00:03:28,319
and get a role assignment of the user

90
00:03:28,319 --> 00:03:31,260
access user access administrator role

91
00:03:31,260 --> 00:03:33,480
definition within Azure resource manager

92
00:03:33,480 --> 00:03:36,060
using this real definition actually

93
00:03:36,060 --> 00:03:38,280
allows you to create a new role

94
00:03:38,280 --> 00:03:39,900
assignments within Azure resource

95
00:03:39,900 --> 00:03:42,299
manager and actually compromise and get

96
00:03:42,299 --> 00:03:44,220
your hands on any type of resource

97
00:03:44,220 --> 00:03:48,500
within Azure resource manager

98
00:03:48,599 --> 00:03:51,360
perfect so I will continue and talk a

99
00:03:51,360 --> 00:03:54,000
bit about the permission model in Azure

100
00:03:54,000 --> 00:03:56,280
environment and I will begin with the

101
00:03:56,280 --> 00:03:58,799
resource manager as you can see in the

102
00:03:58,799 --> 00:04:02,280
picture role assignments within Azure

103
00:04:02,280 --> 00:04:03,959
are actually composed from three

104
00:04:03,959 --> 00:04:05,940
different main objects

105
00:04:05,940 --> 00:04:07,500
the first one is called the security

106
00:04:07,500 --> 00:04:10,319
principle and this can be a user a group

107
00:04:10,319 --> 00:04:12,720
a service principle and a managed

108
00:04:12,720 --> 00:04:13,860
identity

109
00:04:13,860 --> 00:04:16,139
within the role assignment the security

110
00:04:16,139 --> 00:04:18,779
principle is actually present to who we

111
00:04:18,779 --> 00:04:20,880
are going to assign the permissions

112
00:04:20,880 --> 00:04:22,919
the second object is called role

113
00:04:22,919 --> 00:04:24,960
definition and World definition is

114
00:04:24,960 --> 00:04:27,060
nothing more of a set of permissions

115
00:04:27,060 --> 00:04:29,400
that you allowed to do and not allowed

116
00:04:29,400 --> 00:04:32,280
to do in this example we can see the

117
00:04:32,280 --> 00:04:35,040
contributor predefined role definition

118
00:04:35,040 --> 00:04:37,080
and we can see that the contributorial

119
00:04:37,080 --> 00:04:39,300
definition has all the different

120
00:04:39,300 --> 00:04:42,240
possible permissions that are exist

121
00:04:42,240 --> 00:04:44,699
within Azure resource manager this can

122
00:04:44,699 --> 00:04:47,280
be seen in the action section in the

123
00:04:47,280 --> 00:04:49,199
image and

124
00:04:49,199 --> 00:04:51,780
we're removing some authorization

125
00:04:51,780 --> 00:04:53,699
permissions as you can see in the note

126
00:04:53,699 --> 00:04:56,400
actions section within the real

127
00:04:56,400 --> 00:04:57,419
definition

128
00:04:57,419 --> 00:05:00,600
the last object is called scope and

129
00:05:00,600 --> 00:05:02,639
actually scope is to where we are

130
00:05:02,639 --> 00:05:04,320
assigning the permissions and where

131
00:05:04,320 --> 00:05:05,940
those permissions going to be valid

132
00:05:05,940 --> 00:05:08,340
there are four different types of Scopes

133
00:05:08,340 --> 00:05:10,320
that you can Define within Azure

134
00:05:10,320 --> 00:05:12,479
resource manager role assignments the

135
00:05:12,479 --> 00:05:14,400
first one and this is the bottom one is

136
00:05:14,400 --> 00:05:16,560
actually the actual resource that you

137
00:05:16,560 --> 00:05:18,960
have been created so by using it you can

138
00:05:18,960 --> 00:05:21,240
assign permissions directly Associated

139
00:05:21,240 --> 00:05:23,460
to a specific resource such as storage

140
00:05:23,460 --> 00:05:26,940
account a database and so on

141
00:05:26,940 --> 00:05:29,460
the second type of scope can be a

142
00:05:29,460 --> 00:05:32,639
resource Group So within Azure whenever

143
00:05:32,639 --> 00:05:34,680
you create any type of resource you must

144
00:05:34,680 --> 00:05:36,419
Define the resource Group who is going

145
00:05:36,419 --> 00:05:38,940
to host the twisters

146
00:05:38,940 --> 00:05:41,100
the next possible scope is called a

147
00:05:41,100 --> 00:05:43,919
subscription usually you are assigning

148
00:05:43,919 --> 00:05:45,600
your billing account per subscription

149
00:05:45,600 --> 00:05:48,060
but in terms of role assignments and

150
00:05:48,060 --> 00:05:50,100
permissions this is just another layer

151
00:05:50,100 --> 00:05:53,520
that you can decide on within the scope

152
00:05:53,520 --> 00:05:55,080
and the last one is called the

153
00:05:55,080 --> 00:05:57,000
management group and this is just

154
00:05:57,000 --> 00:05:58,100
another

155
00:05:58,100 --> 00:06:01,440
top level kind of scope that you can

156
00:06:01,440 --> 00:06:03,960
Define within Azure who usually hosting

157
00:06:03,960 --> 00:06:06,180
everything below it

158
00:06:06,180 --> 00:06:07,979
in general it is important to understand

159
00:06:07,979 --> 00:06:10,259
that whenever we're assigning a

160
00:06:10,259 --> 00:06:12,000
permission the permission will be

161
00:06:12,000 --> 00:06:13,919
inherited down to all the different

162
00:06:13,919 --> 00:06:16,380
Scopes that we decided

163
00:06:16,380 --> 00:06:19,020
so in this example we can see that the

164
00:06:19,020 --> 00:06:20,639
Marketing Group received the

165
00:06:20,639 --> 00:06:22,979
contributorial definition on the Pharma

166
00:06:22,979 --> 00:06:25,560
sales Resource Group this means that

167
00:06:25,560 --> 00:06:27,900
anyone who resides within the Marketing

168
00:06:27,900 --> 00:06:30,120
Group will receive the permissions on

169
00:06:30,120 --> 00:06:32,160
the former sales Resource Group and any

170
00:06:32,160 --> 00:06:33,960
kind of resources that have been created

171
00:06:33,960 --> 00:06:37,940
and set within that with us group

172
00:06:38,400 --> 00:06:40,259
the next permission model is azure

173
00:06:40,259 --> 00:06:43,259
active directory as I said those are

174
00:06:43,259 --> 00:06:44,819
Azure active directory industrial

175
00:06:44,819 --> 00:06:46,380
resource manager are completely

176
00:06:46,380 --> 00:06:48,900
different Services they have a lot of

177
00:06:48,900 --> 00:06:50,639
similarities but some differences as

178
00:06:50,639 --> 00:06:53,400
well so in terms of permissions it's

179
00:06:53,400 --> 00:06:56,160
really similar you can see that we are

180
00:06:56,160 --> 00:06:57,840
again defining three different types of

181
00:06:57,840 --> 00:07:00,479
object a security principle a role

182
00:07:00,479 --> 00:07:02,520
definition and a scope where the scope

183
00:07:02,520 --> 00:07:04,199
is a bit different this time where you

184
00:07:04,199 --> 00:07:07,440
can Define the scope to be a tenant an

185
00:07:07,440 --> 00:07:09,479
administrative unit or a specific Azure

186
00:07:09,479 --> 00:07:12,060
ID resource in addition there is a big

187
00:07:12,060 --> 00:07:14,520
difference between the maturity of those

188
00:07:14,520 --> 00:07:16,800
permission models where in Azure

189
00:07:16,800 --> 00:07:19,319
resource manager you can create any type

190
00:07:19,319 --> 00:07:21,120
of custom role that you would like with

191
00:07:21,120 --> 00:07:22,680
any kind of permission

192
00:07:22,680 --> 00:07:24,720
and within Azure active directory you

193
00:07:24,720 --> 00:07:26,400
can't really do it and usually you're

194
00:07:26,400 --> 00:07:29,160
going to use the predefined ones so I'm

195
00:07:29,160 --> 00:07:30,539
pretty sure some of you are familiar

196
00:07:30,539 --> 00:07:32,340
with global administrator application

197
00:07:32,340 --> 00:07:34,620
administrator and so on

198
00:07:34,620 --> 00:07:36,860
foreign

199
00:07:36,860 --> 00:07:38,639
promising I'm done with some

200
00:07:38,639 --> 00:07:40,160
fundamentals

201
00:07:40,160 --> 00:07:42,780
in general the different use cases that

202
00:07:42,780 --> 00:07:45,900
we will see today are starting a with

203
00:07:45,900 --> 00:07:48,680
the assumption that we are somehow could

204
00:07:48,680 --> 00:07:51,419
could get our hands on some type of

205
00:07:51,419 --> 00:07:54,060
credentials or identity so I just wanted

206
00:07:54,060 --> 00:07:56,580
to go over some basic ways in order to

207
00:07:56,580 --> 00:07:59,099
gain the initial foothold towards Azure

208
00:07:59,099 --> 00:08:00,479
environment

209
00:08:00,479 --> 00:08:02,460
so the first and the most common one is

210
00:08:02,460 --> 00:08:04,680
by using some social engineering attacks

211
00:08:04,680 --> 00:08:06,960
such as phishing brute forcing and

212
00:08:06,960 --> 00:08:09,120
password spring this will allow us to

213
00:08:09,120 --> 00:08:11,099
get our hands on some credentials of

214
00:08:11,099 --> 00:08:13,440
users and then abuse the different

215
00:08:13,440 --> 00:08:16,020
permissions attached to them

216
00:08:16,020 --> 00:08:18,539
the second possible way is by exploiting

217
00:08:18,539 --> 00:08:21,240
a vulnerability on a public-facing a

218
00:08:21,240 --> 00:08:24,000
service such as virtual machine this

219
00:08:24,000 --> 00:08:27,180
will allow us to abuse an identity that

220
00:08:27,180 --> 00:08:28,979
is attached to that public-facing

221
00:08:28,979 --> 00:08:31,319
resource in order to do and start doing

222
00:08:31,319 --> 00:08:33,120
our lateral movement within the Azure

223
00:08:33,120 --> 00:08:35,159
tenant itself

224
00:08:35,159 --> 00:08:37,500
another possible and really common way

225
00:08:37,500 --> 00:08:39,899
is by actually buying some compromised

226
00:08:39,899 --> 00:08:41,940
accounts in the dark web those are

227
00:08:41,940 --> 00:08:44,399
pretty cheap and sometimes also MFA

228
00:08:44,399 --> 00:08:46,800
claimed so even conditional access or

229
00:08:46,800 --> 00:08:48,720
any type of MFA set in place can be

230
00:08:48,720 --> 00:08:52,820
biased by using this type of method

231
00:08:52,820 --> 00:08:56,459
Azure actually have a CLI tool that you

232
00:08:56,459 --> 00:08:59,700
can use which is called azcli whenever

233
00:08:59,700 --> 00:09:03,660
someone is using that CLI it is storing

234
00:09:03,660 --> 00:09:06,500
locally on the machine on default paths

235
00:09:06,500 --> 00:09:09,300
it can be a short-term access tokens of

236
00:09:09,300 --> 00:09:11,640
users and clear text Secrets or

237
00:09:11,640 --> 00:09:14,820
certificates related to Applications so

238
00:09:14,820 --> 00:09:17,399
if the attacker has has access to the

239
00:09:17,399 --> 00:09:20,459
internal network of of the environment

240
00:09:20,459 --> 00:09:23,040
it can locate those kind of files

241
00:09:23,040 --> 00:09:25,440
extract the credentials and then get the

242
00:09:25,440 --> 00:09:26,940
initial photo

243
00:09:26,940 --> 00:09:29,519
Microsoft did a really good job

244
00:09:29,519 --> 00:09:32,339
integrating on-prem domain environment

245
00:09:32,339 --> 00:09:34,860
and Azure active directory this is done

246
00:09:34,860 --> 00:09:36,660
by using ad connect which I will

247
00:09:36,660 --> 00:09:39,360
elaborate in the next slide but in

248
00:09:39,360 --> 00:09:41,940
general you can abuse those features in

249
00:09:41,940 --> 00:09:44,580
order to get your initial foothold so

250
00:09:44,580 --> 00:09:46,920
one of it one of the typical ways to do

251
00:09:46,920 --> 00:09:48,899
it is by abusing hybrid environments

252
00:09:48,899 --> 00:09:51,180
where the same device is connected both

253
00:09:51,180 --> 00:09:54,120
to on-prem domain controller and Azure

254
00:09:54,120 --> 00:09:56,880
active directory and having a foothold

255
00:09:56,880 --> 00:09:58,680
on those kind of machines can allow us

256
00:09:58,680 --> 00:10:01,860
to generate PRT tokens that will allow

257
00:10:01,860 --> 00:10:03,600
us to get our initial foothold into the

258
00:10:03,600 --> 00:10:06,360
environment in addition there are more

259
00:10:06,360 --> 00:10:08,640
capabilities that you have set in place

260
00:10:08,640 --> 00:10:11,279
within Azure active within Azure ad

261
00:10:11,279 --> 00:10:13,380
connect utility and you can abuse

262
00:10:13,380 --> 00:10:16,080
different types of SSO features in it in

263
00:10:16,080 --> 00:10:19,940
order to get the initial photo

264
00:10:20,760 --> 00:10:24,839
perfect so as I said Microsoft created a

265
00:10:24,839 --> 00:10:27,540
tool named adconnect the main purpose of

266
00:10:27,540 --> 00:10:29,580
this tool is to synchronize on-prem

267
00:10:29,580 --> 00:10:32,640
domain environment toward Azure active

268
00:10:32,640 --> 00:10:33,980
directory

269
00:10:33,980 --> 00:10:36,600
this synchronization actually going to

270
00:10:36,600 --> 00:10:39,300
sync different type of users and groups

271
00:10:39,300 --> 00:10:41,220
that are located in the on-prem domain

272
00:10:41,220 --> 00:10:44,160
controller to Azure active directory

273
00:10:44,160 --> 00:10:46,860
in addition using this tool will allow

274
00:10:46,860 --> 00:10:48,959
you to authenticate using the same

275
00:10:48,959 --> 00:10:50,959
on-prem users

276
00:10:50,959 --> 00:10:53,760
to Azure active directory and

277
00:10:53,760 --> 00:10:55,920
authentication can actually be done

278
00:10:55,920 --> 00:10:58,019
using three different types of

279
00:10:58,019 --> 00:11:00,600
authentication methods the first and the

280
00:11:00,600 --> 00:11:03,060
one that Microsoft recommends to use is

281
00:11:03,060 --> 00:11:05,880
password asynchronization this type of

282
00:11:05,880 --> 00:11:08,519
authentication is actually synchronizing

283
00:11:08,519 --> 00:11:12,779
the on-premise ntlm ashes of the users

284
00:11:12,779 --> 00:11:15,779
to the cloud and then all the different

285
00:11:15,779 --> 00:11:17,459
authentication and authorization

286
00:11:17,459 --> 00:11:20,040
validations are being done in the Azure

287
00:11:20,040 --> 00:11:22,440
active directory side but there are many

288
00:11:22,440 --> 00:11:24,779
organizations that don't want or can't

289
00:11:24,779 --> 00:11:27,959
do the synchronization and take outside

290
00:11:27,959 --> 00:11:30,660
from the internal Network the

291
00:11:30,660 --> 00:11:32,700
credentials to the cloud and because of

292
00:11:32,700 --> 00:11:34,920
that Microsoft added two different type

293
00:11:34,920 --> 00:11:37,740
of other authentications the first one

294
00:11:37,740 --> 00:11:40,140
is called Pastor authentication and

295
00:11:40,140 --> 00:11:43,140
whenever an organization is using this

296
00:11:43,140 --> 00:11:44,959
type of authentication

297
00:11:44,959 --> 00:11:47,399
once the the user entering these

298
00:11:47,399 --> 00:11:50,040
credentials those are being sent to the

299
00:11:50,040 --> 00:11:52,320
domain controller to the on-prem domain

300
00:11:52,320 --> 00:11:54,120
controller and this is the one who does

301
00:11:54,120 --> 00:11:56,459
the validation of the credentials and

302
00:11:56,459 --> 00:11:59,160
obviously you can use adfs in order to

303
00:11:59,160 --> 00:12:00,839
do the Authentication

304
00:12:00,839 --> 00:12:02,820
later on the talk during a build

305
00:12:02,820 --> 00:12:06,000
recording we will show a nice abuse of

306
00:12:06,000 --> 00:12:08,160
the pastry authentication agent

307
00:12:08,160 --> 00:12:11,480
but we will get to it

308
00:12:11,519 --> 00:12:14,640
perfect so we prepared two different use

309
00:12:14,640 --> 00:12:17,579
cases today the first one is called from

310
00:12:17,579 --> 00:12:20,519
external user to sensitive data

311
00:12:20,519 --> 00:12:22,920
and for every use case we will start by

312
00:12:22,920 --> 00:12:24,779
showing what we configured in the

313
00:12:24,779 --> 00:12:27,360
environment in order to do it so the

314
00:12:27,360 --> 00:12:29,700
prerequisite for this one starts with an

315
00:12:29,700 --> 00:12:31,800
Azure ID user with some reader

316
00:12:31,800 --> 00:12:34,260
permissions and in addition we

317
00:12:34,260 --> 00:12:36,620
configured and set in place an Azure

318
00:12:36,620 --> 00:12:39,779
active directory application with some

319
00:12:39,779 --> 00:12:43,500
Microsoft web websites permissions those

320
00:12:43,500 --> 00:12:45,120
permissions will allow us to compromise

321
00:12:45,120 --> 00:12:48,060
a function up later on so obviously we

322
00:12:48,060 --> 00:12:50,100
also need to have a function up set in

323
00:12:50,100 --> 00:12:51,180
place

324
00:12:51,180 --> 00:12:53,279
and in addition we will assign to that

325
00:12:53,279 --> 00:12:55,260
function of a user assigned managed

326
00:12:55,260 --> 00:12:57,420
identity and we will give to that

327
00:12:57,420 --> 00:13:00,180
identity some permissions over key Vault

328
00:13:00,180 --> 00:13:01,860
that will allow us to read and get some

329
00:13:01,860 --> 00:13:04,740
secrets and over some storage accounts

330
00:13:04,740 --> 00:13:06,060
that will allow us to list storage

331
00:13:06,060 --> 00:13:08,399
account containers storage account

332
00:13:08,399 --> 00:13:11,040
themselves and blobs and also read the

333
00:13:11,040 --> 00:13:13,819
files within them

334
00:13:14,399 --> 00:13:16,639
so this is a nice diagram we created

335
00:13:16,639 --> 00:13:19,800
that represent all the different types

336
00:13:19,800 --> 00:13:21,120
of things that we will do in this use

337
00:13:21,120 --> 00:13:24,420
case we will start in the left side with

338
00:13:24,420 --> 00:13:26,700
the specific user as I said everything

339
00:13:26,700 --> 00:13:29,700
in this session is assumed Bridge which

340
00:13:29,700 --> 00:13:31,980
means the attacker was able to get his

341
00:13:31,980 --> 00:13:36,120
hands on a specific user uh then after

342
00:13:36,120 --> 00:13:38,639
some enumeration the user that the

343
00:13:38,639 --> 00:13:40,500
attacker will do he will be able to

344
00:13:40,500 --> 00:13:42,300
understand that he has some owner

345
00:13:42,300 --> 00:13:44,820
permissions over an application and

346
00:13:44,820 --> 00:13:46,560
abusing those owner permissions will

347
00:13:46,560 --> 00:13:48,959
allow him to reset the secret related to

348
00:13:48,959 --> 00:13:50,820
that application and then authenticate

349
00:13:50,820 --> 00:13:53,399
as the application

350
00:13:53,399 --> 00:13:54,839
then the attacker will do some

351
00:13:54,839 --> 00:13:56,160
reconnaissance with the service

352
00:13:56,160 --> 00:13:58,620
principle Associated to that application

353
00:13:58,620 --> 00:14:00,959
and it will be able to understand that

354
00:14:00,959 --> 00:14:03,899
he has the permissions to add an sem

355
00:14:03,899 --> 00:14:05,760
user to the function app and I will

356
00:14:05,760 --> 00:14:08,339
touch later about what is SCM

357
00:14:08,339 --> 00:14:10,980
and with some more enumeration and

358
00:14:10,980 --> 00:14:12,899
reconnaissance he will be able to

359
00:14:12,899 --> 00:14:15,120
understand that the same function of as

360
00:14:15,120 --> 00:14:16,980
a user assigned identity attached to it

361
00:14:16,980 --> 00:14:19,079
and because of that it can generate an

362
00:14:19,079 --> 00:14:21,480
access token for that identity and abuse

363
00:14:21,480 --> 00:14:23,279
it for an additional lateral movement in

364
00:14:23,279 --> 00:14:25,200
the environment

365
00:14:25,200 --> 00:14:27,060
and then the attacker will be able to

366
00:14:27,060 --> 00:14:30,300
read some blobs The Blob will be a

367
00:14:30,300 --> 00:14:32,880
protected zip file and the protection

368
00:14:32,880 --> 00:14:35,279
password will be stored in the key Vault

369
00:14:35,279 --> 00:14:37,560
and we will see how we can enumerate and

370
00:14:37,560 --> 00:14:39,720
get our hands on the secrets and the

371
00:14:39,720 --> 00:14:42,440
sensitive file

372
00:14:42,839 --> 00:14:45,779
perfect so the attacker received or

373
00:14:45,779 --> 00:14:49,260
bought doesn't really matter a user and

374
00:14:49,260 --> 00:14:51,540
then it starts to do his reconnaissance

375
00:14:51,540 --> 00:14:54,600
in the environment most of the things we

376
00:14:54,600 --> 00:14:57,480
will show in this lecture uh we'll use

377
00:14:57,480 --> 00:15:01,680
the accli tool provided by Microsoft or

378
00:15:01,680 --> 00:15:05,100
some random rest request that you will

379
00:15:05,100 --> 00:15:07,019
see later on

380
00:15:07,019 --> 00:15:09,660
so the attacker actually start by using

381
00:15:09,660 --> 00:15:13,079
the Azad up list command this command

382
00:15:13,079 --> 00:15:14,820
lists all the different application

383
00:15:14,820 --> 00:15:16,800
applications that have been created

384
00:15:16,800 --> 00:15:19,760
within the tenant

385
00:15:20,639 --> 00:15:23,339
doing so will reveal multiple

386
00:15:23,339 --> 00:15:25,380
applications and the next thing is the

387
00:15:25,380 --> 00:15:27,540
attacker would like to do is to check if

388
00:15:27,540 --> 00:15:29,880
he has ownership on any of those

389
00:15:29,880 --> 00:15:32,459
permissions this can be done by using

390
00:15:32,459 --> 00:15:36,360
the Azad app owner list and passing the

391
00:15:36,360 --> 00:15:38,820
ID related to the application that we

392
00:15:38,820 --> 00:15:41,459
wish it for and we will see that one of

393
00:15:41,459 --> 00:15:44,639
the applications in the tenant actually

394
00:15:44,639 --> 00:15:47,339
owned by John user who is the user that

395
00:15:47,339 --> 00:15:51,199
we are using right now

396
00:15:51,540 --> 00:15:53,579
perfect so the next thing that we're

397
00:15:53,579 --> 00:15:55,920
going to do is to add a secret to the

398
00:15:55,920 --> 00:15:58,800
application this can be done by using

399
00:15:58,800 --> 00:16:02,279
the Azad up credential reset command

400
00:16:02,279 --> 00:16:05,459
which will create in response a new

401
00:16:05,459 --> 00:16:07,920
password or secret related to the

402
00:16:07,920 --> 00:16:10,079
application the next thing that we can

403
00:16:10,079 --> 00:16:12,180
do is authenticate as the application

404
00:16:12,180 --> 00:16:14,279
and check if the application has any

405
00:16:14,279 --> 00:16:18,260
more permissions set in place

406
00:16:19,620 --> 00:16:22,199
so we we have been authenticating with

407
00:16:22,199 --> 00:16:24,300
the application and the next thing that

408
00:16:24,300 --> 00:16:25,620
we want to do is to do some

409
00:16:25,620 --> 00:16:28,019
reconnaissance within the Azure resource

410
00:16:28,019 --> 00:16:30,800
manager so anything you saw till now was

411
00:16:30,800 --> 00:16:34,560
against the Microsoft graph API which is

412
00:16:34,560 --> 00:16:36,540
the one who is behind Azure active

413
00:16:36,540 --> 00:16:38,459
directory and from now we are going to

414
00:16:38,459 --> 00:16:40,440
do some reconnaissance in the Azure

415
00:16:40,440 --> 00:16:42,899
resource manager so the fact the first

416
00:16:42,899 --> 00:16:45,540
thing that we would like to to Recon is

417
00:16:45,540 --> 00:16:47,459
if our application has any role

418
00:16:47,459 --> 00:16:49,800
assignment attached to it this can be

419
00:16:49,800 --> 00:16:51,839
done by using the AC role assignment

420
00:16:51,839 --> 00:16:53,399
list command and providing the

421
00:16:53,399 --> 00:16:56,519
application ID and as we can see the

422
00:16:56,519 --> 00:16:59,579
application have in place a role

423
00:16:59,579 --> 00:17:02,160
assignment the role assignment is on a

424
00:17:02,160 --> 00:17:04,500
specific subscription which means that

425
00:17:04,500 --> 00:17:06,540
all the permissions are related to that

426
00:17:06,540 --> 00:17:08,579
subscription and any type of resource

427
00:17:08,579 --> 00:17:10,679
created within that subscription

428
00:17:10,679 --> 00:17:13,020
and the role definition represented

429
00:17:13,020 --> 00:17:15,240
within the trail assignment called

430
00:17:15,240 --> 00:17:18,059
function of editor

431
00:17:18,059 --> 00:17:20,339
and the next thing that we want to do is

432
00:17:20,339 --> 00:17:22,679
we would like to use the AZ rule

433
00:17:22,679 --> 00:17:24,780
definition list command in order to see

434
00:17:24,780 --> 00:17:27,540
what are the kind of permissions we have

435
00:17:27,540 --> 00:17:29,760
been in place related to this

436
00:17:29,760 --> 00:17:31,740
application and this will actually

437
00:17:31,740 --> 00:17:34,380
reveal that the application has the

438
00:17:34,380 --> 00:17:37,200
function of editor a role definition as

439
00:17:37,200 --> 00:17:40,080
we saw earlier this is a custom role

440
00:17:40,080 --> 00:17:42,480
definition which means someone

441
00:17:42,480 --> 00:17:45,000
which was me and he created it behind

442
00:17:45,000 --> 00:17:47,940
the scene in place and we can see in the

443
00:17:47,940 --> 00:17:51,120
action section of the permission that we

444
00:17:51,120 --> 00:17:53,880
have some some permissions over the

445
00:17:53,880 --> 00:17:57,000
Microsoft web provider which is the one

446
00:17:57,000 --> 00:18:02,340
hosting the function of uh apis

447
00:18:03,660 --> 00:18:05,580
so the next thing that we would like to

448
00:18:05,580 --> 00:18:07,980
do we would like to exploit the function

449
00:18:07,980 --> 00:18:11,580
of a and in order to do it we need to

450
00:18:11,580 --> 00:18:13,860
see if the function up actually has any

451
00:18:13,860 --> 00:18:16,620
type of function set in place

452
00:18:16,620 --> 00:18:19,559
so by sending a rest command towards the

453
00:18:19,559 --> 00:18:22,140
Microsoft website's endpoint it will

454
00:18:22,140 --> 00:18:24,660
reveal that there is a function created

455
00:18:24,660 --> 00:18:27,840
within the function up named XM function

456
00:18:27,840 --> 00:18:32,639
that we can try to exploit later

457
00:18:33,360 --> 00:18:35,340
the kind of exploit that we're going to

458
00:18:35,340 --> 00:18:39,299
do is adding a publishing user to the

459
00:18:39,299 --> 00:18:41,820
sem panel but before that we need to

460
00:18:41,820 --> 00:18:44,160
understand what is the SCM panel and

461
00:18:44,160 --> 00:18:46,679
actually sem is the administrative

462
00:18:46,679 --> 00:18:49,740
interface related to function UPS app

463
00:18:49,740 --> 00:18:52,380
services and logic apps which is

464
00:18:52,380 --> 00:18:54,320
automatically created whenever you

465
00:18:54,320 --> 00:18:58,740
provision a new service which is one of

466
00:18:58,740 --> 00:18:59,780
those

467
00:18:59,780 --> 00:19:02,460
behind the scene the sem is an open

468
00:19:02,460 --> 00:19:05,580
source tool called kudu so you can also

469
00:19:05,580 --> 00:19:07,440
check the code and what it does behind

470
00:19:07,440 --> 00:19:10,080
the scene and actually an attacker that

471
00:19:10,080 --> 00:19:12,059
has access to this administrative panel

472
00:19:12,059 --> 00:19:14,039
can execute some operating system

473
00:19:14,039 --> 00:19:16,679
commands on the infrastructure hosting

474
00:19:16,679 --> 00:19:19,440
the function up you can Harvest some

475
00:19:19,440 --> 00:19:21,299
Secrets some passwords some sensitive

476
00:19:21,299 --> 00:19:24,299
data from it and most importantly you

477
00:19:24,299 --> 00:19:26,340
can actually generate new access token

478
00:19:26,340 --> 00:19:29,520
related to the identities attached to

479
00:19:29,520 --> 00:19:32,780
this function up

480
00:19:33,120 --> 00:19:34,860
so the next thing we want to do is we

481
00:19:34,860 --> 00:19:37,200
want to exploit the SCM panel and the

482
00:19:37,200 --> 00:19:39,539
permissions that we have this can be

483
00:19:39,539 --> 00:19:42,419
done by sending this post request that

484
00:19:42,419 --> 00:19:44,220
actually contains within the body and

485
00:19:44,220 --> 00:19:46,440
other put request that the backend going

486
00:19:46,440 --> 00:19:49,320
to send this put request will be against

487
00:19:49,320 --> 00:19:52,559
the publishing users endpoint that you

488
00:19:52,559 --> 00:19:54,360
can see in the end

489
00:19:54,360 --> 00:19:56,880
and within it we're going to generate a

490
00:19:56,880 --> 00:19:59,520
new sem user his username going to be

491
00:19:59,520 --> 00:20:01,400
attacker

492
00:20:01,400 --> 00:20:05,640
xm12345 with some password

493
00:20:05,640 --> 00:20:08,580
and as the result we will receive an

494
00:20:08,580 --> 00:20:11,940
HTTP 200 status code that actually says

495
00:20:11,940 --> 00:20:14,400
that the user have been created and now

496
00:20:14,400 --> 00:20:16,320
we can try and authenticate with that

497
00:20:16,320 --> 00:20:20,720
user to the sem panel of the function up

498
00:20:21,120 --> 00:20:23,220
this will actually allow us in the

499
00:20:23,220 --> 00:20:25,740
diagram to continue When jumping from

500
00:20:25,740 --> 00:20:28,200
the service principle that we created

501
00:20:28,200 --> 00:20:32,660
the password to into the function up

502
00:20:32,880 --> 00:20:36,660
so we will serve using our browser to

503
00:20:36,660 --> 00:20:40,860
the SCM default URL and with some basic

504
00:20:40,860 --> 00:20:43,260
authentication we will authenticate with

505
00:20:43,260 --> 00:20:46,640
a newly created user

506
00:20:49,380 --> 00:20:52,679
and now we are residing within the the

507
00:20:52,679 --> 00:20:54,780
infrastructure hosting the function up

508
00:20:54,780 --> 00:20:57,660
and we will start and do some more

509
00:20:57,660 --> 00:20:59,700
enumeration in order to do if the

510
00:20:59,700 --> 00:21:02,520
function of as any user assigned

511
00:21:02,520 --> 00:21:05,460
identity is attached to it because if we

512
00:21:05,460 --> 00:21:07,740
do have it we can try to create an

513
00:21:07,740 --> 00:21:10,140
access token to those identities and

514
00:21:10,140 --> 00:21:12,240
then abuse their permissions and do some

515
00:21:12,240 --> 00:21:13,799
additional lateral movement in the

516
00:21:13,799 --> 00:21:14,940
environment

517
00:21:14,940 --> 00:21:17,340
so this can actually be done by sending

518
00:21:17,340 --> 00:21:20,280
the get request to the site's endpoint

519
00:21:20,280 --> 00:21:22,679
and passing the XM function which is the

520
00:21:22,679 --> 00:21:25,380
name of the function up

521
00:21:25,380 --> 00:21:27,299
and we can see in the response that

522
00:21:27,299 --> 00:21:29,340
actually the function up has a user

523
00:21:29,340 --> 00:21:31,559
assigned identity attached to it the

524
00:21:31,559 --> 00:21:33,240
name of the identity is key Vault

525
00:21:33,240 --> 00:21:35,580
underscore storage account underscore

526
00:21:35,580 --> 00:21:36,780
reader

527
00:21:36,780 --> 00:21:39,419
and there is the client ID related to

528
00:21:39,419 --> 00:21:42,059
this identity

529
00:21:42,059 --> 00:21:44,460
the next thing that we will do we will

530
00:21:44,460 --> 00:21:46,620
create a Powershell script that we will

531
00:21:46,620 --> 00:21:50,100
run on the using the SCM panel with the

532
00:21:50,100 --> 00:21:53,220
user we've just created this script is

533
00:21:53,220 --> 00:21:55,440
going to create an access token to the

534
00:21:55,440 --> 00:21:57,659
identity that the function up has behind

535
00:21:57,659 --> 00:21:58,500
the scene

536
00:21:58,500 --> 00:22:00,960
so running this Powershell script will

537
00:22:00,960 --> 00:22:03,059
create an access token that we can then

538
00:22:03,059 --> 00:22:05,520
use and continue our relateral movement

539
00:22:05,520 --> 00:22:09,020
with the with this identity

540
00:22:09,960 --> 00:22:12,360
the next thing that we want to do is to

541
00:22:12,360 --> 00:22:14,700
create another Powershell script in

542
00:22:14,700 --> 00:22:16,860
order to do some more reconnaissance so

543
00:22:16,860 --> 00:22:18,960
we will start by doing the

544
00:22:18,960 --> 00:22:21,419
reconnaissance and listing if there are

545
00:22:21,419 --> 00:22:23,480
any storage accounts in the environment

546
00:22:23,480 --> 00:22:25,980
within storage account you usually store

547
00:22:25,980 --> 00:22:29,100
some containers and blobs within it with

548
00:22:29,100 --> 00:22:31,860
which is the equivalent of the S3 bucket

549
00:22:31,860 --> 00:22:34,080
that I'm sure everyone here is familiar

550
00:22:34,080 --> 00:22:37,380
with so this can be done by sending the

551
00:22:37,380 --> 00:22:40,559
following get request to the storage

552
00:22:40,559 --> 00:22:42,240
account endpoint

553
00:22:42,240 --> 00:22:44,400
and as a result we can see that there is

554
00:22:44,400 --> 00:22:46,919
a storage account in place named super

555
00:22:46,919 --> 00:22:49,020
secret stuff XM

556
00:22:49,020 --> 00:22:51,200
thank you

557
00:22:51,900 --> 00:22:53,880
we will continue and do some additional

558
00:22:53,880 --> 00:22:55,500
reconnaissance on that storage account

559
00:22:55,500 --> 00:22:58,080
to check if there are any containers set

560
00:22:58,080 --> 00:22:59,039
in place

561
00:22:59,039 --> 00:23:01,620
this can be done using this Powershell

562
00:23:01,620 --> 00:23:04,679
script which will send a get request to

563
00:23:04,679 --> 00:23:06,659
the containers endpoint within the

564
00:23:06,659 --> 00:23:10,400
function up within the storage account

565
00:23:11,400 --> 00:23:14,340
and we can see that there is a container

566
00:23:14,340 --> 00:23:16,860
named secret uh

567
00:23:16,860 --> 00:23:19,140
and we can now try and check if the

568
00:23:19,140 --> 00:23:21,179
container has any type of blobs within

569
00:23:21,179 --> 00:23:23,360
it

570
00:23:25,740 --> 00:23:27,539
so we will continue and create another

571
00:23:27,539 --> 00:23:30,179
Powershell script that will send another

572
00:23:30,179 --> 00:23:32,760
get request that we list all the

573
00:23:32,760 --> 00:23:36,360
different blobs within the container

574
00:23:36,360 --> 00:23:38,580
this will actually reveal that there is

575
00:23:38,580 --> 00:23:41,460
a ZIP file stored in the container named

576
00:23:41,460 --> 00:23:45,600
list named for authorized only and we

577
00:23:45,600 --> 00:23:48,299
will try to get our hands on this ZIP

578
00:23:48,299 --> 00:23:51,360
file by using the following Powershell

579
00:23:51,360 --> 00:23:54,120
script that will query that specific

580
00:23:54,120 --> 00:23:56,539
blob

581
00:23:57,960 --> 00:24:00,539
and this is get this is good so we

582
00:24:00,539 --> 00:24:02,400
executed the Powershell script we

583
00:24:02,400 --> 00:24:05,280
received the blob within it

584
00:24:05,280 --> 00:24:07,679
then we will try to access the file and

585
00:24:07,679 --> 00:24:09,840
we will see that he has some password

586
00:24:09,840 --> 00:24:13,080
protection and we have different type of

587
00:24:13,080 --> 00:24:14,940
things that we can do now we can try to

588
00:24:14,940 --> 00:24:18,960
brute force it and get the the file

589
00:24:18,960 --> 00:24:22,620
within the zip file and we can search in

590
00:24:22,620 --> 00:24:24,720
different key vaults and secret

591
00:24:24,720 --> 00:24:27,299
Management Services within Azure in

592
00:24:27,299 --> 00:24:28,919
order to see if any of them is stored

593
00:24:28,919 --> 00:24:31,140
over there this is pretty reasonable

594
00:24:31,140 --> 00:24:34,200
because it is stored within azure's

595
00:24:34,200 --> 00:24:36,240
storage account so we can try and search

596
00:24:36,240 --> 00:24:38,659
for it

597
00:24:39,539 --> 00:24:41,880
so we will do some more enumeration to

598
00:24:41,880 --> 00:24:44,340
check if there are any keywords in the

599
00:24:44,340 --> 00:24:46,620
environment this is similar to the

600
00:24:46,620 --> 00:24:48,780
previous command and I would elaborate a

601
00:24:48,780 --> 00:24:51,539
lot about it but we will see that there

602
00:24:51,539 --> 00:24:55,320
is a key Vault name secrets and that

603
00:24:55,320 --> 00:24:57,299
keyword actually has a secret named

604
00:24:57,299 --> 00:24:59,820
secret for zip encryption which sounds

605
00:24:59,820 --> 00:25:02,418
good to me

606
00:25:03,000 --> 00:25:04,980
and once we will try to get the secret

607
00:25:04,980 --> 00:25:07,679
and we will be able to see that there is

608
00:25:07,679 --> 00:25:10,500
a value of the secret and using that

609
00:25:10,500 --> 00:25:12,659
value will reveal and open the zip file

610
00:25:12,659 --> 00:25:15,419
and we will be able to get our hands on

611
00:25:15,419 --> 00:25:18,320
the sensitive file

612
00:25:18,780 --> 00:25:22,080
perfect so now I will play the recording

613
00:25:22,080 --> 00:25:25,020
of build part it will show you the

614
00:25:25,020 --> 00:25:27,360
Second Use case and some best practices

615
00:25:27,360 --> 00:25:29,820
securing Azure environment and I will

616
00:25:29,820 --> 00:25:33,320
come back at the end

617
00:25:40,260 --> 00:25:43,020
hey everyone thank you for joining us

618
00:25:43,020 --> 00:25:44,299
my name is

619
00:25:44,299 --> 00:25:47,460
I'm a security researcher Nixon cycle

620
00:25:47,460 --> 00:25:50,820
for the last past two years

621
00:25:50,820 --> 00:25:53,220
my current responsibilities are the

622
00:25:53,220 --> 00:25:54,900
topics of azure working directory

623
00:25:54,900 --> 00:25:57,900
architecture

624
00:25:58,740 --> 00:26:00,960
and now we will workspace

625
00:26:00,960 --> 00:26:04,620
but enough about me let's continue to

626
00:26:04,620 --> 00:26:06,179
the Second Use case

627
00:26:06,179 --> 00:26:10,880
a low perfect user to attending takeover

628
00:26:12,480 --> 00:26:13,500
so

629
00:26:13,500 --> 00:26:14,880
we're starting by explaining the

630
00:26:14,880 --> 00:26:16,919
attacker flow

631
00:26:16,919 --> 00:26:18,960
in this case it's a bit more complex

632
00:26:18,960 --> 00:26:21,120
since we have two different initial

633
00:26:21,120 --> 00:26:22,440
photos

634
00:26:22,440 --> 00:26:28,620
one on the Azure uh active directory

635
00:26:28,620 --> 00:26:31,740
ad connect passport application machine

636
00:26:31,740 --> 00:26:34,799
and the other one is the cloud I pick

637
00:26:34,799 --> 00:26:36,900
the cloud user account that the attacker

638
00:26:36,900 --> 00:26:39,179
obtained

639
00:26:39,179 --> 00:26:41,279
so the attack obtained user account and

640
00:26:41,279 --> 00:26:42,900
then starts the reconnaissance on the

641
00:26:42,900 --> 00:26:44,279
function

642
00:26:44,279 --> 00:26:46,980
discovered that he has the permissions

643
00:26:46,980 --> 00:26:49,919
to generate the jsonware token and

644
00:26:49,919 --> 00:26:52,980
modify SCM IP security instruction note

645
00:26:52,980 --> 00:26:56,279
access and gain control over the DSM

646
00:26:56,279 --> 00:26:58,980
administrative bundle

647
00:26:58,980 --> 00:27:01,620
he then uses the identity which is

648
00:27:01,620 --> 00:27:05,279
attached to that functional

649
00:27:05,279 --> 00:27:07,679
this identity gives them the permissions

650
00:27:07,679 --> 00:27:10,320
to add a password to any app

651
00:27:10,320 --> 00:27:14,600
registration within the Azure identity

652
00:27:15,000 --> 00:27:18,720
if bounds the attacker found that he has

653
00:27:18,720 --> 00:27:21,360
an application with permissions to

654
00:27:21,360 --> 00:27:24,360
change any use of the application method

655
00:27:24,360 --> 00:27:26,940
this is a great permissions for the

656
00:27:26,940 --> 00:27:29,299
attackers

657
00:27:30,299 --> 00:27:33,919
he then uses the password authentication

658
00:27:33,919 --> 00:27:37,500
on-prem machine to abuse it and combine

659
00:27:37,500 --> 00:27:39,840
with the upper secreting permission

660
00:27:39,840 --> 00:27:42,299
gain control of the global administrator

661
00:27:42,299 --> 00:27:45,080
in their account

662
00:27:46,140 --> 00:27:48,480
let's see what are the prerequisites for

663
00:27:48,480 --> 00:27:50,700
this second scenario

664
00:27:50,700 --> 00:27:52,500
so we need a user account with the

665
00:27:52,500 --> 00:27:54,480
custom wall it has the following Azure

666
00:27:54,480 --> 00:27:57,120
resource manager permissions

667
00:27:57,120 --> 00:27:59,700
next we need an application with the

668
00:27:59,700 --> 00:28:00,659
following

669
00:28:00,659 --> 00:28:03,799
gaffa boards

670
00:28:03,840 --> 00:28:06,000
we need a managed identity with a cloud

671
00:28:06,000 --> 00:28:07,620
application needs to go directly

672
00:28:07,620 --> 00:28:09,779
revolved which is attached to that

673
00:28:09,779 --> 00:28:11,159
functional

674
00:28:11,159 --> 00:28:13,380
and the passport application ID connect

675
00:28:13,380 --> 00:28:16,039
configuration

676
00:28:17,640 --> 00:28:20,279
great so we are starting by enumerating

677
00:28:20,279 --> 00:28:22,679
the attacker obtains the user account

678
00:28:22,679 --> 00:28:25,740
called Lobby reducer then enumerates

679
00:28:25,740 --> 00:28:27,600
score and all assignments and discover

680
00:28:27,600 --> 00:28:31,260
that he has STM FW updater or definition

681
00:28:31,260 --> 00:28:33,140
name

682
00:28:33,140 --> 00:28:36,059
tackle needs to know what are exactly

683
00:28:36,059 --> 00:28:38,520
those commissions

684
00:28:38,520 --> 00:28:41,400
so enumerates this all definition and

685
00:28:41,400 --> 00:28:43,320
discovered that the actions of that all

686
00:28:43,320 --> 00:28:46,919
intentions allows in the meaning of so

687
00:28:46,919 --> 00:28:49,559
manipulations on the functionals or

688
00:28:49,559 --> 00:28:52,039
sites

689
00:28:52,440 --> 00:28:56,520
this custom word definition is a scope

690
00:28:56,520 --> 00:29:00,020
is over the subscription

691
00:29:02,039 --> 00:29:04,559
so the attacker doesn't wait and tries

692
00:29:04,559 --> 00:29:07,520
to directly access the API

693
00:29:07,520 --> 00:29:11,520
and execute commands over the SCM

694
00:29:11,520 --> 00:29:14,279
C has the correct conditions to generate

695
00:29:14,279 --> 00:29:17,940
and jsonware token

696
00:29:17,940 --> 00:29:20,640
but unfortunately the attacker cannot

697
00:29:20,640 --> 00:29:21,899
access it

698
00:29:21,899 --> 00:29:25,639
saying the web app is unavailable

699
00:29:27,320 --> 00:29:29,460
starts and enumerates the current

700
00:29:29,460 --> 00:29:33,080
configuration of that function

701
00:29:35,100 --> 00:29:37,140
the targeting discovers that that

702
00:29:37,140 --> 00:29:39,360
function of as

703
00:29:39,360 --> 00:29:41,399
security and IP security restriction

704
00:29:41,399 --> 00:29:45,739
over the SCM administrative panel

705
00:29:45,899 --> 00:29:48,360
this blocks them from accessing the SM

706
00:29:48,360 --> 00:29:51,419
from anywhere in any IP address in the

707
00:29:51,419 --> 00:29:53,539
world

708
00:29:54,779 --> 00:29:57,899
so then the attacker starts and the

709
00:29:57,899 --> 00:30:01,980
attacker gets access in common sem gets

710
00:30:01,980 --> 00:30:06,260
a 103 forbidden access

711
00:30:07,980 --> 00:30:09,419
thank you

712
00:30:09,419 --> 00:30:11,100
dance

713
00:30:11,100 --> 00:30:14,220
changes the current SCM IP security

714
00:30:14,220 --> 00:30:17,940
restriction form denied to allow meaning

715
00:30:17,940 --> 00:30:20,100
that anybody now that has

716
00:30:20,100 --> 00:30:21,320
[Music]

717
00:30:21,320 --> 00:30:24,720
credentials to access dscn will be able

718
00:30:24,720 --> 00:30:27,539
to access it from anywhere in any active

719
00:30:27,539 --> 00:30:30,539
others

720
00:30:31,380 --> 00:30:33,360
as you can see we are talking now

721
00:30:33,360 --> 00:30:35,279
successfully accessed

722
00:30:35,279 --> 00:30:38,220
the Kudo would sem administrative bundle

723
00:30:38,220 --> 00:30:41,240
of that function

724
00:30:42,480 --> 00:30:43,919
and

725
00:30:43,919 --> 00:30:46,500
right now we are in in this scenario

726
00:30:46,500 --> 00:30:49,760
when in this

727
00:30:49,860 --> 00:30:53,820
we are in this specific spot

728
00:30:53,820 --> 00:30:56,100
next yeah

729
00:30:56,100 --> 00:30:58,559
a pneumonic sequence function of the

730
00:30:58,559 --> 00:31:01,200
current function for management database

731
00:31:01,200 --> 00:31:04,080
and discover that he has a user manager

732
00:31:04,080 --> 00:31:08,120
identity called function of identity

733
00:31:08,760 --> 00:31:11,880
Teddy enumerates the club and the whole

734
00:31:11,880 --> 00:31:13,320
definition of a cloud application

735
00:31:13,320 --> 00:31:14,880
administrator

736
00:31:14,880 --> 00:31:16,919
and discovered that that all definition

737
00:31:16,919 --> 00:31:19,980
in D has the ability to change any

738
00:31:19,980 --> 00:31:23,240
application owners

739
00:31:25,860 --> 00:31:28,200
the attacker then continues to enumerate

740
00:31:28,200 --> 00:31:30,539
the common wall assignments but as the

741
00:31:30,539 --> 00:31:31,860
whole definition ID of the cloud

742
00:31:31,860 --> 00:31:34,140
application means right though and it's

743
00:31:34,140 --> 00:31:35,760
covered that the function of identity

744
00:31:35,760 --> 00:31:40,080
which is attached to XM function 2

745
00:31:40,080 --> 00:31:42,720
as that already

746
00:31:42,720 --> 00:31:46,039
of that whole assignment

747
00:31:46,919 --> 00:31:50,580
great so now has the ability to change

748
00:31:50,580 --> 00:31:53,340
any application password by adding it

749
00:31:53,340 --> 00:31:56,039
himself as the owner and changing the

750
00:31:56,039 --> 00:31:58,320
the credentials of that password or

751
00:31:58,320 --> 00:32:00,120
adding a password credentials to that

752
00:32:00,120 --> 00:32:01,679
application

753
00:32:01,679 --> 00:32:05,700
now you need to find suitable Target

754
00:32:05,700 --> 00:32:09,059
currently we found an application called

755
00:32:09,059 --> 00:32:12,260
change up method

756
00:32:13,500 --> 00:32:15,539
attacker then checks the graph outboard

757
00:32:15,539 --> 00:32:18,600
permission of that application and sees

758
00:32:18,600 --> 00:32:20,399
that he has the user authentication

759
00:32:20,399 --> 00:32:24,379
method Dot retweitor

760
00:32:24,659 --> 00:32:27,000
by Microsoft this coined graphable

761
00:32:27,000 --> 00:32:28,980
permissions will allow the application

762
00:32:28,980 --> 00:32:31,080
to read and write any authentication

763
00:32:31,080 --> 00:32:33,299
method of all users in your organization

764
00:32:33,299 --> 00:32:36,059
without assigning user

765
00:32:36,059 --> 00:32:38,220
authentication methods includes things

766
00:32:38,220 --> 00:32:40,559
like a user's phone number and

767
00:32:40,559 --> 00:32:42,960
authenticator of app settings

768
00:32:42,960 --> 00:32:44,880
but not only

769
00:32:44,880 --> 00:32:47,299
this is extremely powerful

770
00:32:47,299 --> 00:32:49,500
permissions that will allow you to

771
00:32:49,500 --> 00:32:51,659
change many other use authentication

772
00:32:51,659 --> 00:32:52,919
methods

773
00:32:52,919 --> 00:32:57,260
this restriction or this uh

774
00:33:00,179 --> 00:33:02,399
attack release the current change of

775
00:33:02,399 --> 00:33:05,600
metal app owners

776
00:33:06,120 --> 00:33:08,580
and it sees that the owners of that

777
00:33:08,580 --> 00:33:10,760
application is currently

778
00:33:10,760 --> 00:33:15,080
test user account

779
00:33:15,659 --> 00:33:17,340
the attacker then uses the cloud

780
00:33:17,340 --> 00:33:19,860
application administrator permissions to

781
00:33:19,860 --> 00:33:22,860
generate the Json work token add it to

782
00:33:22,860 --> 00:33:25,260
the authorization and within the HTTP

783
00:33:25,260 --> 00:33:28,019
request that you can see right now

784
00:33:28,019 --> 00:33:31,260
and and the app ID of the application

785
00:33:31,260 --> 00:33:33,480
and the object ID of the user account

786
00:33:33,480 --> 00:33:36,179
that you want to add to the application

787
00:33:36,179 --> 00:33:39,019
as owners

788
00:33:40,500 --> 00:33:42,419
once the application was successfully

789
00:33:42,419 --> 00:33:45,600
sent and we can see that when

790
00:33:45,600 --> 00:33:48,179
enumerating again the owners and listing

791
00:33:48,179 --> 00:33:49,919
the owners of that application you can

792
00:33:49,919 --> 00:33:52,500
see the low privileged user

793
00:33:52,500 --> 00:33:54,679
foreign

794
00:34:01,380 --> 00:34:03,299
now we need to find a suitable Target

795
00:34:03,299 --> 00:34:05,100
right the attacker needs to put a

796
00:34:05,100 --> 00:34:06,840
suitable Target since we have the

797
00:34:06,840 --> 00:34:09,060
password indication 80 connect

798
00:34:09,060 --> 00:34:12,359
configuration we have a foothold in that

799
00:34:12,359 --> 00:34:15,899
machine we need to find a way to see if

800
00:34:15,899 --> 00:34:19,879
there are anything enabled users

801
00:34:20,520 --> 00:34:22,619
so we found that David student

802
00:34:22,619 --> 00:34:24,599
xmlabs.net

803
00:34:24,599 --> 00:34:27,839
a user principal name is a sync user

804
00:34:27,839 --> 00:34:29,639
account

805
00:34:29,639 --> 00:34:31,679
we then numerate the Global Mail wall

806
00:34:31,679 --> 00:34:34,980
definition ID using the the get this get

807
00:34:34,980 --> 00:34:36,480
request

808
00:34:36,480 --> 00:34:39,899
and we can see that this is the ID of

809
00:34:39,899 --> 00:34:41,339
the all definition ID of the global

810
00:34:41,339 --> 00:34:44,299
instructor or what

811
00:34:46,440 --> 00:34:48,899
attacker list the current Global Mr role

812
00:34:48,899 --> 00:34:51,440
assignments

813
00:34:52,199 --> 00:34:55,139
using the principle ID of David's

814
00:34:55,139 --> 00:34:57,260
account

815
00:34:58,500 --> 00:35:02,040
and we can see that David as the global

816
00:35:02,040 --> 00:35:04,680
old definition of a global administrator

817
00:35:04,680 --> 00:35:08,099
meaning this will be our Target or the

818
00:35:08,099 --> 00:35:10,700
attack is Target

819
00:35:13,099 --> 00:35:17,160
so right now we found a way to change

820
00:35:17,160 --> 00:35:19,980
any authentication method we found a

821
00:35:19,980 --> 00:35:21,079
user Target

822
00:35:21,079 --> 00:35:24,000
user account that we want to add as a

823
00:35:24,000 --> 00:35:24,839
Target

824
00:35:24,839 --> 00:35:26,640
now we need to use the password

825
00:35:26,640 --> 00:35:30,119
indication abuse our second initial

826
00:35:30,119 --> 00:35:31,859
in order to get these current

827
00:35:31,859 --> 00:35:34,560
credentials

828
00:35:34,560 --> 00:35:37,099
so

829
00:35:37,500 --> 00:35:41,280
Adam Chester or xpn two or three years

830
00:35:41,280 --> 00:35:43,920
ago was able to do a show POC over a

831
00:35:43,920 --> 00:35:45,900
past authentication abuse

832
00:35:45,900 --> 00:35:49,160
bus authentication is a type of

833
00:35:49,160 --> 00:35:51,839
configuration of the ad connect hybrid

834
00:35:51,839 --> 00:35:54,480
Authentication

835
00:35:54,480 --> 00:35:57,119
first he injected or delay injection

836
00:35:57,119 --> 00:36:00,599
into the DNA injection into Azure way

837
00:36:00,599 --> 00:36:03,660
the authentication agent service posts

838
00:36:03,660 --> 00:36:06,359
then use the thumbnail function in order

839
00:36:06,359 --> 00:36:10,200
to hook the Logan user w win API

840
00:36:10,200 --> 00:36:13,079
by booking this one API it was able to

841
00:36:13,079 --> 00:36:15,300
backdo any user account

842
00:36:15,300 --> 00:36:17,760
and login with the world or specific

843
00:36:17,760 --> 00:36:20,700
sling in this case the word hacked

844
00:36:20,700 --> 00:36:23,520
without knowing the actual password of

845
00:36:23,520 --> 00:36:26,119
that user

846
00:36:26,220 --> 00:36:31,220
let's see a short scenario a short plc

847
00:36:32,160 --> 00:36:36,740
So currently well at the machine

848
00:36:37,020 --> 00:36:39,300
our second photo we can see that we are

849
00:36:39,300 --> 00:36:41,400
part of two directory in the empty

850
00:36:41,400 --> 00:36:43,700
tenant

851
00:36:45,720 --> 00:36:47,520
in this case what

852
00:36:47,520 --> 00:36:51,440
seeing that David user account

853
00:36:52,140 --> 00:36:55,640
in the synced user account

854
00:36:57,780 --> 00:37:01,700
we can see his user principle name

855
00:37:04,020 --> 00:37:06,720
then we are looking at the assigned

856
00:37:06,720 --> 00:37:08,400
walls and you can see that he has the

857
00:37:08,400 --> 00:37:11,720
global means to the world as we just saw

858
00:37:11,720 --> 00:37:14,880
request and then we have a look at his

859
00:37:14,880 --> 00:37:18,320
current authentication methods

860
00:37:18,599 --> 00:37:21,240
he has an email account and a phone

861
00:37:21,240 --> 00:37:23,419
number

862
00:37:24,420 --> 00:37:27,180
so let's start the actual POC we use the

863
00:37:27,180 --> 00:37:31,079
system informal to see any uh loaded

864
00:37:31,079 --> 00:37:32,880
modules into that process there's

865
00:37:32,880 --> 00:37:34,680
already connected application agent

866
00:37:34,680 --> 00:37:35,940
service

867
00:37:35,940 --> 00:37:38,280
and you cannot see any malicious dealers

868
00:37:38,280 --> 00:37:40,700
right now

869
00:37:41,460 --> 00:37:44,640
we then use the simple program in in

870
00:37:44,640 --> 00:37:48,379
order to inject our malicious dll

871
00:37:49,260 --> 00:37:54,300
using the key ID of that process 505740

872
00:37:57,660 --> 00:37:59,760
then check again

873
00:37:59,760 --> 00:38:01,800
the properties and go to the loaded

874
00:38:01,800 --> 00:38:03,440
modules and you can see the

875
00:38:03,440 --> 00:38:06,300
backdogbook.dll is successfully loaded

876
00:38:06,300 --> 00:38:09,740
or injected to that process

877
00:38:12,660 --> 00:38:15,420
so now we see the shop your scene

878
00:38:15,420 --> 00:38:20,099
reference of a Child Company an array

879
00:38:20,099 --> 00:38:24,060
we then have the Boolean function logon

880
00:38:24,060 --> 00:38:26,700
book user organizer group book

881
00:38:26,700 --> 00:38:30,680
and then we have the if statements

882
00:38:31,800 --> 00:38:34,520
that says if password

883
00:38:34,520 --> 00:38:37,980
credential is equal to hacked

884
00:38:37,980 --> 00:38:41,060
always return to

885
00:38:47,579 --> 00:38:49,619
this means that while the attacker will

886
00:38:49,619 --> 00:38:52,640
try now to access

887
00:38:53,339 --> 00:38:55,500
David's user account from the same

888
00:38:55,500 --> 00:38:57,740
machine

889
00:39:08,040 --> 00:39:12,300
with the string hacked in the password

890
00:39:12,300 --> 00:39:14,660
to

891
00:39:15,119 --> 00:39:16,920
you will be able to bypass those

892
00:39:16,920 --> 00:39:19,980
restrictions and see that the current

893
00:39:19,980 --> 00:39:22,619
text or authentication method as we saw

894
00:39:22,619 --> 00:39:28,200
before it ends with 4 4. so

895
00:39:28,200 --> 00:39:30,060
now the vector needs to change the

896
00:39:30,060 --> 00:39:31,920
authentication method of that user in

897
00:39:31,920 --> 00:39:34,740
order to bypass this restriction right

898
00:39:34,740 --> 00:39:36,720
so it enumerates the current

899
00:39:36,720 --> 00:39:40,339
authentication methods

900
00:39:42,240 --> 00:39:44,400
and since that you have the phone number

901
00:39:44,400 --> 00:39:46,200
and the email address as we saw before

902
00:39:46,200 --> 00:39:49,220
you see

903
00:39:49,920 --> 00:39:52,560
next the attacker uses a page HTTP

904
00:39:52,560 --> 00:39:54,599
request in order to change the common

905
00:39:54,599 --> 00:39:57,300
phone number who is controlled phone

906
00:39:57,300 --> 00:39:59,480
number

907
00:40:00,060 --> 00:40:04,520
and was able to change it successfully

908
00:40:06,660 --> 00:40:08,940
now the attacker can successfully again

909
00:40:08,940 --> 00:40:11,160
to the Azure portal as a global missile

910
00:40:11,160 --> 00:40:14,220
at all great success

911
00:40:14,220 --> 00:40:17,959
let's see show to yourself

912
00:40:19,800 --> 00:40:21,660
so the attacker goes back to that

913
00:40:21,660 --> 00:40:23,880
machine

914
00:40:23,880 --> 00:40:25,980
logs in again after changing your

915
00:40:25,980 --> 00:40:28,380
authentication Rental phone number

916
00:40:28,380 --> 00:40:31,520
David's user account

917
00:40:37,740 --> 00:40:40,500
enter is going UPN and the current

918
00:40:40,500 --> 00:40:44,180
password hack as we did before

919
00:40:44,940 --> 00:40:47,460
and as you can see the end of the number

920
00:40:47,460 --> 00:40:51,240
is 4 6 we are controlled attackers at

921
00:40:51,240 --> 00:40:53,040
phone number

922
00:40:53,040 --> 00:40:55,560
he then receives the calling code a

923
00:40:55,560 --> 00:40:58,099
one-time password

924
00:40:59,220 --> 00:41:01,140
to his phone number

925
00:41:01,140 --> 00:41:06,020
enters that phone number for that code

926
00:41:06,660 --> 00:41:09,480
and can now successfully access

927
00:41:09,480 --> 00:41:11,220
the Azure ID

928
00:41:11,220 --> 00:41:13,619
as the global administrator

929
00:41:13,619 --> 00:41:15,180
account

930
00:41:15,180 --> 00:41:17,760
meaning that that user can now control

931
00:41:17,760 --> 00:41:20,760
over all the Azure independent and Azure

932
00:41:20,760 --> 00:41:23,480
results manager

933
00:41:43,920 --> 00:41:47,820
great so we found and were able to use

934
00:41:47,820 --> 00:41:50,280
it to get a global admin what are the

935
00:41:50,280 --> 00:41:52,380
best offices

936
00:41:52,380 --> 00:41:54,359
prosecute

937
00:41:54,359 --> 00:41:55,619
next

938
00:41:55,619 --> 00:41:58,260
um first is logs

939
00:41:58,260 --> 00:42:02,520
use any type of log to enumerate and

940
00:42:02,520 --> 00:42:03,720
detect

941
00:42:03,720 --> 00:42:06,060
real behaviors in your Authority

942
00:42:06,060 --> 00:42:08,460
environment or you as a resource manager

943
00:42:08,460 --> 00:42:11,220
remember activity logs Network logs

944
00:42:11,220 --> 00:42:14,040
Azure ID logs which contains Azure

945
00:42:14,040 --> 00:42:17,400
synagogues and audit logs resource DNS

946
00:42:17,400 --> 00:42:20,160
and application models

947
00:42:20,160 --> 00:42:22,820
next the concept that we all know

948
00:42:22,820 --> 00:42:25,140
Elizabeth refers to an information

949
00:42:25,140 --> 00:42:28,140
security Concept in which a user

950
00:42:28,140 --> 00:42:31,020
given the minimum level of access or

951
00:42:31,020 --> 00:42:33,540
permissions needed to perform its job

952
00:42:33,540 --> 00:42:36,140
functions

953
00:42:37,500 --> 00:42:39,480
for example

954
00:42:39,480 --> 00:42:42,000
use custom words and not built inverse

955
00:42:42,000 --> 00:42:45,000
be specific when defining actions stop

956
00:42:45,000 --> 00:42:47,040
using the workout sign

957
00:42:47,040 --> 00:42:49,500
always use a white supports and on The

958
00:42:49,500 --> 00:42:53,460
Blacklist approach and last one is to

959
00:42:53,460 --> 00:42:56,900
link the whole assignment scope

960
00:42:59,579 --> 00:43:03,300
next we have type of service called bib

961
00:43:03,300 --> 00:43:06,000
paint right now is deployed in as a

962
00:43:06,000 --> 00:43:07,800
service that is deployed in Azure

963
00:43:07,800 --> 00:43:10,200
architecture in Azure resource manager

964
00:43:10,200 --> 00:43:12,540
it helps you manage control and monitor

965
00:43:12,540 --> 00:43:13,560
access

966
00:43:13,560 --> 00:43:16,560
to important resources of others in the

967
00:43:16,560 --> 00:43:17,940
organization

968
00:43:17,940 --> 00:43:20,160
provides just in time for his access to

969
00:43:20,160 --> 00:43:22,380
Azure ID and Azure resources

970
00:43:22,380 --> 00:43:24,540
time-bound access to resources using

971
00:43:24,540 --> 00:43:26,660
start and end links

972
00:43:26,660 --> 00:43:29,819
required to activate through its own

973
00:43:29,819 --> 00:43:32,760
and imposed multiple authentication to

974
00:43:32,760 --> 00:43:36,000
activate any order

975
00:43:36,000 --> 00:43:39,060
what does it mean so in the assignments

976
00:43:39,060 --> 00:43:41,359
we have two types of assignment types

977
00:43:41,359 --> 00:43:44,700
two types of assignments the eligible

978
00:43:44,700 --> 00:43:46,980
assignment and the active assignment

979
00:43:46,980 --> 00:43:48,960
eligible assignments

980
00:43:48,960 --> 00:43:52,700
means that you can request in the in the

981
00:43:52,700 --> 00:43:55,680
time-bound access that they gave you

982
00:43:55,680 --> 00:43:58,980
a request for an award

983
00:43:58,980 --> 00:44:02,819
or request to answer to access specific

984
00:44:02,819 --> 00:44:04,619
order

985
00:44:04,619 --> 00:44:06,960
and it means that automatically it will

986
00:44:06,960 --> 00:44:09,500
be activate

987
00:44:10,680 --> 00:44:12,599
but

988
00:44:12,599 --> 00:44:14,520
in pain or previous identity management

989
00:44:14,520 --> 00:44:17,599
when defining all of different the

990
00:44:17,599 --> 00:44:20,160
default configuration of azure ID

991
00:44:20,160 --> 00:44:23,160
evolved in this case the global mineral

992
00:44:23,160 --> 00:44:26,160
does not require you to approve or in

993
00:44:26,160 --> 00:44:27,900
order to activate

994
00:44:27,900 --> 00:44:30,720
as we just saw in the scenario as you

995
00:44:30,720 --> 00:44:33,839
will be saying access maybe also can be

996
00:44:33,839 --> 00:44:36,420
bypassed very easily with the right

997
00:44:36,420 --> 00:44:38,880
permissions

998
00:44:38,880 --> 00:44:41,220
it's crucial to do the correct

999
00:44:41,220 --> 00:44:43,020
configuration and not to use the

1000
00:44:43,020 --> 00:44:45,560
different one

1001
00:44:48,359 --> 00:44:50,819
now we have the conditional access at

1002
00:44:50,819 --> 00:44:53,460
the stimulus there are even then

1003
00:44:53,460 --> 00:44:55,740
statements if user wants to access the

1004
00:44:55,740 --> 00:44:57,720
resource then they must complete an

1005
00:44:57,720 --> 00:45:01,140
action for example a user that wants to

1006
00:45:01,140 --> 00:45:04,260
access the online machine in the machine

1007
00:45:04,260 --> 00:45:07,440
needs to enforce it's being fought by an

1008
00:45:07,440 --> 00:45:08,700
MFA

1009
00:45:08,700 --> 00:45:11,160
but if the user wants to access the

1010
00:45:11,160 --> 00:45:13,740
cloud apps he doesn't need to put any

1011
00:45:13,740 --> 00:45:17,839
mfao he doesn't have any restriction

1012
00:45:19,819 --> 00:45:22,380
policy can be configured to deny access

1013
00:45:22,380 --> 00:45:24,240
from different locations

1014
00:45:24,240 --> 00:45:26,400
different countries different range of

1015
00:45:26,400 --> 00:45:29,339
IP addresses or specific IP addresses

1016
00:45:29,339 --> 00:45:31,800
different sources or different targets

1017
00:45:31,800 --> 00:45:36,000
such as type devices users groups modes

1018
00:45:36,000 --> 00:45:39,260
and many many more

1019
00:45:39,780 --> 00:45:43,319
same as the same SP we have two ways to

1020
00:45:43,319 --> 00:45:44,940
control it

1021
00:45:44,940 --> 00:45:47,220
with the gulf Apple permissions which

1022
00:45:47,220 --> 00:45:48,720
will let you

1023
00:45:48,720 --> 00:45:50,940
to read change and delete every

1024
00:45:50,940 --> 00:45:52,859
conditional access

1025
00:45:52,859 --> 00:45:54,780
in addition there are two different

1026
00:45:54,780 --> 00:45:57,180
roles Azure active directory order

1027
00:45:57,180 --> 00:45:59,400
called condition access administrator or

1028
00:45:59,400 --> 00:46:00,720
custom world with the following

1029
00:46:00,720 --> 00:46:03,119
permissions that will lead you to change

1030
00:46:03,119 --> 00:46:05,579
and delete or create new access new

1031
00:46:05,579 --> 00:46:08,839
conditional access policies

1032
00:46:09,000 --> 00:46:11,520
thank you very much for that I hope you

1033
00:46:11,520 --> 00:46:14,220
enjoyed now Sue is going to show you the

1034
00:46:14,220 --> 00:46:16,560
accent mode and number new added

1035
00:46:16,560 --> 00:46:20,180
scenarios that example

1036
00:46:21,599 --> 00:46:24,119
okay

1037
00:46:24,119 --> 00:46:27,480
perfect so I hope everyone enjoyed this

1038
00:46:27,480 --> 00:46:30,960
kind of abuses within azure if you liked

1039
00:46:30,960 --> 00:46:33,540
the different type of abuses to function

1040
00:46:33,540 --> 00:46:36,780
apps we have released a Blog about 10

1041
00:46:36,780 --> 00:46:39,359
different ways to compromise function

1042
00:46:39,359 --> 00:46:42,359
UPS each one abuses different types of

1043
00:46:42,359 --> 00:46:43,680
permissions that you can actually

1044
00:46:43,680 --> 00:46:46,680
configure within Azure resource manager

1045
00:46:46,680 --> 00:46:48,960
and you can use the link below to do to

1046
00:46:48,960 --> 00:46:51,680
to see it

1047
00:46:52,200 --> 00:46:55,260
perfect so about a year ago we released

1048
00:46:55,260 --> 00:46:57,900
a tool named XM goat which is an open

1049
00:46:57,900 --> 00:47:00,060
source tool with the purpose of teaching

1050
00:47:00,060 --> 00:47:03,480
about how to attack and protect Azure

1051
00:47:03,480 --> 00:47:06,180
environment XM goat is composed from

1052
00:47:06,180 --> 00:47:08,640
different scenarios each scenario is a

1053
00:47:08,640 --> 00:47:11,220
terraform script that you can deploy in

1054
00:47:11,220 --> 00:47:14,700
the environment which will provision a

1055
00:47:14,700 --> 00:47:17,220
vulnerable environment each one of them

1056
00:47:17,220 --> 00:47:19,619
has different use cases that you can do

1057
00:47:19,619 --> 00:47:22,740
and we created two additional new

1058
00:47:22,740 --> 00:47:25,500
scenarios and we released them today so

1059
00:47:25,500 --> 00:47:28,020
you can go to the GitHub see them and

1060
00:47:28,020 --> 00:47:29,760
obviously if you want you can contribute

1061
00:47:29,760 --> 00:47:32,579
and add more scenarios it will be

1062
00:47:32,579 --> 00:47:34,140
awesome

1063
00:47:34,140 --> 00:47:36,440
so the first scenarios that we created

1064
00:47:36,440 --> 00:47:39,540
uh actually start with the user

1065
00:47:39,540 --> 00:47:43,800
using that user you we can generate JWT

1066
00:47:43,800 --> 00:47:47,160
tokens just as Bill showed you before uh

1067
00:47:47,160 --> 00:47:49,800
to the SCM panel of a function up then

1068
00:47:49,800 --> 00:47:52,800
we can abuse the identity attached to

1069
00:47:52,800 --> 00:47:56,819
that function up in order to add to add

1070
00:47:56,819 --> 00:47:58,380
the password for different application

1071
00:47:58,380 --> 00:48:00,660
this is due to the fact that the

1072
00:48:00,660 --> 00:48:01,859
identity has the application

1073
00:48:01,859 --> 00:48:03,720
administrator graph role assignment

1074
00:48:03,720 --> 00:48:05,400
attached to it

1075
00:48:05,400 --> 00:48:07,500
then one of the applications in the

1076
00:48:07,500 --> 00:48:09,660
environment actually has an application

1077
00:48:09,660 --> 00:48:12,359
permission that allow you to create new

1078
00:48:12,359 --> 00:48:13,680
graph role assignments in the

1079
00:48:13,680 --> 00:48:15,720
environment and you can create a new

1080
00:48:15,720 --> 00:48:18,119
role assignment to the user that we

1081
00:48:18,119 --> 00:48:20,400
started with and assign it with the

1082
00:48:20,400 --> 00:48:23,960
global administrator permissions

1083
00:48:24,000 --> 00:48:25,920
the Second Use case is the one that I

1084
00:48:25,920 --> 00:48:28,020
showed you earlier where we're starting

1085
00:48:28,020 --> 00:48:30,060
with the user that has owner permissions

1086
00:48:30,060 --> 00:48:32,359
over a specific application

1087
00:48:32,359 --> 00:48:34,560
then we can authenticate to the

1088
00:48:34,560 --> 00:48:37,800
application and publish a new XML user

1089
00:48:37,800 --> 00:48:40,920
to the sem service of the function up

1090
00:48:40,920 --> 00:48:43,200
then we can continue and abuse the

1091
00:48:43,200 --> 00:48:45,000
managed identity attached to the

1092
00:48:45,000 --> 00:48:47,660
function up in order to read a secret

1093
00:48:47,660 --> 00:48:50,940
from the key Vault and to read blobs

1094
00:48:50,940 --> 00:48:53,640
from Storage accounts and the blob will

1095
00:48:53,640 --> 00:48:55,680
be a zip file with password protection

1096
00:48:55,680 --> 00:48:59,160
that you can find within the functional

1097
00:48:59,160 --> 00:49:00,240
thank you

1098
00:49:00,240 --> 00:49:02,579
so we are about to end thank you

1099
00:49:02,579 --> 00:49:05,700
everyone for uh joining today

1100
00:49:05,700 --> 00:49:08,359
thank you

1101
00:49:10,020 --> 00:49:12,920
any questions

1102
00:49:17,880 --> 00:49:19,260
I'm assuming you've shared this with

1103
00:49:19,260 --> 00:49:21,780
Microsoft security right and so not

1104
00:49:21,780 --> 00:49:24,420
really because it's not an actual

1105
00:49:24,420 --> 00:49:26,040
vulnerability in the environment it's

1106
00:49:26,040 --> 00:49:28,440
more of an abuse of different features

1107
00:49:28,440 --> 00:49:31,500
that you can do within it so it's really

1108
00:49:31,500 --> 00:49:35,819
a scenario based and related

1109
00:49:35,819 --> 00:49:38,160
all right last question is going to be

1110
00:49:38,160 --> 00:49:41,720
up here on your left

1111
00:49:46,680 --> 00:49:49,260
that was a great talk um a very eerily

1112
00:49:49,260 --> 00:49:53,839
similar uh chain of attack in the Orca

1113
00:49:53,839 --> 00:49:56,760
disclosure that they made back on April

1114
00:49:56,760 --> 00:49:59,280
11th turning list Keys permission into

1115
00:49:59,280 --> 00:50:01,800
remote code execution through Azure

1116
00:50:01,800 --> 00:50:04,560
functions and the msrc was kind of like

1117
00:50:04,560 --> 00:50:07,260
yeah that's by Design

1118
00:50:07,260 --> 00:50:09,119
um

1119
00:50:09,119 --> 00:50:11,400
why does this keep happening

1120
00:50:11,400 --> 00:50:14,339
and so I think that the main problem is

1121
00:50:14,339 --> 00:50:16,740
that the cloud security teams are not

1122
00:50:16,740 --> 00:50:19,440
really mature with their expertise and

1123
00:50:19,440 --> 00:50:22,319
usually whenever you are you will see an

1124
00:50:22,319 --> 00:50:24,420
Azure environment you will see that no

1125
00:50:24,420 --> 00:50:26,760
one is really using that much the custom

1126
00:50:26,760 --> 00:50:28,319
rules and customizing the different

1127
00:50:28,319 --> 00:50:30,839
permissions that you can do or just

1128
00:50:30,839 --> 00:50:32,760
usually giving and owner permissions

1129
00:50:32,760 --> 00:50:34,800
Global administrative permissions maybe

1130
00:50:34,800 --> 00:50:37,200
contributor which are really permissive

1131
00:50:37,200 --> 00:50:39,200
and allow you to do many things

1132
00:50:39,200 --> 00:50:42,240
most people are not really familiar with

1133
00:50:42,240 --> 00:50:44,040
the impact of each one of the

1134
00:50:44,040 --> 00:50:46,740
permissions that are there set in place

1135
00:50:46,740 --> 00:50:48,960
and you really need to be a real

1136
00:50:48,960 --> 00:50:51,119
experienced in order to understand what

1137
00:50:51,119 --> 00:50:52,920
will be the difference and the impact of

1138
00:50:52,920 --> 00:50:54,839
changing those things so usually the

1139
00:50:54,839 --> 00:50:56,400
permissions are really excessive and you

1140
00:50:56,400 --> 00:50:59,240
can do many things there

1141
00:51:03,359 --> 00:51:05,520
I I hate to do this but we have to turn

1142
00:51:05,520 --> 00:51:07,260
this room over for the next talk so you

1143
00:51:07,260 --> 00:51:08,640
are welcome to continue the conversation

1144
00:51:08,640 --> 00:51:10,680
I would stay and we can continue to talk

1145
00:51:10,680 --> 00:51:12,480
absolutely again give them a round of

1146
00:51:12,480 --> 00:51:15,380
applause thank you so much

