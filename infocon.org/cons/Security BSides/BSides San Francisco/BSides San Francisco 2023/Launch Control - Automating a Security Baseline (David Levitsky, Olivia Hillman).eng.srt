1
00:00:00,060 --> 00:00:01,680
hey there thanks for hanging in there

2
00:00:01,680 --> 00:00:02,760
with us

3
00:00:02,760 --> 00:00:04,440
um I'm Olivia Hillman I'm on the

4
00:00:04,440 --> 00:00:05,940
security data engineering team as part

5
00:00:05,940 --> 00:00:08,039
of security operations at benchling this

6
00:00:08,039 --> 00:00:10,019
is my colleague David today we're going

7
00:00:10,019 --> 00:00:11,639
to be going over the concept of a cloud

8
00:00:11,639 --> 00:00:14,219
security Baseline layer how we Define it

9
00:00:14,219 --> 00:00:16,619
how we built it and ultimately how you

10
00:00:16,619 --> 00:00:18,920
can benefit

11
00:00:18,960 --> 00:00:21,000
first some intros to get everyone

12
00:00:21,000 --> 00:00:22,800
familiar benchling is a cloud-based

13
00:00:22,800 --> 00:00:24,359
platform for biotech research and

14
00:00:24,359 --> 00:00:26,580
development as part of our work in

15
00:00:26,580 --> 00:00:28,140
helping our customers unlock the power

16
00:00:28,140 --> 00:00:30,599
of biotechnology we're responsible for

17
00:00:30,599 --> 00:00:32,220
the security of the sensitive data

18
00:00:32,220 --> 00:00:34,260
that's associated with the sense of the

19
00:00:34,260 --> 00:00:36,239
scientific work and identifying and

20
00:00:36,239 --> 00:00:38,880
addressing any consequent risk

21
00:00:38,880 --> 00:00:40,200
and that's where security operations

22
00:00:40,200 --> 00:00:42,239
comes in as benchling's detection

23
00:00:42,239 --> 00:00:44,100
response function

24
00:00:44,100 --> 00:00:46,379
the job of security operations is to

25
00:00:46,379 --> 00:00:48,600
detect threats and malicious activity to

26
00:00:48,600 --> 00:00:51,239
the company and its customers and

27
00:00:51,239 --> 00:00:53,760
remediate them as quickly as possible

28
00:00:53,760 --> 00:00:55,739
security data engineering is a subset of

29
00:00:55,739 --> 00:00:57,539
security operations and we're

30
00:00:57,539 --> 00:00:59,399
responsible for building key services

31
00:00:59,399 --> 00:01:02,100
and platforms that enable this DNR

32
00:01:02,100 --> 00:01:03,239
workflow

33
00:01:03,239 --> 00:01:05,339
for example we run a threat detection

34
00:01:05,339 --> 00:01:06,780
pipeline that collects security

35
00:01:06,780 --> 00:01:08,880
Telemetry from various sources

36
00:01:08,880 --> 00:01:11,040
and it feeds it to our detection team so

37
00:01:11,040 --> 00:01:12,299
they can write tailored rules to

38
00:01:12,299 --> 00:01:14,640
identify threats David and our colleague

39
00:01:14,640 --> 00:01:16,140
Brian presented on this yesterday so

40
00:01:16,140 --> 00:01:17,460
definitely go back and watch that if you

41
00:01:17,460 --> 00:01:19,799
missed it

42
00:01:19,799 --> 00:01:21,600
so who's this talk for

43
00:01:21,600 --> 00:01:23,400
this for security teams looking to

44
00:01:23,400 --> 00:01:24,960
scalably manage their organization's

45
00:01:24,960 --> 00:01:26,640
Cloud environments without causing

46
00:01:26,640 --> 00:01:29,460
friction and slowing down engineering

47
00:01:29,460 --> 00:01:30,960
this is for engineers that are

48
00:01:30,960 --> 00:01:33,060
responsible for deploying Security

49
00:01:33,060 --> 00:01:35,280
Services

50
00:01:35,280 --> 00:01:36,960
and everyone else in this room because

51
00:01:36,960 --> 00:01:38,880
there's something for everyone we'll be

52
00:01:38,880 --> 00:01:40,079
discussing technical details

53
00:01:40,079 --> 00:01:42,479
particularly around terraform but we'll

54
00:01:42,479 --> 00:01:43,860
aim to keep everyone on the same page so

55
00:01:43,860 --> 00:01:46,700
you'll still get the gist

56
00:01:46,860 --> 00:01:48,540
by the end of this talk you should have

57
00:01:48,540 --> 00:01:49,920
an understanding of Common Real World

58
00:01:49,920 --> 00:01:51,899
threats to Cloud environments be

59
00:01:51,899 --> 00:01:53,579
familiar with the concept of a baseline

60
00:01:53,579 --> 00:01:54,840
security layer in a public Cloud

61
00:01:54,840 --> 00:01:57,240
environment as well as some idea how to

62
00:01:57,240 --> 00:01:58,320
build one

63
00:01:58,320 --> 00:02:00,299
and ideally you'll stay awake but today

64
00:02:00,299 --> 00:02:01,680
at the end of a long conference weekend

65
00:02:01,680 --> 00:02:05,780
uh acclaimed success at 50 percent

66
00:02:07,439 --> 00:02:09,060
so now that we're aware of who we all

67
00:02:09,060 --> 00:02:10,679
are we'll get on the same page about

68
00:02:10,679 --> 00:02:12,319
what typically goes into a cloud account

69
00:02:12,319 --> 00:02:14,940
defining a security Baseline

70
00:02:14,940 --> 00:02:16,680
our implementation strategy and

71
00:02:16,680 --> 00:02:18,599
challenges and we'll wrap up with a

72
00:02:18,599 --> 00:02:19,680
summary and maybe some time for

73
00:02:19,680 --> 00:02:21,920
questions

74
00:02:21,959 --> 00:02:23,940
great let's get started going over Cloud

75
00:02:23,940 --> 00:02:26,819
environments in a general sense

76
00:02:26,819 --> 00:02:28,860
here's an outline of your typical cloud

77
00:02:28,860 --> 00:02:30,360
account or environment

78
00:02:30,360 --> 00:02:31,800
we've got the base infrastructure

79
00:02:31,800 --> 00:02:34,920
Network layer compute and application

80
00:02:34,920 --> 00:02:37,440
layer but is there anything missing

81
00:02:37,440 --> 00:02:39,000
hopefully the name of our talk tipped

82
00:02:39,000 --> 00:02:40,260
you off

83
00:02:40,260 --> 00:02:44,239
security layer layer 0 the foundations

84
00:02:44,340 --> 00:02:45,840
and why do we need a security layer

85
00:02:45,840 --> 00:02:46,680
anyway

86
00:02:46,680 --> 00:02:48,599
let's take a step back and let's look at

87
00:02:48,599 --> 00:02:50,459
how Cloud environments are breached

88
00:02:50,459 --> 00:02:51,660
today

89
00:02:51,660 --> 00:02:53,280
Google's Cloud threat intelligence team

90
00:02:53,280 --> 00:02:55,080
publishes a quarterly report on real

91
00:02:55,080 --> 00:02:57,959
world actors and compromises and that

92
00:02:57,959 --> 00:02:59,280
provides a great source of information

93
00:02:59,280 --> 00:03:00,599
to use when shaping our security

94
00:03:00,599 --> 00:03:02,099
policies

95
00:03:02,099 --> 00:03:04,680
further report nearly 60 percent of

96
00:03:04,680 --> 00:03:06,420
cloud compromises can be attributed to

97
00:03:06,420 --> 00:03:07,980
lack of auth or just basic

98
00:03:07,980 --> 00:03:10,200
misconfigurations

99
00:03:10,200 --> 00:03:12,720
with a sprawl of cloud services it's

100
00:03:12,720 --> 00:03:14,819
easy to get config wrong especially when

101
00:03:14,819 --> 00:03:16,620
you have many accounts managed by

102
00:03:16,620 --> 00:03:18,840
different business units without a

103
00:03:18,840 --> 00:03:20,280
standardized set of guardrails and

104
00:03:20,280 --> 00:03:21,540
policies

105
00:03:21,540 --> 00:03:22,860
and developers shouldn't be the ones

106
00:03:22,860 --> 00:03:23,940
having to worry about getting those

107
00:03:23,940 --> 00:03:25,800
things right they should have paved

108
00:03:25,800 --> 00:03:27,780
roads and Cloud environments set up with

109
00:03:27,780 --> 00:03:29,459
secure defaults

110
00:03:29,459 --> 00:03:31,260
but a baseline security layer

111
00:03:31,260 --> 00:03:32,700
encompasses much more than just

112
00:03:32,700 --> 00:03:35,879
standardization and base defaults

113
00:03:35,879 --> 00:03:37,260
for example

114
00:03:37,260 --> 00:03:38,879
let's take something as basic as a

115
00:03:38,879 --> 00:03:41,159
public S3 bucket these are so easily

116
00:03:41,159 --> 00:03:43,200
identifiable by malicious actors that

117
00:03:43,200 --> 00:03:45,239
according to 2023 state of the cloud by

118
00:03:45,239 --> 00:03:48,239
Wiz if your bucket names in GitHub it

119
00:03:48,239 --> 00:03:49,739
can typically be exploited within seven

120
00:03:49,739 --> 00:03:51,060
hours if you've accidentally made it

121
00:03:51,060 --> 00:03:52,379
public

122
00:03:52,379 --> 00:03:54,060
if your bucket has a predictable name

123
00:03:54,060 --> 00:03:57,000
like company Secrets or benchling users

124
00:03:57,000 --> 00:03:59,819
or my super secret data hackers can

125
00:03:59,819 --> 00:04:00,900
usually find and access your

126
00:04:00,900 --> 00:04:04,680
misconfigured bucket within 13 hours

127
00:04:04,680 --> 00:04:06,599
so we know private data should not be in

128
00:04:06,599 --> 00:04:08,220
public buckets but it happens all the

129
00:04:08,220 --> 00:04:09,120
time

130
00:04:09,120 --> 00:04:11,580
this incident with airport data

131
00:04:11,580 --> 00:04:14,280
uncovered by Sky High security exposed

132
00:04:14,280 --> 00:04:15,900
everything from employee IDs and photos

133
00:04:15,900 --> 00:04:18,060
which because present which could

134
00:04:18,060 --> 00:04:20,639
present a serious threat if leveraged by

135
00:04:20,639 --> 00:04:21,660
terrorist groups or criminal

136
00:04:21,660 --> 00:04:23,639
organizations to things like information

137
00:04:23,639 --> 00:04:25,860
about planes fuel lines and GPS map

138
00:04:25,860 --> 00:04:27,720
coordinates

139
00:04:27,720 --> 00:04:29,400
and directly from the security report

140
00:04:29,400 --> 00:04:32,100
they highlight how simple yet so harmful

141
00:04:32,100 --> 00:04:36,320
a misconfiguration like this can be

142
00:04:36,780 --> 00:04:39,000
so it's obviously important but what is

143
00:04:39,000 --> 00:04:42,120
a security Baseline layer

144
00:04:42,120 --> 00:04:44,280
security Baseline presents a guard rail

145
00:04:44,280 --> 00:04:45,900
that puts the onus on the security team

146
00:04:45,900 --> 00:04:48,540
or Engineers explicitly responsible for

147
00:04:48,540 --> 00:04:50,699
deploying Security Services to Define

148
00:04:50,699 --> 00:04:53,699
and manage and maintain these services

149
00:04:53,699 --> 00:04:55,680
this would remove the burden from other

150
00:04:55,680 --> 00:04:57,600
developers needing to make these

151
00:04:57,600 --> 00:05:00,180
decisions on a per account basis

152
00:05:00,180 --> 00:05:02,340
and security teams they need visibility

153
00:05:02,340 --> 00:05:04,560
into Cloud environments to enable things

154
00:05:04,560 --> 00:05:06,960
like Cloud log sources to identify and

155
00:05:06,960 --> 00:05:08,699
manage configuration and inventory and

156
00:05:08,699 --> 00:05:11,520
More in order to detect on and respond

157
00:05:11,520 --> 00:05:13,680
to malicious activity

158
00:05:13,680 --> 00:05:15,419
the Baseline provides a standardized way

159
00:05:15,419 --> 00:05:17,220
of doing that

160
00:05:17,220 --> 00:05:18,840
the configuration should be consistent

161
00:05:18,840 --> 00:05:20,880
across the company thus providing a

162
00:05:20,880 --> 00:05:22,560
foundation of hardened environments to

163
00:05:22,560 --> 00:05:25,820
make developers lives easier

164
00:05:26,639 --> 00:05:27,900
but how do you know if you and your

165
00:05:27,900 --> 00:05:30,300
company need one well if you have

166
00:05:30,300 --> 00:05:32,340
multiple Cloud counselor environments

167
00:05:32,340 --> 00:05:33,780
you've got more than one person working

168
00:05:33,780 --> 00:05:35,039
in the cloud

169
00:05:35,039 --> 00:05:36,360
you want repeatable security

170
00:05:36,360 --> 00:05:38,580
configuration across accounts

171
00:05:38,580 --> 00:05:40,860
you need to enable collection of logs

172
00:05:40,860 --> 00:05:42,780
and other security Telemetry for threat

173
00:05:42,780 --> 00:05:44,820
section incident response work

174
00:05:44,820 --> 00:05:46,680
and or you have expectations as a

175
00:05:46,680 --> 00:05:48,419
company to uphold particular standards

176
00:05:48,419 --> 00:05:50,880
for configuration and security

177
00:05:50,880 --> 00:05:52,440
so after reading through this list I'd

178
00:05:52,440 --> 00:05:53,820
bet the majority you fall under at least

179
00:05:53,820 --> 00:05:55,259
one of these categories

180
00:05:55,259 --> 00:05:57,300
uh great so let's help you figure out

181
00:05:57,300 --> 00:05:59,900
how to make one

182
00:06:00,479 --> 00:06:02,160
the cloud security Baseline should be a

183
00:06:02,160 --> 00:06:04,139
centralized platform we want everything

184
00:06:04,139 --> 00:06:06,539
managed in one place for Simplicity

185
00:06:06,539 --> 00:06:09,180
clear division of responsibility and

186
00:06:09,180 --> 00:06:11,639
uniformity in our foundation

187
00:06:11,639 --> 00:06:13,380
this gives us consistency across

188
00:06:13,380 --> 00:06:16,020
accounts and a repeatable process to

189
00:06:16,020 --> 00:06:17,639
instill confidence in the deployments

190
00:06:17,639 --> 00:06:19,560
that are going out

191
00:06:19,560 --> 00:06:21,780
the Baseline should be self-healing

192
00:06:21,780 --> 00:06:23,400
and out of the way of production outage

193
00:06:23,400 --> 00:06:25,199
impact

194
00:06:25,199 --> 00:06:26,940
it needs the ability to autonomously

195
00:06:26,940 --> 00:06:29,759
resolve issues based on a desired state

196
00:06:29,759 --> 00:06:31,560
and further any hiccup in the deployment

197
00:06:31,560 --> 00:06:33,539
process of your Telemetry aggregation

198
00:06:33,539 --> 00:06:36,120
should not stand in the way a business

199
00:06:36,120 --> 00:06:38,460
as usual for Developers

200
00:06:38,460 --> 00:06:40,199
and finally we want this Baseline to

201
00:06:40,199 --> 00:06:42,360
apply the Securities code philosophy

202
00:06:42,360 --> 00:06:43,680
we'll get better quality security

203
00:06:43,680 --> 00:06:45,720
deployments by following software

204
00:06:45,720 --> 00:06:47,819
engineering principles and we gain

205
00:06:47,819 --> 00:06:49,680
auditability with code as a source of

206
00:06:49,680 --> 00:06:51,660
Truth to know what's in place across

207
00:06:51,660 --> 00:06:54,620
Accounts at any given time

208
00:06:55,620 --> 00:06:57,000
so once all these requirements are

209
00:06:57,000 --> 00:06:58,800
achieved what does this enable for us

210
00:06:58,800 --> 00:07:00,419
well

211
00:07:00,419 --> 00:07:02,699
security teams gain insights Telemetry

212
00:07:02,699 --> 00:07:06,300
and centralized Cloud governance

213
00:07:06,300 --> 00:07:08,220
Engineers can work without worrying

214
00:07:08,220 --> 00:07:10,020
about deploying Security Services and

215
00:07:10,020 --> 00:07:11,699
defaults or having their work

216
00:07:11,699 --> 00:07:14,759
interrupted to do so

217
00:07:14,759 --> 00:07:16,500
the business can move fast knowing that

218
00:07:16,500 --> 00:07:19,139
the Baseline is covered

219
00:07:19,139 --> 00:07:21,479
and your life becomes easier when

220
00:07:21,479 --> 00:07:23,400
security is a platform developing and

221
00:07:23,400 --> 00:07:25,740
deploying Security Services faster and

222
00:07:25,740 --> 00:07:27,360
keeping up at scale

223
00:07:27,360 --> 00:07:28,860
and now I'll pass it on to David to

224
00:07:28,860 --> 00:07:30,840
discuss in detail how we built this to

225
00:07:30,840 --> 00:07:33,979
enable these wins for ourselves

226
00:07:39,720 --> 00:07:42,539
so Olivia outlined kind of the goals for

227
00:07:42,539 --> 00:07:44,880
uh what we want on build or what we want

228
00:07:44,880 --> 00:07:46,560
to see in a cloud security Baseline so

229
00:07:46,560 --> 00:07:48,539
now let's talk about some implementation

230
00:07:48,539 --> 00:07:49,800
details and how to actually build

231
00:07:49,800 --> 00:07:52,259
something like this

232
00:07:52,259 --> 00:07:55,199
so with all these things in mind we kind

233
00:07:55,199 --> 00:07:56,580
of had a couple of initial challenges

234
00:07:56,580 --> 00:07:59,099
that we knew we needed to solve

235
00:07:59,099 --> 00:08:01,440
um so you know as we want to build

236
00:08:01,440 --> 00:08:02,880
something that continues to enable

237
00:08:02,880 --> 00:08:04,979
people to do their jobs right you don't

238
00:08:04,979 --> 00:08:05,759
want to have something that's

239
00:08:05,759 --> 00:08:06,960
continuously going to get in their way

240
00:08:06,960 --> 00:08:09,240
so as we scale and as we continue to

241
00:08:09,240 --> 00:08:10,919
grow we want to make sure that this kind

242
00:08:10,919 --> 00:08:12,419
of security deployment pipeline is

243
00:08:12,419 --> 00:08:15,479
working successfully uh we're in AWS

244
00:08:15,479 --> 00:08:16,620
shop so there's a lot of different

245
00:08:16,620 --> 00:08:17,940
things with you know different regions

246
00:08:17,940 --> 00:08:19,080
different environments to support

247
00:08:19,080 --> 00:08:21,180
depending on business use cases so we

248
00:08:21,180 --> 00:08:22,620
need to make sure we have an ability to

249
00:08:22,620 --> 00:08:24,300
handle that as the as the business

250
00:08:24,300 --> 00:08:25,740
continues to grow

251
00:08:25,740 --> 00:08:27,780
roles and responsibilities Olivia

252
00:08:27,780 --> 00:08:29,220
touched on this but what's the

253
00:08:29,220 --> 00:08:30,660
distinction between the infrastructure

254
00:08:30,660 --> 00:08:33,179
team and the security team ownership so

255
00:08:33,179 --> 00:08:34,979
not necessarily the technical side of it

256
00:08:34,979 --> 00:08:36,539
but the people in the process side of it

257
00:08:36,539 --> 00:08:38,580
who responds if something breaks who

258
00:08:38,580 --> 00:08:40,620
gets the ticket who fixes it uh what

259
00:08:40,620 --> 00:08:43,580
does ownership look like

260
00:08:44,039 --> 00:08:46,620
so the hardest thing for us honestly

261
00:08:46,620 --> 00:08:48,120
wasn't even the technical side of this

262
00:08:48,120 --> 00:08:49,800
uh technical side was challenging which

263
00:08:49,800 --> 00:08:51,420
we'll talk about but it was really a

264
00:08:51,420 --> 00:08:53,100
culture shift in a paradigm shift for

265
00:08:53,100 --> 00:08:55,260
how we wanted to operate

266
00:08:55,260 --> 00:08:56,580
um and we're going to continuously say

267
00:08:56,580 --> 00:08:57,899
this throughout the rest of the

268
00:08:57,899 --> 00:08:59,399
presentation but we really believe in a

269
00:08:59,399 --> 00:09:01,380
security as a platform approach rather

270
00:09:01,380 --> 00:09:04,019
than a consultant style so pretty often

271
00:09:04,019 --> 00:09:05,459
you can have a business where you have

272
00:09:05,459 --> 00:09:06,839
your infrastructure team and you have

273
00:09:06,839 --> 00:09:08,820
your security team and the security team

274
00:09:08,820 --> 00:09:10,500
kind of operates in an ad hoc manner

275
00:09:10,500 --> 00:09:12,180
where they will create docs they will

276
00:09:12,180 --> 00:09:13,140
write tickets they will give

277
00:09:13,140 --> 00:09:15,060
recommendations and then it goes to the

278
00:09:15,060 --> 00:09:16,620
infrastructure team and most

279
00:09:16,620 --> 00:09:17,820
infrastructure teams are usually

280
00:09:17,820 --> 00:09:19,680
underwater they have their hands full

281
00:09:19,680 --> 00:09:21,060
with plenty of different things to do

282
00:09:21,060 --> 00:09:22,620
and the last thing they want to do is

283
00:09:22,620 --> 00:09:24,300
get this continuous barrage of security

284
00:09:24,300 --> 00:09:26,279
requests kind of thrown over the fence

285
00:09:26,279 --> 00:09:27,839
that they then have to prioritize

286
00:09:27,839 --> 00:09:29,760
there's never enough time in the day for

287
00:09:29,760 --> 00:09:31,500
anyone to get their work done so a lot

288
00:09:31,500 --> 00:09:33,000
of security things go a lot slower than

289
00:09:33,000 --> 00:09:34,260
they possibly could

290
00:09:34,260 --> 00:09:36,060
so we want to kind of shift this model

291
00:09:36,060 --> 00:09:38,339
in saying that hey we have you know a

292
00:09:38,339 --> 00:09:39,540
security team that is more than

293
00:09:39,540 --> 00:09:41,100
competent more than capable to do these

294
00:09:41,100 --> 00:09:43,080
things let's kind of manage and separate

295
00:09:43,080 --> 00:09:45,240
these duties out a little bit and reduce

296
00:09:45,240 --> 00:09:47,100
the decision fatigue from infrastructure

297
00:09:47,100 --> 00:09:48,420
and developer teams to kind of worry

298
00:09:48,420 --> 00:09:50,580
about the security aspect so it's a

299
00:09:50,580 --> 00:09:52,560
win-win for everyone

300
00:09:52,560 --> 00:09:53,760
um in order to kind of build this

301
00:09:53,760 --> 00:09:55,200
platform we decided to leverage

302
00:09:55,200 --> 00:09:57,060
terraform uh this is what our company

303
00:09:57,060 --> 00:09:58,860
uses so we wanted to standardize on that

304
00:09:58,860 --> 00:10:01,200
stack uh you can do something with cloud

305
00:10:01,200 --> 00:10:02,820
formation you can leverage your ISC

306
00:10:02,820 --> 00:10:04,320
tooling of choice

307
00:10:04,320 --> 00:10:06,420
um but terraform is is what we use and

308
00:10:06,420 --> 00:10:07,860
if you've never used terraform before

309
00:10:07,860 --> 00:10:10,080
I'm just going to have one quick slide

310
00:10:10,080 --> 00:10:12,420
which looks like it has much more text

311
00:10:12,420 --> 00:10:14,160
so I won't read through all of it but

312
00:10:14,160 --> 00:10:15,540
depending on your familiarity there's

313
00:10:15,540 --> 00:10:16,800
really only a couple things that I want

314
00:10:16,800 --> 00:10:18,480
to call out

315
00:10:18,480 --> 00:10:20,700
um State refers to your collection of

316
00:10:20,700 --> 00:10:23,820
resources so you have your IAC and you

317
00:10:23,820 --> 00:10:25,140
have your representation of what these

318
00:10:25,140 --> 00:10:26,580
resources actually look like in the

319
00:10:26,580 --> 00:10:28,019
cloud and this is what you're going to

320
00:10:28,019 --> 00:10:29,459
look at to see like what exists what

321
00:10:29,459 --> 00:10:32,040
doesn't exist what the Delta is

322
00:10:32,040 --> 00:10:33,660
um there's also a concept of a terraform

323
00:10:33,660 --> 00:10:35,339
provider which is the most important

324
00:10:35,339 --> 00:10:37,019
piece that I want to call out a

325
00:10:37,019 --> 00:10:39,300
terraform provider is essentially an API

326
00:10:39,300 --> 00:10:41,160
plugin for how you're going to be

327
00:10:41,160 --> 00:10:43,080
communicating with whatever you know

328
00:10:43,080 --> 00:10:44,760
third-party API you're integrating with

329
00:10:44,760 --> 00:10:46,920
in our case this is the AWS control

330
00:10:46,920 --> 00:10:48,839
plane you know if you leverage gcp or

331
00:10:48,839 --> 00:10:50,519
Azure something else there's specific

332
00:10:50,519 --> 00:10:52,440
providers for that there's tons of

333
00:10:52,440 --> 00:10:53,820
different terraform providers for a ton

334
00:10:53,820 --> 00:10:55,079
of different services not even

335
00:10:55,079 --> 00:10:57,540
necessarily Cloud providers but really

336
00:10:57,540 --> 00:10:59,519
want to make that definition as clear as

337
00:10:59,519 --> 00:11:01,079
possible because this is where the Crux

338
00:11:01,079 --> 00:11:02,940
of our technical challenge ended up

339
00:11:02,940 --> 00:11:05,120
being

340
00:11:05,339 --> 00:11:08,160
uh so uh there's a problem uh in

341
00:11:08,160 --> 00:11:09,959
terraform called well we're calling it

342
00:11:09,959 --> 00:11:12,540
The terraform State problem which is how

343
00:11:12,540 --> 00:11:14,100
do you kind of interact with different

344
00:11:14,100 --> 00:11:15,899
accounts in different regions to deploy

345
00:11:15,899 --> 00:11:18,120
a large number of resources so remember

346
00:11:18,120 --> 00:11:20,279
that a plug a provider is a plug-in used

347
00:11:20,279 --> 00:11:22,920
to interact with third-party apis so if

348
00:11:22,920 --> 00:11:25,440
we want to manage AWS resources we would

349
00:11:25,440 --> 00:11:27,779
use the terraform AWS provider which

350
00:11:27,779 --> 00:11:29,160
would take our resource declarations

351
00:11:29,160 --> 00:11:31,500
call the relevant AWS apis to get

352
00:11:31,500 --> 00:11:33,380
resources to a state that we requested

353
00:11:33,380 --> 00:11:36,839
well also in terraform it requires us to

354
00:11:36,839 --> 00:11:39,720
create a unique provider per account and

355
00:11:39,720 --> 00:11:41,760
per region because that's kind of how

356
00:11:41,760 --> 00:11:44,160
the AWS control plane operates so if you

357
00:11:44,160 --> 00:11:47,040
want to deploy in ec2 in account one in

358
00:11:47,040 --> 00:11:49,440
US West 1 and Usos 2 you're going to

359
00:11:49,440 --> 00:11:50,880
need two separate terraform providers

360
00:11:50,880 --> 00:11:52,079
for that to handle the different

361
00:11:52,079 --> 00:11:53,220
regionality

362
00:11:53,220 --> 00:11:55,079
you can imagine that this will start to

363
00:11:55,079 --> 00:11:57,360
break at scale if you have n accounts

364
00:11:57,360 --> 00:11:59,880
times M regions that's kind of the math

365
00:11:59,880 --> 00:12:01,140
that ends up happening and you're going

366
00:12:01,140 --> 00:12:02,640
to end up copy pasting stuff over and

367
00:12:02,640 --> 00:12:04,440
over again if you have something as

368
00:12:04,440 --> 00:12:06,300
simple as 20 accounts which is not a

369
00:12:06,300 --> 00:12:08,519
huge AWS deployment and you have 10

370
00:12:08,519 --> 00:12:10,019
regions that you want to support you

371
00:12:10,019 --> 00:12:11,160
know across different parts of the world

372
00:12:11,160 --> 00:12:13,100
you have 200 different modules

373
00:12:13,100 --> 00:12:15,420
instantiations which good luck trying to

374
00:12:15,420 --> 00:12:17,160
keep track of and good luck kind of copy

375
00:12:17,160 --> 00:12:18,420
pasting that code over and over again

376
00:12:18,420 --> 00:12:20,940
it's going to be a nightmare

377
00:12:20,940 --> 00:12:23,459
so when we first hit this we were

378
00:12:23,459 --> 00:12:24,480
worried that we were missing something

379
00:12:24,480 --> 00:12:26,519
so we were kind of looking for a fix we

380
00:12:26,519 --> 00:12:28,200
found the GitHub issues page for

381
00:12:28,200 --> 00:12:30,300
terraform and you can see that we were

382
00:12:30,300 --> 00:12:32,820
not the only ones to um run across this

383
00:12:32,820 --> 00:12:34,920
and not necessarily stoked about it so

384
00:12:34,920 --> 00:12:36,060
you can see folks saying they love

385
00:12:36,060 --> 00:12:38,220
terraform uh but you know this is a

386
00:12:38,220 --> 00:12:40,019
major drawback kind of an issue that's

387
00:12:40,019 --> 00:12:41,220
been open for a while not really

388
00:12:41,220 --> 00:12:42,240
addressed

389
00:12:42,240 --> 00:12:45,180
so from the hashicorp support page which

390
00:12:45,180 --> 00:12:46,800
documentation is really great we love

391
00:12:46,800 --> 00:12:49,200
terraform in general there's a couple of

392
00:12:49,200 --> 00:12:50,459
different workarounds to solve this

393
00:12:50,459 --> 00:12:52,380
specific problem of how do I dynamically

394
00:12:52,380 --> 00:12:54,240
generate providers for different regions

395
00:12:54,240 --> 00:12:56,279
and different accounts there's three

396
00:12:56,279 --> 00:12:58,800
options there one is to use external

397
00:12:58,800 --> 00:13:00,600
tooling to Auto generate your kind of

398
00:13:00,600 --> 00:13:02,820
terraform files they recommend bash or

399
00:13:02,820 --> 00:13:05,339
Powershell a popular one is also Terra

400
00:13:05,339 --> 00:13:07,019
Grant essentially the concept is don't

401
00:13:07,019 --> 00:13:08,459
repeat yourself so how do you

402
00:13:08,459 --> 00:13:10,139
dynamically avoid the you know the

403
00:13:10,139 --> 00:13:12,180
problem of repeating yourself the second

404
00:13:12,180 --> 00:13:15,000
one is to pay for terraform cloud and

405
00:13:15,000 --> 00:13:16,380
leverage their provider to kind of

406
00:13:16,380 --> 00:13:18,060
create this concept of a workspace which

407
00:13:18,060 --> 00:13:20,220
was defined on an earlier slide and they

408
00:13:20,220 --> 00:13:21,959
kind of handle that for you so you can

409
00:13:21,959 --> 00:13:24,420
create different workspaces and then use

410
00:13:24,420 --> 00:13:25,920
the workspaces to kind of handle your

411
00:13:25,920 --> 00:13:27,600
terraform State and then you don't need

412
00:13:27,600 --> 00:13:29,339
to reinstantiate Providers you can see

413
00:13:29,339 --> 00:13:31,399
that context into a different workspace

414
00:13:31,399 --> 00:13:35,339
lastly is using the cdk for terraform at

415
00:13:35,339 --> 00:13:36,839
the time we didn't really want to spend

416
00:13:36,839 --> 00:13:39,120
an innovation token on this in my

417
00:13:39,120 --> 00:13:40,620
personal opinion it's not really as

418
00:13:40,620 --> 00:13:42,060
fully fledged and developed as where it

419
00:13:42,060 --> 00:13:44,279
needs to to be so we really didn't want

420
00:13:44,279 --> 00:13:45,660
to risk our kind of production Security

421
00:13:45,660 --> 00:13:47,519
workflows on something like this we

422
00:13:47,519 --> 00:13:49,260
prefer to use kind of standard terraform

423
00:13:49,260 --> 00:13:51,060
which was much more proven and has a lot

424
00:13:51,060 --> 00:13:53,420
more support

425
00:13:54,600 --> 00:13:56,399
so let's kind of look at all these

426
00:13:56,399 --> 00:13:59,940
options and see what we chose to do so

427
00:13:59,940 --> 00:14:01,500
we kind of had a couple of different

428
00:14:01,500 --> 00:14:03,839
options and so the first one was hey

429
00:14:03,839 --> 00:14:05,279
we're going to use some sort of tooling

430
00:14:05,279 --> 00:14:06,959
to Auto generate all of the terraform

431
00:14:06,959 --> 00:14:08,579
for us so we're going to write some

432
00:14:08,579 --> 00:14:10,079
custom batch scripts or maybe use Terra

433
00:14:10,079 --> 00:14:11,220
Grant to kind of dynamically create

434
00:14:11,220 --> 00:14:12,779
things for us we're not going to repeat

435
00:14:12,779 --> 00:14:13,920
it we're going to see some sort of

436
00:14:13,920 --> 00:14:15,600
config have some code spit it all out

437
00:14:15,600 --> 00:14:17,820
and in this example the way that it's

438
00:14:17,820 --> 00:14:19,500
going to look is we have four AWS

439
00:14:19,500 --> 00:14:21,240
accounts we want to deploy resources

440
00:14:21,240 --> 00:14:23,339
across two different regions regions are

441
00:14:23,339 --> 00:14:25,320
represented with A and B accounts are

442
00:14:25,320 --> 00:14:27,360
numbered one through four so for this we

443
00:14:27,360 --> 00:14:30,000
need a bunch of different providers so

444
00:14:30,000 --> 00:14:31,200
we wanted to kind of Shard things

445
00:14:31,200 --> 00:14:32,940
vertically and say okay we're going to

446
00:14:32,940 --> 00:14:34,860
divide things into Dev staging and prod

447
00:14:34,860 --> 00:14:36,899
we're going to take all the dev accounts

448
00:14:36,899 --> 00:14:38,519
put them in a single workspace and then

449
00:14:38,519 --> 00:14:40,320
Auto generate the terraform for it do

450
00:14:40,320 --> 00:14:42,060
the same for staging and production it's

451
00:14:42,060 --> 00:14:44,160
going to all flow vertically there's a

452
00:14:44,160 --> 00:14:45,839
couple Cons with this approach you're

453
00:14:45,839 --> 00:14:47,459
going to need a very heavy cross account

454
00:14:47,459 --> 00:14:49,440
authentication because your workspace is

455
00:14:49,440 --> 00:14:50,760
going to need to go into all the

456
00:14:50,760 --> 00:14:52,440
accounts that are defined in it and

457
00:14:52,440 --> 00:14:54,360
applied terraform changes there so we

458
00:14:54,360 --> 00:14:55,860
didn't love that from kind of a least

459
00:14:55,860 --> 00:14:57,899
privileged model more importantly

460
00:14:57,899 --> 00:14:59,699
there's very tight coupling between

461
00:14:59,699 --> 00:15:01,800
different accounts and regions so if you

462
00:15:01,800 --> 00:15:03,959
have a failure in 1B on the very left

463
00:15:03,959 --> 00:15:05,820
side none of your changes are going to

464
00:15:05,820 --> 00:15:08,459
get propagated to 2A and 2B so a failure

465
00:15:08,459 --> 00:15:10,019
in one account and one region for an

466
00:15:10,019 --> 00:15:11,820
arbitrary thing things happen all the

467
00:15:11,820 --> 00:15:13,980
time could result in serious issues and

468
00:15:13,980 --> 00:15:16,199
break your deployment

469
00:15:16,199 --> 00:15:18,180
the other option is taking a horizontal

470
00:15:18,180 --> 00:15:20,820
approach where we still split things in

471
00:15:20,820 --> 00:15:22,500
Dev staging and prod so that you know

472
00:15:22,500 --> 00:15:24,060
following software engineering

473
00:15:24,060 --> 00:15:25,440
principles we can kind of test our

474
00:15:25,440 --> 00:15:28,380
security Baseline over time and the pro

475
00:15:28,380 --> 00:15:30,180
uh the biggest benefit with this is you

476
00:15:30,180 --> 00:15:31,560
don't have to Auto generate any

477
00:15:31,560 --> 00:15:33,120
terraform providers you can just

478
00:15:33,120 --> 00:15:35,459
bootstrap the workspaces seat all the

479
00:15:35,459 --> 00:15:37,139
context in there so you'll have one

480
00:15:37,139 --> 00:15:38,880
workspace for each account in each

481
00:15:38,880 --> 00:15:42,360
region this was cool but also would

482
00:15:42,360 --> 00:15:43,980
result in a position where we would have

483
00:15:43,980 --> 00:15:45,959
a ton of workspaces and if you wanted to

484
00:15:45,959 --> 00:15:47,880
figure out all the configuration for a

485
00:15:47,880 --> 00:15:49,980
single account if you have 10 regions

486
00:15:49,980 --> 00:15:51,300
you have 10 different workspaces

487
00:15:51,300 --> 00:15:53,579
tracking State we felt like that might

488
00:15:53,579 --> 00:15:55,380
be kind of challenging so we decided to

489
00:15:55,380 --> 00:15:56,639
kind of come up with our own approach

490
00:15:56,639 --> 00:15:58,440
which was to take a combination of

491
00:15:58,440 --> 00:16:01,199
approach one approach two and come up

492
00:16:01,199 --> 00:16:03,480
with a hybrid approach

493
00:16:03,480 --> 00:16:05,459
uh so this was kind of the final model

494
00:16:05,459 --> 00:16:07,500
that we settled on and again it's super

495
00:16:07,500 --> 00:16:09,180
basic here there's only four accounts in

496
00:16:09,180 --> 00:16:10,560
two regions so it looks pretty simple

497
00:16:10,560 --> 00:16:12,300
I'd like you to picture an environment

498
00:16:12,300 --> 00:16:13,920
where there's a thousand accounts and 15

499
00:16:13,920 --> 00:16:15,839
regions that you need to support and the

500
00:16:15,839 --> 00:16:17,639
concept of scale kind of starts to have

501
00:16:17,639 --> 00:16:19,260
a benefit of taking this approach very

502
00:16:19,260 --> 00:16:21,480
very quickly so here we have a

503
00:16:21,480 --> 00:16:23,399
one-to-one mapping of account and

504
00:16:23,399 --> 00:16:25,019
security configurations we have one

505
00:16:25,019 --> 00:16:26,519
Security account one workspace

506
00:16:26,519 --> 00:16:28,680
associated with it all the regions and

507
00:16:28,680 --> 00:16:30,000
all the resources that need to exist

508
00:16:30,000 --> 00:16:31,620
with it are kind of in that single block

509
00:16:31,620 --> 00:16:33,959
it's a much easier mental model to look

510
00:16:33,959 --> 00:16:36,979
at an account holistically

511
00:16:41,519 --> 00:16:43,259
so kind of wanted to show what this

512
00:16:43,259 --> 00:16:44,779
architecture looks like

513
00:16:44,779 --> 00:16:46,860
specifically around how we have a

514
00:16:46,860 --> 00:16:48,779
different bake cycle for Dev staging and

515
00:16:48,779 --> 00:16:51,180
production environments so what we do is

516
00:16:51,180 --> 00:16:53,579
we bootstrap the creation of all these

517
00:16:53,579 --> 00:16:55,680
workspaces in an infrastructure repo

518
00:16:55,680 --> 00:16:58,079
managed by our infrastructure team this

519
00:16:58,079 --> 00:16:59,820
is the only Reliance Independence that

520
00:16:59,820 --> 00:17:01,500
we have on our infrastructure team to

521
00:17:01,500 --> 00:17:03,360
deploy our infrastructure so as a new

522
00:17:03,360 --> 00:17:05,220
account gets added it gets added to a

523
00:17:05,220 --> 00:17:07,199
configuration a workspace automatically

524
00:17:07,199 --> 00:17:08,939
gets created depending on if account

525
00:17:08,939 --> 00:17:11,819
slides into a Dev staging or production

526
00:17:11,819 --> 00:17:13,199
configuration

527
00:17:13,199 --> 00:17:15,240
uh from there we do all the management

528
00:17:15,240 --> 00:17:18,119
in the security Baseline repo so we have

529
00:17:18,119 --> 00:17:20,579
workspaces that are created from the

530
00:17:20,579 --> 00:17:22,260
working directory in the infrarepo

531
00:17:22,260 --> 00:17:24,540
everything is mapped by environment

532
00:17:24,540 --> 00:17:26,520
and we use the security Baseline repo

533
00:17:26,520 --> 00:17:29,040
for orchestration and what we do where

534
00:17:29,040 --> 00:17:30,660
we have the actual logic and the

535
00:17:30,660 --> 00:17:32,160
application side even though this is

536
00:17:32,160 --> 00:17:34,260
infrastructure is on the very right we

537
00:17:34,260 --> 00:17:35,880
have all of our terraform modules so

538
00:17:35,880 --> 00:17:37,679
this is things like Telemetry whether

539
00:17:37,679 --> 00:17:40,380
it's DNS logging VPC flow logging you

540
00:17:40,380 --> 00:17:42,419
can have Auto remediation modules pretty

541
00:17:42,419 --> 00:17:44,640
much any security thing or function that

542
00:17:44,640 --> 00:17:46,500
you need to accomplish or deploy gets

543
00:17:46,500 --> 00:17:48,179
put in those modules gets sharded out

544
00:17:48,179 --> 00:17:49,860
across different environments is very

545
00:17:49,860 --> 00:17:51,960
easy to manage

546
00:17:51,960 --> 00:17:54,059
uh so we wanted to kind of show a real

547
00:17:54,059 --> 00:17:55,679
life example of how we implemented

548
00:17:55,679 --> 00:17:57,419
Network Telemetry uh specifically Route

549
00:17:57,419 --> 00:17:59,880
53 logging which is DNS logs inside of

550
00:17:59,880 --> 00:18:02,700
AWS vpcs and so if you think about the

551
00:18:02,700 --> 00:18:04,440
concept of rolling out DNS logging

552
00:18:04,440 --> 00:18:06,120
across all of your Cloud infrastructure

553
00:18:06,120 --> 00:18:08,160
and all of your Cloud environments this

554
00:18:08,160 --> 00:18:09,960
might sound like a daunting task maybe

555
00:18:09,960 --> 00:18:11,460
you have a bunch of different VPC

556
00:18:11,460 --> 00:18:12,840
instantiations you have different

557
00:18:12,840 --> 00:18:13,980
service owners you have different

558
00:18:13,980 --> 00:18:15,780
service teams that's actually part of

559
00:18:15,780 --> 00:18:17,160
the reason why we decided to write this

560
00:18:17,160 --> 00:18:19,440
this could be a multi-month project with

561
00:18:19,440 --> 00:18:21,120
this change you can roll all this out in

562
00:18:21,120 --> 00:18:22,980
less than a day so what you do is you

563
00:18:22,980 --> 00:18:24,840
establish your Route 53 logging module

564
00:18:24,840 --> 00:18:26,880
you'll test in a Dev environment once

565
00:18:26,880 --> 00:18:29,340
that looks good you'll promote it it

566
00:18:29,340 --> 00:18:30,960
will get deployed into terraform Cloud

567
00:18:30,960 --> 00:18:32,820
across all the different Dev accounts

568
00:18:32,820 --> 00:18:34,980
and you'll promote it over staging and

569
00:18:34,980 --> 00:18:37,020
eventually to production for us

570
00:18:37,020 --> 00:18:38,280
specifically for threat detection

571
00:18:38,280 --> 00:18:40,740
purpose goes all into an S3 bucket we

572
00:18:40,740 --> 00:18:42,000
ingest it into our threat detection

573
00:18:42,000 --> 00:18:43,440
pipeline where we have support for

574
00:18:43,440 --> 00:18:45,960
detections visualizations and general

575
00:18:45,960 --> 00:18:48,240
threat hunting so again really the

576
00:18:48,240 --> 00:18:49,440
biggest thing that we want to highlight

577
00:18:49,440 --> 00:18:51,539
here is a project that could take

578
00:18:51,539 --> 00:18:53,340
multiple full quarters multiple

579
00:18:53,340 --> 00:18:54,840
different teams something that you're

580
00:18:54,840 --> 00:18:56,100
maybe going back and forth for

581
00:18:56,100 --> 00:18:57,660
prioritization on the infrastructure

582
00:18:57,660 --> 00:19:00,120
side security now has the ownership and

583
00:19:00,120 --> 00:19:02,039
the accountability to come in build a

584
00:19:02,039 --> 00:19:03,660
service like this and immediately make

585
00:19:03,660 --> 00:19:05,460
impact without getting in anybody else's

586
00:19:05,460 --> 00:19:07,080
way or risking any production

587
00:19:07,080 --> 00:19:08,940
infrastructure so it's this very nice

588
00:19:08,940 --> 00:19:10,620
concept of security ownership which has

589
00:19:10,620 --> 00:19:12,000
worked very very well for us to give

590
00:19:12,000 --> 00:19:14,160
everyone time back on the security side

591
00:19:14,160 --> 00:19:16,260
and on the infrastructure side

592
00:19:16,260 --> 00:19:17,700
uh now we're going to pass it back to

593
00:19:17,700 --> 00:19:21,200
Olivia to wrap it all up

594
00:19:26,820 --> 00:19:28,980
so what did we do we created a platform

595
00:19:28,980 --> 00:19:30,900
to manage and deploy secure guard rail

596
00:19:30,900 --> 00:19:32,880
in our Cloud environments I know

597
00:19:32,880 --> 00:19:34,440
guardrail is a term we like to use a lot

598
00:19:34,440 --> 00:19:36,299
in security but it's also really useful

599
00:19:36,299 --> 00:19:37,679
in Cloud environments in general because

600
00:19:37,679 --> 00:19:40,140
as we saw before nearly 60 percent of

601
00:19:40,140 --> 00:19:41,880
cloud compromises come from very low

602
00:19:41,880 --> 00:19:43,799
hanging fruit

603
00:19:43,799 --> 00:19:45,480
we enabled easy collection of security

604
00:19:45,480 --> 00:19:47,520
Telemetry we walked through the example

605
00:19:47,520 --> 00:19:49,320
of Route 53 logging in our threat

606
00:19:49,320 --> 00:19:51,780
detection Pipeline and workflows

607
00:19:51,780 --> 00:19:53,760
we built a declarative configuration for

608
00:19:53,760 --> 00:19:55,679
security controls and applied that to

609
00:19:55,679 --> 00:19:57,660
all accounts in the same way no matter

610
00:19:57,660 --> 00:20:00,419
what account it is if it's a Dev account

611
00:20:00,419 --> 00:20:02,520
an acquired account an account you've

612
00:20:02,520 --> 00:20:04,200
never heard of before all you do is hook

613
00:20:04,200 --> 00:20:05,580
it up into a terraform workspace

614
00:20:05,580 --> 00:20:07,500
everything gets the same deployment no

615
00:20:07,500 --> 00:20:10,500
matter what it's self-healing it enables

616
00:20:10,500 --> 00:20:12,780
security workflows it's declarative and

617
00:20:12,780 --> 00:20:15,480
it's a source of Truth

618
00:20:15,480 --> 00:20:17,880
and how did we do it as David explained

619
00:20:17,880 --> 00:20:20,220
we have our different repos workspaces

620
00:20:20,220 --> 00:20:22,080
enabling our promotion process following

621
00:20:22,080 --> 00:20:23,880
software engineering cycle of Dev

622
00:20:23,880 --> 00:20:26,400
staging and prod and we instantiate our

623
00:20:26,400 --> 00:20:28,559
Baseline modules pulled in with the

624
00:20:28,559 --> 00:20:31,760
relevant version tags

625
00:20:32,460 --> 00:20:34,500
so we talked through our ideal list of

626
00:20:34,500 --> 00:20:36,059
requirements at the start prior to

627
00:20:36,059 --> 00:20:37,799
building the system the goals that we

628
00:20:37,799 --> 00:20:38,700
had

629
00:20:38,700 --> 00:20:40,740
from a security standpoint we do have

630
00:20:40,740 --> 00:20:42,600
the ability to create secure defaults in

631
00:20:42,600 --> 00:20:44,400
a guardrail we can collect security

632
00:20:44,400 --> 00:20:46,740
Telemetry and we have centralized

633
00:20:46,740 --> 00:20:48,059
governance

634
00:20:48,059 --> 00:20:49,440
we have higher quality security

635
00:20:49,440 --> 00:20:51,059
workflows with the Securities code

636
00:20:51,059 --> 00:20:53,220
approach with standards for testing and

637
00:20:53,220 --> 00:20:55,679
promoting across environments

638
00:20:55,679 --> 00:20:58,020
green check mark amazing

639
00:20:58,020 --> 00:20:59,940
from an engineering perspective rather

640
00:20:59,940 --> 00:21:01,080
than continuously going to the

641
00:21:01,080 --> 00:21:02,460
infrastructure team and asking them to

642
00:21:02,460 --> 00:21:04,260
do this work for us we can now do this

643
00:21:04,260 --> 00:21:05,340
work ourselves

644
00:21:05,340 --> 00:21:07,200
we're not pinging them on slack creating

645
00:21:07,200 --> 00:21:08,940
mountains of tickets there's fewer

646
00:21:08,940 --> 00:21:10,799
context switching and interruptions

647
00:21:10,799 --> 00:21:12,120
and we're speeding up getting things

648
00:21:12,120 --> 00:21:13,860
moving and giving Engineers their time

649
00:21:13,860 --> 00:21:15,299
back

650
00:21:15,299 --> 00:21:17,580
so end-to-end deployment is going from

651
00:21:17,580 --> 00:21:19,140
months to minutes to keep up with

652
00:21:19,140 --> 00:21:21,240
company velocity and that brings us to

653
00:21:21,240 --> 00:21:23,640
the business perspective

654
00:21:23,640 --> 00:21:25,620
we want developers to spin up new

655
00:21:25,620 --> 00:21:27,120
accounts and not have to worry about all

656
00:21:27,120 --> 00:21:29,760
the security stuff but be confident that

657
00:21:29,760 --> 00:21:31,919
the company is being taken care of

658
00:21:31,919 --> 00:21:34,260
we can give that confidence now so when

659
00:21:34,260 --> 00:21:36,120
you add a new account you're getting a

660
00:21:36,120 --> 00:21:37,679
security layer with everything we want

661
00:21:37,679 --> 00:21:39,659
and you need

662
00:21:39,659 --> 00:21:42,120
and lastly

663
00:21:42,120 --> 00:21:43,500
you

664
00:21:43,500 --> 00:21:44,880
as someone working with security

665
00:21:44,880 --> 00:21:47,340
Baseline your life becomes easier you

666
00:21:47,340 --> 00:21:49,440
have higher guarantees it's faster to

667
00:21:49,440 --> 00:21:52,080
roll out changes Securities code keeps

668
00:21:52,080 --> 00:21:53,460
things consistent

669
00:21:53,460 --> 00:21:55,620
and more specifically you you listening

670
00:21:55,620 --> 00:21:57,480
to this talk get to benefit from our

671
00:21:57,480 --> 00:21:59,280
challenges and triumphs to see if this

672
00:21:59,280 --> 00:22:02,600
will work for you and your organization

673
00:22:03,539 --> 00:22:05,460
and that concludes our presentation so

674
00:22:05,460 --> 00:22:07,140
thank you for your time and listening to

675
00:22:07,140 --> 00:22:09,500
our talk

676
00:22:09,900 --> 00:22:12,620
thank you

