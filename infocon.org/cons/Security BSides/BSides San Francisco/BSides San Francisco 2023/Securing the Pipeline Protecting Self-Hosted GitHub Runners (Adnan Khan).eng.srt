1
00:00:00,240 --> 00:00:02,760
hey everyone thank you for coming to my

2
00:00:02,760 --> 00:00:05,100
talk securing the pipeline protecting

3
00:00:05,100 --> 00:00:07,259
self-hosted GitHub Runners and probably

4
00:00:07,259 --> 00:00:10,679
your actions pipeline Secrets as well

5
00:00:10,679 --> 00:00:14,639
so about me my name is Adnan Khan I am a

6
00:00:14,639 --> 00:00:18,000
lead security engineer at praetorian I

7
00:00:18,000 --> 00:00:20,100
primarily work on praetorian's red team

8
00:00:20,100 --> 00:00:22,140
but I also do some web applications

9
00:00:22,140 --> 00:00:25,140
security assessments as well in my past

10
00:00:25,140 --> 00:00:27,539
life I was a software engineer and as a

11
00:00:27,539 --> 00:00:30,240
result I am intimately familiar with the

12
00:00:30,240 --> 00:00:32,579
conflict that comes between the need to

13
00:00:32,579 --> 00:00:34,680
get stuff done and the need to also not

14
00:00:34,680 --> 00:00:36,360
leave a lot of vulnerabilities along

15
00:00:36,360 --> 00:00:37,860
with that process

16
00:00:37,860 --> 00:00:39,059
so

17
00:00:39,059 --> 00:00:42,059
I was a speaker at shmukon 2023 along

18
00:00:42,059 --> 00:00:44,579
with two of my colleagues presenting an

19
00:00:44,579 --> 00:00:46,680
offensive focused stock called Phantom

20
00:00:46,680 --> 00:00:48,480
of the pipeline abusing self-hosted CI

21
00:00:48,480 --> 00:00:50,940
CD Runners focusing mostly on GitHub and

22
00:00:50,940 --> 00:00:53,700
we open sourced a tool called GitHub

23
00:00:53,700 --> 00:00:56,039
attack toolkit Gatto for short in the

24
00:00:56,039 --> 00:00:57,719
mascots of cat you can see the play on

25
00:00:57,719 --> 00:01:00,620
words there and this is my second

26
00:01:00,620 --> 00:01:03,480
conference talk and

27
00:01:03,480 --> 00:01:05,700
I'm based in Baltimore Maryland now but

28
00:01:05,700 --> 00:01:07,200
originally I'm from the East Bay Area so

29
00:01:07,200 --> 00:01:08,700
it's kind of nice to be on some familiar

30
00:01:08,700 --> 00:01:11,060
soil

31
00:01:11,880 --> 00:01:14,760
so why this stock well

32
00:01:14,760 --> 00:01:19,920
because devops so devops there's a lot a

33
00:01:19,920 --> 00:01:21,840
lot of moving parts and a lot of places

34
00:01:21,840 --> 00:01:25,439
where things can go wrong and securing

35
00:01:25,439 --> 00:01:28,439
devops environments is pretty hard and

36
00:01:28,439 --> 00:01:30,479
I've seen that personally on a lot of

37
00:01:30,479 --> 00:01:32,040
red team engagements targeting

38
00:01:32,040 --> 00:01:34,380
organizations that use GitHub actions

39
00:01:34,380 --> 00:01:35,640
and

40
00:01:35,640 --> 00:01:37,799
really there's there's a lot of chaos

41
00:01:37,799 --> 00:01:38,939
there's

42
00:01:38,939 --> 00:01:40,680
often a lot of repositories some

43
00:01:40,680 --> 00:01:42,180
organizations developers able to create

44
00:01:42,180 --> 00:01:44,119
their own repos you might have people

45
00:01:44,119 --> 00:01:46,619
creating individual dot files

46
00:01:46,619 --> 00:01:49,259
repositories it's things can be quite

47
00:01:49,259 --> 00:01:52,320
all over the place there are API tokens

48
00:01:52,320 --> 00:01:54,180
that might be added as repo Secrets as

49
00:01:54,180 --> 00:01:56,159
organization secrets and some

50
00:01:56,159 --> 00:01:58,320
organizations will use self-hosted

51
00:01:58,320 --> 00:02:00,840
Runners for deployment or other

52
00:02:00,840 --> 00:02:02,640
integration where they might not want to

53
00:02:02,640 --> 00:02:05,040
run it on githubs

54
00:02:05,040 --> 00:02:06,960
Azure hosted runners

55
00:02:06,960 --> 00:02:08,399
and

56
00:02:08,399 --> 00:02:09,959
compounding that there's a lot of

57
00:02:09,959 --> 00:02:13,140
permissions that can sometimes

58
00:02:13,140 --> 00:02:14,700
allow developers to make mistakes and

59
00:02:14,700 --> 00:02:16,560
not really know what they're allowing

60
00:02:16,560 --> 00:02:19,860
someone to do if there is a compromise

61
00:02:19,860 --> 00:02:22,140
so the way this presentation is going to

62
00:02:22,140 --> 00:02:24,420
be structured is I'm going to go give a

63
00:02:24,420 --> 00:02:26,940
quick primer on GitHub action CI CD and

64
00:02:26,940 --> 00:02:29,099
some of the specifics that apply to that

65
00:02:29,099 --> 00:02:31,080
product then I'm going to cover some

66
00:02:31,080 --> 00:02:34,379
risks and attacks that exist as well as

67
00:02:34,379 --> 00:02:36,840
attacks that I've personally conducted

68
00:02:36,840 --> 00:02:38,220
on red teams or some colleagues have

69
00:02:38,220 --> 00:02:40,200
conducted and

70
00:02:40,200 --> 00:02:42,300
how certain types of attacks can be

71
00:02:42,300 --> 00:02:44,519
detected and perhaps even prevented and

72
00:02:44,519 --> 00:02:45,360
then talk about some future

73
00:02:45,360 --> 00:02:47,040
considerations and if there's time open

74
00:02:47,040 --> 00:02:49,879
it up for some questions

75
00:02:49,920 --> 00:02:51,239
so

76
00:02:51,239 --> 00:02:54,000
GitHub actions is a little bit unique

77
00:02:54,000 --> 00:02:55,200
in

78
00:02:55,200 --> 00:02:57,180
with how it plays into the larger part

79
00:02:57,180 --> 00:03:00,540
with GitHub so since GitHub started as a

80
00:03:00,540 --> 00:03:02,160
company focused on open source projects

81
00:03:02,160 --> 00:03:05,280
and smaller teams and recently after the

82
00:03:05,280 --> 00:03:06,959
acquisition well it's been a while now

83
00:03:06,959 --> 00:03:09,599
after that by Microsoft it's

84
00:03:09,599 --> 00:03:11,640
continuously moving towards becoming an

85
00:03:11,640 --> 00:03:13,800
Enterprise SAS platform so there's a bit

86
00:03:13,800 --> 00:03:15,680
there's a bit of a conflict there

87
00:03:15,680 --> 00:03:19,319
the build agents themselves for kid of

88
00:03:19,319 --> 00:03:20,519
actions

89
00:03:20,519 --> 00:03:24,000
they can be self-hosted or hosted by

90
00:03:24,000 --> 00:03:26,580
GitHub and

91
00:03:26,580 --> 00:03:30,620
the secrets which are can be used for

92
00:03:30,620 --> 00:03:34,340
get up actions

93
00:03:36,180 --> 00:03:39,840
can be supplied at a fur repository or

94
00:03:39,840 --> 00:03:42,360
per organization level so there's a lot

95
00:03:42,360 --> 00:03:44,040
of places where Secrets could be left

96
00:03:44,040 --> 00:03:47,099
and then subsequently compromised and

97
00:03:47,099 --> 00:03:49,140
I also want to talk to you on some other

98
00:03:49,140 --> 00:03:51,840
CI CD solutions that are similar there

99
00:03:51,840 --> 00:03:53,340
are different attack paths that Target

100
00:03:53,340 --> 00:03:56,280
them they're

101
00:03:56,280 --> 00:03:58,200
are issues there with some of these

102
00:03:58,200 --> 00:03:59,879
other services as well so it's not just

103
00:03:59,879 --> 00:04:03,018
that I'm picking on GitHub

104
00:04:04,799 --> 00:04:07,560
so the way self-hosted Runners function

105
00:04:07,560 --> 00:04:11,099
on GitHub is that there is a net core

106
00:04:11,099 --> 00:04:12,900
application which is the GitHub actions

107
00:04:12,900 --> 00:04:14,760
Runner agent and that supports a number

108
00:04:14,760 --> 00:04:17,820
of different operating systems and that

109
00:04:17,820 --> 00:04:21,060
particular Runner can then be attached

110
00:04:21,060 --> 00:04:23,759
at a per repository level per

111
00:04:23,759 --> 00:04:26,040
organization level or a per Enterprise

112
00:04:26,040 --> 00:04:28,979
level and each each of these levels it

113
00:04:28,979 --> 00:04:30,660
essentially functions as a worker pool

114
00:04:30,660 --> 00:04:33,419
so jobs workflow jobs will execute and a

115
00:04:33,419 --> 00:04:35,400
runner will pick up the job complete it

116
00:04:35,400 --> 00:04:37,380
and then that Runner pool Runner will be

117
00:04:37,380 --> 00:04:40,259
available again and return to the pool

118
00:04:40,259 --> 00:04:41,639
so

119
00:04:41,639 --> 00:04:43,680
the problem is that the default

120
00:04:43,680 --> 00:04:46,860
configuration leaves a lot of open

121
00:04:46,860 --> 00:04:49,259
attack opportunities for an attacker

122
00:04:49,259 --> 00:04:52,199
mainly because the runner

123
00:04:52,199 --> 00:04:54,240
is not ephemeral and there's no

124
00:04:54,240 --> 00:04:56,400
isolation between builds so

125
00:04:56,400 --> 00:04:58,440
and I'm gonna really touch on that later

126
00:04:58,440 --> 00:05:01,100
in the talk

127
00:05:01,259 --> 00:05:02,940
I also want to introduce some get up

128
00:05:02,940 --> 00:05:05,580
personal access tokens so they these are

129
00:05:05,580 --> 00:05:09,240
API tokens that are associated with user

130
00:05:09,240 --> 00:05:12,000
accounts so GitHub is unique because a

131
00:05:12,000 --> 00:05:13,440
lot of times organizations will have

132
00:05:13,440 --> 00:05:16,080
developers join their personal GitHub

133
00:05:16,080 --> 00:05:17,340
accounts that they might also use for

134
00:05:17,340 --> 00:05:20,960
side projects to an organization and

135
00:05:20,960 --> 00:05:23,460
that will grant them access to their

136
00:05:23,460 --> 00:05:25,860
employers repositories and other assets

137
00:05:25,860 --> 00:05:28,620
but personal access tokens belong to the

138
00:05:28,620 --> 00:05:30,539
account itself so someone could create a

139
00:05:30,539 --> 00:05:32,759
token for personal usage but if the

140
00:05:32,759 --> 00:05:34,320
organization is not configured properly

141
00:05:34,320 --> 00:05:36,240
that token could provide access to a lot

142
00:05:36,240 --> 00:05:37,560
more

143
00:05:37,560 --> 00:05:40,020
and these tokens can also be used for

144
00:05:40,020 --> 00:05:42,720
traditional command line git operations

145
00:05:42,720 --> 00:05:45,240
so that's your standard cloning you're

146
00:05:45,240 --> 00:05:47,520
pushing code that can be disabled and

147
00:05:47,520 --> 00:05:49,320
I'll position to cover that a little bit

148
00:05:49,320 --> 00:05:51,360
later as well

149
00:05:51,360 --> 00:05:54,120
finally the way that these tokens work

150
00:05:54,120 --> 00:05:56,880
is oauth scopes

151
00:05:56,880 --> 00:06:00,419
so the key thing about these Scopes are

152
00:06:00,419 --> 00:06:03,300
for classic tokens is that they really

153
00:06:03,300 --> 00:06:05,940
just determine what API operations that

154
00:06:05,940 --> 00:06:07,919
token's allowed to use

155
00:06:07,919 --> 00:06:09,539
just because the scope is present

156
00:06:09,539 --> 00:06:10,979
doesn't mean a user can actually do it

157
00:06:10,979 --> 00:06:12,720
because there are certain API operations

158
00:06:12,720 --> 00:06:15,300
that require the user to also be an

159
00:06:15,300 --> 00:06:17,039
administrator in your organization so

160
00:06:17,039 --> 00:06:19,320
creating a user token for a member

161
00:06:19,320 --> 00:06:21,240
that's has an org admin scope doesn't

162
00:06:21,240 --> 00:06:25,380
really allow that but that just but I do

163
00:06:25,380 --> 00:06:26,819
want to cover how these tokens work

164
00:06:26,819 --> 00:06:29,160
because that also plays into where some

165
00:06:29,160 --> 00:06:32,660
of the over provisioning happens

166
00:06:35,900 --> 00:06:40,139
so there are two types of tokens until

167
00:06:40,139 --> 00:06:42,960
last fall there were just classic get up

168
00:06:42,960 --> 00:06:44,759
personal access tokens

169
00:06:44,759 --> 00:06:46,800
for since about 2021 they've just

170
00:06:46,800 --> 00:06:49,199
started with the GHB underscore string

171
00:06:49,199 --> 00:06:50,940
and that denotes a GitHub personal

172
00:06:50,940 --> 00:06:53,880
access token but with fine-grained

173
00:06:53,880 --> 00:06:55,500
personal access tokens which start with

174
00:06:55,500 --> 00:06:59,100
a GitHub underscore fat string they they

175
00:06:59,100 --> 00:07:01,080
allow obviously as the nav says finer

176
00:07:01,080 --> 00:07:03,960
grained access controls however

177
00:07:03,960 --> 00:07:06,060
they're like with anything that requires

178
00:07:06,060 --> 00:07:07,560
more finding control it requires more

179
00:07:07,560 --> 00:07:10,080
upfront effort to provision them so

180
00:07:10,080 --> 00:07:14,300
people often take the the short way

181
00:07:15,900 --> 00:07:20,340
and finally going into github's API

182
00:07:20,340 --> 00:07:22,979
GitHub has a very

183
00:07:22,979 --> 00:07:26,759
extensive API that supports almost any

184
00:07:26,759 --> 00:07:28,199
operation that you could probably think

185
00:07:28,199 --> 00:07:30,240
of wanting to do with GitHub there's an

186
00:07:30,240 --> 00:07:33,419
API endpoint for it there are some like

187
00:07:33,419 --> 00:07:34,860
for example API

188
00:07:34,860 --> 00:07:36,360
endpoint operations that allow you to

189
00:07:36,360 --> 00:07:38,340
directly interact with low level git

190
00:07:38,340 --> 00:07:40,680
blobs higher level than that there's

191
00:07:40,680 --> 00:07:43,380
ability to commit single files or pull

192
00:07:43,380 --> 00:07:45,539
single files from a repo using just that

193
00:07:45,539 --> 00:07:47,819
API so there's a lot of potential for

194
00:07:47,819 --> 00:07:50,220
enumeration and attack using just a

195
00:07:50,220 --> 00:07:52,620
token there and also there's some

196
00:07:52,620 --> 00:07:53,940
interesting things that you can do like

197
00:07:53,940 --> 00:07:57,419
if an organization restricts git clone

198
00:07:57,419 --> 00:07:59,460
git operations like clones or pushes to

199
00:07:59,460 --> 00:08:01,919
just users that have an authorized SSH

200
00:08:01,919 --> 00:08:03,319
key

201
00:08:03,319 --> 00:08:06,660
using the repository contents API to

202
00:08:06,660 --> 00:08:08,759
push single files or clone single files

203
00:08:08,759 --> 00:08:10,080
will allow you to bypass that

204
00:08:10,080 --> 00:08:11,940
restriction and get specific files from

205
00:08:11,940 --> 00:08:14,580
a repo and you can also list it so it's

206
00:08:14,580 --> 00:08:16,259
slower but you can get the same thing or

207
00:08:16,259 --> 00:08:18,060
do the same thing there so that's a

208
00:08:18,060 --> 00:08:20,780
little interesting thing

209
00:08:22,500 --> 00:08:25,440
finally going into the gaps related to

210
00:08:25,440 --> 00:08:29,520
the GitHub API the vast majority of read

211
00:08:29,520 --> 00:08:33,120
requests for are not logged so the

212
00:08:33,120 --> 00:08:34,679
problem here is that attacker that

213
00:08:34,679 --> 00:08:36,599
compromises a developer token can

214
00:08:36,599 --> 00:08:39,839
enumerate everything they need to before

215
00:08:39,839 --> 00:08:42,299
they generate a single event that would

216
00:08:42,299 --> 00:08:45,180
trigger a detection or uh

217
00:08:45,180 --> 00:08:46,680
a compromise and actually start an

218
00:08:46,680 --> 00:08:48,240
incident response process there are some

219
00:08:48,240 --> 00:08:51,120
exceptions like the one where if you

220
00:08:51,120 --> 00:08:53,519
just download a zip file from a rip of a

221
00:08:53,519 --> 00:08:55,800
repository the associated API request is

222
00:08:55,800 --> 00:08:59,279
logged as is the zip download operation

223
00:08:59,279 --> 00:09:01,980
there is some good news though just

224
00:09:01,980 --> 00:09:04,380
as of February of this year GitHub is

225
00:09:04,380 --> 00:09:07,080
finally released a private beta feature

226
00:09:07,080 --> 00:09:10,500
where someone an Enterprise can

227
00:09:10,500 --> 00:09:13,560
actually get a full fire hose of all the

228
00:09:13,560 --> 00:09:15,959
rest API events

229
00:09:15,959 --> 00:09:17,820
hitting their organization's assets so

230
00:09:17,820 --> 00:09:18,959
things are moving in the right direction

231
00:09:18,959 --> 00:09:22,260
but it'll be quite some time before

232
00:09:22,260 --> 00:09:25,440
this is made public beta and finally

233
00:09:25,440 --> 00:09:26,940
adopted and people actually write

234
00:09:26,940 --> 00:09:30,500
detections based on these events

235
00:09:30,959 --> 00:09:34,140
and then GitHub action secrets so this

236
00:09:34,140 --> 00:09:36,899
is something that is documented by

237
00:09:36,899 --> 00:09:39,480
GitHub it's not some not something

238
00:09:39,480 --> 00:09:41,160
unknown but

239
00:09:41,160 --> 00:09:43,620
some potentially people might not

240
00:09:43,620 --> 00:09:46,260
actually know this and because of how

241
00:09:46,260 --> 00:09:48,180
when you add a secret to a repository

242
00:09:48,180 --> 00:09:50,580
you need to be an administrator

243
00:09:50,580 --> 00:09:52,800
and to list it for from the GUI you need

244
00:09:52,800 --> 00:09:55,260
to be an administrator however any user

245
00:09:55,260 --> 00:09:56,940
that can just push code to a repository

246
00:09:56,940 --> 00:09:59,880
can execute GitHub actions workflows

247
00:09:59,880 --> 00:10:01,980
that can access every single repository

248
00:10:01,980 --> 00:10:04,880
secret that's attached or even

249
00:10:04,880 --> 00:10:07,860
organization wide secrets that are in

250
00:10:07,860 --> 00:10:09,480
the default group and therefore are

251
00:10:09,480 --> 00:10:12,899
accessible to all repositories so

252
00:10:12,899 --> 00:10:15,300
there's that gap between who can look

253
00:10:15,300 --> 00:10:16,620
and monitor

254
00:10:16,620 --> 00:10:19,740
secrets from the GUI and then who can

255
00:10:19,740 --> 00:10:21,899
actually utilize them or hit the API

256
00:10:21,899 --> 00:10:23,339
endpoint to list Secrets which again

257
00:10:23,339 --> 00:10:25,440
also requires the just write access to a

258
00:10:25,440 --> 00:10:28,940
repo as a normal collaborator

259
00:10:28,980 --> 00:10:32,279
okay so now that I've introduced GitHub

260
00:10:32,279 --> 00:10:35,399
actions a CI CD at a higher level why

261
00:10:35,399 --> 00:10:37,279
would an attacker want to Target

262
00:10:37,279 --> 00:10:39,720
self-hosted Runners well a lot of

263
00:10:39,720 --> 00:10:40,800
reasons

264
00:10:40,800 --> 00:10:42,540
the traditional thing when you think

265
00:10:42,540 --> 00:10:44,700
about GitHub is obviously source code

266
00:10:44,700 --> 00:10:46,140
theft that's a concern for a lot of

267
00:10:46,140 --> 00:10:48,300
organizations and one you obviously

268
00:10:48,300 --> 00:10:51,120
commonly think of but there's

269
00:10:51,120 --> 00:10:52,680
potential for taking secrets and then

270
00:10:52,680 --> 00:10:56,760
moving laterally to cloud or accounts

271
00:10:56,760 --> 00:10:58,339
there's

272
00:10:58,339 --> 00:11:01,140
artifact poisoning and trying to get

273
00:11:01,140 --> 00:11:03,300
malicious packages pushed where other

274
00:11:03,300 --> 00:11:05,760
people other systems other clients can

275
00:11:05,760 --> 00:11:07,620
pull them and now get malware on their

276
00:11:07,620 --> 00:11:09,600
systems and finally as we've all

277
00:11:09,600 --> 00:11:12,060
probably heard about the recent 3cx hat

278
00:11:12,060 --> 00:11:14,880
hack the potential for supply chain

279
00:11:14,880 --> 00:11:18,060
attacks that and if you're an attacker

280
00:11:18,060 --> 00:11:19,680
that wants to conduct supply chain

281
00:11:19,680 --> 00:11:21,240
attacks attacking organizations get up

282
00:11:21,240 --> 00:11:23,399
is probably the best place place to hit

283
00:11:23,399 --> 00:11:24,600
hit if you actually want to be

284
00:11:24,600 --> 00:11:27,260
successful and

285
00:11:27,260 --> 00:11:30,360
finally there's the risk if you're in

286
00:11:30,360 --> 00:11:32,100
organizations using self-hosted Runners

287
00:11:32,100 --> 00:11:35,279
for broader Network intrusion and

288
00:11:35,279 --> 00:11:37,680
lateral movement if they are not

289
00:11:37,680 --> 00:11:40,440
properly secured

290
00:11:40,440 --> 00:11:42,899
the kind of attacks that an attacker can

291
00:11:42,899 --> 00:11:45,480
conduct from against self-hosted Runners

292
00:11:45,480 --> 00:11:48,540
so if Runners aren't configured properly

293
00:11:48,540 --> 00:11:49,860
then

294
00:11:49,860 --> 00:11:52,620
malicious code that started off from one

295
00:11:52,620 --> 00:11:55,140
build can persist beyond that build and

296
00:11:55,140 --> 00:11:57,360
get secrets that are used from other

297
00:11:57,360 --> 00:11:59,940
builds even if that attacker that kicked

298
00:11:59,940 --> 00:12:01,800
off the initial workflow might not have

299
00:12:01,800 --> 00:12:04,260
had access to those specific secrets

300
00:12:04,260 --> 00:12:07,200
that they're now seeking to exfiltrate

301
00:12:07,200 --> 00:12:10,260
there's the ability to conduct supply

302
00:12:10,260 --> 00:12:12,899
chain attacks by sitting on a runner and

303
00:12:12,899 --> 00:12:14,760
modifying code associated with other

304
00:12:14,760 --> 00:12:17,100
builds as they check out code before

305
00:12:17,100 --> 00:12:19,680
compilation or pushing to a artifact

306
00:12:19,680 --> 00:12:22,140
repository and

307
00:12:22,140 --> 00:12:25,079
finally if you have just a compromise

308
00:12:25,079 --> 00:12:27,660
developer access token an attacker can

309
00:12:27,660 --> 00:12:30,120
knowing nothing else about what that

310
00:12:30,120 --> 00:12:32,820
token has access to get a foothold

311
00:12:32,820 --> 00:12:36,060
within an organization's Network by

312
00:12:36,060 --> 00:12:37,500
using that token to learn about the

313
00:12:37,500 --> 00:12:38,880
organization associated with and then

314
00:12:38,880 --> 00:12:41,959
conducting a attack

315
00:12:43,160 --> 00:12:46,800
at a high level this is kind of how the

316
00:12:46,800 --> 00:12:49,139
kind of the external to internal attack

317
00:12:49,139 --> 00:12:52,440
looks there's a compromised access token

318
00:12:52,440 --> 00:12:54,720
an attacker will push a malicious

319
00:12:54,720 --> 00:12:58,200
workflow to a code repository that is

320
00:12:58,200 --> 00:13:00,600
configured to have actions run on

321
00:13:00,600 --> 00:13:02,639
self-hosted Runners a self-hosted runner

322
00:13:02,639 --> 00:13:04,680
will then pick up the job

323
00:13:04,680 --> 00:13:07,079
only communicating there with GitHub

324
00:13:07,079 --> 00:13:09,899
and now that attacker has code running

325
00:13:09,899 --> 00:13:12,899
within a corporate Network again given

326
00:13:12,899 --> 00:13:14,100
that the runner isn't properly

327
00:13:14,100 --> 00:13:16,500
configured and

328
00:13:16,500 --> 00:13:19,860
finally you also at least personally on

329
00:13:19,860 --> 00:13:21,480
red teams have seen that deployment of

330
00:13:21,480 --> 00:13:23,339
EDR and Antivirus Solutions on Southwest

331
00:13:23,339 --> 00:13:25,440
Runners a bit rare we've seen it but

332
00:13:25,440 --> 00:13:27,480
we've also seen absolutely nothing so

333
00:13:27,480 --> 00:13:29,160
you can just drop unofficated malware

334
00:13:29,160 --> 00:13:33,439
and you're good to go that's not good

335
00:13:33,540 --> 00:13:37,079
so is this particular kind of attack

336
00:13:37,079 --> 00:13:39,120
happening well

337
00:13:39,120 --> 00:13:41,899
not from what I know not yet

338
00:13:41,899 --> 00:13:43,620
specifically looking at GitHub

339
00:13:43,620 --> 00:13:45,839
self-hosted Runners and conducting an

340
00:13:45,839 --> 00:13:49,079
attack and gaining access to

341
00:13:49,079 --> 00:13:51,300
Network systems and conducting Supply

342
00:13:51,300 --> 00:13:54,300
chains to actually not yet however

343
00:13:54,300 --> 00:13:56,940
really there's been a lack of tooling to

344
00:13:56,940 --> 00:14:00,300
Target these self-hosted Runners as well

345
00:14:00,300 --> 00:14:02,700
as there's not been that much

346
00:14:02,700 --> 00:14:05,820
documentation and tradecraft techniques

347
00:14:05,820 --> 00:14:07,980
to for an attacker to get a personal

348
00:14:07,980 --> 00:14:09,360
access token and don't know what they

349
00:14:09,360 --> 00:14:12,420
need to do with it and on however on red

350
00:14:12,420 --> 00:14:15,060
teams that praetorians has operated on

351
00:14:15,060 --> 00:14:18,120
we've yet to see a client that has had a

352
00:14:18,120 --> 00:14:20,220
secure self-hosted Runner implementation

353
00:14:20,220 --> 00:14:22,440
if they're using GitHub and in every

354
00:14:22,440 --> 00:14:24,480
single case that we've encountered

355
00:14:24,480 --> 00:14:27,300
that compromise developer access has

356
00:14:27,300 --> 00:14:29,940
allowed us to move laterally escalate

357
00:14:29,940 --> 00:14:32,160
privileges get prod AWS broad gcp

358
00:14:32,160 --> 00:14:34,440
accounts it's been access to crown

359
00:14:34,440 --> 00:14:36,720
jewels in every single case when we've

360
00:14:36,720 --> 00:14:38,459
seen organizations use GitHub and GitHub

361
00:14:38,459 --> 00:14:40,880
actions

362
00:14:41,519 --> 00:14:42,779
we also haven't been detected while

363
00:14:42,779 --> 00:14:45,300
doing any of these decks

364
00:14:45,300 --> 00:14:49,560
so this is a real world attack that was

365
00:14:49,560 --> 00:14:51,839
conducted on our as part of our one of

366
00:14:51,839 --> 00:14:53,579
our red team engagements Last Summer

367
00:14:53,579 --> 00:14:57,899
and the way it worked was we had access

368
00:14:57,899 --> 00:15:00,899
to we this was we were from an external

369
00:15:00,899 --> 00:15:03,060
standpoint we used another social

370
00:15:03,060 --> 00:15:04,380
engineering attack to essentially gain

371
00:15:04,380 --> 00:15:06,540
access to logs where one of them had a

372
00:15:06,540 --> 00:15:07,980
personal access token so I'm going to

373
00:15:07,980 --> 00:15:08,940
start there

374
00:15:08,940 --> 00:15:12,480
what we did was we thoroughly enumerated

375
00:15:12,480 --> 00:15:15,660
what that token had access to with

376
00:15:15,660 --> 00:15:17,880
and just hit using github's API because

377
00:15:17,880 --> 00:15:19,560
again we didn't have access to that

378
00:15:19,560 --> 00:15:21,180
organization on github.com we couldn't

379
00:15:21,180 --> 00:15:22,740
just open up a browser and do and do

380
00:15:22,740 --> 00:15:24,420
that

381
00:15:24,420 --> 00:15:27,240
then once we learned that they were

382
00:15:27,240 --> 00:15:29,940
using self-hosted Runners we created and

383
00:15:29,940 --> 00:15:32,699
pushed a malicious workflow to a

384
00:15:32,699 --> 00:15:34,320
repository we set that workflow to run

385
00:15:34,320 --> 00:15:36,959
on self-hosted Runners via a tag

386
00:15:36,959 --> 00:15:39,000
we then

387
00:15:39,000 --> 00:15:42,000
and then that then queued up the job a

388
00:15:42,000 --> 00:15:43,860
self-hosted runner picked up the

389
00:15:43,860 --> 00:15:46,620
workflow checked out the code and we

390
00:15:46,620 --> 00:15:48,480
were now on a self-hosted runner and

391
00:15:48,480 --> 00:15:51,779
that one had had Docker enabled so we

392
00:15:51,779 --> 00:15:53,399
what we did was we just spun up a

393
00:15:53,399 --> 00:15:56,399
detached Docker container that pulled

394
00:15:56,399 --> 00:15:59,040
down an implant and now we had

395
00:15:59,040 --> 00:16:00,500
persistence within their Network

396
00:16:00,500 --> 00:16:03,180
connecting back to our C2 that

397
00:16:03,180 --> 00:16:04,740
eventually then let us conduct

398
00:16:04,740 --> 00:16:06,060
privileged escalation lateral movement

399
00:16:06,060 --> 00:16:08,699
and we gained very high level privileges

400
00:16:08,699 --> 00:16:10,740
within that organization from that

401
00:16:10,740 --> 00:16:13,380
purely external standpoint and

402
00:16:13,380 --> 00:16:17,180
compromise access token

403
00:16:19,199 --> 00:16:21,480
okay

404
00:16:21,480 --> 00:16:23,519
all right and this is a similar attack

405
00:16:23,519 --> 00:16:25,440
path but the key difference here is

406
00:16:25,440 --> 00:16:28,500
instead of the goal being just attacks

407
00:16:28,500 --> 00:16:32,040
on other systems is where we started off

408
00:16:32,040 --> 00:16:35,760
with again that compromised access token

409
00:16:35,760 --> 00:16:37,139
similar in this case it was a

410
00:16:37,139 --> 00:16:39,480
penetration test so it was uh we had

411
00:16:39,480 --> 00:16:41,699
that developer access to start with but

412
00:16:41,699 --> 00:16:44,459
very low privileged we pushed a

413
00:16:44,459 --> 00:16:46,259
malicious workflow

414
00:16:46,259 --> 00:16:49,620
but now instead of just we still

415
00:16:49,620 --> 00:16:52,440
implanted the runner but now we just sat

416
00:16:52,440 --> 00:16:54,420
on that Runner and waited

417
00:16:54,420 --> 00:16:56,399
now again this is a self-hosted runner

418
00:16:56,399 --> 00:16:58,800
so it's the our build is the main the

419
00:16:58,800 --> 00:16:59,880
build that we kicked off is finished

420
00:16:59,880 --> 00:17:01,380
there's another

421
00:17:01,380 --> 00:17:03,839
it's now able to execute other builds so

422
00:17:03,839 --> 00:17:06,359
in this case there's a sensitive

423
00:17:06,359 --> 00:17:09,419
infrastructure repository where there

424
00:17:09,419 --> 00:17:11,099
are secrets in use that have high

425
00:17:11,099 --> 00:17:12,959
privileges so here comes an

426
00:17:12,959 --> 00:17:14,459
infrastructure developer they commit a

427
00:17:14,459 --> 00:17:16,079
code change maybe and now they want they

428
00:17:16,079 --> 00:17:19,079
push a change to to to to to run say

429
00:17:19,079 --> 00:17:22,020
integration tests now

430
00:17:22,020 --> 00:17:24,299
their workflows pushed that self-hosted

431
00:17:24,299 --> 00:17:26,459
Runner picks up the job and since it

432
00:17:26,459 --> 00:17:28,740
uses secrets and in this case it was

433
00:17:28,740 --> 00:17:30,840
secrets in a used in a shell script

434
00:17:30,840 --> 00:17:32,460
defined in the workflow which

435
00:17:32,460 --> 00:17:34,320
essentially on GitHub means it's just

436
00:17:34,320 --> 00:17:35,520
written out of the file system with the

437
00:17:35,520 --> 00:17:37,320
plain text secret since we're on that

438
00:17:37,320 --> 00:17:39,000
Runner we watch the file system the

439
00:17:39,000 --> 00:17:40,500
working directory of the self-hosted

440
00:17:40,500 --> 00:17:42,539
runner we now have access to those plain

441
00:17:42,539 --> 00:17:46,380
text secrets and we get the secret and

442
00:17:46,380 --> 00:17:49,919
we actually trade it so that's and again

443
00:17:49,919 --> 00:17:52,919
no detection and the developer has no

444
00:17:52,919 --> 00:17:54,240
idea that something bad happened because

445
00:17:54,240 --> 00:17:56,280
the build succeeded properly nothing bad

446
00:17:56,280 --> 00:17:58,200
happened from their perspective

447
00:17:58,200 --> 00:18:03,240
so this leads to risks and that are

448
00:18:03,240 --> 00:18:05,539
present and then some of the mitigations

449
00:18:05,539 --> 00:18:09,299
that can be used to

450
00:18:09,299 --> 00:18:12,600
fix a lot a lot of these problems

451
00:18:12,600 --> 00:18:15,419
so for like footholds obviously you have

452
00:18:15,419 --> 00:18:17,460
your making sure that there's Network

453
00:18:17,460 --> 00:18:20,100
segmentation monitoring builds for

454
00:18:20,100 --> 00:18:22,140
Secrets there's

455
00:18:22,140 --> 00:18:24,000
Access Control lists and auditing

456
00:18:24,000 --> 00:18:26,820
compromise personal access tokens using

457
00:18:26,820 --> 00:18:28,140
fine grain tokens so it's like your

458
00:18:28,140 --> 00:18:29,460
perimeter security

459
00:18:29,460 --> 00:18:31,919
making educating developers and not over

460
00:18:31,919 --> 00:18:33,840
provisioning access tokens detection

461
00:18:33,840 --> 00:18:37,500
engineering and generally for the build

462
00:18:37,500 --> 00:18:39,299
modification just having per job

463
00:18:39,299 --> 00:18:41,100
ephemeral Runners kind of takes that

464
00:18:41,100 --> 00:18:42,660
entire attack class out of the picture

465
00:18:42,660 --> 00:18:45,480
and for malware deployment looking at

466
00:18:45,480 --> 00:18:49,020
Network segmentations and you know on on

467
00:18:49,020 --> 00:18:51,059
self-hosted Runner

468
00:18:51,059 --> 00:18:54,059
mitigations

469
00:18:54,900 --> 00:18:58,020
and really to properly secure an

470
00:18:58,020 --> 00:19:00,299
organization's self-hosted Runners and

471
00:19:00,299 --> 00:19:01,559
actions pipelines against sophistic

472
00:19:01,559 --> 00:19:03,059
attackers really requires a layered

473
00:19:03,059 --> 00:19:06,780
Approach at every kind of step of the of

474
00:19:06,780 --> 00:19:09,539
being you know the external perimeter

475
00:19:09,539 --> 00:19:10,679
what do you do if something is

476
00:19:10,679 --> 00:19:13,020
compromised and properly responding to a

477
00:19:13,020 --> 00:19:15,539
conference if it does happen

478
00:19:15,539 --> 00:19:17,160
so

479
00:19:17,160 --> 00:19:20,760
for looking at Perimeter security one

480
00:19:20,760 --> 00:19:22,799
thing that we've seen some organizations

481
00:19:22,799 --> 00:19:26,059
do but some also don't is with GitHub

482
00:19:26,059 --> 00:19:30,600
you can require require saml SSO and

483
00:19:30,600 --> 00:19:32,880
what this basically does is when a

484
00:19:32,880 --> 00:19:34,080
developer creates a personal access

485
00:19:34,080 --> 00:19:37,320
token they will now need to specifically

486
00:19:37,320 --> 00:19:39,780
authorize that token to be able to

487
00:19:39,780 --> 00:19:42,360
access organization resources so this if

488
00:19:42,360 --> 00:19:44,160
you have this enabled in an organization

489
00:19:44,160 --> 00:19:47,039
it prevents the situation where a

490
00:19:47,039 --> 00:19:48,419
developer creates a token for personal

491
00:19:48,419 --> 00:19:50,700
usage but it also has access to

492
00:19:50,700 --> 00:19:53,280
organization's resources

493
00:19:53,280 --> 00:19:55,740
requiring SSH authentication for git

494
00:19:55,740 --> 00:19:58,559
operations can also be helpful it could

495
00:19:58,559 --> 00:20:00,480
prevent an attacker that just gets a

496
00:20:00,480 --> 00:20:01,860
token and now it can clone every single

497
00:20:01,860 --> 00:20:04,980
repo so if say cloning repos isn't a

498
00:20:04,980 --> 00:20:06,720
part of a normal workflow then maybe an

499
00:20:06,720 --> 00:20:09,900
organization can disable the ability to

500
00:20:09,900 --> 00:20:11,880
do get clone get push operations with

501
00:20:11,880 --> 00:20:13,620
just a personal access token

502
00:20:13,620 --> 00:20:16,500
and there's also cases where there's

503
00:20:16,500 --> 00:20:17,580
certain

504
00:20:17,580 --> 00:20:20,640
defaults that are not enabled that you

505
00:20:20,640 --> 00:20:22,380
that organizations can enable to get

506
00:20:22,380 --> 00:20:24,480
better visibility into actions that are

507
00:20:24,480 --> 00:20:26,760
happening IP logging an example of that

508
00:20:26,760 --> 00:20:28,679
and I'll show where you need to go to

509
00:20:28,679 --> 00:20:30,660
enable that setting and why it's off by

510
00:20:30,660 --> 00:20:31,980
default

511
00:20:31,980 --> 00:20:35,280
and keeping in mind that the point I

512
00:20:35,280 --> 00:20:37,200
touched on earlier where

513
00:20:37,200 --> 00:20:38,940
if someone has a right access right

514
00:20:38,940 --> 00:20:40,799
access to a repo they can access every

515
00:20:40,799 --> 00:20:42,480
single secret so

516
00:20:42,480 --> 00:20:44,160
having a secret in a repo and having

517
00:20:44,160 --> 00:20:45,840
someone that can write to it it's

518
00:20:45,840 --> 00:20:47,760
basically the same as giving them access

519
00:20:47,760 --> 00:20:49,140
to that plain text secret there's just a

520
00:20:49,140 --> 00:20:51,419
trivial exercise in pushing a workflow

521
00:20:51,419 --> 00:20:52,799
in between them and getting the

522
00:20:52,799 --> 00:20:55,440
plaintext value so it's important to

523
00:20:55,440 --> 00:20:58,020
understand what that means and

524
00:20:58,020 --> 00:21:00,900
limits secrets to only those who have

525
00:21:00,900 --> 00:21:03,000
really need to know to to of that plain

526
00:21:03,000 --> 00:21:05,480
text value

527
00:21:07,679 --> 00:21:11,039
so for and this is like the the IP

528
00:21:11,039 --> 00:21:13,020
logging setting which is disabled by

529
00:21:13,020 --> 00:21:14,820
default I believe it's for privacy

530
00:21:14,820 --> 00:21:17,520
reasons and it's in public beta that

531
00:21:17,520 --> 00:21:19,860
it's disabled by default but if you have

532
00:21:19,860 --> 00:21:21,240
GitHub Enterprise and you have the audit

533
00:21:21,240 --> 00:21:23,220
log it's probably smart to enable this

534
00:21:23,220 --> 00:21:25,200
because then you can have geoip based

535
00:21:25,200 --> 00:21:26,940
detections on a potential malicious

536
00:21:26,940 --> 00:21:29,280
activity

537
00:21:29,280 --> 00:21:30,659
and

538
00:21:30,659 --> 00:21:33,659
so classic tokens as I mentioned earlier

539
00:21:33,659 --> 00:21:36,480
these are tied to an individual user and

540
00:21:36,480 --> 00:21:39,179
then those Scopes like say repo or

541
00:21:39,179 --> 00:21:41,820
workflow so a repo scope is what would

542
00:21:41,820 --> 00:21:45,240
be needed to clone repositories workflow

543
00:21:45,240 --> 00:21:47,220
scope is what would be needed to run

544
00:21:47,220 --> 00:21:49,500
GitHub actions workflows those are all

545
00:21:49,500 --> 00:21:51,059
assigned to Creation time

546
00:21:51,059 --> 00:21:55,500
and with how classic tokens work there's

547
00:21:55,500 --> 00:21:57,419
a lot of API endpoints that allow you to

548
00:21:57,419 --> 00:21:59,280
learn about what they have access to so

549
00:21:59,280 --> 00:22:02,039
you can use a token to query what

550
00:22:02,039 --> 00:22:04,440
authenticated user it belongs to what

551
00:22:04,440 --> 00:22:06,120
organizations that user is a member of

552
00:22:06,120 --> 00:22:07,860
what repositories within that

553
00:22:07,860 --> 00:22:09,840
organization that user has access to so

554
00:22:09,840 --> 00:22:11,220
you see where I'm going where you

555
00:22:11,220 --> 00:22:12,960
eventually can map out everything you

556
00:22:12,960 --> 00:22:14,820
have access to and build an attack plan

557
00:22:14,820 --> 00:22:16,380
so

558
00:22:16,380 --> 00:22:18,539
to address this

559
00:22:18,539 --> 00:22:22,020
there is an option now to disable

560
00:22:22,020 --> 00:22:24,120
classic tokens completely but it's it's

561
00:22:24,120 --> 00:22:26,220
all or nothing so for an organization

562
00:22:26,220 --> 00:22:27,960
that might be new to GitHub actions and

563
00:22:27,960 --> 00:22:30,419
and personal access tokens are not

564
00:22:30,419 --> 00:22:32,460
ingrained in your current workflows

565
00:22:32,460 --> 00:22:33,900
perhaps

566
00:22:33,900 --> 00:22:36,480
taking those out of the equation now and

567
00:22:36,480 --> 00:22:38,460
dealing with the consequences is better

568
00:22:38,460 --> 00:22:41,340
than say years down the road where now

569
00:22:41,340 --> 00:22:43,200
you have a lot of tech debt and going

570
00:22:43,200 --> 00:22:45,900
back and changing all those processes to

571
00:22:45,900 --> 00:22:47,580
not use classic tokens is so much work

572
00:22:47,580 --> 00:22:49,740
so guess what priorities it falls down

573
00:22:49,740 --> 00:22:51,179
the totem pole of priorities and it

574
00:22:51,179 --> 00:22:53,280
never happens so that's something that

575
00:22:53,280 --> 00:22:55,620
to consider if

576
00:22:55,620 --> 00:22:58,860
if your organization needs tokens as

577
00:22:58,860 --> 00:23:01,080
part of the normal workflow and again

578
00:23:01,080 --> 00:23:03,780
that saml SSO feature again this all

579
00:23:03,780 --> 00:23:06,360
requires the GitHub Enterprise plan so

580
00:23:06,360 --> 00:23:08,640
which is their most expensive plan but

581
00:23:08,640 --> 00:23:12,240
really the team's plan is

582
00:23:12,240 --> 00:23:13,919
I would say right now impossible to

583
00:23:13,919 --> 00:23:15,600
secure properly against a secure

584
00:23:15,600 --> 00:23:17,940
sophisticated attacker but making sure

585
00:23:17,940 --> 00:23:23,059
that that saml SSO setting is is enabled

586
00:23:23,940 --> 00:23:27,120
so to address some of the issues with

587
00:23:27,120 --> 00:23:29,400
classic tokens organizations can use

588
00:23:29,400 --> 00:23:31,799
fine-grained personal access tokens and

589
00:23:31,799 --> 00:23:34,559
as the name suggests it allows you to

590
00:23:34,559 --> 00:23:37,140
have fine-grained controls over what

591
00:23:37,140 --> 00:23:40,440
repository the token can access and what

592
00:23:40,440 --> 00:23:43,320
specific kinds of operations that token

593
00:23:43,320 --> 00:23:45,720
can use to perform and Beyond just the

594
00:23:45,720 --> 00:23:47,880
limitation of the access organizations

595
00:23:47,880 --> 00:23:51,120
themselves can configure it so that if A

596
00:23:51,120 --> 00:23:52,620
fine grain token is

597
00:23:52,620 --> 00:23:54,900
created an auth and a user wants to

598
00:23:54,900 --> 00:23:56,460
authorize to an organization the

599
00:23:56,460 --> 00:23:58,559
organization can approve it before it

600
00:23:58,559 --> 00:24:00,539
has that access the current that's not

601
00:24:00,539 --> 00:24:02,220
the case with fine with classic tokens

602
00:24:02,220 --> 00:24:04,559
classic tokens developers authorize them

603
00:24:04,559 --> 00:24:06,480
even if there's there's SSO requirement

604
00:24:06,480 --> 00:24:09,360
for it developers authorize it and it's

605
00:24:09,360 --> 00:24:10,919
enabled the organizations can't go and

606
00:24:10,919 --> 00:24:13,440
stop that before it happens you can only

607
00:24:13,440 --> 00:24:15,960
do it after and it's just harder for

608
00:24:15,960 --> 00:24:18,120
attackers to use that and learn what I

609
00:24:18,120 --> 00:24:20,100
can access it can access and conduct

610
00:24:20,100 --> 00:24:23,820
these attacks that I mentioned earlier

611
00:24:23,820 --> 00:24:26,039
so

612
00:24:26,039 --> 00:24:30,020
alerting on that for classic tokens

613
00:24:30,020 --> 00:24:32,700
organizations can monitor when they're

614
00:24:32,700 --> 00:24:35,820
authorized and what Scopes that that

615
00:24:35,820 --> 00:24:37,980
token has access to so an organization

616
00:24:37,980 --> 00:24:41,400
could monitor the organization

617
00:24:41,400 --> 00:24:46,440
credential Grant log event and then

618
00:24:46,440 --> 00:24:49,740
for fire off

619
00:24:49,740 --> 00:24:50,820
um

620
00:24:50,820 --> 00:24:53,240
potentially different

621
00:24:53,240 --> 00:24:57,480
apis operations against github's API to

622
00:24:57,480 --> 00:24:59,220
list

623
00:24:59,220 --> 00:25:02,280
tokens that have been previously granted

624
00:25:02,280 --> 00:25:05,220
and even revoked them so that could be

625
00:25:05,220 --> 00:25:07,200
made part of like an incidence response

626
00:25:07,200 --> 00:25:09,620
Playbook where if uh

627
00:25:09,620 --> 00:25:12,240
unusual activities detected with the

628
00:25:12,240 --> 00:25:15,360
user organization can quickly list and

629
00:25:15,360 --> 00:25:16,919
revoke tokens that have been created

630
00:25:16,919 --> 00:25:19,740
associated with that user and that API

631
00:25:19,740 --> 00:25:22,500
response does display the Scopes so it

632
00:25:22,500 --> 00:25:24,659
could also be used to detect over

633
00:25:24,659 --> 00:25:26,700
provision tokens so it might not be a

634
00:25:26,700 --> 00:25:28,559
critical alert but it might be something

635
00:25:28,559 --> 00:25:30,600
where someone can message your developer

636
00:25:30,600 --> 00:25:32,100
say Hey you know this token's over

637
00:25:32,100 --> 00:25:33,299
provisioning can you see if you can

638
00:25:33,299 --> 00:25:35,220
configure provision in a more secure

639
00:25:35,220 --> 00:25:37,260
manner so that this something like this

640
00:25:37,260 --> 00:25:39,299
could help organizations move towards a

641
00:25:39,299 --> 00:25:42,000
better security posture with the kind of

642
00:25:42,000 --> 00:25:43,260
tokens that their developers are

643
00:25:43,260 --> 00:25:45,799
provisioning

644
00:25:47,700 --> 00:25:49,140
so

645
00:25:49,140 --> 00:25:51,240
all everything I've talked about so far

646
00:25:51,240 --> 00:25:54,059
is looking at preventing an attacker

647
00:25:54,059 --> 00:25:56,760
from getting access now say an attacker

648
00:25:56,760 --> 00:25:59,279
does get inside an organization with the

649
00:25:59,279 --> 00:26:01,380
right kind of access token and starts

650
00:26:01,380 --> 00:26:04,320
conducting these workflow attacks to

651
00:26:04,320 --> 00:26:06,419
attack self-hosted Runners as well as

652
00:26:06,419 --> 00:26:08,100
try to steal secrets well

653
00:26:08,100 --> 00:26:09,539
is there anything that can be done yeah

654
00:26:09,539 --> 00:26:12,240
there's a couple things

655
00:26:12,240 --> 00:26:15,539
so again I keep stating this but this is

656
00:26:15,539 --> 00:26:18,240
important but since any user that has

657
00:26:18,240 --> 00:26:20,279
write access can get Secrets via

658
00:26:20,279 --> 00:26:23,340
malicious GitHub actions workflows so

659
00:26:23,340 --> 00:26:26,400
I want to emphasize you I'll I've seen a

660
00:26:26,400 --> 00:26:28,620
lot of organizations that use Branch

661
00:26:28,620 --> 00:26:30,419
restrictions so there might be a

662
00:26:30,419 --> 00:26:32,340
workflow that runs for the main branch

663
00:26:32,340 --> 00:26:34,740
and has a runs on Main Branch in the

664
00:26:34,740 --> 00:26:37,740
workflow yaml file as if that's the

665
00:26:37,740 --> 00:26:39,480
verse that restricts access to the

666
00:26:39,480 --> 00:26:42,480
secret it doesn't so any user can just

667
00:26:42,480 --> 00:26:44,159
create that has right access can create

668
00:26:44,159 --> 00:26:46,080
a feature branch and push a new workflow

669
00:26:46,080 --> 00:26:48,900
that they control entirely which is say

670
00:26:48,900 --> 00:26:51,299
take the secret base60 for it send it

671
00:26:51,299 --> 00:26:54,000
off to a attacker server congratulations

672
00:26:54,000 --> 00:26:55,799
you now have the plain Tech secret value

673
00:26:55,799 --> 00:26:59,600
so that isn't is important to look at

674
00:26:59,600 --> 00:27:02,640
getting the who has access to secrets to

675
00:27:02,640 --> 00:27:04,679
make sure you limit that exposure from

676
00:27:04,679 --> 00:27:06,980
the beginning

677
00:27:07,020 --> 00:27:10,140
and the way that you can do this in a

678
00:27:10,140 --> 00:27:12,539
very in a programmatic manner you could

679
00:27:12,539 --> 00:27:13,919
probably write a quick python script to

680
00:27:13,919 --> 00:27:16,020
do this is essentially

681
00:27:16,020 --> 00:27:18,360
for for each repository in a given

682
00:27:18,360 --> 00:27:22,020
GitHub organization make a query to the

683
00:27:22,020 --> 00:27:23,940
secrets API endpoint which essentially

684
00:27:23,940 --> 00:27:26,940
lists all of the GitHub actions Secrets

685
00:27:26,940 --> 00:27:28,919
attached to that repository and then

686
00:27:28,919 --> 00:27:31,559
follow that up if there is at least one

687
00:27:31,559 --> 00:27:33,299
secret because otherwise there is no

688
00:27:33,299 --> 00:27:35,159
need to do that subsequent operation but

689
00:27:35,159 --> 00:27:37,140
if there is one secret then now you can

690
00:27:37,140 --> 00:27:39,720
list every collaborator that has the

691
00:27:39,720 --> 00:27:41,640
push permission and that resulting

692
00:27:41,640 --> 00:27:43,799
mapping that's your list of users that

693
00:27:43,799 --> 00:27:47,279
has access to all the repository secrets

694
00:27:47,279 --> 00:27:49,080
for a given Repository

695
00:27:49,080 --> 00:27:51,600
I do want to note there is another way

696
00:27:51,600 --> 00:27:53,039
that you can use secrets and that's

697
00:27:53,039 --> 00:27:55,260
GitHub environment secrets and there's a

698
00:27:55,260 --> 00:27:57,840
little bit more security there but some

699
00:27:57,840 --> 00:28:00,120
of the similar problems exist but I

700
00:28:00,120 --> 00:28:01,500
don't want to spend too much time on

701
00:28:01,500 --> 00:28:02,760
that but that is some another thing that

702
00:28:02,760 --> 00:28:04,860
organizations consider consider is

703
00:28:04,860 --> 00:28:06,419
environments and using deployment

704
00:28:06,419 --> 00:28:09,020
Secrets there

705
00:28:09,059 --> 00:28:11,279
so I want to take a quick step back to

706
00:28:11,279 --> 00:28:12,840
talk about salsa

707
00:28:12,840 --> 00:28:16,020
and this is a a framework for software

708
00:28:16,020 --> 00:28:18,240
supply chain security and actually had

709
00:28:18,240 --> 00:28:19,559
to going up this slides because they

710
00:28:19,559 --> 00:28:22,260
just released their version 1.0 on the

711
00:28:22,260 --> 00:28:25,980
19th so I just and obviously so someone

712
00:28:25,980 --> 00:28:27,240
could spend a lot of time talking about

713
00:28:27,240 --> 00:28:28,919
salsa and probably a whole talk so I'm

714
00:28:28,919 --> 00:28:31,559
just gonna quickly talk about specific

715
00:28:31,559 --> 00:28:33,960
points that pertain to the build step

716
00:28:33,960 --> 00:28:37,080
and this is a very new framework but

717
00:28:37,080 --> 00:28:39,059
essentially for build there's four

718
00:28:39,059 --> 00:28:42,539
levels starting from build l0 to build

719
00:28:42,539 --> 00:28:43,919
L3

720
00:28:43,919 --> 00:28:46,580
and

721
00:28:47,640 --> 00:28:50,220
build l0 obviously that's nothing no no

722
00:28:50,220 --> 00:28:53,820
security build L1 you have automated

723
00:28:53,820 --> 00:28:55,260
builds so that's just using something

724
00:28:55,260 --> 00:28:57,600
like GitHub actions to run builds and

725
00:28:57,600 --> 00:28:59,880
then there's that provenance of what

726
00:28:59,880 --> 00:29:02,100
what led to that build

727
00:29:02,100 --> 00:29:04,799
and what's the and tying that to the

728
00:29:04,799 --> 00:29:05,880
artifact

729
00:29:05,880 --> 00:29:07,919
build L2 essentially just take that

730
00:29:07,919 --> 00:29:10,200
Providence have that on a hosted build

731
00:29:10,200 --> 00:29:13,440
service and it's signed but

732
00:29:13,440 --> 00:29:15,960
again the the

733
00:29:15,960 --> 00:29:17,400
if you're really interested in that link

734
00:29:17,400 --> 00:29:18,840
definitely read up on salsa I don't want

735
00:29:18,840 --> 00:29:20,820
to spend too much time on that but the

736
00:29:20,820 --> 00:29:23,100
thing that applies to self versus Runner

737
00:29:23,100 --> 00:29:25,799
type attacks is build L3 build service

738
00:29:25,799 --> 00:29:27,600
hardening

739
00:29:27,600 --> 00:29:31,080
and what what that is is that for an

740
00:29:31,080 --> 00:29:33,120
organization to comply with salsa build

741
00:29:33,120 --> 00:29:36,840
L3 they need to be using isolated builds

742
00:29:36,840 --> 00:29:41,520
that means that each build is isolated

743
00:29:41,520 --> 00:29:42,899
from the next build so there's no

744
00:29:42,899 --> 00:29:45,600
interbuilt interaction and that there's

745
00:29:45,600 --> 00:29:48,120
nothing in the build systems control

746
00:29:48,120 --> 00:29:51,299
plane that can allow a build to interact

747
00:29:51,299 --> 00:29:52,919
with with the subsequent build like say

748
00:29:52,919 --> 00:29:55,200
there's a cache and one build can poison

749
00:29:55,200 --> 00:29:56,760
the cache and the next build now uses a

750
00:29:56,760 --> 00:29:58,559
poisoned tool so that would be something

751
00:29:58,559 --> 00:30:00,419
that shouldn't happen if an organization

752
00:30:00,419 --> 00:30:02,700
wants to comply with salsa L3

753
00:30:02,700 --> 00:30:04,980
there's also protecting the signing

754
00:30:04,980 --> 00:30:06,659
Secrets used for the to sign the

755
00:30:06,659 --> 00:30:08,520
provenance but I'm not going to spend

756
00:30:08,520 --> 00:30:10,940
time there

757
00:30:11,340 --> 00:30:13,620
another risk so

758
00:30:13,620 --> 00:30:15,299
if a self-hosted Runners you should

759
00:30:15,299 --> 00:30:18,059
probably have antivirus or EDR present

760
00:30:18,059 --> 00:30:19,679
on these Runners attackers shouldn't

761
00:30:19,679 --> 00:30:23,480
just be able to go and run a malicious

762
00:30:23,480 --> 00:30:27,419
L file in the in the background and

763
00:30:27,419 --> 00:30:30,059
that's unobfuscated like it they should

764
00:30:30,059 --> 00:30:32,340
have something to at least catch the

765
00:30:32,340 --> 00:30:35,520
less sophisticated attackers there are

766
00:30:35,520 --> 00:30:36,779
if you're using containers for

767
00:30:36,779 --> 00:30:38,640
self-hosted runners there's a lot of EDR

768
00:30:38,640 --> 00:30:40,399
products and vendors that offer

769
00:30:40,399 --> 00:30:42,360
Solutions there but not going to name

770
00:30:42,360 --> 00:30:46,500
any but there's plenty of them out there

771
00:30:46,500 --> 00:30:49,620
so there's also a risk of code

772
00:30:49,620 --> 00:30:51,779
modification and this kind of touches on

773
00:30:51,779 --> 00:30:53,640
that supply chain attack that an

774
00:30:53,640 --> 00:30:55,320
attacker might want to conduct in a very

775
00:30:55,320 --> 00:30:57,659
stealthy and hard to detect manner so

776
00:30:57,659 --> 00:31:00,419
what will happen in this case is you

777
00:31:00,419 --> 00:31:02,039
have a self-hosted runner and it's not

778
00:31:02,039 --> 00:31:04,380
ephemeral so attacker will create a

779
00:31:04,380 --> 00:31:06,539
malicious workflow push it and now start

780
00:31:06,539 --> 00:31:08,279
a build that build starts that

781
00:31:08,279 --> 00:31:09,960
background process and the build ends

782
00:31:09,960 --> 00:31:12,240
Brenner is now ready to pick up other

783
00:31:12,240 --> 00:31:14,580
tasks that background process now

784
00:31:14,580 --> 00:31:17,100
continues to run legitimate build comes

785
00:31:17,100 --> 00:31:19,740
out checks out code

786
00:31:19,740 --> 00:31:23,279
all right let's get to that step here

787
00:31:23,279 --> 00:31:25,799
that legitimate process will then check

788
00:31:25,799 --> 00:31:30,240
out code and the malicious project might

789
00:31:30,240 --> 00:31:32,220
already know which build it's targeting

790
00:31:32,220 --> 00:31:34,380
so it looks for that file swaps it out

791
00:31:34,380 --> 00:31:37,860
with a malicious file that contains a

792
00:31:37,860 --> 00:31:41,399
back door and now that pipeline

793
00:31:41,399 --> 00:31:42,840
continues with its normal step so it

794
00:31:42,840 --> 00:31:44,880
compiles it and publishes it but now you

795
00:31:44,880 --> 00:31:47,520
have a backdoored artifact which is

796
00:31:47,520 --> 00:31:49,679
linked to a legitimate original commit

797
00:31:49,679 --> 00:31:52,440
so the only way in this case would be to

798
00:31:52,440 --> 00:31:54,659
go and reverse engineer that final build

799
00:31:54,659 --> 00:31:56,640
artifact to find out that there was some

800
00:31:56,640 --> 00:31:58,500
modification made because otherwise the

801
00:31:58,500 --> 00:32:00,299
original commit checks out is legitimate

802
00:32:00,299 --> 00:32:01,740
and it's all signed properly because

803
00:32:01,740 --> 00:32:04,140
it's following the normal pipeline in

804
00:32:04,140 --> 00:32:06,620
every other way

805
00:32:07,500 --> 00:32:10,080
so that's that's you know where the

806
00:32:10,080 --> 00:32:12,419
Decker could obviously conduct that 3cx

807
00:32:12,419 --> 00:32:15,240
style attack if they wanted to against

808
00:32:15,240 --> 00:32:17,940
organizations that use GitHub actions

809
00:32:17,940 --> 00:32:19,980
and non-ephemeral self-polited Runners

810
00:32:19,980 --> 00:32:22,140
so the other risk is kind of that tool

811
00:32:22,140 --> 00:32:24,659
or cash poisoning and

812
00:32:24,659 --> 00:32:27,179
the way an attacker this again this is a

813
00:32:27,179 --> 00:32:29,820
more a theoretical example where the

814
00:32:29,820 --> 00:32:32,000
build will check if a tool is installed

815
00:32:32,000 --> 00:32:35,820
and if it is use it but if not

816
00:32:35,820 --> 00:32:38,220
go and install it so

817
00:32:38,220 --> 00:32:40,679
in this case if it's a non-federal

818
00:32:40,679 --> 00:32:43,740
runner that malicious initial workflow

819
00:32:43,740 --> 00:32:45,360
could just install the tool and then

820
00:32:45,360 --> 00:32:47,220
that second build will just say okay the

821
00:32:47,220 --> 00:32:48,059
Tool's already installed I'm going to

822
00:32:48,059 --> 00:32:49,679
use it and now your supply chain is

823
00:32:49,679 --> 00:32:51,600
compromised so

824
00:32:51,600 --> 00:32:53,460
another way an attacker could accomplish

825
00:32:53,460 --> 00:32:54,799
that same

826
00:32:54,799 --> 00:32:57,600
goal of modifying code but this is just

827
00:32:57,600 --> 00:33:01,158
presents in a different manner

828
00:33:01,740 --> 00:33:04,919
all right and then there is also the

829
00:33:04,919 --> 00:33:08,580
risk of stealing build excuse me secrets

830
00:33:08,580 --> 00:33:11,220
from subsequent builds so that this is

831
00:33:11,220 --> 00:33:12,000
where

832
00:33:12,000 --> 00:33:14,399
you might have a container that's

833
00:33:14,399 --> 00:33:16,440
isolated from the network so there's no

834
00:33:16,440 --> 00:33:17,760
risk of lateral movement into other

835
00:33:17,760 --> 00:33:21,240
systems but if that container is maybe

836
00:33:21,240 --> 00:33:23,039
if not ephemeral maybe if it's only

837
00:33:23,039 --> 00:33:26,700
rotated every 24 hours then attacker can

838
00:33:26,700 --> 00:33:29,760
start a background process and if they

839
00:33:29,760 --> 00:33:31,380
can escalate to root then they can just

840
00:33:31,380 --> 00:33:33,059
dump the memory of the GitHub actions

841
00:33:33,059 --> 00:33:35,519
agent and get all the secrets that are

842
00:33:35,519 --> 00:33:37,799
sent associated with subsequent builds

843
00:33:37,799 --> 00:33:41,399
or use the technique of dumping secrets

844
00:33:41,399 --> 00:33:43,860
from Shell scripts in the workflow in

845
00:33:43,860 --> 00:33:46,380
that case is just looking at files on

846
00:33:46,380 --> 00:33:47,760
the file system might be setting like an

847
00:33:47,760 --> 00:33:49,260
I notify watch and just pulling the

848
00:33:49,260 --> 00:33:52,220
shell scripts when they appear

849
00:33:56,039 --> 00:34:00,059
to so to address those risks

850
00:34:00,059 --> 00:34:03,419
and this aligns with salsa build L3 is

851
00:34:03,419 --> 00:34:06,120
using Runners that have an isolated and

852
00:34:06,120 --> 00:34:08,520
ephemeral environment so it'll

853
00:34:08,520 --> 00:34:10,679
completely eliminate all of the risks

854
00:34:10,679 --> 00:34:14,040
associated with that build time code

855
00:34:14,040 --> 00:34:17,339
modification stealing of Secrets via

856
00:34:17,339 --> 00:34:19,199
monitoring stealing of Secrets via

857
00:34:19,199 --> 00:34:22,379
dumping memory but

858
00:34:22,379 --> 00:34:24,300
you know do you understand that some in

859
00:34:24,300 --> 00:34:26,460
some organizations it might not really

860
00:34:26,460 --> 00:34:29,520
be possible or it might be possible but

861
00:34:29,520 --> 00:34:31,440
the time and budget constraints prevent

862
00:34:31,440 --> 00:34:33,780
moving away from self-hosted Runners to

863
00:34:33,780 --> 00:34:35,639
a proper ephemeral setup there are other

864
00:34:35,639 --> 00:34:37,199
mitigations in differential controls

865
00:34:37,199 --> 00:34:39,418
some have outlined before like EDR that

866
00:34:39,418 --> 00:34:41,760
will then be very critical

867
00:34:41,760 --> 00:34:44,159
and if someone you are trying to move

868
00:34:44,159 --> 00:34:46,440
towards setting up ephemeral Runners I

869
00:34:46,440 --> 00:34:49,619
want to note that the get up actions

870
00:34:49,619 --> 00:34:51,960
agent supports self-hosted Runner

871
00:34:51,960 --> 00:34:53,280
running in a self-hosted manner but

872
00:34:53,280 --> 00:34:55,440
really that just means that you pass the

873
00:34:55,440 --> 00:34:57,300
self-hosted flag and as soon as it runs

874
00:34:57,300 --> 00:35:00,240
the job deregisters itself but that

875
00:35:00,240 --> 00:35:02,040
infrastructure that's up to

876
00:35:02,040 --> 00:35:03,660
organizations to manage thankfully

877
00:35:03,660 --> 00:35:05,880
GitHub does recommend to open source

878
00:35:05,880 --> 00:35:07,260
Frameworks that

879
00:35:07,260 --> 00:35:09,839
handle all of the provisioning and

880
00:35:09,839 --> 00:35:12,420
deprovisioning configuration of I'll

881
00:35:12,420 --> 00:35:15,000
link both of these here here and also I

882
00:35:15,000 --> 00:35:19,560
want to I I have tweeted out the slides

883
00:35:19,560 --> 00:35:22,260
um for this so if any of these links or

884
00:35:22,260 --> 00:35:24,720
anything wants to see uh I can make make

885
00:35:24,720 --> 00:35:26,460
sure to so because I know I have a lot

886
00:35:26,460 --> 00:35:29,060
of content here

887
00:35:29,460 --> 00:35:32,040
Okay so

888
00:35:32,040 --> 00:35:35,160
touching on that risk of internal

889
00:35:35,160 --> 00:35:36,720
network access and moving to other

890
00:35:36,720 --> 00:35:38,339
systems now this is one where an

891
00:35:38,339 --> 00:35:41,940
attacker could do on a ephemeral Runner

892
00:35:41,940 --> 00:35:44,940
given that network controls aren't set

893
00:35:44,940 --> 00:35:46,560
up properly so per github's

894
00:35:46,560 --> 00:35:48,780
documentation a single GitHub actions

895
00:35:48,780 --> 00:35:51,420
workflow can run for up to 35 days

896
00:35:51,420 --> 00:35:53,760
that's quite a while for a build

897
00:35:53,760 --> 00:35:56,640
and that's also quite a while for an

898
00:35:56,640 --> 00:35:57,839
attacker to do bad things in your

899
00:35:57,839 --> 00:35:59,339
network that's you definitely don't want

900
00:35:59,339 --> 00:36:00,300
that

901
00:36:00,300 --> 00:36:03,720
in your network for 35 days so the way

902
00:36:03,720 --> 00:36:05,540
they can handle this is looking at

903
00:36:05,540 --> 00:36:08,460
standard Network segmentation type

904
00:36:08,460 --> 00:36:10,800
controls making sure these Runners have

905
00:36:10,800 --> 00:36:13,920
limited internal access and

906
00:36:13,920 --> 00:36:15,480
if

907
00:36:15,480 --> 00:36:17,700
there is a need for say a runner that

908
00:36:17,700 --> 00:36:20,880
has more extensive access than

909
00:36:20,880 --> 00:36:23,640
look at limiting those Runners to

910
00:36:23,640 --> 00:36:25,920
repository level self-hosted Runners and

911
00:36:25,920 --> 00:36:28,020
then auditing that create workflow run

912
00:36:28,020 --> 00:36:29,460
log event

913
00:36:29,460 --> 00:36:32,579
to make sure that no one's that

914
00:36:32,579 --> 00:36:33,720
shouldn't be running workflows is

915
00:36:33,720 --> 00:36:35,099
running workflows

916
00:36:35,099 --> 00:36:38,000
on those runners

917
00:36:38,579 --> 00:36:41,339
to kind of handle the the case where

918
00:36:41,339 --> 00:36:44,640
there's a build that's lasting for days

919
00:36:44,640 --> 00:36:47,640
and days and that's an attacker

920
00:36:47,640 --> 00:36:49,200
basically the run's just running it like

921
00:36:49,200 --> 00:36:51,599
an implant there really isn't a way to

922
00:36:51,599 --> 00:36:55,619
at a organization's scale to track

923
00:36:55,619 --> 00:36:57,839
the duration of Builds on a given a

924
00:36:57,839 --> 00:36:59,820
single self-hosted Runner

925
00:36:59,820 --> 00:37:02,220
so the way to kind of handle this one

926
00:37:02,220 --> 00:37:05,760
would be look at taking the logs off of

927
00:37:05,760 --> 00:37:08,339
the self-hosted runner itself so there's

928
00:37:08,339 --> 00:37:10,619
a directory

929
00:37:10,619 --> 00:37:12,540
the Diagnostics directory where the

930
00:37:12,540 --> 00:37:14,820
runner applications installed and

931
00:37:14,820 --> 00:37:16,320
they'll just be log files there so

932
00:37:16,320 --> 00:37:17,820
setting up some tooling on the runner

933
00:37:17,820 --> 00:37:19,740
itself to take those files and send them

934
00:37:19,740 --> 00:37:22,320
off for perhaps some processing and then

935
00:37:22,320 --> 00:37:23,880
ingestion to a seam so that could help

936
00:37:23,880 --> 00:37:26,280
keeping keeping OverWatch of what's

937
00:37:26,280 --> 00:37:27,900
running on a self-hosted runner and how

938
00:37:27,900 --> 00:37:30,980
long these builds have been running

939
00:37:32,339 --> 00:37:34,980
to detect the case where

940
00:37:34,980 --> 00:37:37,560
uh run has forked off a process so this

941
00:37:37,560 --> 00:37:39,540
Runner tracking ID environment variable

942
00:37:39,540 --> 00:37:41,760
essentially for GitHub actions is it's a

943
00:37:41,760 --> 00:37:44,520
feature where if the a process is

944
00:37:44,520 --> 00:37:48,000
running if that's not set to zero then

945
00:37:48,000 --> 00:37:50,940
once the job completes the actions agent

946
00:37:50,940 --> 00:37:54,240
will reap any processes that it started

947
00:37:54,240 --> 00:37:56,880
so if the process if someone starts a

948
00:37:56,880 --> 00:37:58,380
process and sets that run a tracking ID

949
00:37:58,380 --> 00:38:01,200
variable to zero then that backgrounded

950
00:38:01,200 --> 00:38:03,480
process will not be terminated after the

951
00:38:03,480 --> 00:38:05,160
build finishes again this is on a

952
00:38:05,160 --> 00:38:07,079
non-ephemeral runner

953
00:38:07,079 --> 00:38:10,079
so perhaps doing something where you

954
00:38:10,079 --> 00:38:13,140
check processes on the runner by the

955
00:38:13,140 --> 00:38:14,760
GitHub actions user and see if that

956
00:38:14,760 --> 00:38:16,560
variable is set to zero

957
00:38:16,560 --> 00:38:18,359
there may be some legitimate cases for

958
00:38:18,359 --> 00:38:19,740
this but if you don't have any

959
00:38:19,740 --> 00:38:21,420
leisurement cases for this

960
00:38:21,420 --> 00:38:23,579
have seeing that would be an immediate

961
00:38:23,579 --> 00:38:26,880
indication of odd or malicious activity

962
00:38:26,880 --> 00:38:31,940
so alert raise alert and investigate it

963
00:38:34,980 --> 00:38:37,200
going into github's audit log I

964
00:38:37,200 --> 00:38:38,520
mentioned earlier in the talk that

965
00:38:38,520 --> 00:38:42,240
there's a couple gaps that exist so

966
00:38:42,240 --> 00:38:44,099
there's a few of these audit log events

967
00:38:44,099 --> 00:38:45,420
that can only be pulled in via the rest

968
00:38:45,420 --> 00:38:46,500
API

969
00:38:46,500 --> 00:38:48,599
meaning if you have it set up to just

970
00:38:48,599 --> 00:38:50,040
stream it's not going to be included by

971
00:38:50,040 --> 00:38:53,640
default so and these are the work the

972
00:38:53,640 --> 00:38:55,859
the audit log events like when

973
00:38:55,859 --> 00:38:57,839
associated with the creation of workflow

974
00:38:57,839 --> 00:39:01,020
as well as git operations so git clones

975
00:39:01,020 --> 00:39:03,900
or push operations associated with an

976
00:39:03,900 --> 00:39:06,240
organization those are not automatically

977
00:39:06,240 --> 00:39:10,200
uh present so that's important to ingest

978
00:39:10,200 --> 00:39:11,820
those and

979
00:39:11,820 --> 00:39:14,400
if you do need those to build certain

980
00:39:14,400 --> 00:39:15,839
detections

981
00:39:15,839 --> 00:39:19,020
and if you have that default setting of

982
00:39:19,020 --> 00:39:21,839
Ip logging changed then perhaps looking

983
00:39:21,839 --> 00:39:25,920
at geoip based detections for

984
00:39:25,920 --> 00:39:27,720
activity associated with users so if you

985
00:39:27,720 --> 00:39:29,160
know where your user is and suddenly you

986
00:39:29,160 --> 00:39:31,140
have a bunch of a cluster of events

987
00:39:31,140 --> 00:39:32,940
coming from Russia that's probably not

988
00:39:32,940 --> 00:39:36,060
good so that's where you could start

989
00:39:36,060 --> 00:39:37,339
building some

990
00:39:37,339 --> 00:39:39,900
detections for malicious activities and

991
00:39:39,900 --> 00:39:42,900
this is more doubly more so for

992
00:39:42,900 --> 00:39:44,760
events associated with critical

993
00:39:44,760 --> 00:39:46,500
repositories and using the GitHub API

994
00:39:46,500 --> 00:39:48,000
you can actually

995
00:39:48,000 --> 00:39:50,640
filter audit log events associated with

996
00:39:50,640 --> 00:39:52,980
a given repository so for maybe critical

997
00:39:52,980 --> 00:39:57,060
info repos watch those very closely

998
00:39:57,060 --> 00:39:59,280
here's something that I've not seen

999
00:39:59,280 --> 00:40:01,320
personally but would be really cool for

1000
00:40:01,320 --> 00:40:03,480
someone to start implementing is by

1001
00:40:03,480 --> 00:40:05,820
adding a honey pot repository within a

1002
00:40:05,820 --> 00:40:09,480
GitHub organization so a way I could see

1003
00:40:09,480 --> 00:40:11,700
someone going about this is making a

1004
00:40:11,700 --> 00:40:13,740
repo that every user every developer can

1005
00:40:13,740 --> 00:40:16,380
have every developer can write to name

1006
00:40:16,380 --> 00:40:17,579
it something that seems like it's

1007
00:40:17,579 --> 00:40:20,220
valuable add some juicy repository

1008
00:40:20,220 --> 00:40:21,420
secrets

1009
00:40:21,420 --> 00:40:23,700
add a self-hosted runner make sure it's

1010
00:40:23,700 --> 00:40:25,440
isolated so make sure your Honeypot

1011
00:40:25,440 --> 00:40:27,119
doesn't end up actually causing a breach

1012
00:40:27,119 --> 00:40:30,060
don't want that and

1013
00:40:30,060 --> 00:40:34,260
then closely monitor the API so this

1014
00:40:34,260 --> 00:40:38,839
setup can allow someone to

1015
00:40:39,420 --> 00:40:41,940
this setup can allow someone to pick up

1016
00:40:41,940 --> 00:40:44,460
events associated with malicious

1017
00:40:44,460 --> 00:40:46,920
activity

1018
00:40:46,920 --> 00:40:49,680
and here's something again and I I

1019
00:40:49,680 --> 00:40:51,359
recognize that detection engineering is

1020
00:40:51,359 --> 00:40:52,320
a pretty

1021
00:40:52,320 --> 00:40:55,200
complex thing and it's not just a you

1022
00:40:55,200 --> 00:40:56,700
can't it's not a one-size-fits-all

1023
00:40:56,700 --> 00:40:58,859
approach for every organization but I

1024
00:40:58,859 --> 00:41:00,119
hope something like this could be a

1025
00:41:00,119 --> 00:41:02,820
start to for organizations to develop

1026
00:41:02,820 --> 00:41:05,160
detections and start treating GitHub

1027
00:41:05,160 --> 00:41:07,500
actions and Associated log events just

1028
00:41:07,500 --> 00:41:10,440
as they would AWS IM events as an

1029
00:41:10,440 --> 00:41:13,440
example so the kind of a cycle that

1030
00:41:13,440 --> 00:41:16,560
could work for GitHub actions is taking

1031
00:41:16,560 --> 00:41:19,020
the audit logs streaming and the rest

1032
00:41:19,020 --> 00:41:20,160
API

1033
00:41:20,160 --> 00:41:23,119
taking any filtering suspicious events

1034
00:41:23,119 --> 00:41:25,380
and Taylor obviously tailoring that to

1035
00:41:25,380 --> 00:41:26,880
how your organization works because

1036
00:41:26,880 --> 00:41:28,079
every organization is going to have a

1037
00:41:28,079 --> 00:41:30,660
different Baseline associate based on

1038
00:41:30,660 --> 00:41:34,200
how developers work but taking looking

1039
00:41:34,200 --> 00:41:35,820
at things like oh if you have a bot user

1040
00:41:35,820 --> 00:41:38,900
and it's only doing like comment triage

1041
00:41:38,900 --> 00:41:41,280
why why you're seeing events like

1042
00:41:41,280 --> 00:41:42,540
associated with other events so that

1043
00:41:42,540 --> 00:41:45,300
that's a good place to start because if

1044
00:41:45,300 --> 00:41:46,740
a lot of times the tokens that are

1045
00:41:46,740 --> 00:41:49,680
compromised could be bot accounts

1046
00:41:49,680 --> 00:41:53,220
looking again goips access to certain

1047
00:41:53,220 --> 00:41:54,599
repos

1048
00:41:54,599 --> 00:41:57,060
then you can move on to enriching these

1049
00:41:57,060 --> 00:42:01,500
events so for workflows

1050
00:42:01,500 --> 00:42:03,540
any malicious workflow even if the

1051
00:42:03,540 --> 00:42:05,460
actions happen later are don't have a

1052
00:42:05,460 --> 00:42:07,320
good trace it still starts off with that

1053
00:42:07,320 --> 00:42:08,820
workflow yaml file that's associated

1054
00:42:08,820 --> 00:42:10,200
with the commit

1055
00:42:10,200 --> 00:42:12,000
so because that would need to be in a

1056
00:42:12,000 --> 00:42:14,760
repo for it to actually run a workflow

1057
00:42:14,760 --> 00:42:16,800
so having any events associated with

1058
00:42:16,800 --> 00:42:18,720
GitHub actions workflows it'd be good to

1059
00:42:18,720 --> 00:42:20,820
pull the workflow file and package that

1060
00:42:20,820 --> 00:42:23,040
along with the event so if someone does

1061
00:42:23,040 --> 00:42:24,480
need to look at it for manual triage

1062
00:42:24,480 --> 00:42:27,119
that workflows right there because if

1063
00:42:27,119 --> 00:42:28,440
it's say pulling down a shell script

1064
00:42:28,440 --> 00:42:30,780
from an unknown domain that's probably

1065
00:42:30,780 --> 00:42:33,599
bad and good thing just alert on and

1066
00:42:33,599 --> 00:42:35,460
start a potential incident response

1067
00:42:35,460 --> 00:42:37,820
process

1068
00:42:37,859 --> 00:42:40,859
and then this is these are the kind of

1069
00:42:40,859 --> 00:42:43,079
API endpoints that you would use from

1070
00:42:43,079 --> 00:42:45,599
GitHub API github's API to enrich

1071
00:42:45,599 --> 00:42:48,300
workflow events so you can get workflow

1072
00:42:48,300 --> 00:42:52,380
runs and get the

1073
00:42:52,380 --> 00:42:54,619
workflow associated with a specific

1074
00:42:54,619 --> 00:42:57,119
suspicious work created workflow run log

1075
00:42:57,119 --> 00:43:01,140
event take the shot of the commit and

1076
00:43:01,140 --> 00:43:03,480
the path and then use another API

1077
00:43:03,480 --> 00:43:05,700
request to get the workflow reaml file

1078
00:43:05,700 --> 00:43:08,339
itself so now you have the workflow yaml

1079
00:43:08,339 --> 00:43:10,160
file associated with the potential

1080
00:43:10,160 --> 00:43:13,140
potentially malicious event for and it's

1081
00:43:13,140 --> 00:43:14,579
right there you have to go hunt down and

1082
00:43:14,579 --> 00:43:16,500
spend 20 minutes figuring out where the

1083
00:43:16,500 --> 00:43:18,420
where this workflow file lives it's part

1084
00:43:18,420 --> 00:43:21,900
of a triage process and like some if you

1085
00:43:21,900 --> 00:43:23,760
did that and you saw something like this

1086
00:43:23,760 --> 00:43:26,040
this would obviously be clear indication

1087
00:43:26,040 --> 00:43:29,339
of malicious activity and if an

1088
00:43:29,339 --> 00:43:31,800
organization can detect that just the

1089
00:43:31,800 --> 00:43:33,839
fact that a workflow was executed that

1090
00:43:33,839 --> 00:43:35,700
did this then already they're more

1091
00:43:35,700 --> 00:43:37,740
secure than most organizations at least

1092
00:43:37,740 --> 00:43:40,020
based on what we've seen on red teams

1093
00:43:40,020 --> 00:43:41,460
with organizations that use GitHub

1094
00:43:41,460 --> 00:43:43,920
actions so

1095
00:43:43,920 --> 00:43:45,900
to conclude

1096
00:43:45,900 --> 00:43:47,819
we're really starting to see developer

1097
00:43:47,819 --> 00:43:50,520
compromises become the star source of

1098
00:43:50,520 --> 00:43:52,140
really impactful breaches obviously you

1099
00:43:52,140 --> 00:43:54,480
had Circle CI back in December

1100
00:43:54,480 --> 00:43:56,099
and that one I really believe that if

1101
00:43:56,099 --> 00:43:58,260
the attacker knew what they had they

1102
00:43:58,260 --> 00:43:59,280
probably could have done a lot more

1103
00:43:59,280 --> 00:44:03,780
damage to some of their clients LastPass

1104
00:44:03,780 --> 00:44:05,520
that started from a developer compromise

1105
00:44:05,520 --> 00:44:06,599
and

1106
00:44:06,599 --> 00:44:09,240
so for to protect your organization's

1107
00:44:09,240 --> 00:44:12,240
GitHub action cicd like I had mentioned

1108
00:44:12,240 --> 00:44:14,460
earlier there's that layered approach

1109
00:44:14,460 --> 00:44:16,980
you want to apply the least permissible

1110
00:44:16,980 --> 00:44:18,900
least privilege both the repository

1111
00:44:18,900 --> 00:44:22,200
Secrets as well as how you have your

1112
00:44:22,200 --> 00:44:24,359
self-hosted Runners configured you want

1113
00:44:24,359 --> 00:44:27,540
to have secure Runner implementation in

1114
00:44:27,540 --> 00:44:30,240
that you are using ephemeral runs if you

1115
00:44:30,240 --> 00:44:32,940
can at all possibly do that and if

1116
00:44:32,940 --> 00:44:35,099
you're not making sure you have proper

1117
00:44:35,099 --> 00:44:37,319
EDR protections and honestly if you have

1118
00:44:37,319 --> 00:44:38,599
a firmware one you should probably have

1119
00:44:38,599 --> 00:44:41,400
EDR AV projections on it and then

1120
00:44:41,400 --> 00:44:43,680
looking at starting detection

1121
00:44:43,680 --> 00:44:46,619
engineering pulling in log events that

1122
00:44:46,619 --> 00:44:48,900
could indicate malicious activity and

1123
00:44:48,900 --> 00:44:50,940
starting there and trying to get

1124
00:44:50,940 --> 00:44:52,920
something that's better than what what

1125
00:44:52,920 --> 00:44:54,780
what it is right now with a lot of

1126
00:44:54,780 --> 00:44:57,900
organizations that use GitHub actions

1127
00:44:57,900 --> 00:44:59,940
and just some food for thought for

1128
00:44:59,940 --> 00:45:01,280
future research

1129
00:45:01,280 --> 00:45:03,359
looking at like

1130
00:45:03,359 --> 00:45:05,220
pivoting to Circle CI itself mostly

1131
00:45:05,220 --> 00:45:07,760
Runners if someone's using those just by

1132
00:45:07,760 --> 00:45:10,680
attacking those uh config yaml files

1133
00:45:10,680 --> 00:45:14,339
given a malicious uh excuse me given a

1134
00:45:14,339 --> 00:45:16,920
compromise personal access token

1135
00:45:16,920 --> 00:45:18,660
and

1136
00:45:18,660 --> 00:45:20,400
a couple of the resources and references

1137
00:45:20,400 --> 00:45:22,560
I used again I really want to call out

1138
00:45:22,560 --> 00:45:24,680
how good github's API document

1139
00:45:24,680 --> 00:45:26,760
API documentation and just general

1140
00:45:26,760 --> 00:45:29,540
documentation is

1141
00:45:30,119 --> 00:45:34,319
okay and how it's been really helpful in

1142
00:45:34,319 --> 00:45:36,540
putting together this stock

1143
00:45:36,540 --> 00:45:38,760
there's a self-hosted Runners blog post

1144
00:45:38,760 --> 00:45:41,640
that colleagues in pretorian and I

1145
00:45:41,640 --> 00:45:44,099
really released back last summer as well

1146
00:45:44,099 --> 00:45:46,740
as our shmukon 2023 talk

1147
00:45:46,740 --> 00:45:48,300
and I want to call it this blog post

1148
00:45:48,300 --> 00:45:50,880
from from karimra Hall covering like

1149
00:45:50,880 --> 00:45:52,680
reverse engineering the GitHub actions

1150
00:45:52,680 --> 00:45:54,660
Runner and how it actually pulls secrets

1151
00:45:54,660 --> 00:45:55,920
from GitHub that was really helpful in

1152
00:45:55,920 --> 00:45:59,280
developing some attack tcps for dumping

1153
00:45:59,280 --> 00:46:01,980
Secrets given a compromise token

1154
00:46:01,980 --> 00:46:04,260
and I want to quick shout out my two

1155
00:46:04,260 --> 00:46:06,119
colleagues at praetorian Mason and Matt

1156
00:46:06,119 --> 00:46:08,339
they were my co-presenters shmukon and

1157
00:46:08,339 --> 00:46:10,859
Crow developers of the gato tool and I

1158
00:46:10,859 --> 00:46:12,599
want to also thank John and Jimmy also

1159
00:46:12,599 --> 00:46:14,160
because he's a Victorian they were the

1160
00:46:14,160 --> 00:46:15,660
first to use gotcha during that

1161
00:46:15,660 --> 00:46:18,000
assessment where I covered that case

1162
00:46:18,000 --> 00:46:20,099
where an infrastructure engineer pushed

1163
00:46:20,099 --> 00:46:21,480
code and they were able to steal secrets

1164
00:46:21,480 --> 00:46:23,460
and that was the first like real world

1165
00:46:23,460 --> 00:46:25,619
usage of that tool

1166
00:46:25,619 --> 00:46:27,660
and that led to demonstrating a pretty

1167
00:46:27,660 --> 00:46:29,880
cool attack path and

1168
00:46:29,880 --> 00:46:31,980
all right thank you so much for

1169
00:46:31,980 --> 00:46:35,460
everyone's I'm a glad to take any take

1170
00:46:35,460 --> 00:46:35,980
any questions

1171
00:46:35,980 --> 00:46:38,040
[Applause]

1172
00:46:38,040 --> 00:46:39,780
all right if you've got questions please

1173
00:46:39,780 --> 00:46:41,940
raise your hand I will come run to you

1174
00:46:41,940 --> 00:46:45,079
with the microphone

1175
00:46:47,460 --> 00:46:49,140
first question is about middle height on

1176
00:46:49,140 --> 00:46:51,680
your right

1177
00:46:51,839 --> 00:46:54,599
thank you uh so you mentioned that in

1178
00:46:54,599 --> 00:46:56,160
the pen tests you've done you haven't

1179
00:46:56,160 --> 00:46:59,220
seen uh organizations using ephemeral

1180
00:46:59,220 --> 00:47:01,500
and isolated Runners but you did link

1181
00:47:01,500 --> 00:47:03,900
out to a couple of tools that like help

1182
00:47:03,900 --> 00:47:06,720
provide that functionality so why do you

1183
00:47:06,720 --> 00:47:08,160
think though you haven't seen those

1184
00:47:08,160 --> 00:47:09,780
adopted in practice are those like

1185
00:47:09,780 --> 00:47:12,119
really hard to use or is it just an

1186
00:47:12,119 --> 00:47:14,760
awareness problem so yeah just to go so

1187
00:47:14,760 --> 00:47:17,339
we actually have seen ephemeral and

1188
00:47:17,339 --> 00:47:19,920
self-hosted Runners however they were

1189
00:47:19,920 --> 00:47:22,619
not secured properly and that in one

1190
00:47:22,619 --> 00:47:25,079
example the service account I was

1191
00:47:25,079 --> 00:47:26,880
running was over provision so we then

1192
00:47:26,880 --> 00:47:29,400
moved over to improvised within AWS so

1193
00:47:29,400 --> 00:47:30,780
they had ephemeral Runners but they

1194
00:47:30,780 --> 00:47:32,579
didn't provision them properly so they

1195
00:47:32,579 --> 00:47:36,500
you they use them but we found issues

1196
00:47:36,660 --> 00:47:40,098
any other questions

1197
00:47:41,280 --> 00:47:45,200
I'm getting my steps in today for sure

1198
00:47:45,300 --> 00:47:48,140
no you're good

1199
00:47:51,240 --> 00:47:54,300
hi so you talked about oh I'm up here

1200
00:47:54,300 --> 00:47:58,079
okay probably with the lights so um yeah

1201
00:47:58,079 --> 00:48:01,140
um so I'm I'm wondering what you think

1202
00:48:01,140 --> 00:48:02,579
about

1203
00:48:02,579 --> 00:48:05,579
using service accounts for personal

1204
00:48:05,579 --> 00:48:07,440
access tokens

1205
00:48:07,440 --> 00:48:09,780
um because you know uh people or

1206
00:48:09,780 --> 00:48:11,460
developers can have their own personal

1207
00:48:11,460 --> 00:48:14,720
access tokens that we can use for

1208
00:48:14,720 --> 00:48:18,900
cicd builds and I wonder what your

1209
00:48:18,900 --> 00:48:20,819
thoughts are on using service accounts

1210
00:48:20,819 --> 00:48:23,339
instead of developer accounts in the

1211
00:48:23,339 --> 00:48:25,680
instance that a developer switches teams

1212
00:48:25,680 --> 00:48:28,079
or you know leaves a company that sort

1213
00:48:28,079 --> 00:48:31,800
of thing yeah so in terms of the the

1214
00:48:31,800 --> 00:48:33,720
question was using service account

1215
00:48:33,720 --> 00:48:36,119
tokens instead of developers own

1216
00:48:36,119 --> 00:48:38,760
personal access tokens for uh and it

1217
00:48:38,760 --> 00:48:40,500
just to clarify this is it for use in

1218
00:48:40,500 --> 00:48:43,040
like secrets

1219
00:48:43,200 --> 00:48:46,800
uh use of Secrets yeah yeah okay yeah so

1220
00:48:46,800 --> 00:48:49,380
one way that would make it easier to

1221
00:48:49,380 --> 00:48:51,599
secure and have more insight into what's

1222
00:48:51,599 --> 00:48:55,619
happening is using those GitHub apps and

1223
00:48:55,619 --> 00:48:57,660
having the install app installation

1224
00:48:57,660 --> 00:49:00,000
tokens being used for the actual

1225
00:49:00,000 --> 00:49:03,780
operations those allow more fine-grained

1226
00:49:03,780 --> 00:49:06,180
controls and it's easier to monitor like

1227
00:49:06,180 --> 00:49:07,500
which apps are installed so you could

1228
00:49:07,500 --> 00:49:10,200
have a GitHub app that's doing service

1229
00:49:10,200 --> 00:49:12,720
and and using GitHub apps as a service

1230
00:49:12,720 --> 00:49:14,700
account because in GitHub when you have

1231
00:49:14,700 --> 00:49:17,640
a service account it's just another

1232
00:49:17,640 --> 00:49:20,760
account it's just like another user and

1233
00:49:20,760 --> 00:49:22,440
compromising a token is listed with

1234
00:49:22,440 --> 00:49:24,359
those is just as bad as compromising a

1235
00:49:24,359 --> 00:49:26,720
developer

1236
00:49:26,880 --> 00:49:28,859
we have time for one last question if we

1237
00:49:28,859 --> 00:49:32,480
have one last question from the audience

1238
00:49:33,000 --> 00:49:35,780
raise your hand

1239
00:49:37,020 --> 00:49:39,480
sorry one more time oh thank you coming

1240
00:49:39,480 --> 00:49:41,870
down to you

1241
00:49:41,870 --> 00:49:44,930
[Laughter]

1242
00:49:49,859 --> 00:49:51,660
haven't explored any attack vectors with

1243
00:49:51,660 --> 00:49:54,180
third-party actions and if you have any

1244
00:49:54,180 --> 00:49:55,920
recommendations on how to mitigate the

1245
00:49:55,920 --> 00:49:57,119
risks there

1246
00:49:57,119 --> 00:50:02,339
so not not personally however there are

1247
00:50:02,339 --> 00:50:04,980
I've definitely read some blog posts and

1248
00:50:04,980 --> 00:50:06,900
other techniques like looking at

1249
00:50:06,900 --> 00:50:08,819
vulnerabilities within third-party

1250
00:50:08,819 --> 00:50:11,640
actions and some of where those might

1251
00:50:11,640 --> 00:50:14,460
come up is if you have a compromise

1252
00:50:14,460 --> 00:50:15,960
token that doesn't say have the ability

1253
00:50:15,960 --> 00:50:19,020
to modify a workflow then you can't

1254
00:50:19,020 --> 00:50:21,119
modify the yaml file and therefore have

1255
00:50:21,119 --> 00:50:22,920
to look at vulnerabilities and how that

1256
00:50:22,920 --> 00:50:25,380
how a third-party action using the build

1257
00:50:25,380 --> 00:50:27,480
is handling

1258
00:50:27,480 --> 00:50:29,940
code that's in the repo that you can

1259
00:50:29,940 --> 00:50:32,460
modify because if you compromise a token

1260
00:50:32,460 --> 00:50:34,980
that has the workflow scope it doesn't

1261
00:50:34,980 --> 00:50:36,960
really matter what the other actions are

1262
00:50:36,960 --> 00:50:39,060
doing because you can just edit the

1263
00:50:39,060 --> 00:50:42,540
workflow itself and do whatever you want

1264
00:50:42,540 --> 00:50:44,040
one last round of applause for Adam

1265
00:50:44,040 --> 00:50:45,599
please

1266
00:50:45,599 --> 00:50:47,290
thank you so much everyone

1267
00:50:47,290 --> 00:50:49,739
[Applause]

