1
00:00:00,000 --> 00:00:04,259
alrighty uh always good to start uh the

2
00:00:04,259 --> 00:00:06,000
talk immediately after the keynote with

3
00:00:06,000 --> 00:00:07,740
a slightly provocative

4
00:00:07,740 --> 00:00:10,320
title but guess what you don't need to

5
00:00:10,320 --> 00:00:11,280
patch

6
00:00:11,280 --> 00:00:15,059
uh hey

7
00:00:15,120 --> 00:00:16,560
Pedro and I are going to be talking

8
00:00:16,560 --> 00:00:19,440
about patching today

9
00:00:19,440 --> 00:00:21,720
um my name is jasphere I go by Jazz

10
00:00:21,720 --> 00:00:23,699
that's what you should call me I've

11
00:00:23,699 --> 00:00:25,800
worked with and for a large number of

12
00:00:25,800 --> 00:00:27,900
small and large tech companies around

13
00:00:27,900 --> 00:00:30,960
the Bay Area uh all the security all the

14
00:00:30,960 --> 00:00:33,080
time

15
00:00:34,640 --> 00:00:38,340
Scrambler I do appsec sometimes I do

16
00:00:38,340 --> 00:00:40,760
talks

17
00:00:41,000 --> 00:00:43,500
let me start with a question to you Jazz

18
00:00:43,500 --> 00:00:46,020
don't you think that some companies are

19
00:00:46,020 --> 00:00:48,059
obsessed with patching like that's the

20
00:00:48,059 --> 00:00:50,100
only thing they care about I know it

21
00:00:50,100 --> 00:00:52,260
just feels that way doesn't it like that

22
00:00:52,260 --> 00:00:54,539
the only thing that one needs to do is

23
00:00:54,539 --> 00:00:57,000
to be patchfully and then everything

24
00:00:57,000 --> 00:00:58,860
else in life is going to be

25
00:00:58,860 --> 00:01:04,860
fine this talk was motivated by a um by

26
00:01:04,860 --> 00:01:06,780
a ciso that I worked with at a large

27
00:01:06,780 --> 00:01:11,040
tech company and he believed that every

28
00:01:11,040 --> 00:01:13,320
security decision should have a cost

29
00:01:13,320 --> 00:01:15,780
benefit analysis every decision should

30
00:01:15,780 --> 00:01:17,880
have a cost benefit analysis except

31
00:01:17,880 --> 00:01:19,140
patching

32
00:01:19,140 --> 00:01:22,799
patching is sacrosanct uh

33
00:01:22,799 --> 00:01:24,840
it not only has to be done it has to be

34
00:01:24,840 --> 00:01:27,180
done as soon as possible and you

35
00:01:27,180 --> 00:01:29,880
understand where he's coming from so the

36
00:01:29,880 --> 00:01:31,619
talk today is going to talk about why

37
00:01:31,619 --> 00:01:33,900
patching is hard why it's not always

38
00:01:33,900 --> 00:01:37,920
possible but also what else you can do

39
00:01:37,920 --> 00:01:40,560
in order to make it make the blast

40
00:01:40,560 --> 00:01:43,140
radius from unpatched software be

41
00:01:43,140 --> 00:01:45,240
slightly smaller so that whilst you are

42
00:01:45,240 --> 00:01:47,579
racing to patch software

43
00:01:47,579 --> 00:01:50,658
um you're not vulnerable

44
00:01:50,700 --> 00:01:52,259
um I'm going to start with talking about

45
00:01:52,259 --> 00:01:54,600
the limitations of patching patching is

46
00:01:54,600 --> 00:01:56,579
hard right we all agree patching is hard

47
00:01:56,579 --> 00:01:58,500
not only does it take a long time to

48
00:01:58,500 --> 00:02:02,759
prepare a patch the tasks involved with

49
00:02:02,759 --> 00:02:04,860
testing the patch making sure that it's

50
00:02:04,860 --> 00:02:06,119
functional it doesn't break your

51
00:02:06,119 --> 00:02:07,500
software

52
00:02:07,500 --> 00:02:10,258
then it's performant and then after

53
00:02:10,258 --> 00:02:11,760
you've done all of that you still need

54
00:02:11,760 --> 00:02:15,239
to roll it out and sometimes you have a

55
00:02:15,239 --> 00:02:18,540
Reliance on vendors or third parties or

56
00:02:18,540 --> 00:02:19,800
sometimes even teams in your

57
00:02:19,800 --> 00:02:22,440
organization that you don't control and

58
00:02:22,440 --> 00:02:24,480
they don't believe the same way that you

59
00:02:24,480 --> 00:02:26,940
do that this patch rolling out is super

60
00:02:26,940 --> 00:02:29,160
critical not only that once you've done

61
00:02:29,160 --> 00:02:31,560
all of these things after you've done

62
00:02:31,560 --> 00:02:33,420
all of the hard work you roll this patch

63
00:02:33,420 --> 00:02:35,640
into production it turns out the patch

64
00:02:35,640 --> 00:02:36,660
does not even fix the security

65
00:02:36,660 --> 00:02:38,099
vulnerability that you had in the first

66
00:02:38,099 --> 00:02:39,900
place right I am sure all of you will

67
00:02:39,900 --> 00:02:42,300
like not in smile yep you've all seen

68
00:02:42,300 --> 00:02:44,099
this happen

69
00:02:44,099 --> 00:02:44,879
um

70
00:02:44,879 --> 00:02:46,920
which brings me to the question like why

71
00:02:46,920 --> 00:02:49,319
do we end up patching and like every

72
00:02:49,319 --> 00:02:52,500
single talk and besides this year uh I

73
00:02:52,500 --> 00:02:55,680
turned to chat GPT and uh this was my

74
00:02:55,680 --> 00:02:57,360
attempt I was like hey can you just

75
00:02:57,360 --> 00:03:00,780
write this talk for me and even in AI

76
00:03:00,780 --> 00:03:04,440
even in AI was like no dude the premise

77
00:03:04,440 --> 00:03:07,800
you're pushing is immoral

78
00:03:07,800 --> 00:03:09,480
um and and and and that makes sense

79
00:03:09,480 --> 00:03:12,659
right what Chad GPT is doing here is

80
00:03:12,659 --> 00:03:14,940
summarizing essentially the consensus

81
00:03:14,940 --> 00:03:16,800
view of the internet and the consensus

82
00:03:16,800 --> 00:03:18,659
view of the internet is that if you're

83
00:03:18,659 --> 00:03:21,120
not patching your software uh you're

84
00:03:21,120 --> 00:03:24,300
doing something immoral or or wrong and

85
00:03:24,300 --> 00:03:27,060
the reality I think you will realize by

86
00:03:27,060 --> 00:03:28,440
the at least by the end of the talk but

87
00:03:28,440 --> 00:03:30,599
maybe you already are there is that the

88
00:03:30,599 --> 00:03:33,900
reality is a lot more nuanced than that

89
00:03:33,900 --> 00:03:35,879
um so this brings me to the question

90
00:03:35,879 --> 00:03:37,860
like why do we think that we need to

91
00:03:37,860 --> 00:03:41,760
patch and the premise in security and in

92
00:03:41,760 --> 00:03:43,560
Engineering in general is that the only

93
00:03:43,560 --> 00:03:46,080
way you can be secure is if you know

94
00:03:46,080 --> 00:03:48,840
what's happening in production and the

95
00:03:48,840 --> 00:03:51,000
idea is that if your software is

96
00:03:51,000 --> 00:03:53,340
unpatched if some attacker has gotten in

97
00:03:53,340 --> 00:03:56,459
there then the outcomes the actions that

98
00:03:56,459 --> 00:03:58,080
your production system is taking is

99
00:03:58,080 --> 00:03:59,220
unpredictable

100
00:03:59,220 --> 00:04:01,980
okay that makes sense but the reverse of

101
00:04:01,980 --> 00:04:04,500
this the thing that we extend too far is

102
00:04:04,500 --> 00:04:08,099
to say like oh okay that means that if

103
00:04:08,099 --> 00:04:10,500
if you're fully patched

104
00:04:10,500 --> 00:04:12,480
it's fully predictable

105
00:04:12,480 --> 00:04:14,580
if it's fully patched it's fully

106
00:04:14,580 --> 00:04:16,139
predictable and the more you think about

107
00:04:16,139 --> 00:04:18,180
this the more you realize how much of a

108
00:04:18,180 --> 00:04:21,238
fallacy that is right

109
00:04:21,238 --> 00:04:24,000
um I'm sure all of you have stories uh

110
00:04:24,000 --> 00:04:27,360
like this this is my story uh I used to

111
00:04:27,360 --> 00:04:29,880
work at UH at Google where I was

112
00:04:29,880 --> 00:04:34,560
responsible for uh integrating a Dom

113
00:04:34,560 --> 00:04:37,979
parser an HTML browser uh called Xerxes

114
00:04:37,979 --> 00:04:41,160
and and Xerxes is amazing Google like

115
00:04:41,160 --> 00:04:42,660
many organizations that you guys work

116
00:04:42,660 --> 00:04:46,199
for has a one Library one version of a

117
00:04:46,199 --> 00:04:49,740
library uh is is allowed in all of your

118
00:04:49,740 --> 00:04:51,120
applications okay this worked

119
00:04:51,120 --> 00:04:53,820
brilliantly for the longest time uh

120
00:04:53,820 --> 00:04:55,680
unfortunately it turned out that in the

121
00:04:55,680 --> 00:04:58,560
same version that Xerxes fixed a very

122
00:04:58,560 --> 00:05:01,020
severe security vulnerability they also

123
00:05:01,020 --> 00:05:03,780
happened to remove functionality

124
00:05:03,780 --> 00:05:05,820
that I was relying on

125
00:05:05,820 --> 00:05:07,320
and this put me in a very difficult

126
00:05:07,320 --> 00:05:09,960
position right I had a choice to make

127
00:05:09,960 --> 00:05:13,740
either I uh allow the software that I

128
00:05:13,740 --> 00:05:15,360
know to be vulnerable to continue to run

129
00:05:15,360 --> 00:05:17,880
in production whilst I'm chasing up and

130
00:05:17,880 --> 00:05:19,500
trying to re-implement the functionality

131
00:05:19,500 --> 00:05:22,280
that they re that they removed

132
00:05:22,280 --> 00:05:26,100
or I uh patch the software and then

133
00:05:26,100 --> 00:05:28,199
break my application and then my users

134
00:05:28,199 --> 00:05:30,539
have no access to the application whilst

135
00:05:30,539 --> 00:05:33,360
I'm racing to fix up this particular

136
00:05:33,360 --> 00:05:35,759
uh this particular case

137
00:05:35,759 --> 00:05:38,639
now in in my case uh somebody very

138
00:05:38,639 --> 00:05:41,580
senior at Google emailed my manager to

139
00:05:41,580 --> 00:05:44,580
help me make time to prioritize this

140
00:05:44,580 --> 00:05:46,440
which was very awkward for a very young

141
00:05:46,440 --> 00:05:49,500
Jazz but but the point here is that

142
00:05:49,500 --> 00:05:52,440
forced patching

143
00:05:52,440 --> 00:05:54,419
forces these kinds of very difficult

144
00:05:54,419 --> 00:05:57,560
choices on you

145
00:05:58,380 --> 00:06:00,300
even our friends in compliance

146
00:06:00,300 --> 00:06:02,720
understand that this is difficult

147
00:06:02,720 --> 00:06:04,280
companies

148
00:06:04,280 --> 00:06:08,220
companies have limited resources and uh

149
00:06:08,220 --> 00:06:11,460
even the compliance folk recognize that

150
00:06:11,460 --> 00:06:15,840
in order to fix up the software patches

151
00:06:15,840 --> 00:06:18,060
need to be prioritized and another way

152
00:06:18,060 --> 00:06:20,460
of saying that is to say well we know

153
00:06:20,460 --> 00:06:22,500
that they are going to be patches that

154
00:06:22,500 --> 00:06:25,440
you know you need to apply

155
00:06:25,440 --> 00:06:27,840
that you have not got the limited that

156
00:06:27,840 --> 00:06:30,060
you have not got the resources to apply

157
00:06:30,060 --> 00:06:32,639
what that means is that sooner or later

158
00:06:32,639 --> 00:06:34,380
you're going you're going to have

159
00:06:34,380 --> 00:06:36,960
software running in production that is

160
00:06:36,960 --> 00:06:38,460
unpatched and that you know is

161
00:06:38,460 --> 00:06:40,560
vulnerable

162
00:06:40,560 --> 00:06:42,720
which which is which paints a very Bleak

163
00:06:42,720 --> 00:06:44,819
picture right this is a this is a very

164
00:06:44,819 --> 00:06:47,460
Bleak situation because it means that

165
00:06:47,460 --> 00:06:48,900
not because you're a bad security

166
00:06:48,900 --> 00:06:50,759
engineer not because your organization

167
00:06:50,759 --> 00:06:53,280
is neglectful but because you have

168
00:06:53,280 --> 00:06:55,080
limited resources

169
00:06:55,080 --> 00:06:58,080
software is going to be unpatched what

170
00:06:58,080 --> 00:07:00,960
can you do about it what can we do what

171
00:07:00,960 --> 00:07:03,300
tricks can we have in our tool chest so

172
00:07:03,300 --> 00:07:05,160
that the extent to which we are

173
00:07:05,160 --> 00:07:07,860
vulnerable whilst we are unpatched is

174
00:07:07,860 --> 00:07:09,419
reduced and that's what we're going to

175
00:07:09,419 --> 00:07:11,039
be talking about today

176
00:07:11,039 --> 00:07:12,840
um if you think about it what is the

177
00:07:12,840 --> 00:07:14,520
point of patching the point of patching

178
00:07:14,520 --> 00:07:17,819
is to build this beautiful basket of uh

179
00:07:17,819 --> 00:07:19,979
of fruit right

180
00:07:19,979 --> 00:07:22,620
um and and and the problem is that every

181
00:07:22,620 --> 00:07:25,680
once in a while you have a rotten apple

182
00:07:25,680 --> 00:07:28,319
in the basket and that's going to spoil

183
00:07:28,319 --> 00:07:30,660
your entire basket of fruit and patching

184
00:07:30,660 --> 00:07:33,120
is supposed to fix up that one apple but

185
00:07:33,120 --> 00:07:35,039
if you think about it in those terms you

186
00:07:35,039 --> 00:07:36,780
come to realize well there's actually a

187
00:07:36,780 --> 00:07:37,860
whole bunch of other things that we

188
00:07:37,860 --> 00:07:40,319
could be doing too right uh it turns out

189
00:07:40,319 --> 00:07:43,080
I don't like apples I just don't like

190
00:07:43,080 --> 00:07:45,900
apples and so you can remove the fruit

191
00:07:45,900 --> 00:07:48,000
from your basket that you don't like or

192
00:07:48,000 --> 00:07:49,740
don't want this is attack surface

193
00:07:49,740 --> 00:07:52,919
reduction not only that the fruit that

194
00:07:52,919 --> 00:07:56,280
you do like they can also spoil and you

195
00:07:56,280 --> 00:07:57,900
know spread like contagion throughout

196
00:07:57,900 --> 00:08:00,419
your entire fruit basket what you can do

197
00:08:00,419 --> 00:08:03,840
there is compartmentalize and isolate

198
00:08:03,840 --> 00:08:05,340
these fruits so that yes the fruit that

199
00:08:05,340 --> 00:08:06,840
are going to go bad are going to go bad

200
00:08:06,840 --> 00:08:09,120
but they don't end up spoiling the

201
00:08:09,120 --> 00:08:10,800
entire batch

202
00:08:10,800 --> 00:08:15,240
the concrete example uh here is a tech

203
00:08:15,240 --> 00:08:16,860
surface reduction we have things like

204
00:08:16,860 --> 00:08:19,020
s-bomb that has been all the rage I

205
00:08:19,020 --> 00:08:20,099
think that that's all I've heard about

206
00:08:20,099 --> 00:08:23,039
for the last three years of b-sides uh

207
00:08:23,039 --> 00:08:24,780
software bill of materials basically

208
00:08:24,780 --> 00:08:27,360
says what it says that as long as I

209
00:08:27,360 --> 00:08:30,060
understand what software is going in to

210
00:08:30,060 --> 00:08:32,458
my application I can choose to remove

211
00:08:32,458 --> 00:08:35,039
the software that I don't need or remove

212
00:08:35,039 --> 00:08:37,559
the software that I don't want we have

213
00:08:37,559 --> 00:08:39,659
content security policy CSP for web

214
00:08:39,659 --> 00:08:41,219
applications does a very similar thing

215
00:08:41,219 --> 00:08:43,860
what does it say it says that I only

216
00:08:43,860 --> 00:08:46,740
want these libraries loaded from this

217
00:08:46,740 --> 00:08:48,839
location to be used in my application

218
00:08:48,839 --> 00:08:52,440
right just just the mangoes and bananas

219
00:08:52,440 --> 00:08:55,019
for me uh nothing else right and the

220
00:08:55,019 --> 00:08:57,060
equivalent for that in web applications

221
00:08:57,060 --> 00:09:00,540
means that you can you don't need your

222
00:09:00,540 --> 00:09:02,760
web application to suddenly load the

223
00:09:02,760 --> 00:09:05,100
entire internet it just says that the

224
00:09:05,100 --> 00:09:07,260
only things that you can have are loaded

225
00:09:07,260 --> 00:09:09,420
from particular locations

226
00:09:09,420 --> 00:09:11,760
um the other thing to recognize is

227
00:09:11,760 --> 00:09:14,220
software processes software is not the

228
00:09:14,220 --> 00:09:16,320
only solution we can have processes as

229
00:09:16,320 --> 00:09:18,959
well I like to call this a CSO with a

230
00:09:18,959 --> 00:09:21,959
stick right if you have a person in

231
00:09:21,959 --> 00:09:24,959
charge who decides like no this is the

232
00:09:24,959 --> 00:09:26,399
quality of software these are the

233
00:09:26,399 --> 00:09:28,260
organizations this is the kind of a

234
00:09:28,260 --> 00:09:31,800
development process that she wants to

235
00:09:31,800 --> 00:09:34,200
use to load software into our

236
00:09:34,200 --> 00:09:36,360
application like that makes a dramatic

237
00:09:36,360 --> 00:09:38,220
difference in reducing the attack

238
00:09:38,220 --> 00:09:40,260
surface area

239
00:09:40,260 --> 00:09:42,180
on the other hand you can do isolation

240
00:09:42,180 --> 00:09:44,399
you can do Network segmentation where

241
00:09:44,399 --> 00:09:47,519
you don't need to have every node in

242
00:09:47,519 --> 00:09:49,500
your Production Service connect to every

243
00:09:49,500 --> 00:09:51,860
other node you can use things like

244
00:09:51,860 --> 00:09:54,899
iptables to separate out systems

245
00:09:54,899 --> 00:09:57,120
similarly you can have system level

246
00:09:57,120 --> 00:09:59,580
sandboxing you can have things like SEC

247
00:09:59,580 --> 00:10:03,360
comp and what is it called app armor app

248
00:10:03,360 --> 00:10:06,120
armor to say what services an

249
00:10:06,120 --> 00:10:09,120
application can use or call the the

250
00:10:09,120 --> 00:10:11,640
thing to remember there is even though

251
00:10:11,640 --> 00:10:13,800
you don't have a perfect white list

252
00:10:13,800 --> 00:10:16,620
every time you remove a system call you

253
00:10:16,620 --> 00:10:18,959
remove some part of the vulnerable

254
00:10:18,959 --> 00:10:22,140
applications that a vulnerable system

255
00:10:22,140 --> 00:10:24,300
calls that an application can call and

256
00:10:24,300 --> 00:10:26,519
then very close to my heart is a thing

257
00:10:26,519 --> 00:10:28,500
called virtualization virtualization

258
00:10:28,500 --> 00:10:31,260
means that you lift an application up

259
00:10:31,260 --> 00:10:33,120
and you replace functions that the

260
00:10:33,120 --> 00:10:35,160
application is calling with other

261
00:10:35,160 --> 00:10:38,580
functions where the effect of the

262
00:10:38,580 --> 00:10:40,279
function is the same but the function

263
00:10:40,279 --> 00:10:43,560
additionally goes ahead and logs blocks

264
00:10:43,560 --> 00:10:46,500
or attenuates the effect of the call of

265
00:10:46,500 --> 00:10:48,060
the functions that you're calling the

266
00:10:48,060 --> 00:10:50,640
thing to remember here is that in all of

267
00:10:50,640 --> 00:10:53,160
these cases you are reducing the blast

268
00:10:53,160 --> 00:10:55,200
radius of an attack of your vulnerable

269
00:10:55,200 --> 00:10:58,140
software but you're not necessarily

270
00:10:58,140 --> 00:11:01,680
having to immediately patch software

271
00:11:01,680 --> 00:11:03,060
we're going to go through a couple of

272
00:11:03,060 --> 00:11:06,600
practical examples uh uh starting with

273
00:11:06,600 --> 00:11:09,180
network isolation all of you are already

274
00:11:09,180 --> 00:11:10,740
familiar with this so I'm going to blaze

275
00:11:10,740 --> 00:11:12,779
through this you have a load balancer

276
00:11:12,779 --> 00:11:14,880
that's able to access a web server or an

277
00:11:14,880 --> 00:11:17,040
API server each of these are able to

278
00:11:17,040 --> 00:11:21,360
connect to database uh if you see the

279
00:11:21,360 --> 00:11:23,640
load balancer directly accessing one of

280
00:11:23,640 --> 00:11:25,260
your databases you know something has

281
00:11:25,260 --> 00:11:27,420
gone wrong you've probably been popped

282
00:11:27,420 --> 00:11:29,100
you've probably been popped because

283
00:11:29,100 --> 00:11:31,260
you're running some unpatched software

284
00:11:31,260 --> 00:11:33,540
the ways to fix this you can either

285
00:11:33,540 --> 00:11:35,760
patch your software which is absolutely

286
00:11:35,760 --> 00:11:37,620
the thing that you should do but in the

287
00:11:37,620 --> 00:11:39,779
meantime you can also use Network

288
00:11:39,779 --> 00:11:42,120
segmentation you can use iptables to

289
00:11:42,120 --> 00:11:43,399
prevent

290
00:11:43,399 --> 00:11:45,720
Pathways throughout this entire process

291
00:11:45,720 --> 00:11:48,420
that are unexpected so the load balancer

292
00:11:48,420 --> 00:11:49,980
should only be able to talk to the web

293
00:11:49,980 --> 00:11:52,440
server or the API server and not

294
00:11:52,440 --> 00:11:54,200
directly to the database

295
00:11:54,200 --> 00:11:57,180
in in these cases the software remains

296
00:11:57,180 --> 00:11:59,579
unpatched it remains vulnerable but the

297
00:11:59,579 --> 00:12:01,740
but the level of attack that the

298
00:12:01,740 --> 00:12:03,779
attacker can carry out is much more

299
00:12:03,779 --> 00:12:05,160
difficult

300
00:12:05,160 --> 00:12:07,560
so our second example is a system level

301
00:12:07,560 --> 00:12:10,680
isolation and for that we chosen image

302
00:12:10,680 --> 00:12:14,040
magic which is widely used by web apps

303
00:12:14,040 --> 00:12:16,019
and notoriously plagued by

304
00:12:16,019 --> 00:12:18,360
vulnerabilities so specifically selected

305
00:12:18,360 --> 00:12:21,300
a command injection vulnerability that

306
00:12:21,300 --> 00:12:25,140
was branded with the image tragic by the

307
00:12:25,140 --> 00:12:26,880
way don't you think that security people

308
00:12:26,880 --> 00:12:29,160
come up with the best name puns we

309
00:12:29,160 --> 00:12:31,200
really do right

310
00:12:31,200 --> 00:12:35,399
so image magic uses external programs to

311
00:12:35,399 --> 00:12:38,339
do some chores called delegates so

312
00:12:38,339 --> 00:12:41,279
delegates are configured with templates

313
00:12:41,279 --> 00:12:44,639
that tells what to do so in this example

314
00:12:44,639 --> 00:12:47,160
curled is being used to fetch an image

315
00:12:47,160 --> 00:12:50,820
that is stored in the https address but

316
00:12:50,820 --> 00:12:53,339
what they forgot is the basic rule of

317
00:12:53,339 --> 00:12:55,680
web app security that you should never

318
00:12:55,680 --> 00:12:58,860
use and sanitize user controlled inputs

319
00:12:58,860 --> 00:13:00,660
in your application so this

320
00:13:00,660 --> 00:13:04,440
vulnerability allows someone to supply a

321
00:13:04,440 --> 00:13:07,680
command and the the result of executing

322
00:13:07,680 --> 00:13:09,180
that command will be returned to the

323
00:13:09,180 --> 00:13:11,040
attacker

324
00:13:11,040 --> 00:13:13,680
so let's see that in action we have a

325
00:13:13,680 --> 00:13:16,620
video so I'll be using the same example

326
00:13:16,620 --> 00:13:20,279
to list the current directory

327
00:13:20,279 --> 00:13:22,519
okay

328
00:13:23,100 --> 00:13:25,019
now let's run

329
00:13:25,019 --> 00:13:27,899
image magic and there you go you have an

330
00:13:27,899 --> 00:13:29,899
interesting file called secret text

331
00:13:29,899 --> 00:13:35,300
let's see if we can look inside

332
00:13:35,639 --> 00:13:37,920
by changing the command running that

333
00:13:37,920 --> 00:13:41,700
again and you can now let's find a more

334
00:13:41,700 --> 00:13:44,160
interesting targets say

335
00:13:44,160 --> 00:13:45,440
Etc password

336
00:13:45,440 --> 00:13:48,680
yeah yeah

337
00:13:50,880 --> 00:13:53,579
all right

338
00:13:53,579 --> 00:13:55,920
I'm sorry you have to see me type very

339
00:13:55,920 --> 00:13:57,120
slowly

340
00:13:57,120 --> 00:14:00,180
okay there you go so it's not a surprise

341
00:14:00,180 --> 00:14:02,339
that it worked

342
00:14:02,339 --> 00:14:04,740
so this vulnerability was quickly

343
00:14:04,740 --> 00:14:07,139
patched and back then the recommended

344
00:14:07,139 --> 00:14:09,720
actions were to verify the output if it

345
00:14:09,720 --> 00:14:11,820
contained like the magic bytes known to

346
00:14:11,820 --> 00:14:15,600
be generated by the most common image

347
00:14:15,600 --> 00:14:18,360
file formats to disable unnecessary

348
00:14:18,360 --> 00:14:21,360
delegates and to patch and what are

349
00:14:21,360 --> 00:14:23,100
these These are stronger validation

350
00:14:23,100 --> 00:14:25,380
attack surface reduction and security

351
00:14:25,380 --> 00:14:28,200
updates so what else what else could you

352
00:14:28,200 --> 00:14:29,639
do

353
00:14:29,639 --> 00:14:32,480
it turns out that even then elkantov

354
00:14:32,480 --> 00:14:35,100
published a blog post saying that you

355
00:14:35,100 --> 00:14:37,320
should sandbox as well so we really

356
00:14:37,320 --> 00:14:39,899
meant SEC comp which is only like it

357
00:14:39,899 --> 00:14:41,820
requires changing the source code so if

358
00:14:41,820 --> 00:14:44,040
you're just like a third party using

359
00:14:44,040 --> 00:14:46,860
image magic you wouldn't go that far but

360
00:14:46,860 --> 00:14:48,720
there's another option on the table it's

361
00:14:48,720 --> 00:14:51,360
up armor so if you don't know up armor

362
00:14:51,360 --> 00:14:53,399
it's an open source solution that allows

363
00:14:53,399 --> 00:14:56,040
you to basically block out access to

364
00:14:56,040 --> 00:14:57,899
files to network to other capabilities

365
00:14:57,899 --> 00:15:00,120
by default and then you have to

366
00:15:00,120 --> 00:15:02,339
explicitly re-enable the things that the

367
00:15:02,339 --> 00:15:05,040
application is expected to use

368
00:15:05,040 --> 00:15:07,440
this is the app armor profile that we'll

369
00:15:07,440 --> 00:15:09,480
be using to mitigate that vulnerability

370
00:15:09,480 --> 00:15:11,699
I'm not going over this whole

371
00:15:11,699 --> 00:15:13,980
configuration I'm just pointing out that

372
00:15:13,980 --> 00:15:16,980
it is very restrictive in what it will

373
00:15:16,980 --> 00:15:21,480
allow uh to read from the ETC directory

374
00:15:21,480 --> 00:15:24,600
okay so this is the demo so let's play

375
00:15:24,600 --> 00:15:28,260
that out with the up armor profile in so

376
00:15:28,260 --> 00:15:30,540
we weren't able to see the contents of

377
00:15:30,540 --> 00:15:35,100
the the password file and you can see

378
00:15:35,100 --> 00:15:36,839
because it was too fast but basically

379
00:15:36,839 --> 00:15:39,480
the log file was showing that there was

380
00:15:39,480 --> 00:15:42,240
an attempt but it was denied

381
00:15:42,240 --> 00:15:44,399
the third and final example application

382
00:15:44,399 --> 00:15:47,220
isolation and for this we'll we crafted

383
00:15:47,220 --> 00:15:49,440
a very small web app it's basically a

384
00:15:49,440 --> 00:15:52,019
payment page that contains built-in

385
00:15:52,019 --> 00:15:54,839
access vulnerability it allows you to

386
00:15:54,839 --> 00:15:57,660
pass an xss Vector using a get parameter

387
00:15:57,660 --> 00:16:00,360
and it reflects that parameter back to

388
00:16:00,360 --> 00:16:02,040
the page

389
00:16:02,040 --> 00:16:04,800
so let's exploit this by supplying a

390
00:16:04,800 --> 00:16:07,440
multi-stage xss payload so the first

391
00:16:07,440 --> 00:16:10,560
stage is very simple it's just a script

392
00:16:10,560 --> 00:16:13,019
Source elements adding a script for

393
00:16:13,019 --> 00:16:15,560
loading a script from baddomain.com

394
00:16:15,560 --> 00:16:19,019
badscrip.js and this allows the attacker

395
00:16:19,019 --> 00:16:21,839
to change using the second stage to

396
00:16:21,839 --> 00:16:25,380
change what gets injected dynamically

397
00:16:25,380 --> 00:16:27,839
and this is the second stage so it's

398
00:16:27,839 --> 00:16:30,360
very simple basically it sets an event

399
00:16:30,360 --> 00:16:33,240
handler for the on submit of the payment

400
00:16:33,240 --> 00:16:35,540
form so when the form is submitted

401
00:16:35,540 --> 00:16:38,100
iterates and collects every form field

402
00:16:38,100 --> 00:16:41,160
it outputs that to the console to prove

403
00:16:41,160 --> 00:16:44,220
that it got access and then it actually

404
00:16:44,220 --> 00:16:46,139
charts out the data to a malicious

405
00:16:46,139 --> 00:16:48,720
domain now I'm not showing you this

406
00:16:48,720 --> 00:16:50,339
attack you have to trust my word that

407
00:16:50,339 --> 00:16:52,560
this works well we're straight we're

408
00:16:52,560 --> 00:16:54,240
going straight to Mitigation Of This

409
00:16:54,240 --> 00:16:56,639
attack and for that we're using a web

410
00:16:56,639 --> 00:16:59,279
page Integrity or WPI which is a

411
00:16:59,279 --> 00:17:01,380
client-side sandboxing solution that we

412
00:17:01,380 --> 00:17:04,319
have developed WPI allows the

413
00:17:04,319 --> 00:17:06,480
application owner to control what

414
00:17:06,480 --> 00:17:09,119
scripts see and do very much like app

415
00:17:09,119 --> 00:17:13,319
armor but for the browser it offers an

416
00:17:13,319 --> 00:17:16,199
expressive rules engine that allows

417
00:17:16,199 --> 00:17:19,439
granular control over a wide variety of

418
00:17:19,439 --> 00:17:22,559
behaviors you can do attack surface

419
00:17:22,559 --> 00:17:24,359
reduction by blocking out like

420
00:17:24,359 --> 00:17:26,339
everything that Europe patient will not

421
00:17:26,339 --> 00:17:29,940
use and you at the same time it allows

422
00:17:29,940 --> 00:17:32,340
to set boundaries using isolation rules

423
00:17:32,340 --> 00:17:34,320
to control or to prevent any scripts

424
00:17:34,320 --> 00:17:36,000
from touching critical parts of the

425
00:17:36,000 --> 00:17:37,679
application

426
00:17:37,679 --> 00:17:40,679
so next we're rolling out the rule that

427
00:17:40,679 --> 00:17:43,679
for bits or to blocks access to the form

428
00:17:43,679 --> 00:17:47,220
by any file but the process form.js

429
00:17:47,220 --> 00:17:50,100
which is not the attacking code at the

430
00:17:50,100 --> 00:17:51,780
beginning you will see some data from a

431
00:17:51,780 --> 00:17:53,700
previous run where we were running in

432
00:17:53,700 --> 00:17:56,940
alert mode only never mind that

433
00:17:56,940 --> 00:17:59,220
okay so this is the video

434
00:17:59,220 --> 00:18:03,679
so first we have to fill in the form

435
00:18:05,340 --> 00:18:09,360
okay and remember like the rule is

436
00:18:09,360 --> 00:18:11,940
already running on the website

437
00:18:11,940 --> 00:18:14,520
and it failed to to leak the credit card

438
00:18:14,520 --> 00:18:17,400
holder data we jump to the drop server

439
00:18:17,400 --> 00:18:20,100
we don't have any new entry so it means

440
00:18:20,100 --> 00:18:22,020
that it failed to collect the data and

441
00:18:22,020 --> 00:18:24,720
in wpis dashboard we see five new alerts

442
00:18:24,720 --> 00:18:27,780
the first one is the addition of the

443
00:18:27,780 --> 00:18:29,700
second stage script and then four

444
00:18:29,700 --> 00:18:32,820
additional ones that represent the

445
00:18:32,820 --> 00:18:35,340
blocking of the access to the forms

446
00:18:35,340 --> 00:18:37,380
so the first one wasn't block we're just

447
00:18:37,380 --> 00:18:39,539
seeing that it was added to the page

448
00:18:39,539 --> 00:18:41,640
let's look into the details you can see

449
00:18:41,640 --> 00:18:44,700
it's uh the credit card number from the

450
00:18:44,700 --> 00:18:46,559
credit card form we can see the source

451
00:18:46,559 --> 00:18:48,660
that initiated the action and you can

452
00:18:48,660 --> 00:18:50,220
send you can see details on the

453
00:18:50,220 --> 00:18:53,179
sensitive data

454
00:18:53,940 --> 00:18:56,660
so

455
00:18:56,880 --> 00:18:59,640
so in the previous example stage one and

456
00:18:59,640 --> 00:19:01,320
stage two were still being added to the

457
00:19:01,320 --> 00:19:03,960
page so we can do better we can roll out

458
00:19:03,960 --> 00:19:05,940
a new rule to forbid the addition of

459
00:19:05,940 --> 00:19:08,039
script Source elements to the Page by

460
00:19:08,039 --> 00:19:10,980
any script and doing that we will be

461
00:19:10,980 --> 00:19:13,200
able to block out the addition of the

462
00:19:13,200 --> 00:19:16,020
second stage script to the page

463
00:19:16,020 --> 00:19:17,460
okay

464
00:19:17,460 --> 00:19:20,160
so we have to do another run we'll have

465
00:19:20,160 --> 00:19:23,480
to fill in the form again

466
00:19:25,679 --> 00:19:28,020
all right never mind the error we didn't

467
00:19:28,020 --> 00:19:30,660
bother to implement the post page

468
00:19:30,660 --> 00:19:32,880
and you will have

469
00:19:32,880 --> 00:19:34,620
a new alert here

470
00:19:34,620 --> 00:19:37,620
that confirms that we have successfully

471
00:19:37,620 --> 00:19:41,400
blocked the addition of the second stage

472
00:19:41,400 --> 00:19:43,679
so if we look the details you can see

473
00:19:43,679 --> 00:19:45,120
that

474
00:19:45,120 --> 00:19:48,240
you can see the the scripts the the

475
00:19:48,240 --> 00:19:51,059
domain where it would be loaded and the

476
00:19:51,059 --> 00:19:53,580
script that initiated that action

477
00:19:53,580 --> 00:19:55,320
okay

478
00:19:55,320 --> 00:19:58,140
so you have to remember we weren't we

479
00:19:58,140 --> 00:20:00,179
didn't patch the application right so

480
00:20:00,179 --> 00:20:03,240
just to summarize uh what you had here

481
00:20:03,240 --> 00:20:07,799
is uh using WPI and virtualization what

482
00:20:07,799 --> 00:20:10,080
you were able to do is prevent the

483
00:20:10,080 --> 00:20:12,780
exfiltration of data actually you to

484
00:20:12,780 --> 00:20:15,419
stop the attack entirely whilst the

485
00:20:15,419 --> 00:20:18,000
application was unpatched presumably the

486
00:20:18,000 --> 00:20:20,640
application developers were racing to

487
00:20:20,640 --> 00:20:22,860
develop a patch but in the interim you

488
00:20:22,860 --> 00:20:24,720
were able to mitigate and stop the

489
00:20:24,720 --> 00:20:26,400
attack right that's what we exactly

490
00:20:26,400 --> 00:20:28,740
exactly so we're reaching the end of our

491
00:20:28,740 --> 00:20:30,179
talk

492
00:20:30,179 --> 00:20:33,480
and so patching remains an important

493
00:20:33,480 --> 00:20:35,880
part of every company's cyber security

494
00:20:35,880 --> 00:20:38,580
strategy but it's not always the best

495
00:20:38,580 --> 00:20:41,179
solution or the most practical

496
00:20:41,179 --> 00:20:44,820
there are alternatives like reducing the

497
00:20:44,820 --> 00:20:46,919
attack surface or isolation that can

498
00:20:46,919 --> 00:20:50,039
complement patching and sometimes save

499
00:20:50,039 --> 00:20:53,100
the day when patching will not you can

500
00:20:53,100 --> 00:20:55,500
think of other options I'm sure but

501
00:20:55,500 --> 00:20:57,419
hopefully by now we have convinced you

502
00:20:57,419 --> 00:21:00,419
that these two can be highly effective

503
00:21:00,419 --> 00:21:03,419
so if by leveraging these Alternatives

504
00:21:03,419 --> 00:21:05,700
and Implement them where appropriate

505
00:21:05,700 --> 00:21:09,179
companies can be can have a various

506
00:21:09,179 --> 00:21:11,460
better security posture and be better

507
00:21:11,460 --> 00:21:14,580
prepared to to against like new threats

508
00:21:14,580 --> 00:21:17,039
coming in

509
00:21:17,039 --> 00:21:19,020
um anything that you want to add just

510
00:21:19,020 --> 00:21:21,720
these people are 25 minutes late to

511
00:21:21,720 --> 00:21:22,330
their patching

512
00:21:22,330 --> 00:21:26,790
[Laughter]

513
00:21:27,419 --> 00:21:29,640
he said oh your title of your talk is

514
00:21:29,640 --> 00:21:31,860
clickbait but this is not true right

515
00:21:31,860 --> 00:21:34,020
like if the if there's one takeaway that

516
00:21:34,020 --> 00:21:36,720
you have uh from this talk hopefully

517
00:21:36,720 --> 00:21:38,159
it's not that you don't need to patch

518
00:21:38,159 --> 00:21:39,780
but if you know you're talking to your

519
00:21:39,780 --> 00:21:41,820
friends and your peers over the next

520
00:21:41,820 --> 00:21:44,280
week and they're arguing that you

521
00:21:44,280 --> 00:21:47,100
absolutely have to patch now hopefully

522
00:21:47,100 --> 00:21:51,179
what you have arguments to show that

523
00:21:51,179 --> 00:21:53,940
uh using attack surface reduction and

524
00:21:53,940 --> 00:21:57,840
using isolation uh to reduce the blast

525
00:21:57,840 --> 00:22:00,780
radius what you can do is recognize that

526
00:22:00,780 --> 00:22:03,360
there is a cost associated with patching

527
00:22:03,360 --> 00:22:07,200
and that blasts area reduction allows

528
00:22:07,200 --> 00:22:09,659
you to have the breathing room to be

529
00:22:09,659 --> 00:22:13,320
able to patch your software in time

530
00:22:13,320 --> 00:22:16,939
we are done thank you

531
00:22:19,919 --> 00:22:22,500
we have time for a couple questions from

532
00:22:22,500 --> 00:22:23,640
the audience if you've got questions

533
00:22:23,640 --> 00:22:28,340
raise your hand and I will come to you

534
00:22:32,220 --> 00:22:34,080
this is very Rock Style by the way I

535
00:22:34,080 --> 00:22:36,240
can't see any of you

536
00:22:36,240 --> 00:22:39,720
okay uh middle uh

537
00:22:39,720 --> 00:22:42,480
hi there so um I work at a large company

538
00:22:42,480 --> 00:22:44,820
and I'm in

539
00:22:44,820 --> 00:22:46,679
what we call the security embedded team

540
00:22:46,679 --> 00:22:48,179
which is the team that goes out and

541
00:22:48,179 --> 00:22:51,360
makes security nice and pleasant for the

542
00:22:51,360 --> 00:22:52,860
app teams that don't want to hear from

543
00:22:52,860 --> 00:22:55,980
us so what I'm wondering about is have

544
00:22:55,980 --> 00:22:58,380
you thought is it is this stuff about

545
00:22:58,380 --> 00:23:00,480
putting like app armor and Jace

546
00:23:00,480 --> 00:23:01,500
scrambler

547
00:23:01,500 --> 00:23:03,600
have you thought about like how we can

548
00:23:03,600 --> 00:23:05,760
deploy it at a global Enterprise level

549
00:23:05,760 --> 00:23:08,059
without pissing off everybody who's

550
00:23:08,059 --> 00:23:10,740
whose application doesn't quite conform

551
00:23:10,740 --> 00:23:13,200
and still have useful rules

552
00:23:13,200 --> 00:23:16,140
well actually there are vetted up armor

553
00:23:16,140 --> 00:23:18,000
profiles that you can use out of the box

554
00:23:18,000 --> 00:23:22,140
that will not for sure like break and

555
00:23:22,140 --> 00:23:25,860
piss up other people yes and similarly

556
00:23:25,860 --> 00:23:28,140
for Jason yeah

557
00:23:28,140 --> 00:23:30,120
so if they are vetted if they are well

558
00:23:30,120 --> 00:23:34,140
tested like if it breaks maybe you want

559
00:23:34,140 --> 00:23:36,000
to check that out because it might be an

560
00:23:36,000 --> 00:23:38,960
exploitation or something

561
00:23:40,260 --> 00:23:42,960
camera thank you for the wonderful

562
00:23:42,960 --> 00:23:45,179
presentation I had a question about the

563
00:23:45,179 --> 00:23:46,919
the example the second example where all

564
00:23:46,919 --> 00:23:49,140
the form fields are stolen couldn't that

565
00:23:49,140 --> 00:23:51,840
be easier just be solved by implementing

566
00:23:51,840 --> 00:23:53,880
a Content security policy

567
00:23:53,880 --> 00:23:57,539
well the the CSP actually it's it's kind

568
00:23:57,539 --> 00:23:59,640
of a binary in that sense like if you

569
00:23:59,640 --> 00:24:01,620
accept a script to be included in that

570
00:24:01,620 --> 00:24:04,260
page it's you are giving out a blank

571
00:24:04,260 --> 00:24:06,840
check because that script was allowed

572
00:24:06,840 --> 00:24:09,419
you didn't know that you would try to

573
00:24:09,419 --> 00:24:12,299
access the form Fields now that you gave

574
00:24:12,299 --> 00:24:15,720
access to that to that script it can

575
00:24:15,720 --> 00:24:18,059
collect data and we know of many

576
00:24:18,059 --> 00:24:21,960
examples where either an attack or just

577
00:24:21,960 --> 00:24:24,539
abusing their access scripts were caught

578
00:24:24,539 --> 00:24:28,559
like grabbing data when they shouldn't

579
00:24:28,559 --> 00:24:31,200
and this is not to dismiss CSP right so

580
00:24:31,200 --> 00:24:34,620
all of this talk is that what you can do

581
00:24:34,620 --> 00:24:37,799
is reduce the attack surface area or

582
00:24:37,799 --> 00:24:40,320
isolate and CSP does do a very good job

583
00:24:40,320 --> 00:24:42,960
in many cases of preventing arbitrary

584
00:24:42,960 --> 00:24:44,760
scripts from loading but the scripts

585
00:24:44,760 --> 00:24:47,220
that do load you require something more

586
00:24:47,220 --> 00:24:50,820
nuanced in order to say not only do I

587
00:24:50,820 --> 00:24:53,159
want to not want scripts to load from

588
00:24:53,159 --> 00:24:55,020
this area but I want it to be the case

589
00:24:55,020 --> 00:24:57,539
that having loaded only the following

590
00:24:57,539 --> 00:25:00,539
apis uh uh are allowed just a quick

591
00:25:00,539 --> 00:25:03,179
compliment iccsp is removing the apples

592
00:25:03,179 --> 00:25:05,640
that you don't use so you don't like

593
00:25:05,640 --> 00:25:07,200
include the whole web

594
00:25:07,200 --> 00:25:10,020
but the ones that you do can still spoil

595
00:25:10,020 --> 00:25:11,280
the thing so it does not create

596
00:25:11,280 --> 00:25:14,159
isolation in that sense you know

597
00:25:14,159 --> 00:25:16,020
awesome thank you very much to both of

598
00:25:16,020 --> 00:25:17,580
you

599
00:25:17,580 --> 00:25:20,580
foreign

