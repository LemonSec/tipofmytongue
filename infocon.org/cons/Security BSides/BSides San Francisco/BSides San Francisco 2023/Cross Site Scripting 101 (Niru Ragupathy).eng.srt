1
00:00:00,000 --> 00:00:02,940
uh hey everyone uh I'm Nero we're gonna

2
00:00:02,940 --> 00:00:06,359
kick off the village talk right now this

3
00:00:06,359 --> 00:00:08,400
is I think I'm getting feedback from

4
00:00:08,400 --> 00:00:10,940
this one

5
00:00:11,160 --> 00:00:14,700
okay cool uh so hey I'm little uh we're

6
00:00:14,700 --> 00:00:17,220
gonna kick off the talk right now uh

7
00:00:17,220 --> 00:00:19,320
today's talk is about cross-eyed

8
00:00:19,320 --> 00:00:21,539
scripting it is a one-on-one talk so if

9
00:00:21,539 --> 00:00:23,640
you're here expecting in-depth stuff

10
00:00:23,640 --> 00:00:25,800
about cross-site scripting not to talk

11
00:00:25,800 --> 00:00:28,500
for you but if you're here just to kind

12
00:00:28,500 --> 00:00:31,019
of get to know what exercise is and try

13
00:00:31,019 --> 00:00:33,239
your hand at a beginner friendly CTF

14
00:00:33,239 --> 00:00:35,000
challenge you've come to the right talk

15
00:00:35,000 --> 00:00:38,219
so before I kick things off I do want to

16
00:00:38,219 --> 00:00:40,379
give a shout out to my colleagues Jenna

17
00:00:40,379 --> 00:00:42,420
David and kodo whose slides I've

18
00:00:42,420 --> 00:00:45,780
liberally used here and a big shout out

19
00:00:45,780 --> 00:00:47,460
to them for like letting me borrow their

20
00:00:47,460 --> 00:00:49,820
slides

21
00:00:49,920 --> 00:00:52,680
so a brief intro I'm Nero I'm a security

22
00:00:52,680 --> 00:00:56,100
engineer at Google my day job is to

23
00:00:56,100 --> 00:00:58,620
break into things as a red teamer in my

24
00:00:58,620 --> 00:01:00,660
free time I do try to write CTF

25
00:01:00,660 --> 00:01:03,799
challenges be it web or mobile or Cloud

26
00:01:03,799 --> 00:01:06,240
I'm also one of the core organizers of

27
00:01:06,240 --> 00:01:08,040
the precise as a CTF so you'll probably

28
00:01:08,040 --> 00:01:10,860
see me at the CDF room we swing by there

29
00:01:10,860 --> 00:01:12,780
so if you have any questions after the

30
00:01:12,780 --> 00:01:14,760
stocks feel free to drop in there and

31
00:01:14,760 --> 00:01:18,360
I'm happy to field all of them

32
00:01:18,360 --> 00:01:22,820
cool with that let's dive into xss

33
00:01:22,979 --> 00:01:25,860
web kind of has its own different class

34
00:01:25,860 --> 00:01:27,720
of vulnerabilities

35
00:01:27,720 --> 00:01:29,220
um which is not surprising right like

36
00:01:29,220 --> 00:01:31,200
we've kind of sprouted out of nowhere it

37
00:01:31,200 --> 00:01:32,939
became a really big thing and security

38
00:01:32,939 --> 00:01:35,159
has been running behind that carriage

39
00:01:35,159 --> 00:01:37,259
since it started

40
00:01:37,259 --> 00:01:38,939
um one of the classes of vulnerabilities

41
00:01:38,939 --> 00:01:41,340
that you see a lot in web is injection

42
00:01:41,340 --> 00:01:42,960
style vulnerabilities

43
00:01:42,960 --> 00:01:45,180
what does that mean this typically

44
00:01:45,180 --> 00:01:48,720
happens when user data is taken and just

45
00:01:48,720 --> 00:01:51,899
plopped in and treated as code so it

46
00:01:51,899 --> 00:01:53,820
happens when user Supply data isn't

47
00:01:53,820 --> 00:01:55,799
treated as data but is treated as code

48
00:01:55,799 --> 00:01:59,460
and exercise is just a type of injection

49
00:01:59,460 --> 00:02:01,380
vulnerability which is dealing with

50
00:02:01,380 --> 00:02:04,560
JavaScript so attacker given JavaScript

51
00:02:04,560 --> 00:02:08,580
is added to the request it goes to to

52
00:02:08,580 --> 00:02:10,199
the server comes back in the response

53
00:02:10,199 --> 00:02:14,480
that's at core what exercise is

54
00:02:14,940 --> 00:02:17,580
so let's take this example here you can

55
00:02:17,580 --> 00:02:19,500
see that the title is something that the

56
00:02:19,500 --> 00:02:22,379
user controls right it can be something

57
00:02:22,379 --> 00:02:25,379
as innocuous as let's say Corgi because

58
00:02:25,379 --> 00:02:27,060
corgis are awesome and everyone should

59
00:02:27,060 --> 00:02:29,819
love corby's so let's say we put Corgi

60
00:02:29,819 --> 00:02:31,860
in there it gets plopped right into the

61
00:02:31,860 --> 00:02:33,420
header field and you see it in the

62
00:02:33,420 --> 00:02:34,500
response

63
00:02:34,500 --> 00:02:37,560
but not all people using your app are

64
00:02:37,560 --> 00:02:39,060
good people some of them might try

65
00:02:39,060 --> 00:02:41,640
breaking into it so what happens if they

66
00:02:41,640 --> 00:02:44,519
try to plug in JavaScript let's use the

67
00:02:44,519 --> 00:02:47,519
infamous you know alert box that

68
00:02:47,519 --> 00:02:49,860
everyone loves to use in xss

69
00:02:49,860 --> 00:02:53,160
if you're not you know escaping your

70
00:02:53,160 --> 00:02:57,180
responses or the user uh provided data

71
00:02:57,180 --> 00:02:58,620
it's just going to come back in the

72
00:02:58,620 --> 00:03:01,019
response and the browser goes well this

73
00:03:01,019 --> 00:03:03,360
is Javascript I'm gonna render it it

74
00:03:03,360 --> 00:03:05,040
doesn't care who supplied the JavaScript

75
00:03:05,040 --> 00:03:07,739
as long as it shows up it the browser is

76
00:03:07,739 --> 00:03:10,220
just going to render

77
00:03:11,400 --> 00:03:13,140
so this particular type of injection

78
00:03:13,140 --> 00:03:16,620
issue is what is xss and as at its core

79
00:03:16,620 --> 00:03:19,080
like we just discussed it happens when

80
00:03:19,080 --> 00:03:21,480
user Supply data is treated as code and

81
00:03:21,480 --> 00:03:23,760
not as data and at the end of the day

82
00:03:23,760 --> 00:03:25,379
the browser doesn't care what's being

83
00:03:25,379 --> 00:03:27,360
supplied to it it's your job as an

84
00:03:27,360 --> 00:03:29,700
application developer to actually make

85
00:03:29,700 --> 00:03:33,018
sure that it's properly escaped

86
00:03:34,260 --> 00:03:36,780
before we jump into xss one of the

87
00:03:36,780 --> 00:03:38,340
things that we need to dive into is

88
00:03:38,340 --> 00:03:40,200
context because this is really important

89
00:03:40,200 --> 00:03:42,239
for you to understand how to write xss

90
00:03:42,239 --> 00:03:45,019
payloads at work

91
00:03:45,360 --> 00:03:48,180
as you can see a web page kind of has a

92
00:03:48,180 --> 00:03:50,040
lot of different contexts you have HTML

93
00:03:50,040 --> 00:03:51,780
context you have URL context you have

94
00:03:51,780 --> 00:03:53,819
JavaScript context it gets really

95
00:03:53,819 --> 00:03:56,519
confusing really fast and depending on

96
00:03:56,519 --> 00:03:59,040
where your data ends up as an attacker

97
00:03:59,040 --> 00:04:00,659
you need to make sure you understand

98
00:04:00,659 --> 00:04:03,360
what that context is and you can run

99
00:04:03,360 --> 00:04:06,000
your payload within that context

100
00:04:06,000 --> 00:04:06,959
um

101
00:04:06,959 --> 00:04:08,760
and one of the things you'll also notice

102
00:04:08,760 --> 00:04:11,299
is you can have nested context as well

103
00:04:11,299 --> 00:04:14,040
and what do you do as someone who's

104
00:04:14,040 --> 00:04:16,199
writing a web app do you try to like

105
00:04:16,199 --> 00:04:18,418
juggle all these rules in your head the

106
00:04:18,418 --> 00:04:21,000
short answer is no and that's where

107
00:04:21,000 --> 00:04:22,380
we'll talk about template systems

108
00:04:22,380 --> 00:04:24,300
towards the end for mitigations but

109
00:04:24,300 --> 00:04:26,220
enough about you know trying to protect

110
00:04:26,220 --> 00:04:28,080
things we came to the store to try and

111
00:04:28,080 --> 00:04:29,759
understand how xss works and how to

112
00:04:29,759 --> 00:04:33,560
break things so let's get back to that

113
00:04:36,120 --> 00:04:38,400
let's pick a very simple example and

114
00:04:38,400 --> 00:04:39,479
let's walk through it to try and

115
00:04:39,479 --> 00:04:41,699
understand how right Nexus is payload

116
00:04:41,699 --> 00:04:44,880
here is a very simple image tag the full

117
00:04:44,880 --> 00:04:48,300
bar is the user Supply data and you

118
00:04:48,300 --> 00:04:50,100
control it so if you as an attacker

119
00:04:50,100 --> 00:04:51,660
control that how do you make this into

120
00:04:51,660 --> 00:04:54,020
an exercise

121
00:04:54,240 --> 00:04:55,860
first things first

122
00:04:55,860 --> 00:04:57,960
to write a payload that actually works

123
00:04:57,960 --> 00:04:59,940
you need to be in a JavaScript context

124
00:04:59,940 --> 00:05:02,460
because you need to be able to write run

125
00:05:02,460 --> 00:05:05,820
your code and right now where you're at

126
00:05:05,820 --> 00:05:08,520
is inside the name of an image or the

127
00:05:08,520 --> 00:05:10,800
source of image which

128
00:05:10,800 --> 00:05:13,740
isn't really JavaScript context so this

129
00:05:13,740 --> 00:05:15,360
is not going to be useful for us so

130
00:05:15,360 --> 00:05:17,580
first things first let's get out of this

131
00:05:17,580 --> 00:05:19,440
context and enter a new one

132
00:05:19,440 --> 00:05:22,020
so all you have to do is add that little

133
00:05:22,020 --> 00:05:24,479
quotes there so you get out of this

134
00:05:24,479 --> 00:05:26,580
context right now

135
00:05:26,580 --> 00:05:27,960
next up

136
00:05:27,960 --> 00:05:30,300
great this is not a JavaScript context

137
00:05:30,300 --> 00:05:33,479
we can't run or payload here but we can

138
00:05:33,479 --> 00:05:35,400
make it a JavaScript context and you're

139
00:05:35,400 --> 00:05:37,979
inside an image tag so why not leverage

140
00:05:37,979 --> 00:05:41,160
event handlers so let's say we add an

141
00:05:41,160 --> 00:05:42,960
image that doesn't exist and we just say

142
00:05:42,960 --> 00:05:45,600
on error you're going to do what I say

143
00:05:45,600 --> 00:05:47,160
you should do

144
00:05:47,160 --> 00:05:49,979
so now that we close the codes we're

145
00:05:49,979 --> 00:05:52,800
opening a new context with on error and

146
00:05:52,800 --> 00:05:55,139
a port

147
00:05:55,139 --> 00:05:57,419
now comes the fun part this is where you

148
00:05:57,419 --> 00:05:59,100
write your actual payload since you're

149
00:05:59,100 --> 00:06:00,840
in the JavaScript context

150
00:06:00,840 --> 00:06:02,820
fine let's start with the alert box I

151
00:06:02,820 --> 00:06:04,440
think that's where all of us start our

152
00:06:04,440 --> 00:06:06,780
exercise payloads let's do the infamous

153
00:06:06,780 --> 00:06:10,380
alert box so we added that

154
00:06:10,380 --> 00:06:12,720
this is an optional step

155
00:06:12,720 --> 00:06:15,180
you've already achieved xss this will

156
00:06:15,180 --> 00:06:17,699
run if the you know user Supply data

157
00:06:17,699 --> 00:06:20,039
isn't properly escaped this will this is

158
00:06:20,039 --> 00:06:23,240
endgame but you can go a step further

159
00:06:23,240 --> 00:06:26,039
right now what's going to happen is that

160
00:06:26,039 --> 00:06:28,979
dot PNG closing race is going to show up

161
00:06:28,979 --> 00:06:31,380
on the web page you don't want that

162
00:06:31,380 --> 00:06:34,080
don't be sloppy be better hide your

163
00:06:34,080 --> 00:06:36,539
tracks so how do you ID tracks you can

164
00:06:36,539 --> 00:06:38,400
do something as simple as just introduce

165
00:06:38,400 --> 00:06:40,919
an additional parameter a

166
00:06:40,919 --> 00:06:42,600
because a is the first letter it's easy

167
00:06:42,600 --> 00:06:45,660
to remember we just put a equals code so

168
00:06:45,660 --> 00:06:47,880
now it kind of closes out all things the

169
00:06:47,880 --> 00:06:51,180
end right so dot PNG code closes out you

170
00:06:51,180 --> 00:06:53,220
get the end tag for the image so you get

171
00:06:53,220 --> 00:06:54,840
no visible indicator that some

172
00:06:54,840 --> 00:06:57,919
Shenanigans up

173
00:06:58,380 --> 00:07:00,419
great now that you understand how

174
00:07:00,419 --> 00:07:03,000
roughly write payloads what excess is

175
00:07:03,000 --> 00:07:05,039
let's dive into the different types of

176
00:07:05,039 --> 00:07:06,600
xss because understanding the different

177
00:07:06,600 --> 00:07:09,600
types of xss will help you understand

178
00:07:09,600 --> 00:07:13,259
where to look for xss the first one is

179
00:07:13,259 --> 00:07:16,800
reflected xss this is fairly simple

180
00:07:16,800 --> 00:07:19,460
um you as a attacker are supplying

181
00:07:19,460 --> 00:07:22,020
JavaScript payload it makes its way to

182
00:07:22,020 --> 00:07:24,180
the server and it comes right back to

183
00:07:24,180 --> 00:07:27,599
you uh hence the name reflected a good

184
00:07:27,599 --> 00:07:29,639
example for this is a search query like

185
00:07:29,639 --> 00:07:31,800
in a search query imagine entering the

186
00:07:31,800 --> 00:07:34,080
JavaScript payload makes it basic server

187
00:07:34,080 --> 00:07:36,840
comes back as you searched for so and so

188
00:07:36,840 --> 00:07:39,300
and that's a good example of places

189
00:07:39,300 --> 00:07:42,240
where the the response is thrown right

190
00:07:42,240 --> 00:07:44,280
back to you and that's a good reflected

191
00:07:44,280 --> 00:07:47,059
xss example

192
00:07:47,160 --> 00:07:49,919
next up is stored you know reflected was

193
00:07:49,919 --> 00:07:52,139
nice it went to the server came back but

194
00:07:52,139 --> 00:07:54,120
what if I want to do something else like

195
00:07:54,120 --> 00:07:56,819
what if I want to hit more people uh you

196
00:07:56,819 --> 00:07:58,800
can't send the reflected xss tailor to

197
00:07:58,800 --> 00:08:01,440
someone you can see it get executed but

198
00:08:01,440 --> 00:08:03,539
Stone exercise is kind of cooler where

199
00:08:03,539 --> 00:08:06,900
what you're giving it the payload as an

200
00:08:06,900 --> 00:08:08,759
attacker to the server it gets stored in

201
00:08:08,759 --> 00:08:10,620
the database and it gets fetched every

202
00:08:10,620 --> 00:08:12,780
single time someone visits our page

203
00:08:12,780 --> 00:08:15,419
a good example of this is let's say you

204
00:08:15,419 --> 00:08:17,520
go to a forum you find a place where you

205
00:08:17,520 --> 00:08:19,740
can inject this you inject this payload

206
00:08:19,740 --> 00:08:21,660
it gets stored in the database and

207
00:08:21,660 --> 00:08:23,160
anytime someone comes and visits that

208
00:08:23,160 --> 00:08:24,840
Forum your comment is like pick back up

209
00:08:24,840 --> 00:08:27,000
and serve to them so the main the

210
00:08:27,000 --> 00:08:28,560
difference here is that it is actually

211
00:08:28,560 --> 00:08:31,800
stored on the server component

212
00:08:31,800 --> 00:08:34,740
finally comes Tom xss this one is

213
00:08:34,740 --> 00:08:36,299
different from the two types we just

214
00:08:36,299 --> 00:08:38,760
covered where the server is typically

215
00:08:38,760 --> 00:08:40,320
not involved so everything happens on

216
00:08:40,320 --> 00:08:41,940
the client side

217
00:08:41,940 --> 00:08:44,039
um a good example of this is you know

218
00:08:44,039 --> 00:08:46,860
you get the pound sign often times on

219
00:08:46,860 --> 00:08:50,339
the URL that's the location hash and

220
00:08:50,339 --> 00:08:51,540
this is actually never sent to the

221
00:08:51,540 --> 00:08:54,000
server it it's only ever viewed by the

222
00:08:54,000 --> 00:08:56,040
browser it's oftentimes to like shift

223
00:08:56,040 --> 00:08:58,320
your view in a page it can be used to

224
00:08:58,320 --> 00:09:00,420
change the colors on the page so what

225
00:09:00,420 --> 00:09:04,500
happens is the user Supply data is taken

226
00:09:04,500 --> 00:09:06,839
and it's actually processed by the

227
00:09:06,839 --> 00:09:09,480
JavaScript on the page itself and it's

228
00:09:09,480 --> 00:09:11,519
plugged into the page so in this case

229
00:09:11,519 --> 00:09:14,519
you'll see that U is actually a

230
00:09:14,519 --> 00:09:16,500
parameter it's a variable that's

231
00:09:16,500 --> 00:09:18,360
actually filled in with user Supply data

232
00:09:18,360 --> 00:09:20,519
and it's plugged all the way into the

233
00:09:20,519 --> 00:09:23,220
inner HTML and written back right so

234
00:09:23,220 --> 00:09:24,899
everything happens on the client side

235
00:09:24,899 --> 00:09:28,700
there's no server involvement here

236
00:09:29,040 --> 00:09:31,380
so with this knowledge in mind you now

237
00:09:31,380 --> 00:09:33,000
know where to look for the various types

238
00:09:33,000 --> 00:09:35,820
of xss it is a pretty prevalent attack

239
00:09:35,820 --> 00:09:37,560
class vulnerability class you're

240
00:09:37,560 --> 00:09:38,820
probably going to stumble into it at

241
00:09:38,820 --> 00:09:41,519
some point obviously don't you know go

242
00:09:41,519 --> 00:09:43,680
willy-nilly and try these things maybe

243
00:09:43,680 --> 00:09:45,300
try it through a bug Bounty programs

244
00:09:45,300 --> 00:09:47,339
right through ctfs be responsible with

245
00:09:47,339 --> 00:09:49,820
this knowledge

246
00:09:50,519 --> 00:09:53,160
now that you know how to find xss what

247
00:09:53,160 --> 00:09:54,120
are the different types of exercise

248
00:09:54,120 --> 00:09:56,100
let's briefly also discuss how to

249
00:09:56,100 --> 00:09:58,440
mitigate xss

250
00:09:58,440 --> 00:10:01,380
at the end of the day what we can do as

251
00:10:01,380 --> 00:10:03,120
people who write web apps is to make

252
00:10:03,120 --> 00:10:05,279
sure that user control data we don't

253
00:10:05,279 --> 00:10:07,440
trust it we never trust user control

254
00:10:07,440 --> 00:10:09,600
data and we always make sure that we use

255
00:10:09,600 --> 00:10:11,399
template systems that are going to do

256
00:10:11,399 --> 00:10:13,740
strict contextual Auto escaping for us

257
00:10:13,740 --> 00:10:15,720
so that way you don't juggle any of the

258
00:10:15,720 --> 00:10:17,339
rules in your head everything's taken

259
00:10:17,339 --> 00:10:19,740
care of for you by the template systems

260
00:10:19,740 --> 00:10:21,600
the other thing which is really cool and

261
00:10:21,600 --> 00:10:23,700
is being introduced now is trusted types

262
00:10:23,700 --> 00:10:25,740
quotas actually the one who introduced

263
00:10:25,740 --> 00:10:28,800
it and it's really cool for locking down

264
00:10:28,800 --> 00:10:30,240
risky functions that you're coming

265
00:10:30,240 --> 00:10:33,420
across in JavaScript finally CSP think

266
00:10:33,420 --> 00:10:35,640
of this as a safety net if everything

267
00:10:35,640 --> 00:10:38,220
goes wrong CSP will hopefully catch you

268
00:10:38,220 --> 00:10:41,339
but CSP is not a Panacea you can't use

269
00:10:41,339 --> 00:10:43,380
it as a substitute for using tablet

270
00:10:43,380 --> 00:10:44,899
systems or Escape

271
00:10:44,899 --> 00:10:47,519
escaping the user content

272
00:10:47,519 --> 00:10:49,560
cool the theory out of the way let's

273
00:10:49,560 --> 00:10:52,200
jump into the demo

274
00:10:52,200 --> 00:10:54,720
we'll be using the web tutorial one

275
00:10:54,720 --> 00:10:56,820
right now if you have your laptops feel

276
00:10:56,820 --> 00:10:59,040
free to follow along or you can also try

277
00:10:59,040 --> 00:11:00,480
this later we're going to keep this

278
00:11:00,480 --> 00:11:02,459
running until end of day tomorrow or

279
00:11:02,459 --> 00:11:04,079
probably even further than that

280
00:11:04,079 --> 00:11:07,440
so these web tutorial challenges one two

281
00:11:07,440 --> 00:11:08,820
and three are set up to be beginner

282
00:11:08,820 --> 00:11:12,240
friendly and the first one is very basic

283
00:11:12,240 --> 00:11:13,980
you can give it a script alert one and

284
00:11:13,980 --> 00:11:15,660
it will absolutely work there is no

285
00:11:15,660 --> 00:11:18,240
escaping that's happening on uh the

286
00:11:18,240 --> 00:11:19,260
server

287
00:11:19,260 --> 00:11:21,560
so you can check out these challenges at

288
00:11:21,560 --> 00:11:24,300
cdfbsites.net or you can just hit that

289
00:11:24,300 --> 00:11:26,339
URL directly I will leave the slide up

290
00:11:26,339 --> 00:11:28,260
for a second in case people want to pull

291
00:11:28,260 --> 00:11:30,079
the URL

292
00:11:30,079 --> 00:11:33,180
and next one cool

293
00:11:33,180 --> 00:11:36,000
the goal of this is not to get an alert

294
00:11:36,000 --> 00:11:37,740
box because that's the other thing about

295
00:11:37,740 --> 00:11:38,880
xss

296
00:11:38,880 --> 00:11:40,620
you can use JavaScript you can do

297
00:11:40,620 --> 00:11:43,079
anything you want in this particular

298
00:11:43,079 --> 00:11:45,779
case we want you to focus on learning

299
00:11:45,779 --> 00:11:48,720
how to write good xss payloads it's not

300
00:11:48,720 --> 00:11:50,339
about writing the alert one box we are

301
00:11:50,339 --> 00:11:52,680
better than that what I want you to do

302
00:11:52,680 --> 00:11:55,500
is steal the xss one flag however

303
00:11:55,500 --> 00:11:56,940
there's a catch

304
00:11:56,940 --> 00:11:59,279
you can't access the flag as players

305
00:11:59,279 --> 00:12:01,860
only the admin can access the flag

306
00:12:01,860 --> 00:12:04,140
so what do you do

307
00:12:04,140 --> 00:12:06,720
this is a bit of a contrived example but

308
00:12:06,720 --> 00:12:08,640
it works so what we're trying to teach

309
00:12:08,640 --> 00:12:09,540
you

310
00:12:09,540 --> 00:12:12,660
any requests that you send from your

311
00:12:12,660 --> 00:12:15,000
session will be sent to the admin and

312
00:12:15,000 --> 00:12:18,120
the admin will do the exact same thing

313
00:12:18,120 --> 00:12:20,160
so whatever you do the admin is going to

314
00:12:20,160 --> 00:12:21,240
mirror that

315
00:12:21,240 --> 00:12:23,459
so while you can't get the exercise one

316
00:12:23,459 --> 00:12:25,500
flag the admin can actually absolutely

317
00:12:25,500 --> 00:12:28,620
get that flag so what do you do in terms

318
00:12:28,620 --> 00:12:31,459
of writing a payload

319
00:12:33,060 --> 00:12:36,540
what you can do is you

320
00:12:36,540 --> 00:12:39,480
request the flag you read the flag and

321
00:12:39,480 --> 00:12:41,220
you add the additional step of you write

322
00:12:41,220 --> 00:12:43,079
the flag somewhere every attacker can

323
00:12:43,079 --> 00:12:46,079
read the flag so it's now one additional

324
00:12:46,079 --> 00:12:49,819
step but it does get you to the flag

325
00:12:50,519 --> 00:12:52,980
great you might be like hey I don't know

326
00:12:52,980 --> 00:12:54,959
JavaScript I do want to learn it later

327
00:12:54,959 --> 00:12:57,000
but can you break it down for me and

328
00:12:57,000 --> 00:12:59,160
explain how this payload works well

329
00:12:59,160 --> 00:13:02,160
that's where xhr comes in I know the

330
00:13:02,160 --> 00:13:03,540
slide colors are not great but I'll

331
00:13:03,540 --> 00:13:04,980
upload the slides and you can't you can

332
00:13:04,980 --> 00:13:06,540
all see it but at the end of the day

333
00:13:06,540 --> 00:13:09,000
what this payload does is it uses XML

334
00:13:09,000 --> 00:13:12,180
HTTP requests to say hey I want the flag

335
00:13:12,180 --> 00:13:13,680
give me the flag

336
00:13:13,680 --> 00:13:16,139
and then it reads the contents of that

337
00:13:16,139 --> 00:13:18,600
response and then sends out another

338
00:13:18,600 --> 00:13:20,940
request in this case the last request is

339
00:13:20,940 --> 00:13:22,800
to something you control as an attacker

340
00:13:22,800 --> 00:13:25,260
so it says give me the flag reads the

341
00:13:25,260 --> 00:13:28,200
flag sends you the flag so three little

342
00:13:28,200 --> 00:13:31,200
steps to get you to the goal

343
00:13:31,200 --> 00:13:33,360
great you might be like okay I don't

344
00:13:33,360 --> 00:13:35,399
want to set up a server I want the flag

345
00:13:35,399 --> 00:13:36,779
what's the best way to get to the flag

346
00:13:36,779 --> 00:13:39,420
you can use services like request win

347
00:13:39,420 --> 00:13:41,639
which is really for testing to see hey

348
00:13:41,639 --> 00:13:44,880
if I send a request can I just get it uh

349
00:13:44,880 --> 00:13:46,560
posted somewhere and I can just pick it

350
00:13:46,560 --> 00:13:48,660
up and do some testing request pin is

351
00:13:48,660 --> 00:13:50,760
great for it you can actually set up a

352
00:13:50,760 --> 00:13:52,980
public bin for it and anything you send

353
00:13:52,980 --> 00:13:55,260
to it you will be able to view it in the

354
00:13:55,260 --> 00:13:57,480
sidebar

355
00:13:57,480 --> 00:14:01,760
with that let's jump into the payload

356
00:14:01,760 --> 00:14:04,800
and I'm going to mirror my display in a

357
00:14:04,800 --> 00:14:06,979
second

358
00:14:24,839 --> 00:14:27,000
awesome

359
00:14:27,000 --> 00:14:29,399
let's get that

360
00:14:29,399 --> 00:14:32,160
you can see that I've already set up a

361
00:14:32,160 --> 00:14:34,620
request when there let me copy that

362
00:14:34,620 --> 00:14:36,360
payload for now

363
00:14:36,360 --> 00:14:38,820
first things first let's actually go to

364
00:14:38,820 --> 00:14:41,160
this page we try to make this easy for

365
00:14:41,160 --> 00:14:42,600
you and said hey if you're going to look

366
00:14:42,600 --> 00:14:44,699
at CSP and you don't know what CSP is

367
00:14:44,699 --> 00:14:46,920
we've actually built in hints here so

368
00:14:46,920 --> 00:14:49,100
you can actually look at the CSV policy

369
00:14:49,100 --> 00:14:51,540
alternatively if you are using Chrome

370
00:14:51,540 --> 00:14:53,940
you can actually right click inspect

371
00:14:53,940 --> 00:14:56,399
you'll see the network tab you can

372
00:14:56,399 --> 00:15:00,600
refresh it you'll see the CSV headers

373
00:15:00,600 --> 00:15:02,579
right there

374
00:15:02,579 --> 00:15:04,620
so let's actually copy the CSV headers

375
00:15:04,620 --> 00:15:05,519
for a second

376
00:15:05,519 --> 00:15:07,740
and plug it into this really Nifty tool

377
00:15:07,740 --> 00:15:09,660
that our colleague wrote which I right

378
00:15:09,660 --> 00:15:12,000
now have the payload I'm going to park

379
00:15:12,000 --> 00:15:13,339
the payload here

380
00:15:13,339 --> 00:15:17,779
and copy this

381
00:15:21,720 --> 00:15:23,519
so you can actually check that CSV

382
00:15:23,519 --> 00:15:25,680
policy using CSP evaluator really

383
00:15:25,680 --> 00:15:28,019
helpful to tells you like what can

384
00:15:28,019 --> 00:15:30,360
possibly go wrong with your policy if

385
00:15:30,360 --> 00:15:31,680
you're running any tests so you're

386
00:15:31,680 --> 00:15:34,560
writing apps that require CSP do feel

387
00:15:34,560 --> 00:15:37,199
free to test this and in general CSP is

388
00:15:37,199 --> 00:15:38,880
a lot easier if you build it from the

389
00:15:38,880 --> 00:15:40,320
ground up when you're writing the app

390
00:15:40,320 --> 00:15:42,779
versus plugging it in later so just

391
00:15:42,779 --> 00:15:44,760
something to keep in mind

392
00:15:44,760 --> 00:15:46,440
cool

393
00:15:46,440 --> 00:15:50,339
so we have this sniffy little side

394
00:15:50,339 --> 00:15:54,920
let's try the script alert payload first

395
00:15:59,220 --> 00:16:03,139
voila you know there is an exercise now

396
00:16:03,139 --> 00:16:06,120
and you can actually inspect or view

397
00:16:06,120 --> 00:16:08,339
source and you'll see that I am

398
00:16:08,339 --> 00:16:10,620
displaying the payload for you just so

399
00:16:10,620 --> 00:16:12,360
you know what you entered but you can

400
00:16:12,360 --> 00:16:14,040
also see it's getting rendered this is

401
00:16:14,040 --> 00:16:15,420
the part that's actually being run

402
00:16:15,420 --> 00:16:17,459
because the browser just goes oh there's

403
00:16:17,459 --> 00:16:21,199
JavaScript I should run this JavaScript

404
00:16:21,420 --> 00:16:23,699
so now let's run our payload uh what

405
00:16:23,699 --> 00:16:25,079
this is going to do is read the flag

406
00:16:25,079 --> 00:16:27,480
it's going to say uh you know so request

407
00:16:27,480 --> 00:16:29,100
the flag read the flag and send it to my

408
00:16:29,100 --> 00:16:31,579
request file

409
00:16:31,740 --> 00:16:36,839
great so if I view this and I try not to

410
00:16:36,839 --> 00:16:39,500
inspect it

411
00:16:42,839 --> 00:16:45,480
refresh that you'll see that I am

412
00:16:45,480 --> 00:16:47,100
requesting the flag

413
00:16:47,100 --> 00:16:49,500
and you can also see that the flag is

414
00:16:49,500 --> 00:16:51,959
being sent to my service uh my respect

415
00:16:51,959 --> 00:16:54,420
question so you know this is working

416
00:16:54,420 --> 00:16:58,139
so let me switch over to my request pin

417
00:16:58,139 --> 00:17:00,600
and you will see two requests here

418
00:17:00,600 --> 00:17:03,060
because the admin mirrored my request

419
00:17:03,060 --> 00:17:06,240
and hopefully sent me back the flag so

420
00:17:06,240 --> 00:17:11,000
that's about it it's as simple as that

421
00:17:11,579 --> 00:17:13,500
so now that you've tried your hand at

422
00:17:13,500 --> 00:17:16,199
this go ahead you know like if it's your

423
00:17:16,199 --> 00:17:17,579
first time trying it try the web

424
00:17:17,579 --> 00:17:20,280
tutorial one try to solve this

425
00:17:20,280 --> 00:17:22,439
um again the solution is up I'm also

426
00:17:22,439 --> 00:17:23,939
going to post a slide soon on my Twitter

427
00:17:23,939 --> 00:17:26,880
account so feel free to look at it there

428
00:17:26,880 --> 00:17:28,860
um one thing I would mention is Pep

429
00:17:28,860 --> 00:17:31,200
tutorial 2 is a slight variation of this

430
00:17:31,200 --> 00:17:34,559
so try your hand at that as well and

431
00:17:34,559 --> 00:17:36,539
again use CSP evaluator it's going to

432
00:17:36,539 --> 00:17:39,059
tell you where to poke holes and web

433
00:17:39,059 --> 00:17:42,720
tutorial 3 does have a Twist but if once

434
00:17:42,720 --> 00:17:45,240
you figure out xss I think you can solve

435
00:17:45,240 --> 00:17:48,179
it so that's pretty much it so thank you

436
00:17:48,179 --> 00:17:51,179
everyone for coming to the stock I will

437
00:17:51,179 --> 00:17:53,340
be at the CTF Village for the rest of

438
00:17:53,340 --> 00:17:55,140
the time here and you're welcome to hang

439
00:17:55,140 --> 00:17:57,539
out there and that's what it so thank

440
00:17:57,539 --> 00:17:59,660
you

