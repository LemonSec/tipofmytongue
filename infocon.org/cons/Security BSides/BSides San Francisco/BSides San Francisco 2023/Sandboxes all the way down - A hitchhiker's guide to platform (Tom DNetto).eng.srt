1
00:00:00,000 --> 00:00:02,760
hey hello So today we're going to be

2
00:00:02,760 --> 00:00:04,980
talking about sandboxes uh we're going

3
00:00:04,980 --> 00:00:06,660
to be going through a couple of the main

4
00:00:06,660 --> 00:00:09,000
techniques for how you might use

5
00:00:09,000 --> 00:00:11,760
sandboxes how you might get started when

6
00:00:11,760 --> 00:00:13,500
you might use them

7
00:00:13,500 --> 00:00:14,519
um we're not going to be doing a deep

8
00:00:14,519 --> 00:00:16,320
dive today there's too much to go

9
00:00:16,320 --> 00:00:17,880
through uh so this is very much a

10
00:00:17,880 --> 00:00:19,740
whirlwind tour hopefully by the end of

11
00:00:19,740 --> 00:00:21,539
this you'll have enough to get started

12
00:00:21,539 --> 00:00:23,699
so let's jump right into it

13
00:00:23,699 --> 00:00:26,160
uh first by way of quick introduction hi

14
00:00:26,160 --> 00:00:28,500
I'm Tom I do security I've been working

15
00:00:28,500 --> 00:00:30,720
on platform containment stuff for the

16
00:00:30,720 --> 00:00:33,719
better part of a decade

17
00:00:33,719 --> 00:00:35,040
um so why do we care about this why do

18
00:00:35,040 --> 00:00:37,020
we care about platform containment

19
00:00:37,020 --> 00:00:38,820
um why do we want sandboxes in the first

20
00:00:38,820 --> 00:00:39,660
place

21
00:00:39,660 --> 00:00:43,500
if you go and have a look through

22
00:00:43,500 --> 00:00:45,719
um the you know with a with a magnifying

23
00:00:45,719 --> 00:00:47,579
glass the kind of work you'll do on a

24
00:00:47,579 --> 00:00:49,200
computer whether it be as a developer

25
00:00:49,200 --> 00:00:51,899
whether it be as an analyst looking at

26
00:00:51,899 --> 00:00:54,120
perhaps reverse engineering or even just

27
00:00:54,120 --> 00:00:56,460
personal life admin there's plenty of

28
00:00:56,460 --> 00:00:59,760
opportunities for initial compromise

29
00:00:59,760 --> 00:01:01,379
um for the most part we like to think

30
00:01:01,379 --> 00:01:02,879
about our workflows as being fairly

31
00:01:02,879 --> 00:01:05,880
secure and that's generally true but

32
00:01:05,880 --> 00:01:07,439
um sometimes in your threat model the

33
00:01:07,439 --> 00:01:10,260
reality exists that things happen and

34
00:01:10,260 --> 00:01:13,439
you might get popped sandboxing is the

35
00:01:13,439 --> 00:01:15,420
tool in our platform containment toolbox

36
00:01:15,420 --> 00:01:18,479
to try and control that risk to put a

37
00:01:18,479 --> 00:01:21,780
boundary around what can happen and and

38
00:01:21,780 --> 00:01:23,340
really give us some guarantee into that

39
00:01:23,340 --> 00:01:25,759
if if the worst case does happen

40
00:01:25,759 --> 00:01:28,979
and just to really drive home like this

41
00:01:28,979 --> 00:01:30,860
this possibility

42
00:01:30,860 --> 00:01:33,659
let's look at a few workflows

43
00:01:33,659 --> 00:01:36,060
let's imagine you're an analyst maybe

44
00:01:36,060 --> 00:01:38,400
you are looking at some binary you're

45
00:01:38,400 --> 00:01:40,259
running strings on it what's the

46
00:01:40,259 --> 00:01:42,780
possibility that that binary was meant

47
00:01:42,780 --> 00:01:45,960
uh for to run into that input into

48
00:01:45,960 --> 00:01:47,880
Strings and actually exploit some

49
00:01:47,880 --> 00:01:51,180
vulnerability and take over your machine

50
00:01:51,180 --> 00:01:53,520
similarly browsers browsers run

51
00:01:53,520 --> 00:01:55,320
JavaScript at this stage that's

52
00:01:55,320 --> 00:01:57,060
basically native code granted there are

53
00:01:57,060 --> 00:01:59,100
tons of sandboxes

54
00:01:59,100 --> 00:01:59,640
um

55
00:01:59,640 --> 00:02:01,500
the possibility accessible to do a lot

56
00:02:01,500 --> 00:02:02,820
more than you intended and you're going

57
00:02:02,820 --> 00:02:03,780
to have to work through your threat

58
00:02:03,780 --> 00:02:06,479
model for this and lastly of course is

59
00:02:06,479 --> 00:02:08,818
uh workload compromise if you're running

60
00:02:08,818 --> 00:02:10,619
something in a container

61
00:02:10,619 --> 00:02:12,720
um chances are there are open source

62
00:02:12,720 --> 00:02:14,700
components there are components

63
00:02:14,700 --> 00:02:16,800
um that you didn't audit and what are

64
00:02:16,800 --> 00:02:18,239
the possibilities that that is

65
00:02:18,239 --> 00:02:20,580
compromised can then access the data on

66
00:02:20,580 --> 00:02:21,840
your system perhaps exfiltrate

67
00:02:21,840 --> 00:02:25,620
credentials and from there uh all bets

68
00:02:25,620 --> 00:02:27,800
are off

69
00:02:27,900 --> 00:02:29,879
so platform containment and specifically

70
00:02:29,879 --> 00:02:31,379
sandboxing which is what I'm going to be

71
00:02:31,379 --> 00:02:33,360
talking about today the tools we use to

72
00:02:33,360 --> 00:02:35,640
try and control that blast radius it's

73
00:02:35,640 --> 00:02:38,400
the tools we use to try and give us some

74
00:02:38,400 --> 00:02:40,080
guarantees so even if

75
00:02:40,080 --> 00:02:42,720
some element of our system our workload

76
00:02:42,720 --> 00:02:45,840
is compromised we still know we still

77
00:02:45,840 --> 00:02:48,840
control access to something else such as

78
00:02:48,840 --> 00:02:50,879
preventing it from laterally moving

79
00:02:50,879 --> 00:02:52,980
preventing it access to credentials all

80
00:02:52,980 --> 00:02:54,239
that kind of thing so I'm going to be

81
00:02:54,239 --> 00:02:55,800
going through three kind of broad

82
00:02:55,800 --> 00:02:59,280
techniques today first one being kernel

83
00:02:59,280 --> 00:03:00,959
based sandboxing that's where you ask

84
00:03:00,959 --> 00:03:03,120
the operating system to help out that's

85
00:03:03,120 --> 00:03:04,319
things like

86
00:03:04,319 --> 00:03:04,920
um

87
00:03:04,920 --> 00:03:07,440
the technology underlying container

88
00:03:07,440 --> 00:03:10,019
runtimes Linux namespaces Linux security

89
00:03:10,019 --> 00:03:12,180
modules and the like the second broad

90
00:03:12,180 --> 00:03:14,459
category is system call emulation

91
00:03:14,459 --> 00:03:16,680
this is things like gvis and it provides

92
00:03:16,680 --> 00:03:18,180
a bit of a better security guarantee

93
00:03:18,180 --> 00:03:20,879
than kernel based sandboxing and I'm

94
00:03:20,879 --> 00:03:22,620
going to be going in into the downsides

95
00:03:22,620 --> 00:03:23,819
a little bit more later

96
00:03:23,819 --> 00:03:26,099
and then the last one which I hope to

97
00:03:26,099 --> 00:03:27,900
spend most of my time here today talking

98
00:03:27,900 --> 00:03:29,879
about is virtualization

99
00:03:29,879 --> 00:03:31,800
how we can use Virtual machines to

100
00:03:31,800 --> 00:03:33,120
really provide a strong security

101
00:03:33,120 --> 00:03:35,879
boundary between workloads and the host

102
00:03:35,879 --> 00:03:37,920
and everything else

103
00:03:37,920 --> 00:03:40,379
Technologies in this category include a

104
00:03:40,379 --> 00:03:42,599
lot of the rust vmm virtual machine

105
00:03:42,599 --> 00:03:44,459
manager ecosystems so tools like

106
00:03:44,459 --> 00:03:46,799
firecracker and cloud hypervisor and

107
00:03:46,799 --> 00:03:48,239
there's also some work to integrate this

108
00:03:48,239 --> 00:03:50,159
with the container ecosystem so things

109
00:03:50,159 --> 00:03:51,420
like Carter containers

110
00:03:51,420 --> 00:03:53,700
[Music]

111
00:03:53,700 --> 00:03:55,920
so let's talk about the first category

112
00:03:55,920 --> 00:03:59,099
which is is Kernel based sandboxing and

113
00:03:59,099 --> 00:04:01,200
what's really useful here is to look at

114
00:04:01,200 --> 00:04:03,420
it from the perspective of the normal

115
00:04:03,420 --> 00:04:06,239
like a normal process and then also from

116
00:04:06,239 --> 00:04:09,360
the perspective of a sandboxed process

117
00:04:09,360 --> 00:04:11,220
so when a when an operating system

118
00:04:11,220 --> 00:04:13,260
starts a process it first starts by

119
00:04:13,260 --> 00:04:16,260
hollowing out a bunch of memory this

120
00:04:16,260 --> 00:04:17,579
memory is going to be used to store the

121
00:04:17,579 --> 00:04:19,320
data and the code of the process and it

122
00:04:19,320 --> 00:04:22,139
instructs the the hardware to map into

123
00:04:22,139 --> 00:04:24,540
this address space

124
00:04:24,540 --> 00:04:25,919
um

125
00:04:25,919 --> 00:04:29,340
sorry to map that physical memory for

126
00:04:29,340 --> 00:04:31,380
that process into the address space it's

127
00:04:31,380 --> 00:04:33,419
literally configuring the hardware it

128
00:04:33,419 --> 00:04:35,639
then puts the CPU into an unprivileged

129
00:04:35,639 --> 00:04:37,919
mode and tells it to go like go ham go

130
00:04:37,919 --> 00:04:39,660
run this program

131
00:04:39,660 --> 00:04:42,780
CPU in its unprivileged mode cannot do

132
00:04:42,780 --> 00:04:45,900
all that much it can move data around it

133
00:04:45,900 --> 00:04:47,699
can do basic arithmetic you can do some

134
00:04:47,699 --> 00:04:50,100
bit twiddling but just from that

135
00:04:50,100 --> 00:04:52,620
perspective with no further interfaces

136
00:04:52,620 --> 00:04:55,199
the the program can't do all that much

137
00:04:55,199 --> 00:04:57,360
it's fairly well restricted to its

138
00:04:57,360 --> 00:04:59,160
address space

139
00:04:59,160 --> 00:05:01,259
so then the next question is well how

140
00:05:01,259 --> 00:05:02,820
does a normal process actually get

141
00:05:02,820 --> 00:05:05,580
anything done how does it do disk IO how

142
00:05:05,580 --> 00:05:07,080
does it interact with the network that

143
00:05:07,080 --> 00:05:08,520
kind of thing and the answer is this

144
00:05:08,520 --> 00:05:11,220
interface called system calls whenever a

145
00:05:11,220 --> 00:05:13,199
process wants to do anything it's going

146
00:05:13,199 --> 00:05:15,060
to invoke a system call which is its own

147
00:05:15,060 --> 00:05:17,400
instruction and that's going to hand

148
00:05:17,400 --> 00:05:20,580
over control from the unprivileged

149
00:05:20,580 --> 00:05:22,979
process context to the privileged kernel

150
00:05:22,979 --> 00:05:25,800
or operating system context

151
00:05:25,800 --> 00:05:26,699
um

152
00:05:26,699 --> 00:05:28,979
from there the kernel can go ahead and

153
00:05:28,979 --> 00:05:30,600
actually provide

154
00:05:30,600 --> 00:05:33,060
service that request doing the network i

155
00:05:33,060 --> 00:05:34,919
o reading the file system whatever needs

156
00:05:34,919 --> 00:05:36,660
to happen in order for the process to do

157
00:05:36,660 --> 00:05:38,220
what it needs to do

158
00:05:38,220 --> 00:05:42,180
so with a a Sandbox process

159
00:05:42,180 --> 00:05:44,639
knowing that hey everything that needs

160
00:05:44,639 --> 00:05:46,020
to get done that interacts with the

161
00:05:46,020 --> 00:05:48,180
outside world is a system call there are

162
00:05:48,180 --> 00:05:50,340
some caveats there but for the most part

163
00:05:50,340 --> 00:05:52,320
anything that a processor is doing as a

164
00:05:52,320 --> 00:05:53,340
system call

165
00:05:53,340 --> 00:05:55,560
what if the operating system was

166
00:05:55,560 --> 00:05:58,199
involved in hey filtering out what

167
00:05:58,199 --> 00:06:01,259
resources a process can interact with

168
00:06:01,259 --> 00:06:03,120
and that's the basis of all the

169
00:06:03,120 --> 00:06:06,180
mechanisms in this class all kernel

170
00:06:06,180 --> 00:06:08,940
based sandboxing is going to be applying

171
00:06:08,940 --> 00:06:10,880
some abstraction some filter

172
00:06:10,880 --> 00:06:14,400
in what a process can interact with

173
00:06:14,400 --> 00:06:18,600
this can be as overt as blocking access

174
00:06:18,600 --> 00:06:22,740
or returning errors or as as subtle uh

175
00:06:22,740 --> 00:06:24,539
as simply returning less results or

176
00:06:24,539 --> 00:06:26,340
different results

177
00:06:26,340 --> 00:06:28,139
um this concept of returning different

178
00:06:28,139 --> 00:06:30,360
results to a system call is called

179
00:06:30,360 --> 00:06:31,979
namespacing and we see this a lot

180
00:06:31,979 --> 00:06:33,960
particularly on Linux

181
00:06:33,960 --> 00:06:36,000
so yeah if system calls are the

182
00:06:36,000 --> 00:06:37,979
interface to the process then system

183
00:06:37,979 --> 00:06:39,840
calls can be used and the filtering of

184
00:06:39,840 --> 00:06:42,660
system calls can be used for sandboxing

185
00:06:42,660 --> 00:06:46,440
so how do we actually accomplish this

186
00:06:46,440 --> 00:06:48,240
um there's a couple of main mechanisms

187
00:06:48,240 --> 00:06:51,860
and there's way too many to go into

188
00:06:51,860 --> 00:06:54,300
just on the slide here are a couple of

189
00:06:54,300 --> 00:06:56,880
the important ones for instance Mount

190
00:06:56,880 --> 00:06:59,220
name spaces are what's used to isolate

191
00:06:59,220 --> 00:07:01,080
the file system for our process so let's

192
00:07:01,080 --> 00:07:04,259
say you want to run some process

193
00:07:04,259 --> 00:07:04,860
um

194
00:07:04,860 --> 00:07:06,539
you want to give it a different view of

195
00:07:06,539 --> 00:07:08,759
the file system you can launch it into a

196
00:07:08,759 --> 00:07:10,919
mount name space from there you could do

197
00:07:10,919 --> 00:07:12,479
something like

198
00:07:12,479 --> 00:07:15,060
um bind Mount different directories into

199
00:07:15,060 --> 00:07:16,919
that namespace and then whenever the

200
00:07:16,919 --> 00:07:18,300
process attempts to interact with the

201
00:07:18,300 --> 00:07:20,220
file system it'll see that different

202
00:07:20,220 --> 00:07:22,979
view rather than whatever the system by

203
00:07:22,979 --> 00:07:25,440
default says a good example of where you

204
00:07:25,440 --> 00:07:26,880
might use this is for piecemeal

205
00:07:26,880 --> 00:07:28,919
isolation of certain directories or

206
00:07:28,919 --> 00:07:32,160
resources so by way of example if you

207
00:07:32,160 --> 00:07:34,860
want to stop slash fruit slash dot SSH

208
00:07:34,860 --> 00:07:37,199
you could bind Mount inside that

209
00:07:37,199 --> 00:07:39,120
namespace a different file over there

210
00:07:39,120 --> 00:07:40,979
the process will still be able to read

211
00:07:40,979 --> 00:07:42,780
it it'll still be able to execute those

212
00:07:42,780 --> 00:07:44,699
those instructions

213
00:07:44,699 --> 00:07:46,199
um and and get the results back from the

214
00:07:46,199 --> 00:07:48,539
system call but it'll be for the

215
00:07:48,539 --> 00:07:50,580
namespaced uh

216
00:07:50,580 --> 00:07:52,500
file system so you'll be able to give it

217
00:07:52,500 --> 00:07:54,000
different results and not compromise

218
00:07:54,000 --> 00:07:55,319
your credentials

219
00:07:55,319 --> 00:07:57,960
similar things exist for network name

220
00:07:57,960 --> 00:08:00,900
spacing you can launch a process with a

221
00:08:00,900 --> 00:08:02,220
different network namespace a different

222
00:08:02,220 --> 00:08:04,620
set of network interfaces and apply

223
00:08:04,620 --> 00:08:07,340
different say iptables NF tables rules

224
00:08:07,340 --> 00:08:09,840
uh allowing or preventing access to

225
00:08:09,840 --> 00:08:11,520
certain addresses

226
00:08:11,520 --> 00:08:13,380
and there's tons more mechanisms paid

227
00:08:13,380 --> 00:08:15,720
namespaces UTS namespaces things like

228
00:08:15,720 --> 00:08:18,000
Secom filters we're not going to go into

229
00:08:18,000 --> 00:08:19,440
them today because there are literally

230
00:08:19,440 --> 00:08:21,240
doesn't

231
00:08:21,240 --> 00:08:22,099
um

232
00:08:22,099 --> 00:08:25,199
so yeah how do we actually do this

233
00:08:25,199 --> 00:08:26,759
if you want to learn how this works

234
00:08:26,759 --> 00:08:28,560
under the hood as you can tell it sounds

235
00:08:28,560 --> 00:08:30,840
fairly involved I do recommend Googling

236
00:08:30,840 --> 00:08:33,000
containers from scratch fantastic

237
00:08:33,000 --> 00:08:35,520
tutorial and that will walk through the

238
00:08:35,520 --> 00:08:37,260
process of actually setting up and

239
00:08:37,260 --> 00:08:37,979
running

240
00:08:37,979 --> 00:08:41,099
a container using all these mechanisms

241
00:08:41,099 --> 00:08:42,899
but if you want to actually get stuff

242
00:08:42,899 --> 00:08:45,660
done quickly I recommend using firegel

243
00:08:45,660 --> 00:08:48,540
fire gel is a fairly straightforward

244
00:08:48,540 --> 00:08:50,399
application where you provide it

245
00:08:50,399 --> 00:08:53,100
configuration for all these namespaces

246
00:08:53,100 --> 00:08:54,959
and for all these restrictions is basic

247
00:08:54,959 --> 00:08:57,360
text files so things like I want this

248
00:08:57,360 --> 00:08:59,459
file to be accessible at this path for

249
00:08:59,459 --> 00:09:02,040
the process or I don't want this file

250
00:09:02,040 --> 00:09:05,339
reader read write that kind of thing

251
00:09:05,339 --> 00:09:07,380
as you can see on the screen the example

252
00:09:07,380 --> 00:09:09,360
here is just running firejail by default

253
00:09:09,360 --> 00:09:11,459
which for me launches

254
00:09:11,459 --> 00:09:13,380
um just bash just a shell

255
00:09:13,380 --> 00:09:16,440
but despite looking to the Shell like

256
00:09:16,440 --> 00:09:18,420
it's running as root there are actually

257
00:09:18,420 --> 00:09:20,820
a ton of restrictions applied

258
00:09:20,820 --> 00:09:23,100
um it's got a restrictive second filter

259
00:09:23,100 --> 00:09:25,140
it sees a different view of the the file

260
00:09:25,140 --> 00:09:27,180
system it even sees a definite view of

261
00:09:27,180 --> 00:09:29,880
the user and the user mapping so in this

262
00:09:29,880 --> 00:09:32,640
case use a zero root is mapped to me

263
00:09:32,640 --> 00:09:36,500
which is user ID 1000.

264
00:09:38,700 --> 00:09:40,620
so this all sounds pretty good but it

265
00:09:40,620 --> 00:09:42,839
does have some downsides

266
00:09:42,839 --> 00:09:45,660
um the main one being we're relying on

267
00:09:45,660 --> 00:09:47,160
the Kernel we are relying on the

268
00:09:47,160 --> 00:09:49,680
operating system to get this right

269
00:09:49,680 --> 00:09:53,580
and in practice it doesn't always do

270
00:09:53,580 --> 00:09:56,580
this in practice when we rely solely on

271
00:09:56,580 --> 00:09:59,459
the Kernel to restrict a process

272
00:09:59,459 --> 00:10:01,620
interaction to the outside world

273
00:10:01,620 --> 00:10:03,300
there's usually some Escape there's

274
00:10:03,300 --> 00:10:05,820
usually some exploit and it doesn't work

275
00:10:05,820 --> 00:10:08,220
as well as we would like

276
00:10:08,220 --> 00:10:10,080
um we can speculate as to why this is

277
00:10:10,080 --> 00:10:12,060
I'm going to try not to do that it might

278
00:10:12,060 --> 00:10:13,800
have something to do with

279
00:10:13,800 --> 00:10:14,459
um

280
00:10:14,459 --> 00:10:16,620
being a very large attack surface

281
00:10:16,620 --> 00:10:18,300
hundreds of system calls it might have

282
00:10:18,300 --> 00:10:19,980
something to do with being in a memory

283
00:10:19,980 --> 00:10:22,740
unsafe language regardless

284
00:10:22,740 --> 00:10:25,320
um kernel based sandboxing on its own

285
00:10:25,320 --> 00:10:28,200
doesn't provide the security guarantees

286
00:10:28,200 --> 00:10:29,940
we would like unless you're really

287
00:10:29,940 --> 00:10:31,440
dealing with low-hanging fruit so it's

288
00:10:31,440 --> 00:10:33,360
better to chain this technique with

289
00:10:33,360 --> 00:10:35,160
other other techniques that I'm going to

290
00:10:35,160 --> 00:10:36,300
talk about later

291
00:10:36,300 --> 00:10:37,800
speaking of which

292
00:10:37,800 --> 00:10:39,839
system call emulation

293
00:10:39,839 --> 00:10:41,820
if we can't trust the operating system

294
00:10:41,820 --> 00:10:44,519
to um

295
00:10:44,519 --> 00:10:47,160
to do this kind of Cisco filtering what

296
00:10:47,160 --> 00:10:50,100
if we introduce a purpose-built boundary

297
00:10:50,100 --> 00:10:51,899
that does this kind of filtering of

298
00:10:51,899 --> 00:10:53,940
system calls and analyzes them to make

299
00:10:53,940 --> 00:10:55,860
sure that

300
00:10:55,860 --> 00:10:58,260
um it's able to

301
00:10:58,260 --> 00:11:00,360
to access the correct resources and not

302
00:11:00,360 --> 00:11:02,959
accessing something that we shouldn't be

303
00:11:02,959 --> 00:11:05,459
we can build this boundary we can build

304
00:11:05,459 --> 00:11:07,680
this boundary purpose-built using modern

305
00:11:07,680 --> 00:11:09,899
software practices and do a good job at

306
00:11:09,899 --> 00:11:11,579
creating a solid security boundary and

307
00:11:11,579 --> 00:11:14,700
this is things like like G visor

308
00:11:14,700 --> 00:11:15,660
um

309
00:11:15,660 --> 00:11:17,519
g-vice is really good at this and

310
00:11:17,519 --> 00:11:19,680
generally recommended for things like

311
00:11:19,680 --> 00:11:22,680
container workloads particularly for

312
00:11:22,680 --> 00:11:24,480
server workloads

313
00:11:24,480 --> 00:11:27,779
it does have a few downsides in that as

314
00:11:27,779 --> 00:11:29,700
I as I mentioned before it it is a

315
00:11:29,700 --> 00:11:31,500
supervisory process it does have to

316
00:11:31,500 --> 00:11:33,720
handle all of the different ciscals that

317
00:11:33,720 --> 00:11:36,240
might be issued and

318
00:11:36,240 --> 00:11:37,920
as you can imagine there's hundreds of

319
00:11:37,920 --> 00:11:40,620
siscals not all of them are implemented

320
00:11:40,620 --> 00:11:42,240
as a result it doesn't work for

321
00:11:42,240 --> 00:11:43,620
absolutely everything

322
00:11:43,620 --> 00:11:45,180
it does tend to work for most server

323
00:11:45,180 --> 00:11:46,880
workloads things like web servers

324
00:11:46,880 --> 00:11:49,320
databases and that kind of thing but not

325
00:11:49,320 --> 00:11:50,459
everything and you just have to try it

326
00:11:50,459 --> 00:11:52,920
out with your workloads

327
00:11:52,920 --> 00:11:54,899
but the other downside is because it is

328
00:11:54,899 --> 00:11:57,120
ultimately another layer between a

329
00:11:57,120 --> 00:11:59,579
process and the kernel it does have

330
00:11:59,579 --> 00:12:00,839
overhead and this is particularly

331
00:12:00,839 --> 00:12:05,060
noticeable for i o heavy applications

332
00:12:05,700 --> 00:12:08,060
so let's talk about virtualization

333
00:12:08,060 --> 00:12:11,399
virtualization is where we take not only

334
00:12:11,399 --> 00:12:13,380
the processes we want to sandbox and put

335
00:12:13,380 --> 00:12:15,480
them in a security boundary but a whole

336
00:12:15,480 --> 00:12:19,140
other system a whole kernel and all the

337
00:12:19,140 --> 00:12:20,760
virtual memory and all the virtual CPU

338
00:12:20,760 --> 00:12:22,980
is associated with a virtual machine we

339
00:12:22,980 --> 00:12:24,779
put that in its own box and then we

340
00:12:24,779 --> 00:12:27,480
defend that boundary with the host

341
00:12:27,480 --> 00:12:29,519
despite what you might think this does

342
00:12:29,519 --> 00:12:31,380
look complicated but it actually ends up

343
00:12:31,380 --> 00:12:33,180
being a smaller attack surface to defend

344
00:12:33,180 --> 00:12:35,760
the interface between a virtual machine

345
00:12:35,760 --> 00:12:39,120
and the host machine is mostly just some

346
00:12:39,120 --> 00:12:41,519
basic Primitives you need the ability to

347
00:12:41,519 --> 00:12:43,200
have disk so that's reading and writing

348
00:12:43,200 --> 00:12:45,540
bytes at certain offsets you need the

349
00:12:45,540 --> 00:12:47,279
ability to send a typically need the

350
00:12:47,279 --> 00:12:48,779
ability to send Network traffic so

351
00:12:48,779 --> 00:12:50,339
that's Reading Writing ethernet frames

352
00:12:50,339 --> 00:12:53,639
that kind of send receive interface we

353
00:12:53,639 --> 00:12:55,260
can build pretty easily and be fairly

354
00:12:55,260 --> 00:12:57,600
confident that we've done a good job so

355
00:12:57,600 --> 00:12:59,399
that compared to implementing every

356
00:12:59,399 --> 00:13:01,620
system call ends up being a much smaller

357
00:13:01,620 --> 00:13:03,240
attack surface that is much easier to

358
00:13:03,240 --> 00:13:05,940
defend as a result in the last few years

359
00:13:05,940 --> 00:13:08,279
we've seen a lot of of development in

360
00:13:08,279 --> 00:13:09,720
this space people building virtual

361
00:13:09,720 --> 00:13:12,899
machine managers as security boundaries

362
00:13:12,899 --> 00:13:14,639
that are able to run virtual machines

363
00:13:14,639 --> 00:13:17,220
provide this interface and and do a good

364
00:13:17,220 --> 00:13:21,260
job at securing them at this boundary

365
00:13:23,160 --> 00:13:24,420
um

366
00:13:24,420 --> 00:13:27,180
there is a downside though you've got

367
00:13:27,180 --> 00:13:29,160
now a virtual machine to deal with it's

368
00:13:29,160 --> 00:13:30,540
not just a process where you're

369
00:13:30,540 --> 00:13:32,279
launching some arguments and wiring up

370
00:13:32,279 --> 00:13:33,720
you know standard input output or

371
00:13:33,720 --> 00:13:36,180
network you also have a full virtual

372
00:13:36,180 --> 00:13:38,100
machine you've got to pick the kernel

373
00:13:38,100 --> 00:13:39,959
you've got to configure it to start up

374
00:13:39,959 --> 00:13:41,880
and start your workload and and that's a

375
00:13:41,880 --> 00:13:43,320
lot of work

376
00:13:43,320 --> 00:13:44,820
um

377
00:13:44,820 --> 00:13:47,940
that said there are a couple of uh vmms

378
00:13:47,940 --> 00:13:49,680
that have sprung up in the last few

379
00:13:49,680 --> 00:13:52,139
years that are pretty good to help you

380
00:13:52,139 --> 00:13:53,880
orchestrate this and we're going to use

381
00:13:53,880 --> 00:13:57,500
fire firecracker as an example

382
00:13:57,779 --> 00:14:00,839
so firecracker I really like because

383
00:14:00,839 --> 00:14:03,540
it's uh made by AWS it's used for Lambda

384
00:14:03,540 --> 00:14:05,760
it's fairly well battle tested it's also

385
00:14:05,760 --> 00:14:07,800
very easy to get started with you pass

386
00:14:07,800 --> 00:14:10,100
the kernel image you pass the inner ID

387
00:14:10,100 --> 00:14:12,899
basically any any devices you want on

388
00:14:12,899 --> 00:14:14,820
that system so it could be you know a

389
00:14:14,820 --> 00:14:16,579
file system it could be network devices

390
00:14:16,579 --> 00:14:18,899
uh you can figure that as a config file

391
00:14:18,899 --> 00:14:21,420
and then you run firecracker it could be

392
00:14:21,420 --> 00:14:23,459
just another process you could also

393
00:14:23,459 --> 00:14:25,500
apply some of these other techniques to

394
00:14:25,500 --> 00:14:28,019
it you could use kernel based sandboxing

395
00:14:28,019 --> 00:14:29,519
techniques to manage the network and

396
00:14:29,519 --> 00:14:32,180
that kind of thing

397
00:14:33,899 --> 00:14:36,480
but as I mentioned before integration is

398
00:14:36,480 --> 00:14:39,720
really the hard part for for VMS

399
00:14:39,720 --> 00:14:41,760
you need to make that system image maybe

400
00:14:41,760 --> 00:14:43,260
you start with something like Alpine

401
00:14:43,260 --> 00:14:45,300
Linux and then modify in its grips and

402
00:14:45,300 --> 00:14:47,940
that kind of thing but you still have to

403
00:14:47,940 --> 00:14:49,860
think really carefully about it

404
00:14:49,860 --> 00:14:51,660
there's no point in having a VM as a

405
00:14:51,660 --> 00:14:54,060
security boundary if you just put the

406
00:14:54,060 --> 00:14:57,300
entire file system of the host into that

407
00:14:57,300 --> 00:14:59,940
VM so then any compromised workload on

408
00:14:59,940 --> 00:15:02,160
that VM can just modify your file system

409
00:15:02,160 --> 00:15:05,060
read your secrets establish persistence

410
00:15:05,060 --> 00:15:07,019
similarly if you're worried about

411
00:15:07,019 --> 00:15:09,480
network access probably don't just

412
00:15:09,480 --> 00:15:12,000
Bridge the vm's network interface with

413
00:15:12,000 --> 00:15:13,680
that of

414
00:15:13,680 --> 00:15:16,079
um of the host you want to apply some

415
00:15:16,079 --> 00:15:18,420
kind of restriction and when and however

416
00:15:18,420 --> 00:15:20,040
you apply that restriction it must be

417
00:15:20,040 --> 00:15:23,040
outside of the VM boundary because we're

418
00:15:23,040 --> 00:15:25,079
treating the entire VM as your security

419
00:15:25,079 --> 00:15:26,519
boundary and anything inside it

420
00:15:26,519 --> 00:15:28,139
including the kernel could be

421
00:15:28,139 --> 00:15:29,880
compromised

422
00:15:29,880 --> 00:15:32,100
other thing worth mentioning if you're

423
00:15:32,100 --> 00:15:33,720
trying to sandbox a client workload

424
00:15:33,720 --> 00:15:35,220
maybe you're putting the tour browser in

425
00:15:35,220 --> 00:15:36,120
there

426
00:15:36,120 --> 00:15:37,980
think carefully about the user

427
00:15:37,980 --> 00:15:40,740
experience does this browser window look

428
00:15:40,740 --> 00:15:42,060
like

429
00:15:42,060 --> 00:15:44,160
um any other browser window on your host

430
00:15:44,160 --> 00:15:46,260
does the possibly exist for you to

431
00:15:46,260 --> 00:15:48,240
accidentally copy paste something really

432
00:15:48,240 --> 00:15:51,420
bad into the wrong context and opsec

433
00:15:51,420 --> 00:15:53,399
fail that way if that's catastrophic

434
00:15:53,399 --> 00:15:55,139
think about how you're going to separate

435
00:15:55,139 --> 00:15:56,760
the two and how you're going to avoid

436
00:15:56,760 --> 00:15:58,740
human mistakes because as you start to

437
00:15:58,740 --> 00:16:00,300
move towards the more restrictive side

438
00:16:00,300 --> 00:16:03,720
of sandboxing you start to see opsec

439
00:16:03,720 --> 00:16:08,899
failures be a main source of compromise

440
00:16:09,660 --> 00:16:11,760
so let's walk through a little bit of an

441
00:16:11,760 --> 00:16:13,199
example here

442
00:16:13,199 --> 00:16:15,480
let's say you wanted to play around you

443
00:16:15,480 --> 00:16:16,560
wanted to have an environment where you

444
00:16:16,560 --> 00:16:17,760
can just kind of play around with stuff

445
00:16:17,760 --> 00:16:19,380
from GitHub maybe on the training page

446
00:16:19,380 --> 00:16:21,660
maybe you see all the GPT or whatever

447
00:16:21,660 --> 00:16:23,579
and you just want to mess around you

448
00:16:23,579 --> 00:16:24,660
don't want to think about whether

449
00:16:24,660 --> 00:16:26,339
there's a dependency that's compromised

450
00:16:26,339 --> 00:16:27,839
you don't want to think about whether

451
00:16:27,839 --> 00:16:29,100
you know it's going to take over your

452
00:16:29,100 --> 00:16:30,540
machine you want it to stop when the VM

453
00:16:30,540 --> 00:16:32,940
stops and you want it to avoid stealing

454
00:16:32,940 --> 00:16:34,560
all your credentials

455
00:16:34,560 --> 00:16:36,899
one way we could do this is make a VM

456
00:16:36,899 --> 00:16:39,180
for it so we'd go through the effort of

457
00:16:39,180 --> 00:16:43,259
picking a VM image such as Alpine Linux

458
00:16:43,259 --> 00:16:45,600
and modifying it to boot up our workload

459
00:16:45,600 --> 00:16:49,139
in this case establishing a CLI

460
00:16:49,139 --> 00:16:49,740
um

461
00:16:49,740 --> 00:16:51,540
wiring up that image is fairly

462
00:16:51,540 --> 00:16:53,459
straightforward we pass it in as a block

463
00:16:53,459 --> 00:16:55,079
device in the in the config file for

464
00:16:55,079 --> 00:16:56,880
firecracker

465
00:16:56,880 --> 00:16:58,380
um but then

466
00:16:58,380 --> 00:17:01,019
we need to create some interface where

467
00:17:01,019 --> 00:17:02,519
we can run that command where we have a

468
00:17:02,519 --> 00:17:05,099
shell to do that we can use this

469
00:17:05,099 --> 00:17:07,020
mechanism called the verdio socket and

470
00:17:07,020 --> 00:17:09,240
this is basically a really efficient

471
00:17:09,240 --> 00:17:11,400
socket between a virtual machine and its

472
00:17:11,400 --> 00:17:13,619
host and it's yet another element in the

473
00:17:13,619 --> 00:17:15,959
config file it's fairly easy to set up

474
00:17:15,959 --> 00:17:18,599
inside the VM we would wire this to say

475
00:17:18,599 --> 00:17:20,099
bash you could do that in a system date

476
00:17:20,099 --> 00:17:22,799
unit outside the VM would wire it to to

477
00:17:22,799 --> 00:17:24,780
standard in standard output just as a

478
00:17:24,780 --> 00:17:26,760
socket maybe using netcat

479
00:17:26,760 --> 00:17:28,919
and then lastly would need some way to

480
00:17:28,919 --> 00:17:31,500
get internet access within the VM

481
00:17:31,500 --> 00:17:34,620
this can be as I mentioned all the

482
00:17:34,620 --> 00:17:35,880
restrictions you're applying need to be

483
00:17:35,880 --> 00:17:38,160
outside the vm's boundary otherwise you

484
00:17:38,160 --> 00:17:39,480
know a compromised VM can just remove

485
00:17:39,480 --> 00:17:41,640
them so in this case we want to do the

486
00:17:41,640 --> 00:17:43,620
networking restrictions outside of the

487
00:17:43,620 --> 00:17:44,580
VM

488
00:17:44,580 --> 00:17:46,380
this is a really good example where you

489
00:17:46,380 --> 00:17:48,480
can stack some of the techniques uh stat

490
00:17:48,480 --> 00:17:51,179
in this case stacking VM based isolation

491
00:17:51,179 --> 00:17:54,419
with kernel based sandboxing the way you

492
00:17:54,419 --> 00:17:56,520
do that is just take the virtual

493
00:17:56,520 --> 00:17:58,740
internet or the virtual ethernet adapter

494
00:17:58,740 --> 00:18:00,780
that comes from firecracker and put it

495
00:18:00,780 --> 00:18:02,280
in its own network namespace and then

496
00:18:02,280 --> 00:18:04,080
apply those restrictions accordingly

497
00:18:04,080 --> 00:18:06,480
maybe using iptables rules maybe using

498
00:18:06,480 --> 00:18:08,820
NF tables whatever restricted so that it

499
00:18:08,820 --> 00:18:11,280
cannot access any of the private network

500
00:18:11,280 --> 00:18:14,520
interfaces addresses or your local

501
00:18:14,520 --> 00:18:16,140
machine

502
00:18:16,140 --> 00:18:17,520
foreign

503
00:18:17,520 --> 00:18:19,620
this all sounds like a lot of work just

504
00:18:19,620 --> 00:18:22,500
to spin up a VM and that's true this is

505
00:18:22,500 --> 00:18:25,380
quite a challenging sandboxing workloads

506
00:18:25,380 --> 00:18:27,240
in VMS it's quite challenging because of

507
00:18:27,240 --> 00:18:28,620
this integration work

508
00:18:28,620 --> 00:18:30,840
I'm trying to work on a project to make

509
00:18:30,840 --> 00:18:33,240
this easier so you can just pass in

510
00:18:33,240 --> 00:18:35,160
um a list of packages what kind of

511
00:18:35,160 --> 00:18:36,419
network restrictions you want and it'll

512
00:18:36,419 --> 00:18:38,340
orchestrate all of that for you using

513
00:18:38,340 --> 00:18:40,380
firecracker if you're interested in

514
00:18:40,380 --> 00:18:42,740
something like that please check it out

515
00:18:42,740 --> 00:18:45,900
github.com Twitchy liquid64 slash mini

516
00:18:45,900 --> 00:18:47,280
kernel

517
00:18:47,280 --> 00:18:48,539
um

518
00:18:48,539 --> 00:18:50,460
but yes this is one of the harder parts

519
00:18:50,460 --> 00:18:53,419
of using VMS

520
00:18:53,580 --> 00:18:55,679
so let's put it all together

521
00:18:55,679 --> 00:18:56,820
um

522
00:18:56,820 --> 00:18:58,620
we have three main techniques we've

523
00:18:58,620 --> 00:19:00,419
talked about today kernel based

524
00:19:00,419 --> 00:19:02,640
sandboxing which is perhaps the easiest

525
00:19:02,640 --> 00:19:05,220
to deploy but also doesn't really give

526
00:19:05,220 --> 00:19:06,960
you the security guarantees you want on

527
00:19:06,960 --> 00:19:08,299
its own

528
00:19:08,299 --> 00:19:11,100
Cisco emulation which is good for Server

529
00:19:11,100 --> 00:19:13,440
particularly container workloads using

530
00:19:13,440 --> 00:19:15,960
gevisor but does have performance

531
00:19:15,960 --> 00:19:17,400
limitations and doesn't work for

532
00:19:17,400 --> 00:19:20,039
everything and then virtualization based

533
00:19:20,039 --> 00:19:21,260
sandboxing

534
00:19:21,260 --> 00:19:23,220
perhaps the strongest of the security

535
00:19:23,220 --> 00:19:25,440
boundaries but is also quite challenging

536
00:19:25,440 --> 00:19:28,080
to set up in terms of integration

537
00:19:28,080 --> 00:19:29,760
regardless of what you choose and

538
00:19:29,760 --> 00:19:31,679
regardless of how you you choose to set

539
00:19:31,679 --> 00:19:34,500
up uh your sandboxing always started it

540
00:19:34,500 --> 00:19:36,240
with a threat model you want to

541
00:19:36,240 --> 00:19:37,919
understand what you're defending against

542
00:19:37,919 --> 00:19:39,720
and also what you're not defending

543
00:19:39,720 --> 00:19:40,620
against

544
00:19:40,620 --> 00:19:42,419
and then from there you have a good idea

545
00:19:42,419 --> 00:19:45,500
of what to deploy and where

546
00:19:45,840 --> 00:19:47,520
cool questions

547
00:19:47,520 --> 00:19:53,549
[Applause]

548
00:19:53,760 --> 00:19:55,500
thank you so much all right I'm gonna

549
00:19:55,500 --> 00:19:57,600
run around to you with

550
00:19:57,600 --> 00:20:01,879
hot mic please hold

551
00:20:03,179 --> 00:20:04,740
so first question is up in front of you

552
00:20:04,740 --> 00:20:06,480
to your left

553
00:20:06,480 --> 00:20:09,780
hey um I don't know what Twitchy Linux

554
00:20:09,780 --> 00:20:11,400
is but it sounds cool

555
00:20:11,400 --> 00:20:13,980
um does would it by any chance use any

556
00:20:13,980 --> 00:20:17,400
of this kind of sandboxing stuff

557
00:20:17,400 --> 00:20:20,880
so Twitchy Linux is my pet Linux distro

558
00:20:20,880 --> 00:20:23,280
that is also on next and unfortunately

559
00:20:23,280 --> 00:20:26,460
it does not use any of this sandboxing

560
00:20:26,460 --> 00:20:27,660
um

561
00:20:27,660 --> 00:20:29,760
side side note though

562
00:20:29,760 --> 00:20:31,260
um a lot of what I'm talking about here

563
00:20:31,260 --> 00:20:33,179
with sandboxing is about sandboxing

564
00:20:33,179 --> 00:20:35,520
workloads when it comes to trying to

565
00:20:35,520 --> 00:20:37,320
sandbox a general purpose environment

566
00:20:37,320 --> 00:20:40,679
it's it doesn't work so well because

567
00:20:40,679 --> 00:20:42,480
different programs need to do different

568
00:20:42,480 --> 00:20:44,100
things and access different resources

569
00:20:44,100 --> 00:20:45,320
legitimately

570
00:20:45,320 --> 00:20:47,940
as a result general purpose sandboxes

571
00:20:47,940 --> 00:20:50,460
don't do such a good job of restricting

572
00:20:50,460 --> 00:20:52,799
everything you need compared to more

573
00:20:52,799 --> 00:20:54,419
specialized sandboxes for specific

574
00:20:54,419 --> 00:20:57,480
workloads and specific tasks

575
00:20:57,480 --> 00:21:02,120
other questions raise your hand High

576
00:21:13,620 --> 00:21:16,679
hey nice nice talk thank you I guess

577
00:21:16,679 --> 00:21:18,840
another option on that is to get the VMS

578
00:21:18,840 --> 00:21:21,299
off the shelf from your favorite cloud

579
00:21:21,299 --> 00:21:23,039
provider um

580
00:21:23,039 --> 00:21:25,140
do you want to respond to that a little

581
00:21:25,140 --> 00:21:28,740
bit because fit that into the model yes

582
00:21:28,740 --> 00:21:29,400
um

583
00:21:29,400 --> 00:21:31,080
so I guess

584
00:21:31,080 --> 00:21:33,120
if you don't want to do the work of

585
00:21:33,120 --> 00:21:34,980
integrating and running it on your local

586
00:21:34,980 --> 00:21:36,960
machine you can always orchestrate using

587
00:21:36,960 --> 00:21:39,960
something like gcp or using AWS or using

588
00:21:39,960 --> 00:21:42,240
Cloud run this is a really good option

589
00:21:42,240 --> 00:21:44,760
as well certainly when I was at my

590
00:21:44,760 --> 00:21:47,760
previous job we did exactly this we had

591
00:21:47,760 --> 00:21:49,980
a Shell by which you could run risky

592
00:21:49,980 --> 00:21:52,020
commands with no privilege

593
00:21:52,020 --> 00:21:54,419
um and we called it Red Shell so that's

594
00:21:54,419 --> 00:21:57,980
certainly a very viable option as well

595
00:21:58,080 --> 00:21:59,940
we've got time for one more question if

596
00:21:59,940 --> 00:22:01,559
we've got one more question in the

597
00:22:01,559 --> 00:22:03,799
audience

598
00:22:04,440 --> 00:22:06,059
awesome one more round of applause

599
00:22:06,059 --> 00:22:09,020
please for our presenter

