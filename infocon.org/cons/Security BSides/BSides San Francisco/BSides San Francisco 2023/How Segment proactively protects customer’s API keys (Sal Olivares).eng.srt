1
00:00:00,240 --> 00:00:04,200
hi there welcome to besides SF just to

2
00:00:04,200 --> 00:00:06,540
let you know there will be no slido

3
00:00:06,540 --> 00:00:10,139
today so we will have live q a at the

4
00:00:10,139 --> 00:00:12,719
end uh if we don't have time during the

5
00:00:12,719 --> 00:00:14,940
presentation you're welcome to meet him

6
00:00:14,940 --> 00:00:19,260
at the lobby take it off take it away

7
00:00:19,260 --> 00:00:21,779
test test test all right there we go

8
00:00:21,779 --> 00:00:23,580
hey everyone thanks for showing up

9
00:00:23,580 --> 00:00:26,220
appreciate it uh hope you guys are

10
00:00:26,220 --> 00:00:29,220
having a good b-sides I know I am so uh

11
00:00:29,220 --> 00:00:31,679
yeah let's get started hey everyone uh

12
00:00:31,679 --> 00:00:33,180
today I'll be talking about how twilio's

13
00:00:33,180 --> 00:00:34,980
segment proactively protects customer

14
00:00:34,980 --> 00:00:38,219
API tokens Secrets Keys whatever you

15
00:00:38,219 --> 00:00:39,480
like to call them

16
00:00:39,480 --> 00:00:41,760
I'm salivarez I'm a senior software

17
00:00:41,760 --> 00:00:43,440
engineer at twilio segment on the

18
00:00:43,440 --> 00:00:45,480
security features team and our team is

19
00:00:45,480 --> 00:00:48,420
responsible for MFA SSO really anything

20
00:00:48,420 --> 00:00:50,940
authentication related login logout

21
00:00:50,940 --> 00:00:53,280
and I've worked uh about one and a half

22
00:00:53,280 --> 00:00:55,199
years there I've worked on both customer

23
00:00:55,199 --> 00:00:57,660
facing and internal facing features and

24
00:00:57,660 --> 00:01:01,020
one of my concerns last year has um

25
00:01:01,020 --> 00:01:03,660
has been API token or in early this year

26
00:01:03,660 --> 00:01:06,000
has been API token security basically

27
00:01:06,000 --> 00:01:07,920
like how do we ensure that our customers

28
00:01:07,920 --> 00:01:10,439
tokens uh or our customers are informed

29
00:01:10,439 --> 00:01:12,299
and protected in the event at a segment

30
00:01:12,299 --> 00:01:15,600
API token leaks so

31
00:01:15,600 --> 00:01:17,520
I think we can all agree that nothing

32
00:01:17,520 --> 00:01:19,500
good ever comes from committing an API

33
00:01:19,500 --> 00:01:21,360
token to a giriba right who has

34
00:01:21,360 --> 00:01:25,680
committed a reap uh a token uh

35
00:01:25,680 --> 00:01:29,299
we we've all done it right most of us

36
00:01:29,299 --> 00:01:31,920
you're right it's no matter how senior

37
00:01:31,920 --> 00:01:33,180
you get

38
00:01:33,180 --> 00:01:36,000
um it happens right it happened to me a

39
00:01:36,000 --> 00:01:37,920
couple months ago uh testing some stuff

40
00:01:37,920 --> 00:01:39,900
actually committed my own segment API

41
00:01:39,900 --> 00:01:42,259
tokens so uh

42
00:01:42,259 --> 00:01:44,939
bad if uh bad if you don't notice in

43
00:01:44,939 --> 00:01:46,500
time like especially if it's a cloud

44
00:01:46,500 --> 00:01:49,979
provider key nowadays open AI uh API

45
00:01:49,979 --> 00:01:51,600
Keys also pretty popular so that can get

46
00:01:51,600 --> 00:01:54,060
pretty expensive uh quickly so bad

47
00:01:54,060 --> 00:01:55,680
actors are using these like built-in

48
00:01:55,680 --> 00:01:57,420
search Tools in GitHub gitlab running

49
00:01:57,420 --> 00:02:00,420
regex patterns on Source graph looking

50
00:02:00,420 --> 00:02:03,360
through the public events AP on GitHub

51
00:02:03,360 --> 00:02:04,979
and

52
00:02:04,979 --> 00:02:06,960
this is anything new right like like

53
00:02:06,960 --> 00:02:09,598
we've seen the secret leakages uh if

54
00:02:09,598 --> 00:02:10,979
you've talked to the kid Guardian folks

55
00:02:10,979 --> 00:02:12,900
they've built all tools around this

56
00:02:12,900 --> 00:02:14,520
right so

57
00:02:14,520 --> 00:02:16,680
how bad is it right

58
00:02:16,680 --> 00:02:18,959
um again get Guardian has published a

59
00:02:18,959 --> 00:02:22,140
report in 2023 saying how leaky 2023 uh

60
00:02:22,140 --> 00:02:25,620
has been and they they stay over 10

61
00:02:25,620 --> 00:02:28,020
million secrets on GitHub alone have

62
00:02:28,020 --> 00:02:31,800
have been found and in 2021 I think it

63
00:02:31,800 --> 00:02:33,300
was like six million secrets so it looks

64
00:02:33,300 --> 00:02:34,560
like it's

65
00:02:34,560 --> 00:02:36,720
um it's trending upwards right and we're

66
00:02:36,720 --> 00:02:38,340
always hearing about leaked credentials

67
00:02:38,340 --> 00:02:41,280
uh leading to data breaches right

68
00:02:41,280 --> 00:02:45,019
take for oh it's very bright sorry

69
00:02:45,019 --> 00:02:49,200
take Toyota for example in 2017

70
00:02:49,200 --> 00:02:49,860
um

71
00:02:49,860 --> 00:02:52,500
a subcontractor uploaded a portion of uh

72
00:02:52,500 --> 00:02:54,120
some source code and that source code

73
00:02:54,120 --> 00:02:58,680
had a API or some some token that gives

74
00:02:58,680 --> 00:03:01,680
them access to some database filled with

75
00:03:01,680 --> 00:03:04,260
customer information right uh emails

76
00:03:04,260 --> 00:03:06,420
phone numbers

77
00:03:06,420 --> 00:03:09,599
um and it that what happened in 2017 and

78
00:03:09,599 --> 00:03:13,080
it was up there until 2022 right so

79
00:03:13,080 --> 00:03:15,120
uh it's they're unable to confirm

80
00:03:15,120 --> 00:03:17,280
whether this data was like downloaded

81
00:03:17,280 --> 00:03:20,159
access like Toyota doesn't know so uh we

82
00:03:20,159 --> 00:03:23,040
don't know what what uh what was um if

83
00:03:23,040 --> 00:03:27,360
there was any uh breaches or if hackers

84
00:03:27,360 --> 00:03:29,280
were able to leverage that data in any

85
00:03:29,280 --> 00:03:32,580
way and back in 2019 there was a paper

86
00:03:32,580 --> 00:03:34,440
published by North Carolina State

87
00:03:34,440 --> 00:03:37,260
University Research team aptly named how

88
00:03:37,260 --> 00:03:40,500
bad can it get and they found uh and I

89
00:03:40,500 --> 00:03:42,299
quote consequences of even a rapidly

90
00:03:42,299 --> 00:03:44,940
detected secret disclosure is severe and

91
00:03:44,940 --> 00:03:46,920
difficult to mitigate short of deleting

92
00:03:46,920 --> 00:03:49,440
a repository or issuing credentials

93
00:03:49,440 --> 00:03:50,580
right

94
00:03:50,580 --> 00:03:53,340
basically what that's saying is once a

95
00:03:53,340 --> 00:03:55,799
secret hits like a public repo that API

96
00:03:55,799 --> 00:03:57,780
token is compromised right there's no

97
00:03:57,780 --> 00:03:59,819
other choice but to rotate it or if you

98
00:03:59,819 --> 00:04:01,260
want to take more drastic measures just

99
00:04:01,260 --> 00:04:04,739
delete the repo and

100
00:04:04,739 --> 00:04:06,840
I hope devs aren't just adding another

101
00:04:06,840 --> 00:04:09,480
commit removing this config file or

102
00:04:09,480 --> 00:04:10,620
moving an environment file they

103
00:04:10,620 --> 00:04:11,879
accidentally committed

104
00:04:11,879 --> 00:04:14,400
also not and you can also attempt to

105
00:04:14,400 --> 00:04:16,858
rewrite history but once you push uh to

106
00:04:16,858 --> 00:04:18,839
a git hosting provider people have

107
00:04:18,839 --> 00:04:21,779
cloned it people have pulled it it's not

108
00:04:21,779 --> 00:04:23,460
easy to it's really easy to get back

109
00:04:23,460 --> 00:04:25,740
that Rewritten history right

110
00:04:25,740 --> 00:04:28,020
and that's what we want to help keep or

111
00:04:28,020 --> 00:04:29,520
help our customers keep in check right

112
00:04:29,520 --> 00:04:31,500
we want to protect them in scenarios

113
00:04:31,500 --> 00:04:33,300
like this we don't want unauthorized

114
00:04:33,300 --> 00:04:35,160
people using

115
00:04:35,160 --> 00:04:37,620
um segment tokens right

116
00:04:37,620 --> 00:04:41,100
so I'm going to go back to White so pair

117
00:04:41,100 --> 00:04:42,139
your eyes

118
00:04:42,139 --> 00:04:44,400
so on the agenda we're going to talk a

119
00:04:44,400 --> 00:04:46,199
little bit about segments to understand

120
00:04:46,199 --> 00:04:49,680
like why we wouldn't want a a segment

121
00:04:49,680 --> 00:04:52,259
token out there then talk about how we

122
00:04:52,259 --> 00:04:55,080
address these linked API tokens right

123
00:04:55,080 --> 00:04:58,080
specifically on GitHub and gitlab right

124
00:04:58,080 --> 00:05:00,720
the most the two most popular code

125
00:05:00,720 --> 00:05:03,600
hosting git providers so and after that

126
00:05:03,600 --> 00:05:05,940
just a little bit about orphan to tokens

127
00:05:05,940 --> 00:05:07,259
so

128
00:05:07,259 --> 00:05:09,419
um in some cases I can create a token an

129
00:05:09,419 --> 00:05:11,220
organization and that and I leave that

130
00:05:11,220 --> 00:05:13,139
organization maybe that token's still

131
00:05:13,139 --> 00:05:15,479
around still usable in a long-ring

132
00:05:15,479 --> 00:05:17,580
script no one's no one have no one has

133
00:05:17,580 --> 00:05:19,560
touched in a while so

134
00:05:19,560 --> 00:05:21,780
um I'm gonna sort of explain that a

135
00:05:21,780 --> 00:05:22,860
little bit more on the slides and you'll

136
00:05:22,860 --> 00:05:24,240
learn more a little bit more orphan

137
00:05:24,240 --> 00:05:28,380
tokens and how we handle those so

138
00:05:28,380 --> 00:05:31,020
what is segment you might have seen a

139
00:05:31,020 --> 00:05:33,300
billboard coming into SF saying twilio

140
00:05:33,300 --> 00:05:34,979
this segment is twilio's awesome

141
00:05:34,979 --> 00:05:37,259
customer data platform and you're like

142
00:05:37,259 --> 00:05:39,419
what is that I have no idea

143
00:05:39,419 --> 00:05:42,240
um and if you if you attended Leaf

144
00:05:42,240 --> 00:05:44,639
risers talk on tracking uh meaningful

145
00:05:44,639 --> 00:05:46,500
security product metrics talked about

146
00:05:46,500 --> 00:05:48,000
how our team the security features team

147
00:05:48,000 --> 00:05:50,940
leverages segment internally so to sort

148
00:05:50,940 --> 00:05:52,320
of track

149
00:05:52,320 --> 00:05:53,940
um usage related to our the security

150
00:05:53,940 --> 00:05:56,400
features we build so if a someone

151
00:05:56,400 --> 00:05:58,320
creates a skim token

152
00:05:58,320 --> 00:06:02,460
um scim token we want to know when it

153
00:06:02,460 --> 00:06:04,500
was created by what uh customer just to

154
00:06:04,500 --> 00:06:06,479
get some metrics on like our business to

155
00:06:06,479 --> 00:06:09,060
your customers using um a skim at all so

156
00:06:09,060 --> 00:06:11,699
that that would be instrumented in the

157
00:06:11,699 --> 00:06:13,919
sources uh that's a back-end server we

158
00:06:13,919 --> 00:06:16,199
instrument the segment call and that

159
00:06:16,199 --> 00:06:17,639
backend server is considered a source

160
00:06:17,639 --> 00:06:19,919
and we want to send it to a destination

161
00:06:19,919 --> 00:06:22,080
we like so snowflake we're able to

162
00:06:22,080 --> 00:06:24,120
visualize metrics in that so we so

163
00:06:24,120 --> 00:06:26,160
snowflake is a destination it's one of

164
00:06:26,160 --> 00:06:29,160
many destinations segment offers right

165
00:06:29,160 --> 00:06:31,919
and you can manage these sources and

166
00:06:31,919 --> 00:06:34,259
destinations programmatic or in the UI

167
00:06:34,259 --> 00:06:36,539
but we also offer a programmatic way to

168
00:06:36,539 --> 00:06:38,759
do it with an API token right

169
00:06:38,759 --> 00:06:41,220
what if that API token fell in the wrong

170
00:06:41,220 --> 00:06:44,460
hands right well theoretically you could

171
00:06:44,460 --> 00:06:46,139
spin up a new add a new destination

172
00:06:46,139 --> 00:06:49,620
start siphoning off customer data uh you

173
00:06:49,620 --> 00:06:51,720
could wreck some Havoc start halting

174
00:06:51,720 --> 00:06:53,280
your data pipeline deleting some sources

175
00:06:53,280 --> 00:06:55,440
adding your own source and just like

176
00:06:55,440 --> 00:06:57,720
polluting that data pipeline so

177
00:06:57,720 --> 00:07:00,060
not hard it's not uh pretty easy to

178
00:07:00,060 --> 00:07:02,060
convince people that to build something

179
00:07:02,060 --> 00:07:05,819
to get those uh

180
00:07:05,819 --> 00:07:08,460
um like revoke those API tokens right so

181
00:07:08,460 --> 00:07:10,500
how do we do that

182
00:07:10,500 --> 00:07:12,600
um luckily we don't have to build a

183
00:07:12,600 --> 00:07:14,460
secret scanning solution from scratch

184
00:07:14,460 --> 00:07:16,680
right no need to scour public commits

185
00:07:16,680 --> 00:07:18,720
ourself and

186
00:07:18,720 --> 00:07:21,720
GitHub gitlab offer programs so they

187
00:07:21,720 --> 00:07:23,220
offer secret detection or secret

188
00:07:23,220 --> 00:07:24,539
scanning for GitHub so your detection

189
00:07:24,539 --> 00:07:27,419
git lab more or less the same thing and

190
00:07:27,419 --> 00:07:29,639
they can alert users when a secret is

191
00:07:29,639 --> 00:07:31,500
committed uh if you pay a little extra

192
00:07:31,500 --> 00:07:32,819
to GitHub they give you a nice little

193
00:07:32,819 --> 00:07:34,199
dashboard saying like oh these are the

194
00:07:34,199 --> 00:07:36,000
commits we found uh go do something

195
00:07:36,000 --> 00:07:38,220
about it but they also offer

196
00:07:38,220 --> 00:07:40,380
um partner programs for assess providers

197
00:07:40,380 --> 00:07:42,240
like ourselves or SAS apps like

198
00:07:42,240 --> 00:07:43,440
ourselves take advantage of these

199
00:07:43,440 --> 00:07:45,539
features to hook into that

200
00:07:45,539 --> 00:07:48,240
um uh platform and we notified ourselves

201
00:07:48,240 --> 00:07:52,139
when GitHub finds a segment token and

202
00:07:52,139 --> 00:07:54,900
all we have to do is uh two things right

203
00:07:54,900 --> 00:07:58,139
we need to one provide an API token a

204
00:07:58,139 --> 00:08:01,199
regex pattern and uh two set up a public

205
00:08:01,199 --> 00:08:03,900
endpoint now

206
00:08:03,900 --> 00:08:05,880
how does that look like well at a high

207
00:08:05,880 --> 00:08:06,720
level

208
00:08:06,720 --> 00:08:10,500
a user commits pushes a change uh the

209
00:08:10,500 --> 00:08:13,680
the git provider runs a list of regex

210
00:08:13,680 --> 00:08:15,360
patterns and then they send matches

211
00:08:15,360 --> 00:08:19,080
matches to our endpoints so that looks a

212
00:08:19,080 --> 00:08:20,639
little like this in the request they

213
00:08:20,639 --> 00:08:23,220
send us a request with a token uh what

214
00:08:23,220 --> 00:08:24,780
type of token it is where they found it

215
00:08:24,780 --> 00:08:26,580
because not only do they look at commits

216
00:08:26,580 --> 00:08:28,500
they look at pull request descriptions

217
00:08:28,500 --> 00:08:30,539
issues anywhere really there's user

218
00:08:30,539 --> 00:08:32,458
generated content

219
00:08:32,458 --> 00:08:35,339
um the alert us on so you send this over

220
00:08:35,339 --> 00:08:38,159
and on this on the segment side we can

221
00:08:38,159 --> 00:08:40,200
really do whatever we want here we what

222
00:08:40,200 --> 00:08:41,760
we do is value the token make sure it's

223
00:08:41,760 --> 00:08:44,219
actually legit revoke the token and then

224
00:08:44,219 --> 00:08:45,720
send an email out to that workspace

225
00:08:45,720 --> 00:08:48,300
owner or admin and

226
00:08:48,300 --> 00:08:50,279
this is like this is where you're like

227
00:08:50,279 --> 00:08:52,080
if you choose to implement this this is

228
00:08:52,080 --> 00:08:52,800
where you can differ in your

229
00:08:52,800 --> 00:08:54,300
implementation right you can really do

230
00:08:54,300 --> 00:08:55,560
whatever you want when you receive that

231
00:08:55,560 --> 00:08:57,480
exposed token and it's one of the very

232
00:08:57,480 --> 00:08:59,760
first questions we asked ourselves is do

233
00:08:59,760 --> 00:09:03,360
you want to warn or revoke right

234
00:09:03,360 --> 00:09:05,940
um one we like the very first option we

235
00:09:05,940 --> 00:09:07,140
came up with is just warn the customer

236
00:09:07,140 --> 00:09:10,019
it's really easy we can leave it up to

237
00:09:10,019 --> 00:09:11,760
them to take action right

238
00:09:11,760 --> 00:09:13,440
but what if they don't see that email

239
00:09:13,440 --> 00:09:15,480
right what if it happens late at night

240
00:09:15,480 --> 00:09:17,279
they see it in in the morning and it's

241
00:09:17,279 --> 00:09:20,220
too late right so do we just revoke the

242
00:09:20,220 --> 00:09:21,899
token and then notify

243
00:09:21,899 --> 00:09:24,240
uh well what if they have an important

244
00:09:24,240 --> 00:09:25,860
workflow right that relies on that

245
00:09:25,860 --> 00:09:28,140
segment API token

246
00:09:28,140 --> 00:09:29,940
um do we disrupt that and then the third

247
00:09:29,940 --> 00:09:32,399
option which I don't recommend uh is we

248
00:09:32,399 --> 00:09:34,560
can even warn them and revoke the token

249
00:09:34,560 --> 00:09:36,959
after 24 hours but sort of has the

250
00:09:36,959 --> 00:09:39,420
downsides of of the first two where it's

251
00:09:39,420 --> 00:09:41,100
like what if they don't see the email

252
00:09:41,100 --> 00:09:43,140
it's the token's still usable after 24

253
00:09:43,140 --> 00:09:46,320
hours and we still end up revoking it so

254
00:09:46,320 --> 00:09:48,779
uh we really wanted to like like decide

255
00:09:48,779 --> 00:09:51,600
like would we rather have our customers

256
00:09:51,600 --> 00:09:53,640
have a security incent where the end

257
00:09:53,640 --> 00:09:56,220
user data basically the our customers

258
00:09:56,220 --> 00:09:59,100
customer data is potentially at risk or

259
00:09:59,100 --> 00:10:01,560
an incident where the their script

260
00:10:01,560 --> 00:10:03,540
doesn't run because the API tokens

261
00:10:03,540 --> 00:10:06,300
revoked but the solution is just to

262
00:10:06,300 --> 00:10:09,060
just to rotate it right you probably

263
00:10:09,060 --> 00:10:11,399
want that one right

264
00:10:11,399 --> 00:10:12,660
um and we also took a look at what other

265
00:10:12,660 --> 00:10:14,580
secret scanning Partners were doing and

266
00:10:14,580 --> 00:10:16,560
this is a small sample of of what who's

267
00:10:16,560 --> 00:10:18,420
on board on the GitHub uh secret

268
00:10:18,420 --> 00:10:20,100
scanning Partnerships

269
00:10:20,100 --> 00:10:22,800
but most of them just autorific some of

270
00:10:22,800 --> 00:10:25,320
them are fancy give you an option to to

271
00:10:25,320 --> 00:10:28,500
um either Auto revoke uh or or just

272
00:10:28,500 --> 00:10:32,279
notify so we wanted just a first cut hey

273
00:10:32,279 --> 00:10:33,779
um it's Auto revoke and after seeing

274
00:10:33,779 --> 00:10:35,700
what most Partners do we felt justifying

275
00:10:35,700 --> 00:10:38,220
our decision to do that so

276
00:10:38,220 --> 00:10:40,320
one of the probably the most important

277
00:10:40,320 --> 00:10:42,600
aspect is prior to joining a partner

278
00:10:42,600 --> 00:10:44,820
program is the API token pattern right

279
00:10:44,820 --> 00:10:47,279
you want your API token pattern to be

280
00:10:47,279 --> 00:10:48,600
identifiable you want to be able to look

281
00:10:48,600 --> 00:10:51,360
at and say yes that's a segment token uh

282
00:10:51,360 --> 00:10:54,180
twilio token and up and one of the very

283
00:10:54,180 --> 00:10:56,760
first projects that that I took on when

284
00:10:56,760 --> 00:10:59,820
when joining twilio's segment was this

285
00:10:59,820 --> 00:11:02,640
the on the top that was what our uh

286
00:11:02,640 --> 00:11:04,560
tokens looked like it was a generic 64

287
00:11:04,560 --> 00:11:07,200
character string very hard to even real

288
00:11:07,200 --> 00:11:09,360
like uh you're going to get a lot of

289
00:11:09,360 --> 00:11:11,040
false positives if you try to write a

290
00:11:11,040 --> 00:11:12,720
regex for that right you're going to get

291
00:11:12,720 --> 00:11:16,440
a lot of um noise so inspired by GitHub

292
00:11:16,440 --> 00:11:18,060
they have a great blog post on this

293
00:11:18,060 --> 00:11:21,300
describing how they tweaked their

294
00:11:21,300 --> 00:11:23,339
um API token formats I have that those

295
00:11:23,339 --> 00:11:25,260
links on the end of the slides but what

296
00:11:25,260 --> 00:11:27,660
they did was just Add a prefix to their

297
00:11:27,660 --> 00:11:29,940
API token and it did something more

298
00:11:29,940 --> 00:11:31,800
fancy like they added like some checksum

299
00:11:31,800 --> 00:11:35,579
to like quickly validate if a uh GitHub

300
00:11:35,579 --> 00:11:37,500
token is actually GitHub token but we

301
00:11:37,500 --> 00:11:39,839
opted with the easy slap a prefix on it

302
00:11:39,839 --> 00:11:42,899
SGP standing for Segment public API

303
00:11:42,899 --> 00:11:45,120
token and then we can easily now write a

304
00:11:45,120 --> 00:11:46,399
regex right

305
00:11:46,399 --> 00:11:49,740
and provide that to the to the applicant

306
00:11:49,740 --> 00:11:52,320
lab so take away one and easily

307
00:11:52,320 --> 00:11:54,360
identifiable prefix makes it easy to

308
00:11:54,360 --> 00:11:56,100
leverage existing tools that detect

309
00:11:56,100 --> 00:11:58,860
hard-coded Secrets right get Guardian

310
00:11:58,860 --> 00:12:02,519
get leaks uh truffles uh triple hog open

311
00:12:02,519 --> 00:12:03,839
source tools that you can contribute

312
00:12:03,839 --> 00:12:06,360
your pattern to so there's just usually

313
00:12:06,360 --> 00:12:07,380
a list

314
00:12:07,380 --> 00:12:09,540
of regex patterns that you can you can

315
00:12:09,540 --> 00:12:12,120
now that if if you have a pattern that

316
00:12:12,120 --> 00:12:14,240
you can easily match on you could

317
00:12:14,240 --> 00:12:16,260
contribute to those open source projects

318
00:12:16,260 --> 00:12:17,760
and now in the future if your customers

319
00:12:17,760 --> 00:12:19,380
are leveraging any of these tools these

320
00:12:19,380 --> 00:12:21,660
pre-commit uh get uh pre-commit get

321
00:12:21,660 --> 00:12:26,279
hooks uh uh tooling you prevent segment

322
00:12:26,279 --> 00:12:28,440
tokens from even like or your token from

323
00:12:28,440 --> 00:12:29,940
even making it into their code base to

324
00:12:29,940 --> 00:12:32,339
begin with so

325
00:12:32,339 --> 00:12:34,200
like armed with a regex pattern we went

326
00:12:34,200 --> 00:12:35,700
to GitHub we're like we're excited to

327
00:12:35,700 --> 00:12:37,620
partner with you and they're like no way

328
00:12:37,620 --> 00:12:39,480
we are too here's a bunch of contracts

329
00:12:39,480 --> 00:12:42,360
so you got to go through and uh after

330
00:12:42,360 --> 00:12:44,399
that we provided a launch date and we

331
00:12:44,399 --> 00:12:45,420
proceeded with building the service

332
00:12:45,420 --> 00:12:47,579
right uh to receive these exposed tokens

333
00:12:47,579 --> 00:12:49,440
and we call this the exposed poppy token

334
00:12:49,440 --> 00:12:53,040
service and again we chose GitHub first

335
00:12:53,040 --> 00:12:54,540
because it's the most popular but we are

336
00:12:54,540 --> 00:12:56,220
onboarding to gitlab currently as well

337
00:12:56,220 --> 00:12:58,800
and I'm going to mention a lot of like

338
00:12:58,800 --> 00:13:00,720
this is in the docs this is in a docs

339
00:13:00,720 --> 00:13:02,339
because I'm gonna explain some code but

340
00:13:02,339 --> 00:13:04,860
GitHub provides really excellent docs to

341
00:13:04,860 --> 00:13:06,899
get onboarded onto the secret scanning

342
00:13:06,899 --> 00:13:09,120
stuff so excellent documentation on this

343
00:13:09,120 --> 00:13:12,240
and since segment is a node shop uh this

344
00:13:12,240 --> 00:13:14,100
exposed puppy token service is just a

345
00:13:14,100 --> 00:13:15,380
simple typescript

346
00:13:15,380 --> 00:13:17,399
express.js framework

347
00:13:17,399 --> 00:13:20,399
using expression JS framework and we

348
00:13:20,399 --> 00:13:21,959
were and we just expose one single

349
00:13:21,959 --> 00:13:24,779
endpoint slash revoke and

350
00:13:24,779 --> 00:13:26,579
yeah once this plan was finalized

351
00:13:26,579 --> 00:13:28,260
approved it took about it took me about

352
00:13:28,260 --> 00:13:30,480
a month to get this out the door most of

353
00:13:30,480 --> 00:13:33,180
it was just infra uh related

354
00:13:33,180 --> 00:13:34,920
um stuff so

355
00:13:34,920 --> 00:13:37,200
up here there's pseudocode that looks a

356
00:13:37,200 --> 00:13:40,139
lot like JavaScript and really what I

357
00:13:40,139 --> 00:13:42,079
want you to take away from this this is

358
00:13:42,079 --> 00:13:45,180
the bulk of the business logic related

359
00:13:45,180 --> 00:13:48,240
to actually building this this uh

360
00:13:48,240 --> 00:13:50,399
service it

361
00:13:50,399 --> 00:13:52,920
um and some of it is specific stuff but

362
00:13:52,920 --> 00:13:54,600
really the two most important parts are

363
00:13:54,600 --> 00:13:56,459
the GitHub verification middleware

364
00:13:56,459 --> 00:13:59,880
basically verifying that hey uh only

365
00:13:59,880 --> 00:14:02,160
ensuring that GitHub is allowed to send

366
00:14:02,160 --> 00:14:03,000
us

367
00:14:03,000 --> 00:14:06,240
um requests or only uh only listen to

368
00:14:06,240 --> 00:14:08,100
requests made by GitHub and they do that

369
00:14:08,100 --> 00:14:10,139
they pass in two

370
00:14:10,139 --> 00:14:10,920
um

371
00:14:10,920 --> 00:14:13,200
things in the header uh key identifier

372
00:14:13,200 --> 00:14:16,800
key signature and we do some again in

373
00:14:16,800 --> 00:14:18,480
the docs we do some fancy crypto stuff

374
00:14:18,480 --> 00:14:20,700
to verify the signature and if it's

375
00:14:20,700 --> 00:14:22,260
valid we move on to the Token

376
00:14:22,260 --> 00:14:24,779
verification and we take the parse we

377
00:14:24,779 --> 00:14:27,240
parse tokens and then we just call our

378
00:14:27,240 --> 00:14:28,920
segment specific revoke right this is

379
00:14:28,920 --> 00:14:30,540
going to look different for you we call

380
00:14:30,540 --> 00:14:32,100
internally we have our own token

381
00:14:32,100 --> 00:14:34,139
verification endpoint that we call

382
00:14:34,139 --> 00:14:36,000
internally so your VOC is going to look

383
00:14:36,000 --> 00:14:38,220
you know obviously different uh very

384
00:14:38,220 --> 00:14:40,620
personal uh coming to company but

385
00:14:40,620 --> 00:14:43,019
for the most part

386
00:14:43,019 --> 00:14:44,399
um again don't really have to understand

387
00:14:44,399 --> 00:14:45,779
what's up there but

388
00:14:45,779 --> 00:14:48,899
what we do in our revoke is you first

389
00:14:48,899 --> 00:14:51,300
validate if the token's actually legit

390
00:14:51,300 --> 00:14:53,040
and then we do some and then if it is

391
00:14:53,040 --> 00:14:55,079
then we choose then we revoke it right

392
00:14:55,079 --> 00:14:56,940
also have like a feature flag thing up

393
00:14:56,940 --> 00:14:59,360
there if for every reason like a company

394
00:14:59,360 --> 00:15:02,339
wants to like hey so I'll stop revoking

395
00:15:02,339 --> 00:15:05,040
my tokens I want to commit uh public I

396
00:15:05,040 --> 00:15:08,699
want to commit like we could disable it

397
00:15:08,699 --> 00:15:10,740
for them so

398
00:15:10,740 --> 00:15:13,860
um yeah now that if you ever commit a

399
00:15:13,860 --> 00:15:15,720
accidentally commit or purposely commit

400
00:15:15,720 --> 00:15:17,459
a segment token you're gonna get this in

401
00:15:17,459 --> 00:15:19,740
your inbox right

402
00:15:19,740 --> 00:15:20,760
um you're receiving this email because

403
00:15:20,760 --> 00:15:23,279
we resolved a public API token and

404
00:15:23,279 --> 00:15:26,279
there's some metadata uh we send them

405
00:15:26,279 --> 00:15:28,500
the exposure link which is uh which

406
00:15:28,500 --> 00:15:30,240
GitHub or gitlab provides to you so you

407
00:15:30,240 --> 00:15:31,980
can so the customer can see like oh

408
00:15:31,980 --> 00:15:33,959
where where was it found

409
00:15:33,959 --> 00:15:36,600
and then we sort of have explain a

410
00:15:36,600 --> 00:15:38,459
little bit about the

411
00:15:38,459 --> 00:15:39,959
um what impact they had on their

412
00:15:39,959 --> 00:15:41,339
workspace like okay now that it's

413
00:15:41,339 --> 00:15:43,740
revoked what can you do and we recommend

414
00:15:43,740 --> 00:15:45,620
like hey go check your audit Trail

415
00:15:45,620 --> 00:15:48,839
ensure that

416
00:15:48,839 --> 00:15:51,000
um nothing fishy happened with that API

417
00:15:51,000 --> 00:15:53,399
token but I did some very unscientific

418
00:15:53,399 --> 00:15:55,860
tests I committed to prod segment API

419
00:15:55,860 --> 00:15:58,380
tokens and for the moment I commit and

420
00:15:58,380 --> 00:16:00,600
pushed uh to the moment I saw in the

421
00:16:00,600 --> 00:16:02,639
system that was revoked it was under 10

422
00:16:02,639 --> 00:16:03,959
seconds right it's really really quick

423
00:16:03,959 --> 00:16:06,120
and another 30 seconds ish for that

424
00:16:06,120 --> 00:16:07,980
email notification and then just a

425
00:16:07,980 --> 00:16:09,839
little bit more about like like why

426
00:16:09,839 --> 00:16:11,220
they're receiving this and then I'll

427
00:16:11,220 --> 00:16:14,339
link to our documentation and

428
00:16:14,339 --> 00:16:17,279
I told my team like oh like I'd be so

429
00:16:17,279 --> 00:16:19,019
happy if I revoke one token within like

430
00:16:19,019 --> 00:16:22,500
six months like oh like I I uh um I I

431
00:16:22,500 --> 00:16:24,180
didn't think would you get uh within the

432
00:16:24,180 --> 00:16:25,980
first two weeks we like revoked our

433
00:16:25,980 --> 00:16:27,540
first token within the first month we

434
00:16:27,540 --> 00:16:29,339
you found we revoked three tokens right

435
00:16:29,339 --> 00:16:30,899
it's like oh wow people are actually

436
00:16:30,899 --> 00:16:33,420
committing segment took it's like ah uh

437
00:16:33,420 --> 00:16:34,440
go figure

438
00:16:34,440 --> 00:16:37,500
so here's some metrics on that

439
00:16:37,500 --> 00:16:39,480
um this is like taken after like the

440
00:16:39,480 --> 00:16:40,980
first month or two release so I think

441
00:16:40,980 --> 00:16:43,440
I'm released like February and a lot of

442
00:16:43,440 --> 00:16:45,300
invalid stuff

443
00:16:45,300 --> 00:16:47,880
um some of it is like GitHub like

444
00:16:47,880 --> 00:16:50,279
settings like uh sending test tokens I

445
00:16:50,279 --> 00:16:52,019
think because they happen around they

446
00:16:52,019 --> 00:16:53,820
always fire around the same time and are

447
00:16:53,820 --> 00:16:56,160
identical so some of them are revoked so

448
00:16:56,160 --> 00:16:58,199
I think those are the three or four

449
00:16:58,199 --> 00:17:00,180
and then some valid ones that's messing

450
00:17:00,180 --> 00:17:01,320
with that feature flag I was talking

451
00:17:01,320 --> 00:17:02,519
about so

452
00:17:02,519 --> 00:17:05,099
take away two leverage existing secret

453
00:17:05,099 --> 00:17:06,900
scanning partner programs to easily

454
00:17:06,900 --> 00:17:09,179
notify your users about lead credentials

455
00:17:09,179 --> 00:17:11,520
and help prevent security incentives on

456
00:17:11,520 --> 00:17:13,380
your customers behalf right like

457
00:17:13,380 --> 00:17:15,299
being able to just Auto revoke your

458
00:17:15,299 --> 00:17:18,059
token and prevent that security

459
00:17:18,059 --> 00:17:20,880
incentive on for your customer that's a

460
00:17:20,880 --> 00:17:22,500
good feeling right

461
00:17:22,500 --> 00:17:24,119
and

462
00:17:24,119 --> 00:17:25,740
what about tokens that are not

463
00:17:25,740 --> 00:17:28,740
necessarily leaked but known by users

464
00:17:28,740 --> 00:17:29,820
that are no longer part of your

465
00:17:29,820 --> 00:17:31,860
organization right

466
00:17:31,860 --> 00:17:32,760
um

467
00:17:32,760 --> 00:17:35,100
at segment like I said sources

468
00:17:35,100 --> 00:17:37,020
destinations workspace is a logical

469
00:17:37,020 --> 00:17:39,660
grouping of them

470
00:17:39,660 --> 00:17:42,840
in some applications API tokens are tied

471
00:17:42,840 --> 00:17:45,600
to the user right I create a token I

472
00:17:45,600 --> 00:17:48,120
mean the API took in the performed some

473
00:17:48,120 --> 00:17:49,799
actions on my behalf

474
00:17:49,799 --> 00:17:51,480
and when I get off boarded usually that

475
00:17:51,480 --> 00:17:54,360
API token also gets deleted as well in

476
00:17:54,360 --> 00:17:56,940
some cases but at segment it's a little

477
00:17:56,940 --> 00:17:58,260
different they're tied to the workspace

478
00:17:58,260 --> 00:18:00,179
instead so

479
00:18:00,179 --> 00:18:01,919
this gives us the advantage where it

480
00:18:01,919 --> 00:18:03,660
allows you to sort of add different

481
00:18:03,660 --> 00:18:05,100
roles and permissions to that token

482
00:18:05,100 --> 00:18:07,740
separate to the user and when you create

483
00:18:07,740 --> 00:18:10,260
an API token it's so I can create an API

484
00:18:10,260 --> 00:18:12,000
token side to the workspace I leave that

485
00:18:12,000 --> 00:18:13,080
workspace

486
00:18:13,080 --> 00:18:15,419
I technically have knowledge of an API

487
00:18:15,419 --> 00:18:16,980
token that can still perform actions in

488
00:18:16,980 --> 00:18:19,440
a workspace I'm no longer part of right

489
00:18:19,440 --> 00:18:21,059
an orphan token

490
00:18:21,059 --> 00:18:23,280
so do we just Auto revoke those as well

491
00:18:23,280 --> 00:18:24,660
right

492
00:18:24,660 --> 00:18:27,660
um not quite right it's this is where

493
00:18:27,660 --> 00:18:29,640
we've made this into alert space owners

494
00:18:29,640 --> 00:18:32,039
or admins instead and they can decide to

495
00:18:32,039 --> 00:18:33,419
whether to take an action right it's

496
00:18:33,419 --> 00:18:35,640
going back to that whole warn versus

497
00:18:35,640 --> 00:18:37,140
revoke right

498
00:18:37,140 --> 00:18:39,179
like in the case of the leaked token we

499
00:18:39,179 --> 00:18:41,640
know it's public it's on the internet

500
00:18:41,640 --> 00:18:43,740
people are not nice on the internet so

501
00:18:43,740 --> 00:18:46,320
uh we have to revoke it

502
00:18:46,320 --> 00:18:50,460
um and in the case of a orphan token you

503
00:18:50,460 --> 00:18:52,500
know it's an ex-employee left on good

504
00:18:52,500 --> 00:18:54,539
terms it's probably powering a script

505
00:18:54,539 --> 00:18:56,220
that you don't want to touch

506
00:18:56,220 --> 00:18:56,880
um

507
00:18:56,880 --> 00:19:00,299
and we just recommend hey get a nice uh

508
00:19:00,299 --> 00:19:02,160
warning like hey we recommend you rotate

509
00:19:02,160 --> 00:19:03,840
this the tokens Creator is no longer

510
00:19:03,840 --> 00:19:05,640
part of here uh part of this workspace

511
00:19:05,640 --> 00:19:08,179
and along the similar vein

512
00:19:08,179 --> 00:19:11,120
along the similar vein we also

513
00:19:11,120 --> 00:19:13,260
alert on unused tokens right they

514
00:19:13,260 --> 00:19:14,640
provide no value they're just a

515
00:19:14,640 --> 00:19:15,900
liability they're hanging around not

516
00:19:15,900 --> 00:19:18,600
being used and that usually is like if a

517
00:19:18,600 --> 00:19:19,860
tokens last to use over three months

518
00:19:19,860 --> 00:19:22,559
well you'll learn on that too

519
00:19:22,559 --> 00:19:23,880
so

520
00:19:23,880 --> 00:19:25,740
we also sent an email where it's kind of

521
00:19:25,740 --> 00:19:27,720
like the leaked API token we also send

522
00:19:27,720 --> 00:19:29,220
emails out for the orphan tokens right

523
00:19:29,220 --> 00:19:30,360
like hey

524
00:19:30,360 --> 00:19:32,460
uh just for just for your knowledge

525
00:19:32,460 --> 00:19:34,620
here's an orphan token consider rotating

526
00:19:34,620 --> 00:19:36,539
it and

527
00:19:36,539 --> 00:19:38,820
this is all powered by a Cron job that

528
00:19:38,820 --> 00:19:40,500
fires once a day it's really simple

529
00:19:40,500 --> 00:19:42,900
basically fetch all the tokens for a

530
00:19:42,900 --> 00:19:45,179
workspace if that token Creator is no

531
00:19:45,179 --> 00:19:47,520
longer part of that workspace we alert

532
00:19:47,520 --> 00:19:48,799
right

533
00:19:48,799 --> 00:19:52,260
and uh here's a chart of all like the

534
00:19:52,260 --> 00:19:54,179
tokens we've marked as orphan so it

535
00:19:54,179 --> 00:19:57,059
happens more often than you think and uh

536
00:19:57,059 --> 00:19:58,679
previously I mentioned not wanting to

537
00:19:58,679 --> 00:20:01,440
Auto delete orphan tokens and that was a

538
00:20:01,440 --> 00:20:02,640
decision made during the planning of the

539
00:20:02,640 --> 00:20:04,260
project and it was further reinforced

540
00:20:04,260 --> 00:20:05,520
when we saw a couple more metrics roll

541
00:20:05,520 --> 00:20:07,440
in where we saw that 25 percent of

542
00:20:07,440 --> 00:20:09,360
Orphan tokens were deleted after the

543
00:20:09,360 --> 00:20:11,460
first like email notification

544
00:20:11,460 --> 00:20:13,500
and 13 after the follow-up notification

545
00:20:13,500 --> 00:20:15,299
I think the numbers are even down more

546
00:20:15,299 --> 00:20:16,380
uh

547
00:20:16,380 --> 00:20:17,299
um

548
00:20:17,299 --> 00:20:20,580
uh last time I checked so

549
00:20:20,580 --> 00:20:22,380
if maybe we saw the optic Center our

550
00:20:22,380 --> 00:20:24,360
customers casually cared or being were

551
00:20:24,360 --> 00:20:25,799
proactive about deleting reference

552
00:20:25,799 --> 00:20:28,559
tokens maybe we in 90 of them deleted

553
00:20:28,559 --> 00:20:30,299
after first notification maybe we

554
00:20:30,299 --> 00:20:31,919
consider

555
00:20:31,919 --> 00:20:35,160
um Auto revoking that but for now uh we

556
00:20:35,160 --> 00:20:38,160
felt justified in our decision so

557
00:20:38,160 --> 00:20:40,260
um yeah take away three consider

558
00:20:40,260 --> 00:20:42,179
notifying users when a tokens Creator is

559
00:20:42,179 --> 00:20:44,100
no longer part of or it works uh

560
00:20:44,100 --> 00:20:46,260
organization or company right the list

561
00:20:46,260 --> 00:20:49,860
of SAS apps with GitHub partnering with

562
00:20:49,860 --> 00:20:51,960
GitHub git lab is growing and I really

563
00:20:51,960 --> 00:20:53,580
haven't come across another company that

564
00:20:53,580 --> 00:20:56,580
like notifies me about orphan tokens if

565
00:20:56,580 --> 00:20:58,260
they have that concept so that'd be

566
00:20:58,260 --> 00:21:00,720
pretty cool to see right

567
00:21:00,720 --> 00:21:03,600
and at the end of the day like we hope

568
00:21:03,600 --> 00:21:06,480
well we I know that these two features

569
00:21:06,480 --> 00:21:07,919
if you look at the metrics are keeping

570
00:21:07,919 --> 00:21:09,900
our users tokens safe right and

571
00:21:09,900 --> 00:21:11,700
preventing at least pretty devastating

572
00:21:11,700 --> 00:21:14,640
security incidents uh and we're sort of

573
00:21:14,640 --> 00:21:16,440
able to strike you know considering that

574
00:21:16,440 --> 00:21:17,940
balance between user experience and

575
00:21:17,940 --> 00:21:22,020
security right in terms of uh you know a

576
00:21:22,020 --> 00:21:24,059
publicly exposed token you know just

577
00:21:24,059 --> 00:21:27,240
Auto revoking as opposed to like just

578
00:21:27,240 --> 00:21:29,400
notifying an orphan token where we can

579
00:21:29,400 --> 00:21:33,320
minimize potential disruptions there so

580
00:21:34,140 --> 00:21:36,360
one again if there's nothing else you're

581
00:21:36,360 --> 00:21:37,620
going to take away from this talk please

582
00:21:37,620 --> 00:21:39,440
have an identifiable prefix so I can

583
00:21:39,440 --> 00:21:43,200
know what um uh you can easily just

584
00:21:43,200 --> 00:21:46,080
leverage like those get pre-commit hooks

585
00:21:46,080 --> 00:21:46,799
um

586
00:21:46,799 --> 00:21:48,659
and and being able to prevent them from

587
00:21:48,659 --> 00:21:50,400
being committed and also being able to

588
00:21:50,400 --> 00:21:53,400
onboard easily to these uh part uh these

589
00:21:53,400 --> 00:21:55,080
uh Partnerships that GitHub and gitlab

590
00:21:55,080 --> 00:21:56,100
offer

591
00:21:56,100 --> 00:21:59,100
two leverage existing yes consider

592
00:21:59,100 --> 00:22:00,720
onboarding right to these partner

593
00:22:00,720 --> 00:22:02,220
programs they're very friendly the

594
00:22:02,220 --> 00:22:04,520
GitHub Gate lab folks are really like

595
00:22:04,520 --> 00:22:07,200
are really easy to work with so and just

596
00:22:07,200 --> 00:22:09,179
help prevent security your your tokens

597
00:22:09,179 --> 00:22:10,980
from preventing or preventing your

598
00:22:10,980 --> 00:22:14,520
customers from committing API tokens and

599
00:22:14,520 --> 00:22:16,200
having security incidents when they do

600
00:22:16,200 --> 00:22:19,140
accidentally commit one of your tokens

601
00:22:19,140 --> 00:22:21,419
and just consider notifying about orphan

602
00:22:21,419 --> 00:22:23,159
tokens right that'd be that'd be awesome

603
00:22:23,159 --> 00:22:26,240
to see and I have a companion blog post

604
00:22:26,240 --> 00:22:28,860
much more detail about just like how we

605
00:22:28,860 --> 00:22:29,760
like

606
00:22:29,760 --> 00:22:31,620
um added that prefix so if you want to

607
00:22:31,620 --> 00:22:34,020
learn more you can check out the blog

608
00:22:34,020 --> 00:22:35,580
and of course

609
00:22:35,580 --> 00:22:36,900
you could DM me if you have any

610
00:22:36,900 --> 00:22:38,820
questions check out my website this all

611
00:22:38,820 --> 00:22:41,220
the slides are up there shout out to uh

612
00:22:41,220 --> 00:22:43,440
the security features team uh Leif for

613
00:22:43,440 --> 00:22:45,179
mentoring me through this process and

614
00:22:45,179 --> 00:22:48,240
all of you folks for showing up so uh

615
00:22:48,240 --> 00:22:49,280
thank you

616
00:22:49,280 --> 00:22:55,200
[Applause]

617
00:22:55,200 --> 00:22:58,080
thank you Sal uh just on behalf of

618
00:22:58,080 --> 00:23:01,620
b-sides SF and our guest sponsor doyan

619
00:23:01,620 --> 00:23:03,059
SEC we would like to thank you for being

620
00:23:03,059 --> 00:23:05,159
here today and present you with this

621
00:23:05,159 --> 00:23:09,080
small gift and as we have like

622
00:23:09,080 --> 00:23:12,539
is there um I have like two minutes is

623
00:23:12,539 --> 00:23:15,539
there any questions here let me run

624
00:23:15,539 --> 00:23:18,080
around here

625
00:23:20,880 --> 00:23:23,059
foreign

626
00:23:25,640 --> 00:23:28,260
segment must have a bunch of customers

627
00:23:28,260 --> 00:23:31,500
who still have 64 character random API

628
00:23:31,500 --> 00:23:34,080
Keys how did you handle the the

629
00:23:34,080 --> 00:23:35,580
transition or trying to migrate people

630
00:23:35,580 --> 00:23:39,179
off the old API Keys yeah so

631
00:23:39,179 --> 00:23:41,820
yeah the question was all right so um

632
00:23:41,820 --> 00:23:43,200
question was how do we migrate people

633
00:23:43,200 --> 00:23:45,720
off like V1 right

634
00:23:45,720 --> 00:23:47,460
um that's a good question right we're

635
00:23:47,460 --> 00:23:49,860
lucky enough that our we have a we have

636
00:23:49,860 --> 00:23:52,440
two versions of the API so we're uh we

637
00:23:52,440 --> 00:23:54,320
have the config API in public

638
00:23:54,320 --> 00:23:57,059
API so we're lucky enough that we're

639
00:23:57,059 --> 00:23:59,100
actually like deprecating the config API

640
00:23:59,100 --> 00:24:00,780
and we're sort of like pushing people to

641
00:24:00,780 --> 00:24:02,880
the public API so naturally through that

642
00:24:02,880 --> 00:24:05,520
process that's how we

643
00:24:05,520 --> 00:24:07,380
um uh tackle that but yeah you're right

644
00:24:07,380 --> 00:24:11,100
there might be some some old V1 tokens

645
00:24:11,100 --> 00:24:12,240
out there that we just aren't getting

646
00:24:12,240 --> 00:24:14,760
right because that we just can't pick up

647
00:24:14,760 --> 00:24:16,159
on those um

648
00:24:16,159 --> 00:24:18,419
you still have regex patterns for that

649
00:24:18,419 --> 00:24:20,880
right so unfortunately there are V1 but

650
00:24:20,880 --> 00:24:22,140
we are pushing people to the new public

651
00:24:22,140 --> 00:24:24,360
API so naturally they'll get that new V2

652
00:24:24,360 --> 00:24:28,399
token that we call internally so

653
00:24:28,620 --> 00:24:31,760
and we have about 60 seconds for this

654
00:24:31,760 --> 00:24:34,020
last question and then we could take the

655
00:24:34,020 --> 00:24:36,539
rest in the lobby

656
00:24:36,539 --> 00:24:39,360
hi uh yeah so I actually am also going

657
00:24:39,360 --> 00:24:42,000
through the the token scanning like

658
00:24:42,000 --> 00:24:43,620
partner programs uh pretty pretty

659
00:24:43,620 --> 00:24:45,000
shortly here I think in the next like

660
00:24:45,000 --> 00:24:46,919
couple weeks uh but I was also

661
00:24:46,919 --> 00:24:48,659
interested um one thing I've been kind

662
00:24:48,659 --> 00:24:52,200
of pushing for at my office was uh like

663
00:24:52,200 --> 00:24:54,960
protecting the API keys in storage uh

664
00:24:54,960 --> 00:24:56,159
because a lot of people a lot of places

665
00:24:56,159 --> 00:24:57,900
like they're like oh hash pass or

666
00:24:57,900 --> 00:25:00,419
attached passwords and then oh but like

667
00:25:00,419 --> 00:25:02,039
just store this Bearer token in plain

668
00:25:02,039 --> 00:25:03,659
text and log it everywhere like on

669
00:25:03,659 --> 00:25:05,220
accident you know

670
00:25:05,220 --> 00:25:07,020
um do you do you take anything like do

671
00:25:07,020 --> 00:25:09,360
you do you hash Pat like API Keys

672
00:25:09,360 --> 00:25:11,039
internally or like do you have any

673
00:25:11,039 --> 00:25:12,900
insight into like your how do you

674
00:25:12,900 --> 00:25:15,480
protect it from like a segment employee

675
00:25:15,480 --> 00:25:17,580
pretending to be a customer

676
00:25:17,580 --> 00:25:19,559
sure yeah great question how are you how

677
00:25:19,559 --> 00:25:22,320
do we store API tokens right is it

678
00:25:22,320 --> 00:25:24,900
pretty much the gist of the question and

679
00:25:24,900 --> 00:25:26,520
um I believe they are hashed I think I

680
00:25:26,520 --> 00:25:28,679
believe they're they're by pre uh and we

681
00:25:28,679 --> 00:25:30,600
identify them by prefix so we do have an

682
00:25:30,600 --> 00:25:32,940
identifier so our ID field is basically

683
00:25:32,940 --> 00:25:35,159
like the first six characters of that

684
00:25:35,159 --> 00:25:38,940
token and we do hash the the tokens as

685
00:25:38,940 --> 00:25:41,220
well so

686
00:25:41,220 --> 00:25:43,799
yes Leaf do you have anything to add to

687
00:25:43,799 --> 00:25:45,480
that question or they're pretty much

688
00:25:45,480 --> 00:25:48,559
hashed right yeah

689
00:25:51,720 --> 00:25:55,080
either it's like no you can use

690
00:25:55,080 --> 00:25:57,480
something that's not as crazy of a

691
00:25:57,480 --> 00:25:58,860
hashing algorithm is what you would do

692
00:25:58,860 --> 00:26:00,600
for user passwords because you're

693
00:26:00,600 --> 00:26:02,640
guaranteed that the

694
00:26:02,640 --> 00:26:05,220
string is is strong

695
00:26:05,220 --> 00:26:06,779
um and you don't want it to be super

696
00:26:06,779 --> 00:26:08,820
slow because if somebody's making like

697
00:26:08,820 --> 00:26:11,580
you know I don't even know what a

698
00:26:11,580 --> 00:26:13,440
reasonable number is maybe like 50 API

699
00:26:13,440 --> 00:26:15,960
requests in like a minute or like in 30

700
00:26:15,960 --> 00:26:17,880
seconds you don't want to like run

701
00:26:17,880 --> 00:26:20,279
through bcrypt on all those

702
00:26:20,279 --> 00:26:23,279
yeah I think we might have done 512 but

703
00:26:23,279 --> 00:26:24,779
I can't remember and I don't work there

704
00:26:24,779 --> 00:26:26,960
anymore

