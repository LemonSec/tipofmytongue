1
00:00:00,060 --> 00:00:02,460
hello welcome everybody to another

2
00:00:02,460 --> 00:00:04,620
b-sides Villages talk happy to be having

3
00:00:04,620 --> 00:00:06,839
this this year and looking forward to

4
00:00:06,839 --> 00:00:09,300
many more I'd like to introduce Alexis

5
00:00:09,300 --> 00:00:11,820
Hancock uh director of engineering at

6
00:00:11,820 --> 00:00:13,679
eff she's going to be talking to us

7
00:00:13,679 --> 00:00:16,020
today about hsms

8
00:00:16,020 --> 00:00:17,520
um and want to give a quick shout out

9
00:00:17,520 --> 00:00:19,440
and thanks to AFF for being always a

10
00:00:19,440 --> 00:00:21,539
wonderful partner here uh uh with

11
00:00:21,539 --> 00:00:23,220
b-sides and just a great Village to

12
00:00:23,220 --> 00:00:25,199
attend so please thank you very much

13
00:00:25,199 --> 00:00:26,880
Alexis

14
00:00:26,880 --> 00:00:28,800
okay

15
00:00:28,800 --> 00:00:31,199
all right I guess I have to talk a

16
00:00:31,199 --> 00:00:33,960
little loud it's all good

17
00:00:33,960 --> 00:00:36,480
um so as you said I'm Alexis Hancock

18
00:00:36,480 --> 00:00:38,640
director of engineering primarily over

19
00:00:38,640 --> 00:00:41,059
the web encryption projects at my job

20
00:00:41,059 --> 00:00:44,160
eff has several open source projects in

21
00:00:44,160 --> 00:00:46,160
particular I manage dessert bot project

22
00:00:46,160 --> 00:00:48,840
and I kind of want to take you all a

23
00:00:48,840 --> 00:00:51,120
little journey on a little journey

24
00:00:51,120 --> 00:00:52,980
around

25
00:00:52,980 --> 00:00:55,879
um what it looks like to kind of like

26
00:00:55,879 --> 00:00:58,500
integrate security into an open source

27
00:00:58,500 --> 00:00:59,940
project and kind of follow best

28
00:00:59,940 --> 00:01:02,039
practices while coming across a lot of

29
00:01:02,039 --> 00:01:04,680
barriers to that and I will just get

30
00:01:04,680 --> 00:01:05,939
started

31
00:01:05,939 --> 00:01:09,060
so yes open source and security has had

32
00:01:09,060 --> 00:01:10,860
a rough road we all kind of know about

33
00:01:10,860 --> 00:01:12,720
the heart bleed bug that happened with

34
00:01:12,720 --> 00:01:15,360
openssl and the government has been

35
00:01:15,360 --> 00:01:17,159
highlighting certain things around open

36
00:01:17,159 --> 00:01:19,439
source and the prioritization of

37
00:01:19,439 --> 00:01:21,119
security

38
00:01:21,119 --> 00:01:23,520
um but a lot of Open Source product like

39
00:01:23,520 --> 00:01:26,040
projects have actually paved the way for

40
00:01:26,040 --> 00:01:27,270
security

41
00:01:27,270 --> 00:01:27,720
[Music]

42
00:01:27,720 --> 00:01:28,860
um

43
00:01:28,860 --> 00:01:31,200
so there's you know kind of like a

44
00:01:31,200 --> 00:01:33,119
two-edged sword with that where you had

45
00:01:33,119 --> 00:01:34,920
a large collaboration of people come

46
00:01:34,920 --> 00:01:37,140
together and try to push the envelope

47
00:01:37,140 --> 00:01:39,960
when it came to security standards

48
00:01:39,960 --> 00:01:41,640
um and also I want to highlight the lack

49
00:01:41,640 --> 00:01:43,979
of investment in open source the lack of

50
00:01:43,979 --> 00:01:45,479
investment in the people behind open

51
00:01:45,479 --> 00:01:47,700
source There's real people coding behind

52
00:01:47,700 --> 00:01:49,680
like all these wonderful tools and

53
00:01:49,680 --> 00:01:52,680
burnout happens lack of funding all of

54
00:01:52,680 --> 00:01:55,860
that contributed to the lack of security

55
00:01:55,860 --> 00:01:58,740
in the open source ecosystem

56
00:01:58,740 --> 00:02:00,600
this kind of sucks giving a talk next to

57
00:02:00,600 --> 00:02:02,759
a lunch but it's okay

58
00:02:02,759 --> 00:02:03,600
um

59
00:02:03,600 --> 00:02:05,520
so I wanted to highlight that I think

60
00:02:05,520 --> 00:02:06,780
everybody's kind of like familiar with

61
00:02:06,780 --> 00:02:10,800
the meme around uh that one guy in

62
00:02:10,800 --> 00:02:12,720
Nebraska taking care of a project that

63
00:02:12,720 --> 00:02:14,520
shouldn't be a thing going forward in my

64
00:02:14,520 --> 00:02:17,099
opinion it should be a more supported

65
00:02:17,099 --> 00:02:19,560
effort let's go forward and try to

66
00:02:19,560 --> 00:02:21,660
create projects that are well supported

67
00:02:21,660 --> 00:02:24,540
that have a lot of investment from the

68
00:02:24,540 --> 00:02:27,840
ecosystem that uses it right so I don't

69
00:02:27,840 --> 00:02:29,940
want to keep hearing about you know just

70
00:02:29,940 --> 00:02:31,319
one person that had like actually

71
00:02:31,319 --> 00:02:33,239
contributed to like one project because

72
00:02:33,239 --> 00:02:35,819
you're depending on not only a single

73
00:02:35,819 --> 00:02:37,680
source of failure but just a single

74
00:02:37,680 --> 00:02:40,319
person who can only do but so much

75
00:02:40,319 --> 00:02:42,480
um so and I also want to preface code

76
00:02:42,480 --> 00:02:43,800
signing

77
00:02:43,800 --> 00:02:46,140
does not prevent malware or malware

78
00:02:46,140 --> 00:02:48,780
installs but code signing does help an

79
00:02:48,780 --> 00:02:52,220
Integrity chain behind it

80
00:02:52,220 --> 00:02:55,620
so today I'll take you on a particular

81
00:02:55,620 --> 00:02:57,180
journey of getting Trust on Windows

82
00:02:57,180 --> 00:02:59,220
through code signing obtaining a code

83
00:02:59,220 --> 00:03:02,160
signing certificate talking to

84
00:03:02,160 --> 00:03:05,040
etokien hsms and smart cards signing

85
00:03:05,040 --> 00:03:08,099
with an e-toking token and esthetication

86
00:03:08,099 --> 00:03:11,099
and code signing ecosystem at Large

87
00:03:11,099 --> 00:03:14,159
so my problem for our project was I

88
00:03:14,159 --> 00:03:16,200
needed Easy distribution among a small

89
00:03:16,200 --> 00:03:17,220
team

90
00:03:17,220 --> 00:03:19,379
I needed cost efficiency I needed

91
00:03:19,379 --> 00:03:22,680
low-cost uh barriers and I needed

92
00:03:22,680 --> 00:03:25,379
compatible with our modern release

93
00:03:25,379 --> 00:03:28,200
pipeline as a team

94
00:03:28,200 --> 00:03:30,060
so

95
00:03:30,060 --> 00:03:31,920
I was very naive to think I could just

96
00:03:31,920 --> 00:03:35,159
have that up front so I want to talk to

97
00:03:35,159 --> 00:03:36,180
you all about kind of like the

98
00:03:36,180 --> 00:03:38,280
challenges and barriers that I came

99
00:03:38,280 --> 00:03:41,340
across when trying to get Trust

100
00:03:41,340 --> 00:03:43,080
um obtaining a code signing certificate

101
00:03:43,080 --> 00:03:44,519
some of you may be familiar with this

102
00:03:44,519 --> 00:03:46,739
process where

103
00:03:46,739 --> 00:03:49,140
the model that we were coming across was

104
00:03:49,140 --> 00:03:52,319
we are publicly distributed software and

105
00:03:52,319 --> 00:03:54,239
we need to be trusted on a major

106
00:03:54,239 --> 00:03:56,280
platform from several users right

107
00:03:56,280 --> 00:04:00,239
thousands of users millions of servers

108
00:04:00,239 --> 00:04:02,519
so coming with that model we needed to

109
00:04:02,519 --> 00:04:03,720
be publicly trusted through another

110
00:04:03,720 --> 00:04:04,739
entity

111
00:04:04,739 --> 00:04:07,019
and so in particular with Windows

112
00:04:07,019 --> 00:04:08,340
there's something called the user access

113
00:04:08,340 --> 00:04:10,200
control system that you have to bypass

114
00:04:10,200 --> 00:04:12,360
in order to be a trusted software you

115
00:04:12,360 --> 00:04:14,580
might see it pop up when you install you

116
00:04:14,580 --> 00:04:17,100
know some sort of like software or

117
00:04:17,100 --> 00:04:19,440
installer of some sort on Windows and it

118
00:04:19,440 --> 00:04:20,940
will pop up saying this is trusted by

119
00:04:20,940 --> 00:04:23,220
this publisher or not trusted do you

120
00:04:23,220 --> 00:04:25,380
want to proceed so we wanted to get that

121
00:04:25,380 --> 00:04:27,300
trust on windows so we could you know

122
00:04:27,300 --> 00:04:29,639
follow certain guidelines available

123
00:04:29,639 --> 00:04:32,940
but there was two different issues on

124
00:04:32,940 --> 00:04:35,759
this particular platform there's EV code

125
00:04:35,759 --> 00:04:38,280
science certificates which are way more

126
00:04:38,280 --> 00:04:39,780
money than regular code signing

127
00:04:39,780 --> 00:04:42,240
certificates but the trade-off is EV

128
00:04:42,240 --> 00:04:44,160
certificates which are about

129
00:04:44,160 --> 00:04:46,800
I want to say at minimum 300 that may be

130
00:04:46,800 --> 00:04:48,840
a laughable number they're probably more

131
00:04:48,840 --> 00:04:51,600
than that but a couple hundred dollars

132
00:04:51,600 --> 00:04:54,000
and keep in mind this is an open source

133
00:04:54,000 --> 00:04:57,960
project not a private company so Evie is

134
00:04:57,960 --> 00:04:59,580
immediately trusted or extended

135
00:04:59,580 --> 00:05:01,380
validation certificates are immediately

136
00:05:01,380 --> 00:05:03,960
trusted on windows so you get immediate

137
00:05:03,960 --> 00:05:06,720
reputation with regular code signing

138
00:05:06,720 --> 00:05:10,979
certificates you get trust over time

139
00:05:10,979 --> 00:05:12,960
um no one's really quite sure of the

140
00:05:12,960 --> 00:05:15,360
exact formula that goes into getting a

141
00:05:15,360 --> 00:05:17,280
code signing trust with a regular

142
00:05:17,280 --> 00:05:19,620
certificate on Windows but it's

143
00:05:19,620 --> 00:05:21,720
everyone's pretty sure that's dealt with

144
00:05:21,720 --> 00:05:24,120
the ecosystem and even Microsoft kind of

145
00:05:24,120 --> 00:05:25,380
halfway confirmed this that's like

146
00:05:25,380 --> 00:05:27,780
number of installs over time that's been

147
00:05:27,780 --> 00:05:30,060
successful and then you can gain

148
00:05:30,060 --> 00:05:31,979
reputation and Trust on Windows that way

149
00:05:31,979 --> 00:05:34,500
but the trust will not be immediate the

150
00:05:34,500 --> 00:05:36,419
reason why they have immediate Trust on

151
00:05:36,419 --> 00:05:38,460
extended validation certificates is

152
00:05:38,460 --> 00:05:40,080
because of the fact that they do like an

153
00:05:40,080 --> 00:05:42,479
extensive background check process for

154
00:05:42,479 --> 00:05:44,639
that certificate but then there's a

155
00:05:44,639 --> 00:05:45,900
little caveats because they do some

156
00:05:45,900 --> 00:05:48,419
background testing and checking for

157
00:05:48,419 --> 00:05:50,160
regular co-assigning certificates as

158
00:05:50,160 --> 00:05:54,539
well but you know I digress so

159
00:05:54,539 --> 00:05:56,400
had to choose a Civic a certificate

160
00:05:56,400 --> 00:05:58,860
Authority a certificate Authority

161
00:05:58,860 --> 00:06:00,600
um if you may or may not know like

162
00:06:00,600 --> 00:06:02,759
there's a couple out there that actually

163
00:06:02,759 --> 00:06:05,100
do work with Windows or trusted by

164
00:06:05,100 --> 00:06:08,280
Windows as a issuer of code signing

165
00:06:08,280 --> 00:06:09,660
certificates they're very easy to find

166
00:06:09,660 --> 00:06:13,380
you have set to go digicert or digit

167
00:06:13,380 --> 00:06:15,479
trust and then you have several others

168
00:06:15,479 --> 00:06:18,000
as well so they vet you as a person as

169
00:06:18,000 --> 00:06:19,919
an organization first and you get phone

170
00:06:19,919 --> 00:06:22,319
calls automated checks things of that

171
00:06:22,319 --> 00:06:23,580
nature you have to submit business

172
00:06:23,580 --> 00:06:27,060
documents and then finally maybe like a

173
00:06:27,060 --> 00:06:28,500
week or two later you get your EB

174
00:06:28,500 --> 00:06:30,600
certificate

175
00:06:30,600 --> 00:06:33,539
so I got it cool right and then I got

176
00:06:33,539 --> 00:06:36,660
the HSM or the smart card with the

177
00:06:36,660 --> 00:06:37,979
certificate on it and a plain white

178
00:06:37,979 --> 00:06:40,880
envelope in the mail with no

179
00:06:40,880 --> 00:06:44,340
documentation with no other instructions

180
00:06:44,340 --> 00:06:47,639
besides get a PIN code and

181
00:06:47,639 --> 00:06:49,080
good luck

182
00:06:49,080 --> 00:06:50,100
um

183
00:06:50,100 --> 00:06:52,139
I wasn't quite sure what I just received

184
00:06:52,139 --> 00:06:53,819
in the mail considering I wasn't quite

185
00:06:53,819 --> 00:06:55,740
familiar with this ecosystem of code

186
00:06:55,740 --> 00:06:59,100
signing and trust and what exactly all

187
00:06:59,100 --> 00:07:00,720
this meant I just looked like a USB

188
00:07:00,720 --> 00:07:03,720
token it just looked like a USB drive so

189
00:07:03,720 --> 00:07:05,520
for all I know I just got a regular USB

190
00:07:05,520 --> 00:07:07,560
drive to mail from set to go or

191
00:07:07,560 --> 00:07:09,720
digitrust or whichever CA you choose

192
00:07:09,720 --> 00:07:13,400
right so these USB devices are

193
00:07:13,400 --> 00:07:16,860
interchange the term e-token HSM smart

194
00:07:16,860 --> 00:07:18,240
cards even though there can be some

195
00:07:18,240 --> 00:07:19,860
variants there but

196
00:07:19,860 --> 00:07:22,440
all of them have to be fips 140-2

197
00:07:22,440 --> 00:07:25,560
compliant what's that nobody

198
00:07:25,560 --> 00:07:27,660
um Phipps is a federal information

199
00:07:27,660 --> 00:07:30,479
processing standard why does that apply

200
00:07:30,479 --> 00:07:32,520
to this because they use this nist

201
00:07:32,520 --> 00:07:34,740
standard for these smart cards in

202
00:07:34,740 --> 00:07:36,419
particular so

203
00:07:36,419 --> 00:07:39,419
in June 2023 all code signing

204
00:07:39,419 --> 00:07:41,699
certificates asked by the cab Forum as

205
00:07:41,699 --> 00:07:44,819
voted by them last year they all

206
00:07:44,819 --> 00:07:46,319
co-signing certificates have to come on

207
00:07:46,319 --> 00:07:48,840
these devices so June's right around the

208
00:07:48,840 --> 00:07:51,599
corner so they all have to be generated

209
00:07:51,599 --> 00:07:55,800
and stored on 140-2 fips compliant

210
00:07:55,800 --> 00:07:58,440
devices so if you do get a code signing

211
00:07:58,440 --> 00:07:59,819
certificate in the future you will have

212
00:07:59,819 --> 00:08:01,919
to deal with these devices

213
00:08:01,919 --> 00:08:05,400
so the token that we got was really

214
00:08:05,400 --> 00:08:07,620
interesting because it said safenet on

215
00:08:07,620 --> 00:08:10,740
the token body but the actual

216
00:08:10,740 --> 00:08:13,020
um connector piece a gemolto and I was

217
00:08:13,020 --> 00:08:13,979
really confused because the

218
00:08:13,979 --> 00:08:16,199
documentation said safenet and I was I

219
00:08:16,199 --> 00:08:17,580
was just like what the hell is going on

220
00:08:17,580 --> 00:08:20,400
so I had to find out that Talus was the

221
00:08:20,400 --> 00:08:23,160
vendor that issued the USB because once

222
00:08:23,160 --> 00:08:24,900
again I got this in the plain white

223
00:08:24,900 --> 00:08:27,240
envelope no other documentation didn't

224
00:08:27,240 --> 00:08:29,340
know what the hell was going on Talus

225
00:08:29,340 --> 00:08:31,979
acquired gemalto gemalto acquired

226
00:08:31,979 --> 00:08:34,260
safenet so if you see those three names

227
00:08:34,260 --> 00:08:37,700
they're all the same damn company

228
00:08:38,399 --> 00:08:40,140
so whose fault is this like with this

229
00:08:40,140 --> 00:08:41,760
confusion that initially occurred I

230
00:08:41,760 --> 00:08:43,919
might I mainly blame them I blame the

231
00:08:43,919 --> 00:08:47,100
the USB vendor and I blame the ca for

232
00:08:47,100 --> 00:08:48,899
out of date documentation on their sites

233
00:08:48,899 --> 00:08:50,279
it took some time

234
00:08:50,279 --> 00:08:53,760
to go on the ca site and find the proper

235
00:08:53,760 --> 00:08:56,040
tools to talk to the Token because they

236
00:08:56,040 --> 00:08:58,080
provided me initially rules and

237
00:08:58,080 --> 00:09:00,740
instructions to go use the GUI

238
00:09:00,740 --> 00:09:04,920
for this token but as developers with

239
00:09:04,920 --> 00:09:07,980
different types of pipelines at play we

240
00:09:07,980 --> 00:09:11,760
don't necessarily use guise to do that

241
00:09:11,760 --> 00:09:13,440
we use the cleave we need clean tools

242
00:09:13,440 --> 00:09:15,180
for this it didn't readily provide that

243
00:09:15,180 --> 00:09:17,760
I had to dig for a long time solution

244
00:09:17,760 --> 00:09:20,519
modeled for a single developer deploying

245
00:09:20,519 --> 00:09:22,500
on the same machine that they develop on

246
00:09:22,500 --> 00:09:24,180
it's kind of like the approach they took

247
00:09:24,180 --> 00:09:26,339
when I have a team I need a team of

248
00:09:26,339 --> 00:09:28,980
people who are trusted to code sign how

249
00:09:28,980 --> 00:09:31,140
do I distribute this among them this is

250
00:09:31,140 --> 00:09:32,820
just treating it as if I'm the only

251
00:09:32,820 --> 00:09:34,380
person working on this project with my

252
00:09:34,380 --> 00:09:36,600
singular machine which is probably how

253
00:09:36,600 --> 00:09:38,580
co-signing certificates get on the loose

254
00:09:38,580 --> 00:09:42,300
anyway and sign malware but you know and

255
00:09:42,300 --> 00:09:44,519
it's a mix of me and my own experience I

256
00:09:44,519 --> 00:09:46,680
didn't know how to talk to cryptographic

257
00:09:46,680 --> 00:09:49,860
tokens or smart cards in depth and this

258
00:09:49,860 --> 00:09:51,720
is why I'm sure sharing with you now in

259
00:09:51,720 --> 00:09:53,459
case you come across this in the future

260
00:09:53,459 --> 00:09:56,459
yourself and wish someone had told you

261
00:09:56,459 --> 00:09:59,100
uh talking to the Token uh you have open

262
00:09:59,100 --> 00:10:03,240
SC uh is a open source Suite of tools uh

263
00:10:03,240 --> 00:10:04,860
to talk to cryptographic tokens they

264
00:10:04,860 --> 00:10:06,899
Implement two different standards

265
00:10:06,899 --> 00:10:10,800
um there's PK cs11 and pkcs15 it's the

266
00:10:10,800 --> 00:10:14,100
data format pkcs 11 is the API you'll

267
00:10:14,100 --> 00:10:17,100
also see pkcs 11 called crypto key uh

268
00:10:17,100 --> 00:10:19,019
crypto key meaning cryptographic token

269
00:10:19,019 --> 00:10:20,760
interface sorry for all the alphabet

270
00:10:20,760 --> 00:10:22,080
soup

271
00:10:22,080 --> 00:10:24,660
um but there's pkcs set of Standards

272
00:10:24,660 --> 00:10:26,640
they're like 1 through 15. I will only

273
00:10:26,640 --> 00:10:29,760
be talking primarily about pkcs11 and

274
00:10:29,760 --> 00:10:31,920
the API to talk to these tokens

275
00:10:31,920 --> 00:10:33,600
and

276
00:10:33,600 --> 00:10:36,120
when you have these kind of Standards

277
00:10:36,120 --> 00:10:37,680
floating around with these smart cards

278
00:10:37,680 --> 00:10:40,140
some of the smart cards may be pkcs 11

279
00:10:40,140 --> 00:10:43,140
compatible but the module provided um to

280
00:10:43,140 --> 00:10:45,000
talk so it may not actually be

281
00:10:45,000 --> 00:10:47,399
compatible with this open SC even though

282
00:10:47,399 --> 00:10:49,800
it's open source so sorry if you come

283
00:10:49,800 --> 00:10:52,760
across that sometimes but it does happen

284
00:10:52,760 --> 00:10:56,160
pkcso 15 is a data format for the smart

285
00:10:56,160 --> 00:10:57,899
card that may not necessarily be

286
00:10:57,899 --> 00:11:00,720
compatible either with opensc or even

287
00:11:00,720 --> 00:11:04,079
have pkcs11 proper support I'm sorry

288
00:11:04,079 --> 00:11:05,760
that's just kind of the state of things

289
00:11:05,760 --> 00:11:07,680
right now but if you know these

290
00:11:07,680 --> 00:11:09,360
standards and how to talk to them you

291
00:11:09,360 --> 00:11:10,560
can kind of work with the tools that

292
00:11:10,560 --> 00:11:12,180
you're given and eventually you'll be

293
00:11:12,180 --> 00:11:13,680
able to talk to the tools with either

294
00:11:13,680 --> 00:11:16,380
tools that the ca will give you like

295
00:11:16,380 --> 00:11:19,620
they gave me proprietary clean tools to

296
00:11:19,620 --> 00:11:21,779
talk to the Token that they issued or I

297
00:11:21,779 --> 00:11:24,120
could use opensc which was thankfully

298
00:11:24,120 --> 00:11:25,860
compatible with the token that I was

299
00:11:25,860 --> 00:11:27,000
issued

300
00:11:27,000 --> 00:11:28,680
so make sure you talk to the ca like

301
00:11:28,680 --> 00:11:31,260
what are you issuing here and make sure

302
00:11:31,260 --> 00:11:32,820
you're not like me where I get it in the

303
00:11:32,820 --> 00:11:34,860
plain white envelope and then figure out

304
00:11:34,860 --> 00:11:37,380
what does it support and what's on it

305
00:11:37,380 --> 00:11:41,820
and what modules are able to talk to it

306
00:11:41,820 --> 00:11:45,120
signing with the token uh so we had to

307
00:11:45,120 --> 00:11:46,940
use our own infrastructure for this

308
00:11:46,940 --> 00:11:49,320
authentic code signatures are something

309
00:11:49,320 --> 00:11:51,300
that our window format Windows format

310
00:11:51,300 --> 00:11:53,399
code signing signature

311
00:11:53,399 --> 00:11:55,320
um The Challenge right now is the

312
00:11:55,320 --> 00:11:57,180
pipeline and tooling that we mainly

313
00:11:57,180 --> 00:12:00,540
develop on are mostly Nix based machines

314
00:12:00,540 --> 00:12:02,700
and you have to sign in particular for

315
00:12:02,700 --> 00:12:04,440
some reason on a Windows machine with

316
00:12:04,440 --> 00:12:09,740
sign tool which is a exe sign Tool uh so

317
00:12:09,740 --> 00:12:13,800
not no one at my job develops on Windows

318
00:12:13,800 --> 00:12:15,720
I don't know about y'all

319
00:12:15,720 --> 00:12:17,399
I mean you could strike up a cloud

320
00:12:17,399 --> 00:12:19,680
container or two but then it's outside

321
00:12:19,680 --> 00:12:22,260
of your pipeline for your CI see where

322
00:12:22,260 --> 00:12:24,000
I'm going with this so there's open

323
00:12:24,000 --> 00:12:26,339
source tools to help play with this so

324
00:12:26,339 --> 00:12:28,560
you have Json

325
00:12:28,560 --> 00:12:31,019
um some angels out there made Json and

326
00:12:31,019 --> 00:12:33,180
Osso sign code

327
00:12:33,180 --> 00:12:35,519
um that are out of band tools that can

328
00:12:35,519 --> 00:12:37,260
Implement an authentic code signature

329
00:12:37,260 --> 00:12:39,839
when you want to talk to the token and

330
00:12:39,839 --> 00:12:42,420
they support different key stores so if

331
00:12:42,420 --> 00:12:45,000
you have a yubi key or you have a

332
00:12:45,000 --> 00:12:46,560
different type of key store that

333
00:12:46,560 --> 00:12:49,680
supports pkcs11 you can use these tools

334
00:12:49,680 --> 00:12:53,339
to talk to the Token to sign

335
00:12:53,339 --> 00:12:55,500
um remember that the time stamp that you

336
00:12:55,500 --> 00:12:58,320
do you utilize in a signature counts as

337
00:12:58,320 --> 00:12:59,940
a counter signature so if you mess up

338
00:12:59,940 --> 00:13:01,620
the call to the timestamp server that

339
00:13:01,620 --> 00:13:04,200
the ca provides it can mess up the

340
00:13:04,200 --> 00:13:06,180
digital signature for the entire piece

341
00:13:06,180 --> 00:13:08,399
of software so I had to learn that the

342
00:13:08,399 --> 00:13:09,959
hard way when I had did like a bad call

343
00:13:09,959 --> 00:13:13,860
to a parameter for a 256 hash and it

344
00:13:13,860 --> 00:13:15,180
came back saying the digital signal was

345
00:13:15,180 --> 00:13:16,740
wrong and I was like do you mean and

346
00:13:16,740 --> 00:13:18,120
then I found out I had messed up the

347
00:13:18,120 --> 00:13:20,700
call to the timestamp server

348
00:13:20,700 --> 00:13:23,100
Cas do provide some cloud services like

349
00:13:23,100 --> 00:13:26,880
ssl.com provides like a e-signer service

350
00:13:26,880 --> 00:13:28,800
of some sort but I don't really like

351
00:13:28,800 --> 00:13:30,240
that direction because one once again

352
00:13:30,240 --> 00:13:31,980
you have to pay for it pay for it

353
00:13:31,980 --> 00:13:34,920
monthly or by sign I forget but it's

354
00:13:34,920 --> 00:13:36,180
just these are things that can happen

355
00:13:36,180 --> 00:13:38,160
for free you know and these are things

356
00:13:38,160 --> 00:13:39,660
that can be utilized if you know the

357
00:13:39,660 --> 00:13:41,700
ecosystem was Stronger around that so I

358
00:13:41,700 --> 00:13:43,740
don't necessarily support the cea based

359
00:13:43,740 --> 00:13:46,740
tools but they do exist if you just

360
00:13:46,740 --> 00:13:48,180
don't want to do any of that with your

361
00:13:48,180 --> 00:13:49,680
own infrastructure and just want to

362
00:13:49,680 --> 00:13:51,839
utilize the e-signer that they have with

363
00:13:51,839 --> 00:13:54,000
their Cloud infrastructure

364
00:13:54,000 --> 00:13:56,040
uh what can make this all easier

365
00:13:56,040 --> 00:13:58,980
estustation so you'll have your own say

366
00:13:58,980 --> 00:14:01,200
a UB key and you can attest to the

367
00:14:01,200 --> 00:14:03,300
certificate originally with that UB key

368
00:14:03,300 --> 00:14:05,160
and a test that there's a private key

369
00:14:05,160 --> 00:14:06,779
that's been generated and stored on that

370
00:14:06,779 --> 00:14:08,880
device and they'll send you the

371
00:14:08,880 --> 00:14:10,560
intermediate and the cross signing

372
00:14:10,560 --> 00:14:12,300
certificate to install on your UB key

373
00:14:12,300 --> 00:14:14,399
and you can distribute among your team

374
00:14:14,399 --> 00:14:18,360
with a tested UB Keys um the UB keys do

375
00:14:18,360 --> 00:14:20,220
have to be fips compliant thankfully UB

376
00:14:20,220 --> 00:14:23,220
key ubco provides Phipps compliant keys

377
00:14:23,220 --> 00:14:26,040
so that's a opportunity there to

378
00:14:26,040 --> 00:14:28,740
actually expand among the ecosystem

379
00:14:28,740 --> 00:14:30,300
um say you have three developers on your

380
00:14:30,300 --> 00:14:32,579
team you can have them all have fips

381
00:14:32,579 --> 00:14:34,860
keys attest to the certificate and you

382
00:14:34,860 --> 00:14:36,899
all can sign that way it's easier to

383
00:14:36,899 --> 00:14:39,120
revoke like a physical key from that

384
00:14:39,120 --> 00:14:41,040
person than it is to revoke people from

385
00:14:41,040 --> 00:14:43,920
A system that is a singular centralized

386
00:14:43,920 --> 00:14:45,480
system that everybody knows the PIN code

387
00:14:45,480 --> 00:14:47,100
and they leave the company and they may

388
00:14:47,100 --> 00:14:49,440
know the PIN code and that can get messy

389
00:14:49,440 --> 00:14:52,019
so I find it better for auditing and

390
00:14:52,019 --> 00:14:54,720
management of cosigners

391
00:14:54,720 --> 00:14:56,880
um the code signing ecosystem I only

392
00:14:56,880 --> 00:14:58,380
talked about Windows here but there's

393
00:14:58,380 --> 00:15:00,839
other opportunities of code sign that

394
00:15:00,839 --> 00:15:04,139
occur and happen uh pgb keys and UB keys

395
00:15:04,139 --> 00:15:05,880
and smart cards

396
00:15:05,880 --> 00:15:07,860
um you have to you can like make an

397
00:15:07,860 --> 00:15:09,480
internal system where you upload a pub

398
00:15:09,480 --> 00:15:12,240
key to an internal system possibly

399
00:15:12,240 --> 00:15:14,279
um and have like internal pki management

400
00:15:14,279 --> 00:15:15,899
with that

401
00:15:15,899 --> 00:15:18,779
um digital signature slot on UB key I'm

402
00:15:18,779 --> 00:15:20,880
sorry I'm like really UB key heavy there

403
00:15:20,880 --> 00:15:22,860
are other smart cards like Nitro key and

404
00:15:22,860 --> 00:15:25,019
all that I just primarily worked with

405
00:15:25,019 --> 00:15:26,519
yubikey

406
00:15:26,519 --> 00:15:29,339
um slot 9C on UB key you can use that

407
00:15:29,339 --> 00:15:31,680
for a singular use or internal projects

408
00:15:31,680 --> 00:15:34,980
for pki and uh we use actually on

409
00:15:34,980 --> 00:15:37,320
certified pgb keys to sign some of our

410
00:15:37,320 --> 00:15:39,959
packages for Debian so that's been

411
00:15:39,959 --> 00:15:40,980
something that's been really really

412
00:15:40,980 --> 00:15:43,560
helpful having open pgb keys on UB Keys

413
00:15:43,560 --> 00:15:45,120
distributed among our developers who are

414
00:15:45,120 --> 00:15:46,620
all remote

415
00:15:46,620 --> 00:15:48,360
um and then there's six door which is a

416
00:15:48,360 --> 00:15:49,680
new project I think out of the Linux

417
00:15:49,680 --> 00:15:51,180
Foundation

418
00:15:51,180 --> 00:15:53,060
um they support something called

419
00:15:53,060 --> 00:15:56,760
ephemeral keys and they do use oidc or

420
00:15:56,760 --> 00:15:58,560
open identity connect for identity

421
00:15:58,560 --> 00:16:01,019
purposes which may you know cause some

422
00:16:01,019 --> 00:16:02,760
issue here and there but some people

423
00:16:02,760 --> 00:16:04,440
depending on your threat model and how

424
00:16:04,440 --> 00:16:06,839
sound you find that solution but I do

425
00:16:06,839 --> 00:16:08,519
like their idea of ephemeral keys

426
00:16:08,519 --> 00:16:10,860
because cosigning certificates they last

427
00:16:10,860 --> 00:16:12,540
like a year it's really long term

428
00:16:12,540 --> 00:16:14,639
certificates in the ecosystem CLS

429
00:16:14,639 --> 00:16:16,019
certificates normally get issued for

430
00:16:16,019 --> 00:16:17,940
like 90 days at a time now or at least

431
00:16:17,940 --> 00:16:19,320
that's what's

432
00:16:19,320 --> 00:16:21,480
at least that's what's being

433
00:16:21,480 --> 00:16:24,180
um proposed as a better TLS ecosystem

434
00:16:24,180 --> 00:16:27,240
for putting out TLS certificates

435
00:16:27,240 --> 00:16:30,000
and so that every 90-day spam versus the

436
00:16:30,000 --> 00:16:31,860
EV and regular code science certificates

437
00:16:31,860 --> 00:16:34,260
that are issued like once you know and

438
00:16:34,260 --> 00:16:36,839
they expire in a year or three that's

439
00:16:36,839 --> 00:16:38,940
really long term and an easy chance for

440
00:16:38,940 --> 00:16:41,699
something to slip and keys to get you

441
00:16:41,699 --> 00:16:43,920
know actually leaked in some sort of

442
00:16:43,920 --> 00:16:45,779
manner because of that long-term

443
00:16:45,779 --> 00:16:47,639
presence of that code signing

444
00:16:47,639 --> 00:16:49,740
certificate so I do like their idea of

445
00:16:49,740 --> 00:16:53,220
ephemeral keys and just two days ago six

446
00:16:53,220 --> 00:16:55,680
store now supports npm signing npm

447
00:16:55,680 --> 00:16:58,259
packages and beta so check it out

448
00:16:58,259 --> 00:17:00,000
um and then

449
00:17:00,000 --> 00:17:01,800
I talked to the director of engineering

450
00:17:01,800 --> 00:17:02,820
over there

451
00:17:02,820 --> 00:17:04,619
um there is like little Whispers around

452
00:17:04,619 --> 00:17:06,900
trying to get a chain of trust with on

453
00:17:06,900 --> 00:17:09,540
the Windows not with Windows authentico

454
00:17:09,540 --> 00:17:12,240
but on the Windows ecosystem and Pi Pi

455
00:17:12,240 --> 00:17:13,260
packages

456
00:17:13,260 --> 00:17:15,299
um signing six door with that six store

457
00:17:15,299 --> 00:17:16,619
check it out there's a whole like

458
00:17:16,619 --> 00:17:18,480
different sets of like tools that they

459
00:17:18,480 --> 00:17:20,520
use they have their own CA internal

460
00:17:20,520 --> 00:17:23,819
monitoring and logs it's very nice stuff

461
00:17:23,819 --> 00:17:25,319
um signing mobile applications have

462
00:17:25,319 --> 00:17:27,419
their own ecosystem I didn't focus on

463
00:17:27,419 --> 00:17:30,360
noise as much but I do know like with

464
00:17:30,360 --> 00:17:32,520
iOS there's xcode and some of these

465
00:17:32,520 --> 00:17:34,500
things could be actually implemented to

466
00:17:34,500 --> 00:17:35,520
be a little bit more open there's

467
00:17:35,520 --> 00:17:37,320
different tools so I didn't focus on it

468
00:17:37,320 --> 00:17:39,120
as much but there is code signing for

469
00:17:39,120 --> 00:17:40,280
you know

470
00:17:40,280 --> 00:17:43,320
apks and different like iOS packages in

471
00:17:43,320 --> 00:17:44,940
apps

472
00:17:44,940 --> 00:17:47,580
my requests and wishes uh of this

473
00:17:47,580 --> 00:17:49,140
ecosystem is better support from

474
00:17:49,140 --> 00:17:52,260
certificate authorities when it comes to

475
00:17:52,260 --> 00:17:54,299
um code signing there is the pki

476
00:17:54,299 --> 00:17:56,580
Consortium uh they actually have like a

477
00:17:56,580 --> 00:17:58,380
GitHub an open repo if you have like any

478
00:17:58,380 --> 00:18:00,419
issues that you've had over time to go

479
00:18:00,419 --> 00:18:02,160
Express that in their um discussions

480
00:18:02,160 --> 00:18:05,760
panel on GitHub and then there's the ca

481
00:18:05,760 --> 00:18:08,940
um browser form that also has done their

482
00:18:08,940 --> 00:18:10,980
due diligence and actually passed a

483
00:18:10,980 --> 00:18:14,340
standard that goes into effect in June

484
00:18:14,340 --> 00:18:17,400
around not only getting co-signed

485
00:18:17,400 --> 00:18:20,179
certificates supported and stored on um

486
00:18:20,179 --> 00:18:22,860
140-2 compliant keys but you can

487
00:18:22,860 --> 00:18:24,960
actually use cloud hsms now with this

488
00:18:24,960 --> 00:18:27,059
new made mandate you can attach to a

489
00:18:27,059 --> 00:18:29,760
cloud HSM you can um Unfortunately they

490
00:18:29,760 --> 00:18:32,220
don't have attestation readily available

491
00:18:32,220 --> 00:18:35,760
I think only Google Cloud right now has

492
00:18:35,760 --> 00:18:38,160
esthetication available the other two

493
00:18:38,160 --> 00:18:40,559
need to catch up but there is more talk

494
00:18:40,559 --> 00:18:43,020
around remote cessation in particular so

495
00:18:43,020 --> 00:18:45,299
you can use cloud hsms now Within new

496
00:18:45,299 --> 00:18:46,860
mandate it's a little bit more looser

497
00:18:46,860 --> 00:18:48,480
just as long as you have a 140-2

498
00:18:48,480 --> 00:18:50,160
compliant key they'll allow you to do a

499
00:18:50,160 --> 00:18:52,400
test

500
00:18:52,799 --> 00:18:55,500
um so let's focus also on proprietary

501
00:18:55,500 --> 00:18:57,480
Cloud signing more distributed signing I

502
00:18:57,480 --> 00:18:59,280
support Association in that way because

503
00:18:59,280 --> 00:19:01,080
you can distribute among a team safely

504
00:19:01,080 --> 00:19:03,600
and the important part is the private

505
00:19:03,600 --> 00:19:05,460
key never leaves the device you can't

506
00:19:05,460 --> 00:19:07,020
export the key and you can't put it

507
00:19:07,020 --> 00:19:08,520
anywhere else it stays on the device

508
00:19:08,520 --> 00:19:10,679
unless someone out there hack ubiky you

509
00:19:10,679 --> 00:19:11,580
know

510
00:19:11,580 --> 00:19:13,320
you're getting paid but you know what

511
00:19:13,320 --> 00:19:14,640
I'm saying like it's just kind of like

512
00:19:14,640 --> 00:19:17,640
in this case that we know of that the

513
00:19:17,640 --> 00:19:20,400
private key will stay on the device

514
00:19:20,400 --> 00:19:21,240
um

515
00:19:21,240 --> 00:19:23,700
and now that the cryptographic standards

516
00:19:23,700 --> 00:19:25,559
are the same for code signing um Regular

517
00:19:25,559 --> 00:19:27,120
certificates and Eevee certificates I

518
00:19:27,120 --> 00:19:28,980
honestly don't see the benefit of an

519
00:19:28,980 --> 00:19:30,900
Eevee certificate over a regular co-sign

520
00:19:30,900 --> 00:19:32,340
certificate now because the

521
00:19:32,340 --> 00:19:34,559
cryptographic standards are the same

522
00:19:34,559 --> 00:19:37,140
um especially as of June so I'm not

523
00:19:37,140 --> 00:19:39,480
quite sure outside of like background

524
00:19:39,480 --> 00:19:42,840
checks how beneficial EV over regular

525
00:19:42,840 --> 00:19:45,419
can be in the future past June I would

526
00:19:45,419 --> 00:19:47,160
just probably tell most open source

527
00:19:47,160 --> 00:19:49,380
projects to just utilize regular

528
00:19:49,380 --> 00:19:52,200
co-signing certificates

529
00:19:52,200 --> 00:19:53,820
um and in my opinion accessible security

530
00:19:53,820 --> 00:19:55,740
is better security especially for open

531
00:19:55,740 --> 00:19:58,440
source projects like mine and I would

532
00:19:58,440 --> 00:20:00,480
much rather we go towards a stronger

533
00:20:00,480 --> 00:20:02,520
ecosystem rather than creating

534
00:20:02,520 --> 00:20:04,320
proprietary tools down the road that

535
00:20:04,320 --> 00:20:07,500
would just make code signing even harder

536
00:20:07,500 --> 00:20:10,860
so some plugs uh pivot is a cash app

537
00:20:10,860 --> 00:20:12,840
based open source project that I

538
00:20:12,840 --> 00:20:14,520
contributed to that actually you can

539
00:20:14,520 --> 00:20:16,679
manage some x509 certificates

540
00:20:16,679 --> 00:20:18,240
um on ubikey

541
00:20:18,240 --> 00:20:19,919
um I actually added additional slots

542
00:20:19,919 --> 00:20:22,140
with my contribution so go play with

543
00:20:22,140 --> 00:20:23,280
that if you want

544
00:20:23,280 --> 00:20:26,340
um it's not set in stone but uh it's a

545
00:20:26,340 --> 00:20:27,720
project that I thought was pretty useful

546
00:20:27,720 --> 00:20:30,299
for talking to yubikeys and if you want

547
00:20:30,299 --> 00:20:31,440
to kind of see what it looks like to

548
00:20:31,440 --> 00:20:33,720
sign with a smart card I did create like

549
00:20:33,720 --> 00:20:35,760
a shell script to kind of see what that

550
00:20:35,760 --> 00:20:38,580
looks like particularly with EC elliptic

551
00:20:38,580 --> 00:20:41,520
curve ECC certificates and seeing how

552
00:20:41,520 --> 00:20:42,960
that can look it's a really short shell

553
00:20:42,960 --> 00:20:45,600
script of sorts so it's something that I

554
00:20:45,600 --> 00:20:47,100
played with like especially if you want

555
00:20:47,100 --> 00:20:48,960
to like build your own internal pki and

556
00:20:48,960 --> 00:20:52,140
want to see how to uh how the actual

557
00:20:52,140 --> 00:20:54,240
signing mechanisms work on a UB key and

558
00:20:54,240 --> 00:20:55,440
they also have their own docs on the

559
00:20:55,440 --> 00:20:56,760
site too on ubico they're pretty good

560
00:20:56,760 --> 00:20:58,320
Dev Docs

561
00:20:58,320 --> 00:21:00,310
thank you for listening

562
00:21:00,310 --> 00:21:03,450
[Applause]

563
00:21:07,860 --> 00:21:10,679
any questions

564
00:21:10,679 --> 00:21:13,400
yes

565
00:21:16,919 --> 00:21:19,140
could you talk a little bit more about

566
00:21:19,140 --> 00:21:21,900
ephemeral code signing certs

567
00:21:21,900 --> 00:21:24,000
um I was under the impression that this

568
00:21:24,000 --> 00:21:26,700
signature would only be valid as long as

569
00:21:26,700 --> 00:21:30,419
the signing certificate was valid

570
00:21:30,419 --> 00:21:34,200
so the way six store set it up if I

571
00:21:34,200 --> 00:21:36,539
understand your question correctly is

572
00:21:36,539 --> 00:21:38,340
that they they have different mechanisms

573
00:21:38,340 --> 00:21:40,020
they have their own internal CA right

574
00:21:40,020 --> 00:21:41,820
that they have that issues these

575
00:21:41,820 --> 00:21:44,580
ephemeral keys that are mostly

576
00:21:44,580 --> 00:21:45,840
um I would say kind of like a key store

577
00:21:45,840 --> 00:21:49,500
ring situation where the base key gets

578
00:21:49,500 --> 00:21:51,659
rotated but then there's a chain that

579
00:21:51,659 --> 00:21:54,059
gets connected over time

580
00:21:54,059 --> 00:21:55,320
um which is why they have the monitoring

581
00:21:55,320 --> 00:21:57,299
monitoring and logs hopefully the

582
00:21:57,299 --> 00:21:58,740
director of engineering from six door

583
00:21:58,740 --> 00:21:59,940
doesn't get mad at me and I'm like

584
00:21:59,940 --> 00:22:01,919
misinterpreting what he said but um

585
00:22:01,919 --> 00:22:03,900
that's what I understand as far as like

586
00:22:03,900 --> 00:22:05,580
being valid as long as the signature is

587
00:22:05,580 --> 00:22:06,720
valid

588
00:22:06,720 --> 00:22:07,860
um

589
00:22:07,860 --> 00:22:10,440
I think they have it where there's like

590
00:22:10,440 --> 00:22:12,120
a permanent log of that and they check

591
00:22:12,120 --> 00:22:14,820
against that versus having the

592
00:22:14,820 --> 00:22:17,520
co-signing certificate long-standing so

593
00:22:17,520 --> 00:22:18,840
making sure there's a there's a record

594
00:22:18,840 --> 00:22:20,039
of it

595
00:22:20,039 --> 00:22:22,679
and having that there and solidified

596
00:22:22,679 --> 00:22:25,919
into kind of like mimicking CT logs to

597
00:22:25,919 --> 00:22:28,320
an extent and kind of like having that

598
00:22:28,320 --> 00:22:29,700
chain of trust going back to the

599
00:22:29,700 --> 00:22:30,620
original

600
00:22:30,620 --> 00:22:33,000
co-signing certificate that did you know

601
00:22:33,000 --> 00:22:36,059
lose its um I would say

602
00:22:36,059 --> 00:22:38,760
permeates in the system hopefully that

603
00:22:38,760 --> 00:22:41,360
answered the question

604
00:22:50,700 --> 00:22:54,020
okay thank you any more questions

605
00:22:54,020 --> 00:22:56,520
thank you Alexis yeah

606
00:22:56,520 --> 00:22:59,900
[Applause]

