1
00:00:00,030 --> 00:00:04,290
Josh<font color="#CCCCCC"> please take it away</font><font color="#E5E5E5"> Thanks good</font>

2
00:00:02,580 --> 00:00:05,520
point it's good<font color="#E5E5E5"> this could</font><font color="#CCCCCC"> potentially</font>

3
00:00:04,290 --> 00:00:08,969
<font color="#CCCCCC">replace some products you're gonna see</font>

4
00:00:05,520 --> 00:00:11,040
at RSA this week<font color="#CCCCCC"> so thanks everyone</font><font color="#E5E5E5"> for</font>

5
00:00:08,970 --> 00:00:13,200
<font color="#E5E5E5">coming to my talk and thanks to the</font>

6
00:00:11,040 --> 00:00:15,450
<font color="#CCCCCC">organizers</font><font color="#E5E5E5"> for inviting me</font><font color="#CCCCCC"> to speak this</font>

7
00:00:13,200 --> 00:00:17,189
talks<font color="#E5E5E5"> focused on tools and techniques</font>

8
00:00:15,450 --> 00:00:20,609
you can use<font color="#CCCCCC"> to identify and detect</font>

9
00:00:17,190 --> 00:00:22,430
malicious files in your<font color="#E5E5E5"> enterprise</font><font color="#CCCCCC"> the</font>

10
00:00:20,609 --> 00:00:25,380
first third of the talk is<font color="#E5E5E5"> going to be</font>

11
00:00:22,430 --> 00:00:27,810
an<font color="#E5E5E5"> overview of detection oriented file</font>

12
00:00:25,380 --> 00:00:30,029
analysis<font color="#E5E5E5"> while the last two thirds will</font>

13
00:00:27,810 --> 00:00:32,629
be a bit more technical<font color="#CCCCCC"> we'll end up</font>

14
00:00:30,029 --> 00:00:35,130
walking<font color="#E5E5E5"> through a real world example</font><font color="#CCCCCC"> of</font>

15
00:00:32,630 --> 00:00:38,910
detecting malicious<font color="#E5E5E5"> attributes</font><font color="#CCCCCC"> in a</font>

16
00:00:35,130 --> 00:00:40,379
document file<font color="#E5E5E5"> so before I jump into</font><font color="#CCCCCC"> the</font>

17
00:00:38,910 --> 00:00:42,000
<font color="#E5E5E5">the details I</font><font color="#CCCCCC"> just wanted to</font><font color="#E5E5E5"> quickly</font>

18
00:00:40,379 --> 00:00:43,800
<font color="#CCCCCC">highlight my background I've been</font>

19
00:00:42,000 --> 00:00:45,930
working in threat detection for six

20
00:00:43,800 --> 00:00:47,339
years<font color="#CCCCCC"> currently work at</font><font color="#E5E5E5"> Target</font><font color="#CCCCCC"> I'm a</font>

21
00:00:45,930 --> 00:00:49,980
lead engineer<font color="#CCCCCC"> in their cyber fusion</font>

22
00:00:47,340 --> 00:00:51,539
center and you can find me all over<font color="#E5E5E5"> the</font>

23
00:00:49,980 --> 00:00:54,510
various social<font color="#E5E5E5"> sites with my handle</font>

24
00:00:51,539 --> 00:00:55,890
right there<font color="#E5E5E5"> also I work from home so</font><font color="#CCCCCC"> I</font>

25
00:00:54,510 --> 00:00:58,589
wanted<font color="#CCCCCC"> to give a shout out to my</font>

26
00:00:55,890 --> 00:01:03,210
perennial<font color="#E5E5E5"> co-workers of</font><font color="#CCCCCC"> the year</font><font color="#E5E5E5"> over</font>

27
00:00:58,590 --> 00:01:06,299
here on the right so my<font color="#CCCCCC"> talk today</font>

28
00:01:03,210 --> 00:01:08,790
really<font color="#CCCCCC"> is to try to</font><font color="#E5E5E5"> convince you to</font>

29
00:01:06,299 --> 00:01:11,340
<font color="#E5E5E5">consider adding detection oriented file</font>

30
00:01:08,790 --> 00:01:13,110
analysis to your threat detection

31
00:01:11,340 --> 00:01:15,479
<font color="#E5E5E5">program because it resolves a data</font>

32
00:01:13,110 --> 00:01:17,610
visibility<font color="#E5E5E5"> gap that goes unaddressed by</font>

33
00:01:15,479 --> 00:01:20,700
tools like antivirus<font color="#E5E5E5"> and now our</font>

34
00:01:17,610 --> 00:01:24,810
sandboxes and it's a data visibility<font color="#E5E5E5"> gap</font>

35
00:01:20,700 --> 00:01:26,610
that you definitely or<font color="#CCCCCC"> probably have to</font>

36
00:01:24,810 --> 00:01:28,920
start<font color="#CCCCCC"> sometimes it's helped a little</font>

37
00:01:26,610 --> 00:01:30,750
<font color="#E5E5E5">look at</font><font color="#CCCCCC"> a definition I consider this</font>

38
00:01:28,920 --> 00:01:32,729
kind<font color="#E5E5E5"> of file analysis to be any that</font>

39
00:01:30,750 --> 00:01:34,920
enables real-time threat detection

40
00:01:32,729 --> 00:01:38,189
through enrichment extraction<font color="#E5E5E5"> and</font>

41
00:01:34,920 --> 00:01:40,560
metadata<font color="#E5E5E5"> collection the goal of a system</font>

42
00:01:38,189 --> 00:01:43,020
<font color="#E5E5E5">that does this</font><font color="#CCCCCC"> kind of analysis is to</font>

43
00:01:40,560 --> 00:01:45,689
collect enough<font color="#CCCCCC"> data to</font><font color="#E5E5E5"> allow defenders</font>

44
00:01:43,020 --> 00:01:50,340
to<font color="#E5E5E5"> either automatically or manually</font>

45
00:01:45,689 --> 00:01:53,008
identify adversaries in their network so

46
00:01:50,340 --> 00:01:54,869
systems that do this have<font color="#E5E5E5"> two defining</font>

47
00:01:53,009 --> 00:01:57,119
<font color="#CCCCCC">traits</font><font color="#E5E5E5"> to me first</font>

48
00:01:54,869 --> 00:01:59,729
<font color="#E5E5E5">they generate a</font><font color="#CCCCCC"> lot of file</font><font color="#E5E5E5"> metadata</font>

49
00:01:57,119 --> 00:02:02,850
<font color="#E5E5E5">from which you derive insight and second</font>

50
00:01:59,729 --> 00:02:05,280
they are<font color="#E5E5E5"> or</font><font color="#CCCCCC"> should be relatively easy to</font>

51
00:02:02,850 --> 00:02:07,140
integrate<font color="#E5E5E5"> with the detection systems you</font>

52
00:02:05,280 --> 00:02:10,190
currently have<font color="#E5E5E5"> while also being</font>

53
00:02:07,140 --> 00:02:13,920
customizable to your<font color="#CCCCCC"> needs</font>

54
00:02:10,190 --> 00:02:15,570
so definitions are nice but the

55
00:02:13,920 --> 00:02:17,850
the real question is you know<font color="#E5E5E5"> what's in</font>

56
00:02:15,570 --> 00:02:20,760
it<font color="#CCCCCC"> for you if</font><font color="#E5E5E5"> you decide</font><font color="#CCCCCC"> to use a system</font>

57
00:02:17,850 --> 00:02:22,320
<font color="#CCCCCC">like this</font><font color="#E5E5E5"> so the important thing to keep</font>

58
00:02:20,760 --> 00:02:26,040
<font color="#E5E5E5">in mind</font><font color="#CCCCCC"> about what I'm</font><font color="#E5E5E5"> going to describe</font>

59
00:02:22,320 --> 00:02:28,920
next<font color="#E5E5E5"> is that these systems</font><font color="#CCCCCC"> need to do</font>

60
00:02:26,040 --> 00:02:31,290
all their tasks quickly<font color="#CCCCCC"> and at scale in</font>

61
00:02:28,920 --> 00:02:33,980
order<font color="#CCCCCC"> to support real-time</font><font color="#E5E5E5"> detection</font><font color="#CCCCCC"> in</font>

62
00:02:31,290 --> 00:02:36,840
a large enterprise

63
00:02:33,980 --> 00:02:38,640
so first<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sis</font><font color="#E5E5E5"> this kind of systems</font>

64
00:02:36,840 --> 00:02:41,640
provide a pretty<font color="#E5E5E5"> comprehensive level of</font>

65
00:02:38,640 --> 00:02:43,200
detail<font color="#E5E5E5"> across all kinds of files and</font>

66
00:02:41,640 --> 00:02:44,940
<font color="#E5E5E5">that's important so defenders always</font>

67
00:02:43,200 --> 00:02:47,850
have a consistent data set to work<font color="#E5E5E5"> from</font>

68
00:02:44,940 --> 00:02:49,740
this includes<font color="#E5E5E5"> most commonly performing</font>

69
00:02:47,850 --> 00:02:55,260
simple tasks like<font color="#E5E5E5"> hashing every file</font>

70
00:02:49,740 --> 00:02:57,450
with md5<font color="#CCCCCC"> or shot 256 next these systems</font>

71
00:02:55,260 --> 00:02:59,910
commonly<font color="#E5E5E5"> perform recursive file analysis</font>

72
00:02:57,450 --> 00:03:01,560
<font color="#E5E5E5">that is they extract files from within</font>

73
00:02:59,910 --> 00:03:03,359
other files and submit them to<font color="#CCCCCC"> the</font>

74
00:03:01,560 --> 00:03:06,270
analysis<font color="#E5E5E5"> and analysis engine for</font>

75
00:03:03,360 --> 00:03:07,590
processing<font color="#CCCCCC"> you might normally think that</font>

76
00:03:06,270 --> 00:03:10,020
<font color="#E5E5E5">this only applies to something like</font>

77
00:03:07,590 --> 00:03:12,900
<font color="#E5E5E5">archive files but it also</font><font color="#CCCCCC"> equally</font>

78
00:03:10,020 --> 00:03:15,150
applies to documents images<font color="#E5E5E5"> even text</font>

79
00:03:12,900 --> 00:03:17,010
files can contain other files<font color="#E5E5E5"> and it's</font>

80
00:03:15,150 --> 00:03:20,310
important that<font color="#E5E5E5"> all</font><font color="#CCCCCC"> those files are</font>

81
00:03:17,010 --> 00:03:21,510
<font color="#CCCCCC">supported and finally there are</font><font color="#E5E5E5"> just</font>

82
00:03:20,310 --> 00:03:22,739
some files<font color="#E5E5E5"> that you see in your</font>

83
00:03:21,510 --> 00:03:24,989
<font color="#CCCCCC">enterprise that are more interesting</font>

84
00:03:22,739 --> 00:03:26,160
<font color="#CCCCCC">than others</font><font color="#E5E5E5"> and those always tend to</font><font color="#CCCCCC"> get</font>

85
00:03:24,989 --> 00:03:26,730
special treatment<font color="#CCCCCC"> and</font><font color="#E5E5E5"> these kinds of</font>

86
00:03:26,160 --> 00:03:28,500
systems

87
00:03:26,730 --> 00:03:32,040
this would include something like

88
00:03:28,500 --> 00:03:33,810
targeting a specific<font color="#CCCCCC"> type of metadata</font>

89
00:03:32,040 --> 00:03:37,230
<font color="#E5E5E5">that's used to identify adversary</font>

90
00:03:33,810 --> 00:03:39,060
activity<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example doing verbose data</font>

91
00:03:37,230 --> 00:03:40,679
collection of an executables import

92
00:03:39,060 --> 00:03:43,290
address<font color="#CCCCCC"> table</font><font color="#E5E5E5"> could be important to you</font>

93
00:03:40,680 --> 00:03:46,260
<font color="#CCCCCC">that kind of</font><font color="#E5E5E5"> idea having</font><font color="#CCCCCC"> you know file</font>

94
00:03:43,290 --> 00:03:49,940
specific metadata inspection applies<font color="#E5E5E5"> to</font>

95
00:03:46,260 --> 00:03:52,410
dozens and dozens of<font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> of files so</font>

96
00:03:49,940 --> 00:03:54,900
<font color="#CCCCCC">what's especially interesting to me</font>

97
00:03:52,410 --> 00:03:56,940
about<font color="#CCCCCC"> this</font><font color="#E5E5E5"> kind of analysis is that it's</font>

98
00:03:54,900 --> 00:03:58,680
a really<font color="#E5E5E5"> very underused in the active</font>

99
00:03:56,940 --> 00:04:00,380
threat detection space there aren't a

100
00:03:58,680 --> 00:04:04,560
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of organizations who are doing this</font>

101
00:04:00,380 --> 00:04:06,269
<font color="#E5E5E5">despite it being highly valuable this is</font>

102
00:04:04,560 --> 00:04:08,070
a release timeline of systems that

103
00:04:06,269 --> 00:04:10,640
people<font color="#E5E5E5"> commonly reference when they talk</font>

104
00:04:08,070 --> 00:04:12,840
<font color="#CCCCCC">about doing this kind of file analysis</font>

105
00:04:10,640 --> 00:04:15,179
<font color="#CCCCCC">the main thing I want to</font><font color="#E5E5E5"> point out about</font>

106
00:04:12,840 --> 00:04:17,940
this list is<font color="#CCCCCC"> that these systems</font><font color="#E5E5E5"> share</font>

107
00:04:15,180 --> 00:04:20,370
common design patterns<font color="#E5E5E5"> but they have</font>

108
00:04:17,940 --> 00:04:22,200
<font color="#E5E5E5">different intended purposes the three</font>

109
00:04:20,370 --> 00:04:24,419
I've highlighted here<font color="#CCCCCC"> are</font><font color="#E5E5E5"> commonly</font><font color="#CCCCCC"> used</font>

110
00:04:22,200 --> 00:04:26,400
as detection and<font color="#CCCCCC"> intelligence-gathering</font>

111
00:04:24,419 --> 00:04:27,690
<font color="#E5E5E5">systems while some of the others are</font>

112
00:04:26,400 --> 00:04:30,989
<font color="#E5E5E5">more focused on scan</font>

113
00:04:27,690 --> 00:04:34,440
malware or automating mundane analyst

114
00:04:30,990 --> 00:04:36,030
tasks<font color="#E5E5E5"> so in this presentation I'll</font><font color="#CCCCCC"> be</font>

115
00:04:34,440 --> 00:04:38,040
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> strelka which is the</font>

116
00:04:36,030 --> 00:04:40,799
<font color="#E5E5E5">project that</font><font color="#CCCCCC"> I open sourced under target</font>

117
00:04:38,040 --> 00:04:42,300
<font color="#E5E5E5">last year but you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> if any of</font><font color="#CCCCCC"> what I</font>

118
00:04:40,800 --> 00:04:44,850
say<font color="#CCCCCC"> today piques</font><font color="#E5E5E5"> your interests</font>

119
00:04:42,300 --> 00:04:46,950
<font color="#E5E5E5">I'd suggest you take this list</font><font color="#CCCCCC"> review</font>

120
00:04:44,850 --> 00:04:48,960
the projects on it and see which ones

121
00:04:46,950 --> 00:04:53,460
may best fit your<font color="#CCCCCC"> requirements</font><font color="#E5E5E5"> and use</font>

122
00:04:48,960 --> 00:04:54,989
<font color="#E5E5E5">cases so now we'll talk about</font><font color="#CCCCCC"> Strelka</font><font color="#E5E5E5"> if</font>

123
00:04:53,460 --> 00:04:56,609
you're not familiar<font color="#E5E5E5"> with her she's one</font>

124
00:04:54,990 --> 00:04:58,830
<font color="#E5E5E5">of the one of the</font><font color="#CCCCCC"> second-generation</font>

125
00:04:56,610 --> 00:05:02,190
<font color="#E5E5E5">Soviet space dogs to achieve orbital</font>

126
00:04:58,830 --> 00:05:03,570
flight and the project is named as such

127
00:05:02,190 --> 00:05:05,490
because it<font color="#E5E5E5"> borrows the system</font>

128
00:05:03,570 --> 00:05:07,980
<font color="#CCCCCC">architecture from Lockheed Martin's like</font>

129
00:05:05,490 --> 00:05:10,710
a project<font color="#CCCCCC"> so when it came</font><font color="#E5E5E5"> time to name</font>

130
00:05:07,980 --> 00:05:14,160
<font color="#E5E5E5">this</font><font color="#CCCCCC"> project I wanted</font><font color="#E5E5E5"> to pay homage to</font>

131
00:05:10,710 --> 00:05:16,830
their work through the name the<font color="#CCCCCC"> system</font>

132
00:05:14,160 --> 00:05:19,590
can be simplest described as a recursive

133
00:05:16,830 --> 00:05:22,289
static file analysis system<font color="#E5E5E5"> that's built</font>

134
00:05:19,590 --> 00:05:24,479
on Python and 0 mq one of the most

135
00:05:22,290 --> 00:05:25,770
significant<font color="#E5E5E5"> changes we've made to this</font>

136
00:05:24,480 --> 00:05:28,080
project compared to some of the<font color="#E5E5E5"> other</font>

137
00:05:25,770 --> 00:05:31,349
<font color="#E5E5E5">ones that were shown earlier is that</font><font color="#CCCCCC"> we</font>

138
00:05:28,080 --> 00:05:33,150
<font color="#CCCCCC">don't support</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> when it came time</font>

139
00:05:31,350 --> 00:05:35,760
<font color="#CCCCCC">to start thinking about what</font><font color="#E5E5E5"> the design</font>

140
00:05:33,150 --> 00:05:37,739
of a new system like this would be<font color="#E5E5E5"> I</font>

141
00:05:35,760 --> 00:05:39,390
knew Python<font color="#CCCCCC"> - couldn't be</font><font color="#E5E5E5"> supported</font>

142
00:05:37,740 --> 00:05:41,400
because<font color="#E5E5E5"> it's a you know</font><font color="#CCCCCC"> it's end of life</font>

143
00:05:39,390 --> 00:05:45,360
is supposedly<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> up very soon next</font>

144
00:05:41,400 --> 00:05:47,489
<font color="#CCCCCC">year</font><font color="#E5E5E5"> so out of the box</font>

145
00:05:45,360 --> 00:05:50,250
<font color="#CCCCCC">strelka</font><font color="#E5E5E5"> will produce event data for over</font>

146
00:05:47,490 --> 00:05:53,010
60 unique kinds of files<font color="#CCCCCC"> and we place a</font>

147
00:05:50,250 --> 00:05:54,450
pretty<font color="#E5E5E5"> significant</font><font color="#CCCCCC"> focus on files</font><font color="#E5E5E5"> that</font>

148
00:05:53,010 --> 00:05:57,110
<font color="#E5E5E5">are likely to be used for</font><font color="#CCCCCC"> malicious</font>

149
00:05:54,450 --> 00:06:00,180
purposes<font color="#E5E5E5"> normally you might think of</font>

150
00:05:57,110 --> 00:06:01,919
documents and executables<font color="#CCCCCC"> as files that</font>

151
00:06:00,180 --> 00:06:04,860
are<font color="#CCCCCC"> likely to</font><font color="#E5E5E5"> be used maliciously</font><font color="#CCCCCC"> but</font>

152
00:06:01,919 --> 00:06:07,080
<font color="#CCCCCC">something like HTML could be just as</font>

153
00:06:04,860 --> 00:06:11,610
malicious as<font color="#E5E5E5"> an executable given the</font>

154
00:06:07,080 --> 00:06:12,599
right context this<font color="#E5E5E5"> project has a what I</font>

155
00:06:11,610 --> 00:06:14,340
think are a number<font color="#CCCCCC"> of unique features</font>

156
00:06:12,600 --> 00:06:17,040
<font color="#E5E5E5">many of them are described in the github</font>

157
00:06:14,340 --> 00:06:18,900
page for it<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> my favorites that</font>

158
00:06:17,040 --> 00:06:21,540
<font color="#E5E5E5">are real differentiators are the focus</font>

159
00:06:18,900 --> 00:06:24,870
on scanning text-based files<font color="#CCCCCC"> I mentioned</font>

160
00:06:21,540 --> 00:06:27,510
HTML we also support<font color="#CCCCCC"> xml visual basic</font>

161
00:06:24,870 --> 00:06:31,380
code<font color="#CCCCCC"> javascript batch script many more</font>

162
00:06:27,510 --> 00:06:34,680
and the project is heavily focused<font color="#CCCCCC"> on</font>

163
00:06:31,380 --> 00:06:37,020
language<font color="#E5E5E5"> neutral components so we</font><font color="#CCCCCC"> use 0</font>

164
00:06:34,680 --> 00:06:38,729
mq<font color="#CCCCCC"> for networking</font><font color="#E5E5E5"> we use protobuf for</font>

165
00:06:37,020 --> 00:06:41,500
the messaging format we use<font color="#CCCCCC"> Yammer for</font>

166
00:06:38,729 --> 00:06:43,390
the configuration files the project<font color="#CCCCCC"> call</font>

167
00:06:41,500 --> 00:06:45,010
or is written in Python but you know

168
00:06:43,390 --> 00:06:47,409
<font color="#E5E5E5">technically you could write portions of</font>

169
00:06:45,010 --> 00:06:51,789
it<font color="#E5E5E5"> in nearly</font><font color="#CCCCCC"> any language you want that</font>

170
00:06:47,410 --> 00:06:55,240
is supported<font color="#E5E5E5"> by those components so here</font>

171
00:06:51,790 --> 00:06:57,340
we have a system<font color="#E5E5E5"> architecture diagram of</font>

172
00:06:55,240 --> 00:07:00,010
<font color="#CCCCCC">strelka</font><font color="#E5E5E5"> the two important things</font><font color="#CCCCCC"> they</font>

173
00:06:57,340 --> 00:07:01,479
immediately call out here are the dotted

174
00:07:00,010 --> 00:07:04,030
lines running<font color="#E5E5E5"> north to south those are</font>

175
00:07:01,480 --> 00:07:07,210
<font color="#CCCCCC">Network hops so this is a distributed</font>

176
00:07:04,030 --> 00:07:08,979
system<font color="#E5E5E5"> and the second thing is the</font>

177
00:07:07,210 --> 00:07:12,340
components in the center so those two

178
00:07:08,980 --> 00:07:14,110
components<font color="#E5E5E5"> constitute a cluster now from</font>

179
00:07:12,340 --> 00:07:16,780
a deployment point of view<font color="#CCCCCC"> strokers</font>

180
00:07:14,110 --> 00:07:18,550
primary goal is to<font color="#E5E5E5"> integrate with</font>

181
00:07:16,780 --> 00:07:20,559
whatever existing systems you<font color="#CCCCCC"> have for</font>

182
00:07:18,550 --> 00:07:22,270
detection<font color="#E5E5E5"> as seamlessly as</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> on</font>

183
00:07:20,560 --> 00:07:24,790
the<font color="#E5E5E5"> front end that means that clients</font>

184
00:07:22,270 --> 00:07:28,090
<font color="#CCCCCC">tend to be things</font><font color="#E5E5E5"> like network security</font>

185
00:07:24,790 --> 00:07:29,860
monitoring<font color="#CCCCCC"> sensors and</font><font color="#E5E5E5"> that they just</font>

186
00:07:28,090 --> 00:07:31,810
continuously push files<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the cluster</font>

187
00:07:29,860 --> 00:07:33,820
on<font color="#CCCCCC"> the back</font><font color="#E5E5E5"> end the event data is</font>

188
00:07:31,810 --> 00:07:36,160
<font color="#E5E5E5">written in Jason and you really can do</font>

189
00:07:33,820 --> 00:07:38,290
whatever you want with it<font color="#CCCCCC"> most</font><font color="#E5E5E5"> users end</font>

190
00:07:36,160 --> 00:07:40,180
up<font color="#E5E5E5"> sending it to a centralized log</font>

191
00:07:38,290 --> 00:07:41,950
aggregation system like<font color="#CCCCCC"> Splunk or</font>

192
00:07:40,180 --> 00:07:44,410
elastic you could also<font color="#CCCCCC"> just stick it</font><font color="#E5E5E5"> in</font>

193
00:07:41,950 --> 00:07:45,940
an on pram or<font color="#E5E5E5"> cloud database we don't</font>

194
00:07:44,410 --> 00:07:49,780
<font color="#E5E5E5">limit what you can</font><font color="#CCCCCC"> do with the data</font><font color="#E5E5E5"> we</font>

195
00:07:45,940 --> 00:07:51,640
<font color="#CCCCCC">just make it</font><font color="#E5E5E5"> available to you what is a</font>

196
00:07:49,780 --> 00:07:53,770
cool about<font color="#CCCCCC"> that system architecture is</font>

197
00:07:51,640 --> 00:07:56,050
<font color="#CCCCCC">that it makes it</font><font color="#E5E5E5"> really easy to scale a</font>

198
00:07:53,770 --> 00:07:58,450
cluster so the<font color="#E5E5E5"> cluster I manage</font>

199
00:07:56,050 --> 00:08:01,210
regularly scans up to<font color="#E5E5E5"> 150 million files</font>

200
00:07:58,450 --> 00:08:04,690
a day which<font color="#E5E5E5"> is also approximately</font><font color="#CCCCCC"> three</font>

201
00:08:01,210 --> 00:08:06,370
terabytes<font color="#E5E5E5"> of file content a day and the</font>

202
00:08:04,690 --> 00:08:08,890
system<font color="#E5E5E5"> will keep track of how</font><font color="#CCCCCC"> long it</font>

203
00:08:06,370 --> 00:08:11,770
takes<font color="#CCCCCC"> to scan each file so for the</font>

204
00:08:08,890 --> 00:08:14,440
cluster<font color="#CCCCCC"> I</font><font color="#E5E5E5"> manage at the 95th percentile</font>

205
00:08:11,770 --> 00:08:16,750
it takes 13 to 14 seconds<font color="#CCCCCC"> to scan</font><font color="#E5E5E5"> a file</font>

206
00:08:14,440 --> 00:08:19,180
<font color="#E5E5E5">as soon as you go to the 85th percentile</font>

207
00:08:16,750 --> 00:08:22,870
and lower you hit sub second scan times

208
00:08:19,180 --> 00:08:25,270
so the<font color="#E5E5E5"> speed of an individual scan plus</font>

209
00:08:22,870 --> 00:08:26,890
the distributed design<font color="#E5E5E5"> really means you</font>

210
00:08:25,270 --> 00:08:32,079
can<font color="#E5E5E5"> scale to</font><font color="#CCCCCC"> whatever volume</font><font color="#E5E5E5"> of files</font>

211
00:08:26,890 --> 00:08:33,309
you<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to handle when I</font><font color="#CCCCCC"> introduced</font>

212
00:08:32,080 --> 00:08:34,870
<font color="#E5E5E5">this project to people for the first</font>

213
00:08:33,309 --> 00:08:37,630
<font color="#E5E5E5">time there's always some questions that</font>

214
00:08:34,870 --> 00:08:40,089
pop up<font color="#E5E5E5"> right away and these are those</font>

215
00:08:37,630 --> 00:08:42,669
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> I don't consider this to</font><font color="#CCCCCC"> be an</font>

216
00:08:40,089 --> 00:08:45,100
intrusion<font color="#E5E5E5"> detection system</font><font color="#CCCCCC"> I say that it</font>

217
00:08:42,669 --> 00:08:47,470
enables intrusion detection<font color="#E5E5E5"> you still</font>

218
00:08:45,100 --> 00:08:49,300
need a human<font color="#CCCCCC"> to decide what to do with</font>

219
00:08:47,470 --> 00:08:51,670
<font color="#CCCCCC">the</font><font color="#E5E5E5"> data that gets</font><font color="#CCCCCC"> produced that could</font>

220
00:08:49,300 --> 00:08:53,680
be writing automated alerts from<font color="#E5E5E5"> the</font>

221
00:08:51,670 --> 00:08:54,370
data or manually crawling through<font color="#E5E5E5"> the</font>

222
00:08:53,680 --> 00:08:56,650
<font color="#E5E5E5">data</font>

223
00:08:54,370 --> 00:08:58,150
something like<font color="#E5E5E5"> threat hunting</font><font color="#CCCCCC"> it's</font>

224
00:08:56,650 --> 00:08:59,949
written in Python<font color="#E5E5E5"> because Python has</font>

225
00:08:58,150 --> 00:09:03,130
good<font color="#CCCCCC"> third-party packaged sport for the</font>

226
00:08:59,950 --> 00:09:04,900
kinds of files we<font color="#E5E5E5"> care to scan and it</font>

227
00:09:03,130 --> 00:09:06,760
<font color="#E5E5E5">really is just good enough</font><font color="#CCCCCC"> the system</font>

228
00:09:04,900 --> 00:09:08,740
architecture<font color="#CCCCCC"> lets us bypass any</font>

229
00:09:06,760 --> 00:09:11,050
inefficiencies it has through brute

230
00:09:08,740 --> 00:09:13,000
force scaling and when it<font color="#E5E5E5"> comes to</font>

231
00:09:11,050 --> 00:09:14,439
scalability we don't use<font color="#E5E5E5"> micro services</font>

232
00:09:13,000 --> 00:09:17,140
because they're way too<font color="#CCCCCC"> difficult to</font>

233
00:09:14,440 --> 00:09:19,390
manage<font color="#E5E5E5"> and</font><font color="#CCCCCC"> really are overkill for the</font>

234
00:09:17,140 --> 00:09:21,670
vast<font color="#E5E5E5"> majority</font><font color="#CCCCCC"> of users we use cookie</font>

235
00:09:19,390 --> 00:09:24,189
cutter scaling which means you build<font color="#E5E5E5"> a</font>

236
00:09:21,670 --> 00:09:26,110
cluster<font color="#E5E5E5"> if it hasn't met the scale you</font>

237
00:09:24,190 --> 00:09:28,360
<font color="#E5E5E5">need you just</font><font color="#CCCCCC"> keep</font><font color="#E5E5E5"> adding carbon copies</font>

238
00:09:26,110 --> 00:09:29,890
of<font color="#CCCCCC"> the same server to the</font><font color="#E5E5E5"> cluster until</font>

239
00:09:28,360 --> 00:09:34,000
you either hit<font color="#CCCCCC"> the scale you need or you</font>

240
00:09:29,890 --> 00:09:37,420
run<font color="#E5E5E5"> out of hardware so those are really</font>

241
00:09:34,000 --> 00:09:39,250
<font color="#E5E5E5">the introductory details</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is where</font>

242
00:09:37,420 --> 00:09:40,779
we<font color="#E5E5E5"> kind of get to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> interesting part</font>

243
00:09:39,250 --> 00:09:43,360
of this talk<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is what you could</font>

244
00:09:40,779 --> 00:09:44,710
actually<font color="#E5E5E5"> find with this data and to do</font>

245
00:09:43,360 --> 00:09:48,279
that what I'm gonna do is call<font color="#E5E5E5"> on</font>

246
00:09:44,710 --> 00:09:50,470
<font color="#CCCCCC">someone I follow on Twitter</font><font color="#E5E5E5"> so this is</font>

247
00:09:48,279 --> 00:09:52,510
<font color="#E5E5E5">John Lambert he works</font><font color="#CCCCCC"> over at Microsoft</font>

248
00:09:50,470 --> 00:09:54,880
and he shares a lot<font color="#CCCCCC"> of interesting</font>

249
00:09:52,510 --> 00:09:57,510
malware samples<font color="#CCCCCC"> online</font><font color="#E5E5E5"> many of which</font>

250
00:09:54,880 --> 00:10:00,070
unsurprisingly<font color="#E5E5E5"> include office documents</font>

251
00:09:57,510 --> 00:10:01,650
what we're gonna do here<font color="#E5E5E5"> is take one of</font>

252
00:10:00,070 --> 00:10:04,000
the samples he shared late last<font color="#E5E5E5"> summer</font>

253
00:10:01,650 --> 00:10:06,100
<font color="#CCCCCC">walked</font><font color="#E5E5E5"> through the</font><font color="#CCCCCC"> Strelka data for that</font>

254
00:10:04,000 --> 00:10:08,800
<font color="#E5E5E5">file and try to determine if we think</font>

255
00:10:06,100 --> 00:10:11,740
it's<font color="#E5E5E5"> malicious or not so what we'll be</font>

256
00:10:08,800 --> 00:10:13,359
looking at our<font color="#E5E5E5"> three files in total</font><font color="#CCCCCC"> the</font>

257
00:10:11,740 --> 00:10:16,270
first files in<font color="#E5E5E5"> office document</font>

258
00:10:13,360 --> 00:10:18,310
it's a resume<font color="#E5E5E5"> from Amanda</font><font color="#CCCCCC"> and the second</font>

259
00:10:16,270 --> 00:10:21,189
two files are files that are nested

260
00:10:18,310 --> 00:10:23,439
<font color="#E5E5E5">inside of that document and while we do</font>

261
00:10:21,190 --> 00:10:26,680
this<font color="#E5E5E5"> I just</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> like you to remember</font>

262
00:10:23,440 --> 00:10:30,490
this stat<font color="#E5E5E5"> that's over here on the on the</font>

263
00:10:26,680 --> 00:10:32,380
<font color="#CCCCCC">Left 6 only 6 out</font><font color="#E5E5E5"> of 59 AV engines</font>

264
00:10:30,490 --> 00:10:34,990
flagged this document as suspicious

265
00:10:32,380 --> 00:10:40,060
<font color="#E5E5E5">which is a pretty low percentage lesson</font>

266
00:10:34,990 --> 00:10:42,520
<font color="#E5E5E5">well approximately</font><font color="#CCCCCC"> 10%</font><font color="#E5E5E5"> so this is the</font>

267
00:10:40,060 --> 00:10:45,849
literal JSON output of the<font color="#CCCCCC"> strelka</font>

268
00:10:42,520 --> 00:10:47,470
engine<font color="#E5E5E5"> or system this is the this</font><font color="#CCCCCC"> is</font>

269
00:10:45,850 --> 00:10:49,720
file<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> that we'll be looking at</font>

270
00:10:47,470 --> 00:10:51,430
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> the document itself before</font><font color="#CCCCCC"> we</font>

271
00:10:49,720 --> 00:10:52,660
<font color="#E5E5E5">really dig in here I think it's</font>

272
00:10:51,430 --> 00:10:55,510
important<font color="#CCCCCC"> to call out some of the</font>

273
00:10:52,660 --> 00:10:58,630
structure of<font color="#CCCCCC"> the data the first</font><font color="#E5E5E5"> is that</font>

274
00:10:55,510 --> 00:11:01,060
at the root<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> Jason event</font><font color="#E5E5E5"> there's a</font>

275
00:10:58,630 --> 00:11:02,709
variety<font color="#CCCCCC"> of</font><font color="#E5E5E5"> metadata dictionaries</font><font color="#CCCCCC"> and</font>

276
00:11:01,060 --> 00:11:04,989
<font color="#E5E5E5">they're all very literally named for the</font>

277
00:11:02,709 --> 00:11:07,900
data that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> encapsulated within</font><font color="#E5E5E5"> them so</font>

278
00:11:04,990 --> 00:11:08,230
hash metadata is the result of hashing

279
00:11:07,900 --> 00:11:12,130
funk

280
00:11:08,230 --> 00:11:14,920
<font color="#E5E5E5">zip metadata is artifacts related to zip</font>

281
00:11:12,130 --> 00:11:16,480
extraction<font color="#CCCCCC"> XF tool metadata is related</font>

282
00:11:14,920 --> 00:11:17,740
to<font color="#E5E5E5"> the output</font><font color="#CCCCCC"> of the EXIF tool utility</font>

283
00:11:16,480 --> 00:11:19,870
things like that<font color="#E5E5E5"> these</font><font color="#CCCCCC"> are very</font>

284
00:11:17,740 --> 00:11:21,640
literally named<font color="#E5E5E5"> so it's easy for</font><font color="#CCCCCC"> an</font>

285
00:11:19,870 --> 00:11:24,370
analyst<font color="#CCCCCC"> to understand what the data</font>

286
00:11:21,640 --> 00:11:26,920
represents the thing that is a<font color="#E5E5E5"> little</font>

287
00:11:24,370 --> 00:11:29,610
weirder and not literally named is this

288
00:11:26,920 --> 00:11:32,170
thing called<font color="#E5E5E5"> flavors at the top so</font>

289
00:11:29,610 --> 00:11:34,450
<font color="#CCCCCC">install Co we</font><font color="#E5E5E5"> don't identify files by</font>

290
00:11:32,170 --> 00:11:36,370
type<font color="#CCCCCC"> we identify them</font><font color="#E5E5E5"> by flavor and</font>

291
00:11:34,450 --> 00:11:38,920
that's because sometimes<font color="#E5E5E5"> it's useful</font><font color="#CCCCCC"> to</font>

292
00:11:36,370 --> 00:11:41,710
identify<font color="#E5E5E5"> a file by more than its type</font><font color="#CCCCCC"> an</font>

293
00:11:38,920 --> 00:11:43,540
<font color="#E5E5E5">example of that would be say you have an</font>

294
00:11:41,710 --> 00:11:45,850
XML file that<font color="#CCCCCC"> is simultaneously a</font>

295
00:11:43,540 --> 00:11:47,920
malware configuration file<font color="#E5E5E5"> those are</font>

296
00:11:45,850 --> 00:11:50,620
<font color="#E5E5E5">both valid ways to identify that file</font>

297
00:11:47,920 --> 00:11:53,229
and we use these flavors to assign

298
00:11:50,620 --> 00:11:55,150
scanners<font color="#E5E5E5"> that produce the metadata you</font>

299
00:11:53,230 --> 00:11:58,570
see here so it's important that we're

300
00:11:55,150 --> 00:12:01,090
flexible<font color="#E5E5E5"> in</font><font color="#CCCCCC"> how we name these things the</font>

301
00:11:58,570 --> 00:12:03,310
two primary<font color="#E5E5E5"> methods of tasting flavors</font>

302
00:12:01,090 --> 00:12:05,440
in the system<font color="#E5E5E5"> is through</font><font color="#CCCCCC"> Lib magic in</font>

303
00:12:03,310 --> 00:12:08,140
<font color="#CCCCCC">Yarra</font><font color="#E5E5E5"> represented by the my</font><font color="#CCCCCC"> manyara</font>

304
00:12:05,440 --> 00:12:09,190
<font color="#E5E5E5">fields in the</font><font color="#CCCCCC"> flavours dictionary</font><font color="#E5E5E5"> so</font>

305
00:12:08,140 --> 00:12:10,330
what we're actually<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> do here is</font>

306
00:12:09,190 --> 00:12:12,460
<font color="#E5E5E5">we're gonna walk</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> this almost</font>

307
00:12:10,330 --> 00:12:15,940
line by line and<font color="#E5E5E5"> we'll talk to the</font>

308
00:12:12,460 --> 00:12:17,230
interesting points<font color="#E5E5E5"> here</font><font color="#CCCCCC"> first if we</font>

309
00:12:15,940 --> 00:12:19,090
didn't already know<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this was an</font>

310
00:12:17,230 --> 00:12:21,220
office document<font color="#E5E5E5"> the flavors are the</font>

311
00:12:19,090 --> 00:12:23,500
thing<font color="#CCCCCC"> that tell us</font><font color="#E5E5E5"> that it is</font><font color="#CCCCCC"> this</font>

312
00:12:21,220 --> 00:12:25,510
happens to<font color="#CCCCCC"> be a docx file this is that's</font>

313
00:12:23,500 --> 00:12:26,800
<font color="#E5E5E5">what it would</font><font color="#CCCCCC"> normally appear</font><font color="#E5E5E5"> to be on</font>

314
00:12:25,510 --> 00:12:31,030
an<font color="#CCCCCC"> endpoint if you were looking</font><font color="#E5E5E5"> at the</font>

315
00:12:26,800 --> 00:12:33,790
file<font color="#CCCCCC"> that's a</font><font color="#E5E5E5"> that's a office open XML</font>

316
00:12:31,030 --> 00:12:35,770
file<font color="#E5E5E5"> the other</font><font color="#CCCCCC"> interesting thing about</font>

317
00:12:33,790 --> 00:12:38,110
the<font color="#CCCCCC"> system is that</font><font color="#E5E5E5"> we we hash every file</font>

318
00:12:35,770 --> 00:12:41,620
<font color="#E5E5E5">no matter what so it always gets md5</font>

319
00:12:38,110 --> 00:12:43,270
sha-1<font color="#E5E5E5"> shop 256 etc we also assign a</font>

320
00:12:41,620 --> 00:12:44,680
<font color="#E5E5E5">unique ID to the file because you need</font>

321
00:12:43,270 --> 00:12:46,660
to<font color="#E5E5E5"> be able to keep</font><font color="#CCCCCC"> track of</font><font color="#E5E5E5"> files that</font>

322
00:12:44,680 --> 00:12:48,849
<font color="#E5E5E5">are directly</font><font color="#CCCCCC"> related to</font><font color="#E5E5E5"> one another</font><font color="#CCCCCC"> so</font>

323
00:12:46,660 --> 00:12:50,650
we<font color="#E5E5E5"> tagged it with this unique ID if you</font>

324
00:12:48,850 --> 00:12:52,680
keep an eye on<font color="#E5E5E5"> the value</font><font color="#CCCCCC"> of that UID</font>

325
00:12:50,650 --> 00:12:57,459
<font color="#E5E5E5">you'll see it pop</font><font color="#CCCCCC"> up here</font><font color="#E5E5E5"> again</font>

326
00:12:52,680 --> 00:12:59,380
momentarily<font color="#E5E5E5"> now this is where we</font>

327
00:12:57,460 --> 00:13:00,940
<font color="#CCCCCC">actually kind</font><font color="#E5E5E5"> of get into</font><font color="#CCCCCC"> the</font>

328
00:12:59,380 --> 00:13:02,439
interesting<font color="#E5E5E5"> bits of detecting</font>

329
00:13:00,940 --> 00:13:04,420
adversaries when we look at the<font color="#CCCCCC"> EXIF</font>

330
00:13:02,440 --> 00:13:05,860
tool metadata for this<font color="#E5E5E5"> document the</font>

331
00:13:04,420 --> 00:13:08,560
interesting so if you're<font color="#E5E5E5"> not familiar</font>

332
00:13:05,860 --> 00:13:11,350
with<font color="#CCCCCC"> XF tool it's a fairly</font><font color="#E5E5E5"> popular</font>

333
00:13:08,560 --> 00:13:13,540
utility to parse generic metadata out of

334
00:13:11,350 --> 00:13:17,500
a<font color="#E5E5E5"> variety of files hundreds of files</font>

335
00:13:13,540 --> 00:13:20,560
documents image files<font color="#E5E5E5"> archive files many</font>

336
00:13:17,500 --> 00:13:21,810
<font color="#E5E5E5">kinds what is interesting about this set</font>

337
00:13:20,560 --> 00:13:23,880
of metadata for this doc

338
00:13:21,810 --> 00:13:26,400
<font color="#CCCCCC">that is that there's nothing interesting</font>

339
00:13:23,880 --> 00:13:28,020
<font color="#E5E5E5">about it</font><font color="#CCCCCC"> you can see from the</font><font color="#E5E5E5"> word-count</font>

340
00:13:26,400 --> 00:13:29,699
<font color="#CCCCCC">that the document</font><font color="#E5E5E5"> appears to have a</font>

341
00:13:28,020 --> 00:13:31,590
reason<font color="#E5E5E5"> about reasonable amount of words</font>

342
00:13:29,700 --> 00:13:32,970
in it it's got a basically<font color="#E5E5E5"> a word</font>

343
00:13:31,590 --> 00:13:35,250
reasonable<font color="#CCCCCC"> amount of content</font><font color="#E5E5E5"> for a</font>

344
00:13:32,970 --> 00:13:37,440
resume<font color="#E5E5E5"> creator value contains Amanda's</font>

345
00:13:35,250 --> 00:13:38,790
name<font color="#E5E5E5"> which matches the resume content</font>

346
00:13:37,440 --> 00:13:41,250
you could<font color="#CCCCCC"> actually go back and</font><font color="#E5E5E5"> look at</font>

347
00:13:38,790 --> 00:13:42,839
<font color="#CCCCCC">Jon's tweet to confirm that so what's</font>

348
00:13:41,250 --> 00:13:44,760
interesting about this being

349
00:13:42,839 --> 00:13:47,430
uninteresting is that it<font color="#E5E5E5"> isn't uncommon</font>

350
00:13:44,760 --> 00:13:49,770
for adversaries to flub the values of

351
00:13:47,430 --> 00:13:50,849
<font color="#E5E5E5">this metadata</font><font color="#CCCCCC"> you know for example they</font>

352
00:13:49,770 --> 00:13:52,770
might<font color="#E5E5E5"> do something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> send you a</font>

353
00:13:50,850 --> 00:13:54,900
resume that<font color="#E5E5E5"> has five words in it which</font>

354
00:13:52,770 --> 00:13:56,520
<font color="#E5E5E5">is weird</font><font color="#CCCCCC"> or send you a resume that has a</font>

355
00:13:54,900 --> 00:13:58,439
creator value that is just a random

356
00:13:56,520 --> 00:14:01,050
<font color="#CCCCCC">string and not someone's name those are</font>

357
00:13:58,440 --> 00:14:03,900
<font color="#E5E5E5">interesting things that</font><font color="#CCCCCC"> you could</font><font color="#E5E5E5"> use as</font>

358
00:14:01,050 --> 00:14:04,949
a detection breadcrumbs<font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure out if</font>

359
00:14:03,900 --> 00:14:10,319
you're dealing<font color="#CCCCCC"> with something that might</font>

360
00:14:04,950 --> 00:14:12,779
<font color="#E5E5E5">be malicious so that's really all there</font>

361
00:14:10,320 --> 00:14:15,120
<font color="#CCCCCC">is to that this is going to</font><font color="#E5E5E5"> kind of come</font>

362
00:14:12,779 --> 00:14:17,490
<font color="#E5E5E5">into play</font><font color="#CCCCCC"> later what's interesting is</font>

363
00:14:15,120 --> 00:14:19,550
that they the adversary in this case<font color="#E5E5E5"> did</font>

364
00:14:17,490 --> 00:14:22,440
a pretty<font color="#E5E5E5"> good</font><font color="#CCCCCC"> job of trying to you know</font>

365
00:14:19,550 --> 00:14:24,120
obfuscate their their delivery of

366
00:14:22,440 --> 00:14:28,350
malware but<font color="#E5E5E5"> it ends up being</font><font color="#CCCCCC"> pretty</font>

367
00:14:24,120 --> 00:14:30,030
futile in the end<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last point here</font><font color="#CCCCCC"> is</font>

368
00:14:28,350 --> 00:14:31,770
that<font color="#E5E5E5"> these files they have the structure</font>

369
00:14:30,030 --> 00:14:33,990
of a zip so that means that when they

370
00:14:31,770 --> 00:14:36,089
<font color="#E5E5E5">are introduced to the</font><font color="#CCCCCC"> system they get</font>

371
00:14:33,990 --> 00:14:37,560
<font color="#E5E5E5">extracted as if they were a zip file</font><font color="#CCCCCC"> so</font>

372
00:14:36,089 --> 00:14:40,860
we just<font color="#E5E5E5"> take all</font><font color="#CCCCCC"> eighteen parts out of</font>

373
00:14:37,560 --> 00:14:42,030
<font color="#E5E5E5">the file and parse those out and that's</font>

374
00:14:40,860 --> 00:14:43,890
what<font color="#E5E5E5"> we're going to be</font><font color="#CCCCCC"> looking at here</font>

375
00:14:42,030 --> 00:14:45,750
<font color="#CCCCCC">next is one of those</font><font color="#E5E5E5"> eighteen files</font>

376
00:14:43,890 --> 00:14:48,750
I believe this document has<font color="#CCCCCC"> eighteen</font>

377
00:14:45,750 --> 00:14:51,480
parts in all so this is the this is<font color="#CCCCCC"> the</font>

378
00:14:48,750 --> 00:14:53,010
second file<font color="#CCCCCC"> two of</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> and the thing</font>

379
00:14:51,480 --> 00:14:54,900
to call out<font color="#E5E5E5"> here is the existence of</font>

380
00:14:53,010 --> 00:14:57,150
this<font color="#CCCCCC"> dictionary called</font><font color="#E5E5E5"> VBA metadata</font>

381
00:14:54,900 --> 00:14:58,740
that's<font color="#E5E5E5"> Visual Basic application metadata</font>

382
00:14:57,150 --> 00:15:01,140
that's<font color="#E5E5E5"> basically the thing in this</font>

383
00:14:58,740 --> 00:15:04,260
<font color="#E5E5E5">metadata tells you this document might</font>

384
00:15:01,140 --> 00:15:05,850
have macros in it macros being you know

385
00:15:04,260 --> 00:15:08,220
the thing<font color="#CCCCCC"> that is intended</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> help end</font>

386
00:15:05,850 --> 00:15:10,440
<font color="#E5E5E5">users by automating document related</font>

387
00:15:08,220 --> 00:15:12,270
tasks but is typically used by

388
00:15:10,440 --> 00:15:15,570
adversaries to automate the installation

389
00:15:12,270 --> 00:15:16,949
of malware so if you look at the flavors

390
00:15:15,570 --> 00:15:19,080
there's really nothing too<font color="#CCCCCC"> interesting</font>

391
00:15:16,950 --> 00:15:20,820
here this is identified as an oily

392
00:15:19,080 --> 00:15:22,230
compound file<font color="#E5E5E5"> what you</font><font color="#CCCCCC"> actually don't</font>

393
00:15:20,820 --> 00:15:24,660
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> know too much about it's just a</font>

394
00:15:22,230 --> 00:15:27,020
kind<font color="#CCCCCC"> of file that stores other files</font><font color="#E5E5E5"> and</font>

395
00:15:24,660 --> 00:15:29,730
<font color="#CCCCCC">in documents</font><font color="#E5E5E5"> it commonly stores macros</font>

396
00:15:27,020 --> 00:15:31,709
<font color="#E5E5E5">once again we hash all the files we</font>

397
00:15:29,730 --> 00:15:33,330
<font color="#E5E5E5">assign a unique ID to all the files in</font>

398
00:15:31,709 --> 00:15:35,079
this<font color="#CCCCCC"> case there's a new field</font><font color="#E5E5E5"> that's</font>

399
00:15:33,330 --> 00:15:36,910
<font color="#E5E5E5">called parent UID</font><font color="#CCCCCC"> it could</font>

400
00:15:35,080 --> 00:15:39,390
the value<font color="#E5E5E5"> of the UID from the previous</font>

401
00:15:36,910 --> 00:15:42,699
file<font color="#E5E5E5"> so this is how we very explicitly</font>

402
00:15:39,390 --> 00:15:44,170
<font color="#CCCCCC">relate files together</font><font color="#E5E5E5"> it's important if</font>

403
00:15:42,700 --> 00:15:46,000
you're<font color="#E5E5E5"> looking at this kind of</font><font color="#CCCCCC"> data to</font>

404
00:15:44,170 --> 00:15:49,209
<font color="#E5E5E5">be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to pivot between files that are</font>

405
00:15:46,000 --> 00:15:51,340
related<font color="#E5E5E5"> and finally the VBA metadata</font>

406
00:15:49,210 --> 00:15:52,930
actually doesn't say too much<font color="#E5E5E5"> that's</font>

407
00:15:51,340 --> 00:15:54,850
interesting except it confirms any

408
00:15:52,930 --> 00:15:57,640
suspicions we had that yes there was a

409
00:15:54,850 --> 00:15:58,840
macro code inside the<font color="#E5E5E5"> document</font><font color="#CCCCCC"> and we're</font>

410
00:15:57,640 --> 00:16:01,210
going<font color="#E5E5E5"> to be looking</font><font color="#CCCCCC"> at the actual code</font>

411
00:15:58,840 --> 00:16:03,820
of one of the macros here and the next

412
00:16:01,210 --> 00:16:05,620
<font color="#CCCCCC">slide the VBA scanner also</font><font color="#E5E5E5"> tries to be</font>

413
00:16:03,820 --> 00:16:08,950
helpful<font color="#E5E5E5"> and tell you about suspicious</font>

414
00:16:05,620 --> 00:16:10,990
<font color="#E5E5E5">things in the VBA code like base64</font>

415
00:16:08,950 --> 00:16:13,150
encoded content<font color="#E5E5E5"> we're going to look at</font>

416
00:16:10,990 --> 00:16:15,550
that<font color="#E5E5E5"> more</font><font color="#CCCCCC"> depth here in the next</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> so</font>

417
00:16:13,150 --> 00:16:17,530
this<font color="#CCCCCC"> is the third file</font><font color="#E5E5E5"> it's three of</font>

418
00:16:15,550 --> 00:16:19,750
<font color="#E5E5E5">three</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> the visual</font><font color="#CCCCCC"> basic code</font><font color="#E5E5E5"> from</font>

419
00:16:17,530 --> 00:16:22,270
<font color="#CCCCCC">one of the macros this isn't like nested</font>

420
00:16:19,750 --> 00:16:23,530
pretty deep<font color="#E5E5E5"> within the document</font><font color="#CCCCCC"> and</font>

421
00:16:22,270 --> 00:16:25,300
<font color="#E5E5E5">what's interesting is that nearly</font>

422
00:16:23,530 --> 00:16:27,280
<font color="#E5E5E5">everything that's detection worthy about</font>

423
00:16:25,300 --> 00:16:30,880
this entire<font color="#CCCCCC"> document all 30-plus parts</font>

424
00:16:27,280 --> 00:16:33,220
is can be found in one<font color="#E5E5E5"> field here which</font>

425
00:16:30,880 --> 00:16:35,830
is the VB metadata strings so<font color="#E5E5E5"> these are</font>

426
00:16:33,220 --> 00:16:38,200
<font color="#E5E5E5">literally strings defined in the in the</font>

427
00:16:35,830 --> 00:16:40,480
VB code as<font color="#CCCCCC"> like variable definitions</font>

428
00:16:38,200 --> 00:16:42,370
<font color="#E5E5E5">right like a equals blah that's the kind</font>

429
00:16:40,480 --> 00:16:43,930
<font color="#CCCCCC">of string we're talking about here we're</font>

430
00:16:42,370 --> 00:16:45,760
<font color="#E5E5E5">gonna spend pretty much the rest of the</font>

431
00:16:43,930 --> 00:16:46,870
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> on that in</font><font color="#E5E5E5"> particular</font>

432
00:16:45,760 --> 00:16:49,210
because there's just<font color="#CCCCCC"> so much to unpack</font>

433
00:16:46,870 --> 00:16:51,490
<font color="#E5E5E5">there if you look at the the flavors</font>

434
00:16:49,210 --> 00:16:54,280
<font color="#CCCCCC">yarra successfully identifies this as VB</font>

435
00:16:51,490 --> 00:16:57,130
code<font color="#E5E5E5"> let magic</font><font color="#CCCCCC"> has no idea what VB code</font>

436
00:16:54,280 --> 00:17:00,480
is so it just says it's plain text<font color="#E5E5E5"> which</font>

437
00:16:57,130 --> 00:17:03,520
<font color="#CCCCCC">is a correct though a</font><font color="#E5E5E5"> little inaccurate</font>

438
00:17:00,480 --> 00:17:04,870
<font color="#CCCCCC">I'll skip the hash metadata and UID</font><font color="#E5E5E5"> once</font>

439
00:17:03,520 --> 00:17:07,060
again you know we<font color="#E5E5E5"> hashed everything all</font>

440
00:17:04,869 --> 00:17:10,329
the time and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> how you relate</font>

441
00:17:07,060 --> 00:17:13,060
files together<font color="#E5E5E5"> but the VB strings is</font>

442
00:17:10,329 --> 00:17:14,889
really where things kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> pop off here</font>

443
00:17:13,060 --> 00:17:16,720
in this<font color="#E5E5E5"> document the first thing that's</font>

444
00:17:14,890 --> 00:17:19,240
<font color="#E5E5E5">interesting is this Python one-liner and</font>

445
00:17:16,720 --> 00:17:22,569
as I'm going<font color="#E5E5E5"> through this I want you</font><font color="#CCCCCC"> to</font>

446
00:17:19,240 --> 00:17:25,030
just recall like this is a resume<font color="#CCCCCC"> from</font>

447
00:17:22,569 --> 00:17:27,189
Amanda<font color="#CCCCCC"> why does</font><font color="#E5E5E5"> it have a macro</font><font color="#CCCCCC"> that</font>

448
00:17:25,030 --> 00:17:29,590
contains<font color="#E5E5E5"> you know a Python one-liner</font>

449
00:17:27,190 --> 00:17:31,390
that<font color="#E5E5E5"> is basic ste for decoding</font><font color="#CCCCCC"> a very</font>

450
00:17:29,590 --> 00:17:33,159
long string<font color="#E5E5E5"> in this case the string was</font>

451
00:17:31,390 --> 00:17:34,780
so long I had a<font color="#E5E5E5"> truncated for space</font>

452
00:17:33,160 --> 00:17:37,660
otherwise all<font color="#CCCCCC"> of this would have</font><font color="#E5E5E5"> been</font>

453
00:17:34,780 --> 00:17:39,550
illegible<font color="#CCCCCC"> there's also something</font><font color="#E5E5E5"> else</font>

454
00:17:37,660 --> 00:17:42,070
that's interesting<font color="#CCCCCC"> here which is that</font>

455
00:17:39,550 --> 00:17:43,629
they<font color="#E5E5E5"> explicitly call a function to</font>

456
00:17:42,070 --> 00:17:45,520
filter out and<font color="#CCCCCC"> ignore any</font><font color="#E5E5E5"> warnings</font>

457
00:17:43,630 --> 00:17:47,080
thrown by the Python<font color="#CCCCCC"> interpreter</font><font color="#E5E5E5"> I'll</font>

458
00:17:45,520 --> 00:17:48,170
kind of leave you to<font color="#E5E5E5"> think about that</font>

459
00:17:47,080 --> 00:17:49,850
<font color="#E5E5E5">for a minute</font><font color="#CCCCCC"> we'll</font>

460
00:17:48,170 --> 00:17:51,980
we'll come back<font color="#CCCCCC"> to that at the end</font><font color="#E5E5E5"> here</font>

461
00:17:49,850 --> 00:17:53,600
why they may want<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> that so that's</font>

462
00:17:51,980 --> 00:17:55,190
weird<font color="#E5E5E5"> that that exists at all</font><font color="#CCCCCC"> on</font>

463
00:17:53,600 --> 00:17:57,500
someone's resume<font color="#CCCCCC"> but then it</font><font color="#E5E5E5"> gets even</font>

464
00:17:55,190 --> 00:17:58,970
<font color="#E5E5E5">weirder when you see this reference at</font>

465
00:17:57,500 --> 00:18:01,670
the<font color="#CCCCCC"> end of the first highlighted line</font>

466
00:17:58,970 --> 00:18:03,710
here<font color="#E5E5E5"> to a watch agents directory and a</font>

467
00:18:01,670 --> 00:18:06,200
<font color="#CCCCCC">Spotify</font><font color="#E5E5E5"> browser API property list file</font>

468
00:18:03,710 --> 00:18:07,310
<font color="#CCCCCC">so this is really</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> first indicator</font>

469
00:18:06,200 --> 00:18:09,320
that you're looking at something<font color="#E5E5E5"> that's</font>

470
00:18:07,310 --> 00:18:12,020
targeting a Mac user<font color="#E5E5E5"> and not a Windows</font>

471
00:18:09,320 --> 00:18:13,879
user<font color="#CCCCCC"> if you're not familiar with launch</font>

472
00:18:12,020 --> 00:18:16,720
agents or property lists<font color="#E5E5E5"> they're used to</font>

473
00:18:13,880 --> 00:18:19,940
<font color="#E5E5E5">control system level processes on a Mac</font>

474
00:18:16,720 --> 00:18:22,120
<font color="#E5E5E5">what's even more interesting is</font><font color="#CCCCCC"> that not</font>

475
00:18:19,940 --> 00:18:24,770
only do they reference the file<font color="#E5E5E5"> they</font>

476
00:18:22,120 --> 00:18:26,600
they actually<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> actual structure</font>

477
00:18:24,770 --> 00:18:28,129
of<font color="#CCCCCC"> a</font><font color="#E5E5E5"> property list file that follows it</font>

478
00:18:26,600 --> 00:18:30,889
so you can see on the second line here

479
00:18:28,130 --> 00:18:32,690
there's the header of a<font color="#CCCCCC"> plist file</font><font color="#E5E5E5"> at</font>

480
00:18:30,890 --> 00:18:35,600
the end of the third line<font color="#CCCCCC"> there is a</font>

481
00:18:32,690 --> 00:18:38,330
<font color="#E5E5E5">label that gets set that says</font><font color="#CCCCCC"> Spotify</font>

482
00:18:35,600 --> 00:18:40,520
<font color="#E5E5E5">browser API which is clever so there</font>

483
00:18:38,330 --> 00:18:42,290
they seem<font color="#E5E5E5"> to seem to be from me from</font>

484
00:18:40,520 --> 00:18:43,670
what I can<font color="#E5E5E5"> tell I mean I'm not</font><font color="#CCCCCC"> doing</font>

485
00:18:42,290 --> 00:18:46,010
forensics here I'm just<font color="#E5E5E5"> looking at</font>

486
00:18:43,670 --> 00:18:47,570
metadata so we're making<font color="#CCCCCC"> some guesses</font><font color="#E5E5E5"> it</font>

487
00:18:46,010 --> 00:18:50,450
appears what it's<font color="#E5E5E5"> probably happening is</font>

488
00:18:47,570 --> 00:18:51,830
that they are inserting the content into

489
00:18:50,450 --> 00:18:53,780
that file location<font color="#E5E5E5"> right so they're</font>

490
00:18:51,830 --> 00:18:57,560
either creating or over writing<font color="#E5E5E5"> that</font>

491
00:18:53,780 --> 00:18:59,360
Spotify browser<font color="#E5E5E5"> API</font><font color="#CCCCCC"> plist</font><font color="#E5E5E5"> but it goes</font>

492
00:18:57,560 --> 00:19:02,270
even further<font color="#E5E5E5"> because they</font><font color="#CCCCCC"> actually</font>

493
00:18:59,360 --> 00:19:03,800
define<font color="#E5E5E5"> you know this is all non encoded</font>

494
00:19:02,270 --> 00:19:06,110
data<font color="#CCCCCC"> this is just plain text</font><font color="#E5E5E5"> in the VB</font>

495
00:19:03,800 --> 00:19:08,750
code<font color="#E5E5E5"> they go even further and</font><font color="#CCCCCC"> they say</font>

496
00:19:06,110 --> 00:19:10,310
they define<font color="#E5E5E5"> what program is executed by</font>

497
00:19:08,750 --> 00:19:13,760
the<font color="#CCCCCC"> plist</font><font color="#E5E5E5"> and what they have here is</font>

498
00:19:10,310 --> 00:19:16,460
they have an array<font color="#CCCCCC"> that says Python taxi</font>

499
00:19:13,760 --> 00:19:18,440
<font color="#E5E5E5">and then a blank string space and so</font><font color="#CCCCCC"> we</font>

500
00:19:16,460 --> 00:19:20,360
can't prove what is included<font color="#E5E5E5"> what would</font>

501
00:19:18,440 --> 00:19:23,270
<font color="#E5E5E5">Python is actually executing here right</font>

502
00:19:20,360 --> 00:19:24,740
<font color="#E5E5E5">but a pretty good theory is that it's</font>

503
00:19:23,270 --> 00:19:25,310
the<font color="#CCCCCC"> one-liner we saw earlier</font><font color="#E5E5E5"> in the</font>

504
00:19:24,740 --> 00:19:27,680
<font color="#E5E5E5">video</font>

505
00:19:25,310 --> 00:19:29,659
<font color="#CCCCCC">right they</font><font color="#E5E5E5"> could assign that they could</font>

506
00:19:27,680 --> 00:19:32,420
<font color="#E5E5E5">insert that into the</font><font color="#CCCCCC"> plist</font><font color="#E5E5E5"> via a</font>

507
00:19:29,660 --> 00:19:34,220
variable definition<font color="#CCCCCC"> which is very</font><font color="#E5E5E5"> likely</font>

508
00:19:32,420 --> 00:19:36,380
what's happening here<font color="#CCCCCC"> and so if we're</font>

509
00:19:34,220 --> 00:19:38,540
right what that means is it<font color="#CCCCCC"> means that</font>

510
00:19:36,380 --> 00:19:40,190
<font color="#E5E5E5">when the plist initializes and runs on</font>

511
00:19:38,540 --> 00:19:42,860
<font color="#E5E5E5">the system it's actually executing</font>

512
00:19:40,190 --> 00:19:44,150
whatever that<font color="#E5E5E5"> Python blob is so we can</font>

513
00:19:42,860 --> 00:19:46,610
<font color="#E5E5E5">actually go even further</font>

514
00:19:44,150 --> 00:19:48,800
it really gets crazier the<font color="#CCCCCC"> plist</font>

515
00:19:46,610 --> 00:19:51,310
attributes<font color="#CCCCCC"> that there are attributes</font>

516
00:19:48,800 --> 00:19:53,450
<font color="#E5E5E5">that that really</font><font color="#CCCCCC"> kind of clue you into</font>

517
00:19:51,310 --> 00:19:55,220
adversarial intent<font color="#E5E5E5"> and how they're</font>

518
00:19:53,450 --> 00:19:57,920
attempting<font color="#E5E5E5"> to maintain control</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> the</font>

519
00:19:55,220 --> 00:20:00,130
system here the run at load key means

520
00:19:57,920 --> 00:20:01,549
run the program when the system boots

521
00:20:00,130 --> 00:20:03,710
<font color="#CCCCCC">the start in</font>

522
00:20:01,549 --> 00:20:04,999
and keep<font color="#CCCCCC"> alive keys our methods of</font>

523
00:20:03,710 --> 00:20:06,649
<font color="#CCCCCC">ensuring that the program is</font><font color="#E5E5E5"> always</font>

524
00:20:04,999 --> 00:20:09,200
running<font color="#CCCCCC"> so these are methods of</font>

525
00:20:06,649 --> 00:20:11,119
persistence<font color="#E5E5E5"> for processes that are</font>

526
00:20:09,200 --> 00:20:13,730
controlled by<font color="#E5E5E5"> a property list file this</font>

527
00:20:11,119 --> 00:20:17,360
guarantees that that<font color="#E5E5E5"> that Python</font>

528
00:20:13,730 --> 00:20:20,179
one-liner is always running<font color="#CCCCCC"> the last</font>

529
00:20:17,360 --> 00:20:21,649
thing here is this curl command<font color="#E5E5E5"> and</font>

530
00:20:20,179 --> 00:20:24,470
there's a lot<font color="#E5E5E5"> to unpack just even in</font>

531
00:20:21,649 --> 00:20:25,518
<font color="#E5E5E5">this one bit of the VB code but and this</font>

532
00:20:24,470 --> 00:20:27,139
curl command they do some interesting

533
00:20:25,519 --> 00:20:29,899
<font color="#CCCCCC">things so the first thing they do</font><font color="#E5E5E5"> is</font>

534
00:20:27,139 --> 00:20:31,998
<font color="#CCCCCC">they override</font><font color="#E5E5E5"> curls default user agent</font>

535
00:20:29,899 --> 00:20:34,100
string and they set it<font color="#CCCCCC"> to mimic a Mac</font>

536
00:20:31,999 --> 00:20:36,259
which is<font color="#E5E5E5"> pretty clever so that's the</font>

537
00:20:34,100 --> 00:20:37,580
that's<font color="#CCCCCC"> the first indicator</font><font color="#E5E5E5"> like if you</font>

538
00:20:36,259 --> 00:20:39,679
<font color="#E5E5E5">don't know anything</font><font color="#CCCCCC"> about launch agents</font>

539
00:20:37,580 --> 00:20:41,269
or<font color="#CCCCCC"> pee lists or how the Mac OS works</font>

540
00:20:39,679 --> 00:20:43,899
<font color="#CCCCCC">that's your thing that tells you like</font>

541
00:20:41,269 --> 00:20:47,299
<font color="#E5E5E5">this is certainly</font><font color="#CCCCCC"> targeting a Mac user</font>

542
00:20:43,899 --> 00:20:48,619
but they go<font color="#CCCCCC"> in further and they they</font>

543
00:20:47,299 --> 00:20:50,749
actually<font color="#E5E5E5"> suppress the output</font><font color="#CCCCCC"> of curl</font>

544
00:20:48,619 --> 00:20:52,279
<font color="#E5E5E5">which is a fun callback to the technique</font>

545
00:20:50,749 --> 00:20:55,639
they use in the<font color="#E5E5E5"> Python one-liner to</font>

546
00:20:52,279 --> 00:20:58,100
suppress warnings<font color="#E5E5E5"> so</font><font color="#CCCCCC"> python and curl</font>

547
00:20:55,639 --> 00:21:00,229
have these utility like portions built

548
00:20:58,100 --> 00:21:01,789
<font color="#E5E5E5">into their code to to suppress output</font>

549
00:21:00,230 --> 00:21:03,230
essentially right and that's an

550
00:21:01,789 --> 00:21:04,580
<font color="#E5E5E5">advantage for the adversary because it</font>

551
00:21:03,230 --> 00:21:06,440
means when they execute<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you're</font>

552
00:21:04,580 --> 00:21:09,769
invite<font color="#E5E5E5"> or code in your environment</font><font color="#CCCCCC"> that</font>

553
00:21:06,440 --> 00:21:10,669
you're less<font color="#CCCCCC"> likely they see them the</font>

554
00:21:09,769 --> 00:21:13,279
<font color="#E5E5E5">only two things that</font><font color="#CCCCCC"> are interesting</font>

555
00:21:10,669 --> 00:21:16,940
<font color="#CCCCCC">about</font><font color="#E5E5E5"> this are the domain that's used so</font>

556
00:21:13,279 --> 00:21:18,679
a very attentive analyst<font color="#E5E5E5"> or say a domain</font>

557
00:21:16,940 --> 00:21:20,570
reputation service that is keyed<font color="#CCCCCC"> into</font>

558
00:21:18,679 --> 00:21:21,859
that<font color="#E5E5E5"> domain would eventually be able to</font>

559
00:21:20,570 --> 00:21:24,950
<font color="#E5E5E5">tell you that it</font><font color="#CCCCCC"> is not a legitimate</font>

560
00:21:21,859 --> 00:21:27,710
<font color="#CCCCCC">Spotify domain</font><font color="#E5E5E5"> and then finally they're</font>

561
00:21:24,950 --> 00:21:29,989
not downloading data from<font color="#E5E5E5"> this domain</font>

562
00:21:27,710 --> 00:21:33,409
they're uploading data to it so the tech

563
00:21:29,989 --> 00:21:34,879
D flag says that<font color="#E5E5E5"> so once again we're not</font>

564
00:21:33,409 --> 00:21:36,739
doing forensics we're just looking<font color="#E5E5E5"> at</font>

565
00:21:34,879 --> 00:21:38,629
metadata so I can't authoritative<font color="#CCCCCC"> lis</font>

566
00:21:36,739 --> 00:21:40,489
tell you what they're uploading<font color="#CCCCCC"> but</font>

567
00:21:38,629 --> 00:21:43,039
what's<font color="#E5E5E5"> suspicious is that immediately</font>

568
00:21:40,489 --> 00:21:45,499
<font color="#CCCCCC">after that</font><font color="#E5E5E5"> there's a definition first or</font>

569
00:21:43,039 --> 00:21:47,480
a variable<font color="#E5E5E5"> assignment</font><font color="#CCCCCC"> for a shell</font>

570
00:21:45,499 --> 00:21:50,509
<font color="#E5E5E5">command substitution which contains the</font>

571
00:21:47,480 --> 00:21:51,830
system's hostname<font color="#E5E5E5"> and current user which</font>

572
00:21:50,509 --> 00:21:54,230
if you<font color="#E5E5E5"> think about it makes a lot of</font>

573
00:21:51,830 --> 00:21:55,789
sense<font color="#CCCCCC"> because when an adversary gains</font>

574
00:21:54,230 --> 00:21:57,350
access<font color="#CCCCCC"> to your network what kinds of</font>

575
00:21:55,789 --> 00:21:58,730
things<font color="#E5E5E5"> do they need to know they</font><font color="#CCCCCC"> need to</font>

576
00:21:57,350 --> 00:22:00,379
know where they<font color="#E5E5E5"> landed in the network</font>

577
00:21:58,730 --> 00:22:02,029
<font color="#E5E5E5">which you could glean from</font><font color="#CCCCCC"> a hostname</font>

578
00:22:00,379 --> 00:22:03,619
<font color="#E5E5E5">and they need to know what level of</font>

579
00:22:02,029 --> 00:22:05,720
<font color="#E5E5E5">access</font><font color="#CCCCCC"> they have to the network</font><font color="#E5E5E5"> which</font>

580
00:22:03,619 --> 00:22:07,549
you could glean from<font color="#E5E5E5"> you know the</font>

581
00:22:05,720 --> 00:22:12,350
current user that<font color="#E5E5E5"> is running on the</font>

582
00:22:07,549 --> 00:22:13,700
system<font color="#CCCCCC"> you've you've just popped now if</font>

583
00:22:12,350 --> 00:22:15,449
you're if you're<font color="#CCCCCC"> not familiar with</font>

584
00:22:13,700 --> 00:22:16,500
<font color="#CCCCCC">mightor's attack matrix</font><font color="#E5E5E5"> which</font>

585
00:22:15,450 --> 00:22:18,030
it's actually been mentioned a lot

586
00:22:16,500 --> 00:22:20,040
during<font color="#E5E5E5"> this conference so maybe you are</font>

587
00:22:18,030 --> 00:22:22,020
now<font color="#E5E5E5"> what I've done is I've mapped the</font>

588
00:22:20,040 --> 00:22:24,570
techniques I<font color="#CCCCCC"> just walked through to to</font>

589
00:22:22,020 --> 00:22:26,129
the attack<font color="#E5E5E5"> matrix the tactics on</font><font color="#CCCCCC"> the</font>

590
00:22:24,570 --> 00:22:29,939
right the techniques I just<font color="#CCCCCC"> walked</font>

591
00:22:26,130 --> 00:22:30,960
through on the left<font color="#E5E5E5"> and I think so</font><font color="#CCCCCC"> one</font>

592
00:22:29,940 --> 00:22:31,920
<font color="#E5E5E5">thing I want to stress about all these</font>

593
00:22:30,960 --> 00:22:33,030
techniques I'm not going to read them

594
00:22:31,920 --> 00:22:34,980
<font color="#CCCCCC">because we just</font><font color="#E5E5E5"> literally went</font><font color="#CCCCCC"> through</font>

595
00:22:33,030 --> 00:22:37,350
them<font color="#E5E5E5"> but you know these individual</font>

596
00:22:34,980 --> 00:22:39,660
individual II may not be detection

597
00:22:37,350 --> 00:22:41,459
worthy<font color="#E5E5E5"> on their own but in aggregate</font>

598
00:22:39,660 --> 00:22:43,590
<font color="#CCCCCC">they create what I think is a</font><font color="#E5E5E5"> pretty</font>

599
00:22:41,460 --> 00:22:45,960
compelling<font color="#CCCCCC"> argument for a file analysis</font>

600
00:22:43,590 --> 00:22:48,689
system like<font color="#CCCCCC"> Strelka and its use in</font>

601
00:22:45,960 --> 00:22:51,030
detecting adversaries<font color="#E5E5E5"> so remember this</font>

602
00:22:48,690 --> 00:22:53,790
document had a low antivirus detection

603
00:22:51,030 --> 00:22:55,710
rate malware sandboxes are<font color="#E5E5E5"> not designed</font>

604
00:22:53,790 --> 00:22:58,649
to collect<font color="#E5E5E5"> this kind of</font><font color="#CCCCCC"> data and make</font><font color="#E5E5E5"> it</font>

605
00:22:55,710 --> 00:23:00,180
easily available at large scale and in

606
00:22:58,650 --> 00:23:02,190
addition<font color="#CCCCCC"> to</font><font color="#E5E5E5"> all of that adversaries</font>

607
00:23:00,180 --> 00:23:03,900
don't really expect<font color="#E5E5E5"> you to have this</font>

608
00:23:02,190 --> 00:23:05,400
level<font color="#E5E5E5"> of insight into the files that are</font>

609
00:23:03,900 --> 00:23:07,860
moving<font color="#E5E5E5"> in out and around your network</font>

610
00:23:05,400 --> 00:23:09,240
<font color="#E5E5E5">because if they did this adversary</font>

611
00:23:07,860 --> 00:23:14,219
probably wouldn't have<font color="#E5E5E5"> left all</font><font color="#CCCCCC"> that</font>

612
00:23:09,240 --> 00:23:17,610
data<font color="#CCCCCC"> uncoated</font><font color="#E5E5E5"> unencoded so that's kind</font>

613
00:23:14,220 --> 00:23:19,320
of where I'll wrap<font color="#CCCCCC"> it up once again</font><font color="#E5E5E5"> what</font>

614
00:23:17,610 --> 00:23:21,179
I'd<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to say about this is</font><font color="#E5E5E5"> that if</font>

615
00:23:19,320 --> 00:23:22,260
any<font color="#E5E5E5"> of it</font><font color="#CCCCCC"> Peaks</font><font color="#E5E5E5"> your interests I'd be</font>

616
00:23:21,180 --> 00:23:24,120
happy to chat<font color="#E5E5E5"> with you about this</font>

617
00:23:22,260 --> 00:23:25,980
<font color="#CCCCCC">project or point you in the direction of</font>

618
00:23:24,120 --> 00:23:27,540
project owners for any of the other

619
00:23:25,980 --> 00:23:29,220
<font color="#E5E5E5">projects that were shared</font><font color="#CCCCCC"> earlier I</font>

620
00:23:27,540 --> 00:23:31,379
think<font color="#CCCCCC"> if you're interested in maturing</font>

621
00:23:29,220 --> 00:23:32,790
your<font color="#E5E5E5"> threat detection program I'd</font>

622
00:23:31,380 --> 00:23:34,590
recommend<font color="#E5E5E5"> you take a look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> kind</font>

623
00:23:32,790 --> 00:23:36,510
of file analysis because it opens up

624
00:23:34,590 --> 00:23:39,060
levels of insight that<font color="#E5E5E5"> adversaries</font>

625
00:23:36,510 --> 00:23:40,680
really don't<font color="#E5E5E5"> expect you to have and</font><font color="#CCCCCC"> that</font>

626
00:23:39,060 --> 00:23:43,050
gives you a<font color="#E5E5E5"> pretty big advantage</font><font color="#CCCCCC"> when</font>

627
00:23:40,680 --> 00:23:47,310
<font color="#E5E5E5">they try to jump into your network</font>

628
00:23:43,050 --> 00:23:51,540
I consider this<font color="#E5E5E5"> kind of data to be</font><font color="#CCCCCC"> fifth</font>

629
00:23:47,310 --> 00:23:53,250
<font color="#E5E5E5">tentpole in the in the commonly thought</font>

630
00:23:51,540 --> 00:23:56,610
of<font color="#CCCCCC"> tentpoles of</font><font color="#E5E5E5"> threatened tection being</font>

631
00:23:53,250 --> 00:23:57,660
<font color="#CCCCCC">network data</font><font color="#E5E5E5"> endpoint data cloud data</font>

632
00:23:56,610 --> 00:23:59,969
authentication data

633
00:23:57,660 --> 00:24:02,580
<font color="#CCCCCC">I think file data like this</font><font color="#E5E5E5"> could easily</font>

634
00:23:59,970 --> 00:24:04,980
<font color="#E5E5E5">become a significant</font><font color="#CCCCCC"> part of</font><font color="#E5E5E5"> a threat</font>

635
00:24:02,580 --> 00:24:06,780
detection program that's<font color="#E5E5E5"> really where</font>

636
00:24:04,980 --> 00:24:09,660
I'll leave<font color="#E5E5E5"> it to</font><font color="#CCCCCC"> any questions</font><font color="#E5E5E5"> that came</font>

637
00:24:06,780 --> 00:24:13,110
<font color="#CCCCCC">in online or or in the room we have a</font>

638
00:24:09,660 --> 00:24:17,190
question<font color="#E5E5E5"> from Ron you stated six out of</font>

639
00:24:13,110 --> 00:24:21,120
<font color="#CCCCCC">fifty-nine</font><font color="#E5E5E5"> AV engines marked the files</font>

640
00:24:17,190 --> 00:24:22,950
as malicious<font color="#E5E5E5"> which AV engines were those</font>

641
00:24:21,120 --> 00:24:24,780
yeah that's an interesting<font color="#CCCCCC"> question I</font>

642
00:24:22,950 --> 00:24:28,830
actually<font color="#E5E5E5"> happened to look that up right</font>

643
00:24:24,780 --> 00:24:29,290
<font color="#E5E5E5">before this talk and it wasn't any</font>

644
00:24:28,830 --> 00:24:31,710
engine

645
00:24:29,290 --> 00:24:36,190
you would you're probably running<font color="#E5E5E5"> it's</font>

646
00:24:31,710 --> 00:24:37,420
it's stuff like<font color="#CCCCCC"> Sentinel</font><font color="#E5E5E5"> one not to call</font>

647
00:24:36,190 --> 00:24:40,420
out vendors or anything<font color="#E5E5E5"> like that I'm</font>

648
00:24:37,420 --> 00:24:42,190
not<font color="#CCCCCC"> recommending vendors here</font><font color="#E5E5E5"> but it was</font>

649
00:24:40,420 --> 00:24:43,930
it was vendors that<font color="#CCCCCC"> are more geared</font>

650
00:24:42,190 --> 00:24:47,230
toward<font color="#E5E5E5"> behavioral analysis and not</font>

651
00:24:43,930 --> 00:24:54,610
signature analysis<font color="#E5E5E5"> none</font><font color="#CCCCCC"> of your top</font><font color="#E5E5E5"> five</font>

652
00:24:47,230 --> 00:24:56,710
AV vendors detected this<font color="#CCCCCC"> great work as</font>

653
00:24:54,610 --> 00:24:59,590
<font color="#E5E5E5">someone who does file detection I had a</font>

654
00:24:56,710 --> 00:25:02,850
couple<font color="#E5E5E5"> of follow-up</font><font color="#CCCCCC"> questions do you</font>

655
00:24:59,590 --> 00:25:05,169
<font color="#E5E5E5">guys have this struck handle packed</font>

656
00:25:02,850 --> 00:25:09,040
<font color="#E5E5E5">extraction of features from packed files</font>

657
00:25:05,170 --> 00:25:10,450
<font color="#CCCCCC">or office kated file samples well so</font>

658
00:25:09,040 --> 00:25:12,070
<font color="#E5E5E5">what's interesting about it</font><font color="#CCCCCC"> I don't</font>

659
00:25:10,450 --> 00:25:15,910
think<font color="#E5E5E5"> I don't know</font><font color="#CCCCCC"> that it does out of</font>

660
00:25:12,070 --> 00:25:20,860
<font color="#CCCCCC">the</font><font color="#E5E5E5"> box so we have support</font><font color="#CCCCCC"> for we jump</font>

661
00:25:15,910 --> 00:25:22,870
back<font color="#E5E5E5"> here so so the these are the five</font>

662
00:25:20,860 --> 00:25:24,490
main categories we support but it's all

663
00:25:22,870 --> 00:25:27,489
<font color="#CCCCCC">just Python code so you could</font><font color="#E5E5E5"> very</font>

664
00:25:24,490 --> 00:25:28,960
easily write your own<font color="#CCCCCC"> scanning code to</font>

665
00:25:27,490 --> 00:25:31,180
handle<font color="#E5E5E5"> whatever kind of file you like</font>

666
00:25:28,960 --> 00:25:33,040
<font color="#E5E5E5">and then the way it works is you write a</font>

667
00:25:31,180 --> 00:25:38,200
<font color="#E5E5E5">complimentary</font><font color="#CCCCCC"> yarra signature to</font>

668
00:25:33,040 --> 00:25:39,909
identify the file generically okay so

669
00:25:38,200 --> 00:25:42,340
this is<font color="#E5E5E5"> plug-in friendly and you could</font>

670
00:25:39,910 --> 00:25:44,410
add<font color="#CCCCCC"> your own</font><font color="#E5E5E5"> text</font><font color="#CCCCCC"> overlay Cabos does</font>

671
00:25:42,340 --> 00:25:45,760
absolutely<font color="#CCCCCC"> yeah it's big it's designed</font>

672
00:25:44,410 --> 00:25:49,480
to be very<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to add your own code to</font>

673
00:25:45,760 --> 00:25:51,120
<font color="#CCCCCC">it and when you scan they use in the</font>

674
00:25:49,480 --> 00:25:54,580
sample you<font color="#E5E5E5"> scanned 18 levels of</font>

675
00:25:51,120 --> 00:25:56,679
associated files<font color="#E5E5E5"> what's the limit</font><font color="#CCCCCC"> do you</font>

676
00:25:54,580 --> 00:25:59,199
guys have you had a zip bomb or anything

677
00:25:56,680 --> 00:26:00,820
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> boom like that yeah yeah</font>

678
00:25:59,200 --> 00:26:02,350
there's there's<font color="#E5E5E5"> yeah so there's a lot</font><font color="#CCCCCC"> of</font>

679
00:26:00,820 --> 00:26:03,820
nuance built into this<font color="#E5E5E5"> that I really</font>

680
00:26:02,350 --> 00:26:06,219
don't have<font color="#E5E5E5"> time to go through but yes</font>

681
00:26:03,820 --> 00:26:10,300
zip bombs are our threat to systems like

682
00:26:06,220 --> 00:26:12,400
<font color="#E5E5E5">this so all of the all of the scanners</font>

683
00:26:10,300 --> 00:26:15,310
<font color="#CCCCCC">that extract files they do have file</font>

684
00:26:12,400 --> 00:26:17,950
limits<font color="#E5E5E5"> the default limit is very high</font>

685
00:26:15,310 --> 00:26:20,620
<font color="#E5E5E5">like a thousand files things like that</font>

686
00:26:17,950 --> 00:26:22,330
in the case of<font color="#CCCCCC"> a zip bomb you're more</font>

687
00:26:20,620 --> 00:26:25,239
likely<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> out of memory before you</font>

688
00:26:22,330 --> 00:26:28,050
actually<font color="#E5E5E5"> hit that file in it so yeah you</font>

689
00:26:25,240 --> 00:26:30,700
do need to<font color="#E5E5E5"> just you</font><font color="#CCCCCC"> know do like</font><font color="#E5E5E5"> a</font>

690
00:26:28,050 --> 00:26:32,919
system like system hygiene system

691
00:26:30,700 --> 00:26:35,230
hardening<font color="#E5E5E5"> to to protect yourself against</font>

692
00:26:32,920 --> 00:26:38,830
files that might<font color="#E5E5E5"> be actively trying to</font>

693
00:26:35,230 --> 00:26:41,160
to mess<font color="#CCCCCC"> with systems like this yeah</font>

694
00:26:38,830 --> 00:26:41,159
<font color="#E5E5E5">thanks</font>

695
00:26:42,250 --> 00:26:46,350
first thanks for<font color="#E5E5E5"> the presentation</font>

696
00:26:43,360 --> 00:26:48,850
awesome stuff<font color="#CCCCCC"> a couple questions about</font>

697
00:26:46,350 --> 00:26:51,790
what the project supports that's<font color="#E5E5E5"> okay</font>

698
00:26:48,850 --> 00:26:53,980
<font color="#E5E5E5">yep so when you're doing VBA extraction</font>

699
00:26:51,790 --> 00:26:55,840
are you<font color="#E5E5E5"> relying on external libraries</font>

700
00:26:53,980 --> 00:26:58,540
like<font color="#CCCCCC"> oh le tools are you yeah something</font>

701
00:26:55,840 --> 00:27:00,459
custom<font color="#CCCCCC"> Oh le tools so so the so one</font>

702
00:26:58,540 --> 00:27:03,100
thing I didn't<font color="#E5E5E5"> really talk about is this</font>

703
00:27:00,460 --> 00:27:04,450
<font color="#E5E5E5">project</font><font color="#CCCCCC"> is all pretty</font><font color="#E5E5E5"> much my work</font><font color="#CCCCCC"> so we</font>

704
00:27:03,100 --> 00:27:06,550
<font color="#E5E5E5">don't have a team supporting this it's</font>

705
00:27:04,450 --> 00:27:09,130
<font color="#CCCCCC">just what I do and my equivalent</font><font color="#E5E5E5"> of like</font>

706
00:27:06,550 --> 00:27:11,560
<font color="#CCCCCC">10%</font><font color="#E5E5E5"> time so it's heavily reliant on</font>

707
00:27:09,130 --> 00:27:13,960
<font color="#CCCCCC">third-party packages cool and this kind</font>

708
00:27:11,560 --> 00:27:19,030
<font color="#E5E5E5">of bleeds into the previous question</font><font color="#CCCCCC"> how</font>

709
00:27:13,960 --> 00:27:20,680
<font color="#E5E5E5">difficult would it be to expand analysis</font>

710
00:27:19,030 --> 00:27:22,660
like<font color="#E5E5E5"> pipeline so if I wanted</font><font color="#CCCCCC"> to treat</font>

711
00:27:20,680 --> 00:27:24,520
the<font color="#CCCCCC"> oo XML file is like a straight zip</font>

712
00:27:22,660 --> 00:27:26,590
<font color="#E5E5E5">yeah look at timestamps within the file</font>

713
00:27:24,520 --> 00:27:28,150
is that<font color="#E5E5E5"> something yeah it's</font><font color="#CCCCCC"> very easy I</font>

714
00:27:26,590 --> 00:27:30,399
<font color="#E5E5E5">mean as long as you have written code</font>

715
00:27:28,150 --> 00:27:32,500
and Python before<font color="#E5E5E5"> it's it's all very</font>

716
00:27:30,400 --> 00:27:34,240
easy to<font color="#E5E5E5"> do the readme is absurdly long</font>

717
00:27:32,500 --> 00:27:37,300
and very detailed<font color="#CCCCCC"> to help you with that</font>

718
00:27:34,240 --> 00:27:42,310
<font color="#E5E5E5">cool and have you looked at</font><font color="#CCCCCC"> RS IDs</font><font color="#E5E5E5"> in</font>

719
00:27:37,300 --> 00:27:45,000
RTF<font color="#CCCCCC"> soro xml files not specifically cool</font>

720
00:27:42,310 --> 00:27:48,760
thank you yep

721
00:27:45,000 --> 00:27:51,850
one last question<font color="#E5E5E5"> do we have</font><font color="#CCCCCC"> anyone yes</font>

722
00:27:48,760 --> 00:27:54,660
we do in the far back<font color="#CCCCCC"> way up near the</font>

723
00:27:51,850 --> 00:27:54,659
top<font color="#CCCCCC"> of Mount Everest</font>

724
00:28:00,720 --> 00:28:05,710
so I kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> tricked you it's actually</font>

725
00:28:03,100 --> 00:28:06,790
<font color="#E5E5E5">statement not a question first of all</font>

726
00:28:05,710 --> 00:28:08,680
thanks<font color="#CCCCCC"> for your talk thanks for</font>

727
00:28:06,790 --> 00:28:11,620
contribution and this is being<font color="#E5E5E5"> recorded</font>

728
00:28:08,680 --> 00:28:16,990
<font color="#E5E5E5">right your boss should totally give you</font>

729
00:28:11,620 --> 00:28:19,209
a raise<font color="#E5E5E5"> well then thank you Thank You</font>

730
00:28:16,990 --> 00:28:21,420
Josh it's been a pleasure<font color="#CCCCCC"> thanks thanks</font>

731
00:28:19,210 --> 00:28:21,420
everyone

