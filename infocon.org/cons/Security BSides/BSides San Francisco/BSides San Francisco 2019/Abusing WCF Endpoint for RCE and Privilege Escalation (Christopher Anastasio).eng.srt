1
00:00:00,000 --> 00:00:03,870
hello everybody welcome<font color="#CCCCCC"> to</font><font color="#E5E5E5"> b-sides this</font>

2
00:00:02,310 --> 00:00:07,020
morning<font color="#CCCCCC"> I hope you're having a great</font>

3
00:00:03,870 --> 00:00:11,820
<font color="#CCCCCC">time we're gonna</font><font color="#E5E5E5"> hear from</font><font color="#CCCCCC"> Chris this</font>

4
00:00:07,020 --> 00:00:13,309
<font color="#E5E5E5">morning</font><font color="#CCCCCC"> on abusing</font><font color="#E5E5E5"> WCF endpoint 4rce and</font>

5
00:00:11,820 --> 00:00:19,260
privilege escalation

6
00:00:13,309 --> 00:00:21,509
take it away Chris<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> guys thanks</font>

7
00:00:19,260 --> 00:00:23,699
for<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> to my talk yeah we</font><font color="#E5E5E5"> are gonna</font>

8
00:00:21,510 --> 00:00:26,970
be talking<font color="#CCCCCC"> about WCF endpoint</font>

9
00:00:23,699 --> 00:00:29,160
exploitation and just real quick want to

10
00:00:26,970 --> 00:00:31,859
thank the organizers<font color="#E5E5E5"> and the volunteers</font>

11
00:00:29,160 --> 00:00:34,170
for putting on the con<font color="#E5E5E5"> like my first</font>

12
00:00:31,859 --> 00:00:38,180
b-sides was last year<font color="#E5E5E5"> and it's a lot</font><font color="#CCCCCC"> of</font>

13
00:00:34,170 --> 00:00:41,820
fun and an honor<font color="#E5E5E5"> to be up here</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> so</font>

14
00:00:38,180 --> 00:00:45,210
my name is Chris Anastasia<font color="#E5E5E5"> I'm a pen</font>

15
00:00:41,820 --> 00:00:47,670
tester at<font color="#E5E5E5"> illumine</font><font color="#CCCCCC"> co-founder of a</font>

16
00:00:45,210 --> 00:00:51,270
little hacking<font color="#E5E5E5"> group in Palo Alto called</font>

17
00:00:47,670 --> 00:00:55,020
dark corner<font color="#CCCCCC"> I have a couple</font>

18
00:00:51,270 --> 00:00:57,870
certifications<font color="#E5E5E5"> and I'm into stuff</font>

19
00:00:55,020 --> 00:01:00,719
outside<font color="#E5E5E5"> of hacking but honestly this is</font>

20
00:00:57,870 --> 00:01:04,349
<font color="#CCCCCC">like my main</font><font color="#E5E5E5"> interest it's just what I</font>

21
00:01:00,719 --> 00:01:06,119
love to do<font color="#E5E5E5"> and you know if you</font><font color="#CCCCCC"> ask me if</font>

22
00:01:04,349 --> 00:01:12,298
when I was a kid what I wanted to do it

23
00:01:06,119 --> 00:01:14,250
<font color="#E5E5E5">was pen tester so I'm very happy</font><font color="#CCCCCC"> but the</font>

24
00:01:12,299 --> 00:01:18,060
<font color="#E5E5E5">agenda for today is gonna</font><font color="#CCCCCC"> be a brief</font>

25
00:01:14,250 --> 00:01:22,049
intro into<font color="#E5E5E5"> WCF</font><font color="#CCCCCC"> we'll look at target</font>

26
00:01:18,060 --> 00:01:24,950
enumeration so finding<font color="#E5E5E5"> software to try</font>

27
00:01:22,049 --> 00:01:28,140
to exploit<font color="#CCCCCC"> we'll look at an example</font>

28
00:01:24,950 --> 00:01:31,909
<font color="#E5E5E5">vulnerable service and then some</font>

29
00:01:28,140 --> 00:01:36,689
<font color="#CCCCCC">real-world examples and have a demo</font>

30
00:01:31,909 --> 00:01:39,030
sorry<font color="#E5E5E5"> I'm kind of nervous</font><font color="#CCCCCC"> but uh my my</font>

31
00:01:36,689 --> 00:01:41,880
motivation for<font color="#E5E5E5"> this talk came after my</font>

32
00:01:39,030 --> 00:01:46,229
friend<font color="#E5E5E5"> presented his research around</font><font color="#CCCCCC"> WCF</font>

33
00:01:41,880 --> 00:01:49,710
after getting a bunch of<font color="#E5E5E5"> CDs in VPN</font>

34
00:01:46,229 --> 00:01:53,789
clients and some network monitoring

35
00:01:49,710 --> 00:01:56,009
software<font color="#CCCCCC"> and I I read his work and</font><font color="#E5E5E5"> I</font>

36
00:01:53,790 --> 00:01:59,520
wanted<font color="#CCCCCC"> to go find my own</font><font color="#E5E5E5"> bugs along the</font>

37
00:01:56,009 --> 00:02:02,189
same<font color="#E5E5E5"> lines</font><font color="#CCCCCC"> the other thing is I</font><font color="#E5E5E5"> want to</font>

38
00:01:59,520 --> 00:02:04,079
<font color="#E5E5E5">get the word out about WCF as an attack</font>

39
00:02:02,189 --> 00:02:07,860
vector because I haven't<font color="#E5E5E5"> really seen</font>

40
00:02:04,079 --> 00:02:12,480
many people<font color="#E5E5E5"> talk about it</font><font color="#CCCCCC"> and it seems</font>

41
00:02:07,860 --> 00:02:13,080
<font color="#CCCCCC">like it's a pretty ripe</font><font color="#E5E5E5"> vector a lot of</font>

42
00:02:12,480 --> 00:02:15,170
the soft

43
00:02:13,080 --> 00:02:18,630
that<font color="#E5E5E5"> I've looked at it's been really</font>

44
00:02:15,170 --> 00:02:23,700
<font color="#E5E5E5">easy to find bugs</font><font color="#CCCCCC"> and easy to exploit</font>

45
00:02:18,630 --> 00:02:26,310
them<font color="#E5E5E5"> so what is</font><font color="#CCCCCC"> WCF</font><font color="#E5E5E5"> it's short for</font>

46
00:02:23,700 --> 00:02:28,769
<font color="#E5E5E5">windows communication foundation</font><font color="#CCCCCC"> and</font>

47
00:02:26,310 --> 00:02:31,170
it's a<font color="#E5E5E5"> platform for developing</font>

48
00:02:28,770 --> 00:02:33,060
service-oriented<font color="#E5E5E5"> applications so any</font>

49
00:02:31,170 --> 00:02:36,329
application<font color="#CCCCCC"> with like a</font><font color="#E5E5E5"> client-server</font>

50
00:02:33,060 --> 00:02:38,460
model<font color="#E5E5E5"> and the service you</font><font color="#CCCCCC"> know receives</font>

51
00:02:36,330 --> 00:02:41,520
a message<font color="#CCCCCC"> from the client will take some</font>

52
00:02:38,460 --> 00:02:43,800
action based on that<font color="#CCCCCC"> message and</font><font color="#E5E5E5"> the</font>

53
00:02:41,520 --> 00:02:47,250
communications can take place<font color="#E5E5E5"> over a</font>

54
00:02:43,800 --> 00:02:50,460
<font color="#E5E5E5">number</font><font color="#CCCCCC"> of protocols the most prevalent</font>

55
00:02:47,250 --> 00:02:56,280
<font color="#E5E5E5">that we've seen in real life or raw TCP</font>

56
00:02:50,460 --> 00:02:58,290
HTTP and<font color="#E5E5E5"> named pipes so WCF services are</font>

57
00:02:56,280 --> 00:03:03,510
<font color="#E5E5E5">defined with an address binding and</font>

58
00:02:58,290 --> 00:03:05,880
contract<font color="#E5E5E5"> the address is just a URI looks</font>

59
00:03:03,510 --> 00:03:08,429
pretty familiar<font color="#E5E5E5"> and it'll have three or</font>

60
00:03:05,880 --> 00:03:11,670
four<font color="#CCCCCC"> parts depending</font><font color="#E5E5E5"> on whether or</font><font color="#CCCCCC"> not</font>

61
00:03:08,430 --> 00:03:17,700
there's a port<font color="#CCCCCC"> and so with the scheme</font>

62
00:03:11,670 --> 00:03:22,859
host<font color="#E5E5E5"> port and path and bindings just</font>

63
00:03:17,700 --> 00:03:24,750
<font color="#CCCCCC">specify the transport protocol for the</font>

64
00:03:22,860 --> 00:03:27,989
communications so again we'll have<font color="#E5E5E5"> like</font>

65
00:03:24,750 --> 00:03:31,200
TCP<font color="#E5E5E5"> or HTTP and then the encoding scheme</font>

66
00:03:27,989 --> 00:03:34,190
could<font color="#E5E5E5"> be text or binary and you can</font>

67
00:03:31,200 --> 00:03:38,640
optionally configure<font color="#E5E5E5"> Transport Security</font>

68
00:03:34,190 --> 00:03:40,829
<font color="#CCCCCC">and there are a</font><font color="#E5E5E5"> ton of bindings but</font>

69
00:03:38,640 --> 00:03:44,429
again those are<font color="#E5E5E5"> the</font><font color="#CCCCCC"> most common that</font>

70
00:03:40,830 --> 00:03:47,850
we've seen and then the contract<font color="#E5E5E5"> it</font>

71
00:03:44,430 --> 00:03:49,680
defines what<font color="#E5E5E5"> functionality is actually</font>

72
00:03:47,850 --> 00:03:52,590
going to be exposed by the service and

73
00:03:49,680 --> 00:03:54,959
so you can identify the<font color="#E5E5E5"> contract by the</font>

74
00:03:52,590 --> 00:03:57,390
service contract<font color="#E5E5E5"> attribute in the code</font>

75
00:03:54,959 --> 00:04:00,540
<font color="#E5E5E5">and then the operation</font><font color="#CCCCCC"> contract</font>

76
00:03:57,390 --> 00:04:03,510
<font color="#E5E5E5">attribute gets applied to whatever</font>

77
00:04:00,540 --> 00:04:07,170
methods are going<font color="#E5E5E5"> to be exposed</font><font color="#CCCCCC"> through</font>

78
00:04:03,510 --> 00:04:10,679
the service<font color="#CCCCCC"> so the contracts where the</font>

79
00:04:07,170 --> 00:04:13,950
bugs are gonna be the issue here is not

80
00:04:10,680 --> 00:04:16,019
<font color="#E5E5E5">with</font><font color="#CCCCCC"> WCF itself but the fact that the</font>

81
00:04:13,950 --> 00:04:20,548
applications are exposing<font color="#E5E5E5"> powerful</font>

82
00:04:16,019 --> 00:04:22,380
operations over<font color="#E5E5E5"> WCF sometimes in my</font>

83
00:04:20,548 --> 00:04:26,340
experience<font color="#E5E5E5"> I've seen that there are</font>

84
00:04:22,380 --> 00:04:30,000
<font color="#E5E5E5">attempts to lock down</font><font color="#CCCCCC"> access to</font><font color="#E5E5E5"> these</font>

85
00:04:26,340 --> 00:04:32,260
operations but they can be<font color="#CCCCCC"> bypassed and</font>

86
00:04:30,000 --> 00:04:36,010
also when you're<font color="#CCCCCC"> looking at these</font>

87
00:04:32,260 --> 00:04:38,740
operations exploitability may not always

88
00:04:36,010 --> 00:04:43,180
be<font color="#CCCCCC"> straightforward</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> an example</font>

89
00:04:38,740 --> 00:04:45,460
it was like<font color="#E5E5E5"> you could modify the VPN</font>

90
00:04:43,180 --> 00:04:47,889
config for a VPN client so it's not

91
00:04:45,460 --> 00:04:50,530
<font color="#E5E5E5">direct code execution but you can stick</font>

92
00:04:47,889 --> 00:04:52,600
a line in the config<font color="#CCCCCC"> that when you</font>

93
00:04:50,530 --> 00:04:55,030
connect using<font color="#E5E5E5"> the VPN it's going to run</font>

94
00:04:52,600 --> 00:04:58,500
a<font color="#CCCCCC"> command as system so not always</font>

95
00:04:55,030 --> 00:05:01,659
<font color="#E5E5E5">straightforward so target enumeration</font>

96
00:04:58,500 --> 00:05:04,240
<font color="#CCCCCC">we're looking for dotnet binaries WCF</font>

97
00:05:01,660 --> 00:05:08,200
was released with<font color="#CCCCCC"> the.net framework 3.0</font>

98
00:05:04,240 --> 00:05:10,210
<font color="#E5E5E5">and for local targets</font><font color="#CCCCCC"> we're gonna be</font>

99
00:05:08,200 --> 00:05:13,419
focused on processes running<font color="#E5E5E5"> as a</font>

100
00:05:10,210 --> 00:05:16,630
privileged user like local system or

101
00:05:13,419 --> 00:05:19,750
local service now local system is a lot

102
00:05:16,630 --> 00:05:21,250
less privileged<font color="#CCCCCC"> than our sorry local</font>

103
00:05:19,750 --> 00:05:24,460
service is a lot less privileged than

104
00:05:21,250 --> 00:05:27,210
<font color="#E5E5E5">system but there are ways like rotten</font>

105
00:05:24,460 --> 00:05:30,250
potato that will let us<font color="#CCCCCC"> callate from</font>

106
00:05:27,210 --> 00:05:33,219
service<font color="#CCCCCC"> to system</font><font color="#E5E5E5"> and then for remote</font>

107
00:05:30,250 --> 00:05:35,830
targets the service has to be<font color="#E5E5E5"> using a</font>

108
00:05:33,220 --> 00:05:40,870
network binding<font color="#E5E5E5"> like net</font><font color="#CCCCCC"> tcp binding i</font>

109
00:05:35,830 --> 00:05:44,669
see<font color="#E5E5E5"> these are more</font><font color="#CCCCCC"> often using net</font><font color="#E5E5E5"> name</font>

110
00:05:40,870 --> 00:05:47,470
pipe binding so it's gonna be only

111
00:05:44,669 --> 00:05:51,719
locally exploitable<font color="#E5E5E5"> so just for privacy</font>

112
00:05:47,470 --> 00:05:56,470
<font color="#CCCCCC">but</font><font color="#E5E5E5"> you can use process Explorer to</font>

113
00:05:51,720 --> 00:05:59,080
identify the dotnet processes that are

114
00:05:56,470 --> 00:06:02,800
running<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your system just to highlight</font>

115
00:05:59,080 --> 00:06:05,820
<font color="#E5E5E5">them and then also in process</font><font color="#CCCCCC"> explorer</font>

116
00:06:02,800 --> 00:06:09,490
if you click on properties for a process

117
00:06:05,820 --> 00:06:13,870
<font color="#CCCCCC">you can look at all the loaded</font><font color="#E5E5E5"> dotnet</font>

118
00:06:09,490 --> 00:06:16,180
assemblies and you want to<font color="#E5E5E5"> look for to</font>

119
00:06:13,870 --> 00:06:19,630
see<font color="#E5E5E5"> if system</font><font color="#CCCCCC"> dot</font><font color="#E5E5E5"> service model is</font>

120
00:06:16,180 --> 00:06:22,780
referenced because that's got all the

121
00:06:19,630 --> 00:06:28,240
types<font color="#E5E5E5"> and classes needed to build a WCF</font>

122
00:06:22,780 --> 00:06:31,270
service so beyond process<font color="#E5E5E5"> Explorer you</font>

123
00:06:28,240 --> 00:06:34,330
can<font color="#CCCCCC"> use the WMI command line and I have</font>

124
00:06:31,270 --> 00:06:37,310
a little one-liner here that queries for

125
00:06:34,330 --> 00:06:40,070
all the running services<font color="#E5E5E5"> on a system and</font>

126
00:06:37,310 --> 00:06:43,010
we'll just run fine stir<font color="#E5E5E5"> in a loop</font>

127
00:06:40,070 --> 00:06:48,349
<font color="#E5E5E5">against each service binary and look for</font>

128
00:06:43,010 --> 00:06:54,980
the string<font color="#CCCCCC"> ms quarry dll this is a key</font>

129
00:06:48,350 --> 00:06:57,320
dependency for any dotnet binary<font color="#CCCCCC"> and it</font>

130
00:06:54,980 --> 00:06:59,720
can be prone to<font color="#E5E5E5"> false positives</font><font color="#CCCCCC"> and</font>

131
00:06:57,320 --> 00:07:02,300
negatives but for the most part<font color="#E5E5E5"> it's</font>

132
00:06:59,720 --> 00:07:04,130
<font color="#E5E5E5">been reliable when I'm using it and it</font>

133
00:07:02,300 --> 00:07:09,800
has the<font color="#CCCCCC"> advantage of working</font><font color="#E5E5E5"> using only</font>

134
00:07:04,130 --> 00:07:11,780
native tools<font color="#E5E5E5"> and so it's easy to run it</font>

135
00:07:09,800 --> 00:07:13,580
against like if you're doing<font color="#E5E5E5"> an internal</font>

136
00:07:11,780 --> 00:07:15,530
pen test it's easy to<font color="#E5E5E5"> just run that</font>

137
00:07:13,580 --> 00:07:18,020
<font color="#CCCCCC">one-liner</font><font color="#E5E5E5"> against every system on the</font>

138
00:07:15,530 --> 00:07:20,539
land and so I did<font color="#E5E5E5"> that the other day</font>

139
00:07:18,020 --> 00:07:25,669
<font color="#E5E5E5">actually and you can</font><font color="#CCCCCC"> see a got a huge</font>

140
00:07:20,540 --> 00:07:28,400
list of dotnet services and if I wanted

141
00:07:25,669 --> 00:07:31,700
<font color="#E5E5E5">to</font><font color="#CCCCCC"> I could trim the results by instead</font>

142
00:07:28,400 --> 00:07:34,400
<font color="#E5E5E5">of searching</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> MS</font><font color="#CCCCCC"> quarry dll I could</font>

143
00:07:31,700 --> 00:07:36,800
search<font color="#CCCCCC"> for a service model</font><font color="#E5E5E5"> or net</font><font color="#CCCCCC"> TCP</font>

144
00:07:34,400 --> 00:07:39,950
<font color="#E5E5E5">and the trade-off there is that I might</font>

145
00:07:36,800 --> 00:07:42,290
miss stuff<font color="#E5E5E5"> but the advantage is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> not</font>

146
00:07:39,950 --> 00:07:44,659
only if service model<font color="#CCCCCC"> Doge does show up</font>

147
00:07:42,290 --> 00:07:46,820
it's a<font color="#E5E5E5"> really good chance that it's a</font>

148
00:07:44,660 --> 00:07:51,560
WCF service and not just a dotnet

149
00:07:46,820 --> 00:07:54,770
service and if<font color="#E5E5E5"> I find the net</font><font color="#CCCCCC"> TCP string</font>

150
00:07:51,560 --> 00:07:58,130
then it's mostly most likely got some

151
00:07:54,770 --> 00:08:02,510
kind of remote service so you<font color="#CCCCCC"> know</font>

152
00:07:58,130 --> 00:08:04,880
higher chance of finding<font color="#CCCCCC"> RC</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> now we're</font>

153
00:08:02,510 --> 00:08:07,700
gonna look at Vonda you see<font color="#CCCCCC"> of service</font>

154
00:08:04,880 --> 00:08:09,830
which is a forked version of one made by

155
00:08:07,700 --> 00:08:13,130
verse sprite<font color="#E5E5E5"> which I just made to be</font>

156
00:08:09,830 --> 00:08:15,020
remotely<font color="#E5E5E5"> exploitable</font><font color="#CCCCCC"> and it'll help</font><font color="#E5E5E5"> us</font>

157
00:08:13,130 --> 00:08:19,850
understand the analysis and exploitation

158
00:08:15,020 --> 00:08:22,750
<font color="#E5E5E5">workflow so analysis begins with D</font>

159
00:08:19,850 --> 00:08:27,169
compilation of<font color="#CCCCCC"> the target application</font>

160
00:08:22,750 --> 00:08:29,090
<font color="#E5E5E5">and dotnet binaries are really nice</font><font color="#CCCCCC"> for</font>

161
00:08:27,169 --> 00:08:31,940
static analysis because they decompile

162
00:08:29,090 --> 00:08:33,949
cleanly<font color="#CCCCCC"> into source code with variable</font>

163
00:08:31,940 --> 00:08:38,299
names<font color="#E5E5E5"> and comments and everything intact</font>

164
00:08:33,950 --> 00:08:41,570
<font color="#E5E5E5">and I</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> DN spy which is</font><font color="#CCCCCC"> an open</font>

165
00:08:38,299 --> 00:08:44,030
source net decompiler assembly editor

166
00:08:41,570 --> 00:08:47,480
and debugger<font color="#E5E5E5"> when I'm doing this stuff</font>

167
00:08:44,030 --> 00:08:50,150
so after D compiling it again we want<font color="#E5E5E5"> to</font>

168
00:08:47,480 --> 00:08:50,540
<font color="#E5E5E5">check for a reference to system service</font>

169
00:08:50,150 --> 00:08:53,270
model

170
00:08:50,540 --> 00:08:55,969
if we don't<font color="#E5E5E5"> find that reference either</font>

171
00:08:53,270 --> 00:08:59,870
in the first level<font color="#CCCCCC"> of references or it</font>

172
00:08:55,970 --> 00:09:02,030
could be nested<font color="#E5E5E5"> inside of another</font><font color="#CCCCCC"> but if</font>

173
00:08:59,870 --> 00:09:06,880
<font color="#E5E5E5">you don't find that</font><font color="#CCCCCC"> anywhere</font><font color="#E5E5E5"> then the</font>

174
00:09:02,030 --> 00:09:10,390
app is<font color="#E5E5E5"> not using</font><font color="#CCCCCC"> WCF and you can move on</font>

175
00:09:06,880 --> 00:09:12,830
<font color="#E5E5E5">so the next thing is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find the</font>

176
00:09:10,390 --> 00:09:15,080
contract<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> you can see what kind</font>

177
00:09:12,830 --> 00:09:18,580
<font color="#CCCCCC">of operations what kind of functionality</font>

178
00:09:15,080 --> 00:09:18,580
is exposed<font color="#E5E5E5"> by the service and</font>

179
00:09:18,790 --> 00:09:24,260
involuntary see the service contract

180
00:09:21,460 --> 00:09:27,230
<font color="#E5E5E5">service contract attribute is applied to</font>

181
00:09:24,260 --> 00:09:29,990
an<font color="#E5E5E5"> interface called</font><font color="#CCCCCC"> I've Volm</font><font color="#E5E5E5"> service it</font>

182
00:09:27,230 --> 00:09:32,260
can be applied<font color="#CCCCCC"> to classes or</font><font color="#E5E5E5"> interfaces</font>

183
00:09:29,990 --> 00:09:35,090
but I've only<font color="#E5E5E5"> ever seen</font><font color="#CCCCCC"> it used with</font>

184
00:09:32,260 --> 00:09:39,310
<font color="#E5E5E5">interfaces and then the operation</font>

185
00:09:35,090 --> 00:09:43,280
<font color="#CCCCCC">contract is applied to the run me method</font>

186
00:09:39,310 --> 00:09:45,410
<font color="#CCCCCC">and so then we have a</font><font color="#E5E5E5"> class that</font>

187
00:09:43,280 --> 00:09:48,020
<font color="#E5E5E5">implements the interface and actually</font>

188
00:09:45,410 --> 00:09:51,319
defines the logic for the method and

189
00:09:48,020 --> 00:09:53,360
this one is<font color="#E5E5E5"> just going to run a client</font>

190
00:09:51,320 --> 00:09:56,540
supplied string as an operating<font color="#E5E5E5"> system</font>

191
00:09:53,360 --> 00:10:00,620
<font color="#E5E5E5">command</font><font color="#CCCCCC"> and then we have the main class</font>

192
00:09:56,540 --> 00:10:04,990
which inherits from<font color="#E5E5E5"> service base which</font>

193
00:10:00,620 --> 00:10:07,700
is used to<font color="#E5E5E5"> create</font><font color="#CCCCCC"> Windows services and</font>

194
00:10:04,990 --> 00:10:10,550
<font color="#E5E5E5">you'll always find the on start method</font>

195
00:10:07,700 --> 00:10:14,600
<font color="#CCCCCC">is overridden</font><font color="#E5E5E5"> and this is where you'll</font>

196
00:10:10,550 --> 00:10:18,130
find<font color="#E5E5E5"> usually the address and binding</font>

197
00:10:14,600 --> 00:10:21,770
information<font color="#E5E5E5"> so here we have the address</font>

198
00:10:18,130 --> 00:10:24,470
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> net</font><font color="#CCCCCC"> TCP binding listening on</font>

199
00:10:21,770 --> 00:10:28,040
<font color="#E5E5E5">localhost port 81 and the path is</font>

200
00:10:24,470 --> 00:10:30,230
<font color="#E5E5E5">volunteer as slash run me and because</font>

201
00:10:28,040 --> 00:10:33,099
it's<font color="#E5E5E5"> using net TCP binding it'll be</font>

202
00:10:30,230 --> 00:10:35,960
exposed<font color="#CCCCCC"> over the Internet and also</font>

203
00:10:33,100 --> 00:10:38,800
binding security has been disabled so by

204
00:10:35,960 --> 00:10:42,530
default net TCP binding requires

205
00:10:38,800 --> 00:10:44,209
credentials of type<font color="#CCCCCC"> Windows so you're</font>

206
00:10:42,530 --> 00:10:47,120
gonna have<font color="#CCCCCC"> to have valid creds to</font>

207
00:10:44,210 --> 00:10:49,490
connect to the<font color="#E5E5E5"> service but we'll look at</font>

208
00:10:47,120 --> 00:10:51,650
a<font color="#E5E5E5"> real life</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> later on if there's</font>

209
00:10:49,490 --> 00:10:55,510
time where they they did<font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> this</font>

210
00:10:51,650 --> 00:10:58,100
<font color="#CCCCCC">and the security mode was set to none</font><font color="#E5E5E5"> so</font>

211
00:10:55,510 --> 00:10:59,840
then there's a call to<font color="#CCCCCC"> add service</font>

212
00:10:58,100 --> 00:11:01,730
endpoint<font color="#E5E5E5"> which consumes the address</font>

213
00:10:59,840 --> 00:11:02,790
binding and contracts actually<font color="#E5E5E5"> deploy</font>

214
00:11:01,730 --> 00:11:05,220
the service

215
00:11:02,790 --> 00:11:07,709
and so if you find<font color="#E5E5E5"> calls to add service</font>

216
00:11:05,220 --> 00:11:09,180
<font color="#E5E5E5">endpoint</font><font color="#CCCCCC"> that'll help</font><font color="#E5E5E5"> you get the</font>

217
00:11:07,710 --> 00:11:13,560
<font color="#E5E5E5">information that</font><font color="#CCCCCC"> you need to actually</font>

218
00:11:09,180 --> 00:11:16,140
connect to<font color="#E5E5E5"> the service</font><font color="#CCCCCC"> so to exploit the</font>

219
00:11:13,560 --> 00:11:19,020
service we<font color="#CCCCCC"> need to write a WCF client</font>

220
00:11:16,140 --> 00:11:22,110
<font color="#E5E5E5">the first</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> add a reference to</font>

221
00:11:19,020 --> 00:11:24,210
system<font color="#CCCCCC"> dot service model</font><font color="#E5E5E5"> next to find</font>

222
00:11:22,110 --> 00:11:28,110
the contract<font color="#E5E5E5"> and we can just</font><font color="#CCCCCC"> copy-paste</font>

223
00:11:24,210 --> 00:11:30,450
this from the service<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> don't</font>

224
00:11:28,110 --> 00:11:33,360
actually have<font color="#CCCCCC"> to implement the method</font>

225
00:11:30,450 --> 00:11:35,640
like any logic<font color="#E5E5E5"> in the method</font><font color="#CCCCCC"> Visual</font>

226
00:11:33,360 --> 00:11:38,720
<font color="#CCCCCC">Studio</font><font color="#E5E5E5"> will actually automatically it</font>

227
00:11:35,640 --> 00:11:41,430
automatically generated that

228
00:11:38,720 --> 00:11:43,590
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> that just throws the not</font>

229
00:11:41,430 --> 00:11:47,370
implemented exception so I'll do that

230
00:11:43,590 --> 00:11:51,090
<font color="#E5E5E5">for you automatically and so</font><font color="#CCCCCC"> WCF clients</font>

231
00:11:47,370 --> 00:11:55,350
communicate over channels<font color="#E5E5E5"> and we can use</font>

232
00:11:51,090 --> 00:12:00,240
the channel factory class<font color="#E5E5E5"> with the</font>

233
00:11:55,350 --> 00:12:02,940
address<font color="#E5E5E5"> binding in contract to create a</font>

234
00:12:00,240 --> 00:12:06,630
client<font color="#CCCCCC"> object that can then be used</font><font color="#E5E5E5"> to</font>

235
00:12:02,940 --> 00:12:09,720
actually<font color="#E5E5E5"> invoke methods on</font><font color="#CCCCCC"> the service</font>

236
00:12:06,630 --> 00:12:13,320
and so here we're calling run me and

237
00:12:09,720 --> 00:12:16,140
passing at caltech<font color="#CCCCCC"> C and so we'll take</font><font color="#E5E5E5"> a</font>

238
00:12:13,320 --> 00:12:20,820
look at a video of what<font color="#E5E5E5"> that looks like</font>

239
00:12:16,140 --> 00:12:23,400
<font color="#CCCCCC">so on the left hand side there's a</font>

240
00:12:20,820 --> 00:12:25,200
windows<font color="#E5E5E5"> 7 virtual machine the service</font>

241
00:12:23,400 --> 00:12:27,750
has been<font color="#E5E5E5"> started and</font><font color="#CCCCCC"> i have process</font>

242
00:12:25,200 --> 00:12:29,970
<font color="#E5E5E5">explorer highlighted on the service</font>

243
00:12:27,750 --> 00:12:32,820
itself<font color="#E5E5E5"> on the right hand side is the</font>

244
00:12:29,970 --> 00:12:36,090
<font color="#CCCCCC">Windows 10 host machine where I'm gonna</font>

245
00:12:32,820 --> 00:12:40,910
<font color="#E5E5E5">run the exploit and you'll see calc get</font>

246
00:12:36,090 --> 00:12:40,910
spawned as a child of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> service</font>

247
00:12:47,100 --> 00:12:56,550
and it's just gonna<font color="#E5E5E5"> run a couple</font><font color="#CCCCCC"> more</font>

248
00:12:51,100 --> 00:12:56,550
times<font color="#E5E5E5"> and you'll see more more</font><font color="#CCCCCC"> calyx</font>

249
00:13:04,140 --> 00:13:09,160
<font color="#E5E5E5">okay so now we're gonna look at some</font>

250
00:13:07,510 --> 00:13:10,750
<font color="#E5E5E5">real-world vulnerabilities and again</font>

251
00:13:09,160 --> 00:13:13,360
we're looking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> bugs in</font><font color="#E5E5E5"> the</font>

252
00:13:10,750 --> 00:13:16,240
application logic<font color="#CCCCCC"> there's not a</font><font color="#E5E5E5"> problem</font>

253
00:13:13,360 --> 00:13:18,340
<font color="#E5E5E5">with WCF itself per se</font><font color="#CCCCCC"> but whatever</font>

254
00:13:16,240 --> 00:13:21,450
<font color="#CCCCCC">functionality</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> exposed through</font>

255
00:13:18,340 --> 00:13:23,680
it and the issue here seems to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> that</font>

256
00:13:21,450 --> 00:13:26,500
developers<font color="#E5E5E5"> aren't considering</font><font color="#CCCCCC"> the idea</font>

257
00:13:23,680 --> 00:13:28,800
<font color="#CCCCCC">that rogue clients are going</font><font color="#E5E5E5"> to you know</font>

258
00:13:26,500 --> 00:13:32,260
<font color="#E5E5E5">connect and interact with these</font><font color="#CCCCCC"> services</font>

259
00:13:28,800 --> 00:13:36,790
<font color="#CCCCCC">or</font><font color="#E5E5E5"> if they did they've made faulty</font>

260
00:13:32,260 --> 00:13:39,040
attempts to lock down<font color="#E5E5E5"> the service so a</font>

261
00:13:36,790 --> 00:13:42,219
few months<font color="#CCCCCC"> ago</font><font color="#E5E5E5"> I found a</font><font color="#CCCCCC"> privileged</font>

262
00:13:39,040 --> 00:13:45,730
escalation<font color="#CCCCCC"> bug in</font><font color="#E5E5E5"> checkpoints zone alarm</font>

263
00:13:42,220 --> 00:13:48,100
antivirus<font color="#CCCCCC"> it has a service</font><font color="#E5E5E5"> called</font>

264
00:13:45,730 --> 00:13:52,420
<font color="#E5E5E5">checkpoint sandblast agent updater</font>

265
00:13:48,100 --> 00:13:55,210
service that has a named pipe service

266
00:13:52,420 --> 00:13:59,229
that can<font color="#E5E5E5"> be accessed by unprivileged</font>

267
00:13:55,210 --> 00:14:01,750
local users<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the service can be used</font>

268
00:13:59,230 --> 00:14:04,570
to trigger<font color="#E5E5E5"> a call to a method</font><font color="#CCCCCC"> called</font>

269
00:14:01,750 --> 00:14:08,440
execute installer<font color="#E5E5E5"> which will just run an</font>

270
00:14:04,570 --> 00:14:11,980
arbitrary<font color="#E5E5E5"> exe s system so it's not too</font>

271
00:14:08,440 --> 00:14:14,170
far<font color="#CCCCCC"> off from</font><font color="#E5E5E5"> the run me method that we</font>

272
00:14:11,980 --> 00:14:17,050
<font color="#E5E5E5">just looked at and the way I found this</font>

273
00:14:14,170 --> 00:14:19,240
<font color="#E5E5E5">I googled for best antivirus</font><font color="#CCCCCC"> and this</font>

274
00:14:17,050 --> 00:14:20,770
was in the<font color="#CCCCCC"> list</font><font color="#E5E5E5"> so I know it's one of</font>

275
00:14:19,240 --> 00:14:26,350
the best

276
00:14:20,770 --> 00:14:28,480
<font color="#CCCCCC">I ran the one-liner and it started a</font>

277
00:14:26,350 --> 00:14:31,780
bunch<font color="#E5E5E5"> of services</font><font color="#CCCCCC"> actually started for</font>

278
00:14:28,480 --> 00:14:34,990
unique services<font color="#CCCCCC"> so far the only</font><font color="#E5E5E5"> one that</font>

279
00:14:31,780 --> 00:14:39,280
I<font color="#E5E5E5"> found to be exploitable was this SBAC</font>

280
00:14:34,990 --> 00:14:40,990
<font color="#CCCCCC">podía</font><font color="#E5E5E5"> service host and then</font><font color="#CCCCCC"> ID</font><font color="#E5E5E5"> compiled</font>

281
00:14:39,280 --> 00:14:45,220
each service and<font color="#E5E5E5"> looked for a reference</font>

282
00:14:40,990 --> 00:14:48,190
to system<font color="#CCCCCC"> service model after that I</font>

283
00:14:45,220 --> 00:14:50,680
started looking for exploitable

284
00:14:48,190 --> 00:14:53,080
functionality and<font color="#E5E5E5"> Method names are</font>

285
00:14:50,680 --> 00:14:54,790
<font color="#E5E5E5">really helpful</font><font color="#CCCCCC"> again it's it's so nice</font>

286
00:14:53,080 --> 00:14:56,590
that<font color="#CCCCCC"> these</font><font color="#E5E5E5"> things compile into source</font>

287
00:14:54,790 --> 00:14:58,329
code with the names and<font color="#CCCCCC"> everything it</font>

288
00:14:56,590 --> 00:15:00,670
<font color="#CCCCCC">just makes it a lot easier to understand</font>

289
00:14:58,330 --> 00:15:02,620
what's going<font color="#CCCCCC"> on and</font><font color="#E5E5E5"> so I saw a method</font>

290
00:15:00,670 --> 00:15:04,959
called execute installer that sounded

291
00:15:02,620 --> 00:15:08,080
very<font color="#CCCCCC"> interesting again it'll</font><font color="#E5E5E5"> run an</font>

292
00:15:04,960 --> 00:15:12,610
arbitrary<font color="#CCCCCC"> exe a system and it's based on</font>

293
00:15:08,080 --> 00:15:15,180
client supplied argument so once I saw

294
00:15:12,610 --> 00:15:16,810
<font color="#CCCCCC">that there</font><font color="#E5E5E5"> was you</font><font color="#CCCCCC"> know some juicy</font>

295
00:15:15,180 --> 00:15:18,189
<font color="#CCCCCC">behavior there</font>

296
00:15:16,810 --> 00:15:22,060
<font color="#CCCCCC">we needed to</font><font color="#E5E5E5"> figure out how to connect</font>

297
00:15:18,190 --> 00:15:23,980
to<font color="#E5E5E5"> the service and so the service</font>

298
00:15:22,060 --> 00:15:27,040
<font color="#E5E5E5">endpoint definition is inside the on</font>

299
00:15:23,980 --> 00:15:30,690
start method<font color="#E5E5E5"> and there are two</font><font color="#CCCCCC"> named</font>

300
00:15:27,040 --> 00:15:34,270
pipe<font color="#CCCCCC"> end points I get established and</font>

301
00:15:30,690 --> 00:15:36,940
they're also<font color="#E5E5E5"> calling this</font><font color="#CCCCCC"> add secure WCF</font>

302
00:15:34,270 --> 00:15:39,760
behavior on the<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> which was a</font>

303
00:15:36,940 --> 00:15:47,529
clue to<font color="#CCCCCC"> me that they had done something</font>

304
00:15:39,760 --> 00:15:50,260
to try to<font color="#E5E5E5"> secure the channel</font><font color="#CCCCCC"> so this was</font>

305
00:15:47,529 --> 00:15:52,720
one<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> first ones I looked at so as</font>

306
00:15:50,260 --> 00:15:54,580
I was doing<font color="#E5E5E5"> this I started trying to</font>

307
00:15:52,720 --> 00:15:57,880
build a client from scratch kind of like

308
00:15:54,580 --> 00:15:59,529
how we saw in bone WCF service but a lot

309
00:15:57,880 --> 00:16:01,870
of<font color="#E5E5E5"> times that's</font><font color="#CCCCCC"> not necessary</font>

310
00:15:59,529 --> 00:16:04,570
usually there's existing client code

311
00:16:01,870 --> 00:16:07,390
<font color="#E5E5E5">sitting alongside the service binary in</font>

312
00:16:04,570 --> 00:16:10,480
the install path and so I found<font color="#E5E5E5"> this</font><font color="#CCCCCC"> SP</font>

313
00:16:07,390 --> 00:16:14,260
<font color="#E5E5E5">a stub DLL which had everything I needed</font>

314
00:16:10,480 --> 00:16:16,750
<font color="#CCCCCC">to actually connect to</font><font color="#E5E5E5"> the service</font><font color="#CCCCCC"> so I</font>

315
00:16:14,260 --> 00:16:19,510
created a new<font color="#CCCCCC"> project added references</font>

316
00:16:16,750 --> 00:16:24,280
to that<font color="#E5E5E5"> DLL</font><font color="#CCCCCC"> plus</font><font color="#E5E5E5"> all its</font><font color="#CCCCCC"> dependencies</font>

317
00:16:19,510 --> 00:16:28,810
and<font color="#CCCCCC"> I created this</font><font color="#E5E5E5"> SP a stub object and</font>

318
00:16:24,280 --> 00:16:30,490
I just<font color="#CCCCCC"> use Visual Studio to tell me what</font>

319
00:16:28,810 --> 00:16:34,510
methods could<font color="#E5E5E5"> be called on</font><font color="#CCCCCC"> that object</font>

320
00:16:30,490 --> 00:16:38,170
<font color="#CCCCCC">and so the</font><font color="#E5E5E5"> first one I looked at was</font>

321
00:16:34,510 --> 00:16:39,730
<font color="#CCCCCC">called register</font><font color="#E5E5E5"> SP a stub and I liked</font>

322
00:16:38,170 --> 00:16:41,770
this one because<font color="#CCCCCC"> it</font><font color="#E5E5E5"> just took a simple</font>

323
00:16:39,730 --> 00:16:43,870
<font color="#E5E5E5">string as an argument so</font><font color="#CCCCCC"> that I didn't</font>

324
00:16:41,770 --> 00:16:46,720
<font color="#E5E5E5">have to create any complex structures to</font>

325
00:16:43,870 --> 00:16:50,920
interact<font color="#CCCCCC"> with it</font><font color="#E5E5E5"> and also because I knew</font>

326
00:16:46,720 --> 00:16:53,050
<font color="#CCCCCC">that if</font><font color="#E5E5E5"> I successfully</font><font color="#CCCCCC"> registered a stub</font>

327
00:16:50,920 --> 00:16:56,110
whatever that<font color="#CCCCCC"> means that it would end</font><font color="#E5E5E5"> up</font>

328
00:16:53,050 --> 00:16:57,689
in the logs of the<font color="#CCCCCC"> AV so I would have</font>

329
00:16:56,110 --> 00:17:00,330
evidence that<font color="#CCCCCC"> I had</font><font color="#E5E5E5"> successfully</font>

330
00:16:57,690 --> 00:17:03,700
<font color="#E5E5E5">interacted with the service</font>

331
00:17:00,330 --> 00:17:06,850
<font color="#CCCCCC">unfortunately none of</font><font color="#E5E5E5"> my registrations</font>

332
00:17:03,700 --> 00:17:10,150
were getting logged<font color="#E5E5E5"> and it took me</font>

333
00:17:06,849 --> 00:17:14,469
longer than<font color="#E5E5E5"> I'd like to admit</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> figure</font>

334
00:17:10,150 --> 00:17:17,800
<font color="#E5E5E5">out what the problem is but the the name</font>

335
00:17:14,470 --> 00:17:21,160
pipe server<font color="#CCCCCC"> it first</font><font color="#E5E5E5"> it gets the</font><font color="#CCCCCC"> pig of</font>

336
00:17:17,800 --> 00:17:24,129
the<font color="#E5E5E5"> client that's connecting to the</font>

337
00:17:21,160 --> 00:17:27,819
service and then from the pig it gets

338
00:17:24,130 --> 00:17:30,530
the<font color="#E5E5E5"> actual file name</font><font color="#CCCCCC"> of the client once</font>

339
00:17:27,819 --> 00:17:34,879
it has the file name<font color="#E5E5E5"> it creates this x5</font>

340
00:17:30,530 --> 00:17:38,510
<font color="#CCCCCC">nine certificate object from the client</font>

341
00:17:34,880 --> 00:17:40,310
<font color="#CCCCCC">and it calls verify on it to see that</font>

342
00:17:38,510 --> 00:17:42,950
it's actually a<font color="#E5E5E5"> valid certificate so it</font>

343
00:17:40,310 --> 00:17:46,159
validates<font color="#E5E5E5"> the certificate then it reads</font>

344
00:17:42,950 --> 00:17:49,670
the CN field of the cert<font color="#E5E5E5"> into a variable</font>

345
00:17:46,160 --> 00:17:52,220
<font color="#CCCCCC">called text</font><font color="#E5E5E5"> and then finally it compares</font>

346
00:17:49,670 --> 00:17:54,020
text to a string that says check Point

347
00:17:52,220 --> 00:17:55,670
Software Technologies Limited so it

348
00:17:54,020 --> 00:17:59,960
wants<font color="#E5E5E5"> to know that it's a valid cert and</font>

349
00:17:55,670 --> 00:18:01,580
that it's signed by<font color="#CCCCCC"> checkpoint so that's</font>

350
00:17:59,960 --> 00:18:03,020
why I<font color="#E5E5E5"> couldn't talk</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> service</font>

351
00:18:01,580 --> 00:18:05,240
because my client<font color="#CCCCCC"> wasn't signed by</font>

352
00:18:03,020 --> 00:18:07,460
<font color="#CCCCCC">checkpoints so I considered two</font>

353
00:18:05,240 --> 00:18:10,040
possibilities to bypass<font color="#E5E5E5"> a check the</font>

354
00:18:07,460 --> 00:18:12,260
first was to<font color="#E5E5E5"> inject code like DLL</font>

355
00:18:10,040 --> 00:18:15,860
<font color="#E5E5E5">injection into a legitimate</font><font color="#CCCCCC"> checkpoint</font>

356
00:18:12,260 --> 00:18:17,480
binary<font color="#CCCCCC"> the other was to sign the exploit</font>

357
00:18:15,860 --> 00:18:21,080
code with a<font color="#CCCCCC"> self-signed certificate</font>

358
00:18:17,480 --> 00:18:24,170
<font color="#CCCCCC">after I posted this exploit on reddit</font>

359
00:18:21,080 --> 00:18:26,240
<font color="#CCCCCC">James Forshaw pointed out a couple other</font>

360
00:18:24,170 --> 00:18:28,700
possibilities including one<font color="#CCCCCC"> that I</font>

361
00:18:26,240 --> 00:18:31,730
really<font color="#E5E5E5"> liked which was that the check</font>

362
00:18:28,700 --> 00:18:34,750
uses<font color="#CCCCCC"> processed main module to read the</font>

363
00:18:31,730 --> 00:18:38,150
<font color="#E5E5E5">filename of the connecting process and</font>

364
00:18:34,750 --> 00:18:40,670
that method<font color="#E5E5E5"> reads the file name out</font><font color="#CCCCCC"> of</font>

365
00:18:38,150 --> 00:18:43,220
memory<font color="#E5E5E5"> of the client which is under</font>

366
00:18:40,670 --> 00:18:45,470
attacker control so you<font color="#CCCCCC"> could start</font><font color="#E5E5E5"> the</font>

367
00:18:43,220 --> 00:18:48,350
<font color="#E5E5E5">client and then modify that structure in</font>

368
00:18:45,470 --> 00:18:54,010
memory<font color="#E5E5E5"> to point to a actual checkpoint</font>

369
00:18:48,350 --> 00:18:56,990
binary<font color="#E5E5E5"> and pass the check that way</font><font color="#CCCCCC"> to so</font>

370
00:18:54,010 --> 00:18:59,120
because I didn't<font color="#E5E5E5"> know how easy it was to</font>

371
00:18:56,990 --> 00:19:03,140
do self-signed certificates I first went

372
00:18:59,120 --> 00:19:05,419
with the DLL injection<font color="#E5E5E5"> which sort of</font>

373
00:19:03,140 --> 00:19:09,230
worked but<font color="#CCCCCC"> I had to disable a feature of</font>

374
00:19:05,420 --> 00:19:11,180
<font color="#E5E5E5">the AV for the DLL</font><font color="#CCCCCC"> injection too it</font>

375
00:19:09,230 --> 00:19:14,660
would<font color="#E5E5E5"> block DLL injection so at the</font><font color="#CCCCCC"> end</font>

376
00:19:11,180 --> 00:19:17,240
of the day I had to<font color="#CCCCCC"> go</font><font color="#E5E5E5"> with self-signed</font>

377
00:19:14,660 --> 00:19:19,340
certificates and I read an<font color="#E5E5E5"> article by</font>

378
00:19:17,240 --> 00:19:21,830
<font color="#E5E5E5">Matt</font><font color="#CCCCCC"> Graber that pointed out that nan</font>

379
00:19:19,340 --> 00:19:25,760
admins on<font color="#E5E5E5"> Windows can trust root CA</font>

380
00:19:21,830 --> 00:19:27,710
certificates<font color="#CCCCCC"> so that means with a few</font>

381
00:19:25,760 --> 00:19:31,100
PowerShell<font color="#E5E5E5"> commands I can create a</font>

382
00:19:27,710 --> 00:19:37,540
self-signed cert trust it on Windows and

383
00:19:31,100 --> 00:19:40,370
then<font color="#E5E5E5"> sign sign the code with it so I</font>

384
00:19:37,540 --> 00:19:41,809
signed my exploit<font color="#E5E5E5"> and then I tried</font><font color="#CCCCCC"> to</font>

385
00:19:40,370 --> 00:19:44,299
register<font color="#CCCCCC"> stub and</font>

386
00:19:41,809 --> 00:19:47,690
and you can see that the stub

387
00:19:44,299 --> 00:19:49,099
registration did get logged<font color="#E5E5E5"> this time so</font>

388
00:19:47,690 --> 00:19:53,330
<font color="#E5E5E5">that's good so</font><font color="#CCCCCC"> now I</font><font color="#E5E5E5"> could actually</font>

389
00:19:49,099 --> 00:19:55,189
interact<font color="#E5E5E5"> with the service so once I was</font>

390
00:19:53,330 --> 00:19:58,070
working I<font color="#CCCCCC"> started playing</font><font color="#E5E5E5"> with a method</font>

391
00:19:55,190 --> 00:20:00,739
called send command<font color="#CCCCCC"> it takes one</font>

392
00:19:58,070 --> 00:20:04,340
argument which<font color="#E5E5E5"> is a string of XML called</font>

393
00:20:00,739 --> 00:20:06,859
command XML<font color="#E5E5E5"> and this argument is</font>

394
00:20:04,340 --> 00:20:09,439
received by the services<font color="#CCCCCC"> on command</font>

395
00:20:06,859 --> 00:20:11,989
receive method which through a chain of

396
00:20:09,440 --> 00:20:15,469
<font color="#E5E5E5">calls eventually passes the argument in</font>

397
00:20:11,989 --> 00:20:18,979
to execute<font color="#E5E5E5"> installer inside execute</font>

398
00:20:15,469 --> 00:20:22,369
installer<font color="#E5E5E5"> the</font><font color="#CCCCCC"> XML gets deserialized</font><font color="#E5E5E5"> into</font>

399
00:20:18,979 --> 00:20:24,469
a couple<font color="#E5E5E5"> different objects one of those</font>

400
00:20:22,369 --> 00:20:26,869
objects has a field<font color="#E5E5E5"> that's a string</font>

401
00:20:24,469 --> 00:20:28,369
called installer package path and<font color="#E5E5E5"> that's</font>

402
00:20:26,869 --> 00:20:32,928
really the only<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> I needed to pay</font>

403
00:20:28,369 --> 00:20:34,699
attention<font color="#CCCCCC"> to</font><font color="#E5E5E5"> and whatever</font><font color="#CCCCCC"> exe installer</font>

404
00:20:32,929 --> 00:20:38,330
package path is pointing at that's

405
00:20:34,700 --> 00:20:43,159
what's going to get executed<font color="#E5E5E5"> by this</font>

406
00:20:38,330 --> 00:20:45,408
<font color="#CCCCCC">method so the only thing is whatever</font>

407
00:20:43,159 --> 00:20:47,929
program that's pointed to by installer

408
00:20:45,409 --> 00:20:51,169
package pet also has to<font color="#E5E5E5"> be signed by</font>

409
00:20:47,929 --> 00:20:54,349
checkpoint<font color="#E5E5E5"> so again I considered two</font>

410
00:20:51,169 --> 00:20:57,859
possibilities<font color="#E5E5E5"> one was to DLL hijack a</font>

411
00:20:54,349 --> 00:20:59,839
legitimate<font color="#E5E5E5"> checkpoint binary and the</font>

412
00:20:57,859 --> 00:21:02,299
other was to use self-signed

413
00:20:59,839 --> 00:21:03,139
certificates again because I was

414
00:21:02,299 --> 00:21:08,029
ignorant

415
00:21:03,139 --> 00:21:09,769
I used DLL<font color="#CCCCCC"> and hijacking first and</font>

416
00:21:08,029 --> 00:21:13,580
that's viable and<font color="#CCCCCC"> that would have worked</font>

417
00:21:09,769 --> 00:21:18,039
but signing the code was cleaner and

418
00:21:13,580 --> 00:21:23,658
easier so now I'm<font color="#E5E5E5"> going to show you guys</font>

419
00:21:18,039 --> 00:21:28,149
what<font color="#CCCCCC"> that looks like</font><font color="#E5E5E5"> and I did not start</font>

420
00:21:23,659 --> 00:21:28,149
<font color="#CCCCCC">my VM so let me</font><font color="#E5E5E5"> start my VM up here</font>

421
00:21:44,530 --> 00:21:47,700
I'll make this bigger

422
00:21:50,360 --> 00:22:00,199
<font color="#E5E5E5">okay so first thing we're gonna create</font>

423
00:21:56,659 --> 00:22:01,760
the certificate object with the CN set

424
00:22:00,200 --> 00:22:06,409
to checkpoint Software Technologies

425
00:22:01,760 --> 00:22:11,890
Limited<font color="#E5E5E5"> and then going to export the</font>

426
00:22:06,409 --> 00:22:11,890
cert to a file called<font color="#CCCCCC"> fake cert sir</font><font color="#E5E5E5"> and</font>

427
00:22:13,179 --> 00:22:17,210
then we're<font color="#CCCCCC"> gonna import</font><font color="#E5E5E5"> it and this is</font>

428
00:22:15,769 --> 00:22:19,580
<font color="#E5E5E5">the part that's kind of questionable</font>

429
00:22:17,210 --> 00:22:21,919
<font color="#E5E5E5">about why can non admins do this on</font>

430
00:22:19,580 --> 00:22:25,428
<font color="#CCCCCC">Windows so we get this</font><font color="#E5E5E5"> nice warning that</font>

431
00:22:21,919 --> 00:22:31,190
we can just<font color="#E5E5E5"> click through and then we're</font>

432
00:22:25,429 --> 00:22:32,870
gonna<font color="#E5E5E5"> sign the exploit which is the WCF</font>

433
00:22:31,190 --> 00:22:34,909
client<font color="#E5E5E5"> and then we're going to sign the</font>

434
00:22:32,870 --> 00:22:38,629
payload<font color="#E5E5E5"> which is the code</font><font color="#CCCCCC"> that's</font>

435
00:22:34,909 --> 00:22:40,850
actually<font color="#E5E5E5"> going to get run with high</font>

436
00:22:38,630 --> 00:22:45,350
privileges and so we'll<font color="#E5E5E5"> just take</font><font color="#CCCCCC"> a look</font>

437
00:22:40,850 --> 00:22:49,730
<font color="#E5E5E5">on the user test right</font><font color="#CCCCCC"> now and if</font><font color="#E5E5E5"> we</font>

438
00:22:45,350 --> 00:22:53,330
list the local administrators<font color="#E5E5E5"> you can</font>

439
00:22:49,730 --> 00:22:57,889
see that test is not in<font color="#E5E5E5"> that list so</font>

440
00:22:53,330 --> 00:23:01,639
we're not already<font color="#E5E5E5"> in admin and I'm just</font>

441
00:22:57,889 --> 00:23:04,189
<font color="#CCCCCC">going to do this</font><font color="#E5E5E5"> so when I run this we</font>

442
00:23:01,639 --> 00:23:07,539
should<font color="#E5E5E5"> see a new local admin get created</font>

443
00:23:04,190 --> 00:23:07,539
called zone alarm exploit

444
00:23:21,910 --> 00:23:27,680
and so we got<font color="#CCCCCC"> them</font><font color="#E5E5E5"> right there so thank</font>

445
00:23:26,200 --> 00:23:31,939
you

446
00:23:27,680 --> 00:23:31,939
[Applause]

447
00:23:39,630 --> 00:23:47,940
how am i doing on time<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> six minutes</font>

448
00:23:43,950 --> 00:23:50,820
so okay<font color="#CCCCCC"> I'm just gonna cover another</font>

449
00:23:47,940 --> 00:23:53,820
vuln that I found<font color="#E5E5E5"> just</font><font color="#CCCCCC"> over the weekend</font>

450
00:23:50,820 --> 00:23:56,850
<font color="#E5E5E5">which is in some</font><font color="#CCCCCC"> no-name software called</font>

451
00:23:53,820 --> 00:23:59,040
power plan by<font color="#E5E5E5"> quest oka</font>

452
00:23:56,850 --> 00:24:01,679
it doesn't matter<font color="#E5E5E5"> that it's no name it's</font>

453
00:23:59,040 --> 00:24:07,500
more just<font color="#CCCCCC"> a point to see how</font><font color="#E5E5E5"> this stuff</font>

454
00:24:01,680 --> 00:24:11,100
works<font color="#E5E5E5"> and so and it's a remote example</font>

455
00:24:07,500 --> 00:24:13,380
so this service<font color="#E5E5E5"> establishes a net</font><font color="#CCCCCC"> TCP</font>

456
00:24:11,100 --> 00:24:16,110
<font color="#CCCCCC">WCF</font><font color="#E5E5E5"> endpoint which can be accessed</font><font color="#CCCCCC"> by</font>

457
00:24:13,380 --> 00:24:17,700
unauthenticated<font color="#E5E5E5"> remote users and it</font>

458
00:24:16,110 --> 00:24:20,399
exposes an operation called get

459
00:24:17,700 --> 00:24:23,910
processed<font color="#E5E5E5"> data which you</font><font color="#CCCCCC"> can access to</font>

460
00:24:20,400 --> 00:24:27,330
<font color="#E5E5E5">get a connection string containing clear</font>

461
00:24:23,910 --> 00:24:28,440
text database credentials<font color="#E5E5E5"> so I found</font>

462
00:24:27,330 --> 00:24:31,409
this on a pen test

463
00:24:28,440 --> 00:24:33,300
<font color="#CCCCCC">nessus had reported an unquoted service</font>

464
00:24:31,410 --> 00:24:37,320
path which is<font color="#CCCCCC"> a pretty boring finding</font>

465
00:24:33,300 --> 00:24:40,139
from<font color="#CCCCCC"> necess but the the service</font><font color="#E5E5E5"> was</font>

466
00:24:37,320 --> 00:24:42,060
called<font color="#E5E5E5"> WCF</font><font color="#CCCCCC"> bla bla bla service which</font>

467
00:24:40,140 --> 00:24:49,200
caught<font color="#CCCCCC"> my attention so I was like let me</font>

468
00:24:42,060 --> 00:24:52,080
<font color="#E5E5E5">go analyze this and so first thing I</font>

469
00:24:49,200 --> 00:24:55,200
wanted<font color="#E5E5E5"> to find out</font><font color="#CCCCCC"> again we're</font><font color="#E5E5E5"> in the on</font>

470
00:24:52,080 --> 00:24:57,780
start method<font color="#CCCCCC"> of the service and found</font>

471
00:24:55,200 --> 00:25:00,960
out what<font color="#E5E5E5"> the address was net TCP and</font>

472
00:24:57,780 --> 00:25:03,060
then a public<font color="#CCCCCC"> IP address</font><font color="#E5E5E5"> public meaning</font>

473
00:25:00,960 --> 00:25:05,670
not loopback<font color="#CCCCCC"> so it was still</font><font color="#E5E5E5"> it was on a</font>

474
00:25:03,060 --> 00:25:08,310
LAN it was an<font color="#CCCCCC"> Internet exposed and then</font>

475
00:25:05,670 --> 00:25:12,270
the port is<font color="#CCCCCC"> 8,000 and the path is my</font>

476
00:25:08,310 --> 00:25:16,550
service<font color="#E5E5E5"> we're using net TCP binding with</font>

477
00:25:12,270 --> 00:25:22,470
security disabled<font color="#CCCCCC"> I found client code in</font>

478
00:25:16,550 --> 00:25:24,990
<font color="#E5E5E5">dll called</font><font color="#CCCCCC"> powerplant client DLL</font><font color="#E5E5E5"> and it</font>

479
00:25:22,470 --> 00:25:29,970
defines a class<font color="#E5E5E5"> called service interface</font>

480
00:25:24,990 --> 00:25:33,030
client<font color="#E5E5E5"> so the class implements the</font>

481
00:25:29,970 --> 00:25:37,350
methods defined in the<font color="#CCCCCC"> I service</font>

482
00:25:33,030 --> 00:25:39,300
interface interface<font color="#E5E5E5"> and you can see get</font>

483
00:25:37,350 --> 00:25:43,620
processed data<font color="#E5E5E5"> is the one that that we</font>

484
00:25:39,300 --> 00:25:47,370
exploited<font color="#CCCCCC"> so I added references to the</font>

485
00:25:43,620 --> 00:25:50,040
service<font color="#CCCCCC"> DLLs the constructor for</font><font color="#E5E5E5"> the</font>

486
00:25:47,370 --> 00:25:51,840
<font color="#E5E5E5">service interface client wanted the</font>

487
00:25:50,040 --> 00:25:54,928
address<font color="#E5E5E5"> and binding</font>

488
00:25:51,840 --> 00:25:57,570
part of the arguments so I had to define

489
00:25:54,929 --> 00:25:59,669
<font color="#E5E5E5">those myself</font><font color="#CCCCCC"> and I I had to set the</font>

490
00:25:57,570 --> 00:26:02,250
security<font color="#E5E5E5"> mode to none in order for it to</font>

491
00:25:59,669 --> 00:26:05,130
work<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the entire exploit</font>

492
00:26:02,250 --> 00:26:09,270
<font color="#E5E5E5">right here so I</font><font color="#CCCCCC"> defined the address</font><font color="#E5E5E5"> to</font>

493
00:26:05,130 --> 00:26:14,940
find the binding<font color="#CCCCCC"> I created the service</font>

494
00:26:09,270 --> 00:26:19,230
client object<font color="#CCCCCC"> and then I I just called</font>

495
00:26:14,940 --> 00:26:26,340
get processed data on it and inside<font color="#CCCCCC"> that</font>

496
00:26:19,230 --> 00:26:28,470
is the<font color="#E5E5E5"> connection string so</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> also</font>

497
00:26:26,340 --> 00:26:32,370
<font color="#E5E5E5">part of the constructor</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> service</font>

498
00:26:28,470 --> 00:26:34,890
interface client was a service interface

499
00:26:32,370 --> 00:26:37,260
<font color="#E5E5E5">callback class which you'll see</font>

500
00:26:34,890 --> 00:26:39,750
<font color="#CCCCCC">sometimes they want</font><font color="#E5E5E5"> these callbacks</font><font color="#CCCCCC"> and</font>

501
00:26:37,260 --> 00:26:42,929
the callback is<font color="#E5E5E5"> only defined as an</font>

502
00:26:39,750 --> 00:26:45,830
interface<font color="#E5E5E5"> so again I just</font><font color="#CCCCCC"> had to do stub</font>

503
00:26:42,929 --> 00:26:49,230
implementations for all the<font color="#E5E5E5"> the</font>

504
00:26:45,830 --> 00:26:53,010
<font color="#E5E5E5">interfaces methods which Visual Studio</font>

505
00:26:49,230 --> 00:26:55,200
will do for you automatically<font color="#CCCCCC"> and</font><font color="#E5E5E5"> and</font>

506
00:26:53,010 --> 00:27:00,960
this<font color="#E5E5E5"> is what it looked like heavily</font>

507
00:26:55,200 --> 00:27:02,190
<font color="#E5E5E5">redacted</font><font color="#CCCCCC"> but but I got the</font><font color="#E5E5E5"> the name of</font>

508
00:27:00,960 --> 00:27:03,809
the<font color="#E5E5E5"> database server that it was</font>

509
00:27:02,190 --> 00:27:06,120
connecting to<font color="#E5E5E5"> as well as the</font><font color="#CCCCCC"> user name</font>

510
00:27:03,809 --> 00:27:09,870
<font color="#CCCCCC">and password</font><font color="#E5E5E5"> I was able to then go log</font>

511
00:27:06,120 --> 00:27:12,689
<font color="#E5E5E5">into the database</font><font color="#CCCCCC"> I didn't get any XP</font>

512
00:27:09,870 --> 00:27:15,330
command shell though<font color="#CCCCCC"> unfortunately so in</font>

513
00:27:12,690 --> 00:27:17,640
conclusion<font color="#E5E5E5"> dotnet D compilation makes</font>

514
00:27:15,330 --> 00:27:19,500
static<font color="#E5E5E5"> analysis easy because we get</font>

515
00:27:17,640 --> 00:27:22,700
source code we're exploiting the

516
00:27:19,500 --> 00:27:25,230
application logic<font color="#CCCCCC"> versus WCF itself</font>

517
00:27:22,700 --> 00:27:26,669
<font color="#E5E5E5">developers don't seem to be considering</font>

518
00:27:25,230 --> 00:27:28,799
<font color="#CCCCCC">that we're going to</font><font color="#E5E5E5"> interact with their</font>

519
00:27:26,669 --> 00:27:34,260
services or if they do they they don't

520
00:27:28,799 --> 00:27:35,549
<font color="#E5E5E5">secure it</font><font color="#CCCCCC"> properly and</font><font color="#E5E5E5"> WCF</font><font color="#CCCCCC"> like I</font><font color="#E5E5E5"> said I</font>

521
00:27:34,260 --> 00:27:38,129
haven't<font color="#E5E5E5"> heard a</font><font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> people talking</font>

522
00:27:35,549 --> 00:27:40,139
about<font color="#CCCCCC"> it so I hope that this talk you've</font>

523
00:27:38,130 --> 00:27:43,110
kind of<font color="#E5E5E5"> learned how</font><font color="#CCCCCC"> to do it and can</font><font color="#E5E5E5"> go</font>

524
00:27:40,140 --> 00:27:45,200
out and<font color="#E5E5E5"> find your</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> bugs and that's</font>

525
00:27:43,110 --> 00:27:50,750
all I got

526
00:27:45,200 --> 00:27:53,250
[Applause]

527
00:27:50,750 --> 00:27:55,169
so we have a<font color="#E5E5E5"> couple minutes</font><font color="#CCCCCC"> for</font>

528
00:27:53,250 --> 00:27:57,269
questions does anybody have any or

529
00:27:55,169 --> 00:28:06,990
either<font color="#E5E5E5"> here or</font><font color="#CCCCCC"> online if anybody's</font>

530
00:27:57,269 --> 00:28:09,120
<font color="#E5E5E5">listening</font><font color="#CCCCCC"> it yes do you know it is</font><font color="#E5E5E5"> WCF</font>

531
00:28:06,990 --> 00:28:10,679
have like encryption support I think<font color="#CCCCCC"> you</font>

532
00:28:09,120 --> 00:28:14,939
touched<font color="#E5E5E5"> on it but I was distracted</font><font color="#CCCCCC"> it</font>

533
00:28:10,679 --> 00:28:18,269
does and it's<font color="#CCCCCC"> it's default</font><font color="#E5E5E5"> actually to</font>

534
00:28:14,940 --> 00:28:30,380
use TLS to transport the messages<font color="#E5E5E5"> yeah</font>

535
00:28:18,269 --> 00:28:33,840
yes sir<font color="#CCCCCC"> I believe there is I</font><font color="#E5E5E5"> haven't</font>

536
00:28:30,380 --> 00:28:36,480
<font color="#E5E5E5">I've only like I scanned one with nmap</font>

537
00:28:33,840 --> 00:28:39,720
the other day and I forget exactly<font color="#E5E5E5"> what</font>

538
00:28:36,480 --> 00:28:49,279
it<font color="#E5E5E5"> says but</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think I think the answer</font>

539
00:28:39,720 --> 00:28:49,279
<font color="#CCCCCC">is yes</font><font color="#E5E5E5"> so any other</font><font color="#CCCCCC"> questions</font>

540
00:28:49,399 --> 00:28:58,228
cool<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much Chris</font>

541
00:28:52,420 --> 00:28:58,229
[Applause]

