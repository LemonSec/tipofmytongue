1
00:00:00,030 --> 00:00:08,940
so hi<font color="#E5E5E5"> everyone my name</font><font color="#CCCCCC"> is Max</font><font color="#E5E5E5"> and I</font>

2
00:00:04,920 --> 00:00:11,280
presented this talk<font color="#E5E5E5"> at Def Con last year</font>

3
00:00:08,940 --> 00:00:22,439
and today<font color="#E5E5E5"> I gonna present updated</font>

4
00:00:11,280 --> 00:00:24,269
version of this research so<font color="#E5E5E5"> okay first</font>

5
00:00:22,439 --> 00:00:26,099
of all<font color="#E5E5E5"> I'd like to</font><font color="#CCCCCC"> thank besides</font>

6
00:00:24,269 --> 00:00:27,869
<font color="#E5E5E5">organizers to give me an</font><font color="#CCCCCC"> opportunity to</font>

7
00:00:26,099 --> 00:00:29,760
<font color="#CCCCCC">speak here it's really</font><font color="#E5E5E5"> great</font>

8
00:00:27,869 --> 00:00:32,519
I'm own ability researcher must<font color="#E5E5E5"> be</font>

9
00:00:29,760 --> 00:00:37,020
focusing on<font color="#E5E5E5"> box hunting in memory unsafe</font>

10
00:00:32,520 --> 00:00:40,350
languages and I try to write exploits

11
00:00:37,020 --> 00:00:44,399
for<font color="#E5E5E5"> those box and then use them now all</font>

12
00:00:40,350 --> 00:00:46,620
kinds of<font color="#E5E5E5"> security</font><font color="#CCCCCC"> operations so this</font>

13
00:00:44,399 --> 00:00:47,250
presentation is logically<font color="#E5E5E5"> divided into</font>

14
00:00:46,620 --> 00:00:49,349
three parts

15
00:00:47,250 --> 00:00:52,350
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> first part I'm going to explain</font>

16
00:00:49,350 --> 00:00:55,379
why<font color="#CCCCCC"> we're and</font><font color="#E5E5E5"> how we can search</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> bugs</font>

17
00:00:52,350 --> 00:00:57,510
in malware<font color="#E5E5E5"> and why</font><font color="#CCCCCC"> coleridge guide</font>

18
00:00:55,379 --> 00:01:01,050
advising is the best technique to<font color="#E5E5E5"> find</font>

19
00:00:57,510 --> 00:01:03,269
those bugs<font color="#E5E5E5"> and what kind of problems we</font>

20
00:01:01,050 --> 00:01:06,509
have to address when our target is

21
00:01:03,270 --> 00:01:08,340
malware<font color="#CCCCCC"> and of course I am planning to</font>

22
00:01:06,510 --> 00:01:11,610
show several<font color="#E5E5E5"> interesting demos on how to</font>

23
00:01:08,340 --> 00:01:15,390
pass malware<font color="#E5E5E5"> and how we can exploit bugs</font>

24
00:01:11,610 --> 00:01:17,100
in them in order<font color="#E5E5E5"> to get some profit and</font>

25
00:01:15,390 --> 00:01:21,150
before I<font color="#E5E5E5"> actually start fighting</font>

26
00:01:17,100 --> 00:01:23,220
binaries<font color="#CCCCCC"> I decided to find and take</font><font color="#E5E5E5"> a</font>

27
00:01:21,150 --> 00:01:26,369
look over some leaked malware source

28
00:01:23,220 --> 00:01:29,670
code files<font color="#CCCCCC"> just to understand whether</font>

29
00:01:26,369 --> 00:01:31,710
this idea feasible or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> does it make</font>

30
00:01:29,670 --> 00:01:34,500
<font color="#E5E5E5">sense at all and guess what</font>

31
00:01:31,710 --> 00:01:36,298
<font color="#CCCCCC">right</font><font color="#E5E5E5"> in the one of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first source</font>

32
00:01:34,500 --> 00:01:38,610
code file I<font color="#CCCCCC"> found this comment in</font>

33
00:01:36,299 --> 00:01:41,400
Russian which can be translated<font color="#CCCCCC"> in the</font>

34
00:01:38,610 --> 00:01:45,000
following way so I was<font color="#E5E5E5"> really laughing</font>

35
00:01:41,400 --> 00:01:47,399
for a<font color="#E5E5E5"> couple of minutes</font><font color="#CCCCCC"> I said okay it</font>

36
00:01:45,000 --> 00:01:51,390
<font color="#E5E5E5">looks like this idea makes sense and</font><font color="#CCCCCC"> I'm</font>

37
00:01:47,399 --> 00:01:53,610
gonna find a lot of<font color="#E5E5E5"> bugs when we when</font>

38
00:01:51,390 --> 00:01:56,100
they try when they write malware<font color="#CCCCCC"> they</font>

39
00:01:53,610 --> 00:01:59,850
have to do a lot of complex<font color="#CCCCCC"> things like</font>

40
00:01:56,100 --> 00:02:01,979
initial infection<font color="#CCCCCC"> payload delivery</font><font color="#E5E5E5"> and</font>

41
00:01:59,850 --> 00:02:04,048
most importantly communication with<font color="#CCCCCC"> situ</font>

42
00:02:01,979 --> 00:02:07,200
there are a lot of things that can

43
00:02:04,049 --> 00:02:09,560
potentially<font color="#E5E5E5"> go</font><font color="#CCCCCC"> wrong here so an ideal</font>

44
00:02:07,200 --> 00:02:12,840
place<font color="#CCCCCC"> to find bugs for us would</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> a</font>

45
00:02:09,560 --> 00:02:14,010
parser of incoming commands from<font color="#CCCCCC"> situ</font><font color="#E5E5E5"> or</font>

46
00:02:12,840 --> 00:02:17,909
some

47
00:02:14,010 --> 00:02:20,280
really complex<font color="#E5E5E5"> file format parser while</font>

48
00:02:17,909 --> 00:02:22,548
some samples<font color="#CCCCCC"> large very trivial</font>

49
00:02:20,280 --> 00:02:25,739
algorithms to communicate with<font color="#CCCCCC"> see to</font>

50
00:02:22,549 --> 00:02:28,019
the a lot of samples<font color="#E5E5E5"> that support</font>

51
00:02:25,739 --> 00:02:29,819
complex<font color="#E5E5E5"> communication protocols</font>

52
00:02:28,019 --> 00:02:33,750
<font color="#E5E5E5">implemented from scratch</font>

53
00:02:29,819 --> 00:02:37,440
so despite of<font color="#E5E5E5"> this complexity</font><font color="#CCCCCC"> blackhat</font>

54
00:02:33,750 --> 00:02:40,709
malware writers rarely<font color="#E5E5E5"> interested in</font>

55
00:02:37,440 --> 00:02:42,840
implementing<font color="#E5E5E5"> secure record for many</font>

56
00:02:40,709 --> 00:02:46,140
reasons<font color="#E5E5E5"> such as lack of time or</font>

57
00:02:42,840 --> 00:02:49,650
experience or expertise<font color="#E5E5E5"> so in most</font><font color="#CCCCCC"> cases</font>

58
00:02:46,140 --> 00:02:52,798
we<font color="#E5E5E5"> will not see a</font><font color="#CCCCCC"> SLAR Deb</font><font color="#E5E5E5"> or any other</font>

59
00:02:49,650 --> 00:02:56,040
anti exploitation techniques applied for

60
00:02:52,799 --> 00:02:59,459
malicious binaries sometimes<font color="#E5E5E5"> the code is</font>

61
00:02:56,040 --> 00:03:02,578
so badly written that it doesn't work if

62
00:02:59,459 --> 00:03:04,799
<font color="#E5E5E5">environment has slightly changed and of</font>

63
00:03:02,579 --> 00:03:11,400
course<font color="#E5E5E5"> session for box is always fun I</font>

64
00:03:04,799 --> 00:03:13,739
<font color="#E5E5E5">think using the same so hacking back in</font>

65
00:03:11,400 --> 00:03:16,500
general<font color="#E5E5E5"> it's pretty well known research</font>

66
00:03:13,739 --> 00:03:18,810
topic<font color="#E5E5E5"> and kindly I can safely guess this</font>

67
00:03:16,500 --> 00:03:21,900
idea<font color="#E5E5E5"> has lived with hackers community</font>

68
00:03:18,810 --> 00:03:23,880
for decade there were a bunch<font color="#E5E5E5"> of great</font>

69
00:03:21,900 --> 00:03:26,459
talks<font color="#CCCCCC"> in the past I</font><font color="#E5E5E5"> just listed a couple</font>

70
00:03:23,880 --> 00:03:29,190
<font color="#E5E5E5">of them</font><font color="#CCCCCC"> but what about actually fighting</font>

71
00:03:26,459 --> 00:03:31,349
malware well<font color="#E5E5E5"> there are much much less</font>

72
00:03:29,190 --> 00:03:34,799
publications<font color="#E5E5E5"> in this field actually</font>

73
00:03:31,349 --> 00:03:37,589
<font color="#CCCCCC">there is</font><font color="#E5E5E5"> no systematic</font><font color="#CCCCCC"> research at all I</font>

74
00:03:34,799 --> 00:03:39,870
found several research<font color="#E5E5E5"> papers published</font>

75
00:03:37,590 --> 00:03:42,540
by academia<font color="#E5E5E5"> but the main goal of this</font>

76
00:03:39,870 --> 00:03:45,480
<font color="#E5E5E5">researchers was to find and trigger new</font>

77
00:03:42,540 --> 00:03:48,690
code paths<font color="#CCCCCC"> hidden in malware samples</font>

78
00:03:45,480 --> 00:03:51,418
<font color="#E5E5E5">using</font><font color="#CCCCCC"> Feisal</font><font color="#E5E5E5"> which can be really useful</font>

79
00:03:48,690 --> 00:03:53,430
for malware<font color="#E5E5E5"> analysts but in this talk</font>

80
00:03:51,419 --> 00:03:55,079
I'm going<font color="#E5E5E5"> to focus on bug hunting and</font>

81
00:03:53,430 --> 00:03:57,389
how we can use this box to defend

82
00:03:55,079 --> 00:04:00,000
<font color="#E5E5E5">against malware which is the bit</font>

83
00:03:57,389 --> 00:04:01,739
<font color="#E5E5E5">opposite so let's imagine that we found</font>

84
00:04:00,000 --> 00:04:04,079
some memory corruption<font color="#E5E5E5"> but it goes</font>

85
00:04:01,739 --> 00:04:06,959
<font color="#CCCCCC">crashing some samples</font><font color="#E5E5E5"> that are spraying</font>

86
00:04:04,079 --> 00:04:09,269
around<font color="#E5E5E5"> the plane such</font><font color="#CCCCCC"> bug might be quite</font>

87
00:04:06,959 --> 00:04:11,519
<font color="#E5E5E5">useful</font><font color="#CCCCCC"> I guess many of you remember a</font>

88
00:04:09,269 --> 00:04:13,980
famous<font color="#CCCCCC"> kills fish found in</font><font color="#E5E5E5"> Zbornak right</font>

89
00:04:11,519 --> 00:04:16,649
sample which significantly<font color="#CCCCCC"> helped to</font>

90
00:04:13,980 --> 00:04:19,230
slow down<font color="#E5E5E5"> spreading of this sample and</font>

91
00:04:16,649 --> 00:04:22,029
<font color="#CCCCCC">this way reduce</font>

92
00:04:19,230 --> 00:04:24,160
malicious impact<font color="#E5E5E5"> so if you can place one</font>

93
00:04:22,029 --> 00:04:26,440
<font color="#E5E5E5">file</font><font color="#CCCCCC"> with special name in one</font><font color="#E5E5E5"> specific</font>

94
00:04:24,160 --> 00:04:28,690
folder<font color="#CCCCCC"> wanna cry</font><font color="#E5E5E5"> will not infect such</font>

95
00:04:26,440 --> 00:04:30,730
machine of<font color="#E5E5E5"> course they let this kill</font>

96
00:04:28,690 --> 00:04:32,950
switch<font color="#E5E5E5"> on purpose but if we can find the</font>

97
00:04:30,730 --> 00:04:35,410
switches automatically<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> see me</font>

98
00:04:32,950 --> 00:04:39,280
<font color="#E5E5E5">automatically in this case we don't even</font>

99
00:04:35,410 --> 00:04:40,990
need such gifts from them it's

100
00:04:39,280 --> 00:04:42,940
especially cool if you can do that

101
00:04:40,990 --> 00:04:45,160
against botnet which is trying<font color="#E5E5E5"> to</font>

102
00:04:42,940 --> 00:04:48,550
<font color="#E5E5E5">perform a DDoS attack against us for</font>

103
00:04:45,160 --> 00:04:52,090
example if<font color="#CCCCCC"> boards have someone</font><font color="#E5E5E5"> abilities</font>

104
00:04:48,550 --> 00:04:55,810
the victims response<font color="#E5E5E5"> parts we just need</font>

105
00:04:52,090 --> 00:04:57,340
to send our exploit<font color="#E5E5E5"> back to board and it</font>

106
00:04:55,810 --> 00:04:58,990
<font color="#E5E5E5">will cause a crash later and the</font><font color="#CCCCCC"> dam</font>

107
00:04:57,340 --> 00:05:02,289
<font color="#E5E5E5">I'll show</font><font color="#CCCCCC"> that it's more than possible</font>

108
00:04:58,990 --> 00:05:04,780
<font color="#E5E5E5">so well it would be</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> great if</font><font color="#CCCCCC"> we</font>

109
00:05:02,290 --> 00:05:07,060
can trigger<font color="#E5E5E5"> remote code execution we can</font>

110
00:05:04,780 --> 00:05:09,549
take control<font color="#E5E5E5"> over or</font><font color="#CCCCCC"> shutdown</font><font color="#E5E5E5"> but read</font>

111
00:05:07,060 --> 00:05:12,400
botnet<font color="#CCCCCC"> or we can even try</font><font color="#E5E5E5"> to track down</font>

112
00:05:09,550 --> 00:05:16,090
botnet owners and a lot of<font color="#CCCCCC"> other things</font>

113
00:05:12,400 --> 00:05:19,960
and of course our like sweet dream<font color="#E5E5E5"> block</font>

114
00:05:16,090 --> 00:05:21,580
is<font color="#CCCCCC"> air-sea in situ</font><font color="#E5E5E5"> in this case we have</font>

115
00:05:19,960 --> 00:05:23,799
a<font color="#E5E5E5"> god mode and can do</font><font color="#CCCCCC"> everything</font>

116
00:05:21,580 --> 00:05:27,039
<font color="#E5E5E5">whatever we want</font><font color="#CCCCCC"> but in my opinion</font>

117
00:05:23,800 --> 00:05:29,140
nowadays it's less likely because<font color="#E5E5E5"> see</font>

118
00:05:27,040 --> 00:05:32,650
<font color="#E5E5E5">tool usually written in memory safe</font>

119
00:05:29,140 --> 00:05:35,500
languages like PHP go<font color="#CCCCCC"> Python what</font>

120
00:05:32,650 --> 00:05:40,179
everyone<font color="#E5E5E5"> so actually I don't see any</font>

121
00:05:35,500 --> 00:05:42,940
reason to<font color="#E5E5E5"> write</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> C C++</font><font color="#CCCCCC"> may be</font>

122
00:05:40,180 --> 00:05:44,890
performance<font color="#CCCCCC"> ok how can we find those</font>

123
00:05:42,940 --> 00:05:46,570
bugs<font color="#CCCCCC"> today fighting is the most</font>

124
00:05:44,890 --> 00:05:48,909
efficient technique to search for bugs

125
00:05:46,570 --> 00:05:50,800
in memory<font color="#CCCCCC"> unsafe languages</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> if I</font>

126
00:05:48,910 --> 00:05:53,560
think<font color="#E5E5E5"> is very important for software</font>

127
00:05:50,800 --> 00:05:57,100
<font color="#CCCCCC">security at</font><font color="#E5E5E5"> all top tech companies huge</font>

128
00:05:53,560 --> 00:05:59,440
<font color="#E5E5E5">open source projects who integrated</font>

129
00:05:57,100 --> 00:06:02,620
<font color="#CCCCCC">files</font><font color="#E5E5E5"> within their software development</font>

130
00:05:59,440 --> 00:06:06,270
lifecycle<font color="#CCCCCC"> there all report that security</font>

131
00:06:02,620 --> 00:06:08,650
has<font color="#CCCCCC"> increased by after they apply</font><font color="#E5E5E5"> poison</font>

132
00:06:06,270 --> 00:06:11,349
<font color="#CCCCCC">Lindos Torvald</font><font color="#E5E5E5"> recently said that</font>

133
00:06:08,650 --> 00:06:14,099
coverage guide advising is improving

134
00:06:11,350 --> 00:06:16,390
Linux kernel security which is<font color="#E5E5E5"> very</font><font color="#CCCCCC"> cool</font>

135
00:06:14,100 --> 00:06:17,830
okay what's<font color="#CCCCCC"> Phi Z Phi think is actually</font>

136
00:06:16,390 --> 00:06:19,870
<font color="#E5E5E5">very</font><font color="#CCCCCC"> simple technique you provide</font>

137
00:06:17,830 --> 00:06:22,359
potentially in violet or malformed input

138
00:06:19,870 --> 00:06:24,310
to your<font color="#CCCCCC"> software and monitor</font><font color="#E5E5E5"> your</font>

139
00:06:22,360 --> 00:06:26,440
program for<font color="#E5E5E5"> crash so nothing hard you</font>

140
00:06:24,310 --> 00:06:29,500
start your<font color="#CCCCCC"> visor visor generates input</font>

141
00:06:26,440 --> 00:06:31,240
and<font color="#E5E5E5"> sends its input into the program</font><font color="#CCCCCC"> all</font>

142
00:06:29,500 --> 00:06:33,290
you need<font color="#E5E5E5"> is to see it and pray that it</font>

143
00:06:31,240 --> 00:06:36,050
<font color="#CCCCCC">will find</font><font color="#E5E5E5"> something I usually</font><font color="#CCCCCC"> very</font>

144
00:06:33,290 --> 00:06:37,760
my father report one<font color="#E5E5E5"> unique</font><font color="#CCCCCC"> crash</font><font color="#E5E5E5"> and</font>

145
00:06:36,050 --> 00:06:41,150
read it's like I'm really<font color="#E5E5E5"> happy</font>

146
00:06:37,760 --> 00:06:43,430
so what's coverage guide advising many

147
00:06:41,150 --> 00:06:46,609
<font color="#E5E5E5">years ago when</font><font color="#CCCCCC"> fighters was dumped and</font>

148
00:06:43,430 --> 00:06:49,010
blind<font color="#E5E5E5"> father considered the program</font><font color="#CCCCCC"> as</font>

149
00:06:46,610 --> 00:06:51,440
black<font color="#E5E5E5"> box and into which we</font><font color="#CCCCCC"> sent our</font>

150
00:06:49,010 --> 00:06:53,690
test cases<font color="#E5E5E5"> it usually worked pretty good</font>

151
00:06:51,440 --> 00:06:56,060
<font color="#E5E5E5">for trivial box</font><font color="#CCCCCC"> the delicated</font><font color="#E5E5E5"> not deep</font>

152
00:06:53,690 --> 00:06:59,000
in the code<font color="#E5E5E5"> but people want to find more</font>

153
00:06:56,060 --> 00:07:02,120
complex problems deeper in the<font color="#CCCCCC"> program's</font>

154
00:06:59,000 --> 00:07:04,190
<font color="#CCCCCC">so they decided to instrument</font><font color="#E5E5E5"> program</font>

155
00:07:02,120 --> 00:07:07,190
under test and<font color="#E5E5E5"> provide information about</font>

156
00:07:04,190 --> 00:07:09,320
coverage<font color="#CCCCCC"> back into</font><font color="#E5E5E5"> Pfizer so the best</font>

157
00:07:07,190 --> 00:07:12,469
example<font color="#CCCCCC"> of such Pfizer is famous</font>

158
00:07:09,320 --> 00:07:14,240
American fighter slope or<font color="#E5E5E5"> effect during</font>

159
00:07:12,470 --> 00:07:16,850
coverage guided files<font color="#E5E5E5"> and if we manage</font>

160
00:07:14,240 --> 00:07:19,460
to find<font color="#E5E5E5"> a test case that triggers a new</font>

161
00:07:16,850 --> 00:07:21,590
<font color="#E5E5E5">code paths in our program</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> fighter</font>

162
00:07:19,460 --> 00:07:24,169
saves this<font color="#E5E5E5"> new test case and then</font>

163
00:07:21,590 --> 00:07:26,330
perform subsequent mutation on top of

164
00:07:24,170 --> 00:07:30,580
this new<font color="#CCCCCC"> finding</font><font color="#E5E5E5"> and for the next code</font>

165
00:07:26,330 --> 00:07:33,500
<font color="#CCCCCC">pass and for</font><font color="#E5E5E5"> the next code and this way</font>

166
00:07:30,580 --> 00:07:37,190
we can touch more code deeper in our

167
00:07:33,500 --> 00:07:39,470
program and in theory<font color="#E5E5E5"> of</font><font color="#CCCCCC"> course</font><font color="#E5E5E5"> blind</font>

168
00:07:37,190 --> 00:07:41,780
<font color="#E5E5E5">fighter can also find this code path but</font>

169
00:07:39,470 --> 00:07:46,610
it's much less likely let's consider for

170
00:07:41,780 --> 00:07:50,239
<font color="#CCCCCC">example this</font><font color="#E5E5E5"> example of code so in case</font>

171
00:07:46,610 --> 00:07:53,240
of FL<font color="#E5E5E5"> it</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> take minutes to find</font><font color="#CCCCCC"> this</font>

172
00:07:50,240 --> 00:07:56,150
<font color="#CCCCCC">null pointer dereference</font><font color="#E5E5E5"> and it might</font>

173
00:07:53,240 --> 00:08:00,110
take it sounds in years for dumb father

174
00:07:56,150 --> 00:08:02,929
<font color="#CCCCCC">so you're gonna you can</font><font color="#E5E5E5"> see the problem</font>

175
00:08:00,110 --> 00:08:06,560
<font color="#E5E5E5">yeah and why it's very efficient</font>

176
00:08:02,930 --> 00:08:08,120
technique<font color="#E5E5E5"> to search for bugs</font><font color="#CCCCCC"> today</font>

177
00:08:06,560 --> 00:08:11,030
<font color="#E5E5E5">state-of-the-art coverage</font><font color="#CCCCCC"> guided</font>

178
00:08:08,120 --> 00:08:13,910
<font color="#CCCCCC">fighters are FL and lip visors there are</font>

179
00:08:11,030 --> 00:08:16,369
a lot of FL<font color="#E5E5E5"> Forks design is for special</font>

180
00:08:13,910 --> 00:08:19,100
purposes like kernel-mode<font color="#CCCCCC"> Pfizer k FL</font>

181
00:08:16,370 --> 00:08:23,900
and what is more important<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us a port</font>

182
00:08:19,100 --> 00:08:26,000
of FL for<font color="#CCCCCC"> windows benefit</font><font color="#E5E5E5"> FL basically</font>

183
00:08:23,900 --> 00:08:28,460
injects instrumentation routines during

184
00:08:26,000 --> 00:08:31,700
<font color="#CCCCCC">the compilation step</font><font color="#E5E5E5"> so the resultant</font>

185
00:08:28,460 --> 00:08:35,120
binary will have this<font color="#CCCCCC"> FL me maybe lock</font>

186
00:08:31,700 --> 00:08:38,330
routine injected in each basic block of

187
00:08:35,120 --> 00:08:41,150
your binary<font color="#E5E5E5"> however in case of malware</font>

188
00:08:38,330 --> 00:08:44,360
we have one tiny problem<font color="#CCCCCC"> and I guess</font>

189
00:08:41,150 --> 00:08:47,040
many<font color="#E5E5E5"> of you know it's you don't</font><font color="#CCCCCC"> have</font>

190
00:08:44,360 --> 00:08:48,600
source code<font color="#E5E5E5"> so I guess it's not sir</font>

191
00:08:47,040 --> 00:08:51,000
right<font color="#CCCCCC"> actually we have even more</font>

192
00:08:48,600 --> 00:08:52,860
problems<font color="#CCCCCC"> my way usually</font><font color="#E5E5E5"> unpack and</font>

193
00:08:51,000 --> 00:08:55,380
execute most important part of the

194
00:08:52,860 --> 00:08:58,110
<font color="#CCCCCC">accord</font><font color="#E5E5E5"> dynamically at runtime</font><font color="#CCCCCC"> so in this</font>

195
00:08:55,380 --> 00:09:00,420
case<font color="#CCCCCC"> source</font><font color="#E5E5E5"> code instrumentation even if</font>

196
00:08:58,110 --> 00:09:02,490
we have source code is useless<font color="#E5E5E5"> we have</font>

197
00:09:00,420 --> 00:09:05,399
to find some way to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> provide</font>

198
00:09:02,490 --> 00:09:07,740
back<font color="#CCCCCC"> to our Pfizer</font><font color="#E5E5E5"> coverage of such</font>

199
00:09:05,399 --> 00:09:10,980
dynamically unpacked<font color="#E5E5E5"> and executed code</font>

200
00:09:07,740 --> 00:09:13,380
<font color="#CCCCCC">paths and we can try some tools to</font>

201
00:09:10,980 --> 00:09:16,410
<font color="#E5E5E5">automatically unpack some samples</font>

202
00:09:13,380 --> 00:09:18,300
sometimes<font color="#CCCCCC"> it works sometimes it</font><font color="#E5E5E5"> not but</font>

203
00:09:16,410 --> 00:09:21,930
in general I think<font color="#E5E5E5"> it's not scalable</font>

204
00:09:18,300 --> 00:09:23,969
<font color="#E5E5E5">approach and besides that if you want to</font>

205
00:09:21,930 --> 00:09:26,370
search for<font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> in situ communication</font>

206
00:09:23,970 --> 00:09:28,769
protocol we<font color="#CCCCCC"> have we have to encrypt</font><font color="#E5E5E5"> our</font>

207
00:09:26,370 --> 00:09:30,360
<font color="#E5E5E5">test cases the same way a small way</font><font color="#CCCCCC"> so</font>

208
00:09:28,769 --> 00:09:34,050
there<font color="#E5E5E5"> are a lot of requirements for</font><font color="#CCCCCC"> our</font>

209
00:09:30,360 --> 00:09:36,149
<font color="#E5E5E5">Pfizer in this case thanks God there is</font>

210
00:09:34,050 --> 00:09:38,519
<font color="#CCCCCC">Vienna fell for</font><font color="#E5E5E5"> Windows binaries</font><font color="#CCCCCC"> that</font>

211
00:09:36,149 --> 00:09:41,269
<font color="#CCCCCC">doesn't</font><font color="#E5E5E5"> use source code instrumentation</font>

212
00:09:38,519 --> 00:09:43,589
is implemented on<font color="#E5E5E5"> top of</font><font color="#CCCCCC"> Dyna Mario</font>

213
00:09:41,269 --> 00:09:46,350
<font color="#E5E5E5">dynamic binary instrumentation framework</font>

214
00:09:43,589 --> 00:09:48,660
<font color="#E5E5E5">I'm not going I</font><font color="#CCCCCC"> don't want to explain</font>

215
00:09:46,350 --> 00:09:51,060
what is dynamic binary instrumentation

216
00:09:48,660 --> 00:09:52,980
in details but<font color="#CCCCCC"> basically it's technique</font>

217
00:09:51,060 --> 00:09:54,719
for analyzing the<font color="#CCCCCC"> behavior of</font><font color="#E5E5E5"> a binary</font>

218
00:09:52,980 --> 00:09:58,019
application at runtime through the

219
00:09:54,720 --> 00:10:00,990
injection<font color="#E5E5E5"> of instrumentation code so I</font>

220
00:09:58,019 --> 00:10:03,750
want just<font color="#E5E5E5"> a basic idea</font><font color="#CCCCCC"> let's say you</font>

221
00:10:00,990 --> 00:10:05,639
have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> DBA Engine launcher</font><font color="#E5E5E5"> and binary</font>

222
00:10:03,750 --> 00:10:07,709
you want to instrument<font color="#CCCCCC"> so at step</font><font color="#E5E5E5"> one</font>

223
00:10:05,639 --> 00:10:09,660
you launch your binary suspended you

224
00:10:07,709 --> 00:10:12,388
inject your instrumentation library into

225
00:10:09,660 --> 00:10:15,089
this<font color="#E5E5E5"> process memory then you hook entry</font>

226
00:10:12,389 --> 00:10:20,430
point to be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> redirect control</font>

227
00:10:15,089 --> 00:10:22,709
flow into your injected library and this

228
00:10:20,430 --> 00:10:24,989
<font color="#E5E5E5">step</font><font color="#CCCCCC"> actually starts</font><font color="#E5E5E5"> the magic</font><font color="#CCCCCC"> dinah</font>

229
00:10:22,709 --> 00:10:27,750
Mario<font color="#E5E5E5"> takes the first basic</font><font color="#CCCCCC"> block copies</font>

230
00:10:24,990 --> 00:10:30,480
it in a special<font color="#E5E5E5"> place</font><font color="#CCCCCC"> called code cache</font>

231
00:10:27,750 --> 00:10:32,760
then it<font color="#E5E5E5"> transforms</font><font color="#CCCCCC"> its basic</font><font color="#E5E5E5"> block</font>

232
00:10:30,480 --> 00:10:34,560
<font color="#E5E5E5">dynamically to be able to inject</font>

233
00:10:32,760 --> 00:10:36,420
instrumentation<font color="#CCCCCC"> extractions</font><font color="#E5E5E5"> and then</font>

234
00:10:34,560 --> 00:10:38,219
execute them<font color="#CCCCCC"> so the most challenging</font>

235
00:10:36,420 --> 00:10:40,949
<font color="#CCCCCC">stuff is to make this execution</font>

236
00:10:38,220 --> 00:10:44,399
<font color="#E5E5E5">transparent towards instrumented binary</font>

237
00:10:40,949 --> 00:10:46,620
and<font color="#CCCCCC"> the NMR</font><font color="#E5E5E5"> you knows how</font><font color="#CCCCCC"> to achieve</font>

238
00:10:44,399 --> 00:10:49,500
this<font color="#E5E5E5"> transparency so it's very</font>

239
00:10:46,620 --> 00:10:51,689
sophisticated<font color="#CCCCCC"> too and I highly</font><font color="#E5E5E5"> recommend</font>

240
00:10:49,500 --> 00:10:53,670
if you want<font color="#CCCCCC"> to use if you want to</font>

241
00:10:51,689 --> 00:10:56,019
analyze<font color="#E5E5E5"> your binary dynamic</font>

242
00:10:53,670 --> 00:10:59,139
so then it takes<font color="#E5E5E5"> names basic block</font>

243
00:10:56,019 --> 00:11:01,120
<font color="#E5E5E5">instrument it</font><font color="#CCCCCC"> executes and so on</font>

244
00:10:59,139 --> 00:11:04,600
we had three challenges<font color="#CCCCCC"> lack of source</font>

245
00:11:01,120 --> 00:11:06,459
code obfuscation<font color="#E5E5E5"> and encryption so</font><font color="#CCCCCC"> VNAF</font>

246
00:11:04,600 --> 00:11:09,009
<font color="#CCCCCC">al+ dynamo</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have solved the first</font>

247
00:11:06,459 --> 00:11:12,550
problem<font color="#E5E5E5"> and extra creates a new one VfL</font>

248
00:11:09,009 --> 00:11:14,170
supports<font color="#E5E5E5"> only</font><font color="#CCCCCC"> file based</font><font color="#E5E5E5"> filing and to</font>

249
00:11:12,550 --> 00:11:17,439
address<font color="#E5E5E5"> this problem i decided to</font>

250
00:11:14,170 --> 00:11:19,389
<font color="#E5E5E5">implement a patch for bnfl suppose we</font>

251
00:11:17,439 --> 00:11:21,939
have our Father<font color="#E5E5E5"> and our malware</font>

252
00:11:19,389 --> 00:11:24,930
instrumented by<font color="#E5E5E5"> naina Mario let's assume</font>

253
00:11:21,939 --> 00:11:27,819
<font color="#E5E5E5">our sample sent requests to see</font><font color="#CCCCCC"> to</font>

254
00:11:24,930 --> 00:11:30,069
instead<font color="#E5E5E5"> of actually send it to see</font><font color="#CCCCCC"> to we</font>

255
00:11:27,819 --> 00:11:32,649
redirect<font color="#E5E5E5"> this request to</font><font color="#CCCCCC"> our father our</font>

256
00:11:30,069 --> 00:11:34,719
father generate new<font color="#E5E5E5"> tests response and</font>

257
00:11:32,649 --> 00:11:37,180
creep<font color="#CCCCCC"> these responses if it's necessary</font>

258
00:11:34,720 --> 00:11:40,149
and then send this response back into

259
00:11:37,180 --> 00:11:42,239
our sample then we update korish map

260
00:11:40,149 --> 00:11:44,800
<font color="#CCCCCC">provides</font><font color="#E5E5E5"> coverage back to our</font><font color="#CCCCCC"> Pfizer</font>

261
00:11:42,240 --> 00:11:47,889
<font color="#CCCCCC">restart our target routine or entire</font>

262
00:11:44,800 --> 00:11:49,809
sample<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> till</font><font color="#E5E5E5"> we find one so</font>

263
00:11:47,889 --> 00:11:52,120
actually<font color="#CCCCCC"> all you need is to specify the</font>

264
00:11:49,809 --> 00:11:54,930
address port and<font color="#E5E5E5"> seat file that's all</font>

265
00:11:52,120 --> 00:11:57,370
<font color="#E5E5E5">Pfizer will do all the rest for you and</font>

266
00:11:54,930 --> 00:12:00,040
if<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> encrypt your</font><font color="#E5E5E5"> test case</font>

267
00:11:57,370 --> 00:12:02,889
<font color="#E5E5E5">before send them back you can provide a</font>

268
00:12:00,040 --> 00:12:06,430
past due to your custom like test cases

269
00:12:02,889 --> 00:12:09,040
encryption library when FL will load

270
00:12:06,430 --> 00:12:11,709
this library<font color="#E5E5E5"> and we'll</font><font color="#CCCCCC"> use this exported</font>

271
00:12:09,040 --> 00:12:15,519
<font color="#E5E5E5">French function from your library</font><font color="#CCCCCC"> to be</font>

272
00:12:11,709 --> 00:12:17,589
able<font color="#E5E5E5"> to encrypt each disk case so</font><font color="#CCCCCC"> ok</font>

273
00:12:15,519 --> 00:12:22,680
let's<font color="#CCCCCC"> see</font><font color="#E5E5E5"> how it actually works</font>

274
00:12:17,589 --> 00:12:22,680
<font color="#CCCCCC">I've prepared a small</font><font color="#E5E5E5"> video</font>

275
00:12:31,470 --> 00:12:34,470
<font color="#E5E5E5">maybe</font>

276
00:12:37,300 --> 00:12:44,859
so in this<font color="#E5E5E5"> video we have a release</font>

277
00:12:41,080 --> 00:12:47,800
version of Vienna<font color="#CCCCCC"> fail we have</font>

278
00:12:44,860 --> 00:12:49,300
Dexter version<font color="#E5E5E5"> to our malware designed</font>

279
00:12:47,800 --> 00:12:52,060
<font color="#E5E5E5">to steal credit and debit cards</font>

280
00:12:49,300 --> 00:12:55,510
<font color="#E5E5E5">information</font><font color="#CCCCCC"> from point-of-sale terminals</font>

281
00:12:52,060 --> 00:13:01,030
<font color="#E5E5E5">it actually received and sent a request</font>

282
00:12:55,510 --> 00:13:04,720
<font color="#E5E5E5">or HTTP protocol it is get</font><font color="#CCCCCC"> cookie</font>

283
00:13:01,030 --> 00:13:10,060
functions to be<font color="#CCCCCC"> able to send commands</font><font color="#E5E5E5"> to</font>

284
00:13:04,720 --> 00:13:13,080
<font color="#E5E5E5">our sample so when malware</font><font color="#CCCCCC"> send requests</font>

285
00:13:10,060 --> 00:13:16,650
<font color="#E5E5E5">then it's and</font><font color="#CCCCCC"> browsers cookie and then</font>

286
00:13:13,080 --> 00:13:21,070
use decrypt<font color="#CCCCCC"> this cookies to be able to</font>

287
00:13:16,650 --> 00:13:24,459
<font color="#E5E5E5">execute commands on infected machine so</font>

288
00:13:21,070 --> 00:13:27,130
if<font color="#CCCCCC"> common start is dollar and sign it</font>

289
00:13:24,460 --> 00:13:31,840
will execute command now<font color="#E5E5E5"> machine so what</font>

290
00:13:27,130 --> 00:13:33,670
we need<font color="#E5E5E5"> is to implement our</font><font color="#CCCCCC"> cincy init</font>

291
00:13:31,840 --> 00:13:39,610
function in this function<font color="#CCCCCC"> we have to</font>

292
00:13:33,670 --> 00:13:43,089
define our<font color="#CCCCCC"> like we have to listen our</font>

293
00:13:39,610 --> 00:13:46,210
port to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to receive this request</font>

294
00:13:43,090 --> 00:13:51,790
<font color="#CCCCCC">and we have to set up</font><font color="#E5E5E5"> this cookies and</font>

295
00:13:46,210 --> 00:13:54,700
in our browser so we<font color="#CCCCCC"> need to accept then</font>

296
00:13:51,790 --> 00:13:56,199
we call receive we send responses to our

297
00:13:54,700 --> 00:13:59,260
malware<font color="#E5E5E5"> that everything is</font><font color="#CCCCCC"> ok we</font>

298
00:13:56,200 --> 00:14:03,970
received your request and we are ready

299
00:13:59,260 --> 00:14:07,930
to<font color="#E5E5E5"> setup it in browsers cooking so it's</font>

300
00:14:03,970 --> 00:14:09,960
and it is set up<font color="#CCCCCC"> using API call this</font>

301
00:14:07,930 --> 00:14:14,829
cookies<font color="#E5E5E5"> and that's it</font>

302
00:14:09,960 --> 00:14:17,260
all we need now<font color="#E5E5E5"> is to compile this</font>

303
00:14:14,830 --> 00:14:19,960
function<font color="#E5E5E5"> and we are good to</font><font color="#CCCCCC"> go</font>

304
00:14:17,260 --> 00:14:23,080
we are good<font color="#E5E5E5"> to the start so this command</font>

305
00:14:19,960 --> 00:14:25,510
<font color="#E5E5E5">looks a bit long but actually I'm gonna</font>

306
00:14:23,080 --> 00:14:28,210
<font color="#E5E5E5">explain it's easy so in the first</font>

307
00:14:25,510 --> 00:14:31,300
<font color="#E5E5E5">parameter we specify our custom</font>

308
00:14:28,210 --> 00:14:34,390
<font color="#E5E5E5">encryption library or</font><font color="#CCCCCC"> to listen on then</font>

309
00:14:31,300 --> 00:14:37,599
we<font color="#E5E5E5"> have to specify standard in</font><font color="#CCCCCC"> our</font>

310
00:14:34,390 --> 00:14:41,319
directories for<font color="#CCCCCC"> VIN FL</font><font color="#E5E5E5"> and then then I'm</font>

311
00:14:37,600 --> 00:14:43,800
<font color="#E5E5E5">early release timeout target</font><font color="#CCCCCC"> model we</font>

312
00:14:41,320 --> 00:14:50,019
want<font color="#E5E5E5"> to where we want to search for</font><font color="#CCCCCC"> bugs</font>

313
00:14:43,800 --> 00:14:53,679
<font color="#E5E5E5">our like target method we want to fast</font>

314
00:14:50,019 --> 00:14:56,559
<font color="#CCCCCC">corage from visual model</font><font color="#E5E5E5"> we want to take</font>

315
00:14:53,679 --> 00:15:00,129
our<font color="#E5E5E5"> colors back</font><font color="#CCCCCC"> to Pfizer and number of</font>

316
00:14:56,559 --> 00:15:02,589
iterations<font color="#E5E5E5"> after which every NFL will</font>

317
00:15:00,129 --> 00:15:04,749
restart<font color="#E5E5E5"> our target and path to our</font>

318
00:15:02,589 --> 00:15:07,480
<font color="#E5E5E5">binary that's it</font>

319
00:15:04,749 --> 00:15:09,309
we are<font color="#E5E5E5"> ready to start so as you can see</font>

320
00:15:07,480 --> 00:15:10,600
<font color="#E5E5E5">every sin successfully started and</font>

321
00:15:09,309 --> 00:15:13,420
loaded

322
00:15:10,600 --> 00:15:16,899
we set up our out directories<font color="#E5E5E5"> and we are</font>

323
00:15:13,420 --> 00:15:22,809
ready<font color="#E5E5E5"> to launch our test cases so</font><font color="#CCCCCC"> we</font>

324
00:15:16,899 --> 00:15:27,579
<font color="#CCCCCC">never</font><font color="#E5E5E5"> started</font><font color="#CCCCCC"> it sends it sends our test</font>

325
00:15:22,809 --> 00:15:30,549
cases<font color="#E5E5E5"> statistics looks pretty healthy we</font>

326
00:15:27,579 --> 00:15:33,248
have<font color="#E5E5E5"> we already discovered new six paths</font>

327
00:15:30,549 --> 00:15:33,790
in our binary execution speed is<font color="#E5E5E5"> pretty</font>

328
00:15:33,249 --> 00:15:37,059
good

329
00:15:33,790 --> 00:15:40,089
so Pat geometry instability looks good

330
00:15:37,059 --> 00:15:41,199
<font color="#E5E5E5">and it's a bit slow but we are</font><font color="#CCCCCC"> running</font>

331
00:15:40,089 --> 00:15:43,660
in a virtual<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> no</font>

332
00:15:41,199 --> 00:15:46,748
<font color="#E5E5E5">parallelization so 23 executions per</font>

333
00:15:43,660 --> 00:15:50,499
second<font color="#CCCCCC"> it's pretty</font><font color="#E5E5E5"> normal so if we</font><font color="#CCCCCC"> live</font>

334
00:15:46,749 --> 00:16:05,199
our<font color="#CCCCCC"> fighter</font><font color="#E5E5E5"> like this for a couple of</font>

335
00:15:50,499 --> 00:16:12,720
hours<font color="#E5E5E5"> we can second so if we leave this</font>

336
00:16:05,199 --> 00:16:20,979
<font color="#CCCCCC">Pfizer for 3-4 hours it will find our</font>

337
00:16:12,720 --> 00:16:25,779
crashes that we want no sample so this

338
00:16:20,980 --> 00:16:28,420
is screenshot<font color="#CCCCCC"> okay so let's see what</font><font color="#E5E5E5"> I</font>

339
00:16:25,779 --> 00:16:30,689
managed to<font color="#CCCCCC"> find in malware so first case</font>

340
00:16:28,420 --> 00:16:33,549
<font color="#CCCCCC">study</font><font color="#E5E5E5"> and me right</font>

341
00:16:30,689 --> 00:16:36,399
me right is actually<font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> malware the</font>

342
00:16:33,549 --> 00:16:39,309
targets<font color="#E5E5E5"> IOT devices and use them as a</font>

343
00:16:36,399 --> 00:16:41,740
part of botnet a<font color="#E5E5E5"> large-scale DDoS</font>

344
00:16:39,309 --> 00:16:44,618
attacks<font color="#E5E5E5"> this malware was used in some</font><font color="#CCCCCC"> of</font>

345
00:16:41,740 --> 00:16:47,429
the largest and most disruptive DDoS

346
00:16:44,619 --> 00:16:50,199
attacks in history<font color="#CCCCCC"> which caused a major</font>

347
00:16:47,429 --> 00:16:52,929
Internet platforms and<font color="#E5E5E5"> services to</font><font color="#CCCCCC"> be</font>

348
00:16:50,199 --> 00:16:55,299
unavailable to a large<font color="#E5E5E5"> amount of users</font>

349
00:16:52,929 --> 00:16:58,419
in different<font color="#E5E5E5"> regions in the world</font>

350
00:16:55,299 --> 00:17:00,519
so in 2017 source code of<font color="#E5E5E5"> Mira was</font>

351
00:16:58,419 --> 00:17:03,730
leaked<font color="#E5E5E5"> and different</font><font color="#CCCCCC"> mirror-like</font><font color="#E5E5E5"> but</font>

352
00:17:00,519 --> 00:17:07,179
nets adapted it and are<font color="#E5E5E5"> still operating</font>

353
00:17:03,730 --> 00:17:10,620
<font color="#CCCCCC">well the fun fact about me right that</font>

354
00:17:07,179 --> 00:17:14,760
they<font color="#CCCCCC"> actually use some security</font>

355
00:17:10,619 --> 00:17:18,188
<font color="#E5E5E5">practices and</font><font color="#CCCCCC"> apply this electric fence</font>

356
00:17:14,760 --> 00:17:20,020
<font color="#CCCCCC">tool to search for hip overflows</font><font color="#E5E5E5"> and use</font>

357
00:17:18,189 --> 00:17:24,640
after<font color="#E5E5E5"> free</font><font color="#CCCCCC"> box in the code which is</font>

358
00:17:20,020 --> 00:17:27,459
<font color="#E5E5E5">quite unusual</font><font color="#CCCCCC"> for malware minner I did</font>

359
00:17:24,640 --> 00:17:29,890
those capabilities<font color="#CCCCCC"> based</font><font color="#E5E5E5"> on HTTP flat</font>

360
00:17:27,459 --> 00:17:32,290
and several<font color="#E5E5E5"> low-level Network attacks</font>

361
00:17:29,890 --> 00:17:35,380
<font color="#E5E5E5">the most interesting part</font><font color="#CCCCCC"> for us</font><font color="#E5E5E5"> in</font>

362
00:17:32,290 --> 00:17:38,470
terms<font color="#E5E5E5"> of exploitation would be HTTP</font>

363
00:17:35,380 --> 00:17:41,730
response parser<font color="#CCCCCC"> Merai</font><font color="#E5E5E5"> actually needs</font><font color="#CCCCCC"> to</font>

364
00:17:38,470 --> 00:17:44,320
parse HTTP responses coming<font color="#E5E5E5"> from victim</font>

365
00:17:41,730 --> 00:17:47,559
<font color="#CCCCCC">to be able to perform HTTP</font><font color="#E5E5E5"> flood</font>

366
00:17:44,320 --> 00:17:50,260
attacked so it needs<font color="#E5E5E5"> to understand what</font>

367
00:17:47,559 --> 00:17:50,770
is<font color="#CCCCCC"> what is actually running on</font><font color="#E5E5E5"> the</font>

368
00:17:50,260 --> 00:17:53,860
target

369
00:17:50,770 --> 00:17:57,040
so this parser has<font color="#CCCCCC"> 800 in search of</font>

370
00:17:53,860 --> 00:17:59,020
lines of code hundreds<font color="#E5E5E5"> of potentially</font>

371
00:17:57,040 --> 00:18:01,510
dangerous operations with memory

372
00:17:59,020 --> 00:18:04,600
<font color="#E5E5E5">pointers and strings which makes it a</font>

373
00:18:01,510 --> 00:18:06,640
really great target for poison<font color="#E5E5E5"> it's a</font>

374
00:18:04,600 --> 00:18:10,959
seed file<font color="#CCCCCC"> I decided to use very basic</font>

375
00:18:06,640 --> 00:18:15,490
HTTP response<font color="#E5E5E5"> so after fighting this</font>

376
00:18:10,960 --> 00:18:17,770
sample for 24 hours and<font color="#E5E5E5"> managed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find</font>

377
00:18:15,490 --> 00:18:20,770
42 unique crashes which caused by single

378
00:18:17,770 --> 00:18:22,660
<font color="#E5E5E5">bug in relative URLs and ER so execution</font>

379
00:18:20,770 --> 00:18:25,330
speed was around<font color="#CCCCCC"> one or two thought</font>

380
00:18:22,660 --> 00:18:28,480
thousands per executions per second

381
00:18:25,330 --> 00:18:33,428
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> pretty good Pfizer managed to</font>

382
00:18:28,480 --> 00:18:35,950
find approximately 430 unique<font color="#CCCCCC"> paths</font><font color="#E5E5E5"> what</font>

383
00:18:33,429 --> 00:18:38,770
was the root of this bug if our<font color="#E5E5E5"> HTTP</font>

384
00:18:35,950 --> 00:18:41,590
response contains<font color="#E5E5E5"> relative URL</font><font color="#CCCCCC"> discount</font>

385
00:18:38,770 --> 00:18:44,620
budge<font color="#CCCCCC"> branch</font><font color="#E5E5E5"> is triggered</font><font color="#CCCCCC"> in case of</font>

386
00:18:41,590 --> 00:18:47,260
incorrect relative URL variable double I

387
00:18:44,620 --> 00:18:49,689
always equal negative values<font color="#E5E5E5"> which</font>

388
00:18:47,260 --> 00:18:51,760
caused a memory violation<font color="#E5E5E5"> and crash this</font>

389
00:18:49,690 --> 00:18:54,460
<font color="#E5E5E5">is a logical error after used this</font>

390
00:18:51,760 --> 00:18:58,000
parameter for some other purposes<font color="#CCCCCC"> in the</font>

391
00:18:54,460 --> 00:19:03,090
code early and forgot to<font color="#CCCCCC"> set it to</font><font color="#E5E5E5"> zero</font>

392
00:18:58,000 --> 00:19:03,090
in case of relative URL just like

393
00:19:03,179 --> 00:19:08,160
logical<font color="#E5E5E5"> error</font><font color="#CCCCCC"> okay I just want want to</font>

394
00:19:07,090 --> 00:19:11,159
<font color="#E5E5E5">show how it</font><font color="#CCCCCC"> works</font>

395
00:19:08,160 --> 00:19:11,160
so

396
00:19:15,570 --> 00:19:20,530
so in this virtual<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> we have debug</font>

397
00:19:19,720 --> 00:19:23,710
<font color="#CCCCCC">build of</font><font color="#E5E5E5"> Mirai</font>

398
00:19:20,530 --> 00:19:26,680
<font color="#E5E5E5">on the left terminal and on the right we</font>

399
00:19:23,710 --> 00:19:31,630
<font color="#CCCCCC">have our Python server that</font><font color="#E5E5E5"> will answer</font>

400
00:19:26,680 --> 00:19:34,570
this this malformed package<font color="#E5E5E5"> so now we</font>

401
00:19:31,630 --> 00:19:39,280
are ready<font color="#E5E5E5"> to start our Mirai</font>

402
00:19:34,570 --> 00:19:42,070
so we started<font color="#E5E5E5"> it sends request</font>

403
00:19:39,280 --> 00:19:46,420
<font color="#E5E5E5">it</font><font color="#CCCCCC"> says it's connected to</font><font color="#E5E5E5"> c2 it's</font>

404
00:19:42,070 --> 00:19:49,540
sending our request to<font color="#CCCCCC"> our server</font><font color="#E5E5E5"> and</font>

405
00:19:46,420 --> 00:19:53,680
after several hundreds of packets we can

406
00:19:49,540 --> 00:19:55,960
<font color="#E5E5E5">actually answer with our</font><font color="#CCCCCC"> patek manifold</font>

407
00:19:53,680 --> 00:19:58,170
malformed URL and here we have<font color="#E5E5E5"> our</font>

408
00:19:55,960 --> 00:20:00,850
segmentation<font color="#E5E5E5"> segment we are violet</font>

409
00:19:58,170 --> 00:20:04,360
<font color="#E5E5E5">unfortunately it's just</font><font color="#CCCCCC"> dinner service</font>

410
00:20:00,850 --> 00:20:07,060
<font color="#E5E5E5">but this way if malware like</font><font color="#CCCCCC"> Mirai is</font>

411
00:20:04,360 --> 00:20:10,530
trying to attack your environment you

412
00:20:07,060 --> 00:20:15,639
can just<font color="#CCCCCC"> answer with</font><font color="#E5E5E5"> this simple HTTP</font>

413
00:20:10,530 --> 00:20:25,629
response and both will<font color="#CCCCCC"> crash and this</font>

414
00:20:15,640 --> 00:20:28,420
<font color="#E5E5E5">way you can</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> protect okay next</font>

415
00:20:25,630 --> 00:20:30,880
<font color="#CCCCCC">example I</font><font color="#E5E5E5"> already presented this sample</font>

416
00:20:28,420 --> 00:20:33,100
when I was shown<font color="#E5E5E5"> bnfl the first version</font>

417
00:20:30,880 --> 00:20:35,110
<font color="#E5E5E5">of Dexter was one of the first known</font>

418
00:20:33,100 --> 00:20:36,510
botnet the target point of sales

419
00:20:35,110 --> 00:20:40,510
terminals

420
00:20:36,510 --> 00:20:42,430
Dexter communicate with<font color="#CCCCCC"> c2 over</font><font color="#E5E5E5"> HTTP we</font>

421
00:20:40,510 --> 00:20:45,760
are post requests and receive commands

422
00:20:42,430 --> 00:20:47,590
<font color="#E5E5E5">over the response cookies so actually in</font>

423
00:20:45,760 --> 00:20:50,080
case of Dexter<font color="#E5E5E5"> it turns that we don't</font>

424
00:20:47,590 --> 00:20:52,510
even need to<font color="#CCCCCC"> fighter after don't expect</font>

425
00:20:50,080 --> 00:20:55,270
anything malicious coming back from<font color="#E5E5E5"> C</font><font color="#CCCCCC"> to</font>

426
00:20:52,510 --> 00:20:58,420
trigger<font color="#E5E5E5"> this bug we can easily send a</font>

427
00:20:55,270 --> 00:21:00,730
long command over 255 bytes<font color="#CCCCCC"> without</font>

428
00:20:58,420 --> 00:21:02,740
trailing pound which<font color="#E5E5E5"> caused a stack</font>

429
00:21:00,730 --> 00:21:05,680
buffer overflow in multiple places<font color="#E5E5E5"> in</font>

430
00:21:02,740 --> 00:21:07,000
<font color="#E5E5E5">this function for</font><font color="#CCCCCC"> example in the copy in</font>

431
00:21:05,680 --> 00:21:09,280
<font color="#E5E5E5">the function copy</font><font color="#CCCCCC"> teal</font>

432
00:21:07,000 --> 00:21:12,490
so this<font color="#CCCCCC"> back</font><font color="#E5E5E5"> is definitely exploited to</font>

433
00:21:09,280 --> 00:21:16,120
build it to LC so it's like really

434
00:21:12,490 --> 00:21:18,970
<font color="#CCCCCC">old-school and you just need to send</font>

435
00:21:16,120 --> 00:21:20,540
long enough command without Australian

436
00:21:18,970 --> 00:21:25,100
pound<font color="#E5E5E5"> say</font>

437
00:21:20,540 --> 00:21:27,470
so tiny tiny nuke<font color="#E5E5E5"> is eel style banking</font>

438
00:21:25,100 --> 00:21:31,010
Trojan designed to perform when in the

439
00:21:27,470 --> 00:21:33,620
browser attack using the<font color="#E5E5E5"> up injects they</font>

440
00:21:31,010 --> 00:21:40,720
have this<font color="#CCCCCC"> lured weapon jacks and a huge</font>

441
00:21:33,620 --> 00:21:44,239
<font color="#E5E5E5">JSON parser</font><font color="#CCCCCC"> you can just use this JSON</font>

442
00:21:40,720 --> 00:21:47,900
response as a seed file and then<font color="#CCCCCC"> just</font>

443
00:21:44,240 --> 00:21:50,870
perform our<font color="#E5E5E5"> fighter</font><font color="#CCCCCC"> and after 24 hours</font><font color="#E5E5E5"> I</font>

444
00:21:47,900 --> 00:21:53,140
found four unique<font color="#CCCCCC"> crushes the root of</font>

445
00:21:50,870 --> 00:21:56,120
<font color="#E5E5E5">this crushes is infinite root in</font>

446
00:21:53,140 --> 00:21:58,790
infinite recursion in this function<font color="#CCCCCC"> so</font>

447
00:21:56,120 --> 00:22:01,040
if you provide long enough<font color="#E5E5E5"> response</font>

448
00:21:58,790 --> 00:22:03,590
which contains only opening brackets in

449
00:22:01,040 --> 00:22:08,090
my case<font color="#E5E5E5"> seven thousand this sample will</font>

450
00:22:03,590 --> 00:22:10,550
<font color="#E5E5E5">stop execution so I also found this tool</font>

451
00:22:08,090 --> 00:22:12,470
very useful<font color="#CCCCCC"> when you want</font><font color="#E5E5E5"> to find a</font>

452
00:22:10,550 --> 00:22:15,020
target<font color="#E5E5E5"> routine for poison</font>

453
00:22:12,470 --> 00:22:17,840
<font color="#CCCCCC">I have implemented</font><font color="#E5E5E5"> this tool for malware</font>

454
00:22:15,020 --> 00:22:20,480
<font color="#E5E5E5">analysis on top of</font><font color="#CCCCCC"> Dyna Mario it's</font>

455
00:22:17,840 --> 00:22:22,699
basically<font color="#CCCCCC"> l trace for Windows but</font>

456
00:22:20,480 --> 00:22:25,460
transparent towards instrumented binary

457
00:22:22,700 --> 00:22:28,100
so it will trace all API calls in

458
00:22:25,460 --> 00:22:31,070
malware and print this information<font color="#CCCCCC"> in</font>

459
00:22:28,100 --> 00:22:33,740
the file so it's less<font color="#E5E5E5"> detectable then</font>

460
00:22:31,070 --> 00:22:35,990
standard API<font color="#CCCCCC"> called tracers so you can</font>

461
00:22:33,740 --> 00:22:39,350
give<font color="#E5E5E5"> it a try it's open source</font><font color="#CCCCCC"> busy</font>

462
00:22:35,990 --> 00:22:41,810
<font color="#E5E5E5">license so</font><font color="#CCCCCC"> boxing</font><font color="#E5E5E5"> malware might be</font>

463
00:22:39,350 --> 00:22:44,659
useful<font color="#CCCCCC"> and you can</font><font color="#E5E5E5"> really find them</font>

464
00:22:41,810 --> 00:22:48,919
using<font color="#E5E5E5"> fighting technique of course</font><font color="#CCCCCC"> we</font>

465
00:22:44,660 --> 00:22:51,020
<font color="#CCCCCC">NFL can and should be</font><font color="#E5E5E5"> used for searching</font>

466
00:22:48,920 --> 00:22:53,630
for<font color="#CCCCCC"> boxing network based applications</font>

467
00:22:51,020 --> 00:22:55,910
<font color="#CCCCCC">its</font><font color="#E5E5E5"> general purpose fighter</font><font color="#CCCCCC"> you can use</font>

468
00:22:53,630 --> 00:23:01,220
it to find<font color="#E5E5E5"> bugs in</font><font color="#CCCCCC"> benign software</font>

469
00:22:55,910 --> 00:23:03,860
<font color="#CCCCCC">course so I found last</font><font color="#E5E5E5"> year</font><font color="#CCCCCC"> cv1 hip</font>

470
00:23:01,220 --> 00:23:08,780
overflow<font color="#E5E5E5"> and network based application</font>

471
00:23:03,860 --> 00:23:10,879
for<font color="#E5E5E5"> Windows using</font><font color="#CCCCCC"> bin air fail so thank</font>

472
00:23:08,780 --> 00:23:12,800
<font color="#E5E5E5">you for your attention</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> can use</font>

473
00:23:10,880 --> 00:23:15,190
this link<font color="#CCCCCC"> to find more information about</font>

474
00:23:12,800 --> 00:23:15,190
me

475
00:23:15,920 --> 00:23:21,580
[Applause]

476
00:23:28,919 --> 00:23:35,529
so now times for<font color="#E5E5E5"> QA so we have two</font>

477
00:23:32,829 --> 00:23:37,959
<font color="#CCCCCC">questions online</font><font color="#E5E5E5"> max the first one is</font>

478
00:23:35,529 --> 00:23:40,119
where are we relative<font color="#CCCCCC"> to thousand</font>

479
00:23:37,959 --> 00:23:44,919
stateful protocols beyond the first

480
00:23:40,119 --> 00:23:47,829
message<font color="#E5E5E5"> sorry where are</font><font color="#CCCCCC"> we relative</font><font color="#E5E5E5"> to</font>

481
00:23:44,919 --> 00:23:52,509
fuzzing stateful protocols beyond the

482
00:23:47,829 --> 00:23:56,049
first message I didn't get this<font color="#E5E5E5"> question</font>

483
00:23:52,509 --> 00:23:59,499
neither do<font color="#CCCCCC"> I</font><font color="#E5E5E5"> the next one is one that's</font>

484
00:23:56,049 --> 00:24:03,339
more ethical one remote code executing

485
00:23:59,499 --> 00:24:06,899
on<font color="#CCCCCC"> bot</font><font color="#E5E5E5"> what is the ethical consideration</font>

486
00:24:03,339 --> 00:24:11,139
for running code<font color="#CCCCCC"> a remote random systems</font>

487
00:24:06,899 --> 00:24:14,109
<font color="#E5E5E5">question mark</font><font color="#CCCCCC"> in contrast to quote just</font>

488
00:24:11,139 --> 00:24:16,869
<font color="#CCCCCC">n</font><font color="#E5E5E5"> quote crashing them without remote</font>

489
00:24:14,109 --> 00:24:18,789
code execution<font color="#CCCCCC"> this is a great</font><font color="#E5E5E5"> question</font>

490
00:24:16,869 --> 00:24:21,639
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> yes</font>

491
00:24:18,789 --> 00:24:24,879
the<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> ethical concerns when you do</font>

492
00:24:21,639 --> 00:24:29,589
hacking back and there were a<font color="#E5E5E5"> lot of</font>

493
00:24:24,879 --> 00:24:35,379
talks at Def Con<font color="#CCCCCC"> in 2007 key</font>

494
00:24:29,589 --> 00:24:37,928
so<font color="#E5E5E5"> Patrick word presented like ethical</font>

495
00:24:35,379 --> 00:24:40,359
concerns about<font color="#E5E5E5"> hacking back so let's say</font>

496
00:24:37,929 --> 00:24:44,139
we want to cause remote code execution

497
00:24:40,359 --> 00:24:47,829
in our malware<font color="#CCCCCC"> but what if</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> Malwa is</font>

498
00:24:44,139 --> 00:24:53,079
running actually<font color="#E5E5E5"> in some of our</font><font color="#CCCCCC"> custom</font>

499
00:24:47,829 --> 00:24:56,019
<font color="#E5E5E5">or some other network in this case we</font>

500
00:24:53,079 --> 00:24:59,519
like we actually<font color="#CCCCCC"> breaking we actually</font>

501
00:24:56,019 --> 00:25:02,919
<font color="#E5E5E5">hacking back some other benign</font>

502
00:24:59,519 --> 00:25:04,899
environment which is which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> like</font>

503
00:25:02,919 --> 00:25:07,389
really<font color="#CCCCCC"> serious question yeah in</font><font color="#E5E5E5"> case of</font>

504
00:25:04,899 --> 00:25:10,418
remote code execution<font color="#CCCCCC"> I can say that the</font>

505
00:25:07,389 --> 00:25:12,819
a<font color="#E5E5E5"> lot of legal concerns I had this slide</font>

506
00:25:10,419 --> 00:25:16,059
<font color="#CCCCCC">at my Def Con presentation but I remove</font>

507
00:25:12,819 --> 00:25:19,690
<font color="#CCCCCC">it in this</font><font color="#E5E5E5"> presentation just because we</font>

508
00:25:16,059 --> 00:25:21,759
have<font color="#E5E5E5"> 30 minutes yeah but if you want to</font>

509
00:25:19,690 --> 00:25:25,349
search<font color="#CCCCCC"> for</font><font color="#E5E5E5"> more details you can take a</font>

510
00:25:21,759 --> 00:25:29,890
look<font color="#E5E5E5"> on</font><font color="#CCCCCC"> patrick word presentation at</font><font color="#E5E5E5"> dif</font>

511
00:25:25,349 --> 00:25:33,530
2017 or my talk at<font color="#CCCCCC"> DEFCON</font><font color="#E5E5E5"> last year</font>

512
00:25:29,890 --> 00:25:33,980
<font color="#CCCCCC">hey</font><font color="#E5E5E5"> thank you it's a good it was a great</font>

513
00:25:33,530 --> 00:25:36,740
talk

514
00:25:33,980 --> 00:25:38,870
I have a<font color="#E5E5E5"> question about like a</font><font color="#CCCCCC"> basic</font>

515
00:25:36,740 --> 00:25:39,710
very basic<font color="#E5E5E5"> question so we know by</font>

516
00:25:38,870 --> 00:25:41,899
<font color="#CCCCCC">default</font>

517
00:25:39,710 --> 00:25:44,390
<font color="#E5E5E5">FL and</font><font color="#CCCCCC"> V now</font><font color="#E5E5E5"> if they are not able</font><font color="#CCCCCC"> to</font>

518
00:25:41,900 --> 00:25:45,770
like detect children process so like do

519
00:25:44,390 --> 00:25:48,290
you know like<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to tackle those kind</font>

520
00:25:45,770 --> 00:25:52,400
of like problems<font color="#CCCCCC"> how do you detect</font>

521
00:25:48,290 --> 00:25:55,550
boxing children processes yeah so the

522
00:25:52,400 --> 00:25:58,010
question<font color="#CCCCCC"> is if we have</font><font color="#E5E5E5"> our target binary</font>

523
00:25:55,550 --> 00:26:00,200
the trunk<font color="#E5E5E5"> some child process how we can</font>

524
00:25:58,010 --> 00:26:01,090
search<font color="#E5E5E5"> for</font><font color="#CCCCCC"> boxing this child process</font><font color="#E5E5E5"> am</font>

525
00:26:00,200 --> 00:26:04,160
i right

526
00:26:01,090 --> 00:26:07,429
this is a good question<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> I don't</font>

527
00:26:04,160 --> 00:26:11,090
know<font color="#CCCCCC"> I have to think</font><font color="#E5E5E5"> about this to</font><font color="#CCCCCC"> be</font>

528
00:26:07,430 --> 00:26:13,250
honest I<font color="#E5E5E5"> don't know</font><font color="#CCCCCC"> I know that in case</font>

529
00:26:11,090 --> 00:26:17,600
of<font color="#E5E5E5"> Dana Mario for example you can inject</font>

530
00:26:13,250 --> 00:26:22,040
<font color="#E5E5E5">your like client application client DLL</font>

531
00:26:17,600 --> 00:26:25,490
in all processes<font color="#CCCCCC"> the specific</font><font color="#E5E5E5"> name so</font>

532
00:26:22,040 --> 00:26:28,520
probably this way you can address this

533
00:26:25,490 --> 00:26:34,580
problem and I know Mario by default<font color="#CCCCCC"> it's</font>

534
00:26:28,520 --> 00:26:38,120
follow all child processes<font color="#E5E5E5"> so yeah it</font>

535
00:26:34,580 --> 00:26:39,800
requires probably some patch for<font color="#CCCCCC"> Vienna</font>

536
00:26:38,120 --> 00:26:41,570
<font color="#E5E5E5">FL but in terms of binary</font>

537
00:26:39,800 --> 00:26:44,210
instrumentation in terms of providing

538
00:26:41,570 --> 00:26:46,580
coverage<font color="#E5E5E5"> back into</font><font color="#CCCCCC"> Pfizer</font><font color="#E5E5E5"> there is no</font>

539
00:26:44,210 --> 00:26:51,470
any limitation like any fundamental

540
00:26:46,580 --> 00:26:54,919
<font color="#E5E5E5">limitations one last question for you</font>

541
00:26:51,470 --> 00:26:59,060
<font color="#CCCCCC">fry it Jay</font><font color="#E5E5E5"> where did you source your</font>

542
00:26:54,920 --> 00:27:02,090
<font color="#E5E5E5">ATMs</font><font color="#CCCCCC"> for research from very interested</font>

543
00:26:59,060 --> 00:27:08,720
in<font color="#E5E5E5"> doing my own experiments on ATMs yeah</font>

544
00:27:02,090 --> 00:27:14,139
so basically<font color="#E5E5E5"> I focus on Dexter Dexter</font>

545
00:27:08,720 --> 00:27:14,140
model that targets<font color="#CCCCCC"> Windows so let's go</font>

546
00:27:16,260 --> 00:27:26,629
so this this part of Dexter is actually

547
00:27:22,470 --> 00:27:30,419
actually<font color="#E5E5E5"> yes Dexter just a second</font>

548
00:27:26,630 --> 00:27:32,940
so yes it's a point of sales malware but

549
00:27:30,419 --> 00:27:36,960
<font color="#E5E5E5">it targets Microsoft Windows terminals</font>

550
00:27:32,940 --> 00:27:42,540
so in this case I don't<font color="#E5E5E5"> need my own like</font>

551
00:27:36,960 --> 00:27:45,210
ATM or any other like<font color="#E5E5E5"> hardware it's the</font>

552
00:27:42,540 --> 00:27:48,240
small ways like<font color="#CCCCCC"> general purpose</font><font color="#E5E5E5"> Windows</font>

553
00:27:45,210 --> 00:27:51,679
malware we can just run<font color="#CCCCCC"> it in on Windows</font>

554
00:27:48,240 --> 00:27:54,059
machine and then the<font color="#E5E5E5"> visor is VIN FA</font>

555
00:27:51,679 --> 00:27:56,660
<font color="#CCCCCC">thank you max it's been a pleasure thank</font>

556
00:27:54,059 --> 00:27:56,660
<font color="#CCCCCC">you</font>

