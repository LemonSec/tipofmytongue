1
00:00:00,030 --> 00:00:04,680
hello everyone welcome<font color="#E5E5E5"> to our talk so</font>

2
00:00:02,909 --> 00:00:08,360
today we're going to talk about<font color="#E5E5E5"> our</font>

3
00:00:04,680 --> 00:00:11,280
wasum security or webassembly<font color="#CCCCCC"> a</font><font color="#E5E5E5"> security</font>

4
00:00:08,360 --> 00:00:13,559
<font color="#CCCCCC">so my name is Kai</font><font color="#E5E5E5"> Johan</font><font color="#CCCCCC"> I'm a security</font>

5
00:00:11,280 --> 00:00:20,310
<font color="#CCCCCC">researcher from cystic and my partner</font>

6
00:00:13,559 --> 00:00:22,590
<font color="#CCCCCC">poncho</font><font color="#E5E5E5"> from mask from brave</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> just a</font>

7
00:00:20,310 --> 00:00:26,430
<font color="#CCCCCC">little background about ourselves so a</font>

8
00:00:22,590 --> 00:00:29,550
little<font color="#E5E5E5"> bit disclaimer set forth the</font>

9
00:00:26,430 --> 00:00:32,910
slides here we provide is based on<font color="#E5E5E5"> our</font>

10
00:00:29,550 --> 00:00:35,340
<font color="#E5E5E5">knowledge and and some of you may know</font>

11
00:00:32,910 --> 00:00:37,739
our<font color="#E5E5E5"> semester evolving very fast so</font>

12
00:00:35,340 --> 00:00:40,170
regarding<font color="#CCCCCC"> the design</font><font color="#E5E5E5"> the implementation</font>

13
00:00:37,739 --> 00:00:42,599
<font color="#E5E5E5">they're moving very fast so I would</font>

14
00:00:40,170 --> 00:00:45,090
<font color="#CCCCCC">encourage you guys</font><font color="#E5E5E5"> to always check the</font>

15
00:00:42,600 --> 00:00:51,120
spec online so to<font color="#E5E5E5"> catch up the</font><font color="#CCCCCC"> latest</font>

16
00:00:45,090 --> 00:00:52,829
change and a quick question<font color="#E5E5E5"> here so how</font>

17
00:00:51,120 --> 00:00:56,699
<font color="#CCCCCC">many of</font><font color="#E5E5E5"> you have used was a reproduction</font>

18
00:00:52,829 --> 00:00:57,449
or hands-on experience with<font color="#CCCCCC"> wisdom</font><font color="#E5E5E5"> good</font>

19
00:00:56,699 --> 00:01:01,980
good

20
00:00:57,449 --> 00:01:03,960
not many people<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> yeah so in today's</font>

21
00:01:01,980 --> 00:01:06,210
agenda<font color="#CCCCCC"> we are going to give a quick</font>

22
00:01:03,960 --> 00:01:10,530
<font color="#E5E5E5">intro about what is awesome and why</font>

23
00:01:06,210 --> 00:01:12,689
awesome and then a very simple<font color="#CCCCCC"> 101</font>

24
00:01:10,530 --> 00:01:15,869
example about wasum and then we will

25
00:01:12,689 --> 00:01:18,899
jump into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> awasum</font><font color="#E5E5E5"> strap module and</font>

26
00:01:15,869 --> 00:01:21,600
<font color="#E5E5E5">also to see how critter miners can can</font>

27
00:01:18,900 --> 00:01:24,390
<font color="#E5E5E5">be working seamlessly with awesome and</font>

28
00:01:21,600 --> 00:01:27,990
also<font color="#E5E5E5"> we give some exploiting bugs in</font>

29
00:01:24,390 --> 00:01:30,450
wasum so what is awesome awesome is a

30
00:01:27,990 --> 00:01:32,158
binary instruction format<font color="#E5E5E5"> designs the</font>

31
00:01:30,450 --> 00:01:36,540
target for compilation<font color="#E5E5E5"> of high-level</font>

32
00:01:32,159 --> 00:01:38,790
<font color="#E5E5E5">languages like C C++ and</font><font color="#CCCCCC"> its aim to</font>

33
00:01:36,540 --> 00:01:41,490
deploy on the web for client-server

34
00:01:38,790 --> 00:01:43,890
applications<font color="#E5E5E5"> so you can think of Oh what</font>

35
00:01:41,490 --> 00:01:47,220
is<font color="#E5E5E5"> awesome wasn't basically is from a</font>

36
00:01:43,890 --> 00:01:49,110
source of<font color="#E5E5E5"> C C++ or any other like</font><font color="#CCCCCC"> high</font>

37
00:01:47,220 --> 00:01:52,439
<font color="#CCCCCC">line high level language and then will</font>

38
00:01:49,110 --> 00:01:54,600
<font color="#CCCCCC">become part of</font><font color="#E5E5E5"> the or the JavaScript</font><font color="#CCCCCC"> I</font>

39
00:01:52,439 --> 00:01:59,398
would say that can be you know deployed

40
00:01:54,600 --> 00:02:01,619
directly with the web<font color="#E5E5E5"> so</font><font color="#CCCCCC"> and why we</font>

41
00:01:59,399 --> 00:02:03,450
<font color="#E5E5E5">encourage people to use</font><font color="#CCCCCC"> wasum and what's</font>

42
00:02:01,619 --> 00:02:07,799
the benefit of using<font color="#E5E5E5"> it so here is a</font>

43
00:02:03,450 --> 00:02:10,830
quick comparison<font color="#E5E5E5"> example of between</font>

44
00:02:07,799 --> 00:02:13,090
JavaScript<font color="#CCCCCC"> and</font><font color="#E5E5E5"> wasum so you can we</font><font color="#CCCCCC"> can</font>

45
00:02:10,830 --> 00:02:14,890
tell<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you know JavaScript from here</font>

46
00:02:13,090 --> 00:02:17,560
you can it<font color="#E5E5E5"> has to go through all the</font>

47
00:02:14,890 --> 00:02:21,700
<font color="#E5E5E5">stage of parsing</font><font color="#CCCCCC"> compiled optimization</font>

48
00:02:17,560 --> 00:02:23,739
<font color="#E5E5E5">sq cetera and then wasn't just</font><font color="#CCCCCC"> echo</font>

49
00:02:21,700 --> 00:02:27,010
<font color="#E5E5E5">compiled</font><font color="#CCCCCC"> optimized together and execute</font>

50
00:02:23,739 --> 00:02:30,790
so so in<font color="#E5E5E5"> shot</font>

51
00:02:27,010 --> 00:02:34,149
javascript is slow and<font color="#CCCCCC"> wasum is you know</font>

52
00:02:30,790 --> 00:02:36,370
performs much better<font color="#CCCCCC"> but</font><font color="#E5E5E5"> doesn't mean</font>

53
00:02:34,150 --> 00:02:40,299
<font color="#E5E5E5">that</font><font color="#CCCCCC"> Rossum</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a replacement for</font>

54
00:02:36,370 --> 00:02:44,500
JavaScript<font color="#E5E5E5"> actually it's no so the goal</font>

55
00:02:40,299 --> 00:02:48,880
of<font color="#E5E5E5"> the wasum here is to to to provide a</font>

56
00:02:44,500 --> 00:02:51,280
kind of a good<font color="#E5E5E5"> integration for between</font>

57
00:02:48,880 --> 00:02:53,530
<font color="#E5E5E5">the backhand and the and</font><font color="#CCCCCC"> in the</font>

58
00:02:51,280 --> 00:02:57,700
<font color="#CCCCCC">front-end so a good example is here is</font>

59
00:02:53,530 --> 00:03:00,730
that<font color="#E5E5E5"> so there's some you know high CPU</font>

60
00:02:57,700 --> 00:03:04,030
intensive tasks<font color="#E5E5E5"> like you know animation</font>

61
00:03:00,730 --> 00:03:06,578
or image processing<font color="#E5E5E5"> it has to happen on</font>

62
00:03:04,030 --> 00:03:10,690
the on the web browser<font color="#CCCCCC"> so it would be</font>

63
00:03:06,579 --> 00:03:12,640
good<font color="#CCCCCC"> to to upload this task</font><font color="#E5E5E5"> not from not</font>

64
00:03:10,690 --> 00:03:16,720
to do it through<font color="#CCCCCC"> JavaScript but through</font>

65
00:03:12,640 --> 00:03:19,298
doing you through<font color="#CCCCCC"> wasum</font><font color="#E5E5E5"> so that it could</font>

66
00:03:16,720 --> 00:03:21,130
you<font color="#E5E5E5"> know boost the performance on the</font>

67
00:03:19,299 --> 00:03:27,010
other on<font color="#CCCCCC"> your browser's on the</font><font color="#E5E5E5"> front end</font>

68
00:03:21,130 --> 00:03:30,400
side so wasum supports these kinds of

69
00:03:27,010 --> 00:03:34,899
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> very popular</font><font color="#CCCCCC"> language support C</font>

70
00:03:30,400 --> 00:03:37,660
<font color="#E5E5E5">C++ Java rust</font><font color="#CCCCCC"> Golan</font><font color="#E5E5E5"> and so all this</font>

71
00:03:34,900 --> 00:03:41,380
<font color="#E5E5E5">language can be can</font><font color="#CCCCCC"> be converted</font><font color="#E5E5E5"> or can</font>

72
00:03:37,660 --> 00:03:43,720
be compiled into into awesome<font color="#E5E5E5"> so there's</font>

73
00:03:41,380 --> 00:03:47,620
a<font color="#CCCCCC"> two called EMCC</font><font color="#E5E5E5"> so do all this</font>

74
00:03:43,720 --> 00:03:52,569
compilation<font color="#CCCCCC"> for you it will help you to</font>

75
00:03:47,620 --> 00:03:57,130
get get<font color="#E5E5E5"> into the the awesome binary code</font>

76
00:03:52,569 --> 00:04:01,630
directly so and and in here<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to</font>

77
00:03:57,130 --> 00:04:03,880
<font color="#E5E5E5">talk about big amount wasum there are</font>

78
00:04:01,630 --> 00:04:06,010
some other attempts try to achieve<font color="#E5E5E5"> the</font>

79
00:04:03,880 --> 00:04:09,430
you know<font color="#CCCCCC"> to boost the the web</font>

80
00:04:06,010 --> 00:04:11,798
performance like flash like ActiveX<font color="#E5E5E5"> and</font>

81
00:04:09,430 --> 00:04:16,000
also<font color="#CCCCCC"> j sm j s if you've are familiar</font>

82
00:04:11,799 --> 00:04:19,269
<font color="#E5E5E5">with</font><font color="#CCCCCC"> asm.js lippies is a</font><font color="#E5E5E5"> compiled it's a</font>

83
00:04:16,000 --> 00:04:22,510
set of instruction compiled from from

84
00:04:19,269 --> 00:04:24,010
<font color="#E5E5E5">javascript so in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> so that the</font>

85
00:04:22,510 --> 00:04:25,810
browser<font color="#E5E5E5"> does</font><font color="#CCCCCC"> not need to compile this</font>

86
00:04:24,010 --> 00:04:27,130
code again<font color="#CCCCCC"> so that you can execute</font>

87
00:04:25,810 --> 00:04:29,340
directly

88
00:04:27,130 --> 00:04:32,620
so that will keep<font color="#E5E5E5"> their performance</font>

89
00:04:29,340 --> 00:04:35,169
improvement a lot so the bottom here is

90
00:04:32,620 --> 00:04:37,300
is<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> to provide a full-blown</font>

91
00:04:35,169 --> 00:04:39,690
solution so<font color="#E5E5E5"> that you don't need</font><font color="#CCCCCC"> to up</font>

92
00:04:37,300 --> 00:04:43,020
you don't<font color="#E5E5E5"> need to worry about you know</font>

93
00:04:39,690 --> 00:04:46,960
kind<font color="#E5E5E5"> of security concern and it's more</font>

94
00:04:43,020 --> 00:04:50,440
web processed friendly and and also<font color="#E5E5E5"> it's</font>

95
00:04:46,960 --> 00:04:52,840
more<font color="#E5E5E5"> like a previous slide shows that it</font>

96
00:04:50,440 --> 00:04:57,570
does the size of what<font color="#CCCCCC"> water is</font><font color="#E5E5E5"> quite</font>

97
00:04:52,840 --> 00:05:01,719
small comparing to a flash or ActiveX

98
00:04:57,570 --> 00:05:06,820
<font color="#CCCCCC">okay so let's give type into a simple</font>

99
00:05:01,720 --> 00:05:08,560
example<font color="#E5E5E5"> of</font><font color="#CCCCCC"> what is wasum</font><font color="#E5E5E5"> so then okay</font>

100
00:05:06,820 --> 00:05:10,870
let me stop<font color="#CCCCCC"> here</font><font color="#E5E5E5"> a little bit to talk</font>

101
00:05:08,560 --> 00:05:13,120
about<font color="#E5E5E5"> how this this conversion the</font>

102
00:05:10,870 --> 00:05:16,990
compile process<font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> so a back</font>

103
00:05:13,120 --> 00:05:20,740
<font color="#CCCCCC">hand engineer a CC plus</font><font color="#E5E5E5"> plus back an</font>

104
00:05:16,990 --> 00:05:22,870
engineer he done his work<font color="#E5E5E5"> in C C++ and</font>

105
00:05:20,740 --> 00:05:25,540
he used<font color="#CCCCCC"> an</font><font color="#E5E5E5"> Krypton to convert it to</font>

106
00:05:22,870 --> 00:05:28,510
<font color="#E5E5E5">compile his source code into into</font>

107
00:05:25,540 --> 00:05:30,220
awesome<font color="#E5E5E5"> Co and and so that the</font>

108
00:05:28,510 --> 00:05:32,080
JavaScript or the charge screen

109
00:05:30,220 --> 00:05:35,169
developer can use<font color="#E5E5E5"> the washing dot</font>

110
00:05:32,080 --> 00:05:37,000
library<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like other JavaScript</font>

111
00:05:35,169 --> 00:05:41,020
library and it can be consumed by all

112
00:05:37,000 --> 00:05:46,360
these mainstream browsers for Firefox

113
00:05:41,020 --> 00:05:50,200
Chrome Safari<font color="#E5E5E5"> etc okay so this is a very</font>

114
00:05:46,360 --> 00:05:52,600
simple hello world example<font color="#CCCCCC"> c c++</font><font color="#E5E5E5"> and you</font>

115
00:05:50,200 --> 00:05:55,650
can you<font color="#E5E5E5"> can tell that from after the</font>

116
00:05:52,600 --> 00:05:59,710
<font color="#E5E5E5">encrypting compiled so there's this is</font>

117
00:05:55,650 --> 00:06:03,250
no like like some this<font color="#CCCCCC"> is the text</font>

118
00:05:59,710 --> 00:06:06,430
format of the the binary code is it will

119
00:06:03,250 --> 00:06:09,520
be used for<font color="#E5E5E5"> debug purpose but</font><font color="#CCCCCC"> i mean by</font>

120
00:06:06,430 --> 00:06:13,060
nature is the binary<font color="#E5E5E5"> code so and then</font>

121
00:06:09,520 --> 00:06:15,280
from the is<font color="#E5E5E5"> called west by the way so</font>

122
00:06:13,060 --> 00:06:17,919
from<font color="#E5E5E5"> here and you can you</font><font color="#CCCCCC"> can see on the</font>

123
00:06:15,280 --> 00:06:20,590
right<font color="#CCCCCC"> side there is</font><font color="#E5E5E5"> some JavaScript</font><font color="#CCCCCC"> code</font>

124
00:06:17,919 --> 00:06:23,710
is loading the<font color="#CCCCCC"> wasum the hollow dot</font>

125
00:06:20,590 --> 00:06:26,320
<font color="#CCCCCC">Watson library</font><font color="#E5E5E5"> and then and then do some</font>

126
00:06:23,710 --> 00:06:28,840
work and execute the simple function

127
00:06:26,320 --> 00:06:34,409
<font color="#E5E5E5">simple main function hello and the bring</font>

128
00:06:28,840 --> 00:06:38,799
out hello world and in the recording the

129
00:06:34,409 --> 00:06:40,330
the<font color="#CCCCCC"> wasum memory module is quite I would</font>

130
00:06:38,800 --> 00:06:42,849
say<font color="#E5E5E5"> it's quite straightforward</font>

131
00:06:40,330 --> 00:06:44,800
become a composer<font color="#E5E5E5"> of two parts first it</font>

132
00:06:42,849 --> 00:06:47,770
function<font color="#CCCCCC"> table which consider the</font>

133
00:06:44,800 --> 00:06:50,289
instruction<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> dresses which is RB</font>

134
00:06:47,770 --> 00:06:52,599
there are some<font color="#CCCCCC"> embedding instructions</font>

135
00:06:50,289 --> 00:06:55,030
can be<font color="#E5E5E5"> leveraged by</font><font color="#CCCCCC"> lyrics by the</font>

136
00:06:52,599 --> 00:06:58,870
<font color="#E5E5E5">blossom and store in the function tables</font>

137
00:06:55,030 --> 00:07:00,969
and you also use the linear memory<font color="#E5E5E5"> to</font>

138
00:06:58,870 --> 00:07:04,919
store their data<font color="#E5E5E5"> we will show</font><font color="#CCCCCC"> more</font>

139
00:07:00,970 --> 00:07:07,479
example about the how we can exploit the

140
00:07:04,919 --> 00:07:10,120
vulnerability of<font color="#E5E5E5"> or not</font><font color="#CCCCCC"> wall ability of</font>

141
00:07:07,479 --> 00:07:12,849
the linear linear memory<font color="#E5E5E5"> but some some</font>

142
00:07:10,120 --> 00:07:14,740
malicious usage or insecure usage of

143
00:07:12,849 --> 00:07:19,330
linear memory<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can see there's some</font>

144
00:07:14,740 --> 00:07:22,030
<font color="#CCCCCC">exploit example from there ok let's talk</font>

145
00:07:19,330 --> 00:07:25,948
<font color="#E5E5E5">about the security aspect from wasum so</font>

146
00:07:22,030 --> 00:07:28,859
this is the there's web<font color="#CCCCCC"> simply blink</font>

147
00:07:25,949 --> 00:07:31,419
<font color="#E5E5E5">regarding there the security</font><font color="#CCCCCC"> design</font>

148
00:07:28,860 --> 00:07:34,900
<font color="#CCCCCC">encourage you</font><font color="#E5E5E5"> guys take a look there so</font>

149
00:07:31,419 --> 00:07:37,568
the goal<font color="#CCCCCC"> here is to wasn't</font><font color="#E5E5E5"> by decide</font>

150
00:07:34,900 --> 00:07:40,810
from its nature<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> aim to a protect</font>

151
00:07:37,569 --> 00:07:43,000
user from<font color="#E5E5E5"> honorable a malicious code and</font>

152
00:07:40,810 --> 00:07:45,520
<font color="#E5E5E5">also provide developer primitive</font>

153
00:07:43,000 --> 00:07:48,610
medication to write safe application<font color="#E5E5E5"> so</font>

154
00:07:45,520 --> 00:07:52,150
it has this it has this control flow

155
00:07:48,610 --> 00:07:54,219
integrity check<font color="#E5E5E5"> so in in order by doing</font>

156
00:07:52,150 --> 00:07:58,150
that ensure<font color="#E5E5E5"> the protection against</font>

157
00:07:54,219 --> 00:08:01,330
control flow hijacking attacks<font color="#E5E5E5"> with that</font>

158
00:07:58,150 --> 00:08:03,549
<font color="#CCCCCC">said</font><font color="#E5E5E5"> and also it</font><font color="#CCCCCC"> provides the indirect</font>

159
00:08:01,330 --> 00:08:07,240
<font color="#CCCCCC">function course subject to a signature</font>

160
00:08:03,550 --> 00:08:11,710
check<font color="#CCCCCC"> so with this help so all this</font>

161
00:08:07,240 --> 00:08:14,699
smash smash stack attack<font color="#E5E5E5"> can be can be</font>

162
00:08:11,710 --> 00:08:20,049
you know<font color="#E5E5E5"> can</font><font color="#CCCCCC"> mitigate by by webassembly</font>

163
00:08:14,699 --> 00:08:25,120
<font color="#CCCCCC">awasum ok so let's look into</font><font color="#E5E5E5"> some of</font>

164
00:08:20,050 --> 00:08:27,099
<font color="#CCCCCC">these malicious</font><font color="#E5E5E5"> modules so you guys must</font>

165
00:08:25,120 --> 00:08:30,520
familiar with this tech ham or key

166
00:08:27,099 --> 00:08:33,458
lockers<font color="#CCCCCC"> so Watson can be definitely used</font>

167
00:08:30,520 --> 00:08:36,429
to to<font color="#E5E5E5"> achieve that to turn on your</font>

168
00:08:33,458 --> 00:08:40,510
webcam to<font color="#E5E5E5"> record your your your your</font>

169
00:08:36,429 --> 00:08:43,929
keystrokes<font color="#CCCCCC"> and and what makes what makes</font>

170
00:08:40,510 --> 00:08:47,500
it more<font color="#E5E5E5"> interesting is that so because</font>

171
00:08:43,929 --> 00:08:50,290
of the is<font color="#E5E5E5"> because the format the Watson</font>

172
00:08:47,500 --> 00:08:53,960
comes up and<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the specification</font><font color="#E5E5E5"> it</font>

173
00:08:50,290 --> 00:08:56,120
provides the antivirus

174
00:08:53,960 --> 00:08:58,550
company<font color="#CCCCCC"> I</font><font color="#E5E5E5"> still like working</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> you know</font>

175
00:08:56,120 --> 00:09:00,860
to try<font color="#CCCCCC"> to detect this kind</font><font color="#E5E5E5"> of a new</font>

176
00:08:58,550 --> 00:09:03,020
threat<font color="#CCCCCC"> even though they have</font><font color="#E5E5E5"> they're</font>

177
00:09:00,860 --> 00:09:05,720
working<font color="#CCCCCC"> very well in the traditional</font>

178
00:09:03,020 --> 00:09:08,510
<font color="#CCCCCC">task game or a traditional wakie</font><font color="#E5E5E5"> locker</font>

179
00:09:05,720 --> 00:09:12,800
but from wasum standpoint<font color="#E5E5E5"> like they're</font>

180
00:09:08,510 --> 00:09:16,040
still working on to fight with this<font color="#E5E5E5"> this</font>

181
00:09:12,800 --> 00:09:20,000
technology and another<font color="#CCCCCC"> very interesting</font>

182
00:09:16,040 --> 00:09:22,969
story about<font color="#CCCCCC"> chi miners</font><font color="#E5E5E5"> so like I</font>

183
00:09:20,000 --> 00:09:26,450
<font color="#CCCCCC">mentioned earlier</font><font color="#E5E5E5"> so awesome is good at</font>

184
00:09:22,970 --> 00:09:28,850
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know high CPU intensive tax</font><font color="#E5E5E5"> so</font>

185
00:09:26,450 --> 00:09:31,880
<font color="#E5E5E5">combining definitely is one of them so</font>

186
00:09:28,850 --> 00:09:35,270
there's like so you<font color="#CCCCCC"> know the malicious</font>

187
00:09:31,880 --> 00:09:40,010
<font color="#E5E5E5">website can can can embed it like hey</font>

188
00:09:35,270 --> 00:09:42,890
can embed it some bad<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> Corey</font>

189
00:09:40,010 --> 00:09:45,020
mining was<font color="#CCCCCC"> module so that when</font><font color="#E5E5E5"> when user</font>

190
00:09:42,890 --> 00:09:46,880
access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the to the website download</font>

191
00:09:45,020 --> 00:09:50,569
the of the water module and then you

192
00:09:46,880 --> 00:09:53,060
start mining on users browser and then

193
00:09:50,570 --> 00:09:57,050
send<font color="#E5E5E5"> it back</font><font color="#CCCCCC"> to the coin hub and and and</font>

194
00:09:53,060 --> 00:09:59,900
also that the<font color="#E5E5E5"> the website</font><font color="#CCCCCC"> owners</font><font color="#E5E5E5"> shared</font>

195
00:09:57,050 --> 00:10:02,599
you<font color="#CCCCCC"> know they share the profit with the</font>

196
00:09:59,900 --> 00:10:04,579
wrister<font color="#CCCCCC"> quahog so that's a quite</font>

197
00:10:02,600 --> 00:10:06,230
<font color="#CCCCCC">interesting story</font><font color="#E5E5E5"> here but but</font>

198
00:10:04,580 --> 00:10:08,990
definitely there<font color="#E5E5E5"> are some people</font><font color="#CCCCCC"> you</font>

199
00:10:06,230 --> 00:10:11,630
<font color="#CCCCCC">know some alysha's attackers</font><font color="#E5E5E5"> malicious</font>

200
00:10:08,990 --> 00:10:14,120
<font color="#E5E5E5">user at hackers try to you know use</font>

201
00:10:11,630 --> 00:10:18,350
wasum to achieve<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> their the</font><font color="#E5E5E5"> koi</font>

202
00:10:14,120 --> 00:10:21,890
mining attacks and another story<font color="#E5E5E5"> about</font>

203
00:10:18,350 --> 00:10:24,740
you know<font color="#E5E5E5"> malicious Google Google Chrome</font>

204
00:10:21,890 --> 00:10:29,120
extension<font color="#CCCCCC"> contains</font><font color="#E5E5E5"> mining</font><font color="#CCCCCC"> x' using</font><font color="#E5E5E5"> wasum</font>

205
00:10:24,740 --> 00:10:33,170
as well<font color="#E5E5E5"> so a little bit more about the</font>

206
00:10:29,120 --> 00:10:36,740
koi mining with<font color="#E5E5E5"> awesome so basically you</font>

207
00:10:33,170 --> 00:10:38,990
know a lot<font color="#CCCCCC"> of the Kryptonite</font><font color="#E5E5E5"> is the one</font>

208
00:10:36,740 --> 00:10:43,880
of the popular algorithms and improve of

209
00:10:38,990 --> 00:10:46,880
work so it keeps<font color="#E5E5E5"> this you know it gives</font>

210
00:10:43,880 --> 00:10:50,170
the<font color="#E5E5E5"> late the latency dependency</font><font color="#CCCCCC"> it</font>

211
00:10:46,880 --> 00:10:56,060
requires access to<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> so this are</font>

212
00:10:50,170 --> 00:10:58,310
the<font color="#CCCCCC"> widely</font><font color="#E5E5E5"> adopted the critical mining</font>

213
00:10:56,060 --> 00:11:02,660
algorithms was used in wasum based on

214
00:10:58,310 --> 00:11:06,890
observation<font color="#CCCCCC"> so so in we still have ways</font>

215
00:11:02,660 --> 00:11:07,790
<font color="#CCCCCC">to detect that</font><font color="#E5E5E5"> say thanks to not the</font>

216
00:11:06,890 --> 00:11:10,250
binary is

217
00:11:07,790 --> 00:11:12,380
<font color="#CCCCCC">my stable not change too often so which</font>

218
00:11:10,250 --> 00:11:15,440
means the hash value is kind of fixed

219
00:11:12,380 --> 00:11:17,540
and we can also you know filter filter

220
00:11:15,440 --> 00:11:20,570
out the connection to the centralized

221
00:11:17,540 --> 00:11:22,849
services<font color="#E5E5E5"> and with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> wasum to see our</font>

222
00:11:20,570 --> 00:11:25,040
<font color="#CCCCCC">wasn't dumped so you can you can see</font>

223
00:11:22,850 --> 00:11:26,900
some<font color="#CCCCCC"> of this you know interesting viewed</font>

224
00:11:25,040 --> 00:11:30,110
with underscore critical<font color="#CCCCCC"> night</font>

225
00:11:26,900 --> 00:11:32,930
<font color="#CCCCCC">underscore and people you know</font><font color="#E5E5E5"> people</font>

226
00:11:30,110 --> 00:11:37,490
<font color="#E5E5E5">are not seems like unlikely to modify</font>

227
00:11:32,930 --> 00:11:39,589
these<font color="#CCCCCC"> streams okay so some other</font><font color="#E5E5E5"> views</font>

228
00:11:37,490 --> 00:11:42,830
<font color="#E5E5E5">some other interesting views</font><font color="#CCCCCC"> are in the</font>

229
00:11:39,590 --> 00:11:45,200
in the<font color="#E5E5E5"> water module can be leveraged</font><font color="#CCCCCC"> to</font>

230
00:11:42,830 --> 00:11:49,550
detect whether there's critical mining

231
00:11:45,200 --> 00:11:54,260
<font color="#CCCCCC">Rossum</font><font color="#E5E5E5"> is running on your browser</font><font color="#CCCCCC"> okay</font>

232
00:11:49,550 --> 00:11:57,079
<font color="#E5E5E5">some some interesting tricks so</font><font color="#CCCCCC"> wasum</font>

233
00:11:54,260 --> 00:11:59,510
can<font color="#E5E5E5"> you know once the the</font><font color="#CCCCCC"> malicious</font>

234
00:11:57,080 --> 00:12:02,270
sports module load into the browser<font color="#CCCCCC"> so</font>

235
00:11:59,510 --> 00:12:04,850
basically you can you know you can<font color="#E5E5E5"> open</font>

236
00:12:02,270 --> 00:12:08,480
<font color="#E5E5E5">up a new browser sorry a new browser</font>

237
00:12:04,850 --> 00:12:12,080
page and browser window with with the

238
00:12:08,480 --> 00:12:14,420
super tiny size and you can<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can even</font>

239
00:12:12,080 --> 00:12:18,470
<font color="#E5E5E5">hardly find other words where is the in</font>

240
00:12:14,420 --> 00:12:21,199
the my desktop<font color="#CCCCCC"> but you can still you</font><font color="#E5E5E5"> can</font>

241
00:12:18,470 --> 00:12:24,140
look<font color="#E5E5E5"> into</font><font color="#CCCCCC"> your CPU some and then when</font>

242
00:12:21,200 --> 00:12:26,300
<font color="#CCCCCC">your laptop become Oh overheat or or you</font>

243
00:12:24,140 --> 00:12:28,880
check your process<font color="#E5E5E5"> list to figure out</font>

244
00:12:26,300 --> 00:12:31,130
there some some anomaly anomalous a

245
00:12:28,880 --> 00:12:34,580
process is<font color="#E5E5E5"> utilizing a lot</font><font color="#CCCCCC"> of CPU you</font>

246
00:12:31,130 --> 00:12:36,800
might want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take a look at that okay</font>

247
00:12:34,580 --> 00:12:40,330
<font color="#CCCCCC">now I will</font><font color="#E5E5E5"> hand it to upon you to go</font>

248
00:12:36,800 --> 00:12:40,329
through the water<font color="#CCCCCC"> bow-wow</font><font color="#E5E5E5"> some modules</font>

249
00:12:42,070 --> 00:12:48,410
<font color="#E5E5E5">okay that's okay hello everyone</font><font color="#CCCCCC"> in the</font>

250
00:12:47,210 --> 00:12:51,770
<font color="#E5E5E5">next couple of</font><font color="#CCCCCC"> slides we'll be looking</font>

251
00:12:48,410 --> 00:12:53,000
<font color="#CCCCCC">at one</font><font color="#E5E5E5"> rebel</font><font color="#CCCCCC"> was a</font><font color="#E5E5E5"> modules</font><font color="#CCCCCC"> the thing</font>

252
00:12:51,770 --> 00:12:55,730
<font color="#E5E5E5">that we want to highlight over the next</font>

253
00:12:53,000 --> 00:12:57,110
couple of slides<font color="#CCCCCC"> is that C C++ bugs can</font>

254
00:12:55,730 --> 00:12:59,420
cause problems in your module so

255
00:12:57,110 --> 00:13:00,980
definitely<font color="#E5E5E5"> analyze your modules</font>

256
00:12:59,420 --> 00:13:03,380
thoroughly<font color="#E5E5E5"> before deploying them</font>

257
00:13:00,980 --> 00:13:05,840
introduction let's start with a very

258
00:13:03,380 --> 00:13:08,300
<font color="#CCCCCC">simple snippet</font><font color="#E5E5E5"> this is a very simple</font>

259
00:13:05,840 --> 00:13:11,120
<font color="#E5E5E5">code which has</font><font color="#CCCCCC"> a character array that is</font>

260
00:13:08,300 --> 00:13:13,699
user control if<font color="#E5E5E5"> the user inputs are very</font>

261
00:13:11,120 --> 00:13:16,249
simple<font color="#E5E5E5"> ask</font><font color="#CCCCCC"> a string the</font>

262
00:13:13,699 --> 00:13:18,769
you and it's printed<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> screen as we</font>

263
00:13:16,249 --> 00:13:21,529
see here<font color="#E5E5E5"> my but what happens when this</font>

264
00:13:18,769 --> 00:13:23,029
input<font color="#E5E5E5"> string can</font><font color="#CCCCCC"> be modified</font><font color="#E5E5E5"> and instead</font>

265
00:13:21,529 --> 00:13:25,069
<font color="#E5E5E5">of like using an ask a stirring the</font>

266
00:13:23,029 --> 00:13:28,519
attacker goes a little sophisticated and

267
00:13:25,069 --> 00:13:30,349
tries for like a format string<font color="#E5E5E5"> here the</font>

268
00:13:28,519 --> 00:13:32,689
problem with this is as I described

269
00:13:30,350 --> 00:13:35,540
<font color="#E5E5E5">earlier that we</font><font color="#CCCCCC"> have a linear model here</font>

270
00:13:32,689 --> 00:13:37,699
with webassembly so the<font color="#E5E5E5"> attacker will be</font>

271
00:13:35,540 --> 00:13:42,858
able<font color="#E5E5E5"> to read the memory and hence leak</font>

272
00:13:37,699 --> 00:13:45,049
the secret<font color="#CCCCCC"> as we can see here next we</font>

273
00:13:42,859 --> 00:13:46,699
<font color="#E5E5E5">look at buffer overflow</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is an</font>

274
00:13:45,049 --> 00:13:49,519
excerpt from the<font color="#E5E5E5"> web assembly</font>

275
00:13:46,699 --> 00:13:50,868
documentation essentially access it says

276
00:13:49,519 --> 00:13:52,669
that access to the linear memories are

277
00:13:50,869 --> 00:13:54,949
bound check at the lineal regional level

278
00:13:52,669 --> 00:13:58,100
<font color="#CCCCCC">but this</font><font color="#E5E5E5"> does not avoid the possibility</font>

279
00:13:54,949 --> 00:14:02,628
of<font color="#E5E5E5"> overriding variables so if an</font>

280
00:13:58,100 --> 00:14:05,899
attacker is able<font color="#CCCCCC"> to control a controller</font>

281
00:14:02,629 --> 00:14:09,709
string<font color="#E5E5E5"> so let's look at the memory</font>

282
00:14:05,899 --> 00:14:13,129
<font color="#E5E5E5">diagram here so we have a character</font>

283
00:14:09,709 --> 00:14:15,949
<font color="#CCCCCC">input followed by the user if the user</font>

284
00:14:13,129 --> 00:14:18,529
inputs<font color="#E5E5E5"> of any malicious string says BBB</font>

285
00:14:15,949 --> 00:14:22,209
admin it fills<font color="#E5E5E5"> of the first part of the</font>

286
00:14:18,529 --> 00:14:28,309
memory<font color="#E5E5E5"> correctly but then it overrides</font>

287
00:14:22,209 --> 00:14:30,949
<font color="#E5E5E5">the user with admin and that causes the</font>

288
00:14:28,309 --> 00:14:33,589
EMGs code to be invoke<font color="#CCCCCC"> a</font><font color="#E5E5E5"> MJS is</font>

289
00:14:30,949 --> 00:14:37,189
basically an interface to connect your

290
00:14:33,589 --> 00:14:39,379
native code with your JavaScript

291
00:14:37,189 --> 00:14:41,509
environment<font color="#CCCCCC"> so it kind</font><font color="#E5E5E5"> of leaks the</font>

292
00:14:39,379 --> 00:14:44,509
secret so what what we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> trying to</font>

293
00:14:41,509 --> 00:14:48,589
<font color="#E5E5E5">focus</font><font color="#CCCCCC"> here is like C</font><font color="#E5E5E5"> C++ code bugs can</font>

294
00:14:44,509 --> 00:14:51,619
be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> problem so definitely investigate</font>

295
00:14:48,589 --> 00:14:53,029
<font color="#E5E5E5">your code before going forward so you as</font>

296
00:14:51,619 --> 00:14:54,889
you can<font color="#E5E5E5"> see here the input address and</font>

297
00:14:53,029 --> 00:14:58,459
the user address are at a linear

298
00:14:54,889 --> 00:15:02,319
different<font color="#E5E5E5"> so any input which is not</font>

299
00:14:58,459 --> 00:15:04,638
expected<font color="#CCCCCC"> can cause problems in the</font><font color="#E5E5E5"> code</font>

300
00:15:02,319 --> 00:15:06,878
buffer<font color="#CCCCCC"> flows kind of get interesting</font>

301
00:15:04,639 --> 00:15:10,160
<font color="#E5E5E5">when</font><font color="#CCCCCC"> web assembly has access to the Dom</font>

302
00:15:06,879 --> 00:15:12,139
<font color="#E5E5E5">in this case the input</font><font color="#CCCCCC"> that we saw</font>

303
00:15:10,160 --> 00:15:14,949
earlier is overwritten by a series of

304
00:15:12,139 --> 00:15:18,499
<font color="#CCCCCC">pay followed by an image so this will</font>

305
00:15:14,949 --> 00:15:22,159
essentially override the body of the

306
00:15:18,499 --> 00:15:24,379
<font color="#CCCCCC">dock and</font><font color="#E5E5E5"> as cause an</font><font color="#CCCCCC"> exercise</font><font color="#E5E5E5"> so similar</font>

307
00:15:22,159 --> 00:15:27,270
<font color="#E5E5E5">to exercise it can cause other bugs as</font>

308
00:15:24,379 --> 00:15:29,630
<font color="#CCCCCC">well</font><font color="#E5E5E5"> so really</font><font color="#CCCCCC"> be careful when you're in</font>

309
00:15:27,270 --> 00:15:33,870
interfacing<font color="#CCCCCC"> the native code with</font>

310
00:15:29,630 --> 00:15:35,280
<font color="#E5E5E5">JavaScript indirect functions</font><font color="#CCCCCC"> this is</font>

311
00:15:33,870 --> 00:15:38,130
also one more<font color="#E5E5E5"> good example of how</font>

312
00:15:35,280 --> 00:15:39,839
<font color="#CCCCCC">Buffalo's can be a problem with web</font>

313
00:15:38,130 --> 00:15:43,260
assembly so this is a very simple

314
00:15:39,840 --> 00:15:45,120
<font color="#E5E5E5">example of guestbook where a user can</font>

315
00:15:43,260 --> 00:15:47,160
<font color="#E5E5E5">type in a message there's a message</font>

316
00:15:45,120 --> 00:15:50,190
length<font color="#E5E5E5"> and based on the language</font><font color="#CCCCCC"> they</font>

317
00:15:47,160 --> 00:15:52,949
<font color="#E5E5E5">can be translation that goes on the user</font>

318
00:15:50,190 --> 00:15:55,380
<font color="#E5E5E5">kind of sets the language translation</font>

319
00:15:52,950 --> 00:15:57,660
<font color="#CCCCCC">language to</font><font color="#E5E5E5"> English so like if the user</font>

320
00:15:55,380 --> 00:16:00,960
is nice and<font color="#E5E5E5"> like this prints out the</font>

321
00:15:57,660 --> 00:16:02,550
<font color="#CCCCCC">payload we can see that the</font><font color="#E5E5E5"> message will</font>

322
00:16:00,960 --> 00:16:05,310
<font color="#E5E5E5">be filled with like the hello my friend</font>

323
00:16:02,550 --> 00:16:06,660
<font color="#E5E5E5">message length will be correct</font><font color="#CCCCCC"> and since</font>

324
00:16:05,310 --> 00:16:10,829
the translation function is set to print

325
00:16:06,660 --> 00:16:13,260
<font color="#E5E5E5">in English it will print as is but the</font>

326
00:16:10,830 --> 00:16:15,360
problem again comes back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> what if the</font>

327
00:16:13,260 --> 00:16:17,100
user is has a malicious intent and

328
00:16:15,360 --> 00:16:20,040
<font color="#E5E5E5">overrides the payload with something</font>

329
00:16:17,100 --> 00:16:22,050
that's<font color="#E5E5E5"> not expected so here</font>

330
00:16:20,040 --> 00:16:24,030
the payload starts with overriding the

331
00:16:22,050 --> 00:16:26,339
message with like an alert

332
00:16:24,030 --> 00:16:28,020
document.cookie<font color="#E5E5E5"> it then overrides a</font>

333
00:16:26,340 --> 00:16:30,750
complete message<font color="#CCCCCC"> pulls up the message</font>

334
00:16:28,020 --> 00:16:34,680
length with 64 and then overrides the

335
00:16:30,750 --> 00:16:37,110
font the function with a<font color="#CCCCCC"> built in</font>

336
00:16:34,680 --> 00:16:38,910
function<font color="#E5E5E5"> so essentially like Emscripten</font>

337
00:16:37,110 --> 00:16:41,160
provides a lot of<font color="#E5E5E5"> built-in function and</font>

338
00:16:38,910 --> 00:16:44,459
these<font color="#E5E5E5"> kind of attacks can</font><font color="#CCCCCC"> be used to</font>

339
00:16:41,160 --> 00:16:46,709
exfiltrate data so<font color="#CCCCCC"> it's like like we saw</font>

340
00:16:44,460 --> 00:16:49,800
earlier<font color="#CCCCCC"> instead of like a normal message</font>

341
00:16:46,710 --> 00:16:51,480
<font color="#E5E5E5">our message was overflowed so that the</font>

342
00:16:49,800 --> 00:16:53,880
function address for<font color="#CCCCCC"> printing</font><font color="#E5E5E5"> English</font>

343
00:16:51,480 --> 00:16:59,100
was overwritten by EMS<font color="#CCCCCC"> rond script and</font>

344
00:16:53,880 --> 00:17:00,780
that<font color="#CCCCCC"> caused the password to be eat the</font>

345
00:16:59,100 --> 00:17:02,910
the<font color="#CCCCCC"> next</font><font color="#E5E5E5"> kind of bug that we want to</font>

346
00:17:00,780 --> 00:17:06,990
look at is<font color="#CCCCCC"> a type infusion</font><font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> big</font>

347
00:17:02,910 --> 00:17:09,359
<font color="#E5E5E5">basic issue where a variable is</font>

348
00:17:06,990 --> 00:17:11,370
overwritten with<font color="#E5E5E5"> user control struck but</font>

349
00:17:09,359 --> 00:17:13,379
<font color="#CCCCCC">attack a</font><font color="#E5E5E5"> control structure and basically</font>

350
00:17:11,369 --> 00:17:16,739
whenever<font color="#E5E5E5"> that func functions within that</font>

351
00:17:13,380 --> 00:17:18,630
structure<font color="#E5E5E5"> coil it leads to malicious</font>

352
00:17:16,740 --> 00:17:21,450
code meaning<font color="#E5E5E5"> is</font><font color="#CCCCCC"> futile</font><font color="#E5E5E5"> so in this case</font>

353
00:17:18,630 --> 00:17:23,790
like<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> tried</font><font color="#E5E5E5"> what you see it prints</font>

354
00:17:21,450 --> 00:17:26,010
malicious code executed but the<font color="#E5E5E5"> good</font>

355
00:17:23,790 --> 00:17:28,290
<font color="#CCCCCC">thing with</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> it means like their</font>

356
00:17:26,010 --> 00:17:30,090
signature checks<font color="#E5E5E5"> present so if you try</font>

357
00:17:28,290 --> 00:17:32,970
to do this with EMCC

358
00:17:30,090 --> 00:17:34,110
it fails and this happens<font color="#CCCCCC"> because it</font>

359
00:17:32,970 --> 00:17:35,600
tries to<font color="#CCCCCC"> check</font><font color="#E5E5E5"> for the function</font>

360
00:17:34,110 --> 00:17:38,669
<font color="#CCCCCC">signature before</font><font color="#E5E5E5"> going forward</font>

361
00:17:35,600 --> 00:17:40,379
but the problem with this is<font color="#CCCCCC"> like what</font>

362
00:17:38,670 --> 00:17:41,130
happens when we try<font color="#CCCCCC"> to match the</font>

363
00:17:40,380 --> 00:17:43,860
signature

364
00:17:41,130 --> 00:17:45,960
so in this case<font color="#E5E5E5"> instead of using a</font>

365
00:17:43,860 --> 00:17:49,350
double in the argument<font color="#E5E5E5"> we change it to</font><font color="#CCCCCC"> a</font>

366
00:17:45,960 --> 00:17:52,620
<font color="#CCCCCC">boy</font><font color="#E5E5E5"> and this essentially bypasses the</font>

367
00:17:49,350 --> 00:17:54,928
<font color="#E5E5E5">signature the reason why this happens is</font>

368
00:17:52,620 --> 00:17:57,229
because the signature checks are

369
00:17:54,929 --> 00:18:00,059
happening at the webassembly<font color="#E5E5E5"> layer</font><font color="#CCCCCC"> so</font>

370
00:17:57,230 --> 00:18:01,679
they are able<font color="#CCCCCC"> to they're not</font><font color="#E5E5E5"> able to</font>

371
00:18:00,059 --> 00:18:05,039
differentiate between the granularity<font color="#CCCCCC"> at</font>

372
00:18:01,679 --> 00:18:08,390
the<font color="#CCCCCC"> c c++</font><font color="#E5E5E5"> layer but this can</font><font color="#CCCCCC"> be avoided</font>

373
00:18:05,039 --> 00:18:11,669
by<font color="#CCCCCC"> using</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> CFI fly</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> always use that</font>

374
00:18:08,390 --> 00:18:17,730
<font color="#E5E5E5">and if you use that it essentially</font>

375
00:18:11,669 --> 00:18:20,340
results in a try to<font color="#CCCCCC"> conclude</font><font color="#E5E5E5"> this talk</font>

376
00:18:17,730 --> 00:18:22,830
we just<font color="#CCCCCC"> want to highlight that</font><font color="#E5E5E5"> offensive</font>

377
00:18:20,340 --> 00:18:24,750
was<font color="#E5E5E5"> Bob assembly is still in its early</font>

378
00:18:22,830 --> 00:18:28,918
stages<font color="#CCCCCC"> but we are we are seeing a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

379
00:18:24,750 --> 00:18:32,100
<font color="#E5E5E5">life evolving malicious modules</font><font color="#CCCCCC"> the</font>

380
00:18:28,919 --> 00:18:34,710
<font color="#E5E5E5">mitigations are helpful they are really</font>

381
00:18:32,100 --> 00:18:36,928
web the<font color="#CCCCCC"> web assembly group at WEC is</font>

382
00:18:34,710 --> 00:18:39,120
also what<font color="#CCCCCC"> we</font><font color="#E5E5E5"> really hard to get it in</font>

383
00:18:36,929 --> 00:18:41,159
<font color="#CCCCCC">place but they are still in progress</font>

384
00:18:39,120 --> 00:18:44,090
so definitely analyze<font color="#E5E5E5"> a code it's a</font>

385
00:18:41,159 --> 00:18:48,030
shared responsibility so look at<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font>

386
00:18:44,090 --> 00:18:49,408
don't so if<font color="#E5E5E5"> you want to look at the code</font>

387
00:18:48,030 --> 00:18:50,908
<font color="#E5E5E5">snippets</font><font color="#CCCCCC"> IV shared here it's on the</font>

388
00:18:49,409 --> 00:18:56,669
github<font color="#E5E5E5"> link so feel free to check that</font>

389
00:18:50,909 --> 00:18:59,299
<font color="#E5E5E5">also we get out questions any questions</font>

390
00:18:56,669 --> 00:18:59,299
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> audience</font>

391
00:19:16,190 --> 00:19:23,340
<font color="#CCCCCC">hi you mostly focused on what looked</font>

392
00:19:19,710 --> 00:19:25,320
like<font color="#CCCCCC"> the C's equals plus</font><font color="#E5E5E5"> toolchain</font><font color="#CCCCCC"> are</font>

393
00:19:23,340 --> 00:19:27,600
there similar mitigations and

394
00:19:25,320 --> 00:19:34,429
Prevention's for like a<font color="#E5E5E5"> golang workflow</font>

395
00:19:27,600 --> 00:19:38,189
or a rust workflow<font color="#CCCCCC"> looked at the</font>

396
00:19:34,430 --> 00:19:40,680
<font color="#CCCCCC">environment after</font><font color="#E5E5E5"> reading respect I am</font><font color="#CCCCCC"> I</font>

397
00:19:38,190 --> 00:19:43,830
I know there are being<font color="#CCCCCC"> our work</font><font color="#E5E5E5"> there's</font>

398
00:19:40,680 --> 00:19:45,420
been work<font color="#E5E5E5"> on that but yeah so we haven't</font>

399
00:19:43,830 --> 00:19:48,179
<font color="#E5E5E5">like</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> investigated at the same</font>

400
00:19:45,420 --> 00:19:55,710
kind of bugs<font color="#E5E5E5"> exist in that</font><font color="#CCCCCC"> too chin as</font>

401
00:19:48,180 --> 00:19:57,630
well are you planning on doing like<font color="#CCCCCC"> a</font>

402
00:19:55,710 --> 00:20:00,960
future talk maybe on some of the<font color="#E5E5E5"> lower</font>

403
00:19:57,630 --> 00:20:04,470
<font color="#E5E5E5">level things like shared memory timing</font>

404
00:20:00,960 --> 00:20:06,540
attacks<font color="#E5E5E5"> yes so</font><font color="#CCCCCC"> threading is one</font>

405
00:20:04,470 --> 00:20:07,410
important<font color="#E5E5E5"> thing that is being looked at</font>

406
00:20:06,540 --> 00:20:09,930
<font color="#CCCCCC">rather than you</font>

407
00:20:07,410 --> 00:20:11,820
I mean<font color="#CCCCCC"> Specter stuff</font><font color="#E5E5E5"> not like not</font>

408
00:20:09,930 --> 00:20:15,200
attacks against your own logic<font color="#E5E5E5"> but more</font>

409
00:20:11,820 --> 00:20:29,639
like exporting them as a mechanism for

410
00:20:15,200 --> 00:20:33,890
<font color="#E5E5E5">just more general compromise</font><font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> QA</font>

411
00:20:29,640 --> 00:20:36,120
<font color="#E5E5E5">we have plenty of time so ask away</font>

412
00:20:33,890 --> 00:20:39,190
well thank<font color="#E5E5E5"> you guys it's been a pleasure</font>

413
00:20:36,120 --> 00:20:41,799
<font color="#CCCCCC">thank you</font><font color="#E5E5E5"> thank you everyone</font>

414
00:20:39,190 --> 00:20:41,799
[Applause]

