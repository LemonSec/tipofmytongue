1
00:00:00,000 --> 00:00:03,270
thank you for coming along you may have

2
00:00:01,920 --> 00:00:05,009
seen me from previous shows such as

3
00:00:03,270 --> 00:00:08,069
talking about privileged containers I

4
00:00:05,009 --> 00:00:10,889
mentioned Cairo this is Cairo so let's

5
00:00:08,069 --> 00:00:12,150
jump into it cool so the things we're

6
00:00:10,889 --> 00:00:13,559
going to talk about today I will give

7
00:00:12,150 --> 00:00:15,089
you a general introduction for those

8
00:00:13,559 --> 00:00:16,259
unfamiliar with kubernetes that's okay

9
00:00:15,089 --> 00:00:18,029
we'll give you an off knowledge to come

10
00:00:16,260 --> 00:00:20,010
along for the ride we'll introduce the

11
00:00:18,029 --> 00:00:21,890
general problem that we commonly face

12
00:00:20,010 --> 00:00:24,390
from a security perspective with

13
00:00:21,890 --> 00:00:26,220
kubernetes will demo some of the attacks

14
00:00:24,390 --> 00:00:27,869
in some other ways that both can go

15
00:00:26,220 --> 00:00:30,240
wrong and then we'll also introduce the

16
00:00:27,869 --> 00:00:31,980
solution for the we were built for

17
00:00:30,240 --> 00:00:34,739
ourselves which is Cairo now we'll give

18
00:00:31,980 --> 00:00:36,600
you a demo of that and then wrap up here

19
00:00:34,739 --> 00:00:38,339
is your typical who am i slide done

20
00:00:36,600 --> 00:00:39,480
slightly differently if you face that

21
00:00:38,340 --> 00:00:42,809
into a terminal which should spit out

22
00:00:39,480 --> 00:00:44,480
similar stuff as normal who am i I'm Sam

23
00:00:42,809 --> 00:00:46,110
confusing you also called Frenchie

24
00:00:44,480 --> 00:00:48,569
infrastructure security engineering

25
00:00:46,110 --> 00:00:51,000
manager cruise at cruise yeah we're a

26
00:00:48,570 --> 00:00:51,840
company makes help driving cars and I'm

27
00:00:51,000 --> 00:00:53,610
Dustin Dekker

28
00:00:51,840 --> 00:00:57,420
I'm a senior infrastructure security

29
00:00:53,610 --> 00:00:58,410
engineer at Cruises cool and get the the

30
00:00:57,420 --> 00:00:59,699
important stuff out of the way yeah

31
00:00:58,410 --> 00:01:01,559
cruise we're building the world's most

32
00:00:59,699 --> 00:01:02,910
advanced self-driving vehicles to safely

33
00:01:01,559 --> 00:01:04,349
connect the people places things and

34
00:01:02,910 --> 00:01:08,310
experiences we care about and where

35
00:01:04,349 --> 00:01:11,070
aren't cool so similar to the main talk

36
00:01:08,310 --> 00:01:13,080
we'll do the the usual test who here has

37
00:01:11,070 --> 00:01:15,600
never even heard of kubernetes complete

38
00:01:13,080 --> 00:01:18,330
background never heard of it give me big

39
00:01:15,600 --> 00:01:19,949
pirate yar all right okay cool

40
00:01:18,330 --> 00:01:22,490
this is for Ian if you're in the

41
00:01:19,950 --> 00:01:24,600
audience I don't believe you cool

42
00:01:22,490 --> 00:01:26,429
everyone else who's maybe use it once or

43
00:01:24,600 --> 00:01:27,869
twice but not super confident

44
00:01:26,430 --> 00:01:31,560
yeah dabbled a little bit but give me

45
00:01:27,869 --> 00:01:33,299
big yar okay that's yeah like maybe a

46
00:01:31,560 --> 00:01:34,920
little bit more what about people who've

47
00:01:33,299 --> 00:01:36,420
used it a lot feel pretty confident

48
00:01:34,920 --> 00:01:38,220
yeah operators or maybe even you I call

49
00:01:36,420 --> 00:01:41,130
contributors to kubernetes who's in that

50
00:01:38,220 --> 00:01:42,658
boat give me a big yar okay I'd say most

51
00:01:41,130 --> 00:01:44,369
of the audience so far has been probably

52
00:01:42,659 --> 00:01:45,509
in that boat second cap and then finally

53
00:01:44,369 --> 00:01:46,860
who's just confused and from the

54
00:01:45,509 --> 00:01:49,040
shipping industry wondering why we're

55
00:01:46,860 --> 00:01:51,810
talking about containers give me yeah

56
00:01:49,040 --> 00:01:54,030
one one person great I'm very sorry

57
00:01:51,810 --> 00:01:54,930
whoever that was but we'll break it down

58
00:01:54,030 --> 00:01:56,969
will give you enough background

59
00:01:54,930 --> 00:01:57,899
knowledge for those unfamiliar so for

60
00:01:56,969 --> 00:02:00,298
the shipping industry you should be

61
00:01:57,899 --> 00:02:01,920
along for the ride so you may have seen

62
00:02:00,299 --> 00:02:04,200
something like this when looking at what

63
00:02:01,920 --> 00:02:05,460
is kubernetes you know in description

64
00:02:04,200 --> 00:02:07,049
such as yeah it's an open source

65
00:02:05,460 --> 00:02:08,160
container orchestration platform for

66
00:02:07,049 --> 00:02:09,840
automating application deployment

67
00:02:08,160 --> 00:02:11,549
scaling and management with a diagram

68
00:02:09,840 --> 00:02:12,310
like that that you look at and still

69
00:02:11,550 --> 00:02:14,680
have your heads

70
00:02:12,310 --> 00:02:17,170
yeah scratching at the end of them so

71
00:02:14,680 --> 00:02:18,850
we'll break it down to very very basic

72
00:02:17,170 --> 00:02:21,309
first principles the only knowledge you

73
00:02:18,850 --> 00:02:24,100
really need to know for this talk here

74
00:02:21,310 --> 00:02:26,980
we have a nerd this nerd would like to

75
00:02:24,100 --> 00:02:28,569
make a deployment and so they make a

76
00:02:26,980 --> 00:02:30,549
deployment file which is typically a

77
00:02:28,569 --> 00:02:32,589
gamma file that describes you know this

78
00:02:30,550 --> 00:02:34,390
is a pod this is the image that we want

79
00:02:32,590 --> 00:02:35,620
and yeah here's you know some to

80
00:02:34,390 --> 00:02:37,839
metadata around it such as how many

81
00:02:35,620 --> 00:02:40,090
replicas we want and then that

82
00:02:37,840 --> 00:02:43,060
deployment is passed on to the the API

83
00:02:40,090 --> 00:02:44,260
server and that's that's power

84
00:02:43,060 --> 00:02:47,350
deployments work with kubernetes

85
00:02:44,260 --> 00:02:48,429
effectively one one important note about

86
00:02:47,350 --> 00:02:50,560
the threat model of the way of thinking

87
00:02:48,430 --> 00:02:52,930
about today is that we're not talking

88
00:02:50,560 --> 00:02:54,940
about malicious administrators people

89
00:02:52,930 --> 00:02:56,500
who have access to admin the Kloster

90
00:02:54,940 --> 00:02:58,239
have access to admin across that that's

91
00:02:56,500 --> 00:02:59,560
expected we're also not talking about

92
00:02:58,239 --> 00:03:01,239
people who are completely unknown

93
00:02:59,560 --> 00:03:03,550
stright we're not talking about kernel

94
00:03:01,239 --> 00:03:05,440
OD yeah cribben itísö days or any ways

95
00:03:03,550 --> 00:03:07,209
that you can relate escalate we're

96
00:03:05,440 --> 00:03:08,950
talking about cases where yeah commonly

97
00:03:07,209 --> 00:03:11,500
red teamers who have creds who want to

98
00:03:08,950 --> 00:03:13,750
try and break clusters or most commonly

99
00:03:11,500 --> 00:03:15,010
by far is well-meaning developers who

100
00:03:13,750 --> 00:03:16,450
are just trying to do their job who

101
00:03:15,010 --> 00:03:18,370
don't realize that they're accidentally

102
00:03:16,450 --> 00:03:19,390
deploying something that's insecure and

103
00:03:18,370 --> 00:03:21,040
we want to be able to provide that

104
00:03:19,390 --> 00:03:22,958
feedback to them at the earliest point

105
00:03:21,040 --> 00:03:25,450
in the deployment lifecycle for them to

106
00:03:22,959 --> 00:03:27,790
prevent a security issues so a little

107
00:03:25,450 --> 00:03:31,000
bit more detail particularly related to

108
00:03:27,790 --> 00:03:33,040
how how Cairo works so what is the API

109
00:03:31,000 --> 00:03:35,019
server well it's the coordinator of the

110
00:03:33,040 --> 00:03:36,459
system so it receives this request and

111
00:03:35,019 --> 00:03:39,370
then talks to the other moving pieces

112
00:03:36,459 --> 00:03:40,959
such as nodes so nodes are effectively

113
00:03:39,370 --> 00:03:41,530
the servers that you're trying to talk

114
00:03:40,959 --> 00:03:44,739
to here

115
00:03:41,530 --> 00:03:46,900
I think ec2 GCE or yeah any compute

116
00:03:44,739 --> 00:03:48,430
really and they talk to them very little

117
00:03:46,900 --> 00:03:51,280
thing called a coup blip which is an

118
00:03:48,430 --> 00:03:53,049
agent that runs on those nodes and then

119
00:03:51,280 --> 00:03:54,910
talks out to the API server for

120
00:03:53,049 --> 00:03:56,829
instructions means receives those

121
00:03:54,910 --> 00:03:58,150
instructions effects the change which is

122
00:03:56,829 --> 00:03:59,950
the pods we were talking about before

123
00:03:58,150 --> 00:04:01,510
which is you know groups of containers

124
00:03:59,950 --> 00:04:03,010
with certain configurations how many

125
00:04:01,510 --> 00:04:05,410
replicas you want the image and so on

126
00:04:03,010 --> 00:04:06,850
and the power of kubernetes really comes

127
00:04:05,410 --> 00:04:11,320
from the fact that you can run many many

128
00:04:06,850 --> 00:04:13,358
many nodes so that's that's that's it in

129
00:04:11,320 --> 00:04:15,310
terms of the nouns that you really need

130
00:04:13,359 --> 00:04:16,900
to know what are the verbs what does it

131
00:04:15,310 --> 00:04:18,940
actually do well you can think of

132
00:04:16,899 --> 00:04:20,320
kubernetes as a state machine one

133
00:04:18,940 --> 00:04:22,180
critical thing to understand here is

134
00:04:20,320 --> 00:04:24,190
that it takes an ideal state and then

135
00:04:22,180 --> 00:04:26,330
realizes it using a resource specific

136
00:04:24,190 --> 00:04:29,150
controller in this case here we show

137
00:04:26,330 --> 00:04:30,438
a simplified deployment controller that

138
00:04:29,150 --> 00:04:33,888
you know it takes a request and then

139
00:04:30,439 --> 00:04:36,020
make some pods pod memes not dead yet

140
00:04:33,889 --> 00:04:37,310
and then yeah but it could do other

141
00:04:36,020 --> 00:04:40,188
things as well such as your ingress

142
00:04:37,310 --> 00:04:41,300
right where I would take an ingress

143
00:04:40,189 --> 00:04:42,469
deployment and then pass it to the

144
00:04:41,300 --> 00:04:44,150
English controller which would affect

145
00:04:42,469 --> 00:04:46,580
change on save load balancers make some

146
00:04:44,150 --> 00:04:47,989
ports open and so on and one critical

147
00:04:46,580 --> 00:04:50,628
step here which is important for Cairo

148
00:04:47,990 --> 00:04:52,430
is that there is a an admission

149
00:04:50,629 --> 00:04:53,509
controller right so when new deployments

150
00:04:52,430 --> 00:04:54,979
come in you can check them with the

151
00:04:53,509 --> 00:04:57,349
validating web book or a mutating web

152
00:04:54,979 --> 00:04:59,419
book and then either yeah accept reject

153
00:04:57,349 --> 00:05:01,789
or yeah mutate the deployment as

154
00:04:59,419 --> 00:05:03,049
appropriate so with kubernetes we have

155
00:05:01,789 --> 00:05:04,969
this you know powerful tool that

156
00:05:03,050 --> 00:05:07,580
provides planet-scale capabilities

157
00:05:04,969 --> 00:05:09,319
however it's very complex and tiny

158
00:05:07,580 --> 00:05:11,710
misconfigurations can sometimes lead to

159
00:05:09,319 --> 00:05:14,569
critical vulnerabilities so really

160
00:05:11,710 --> 00:05:15,888
kubernetes is the death star in this

161
00:05:14,569 --> 00:05:19,190
talk we hope to demonstrate how a

162
00:05:15,889 --> 00:05:21,080
talented pilot can fire proton torpedoes

163
00:05:19,190 --> 00:05:23,599
down some of the common exhaust ports

164
00:05:21,080 --> 00:05:26,359
and then also show you a tool to how you

165
00:05:23,599 --> 00:05:27,378
can prevent this over to Justin thank

166
00:05:26,360 --> 00:05:29,599
you Sam

167
00:05:27,379 --> 00:05:31,550
so I'll cover some of the security

168
00:05:29,599 --> 00:05:33,560
issues that we've seen give some demos

169
00:05:31,550 --> 00:05:35,419
of them in action and then I'll

170
00:05:33,560 --> 00:05:39,680
introduce the tooling that we that we

171
00:05:35,419 --> 00:05:42,318
made to address this so compromising

172
00:05:39,680 --> 00:05:45,860
vanilla kubernetes is easy but securing

173
00:05:42,319 --> 00:05:47,539
it is difficult even if you you create

174
00:05:45,860 --> 00:05:50,150
the cluster with best practices like

175
00:05:47,539 --> 00:05:52,639
role based access control and mutual TLS

176
00:05:50,150 --> 00:05:54,258
between the notes there are still some

177
00:05:52,639 --> 00:05:57,050
routes of privilege escalation through

178
00:05:54,259 --> 00:05:58,969
standard kubernetes api s-- and we

179
00:05:57,050 --> 00:06:00,229
recently released a blog post to cover

180
00:05:58,969 --> 00:06:01,819
some of this in more detail that you

181
00:06:00,229 --> 00:06:08,180
should check out on medium cruises

182
00:06:01,819 --> 00:06:11,750
medium and yeah so some of those api's

183
00:06:08,180 --> 00:06:14,539
that kubernetes offers for pods about

184
00:06:11,750 --> 00:06:17,180
you des specified by mounts and this can

185
00:06:14,539 --> 00:06:21,009
get access to the hosts file system host

186
00:06:17,180 --> 00:06:23,289
networking which can be used to bypass a

187
00:06:21,009 --> 00:06:26,539
security feature which will cover soon

188
00:06:23,289 --> 00:06:28,039
running privileged containers which is

189
00:06:26,539 --> 00:06:30,110
something that sam Amaya covered while

190
00:06:28,039 --> 00:06:32,060
yesterday and that's not even talking

191
00:06:30,110 --> 00:06:34,699
about kernel vulnerability server 0 days

192
00:06:32,060 --> 00:06:36,289
so ultimately these features can result

193
00:06:34,699 --> 00:06:38,490
in host compromised or cluster

194
00:06:36,289 --> 00:06:40,169
compromised and when that happens

195
00:06:38,490 --> 00:06:41,190
they can often obtain secrets they need

196
00:06:40,169 --> 00:06:43,948
to pivot through the rest of

197
00:06:41,190 --> 00:06:45,569
infrastructure one quick thing on that

198
00:06:43,949 --> 00:06:46,770
image I absolutely love is yeah have you

199
00:06:45,569 --> 00:06:48,240
seen a container like that where like

200
00:06:46,770 --> 00:06:50,580
you just look at it it's like oh it's a

201
00:06:48,240 --> 00:06:52,199
Thai fire inside a container that image

202
00:06:50,580 --> 00:06:54,300
was just perfect a custom fabric

203
00:06:52,199 --> 00:06:56,990
yeah a lot of surface area which can

204
00:06:54,300 --> 00:06:59,520
help facilitate these attacks externally

205
00:06:56,990 --> 00:07:01,770
so here's a demo of using hosts paths

206
00:06:59,520 --> 00:07:04,340
are also called bind mounts to mount the

207
00:07:01,770 --> 00:07:07,169
hosts file system and it's used to

208
00:07:04,340 --> 00:07:08,698
enumerate every processes environment

209
00:07:07,169 --> 00:07:12,330
variables which can often contain

210
00:07:08,699 --> 00:07:15,930
secrets have you spotted one is a

211
00:07:12,330 --> 00:07:18,599
private key in there another common

212
00:07:15,930 --> 00:07:20,819
practice is escalation through a docker

213
00:07:18,599 --> 00:07:22,889
socket that's mounted this is commonly

214
00:07:20,819 --> 00:07:25,979
mounted for building containers using

215
00:07:22,889 --> 00:07:28,050
the hoe stalker daemon and this is that

216
00:07:25,979 --> 00:07:30,599
because it is full API access to the

217
00:07:28,050 --> 00:07:33,569
host docker daemon which can then be

218
00:07:30,599 --> 00:07:38,880
used to spin up new workloads and

219
00:07:33,569 --> 00:07:41,280
escalate access and then cloud providers

220
00:07:38,880 --> 00:07:43,650
they take care of many of the basic

221
00:07:41,280 --> 00:07:45,359
security best practices when

222
00:07:43,650 --> 00:07:47,909
bootstrapping a cluster but they can

223
00:07:45,360 --> 00:07:50,219
also add some surface area for attack in

224
00:07:47,909 --> 00:07:52,409
this example the GCE metadata API

225
00:07:50,219 --> 00:07:55,139
includes a cube and endpoint which is

226
00:07:52,409 --> 00:07:59,009
used for the nodes to bootstrap access

227
00:07:55,139 --> 00:08:01,770
to the API server so they grab this

228
00:07:59,009 --> 00:08:04,969
credential and they ask the coop API

229
00:08:01,770 --> 00:08:06,990
server for their node certificates and

230
00:08:04,969 --> 00:08:10,919
the node authorizer

231
00:08:06,990 --> 00:08:14,130
and kubernetes allows a node to access

232
00:08:10,919 --> 00:08:16,560
resources that are scheduled on it so if

233
00:08:14,130 --> 00:08:18,780
you request node certificates for each

234
00:08:16,560 --> 00:08:22,560
node you can request all those resources

235
00:08:18,780 --> 00:08:24,150
such as secrets and Brad keys Munro -

236
00:08:22,560 --> 00:08:25,979
slick exploit which automates this

237
00:08:24,150 --> 00:08:27,750
process for all nodes in the cluster and

238
00:08:25,979 --> 00:08:30,810
gives you all the secrets that you need

239
00:08:27,750 --> 00:08:32,940
to pivot your access here's the entry

240
00:08:30,810 --> 00:08:35,610
point of it and all it does is it spins

241
00:08:32,940 --> 00:08:38,370
up an evil pod copies his script which

242
00:08:35,610 --> 00:08:40,349
is what automates the process and that

243
00:08:38,370 --> 00:08:43,260
script will enumerate all the nodes in

244
00:08:40,349 --> 00:08:46,350
the cluster it'll grab the credentials

245
00:08:43,260 --> 00:08:48,959
from the crew them endpoint then it'll

246
00:08:46,350 --> 00:08:51,209
use that credential to retrieve the node

247
00:08:48,959 --> 00:08:52,229
certificates then with the node

248
00:08:51,209 --> 00:08:54,209
certificates

249
00:08:52,230 --> 00:08:56,550
10 tickets as each node and pulls down

250
00:08:54,210 --> 00:08:58,740
the resources assigned to them and then

251
00:08:56,550 --> 00:09:00,270
finally it'll package them up in a nice

252
00:08:58,740 --> 00:09:05,820
tar file and give them to you on your

253
00:09:00,270 --> 00:09:07,470
system so let's watch that in action it

254
00:09:05,820 --> 00:09:11,640
only takes a few seconds on a small

255
00:09:07,470 --> 00:09:16,680
cluster you can see shortly all the

256
00:09:11,640 --> 00:09:19,020
secrets dumped out in a directory so we

257
00:09:16,680 --> 00:09:20,579
we saw a lot of these issues some of

258
00:09:19,020 --> 00:09:21,630
them we were familiar with some of them

259
00:09:20,580 --> 00:09:24,570
the red team brought to her attention

260
00:09:21,630 --> 00:09:26,100
and some of them Brad Keys men brought

261
00:09:24,570 --> 00:09:29,010
to her attention when he is contracting

262
00:09:26,100 --> 00:09:31,500
for us so we knew that we needed to

263
00:09:29,010 --> 00:09:33,450
solve this problem we needed a solution

264
00:09:31,500 --> 00:09:34,320
that enforces security policies to

265
00:09:33,450 --> 00:09:37,080
prevent some of these myths

266
00:09:34,320 --> 00:09:39,300
configurations ideally should reduce

267
00:09:37,080 --> 00:09:41,400
complexity for engineers or where I

268
00:09:39,300 --> 00:09:43,709
can't increases visibility and helps

269
00:09:41,400 --> 00:09:47,910
educate them and it shouldn't break

270
00:09:43,710 --> 00:09:49,410
things that are already running we don't

271
00:09:47,910 --> 00:09:50,969
want to slow down their velocity too

272
00:09:49,410 --> 00:09:53,819
much because they're trying to deliver a

273
00:09:50,970 --> 00:09:56,340
product but we still want to have a good

274
00:09:53,820 --> 00:09:59,190
impact where we can and finally it needs

275
00:09:56,340 --> 00:10:00,750
to be easily extensible these are some

276
00:09:59,190 --> 00:10:03,210
security issues that we recognized today

277
00:10:00,750 --> 00:10:07,080
but surely there will be more down the

278
00:10:03,210 --> 00:10:09,810
road and we also wanted to support some

279
00:10:07,080 --> 00:10:12,140
operational use cases that can help make

280
00:10:09,810 --> 00:10:16,469
the clusters more stable and performant

281
00:10:12,140 --> 00:10:18,000
and there's some prior art to many of

282
00:10:16,470 --> 00:10:21,600
these projects were started around the

283
00:10:18,000 --> 00:10:23,400
same time or a bit after but none of

284
00:10:21,600 --> 00:10:25,950
them today still solve all the

285
00:10:23,400 --> 00:10:28,680
requirements that we set out a common

286
00:10:25,950 --> 00:10:31,380
myths requirement is that they they

287
00:10:28,680 --> 00:10:33,030
support giving feedback for pods that

288
00:10:31,380 --> 00:10:35,490
are applied to the cluster but not

289
00:10:33,030 --> 00:10:38,370
higher level resources that ultimately

290
00:10:35,490 --> 00:10:41,970
implement pods like deployments daemon

291
00:10:38,370 --> 00:10:44,370
sets staple sets and cron shops some of

292
00:10:41,970 --> 00:10:46,080
them lock a monitor mode which will run

293
00:10:44,370 --> 00:10:49,320
passively and tell you when a policy

294
00:10:46,080 --> 00:10:51,540
would have been enforced and all but the

295
00:10:49,320 --> 00:10:54,150
PSP the pod security policy lock

296
00:10:51,540 --> 00:10:55,890
flexible way for adding exemptions which

297
00:10:54,150 --> 00:10:58,500
is a very important feature when you

298
00:10:55,890 --> 00:11:03,569
have large clusters for diverse

299
00:10:58,500 --> 00:11:05,280
workloads so introducing Cairo Cairo is

300
00:11:03,570 --> 00:11:06,070
the workload policy enforcement tool

301
00:11:05,280 --> 00:11:08,589
that we entered

302
00:11:06,070 --> 00:11:11,620
to solve these problems and it includes

303
00:11:08,589 --> 00:11:15,699
features like telemetry which enable you

304
00:11:11,620 --> 00:11:16,959
to see what is enforced or would have

305
00:11:15,699 --> 00:11:20,019
been enforced if you're running a

306
00:11:16,959 --> 00:11:23,229
passive mode it includes many impactful

307
00:11:20,019 --> 00:11:26,259
policies out-of-the-box it has easy and

308
00:11:23,230 --> 00:11:29,319
flexible policy exemptions structured

309
00:11:26,259 --> 00:11:31,180
violation data that you can process with

310
00:11:29,319 --> 00:11:33,759
other tooling to help you make decisions

311
00:11:31,180 --> 00:11:36,279
and then one of the biggest features is

312
00:11:33,759 --> 00:11:37,630
the real-time interactive feedback and

313
00:11:36,279 --> 00:11:41,490
we'll dive into some of these features

314
00:11:37,630 --> 00:11:43,689
now but first how did we decide the name

315
00:11:41,490 --> 00:11:46,660
internally we called it security

316
00:11:43,690 --> 00:11:48,339
validator which was descriptive because

317
00:11:46,660 --> 00:11:51,639
it uses a validation web hook and

318
00:11:48,339 --> 00:11:53,889
kubernetes but is too vanilla and we

319
00:11:51,639 --> 00:11:56,949
wanted to use a carp on so we went to

320
00:11:53,889 --> 00:11:59,290
guardrails but that was taken in several

321
00:11:56,949 --> 00:12:00,569
ways by existing security tooling and

322
00:11:59,290 --> 00:12:03,099
also a security company

323
00:12:00,569 --> 00:12:05,680
then we settled on Cairo which is

324
00:12:03,100 --> 00:12:07,420
another carp on and they're also known

325
00:12:05,680 --> 00:12:10,000
as jersey barriers which are a divider

326
00:12:07,420 --> 00:12:13,269
for traffic used in the states and it

327
00:12:10,000 --> 00:12:14,740
has K which this Lita is a kubernetes is

328
00:12:13,269 --> 00:12:17,709
the closest we'll get to a dad joke in

329
00:12:14,740 --> 00:12:20,050
this talk as well so does Cairo work

330
00:12:17,709 --> 00:12:22,420
well we have a bunch of hackers and

331
00:12:20,050 --> 00:12:25,089
nerds hopefully mostly benevolent

332
00:12:22,420 --> 00:12:28,689
hackers and they want to apply resources

333
00:12:25,089 --> 00:12:30,670
to a cluster when the what validation

334
00:12:28,690 --> 00:12:33,730
web hook is configured or a mutation web

335
00:12:30,670 --> 00:12:36,310
hook it'll create an emission review

336
00:12:33,730 --> 00:12:38,860
request to Cairo and then Cairo will

337
00:12:36,310 --> 00:12:41,619
process the context of that request so

338
00:12:38,860 --> 00:12:43,870
the research specs and who is applying

339
00:12:41,620 --> 00:12:45,880
the resource and where it's being

340
00:12:43,870 --> 00:12:48,250
applied and then it can make into this a

341
00:12:45,880 --> 00:12:50,560
decision whether to allow or deny it and

342
00:12:48,250 --> 00:12:53,170
that comes back in a response from the

343
00:12:50,560 --> 00:12:55,569
API server and this all happens

344
00:12:53,170 --> 00:13:00,189
instantaneously so they get immediate

345
00:12:55,569 --> 00:13:01,510
feedback and the feedback pointed up for

346
00:13:00,189 --> 00:13:03,969
is one of the most important features to

347
00:13:01,510 --> 00:13:05,980
us this is what gives real-time feedback

348
00:13:03,970 --> 00:13:08,100
to the engineers that are applying

349
00:13:05,980 --> 00:13:11,199
deployments to the infrastructure or

350
00:13:08,100 --> 00:13:13,449
systems that are applying it and in this

351
00:13:11,199 --> 00:13:15,729
example they're applying a deployment

352
00:13:13,449 --> 00:13:18,449
which is a high-level resource that

353
00:13:15,730 --> 00:13:20,700
ultimately implements a replica set

354
00:13:18,450 --> 00:13:22,380
then finally it pods and they get

355
00:13:20,700 --> 00:13:24,960
feedback as soon as they apply the

356
00:13:22,380 --> 00:13:26,280
deployment in this case it's denying the

357
00:13:24,960 --> 00:13:29,100
request for a few reasons

358
00:13:26,280 --> 00:13:31,079
that they're now familiar with and that

359
00:13:29,100 --> 00:13:32,550
feedback going back to norm for security

360
00:13:31,080 --> 00:13:33,570
focused engineers isn't really valuable

361
00:13:32,550 --> 00:13:37,790
you know I'm mounting the dock recycler

362
00:13:33,570 --> 00:13:37,790
submit I know exactly why it was was not

363
00:13:38,240 --> 00:13:43,290
and we shipped today with many policies

364
00:13:41,520 --> 00:13:44,880
supported out of the box and when you

365
00:13:43,290 --> 00:13:47,969
encounter a violation whether it's

366
00:13:44,880 --> 00:13:49,170
enforced or not you get a JSON blob and

367
00:13:47,970 --> 00:13:53,550
standard out that you can use for

368
00:13:49,170 --> 00:13:55,490
processing so let's take a deep dive

369
00:13:53,550 --> 00:13:58,620
through them on what they actually do

370
00:13:55,490 --> 00:14:00,510
so no bind mounts prevents by mounts

371
00:13:58,620 --> 00:14:03,030
also called whose path mounts to which

372
00:14:00,510 --> 00:14:07,410
mount part of the host file system into

373
00:14:03,030 --> 00:14:09,890
the pod the node docker sock mountain is

374
00:14:07,410 --> 00:14:14,850
a subset of that used mount the docker

375
00:14:09,890 --> 00:14:17,220
socket API which we touched on before no

376
00:14:14,850 --> 00:14:19,440
helmet iller prevents deploying helm

377
00:14:17,220 --> 00:14:21,480
tiller which is often an API that

378
00:14:19,440 --> 00:14:23,820
provides unauthenticated access to

379
00:14:21,480 --> 00:14:28,170
deploy to kubernetes and becomes

380
00:14:23,820 --> 00:14:31,560
accessible from the entire BBC host

381
00:14:28,170 --> 00:14:32,969
networking is a feature that allows the

382
00:14:31,560 --> 00:14:36,089
pod to use a host networking stack

383
00:14:32,970 --> 00:14:41,010
rather than its own and this is a bypass

384
00:14:36,090 --> 00:14:43,110
for the GC metadata API host PID sharing

385
00:14:41,010 --> 00:14:45,780
allows the pod to use the host PID

386
00:14:43,110 --> 00:14:49,860
namespace and this is dangerous because

387
00:14:45,780 --> 00:14:52,980
it exposes a number of kernel to Nobel's

388
00:14:49,860 --> 00:14:54,720
but it also exposes all the environment

389
00:14:52,980 --> 00:14:56,910
variables for every process running on

390
00:14:54,720 --> 00:15:00,510
the machine and they often contain

391
00:14:56,910 --> 00:15:02,850
secrets no new capabilities which is

392
00:15:00,510 --> 00:15:05,130
something that Sam and Maya touched on

393
00:15:02,850 --> 00:15:07,110
in greater detail yesterday but this

394
00:15:05,130 --> 00:15:09,720
essentially prevents people from adding

395
00:15:07,110 --> 00:15:12,500
additional sis calls that they can use

396
00:15:09,720 --> 00:15:14,970
to potentially do nasty things

397
00:15:12,500 --> 00:15:17,700
no privileged container which is a

398
00:15:14,970 --> 00:15:19,500
superset of that it includes all the

399
00:15:17,700 --> 00:15:24,020
capabilities and also a bunch of other

400
00:15:19,500 --> 00:15:27,350
things mutable image reference in

401
00:15:24,020 --> 00:15:30,390
enforces hash pinning on the images and

402
00:15:27,350 --> 00:15:32,130
this is important because the tags that

403
00:15:30,390 --> 00:15:32,439
people often use can change under your

404
00:15:32,130 --> 00:15:35,500
feet

405
00:15:32,440 --> 00:15:38,410
and this can be problematic if a

406
00:15:35,500 --> 00:15:40,660
malicious image was replaced or just

407
00:15:38,410 --> 00:15:43,959
from an operational standpoint because

408
00:15:40,660 --> 00:15:45,219
the software version changed and this

409
00:15:43,960 --> 00:15:46,870
one's slightly different here where it's

410
00:15:45,220 --> 00:15:48,070
doctor on Tomcat instead of in genetics

411
00:15:46,870 --> 00:15:52,750
can anyone see what's wrong with this

412
00:15:48,070 --> 00:15:55,870
case anyone the audience nope

413
00:15:52,750 --> 00:15:56,830
so in 2018 docker user one two three

414
00:15:55,870 --> 00:15:58,630
three two one

415
00:15:56,830 --> 00:16:00,490
notice that there was no default image

416
00:15:58,630 --> 00:16:02,470
for Tomcat on docker hub and so if you

417
00:16:00,490 --> 00:16:03,940
docker run Tomcat like a lot of people

418
00:16:02,470 --> 00:16:06,250
would do it would actually pull down

419
00:16:03,940 --> 00:16:09,580
this backdoor image that docker user 1 2

420
00:16:06,250 --> 00:16:10,870
3 3 2 1 put up and we actually was

421
00:16:09,580 --> 00:16:12,490
equipped a minor instead of the official

422
00:16:10,870 --> 00:16:13,990
Tomcat image that people expected so

423
00:16:12,490 --> 00:16:15,400
they've got 5 million downloads over the

424
00:16:13,990 --> 00:16:17,920
period of a few months before I was

425
00:16:15,400 --> 00:16:19,329
pulled and so in this case yeah trusted

426
00:16:17,920 --> 00:16:22,300
image repository don't pull from public

427
00:16:19,330 --> 00:16:23,980
pull from a trusted GCR instead yeah

428
00:16:22,300 --> 00:16:26,010
generally don't want your engineers

429
00:16:23,980 --> 00:16:28,660
pulling random docker of images and

430
00:16:26,010 --> 00:16:33,130
decide to use turnover repost and said

431
00:16:28,660 --> 00:16:35,589
so this enforces app and the request

432
00:16:33,130 --> 00:16:38,020
ingress exemption policy is useful if

433
00:16:35,590 --> 00:16:41,050
you have an ingress that publishes

434
00:16:38,020 --> 00:16:42,640
services publicly and this requires that

435
00:16:41,050 --> 00:16:44,410
they get an exemption ahead of time so

436
00:16:42,640 --> 00:16:47,350
it's white listed and prevents

437
00:16:44,410 --> 00:16:50,860
accidental as public explode public

438
00:16:47,350 --> 00:16:53,200
exposure of applications and then

439
00:16:50,860 --> 00:16:55,930
recently a few more have been added some

440
00:16:53,200 --> 00:16:59,620
of these who are contributed but other

441
00:16:55,930 --> 00:17:02,680
open source users and the first one that

442
00:16:59,620 --> 00:17:04,689
no pod exec prevents exacting into pods

443
00:17:02,680 --> 00:17:06,970
and that might be useful in a production

444
00:17:04,689 --> 00:17:09,010
environment for example and there's a

445
00:17:06,970 --> 00:17:10,300
work-in-progress operator that's that

446
00:17:09,010 --> 00:17:12,699
somebody is working on that will

447
00:17:10,300 --> 00:17:14,680
actually garbage collect pods that have

448
00:17:12,699 --> 00:17:17,050
been exact into after some period of

449
00:17:14,680 --> 00:17:18,970
time so once they've been exact into

450
00:17:17,050 --> 00:17:21,250
they are painted you don't trust them

451
00:17:18,970 --> 00:17:23,550
and this will ensure that they get

452
00:17:21,250 --> 00:17:26,530
deleted and replaced it with a fresh one

453
00:17:23,550 --> 00:17:28,590
the default set comp policy just ensures

454
00:17:26,530 --> 00:17:32,560
that you're using the container runtime

455
00:17:28,590 --> 00:17:34,629
default set comp policy and that's

456
00:17:32,560 --> 00:17:37,060
important because kubernetes actually

457
00:17:34,630 --> 00:17:41,260
runs containers unconfined by default

458
00:17:37,060 --> 00:17:43,870
for every container runtime the override

459
00:17:41,260 --> 00:17:46,360
image pool policy was an example of an

460
00:17:43,870 --> 00:17:48,820
operational type policy that we've added

461
00:17:46,360 --> 00:17:52,750
and we added that because we're bumping

462
00:17:48,820 --> 00:17:54,879
into GCR rate limits with GCP for some

463
00:17:52,750 --> 00:17:59,290
of the common and it containers we used

464
00:17:54,880 --> 00:18:02,049
and so we we just overrode the image

465
00:17:59,290 --> 00:18:04,450
public policy to only download the image

466
00:18:02,049 --> 00:18:06,760
if it wasn't always already present on

467
00:18:04,450 --> 00:18:08,679
the machine and then finally empty

468
00:18:06,760 --> 00:18:11,590
directory without size limit this is

469
00:18:08,679 --> 00:18:14,950
another sort of like operational

470
00:18:11,590 --> 00:18:17,678
reliability policy and prevents the host

471
00:18:14,950 --> 00:18:20,530
disk from filling up on the note from

472
00:18:17,679 --> 00:18:21,820
temp of host mounts it's also worth

473
00:18:20,530 --> 00:18:23,200
noting here that some of these policies

474
00:18:21,820 --> 00:18:24,668
we added but some of these have also

475
00:18:23,200 --> 00:18:26,049
been added by the community so we have

476
00:18:24,669 --> 00:18:28,450
been sourced this tool in October of

477
00:18:26,049 --> 00:18:29,710
last year 2019 and since then we've had

478
00:18:28,450 --> 00:18:30,580
a great response from the community so

479
00:18:29,710 --> 00:18:32,799
yeah thanks to the people who've

480
00:18:30,580 --> 00:18:34,629
contributed the AHS on this front yeah

481
00:18:32,799 --> 00:18:38,559
and there are a number more in progress

482
00:18:34,630 --> 00:18:40,960
right now too and so if you wanted to

483
00:18:38,559 --> 00:18:44,139
add a policy you have to implement this

484
00:18:40,960 --> 00:18:45,880
interface policies are written and go so

485
00:18:44,140 --> 00:18:47,740
you have the full flexibility to go but

486
00:18:45,880 --> 00:18:51,580
you ultimately need to implement these

487
00:18:47,740 --> 00:18:53,290
two methods in it and this has changed a

488
00:18:51,580 --> 00:18:55,689
little bit since then because we've

489
00:18:53,290 --> 00:18:57,490
added support for mutating resources as

490
00:18:55,690 --> 00:18:59,919
well if you want to change certain

491
00:18:57,490 --> 00:19:01,990
aspects of them as they come in but it's

492
00:18:59,919 --> 00:19:03,220
still pretty much this but the benefit

493
00:19:01,990 --> 00:19:04,600
of using a cheering complete language

494
00:19:03,220 --> 00:19:05,799
for this is you can put in a logical

495
00:19:04,600 --> 00:19:07,178
like you could say hey this is a

496
00:19:05,799 --> 00:19:09,250
deployment after 5 p.m. on a Friday

497
00:19:07,179 --> 00:19:11,049
we'll only let it in if we can also

498
00:19:09,250 --> 00:19:12,190
query the Dominos API and see that

499
00:19:11,049 --> 00:19:17,350
you've already ordered pizza to say

500
00:19:12,190 --> 00:19:19,600
Sargent team hypothetically and here's

501
00:19:17,350 --> 00:19:21,580
an example of one of the policies that's

502
00:19:19,600 --> 00:19:24,010
implemented this is a subset of a no

503
00:19:21,580 --> 00:19:25,480
host by announced policy and all it does

504
00:19:24,010 --> 00:19:27,460
is it iterates through the volumes in

505
00:19:25,480 --> 00:19:29,320
the pod spec and if it finds one that's

506
00:19:27,460 --> 00:19:34,030
a host path it'll add a violation and

507
00:19:29,320 --> 00:19:38,110
return that and these are some example

508
00:19:34,030 --> 00:19:39,850
exemptions that you can use they have

509
00:19:38,110 --> 00:19:41,770
several fields that you can specify and

510
00:19:39,850 --> 00:19:44,770
they all use string globbing

511
00:19:41,770 --> 00:19:46,480
and you can specify like this particular

512
00:19:44,770 --> 00:19:48,670
resource and a certain namespace is

513
00:19:46,480 --> 00:19:51,490
exempt from some set of policies or

514
00:19:48,670 --> 00:19:54,430
maybe all policies so it's very easy to

515
00:19:51,490 --> 00:19:56,380
use and it's actually more flexible than

516
00:19:54,430 --> 00:20:00,760
the role based access control way of

517
00:19:56,380 --> 00:20:02,380
enforcing pod security policies so what

518
00:20:00,760 --> 00:20:05,830
you've been waiting for a demo of kay

519
00:20:02,380 --> 00:20:08,380
riddle we'll run this coop and exploit

520
00:20:05,830 --> 00:20:10,620
again with a GCE metadata concealment

521
00:20:08,380 --> 00:20:14,620
bypass which is the host networking plug

522
00:20:10,620 --> 00:20:16,330
but this time with K rel enabled so

523
00:20:14,620 --> 00:20:18,820
we're running that Auto explain script

524
00:20:16,330 --> 00:20:20,980
and immediately it gives to reject

525
00:20:18,820 --> 00:20:23,800
rejection that the host network uses

526
00:20:20,980 --> 00:20:26,800
forbidden so that exploit and no longer

527
00:20:23,800 --> 00:20:28,810
works now back to you Sam

528
00:20:26,800 --> 00:20:30,100
Thanks so we'll share some actual data

529
00:20:28,810 --> 00:20:32,500
from our experience in rolling this out

530
00:20:30,100 --> 00:20:34,990
so this is one of our busiest errs with

531
00:20:32,500 --> 00:20:36,100
about 18,000 pods at when we did the

532
00:20:34,990 --> 00:20:38,260
analysis and that's just a snapshot

533
00:20:36,100 --> 00:20:40,330
point in time a lot of these are

534
00:20:38,260 --> 00:20:42,160
transient very rapidly changing which

535
00:20:40,330 --> 00:20:43,480
makes it hard to do an analysis up right

536
00:20:42,160 --> 00:20:46,060
if you just dump it once and then have a

537
00:20:43,480 --> 00:20:47,950
look that data is already out of date so

538
00:20:46,060 --> 00:20:49,419
we run payroll and all of our past

539
00:20:47,950 --> 00:20:52,300
clusters and this is just one that we

540
00:20:49,420 --> 00:20:54,220
picked up for example so here is a

541
00:20:52,300 --> 00:20:56,620
dashboard and so we mentioned telemetry

542
00:20:54,220 --> 00:20:57,820
so across the top there you can see

543
00:20:56,620 --> 00:20:59,139
there's the different policies you know

544
00:20:57,820 --> 00:21:01,240
pod no bond mount no privilege

545
00:20:59,140 --> 00:21:02,530
containers etc and a red box in that

546
00:21:01,240 --> 00:21:04,360
column basically means that their own

547
00:21:02,530 --> 00:21:06,639
violation the name space is on the Left

548
00:21:04,360 --> 00:21:07,899
we blanked out but this was self-service

549
00:21:06,640 --> 00:21:09,220
an engineer could log in and have a look

550
00:21:07,900 --> 00:21:11,260
at this and be like oh how interesting

551
00:21:09,220 --> 00:21:13,900
mine is violating on these three Oh

552
00:21:11,260 --> 00:21:16,330
why's that I'll go have a look and then

553
00:21:13,900 --> 00:21:18,010
the yeah we ran that for a few weeks in

554
00:21:16,330 --> 00:21:19,929
monitor only mode before setting up

555
00:21:18,010 --> 00:21:21,850
enforcement periodically we applied some

556
00:21:19,930 --> 00:21:23,320
exemptions ourselves in cases were like

557
00:21:21,850 --> 00:21:26,080
oh this makes sense this should be you

558
00:21:23,320 --> 00:21:28,570
know doing whatever it's doing but yeah

559
00:21:26,080 --> 00:21:30,399
we certain watch for a couple weeks but

560
00:21:28,570 --> 00:21:32,740
once once we release this that's when

561
00:21:30,400 --> 00:21:33,820
the real magic happened so when we

562
00:21:32,740 --> 00:21:36,640
shared an announcement that we were

563
00:21:33,820 --> 00:21:38,020
going to put in place enforcement but

564
00:21:36,640 --> 00:21:38,740
people proactively went and fix the

565
00:21:38,020 --> 00:21:40,180
problems themselves

566
00:21:38,740 --> 00:21:42,190
when provided with the right information

567
00:21:40,180 --> 00:21:44,320
and tooling most devs will do the right

568
00:21:42,190 --> 00:21:46,330
thing and here's a couple of paraphrase

569
00:21:44,320 --> 00:21:48,610
comments from team members which we

570
00:21:46,330 --> 00:21:50,800
particularly like the one on on the

571
00:21:48,610 --> 00:21:52,060
right there where you know picked up on

572
00:21:50,800 --> 00:21:54,550
a particular thing and we noticed hey

573
00:21:52,060 --> 00:21:55,340
this is a security risk yeah do you mind

574
00:21:54,550 --> 00:21:56,840
yeah is this

575
00:21:55,340 --> 00:21:58,429
intentional and the response was like

576
00:21:56,840 --> 00:22:00,470
wait what happened this stupid oh geez

577
00:21:58,430 --> 00:22:01,970
I'm just gonna delete that so a lot of

578
00:22:00,470 --> 00:22:04,730
times the the operators were completely

579
00:22:01,970 --> 00:22:05,990
unaware that these things were in were

580
00:22:04,730 --> 00:22:07,250
there and they didn't need to be so they

581
00:22:05,990 --> 00:22:09,620
just deleted and got rid of a lot of

582
00:22:07,250 --> 00:22:12,980
stuff so yeah that was a that was a

583
00:22:09,620 --> 00:22:17,000
pretty big success story then once we

584
00:22:12,980 --> 00:22:18,790
put in place the the enforcement mode we

585
00:22:17,000 --> 00:22:22,640
also provide another dashboard for

586
00:22:18,790 --> 00:22:24,200
violations themselves and so it really

587
00:22:22,640 --> 00:22:25,520
only took us about a week to roll out

588
00:22:24,200 --> 00:22:27,440
enforcement across all of our production

589
00:22:25,520 --> 00:22:28,670
clusters after went running in monitor

590
00:22:27,440 --> 00:22:30,860
mode and proactively putting in those

591
00:22:28,670 --> 00:22:32,630
exemptions with effectively zero impact

592
00:22:30,860 --> 00:22:35,469
of engineering productivity which was

593
00:22:32,630 --> 00:22:35,470
which was pretty awesome

594
00:22:36,370 --> 00:22:41,510
excellent cool so to recap we provided a

595
00:22:39,860 --> 00:22:42,560
brief overview of kubernetes we

596
00:22:41,510 --> 00:22:44,960
demonstrated some of the common problems

597
00:22:42,560 --> 00:22:46,460
with decoster as as they are and then we

598
00:22:44,960 --> 00:22:47,870
also some of these security implications

599
00:22:46,460 --> 00:22:48,410
that this has when we proposed the

600
00:22:47,870 --> 00:22:50,810
solution

601
00:22:48,410 --> 00:22:52,490
Kol that fixes some of these issues it

602
00:22:50,810 --> 00:22:54,800
is open source of course we would love

603
00:22:52,490 --> 00:22:57,050
if you had followed down how to play

604
00:22:54,800 --> 00:22:59,720
around send an issue or even better send

605
00:22:57,050 --> 00:23:00,950
sense and PRS and we've got a maybe time

606
00:22:59,720 --> 00:23:02,870
for one quick question

607
00:23:00,950 --> 00:23:06,760
if someone wants to throw it on slide Oh

608
00:23:02,870 --> 00:23:10,030
or yell add a dad joke in the audience

609
00:23:06,760 --> 00:23:11,390
alternatively questions on Twitter later

610
00:23:10,030 --> 00:23:25,190
yeah question

611
00:23:11,390 --> 00:23:40,520
yep I can repeat the question as well as

612
00:23:25,190 --> 00:23:41,990
that's exactly yeah for sure yeah so the

613
00:23:40,520 --> 00:23:45,470
question was the policies are written in

614
00:23:41,990 --> 00:23:47,690
go Oh PA has an alternative what it is

615
00:23:45,470 --> 00:23:51,050
off the top of my head Rhaego well greg

616
00:23:47,690 --> 00:23:53,060
oh yeah record city SLO OPA uses and

617
00:23:51,050 --> 00:23:55,760
that might be easier for some people

618
00:23:53,060 --> 00:23:57,530
that aren't used to programming but it

619
00:23:55,760 --> 00:24:00,260
does have a lot of restrictions like you

620
00:23:57,530 --> 00:24:02,750
can't order Domino's Pizza or you can't

621
00:24:00,260 --> 00:24:07,520
query the kubernetes api for existing

622
00:24:02,750 --> 00:24:08,509
ingresses so the go provides more

623
00:24:07,520 --> 00:24:10,969
flexibility and

624
00:24:08,509 --> 00:24:12,619
and for somebody that's used to ride and

625
00:24:10,969 --> 00:24:15,259
go it might be easier as well because

626
00:24:12,619 --> 00:24:16,609
you can use to go tool chain and if you

627
00:24:15,259 --> 00:24:18,679
are familiar all you have to do is

628
00:24:16,609 --> 00:24:21,499
implement that interface that we that we

629
00:24:18,679 --> 00:24:23,209
showed earlier but it's not for everyone

630
00:24:21,499 --> 00:24:25,489
there's definitely alternative tooling

631
00:24:23,209 --> 00:24:26,389
out there to consider yeah and even if

632
00:24:25,489 --> 00:24:27,859
you just want to toll with that

633
00:24:26,389 --> 00:24:29,149
necessarily adding your own policies

634
00:24:27,859 --> 00:24:30,408
there's a bunch of powerful posters it

635
00:24:29,149 --> 00:24:32,059
come by default so you don't have to

636
00:24:30,409 --> 00:24:33,109
write go you can just deploy it for

637
00:24:32,059 --> 00:24:34,969
those that do want to deploy there's a

638
00:24:33,109 --> 00:24:37,070
one liner and the readme where you can

639
00:24:34,969 --> 00:24:38,359
just try it out on a demo cluster yep

640
00:24:37,070 --> 00:24:40,339
you can always make a feature request

641
00:24:38,359 --> 00:24:42,529
for a policy that you want to that's a

642
00:24:40,339 --> 00:24:43,819
way we're pretty quick wonderful I think

643
00:24:42,529 --> 00:24:45,379
we're a time but thank you all so much

644
00:24:43,819 --> 00:24:46,729
for listening if there's other questions

645
00:24:45,379 --> 00:24:50,529
have an answer in the hallway or on

646
00:24:46,729 --> 00:24:50,529
Twitter later thanks so much thank you

647
00:24:50,910 --> 00:24:55,359
[Applause]

