1
00:00:00,000 --> 00:00:03,540
so welcome everybody and let's get

2
00:00:02,939 --> 00:00:06,060
started

3
00:00:03,540 --> 00:00:08,400
my name is norm Laura Baum I'm a senior

4
00:00:06,060 --> 00:00:10,530
engineering manager at Adobe few years

5
00:00:08,400 --> 00:00:12,480
ago I started the current document cloud

6
00:00:10,530 --> 00:00:14,428
core security team that I've been

7
00:00:12,480 --> 00:00:18,449
managing since then and we're in charge

8
00:00:14,429 --> 00:00:21,480
of security lifecycle in 60 engineering

9
00:00:18,449 --> 00:00:23,970
scrum teams and I'm Keith mash enter

10
00:00:21,480 --> 00:00:26,970
senior computer scientist at document

11
00:00:23,970 --> 00:00:29,519
cloud I've worked on a variety of both

12
00:00:26,970 --> 00:00:32,189
front end and back end technologies with

13
00:00:29,519 --> 00:00:33,600
systems architecture and programming and

14
00:00:32,189 --> 00:00:36,210
some contributions to open source

15
00:00:33,600 --> 00:00:40,200
projects like patchy web server Tomcat

16
00:00:36,210 --> 00:00:42,450
and face book just for example and in

17
00:00:40,200 --> 00:00:45,570
this talk we can show how we build

18
00:00:42,450 --> 00:00:48,809
layers of security design patterns into

19
00:00:45,570 --> 00:00:50,550
the architecture of Acrobat web the

20
00:00:48,809 --> 00:00:53,070
current web application of document

21
00:00:50,550 --> 00:00:55,019
cloud everyone wants to improve their

22
00:00:53,070 --> 00:00:57,809
security at the same time we all need to

23
00:00:55,020 --> 00:00:59,789
put a lot of resources into our business

24
00:00:57,809 --> 00:01:02,399
requirements so we need to do security

25
00:00:59,789 --> 00:01:04,500
in the most cost-effective way and this

26
00:01:02,399 --> 00:01:07,350
is exactly what this talk is gonna be

27
00:01:04,500 --> 00:01:09,630
about and at the end there will be some

28
00:01:07,350 --> 00:01:11,429
tools and methodologies that you'll be

29
00:01:09,630 --> 00:01:16,408
able to take and leverage in your own

30
00:01:11,430 --> 00:01:19,350
organizations so we're gonna talk a lot

31
00:01:16,409 --> 00:01:19,799
about layers and therefore included some

32
00:01:19,350 --> 00:01:25,199
onions

33
00:01:19,799 --> 00:01:28,770
it was Keith's idea we gonna talk about

34
00:01:25,200 --> 00:01:31,110
the new architecture of this web

35
00:01:28,770 --> 00:01:33,630
application that case would cover and of

36
00:01:31,110 --> 00:01:36,210
course we gonna talk also about security

37
00:01:33,630 --> 00:01:38,699
related processes because as we all know

38
00:01:36,210 --> 00:01:43,919
security it's not just an end product

39
00:01:38,700 --> 00:01:46,619
it's a whole process as well this is a

40
00:01:43,920 --> 00:01:49,920
screenshot of the web application home

41
00:01:46,619 --> 00:01:52,619
page where users can upload documents to

42
00:01:49,920 --> 00:01:54,750
the cloud and preview them they can

43
00:01:52,619 --> 00:01:58,200
perform certain operations on those

44
00:01:54,750 --> 00:02:01,700
documents such as create and export PDF

45
00:01:58,200 --> 00:02:05,340
files to convert between file formats or

46
00:02:01,700 --> 00:02:08,209
combine in organized PDF and files and

47
00:02:05,340 --> 00:02:10,910
pages we also put a lot of emphasis on

48
00:02:08,209 --> 00:02:14,750
collaborations users can

49
00:02:10,910 --> 00:02:16,850
documents they can review documents and

50
00:02:14,750 --> 00:02:21,740
share comments and they can sign

51
00:02:16,850 --> 00:02:23,750
agreements in document workflows we

52
00:02:21,740 --> 00:02:25,250
didn't start from scratch as it is in

53
00:02:23,750 --> 00:02:27,650
many cases there was a legacy

54
00:02:25,250 --> 00:02:29,620
application that existed before and

55
00:02:27,650 --> 00:02:32,120
that's a quick look at the architecture

56
00:02:29,620 --> 00:02:34,700
starting from the back end we have

57
00:02:32,120 --> 00:02:37,640
shared cloud where user data is stored

58
00:02:34,700 --> 00:02:40,220
in files and then there are certain

59
00:02:37,640 --> 00:02:43,549
heavy lifting operations workers that

60
00:02:40,220 --> 00:02:46,490
can be performed on those documents such

61
00:02:43,550 --> 00:02:49,070
as the file conversion operations as I

62
00:02:46,490 --> 00:02:51,530
mentioned before in front of share cloud

63
00:02:49,070 --> 00:02:54,410
we had a Django based Python application

64
00:02:51,530 --> 00:02:56,960
that take requests from the various

65
00:02:54,410 --> 00:03:02,150
clients and since those two shared cloud

66
00:02:56,960 --> 00:03:04,930
and then synchronously take the response

67
00:03:02,150 --> 00:03:09,710
from share cloud and send that back to

68
00:03:04,930 --> 00:03:11,780
the clients one point about this Python

69
00:03:09,710 --> 00:03:14,360
application it was written in Python 2

70
00:03:11,780 --> 00:03:17,480
and the Python 2 end-of-life was one of

71
00:03:14,360 --> 00:03:19,370
the motivations for this project in

72
00:03:17,480 --> 00:03:22,579
front of that Python application we had

73
00:03:19,370 --> 00:03:26,420
an AWS cloud front CDN talking to

74
00:03:22,580 --> 00:03:29,120
various client my mobile desktop and web

75
00:03:26,420 --> 00:03:31,489
clients all using the same API so we'll

76
00:03:29,120 --> 00:03:34,880
focus on the web application another

77
00:03:31,490 --> 00:03:37,220
point to pay attention here is that all

78
00:03:34,880 --> 00:03:38,840
static and dynamic content was flowing

79
00:03:37,220 --> 00:03:40,520
through the same path of this

80
00:03:38,840 --> 00:03:43,790
architecture and keith is going to talk

81
00:03:40,520 --> 00:03:46,040
a lot more about that in his description

82
00:03:43,790 --> 00:03:47,900
of the new york attack sure being a

83
00:03:46,040 --> 00:03:49,940
classic web application it had the

84
00:03:47,900 --> 00:03:53,060
classic vulnerabilities that we wanted

85
00:03:49,940 --> 00:03:56,660
to address in the new architecture and

86
00:03:53,060 --> 00:04:00,020
the redesign before we start talking and

87
00:03:56,660 --> 00:04:01,489
building the layers of the application

88
00:04:00,020 --> 00:04:03,320
architecture itself we need to

89
00:04:01,489 --> 00:04:06,650
understand the framework Adobe applies

90
00:04:03,320 --> 00:04:10,760
to all software development and security

91
00:04:06,650 --> 00:04:14,239
our goal and pretty much everybody else

92
00:04:10,760 --> 00:04:18,890
is the security privacy and availability

93
00:04:14,239 --> 00:04:22,100
of our customer data the strategy Adobe

94
00:04:18,890 --> 00:04:23,849
applies in order to achieve that goal is

95
00:04:22,100 --> 00:04:29,160
the Adobe com

96
00:04:23,850 --> 00:04:32,330
control framework we analyzed a criteria

97
00:04:29,160 --> 00:04:34,920
for a dozen industry most commonly used

98
00:04:32,330 --> 00:04:38,969
security standard and certification for

99
00:04:34,920 --> 00:04:42,650
cloud-based businesses we focused on

100
00:04:38,970 --> 00:04:50,160
industry standard shots such as PCI

101
00:04:42,650 --> 00:04:55,010
FedRAMP and salt and then regulatory

102
00:04:50,160 --> 00:04:57,780
compliances like HIPAA and GDP are we

103
00:04:55,010 --> 00:05:00,510
rationalized over thirteen hundred and

104
00:04:57,780 --> 00:05:03,210
fifty different requirements down to

105
00:05:00,510 --> 00:05:05,760
internal Adobe controls and then we

106
00:05:03,210 --> 00:05:09,000
apply those controls consistently across

107
00:05:05,760 --> 00:05:11,280
all product and service development in a

108
00:05:09,000 --> 00:05:14,220
company we aligned all product

109
00:05:11,280 --> 00:05:17,880
development with those criteria which

110
00:05:14,220 --> 00:05:21,870
allowed us to then use common controls

111
00:05:17,880 --> 00:05:24,480
across multiple products and services it

112
00:05:21,870 --> 00:05:27,120
means we can implement common components

113
00:05:24,480 --> 00:05:29,400
once and then utilize them again and

114
00:05:27,120 --> 00:05:31,230
again in a cost-effective way it also

115
00:05:29,400 --> 00:05:33,299
means that once we implement those

116
00:05:31,230 --> 00:05:40,520
common components we know that they're

117
00:05:33,300 --> 00:05:45,030
implemented right everywhere the

118
00:05:40,520 --> 00:05:49,260
approach we took and the implementation

119
00:05:45,030 --> 00:05:52,010
of it consists of two main part one

120
00:05:49,260 --> 00:05:55,260
starts from the physical air and goes up

121
00:05:52,010 --> 00:05:58,280
those include security processes and

122
00:05:55,260 --> 00:06:02,880
compliance controls for ops teams and

123
00:05:58,280 --> 00:06:06,119
infrastructures teams that involve asset

124
00:06:02,880 --> 00:06:08,219
and configuration management Network

125
00:06:06,120 --> 00:06:10,740
Operations Incident Response and things

126
00:06:08,220 --> 00:06:13,230
like that the other part starts from the

127
00:06:10,740 --> 00:06:18,330
application layer and goes down those

128
00:06:13,230 --> 00:06:21,210
include tools processes and activities

129
00:06:18,330 --> 00:06:24,450
related to secure product lifecycle such

130
00:06:21,210 --> 00:06:27,960
as static and dynamic catalana analysis

131
00:06:24,450 --> 00:06:29,490
pen testing and things like that the

132
00:06:27,960 --> 00:06:34,400
whole process is

133
00:06:29,490 --> 00:06:39,389
continues in multiple ways there are

134
00:06:34,400 --> 00:06:46,039
some processes that we are applying on a

135
00:06:39,389 --> 00:06:55,349
regular basis such as control reviews of

136
00:06:46,039 --> 00:07:00,719
certain operations like sorry blanked on

137
00:06:55,349 --> 00:07:04,250
this periodic compliance reviews of

138
00:07:00,720 --> 00:07:07,199
automated auditing and compliance

139
00:07:04,250 --> 00:07:09,599
controls such as access to production

140
00:07:07,199 --> 00:07:13,710
system vulnerabilities and firewall

141
00:07:09,599 --> 00:07:16,740
rules and then in addition to that we

142
00:07:13,710 --> 00:07:19,289
also review our internal controls on a

143
00:07:16,740 --> 00:07:23,220
regular basis and finally whenever the

144
00:07:19,289 --> 00:07:26,068
external standards also change or we end

145
00:07:23,220 --> 00:07:27,740
support for new ones we of course need

146
00:07:26,069 --> 00:07:32,819
to update the common control framework

147
00:07:27,740 --> 00:07:35,639
as well Adobe made this common control

148
00:07:32,819 --> 00:07:38,789
framework and open source and version

149
00:07:35,639 --> 00:07:41,669
2.0 became available at the end of last

150
00:07:38,789 --> 00:07:42,900
year you can download it from this URL

151
00:07:41,669 --> 00:07:45,448
at the bottom of the screen

152
00:07:42,900 --> 00:07:48,620
let's take now a look at a couple of

153
00:07:45,449 --> 00:07:52,729
examples for such common components that

154
00:07:48,620 --> 00:07:55,380
are used across the company and also in

155
00:07:52,729 --> 00:07:57,990
Acrobat web and Keith will talk later

156
00:07:55,380 --> 00:08:00,659
about how we integrate those so one

157
00:07:57,990 --> 00:08:03,300
place which is a good start to start

158
00:08:00,659 --> 00:08:06,479
peeling the architecture of security

159
00:08:03,300 --> 00:08:09,150
systems is the identity system and the

160
00:08:06,479 --> 00:08:12,020
Adobe identity management system ims is

161
00:08:09,150 --> 00:08:17,840
an authentication and authorization

162
00:08:12,020 --> 00:08:21,719
service that is controlling access to

163
00:08:17,840 --> 00:08:26,520
Adobe resources it's the Adobe

164
00:08:21,719 --> 00:08:30,449
implementation of OS 2.0 it includes UI

165
00:08:26,520 --> 00:08:33,689
component for user signup and sign-in as

166
00:08:30,449 --> 00:08:37,500
well as admin tools for enterprise

167
00:08:33,690 --> 00:08:39,120
customers to manage licenses within

168
00:08:37,500 --> 00:08:41,750
their own organizations

169
00:08:39,120 --> 00:08:43,440
it also supports multiple account types

170
00:08:41,750 --> 00:08:46,590
such as the

171
00:08:43,440 --> 00:08:49,070
we IDs for individual and enterprise

172
00:08:46,590 --> 00:08:52,380
customers and it also supports

173
00:08:49,070 --> 00:08:55,410
authentication between services pretty

174
00:08:52,380 --> 00:08:59,700
much every Adobe services integrated

175
00:08:55,410 --> 00:09:04,260
with the IMS in order to allow their

176
00:08:59,700 --> 00:09:06,540
users to log in and access protected

177
00:09:04,260 --> 00:09:09,569
services the common control framework

178
00:09:06,540 --> 00:09:12,900
also determines of the identity data is

179
00:09:09,570 --> 00:09:18,510
stored internal internally as it is for

180
00:09:12,900 --> 00:09:21,030
such sensitive information one of the

181
00:09:18,510 --> 00:09:23,160
earliest examples for common

182
00:09:21,030 --> 00:09:25,709
infrastructure used across multiple

183
00:09:23,160 --> 00:09:28,230
services is shared cloud which I

184
00:09:25,710 --> 00:09:30,720
mentioned in the beginning it's a

185
00:09:28,230 --> 00:09:32,730
platform that's used by many services in

186
00:09:30,720 --> 00:09:36,840
both Creative Cloud and document cloud

187
00:09:32,730 --> 00:09:40,320
in supporting user data stored in files

188
00:09:36,840 --> 00:09:45,510
with multiple levels of redundancies

189
00:09:40,320 --> 00:09:48,180
based on AWS s3 buckets with file

190
00:09:45,510 --> 00:09:52,319
versioning encryption and virus scan and

191
00:09:48,180 --> 00:09:54,630
also multiple variations of jobs that

192
00:09:52,320 --> 00:09:57,810
can be performed in a scalable manner

193
00:09:54,630 --> 00:09:59,820
excuse me I'll synchronously on those

194
00:09:57,810 --> 00:10:01,819
documents like the file conversion

195
00:09:59,820 --> 00:10:05,910
format that I mentioned before

196
00:10:01,820 --> 00:10:10,320
it supports multi-level key value data

197
00:10:05,910 --> 00:10:13,079
storage based on MongoDB HTTP API and

198
00:10:10,320 --> 00:10:18,030
event modifications for internal

199
00:10:13,080 --> 00:10:22,320
services such as data search and data

200
00:10:18,030 --> 00:10:25,800
synchronization security is based on

201
00:10:22,320 --> 00:10:27,990
user context isolation such that one

202
00:10:25,800 --> 00:10:30,870
user cannot access another user data and

203
00:10:27,990 --> 00:10:34,320
the whole platform is PCI compliance so

204
00:10:30,870 --> 00:10:37,730
that all the services built upon it are

205
00:10:34,320 --> 00:10:42,570
compliant as well if necessary

206
00:10:37,730 --> 00:10:46,310
one of the most recent additions to a

207
00:10:42,570 --> 00:10:50,490
common platform is ethos this is a

208
00:10:46,310 --> 00:10:52,380
container based in platform developed by

209
00:10:50,490 --> 00:10:55,010
a centralized team that create those

210
00:10:52,380 --> 00:10:56,170
base container with secure by default

211
00:10:55,010 --> 00:10:59,950
configuration

212
00:10:56,170 --> 00:11:02,800
they also upload common libraries and

213
00:10:59,950 --> 00:11:06,399
testers and keep those up to date in a

214
00:11:02,800 --> 00:11:09,310
centralized way and it is supporting CIC

215
00:11:06,399 --> 00:11:11,290
D pipeline based on Jenkins which goes

216
00:11:09,310 --> 00:11:14,888
all the way from it have pull requests

217
00:11:11,290 --> 00:11:17,860
with hooks for automatic processes such

218
00:11:14,889 --> 00:11:20,320
as static code analysis or manual code

219
00:11:17,860 --> 00:11:22,720
reviews and deployment approvals it goes

220
00:11:20,320 --> 00:11:25,720
all the way down to support multi cloud

221
00:11:22,720 --> 00:11:28,570
clusters such as dev stage and

222
00:11:25,720 --> 00:11:30,459
production and it's based on docker

223
00:11:28,570 --> 00:11:33,790
currently we had also support for

224
00:11:30,459 --> 00:11:36,040
kubernetes keith would now show how we

225
00:11:33,790 --> 00:11:39,639
leverage those different components and

226
00:11:36,040 --> 00:11:45,459
the architecture of the new web

227
00:11:39,639 --> 00:11:48,100
application thank you know so in the

228
00:11:45,459 --> 00:11:51,149
past we had as gnome described an

229
00:11:48,100 --> 00:11:53,620
architecture that was based more on

230
00:11:51,149 --> 00:11:55,570
classic front and back-end technologies

231
00:11:53,620 --> 00:11:57,970
mixed together which was typical for

232
00:11:55,570 --> 00:12:01,779
prior decades of web development but for

233
00:11:57,970 --> 00:12:03,660
a burette acrobat web the new project we

234
00:12:01,779 --> 00:12:05,829
sought to separate those a little more

235
00:12:03,660 --> 00:12:08,079
concerned so we could address them and

236
00:12:05,829 --> 00:12:10,719
focus them individually so the

237
00:12:08,079 --> 00:12:13,989
client-side became standardized on react

238
00:12:10,720 --> 00:12:18,540
based components and also with a bit of

239
00:12:13,990 --> 00:12:21,610
nginx mixed in to support dynamic or

240
00:12:18,540 --> 00:12:24,480
deep links I should say to content that

241
00:12:21,610 --> 00:12:29,459
doesn't actually exist as static files

242
00:12:24,480 --> 00:12:32,560
meanwhile the more dynamic services were

243
00:12:29,459 --> 00:12:35,219
done with spring based Java frameworks

244
00:12:32,560 --> 00:12:43,449
they were actually based on structures

245
00:12:35,220 --> 00:12:45,970
inherited and used across Adobe so

246
00:12:43,449 --> 00:12:48,130
another aspect of this was we moved to

247
00:12:45,970 --> 00:12:49,959
leverage more build and deployment

248
00:12:48,130 --> 00:12:52,389
standards at Adobe which is called

249
00:12:49,959 --> 00:12:55,119
project ethos so it's a suite of

250
00:12:52,389 --> 00:12:57,220
different system components for that

251
00:12:55,120 --> 00:12:59,980
build and deploy process that we can now

252
00:12:57,220 --> 00:13:02,829
reuse across the company rather than

253
00:12:59,980 --> 00:13:05,400
some of the prior specific service and

254
00:13:02,829 --> 00:13:07,890
deployment situations we had in

255
00:13:05,400 --> 00:13:10,170
and cloud itself so this divide and

256
00:13:07,890 --> 00:13:13,319
conquer scenario helps us focus our

257
00:13:10,170 --> 00:13:16,079
energy on solving client problems versus

258
00:13:13,320 --> 00:13:17,310
service problems and offloads a lot of

259
00:13:16,080 --> 00:13:19,770
the general build and deployment

260
00:13:17,310 --> 00:13:21,989
security problems to project ethos to

261
00:13:19,770 --> 00:13:24,090
other teams so that the application

262
00:13:21,990 --> 00:13:27,630
developers can focus more on the

263
00:13:24,090 --> 00:13:29,850
applications themselves so now that

264
00:13:27,630 --> 00:13:31,950
we've got this highlight let's peel the

265
00:13:29,850 --> 00:13:36,530
onion a little more into the different

266
00:13:31,950 --> 00:13:39,180
layers so starting from the front end

267
00:13:36,530 --> 00:13:42,360
the this top height layer is basically

268
00:13:39,180 --> 00:13:44,910
public static content there's no PHP

269
00:13:42,360 --> 00:13:47,340
there's no custom coding of that level

270
00:13:44,910 --> 00:13:51,540
it's really configuration instead of

271
00:13:47,340 --> 00:13:53,460
coding so the content delivery network

272
00:13:51,540 --> 00:13:58,319
of course offloads a lot of the content

273
00:13:53,460 --> 00:14:00,690
it enforces HTTP and it uses some shared

274
00:13:58,320 --> 00:14:03,150
tokens to ensure that traffic is

275
00:14:00,690 --> 00:14:04,830
progressing through the CDN rather than

276
00:14:03,150 --> 00:14:07,709
someone trying to come directly at the

277
00:14:04,830 --> 00:14:11,820
nginx service or the s3 web enabled

278
00:14:07,710 --> 00:14:15,360
buckets so now as we drill further let's

279
00:14:11,820 --> 00:14:17,700
start from the client and go through the

280
00:14:15,360 --> 00:14:21,330
CDN where which has the initial page

281
00:14:17,700 --> 00:14:24,180
rendering and so that's just static HTML

282
00:14:21,330 --> 00:14:28,320
that's that's optimized to deliver to

283
00:14:24,180 --> 00:14:33,839
the client then engine X has a content

284
00:14:28,320 --> 00:14:36,330
security policy and the s3 buckets are

285
00:14:33,840 --> 00:14:38,760
the final stage here where most of the

286
00:14:36,330 --> 00:14:41,820
content is is delivered so there's only

287
00:14:38,760 --> 00:14:44,670
a small fraction of the initial web page

288
00:14:41,820 --> 00:14:46,950
loads of HTML that are from engine X

289
00:14:44,670 --> 00:14:49,560
because it needs to give some support

290
00:14:46,950 --> 00:14:51,720
for that and for deep links as I said

291
00:14:49,560 --> 00:14:54,300
and then the majority of contributing

292
00:14:51,720 --> 00:14:56,700
content or other assets are loaded more

293
00:14:54,300 --> 00:14:59,729
directly from s3 still the cebu the CDN

294
00:14:56,700 --> 00:15:02,160
and note the entire top half here is

295
00:14:59,730 --> 00:15:04,050
again driven by configuration not

296
00:15:02,160 --> 00:15:09,000
customer code so that really shrinks the

297
00:15:04,050 --> 00:15:12,150
attack service and of course as the

298
00:15:09,000 --> 00:15:14,710
client loads all this static content

299
00:15:12,150 --> 00:15:17,110
that needs to call back and actually

300
00:15:14,710 --> 00:15:20,820
check for user identity and get

301
00:15:17,110 --> 00:15:24,070
associated content from actual storage

302
00:15:20,820 --> 00:15:26,260
so this goes through an API gateway and

303
00:15:24,070 --> 00:15:28,900
again this is a project that's offloaded

304
00:15:26,260 --> 00:15:32,530
from our independent application teams

305
00:15:28,900 --> 00:15:34,510
to common Adobe teams for the protect

306
00:15:32,530 --> 00:15:37,000
connection mechanisms there so that

307
00:15:34,510 --> 00:15:38,830
helps protect an autoscale the

308
00:15:37,000 --> 00:15:41,050
underlying services we actually have

309
00:15:38,830 --> 00:15:45,580
which in turn then connect back to the

310
00:15:41,050 --> 00:15:47,890
shared cloud that no mentioned before so

311
00:15:45,580 --> 00:15:50,350
again this thus embodies various common

312
00:15:47,890 --> 00:15:52,630
security principles and some of which

313
00:15:50,350 --> 00:15:54,700
those in the yellow at the bottom we'll

314
00:15:52,630 --> 00:15:58,780
delve into a little more in these coming

315
00:15:54,700 --> 00:16:01,090
slides so now we will split more the top

316
00:15:58,780 --> 00:16:08,650
and how to top and bottom halves of this

317
00:16:01,090 --> 00:16:11,110
- to investigate ok some slides got out

318
00:16:08,650 --> 00:16:14,620
of order somehow so we talked before

319
00:16:11,110 --> 00:16:17,550
about the CDN now we'll talk a little

320
00:16:14,620 --> 00:16:20,410
bit about the path to nginx which has

321
00:16:17,550 --> 00:16:22,270
elastic load balancers in place to

322
00:16:20,410 --> 00:16:24,610
protect an auto scale the underlying

323
00:16:22,270 --> 00:16:26,890
services in this case it's really engine

324
00:16:24,610 --> 00:16:29,350
acts as a service again just with the

325
00:16:26,890 --> 00:16:33,340
configuration not really much custom

326
00:16:29,350 --> 00:16:37,060
logic then engine X itself takes on

327
00:16:33,340 --> 00:16:38,500
money many rules related to security it

328
00:16:37,060 --> 00:16:41,349
participates in the content protection

329
00:16:38,500 --> 00:16:43,990
by making sure we separate development

330
00:16:41,350 --> 00:16:46,510
stage and prod areas so that no one in

331
00:16:43,990 --> 00:16:48,210
production can see what's happening in

332
00:16:46,510 --> 00:16:51,939
the Dever stage areas that are internal

333
00:16:48,210 --> 00:16:54,130
it supports virtual paths as I said that

334
00:16:51,940 --> 00:16:57,940
don't exist and this is so we can say

335
00:16:54,130 --> 00:16:59,890
things like go to a review and then we

336
00:16:57,940 --> 00:17:02,430
can even have parameters that indicate

337
00:16:59,890 --> 00:17:04,660
of course what document you're reviewing

338
00:17:02,430 --> 00:17:06,669
and there's protections there as well

339
00:17:04,660 --> 00:17:09,340
against certain URI patterns that are

340
00:17:06,670 --> 00:17:12,700
expected rather than someone trying to

341
00:17:09,339 --> 00:17:17,619
hack a URI that that we shouldn't

342
00:17:12,700 --> 00:17:19,569
support so further to that nginx also

343
00:17:17,619 --> 00:17:22,119
controls the content security policy for

344
00:17:19,569 --> 00:17:25,790
this site both the home page default and

345
00:17:22,119 --> 00:17:29,570
all the deep links to more specific

346
00:17:25,790 --> 00:17:31,450
and services so these are as a specific

347
00:17:29,570 --> 00:17:33,679
as possible to make sure we're

348
00:17:31,450 --> 00:17:35,900
waitlisting appropriately and limiting

349
00:17:33,680 --> 00:17:39,200
both the kinds of actions we let the

350
00:17:35,900 --> 00:17:44,960
browser take and the different sites it

351
00:17:39,200 --> 00:17:46,580
takes those actions upon we actually had

352
00:17:44,960 --> 00:17:47,990
to spend a lot of time with other groups

353
00:17:46,580 --> 00:17:50,240
at Adobe with the content security

354
00:17:47,990 --> 00:17:51,830
policy because we were a bit of head of

355
00:17:50,240 --> 00:17:53,930
the game and we had to work with them to

356
00:17:51,830 --> 00:17:56,480
make them understand that we were using

357
00:17:53,930 --> 00:17:58,880
this and that if they changed their

358
00:17:56,480 --> 00:18:01,550
their infrastructure the hosts that they

359
00:17:58,880 --> 00:18:03,650
were involved in or they were using and

360
00:18:01,550 --> 00:18:08,960
were the the protocols they were using

361
00:18:03,650 --> 00:18:11,480
that could impact us and then there's a

362
00:18:08,960 --> 00:18:17,690
range of typical HTTP security headers

363
00:18:11,480 --> 00:18:20,540
that nginx also drives and finally we

364
00:18:17,690 --> 00:18:22,760
load the rest of the content from the s3

365
00:18:20,540 --> 00:18:27,530
buckets it is it to drive the single

366
00:18:22,760 --> 00:18:29,690
page web app so once the static content

367
00:18:27,530 --> 00:18:31,760
is loaded we load that into react and

368
00:18:29,690 --> 00:18:33,860
react itself provides certain mechanisms

369
00:18:31,760 --> 00:18:37,340
to protect the application by default

370
00:18:33,860 --> 00:18:40,250
where HTML Java scripts and so on is

371
00:18:37,340 --> 00:18:43,179
escaped appropriately and you have to

372
00:18:40,250 --> 00:18:48,040
use special rules to do something

373
00:18:43,180 --> 00:18:50,870
outside the norm now going through the

374
00:18:48,040 --> 00:18:53,030
service side of the application when to

375
00:18:50,870 --> 00:18:56,419
load dynamic content we have the Adobe

376
00:18:53,030 --> 00:19:00,830
IO gateway which helps decrypt and

377
00:18:56,420 --> 00:19:03,890
manage the IMS ojas token essentially it

378
00:19:00,830 --> 00:19:05,360
also provides some rate limiting at this

379
00:19:03,890 --> 00:19:07,610
level and a coarse-grained way to

380
00:19:05,360 --> 00:19:09,979
protect the back-end services again

381
00:19:07,610 --> 00:19:12,169
offloading those aspects from individual

382
00:19:09,980 --> 00:19:14,990
service developers going back to the

383
00:19:12,170 --> 00:19:17,750
service the Gateway provides a signed

384
00:19:14,990 --> 00:19:21,110
token so that service because underlying

385
00:19:17,750 --> 00:19:23,060
services can validate that the path the

386
00:19:21,110 --> 00:19:27,679
traffic came through the expected path

387
00:19:23,060 --> 00:19:29,530
to them and going back to the the whole

388
00:19:27,680 --> 00:19:32,030
onion again putting both sides together

389
00:19:29,530 --> 00:19:34,760
you may wonder how we keep it fresh how

390
00:19:32,030 --> 00:19:36,470
do we make sure that changes to

391
00:19:34,760 --> 00:19:38,480
application infrastructure and the

392
00:19:36,470 --> 00:19:39,690
application changes themselves don't

393
00:19:38,480 --> 00:19:42,029
degrade the security over

394
00:19:39,690 --> 00:19:44,399
time well part of what we do for that

395
00:19:42,029 --> 00:19:48,629
involves an internal project adobe relay

396
00:19:44,399 --> 00:19:50,969
which is an API and UI testing framework

397
00:19:48,629 --> 00:19:53,969
there are many other open-source tools

398
00:19:50,970 --> 00:19:56,399
that you could use for this as well but

399
00:19:53,970 --> 00:19:58,850
it's essentially you know a live ongoing

400
00:19:56,399 --> 00:20:01,258
monitoring synthetic moderating tool

401
00:19:58,850 --> 00:20:03,600
that continues to monitor our site for

402
00:20:01,259 --> 00:20:05,360
the expects that have expected positive

403
00:20:03,600 --> 00:20:08,789
and negative outcomes

404
00:20:05,360 --> 00:20:11,070
so after this internal compliance

405
00:20:08,789 --> 00:20:12,929
monitoring aspects I'll defer back to

406
00:20:11,070 --> 00:20:17,399
Nome for some external compliance

407
00:20:12,929 --> 00:20:19,919
considerations Thank You Keith so we had

408
00:20:17,399 --> 00:20:22,018
multiple compliances supported by the

409
00:20:19,919 --> 00:20:24,169
legacy application that I mentioned in

410
00:20:22,019 --> 00:20:26,190
the beginning during this process

411
00:20:24,169 --> 00:20:28,139
project we needed to add support for

412
00:20:26,190 --> 00:20:31,649
gdpr and again following the common

413
00:20:28,139 --> 00:20:34,139
control framework we used global Adobe

414
00:20:31,649 --> 00:20:36,029
libraries to do that in addition to

415
00:20:34,139 --> 00:20:38,309
integrate them with our software

416
00:20:36,029 --> 00:20:40,230
application we needed to change the our

417
00:20:38,309 --> 00:20:44,549
content security policy so that they

418
00:20:40,230 --> 00:20:46,409
could upload and run another part which

419
00:20:44,549 --> 00:20:48,179
is important of every software

420
00:20:46,409 --> 00:20:49,860
development lifecycle is tracking

421
00:20:48,179 --> 00:20:52,710
vulnerabilities in third-party library

422
00:20:49,860 --> 00:20:54,678
at document cloud it's mandatory for all

423
00:20:52,710 --> 00:20:57,029
components to integrate with that

424
00:20:54,679 --> 00:21:00,629
tracking system so that we can

425
00:20:57,029 --> 00:21:03,809
automatically detect vulnerabilities in

426
00:21:00,629 --> 00:21:05,939
every build and block it from develop

427
00:21:03,809 --> 00:21:09,120
deployment for production if necessary

428
00:21:05,940 --> 00:21:11,549
based on it and testing is another

429
00:21:09,120 --> 00:21:13,549
important part of secure product

430
00:21:11,549 --> 00:21:16,889
lifecycle we do both internal external

431
00:21:13,549 --> 00:21:19,529
whether it's a part of the release cycle

432
00:21:16,889 --> 00:21:24,000
or is determined by compliance like PCI

433
00:21:19,529 --> 00:21:26,879
and in this case Bishop Fox was external

434
00:21:24,000 --> 00:21:29,789
testing firm and couldn't find any

435
00:21:26,879 --> 00:21:32,699
serious issues with this application to

436
00:21:29,789 --> 00:21:34,649
quote from their final release about the

437
00:21:32,700 --> 00:21:36,960
application it confirms to security best

438
00:21:34,649 --> 00:21:38,549
practices of modern web application

439
00:21:36,960 --> 00:21:40,909
there was a gate confirmation for us

440
00:21:38,549 --> 00:21:44,870
that the methodology we used was

441
00:21:40,909 --> 00:21:48,059
actually successful to summarize we

442
00:21:44,870 --> 00:21:49,159
applied many security design principles

443
00:21:48,059 --> 00:21:52,760
to the

444
00:21:49,160 --> 00:21:56,750
architecture implementation and design

445
00:21:52,760 --> 00:21:59,960
of acrobat web we followed security best

446
00:21:56,750 --> 00:22:02,180
practices in processes related to secure

447
00:21:59,960 --> 00:22:04,730
product lifecycle and compliance control

448
00:22:02,180 --> 00:22:08,720
that are part of Adobe's common control

449
00:22:04,730 --> 00:22:10,190
framework and to summarize we achieve

450
00:22:08,720 --> 00:22:12,350
the goal that we wanted in a

451
00:22:10,190 --> 00:22:15,230
cost-effective way to improve the

452
00:22:12,350 --> 00:22:17,540
security and when sliced and layered

453
00:22:15,230 --> 00:22:20,510
carefully an onion is nothing to cry

454
00:22:17,540 --> 00:22:23,120
about and can definitely be super very

455
00:22:20,510 --> 00:22:25,010
useful thank you everybody

456
00:22:23,120 --> 00:22:26,810
um if you have any questions please

457
00:22:25,010 --> 00:22:28,879
don't hesitate to send them to us or

458
00:22:26,810 --> 00:22:32,120
find us during the rest of this

459
00:22:28,880 --> 00:22:34,040
conference and by the way we're hiring

460
00:22:32,120 --> 00:22:35,939
so by all means if you're interested

461
00:22:34,040 --> 00:22:43,409
come talk to me

462
00:22:35,940 --> 00:22:43,410
[Applause]

