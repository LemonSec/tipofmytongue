1
00:00:00,000 --> 00:00:06,839
so these are lightning talks so 10

2
00:00:02,370 --> 00:00:10,290
minute talks gonna be real quick today

3
00:00:06,839 --> 00:00:12,090
we have a speaker Claire Moynihan and

4
00:00:10,290 --> 00:00:15,619
she's gonna be talking about the road to

5
00:00:12,090 --> 00:00:19,140
zero trust so I'll hand it over to you

6
00:00:15,619 --> 00:00:19,948
do I need this one rather son okay thank

7
00:00:19,140 --> 00:00:22,170
you very much Andy

8
00:00:19,949 --> 00:00:23,939
yes sir today we're talking about don't

9
00:00:22,170 --> 00:00:25,949
trust the endpoints the purpose of this

10
00:00:23,939 --> 00:00:28,019
talk is to review a zero trust

11
00:00:25,949 --> 00:00:30,300
implementation schema with the focus on

12
00:00:28,019 --> 00:00:33,449
building trust and users devices not

13
00:00:30,300 --> 00:00:35,160
simply the user themselves okay

14
00:00:33,450 --> 00:00:36,390
so my name is Claire Moynihan I'm an

15
00:00:35,160 --> 00:00:37,980
enterprise security engineer at

16
00:00:36,390 --> 00:00:39,570
Salesforce I've been working on this

17
00:00:37,980 --> 00:00:42,569
project for approximately two years now

18
00:00:39,570 --> 00:00:44,340
I started it in 2018 as an interim of

19
00:00:42,570 --> 00:00:46,440
Salesforce at that time I was looking at

20
00:00:44,340 --> 00:00:50,399
how to implement Google's beyond core

21
00:00:46,440 --> 00:00:53,309
model for a broader enterprise use 2019

22
00:00:50,399 --> 00:00:55,890
I returned to school graduated 2020 I

23
00:00:53,309 --> 00:00:57,510
came back and joined what my project had

24
00:00:55,890 --> 00:00:59,460
become as a member of the device

25
00:00:57,510 --> 00:01:01,649
compliance working group the purpose of

26
00:00:59,460 --> 00:01:03,960
that group was to establish a zero trust

27
00:01:01,649 --> 00:01:06,060
model for the enterprise and the purpose

28
00:01:03,960 --> 00:01:09,000
of this talk is to discuss our research

29
00:01:06,060 --> 00:01:10,710
up to this point so first we're going to

30
00:01:09,000 --> 00:01:13,560
review a really really high level just

31
00:01:10,710 --> 00:01:15,389
what is your trust network is and how

32
00:01:13,560 --> 00:01:17,850
our project aims to go one step further

33
00:01:15,390 --> 00:01:19,710
so a traditional zero trust network

34
00:01:17,850 --> 00:01:21,869
model recognizes that trust is a

35
00:01:19,710 --> 00:01:24,270
vulnerability and it recognizes that if

36
00:01:21,869 --> 00:01:27,420
educated users can also act as malicious

37
00:01:24,270 --> 00:01:29,158
attackers you all probably know that our

38
00:01:27,420 --> 00:01:31,380
implementation of zero trust aims to go

39
00:01:29,159 --> 00:01:33,990
one step further we want to recognize

40
00:01:31,380 --> 00:01:36,570
that a user's device can also act as an

41
00:01:33,990 --> 00:01:39,298
agent of compromise and we aim to verify

42
00:01:36,570 --> 00:01:41,880
the user's device using the devices

43
00:01:39,299 --> 00:01:45,030
configuration statuses so essentially we

44
00:01:41,880 --> 00:01:47,250
want to verify a device's configuration

45
00:01:45,030 --> 00:01:49,020
or compliance status prior to the device

46
00:01:47,250 --> 00:01:53,579
receiving full or appropriate network

47
00:01:49,020 --> 00:01:56,070
access so for this phase of the project

48
00:01:53,579 --> 00:01:59,130
for its concentrating solely on endpoint

49
00:01:56,070 --> 00:02:01,429
devices specifically laptops and

50
00:01:59,130 --> 00:02:03,770
workstations for our purposes right now

51
00:02:01,430 --> 00:02:06,149
servers and mobiles are out of scope for

52
00:02:03,770 --> 00:02:07,979
our user population we've concentrated

53
00:02:06,149 --> 00:02:10,889
on the largest volume of operating

54
00:02:07,979 --> 00:02:13,390
systems that would be Windows 10 Mac OS

55
00:02:10,889 --> 00:02:15,820
and a bun to Linux 18

56
00:02:13,390 --> 00:02:17,739
after finding the focus of our the scope

57
00:02:15,820 --> 00:02:19,540
of our hardware our next step was

58
00:02:17,740 --> 00:02:21,580
defining the baseline security

59
00:02:19,540 --> 00:02:24,489
configurations or what defense

60
00:02:21,580 --> 00:02:28,180
capabilities do we expect the president

61
00:02:24,490 --> 00:02:30,400
on all managed enterprise devices second

62
00:02:28,180 --> 00:02:32,410
we wanted to document a method to pull

63
00:02:30,400 --> 00:02:34,800
those configurations in order to

64
00:02:32,410 --> 00:02:37,390
determine the device's compliance rate

65
00:02:34,800 --> 00:02:39,850
third we wanted to measure how the

66
00:02:37,390 --> 00:02:42,070
current device capabilities compared to

67
00:02:39,850 --> 00:02:43,420
the expected capabilities we recognized

68
00:02:42,070 --> 00:02:45,280
that this would be different across the

69
00:02:43,420 --> 00:02:47,410
three different operating systems based

70
00:02:45,280 --> 00:02:49,590
upon in eight different configurations

71
00:02:47,410 --> 00:02:52,359
we also recognize that certain

72
00:02:49,590 --> 00:02:54,820
compliance mechanisms would be difficult

73
00:02:52,360 --> 00:02:58,570
to measure so they might not be present

74
00:02:54,820 --> 00:03:00,459
in our tooling set and fourth we wanted

75
00:02:58,570 --> 00:03:02,829
to determine the best ways to make this

76
00:03:00,459 --> 00:03:04,989
process actionable or how would we

77
00:03:02,830 --> 00:03:05,410
automate this and scale it across the

78
00:03:04,989 --> 00:03:07,959
enterprise

79
00:03:05,410 --> 00:03:10,420
with the goal of being to measure and

80
00:03:07,959 --> 00:03:12,700
verify baseline configuration compliance

81
00:03:10,420 --> 00:03:15,720
rates for each individual endpoint

82
00:03:12,700 --> 00:03:18,609
device and for the enterprise as a whole

83
00:03:15,720 --> 00:03:20,260
so we started with just determining what

84
00:03:18,610 --> 00:03:22,540
our baseline security configuration

85
00:03:20,260 --> 00:03:24,820
should be and this is a high-level

86
00:03:22,540 --> 00:03:27,150
overview but as you can see these

87
00:03:24,820 --> 00:03:29,350
baseline configuration statuses

88
00:03:27,150 --> 00:03:31,630
essentially are modeled after the CIA

89
00:03:29,350 --> 00:03:33,160
triad we wanted to document the

90
00:03:31,630 --> 00:03:35,829
configuration measures necessary to

91
00:03:33,160 --> 00:03:38,620
ensure operating system and file system

92
00:03:35,830 --> 00:03:40,989
integrity these listed configurations

93
00:03:38,620 --> 00:03:43,420
also reflect our internal security

94
00:03:40,989 --> 00:03:45,370
policies only approve software and

95
00:03:43,420 --> 00:03:47,738
kernels only approved remote access

96
00:03:45,370 --> 00:03:50,230
mechanisms only approve pseudo accounts

97
00:03:47,739 --> 00:03:52,450
etc basically though they're meant to

98
00:03:50,230 --> 00:03:58,209
protect against unauthorized system

99
00:03:52,450 --> 00:04:00,310
access so next we were looking at how to

100
00:03:58,209 --> 00:04:08,799
document normalize and measure these

101
00:04:00,310 --> 00:04:10,239
configurations we wanted to normalize

102
00:04:08,799 --> 00:04:13,299
the outputs from these three different

103
00:04:10,239 --> 00:04:15,070
operating systems across basically one

104
00:04:13,299 --> 00:04:18,548
to normalize them into a boolean true

105
00:04:15,070 --> 00:04:20,738
false value and the goal was the results

106
00:04:18,548 --> 00:04:22,719
of this normalization would provide the

107
00:04:20,738 --> 00:04:25,890
data necessary to calculate the

108
00:04:22,720 --> 00:04:28,720
enterprises compliance rate

109
00:04:25,890 --> 00:04:32,880
so this was our process and this slides

110
00:04:28,720 --> 00:04:32,880
a little bit messy so bear with me

111
00:04:32,940 --> 00:04:37,810
essentially what we were doing were you

112
00:04:35,410 --> 00:04:39,430
to document the compliance rate across

113
00:04:37,810 --> 00:04:42,430
the enterprise to ensure that the

114
00:04:39,430 --> 00:04:44,560
metrics met our SLA s we also were

115
00:04:42,430 --> 00:04:46,960
looking at the best tooling system to

116
00:04:44,560 --> 00:04:48,400
gather normalize this information so

117
00:04:46,960 --> 00:04:51,099
first we started with command line

118
00:04:48,400 --> 00:04:52,989
scripts these scripts enabled us to

119
00:04:51,100 --> 00:04:55,930
determine what sort of settings we would

120
00:04:52,990 --> 00:04:58,630
even be able to call and verify however

121
00:04:55,930 --> 00:05:00,640
this output was messy and it was going

122
00:04:58,630 --> 00:05:04,240
to be difficult to normalize this output

123
00:05:00,640 --> 00:05:06,099
across the windows and UNIX systems next

124
00:05:04,240 --> 00:05:08,230
we looked at what tools were already

125
00:05:06,100 --> 00:05:10,930
currently present or should already be

126
00:05:08,230 --> 00:05:12,640
present on our manage devices she looked

127
00:05:10,930 --> 00:05:15,820
at MDM tools the detection response

128
00:05:12,640 --> 00:05:18,669
tools the MDM tools also were a bit

129
00:05:15,820 --> 00:05:20,560
messy number one the MDM tools at least

130
00:05:18,670 --> 00:05:23,860
for our purposes were unique to each

131
00:05:20,560 --> 00:05:26,050
operating system number two as you can

132
00:05:23,860 --> 00:05:28,180
see from my slide there's a lot of holes

133
00:05:26,050 --> 00:05:30,850
in the configurations that we could even

134
00:05:28,180 --> 00:05:32,020
verify so if we went with an MDM tool

135
00:05:30,850 --> 00:05:35,500
you're going to have to do a lot of

136
00:05:32,020 --> 00:05:37,900
internal scripting to enable that system

137
00:05:35,500 --> 00:05:40,000
to work and after gathering whatever

138
00:05:37,900 --> 00:05:43,539
information was there we were gonna have

139
00:05:40,000 --> 00:05:47,650
to pull the information into like an

140
00:05:43,540 --> 00:05:49,330
entirely new database what we ended up

141
00:05:47,650 --> 00:05:51,969
doing is looking at our detection and

142
00:05:49,330 --> 00:05:53,229
response tooling which was the same

143
00:05:51,970 --> 00:05:55,180
across the three different operating

144
00:05:53,230 --> 00:05:57,850
systems in addition the detection and

145
00:05:55,180 --> 00:06:00,220
response tool enables us to write

146
00:05:57,850 --> 00:06:02,770
queries that were granular enough to

147
00:06:00,220 --> 00:06:05,800
look at the coast or the computer's name

148
00:06:02,770 --> 00:06:07,990
the operating system and then pull

149
00:06:05,800 --> 00:06:10,930
whatever configuration we wanted to

150
00:06:07,990 --> 00:06:12,820
verify these queries what could also be

151
00:06:10,930 --> 00:06:14,800
scheduled so enabled us with that

152
00:06:12,820 --> 00:06:16,540
automation configuration that we were

153
00:06:14,800 --> 00:06:20,140
looking for

154
00:06:16,540 --> 00:06:22,700
so this were automating this tooling

155
00:06:20,140 --> 00:06:25,969
represents the end of our phase 1 of

156
00:06:22,700 --> 00:06:29,090
this project this is an example of what

157
00:06:25,970 --> 00:06:31,670
our automation looks like at this time

158
00:06:29,090 --> 00:06:35,539
and so for our purposes at this point

159
00:06:31,670 --> 00:06:38,900
we're looking at pulling this for the

160
00:06:35,540 --> 00:06:40,700
5th column into our API call upon

161
00:06:38,900 --> 00:06:43,370
pulling into an API call those

162
00:06:40,700 --> 00:06:49,280
configurations will be verified when the

163
00:06:43,370 --> 00:06:51,170
device authenticates to the network so

164
00:06:49,280 --> 00:06:53,539
currently all of this is being run in

165
00:06:51,170 --> 00:06:57,050
our dev environment as we move into

166
00:06:53,540 --> 00:06:58,940
phase 2 we're looking at how to take the

167
00:06:57,050 --> 00:07:01,190
configuration statuses that we have in

168
00:06:58,940 --> 00:07:03,740
dev environment and query them via an

169
00:07:01,190 --> 00:07:05,210
API call so when the device event when

170
00:07:03,740 --> 00:07:08,270
the user authenticates to the network

171
00:07:05,210 --> 00:07:11,299
the workflow ideally will be these are

172
00:07:08,270 --> 00:07:13,969
indicates with 2fa after that the host

173
00:07:11,300 --> 00:07:16,970
certificate and its compliance status is

174
00:07:13,970 --> 00:07:18,800
called now this step is a step that

175
00:07:16,970 --> 00:07:21,050
we're still considering if the

176
00:07:18,800 --> 00:07:22,460
compliance status is incomplete or if

177
00:07:21,050 --> 00:07:24,260
there are certain configurations that

178
00:07:22,460 --> 00:07:26,450
are enabled certain configurations that

179
00:07:24,260 --> 00:07:29,030
aren't enabled we essentially have two

180
00:07:26,450 --> 00:07:30,950
options one option is the tooling can be

181
00:07:29,030 --> 00:07:33,200
triggered that if the configuration is

182
00:07:30,950 --> 00:07:35,979
not enabled or the value returns false

183
00:07:33,200 --> 00:07:37,789
we can automatically set the tool to

184
00:07:35,979 --> 00:07:40,070
enable that configuration

185
00:07:37,790 --> 00:07:43,490
therefore forcibly enforcing that

186
00:07:40,070 --> 00:07:46,849
compliance rate or we can provide the

187
00:07:43,490 --> 00:07:48,860
user with a security education process

188
00:07:46,850 --> 00:07:51,740
and state this configuration is not

189
00:07:48,860 --> 00:07:54,290
enabled here's how here's the self-help

190
00:07:51,740 --> 00:07:56,960
and how you can re-enable this or fix

191
00:07:54,290 --> 00:07:58,610
this so as we're looking at phase 2

192
00:07:56,960 --> 00:08:01,340
these are the questions that we're

193
00:07:58,610 --> 00:08:03,229
looking at in terms of the final point

194
00:08:01,340 --> 00:08:06,020
of or how to make this process more

195
00:08:03,229 --> 00:08:12,280
actionable and also keep it from each of

196
00:08:06,020 --> 00:08:28,340
the user any questions at this time ok

197
00:08:12,280 --> 00:08:31,239
thank you perfect yep currently we're

198
00:08:28,340 --> 00:08:31,239
looking at 10 a.m. yes

199
00:08:31,380 --> 00:08:41,020
yep in the green shirt our engineer I'm

200
00:08:38,260 --> 00:08:41,580
sorry all of our users have local admin

201
00:08:41,020 --> 00:08:44,949
rights

202
00:08:41,580 --> 00:08:46,570
so all users have root access which

203
00:08:44,950 --> 00:08:49,420
means that all of the configurations

204
00:08:46,570 --> 00:08:51,040
that should be present on the device can

205
00:08:49,420 --> 00:08:53,319
be arbitrarily changed by users if they

206
00:08:51,040 --> 00:08:55,569
choose to do so that's why we wanted to

207
00:08:53,320 --> 00:08:59,980
that's basically the purpose of this

208
00:08:55,570 --> 00:09:01,870
project yes and the black shirt so the

209
00:08:59,980 --> 00:09:03,310
MDM tools that we're looking at again

210
00:09:01,870 --> 00:09:05,170
since I said they're a unique across

211
00:09:03,310 --> 00:09:09,160
with your operating systems we currently

212
00:09:05,170 --> 00:09:11,410
use bigfix jams and puppet so it's just

213
00:09:09,160 --> 00:09:15,400
gonna be hard to normalize from those

214
00:09:11,410 --> 00:09:27,400
three different platforms and yes in the

215
00:09:15,400 --> 00:09:29,199
front row or gray shirt yeah yes so the

216
00:09:27,400 --> 00:09:31,030
next step as I was saying of like this

217
00:09:29,200 --> 00:09:34,660
step three you are actually implementing

218
00:09:31,030 --> 00:09:36,430
this is that in accordance with SLA is

219
00:09:34,660 --> 00:09:38,410
okay this is currently out of compliance

220
00:09:36,430 --> 00:09:43,209
or not in configuration you have limited

221
00:09:38,410 --> 00:09:45,430
like it's a like gradual degradation in

222
00:09:43,210 --> 00:09:47,530
network access so at some point after

223
00:09:45,430 --> 00:09:48,819
the 30-day period okay no network access

224
00:09:47,530 --> 00:09:53,980
this is what needs to be fixed

225
00:09:48,820 --> 00:09:55,750
that's if we give the user the choice to

226
00:09:53,980 --> 00:09:58,440
self-correct it if we choose to

227
00:09:55,750 --> 00:10:00,970
automatically correct it then

228
00:09:58,440 --> 00:10:03,490
essentially will be just forcibly

229
00:10:00,970 --> 00:10:15,670
enforcing these compliance rates does

230
00:10:03,490 --> 00:10:17,020
that make sense okay okay yes so right

231
00:10:15,670 --> 00:10:18,610
now we do not want to grant and revoke

232
00:10:17,020 --> 00:10:20,590
certificates we just want to look at

233
00:10:18,610 --> 00:10:22,570
what network we're looking at whoa I

234
00:10:20,590 --> 00:10:26,620
think that's my time we're looking at

235
00:10:22,570 --> 00:10:31,120
Network ackles okay sorry one minute my

236
00:10:26,620 --> 00:10:32,230
time is fast okay well looks like

237
00:10:31,120 --> 00:10:32,860
there's no more questions thank you very

238
00:10:32,230 --> 00:10:36,389
much everybody

239
00:10:32,860 --> 00:10:36,389
[Applause]

