1
00:00:00,000 --> 00:00:03,600
hello good morning my name is Lu style

2
00:00:02,190 --> 00:00:05,910
I'm here to introduce our next guest

3
00:00:03,600 --> 00:00:10,290
speaker Colin O'Brien and he's gonna be

4
00:00:05,910 --> 00:00:16,890
speaking of about graphic face detection

5
00:00:10,290 --> 00:00:19,740
and response all right

6
00:00:16,890 --> 00:00:22,189
hi everyone so as mentioned my name is

7
00:00:19,740 --> 00:00:24,119
Colin O'Brien I'm gonna be talking about

8
00:00:22,189 --> 00:00:26,340
project I've been working on for a

9
00:00:24,119 --> 00:00:28,560
couple of years now called grapple so

10
00:00:26,340 --> 00:00:30,448
grapple is a graph analytics platform

11
00:00:28,560 --> 00:00:32,729
that really tries to target detection

12
00:00:30,449 --> 00:00:35,760
response workloads so finding and

13
00:00:32,729 --> 00:00:37,169
removing attackers from networks before

14
00:00:35,760 --> 00:00:38,879
I get started talking about grapple I

15
00:00:37,170 --> 00:00:41,040
want to give a little bit of context I

16
00:00:38,879 --> 00:00:44,280
have been working in detection response

17
00:00:41,040 --> 00:00:47,280
in some form of a nut or another for

18
00:00:44,280 --> 00:00:49,829
about five years now my entire career

19
00:00:47,280 --> 00:00:52,770
but I've had a lot of really different

20
00:00:49,829 --> 00:00:53,489
jobs in that time I started off at

21
00:00:52,770 --> 00:00:56,340
rapid7

22
00:00:53,489 --> 00:00:57,538
I was hired by the insight IDR product

23
00:00:56,340 --> 00:01:01,020
team so that's their detection response

24
00:00:57,539 --> 00:01:03,840
service and my first job was basically

25
00:01:01,020 --> 00:01:05,220
to embed myself onto a data science team

26
00:01:03,840 --> 00:01:09,540
so I was going to be the sort of

27
00:01:05,220 --> 00:01:10,830
security engineer for that team and they

28
00:01:09,540 --> 00:01:12,450
asked me what I wanted to do and I

29
00:01:10,830 --> 00:01:14,100
thought machine learning sounded cool so

30
00:01:12,450 --> 00:01:15,119
they they gave me that job and what I

31
00:01:14,100 --> 00:01:17,460
found was that we did very little

32
00:01:15,119 --> 00:01:19,130
machine learning ultimately and really

33
00:01:17,460 --> 00:01:22,439
we spent the vast majority of time

34
00:01:19,130 --> 00:01:24,869
looking at broken or just garbage data

35
00:01:22,439 --> 00:01:27,570
for whatever reason sources were out of

36
00:01:24,869 --> 00:01:29,400
date data would age really poorly so

37
00:01:27,570 --> 00:01:31,380
security data in particular just ages

38
00:01:29,400 --> 00:01:34,670
really terribly because you might think

39
00:01:31,380 --> 00:01:37,439
that it's Sarah you might think that

40
00:01:34,670 --> 00:01:39,090
like a virus scan happened a week ago

41
00:01:37,439 --> 00:01:42,240
and that data is different from a virus

42
00:01:39,090 --> 00:01:45,840
gain happening a month ago or today so I

43
00:01:42,240 --> 00:01:47,429
saw these security minded data

44
00:01:45,840 --> 00:01:50,310
scientists digging into these massive

45
00:01:47,430 --> 00:01:52,470
data sets and really managing to pull

46
00:01:50,310 --> 00:01:54,630
tons of signal out of what looked like

47
00:01:52,470 --> 00:01:55,950
the the worst kind of noise you could

48
00:01:54,630 --> 00:01:58,259
imagine and I learned a lot about the

49
00:01:55,950 --> 00:01:59,640
techniques that they leverage the tools

50
00:01:58,259 --> 00:02:02,549
and the ways that they work together to

51
00:01:59,640 --> 00:02:05,070
do this after about a year on that team

52
00:02:02,549 --> 00:02:06,630
I started working on the IDR product

53
00:02:05,070 --> 00:02:09,119
more directly so I worked on the

54
00:02:06,630 --> 00:02:11,220
detection team building out attack

55
00:02:09,119 --> 00:02:13,770
signatures for our numerous different

56
00:02:11,220 --> 00:02:16,200
customers these attack signatures had to

57
00:02:13,770 --> 00:02:17,910
you work across pretty much arbitrary

58
00:02:16,200 --> 00:02:19,260
customer environments you can never

59
00:02:17,910 --> 00:02:20,730
really predict your next customer is

60
00:02:19,260 --> 00:02:22,079
gonna be they had to have low false

61
00:02:20,730 --> 00:02:24,720
positives and they had to catch real

62
00:02:22,080 --> 00:02:26,340
attackers I learned that the engineers

63
00:02:24,720 --> 00:02:28,800
who are building these detection x'

64
00:02:26,340 --> 00:02:32,160
leveraged code as their primary weapon

65
00:02:28,800 --> 00:02:34,200
so all of the alert logic did the same

66
00:02:32,160 --> 00:02:35,910
way that our service code or any other

67
00:02:34,200 --> 00:02:36,929
code would have been checked in it would

68
00:02:35,910 --> 00:02:41,880
have been code reviewed it would have

69
00:02:36,930 --> 00:02:43,620
had unit tests the sort of latter part

70
00:02:41,880 --> 00:02:46,019
of my time at rapid7

71
00:02:43,620 --> 00:02:48,000
which was roughly two and a half years I

72
00:02:46,020 --> 00:02:49,890
actually worked a lot on reliability

73
00:02:48,000 --> 00:02:51,360
software engineering and building

74
00:02:49,890 --> 00:02:53,130
services out and so at the end of that

75
00:02:51,360 --> 00:02:55,470
time I decided that I wanted to get a

76
00:02:53,130 --> 00:02:57,000
little more into detection response I

77
00:02:55,470 --> 00:02:58,740
wanted to stop being sort of the ivory

78
00:02:57,000 --> 00:03:00,840
tower vendor that looks down and hands

79
00:02:58,740 --> 00:03:05,040
down detection x' and actually do the

80
00:03:00,840 --> 00:03:07,440
job day to day so I left rapid7 I went

81
00:03:05,040 --> 00:03:09,630
to Dropbox and for two years I was

82
00:03:07,440 --> 00:03:12,570
working on their detection response team

83
00:03:09,630 --> 00:03:16,380
so actually engaging with the red team

84
00:03:12,570 --> 00:03:17,820
and triaging alerts day to day seeing

85
00:03:16,380 --> 00:03:19,140
what sort of problems were being faced

86
00:03:17,820 --> 00:03:20,459
and what was interesting is that it was

87
00:03:19,140 --> 00:03:24,029
a lot of the same problems that I had

88
00:03:20,459 --> 00:03:26,310
seen in that vendor space I saw security

89
00:03:24,030 --> 00:03:29,040
experts being tasked with dealing with

90
00:03:26,310 --> 00:03:31,980
what to me were data or engineering or

91
00:03:29,040 --> 00:03:34,290
operations problems dealing with log

92
00:03:31,980 --> 00:03:36,000
sources that were incorrect or that

93
00:03:34,290 --> 00:03:38,280
weren't being parsed correctly dealing

94
00:03:36,000 --> 00:03:41,130
with log volumes that they weren't

95
00:03:38,280 --> 00:03:44,310
necessarily in the right position to

96
00:03:41,130 --> 00:03:46,109
scale to and so I tried to help that

97
00:03:44,310 --> 00:03:47,790
team out for about two years and a lot

98
00:03:46,110 --> 00:03:50,430
of the lessons learned went into how

99
00:03:47,790 --> 00:03:52,140
grapple works one of the big things that

100
00:03:50,430 --> 00:03:54,720
makes crapple somewhat more interesting

101
00:03:52,140 --> 00:03:57,750
than other products is that it is a

102
00:03:54,720 --> 00:03:59,010
graph based system and so today I'm

103
00:03:57,750 --> 00:04:01,260
going to talk about why I think that a

104
00:03:59,010 --> 00:04:02,340
graph based approach is so important for

105
00:04:01,260 --> 00:04:04,799
security in general but especially

106
00:04:02,340 --> 00:04:07,560
detection response and hopefully you can

107
00:04:04,800 --> 00:04:13,050
walk away with some understanding of why

108
00:04:07,560 --> 00:04:14,610
that's the case okay so before I talk

109
00:04:13,050 --> 00:04:16,770
about grapple I think it makes sense to

110
00:04:14,610 --> 00:04:18,900
just go over what a graph is so graphs

111
00:04:16,769 --> 00:04:22,140
are a data structure that comprised of

112
00:04:18,899 --> 00:04:24,888
nodes and edges nodes are usually things

113
00:04:22,140 --> 00:04:27,080
like entities or nouns right so a person

114
00:04:24,889 --> 00:04:30,560
might be anode edges denote

115
00:04:27,080 --> 00:04:32,568
relationships between those nodes graphs

116
00:04:30,560 --> 00:04:34,610
are a really powerful and generalizable

117
00:04:32,569 --> 00:04:36,860
data structure and I think one of the

118
00:04:34,610 --> 00:04:39,770
easiest ways to demonstrate that is to

119
00:04:36,860 --> 00:04:41,870
take a really basic graph like this

120
00:04:39,770 --> 00:04:43,849
right there's almost no labels there's

121
00:04:41,870 --> 00:04:46,639
no explicit data in a graph like this

122
00:04:43,849 --> 00:04:49,159
but despite that fact I can say a lot of

123
00:04:46,639 --> 00:04:50,749
things about this graph I can say that

124
00:04:49,159 --> 00:04:52,159
the green node has a relationship with

125
00:04:50,749 --> 00:04:54,229
the blue node the blue node has a

126
00:04:52,159 --> 00:04:56,419
relationship with a purple node the

127
00:04:54,229 --> 00:04:58,370
green node has a path to the purple node

128
00:04:56,419 --> 00:05:00,258
with a length of 1 that crosses over

129
00:04:58,370 --> 00:05:01,789
this blue node the reason why I can say

130
00:05:00,259 --> 00:05:04,430
these things is because graphs have this

131
00:05:01,789 --> 00:05:06,800
really powerful property of encoding

132
00:05:04,430 --> 00:05:08,389
relationship information directly into

133
00:05:06,800 --> 00:05:10,849
their structure this is why we see

134
00:05:08,389 --> 00:05:12,560
graphs used a lot in visualization but

135
00:05:10,849 --> 00:05:16,210
these relationship heavy workloads

136
00:05:12,560 --> 00:05:19,490
actually come up all over the place so

137
00:05:16,210 --> 00:05:21,620
as some examples Google search is

138
00:05:19,490 --> 00:05:22,999
powered by their knowledge graph and

139
00:05:21,620 --> 00:05:25,879
this is what allows them to instead of

140
00:05:22,999 --> 00:05:28,400
taking just a plain text search approach

141
00:05:25,879 --> 00:05:32,479
to a search engine start giving you

142
00:05:28,400 --> 00:05:35,359
related information Facebook's graph API

143
00:05:32,479 --> 00:05:36,680
underlies their entire public API you

144
00:05:35,360 --> 00:05:39,439
can imagine why this would be useful you

145
00:05:36,680 --> 00:05:41,180
might want to ask questions like given a

146
00:05:39,439 --> 00:05:42,770
user on our platform who are their

147
00:05:41,180 --> 00:05:45,020
friends what are the posts that they

148
00:05:42,770 --> 00:05:47,419
like and then we can recommend those

149
00:05:45,020 --> 00:05:50,139
posts to that initial user right this is

150
00:05:47,419 --> 00:05:53,000
another very relationship heavy query

151
00:05:50,139 --> 00:05:54,560
graphs are in some more niche areas so

152
00:05:53,000 --> 00:05:56,659
graphs underlie machine learning

153
00:05:54,560 --> 00:05:58,189
libraries like tensor flow tensor flows

154
00:05:56,659 --> 00:06:00,020
an example of something called dataflow

155
00:05:58,189 --> 00:06:02,990
programming where the computation that

156
00:06:00,020 --> 00:06:05,229
you build in your tensor graph is

157
00:06:02,990 --> 00:06:07,879
represented as a sort of graph traversal

158
00:06:05,229 --> 00:06:10,699
and then graphs also tend to really just

159
00:06:07,879 --> 00:06:12,710
emerge from systems without any purpose

160
00:06:10,699 --> 00:06:15,110
right we end up building graphs without

161
00:06:12,710 --> 00:06:17,659
really meaning to and an example of that

162
00:06:15,110 --> 00:06:19,189
would be BGP and the internet right you

163
00:06:17,659 --> 00:06:20,990
have all of these routers acting as

164
00:06:19,189 --> 00:06:22,729
nodes with neighbors that they know how

165
00:06:20,990 --> 00:06:24,620
to talk to and that's how packets

166
00:06:22,729 --> 00:06:26,899
managed to get from one system to

167
00:06:24,620 --> 00:06:31,099
another traversing this massive graph of

168
00:06:26,899 --> 00:06:35,209
the internet a little closer to home in

169
00:06:31,099 --> 00:06:37,310
the financial security space graphs have

170
00:06:35,209 --> 00:06:38,660
been used to great effect for quite a

171
00:06:37,310 --> 00:06:40,610
while now to detect thing

172
00:06:38,660 --> 00:06:43,550
like credit card fraud or scam

173
00:06:40,610 --> 00:06:45,890
businesses and they do this by querying

174
00:06:43,550 --> 00:06:47,900
and building models on tops of on top of

175
00:06:45,890 --> 00:06:51,320
these graphs to understand things like

176
00:06:47,900 --> 00:06:54,020
commonality about locations that credit

177
00:06:51,320 --> 00:06:56,360
cards are used which users have in the

178
00:06:54,020 --> 00:06:58,400
past worked with a business and then why

179
00:06:56,360 --> 00:07:00,530
is this new strange user talking to this

180
00:06:58,400 --> 00:07:04,280
business and and they're sort of a

181
00:07:00,530 --> 00:07:06,650
staple in that world at this point in

182
00:07:04,280 --> 00:07:08,210
the information security world we're

183
00:07:06,650 --> 00:07:10,489
starting to see graphs gain a lot more

184
00:07:08,210 --> 00:07:11,630
traction unsurprisingly given all these

185
00:07:10,490 --> 00:07:13,910
other communities that have been

186
00:07:11,630 --> 00:07:16,010
leveraging them John Lambert at

187
00:07:13,910 --> 00:07:18,440
Microsoft wrote a post a couple of years

188
00:07:16,010 --> 00:07:20,810
ago about his opinions on graphs in

189
00:07:18,440 --> 00:07:22,880
InfoSec and in this post he makes a

190
00:07:20,810 --> 00:07:25,160
statement which many people may have

191
00:07:22,880 --> 00:07:27,320
heard at this point he says defenders

192
00:07:25,160 --> 00:07:29,900
think enlists attackers think in graphs

193
00:07:27,320 --> 00:07:32,750
as long as this is true attackers win

194
00:07:29,900 --> 00:07:35,630
and in this post that he creates

195
00:07:32,750 --> 00:07:38,570
afterwards he talks about an example of

196
00:07:35,630 --> 00:07:41,150
this list and graph based thinking John

197
00:07:38,570 --> 00:07:43,430
talks about how when defenders are

198
00:07:41,150 --> 00:07:44,690
tasked with protecting a network one of

199
00:07:43,430 --> 00:07:46,540
the first things they'll do is start

200
00:07:44,690 --> 00:07:49,570
creating lists they'll create lists of

201
00:07:46,540 --> 00:07:53,120
privileged users like domain admins or

202
00:07:49,570 --> 00:07:55,280
exposed services or high-risk assets

203
00:07:53,120 --> 00:07:58,280
that contain maybe user data and they'll

204
00:07:55,280 --> 00:08:01,969
start to prioritize the work that they

205
00:07:58,280 --> 00:08:03,619
do based on those lists this is really

206
00:08:01,970 --> 00:08:05,540
different from how attackers go about

207
00:08:03,620 --> 00:08:08,180
doing their work attackers are going to

208
00:08:05,540 --> 00:08:09,530
opportunistically land on some asset

209
00:08:08,180 --> 00:08:11,300
they'll compromise whatever they can

210
00:08:09,530 --> 00:08:13,640
probably something unprivileged and

211
00:08:11,300 --> 00:08:15,470
exposed and they're gonna leverage the

212
00:08:13,640 --> 00:08:17,450
capabilities that they gain from that

213
00:08:15,470 --> 00:08:18,980
asset to start moving around your

214
00:08:17,450 --> 00:08:20,659
network and this can range from things

215
00:08:18,980 --> 00:08:23,240
like lateral phishing where an attacker

216
00:08:20,660 --> 00:08:25,100
might compromise your co-workers email

217
00:08:23,240 --> 00:08:26,900
and then they'll send you a PDF and say

218
00:08:25,100 --> 00:08:28,340
like hey look this over and all of a

219
00:08:26,900 --> 00:08:30,669
sudden they're they're taking over new

220
00:08:28,340 --> 00:08:33,740
users and assets on other people's

221
00:08:30,669 --> 00:08:36,260
computers across your network or as John

222
00:08:33,740 --> 00:08:37,909
talks about using tools like proc dump

223
00:08:36,260 --> 00:08:39,890
or meaty cats to dump credentials for

224
00:08:37,909 --> 00:08:42,260
memory and start moving around laterally

225
00:08:39,890 --> 00:08:43,939
and what the attacker is really doing

226
00:08:42,260 --> 00:08:46,040
here is they're abusing trust

227
00:08:43,940 --> 00:08:47,810
relationships right the attacker is

228
00:08:46,040 --> 00:08:49,910
starting off on this network they don't

229
00:08:47,810 --> 00:08:50,680
have these lists of users or assets

230
00:08:49,910 --> 00:08:53,020
ahead of time

231
00:08:50,680 --> 00:08:54,729
know these risk for prioritizing their

232
00:08:53,020 --> 00:08:58,230
doing discovery they're moving across

233
00:08:54,730 --> 00:09:02,230
the network in a very graph oriented way

234
00:08:58,230 --> 00:09:03,550
at the end of his post John says managed

235
00:09:02,230 --> 00:09:06,279
from reality because that is the

236
00:09:03,550 --> 00:09:07,479
prepared defenders mindset and so I

237
00:09:06,279 --> 00:09:08,890
think there's kind of a deeper meaning

238
00:09:07,480 --> 00:09:11,080
here at least that's something that I

239
00:09:08,890 --> 00:09:13,540
draw from this post which is not that

240
00:09:11,080 --> 00:09:14,649
graphs are necessarily better than lists

241
00:09:13,540 --> 00:09:16,180
or lists are better than graphs or

242
00:09:14,649 --> 00:09:18,910
anything like that it's really that when

243
00:09:16,180 --> 00:09:22,000
you have information that so clearly

244
00:09:18,910 --> 00:09:23,860
maps to one model one data structure and

245
00:09:22,000 --> 00:09:26,050
you force that information into some

246
00:09:23,860 --> 00:09:28,390
other model you lose something

247
00:09:26,050 --> 00:09:31,420
inherently right so when we as defenders

248
00:09:28,390 --> 00:09:34,120
take graph information like a network or

249
00:09:31,420 --> 00:09:35,979
like how an attacker behaves and we pull

250
00:09:34,120 --> 00:09:37,480
that out and we force it into lists we

251
00:09:35,980 --> 00:09:39,160
lose actually the most important thing

252
00:09:37,480 --> 00:09:42,899
which is what the attackers are taking

253
00:09:39,160 --> 00:09:42,899
advantage of those trust relationships

254
00:09:43,980 --> 00:09:47,740
one tool that I think really

255
00:09:45,880 --> 00:09:49,899
demonstrates a shift in approach is

256
00:09:47,740 --> 00:09:52,810
bloodhound bloodhound is a tool that

257
00:09:49,899 --> 00:09:54,160
both attackers and defenders can use and

258
00:09:52,810 --> 00:09:55,839
I think that really goes to show that

259
00:09:54,160 --> 00:09:57,850
it's sharing this common model

260
00:09:55,839 --> 00:10:00,100
bloodhound allows you to query and

261
00:09:57,850 --> 00:10:02,080
visualize Active Directory as if it were

262
00:10:00,100 --> 00:10:03,490
a graph and from a defenders point of

263
00:10:02,080 --> 00:10:05,260
view this is much closer to how

264
00:10:03,490 --> 00:10:07,029
attackers are thinking about and taking

265
00:10:05,260 --> 00:10:08,560
advantage of your systems and this

266
00:10:07,029 --> 00:10:11,140
allows you to move away from asking

267
00:10:08,560 --> 00:10:12,699
questions like who are my domain admins

268
00:10:11,140 --> 00:10:14,290
and how do I protect them and instead

269
00:10:12,700 --> 00:10:16,450
start asking questions like how would I

270
00:10:14,290 --> 00:10:20,430
go from an unprivileged user to a domain

271
00:10:16,450 --> 00:10:20,430
admin and start cutting off those paths

272
00:10:20,730 --> 00:10:24,459
another tool that I think demonstrates

273
00:10:23,050 --> 00:10:27,120
this in a different way is cloud mapper

274
00:10:24,459 --> 00:10:29,709
this is built by duo and Scott Piper

275
00:10:27,120 --> 00:10:33,459
cloud mapper is a tool that allows you

276
00:10:29,709 --> 00:10:36,099
to visualize and graph out all of your

277
00:10:33,459 --> 00:10:37,329
AWS resources and policies and this lets

278
00:10:36,100 --> 00:10:40,000
you move away from thinking about

279
00:10:37,329 --> 00:10:42,130
individual policies and how they might

280
00:10:40,000 --> 00:10:44,350
have individual issues or they might

281
00:10:42,130 --> 00:10:45,760
look fine when you're just glancing at

282
00:10:44,350 --> 00:10:46,870
one of them but when you start to

283
00:10:45,760 --> 00:10:48,520
combine them together the way an

284
00:10:46,870 --> 00:10:49,990
attacker would as they chain attacks

285
00:10:48,520 --> 00:10:51,790
across different assets in your

286
00:10:49,990 --> 00:10:53,740
environments you can start to find

287
00:10:51,790 --> 00:10:56,310
privilege escalations or leaks that you

288
00:10:53,740 --> 00:10:56,310
didn't expect

289
00:10:58,240 --> 00:11:03,190
so in the detection response world the

290
00:11:00,730 --> 00:11:05,380
model and the primitive that we leverage

291
00:11:03,190 --> 00:11:07,240
is the event and we do this by

292
00:11:05,380 --> 00:11:09,040
collecting logs which are some sort of

293
00:11:07,240 --> 00:11:11,140
representation of these events things

294
00:11:09,040 --> 00:11:13,719
like process execution logs file

295
00:11:11,140 --> 00:11:15,610
creation logs network instrumentation

296
00:11:13,720 --> 00:11:17,020
that sort of thing what we do is we

297
00:11:15,610 --> 00:11:19,870
collect billions of these every single

298
00:11:17,020 --> 00:11:22,180
day and we store them in what is

299
00:11:19,870 --> 00:11:23,050
effectively a massive index or a big

300
00:11:22,180 --> 00:11:25,630
list called

301
00:11:23,050 --> 00:11:27,670
a sim and we run queries against these

302
00:11:25,630 --> 00:11:30,310
and we look at things like individual

303
00:11:27,670 --> 00:11:31,630
events as they occur and we try to write

304
00:11:30,310 --> 00:11:33,880
queries against them to find something

305
00:11:31,630 --> 00:11:36,010
suspicious if we do find something

306
00:11:33,880 --> 00:11:38,230
suspicious we go back to our sim we

307
00:11:36,010 --> 00:11:41,410
write subsequent queries looking at more

308
00:11:38,230 --> 00:11:42,850
logs the thing is that when you take

309
00:11:41,410 --> 00:11:44,949
some of these logs down and you know

310
00:11:42,850 --> 00:11:46,060
what you're looking for you can start to

311
00:11:44,950 --> 00:11:48,550
see that there's actually a lot of

312
00:11:46,060 --> 00:11:51,219
relationships hidden in between them a

313
00:11:48,550 --> 00:11:53,140
process ID and one log might be a parent

314
00:11:51,220 --> 00:11:55,330
process ID in another log file name

315
00:11:53,140 --> 00:11:56,890
might be shared across them and when we

316
00:11:55,330 --> 00:12:00,070
start to pull these relationships out

317
00:11:56,890 --> 00:12:02,140
and make them more explicit I think that

318
00:12:00,070 --> 00:12:04,959
we can start honing in on more complex

319
00:12:02,140 --> 00:12:06,399
attacker behaviors rather than isolated

320
00:12:04,959 --> 00:12:09,459
events as they occur across our

321
00:12:06,399 --> 00:12:11,470
environment and so a grapple really

322
00:12:09,459 --> 00:12:13,810
tries to demonstrate what we've just

323
00:12:11,470 --> 00:12:16,570
seen it tries to demonstrate that when

324
00:12:13,810 --> 00:12:18,339
we can move from thinking about logs as

325
00:12:16,570 --> 00:12:19,930
our fundamental primitive and instead

326
00:12:18,339 --> 00:12:21,790
more as a building block into an

327
00:12:19,930 --> 00:12:23,709
abstraction that matches what attackers

328
00:12:21,790 --> 00:12:27,160
are doing more closely we can be a lot

329
00:12:23,709 --> 00:12:29,920
more effective as defenders so grapple

330
00:12:27,160 --> 00:12:31,810
will ingest raw logs you can send it up

331
00:12:29,920 --> 00:12:34,060
sis Mon or any other data type that it

332
00:12:31,810 --> 00:12:37,000
supports it's gonna parse those into a

333
00:12:34,060 --> 00:12:38,859
graph representation so a process

334
00:12:37,000 --> 00:12:41,320
execution log might generate a graph

335
00:12:38,860 --> 00:12:44,709
that has a parent node a child node and

336
00:12:41,320 --> 00:12:47,529
an edge between them these graphs go

337
00:12:44,709 --> 00:12:48,790
through an identification process I'll

338
00:12:47,529 --> 00:12:50,200
talk a little bit more about this later

339
00:12:48,790 --> 00:12:52,569
but essentially what this means is that

340
00:12:50,200 --> 00:12:54,550
we don't want a million different nodes

341
00:12:52,570 --> 00:12:56,920
representing the same entity right if we

342
00:12:54,550 --> 00:12:58,990
have a thousand logs coming up about

343
00:12:56,920 --> 00:13:02,050
chrome doing some action we really just

344
00:12:58,990 --> 00:13:03,339
want one node for that chrome entity so

345
00:13:02,050 --> 00:13:06,279
that's what identification is going to

346
00:13:03,339 --> 00:13:09,279
do these identified graphs get merged

347
00:13:06,279 --> 00:13:10,990
into grapples master graph so in real

348
00:13:09,279 --> 00:13:11,550
time as these graphs are generated

349
00:13:10,990 --> 00:13:13,890
they're getting

350
00:13:11,550 --> 00:13:15,660
pinned up into this massive graph

351
00:13:13,890 --> 00:13:17,790
database that's going to represent all

352
00:13:15,660 --> 00:13:20,579
of the entities and behaviors occurring

353
00:13:17,790 --> 00:13:23,339
across your environment and as this is

354
00:13:20,580 --> 00:13:25,500
happening on every single updates this

355
00:13:23,339 --> 00:13:27,899
master graph grapple will orchestrate

356
00:13:25,500 --> 00:13:29,970
your attack signatures or what it calls

357
00:13:27,899 --> 00:13:31,290
analyzers they're gonna look for

358
00:13:29,970 --> 00:13:34,560
behaviors they're gonna look for

359
00:13:31,290 --> 00:13:36,660
suspicious patterns and when they find

360
00:13:34,560 --> 00:13:38,279
these patterns and you've deemed this a

361
00:13:36,660 --> 00:13:40,019
risky enough situation to start

362
00:13:38,279 --> 00:13:41,490
investigating you have a tool that's

363
00:13:40,019 --> 00:13:44,579
really gonna exploit the ability for

364
00:13:41,490 --> 00:13:46,260
graphs to pull in context quickly right

365
00:13:44,579 --> 00:13:48,149
everything's joined together sort of

366
00:13:46,260 --> 00:13:49,439
inherently and grapple calls that an

367
00:13:48,149 --> 00:13:51,630
engagement and so I'm gonna talk about

368
00:13:49,440 --> 00:13:53,430
how all of these things work both in

369
00:13:51,630 --> 00:13:55,380
terms of a sort of generalized graph

370
00:13:53,430 --> 00:13:59,459
based approach and then how grapple

371
00:13:55,380 --> 00:14:02,130
implements it when I talk about the

372
00:13:59,459 --> 00:14:04,589
master graph in grapple it's really what

373
00:14:02,130 --> 00:14:07,019
you see here there's actually more nodes

374
00:14:04,589 --> 00:14:08,579
than just what's here and there's also a

375
00:14:07,019 --> 00:14:10,950
sort of plug in nodes you can add your

376
00:14:08,579 --> 00:14:11,910
own models but nodes are pretty much

377
00:14:10,950 --> 00:14:14,100
what you would expect they have

378
00:14:11,910 --> 00:14:16,740
properties so a file has a path a

379
00:14:14,100 --> 00:14:18,029
process has a process ID or process name

380
00:14:16,740 --> 00:14:20,250
and then there are these special

381
00:14:18,029 --> 00:14:23,220
properties the edges right so a process

382
00:14:20,250 --> 00:14:25,860
has children process can create files

383
00:14:23,220 --> 00:14:31,740
network connections will connect out to

384
00:14:25,860 --> 00:14:33,899
their destinations so identity is really

385
00:14:31,740 --> 00:14:35,790
important not just to grapple but in

386
00:14:33,899 --> 00:14:38,070
general it's why tools like sis monde

387
00:14:35,790 --> 00:14:41,520
try to package identities for things

388
00:14:38,070 --> 00:14:43,790
like logins or processes as baked into

389
00:14:41,520 --> 00:14:45,720
their their processes is possible

390
00:14:43,790 --> 00:14:47,640
grapple is gonna do something very

391
00:14:45,720 --> 00:14:48,690
similar to sis Mon but it's going to do

392
00:14:47,640 --> 00:14:51,180
it on the back end so it's gonna be

393
00:14:48,690 --> 00:14:52,470
generalizable to really any source type

394
00:14:51,180 --> 00:14:54,390
that you send up and it's gonna provide

395
00:14:52,470 --> 00:14:57,089
an identity for every single node type

396
00:14:54,390 --> 00:14:59,240
so not just processes but users files

397
00:14:57,089 --> 00:15:02,640
network connections anything that it can

398
00:14:59,240 --> 00:15:04,860
understand as a node the problem with

399
00:15:02,640 --> 00:15:06,720
logs without identity is that you might

400
00:15:04,860 --> 00:15:09,120
see information like we have here right

401
00:15:06,720 --> 00:15:11,459
three events they all share a process ID

402
00:15:09,120 --> 00:15:12,899
across some series of time you might

403
00:15:11,459 --> 00:15:14,910
think that this is all referring to the

404
00:15:12,899 --> 00:15:18,660
same entity but that's not necessarily

405
00:15:14,910 --> 00:15:20,130
the case process IDs can be recycled and

406
00:15:18,660 --> 00:15:21,000
they're recycled actually really with

407
00:15:20,130 --> 00:15:23,460
with quite

408
00:15:21,000 --> 00:15:24,630
a good amount of frequency so if you

409
00:15:23,460 --> 00:15:26,880
don't have some way of resolving this

410
00:15:24,630 --> 00:15:28,830
it's gonna be really painful in any kind

411
00:15:26,880 --> 00:15:31,020
of investigation so grapple is going to

412
00:15:28,830 --> 00:15:33,210
use context from these logs the

413
00:15:31,020 --> 00:15:35,699
timestamps the event metadata to

414
00:15:33,210 --> 00:15:39,570
disambiguate what these entities are and

415
00:15:35,700 --> 00:15:42,300
provide a canonical identity when you

416
00:15:39,570 --> 00:15:44,550
combine that identification process with

417
00:15:42,300 --> 00:15:46,319
the graph based approach you can go a

418
00:15:44,550 --> 00:15:48,540
lot further than something like an

419
00:15:46,320 --> 00:15:50,520
instrumentation tool like sis Mon we can

420
00:15:48,540 --> 00:15:53,280
coalesce all of that information that

421
00:15:50,520 --> 00:15:56,069
comes up across thousands of logs on to

422
00:15:53,280 --> 00:15:57,890
just that one entity that one node using

423
00:15:56,070 --> 00:16:00,240
its its node key which is the identity

424
00:15:57,890 --> 00:16:02,880
and we can throw away a lot of redundant

425
00:16:00,240 --> 00:16:05,700
information so this helps grapple scale

426
00:16:02,880 --> 00:16:08,310
sub linearly so you might send a million

427
00:16:05,700 --> 00:16:12,450
logs to grapple in my experience across

428
00:16:08,310 --> 00:16:14,040
you know a million logs maybe ten to

429
00:16:12,450 --> 00:16:16,260
thirty percent of that information is

430
00:16:14,040 --> 00:16:17,790
actually unique the vast majority of it

431
00:16:16,260 --> 00:16:20,460
is just the same thing over and over

432
00:16:17,790 --> 00:16:22,829
again the same logs containing the same

433
00:16:20,460 --> 00:16:24,210
Pibb process names if it's if it's

434
00:16:22,830 --> 00:16:25,290
something like sis Mon they're really

435
00:16:24,210 --> 00:16:27,360
really heavy so it's gonna have the

436
00:16:25,290 --> 00:16:29,640
process gooood it's gonna have parent

437
00:16:27,360 --> 00:16:32,040
process information we can get rid of a

438
00:16:29,640 --> 00:16:33,689
lot of that and grapple and this can

439
00:16:32,040 --> 00:16:35,339
compound really quickly so if we have a

440
00:16:33,690 --> 00:16:37,920
master graph with just a single node

441
00:16:35,339 --> 00:16:40,770
it's got a pit of 100 and an event comes

442
00:16:37,920 --> 00:16:45,150
in and there's a process execution where

443
00:16:40,770 --> 00:16:47,610
pit 100 executed a child process we can

444
00:16:45,150 --> 00:16:49,260
immediately throw away some information

445
00:16:47,610 --> 00:16:50,550
right we can throw away the pit and then

446
00:16:49,260 --> 00:16:53,520
that type information is actually

447
00:16:50,550 --> 00:16:56,189
encoded directly into the graph if the

448
00:16:53,520 --> 00:16:57,750
child process creates a file again we're

449
00:16:56,190 --> 00:16:59,550
throwing away more and more information

450
00:16:57,750 --> 00:17:01,560
and if that child process then reads

451
00:16:59,550 --> 00:17:03,750
that file you can see how this really

452
00:17:01,560 --> 00:17:05,310
quickly compounds we're storing almost

453
00:17:03,750 --> 00:17:06,930
none of the information in that log

454
00:17:05,310 --> 00:17:10,438
we're just adding a new edge with a

455
00:17:06,930 --> 00:17:13,079
timestamp this really goes towards a lot

456
00:17:10,439 --> 00:17:15,360
of what I've seen in the field as people

457
00:17:13,079 --> 00:17:17,730
fighting with their data I see this in

458
00:17:15,359 --> 00:17:18,839
security I see this in really every

459
00:17:17,730 --> 00:17:21,630
discipline where you're dealing with a

460
00:17:18,839 --> 00:17:24,720
large amount of data scaling linearly or

461
00:17:21,630 --> 00:17:25,650
worse with your data sets it puts you in

462
00:17:24,720 --> 00:17:27,390
a position where you have to start

463
00:17:25,650 --> 00:17:28,860
throwing data away every year or you

464
00:17:27,390 --> 00:17:30,510
have to ask yourself do I really want

465
00:17:28,860 --> 00:17:32,070
this data source and I don't want people

466
00:17:30,510 --> 00:17:33,450
to have to ask that question I want you

467
00:17:32,070 --> 00:17:33,790
to be able to put as much data in this

468
00:17:33,450 --> 00:17:40,770
thing as

469
00:17:33,790 --> 00:17:43,690
possible okay so detection is really

470
00:17:40,770 --> 00:17:46,870
what I think in in terms of a log based

471
00:17:43,690 --> 00:17:48,820
approach Sims and logs push us in the

472
00:17:46,870 --> 00:17:50,439
wrong direction so I see a lot of

473
00:17:48,820 --> 00:17:53,230
detections that are looking at

474
00:17:50,440 --> 00:17:54,610
properties of an attack the reason for

475
00:17:53,230 --> 00:17:56,320
this is that it's a little difficult to

476
00:17:54,610 --> 00:17:59,290
look at multiple logs especially across

477
00:17:56,320 --> 00:18:01,240
log sources in most tools today and logs

478
00:17:59,290 --> 00:18:03,100
don't really tend to encode a lot of

479
00:18:01,240 --> 00:18:04,030
behavioral information they tend to just

480
00:18:03,100 --> 00:18:06,370
have properties

481
00:18:04,030 --> 00:18:07,840
this makes logs pretty good for things

482
00:18:06,370 --> 00:18:10,899
like searching for hashes or IP

483
00:18:07,840 --> 00:18:14,290
addresses I like those low-level pyramid

484
00:18:10,900 --> 00:18:15,970
of pain io CS but when you want to

485
00:18:14,290 --> 00:18:18,220
actually talk about attacker behaviors

486
00:18:15,970 --> 00:18:20,170
they start to fall apart joining these

487
00:18:18,220 --> 00:18:22,660
logs together is is usually pretty

488
00:18:20,170 --> 00:18:24,910
difficult so what I end up seeing is

489
00:18:22,660 --> 00:18:27,190
people building signatures based on

490
00:18:24,910 --> 00:18:29,200
attacker controlled information if I

491
00:18:27,190 --> 00:18:31,720
want to ask the question where is

492
00:18:29,200 --> 00:18:33,670
exfiltration happening on clients I

493
00:18:31,720 --> 00:18:35,860
can't really represent that in a

494
00:18:33,670 --> 00:18:37,570
generalizable way using logs at least

495
00:18:35,860 --> 00:18:40,030
not very well what I'll end up writing

496
00:18:37,570 --> 00:18:41,740
is something like you know curl and W

497
00:18:40,030 --> 00:18:43,330
get are used for this a lot and these

498
00:18:41,740 --> 00:18:45,130
are the command line parameters that I

499
00:18:43,330 --> 00:18:47,740
expect and if I see these file names

500
00:18:45,130 --> 00:18:49,780
show up then that's my signature but

501
00:18:47,740 --> 00:18:51,430
that's really really brittle every

502
00:18:49,780 --> 00:18:53,410
aspect of that signature that I've

503
00:18:51,430 --> 00:18:55,180
written is based on attacker controlled

504
00:18:53,410 --> 00:18:56,920
information and I see these signatures

505
00:18:55,180 --> 00:18:59,470
all the time not just for X full really

506
00:18:56,920 --> 00:19:01,750
for everything and so you might try to

507
00:18:59,470 --> 00:19:03,970
put some like globs in there or use

508
00:19:01,750 --> 00:19:05,950
multiple queries with ORS and build this

509
00:19:03,970 --> 00:19:07,840
kind of monster query that tries to be

510
00:19:05,950 --> 00:19:10,510
robust but ultimately I think it's a

511
00:19:07,840 --> 00:19:12,399
losing game one way of demonstrating

512
00:19:10,510 --> 00:19:15,040
this is if we take two process execution

513
00:19:12,400 --> 00:19:17,620
logs this is word and PowerShell

514
00:19:15,040 --> 00:19:19,810
executing and there's no properties to

515
00:19:17,620 --> 00:19:21,370
go off of right maybe if the power show

516
00:19:19,810 --> 00:19:23,050
log had command line arguments I could

517
00:19:21,370 --> 00:19:25,060
play that losing game of trying to parse

518
00:19:23,050 --> 00:19:28,360
them and say like oh this you know

519
00:19:25,060 --> 00:19:31,000
base64 encoded data being passed in is

520
00:19:28,360 --> 00:19:32,709
suspicious for whatever reason but as I

521
00:19:31,000 --> 00:19:33,760
said I that that's attacker controlled

522
00:19:32,710 --> 00:19:36,850
information that's not what we want to

523
00:19:33,760 --> 00:19:40,660
focus on similarly word and powershell

524
00:19:36,850 --> 00:19:42,639
are benign you know digitally signed

525
00:19:40,660 --> 00:19:44,980
valid programs right they're executing

526
00:19:42,640 --> 00:19:47,710
in the vast majority of environments and

527
00:19:44,980 --> 00:19:49,539
they're doing so legitimately so

528
00:19:47,710 --> 00:19:51,220
we can see here that logs are hiding

529
00:19:49,539 --> 00:19:53,770
what I would say is the most important

530
00:19:51,220 --> 00:19:55,960
piece of information we have this pit

531
00:19:53,770 --> 00:19:57,940
sort of implicitly joining these logs

532
00:19:55,960 --> 00:19:59,890
together and we can see that it's got

533
00:19:57,940 --> 00:20:02,350
nothing to do with word or PowerShell

534
00:19:59,890 --> 00:20:03,970
executing it's really that word and

535
00:20:02,350 --> 00:20:05,529
PowerShell are executing together right

536
00:20:03,970 --> 00:20:08,200
there's this relationship between the

537
00:20:05,529 --> 00:20:10,299
two that we don't expect we want to

538
00:20:08,200 --> 00:20:12,309
start focusing more on behaviors and

539
00:20:10,299 --> 00:20:15,399
relationships as opposed to isolated

540
00:20:12,309 --> 00:20:18,220
events and properties and we can

541
00:20:15,399 --> 00:20:20,110
generalize this further it might not be

542
00:20:18,220 --> 00:20:21,429
word it might not be PowerShell right

543
00:20:20,110 --> 00:20:24,459
there's a number of ways to get code

544
00:20:21,429 --> 00:20:27,370
execution on an endpoint it might be

545
00:20:24,460 --> 00:20:28,899
Excel loading a macro it might be Adobe

546
00:20:27,370 --> 00:20:30,969
Reader getting owned right and they

547
00:20:28,899 --> 00:20:32,678
might shell out or they might call it to

548
00:20:30,970 --> 00:20:34,990
a JavaScript or Python interpreter on

549
00:20:32,679 --> 00:20:36,730
your system and so what we really care

550
00:20:34,990 --> 00:20:38,860
about is tracking the fundamentals of

551
00:20:36,730 --> 00:20:41,230
what attackers do attackers execute

552
00:20:38,860 --> 00:20:43,719
processes we should be tracking that

553
00:20:41,230 --> 00:20:46,630
sort of information not trying to hone

554
00:20:43,720 --> 00:20:51,510
in on overly specific signatures that

555
00:20:46,630 --> 00:20:54,429
attackers can almost accidentally bypass

556
00:20:51,510 --> 00:20:56,289
when we start to represent our attack

557
00:20:54,429 --> 00:20:58,480
signatures as graphs and when we stop

558
00:20:56,289 --> 00:21:00,010
trying to deal with specifics of attacks

559
00:20:58,480 --> 00:21:01,779
and start to think more in terms of

560
00:21:00,010 --> 00:21:04,029
fundamentals I think we can represent

561
00:21:01,779 --> 00:21:06,220
attacks much more creatively and much

562
00:21:04,029 --> 00:21:08,950
more powerfully we can still leverage

563
00:21:06,220 --> 00:21:11,110
properties so as an example we might

564
00:21:08,950 --> 00:21:13,390
still want that signature forward or

565
00:21:11,110 --> 00:21:14,860
Adobe Reader or excel these commonly

566
00:21:13,390 --> 00:21:17,200
targeted applications with non-white

567
00:21:14,860 --> 00:21:19,750
listed child processes we can leverage

568
00:21:17,200 --> 00:21:21,909
that just fine graphs expose properties

569
00:21:19,750 --> 00:21:24,580
perfectly well but we can also start

570
00:21:21,909 --> 00:21:26,890
asking much more complex questions like

571
00:21:24,580 --> 00:21:28,960
what are The Dropper like behaviors in

572
00:21:26,890 --> 00:21:31,960
my environment a dropper is something

573
00:21:28,960 --> 00:21:33,340
that I've defined as having a process

574
00:21:31,960 --> 00:21:35,620
that has reached out to an external

575
00:21:33,340 --> 00:21:37,449
network creates a file then executes

576
00:21:35,620 --> 00:21:39,699
that same file we're talking about

577
00:21:37,450 --> 00:21:42,490
multiple composite behaviors you would

578
00:21:39,700 --> 00:21:43,929
have to probably join at least four or

579
00:21:42,490 --> 00:21:45,970
five logs from different source types

580
00:21:43,929 --> 00:21:48,250
combine them together and then analyze

581
00:21:45,970 --> 00:21:49,809
them in an in a sequential order right

582
00:21:48,250 --> 00:21:54,279
but in a graph this is really

583
00:21:49,809 --> 00:21:56,200
straightforward so what I really want to

584
00:21:54,279 --> 00:21:58,240
do here is basically start painting our

585
00:21:56,200 --> 00:22:00,490
master graph with risks we want to start

586
00:21:58,240 --> 00:22:01,570
labeling our massive data set and anyone

587
00:22:00,490 --> 00:22:03,580
who's done data science

588
00:22:01,570 --> 00:22:05,770
to work knows that this is essentially

589
00:22:03,580 --> 00:22:07,899
the entire job you start off with some

590
00:22:05,770 --> 00:22:10,960
murky data set you get it into a clean

591
00:22:07,900 --> 00:22:12,430
format and you start labeling it and so

592
00:22:10,960 --> 00:22:15,730
for that I would introduce the concept

593
00:22:12,430 --> 00:22:17,500
of risk another problem I see with

594
00:22:15,730 --> 00:22:20,080
security teams is drowning under false

595
00:22:17,500 --> 00:22:21,880
positives it's a losing battle of

596
00:22:20,080 --> 00:22:23,620
constantly whitelisting anyone who's

597
00:22:21,880 --> 00:22:26,890
done security at a tech company in

598
00:22:23,620 --> 00:22:28,870
particular will note that developers and

599
00:22:26,890 --> 00:22:31,210
attackers do almost exactly the same

600
00:22:28,870 --> 00:22:32,830
things every single day their

601
00:22:31,210 --> 00:22:34,300
motivations are basically the only thing

602
00:22:32,830 --> 00:22:36,370
that differs you will have developers

603
00:22:34,300 --> 00:22:39,070
scanning your network you will have them

604
00:22:36,370 --> 00:22:41,260
basically doing pre vests all the time

605
00:22:39,070 --> 00:22:44,139
running Python running things you've

606
00:22:41,260 --> 00:22:46,000
never seen and so we don't want to have

607
00:22:44,140 --> 00:22:48,670
to constantly be chasing down developers

608
00:22:46,000 --> 00:22:51,370
doing their job instead we can start to

609
00:22:48,670 --> 00:22:53,530
model things in terms of a risk gradient

610
00:22:51,370 --> 00:22:55,810
I can say unique parent-child process

611
00:22:53,530 --> 00:22:57,250
that's a low risk event it's definitely

612
00:22:55,810 --> 00:22:59,710
something an attacker does I want to

613
00:22:57,250 --> 00:23:01,540
track that but it's nothing like that

614
00:22:59,710 --> 00:23:03,430
commonly targeted application one that's

615
00:23:01,540 --> 00:23:04,990
that's a much more finely tuned

616
00:23:03,430 --> 00:23:07,690
detection that I'll probably try to

617
00:23:04,990 --> 00:23:09,160
maintain a whitelist for so what we have

618
00:23:07,690 --> 00:23:11,410
here is what I would call local

619
00:23:09,160 --> 00:23:13,480
correlation these are tightly coupled

620
00:23:11,410 --> 00:23:15,190
attacks signatures but we want to take

621
00:23:13,480 --> 00:23:16,900
this labeled information and feed it

622
00:23:15,190 --> 00:23:18,460
into a model and that's not going to be

623
00:23:16,900 --> 00:23:21,010
a machine learning model it's just a way

624
00:23:18,460 --> 00:23:23,140
for us to view these risks together and

625
00:23:21,010 --> 00:23:25,870
get a sort of arbitrary level of

626
00:23:23,140 --> 00:23:27,640
correlation and so here I had reduced

627
00:23:25,870 --> 00:23:30,610
the concept of a lens this is actually

628
00:23:27,640 --> 00:23:33,100
inspired by a talk by for who's the the

629
00:23:30,610 --> 00:23:35,260
C slide over I gave a talk in 2012 where

630
00:23:33,100 --> 00:23:36,969
we talked about sort of an arbitrary

631
00:23:35,260 --> 00:23:39,190
correlation lens and so I really like

632
00:23:36,970 --> 00:23:40,480
that idea I built it into grapple and

633
00:23:39,190 --> 00:23:43,000
the idea is that you have these

634
00:23:40,480 --> 00:23:45,670
correlation points like an asset a

635
00:23:43,000 --> 00:23:48,160
user's laptop or their user name and

636
00:23:45,670 --> 00:23:51,190
through that lens you can view all of

637
00:23:48,160 --> 00:23:52,810
those other wise disjoint risks and now

638
00:23:51,190 --> 00:23:55,030
I don't have to write signatures like a

639
00:23:52,810 --> 00:23:56,860
unique process parent process

640
00:23:55,030 --> 00:23:58,030
relationship with a unique network

641
00:23:56,860 --> 00:24:00,699
connection I can write those

642
00:23:58,030 --> 00:24:03,160
individually view them through a risky

643
00:24:00,700 --> 00:24:06,280
lens like the asset and see that they

644
00:24:03,160 --> 00:24:07,990
overlap automatically and now we can

645
00:24:06,280 --> 00:24:10,090
build a risk score that takes all of

646
00:24:07,990 --> 00:24:11,800
this into account and risk and grapple

647
00:24:10,090 --> 00:24:13,929
is very simple there's no fancy

648
00:24:11,800 --> 00:24:14,620
statistics it will count all of the

649
00:24:13,930 --> 00:24:16,870
risky

650
00:24:14,620 --> 00:24:19,300
nodes and take the sum of their scores

651
00:24:16,870 --> 00:24:21,070
and for every node that has an

652
00:24:19,300 --> 00:24:23,020
overlapping risk right it's involved in

653
00:24:21,070 --> 00:24:25,600
more than one risk at a time we add an

654
00:24:23,020 --> 00:24:27,490
increasing percentage so 10% for the

655
00:24:25,600 --> 00:24:29,290
first node 20% for the second that sort

656
00:24:27,490 --> 00:24:31,660
of thing and what this is going to allow

657
00:24:29,290 --> 00:24:34,480
us to do is push things like you know

658
00:24:31,660 --> 00:24:36,220
silly anomaly is like a parent-child

659
00:24:34,480 --> 00:24:37,600
process that just happened to be unique

660
00:24:36,220 --> 00:24:39,670
but it's it's an update that just

661
00:24:37,600 --> 00:24:41,050
happened on a computer and those are

662
00:24:39,670 --> 00:24:43,300
gonna fade into the background and all

663
00:24:41,050 --> 00:24:48,580
of the risks that correlate together are

664
00:24:43,300 --> 00:24:49,720
gonna start lifting up a lot higher the

665
00:24:48,580 --> 00:24:53,139
way that these signatures are

666
00:24:49,720 --> 00:24:55,690
represented is in Python my experience

667
00:24:53,140 --> 00:24:58,120
with all of the various domain-specific

668
00:24:55,690 --> 00:25:01,090
query languages out there is that they

669
00:24:58,120 --> 00:25:03,280
were built for one specific purpose and

670
00:25:01,090 --> 00:25:05,709
as soon as you try to move away from

671
00:25:03,280 --> 00:25:07,600
that you start running into problems so

672
00:25:05,710 --> 00:25:09,520
a lot of the time they can do things in

673
00:25:07,600 --> 00:25:11,469
one or two blinds that's really really

674
00:25:09,520 --> 00:25:14,080
cool and powerful and then you want to

675
00:25:11,470 --> 00:25:15,550
do something like a join or you want to

676
00:25:14,080 --> 00:25:17,530
really do anything that it wasn't

677
00:25:15,550 --> 00:25:18,790
designed for and you're gonna start

678
00:25:17,530 --> 00:25:21,100
running into like huge performance

679
00:25:18,790 --> 00:25:25,750
barriers correctness problems you'll run

680
00:25:21,100 --> 00:25:27,100
into the query sizes exploding and that

681
00:25:25,750 --> 00:25:29,770
sort of thing so grapple just uses

682
00:25:27,100 --> 00:25:31,959
Python it's general-purpose Python is

683
00:25:29,770 --> 00:25:35,020
adopted by data science security

684
00:25:31,960 --> 00:25:36,760
communities I have confidence that if in

685
00:25:35,020 --> 00:25:38,800
five or ten years attackers start

686
00:25:36,760 --> 00:25:41,140
changing up their tactics while other

687
00:25:38,800 --> 00:25:42,909
query languages might start to falter

688
00:25:41,140 --> 00:25:45,120
Python is gonna be able to scale an

689
00:25:42,910 --> 00:25:49,320
ex-pro Civet e to whatever they're doing

690
00:25:45,120 --> 00:25:51,969
and so this is what a an analyzer in

691
00:25:49,320 --> 00:25:54,520
grapple looks like here we have that

692
00:25:51,970 --> 00:25:56,710
commonly targeted application this is a

693
00:25:54,520 --> 00:25:59,500
process query where we're saying it has

694
00:25:56,710 --> 00:26:01,540
one of these process names and any

695
00:25:59,500 --> 00:26:02,860
unconstraint child process we have no

696
00:26:01,540 --> 00:26:05,950
white listing on the child processes

697
00:26:02,860 --> 00:26:07,389
right now grapples gonna take that query

698
00:26:05,950 --> 00:26:09,010
it's gonna do client-side query

699
00:26:07,390 --> 00:26:10,510
optimization it's going to ensure it

700
00:26:09,010 --> 00:26:12,070
executes in constant time so it doesn't

701
00:26:10,510 --> 00:26:13,840
matter how much data you have these

702
00:26:12,070 --> 00:26:16,000
analyzers will always run in real-time

703
00:26:13,840 --> 00:26:18,370
in constant time they'll be batched up

704
00:26:16,000 --> 00:26:20,350
paralyzed there's a ton of work to make

705
00:26:18,370 --> 00:26:23,169
sure that you don't have really painful

706
00:26:20,350 --> 00:26:24,939
operations work to deal with and if this

707
00:26:23,170 --> 00:26:27,760
signature ever hits that on response

708
00:26:24,940 --> 00:26:28,460
method gets called next the on response

709
00:26:27,760 --> 00:26:30,110
method can do

710
00:26:28,460 --> 00:26:32,420
things like Khan texting as I'll show in

711
00:26:30,110 --> 00:26:33,830
a minute or subsequent alert logic but

712
00:26:32,420 --> 00:26:36,470
really it's just going to label the data

713
00:26:33,830 --> 00:26:40,250
with some kind of a risk and and a name

714
00:26:36,470 --> 00:26:42,560
I think where Python starts to really

715
00:26:40,250 --> 00:26:43,970
show some power is when we want to do

716
00:26:42,560 --> 00:26:47,120
things that are a little more out there

717
00:26:43,970 --> 00:26:49,310
like it sound silly but counting

718
00:26:47,120 --> 00:26:52,310
efficiently is not something that I've

719
00:26:49,310 --> 00:26:54,940
seen a lot of existing systems do very

720
00:26:52,310 --> 00:26:57,500
well here we're leveraging a

721
00:26:54,940 --> 00:26:59,090
parent/child counter abstraction and

722
00:26:57,500 --> 00:27:01,040
this provides a specialized interface it

723
00:26:59,090 --> 00:27:02,300
hides things like caching the vast

724
00:27:01,040 --> 00:27:04,250
majority of the time this isn't even

725
00:27:02,300 --> 00:27:05,780
going to hit our data Lake so it's gonna

726
00:27:04,250 --> 00:27:08,480
stay really nice and efficient this

727
00:27:05,780 --> 00:27:11,870
signature here is looking for living off

728
00:27:08,480 --> 00:27:15,260
the land type attacks so processes with

729
00:27:11,870 --> 00:27:19,340
parent processes where the process

730
00:27:15,260 --> 00:27:21,140
binary is in system 32 or 64 we're going

731
00:27:19,340 --> 00:27:23,000
to look for any execution of processes

732
00:27:21,140 --> 00:27:25,640
that match that will use our Parent

733
00:27:23,000 --> 00:27:28,640
Child counter abstraction to say has

734
00:27:25,640 --> 00:27:30,440
this happened a few times or less and if

735
00:27:28,640 --> 00:27:35,540
it has that's going to be something that

736
00:27:30,440 --> 00:27:37,130
we want to track I think probably the

737
00:27:35,540 --> 00:27:39,440
best part about using a standard tool

738
00:27:37,130 --> 00:27:42,350
like Python is that you get to follow

739
00:27:39,440 --> 00:27:45,170
standard practices if you were to Google

740
00:27:42,350 --> 00:27:47,419
your Simms name with unit tests you

741
00:27:45,170 --> 00:27:48,890
would probably not find great results if

742
00:27:47,420 --> 00:27:50,390
you found any they would probably tell

743
00:27:48,890 --> 00:27:51,770
you that it's just not supported at

744
00:27:50,390 --> 00:27:54,530
least that is what I have repeatedly

745
00:27:51,770 --> 00:27:56,150
found you contrast that with Python

746
00:27:54,530 --> 00:27:57,290
there's a number of tools for making

747
00:27:56,150 --> 00:27:59,600
Python correct

748
00:27:57,290 --> 00:28:01,280
there's linters for style you can put it

749
00:27:59,600 --> 00:28:04,370
into code review and store it in github

750
00:28:01,280 --> 00:28:06,220
you can get that on github you can run

751
00:28:04,370 --> 00:28:08,840
things like my pie so grapple is

752
00:28:06,220 --> 00:28:11,630
statically typed so you can avoid errors

753
00:28:08,840 --> 00:28:13,399
before it ever runs and most importantly

754
00:28:11,630 --> 00:28:16,460
you can just import the unit test

755
00:28:13,400 --> 00:28:18,260
library from the standard Lib and write

756
00:28:16,460 --> 00:28:20,000
unit tests for your alerts so when

757
00:28:18,260 --> 00:28:21,530
you're whitelisting or you're tuning

758
00:28:20,000 --> 00:28:23,360
over the next couple of years when the

759
00:28:21,530 --> 00:28:25,070
people who wrote the alert are no longer

760
00:28:23,360 --> 00:28:27,979
there and someone else is maintaining it

761
00:28:25,070 --> 00:28:29,780
they can be confident that their alerts

762
00:28:27,980 --> 00:28:32,270
and their detections are still working

763
00:28:29,780 --> 00:28:34,700
properly I see this as a really

764
00:28:32,270 --> 00:28:37,460
significant problem at a number of

765
00:28:34,700 --> 00:28:39,950
companies they have hundreds I've

766
00:28:37,460 --> 00:28:41,480
actually seen thousands of individual

767
00:28:39,950 --> 00:28:42,200
detection x' and they don't actually

768
00:28:41,480 --> 00:28:46,400
have a

769
00:28:42,200 --> 00:28:49,130
way of determining that those work they

770
00:28:46,400 --> 00:28:51,560
might have some end to end like attack

771
00:28:49,130 --> 00:28:53,930
system that were tries to test the

772
00:28:51,560 --> 00:28:55,850
entire pipeline but like coming from a

773
00:28:53,930 --> 00:28:57,350
vendor we just wrote unit tests and so I

774
00:28:55,850 --> 00:28:59,030
wanted to kind of give that capability

775
00:28:57,350 --> 00:29:04,520
to the average security team

776
00:28:59,030 --> 00:29:07,340
I think investigations are probably

777
00:29:04,520 --> 00:29:09,860
where log based systems really start to

778
00:29:07,340 --> 00:29:11,959
fall apart to the point where attackers

779
00:29:09,860 --> 00:29:14,169
take advantage of it

780
00:29:11,960 --> 00:29:16,910
and so I'm gonna do sort of a strawman

781
00:29:14,170 --> 00:29:18,860
investigation of an attack using a log

782
00:29:16,910 --> 00:29:21,350
based system so as the incident

783
00:29:18,860 --> 00:29:23,510
responder I come into work I've got an

784
00:29:21,350 --> 00:29:26,120
alert and there's some process execution

785
00:29:23,510 --> 00:29:27,560
log and it it went off because some

786
00:29:26,120 --> 00:29:29,750
threat intelligence feed has told me

787
00:29:27,560 --> 00:29:31,370
that the hash is evil for whatever

788
00:29:29,750 --> 00:29:33,920
reason it doesn't give me much other

789
00:29:31,370 --> 00:29:35,750
information so in an in a situation like

790
00:29:33,920 --> 00:29:38,450
this there's usually two things that I

791
00:29:35,750 --> 00:29:41,480
want to do first I want to just quickly

792
00:29:38,450 --> 00:29:42,920
see what has this process done I'm not

793
00:29:41,480 --> 00:29:44,000
gonna do like a fully scoped thing

794
00:29:42,920 --> 00:29:46,430
that's something that I'd bring the rest

795
00:29:44,000 --> 00:29:47,540
of the team in for so I'll just see what

796
00:29:46,430 --> 00:29:48,890
it's done and I'm gonna trace it

797
00:29:47,540 --> 00:29:51,260
backwards and try to find where this

798
00:29:48,890 --> 00:29:53,300
thing came from so we'll open up a

799
00:29:51,260 --> 00:29:55,010
search window probably like four or

800
00:29:53,300 --> 00:29:56,210
eight hours depending on when this thing

801
00:29:55,010 --> 00:29:59,210
happened I'm gonna look at like the last

802
00:29:56,210 --> 00:30:00,560
business day or so and I'm gonna start

803
00:29:59,210 --> 00:30:02,150
pivoting right I want to take

804
00:30:00,560 --> 00:30:05,149
information that I have and I want to

805
00:30:02,150 --> 00:30:06,530
gain new context new data so I'll search

806
00:30:05,150 --> 00:30:08,390
for the pigs I want to see what this

807
00:30:06,530 --> 00:30:10,340
process has done and I get all these

808
00:30:08,390 --> 00:30:11,510
logs back right and and some of them are

809
00:30:10,340 --> 00:30:13,070
interesting and some of them tell me

810
00:30:11,510 --> 00:30:15,530
that this thing may be shelled out a

811
00:30:13,070 --> 00:30:16,820
couple of times and this is notable

812
00:30:15,530 --> 00:30:19,670
enough that I'm not immediately

813
00:30:16,820 --> 00:30:22,100
discounting this as being benign someone

814
00:30:19,670 --> 00:30:24,560
to start tracing it backwards and I'll

815
00:30:22,100 --> 00:30:26,719
search for that parent process ID and

816
00:30:24,560 --> 00:30:28,429
what I get back is a ton of logs because

817
00:30:26,720 --> 00:30:31,430
the parent process it turns out was

818
00:30:28,430 --> 00:30:33,170
something like cron or launch D or

819
00:30:31,430 --> 00:30:35,000
schedule task manager right what this

820
00:30:33,170 --> 00:30:36,980
tells me is that the attacker has

821
00:30:35,000 --> 00:30:39,620
probably been on this asset for weeks or

822
00:30:36,980 --> 00:30:43,310
months and they scheduled their final

823
00:30:39,620 --> 00:30:45,290
payload to execute in the future because

824
00:30:43,310 --> 00:30:46,909
of this exact workflow they know that

825
00:30:45,290 --> 00:30:49,370
this is going to really mess with me and

826
00:30:46,910 --> 00:30:51,290
so that's why they do attacks like that

827
00:30:49,370 --> 00:30:53,209
they know that the data that I'm looking

828
00:30:51,290 --> 00:30:55,909
at is going to be severely disconnected

829
00:30:53,210 --> 00:30:56,930
in terms of time from the data that

830
00:30:55,910 --> 00:30:59,420
is gonna tell me where this attacker

831
00:30:56,930 --> 00:31:00,530
actually started off so at this point

832
00:30:59,420 --> 00:31:02,960
I've hit kind of a dead end with

833
00:31:00,530 --> 00:31:04,460
processes so I have to pivot off of

834
00:31:02,960 --> 00:31:05,960
things like the hash or the filename I

835
00:31:04,460 --> 00:31:07,640
want to see where this payload was

836
00:31:05,960 --> 00:31:09,290
actually created I don't get anything

837
00:31:07,640 --> 00:31:10,850
for the hash and I don't get anything

838
00:31:09,290 --> 00:31:13,760
for the file right clearly an attacker

839
00:31:10,850 --> 00:31:15,889
is outside of my search window I really

840
00:31:13,760 --> 00:31:17,810
only have one choice at this point I'm

841
00:31:15,890 --> 00:31:20,330
gonna extend my search window out and

842
00:31:17,810 --> 00:31:22,129
this might be days if I'm lucky

843
00:31:20,330 --> 00:31:23,990
more likely weeks and if I'm really

844
00:31:22,130 --> 00:31:27,890
unlucky they've been here for a couple

845
00:31:23,990 --> 00:31:29,690
of months this is starting to give me

846
00:31:27,890 --> 00:31:32,540
the results I want right I'm getting the

847
00:31:29,690 --> 00:31:35,210
image name creation maybe but I'm paying

848
00:31:32,540 --> 00:31:37,159
really serious prices here for one thing

849
00:31:35,210 --> 00:31:39,500
if I've extended my search window from

850
00:31:37,160 --> 00:31:40,970
four hours to a month every single

851
00:31:39,500 --> 00:31:43,130
search from this point forward is going

852
00:31:40,970 --> 00:31:45,080
to be hundreds of times slower I could

853
00:31:43,130 --> 00:31:46,940
try to play the game of managing a whole

854
00:31:45,080 --> 00:31:49,790
bunch of different search windows in

855
00:31:46,940 --> 00:31:51,620
like 10 different tabs but there's just

856
00:31:49,790 --> 00:31:54,770
no winning with a with a system like

857
00:31:51,620 --> 00:31:55,939
this what's worse to me is that I'm

858
00:31:54,770 --> 00:31:57,860
probably gonna start running into fib

859
00:31:55,940 --> 00:31:59,810
collisions so maybe you're lucky and

860
00:31:57,860 --> 00:32:01,280
your entire investigation can be done

861
00:31:59,810 --> 00:32:02,870
with something like sis MA and using

862
00:32:01,280 --> 00:32:04,850
process codes that's never been my

863
00:32:02,870 --> 00:32:06,530
experience even on Windows systems I end

864
00:32:04,850 --> 00:32:08,360
up looking at the event log I end up

865
00:32:06,530 --> 00:32:10,730
looking at something that has a pid'

866
00:32:08,360 --> 00:32:12,199
without a process go ahead and pit

867
00:32:10,730 --> 00:32:15,910
collisions will happen over this period

868
00:32:12,200 --> 00:32:18,530
of time for a client laptop running any

869
00:32:15,910 --> 00:32:20,990
multi-process architecture program like

870
00:32:18,530 --> 00:32:23,360
Chrome or Firefox or all sorts of things

871
00:32:20,990 --> 00:32:26,030
at this point users are gonna reuse pids

872
00:32:23,360 --> 00:32:27,800
a number of times in a day so when we're

873
00:32:26,030 --> 00:32:29,690
talking about weeks or months I will

874
00:32:27,800 --> 00:32:31,280
have many paid collisions to resolve and

875
00:32:29,690 --> 00:32:33,050
that's that's gonna suck for me it's

876
00:32:31,280 --> 00:32:35,110
gonna really slow things down especially

877
00:32:33,050 --> 00:32:37,399
coupled with those slower search times a

878
00:32:35,110 --> 00:32:40,219
third problem that's a little harder to

879
00:32:37,400 --> 00:32:42,170
see is that the fundamental thing I'm

880
00:32:40,220 --> 00:32:44,330
trying to do here is pivot off of my

881
00:32:42,170 --> 00:32:46,370
data but I don't really have clear

882
00:32:44,330 --> 00:32:47,960
questions I'm sort of just doing like

883
00:32:46,370 --> 00:32:50,030
raw text searches for whatever

884
00:32:47,960 --> 00:32:51,980
information I have and I could try to

885
00:32:50,030 --> 00:32:54,800
constrain those by searching specific

886
00:32:51,980 --> 00:32:56,150
fields but it's it's just very murky in

887
00:32:54,800 --> 00:33:00,770
terms of what I'm looking for and what

888
00:32:56,150 --> 00:33:03,050
I'm getting back so grapple takes a

889
00:33:00,770 --> 00:33:05,660
really drastically different approach

890
00:33:03,050 --> 00:33:07,639
and at the heart of this approach is the

891
00:33:05,660 --> 00:33:09,490
Jupiter notebook so this is again me

892
00:33:07,640 --> 00:33:10,570
stealing ideas from the data

893
00:33:09,490 --> 00:33:12,940
it's community because they've been

894
00:33:10,570 --> 00:33:14,470
doing this sort of work for years and it

895
00:33:12,940 --> 00:33:16,840
seems really silly that we wouldn't like

896
00:33:14,470 --> 00:33:18,790
look at what the experts in data

897
00:33:16,840 --> 00:33:20,800
analysis are doing right that's that's a

898
00:33:18,790 --> 00:33:22,030
huge part of this job and what they're

899
00:33:20,800 --> 00:33:23,760
doing is they're using Jupiter notebooks

900
00:33:22,030 --> 00:33:26,290
these are these sort of super powered

901
00:33:23,760 --> 00:33:28,960
Python environments so if you've ever

902
00:33:26,290 --> 00:33:31,030
opened your terminal and typed in Python

903
00:33:28,960 --> 00:33:32,679
you may have started writing code and it

904
00:33:31,030 --> 00:33:34,210
gives you some immediate feedback right

905
00:33:32,679 --> 00:33:36,309
these are a lot like that but you can

906
00:33:34,210 --> 00:33:38,470
organize your code into cells replay

907
00:33:36,309 --> 00:33:39,879
them modify them you can also do things

908
00:33:38,470 --> 00:33:42,160
like shell out to the command line

909
00:33:39,880 --> 00:33:44,860
really easily you can embed images

910
00:33:42,160 --> 00:33:47,170
markdown and these are sort of the tool

911
00:33:44,860 --> 00:33:49,510
to trade at this point for investigating

912
00:33:47,170 --> 00:33:50,950
large amounts of data we're starting to

913
00:33:49,510 --> 00:33:52,780
see Jupiter notebooks and security a

914
00:33:50,950 --> 00:33:55,120
little more so I believe as your

915
00:33:52,780 --> 00:33:56,290
Sentinel is like pushing notebooks as

916
00:33:55,120 --> 00:33:58,120
how they want people to do

917
00:33:56,290 --> 00:34:00,210
investigations so it's definitely

918
00:33:58,120 --> 00:34:04,209
gaining traction as an idea

919
00:34:00,210 --> 00:34:06,460
so I mentioned those lenses earlier so

920
00:34:04,210 --> 00:34:09,460
as the incident responder looking at

921
00:34:06,460 --> 00:34:11,710
your grapple homepage you'll see a list

922
00:34:09,460 --> 00:34:13,600
of lenses right these are gonna be your

923
00:34:11,710 --> 00:34:15,850
correlation points so different assets

924
00:34:13,600 --> 00:34:17,739
or usernames we're just gonna see which

925
00:34:15,850 --> 00:34:19,239
one is riskiest and I don't have to

926
00:34:17,739 --> 00:34:20,979
worry about like having a thousand false

927
00:34:19,239 --> 00:34:22,989
positives I have a set number of hours

928
00:34:20,980 --> 00:34:24,369
in the day that I can put towards

929
00:34:22,989 --> 00:34:26,469
incident response and I'm just gonna

930
00:34:24,369 --> 00:34:28,659
apply that to lowering the risk as much

931
00:34:26,469 --> 00:34:30,279
as I can right and I think this kind of

932
00:34:28,659 --> 00:34:33,580
goes towards fleas talk a little bit as

933
00:34:30,280 --> 00:34:35,020
well you don't want to be like spending

934
00:34:33,580 --> 00:34:36,969
all of your time gatekeeping and like

935
00:34:35,020 --> 00:34:38,469
hammering things down you want to just

936
00:34:36,969 --> 00:34:40,029
sort of manage risk you want to move

937
00:34:38,469 --> 00:34:41,678
towards a risk management approach

938
00:34:40,030 --> 00:34:44,679
otherwise you're gonna burn out your on

939
00:34:41,679 --> 00:34:47,710
call so if we click on one of these

940
00:34:44,679 --> 00:34:50,619
lenses we get a graph this is going to

941
00:34:47,710 --> 00:34:52,990
in this case contain three nodes with

942
00:34:50,619 --> 00:34:54,609
some relationships between them we can

943
00:34:52,989 --> 00:34:57,100
click on any of these nodes and we can

944
00:34:54,609 --> 00:34:58,930
see any of the properties for things

945
00:34:57,100 --> 00:35:00,700
like these processes or files or

946
00:34:58,930 --> 00:35:03,790
anything that's in here this is a pretty

947
00:35:00,700 --> 00:35:06,368
data rich graph this may have taken in

948
00:35:03,790 --> 00:35:08,500
this case probably tens of logs so

949
00:35:06,369 --> 00:35:10,570
probably like more than a browser screen

950
00:35:08,500 --> 00:35:12,460
worth of logs but because we can

951
00:35:10,570 --> 00:35:15,790
coalesce all of that data with that

952
00:35:12,460 --> 00:35:19,030
identity we can create a very like dense

953
00:35:15,790 --> 00:35:21,369
and compact representation if we click

954
00:35:19,030 --> 00:35:22,970
on the command dot exe here you can see

955
00:35:21,369 --> 00:35:24,859
that the analyzers involved

956
00:35:22,970 --> 00:35:26,629
our that we've never seen anything

957
00:35:24,859 --> 00:35:28,279
called dropper execute command dot exe

958
00:35:26,630 --> 00:35:30,170
before so there's a signature and

959
00:35:28,280 --> 00:35:32,420
grapple that just looks for unique

960
00:35:30,170 --> 00:35:33,950
parents of command dot exe right that's

961
00:35:32,420 --> 00:35:35,990
a pretty fundamental thing that

962
00:35:33,950 --> 00:35:38,149
attackers do they shell out anytime

963
00:35:35,990 --> 00:35:39,680
you're in Python or another language and

964
00:35:38,150 --> 00:35:41,480
you try to P open it's gonna go through

965
00:35:39,680 --> 00:35:43,279
a shell and then we have a much more

966
00:35:41,480 --> 00:35:45,980
constrained signature which is that we

967
00:35:43,280 --> 00:35:47,390
maintain a white list of valid SVC hosts

968
00:35:45,980 --> 00:35:50,180
attackers like to pretend to be

969
00:35:47,390 --> 00:35:53,060
legitimate services like SVC host and so

970
00:35:50,180 --> 00:35:54,919
we're just gonna track that sort of

971
00:35:53,060 --> 00:35:56,720
thing and thanks to the lens these

972
00:35:54,920 --> 00:36:01,160
automatically overlap and we get this

973
00:35:56,720 --> 00:36:02,899
cumulative risk score so in my Jupiter

974
00:36:01,160 --> 00:36:04,759
notebook I'm gonna create an engagement

975
00:36:02,900 --> 00:36:07,130
engagements are like a special type of

976
00:36:04,760 --> 00:36:09,650
lens where you control what nodes are

977
00:36:07,130 --> 00:36:11,540
brought into it and I'm gonna pull in

978
00:36:09,650 --> 00:36:13,010
that first node I'll pull in the SVC

979
00:36:11,540 --> 00:36:15,890
host right and I'm just gonna pull it in

980
00:36:13,010 --> 00:36:17,300
by its identity and this is in the

981
00:36:15,890 --> 00:36:19,160
Jupiter notebook so you would probably

982
00:36:17,300 --> 00:36:21,260
have like two browser panes or even two

983
00:36:19,160 --> 00:36:23,868
monitors one with a jupiter notebook and

984
00:36:21,260 --> 00:36:28,130
one with your live updating graph

985
00:36:23,869 --> 00:36:30,170
visualization at this point pivoting is

986
00:36:28,130 --> 00:36:31,849
really efficient and really simple I

987
00:36:30,170 --> 00:36:33,710
don't have murky questions I want to ask

988
00:36:31,849 --> 00:36:35,720
what this process did so the first thing

989
00:36:33,710 --> 00:36:38,210
I'm gonna say is what children processes

990
00:36:35,720 --> 00:36:40,189
were executed from it this is extremely

991
00:36:38,210 --> 00:36:41,960
efficient there's no search windows to

992
00:36:40,190 --> 00:36:44,660
deal with it doesn't matter if these two

993
00:36:41,960 --> 00:36:46,609
processes occurred across wildly

994
00:36:44,660 --> 00:36:48,799
different timelines this could be months

995
00:36:46,609 --> 00:36:49,940
apart it's gonna be a constant time

996
00:36:48,800 --> 00:36:52,730
expression it's gonna pull it in a

997
00:36:49,940 --> 00:36:54,890
millisecond so I say get children or or

998
00:36:52,730 --> 00:36:57,050
get the parent process in this case to

999
00:36:54,890 --> 00:37:00,859
start expanding it out and that pivoting

1000
00:36:57,050 --> 00:37:03,080
is nice and efficient and clear so to

1001
00:37:00,859 --> 00:37:05,900
sort of replay a similar situation as

1002
00:37:03,080 --> 00:37:08,390
before we would start off with our

1003
00:37:05,900 --> 00:37:11,030
jupiter notebook we have this sort of

1004
00:37:08,390 --> 00:37:13,730
route of our investigation right that's

1005
00:37:11,030 --> 00:37:15,440
our SVC host and we're gonna just do our

1006
00:37:13,730 --> 00:37:17,540
pivoting behavior right i want to find

1007
00:37:15,440 --> 00:37:19,670
out what is this process done i say get

1008
00:37:17,540 --> 00:37:20,990
the children processes immediately

1009
00:37:19,670 --> 00:37:22,849
that's gonna show up in that graph

1010
00:37:20,990 --> 00:37:24,919
visualization on the left as i'll i'll

1011
00:37:22,849 --> 00:37:26,300
show you and it's also gonna let me

1012
00:37:24,920 --> 00:37:28,849
display and play with the information in

1013
00:37:26,300 --> 00:37:30,500
the notebook itself so i know this thing

1014
00:37:28,849 --> 00:37:32,119
is it's probably not great it's shelled

1015
00:37:30,500 --> 00:37:34,160
out three times that's pretty sketchy

1016
00:37:32,119 --> 00:37:36,260
I'll do that pivoting behavior again I'm

1017
00:37:34,160 --> 00:37:38,720
going to climb backwards

1018
00:37:36,260 --> 00:37:40,730
up the process lineage right really

1019
00:37:38,720 --> 00:37:43,520
simple really efficient we can see that

1020
00:37:40,730 --> 00:37:46,160
there's a dropper dot exe we can see

1021
00:37:43,520 --> 00:37:48,080
that there's this chrome bxe so this is

1022
00:37:46,160 --> 00:37:49,730
telling a really really simple story

1023
00:37:48,080 --> 00:37:52,009
right a user was probably fished through

1024
00:37:49,730 --> 00:37:54,740
Chrome they executed something called

1025
00:37:52,010 --> 00:37:56,150
dropper that dropper if we were to

1026
00:37:54,740 --> 00:37:59,120
expand this out further reached out to

1027
00:37:56,150 --> 00:38:00,680
s3 pulled it down and all of these logs

1028
00:37:59,120 --> 00:38:02,270
are available for you guys as I'll talk

1029
00:38:00,680 --> 00:38:04,149
about later and we're gonna have this

1030
00:38:02,270 --> 00:38:06,770
graph that looks something like this

1031
00:38:04,150 --> 00:38:10,580
now this graph again is going to contain

1032
00:38:06,770 --> 00:38:14,240
probably tens maybe low hundreds of logs

1033
00:38:10,580 --> 00:38:16,819
worth of data this amount of data would

1034
00:38:14,240 --> 00:38:20,029
probably take up multiple pages and your

1035
00:38:16,820 --> 00:38:22,280
sim to go through but here we have a

1036
00:38:20,030 --> 00:38:24,140
really nice compact representation so

1037
00:38:22,280 --> 00:38:26,270
you end up with a workflow that looks a

1038
00:38:24,140 --> 00:38:28,580
lot like this at the end of any

1039
00:38:26,270 --> 00:38:30,980
investigation you will have two really

1040
00:38:28,580 --> 00:38:33,110
powerful artifacts you're going to have

1041
00:38:30,980 --> 00:38:34,940
on the one hand a graph visualization

1042
00:38:33,110 --> 00:38:36,650
this is going to be really great for

1043
00:38:34,940 --> 00:38:38,840
showing teams that don't want to pour

1044
00:38:36,650 --> 00:38:40,220
through thousands of logs you probably

1045
00:38:38,840 --> 00:38:41,720
want to interact with other security

1046
00:38:40,220 --> 00:38:43,520
teams you might want to show an

1047
00:38:41,720 --> 00:38:45,169
executive or a manager depending on

1048
00:38:43,520 --> 00:38:47,180
what's going on they're not gonna want

1049
00:38:45,170 --> 00:38:49,460
to look at logs graphs are nice they're

1050
00:38:47,180 --> 00:38:51,980
compact they're visual and even like a

1051
00:38:49,460 --> 00:38:55,670
big attack across your environment isn't

1052
00:38:51,980 --> 00:38:58,250
gonna be like too unruly of a graph to

1053
00:38:55,670 --> 00:39:01,340
visualize the other thing that we have

1054
00:38:58,250 --> 00:39:03,320
is our investigation and it's encode the

1055
00:39:01,340 --> 00:39:05,570
fact that it's in code opens up tons of

1056
00:39:03,320 --> 00:39:07,540
potential the obvious one is that we can

1057
00:39:05,570 --> 00:39:10,730
replay it right so if another

1058
00:39:07,540 --> 00:39:12,590
investigation is taking place and it's a

1059
00:39:10,730 --> 00:39:14,210
you know a very similar situation to

1060
00:39:12,590 --> 00:39:15,620
this where we want to take a look at the

1061
00:39:14,210 --> 00:39:17,930
children processes and then trace it

1062
00:39:15,620 --> 00:39:19,880
backwards we could move that to a

1063
00:39:17,930 --> 00:39:21,290
function we could just replay it in line

1064
00:39:19,880 --> 00:39:23,800
the idea here is you should be

1065
00:39:21,290 --> 00:39:27,770
accelerating as you investigate so one

1066
00:39:23,800 --> 00:39:29,270
investigation should feed into the next

1067
00:39:27,770 --> 00:39:31,820
one right you should be getting faster

1068
00:39:29,270 --> 00:39:33,650
and faster every single time this could

1069
00:39:31,820 --> 00:39:35,570
also be training material or run books

1070
00:39:33,650 --> 00:39:39,740
so you have a new person coming into

1071
00:39:35,570 --> 00:39:42,320
your your team maybe you had a red team

1072
00:39:39,740 --> 00:39:44,029
recently go ahead and like start a new

1073
00:39:42,320 --> 00:39:46,490
engagement have them play through your

1074
00:39:44,030 --> 00:39:48,880
last notebook step by step and explore

1075
00:39:46,490 --> 00:39:48,879
that data

1076
00:39:49,200 --> 00:39:52,560
Apple has a plug-in system and I've

1077
00:39:50,670 --> 00:39:53,520
managed to apply grapple to a lot of

1078
00:39:52,560 --> 00:39:54,900
different problems

1079
00:39:53,520 --> 00:39:57,060
and in ways that I don't think I ever

1080
00:39:54,900 --> 00:39:59,220
would have even tried after being burned

1081
00:39:57,060 --> 00:40:01,799
before and taking clusters down and that

1082
00:39:59,220 --> 00:40:02,790
sort of thing with other systems so here

1083
00:40:01,800 --> 00:40:04,710
you can see an inter process

1084
00:40:02,790 --> 00:40:07,079
communication node which is implemented

1085
00:40:04,710 --> 00:40:09,810
as a plugin and this allows me to detect

1086
00:40:07,079 --> 00:40:12,810
things like SSH hijacking where a

1087
00:40:09,810 --> 00:40:15,900
process is performing IPC to an SSH

1088
00:40:12,810 --> 00:40:18,328
agent or SSH daemon we can do process

1089
00:40:15,900 --> 00:40:21,450
tree analysis so unique parent unique

1090
00:40:18,329 --> 00:40:23,730
grandparent processes again this is

1091
00:40:21,450 --> 00:40:28,020
applied to SSH we can think see like a

1092
00:40:23,730 --> 00:40:29,730
Python process shelled out to SSH the

1093
00:40:28,020 --> 00:40:31,470
nice thing with grapple is that it's

1094
00:40:29,730 --> 00:40:32,730
going to stack unique parents and unique

1095
00:40:31,470 --> 00:40:35,129
grandparents automatically in those

1096
00:40:32,730 --> 00:40:36,720
lenses right so that correlation ends up

1097
00:40:35,130 --> 00:40:40,109
building up really really quickly the

1098
00:40:36,720 --> 00:40:42,720
more unique your process tree is you can

1099
00:40:40,109 --> 00:40:44,310
build recursive queries which I don't

1100
00:40:42,720 --> 00:40:45,868
actually think other systems even

1101
00:40:44,310 --> 00:40:48,839
support but if they did I think it would

1102
00:40:45,869 --> 00:40:51,420
be extremely slow but in Grandpa we can

1103
00:40:48,839 --> 00:40:53,490
ask questions like given a process trace

1104
00:40:51,420 --> 00:40:56,400
that process tree backwards and if we

1105
00:40:53,490 --> 00:40:58,290
see a user ID change in that process

1106
00:40:56,400 --> 00:40:59,910
tree we're gonna call that a privilege

1107
00:40:58,290 --> 00:41:01,770
escalation right so a simple case of

1108
00:40:59,910 --> 00:41:04,348
this would be calling pseudo and

1109
00:41:01,770 --> 00:41:05,819
changing users but if an attacker had

1110
00:41:04,349 --> 00:41:08,520
some sort of an exploit where they were

1111
00:41:05,819 --> 00:41:10,500
able to prove esque and spawn a child

1112
00:41:08,520 --> 00:41:13,950
process as long as that relationship is

1113
00:41:10,500 --> 00:41:15,690
there we would be able to catch that so

1114
00:41:13,950 --> 00:41:17,490
I'm gonna really quickly go over how to

1115
00:41:15,690 --> 00:41:19,470
set grapple up it's designed to be

1116
00:41:17,490 --> 00:41:21,240
really simple so you can clone the

1117
00:41:19,470 --> 00:41:23,910
repository crapples open source it's

1118
00:41:21,240 --> 00:41:26,250
free to use you pull it down go to the

1119
00:41:23,910 --> 00:41:29,310
grapple cdk folder you have to fill out

1120
00:41:26,250 --> 00:41:31,109
a dot env file with just a bucket prefix

1121
00:41:29,310 --> 00:41:34,049
in organ amiss probably a good idea

1122
00:41:31,109 --> 00:41:36,119
something unique and run the deploy all

1123
00:41:34,050 --> 00:41:37,440
script and that's really it at this

1124
00:41:36,119 --> 00:41:39,089
point it's gonna set up all of the

1125
00:41:37,440 --> 00:41:40,530
infrastructure for you there's really

1126
00:41:39,089 --> 00:41:43,619
only one more step and it's pretty

1127
00:41:40,530 --> 00:41:45,810
simple go to the AWS console go to the

1128
00:41:43,619 --> 00:41:47,700
sage maker notebook section grapple will

1129
00:41:45,810 --> 00:41:50,640
have already created a notebook for you

1130
00:41:47,700 --> 00:41:53,069
so you can just open that up upload or

1131
00:41:50,640 --> 00:41:54,779
use the grapple provision notebook and

1132
00:41:53,069 --> 00:41:56,369
just hit the play button and it's gonna

1133
00:41:54,780 --> 00:42:00,240
set up the database schemas it's going

1134
00:41:56,369 --> 00:42:01,710
to set up a user for you and you're good

1135
00:42:00,240 --> 00:42:02,759
to go at this point you can send up the

1136
00:42:01,710 --> 00:42:05,760
demo data it's in

1137
00:42:02,760 --> 00:42:07,860
the repo as well and that's that's

1138
00:42:05,760 --> 00:42:10,230
really it so I'm working full-time on

1139
00:42:07,860 --> 00:42:12,240
this now grapples open source I'm

1140
00:42:10,230 --> 00:42:14,400
certainly curious to hear any feedback

1141
00:42:12,240 --> 00:42:15,919
that people have there's a slack channel

1142
00:42:14,400 --> 00:42:20,450
or you can just hit me up on Twitter

1143
00:42:15,920 --> 00:42:20,450
always happy to hear feedback about it

1144
00:42:25,450 --> 00:42:37,540
we got a couple minutes for your

1145
00:42:27,250 --> 00:42:39,820
questions cool so I went over here yes I

1146
00:42:37,540 --> 00:42:42,339
don't think I could probably say a lot

1147
00:42:39,820 --> 00:42:44,920
more but yeah there's there's definitely

1148
00:42:42,339 --> 00:42:46,240
interest from everyone has these

1149
00:42:44,920 --> 00:42:48,579
problems vendors have these problems

1150
00:42:46,240 --> 00:42:51,009
security teams have these problems lots

1151
00:42:48,579 --> 00:42:53,500
of vendors are drowning under their data

1152
00:42:51,010 --> 00:42:55,630
the same exact way that security teams

1153
00:42:53,500 --> 00:43:11,740
are and there there's definitely

1154
00:42:55,630 --> 00:43:12,790
interest there yeah yeah so with the

1155
00:43:11,740 --> 00:43:15,250
right instrumentation we could

1156
00:43:12,790 --> 00:43:17,589
definitely trace it if the data is not

1157
00:43:15,250 --> 00:43:19,210
being provided to grapple then you might

1158
00:43:17,589 --> 00:43:20,859
have to do like a little work to say

1159
00:43:19,210 --> 00:43:22,720
like show me all of the possible places

1160
00:43:20,859 --> 00:43:26,589
where the cron may have been set or

1161
00:43:22,720 --> 00:43:27,669
where that may have come from but the

1162
00:43:26,589 --> 00:43:28,869
nice thing is that if you just fit that

1163
00:43:27,670 --> 00:43:30,339
instrumentation there you'll

1164
00:43:28,869 --> 00:43:32,530
automatically get that right you don't

1165
00:43:30,339 --> 00:43:36,130
have to do any manual work it'll just

1166
00:43:32,530 --> 00:43:38,250
sort of be there yeah question over

1167
00:43:36,130 --> 00:43:38,250
there

1168
00:43:44,810 --> 00:43:52,590
yeah so there's two what's that

1169
00:43:49,500 --> 00:43:54,600
oh sure so the question was I showed a

1170
00:43:52,590 --> 00:43:57,060
lot of like Windows stuff what other

1171
00:43:54,600 --> 00:44:00,750
data sources does grapples support I

1172
00:43:57,060 --> 00:44:03,540
think that's like a yeah so right now

1173
00:44:00,750 --> 00:44:05,460
grapple the the version that's in the

1174
00:44:03,540 --> 00:44:07,050
repo supports two data formats one is

1175
00:44:05,460 --> 00:44:08,760
sis Mon so don't just natively work with

1176
00:44:07,050 --> 00:44:11,250
system on the other is just a generic

1177
00:44:08,760 --> 00:44:13,320
JSON format so if you can map your logs

1178
00:44:11,250 --> 00:44:15,330
to that format first and send it up

1179
00:44:13,320 --> 00:44:19,770
you'll get things like process and

1180
00:44:15,330 --> 00:44:21,750
networking and file work all for free if

1181
00:44:19,770 --> 00:44:23,280
you wanted to have custom parse data you

1182
00:44:21,750 --> 00:44:25,620
can build parsers and grapple you can

1183
00:44:23,280 --> 00:44:28,110
extend the whole thing arbitrarily so if

1184
00:44:25,620 --> 00:44:29,880
you wanted to do that we should

1185
00:44:28,110 --> 00:44:33,240
definitely talk but I have done like the

1186
00:44:29,880 --> 00:44:36,030
SSH stuff was on Linux my colleague is

1187
00:44:33,240 --> 00:44:37,770
working on an AWS plug-in that'll let

1188
00:44:36,030 --> 00:44:39,570
you ingest things like cloud trail so

1189
00:44:37,770 --> 00:44:42,330
really it's it's arbitrary you can bring

1190
00:44:39,570 --> 00:44:45,080
your own model yeah and we've got one in

1191
00:44:42,330 --> 00:44:45,080
the back over there

1192
00:44:57,700 --> 00:45:03,790
yeah yeah so cycles are fine they're

1193
00:45:00,579 --> 00:45:05,380
probably so the graph the Python code

1194
00:45:03,790 --> 00:45:07,210
you saw is gonna compile down to a graph

1195
00:45:05,380 --> 00:45:08,859
query language and it's gonna handle

1196
00:45:07,210 --> 00:45:11,049
resolving cycles for you so if there's a

1197
00:45:08,859 --> 00:45:12,759
cycle in there it'll detect it but

1198
00:45:11,049 --> 00:45:14,200
cycles are natural right a process might

1199
00:45:12,760 --> 00:45:16,089
create a file which executes says

1200
00:45:14,200 --> 00:45:18,460
another process which IPC's back to that

1201
00:45:16,089 --> 00:45:20,410
parent process right so it has to handle

1202
00:45:18,460 --> 00:45:26,410
stuff like that and there's work in

1203
00:45:20,410 --> 00:45:29,129
there to do it yeah any other questions

1204
00:45:26,410 --> 00:45:29,129
oh yeah

1205
00:45:31,840 --> 00:45:34,959
[Music]

1206
00:45:38,890 --> 00:45:42,819
so grapples built off of a graph

1207
00:45:40,900 --> 00:45:45,579
database called D graph which has a very

1208
00:45:42,819 --> 00:45:47,170
like graph QL like query language it's

1209
00:45:45,579 --> 00:45:48,970
it's at least inspired by I think they

1210
00:45:47,170 --> 00:45:50,650
now support graph QL natively so you

1211
00:45:48,970 --> 00:45:53,558
could if you wanted to build your own

1212
00:45:50,650 --> 00:45:55,180
like grapple analyzer library you could

1213
00:45:53,559 --> 00:45:59,079
build it on top of graph QL if you want

1214
00:45:55,180 --> 00:46:00,940
to just use like pure graph QL you could

1215
00:45:59,079 --> 00:46:02,530
do that in grapple I believe today I

1216
00:46:00,940 --> 00:46:05,829
think it's on a version earlier nut or

1217
00:46:02,530 --> 00:46:12,490
new enough to support full graph QL yeah

1218
00:46:05,829 --> 00:46:15,500
I think that's it cool thank you thank

1219
00:46:12,490 --> 00:46:19,408
you thank you for speaking

1220
00:46:15,500 --> 00:46:19,409
[Applause]

